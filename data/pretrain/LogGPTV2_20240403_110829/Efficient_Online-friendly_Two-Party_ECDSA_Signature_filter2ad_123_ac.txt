9𝜅 (288B)
𝜅 (32B)
14𝜅 (505B)
9𝜅 (288B)
9𝜅 (288B)
𝜅 (32B)
𝜅 (32B)
𝜅 (32B)
𝜅 (32B)
offline
32ℓ𝑁 + 67𝜅 (12KB)
40ℓ𝑁 + 18𝜅 (15.5KB)
118ℓ𝑁 + 20𝜅 (44KB)
16ℓ𝑁 + 11𝜅 (6.3KB)
12𝜅 (192B)
16ℓ𝑁 + 18𝜅 (6.6KB)
10ℓ𝑁 + 12𝜅 (4.1KB)
6𝜅 (208B)
140𝜅 (4.5KB)
140𝜅 (4.5KB)
53𝜅 (1.7KB)
16𝜅2 (169.8KB)
20𝜅2 (180KB)
8𝜅2 (90.9KB)
Passes
8
9
4
3
3
9
3
3
8
8
3
2
7
3
required. There are several solutions to simply or even remove these
proofs, such as range proof with slack [26], and a non-standard
Paillier-EC assumption [19] (refer to Appendix D.3). Using range
proof with slack and Paillier-EC assumption, a Paillier-based MtA
requires 8 Paillier exponentiations and a transmission of 10 log 𝑁
bits. Depending on Paillier-EC assumption is applied or not, we
propose two Paillier-based schemes.
Castagnos et al. [7] replace Paillier encryption with Castagnos
and Laguillaumie [9] encryption over class group. The key feature
of CL-encryption is that it allows instantiations where the message
space is exactly Z𝑞. However, this kind of MtA requires new zero-
knowledge proofs performed on unknown order groups, which is
the heaviest part of all these constructions. Follow-up works [8, 33]
further improve the underlying zero-knowledge proof system.
We note that there are other instantiations from noisy Reed-
Solomon encodings (RS) [20] and Ring-LWE [2]. However, these
constructions are not very suitable for the parameters related to
ECDSA. We leave it as the future work to improve the underlying
MtA protocol with these techniques.
1.4 Related Works and Discussion
1.4.1 Related works. Efficient constructions of threshold ECDSA
fall into the following three categories. For more details, please
refer to [1].
Paillier-based Schemes. Following [27], Lindell [25] proposed a
competitive two-party ECDSA utilizing multiplicative sharing of
secret and nonce in combination with Paillier encryption. Lindell’s
scheme has the best overall efficiency while its online phase needs to
perform a Paillier decryption. Later, Lindell et al. [26], and Gennaro
and Goldfeder [19] proposed a full threshold ECDSA protocol with
additive shares. They both require at least 8 communication rounds
and their online phase is interactive. Recently, Canetti et al. [6]
proposed an online-friendly three-pass threshold ECDSA at the
cost of extra overhead.
CL-based Schemes. Castagnos et al. [7] addressed the problem of
relying on non-standard assumption in [25] by replacing Paillier
encryption with CL-encryption [9] which allows the message space
to match that of the signature space (Z𝑞). Castagnos et al. [8] further
extended their work to full threshold by following Gennaro and
Goldfeder’s blueprint. Very recently, Yuen et al. [33] improves the
underlying zero-knowledge proof of Castagnos et al.’s protocol,
thus reduces the overall bandwidth and running time. However,
the online phase of these schemes either requires the computation
of decryption or is interactive.
OT-based Schemes. The OT-based schemes are online-friendly
and do not require extra assumptions. Doerner et al. [15] used
multiplicative sharing of the signing key and the nonce as [7, 25],
and achieved fast online computation with the help of two MtA
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea561from the oblivious transfer. They also generalized their work to 2-
of-𝑛 cases. Later, they [16] proposed a full threshold scheme. These
schemes are very fast in signing time, while the communication
cost is the bottleneck.
1.4.2 Discussion. We further discuss issues related to round com-
plexity and which party obtain the final signature in existing ap-
proaches.
On the Communication Rounds of Signing. As shown in Table
2, our scheme and [7, 25] require only 3 rounds (i.e., passes). All the
other protocols except [15] require more communication rounds.
However, as mentioned by [15, Sec. III], it relied on the generic
group model (GGM) [31] to achieve this round reduction. Otherwise,
4 rounds are needed.
On the Generation of Final Signature. There are two commonly
used syntax regarding the output of the protocol, namely, 1) each
party generates a “signature share" and anyone (including a third
party) could compute the final signature from the signature shares;
2) only one party obtains the final signature. Notable examples of
the former include [6, 8, 16, 19, 26], and the latter include [7, 15, 25]
as well as our scheme. The obstacle in adding this property to our
scheme and [7, 15, 25] is that the nonce is shared multiplicatively,
and thus signature component “s" cannot be reconstructed from a
simple linear combination of signature shares.
1.5 Paper Organization.
The rest of paper is organised as follows. We review preliminaries
in section 2. Then we propose our protocol and prove its security in
section 3. In section 4, we show several instantiations of 2ECDSA.
Finally, section 5 presents a comprehensive analysis and comparison
with existing schemes.
2 PRELIMINARY
2.1 The ECDSA Signature
Let G be an elliptic curve group of order 𝑞 with base point (genera-
tor) 𝑃. The algorithm makes use of the hash function 𝐻. Curve co-
ordinates and scalars are represented in 𝜅 = log 𝑞 bits. The ECDSA
scheme works as follows [11].
(1) Keygen(1𝜅): on input 1𝜅
(2) Sign(𝑥, 𝑚): on input sign key 𝑥 and message 𝑚
• Choose a random 𝑥 ← Z𝑞, set 𝑥 as the private key.
• Compute 𝑄 = 𝑥 · 𝑃, and set 𝑄 as the public key.
• Choose a random 𝑘 ← Z𝑞, compute 𝑅 = (𝑟𝑥, 𝑟𝑦) = 𝑘 · 𝑃.
• Compute 𝑟 = 𝑟𝑥 mod 𝑞 and 𝑠 = 𝑘−1(𝐻(𝑚) + 𝑟𝑥) mod 𝑞.
• Output (𝑟, 𝑠) as the signature.
(3) Verify(𝑚; (𝑟, 𝑠)) calculates (𝑟𝑥, 𝑟𝑦) = 𝑅 = 𝑠−1𝐻(𝑚)·𝑃 +𝑠−1𝑟 ·
𝑄 and outputs 1 if and only if 𝑟 = 𝑟𝑥 mod 𝑞.
It is well known that for every valid signature (𝑟, 𝑠), the pair (𝑟,−𝑠)
is also a valid signature. To make (𝑟, 𝑠) unique, in this paper, we
mandate that the “smaller" of {𝑠,−𝑠} is the output.
2.2 Ideal Functionality for Two-Party ECDSA
The ideal functionality FECDSA for two-party ECDSA is shown in
Figure 1. It consists of two functions, namely, a key generation
Consider an elliptic curve group G of order 𝑞 with generator 𝑃,
then:
Keygen: On receiving Keygen(G, 𝑃, 𝑞) from 𝑃1 and 𝑃2
• Generate key pair (𝑄, 𝑥) where 𝑥 ← Z𝑞 and 𝑄 = 𝑥 · 𝑃.
• Choose a hash function 𝐻 : {0, 1}∗ → {0, 1}𝜅.
• Send 𝑄 and 𝐻 to 𝑃1 and 𝑃2.
• Store (G, 𝑃, 𝑞, 𝐻, 𝑥, 𝑄) and ignore further calls.
Sign: On receiving Sign(sid, 𝑚) from both 𝑃1 and 𝑃2, where keys
have been generated from a call to Keygen and sid has not been
used
• Choose 𝑘 ← Z𝑞 and compute 𝑅 = (𝑟𝑥, 𝑟𝑦) = 𝑘 · 𝑃.
• Compute 𝑟 = 𝑟𝑥 mod 𝑞 and 𝑠 = 𝑘−1(𝐻(𝑚) + 𝑟𝑥) mod 𝑞.
• Send (𝑟, 𝑠) to both 𝑃1 and 𝑃2.
• Store (Complete, sid) in the memory.
Figure 1: The functionality FECDSA for two-party ECDSA
signature.
Setup: On receiving (setup) from 𝑃1 and 𝑃2
• Store and send (setup-complete) to 𝑃1 and 𝑃2.
Multiplication: On receiving (input, sid, 𝑎 ∈ Z𝑞) from 𝑃1,
(input, sid, 𝑏 ∈ Z𝑞) from 𝑃2 where sid has not been used, if (setup-
complete) exists,
• Sample 𝛼 ∈ Z𝑞 and compute 𝛽 = 𝑎𝑏 − 𝛼 mod 𝑞.
• Send (output-1, sid, 𝛼) to 𝑃1
• Send (output-2, sid, 𝛽) to 𝑃2.
Figure 2: The functionality FMtA of multiplicative-to-
additive protocol.
function Keygen, called once, and a signing function Sign, called
an arbitrary number of times under the generated key.
2.3 The Multiplicative-to-Additive (MtA)
Functionality
The FMtA functionality, listed in Figure 2, is parameterized by the
group order 𝑞. It runs with two parties, 𝑃1 and 𝑃2, who may partici-
pate in the Setup phase once, and the Multiplication phases as many
times as they wish. FMtA runs and outputs 𝛼, 𝛽, from two parties
inputs, respectively, 𝑎 and 𝑏, under the restriction that 𝛼 + 𝛽 = 𝑎𝑏
mod 𝑞.
It could be instantiated from OT [15], Paillier encryption [19, 26],
CL encryption [8], etc. Please refer to Sec. 4 for more details.
2.4 Zero-Knowledge Proof
Let R be a polynomial-time-decidable binary relation. The corre-
sponding language 𝐿 consists of statement 𝑥 such that there exists
witness 𝑤 and (𝑥, 𝑤) ∈ R. We specify 𝐿 as an NP language.
An interactive proof consists of an interactive prover algorithm
𝑃 and a verifier algorithm 𝑉 that runs in PPT time. We call (𝑃, 𝑉)
an interactive proof for relation R if it has the completeness and
soundness properties. Completeness means that for every 𝑥 ∈ 𝐿,
⟨𝑃, 𝑉⟩(𝑥) is always 1. Soundness means that for every 𝑥 ∉ 𝐿 and ev-
ery prover 𝑃∗, Pr[⟨𝑃∗, 𝑉⟩(𝑥) = 1] is negligible. When the soundness
holds for computationally bounded provers, the system is usually
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea562called an “argument". In this paper, both proof and argument are
collectively referred to as proof.
Definition 2.1 (zero-knowledge). Let (𝑃, 𝑉) be an interactive proof
for some language 𝐿. (𝑃, 𝑉) is zero knowledge if for every PPT
verifier 𝑉 ∗ there exists a PPT simulator Sim such that the two
ensembles {𝑉 𝑖𝑒𝑤 𝑃
if the two ensembles are statistically (resp. computationally) indis-
tinguishable.
𝑉 ∗(𝑥)}𝑥∈𝐿 and {Sim(𝑥)}𝑥∈𝐿 are identical.
We could also define statistical (resp. computational) zero-knowledge,
Definition 2.2 (proof-of-knowledge). Let 𝜁 : {0, 1}∗ → [0, 1] be a
function. (𝑃, 𝑉) is a proof of knowledge for relation R with knowl-
edge error 𝜁 if the following properties are satisfied:
• Completeness: If 𝑃 and 𝑉 follow the protocol on input 𝑥
and private input 𝑤 to 𝑃 where (𝑥, 𝑤) ∈ R, then 𝑉 always
accepts.
• Knowledge Soundness: there exists a probabilistic oracle ma-
chine Ext such that for every prover function 𝑃∗ and every
𝑥 ∈ 𝐿, Ext satisfies the following: Denote 𝜖(𝑥) the proba-
bility that 𝑉 accepts on input 𝑥 after interacting with 𝑃∗.
If 𝜖(𝑥) > 𝜁 (𝑥), on input 𝑥 with access to 𝑃∗, Ext runs in
expected polynomial time and outputs a string 𝑤 such that
(𝑥, 𝑤) ∈ R with probability at least 𝜖(𝑥) − 𝜁 (𝑥).
We remark that every zero-knowledge proof of knowledge (ZKPoK)
in this paper is transformed to non-interactive [4] using the Fiat-
Shamir paradigm [18] in the random oracle model.
ZKPoK of Discrete Logarithm. Define the relation
|𝑅, 𝑃 ∈ G, 𝑅 = 𝑥 · 𝑃},
(𝑅, 𝑃), 𝑥(cid:1)
R𝐷𝐿 := {
(cid:0)