✔
✔
✔
✔
✔
✔
✔
✔
✔
Table 1: A survey of recent coverage-guided fuzzers and their coverage metrics
(edges/blocks and hit counts). Key: ➤ (edges), ■ (blocks).
Basic Block Coverage: Basic blocks refer to straight-line (i.e.,
single entry and exit) instruction sequences beginning and ending
in control-flow transfer (i.e., jumps, calls, or returns), and comprise
the nodes of a program’s control-flow graph. Tracking basic block
coverage necessitates instrumenting each to record their execution
in some data structure (e.g., an array [44] or bitmap [59]). Two
modern fuzzers that employ basic block coverage are VUzzer [43]
and its successor TIFF [29].
Edge Coverage: Edges refer to block-to-block transitions, and
offer a finer-grained approximation of paths taken. As Table 1
shows, most fuzzers rely on edge coverage; AFL [59] and its many
derivatives [18] record edges as hashes of their start/end block
tuples in a bitmap data structure; while LLVM SanitizerCoverage-
based [50] fuzzers honggFuzz and libFuzzer track edges from the
block level by splitting critical edges (edges whose start/end blocks
have at least two outgoing/incoming edges, respectively).
Hit Count Coverage: Hit counts refer to block/edge execu-
tion frequencies, and are commonly tracked to reveal progress in
state exploration (e.g., iterating on a loop). libFuzzer, AFL, and AFL
derivatives approximate hit counts using 8-bit “buckets”, with each
Figure 2: Coverage-guided Tracing’s core workflow.
Given a target binary, CGT constructs two versions: a coverage
oracle with an interrupt (e.g., 0xCC) inserted at every basic block,
and a tracer instrumented for conventional fuzzing coverage tracing.
As shown in Figure 2, CGT runs each test case first on the oracle;
if an interrupt is hit, the test case’s full coverage is then captured
with the tracer, and all visited blocks’ have their corresponding
oracle interrupts removed; and if no interrupt was hit, the test
case is simply discarded following its run on the oracle. Most test
cases (> 99.9% [37]) revisit already-seen coverage and thus will
not trigger interrupts, sparing them of tracing; and because the
oracle’s mechanism of reporting new coverage is just interrupts
(and not instrumentation callbacks) this majority of test cases are
run at speed equivalent to the original binary’s—giving CGT a
near-native runtime overhead of 0.3%, and 500–600% higher test
case throughput over the conventional always-on tracing used in
binary-only fuzzing like AFL-Dyninst [26] and AFL-QEMU [59].
The Code Coverage Dilemma: Though CGT enables orders-of-
magnitude higher binary-only fuzzing throughput, it is currently in-
compatible with all of the state-of-the-art coverage-guided fuzzers
we surveyed in Table 1: whereas CGT presently supports only a ba-
sic block coverage level, 25/27 fuzzers instead rely on edge coverage,
and 26/27 further track hit counts. Allowing the broad spectrum of
coverage-guided fuzzers to obtain the performance benefits of CGT
necessitates an answer to this disparity in code coverage metrics.
CoverageTracing andExecutionMonitoring2TestCaseTriageTestCaseGen.13test casesinstrumented targetInterestOraclehit interruptno interruptseed for mutationremove interrupts3new crashnew coverageSession 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3533 A COVERAGE-PRESERVING CGT
Coverage-guided Tracing (CGT) accelerates binary-only fuzzing
by restricting the expense of code coverage tracing to only the few
test cases that reach new coverage. Unfortunately, CGT’s lack of
support for fuzzing’s most common coverage metrics, edges and
hit counts, leaves its performance benefits untapped for nearly all
of today’s state-of-the-art fuzzers.
To address this incompatibility, we observe how CGT achieves
lightweight coverage tracking at the control-flow level; and de-
vise two new techniques exploiting this paradigm to facilitate
finer-grained coverage—jump mistargeting (for edge coverage) and
bucketed unrolling (for hit counts)—without compromising CGT’s
minimally-invasive nature. Below we discuss the inner workings
of jump mistargeting and bucketed unrolling, and the underlying
insights and observations that motivate them.
(a) bsdtar
(b) cert-basic
(c) clean_text
(d) jasper
Figure 3: Visualization of the proportion of critical edges by transfer type
encountered throughout fuzzing.
3.1 Supporting Edge Coverage
AFL and its derivatives utilize hash-based edge coverage, instru-
menting each basic block to dynamically record edges as hashes of
their start/end blocks. However, as CGT’s key speedup comes from
replacing per-block instrumentation with far cheaper interrupts, it
is thus incompatible with AFL-style hash-based edge coverage.
libFuzzer and honggFuzz track edges using LLVM’s Sanitizer-
Coverage instrumentation, which forgoes hashing to instead infer
edges from the set of covered blocks. For example, given a control-
flow graph with edges #»
bc, covering blocks a and b implies
covering edge #»
bc. How-
ever, such block-centric edge coverage does not suffice if there exists
a third edge #»ac. In this case, covering blocks a, b, and c implies
bc; but since c has already been covered, there is no
edges #»
way to detect #»ac. Formally, these problematic edges are referred to
ab; and subsequently covering c implies #»
ab and #»
ab and #»
as critical edges: edges whose start/end blocks have two or more
incoming/outgoing edges, respectively [50].
Program
Total Edges
Crit. Edges
bsdtar
cert-basic
clean_text
jasper
readelf
sfconvert
tcpdump
unrtf
42911
7544
8762
21637
30959
8358
36200
2505
Prop.
0.23
0.22
0.18
0.27
0.24
0.24
0.20
0.19
22%
9867
1642
1592
5878
7301
2022
7312
465
Mean
Table 2: Proportion of critical edges in eight real-world programs.
1. Conditional target
2. Conditional fall-through
3. Indirect jump
4. Indirect call
5. Return
Table 3: Examples of x86 critical edge instructions by transfer type.
(e.g., jle 0x100’s True branch)
(e.g., jle 0x100’s False branch)
(e.g., jmp %eax)
(e.g., call %eax)
(e.g., ret)
CndFall
IndJmp
IndCall
CndTarg
Program
bsdtar
cert-basic
clean_text
jasper
readelf
sfconvert
tcpdump
unrtf
Ret
0.00
0.05
0.10
0.00
0.14
0.13
0.01
0.02
5.7%
Table 4: Proportion of encountered critical edges by transfer type.
1.00
0.84
0.87
0.97
0.70
0.84
0.98
0.94
89.3%
0.00
0.10
0.02
0.03
0.03
0.02
0.01
0.03
2.9%
0.00
0.02
0.00
0.00
0.01
0.00
0.00
0.00
0.4%
0.00
0.00
0.01
0.00
0.12
0.00
0.00
0.00
1.6%
Mean
Diving deeper into critical edges: Supporting block-centric
edge coverage requires resolving all critical edges. LLVM’s Sani-
tizerCoverage achieves this by splitting each critical edge with a
“dummy” block, creating two new edges. Continuing example § 3.1,
dummy d will split critical edge #»ac into #»
dc, thus permitting
path #   »
abc. But while such approach is
indeed compatible with CGT’s block-centric, interrupt-driven cov-
erage, our analysis of eight real-world binaries shows over 1 in 5
edges are critical (Table 2), revealing that splitting every critical edge
with a new block leaves a significant control-flow footprint—and
inevitably, a higher baseline binary fuzzing overhead.
adc to be differentiated from #   »
ad and #»
To understand the impact of critical edges on fuzzing, we instru-
ment the same eight real-world binaries and dynamically record
their instruction traces.1 In conjunction with the statically-generated
control-flow graphs, we analyze each trace to measure the occur-
rences of critical edges; and further quantify them by transfer type,
which on the x86 ISA takes on one of five forms (shown in Table 3).2
As shown in Figure 3 and Table 4, our findings reveal that con-
ditional jump target branches make up an average of 89% of all
dynamically-encountered critical edges.
Observation 1: Conditional jump target branches make up the vast
majority of critical edges encountered during fuzzing.
1We limit instruction tracing to one hour of fuzzing due to the massive size of the
resulting trace data (ranging from 200GB to 7TB per benchmark).
2As critical edges are, by definition, one of at least two outgoing edges from their start-
ing block, transfers with at most one destination (direct jumps/calls and unconditional
fall-throughs) can never be critical edges.
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea354Jump Mistargeting. Splitting critical edges with dummy
3.1.1
blocks adds a significant number of new instructions to each exe-
cution, and with it, more runtime overhead—slowing binary-only
fuzzing down even further. For the common case of critical edges
(conditional jump target branches), we observe that the edge’s des-
tination address is encoded within the jump instruction itself, and
thus can be statically altered to direct the edge elsewhere. Our ap-
proach, jump mistargeting, exploits this phenomena to “mistarget”
the jump’s destination so that it resolves into a CGT-style interrupt—
permitting a signaling of the critical edge’s coverage without any
need for a dummy block (i.e., identifying edge #»ac in § 3.1’s example
without the additional dummy block d).
An overview of jump addressing: The x86 ISA has three types
of jumps: short, near (or long), and far. Short and near jumps achieve
intra-segment transfer via program counter (PC)-relative addressing:
short jumps use 8-bit signed displacements, and thus can reach
up to +127/-128 bytes relative to the PC; while near jumps use
much larger 16–32-bit signed displacements. In contrast, far jumps
achieve inter-segment transfer via absolute addressing (i.e., to a fixed
location irrespective of the PC). All three jumps share the common
instruction layout of an opcode followed by a 1–4 byte destination
operand (an encoding of the relative/absolute address). Since the
adoption of position-independent layouts, most x86/x86-64 code
utilizes relative addressing.
Redirecting jumps to interrupts: Jump mistargeting alters
conditional jump target critical edges to trigger interrupts when
taken. When used in CGT, its effect is identical to combining inter-
rupts with conventional (yet more invasive) edge splitting—while
avoiding the associated cost of inserting new blocks. We envision
two possible jump mistargeting strategies (Figure 4): one leveraging
embedded interrupts, and another with zero-address interrupts.
Figure 4: A visualization of jump mistargeting via embedded (left) and zero-
address interrupts (right).
(1) Embedded Interrupts. The simplest mistargeting approach
is to replace each jump’s destination with a garbage address,
ideally resolving to an illegal instruction (thus interrupting
the program). However, as many instructions have one-byte
opcodes, a carelessly-chosen destination may very well initi-
ate an erroneous sequence of instructions.
A more complete strategy is to instead redirect the jump
to a location where an interrupt opcode is embedded. For
example, the byte sequence [00 CC] at address 0x405500
normally resolves to instruction [add %cl,%ah]; but as 0xCC
is itself an opcode for interrupt int3, it suffices to redirect the
target critical edge jump to 0x405501, which subsequently
fetches and executes 0xCC, thus triggering the interrupt in-
struction. A key challenge (and bottleneck) of this approach
is scanning the bytespace in the jump’s displacement range
to pinpoint embedded interrupts.
(2) Zero-address Interrupts. As nearly all x86/x86-64 code is
position-independent and hence uses PC-relative address-
ing, an alternative and less analysis-intensive mistargeting
approach is to interrupt the program by resolving the jump’s
displacement to the zero address (i.e., 0x00). For example,
taking the conditional jump represented by byte sequence
[0F 8F 7C 00 00 00] at address 0x400400 normally
branches to address 0x400400+6+0x0000007C (i.e., the PC
+ instruction length + displacement); but to resolve it to the
zero address merely requires the displacement be rewrit-
ten to 0xFFBFFB7E (i.e., the negative sum of the PC and
instruction length). As 8–16 bit displacements do not pro-
vide enough “room” to cover the large virtual address space
of modern programs, zero-address mistargeting is generally
restricted to jumps with 32-bit displacements, however, most
x86-64 branches fit this mold.
Technique 1: Jumps’ self-encoded targets can be rewritten to resolve
to addresses that result in interrupts, enabling binary-level CGT edge
coverage at native speed (i.e., without needing to insert additional
basic blocks).
3.2 Supporting Hit Counts
Most fuzzers today adopt AFL-style [59] bucketed hit count cov-
erage, which coarsely tracks changes in block/edge execution fre-
quencies over a set of eight ranges: 0–1, 2, 3, 4–7, 8–15, 16–31,
32–127, and 128+. Unfortunately, CGT’s interrupt-driven coverage
currently only supports a binarized notion of coverage (i.e., tak-
en/not taken), and thus requires a fundamentally new approach to
support finer-grained frequencies.
Diving deeper into hit counts: In exploring the importance of