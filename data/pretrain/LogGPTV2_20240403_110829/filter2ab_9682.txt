### Title: EU-22 Select Bugs from Binary Where Pattern Like CVE-1337-Days

**Abstract:**
Static code review is a powerful method for identifying vulnerability variants and exploitation primitives. However, two significant challenges in static analysis are the effective extraction of code patterns from a large number of diverse bugs and the efficient searching of these patterns across numerous modules, especially in closed-source software like Windows. This presentation will share our practices and experiences in addressing these challenges.

**Key Topics:**

1. **Code Pattern Extraction:**
   - We will discuss the extraction of four unique code patterns associated with different types of vulnerabilities and exploitation primitives.
   - These patterns include:
     - Classical file hijacking vulnerabilities
     - Reparse point memory corruption vulnerabilities
     - ACL overwriting logic vulnerabilities
     - Pool spray primitives for RDP exploits on Windows

2. **Case Studies:**
   - **ACL Overwriting Logic Vulnerability:**
     - We will present an interesting 0-day logic vulnerability in Hyper-V, which was initially rejected by Microsoft but later accepted for patching and bounty eligibility after we provided a new attack vector. The full story behind this vulnerability will be revealed.
   - **Pool Spray Primitive:**
     - We will demonstrate the discovery of three unique and universal pool spray primitives for RDP exploits. These primitives can be used in the well-known RDP vulnerability BlueKeep (CVE-2019-0708) and differ from all other public exploitation techniques.

3. **Detailed Methodology:**
   - **Vulnerability Model Definition:**
     - We will define the models used to identify and classify vulnerabilities.
   - **Pattern Extraction:**
     - We will explain how we extract the specific code patterns for each vulnerability type.
   - **Code Query Construction:**
     - We will detail the construction of queries to search for these patterns in binary code.
   - **Result Review and PoC Creation:**
     - We will cover the process of reviewing the results and creating proof-of-concept (PoC) exploits for each identified vulnerability.

4. **Leviathan: A New Binary Code Pattern Searching Tool:**
   - We introduce Leviathan, a tool designed to automatically find vulnerabilities and exploitation primitives using code patterns in binaries.
   - **Features:**
     - Taint tracking and cross-binary code path tracing
     - SQL query interface for ease of use
   - **Powered by:**
     - IDA Pro's Hex-Rays ctree APIs
     - Our core code pattern search primitives

**Conclusion:**
This presentation will provide a comprehensive overview of our approach to static code analysis, including practical examples and the introduction of a new tool, Leviathan, to facilitate the process. Attendees will gain insights into advanced techniques for vulnerability discovery and exploitation in closed-source software like Windows.

**Select your own bugs and primitives from binary where you like!**