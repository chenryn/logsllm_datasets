Change the Daemon option from Off to On.
Change the webcam_localhost parameter from On to Off.
Again, save and exit.
5. Start the video stream:
sudo service motion start
To view your live video stream, open a web browser (I suggest Iceweasel or Netsurf
[http://is.gd/6AfWdc]) and navigate to the following URL:
http://localhost:8081
If you want to access your webcam remotely on your LAN, substitute your Pi’s IP
address for localhost.
You can tweak detailed parameters of the stream including stuff like the following:
 Video dimensions
 Frame rate
 Video quality
 Capture storage directory
by editing /etc/motion/motion.conf. You can see my goofy mug (again) in Figure 16.10.
FIGURE 16.10 This is Motion webcam output.
When you want to stop the stream, issue the following Terminal command:
sudo service motion stop
The Pale Blue Dot blog (http://is.gd/XS6fY8) has good instructions for setting up Motion to run as a
service and auto-start each time your Pi boots up. For security reasons, though, I advise you to be
careful about this, especially if your Pi is publicly accessible.
 You’re probably wondering if the raspistill and raspivid commands that were written to function with
the official Raspberry Pi Camera Board work with a third-party webcam. I’ve tested this out for you,
and the answer is no. If you try to run raspistill or raspivid against a third-party webcam, you will
receive an error message that says in part:
Click here to view code image
Camera is not detected. Please check carefully the camera module is installed
correctly.
Setting Up Your Webcam
 As you just saw, Motion provides you with a video stream and a web browser in one fell swoop. But
what if you wanted your Raspberry Pi cam to monitor a particular area (be it your front door, your
back yard, your fish tank, whatever) and snap a picture at regular intervals?
 Our current Motion setup feeds a live stream to a tiny web server on port 8080 (configurable through
montion.conf, naturally).
Task: Setting Up a Time-Lapse Webcam
Let’s say that your goal is to have the webcam snap a picture every 30 seconds and
save the image snapshot files in /home/pi/webcam. To do this let’s try out a different piece
of webcam software: fswebcam (). Be sure to stop the Motion service by issuing sudo
service motion stop before proceeding with the following procedure:
1. Install fswebcam:
Click here to view code image
sudo apt-get install fswebcam
2. You can get a run of the tool’s command-line help:
fswebcam --help
3. Now let’s snap a decent-sized image. Note that fswebcam uses the default ID
/dev/video0 for the first webcam it sees; assuming you have only one webcam installed,
this ID should work fine for your purposes.
Click here to view code image
fswebcam -r 1024 x 768 -d /dev/video0 picname.jpg
In the previous example, the -r switch specifies the image dimensions, and the -d switch
specifies the output directory. Finally, comes the name of the output image file in JPEG
format.
Of course, picname is a generic identifier for your picture file.
4. Create a configuration file for fswebcam so you can set your preferred defaults,
especially your output directory:
cd
sudo nano .fswebcam.conf
5. When you are in the file, add these lines, customizing the values to your liking (I’m
showing you my own setup here for illustrative purposes):
Click here to view code image
device /dev/video0
input 0
loop 15
skip 20
background
resolution 320x240
set brightness=60%
set contrast=13%
top-banner
title "Warner Webcam"
timestamp "%d-%m-%Y %H:%M:%S (%Z)"
jpeg 95
save /home/pi/webcam/viewcam.jpg
palette MJPEG
Pay particular attention to the timestamp parameter; this is where you can differentiate
your captured image files as well as make them easier to browse. Note also all the options
you have to customize the webcam’s default behavior.
6. To start fswebcam using your new configuration file (assuming that the config file
resides in the root of your home directory), type
fswebcam -c ~/.fswebcam.conf
In case you were wondering, the dot before the .fswebcam.conf makes the file hidden.
This is normally the attribute that is attached to system and configuration files to keep
novices from accidentally messing with them.
7. To stop the fswebcam process, issue this command:
pkill fswebcam
8. To create a repeating operating system-level job that snaps a picture every minute, turn
to Bash shell scripting and the age-old Linux command cron. First you must create a shell
script:
sudo nano camscript.sh
Note: About cron
The cron (pronounced krahn) utility has been around since the earliest days of
Unix and Linux. Use cron to schedule tasks to run once or on a schedule. In fact the
name cron derives from the Greek word chronos, which means time. Specifically, the
tasks that cron runs are typically binary commands or shell scripts.
9. Enter the following contents into the script file:
Click here to view code image
#!/bin/sh
filename=$(date +”%m-%d-%y|||%H%M%S”)
fswebcam -r 356x292 -d /dev/video0 $filename.jpg
cp $filename.jpg /home/pi/webcam
I’ll explain each of those four lines for you:
1: This is called a “shebang” line and points Linux to the location of the sh command
interpreter.
2: This creates a variable named filename that gives a date and time stamp as its value.
3: This invokes fswebcam; in this example we aren’t using a configuration file.
4: This copies the captured image (stored in the filename variable) to a subfolder. We
could add additional code here to perform an upload to Dropbox, FTP transfer, and so
forth.
10. Mark your new shell script as executable:
sudo chmod +x camscript.sh
11. Start the crontab editor for the pi user:
crontab -e
12. The nano editor opens. Move your insertion point to the bottom of the file and create a
cron job to run the camscript.sh shell script every minute:
Click here to view code image
*/1 * * * * /home/pi/camscript.sh
The previous syntax looks strange with all the asterisks, doesn’t it? In a nutshell, the Cron format
uses six fields, with an asterisk representing the entire range of possible values for that field.
Moving from left to right, the fields are:
 Minute (range 0-59)
 Hour (range 0-23)
 Day of the Month (range 1-31)
 Month of the Year (range 1-12)
 Day of the Week (range 1-7, with 1 signifying Monday)
 Year (range 1900-3000)
 Thus, a Cron statement of * /1 * * * * denotes an interval of one minute with no other limitations,
be they day, month, or year.
 I found an outstanding article on Cron format that you’ll want to have a look at if you want more
information: http://is.gd/bCCmOm.
 Check out Figure 16.11 to see what my setup looks like. It works like a charm!
FIGURE 16.11 This is my time-lapse webcam. At left in the browser window you can see
the live video feed. At right you can see my output folder superimposed; this is where the .jpg
image snapshots are stored.
Adding a Rechargeable Battery Pack to Your Pi Camera
 Attaching a rechargeable battery pack to your Raspberry Pi (especially when combined with a Wi-Fi
dongle) makes your Pi eminently flexible. In this scenario, you could feasibly place your Pi webcam
anywhere, either indoors or outdoors, and happily snap pictures, record video, or both. You can even
program the Pi to send the capture files to a desktop computer by using FTP!
 Raspberry Pi enthusiasts around the world have developed novel ways to provide 5-volt battery
power to their Pis. Some of these ideas involve car batteries, 12V vehicle power sockets, and the
like. However, we have much more basic and reliable methods available to us.
 I suggest you look into a Lithium-Ion (Lion) battery pack that includes a Micro-B USB plug and
regulated 5V output. This option means that (a) you can plug the Lion portable battery into your
desktop computer or a powered USB hub to charge the battery; and (b) you can simply plug the
Micro-B plug into your Pi’s power port to give it portable juice on the go!
 As usual, the Embedded Linux wiki (http://is.gd/ETvw9J) has a list of external battery packs that
have been verified to work with the Raspberry Pi.
 Remember that the standard power draw of the Model B board is 500mA. The amount of energy in a
battery pack is ordinarily given in milliampere hours (mAh). This means that a 1,000mAh battery
pack can deliver 1000mA of power for one hour, or 500mA for two hours.
 Adafruit sells a Lion battery pack (http://is.gd/7ID1JP) for $59.95 that contains 3300mAh worth of
power. This equates to over six hours of continuous power to a normally operating Raspberry Pi unit.
Pretty cool, eh?
 Some Lion portable batteries, like my own Scosche IPDBAT2 shown in Figure 16.12, have two 5V
USB ports with different current supplies: 1A and 2.1A. This difference is normally intended to
allow the battery pack to supply power to either the iPhone (1A current) or iPad (2.1A current). For
the Pi, I suggest you go with the 2.1A port.
FIGURE 16.12 This is my Raspberry Pi battery pack: It gives me over six hours of power!
Python and Your Webcam
A good choice for blending the power of Python programming with your webcam is the SimpleCV
vision library (http://is.gd/Db2osA). One aspect of SimpleCV that you might want to investigate is the
motion and face detection capabilities built into the library.
Task: Setting up SimpleCV
Before you begin, make sure your USB webcam is connected, detected, and ready to
rock. You should also stop any existing webcam services you might have running on your Pi
and then follow these steps:
1. Install the SimpleCV libraries:
Click here to view code image
sudo apt-get install python-opencv python-scipy python-numpy python-pip
sudo pip install https://github.com/ingenuitas/SimpleCV/zipball/master
2. Verify that the SimpleCV Python 2 library loads correctly in the Python interpreter:
python
import SimpleCV
print dir(SimpleCV)
3. Press Ctrl+D to exit Python.
4. You should create a very, very simple Python 2 script to test SimpleCV’s functionality.
Begin by creating the script file:
cd
sudo nano hellocamera.py
5. Add the following code to the new script file:
Click here to view code image
#!/usr/bin/env python
from SimpleCV import Image, Display
from time import sleep
myWindow = Display()
myImage = Image("webcam.jpg")
myImage.save(myWindow)
while not myWindow.isDone():
    sleep(0.1)
In a nutshell, this Python 2 script performs the following actions:
 Imports relevant functions (methods) from the SimpleCV and sleep modules
 Creates a display window
 Loads a webcam snapshot to the newly created window and saves the file to the current
working directory
 Prevents the script from terminating immediately after the webcam snapshot is taken
Save your work and close the file when you’re finished.
6. Now let’s run the Python script file from a shell prompt:
python hellocamera.py
Within moments, you should see your webcam snapshot appear on screen (see Figure
16.13). Press Ctrl+C to abort the script execution.
FIGURE 16.13 Using SimpleCV to access a third-party webcam. The goofy subject is yours
truly, and the bit of artwork partially visible above his head is courtesy of the author’s three-
year-old daughter Zoey.
Chapter 17. Raspberry Pi Security and Privacy Device
When it comes to electronics and computing, the words security and privacy could mean a lot of
different things. In this case I’m talking about using your Pi to maximize your security and privacy
when online. Even more specifically, I’m referring to securing your personal and financial details.
 I want to lead off this chapter by presenting to you three unfortunate scenarios that can be prevented
by configuring your Raspberry Pi as a security and privacy device.
Scenario #1: You live in the United States, and you enjoy your subscription to Netflix very
much. However, you find that whenever you visit other countries, especially in Europe and the
Far East, that you are unable to access the Netflix services you pay for due to international
licensing laws.
Scenario #2: You enjoy taking your laptop computer to the neighborhood coffee house and
working while sipping espresso and munching scones. The free, public Wi-Fi service gives you
adequate Internet access speed. Nonetheless, you discover three months later that your bank
accounts have been compromised because a hacker captured your logon credentials over the air
during one of your coffee house web browsing sessions.
Scenario #3: You are a traveling salesperson who spends much of your time doing your
work and browsing the Web from hotel rooms. You’ve become increasingly irritated at how
much of the Web is blocked by hotel access restrictions.
 This chapter is all about leveraging your $25 or $35 Raspberry Pi computer to provide yourself with
secure and potentially anonymous Internet access. Your first order of business, of course, is to define
your terms. Let’s start off with the concept of the virtual private network and why it’s important.
Encrypting Your Internet Connection with a VPN
A virtual private network, or VPN, is a secure, point-to-point network connection that is tunneled
through an unsecure medium. You can certainly agree that the public Internet represents an unsecure
medium; a wild jungle is more like it.
 A VPN involves the construction of a temporary or permanent data communications channel that takes
advantage of the Internet’s speed and reliability, but offers security in that all traffic tunneled through
the VPN connection is encrypted.
 VPNs are the de facto method that businesses use to offer remote employees access to confidential,
internal network resources such as shared files, intranet websites, and so forth.
 If there is a downside to VPNs, it is their lack of speed. Due to the heavy overhead of data encryption
and decryption, network access over a VPN pipe is noticeably, and sometimes unbearably, slower
than over an unencrypted link.
 That brings up the delicate balancing act between increased security on one hand and user
convenience on the other. Where are you comfortable drawing the line?
 From the perspective of the corporate IT manager, setting up a VPN server can be pretty tough. You
ordinarily have to provision dedicated hardware and software in order to manage the myriad network
protocols that constitute VPN circuits.
 What many people don’t know is that it is relatively easy to create your own VPN environment, even
at home, by using hosted VPN services. Two major players in the hosted VPN arena are
 LogMeIn Hamachi: http://is.gd/PtTdkV
 OpenVPN: http://is.gd/uSoYCp
 What is cool about both of these services is that because they operate over standard web protocols,
you don’t have to forward any ports on your router or worry about your Internet access provider
blocking traditional VPN ports.
 For instance, I’ve stayed at hotels that charge guests two different prices for Internet access
depending on whether the guest needs VPN access or not.
 However, in my experience Hamachi is much more of a turnkey solution than OpenVPN, so I focus on
this product in this chapter.
 Okay...so you understand that a VPN connection gives you security and privacy by protecting all data
between your computer and the Internet. What does that have to do with the Raspberry Pi? Moreover,
how does a VPN enable you to cloak your geographic location?
 The truth of the matter is, a VPN alone cannot give you true web browsing freedom. For that purpose
we need a proxy server.
Browsing Where You Want via a Proxy Server
A proxy server is a networking device that connects to Internet resources on behalf of another
computer. For instance, you may find that network broadcasting agreements prevent your favorite
sports game from being broadcast in your current location. Wouldn’t it be cool to have your computer
appear as if it were connecting from another location so you could watch your game?
Note: Public Proxies and the Network Administrators
Many network administrators detest public proxies because they allow users to bypass
corporate web browsing filters. Businesses oftentimes set up what’s called a transparent
proxy that forces all internal network traffic through the device before it hits the Internet.
To that point, many transparent proxies periodically download blacklists of known public
proxies to thwart unauthorized use of the network.
Pipelining your network traffic through a proxy server offers you privacy because as far as your
Internet access provider is concerned, you are making an ordinary, run-of-the-mill web browsing
request to a particular server.
 In actuality, that particular server is a proxy server that is capable of redirecting your web browsing
to wherever you need or want to go (see Figure 17.1). It’s common for citizens of certain countries to
use web proxies to bypass their government’s Internet access filters.
FIGURE 17.1 How a web proxy works
Let me explain what you’re seeing in Figure 17.1. Your computer is unable to connect to a target
website due to filtering from your Internet access provider. This “Internet access provider” could be
your residential Internet Service Provider (ISP), a corporate Internet connection, or a public Wi-Fi
hotspot.
 By contrast, when you configure your web browser to route web traffic through a proxy server, then
access to the otherwise blocked website is unrestricted. Why? Because from the perspective of your
ISP or Internet access provider, you are connecting to a “safe” server. The proxy server masks your
true web browsing targets from your ISP.
 Now for the good news: You can configure your Raspberry Pi as both a VPN endpoint as well as a
proxy server! Take a look at Figure 17.2.
FIGURE 17.2 Network topology for a Raspberry Pi-based VPN and proxy solution
Let’s step through each point in this process: