读取的字符不是数字型字符的话，计算结果就不会正确。在处理多字符字符串时还要考虑数权问题，本例会把
前一步的结果（即变量 rt）乘以 10，再累加本次转换出来的数字。换句话说，在转换单个字符的每次迭代过程
中，转换函数都应当给上一次迭代的转换结果分配一次合理的数权。最后一个被转换的字符不会被提高数权。 
42.1.1  64 位下的 MSVC 2013 优化 
指令清单 42.1  64 位下的 MSVC2013 优化 
s$ = 8 
my_atoi PROC 
; load first character 
          movzx   r8d, BYTE PTR [rcx] 
; EAX is allocated for "rt" variable 
; its 0 at start' 
          xor      eax, eax 
; first character is zero-byte, i.e., string terminator? 
; exit then. 
          test     r8b, r8b 
          je       SHORT $LN9@my_atoi 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
460 
逆向工程权威指南（上册） 
$LL2@my_atoi: 
         lea       edx, DWORD PTR [rax+rax*4] 
; EDX=RAX+RAX*4=rt+rt*4=rt*5 
         movsx     eax, r8b 
; EAX=input character 
; load next character to R8D 
         movzx     r8d, BYTE PTR [rcx+1] 
; shift pointer in RCX to the next character: 
         lea       rcx, QWORD PTR [rcx+1] 
         lea       eax, DWORD PTR [rax+rdx*2] 
; EAX=RAX+RDX*2=input character + rt*5*2=input character + rt*10 
; correct digit  by subtracting 48 (0x30 or '0') 
         add        eax, -48   
   ; ffffffffffffffd0H 
; was last character zero? 
         Test       r8b, r8b 
; jump to loop begin, if not 
         jne        SHORT $LL2@my_atoi 
$LN9@my_atoi: 
         ret        0 
my_atoi ENDP 
字符串的第一个字符可能就是终止符。在这种情况下，函数不应当进入字符转换的迭代过程。此外，
编译器没有分配“乘以 10”的乘法指令，而是使用了第一条、第三条 LEA 指令分步实现了“上次迭代的
rt 值乘以 5”、“输入字符＋5 倍原始 rt 值×2”的运算。某些情况下，MSVC 编译器会刻意避开减法运算的
SUB 指令、转而分配“ADD 某个负数”的指令来实现减法运算。本例就发生了这种情况。虽然笔者也不明
白 ADD 指令的优越性到底在哪，但是 MSVC 编译器经常会做这种指令替换。 
42.1.2  64 位下的 GCC 4.9.1 优化 
GCC 4.9.1 优化更精确，但是它会在代码的最后添加一个多余的返回指令 RET。其实一个 RET 就足够了。 
指令清单 42.2  64 位下的 GCC 4.9.1 优化 
my_atoi: 
; load input character into EDX 
          movsx   edx, BYTE PTR [rdi] 
; EAX is allocated for "rt" variable 
          xor  
eax, eax 
; exit, if loaded character is null byte 
          test  
dl, dl 
          je   
.L4 
.L3: 
          lea  
eax, [rax+rax*4] 
; EAX=RAX*5=rt*5 
; shift pointer to the next character: 
          add  
rdi, 1 
          lea  
eax, [rdx-48+rax*2] 
; EAX=input character - 48 + RAX*2 = input character - '0' + rt*10 
; load next character: 
          movsx  
edx, BYTE PTR [rdi] 
; goto loop begin, if loaded character is not null byte 
          test  
dl, dl 
          jne  
.L3 
          rep ret 
.L4: 
          rep ret 
42.1.3  ARM 模式下 Keil 6/2013 优化 
指令清单 42.3  ARM 模式下 Keil 6/2013 优化 
my_atoi PROC 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 42 章  字符串转换成数字，函数 atoi() 
461 
; R1 will contain pointer to character 
          MOV       r1,r0 
; R0 will contain "rt" variable 
          MOV       r0,#0 
          B          |L0.28| 
|L0.12| 
          ADD       r0,r0,r0,LSL #2 
; R0=R0+R0 
int my_atoi (char *s) 
{ 
          int negative=0; 
          int rt=0; 
          if (*s=='-') 
          { 
                    negative=1; 
                    s++; 
          }; 
          while (*s) 
          { 
                    if (*s'9') 
                    { 
                              printf ("Error! Unexpected char: '%c'\n", *s); 
                              exit(0); 
                    }; 
                    rt=rt*10 + (*s-'0'); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 42 章  字符串转换成数字，函数 atoi() 
463 
                    s++; 
          }; 
          if (negative) 
                    return -rt; 
          return rt; 
}; 
int main() 
{ 
          printf ("%d\n", my_atoi ("1234")); 
          printf ("%d\n", my_atoi ("1234567890")); 
          printf ("%d\n", my_atoi ("-1234")); 
          printf ("%d\n", my_atoi ("-1234567890")); 
          printf ("%d\n", my_atoi ("-a1234567890")); // error 
}; 
42.2.1  64 位下的 GCC 4.9.1 优化 
指令清单 42.6  64 位下的 GCC 4.9.1 优化 
.LC0: 
          .string "Error! Unexpected char: '%c'\n" 
my_atoi: 
          sub      rsp, 8 
          movsx   edx, BYTE PTR [rdi] 
; check for minus sign 
          cmp  
dl, 45 ; '-' 
          je   
.L22 
          xor  
esi, esi 
          test  
dl, dl 
          je   
.L20 
.L10: 
; ESI=0 here if there was no minus sign and 1 if it was 
          lea  
eax, [rdx-48] 
; any character other than digit will result unsigned number greater than 9 after subtraction 
; so if it is not digit, jump to L4, where error will be reported: 
          cmp  
al, 9 
          ja   
.L4 
          xor  
eax, eax 
          jmp  
.L6 
.L7: 
          lea  
ecx, [rdx-48] 
          cmp  
cl, 9 
          ja   
.L4 
.L6: 
          lea  
eax, [rax+rax*4] 
          add  
rdi, 1 
          lea  
eax, [rdx-48+rax*2] 
          movsx  
edx, BYTE PTR [rdi] 
          test  
dl, dl 
          jne  
.L7 
; if there was no minus sign, skip NEG instruction 
; if it was, execute it. 
          test  
esi, esi 
          je   
.L18 
          neg  
eax 
.L18: 
          add  
rsp, 8 
          ret 
.L22: 
          movsx  
edx, BYTE PTR [rdi+1] 
          lea  
rax, [rdi+1] 
          test  
dl, dl 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
464 
逆向工程权威指南（上册） 
          je   
.L20 
          mov  
rdi, rax 
          mov  
esi, 1 
          jmp  
.L10 
.L20: 
          xor  
eax, eax 
          jmp  
.L18 
.L4: 
; report error. character is in EDX 
          mov  
edi, 1 
          mov  
esi, OFFSET FLAT:.LC0 ; "Error! Unexpected char: '%c'\n" 
          xor  
eax, eax 
          call  
__printf_chk 
          xor  
edi, edi 
          call  
exit 
如果字符串的第一个字符是负号，那么就要在转换的最后阶段执行 NEG 指令，把结果转换为负数。 
另外值得一提的是“检测字符是否是数字字符”的判断表达式。我们在程序中可以看到代码为： 