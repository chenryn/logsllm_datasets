### Secure Socket API (SSA)

#### Simplifying TLS Client Code
In many cases, developers writing TLS client code only need to modify a few lines to establish a secure connection. They can use `IPPROTO_TLS` as the third parameter in their `socket` call and then set the `TLS_REMOTE_HOSTNAME` option with `setsockopt` to specify the destination hostname. This approach allows the SSA to automatically include the Server Name Indication (SNI) extension and validate the server's certificate against the provided hostname.

To further streamline this process, we introduce a new `sockaddr` type, `AF_HOSTNAME`, which can be used with the `connect` function. Some languages, such as Python, have already implemented this change, allowing hostnames to be used instead of IP addresses. When a hostname is provided, the `connect` function will perform the necessary DNS lookup and initiate a TLS handshake, using the provided hostname for SNI and certificate validation. This eliminates the need for developers to explicitly call `gethostbyname` or `getaddrinfo` for hostname lookups, simplifying their code.

#### Administrator and Developer Responsibilities
The SSA facilitates a clear division of responsibilities between administrators and developers for securing servers. An administrator can use tools like Let's Encrypt to automatically obtain certificates for the hostnames associated with a given machine and associate these certificates (and keys) with an SSA profile for the application. To create a secure server, the developer simply needs to specify `IPPROTO_TLS` in their `socket` call and bind to all interfaces on the machine. When incoming clients use SNI, the SSA automatically provides the appropriate certificate for the hostname. If SNI is not used, the SSA defaults to the first certificate listed in its configuration. For specific hostname binding, the developer can use the `TLS_HOSTNAME` option with `setsockopt` on the listening socket.

#### Special Cases
The options listed in Table 3 are primarily useful in special cases, such as client certificate pinning or specifying a particular certificate and private key for the TLS handshake.

#### Porting Applications to the SSA
To measure the effort required to port applications to the SSA, we modified the source code of four network programs. Two of these programs already used OpenSSL for TLS, while the other two did not support TLS at all. The results are summarized in Table 4.

- **wget**: We modified the command-line wget web client to use the SSA for secure connections. This required only 15 lines of code, including using `IPPROTO_TLS` in the `socket` call and setting the `TLS_REMOTE_HOSTNAME` option. The resulting binary could be compiled without linking to GnuTLS or OpenSSL, removing 1,020 lines of OpenSSL-related code. This modification was completed in five hours by a programmer with no prior experience with wget or OpenSSL but who had a working knowledge of C and POSIX sockets.
  
- **lighttpd**: We also modified lighttpd, a lightweight event-driven TLS web server, to use the SSA instead of OpenSSL. This required changing four lines of code to specify `IPPROTO_TLS` and making optional calls to `setsockopt` to specify the private key and certificate chain. We removed 2,063 lines of OpenSSL interfacing code. The modification was completed in five hours by another individual with no prior experience with lighttpd or OpenSSL but who had a working knowledge of C and POSIX sockets.

- **In-house Webserver and netcat**: We modified an in-house web server and the netcat utility, which did not previously use TLS. The web server required modifying one line of code to use `IPPROTO_TLS` on its listening socket. The netcat utility required modifying five lines of code for both server and client connections. These modifications were completed in under ten minutes, even though the developer was not familiar with the code beforehand.

These efforts suggest that porting insecure programs to use the SSA can be done quickly and that porting OpenSSL-using code to the SSA is relatively easy, even without prior knowledge of the codebase.

#### Language Support
One of the benefits of using the POSIX socket API as the basis for the SSA is the ease of providing SSA support to various programming languages, aligning with our fourth design goal. If the SSA is implemented in the kernel through the system call interface, any language that uses the network can easily add SSA support. We have added SSA support to three additional languages beyond C/C++: Python, PHP, and Go. The modifications required for each language are as follows:

- **Python**: The reference implementation of the Python interpreter is written in C and uses the POSIX socket API for networking. Adding SSA support required modifying `socketmodule.c` to include SSA constants (`IPPROTO_TLS` and option values for `setsockopt`/`getsockopt`).

- **PHP**: The common PHP interpreter passes parameters from its socket library directly to the system call implementation. Adding SSA support required defining SSA constants, allowing applications to supply `IPPROTO_TLS` and option values themselves.

- **Go**: Go is a compiled language that uses system calls directly. Adding SSA support required adding a new constant, `tls`, and an associated numerical value to the `net` package. Go also provides functions to interface with `setsockopt` and `getsockopt` (e.g., `SetsockoptInt`), allowing lightweight wrappers of options (e.g., `setNoDelay`). Adding an SSA option function requires only 2-3 lines of Go code. With these changes, application developers can create a TLS socket by specifying `tls` when they `Dial` a connection. We demonstrated this by porting Caddy, a popular Go-based HTTP/2 web server, to use the SSA for its Internet connections.

These efforts illustrate the ease of adding SSA support to various languages, with most of the work involving the definition of a few constants for existing system calls or their wrappers.

#### TLS 1.3 0-RTT Mode
TLS 1.3 introduces a "0-RTT" mode, which allows clients to resume an existing TLS session and provide application data with a single TLS message. While this feature can be vulnerable to replay attacks if used incorrectly, it offers significant latency benefits when employed correctly. The 0-RTT mode combines `connect` and `send` operations. The socket API has already been adapted to handle similar protocol changes, such as TCP Fast Open (TFO). TFO is supported by clients via the `sendto` (or `sendmsg`) function with the `MSG_FASTOPEN` flag, allowing the developer to specify a destination and data to send in a single function. TFO is supported by servers by setting the `TCP_FASTOPEN` option on their listening socket. Alternatively, the `TCP_FASTOPEN_CONNECT` option allows TFO client functionality using a lazy connect and subsequent send. The SSA can support TLS 1.3 0-RTT using similar mechanisms, leveraging `sendto` with a flag or the `TLS_0RTT` socket option.

### Implementation Details

We have developed a loadable Linux kernel module that implements the Secure Socket API. The source code is available at [owntrust.org](https://owntrust.org).

#### Data Flow Comparison
A high-level view of a typical network application using a security library for TLS is shown in Figure 2. The application links to a security library (such as OpenSSL or GnuTLS) and uses the POSIX Socket API to communicate with the network subsystem in the kernel, typically using a TCP socket.

Figure 3 illustrates how our implementation of the SSA compares to this normal usage. Our SSA implementation is split into two parts: a kernel component and a user-space encryption daemon accessible only to the kernel component. The kernel component registers all `IPPROTO_TLS` functionality with the kernel and maintains state for each TLS socket. It offloads encryption and decryption tasks to the encryption daemon, which uses OpenSSL and interacts with the user-space daemon for encryption and decryption. Encrypted data are transmitted to the remote endpoint, and decrypted data are sent back to the kernel for delivery to the client application.

#### Kernel-User Space Interaction
To accomplish its tasks, the kernel component must inform the daemon of important events triggered by application system calls. These events include:

- **Socket Creation**: When a TLS socket is created, the kernel informs the daemon to create a corresponding external socket for direct communication with the remote host. The internal socket, created by the application, is used to transfer plaintext data to and from the daemon.
- **Binding**: After creating a TLS socket, the application may call `bind` to specify the source address and port. The kernel directs the daemon to bind the external socket.
- **Connecting**: When the application calls `connect`, the kernel informs the daemon to connect the external socket to the specified address and then connects the internal socket to the daemon.
- **Listening**: Server applications may call `listen` on their socket. The kernel informs the daemon, and both the external and internal sockets are placed into listening mode.
- **Socket Options**: Throughout the TLS socket's lifetime, the application may use `setsockopt` or `getsockopt` to manage socket behaviors. The kernel notifies the daemon of these options and their values. Options with the level `IPPROTO_TLS` are handled directly by the daemon, which sets and retrieves TLS state as needed. Other options, such as `IPPROTO_TCP` or `SOL_SOCKET`, are applied to both internal and external sockets as appropriate.

Handling these requests using the encryption daemon is transparent to the application. Special care is taken to ensure error returns and state consistency between the external and internal sockets.

Our prototype implementation moves the use of a security library to the encryption daemon. The application interacts only with the POSIX Socket API, as described in Section 5, and the encryption daemon establishes TLS connections, encrypts, and decrypts data, ensuring that it adheres to administrator preferences.