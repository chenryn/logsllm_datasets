### URL Scheme and Parameter Injection Vulnerabilities

#### Electron Custom Protocol Command Injection
In January 2018, Electron released a security bulletin addressing a custom protocol command injection vulnerability (CVE-2018-1000006). This vulnerability is triggered by parameter injection. The Proof of Concept (PoC) for this vulnerability is as follows:

```plaintext
chybeta://?" "--no-sandbox" "--gpu-launcher=cmd.exe /c start calc
```

When accessed via the Internet Explorer (IE) browser, the final generated startup parameters are:

```plaintext
electron.exe "//?" "--no-sandbox" "--gpu-launcher=cmd.exe /c start calc"
```

By injecting the `--gpu-launcher` parameter and inputting `cmd.exe`, the calculator application is launched, as shown in the image below:

![Electron Custom Protocol Command Injection](https://images.seebug.org/content/images/2018/10/b6207ca0-8871-4175-8e06-3e3eb4cef875.png-w331s)

#### Edge Remote Code Execution
In October 2018, Microsoft Edge released a security bulletin for a remote code execution vulnerability (CVE-2018-8495), which also exploited parameter injection. The exploit is quite sophisticated and is analyzed in detail in this section.

First, in Edge, it is possible to open some illegal `url scheme` (not including the `URL Protocol` field), such as the `WSHFile` item:

![Edge WSHFile Item](https://images.seebug.org/content/images/2018/10/608e46de-59df-48f5-abee-8aae2384fcbb.png-w331s)

However, this cannot be opened under Windows 7 and Windows 8. The `WSHFile` item points to `wscript.exe`, a built-in script interpreter for Windows. It was discovered that the following script can receive parameters and execute commands:

```plaintext
C:\Windows\WinSxS\amd64_microsoft-windows-a..nagement-appvclient_31bf3856ad364e35_10.0.17134.48_none_c60426fea249fc02\SyncAppvPublishingServer.vbs
```

The script splices commands directly into a string and executes them through `powershell`:

```vb
psCmd = "powershell.exe -NonInteractive -WindowStyle Hidden -ExecutionPolicy RemoteSigned -Command &{" & syncCmd & "}"
```

The final constructed PoC is:

```plaintext
test
```

After execution, the following result is triggered:

A patch has been released on Windows 10, and Edge can no longer call this illegal `url scheme`.

Additionally, similar `url scheme` items were found in the `HKEY_CLASSES_ROOT` registry, pointing to `wscript.exe`, which can also trigger remote code execution. These include:

1. `wshfile`
2. `wsffile`
3. `vbsfile`
4. `vbefile`
5. `jsefile`

Moreover, `SyncAppvPublishingServer.vbs` in `C:\Windows\System32\` and `pubprn.vbs` under `C:\Windows\System32\Printing_Admin_Scripts\zh-CN` can also be exploited for remote code execution.

**Note:** Under Windows 7, Chrome has the same feature as Edge, allowing some illegal `url schemes` to be opened, but Chrome does not have the parameter injection issue, making it temporarily considered safe.

### Application Issues
In December 2017, the helpViewer application on MacOS was exposed to a file execution vulnerability (CVE-2017-2361) caused by Cross-Site Scripting (XSS), affecting versions below MacOS Sierra 10.12.1. This vulnerability also exploits the `url scheme`, allowing an attacker to construct a malicious page to launch a remote attack.

For more details about the vulnerability, refer to:
[Chromium Project Zero Issue #1040](https://bugs.chromium.org/p/project-zero/issues/detail?id=1040&can=1&q=reporter%3Alokihardt%40google.com%20&sort=-reported&colspec=ID%20Status%20Restrict%20Reported%20Vendor%20Product%20Finder%20Summary&start=100).

The constructed PoC is:

```javascript
document.location = "help:///Applications/Safari.app/Contents/Resources/Safari.help/%25252f..%25252f..%25252f..%25252f..%25252f..%25252f..%25252f/System/Library/PrivateFrameworks/Tourist.framework/Versions/A/Resources/en.lproj/offline.html?redirect=javascript%253adocument.write(1)";
```

During the exploitation of this vulnerability, it was found that the operating system and the browser do not have issues, but the application opened through the `url scheme` does. Through the analysis of the exploitation chain, several clever tricks were identified:

1. Open `Safari.help` via the `help` protocol in `url scheme`.
2. Use double URL encoding to bypass the helpViewer's path check and open a page where JavaScript can be executed.
3. Open the application via the built-in protocol `x-help-script` in helpViewer (not included in PoC).

### Conclusion
The convenience of `url scheme` comes from the mutual support of the operating system, the browser (or other applications that support URLs), and the application. To ensure the security and reliability of `url scheme`, the security of these three components must be robustly maintained.

Different operating systems implement `url scheme` differently, and different browsers have their own features. Applications also have their own processing methods. As a result of these multiple combinations, unexpected security issues may arise.

Finally, I would like to thank @LoRexxar and @dawu of Knownsec 404 Team for their assistance.

### References
1. [CVE-2018-8495 Analysis]
2. [Seebug Paper]
3. [先知]
4. [ElectronJS]
5. [Blackhat]
6. [Blackhat]
7. [O'Reilly]
8. [GitHub]
9. [MSRC.CVE-2018-8495]
10. [Microsoft]
11. [Microsoft]
12. [Microsoft]
13. [h-online]
14. [Chromium: CVE-2017-2361]

### About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was founded by a group of high-profile international security experts. With over a hundred top-tier security talents nationwide, the company provides long-term, internationally advanced network security solutions for the government and enterprises.

Knownsec specializes in integrated network attack and defense technologies and product R&D under new situations. It offers visualization solutions that meet world-class security technology standards and enhances the security monitoring, alarm, and defense capabilities of customer networks with industry-leading cloud computing and big data processing capabilities.

The company's technical strength is strongly recognized by the State Ministry of Public Security, the Central Government Procurement Center, the Ministry of Industry and Information Technology (MIIT), China National Vulnerability Database of Information Security (CNNVD), the Central Bank, the Hong Kong Jockey Club, Microsoft, Zhejiang Satellite TV, and other well-known clients.

The 404 Team, the core security team of Knownsec, is dedicated to researching security vulnerabilities and offensive and defensive technologies in the fields of Web, IoT, industrial control, and blockchain. The 404 Team has submitted vulnerability research to many well-known vendors, including Microsoft, Apple, Adobe, Tencent, Alibaba, and Baidu, and has received high acclaim in the industry.

Some of the most well-known contributions of the Knownsec 404 Team include the KCon Hacking Conference, Seebug Vulnerability Database, and ZoomEye Cyberspace Search Engine.