function cluster to launch the application. It is because of the url decoding
that causes the double quotes to close, thus causing the parameter injection.
![
](https://images.seebug.org/content/images/2019/07/a323c9b4-05a2-436d-80e2-e3bf7b3cd504.png-w331s)
**Electron Custom Protocol Command Injection**
In January 2018, Electron released a security bulletin about the custom
protocol command injection (CVE-2018-1000006). It is triggered by parameter
injection, and the constructed PoC is as follows:
    chybeta://?" "--no-sandbox" "--gpu-launcher=cmd.exe /c start calc
Access the link via IE browser, the final generated startup parameters are as
follows:
    electron.exe "//?" "--no-sandbox" "--gpu-launcher=cmd.exe /c start calc"
Call the `--gpu-launcher` parameter supported in electron through parameter
injection, and input `cmd.exe`, the calculator is started as shown below:
![
](https://images.seebug.org/content/images/2018/10/b6207ca0-8871-4175-8e06-3e3eb4cef875.png-w331s)
Image via 
**Edge Remote Code Execution**
In October 2018, Edge released the security bulletin for remote code execution
(CVE-2018-8495), which also exploited parameter injection to achieve the
effect of remote code execution. The whole exploit is quite ingenious, and
this article analyzes it in detail.
First of all, in the Edge, you can open some illegal `url scheme` (not include
the `URL Protocol` field), such as the `WSHFile` item:
![
](https://images.seebug.org/content/images/2018/10/608e46de-59df-48f5-abee-8aae2384fcbb.png-w331s)
Of course, it cannot be opened under Windows 7 and Windows 8.
And the `WSHFile` item just points to `wscript.exe`. This application is very
familiar, and it is a built-in script interpreter for Windows, then you can
try to use `WSHFile` to run a script. In addition to the above mentioned
problem of parameter injection in the Edge browser, is there a script that can
receive parameters and be used for execution?
Finally, it’s found out that:
    C:\Windows\WinSxS\amd64_microsoft-windows-a..nagement-appvclient_
    31bf3856ad364e35_10.0.17134.48_none_c60426fea249fc02\SyncAppvPublishingServer.vbs
The script supports receiving parameters and splices commands directly into a
string, and then executes them through `powershell`.
    psCmd = "powershell.exe -NonInteractive -WindowStyle 
     Hidden-ExecutionPolicy RemoteSigned -Command &{" & syncCmd & "}"
The final constructed PoC is as follows:
    test
And the triggered results after execution are as follows:
A patch has been released on Windows10, and Edge is no longer able to call
this illegal `url scheme`.
In addition, we also found a `url scheme` similar to `WSHFile` in the
`HKEY_CLASSES_ROOT` registry, pointing to `wscript.exe`, which can also
trigger remote code execution. These include:
    1.wshfile
    2.wsffile
    3.vbsfile
    4.vbefile
    5.jsefile
What’s more, in `C:\Windows\System32\` exists `SyncAppvPublishingServer.vbs`
as well, which can also be exploited and even more reliable than what has been
provided in the released bulletin.
Apart from `SyncAppvPublishingServer.vbs`, the `pubprn.vbs` under
`C:\Windows\System32\Printing_Admin_Scripts\zh-CN` can also trigger the remote
code execution.
PS: Under Windows 7, Chrome has the same features as Edge: some illegal `url
schemes` can be opened, but Chrome has no problem with parameter injection, so
it's temporarily considered to be safe.
### 0x06 The Application Issues
In December 2017, the helpViewer application on MacOS was exposed a file
execution vulnerability (cve-2017-2361) caused by XSS, affecting versions
below MacOS Sierra 10.12.1. The vulnerability also exploits the `url scheme`,
which allows an attacker to construct a malicious page to launch a remote
attack. This is typical security issue of `url scheme` caused by the
application.
For more details about the vulnerability, you can refer to:
[https://bugs.chromium.org/p/project-zero/issues/detail?id=1040&can=1&q=reporter%3Alokihardt%40google.com%20&sort=-reported&colspec=ID%20Status%20Restrict%20Reported%20Vendor%20Product%20Finder%20Summary&start=100](https://bugs.chromium.org/p/project-zero/issues/detail?id=1040&can=1&q=reporter%3Alokihardt%40google.com%20&sort=-reported&colspec=ID%20Status%20Restrict%20Reported%20Vendor%20Product%20Finder%20Summary&start=100).
The constructed PoC is as follows:
    document.location = "help:///Applications/Safari.app/Contents/
    Resources/Safari.help/%25252f..%25252f..%25252f..%25252f..%25252f..%25252f..
    %25252f/System/Library/PrivateFrameworks/Tourist.framework/Versions/A/
    Resources/en.lproj/offline.html?redirect=javascript%253adocument.write(1)";
During the exploitation of this vulnerability, you can find that the operating
system and the browser do not have problems, but the application opened
through the `url scheme` has problems. Through the analysis of the
exploitation chain, we can learn several clever tricks:
  1. Open the `Safari.help` via the `help` protocol in `url scheme`.
  2. Use double url encoding to bypass the helpViewer's check of the path and open a page where JavaScript can be executed.
  3. Open the application via the built-in protocol `x-help-script` in helpViewer (not included in PoC).
### 0x07 Conclusion
The convenience of `url scheme` comes from the mutual support of the operating
system, the browser (or other applications that support urls), and the
application. In order to ensure the security and reliability of `url scheme`,
the security of these three parties must be firmly guarded.
In addition, different operating systems have different ways of implementing
`url scheme`, different browsers have their own features, and applications
have their own processing methods. As a result of multiple combinations, some
unexpected security issues may occur.
Finally, I would like to appreciate @LoRexxar' and @dawu of Knownsec 404 Team
for helping me.
### References:
  1. CVE-2018-8495分析: 
  2. Seebug.paper: 
  3. 先知: 
  4. electronjs: 
  5. blackhat: 
  6. blackhat: 
  7. oreilly: 
  8. Github: 
  9. MSRC.CVE-2018-8495: 
  10. Microsoft: 
  11. Microsoft: 
  12. Microsoft: 
  13. h-online: 
  14. chromium: [https://bugs.chromium.org/p/project-zero/issues/detail?id=1040&can=1&q=reporter%3Alokihardt%40google.com%20&sort=-reported&colspec=ID%20Status%20Restrict%20Reported%20Vendor%20Product%20Finder%20Summary&start=100](https://bugs.chromium.org/p/project-zero/issues/detail?id=1040&can=1&q=reporter%3Alokihardt%40google.com%20&sort=-reported&colspec=ID%20Status%20Restrict%20Reported%20Vendor%20Product%20Finder%20Summary&start=100)
### About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *