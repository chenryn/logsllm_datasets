// dangling pointers are us.
for(var i = 0; i 
Testing Infrastructure
A number of diffi culties become apparent when it comes to determining the
most appropriate testing infrastructure to use while developing an exploit.
You have a number of factors to consider when testing an exploit. First of all,
the application version used for testing needs to be the same as or as close as
possible to the one the exploit is supposed to work on. The allocator functioning
on the testing platform needs to be as close as possible to the real one. Finally,
there must be an easy way to test the exploit multiple times.
In general, while developing, it is always a good idea to have tools like diff
for source code or BinDiff for binaries that allow you to explore the differences
between the real system and the testing one.
In a similar fashion to the processes you’ve seen in the course of this chapter,
where most of the tests were conducted on Mac OS X, it is often possible to use
a virtual machine or a computer running Mac OS X to start the development.
In fact, by diffi ng either the source code or the binary it is possible to identify
the characteristics common to the testing environment and the deployment
environment.
Usually, you can use two strategies to test an exploit. The fi rst one starts
by developing it for Mac OS X on 32-bits (in a virtual machine in case you
are dealing with the system heap), then porting it to a jailbroken iPhone,
and fi nally, testing it on a non-jailbroken one. Using this method allows
you to get around the problem of not having a debugger available on a
non-jailbroken iPhone.
The second strategy is applicable only if the vulnerability can be reproduced
in a test program. That is, it is possible to include the vulnerable library or frame-
work in a test application to be deployed on a developer iPhone and mimic the
cc0077..iinndddd 221177 44//1166//22001122 55::4466::1122 PPMM
218 Chapter 7 n Exploitation
triggering conditions from the test application. This strategy is rarely applicable,
but when it is, it allows you to debug the exploit directly on the phone by using
the Xcode debugging capabilities for iPhone applications.
Finally, it is vital to not make any assumptions on the capabilities of the exploit
in the test environment. In fact, applications on the iPhone are sandboxed in a
fashion that might be different from Mac OS X. Moreover, jailbreaking an iPhone
changes the underlying security infrastructure of the phone severely, thus it is
always better to test the payload intended to be run with the exploit separately.
In Chapter 8 you see a few ideas on how to perform such testing.
Summary
This chapter explored the inner mechanisms of the two most used allocators
on iOS. It used Mac OS X as a testing platform to do most of the grudge work
involved in exploitation.
A number of techniques to control both TCMalloc and the system heap were
explained. Specifi cally, this chapter strove to divide techniques based on the
kinds of vulnerabilities for which they are the most suitable. You saw what chal-
lenges exploitation on newer versions of the iPhone fi rmware create, specifi cally
the problem of creating a reliable and portable exploit due to ASLR.
Finally, you saw a real-life example of a MobileSafari exploit targeting iOS
3.1.3, and learned strategies to precisely test an exploit without incurring porting
problems and wrong assumptions.
cc0077..iinndddd 221188 44//1166//22001122 55::4466::1122 PPMM
CHAPTER
8
Return-Oriented Programming
Starting from iOS version 2.0, data execution prevention (DEP) is enabled by
default for all applications running on the device. Therefore, to gain arbitrary
code execution the only viable solution is return-oriented programming (ROP).
Albeit this technique is not unique to ARM, some peculiar challenges related
to this architecture are worth exploring. Moreover, contrary to other platforms
where ROP is usually used as a pivot to disable the non-executable bit, on iOS
the entire payload needs to be written using ROP because there is no way to
disable DEP or code signing from userland.
Because using ROP means you rely on code already present in the address
space of an application to write a payload, it is absolutely necessary to under-
stand both the ARM architecture basics and the calling convention used on iOS.
This chapter explores the concepts needed to successfully write a ROP payload.
We fi rst describe how to manually chain together existing application bits to
create a coherent payload. After that we dissect possible ways of automating
the process to avoid the expensive and tedious task of searching for code bits
and linking them. We also show and analyze some examples of ROP payloads
used in real-life exploits, either to link multiple exploits, or to perform specifi c
tasks such as having the phone vibrate or exfi ltrate the SMS database.
Finally, we discuss what testing scenario best fi ts ROP development on the
iPhone, taking into account sandbox restrictions and ASLR.
219
cc0088..iinndddd 221199 44//1166//22001122 55::4466::3388 PPMM
220 Chapter 8 n Return-Oriented Programming
ARM Basics
ARM is a reduced instruction set code (RISC) architecture, meaning it has very
few instructions and many general-purpose registers. In total, 16 registers are
identifi ed as R0–R15. Typically, the last three registers have special values and
special names. R13 is called SP (the stack pointer register), R14 is called LR (the link
register), and R15 is called PC (the program counter). Unlike x86, all of these reg-
isters are completely general, meaning, for instance, that it is possible to move
an arbitrary value into PC and change the program fl ow. Likewise, it is perfectly
acceptable to read from PC to determine the currently executed instruction.
ARM has two different execution modes, ARM and Thumb. Starting from
ARMv7, a third one called Thumb-2 was introduced. The main difference between
ARM and Thumb mode is that Thumb instructions are 16 bits (except for call
opcodes, which are still 32 bits), whereas in ARM mode all instructions are 32 bits.
Thumb-2 instructions are a mix of 16 bits and 32 bits. This design ensures that
Thumb code can perform all the operations that ARM code can (for instance,
exception handling and access to coprocessors).
For the processor to know whether it is executing ARM or Thumb code, a
simple convention is used. If the least signifi cant bit of the address executed is
equal to 1, the processor expects to execute Thumb code, otherwise it expects
ARM code. More formally, the processor expects to execute Thumb code when
the T bit in the CPSR is 1 and the J bit in the CPSR is 0.
ARM and Thumb mode are mostly equivalent in terms of expressiveness,
but their mnemonics differ. It is outside the scope of this chapter to analyze all
the instructions available on an ARM processor, but we dissect some of them
because they are frequently used in the course of this chapter.
iOS Calling Convention
The most important thing to understand when it comes to ROP is the calling
convention of the targeted OS.
iOS uses the ARM standard calling convention. The fi rst four arguments
are passed using the general-purpose registers R0–R3, whereas any additional
parameters are pushed onto the stack. The return value is stored in the R0 register.
In the ARM instruction set, you have several ways of calling a function and
changing the execution fl ow. The simplest way of doing so, besides manually
setting the PC to a value of choice, is through the B (branch) instruction. This
instruction just changes the PC to the address specifi ed as the fi rst operand.
If you want to return to the instruction following the call, you need the BL
(branch and link) instruction. In fact, it not only sets the PC to the address speci-
fi ed by the fi rst operand, but it also stores the return address into the LR register.
If the address to jump to is stored inside a register, you can use the BX instruc-
tion. This instruction changes only the execution fl ow without storing the return
address anywhere.
cc0088..iinndddd 222200 44//1166//22001122 55::4466::3388 PPMM
Chapter 8 n Return-Oriented Programming 221
Much like BL, the BLX instruction executes the address stored in the reg-
ister passed as the fi rst operand and stores the return address into the LR
register.
In general, it is very common for ARM-compiled functions to have an epilogue
that ends with a BX LR to return to the calling function. Alternatively, a function
might push the value of LR onto the stack and then, upon returning, pop it into
the PC register.
System Calls Calling Convention
Another vital notion to have when developing ARM payloads is how system
calls are invoked on ARM, specifi cally on iOS. Historically, system calls have
been exploit writers’ best friends for two reasons. First, they allow the exploit to
perform useful and powerful operations without the need to construct abstracted
data types usually needed for library calls. For example, consider the simple
operation of reading data from a fi le. You can read from a fi le using fread() and
doing something like this:
fread(mybuf, sizeof(mybuf) -1, 1, filestream);
where mybuf is a C buffer and filestream is a pointer to a FILE structure
that looks like this:
typedef struct __sFILE {
unsigned char *_p; /* current position in (some) buffer */
int _r; /* read space left for getc() */
int _w; /* write space left for putc() */
short _fl ags; /* fl ags, below; this FILE is free if 0 */
short _fi le; /* fi leno, if Unix descriptor, else -1 */
struct __sbuf _bf; /* the buffer (at least 1 byte, if !NULL) */
int _lbfsize; /* 0 or -_bf._size, for inline putc */
/* operations */
void *_cookie; /* cookie passed to io functions */
int (*_close)(void *);
int (*_read) (void *, char *, int);
fpos_t (*_seek) (void *, fpos_t, int);
int (*_write)(void *, const char *, int);
/* separate buffer for long sequences of ungetc() */
struct __sbuf _ub; /* ungetc buffer */
struct __sFILEX *_extra; /* additions to FILE to not break ABI */
int _ur; /* saved _r when _r is counting ungetc data */
/* tricks to meet minimum requirements even when malloc() fails */
unsigned char _ubuf[3]; /* guarantee an ungetc() buffer */
unsigned char _nbuf[1]; /* guarantee a getc() buffer */
/* separate buffer for fgetln() when line crosses buffer boundary */
cc0088..iinndddd 222211 44//1166//22001122 55::4466::3399 PPMM
222 Chapter 8 n Return-Oriented Programming
struct __sbuf _lb; /* buffer for fgetln() */
/* Unix stdio fi les get aligned to block boundaries on fseek() */
int _blksize; /* stat.st_blksize (may be != _bf._size) */
fpos_t _offset; /* current lseek offset (see WARNING) */
} FILE;
An attacker would need to keep a structure like this in memory while writ-
ing her shellcode. This is often cumbersome and not really needed, because the
only piece of information regarding a fi le that is needed is a fi le descriptor, an
integer. So instead, attackers have historically preferred syscalls:
read(filedescription, mybuff, sizeof(mybuf) – 1);
where the only bit of information needed is the fi le descriptor (an integer).
The second reason system calls are so attractive to exploit writers is that you
can call a syscall without having to worry about library load addresses and
randomization. Additionally, they are available regardless of which libraries
are loaded in the address space of the application. In fact, a syscall allows a user
space application to call code residing in kernel space by using what are known
as traps. Each available syscall has a number associated with it that is necessary
for the kernel to know what function to call. For the iPhone, the syscall numbers
are stored inside the SDK at the relative path: /usr/include/sys/syscall.h.
People familiar with x86 know that syscalls are usually invoked by storing
a syscall number into EAX and then using the assembly instruction int 0x80,
which triggers the trap 0x80, which is the trap responsible for dealing with
syscalls invocation.
On ARM the calling convention is to store arguments the same way you would
for normal calls. After that, the syscall number is stored in the R12 register and
to invoke it, the assembly instruction SVC is used.
When it comes to return-oriented programming, it is necessary to have the
address of a library to fi nd usable SVC instructions because, in general, only
library functions use syscalls.
ROP Introduction
Albeit nowadays it is pretty common to talk about ROP as if it was something
new, its story goes back to 1997 when a security researcher known as Solar
Designer fi rst published an exploit using a technique dubbed “return-into-libc.”
Things have changed wildly since 1997, and ROP today is much more complex,
powerful, and useful than it used to be. Nonetheless, to fully understand what
ROP is and how it works, return-into-libc is the perfect start.
The idea behind Solar Designer’s technique was pretty simple, although
revolutionary for the time. If all your shellcode does is spawn a shell and to do
that you already have a library function available, why should you write extra
code? It’s all there already!
cc0088..iinndddd 222222 44//1166//22001122 55::4466::3399 PPMM
Chapter 8 n Return-Oriented Programming 223
The only thing you need to do is understand how to pass parameters to a
function and call it. At that time Solar Designer was dealing with a plain stack
buffer overfl ow, which meant he could overwrite the entire stack content as
he wished. Traditionally, attackers would have written the shellcode on the
stack, and then set the return address to point back to the shellcode to gain
code execution.
What Solar Designer did was to put data instead of executable code
on the stack, so that instead of having to execute a payload he could just
set the return address of the vulnerable function to the execve() library
function.
Because on x86 Linux in 1997 the calling convention was to pass parameters
on the stack, he pushed onto it the parameter he wanted to pass to execve(),
and the exploit was done.
Figure 8.1 shows how a usual stack overfl ow exploit looked back in those day
and the one written by Solar Designer using return-into-libc.
Local variables Shellcode
Function returns
to shellcode
Saved frame pointer Shellcode
Saved instruction
Pointer to the shellcode
pointer
Arguments for the
Possibly overwirtten
vulnerable function
Local variables Overwritten but unused
Saved frame pointer Overwritten but unused
Function returns to system
Saved instruction Pointer to system()
pointer
Fake return address
Arguments for system()
Arguments for the Pointers to "/bin/
vulnerable function bash"
Figure 8.1: Comparison of stack layout between standard exploit and return-into-lib-c
cc0088..iinndddd 222233 44//1166//22001122 55::4466::3399 PPMM
224 Chapter 8 n Return-Oriented Programming
ROP is based on the concept that instead of being able only to invoke
a function using return-into-libc techniques, it is possible to create entire
payloads, and programs, based on the code already available in a process
address space.
To do that, the ability to maintain control over the stack while developing a
payload is vital.
In fact, as long as an attacker can control the stack layout, it is possible for
him to chain together multiple “return” instructions that will keep retrieving
the instruction pointer from it, and thus execute a number of instructions at
will. Imagine the stack shown in Figure 8.2.
Argument 2
Argument 1
pop-pop-ret
Function2 address
Argument 2
Argument 1
pop-pop-ret
Function1 address
Figu r e 8.2: Sample ROP stack layout
What will happen here is that after the fi rst call, the fi rst pop-pop-ret
instruction sequence jumps to the second function address on the stack
and so on. This process can go on for as long as it is needed to achieve the
attacker’s goal.
ROP and Heap Bugs
If you are unfamiliar with ROP, you might be wondering whether this technique
can be used only with stack-based bugs. This is not the case; it is almost always
possible to force the stack pointer register to point to a heap location.