        Content-Type
        和文件头不一致时，两者都会被浏览器忽略。这时浏览器会根据文件的内容来推测文件类型。如果文件中包含
        HTML 标签，该文件就可能会被判定为 HTML 文件 [66]{.注释编号}
        。在"图像文件引起的 XSS"这一小节中介绍的伪装 PNG
        文件就属于这类情况。该示例文件中虽然没有包含图像文件头，但根据笔者的试验，即使添加了图像文件头，如果与
        Content-Type 矛盾也会被浏 览器无视 [67]{.注释编号} 。
-   **内容不为图像时**
    图像文件以外的情况下，各 IE
    版本都做如下处理。首先，根据浏览器是否能够处理接收到的
    Content-Type，IE 的举动会有所不同。
    如果IE能够处理收到的 Content-Type，就会按照 Content-Type
    来处理。注册表 HKEY_CLASSES_ROOT\\MIME\\Database\\Content Type
    中保留了IE能够处理的所有 Content-Type。图 4-115
    中列出了其中的一部分。如图所示，PDF 的 Content-Type 为
    application/pdf，而非 application/x-pdf。
    ![{%}](Image00169.jpg)
    **图 4-115 IE 能够处理的 Content-Type**
    如果收到的 Content-Type 不是 IE 能够处理的类型，那么 IE 就会根据 URL
    中的扩展名进行判断。判断规则的详情非常复杂，有兴趣的读者可以参考长谷川阳介的文章《无法忽视：IE
    中对 Content-Type 的忽视》\[1\]。在上面介绍的"将 HTML 文件伪装成 PDF
    而引起的 XSS"这一小节中，生成用来攻击的 URL 时添加了作为 PATHINFO 的
    /a.html，这就是恶意利用了 IE 会通过 URL
    中的扩展名来判断文件类型的特性。
[65]{.注释编号下} JPEG
本来是图像压缩方法的名称，作为文件格式时的术语应该为 JFIF，然而由于 JPEG
也普遍被用来指代 JFIF 文件格式，因此本书也采用 JPEG 这个称呼。
[66]{.注释编号下} 在以前（IE7
为止）的版本中，当文件满足上述条件时会被判定为 HTML 文件，而从 IE8
开始，满足上述同等条件的文件则会被视为文本文件（text/plain）。
[67]{.注释编号下}
详情请参考笔者的博客文章《图像文件引起跨站脚本（XSS）的倾向与对策》\[2\]。
#### **对策**
应对文件下载所引起的 XSS
漏洞的方法可分为上传时的对策和下载时的对策，分别如下。
-   **文件上传时的对策**
    上传文件时实施以下操作。
    -   校验扩展名是否在允许范围内
    -   图像文件的情况下确认其文件头
    关于校验扩展名，4.12.2 节的对策已经详述过。PHP 可以使用
    `getimagesize` 函数来确认图像的文件头。
    > **格式清单 getimagesize 函数**
    ``` 代码无行号
      array getimagesize(string $filename [, array &$imageinfo])
    ```
    该函数将接收到的图像文件的文件名作为参数，并以数组的形式返回图像的长宽尺寸和图像格式等信息。下面是一些常见的图像格式所对应的整数值和常量。详情请参考
    PHP 的文档 [68]{.注释编号} 。
    **表 4-21 getimagesize 函数返回的图像格式信息**
      ---- ----------------
      值   常量
      1    IMAGETYPE_GIF
      2    IMAGETYPE_JPEG
      3    IMAGETYPE_PNG
      ---- ----------------
    在之前的介绍中，我们已经了解到图像上传脚本的改良版 4c-002a.php
    中存在 XSS 漏洞。而使用 `getimagesize` 函数就可以消除 XSS
    漏洞。假设改良后的脚本名为 4c-002b.php。检验图像文件的函数
    `check_image_type` 的定义如下。
    > **代码清单 /4c/4c-002b（check_image_type 函数的定义）**
    ``` 代码无行号
        // function check_image_type($imgfile, $tofile)
        //   $imgfile : 校验对象的图像文件名
        //   $tofile : 文件名（用于校验扩展名）
        function check_image_type($imgfile, $tofile) {
          // 取得并校验扩展名
          $info = pathinfo($tofile);
          $ext = strtolower($info['extension']);  // 扩展名（统一为小写字母）
          if ($ext != 'png' && $ext != 'jpg' && $ext != 'gif') {
            die(' 只能上传扩展名为 gif、jpg 或 png 的图像文件 ');
          }
          // 取得图像类型
          $imginfo = getimagesize($imgfile);  // 取得图像信息的数组
          $type = $imginfo[2];  // 取出图像类型
          // 下面，如果是正常的组合就 return
          if ($ext == 'gif' && $type == IMAGETMPE_GIF)
            return true;
          if ($ext == 'jpg' && $type == IMAGETMPE_JPEG)
            return true;
          if ($ext == 'png' && $type == IMAGETMPE_PNG)
            return true;
          // 如果到最后都没有 return 就报错
          die(' 扩展名和图像类型不一致 ');
        }
    ```
    下面为调用上述 `check_image_type`
    函数的部分。阴影部分即为添加的代码行。
    > **代码清单 /4c/4c-002b.php**
        $tmpfile = $_FILES["imgfile"]["tmp_name"];
        $orgfile = $_FILES["imgfile"]["name"];
        if (! is_uploaded_file($tmpfile)) {
          die(' 文件没有上传 ');
        }
        // 校验图像
        check_image_type($tmpfile, $orgfile);
        $tofile = get_upload_file_name($orgfile);
    > **专栏：BMP 格式的注意点与 MS07-057**
    >
    > 本书中介绍了浏览器涉及的 3 种图像格式，即 GIF、JPEG 与
    > PNG，而有的浏览器也可以处理其他格式的图像文件。像 Windows
    > 中的标准格式 BMP 也能够在主流的浏览器中显示。那么，遇到 BMP
    > 格式时该如何处理呢？
    >
    > 其实上面介绍的方法并不能完美地处理 BMP 格式的图像。BMP
    > 格式的图像文件头为 BM，但处理 BMP 图像时，即使 Content-Type
    > 与文件头一致，IE 6 和 IE 7 中也有可能将其识别为 HTML 从而导致
    > JavaScript 被执行。
    >
    > PNG 格式也曾经发生过与 BMP 相同的现象，但这个问题已经由 MS07-057
    > 安全更新补丁（2007 年 10
    > 月）所修复。由此可见，提醒用户安装最新的安全更新补丁是非常重要的。
    >
    > 另外，从实用性的角度来看，由于 BMP
    > 很不适合压缩（只能使用单纯的压缩方式），并且 BMP 仅限于 Windows
    > 使用，因此我们并没有必要非在互联网上使用 BMP
    > 格式的文件。而需要使用 BMP 时也都可以用 PNG 格式来代替。
    >
    > 综上所述，这里不推荐大家在 Web 上使用 BMP 格式的文件。
-   **文件下载时的对策**
    下载文件时的对策如下。
    > -   正确设置 Content-Type
    >
    > -   图像文件的情况下确认其文件头
    >
    > -   必要时设置 Content-Disposition 消息头
    -   **正确设置 Content-Type**
        在 PDF 文件下载所引起的 XSS 漏洞示例中，漏洞产生的主要原因均为
        Content-Type 设置有误。因此，只要将 PDF 格式的 Content-Type
        正确设置为 application/pdf，就能够消除漏洞。而且除 IE
        之外，正确指定 Content-Type 这一对策也适用于其他所有的浏览器。
        如果下载时不经过下载脚本而是将文件保存在公开目录中的话，就一定要确认
        Web 服务器的设置是否有误。Apache 中，Content-Type
        的设置被保存在了名为 mime.types 的配置文件中。PDF
        等常见的软件一般不会有问题，而如果用到了很生僻的软件或自己设置
        mime.types 时，请务必确保浏览器能够识别该 Content-Type。
    -   **图像文件的情况下确认其文件头**
        通过下载脚本来下载图像文件时，只要在下载时确认了文件头，即使由于某些原因
        Web 服务器中混入了非法的图像文件，也不会影响到应用程序。
        下面是实施了检验文件头对策的改良版的下载脚本（摘要）。阴影部分中调用了检验文件头的函数
        `check_image_type` 。
        > **代码清单 /4c/4c-003b.php**
             'image/jpeg', 'png' => 'image/png', 'gif' => 'image/gif');
            $file = $_GET['file'];
            $info = pathinfo($file);       // 取得图像类型
            $ext = strtolower($info['extension']);     // 扩展名（统一为小写字母）
            $content_type = $mimes[$ext]; // 取得 Content-Type
            if (! $content_type) {
              die(' 只能上传扩展名为 gif、jpg 或 png 的图像文件 ');
            }
            $path = UPLOADPATH . '/' . basename($file);
            check_image_type($path, $path);
            header('Content-Type: ' . $content_type);
            readfile($path);
            ?>
    -   **必要时设置 Content-Disposition 消息头**
        当下载的文件并不需要使用应用程序打开，而是只要求能够下载就行的情况下，可以在响应消息头中指定
        Content-Disposition: attachment。这时，如果将 Content-Type 设为
        application/octetstream，文件类型就变成了"用于下载的文件"。下面为消息头的设置示例。
        ``` 代码无行号
        Content-Type: application/octet-stream
        Content-Disposition: attachment; filename="hogehoge.pdf"
        ```
        这里，Content-Diaposition 消息头的选项属性 filename
        被用于指定保存文件时的默认文件名。
-   **其他对策**
    以上介绍的 XSS
    对策是为了防范漏洞所需要进行的最低限度的校验处理。例如，仅校验图像文件头并无法确认是否真的能在用户的浏览器上显示。
    因此在决定 Web 应用的详细规格时，还应当探讨是否要执行以下校验。
    -   除了图像文件的大小之外还校验尺寸和色数等
    -   校验文件是否能作为图像文件读取
    -   扫描病毒（详情见 7.4 节）
    -   校验文件内容（自动或手动）
        -   成人内容
        -   侵犯版权的内容
        -   违反法律或妨害公共秩序的内容
        -   其他
[68]{.注释编号下}
> **专栏：将图像托管在其他域名**
>
> 2009
> 年左右，有些网站开始将图像托管在主服务域名之外的单独域名上。下面列举的就是一些将图像托管在其他域名的网站。
>
> **表 4-22 将图像托管在其他域名的网站案例**
>
>   网站名           主域名                图像使用的域名
>   ---------------- --------------------- ----------------
>   Yahoo ！ JAPAN   yahoo.co.jp           yimg.jp
>   YouTube          youtube.com           ytimg.com
>   niconico 动画    nicovideo.jp          nimg.jp
>   Twitter          twitter.com           twimg.com
>   Amazon.co.jp     amazon.co.jp-images   amazon.com
>
> 上面这些都是高流量的网站，虽然将图像使用的域名分离出来多是为了使网站的响应速度更快，但另一方面，这一操作也具有提升网站安全性的效果。
>
> 这是因为，将用户上传的图像或 PDF
> 等文件保存在其他域名后，即使图像文件造成的 XSS
> 攻击取得成功，也不会波及主服务。
>
> 下载时的 XSS 基本上属于浏览器的问题，由于这一问题在市场份额很高的 IE
> 中非常常见，而且至今尚未得到完全修复。因此，作为辅助性对策，最好考虑一下将图像存储在其他域名的方法。
#### **参考：用户 PC 中没有安装对应的应用程序时**