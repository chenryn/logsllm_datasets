models,” in Proceedings of the 1999 IEEE Sympo-
sium on Security and Privacy (Cat. No.99CB36344),
1999, pp. 133–145.
[34] Q. Wang, W. U. Hassan, D. Li, K. Jee, X. Yu, K.
Zou, J. Rhee, Z. Zhen, W. Cheng, C. A. Gunter, and
H. chen, “You are what you do: Hunting stealthy
malware via data provenance analysis,” in 27th ISOC
Network and Distributed System Security Symposium,
ser. NDSS’20, 2020.
[35] K. Xu, K. Tian, D. Yao, and B. G. Ryder, “A sharper
sense of self: Probabilistic reasoning of program be-
haviors for anomaly detection with context sensitivity,”
in 2016 46th Annual IEEE/IFIP International Con-
ference on Dependable Systems and Networks (DSN),
2016, pp. 467–478.
[36] M. Bellare and B. Yee, “Forward integrity for secure
audit logs,” Computer Science and Engineering De-
partment, University of California at San Diego, Tech.
Rep., 1997.
J. E. Holt, “Logcrypt: Forward security and public
veriﬁcation for secure audit logs,” in Proceedings
of the Australasian Information Security Workshop
(AISW-NetSec), 2006.
[37]
[38] R. Paccagnella, K. Liao, D. ( Tian, and A. Bates,
“Logging to the danger zone: Race condition at-
tacks and defenses on system audit frameworks,”
in Proceedings of the 2020 ACM SIGSAC Confer-
ence on Computer and Communications Security,
ser. CCS’20, 2020.
[39] B. Schneier and J. Kelsey, “Cryptographic support for
secure logs on untrusted machines.,” in Proceedings
of the USENIX Security Symposium (USENIX), 1998.
[40] D. Ma and G. Tsudik, “A new approach to secure
logging,” ACM Transactions on Storage (TOS), vol. 5,
no. 1, 2009.
[41] A. A. Yavuz and P. Ning, “Baf: An efﬁcient publicly
veriﬁable secure audit logging scheme for distributed
systems,” in Proceedings of the Annual Computer
Security Applications Conference (ACSAC), 2009.
[42] A. A. Yavuz, P. Ning, and M. K. Reiter, “Efﬁcient,
compromise resilient and append-only cryptographic
schemes for secure audit logging,” in Proceedings of
the International Conference on Financial Cryptog-
raphy and Data Security (FC), 2012.
[43] M. Musuvathi, S. Qadeer, T. Ball, G. Basler, P. A.
Nainar, and I. Neamtiu, “Finding and reproducing
heisenbugs in concurrent programs.,” in OSDI, vol. 8,
2008, pp. 267–280.
USENIX Association
30th USENIX Security Symposium    2003
[44]
[45]
I. Ahmed, N. Mohan, and C. Jensen, “The impact of
automatic crash reports on bug triaging and develop-
ment in mozilla,” in Proceedings of The International
Symposium on Open Collaboration, 2014, pp. 1–8.
J. Arnold, T. Abbott, W. Daher, G. Price, N. Elhage,
G. Thomas, and A. Kaseorg, “Security impact ratings
considered harmful,” arXiv preprint arXiv:0904.4058,
2009.
[46] P. J. Guo and D. R. Engler, “Linux kernel developer
responses to static analysis bug reports.,” in USENIX
Annual Technical Conference, 2009, pp. 285–292.
[47] H. Patil, C. Pereira, M. Stallcup, G. Lueck, and J.
Cownie, “Pinplay: A framework for deterministic
replay and reproducible analysis of parallel programs,”
in Proceedings of the 2004 International Symposium
on Code Generation and Optimization (CGO), Apr.
2010.
[48] S. Ren, L. Tan, C. Li, Z. Xiao, and W. Song, “Sam-
sara: Efﬁcient deterministic replay in multiproces-
sor environments with hardware virtualization exten-
sions,” in Proceedings of the 2016 USENIX Annual
Technical Conference (ATC), Denver, CO, Jun. 2016.
J. Chow, T. Garﬁnkel, and P. M. Chen, “Decoupling
dynamic program analysis from execution in virtual
environments,” in USENIX 2008 Annual Technical
Conference on Annual Technical Conference, 2008,
pp. 1–14.
[49]
[50] Y. Ji, S. Lee, E. Downing, W. Wang, M. Fazzini, T.
Kim, A. Orso, and W. Lee, “Rain: Reﬁnable attack in-
vestigation with on-demand inter-process information
ﬂow tracking,” in Proceedings of the 24th ACM Con-
ference on Computer and Communications Security
(CCS), Dallas, TX, Oct. 2017.
[51] W. U. Hassan, S. Guo, D. Li, Z. Chen, K. Jee, Z.
Li, and A. Bates, “Nodoze: Combatting threat alert
fatigue with automated provenance triage.,” in NDSS,
2019.
[52] M. E. Aminanto, L. Zhu, T. Ban, R. Isawa, T. Taka-
hashi, and D. Inoue, “Automated threat-alert screen-
ing for battling alert fatigue with temporal isolation
forest,” in 2019 17th International Conference on Pri-
vacy, Security and Trust (PST), IEEE, 2019, pp. 1–
3.
[53] S. McElwee, J. Heaton, J. Fraley, and J. Cannady,
“Deep learning for prioritizing and responding to intru-
sion detection alerts,” in MILCOM 2017-2017 IEEE
Military Communications Conference (MILCOM),
IEEE, 2017, pp. 1–5.
[54] R. Ding, C. Qian, C. Song, B. Harris, T. Kim, and
W. Lee, “Efﬁcient protection of path-sensitive control
security,” in Proceedings of the 26th USENIX Security
Symposium (Security), Vancouver, BC, Canada, Aug.
2017.
[55] C. Yagemann, S. Sultana, L. Chen, and W. Lee, “Bar-
num: Detecting document malware via control ﬂow
anomalies in hardware traces,” in Proceedings of the
25th Information Security Conference (ISC), New
York, NY, USA, 2019.
J. Lee, T. Avgerinos, and D. Brumley, “Tie: Princi-
pled reverse engineering of types in binary programs,”
2011.
[56]
[57] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse en-
gineering of data structures from binary execution,” in
Proceedings of the 11th Annual Information Security
Symposium, 2010, pp. 1–1.
[58] T. Wang, C. Song, and W. Lee, “Diagnosis and emer-
gency patch generation for integer overﬂow exploits,”
in International Conference on Detection of Intru-
sions and Malware, and Vulnerability Assessment,
Springer, 2014, pp. 255–275.
J. Wilander, N. Nikiforakis, Y. Younan, M. Kamkar,
and W. Joosen, “Ripe: Runtime intrusion preven-
tion evaluator,” in In Proceedings of the 27th An-
nual Computer Security Applications Conference (AC-
SAC), ACM, 2011.
[59]
[60] P. E. Black and P. E. Black, Juliet 1.3 Test Suite:
Changes From 1.2. US Department of Commerce,
National Institute of Standards and Technology, 2018.
[61] CVE-2004-0597 Patch, https : / / github . com /
mudongliang / LinuxFlaw / tree / master / CVE -
2004- 0597#patch, [Online; accessed 25-October-
2019].
[62] CVE-2004-1288 Patch, https://pastebin.com/
[Online; accessed 25-October-
raw / fsFkspFF,
2019].
[63] Red Hat Bugzilla – Attachment 360889 Details for
Bug 523105, https : / / bugzilla . redhat . com /
attachment.cgi?id=360889&action=diff, [On-
line; accessed 07-January-2020].
[64] Debian Bug report logs - #552035, https://bugs.
debian.org/cgi- bin/bugreport.cgi?att=1;
bug = 552035 ; filename = diff ; msg = 16, [Online;
accessed 10-January-2020].
[65] Commit 3f730d50, https : / / github . com /
antirez / redis / commit / 3f730d50, [Online; ac-
cessed 16-January-2020].
2004    30th USENIX Security Symposium
USENIX Association
[66] gif2png, Command Line Buffer Overﬂow, https://
bugs . debian . org / cgi - bin / bugreport . cgi ?
bug = 550978 # 50, [Online; accessed 25-October-
2019], 2009.
[67] ntp, Stack-based buffer overﬂow in ntpq and ntpdc
allows denial of service or code execution, https:
/ / bugzilla . redhat . com / show _ bug . cgi ? id =
1593580, [Online; accessed 25-October-2019], 2018.
[68] Commit 5470551c, https : / / github . com / mz -
automation / libiec61850 / commit / 5470551c,
[Online; accessed 09-April-2020].
[69] pdfresurrect, Prevent a buffer overﬂow in possibly
corrupt PDFs, https://github.com/enferex/
pdfresurrect / commit / 3f811dbc, [Online; ac-
cessed 25-October-2019], 2019.
libtiff, Multiple libtiff Issues, https://bugzilla.
redhat . com / attachment . cgi ? id = 128255 &
action=diff, [Online; accessed 25-October-2019],
2006.
[70]
[71] EXIF Tag Parsing Library, #70 SERIOUS SECU-
RITY BUG IN EXIF_DATA_LOAD_DATA_ENTRY(),
https://sourceforge.net/p/libexif/bugs/
70/, [Online; accessed 25-October-2019], 2007.
[72] patch.2013.chunked.txt, https : / / nginx . org /
download / patch . 2013 . chunked . txt, [Online;
accessed 16-January-2020].
[73] patch.2017.ranges.txt, https : / / nginx . org /
download/patch.2017.ranges.txt, [Online; ac-
cessed 16-January-2020].
[74] GraphicsMagick, Attempt to Fix Issue 440, http :
//hg.code.sf.net/p/graphicsmagick/code/
rev/98721124e51f, [Online; accessed 25-October-
2019], 2017.
libzip, Fix double free, https://github.com/nih-
at/libzip/commit/9179b796, [Online; accessed
25-October-2019], 2017.
[75]
[76] CVE-2005-0105 Patch, https://pastebin.com/
[Online; accessed 25-October-
raw / GHm1k1Rk,
2019].
sudo, Format String Vulnerability, https://bugs.
gentoo.org/401533, [Online; accessed 25-October-
2019], 2012.
[78] LinuxFlaw,
[77]
https : / / github . com /
ac-
[Online;
VulnReproduction / LinuxFlaw,
cessed 06-January-2020].
[79] Exploit Database, https : / / www . exploit - db .
com/, [Online; accessed 06-January-2020].
[80]
I. Haller, A. Slowinska, M. Neugschwandtner, and
H. Bos, “Dowsing for overﬂows: A guided fuzzer to
ﬁnd buffer boundary violations,” in Proceedings of
the 22nd USENIX Security Symposium, 2013, pp. 49–
64.
[81] D. Zhang, D. Liu, Y. Lei, D. Kung, C. Csallner, and W.
Wang, “Detecting vulnerabilities in c programs using
trace-based testing,” in 2010 IEEE/IFIP International
Conference on Dependable Systems and Networks
(DSN), 2010.
[82] V. van der Veen, D. Andriesse, M. Stamatogiannakis,
X. Chen, H. Bos, and C. Giuffrdia, “The dynamics of
innocent ﬂesh on the bone: Code reuse ten years later,”
in Proceedings of the 2017 ACM SIGSAC Conference
on Computer and Communications Security, 2017,
pp. 1675–1689.
[83] S. Y. Chau, M. Yahyazadeh, O. Chowdhury, A. Kate,
and N. Li, “Analyzing semantic correctness with sym-
bolic execution: A case study on pkcs# 1 v1. 5 signa-
ture veriﬁcation.,” in NDSS, 2019.
[84] X. Chen, A. Slowinska, and H. Bos, “Who allocated
my memory? detecting custom memory allocators
in c binaries,” in 2013 20th Working Conference on
Reverse Engineering (WCRE), IEEE, 2013, pp. 22–
31.
[85] WindowsIntelPT, https://github.com/intelpt/
WindowsIntelPT, [Online; accessed 12-June-2020].
[86] winipt, https : / / github . com / ionescu007 /
[87]
[88]
winipt, [Online; accessed 12-June-2020].
J. C. King, “Symbolic execution and program testing,”
Communications of the ACM, vol. 19, no. 7, pp. 385–
394, 1976.
J. Newsome, D. Brumley, J. Franklin, and D. Song,
“Replayer: Automatic protocol replay by binary anal-
ysis,” in Proceedings of the 13th ACM conference on
Computer and communications security, ACM, 2006,
pp. 311–321.
[89] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager,
M. G. Kang, Z. Liang, J. Newsome, P. Poosankam,
and P. Saxena, “Bitblaze: A new approach to
computer security via binary analysis,” in Interna-
tional Conference on Information Systems Security,
Springer, 2008, pp. 1–25.
[90] P. Saxena, P. Poosankam, S. McCamant, and D. Song,
“Loop-extended symbolic execution on binary pro-
grams,” in Proceedings of the eighteenth international
symposium on Software testing and analysis, ACM,
2009, pp. 225–236.
[91] D. A. Molnar and D. Wagner, “Catchconv: Symbolic
execution and run-time type inference for integer con-
version errors,” UC Berkeley EECS, 2007.
USENIX Association
30th USENIX Security Symposium    2005
[103]
I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “Qsym:
A practical concolic execution engine tailored for
hybrid fuzzing,” in 27th USENIX Security Symposium
(USENIX Security 18), 2018, pp. 745–761.
[104] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brum-
ley, “Automatic exploit generation,” Carnegie Mellon
University, 2018.
[105] Y. Wang, C. Zhang, X. Xiang, Z. Zhao, W. Li, X.
Gong, B. Liu, K. Chen, and W. Zou, “Revery: From
proof-of-concept to exploitable,” in Proceedings of
the 2018 ACM SIGSAC Conference on Computer and
Communications Security, ACM, 2018, pp. 1914–
1927.
[106] A. Zeller and R. Hildebrandt, “Simplifying and iso-
lating failure-inducing input,” IEEE Transactions on
Software Engineering, vol. 28, no. 2, pp. 183–200,
2002.
J.-D. Choi and A. Zeller, “Isolating failure-inducing
thread schedules,” in ACM SIGSOFT Software Engi-
neering Notes, ACM, vol. 27, 2002, pp. 210–220.
[107]
[108] S. K. Sahoo, J. Criswell, C. Geigle, and V. Adve,
“Using likely invariants for automated software fault
localization,” in ACM SIGARCH Computer Architec-
ture News, ACM, vol. 41, 2013, pp. 139–152.
[109] S. Park, Y. Zhou, W. Xiong, Z. Yin, R. Kaushik, K. H.
Lee, and S. Lu, “Pres: Probabilistic replay with exe-
cution sketching on multiprocessors,” in Proceedings
of the ACM SIGOPS 22nd symposium on Operating
systems principles, ACM, 2009, pp. 177–192.
[110] B. Kasikci, B. Schubert, C. Pereira, G. Pokam, and
G. Candea, “Failure sketching: A technique for auto-
mated root cause diagnosis of in-production failures,”
in Proceedings of the 25th ACM Symposium on Oper-
ating Systems Principles (SOSP), Monterey, CA, Oct.
2015.
J. Xu, D. Mu, X. Xing, P. Liu, P. Chen, and B.
Mao, “Postmortem program analysis with hardware-
enhanced post-crash artifacts,” in 26th USENIX Secu-
rity Symposium (USENIX Security 17), 2017, pp. 17–
32.
[111]
[92] P. Godefroid, M. Y. Levin, D. A. Molnar, et al., “Au-
tomated whitebox fuzz testing.,” in NDSS, Citeseer,
vol. 8, 2008, pp. 151–166.
[93] R. Brotzman, S. Liu, D. Zhang, G. Tan, and M. Kan-
demir, “Casym: Cache aware symbolic execution for
side channel detection and mitigation,” in CaSym:
Cache Aware Symbolic Execution for Side Channel
Detection and Mitigation, IEEE, 2019.
[94] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel,
and G. Vigna, “Firmalice-automatic detection of
authentication bypass vulnerabilities in binary
ﬁrmware.,” in NDSS, 2015.
[95] S. Y. Chau, O. Chowdhury, E. Hoque, H. Ge, A.
Kate, C. Nita-Rotaru, and N. Li, “Symcerts: Practical
symbolic execution for exposing noncompliance in x.
509 certiﬁcate validation implementations,” in 2017
IEEE Symposium on Security and Privacy (SP), IEEE,
2017, pp. 503–520.
[96] L. Martignoni, S. McCamant, P. Poosankam, D. Song,
and P. Maniatis, “Path-exploration lifting: Hi-ﬁ tests
for lo-ﬁ emulators,” in ACM SIGARCH Computer
Architecture News, ACM, vol. 40, 2012, pp. 337–348.
[97] Y. Shoshitaishvili, A. Bianchi, K. Borgolte, A. Cama,
J. Corbetta, F. Disperati, A. Dutcher, J. Grosen, P.
Grosen, A. Machiry, et al., “Mechanical phish: Re-
silient autonomous hacking,” IEEE Security & Pri-
vacy, vol. 16, no. 2, pp. 12–22, 2018.
[98] M. G. Kang, S. McCamant, P. Poosankam, and D.
Song, “Dta++: Dynamic taint analysis with targeted
control-ﬂow propagation.,” in NDSS, 2011.
[99] K. Sen, D. Marinov, and G. Agha, “Cute: A concolic
unit testing engine for c,” in ACM SIGSOFT Software
Engineering Notes, ACM, vol. 30, 2005, pp. 263–
272.
[100] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens,
M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser,
C. Kruegel, and G. Vigna, “SoK: (State of) The Art
of War: Offensive Techniques in Binary Analysis,” in
Proceedings of the 37th Symposium on Security and
Privacy (Oakland), San Jose, CA, May 2016.
[101] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley,
“Unleashing mayhem on binary code,” in Proceed-
ings of the 33rd Symposium on Security and Privacy
(Oakland), San Francisco, CA, May 2012.
[102] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang,
J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vi-
gna, “Driller: Augmenting fuzzing through selective
symbolic execution.,” in Proceedings of the 2016 An-
nual Network and Distributed System Security Sym-
posium (NDSS), San Diego, CA, Feb. 2016.
2006    30th USENIX Security Symposium
USENIX Association