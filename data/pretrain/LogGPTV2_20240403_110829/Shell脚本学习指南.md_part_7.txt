本上，会有些差异。
如同echo命令，printf命令可以输出简单的字符串：
printf *Hello, world\n*
你应该可以马上发现，最大的不同在于：printf不像echo那样会自动提供一个换行
符号，你必须显式地将换行符号指定成n。printf命令的完整语法分为两部分：
printf format-string (arguments ...]
注 4:
值得玩味的是，现行版本的标准中，说明echo在本质上等网于SystemV版本，后者
会处理其参数中的转义序列，但不处理-。
www.TopSage.com
---
## Page 44
32
第2章
第一部分是一个字符串，用来描述输出的排列方式，最好为此字符串加上引号，此字符
串包含了按字面显示的字符（characters to be printed literally）以及格式声明（format
specifications），后者是特殊的占位符（placeholders），用来描述如何显示相应的参数
(argument)。
第二部分是与格式声明相对应的参数列表（argumentlist），例如一系列的字符串或变量
值。（如果参数的个数比格式声明还多，则Drintf会循环且依次地地使用格式字符串
里的格式声明，直到处理完参数）.格式声明分成两部分：百分比符号（8）和指示符
（specifier）。最常用的格式指示符（format specifier）有两个，8s用于字符申，而&d
用于十进制整数。
格式字符串中，一般字符会按字面显示。转义序列则像echo那样，解释后再输出成相
应的字符，格式声明以$符号开头，并以定义的字母集中的一个来结束，用来控制相应
参数的输出。例如，多s用于字符串的输出：
S printf "rhe firat progran alwaye prints *%e, %e1'\n" Hello world
The first program always prints *Hello, world1*
printf的所有详细说明见7.4节。
2.5.5基本的1/O重定向
标准输入/输出（standardI/O，注5）可能是软件设计原则里最重要的概念了，这个概
念就是：程序应该有数据的来源端、数据的目的端（数据要去的地方）以及报告问题的
地方，它们分别被称为标准输人（standard input）、标准输出（standardoutput）以及
标准错误输出（standarderror）。程序不必知道也不用关心它的输入与输出背后是什么
设备：是磁盘上的文件、终端、磁带机、网络连接或是另一个执行中的程序！当程序启
动时，可以预期的是，标准输出人都已打开，且已准备好供其使用，
许多UNIX程序都遵循这一设计原则。默认的情况下，它们会读取标准输人、写入标准
输出，并将错误信息传递到标准错误输出。这类程序常叫做过滤器（filter），你马上就
会知道这么叫的原因。默认的标准输人、标准输出以及标准错误输出都是终端，这点可
通过cat程序得知：
$ cat
未指定任何参数，读取标准输入，写入标准输出
由用户键人
for al1 good nen
now is the tine
由cat 返国
for al1 good nen
to come to the aid of their country
注 5:
此处的 Standard I/O录不要与C程序库的 standard I/O 程序率混淹了，后者的接口定义
于，不这此程序率的工作一样是凝供类似的概念给C程序使用。
www.TopSage.com
---
## Page 45
入门
33
to come to the aid of their country
*D
Crri-D，文件结尾
你可能想要知道，是谁替执行中的程序初始化标准输入、输出及错误输出的呢？毕竞，
总应该有人来替执行中的程序打开这些文件，甚至是让用户在登录后能够看到交互的
Shell界面。
答案就是在你登录时，UNIX便将默认的标准输入、输出及错误输出安排成你的终端。
I/O重定向就是你通过与终端交互，或是在Shell脚本里设置，重新安排从哪里输人或输
出到哪里。
2.5.5.1重定向与管道
Shell提供了数种语法标记，可用来改变默认I/O的来源端与目的端。此处会先介绍基本
用法，稍后再提供完整的说明。让我们由浅入深地依次介绍如下：
以改变标准输出
program>file可将program的标准输出修改为file：
tr -d *\r' UNIx-file.txt
这条命令会先以tr将dos-fi1e.txt里的ASCII carriage-return（回车）删除，
再将转换完成的数据输出到tNIx-file.txt。dos-file.txt里的原始数据不会
有变化。（tr命令在第5章有完整的说明。）
>重定向符（redirector）在目的文件不存在时，会新建一个。然而，如果目的文件
已存在，它就会被覆盖掉：原本的数据都会丢失。
以>>附加到文件
program>>file可特program的标准输出附加到file的结尾处。
如同>，如果目的文件不存在，>>重定向符便会新建一个。然而，如果目的文件存
在，它不会直接覆盖掉文件，而是将程序所产生的数据附加到文件结尾处：
for f in do8-file*,txt
do
tr -d *\r' > big-UNIx-file.txt
done
（for循环的介绍详见6.4节。）
以|建立管道
program11program2可将programi的标准输出修改为program2的标准输入。
www.TopSage.com
---
## Page 46
34
第章
行中的程序街接在一起。第一个程序的标准输出可以变成第二个程序的标准输入。
这么做的好处是，管道可以使得执行速度比使用临时文件的程序快上十倍。本书中
有相当多篇幅都是在讨论如何将各类工具申在一起，置人越来越复杂且功能越来越
强大的管道中。例如：
tr -d*\r' UNIx-file.txt
这条管道会先删除输人文件内的回车字符，在完成数据的排序之后，将结果输出到
目的文件。
tr
语法
tr [ options ] source-char-list replace-char-list
用途
转换字符。例如，将大写字将转换成小写。选项可让你指定所要删除的字符，
以及将一串重复出现的字异浓端成一个。
常用选项
-C
取source-char-list的反义。tr要特换的字持，变成未列在source-
char-list中的字符。此选项通常与-d或-s配合使用。
5-
与-C相似，但所处理的是字将（可能是包含多个字节的宽字将），而非二
进制的字节值。参考“警告”的说明。
- d
自标准输入删除souzce-char-list里所列的字异，而不是转换它们。
-8
滚缩重复的字持。如果标准输入中选续重复出现source-char-list里
所列的字将、则将其浓缩成一个。
行为模式
如网过滤器：自标准输入读取字持，再将结果写到标准输出。任何输入字符
只要出现在source-char-list中，截会置换成replace-char-list里相应
的字符。POSIX风格的字将与等效的字持集也适用，而且tr还支持replace-
char-list中重复字将的标记法，相美细节请参考rr（1）的在线说明文档。
登告
根据POSIX标准的定义，-C处理的是二进制字节值，而-C处理的是现行locale
所定叉的字持，直到2005年初，仍有许多系统不支持-C选项。
www.TopSage.com
---
## Page 47
入门
35
使用UNIX工具程序时，不妨将数据想象成水管里的水。来经处理的水，将流向净水厂，
经过各类滤器的处理，最后产生适合人类饮用的水。
同样，编写脚本时，你通常已有某种输人格式定义下的原始数据，而需要处理这些数据
后产生结果，（处理一词表示很多意思，例如排序、加和与平均、格式化以便于打印，等
等。）从最原始的数据开始，然后构造一条管道，一步一步地，管道中的每个阶段都会
让数据更接近要的结果。
如果你是UNIX新手，可以把想象或数据的满斗（funnels）-数据会从大的一
端进入，由小的一端出来。
注意：构造管道时，应该试着让每个阶段的数据量变得更少，换句话说，如果你有两个要完成的
步骤与先后次序无美，你可以把会让数据量变少的那一个参骤放在管道的前面，这么做可
以提升脚本的整体性能，因为UNIX只需要在两个程序间移动少的数据量，每个程序要微
的事也比较少。
例如，使用sort排序之前，先以grep找出相关的行，这样可以让sort少做些事。
2.5.5.2特殊文件：/dev/null与/dev/tty
UNIX系统提供了两个对Shell编程特别有用的特殊文件。第一个文件/dev/nu11，就
是大家所熟知的位桶（bitbucket）.传送到此文件的数据都会被系统丢掉。也就是说，
当程序将数据写到此文件时，会认为它已成功完成写人数据的操作，但实际上什么事都
没微。如果你需要的是命令的退出状态（见6.2节），而非它的输出，此功能会很有用。
例如，测试一个文件是否包含某个模式（pattern）：
if gzep pattern myfi1e >/dev/nul1
then
else
找到模式时
fi
我不到模式时
和对地，读取/dev/nul1则会立即返回文件结束符号（end-of-file）。读取/Gev/nul1
的操作很少会出现在Shell程序里，不过了解这个文件的行为模式还是非常重要的。
另一个特殊文件为/dev/tty。当程序打开此文件时，UNIX会自动将它重定向到一个终
端[一个实体的控制台（console）或申行端口（serial port），也可能是一个通过网络与
窗口登录的伪终端（pseudoterminal）】再与程序结合，这在程序必须读取人工输人时（例
如密码）特别有用。此外，用它来产生错误信息也很方便，只是比较少人这么微：
www.TopSage.com
---
## Page 48
36
第2章
printf *Bnter nev password: *
提示能人
stty -echo
关闭自动打印输入字符的动能
read pas6 < /dev/tty
读取密码
printf *Bnter again: *
提示再输入一次
read pass2 < /dev/tty
别忘了打开自动款印输入字符的功能
再波取一次以确认
stty echo
• + *
stty（settty）命令用来控制终端（或窗口，注6）的各种设置。-echo选项用来关闭
自动打印每个输人字符的功能：sttyecho用来恢复该功能。
2.5.6基本命令查找
之前，我们曹提及Shell会沿着查找路径$PATH来寻找命令。$PATH是一个以冒号分隔
的目录列表，你可以在列表所指定的目录下找到所要执行的命令。所找到的命令可能是
编译后的可执行文件，也可能是Shell脚本，从用户的角度来看，两者井无不同。
默认路径（defaultpath）因系统而异，不过至少包含/bin与/usr/bin，或许还包含
存放XWindows程序的/usr/X11R6/bin，以及供本地系统管理人员安装程序的/usr/
local/bin, 例如:
/bin1/usr/bin:/usr/X11R6/bin1/u8r/local/bin
$ echo $PATH
名称为bin的目录用来保存可执行文件，bin是binary的缩写。你也可以直接把bin解释
成相应的英文字义一存储东西的容器：这里所存储的是可执行的程序。
如果你要编写自己的脚本，最好准备自己的bin目录来存放它们，并且让Shell能够自动
找到它们。这不难，只要建立自己的bin目录，并将它加入SPATH中的列表即可：
$ed
切换到home目录
S nkdir bin
将我们的脚本置人该目录
建立个人bin目录
S nv nusers bin
$ PATH=$PATH：$HOHE/bin
将个人的bin目录附加到 PATH
$ nueers
Shel1有找到并执行它
试试者
6
要让修改永久生效，在·profile文件中把你的bin目录加入SPATH，而每次登录时
Shell都将读取.profile文件，例如：
PATH=SPATH: SHOME/bin
注 6:
atty可能是现有的UNIX命令中，最怪异且最复杂的一个，相美细节可参考sty（1）的
manpage 或是《UNIX in a Nutshell) 这本布。
www.TopSage.com
---
## Page 49
入门
237
$PATH里的空项目（emptycomponent）表示当前目录（currentdirectory）空项目位COIm
于路径值中间时，可以用两个连续的冒号来表示。如果将冒号直接置于最前端或尾端，
可以分别表示查找时最先查找或最后查找当前目录：
PATH=1/bin1/usr/bin1/usr/X11R6/bin:/usr/1oca1/bin
PATH=/bin: /usr/bin:/usr/X11R6/bin:/usr/1oca1/bin:
先找当前目录
最后找当前目录
PATH=/bin:/usr/bin:/usr/X11R6/bin:1/usr/1ocal/bin
当前目录居中
如果你希望将当前目录纳入查找路径（searchpath），更好的做法是在SPATH中使用点
号（dot）：这可以让阅读程序的人更清楚程序在做什么。
测试过程中，我们发现同一个系统有两个版本并未正确支持$PATH结尾的空项目，因此
空项目在可移植性上有点问题，
注意：一般来说，你根本就不应该在查找路径中放进当前目录，因为这会有安全上的问题（进一
参的信息请参考第15章），之所以会提到空项目，只是为了让你了解路径查找的运作模式，
2.6访问Shell脚本的参数
所谓的位置参数（positionalparameters）指的也就是Shell脚本的命令行参数（command
linearguments）。在Shell函数里，它们同时也可以是函数的参数。各参数都由整数来
命名。基于历史的原因，当它超过9，就应该用大括号把数字框起来：
echo first arg is $1
echo tenth arg is $(10)
此外，通过特殊变量，我们还可以取得参数的总数，以及一次取得所有参数。相关细节
参见6.1.2.2节。
假设你想知道某个用户正使用的终端是什么，你当然可以直接使用who命令，然后在输
出中自己慢慢找。这么做很麻烦又容易出错一特别是当系统的用户很多的时候。你
想做的只不过是在who的输出中找到那位用户，这个时候你可以用grep命令来进行查
找操作，它会列出与第一个参数（所指定的模式）匹配的每一行。假设你要找的是用户
bet sy:
$ who 1 grep betay