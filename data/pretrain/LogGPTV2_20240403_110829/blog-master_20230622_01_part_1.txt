## 老机器上安装ubuntu 11, 使用lvm, 测试postgresql 16 & duckdb 0.8.1            
### 作者                                                                                    
digoal                                                                                    
### 日期                                                                                    
2022-06-22                                                                         
### 标签                                                                                    
PostgreSQL , PolarDB , debian                                                                
----                                                                      
## 背景     
## 制作debian 11 USB安装镜像并安装  
[《在macOS中制作debian USB安装镜像, 在带Nvidia显卡笔记本上的安装部署debian 11 - 测试 PostgreSQL, AIGC cuda 应用》](../202303/20230317_02.md)    
## 配置debian, 安装测试postgresql 16  
1、配置使用静态IP  
最好在电脑终端使用netmanager图形界面操作.   
2、配置dns  
```  
vi /etc/resolv.conf  
nameserver 8.8.8.8  
nameserver 114.114.114.114
```  
3、配置国内的apt源    
```    
vi /etc/apt/sources.list    
deb https://mirrors.nju.edu.cn/debian/ bullseye main non-free contrib      
deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib      
deb https://mirrors.aliyun.com/debian-security/ bullseye-security main      
deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main      
deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib      
deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib      
deb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib      
deb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib     
apt update     
apt-get reinstall apt-transport-https ca-certificates       
sed -i "s@http://mirrors.nju.edu.cn@https://mirrors.nju.edu.cn@g" /etc/apt/sources.list      
apt update      
```    
4、安装openssh-server 并配置 sshd 服务.      
```      
apt-get install openssh-server      
```    
配置sshd:      
```      
vi /etc/ssh/sshd_config      
去除如下几行的注释:       
Port 22      
ListenAddress 0.0.0.0      
PasswordAuthentication yes      
PermitRootLogin yes    
TCPKeepAlive yes      
```    
重启sshd服务:      
```    
systemctl restart ssh.service    
```     
4\.1、OR  
```  
# apt-get install -y ssh  
# /etc/init.d/ssh start  
# /etc/init.d/ssh status  
# vi /etc/ssh/sshd_config  
PermitRootLogin yes  
PasswordAuthentication yes  
# /etc/init.d/ssh restart  
```  
5、配置默认启动到命令行界面      
https://blog.csdn.net/joker00007/article/details/120658259      
```      
sudo systemctl set-default multi-user.target       
```      
如果要改回来图形界面启动:      
```      
sudo systemctl set-default graphical.target      
```   
5\.1、OR  
配置默认启动text模式  
```  
# vi /etc/default/grub  
GRUB_CMDLINE_LINUX="text"  
# update-grub  
# systemctl set-default multi-user.target  
# init 6  
```  
6、配置sysctl参数  
```  
# vi /etc/sysctl.d/99-sysctl.conf   
vm.dirty_background_bytes = 409600000         
#  系统脏页到达这个值，系统后台刷脏页调度进程 pdflush（或其他） 自动将(dirty_expire_centisecs/100）秒前的脏页刷到磁盘  
vm.dirty_expire_centisecs = 3000               
#  比这个值老的脏页，将被刷到磁盘。3000表示30秒。  
vm.dirty_ratio = 95                            
#  如果系统进程刷脏页太慢，使得系统脏页超过内存 95 % 时，则用户进程如果有写磁盘的操作（如fsync, fdatasync等调用），则需要主动把系统脏页刷出。  
#  有效防止用户进程刷脏页，在单机多实例，并且使用CGROUP限制单实例IOPS的情况下非常有效。    
vm.dirty_writeback_centisecs = 100              
#  pdflush（或其他）后台刷脏页进程的唤醒间隔， 100表示1秒。  
vm.mmap_min_addr = 65536  
vm.overcommit_memory = 0       
#  在分配内存时，允许少量over malloc, 如果设置为 1, 则认为总是有足够的内存，内存较少的测试环境可以使用 1 .    
vm.overcommit_ratio = 90       
#  当overcommit_memory = 2 时，用于参与计算允许指派的内存大小。  
vm.swappiness = 0              
#  关闭交换分区  
vm.zone_reclaim_mode = 0       
# 禁用 numa, 或者在vmlinux中禁止.   
生效参数:   
# sysctl -p  
```  
7、配置OS资源限制   
```  
# vi /etc/security/limits.d/99.conf  
# nofile超过1048576的话，一定要先将sysctl的fs.nr_open设置为更大的值，并生效后才能继续设置nofile.  
* soft    nofile  1024000  
* hard    nofile  1024000  
* soft    nproc   unlimited  
* hard    nproc   unlimited  
* soft    core    unlimited  
* hard    core    unlimited  
* soft    memlock unlimited  
* hard    memlock unlimited  
```  
8、关闭自动更新   
```  
apt remove unattended-upgrades  
```  
9、关闭按键关机、休眠等操作  
```  
# vi /etc/systemd/logind.conf   
HandlePowerKey=ignore  
HandleSuspendKey=ignore  
HandleHibernateKey=ignore  
HandleLidSwitch=ignore  
HandleLidSwitchExternalPower=ignore  
HandleRebootKey=ignore  
# systemctl restart systemd-logind  
```  
10、关闭节能功能(自动关机、自动关屏幕、自动关硬盘等)  
```  
root@dege:~# systemctl status sleep.target  
● sleep.target - Sleep  
     Loaded: loaded (/lib/systemd/system/sleep.target; static)  
     Active: inactive (dead)  
       Docs: man:systemd.special(7)  
root@dege:~# systemctl mask sleep.target suspend.target hibernate.target hybird-sleep.target  
Unit hybird-sleep.target does not exist, proceeding anyway.  
Created symlink /etc/systemd/system/sleep.target → /dev/null.  
Created symlink /etc/systemd/system/suspend.target → /dev/null.  
Created symlink /etc/systemd/system/hibernate.target → /dev/null.  
Created symlink /etc/systemd/system/hybird-sleep.target → /dev/null.  
root@dege:~# systemctl status sleep.target  
● sleep.target  
     Loaded: masked (Reason: Unit sleep.target is masked.)  
     Active: inactive (dead)  
```  
11、在操作机 macOS中配置连接脚本  
```  
cat dell.sh   
#!/usr/bin/expect    
set user "root"    
set host "192.168.28.199"    
set port "22"    
set pwd "root密码"    
spawn ssh -o TCPKeepAlive=yes -o ServerAliveInterval=15 -o ServerAliveCountMax=3 $user@$host -p $port  
expect {  
"yes/no" { send "yes\r"; exp_continue }  
"password:" { send "$pwd\r" }  
}  
interact  
chmod 500 dell.sh  
```  
12、安装一些常用的包  
```  
apt install -y curl gnupg lsb-release locales wget glibc-source zlib1g-dev pkg-config libicu-dev icu-devtools libbison-dev libfl-dev git libreadline-dev libedit-dev g++ make cmake man-db vim dnsutils clang libssl-dev default-jdk unixodbc unixodbc-dev bash-completion   
```  
13、配置lvm sdb,sdc,sdd,sde   
```  
# lsblk  
NAME                MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT  
..........  
sdb                   8:16   0 223.6G  0 disk   
sdc                   8:32   0 223.6G  0 disk   
sdd                   8:48   0 223.6G  0 disk   
sde                   8:64   0 223.6G  0 disk   
# wipefs -f -a /dev/sd[b-e]  
# dd bs=1024 count=1000 oflag=direct if=/dev/zero of=/dev/sdb    
# dd bs=1024 count=1000 oflag=direct if=/dev/zero of=/dev/sdc    
# dd bs=1024 count=1000 oflag=direct if=/dev/zero of=/dev/sdd    
# dd bs=1024 count=1000 oflag=direct if=/dev/zero of=/dev/sde  
# parted -a optimal -s /dev/sdb mklabel gpt mkpart primary 1MiB 100%FREE    
# parted -a optimal -s /dev/sdc mklabel gpt mkpart primary 1MiB 100%FREE    
# parted -a optimal -s /dev/sdd mklabel gpt mkpart primary 1MiB 100%FREE    
# parted -a optimal -s /dev/sde mklabel gpt mkpart primary 1MiB 100%FREE    
# wipefs -f -a /dev/sd[b-e]1   
# pvcreate /dev/sd[b-e]1   
# vgcreate -A y -s 128M vgdata01 /dev/sd[b-e]1     
# lvcreate -A y -i 4 -I 8 -l 100%FREE -n lv01 vgdata01    
# mkfs.ext4 /dev/mapper/vgdata01-lv01 -m 0 -O extent,uninit_bg -E lazy_itable_init=1,stride=2,stripe_width=8 -b 4096 -T largefile -L lv01      
```  
装载  
```    
vi /etc/fstab       
LABEL=lv01 /data01 ext4 defaults,noatime,nodiratime,nodelalloc,barrier=0,data=writeback 0 0    
mkdir /data01      
mount -a      
```    
14、添加postgres用户  
```  
# useradd -s /bin/bash -d /home/postgres -m postgres   
# mkdir /data01/pg16  
# chown postgres:postgres /data01/pg16  
$ su - postgres  
$ vi ~/.bashrc      
#  add by digoal      
alias rm='rm -i'      
alias cp='cp -i'      
alias ll='ls -larth'      
alias mv='mv -i'  
unalias vi  
export PS1="$USER@`/bin/hostname -s`-> "    
export PGPORT=1921     
export PGUSER=postgres   
export PGDATABASE=postgres    
export PGHOME=/home/postgres/pg16   
export PATH=$PGHOME/bin:$PATH      
export PGDATA=/data01/pg16/pgdata$PGPORT       
export PGHOST=$PGDATA      
export MANPATH=$PGHOME/share/man:$MANPATH    
export LD_LIBRARY_PATH=$PGHOME/lib:$LD_LIBRARY_PATH    
export LANG=en_US.utf8    
export LC_ALL=en_US.UTF-8  
export DATE=`date +"%Y%m%d%H%M"`    
$ . ~/.bashrc     
```  