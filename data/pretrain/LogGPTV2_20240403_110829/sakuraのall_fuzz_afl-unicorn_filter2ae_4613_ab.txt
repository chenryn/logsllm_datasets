        {
            return 1;
        }
从代码可以看出，传入的参数a和b的值应为5和"batman"  
从汇编代码最后的Ret 8可以看出来被调用者平衡堆栈，显然是stdcall调用约定。  
stdcall的调用约定意味着参数从右向左压入堆栈。  
当我们开始执行super_function的时候,esp是指向返回地址的。  
所以a的值在esp+4,b的值在esp+8。（不理解的看图）  
然后返回值会保存在eax里。
    import struct
    def read(name):
        with open(name,'rb') as f:
            return f.read()
    def u32(data):
        return struct.unpack("I", data)[0]
    def p32(num):
        return struct.pack("I", num)
    from unicorn import *
    from unicorn.x86_const import *
    mu = Uc(UC_ARCH_X86, UC_MODE_32)
    BASE = 0x8048000
    STACK_ADDR = 0x0
    STACK_SIZE = 1024*1024
    mu.mem_map(BASE, 1024*1024)
    mu.mem_map(STACK_ADDR, STACK_SIZE)
    string_addr = 0x0
    mu.mem_write(string_addr, b"batman\x00")
    str = mu.mem_read(string_addr,6)
    print(str)
    mu.mem_write(BASE, read("./function"))
    mu.reg_write(UC_X86_REG_ESP, STACK_ADDR + 1024)
    mu.mem_write(STACK_ADDR + 1024 + 4, p32(5))
    mu.mem_write(STACK_ADDR + 1024 + 8, p32(string_addr))
    def hook_code(mu, address, size, user_data):
        print
        ('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
        print(mu.mem_read(address,size))
    mu.hook_add(UC_HOOK_CODE, hook_code)
    mu.emu_start(BASE+0x57b,BASE+0x5b1)
    reg = mu.reg_read(UC_X86_REG_EAX)
    print(reg)
到这里我的unicorn学习就结束了，感觉大概熟悉了一下API和使用。  
另外ghrida真的不好用。。我准备换回IDA了。
## AFL-unicorn学习
先在sec.today上找一下资料  
第一篇我就不赘述了，  
稍微值得一提的就是这个图了，它使用AFL来mutate样本去生成数据，然后将数据读到一个固定的地址里，然后harness会从这个地址读取数据并运行要仿真的指令，如果出现crash，则模拟这个行为让harness崩溃，从而告知AFL
crash发生，从而记录下crash样本。  
harness基本上就是用了上面这些task里类似的方法去用unicorn把指令仿真执行起来，如下。
    """ 
       Simple test harness for AFL's Unicorn Mode.
       This loads the simple_target.bin binary (precompiled as MIPS code) into
       Unicorn's memory map for emulation, places the specified input into
       simple_target's buffer (hardcoded to be at 0x300000), and executes 'main()'.
       If any crashes occur during emulation, this script throws a matching signal
       to tell AFL that a crash occurred.
       Run under AFL as follows:
       $ cd /unicorn_mode/samples/simple/
       $ ../../../afl-fuzz -U -m none -i ./sample_inputs -o ./output -- python simple_test_harness.py @@ 
    """
    import argparse
    import os
    import signal
    from unicorn import *
    from unicorn.mips_const import *
    # Path to the file containing the binary to emulate
    BINARY_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'simple_target.bin')
    # Memory map for the code to be tested
    CODE_ADDRESS  = 0x00100000  # Arbitrary address where code to test will be loaded
    CODE_SIZE_MAX = 0x00010000  # Max size for the code (64kb)
    STACK_ADDRESS = 0x00200000  # Address of the stack (arbitrarily chosen)
    STACK_SIZE    = 0x00010000  # Size of the stack (arbitrarily chosen)
    DATA_ADDRESS  = 0x00300000  # Address where mutated data will be placed
    DATA_SIZE_MAX = 0x00010000  # Maximum allowable size of mutated data
    try:
        # If Capstone is installed then we'll dump disassembly, otherwise just dump the binary.
        from capstone import *
        cs = Cs(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN)
        def unicorn_debug_instruction(uc, address, size, user_data):
            mem = uc.mem_read(address, size)
            for (cs_address, cs_size, cs_mnemonic, cs_opstr) in cs.disasm_lite(bytes(mem), size):
                print("    Instr: {:#016x}:\t{}\t{}".format(address, cs_mnemonic, cs_opstr))
    except ImportError:
        def unicorn_debug_instruction(uc, address, size, user_data):
            print("    Instr: addr=0x{0:016x}, size=0x{1:016x}".format(address, size))    
    def unicorn_debug_block(uc, address, size, user_data):
        print("Basic Block: addr=0x{0:016x}, size=0x{1:016x}".format(address, size))
    def unicorn_debug_mem_access(uc, access, address, size, value, user_data):
        if access == UC_MEM_WRITE:
            print("        >>> Write: addr=0x{0:016x} size={1} data=0x{2:016x}".format(address, size, value))
        else:
            print("        >>> Read: addr=0x{0:016x} size={1}".format(address, size))    
    def unicorn_debug_mem_invalid_access(uc, access, address, size, value, user_data):
        if access == UC_MEM_WRITE_UNMAPPED:
            print("        >>> INVALID Write: addr=0x{0:016x} size={1} data=0x{2:016x}".format(address, size, value))
        else:
            print("        >>> INVALID Read: addr=0x{0:016x} size={1}".format(address, size))   
    def force_crash(uc_error):
        # This function should be called to indicate to AFL that a crash occurred during emulation.
        # Pass in the exception received from Uc.emu_start()
        mem_errors = [
            UC_ERR_READ_UNMAPPED, UC_ERR_READ_PROT, UC_ERR_READ_UNALIGNED,
            UC_ERR_WRITE_UNMAPPED, UC_ERR_WRITE_PROT, UC_ERR_WRITE_UNALIGNED,
            UC_ERR_FETCH_UNMAPPED, UC_ERR_FETCH_PROT, UC_ERR_FETCH_UNALIGNED,
        ]
        if uc_error.errno in mem_errors:
            # Memory error - throw SIGSEGV
            os.kill(os.getpid(), signal.SIGSEGV)
        elif uc_error.errno == UC_ERR_INSN_INVALID:
            # Invalid instruction - throw SIGILL
            os.kill(os.getpid(), signal.SIGILL)
        else:
            # Not sure what happened - throw SIGABRT
            os.kill(os.getpid(), signal.SIGABRT)
    def main():
        parser = argparse.ArgumentParser(description="Test harness for simple_target.bin")
        parser.add_argument('input_file', type=str, help="Path to the file containing the mutated input to load")
        parser.add_argument('-d', '--debug', default=False, action="store_true", help="Enables debug tracing")
        args = parser.parse_args()
        # Instantiate a MIPS32 big endian Unicorn Engine instance
        uc = Uc(UC_ARCH_MIPS, UC_MODE_MIPS32 + UC_MODE_BIG_ENDIAN)
        if args.debug:
            uc.hook_add(UC_HOOK_BLOCK, unicorn_debug_block)
            uc.hook_add(UC_HOOK_CODE, unicorn_debug_instruction)
            uc.hook_add(UC_HOOK_MEM_WRITE | UC_HOOK_MEM_READ, unicorn_debug_mem_access)
            uc.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED | UC_HOOK_MEM_READ_INVALID, unicorn_debug_mem_invalid_access)
        #---------------------------------------------------        # Load the binary to emulate and map it into memory
        print("Loading data input from {}".format(args.input_file))
        binary_file = open(BINARY_FILE, 'rb')
        binary_code = binary_file.read()
        binary_file.close()
        # Apply constraints to the mutated input
        if len(binary_code) > CODE_SIZE_MAX:
            print("Binary code is too large (> {} bytes)".format(CODE_SIZE_MAX))
            return
        # Write the mutated command into the data buffer
        uc.mem_map(CODE_ADDRESS, CODE_SIZE_MAX)
        uc.mem_write(CODE_ADDRESS, binary_code)
        # Set the program counter to the start of the code
        start_address = CODE_ADDRESS          # Address of entry point of main()
        end_address   = CODE_ADDRESS + 0xf4   # Address of last instruction in main()
        uc.reg_write(UC_MIPS_REG_PC, start_address)
        #-----------------        # Setup the stack
        uc.mem_map(STACK_ADDRESS, STACK_SIZE)
        uc.reg_write(UC_MIPS_REG_SP, STACK_ADDRESS + STACK_SIZE)
        #-----------------------------------------------------        # Emulate 1 instruction to kick off AFL's fork server
        #   THIS MUST BE DONE BEFORE LOADING USER DATA! 
        #   If this isn't done every single run, the AFL fork server 
        #   will not be started appropriately and you'll get erratic results!
        #   It doesn't matter what this returns with, it just has to execute at
        #   least one instruction in order to get the fork server started.
        # Execute 1 instruction just to startup the forkserver
        print("Starting the AFL forkserver by executing 1 instruction")
        try:
            uc.emu_start(uc.reg_read(UC_MIPS_REG_PC), 0, 0, count=1)
        except UcError as e:
            print("ERROR: Failed to execute a single instruction (error: {})!".format(e))
            return
        #-----------------------------------------------        # Load the mutated input and map it into memory
        # Load the mutated input from disk
        print("Loading data input from {}".format(args.input_file))
        input_file = open(args.input_file, 'rb')
        input = input_file.read()
        input_file.close()
        # Apply constraints to the mutated input
        if len(input) > DATA_SIZE_MAX:
            print("Test input is too long (> {} bytes)".format(DATA_SIZE_MAX))
            return
        # Write the mutated command into the data buffer
        uc.mem_map(DATA_ADDRESS, DATA_SIZE_MAX)
        uc.mem_write(DATA_ADDRESS, input)
        #------------------------------------------------------------        # Emulate the code, allowing it to process the mutated input
        print("Executing until a crash or execution reaches 0x{0:016x}".format(end_address))
        try:
            result = uc.emu_start(uc.reg_read(UC_MIPS_REG_PC), end_address, timeout=0, count=0)
        except UcError as e:
            print("Execution failed with error: {}".format(e))
            force_crash(e)
        print("Done.")
    if __name__ == "__main__":
        main()
看一下第二篇  
### task1 FSK_Messaging_Service
第二篇以一个相对具体的例子，将afl-unicorn的使用场景从不到30行的case扩展到了一个CGC CTF题  
FSK_Messaging_Service  
题目描述是这样的：这是一项服务，该服务实现了具有分组FSK解调前端，分组解码，处理以及最终将其解析为简单Messenger服务的分组无线接收器。
#### step0
安装afl-unicorn
    cd /path/to/afl-unicorn
    make
    sudo make install
    cd unicorn_mode
    sudo ./build_unicorn_support.sh
另外这里还有个坑，如果你在18.04系统上不能运行起来它，可以试试16.04，这卡了我几个小时。
#### step1
首要的工作是对要fuzz的代码进行理解，也就是说理清楚要fuzz的起点和终点，需要构造的输入是什么？输入是如何传递进去的，输入上有哪些约束，比如最大最短长度，是否需要满足某个具体的算式，这个约束是不变的还是动态的。  
虽然我其实不太看得懂这些东西，但是粗略的理解来说就是如果直接构造输入喂进去，那么会卡在Demodulation Logic部分，永远无法正确的突破。  
可以粗略的理解成，如果你用AFL去fuzz