ements of 2S) in which the entry indexed by u ∈ U and
F ⊆ S is deﬁned to be 0 if and only if F (cid:2)= ∅ is ineligible
or there exists s ∈ F such that (s, u) (cid:2)∈ A. (Note that every
entry in the column labeled with ∅ is set to 1.) In other
words, each non-zero matrix entry represents a set of steps
that could be assigned to a single user in a valid plan.
The matrix deﬁned above encodes a family of
tions {φu}u∈U , φu : 2S → {0, 1}. We now solve Max
Weighted Partition on input S and {φu}u∈U . Observe
(cid:3)n
i=1 φi(Fi) (cid:2) n, with equality if and only if W is
func-
that
satisﬁable.
We now consider the complexity of the above algorithm.
We consider each of the 2kn elements in the matrix. We
set the entry for (u, F ) equal to 0 if one of the following
conditions holds:
• there exists a constraint of the form ((cid:2)=, S1, S2) with
S1 ∪ S2 ⊆ F ;
• there exists a constraint of the form (=, S1, S2) with
F ∩ (S1 ∪ S2) = Si for i ∈ {1, 2};
• there exists s ∈ F such that (s, u) (cid:2)∈ A.
The ﬁrst two conditions check whether F is ineligible (see
Proposition 1), while the last condition tests whether u is
authorized for all the steps in F . We can identify the ineli-
gible sets in time O(2kck) = (cid:2)O(2kc). We can then construct
the matrix in O(2knk) = (cid:2)O(2kn) time. Finally, we can solve
Max Weighted Partition in (cid:2)O(2kn2) time. Thus, the to-
tal time required to solve WSP(=,(cid:2)=) is in (cid:2)O(2k(c+n2)).
The special case of the workﬂow satisﬁability problem
WSP((cid:2)=) was studied by Wang and Li from the perspec-
tive of ﬁxed-parameter tractability; the complexity of their
algorithm is O(kk+1N ) = 2O(k log k)N , where N is the size of
the input [17, Lemma 8]. Fellows et al. considered the ﬁxed-
parameter tractability of a special case of the constraint sat-
isfaction problem [15] in which all constraints have the same
form. With these restrictions, the constraint satisfaction
problem is identical to WSP in which all constraints have
the form ((cid:2)=, s1, s2). The algorithm of Fellows et al. has
complexity O(k!kn) = 2O(k log k)n, where n is the number
algorithm with complexity (cid:2)O(2k(c + n2)), so we have im-
of users [10, Theorem 3.1]. Theorem 2 above exhibits an
proved the exponential factor of the best known bounds for
WSP((cid:2)=) in terms of the function in k (which is often the
dominating factor in the complexity of FPT algorithms).
We now demonstrate that it is impossible, assuming the
well-known Exponential Time Hypothesis [11], to improve
this result to any signiﬁcant degree.
Exponential Time Hypothesis
There exists a real number  >0 such that 3-SAT
cannot be solved in time O(2n), where n is the number
of variables.
Theorem 3. Even if there are just two users, WSP((cid:2)=)
cannot be solved in time (cid:2)O(2k) for some positive real ,
where k is the number of steps, unless the Exponential Time
Hypothesis fails.
The proof of this result (and Theorem 5) can be found in
the appendix.
4.3 Equivalence Relation Constraints
Observe that the equality relation is an equivalence re-
lation in which each of the equivalence classes comprises a
single element, and so = and (cid:2)= may be modelled as in-
stances of ∼ and (cid:2)∼. Henceforth, therefore, we only consider
constraints of the form (∼, S1, S2) and ((cid:2)∼, S1, S2).
In Proposition 2 below, we prove that WSP(∼,(cid:2)∼) is FPT,
thereby extending the class of workﬂow speciﬁcations for
which the satisﬁability problem is in FPT. In turn, Propo-
sition 2 will be signiﬁcantly extended in Theorem 4.
(cid:3)
(cid:3)
(cid:3)
(cid:3)
.
(cid:3)
relation ∼ deﬁned on U , WSP(∼,(cid:2)∼) is FPT.
Proposition 2. For any user set U and any equivalence
Proof. Consider an instance of the problem W =
(S, U, (cid:2), A, C) and let V1, . . . , Vm be the equivalence classes
of ∼. Then consider the following workﬂow speciﬁcation:
W(cid:3)
, (cid:2), A
= {V1, . . . , Vm};
(cid:3)
(cid:3) ⊆ S × U
(cid:3)
that (s, u) ∈ A;
= (S, U
• U
• A
if there exists u ∈ Vi such
• each constraint of the form (∼, S1, S2) inC is replaced
• each constraint of the form ((cid:2)∼, S1, S2) inC is replaced
), where
, C
and (s, Vi) ∈ A
; and
(cid:3)
by (=, S1, S2) in C
by ((cid:2)=, S1, S2) in C
is, and
It is easy to see that W is satisﬁable if and only if W(cid:3)
deciding the satisﬁability of W(cid:3)
is FPT by Theorem 2.
4.4 Organizational Hierarchy Constraints
We have seen that if we are given a single equivalence
relation and only use the binary relations ∼ and (cid:2)∼ then
WSP(∼,(cid:2)∼) is equivalent to WSP(=,(cid:2)=), which is known to
be FPT. Moreover, we prove in Theorem 4 that the problem
remains in FPT for such hierarchies. In fact, the results in
Theorem 2 and Proposition 2 correspond to special cases of
863Theorem 4, in which the hierarchy has two levels. Figure 5
illustrates these hierarchies, where each user is represented
by an unﬁlled circle and blocks of users are enclosed by a
rectangle. Conversely, it is these special cases that provide
the foundation for the bottom-up iterative method that we
use in the proof of Theorem 4 to solve WSP for more com-
plex hierarchical structures.
(a) Single users
(b) Non-trivial equivalence relation
Figure 5: Two-level hierarchies
Theorem 4. Given a workﬂow (S, U, (cid:2), A, C) and a
canonical hierarchy with (cid:4) levels, WSP(∼1,(cid:2)∼1, . . . ,∼ (cid:2),(cid:2)∼(cid:2))
can be solved in time (cid:2)O(cn2k + n23k), where n, k and c are
the numbers of users, steps and constraints, respectively.
To prove the above result, we iteratively identify ineligible
sets, from the bottom of the hierarchy up, for particular
types of blocks in the hierarchy (those shaded in Figure 6)
and solve multiple instances of WSP for each of those blocks.
Theorem 2 is, essentially, a special case of the above result,
in which the canonical hierarchy contains two levels, where
U (1) = ({u1} , . . . ,{ un}) and U (2) = (U ).
a
a
a
a
a
a
a
b
b
b
b
b
b
b
c
c
c
c
c
c
c
d
d
d
d
d
d
d
e
e
e
e
e
e
e
f
f
f
f
f
f
f
g
g
g
g
g
g
g
h
h
h
h
h
h
h
i
i
i
i
i
i
i
j
j
j
j
j
j
j
Figure 6: The canonical hierarchy of Figure 3 with
its signiﬁcant blocks shaded
Proof of Theorem 4. Each level in a canonical hierar-
chy is a reﬁnement of the one below it and no two levels are
equal, so we have n = |U (1)| > ··· > |U ((cid:2))| = 1, and we may
conclude that (cid:4) (cid:2) n.
We say V ∈ U (i) is signiﬁcant if V (cid:2)∈ U (i+1). The sig-
niﬁcant blocks are shaded in the hierarchy shown in Fig-
ure 6. We deﬁne the level range of V to be an interval [a, b],
where a is the least value i such that V ∈ U (i) and b is the
largest value i such that V ∈ U (i). The level range of block
{a, b, c, d} in Figure 6 is [3, 5], for example.
Each signiﬁcant block V with level range [a, b], a > 1, can
be partitioned into blocks in level (a − 1). (Block {a, b, c, d}
is partitioned into {{a, b, c} ,{d}} in level 2, for example.)
We denote this set of blocks by Δ(V ). It is easy to see that
the graph G = (V, E), where V is the set of signiﬁcant blocks
and (V1, V2) ∈ E if V1 ∈ Δ(V2), is a tree.
For each signiﬁcant block V in the hierarchy with level
range [a, b], working from the bottom level to the top level
of the hierarchy, we compute a function φV : 2S → {0, 1},
where φV (F ) = 1 if and only if there exists an assignment
of authorized users from V to steps in F that satisﬁes all
the constraints at level b and below. Informally, we will be
solving multiple instances of WSP for the sub-tree rooted
at V in order to compute φV .
Each signiﬁcant block V with level range [1, b] comprises
a single user (see Figure 6). For F ⊆ S we set φV (F ) = 0 if
one of the following conditions hold:
• there exists a constraint of the form ((cid:2)∼t, S1, S2), t ∈
[1, b], such that S1 ∪ S2 ⊆ F ;
• there exists a constraint of the form (∼t, S1, S2), t ∈
[1, b], such that F ∩ (S1 ∪ S2) = Si for i ∈ {1, 2};
• there exists s ∈ F such that (s, u) (cid:2)∈ A.
For each signiﬁcant block V , we now compute a binary
matrix with rows indexed by members of Δ(V ) and columns
indexed by subsets of S. The entry indexed by W ∈ Δ(V )
and F ⊆ S is deﬁned to be 0 if and only if one of the following
conditions holds:
• there exists a constraint of the form ((cid:2)∼t, S1, S2), t ∈
• there exists a constraint of the form (∼t, S1, S2), t ∈
• φW (F ) = 0.
[a, b], such that S1 ∪ S2 ⊆ F ;
[a, b], such that F ∩ (S1 ∪ S2) =S i for i ∈ {1, 2};
A non-zero matrix entry indicates that the steps in F could
be assigned to the block W (which implies that no con-
straints in levels 1, . . . , a − 1 would be violated) and that
no constraints would be violated in levels a, . . . , b by allo-
cating a single block to F . The matrix encodes a family of
functions {φW}W∈Δ(V ), φW : 2S → {0, 1}. We then solve
Max Weighted Partition with inputs F ⊆ S, and {φW}
and set φV (F ) = 1 if Max Weighted Partition returns
W φW (F ) =|Δ(V )|. Note that U
a partition such that
is a signiﬁcant block (being the single block in the top level
of the hierarchy). Note also that WSP is satisﬁable if and
only if φU (S) = 1.
(cid:3)
This completes the description of the algorithm. We now
consider its complexity. Consider the signiﬁcant block V
with level range [a, b], a >1, and m children. (It takes time
O((cid:4)) = O(n) to compute the level range of V .) Note that we
can initialize the matrix using the functions {φW} that were
computed for the (a − 1)th level. We then change the non-
zero entries for those F ⊆ S that are ineligible. As in the
takes time O(2kck) = (cid:2)O(2kc), so the time taken to update
proof of Theorem 2, the identiﬁcation of the ineligible sets
the matrix is (cid:2)O(2kcm).
The time taken to compute φV for V with level range [1, b]
sets, which takes (cid:2)O(2kc). For V with level range [a, b], a > 1,
is dominated by the time taken to compute the ineligible
we solve Max Weighted Partition for all F ⊆ S. The
Partition is (cid:2)O(2
time taken to solve a single instance of Max Weighted
instances of WSP (for V ) is (cid:2)O(3km2).6 Finally, the total
m2). Hence, the time taken to solve all
time taken to compute φV is (cid:2)O(n + cm2k + m23k).
|F|
We next count the number of signiﬁcant blocks. As we ob-
served earlier, the set of signiﬁcant blocks ordered by subset
inclusion forms a tree. Moreover, every non-leaf node in G
has at least two children, which implies that G has no more
than 2n − 1 nodes (so |V| (cid:2) 2n − 1).
Finally, let mV denote the number of children of a signif-
(cid:3)
S(cid:2)⊆S 2
|S(cid:2)|