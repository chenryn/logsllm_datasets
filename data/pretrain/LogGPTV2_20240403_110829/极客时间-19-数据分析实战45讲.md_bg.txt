# 使用 Spring Layout 布局，类似中心放射状    if layout == 'circular_layout':        positions=nx.circular_layout(graph)    else:        positions=nx.spring_layout(graph)    
# 设置网络图中的节点大小，大小与 pagerank 值相关，因为 pagerank 值很小所以需要 *20000    nodesize = [x['pagerank']*20000 for v,x in graph.nodes(data=True)]    
# 设置网络图中的边长度    edgesize = [np.sqrt(e[2]['weight']) for e in graph.edges(data=True)]    
# 绘制节点    nx.draw_networkx_nodes(graph, positions, node_size=nodesize, alpha=0.4)    
# 绘制边    nx.draw_networkx_edges(graph, positions, edge_size=edgesize, alpha=0.2)    
# 绘制节点的 label    nx.draw_networkx_labels(graph, positions, font_size=10)    
# 输出希拉里邮件中的所有人物关系图    plt.show()
# 将寄件人和收件人的姓名进行规范化emails.MetadataFrom = emails.MetadataFrom.apply(unify_name)emails.MetadataTo = emails.MetadataTo.apply(unify_name)
# 设置遍的权重等于发邮件的次数edges_weights_temp = defaultdict(list)for row in zip(emails.MetadataFrom, emails.MetadataTo, emails.RawText):    temp = (row[0], row[1])    if temp not in edges_weights_temp:        edges_weights_temp[temp] = 1    else:        edges_weights_temp[temp] = edges_weights_temp[temp] + 1
# 转化格式 (from, to), weight => from, to, weightedges_weights = [(key[0], key[1], val) for key, val in edges_weights_temp.items()]
# 创建一个有向图graph = nx.DiGraph()
# 设置有向图中的路径及权重 (from, to, weight)graph.add_weighted_edges_from(edges_weights)