[2]
[3]
[4] K. M. Alonso and KOE, “Zero to monero: Multisig chapter,”
https://github.com/UkoeHB/Monero-RCT-report/blob/master/multisig_
chapter-1-0.pdf, 2018.
[5] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis,
A. De Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich et al.,
“Hyperledger fabric: a distributed operating system for permissioned
blockchains,” in EuroSys Conference, 2018.
16
Bitcontracts(BTC) Tx CostBitcontracts(LTC) Tx CostBitcontracts(BCH) Tx CostETHTx Cost102101100cost [USD][29] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado,
“Inferring ﬁne-grained control ﬂow inside {SGX} enclaves with branch
shadowing,” in USENIX Security Symposium, 2017.
[30] S. D. Lerner, “Rsk white paper overview,” 2015, https://docs.rsk.co/
RSK_White_Paper-Overview.pdf.
J. Lyles, “A monero multisig user’s guide,” https://blog.keys.casa/a-
monero-multisig-users-guide/, 2019.
[31]
[32] P. McCorry, C. Buckland, S. Bakshi, K. Wüst, and A. Miller, “You
sank my battleship! a case study to evaluate state channels as a scaling
solution for cryptocurrencies,” in Workshop on Trusted Smart Contracts,
2019.
[33] A. Miller, I. Bentov, R. Kumaresan, C. Cordi, and P. McCorry, “Sprites
and state channels: Payment networks that go faster than lightning,” in
Financial Cryptography and Data Security (FC), 2019.
[34] A. Moghimi, G. Irazoqui, and T. Eisenbarth, “Cachezoom: How sgx
ampliﬁes the power of cache attacks,” in International Conference on
Cryptographic Hardware and Embedded Systems (CHES), 2017.
[35] P. Moreno-Sanchez, T. Rufﬁng, and A. Kate, “Pathshufﬂe: Credit
mixing and anonymous payments for ripple,” Privacy Enhancing Tech-
nologies (PETS), no. 3, 2017.
[36] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008,
[37]
[38]
https://bitcoin.org/bitcoin.pdf.
J. Poon and T. Dryja, “The bitcoin lightning network: Scalable off-chain
instant payments,” 2016, https://lightning.network/lightning-network-
paper.pdf.
I. Ray and I. Ray, “Fair exchange in e-commerce,” ACM SIGecom
Exchanges, vol. 3, no. 2, 2002.
[39] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard,
“Malware guard extension: Using sgx to conceal cache attacks,” in
International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment (DIMVA), 2017.
[40] SerHack, “Mastering monero,” 2018, https://masteringmonero.com/
book/Mastering%20Monero%20First%20Edition%20by%20SerHack%
20and%20Monero%20Community.pdf.
[41] A. Singh, K. Click, R. M. Parizi, Q. Zhang, A. Dehghantanha, and
K.-K. R. Choo, “Sidechain technologies in blockchain networks: An
examination and state-of-the-art review,” Journal of Network and Com-
puter Applications, vol. 149, p. 102471, 2020.
[42] A. Sward, I. Vecna, and F. Stonedahl, “Data insertion in bitcoin’s
blockchain,” Ledger, vol. 3, 2018.
[43] N. Szabo, “Formalizing and securing relationships on public networks,”
First Monday, vol. 2, no. 9, 1997.
J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx, “Foreshadow:
Extracting the keys to the intel SGX kingdom with transient out-of-
order execution,” in USENIX Security Symposium, 2018.
[44]
[45] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler,
H. Tang, and C. A. Gunter, “Leaky cauldron on the dark land: Under-
standing memory side-channel hazards in sgx,” in ACM Conference on
Computer and Communications Security (CCS), 2017.
[46] Y. Wang and Q. M. Malluhi, “The limit of blockchains: Infeasibility of
a smart obama-trump contract,” Commun. ACM, vol. 62, no. 5, 2019.
[47] B. Wiki, “Zero Knowledge Contingent Payment,” https://en.bitcoin.it/
wiki/Zero_Knowledge_Contingent_Payment.
[48] G. Wood, “Ethereum: A secure decentralised generalised transaction
ledger,” Ethereum project yellow paper, 2014.
[49] K. Wüst and A. Gervais, “Do you need a blockchain?” in 2018 Crypto
Valley Conference on Blockchain Technology (CVCBT), 2018.
[50] K. Wüst, S. Matetic, S. Egli, K. Kostiainen, and S. Capkun, “ACE:
Asynchronous and Concurrent Execution of Complex Smart Contracts,”
in ACM Conference on Computer and Communications Security (CCS),
2020.
APPENDIX A
BACKGROUND ON SMART CONTRACTS
Smart contracts [43] are decentralized and self-enforcing
digital contracts. A typical smart contract enables contract
17
participants to load money or other assets to an account that
is controlled by the contract. The contract’s code deﬁnes the
logic and the conditions based on which the contract may then
transfer the loaded money or other assets to different parties,
such as the contract’s participants.
Most blockchains,
like Bitcoin, support simple scripts
that are primarily used to authorize payments. In this paper,
we do not consider such scripts expressive smart contracts.
Few blockchains, like Ethereum, provide built-in support for
Turing-complete programming languages, and thus, in prin-
ciple, enable developers to write arbitrary contracts, but in
practice Ethereum contracts are constrained by gas limits,
which are needed to keep the consensus process efﬁcient.
Ethereum’s trust model allows users to choose which
particular contracts they decide to trust. If a user participates
in a smart contract (e.g., by loading funds to it), he implicitly
trusts and agrees with the speciﬁcation of that contract, which
is deﬁned by the contract’s code. Such trust decisions are
contract-speciﬁc, as the same user does not need trust other
contracts in the same system and is not affected by their
execution results.
Ethereum-style smart contracts cannot implement all pos-
sible contracts, as is discussed in more detail in [46]. One
example is contracts that require fairness for revealing input
values (e.g., Alice learns Bob’s secret if and only if Bob
learns Alice’ secret). Another limitation of purely digital
smart contracts (even with secret computation) is that they
cannot enforce control over physical items [49]. Despite such
limitations, Ethereum-style smart contracts are widely seen as
very useful enablers for various business applications. Thus,
the focus of this paper is on enabling Ethereum-style contracts
on legacy blockchains.
If contracts with private computation are needed, one
option is to complement Bitcontracts with secure multiparty
computation (MPC) techniques. While classical MPC sys-
tem cannot guarantee fairness without honest majority [15],
blockchain-based solutions that leverage deposits and penalties
can alleviate fairness concerns [6], [9], [28], [26]. Such privacy
protections can be implemented by the contract developer
manually or one can use automated contract compilers like
HAWK [27].
The second option is to leverage TEEs, similar to Eki-
den [14] and FastKitten [16]. The main beneﬁt of this approach
is its ease of implementation and its efﬁciency, in contrast to
cryptographic primitives used in MPC protocols and systems
like HAWK. The drawback is that information leakage even
from a single TEE violates privacy.
APPENDIX B
EXAMPLE CONTRACT
An example for a simple faucet smart contract is shown
in Figure 6. The contract allows anyone to top up the faucet
with some funds or withdraw money, if funds are sufﬁcient.
For each withdrawal, it also increments a counter that is stored
in persistent storage. The code shows how API functions for
retrieving the contract balance (Line 19) and for sending funds
(Lines 21-25) can be used.
TxA: Contract Creation
TxB: Withdrawal Transaction
TxD: Top-up transaction
Contract
Output
$65
State Output
withdrawals=0
topups=0
Bob
Input
$90
Contract
Input
$65
Bob
Change
$25
Contract
Output
$60
State Output
withdrawals=1
Charlie
Output
$5
Contract
Input
$60
Bob
Input
$5
Contract
Output
$62
State
Output
topups=1
Bob
Change
$3
TxC: Conﬂicting Transaction
Contract
Input
$65
Contract
Output
$60
State Output
withdrawals=1
Dave
Output
$5
Fig. 7. Example Contract Execution. Bob ﬁrst creates the smart contract,
followed by Charlie performing a withdrawal. At the same time, Dave also
tries to perform a withdrawal, but due to the state dependency check (linking to
the previous transaction output in this case), the transaction cannot be included
in the chain. Finally, Bob tops up the faucet with additional funds.
the transaction. The code contains an API call that transfers
money, which will cause the library to create a transaction
output for the speciﬁed address with the speciﬁed amount ($5
in this example). The function called by Charlie also updates
the withdrawals state variable. After the execution of the
code is ﬁnished, the library compares the new state to the
previous state and then creates a state output (or multiple, if
necessary) containing only the values that have changed. In
this case, withdrawals = 1. Each of the service providers
create a transaction TxB with the mentioned outputs, as well
as an updated contract output containing the current balance,
contract hash and the new state hash. The previous contract
output is used as input of this transaction. They also create a
signature on this transaction and send both to Charlie. Charlie
then ﬁnalizes the transaction by attaching the signatures from
two of the service providers to it and broadcasts it to the
network.
Assume now that Dave also wants to use this faucet at
almost the same time. He performs exactly the same steps as
Charlie and will receive a similar transaction TxC as result.
However, since TxB and TxC use the same contract output
as transaction input, they are conﬂicting and miners will only
accept one of them. In Figure 7, we assume that TxB will
be included in the chain. If another party now wants to use
the faucet, e.g. Bob wants to top up the funds of the faucet,
they can do so based on the state given by TxB (even before
TxB is included in a block). In the example, Bob performs
such a top-up, which results in a change in the topups state
variable and thus only this changed variable is stored in the
state output.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
from btcsc.scexecution.base.CSmartContractBase import (
CSmartContractBase, public, private)
from ISmartContractUtility import ISmartContractUtility as
util
class Faucet(CSmartContractBase):
def __init__(self):
super(Faucet, self).__init__()
self.withdrawals = 0
self.topups = 0
@public
def fill(self, amount):
util.IncreaseBalance(self.current_contract, amount)
self.topups += 1
@public
def drain(self, amount, address):
balance = util.GetBalance(self.current_contract)
assert(balance >= amount)
util.TransferFromBalance(
self.current_contract,
amount,
address
)
self.withdrawals += 1
Fig. 6. A simple faucet smart contract implemented in Python. The
contract allows anyone to top up the faucet with some funds or withdraw
money.
Figure 7 shows example transactions in which this contract
is deployed and executed in a UTXO-based system. Bob is
the contract creator and as such creates the contract creation
transaction. First, he chooses a set of service providers and
we assume that he chooses E = {P1, P2, P3} with a quorum
threshold of t = 2. He then creates a 2-out-of-3 multisignature
output for the public keys of these three service providers
that contains initial contract funds. This output is the contract
output and it also needs to contain the hash of the contract
code as well as the hash of the current state (i.e. the state after
running the constructor of the contract class)5. The state in
this case contains the two state variables withdrawals and
topups, which store the number of withdrawals and top-ups
of the faucet, respectively and which both have a value of zero.
The actual values of the state variables are stored in separate
outputs (in this case one output sufﬁces), using the method
described in Section VIII-B. Finally, he creates an output that
refunds his change. He then creates and signs a transaction that
uses one of his UTXO as input and broadcasts this transaction.
At this point, the contract has been created. Now, potential
participants need to be informed about
the contract code
and its contract output. This can happen privately, through a
public website, or the code could be stored in the deployment
transaction as well. Charlie now wants to use this faucet
contract to receive some money from it. He uses the contract
output to assemble the current state and sends it, together with
the contract code, the previous transaction TxA (in this case the
contract creation transaction) as well as the function he wants
to execute and it’s arguments (i.e. “Faucet.drain(5,
address_charlie)”) to P1, P2, and P3.
The service providers now hash the received contract code
and state and compare the values to the hashes referenced
6. If the values match, each service provider executes
in TxA
5In Bitcoin script, this can be done by using a pay-to-script-hash (P2SH)
output,
in which the script drops the two hashes before evaluating the
multisignatures. The output stores the hash of this script, which ensures that
neither the public keys for the multisignature nor the two hashes can be
changed.
6In Bitcoin script, this is done by recreating the script from the P2SH output
and checking if the hash of this script corresponds to the script hash in the
output.
18