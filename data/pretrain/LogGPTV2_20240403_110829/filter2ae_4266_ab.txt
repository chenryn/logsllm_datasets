        "_mbscpy", 
        "StrCpy", 
        "StrCpyA",
            "lstrcpyA",
            "lstrcpy", 
            #...
        ]
    duplicate = []
    func = getFirstFunction()
    while func is not None:
        func_name = func.getName()
        #check if function name is in sinks list
        if func_name in sinks and func_name not in duplicate:
            duplicate.append(func_name)
            entry_point = func.getEntryPoint()
            references = getReferencesTo(entry_point)
        #print cross-references    
            print(references)
        #set the function to the next function
        func = getFunctionAfter(func)
现在，我们已经找到了交叉引用，我们可以获得每个引用的指令并为调用指令添加一个过滤器。相应的代码如下所示：
    sinks = [                   
        "strcpy",
        "memcpy",
        "gets",
        "memmove",
        "scanf",
        "strcpyA", 
        "strcpyW", 
        "wcscpy", 
        "_tcscpy", 
        "_mbscpy", 
        "StrCpy", 
        "StrCpyA",
            "lstrcpyA",
            "lstrcpy", 
            #...
        ]
    duplicate = []
    fm = currentProgram.getFunctionManager()
    ext_fm = fm.getExternalFunctions()
    #iterate through each external function
    while ext_fm.hasNext():
        ext_func = ext_fm.next()
        target_func = ext_func.getName()
        #check if the function is in our sinks list 
        if target_func in sinks and target_func not in duplicate:
            duplicate.append(target_func)
            loc = ext_func.getExternalLocation()
            sink_func_addr = loc.getAddress()    
            if sink_func_addr is None:
                sink_func_addr = ext_func.getEntryPoint()
            if sink_func_addr is not None:
                references = getReferencesTo(sink_func_addr)
                #iterate through all cross references to potential sink
                for ref in references:
                    call_addr = ref.getFromAddress()
                    ins = listing.getInstructionAt(call_addr)
                    mnemonic = ins.getMnemonicString()
                    #print the sink and address of the sink if 
                    #the instruction is a call instruction
                    if mnemonic == “CALL”:
                        print (target_func,sink_func_addr,call_addr)
针对CoreFTPServer运行修改后的脚本，就会得到可能导致缓冲区溢出的sink点列表：
## 将调用函数映射到sink点
到目前为止，我们的Ghidra插件已经可以识别sink点。借助于这些信息，我们可以通过将调用函数映射到sink点来进行更深入的分析，以实现sink点与其输入数据之间的关系的可视化。在这里，我们将使用graphviz模块绘制图形。
把它们组合在一起，我们就可以得到以下代码：
    from ghidra.program.model.address import Address
    from ghidra.program.model.listing.CodeUnit import *
    from ghidra.program.model.listing.Listing import *
    import sys
    import os
    #get ghidra root directory
    ghidra_default_dir = os.getcwd()
    #get ghidra jython directory
    jython_dir = os.path.join(ghidra_default_dir, "Ghidra", "Features", "Python", "lib", "Lib", "site-packages")
    #insert jython directory into system path 
    sys.path.insert(0,jython_dir)
    from beautifultable import BeautifulTable
    from graphviz import Digraph
    sinks = [
        "strcpy",
        "memcpy",
        "gets",
        "memmove",
        "scanf",
        "strcpyA", 
        "strcpyW", 
        "wcscpy", 
        "_tcscpy", 
        "_mbscpy", 
        "StrCpy", 
        "StrCpyA", 
        "StrCpyW", 
        "lstrcpy", 
        "lstrcpyA", 
        "lstrcpyW", 
        #...
    ]
    sink_dic = {}
    duplicate = []
    listing = currentProgram.getListing()
    ins_list = listing.getInstructions(1)
    #iterate over each instruction
    while ins_list.hasNext():
        ins = ins_list.next()
        mnemonic = ins.getMnemonicString()
        ops = ins.getOpObjects(0)
        if mnemonic == "CALL":  
            try:
                target_addr = ops[0]
                func_name = None 
                if isinstance(target_addr,Address):
                    code_unit = listing.getCodeUnitAt(target_addr)
                    if code_unit is not None:
                        ref = code_unit.getExternalReference(0) 
                        if ref is not None:
                            func_name = ref.getLabel()
                        else:
                            func = listing.getFunctionAt(target_addr)
                            func_name = func.getName()
                #check if function name is in our sinks list
                if func_name in sinks and func_name not in duplicate:
                    duplicate.append(func_name)
                    references = getReferencesTo(target_addr)
                    for ref in references:
                        call_addr = ref.getFromAddress()
                        sink_addr = ops[0]
                        parent_func_name = getFunctionBefore(call_addr).getName()
                        #check sink dictionary for parent function name
                        if sink_dic.get(parent_func_name):
                            if sink_dic[parent_func_name].get(func_name):
                                if call_addr not in sink_dic[parent_func_name][func_name]['call_address']:
                                    sink_dic[parent_func_name][func_name]['call_address'].append(call_addr)
                                else:
                                    sink_dic[parent_func_name] = {func_name:{"address":sink_addr,"call_address":[call_addr]}}
                        else:   
                            sink_dic[parent_func_name] = {func_name:{"address":sink_addr,"call_address":[call_addr]}}               
            except:
                pass
    #instantiate graphiz
    graph = Digraph("ReferenceTree")
    graph.graph_attr['rankdir'] = 'LR'
    duplicate = 0
    #Add sinks and parent functions to a graph  
    for parent_func_name,sink_func_list in sink_dic.items():
        #parent functions will be blue
        graph.node(parent_func_name,parent_func_name, style="filled",color="blue",fontcolor="white")
        for sink_name,sink_list in sink_func_list.items():
            #sinks will be colored red
            graph.node(sink_name,sink_name,style="filled", color="red",fontcolor="white")
            for call_addr in sink_list['call_address']:
            if duplicate != call_addr:                  
                    graph.edge(parent_func_name,sink_name, label=call_addr.toString())
                    duplicate = call_addr   
    ghidra_default_path = os.getcwd()
    graph_output_file = os.path.join(ghidra_default_path, "sink_and_caller.gv")
    #create the graph and view it using graphiz
    graph.render(graph_output_file,view=True)
针对我们的程序运行该脚本，会得到以下图表：
我们可以看到调用函数以蓝色突出显示，而sink点以红色突出显示。调用函数的地址显示在指向sink点的代码行上。
在进行必要的手动分析后，我们发现，这个Ghidra插件识别出的几个sink点都产生了缓冲区溢出。WinDBG的以下屏幕截图表明，由于lstrcpyA函数调用，EIP被0x42424242覆盖了。
## 其他功能
虽然以图形方式显示结果有助于漏洞分析，但如果用户可以选择不同的输出格式，会更加方便。
Ghidra API提供了多种与用户交互的方法，以及多种输出数据的方法。我们可以利用Ghidra
API让用户选择输出格式（例如文本、JSON、图形）并以所选格式显示结果。下面的示例显示了具有三种不同显示格式的下拉菜单。此外，完整的脚本可以在我们的[github](https://github.com/Somerset-Recon/blog/tree/master/Eldrax "github")上找到：
## 局限性
Ghidra存在多个已知问题，例如，对于编写像我们这样的分析插件的一个最大问题是Ghidra API并不总能返回已识别标准函数的正确地址。
与IDA Pro不同，IDA
Pro具有来自多个库的函数签名（FLIRT签名）数据库，可用于检测标准函数调用。但是，Ghidra仅为DLL提供了一些导出文件（类似于签名文件）。有时，标准库检测无法正常进行。
通过比较IDA Pro和Ghidra针对CoreFTPServer的反汇编输出，我们可以看到，IDA
Pro的分析通过FLIRT签名成功地识别和映射了函数lstrcpyA，而Ghidra则显示了对函数lstrcpyA的内存地址的调用。
尽管Ghidra的公开版本存在某些局限性，但我们希望看到这些不足会得到改善，比如增强标准库分析功能，以进一步推动自动化漏洞研究。
## 小结
Ghidra是一个强大的逆向工程工具，可以用来识别潜在的漏洞。使用Ghidra的应用编程接口，我们能够开发插件来识别sink点及其父函数，并以各种形式显示结果。在我们的下一篇文章中，我们将使用Ghidra进行其他方面的自动化分析，并增强插件的漏洞检测能力。