### Frame Header Cache and Exploitation Techniques

#### Frame Header Cache
- **Cache Entries**: 8 entries for the frame header.
- **Replacement Algorithm**: Utilizes a Least Used Replacement Algorithm, implemented in `_Unwind_IteratePhdr_Callback()`.
- **List Structure**: The most recently used entry is at the head of the list.

#### Test Environment
- **Frame Header Cache Location**: In the test environment, the `frame_hdr_cache` is located at an offset of 0x6e0 bytes from the writable data segment of `libgcc`.
- **Array Size**: The array size is 48 bytes.
- **Executable Position**: The executable is the 3rd element in the array (the first two elements are `libgcc` and `libstdc++`).
- **Offset Calculation**: The offset for the writable data segment of `libgcc` can be calculated as follows: 
  - 0x6e0 + (48 * 2) = 0x740.
- **Target Entry**: The `p_eh_frame_hdr` entry to be overwritten is located at 24 bytes within this structure.

#### Example
- **Demo Program**: A demo program is released along with the paper/presentation to demonstrate the exploitation.
- **Test Characteristics**:
  - **Libgcc Loading Address**: 0x7ffff760e000
  - **Writable Data Segment Offset**: 0x220000 (from the library base address)
  - **Cache Elements Offset**: 0x6e0 (from the writable data segment)
  - **Structure Size**: 48 bytes
  - **Entries Before Ours**: 2 entries (determined using `readelf -d`)
  - **Overwrite Target**: 24 bytes inside the structure

#### Exploitation
- **Simplification**: To simplify the exploitation, it is beneficial to align the structures at known or controlled offsets.
  - `.eh_frame` aligned to start at 0x50 bytes from the start of `.eh_frame_hdr`.
  - `.gcc_except_table` aligned to start at 0x200 bytes from the start of `.eh_frame`.

#### Memory Leak
- **EBP Value**: To obtain the value of EBP, a memory leak is used. This can be achieved in different ways, such as overwriting parameters to print-like functions or using a format string vulnerability.
- **EBP Calculation**:
  - Use `%llx` (format string) to read 4 bytes of space in the buffer and advance the stack pointer by 8 bytes.
  - Example code:
    ```python
    instr = r"%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%x%x"
    proc.sendline(instr)
    proc.expect("unknown command: [0-9a-f]* ([0-9a-f]*).*")
    ebp_previous = int(proc.match.group(1), 16)
    info("\nfound ebp_previous = 0x%x" % ebp_previous)
    ```

#### Heuristics
- **Frame Size Calculation**: Knowing the size of the previous frame (disassembled), calculate the EBP of the current frame:
  - `ebp = ebp_previous - PREV_FRAME_SIZE`
- **Libgcc Base Calculation**:
  - `libgcc_reveal_location = ebp - LIBGCC_REVEAL_EBP_OFFSET`
  - The value that reveals the `.text` location of `libgcc` is at 0xffffc798, which is 0x679 above ESP and 0x750 above EBP.
  - `libgcc_base = (libgcc_revealed & 0xFFFFF000) - LIBGCC_REVEAL_ADJUST`
- **Data Segment Offset**:
  - The separation between the `.text` and `.data` segments in `libgcc` is 0x19000 (x86).
  - `libgcc_data_base = libgcc_base + LIBGCC_DATA_OFFSET`

#### Final Steps
- **Finding the Cache**:
  - `frame_hdr_cache = libgcc_data_base + CACHE_LIBGCC_OFFSET`
  - `p_eh_frame_hdr = frame_hdr_cache + CACHE_ENTRY_SIZE * PREVIOUS_CACHE_ENTRIES + OFFSET_IN_CACHE_ENTRY`

#### Demo Case
- **Execution Redirection**:
  - Function `doWork` starts at 0x0804936a.
  - `Throw` is at 0x08049634.
  - Distance: 0x2ca (call site 14 in `dict_mod.dws` for the demo).
  - Force execution of `I_am_never_called` at 0x08049842 (offset 0x4d8 from `doWork`).
- **DWARF Payload**:
  - Injected into the dictionary being read by the target program.
  - Overwrite the caching target address, and the desired catch block is executed.

#### Other Possibilities
- **Write N**: If you have a Write N, you can overwrite the `.eh_frame` entirely (if it is +W, which is not common in new systems).
- **Shellcode Overwrite**: You can overwrite the `.eh_frame` using a shellcode.
- **Staged Return-to-Lib**: Use a staged return-to-lib to remap the `.eh_frame` as +W and then overwrite it.

### Contact Information
- **James Oakley (Electron)**: Electron100 *noSPAM* gmail.com
- **Rodrigo Rubira Branco (@BSDaemon)**: rodrigo *noSPAM* kernelhacking.com
- **Sergey Bratus (Sbratus)**: Sergey *noSPAM* cs.dartmouth.edu

---

This revised version aims to provide a clear, coherent, and professional presentation of the information.