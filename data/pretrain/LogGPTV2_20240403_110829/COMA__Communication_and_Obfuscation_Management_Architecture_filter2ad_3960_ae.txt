5.2.1 COMA performance in LCC mode
In the LCC mode, the AEAD is used to synchronize the initial
seed of the PRNG, while the CSN is used for encrypting data.
The random (TRN) conﬁguration key for the CSN-RCSN is
generated by PRNG, which is updated after transferring every
U messages. In COMA, the PRNG has a limited buffer size,
and as soon as the buffer is ﬁlled with random data, the PRNG
stops producing additional bits. The consumption of TRNG
output is synchronized (every U messages) and the generation
of random inputs is limited to the size of buffer. Hence, the
PRNGs in the trusted and untrusted sides are always in sync.
The number of cycles it takes to initialize the LCC mode
includes the time to initialize the secret key engine (Cf ix), the
encryption and transfer and decryption of PRNG seed (CENC),
and the time for the PRNG to generate enough output from a
newly received TRN (CPRNG):
CLCC−init = Cf ix +CENC +CPRNG
(2)
Clock CyclesMessage Size (Byte)11.522.533.544.55Increasing Rate of LLC speed-up against DCC for Larger MessagesLCC (AES-GCM + AES-CTR )LCC (ACORN + Trivium)DCC (AES-GCM + AES-CTR)DCC (ACORN + Trivium)For message sizes larger than 128 B, ACORN+Trivium outperform AES-GCM+AES-CTRx 104163264128256512190          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationDepending on the AEAD used for transferring the original
seed, the Cf ix is obtained from Table 1. The seed size in
our implementation is 16 Bytes, hence the CENC is simply
Cbytes × 16, and the CPRNG is:
Bitsneeded
PRNGper f
3n× (log2n− 1)
CPRNG =
=
PRNGper f
(3)
Finally, after initialization, and by using a CSN of size n
when the bus width of COMA is BW , the number of cycles to
encrypt and transfer one byte of information is:
CLLC
byte =
8
n
× (
n
BW + 1)
(4)
byte for the COMA1 (CDCC
Using a 64-bit CSN and BW of 8 bits, the CLLC
byte = 9/8.
Compared to CDCC
byte =72), and for the
COMA2 (CDCC
byte =17), the LCC mode is at least an order of
magnitude faster. Fig. 7 compares the superior performance of
LCC mode compare with DCC mode in both COMA variants.
5.2.2 Frequency of TRN updates in LCC mode
The frequency of TRN update (U) for LCC is an important
design feature. A large U reduces energy as PRNG/TRNG is
kept idle for U − P cycles. P is the number of required cycles
to reﬁll the PRNG buffer after a TRN read. However, when the
TRN is ﬁxated for a long duration of time, the possibility of a
successful side-channel, algebraic, or SAT attack on the CSN
increases. The minimum number of messages required for an
algebraic attack (even if such attack is possible) is n, which is
the CSN input size. Our experiments show that a SAT attack
could recover the key with an even smaller number of inputs.
Knowing the number of encryptions/decryptions needed by
such attacks, we can set the U to a safe value smaller than the
number of required messages to make it resistant against these
attacks. So, the value of U should be between P ≤ U ≤ n.
The SAT attack against CSN is implemented similar to
[41]. In this attack the CSN gate-level netlist and an activated
chip is available to the attacker, while the attacker aims to
extract the CSN-RCSN conﬁguration signals. Table 5 captures
the results of the SAT attack against blocking and near non-
blocking CSNs. As illustrated, the time to break a near non-
blocking CSN is signiﬁcantly larger. In each iteration SAT
test one carefully selected input message. Hence, if the U is
kept smaller than the number of required SAT iterations, the
SAT attack could not be completed.
5.3 Energy saving in LCC mode
As illustrated in Fig. 8(a), in the LCC mode, the TRN is
updated every U cycles. U is determined based on the fastest
attack on CSN-RCSN pair, which is the SAT attack. After
each TRN update, the PRNG takes P cycles to reﬁll its buffer.
Note that P cycles required for PRNG could be stacked at the
beginning of U cycles, or distributed over U cycles depending
(a) While P  P. CSN/RCSN is kept idle after U cycles.
PH = PowerCSN/RCSN + PowerPRNG;
P1L = PowerCSN; P2L = powerPRNG;
Figure 8: The Power Consumption at LCC mode of operation.
on the size of PRNG buffer. As long as the TRN completely
changes every U cycle, the possibility of attack is eliminated.
Hence in each U cycles, for P cycles the PRNG/TRNG and
CSN are active, and for U − P cycles, the PRNG is clock
gated, and only CSN is active. In both cases, the AEAD is
active only for the initial exchange of PRNG seed, allowing
us to express the power consumption of the LCC mode as:
ELLC = CPRNG × PH +(cid:0)U(
(cid:1)× PL
n
BW + 1)−CPRNG
(5)
Obviously, the number of required cycles to reﬁll the PRNG
buffer after TRN read (P) affects energy consumption and
communication throughput. If P  U, as shown in Fig. 8(b), the communication
should be stopped for P−U cycles till the next TRN is ready
and to resist SAT or algebraic attacks.
The energy consumption of LCC mode for COMA archi-
tectures constructed using NIST-compliant and lightweight
solution when transmitting different size of messages is cap-
tured in Fig. 9. As illustrated, the LCC mode, for having to
synchronize the two sides using a TRNG seed, is burdened
with the initialization cost of AEAD. However, when the
CSN-RCSN and PRNG are setup, the energy consumed for
exchanging additional messages grow at a much lower rate
compare to DCC mode (which is dominated by AEAD and
PRNG power consumption as reported in table 3).
6 Comparing COMA with Prior Work
To the best of our knowledge, FORTIS [49] is the only com-
prehensive key-management scheme that was previously pro-
posed. Table 6 compares our proposed solution against FOR-
TIS. COMA addresses several shortcomings of the FORTIS:
1) In FORTIS, all chips use identical keys, hence there is
no mean of differentiating between chips. In COMA each
chip has a unique key generated by PUF. 2) In COMA, secret
PRNGCSNU Cycles (Update Frequency)PRNGperfn/BW + 1SAT SAT ResilientNext TRNReadySAT LeakyAlgebraicLeakyAlgebraicTimeAlgebraicLeakyPRNGCSNU CyclesPRNGperfn/BW + 1SAT SecureNext TRNReadySAT LeakyBits Needed = CSN Configuration SizeSecureAlgebraicAlgebraicAlgebraicBits Needed = CSN Configuration SizeCSN and PRNG are Powered-on.PRNG is clock-gated.CSN and PRNG are Powered-on.CSN is Power-gated.PHPOWERPHPHPHPHPHP1LP1LP1LP1LCPRNG  U(n/BW + 1)P CyclesU-P CyclesSAT ResilientP CyclesP-U CyclesP2LP2LP2LP2LP2LP2LP2LP2LPRNGCSNU Cycles (Update Frequency)PRNGperfn/BW + 1SAT SAT ResilientNext TRNReadySAT LeakyAlgebraicLeakyAlgebraicTimeAlgebraicLeakyPRNGCSNU CyclesPRNGperfn/BW + 1SAT SecureNext TRNReadySAT LeakyBits Needed = CSN Configuration SizeSecureAlgebraicAlgebraicAlgebraicBits Needed = CSN Configuration SizeCSN and PRNG are Powered-on.PRNG is clock-gated.CSN and PRNG are Powered-on.CSN is Power-gated.PHPOWERPHPHPHPHPHP1LP1LP1LP1LCPRNG  U(n/BW + 1)P CyclesU-P CyclesSAT ResilientP CyclesP-U CyclesP2LP2LP2LP2LP2LP2LP2LP2LUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 191Table 5: SAT Execution Time on OMEGA-based Blocking CSN and LOGn,log2(n)−2,1 as a Close to Non-blocking CSN .
CSN Size
128
256
512
32
64
16
4
8
Mode
blk
non-blk
blk
non-blk
blk
non-blk
blk
non-blk
blk
non-blk
blk
non-blk
blk
non-blk
SAT Iterations
SAT Exe. Time (s)
6
0.01
14
0.01
7
0.03
18
0.15
8
0.2
25
2.35
12
0.8
31
79.18
14
5.9
TO
TO
TO: Timeout = 2× 106 seconds; The SAT attack is carried on a Dell PowerEdge R620 equipped with Intel Xeon E5-2670 2.6 GHz and 64GB of RAM.
24
130.5
TO
TO
25
1136.2
TO
TO
blk
TO
TO
non-blk
TO
TO
Table 6: COMA vs. FORTIS.
Scheme
Key Management
Data Comm
Private Key
SC Protected
Session Key
Activation
Need to TPM RNG
FORTIS
COMA
Constant
PUF-based Unique
*
(cid:88)+
Embedded (known to the fab)
No private key at untrusted

(cid:88)
Vulnerable to Fault Attack
Secure
Once
per Demand
at Untrusted
at Trusted
PRNG
TRNG
*: Not Implemented, but Naturally available using OTP. Limited Performance Due to Lightweight RSA
+: Available in Two Variant: DCC (Fully Secure and Limited Performance) and LCC (Leaky yet Secure and High Performance).
Table 7: Area Overhead of COMA vs. FORTIS.
Design
Gate Count FORTIS/Design COMA1/Design COMA2/Design
b19
VGA_LCD
Leon3MP
SPARC
Virtex-7
40,789
43,346
253,050
836,865
2M
24.52%
23.07%
3.95%
1.19%
0.5%
62.1%
58.45%
10.01%
3.02%
1.26%
21.28%
20.02%
3.43%
1.03%
0.43%
In terms of area overhead, FORTIS [49] provides an es-
timate for the incurred overhead of their solution, which is
around 10K gates. As shown in Table 3, the numbers of cells
for implementing the NIST-compliant (COMA1) implemen-
tation is 25.4K gates, while the lightweigh solution (COMA2)
is implemented using 8.7K gates. Table 7 compares the area
overhead of FORTIS against COMA1 and COMA2, when
these architectures are deployed to protect a few mid- and
large-size benchmarks. Using COMA2, which improves the
overhead by 14% compared to FORTIS, requires between
0.43% and 21.3% of circuit area in selected benchmarks.
Acknowledgement
This research is funded by the Defense Advanced Research
Projects Agency (DARPA #FA8650-18-1-7819) of the USA,
and partly by Silicon Research Co. (SRC TaskID 2772.001)
and National Science Foundation (NSF Award# 1718434).
7 Conclusion
In this paper we presented COMA, an architecture for
obfuscation-key management and metered activation of an
obfuscated IC that is manufactured in an untrusted foundry,
while securing its communication. The proposed solution re-
moves the need to store the key in the untrusted chip, makes
the obfuscation unlock-key a moving target, allows unique
identiﬁcation of the protected IC, and secures the communi-
cation to/from the protected chip using two hybrid crypto-