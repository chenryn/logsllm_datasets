T-SGX, the instruction pointer value at which enclave execution
will resume is on the springboard. Thus,
if the attacker
wants enclave execution to proceed, he will have to map the
springboard in the page tables before resuming the enclave
(ERESUME). The instruction at which enclave execution resumes
will be on the springboard, and its execution will establish a
new TLB entry for the springboard, which sets the attack back
to the beginning.
In summary, while the attacker can interrupt enclave execu-
tion asynchronously, he cannot use the page-fault channel to
obtain deterministic notification of accesses to the springboard.
VIII. EVALUATION
We evaluate T-SGX by answering the following questions.
• How general is the T-SGX approach? Can this ap-
proach be applied to a wide range of legacy real world
applications without manual effort?
• What are the performance characteristics of T-SGX-
• What is the performance impact of running multiple
instances of T-SGX-based applications simultaneously?
based programs?
Experimental setup. The experiments were conducted on a
generic PC with a Supermicro X11SSQ motherboard, an Intel
Core i7-6700K 4 GHz (Skylake) CPU, and 64 GB of RAM.
The machine ran Windows 10 Pro. We disabled hyperthreading
because avoiding cache-timing attacks in the public cloud is
recommended.
Target applications. We evaluate T-SGX by using the pro-
grams in the nbench benchmark suite and the three applications
that were used by Xu et al. [65] to demonstrate the controlled-
channel attack. Table I describes each program in detail,
including source code size, description, and binary code size
before and after applying T-SGX. The applications are fairly
diverse, including cryptography, text processing, and image
compression. While the nbench applications are generally small,
the other three applications are one to two orders of magnitude
larger, with FreeType exceeding 100,000 lines of code.
A. Application Binaries
This section shows various properties of T-SGX binaries.
The main effort in obtaining these binaries lies in porting the
applications into the SGX environment. Once we had working
SGX applications, no further manual effort was required to
apply the T-SGX protections.
After manually adapting the source code of each application
to run on SGX (resolving header and linker dependencies),
we compiled the code with Clang-Cl, a cl.exe-compatible
driver mode program for Clang (based on LLVM version 3.7.1).
We linked the resulting object files into executables with the
Microsoft linker (link.exe) version 14.00.23506.0.
We built three versions of each application. (a) The baseline
version runs in an SGX enclave without any protection. (b) The
TSX-basic version is secured with TSX on SGX, yet without
any optimization. (c) The T-SGX version is secured with
TSX and optimized as described in §V-D. These optimization
techniques improve performance without affecting security.
1) Execution Block Counts and Code Size: We first mea-
sure basic statistics of each application, in particular, static
information such as the number of execution blocks and the
impact on code size. Table I shows the results. The reported
code sizes are the sizes (in bytes) of the code (.text) segments
of all object files associated with the application. In the case of
nbench where several applications share the same source file
(and the same object file), we built per-application versions of
nbench by commenting out all source code that did not belong
in the application.
The code size increase (excluding the springboard page)
from baseline to T-SGX varies between 15% and 32%. These
overheads will likely result in somewhat increased pressure
on the L1 instruction cache. However, there will be no effect
on the application’s data accesses. Thus, the increase in the
overall memory requirements will be significantly lower than
30%, depending on the application and its inputs.
The table also reports the number of execution blocks in
T-SGX. Dividing the size increase by the number of execution
blocks reveals an average size increase of 9 to 17 bytes per
execution block. This is roughly the space needed to store the
two additional instructions that jump to the springboard and
the occasional instructions to save and restore rax (§VI).
2) Distribution of Execution Block Sizes: The next measure-
ment studies the size of execution blocks. Figure 10 displays the
distribution of the number of instructions per execution block
for T-SGX and TSX-basic across the 10 nbench applications.
We observe that the optimizations of §V-D have noticeably
shifted the distribution for T-SGX toward larger blocks. The
small blocks (containing at most 10 instructions) are mostly the
result of (a) non-mergeable cases, such as a block immediately
before or after a loop, (b) nested loops, and (c) calls to functions
that may not satisfy the cache constraint.
We manually inspected two large outlier blocks (up to 120
instructions). Both correspond to functions that were merged
into a single execution block by our optimizations.
10
Application
LoC
Description
#exec.
blocks
Code segment size
Baseline
T-SGX Memory Overhead
Avrage increase
bytes per block
numeric sort
string sort
bitfield
fp emulation
fourier
assignment
idea
huffman
neural net
lu decomposition
AVERAGE
211
521
225
1,396
235
490
353
448
746
441
Numeric heap sort
String heap sort
Bit operations
Floating-point emulation
Signal processing
Assignment algorithm
Crypto
Compression
Back-propagation network simulation
Linear equations solving algorithm
23
46
24
80
20
92
36
44
82
62
1,014 B
2,745 B
1,182 B
5,636 B
1,163 B
3,605 B
3,101 B
2,960 B
4,183 B
3,307 B
1,276 B
3,358 B
1,472 B
6,467 B
1,386 B
4,758 B
3,553 B
3,648 B
4,941 B
4,136 B
libjpeg (9a)
Hunspell (1.5.0)
FreeType (2.5.3)
34,763
24,794
135,528
JPEG library
Spell checking library
Font rendering library
4,557
8,641
12,060
272,881 B
356,298 B
615,862 B
350,274 B
471,617 B
796,105 B
25.8%
22.3%
24.5%
14.7%
19.2%
32.0%
14.6%
19.2%
18.1%
25.1%
22.0%
28.4%
35.0%
29.3%
11.4 B
13.3 B
12.1 B
10.4 B
11.2 B
12.5 B
12.6 B
15.6 B
9.2 B
13.4 B
17.0 B
13.3 B
14.9 B
AVERAGE
28.6%
TABLE I: Benchmark programs (top) and applications (bottom) used to evaluate T-SGX.
s
k
c
o
l
B
n
o
i
t
u
c
e
x
E
l
l
a
g
n
o
m
a
e
g
a
t
n
e
c
r
e
P
100
80
60
40
20
0
TSX-basic
T-SGX
numeric sort
string sort
bitfield
fp emulation
fourier
assignment
idea
huffman
neural net
lu decomposition
CON
TX
20 times/s 0 times/s
481 times/s
5.3 times/s 0 times/s
317.3 times/s
2.3 times/s 0 times/s
532 times/s
8.5 times/s 0 times/s
314 times/s
221.5 times/s
1.5 times/s 0 times/s
572.5 times/s 13.5 times/s 0 times/s
9.5 times/s 0 times/s
707 times/s
530.7 times/s
8 times/s 0 times/s
485.5 times/s 35.2 times/s 0 times/s
480 times/s 27.3 times/s 0 times/s
CAP Abort Rate
0.0020%
0.0020%
0.0120%
0.0006%
0.0006%
0.0020%
0.0160%
0.0013%
0.0015%
0.0016%
0
-
9
1
9
2
9
3
9
4
9
5
9
6
9
7
9
8
9
9
9
1
0
2
0
3
0
4
0
5
0
6
0
7
0
8
0
9
0
-
-
-
-
-
-
-
-
-
1
0
0
1
1
0
-
-
1
0
9
1
1
9
Instructions per Execution Block
Fig. 10: Distribution of execution block sizes: The optimizations
increase the size of a typical execution block.
B. Run-time Performance
This section demonstrates the run-time performance of
T-SGX. Unless stated otherwise, measurement values are
averaged over five runs of nbench and the real applications.
For the nbench suite, we ran each program for five second
and measured the number of iterations per second. For jpeglib,
we measured how long it takes to decompress a 1220×813
(203,446 bytes) compressed jpeg image. The size of the decoded
image is 8,926,740 bytes. The measurement includes the image
decompression time but not general startup and initialization.
For Hunspell, we picked the book Around the World Eighty
Days as the input. The number of words extracted from the book
is 63,704. We performed a spell check (using Hunspell::spell)
on these words with the "en_US" dictionary as a single call
into the enclave and measured the total time spent. We used the
same input for FreeType. The number of characters in the book
is 375,338. We measured the time required for a single enclave
call that renders all these characters (using FT_Load_Char).
1) Run-time Overhead: Table II displays the run-time of the
baseline, TSX-basic, and T-SGX versions of the applications
and the associated overheads. We took the numbers for the
nbench applications directly from the nbench outputs.