t, i.e., the interception hijack fails.
In the malicious scenario, the hijacker h has counter-
measure against LOCK. The path from s to t will be the
path from s to h (the AS of h will not show up) with a
few random AS hops appended after h. The generation
of these random AS hops is kind of tricky. If h gener-
ates different noisy tails for different monitors, these tails
may not converge at all. In this case, it is easier for our
locating algorithm to locate the hijacker. In our simula-
tions, in anticipating that the hijacker may ﬁll its replies
to traceroute probes with fake identities, we replaced the
node identities with random entries for all nodes that are
farther than the hijacker (inclusive) in the paths resulted
from running traceroute from different monitors.
6.2.2 Reconstructing Previously-Known Preﬁx Hi-
jacking Events
We obtained the list of previously-known preﬁx hijack-
ing events from the Internet Alert Registry [14].
IAR
provides the network operator community with the up
to date BGP (Border Gateway Protocol) routing security
information. Its discussion forum 3 posts suspicious hi-
jacking events. We chose 7 that had been veriﬁed and
conﬁrmed to be preﬁx hijacking events, including some
famous victims such as YouTube and eBay, during a time
period from 2006 to 2008.
We reconstructed these 7 hijacking events using the
following method. First, we selected a traceroutable IP
in each victim AS as the probing target t, and a tracer-
outable IP in each hijacker AS as the hijacker h. Then
we collected the traceroute information from each mon-
itoring site s to these targets t and hijackers h. The
routing policy is based again on the proﬁt driven model.
Since we don’t know what kind of behavior each hijacker
took (imposture, interception or malicious), We conser-
vatively assume that the hijacker will try to evade our
measurement. So it follows the malicious scenario we
mentioned before.
6.2.3 Launching Controlled Preﬁx Hijacking
Events
We conducted controlled preﬁx hijacking experiments on
the Internet using hosts under our control at four differ-
ent sites, namely Cornell, Berkeley, Seattle, and Pitts-
burgh. Each host ran the Quagga software router and
established eBGP sessions with different ISPs. Effec-
tively, this allowed us to advertise our dedicated preﬁx
(204.9.168.0/22) into the Internet through the BGP ses-
sions. The idea behind the experiments was to use our
preﬁx as the target preﬁx with one of the sites serving
as the owner of the preﬁx and the other three sites (sepa-
rately) serving as the geographically distributed attackers
trying to hijack the preﬁx. More implementation details
can be found in [6]. In our experiment, we focused on
the imposture scenario. There were 12 hijacking cases
by switching the role of each site. These attacks were
launched according to a pre-conﬁgured schedule during
period from May 2, 2008 to May 4, 2008.
6.2.4 Performance Metrics
LOCK identiﬁes suspicious hijackers and ranks them
based on their likelihood of being the true hijacker. The
hijacker ranked at top one is most suspicious. We thus
deﬁne the top-n accuracy of LOCK as the percentage of
hijacking events that the true hijacker ranks as top n on
the suspect list, where n is a parameter. We use this pa-
rameterized deﬁnition because different operators might
have different preference. Some might prefer knowing
just the most suspicious hijacker, in which top-1 accu-
racy is most important. Others might not mind learning
a longer suspect list to increase the likelihood that the hi-
jacker is included in the suspect list. We will later show
that the top-2 accuracy is already very high.
In addition, we deﬁne impact of a hijacker h as the
fraction of the ASes from which the trafﬁc to the target
preﬁx t is hijacked to h, similar to what is done in [23].
We will then study the correlation between LOCK’s lo-
cating accuracy of a given hijacker and the impact of its
attack.
6.3 Evaluation on Synthetic Preﬁx Hijack-
ing Events
In this section, we use the results of LOCK based on the
data plane measurement to illustrate our ﬁndings.
6.3.1 Monitor Selection
We compare the performance of the monitor selection al-
gorithm (referred as clustering and ranking) proposed in
Section 4 with the following three monitor selection al-
gorithms: (i) random: randomly selecting m monitors
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 100
 95
 90
 85
 80
y
c
a
r
u
c
c
a
1
-
p
o
T
%
s
t
n
e
v
e
g
n
k
c
a
i
j
i
h
f
o
F
D
C
y
c
a
r
u
c
c
a
1
-
p
o
T
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Random
Clustering
Ranking
Clustering and ranking
y
c
a
r
u
c
c
a
1
-
p
o
T
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Random
Clustering
Ranking
Clustering and ranking
Random
Clustering
Ranking
Clustering and ranking
 0
 10  20  30  40  50  60  70
 0
 10  20  30  40  50  60  70
 0
 10  20  30  40  50  60  70
The number of mointors
(a) Imposture
The number of mointors
(b) Interception
The number of mointors
(c) Malicious
Figure 3: Performance of monitor selection algorithms
%
s
t
n
e
v
e
g
n
k
c
a
i
j
i
h
f
o
F
D
C
 100
 95
 90
 85
 80
All monitors
m=30
m=20
m=10
All monitors
m=30
m=20
m=10
%
s
t
n
e
v
e
g
n
k
c
a
i
j
i
h
f
o
F
D
C
 100
 95
 90
 85
 80
All monitors
m=30
m=20
m=10
 1
 2
 3
 4
 5
 6
 7
 1
 2
 3
 4
 5
 6
 7
 1
 2
 3
 4
 5
 6
 7
Ranking
(a) Imposture
Ranking
(b) Interception
Ranking
(c) Malicious
Figure 4: The CDF of the rank of hijackers in synthetic attacks
from all M candidates. (ii) clustering: dividing M mon-
itors into clusters based on the clustering algorithm pro-
posed in Section 4.1, then randomly selecting one moni-
tor from each cluster; and (iii) ranking: ranking M mon-
itors based on the ranking algorithm proposed in Sec-
tion 4.2, then selecting the ﬁrst m candidates.
Figure 3 shows the top-1 accuracy of different monitor
selection algorithms when varying the subsets of moni-
tors. We focused on synthetic attacks since the dataset
is much larger than previously-known hijacks and con-
trolled real hijacks. We ﬁnd that: (i) There is always a
trade-off between the number of monitors selected and
hijacker-locating accuracy. Note that even using all 73
monitors, the accuracy is less than 92%. It is not sur-
prising because it is hard to detect the hijacking events
which have small impact [23]. (ii) The clustering and
ranking algorithm outperforms the rest. For example,
for imposture attacks, selecting 10 monitors based on the
ranking and clustering algorithm is enough for achiev-
ing 80% top-1 accuracy. This is only 1/3 of number of
monitors needed to reach the same top-1 accuracy with
either ranking or the clustering algorithm, or 1/6 if mon-
itors are selected randomly. Hence in our experiments in
the rest of the section, whenever we need to select moni-
tors, we use the clustering and ranking algorithm, unless
otherwise speciﬁed.
Moreover, we want to make sure that the monitor se-
lection algorithm does not overload any monitors by as-
signing too many target preﬁxes to it for monitoring. For
each target preﬁx we select m = 30 monitors from the
total pool of M = 73 candidate monitors using the mon-
itor selection algorithm described in Section 4. Individ-
ual monitor’s work load is computed as the number of
target preﬁxes assigned to it divided by the total number
of target preﬁxes. Ideally, the average work load, which
is the load each monitor gets if the monitoring tasks are
evenly across all monitors equally instead of assigning
preﬁxes to monitors that can monitor most effectively, is
m/M ≈ 0.4. As as comparison, we observe the real
workload ranges from 0.3 to 0.55. In addition, only 4
monitors out of 73 have load above 0.5, which means
that they monitor more than half of preﬁx targets.
6.3.2 Effectiveness of Basic Algorithm
The evaluations of two different aspects of the effective-
ness of the hijacker-locating algorithm are presented in
this section. We show how well the ranked list captures
the hijacker identity, as well as how well the ranked list
reﬂects the impact of the hijack events.
Figure 4 illustrates where the hijacker is ranked in the
suspect list produced by the basic algorithm, for different
number of monitors selected. Obviously, the higher the
hijacker is ranked, the better the basic algorithm is. From