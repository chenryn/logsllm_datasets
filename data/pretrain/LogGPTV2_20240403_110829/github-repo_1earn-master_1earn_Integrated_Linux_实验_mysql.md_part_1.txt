# mysql
---
## my.cnf 配置文件
```bash
port = 3309
socket =  /usr/local/mysql/tmp/mysql.sock
[mysqld]                    # 服务器端配置
!include  /usr/local/mysql/etc/mysqld.cnf   # 包含的配置文件，可以把用户名和密码文件单独存放
port = 3306               # 监听端口  
bind-address = 0.0.0.0    # 监听的 ip 地址 (全0是监听所有网口,即对外开放,不建议⚠❗)
server-id = 1             # MySQL 服务的 ID
socket = /usr/local/mysql/tmp/mysql.sock    # socket 通信设置
pid-file = /usr/local/mysql/var/mysql.pid   # pid 文件路径
basedir = /usr/local/mysql/                 # MySQL 程序路径
datadir = /usr/local/mysql/data             # 数据目录
tmpdir = /usr/local/mysql/tmp/
# 此目录被 MySQL 用来保存临时文件. 例如, 它被用来处理基于磁盘的大型排序, 和内部排序一样，以及简单的临时表. 如果你不创建非常大的临时文件, 将其放置到 swapfs/tmpfs 文件系统上也许比较好。另一种选择是你也可以将其放置在独立的磁盘上. 你可以使用”;” 来放置多个路径，他们会按照 roud-robin 方法被轮询使用.
slave-load-tmpdir = /usr/local/mysql/tmp/   # 当 slave 执行 load data infile 时使用
```
### skip options 相关选项
```bash
skip-name-resolve
# 禁止 MySQL 对外部连接进行 DNS 解析，使用这一选项可以消除 MySQL 进行 DNS 解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用 IP 地址方式，否则 MySQL 将无法正常处理连接请求！
skip-symbolic-links
# 不能使用连接文件，多个客户可能会访问同一个数据库，因此这防止外部客户锁定 MySQL 服务器。 该选项默认开启
skip-external-locking
# 不使用系统锁定，要使用 myisamchk,必须关闭服务器 ,避免 MySQL的外部锁定，减少出错几率增强稳定性。
skip-slave-start
# 启动 mysql,不启动复制
skip-networking
# 开启该选项可以彻底关闭 MySQL 的 TCP/IP 连接方式，如果 WEB 服务器是以远程连接的方式访问 MySQL 数据库服务器则不要开启该选项！否则将无法正常连接！ 如果所有的进程都是在同一台服务器连接到本地的 mysqld, 这样设置将是增强安全的方法
sysdate-is-now = 1
# 把SYSDATE 函数编程为 NOW的别名
skip-grant-tables
# ⚠❗ 在启动mysql时不启动grant-tables，授权表,在忘记管理员密码后有用
```
### 系统资源相关选项
```bash
back_log = 50
# 接受队列，对于没建立 tcp 连接的请求队列放入缓存中，队列大小为 back_log，受限制与 OS 参数，试图设定 back_log 高于你的操作系统的限制将是无效的。默认值为 50。对于 Linux 系统推荐设置为小于 512 的整数。如果系统在一个短时间内有很多连接，则需要增大该参数的值
max_connections = 1000
# 指定 MySQL 允许的最大连接进程数。如果在访问数据库时经常出现 "Too Many Connections" 的错误提 示，则需要增大该参数值。
max_connect_errors = 10000
# 如果某个用户发起的连接 error 超过该数值，则该用户的下次连接将被阻塞，直到管理员执行 flush hosts ; 命令或者服务重启， 防止黑客 ， 非法的密码以及其他在链接时的错误会增加此值
open_files_limit = 10240
#MySQL 打开的文件描述符限制，默认最小 1024; 当 open_files_limit 没有被配置的时候，比较 max_connections*5 和 ulimit-n 的值，哪个大用哪个，当 open_file_limit 被配置的时候，比较 open_files_limit 和 max_connections*5 的值，哪个大用哪个。
connect-timeout = 10
# 连接超时之前的最大秒数, 在 Linux 平台上，该超时也用作等待服务器首次回应的时间
wait-timeout = 28800
# 等待关闭连接的时间
interactive-timeout = 28800
# 关闭连接之前，允许 interactive_timeout（取代了 wait_timeout）秒的不活动时间。客户端的会话 wait_timeout 变量被设为会话 interactive_timeout 变量的值。如果前端程序采用短连接，建议缩短这 2 个值, 如果前端程序采用长连接，可直接注释掉这两个选项，默认配置(8 小时)
slave-net-timeout = 600
# 从服务器也能够处理网络连接中断。但是，只有从服务器超过 slave_net_timeout 秒没有从主服务器收到数据才通知网络中断
net_read_timeout = 30
# 从服务器读取信息的超时
net_write_timeout = 60
# 从服务器写入信息的超时
net_retry_count = 10
# 如果某个通信端口的读操作中断了，在放弃前重试多次
net_buffer_length = 16384
# 包消息缓冲区初始化为 net_buffer_length 字节，但需要时可以增长到 max_allowed_packet 字节
max_allowed_packet = 64M
# 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的 BLOB 字段一起工作时相当必要)， 每个连接独立的大小. 大小动态增加。 设置最大包, 限制 server 接受的数据包大小，避免超长 SQL 的执行有问题 默认值为 16M，当 MySQL 客户端或 mysqld
服务器收到大于 max_allowed_packet 字节的信息包时，将发出 “信息包过大” 错误，并关闭连接。对于某些客户端，如果通信信息包过大，在执行查询期间，可能会遇到 “丢失与 MySQL 服务器的连接” 错误。默认值 16M。
table_cache = 512
# 所有线程所打开表的数量. 增加此值就增加了 mysqld 所需要的文件描述符的数量这样你需要确认在 [mysqld_safe] 中 “open-files-limit” 变量设置打开文件数量允许至少 4096
thread_stack = 192K
# 线程使用的堆大小. 此容量的内存在每次连接时被预留. MySQL 本身常不会需要超过 64K 的内存如果你使用你自己的需要大量堆的 UDF 函数或者你的操作系统对于某些操作需要更多的堆, 你也许需要将其设置的更高一点. 默认设置足以满足大多数应用
thread_cache_size = 20
# 在 cache 中保留多少线程用于重用. 当一个客户端断开连接后, 如果 cache 中的线程还少于 thread_cache_size, 则客户端线程被放入 cache 中. 这可以在你需要大量新连接的时候极大的减少线程创建的开销,服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量, 当断开连接时如果缓存中还有空间, 那么客户端的线程将被放到缓存中, 如果线程重新被请求，那么请求将从缓存中读取, 如果缓存中是空的或者是新的请求，那么这个线程将被重新创建, 如果有很多新的线程，增加这个值可以改善系统性能. 通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用
thread_concurrency = 8
# 此允许应用程序给予线程系统一个提示在同一时间给予渴望被运行的线程的数量. 该参数取值为服务器逻辑 CPU 数量 ×2，在本例中，服务器有 2 颗物理 CPU，而每颗物理 CPU 又支持 H.T 超线程，所以实际取值为 4 × 2 ＝ 8. 设置 thread_concurrency 的值的正确与否,
# 对 mysql 的性能影响很大, 在多个 cpu(或多核)的情况下，错误设置了 thread_concurrency 的值, 会导致 mysql 不能充分利用多 cpu(或多核), 出现同一时刻只能一个 cpu(或核)在工作的情况。 thread_concurrency 应设为 CPU 核数的 2 倍. 比如有一个双核的 CPU,那么 thread_concurrency 的应该为 4; 2 个双核的 cpu,thread_concurrency 的值应为 8, 属重点优化参数
```
### qcache settings 相关选项
```bash
query_cache_limit = 2M
# 不缓存查询大于该值的结果. 只有小于此设定值的结果才会被缓冲,  此设置用来保护查询缓冲, 防止一个极大的结果集将其他所有的查询结果都覆盖.
query_cache_min_res_unit = 2K
# 查询缓存分配的最小块大小. 默认是 4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费
# 查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%
# 如果查询缓存碎片率超过 20%，可以用 FLUSH QUERY CACHE 整理缓存碎片，或者试试减小 query_cache_min_res_unit，如果你的查询都是小数据量的话。
# 查询缓存利用率 = (query_cache_size - Qcache_free_memory) / query_cache_size *100%
# 查询缓存利用率在 25% 以下的话说明 query_cache_size 设置的过大，可适当减小; 查询缓存利用率在 80% 以上而且 Qcache_lowmem_prunes > 50 的话说明 query_cache_size 可能有点小，要不就是碎片太多。
# 查询缓存命中率 = (Qcache_hits - Qcache_inserts) / Qcache_hits * 100%
query_cache_size = 64M
# 指定 MySQL 查询缓冲区的大小。可以通过在 MySQL 控制台执行以下命令观察：
# 代码:
# > SHOW VARIABLES LIKE '%query_cache%';
# > SHOW STATUS LIKE 'Qcache%'; 如果 Qcache_lowmem_prunes 的值非常大，则表明经常出现缓冲不够的情况；
# 如果 Qcache_hits 的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲； Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。
# memlock # 如果你的系统支持 memlock() 函数, 你也许希望打开此选项用以让运行中的 mysql 在在内存高度紧张的时候, 数据在内存中保持锁定并且防止可能被 swapping out, 此选项对于性能有益
```
### default settings 相关选项