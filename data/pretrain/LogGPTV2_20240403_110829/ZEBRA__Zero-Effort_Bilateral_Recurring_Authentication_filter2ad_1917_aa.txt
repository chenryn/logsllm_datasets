title:ZEBRA: Zero-Effort Bilateral Recurring Authentication
author:Shrirang Mare and
Andres Molina-Markham and
Cory Cornelius and
Ronald A. Peterson and
David Kotz
2014 IEEE Symposium on Security and Privacy
ZEBRA: Zero-Effort Bilateral Recurring Authentication
Shrirang Mare∗, Andres Molina-Markham∗, Cory Cornelius†, Ronald Peterson∗ and David Kotz∗
∗Institute for Security, Technology, and Society, Dartmouth College
†Intel Labs
Abstract—Common authentication methods based on pass-
words, tokens, or ﬁngerprints perform one-time authentication
and rely on users to log out from the computer terminal when
they leave. Users often do not log out, however, which is a
security risk. The most common solution, inactivity timeouts,
inevitably fail security (too long a timeout) or usability (too
short a timeout) goals. One solution is to authenticate users con-
tinuously while they are using the terminal and automatically
log them out when they leave. Several solutions are based on
user proximity, but these are not sufﬁcient: they only conﬁrm
whether the user is nearby but not whether the user is actually
using the terminal. Proposed solutions based on behavioral
biometric authentication (e.g., keystroke dynamics) may not
be reliable, as a recent study suggests.
To address this problem we propose Zero-Effort Bilateral
Recurring Authentication (ZEBRA). In ZEBRA, a user wears a
bracelet (with a built-in accelerometer, gyroscope, and radio) on
her dominant wrist. When the user interacts with a computer
terminal, the bracelet records the wrist movement, processes
it, and sends it to the terminal. The terminal compares the
wrist movement with the inputs it receives from the user (via
keyboard and mouse), and conﬁrms the continued presence
of the user only if they correlate. Because the bracelet is
on the same hand that provides inputs to the terminal, the
accelerometer and gyroscope data and input events received
by the terminal should correlate because their source is the
same – the user’s hand movement. In our experiments ZEBRA
performed continuous authentication with 85 % accuracy in
verifying the correct user and identiﬁed all adversaries within
11 s. For a different threshold that trades security for usability,
ZEBRA correctly veriﬁed 90 % of users and identiﬁed all
adversaries within 50 s.
I. INTRODUCTION
Desktop computers (also called computer terminals or
simply terminals) are still being used in large numbers at
workplaces and at homes, often by multiple users. To prevent
unauthorized access users authenticate themselves before
using the terminal (e.g., by logging in with username and
password) and deauthenticate (i.e., log out) after their use.
This important deauthentication step, however, is overlooked
by most authentication schemes. Common schemes such as
password-based or ﬁngerprint-based authentication provide
one-time authentication and rely on the users to log out.
Unfortunately, users often do not log out, they either forget
to log out or intentionally do not log out to avoid logging
in again. Although deauthentication is important for many
different devices, our focus in this work is to address the
deauthentication problem on computer terminals; future
extensions will support laptops, tablets, and phones.
The consequence of not logging out from a terminal can
be severe: an adversary with access to your terminal can
snoop through your private information, modify or delete
your data, or steal your credentials to take actions on your
behalf. Even in a non-adversarial setting, other authorized
users could accidentally misuse your account if you forget to
log out. For instance, Koppel et al. [1] report that physicians
frequently enter data into the wrong patient’s record because
they thought the open record belonged to the patient they
were treating; in fact, while they were away from the terminal
another physician used that terminal to update a different
patient’s record and forgot to log out. Sometimes clinicians
leave terminals intentionally logged in, as a professional
courtesy, so that the next user does not have to log in.
This deauthentication problem is a major concern in a busy
multi-user environment where users have to authenticate and
deauthenticate often, e.g., when users’ use of terminals is
interlaced or when they have to use a terminal multiple
times but for short durations. For example, in a clinical
inpatient setting where physicians, nurses, residents, and
medical students come and go, check on patients, and use any
available terminal to view and update patient medical records;
or in a busy restaurant or retail shop where employees share
kiosks to place orders and manage bills.
Even in workspaces where users have their own personal
terminals, deauthentication is an important problem. Users
either forget to log out or intentionally do not log out as a
workaround to avoid logging in later; they ﬁnd password-
based authentication (the most common authentication
method) tedious and time consuming. Thus, users often log
in once when they arrive at work and log out when they leave,
but they do not log out during their shift when they step
away from the terminal, leaving their terminal vulnerable to
snooping and attacks by a co-worker or a passerby.
The most common solution to the deauthentication problem
is ‘timeouts’, i.e., to execute automatic logout after inactivity
for a timeout period. The problem with this approach is
that a single timeout period does not work for everyone and
often timeout periods are blind to context [2], [3]. Another
approach is to use a proximity sensor that detects a users’
departure and log them out, but these sensors are unreliable
in crowded environments [4].
One way to automate the deauthentication process is to
continuously authenticate the current user and, when the user
changes, deauthenticate the previous user and ask the new
© 2014, Shrirang Mare. Under license to IEEE.
DOI 10.1109/SP.2014.51
705
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:04 UTC from IEEE Xplore.  Restrictions apply. 
user to authenticate herself. There are two goals that make
this method challenging. First, continuous authentication
should be passive (i.e., without requiring explicit action by
the user) and unobtrusive so that it is not a burden on the
user. Second, the system should quickly identify that the
user has departed or changed without relying on users to
log themselves out, because users often forget to log out.
Computer use that is frequent, irregular, and short-lived – as
is the case in hospitals – makes continuous authentication
particularly challenging.
Our approach is to continuously authenticate a user based
on her interactions with a terminal by monitoring her hand
movements and comparing them with her inputs to the
terminal using input devices (i.e, the keyboard and mouse).
As with behavioral biometrics based on keystroke and mouse
dynamics, our approach is based on the user’s interactions –
but there is an important distinction. Behavioral biometrics
rely on how the user does a particular interaction (e.g.,
how the user types or how the user moves a mouse) and
hence require user-speciﬁc training and typically require
long periods of observation to authenticate the user. Our
approach relies on what interactions the user does when
using a terminal and hence does not require user-speciﬁc
training or long periods of observation to authenticate the user.
We conﬁrm the user’s continued presence by observing what
the user is doing from two different sources and comparing
those observations; we call this bilateral authentication. This
approach complements any method that may be used for
initial authentication, such as a password, a token, or a
ﬁngerprint biometric.
Zero-Effort Bilateral Recurring Authentication, or ZEBRA,
monitors a user’s hand movements via a bracelet worn on
their wrist that they use to control the mouse. This bracelet
is registered to the user, like any authentication token, so its
presence should imply the presence of the associated user.
ZEBRA goes beyond mere proximity, however. After logging
in (using additional credentials) the user interacts with the
terminal and the bracelet records the user’s hand movements
using built-in accelerometer and gyroscope sensors and
transmits their data to the terminal over a short-range radio
(e.g., Bluetooth). The terminal then compares the user’s hand
movements with the inputs it observes and conﬁrms the
presence of the user if they correlate. For example, when
the user clicks the mouse and then starts typing (with both
hands) his hand used to control the mouse (bracelet hand)
moves from the mouse to the keyboard; when the user scrolls
using the mouse scroll-wheel his hand is relatively stationary.
It is these kinds of hand motions that the terminal expects for
inputs that it receives from the user. The core idea of ZEBRA
is that if the bracelet is on the same hand that provides inputs
to the terminal then the accelerometer and gyroscope data
(from the bracelet) and the terminal input events should
correlate because their source is the same – the user’s mouse
hand movement. Conversely, if these movements no longer
correlate, the terminal infers that a different person is now
using the terminal and can take action (e.g., to lock the screen,
log out the former user, or require initial authentication for
the new user).
We make three main contributions. First, we introduce a
new type of authentication, bilateral authentication, which
falls into a new category of authentication of ‘what the user
does when interacting’ with a terminal. It is worth mentioning
again that this is distinct from behavioral biometrics that fall
into the category ‘how the user interacts’. Second, we propose
ZEBRA, a novel mechanism to continuously authenticate the
current user passively and unobtrusively, and to automatically
deauthenticate the user. We further describe how ZEBRA
can be used to improve the initial authentication process
(e.g., username and password). Third, we evaluate ZEBRA’s
performance with a user study and demonstrate strong results.
II. BACKGROUND AND RELATED WORK
Passwords are one of the oldest and the most common
authentication schemes. Passwords are convenient because
users do not have to carry anything, they are intuitive, and
are efﬁcient to use. However, the plight of passwords is well
documented [5], [6]. Users ﬁnd it hard to remember strong
passwords, and they use workarounds such as choosing weak
passwords, sharing them, reusing them, writing them down,
or intentionally leaving their terminals unlocked so that they
do not have to enter the password again [4], [7]–[12]. One
problem with password-based authentication schemes is that
there is no reliable and convenient way to deauthenticate
users, so if a user leaves a terminal unlocked any passerby
can access it. Organizations have tried timeouts for auto
deauthentication, but efforts have failed because they are not
reliable [2].
To address the limitation of a timeout approach to deau-
thenticate, some have proposed using proximity sensors that
detect close proximity of a human, and when the user walks
away, they detect the user’s departure and log out the user if
necessary. Proximity-based deauthentication, like timeouts, is
blind to context, and one proximity setting may not work for
all users. Moreover, as Sinclair et al. [4] report, these sensors
were not reliable when they were tested in a hospital – they
will trigger when someone walks past in the hallway and
would sometimes log a user out when she was still using the
terminal. Their deauthentication solution frustrated the users,
who developed a work-around by covering the proximity
sensor with an empty cup.
A proximity-based authentication scheme using a wearable
token (e.g., ZIA [13]) also provides passive continuous
authentication, but such schemes are not reliable in dense
workspaces such as hospitals, where multiple authorized
users may be near the terminal at the same time. Although
proximity-based authentication schemes are well suited for
single-user machine scenarios, their attack window lasts until
the user walks out of the proximity range, which may be many
706
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:04 UTC from IEEE Xplore.  Restrictions apply. 
minutes. When there is a group of clinicians near a device,
whom should the device authenticate? Sinclair et al. [4]
note these shortcomings of proximity-based authentication
mechanisms from their observations of clinicians’ terminal
use and their discussions with the clinicians.
Biometrics are convenient because users do not have to
remember their credentials – they are always with them.
However, biometrics can be stolen by physical observation
or internal observation (from within the device) and they
are hard to recover from theft or loss, because it may not
be possible to change the biometric. Some biometrics such
as ﬁngerprint or iris require user input, which makes them
unsuitable for continuous user authentication. Biometrics
based on voice or face may be suitable for continuous
authentication provided they can be captured easily and
correctly without interrupting the user, which is not always
possible when the user is not speaking or in front of her
camera. Behavioral biometrics based on keystroke dynamics
or mouse dynamics provide unobtrusive passive continuous
authentication. However, they require a user-enrollment step
and as a user’s behavior changes they need to be re-enrolled,
which may increase the maintenance cost of this scheme.
Moreover, keystroke-based biometric is not resilient to theft
or internal observation, as Meng et al. [14] show that an
attacker with some training can successfully mimic a user’s
typing behavior. Rasmussen et al. [15] propose a pulse-
based biometric for continuous authentication where a metal
keyboard sends small electric current through the user’s body
and veriﬁes the user based on the user’s body’s resistance
to the current. Such an approach has signiﬁcant deployment
cost, because it requires modifying every input device. This
scheme requires users’ hands to be in-touch with the keyboard
at the same time for the pulse to pass through the body, and
this restricts how the user may use a keyboard.
Table I shows a comparative evaluation of ZEBRA with
the authentication schemes described above, using the
usability-deployability-security (UDS) framework [16]. UDS
framework is actually for evaluating web authentication
schemes, but some of its evaluation properties are applicable
to authentication schemes for devices; we use some of
those properties and 3 additional properties to compare
continuous authentication schemes: Verifying-Actual-User,
the scheme should verify who is actually using a terminal;
No-Constraint-on-Using-the-Device, the scheme should work
irrespective of how the user uses the device; and Automatic-
Deauthentication, the scheme should automatically deauthen-
ticate users. Due to lack of space we do not provide a detailed
comparative evaluation here; we refer readers to our technical
report for details [17].
Table I: Comparative evaluation of ZEBRA against other
continuous authentication schemes.
-
r
e
p
-
t
s
o
C
-
e
l
b
i
g
i
l
g
e
N
1
r
e
s
U
-
l
a
c
i
s
y
h
P
-
o
t
-
t
n
e
i
l
i
s
e
R
1
n
o
i
t
a
v
r
e
s
b
O
-
l
a
n
r
e
t
n
I
-
o
t
-
t
n
e
i
l
i
s
e
R
1
n
o
i
t
a
v