src/backend/storage/buffer/bufmgr.c  
```  
/*  
 * ReadBuffer_common -- common logic for all ReadBuffer variants  
 *  
 * *hit is set to true if the request was satisfied from shared buffer cache.  
 */  
static Buffer  
ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,  
                                  BlockNumber blockNum, ReadBufferMode mode,  
                                  BufferAccessStrategy strategy, bool *hit)  
{  
        BufferDesc *bufHdr;  
        Block           bufBlock;  
        bool            found;  
        bool            isExtend;  
        bool            isLocalBuf = SmgrIsTemp(smgr);  
        *hit = false;  
... ...  
        /* Substitute proper block number if caller asked for P_NEW */  
        if (isExtend)  
                blockNum = smgrnblocks(smgr, forkNum);  
        if (isLocalBuf)  
        {  
                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);  
                if (found)  
                        pgBufferUsage.local_blks_hit++;  
                else if (isExtend)  
                        pgBufferUsage.local_blks_written++;  
                else if (mode == RBM_NORMAL || mode == RBM_NORMAL_NO_LOG ||  
                                 mode == RBM_ZERO_ON_ERROR)  
                        pgBufferUsage.local_blks_read++;  
        }  
        else  
        {  
                /*  
                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is  
                 * not currently in memory.  
                 */  
                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,  
                                                         strategy, &found);  
                if (found)  
                        pgBufferUsage.shared_blks_hit++;  
                else if (isExtend)  
                        pgBufferUsage.shared_blks_written++;  
                else if (mode == RBM_NORMAL || mode == RBM_NORMAL_NO_LOG ||  
                                 mode == RBM_ZERO_ON_ERROR)  
                        pgBufferUsage.shared_blks_read++;  
        }  
```  
src/backend/commands/explain.c  
```  
/*  
 * Show buffer usage details.  
 */  
static void  
show_buffer_usage(ExplainState *es, const BufferUsage *usage, bool planning)  
{  
...  
                /* Show only positive counter values. */  
                if (has_shared || has_local || has_temp)  
                {  
                        ExplainIndentText(es);  
                        appendStringInfoString(es->str, "Buffers:");  
                        if (has_shared)  
                        {  
                                appendStringInfoString(es->str, " shared");  
                                if (usage->shared_blks_hit > 0)  
                                        appendStringInfo(es->str, " hit=%ld",  
                                                                         usage->shared_blks_hit);  
```  
```  
create extension pageinspect;  
create extension pg_buffercache;  
```  
创建解析page data的函数. 倒转, 二进制转int    
```  
create or replace function idx2int(text) returns int as $$    
declare  
  res text := '';   
  res1 int8;   
  x text := '';  
begin  
  for x in select regexp_split_to_table($1,' ')   
  loop  
    res := x||res;  
  end loop;  
  execute format($_$ select x'%s'::int8 $_$, res) into res1;  
  return res1::int;   
end;  
$$ language plpgsql strict;  
```  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id = 5;   
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Index Only Scan using tbl1_pkey on public.tbl1  (cost=0.43..1.55 rows=1 width=4) (actual time=0.027..0.029 rows=1 loops=1)  
   Output: id  
   Index Cond: (tbl1.id = 5)  
   Heap Fetches: 0  
   Buffers: shared hit=4  
 Planning Time: 0.071 ms  
 Execution Time: 0.046 ms  
(7 rows)  
postgres=#  SELECT * FROM bt_metap('tbl1_pkey');  -- meta   
 magic  | version | root | level | fastroot | fastlevel | oldest_xact | last_cleanup_num_tuples | allequalimage   
--------+---------+------+-------+----------+-----------+-------------+-------------------------+---------------  
 340322 |       4 |  412 |     2 |      412 |         2 |           0 |                 3934241 | t  
(1 row)  
postgres=# select *,idx2int(data) from bt_page_items('tbl1_pkey', 412);  -- root  
 itemoffset |   ctid   | itemlen | nulls | vars |          data           | dead | htid | tids | idx2int   
------------+----------+---------+-------+------+-------------------------+------+------+------+---------  
          1 | (3,0)    |       8 | f     | f    |                         |      |      |      |       0  
          2 | (9202,1) |      16 | f     | f    | 2b 5e 03 00 00 00 00 00 |      |      |      |  220715  
          3 | (4616,1) |      16 | f     | f    | ac b1 06 00 00 00 00 00 |      |      |      |  438700  
          4 | (9227,1) |      16 | f     | f    | 7a 4c 0a 00 00 00 00 00 |      |      |      |  674938  
...  
postgres=# select *,idx2int(data) from bt_page_items('tbl1_pkey', 3);  -- branch  
 itemoffset |   ctid    | itemlen | nulls | vars |          data           | dead | htid | tids | idx2int   
------------+-----------+---------+-------+------+-------------------------+------+------+------+---------  
          1 | (4521,1)  |      16 | f     | f    | 2b 5e 03 00 00 00 00 00 |      |      |      |  220715  
          2 | (1,0)     |       8 | f     | f    |                         |      |      |      |       0  
          3 | (10555,1) |      16 | f     | f    | 56 02 00 00 00 00 00 00 |      |      |      |     598  
          4 | (5423,1)  |      16 | f     | f    | 05 05 00 00 00 00 00 00 |      |      |      |    1285  
...  
postgres=# select *,idx2int(data) from bt_page_items('tbl1_pkey', 1);  -- leaf  
 itemoffset |    ctid     | itemlen | nulls | vars |          data           | dead |    htid     | tids | idx2int   
------------+-------------+---------+-------+------+-------------------------+------+-------------+------+---------  
          1 | (25828,1)   |      16 | f     | f    | 56 02 00 00 00 00 00 00 |      |             |      |     598  
          2 | (594,78)    |      16 | f     | f    | 00 00 00 00 00 00 00 00 | f    | (594,78)    |      |       0  
          3 | (19518,66)  |      16 | f     | f    | 05 00 00 00 00 00 00 00 | f    | (19518,66)  |      |       5  
          4 | (32751,68)  |      16 | f     | f    | 06 00 00 00 00 00 00 00 | f    | (32751,68)  |      |       6  
          5 | (20678,31)  |      16 | f     | f    | 07 00 00 00 00 00 00 00 | f    | (20678,31)  |      |       7  
...  
postgres=# select ctid,* from tbl1 where ctid='(19518,66)';  -- heap   
    ctid    | id |               info                 
------------+----+----------------------------------  
 (19518,66) |  5 | 01113e164911cf0eaf5db51b4c6e086b  
(1 row)  
```  
计算heap page 19518 的2 bit位属于那个vm page num  
```  
postgres=# show block_size ;  
 block_size   
------------  
 8192    
(1 row)  
postgres=# select 2*19518/8.0;  
       ?column?          
-----------------------  
 4879.5000000000000000  -- bytes    
(1 row)  
```  
访问了第1个vm数据块, 0号块    
```  
postgres=# select * from pg_buffercache  where relfilenode=pg_relation_filenode('tbl1'::regclass) and relforknumber=2 ;  -- table vm form  
 bufferid | relfilenode | reltablespace | reldatabase | relforknumber | relblocknumber | isdirty | usagecount | pinning_backends   
----------+-------------+---------------+-------------+---------------+----------------+---------+------------+------------------  
   402016 |     1093455 |          1663 |       14174 |             2 |              0 | f       |          5 |                0  -- 访问这个     
   402017 |     1093455 |          1663 |       14174 |             2 |              1 | f       |          4 |                0  
(2 rows)  
```  
存在的值, Buffers: shared hit=4    -- (meta+root+branch+leaf) + vm   
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id = 5;   
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Index Only Scan using tbl1_pkey on public.tbl1  (cost=0.43..1.55 rows=1 width=4) (actual time=0.027..0.029 rows=1 loops=1)  
   Output: id  
   Index Cond: (tbl1.id = 5)  
   Heap Fetches: 0  
   Buffers: shared hit=4  
 Planning Time: 0.071 ms  
 Execution Time: 0.046 ms  
(7 rows)  
```  
不存在的值, Buffers: shared hit=3    -- (meta+root+branch+leaf)   
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id = 1;   
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Index Only Scan using tbl1_pkey on public.tbl1  (cost=0.43..1.55 rows=1 width=4) (actual time=0.025..0.066 rows=0 loops=1)  
   Output: id  
   Index Cond: (tbl1.id = 1)  
   Heap Fetches: 0  
   Buffers: shared hit=3  
 Planning Time: 0.086 ms  
 Execution Time: 0.082 ms  
(7 rows)  
```  
存在、不存在唯一的差别是: 不存在时不需要访问vm.   
所以从现象看, shared hit统计不准确: 可能的解释是  bt index meta page 没有被count? 有兴趣的同学可以从代码侧再分析一下。          
还有访问多次时vm page是否被重复计算?    
此前有对比过bitmap index scan和index scan, 在离散扫描上index sacn会重复算每次的heap page扫描, 二bitmap index scan只算一次heap scan.     
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")  
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").    
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")  
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")  
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")  
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")  
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")