        type=int,
        default=1024,
        help='Maximum number of connections per client.'
    )
    parser.add_argument(
        '--max-clients',
        type=int,
        default=1,
        help='Maximum number of clients.'
    )
    args = parser.parse_args()
    main(args.max_clients, args.max_conns)
```
在一个新建的终端窗口中，运行 `client3.py` 然后让它与服务器同步创建 300 个连接：
```
$ python client3.py --max-clients=300
```
过一会，你的服务器进程就该爆了。这是我的环境中出现的异常截图：
![](/data/attachment/album/201610/09/144240p2xiaofi2cxhoo2m.png)
这个例子很明显——你的服务器应该关闭描述符副本。
#### 僵尸进程
但是，即使你关闭了描述符副本，你依然没有摆脱险境，因为你的服务器还有一个问题，这个问题在于“ 僵尸   （    zombies    ） ”！
![](/data/attachment/album/201610/09/144241uwx1agi4xljgwgir.png)
没错，这个服务器代码确实在制造僵尸进程。我们来看看怎么回事。重新运行你的服务器：
```
$ python webserver3d.py
```
在另一个终端窗口中运行以下 `curl` 命令：
```
$ curl http://localhost:8888/hello
```
现在，运行 `ps` 环境，来查看正在运行的 Python 进程。下面是我的环境中 `ps` 的运行结果：
```
$ ps auxw | grep -i python | grep -v grep
vagrant   9099  0.0  1.2  31804  6256 pts/0    S+   16:33   0:00 python webserver3d.py
vagrant   9102  0.0  0.0      0     0 pts/0    Z+   16:33   0:00 [python] 
```
你看到第二行中，pid 为 9102，状态为 `Z+`，名字里面有个 `` 的进程了吗？那就是我们的僵尸进程。这个僵尸进程的问题在于：你无法将它杀掉！
![](/data/attachment/album/201610/09/144242rnzg3zh0d1qmnm0h.png)
就算你尝试使用 `kill -9` 来杀死僵尸进程，它们仍旧会存活。自己试试看，看看结果。
这个僵尸到底是什么，为什么我们的服务器会造出它们呢？一个 僵尸进程   （    zombie    ） 是一个已经结束的进程，但它的父进程并没有等待（`waited`）它结束，并且也没有收到它的终结状态。如果一个进程在父进程退出之前退出，系统内核会把它变为一个僵尸进程，存储它的部分信息，以便父进程读取。内核保存的进程信息通常包括进程 ID、进程终止状态，以及进程的资源占用情况。OK，所以僵尸进程确实有存在的意义，但如果服务器不管这些僵尸进程，你的系统将会被壅塞。我们来看看这个会如何发生。首先，关闭你运行的服务器；然后，在一个新的终端窗口中，使用 `ulimit` 命令将最大用户进程数设为 400（同时，要确保你的最大可用描述符数大于这个数字，我们在这里设为 500）：
```
$ ulimit -u 400
$ ulimit -n 500
```
在你刚刚运行 `ulimit -u 400` 命令的终端中，运行服务器 `webserver3d.py`：
```
$ python webserver3d.py
```
在一个新的终端窗口中，运行 `client3.py`，并且让它与服务器同时创建 500 个连接：
```
$ python client3.py --max-clients=500
```
然后，过一会，你的服务器进程应该会再次爆了，它会在创建新进程时抛出一个 `OSError: 资源暂时不可用` 的异常。但它并没有达到系统允许的最大进程数。这是我的环境中输出的异常信息截图：
![](/data/attachment/album/201610/09/144242xwf457nwft574404.png)
你可以看到，如果服务器不管僵尸进程，它们会引发问题。接下来我会简单探讨一下僵尸进程问题的解决方案。
我们来回顾一下你刚刚掌握的知识点：
![](/data/attachment/album/201610/09/144233qv878ax8rlkb3sso.png)
* 如果你不关闭文件描述符副本，客户端就不会在请求处理完成后终止，因为客户端连接没有被关闭；
* 如果你不关闭文件描述符副本，长久运行的服务器最终会把可用的文件描述符（最大文件打开数）消耗殆尽；
* 当你创建一个新进程，而父进程不等待（`wait`）子进程，也不在子进程结束后收集它的终止状态，它会变为一个僵尸进程；
* 僵尸通常都会吃东西，在我们的例子中，僵尸进程会吃掉资源。如果你的服务器不管僵尸进程，它最终会消耗掉所有的可用进程（最大用户进程数）；
* 你不能杀死（`kill`）僵尸进程，你需要等待（`wait`）它。
### 如何处理僵尸进程？
所以，你需要做什么来处理僵尸进程呢？你需要修改你的服务器代码，来等待（`wait`）僵尸进程，并收集它们的终止信息。你可以在代码中使用系统调用 `wait` 来完成这个任务。不幸的是，这个方法离理想目标还很远，因为在没有终止的子进程存在的情况下调用 `wait` 会导致服务器进程阻塞，这会阻碍你的服务器处理新的客户端连接请求。那么，我们有其他选择吗？嗯，有的，其中一个解决方案需要结合信号处理以及 `wait` 系统调用。
![](/data/attachment/album/201610/09/144243orgiz9gzzotl1fo7.png)
这是它的工作流程。当一个子进程退出时，内核会发送 `SIGCHLD` 信号。父进程可以设置一个信号处理器，它可以异步响应 `SIGCHLD` 信号，并在信号响应函数中等待（`wait`）子进程收集终止信息，从而阻止了僵尸进程的存在。
![](/data/attachment/album/201610/09/144244n844sw233eab5s58.png)
顺便说一下，异步事件意味着父进程无法提前知道事件的发生时间。
修改你的服务器代码，设置一个 `SIGCHLD` 信号处理器，在信号处理器中等待（`wait`）终止的子进程。修改后的代码如下（[webserver3e.py](https://github.com/rspivak/lsbaws/blob/master/part3/webserver3e.py)）：
```
#######################################################
# 并发服务器 - webserver3e.py                          #
#                                                     #
# 使用 Python 2.7.9 或 3.4                             #
# 在 Ubuntu 14.04 及 Mac OS X 环境下测试通过            #
#######################################################
import os
import signal
import socket
import time
SERVER_ADDRESS = (HOST, PORT) = '', 8888
REQUEST_QUEUE_SIZE = 5
def grim_reaper(signum, frame):
    pid, status = os.wait()
    print(
        'Child {pid} terminated with status {status}'
        '\n'.format(pid=pid, status=status)
    )
def handle_request(client_connection):
    request = client_connection.recv(1024)
    print(request.decode())
    http_response = b"""\
HTTP/1.1 200 OK
Hello, World!
"""
    client_connection.sendall(http_response)
    ### 挂起进程，来允许父进程完成循环，并在 "accept" 处阻塞
    time.sleep(3)
def serve_forever():
    listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listen_socket.bind(SERVER_ADDRESS)
    listen_socket.listen(REQUEST_QUEUE_SIZE)
    print('Serving HTTP on port {port} ...'.format(port=PORT))
    signal.signal(signal.SIGCHLD, grim_reaper)
    while True:
        client_connection, client_address = listen_socket.accept()
        pid = os.fork()
        if pid == 0:  ### 子进程
            listen_socket.close()  ### 关闭子进程中多余的套接字
            handle_request(client_connection)
            client_connection.close()
            os._exit(0)
        else:  ### 父进程
            client_connection.close()
if __name__ == '__main__':
    serve_forever()
```
运行服务器：
```
$ python webserver3e.py
```
使用你的老朋友——`curl` 命令来向修改后的并发服务器发送一个请求：
```
$ curl http://localhost:8888/hello
```
再来看看服务器：
![](/data/attachment/album/201610/09/144245lantztjl3tlalitl.png)
刚刚发生了什么？`accept` 调用失败了，错误信息为 `EINTR`。
![](/data/attachment/album/201610/09/144246txay743rab5zura7.png)
当子进程退出并触发 `SIGCHLD` 事件时，父进程的 `accept` 调用被阻塞了，系统转去运行信号处理器，当信号处理函数完成时，`accept` 系统调用被打断：
![](/data/attachment/album/201610/09/144246fea64024jb14hda1.png)
别担心，这个问题很好解决。你只需要重新运行 `accept` 系统调用即可。这是修改后的服务器代码 [webserver3f.py](https://github.com/rspivak/lsbaws/blob/master/part3/webserver3f.py)，它可以解决这个问题：
```
#######################################################
# 并发服务器 - webserver3f.py                          #
#                                                     #
# 使用 Python 2.7.9 或 3.4                             #
# 在 Ubuntu 14.04 及 Mac OS X 环境下测试通过            #
#######################################################
import errno
import os
import signal
import socket
SERVER_ADDRESS = (HOST, PORT) = '', 8888
REQUEST_QUEUE_SIZE = 1024
def grim_reaper(signum, frame):
    pid, status = os.wait()