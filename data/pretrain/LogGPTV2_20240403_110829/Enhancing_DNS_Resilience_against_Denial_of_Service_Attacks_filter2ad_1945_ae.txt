### Trace 5
-1.494  
48.408  
76.257  
548.210  
554.362  
-10.313  
-5.436  

### Table 2: Message Overhead

| i | e | z | S | y | r | o | m | e | M | s | e | n | o | z | d | e | h | c | a | c | f | o | # |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| i | e | z | S | y | r | o | m | e | M | s | d | r | o | c | e | r | d | e | h | c | a | c | f | o | # |

- 50,000
- 40,000
- 30,000
- 20,000
- 10,000
- 0

#### DNS Policies:
- DNS
- LRU5
- LFU5
- A-LRU5
- A-LFU5
- Long-TTL
- Combination

- 5
- 10
- 15
- 20
- 25
- 30
- 35
- 40
- 45

- 50,000
- 40,000
- 30,000
- 20,000
- 10,000
- 0

- 5
- 10
- 15
- 20
- 25
- 30
- 35
- 40
- 45

**Time (days)**

### Figure 12: Memory Overhead

The current DNS system is analyzed in terms of the number of generated messages. Negative values indicate a reduction in the number of generated messages.

The table indicates that adaptive schemes, such as A-LRU5 and A-LFU5, incur significant overhead, leading to an increase in DNS traffic by up to five times in the worst case. This is due to the large number of zones with very small TTL values (in the order of minutes), resulting in frequent re-fetch requests. In contrast, non-adaptive renewal policies, such as LRU5 and LFU5, have a much smaller cost, increasing the number of generated messages by at most 76%. Given that DNS traffic is a negligible portion of overall Internet traffic, this increase is not considered significant. The refresh and long-TTL schemes, with a TTL set to 7 days, lead to a decrease in DNS-related generated traffic. Additionally, the combined scheme of long-TTL with a value of three days and the (cid:12) (cid:11) (cid:2) policy also results in a reduction in generated messages. This hybrid scheme achieves the resiliency of the most effective adaptive policy without incurring high message overhead.

### 5.2.2 Memory Overhead

The proposed modifications increase the memory requirements of the (cid:7)(cid:6)s, as they require caching (cid:0)(cid:0)s for longer periods. However, the total number of zones appearing in a one-week period is in the order of tens to hundreds of thousands. Thus, the additional memory requirements for storing these (cid:0)(cid:0)s are, in the worst case, in the order of tens of Mbytes. Figure 12 shows the number of zones and records cached at any given point in time for a one-month-long DNS trace (TRC6). It also compares these numbers with the number of zones and records cached using the proposed schemes. The additional memory overhead is not a significant issue for current systems, as the proposed caching schemes increase the number of cached objects by two to three times. Similar memory overheads were observed in other traces.

### 6. Discussion

In this section, we elaborate on three points related to our proposed solutions that deserve additional attention.

#### Deployment Issues

Two practical issues may arise when deploying the proposed modifications. The first is compatibility with DNS security extensions (DNSSEC). DNSSEC introduces new records for authentication, some of which can be classified as new infrastructure resource records. Under a DNSSEC deployment, the refresh, renewal, and long-TTL techniques must be extended to accommodate these new (cid:0)(cid:0)s. The second issue is the ability of parent zones to reclaim delegations. Currently, this happens automatically whenever a caching server receives a referral from the parent zone. The parent zone can point to a new set of servers if the ownership of the zone changes or inform the caching server that the zone no longer exists. Since the goal of our techniques is to reduce the number of these referrals, caching servers may continue querying the old zone if it still functions as before. A non-cooperative owner can potentially maintain ownership for longer periods by not updating the name-servers with the new set of nameservers. This issue can be resolved through legal means or by forcing caching servers to periodically query the parent zone (e.g., every 7 days).

Additionally, current caching servers do not accept arbitrary large TTL values (more than 7 days). This ensures that any new delegation can appear at the caching servers within 7 days in the worst case, even if the old owner is non-cooperative.

#### Maximum Damage Attack

In the evaluation section, we considered an attack against the root zone and all top-level domains. While this attack is not necessarily the one that can cause the maximum damage, it is close to the maximum. We define the maximum damage attack as the one that maximizes the total number of failed queries across all caching servers (or stub-resolvers) for a given budget of attacked zones. Identifying the maximum damage attack is not practically feasible because it requires traffic patterns from all stub-resolvers. Furthermore, the result is highly time-dependent, meaning that the targets vary based on the starting time and duration of the attack. Even when considering the traffic pattern from only one caching server, identifying the maximum damage attack is not straightforward. One approach is to count the number of upcoming queries and identify the zone whose children have the maximum number of upcoming queries. However, failures can occur at any descendant zone, making it insufficient to count failures only at the children. Failures start at a time that depends on the zones' (cid:0)(cid:0) TTL value and the time the failure started at the parent zone. Modeling these cascading failures is difficult with known optimization techniques, such as linear or dynamic programming.

#### Other Types of Attacks

This paper considers DDoS attacks aimed at disabling the resolution of all descendant zones of the targeted zone. There are two other broad classes of attacks. The first aims to disable the name resolution of names belonging to the target zone, thereby disabling all services provided by the servers hosted at the targeted zone. This type of attack can be defended against by adding more name-servers, as name-servers provide a stateless service (using UDP) and are harder to overload compared to stateful services (using TCP). The second class of attacks targets caching servers, but their damage is locally limited. Configuring stub-resolvers with multiple caching servers or using more sophisticated peer-to-peer approaches can address this type of attack.

### 7. Related Work

We classify the related work into three broader areas. The first two are closer to our work, while the third relates more to DNS performance issues.

#### DNS Hardening

In recent years, several proposals have been made to harden the DNS against DDoS attacks. Yang et al. [21] proposed augmenting the DNS structure with additional pointers stored at sibling zones and randomly distributed to prevent attackers from identifying them. Handley et al. [12] proposed globally replicating infrastructure records at every caching server using a peer-to-peer system. Both approaches assume that DNS operators are cooperative, which may not be practical in an economically competitive environment. Parka et al. [19] proposed adding a lookup peer-to-peer service between stub-resolvers and caching servers to defend against DDoS attacks targeting caching servers. However, it cannot enhance DNS resilience against attacks targeting name-servers. Ballani et al. [8] proposed utilizing expired records, where caching servers never discard records and use them if they cannot retrieve them from name-servers. Unfortunately, this proposal violates the semantics of record expiration as defined for DNS, which may hinder its adoption.

#### DNS Redesign

Apart from hardening the current system, there have been proposals to redesign the DNS. Cox et al. [10] proposed replacing the DNS infrastructure with a peer-to-peer infrastructure implemented on top of a distributed hash table. This approach makes all servers equally important, diminishing the impact of DDoS attacks. However, the performance of such a peer-to-peer system, measured by query response time, was worse than that of the DNS. Ramasubramanian et al. [20] improved the performance by replicating the most popular records across the peer-to-peer system. Deegan et al. [11] proposed replacing the DNS with a centralized system, arguing that it could improve resilience to configuration errors and sustain DDoS attacks. These approaches require a complete overhaul of the DNS structure, making the concept of zones relevant only at the namespace level. Such radical changes may delay the adoption of these proposals.

#### DNS Performance

Kangasharju et al. [15] proposed replacing the DNS with a globally replicated database to improve the response time of DNS queries. Cohen et al. [9] proposed proactive caching to address the same performance problem. Both schemes can potentially improve the resilience of the DNS against DDoS attacks, although they are not designed for that purpose and are not optimized for such tasks. For instance, both schemes deal with end-host records, while we argue that utilizing only infrastructure resource records is more appropriate.

### 8. Conclusion

Mockapetris [16], the original DNS designer, pointed out that "The administrator defines TTL values for each RR as part of the zone definition; a low TTL is desirable in that it minimizes periods of transient inconsistency, while a high TTL minimizes traffic and allows caching to mask periods of server unavailability due to network or host problems."

Considering that DDoS attacks are one of the means leading to DNS server unavailability, our work demonstrates the effectiveness of using longer TTL values in enhancing DNS resilience. We also proposed simple record renewal policies to be used in conjunction with a long TTL value, resulting in an improvement in availability by up to one order of magnitude. Our results can be generalized to any hierarchical system that utilizes caching, debunking the belief that hierarchical systems cannot provide the same level of resilience against DDoS attacks as flat peer-to-peer systems.

### References

[1] Events of 21-Oct-2002. http://d.root-servers.org/october21.txt, 2002.
[2] Nameserver DoS Attack October 2002. http://www.caida.org/projects/dns-analysis/, 2002.
[3] UltraDNS DOS Attack. http://www.theregister.co.uk/2002/12/14/, 2002.
[4] DNS FAQ. http://www.cs.cornell.edu/People/egs/beehive/faq.html, 2004.
[5] DoS Attack against Akamai. http://news.com.com/2100-1038_3-5236403.html/, 2004.
[6] Million-PC botnet threatens consumers. http://www.infomaticsonline.co.uk/vnunet/news/2167474/million-pc-botnet-threatens, 2006.
[7] ICANN Factsheet for the February 6, 2007 Root Server Attack. http://www.icann.org/announcements/factsheet-dns-attack-08mar07.pdf, 2007.
[8] H. Ballani and P. Francis. A Simple Approach to DNS DoS Defense. In Proceedings of HotNets, 2006.
[9] E. Cohen and H. Kaplan. Proactive Caching of DNS Records: Addressing a Performance Bottleneck. In Proceedings of SAINT, pages 85–94, 2001.
[10] R. Cox, A. Muthitacharoen, and R. Morris. Serving DNS Using a Peer-to-Peer Lookup Service. In Proceedings of IPTPS, pages 155–165, 2002.
[11] T. Deegan, J. Crowcroft, and A. Warfield. The Main Name System: An exercise in centralized computing. In Proceedings of CCR, pages 5–13, 2005.
[12] M. Handley and A. Greenhalgh. The Case for Pushing DNS. In Proceedings of HotNets, 2005.
[13] T. Hardie. Clarifications to the DNS Specification. RFC 2181, 1997.
[14] T. Hardie. Distributing Authoritative Name Servers via Shared Unicast Addresses. RFC 3258, 2002.
[15] J. Kangasharju and K. Ross. A Replicated Architecture for the Domain Name System. In Proceedings of INFOCOM, pages 660–669, 2000.
[16] P. Mockapetris and K. J. Dunlap. Development of the Domain Name System. SIGCOMM CCR, pages 123–133, 1988.
[17] V. Pappas, Z. Xu, S. Lu, D. Massey, A. Terzis, and L. Zhang. Impact of Configuration Errors on DNS Robustness. In Proceedings of SIGCOMM, pages 319–330, 2004.
[18] V. Pappas, B. Zhang, E. Osterweil, D. Massey, and L. Zhang. Improving DNS Service Availability by Using Long TTL Values. Internet Draft, 2006.
[19] K. Parka, V. Pai, L. Peterson, and Z. Wang. CoDNS: Improving DNS Performance and Reliability via Cooperative Lookups. In Proceedings of OSDI, 2004.
[20] V. Ramasubramanian and E. Sirer. The Design and Implementation of a Next Generation Name Service for the Internet. In Proceedings of SIGCOMM, pages 331–342, 2004.
[21] H. Yang, H. Luo, Y. Yang, S. Lu, and L. Zhang. HOURS: Achieving DoS Resilience in an Open Service Hierarchy. In Proceedings of DSN, pages 83–93, 2004.

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.