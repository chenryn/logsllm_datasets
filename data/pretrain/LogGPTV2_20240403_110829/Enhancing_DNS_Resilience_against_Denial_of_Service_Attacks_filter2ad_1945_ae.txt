Trace 5
-1.494
48.408
76.257
548.210
554.362
-10.313
-5.436
Table 2. Message Overhead
i
e
z
S
y
r
o
m
e
M
s
e
n
o
z
d
e
h
c
a
c
f
o
#
i
e
z
S
y
r
o
m
e
M
s
d
r
o
c
e
r
d
e
h
c
a
c
f
o
#
 50000
 40000
 30000
 20000
 10000
 0
 0
DNS
LRU5
LFU5
A-LRU5
A-LFU5
Long-TTL
Combination
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50000
 40000
 30000
 20000
 10000
 0
 0
 5
 10
 15
 20
 25
Time (days)
 30
 35
 40
 45
Figure 12. Memory Overhead
rent DNS. Negative values indicate a decrease in the num-
ber of generated messages.
The table shows that the adaptive schemes incur a sig-
niﬁcant overhead, which leads in increasing the DNS traf-
ﬁc by ﬁve times in the worst case. That is due to the fact
that there is a large number of zones that have very small
TTL values (in the order of minutes) which leads to a very
large number of re-fetch requests. On the other hand, the
non-adaptive renewal policies come with a much smaller
cost. They increase the number of generated messages by
at most 76%. Given that the DNS trafﬁc is a negligible
portion of the overall Internet trafﬁc, we believe that this in-
crease is not signiﬁcant. More importantly, the table shows
that the refresh and the long-TTL schemes, with TTL set
to 7 days, lead to a decrease in the DNS related generated
trafﬁc. Furthermore, the combined scheme of long-TTL
with a value of three days and the (cid:12) (cid:11) (cid:2) policy leads also
to a reduction in the generated messages. This in a very
promising results given that the hybrid scheme can achieve
the resiliency of the most effective adaptive policy, without
incurring the high message overhead.
5.2.2 Memory Overhead
The three proposed modiﬁcations increase the memory re-
quirements of the (cid:7)(cid:6)s, given that they require the caching
of (cid:0)(cid:0)s for longer periods of time. On the other hand,
as it is shown in Table 1 the total number of zones that
appear in a period of one week is in the order of tens to
hundreds of thousands. Thus, the additional memory re-
quirements for storing all these (cid:0)(cid:0)s are in the worst case
in the order of tens of Mbytes. Figure 12 shows the num-
ber of zones and records cached for any given point of time
for the one month long DNS trace (TRC6). It also com-
pares these numbers with the number of zones and records
cached when using the proposed schemes. Clearly, the ad-
ditional memory overhead is not an issue for the current
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007systems, given that the proposed caching schemes increase
the number of cached objects by two to three times. Note
that all other traces showed similar memory overhead.
6 Discussion
In this section we elaborate more on three point that
relate to our proposed solutions and that deserve an addi-
tional attention.
Deployment Issues Notably there are two practical is-
sues that may arise when deploying our proposed modiﬁ-
cations. A ﬁrst issue is their compatibility with the DNS
security extensions. The DNSSEC introduces a number
of new records for authentication. Some of them can be
classiﬁed as new infrastructure resource records (see [18]
for more details). Thus under a DNSSEC deployment we
extend the refresh, renewal and long-TTL techniques to
accommodate these new (cid:0)(cid:0)s. A second practical issue
is the ability of parent zones to reclaim delegations. Cur-
rently, this happens automatically every time that a caching
server gets a referral from the parent zone. The parent zone
can point to a new set of servers in the case that the own-
ership of the zone changes, or it can inform the caching
server that the zone does not exist anymore. Given that the
goal of our techniques is to reduce the number of these re-
ferrals, caching servers may still continue querying to the
old zone, as far as the old zone still functions as before.
In other words, a non-cooperative owner can potentially
maintain the ownership for longer periods of time by not
updating the name-servers with the new set of nameservers.
Apart from resolving this issue with non-technical means
(i.e. legally), we can solve it by forcing the caching servers
to periodically query the parent zone (for example every
7 days).
In addition, current caching servers do not ac-
cept arbitrary large TTL values (more that 7 days). In this
way, any new delegation can appear at the caching servers
within 7 days in the worst case, i.e. when the old owner is
non-cooperative.
Maximum Damage Attack In the evaluation section we
considered only one case of attack, that is an attack against
the root zone and all the top level domains. This attack is
not necessarily the one that can cause the maximum dam-
age (thought, we believe that is close tho the maximum
one). We deﬁne the maximum damage attack as the one
that maximizes the total number of failed queries across
all caching servers (or stub-resolvers), for a given budget
of attacked zones. Clearly, identifying the maximum dam-
age attack is not practically feasible because it requires the
trafﬁc patterns from all stub-resolvers. Furthermore, the re-
sult is highly time dependent, meaning that the targets are
not the same for different attack starting times, or for dif-
ferent attack durations. Even when considering the trafﬁc
pattern from only one caching server, the identiﬁcation of
the maximum damage attack is not straightforward. One
approach is to count the number of upcoming queries, and
then identify the zone whose children have the maximum
number of upcoming queries. The problem with this ap-
proach is that failures can happen at any of the descendant
zones, and thus it is not enough to count failures only at the
children. Furthermore, failures start at a time that depends
on the zones (cid:0)(cid:0) TTL value as well as the time that the
failure started at the parent zone. These events of cascad-
ing failures are difﬁcult to model with known optimization
techniques, such as linear or dynamic programming.
Other Types of Attacks
In this paper we consider only
one class of DDoS attack against the DNS, that is attacks
that aim at disabling the resolution of all the descendant
zones of the targeted zone. Notably, there are two other
broad classes of attacks. First, attacks that aim at disabling
the name resolution of the names that belong to the tar-
get zone. The goal in this attack is to disable all the ser-
vices that are provided by the servers "hosted" at the tar-
geted zone. We believe that this type of attack is defensi-
ble by adding more name-servers. Name-servers provide a
stateless service (they use UDP) and thus it is much harder
to overload them compared to overloading the services it-
self. The reason is that the most popular services are state-
full, e.g. they use TCP, and thus if a DDoS attack has the
ability to disable the name-servers of a zone, then it has
also the ability to disable a service directly (while the re-
verse is not always true). The second class of attacks that
we don’t consider are attacks against the caching servers.
These attacks are possible, but their damage is locally lim-
ited. Furthermore, the simple approach of conﬁguring the
stub-resolvers with many caching servers or more sophisti-
cated peer-to-peer approaches [19] can address this type of
attacks.
7 Related Work
He have classiﬁed the related work in three broader ar-
eas. The ﬁrst two are closer to our work while the third one
relates more to the DNS performance issues.
DNS Hardening In recent years there has been a num-
ber of proposal for hardening the DNS against DDoS at-
tacks. Yang etal [21] have proposed to augment the DNS
structure with additional pointers, that are used in order to
access children zones. The pointers are stored at sibling
zones and are randomly distributed across zones so as an
attacker cannot identify them. Handley etal [12] have pro-
posed to globally replicate the infrastructure records at ev-
ery caching server by utilizing a peer-to-peer system. Both
approaches assume that DNS operators are cooperative,
which may not be practical given the economically com-
petitive environment between them. Parka et al [19] have
proposed to add a lookup peer-to-peer service between the
stub-resolvers and the caching servers. This service can
be used in order to defend against DDoS attack that tar-
get caching servers. On the other hand, it cannot enhance
the DNS resilience against DDoS attack that target name-
servers. Recently, Ballani etal [8] have proposed to utilize
expired records. Caching servers never discard records,
even if they have expired, and thus they can utilize them
in the case that they cannot retrieve them from the name-
servers. Unfortunately, this proposal violates the semantics
of record expiration as deﬁned for DNS, which may hinder
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007its adoption.
DNS Redesign Apart from hardening the current system
there has been a number of proposals on redesigning the
DNS. Cox etal [10] have proposed to replace the DNS in-
frastructure with a peer-to-peer infrastructure implemented
on top of a distributed hash table. One beneﬁt of this ap-
proach is that all servers become equally important and
thus mounting a DDoS against the system has diminish-
ing results. The same study showed that the performance
of such a peer-to-peer system, measured by the query re-
sponse time, was worse than the performance of the DNS,
and concluded that such as system may not be a good can-
didate for replacing the DNS. In a followup study, Ra-
masubramanian et al [20] improved the performance of
the lookup service by replicating the most popular records
across the peer-to-peer system. Following an opposite di-
rection, Deegan et al [11] proposed to replace the DNS
with a centralized system. While their objective was to im-
prove many aspects of the system, such as its resilience
to conﬁguration errors [17], they argued that a centralized
system could also sustain a DDoS attack. All these ap-
proaches of redesigning the DNS require a complete over-
haul of the DNS structure. The concept of zones becomes
relevant only at the name-space level, given that zone op-
erators lose the ability to administer name-servers. We be-
lieve that these type of radical changes can delay the adop-
tion of those proposals.
DNS Performance Kangasharju etal [15] have proposed
to replace the DNS with a globally replicated database,
with the goal of improving the response time of DNS
queries. Cohen et al [9] proposed the use of proactive
caching in order to address the same performance problem.
It is interesting to note that both schemes can potentially
improve the resilience of the DNS against DDoS attacks.
On the other hand they are not designed for that purpose
and thus they are not optimized for such a task. For in-
stance both schemes deal with end-host records, while, as
we argue in this paper, utilizing only infrastructure resource
records is more appropriate.
8 Conclusion
Mockapetris [16], the original DNS designer, pointed
out that “The administrator deﬁnes TTL values for each
RRaspartofthezonedeﬁnition;alowTTLisdesirablein
thatitminimizesperiodsoftransientinconsistency,whilea
highTTLminimizestrafﬁcandallowscachingtomaskpe-
riodsofserverunavailabilityduetonetworkorhostprob-
lems”.
Considering DDoS attacks are simply one of the means
leading to DNS server unavailability, our work reported in
this paper is a realization of the above suggestion. We
demonstrated not only the effectiveness of using longer
TTL value in enhancing DNS resilience, but we also pro-
posed some simple record renewal policies to be used in
conjunction with a long TTL value, with a combined re-
sults of improving the availability by up to one order of
magnitude. Our results can be easily generalized to any hi-
erarchical system [21] that utilizes caching and we debunk
the belief that hierarchical systems cannot provide the same
level of resilience against DDoS attacks as ﬂat peer-to-peer
systems.
References
[1] Events of 21-Oct-2002.
http://d.root-servers.org/october21.txt,
2002.
[2] Nameserver
DoS
Attack
October
2002.
http://www.caida.org/projects/dns-analysis/, 2002.
[3] UltraDNS DOS Attack. http://www.theregister.co.uk/2002/12/14/,
2002.
[4] DNS FAQ. http://www.cs.cornell.edu/People/egs/beehive/faq.html,
2004.
[5] DoS Attack against Akamai. http://news.com.com/2100-1038_3-
5236403.html/, 2004.
[6] Million-PC
botnet
consumers.
http://www.infomaticsonline.co.uk/ vnunet/news/2167474/million-
pc-botnet-threatens, 2006.
threatens
[7] ICANN Factsheet for the February 6, 2007 Root Server At-
http://www.icann.org/announcements/factsheet-dns-attack-
tack.
08mar07.pdf, 2007.
[8] H. Ballani and P. Francis. A Simple Approach to DNS DoS Defense.
In Proceedings of HotNets, 2006.
[9] E. Cohen and H. Kaplan. Proactive Caching of DNS Records: Ad-
dressing a Performance Bottleneck. In Proceedings of SAINT, pages
85–94, 2001.
[10] R. Cox, A. Muthitacharoen, and R. Morris. Serving DNS Using a
Peer-to-Peer Lookup Service. In Proceedings of IPTPS, pages 155–
165, 2002.
[11] T. Deegan, J. Crowcroft, and A. Warﬁeld. The Main Name System:
An exercise in centralized computing. In Proceedings of CCR, pages
5–13, 2005.
[12] M. Handley and A. Greenhalgh. The Case for Pushing DNS.
In
Proceedings of HotNets, 2005.
[13] T. Hardie. Clariﬁcations to the DNS Speciﬁcation. RFC 2181, 1997.
[14] T. Hardie. Distributing Authoritative Name Servers via Shared Uni-
cast Addresses. RFC 3258, 2002.
[15] J. Kangasharju and K. Ross. A Replicated Architecture for the Do-
main Name System. In Proceedings of INFOCOM, pages 660–669,
2000.
[16] P. Mockapetris and K. J. Dunlap. Development of the Domain Name
System. SIGCOMM CCR, pages 123–133, 1988.
[17] V. Pappas, Z. Xu, S. Lu, D. Massey, A. Terzis, and L. Zhang. Im-
pact of Conﬁguration Errors on DNS Robustness. In Proceedings of
SIGCOMM, pages 319–330, 2004.
[18] V. Pappas, B. Zhang, E. Osterweil, D. Massey, and L. Zhang. Im-
proving DNS Service Availability by Using Long TTL Values. In-
ternet Draft, 2006.
[19] K. Parka, V. Pai, L. Peterson, and Z. Wang. CoDNS: Improving
DNS Performance and Reliability via Cooperative Lookups. In Pro-
ceedings of OSDI, 2004.
[20] V. Ramasubramanian and E. Sirer. The Design and Implementation
of a Next Generation Name Service for the Internet. In Proceedings
of SIGCOMM, pages 331–342, 2004.
[21] H. Yang, H. Luo, Y. Yang, S. Lu, and L. Zhang. HOURS: Achieving
In Proceedings of
DoS Resilience in an Open Service Hierarchy.
DSN, pages 83–93, 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007