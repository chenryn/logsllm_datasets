monotonic state interfaces and stable predicates for efﬁcient
modeling of states. RollSec [22] is a prototype framework for
extracting variable based program states using program syn-
tax, control ﬂow and data ﬂow information. It requires mon-
itoring, recording and compensation modules to identify and
In this paper, we make the ﬁrst attempt towards symbolic
veriﬁcation of state continuity properties for enclave programs.
We show that SGX-speciﬁc semantics and operations can be
modeled as multiset re-writing rules and the state continuity
property can be reasoned using the Tamarin Prover. We have
shown the effectiveness of the method on three types of state
continuity ﬂaws in three open-source projects. Our study
shows the great potential of symbolic veriﬁcation tools, such
as Tamarin Prover, in more diverse and complex scenarios.
Acknowledgments
We are grateful to Cas Cremers for valuable feedback in shep-
herding our paper, as well as other reviewers for their insight-
ful comments. We also would like to thank the Tamarin com-
munity particularly Jannik Dreier, Jonathan Hoyland, Ben-
jamin Kiesl, and Kevin Milner at Google forum for providing
insight and active support of Tamarin. The authors at The
Ohio State University were partially supported by NSF grant
1834213.
USENIX Association
30th USENIX Security Symposium    587
References
[1] Hyperledger Sawtooth.
hyperledger.org/use/sawtooth.
Retrieved January 20, 2021 from https://www.
[2] Hyperledger Sawtooth-PoET patch.
2021
https://github.com/hyperledger/sawtooth-poet/commit/
Retrieved
from
6f9db4998a11b427c6a24ea42f9891cb9ff0101e.
January
12,
[3] Hyperledger Sawtooth-PoET vulnerable. Retrieved January 12, 2021 from
https://github.com/hyperledger/sawtooth-core/releases/tag/v1.0.
5, Filepath /consensus/poet/sgx/sawtooth_poet_sgx/libpoet_enclave/
poet_enclave.cpp.
[4]
Intel SGX Software Development Kit
Retrieved January 27,
2021 from https://software.intel.com/content/www/us/en/develop/
topics/software-guard-extensions/sdk.html.
(SDK).
[5] Tamarin Manual. Retrieved January 18, 2021 from https://tamarin-prover.
github.io/manual/book/001_introduction.html.
[19] Y. Chen, W. Sun, N. Zhang, Q. Zheng, W. Lou, and Y. T. Hou. Towards ef-
ﬁcient ﬁne-grained access control and trustworthy data processing for remote
monitoring services in iot. IEEE Transactions on Information Forensics and Se-
curity, 14(7):1830–1842, 2019. Github: https://github.com/fishermano/
SGXEnabledAccess.
[20] Véronique Cortier, Stéphanie Delaune, and Jannik Dreier. Automatic generation
of sources lemmas in tamarin: towards automatic proofs of security protocols. In
European Symposium on Research in Computer Security, pages 3–22. Springer,
2020.
[21] Cas Cremers, Marko Horvat, Jonathan Hoyland, Samuel Scott, and Thyla van der
Merwe. A comprehensive symbolic analysis of TLS 1.3. In ACM SIGSAC Con-
ference on Computer and Commuincations Security, pages 1773–1788. ACM,
October 2017.
[22] Weiqi Dai, Yukun Du, Hai Jin, Weizhong Qiang, Deqing Zou, Shouhuai Xu,
and Zhongze Liu. Rollsec: Automatically secure software states against general
rollback. International Journal of Parallel Programming, 46:788–805, 2017.
[6] Danel Ahman, Cédric Fournet, C˘at˘alin Hri¸tcu, Kenji Maillard, Aseem Rastogi,
and Nikhil Swamy. Recalling a witness: Foundations and applications of mono-
tonic state. Proc. ACM Program. Lang., 2, December 2017.
[23] Anupam Datta, Jason Franklin, Deepak Garg, and Dilsun Kaynar. A logic of
In 2009 30th IEEE
secure systems and its application to trusted computing.
Symposium on Security and Privacy, pages 221–236. IEEE, 2009.
[7]
Ittai Anati, Shay Gueron, Simon P Johnson, and Vincent R Scarlata. Innovative
technology for cpu based attestation and sealing. In 2nd HASP, 2013.
[8] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’Keeffe, Mark L.
Stillwell, David Goltzsche, Dave Eyers, Rüdiger Kapitza, Peter Pietzuch, and
Christof Fetzer. Scone: Secure linux containers with intel SGX. In 12th USENIX
OSDI, 2016.
[9] Guangdong Bai, Jianan Hao, Jianliang Wu, Yang Liu, Zhenkai Liang, and An-
drew Martin. Trustfound: Towards a formal foundation for model checking
trusted computing platforms. In International Symposium on Formal Methods,
pages 110–126. Springer, 2014.
[10] Manuel Barbosa, Gilles Barthe, Karthik Bhargavan, Bruno Blanchet, Cas Cre-
mers, Kevin Liao, and Bryan Parno. Sok: Computer-aided cryptography. Cryp-
tology ePrint Archive, Report 2019/1393, 2019. https://eprint.iacr.org/
2019/1393.
[11] Mike Barnett, Bor-Yuh Evan Chang, Robert DeLine, Bart Jacobs, and K Rus-
tan M Leino. Boogie: A modular reusable veriﬁer for object-oriented programs.
In International Symposium on Formal Methods for Components and Objects,
pages 364–387. Springer, 2005.
[12] David Basin, Jannik Dreier, Lucca Hirschi, Saša Radomirovic, Ralf Sasse, and
In Proceedings of
Vincent Stettler. A formal analysis of 5g authentication.
the 2018 ACM SIGSAC Conference on Computer and Communications Security,
page 1383–1396. ACM, 2018.
[13] A. Baumann, M. Peinado, and G. Hunt. Shielding applications from an untrusted
cloud with Haven. ACM Transactions on Computer Systems, 33(3), August 2015.
[14] K. Bhargavan, B. Blanchet, and N. Kobeissi. Veriﬁed models and reference im-
plementations for the TLS 1.3 standard candidate. In 2017 IEEE Symposium on
Security and Privacy, pages 483–502, Los Alamitos, CA, USA, may 2017. IEEE
Computer Society.
[15] Bruno Blanchet. Modeling and verifying security protocols with the applied pi
calculus and proverif. Foundations and Trends® in Privacy and Security, 1(1-
2):1–135, 2016.
[16] M. Brandenburger, C. Cachin, M. Lorenz, and R. Kapitza. Rollback and forking
detection for trusted execution environments using lightweight collective mem-
ory. In 2017 47th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks, pages 157–168, 2017.
[17] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and
Ten H. Lai. Stealing intel secrets from sgx enclaves via speculative execution.
In Proceedings of the 2019 IEEE European Symposium on Security and Privacy,
June 2019.
[18] Xiaoxin Chen, Tal Garﬁnkel, E. Christopher Lewis, Pratap Subrahmanyam,
Carl A. Waldspurger, Dan Boneh, Jeffrey Dwoskin, and Dan R.K. Ports. Over-
shadow: A virtualization-based approach to retroﬁtting protection in commodity
operating systems. In Proceedings of the 13th International Conference on Ar-
chitectural Support for Programming Languages and Operating Systems. ACM,
2008.
[24] Leonardo De Moura and Nikolaj Bjørner. Z3: An efﬁcient smt solver. In Inter-
national conference on Tools and Algorithms for the Construction and Analysis
of Systems, pages 337–340. Springer, 2008.
[25] Stéphanie Delaune, Steve Kremer, Mark D Ryan, and Graham Steel. A formal
analysis of authentication in the tpm. In International Workshop on Formal As-
pects in Security and Trust, pages 111–125. Springer, 2010.
[26] A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, J. Protzenko, A. Rastogi,
N. Swamy, S. Zanella-Beguelin, K. Bhargavan, J. Pan, and J. K. Zinzindohoue.
Implementing and proving the TLS 1.3 record layer. In 2017 IEEE Symposium
on Security and Privacy, pages 463–482, 2017.
[27] D. Dolev and A. Yao. On the security of public key protocols. IEEE Transactions
on Information Theory, 29(2):198–208, 1983.
[28] Tal Garﬁnkel, Ben Pfaff, Jim Chow, Mendel Rosenblum, and Dan Boneh. Terra:
A virtual machine-based platform for trusted computing. In Proceedings of the
Nineteenth ACM Symposium on Operating Systems Principles, page 193–206.
ACM, 2003.
[29] Guillaume Girol, Lucca Hirschi, R. Sasse, D. Jackson, C. Cremers, and David
Basin. A spectral analysis of noise: A comprehensive, automated, formal analysis
of difﬁe-hellman protocols. In USENIX Security Symposium, 2020.
[30] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan
Del Cuvillo. Using innovative instructions to create trustworthy software solu-
tions. HASP@ ISCA, 11(10.1145):2487726–2488370, 2013.
[31] Jonathan Hoyland. An Analysis of TLS 1.3 and its use in Composite Protocols.
PhD thesis, 2018. Royal Holloway, University of London.
[32] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter, and Emmett Witchel.
Ryoan: A distributed sandbox for untrusted computation on secret data. In 12th
USENIX OSDI, 2016.
[33] C. Jacomme, S. Kremer, and G. Scerri. Symbolic models for isolated execution
In 2017 IEEE European Symposium on Security and Privacy-,
environments.
pages 530–545, 2017.
[34] Yeongjin Jang, Jaehyuk Lee, Sangho Lee, and Taesoo Kim. Sgx-bomb: Locking
down the processor via rowhammer attack. In Proceedings of the 2nd Workshop
on System Software for Trusted Execution, pages 1–6, 2017.
[35] N. Kobeissi, K. Bhargavan, and B. Blanchet. Automated veriﬁcation for secure
messaging protocols and their implementations: A symbolic and computational
approach. In IEEE European Symposium on Security and Privacy, pages 435–
450, 2017.
[36] N. Kobeissi, G. Nicolas, and K. Bhargavan. Noise explorer: Fully automated
modeling and veriﬁcation for arbitrary noise protocols. In 2019 IEEE European
Symposium on Security and Privacy, pages 356–370, 2019.
[37] Steve Kremer and Robert Künnemann. Automated analysis of security protocols
with global state. Journal of Computer Security, 24(5):583–616, 2016.
588    30th USENIX Security Symposium
USENIX Association
[38] Sinisa Matetic, Mansoor Ahmed, Kari Kostiainen, Aritra Dhar, David Sommer,
Arthur Gervais, Ari Juels, and Srdjan Capkun. ROTE: Rollback protection for
trusted execution. In 26th USENIX Security Symposium, pages 1289–1306, Van-
couver, BC, August 2017. USENIX Association.
[39] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos Rozas, Hisham Shaﬁ,
Vedvyas Shanbhogue, and Uday Savagaonkar. Innovative instructions and soft-
ware model for isolated execution. In 2nd HASP, 2013.
[40] Simon Meier, Benedikt Schmidt, Cas Cremers, and David Basin. The tamarin
prover for the symbolic analysis of security protocols. pages 696–701, 2013.
[41] Bryan Parno, Jay Lorch, John (JD) Douceur, James Mickens, and Jonathan M.
McCune. Memoir: Practical state continuity for protected modules. In Proceed-
ings of the IEEE Symposium on Security and Privacy. IEEE, May 2011.
[42] Aoi Sakurai. BI-SGX: Secure Cloud Computation. 58th SIGBIO Bioinformatics
Study Group, Japan, 2019. Website: https://bi-sgx.net/, Github: https:
//github.com/hello31337/BI-SGX.
[43] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz,
and M. Russinovich. VC3: Trustworthy data analytics in the cloud using SGX.
In 36th IEEE Symposium on Security and Privacy, 2015.
[44] Jianxiong Shao, Yu Qin, Dengguo Feng, and Weijin Wang. Formal analysis of
enhanced authorization in the tpm 2.0. In Proceedings of the 10th ACM Sympo-
sium on Information, Computer and Communications Security, pages 273–284,
2015.
[45] Fahad Shaon, Murat Kantarcioglu, Zhiqiang Lin, and Latifur Khan. A practical
encrypted data analytic framework with trusted processors. In Proceedings of
the 24th ACM Conference on Computer and Communications Security (CCS’17),
Dallas, TX, November 2017.
[46] Rohit Sinha, Sriram Rajamani, Sanjit A. Seshia, and Kapil Vaswani. Moat: Veri-
fying conﬁdentiality of enclave programs. In The ACM Conference on Computer
and Communications Security. ACM, October 2015.
[47] Ben Smyth, Mark Ryan, and Liqun Chen. Formal analysis of anonymity in ecc-
based direct anonymous attestation schemes. In International Workshop on For-
mal Aspects in Security and Trust, pages 245–262. Springer, 2011.
[48] Dawn Xiaodong Song, Sergey Berezin, and Adrian Perrig. Athena: a novel ap-
proach to efﬁcient automatic security protocol analysis 1. Journal of Computer
Security, 9(1-2):47–74, 2001.
[49] Raoul Strackx, Bart Jacobs, and Frank Piessens.
Ice: A passive, high-speed,
state-continuity scheme. In Proceedings of the 30th Annual Computer Security
Applications Conference, page 106–115. ACM, 2014.
[50] Raoul Strackx and Frank Piessens. Ariadne: A minimal approach to state conti-
nuity. In 25th USENIX Security Symposium, 2016.
[51] Florian Tramer, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and
Elaine Shi. Sealed-glass proofs: Using transparent enclaves to prove and sell
knowledge. Cryptology ePrint Archive, Report 2016/635, 2016.
[52] Chia-Che Tsai, Donald E. Porter, and Mona Vij. Graphene-SGX: A practical
library OS for unmodiﬁed applications on SGX. In USENIX ATC, 2017.
[53] Nico Weichbrodt, Anil Kurmus, Peter Pietzuch, and Rüdiger Kapitza. Async-
shock: Exploiting synchronisation bugs in intel sgx enclaves. In Ioannis Askoxy-
lakis, Sotiris Ioannidis, Sokratis Katsikas, and Catherine Meadows, editors, Com-
puter Security – ESORICS 2016, pages 440–457, 2016.
[54] Shiwei Xu, Yizhi Zhao, Zhengwei Ren, Lingjuan Wu, Yan Tong, and Huanguo
Zhang. A symbolic model for systematically analyzing tee-based protocols. In
International Conference on Information and Communications Security, pages
126–144. Springer, 2020.
[55] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. Controlled-Channel Attacks:
Deterministic side channels for untrusted operating systems. In Proceedings of
the 2015 IEEE Symposium on Security and Privacy, pages 640–656, 2015.
[56] F. Zhang, E. Cecchetti, K. Croman, A. Juels, , and E. Shi. Town crier: An au-
thenticated data feed for smart contracts. In 23rd ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2016.
[57] J. Zhu, X. Yan, and W. Huang. A formal framework for state continuity of pro-
tected modules. In 2018 4th International Conference on Big Data Computing
and Communications, pages 114–119, 2018.
A Rule Execution Criteria
In the Tamarin proof process, only certain rules are considered
to be part of the trace. For a given target lemma, a candidate
rule is considered executable only if it satisﬁes the following
criteria:
1. The premise facts (except the built-in facts Fr and In)
of the candidate rule should be produced by other rules
and can be consumed from the current system state.
2. The variables of action-labels speciﬁed in the candidate
rule’s action part should comply with the model’s restric-
tion axioms and the target lemma’s variable constraints.
3. The execution of the rule should respect the type restric-
tion (§2.2.4) constraint for all the variables preﬁxed with
‘~’ symbol. However, this restriction is nulliﬁed if the
variables are part of a persistent fact.
4. Variables with the same name across all received facts of
a rule should receive the same value (pattern matching).
5. The order of the candidate rule’s execution, for time-
points of all action-labels of the candidate rule, should
satisfy the timepoint constraints speciﬁed in model’s
restriction axioms and the target property.
6. If the candidate rule execution is part of the target lemma,
which is inﬂuenced by a helper lemma (§2.2.5), the rule
execution should satisfy the helper lemma’s constraints.
The rules satisfying above conditions can be executed in
parallel. Upon execution of a rule, the consumed linear facts
are removed from the system state and the produced facts are
added to the system state. During the veriﬁcation process, the
backward search algorithm ensures that a valid rule execution
trace satisfy the above mentioned criteria and the trace main-
tains a consistent system state when looking at the top-down
execution of the model.
B Tamarin Sawtooth attack trace
Figure 6 shows a Sawtooth attack (§5.1.3) produced by
Tamarin in interactive GUI mode. In the trace, ovals denote
adversary actions; rectangle boxes denote model rules;
bold and gray arrows denote fact dependency for linear and
persistent respectively; dotted, red and black arrows show
adversary message reuse, message deductions and public
channel interaction.
The attack can be seen at the last two CWC rule instances
of enclave-process instances p_id and p_id.1. In these rules,
the certiﬁcate is generated with the same MC_ref value (sym-
bolically denoted as ‘1’+‘1’) in the same platform with iden-
tity instance platform.
USENIX Association
30th USENIX Security Symposium    589
Figure 6: Tamarin produced attack trace for Sawtooth
590    30th USENIX Security Symposium
USENIX Association
Signup & Association Network FormationMonotonic counterEcall CreateWaitTimer (CWT)Ecall CreateWaitCertificate (CWC)process p_idprocess p_id.1p_id rule CWC1p_id rule CWC2p_id.1 rule CWC1p_id.1 rule CWC2Duplicate Cert AttackSign-up Phaseand Association Network Formationecall CWT