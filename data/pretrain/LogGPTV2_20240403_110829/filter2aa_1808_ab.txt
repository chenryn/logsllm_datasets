•
We can try calling rule option matching functions directly, 
but need internal structures first properly initialized.
•
Use dummy Rule struct and ruleMatch():
 ENGINE_LINKAGE int ruleMatch(void *p, Rule *rule);
•
RegisterOneRule(&rule, DONT_REGISTER_RULE);
•
Confusing, huh?
•
RegisterOneRule will setup Aho-Corasick and internal ptrs
•
But we don't always want to register the rules as an OTN
•
So, pass in DONT_REGISTER_RULE.  See?
Snort Plug-in API
Using Rules Within a Dynamic Preprocessor
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Available under:
 http://www.secureworks.com/research/tools/snort-
plugins.html
•
Released under GPLv2 (or later)
•
No Support
•
No Warranty
•
Use at Your Own Risk
•
Feedback is appreciated!
SecureWorks Snort Plug-ins
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Inspects web traffic for scripting instantiating "vulnerable" 
ActiveX controls
 As based on public vulnerability disclosures
•
Preprocessor configuration points to local DB of ActiveX 
controls
 Listed by CLSID and optionally method/property
 XML format (I know, I know…)
•
Looks at traffic being returned from HTTP servers
 ActiveX instantiation and Class ID
 Access to ActiveX control's methods / properties
ActiveX Detection Dynamic Preprocessor
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Can presently be bypassed
 JavaScript obfuscation
 HTTP encodings
 But many attackers still using plain CLSID!
•
Future Snort Inline support
 Drop or TCP RST the HTTP response
•
Leveraging of normalization done by HTTP Inspect
•
Enhance to use Unified2 extra data to log detected domain 
name
ActiveX Detection Dynamic Preprocessor
Continued
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Uses matchRule(Rule*) from Snort Plug-in API
 Very convenient
 Not the most efficient
•
Performs naïve linear search of CLSIDs
 Enhance to reuse HTTP Inspect's high-performance 
data-structures?
•
Uses Snort's flow match
•
Performs content matching and PCRE matching
ActiveX Detection Dynamic Preprocessor
Internals
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Live Demo
ActiveX Detection Dynamic Preprocessor
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Lack of sufficient entropy in PRNG delivered by Debian's 
OpenSSL package
•
Go see Luciano Bello and Maximiliano Bertacchini's talk!
 Saturday, 13:00 – 13:50, Track 4
•
One of the coolest vulns of 2008!
 Pwnie for Mass 0wnage!
•
Keys generated since 2006-09-17
•
Keys generated with Debian Etch, Lenny or Sid
 Downstream distros such as Ubuntu also vulnerable
Debian OpenSSL Predictable PRNG Vuln
CVE-2008-0166
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Debian OpenSSL Predictable PRNG Vuln
Dilbert (source: H D Moore, metasploit.com)
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Debian OpenSSL Predictable PRNG Vuln
XKCD (source: H D Moore, metasploit.com)
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
From the Debian Wiki (http://wiki.debian.org/SSLkeys):
•
"… any DSA key must be considered compromised if it has 
been used on a machine with a ‘bad’ OpenSSL. Simply 
using a ‘strong’ DSA key (i.e., generated with a ‘good’ 
OpenSSL) to make a connection from such a machine may 
have compromised it. This is due to an ‘attack’ on DSA that 
allows the secret key to be found it the nonce used in the 
signature is known or reused.”
•
H D Moore was all over this one with a quickness!
 Metasploit hosting lists of brute-forced 'weak' keys
Debian OpenSSL Predictable PRNG Vuln
It’s Bad!
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
You scanned your assets for SSH / SSL servers using the 
blacklisted keys, right? (Tenable Nessus)
•
You scanned all user home dirs for blacklisted SSH keys?
 Debian ssh-vulnkey tool
•
You scanned all user homedirs, Windows Protected 
Storage, and browser profiles for blacklisted SSL certs, 
right?
•
But what about connections to external servers that use 
the vulnerable Debian OpenSSL?
Debian OpenSSL Predictable PRNG Vuln
Detection & Mitigation
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Goal: Detect SSH Diffie-Hellman Key Exchange (KEX) 
where client and/or server are OpenSSH linked against 
vulnerable Debian OpenSSL
•
Just that detective capability is valuable
 Even w/ great technical controls in place, you're likely 
missing:
• Users connecting to external servers using bad 
OpenSSL
• Connections to/from external hosts that use bad 
OpenSSL
•
What else can we do?
Debian OpenSSL Predictable PRNG Preproc.
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Goal: Have preprocessor(s) "normalize" traffic by brute-
forcing the DH key exchange, decoding both sides of 
session on-the-fly.
 Snort rule matching engine and other preprocessors can 
then inspect unencrypted session
 Unencrypted sessions can be logged (Unified or PCAP)
•
Potential issue w/ source code release
 Controls on the export of cryptanalytic software (US)
Debian OpenSSL Predictable PRNG Preproc.
Continued
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Alexander Klink
 http://seclists.org/fulldisclosure/2008/May/0592.html
 http://www.cynops.de/download/check_weak_dh_ssh.pl
.bz2
•
Paolo Abeni, Luciano Bello & Maximiliano Bertacchini
 Wireshark patch to break PFS in SSL/TLS
 https://bugs.wireshark.org/bugzilla/show_bug.cgi?
id=2725
•
Raphaël Rigo & Yoann Guillot
 New work on SSH and Debian OpenSSL PRNG Vuln
 Unknown to me until hearing about it at DEFCON
 http://www.cr0.org/progs/sshfun/
Debian OpenSSL Predictable PRNG Preproc.
Credits
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
A way for two parties to agree on a random shared secret 
over an insecure channel.
•
Server sends to Client
 p – large prime number
 g – generator of the field (Zp)* (typically 0x02)
•
Client generates random number a
 Calculates ga mod p
 Sends calculated value to server
•
Server generates random number b
 Calculates gb mod p
 Sends calcualted value to client
Diffie-Hellman Key Exchange for SSH
Do the Math!
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
DH shared secret is defined as both a function of a and of 
b, so only parties that know a or b can calculate it.
•
Client
 knows g, a and gb mod p
 Calculates shared secret as (gb)a = gab mod p
•
Server
 knows g, b and ga mod p
 Calculates shared secret as (ga)b = gab mod p
Diffie-Hellman Key Exchange for SSH
Do the Math! (2)
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Eavesdropper knows g, ga mod p and gb mod p
•
Can't calculate gab mod p from ga mod p and gb mod p
•
Must solve the discrete logarithm problem
 No known (non-quantum) algorithm to solve in 
polynomial time
 Polynomial-Time Algorithms for Prime Factorization and 
Discrete Logarithms on a Quantum Computer
 Peter W. Shor, AT&T Research
 30 August 1995, Revised 25 January 1996
 arXiv:quant-ph/9508027v2
Diffie-Hellman Key Exchange for SSH
Do the Math! (3)
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Encryption IVs and Keys generated from DH shared secret
•
VC, VS – Client / Server's SSH version announce string
•
IC, IS – Client / Server's SSH_MSG_KEXINIT message
•
KS – Server's Public Host Key
•
H = hash(VC || VS || IC || IS || KS || ga mod p || gb mod p || gab mod p)
•
SSH session_id = H of initial DH key exchange
•
IV client to server: hash(gab mod p || H || "A" || session_id)
•
IV server to client: hash(gab mod p || H || "B" || session_id)
•
Enc Key client to server: hash(gab mod p || H || "C" || session_id)
•
Enc Key server to client: hash(gab mod p || H || "D" || session_id)
Diffie-Hellman Key Exchange for SSH
Do the Math! (4)
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
If OpenSSH client or server is linked against vulnerable 
Debian OpenSSL
 a or b is completely predictable based on ProcessID of 
OpenSSH
•
We can quickly brute force a or b.
 Only 32768 possibilites!
•
If we know a or b, we can calculate DH shared secret
 gab mod p = (gb)a = (ga)b
•
Once we know the DH shared secret, we have everything 
needed to decrypt the SSH session layer!
The Debian OpenSSL PRNG and SSH DH GEX
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Tunneled Clear Text Passwords are compromised
 …if either client or server is using vulnerable OpenSSL
 RSA / DSA public key authentication is not affected
•
Files or other data protected by SSH Session layer are 
compromised
•
…if either client or server is using vulnerable OpenSSL
•
Observers can easily tell if either client or server is using 
vulnerable OpenSSL
 …and proceed to decrypt the stream
The Debian OpenSSL PRNG and SSH DH GEX
The Impact
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Live Demo
Detection of SSH Diffie-Hellman KEX using 
vulnerable Debian OpenSSL
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Snort v3
 Complete redesign from the ground up
 Extremenly flexible and extensible architecture
 Snort 2.8.x matching engine plugs in as module
 HW optimized packet acquisition can be plugged in
 Lua programming language!
•
Snort 2.8.3 (Release Candidate)
 Enhancements to HTTP Inspect
• Normalized Buffers for Method, URI, Headers, 
Cookies, Body
• Content and PCRE matching against new buffers
 New HTTP normalization exposed in Snort Plug-in API
Snort Futures
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Snort is a powerful framework to work with
 APIs for alerting, logging, Streams, matching
 Why reinvent the wheel?
•
Hopefully, you can take away needed info to start writing 
your own plug-ins.
•
Read the source code of other plug-ins, ask questions.
•
Snort v2 is still evolving. If the APIs don't support 
something you (and potentially others?) really need, ask 
and ye may receive.
Wrapping It All Up
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Thanks to DT, the Goons
and everyone who made
DEFCON a reality this year!
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Greetz to DC404, Atlanta's DC Group!
Speakers: dr.kaos, Carric, David Maynor, Scott Moulton
& Adam Bregenzer
And our very own Goon, dc0de!
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Questions?
PI:EMAIL