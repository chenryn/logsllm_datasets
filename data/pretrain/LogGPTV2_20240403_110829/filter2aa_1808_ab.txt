### Calling Rule Option Matching Functions Directly
- We can attempt to call rule option matching functions directly, but we need to ensure that the internal structures are properly initialized first.
- Use a dummy `Rule` struct and the `ruleMatch()` function:
  ```c
  ENGINE_LINKAGE int ruleMatch(void *p, Rule *rule);
  ```
- Register the rule using `RegisterOneRule(&rule, DONT_REGISTER_RULE);`
- This might seem confusing, but `RegisterOneRule` sets up the Aho-Corasick automaton and internal pointers. However, we don't always want to register the rules as an OTN (Optimized Tree Node). Therefore, we pass `DONT_REGISTER_RULE`.

### Snort Plug-in API: Using Rules Within a Dynamic Preprocessor
- **Available under:** [SecureWorks Research Tools](http://www.secureworks.com/research/tools/snort-plugins.html)
- **Released under:** GPLv2 (or later)
- **No Support**
- **No Warranty**
- **Use at Your Own Risk**
- **Feedback is appreciated!**

### SecureWorks Snort Plug-ins
- **Copyright © 2008 SecureWorks, Inc. All rights reserved.**
- **Inspects web traffic for scripting instantiating "vulnerable" ActiveX controls** based on public vulnerability disclosures.
- **Preprocessor configuration points to a local database of ActiveX controls** listed by CLSID and optionally by method/property in XML format.
- **Examines traffic returned from HTTP servers** for ActiveX instantiation and Class ID, and access to ActiveX control's methods/properties.

### ActiveX Detection Dynamic Preprocessor
- **Can be bypassed** through JavaScript obfuscation and HTTP encodings, but many attackers still use plain CLSID.
- **Future Snort Inline support** to drop or TCP RST the HTTP response.
- **Leverages normalization done by HTTP Inspect** and enhances logging with Unified2 extra data to log detected domain names.

### ActiveX Detection Dynamic Preprocessor Internals
- **Uses `matchRule(Rule*)` from the Snort Plug-in API**, which is convenient but not the most efficient.
- **Performs a naïve linear search of CLSIDs** and could be enhanced to reuse HTTP Inspect's high-performance data structures.
- **Utilizes Snort's flow match** for content and PCRE matching.

### Live Demo
- **ActiveX Detection Dynamic Preprocessor**

### Debian OpenSSL Predictable PRNG Vulnerability (CVE-2008-0166)
- **Lack of sufficient entropy in the PRNG delivered by Debian's OpenSSL package.**
- **Refer to Luciano Bello and Maximiliano Bertacchini's talk** (Saturday, 13:00 – 13:50, Track 4).
- **One of the coolest vulnerabilities of 2008!** Awarded Pwnie for Mass 0wnage.
- **Affects keys generated since 2006-09-17** on Debian Etch, Lenny, or Sid, and downstream distributions like Ubuntu.

### Impact and Mitigation
- **From the Debian Wiki (http://wiki.debian.org/SSLkeys):** Any DSA key used on a machine with a 'bad' OpenSSL must be considered compromised. H D Moore quickly provided brute-forced lists of 'weak' keys.
- **Detection and mitigation:**
  - Scan assets for SSH/SSL servers using blacklisted keys (e.g., Tenable Nessus).
  - Scan user home directories for blacklisted SSH keys (Debian `ssh-vulnkey` tool).
  - Scan user home directories, Windows Protected Storage, and browser profiles for blacklisted SSL certs.
  - Consider connections to external servers that use vulnerable Debian OpenSSL.

### Debian OpenSSL Predictable PRNG Preprocessor
- **Goal:** Detect SSH Diffie-Hellman Key Exchange (KEX) where the client and/or server are OpenSSH linked against vulnerable Debian OpenSSL.
- **Detective capability is valuable** even with great technical controls in place, as it can help identify:
  - Users connecting to external servers using bad OpenSSL.
  - Connections to/from external hosts using bad OpenSSL.
- **Potential issue with source code release:** Export controls on cryptanalytic software (US).

### Credits
- **Alexander Klink**: Provided a script to check weak DH keys.
- **Paolo Abeni, Luciano Bello & Maximiliano Bertacchini**: Wireshark patch to break PFS in SSL/TLS.
- **Raphaël Rigo & Yoann Guillot**: New work on SSH and Debian OpenSSL PRNG Vuln.

### Diffie-Hellman Key Exchange for SSH
- **A way for two parties to agree on a random shared secret over an insecure channel.**
- **Server sends to Client:**
  - Large prime number `p`.
  - Generator of the field (Zp)*, typically `0x02`.
- **Client generates random number `a`** and calculates `ga mod p`, sending the result to the server.
- **Server generates random number `b`** and calculates `gb mod p`, sending the result to the client.
- **DH shared secret is defined as both a function of `a` and `b`**, so only parties that know `a` or `b` can calculate it.
- **Eavesdropper knows `g`, `ga mod p`, and `gb mod p`** but cannot calculate `gab mod p` without solving the discrete logarithm problem, which has no known polynomial-time algorithm (non-quantum).

### The Debian OpenSSL PRNG and SSH DH GEX
- **If OpenSSH client or server is linked against vulnerable Debian OpenSSL, `a` or `b` is completely predictable** based on the ProcessID of OpenSSH.
- **We can quickly brute force `a` or `b`** (only 32768 possibilities).
- **Once we know `a` or `b`, we can calculate the DH shared secret** and decrypt the SSH session layer.
- **Impact:**
  - Tunneled clear text passwords are compromised if either client or server is using vulnerable OpenSSL.
  - Files or other data protected by the SSH session layer are compromised.
  - Observers can easily tell if either client or server is using vulnerable OpenSSL and proceed to decrypt the stream.

### Live Demo
- **Detection of SSH Diffie-Hellman KEX using vulnerable Debian OpenSSL**

### Snort Futures
- **Snort v3:**
  - Complete redesign from the ground up.
  - Extremely flexible and extensible architecture.
  - Snort 2.8.x matching engine plugs in as a module.
  - HW-optimized packet acquisition can be plugged in.
  - Lua programming language support.
- **Snort 2.8.3 (Release Candidate):**
  - Enhancements to HTTP Inspect.
  - Normalized buffers for Method, URI, Headers, Cookies, Body.
  - Content and PCRE matching against new buffers.
  - New HTTP normalization exposed in the Snort Plug-in API.

### Wrapping It All Up
- **Snort is a powerful framework** with APIs for alerting, logging, Streams, and matching.
- **Read the source code of other plug-ins, ask questions.**
- **Snort v2 is still evolving.** If the APIs don't support something you need, ask and you may receive.

### Acknowledgments
- **Thanks to DT, the Goons, and everyone who made DEFCON a reality this year!**
- **Greetz to DC404, Atlanta's DC Group!**
- **Speakers: dr.kaos, Carric, David Maynor, Scott Moulton & Adam Bregenzer**
- **And our very own Goon, dc0de!**

### Questions?
- **Contact: PI:EMAIL**