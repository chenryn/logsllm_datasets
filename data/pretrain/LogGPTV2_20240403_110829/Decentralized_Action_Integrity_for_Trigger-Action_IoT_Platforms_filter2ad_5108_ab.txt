### Trigger-Action Platforms: Architecture, Authorization, and Security Implications

#### Overview of Trigger-Action Platforms
A trigger-action platform is a cloud service that executes rules at scale. For example, IFTTT currently supports 11 million users, 54 million rules, and 1 billion rule executions per month [29]. These platforms provide a simple user interface (UI) for creating rules, and many also offer mobile apps for easy access. A typical rule combines a trigger (e.g., "turn off the oven") with an action (e.g., "lock the door"). Some platforms, like IFTTT, support a single trigger and a single action, while others, such as Zapier and Microsoft Flow, allow for multiple triggering conditions, if-then-else logic, and even mathematical functions.

#### Authorization Model
Online services protect their REST APIs using authorization protocols, with OAuth being a popular choice. OAuth enables secure delegated access to APIs, allowing third parties to interact with online services on behalf of users. In the context of trigger-action platforms, this involves a four-step authorization process:

1. **Client Application Creation**: A channel developer (either the platform or the online service provider) creates a client application for the online service's REST API. The online service assigns a client ID and secret to this application.
2. **User Initiation**: A user initiates a channel connection within the trigger-action platform, which then starts the OAuth 2.0 authorization code flow. The platform requests an authorization code from the online service on behalf of the user, passing a client identifier, redirect URI, and scope value.
3. **User Approval**: The user is presented with an OAuth permissions screen, where they can approve or deny the requested scope. The design and options on this screen are determined by the online service.
4. **Token Exchange**: If the user approves, the online service redirects to the platform's redirect URI with an authorization code. The platform then exchanges this code, along with the client ID and secret, for an access token. This token is used to make API calls on the online service.

#### Security Risks
Trigger-action platforms pose several security risks, particularly in the event of a compromise. These risks include:

1. **Platform Compromise**: Cloud services, including trigger-action platforms, can be compromised through implementation bugs, design flaws, or social engineering attacks. Such compromises can expose user data and resources. For example, in 2015, over 700 million user records were exposed through 1,673 data breaches [8].
2. **OAuth Token Compromise**: OAuth tokens, often long-lived, can be misused if the platform is compromised. This can lead to unauthorized operations on user resources. Additionally, the logically monolithic design of many platforms means that a compromise can expose tokens for all users.

#### Overprivileged Tokens
Trigger-action platforms may request more permissions than necessary, leading to overprivileged tokens. This issue arises due to:

- **Coarse-Grained Scopes**: Online services often provide coarse-grained scopes that are not fine-tuned for specific trigger-action functions.
- **Usability-Security Trade-off**: To reduce the number of permission prompts, platforms may request broad scopes, potentially including future-proofing for new features.

**Case Study: IFTTT**
We conducted a case study on IFTTT to examine the use of overprivileged tokens. Our findings include:

- **Google Drive**: The IFTTT channel has the ability to delete files, create permissions, and delete revisions, which can lead to data loss if the token is stolen.
- **Particle**: The IFTTT channel can flash new firmware to a chip, changing its functionality and potentially causing security and safety issues.
- **MyFox Home Control**: The channel can stop live video recording, turn on/off electric devices, and change heater states, leading to security breaches and safety issues.

#### Mitigating Risks
To mitigate these risks, we propose the concept of **Decentralized Action Integrity**. This approach aims to:

- **Fine-Grain Scopes**: Encourage online services to provide more granular scopes.
- **Dynamic Permissions**: Allow users to grant and revoke permissions dynamically.
- **Secure Token Management**: Implement robust token management practices to minimize the risk of token compromise.

By addressing these areas, we can enhance the security of trigger-action platforms and better protect users' digital and physical resources.