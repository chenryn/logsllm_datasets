trigger with the oven channel’s “turn off the oven” action.
Some trigger-action platforms permit a single trigger and a
single action (e.g., IFTTT), some permit multiple triggering
conditions and actions (e.g., Zapier), if-then-else conditions
(e.g., Microsoft Flow), and even mathematical functions
while combining triggering data (e.g., Stringify).
A trigger-action platform takes the form of a cloud service
that executes rules at large scale. For example, IFTTT currently
supports 11 million users, 54 million rules, and 1 billion rule
executions per month [29]. The cloud service provides accounts
where users can create rules using a simple UI. All the platforms
we surveyed also provide mobile apps that serve as an interface
to the cloud service. Therefore, a trigger-action platform is
technically a combination of a cloud service and a mobile app.
For brevity, we refer to the cloud service of a platform as the
trigger-action platform, unless stated otherwise.
3
Fig. 1: Overview of trigger-action platform architecture in the
context of a rule. Online services have a channel inside the
platform. These channels gain access to online service APIs
by acquiring an OAuth token during the channel connection
step. A Rule combines a trigger and an action.
All of the platforms we surveyed use OAuth as the primary
integration mechanism—this is expected as most of the online
services today support OAuth based access for third parties.
Our focus is on ensuring that a user’s online services (and
hence digital and physical resources connected to those online
services) are protected from misuse. Therefore, we discuss the
general authorization model of trigger-action platforms next.
Authorization Model. Online services protect their REST
APIs using authorization protocols. OAuth is a popular choice
that enables an online service to provide third parties with
secure delegated access to its APIs. A trigger-action platform
must obtain authorization to communicate with online services
that its channels represent; and therefore must follow the
OAuth authorization workﬂow. Figure 2 shows the four-step
authorization model.
First, a channel developer (trigger-action platform develop-
ers or the online service provider itself) must create a client
application for the online service’s REST API. This client
application represents a channel on the online service. During
the sign-up phase, the online service assigns a client ID and a
secret that the trigger-action platform uses during authorization.
Second, a user initiates a channel connection within the
trigger-action platform administrative interface and this causes
the platform to initiate the OAuth 2.0 authorization code ﬂow—
the recommended workﬂow for server-to-server authorization—
that results in the platform requesting the corresponding online
service for a short authorization code on behalf of the user.
The platform passes a client identiﬁer value, a redirect URI,
and a scope value as part of the HTTP(S) request. The scope
value represents the level of access the trigger-action platform
is requesting to operate a channel. This authorization request
results in the user being presented with an OAuth permissions
screen that explains the scope that the platform is requesting.
As the OAuth protocol does not specify the design of the
permissions screen, the screen design, scope explanations, and
UI options to modify the requested scopes is at the discretion
of the online service.
Lock UnlockedLock LockedAugust Lock ChannelOven Turned OnOven Turned OﬀTurn Oﬀ OvenSet to Sabbath ModeGE Oven ChannelLock LockedTurn Oﬀ OvenRuleAugust LockServiceAPIsGE OvenServiceAPIsOAuthOAuthfocus on a compromise of the online services of the users—
such an attack is independent of any trigger-action platform.
For example, if a user’s Facebook account or Google Home
account was hacked, then an attacker can manipulate data and
devices independently of any trigger-action platform the user
may be using.
A. Platform Compromise
Cloud services, including trigger-action platforms, can be
compromised through bugs in its implementation or design,
through social engineering attacks, or through a combination
of these. As all of the platforms we discussed in §II are cloud
services, an exploit could target any software in the web stack.
Indeed, such compromises are common occurrences today. In
2015 alone, more than 700 million user records were exposed
through 1673 data breaches [8]. Prominent examples of cloud
service breaches include Target [16], US voters database [1],
Dropbox [9], and the recent Google Docs OAuth-based phishing
attack that compromised one million users [36]. Therefore, even
well-designed cloud services are not immune to persistent and
sophisticated threats.
Thus, we are concerned with the risks posed to users’ digital
and physical resources as a result of a trigger-action platform
compromise. The main security mechanism guarding user
resources is the set of OAuth tokens. These OAuth tokens are
often long-lived.2 An attacker who compromises the platform
will be able to use the OAuth tokens to invoke operations on
the users’ resources arbitrarily.
Furthermore, trigger-action platforms today follow a logi-
cally monolithic design—a compromise of the platform implies
that OAuth tokens for all users will be accessible to the attacker.
Therefore, we conclude that the choice of standard OAuth
tokens coupled with a logically monolithic design poses a
large-scale security risk to users’ digital and physical resources.
B. Risks from OAuth Token Compromise
Trigger-action platforms do try to limit the risks of misuse
of OAuth tokens by constraining the set of operations available
on the channels. For example, IFTTT does not expose the
operation of deleting ﬁles on the Google Drive channel because
deleting ﬁles is considered too risky (it can lead to accidental
or malicious loss of all data on a user’s Google drive). A
research question is whether the OAuth tokens acquired by
these services, if compromised, can be misused to perform risky
operations. We call this the problem of overprivileged tokens.
We performed a case study on the popular IFTTT trigger-action
platform to study the overprivilege aspect. We note that it is not
our aim to be exhaustive in our analysis of overprivilege, as it is
a known problem in OAuth systems—for example, Chen et al.
discuss OAuth issues in the context of mobile applications [21].
Rather, our goal here is to highlight the risks that still exist
in trigger-action platforms, despite attempts to limit them by
eliminating dangerous operations on their channels.
2Even if they are not, these tokens can be refreshed using information stored
in the trigger-action platform.
Fig. 2: The OAuth-based authorization model for trigger-action
platforms has four phases. Channel developers create client
applications for the online service that results in the online
service assigning a client ID and secret to the application. Then,
the trigger-action platform initiates an authorization workﬂow.
The OAuth 2.0 authorization code ﬂow is a popular choice,
and it results in the platform gaining a scoped bearer token that
authorizes a channel to invoke APIs on an online service. Users
are prompted to approve scope requests during this process.
Third, assuming the user accepts the scope request, the
online service redirects to the trigger-action-platform-provided
redirect URI with a short authorization code as an argument.
Finally, the platform exchanges the authorization code,
client ID, and client secret for an access token using server-to-
server communication. The trigger-action platform then uses
the OAuth bearer token to initiate API calls on the online
service to implement channel functions.
Although OAuth 2.0 is by far the most popular authorization
protocol in trigger-action platforms, there are online services
that use OAuth 1.0a. OAuth 1 does not have explicit scoping as
part of its authorization workﬂow, but offers a similar concept
when a client application signs up for the online service’s API.
During this phase, the developer can choose scopes to enable.
For example, Twitter uses OAuth 1.0a, and it provides a settings
item that allows a developer to change the access level of the
client application, and hence, to change the scope of any tokens
issued in the future.
III. SECURITY IMPLICATIONS OF TRIGGER-ACTION
PLATFORMS
In this section, we discuss the security risks that trigger-
action platforms pose to a user’s digital and physical resources.
We focus on risks that arise due to high-level design choices,
and do not focus on low-level implementation errors that might
enable these risks (e.g., XSS, SQL Injection, OS bugs). The
risks we focus on are due to a compromise of the trigger-action
platform, and are due to OAuth deployment issues. We do not
4
UserServiceRequest Authorization Code[Client ID, Redirect URL, Scope, …]Login & AuthorizeRequest User AuthorizationAuthorization CodeRequest Access Token[Client ID & Secret, Auth. Code, …]Access TokenAPI CallAPI ResponseRequest Channel Connectionsetup IFTTT Client application[Client ID, Secret, …]Channel Signup PhaseUser-to-Service AuthorizationService-to-Service AuthorizationActivityPhaseTrigger-ActionPlatformChannel
Google Drive
Scope
drive, user.info,
userinfo.proﬁle,
feeds,
feed,
spreadsheets,
documents
Example Overprivileged APIs
https://www.googleapis.com/drive/v3/ﬁles/ﬁle-id
https://www.googleapis.com/drive/v3/ﬁles/ﬁle-id/permissions
https://www.googleapis.com/drive/v3/ﬁles/ﬁle-id/revisions/rev-id
Particle
ifttt
https://api.particle.io/v1/devices/device-id
MyFox Home Control
nil
https://api.particle.io/v1/devices/device-id
https://api.particle.io/v1/devices/device-id
name=new name
https://api.myfox.me:443/v2/site/site-id/device/cam-id/camera/
recording/stop
https://api.myfox.me:443/v2/site/site-id/device/dev-id/heater/on
WITH
BODY
https://api.myfox.me:443/v2/site/site-id/device/dev-id/socket/on or /off
Description
Deletes a ﬁle
Creates a permission
for a ﬁle
Permanently deletes a
revision of a ﬁle
Flashes a device with a
pre-compiled binary
Unclaims a device
Renames a device
Stops camera recording
to ‘on’
Sets heater
mode
Turns a device on or off
TABLE II: Examples of overprivileged APIs that IFTTT channels can access. These APIs are not used in any triggers or actions.
We shortened Google Drive scope names for brevity.
1) Case Study Procedure: The goal of our case study is
to examine the use of overprivileged tokens in trigger-action
platforms. We focused our case study on IFTTT [10] due
to its popularity and integration with a wide variety of IoT,
smart home devices, and online services. For our study, we
selected channels which had their online service API open
to developers. Studying these channels and comparing their
triggers and actions with the capabilities of the OAuth token
obtained by IFTTT allowed us to isolate API calls that are
not used by any trigger or action, but are accessible using the
OAuth token.
2) Case Study Results: Table II shows a summary of our
case study results. We ﬁnd that in all cases, the OAuth tokens
that IFTTT possesses are overprivileged. The root cause for
overprivilege arises from:
• Coarse-grained scopes: Online services were not designed to
support only trigger-action platforms. They are designed to
support the most general of use cases. Therefore, the OAuth
scopes are often coarse-grained, and may not necessarily be
ﬁne-grained enough to support only the set of trigger and
action functions for channels in the IFTTT platform. This
problem is not unique to IFTTT. Rather, it is common to all
trigger-action platforms.
• Balancing usability and security: The channel abstraction
strikes a balance in the usability-security trade-off. Users
must “connect” a channel to their account on IFTTT and
this includes the user following an OAuth authorization ﬂow.
As this process is done once per channel, users do not
have to perform OAuth authorization ﬂows whenever they
create a rule. Alternatively, users would have to perform an
authorization ﬂow for every rule they create if the channel
abstract did not exist, leading to a drastic increase in the
number of permission prompts. Although the channel design
reduces the number of OAuth permission prompts to one per
channel connection step, it does force IFTTT to request
OAuth scopes that are powerful enough to execute all
operations that it currently supports, and possibly even future-
proof itself by requesting a coarser-grained set of scopes
for operations that might be supported in the future. This
problem is not speciﬁc to IFTTT. Rather, it is common to any
trigger-action platform that supports the channel abstraction.
We provide more detail on the overprivilege in our case
studies below:
Google Drive. Our API testing reveals that the Google Drive
IFTTT channel has the ability to delete a user’s ﬁles. We
conﬁrmed this behavior using a token with the same scope as
what the Google Drive IFTTT channel requests. This can cause
data loss if the corresponding token is stolen. We observe that
the Google Drive channel requests multiple scopes. However,
the OAuth prompt only provides the user with a binary choice
of approving or denying the request.
Particle. Our API testing reveals that the Particle IFTTT
channel has the ability to ﬂash new ﬁrmware to a chip. We
used a token with scope=ifttt, which is identical to what
the Particle IFTTT channel requests, and reprogrammed a chip
by simply using a REST API call. This can completely change
the functionality of the Particle chips and cause a variety of
security and safety issues if the corresponding token is stolen.
We also observe that the Particle OAuth prompt only provides
the user with a binary choice of either approving or denying
the permission request.
MyFox Home Control. This channel can arm or disarm the
MyFox security system. However, our API testing reveals that
it has overprivileged access to the MyFox Home Control API
that allows it to stop live video recording, turn on/off electric
devices, and change the state of the heaters. This can result
in security breaches, overheating and large utility bills if the
corresponding token is stolen. We also observe that MyFox
Home Control does not provide any kind of scoped access.
This forces the channel to request complete access to the API.
Furthermore, the MyFox Home Control OAuth prompt only
provides a binary choice during authorization—either approve
all requested permissions, or deny the request.
We conclude that the OAuth tokens that trigger-action
platforms negotiate can be overprivileged: (1) online services
5
only provide a ﬁxed set of scopes that can be incompatible
with the channel operations of the platform, forcing it to
request overprivileged access, (2) the usable channel abstraction
necessitates tokens that can invoke multiple APIs in the online
service, even if the user does not create rules that use all those
APIs.
Therefore, trigger-action platforms pose a long-term security
risk to users’ digital and physical resources. An attacker who
compromises the platform can misuse OAuth tokens to execute
APIs arbitrarily, and can even invoke APIs outside the abilities
of the trigger-action platform itself due to overprivilege.
IV. TOWARDS MITIGATING RISKS OF TRIGGER-ACTION
PLATFORMS
Our high-level goal is to develop a defense mechanism that
mitigates the security risks outlined above. In this section, we
ﬁrst discuss our threat model, which we derived from our earlier
analysis. We then explore candidate designs and highlight their
shortcomings. Finally, we introduce the Decentralized Action
Integrity concept, and discuss why it provides meaningful