进一步测试后，我们发现`0x9c2b`处的代码（`jmp 1cb0`）是运行时所使用的代码，并且后面跟着一大段代码，这些代码被覆盖后可能不会导致进程崩溃。
为了应用这个技术，我们还需要解决两个障碍：
1、在复制操作后，`dd`会关闭`stdin`、`stdout`以及`stderr`文件描述符：
2、地址空间布局随机化问题。
我们可以在bash中复制`stdin`以及`stdou`文件描述符来解决第一个问题（参考`bash(1)`）：
> 复制文件描述符
>
> 重定向运算符`[n]/fd/3`）。我们可以修改目标进程的`argv[0]`字符串来规避这一点。
3、Swappiness。即使我们的载荷存在于虚拟内存中，大多数情况下它们可能会被交换到磁盘上（对交换空间的分析是另一个话题）。我们可以采用如下策略规避这一点：
  * `mlock()`、`mlockall()`及`mmap()`：需要`root`或者`CAP_IPC_LOCK`。
  * `sysctl vm.swappiness`或者`/proc/sys/vm/swappiness`：需要`root`权限。
  * `cgroup`（`memory.swappiness`）：需要`root`或者修改`cgroup`的相应权限。
最后一种方法并不能保证在负载较重的情况下内存管理器不会将进程交换到硬盘上（比如root cgroup允许交换且需要内存时）。
## 七、参考资料
In-Memory PE EXE Execution by Z0MBiE/29A  
Remote Library Injection by skape & jt  
Reflective DLL Injection by Stephen Fewer  
Loading a DLL from memory by Joachim Bauch  
Reflective DLL Injection with PowerShell by clymb3r  
The Design and Implementation of Userland Exec by the grugq  
Injected Evil by Z0MBiE/29A  
Advanced Antiforensics : SELF by Pluf & Ripe  
Run-time Thread Injection The Jugaad way by Aseem Jakhar  
Implementation of SELF in python by mak  
Linux based inter-process code injection without ptrace(2) by Rory McNamara  
## 八、附录
###  附录A
实验中使用的`Hello world` shellcode：
###  附录B