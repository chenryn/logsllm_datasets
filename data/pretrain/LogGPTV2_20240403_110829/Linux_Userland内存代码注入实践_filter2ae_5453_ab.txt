### 优化后的文本

在进一步测试后，我们发现位于`0x9c2b`的代码（`jmp 1cb0`）是运行时所使用的，并且其后跟随了一大段代码。即使这些代码被覆盖，也可能不会导致进程崩溃。

为了成功应用这一技术，我们需要克服以下两个主要障碍：

1. **文件描述符关闭问题**：在复制操作完成后，`dd`会关闭`stdin`、`stdout`和`stderr`文件描述符。
2. **地址空间布局随机化（ASLR）问题**：目标进程的内存地址可能会因ASLR而发生变化。

针对第一个问题，我们可以在Bash中通过复制文件描述符来解决。具体方法如下：
- 使用重定向运算符`[n]/fd/3`来复制文件描述符。例如，可以使用`exec 3>&1`将`stdout`复制到文件描述符3。
- 修改目标进程的`argv[0]`字符串以规避文件描述符关闭的问题。

对于第二个问题，即ASLR问题，可以通过修改目标进程的`argv[0]`字符串来规避。

此外，还有一个需要注意的问题是Swappiness。即使我们的载荷存在于虚拟内存中，它们也可能会被交换到磁盘上。为了解决这个问题，可以采用以下策略：
- 使用`mlock()`或`mlockall()`函数锁定内存页，这需要`root`权限或`CAP_IPC_LOCK`能力。
- 通过`sysctl vm.swappiness`或编辑`/proc/sys/vm/swappiness`文件来调整系统的Swappiness值，这也需要`root`权限。
- 利用`cgroup`（如`memory.swappiness`）进行控制，这同样需要`root`权限或相应的`cgroup`权限。

然而，最后一种方法并不能保证在系统负载较重的情况下，内存管理器不会将进程交换到硬盘上，尤其是在`root cgroup`允许交换并且系统需要更多内存时。

## 七、参考资料
- In-Memory PE EXE Execution by Z0MBiE/29A
- Remote Library Injection by skape & jt
- Reflective DLL Injection by Stephen Fewer
- Loading a DLL from memory by Joachim Bauch
- Reflective DLL Injection with PowerShell by clymb3r
- The Design and Implementation of Userland Exec by the grugq
- Injected Evil by Z0MBiE/29A
- Advanced Antiforensics: SELF by Pluf & Ripe
- Run-time Thread Injection The Jugaad way by Aseem Jakhar
- Implementation of SELF in Python by mak
- Linux-based inter-process code injection without ptrace(2) by Rory McNamara

## 八、附录

### 附录A
实验中使用的`Hello world` shellcode：

### 附录B

---

希望这个版本更加清晰、连贯和专业。如果有任何进一步的修改需求，请随时告知。