11]) on the information sources developers refer to while selecting
new dependencies and provide specific insights into why particular
information source is referred to from the security perspective.
Observation 6: To avoid legal issues, enterprise developers check
software licenses while selecting new project dependencies.
Besides security and functionality, developers of every type of
organization we covered specified that one needs to be careful
while selecting software dependencies, since there also exist license
issues of using them as part of a proprietary software project: FOSS
(#13, #24), SME (#14, #24), LE (#3, #10, #13), UG (#2)
[...] if you sell some software, and inside your software you
have a restricted license, like GPLv3, you could have a lot of
legal issues, because the owner of the library may discover that
and you may have a lot of legal problems. (#3)
Discussion.Current qualitative studies of FOSS ecosystem [16, 42]
provided limited insights on the impact of legal concerns on devel-
opers’ decisions for selecting dependencies. For example, Linden
et al. [42] reported that individual developers recruited for a labo-
ratory task have a limited understanding of (and little patience to
understand) legal issues behind the usage of third-party software.
In contrast, we observe that developers belonging to each covered
organization type (FOSS, SME, LE, UG) have reported that they
consider licenses of dependencies before using them.
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA15195.2 RQ2: motivations for (not) updating
To answer this research question, we have looked into the particu-
larity of the dependency management process. More specifically, we
have considered the conversation fragments labeled by the codes
of the attitude code group (Table 4).
Observation 7: In general, developers have mixed perceptions
about dependency management process, while few developers have
strongly negative and strongly positive attitudes.
Developers expressed different perceptions of the dependency
management process: they have mentioned negative aspects (86 co-
occurrences of codes dislike and management in the interviews of 22
developers), as well as expressed positive attitudes towards depen-
dency management (44 co-occurrences of codes like and manage-
ment in the interviews of 18 developers). Six developers mentioned
only problematic aspects, two reported only positive attitudes, and
16 developers expressed mixed perceptions of the dependency man-
agement process (i.e., their interviews contained co-occurrences of
both dislike and like codes with management code).
Yeah, it was really hard to switch from AngularJS [...] to
Angular2. But they did a great job, so every other update, like
Angular2, 4, 5, 6, [...] the switch is really smooth. You don’t
have to do lots of crazy things. (#21)
Discussion.Although several previous studies [6, 7, 9, 25, 31] re-
ported developers to have mainly negative attitudes towards depen-
dency management, we observe that several enterprise developers
expressed entirely positive attitudes.
Observation 8: If developers update dependencies of their projects,
they pay attention to vulnerabilities.
The most important and discussed issue for the developers in our
sample were bugs (84 occurrences in the interviews of 22 develop-
ers). When the developers spoke about bugs, often they discussed
vulnerabilities (61 co-occurrences of codes bugs and security).
Observation 9: Developers perceive security-related fixes as easy
to adopt, as for widely-used and well-supported libraries such fixes
appear fast and do not break the dependent projects.
Developers do not have negative concerns about fixing vulner-
abilities in dependencies since they either use only well-known
stable libraries that rarely introduce vulnerabilities and quickly fix
them (#5, #6, #16, and #17); or their projects are not security critical,
i.e., used only for internal purposes, hence even if a vulnerability
appears in their dependencies, they will not be exploited (#3, #4, #9,
and #24). Also, the adoption of fixed dependency versions typically
does not break the dependent projects (#1, #4, #11, and #14).
Discussion.Developers are reported to be less proactive about de-
pendencies [6] as they felt difficult to manage dependencies or
lack support from vendors [25]. However, we observe a generally
positive attitude of developers to security fixes in software depen-
dencies, since fixed versions of well-supported dependencies appear
fast, and their adoption does not break the dependent projects.
Observation 10: Developers avoid updating dependencies as they
lack resources to cope with the breaking changes (possibly hidden in
transitive dependencies) introduced by new dependency versions.
Many interviewees reported that, generally, they try to avoid
updates of dependencies in their projects. 14 developers (#1, #4,
#7, #8, #9, #10, #11, #12, #14, #15, #16, #17, #18, and #23) said that
they do not have enough resources to perform proper dependency
management, while 11 developers (#4, #7, #8, #9, #12, #13, #14, #16,
#17, #19, and #23) mentioned that they avoid updating dependencies
of their projects since updates might introduce breaking changes:
Our project is huge. We tried once, and 1000 tests became down.
To fix it[...] We just do not have time for that. Hence everything
became frozen. (#8)
Eight developers (#1, #2, #3, #7, #13, #14, #17, and #23) said that
they experienced problems with dependency management due to a
high number of transitive dependencies that are difficult to control.
Discussion.The previous studies of developers perceptions on de-
pendencies [7, 11, 31] reported breaking changes to be the main
factor that stops developers from updating dependencies of their
projects. Our finding complements these studies and also suggests
project stability to be the highest priority for developers. I.e., they
are not updating dependencies for security reasons unless develop-
ers are confident that this update is free from breaking changes (or
developers have enough time and resources to thoroughly test their
projects). Also, our observation shows that the lack of control over
the high number of transitive dependencies causes a significant
strain in managing and updating dependencies. It can be one of
the main reasons for not updating dependencies, in addition to
technical debts, performance reasons, or bug fixes [11].
Observation 11: Company policy significantly affects developers’
decisions about updating software dependencies by splitting the field
in two: adopt every new version or ignore all updates.
Developers #7 and #19 said that the established practice and
company mindset might force developers to follow different depen-
dency management strategies. For example, developers #7, #15, #19,
and #21 said they keep dependencies of their projects fresh and
perform “small” updates every time the new dependency version
appears. The update process seems “quite smooth” for them.
I faced dependency updates in [company name]. And there such
task appeared maybe twice a month. (#19)
On the other hand, developers #7, #8, #12, #15, and #19 men-
tioned that they try to avoid updates of software dependencies as
much as possible due to the risk-averse mindset and lack of proper
motivation for updating software dependencies (as new does not
mean bug-free): although they did not express any problematic
aspect in it, developers #8, #12, and #19 reported that they do not
update dependencies in their projects since their company policies
suggest keeping versions of dependencies unchanged.
I faced at this job, that most people do not understand why it’s
needed to update libraries, why we need to refactor code. If
everything works, do not touch it, do you need that most? And if
I start to fix everything by myself, I would just become crazy
to convince everyone. Actually, I had a not so good experience,
when I tried to increase the code quality a bit. And people
started to complain: why did you touch that? (#8)
Discussion.The studies report developers do not update dependen-
cies as they work as intended [11, 31], the update contains only
minor improvements [3], or there are not enough development
resources available [25]. In contrast, we observe that several enter-
prise developers have an opposite approach: they update dependen-
cies of their projects as soon as the new version of a dependency
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1520Table 5: Dependency operations vs Process
The table shows the number of co-occurrences of codes of dependency operations and
process code groups. For example, codes workflow and management have 45 co-occurrences,
which means the depelopers often discussed how they integrated dependency management
into their workflow. We mark (underline and bold) the number of co-occurrences exceeding
18 (mean + one standard deviation). The full co-occurrence table is in Apendix D.
automated
code tool
workflow
dependency tool
manual
mainte-
nance
1
0
1
3
7
manage-
ment
18
5
45
26
13
0
0
2
0
1
Dependency operations
direct
deps
look for
info
7
2
13
9
7
trans
deps
2
0
2
1
1
appears. Our interviewees suggest the company policy to be the key
factor for such a change in the dependency management practice.
5.3 RQ3: automation of dependency
management
To answer RQ3, we have looked at the developers’ answers that
were marked by one of the codes from the process code group.
Observation 12: Dependency analysis tools (if used) are applied
for identification of arising issues within dependencies, so developers
can assess the findings to decide whether to adopt a new dependency
version. The dependency update itself is performed manually.
On dependency management (see Table 5), developers often
referred to the contextual information established within their com-
panies: the codes management and workflow co-occurred 45 times in
the interviews of 16 developers (#3, #5, #7, #9, #10, #12–14, #18–25).
Developers #3, #5, #7, and #10 reported that they apply depen-
dency analysis tools in their day-by-day work to identify possible
problems within dependencies of their projects (26 co-occurrences
of codes dependency tool and management). They have the auto-
matic dependency scanning tools integrated with their workflow,
and they have to check the generated issues manually. If they decide
to update a dependency, developers #3, #7, #9, #17, and #18 prefer
to manually configure the project to use the new version and then
manually test the project to ensure that it functions correctly.
You add a request and say: “I would like to have this library”.
There is a process for that and someone will investigate this and
will run the [Dependency Tool], and you will get an automatic
report. And so the [library] will be cleared or not. (#10)
Discussion.Several studies [6, 9, 20] reported that developers keep
dependencies outdated due to the lack of awareness about secu-
rity issues. There are some reasons for this: the absence of proper
security knowledge, lack of plans for security assessment, and ap-
propriate tools [3]. But the studies did not investigate the roles of
dependency analysis tools. We observe that enterprise developers
are aware of existence of dependency analysis tools, and (if applica-
ble) use them as the supporting source of information for planning
manual dependency management tasks. However, they do not rely
on the tools for sensitive operations, like automatically updating
dependencies of their projects. The last observation aligns and
complements the finding reported by Mirhosseini and Parnin [31].
Observation 13: Developers recommend introducing high-level
metrics that show that a library is safe to use (security badge), mature,
and does not bring too many transitive dependencies.
To facilitate the selection of new dependencies, developer #6 rec-
ommends having badges in Github (or one’s dependency manage-
ment system) that show whether usage of a particular dependency
is safe. Besides checking for vulnerabilities in a specific version of a
dependency, the developers #16 and #25 suggest defining whether
the dependency is mature (See 5.1), while the developer #13 would
like to see if the new dependency increases the technology stack or
introduces new transitive dependencies.
Discussion.Mirhosseini and Parnin [31] reported that developers
would like to see some supporting and explanatory arguments for
an automated bug fixing suggestions to be accepted. Also, the au-
thors found that developers prefer to have passive notifications
(e.g., badges) about changes in dependencies. We observe similar
developers’ desire regarding the information about software depen-
dencies – developers would like to have a high-level metric (i.e., an
argument) showing if a library should be adopted.
Observation 14: Developers think that dependency analysis tools
generate many irrelevant or low priority alerts.
The developers #9, #15, and #22 tried dependency analysis tools,
but decided not to introduce them into their work process due to a
significant number of unrelated alerts:
I had one [dep. analysis tool] and it tended to spamming, and I
turned it off. For example, it reported minor vulnerabilities,
so I was kind of annoyed by them. (#15)
Observation 15: Several developers tried dependency analysis
tools but decided to rely on the information about vulnerability fixes
and functionality improvements distributed via social channels.
Many developers (#1, #2, #3, #7, #9, #10, #11, #17, and #18) perform
manual analysis of their dependencies. Five developers (#1, #2, #4,
#18, and #24) said that they use social channels, like Twitter or
dependency mailing lists, to receive information about discovered
issues and new versions of their project dependencies.
Discussion.Observation 14 suggests that dependency analysis tools
share the well-known weakness of static analysis tools (e.g., [21, 43])
used to find security issues in the own code of software projects:
false-positive and low-level alerts annoy developers. Hence, they
abandon the tools and prefer to seek social support, although the
information it sometimes provides is too much to digest [7].
Observation 16: Developers recommend dependency analysis
tools to report only relevant alerts, work offline, be easily integrated
into company workflow, and report both recent and early safe versions
of vulnerable dependencies.
Regarding the dependency analysis tools, developer #18 suggests
the tools to report only the findings that really affect the analyzed
project (reduce the number of false positives). Developer #9 suggests
that security tools should work offline, since otherwise, they may
disclose some sensitive information about the analyzed projects.
Developer #19 suggests that the tools for analyzing software de-
pendencies should be easy to integrate with development pipelines,
while developer #22 would like to have reported both early and
recent safe versions of the identified vulnerable dependencies, so
there will be a possibility to consider several versions to update to.
Discussion.Johnson et al. [21] reported that developers want code
analysis tools that provide faster feedback in an efficient way that
does not disrupt their workflows and allow them to ignore specific
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1521defects about their own code. We observe similar requirements for
dependency analysis tools.
is to understand if the vulnerability impacts their project [16, 25]
and estimate the effort required to mitigate the vulnerability.
Observation 17: Developers consider dependency analysis tools to
be similar to static (or dynamic) analysis tools and recommend these
tools to be integrated so that they could be applied simultaneously.
Developers #2, #3, #8, #9, and #13 considered dependency analy-
sis tools to be similar to code analysis tools (i.e., static or dynamic
analysis tools). Hence, they could be applied to the same stage of
the software development process.
Security assessment of your dependencies should stay near the
security assessment of your code, because it’s part of the
security assessment of your code. (#3)
Developers #3 and #13 even gave us the recommendation to aug-
ment the reports from a code analysis tool (for example, SonarQube)
with alerts generated by a dependency analysis tool:
Maybe it’s possible to plug the results of dependency analysis
to SonarQube? So we would be able to use it later on in our
continuous integration and do continuous code analysis. It would
be cool to have this. (#13)
Discussion.We do not find other related works that discuss the
integration of dependency analysis tools into the development
workflow. Since enterprise developers often perceive the depen-
dency analysis tools to be integration-wise similar to static analysis
tools, the tools could be applied at the same time during the devel-
opment process, e.g., build or compile time [21, 43], integrated in
an IDE [15], or into a code review [43].
5.4 RQ4: Mitigating unfixed vulnerabilities
To answer RQ4, we had examined the developers’ answers, where
they described the mitigations of the cases when no newer ver-
sion of a vulnerable dependency had a fix for a vulnerability (the
interview fragments tagged with codes fix availability and dislike).
Observation 18: When discovered a vulnerable dependency that
does not have a fix, developers first try to understand whether this
vulnerability affects their project. If its fix requires significant effort,
then developers will likely decide to stay with the vulnerability.
Although the interviewees #1, #3, #7, #11, and #23 said that they
always were able to find a fixed version of a vulnerable dependency,
the others considered such a situation as probable and problematic.
When discovered a case of a vulnerable dependency that does not
have a fix, the developers #3, #5, #7, and #14 firstly assess whether
this vulnerability impacts their projects since maybe they do not use
the affected functionality. In case a vulnerable dependency does not
impact their project, developers may just decide to leave the project
unchanged (for example, #16). Even if a project depends on the
affected functionality, but the vulnerability fix requires significant
development effort, developers #1, #2, #12, and #15 prefer to stay
with the vulnerability.
If I have to rewrite all the application and the cost is huge,
then maybe we will stay with the vulnerability. (#2)
Discussion.Several developers’ studies (e.g., [11, 25, 29]) reported
the evidence that developers try to avoid changing dependencies un-
less they understand the absolute necessity of this operation. Hence,
this finding aligns with these studies, as the first step for developers
Observation 19: If vulnerability affects their project, some devel-
opers may decide to temporarily disable the affected functionality and