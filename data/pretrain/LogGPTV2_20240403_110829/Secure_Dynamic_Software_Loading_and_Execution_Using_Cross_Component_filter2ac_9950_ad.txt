Existing ﬁle infection: It is common for malware to infect
existing ﬁles or replace them in order to run under unsuspected
software such as web browser, instant messaging, and produc-
tivity applications. These malicious components are loaded
whenever their hosting application is launched on a system,
allowing them to perform their malicious activities. Because
these components normally provide all the functionalities of
the original ﬁles, target applications keep running without any
problem. Trampoline-style payload is a breed of this offensive
method. Trampoline is a dummy function that ﬁnds its original
export using its ordinal value, and jumps to it when itself is
invoked. Such trampolines must be implemented for all the
exports of a target library. When a trampoline-style payload is
replaced with the target ﬁle, while the original ﬁle is moved or
renamed, it is loaded by its target application, still providing
the full functionality through the moved or renamed original
ﬁle.
Drive-by download attack: In recent years, attacks target-
ing web browsers and browser plugins have become one of
the most prevalent threats [12], [13]. These attacks exploit
vulnerabilities in the web browsers, their plugins and oper-
ating systems in order to download and execute malicious
software on the victim system. This kind of attack is called
“drive-by download”, and attacks known as “exploit kits” (or
exploit pack). An exploit kit contains several exploits that
can compromise diverse systems. Typically the range of the
exploits included in a single exploit kit usually covers all
the popular web browsers and plugins such as Flash, Adobe
Reader and Java so as to maximise the possibility of successful
compromise [33], [34], [35]. Also, drive-by download attack
is used in various cyber attacks from massive spamming to
highly sophisticated APT like Aurora operation [14].
This attack is usually conducted as follows. First, a victim
gets a malicious link via an email from a colleague or a link
on a friend’s Facebook post. The link is visited by a web
browser, and the exploit kit hiding on the malicious page
proﬁles the victim’s environment including version numbers of
installed plugins and the web browser. Then the best exploit
is chosen and triggered. Upon successful exploitation,
the
malware obtains the privilege of the exploited software, e.g.
Flash and Java. Finally, real malware binary is downloaded
and executed in the context of the exploited software. In this
attack, C2 from V2 is the malware binary, and C1 from V1 can
be Flash from Adobe.
Watering hole attack: Watering hole attack is similar to
drive-by download in the sense that a malware is installed
without any user consent when the user visits a web site.
However, instead of sending a spear phishing email or a social
media link, a web site that is trusted and frequently visited by
the user is compromised and poisoned with exploit kits, so the
(cid:12)(cid:27)(cid:17)(cid:19)(cid:1)(cid:27)(cid:29)
(cid:9)(cid:33)(cid:20)(cid:18)(cid:32)(cid:31)(cid:20)(cid:1)(cid:3)(cid:2)(cid:2)
(cid:5)(cid:6)(cid:5)
(cid:5)(cid:6)(cid:5)(cid:6)(cid:5)
(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)
(cid:6)(cid:5)(cid:6)(cid:2)
(cid:8)(cid:27)(cid:25)(cid:28)(cid:27)(cid:26)(cid:20)(cid:26)(cid:31)(cid:1)(cid:3)(cid:1)(cid:2)
(cid:10)(cid:27)(cid:27)(cid:23) (cid:2)
(cid:8)(cid:29)(cid:27)(cid:30)(cid:30)
(cid:16)(cid:20)(cid:29)(cid:22)(cid:1)(cid:18)(cid:17)(cid:31)(cid:22)(cid:27)(cid:26)
(cid:2)(cid:3)(cid:1)(cid:4)(cid:1)(cid:3)(cid:2)(cid:3)(cid:2)
(cid:13)(cid:29)(cid:22)(cid:21)(cid:22)(cid:26)(cid:17)(cid:24)
(cid:7)(cid:14)(cid:11)(cid:2)
(cid:15)(cid:20)(cid:31)(cid:32)(cid:29)(cid:26)
(cid:5)(cid:4)(cid:6)(cid:7)(cid:2)
Fig. 3: Prototype implementation
TABLE II: APIs intercepted by the prototype
DLL Name
ntdll.dll
KernelBase.dll
Shell32.dll
API Name
LdrLoadDll()
LdrpSearchPath()
LdrpApplyFileNameRedirection()
LdrpLoadImportModule()
LdrpFindLoadedDllByName()
LdrpFindKnownDll()
LoadLibrary()
CreateProcess()
ShellExecute()
victim system is subverted when the user visits the web site
as usual.
All
the above attack methods are prevented under the
proposed cross veriﬁcation mechanism, because V2 (vendor of
the malicious component that is supposed to be loaded) does
not exist in the trusted vendor list of C1. This case shows the
signiﬁcance of the beneﬁt provided by our cross veriﬁcation
mechanism, which is conﬁrmed in our evaluations (Section V).
Unauthorised plugin: Although it may not be malicious,
third-party plugins for an application that are not authorised
by the application vendor are not permitted to be loaded as
well. In other words, the application rejects such unauthorised
plugins so only trusted ones are loaded. This additional level
of security provided by our cross veriﬁcation mechanism im-
proves the security of many application types that are normally
extensible but have to be very secure at the same time; web
browsers, email clients, and ofﬁce productivity applications are
a few instances of such applications.
E. Mutual Distrust Case
]V1
Example: [{C1}A1
(T V LC1
) → [{C2}A2
V1 /∈ T V LC2 and V2 /∈ T V LC1
]V2
(T V LC2
)
Since the two components do not trust each other, the
loading is not allowed. This ﬁnal case is unlikely to happen, but
is still possible. For example, two different malware instances
may independently infect C1 and C2 respectively.
V. PROTOTYPE IMPLEMENTATION AND EVALUATION
We have implemented a prototype that shows the effec-
tiveness of our mechanism on Microsoft Windows. The imple-
mentation consists of two parts as shown in Figure 3; the ﬁrst
part is intercepting the operating system’s component loading
and process creation, and the second one is implementing our
mechanism after the interception.
119119
A. API Behaviour Modiﬁcation
TABLE III: DLL hijacking – Tested vulnerable applications
Since API hooking can cause memory leakage and other
unstable behaviours of target processes, we have used a popular
API hooking library, EasyHook,2 as our code base rather than
implementing all the functionalities from scratch. EasyHook
is used in several software projects such as AppStract and
Direct3DHook.
With the current prototype, we intercept several public
and native APIs listed in Table II, which belong to one of
the three system DLLs, namely ntdll.dll, kernel32.
dll/KernelBase.dll3 and Shell32.dll. Native APIs
of ntdll.dll are included to support DLL name resolution.
Once the full path of the DLL to load is determined, our cross
veriﬁcation routine is conducted before loading. Modiﬁcation
of those APIs and LoadLibrary() handles both load-time
(implicit) and run-time (explicit) dynamic loadings, covering
all the methods Windows ofﬁcially supports. The last two APIs
in Table II are intercepted to cover process creations such as
application launch by users or other software. When a program
executes another program under our prototype implementation,
the cross veriﬁcation procedure is performed. In order to build
a stable prototype, we minimised the number of APIs hooked,
and excluded some C run-time functions including system()
although they can be used for process creation.
When platform vendors such as Microsoft and Apple
adopt the proposed mechanism, API hooking is not required.
Instead, implementations of executable loaders (e.g. PE loader
of Microsoft Windows) will incorporate our mechanism, hence
making it become system-wide and more reliable. The goal of
our prototype is proving the concept of the cross veriﬁcation
mechanism, not providing product-level implementation.
B. Cross Veriﬁcation
For the cross veriﬁcation implementation, we have used
self-signed certiﬁcates and conﬁgured our testbed (a Microsoft
Windows 7 and XP SP3 virtual machines) to trust them rather
than purchasing a code signing package, because it is enough
to show the effectiveness of the cross veriﬁcation mechanism.
Microsoft guideline and best practices for code signing were
followed when signing test binaries [16], [17].
With regard to the trusted vendor list that is introduced in
the proposed mechanism, we added this information to the MS-
DOS 2.0 section (also known as MS-DOS stub) of Portable
Executable (PE), which exists in every PE ﬁle. This section
makes PE be a valid MS-DOS executable ﬁle, but it is not
used on Microsoft Windows, thus safe to use for adding some
strings such as a trusted vendor list to PE ﬁles. Furthermore, it
assures the integrity of the trusted vendor list, since the hash
value for digital signature is calculated based on this MS-DOS
and other PE sections.
Next, we implemented a list comparison function that is
utilised by the hooks set up by EasyHook. In the hooks,
this test function is invoked twice, one for caller and the
other for callee veriﬁcation. For instance, when an application
2http://easyhook.codeplex.com
3On Windows 7, KernelBase.dll gets functionality from kernel32.
dll and advapi32.dll. The existing binaries forward calls down to the
new binary rather than handling them directly [36].
Tested Software
Microsoft PowerPoint 2010
Microsoft Excel 2010
Microsoft Outlook 2010
Microsoft Word 2010
Microsoft OneNote 2010 Microsoft Publisher 2010
Acrobat Reader 9.4.0
iTunes 10
Foxit Reader 4.2
explicitly loads a dynamic component, LoadLibrary() is
invoked and intercepted by the hook. Then the test function
checks the trust relationship between the application and the
component. Only when this veriﬁcation is successful,
the
original LoadLibrary() is called and hence the component
can be loaded. Otherwise, the hook returns NULL, which
means the component loading has failed.
C. Evaluation of the Prototype
Working Example: This evaluation shows how the pro-
totype works in general. We have used two open source
applications, Firefox and Thunderbird, for this evaluation.
Since they are open source, we could build and sign them
with one of our own private key (code signing key of a major
software vendor). Then, we generated all the cases discussed
in Section IV by adjusting the trusted vendor lists of the two
applications’ components and intentionally introducing DLL
hijacking vulnerabilities at the source code level. Next, we
developed a dummy malicious DLL (mal.dll) that created
a ﬁle in the system temporary folder as an evidence of
successful compromise, and signed it with another private
key (stolen key). This dummy ﬁle was placed in the paths
where the vulnerable versions of the two applications try
to load mal.dll. After launching the two applications, we
veriﬁed the malicious DLL was not loaded because the cross
veriﬁcation failed. Based on this basic working evaluation,
we have tested the proposed mechanism against real world
vulnerabilities and malware as follows.
DLL Hijacking: We have collected applications that are
vulnerable to DLL hijacking, and tested them with the mali-
cious DLL to verify if the prototype can block malicious DLL
loadings. The list of tested vulnerable applications is given in
Table III. First, we have signed and patched PE ﬁles of the
tested applications so that they have a digital signature and a
trusted vendor list; since offset to a trusted vendor list is ﬁxed
to the MS-DOS header, we could automate the patching pro-
cess. Then, we have placed the malicious DLL at the current
working directory or application installation paths with hijack-
able ﬁlenames; for instance, a malicious imeshare.dll is
located at the Microsoft Ofﬁce installation path for Microsoft
Word 2010. We conﬁrmed that the malicious DLLs were not
loaded although the malicious DLL ﬁles were signed, because
the vendor of the stolen key was not included in the trusted
vendor list. This evaluation is particularly important in that
these loading failures do not affect the normal execution of the
tested applications. In other words, there is virtually no side
effect. This is because DLL hijacking attacks usually utilise
ﬁle planting techniques such as carpet bombing, and drop a
DLL that the host program tries to ﬁnd, but fails to locate
and load; such DLLs include debugging, language or platform-
speciﬁc libraries and resources, which have been excluded in
the release version or in speciﬁc distributions [2].
120120
TABLE IV: Tested malware instances and their offensive
techniques
Malware
Bleeding Life 2 (exploit kit)
Shylock
POWELIKS
Pigeon/Zekos
Stuxnet