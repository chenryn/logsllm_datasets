chain ecosystem. We implemented Mitosis on top of Fabric, using
Raft [15] for the underlying consensus protocol as it is one of the
most widely-deployed CFT protocols. We implemented three func-
tionalities: Transfer of Knowledge, Transfer of Asset, and Chain
Division (cf. Section 3), which we describe below.
We implemented two versions of the Transfer of Knowledge
functionality: the first is a generic proof based on predicates eval-
uated using data known by the chaincode; the second one is a
transaction inclusion proof.
ToK.GenerateProof(P, τ). A chaincode evaluates the predicate P
and returns verdict v ∈ {0, 1}. We consider as a sufficient proof
the endorsement collection about the latter evaluation, i.e., π is a
collection of signatures for a quorum of peers in the source chain.
The tag τ is included in the signed statement, to ensure freshness
of the information.
ToK.VerifyProof(π , τ). Under our assumptions that the verifying
client is always able to recompute the correct quorum of a given
chain, the verification of π is simply a verification that the τ is
correct, that the signatures are valid and that the set of signers
forms a valid quorum. Proofs can be verified by any device (e.g.
computer/mobile device) or a blockchain (through a chaincode).
We implemented the transfer of asset as detailed below.
ToA.Lock(a, At , Ct). The locking mechanism may vary with each
use case, and it may follow different logics for each asset. In our eval-
uation setup, we added a locked field to the properties of our assets.
When locking an asset, locked is set to True and the chaincode
prevents any additional modification of the asset corresponding
asset. The locking mechanism further includes a target chain Ct
and an address At in order to prevent double spending. The proof is
built as a proof of knowledge that the asset has indeed been locked.
ToA.Claim(πlock). An asset can be claimed on the destination
chain as long as the tag τ of the knowledge proof is correct, in
which case the asset is automatically transferred to the intended
address At . If the tag is incorrect, or the address is invalid, then
the transaction fails “successfully”, the failure is recorded to the
chain, and a proof πabort can be retrieved. Lastly, if the transaction
is successful, the asset is transferred to the target address At . A
success transaction πclaim can then be generated to finalize the
transfer on the original chain.
ChainDivision. We implemented the chain-division process in
Fabric as a two-step process: first we create a new chain with the
same state of the parent chain, then we assign the different peers
between the two chain according to the assignment scheme in
Section 3.4.
6 IMPLEMENTATION AND EVALUATION
In this section, we evaluate the performance of our Mitosis based
on Hyperledger Fabric.
6.1 Implementation Setup
We initialize a Fabric network with n peers and n orderers inside
docker containers, for up to 44 nodes, and we then proceed with
a chain split resulting in n
2 peers for each sibling chain. Since the
underlying consensus, Raft, is a CFT protocol, the number of faults
in each sibling chain must be below 50% (i.e., αi = 1
2 in our analysis,
cf. Figure 2b). Recall that, as shown in Figure 2b, Mitosis preserves
security with probability below 0.05 for n = 44 as long as the faulty
ratio β in the parent chain is below 40%, i.e., as long as up to f = 17
peers are faulty.
In each chain, we install the two following chaincodes: a chain
manager, for verifying proofs and monitoring the current chain
configuration, and an asset manager, which is responsible for cross-
chain transfers. We evaluate the time required for dividing chains,
as well as for generating and verifying cross-chain transfers, for
both asset and knowledge transfers.
For each experiment, we deploy the different docker containers
on one server equipped with 6-Core Intel Xeon E-2176G and 128 GB
RAM. We consider different configurations by varying the number
of nodes, for 2 ≤ n ≤ 44, and we measure the performance of the
various operations for each configuration. In the case of transfer
of knowledge, we measure the performance of the individual op-
erations (i.e., proof generation and proof verification). As for the
performance of asset transfer, we measure the overall latency for
781ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Giorgia Azzurra Marson, Sebastien Andreina, Lorenzo Alluminio, Konstantin Munichev, and Ghassan Karame
(a) Proof size.
(b) Proof generation latency.
(c) Proof verification latency (off chain).
(d) Proof verification latency (on chain).
(e) Cross-chain transfer size.
(f) Cross-chain transfer latency.
Figure 3: Performance of Mitosis functionalities: size and latency for proof of knowledge generation (Figures 3a–3b), verifica-
tion (Figures 3d–3c), and for cross-chain asset transfer (Figures 3e–3f), with respect to an increasing number of peers in each
chain.
an end-user to transfer an asset from one chain another. Finally, we
evaluate chain division by measuring the total downtime caused
by this operation.
6.2 Evaluation Results
The results of our evaluation are shown in Figure 3 (each datapoint
averages the results of at least 5 independent runs). Every plot
illustrates the performance trend of a given operation as the number
of peers n increases. More specifically, Figure 3a shows the size of
a proof of knowledge while Figure 3b depicts the time required to
generate the proof. Figures 3c and 3d show the time required to
verify a proof, off-chain (i.e. locally) and on-chain (i.e. by a smart
contract), respectively. Finally, Figures 3e and 3f show proof size
and latency required to perform a cross-chain transfer, compared
to regular in-chain transfers.
Impact of chain splitting. The chain-division operation triggers
a complex process that requires running a validator assignment
scheme and a reconfiguration process to set up the two sibling
chains. In additional experiments, we measured the latency of the
chain division process in terms of incurred downtime while the
division process is ongoing. Our experiments show that the chain-
splitting latency grows linearly with the number of peers in the
parent chain, e.g., it is about 35 seconds for a parent chain con-
taining n = 10 peers, and about 72 seconds for n = 20, which is
negligible compared to the frequency of chain splitting, which may
range between days and months. The linear dependency can be
partly due to the bootstrapping of each container, which approxi-
matively takes constant time. We argue that the downtime incurred
is manageable, especially because division happens rarely.
Performance of Transfer of Knowledge. In Figure 3a, we analyze
the size of a proof of knowledge. Since a proof consists of the con-
catenation of the various peers’ signatures, its size grows linearly
with the number of nodes. An optimized implementation would
aggregate the signatures rather than simply concatenating them,
allowing to go from linear to constant size. This is a limitation of the
current Fabric implementation—which does not allow aggregation.
Notice that the transaction inclusion proof is roughly twice as big
as the generic proof: indeed, the inclusion proof contains i) a fully
endorsed original transaction, and ii) an endorsement that such
transaction has been executed, thereby combining endorsement
collections twice. Finally, the latency to generate and to verify a
proof, respectively, are shown in Figures 3b–3d. We observe a simi-
lar trend in all cases: the latency grows linearly with the number
of nodes, again because of the non-aggregated signatures to be
collected, resp. verified, for all peers. Besides, notice that verifying
an off-chain proof (Figure 3c) is much faster than an on-chain veri-
fication (Figure 3d), on average by a factor of 4, due to the amount
of endorsements to be collected for on-chain transactions in Fabric.
We emphasize that these costs are Fabric-specific, and hence are
shared among all cross-chain transfer implementations.
48121620242832364044Number of Peers1020304050Size [KB]Generic ProofTx inclusion Proof48121620242832364044Number of Peers650700750800850Latency [ms]Generic ProofTx inclusion Proof48121620242832364044Number of Peers480500520540560580600620Latency [ms]Generic ProofTx inclusion Proof48121620242832364044Number of Peers2.83.03.23.43.63.8Latency [s]Generic ProofTx inclusion Proof48121620242832364044Number of Peers0255075100125150175200Size [KB]Cross-chain transferIn chain transfer48121620242832364044Number of Peers246810Latency [s]Cross-chain transferIn chain transfer782Mitosis: Practically Scaling Permissioned Blockchains
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
[7] Hung Dang, Tien Tuan Anh Dinh, Dumitrel Loghin, Ee-Chien Chang, Qian Lin,
and Beng Chin Ooi. 2019. Towards Scaling Blockchain Systems via Sharding. In
SIGMOD Conference. ACM, 123–140.
[8] Bernardo David, Bernardo Magri, Christian Matt, Jesper Buus Nielsen, and Daniel
Tschudi. 2021. GearBox: An Efficient UC Sharded Ledger Leveraging the Safety-
Liveness Dichotomy. IACR Cryptol. ePrint Arch. (2021), 211.
[9] Arthur Gervais, Ghassan O. Karame, Karl Wüst, Vasileios Glykantzis, Hubert
Ritzdorf, and Srdjan Capkun. 2016. On the Security and Performance of Proof of
Work Blockchains. In CCS. ACM, 3–16.
[10] Eleftherios Kokoris-Kogias, Philipp Jovanovic, Linus Gasser, Nicolas Gailly, and
Bryan Ford. 2017. OmniLedger: A Secure, Scale-Out, Decentralized Ledger. IACR
Cryptol. ePrint Arch. 2017 (2017), 406.
[11] Wenting Li, Alessandro Sforzin, Sergey Fedorov, and Ghassan Karame. 2017.
Towards Scalable and Private Industrial Blockchains. In Proceedings of the ACM
Workshop on Blockchain, Cryptocurrencies and Contracts. ACM, 9–14.
[12] Jian Liu, Wenting Li, Ghassan O. Karame, and N. Asokan. 2019. Scalable Byzantine
Consensus via Hardware-Assisted Secret Sharing. IEEE Trans. Computers 68, 1
(2019), 139–151.
[13] Loi Luu, Viswesh Narayanan, Chaodong Zheng, Kunal Baweja, Seth Gilbert, and
Prateek Saxena. 2016. A Secure Sharding Protocol For Open Blockchains. In CCS.
ACM, 17–30.
[14] Satoshi Nakamoto. 2008. Bitcoin: A peer-to-peer electronic cash system.
[15] Diego Ongaro and John K. Ousterhout. 2014. In Search of an Understandable Con-
sensus Algorithm. In USENIX Annual Technical Conference. USENIX Association,
305–319.
[16] Joseph Poon and Thaddeus Dryja. 2016. The Bitcoin Lightning Network: Scal-
able Off-Chain Instant Payments. https://lightning.network/lightning-network-
paper.pdf.
[17] Serguei Popov. 2018. The Tangle.
[18] Raiden Network [n. d.]. The Raiden Network. https://raiden.network/. Accessed:
[19] Federal Council report. 2018. Legal frameworkfor distributed ledger technology
2021-06-28.
and blockchain in Switzerland.
arXiv:1311.5939 [math.PR]
[20] Matthew Skala. 2013. Hypergeometric tail inequalities: ending the insanity.
[21] Yonatan Sompolinsky, Yoad Lewenberg, and Aviv Zohar. 2016. SPECTRE: A Fast
and Scalable Cryptocurrency Protocol. IACR Cryptol. ePrint Arch. 2016 (2016),
1159.
[22] Yonatan Sompolinsky and Aviv Zohar. 2013. Accelerating Bitcoin’s Transaction
Processing. Fast Money Grows on Trees, Not Chains. IACR Cryptol. ePrint Arch.
2013 (2013), 881.
[23] Jiaping Wang and Hao Wang. 2019. Monoxide: Scale out Blockchains with
Asynchronous Consensus Zones. In NSDI. USENIX Association, 95–112.
[24] Maofan Yin, Dahlia Malkhi, Michael K. Reiter, Guy Golan-Gueta, and Ittai Abra-
ham. 2019. HotStuff: BFT Consensus with Linearity and Responsiveness. In
PODC. ACM, 347–356.
[25] Mahdi Zamani, Mahnush Movahedi, and Mariana Raykova. 2018. RapidChain:
Scaling Blockchain via Full Sharding. In CCS. ACM, 931–948.
[26] Alexei Zamyatin, Mustafa Al-Bassam, Dionysis Zindros, Eleftherios Kokoris-
Kogias, Pedro Moreno-Sanchez, Aggelos Kiayias, and William J. Knottenbelt.
2019. SoK: Communication Across Distributed Ledgers. https://eprint.iacr.org/
2019/1128. Financial Cryptography and Data Security 2021 (to appear).
Performance of cross-chain transfer. Figures 3e shows the average
size for a cross-chain asset transfer, combining 3 messages for
lock, claim, and validate operations, and illustrates also the size of
an in-chain transaction (that changes the ownership of an asset
within the same chain) for comparison. Similarly, Figure 3f reports
the latency of a cross-chain asset transfer, measured as the time
interval starting with the generation of a lock transaction until the
corresponding validate transaction has been fully ordered. Again,
both size and latency scale linearly with the number of peers, being
the asset transfer based on three knowledge transfers (i.e., the same
arguments as above apply).
7 CONCLUSION
Scalability remains one of the major challenges that hinders the
adoption of permissioned blockchains in real-world applications.
While the literature features a number of contributions that propose
the reliance on sharding within permissioned blockchains, all exist-
ing solutions make the implicit assumption that all participating
nodes are fixed upfront and keep participating in the consensus
throughout the lifetime of the system.
In this paper, we presented, Mitosis, the first solution for per-
missioned blockchains that supports the dynamic construction of
shards, allows nodes to join and leave shards at will, and enables
heterogenous shards to form and interact. Inspired by cell mitosis,
Mitosis triggers sharding under high participation, and merges
shards in case of low participation. As far as we are aware, Mitosis
emerges as the first solution for permissioned blockchains that al-
lows nodes to reactively self-organize to meet optimal performance.
We analyzed the security of Mitosis and showed that, under
mild assumptions on the number of faults among participants, our
proposal to dynamically create shards via chain-division does not
compromise the security of the blockchain ecosystem. We also
implemented Mitosis and integrated it within Hyperledger Fabric.
Our evaluation results show that Mitosis incurs little modifications
and negligible overhead when integrated with Hyperledger Fabric.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers for their
constructive feedback. This work was supported in part by the by
the European Commission H2020 TeraFlow Project under Grant
Agreement No 101015857.
REFERENCES
[1] Mohammad Javad Amiri, Divyakant Agrawal, and Amr El Abbadi. 2021. SharPer:
Sharding Permissioned Blockchains Over Network Clusters. In SIGMOD Confer-
ence. ACM, 76–88.
[2] Elli Androulaki, Christian Cachin, Angelo De Caro, and Eleftherios Kokoris-
Kogias. 2018. Channels: Horizontal Scaling and Confidentiality on Permissioned
Blockchains. In ESORICS (1) (Lecture Notes in Computer Science, Vol. 11098).
Springer, 111–131.
[3] Georgia Avarikioti, Eleftherios Kokoris-Kogias, and Roger Wattenhofer. 2019.
Divide and Scale: Formalization of Distributed Ledger Sharding Protocols. CoRR
abs/1910.10434 (2019). arXiv:1910.10434 http://arxiv.org/abs/1910.10434
[4] Adam Back, Matt Corallo, Luke Dashjr, Mark Friedenbach, Gregory Maxwell,
Andrew Miller, Andrew Poelstra, Jorge Timón, and Pieter Wuille. 2014. En-
abling Blockchain Innovations with Pegged Sidechains. https://blockstream.com/
sidechains.pdf.
[5] Miguel Castro and Barbara Liskov. 1999. Practical Byzantine Fault Tolerance. In
OSDI. USENIX Association, 173–186.
[6] David Chaum, Christian Grothoff, and Thomas Moser. 2021. How to Issue a
Central Bank Digital Currency. CoRR abs/2103.00254 (2021).
783