title:Angora: Efficient Fuzzing by Principled Search
author:Peng Chen and
Hao Chen
2018 IEEE Symposium on Security and Privacy
Angora: Efﬁcient Fuzzing by Principled Search
Peng Chen
ShanghaiTech University
PI:EMAIL
Hao Chen
University of California, Davis
PI:EMAIL
Abstract—Fuzzing is a popular technique for ﬁnding software
bugs. However, the performance of the state-of-the-art fuzzers
leaves a lot to be desired. Fuzzers based on symbolic execution
produce quality inputs but run slow, while fuzzers based on
random mutation run fast but have difﬁculty producing quality
inputs. We propose Angora, a new mutation-based fuzzer that
outperforms the state-of-the-art fuzzers by a wide margin.
The main goal of Angora is to increase branch coverage
by solving path constraints without symbolic execution. To
solve path constraints efﬁciently, we introduce several key
techniques: scalable byte-level taint tracking, context-sensitive
branch count, search based on gradient descent, and input
length exploration. On the LAVA-M data set, Angora found
almost all the injected bugs, found more bugs than any other
fuzzer that we compared with, and found eight times as many
bugs as the second-best fuzzer in the program who. Angora
also found 103 bugs that the LAVA authors injected but could
not trigger. We also tested Angora on eight popular, mature
open source programs. Angora found 6, 52, 29, 40 and 48
new bugs in ﬁle, jhead, nm, objdump and size, respectively. We
measured the coverage of Angora and evaluated how its key
techniques contribute to its impressive performance.
1. Introduction
Fuzzing is a popular technique for ﬁnding software bugs.
Coverage-based fuzzers face the key challenge of how to
create inputs to explore program states. Some fuzzers use
symbolic execution to solve path constraints [5, 8], but
symbolic execution is slow and cannot solve many types
of constraints efﬁciently [6]. To avoid these problems, AFL
uses no symbolic execution or any heavy weight program
analysis [1]. It instruments the program to observe which
inputs explore new program branches, and keeps these in-
puts as seeds for further mutation. AFL incurs low overhead
on program execution, but most of the inputs that it creates
are ineffective (i.e., they fail to explore new program states)
because it blindly mutates the input without taking advan-
tage of the data ﬂow in the program. Several fuzzers added
heuristics to AFL to solve simple predicates, such as “magic
bytes” [25, 19], but they cannot solve other path constraints.
© 2018, Peng Chen. Under license to IEEE.
DOI 10.1109/SP.2018.00046
711
TABLE 1: Bugs found on the LAVA-M data set by different
fuzzers. Note that Angora found more bugs than listed by
LAVA authors.
Program Listed
bugs
28
44
57
2136
uniq
base64
md5sum
who
Angora
29
48
57
1541
Bugs found by each fuzzer
AFL FUZZER SES VUzzer Steelix
9
0
0
1
27
17
Fail
50
7
43
28
194
7
7
2
0
0
9
0
18
We designed and implemented a fuzzer, called Angora1,
that explores the states of a program by solving path con-
straints without using symbolic execution. Angora tracks the
unexplored branches and tries to solve the path constraints
on these branches. We introduced the following techniques
to solve path constraints efﬁciently.
• Context-sensitive branch coverage. AFL uses context-
insensitive branch coverage to approximate program
states. Our experience shows that adding context to
branch coverage allows Angora to explore program
states more pervasively (Section 3.2).
• Scalable byte-level taint tracking. Most path constraints
depend on only a few bytes in the input. By track-
ing which input bytes ﬂow into each path constraint,
Angora mutates only these bytes instead of the entire
input, therefore reducing the space of exploration sub-
stantially (Section 3.3).
• Search based on gradient descent. When mutating the
input to satisfy a path constraint, Angora avoids sym-
bolic execution, which is expensive and cannot solve
many types of constraints. Instead, Angora uses the
gradient descent algorithm popular in machine learning
to solve path constraints (Section 3.4).
• Type and shape inference. Many bytes in the input
are used collectively as a single value in the program,
e.g., a group of four bytes in the input used as a 32-
bit signed integer in the program. To allow gradient
descent to search efﬁciently, Angora locates the above
group and infers its type (Section 3.5).
1. The Angora rabbit has longer, denser hair than American Fuzzy Lop.
We name our fuzzer Angora to signify that it has better program coverage
than AFL while crediting AFL for its inspiration.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:42 UTC from IEEE Xplore.  Restrictions apply. 
• Input length exploration. A programs may explore cer-
tain states only when the length of the input exceeds
some threshold, but neither symbolic execution nor
gradient descent can tell the fuzzer when to increase the
length of the input. Angora detects when the length of
the input may affect a path constraint and then increases
the input length adequately (Section 3.6).
Angora outperformed state-of-the-art fuzzers substan-
tially. Table 1 compares the bugs found by Angora with
other fuzzers on the LAVA-M data set [9]. Angora found
more bugs in each program in the data set. Particularly,
in who Angora found 1541 bugs, which is eight times as
many bugs as found by the second-best fuzzer, Steelix.
Moreover, Angora found 103 bugs that the LAVA authors
injected but could not trigger. We also tested Angora on
eight popular, mature open source programs. Angora found
6, 52, 29, 40 and 48 new bugs in ﬁle, jhead, nm, objdump
and size, respectively (Table 5). We measured the coverage
of Angora and evaluated how its key techniques contribute
to its impressive performance.
2. Background: American Fuzzy Lop (AFL)
Fuzzing is an automated testing technique to ﬁnd
bugs. American Fuzzy Lop (AFL) [1] is a state-of-the-
art mutation-based graybox fuzzer. AFL employs light-
weight compile-time instrumentation and genetic algorithms
to automatically discover test cases that likely trigger new
internal states in the targeted program. As a coverage-based
fuzzer, AFL generates inputs to traverse different paths in
the program to trigger bugs.
2.1. Branch coverage
AFL measures a path by a set of branches. During each
run, AFL counts how many times each branch executes.
It represents a branch as a tuple (lprev, lcur), where lprev
and lcur are the IDs of the basic blocks before and after
the conditional statement, respectively. AFL gets the branch
coverage information by using lightweight instrumentation.
The instrumentation is injected at each branch point at
compile time. For each run, AFL allocates a path trace table
to count how many times each branch of every conditional
statement executes. The index to the table is the hash of a
branch, h(lprev, lcur), where h is a hash function.
AFL also keeps a global branch coverage table across
different runs. Each entry contains an 8-bit vector that
records how many times the branch executes in different
runs. Each bit in this vector b represents a range: b0, . . . , b7
represent
[16, 31],
[32, 127], [128,∞), respectively. For example, if b3 is set,
then it indicates that there exists a run where this branch
executed between 4 and 7 times, inclusively.
the ranges [1],
[8, 15],
[4, 7],
[2],
[3],
AFL compares the path trace table and branch coverage
table to determine, heuristically, whether a new input trig-
gers a new internal state of the program. An input triggers
a new internal state if either of the following happens:
i.e.,
• The program executes a new branch,
the path
trace table has an entry for this branch but the branch
coverage table has no entry for this branch.
• There exists a branch where the number of times, n,
this branch executed in the current run is different from
any previous runs. AFL determines this approximately
by examining whether the bit representing the range of
n was set in the corresponding bit vector in the branch
coverage table.
2.2. Mutation strategies
AFL applies the following mutations on the input ran-
domly [3].
• Bit or byte ﬂips.
• Attempts to set “interesting” bytes, words, or dwords.
• Addition or subtraction of small
integers to bytes,
words, or dwords.
• Completely random single-byte sets.
• Block deletion, block duplication via overwrite or in-
sertion, or block memset.
• Splice two distinct input ﬁles at a random location.
3. Design
3.1. Overview
AFL and other similar fuzzers use branch coverage as
the metric. However, they fail to consider the call context
when calculating branch coverage. Our experience shows
that without context, branch coverage would fail to explore
program states adequately. Therefore, we propose context-
sensitive branch coverage as the metric of coverage (Sec-
tion 3.2).
Algorithm 1 shows Angora’s two stages: instrumentation
and the fuzzing loop. During each iteration of the fuzzing
loop, Angora selects an unexplored branch and searches
for an input that explores this branch. We introduce the
following key techniques to ﬁnd the input efﬁciently.
• For most conditional statements, its predicate is inﬂu-
enced by only a few bytes in the input, so it would
be unproductive to mutate the entire input. Therefore,
when exploring a branch, Angora determines which
input bytes ﬂow into the corresponding predicate and
focuses on mutating these bytes only (Section 3.3).
• After determining which input bytes to mutate, Angora
needs to decide how to mutate them. Using random
or heuristics-based mutations is unlikely to ﬁnd sat-
isfactory values efﬁciently. Instead, we view the path
constraint on a branch as a constraint on a blackbox
function over the input, and we adapt the gradient de-
scent algorithm for solving the constraint (Section 3.4).
• During gradient descent, we evaluate the blackbox
function over its arguments, where some arguments
consist of multiple bytes. For example, when four
consecutive bytes in the input that are always used
together as an integer ﬂow into a conditional statement,
712
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:42 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Angora’s fuzzing loop. Each while loop has a
budget (maximum allowed number of iterations)
1: function FUZZ(program, seeds)
2:
Instrument program in two versions: programnt
(no taint tracking) and programt (with taint tracking).
branches ← empty hash table
(cid:2) Key: an
unexplored branch b. Value: the input that explored b’s
sibling branch.
for all input ∈ seeds do
path ← Run programt(input)
for all unexplored branch b on path do
branches[b] ← input
end for
end for
while branches (cid:5)= ∅ do
Select b from branches
while b is still unexplored do
(cid:2) (Algorithm 5)
Mutate branches[b]
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
to get a new input
(cid:2)
)
Run programnt(input
if input
path
for all unexplored branch b
] ← input
(cid:2)
(cid:2) explored new branches then
(cid:2) ← Run programt(input
)
(cid:2) on path
(cid:2)
branches[b
(cid:2)
(cid:2) do
end for
end if
if b was explored then
branches ← branches − {b}
input
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
end while
25:
26: end function
end if
end while
we ought
to consider these four bytes as a single
argument to the function instead of as four independent
arguments. To achieve this goal, we need to infer which
bytes in the input are used collectively as a single value
and what the type of the value is (Section 3.5).
• It would be inadequate to only mutate bytes in the
input. Some bugs are triggered only after the input is
longer than a threshold, but this creates a dilemma on
deciding the length of the input. If the input is too
short, it may not trigger certain bugs. But if the input
is too long, the program may run too slow. Most fuzzers
change the length of inputs using ad hoc approaches.
By contrast, Angora instruments the program with code
that detects when a longer input may explore new
branches and that determines the minimum required
length (Section 3.6).
Figure 1 shows a diagram of the steps in fuzzing a con-
ditional statement. The program in Figure 2 demonstrates
these steps in action.
• Byte-level taint tracking: When fuzzing the conditional
statement on Line 2, using byte-level taint tracking,
Angora determines that bytes 1024–1031 ﬂow into this
expression, so it mutates these bytes only.
713
(cid:2)
) ≤ 0.
• Search algorithm based on gradient descent: Angora
needs to ﬁnd inputs that run both branches of the
conditional statement on Line 2, respectively. Angora
treats the expression in the conditional statement as
a function f (x) over the input x, and uses gradient
(cid:2) such that f (x) > 0
descent to ﬁnd two inputs x and x
and f (x
• Shape and type inference: f (x) is a function over the
vector x. During gradient descent, Angora computes
the partial derivative of f over each component of x
separately, so it must determine each component and
its type. On Line 2, Angora determines that x consists
of two components each consisting of four bytes in the
input and having the type 32-bit signed integer.
• Input length exploration: main will not call foo unless
the input has at least 1032 bytes. Instead of blindly
trying longer inputs, we instrument common functions
that read from input and determine if longer input
would explore new states. For example, if the initial
input is shorter than 1024 bytes, then the conditional
statement on Line 12 will execute the true branch.
Since the return value of fread is compared with
1024, Angora knows that only inputs at least 1024
bytes long will explore the false branch. Similarly, the
instrumentation on Lines 16 and 19 instructs Angora
to extend the input to at least 1032 bytes to execute the
function foo.
3.2. Context-sensitive branch count
Section 2 describes AFL’s branch coverage table. Its
design has several advantages. First, it is space efﬁcient. The
number of branches is linear in the size of the program.
Second, using ranges to count branch execution provides
good heuristics on whether a different execution count indi-
cates new internal state of the program. When the execution
count is small (e.g., less than four), any change in the count
is signiﬁcant. However, when the execution count is large
(e.g., greater than 32), a change has to be large enough to
be considered signiﬁcant.
But this design has a limitation. Because AFL’s branches
are context-insensitive, they fail to distinguish the executions
of the same branch in different contexts, which may over-
look new internal states of the program. Figure 3 illustrates
this problem. Consider the coverage of the branch on Line 3.
During the ﬁrst run, the program takes the input “10”. When
it calls f() on Line 19, it executes the true branch on
Line 4. Later, when it calls f() on Line 21, it executes
the false branch on Line 10. Since AFL’s deﬁnition of
branch is context-insensitive, it thinks that both branches
have executed. Later, when the program takes a new input
“01”, AFL thinks that this input triggers no new internal
state, since both the branches on Line 4 and 10 executed
in the previous run. But in fact this new input triggers a
new internal state, as it will cause crash on Line 6 when
input[2]==1.
We incorporate context into the deﬁnition of branches.
We deﬁne a branch as a tuple (lprev, lcur, context), where
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:42 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1: Steps in fuzzing a conditional statment.
j * 2 > 0) {
} else {
// some code
if (i * i -
1 void foo(int i, int j) {
2
3
4
5
6
7 }
8
9 int main() {