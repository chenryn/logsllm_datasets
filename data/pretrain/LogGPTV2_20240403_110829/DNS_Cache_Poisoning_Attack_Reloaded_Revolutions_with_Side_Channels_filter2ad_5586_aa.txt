title:DNS Cache Poisoning Attack Reloaded: Revolutions with Side Channels
author:Keyu Man and
Zhiyun Qian and
Zhongjie Wang and
Xiaofeng Zheng and
Youjun Huang and
Haixin Duan
DNS Cache Poisoning Attack Reloaded: Revolutions with Side
Keyu Man
PI:EMAIL
University of California, Riverside
Xiaofeng Zheng
PI:EMAIL
Qi-AnXin Group
Tsinghua University
Channels
Zhiyun Qian
PI:EMAIL
Youjun Huang
PI:EMAIL
Tsinghua University
University of California, Riverside
Zhongjie Wang
PI:EMAIL
University of California, Riverside
Haixin Duan
PI:EMAIL
Tsinghua University
Qi-AnXin Group
ABSTRACT
In this paper, we report a series of flaws in the software stack
that leads to a strong revival of DNS cache poisoning — a clas-
sic attack which is mitigated in practice with simple and effective
randomization-based defenses such as randomized source port. To
successfully poison a DNS cache on a typical server, an off-path
adversary would need to send an impractical number of 232 spoofed
responses simultaneously guessing the correct source port (16-bit)
and transaction ID (16-bit). Surprisingly, we discover weaknesses
that allow an adversary to “divide and conquer” the space by guess-
ing the source port first and then the transaction ID (leading to
only 216 + 216 spoofed responses). Even worse, we demonstrate a
number of ways an adversary can extend the attack window which
drastically improves the odds of success.
The attack affects all layers of caches in the DNS infrastructure,
such as DNS forwarder and resolver caches, and a wide range of
DNS software stacks, including the most popular BIND, Unbound,
and dnsmasq, running on top of Linux and potentially other oper-
ating systems. The major condition for a victim being vulnerable is
that an OS and its network is configured to allow ICMP error replies.
From our measurement, we find over 34% of the open resolver pop-
ulation on the Internet are vulnerable (and in particular 85% of
the popular DNS services including Google’s 8.8.8.8). Furthermore,
we comprehensively validate the proposed attack with positive
results against a variety of server configurations and network con-
ditions that can affect the success of the attack, in both controlled
experiments and a production DNS resolver (with authorization).
CCS CONCEPTS
• Networks → Cross-layer protocols; • Security and privacy
→ Network security.
KEYWORDS
DNS cache poisoning, side channel, off path attack, ICMP rate limit
This work is licensed under a Creative Commons Attribution International 4.0 License.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-7089-9/20/11.
https://doi.org/10.1145/3372297.3417280
ACM Reference Format:
Keyu Man, Zhiyun Qian, Zhongjie Wang, Xiaofeng Zheng, Youjun Huang,
and Haixin Duan. 2020. DNS Cache Poisoning Attack Reloaded: Revolutions
with Side Channels. In Proceedings of the 2020 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’20), November 9–13, 2020,
Virtual Event, USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10.
1145/3372297.3417280
1 INTRODUCTION
Domain name system (DNS) is an essential part of the Internet, orig-
inally designed to translate human-readable names to IP addresses.
Nowadays, DNS has also been overloaded with many other secu-
rity critical applications such as anti-spam defenses [38], routing
security (e.g., RPKI) [10]. In addition, DNS also plays a crucial role
in bootstrapping trust for TLS. TLS certificates are now commonly
acquired by proving the ownership of a domain [2]. Therefore, com-
promising the integrity of DNS records can lead to catastrophic
security failures, including fraudulent certificates being issued that
can compromise the underpinning of public key cryptography [9].
Historically, the very first widely publicized DNS cache poison-
ing attack was discovered by Kaminsky [39] in 2008, who demon-
strated that an off-path attacker can inject spoofed DNS responses
and have them cached by DNS resolvers. This has led to a num-
ber of DNS defenses being deployed widely, including source port
randomization [35] and “birthday protection” [29, 30]. Other de-
fenses such as 0x20 encoding [19] and DNSSEC [6] have also gained
some traction. Unfortunately, due to reasons such as incentives and
compatibility, these two defenses are still far from being widely
deployed as reported in recent studies [13, 16, 17, 36, 46, 53]. To
summarize, source port randomization becomes the most important
hurdle to overcome in launching a successful DNS cache poisoning
attack. Indeed, in the past, there have been prior attacks that at-
tempt to derandomize the source port of DNS requests [30, 32]. As
of now, they are only considered nice conceptual attacks but not
very practical. Specifically, [32] requires an attacker to bombard
the source port and overload the socket receive buffer, which is not
only slow and impractical (unlikely to succeed in time) but also
can be achieved only in a local environment with stringent RTT
requirement. In [30], it is assumed that a resolver sits behind a NAT
which allows its external source port to be derandomized, but such
a scenario is not applicable to resolvers that own public IPs.
In contrast, the vulnerabilities we find are both much more seri-
ous and generally applicable to a wide range of scenarios and condi-
tions. Specifically, we are able to launch attacks against all layers of
Session 4E: Network SecurityCCS '20, November 9–13, 2020, Virtual Event, USA1337caches which are prevalent in modern DNS infrastructure [5, 8, 54],
including application-layer DNS caches (e.g., in browsers) [5], OS-
wide caches [5], DNS forwarder caches [34] (e.g., in home routers),
and the most widely targeted DNS resolver caches. The vulnerabili-
ties also affect virtually all popular DNS software stacks, including
BIND [18], Unbound [43], and dnsmasq [40], running on top of
Linux and potentially other OSes, with the major requirement being
the victim OS allowed to generate outgoing ICMP error messages.
Interestingly, these vulnerabilities result from either design flaws
in UDP standards or subtle implementations details that lead to
side channels based on a global rate limit of ICMP error messages,
allowing derandomization of source port with great certainty.
To demonstrate the impact, we devise attack methods target-
ing two main scenarios, including DNS forwarders running on
home routers, and DNS resolvers running BIND/Unbound. With
permissions, we also tested the attack against a production DNS
resolver that serves 70 million user queries per day, overcoming
several practical challenges such as noises, having to wait for cache
timeouts, multiple backend server IPs behind the resolver frontend,
and multiple authoritative name servers. In our stress test experi-
ment, we also evaluate the attack in even more challenging network
conditions and report positive results.
In this paper, we make the following contributions:
• We systematically analyze the interaction between application-
and OS-level behaviors, leading to the discovery of general UDP
source port derandomization strategies, the key one being a
side channel vulnerability introduced by a global rate limit of
outgoing ICMP error messages.
• We research the applicability of the source port derandomization
strategies against a variety of attack models. In addition, to allow
sufficient time in conducting the derandomization attack, we
develop novel methods to extend the attack window significantly,
one of them again leveraging the rate limiting feature (this time
in the application layer).
• We conduct extensive evaluation against a wide variety of server
software, configuration, and network conditions and report pos-
itive results. We show that in most settings, an attacker needs
only minutes to succeed in an end-to-end poisoning attack. We
also discuss the most effective and simple mitigations.
2 CURRENT STATE OF DNS CACHE
POISONING ATTACKS
The classic DNS cache poisoning attack in 2008 [39] targeted a
DNS resolver by having an off-path attacker tricking a vulnerable
DNS resolver to issue a query to an upstream authoritative name
server. Then the attacker attempts to inject rogue responses with
the spoofed IP of the name server. If the rogue response arrives
before any legitimate ones, and if it matches the “secrets” in the
query, then the resolver will accept and cache the rogue results.
Specifically, the attacker needs to guess the correct source/destina-
tion IP, source/destination port, and the transaction ID (TxID) of
the query. The transaction ID is 16-bit long. At the time when both
the source and destination port (i.e., 53) were fixed, 16-bit is the
only randomness. Thus an off-path attacker can simply brute force
all possible values with 65,536 rogue responses, not to mention a
few optimizations such as birthday attacks that can speed the attack
even further.
2.1 State-of-the-Art Defenses
A number of defenses have since then been promoted to mitigate
the threat of DNS cache poisoning. They effectively render the
original attack no longer feasible. We describe below the most
widely known and deployed defenses.
• Randomization of source port [35] is perhaps the most effective
and widely deployed defense as it increases the randomness from
16 bits to 32 bits. As an off-path attacker has to guess both the
source port and TxID at the same time.
• Randomization of capitalization of letters in domain names,
i.e., 0x20 encoding [19]. The offered randomness depends on the
number of letters and can be quite effective also, especially for
long names. Unfortunately, even though it is a simple change to
the protocol, in practice it has significant compatibility issues with
authoritative name servers encountered on the Internet [17, 21].
Therefore, most popular public resolvers now refrain from using
0x20 encoding by default. For example, Google DNS uses it only for
a set of whitelisted name servers [21]; Cloudflare has even recently
disabled 0x20 encoding altogether [16]. At the time of writing, we
find only two (i.e., openNIC and Verisign) out of the 16 popular
public DNS services we measured (see the other 14 in Table 2) use
it by default to a test name server we setup. And the result roughly
matches what was observed in a recent study [53].
• Randomization of the choice of name servers (server IP ad-
dresses) [31]. The offered randomness depending on the number
of name servers. In practice, most domains employ less than 10
name servers, translating to only 2 to 3 bits. In addition, it has been
shown that an attacker can induce query failures against certain
name servers and therefore effectively “pinning” a resolver to the
one remaining name server [30].
• DNSSEC [6]. The success of DNSSEC depends on the support
of both resolvers and authoritative name servers. However, only
a small fraction of domains is signed — 0.7% for .com domains,
1% for .org domains, and 1.85% for Top Alexa 10K domains, as
reported in 2017 [13]. In the same study, it is also reported that only
12% of the resolvers enabling DNSSEC actually attempt to validate
the received records. As a result, the overall deployment rate of
DNSSEC is far from satisfactory.
2.2 New Attack Surface in the DNS Hierarchy
As alluded to earlier, modern DNS infrastructure has multiple layers
of caching. Figure 1 provides a concise view: a client application
often initiates a DNS query (through an API call such gethost-
byname()) to an OS stub resolver — typically a separate system
process that maintains an OS-wide DNS cache. The stub resolver
does not perform any iterative queries; instead, it always forwards
the request to the next layer up, a DNS forwarder which also for-
wards queries to its upstream recursive resolver. DNS forwarders
are commonly found in Wi-Fi routers (e.g., in a home) and they
maintain a dedicated DNS cache also. It is the recursive resolver
that does the real job to iteratively query the authoritative name
servers. The answers are then returned and cached in each layer.
Session 4E: Network Security CCS '20, November 9–13, 2020, Virtual Event, USA1338All layers of caches are technically subject to the DNS cache
poisoning attack. Unfortunately, most newly proposed attacks were
focused on resolvers [9, 29, 30, 32], and very limited investigations
have been done on stub resolvers [5] and forwarders [55].
Figure 1: DNS Infrastructure with Multiple Layers of
Caching
Figure 2: Attack Workflow
3 ATTACK OVERVIEW
We propose a general and novel attack, applicable to all modern
DNS software stack, influencing all layers of DNS caching. The key
characteristic is that it defeats the most effective and commonly
deployed defense — randomization of source port.
Threat Model. In this paper, we focus on the attacks against DNS
forwarders and resolvers due to their high impact. Similar to the
classic DNS cache poisoning attack, we assume the attacker is
off-path (not able to eavesdrop traffic between a forwarder and
resolver), and capability of IP spoofing. According to a recent study
in 2019 [47], 30.5% of ASes do not block packets with spoofed source
IP addresses. In practice, an attacker only needs to find one node
that can spoof IPs to carry out the attack. To demonstrate the ease
of this, we rented a bullet-proof-hosting node specifically publicly
advertised as IP-spoofing-capable ($50/month with unlimited data)
and found that it indeed can spoof “arbitrary IPs”.
In addition, the attacker needs to control a machine that is able
to trigger a request out of a forwarder or resolver. In the case of a
forwarder attack, this can happen when the attacker is located in a
LAN managed by a wireless router. For example, an attacker can
join a public wireless network in a coffee shop, a shopping mall,
or an airport. The attacker can also control a puppet whose sole
responsibility is to query the forwarder to launch the attack if direct
access to the LAN is impossible. In a resolver attack, this can include
any network (enterprise, organization, or institution) where the
attacker is an insider or owns a compromised machine. Moreover,
any public resolvers on the Internet also satisfy the requirement.
Attack Workflow. Regardless of a forwarder or resolver, as illus-
trated in Figure 2, our newly proposed attacks always start from
triggering either one to send a DNS query, followed by two key
steps as outlined below:
1○ Inferring source port. To overcome the randomization of source
port, we leverage a novel and universal side channel in networking
stacks to scan and discover which source ports were used to initiate
a DNS query, at a speed of at most 1,000 guesses per second.