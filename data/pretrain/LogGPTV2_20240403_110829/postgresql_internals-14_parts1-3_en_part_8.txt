Chapter3 PagesandTuples
committedoraborted. Thexmax_committedandxmax_abortedbitsgivesimi-
larinformationaboutthexmaxtransaction.
v. Thepageinspectextensionprovidestheheap_tuple_infomask_flagsfunctionthatexplains
all the information bits,but I am going to retrieve only those that are required at the
moment,showingtheminamoreconciseform.
Let’sgetbacktoourexperiment. Thecommandhasaddedpointertothe
heappage;itreferstothefirsttuple,whichiscurrentlytheonlyone.
Thexminfieldofthetupleissettothecurrenttransaction. Thistransactionis
stillactive,sothexmin_committedandxmin_abortedbitsarenotsetyet.
Thexmaxfieldcontains,whichisadummynumbershowingthatthistuplehas
notbeendeletedandrepresentsthecurrentversionoftherow. Transactionswill
ignorethisnumberbecausethexmax_abortedbitisset.
It mayseem strange that the bit corresponding to an aborted transaction is set for the
transactionthathasnothappenedyet. Butthereisnodifferencebetweensuchtransac-
tionsfromtheisolationstandpoint: anabortedtransactionleavesnotrace,henceithas
neverexisted.
Wewillusethisquerymorethanonce,soIamgoingtowrapitintoafunction.And
whilebeingatit,Iwillalsomaketheoutputmoreconcisebyhidingtheinformation
bitcolumnsanddisplayingthestatusoftransactionstogetherwiththeirs.
=> CREATE FUNCTION heap_page(relname text, pageno integer)
RETURNS TABLE(ctid tid, state text, xmin text, xmax text)
AS $$
SELECT (pageno,lp)::text::tid AS ctid,
CASE lp_flags
WHEN 0 THEN 'unused'
WHEN 1 THEN 'normal'
WHEN 2 THEN 'redirect to '||lp_off
WHEN 3 THEN 'dead'
END AS state,
t_xmin || CASE
WHEN (t_infomask & 256) > 0 THEN ' c'
WHEN (t_infomask & 512) > 0 THEN ' a'
ELSE ''
END AS xmin,
t_xmax || CASE
74
3.3 OperationsonTuples
WHEN (t_infomask & 1024) > 0 THEN ' c'
WHEN (t_infomask & 2048) > 0 THEN ' a'
ELSE ''
END AS xmax
FROM heap_page_items(get_raw_page(relname,pageno))
ORDER BY lp;
$$ LANGUAGE sql;
Nowitismuchclearerwhatishappeninginthetupleheader:
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−+−−−−−−
(0,1) | normal | 776 | 0 a
(1 row)
Youcangetsimilarbutlessdetailedinformationfromthetableitselfbyquerying
thexminandxmaxpseudocolumns:
=> SELECT xmin, xmax, * FROM t;
xmin | xmax | id | s
−−−−−−+−−−−−−+−−−−+−−−−−
776 | 0 | 1 | FOO
(1 row)
Commit
Once a transaction has been completed successfully, its status has to be stored
somehow—it must be registered that the transaction is committed. For this pur-
pose,Postgreemploysaspecial (commitlog)structure.1 Itisstoredas
filesinthe/pg_xactdirectoryratherthanasasystemcatalogtable.
Previously,thesefileswerelocatedin/pg_clog,butinversionthisdirectorygot
renamed:2 itwasnotuncommonfordatabaseadministratorsunfamiliarwithPostgre
todeleteitinsearchoffreediskspace,thinkingthata“log”issomethingunnecessary.
1 include/access/clog.h
backend/access/transam/clog.c
2 commitfest.postgresql.org/13/750
75
Chapter3 PagesandTuples
p. Cissplitintoseveralfilessolelyforconvenience. Thesefilesareaccessedpage
bypageviabuffersintheserver’ssharedmemory.1
Just like a tuple header,  contains two bits for each transaction: committed
andaborted.
Once committed,a transaction is marked in  with the committed bit. When
anyothertransactionaccessesaheappage,ithastoanswerthequestion: hasthe
xmintransactionalreadyfinished?
• Ifnot,thenthecreatedtuplemustnotbevisible.
Tocheckwhetherthetransactionisstillactive,Postgreusesyetanother
structurelocatedinthesharedmemoryoftheinstance;itiscalledProcArray.
Thisstructurecontainsthelistofalltheactiveprocesses,withthecorrespond-
ingcurrent(active)transactionspecifiedforeachprocess.
• Ifyes,wasitcommittedoraborted? Inthelattercase,thecorrespondingtuple
cannotbevisibleeither.
It is this check that requires . But even though the most recent 
pagesarestoredinmemorybuffers,itisstillexpensivetoperformthischeck
everytime. Oncedetermined,thetransactionstatusiswrittenintothetuple
header—morespecifically,intoxmin_committedandxmin_abortedinformation
bits,whicharealsocalledhintbits. Ifoneofthesebitsisset,thenthexmin
transactionstatusisconsideredtobealreadyknown,andthenexttransaction
willhavetoaccessneithernorProcArray.
Whyaren’tthesebitssetbythetransactionthatperformsrowinsertion? Theprob-
lemisthatitisnotknownyetatthattimewhetherthistransactionwillcomplete
successfully.Andwhenitiscommitted,itisalreadyunclearwhichtuplesandpages
havebeenchanged.Ifatransactionaffectsmanypages,itmaybetooexpensiveto
trackthem.Besides,someofthesepagesmaybenotinthecacheanymore;reading
themagaintosimplyupdatethehintbitswouldseriouslyslowdownthecommit.
1 backend/access/transam/clog.c
76
3.3 OperationsonTuples
Theflipsideofthiscostreductionisthatanytransaction(evenaread-only
command) can start setting hint bits, thus leaving a trail of dirtied pages in the
buffercache.
Finally,let’scommitthetransactionstartedwiththestatement:
=> COMMIT;
Nothinghaschangedinthepage(butweknowthatthetransactionstatushasal-
readybeenwritteninto):
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−+−−−−−−
(0,1) | normal | 776 | 0 a
(1 row)
Nowthefirsttransactionthataccessesthepage(ina“standard”way,withoutusing
pageinspect) has to determine the status of the xmin transaction and update the
hintbits:
=> SELECT * FROM t;
id | s
−−−−+−−−−−
1 | FOO
(1 row)
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−
(0,1) | normal | 776 c | 0 a
(1 row)
Delete
Whenarowisdeleted,thexmaxfieldofitscurrentversionissettothetransaction
thatperformsthedeletion,andthexmax_abortedbitisunset.
77
Chapter3 PagesandTuples
p. Whilethistransactionisactive,thexmaxvalueservesasarowlock.Ifanothertransaction
is going to update or delete this row,it will have to wait until the xmax transaction is
complete.
Let’sdeletearow:
=> BEGIN;
=> DELETE FROM t;
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
777
(1 row)
Thetransactionhasalreadybeenwrittenintothexmaxfield,buttheinforma-
tionbitshavenotbeensetyet:
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−
(0,1) | normal | 776 c | 777
(1 row)
Abort
Themechanismofabortingatransactionissimilartothatofcommitandhappens
justasfast,butinsteadofcommitteditsetstheabortedbitin. Althoughthe
correspondingcommandiscalled,noactualdatarollbackishappening:
allthechangesmadebytheabortedtransactionindatapagesremaininplace.
=> ROLLBACK;
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−
(0,1) | normal | 776 c | 777
(1 row)
78
3.3 OperationsonTuples
Whenthepageisaccessed,thetransactionstatusischecked,andthetuplereceives
thexmax_abortedhintbit. Thexmaxnumberitselfstillremainsinthepage,but
nooneisgoingtopayattentiontoitanymore:
=> SELECT * FROM t;
id | s
−−−−+−−−−−
1 | FOO
(1 row)
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−
(0,1) | normal | 776 c | 777 a
(1 row)
Update
Anupdateisperformedinsuchawayasifthecurrenttupleisdeleted,andthena
newoneisinserted:
=> BEGIN;
=> UPDATE t SET s = 'BAR';
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
778
(1 row)
Thequeryreturnsasinglerow(itsnewversion):
=> SELECT * FROM t;
id | s
−−−−+−−−−−
1 | BAR
(1 row)
79
Chapter3 PagesandTuples
Butthepagekeepsbothversions:
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−
(0,1) | normal | 776 c | 778
(0,2) | normal | 778 | 0 a
(2 rows)
Thexmaxfieldofthepreviouslydeletedversioncontainsthecurrenttransaction
.Thisvalueiswrittenontopoftheoldonebecausetheprevioustransactionwas
aborted. Thexmax_abortedbitisunsetsincethestatusofthecurrenttransaction
isstillunknown.
Tocompletethisexperiment,let’scommitthetransaction.
=> COMMIT;
3.4 Indexes
Regardlessoftheirtype,indexesdonotuserowversioning;eachrowisrepresented
byexactlyonetuple. Inotherwords,indexrowheadersdonotcontainxminand
p. xmaxfields.Indexentriespointtoalltheversionsofthecorrespondingtablerow.
To figure out which row version is visible, transactions have to access the table
(unlesstherequiredpageappearsinthevisibilitymap).
Forconvenience,let’screateasimplefunctionthatwillusepageinspecttodisplay
alltheindexentriesinthepage(-treeindexpagesstorethemasaflatlist):
=> CREATE FUNCTION index_page(relname text, pageno integer)
RETURNS TABLE(itemoffset smallint, htid tid)
AS $$
SELECT itemoffset,
htid -- ctid before v.13
FROM bt_page_items(relname,pageno);
$$ LANGUAGE sql;
Thepagereferencesbothheaptuples,thecurrentandthepreviousone:
80
3.5 TOAST
=> SELECT * FROM index_page('t_s_idx',1);
itemoffset | htid
−−−−−−−−−−−−+−−−−−−−
1 | (0,2)
2 | (0,1)
(2 rows)
Since BEGIN;
1 backend/access/transam/xact.c
81
Chapter3 PagesandTuples
=> -- txid_current_if_assigned() before v.13
SELECT pg_current_xact_id_if_assigned();
pg_current_xact_id_if_assigned
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
(1 row)
At different points in time, the system can contain some virtual s that have
alreadybeenused. Anditisperfectlynormal: virtualsexistonlyin,and
onlywhilethecorrespondingtransactionsareactive; theyareneverwritteninto
datapagesandnevergettodisk.
Oncethetransactionstartsmodifyingdata,itreceivesanactualunique:
=> UPDATE accounts
SET amount = amount - 1.00;
=> SELECT pg_current_xact_id_if_assigned();
pg_current_xact_id_if_assigned
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
780
(1 row)
=> COMMIT;
3.7 Subtransactions
Savepoints
Ssupportssavepoints,whichenablecancelingsomeoftheoperationswithina
transactionwithoutabortingthistransactionasawhole.Butsuchascenariodoes
notfitthecourseofactiondescribedabove: thestatusofatransactionappliesto
allitsoperations,andnophysicaldatarollbackisperformed.
Toimplementthisfunctionality,atransactioncontainingasavepointissplitinto
severalsubtransactions,1sotheirstatuscanbemanagedseparately.
1 backend/access/transam/subtrans.c
82
3.7 Subtransactions
Subtransactionshavetheirowns(whicharebiggerthantheofthemaintrans-
action). Thestatusofasubtransactioniswrittenintointheusualmanner;
however,committedsubtransactionsreceiveboththecommittedandtheaborted
bitsatonce.Thefinaldecisiondependsonthestatusofthemaintransaction: ifit
isaborted,allitssubtransactionswillbeconsideredabortedtoo.
Theinformationaboutsubtransactionsisstoredunderthe/pg_subtransdi-
rectory.Fileaccessisarrangedviabuffersthatarelocatedintheinstance’sshared
memoryandhavethesamestructureasbuffers.1
Donotconfusesubtransactionswithautonomousones.Unlikesubtransactions,thelatter
donotdependoneachotherinanyway.VanillaPostgredoesnotsupportautonomous
transactions,anditisprobablyforthebest: theyarerequiredinveryrarecases,buttheir
availability in other database systems often provokes misuse,which can cause a lot of
trouble.
Let’struncatethetable,startanewtransaction,andinsertarow:
=> TRUNCATE TABLE t;
=> BEGIN;