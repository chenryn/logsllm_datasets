that E | [|P|]τ ≡ E | Sim |Fke. We denote by S = E | [|P|]τ
the real system and by S ideal = E | Sim |Fke the ideal sys-
tem.
We construct the simulator Sim as follows: Sim simu-
lates the system [|P|]τ , where messages obtained from Fke
(to start the key exchange for a party) are forwarded to the
I/O interface of (the simulated system) [|P|]τ and all inputs
from E are forwarded to the network interface of [|P|]τ . Net-
work outputs of [|P|]τ are forwarded to E and I/O outputs
of [|P|]τ which are SK-output messages (see Section 5.1),
containing the exchanged session key, are forwarded as ses-
sion ﬁnish messages to Fke. If some key or party in [|P|]τ
net(x1). . . . .cin
98gets corrupted, then Sim corrupts Fke. Recall that Fke is
corruptible as long as no SK-output message has been sent.
To prove S ≡ S ideal, we ﬁrst prove a so-called mapping
lemma, which relates concrete traces to symbolic traces, sim-
ilar to mapping lemmas in other works on computational
soundness. The speciﬁc complication we need to deal with
in our mapping lemma, unlike other mapping lemmas, is the
delicate issue of dishonestly generated keys. For this, we use
that P preserves key secrecy. (The property P ∼l rand(P)
is only used later to prove S ≡ S ideal.) We need a mapping
lemma both for the system S and S ideal.
Mapping Lemmas. Roughly speaking, the mapping lem-
mas that we want to prove state that, with overwhelming
probability, a concrete trace t of S and S ideal corresponds to
a symbolic trace symb(t) of P and rand(P), respectively. A
concrete trace of a system is given by the deﬁnition of runs
in the IITM model.
To state the mapping lemmas more precisely, we need the
following terminology. We say that a concrete trace is un-
corrupted if no key in Fenc and no machine Mi is corrupted.
A concrete trace is called non-colliding if it is uncorrupted
and no collisions occur between nonces (including the session
key output by Fke in case of S ideal), global constants, and ci-
phertexts which were produced with unknown/uncorrupted
keys (i.e., encryptions of the leakage of a message).
It is
easy to prove that the probability that a trace is colliding
and uncorrupted is negligible.
Given a preﬁx t of a non-colliding concrete trace of S
or S ideal (we consider both cases simultaneously), we re-
cursively deﬁne a mapping ψt from bit strings to ground
terms (not non-colliding concrete traces are taken care of
separately). For this purpose, we ﬁx an injective mapping
Garbage : {0, 1}∗ → N of bit strings to names such that the
names are distinct from all names in P/rand(P). The map-
ping ψt will be used to deﬁne the symbolic trace symb(t)
corresponding to t.
1. ψt(m) := (cid:104)ψt(m1), ψt(m2)(cid:105) if m is a pair of the form
(cid:104)m1, m2(cid:105) for some bit strings m1, m2.
2. ψt(m) := sk(n) if m = (Key, k) where k ∈ {0, 1}∗ is
a short-term key in Fenc and corresponds to the name
n ∈ Nst, i.e., for this n some Mi asked Fenc, in the ini-
tialization phase, to generate a short-term key and this
key, stored in Fenc, is k (where Mi only gets a pointer
to this key). If k is not a short-term key in Fenc, then
n := Garbage(m).
4. ψt(m) := {ψt(m(cid:48))}r
3. ψt(m) := n if m is the random bit string chosen by some
Mi for the nonce n ∈ Nnonce in t or if m = τ (n) for a
global constant n. In case of S ideal, n is the name n∗
added by rand(P) if m is the session key chosen by Fke.
sk(n) if the plaintext/ciphertext pair
(m(cid:48), m) is recorded in Fenc for a (short-term or long-
term) key and if the name corresponding to this key is n.
The name r is the symbolic randomness of the symbolic
ciphertext which was evaluated to m in t.
5. ψt(m) := Garbage(m) if none of the above cases are true.
One veriﬁes that ψt is well-deﬁned and injective, using our
tagging convention and that t is non-colliding. We note that
ψt maps ciphertexts not honestly generated, i.e., not con-
tained in Fenc, to garbage. For this to make sense, we use
in the proof of the mapping lemmas that P preserves key
secrecy.
Now, we use ψt to associate every preﬁx t of a non-colliding
concrete trace with a symbolic trace symb(t). We note that
symb(t) is only deﬁned if every input provided by the ad-
versary can be derived symbolically.
We say that a preﬁx t of a concrete trace of S or S ideal is
Dolev-Yao (DY) if t is non-colliding and symb(t) is a sym-
bolic trace (in the sense of Deﬁnition 1) of P or rand(P),
respectively; in particular, symb(t) must be deﬁned.
Now, we can state the mapping lemma for S and S ideal.
Lemma 1. The probability that a concrete trace t of S is
corrupted or t is DY is overwhelming (as a function of the
security parameter). The same is true for S ideal.
Proof Sketch of Theorem 3. We can now prove that
S ≡ S ideal by deﬁning a correspondence relation between
(almost) all concrete traces of S to the concrete traces of
S ideal, where the ﬁnal output of E is the same in correspond-
ing traces.
The case when a concrete trace t of S is corrupted is triv-
ial, since then Sim can corrupt Fke and mimic the concrete
trace of S exactly. The case where in t no session key is
output is also trivial. Otherwise, we use Lemma 1 and the
assumption P ∼l rand(P).
9. RELATED WORK
The general approach of this paper follows the one by
Canetti and Herzog [14]. However, they consider only the
simpler case of public-key encryption. Also, their symbolic
criterion is based on patterns [2], which is closely related to
static equivalence, but more ad hoc.
Comon-Lundh and Cortier [15] show that observational
equivalence implies computational indistinguishability for a
class of protocols similar to the one considered here, but with
more restricted if-then-else statements. The main drawback
of their result is that it makes the unrealistic assumption
that the adversary cannot fabricate keys, except for hon-
estly running the key generation algorithm. In other words,
dishonestly generated keys are disallowed, an assumption
that we do not make. This is one of the reasons why their
result does not imply our computational soundness result.
Also, the approaches are diﬀerent in that Comon-Lundh
and Cortier consider a game-based setting, while we use
simulation-based security and make intensive use of com-
posability.
In [4], Backes and Pﬁtzmann proposed a Dolev-Yao style
abstraction of symmetric encryption within their crypto-
graphic library [5]. In the full version of the work by Comon-
Lundh and Cortier [16], the authors pointed out that they
do not know how the problem with dishonestly generated
keys that they encountered is solved in the cryptographic
library by Backes and Pﬁtzmann. Indeed it turns out that
dishonestly generated keys also have to be forbidden for the
cryptographic library, in case symmetric encryption is con-
sidered. Moreover, the realization of this library requires an
authenticated encryption scheme which is augmented with
extra randomness as well as identiﬁers for symmetric keys.
Mazar´e and Warinschi [29] presented a mapping lemma
for protocols that use symmetric encryption in a setting with
adaptive, rather than only static corruption. However, the
protocol class is very restricted: symmetric keys may not be
encrypted, and hence, may not “travel”, and nested encryp-
tion is disallowed.
99In [20], a formal logic that enjoys a computational, game-
based semantics is used to reason about protocols that use
symmetric encryption. In [28, 10], automated methods for
reasoning about cryptographic protocols are proposed that
are based on transformation of programs and games, and
hence, are close to cryptographic reasoning. However, these
works do not provide computationally sound symbolic crite-
ria for reasoning about protocols.
As already mentioned in the introduction, computational
soundness results for passive or adaptive adversaries have
been obtain, for example, in [2, 22].
10. REFERENCES
[1] M. Abadi and C. Fournet. Mobile Values, New Names,
and Secure Communication. In POPL’01. ACM, 2001.
[2] M. Abadi and P. Rogaway. Reconciling two views of
cryptography (the computational soundness of formal
encryption). In IFIPTCS’00, volume 1872 of LNCS,
pages 3–22. Springer, 2000.
[3] A. Armando, D.A. Basin, Y. Boichut, Y. Chevalier,
L. Compagna, J. Cu´ellar, P.H. Drielsma, P.-C. H´eam,
O. Kouchnarenko, J. Mantovani, S. M¨odersheim,
D. von Oheimb, M. Rusinowitch, J. Santiago,
M. Turuani, L. Vigan`o, and L. Vigneron. The AVISPA
Tool for the Automated Validation of Internet
Security Protocols and Applications. In CAV’05,
volume 3576 of LNCS, pages 281–285. Springer, 2005.
[4] M. Backes and B. Pﬁtzmann. Symmetric Encryption
in a Simulatable Dolev-Yao Style Cryptographic
Library. In CSFW’04. IEEE Computer Society, 2004.
[5] M. Backes, B. Pﬁtzmann, and M. Waidner. A
composable cryptographic library with nested
operations. In CCS’03, pages 220–230. ACM, 2003.
[6] M. Baudet. Deciding security of protocols against
oﬀ-line guessing attacks. In CCS’05. ACM, 2005.
[7] G. Bella, F. Massacci, and L.C. Paulson. An overview
of the veriﬁcation of SET. International Journal of
Information Security, 4:17–28, 2005.
[8] K. Bhargavan, C. Fournet, A. D. Gordon, and S. Tse.
Veriﬁed Interoperable Implementations of Security
Protocols. In CSFW’06. IEEE Comp. Soc., 2006.
[9] B. Blanchet. An Eﬃcient Cryptographic Protocol
Veriﬁer Based on Prolog Rules. In CSFW’01, pages
82–96. IEEE Computer Society, 2001.
[10] B. Blanchet. A Computationally Sound Mechanized
Prover for Security Protocols. In S&P’06, pages
140–154. IEEE Computer Society, 2006.
[11] B. Blanchet, M. Abadi, and C. Fournet. Automated
Veriﬁcation of Selected Equivalences for Security
Protocols. In LICS’05. IEEE Computer Society, 2005.
[12] R. Canetti. Universally Composable Security: A New
Paradigm for Cryptographic Protocols. In FOCS’01,
pages 136–145. IEEE Computer Society, 2001.
[13] R. Canetti. Universally Composable Security: A New
Paradigm for Cryptographic Protocols. Technical
Report 2000/067, Cryptology ePrint Archive,
December 2005. http://eprint.iacr.org/2000/067/.
[15] H. Comon-Lundh and V. Cortier. Computational
soundness of observational equivalence. In CCS’08,
pages 109–118. ACM, 2008.
[16] H. Comon-Lundh and V. Cortier. Computational
soundness of observational equivalence. INRIA
Research Report RR-6508, INRIA, 2008. http://www.
loria.fr/~cortier/Papiers/CCS08-report.pdf
[17] V. Cortier, S. Kremer, R. K¨usters, and B. Warinschi.
Computationally Sound Symbolic Secrecy in the
Presence of Hash Functions. In FSTTCS’06, volume
4337 of LNCS, pages 176–187. Springer, 2006.
[18] V. Cortier and B. Warinschi. Computationally Sound,
Automated Proofs for Security Protocols. In
ESOP’05, volume 3444 of LNCS. Springer, 2005.
[19] V. Cortier and E. Zalinescu. Deciding Key Cycles for
Security Protocols. In LPAR’06, volume 4246 of
LNCS, pages 317–331. Springer, 2006.
[20] A. Datta, A. Derek, J. C. Mitchell, and B. Warinschi.
Computationally Sound Compositional Logic for Key
Exchange Protocols. In CSFW’06, pages 321–334.
IEEE Computer Society, 2006.
[21] D. Dolev and A.C. Yao. On the Security of Public-Key
Protocols. IEEE Transactions on Information Theory,
29(2):198–208, 1983.
[22] S. Kremer and L. Mazar´e. Adaptive Soundness of
Static Equivalence. In ESORICS’07, volume 4734 of
LNCS, pages 610–625. Springer, 2007.
[23] R. K¨usters. Simulation-Based Security with
Inexhaustible Interactive Turing Machines. In
CSFW’06, pages 309–320. IEEE Comp. Soc., 2006.
[24] R. K¨usters and T. Truderung. Using ProVerif to
Analyze Protocols with Diﬃe-Hellman
Exponentiation. In CSF’09, pages 157–171. IEEE
Computer Society, 2009.
[25] R. K¨usters and M. Tuengerthal. Joint State Theorems
for Public-Key Encryption and Digital Signature
Functionalities with Local Computation. In CSF’08,
pages 270–284. IEEE Computer Society, 2008.
[26] R. K¨usters and M. Tuengerthal. Universally
Composable Symmetric Encryption. In CSF’09, pages
293–307. IEEE Computer Society, 2009.
[27] R. K¨usters and M. Tuengerthal. Computational
Soundness for Key Exchange Protocols with
Symmetric Encryption. Technical Report 2009/392,
Cryptology ePrint Archive, 2009.
http://eprint.iacr.org/2009/392/.
[28] P. Laud. Symmetric Encryption in Automatic
Analyses for Conﬁdentiality against Active
Adversaries. In S&P’04, pages 71–85. IEEE Computer
Society, 2004.
[29] L. Mazar´e and B. Warinschi. Separating Trace
Mapping and Reactive Simulatability Soundness: The
Case of Adaptive Corruption. In ARSPA-WITS, 2009.
[30] C. Meadows, P. F. Syverson, and I. Cervesato. Formal
speciﬁcation and analysis of the Group Domain Of
Interpretation Protocol using NPATRL and the NRL
Protocol Analyzer. Journal of Computer Security,
12(6):893–931, 2004.
[14] R. Canetti and J. Herzog. Universally Composable
[31] D. Micciancio and B. Warinschi. Soundness of Formal
Symbolic Analysis of Mutual Authentication and
Key-Exchange Protocols. In TCC’06, volume 3876 of
LNCS, pages 380–403. Springer, 2006.
Encryption in the Presence of Active Adversaries. In
TCC’04, volume 2951 of LNCS. Springer, 2004.
100