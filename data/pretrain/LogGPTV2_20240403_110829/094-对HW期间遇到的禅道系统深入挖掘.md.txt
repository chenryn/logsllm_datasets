对 期间遇到的禅道系
HW
统深⼊挖掘 酒仙桥六号部
_
队
- MdEditor
“ 对 HW 期间遇到的禅道系统深⼊挖掘
前⾔
在 hw 期间和客户聊天的时候，听到客户说他们在外⽹还
开了⼀个禅道项⽬管理系统，但是在 hw 的期间关闭了，
hw 过了在开启。因为开在外⽹，⽽且禅道管理系统以前
就爆过⼀些漏洞，于是询问客户是多少版本的禅道，客户
说：不知道是多少版本的，反正开了⼏年了。⼏年
······ 那就能很肯定是⽼版本了，于是协助客户帮忙测
试了⼀ 下。
查看版本
Url: index.php?Mode=getconfig
源码分析：./index.php
我们成功获取到禅道系统的版本是 7.3 版，于是百度找
⼀下 7.3 版本的历史漏洞。
快速验证
发现该版本存在⼀个前台 sql 注⼊漏洞，为了快速验证漏
洞，给客户展示危害，直接利⽤⽹上的 payload 打过
去：
Url: /block-main.html?mode=getblockdata&blockid=task¶m
Payload2 的值⽤如下代码⽣成：
测试的时候，发现并没有任何反应，⻚⾯空⽩，开启
debug 模式再尝试：
再⼀次测试 payload，依然是空⽩⻚⾯，第⼀次测试失败
告终。
为了验证漏洞的准确性，我⽤⾃⼰的电脑下载了⼀个 7.3
版本的环境， 依然同上步骤进⾏测试，结果如下：
可以看到，成功进⾏了报错，证明了这个漏洞还是真实存
在的，但是为什么在客户系统上就是空⽩⻚⾯呢？
问题排查
这⾥猜想可能是因为打了补丁或者被安全软件拦截了已知
exp 导致了在客户系统上利⽤失败。
这⾥选择先从打补丁⽅向排除问题，通过搜索发现官⽅发
布了 7.3 版本的漏洞修复补丁：
修复后的证明就是在根⽬录下会存在⼀个 ok.txt ⽂件，
客户系统上就存在⼀个 ok.txt，证明漏洞已经修复了。
漏洞及补丁分析
漏洞分析：
在 block 模块的 main ⽅法中进⾏了动态调⽤，⽽且将
我们输⼊的数据赋值给了 $this->params 属性， ⽅便在
后续的调⽤中使⽤，代码如图：
当我们通过 url 传⼊参数：?blockid=task 的时候，就会
去调⽤ printtaskBlock() ⽅法：
可以看到函数将我们输⼊的数据作为第⼆个参数传递进了
getUserTasks ⽅法中去，查看该⽅法代码：
看到很直⽩的就将我们输⼊的数据作为了字段拼接进了
sql 语句中去，造成了 sql 注⼊漏洞。
补丁分析：
先对⽐⼀下补丁，尝试能不能绕过补丁再次进⾏注⼊：
修复后的代码中添加了⼀个__construct ⽅法，并且进⾏
了⼀个 if(!$this->loadModel('sso')->checkKey())
die(''); 判断，如果条件满⾜就会进⾏退出操作，跟进查
看 checkkey() ⽅法，看看是怎么判断的：
判断 $this->config->sso->turnon 是否有值，如果没
值就会进⾏退出， 在这⾥调试输出看看是否存在值：
调试发现这⾥默认是不存在值的，这⾥的功能是为了实现
禅道和然之系统的集成， 只有当你在后台集成了然之系
统，这⾥才会有值，默认是不会集成的，所以这⾥也就是
空数据， 这也就导致我们没办法再访问 block 这个模块
了。
因为不能访问 block 模块了，所以其他版本在该模块⾥
⾯的注⼊⼀概失败。
另起灶炉
既然⽹上爆出来的历史漏洞不能利⽤，那么尝试⼀下能不
既然⽹ 爆出来的历史漏洞不能利⽤，那么尝试 下能不
能挖掘到新的漏洞来证明其危害。 因为禅道管理系统对
每个⽤户的权限都进⾏了划分管理，⼤部分的功能都需要
登录后才能访问， 不需要登陆就可以访问的⽅法在
isOpenMethod ⽅法中定义：
这⾥定义的⽅法不需要登录就可以访问，但是 block 模
块进⾏了再次验证，以往存在⾼危漏洞的 block 模块就
排除 了，然后查看其他的⽅法中，发现并没有⼀个⽅法
可以在不登录时造成⾼危漏洞，但是我们也不能直接放
弃， 给客户说系统绝对安全，没有问题。
退⽽求其次：
因为没有不需要登录就能造成漏洞的地⽅，所以再次挖掘
登录后能 getshell 的漏洞，因为这是项⽬管理系统， 必
然会存在很多⽤户账号，有的⽤户可能安全意识没有那么
强，可能使⽤弱密码等，只要我们能获取到其中 任意⼀
个账号后能造成 getshell 漏洞，也能证明其系统存在⼀
定⻛险性。
所以这⾥的⽬标就是挖掘⼀个任意账户的 getshell 漏
洞。
先看看禅道管理系统⽤户等级共划分了 11 个等级：
那么我们挖掘的漏洞就尽量等级越低越好，最好是 guest
组的⽤户也可以造成 getshell， 这样我们随便获取到⼀
个能登录的账号就可以造成 gehshell。
每个组⽤户对应的访问权限储存在 zt_grouppriv 数据表
中的：
Group=11 代表的就是 guest 组的权限。
对于这种严格划分了权限的系统，我们可以尝试两种⽅
法：
第⼀种：就是对照着每个组的权限，挨个查看其⽅法是否
能造成漏洞，这种办法有点笨重， 花费时间⼤，但是⽐
较全⾯。
第⼆种：先查找造成漏洞的地⽅，然后再去查找对应的访
问权限，这种办法相对灵活⾼效。
漏洞挖掘：
我这⾥就使⽤的第⼆种⽅法，先去查找造成漏洞的地⽅，
再去查找对应的权限。
直接通过搜索⾼危函数来进⾏初步定位：
先假设这⾥的 import ⽅法直接就可以任意⽂件上传，但
是最关键的是我们还需要验证 guest 组是否存在访问权
限， 通过查看 zt_grouppriv 表来确定：
可以看到并没有 testcase 模块的访问权限，遂放弃该模
块，因为就算这个⽅法能造成漏洞， 但是我们的 guest
组⽤户也没有权限操作，查看其他的模块：
可以看到只有 file 模块，extension 模块，testcase 模
式（上⾯已排除）这三个模块中存在上传等操作， 依旧
先对照 zt_grouppriv 权限表，确定权限。
通过对照 zt_grouppriv 权限表发现这⾥只有 file 模块下
的 download 存在权限，其他的⽅法都没有权限吗？
柳暗花明：
当我在查看 file 模块的时候却发现存在这样的 个⽅
当我在查看 file 模块的时候却发现存在这样的⼀个⽅
法：
file 模块中存在⼀个名字叫做 ajaxUpload() 的⽅法，虽
然我们在 zt_grouppriv 权限表中没有设定对这个⽅法 的
访问权限，但是我们回过头去看最开始的不需要登录就可
以访问的⽅法列表，isOpenMethod ⽅法：
该⽅法中设定了如果 $method ⽅法中存在 ajax 字符
串，即可以跳过后续的验证直接访问执⾏， 然后我们分
析⼀下上⾯的 if 判断语句：
析 下上⾯的 if 判断语句
可以看到只要有⽤户登录，⽽且⽤户登录名不是 guest，
（这⾥是账号名字，不是账号组）， 那么就可以满⾜条
件。 为了验证⼀下访问权限，这⾥创建了⼀个 guest 组
的账号，然后利⽤该账号进⾏登录， 登录成功后访问
url: /file-ajaxupload
既然我们 guest 组的账号可以访问到该⽅法，接下来就
该分析⼀下上传代码了。
绕过⿊名单上传：
这⾥上传的最终⽂件名来⾃于 $this->file-
>getUpload(‘imgFile’) 的返回结果。
这⾥关键的 getExtension ⽅法获取并且验证后缀。
可以很容易看到这⾥采⽤的⿊名单的验证模式，在
我们 以 过
Windows 下 ，我们可以通过 123.php::$DATA ，
1.php[\x81-\x99] 等⽂件名来绕过⿊名单模式，达到上
传 php ⽂件造成 getshell 漏洞。
漏洞验证：
1. 注册⼀个任意组的账号并登陆。
2. 使⽤如下 exp，上传⼀个⽂件名为 1.php::$DATA
的 shell ⽂件。
Exp.html
禅道9.2及之前getshell
利⽤结果如图所示：
成功绕过了⿊名单验证，进⾏了上传 php ⽂件，访问的
时候，忽略掉最后的::$DATA 即可。
到这⾥我们就成功挖掘到了⼀个任意⽤户组的 getshell
漏洞，该漏洞影响版本 <=9.2 版本， 在 9.3 中对上传使
⽤了⽩名单验证。同时也给客户展示了打过补丁的低版本
禅道系统开放在外⽹ 仍然存在⼀定的⻛险性，然后建议
在不影响业务的情况下，还是尽量将系统放在内⽹中使
⽤， 因为难免会在⻓时间开放在外⽹的情况下，某⽤户
的账号密码泄露导致系统被 getshell。
总结
1 最开始得知系统是低版本的禅道系统
1. 最开始得知系统是低版本的禅道系统。
2. 到直接利⽤ “前台 sql 注⼊漏洞” 的 payload 进
⾏验证的失败。
3. 在排查问题中发现是因为系统已经打过补丁了。
4. 然后再分析漏洞原理和补丁代码 尝试绕过补丁进
⾏注⼊。
5. 绕过补丁失败，导致另起灶炉挖掘新的漏洞。
6. 在理清楚系统的⽤户组等级划分和权限控制后，
结合前台开放⽅法进⾏组合利⽤。
7. 利⽤ windows 特性进⾏ bypass ⿊名单上传到达
getshell 的⽬的。
整个流程⾛下来，从最开始的信息初探，到利⽤已知漏洞
失败，然后查找问题， 到最后⾃⼰挖掘新的漏洞，在这
个过程中还是学习到了很多知识，也了解到了禅道系统，
希望能通过⼀次次曲折的问题来快速提⾼能⼒。
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明