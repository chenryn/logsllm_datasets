time (see the
.i /proc
interfaces below), a neighbor cache entry is considered stale.
positive feedback can be gotten from a higher layer; for example from
a successful tcp ack.
other protocols can signal forward progress
using the
.b msg_confirm
flag to
.br sendmsg (2).
when there is no forward progress, arp tries to reprobe.
it first tries to ask a local arp daemon
.b app_solicit
times for an updated mac address.
if that fails and an old mac address is known, a unicast probe is sent
.b ucast_solicit
times.
if that fails too, it will broadcast a new arp
request to the network.
requests are sent only when there is data queued
for sending.
.pp
linux will automatically add a nonpermanent proxy arp entry when it
receives a request for an address it forwards to and proxy arp is
enabled on the receiving interface.
when there is a reject route for the target, no proxy arp entry is added.
.ss ioctls
three ioctls are available on all
.b af_inet
sockets.
they take a pointer to a
.i struct arpreq
as their argument.
.pp
.in +4n
.ex
struct arpreq {
    struct sockaddr arp_pa;      /* protocol address */
    struct sockaddr arp_ha;      /* hardware address */
    int             arp_flags;   /* flags */
    struct sockaddr arp_netmask; /* netmask of protocol address */
    char            arp_dev[16];
};
.ee
.in
.pp
.br siocsarp ", " siocdarp " and " siocgarp
respectively set, delete, and get an arp mapping.
setting and deleting arp maps are privileged operations and may
be performed only by a process with the
.b cap_net_admin
capability or an effective uid of 0.
.pp
.i arp_pa
must be an
.b af_inet
address and
.i arp_ha
must have the same type as the device which is specified in
.ir arp_dev .
.i arp_dev
is a zero-terminated string which names a device.
.rs
.ts
tab(:) allbox;
c s
l l.
\fiarp_flags\fr
flag:meaning
atf_com:lookup complete
atf_perm:permanent entry
atf_publ:publish entry
atf_usetrailers:trailers requested
atf_netmask:use a netmask
atf_dontpub:don't answer
.te
.re
.pp
if the
.b atf_netmask
flag is set, then
.i arp_netmask
should be valid.
linux 2.2 does not support proxy network arp entries, so this
should be set to 0xffffffff, or 0 to remove an existing proxy arp entry.
.b atf_usetrailers
is obsolete and should not be used.
.ss /proc interfaces
arp supports a range of
.i /proc
interfaces to configure parameters on a global or per-interface basis.
the interfaces can be accessed by reading or writing the
.i /proc/sys/net/ipv4/neigh/*/*
files.
each interface in the system has its own directory in
.ir /proc/sys/net/ipv4/neigh/ .
the setting in the "default" directory is used for all newly created
devices.
unless otherwise specified, time-related interfaces are specified
in seconds.
.tp
.ir anycast_delay " (since linux 2.2)"
.\" precisely: 2.1.79
the maximum number of jiffies to delay before replying to a
ipv6 neighbor solicitation message.
anycast support is not yet implemented.
defaults to 1 second.
.tp
.ir app_solicit " (since linux 2.2)"
.\" precisely: 2.1.79
the maximum number of probes to send to the user space arp daemon via
netlink before dropping back to multicast probes (see
.ir mcast_solicit ).
defaults to 0.
.tp
.ir base_reachable_time " (since linux 2.2)"
.\" precisely: 2.1.79
once a neighbor has been found, the entry is considered to be valid
for at least a random value between
.ir base_reachable_time "/2 and 3*" base_reachable_time /2.
an entry's validity will be extended if it receives positive feedback
from higher level protocols.
defaults to 30 seconds.
this file is now obsolete in favor of
.ir base_reachable_time_ms .
.tp
.ir base_reachable_time_ms " (since linux 2.6.12)"
as for
.ir base_reachable_time ,
but measures time in milliseconds.
defaults to 30000 milliseconds.
.tp
.ir delay_first_probe_time " (since linux 2.2)"
.\" precisely: 2.1.79
delay before first probe after it has been decided that a neighbor
is stale.
defaults to 5 seconds.
.tp
.ir gc_interval " (since linux 2.2)"
.\" precisely: 2.1.79
how frequently the garbage collector for neighbor entries
should attempt to run.
defaults to 30 seconds.
.tp
.ir gc_stale_time " (since linux 2.2)"
.\" precisely: 2.1.79
determines how often to check for stale neighbor entries.
when a neighbor entry is considered stale, it is resolved again before
sending data to it.
defaults to 60 seconds.
.tp
.ir gc_thresh1 " (since linux 2.2)"
.\" precisely: 2.1.79
the minimum number of entries to keep in the arp cache.
the garbage collector will not run if there are fewer than
this number of entries in the cache.
defaults to 128.
.tp
.ir gc_thresh2 " (since linux 2.2)"
.\" precisely: 2.1.79
the soft maximum number of entries to keep in the arp cache.
the garbage collector will allow the number of entries to exceed
this for 5 seconds before collection will be performed.
defaults to 512.
.tp
.ir gc_thresh3 " (since linux 2.2)"
.\" precisely: 2.1.79
the hard maximum number of entries to keep in the arp cache.
the garbage collector will always run if there are more than
this number of entries in the cache.
defaults to 1024.
.tp
.ir locktime " (since linux 2.2)"
.\" precisely: 2.1.79
the minimum number of jiffies to keep an arp entry in the cache.
this prevents arp cache thrashing if there is more than one potential
mapping (generally due to network misconfiguration).
defaults to 1 second.
.tp
.ir mcast_solicit " (since linux 2.2)"
.\" precisely: 2.1.79
the maximum number of attempts to resolve an address by
multicast/broadcast before marking the entry as unreachable.
defaults to 3.
.tp
.ir proxy_delay " (since linux 2.2)"
.\" precisely: 2.1.79
when an arp request for a known proxy-arp address is received, delay up to
.i proxy_delay
jiffies before replying.
this is used to prevent network flooding in some cases.
defaults to 0.8 seconds.
.tp
.ir proxy_qlen " (since linux 2.2)"
.\" precisely: 2.1.79
the maximum number of packets which may be queued to proxy-arp addresses.
defaults to 64.
.tp
.ir retrans_time " (since linux 2.2)"
.\" precisely: 2.1.79
the number of jiffies to delay before retransmitting a request.
defaults to 1 second.
this file is now obsolete in favor of
.ir retrans_time_ms .
.tp
.ir retrans_time_ms " (since linux 2.6.12)"
the number of milliseconds to delay before retransmitting a request.
defaults to 1000 milliseconds.
.tp
.ir ucast_solicit " (since linux 2.2)"
.\" precisely: 2.1.79
the maximum number of attempts to send unicast probes before asking
the arp daemon (see
.ir app_solicit ).
defaults to 3.
.tp
.ir unres_qlen " (since linux 2.2)"
.\" precisely: 2.1.79
the maximum number of packets which may be queued for each unresolved
address by other network layers.
defaults to 3.
.sh versions
the
.i struct arpreq
changed in linux 2.0 to include the
.i arp_dev
member and the ioctl numbers changed at the same time.
support for the old ioctls was dropped in linux 2.2.
.pp
support for proxy arp entries for networks (netmask not equal 0xffffffff)
was dropped in linux 2.2.
it is replaced by automatic proxy arp setup by
the kernel for all reachable hosts on other interfaces (when
forwarding and proxy arp is enabled for the interface).
.pp
the
.i neigh/*
interfaces did not exist before linux 2.2.
.sh bugs
some timer settings are specified in jiffies, which is architecture-
and kernel version-dependent; see
.br time (7).
.pp
there is no way to signal positive feedback from user space.
this means connection-oriented protocols implemented in user space
will generate excessive arp traffic, because ndisc will regularly
reprobe the mac address.
the same problem applies for some kernel protocols (e.g., nfs over udp).
.pp
this man page mashes together functionality that is ipv4-specific
with functionality that is shared between ipv4 and ipv6.
.sh see also
.br capabilities (7),
.br ip (7),
.br arpd (8)
.pp
rfc\ 826 for a description of arp.
rfc\ 2461 for a description of ipv6 neighbor discovery and the base
algorithms used.
linux 2.2+ ipv4 arp uses the ipv6 algorithms when applicable.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/argz_add.3
.so man7/iso_8859-4.7
.so man2/readv.2
.\" copyright (c) 1996 andries brouwer (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" written 11 april 1996 by andries brouwer 
.\" 960412: added comments from stephen tweedie
.\" modified tue oct 22 22:28:41 1996 by eric s. raymond 
.\" modified mon jan  5 20:31:04 1998 by aeb.
.\"
.th sysctl 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
sysctl \- read/write system parameters
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "int _sysctl(struct __sysctl_args *" args );
.fi
.sh description
.b this system call no longer exists on current kernels!
see notes.
.pp
the
.br _sysctl ()
call reads and/or writes kernel parameters.
for example, the hostname,
or the maximum number of open files.
the argument has the form
.pp
.in +4n
.ex
struct __sysctl_args {
    int    *name;    /* integer vector describing variable */
    int     nlen;    /* length of this vector */
    void   *oldval;  /* 0 or address where to store old value */
    size_t *oldlenp; /* available room for old value,
                        overwritten by actual size of old value */
    void   *newval;  /* 0 or address of new value */
    size_t  newlen;  /* size of new value */
};
.ee
.in
.pp
this call does a search in a tree structure, possibly resembling
a directory tree under
.ir /proc/sys ,
and if the requested item is found calls some appropriate routine
to read or modify the value.
.sh return value
upon successful completion,
.br _sysctl ()
returns 0.
otherwise, a value of \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.br eacces ", " eperm
no search permission for one of the encountered "directories",
or no read permission where
.i oldval
was nonzero, or no write permission where
.i newval
was nonzero.
.tp
.b efault
the invocation asked for the previous value by setting
.i oldval
non-null, but allowed zero room in
.ir oldlenp .
.tp
.b enotdir
.i name
was not found.
.sh versions
this system call first appeared in linux 1.3.57.
it was removed in linux 5.5; glibc support was removed in version 2.32.
.sh conforming to
this call is linux-specific, and should not be used in programs
intended to be portable.
it originated in
4.4bsd.
only linux has the
.i /proc/sys
mirror, and the object naming schemes differ between linux and 4.4bsd,
but the declaration of the
.br sysctl ()
function is the same in both.
.sh notes
use of this system call was long discouraged:
since linux 2.6.24,
uses of this system call result in warnings in the kernel log,
and in linux 5.5, the system call was finally removed.
use the
.i /proc/sys
interface instead.
.pp
note that on older kernels where this system call still exists,
it is available only if the kernel was configured with the
.b config_sysctl_syscall
option.
furthermore, glibc does not provide a wrapper for this system call,
necessitating the use of
.br syscall (2).
.sh bugs
the object names vary between kernel versions,
making this system call worthless for applications.
.pp
not all available objects are properly documented.
.pp
it is not yet possible to change operating system by writing to
.ir /proc/sys/kernel/ostype .
.sh examples
.ex
#define _gnu_source
#include 
#include 
#include 
#include 
#include 
#include 
int _sysctl(struct __sysctl_args *args );
#define osnamesz 100
int
main(void)
{
    struct __sysctl_args args;
    char osname[osnamesz];
    size_t osnamelth;
    int name[] = { ctl_kern, kern_ostype };
    memset(&args, 0, sizeof(args));
    args.name = name;
    args.nlen = sizeof(name)/sizeof(name[0]);
    args.oldval = osname;
    args.oldlenp = &osnamelth;
    osnamelth = sizeof(osname);
    if (syscall(sys__sysctl, &args) == \-1) {
        perror("_sysctl");
        exit(exit_failure);
    }
    printf("this machine is running %*s\en", osnamelth, osname);
    exit(exit_success);
}
.ee
.sh see also
.br proc (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/mkstemp.3
.\" copyright (c) 1990, 1991 the regents of the university of california.
.\" all rights reserved.
.\"
.\" this code is derived from software contributed to berkeley by
.\" chris torek and the american national standards committee x3,
.\" on information processing systems.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"     @(#)scanf.3	6.14 (berkeley) 1/8/93
.\"
.\" converted for linux, mon nov 29 15:22:01 1993, PI:EMAIL
.\" modified to resemble the gnu libio setup used in the linux libc
.\" used in versions 4.x (x>4) and 5   PI:EMAIL
.\" modified, aeb, 970121
.\" 2005-07-14, mtk, added description of %n$ form; various text
.\"	incorporated from the gnu c library documentation ((c) the
.\"	free software foundation); other parts substantially rewritten.
.\"
.\" 2008-06-23, mtk
.\"     add errors section.
.\"     document the 'a' and 'm' modifiers for dynamic string allocation.
.\"
.th scanf 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
scanf, fscanf, sscanf, vscanf, vsscanf, vfscanf \- input format conversion
.sh synopsis
.nf
.b #include 
.pp
.bi "int scanf(const char *restrict " format ", ...);"
.bi "int fscanf(file *restrict " stream ,
.bi "           const char *restrict " format ", ...);"
.bi "int sscanf(const char *restrict " str ,
.bi "           const char *restrict " format ", ...);"
.pp
.b #include 
.pp
.bi "int vscanf(const char *restrict " format ", va_list " ap );
.bi "int vfscanf(file *restrict " stream ,
.bi "           const char *restrict " format ", va_list " ap );
.bi "int vsscanf(const char *restrict " str ,
.bi "           const char *restrict " format ", va_list " ap );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br vscanf (),
.br vsscanf (),
.br vfscanf ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
.fi
.sh description
the
.br scanf ()
family of functions scans input according to
.i format
as described below.
this format may contain
.ir "conversion specifications" ;
the results from such conversions, if any,
are stored in the locations pointed to by the