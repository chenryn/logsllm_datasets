### 优化后的文本

#### 函数定义
- \( F_p(\alpha_{i,j}, \text{CMPK}) = F_p(\alpha_{i,j}, \text{CMPK}) \)
- \( E(j) = \prod_{i=1}^n E_{i,j} \)
- \( s(j) = \sum_{i=1}^n s_{i,j} \)
- \( E_{i,j} = F_p(\alpha_{i,j}, \text{CMPK}) \)
- \( s_{i,j} = f_s(\alpha_{i,j}, \text{CMPK}) \)
- \( f_s(\alpha_{i,j}, \text{CMPK}) = f_s(\alpha_{i,j}, \text{CMPK}) \)

因此，验证函数 \( \text{MKVerify}(\text{CMPK}, E(j), s(j)) = 1 \) 应该成立，即 \((\text{mpk}(j), \text{msk}(j))\) 是一个有效的（主公钥，主私钥）对，并且与原始 `Setup()` 算法生成的密钥对具有相同的分布。

此外，我们有：
\[ E = \prod_{i=1}^n E_i \]

因此，令 \(\text{mpksys} := (E, \text{CMPK})\)，则 \((\text{mpksys}, \text{msksys})\) 是一个有效的（主公钥，主私钥）对，并且与 `Setup()` 生成的密钥对具有相同的分布，尽管没有人知道 \(\text{msksys}\) 的值。在表 1 中列出了每个参与方拥有的公钥和私钥份额。

#### 表 1：公钥和私钥份额
| 参与方 | 公钥份额 | 私钥份额 |
|--------|----------|----------|
| \( P_1 \) | \( E_1 = F_p(\alpha_1, \text{CP}) \) | \( s_1 = f_s(\alpha_1, \text{CP}) \) |
| ... | ... | ... |
| \( P_j \) | \( E_{i,j} = F_p(\alpha_{i,j}, \text{CP}) \) | \( s_{i,j} = f_s(\alpha_{i,j}, \text{CP}) \) |
| ... | ... | ... |
| \( P_n \) | \( E_n = F_p(\alpha_n, \text{CP}) \) | \( s_n = f_s(\alpha_n, \text{CP}) \) |

注释：为了简化起见，用 \(\text{CP}\) 表示 \(\text{CMPK}\)。

#### 注释
- 在完成设置协议后，PKG 可以擦除它们的秘密 \(\{\alpha_i\}_{i=1}^n\) 和秘密份额 \(\{\alpha_{i,j}, s_{i,j}\}_{i=1}^n\)。
- 特别地，\(P_j (j = 1, \ldots, n)\) 将持有 \(s(j)\) 作为其主私钥，同时擦除 \(\{s_{i,j}\}_{i=1}^n\) 的值。
- \(P_i (i = 1, \ldots, n)\) 将擦除 \(\alpha_i, s_i\) 和 \(\{\alpha_{i,j}, s_{i,j}\}_{j=1}^n\) 的值。

#### 密钥生成
用户选择一个最小授权集合 \(\{P_{j_1}, \ldots, P_{j_t}\}\)，并按以下步骤获取其私钥：

1. 对于 \(k = 1, \ldots, t\)：
   - \(P_{j_k}\) 使用 \(\text{mpk}(j_k) := (E(j_k), \text{CMPK})\) 和 \(\text{msk}(j_k) := (s(j_k))\) 作为其主公钥和主私钥，运行底层的 `KeyGen` 算法并获取：
     \[ \text{SK}_{id}^{(j_k)} \leftarrow \text{KeyGen}(\text{mpk}(j_k), \text{msk}(j_k), id) \]
   - \(P_{j_k}\) 将密钥 \(\text{SK}_{id}^{(j_k)}\) 发送给用户。
   - 用户检查 \(\text{SKVerify}(\text{CMPK}, E(j_k), \text{SK}_{id}^{(j_k)}) = 1\) 是否成立。如果不成立，则将 \(P_{j_k}\) 标记为不诚实的 PKG。

注释：由于 \(E(j_k) = F_p(\sum_{i=1}^n \alpha_{i,j_k}, \text{CMPK})\) 和 \(s(j_k) = f_s(\sum_{i=1}^n \alpha_{i,j_k}, \text{CMPK})\)，我们有：
\[ \text{SK}_{id}^{(j_k)} = f_u(id, \sum_{i=1}^n \alpha_{i,j_k}, \text{CMPK}, r_{j,k}) \]
其中 \(r_{j,k} \in R\)。

2. 用户计算常数 \(\{w_{j_k}\}_{k=1}^t\) 并计算：
\[ \text{SK}_{id} \leftarrow \prod_{k=1}^t (\text{SK}_{id}^{(j_k)})^{w_{j_k}} \]

#### 加密
给定消息 \(M \in M(\text{CMPK})\) 和身份 \(id \in \{0, 1\}^*\)，加密方使用 \(\text{mpksys}\) 作为主公钥运行底层的 `Encrypt` 算法并输出密文：
\[ \text{CT}_{id} \leftarrow \text{Encrypt}(\text{mpksys}, M, id) \]

#### 解密
给定密文 \(\text{CT}_{id}\)（由上述公式生成）和私钥 \(\text{SK}_{id}\)（由上述公式生成），解密方使用 \(\text{mpksys}\) 作为主公钥运行底层的 `Decrypt` 算法并输出消息：
\[ M \leftarrow \text{Decrypt}(\text{mpksys}, \text{CT}_{id}, \text{SK}_{id}) \]

显然，对于任何消息 \(M \in M(\text{CMPK})\)、任何身份 \(id \in \{0, 1\}^*\) 和由上述公式生成的 \(\text{SK}_{id}\)，我们有：
\[ \text{Decrypt}(\text{mpksys}, \text{Encrypt}(\text{mpksys}, M, id), \text{SK}_{id}) = M \]

#### 安全性分析
在此部分中，我们分析上述无经销商分布式 PKG 协议的安全性。在分析之前，我们假设至少有一个诚实的 PKG 遵循协议。

- 如果 \(P_i\) 发布了一个无效签名 \((\sigma(1), (i, f_{pi}, pid||1))\)，它会被其他一些 \(P_j (j \neq i)\) 投诉并在步骤 (3a) 中被调查，因为至少有一个诚实的 PKG。无效签名可以作为 \(P_i\) 不诚实的证据。
- 如果 \(P_i\) 发布了一个有效签名 \((\sigma(1), (i, f_{pi}, pid||1))\)，则没有人可以在步骤 (3a) 中通过投诉 \(P_i\) 发布了无效签名来陷害 \(P_i\)，因为任何人都可以轻松验证签名。
- 由于任何人都可以检查 \(\{(σ(2), (i, j, result_{i,j}, pid||2))\}_{j \in \{1, \ldots, n\} \setminus \{i\}}\) 的有效性以及所有 \(result_{i,j}\) 是否为 TRUE，没有（不诚实的）PKG 会愿意将 \(P_i\) 的签名 \((σ(1), (i, f_{pi}, pid||1))\) 的验证结果设置为 FALSE 以陷害 \(P_i\)。
- 最后，一旦某个 PKG \(P_i\) 被发现是不诚实的，所有“同意” \(P_i\) 不诚实的 PKG（通过发布签名的验证结果）也将被调查。这种机制保证了每个 \(P_j\) 将诚实地执行步骤 (3)。

- 在步骤 (4a) 中，每个 \(P_i\) 将诚实地使用与步骤 (2c) 中相同的 \(\{E_{i,j}\}_{j=1}^n, E_i\) 值执行协议。这由步骤 (5) 中的验证保证。
  - 如果 \(P_i\) 发布了一个无效签名 \((σ(3), \{(i, j, E_{i,j})\}_{j=1}^n, (i, E_i), pid||3))\)，其不诚实行为将在步骤 (5(a)i) 中被检测到。
  - 如果 \(P_i\) 使用的 \(\{E_{i,j}\}_{j=1}^n, E_i\) 与步骤 (2c) 中的不同，它将在步骤 (5(a)i) 中被发现是不诚实的。它不能否认这样的投诉，因为它的签名 \((σ(1), (i, f_{pi}, pid||1))\) 已经在步骤 (3) 中被所有 PKG 验证。

类似地，如果 \(P_i\) 不诚实地执行步骤 (4a)，它将被某个诚实的 PKG 投诉。另一方面，如果 \(P_i\) 诚实地执行步骤 (4a)，则没有任何 PKG 会在冒着被调查的风险下陷害 \(P_i\)。此外，每个 \(P_j\) 必须向公共公告板发布 \((σ(5), (i, j, result_{i,j}, pid||5))\) 作为其对 \((σ(3), \{(i, j, E_{i,j})\}_{j=1}^n, (i, E_i), pid||3))\) 的验证结果，因此每个 \(P_j\) 将诚实地执行步骤 (5)。

现在我们可以得出结论，在步骤 (2) 结束时，\(\{({E_{i,j}}_{j=1}^n, E_i)\}_{i=1}^n\) 的值已经固定，任何后来尝试更改这些值的行为都将被检测并投诉。基本思路如下：

1. 在第一阶段，每个 PKG 确定自己的份额，但不立即发送给其他 PKG。相反，每个 PKG 发布其份额的消息指纹及其对该指纹的签名。
2. 在第二阶段，验证签名，确保没有 PKG 可以在后续阶段否认消息指纹的完整性。
3. 在第三阶段，所有份额都被发送给其他 PKG。通过比较份额的消息指纹和第一阶段发布的指纹，可以确定份额是否被篡改。