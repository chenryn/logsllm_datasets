tic strategy that is likely to require the taking of many
snapshots of the host’s state over time before the hidden
process’s luck runs out. A more deterministic approach
might be to compare the population of the kernel’s nu-
merous wait and run queues with the population of the
all-tasks list.
In order to be eligible for scheduling, a
process must be on one of these wait or run queues; a
process on a wait or run queue but not in the all-tasks list
is hiding. This strategy would require a more complex
model speciﬁcation.
4.2 A Second Example: the SELinux AVC
In Section 2, we described an attack against the SELinux
AVC whereby an attacker with the ability to write to
memory could modify the permissions of an entry in
298
Security ’06: 15th USENIX Security Symposium
USENIX Association
structure AVCNode {
}
int ssid;
int tsid;
short tclass;
reserved short;
int allowed;
int decided;
int auditallow;
int auditdeny;
int seqno;
int atomic;
ListHead list;
structure AVTab {
}
AVTabNode **htable;
int nel;
structure SidTab {
}
SidTabNode **htable;
int nel;
structure AVTabNode {
}
int source_type;
int target_type;
int target_class;
int specified;
int allowed;
int auditdeny;
int auditallow;
AVTabNode *next;
structure SidTabNode {
}
int sid;
int user;
int role;
int type;
reserved byte[24];
SidTabNode *next;
SidTab sidtab;
AVCCache avc_cache;
Policydb policydb;
structure ListHead {
ListHead *next; 
ListHead *prev;
}
structure AVCCache {
}
ListHead slots[512];
structure Policydb {
}
reserved byte[108];
AVTab te_avtab;
rserved byte[8];
AVTab te_cond_avtab;
(a) Low−Level Structure Definitons
Set AllSids(SidTabNode);
Set AllAVCNodes(AVCNode);
Set TEAVTabNodes(AVTabNode);
Set TECondAVTabNodes(AVTabNode);
avcssidtype : AVCNode −> SidTabNode;
avctsidtype : AVCNode −> SidTabNode;
avcteavtabmapping : AVCNode −> TEAVTabNode;
avctecondavtabmapping : AVCNode −> TECondAVTabNode;
(b) Model Space Definition
Figure 4: SELinux access vector cache structure and model deﬁnitions.
the cache to give a particular process access not permit-
ted by the SELinux policy. We further explained that
existing hashing techniques can be used to protect the
memory-resident full policy, but not the AVC because
of its dynamic nature. Our approach for protecting the
AVC therefore begins with the assumption that a sim-
ple “binary” integrity system is protecting the static data
structures that represent the full policy. We then use our
semantic integrity monitor to implement a speciﬁcation
whose goal is to compare all AVC entries with their pro-
tected entries in the full policy. Figures 4 and 5 dis-
play the full speciﬁcation we used to protect the SELinux
AVC. This speciﬁcation is more complex than the pre-
vious example largely due to the complexities of the
SELinux system and its data structures. However, the
complexity of the speciﬁcation is minimal as compared
with the number of lines of code that would be required
to implement the equivalent checks in low-level code
(eight model deﬁnition rules and one constraint rule ver-
sus the 709 lines of C code in our example implementa-
tion).
There are four primary entities in our SELinux spec-
iﬁcation: the security identiﬁer table (of type SIDTab),
the access vector cache (an AVCCache), the Type En-
forcement access vector table (an AVTab), and its coun-
terpart the Type Enforcement conditional access vector
table (also an AVTab). The model deﬁnition rules ﬁrst
create a set of SIDs by walking through the SID table
and then, similarly, create a set of all AVC nodes from
the AVC. The third and fourth rules are used to create
mappings between the AVC nodes and their source and
target SIDs. Rules ﬁve and six look-up each AVC node
in the full Type Enforcement policy for both conditional
and non-conditional access vector tables. The ﬁnal two
model deﬁnition rules create a mapping between AVC
nodes and their corresponding entries in the Type En-
forcement access vector tables. The single constraint rule
simply walks through all AVC nodes and checks that the
allowable ﬁeld matches the combined (bitwise OR) value
of the two corresponding Type Enforcement access vec-
tor entries for that AVC node. As with the last exam-
ple, an administrator is notiﬁed if the data structures are
found to be inconsistent.
We have tested our code against an attacking loadable
kernel module that modiﬁes the permissions for a par-
ticular AVC entry. A rootkit might make such a mod-
iﬁcation to temporarily elevate the privileges of one or
more processes in a manner that could not be detected by
an integrity monitor that observed only static data struc-
tures. Our speciﬁcation successfully detects the attack
against our Fedora Core 4 system conﬁgured with the de-
fault SELinux “targeted” policy operating in “enforcing”
mode.
USENIX Association
Security ’06: 15th USENIX Security Symposium
299
true => container (j, AVCNode, list.next ) in AllAVCNodes ;
[ for i = 0 to 128, for_list j as SidTabNode.next starting sidtab.htable[i] ], true => j in AllSids ;
[ for i = 0 to 512, for_circular_list j as ListHead.next starting avc_cache.slots[i] ], true =>
[ for a in AllAVCNodes, for s in AllSids ], (a.ssid = s.sid) =>  in avcssidtype ;
[ for a in AllAVCNodes, for s in AllSids ], (a.tsid  = s.sid) =>  in avctsidtype ;
[ for a in AllAVCNodes, for_list j as AVTabNode.next starting 
policydb.te_avtab.htable[a.tclass + a.avctsidtype.type * 4 + a.avcssidtype.type * 512].next ],
(j.source_type = a.avcssidtype.type AND j.target_type = a.avctsidtype.type) 
=> j in TEAVTabNodes;
[ for a in AllAVCNodes, for_list j as AVTabNode.next starting 
policydb.te_cond_avtab.htable[a.tclass + a.avctsidtype.type * 4 + a.avcssidtype.type * 512].next ],
(j.source_type = a.avcssidtype.type AND j.target_type = a.avctsidtype.type) 
=> j in TECondAVTabNodes;
 in avcteavtabmapping;
(c.avcssidtype.sid = a.source_type AND
c.avctsidtype.sid = a.target_type AND
c.tclass = a.target_class) =>
[ for c in AllACNodes, for a in TEAVTabNodes ],
[ for c in AllACNodes, for a in TECondAVTabNodes ],
(c.avcssidtype.sid = a.source_type AND
c.avctsidtype.sid = a.target_type AND
c.tclass = a.target_class) =>
 in avctecondavtabmapping;
(a) Model Building Rules
[ for c in AllAVCNodes ], c.allowed = (c.avcteavtabmapping.allowed | c.avctecondavtabmapping.allwed)
: notify_admin ("AVC Cache entry has improper privileges " + c.callowed + " at virtual address " + c);
(b) Constraints
Figure 5: SELinux access vector cache speciﬁcation rules.
5 Discussion
The approach proposed in this paper is to detect mali-
cious modiﬁcations of kernel memory by comparing ac-
tual observed kernel state with a speciﬁcation of correct
kernel state. The speciﬁcation describes possible cor-
rect kernel states, not signatures of known attacks.
In
this way, our approach is a type of speciﬁcation-based
intrusion detection. We do not follow the approach of
traditional signature-based virus scanners. Thus far, we
have provided two example speciﬁcations for our system
and identiﬁed the types of modiﬁcations that these spec-
iﬁcations can detect. While our examples are useful for
demonstrating how the proposed system works, they pro-
vide little intuition about how speciﬁcations would be de-
veloped in a real deployment. In this section, we provide
a high-level methodology for identifying system proper-
ties of interest and describe three classes of threats we
have identiﬁed.
Currently, there are two methods for identifying data
properties and writing their corresponding speciﬁcations:
(1) analyzing and abstracting on known threats and (2)
deriving data properties and speciﬁcations from a high-
level English-language security policy. In the analysis
of known threats, the goal is to classify the techniques
used by adversaries in previous attacks in order to ab-
stract on these methodologies. The result is the identiﬁ-
cation of a set of data invariants that may be violated by
future attacks. Of course, this approach permits the pos-
sibility that new attacks may avoid detection by exploit-
ing only those details of the kernel abstracted out of the
speciﬁcation, leading to an interminable ”arms race” be-
tween attackers and speciﬁcation-writers. Nevertheless,
this approach is still better than the traditional signature-
based virus-scanning approach in that each speciﬁcation
has the potential to detect an entire class of similar at-
tacks, rather than only a single instance.
It may be possible to avoid such an arms race by us-
ing an alternate approach: deriving speciﬁcations from
a high-level English-language security policy rather than
from an analysis of known attacks. In this approach, an
analyst might begin with a policy such as ”no runnable
processes shall be hidden” or ”my reference monitor en-
forces my particular mandatory access control policy”
and then examine the kernel source to determine which
data structures have relevant properties and what those
properties should be in order for the high-level policy to
hold. The analyst’s task is similar to constructing a for-
mal argument for correctness, except that the end result
is a conﬁguration for a runtime monitor.
Section 4 presents two examples of the types of
the
speciﬁcations one might obtain as a result of
300
Security ’06: 15th USENIX Security Symposium
USENIX Association
methodologies just described. Using these techniques,
we have identiﬁed three classes of attacks against
dynamic kernel data. While it is likely there are other
classes of attacks, we believe the three identiﬁed thus
far provide evidence of the potential success of our
approach. The following are the attack classes we have
identiﬁed:
Data hiding attacks. This class of attacks was demon-
strated in Section 2.1 with the Linux process hiding
example. The distinguishing characteristic of this class
is the removal of objects from data structures used
by important kernel subsystems for accounting and
reporting. Writing speciﬁcations capable of detecting
these attacks requires identifying data structures that
are used by kernel resource reporting procedures such
as system calls and, in the case of Linux, the /proc
ﬁlesystem.
Capability/access control modiﬁcation attacks. One
of the fundamental goals of kernel attackers is to provide
their processes with privileges and access to resources.
To this end, process capabilities in the form of tokens,
ﬂags, and descriptors are likely targets of an attacker
with kernel memory access. In addition to the SELinux
AVC example, described in Section 2.2, we have iden-
tiﬁed user/group identiﬁers, scheduler parameters (e.g.,
nice value), and POSIX capabilities as potential targets.
We are actively writing speciﬁcations to protect this data.
Control ﬂow modiﬁcation attacks. One popular tech-
nique for gaining control of kernel functionality is the
modiﬁcation of function pointers in dynamic data struc-
tures such as those associated with the virtual ﬁlesystem
(VFS) and /proc ﬁlesystem. As demonstrated by
popular rootkits like adore-ng, manipulating these
pointers provides attackers with a “hook” to execute
their inserted code. While previous generations of
kernel integrity monitors have demonstrated effective
detection of hooks placed in static data (e.g., the system
call table), dynamic function pointers have remained an
elusive target. We are actively writing a large number of
simple speciﬁcation rules to test the validity of kernel
pointers throughout dynamic data. Additionally, we
intend to investigate the use of automated tools to make
this process easier and more complete.
Unlike misuse detection systems, our speciﬁcation-
based approach allows for the identiﬁcation and detec-
tion of classes of attacks without a priori knowledge of
particular instances of threats.
6 Related Work
The architecture we have proposed was inspired by
the work of four separate areas: external kernel mon-
itors [17, 37, 13, 29], speciﬁcation-based intrusion de-
tection [20, 32], speciﬁcation-based data structure re-
pair [7], and semantic integrity in database systems [15].
Work in the areas of software attestation and veriﬁable
code generation is also closely related. We brieﬂy de-
scribe this body of work here.
6.1 Kernel Integrity Monitors
We broadly categorize external kernel monitors as any
system that operates outside of the protected kernel in
order to provide independent, trustworthy analysis of the
state of the protected host. Examples of such systems
in the recent literature include coprocessor-based moni-
tors [37, 29], SMP-based monitors [17], and virtual ma-
chine introspection [13]. While each of these systems
has introduced its own mechanism for inspecting the in-
ternal state of the protected host, all have at least one
common goal:
to monitor a running host for unautho-
rized modiﬁcations of kernel memory. While some ad-
hoc techniques for limited protection of dynamic data
have been demonstrated (although not described in de-
tail) on a couple of these systems [13, 37], the predom-
inant detection technique remains binary or checksum
comparison of known static objects in memory.
The types of checks performed by these systems are
not incorrect or without value. These systems provide
a foundation on which our approach aims to extend to
broaden the set of kernel attacks detectable from such
platforms.
6.2 Attestation and Veriﬁable Execution
Code attestation [18, 12, 34, 30, 31, 35] is a technique by
which a remote party, the “challenger” or “veriﬁer,” can
verify the authenticity of code running on a particular
machine, the “attestor.” Attestation is typically achieved
via a set of measurements performed on the attestor that
are subsequently sent to the challenger, who identiﬁes
the validity of the measurements as well as the state of
the system indicated by those measurements [30]. Both
hardware-based [12, 30, 31] and software-based [18, 34]
attestation systems have been developed. Measurement
typically occurs just before a particular piece of code is
loaded, such as between two stages of the boot process,
before a kernel loads an new kernel module, or when a
kernel loads a program to be executed in userspace [30].
All of the hardware-based systems referenced in this pa-
per utilize the Trusted Computing Group’s (TCG) [2]
Trusted Platform Module (TPM), or a device with sim-
USENIX Association
Security ’06: 15th USENIX Security Symposium
301
ilar properties, as a hardware root of trust that validates
measurements prior to software being loaded at runtime.
Software-based attestation systems attempt to provide
similar guarantees to those that utilize trusted hardware
and typically rely on well-engineered veriﬁcation func-
tions that, when modiﬁed by an attacker, will necessarily
produce incorrect output or take noticeably longer to run.
This deviation of output or running time is designed to be
signiﬁcant enough to alert the veriﬁer of foul play.
Traditional attestation systems verify only binary
properties of static code and data. In such systems, the