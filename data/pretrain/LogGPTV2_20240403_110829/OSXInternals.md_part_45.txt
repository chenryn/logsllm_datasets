5.2.5. Processor-Specific Initialization
The ptInitRout field of a processor_types table entry, if valid, points to a function for model-specific initialization of the processor. This
field points to init970() [osfmk/ppc/start.s] for both the 970 and the 970FX. init970() clears the "deep nap" bit of HID0[3] during all
types of processor initialization: during the boot processor's first initialization, when a slave processor is started, or when a processor wakes up
from sleep. In the case of the boot processor initializing for the first time, init970() synthesizes a dummy L2 cache register (L2CR), with its
value set to the actual L2 cache size on the 970FX (512KB).
[3] Recall from Chapter 3 that the 970FX contains four Hardware-Implementation-Dependent (HID) registers: HID0, HID1, HID4,
and HID5.
At this point, the kernel sets the valid bit (pfValid) in the Available field of the processor features member (pF) of the per_proc_info
structure.
Next, the kernel performs initialization based on whether the processor is 32-bit or 64-bit. For example, on a 32-bit processor, the BAT registers
are cleared and the contents of the HID0 register are adjusted to clear any sleep-related bits. Thereafter, the code branches to startcommon()
[osfmk/ppc/start.s]. On a 64-bit processor, the kernel sets the value of HID0 appropriately, prepares a machine status value in the SRR1
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 11 of 59
register, and loads the continuation point (the startcommon() routine) in SRR0. It then executes an rfid instruction, which results in the
machine state in SRR1 to be restored to the Machine State Register (MSR). Execution then continues in startcommon().
5.2.6. Other Early Initialization
The kernel checks whether the floating-point facility is available on the processor, and if so, it loads FPR0 with a known floating-point
initialization value, which is then copied to the rest of the FPRs. Floating-point is then turned off for the time being. The initialization value is
defined in osfmk/ppc/aligned_data.s:
.globl EXT(FloatInit)
.align 3
EXT(FloatInit):
.long 0xC24BC195
/* Initial value */
.long 0x87859393
/* of floating-point registers */
.long 0xE681A2C8
/* and others */
.long 0x8599855A
After booting, the value can be seen in an FPR as long as that FPR has not been used. For example, you can debug a simple program using GDB
and view the contents of the FPRs.
$ cat test.c
main() { }
$ gcc -g -o test test.c
$ gdb ./test
...
(gdb) break main
Breakpoint 1 at 0x2d34: file test.c, line 1.
(gdb) run
...
Breakpoint 1, main () at test.c:1
1 main() { }
(gdb) info all-registers
...
f14 -238423838475.15292 (raw 0xc24bc19587859393)
f15 -238423838475.15292 (raw 0xc24bc19587859393)
f16 -238423838475.15292 (raw 0xc24bc19587859393)
...
Similarly, the kernel checks whether AltiVec is availableif it is, the kernel sets the VRSAVE register to zero, indicating that no VRs have been
used yet. It sets the non-Java (NJ) bit and clears the saturate (SAT) bit in the VSCRwe discussed these bits in Chapter 3. A special vector
initialization value is loaded into VR0, which is then copied to the other VRs. AltiVec is then turned off for the time being. The initialization
value, labeled QNaNbarbarian, is defined in osfmk/ppc/aligned_data.s. It is a sequence of long integers, each with a value of 0x7FFFDEAD.
Again, you can potentially see this value in untouched VRs while debugging a program.
(gdb) info all-registers
...
v0 {
uint128 = 0x7fffdead7fffdead7fffdead7fffdead,
v4_float = {nan(0x7fdead), nan(0x7fdead), nan(0x7fdead), nan(0x7fdead)},
v4_int32 = {2147475117, 2147475117, 2147475117, 2147475117},
v8_int16 = {32767, -8531, 32767, -8531, 32767, -8531, 32767, -8531},
v16_int8 = "\177??\177??\177??\177??"
} (raw 0x7fffdead7fffdead7fffdead7fffdead)
...
Quiet NaNs
A floating-point number's value is considered a "Not a Number" (NaN) if the number's exponent is 255 and its fraction is
nonzero. Moreover, the NaN is a signaling NaN (SNaN) or a quiet NaN (QNaN) depending on whether the most significant bit
of its fraction field is zero or nonzero, respectively. Whereas a signaling NaN signals exceptions when it is specified as an
arithmetic operand, a quiet NaN is propagated through most floating-point operations.
The kernel then initializes all caches by calling cacheInit() [osfmk/ppc/machine_routines_asm.s], which first ensures that a variety of
features are turned off.[4] For example, it turns off data and instruction address translation, external interrupts, floating-point, and AltiVec. It
also initializes various caches via steps such as the following:
[4] Many of these features are likely to be turned off already.
 It stops all data streams using the dssall instruction.
 It purges and syncs the TLBs using the tlbie and tlbsync instructions, respectively.
 On the 64-bit PowerPC, it syncs the page table entries using ptesync.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 12 of 59
 On the 32-bit PowerPC, it initializes the L1, L2, and L3 caches. If a cache was enabled earlier, its contents are first flushed to memory.
Hardware-assisted cache flush is used when available. Thereafter, the caches are invalidated and eventually turned on.
On 64-bit processors, cache management is rather different than on 32-bit processors. For example, the L2 cache cannot be disabled on the
970FX. Consequently, the kernel performs a different set of operations to initialize the caches.
 It disables instruction prefetching by clearing bits 7 and 8 of HID1.
 It disables data prefetching by setting bit 25 of HID4.
 It enables L1 D-cache[5] flash invalidation by setting bit 28 of HID4. Flash invalidation is a special mode that allows complete
invalidation of the L1 D-cache by simply setting a bit and executing the sync instruction.
[5] Recall from Chapter 3 that the L1 D-cache on the 970FX is a store-through cacheit never stores modified data. There may
be pending stores in the store queue above the L1 D-cache, which may require the sync instruction to be executed to ensure
global coherency.
 It disables the L1 D-cache by setting bits 37 and 38 of HID4.
 It manipulates the L2 cache to use direct-mapped mode instead of set-associative mode. It uses the processor's Scan Communications
facility (see the sidebar "The SCOM Facility") to make this change. Thereafter, victims to evict from the cache are selected based on a
simple address decode of real address bits 42 through 44.
 It performs a memory flush of the entire L2 cache through a sequence of loads of 4MB cacheable regions of memory from addresses that
increment according to the algorithm shown in Figure 57.
Figure 57. Flushing the L2 cache on the PowerPC 970FX
// pseudocode
offset = 0;
do {
addr = 0x400000; // 4MB cacheable memory region
addr = addr | offset;
load_to_register_from_address(addr);
for (i = 1; i cpu_type = CPU_TYPE_POWERPC;
proc_info->cpu_subtype = (cpu_subtype_t)proc_info->pf.rptdProc;
proc_info->cpu_threadtype = CPU_THREADTYPE_NONE;
proc_info->running = TRUE;
}
processor_bootstrap() [osfmk/kern/processor.c] is a Mach function that sets the value of the global variable master_processor from
the value of the global variable master_cpu, which is set to 0 before this function is called. It calls the cpu_to_processor()
[osfmk/ppc/cpu.c] function to convert a cpu (an integer) to a processor (a processor_t).
// osfmk/ppc/cpu.c
processor_t
cpu_to_processor(int cpu)
{
return ((processor_t)PerProcTable[cpu].ppe_vaddr->processor);
}
As we saw in Figure 53, the ppe_vaddr field points to a per_proc_info structure. Its processor field, shown as a character array in Figure 53,
houses a processor_t data type, which is Mach's abstraction for a processor.[7] Its contents include several data structures related to
scheduling. processor_bootstrap() calls processor_init() [osfmk/kern/processor.c], which initializes a processor_t's scheduling-
related fields, and sets up a timer for quantum expiration.
[7] We will look at details of Mach's processor abstraction in Chapter 7.
ppc_init() then sets the static_memory_end global variable to the highest address used in the kernel's data area, rounded off to the nearest
page. Recall from Chapter 4 that the topOfKernelData field of the boot_args structure contains this value. ppc_init() calls
PE_init_platform() [pexpert/ppc/pe_init.c] to initialize some aspects of the Platform Expert. The call is made with the first argument
(vm_initialized) set to FALSE, indicating that the virtual memory (VM) subsystem is not yet initialized. PE_init_platform() copies the boot
arguments pointer, the pointer to the device tree, and the display properties to a global structure variable called PE_state, which is of type
PE_state_t.
// pexpert/pexpert/pexpert.h
typedef struct PE_state {
boolean_t initialized;
PE_Video video;
void *deviceTreeHead;
void *bootArgs;
#if __i386__
void *fakePPCBootArgs;
#endif
} PE_state_t;
extern PE_state_t PE_state;
// pexpert/ppc/pe_init.c
PE_state_t PE_state;
PE_init_platform() then calls DTInit() [pexpert/gen/device_tree.c] to initialize the Open Firmware device tree routines. DTInit()
simply initializes a pointer to the device tree's root node. Finally, PE_init_platform() calls pe_identify_machine()
[pexpert/ppc/pe_identify_machine.c], which populates a clock_frequency_info_t variable (gPEClockFrequencyInfo) with various
frequencies such as that of the Timebase, the processor, and the bus.
// pexpert/pexpert/pexpert.h
struct clock_frequency_info_t {
unsigned long bus_clock_rate_hz;
unsigned long cpu_clock_rate_hz;
unsigned long dec_clock_rate_hz;
...
unsigned long long cpu_frequency_hz;
unsigned long long cpu_frequency_min_hz;
unsigned long long cpu_frequency_max_hz;
};
typedef struct clock_frequency_info_t clock_frequency_info_t;
extern clock_frequency_info_t gPEClockFrequencyInfo;
ppc_init() parses several boot arguments at this point, such as novmx, fn, pmsx, lcks, diag, ctrc, tb, maxmem, wcte, mcklog, and ht_shift.
We came across all these in Chapter 4. However, not all arguments are processed immediatelyin the case of some arguments, ppc_init() sets
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 15 of 59
the values of only certain kernel variables for later referral.
5.3.2. Low-Level Virtual Memory Initialization
ppc_init() calls ppc_vm_init() [osfmk/ppc/ppc_vm_init.c] to initialize hardware-dependent aspects of the virtual memory subsystem.
The key actions performed by ppc_vm_init() are shown in Figure 58.
5.3.2.1. Sizing Memory
ppc_vm_init() first invalidates the in-memory shadow BATs by loading them with zeros. It then retrieves information about physical memory
banks from the boot arguments. This information is used to calculate the total amount of memory on the machine. For each available bank that
is usable, ppc_vm_init() initializes a memory region structure (mem_region_t).
// osfmk/ppc/mappings.h
typedef struct mem_region {
phys_entry *mrPhysTab; // Base of region table
ppnum_t mrStart; // Start of region
ppnum_t mrEnd; // Last page in region
ppnum_t mrAStart; // Next page in region to allocate
ppnum_t mrAEnd; // Last page in region to allocate
} mem_region_t;
...
#define PMAP_MEM_REGION_MAX 11
extern mem_region_t \
pmap_mem_regions[PMAP_MEM_REGION_MAX + 1];
extern int pmap_mem_regions_count;
...
Note that it is possible for physical memory to be noncontiguous. The kernel maps the potentially noncontiguous physical space into contiguous
physical-to-virtual mapping tables. pmap_vm_init() creates an entry in the pmap_mem_regions array for each DRAM bank it uses, while
incrementing pmap_mem_regions_count. The kernel calculates several maximum values for memory size. For example, on machines with more
than 2GB of physical memory, one of the maximum memory values is pinned at 2GB for compatibility. Certain data structures must also reside
within the first 2GB of physical memory. The following are specific examples of memory limits established by ppc_vm_init().
 mem_size is the 32-bit physical memory size, minus any performance buffer. It is pinned at 2GB on machines with more than 2GB of
physical memory. It can be limited by the maxmem boot-time argument.
 max_mem is the 64-bit memory size. It can also be limited by maxmem.
 mem_actual is the 64-bit physical memory size that equals the highest physical address plus 1. It cannot be limited by maxmem.
 sane_size is the same as max_mem, unless max_mem exceeds VM_MAX_KERNEL_ADDRESS, in which case sane_size is pinned at
VM_MAX_KERNEL_ADDRESS, which is defined to be 0xDFFFFFFF (3.5GB) in osfmk/mach/ppc/vm_param.h.
ppc_vm_init() sets the first_avail variable, which represents the first available virtual address, to static_memory_end (note that virtual
memory is not operational yet). Next, it computes kmapsizethe size of kernel text and databy retrieving segment addresses from the kernel's
Mach-O headers. It then calls pmap_bootstrap() [osfmk/ppc/pmap.c] with three arguments: max_mem, first_avail, and kmapsize. Next,
pmap_bootstrap() prepares the system for running with virtual memory.
5.3.2.2. Pmap Initialization
The physical map (pmap) layer[8] is the machine-dependent portion of Mach's virtual memory subsystem. pmap_bootstrap() first initializes
the kernel's physical map (kernel_pmap). It then finds space for the page table entry group (PTEG) hash table and the PTEG Control Area
(PCA). The in-memory hash table has the following characteristics.
[8] We will discuss the pmap layer in Chapter 8.
 The kernel allocates one PTEG per four physical pages.[9] As we saw in Chapter 4, the ht_shift boot argument allows the hash table's
size to be altered.
[9] The IBM-recommended hash table size is one PTEG per two physical pages.
 The table is allocated in physical memory in the highest available range of physically contiguous memory.
 The PCA resides immediately before the hash table. Its size is calculated from the hash table size.
The PCA's structure is declared in osfmk/ppc/mappings.h.
// osfmk/ppc/mappings.h
typedef struct PCA {
union flgs {
unsigned int PCAallo; // Allocation controls
struct PCAalflgs {
unsigned char PCAfree; // Indicates the slot is free
unsigned char PCAsteal; // Steal scan start position
unsigned char PCAauto; // Indicates that the PTE was autogenned
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 16 of 59
unsigned char PCAmisc; // Miscellaneous flags
#define PCAlock 1 // This locks up the associated PTEG
#define PCAlockb 31
} PCAalflgs;
} flgs;
} PCA_t;
The program in Figure 59 performs the same calculations as the kernel to calculate the page hash table size on a machine. You can use it to
determine the amount of memory used by the page table given the amount of physical memory on the machine and the size of a PTEG. Note the
use of the cntlzw PowerPC instruction to count the number of leading zeros.
Figure 59. Calculating the PowerPC PTEG hash table size used by the kernel
$ cat hash_table_size.c
// hash_table_size.c
#define PROGNAME "hash_table_size"
#include 
#include 
#include 
#include 
typedef unsigned int uint_t;
#define PTEG_SIZE_G4 64
#define PTEG_SIZE_G5 128
extern unsigned int cntlzw(unsigned int num);