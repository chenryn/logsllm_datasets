title:DisTA: Generic Dynamic Taint Tracking for Java-Based Distributed Systems
author:Dong Wang and
Yu Gao and
Wensheng Dou and
Jun Wei
0
6
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
DisTA: Generic Dynamic Taint Tracking for
Java-Based Distributed Systems
State Key Lab of Computer Sciences, Institute of Software, Chinese Academy of Sciences, Beijing, China
Dong Wang, Yu Gao, Wensheng Dou, Jun Wei
University of Chinese Academy of Sciences, Beijing, China
{wangdong18, gaoyu15, wsdou, wj}@otcaix.iscas.ac.cn
Abstract—Dynamic taint tracking is a powerful information
ﬂow analysis approach, which can be applied in many analysis
scenarios, e.g., debugging, testing, and security vulnerability
detection. Most dynamic taint tracking approaches are designed
for standalone systems, and cannot support inter-node taint
tracking in distributed systems. Few inter-node taint tracking
approaches are designed for speciﬁc distributed systems, e.g.,
Apache Spark, and require speciﬁc modiﬁcations to different
distributed systems.
In this paper, we present DisTA, a generic dynamic taint
tracking tool for Java-based distributed systems. By instrument-
ing common network communication modules in Java, DisTA
can perform inter-node taint tracking for different distributed
systems with little manual efforts. We evaluate DisTA on ﬁve
large-scale real-world distributed systems, e.g., ZooKeeper and
Yarn, and require only 10 LOC launch script modiﬁcation on
average. The experimental results show that DisTA can accurately
track all inter-node taints with a relatively low overhead.
Index Terms—taint tracking, data ﬂow analysis, distributed
systems
I. INTRODUCTION
Dynamic taint
tracking (DTA) [1] is a commonly-used
technique in privacy leakage detection [2], SQL injection
detection [3], program debugging [4], [5] and testing [2],
[6], [7], etc. With DTA tools, developers ﬁrst assign taints to
certain speciﬁc data in the program, i.e., taint source points.
Then, taints can propagate along with data during the program
execution. Users can further set program points in the program,
i.e., taint sink points, to check whether the data is tainted.
Nowadays, distributed systems, e.g, distributed computing
frameworks [8], [9], storage systems [10], [11], synchro-
nization services [12], [13], have become pervasive. These
distributed systems are usually deployed on multiple machines
(i.e., nodes) which communicate with each other by messages.
Sometimes, multiple distributed systems, e.g., distributed com-
puting frameworks and storage systems, also need to work
together to fulﬁl speciﬁc user requirements. This hinders
applying DTA in distributed systems, for example, tracking
the privacy data in storage systems to monitor if the privacy
data is leaked to untrusted nodes [14].
Existing DTA tools [15]–[21], e.g., Phosphor [22] and
TaintDroid [2], mainly work on standalone systems, and can
only perform intra-node taint
tracking. They usually treat
the communication among nodes as a blackbox, and cannot
perform inter-node taint tracking. Further, they cannot perform
taint tracking among multiple distributed systems, i.e., cross-
system taint tracking.
Few tools are designed for tracking taints in distributed
systems, e.g., Taint-Exchange [23], Kakute [14], and FlowDist
[24]. Taint-Exchange intercepts network related system calls to
propagate taints with messages. Kakute [14] modiﬁes Apache
Spark’s network communication methods, i.e., shufﬂe meth-
ods, and then propagates taints among nodes within RDD data.
FlowDist [24] manually pairs the speciﬁed message-passing
APIs for senders and receivers, e.g., SocketChannel.read and
SocketChannel.write, to trace message transfer between nodes,
and further analyzes inter-node data ﬂows by static analysis.
However, these tools suffer from soundness, precision and
usability issues. Taint-Exchange [23] can only support the
single taint, i.e., mark the data as tainted or not, which prevents
it being used in some scenarios, e.g., program debugging [5].
Besides, it cannot be applied on Java programs running in
JVM. Kakute [14] can only work on Apache Spark, and cannot
track other data except Spark RDDs. FlowDist [24] requires
developers to use their experience to annotate message-passing
API mapping, and write dozens of script ﬁles to drive its anal-
ysis. Furthermore, its static analysis can introduce precision
issues.
In this paper, we present DisTA, a generic dynamic taint
tracking tool for Java-based distributed systems. DisTA has
the following three advantages over existing approaches.
• Sound. Network communication in Java-based dis-
tributed systems utilizes Java Native Interface, i.e., JNI,
to bridge Java APIs and the underlying operating system.
DisTA instruments network communication APIs at the
JNI level, and avoids missing network communication
in distributed systems. Thus, DisTA is sound for taint
tracking involving network communication.
• Precise. All messages between nodes are ﬁnally trans-
ferred into bytes. To achieve high precision, DisTA per-
form inter-node taint tracking at the byte-level granularity
for all network communication APIs.
• Generic. By instrumenting the common network com-
munication modules in JRE, DisTA can be easily applied
to different Java-based distributed systems without extra
system-speciﬁc modiﬁcations. By supporting multi-taint
tracking, DisTA can be used in multiple scenarios.
To evaluate DisTA, we build a micro benchmark which
contains 30 test scenarios for common network communica-
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00060
547
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:27 UTC from IEEE Xplore.  Restrictions apply. 
Node 1
“Vote Node 2”
Vote(
(Vote data
1.   Vote vote = new Vote(“Vote Node 2”);
2.   SendWorker(Vote data) {
3.      Socket client = new Socket(Node2_ADDRESS);
4.      OutputStream output = client.getOutputStream();
5.      output.write(data.toBytes());
6.   }
t
m
ite
Node 2
16.   RecvWorker(byte[] data) {
byte[] data)
) {
17.      Socket server = serverSocket.accept();
18.      InputStream input = client.getInputStream();
19.      input.read(data);
20.   }
21.   Notification n = new Notification(data);
data)
oc
nt
on(
=
in
da
io
et
(byte[] b)
7.   // java.net.SocketOutputStream.java
8.   write(byte[] b) {
9.      socketWrite0(…, b, …);
rite0(…,
rite0(…
10.   }
11.   native socketWrite0(…, byte[] b, …);
byte[] b
e
22.   // java.net.SocketInputStream.java
23.   read(byte[] b) {
24.      socketRead0(…, b, …);
25.   }
26.   native socketRead0(…, byte[] b, …);
(byte[] b
Read0(…, 
ead
byte[] b
12.   // solaris\native\java\net\SocketOutputStream.c
13.   Java_java_net_SocketOutputStream
\
St
27.   // solaris\native\java\net\SocketInputStream.c
28.   Java_java_net_SocketInputStream
t
S
_socketWrite0(jbyteArray data) {
jbyteArray data)
_socketRead0(jbyteArray data) {
jbyteArray data)
14.      NET_SEND(data);
15.   }
29.      NET_READ(data);
);
30.   }
030
D
i
s
t
r
i
b
u
t
e
d
s
y
s
t
e
m
J
R
E
N
a
t
i
v
e
l
i
b
r
a
r
y