**自定义资源定义** ( **CRDs** )允许任何人通过将您的应用作为标准对象集成到集群中来扩展 Kubernetes。一旦创建了一个 CRD，您可以使用一个应用编程接口端点来引用它，并且可以使用标准的`kubectl`命令与之交互。
### daemmonsets
一个`DaemonSet`允许在集群中的每个节点或者节点的子集上部署一个 Pod。一个对一个`DaemonSet`的常用是部署一个日志转发 Pod，比如 FluentD 到集群中的每个节点。一旦部署完毕，`DaemonSet`将在所有现有节点上创建一个 FluentD Pod。由于`DaemonSet`部署到所有节点，一旦节点加入集群，添加到集群的任何其他节点都将启动 FluentD Pod。
### 部署
我们前面提到，你永远不应该直接部署 Pod，我们还引入了`ReplicationContoller`对象，作为直接创建 Pod 的替代。虽然这两个都将创建您的豆荚，但每个都有以下限制:直接创建的豆荚不能缩放，也不能使用滚动更新进行升级。
由`ReplicationController`创建的吊舱可以缩放，并且可以执行滚动更新。但是，它们不支持回滚，升级不能以声明方式进行。
部署为您提供了一些优势，包括以声明方式管理升级的方式，以及回滚到以前版本的能力。创建部署实际上是由应用编程接口服务器执行的三步过程:创建部署，创建复制集对象，然后为应用创建 Pod。
即使您不打算使用这些功能，您也应该默认使用部署，以便将来可以利用这些功能。
### 复制集
复制集可以用来创建一个或一组豆荚(复制品)。类似于`ReplicationController`对象，`ReplicaSet`对象将保持在该对象的副本计数中定义的 Pods 的设定数量。如果 Pods 太少，Kubernetes 将协调差异并创建缺少的 Pods。如果副本集的 Pods 太多，Kubernetes 将删除 Pods，直到数量等于对象中的副本集计数。
一般来说，您应该避免直接创建副本集。相反，您应该创建一个部署，它将创建和管理一个复制集。
### 状态集
状态集在创建 Pods 时提供了一些独特的功能。它们提供了其他 Pod 创建方法无法提供的特性，包括以下特性:
*   已知的吊舱名称
*   有序部署和扩展
*   有序更新
*   持久存储创建
理解 StatefulSet 优势的最佳方式是查看 Kubernetes 站点的示例清单，如下面的屏幕截图所示:
![Figure 5.9 – StatefulSet manifest example ](img/Fig_5.9_B15514.jpg)
图 5.9–状态集合清单示例
现在，我们可以看看`StatefulSet`对象创建的对象。
清单规定应该有三个名为`nginx`的豆荚复制品。当我们得到一个 Pods 列表时，您会看到三个 Pods 是使用`nginx`名称创建的，带有一个附加的破折号和一个递增的数字。这就是我们在概述中提到将使用已知名称创建 Pods 时的意思，如以下代码片段所示:
```
NAME    READY   STATUS      RESTARTS   AGE
web-0    1/1    Running     0          4m6s
web-1    1/1    Running     0          4m2s
web-2    1/1    Running     0         3m52s
```
吊舱也是按顺序创建的——在创建`web-1`之前，必须完全展开`eb-0`，然后最后是`web-2`。
最后，对于这个例子，我们还使用清单中的`VolumeClaimTemplate`向每个 Pod 添加了一个聚氯乙烯。如果您查看`kubectl get pvc`命令的输出，您会看到创建了三个名称符合我们预期的 PVC(注意，由于空格，我们删除了`VOLUME`列)，如以下代码片段所示:
```
NAME        STATUS   CAPACITY   ACCESS MODES   STORAGECLASS   AGE
www-web-0   	Bound       1Gi             RWO            	      nfs            	    13m
www-web-1   	Bound       1Gi             RWO                       nfs            	    13m
www-web-2   	Bound    	   1Gi             RWO                       nfs            	    12m
```
在货单的`VolumeClaimTemplate`部分，您会看到我们将名称`www`分配给了聚氯乙烯索赔。当您在状态集中分配卷时，聚氯乙烯名称将结合索赔模板中使用的名称和 Pod 的名称。使用这个命名，你可以看到为什么 Kubernetes 分配了聚氯乙烯名称`www-web-0`、`www-web-1`和`www-web-2`。
### 水平自动缩放器
在 Kubernetes 集群上运行工作负载的最大优势之一是能够轻松扩展您的 Pods。虽然您可以使用`kubectl`命令或通过编辑清单的副本数量来进行缩放，但这些都不是自动的，需要手动干预。
**水平自动缩放器** ( **HPAs** )为提供了基于一组标准缩放应用的能力。使用 CPU 和内存使用量等指标，或者您自己的自定义指标，您可以设置一个规则，以便在需要更多 Pods 来维持服务级别时扩大 Pods。经过一段冷却时间后，Kubernetes 会将应用规模缩小到策略中定义的最小 Pods 数量。
为了快速为`nginx`部署创建 HPA，我们可以使用`autoscale`选项执行`kubectl`命令，如下所示:
```
kubectl autoscale deployment nginx --cpu-percent=50 --min=1 --max=5
```
您也可以创建一个 Kubernetes 清单来创建您的 HPA。使用与 CLI 中相同的选项，我们的清单将如下所示:
```
apiVersion: autoscaling/v1
KinD: HorizontalPodAutoscaler
metadata:
  name: nginx-deployment
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    KinD: Deployment
    name: nginx-deployment
  targetCPUUtilizationPercentage: 50
```
两个选项都将创建一个 HPA，当部署达到 50%的 CPU 利用率时，将我们的`nginx-deployment nginx`部署扩展到五个副本。一旦部署使用率低于 50%，并且达到冷却时间(默认为 5 分钟)，副本数量将减少到 1。
### CronJobs
如果你过去使用过 Linux cronjobs，那么你已经知道什么是 Kubernetes `CronJob`对象了。如果你没有 Linux 背景，一个 cronjob 被用来创建一个预定的任务。作为另一个例子，如果你是一个窗口人，它类似于窗口计划任务。
下面的代码片段显示了一个创建`CronJob`的示例清单:
```
apiVersion: batch/v1beta1
KinD: CronJob
metadata:
  name: hello-world
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello-world
            image: busybox
            args:
            - /bin/sh
            - -c
            - date; echo Hello World!
          restartPolicy: OnFailure
```
`schedule`格式遵循标准的`cron`格式。从左到右，每个`*`代表以下内容:
*   分钟(0–59)
*   小时(0 -23)
*   第(1 -31)天
*   月份(1-12)
*   一周中的某一天(0–6)(周日= 0，周六= 6)
Cron 作业接受步骤值，这允许您创建一个可以每分钟、每 2 分钟或每小时执行一次的计划。
我们的示例清单将创建一个`cronjob`，它每分钟运行一个名为`hello-world`的映像，并在 Pod 日志中输出`Hello World!`。
### 乔布斯
作业允许您执行一个或多个 Pod 的特定数量的执行。不像一个`cronjob`对象，这些 Pods 不是按照设定的时间表运行的，而是它们将在创建后执行。作业用于执行可能只需要在初始部署阶段执行的任务。
一个示例用例是一个应用，它可能需要创建 Kubernetes CRDs，该 CRDs 必须在部署主应用之前存在。部署将等待作业执行成功完成。
### 事件
事件对象存储 Kubernetes 对象的事件信息。您不创建事件；相反，您只能检索事件。例如，要检索`kube-system`名称空间的事件，您可以执行`kubectl get events -n kube-system`，或者要显示所有名称空间的事件，您可以执行`kubectl get events --all-namespaces`。
### 入口
您可能已经注意到对象在我们的`api-server`输出中被列出了两次。随着 Kubernetes 升级的发布和 API 服务器中对象的更改，这将发生在对象上。就入口而言，它是扩展应用编程接口的原始部分，在 1.16 版本中被移到了`networking.k8s.io`应用编程接口。该项目将等待几个版本后再取消旧的 API 调用，因此在我们的示例中集群运行 Kubernetes 1.17，使用任何一个 API 都可以。在 1.18 版本中，他们计划完全放弃入口扩展。
### 网络策略
`NetworkPolicy`对象允许您定义网络流量如何流经集群。它们允许你使用 Kubernetes 本地构造来定义哪些 Pods 可以与其他 Pods 对话。如果你曾经在**亚马逊网络服务** ( **AWS** )中使用安全组来锁定两组系统之间的访问，这是一个类似的概念。例如，以下策略将允许端口`443`上的流量从任何带有`app.kubernetes.io/name: ingress-nginx`标签的名称空间(这是`nginx-ingress`名称空间的默认标签)流向`myns`名称空间中的 Pods:
```
apiVersion: networking.k8s.io/v1
KinD: NetworkPolicy
metadata:
  name: allow-from-ingress
  namespace: myns
spec:
  PodSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx    ports: