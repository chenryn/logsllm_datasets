```  
/* EXPLAIN ANALYZE statistics for one plan node of a slice */  
typedef struct CdbExplain_StatInst  
{  
        NodeTag         pstype;                 /* PlanState node type */  
        bool            running;                /* True if we've completed first tuple */  
        instr_time      starttime;              /* Start time of current iteration of node */  
        instr_time      counter;                /* Accumulated runtime for this node */  
        double          firsttuple;             /* Time for first tuple of this cycle */  
        double          startup;                /* Total startup time (in seconds) */  
        double          total;                  /* Total total time (in seconds) */  
        double          ntuples;                /* Total tuples produced */  
        double          nloops;                 /* # of run cycles for this node */  
        double          execmemused;    /* executor memory used (bytes) */  
        double          workmemused;    /* work_mem actually used (bytes) */  
        double          workmemwanted;  /* work_mem to avoid workfile i/o (bytes) */  
        bool            workfileCreated;        /* workfile created in this node */  
        instr_time      firststart;             /* Start time of first iteration of node */  
        double          peakMemBalance; /* Max mem account balance */  
        int                     numPartScanned; /* Number of part tables scanned */  
        int                     bnotes;                 /* Offset to beginning of node's extra text */  
        int                     enotes;                 /* Offset to end of node's extra text */  
} CdbExplain_StatInst;  
/* EXPLAIN ANALYZE statistics for one process working on one slice */  
typedef struct CdbExplain_SliceWorker  
{  
        double          peakmemused;    /* bytes alloc in per-query mem context tree */  
        double          vmem_reserved;  /* vmem reserved by a QE */  
        double          memory_accounting_global_peak;  /* peak memory observed during  
                                                                                                 * memory accounting */  
} CdbExplain_SliceWorker;  
/* Header of EXPLAIN ANALYZE statistics message sent from qExec to qDisp */  
typedef struct CdbExplain_StatHdr  
{  
        NodeTag         type;                   /* T_CdbExplain_StatHdr */  
        int                     segindex;               /* segment id */  
        int                     nInst;                  /* num of StatInst entries following StatHdr */  
        int                     bnotes;                 /* offset to extra text area */  
        int                     enotes;                 /* offset to end of extra text area */  
        int                     memAccountCount;        /* How many mem account we serialized */  
        int                     memAccountStartOffset;  /* Where in the header our memory  
                                                                                 * account array is serialized */  
        CdbExplain_SliceWorker worker;          /* qExec's overall stats for slice */  
        /*  
         * During serialization, we use this as a temporary StatInst and save  
         * "one-at-a-time" StatInst into this variable. We then write this  
         * variable into buffer (serialize it) and then "recycle" the same inst  
         * for next plan node's StatInst. During deserialization, an Array  
         * [0..nInst-1] of StatInst entries is appended starting here.  
         */  
        CdbExplain_StatInst inst[1];  
        /* extra text is appended after that */  
} CdbExplain_StatHdr;  
/* One node's EXPLAIN ANALYZE statistics for all the workers of its segworker group */  
typedef struct CdbExplain_NodeSummary  
{  
        /* Summary over all the node's workers */  
        CdbExplain_Agg ntuples;  
        CdbExplain_Agg execmemused;  
        CdbExplain_Agg workmemused;  
        CdbExplain_Agg workmemwanted;  
        CdbExplain_Agg totalWorkfileCreated;  
        CdbExplain_Agg peakMemBalance;  
        /* Used for DynamicTableScan, DynamicIndexScan and DynamicBitmapTableScan */  
        CdbExplain_Agg totalPartTableScanned;  
        /* insts array info */  
        int                     segindex0;              /* segment id of insts[0] */  
        int                     ninst;                  /* num of StatInst entries in inst array */  
        /* Array [0..ninst-1] of StatInst entries is appended starting here */  
        CdbExplain_StatInst insts[1];           /* variable size - must be last */  
} CdbExplain_NodeSummary;  
/* One slice's statistics for all the workers of its segworker group */  
typedef struct CdbExplain_SliceSummary  
{  
        Slice      *slice;  
        /* worker array */  
        int                     nworker;                /* num of SliceWorker slots in worker array */  
        int                     segindex0;              /* segment id of workers[0] */  
        CdbExplain_SliceWorker *workers;        /* -> array [0..nworker-1] of  
                                                                                 * SliceWorker */  
        /*  
         * We use void ** as we don't have access to MemoryAccount struct, which  
         * is private to memory accounting framework  
         */  
        void      **memoryAccounts; /* Array of pointers to serialized memory  
                                                                 * accounts array, one array per worker  
                                                                 * [0...nworker-1]. */  
        MemoryAccountIdType *memoryAccountCount;        /* Array of memory account  
                                                                                                 * counts, one per slice */  
        CdbExplain_Agg peakmemused; /* Summary of SliceWorker stats over all of  
                                                                 * the slice's workers */  
        CdbExplain_Agg vmem_reserved;           /* vmem reserved by QEs */  
        CdbExplain_Agg memory_accounting_global_peak;           /* Peak memory  
                                                                                                                 * accounting balance by  
                                                                                                                 * QEs */  
        /* Rollup of per-node stats over all of the slice's workers and nodes */  
        double          workmemused_max;  
        double          workmemwanted_max;  
        /* How many workers were dispatched and returned results? (0 if local) */  
        CdbExplain_DispatchSummary dispatchSummary;  
} CdbExplain_SliceSummary;  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")