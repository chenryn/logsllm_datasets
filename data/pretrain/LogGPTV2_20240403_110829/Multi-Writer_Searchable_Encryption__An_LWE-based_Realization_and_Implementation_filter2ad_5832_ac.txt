complexity of key generation for each user is reduced.
5.1.2 Key Derivation. In this function, the PKG computes private
keys for registered users. Once the user submits her registration
with her tag τ ∈ T , PKG takes its master secret key and the user’s
tag as input, and returns the corresponding private key skτ to the
user. As shown in Algorithm 2, for a user with tag τ, the PKG first
encodes τ by a map F from an l-bit string to a matrix in Zn×m′
and constructs a corresponding tag-matrix Aτ = (A0|F(τ)), where
l ). Then it invokes the ExtBasis algorithm in
F(τ) = (Tτ1
Lemma 4.3 to compute the basis sk′
τ of tag-matrix Aτ . Finally, it
invokes a randomization algorithm RandBasis in Lemma 4.4 to
randomize this basis and returns skτ to the user as her private
key. Note that, one can also use a full-rank difference function [2]
instead of F, but doing so will reduce the strength of security, i.e.,
from adaptive security to non-adaptive security.
5.1.3 Encryption. In this part, we show how to construct search-
able ciphertext for the keyword w extracted from a certain doc-
ument. The detailed steps are given in Algorithm 3. For a given
1 | . . . |Tτl
q
;
1 | . . . |Tτl
l );
i =1 wi Mi;
q
2: G(w) ← B +k
7: Rw ←k
Algorithm 3 Encrypt Algorithm
Input: System parameters sp, tag τ ∈ T and keyword w ∈ W;
Output: Keyword Ciphertext C
1: Aτ ← (A0|Tτ1
3: Aτ ,w ← (Aτ |G(w)) ∈ Zn×2(m+m′)
4: for i = 1 : k do
$←− {−1, 1}(m+m′)×(m+m′);
5:
6: end for
i =1 wi Ri;
m+m′
Ψ
wy ∈ Zm+m′
0 r + x, C1 ← A⊤
8: x
9: z ← R⊤
10: C0 ← u⊤
11: return C ← (C0, C1) ∈ Zq × Z
, r ← Zn
q;
τ ,wr + (y, z);
2(m+m′)
q
α←−−−−−− Zm+m′
q
Ψα←−−− Zq, y
Ri
q
;
.
q
q
1 | . . . |Tτl
τ ,wr + (y, z) ∈ Z
G(w) =k
l ) and G(w) = B +k
she computes a matrix Rw =l
m+m′. Finally, the data writer computes z = R⊤
2(m+m′)
q
keyword w and the data reader with identity tag τ, the data writer
first computes the tag-matrix Aτ = (A0|F(τ) and keyword-matrix
G(w), where Fτ = (Tτ1
i =1 wi Mi. Then
i =k wi Ri, where Ri for i = 1, . . . , k
are k matrices selected randomly from {−1, 1}(m+m′)×(m+m′). Noise
value x ∈ Zq, y ∈ Zm+m′
are picked randomly from Ψα and
wy ∈ Zm+m′
Ψα
and uploads the ciphertext tuple C = (C1, C2) to the server, where
0 r + x ∈ Zq and C2 = A⊤
C1 = u⊤
Search. In this function, a user searches for the documents
5.1.4
with a keyword that others users share to her. When a user (reader)
wants to search the documents with w, she first computes a to-
ken and sends it to the server, and the server then assists her in
retrieving the matched ciphertexts. The steps are shown as Al-
gorithm 4. First, the reader encodes w to a matrix G(w), where
i =1 wi Mi + B, then she takes her private key, tag-matrix
Aτ , a vector u0, and G(w) as inputs to invoke SampleLeft algorithm
in Section 4. The sample result stw satisfying (Aτ |G(w))· stw = u0
is sent to the server as the search token. Once the server receives
the search request with token stw , she calculates the error term
γ ← |C0 − st⊤
wC1| with all ciphertext C = (C0, C1) and returns the
Remark. Our scheme leverages the identity tag to simplify the key
management for the lattice-based searchable encryption scheme.
Compared to a basic LWE-based searchable encryption scheme [6],
our scheme has two advantages. First, the user storage overhead
is reduced. The reason is that the public key in the basic scheme
always consists of several matrices with size of O(n
2), while the
identity tag in our scheme is a fixed length string. Second, the
computation cost of deriving a private key is much smaller than
the cost of generating a public/private key pair for each user, which
will be illustrated later in Section 8.
ciphertexts that satisfy γ ≤(cid:4) q
4(cid:5).
Note that, our design currently does not support the multi-reader
setting, where a writer can encrypt a document once and it can
later be searched by different readers. To enable the above setting,
one possible approach is to leverage the proxy re-encryption (PRE)
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand126Algorithm 4 Search Algorithm
User:
1: G(w) ←k
5: if γ ≤(cid:4) q
4(cid:5) then
i =1 wi Mi + B
2: stw ← SampleLeft(Aτ , G(w), skτ , u0, σ) ∈ Z
3: Send stw to the server.
Server:
4: γ ← |C0 − st⊤
wC1|
2(m+m′)
q
return 1 // the keyword ciphertext matches the token
6:
7: else if
then
8:
9:
10: end if
return 0
technique to re-encrypt the ciphertext [30] for other readers. Lattice
based PRE constructions like [18] could be adapted. We leave this
as our future work.
5.2 Parameters Analysis
In this section, we prove that our scheme can work correctly un-
der the given parameters setting, i.e. the error term calculated by
matched token and keyword ciphertext is smaller than(cid:4) q
km · ω((cid:112)log n), α = [k
4(cid:5) with
2.5 · ω((cid:112)log n), σ =
Theorem 5.1. Let m = ⌈6n log q⌉ , q ≥ m
2 · ω(log n)]−1, m′ ≤ m, then our scheme
overwhelming probability in the search process.
2
m
could work correctly with overwhelming probability.
q
q
2(m+m′)
q
the inequality γ =(cid:12)(cid:12)C0 − st⊤
wC1(cid:12)(cid:12) =(cid:12)(cid:12)u
because z = R⊤
wy ∈ Zm+m′
q × Z
Proof. Let C = (C0, C1) ∈ Zm
be the ciphertext of
2(m+m′)
keyword w and stw = SampleLeft(Aτ , G(w), skτ , u0, σ) ∈ Z
q
be the corresponding search token, where C0 = u⊤
0 r + x and
C1 = A⊤
τ ,wr +(y, z). According to the step in line 5 of the Search al-
gorithm, the proof for the correctness of our scheme is to show that
4(cid:5) holds with overwhelming
wC1(cid:12)(cid:12)  2√
n/α hold, which
ensures the LWE assumption is as hard as the worst-case SIVP
and GapSVP under a quantum reduction. Under this setting, we
continue to discuss the computation and space cost for our scheme.
5.3 Space and Computation Complexity
In this section, we analyze the efficiency of our proposed scheme in
terms of space and computation cost in each algorithm. Let |Zq| be
the size integer element Zq and ρ be the computation complexity
of sampling an integer from Zp with the gaussian distribution. Let
n be the security parameter and m be the dimension of lattice basis.
Set m = m + m′, then the comparison of our scheme with Behnia
et al.’s LWE-based scheme [6] is listed in Table 2 and Table 3.
In the aspect of space complexity, our private key size of each
user is |Zm×m