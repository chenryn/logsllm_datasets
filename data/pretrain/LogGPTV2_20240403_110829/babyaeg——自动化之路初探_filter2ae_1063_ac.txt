                result = eval(tmp_ins.op_str.split(', ')[1])
        # print result
        if len(tablelist) == 29:
            table1 = tablelist[0:10]
            table2 = tablelist[10:20]
            table3 = tablelist[20:29]
            res = table1.index(table2.index(table3.index(result)))
        if len(tablelist) == 192:
            table1 = tablelist[0:64]
            table2 = tablelist[64:128]
            table3 = tablelist[128:192]
            res = table1.index(table2.index(table3.index(result)))
        if len(tablelist) == 10:
            table1 = tablelist[0:5]
            table2 = tablelist[5:10]
            res = table1.index(table2.index(result))
        res = res + 48
        res = chr(res)
        nextfunc = parsefunc(logic2physic(nextfuncvaddr))
        return res, nextfunc
虽然很dirty，但是it works。
当然我也试过其他的方式来处理这个函数。其中完成度较高的方式就是仿照第一类函数的做法，将函数单独运行，并且通过patch爆破得到结果。这个函数看似只需要爆破一个字节，256次肯定能得到结果，但是由于是查表操作，因此不正确的结果分分钟让函数越界，segment
fault。那么我们又需要处理pwntools对于process出错时的io，得不偿失（我菜）。
更何况，变换不同的方式解决问题，也是我们学习的目的之一（我菜）。
####  最后一个函数
当我们顺利地通过了第一类和第二类函数的check之后，我们需要面对的最后一个函数，就是一个很明显的栈溢出函数了：
    void *sub_260830C()
    {
      const char *v0; // rax
      void *result; // rax
      char dest; // [rsp+0h] [rbp-80h]
      __int64 v3; // [rsp+38h] [rbp-48h]
      const char *v4; // [rsp+40h] [rbp-40h]
      _BYTE *v5; // [rsp+48h] [rbp-38h]
      __int64 v6; // [rsp+50h] [rbp-30h]
      __int64 i; // [rsp+58h] [rbp-28h]
      const char *v8; // [rsp+60h] [rbp-20h]
      const char *v9; // [rsp+68h] [rbp-18h]
      _BYTE *v10; // [rsp+70h] [rbp-10h]
      void *src; // [rsp+78h] [rbp-8h]
      v10 = &unk_280BFB3;
      v9 = "2ti4a9ZX";
      v8 = "2ti4a9ZX";
      for ( i = 0LL; ; ++i )
      {
        v0 = v8++;
        if ( !*v0 )
          break;
      }
      v6 = i;
      while ( *v10 )
      {
        v5 = v10;
        v4 = v9;
        v3 = v6;
        while ( --v3 && *v5 && *v4 && *v5 == *v4 )
        {
          ++v5;
          ++v4;
        }
        if ( *v5 == *v4 )
        {
          result = v10;
          goto LABEL_16;
        }
        ++v10;
      }
      result = 0LL;
    LABEL_16:
      src = result;
      if ( result )
        result = memcpy(&dest, src, (size_t)&byte_280BF80[dword_280BC5C - (_QWORD)src]);
      return result;
    }
最后一个函数的语义需要稍作逆向，大致等于一个字符串匹配（在我们的情况下可以认为是一个strcmp）。我们只需要在接下来的Payload中加入v9所指向的那个字符串，就可以通过check。接下来就是一个直击灵魂的memcpy，达到栈溢出，注意这题没有canary，我们就能够劫持控制流了。
rop的编写不难，大致思路就是使用mprotect函数（对，这个题目很贴心的准备了mprotect函数，可以说非常友好了）改变一段内存的权限，让它变成rwx，然后布置参数调用read函数读取输入，我们就可以写入shellcode，最终跳转过去。
这一个过程轻描淡写，但是需要的知识点非常多，我们放在下一个部分再讲。
## 程序分析技巧
上一部分已经将整个题目的做法说完了，但是在具体实现的过程中，会遇到很多问题，尤其需要读者对ELF文件有比较深刻的理解。
####  capstone
我做题时用到的一个框架使capstone，capstone是一个反汇编框架，支持多种架构，关于它的文档可以在这里找到：
具体的使用方法在这里就不浪费时间详细介绍，读者自行了解。
####  解析函数
capstone将byte读入之后，将它翻译成相应的汇编语句。我在这里的处理是从一个函数的入口开始解析，一直解析到leave,ret语句，并且将这些翻译出的汇编语句——在capstone中定义为operation对象，存入一个list，这个list就是我之后用到的分析单元，func。
需要提醒一下读者，这种解析方式非常偷懒，因为函数的表现形式非常多样，这样的解析方式轻易就会被绕过，只是在这倒题目中，这种方法可以工作得很好。
那么函数的开头怎么得到呢？我们需要知道在ELF文件的Program
Header中有一个表项叫start，由libc编译出的文件这一项就是一个指向__libc_start_main函数的指针。我们通过这个函数可以顺藤摸瓜找到main函数的开始地址，然后一个一个地找到我们感兴趣的函数。
    class function:
        def __init__(self, oplist):
            self.oplist = oplist
        def __str__(self):
            res = ''
            for i in self.oplist:
                res += '%x:t%st%sn' %(i.address, i.mnemonic, i.op_str)
            return res
    def parsefunc(physicaddr):
        finish_symbol = ['ret', 'hlt']
        md = Cs(CS_ARCH_X86, CS_MODE_64)
        cursor = physicaddr
        oplist = []
        while(True):
    #       set_trace()
            f.seek(cursor)
            data = f.read(0x100)
            for i in md.disasm(data, physic2logic(cursor)):
                oplist.append(i)
                if i.mnemonic in finish_symbol:
                    return function(oplist)
                if len(oplist) == 0x10000:
                    raise Exception('parsefunc: too large function')
            tmp = oplist.pop()
            cursor = logic2physic(tmp.address)
####  文件偏移与虚拟地址
在文件中，代码是以文件开头加上一个偏移量地形式存储在文件中，但是在ELF文件被操作系统装载时，各个段（segment）会被操作系统装载到不同的地址，这些地址有可能是固定的（即没有开PIE），也有可能受到随机化的影响，这些地址才是程序运行时真正使用的地址。这是Linux可重定位文件的一个重要特征，这一点如果不掌握，我们很难对文件中的代码进行操作。
更多的细节，读者应该自行了解ELF文件的结构，在这里，我提供我写的文件偏移（在代码中我称为physic address）与虚拟地址（在代码中我成为logic
address）相互转换的代码，仅供参考。这份代码依赖于elftools包，这个包提供对elf文件的各种结构的解析。如果有对命令行工具readelf熟悉的读者，也可以使用os.system系列命令对它进行解析。
    def logic2physic(addr):
        for s in elffile.iter_segments():
            baseaddr = s.header['p_vaddr']
            size = s.header['p_memsz']
            if addr >= baseaddr and addr = baseaddr and addr 解析strtab->解析reltab->解析plt,got
提供一份代码供读者参考：
    from elftools.elf.elffile import *
    from capstone import *
    from pwn import u32
    def parse_dynsym(elffile):
        dynsym = elffile.get_section_by_name('.dynsym').data()
        dynstr = elffile.get_section_by_name('.dynstr').data()
        strlist = []
        for idx in range(len(dynsym) / 0x18):
            if idx == 0:
                continue
            else:
                sym = dynsym[idx * 0x18: idx * 0x18 + 0x18]
                offset = sym[:4]
                offset = u32(offset)
                tmpstr = dynstr[offset:].split('x00')[0]
                strlist.append(tmpstr)
        return strlist
    def parse_plt(elffile):
        strlist = parse_dynsym(elffile)
        pltdata = elffile.get_section_by_name('.plt').data()
        pltaddress = elffile.get_section_by_name('.plt').header['sh_addr']
        oplist = []
        pltlist = {}
        md = Cs(CS_ARCH_X86, CS_MODE_64)
        for ins in md.disasm(pltdata, pltaddress):
            oplist.append(ins)
        for ins in oplist:
            if ins.mnemonic == 'push':
                addr = ins.address - 6
                try:
                    stridx = int(ins.op_str, 16)
                except Exception:
                    continue
                pltlist[strlist[stridx]] = addr
        return pltlist
    if __name__ == '__main__':
        f = open('binaries/binary0')
        elffile = ELFFile(f)
        print parse_dynsym(elffile)
        pltlist = parse_plt(elffile)
        for k in pltlist.keys():
            print k, hex(pltlist[k])
## 总结
这道题的做题过程考察了许多对elf文件的理解，以及对细节的掌握。任何一个地方的一知半解，都可能让做题者折腾半天。我在做题时，变换了很多的方法去处理各种各样的问题，学习到的东西非常多，如果有条件，非常推荐读者去亲手写一写，一定获益匪浅。
当然，条条大路通罗马，有朋友用ida脚本、ghidra脚本实现了同样的功能，站在巨人的肩膀上做题，也是非常明智的选择。但是我本人更加喜欢这一份从头到尾手动分析的解法，因为我觉得这样做更加本质。
这道题在强网杯现场被eee四个小时左右就解出，足以见他们深厚的底蕴和扎实的基本功。学无止境，前路漫漫，这里引用乔布斯的一句箴言：
Stay hungry, stay foolish.
与读者共勉！
PS：本题的环境与代码可以在这里找到，稍后就会上传：