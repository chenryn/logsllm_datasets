ol 
ty
pe
Indicates whether objects of this type should be allocated from 
paged or nonpaged memory.
D
ef
au
lt 
q
u
Default paged and non-paged pool values to charge to process 
quotas.
ot
a 
ch
ar
ge
s
V
al
id 
ac
ce
ss 
m
as
k
The types of access a thread can request when opening a handle to 
an object of this type (read, write, terminate, suspend, and so on).
G
en
er
ic 
ac
ce
ss 
ri
g
ht
s 
m
ap
pi
n
g
A mapping between the four generic access rights (read, write, 
execute, and all) to the type-specific access rights.
R
et
Access rights that can never be removed by any third-party Object 
Manager callbacks (part of the callback list described earlier).
ai
n 
ac
ce
ss
Fl
ag
s
Indicate whether objects must never have names (such as process 
objects), whether their names are case-sensitive, whether they 
require a security descriptor, whether they should be cache aligned 
(requiring a padding subheader), whether they support object-
filtering callbacks, and whether a handle database (handle 
information subheader) and/or a type-list linkage (creator 
information subheader) should be maintained. The use default 
object flag also defines the behavior for the default object field 
shown later in this table. Finally, the use extended parameters flag 
enables usage of the extended parse procedure method, described 
later.
O
bj
ec
t 
ty
pe 
co
de
Used to describe the type of object this is (versus comparing with a 
well-known name value). File objects set this to 1, synchronization 
objects set this to 2, and thread objects set this to 4. This field is 
also used by ALPC to store handle attribute information associated 
with a message.
In
va
li
d 
at
tri
b
ut
es
Specifies object attribute flags (shown earlier in Table 8-20) that 
are invalid for this object type.
D
ef
au
lt 
o
bj
ec
t
Specifies the internal Object Manager event that should be used 
during waits for this object, if the object type creator requested one. 
Note that certain objects, such as File objects and ALPC port 
objects already contain embedded dispatcher objects; in this case, 
this field is a flag that indicates that the following wait object 
mask/offset/pointer fields should be used instead.
W
ai
t 
o
bj
ec
t 
fl
ag
s, 
p
oi
nt
er
, 
of
fs
et
Allows the Object Manager to generically locate the underlying 
kernel dispatcher object that should be used for synchronization 
when one of the generic wait services shown earlier 
(WaitForSingleObject, etc.) is called on the object.
M
et
h
o
ds
One or more routines that the Object Manager calls automatically 
at certain points in an object’s lifetime or in response to certain 
user-mode calls.
Synchronization, one of the attributes visible to Windows applications,
refers to a thread’s ability to synchronize its execution by waiting for an
object to change from one state to another. A thread can synchronize with
executive job, process, thread, file, event, semaphore, mutex, timer, and
many other different kinds of objects. Yet, other executive objects don’t
support synchronization. An object’s ability to support synchronization is
based on three possibilities:
■    The executive object is a wrapper for a dispatcher object and contains
a dispatcher header, a kernel structure that is covered in the section
“Low-IRQL synchronization” later in this chapter.
■    The creator of the object type requested a default object, and the
Object Manager provided one.
■    The executive object has an embedded dispatcher object, such as an
event somewhere inside the object body, and the object’s owner
supplied its offset (or pointer) to the Object Manager when registering
the object type (described in Table 8-14).
Object methods
The last attribute in Table 8-22, methods, comprises a set of internal routines
that are similar to C++ constructors and destructors—that is, routines that are
automatically called when an object is created or destroyed. The Object
Manager extends this idea by calling an object method in other situations as
well, such as when someone opens or closes a handle to an object or when
someone attempts to change the protection on an object. Some object types
specify methods whereas others don’t, depending on how the object type is to
be used.
When an executive component creates a new object type, it can register
one or more methods with the Object Manager. Thereafter, the Object
Manager calls the methods at well-defined points in the lifetime of objects of
that type, usually when an object is created, deleted, or modified in some
way. The methods that the Object Manager supports are listed in Table 8-23.
Table 8-23 Object methods
Meth
od
When Method Is Called
Open
When an object handle is created, opened, duplicated, or 
inherited
Close
When an object handle is closed
Delet
e
Before the Object Manager deletes an object
Query 
name
When a thread requests the name of an object
Parse
When the Object Manager is searching for an object name
Dump
Not used
Okay 
to 
close
When the Object Manager is instructed to close a handle
Secur
ity
When a process reads or changes the protection of an object, 
such as a file, that exists in a secondary object namespace
One of the reasons for these object methods is to address the fact that, as
you’ve seen, certain object operations are generic (close, duplicate, security,
and so on). Fully generalizing these generic routines would have required the
designers of the Object Manager to anticipate all object types. Not only
would this add extreme complexity to the kernel, but the routines to create an
object type are actually exported by the kernel! Because this enables external
kernel components to create their own object types, the kernel would be
unable to anticipate potential custom behaviors. Although this functionality is
not documented for driver developers, it is internally used by Pcw.sys,
Dxgkrnl.sys, Win32k.sys, FltMgr.sys, and others, to define WindowStation,
Desktop, PcwObject, Dxgk*, FilterCommunication/ConnectionPort,
NdisCmState, and other objects. Through object-method extensibility, these
drivers can define routines for handling operations such as delete and query.
Another reason for these methods is simply to allow a sort of virtual
constructor and destructor mechanism in terms of managing an object’s
lifetime. This allows an underlying component to perform additional actions
during handle creation and closure, as well as during object destruction. They
even allow prohibiting handle closure and creation, when such actions are
undesired—for example, the protected process mechanism described in Part
1, Chapter 3, leverages a custom handle creation method to prevent less
protected processes from opening handles to more protected ones. These
methods also provide visibility into internal Object Manager APIs such as
duplication and inheritance, which are delivered through generic services.
Finally, because these methods also override the parse and query name
functionality, they can be used to implement a secondary namespace outside
of the purview of the Object Manager. In fact, this is how File and Key
objects work—their namespace is internally managed by the file system
driver and the configuration manager, and the Object Manager only ever sees
the \REGISTRY and \Device\HarddiskVolumeN object. A little later, we’ll
provide details and examples for each of these methods.
The Object Manager only calls routines if their pointer is not set to NULL
in the type initializer—with one exception: the security routine, which
defaults to SeDefaultObjectMethod. This routine does not need to know the
internal structure of the object because it deals only with the security
descriptor for the object, and you’ve seen that the pointer to the security
descriptor is stored in the generic object header, not inside the object body.
However, if an object does require its own additional security checks, it can
define a custom security routine, which again comes into play with File and
Key objects that store security information in a way that’s managed by the
file system or configuration manager directly.
The Object Manager calls the open method whenever it creates a handle to
an object, which it does when an object is created, opened, duplicated, or
inherited. For example, the WindowStation and Desktop objects provide an
open method. Indeed, the WindowStation object type requires an open
method so that Win32k.sys can share a piece of memory with the process that
serves as a desktop-related memory pool.
An example of the use of a close method occurs in the I/O system. The I/O
manager registers a close method for the file object type, and the Object
Manager calls the close method each time it closes a file object handle. This
close method checks whether the process that is closing the file handle owns
any outstanding locks on the file and, if so, removes them. Checking for file
locks isn’t something the Object Manager itself can or should do.
The Object Manager calls a delete method, if one is registered, before it
deletes a temporary object from memory. The memory manager, for
example, registers a delete method for the section object type that frees the
physical pages being used by the section. It also verifies that any internal data
structures the memory manager has allocated for a section are deleted before
the section object is deleted. Once again, the Object Manager can’t do this
work because it knows nothing about the internal workings of the memory
manager. Delete methods for other types of objects perform similar
functions.
The parse method (and similarly, the query name method) allows the
Object Manager to relinquish control of finding an object to a secondary
Object Manager if it finds an object that exists outside the Object Manager
namespace. When the Object Manager looks up an object name, it suspends
its search when it encounters an object in the path that has an associated
parse method. The Object Manager calls the parse method, passing to it the
remainder of the object name it is looking for. There are two namespaces in
Windows in addition to the Object Manager’s: the registry namespace, which
the configuration manager implements, and the file system namespace, which
the I/O manager implements with the aid of file system drivers. (See Chapter
10 for more information on the configuration manager and Chapter 6 in Part
1 for more details about the I/O manager and file system drivers.)
For example, when a process opens a handle to the object named
\Device\HarddiskVolume1\docs\resume.doc, the Object Manager traverses
its name tree until it reaches the device object named HarddiskVolume1. It
sees that a parse method is associated with this object, and it calls the
method, passing to it the rest of the object name it was searching for—in this
case, the string docs\resume.doc. The parse method for device objects is an
I/O routine because the I/O manager defines the device object type and
registers a parse method for it. The I/O manager’s parse routine takes the
name string and passes it to the appropriate file system, which finds the file
on the disk and opens it.
The security method, which the I/O system also uses, is similar to the
parse method. It is called whenever a thread tries to query or change the
security information protecting a file. This information is different for files
than for other objects because security information is stored in the file itself
rather than in memory. The I/O system therefore must be called to find the
security information and read or change it.
Finally, the okay-to-close method is used as an additional layer of
protection around the malicious—or incorrect—closing of handles being
used for system purposes. For example, each process has a handle to the
Desktop object or objects on which its thread or threads have windows
visible. Under the standard security model, it is possible for those threads to
close their handles to their desktops because the process has full control of its
own objects. In this scenario, the threads end up without a desktop associated
with them—a violation of the windowing model. Win32k.sys registers an
okay-to-close routine for the Desktop and WindowStation objects to prevent
this behavior.
Object handles and the process handle table
When a process creates or opens an object by name, it receives a handle that
represents its access to the object. Referring to an object by its handle is
faster than using its name because the Object Manager can skip the name
lookup and find the object directly. As briefly referenced earlier, processes
can also acquire handles to objects by inheriting handles at process creation
time (if the creator specifies the inherit handle flag on the CreateProcess call
and the handle was marked as inheritable, either at the time it was created or
afterward by using the Windows SetHandleInformation function) or by
receiving a duplicated handle from another process. (See the Windows
DuplicateHandle function.)
All user-mode processes must own a handle to an object before their
threads can use the object. Using handles to manipulate system resources
isn’t a new idea. C and C++ run-time libraries, for example, return handles to
opened files. Handles serve as indirect pointers to system resources; this
indirection keeps application programs from fiddling directly with system
data structures.
Object handles provide additional benefits. First, except for what they refer
to, there is no difference between a file handle, an event handle, and a
process handle. This similarity provides a consistent interface to reference
objects, regardless of their type. Second, the Object Manager has the
exclusive right to create handles and to locate an object that a handle refers
to. This means that the Object Manager can scrutinize every user-mode
action that affects an object to see whether the security profile of the caller
allows the operation requested on the object in question.
 Note
Executive components and device drivers can access objects directly
because they are running in kernel mode and therefore have access to the
object structures in system memory. However, they must declare their
usage of the object by incrementing the reference count so that the object
won’t be deallocated while it’s still being used. (See the section “Object
retention” later in this chapter for more details.) To successfully make use
of this object, however, device drivers need to know the internal structure
definition of the object, and this is not provided for most objects. Instead,
device drivers are encouraged to use the appropriate kernel APIs to
modify or read information from the object. For example, although device
drivers can get a pointer to the Process object (EPROCESS), the structure
is opaque, and the Ps* APIs must be used instead. For other objects, the
type itself is opaque (such as most executive objects that wrap a
dispatcher object—for example, events or mutexes). For these objects,
drivers must use the same system calls that user-mode applications end up
calling (such as ZwCreateEvent) and use handles instead of object
pointers.
EXPERIMENT: Viewing open handles
Run Process Explorer and make sure the lower pane is enabled and
configured to show open handles. (Click on View, Lower Pane
View, and then Handles.) Then open a command prompt and view
the handle table for the new Cmd.exe process. You should see an
open file handle to the current directory. For example, assuming the
current directory is C:\Users\Public, Process Explorer shows the
following:
Now pause Process Explorer by pressing the spacebar or
selecting View, Update Speed and choosing Pause. Then change
the current directory with the cd command and press F5 to refresh
the display. You will see in Process Explorer that the handle to the
previous current directory is closed, and a new handle is opened to
the new current directory. The previous handle is highlighted in
red, and the new handle is highlighted in green.
Process Explorer’s differences-highlighting feature makes it easy
to see changes in the handle table. For example, if a process is
leaking handles, viewing the handle table with Process Explorer
can quickly show what handle or handles are being opened but not
closed. (Typically, you see a long list of handles to the same
object.) This information can help the programmer find the handle
leak.
Resource Monitor also shows open handles to named handles for
the processes you select by checking the boxes next to their names.