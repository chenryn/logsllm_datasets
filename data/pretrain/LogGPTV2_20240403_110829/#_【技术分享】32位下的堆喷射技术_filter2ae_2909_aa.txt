# 【技术分享】32位环境下的堆喷射技术

#### 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义以原文为准。

作者：[seviezhou](http://bobao.360.cn/member/contribute?uid=2967223576)  
预估稿费：500 RMB  
投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 什么是堆喷射
堆喷射（Heap Spray）技术最初是为了在浏览器攻击中获取可预测的shellcode地址而发明的。该技术自2001年起被广泛应用于Exploit开发中。针对浏览器的堆喷射通常通过JavaScript执行，通过申请大量堆内存，并利用漏洞控制EIP（指令指针），使其跳转到堆中预设的地址处执行shellcode。除了浏览器外，支持JavaScript的应用程序如Adobe PDF Reader等也可以使用堆喷射技术将shellcode放置于可预测的地址上。此外，还存在利用图片进行堆喷射的技术。尽管ASLR（地址空间布局随机化）和DEP（数据执行保护）的出现使得堆喷射攻击变得更加困难，但精确的堆喷加上ROP（返回导向编程）仍可以在这种情况下成功实施Exploit。下文将分别介绍不同版本IE浏览器中堆喷射的具体差异。

## 使用Windbg调试浏览器
为了能够使用与堆相关的调试命令，在Windbg中需要配置符号表。只需在“Symbol file path”中输入以下路径：
```
SRV*c:\windbg\symbols*http://msdl.microsoft.com/download/symbols
```
然后关闭Windbg并保存工作区设置。

接下来是一些常用的调试命令：

- `!heap -stat` 显示被调试进程的所有堆使用情况。
  ```
  0:007> !heap -stat
  _HEAP 00140000
   Segments            00000002
       Reserved  bytes 00200000
       Committed bytes 0009d000
   VirtAllocBlocks     000001f5
       VirtAlloc bytes 80800050
  ...
  ```

- `!heap -a 00140000` 显示位于00140000处堆的详细信息。
  ```
  0:007> !heap -a 00140000
  Index   Address  Name      Debugging options enabled
    1:   00140000 
  Segment at 00140000 to 00240000 (0007e000 bytes committed)
  Flags:                00000002
  ForceFlags:           00000000
  Granularity:          8 bytes
  Segment Reserve:      00100000
  Segment Commit:       00002000
  DeCommit Block Thres: 00000200
  DeCommit Total Thres: 00002000
  Total Free Size:      00000c0f
  Max. Allocation Size: 7ffdefff
  Lock Variable at:     00140608
  Next TagIndex:        0000
  Maximum TagIndex:     0000
  Tag Entries:          00000000
  PsuedoTag Entries:    00000000
  Virtual Alloc List:   00140050
  UCR FreeList:        00140598
  FreeList Usage:      00040078 00000040 00000000 00000000
  ...
  ```

- `!heap -stat -h 00140000` 查看00140000堆的分配统计数据。
  ```
  0:007> !heap -stat -h 00140000
   heap @ 00140000
  group-by: TOTSIZE max-display: 20
  size     #blocks     total     ( %) (percent of total busy bytes)
  7ffe0 1f5 - fa7c160  (99.78)
  8000 1 - 8000  (0.01)
  7fe0 1 - 7fe0  (0.01)
  7fb0 1 - 7fb0  (0.01)
  619c 1 - 619c  (0.01)
  614 e - 5518  (0.01)
  52ac 1 - 52ac  (0.01)
  4fe4 1 - 4fe4  (0.01)
  ...
  ```

- `!heap -flt s 7ffe0` 查找大小为7ffe0的内存块，这有助于在堆喷射时找到payload所在的地址。
  ```
  0:007> !heap -flt s 7ffe0
  _HEAP @ 140000
  HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
  02240018 fffc 0000  [0b]   02240020    7ffe0 - (busy VirtualAlloc)
  01fe0018 fffc fffc  [0b]   01fe0020    7ffe0 - (busy VirtualAlloc)
  022c0018 fffc fffc  [0b]   022c0020    7ffe0 - (busy VirtualAlloc)
  02340018 fffc fffc  [0b]   02340020    7ffe0 - (busy VirtualAlloc)
  ...
  ```

- `!heap -p -a 0x0c0c0c0c` 查看0x0c0c0c0c处的数据属于哪个堆。
  ```
  0:007> !heap -p -a 0x0c0c0c0c
  address 0c0c0c0c found in
  _HEAP @ 140000
  HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
  0c0c0018 fffc 0000  [0b]   0c0c0020    7ffe0 - (busy VirtualAlloc)
  ```

- `s -a 0x00000000 L?7fffffff "AAAA"` 在内存空间中搜索字符串，其中 `-a` 表示搜索ASCII字符，`-u` 表示搜索Unicode字符。
  ```
  0:007> s -a 0x00000000 L?7fffffff "AAAA"
  0018ef03  41 41 41 41 41 41 41 64-64 64 64 64 64 18 89 89  AAAAAAAdddddd...
  0018ef04  41 41 41 41 41 41 64 64-64 64 64 64 18 89 89 89  AAAAAAdddddd....
  ...
  ```

## 堆喷射内存布局
在浏览器中分配的字符串会被转换成Unicode格式，因此为了准确传递字符，我们需要使用JavaScript中的`unescape`函数。此函数用于解码字符串，确保已经处于Unicode格式的字符串不会再次被转换。在每两个字节前添加`%u`，注意这两个字节需反序排列。分配后的字符串会变成BSTR字符串对象，包含四字节的头部信息以及两个NULL字节作为结尾。

典型的堆喷射内存布局包括大量的NOP指令（也称为滑板指令）加上shellcode，后者通常置于每个块的尾部。只要保证堆块足够大，那么预测的地址处就会是NOP指令，从而顺利执行到shellcode。

在堆喷射中最著名的地址之一是`0x0c0c0c0c`。如果在Exploit过程中覆盖了堆栈中的虚表，则使用这个地址非常合适。当虚函数被调用时，首先从栈中获取对象指针，再通过该指针取得虚表指针，最后在虚表内适当偏移处取得函数指针并执行。例如，若将对象指针`obj_ptr`覆盖为`0x0c0c0c0c`，并将`0x0c0c0c0c`地址内的内容填充为`0xc0c0c0c0`，则最终仍然会调用`0x0c0c0c0c`地址处的指令。同时注意到：
  ```
  004010A0  0C 0C   OR AL,0C
  004010A2  0C 0C   OR AL,0C
  ```
由此可见，`0c0c`指令的作用类似于NOP指令，同样可以作为滑板指令使用。

要计算出覆盖`0x0c0c0c0c`所需多大的内存块：
  ```
  0x0c0c0c0c = 202116108 bytes
  202116108 bytes = 192.7529411 MB
  ```
因此，堆喷射至少需要超过200MB才能确保覆盖到目标地址。然而，由于实际分配的起始地址并非从零开始，所以实际需求可能会更小。还需注意的是，`unescape`返回的对象在使用`.length`属性计算长度时，仅返回实际长度的一半。例如：
  ```javascript
  > s = unescape("%u4142%u4344%u4546");
  > s.length; // 返回3
  ```

一份典型的堆喷射脚本可能如下所示：
  ```javascript
  tag = unescape('%u4141%u4141');
  chunk = '';
  chunksize = 0x1000;
  nr_of_chunks = 200;
  for (counter = 0; counter < chunksize; counter++) {
      chunk += unescape('%u9090%u9090');
  }
  chunk = chunk.substring(0, chunksize - tag.length);
  testarray = new Array();
  for (counter = 0; counter < nr_of_chunks; counter++) {
      testarray[counter] = tag + chunk;
  }
  ```