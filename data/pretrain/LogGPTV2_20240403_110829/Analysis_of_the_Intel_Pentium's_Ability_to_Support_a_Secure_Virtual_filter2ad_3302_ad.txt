The VAX security effort lead to several conclusions:
(1) Every ring of a processor can be emulated, but this is
often not necessary. (2) Emulating a start I/O instruction
is simpler and cheaper than emulating memory-mapped
I/O. (3) Deﬁning the VM as a particular processor or
family of processors makes the VM more portable than
if it were a reﬂection of the actual hardware. For exam-
ple, if a VM is deﬁned to be a Pentium processor, the
VM will work on a Pentium II or Pentium III processor.
(4) VM performance suffers when sensitive instructions
are forced to trap to emulation software. (5) There are
alternatives to modifying the microcode support for ev-
ery privileged instruction to meet the needs of the VMM.
(6) If a VMM is a security kernel, dependencies between
the VMM and VMs must be scrutinized.
The Alpha architecture is designed to support virtual-
ization [2]. It is designed to contain no errors that would
allow protection mechanisms to be bypassed. Even
“UNPREDICTABLE” results or occurrences are con-
strained so that security and virtualization are supported.
The processor may hold or loose information as a re-
sult of “UNDEFINED” operations; however, these oper-
ations can only be triggered by privileged software. Priv-
ileged Architecture Library code (PALcode) provides
a non-microcoded interface for privileged instructions.
All privileged instructions must be implemented in PAL-
code and may be processor-model speciﬁc. The Alpha
architecture supports PALcode replacement, thus allow-
ing per-OS code to yield high performance. A VMM on
the Alpha would have PALcode for all supported oper-
ating systems.
Unlike the Alpha which explicitly forbids state data
from registers to be spread, most processors permit leak-
age of information from unpredictable results. The mul-
tiple address spaces of the Intel x86 architecture family
allows such leakage [35].
The observations in this section should be considered
in any attempt to design a secure Type I VMM for the
Intel Pentium architecture.
4.2 Pentium Security Support
Intel 80x86 processors provide support for well under-
stood requirements of secure systems [32]. These in-
clude call gates, segmentation, several hardware privi-
lege levels and privileged instructions [15]. The com-
bination of segmentation and rings are particularly
supportive of secure system design and implementa-
tion [34]. The processor family was the choice for
past and present trusted systems:
the Boeing MLS
Lan (A1)3 [23], Gemini Trusted Network Processor
3TCSEC evaluation classes are given in parentheses.
(A1)[27], Verdix VSLAN (B2) [26], TIS Trusted Xenix
(B2)[25], and the XTS-300 (B3) [24].
4.3 Pentium Virtualization Techniques
Since the Intel Pentium architecture is not truly virtu-
alizable, current VMMs for the hardware base [36] must
use a bit of “trickery” to realize a VMM. Each method
must detect sensitive but unprivileged instructions be-
fore they are executed by a VM.
Windows 3.1/95/NT binary ﬁles4 to run on Intel x86-
based Unix machines, such as Linux, FreeBSD, and So-
laris. It allows application binaries ﬁles to run natively
and achieves better performance than the pure emulation
technique described above. However, OS/API emulation
only works on members of the x86 OS family for which
the APIs have been emulated. Furthermore, OS/API em-
ulation is very complex. A VMM is less complicated
and requires fewer updates with each new release of the
OS.
4.3.1 Pure Emulation
4.3.3 Virtualization
Pure emulation allows one system architecture to be
mapped into another system architecture. By modeling
a large part of the x86 instruction set in software, em-
ulation allows x86 operating systems and applications
to run on non-x86 platforms [19]. The disadvantage of
emulation is signiﬁcant performance degradation; no in-
structions are ever executed directly on the hardware.
The performance degradation in Java compilers bears
witness to this observation. Advances in compiler tech-
nology can help, but without specialized machine sup-
port, performance will never achieve that of a Type I
VMM on a comparable hardware base. Advanced tech-
niques, such as dynamic translation, can improve perfor-
mance. Dynamic translation allows sequences of small,
x86 architecture code to be translated into native-CPU
code “on-the-ﬂy.” Since the native code is cached or
even optimized, it can run signiﬁcantly faster. This is
the approach used by Transmeta [18], which provides
pure emulation and is a complete software interpreter
machine (CSIM) [12]. The use of register shadowing
and soft memory may permit support of VMM tech-
nology. It is worth pointing out that in such systems,
the morphed code must be protected from tampering or
leakage of secrets. It is not clear whether such security
concerns are addressed in the current generation of bi-
nary translation systems.
4.3.2 OS/API Emulation
Applications normally communicate with an operating
system with a set of APIs. OS/API emulation [20] in-
volves intercepting and emulating the behavior of the
APIs using mechanisms in the underlying operating sys-
tem. The out-of-kernel OS emulation used for certain
Mach architectures [29] might be considered a variant
of this approach. This allows applications designed for
other x86 operating systems to be run. This strategy is
used in Wine which provides “an implementation of the
Windows 3.x and Win32 API on top of X and Unix”
[37]. Wine has a program loader that allows unmodiﬁed
A third technique is virtualization. Most hardware is
only designed to be driven by one device driver. The In-
tel Pentium CPU is not an exception to this rule. It is
designed to be conﬁgured and used by only one oper-
ating system. Features and instructions of the processor
designed for applications are generally not a problem for
virtualization and can be executed directly by the proces-
sor. A majority of a processor’s load comes from these
types of instructions. However, as discussed above, cer-
tain sensitive instructions are not privileged in the In-
tel architecture, making it difﬁcult for a VMM to detect
when they are executed. A strategy for virtualizing the
Intel architecture would be as follows:
(cid:15) Non-sensitive, unprivileged application instruc-
tions can be executed directly on the processor with
no VMM intervention.
(cid:15) Sensitive, privileged instructions will be detected
when they trap after being executed in user mode.
The trap should be delivered to the VMM that will
emulate the expected behavior of the instruction in
software.
(cid:15) Sensitive, unprivileged instructions must be de-
tected so that control can be transferred to the
VMM.
The hardest part of the virtualization strategy is han-
dling the seventeen problem instructions described in
Section 3. Lawton describes how this is accomplished
for FreeMWare[20].5 It analyzes instructions until one
of the following conditions is encountered:
1. A problem instruction.
2. A branch instruction.
4MS-DOS, Windows 3.1, Windowds 95, Windows 98, and Win-
dows NT 4.0 are all trademarks of the Microsoft Corporation. All
other tradmarks, including Red Hat Linux, Caldera OpenLinux, SuSE
Linux, FreeBSD, and Solaris are trademarks of their respective own-
ers.
5As of March 23, 2000, FreeMWare is called Plex86.
3. The address of an instruction sequence that has al-
ready been parsed.
If 1 or 2 is encountered, a breakpoint must be set at
the beginning of the problem or branch instruction. If 3
is encountered, execution continues normally since this
code has been analyzed already and necessary break-
points have been installed. The complexity of this ap-
proach may render a highly secure VMM unachievable.
Code is allowed to run natively on the processor until
it reaches a breakpoint. If the breakpoint occurred be-
cause of a problem instruction, its behavior is emulated
by the VMM. If the breakpoint occurred because of a
branch instruction, it is necessary to single step through
its execution and begin analyzing instructions again at
the branch target address.
If the target address is not
computed and has already been analyzed and marked
as safe, then the branch instruction can also be marked
as safe and it can run natively on the processor on sub-
sequent accesses. Computed branch addresses require
special attention. These instructions must be dynami-
cally monitored to ensure that execution does not branch
to unanalyzed code. A table might be used to keep track
of the breakpoints.
Some instructions may write into memory, possibly
into the address of instructions that have already been
analyzed and marked as safe. The paging system is used
to prevent this by write protecting any page of memory
in the page tables that has already been analyzed and
marked as safe. All page entries that point to the phys-
ical page with analyzed code would have to be write
protected since multiple linear addresses can be mapped
to the same physical page. When a write-protect page
fault occurs, the VMM can unprotect the page and step
through the instructions. A breakpoint can be installed
before any problematic instructions. Finally, the page
should be write-protected again. Instructions that cross
page boundaries involve tow write-protected pages. Ta-
bles are used to track previously analyzed instructions.
Also pass-through I/O devices, timing issues, and vir-
tualizing descriptor loading must be addressed.
Pass-Through I/O Devices: It may be useful to al-
low a device driver in the guest OS to drive hardware for
a device that is not supported by the host OS. For ex-
ample, a Linux host OS will not support a Winmodem.
Pass-through devices allow a guest OS to communicate
with devices using a pass-through mechanism that han-
dles I/O reads and writes. Because control of the real
hardware is turned over to the VMOS, pass-through I/O
devices render security problematic.
Timing: A VMM must accurately emulate system
timers. Every time slice of native code execution is
bounded by an exception generated by the system timer
when the execution time slice is over. The exception
vectors to a routine deﬁned in the VMM’s IDT for a
guest OS. A mechanism is needed that measures the time
between these exceptions to emulate an accurate timer.
On Intel Pentium processors, performance monitoring
could be used. The RDTSC, Read Time Stamp Counter,
instruction gives an accurate time stamp reading. The in-
struction is also executable in CPL 3, allowing efﬁcient
use in user-level VMM code.
Virtualization of Descriptor Loading: For two rea-
sons a Pentium-based VMM must have its own set of
LDT, GDT, and IDT tables. First, it allows the segment
register mechanisms to work naturally. Second, it allows
the VMM to have its own set of exception handlers.
Since all privilege levels (0-3) in a VM are mapped into
CPL 3, the CPL is not sufﬁcient when trying to load code
that is more privileged (i.e. numerically less) than CPL
3. CPL 3 code can load descriptors as expected as long
as the GDTR and LDTR registers point to the guest OS’s
descriptor tables. When running system code in CPL 3,
exceptions are generated when loading a descriptor with
that has CPL < 3. This does not occur when system
code is executed at CPL 0. To solve this problem, one
must trap and emulate instructions that load the segment
registers when running at CPL < 3. All instructions that
examine segment registers with PL < 3 must be virtual-
ized because they may look at the RPL ﬁeld.
A private GDT and LDT for the virtualization of code
at CPL < 3 can also help solve this problem. Since,
the instructions that reference the GDTR and LDTR are
emulated, they can be loaded with values that point to
the private GDT and LDT. The private descriptor tables
would start out empty and generate exceptions when a
segment register loads. When this happens, a private de-
scriptor is generated that allows the next segment reg-
ister load to execute natively. Every time the GDTR
and LDTR are reloaded, the private descriptor tables are
cleared.
4.3.4 Other Virtualization Considerations
Disco is an implementation of a Type I VMM for the
Flash multi-processor [8]. It runs several different com-
mercial operating systems on virtual machines to pro-
vide high-performance system software. Some of the
key insights of the Disco implementation applicable to
virtualizing the Intel Pentium architecture are described
below.
Virtual CPUs: Multiple VMMs are multiplexed onto
a common physical processor by using virtual proces-
sors. A data structure is kept for each virtual CPU that
contains register contents, TLB contents, and other state
information of the virtual CPU when it is not running
on the real CPU. The VMM is responsible for managing
the virtual CPUs and ensures that the effects of traps are
handled properly by the executing virtual processor.
Virtual Physical Memory: To virtualize physical
memory, an extra level of address translation that
maintains VM physical-to-machine address mappings is
used. Virtual machines are given physical addresses that
start at address zero and continue to the size of the VM’s
memory. These physical addresses could be mapped
to machine addresses used by the Intel processor us-
ing the hardware-reloaded TLB of the Intel processor.
The VMM protects and manages the page table. When
the VMOS tries to insert a virtual-to-physical mapping
in the TLB, the VMM emulates this by translating the
physical address into the corresponding VM address and
inserting this into the TLB.
Virtual I/O Devices: The VMM must intercept de-
vice accesses from virtual machines and forward them
to physical devices. Instead of trying to use every de-
vice’s real device driver, one special device driver for
each type of device is used. Each device has a monitor
call that is used to pass all command arguments to the
VMM in a single trap. Many devices such as disks and
network interfaces require direct memory access (DMA)
to physical memory. Normally these device drivers use
parameters that include a DMA map. The VMM must
intercept these DMA requests and translate physical ad-
dresses into machine addresses.
We note that since the VMM must control devices, a
VMM for the Intel Pentium architecture must be provide
device drivers for each VMOS. Loadable drivers would
be particularly convenient.
Virtual Network Interface: So that VMs can commu-
nicate with each other, they use standard distributed pro-
tocols such as NFS. Disco manages a virtual subnet that
allows this communication. A copy-on-write strategy
for transferring data between VMs reduces the amount
of copying. Virtual devices use Ethernet addresses and
do not limit the maximum transfer unit of packets.
4.4 Unmodiﬁed Pentiums: VMM Security
Concerns
To be a high-assurance secure computing system, se-
curity policies are correctly enforced, even under hostile
attack. Examples of such systems are at least TCSEC
Class B2 or an equivalent level in the Common Crite-
ria [1]. The systems’ protection mechanisms must be
structured and well-deﬁned. When dealing with highly
sensitive information, labels are needed to order infor-
mation into equivalence classes. Also, for environments
where users are also categorized into equivalence classes
based on clearances or other ordering techniques, a very
effective protection mechanism is needed.
Current VMMs for the Intel architecture do not meet
these requirements although some vendors claim secu-
rity as a feature [31]. One claims that their product can
“isolate and protect each operating environment, and the
applications and data that are running in it” [36]. An-
other claim is that the system does “not make any as-
sumptions concerning the software that runs within the
virtual machine. Even a rogue application or operating
system is conﬁned...” Given such claims, it is worth-
while to ask how well current VMMs can enforce the
VM isolation needed to support a mandatory security
policy. Note that this analysis is based on assumptions
regarding how virtualization is being accomplished. The
following sections describe some potential problems if
such systems were to be used to separate mandatory se-
curity levels.
4.4.1 Resource Sharing
A problem results from resource sharing between vir-
tual machines. If two virtual machines have access to a