        new_entry = prev_sequence + next_sequence[0]; 
        add_dictionary_entry( new_entry ); 
        // Set the second sequence as the previous sequence, move on to the next code pair 
        prev_sequence = next_sequence;         
        decoded_input += prev_sequence; 
        // Add the first decoded sequence to the output 
    } 
    // Add the output from the input buffer to the final output 
    output += decoded_input; 
} 
unsigned int decode_tmp[2] = {0}; 
unsigned int* decode_once(unsigned char *aa) 
{   
    unsigned char a[4] = {aa[2],aa[1],aa[0],0}; 
    unsigned int * t = (unsigned int *)a; 
    unsigned int b = *t; 
    unsigned int t1 = (b >> 16) | ((b & 0xf0) > 8)&0xff) | ((b & 0x0f)  tmp; 
    vector> bufs; 
    for(int i=0;i<decode_size;i++) 
    {    
        if(decode1[i] == 0x101) 
        { 
            continue; 
        } 
        else if (decode1[i] == 0x100 ) 
        { 
            bufs.push_back(tmp); 
            tmp.clear(); 
            continue; 
        } 
        else if(decode1[i] == 0x102) 
        { 
            bufs.push_back(tmp); 
            tmp.clear(); 
            break; 
        } 
        tmp.push_back(decode1[i]); 
    } 
    ofstream file2("out.bmp", ios::out|ios::binary); 
    if (!file2.is_open()) 
    { 
        cout << "Unable to open out.bmp file"; 
        return 0; 
    } 
    cout << bufs.size() << "," << decode_size << "," << size << endl; 
    for(auto i = bufs.begin();i!= bufs.end();i++) 
    { 
        LZW_Decompressor d = LZW_Decompressor(); 
        d.decompress(*i); 
        string s = d.get_output(); 
        file2.write(s.c_str(),s.length()); 
    } 
    file2.close(); 
  return 0; 
} 
APK1 
des = DES.new('flag'.encode('hex').upper()) 
rde1 = des.decrypt('99EDA1D941316EEA'.decode('hex')) 
a = ARC4.new('flag') 
r = a.decrypt(rde1) 
print r.encode('hex').upper() 
Crypto 
blowfishgame 
#!/usr/bin/env python 
# -*- coding: utf-8 -*- 
from pwn import * 
import base64 
import re 
from hashlib import sha384 
from itertools import product 
import fuckpy3 
LOCAL = 0 
VERBOSE = 0 
if VERBOSE: 
context.log_level = 'debug' 
if LOCAL: 
io = process(['python2', 'blowfishgame.py']) 
else: 
io = remote('8.131.69.237', 15846) 
table = string.ascii_letters + string.digits 
# PoW 
io.recvuntil('sha384') 
rec = io.recvline().decode() 
suffix = re.findall(r'\(XXX\+(.*?)\)', rec)[0] 
digest = re.findall(r'== (.*?)\n', rec)[0] 
print(f"suffix: {suffix} \ndigest: {digest}") 
print('Calculating hash...') 
for i in product(table, repeat=3): 
prefix = ''.join(i) 
guess = prefix + suffix 
if sha384(guess.encode()).hexdigest() == digest: 
print(guess) 
break 
io.sendlineafter(b'Give me XXX:', prefix.encode()) 
io.recvuntil(',_|\n\n') 
p0 = b'Blowfish_w0rld' 
c0 = base64.b64decode(io.recvline().strip()) 
sendIV, c0 = c0[:8], c0[8:] 
target = b'get_flag' 
iv = [] 
for idx, val in enumerate(target): 
iv.append(sendIV[idx] ^ target[idx] ^ p0[idx]) 
iv = bytes(iv) 
crafted_message = base64.b64encode(iv+c0) 
flag = '' 
for boff in range(0, 48, 8): 
for off in range(7, -1, -1): 
io.sendline(crafted_message) 
io.sendline('\x00'*off) 
res = base64.b64decode(io.recvline()) 
target = res[boff:boff+8] 
for i in range(33, 128): 
io.sendline(crafted_message) 
io.sendline('\x00'*off+flag+chr(i)) 
res = base64.b64decode(io.recvline())[boff:boff+8] 
if res == target: 
flag += chr(i) 
print(flag) 
break 
easy matrix 
from sage.modules.free_module_integer import IntegerLattice 
from random import randint 
import sys 
from itertools import starmap 
from operator import mul 
# Babai's Nearest Plane algorithm 
# from: http://mslc.ctf.su/wp/plaidctf-2016-sexec-crypto-300/ 
def Babai_closest_vector(M, G, target): 
small = target 
for _ in range(1): 
for i in reversed(range(M.nrows())): 