event(alarm[shell_exec, ?, ?target], t2);
noevent(alarm[login, ?, ?target], (t1,t2));
?bufov_snort_alarm in {sid_203, sid_34}
t2 - t1 in [0,100]
when recognized {
emit event(alarm[successful_buffer_overflow, ?source, ?target],
t2);
}
Fig. 8. A Chronicle example: example of IDS cooperation
The upstream sensors that generate alarms must have their clocks synchro-
nized, and the gap between two clocks should be coherent with the time resolu-
tion used in the chronicle models. If these conditions hold, then chronicles are
able to manage delays due to sensors processing or transport durations. Whether
an event is delayed or not, its integration in a chronicle is done in the same way
because the chronicle temporal reasoning is solely performed over the events
timestamp, not on the running clock.
Description of the Chronicle. In the example provided in Figure 8, three
sensors are used: Snort, Snare and Syslog. The Snort sensor sends the alarm
?bufov_snort_alarm, shell_exec is triggered by a system-based monitoring
tool (Snare) and the login alarm is sent by Syslog. The chronicle monitors
successful attacks resulting in the execution of a shell on a host.
In line 3, we wait for any alarm about a buﬀer overﬂow attack. In line 6,
the Snort alarm names (sid_xxx) that refer to buﬀer overﬂow attacks are enu-
merated. If such an attack is followed by a shell execution on the same target,
and no login execution occurred between the two (which could justify the shell
execution), then the chronicle is recognized.
3.6 Experimental Results
The chronicle models proposed in this paper have not been tested on a live system
yet. We plan to do this in the near future. They have only been validated on
alarm logs collected in our network.
However, concerning the ability of the chronicle recognition system to cope
with intrusion alarm ﬂow, one should notice that chronicles were primarily de-
signed to diagnose failures in telecommunication network by analyzing alarms
issued by equipments. In this context, the recognition system must be eﬃcient
because it has to deal with alarm bursts and high alarm rates.
Correlation of Intrusion Symptoms: An Application of Chronicles
107
The alarm rates observed in the intrusion detection ﬁeld are of the same order
as the ones observed in other ﬁelds where the chronicles have already successfully
been applied.
The performance issue may arise if no chronicle invalidation mechanism is
speciﬁed by the chronicle writer in a chronicle model. In this case, the chronicle
instances tree may grow up indeﬁnitely because of chronicles living forever (see
section 2.2).
Performance also depends on the number of chronicle models used in parallel.
The time required to process an event grows linearly with the number of chronicle
models. In [11], eﬃciency experiments are performed with 80 chronicle models,
containing about 10 event patterns among 50 domain attributes, 20 temporal
constraints and 4 assertions. In this conﬁguration, the integration of an event
required about 10 ms. Detailed eﬃciency arguments about chronicles can be
found in [11] (pages 78–81).
4 M2D2: An Intrusion Alarm Correlation Infrastructure
Except the chronicle model proposed in Figure 7, alarm(name, src, trg) is the
only domain attribute used in the chronicle models discussed in the previous
section.
In [1], we argue that current alarm correlation approaches do not take advan-
tage of all the available information, especially environmental information. For
example, false alarms are often abusively attributed to poor intrusion detection
systems techniques: in many cases, false alarms are caused by the environment
properties not being taken into account.
To address this, we proposed a formal data model called M2D2. M2D2 fed-
erates the information that is required for alarm correlation. In this section,
we sketch how the chronicle recognition system can cooperate with the M2D2
framework.
4.1 Overview of M2D2
M2D2 can be seen as an infrastructure upon which alarm correlation systems can
rely for events and structural information. M2D2 provides concepts and relations
modeled with standard propositions of the classical ﬁrst-order logic.
The concepts of M2D2 can be categorized in four groups: i) characteristics
of the information system, ii) vulnerabilities, iii) security tools and iv) events.
Characteristics of the information system include information about the car-
tography7 and the security policy. Vulnerabilities include information about the
characteristics of known vulnerabilities: prerequisites, eﬀect, products aﬀected.
Security tools include information about the nature and the conﬁguration of the
tools used to monitor entities of the information system for signs of attacks.
7 cartography both refers to the topology of the network and the softwares running
on the hosts
108
B. Morin and H. Debar
Events include basic events (signs of the attacks) and alarms provided by IDSes,
but also by the correlation systems.
A more detailed description of M2D2 can be found in [1].
4.2 M2D2 and the Chronicles
There is a two-way relationship between M2D2 and the chronicles: as a correla-
tion system, the chronicles take advantage of the data provided by M2D2 and
also act as an alarm provider for M2D2.
M2D2 data are modeled with ﬁrst-order logic predicates, so they can be used
as the atemporal information of the reiﬁed logic on which the chronicles are
based. In other words, the M2D2’s concepts are used as domain attributes of
the chronicles. In our current approach, only M2D2’s alarm concepts are used
as domain attributes of chronicles (see section 3). However, the other available
concepts would enhance the chronicle models.
The infected domain attribute in the example 3.4 is an example of the use of
a domain attribute corresponding to M2D2’s cartography class of information.
We illustrate the use of topological information with another example: video
conferences require the ﬁrewall to be open. Every participant is notiﬁed of the
port number he/she shall use, and connections bursts on the server are observed.
Thus, over these periods, portscans shall be described as false positives. By
tracking the topological modiﬁcation (the ﬁrewall opening), a chronicle could
qualify the portscans as false positives during video-conference sessions.
In M2D2, the high level alarms triggered by correlation systems are related
to lower level alarms with the part of relation. Thus, alarms are structured in a
hierarchy, where leaf nodes are the lowest level alarms provided by basic IDSes
and root nodes are the highest level alarms, built with intermediate events.
Only the hierarchies root alarms are directly shown to the operator. If detailed
information about the alarms is required, the operator can browse the alarm
hierarchy. There is a straightforward mapping between the IDWG [15] alarm
structures and the event concept of M2D2.
Using previously recognized chronicles into other chronicle models is a func-
tionality already included in the chronicle recognition system (see the looping
functionality in section 2.1). By making M2D2 and the chronicle recognition sys-
tem cooperate, the recognized chronicles are transformed into M2D2 high level
alarms linked with the events with the part of relation. The new alarms provided
by the chronicle recognition system are de facto made available to other corre-
lation systems relying on M2D2. This is illustrated in Figure 9. There are two
alarm generators, a Snort sensor and CRS. When a nimda attack occurs, Snort
generates the three iis-decode-bug, iis-cmd-exe and iis-unicode alarms.
These alarms are made available to CRS, which recognizes a nimda attack. A
nimda alarm is triggered, and related to the previous alarms with the part of re-
lationship. Only the nimda alarm is provided to the operator. On the contrary,
the shellcode alarm is not related to any recognized chronicle so it is directly
provided to the operator. The nimda alarm could be involved in another alarm
via the part of relation. For instance, we can use the vulnerabilities information
Correlation of Intrusion Symptoms: An Application of Chronicles
109
Operator
part_of
nimda
part_of
part_of
triggered_by
shellcode
iis_decode_bug
iis_cmd_exe
...
iis_unicode3
triggered_by
triggered_by
triggered_by
triggered_by
Snort
CRS
Fig. 9. Relations between alarms
Alarms (recognized chronicles)
S1
S2
Alarms
Dispatcher
Alarms
CRS
Alarms
Alarms
Chronicle
Models
Domain
Attributes
M2D2
Fig. 10. Interactions between the chronicles and M2D2
contained in M2D2 to check whether the target server is really vulnerable or not
(see [1]).
The architecture of the global system is summarized in Figure 10. On this
ﬁgure, we see that alarms provided by sensors (S1 and S2) are sent to a dis-
patcher. The dispatcher assigns unique identiﬁers to events and dispatches them
to the M2D2 database and to the correlation systems performing asynchronous
(i.e. event-driven) analysis. Chronicle recognition is one of these asynchronous
processes. Other environmental information contained in M2D2 are exploited as
domain attributes of the chronicles.
5 Related Work
Among the six categories of languages proposed by Eckmann et al [2], two are
of relevance here: detection languages and correlation languages. Our approach
aims at correlating alarms, so we shall ﬁrst compare to other correlation lan-
guages.
110
B. Morin and H. Debar
Cuppens [23] proposes a language, called Lambda, whose scenarios steps
represent the attacker’s action (be they observable or not). However, we believe
that attackers strategies are too random to be the subject of explicit attack
scenarios. In [24], Cuppens also proposes more ﬂexible approaches to correlate
alarms through the underlying attacks consequences and prerequisites.
Although chronicles could be used for this purpose, we do not dedicate chron-
icles to attack scenario modeling. In our approach, chronicles are used to rep-
resent known phenomena which involve several alarms and to strengthen and
enhance single alarms by combining them with other events, as well as other
information not found in the alarms.
The Statl [2] correlation language is a transition-based language, which is
strongly dedicated to the underlying search algorithm, whereas the chronicles
language is a high level declarative language. This language enabled to success-
fully apply chronicles to many distinct ﬁelds. Our intrusion alarm correlation
component beneﬁts from the operational and stable chronicle recognition sys-
tem developed by Dousson for these application ﬁelds.
Another essential diﬀerence with the two previous works is that time is fun-
damental in chronicles, whereas the reasoning of Lambda and Statl is not based
on time.
Although we are interested in correlating alarms, we shall compare our work
with existing detection languages. Detection languages analyze raw events, some
of which are manifestations of an attack. This is the fundamental diﬀerence
between correlation and detection languages: in detection, the goal is to identify
the events in the monitored stream that are suspects, among all the legitimate
ones. In correlation, all events are potentially suspects.
However, from the point of view of the operators used in such languages, the
distinction between detection and correlation languages is rather small. Thus,
operators used in high-level declarative detection languages like Sutekh from
Pouzol [21], LogWeaver from Goubault-Larrecq [3] are closer from our work
than previously cited correlation languages. These languages could most likely
be transposed to correlation languages (i.e take alerts as input instead of raw
events).
Pouzol and Goubault-Larreq use non-reiﬁed temporal approaches; they take
as input a trail, i.e a totally ordered set of events. From the point of view of
expressiveness, since reiﬁed logics accord a special status to time and allow one
to predicate and quantify over propositional terms, they are more expressive
for classifying diﬀerent types of temporal occurrence and in representing both
non-temporal and temporal aspects of causal relationships.
As much as we know, Pouzol does not provide the counting predicate, but the
chronicles would beneﬁt of his work concerning the problem of the recognition
being exhaustive, evoked in section 2.2 [22].
We way also compare our work with an existing alarm correlation system,
called Risk Manager [8]. Risk Manager uses time information to aggregate alarms
but is not based on a temporal reasoning. Moreover, it does not provide any mean
to express explicit alarm sequences.
Correlation of Intrusion Symptoms: An Application of Chronicles
111
6 Conclusion and Future Work
In this paper, we proposed to apply chronicles to alarm correlation in intrusion
detection. Chronicles beneﬁt of strong theoretical background. They provide a
high level declarative language which does not presume the nature of the under-
lying input events. An operational and stable implementation of the recognition
system exists. Chronicles are indeed being successfully used in many distinct
areas to monitor dynamic systems where the time information is relevant.
We have illustrated how chronicles might solve some of current intrusion
detection issues like alarm overload, false positives and poor alarm semantics.
The proposed chronicles currently only use alarms as domain attributes. We
plan to integrate the chronicle recognition system with an alarm correlation
infrastructure, M2D2, in order to extend domain attributes to other relevant
concepts, like topology, which is more and more dynamic.
Chronicle models are currently written by experts of the domain. A chronicle
learning tool called Face is currently being developed by Dousson to discover
frequent chronicles. In intrusion detection, many alarm groups are caused by
recurrent phenomena, especially worms. We plan to apply the chronicle learning
tool to discover such phenomena.
Acknowledgments
We are very greatful to Christophe Dousson for his help to use the Chronicle
Recognition System. We would also want to thank Ludovic M´e and Mireille
Ducass´e for their comments.
References
1. B. Morin, L. M´e, H. Debar and M. Ducass´e, “M2D2: a formal data model for
intrusion alarm correlation”, Proceedings of the 5th Recent Advances in Intrusion
Detection 2002 (RAID2002), 2002.
2. S.T. Eckmann, G. Vigna, R.A. Kemmerer, “STATL: An Attack Language for State-
based Intrusion Detection”, Dept. of Computer Science, University of California,
Santa Barbara, 2000.
3. M. Roger, J. Goubault-Larrecq, “Log Auditing Through Model-Checking”, Pro-
ceedings of the 14th IEEE Computer Security Foundations Workshop (CSFW01),
2001.
4. U. Lindqvist, P.A. Porras, “Detecting Computer and Network Misuse Through
the Production-Based Expert System Toolset (P-BEST)”, Proceedings of the IEEE
Symposium on Security and Privacy, 1999.
5. D.V. McDermott, “A Temporal Logic for Reasoning about Processes and Plans”,
Cognitive Science, pp.101–155, 1982.
6. F. Bacchus, J. Tenenberg, J.A. Koomen, “A non-reiﬁed Temporal Logic”, Artiﬁcial
Intelligence, pp.87–108, 1991.
7. J. Allen, “Towards a General Theory of Action and Time”, Artiﬁcial Intelligence,
pp.123–154, 1984.
112
B. Morin and H. Debar
8. H. Debar, A. Wespi, “Aggregation and Correlation of Intrusion Detection Alerts”,
Proceedings of the 4th Recent Advances in Intrusion Detection (RAID2001), Octo-
ber 2000.
9. S. Manganaris, M. Christensen, D. Zerkle, K. Hermiz, “A Data Mining Analysis of
RTID Alarms”, Computer Networks: The International Journal of Computer and
Telecommunications Networking, Volume 34, Issue 34, October 2000.
10. C. Dousson, P. Gaborit, and M. Ghallab, “Situation Recognition: Representation
and Algorithms”, in proceedings of the 13th IJCAI, pp.166–172, August 1993.
11. C. Dousson, “Suivi d’´evolutions et reconnaissance de chroniques”, PhD Thesis,
http://dli.rd.francetelecom.fr/abc/diagnostic/, 1994.
12. C. Dousson, “Alarm Driven Supervision for Telecommunication Networks: Online
Chronicle Recognition”, Annales des Telecommunications, pp.501–508, 1996.
13. C. Dousson, “Extending and Unifying Chronicles Representation with Event Coun-
ters”, in proceedings of the 15th European Conference on Artiﬁcial Intelligence
(ECAI 2002), August 2002.
14. M. O. Cordier, C. Dousson, “Alarm Driven Monitoring Based on Chronicles”, in
proceedings of the 4th Symposium on Fault Detection Supervision and Safety for
Technical Processes (Safeprocess 2000), pp. 286–291, June 2000.
15. H. Debar, M.Y. Huang, D.J. Donahoo, “Intrusion Detection Exchange Format
Data Model”, IETF Draft, 2002.
16. Y. Shoham, “Temporal Logics in AI: Semantical and Ontological Considerations”,
Journal of Artiﬁcial Intelligence, pp.89–104, 1987.
17. R. Dechter, I. Meiri, J. Pearl, “Temporal Constraint Networks”, Artiﬁcial Intelli-
gence, pp.61–95, 1991.
18. G. Jakobson and M. D. Weissman, “Alarm correlation”, IEEE Network Magazine,
pp. 52–60, 1993.
19. K. Julisch, “Mining Alarm Clusters to Improve Alarm Handling Eﬃciency”, Pro-
ceedings of the 17th ACSAC, December 2001.
20. S. Manganaris, et al, “A Data Mining Analysis of RTID Alarms”, First Inter-
national Workshop on the Recent Advances in Intrusion Detection (RAID98),
September 1998.
21. J.P. Pouzol, M. Ducass´e, “From Declarative Signatures to Misuse IDS”, Proceedings
of the 4th Recent Advances in Intrusion Detection (RAID), 2001.
22. J.P. Pouzol, M. Ducass´e, “Formal Speciﬁcation of Intrusion Signatures and Detec-
tion Rules”, Proceedings of the 15th IEEE Computer Security Foundations Work-
shop (CSFW), 2002.
23. F. Cuppens, “Managing Alerts in Multi-Intrusion Detection Environment”, Pro-
ceedings of the 17th Annual Computer Security Applications Conference (ACSAC
01), 2001.
24. F. Cuppens, A. Miege, “Alert Correlation in a Cooperative Intrusion Detection
Framework”, Proceedings of the IEEE Symposium on Security and Privacy”, 2002.