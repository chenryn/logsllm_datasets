            if (lockHolder != 0) { throw; }
            lockHolder = msg.sender;
        }
        function releaseLock() {
            lockHolder = 0;
        }
        function set(uint newState) {
            if (msg.sender != lockHolder) { throw; }
            n = newState;
        }
    }
攻击者可以首先调用`getLock()`函数，然后不进行`releaseLock()`函数的调用。如果这么做，那么合约将会被永远的锁住。所以倘若要使用互斥量去保护你的系统，那么工程师需要确保这种锁住无法被打开的情况。
### 三、Throw—区块链安全核心问题
我们经常在编写函数的时候添加判断语句，并在判断语句后添加终端语句，例如throw，return等。
下面我们看一个代码例子：
    contract Auction {
        address currentLeader;
        uint highestBid;
        function bid() {
            if (msg.value  uint) public refunds;
    // bad
    function refundAll() public {
        for(uint x; x  200000) {
          payees[i].addr.send(payees[i].value);
          i++;
        }
        nextPayeeIndex = i;
    }
只有在while函数中增加了`msg.gas > 200000`这种判断，才能保证在Gas值超过限度后跳出循环。
    // bad
    contract auction {
        address highestBidder;
        uint highestBid;
        function bid() payable {
            require(msg.value >= highestBid);
            if (highestBidder != address(0)) {
                highestBidder.transfer(highestBid); // if this call consistently fails, no one else can bid
            }
           highestBidder = msg.sender;
           highestBid = msg.value;
        }
    }
    // good
    contract auction {
        address highestBidder;
        uint highestBid;
        mapping(address => uint) refunds;
        function bid() payable external {
            require(msg.value >= highestBid);
            if (highestBidder != address(0)) {
                refunds[highestBidder] += highestBid; // record the refund that this user can claim
            }
            highestBidder = msg.sender;
            highestBid = msg.value;
        }
        function withdrawRefund() external {
            uint refund = refunds[msg.sender];
            refunds[msg.sender] = 0;
            msg.sender.transfer(refund);
        }
    }
### 四、总结
在上文中，我们对重入问题进行了详细的分析，包括了重入问题的简单函数、多函数、多合约函数等等。并且在后面交代了使用互斥量进行把控的方法。之后我们又对`throw`函数进行了代码分析，包括了一些安全模块的分析。下面我们给读者总结一些方法便于开发人员对编程函数更好的理解。
我们在编写合约的时候，可以有意的参照下面的方法进行。
  * 首先，我们需要检查所有的预先条件。
  * 然后尝试改变合约的状态。
  * 之后将本合约与其他合约进行交互，相互作用。
我们按照“条件、行动、相互作用”这种模式进行函数的结构设计将避免很多的问题。我们看一个例子：
    function{
        //条件
        if(now 
  * 2 
  * 3 
  * 4 
**本稿为原创稿件，转载请标明出处。谢谢。**