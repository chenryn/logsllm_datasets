script.
Setting the active kernel parameters is quite easy—we just need to add a series of
commands such as the following into the FAILED! branch of our first two if constructs:
echo "Attempting to modify active kernel parameters"
sudo sysctl -w net.ipv4.conf.all.send_redirects=0
sudo sysctl -w net.ipv4.route.flush=1
We could add something similar for net.ipv4.conf.default.send_redirects in the
appropriate place.
For our persistent parameters, however, things are a bit more tricky—we need to deal with
the two possible configuration file scenarios as with the PermitRootLogin example, but
now we have a configuration that is built up of a series of files and we must choose which
file to modify if the parameter isn't present.
Thus, once again, we must build up a block of code to handle these two differing scenarios:
OPTPRESENT=$(grep -e "^net\.ipv4\.conf\.all\.send_redirects"
/etc/sysctl.conf /etc/sysctl.d/*)
if [ "x$OPTPRESENT" == "x" ] ; then
echo "Line not present - attempting to append configuration"
echo "net.ipv4.conf.all.send_redirects = 0" | sudo tee -a
/etc/sysctl.conf 1>/dev/null
else
echo "Line present - attempting to modify"
sudo sed -i -r
's/^net\.ipv4\.conf\.all\.send_redirects.*/net.ipv4.conf.all.send_redirects
= 0/g' /etc/sysctl.conf /etc/sysctl.d/*
fi
That's a pretty ugly and difficult-to-read piece of code. What it does is as follows:
1. It runs a second grep against the known configuration files to see whether the
parameter is in there, regardless of its value.
2. If the parameter is not set, then we choose to append it to /etc/sysctl.conf.
3. If the parameter is set, we instead use sed to modify the parameter, forcing it to
our desired value of 0.
[ 367 ]
Using CIS Benchmarks Chapter 13
Now when we run this script as before, we get the following:
As we can see, this works nicely; however, we are now up to 57 lines of shell code and
much of it starting to get quite unreadable. All of this is for setting just two kernel
parameters, and although we have now built up a fairly solid code base for taking the CIS
Benchmarks (along with their recommended audit and remediation steps), it is not scaling
at all well.
Further, these scripts are all being run locally in the preceding example—what if we
wanted to run them from a central place? In the next section, we will take a look at exactly
that.
Running CIS Benchmark scripts from a remote
location
The challenge with shell scripting is that, while it is easy to run on the machine where the
scripts exist, it is a little more difficult to do on a remote machine.
[ 368 ]
Using CIS Benchmarks Chapter 13
The scripts we developed previously are designed to be run from an unprivileged
account—thus, we have used sudo on the steps that specifically require root access to be
run. This is fine when you have passwordless sudo access set up, but when a password is
required for elevated access using sudo, this further complicates the task of running the
scripts remotely.
Of course, the entire script could be run as root and, depending on your use case and
security requirements, this may or may not be desirable. Let's take a look at the task of
running our send redirect example on a remote system called centos-testhost. To
achieve this, we need to do the following:
1. SSH into the remote system and authenticate—this could be with a password or
SSH keys that were set up previously.
2. Invoke the shell required to run the script we have developed—in our examples,
this is /bin/bash.
3. We add the -s flag to the bash command—this causes the shell to read its
command from the standard input (that is, the commands can be piped to it).
4. Finally, we pipe our script across to bash.
There is one further caveat to this approach—in our script, we have boldly assumed that
the commands we rely on (such as sysctl) exist within one of the directories defined in
the PATH variable. It could be argued that this is flawed—however, it can also make script
development easier, especially when building up scripts that might be used in a cross-
platform environment.
For example, although we have been exclusively working with the RHEL 7 CIS Benchmark
in this chapter, it is fair to assume that Ubuntu Server would also want to have SSH root
logins disabled, and not send packet redirect information unless it is explicitly configured
as a router. Hence, we might reasonably expect the scripts we have developed so far to
work on both systems and save us some development effort.
However, on RHEL 7 (and CentOS 7), the sysctl command is found in
/usr/sbin/sysctl, whereas on Ubuntu it is in /sbin/sysctl. This difference in itself
could be handled by defining the path to sysctl in a variable at the top of the script, and
then calling it via this—however, even so, it would mean modifying many scripts related to
CIS hardening, like so:
# RHEL 7 systems
SYSCTL=/usr/sbin/sysctl
$SYSCTL -w net.ipv4.conf.all.send_redirects=0
# Ubuntu systems
[ 369 ]
Using CIS Benchmarks Chapter 13
SYSCTL=/sbin/sysctl
$SYSCTL -w net.ipv4.conf.all.send_redirects=0
In short, this is better than our original approach, but still highly manual and messy.
Returning to the task of running our existing script remotely, putting all our requirements
together, we might run it using the following command:
$ ssh centos-testhost 'PATH=$PATH:/usr/sbin /bin/bash -s' /dev/null
else
echo "Configuration present - attempting to modify"
sudo sed -i 's/^PermitRootLogin.*/PermitRootLogin no/g'
/etc/ssh/sshd_config
fi
sudo systemctl restart sshd
else
echo OK
fi
This shell script is for just one of the numerous benchmarks, and although it does work, it is
quite fragile and does not scale across multiple systems. Further, the script is not at all easy
to read, and so imagine the scale of the script that would be required if all the CIS
Benchmark recommendations were implemented!
Let's consider how we might rewrite this functionality in an Ansible role instead. First of
all, we know we are testing for a specific line of configuration in a single file. If it is not
present, then we know that the configuration (implicit or otherwise) is to allow remote root
logins. In this instance, we carry out two actions: first of all, we modify the configuration
file to insert the correct line (or modify the existing line if it exists but has the wrong value
configured). Then, we restart the SSH daemon if the configuration file was changed.
[ 375 ]
CIS Hardening with Ansible Chapter 14
Our experience with Ansible has shown us that the lineinfile module can handle nearly
all of the work-related to both checking the configuration file and modifying it if the
requisite line isn't correctly configured. We have also learned that the service module can
easily restart the SSH daemon, and that this module would be run from a handler rather
than in the main task flow to ensure that the daemon is not restarted unless the
configuration is actually modified.
Thus, we might define a role containing a single task that looks like this in a role called
rhel7cis_recommendation528:
---
- name: 5.2.8 Ensure SSH root login is disabled (Scored - L1S L1W)
lineinfile:
state: present
dest: /etc/ssh/sshd_config
regexp: '^PermitRootLogin'
line: 'PermitRootLogin no'
notify: Restart sshd
Notice how we have given the task a meaningful name – taken, in fact, directly from the
CIS Benchmark document itself. Thus, we know exactly which benchmark this is, what it is
for, and whether or not it is scored. We have also inserted the level information into the
title as again this would save us from cross-referencing the original CIS Benchmark
document later on.
Alongside our role tasks, we also want to create a handler to restart the SSH daemon if we
modify the configuration file (it will not pick up the changes without this) – an example of
suitable code for this handler is as follows:
---
- name: Restart sshd
service:
name: sshd
state: restarted
We can already see that this playbook is much easier to read than our original shell script
– there is none of the code duplication we found when we implemented this benchmark in
a shell script, and the lineinfile module is so powerful that it wraps all of our various
checks up into one single Ansible task.
Running the role should yield output similar to that shown in the following screenshot on a
system that has remote root logins enabled:
[ 376 ]
CIS Hardening with Ansible Chapter 14
By contrast, if the recommendation is already implemented, then the output will look like
that shown in the following screenshot:
As you can see, if the condition is met, the lineinfile module makes no changes
(resulting in the ok status seen in the preceding screenshot), and the handler does not run
at all.
This in itself is extremely powerful, and a huge improvement over our shell script in terms
of both manageability and coding effort. Nonetheless, the RHEL 7 CIS Benchmark contains
almost 400 recommendations, and you would not want to have to create and include 400
roles in a playbook run as this would detract from the otherwise manageable nature of our
Ansible automation.
[ 377 ]
CIS Hardening with Ansible Chapter 14
In the next section of this chapter, we will look at expanding our current playbook by