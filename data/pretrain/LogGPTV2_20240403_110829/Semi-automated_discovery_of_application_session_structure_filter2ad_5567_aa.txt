title:Semi-automated discovery of application session structure
author:Jayanthkumar Kannan and
Jaeyeon Jung and
Vern Paxson and
Can Emre Koksal
Semi-Automated Discovery
of Application Session Structure
Jayanthkumar Kannan
UC Berkeley
Berkeley, CA, USA
Jaeyeon Jung
Mazu Networks
Cambridge, MA, USA
PI:EMAIL
PI:EMAIL
Vern Paxson
International Computer Science Institute and
Lawrence Berkeley National Laboratory
Berkeley, CA, USA
PI:EMAIL
Can Emre Koksal
EPFL
Luasanne, Switzerland
emre.koksal@epﬂ.ch
ABSTRACT
While the problem of analyzing network trafﬁc at the granularity of indi-
vidual connections has seen considerable previous work and tool develop-
ment, understanding trafﬁc at a higher level—the structure of user-initiated
sessions comprised of groups of related connections—remains much less
explored. Some types of session structure, such as the coupling between
an FTP control connection and the data connections it spawns, have pre-
speciﬁed forms, though the speciﬁcations do not guarantee how the forms
appear in practice. Other types of sessions, such as a user reading email
with a browser, only manifest empirically. Still other sessions might exist
without us even knowing of their presence, such as a botnet zombie receiv-
ing instructions from its master and proceeding in turn to carry them out.
We present algorithms rooted in the statistics of Poisson processes that
can mine a large corpus of network connection logs to extract the apparent
structure of application sessions embedded in the connections. Our methods
are semi-automated in that we aim to present an analyst with high-quality
information (expressed as regular expressions) reﬂecting different possible
abstractions of an application’s session structure. We develop and test our
methods using traces from a large Internet site, ﬁnding diversity in the num-
ber of applications that manifest, their different session structures, and the
presence of abnormal behavior. Our work has applications to trafﬁc charac-
terization and monitoring, source models for synthesizing network trafﬁc,
and anomaly detection.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network Proto-
cols; C.2.3 [Computer-Communication Networks]: Network
management
General Terms
Measurement, Algorithms
Keywords
Trafﬁc Analysis, Application Sessions, Anomaly Detection
Copyright 2006 Association for Computing Machinery. ACM acknowledges
that this contribution was authored or co-authored by an employee, contrac-
tor or afﬁliate of the U.S. Government. As such, the Government retains
a nonexclusive, royalty-free right to publish or reproduce this article, or to
allow others to do so, for Government purposes only.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
1.
INTRODUCTION
Previous studies analyzing network trafﬁc have extensively ex-
amined behavior at the scales of individual packets [11, 18, 28, 41]
and connections [7, 9, 25, 26, 37, 40]. At a broader scale, however,
the structure of sessions of related connections involving the same
host has seen considerably less investigation, with the main efforts
being studies of speciﬁc, individual applications such as Web client
sessions [1, 33] or FTP user sessions [29]. Yet there is great util-
ity in understanding the nature of sessions because doing so helps
provide a foundation for forming source models: descriptions of
network activity in terms of what a source is attempting to achieve
using the network, as opposed to the ﬁnal result after the source’s
host software breaks this task down into individual connections that
are in turn further shaped, sometimes drastically, by network con-
ditions. The major beneﬁt of source modeling comes from express-
ing network trafﬁc in terms abstract enough to facilitate exploration
(via analysis or simulation) of how the network trafﬁc needed to
support a given task might manifest under different conditions and
transport mechanisms [10].
We will use the term session to denote a group of connections
associated with a single network task, where by “task” we mean
the activity that emanates from an external event that serves as the
causal origin of the connections. Thus, a “task” in this context can
be quite abstract, such as a user deciding to process their email or
conducting an interactive login to a remote host. It will however
often be convenient or apt for us to refer to a session using the
layer-7 notion of “application” as a proxy for these abstract tasks.
For example, we will refer to an “FTP session” rather than a “user
transfering ﬁles session” because from a network trace perspective
what we directly see is an instance of a TCP port 21 connection
(associated with the FTP control channel) and perhaps subsequent
port 20 or ephemeral port connections (data transfers directed by
the control channel).
Using this terminology, we argue that little is presently available
in terms of general tools for understanding the qualitative struc-
ture of application sessions. We believe that such an understanding
is useful to researchers and administrators who may beneﬁt from
working with higher-level abstractions of network trafﬁc. For re-
searchers, these abstractions promise to aid with trafﬁc character-
ization and monitoring, constructing source models for synthesiz-
ing network trafﬁc, and anomaly detection. For administrators, the
hope is to provide them with richer information for framing net-
work policies and gaining insight into how their network is used.
Finally, we hope that the semi-automated nature of our approach
will help both types of users to keep up with the evolving and di-
verse landscape of Internet applications.
The aim of our algorithms is to mine a connection-level trace to
derive abstract descriptions of the session-structure for the different
applications present in the trace. These algorithms work in general
terms, without requiring any a priori knowledge about a particular
type of application. The procedure operates in a semi-automated
fashion: we aim to provide an analyst with high-quality information
reﬂecting different possible abstractions (descriptors) of an appli-
cation’s session structure. We express these descriptors as regular
expressions, or, equivalently, deterministic ﬁnite automata (DFAs),
which capture the order, type, and directionality of the connections
that comprise a session, but not their interarrival timing. The differ-
ent abstractions provided trade off economy-of-expression versus
more detailed ﬁdelity to the observed data.
Application sessions manifesting in network trafﬁc can have dif-
ferent basic natures. Some applications have an explicitly deﬁned
session structure such as FTP sessions that consist of a FTP con-
trol connection followed by a number of data transfer connections.
Other sessions reﬂect a looser structure that arises from how end-
user software, or the end user themselves, drives network access in
order to perform a task. For example, for sessions beginning with
an SMTP connection, we ﬁnd a plethora of additional activity re-
ﬂecting the fact that transferring email can be invoked in a variety
of contexts: by mail servers (some of which initiate Ident connec-
tions back when contacted with incoming mail), by mail clients
(such as Thunderbird or Outlook, which may be conﬁgured to es-
tablish SMTP connections along with POP3/IMAP4 connections
for retrieving email), or by users (who may read their mail and
browse alongside, leading to HTTP connections). Still other ses-
sions arise from hostile activity, some of which runs counter to the
session structures exhibited by benign trafﬁc. While we do not
aim to identify these in a comprehensive fashion, we note that our
structural inference can provide a baseline for applying anomaly
detection techniques for detecting some forms of attacks. See §6.3
and §7 for more details.
Our method for discovering session structures uses as input a
connection-level trafﬁc trace. The method operates in two stages:
Session Extraction and Structure Abstraction.
Session Extraction is a statistical algorithm that reduces a stream
of connections down to a stream of sessions. We base it on model-
ing the temporal characteristics of session arrivals, using the impor-
tant observation that, in comparison with connections from differ-
ent (and hence independent) sessions, connections belonging to the
same session tend to occur “close” to one another. An important
limitation of our current work is that we only capture sessions be-
tween a single pair of hosts, whereas many forms of sessions (e.g.,
Web surﬁng) naturally include a local host’s interactions with mul-
tiple remote hosts. In the development of our approach, we note at
several points ways in which it might be generalized in this fashion.
Structure Abstraction operates on the set of sessions extracted
for a given application and attempts to infer succinct session de-
scriptors that capture (at varying levels of abstraction) the structure
of sessions typically generated by the application. We aim for this
step to provide both economy of description and insight by suggest-
ing apt abstractions. To do so, the inference framework includes a
set of generalization rules that simplify or transform the raw de-
scriptions inferred directly from a trace. We present these gener-
alized descriptors to the analyst in terms of complexity-coverage
curves: the analyst can opt for complex representations for more
precise coverage of the set of sessions empirically observed, or for
simpler, more abstract representations that may better capture “the
heart of the matter”. We found that often the curves exhibit inﬂec-
tion point “sweet spots” that mark qualitative transitions between
adding complexity and gaining more coverage.
We evaluated our scheme using a month’s trace collected at the
border of the Lawerence Berkeley National Laboratory, which on
average saw about 2,700,000 connections each day. We used the
ﬁrst half of the trace to develop and calibrate our methods, then
applying them to infer descriptors for about 40 different applica-
tions in the second half of the trace. These include well-known
ones such as content-transfer (e.g., SMTP, FTP, HTTP), remote ac-
cess (e.g., SSH, Telnet, remote exec), database (e.g., OracleSQL,
MySQL), peer-to-peer (e.g., BitTorrent), and mapping and authen-
tication (e.g., RPC portmapper, LDAP, Kerberos). We also encoun-
tered applications little discussed in the literature: remote desktop
(e.g., Timbuktu, Groove), engineering/scientiﬁc (e.g., ProEngineer,
Legato, GridFTP), and lesser-known peer-to-peer (e.g., KCEasy).
When possible, we validated our inferences using published proto-
col speciﬁcations, but for applications whose public documentation
does not specify an overall session structure, often we could only
assess the plausibility of the inferences based on what we could
determine about the application’s operation.
The outline for the rest of the paper is as follows. We begin
with some background in §2 and discuss related work in §3. We
develop our session extraction mechanism in §4 and our structure
abstraction mechanism in §5.
In §6 we present an evaluation of
these mechanisms along with some preliminary results on detecting
anomalous trafﬁc. We cast our work in a wider perspective in §7
and conclude in §8.
2. BACKGROUND
We ﬁrst frame the problem setting by specifying the inputs pro-
cessed by our algorithms and the terminology we will use in their
development.
Trafﬁc Characteristics Inputs. Our algorithm works using
connection-level information obtained from passive network moni-
toring. While in principle our approach could work applied to mon-
itoring inside a site or within a backbone, our development has been
in the context of traces recorded at a site’s border. For every TCP
connection, the monitor records the IP addresses of the local and
remote hosts, direction (incoming/outgoing), timing information
(start time, duration), and connection status (whether successfully
established). One could generate similar information for non-TCP
ﬂows, but to date we have evaluated our mechanism only for TCP
trafﬁc, using traces of SYN, FIN and RST packets.
Terminology. We denote a connection C by the tuple (proto,
dir, remote-host, local-host, start-time, duration). proto speciﬁes
the service associated with the destination port X of the connection
(e.g., FTP or HTTP), or, if X does not have a speciﬁc service asso-
ciated with it, we use “priv-X” for ports X < 1024 (usually only
available to privileged processes) and “other-X” for X ≥ 1024.
For these latter, in some contexts we will use “ephemeral” to indi-
cate that it routinely varies. dir takes the value “in” or “out” indi-
cating the connection was incoming (initiated by the remote host)
or outgoing (locally initiated). remote-host/local-host is the IP ad-
dress of the remote/local host, and start-time and duration denote
the beginning times and duration, respectively.
We deﬁne the type T (C) of a connection C as the tuple (proto,
dir). We allow some ﬁelds to be absent in our tuple notation for
connections; the value of such omitted ﬁelds will be clear from
context.
We deﬁne a session as a sequence of connections S =
(C1, C2, . . . , Cn) that have a common causal origin. In this work,
we only consider sessions that involve a single local-host and single
remote-host, so implicitly all connections involve only these two
hosts. We deﬁne the application, A(S), associated with a session
S as the type of the ﬁrst connection C1, i.e., T (C1). This is imper-
fect since different applications might manifest with the same type
of initial connection, or the same application with different initial
connections, but in the absence of ground truth regarding the true
user/application sessions in a trafﬁc stream, it strikes us as arguably
a reasonable approximation.
We say that a session S belongs to the session type ST (S) =
(T1, . . . , Tn), if for all i ≤ n, Ti = T (Ci). Thus, A(S) cat-
egorizes which application a session S belongs to, while ST (S)
captures the structure of the entire session in terms of the proto’s of
each connection and their directionality.
DFA Visualization.
In our DFA visualizations (produced
by FSA utilities software [12] and Graphviz visualization soft-
ware [13]), we label the start-state as 0, and distinguish between
accepting states and non-accepting states with shading. We label
edges with the type of the corresponding connection and a direc-
tion tag, “ in” or “ out” indicating incoming/outgoing connections
respectively. Finally, we use the thickness of the edge to visually
convey how often each edge occurred in the trace.
3. RELATED WORK
The main area of previous work related to our effort consists of
studies characterizing network ﬂows at various granularities: pack-
ets, connections, and sessions.
Early Internet trafﬁc studies focused primarily on the dynam-
ics of individual packets in terms of comprising ﬂows [4, 14, 15]
and with regard to correlational structure [11], especially self-
similarity [18]. Subsequent work then characterized the condi-
tions encountered by streams of packets as they traversed the In-
ternet [3, 28, 41]. These studies were accompanied by other early
ones that analyzed trafﬁc in terms of connection properties. These
included measurements of connection characteristics as seen at dif-
ferent sites [9], dynamics seen within connections [21, 25], trans-
port behavior [27], structural contribution to self-similarity [37],
connection performance limitations [40], and numerous character-
izations of different applications (e.g., [7, 26] for older ones).
Studies of both packet and connection dynamics have contin-
ued to expand into a large body of subsequent work. However,
the literature examining application session structure in abstract
terms (that is, not simply the structure of a particular application
such as Web access or streaming audio/video) has been much more
limited. Particularly relevant for our work is Paxson and Floyd’s
characterization of the connection-level and session-level behavior
of applications [29]. This work studied the wide-area TCP arrival
processes at differing levels of granularity: packets, connections,
and sessions. The authors found that session arrivals were gen-
erally well-modeled by a Poisson process with hourly rates, even
though individual connection arrivals were not. More recently,
Nuzman et al. [24] studied the arrival characteristics of HTTP con-
nections, ﬁnding that when these connections are suitably aggre-
gated into sessions, the sessions indeed reﬂect a Poisson process.
These observations form the basis for our Session Extraction al-
gorithm. Characteristics of Web trafﬁc, such as the prevalence of
pipelined and persistent HTTP connections, have been studied by
analyzing HTTP connections that correspond to requests for a sin-
gle Web page and its embedded objects [33]. Our work focuses on
higher-level patterns of connections (possibly on different ports)
exhibited by protocols, such as HTTP, and does not deal with spe-
ciﬁc application-level characteristics.
In addition, our work is similar to spirit to recent work that aims
to automatically infer application-level packet structure. Machine-
learning based techniques [19, 22] have been used to identify the
application that a particular ﬂow belongs to without relying on port
numbers; our work is concerned with inferring the application’s
internal session structure and simply uses port numbers to iden-
tify applications. Protocol Informatics [31] uses sequence anal-
ysis techniques from bioinformatics to identify protocol ﬁelds in
unknown or poorly documented applications. RolePlayer [8] uses
byte-stream alignment algorithms, along with knowledge of a few
low-level syntactic conventions, to infer protocol formats to enable
RolePlayer to cheaply emulate the application-level behavior of a
previously seen client or server. Our work is complementary to
these efforts in that we focus on higher-level abstractions of ses-
sions, while they are geared towards more ﬁne-grained characteri-
zations of trafﬁc.
In abstract terms, our work is about discovering and characteriz-
ing causality in network trafﬁc: which network activities are due to
previously seen activities. This theme has been pursued by several
lines of work in intrusion detection. First, host-based schemes have
related network trafﬁc received by a host with subsequent code ex-
ecuted by the host [5, 6, 23]. In addition, other work has tracked
causality in network trafﬁc in terms of an attacker moving among
a set of nodes [34], identifying which hosts have infected other
hosts [17, 38], and detecting “stepping stones” whereby attackers
relay their trafﬁc through previously compromised machines to ob-
scure their identity while attacking other machines [2, 35, 39, 42].
Our work differs from these in that, ﬁrst, we aim to discover over-
all patterns of activity rather than detect individual instances; and,
second, we do not have to contend with an adversary motivated to
thwart our analysis. As a consequence, we can tolerate a greater
degree of statistical uncertainty and decision errors. Our statis-
tical test based on a Poisson model of connection arrivals bears
resemblance to the stepping stone detection algoritm in Blum et
al. [2]. [2] presents a test based on modeling packet arrival as a
Poisson process, which is then generalized to other distributions as
well.
4. SESSION EXTRACTION