# Semi-Automated Discovery of Application Session Structure

## Authors
- Jayanthkumar Kannan, UC Berkeley, Berkeley, CA, USA
- Jaeyeon Jung, Mazu Networks, Cambridge, MA, USA
- Vern Paxson, International Computer Science Institute and Lawrence Berkeley National Laboratory, Berkeley, CA, USA
- Can Emre Koksal, EPFL, Lausanne, Switzerland

## Abstract
While extensive research and tool development have focused on analyzing network traffic at the granularity of individual connections, understanding traffic at a higher level—specifically, the structure of user-initiated sessions composed of groups of related connections—remains underexplored. Some session structures, such as the coupling between an FTP control connection and its spawned data connections, are predefined, though their practical manifestations may vary. Other sessions, like a user reading email with a browser, are only evident through empirical observation. Additionally, some sessions, such as those involving botnet zombies receiving instructions from a master, may exist without being readily apparent.

We present algorithms based on Poisson process statistics that can mine large network connection logs to extract the apparent structure of application sessions embedded within these connections. Our methods are semi-automated, aiming to provide analysts with high-quality information (expressed as regular expressions) reflecting different possible abstractions of an application’s session structure. We develop and test our methods using traces from a large Internet site, revealing diversity in the number of applications, their session structures, and the presence of abnormal behavior. Our work has applications in traffic characterization and monitoring, source models for synthesizing network traffic, and anomaly detection.

## Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network Protocols; C.2.3 [Computer-Communication Networks]: Network Management

## General Terms
Measurement, Algorithms

## Keywords
Traffic Analysis, Application Sessions, Anomaly Detection

## Copyright
Copyright 2006 Association for Computing Machinery. ACM acknowledges that this contribution was authored or co-authored by an employee, contractor, or affiliate of the U.S. Government. As such, the Government retains a nonexclusive, royalty-free right to publish or reproduce this article, or to allow others to do so, for Government purposes only.

IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.

## 1. Introduction
Previous studies have extensively analyzed network traffic at the scales of individual packets and connections. However, the structure of sessions involving related connections has received less attention, with most efforts focusing on specific applications like Web client sessions or FTP user sessions. Understanding session structures is valuable because it provides a foundation for forming source models, which describe network activity in terms of what a source is trying to achieve, rather than the final result after the host software breaks down the task into individual connections. This abstraction facilitates the exploration of how network traffic might manifest under different conditions and transport mechanisms.

We define a session as a group of connections associated with a single network task, where a "task" is the activity initiated by an external event. For example, a user deciding to process their email or conducting an interactive login to a remote host. While some session structures, such as FTP, are well-defined, others, like a user reading email with a browser, are more loosely structured and only evident empirically. Additionally, some sessions, such as those involving botnets, may exist without being immediately apparent.

Our algorithms aim to derive abstract descriptions of session structures from connection-level traces without requiring prior knowledge about specific applications. The procedure is semi-automated, providing analysts with high-quality information in the form of regular expressions or deterministic finite automata (DFAs). These descriptors capture the order, type, and directionality of connections but not their interarrival timing. The different abstractions provided balance economy of expression against detailed fidelity to the observed data.

Application sessions can have different natures. Some, like FTP, have a defined structure, while others, such as SMTP sessions, reflect a looser structure driven by end-user software or the end user. Hostile activities, such as those involving botnets, may also generate sessions that deviate from typical patterns. Our structural inference can provide a baseline for anomaly detection techniques to identify such activities.

Our method for discovering session structures uses a connection-level traffic trace and operates in two stages: Session Extraction and Structure Abstraction.

### Session Extraction
This stage is a statistical algorithm that reduces a stream of connections to a stream of sessions. It models the temporal characteristics of session arrivals, noting that connections within the same session tend to occur close together. A limitation of our current work is that we only capture sessions between a single pair of hosts, whereas many sessions involve interactions with multiple remote hosts.

### Structure Abstraction
This stage infers succinct session descriptors that capture the structure of sessions typically generated by an application. The inference framework includes generalization rules to simplify or transform raw descriptions. We present these generalized descriptors to the analyst in terms of complexity-coverage curves, allowing them to choose between more complex, precise representations and simpler, more abstract ones. Often, these curves exhibit inflection points that mark qualitative transitions between adding complexity and gaining more coverage.

We evaluated our scheme using a month's trace collected at the border of the Lawrence Berkeley National Laboratory, which saw about 2.7 million connections daily. We used the first half of the trace to develop and calibrate our methods and applied them to infer descriptors for about 40 different applications in the second half. These include well-known applications like SMTP, FTP, HTTP, SSH, Telnet, OracleSQL, MySQL, BitTorrent, RPC portmapper, LDAP, and Kerberos, as well as lesser-known ones like Timbuktu, Groove, ProEngineer, Legato, GridFTP, and KCEasy. We validated our inferences using published protocol specifications when available.

The rest of the paper is organized as follows: Section 2 provides background and terminology, Section 3 discusses related work, Section 4 details the Session Extraction mechanism, Section 5 covers the Structure Abstraction mechanism, Section 6 presents an evaluation and preliminary results on detecting anomalous traffic, Section 7 places our work in a broader context, and Section 8 concludes.

## 2. Background
We frame the problem setting by specifying the inputs processed by our algorithms and the terminology used in their development.

### Traffic Characteristics Inputs
Our algorithm works with connection-level information obtained from passive network monitoring. While our approach could be applied to monitoring inside a site or within a backbone, our development has been in the context of traces recorded at a site's border. For every TCP connection, the monitor records the IP addresses of the local and remote hosts, direction (incoming/outgoing), timing information (start time, duration), and connection status (whether successfully established).

### Terminology
A connection \( C \) is denoted by the tuple \((\text{proto}, \text{dir}, \text{remote-host}, \text{local-host}, \text{start-time}, \text{duration})\). \(\text{proto}\) specifies the service associated with the destination port, or if no specific service is associated, we use "priv-X" for ports \( X < 1024 \) and "other-X" for \( X \geq 1024 \). \(\text{dir}\) takes the value "in" or "out" indicating the connection was incoming or outgoing. \(\text{remote-host/local-host}\) is the IP address of the remote/local host, and \(\text{start-time}\) and \(\text{duration}\) denote the beginning times and duration, respectively.

The type \( T(C) \) of a connection \( C \) is the tuple \((\text{proto}, \text{dir})\). We define a session \( S \) as a sequence of connections \((C_1, C_2, \ldots, C_n)\) that have a common causal origin. In this work, we only consider sessions involving a single local host and a single remote host. The application \( A(S) \) associated with a session \( S \) is the type of the first connection \( C_1 \), i.e., \( T(C_1) \). This is an approximation, as different applications might share the same initial connection type.

A session \( S \) belongs to the session type \( ST(S) = (T_1, \ldots, T_n) \) if for all \( i \leq n \), \( T_i = T(C_i) \). Thus, \( A(S) \) categorizes the application, while \( ST(S) \) captures the structure of the entire session in terms of the protocols and their directionality.

### DFA Visualization
In our DFA visualizations, we label the start state as 0 and distinguish between accepting and non-accepting states with shading. Edges are labeled with the type of the corresponding connection and a direction tag ("in" or "out"). Edge thickness visually conveys the frequency of each edge in the trace.

## 3. Related Work
Previous work related to our effort includes studies characterizing network flows at various granularities: packets, connections, and sessions. Early Internet traffic studies focused on packet dynamics and self-similarity. Subsequent work characterized the conditions encountered by packet streams and connection properties. However, studies examining application session structure in abstract terms are limited.

Paxson and Floyd's work on the connection-level and session-level behavior of applications found that session arrivals were generally well-modeled by a Poisson process. Nuzman et al. studied HTTP connection arrival characteristics, finding that when aggregated into sessions, they reflect a Poisson process. These observations form the basis for our Session Extraction algorithm.

Our work is similar in spirit to recent efforts that aim to automatically infer application-level packet structure. Machine-learning-based techniques have been used to identify the application a flow belongs to without relying on port numbers. Protocol Informatics uses sequence analysis techniques to identify protocol fields in unknown or poorly documented applications. RolePlayer uses byte-stream alignment algorithms to infer protocol formats. Our work complements these efforts by focusing on higher-level abstractions of sessions.

In abstract terms, our work is about discovering and characterizing causality in network traffic. This theme has been pursued in intrusion detection, where host-based schemes relate network traffic to subsequent code execution, and other work tracks causality in terms of attacker movements and infected hosts. Our work differs in that we aim to discover overall patterns of activity rather than detect individual instances, and we do not contend with adversaries motivated to thwart our analysis.

## 4. Session Extraction
[Continuation of the paper with the remaining sections and content]