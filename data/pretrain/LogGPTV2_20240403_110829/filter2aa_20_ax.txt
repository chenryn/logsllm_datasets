幸运的是，本节所介绍的安全隐患防范策略的实施场所少而明确，实施成本并不高。因此，建议开发者们从设计阶段就开始有计划地落实防范策略。
4.7 重定向相关的安全隐患
Web 应用中有时会重定向至外界指定的 URL。典型案例为，在登录页面的参数中指定 URL，登录成功后再重定向至该 URL。比如使用以下 URL 登录 Google 后，就会重定向到 continue= 指定的 URL（此处为 Gmail）40
 。
40
 写作本书时已进行过确认，但将来可能会有所更改。
https://www.google.com/accounts/ServiceLogin?continue=https://mail.google.com/mail/
重定向处理时产生的安全隐患有如下几种，而且它们都会招致被动攻击。
自由重定向漏洞
HTTP 消息头注入漏洞
接下来，本节将对以上两种安全隐患进行详细说明。
4.7.1 自由重定向漏洞
概要
刚才已经提到，有些 Web 应用中提供了能够重定向到参数指定的 URL 的功能，该重定向功能就被称为重定向器（Redirector）。
其中，能够重定向至任意域名的重定向器叫作自由重定向（Open Redirect）。自由重定向可能会导致用户在不知情的情况下被带到其他域名的网站，从而遭到钓鱼式攻击（Phishing）。
自由重定向示例
http://example.jp/?continue=http://trap.example.com/
通过以上 URL 跳转至 http://trap.example.com/
钓鱼式攻击的常见手段为，将用户带到伪装成著名网站的恶意网站，并诱使用户输入个人信息。
如果用户信赖的网站存在自由重定向漏洞，用户就可能会在不知不觉中被诱导到恶意网站，却自以为还在浏览自己信赖的网站。此时，即便是戒心很重的用户也会比较轻易地输入自己的个人信息等重要内容。而自由重定向漏洞就常被用于此类狡猾的钓鱼式攻击。
另外，如果软件或设备驱动程序的下载网站存在自由重定向漏洞，就有可能被不法分子利用来散布恶意软件（非法程序）。
为了防范自由重定向漏洞，应该重新评估“外界能够指定重定向目标 URL”的功能是否真的不可或缺，并尽可能将重定向的目标固定。如果实在不能固定重定向的目标，就需要将重定向的目标限制在允许的域名范围内。
自由重定向漏洞总览
攻击手段与影响
接下来我们就来看一下针对自由重定向漏洞的典型攻击模式及其影响。下面是具备重定向功能的密码认证的示例脚本。
代码清单 /47/47-001.php
 请登录 
用户名 
密码 
">
代码清单 /47/47-002.php
用户名或密码错误
 重新登录 
代码清单 /47/47-003.php
 认证成功 
登录成功
47-001.php、47-002.php、47-003.php 为极度简化后的登录脚本。由于仅用于演示，47-002.php 中没有检验用户名和密码。登录认证成功后会重定向至 POST 参数 url
 所指定的 URL。重定向处理的内容即为输出 Location 消息头。图 4-60 展示了页面的跳转。
图 4-60 重定向范例的页面跳转
正常情况下，重定向目标应该为 47-003.php。但是，如果攻击者精心准备了能跳转到恶意网站的 URL 来让用户点击会怎样呢？
假设此处恶意网站的 URL 为 http://trap.example.com/47/47-900.php
 。以下为 47-900.php 的源代码。
代码清单 /47/47-900.php
 登录错误 
用户名或密码错误。请再次登录。
用户名 
密码 
攻击者会给用户发送邮件或在用户的博客中发表评论，想方设法地使用户浏览以下 URL。
http://example.jp/47/47-001.php?url=http://trap.example.com/47/47-900.php
由于域名没有问题，并且 HTTPS 的情况下证书也没有出错 41
 ，因此多数用户都会毫无防备地输入用户名和密码。这时，应用程序在 47-002.php 认证成功后，就会跳转到图 4-61 所示的恶意网页。
41
 本例中没有涉及 HTTPS。
图 4-61 恶意网页
虽然用户输入的确实是正确的用户名和密码，但看到这个页面后还是不免会产生疑惑而再次输入。由于用户已经进入到了恶意网站，因此，点击登录按钮后用户名和密码就会被发送给恶意网站，而如果随后又能跳转至正规页面（47-003.php），那么用户就在毫不知情的情况下被窃取了重要信息。
安全隐患的产生原因
自由重定向漏洞产生的原因有以下两点。
重定向的目标 URL 能够由外界指定
没有对重定向的目标域名进行校验
以上两点是 AND 条件，也就是说只有同时满足这两点时才会形成自由重定向漏洞，因此，只要使其中一项无法满足也就消除了安全隐患。
允许自由重定向的情况
上面讲述的都是自由重定向导致安全隐患的情况，但并非所有的自由重定向都会造成安全隐患。例如，满足以下两个条件时就不会造成安全隐患。
根据应用的需求本来就应该跳转至外部域名
用户自己清楚会跳转至外部域名
满足上述条件的一个重定向的例子就是横幅广告。虽然多数横幅广告都使用了应用内部的重定向功能，但只要用户能分辨出自己点击的是广告，那么即使有自由重定向功能也不会造成安全隐患。
对策
自由重定向漏洞的根本性防范策略有下列三项，实施时任选其一即可。
1. 固定重定向的目标 URL
2. 使用编号指定重定向的目标 URL
3. 校验重定向的目标域名
下面我们就来依次解说。
固定重定向的目标 URL
重新评估应用的需求，探讨是否能够固定 URL 的跳转去向，而不是由外界指定。只要能够固定重定向的目标，就能成功根除自由重定向漏洞。
使用编号指定重定向的目标 URL
由于某些原因而不得不采用可变的重定向目标时，可以采用“页面编号”的形式来指定目标 URL。页面编号和 URL 的对应表应该保存在外界无法访问的脚本源码或文件、数据库中。
使用此方法后外界就无法任意指定域名，因此也就消除了自由重定向漏洞。
校验重定向的目标域名
如果使用编号来指定重定向目标的方法也行不通，那么就只能通过校验重定向目标来防止跳转至任意域名了。然而，由于该校验处理陷阱重重，因此推荐尽量使用上面两种方法。
首先我们来看一个校验 URL 的失败案例。
失败例 1
if (mb_ereg('example\.jp', $url)) {
  // 校验通过
该例子虽然确保了 URL 中包含 example.jp，但是还远远不够。比如，以下包含了 example.jp 的 URL 就成功通过了验证，并使攻击得以成功。
混过校验的 URL
http://trap.example.com/example.jp
.php
失败例 2
if (mb_ereg('^/', $url)) {
  // 校验通过
该例子确保了 URL 以 /
 开头。换言之，该校验的思路为，如果只允许指定相对 URL，就能杜绝重定向至外部域名。
但是，以下 URL 就能够通过该校验。
混过校验的 URL
//trap.example.com/47/47-900.php
以 //
 开头的 URL 被称为“网络路径引用”，这种形式的 URL 指定主机名（FQDN）以下的内容。也就是说，该校验无法完全禁止跳转至外部域名 42
 。
失败例 3
if (mb_ereg('^http://example\.jp/', $url)) {
  // 校验通过
第 3 个失败例的正则表达式使用前方一致匹配来确保 URL 以 http://example.jp
 开头。但是，如果仅进行该校验的话就有可能会招致 HTTP 消息头注入攻击。而通过 HTTP 消息头攻击，有时还能够重定向至其他域名，因此，该方法也不能完全杜绝自由重定向漏洞。
关于 HTTP 消息头注入的详情请参考下一小节。
推荐写法
if (mb_ereg('\Ahttps?://example\.jp/[-_.!~*\'();\/?:@&=+\$,%#a-zA-Z0-9]*\z', $url)) {
  // 校验通过
推荐写法中确保了 URL 以 http://example.jp/ 开头，并且还保证了后面仅包含能被用于 URL（URI）的字符。另外，如 4.2 节中讲述的一样，此处使用了 \A
 和 \z
 匹配字符串的开头和结尾。而正则表达式 https?
 则是为了能够同时匹配 http 和 https。