considered for performance reasons since a generator will have an upfront cost
to pay. The performance will be better if you are working with long lists or
sets.
Problematic code:
```python
list([0 for y in list(range(10))])  # [consider-using-generator]
tuple([0 for y in list(range(10))])  # [consider-using-generator]
sum([y**2 for y in list(range(10))])  # [consider-using-generator]
max([y**2 for y in list(range(10))])  # [consider-using-generator]
min([y**2 for y in list(range(10))])  # [consider-using-generator]
```
Correct code:
```python
list(0 for y in list(range(10)))
tuple(0 for y in list(range(10)))
sum(y**2 for y in list(range(10)))
max(y**2 for y in list(range(10)))
min(y**2 for y in list(range(10)))
```
# [Fix W1510: Using subprocess.run without explicitly set check is not recommended](https://pycodequ.al/docs/pylint-messages/w1510-subprocess-run-check.html)
The `run` call in the example will succeed whether the command is successful or
not. This is a problem because we silently ignore errors.
```python
import subprocess
def example():
    proc = subprocess.run("ls")
    return proc.stdout
```
When we pass `check=True`, the behavior changes towards raising an exception
when the return code of the command is non-zero.
# [Convert bytes to string](https://pythonexamples.org/python-bytes-to-string/)
```python
byte_var.decode("utf-8")
```
# [Use pipes with subprocess](https://stackoverflow.com/questions/13332268/how-to-use-subprocess-command-with-pipes)
To use pipes with subprocess you need to use the flag `shell=True` which is
[a bad idea](https://github.com/duo-labs/dlint/blob/master/docs/linters/DUO116.md).
Instead you should use two processes and link them together in python:
```python
ps = subprocess.Popen(("ps", "-A"), stdout=subprocess.PIPE)
output = subprocess.check_output(("grep", "process_name"), stdin=ps.stdout)
ps.wait()
```
# [Pass input to the stdin of a subprocess](https://stackoverflow.com/questions/8475290/how-do-i-write-to-a-python-subprocess-stdin)
```python
import subprocess
p = subprocess.run(["myapp"], input="data_to_write", text=True)
```
# [Copy and paste from clipboard](https://stackoverflow.com/questions/11063458/python-script-to-copy-text-to-clipboard)
You can use
[many libraries](https://www.delftstack.com/howto/python/python-copy-to-clipboard/)
to do it, but if you don't want to add any other dependencies you can use
`subprocess run`.
To copy from the `selection` clipboard, assuming you've got `xclip` installed,
you could do:
```python
subprocess.run(
    ["xclip", "-selection", "clipboard", "-i"],
    input="text to be copied",
    text=True,
    check=True,
)
```
To paste it:
```python
subprocess.check_output(["xclip", "-o", "-selection", "clipboard"]).decode("utf-8")
```
# [Create random number](https://www.pythoncentral.io/how-to-generate-a-random-number-in-python/)
```python
import random
a = random.randint(1, 10)
```
# [Check if local port is available or in use](https://stackoverflow.com/questions/43270868/verify-if-a-local-port-is-available-in-python)
Create a temporary socket and then try to bind to the port to see if it's
available. Close the socket after validating that the port is available.
```python
def port_in_use(port):
    """Test if a local port is used."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    with suppress(OSError):
        sock.bind(("0.0.0.0", port))
        return True
    sock.close()
    return False
```
# [Initialize a dataclass with kwargs](https://stackoverflow.com/questions/55099243/python3-dataclass-with-kwargsasterisk)
If you care about accessing attributes by name, or if you can't distinguish
between known and unknown arguments during initialisation, then your last resort
without rewriting `__init__` (which pretty much defeats the purpose of using
dataclasses in the first place) is writing a `@classmethod`:
```python
from dataclasses import dataclass
from inspect import signature
@dataclass
class Container:
    user_id: int
    body: str
    @classmethod
    def from_kwargs(cls, **kwargs):
        # fetch the constructor's signature
        cls_fields = {field for field in signature(cls).parameters}
        # split the kwargs into native ones and new ones
        native_args, new_args = {}, {}
        for key, value in kwargs.items():
            if key in cls_fields:
                native_args[key] = value
            else:
                new_args[key] = value
        # use the native ones to create the class ...
        ret = cls(**native_args)
        # ... and add the new ones by hand
        for new_key, new_value in new_args.items():
            setattr(ret, new_key, new_value)
        return ret
```
Usage:
```python
params = {"user_id": 1, "body": "foo", "bar": "baz", "amount": 10}
Container(**params)  # still doesn't work, raises a TypeError
c = Container.from_kwargs(**params)
print(c.bar)  # prints: 'baz'
```
# [Replace a substring of a string](https://www.w3schools.com/python/ref_string_replace.asp)
```python
txt = "I like bananas"
x = txt.replace("bananas", "apples")
```
# [Parse an RFC2822 date](https://stackoverflow.com/questions/1568856/how-do-i-convert-rfc822-to-a-python-datetime-object)
Interesting to test the accepted format of
[RSS dates](https://www.rssboard.org/rss-validator/docs/error/InvalidRFC2822Date.html).
```python
>>> from email.utils import parsedate_to_datetime
>>> datestr = 'Sun, 09 Mar 1997 13:45:00 -0500'
>>> parsedate_to_datetime(datestr)
datetime.datetime(1997, 3, 9, 13, 45, tzinfo=datetime.timezone(datetime.timedelta(-1, 68400)))
```
# [Convert a datetime to RFC2822](https://stackoverflow.com/questions/3453177/convert-python-datetime-to-rfc-2822)
Interesting as it's the accepted format of
[RSS dates](https://www.rssboard.org/rss-validator/docs/error/InvalidRFC2822Date.html).
```python
>>> import datetime
>>> from email import utils
>>> nowdt = datetime.datetime.now()
>>> utils.format_datetime(nowdt)
'Tue, 10 Feb 2020 10:06:53 -0000'
```
# [Encode url](https://www.urlencoder.io/python/)
```python
import urllib.parse
from pydantic import AnyHttpUrl
def _normalize_url(url: str) -> AnyHttpUrl:
    """Encode url to make it compatible with AnyHttpUrl."""
    return typing.cast(
        AnyHttpUrl,
        urllib.parse.quote(url, ":/"),
    )
```
The `:/` is needed when you try to parse urls that have the protocol, otherwise
`https://www.` gets transformed into `https%3A//www.`.
# [Fix SIM113 Use enumerate](https://github.com/MartinThoma/flake8-simplify/issues/18)
Use `enumerate` to get a running number over an iterable.
```python
# Bad
idx = 0
for el in iterable:
    ...
    idx += 1
# Good
for idx, el in enumerate(iterable):
    ...
```
# [Define a property of a class](https://stackoverflow.com/questions/128573/using-property-on-classmethods/64738850#64738850)
If you're using Python 3.9 or above you can directly use the decorators:
```python
class G:
    @classmethod
    @property
    def __doc__(cls):
        return f"A doc for {cls.__name__!r}"
```
If you're not, you can define the decorator `classproperty`:
```python
# N801: class name 'classproperty' should use CapWords convention, but it's a decorator.
# C0103: Class name "classproperty" doesn't conform to PascalCase naming style but it's
# a decorator.
class classproperty:  # noqa: N801, C0103
    """Define a class property.
    From Python 3.9 you can directly use the decorators directly.
    class G:
        @classmethod
        @property
        def __doc__(cls):
            return f'A doc for {cls.__name__!r}'
    """
    def __init__(self, function: Callable[..., Any]) -> None:
        """Initialize the decorator."""
        self.function = function
    # ANN401: Any not allowed in typings, but I don't know how to narrow the hints in
    # this case.
    def __get__(self, owner_self: Any, owner_cls: Any) -> Any:  # noqa: ANN401
        """Return the desired value."""
        return self.function(owner_self)
```
But you'll run into the
`W0143: Comparing against a callable, did you omit the parenthesis? (comparison-with-callable)`
mypy error when using it to compare the result of the property with anything, as
it doesn't detect it's a property instead of a method.
# [How to close a subprocess process](https://stackoverflow.com/questions/62172227/how-to-close-subprocess-in-python)
```python
subprocess.terminate()
```
# [How to extend a dictionary](https://stackoverflow.com/questions/577234/python-extend-for-a-dictionary)
```python
a.update(b)
```
# [How to Find Duplicates in a List in Python](https://datagy.io/python-list-duplicates/)
```python
numbers = [1, 2, 3, 2, 5, 3, 3, 5, 6, 3, 4, 5, 7]
duplicates = [number for number in numbers if numbers.count(number) > 1]
unique_duplicates = list(set(duplicates))
# Returns: [2, 3, 5]
```
If you want to count the number of occurrences of each duplicate, you can use:
```python
from collections import Counter
numbers = [1, 2, 3, 2, 5, 3, 3, 5, 6, 3, 4, 5, 7]
counts = dict(Counter(numbers))
duplicates = {key: value for key, value in counts.items() if value > 1}
# Returns: {2: 2, 3: 4, 5: 3}
```
To remove the duplicates use a combination of `list` and `set`:
```python
unique = list(set(numbers))
# Returns: [1, 2, 3, 4, 5, 6, 7]
```
# [How to decompress a gz file](https://stackoverflow.com/questions/31028815/how-to-unzip-gz-file-using-python)
```python
import gzip
import shutil
with gzip.open("file.txt.gz", "rb") as f_in:
    with open("file.txt", "wb") as f_out:
        shutil.copyfileobj(f_in, f_out)
```
# [How to compress/decompress a tar file](https://www.thepythoncode.com/article/compress-decompress-files-tarfile-python)
```python
def compress(tar_file, members):
    """
    Adds files (`members`) to a tar_file and compress it
    """
    tar = tarfile.open(tar_file, mode="w:gz")
    for member in members:
        tar.add(member)
    tar.close()
def decompress(tar_file, path, members=None):
    """
    Extracts `tar_file` and puts the `members` to `path`.
    If members is None, all members on `tar_file` will be extracted.
    """
    tar = tarfile.open(tar_file, mode="r:gz")
    if members is None:
        members = tar.getmembers()
    for member in members:
        tar.extract(member, path=path)
    tar.close()
```
# [Parse XML file with beautifulsoup](https://linuxhint.com/parse_xml_python_beautifulsoup/)
You need both `beautifulsoup4` and `lxml`:
```python
bs = BeautifulSoup(requests.get(url), "lxml")
```
# [Get a traceback from an exception](https://stackoverflow.com/questions/11414894/extract-traceback-info-from-an-exception-object)
```python
import traceback
# `e` is an exception object that you get from somewhere
traceback_str = "".join(traceback.format_tb(e.__traceback__))
```
# Change the logging level of a library
For example to change the logging level of the library `sh` use:
```python
sh_logger = logging.getLogger("sh")
sh_logger.setLevel(logging.WARN)
```
# [Get all subdirectories of a directory](https://stackoverflow.com/questions/973473/getting-a-list-of-all-subdirectories-in-the-current-directory)
```python
[x[0] for x in os.walk(directory)]
```
# [Move a file](https://stackoverflow.com/questions/8858008/how-to-move-a-file-in-python)
```python
import os
os.rename("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
```
# [IPv4 regular expression](https://stackoverflow.com/questions/55928637/regex-for-matching-ipv4-addresses)
```python
regex = re.compile(
    r"(?>> set([1,2,6,8]) - set([2,3,5,8])
set([1, 6])
```
Note, however, that sets do not preserve the order of elements, and cause any
duplicated elements to be removed. The elements also need to be hashable. If
these restrictions are tolerable, this may often be the simplest and highest
performance option.
# [Copy a directory](https://stackoverflow.com/questions/1868714/how-do-i-copy-an-entire-directory-of-files-into-an-existing-directory-using-pyth/22331852)
```python
import shutil
shutil.copytree("bar", "foo")
```
# [Copy a file](https://stackabuse.com/how-to-copy-a-file-in-python/)
```python
import shutil
shutil.copyfile(src_file, dest_file)
```
# [Capture the stdout of a function](https://stackoverflow.com/questions/16571150/how-to-capture-stdout-output-from-a-python-function-call)
```python
import io
from contextlib import redirect_stdout