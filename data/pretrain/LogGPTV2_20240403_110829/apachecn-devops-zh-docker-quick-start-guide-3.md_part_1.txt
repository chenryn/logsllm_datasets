# 三、创建 Docker 映像
在本章中，我们将学习如何创建企业级 Docker 映像。我们将从了解 Docker 映像的主要构建块开始，特别是 Docker 文件。然后，我们将探索在 Dockerfile 中可以使用的所有指令。有些说明表面上看起来很相似。我们将揭示`COPY`和`ADD`指令、`ENV`和`ARG`指令之间的区别，最重要的是`CMD`和`ENTRYPOINT`指令之间的区别。接下来，我们将了解构建上下文是什么，以及它为什么重要。最后，我们将介绍实际的映像构建命令。
If well-maintained, the average shipping container has a lifespan of around 20 years, whereas the average lifespan of a Docker container is 2.5 days. – [https://www.tintri.com/blog/2017/03/tintri-supports-containers-advanced-storage-features](https://www.tintri.com/blog/2017/03/tintri-supports-containers-advanced-storage-features)
在本章中，我们将涵盖以下主题:
*   什么是 Dockerfile？
*   可以在 Dockerfile 中使用的所有指令
*   何时使用`COPY`或`ADD`指令
*   `ENV`和`ARG`变量之间的差异
*   为什么使用`CMD`和`ENTRYPOINT`指令
*   构建上下文的重要性
*   使用 Docker 文件构建 Docker 映像
# 技术要求
您将从 Docker 的公共存储库中提取 Docker 映像，因此需要基本的互联网访问来执行本章中的示例。
本章的代码文件可以在 GitHub 上找到:
[https://github . com/PacktPublishing/Docker-快速启动-指南/树/主/章节 03](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter03)
查看以下视频，查看正在运行的代码:
[http://bit.ly/2rbHvwC](http://bit.ly/2rbHvwC)
# 什么是 Dockerfile？
您在[第 2 章](2.html)、*学习 docker 命令*中了解到，您可以运行 Docker 容器，对正在运行的容器进行修改，然后使用 docker commit 命令保存这些更改，从而有效地创建新的 Docker 映像。虽然这种方法有效，但它不是创建 Docker 容器的首选方法。创建 Docker 映像的最佳方式是将 Docker 映像构建命令与描述所需映像的 Docker 文件一起使用。
Dockerfile(是的，正确的拼写都是一个单词，大写 *D* )是一个文本文件，包含 Docker 守护程序用来创建 Docker 映像的指令。使用一种值对语法来定义指令。每个指令都有一个指令字，后跟该指令的参数。每个命令在 Dockerfile 中都有自己的行。虽然 Dockerfile 指令不区分大小写，但是有一个很好使用的约定，即指令字总是大写。
Dockerfile 中指令的顺序很重要。指令按顺序评估，从文件的顶部开始，到文件的底部结束。如果你回想一下[第 1 章](1.html)、*设置 Docker 开发环境*，Docker 映像是由层组成的。在 Docker 文件中找到的所有指令将导致在构建 Docker 映像时生成一个新层，但是，一些指令将只向创建的映像添加零字节大小的元数据层。因为保持 Docker 映像尽可能小是最佳实践，所以您将希望尽可能高效地使用创建非零字节大小的层的指令。在接下来的部分中，我们将注意到在哪里使用指令创建非零字节大小的层，以及如何最好地使用该指令来最小化层的数量和大小。另一个重要的考虑是指令的顺序。某些指令必须在其他指令之前使用，但是除了这些例外，您可以按照自己喜欢的任何顺序放置其他指令。最佳实践是使用在 Dockerfile 早期更改最少的指令，以及在 Dockerfile 后期更改更频繁的指令。原因是，当您需要重建映像时，唯一重建的图层是位于 Dockerfile 中第一行更改处或之后的图层。如果你还不明白这一点，不要担心，一旦我们看到一些例子，它会更有意义。
我们将在本节末尾回顾构建命令，但是我们将首先从 Dockerfile 可用的指令开始，从必须是 Dockerfile 中第一条指令的指令开始:`FROM`指令。
# “从”指令
每个 Dockerfile 必须有一个`FROM`指令，并且必须是文件中的第一个指令。(其实 ARG 指令可以用在`FROM`指令之前，但不是必选指令。我们将在 ARG 指令部分详细讨论这一点。)
`FROM`指令为正在创建的映像设置基础，并指示 Docker 守护程序新映像的基础应该是作为参数指定的现有 Docker 映像。可以使用我们在 [第 2 章](2.html)*学习 Docker 命令*中看到的相同语法来描述指定的映像。这里是`FROM`指令，指定使用版本为 1.15.2 的官方`nginx`映像:
```
# Dockerfile
FROM nginx:1.15.2
```
请注意，在此示例中，没有指定存储库来指示指定的映像是正式的 nginx 映像。如果没有指定标签，将采用`latest`标签。
`FROM`指令将在我们的新映像中创建第一层。该图层将是指令参数中指定的映像大小，因此最好指定满足新映像所需标准的最小映像。特定于应用的映像(如`nginx`)将比操作系统映像(如 ubuntu)小。此外，`alpine`的操作系统映像将比其他操作系统的映像小得多，例如 Ubuntu、CentOS 或 RHEL。有一个特殊的关键字可以作为`FROM`指令的参数。正是`scratch`。Scratch 不是一个可以拉取或运行的映像，它只是一个信号，告诉 Docker 守护程序您想要构建一个具有空基础映像层的映像。从头开始指令被用作许多其他基础映像或特定应用映像的基础层。你已经看到了这样一个专门的应用映像的例子:hello-world。hello-world 映像的完整 Dockerfile 如下所示:
```
# hello-world Dockerfile
FROM scratch
COPY hello /
CMD ["/hello"]
```
我们将很快讨论`COPY`和`CMD`指令，但是您应该会根据它的 Dockerfile 了解 hello-world 映像有多小。在 Docker 映像的世界里，越小越好。看一下一些图片的大小供参考:
![](img/3e91115f-6c8d-4634-8638-b0c8e051a85b.png)
# LABEL 指令
`LABEL`指令是向 Docker 映像添加元数据的一种方式。该指令将嵌入的键值对添加到映像中。`LABEL`指令在创建映像时向映像添加零字节大小的层。一个映像可以有多个`LABEL`，每个`LABEL`指令可以提供一个或多个标签。`LABEL`指令最常见的用途是提供有关映像维护者的信息。这个数据过去有自己的指令。参见以下提示框，了解现已弃用的`MAINTAINER`说明。以下是一些有效`LABEL`说明的例子:
```
# LABEL instruction syntax
# LABEL = = = ...
LABEL maintainer="Earl Waud "
LABEL "description"="My development Ubuntu image"
LABEL version="1.0"
LABEL label1="value1" \
 label2="value2" \
 lable3="value3"
LABEL my-multi-line-label="Labels can span \
more than one line in a Dockerfile."
LABEL support-email="PI:EMAIL" support-phone="(123) 456-7890"
```
`LABEL`指令是 Dockerfile 中可以多次使用的指令之一。您将在以后了解到，一些可以多次使用的指令将导致只有最后一次使用才是重要的，从而忽略所有以前的使用。`LABEL`指令不同。`LABEL`指令的每次使用都会给生成的映像添加一个附加标签。但是，如果`LABEL`的两次或多次使用具有相同的键，标签将获得最后匹配的`LABEL`指令中提供的值。看起来是这样的:
```
# earlier in the Dockerfile
LABEL version="1.0"
# later in the Dockerfile...
LABEL version="2.0"
# The Docker image metadata will show version="2.0"
```
重要的是要知道，您的`FROM`指令中指定的基础映像可能包括用`LABEL`指令创建的标签，并且它们将自动包含在您正在构建的映像的元数据中。如果 Dockerfile 中的`LABEL`指令与 FROM 映像的 Dockerfile 中的`LABEL`指令使用相同的键，则您的(稍后)值将覆盖 FROM 映像中的值。您可以使用`inspect`命令查看映像的所有标签:
![](img/c01d1aab-1110-46c5-9623-cad509812cc6.png)
The MAINTAINER instruction
There is a Dockerfile instruction specifically for providing the info about the image maintainer, however, this instruction has been deprecated. Still, you will probably see it used in a Dockerfile at some point. The syntax goes like this: `"maintainer": "Earl Waud "`.
# COPY 指令
您已经在*中显示的 hello-world Dockerfile 中看到了一个使用`COPY`指令的例子，FROM 指令*部分。`COPY`指令用于将文件和文件夹复制到正在构建的 Docker 映像中。`COPY`指令的语法如下:
```
# COPY instruction syntax
COPY [--chown=:] ... 
# Use double quotes for paths containing whitespace)
COPY [--chown=:] ["",... ""]
```
注意`--chown`参数只对基于 Linux 的容器有效。如果没有`--chown`参数，所有者标识和组标识都将设置为 0。
``或源是文件名或文件夹路径，被解释为与构建的上下文相关。我们将在本章的后面讨论构建上下文，但是现在，可以把它看作是运行构建命令的地方。来源可能包括通配符。
``或目标是正在创建的映像内部的文件名或路径。除非前面有`WORKDIR`指令，否则目标是相对于映像文件系统的根的。我们稍后将讨论`WORKDIR`指令，但现在，只需将其视为设置当前工作目录的一种方式。当 COPY 命令出现在 Dockerfile 中的`WORKDIR`指令之后时，被复制到映像中的文件或文件夹将被放置在相对于当前工作目录的目标中。如果目标包含包含一个或多个文件夹的路径，则所有文件夹都将被创建，如果它们还不存在的话。
在我们之前的 hello-world Dockerfile 示例中，您看到了一条`COPY`指令，该指令将一个名为`hello`的可执行文件复制到文件系统根位置的映像中。它看起来像这样:`COPY hello /`。这是可以使用的最基本的`COPY`指令。以下是其他一些例子:
```
# COPY instruction Dockerfile for Docker Quick Start
FROM alpine:latest
LABEL maintainer="Earl Waud "
LABEL version=1.0
# copy multiple files, creating the path "/theqsg/files" in the process
COPY file* theqsg/files/
# copy all of the contents of folder "folder1" to "/theqsg/" 
# (but not the folder "folder1" itself)
COPY folder1 theqsg/
# change the current working directory in the image to "/theqsg"
WORKDIR theqsg
# copy the file special1 into "/theqsg/special-files/"
COPY --chown=35:35 special1 special-files/
# return the current working directory to "/"
WORKDIR /
CMD ["sh"]
```
我们可以看到，使用前面的 Dockerfile，通过运行映像中的容器，并执行`ls`命令，结果映像的文件系统会得到什么，如下所示:
![](img/442d213e-eea8-4ca6-bee4-253d64e84aa5.png)
您可以看到目标路径中指定的文件夹是在复制过程中创建的。您还会注意到，提供`--chown`参数会在目标文件上设置所有者和组。一个重要的区别是，当源是文件夹时，复制的是文件夹的内容，而不是文件夹本身。请注意，使用`WORKDIR`指令改变映像文件系统中的路径，并且遵循`COPY`指令现在将相对于新的当前工作目录。在这个例子中，我们将当前的工作目录返回到`/`，这样在容器中执行的命令将相对于`/`运行。
# 加法指令
`ADD`指令用于将文件和文件夹复制到正在构建的 Docker 映像中。`ADD`指令的语法如下:
```
# ADD instruction syntax
ADD [--chown=:] ... 
# Use double quotes for paths containing whitespace)
ADD [--chown=:] ["",... ""]
```
大概现在你在想`ADD`指令好像和我们刚刚复习的`COPY`指令一模一样。你没有错。基本上，我们看到的`COPY`指令做的所有事情，`ADD`指令也能做。它使用与`COPY`指令相同的语法，并且`WORKDIR`指令的效果在两者之间是相同的。那么，为什么我们有两个命令做同样的事情呢？
# 复制和添加的区别