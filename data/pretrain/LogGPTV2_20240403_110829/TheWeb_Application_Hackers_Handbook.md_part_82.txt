probe for as a result?
5. While fuzzing a request for various categories of vulnerabilities, you
submit a single quotation mark within each request parameter in turn.
One of the results contains an HTTP 500 status code, indicating potential
SQL injection. You check the full contents of the message, which are as
follows:
Microsoft VBScript runtime error ‘800a000d’
Type mismatch: ‘ [string: “’”]’
/scripts/confirmOrder.asp, line 715
Is the application vulnerable?
cc1155..iinndddd 663311 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c15.indd V1 - 08/17/2011 Page 632
cc1155..iinndddd 663322 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c16.indd V2 - 08/16/2011 Page 633
CHAPTER
16
Attacking Native
Compiled Applications
Compiled software that runs in a native execution environment has historically
been plagued by vulnerabilities such as buffer overfl ows and format string bugs.
Most web applications are written using languages and platforms that run in a
managed execution environment in which these classic vulnerabilities do not
arise. One of the most signifi cant advantages of languages such as C# and Java
is that programmers do not need to worry about the kind of buffer manage-
ment and pointer arithmetic problems that have affected software developed
in native languages such as C and C++ and that have given rise to the majority
of critical bugs found in that software.
Nevertheless, you may occasionally encounter web applications that are writ-
ten in native code. Also, many applications written primarily using managed
code contain portions of native code or call external components that run in
an unmanaged context. Unless you know for certain that your target applica-
tion does not contain any native code, it is worth performing some basic tests
designed to uncover any classic vulnerabilities that may exist.
Web applications that run on hardware devices such as printers and switches
often contain some native code. Other likely targets include any page or script
whose name includes possible indicators of native code, such as dll or exe, and
any functionality known to call legacy external components, such as logging
mechanisms. If you believe that the application you are attacking contains
substantial amounts of native code, it may be desirable to test every piece of
633
cc1166..iinndddd 663333 88//1199//22001111 1122::1166::3355 PPMM
Stuttard c16.indd V2 - 08/16/2011 Page 634
634 Chapter 16 n Attacking Native Compiled Applications
user-supplied data processed by the application, including the names and values
of every parameter, cookie, request header, and other data.
This chapter covers three main categories of classic software vulnerability:
buffer overfl ows, integer vulnerabilities, and format string bugs. In each case,
we will describe some common vulnerabilities and then outline the practical
steps you can take when probing for these bugs within a web application. This
topic is huge and extends far beyond the scope of a book about hacking web
applications. To learn more about native software vulnerabilities and how to
fi nd them, we recommend the following books:
n TheShellcoder’s Handbook, 2nd Edition, by Chris Anley, John Heasman,
Felix Linder, and Gerardo Richarte (Wiley, 2007)
n TheArtofSoftwareSecurityAssessment by Mark Dowd, John McDonald,
and Justin Schuh (Addison-Wesley, 2006)
n GrayHatHacking, 2nd Edition, by Shon Harris, Allen Harper, Chris Eagle,
and Jonathan Ness (McGraw-Hill Osborne, 2008)
NOTE Remote probing for the vulnerabilities described in this chapter car-
ries a high risk of denial of service to the application. Unlike vulnerabilities
such as weak authentication and path traversal, the mere detection of classic
software vulnerabilities is likely to cause unhandled exceptions within the tar-
get application, which may cause it to stop functioning. If you intend to probe
a live application for these bugs, you must ensure that the application owner
accepts the risks associated with the testing before you begin.
Buffer Overfl ow Vulnerabilities
Buffer overfl ow vulnerabilities occur when an application copies user-controllable
data into a memory buffer that is not suffi ciently large to accommodate it. The
destination buffer is overfl owed, resulting in adjacent memory being overwritten
with the user’s data. Depending on the nature of the vulnerability, an attacker
may be able to exploit it to execute arbitrary code on the server or perform
other unauthorized actions. Buffer overfl ow vulnerabilities have been hugely
prevalent in native software over the years and have been widely regarded as
Public Enemy Number One that developers of such software need to avoid.
Stack Overfl ows
Buffer overfl ows typically arise when an application uses an unbounded copy
operation (such as strcpy in C) to copy a variable-size buffer into a fi xed-size
buffer without verifying that the fi xed-sized buffer is large enough. For example,
cc1166..iinndddd 663344 88//1199//22001111 1122::1166::3355 PPMM
34 Stuttard c16.indd V2 - 08/16/2011 Page 635
Chapter 16 n Attacking Native Compiled Applications 635
the following function copies the username string into a fi xed-size buffer allo-
cated on the stack:
bool CheckLogin(char* username, char* password)
{
char _username[32];
strcpy(_username, username);
...
If the username string contains more than 32 characters, the _username buffer
is overfl owed, and the attacker overwrites the data in adjacent memory.
In a stack-based buffer overfl ow, a successful exploit typically involves over-
writing the saved return address on the stack. When the CheckLogin function
is called, the processor pushes onto the stack the address of the instruction fol-
lowing the call. When CheckLogin is fi nished, the processor pops this address
back off the stack and returns execution to that instruction. In the meantime,
the CheckLogin function allocates the _username buffer on the stack right next
to the saved return address. If an attacker can overfl ow the _username buffer,
he can overwrite the saved return address with a value of his choosing, thereby
causing the processor to jump to this address and execute arbitrary code.
Heap Overfl ows
Heap-based buffer overfl ows essentially involve the same kind of unsafe opera-
tion as described previously, except that the overfl owed destination buffer is
allocated on the heap, not the stack:
bool CheckLogin(char* username, char* password)
{
char* _username = (char*) malloc(32);
strcpy(_username, username);
...
In a heap-based buffer overfl ow, what is typically adjacent to the destination
buffer is not any saved return address but other blocks of heap memory, sepa-
rated by heap control structures. The heap is implemented as a doubly linked
list: each block is preceded in memory by a control structure that contains the
size of the block, a pointer to the previous block on the heap, and a pointer to the
next block on the heap. When a heap buffer is overfl owed, the control structure
of an adjacent heap block is overwritten with user-controllable data.
This type of vulnerability is less straightforward to exploit than a stack-based
overfl ow, but a common approach is to write crafted values into the overwritten
heap control structure to cause an arbitrary overwrite of a critical pointer at some
future time. When the heap block whose control structure has been overwrit-
ten is freed from memory, the heap manager needs to update the linked list of
cc1166..iinndddd 663355 88//1199//22001111 1122::1166::3355 PPMM
Stuttard c16.indd V2 - 08/16/2011 Page 636
636 Chapter 16 n Attacking Native Compiled Applications
heap blocks. To do this, it needs to update the back link pointer of the following
heap block and update the forward link pointer of the preceding heap block so
that these two items in the linked list point to each other. To do this, the heap
manager uses the values in the overwritten control structure. Specifi cally, to
update the following block’s back link pointer, the heap manager dereferences
the forward link pointer taken from the overwritten control structure and writes
into the structure at this address the value of the back link pointer taken from
the overwritten control structure. In other words, it writes a user-controllable
value to a user-controllable address. If an attacker has crafted his overfl ow data
appropriately, he can overwrite any pointer in memory with a value of his choos-
ing, with the objective of seizing control of the path of execution and therefore
executing arbitrary code. Typical targets for the arbitrary pointer overwrite are
the value of a function pointer that the application will later call and the address
of an exception handler that will be invoked the next time an exception occurs.
NOTE Modern compilers and operating systems have implemented various
defenses to protect software against programming errors that lead to buffer
overfl ows. These defenses mean that real-world overfl ows today are gener-
ally more diffi cult to exploit than the examples described here. For further
information about these defenses and ways to circumvent them, see The
Shellcoder’s Handbook.
“Off-by-One” Vulnerabilities
A specifi c kind of overfl ow vulnerability arises when a programming error
enables an attacker to write a single byte (or a small number of bytes) beyond
the end of an allocated buffer.
Consider the following code, which allocates a buffer on the stack, performs a
counted buffer copy operation, and then null-terminates the destination string:
bool CheckLogin(char* username, char* password)
{
char _username[32];
int i;
for (i = 0; username[i] && i 
cc1166..iinndddd 663377 88//1199//22001111 1122::1166::3355 PPMM
Stuttard c16.indd V2 - 08/16/2011 Page 638
638 Chapter 16 n Attacking Native Compiled Applications
For some reason, this page was used throughout the application to process
all kinds of user input, much of which was sensitive. However, if 4096 or more
bytes of data were submitted, the returned form also contained the parameters
submitted by the previous request to the page, even if these were submitted by
a different user. For example:
POST /formRelay.cgi HTTP/1.0
Content-Length: 4096
a=bbbbbbbbbbbbb[lots more b’s]
HTTP/1.1 200 OK
Date: THU, 01 SEP 2011 14:58:31 GMT
Content-Type: text/html
Content-Length: 4598
Having identifi ed this vulnerability, it was possible to poll the vulnerable page
continuously with overlong data and parse the responses to log every piece of
data submitted to the page by other users. This included login credentials and
other sensitive information.
The root cause of the vulnerability was that the user-supplied data was
being stored as null-terminated strings within 4096-byte blocks of memory.
The data was copied in a checked operation, so no straight overfl ow was pos-
sible. However, if overlong input was submitted, the copy operation resulted
in the loss of the null terminator, so the string fl owed into the next data in
memory. Therefore, when the application parsed the request parameters, it
continued up until the next null byte and therefore included the parameters
supplied by another user.
cc1166..iinndddd 663388 88//1199//22001111 1122::1166::3355 PPMM
38 Stuttard c16.indd V2 - 08/16/2011 Page 639
Chapter 16 n Attacking Native Compiled Applications 639
Detecting Buffer Overfl ow Vulnerabilities
The basic methodology for detecting buffer overfl ow vulnerabilities is to send
long strings of data to an identifi ed target and monitor for anomalous results. In
some cases, subtle vulnerabilities exist that can be detected only by sending an
overlong string of a specifi c length, or within a small range of lengths. However,
in most cases vulnerabilities can be detected simply by sending a string that is
longer than the application is expecting.
Programmers commonly create fi xed-size buffers using round numbers in either
decimal or hexadecimal, such as 32, 100, 1024, 4096, and so on. A simple approach to
detecting any “low-hanging fruit” within the application is to send long strings as each
item of target data is identifi ed and to monitor the server’s responses for anomalies.
HACK STEPS
1. For each item of data being targeted, submit a range of long strings with
lengths somewhat longer than common buffer sizes. For example:
1100
4200
33000
2. Target one item of data at a time to maximize the coverage of code paths
within the application.
3. You can use the character blocks payload source in Burp Intruder to auto-
matically generate payloads of various sizes.
4. Monitor the application’s responses to identify any anomalies. An uncon-
trolled overflow is almost certain to cause an exception in the application.
Detecting when this has occurred in a remote process is difficult, but here
are some anomalous events to look for:
n An HTTP 500 status code or error message, where other malformed
(but not overlong) input does not have the same effect
n An informative message, indicating that a failure occurred in some
native code component
n A partial or malformed response is received from the server
n The TCP connection to the server closes abruptly without returning a
response
n The entire web application stops responding
5. Note that when a heap-based overflow is triggered, this may result in a
crash at some future point, rather than immediately. You may need to exper-
iment to identify one or more test cases that are causing heap corruption.
6. An off-by-one vulnerability may not cause a crash, but it may result in anom-
alous behavior such as unexpected data being returned by the application.
cc1166..iinndddd 663399 88//1199//22001111 1122::1166::3366 PPMM
Stuttard c16.indd V2 - 08/16/2011 Page 640
640 Chapter 16 n Attacking Native Compiled Applications
In some instances, your test cases may be blocked by input validation checks
implemented either within the application itself or by other components such
as the web server. This often occurs when overlong data is submitted within