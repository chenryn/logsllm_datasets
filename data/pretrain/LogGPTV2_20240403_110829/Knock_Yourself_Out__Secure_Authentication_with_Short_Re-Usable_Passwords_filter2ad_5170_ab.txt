r
i
t
y
σ
F
001
010
Fig. 1. Example password partition among eight subsets. As the number of
subsets increases, the list of colliding passwords becomes smaller.
partitions the set of all hexadecimal passwords of length four
into eight evenly sized subsets as indicated in Figure 1. For
example, Fσ maps the password (48D3)16 to the subset (001)2.
We use the output of F as the error correction information and
store it locally on a computer. Assume that Fσ maps passwords
randomly to each subset. It follows that the probability that
any password is in subset (001)2 is 1/8. The safety of F is
therefore the probability that a password other than (48D3)16
is not in that same subset, which is 1− 1/8 = 0.875. Assuming
that passwords are chosen uniformly at random, each subset
contains (164/23) = 8192 equally likely passwords. Therefore,
the security of F against an attacker with knowledge of F
and the subset (001)2 is 1 − 1/8192 ≈ 0.9999, even if the
adversary is unbounded.
There is a small catch, though. If Alice enters her password
incorrectly multiple times and her entries are pair-wise different
then safety decreases because the remaining number of incorrect
passwords not mapped to (001)2 decreases compared to the
number of incorrect passwords mapped to (001)2. This effect
compounds over multiple authentication sessions unless Alice
always makes the same errors. Therefore, KYO chooses a new
seed σ each time Alice enters her password correctly. This
renders authentication sessions independent of each other and
improves safety. In what follows, we explore these ideas further.
Particularly, we will use two instances of the sketched function
F , one for checking safety and another one to generate secrets.
A. KYO families
We require functions with certain properties for KYO. In this
section, we deﬁne these requirements. We begin by introducing
necessary terminology. Towards this end, let S = {0, 1}s, P =
{0, 1}n, L = {0, 1}(cid:96) with s ≥ n > (cid:96) be sets and let (Fσ)σ∈S
be a family of hash functions with
Fσ : P → L,
γ = Fσ(ρ).
We call ρ ∈ P password and σ ∈ S seed. We call γ ∈ L
(shared) secret if it is used for authentication purposes, or
digest if it is used for error detection. If there is no need for a
distinction between these two cases then we use the term digest
for both. Note that since we require that n > (cid:96), Fσ will be a
lossy function, that is, non-injective. Unless noted otherwise,
whenever we say that some element is chosen randomly from
some set, we mean that it is chosen uniformly at random from
that set and independent from any other values that might be
chosen from the same set at the same time.
pw pw-info
1
(σ1, γ1)
2
(σ2, γ2)
entry
Bob
Carol
Dave
pw seed
1
2
2
σA→B
σA→C
σA→D
Password table PW
Address book T
Fig. 2. Contents of Alice’s address book and password table for a shared
password ρ2 for Carol and Dave, and a separate password ρ1 for Bob.
Requirement 1 (Password selection). Given arbitrary pass-
words ρ1, . . . , ρN ∈ P , seeds σ1, . . . , σN ∈ S and digests
γ1, . . . , γN ∈ L with Fσi(ρi) = γi, there exists a password
ρ ∈ P with Fσi(ρ) (cid:54)= γi for all i = 1, . . . , N.
Requirement 2 (Seed selection 1). Given arbitrary passwords
ρ, ρ1, . . . , ρN ∈ P , there exists a seed σ ∈ S with Fσ(ρ) (cid:54)=
Fσ(ρi) for all i = 1, . . . , N.
Requirement 3 (Seed selection 2). Given an arbitrary pass-
word ρ ∈ P and a shared secret γ ∈ L, there exists a seed
σ ∈ S with Fσ(ρ) = γ.
We also require that there exist algorithms that compute
passwords and seeds according to these requirements. We do
not require that these algorithms are efﬁcient in a complexity-
theoretic sense but instead that running them is feasible for
practical choices of parameters. In Section IV-A, we show that
random sampling computes passwords and seeds with high
probability.
B. Data structures
The KYO password generator manages and generates secrets
based on a password table PW and an address book table T,
see Figure 2 for illustration. The password table keeps error
detection information on passwords, that is, a seed and digest
for each password. The address book contains records that
name the recipient (for example, a server), the index of the
associated password record in the password table, and a seed
speciﬁc to that recipient and the associated password. In what
follows, we describe how KYO implements common operations
such as verifying passwords, computing secrets, adding and
removing accounts, adding and changing passwords, et cetera.
C. Password creation and veriﬁcation
In order to create a new password entry in PW, Alice
ﬁrst selects a random password ρ ∈ P . If the password table
PW is still empty, she then selects a random seed σ ∈ S,
calculates γ := Fσ(ρ) and stores (σ1, γ1) := (σ, γ) in PW.
If PW is not empty then Alice selects a random ρ ∈ P that
meets requirement 1 and a random seed σ ∈ S that meets
requirement 2. Next, she calculates γ := Fσ(ρ) and stores
(σi, γi) := (σ, γ) with a fresh index i in PW. This ensures
that table PW satisﬁes the following constraint with a high
probability:
Constraint 1 (Confused passwords). Let ρi be Alice’s pass-
words. Table PW satisﬁes the confused passwords constraint
iff for all i and j:
Fσi(ρj) = γi ⇒ j = i.
Scheme 1 KYO secret derivation
procedure AUTH(Password ρ, Recipient R)
r := T[R].pw
(σcheck, γcheck) := PW[r].pw-info
σ := T[R].seed
if Fσcheck (ρ) = γcheck then
σ(cid:48) ←R S
PW[r].pw-info := (σ(cid:48), γ(cid:48))
(cid:46) fulﬁlling requirement 2
else
return Fσ(ρ)
return ⊥
(cid:46) shared secret derivation
(cid:46) report error and restart
In order to verify if a password ρ is the correct password
for entry i, Alice retrieves the entry (σi, γi) from PW and
tests whether Fσi (ρ) = γi. If so, we say that ρ veriﬁes under
(σi, γi). Constraint 1 ensures that each password veriﬁes under
only one entry (σi, γi) in PW, thus providing password safety.
D. Adding recipients and shared secret derivation
In order to add a recipient, say Bob, to the address book
T, Alice selects a random seed σ ∈ S and chooses a password
index i from PW. Alice then enters her password ρ. If ρ veriﬁes
under (σi, γi) then Alice stores the entry (cid:104)Bob, i, σ(cid:105) in T. She
ﬁnally transmits the shared secret γ := Fσ(ρ) to Bob who
will store it locally in order to verify Alice with it in the
future. Figure 2 shows Alice’s tables PW and T for our running
example of one password for Bob and a shared one for Carol
and Dave.
In order to derive a shared secret for recipient R, Alice
enters a password ρ and runs Algorithm AUTH(ρ, R) in
Scheme 1. Upon entering ρ, the algorithm tests if ρ veriﬁes
for recipient R. If the test fails then the algorithm fails and
Alice is assumed to have entered a wrong password. If the test
succeeds then the algorithms updates the corresponding entry
in PW and outputs a shared secret. As we show in Section IV,
the update of the entry in PW is important for the scheme’s
safety.
E. Changing passwords and shared secrets
Alice might want to change a secret she shares with Bob
without changing her password. This is not possible with
contemporary password generators but it is straightfoward in
KYO. Alice selects a new random seed σ ∈ S, calculates the
shared secret and informs the recipient of it’s new value.
Changing one’s password while keeping all shared secrets
the same is more involved. Let σi, γi with i ∈ I be the seeds
and shared secrets that are protected by password ρ (the seed
is taken from table T), that is, it holds that
∀i ∈ I : Fσi(ρ) = γi.
Alice chooses a new random password ρ(cid:48) ∈ P that satisﬁes
i ∈ S that
Constraint 1. Subsequently, she must ﬁnd seeds σ(cid:48)
fulﬁll the equation before. Requirement 3 states that it is
possible to ﬁnd such seed values. Once found, Alice replaces
the entry in PW with (σ(cid:48), Fσ(cid:48)(ρ(cid:48))) with a fresh selected seed
σ(cid:48) ∈ S and updates the entries of T with the found seeds σ(cid:48)
i.
4
In our evaluation in Section IV we show that it is not only
possible to ﬁnd these seeds σ(cid:48)
i but also that doing so does not
compromise security. We will call this scenario selected seeds,
because a seed is “selected” to ﬁt an independently chosen
password and shared secret.
F. Managing password sharing
Alice may use the same technique to transparently manage
groups, that is, the recipients for whom she uses the same
password, say ρ. In order to include someone in that group
with whom she shares secret γ, all she needs to do is ﬁnd an
additional σ so that Fσ(ρ) = γ.
In order to exclude someone from a group, she simply
chooses a new random password ρ(cid:48) that satisﬁes constraint 1
and ﬁnds a seed σ that satisﬁes Fσ(ρ(cid:48)) = γ. As before,
Requirements 1 and 3 ensure that this is possible.
G. Synchronizing shared secrets
In what we have seen so far, Bob stores the secret γ he
shares with Alice locally in order to be able to verify if a
client is indeed Alice. Instead of storing the secret explicitly,
Bob can protect γ using F in the same way Alice protects
her secrets. In order to do so he selects a random veriﬁcation
password ρv ∈ P and ﬁnds a veriﬁcation seed σv ∈ S so that
Fσv (ρv) = γ. Once found, he stores σv in a separate column
in his own address book T. The necessary Algorithm AUTHv
for this is basically the same as AUTH in Scheme 1, with the
symbols of seeds and digests substituted in the obvious manner.
Bob runs AUTHv(ρv, R) and accepts if the output is the same
as the shared secret he received from Alice.
If Bob had a password beforehand that he uses to authen-
ticate himself to Alice then Bob can keep his password and
synchronize the secret he shared with Alice with the secret
that Alice shared with him. Essentially, both Alice and Bob
choose passwords and seeds that map to the same secret. In this
fashion, Bob des not have to store two seeds for two secrets
both shared with Alice. Since passwords and shared secrets are
chosen randomly and independently of each other, this scenario
is essentially the same as the selected seeds scenario and
Requirement 3 ensures that it is possible to ﬁnd the necessary
seed values.
It is worth noting that if all participants used synchronized
secrets then an adversary would not be able to impersonate
anyone even if he had access to all KYO tables of everyone, as
we show in our evaluation. The downside is that synchronized
secrets link the security of the authentication of Bob and Alice.
This means that if an adversary ever learns the secret that Alice
uses to authenticate herself to Bob (for example, by breaking
into their communication channel) then the adversary cannot
only authenticate himself as Alice to Bob but also vice versa.
H. Summary of properties
By what we have described so far, it should be clear that
Alice is free to manage groups of users for whom she can
choose same or different passwords as a means of protecting
shared secrets. Furthermore, Alice is free to change passwords
and secrets as she pleases. Moreover, all communicating parties
can synchronize their seeds so that they can choose individual
passwords to manage mutually shared secrets for authentication
purposes. The use of shared secrets is not limited to online
communication, though. Since KYO does not require a feedback
channel, communicating parties may use their shared secrets
for other purposes as well, for example, for the purpose of
authenticating electronic mail. It is important to note, though,
that the shared secret is short by design and, hence, the
authentication scheme must be designed carefully to account
for this property.
IV. EVALUATION
In this section we analyze KYO mathematically based on
the assumption that F is a random hash function. This implies
that |S| = |L||P|. We update our deﬁnition of KYO families
from Section III-A accordingly as follows:
Deﬁnition 1 (KYO family). Let F be the set of all functions
mapping P to L and let S be an index set enumerating them.
Then (Fσ)σ∈S is called a KYO(n, s, (cid:96))-Family.
The deﬁnition implies that Fσ is selected randomly from
F given a random seed σ. For growing P and L, the length of
a seed quickly exceeds what is feasibly processed and stored
on a computer. In practice, we will therefore work with index
sets that are much smaller. This is unproblematic as long as
the number of recipients per password is small compared to 2s.
This is because the distribution over random samples of the
indexes has the same mathematical expectation as F . Therefore,
we just need “enough” indexes so that F meets the requirements
we introduced in Section III-A. The analysis and the proofs
are simpler in the case of a random hash function, though. We
have proven corresponding lemmas and theorems for random
index subsets as well but presenting them here while meeting
the page limit would render the presentation unreadable.
In what follows, we show that KYO families meet the
requirements we put forward in Section III-A. For ease of
reading we only state the results in this section and give the
proofs in Appendix A. Subsequently, we analyze the safety of
KYO families followed by an analysis of the security of KYO
families.
A. KYO generator properties
For a given ρ ∈ {0, 1}n and σ,∈ {0, 1}s, we denote the
set of passwords that map to γ under σ with
σ (γ) := {ρ(cid:48) ∈ P | Fσ(ρ(cid:48)) = γ} .
F −1
We now show that a KYO family meets Requirements 1
and 2 and 3 with high probability. The following lemmas state
that random sampling is sufﬁcient to achieve safety with high
probability.
Lemma 1 (Password creation). If the password table PW
already contains N passwords, the number of random tries to
ﬁnd the (N + 1)-th password is geometrically distributed with
average value (1 − N · 2−(cid:96))−1.
Lemma 2 (Seed selection 1). For N − 1 given passwords, a
randomly chosen seed σ meets Requirement 2 with probability
(1 − 2−(cid:96))N−1.
5
that KYO does not allow unsuccessful authentication attempts,
that is, an attacker has only one try to predict the target secret.
If Alice re-uses the target password for N − 1 other recipients
then an adversary may try to authenticate to each of them to
learn information about the target password. In order to simplify
this part of our analysis we assume that an adversary is then
given the secrets of those N − 1 recipients. From here on, we
assume that K contains the following types of information:
• The contents of Alice’s address book,
• a set of passwords,
• a set of shared secrets other than the target, and
• whether any shared secrets are selected.