## CVE-2019-9787: Unauthenticated CSRF to XSS
由于在Web应用程序中未验证的错误影响最大，因此我们将重点放在未验证功能的漏洞挖掘上。最明显的功能是WordPress的评论功能。任何用户都可以在博客文章中添加评论，甚至可以在评论字符串中包含一些非常基本的HTML标签和属性设置。
### 抽象划分评论功能
我们首先将评论功能分解为一系列组件，在WordPress网站上创建评论时，用户输入将经过  
多个组件处理。
  1. 首先针对XSS攻击进行过滤（XSS过滤组件）
  2. 然后针对SEO进行优化（SEO组件）
  3. 然后存储在数据库中（数据库组件）
  4. 用户查看评论时，从数据库中获取并再次修改（优化组件）
  5. 嵌入到模板渲染出HTML页面（主题组件）
通过将评论功能抽象细分为一系列组件，我们能够快速确定应该花时间在哪些地方来尝试挖掘弱点。我们假设经过多年改进后的【XSS过滤组件】已经足够安全了，所以我们最简单的挖掘漏洞方法是在过滤后的评论字符串中找到一个【修改评论组件】的错误点。由于修改是在【评论创建功能】第二步中针对SEO进行优化才会执行的，且在第四步嵌入HTML标记之前已经被修改。因此我们决定研究这两个相关组件。我们很快注意到第四个组件把评论嵌入到HTML页面之前，并未对评论字符串进行很大的改动以确保不会出现XSS缺陷。因此，我们决定在上游的【SEO优化组件】中寻找弱点。
### SEO优化组件中过滤bypass
过滤后的评论传入组件，其将字符串中的``标签都进行了SEO进行优化，通过将``标签的属性字符串(`href="＃" title="some
link" rel="nofollow"`)解析为关联数组（以下代码段的3004行）来完成的，此处的key是属性的名称value是属性值。
然后，WordPress检查是否设置了rel属性。如果有就进行处理，并将``标签与新的rel属性拼接到一起。
缺陷出现在上述代码片段的第3017和3018行中，这些属性值在没有处理的情况下被拼接在一起。
攻击者可以创建一个包含精心制作的``标签的评论，并将锚点的`title`属性设置为`title='XSS" onmouseover=alert(1)
id="'`。这是有效的HTML属性，并原样走出了过滤步骤。但是，这能够作用仅仅因为精心制作的标题标签使用了单引号。当属性被拼接到一起时，title属性的值是用双引号包裹的（第3018行）。这意味着攻击者可以通过注入额外的双引号来提前关闭title属性然后注入其他HTML属性。
让我们看下面的示例：传入``过滤后将还是``。由于已经通过了过滤步骤，因此注入的onmouseover事件会原样存储在数据库中并没删除。这个切入点使我们可以将任意HTML属性注入评论字符串中，而我们只需要弄清楚如何触它就行了。
### 局限性和漏洞链
我们发现WordPress的【SEO优化组件】存在一个弱点，它是评论创建功能的一部分。但我们意识到仅当可以在的HTML标签中设置rel属性时才会触发这个组件处理的错误。大家认为这有个毛用，因为WordPress的【过滤组件】中实际上不允许设置rel属性，而会将其从用户提交的评论中删除，所以在【SEO优化组件】中发现的弱点这辈子可能都不会触发。因此这可能是这个弱点从来没有报出来过的原因。
利用此弱点的唯一方法是找到另一个漏洞，该漏洞要能让我们设置标签的rel属性。我们的假设这个洞是存在的，因此我们可能要在相同的功能中查找类似错误，这样看，我们就可以将需要审计的组件范围再次缩小。
最终我们认为，成功几率最大的是在WordPress的复杂的XSS过滤组件中找到一个弱点。由于我们只要能注入看起来无害的rel属性，因此不需要针对WordPress的XSS过滤器进行完全绕过。此外我们确切地知道了我们在尝试什么内容的绕过。如果其他研究人员没有专门寻找因允许注入rel属性造成的错误，那么我们就绝不会撞洞了。
## 评论中的CSRF漏洞
当寻找设置rel属性的bypass的方式时，我们分析了何时以及如何触发针对特定属性的XSS过滤器进行bypass。之后却发现，对于特定的评论其实可以绕过rel属性的过滤器。我们可以通过CSRF漏洞（恶意利用WordPress的引用功能）创建一个过滤器不处理的评论。
当用户发布新评论时，WordPress不会执行CSRF验证。这是因为，进行输入验证时某些WordPress功能（如引用和pingback）将中断。那么攻击者就可以通过CSRF攻击方式，诱导管理员创建一个评论。由于管理员可以在评论中使用任意HTML标签，甚至``标签，这就成为了一个可利用的安全问题。理论上讲，攻击者可以简单地利用CSRF漏洞来使管理员创建一个包含恶意JavaScript代码的评论。
WordPress试图通过在评论表单中为管理员生成一个额外的nonce值来修复此问题。当管理员提交评论并提供有效的nonce随机数时，将在不进行任何清理的情况下创建评论。如果随机数无效，仍会创建注释只是注入内容会被清除。
以下代码段显示了如何在WordPress核心中进行处理：
自2009年就从没有为评论表单实施CSRF保护，并且我们发现管理员清理过程中存在逻辑缺陷。如上面的代码片段所示，评论始终使用`wp_filter_kses()`进行清理，除非创建的用户是具有`unfiltered_html`功能的管理员。此时如果并且没有提供有效的nonce随机数，则使用`wp_filter_post_kses()`清理评论（上述代码段的3242行）。
`wp_filter_post_kses()`和`wp_filter_kses()`之间的区别在于它们的严格性。这两个函数都接受未过滤的评论，并且在字符串中仅保留固定的某些HTML标签和属性。通常评论使用`wp_filter_kses()`进行清理，该`wp_filter_kses()`仅允许使用非常基本的HTML标签和属性，例如``标记与`href`属性结合使用。
这使攻击者在创建评论，其中所包含的HTML标签和属性比通常评论中要多得多。尽管`wp_filter_post_kses()`的通融性要高得多，但它仍然删除了可能导致跨站点脚本漏洞的所有HTML标签和属性。
但是重要的区别是`wp_filter_post_kses()`允许设置rel标签。最终我们就可以通过CSRF缺陷，使用这个特性来注入rel属性。
### 影响和局限性
通过将在评论字符串中设置rel属性的CSRF缺陷，与导致任意HTML属性注入的SEO优化组件中的缺陷相结合，攻击者可以创建有效的存储型XSS评论。该漏洞要求在目标WordPress网站上启用评论功能，而默认情况下它就是启用的。
为了将exp升级到远程执行代码的层面，可以利用另一个缺陷。显示新创建的评论的页面未受`X-Frame-Options`头的保护。这意味着，当攻击者可以诱骗管理员访问触发CSRF漏洞的网站时，他可以在页面背景中创建隐藏的`iframe`页面来渲染评论并立即执行其中包含的JavaScript代码。