### Title: Directed Fuzzing and Use-After-Free: Uncovering Complex and Silent Bugs

Fuzzing is a widely recognized and effective automated method for detecting vulnerabilities in software. Directed fuzzing, in particular, focuses on testing specific parts of the code by leveraging additional information such as bug stack traces or patches. This approach is especially useful for bug reproduction and patch-oriented testing.

While recent fuzzing techniques have been highly successful, they often fall short when it comes to detecting Use-After-Free (UAF) vulnerabilities. UAFs occur when deallocated memory is reused through a dangling pointer, leading to potential data corruption, information leaks, or denial of service. Despite their severity, UAFs represented only 1% of issues found by OSS-Fuzz in 2017.

Fuzzing UAFs is challenging for two primary reasons:
1. **Complexity**: UAF bugs require inputs that cover a sequence of three eventsâ€”allocation, deallocation, and use.
2. **Silence**: UAF bugs often do not cause immediate crashes, making them difficult to detect.

The straightforward solution of pairing fuzzing with memory sanitizers like Valgrind is impractical due to the significant runtime overhead. To address this, we introduce UAFuzz, the first binary-level directed greybox fuzzer specifically designed for UAF bugs.

**Key Features of UAFuzz:**
- **Tailored Fuzzing Engine**: Adapted standard fuzzing components (seed selection, distance metric, and power schedule) to suit the unique characteristics of UAFs.
- **Lightweight Code Instrumentation**: Minimizes performance impact while providing necessary visibility into memory operations.
- **Efficient Bug Triage**: Filters generated inputs to send only a fraction to the sanitizer for confirmation, reducing the overall runtime overhead.

Our technique is built on top of AFL-QEMU and Valgrind, and it outperforms state-of-the-art directed fuzzers (AFLGO and Hawkeye) in terms of bug reproduction, detection rate, and time-to-exposure. Additionally, UAFuzz has proven effective in patch-oriented testing, leading to the discovery of 30 new bugs, 7 CVEs, and 4 buggy patches.

This presentation will be the first at Black Hat to focus specifically on directed fuzzing and UAF vulnerabilities. We will also publicly release our UAF fuzzing benchmark and the UAFuzz tool to support further research and development in this critical area.