---
author: Seth Kenlon
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2781
date: '2020-11-30 12:46:00'
editorchoice: false
excerpt: 四处奔跑躲避敌人是一回事，反击敌人是另一回事。学习如何在这系列的第十二篇文章中在 Pygame 中创建平台游戏。
fromurl: https://opensource.com/article/20/9/add-throwing-python-game
id: 12872
islctt: true
largepic: /data/attachment/album/202011/30/124457xcj9mztw9kx9c7zj.jpg
permalink: /article-12872-1.html
pic: /data/attachment/album/202011/30/124457xcj9mztw9kx9c7zj.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11839
- displayorder: 0
  raid: 12877
reviewer: wxy
selector: lujun9972
summary: 四处奔跑躲避敌人是一回事，反击敌人是另一回事。学习如何在这系列的第十二篇文章中在 Pygame 中创建平台游戏。
tags:
- Pygame
thumb: false
title: 在你的 Python 游戏中添加投掷机制
titlepic: true
translator: robsean
updated: '2020-11-30 12:46:00'
---
> 
> 四处奔跑躲避敌人是一回事，反击敌人是另一回事。学习如何在这系列的第十二篇文章中在 Pygame 中创建平台游戏。
> 
> 
> 
![](/data/attachment/album/202011/30/124457xcj9mztw9kx9c7zj.jpg)
这是仍在进行中的关于使用 [Pygame](https://www.pygame.org/news) 模块在 [Python 3](https://www.python.org/) 中创建电脑游戏的第十二部分。先前的文章是：
1. [通过构建一个简单的掷骰子游戏去学习怎么用 Python 编程](/article-9071-1.html)
2. [使用 Python 和 Pygame 模块构建一个游戏框架](/article-10850-1.html)
3. [如何在你的 Python 游戏中添加一个玩家](/article-10858-1.html)
4. [用 Pygame 使你的游戏角色移动起来](/article-10874-1.html)
5. [如何向你的 Python 游戏中添加一个敌人](/article-10883-1.html)
6. [在 Pygame 游戏中放置平台](/article-10902-1.html)
7. [在你的 Python 游戏中模拟引力](/article-11780-1.html)
8. [为你的 Python 平台类游戏添加跳跃功能](/article-11790-1.html)
9. [使你的 Python 游戏玩家能够向前和向后跑](/article-11819-1.html)
10. [在你的 Python 平台类游戏中放一些奖励](/article-11828-1.html)
11. [添加计分到你的 Python 游戏](/article-11839-1.html)
我的上一篇文章本来是这一系列文章的最后一篇，它鼓励你为这个游戏编写自己的附加程序。你们很多人都这么做了！我收到了一些电子邮件，要求帮助我还没有涵盖的常用机制：战斗。毕竟，跳起来躲避坏人是一回事，但是有时候让他们走开是一件非常令人满意的事。在电脑游戏中向你的敌人投掷一些物品是很常见的，不管是一个火球、一支箭、一道闪电，还是其它适合游戏的东西。
与迄今为止你在这个系列中为你的平台游戏编程的任何东西不同，可投掷物品有一个*生存时间*。在你投掷一个物品后，它会如期在移动一段距离后消失。如果它是一支箭或其它类似的东西，它可能会在通过屏幕的边缘时而消失。如果它是一个火球或一道闪电，它可能会在一段时间后熄灭。
这意味着每次生成一个可投掷的物品时，也必须生成一个独特的衡量其生存时间的标准。为了介绍这个概念，这篇文章演示如何一次只投掷一个物品。（换句话说，每次仅存在一个投掷物品）。 一方面，这是一个游戏的限制条件，但另一方面，它却是游戏本身的运行机制。你的玩家不能每次同时投掷 50 个火球，因为每次仅允许一个投掷物品，所以当你的玩家释放一个火球来尝试击中一名敌人就成为了一项挑战。而在幕后，这也使你的代码保持简单。
如果你想启用每次投掷多个项目，在完成这篇教程后，通过学习这篇教程所获取的知识来挑战你自己。
### 创建 Throwable 类
如果你跟随学习这系列的其它文章，那么你应该熟悉在屏幕上生成一个新的对象基础的 `__init__` 函数。这和你用来生成你的 [玩家](/article-10858-1.html) 和 [敌人](/article-10883-1.html) 的函数是一样的。这里是生成一个 `throwable` 对象的 `__init__` 函数来：
```
class Throwable(pygame.sprite.Sprite):
    """
    生成一个 throwable 对象
    """
    def __init__(self, x, y, img, throw):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join('images',img))
        self.image.convert_alpha()
        self.image.set_colorkey(ALPHA)
        self.rect   = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.firing = throw
```
同你的 `Player` 类或 `Enemy` 类的 `__init__` 函数相比，这个函数的主要区别是，它有一个 `self.firing` 变量。这个变量保持跟踪一个投掷的物品是否在当前屏幕上活动，因此当一个 `throwable` 对象创建时，将变量设置为 `1` 的合乎情理的。
### 判断存活时间
接下来，就像使用 `Player` 和 `Enemy` 一样，你需要一个 `update` 函数，以便投掷的物品在瞄准敌人抛向空中时，它会自己移动。
测定一个投掷的物品存活时间的最简单方法是侦测它何时离开屏幕。你需要监视的屏幕边缘取决于你投掷的物品的物理特性。
* 如果你的玩家正在投掷的物品是沿着水平轴快速移动的，像一只弩箭或箭或一股非常快的魔法力量，而你想监视你游戏屏幕的水平轴极限。这可以通过 `worldx` 定义。
* 如果你的玩家正在投掷的物品是沿着垂直方向或同时沿着水平方向和垂直方向移动的，那么你必须监视你游戏屏幕的垂直轴极限。这可以通过 `worldy` 定义。
这个示例假设你投掷的物品向前移动一点并最终落到地面上。不过，投掷的物品不会从地面上反弹起来，而是继续掉落出屏幕。你可以尝试不同的设置来看看什么最适合你的游戏：
```
    def update(self,worldy):
        '''
        投掷物理学
        '''
        if self.rect.y ][17].
import pygame
import pygame.freetype
import sys
import os
'''
变量
'''
worldx = 960
worldy = 720
fps = 40
ani = 4
world = pygame.display.set_mode([worldx, worldy])
forwardx  = 600
backwardx = 120
BLUE = (80, 80, 155)
BLACK = (23, 23, 23)
WHITE = (254, 254, 254)
ALPHA = (0, 255, 0)
tx = 64
ty = 64
font_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "fonts", "amazdoom.ttf")
font_size = tx
pygame.freetype.init()
myfont = pygame.freetype.Font(font_path, font_size)
'''
对象
'''
def stats(score, health):
    myfont.render_to(world, (4, 4), "Score:"+str(score), BLUE, None, size=64)
    myfont.render_to(world, (4, 72), "Health:"+str(health), BLUE, None, size=64)