title:WireGuard: Next Generation Kernel Network Tunnel
author:Jason A. Donenfeld
WireGuard: Next Generation Kernel Network Tunnel
Jason A. Donenfeld
PI:EMAIL
Abstract—WireGuard is a secure network tunnel, operating
at layer 3, implemented as a kernel virtual network interface for
Linux, which aims to replace both IPsec for most use cases, as well
as popular user space and/or TLS-based solutions like OpenVPN,
while being more secure, more performant, and easier to use.
The virtual tunnel interface is based on a proposed fundamental
principle of secure tunnels: an association between a peer public
key and a tunnel source IP address. It uses a single round trip
key exchange, based on NoiseIK, and handles all session creation
transparently to the user using a novel timer state machine
mechanism. Short pre-shared static keys—Curve25519 points—
are used for mutual authentication in the style of OpenSSH. The
protocol provides strong perfect forward secrecy in addition to a
high degree of identity hiding. Transport speed is accomplished
using ChaCha20Poly1305 authenticated-encryption for encapsu-
lation of packets in UDP. An improved take on IP-binding cookies
is used for mitigating denial of service attacks, improving greatly
on IKEv2 and DTLS’s cookie mechanisms to add encryption
and authentication. The overall design allows for allocating no
resources in response to received packets, and from a systems
perspective, there are multiple interesting Linux implementation
techniques for queues and parallelism. Finally, WireGuard can
be simply implemented for Linux in less than 4,000 lines of code,
making it easily audited and veriﬁed.
I.
Introduction & Motivation
In Linux, the standard solution for encrypted tunnels is
IPsec, which uses the Linux transform (“xfrm”) layer. Users
ﬁll in a kernel structure determining which ciphersuite and
key, or other transforms such as compression, to use for which
selector of packets traversing the subsystem. Generally a user
space daemon is responsible for updating these data structures
based on the results of a key exchange, generally done with
IKEv2 [12], itself a complicated protocol with much choice
and malleability. The complexity, as well as the sheer amount
of code, of this solution is considerable. Administrators have
a completely separate set of ﬁrewalling semantics and secure
labeling for IPsec packets. While separating the key exchange
layer from the transport encryption—or transformation—layer
is a wise separation from a semantic viewpoint, and similarly
while separating the transformation layer from the interface
layer is correct from a networking viewpoint, this strictly correct
layering approach increases complexity and makes correct
implementation and deployment prohibitive.
WireGuard does away with these layering separations.
Instead of the complexity of IPsec and the xfrm layers,
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without  the  prior  written  consent  of  the  Internet  Society  or  the  ﬁrst-named 
author (for reproduction of an entire paper only).
NDSS ’17, 26 February – 1 March 2017, San Diego, CA, USA
Copyright 2017 Internet Society, ISBN 1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23160
Permanent ID:  4846ada1492f5d92198df154f48c3d54205657bc
WireGuard simply gives a virtual interface—wg0 for example—
which can then be administered using the standard ip(8) and
ifconfig(8) utilities. After conﬁguring the interface with a
private key (and optionally a pre-shared symmetric key as
explained in section V-B) and the various public keys of
peers with whom it will communicate securely, the tunnel
simply works. Key exchanges, connections, disconnections,
reconnections, discovery, and so forth happen behind the
scenes transparently and reliably, and the administrator does
not need to worry about these details. In other words, from the
perspective of administration, the WireGuard interface appears
to be stateless. Firewall rules can then be conﬁgured using
the ordinary infrastructure for ﬁrewalling interfaces, with the
guarantee that packets coming from a WireGuard interface will
be authenticated and encrypted. Simple and straightforward,
WireGuard is much less prone to catastrophic failure and
misconﬁguration than IPsec. It is important to stress, however,
that the layering of IPsec is correct and sound; everything
is in the right place with IPsec, to academic perfection. But,
as often happens with correctness of abstraction, there is a
profound lack of usability, and a veriﬁably safe implementation
is very diﬃcult to achieve. WireGuard, in contrast, starts from
the basis of ﬂawed layering violations and then attempts to
rectify the issues arising from this conﬂation using practical
engineering solutions and cryptographic techniques that solve
real world problems.
On the other end of the spectrum is OpenVPN, a user space
TUN/TAP based solution that uses TLS. By virtue of it being in
user space, it has very poor performance—since packets must
be copied multiple times between kernel space and user space—
and a long-lived daemon is required; OpenVPN appears far
from stateless to an administrator. While TUN/TAP interfaces
(say, tun0) have similar wg0-like beneﬁts as described above,
OpenVPN is also enormously complex, supporting the entire
plethora of TLS functionality, which exposes quite a bit of code
to potential vulnerabilities. OpenVPN is right to be implemented
in user space, since ASN.1 and x509 parsers in the kernel have
historically been quite problematic (CVE-2008-1673, CVE-
2016-2053), and adding a TLS stack would only make that
issue worse. TLS also brings with it an enormous state machine,
as well as a less clear association between source IP addresses
and public keys.
For key distribution, WireGuard draws inspiration from
OpenSSH, for which common uses include a very simple
approach toward key management. Through a diverse set of
out-of-band mechanisms, two peers generally exchange their
static public keys. Sometimes it is simple as PGP-signed email,
and other times it is a complicated key distribution mechanism
using LDAP and certiﬁcate authorities. Importantly, for the most
part OpenSSH key distribution is entirely agnostic. WireGuard
follows suit. Two WireGuard peers exchange their public keys
through some unspeciﬁed mechanism, and afterward they are
able to communicate. In other words, WireGuard’s attitude
toward key distribution is that this is the wrong layer to address
that particular problem, and so the interface is simple enough
that any key distribution solution can be used with it. As an
additional advantage, public keys are only 32 bytes long and
can be easily represented in Base64 encoding in 44 characters,
which is useful for transferring keys through a variety of
diﬀerent mediums.
Finally, WireGuard is cryptographically opinionated. It
intentionally lacks cipher and protocol agility. If holes are
found in the underlying primitives, all endpoints will be
required to update. As shown by the continuing torrent of
SSL/TLS vulnerabilities, cipher agility increases complexity
monumentally. WireGuard uses a variant of Trevor Perin’s
Noise [22]—which during its development received quite a bit
of input from the authors of this paper for the purposes of
being used in WireGuard—for a 1-RTT key exchange, with
Curve25519 [6] for ECDH, HKDF [15] for expansion of ECDH
results, RFC7539 [16]’s construction of ChaCha20 [7] and
Poly1305 [5] for authenticated encryption, and BLAKE2s [2]
for hashing. It has built-in protection against denial of service
attacks, using a new crypto-cookie mechanism for IP address
attributability.
Similarly opinionated, WireGuard is layer 3-only; as ex-
plained below in section II, this is the cleanest approach for
ensuring authenticity and attributability of the packets. The
authors believe that layer 3 is the correct way for bridging
multiple IP networks, and the imposition of this onto WireGuard
allows for many simpliﬁcations, resulting in a cleaner and more
easily implemented protocol. It supports layer 3 for both IPv4
and IPv6, and can encapsulate v4-in-v6 as well as v6-in-v4.
WireGuard puts together these principles, focusing on
simplicity and an auditable codebase, while still being extremely
high-speed and suitable for a modicum of environments. By
combining the key exchange and the layer 3 transport encryption
into one mechanism and using a virtual interface rather than a
transform layer, WireGuard indeed breaks traditional layering
principles, in pursuit of a solid engineering solution that is both
more practical and more secure. Along the way, it employs
several novel cryptographic and systems solutions to achieve
its goals.
II. Cryptokey Routing
The fundamental principle of a secure VPN is an association
between peers and the IP addresses each is allowed to use as
source IPs. In WireGuard, peers are identiﬁed strictly by their
public key, a 32-byte Curve25519 point. This means that there
is a simple association mapping between public keys and a
set of allowed IP addresses. Examine the following cryptokey
routing table:
UDP Port
8746
2
Interface Public Key
HIgo...8ykw
Peer Public Key
xTIB...p8Dg
TrMv...WXX0
gN65...z6EA
Conﬁguration 1a
Private Key
yAnz...fBmk
Allowed IPs
10.192.122.3/32,
10.192.124.0/24
10.192.122.4/32,
192.168.0.0/16
10.10.10.230/32
The interface itself has a private key and a UDP port on
which it listens (more on that later), followed by a list of peers.
Each peer is identiﬁed by its public key. Each then has a list
of allowed source IPs.
When an outgoing packet is being transmitted on a Wire-
Guard interface, wg0, this table is consulted to determine which
public key to use for encryption. For example, a packet with
a destination IP of 10.192.122.4 will be encrypted using
the secure session derived from the public key TrMv...WXX0.
Conversely, when wg0 receives an encrypted packet, after
decrypting and authenticating it, it will only accept it if its
source IP resolves in the table to the public key used in the
secure session for decrypting it. For example, if a packet is
decrypted from xTIB...qp8D, it will only be allowed if the
decrypted packet has a source IP of 10.192.122.3 or in the
range of 10.192.124.0 to 10.192.124.255; otherwise it is
dropped.
With this very simple principle, administrators can rely
on simple ﬁrewall rules. For example, an incoming packet
on interface wg0 with a source IP of 10.10.10.230 may be
considered as authentically from the peer with a public key
of gN65...Bz6E. More generally, any packets arriving on a
WireGuard interface will have a reliably authentic source IP
(in addition, of course, to guaranteed perfect forward secrecy
of the transport). Do note that this is only possible because
WireGuard is strictly layer 3 based. Unlike some common VPN
protocols, like L2TP/IPsec, using authenticated identiﬁcation
of peers at a layer 3 level enforces a much cleaner network
design.
In the case of a WireGuard peer who wishes to route all
traﬃc through another WireGuard peer, the cryptokey routing
table could be conﬁgured more simply as:
Conﬁguration 2a
Interface Public Key
gN65...z6EA
Peer Public Key
HIgo...8ykw
Private Key
gI6E...fWGE
Allowed IPs
0.0.0.0/0
UDP Port
9182
Here, the peer authorizes HIgo...f8yk to put packets onto
wg0 with any source IP, and all packets that are outgoing on
wg0 will be encrypted using the secure session associated with
that public key and sent to that peer’s endpoint.
A. Endpoints & Roaming
Of course, it is important that peers are able to send
encrypted WireGuard UDP packets to each other at particular
Internet endpoints. Each peer in the cryptokey routing table
may optionally pre-specify a known external IP address and
UDP port of that peer’s endpoint. The reason it is optional is
that if it is not speciﬁed and WireGuard receives a correctly
authenticated packet from a peer, it will use the outer external
source IP address for determining the endpoint.
Since a public key uniquely identiﬁes a peer, the outer
external source IP of an encrypted WireGuard packet is used to
identify the remote endpoint of a peer, enabling peers to roam
freely between diﬀerent external IPs, between mobile networks
for example, similar to what is allowed by Mosh [24]. For
example, the prior cryptokey routing table could be augmented
to have the initial endpoint of a peer:
Conﬁguration 2b
Private Key
gI6E...fWGE
Allowed IPs
0.0.0.0/0
Interface Public Key
gN65...z6EA
Peer Public Key
HIgo...8ykw
UDP Port
9182
Internet Endpoint
192.95.5.69:8746
Then, this host, gN65...z6EA, sends an encrypted packet
to HIgo...f8yk at 192.95.5.69:8746. After HIgo...f8yk re-
ceives a packet, it updates its table to learn that the endpoint
for sending reply packets is, for example, 192.95.5.64:9182:
Interface Public Key
HIgo...8ykw
Peer Public Key
xTIB...p8Dg
TrMv...WXX0
gN65...z6EA
UDP Port
8746
Internet Endpoint
Conﬁguration 1b
Private Key
yAnz...fBmk
Allowed IPs
10.192.122.3/32,
10.192.124.0/24
10.192.122.4/32,
192.168.0.0/16
10.10.10.230/32 192.95.5.64:9182
Note that the listen port of peers and the source port of
packets sent are always the same, adding much simplicity,
while also ensuring reliable traversal behind NAT. And since
this roaming property ensures that peers will have the very
latest external source IP and UDP port, there is no requirement
for NAT to keep sessions open for long. (For use cases in
which it is imperative to keep open a NAT session or stateful
ﬁrewall indeﬁnitely, the interface can be optionally conﬁgured
to periodically send persistent authenticated keepalives.)
This design allows for great convenience and minimal
conﬁguration. While an attacker with an active man-in-the-
middle could, of course, modify these unauthenticated external
source IPs, the attacker would not be able to decrypt or modify
any payload, which merely amounts to a denial-of-service attack,
which would already be trivially possible by just dropping the
original packets from this presumed man-in-the-middle position.
And, as explained in section VI-E, hosts that cannot decrypt
and subsequently reply to packets will quickly be forgotten.
III. Send/Receive Flow
The roaming design of section II-A, put together with the
cryptokey routing table of section II, amounts to the following
ﬂows when receiving and sending a packet on interface wg0
using “Conﬁguration 1” from above.
A packet is locally generated (or forwarded) and is ready to be
transmitted on the outgoing interface wg0: