PHP
c = 1
c = 10
c = 50
c = 100
2.50
1.29
0.41
2.34
0.98
0.37
2.56
1.00
0.30
2.32
0.97
0.31
practice [44], this corresponds to observable overheads of
about 24%, 11%, and 3% (respectively).
While such overhead characterizes feasibility, it is ir-
relevant to deception because unpatched, patched, and
honey-patched vulnerabilities are all slowed equally by
the taint-tracking instrumentation. The overhead therefore
does not reveal which apparent vulnerabilities in a given
server instance are genuine patching lapses and which
are deceptions, and it does not distinguish honey-patched
servers from servers that are slowed by any number of
other factors (e.g., fewer computational resources). In
addition, it is encouraging that high relative overheads
were observed primarily for static websites that perform
little or no signiﬁcant computation. This suggests that
the more modest 3% overhead for computationally heav-
ier PHP sites is more representative of servers for which
computational performance is an issue.
6 Discussion
6.1 Approach Limitations
Our research signiﬁcantly eases the task of tracking
secrets within standard, pointer-linked, graph data-
structures as they are typically implemented in low-level
languages, like C/C++. However, there are many non-
standard, low-level programming paradigms that our ap-
proach does not fully support automatically. Such limita-
tions are discussed below.
Pointer Pre-aliases. PC2S fully tracks all pointer aliases
via taint propagation starting from the point of taint-
introduction (e.g., the code point where a secret is ﬁrst
assigned to an annotated structure ﬁeld after parsing).
However, if the taint-introduction policy misidentiﬁes
secret sources too late in the program ﬂow, dynamic track-
ing cannot track pointer pre-aliases—aliases that predate
the taint-introduction. For example, if a program ﬁrst
initializes string p1, then aliases p2 := p1, and ﬁnally
initializes secret-annotated ﬁeld f via f := p1, PC2S
automatically labels p1 (and f) but not pre-alias p2.
In most cases this mislabeling of pre-aliases can be mit-
igated by enabling PC2S both on-load and on-store. This
causes secrets stored via p2 to receive the correct label
on-load when they are later read via p1 or f. Likewise,
secrets read via p2 retain the correct label if they were
earlier stored via p1 or f. Thus, only data stored and read
purely using independent pre-alias p2 remain untainted.
USENIX Association  
24th USENIX Security Symposium  155
11
s
m
s
m
s
m
 50
 40
 30
 20
 10
 0
 50
 40
 30
 20
 10
 0
instr c=1
non-instr c=1
 0
 50  100  150  200  250  300  350  400  450  500
requests
(a) c = 1
instr c=1
non-instr c=1
 0
 50  100  150  200  250  300  350  400  450  500
 100
 80
 60
 40
 20
 0
requests
(e) c = 1
instr c=1
non-instr c=1
 0
 50  100  150  200  250  300  350  400  450  500
requests
(i) c = 1
 200
 150
s
m
 100
 50
 0
 200
 150
s
m
 100
 50
 0
 400
 350
 300
 250
 200
 150
 100
 50
 0
s
m
instr c=10
non-instr c=10
 0
 50  100  150  200  250  300  350  400  450  500
requests
(b) c = 10
instr c=10
non-instr c=10
 0
 50  100  150  200  250  300  350  400  450  500
requests
(f) c = 10
instr c=10
non-instr c=10
 0
 50  100  150  200  250  300  350  400  450  500
requests
(j) c = 10
s
m
s
m
s
m
 400
 350
 300
 250
 200
 150
 100
 50
 0
 400
 350
 300
 250
 200
 150
 100
 50
 0
 800
 700
 600
 500
 400
 300
 200
 100
 0
instr c=50
non-instr c=50
 0
 50  100  150  200  250  300  350  400  450  500
requests
(c) c = 50
instr c=50
non-instr c=50
 0
 50  100  150  200  250  300  350  400  450  500
requests
(g) c = 50
instr c=50
non-instr c=50
 0
 50  100  150  200  250  300  350  400  450  500
requests
(k) c = 50
s
m
s
m
s
m
 800
 700
 600
 500
 400
 300
 200
 100
 0
 800
 700
 600
 500
 400
 300
 200
 100
 0
instr c=100
non-instr c=100
 0
 50  100  150  200  250  300  350  400  450  500
requests
(d) c = 100
instr c=100
non-instr c=100
 0
 50  100  150  200  250  300  350  400  450  500
 1600
 1400
 1200
 1000
 800
 600
 400
 200
 0
requests
(h) c = 100
instr c=100
non-instr c=100
 0
 50  100  150  200  250  300  350  400  450  500
requests
(l) c = 100
Figure 11: Dynamic taint-tracking performance (measured in request round-trip times) with varying concurrency c for a
static web site (a–d), Bash CGI application (e–h), and PHP application (i–l).
This is a correct enforcement of the user’s policy, since
the policy identiﬁes f := p1 as the taint source, not p2.
If this treatment is not desired, the user must therefore
specify a more precise policy that identiﬁes the earlier
origin of p1 as the true taint source (e.g., by manually
inserting a dynamic classiﬁcation operation where p1 is
born), rather than identifying f as the taint source.
Structure granularity. Our automation of taint-tracking
for graph data-structures implemented in low-level lan-
guages leads to taint annotations at the granularity of
whole struct declarations, not individual value ﬁelds.
Thus, all non-pointer ﬁelds within a secret-annotated C
struct receive a common taint under our semantics. This
coarse granularity is appropriate for C programs since
such programs can (and often do) refer to multiple data
ﬁelds within a given struct instance using a common
pointer. For example, marshalling is typically imple-
mented as a pointer-walk that reads a byte stream directly
into all data ﬁelds (but not the pointer ﬁelds) of a struct
instance byte-by-byte. All data ﬁelds therefore receive a
common label after marshalling.
Reliable support for structs containing secrets of mixed
taint therefore requires a ﬁner-grained taint-introduction
policy than is expressible by declarative annotations of C
structure deﬁnitions. Such policies must be operationally
speciﬁed in C through runtime classiﬁcations at secret-
introducing code points. Our focus in this research is
on automating the much more common case where each
node of the graph structure holds secrets of uniform clas-
siﬁcation, toward lifting the user’s annotation burden for
this most common case.
Dynamic-length secrets. Our implementation provides
built-in support for a particularly common form of
dynamic-length secret—null-terminated strings. This can
be extended to support other forms of dynamic-length
secrets as needed. For example, strings with an explicit
length count rather than a terminator, fat and bounded
pointers [26], and other variable-length, dynamically al-
located, data structures can be supported through the ad-
dition of an appropriate annotation type and a dynamic
taint-propagating function that extends pointer taints to
the entire pointee during assignments.
Implicit Flows. Our dynamic taint-tracking tracks ex-
plicit information ﬂows, but not implicit ﬂows that
disclose information through control-ﬂows rather than
dataﬂows. Tracking implicit ﬂows generally requires
static information ﬂow analysis to reason about dis-
closures through inaction (non-observed control-ﬂows)
rather than merely actions. Such analysis is often in-
tractable (and generally undecidable) for low-level lan-
guages like C, whose control-ﬂows include unstructured
and dynamically computed transitions.
Likewise, dynamic taint-tracking does not monitor side-
channels, such as resource consumption (e.g., memory or
power consumption), runtimes, or program termination,
which can also divulge information. For our problem
156  24th USENIX Security Symposium 
USENIX Association
12
impractical for most live, high-performance, production
server applications.
More recently, there has been growing interest in run-
time detection of information leaks [21, 49]. For instance,
TaintDroid [21] extends Android’s virtualized architec-
ture with taint-tracking support to detect misuses of users’
private information across mobile apps. TaintEraser [49]
uses dynamic instrumentation to apply taint analysis on
binaries for the purpose of identifying and blocking infor-
mation leaking to restricted output channels. To achieve