of the adversary’s choice.
Loopix provides strong sender online unobservability
against the GPA and even against a corrupt provider. We
refer to Section 4.1.2 for our analysis of the latter.
Note, that sender online unobservability directly im-
plies the notion of sender anonymity where the adver-
sary tries to distinguish between two possible senders
communicating with a target receiver. Formally, {S1 →
R,S2 (cid:54)→} or {S1 (cid:54)→,S2 → R} for any concurrently online
USENIX Association
26th USENIX Security Symposium    1201
honest senders S1 and S2 and any receiver of the adver-
sary’s choice. Loopix provides sender anonymity even
in light of a conversation insider, i.e., against a corrupt
receiver.
Receiver unobservability. Whether or not receivers are
communicating should be hidden from an unauthorized
party. We deﬁne receiver unobservability as the inability
of an adversary to decide whether any sender is commu-
nicating with a speciﬁc receiver R {→ R} or not {(cid:54)→ R},
for any online or ofﬂine honest receiver R of the adver-
sary’s choice.
Loopix provides
strong receiver unobservability
the GPA, under the condition of an honest
against
provider. We show in Section 4.1.2 how an honest
provider assists the receiver in hiding received messages
from third party observers.
Note, that receiver unobservability directly implies the
notion of receiver anonymity where the adversary tries to
distinguish between two possible receivers in communi-
cation with a target sender. Formally, {S → R1,(cid:54)→ R2}
or {(cid:54)→ R1,S → R2} for any concurrently online honest
sender S and any two honest receivers R1,R2 of the ad-
versary’s choice. 3
Non-Goals. Loopix provides anonymous unreliable
datagram transmission and facilities replying to sent
messages (through add-ons). This choice allows for ﬂex-
ible trafﬁc management, cover trafﬁc, and trafﬁc shap-
ing. On the downside, higher-level applications using
Loopix need to take care of reliable end-to-end trans-
mission and session management. We leave the detailed
study of those mechanisms as future work.
The provider-based architecture supported by Loopix
aims to enable managed access to the network, anony-
mous blacklisting to combat abuse [27], and payments
for differential access to the network [2]. However, we
do not discuss these aspects of Loopix in this work, and
concentrate instead on the core anonymity features and
security properties described above.
3 The Loopix Architecture
In this section we describe the Loopix system in detail—
Figure 1 provides an overview. We also introduce the no-
tation used further in the paper, summarized in Table 2.
3.1 System Setup
The Loopix system consists of a set of mix nodes, N,
and providers, P. We consider a population of U users
3If the receiver’s provider is honest, Loopix provides a form of
receiver anonymity even in light of a conversation insider: a corrupt
sender that only knows the pseudonym of a receiver cannot learn which
honest client of a provider is behind the pseudonym.
Symbol Description
N
Mix nodes
P
Providers
λL
Loop trafﬁc rate (user)
λD
Drop cover trafﬁc rate (user)
λP
Payload trafﬁc rate (user)
l
Path length (user)
µ
The mean delay at mix Mi
λM
Loop trafﬁc rate (mix)
Table 2: Summary of notation
communicating through Loopix, each of which can act as
sender and receiver, denoted by indices Si, Ri, where i ∈
{1, . . .,U} respectively. Each entity of the Loopix infras-
tructure has its unique public-private key pair (sk, pk). In
order for a sender Si, with a key pair (skSi, pkSi), to send
a message to a receiver R j, with a key pair (skR j, pkR j ),
the sender needs to know the receiver’s Loopix network
location, i.e., the IP address of the user’s provider and
an identiﬁer of the user, as well as the public encryption
key pkR j. Since it is out of scope for this work, we will
assume this information can be made available through a
privacy-friendly lookup or introduction system for initi-
ating secure connections [32].
3.2 Format, Paths and Cover Trafﬁc
Message packet format. All messages in Loopix are
end-to-end encrypted and encapsulated into packets to be
processed by the mix network. We use the Sphinx packet
design [16], to ensure that intermediate mixes learn no
additional information beyond some routing information.
All messages are padded to the same length, which hides
the path length and the relay position and guarantees un-
linkability at each hop of the messages’ journey over the
network. The Sphinx packet format allows for detection
of tagging attacks and replay attacks.
Each message wrapped into the Sphinx packet consists
of a concatenation of two separate parts: a header, car-
rying the layered encryption of meta-data for each hop,
and the encrypted payload, which allows for conﬁdential
message exchange. The header provides each mix server
on the path with conﬁdential meta-data, which is neces-
sary to verify packet integrity and correctly process the
packet. The structure of the header consists of (I) a single
element of a cyclic group that is re-randomized at each
hop, (II) an onion-encrypted vector, with each layer con-
taining the routing information for one hop, and (III) the
message authentication code MACi, which allows header
integrity checking. The payload is encrypted using the
LIONESS cipher [1], which guarantees that in case the
adversary modiﬁes the payload in transit, any informa-
1202    26th USENIX Security Symposium
USENIX Association
Users’ loop cover trafﬁc
generates trafﬁc
in two directions
Storage
Storage
Storage
Providers offer
ofﬂine storage
when user is ofﬂine
Storage
Mixes can detect
n-1 attacks
Figure 1: The Loopix Architecture. Clients pass the messages
to the providers, which are responsible for injecting trafﬁc into
the network. The received messages are stored in individual
inboxes and retrieved by clients when they are online.
tion contained in it becomes irrecoverable. Thanks to the
message authentication code in the header and the LI-
ONESS encryption the Sphinx packet format thus allows
for detection of tagging attacks.
Sphinx packet generation: The sender, given the public
keys of the recipient and the nodes in the path, computes
the sequence of shared secrets and blinded group ele-
ments. Next, the sender encrypts with the derived secret
keys the vector of routing information and corresponding
message authentication codes. The sender concatenates
the computed header and onion-encrypted payload en-
capsulating conﬁdential message to send to the recipient.
Sphinx packet processing: Each node after receiv-
ing the packet proceeds as follows. First, it computes
a shared key using the group element included in the
packet header and its private key. Next, using the com-
puted shared key, the node validates the integrity of the
packet by computing the hash of the encrypted routing
information vector and comparing it with the received
MAC. If the MAC is correct, the node, using the obtained
key, strips off a single layer of encryption from the rout-
ing information and payload. The decryption operation
returns the routing commands and a new packet, which
should be forwarded to the next hop.
We extend the Sphinx packet format to carry addi-
tional routing commands in the header to each interme-
diate relay, including a delay and additional ﬂags.
Path selection. As opposed to circuit-based onion
routing, in Loopix the communication path for every sin-
gle message is chosen independently, even between the
same pair of users.
Messages are routed through l layers of mix nodes, as-
sembled in a stratiﬁed topology [13, 21]. Each mix node
is connected only with all the mix nodes from adjacent
layers. This ensures that few links are used, and those
few links are well covered in trafﬁc; stratiﬁed topologies
mix well in few layers [21]. Providers act as the ﬁrst and
last layer of mix servers.
Preparing message for sending. To send a message,
the sender generates a random path, as described above.
For each hop in the path the sender samples a delay
from an exponential distribution with parameter µ, and
includes it in the vector of routing commends, together
with any other auxiliary information, to the correspond-
ing relay. Given the message, recipient, path and rout-
ing commends the client encapsulates them into a Sphinx
packet format.
Sending messages and cover trafﬁc. Users and mix
servers continuously generate a bed of real and cover
trafﬁc that is injected into the network. Our design guar-
antees that all outgoing trafﬁc sent by users can by mod-
eled by a Poisson process.
To send a message, a user packages their message into
a mix packet and places it into their buffer—a ﬁrst-in-
ﬁrst-out (FIFO) queue that stores all the messages sched-
uled to be sent.
Each sender periodically checks, following the expo-
nential distribution with parameter 1
, whether there is
λP
any scheduled message to be sent in their buffer. If there
is a scheduled message, the sender pops this message
from the buffer queue and sends it, otherwise a drop
cover message is generated (in the same manner as a reg-
ular message) and sent (depicted as the four middle blue,
solid arrows in Figure 1). Cover messages are routed
through the sender’s provider and a chain of mix nodes to
a random destination provider. The destination provider
detects the message is cover based on the special drop
ﬂag encapsulated into the packet header, and drops it.
Thus, regardless of whether a user actually wants to send
a message or not, there is always a stream of messages
being sent according to a Poisson process Pois(λP).
Moreover, independently from the above, all users
emit separate streams of special indistinguishable types
of cover messages, which also follow a Poisson process.
The ﬁrst type of cover messages are Poisson distributed
loops emitted at rate λL. These are routed through the
network and looped back to the senders (the upper four
red arrows in Figure 1), by specifying the sending user as
the recipient. These “loops” inspire the system’s name.
Users also inject a separate stream of drop cover mes-
sages, deﬁned before, following the Poisson distribution
Pois(λD). Additionally, each user sends a stream of pull
requests at a ﬁxed frequency to its provider in order to
retrieve received messages, described in Section 3.2.
USENIX Association
26th USENIX Security Symposium    1203
Sender
the
• Packs message m in
the Sphinx packet
format and put
it
outbox
into
buffer;
• Continuously gener-
ates loop and drop
cover trafﬁc;
• When the buffer is
checked, pops the
encrypted message
and sends to the
provider.
Ingress Provider
• Processes
the
packet,
received
checks
in-
tegrity and detects
replays,
the
• If
the processing
succeeded, injects
the packet into the
mix network after
the required delay.
the
Mix
• Processes
the
packet,
received
checks
in-
tegrity and detects
replays,
the
• If
process-
ing
succeeded,
forwards the de-
crypted packet to
the next hop after
the required delay.
Egress Provider
• Processes
the
packet,
received
checks
in-
tegrity and detects
replays,
• Stores the packet in
the
the client’s inbox.
Recipient
• Retrieves a ﬁxed
number of mes-
from the
sages
inbox,
• Unwraps the last
layer of encryption
and
the
content.
reads
Figure 2: Sending a single message between two users using the Loopix system. For simplicity, we present the mix network
as a single mix; however, all mixes in the network perform the same operations. The mail client, besides sending the messages,
generates constant streams of loop and drop cover trafﬁc, independently of the user activity. The dotted line depicts retrieving of
messages.
Each mix also injects its own loop cover trafﬁc, drawn
from a Poisson process with rate Pois(λM), into the net-
work. Mix servers inject mix packets that are looped
through a path, made up of a subset of other mix servers
and one randomly selected provider, back to the sending
mix server, creating a second type of “loop”. This loop