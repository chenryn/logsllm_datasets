 **I'm submitting a ...** (check one with "x")
    [x] bug report (I think)
**Current behavior**  
The AoT compiler is processing and creating `.ngfactory.ts` files in
`@angular/material` when I use `platformBrowser().bootstrapModuleFactory`. I
have to include this directory in `rootDirs` for compilation to succeed.
**Expected behavior**  
I may be wrong here, but I expected only my own project components, styles and
templates to be processed.
**Minimal reproduction of the problem with instructions**  
In fact, the AoT compiler will fail if it doesn't have access to `Material`
files. For instance, if I edit `tsconfig.json` and change:
    "rootDirs":["./dev","./node_modules/@angular/material"]
to:
    "rootDirs":["./dev"],
I get 20 or 30 errors of this kind during compilation:
    Error File 'C:/.../node_modules/@angular/material/button-toggle/button-toggle.ngfactory.ts' is not under 'rootDir' 
If I include `Material` dir in `rootDirs`, after compilation, the resulting
directory structure (in output folder) is badly structured. See details here
along with tsconfig.
Even if I include the `@angular/material` dir in `rootDirs` and allow the
compilation to run (it completes without error), the app fails in the browser
with `404 not found` when trying to load files such as:
> /@angular/core/bundles/core.umd.js/src/linker/ng_module_factory.js  
>  /@angular/common/bundles/common.umd.js/src/common_module.js  
>  ...
Here are some suspicious-looking imports in `app.module.ngfactory.ts`
> import * as import87 from
> '../../node_modules/@angular/material/dialog/dialog-container.ngfactory';  
>  import * as import90 from
> '../../node_modules/@angular/material/tooltip/tooltip.ngfactory';
**What is the motivation / use case for changing the behavior?**  
To get AoT to work
**Please tell us about your environment:**  
Windows 7, PhpStorm.
  * **Angular version:** 2.0.1
  * **Language:** TypeScript 2.0.1
  * **Node (for AoT issues):** `node --version` = 4.5.0