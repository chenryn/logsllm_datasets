# 前言
说起以太坊的智能合约，因为区块链上所有的数据都是公开透明的，所以合约的代码也都是公开的。但是其实它公开的都是经过编译的OPCODE，真正的源代码公开与否就得看发布合约的人了。如果要真正的掌握一个合约会干什么，就得从OPCODE逆向成solidity代码。下面进行练手和实战，实战的是今年PHDays安全会议的比赛里的一道题。
在etherscan上看到的合约的代码示例:  
# 工欲善其事，必先利其器
现在网上免费的工具不太多，我会在结尾贴出我知道的其他工具。  
在这里我用的是IDA-EVM(半年没更新啦)和ethervm.io的反编译工具:  
[IDA-EVM](https://github.com/trailofbits/ida-evm "IDA-EVM")  
[ethervm](https://ethervm.io/decompile "ethervm")  
如果要查手册:  
[solidity手册](https://solidity-cn.readthedocs.io/zh/develop/ "solidity手册")  
用来查一些EVM的特性  
[OPCODE](https://ethervm.io/ "OPCODE")  
用来查OPCODE的特性
# 练手1
    contract Demo {
        uint256 private c;
        function a() public returns (uint256) { factorial(2); }
        function b() public { c++; }
        function factorial(uint n) internal returns (uint256) {
            if (n  0x01) {
                var var1 = 0xb8;
                var var2 = arg0 - 0x01;
                var1 = func_009E(var2);
                var0 = arg0 * var1;
            label_00BD:
                return var0;
            } else {
                var0 = 0x01;
                goto label_00BD;
            }
        }
    }
第一句`if (msg.data.length  uint256) public balanceOf;
        uint256 constant PRICE_PER_TOKEN = 1 ether;
        function TokenSaleChallenge(address _player) public payable {
            require(msg.value == 1 ether);
        }
        function isComplete() public view returns (bool) {
            return address(this).balance = numTokens);
            balanceOf[msg.sender] -= numTokens;
            msg.sender.transfer(numTokens * PRICE_PER_TOKEN);
        }
    }
反编译后:
    contract Contract {
        function main() {
            memory[0x40:0x60] = 0x80;
            if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }
            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;
            if (var0 == 0x70a08231) {
                // Dispatch table entry for balanceOf(address)
                var var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x0094;
                var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;
                var2 = balanceOf(var2);
                var temp0 = memory[0x40:0x60];
                memory[temp0:temp0 + 0x20] = var2;
                var temp1 = memory[0x40:0x60];
                return memory[temp1:temp1 + temp0 - temp1 + 0x20];
            } else if (var0 == 0xb2fa1c9e) {
                // Dispatch table entry for isComplete()
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x00bb;
                var1 = isComplete();
                var temp2 = memory[0x40:0x60];
                memory[temp2:temp2 + 0x20] = !!var1;
                var temp3 = memory[0x40:0x60];
                return memory[temp3:temp3 + temp2 - temp3 + 0x20];
            } else if (var0 == 0xd96a094a) {
                // Dispatch table entry for buy(uint256)
                var1 = 0x00da;
                var2 = msg.data[0x04:0x24];
                buy(var2);
                stop();
            } else if (var0 == 0xe4849b32) {
                // Dispatch table entry for sell(uint256)
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x00da;
                var2 = msg.data[0x04:0x24];
                sell(var2);
                stop();
            } else { revert(memory[0x00:0x00]); }
        }
        function balanceOf(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x00;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
        function isComplete() returns (var r0) { return address(address(this)).balance < 0x0de0b6b3a7640000; }
        function buy(var arg0) {
            if (arg0 * 0x0de0b6b3a7640000 != msg.value) { revert(memory[0x00:0x00]); }