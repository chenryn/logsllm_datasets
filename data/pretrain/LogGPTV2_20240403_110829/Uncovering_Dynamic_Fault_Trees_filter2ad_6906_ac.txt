interpreted as claiming the spare wheel by a SPARE
causing the wheel to be unavailable for any subsequent
replacements.
• In Ex. 1, the failure of both motors does not happen after
the last motor has failed, but exactly with the failure of
the last motor.
Thus, one might argue that failure forwarding can be naturally
embedded in a temporal ordering, thereby resolving the issues
in Ex. 6. The distinct applications of failure combination and
failure forwarding often go along the lines sketched above.
Later on, we will encounter another usage of failure forwarding
where the usage of FDEPs is used inject failures into spare
modules, see Ex. 12. In such scenarios, the natural embedding
in a temporal ordering is often lost, and reliability is impacted
by this, as in e.g. Fig. 9a, where then failure of B prevents
the failure of the PAND.
The standard interpretation of BEs uses a total order, i.e. the
standard interpretation of gates is based on this total order. If
the causal order of failure forwarding is resolved by a temporal
argument, the semantics of a temporal gate are affected by the
resolution of the causal order. This suggests that causality for
failure forwarding is a partial ordering.
Example 7: Consider the DFT depicted in Fig. 9b and
assume a causal ordering for failure forwarding. A failure of
C causes subsequent failures of A and B. Depending on the
order of A and B, T fails. Assuming that the causal order is
resolved by a (total) temporal order, then A and B fail in some
order, but not simultaneously. This causes a nondeterministic
failure behaviour of T .
Causality needs to be a partial order.
Combining causal and temporal ordering thus raises new
issues. One other issue we point at is whether in Fig.9b,
A and B should fail simultaneously after C. It could be
argued that the inﬁnitesimal time steps are almost surely not
identical and so A and B do not fail simultaneously. On
303
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
T
X
Y
B
⊥
A
B(cid:5)
⊥
T
A
T
A
Y
X
B(cid:5)
⊥
B
⊥
(a) Reference
(b) Deleted X
(c) Deleted Y
Fig. 10.
Illustrating the effect of ordered failure combination.
occur. Let us discuss some consequences choosing  t(B), respectively. For every gate, the shaded area
depicts the situations in which it is considered failed.
the other hand, it seems rather natural to assume that A and
B may fail simultaneously. This should not be excluded, as
any assumption ruling out simultaneous failures of A and B
ignores potential interesting corner cases.
TABLE II.
BEHAVIOUR OF SEVERAL BINARY GATES WITH GIVEN
OCCURRENCE OF THEIR INPUTS.
t(A)  t(B)
A B
A, B
B A
The embedding of causality in a temporal order
can rule out interesting corner cases.
Ordered failures of gates. The combination of the—often
unexpected—causal relation due to failure combination and
the temporal conditions of the gates yields DFTs that are
hard to comprehend and analyse. In particular, gates do not
only fail when their failure condition is fulﬁlled, but they
also inﬂuence the possible orderings of gate-failures. In the
next example, failure combination is assumed to be totally
ordered, i.e. gates do not fail simultaneously. If this ordering
is assumed to be temporal, seemingly equivalent DFTs have
different interpretations.
Example 8: Consider the DFT in Fig. 10a. Note that X
fails iff A fails. By symmetry, the same applies to Y . Thus
one expects that replacing X (or Y ) by A in the DFT would
result in an equivalent DFT, see Fig. 10b (and Fig. 10c). In
the original DFT, after a failure of A, either X fails before
Y or Y before X. The failure of PAND T depends on the
ordering. The two “equivalent” DFTs differ fundamentally. In
Fig. 10b, T fails, as A fails before Y —as failure combination
is totally ordered. In Fig. 10c, T does not fail, as A fails before
X violating the order of the PAND T .
Embedding causality in claiming yields also room for
different interpretations, which we do not discuss here. To
summarise, while merging a causal with a temporal ordering
seems appropriate in many situations, it leads to delicate issues
for DFTs. In particular, it seems more natural to assume a
partial-order semantics for failure combination.
Embedding causality into a total, temporal order
raises issues.
A partial-order temporal order would be more adequate.
C. Expressiveness
Priority gates. PAND and POR gates require their inputs to
fail from left to right. Various papers [2], [15] do not specify
the behaviour of such gates in case inputs fail simultaneously.
This may lead to problems [4]. The main issue is whether
a strict (denoted <) or a weak ordering (denoted ≤) of the
inputs is required. The former case is known as exclusive; the
latter as inclusive. Table I on page 1 shows that both variants
304
AND(A, B)
OR(A, B)
SAND(A,B)
PAND≤(A, B)
PAND<(A, B)
POR≤(A, B)
POR<(A, B)
Assuming instantaneous failure combination it follows:
SAND and inclusive POR (PAND) can be expressed
using inclusive PAND (POR).
Exclusive priority gates cannot be expressed using
inclusive priority gates.
All priority gates are expressible using exclusive POR.
No other priority gate can be expressed using
exclusive PAND.
Using ORs to express XOR. As mentioned before, some
DFT dialects include XOR gates. These gates may yield non-
coherent fault-trees [26]: an additional failed event may turn
the system into an operational state again. As this seldomly
occurs [17], a common approach (for SFTs) is to represent
XOR elements by OR gates. Whereas this approach is guaran-
teed to under-approximate the system performance for SFTs,
it may yield an over-approximation for DFTs. Let us illustrate
this. Consider the DFT in Fig. 11, where the OR gate X is
used to model an XOR. Consider failing sequence BCD. The
system (with a truly XOR behaviour) fails after the additional
occurrence of sequence AE, as Y does not fail. The DFT
however cannot fail as X failed, causing the failure of Y and
Z, thereby violating the ordering requirement of the PAND
TLE. (Note that the precise behaviour of the PAND in case
one of its children is non-coherent is not speciﬁed. Therefore,
we use a somewhat verbose DFT in which we circumvent any
unspeciﬁed behaviour.) The above phenomenon is caused by
priority gates, where failed children may prevent the failure
propagation of their parents. Observing that SFTs are DFTs
too, it follows:
OR under- or over-approximates XOR,
depending on the context.
Emulating SEQs. Sequence enforcers (SEQ) guarantee that
elements only fail from left to right. Some papers [11], [23]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
SF
Z
Y
X
→
⊥
X
SF
SF
X1
A
B
C
B
A
C
(a) With a SEQ
(b) With a POR
Fig. 13. Order-dependent event prevention.
A
B
C
D
E
Fig. 11. Using an OR for XOR over-approximates the system’s reliability.
SF→
SF
S
→SF
D
→
A
B
A
B
A
B
C
A
B
C
FDEPs to have dependent gates (rather than events) [10]. Such
gates can fail themselves by their type-dependent condition
on their children, or when triggered. The dependent gate
then propagates it failure upwards; this can also be explicitly
modelled by an additional OR gate. Consider an FDEP with a
dependent SPARE. Assume the SPARE fails by triggering. In
this situation, it seems natural to expect the SPARE to neither
claim nor activate any of its spare modules. However, many
semantics do not support such a deactivation of a SPARE.
(a)
(b)
(c)
(d)
FDEPs with dependent gates require special treatment.
Fig. 12. Replacing a SEQ by a cold SPARE, for (c+d) this is invalid.
exclude SEQs and express them using cold SPAREs. The
underlying idea of using cold SPAREs for SEQs is that the
activation mechanism of the SPARE is able to enforce a
sequence of events, by assuming cold standby. The DFT in
Fig. 12a fails after A and B have failed, and B can only fail
after A did. The DFT in Fig. 12b is equivalent. The (cold)
SPARE ensures that B cannot fail if A did not fail, and the
SPARE only fails once A and B both failed.
This replacement of SEQs by SPARES is not applicable
in general, though. We consider two examples. Let us ﬁrst
consider Fig. 12c, assuming that B and C are warm spare
modules. The SEQ expresses that C can only fail after B. Note
that as B and C are in warm standby, the failure of A is not re-
quired for B or C to fail. Replacing the SEQ by a cold SPARE
Y , say, yields—apart from some questionable syntax—that
claiming B by Y prevents SPARE S from claiming B. In
addition, C requires two distinct dormant failure distributions,
as it is both in cold and warm standby. Our second example
illustrates that application of the replacement in Fig. 12 yields
different results in case one of the SEQ children is a gate (and
not just a basic event). Consider Fig. 12d where B and C
are initially both enabled. The failure sequence BAC respects
the SEQ. For B to fail ﬁrst, D needs to be active, and so B
and C need to be both active. Once B fails, C needs to be
disabled, as otherwise D could fail before A does, violating
the SEQ. But C needs (again) to be activated once A occurs.
Since SPAREs only allow spare modules to be activated once,
this behaviour cannot be expressed using SPAREs.
SEQs cannot always be expressed using cold SPAREs.
Consider Fig. 13a in which X is not allowed to fail (by
the SEQ). This enforces that B may only fail before A. Such
usages of SEQs can be more naturally expressed using the
POR, as shown in Fig. 13a.
SPAREs as dependent gates of FDEPs. FDEPs have a
trigger and a dependent basic event. Some DFT dialects allow
Evidence. A popular use of DFTs is to derive speciﬁc sce-
narios in which certain states (or failures)—referred to as
evidences—are assumed in the system. This is particularly
interesting when considering the system’s survivability, i.e.
how well can a system recover from a speciﬁc bad state?
Evidences can be naturally modelled by using constant fault
elements. This however requires a well-deﬁned semantic treat-
ment of “simultaneous” failures at initialisation, a situation that
is not conform the common assumption that BEs never fail
simultaneously. In particular the treatment of SPAREs requires
attention, as the initial failure of spare modules may yield an
underspeciﬁed state of the DFT.
Setting evidence may yield underspeciﬁed initial states.
D. The resolution of spare races
Recall that spare races occur when multiple SPAREs fail
simultaneously, and some of the failed SPAREs claim a shared
spare module at the same time, see also Ex. 6. How can
spare races be resolved? One possible strategy is to resolve
spare races nondeterministically, i.e., consider all potential
resolutions by leaving open the exact claiming order. Some
authors have argued against nondeterminism in fault trees, e.g.
Merle et al. [12] claim that critical infrastructures should be
deterministic. However, especially in systems where human
actions are involved, policies might not be as precise (or
precisely followed) and system behaviour may not always be
deterministic. Moreover, FTA is not only applied to existing
systems, but often also during design time [2]. In early
design phases, not all concrete information about the system
is available, and typically deliberately left open so as to allow
for several system implementations. In these setting, nonde-
terminism is a convenient means to model underspeciﬁcation.
Nevertheless, we agree that it is valuable to have additional
support for deterministic claiming policies in DFTs.
305
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
SF
SF
R1
R2
R1
R2
A1
P1
A2
P2
A1
P1
A2
P2
PA1
PS
PA2
B1
B2
PA1
PS
PA2
B1
B2
(a) Simple communication system.
(b) With a spare radio.
Fig. 14. DFT of a communication system.
Example 9: Consider the DFT in 14a. The DFT describes
a communication system consisting of two radios R1 and R2,
which both have to be operational. Each radio consists of an
antenna (A1 and A2, respectively) and a power unit (P1 and P2,
respectively). Both power units have their own power adaptor
(PA1 and PA2, respectively). The power adaptors are connected
to a common power supply (PS). Every power unit can use
one of the spare batteries (B1, B2) which have identical failure
distributions. The failure of PS leads to a spare race. However,
as there are spares for both P1 and P2, the actual order of