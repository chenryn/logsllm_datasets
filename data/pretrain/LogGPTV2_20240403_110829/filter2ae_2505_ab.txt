blob中解析主机名，然后通过发出`GET`请求来获取该主机的签名密钥，如：
    GET /.well-known/browserid?domain=
在我们的开发环境中，可以利用此错误来欺骗服务器向任意主机名发出任意请求。幸运的是，在我们的生产环境中，这些请求都是通过[squid](http://www.squid-cache.org/)缓存代理发送的，该代理配置了严格的验证规则来阻止任何非预期的请求，防止在这种情况下利用该漏洞。
第三个是向后端数据存储发出的请求，真正发生问题的地方就在这。
介绍一点背景知识，Firefox账户生成服务器分为[面向Web的API服务器](https://github.com/mozilla/fxa-auth-server)和与MySQL数据库通信的内部[数据存储区服务器](https://github.com/mozilla/fxa-auth-db-mysql)，如下所示：
API服务器和数据存储服务器之间使用`HTTP`协议通信，并使用明文传输。我们发现有一个地方，来自用户输入的unicode数据可以进入其中一个请求的路径。
我们许多的数据存储都是通过邮件地址录入的，并且允许电子邮件包含unicode字符。为了避免两个服务器之间unicode的编码和解码问题，数据存储API中大多数邮件相关的操作都接受作为一个十六进制编码的utf-8字符串的邮箱，API服务器将通过向数据存储发出HTTP请求来获取电子邮件“PI:EMAIL”的帐户记录，如下所示：
    GET /email/74657374406578616d706c652e636f6d
通过简单的回顾，发现有一个操作接受作为原始字符串的邮件地址。删除“xyz”账户的邮件的请求如下：
    DELETE /account/xyz/emails/PI:EMAIL
这里会产生冲突，但不走心的检查会导致问题并不明显的表现出来——我们会仔细的验证所有的用户输入，所以邮件地址不会包含任何的`HTTP`控制字符，它们会被自动转义。但邮件地址
_可以_ 包含unicode字符。
在测试环境中，我可以创建一个账户并向其添加以下奇怪但有效的邮件地址：
    x@̠ňƆƆɐį1̮1č̊č̊ɆͅƆ̠įaccountįf9f9eebb05ef4b819b0467cc5ddd3b4aįsessions̠ňƆƆɐį1̮1č̊č̊.cc
这些非ascii字符是精心挑选的，因此在小写并编码成`latin1`后，它们会产生各种`HTTP`控制字符：
    > v = 'x@̠ňƆƆɐį1̮1č̊č̊ɆͅƆ̠įaccountįf9f9eebb05ef4b819b0467cc5ddd3b4aįsessions̠ňƆƆɐį1̮1č̊č̊.cc'
    > Buffer.from(v.toLowerCase(), "latin1").toString()
    'x@ HTTP/1.1\r\n\r\nGET /account/f9f9eebb05ef4b819b0467cc5ddd3b4a/sessions HTTP/1.1\r\n\r\n.cc'
通过添加并删除这个邮件地址，我可以使API服务器向数据存储区发起一个`HTTP`请求：
    DELETE /account/f9f9eebb05ef4b819b0467cc5ddd3b4a/email/x@̠ňɔɔɐį1̮1č̊č̊ɇͅɔ̠įaccountįf9f9eebb05ef4b819b0467cc5ddd3b4aįsessions̠ňɔɔɐį1̮1č̊č̊.cc
其中，由于Node.js中的上述错误，以下内容将被写入：
    > console.log(Buffer.from('DELETE /account/f9f9eebb05ef4b819b0467cc5ddd3b4a/email/x@̠ňɔɔɐį1̮1č̊č̊ɇͅɔ̠įaccountįf9f9eebb05ef4b819b0467cc5ddd3b4aįsessions̠ňɔɔɐį1̮1č̊č̊.cc', 'latin1').toString())
    DELETE /account/f9f9eebb05ef4b819b0467cc5ddd3b4a/email/x@ HTTP/1.1
    GET /account/f9f9eebb05ef4b819b0467cc5ddd3b4a/sessions HTTP/1.1
    .cc
这就产生了一个SSRF攻击，导致API服务器多发送了一个非预期的`GET`请求。
这个特定的`GET`请求是无害的，但它足以让我相信这个bug是可以利用的，可能会被用来欺骗API服务器对数据存储API发出各种各样的欺诈性请求——比如创建一个用户无法控制的电子邮件地址，或重置其他用户帐户的密码，或者只是在Firefox帐户对电子邮件地址强加的255个unicode字符长度限制内可实现的任何操作。
幸运的是，没有任何证据表明这个bug在我们的生产环境中被利用。
同样，攻击者不能利用此漏洞进入用户的Firefox同步数据。Firefox Sync使用客户端强加密，以确保只有知道您的帐户密码的人才能访问您同步的数据。
# 快速修复：编码电子邮件地址
在第一次遇到底层Node.js问题时，我已经联系了[Node安全团队](https://nodejs.org/en/security/)以获取信息和指导。他们响应非常快速，并确认这是一个已知的行为，由于向后兼容的原因无法更改，但会在即将发布的Node.js10版本中修复。
我们已经注意到电子邮件删除端点行为的这种差异，我们出色的实习生[Deepti](https://github.com/deeptibaghel)已将其修复为十六进制编码电子邮件地址。不幸的是，该修复尚未投入生产，因此我们必须制定“chemspill”流程，以便尽快将其运送到生产中。  
我们维护所有Firefox帐户代码存储库的私有github分支，因此，因此在实践中发布修复程序的过程包括：
  * 将私人仓库与公共仓库中的最新版本分支同步。
  * cherry-pick挑选私人发布分支，并请求审查。
  * 在私有仓库中创建新的发布标记，并允许CircleCI构建docker镜像以进行部署。
  * 将新版本部署到我们的暂存环境并运行一系列手动和自动测试以防止漏洞再现。
  * 将修复程序推广到我们的生产环境。
总而言之，我们花了差不多24小时的时间就从了解底层Node.js
bug到生产中部署了一个修复程序。这包括花在分析，审计，代码审查，质量保证和部署上的时间，我认为这是一个非常可靠的周转时间！我对于Firefox
Accounts团队中的每个人都对这个问题做出快速而专业的反应感到非常自豪。
# 后续：添加额外的缓解措施
对于任何与安全相关的问题，重要的是不要只是推出修复补丁。而是要尝试找到出现问题的地方，以及将来是否可以预防或减轻类似问题。
在本文介绍的情况下，问题的本质是`HTTP`基于文本的性质使其易受注入式攻击（如请求拆分）的攻击。这个特定的Node.js
bug只是构建`HTTP`请求时出现问题的一个例子。Blackhat最近的演讲[“SSRF的新时代”](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)以各种编程语言提供了更多的例子。
在我看来，最好的长期缓解措施将是不再使用HTTP进行内部服务请求，而是采用更加结构化的方式，如[gRPC](https://grpc.io/)。但是，这在短期内不能实现。
一旦确定初始修复补丁是稳定的，并可用于生产环境，我们就会在API服务器中重构所有的`HTTP`请求，以围绕[safe-url-assembler](https://www.npmjs.com/package/safe-url-assembler)包使用一个[瘦包装器](https://github.com/mozilla/fxa-auth-server/blob/master/lib/safe-url.js)。这应该确保最终的URL字符串是由正确编码的组件组装而成，为未来可能出现的任何类似错误提供额外的保护层。这应该能确保最终的URL字符串是由正确编码的组件组装而成，为未来可能出现的任何类似错误提供额外的保护层。
如果您运行的服务器可以发出任何包含用户输入的`HTTP`请求，我强烈建议您查看[“SSRF的新时代”](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)演示文稿，以了解这可能更多可能导致问题的方式。这是令人大开眼界，它使得像[safe-url-assembler](https://www.npmjs.com/package/safe-url-assembler)这样小开销的额外安全层变得非常值得。