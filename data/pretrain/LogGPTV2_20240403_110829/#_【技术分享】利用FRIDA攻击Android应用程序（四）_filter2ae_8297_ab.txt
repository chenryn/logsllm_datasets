    }
在这些完整性检查之上，我们还观察到，类IntegrityCheck还验证了应用程序没有被篡改，因此不包含可调试标志。这个类被反编译如下。
    package sg.vantagepoint.util;
    import android.content.*;
    public class IntegrityCheck
    {
        public static boolean isDebuggable(final Context context) {
            return (0x2 & context.getApplicationContext().getApplicationInfo().flags) != 0x0;
        }
    }
阅读ADB日志，我们还可以跟踪运行APP时执行的计算。运行时这些检查的一个例子如下。
    05-06 16:58:39.353  9623 10651 I ActivityManager: Start proc 15027:sg.vantagepoint.uncrackable3/u0a92 for activity sg.vantagepoint.uncrackable3/.MainActivity
    05-06 16:58:40.096 15027 15027 V UnCrackable3: CRC[lib/armeabi/libfoo.so] = 1285790320
    05-06 16:58:40.096 15027 15027 V UnCrackable3: CRC[lib/mips/libfoo.so] = 839666376
    05-06 16:58:40.096 15027 15027 V UnCrackable3: CRC[lib/armeabi-v7a/libfoo.so] = 2238279083
    05-06 16:58:40.096 15027 15027 V UnCrackable3: CRC[lib/arm64-v8a/libfoo.so] = 2185392167
    05-06 16:58:40.096 15027 15027 V UnCrackable3: CRC[lib/mips64/libfoo.so] = 2232215089
    05-06 16:58:40.096 15027 15027 V UnCrackable3: CRC[lib/x86_64/libfoo.so] = 1653680883
    05-06 16:58:40.097 15027 15027 V UnCrackable3: CRC[lib/x86/libfoo.so] = 1546037721
    05-06 16:58:40.097 15027 15027 V UnCrackable3: CRC[classes.dex] = 2378563664
因为我们不想patch二进制代码，所以我们不会深入这些检查。
Root检查：Java包sg.vantagepoint.util有一个称为RootDetection的类，最多可执行三次检查，以检测运行该应用程序的设备是否已经root。
checkRoot1()检查文件系统中是否存在二进制文件su。
checkRoot2()检查BUILD标签test-keys。默认情况下，来自Google的ROM是使用release-keys标签构建的。如果test-keys存在，这可能意味着在设备上构建的Android是测试版或非Google官方发布的。
checkRoot3()检查危险的root应用程序、配置文件和守护程序的存在。
负责执行root检查的Java代码如下。
    package sg.vantagepoint.util;
    import android.os.Build;
    import java.io.File;
    public class RootDetection {
        public RootDetection() {
            super();
        }
        public static boolean checkRoot1() {
            boolean bool = false;
            String[] array_string = System.getenv("PATH").split(":");
            int i = array_string.length;
            int i1 = 0;
            while(i1 = i) {
                    return false;
                }
                else if(!new File(array_string[i1]).exists()) {
                    ++i1;
                    continue;
                }
                return bool;
            }
            return false;
        }
    }
**2.逆向native代码(libfoo.so)**
Java(Dalvik)和native代码通过JNI调用进行通信。当Java代码启动时将加载native代码，并使用包含Java密钥的一堆字节对其进行初始化。除了保护secret的函数之外，native代码不会被混淆。此外，它删除一些符号并且不是静态编译的。重要的是IDA
Pro可能不会将JNI回调检测为函数。为了解决这个问题，只需转到exports窗口在导出的Java_sg_vantagepoint_uncrackable3_MainActivity_*按下P键。之后，您还需要在其函数声明处按Y键重新定义函数参数。您可以定义JNIEnv*对象以获得更好的反编译结果，如本节中所示的类C代码。
native构造函数：ELF二进制文件包含一个称为.init_array的部分，它保存了当程序启动时将执行的函数的指针。如果我们观察在其构造函数中的ARM共享对象，那么我们可以在偏移0x19cb0处看到函数指针sub_73D0:(在IDA
Pro中使用快捷键ctrl+s显示sections)。
    .init_array:0000000000019CB0                   ; ==================================================
    .init_array:0000000000019CB0
    .init_array:0000000000019CB0                   ; Segment type: Pure data
    .init_array:0000000000019CB0                                   AREA .init_array, DATA,
    .init_array:0000000000019CB0                                   ; ORG 0x19CB0
    .init_array:0000000000019CB0 D0 73 00 00 00 00+                DCQ sub_73D0
    .init_array:0000000000019CB8 00 00 00 00 00 00+                ALIGN 0x20
    .init_array:0000000000019CB8 00 00                   ; .init_array   ends
    .init_array:0000000000019CB8
    .fini_array:0000000000019CC0                   ; ==================================================
Radare2最近也支持JNI
init方法的识别。感谢@pancake和@alvaro_fe，他们在radare2快速实现了支持JNI入口点。如果您正在使用radare2，只需使用命令ie即可显示入口点。
构造函数sub_73D0()执行以下操作。
①pthread_create()函数创建一个新线程执行monitor_frida_xposed函数。此函数已被重命名为这个名称，因为Frida和Xposed这两个框架不间断地被检查，以避免hook操作。
②在从Java secret初始化之前，xorkey_native的内存被清除。
③codecheck变量是确定完整性的计数器。之后，在计算native
secret之前会检查它。因此，我们需要这个函数结束之后获得正确的codecheck值以进入最终的验证。
sub_73D0()(重命名为init)的反编译代码如下。
    int init()
    {
      int result; // r0@1
      pthread_t newthread; // [sp+10h] [bp-10h]@1
      result = pthread_create(&newthread, 0, (void *(*)(void *))monitor_frida_xposed, 0);
      byte_9034 = 0;
      dword_9030 = 0;
      dword_902C = 0;
      dword_9028 = 0;
      dword_9024 = 0;
      dword_9020 = 0;
      xorkey_native = 0;
      ++codecheck;
      return result;
    }
native反hook检查：monitor_frida_xposed函数执行几个安全检查，以避免人们使用DBI框架。如果我们仔细观察以下反编译代码，那么可以看到几个DBI框架被列入黑名单。这种检查在无限循环中进行一遍又一遍，如果检测到任何DBI框架，则调用goodbye函数并且应用程序崩溃。该函数的反编译代码如下。
    void __fastcall __noreturn monitor_frida_xposed(int a1)
    {
      FILE *stream; // [sp+2Ch] [bp-214h]@1
      char s; // [sp+30h] [bp-210h]@2
      while ( 1 )
      {
        stream = fopen("/proc/self/maps", "r");
        if ( !stream )
          break;
        while ( fgets(&s, 512, stream) )
        {
          if ( strstr(&s, "frida") || strstr(&s, "xposed") )
          {
            _android_log_print(2, "UnCrackable3", "Tampering detected! Terminating...");
            goodbye();
          }
        }
        fclose(stream);
        usleep(500u);
      }
      _android_log_print(2, "UnCrackable3", "Error opening /proc/self/maps! Terminating...");
      goodbye();
    }
下面显示了篡改检测的示例，其中应用程序使用信号SIGABRT(6)中止。
    ActivityManager: Start proc 7098:sg.vantagepoint.uncrackable3/u0a92 for activity sg.vantagepoint.uncrackable3/.MainActivity
    UnCrackable3: Tampering detected! Terminating...
    libc    : Fatal signal 6 (SIGABRT), code -6 in tid 7112 (nt.uncrackable3)
            : debuggerd: handling request: pid=7098 uid=10092 gid=10092 tid=7112
    DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
    DEBUG   : Build fingerprint: 'google/bullhead/bullhead:7.1.1/N4F26O/3582057:user/release-keys'
    DEBUG   : Revision: 'rev_1.0'
    DEBUG   : ABI: 'arm64'