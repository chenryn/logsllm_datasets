# 一、Windows Docker 入门
Docker 是一个应用平台。这是一种在被称为**容器**的独立轻量级单元中运行应用的新方式。容器是运行应用的一种非常高效的方式，比**虚拟机** ( **虚拟机**)或裸机服务器要高效得多。容器在几秒钟内启动，它们不会给应用的内存和计算需求增加任何开销。Docker 完全不知道它可以运行的应用类型。你可以经营一家全新的.NET Core 应用在一个容器中，一个 10 年前的 ASP.NET 2.0 WebForms 应用在同一服务器上的另一个容器中。
容器是独立的单元，但它们可以与其他组件集成。您的网络表单容器可以访问托管在.NET 核心容器。你的.NET Core 容器可以访问运行在容器中的 SQL Server 数据库，或者运行在单独机器上的 SQL Server 实例。您甚至可以用运行 Docker 的 Linux 和 Windows 机器的混合来建立一个集群，并让 Windows 容器透明地与 Linux 容器通信。
大大小小的公司都在转向 Docker，以利用这种灵活性和效率。Docker 平台背后的公司 Docker，Inc .的案例研究表明，通过迁移到 Docker，您可以将硬件需求减少 50%，并将发布时间减少 90%，同时仍然保持应用的高可用性。这一显著减少同样适用于内部数据中心和云。
效率不是唯一的收获。当您打包应用以在 Docker 中运行时，您会获得可移植性。您可以在笔记本电脑上的 Docker 容器中运行您的应用，它在数据中心的服务器上和任何云中的虚拟机上都将以完全相同的方式运行。这意味着您的部署过程简单且无风险，因为您部署的工件与您测试的工件完全相同，并且您还可以在硬件供应商和云提供商之间自由选择。
另一个巨大的动力是安全性。容器增加了应用之间的安全隔离，因此您可以确信，如果一个应用受到危害，攻击者就不能继续危害同一主机上的其他应用。该平台还有更广泛的安全优势。Docker 可以扫描打包应用的内容，并提醒您应用栈中的安全漏洞。您还可以对容器映像进行数字签名，并将 Docker 配置为仅从您信任的映像作者处运行容器。
Docker 由开源组件构建，发货为 **Docker 社区版** ( **Docker CE** )和 **Docker 企业**。Docker CE 免费使用，每月发布一次。Docker Enterprise 是付费订阅；它具有扩展的功能和支持，并且每季度发布一次。Docker CE 和 Docker Enterprise 都在 Windows 上可用，两个版本都使用相同的底层平台，因此您可以以相同的方式在 Docker CE 和 Docker Enterprise 上的容器中运行您的应用。
本章让您开始使用 Docker 容器。它包括:
*   Docker 和窗口容器
*   理解关键的 Docker 概念
*   在 Windows 上运行 Docker
*   用这本书了解 Docker
# 技术要求
您可以使用 GitHub 资源库[https://GitHub . com/six eyes/docker-on-window/tree/second edition/ch01](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch01)跟随本书的代码示例。在本章中，您将学习如何安装 Docker 唯一的先决条件是带有 1809 微软更新或 Windows Server 2019 的 Windows 10。
# Docker 和窗口容器
Docker 最初是在 Linux 上开发的，它利用了 Linux 的核心特性，但使使用容器处理应用工作负载变得简单而高效。微软看到了这一潜力，并与 Docker 工程团队密切合作，为 Windows 带来了同样的功能。
Windows Server 2016 是第一个为运行 Docker 容器而构建的 Windows 版本；Windows Server 2019 延续了这一创新，显著提高了 Windows 容器的功能和性能。您可以在 Windows 10 上运行与在生产环境中的 Windows Server 上运行的开发和测试相同的 Docker 容器。目前，您只能在 Windows 上的容器中运行 Windows 应用，但微软也正在增加对在 Windows 上运行的 Linux 应用容器的支持。
你需要知道的第一件事是容器和窗口用户界面之间没有集成。容器仅用于服务器端应用工作负载，如网站、应用接口、数据库、消息队列、消息处理程序和控制台应用。您不能使用 Docker 来运行客户端应用，如. NET WinForms 或 WPF 应用，但您可以使用 Docker 来打包和分发应用，这将为您的所有应用提供一致的构建和发布过程。
容器在 Windows Server 2019 和 Windows 10 上的运行方式也有区别。使用 Docker 的用户体验是相同的，但是容器的托管方式是不同的。在 Windows Server 上，服务于应用的进程实际上是在服务器上运行的，容器和主机之间没有任何层。在容器中，您可能会看到`w3wp.exe`运行以服务网站，但该进程实际上是在服务器上运行的——如果您有 10 个运行的 web 容器，您将在服务器上的任务管理器中看到 10 个`w3wp.exe`实例。
Windows 10 没有和 Windows Server 2019 一样的操作系统内核，所以为了给容器提供 Windows Server 内核，Windows 10 在一个非常轻的 VM 中运行每个容器。这些被称为 **Hyper-V 容器**，如果你在 Windows 10 的一个容器中运行一个网络应用，你将看不到`w3wp.exe`在主机上运行——它实际上运行在 Hyper-V 容器中的一个专用 Windows Server 内核中。
This is the default behavior, but in the latest versions of Windows and Docker you can run Windows Server containers in Windows 10, so you can skip the extra overhead of running a VM for each container.
理解 Windows Server 容器和 Hyper-V 容器之间的区别很好。您使用相同的 Docker 工件和相同的 Docker 命令，因此过程是相同的，但是使用 Hyper-V 容器会稍微影响性能。在本章的后面，我将向您展示在 Windows 上运行 Docker 的选项，您可以选择最适合自己的方法。
# Windows 版本
Windows Server 容器中的应用直接在主机上运行进程，服务器上的 Windows 版本需要与容器内的 Windows 版本相匹配。本书中的所有示例都是基于使用 Windows Server 2019 的容器，这意味着您需要一台 Windows Server 2019 机器来运行它们——或者是带有 1809 更新的 Windows 10(使用`winver`命令会告诉您拥有哪个更新版本)。
如果您将容器作为 Hyper-V 容器运行，则可以运行为不同版本的 Windows 构建的容器。这为您提供了向后兼容性，因此您可以在运行 Windows Server 2019 的计算机上运行为 Windows Server 2016 构建的容器。
# Windows 授权
Windows 容器与运行 Windows 的服务器或虚拟机没有相同的许可要求。Windows 是在主机级别而不是容器级别获得许可的。如果在一台服务器上运行 100 个 Windows 容器，您只需要一个服务器许可证。如果您当前使用虚拟机来隔离应用工作负载，将会节省大量成本。删除虚拟机层并直接在服务器上的容器中运行应用，可以消除所有虚拟机的许可要求以及所有这些机器的管理开销。
Hyper-V 容器有单独的许可。在 Windows 10 上，您可以运行多个容器，但不能用于生产部署。在 Windows Server 上，您还可以在 Hyper-V 模式下运行容器以增强隔离。这在多租户场景中非常有用，在多租户场景中，您需要预期并减轻不利的工作负载。Hyper-V 容器是单独许可的，在高容量环境中，您需要 Windows Server Datacenter 许可证才能在没有单独许可证的情况下运行 Hyper-V 容器。
微软和 Docker，Inc .已经合作，免费为 Docker Enterprise 提供 Windows Server 2016 和 Windows Server 2019。Windows Server 许可证的价格包括 Docker 企业引擎，它支持在容器中运行应用。如果您对容器或 Docker 服务有问题，您可以向微软提出，他们可以继续将其上报给 Docker 的工程师。
# 理解关键的 Docker 概念
Docker 是一个非常强大但非常简单的应用平台。您可以在几天内开始在 Docker 中运行您现有的应用，并在几天内准备好投入生产。这本书将带你通过许多例子.NET 框架和。在 Docker 中运行的核心应用。您将学习如何在 Docker 中构建、发布和运行应用，并继续学习高级主题，如解决方案设计、安全性、管理、仪器仪表以及**持续集成和持续交付** ( **CI/CD** )。
首先，您需要理解 Docker 的核心概念:映像、注册表、容器和编排器，并理解 Docker 实际上是如何运行的。
# Docker 引擎和 Docker 命令行
Docker 作为后台 Windows 服务运行。这项服务管理着每一个正在运行的容器——它被称为 Docker 引擎。该引擎公开了一个 REST API，供消费者使用容器和其他 Docker 资源。这个 API 的主要消费者是 Docker **命令行工具** ( **CLI** )，这是我在本书的大部分代码示例中使用的工具。
Docker REST API 是公开的，并且有由该 API 提供动力的替代管理工具，包括像 Portainer(它是开源的)和 Docker **通用控制平面** ( **UCP** )(它是一个商业产品)这样的 web UIs。Docker CLI 使用起来非常简单——您可以使用类似`docker container run`的命令在容器中运行应用，使用`docker container rm`移除容器。
您还可以将 Docker API 配置为可远程访问，并将 Docker CLI 配置为连接到远程服务。这意味着您可以使用笔记本电脑上的 Docker 命令管理云中运行的 Docker 主机。允许远程访问的设置还可以包括加密，因此您的连接是安全的，在本章中，我将向您展示一种简单的配置方法。
一旦您运行了 Docker，您将从从映像运行容器开始。
# Docker 映像
Docker 映像是一个完整的应用包。它包含一个应用及其所有依赖项:语言运行库、应用宿主和底层操作系统。从逻辑上讲，映像是一个单独的文件，并且是一个可移植的单元——您可以通过将映像推送到 Docker 注册表来共享您的应用。任何有访问权限的人都可以自己提取映像，并在容器中运行您的应用；它对他们和对你的行为方式完全一样。
这里有一个具体的例子。一款 ASP.NET 网络表单应用将在视窗服务器的互联网信息服务上运行。要在 Docker 中打包应用，您需要构建一个基于 Windows Server Core 的映像，添加 IIS，然后添加 ASP.NET，复制您的应用，并将其配置为 IIS 中的网站。您可以用一个名为 **Dockerfile** 的简单脚本描述所有这些步骤，并且您可以为需要执行的每个步骤使用 PowerShell 或批处理文件。
您可以通过运行`docker image build`来构建映像。输入是 Dockerfile 和需要打包到映像中的任何资源(如 web 应用内容)。输出是 Docker 映像。在这种情况下，映像的逻辑大小约为 5 GB，但其中 4 GB 将是您用作基础的 Windows Server Core 映像，并且该映像可以作为基础在许多其他映像之间共享。(我将在 [第 4 章](04.html)*与 Docker* *注册管理机构*分享映像图层和缓存更多内容。)
Docker 映像就像应用的一个版本的文件系统的快照。映像是静态的，您可以使用映像注册表来分发它们。
# 映像注册表
注册表是 Docker 映像的存储服务器。注册中心可以是公共的，也可以是私有的，还有免费的公共注册中心和商业注册服务器，允许对映像进行细粒度的访问控制。映像以唯一的名称存储在注册表中。任何有权限的人都可以通过运行`docker image push`上传图片，通过运行`docker image pull`下载图片。
最受欢迎的注册中心是 **Docker Hub** ，这是 Docker 托管的公共注册中心，但其他公司也托管自己的注册中心来分发自己的软件:
*   Docker Hub 是默认的注册中心，它在开源项目、商业软件和致力于私人项目的团队中变得非常受欢迎。Docker Hub 上存储了数十万个映像，每年为数十亿个拉取请求提供服务。您可以将 Docker Hub 映像配置为公共或私有。它适用于内部产品，您可以限制对映像的访问。您可以设置 Docker Hub 从 GitHub 中存储的 Docker 文件自动构建映像–目前，这仅支持基于 Linux 的映像，但 Windows 支持应该很快就会到来。
*   **微软容器注册中心** ( **MCR** )是微软托管他们自己的视窗服务器核心和纳米服务器的 Docker 映像以及预先配置的映像的地方.NET 框架。微软的 Docker 映像可以免费下载和使用。它们只在 Windows 机器上运行，这是应用 Windows 授权的地方。
在典型的工作流中，您可能会将映像构建为配置项管道的一部分，并在所有测试都通过的情况下将它们推送到注册表。您可以使用 Docker Hub，也可以运行自己的私有注册表。然后，该映像可供其他用户在容器中运行您的应用。
# Docker 容器
容器是从映像创建的应用的实例。该映像包含整个应用栈，它还指定了启动应用的进程，因此 Docker 知道在运行容器时要做什么。您可以从同一个映像运行多个容器，也可以用不同的方式运行容器。(我将在下一章中描述它们。)
您用`docker container run`启动应用，指定映像的名称和配置选项。分发内置于 Docker 平台中，因此如果您在尝试运行容器的主机上没有映像的副本，Docker 将首先提取映像。然后它启动指定的进程，您的应用在一个容器中运行。
容器不需要固定的 CPU 或内存分配，应用的进程可以根据需要使用尽可能多的主机计算能力。您可以在普通的硬件上运行几十个容器，除非应用都试图同时使用大量的 CPU，否则它们会愉快地并发运行。您还可以启动带有资源限制的容器，以限制它们可以访问的 CPU 和内存量。
Docker 提供容器运行时，以及映像打包和分发。在小型环境和开发中，您将在单个 Docker 主机上管理单个容器，该主机可以是您的笔记本电脑或测试服务器。当您转向生产时，您将需要高可用性和扩展选项，这与 Docker Swarm 这样的编排器是分不开的。
# DockerSwarm