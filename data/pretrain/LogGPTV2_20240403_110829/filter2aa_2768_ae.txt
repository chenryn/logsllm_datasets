node before it), all the usual array transfer, verification and modification procedures
are performed.
11.9.  The X-node forwards the array, in its new state, to the next node in the sequence,
still being connected from the first round.
11.10.  The X-node then checks to see if the updated expected IP address and port number
of the next node (item 9.4 in the setup package specification above) is the same as
the IP address and port of the currently connected next node. Under normal
circumstances it should never be the same, and in this case the X-node will
disconnect its current forward connection, and attempt to create a new forward
connection to the updated IP address and port for the stated next node (item 9.4 in
the setup package specification above) also using the updated ID (item 9.6 in the
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
25(68)
setup package specification above) for this connection. Several connection attempts
might be needed at this point, since the target X-node might not have started
listening for this incoming connection yet.
11.11.  The X-node forwards the array, in its new state, to this new next node in the
sequence too.
11.12.  The intermediate Y-node between the two adjacent X-nodes has now been fully
disconnected, and the final state of the routing path has been established between
the current X-node and the one before it in the sequence.
11.13.  The X-node now finishes the procedure by generating its unique set of stream
encryption keys, according to the seeds and parameters given in the initial setup
package (item 5.8 in the setup package specification above). This set of keys will be
used at a later time, when establishing routing tunnels over the routing path.
•
For the terminating X-node only, if the path is an entry path:
11.14.  The terminating X-node expects the previous (Y-)node to disconnect the connection
immediately after having received the package array from it. If the expected IP
address (item 9.3 in the setup package specification above) and the updated ID (item
9.5 in the setup package specification above) are empty (all zero), the terminating X-
node also doesn’t expect any new incoming connection from a previous node, since
it is located at the end of the routing path, and in this case only has the multiple Y-
nodes in front of it (this will only happen in half the cases, i.e. where the randomly
chosen beginning of the node sequence is the one with the multiple Y-nodes).
11.15.  If the created routing path is an entry path, after having done everything else that a
normal intermediate X-node is supposed to do, the terminating X-node proceeds to
submit the new pre-signed routing table entry (item 9.8 in the setup package
specification above) for the current routing path to the AP address-indexed routing
table in the global network database, for the associated AP address (item 9.7 in the
setup package specification above). The entry path is now officially announced, and
any user on the anonymous network can look it up in the global network database,
and use it to establish an anonymized connection (i.e. anonymized for the node that
created the routing path) to the anonymized node.
11.16.  If the created routing path is not an entry path, it will skip the previous step (11.15),
and will instead be waiting for requests for outgoing connections from the
anonymized node that owns the routing path (thus being located at its other end).
This will be discussed further in the section about establishment of routing tunnels
below.
Figure 11. Routing path creation, step 11
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
26(68)
12.  If all goes well, the second setup package array will traverse the entire sequence of nodes,
just like the first one, and reach the anonymized node with a connection from the Y-node
(and subsequently its preceding X-node) at the end of the sequence, where it will be
checked for validity. This completes the second half of the routing path setup procedure, and
the routing path is now successfully and securely set up, ready for immediate use.
Figure 12. Routing path creation, step 12
At this point, we can clearly recognize the exact routing path structure that has been exemplified
previously in this paper, and the process is complete.
Figure 13. The completed routing path, recognizable from previously in this paper
We will now proceed with further explanation of some of the details in the process that has just
been outlined, why things are done as they are, and in some cases in even more detail how they
are done. After that, we will move on to explaining how routing tunnels (both of the entry and exit
kind) are established over an existing routing path, and subsequently used for secure and
anonymous communication.
   = Anonymized network node
   = Selected intermediary network node
   = Selected terminating intermediary network node
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
27(68)
7.1.2.   
Secure Establishment of Routing Paths – Low-Level Details
In this section, all the steps from the previous section (i.e. the “low level overview”) will be
repeated again, in grey and without the figures, and comments will be added (in normal black) to
further explain the design decisions behind each step, where necessary.
1.  The anonymized node (to be) selects a random set (with some exceptions to be discussed
later) of x nodes from the IP address/port table of the network database, and fetches all their
stored info, like e.g. their path building certificate (containing the public part of an
asymmetrical encryption key-pair) and their communication certificate (containing a valid
SSL certificate). These selected nodes will be called X-nodes from this point on, and are the
ones that will constitute the final routing path.
First of all, about this “random set” of selected nodes, the only real requirement for randomness is
that the anonymized node can be confident that no other node, or reasonably large set of nodes,
has been able to influence or bias the contents of this set of nodes. Once this has been
ascertained (by means of being able to trust the randomness of the returned results from the
network database in this aspect, which will be discussed in more detail later), the anonymized
node itself can actually make the selected set of nodes even more secure, by applying some
extra restrictions to the nodes in the set. For example, by analyzing the IP addresses in the
“initial” random set acquired from the network database, it can make sure that none of them are in
the same or adjacent A, B or C nets, registered to the same ISP, or even that not too many of
them are located in the same country (by using geolocation). These restrictions would reduce, to
an even lower level than the initially already low one of a fully random selection, the risk of the
selected set of nodes being controlled, or in any way monitored, by the same party.
Taking it even one step further, anonymized nodes could have the option to keep a list of “trusted
nodes”, i.e. nodes that they know are not controlled by an attacker, e.g. nodes owned by their
friends etc. If just one such node is injected into each selected set of nodes, it can be completely
ascertained that not all the nodes in the selected set are controlled by the same attacker. Due to
how the protocol is designed, this is all that is needed to guarantee that no other node in the
selected set will be able to determine the IP address of the anonymized node, even if all the other
nodes were controlled by the same attacker. Even without these trusted nodes, however, the
probability of an attacker controlling every node in a randomly selected set with the above
restrictions is extremely low, and decreases for each new node that joins the anonymous
network.
2.  The anonymized node selects a similarly random set of y nodes from the IP address/port
table of the network database, and fetches all their stored info, like e.g. their path building
certificate, containing the public part of an asymmetrical encryption key-pair and their
communication certificate (containing a valid SSL certificate). These selected nodes will be
called Y-nodes from this point on.
For these Y-nodes, the same criteria and possibilities for selection of the nodes apply as for the
X-nodes in step 1 above.
3.  The anonymized node chooses, arbitrarily, an ordered sequence made up of all the X-nodes
and Y-nodes, being constructed in a way that:
• 
No two X-nodes are adjacent to each other.
• 
A Y-node is located in one end of the sequence.
• 
A number of Y-nodes equal to the total number of X-nodes minus one (although always
at least one), are located adjacent to each other in the other end of the sequence.
• 
One end of the sequence is chosen at random to be the beginning of the sequence.
This order should be chosen in a securely random way, since if there is any way to influence or
predict the order in which the nodes will be placed, an attacker could possibly use this knowledge
to increase the probability of a successful attack (e.g. by making sure that its nodes are always
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
28(68)
placed first and last in all routing paths, which would in turn increase the probability of successful
attacks involving massive traffic pattern correlation).
As for the underlying reasons for arranging the nodes in this manner, some further background
information and explanation is required.
First of all, it needs to be understood that our main objective with these routing paths to begin
with is to separate the distance between the knowledge of the IP address of the anonymized
node and the knowledge of the AP address information connected to it. The concept of routing
paths accomplishes this by placing the IP address knowledge in one end of a sequence of nodes,
and the AP address knowledge at the other end of the same sequence of nodes (i.e. the routing
path), while at the same time not allowing or making available any method for these nodes to
forward any intelligible information to any other node in the sequence other than the adjacent
ones (which can of course never be prevented, since adjacent nodes know the IP addresses of
each other, and can thus easily always establish out-of-band communication if they were so
inclined). Thus, for each intermediate node between the ends of the sequence, the probability
decreases for the situation to arise where all the nodes in the sequence know each other, and
thus will be able to know each other’s identity (IP address) and be able to communicate out-of-
band in order to aggregate their individual knowledge to form the complete set of knowledge, i.e.
the connection between the IP address information and the AP address information.
Second of all, the reason for the “circular” communication pattern during establishment of routing
paths needs to be understood. It arises from the simple fact that it enables the use of pure one-
way communication between all intermediary nodes (i.e. the X and Y-nodes) during the routing
path establishment process, which has two substantial primary advantages. The first is that there
is an extreme increase in complexity when going from one-way communication to two way
communication in any protocol. The many cases and special cases arising from increased
complexity can, and will always, be exploited by attackers for their own purposes. In a protocol
such as this, where it is critical that not even a single bit of information can possibly be
communicated between non-adjacent nodes in the path, such an increase in complexity would be
nearly fatal, and has, necessarily, been avoided at all costs. The second advantage of the circular
design is that even if an attacker should somehow find a weakness in the design of the protocol,
thus being able to sneak in extra data to be communicated to other, non-adjacent, nodes in the
routing path, this becomes theoretically impossible without first having this data passing through
the anonymized node that owns the routing path. This node will have much greater possibilities
for detecting such data, and due to the current design of the protocol, it never forwards any
received data in the first place.
Having established these basic design criteria for the reasons stated, we can now much better
explain and motivate arranging the nodes as instructed in this step.
The reason for having "a number of Y-nodes equal to the total number of X-nodes minus one,
located adjacent to each other in one end of the sequence", is because we don’t want, at any
point, to have a shorter distance between the anonymized node and the terminating X-node at
the other end of the intended routing path than we will have in the final path (where “distance”
between two nodes denotes the number of randomly selected intermediary nodes between
them). These Y-nodes thus work as a temporary “buffer” to maintain this distance during the
creation process of the routing path. The “total number of X-nodes minus one” will always be
equal to the distance between the anonymized node and the terminating X-node in the fully
established routing path, and thus this number of Y-nodes will assure that the distance, and thus
the security, selected by the anonymous node to begin with, will also be maintained throughout
the entire setup process of the routing path.
The reason for having “no two X-nodes adjacent to each other” and “a Y-node located in one end
of the sequence” (where the other end has the multiple Y-nodes discussed above) is that no X-
node should be able to know which nodes will be adjacent to it in the final routing path, and thus
be able to influence, interfere or otherwise behave any differently during the path setup process
based on such information (an X-node controlled by an attacker would always want to have other
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
29(68)
X-nodes controlled by the same attacker adjacent to it, in order to achieve a fully compromised
path).
Finally, the reason for “choosing one end of the sequence at random to be the beginning of the
sequence” is that the direction in which the one-way communication occurs during the setup of
the path should have no connection to the directions in which the anonymized node and the
terminating node at the ends of the path are located. That is, the intermediary nodes should not
be able to tell which direction of the path is which. Combined with the fact that a routing path can
be either an entry path, an exit path, or both, the intermediary nodes will never be able to derive
at which end of the path the anonymized node is located, not even by taking note of the direction
in which tunnels are established over the path once it is fully setup.
4.  The anonymized node generates a temporary asymmetrical cryptographic key-pair, to be
used only during the setup procedure of this specific routing path. The private key of this
key-pair will be called the routing path construction key, and the public key of this key-pair
will be called the routing path construction certificate, from now on.
If the same routing path construction key-pair would be used for multiple routing path setup
procedures, i.e. if it would not be regenerated each time, it could be used by an attacker, who has
had his nodes selected for inclusion in more than one of them, to correlate different routing paths
created by the same anonymized node. In such case, if ever only one routing path of the
anonymized node were to be compromised, no matter how unlikely, the routing path construction
key-pair could be used to bind all previous semi-compromised routing paths to this same
anonymized node, which would be a completely unnecessary weakness.
5.  The anonymized node prepares a special unique “setup package” for each individual X-node
and Y-node, being asymmetrically encrypted with the public key of the individual recipient,
symmetrically encrypted with the 128-bit ID of its incoming connection, and signed with the
routing path construction key from the previous step. The package contains the following
(just as with all other steps, this will be explained in more detail in the next section):
5.1.  
IP address of the expected previous node in the sequence.
This will be used by each node in the routing path to verify that the node contacting them is the
one intended.
5.2.  
IP address and port number of the next node in the sequence.
This will be used by each node in the routing path to pass on the package array after having
completed its own processing.
5.3.  
The routing path construction certificate, generated by the anonymized node in the
previous step.
This will be used by each node in the routing path to verify the authenticity of the package array
in the second round of the routing path creation process.
5.4.  
A random 128-bit ID, associated with the connection from the previous node.
This will be used by each node in the routing path to verify that the node contacting them is the
one intended.
5.5.  
A random 128-bit ID, associated with the connection to the next node.
This will be used by each node in the routing path to authenticate themselves to the next node in
the routing path.
5.6.  
The communication certificate of the next and previous node.
These SSL certificates will be used to establish two-way authenticated and securely encrypted
communication between all nodes in the routing path.
5.7.  
A constant number of tuples containing a 128-bit seed, a size, an index and flags for
creation of dummy setup packages (more info about this in the details later).
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
30(68)
These will be used by each node in the routing path to generate dummy packages to be inserted
into the package array before it is passed on to the next node. Theses dummy packages, in turn,
exist in part to prevent the possibility of any node in the routing path being able to determine how
many nodes make up the path in total, and how many nodes that remain beyond it in the path
before the anonymized node is reached, and in part to counteract the special case vulnerability of
the first Y-node in the routing path creation sequence trying to provide an entirely fake routing
path back to the anonymized node (despite not ever being able to know if its preceding node is
really the anonymized node or not, but still “taking a chance”).
5.8.  
A constant number of 128-bit seeds for stream encryption key generation + the
number of keys to be generated.
These seeds both guarantee the security of the stream encryption keys used in all tunnels being
created over the routing path, and also guarantee that the anonymized node will be able to
recover these keys for all such tunnels.
5.9.  
A collection of flags, telling if the node is an intermediate X-node, a terminating X-