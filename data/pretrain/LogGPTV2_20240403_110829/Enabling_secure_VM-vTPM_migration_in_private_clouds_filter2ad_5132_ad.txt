needs more detailed investigation.
Other vTPM architecture designs could also help to im-
prove performance. All vTPMs on a given hardware plat-
form can run on separate, dedicated VM referred to as vTPM
manager [4]. Such a dedicated VM can be migrated using
secure VM migration as well. It is also easy to associate each
vTPM to its VM in such cases. However, when all vTPMs
run in a privileged VM, additional process migration tech-
niques have to be devised to migrate the vTPMs. Further
work is required to devise such migration and compare its
properties and performance to the approach implemented in
this work.
5. RELATED WORK
Previous work on VM-vTPM migration includes several
protocol proposals in [4, 5, 7] and an implementation in the
Xen hypervisor [9]. All protocols meet the conﬁdentiality of
the VM-vTPM during migration. However, only [4] used an
integrity protection mechanism to ensure that migrated data
has not been tampered with. For the other protocols, this is
implicitly handled by the encryption mechanism in a sense
that any modiﬁcation of the encrypted VM image would re-
(a) Source CPU usage
(b) Destination CPU usage
Figure 5: CPU usage of prototype implementation for diﬀerent encryption ciphers and VM RAM sizes. The results
are validated over ﬁve independent migration protocol executions. We also show the corresponding 95% conﬁdence
intervals.
sult with high likelihood in problems with VM resumption
at the destination. There are no means for the migration
process to understand the causes of failed resumption (e.g.,
due to intentionally corrupted VM image during transfer or
server execution problems). Measuring the system integrity
before migration was suggested in [5, 7]. While in [5], the
integrity of the destination is checked as part of the secure
channel establishment, in [7] the process is not completely
speciﬁed. None of these works checked the integrity of the
migration initiator (source). Furthermore, the initiator au-
thenticity was also not considered as a requirement in the
above works. We believe that this is an important feature
for DoS and collocation attack prevention.
Previous work on vTPM architectures include proposals
for vTPM key hierarchies [4–8]. Creating vEK credentials
using the underlying TPM EK [5] does not comply with
the EK usage restrictions. Moreover, using the TPM AIK
to sign vEK or vAIK credentials makes these keys non-
migratable and hence, require fresh key generation at the
destination. Finally, obtaining vEK or vAIK credentials
from a trusted third party (Privacy CA) increases the ex-
ternal dependencies and is not easy to realize in practice.
Besides, one would have to inform the Privacy CA on every
migration because the only basis for issuing such a creden-
tial can be the underlying platform.
In [6], it is unclear
how vTPMs can be migrated if the TPM EK and AIK are
shared between several vTPMs. In [8], generation of vTPM
keys and credentials has been only discussed from the per-
spective of the types of TPM keys that could be used in a
virtual TPM.
Virtual machines (VMs) can be migrated in three ways,
namely, stop-transfer-start paradigm, suspend-transfer-re-
sume paradigm and using live migration in increasing or-
der of eﬃciency [24]. The ﬁrst two techniques either stop
or suspend the VM before its transfer to the destination re-
spectively. Live migration techniques are the most popular
because they minimize VM downtime [24, 25]. A summary
of live migration techniques can be found in [28]. Further-
more, VM migration may involve the transfer of the VM
RAM only or the transfer of the VM RAM along with the
disk image [25].
6. CONCLUDING REMARKS
In this work, we considered the problem of enabling se-
cure VM-vTPM migration in private cloud virtualized en-
vironments. We analyzed the requirements for secure VM-
vTPM migration in internal virtualized environments. We
also proposed a vTPM key hierarchy that provides robust
functionality to construct secure VM-vTPM migration pro-
tocols. Our key hierarchy is compliant with the TPM key
usage recommendations, minimizes key regeneration after
vTPM migration and prevents vTPM transaction linking.
By leveraging on this hierarchy, we proposed and analyzed
a secure VM-vTPM protocol and we evaluated its perfor-
mance by means of implementation using the Xen hypervi-
sor. This implementation demonstrates that our proposed
secure VM-vTPM migration scheme can be directly inte-
grated in open-source virtual systems. Preliminary results
on the performance of our scheme showed that—compared
to the cost of encrypting data—our migration scheme only
incurs negligible overhead in the regeneration of the vTPM
keys at the destination. The implementation is open-source
and available online [10]. Finally, we also discussed how our
scheme can be extended to support live migration of VM-
vTPMs.
In terms of future work, we intend to extend the imple-
mentation to support diﬀerent vTPM key hierarchies and
analyze the performance of VM-vTPM migration in real-
istic virtualized computing environments. We also plan to
extend our work to possibly secure live VM-vTPM migra-
tion.
Acknowledgements
The authors thank Dr. Aur´elien Francillon for his help dur-
ing the implementation. The authors would also like to ac-
knowledge the anonymous reviewers for their helpful feed-
back and comments. The work presented in this paper was
(cid:1)(cid:3)(cid:2)
partly supported by the Swiss National Science Foundation
under Grant 200021-127294.
7. REFERENCES
[1] TCG Architecture Overview, v1.4.
http://www.trustedcomputinggroup.org.
[2] Amazon Elastic Compute Cloud,
http://aws.amazon.com/ec2/.
[3] Tal Garﬁnkel and Mendel Rosenblum. When virtual is
harder than real: security challenges in virtual
machine based computing environments. In
HOTOS’05: Proceedings of the 10th conference on Hot
Topics in Operating Systems, pages 20–20, 2005.
[4] Stefan Berger, Ram´on C´aceres, Kenneth A. Goldman,
Ronald Perez, Reiner Sailer, and Leendert van Doorn.
vTPM: Virtualizing the trusted platform module. In
USENIX-SS’06: Proceedings of the 15th conference on
USENIX Security Symposium, pages 305–320, 2006.
[5] Frederic Stumpf and Claudia Eckert. Enhancing
Trusted Platform Modules with Hardware-Based
Virtualization Techniques. In SECURWARE ’08:
Proceedings of the 2008 Second International
Conference on Emerging Security Information,
Systems and Technologies, pages 1–9, 2008.
[6] Paul England and Jork Loeser. Para-Virtualized TPM
Sharing. In Trust ’08: Proceedings of the 1st
international conference on Trusted Computing and
Trust in Information Technologies, pages 119–132,
2008.
[7] Ahmad-Reza Sadeghi, Christian St¨uble, and Marcel
Winandy. Property-Based TPM Virtualization. In ISC
’08: Proceedings of the 11th international conference
on Information Security, pages 1–16, 2008.
[8] Vincent Scarlata, Carlos Rozas, Monty Wiseman,
David Grawrock, and Claire Vishik. TPM
Virtualization: Building a General Framework. In
Trusted Computing, pages 43–56, 2007.
[9] Xen hypervisor, http://www.xen.org.
[10] Secure VM-vTPM protocol implementation. http://
www.syssec.ethz.ch/software/vtpm-migration.zip.
[11] Thomas Ristenpart, Eran Tromer, Hovav Shacham,
and Stefan Savage. Hey, you, get oﬀ of my cloud:
exploring information leakage in third-party compute
clouds. In CCS ’09: Proceedings of the 16th ACM
conference on Computer and communications security,
pages 199–212, 2009.
[12] Reiner Sailer, Xiaolan Zhang, Trent Jaeger, and
Leendert van Doorn. Design and implementation of a
TCG-based integrity measurement architecture. In
SSYM’04: Proceedings of the 13th conference on
USENIX Security Symposium, pages 16–16, 2004.
[13] Zhi Wang and Xuxian Jiang. Hypersafe: A lightweight
approach to provide lifetime hypervisor control-ﬂow
integrity. In Proceedings of the 2010 IEEE Symposium
on Security and Privacy, pages 380–395, 2010.
[14] Intel trusted execution technology.
http://www.intel.com/Assets/en_US/PDF/
whitepaper/323586.pdf.
[15] Jonathan M. McCune, Bryan J. Parno, Adrian Perrig,
Michael K. Reiter, and Hiroshi Isozaki. Flicker: an
execution infrastructure for tcb minimization.
SIGOPS Oper. Syst. Rev., 42:315–328, 2008.
[16] TPM Main Part 1 Design Principles.
http://www.trustedcomputinggroup.org/resources.
[17] W. Diﬃe and M. Hellman. New directions in
cryptography. Information Theory, IEEE Transactions
on, 22:644 – 654, 1976.
[18] The transport layer security (TLS) protocol v 1.1.
http://www.rfc-editor.org/rfc/pdfrfc/rfc4346.
txt.pdf.
[19] Ahmed M. Azab, Peng Ning, Zhi Wang, Xuxian Jiang,
Xiaolan Zhang, and Nathan C. Skalsky. Hypersentry:
enabling stealthy in-context measurement of
hypervisor integrity. In Proceedings of the 17th ACM
conference on Computer and communications security,
CCS ’10, pages 38–49, 2010.
[20] Jiang Wang, Angelos Stavrou, and Anup Ghosh.
Hypercheck: a hardware-assisted integrity monitor. In
Proceedings of the 13th international conference on
Recent advances in intrusion detection, RAID’10,
pages 158–177, 2010.
[21] Yacine Gasmi, Ahmad-Reza Sadeghi, Patrick Stewin,
Martin Unger, and N. Asokan. Beyond secure
channels. In STC ’07: Proceedings of the 2007 ACM
workshop on Scalable trusted computing, pages 30–40,
2007.
[22] Radia Perlman. The ephemerizer: Making data
disappear. Journal of Information System Security,
1:55 – 68, 2005.
[23] Radia Perlman. File system design with assured
delete. In In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2007.
[24] Christopher Clark, Keir Fraser, Steven H,
Jakob Gorm Hansen, Eric Jul, Christian Limpach, Ian
Pratt, and Andrew Warﬁeld. Live Migration of Virtual
Machines. In Proceedings of the 2nd ACM/USENIX
Symposium on Networked Systems Design and
Implementation (NSDI), pages 273–286, 2005.
[25] Robert Bradford, Evangelos Kotsovinos, Anja
Feldmann, and Harald Schi¨oberg. Live wide-area
migration of virtual machines including local
persistent state. In VEE ’07: Proceedings of the 3rd
international conference on Virtual execution
environments, pages 169–179, 2007.
[26] Mario Strasser and Heiko Stamer. A Software-Based
Trusted Platform Module Emulator. In Trust ’08:
Proceedings of the 1st international conference on
Trusted Computing and Trust in Information
Technologies, pages 33–47, 2008.
[27] Privacy certiﬁcate authority.
http://www.privacyca.com.
[28] Michael R. Hines, Umesh Deshpande, and Kartik
Gopalan. Post copy live migration of virtual machines
citation. ACM SIGOPS Operating Systems Review,
43(3):14–26, 2009.
[29] Google Perftools,
http://code.google.com/p/google-perftools/.
(cid:1)(cid:3)(cid:2)
(cid:8)(cid:9)(cid:10)(cid:7)(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:5)
(cid:7)(cid:1)(cid:2)
(cid:7)(cid:3)(cid:4)(cid:2)
(cid:7)(cid:5)(cid:6)(cid:2)
(cid:7)(cid:3)(cid:4)(cid:2)
(cid:7)(cid:5)(cid:6)(cid:2)
(cid:16)(cid:8)(cid:17)
(cid:16)(cid:8)(cid:17)(cid:14)(cid:18)(cid:19)(cid:13)(cid:20)
(cid:1)(cid:2)
(cid:3)(cid:4)(cid:2)
(cid:5)(cid:6)(cid:2)(cid:7)
(cid:1)(cid:2)
(a)
(cid:5)(cid:6)(cid:2)(cid:7)
(cid:3)(cid:4)(cid:2)
(b)
(cid:8)(cid:9)(cid:10)(cid:7)(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:5)
(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:2)(cid:11)(cid:12)(cid:13)(cid:6)(cid:14)(cid:15)(cid:12)(cid:16)
(cid:17)(cid:14)(cid:15)(cid:4)(cid:8)(cid:7)(cid:16)(cid:10)(cid:18)(cid:2)
(cid:7)(cid:1)(cid:2)
(cid:7)(cid:3)(cid:4)(cid:2)
(cid:7)(cid:5)(cid:6)(cid:2)
(cid:7)(cid:1)(cid:2)
(cid:7)(cid:3)(cid:4)(cid:2)
(cid:4)(cid:2)(cid:3)(cid:1)
(cid:16)(cid:8)(cid:17)
(cid:16)(cid:8)(cid:17)(cid:14)(cid:18)(cid:19)(cid:13)(cid:20)
(cid:1)(cid:2)
(cid:3)(cid:4)(cid:2)
(cid:5)(cid:6)(cid:2)(cid:7)
(cid:1)(cid:2)
(c)
(cid:5)(cid:6)(cid:2)(cid:7)
(cid:3)(cid:4)(cid:2)
(d)
Figure 6: Existing vTPM key hierarchy designs. These designs range from tightly coupled TPM and vTPM keys to
fully independent conﬁgurations which only depend on an external authority.
APPENDIX
A. PREVIOUS DESIGNS OF VTPM
ARCHITECTURES
In [4], Berger et al. discuss the trade-oﬀs between keeping
vTPM key hierarchy independent from the TPM key hier-
archy (as in Figure 6(d)) and linking it to the TPM via the
AIK (as in Figures 6(a), 6(b)). The authors claim that the
design in Figure 6(d) (i) minimizes the key and credential
regeneration that are required after migration and (ii) com-
plies with the procedure of obtaining AIKs from a Privacy
CA. Sadeghi et al. [7] also adopt a similar design.
In [5],
Stumpf et al. propose a vTPM key hierarchy which uses
the TPM EK to sign the vEK (see Figure 6(c)). Here, the
AIK is obtained from a Privacy CA as in the case of the
TPM.
(cid:1)(cid:3)(cid:2)