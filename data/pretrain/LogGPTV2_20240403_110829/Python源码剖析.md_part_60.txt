---
## Page 408
Python源码剖析
378
于加载dll中的Python扩展module，关键的代码在代码清单14-9的[2]和[3]处。
性。在代码清单14-9的[4]之前，Pyhon虚拟机已经完成了module的加载工作。所以，对
份到module备份中。
处，如果备份中有此module，那么Python虚拟机将直接返回：如果备份中没有此module，
module的代码，其他平台的加载动作与此类似。
module的函数是和平台相关的，这里我们剖析的是加载windows下dul文件中Python扩展
同的，比如在Windows下结果是dll（pyd），而在Linux下就是so。所以加载Python扩展
代码清单14-9
那么Python将调用_PyImport_LoadDynamicModuleu
到能否深刻理解为什么要以这样的规则来编写Python扩展模块。
Python的扩展模块。Python是如何调用C语言编写的扩展module？对这一点的剖析关系
Python虚拟机会加载该module，并在代码清单14-9的[5]处将加载后的module拷贝一
[importal.c]
在1oadmodule中，如果import动作的目标是C语言编写的Python扩展module，
第14章Python模块的动态加载机制
代码清单149的[2]会打开拥有Python扩展module的dl文件，并从该dll文件中获
代码清单14-9的[4]、[5]两处只是为了在已经加载的module中添加一个_fi1e
可以看到，Pyhon对于扩展module，也动用了module备份，在代码清单14-9的[1]
需要指出的是，在不同的操作系统中，用C编写Pyhon扩展module得到的结果是不
return m;
PyModule_AddstringConatant(m,
/F41:
1/131:调用module的初始化画数
/[2]：从aIl中获得mooule的初始化函数的起始地址
//I11：在pyuhon的module备份中检查是否有名为name的module
char
PyImport_FixupExtension(name,pathname):
=PyDict
PyLmport_GetDynloadFunc(mame,shortname,
returnm
Py
深度探索动态语言核心技术
从sys.moculea中获得巴经被加载的modiule
*shortname,
属性
*packagecontext,*oldcontext;
file
pathname)/:
pathname,fp);
---
## Page 409
个协议，Python才能和扩展module建立起联系。
代码清单14-10
shortname的值也为“abe”（见代码清单1410）。
moaule是在abc.dll 中实现的，那么在代码清单14-9的121处，name的值为“abc”，而
数了。这其实是一个协议，只有在我们编写的扩展module遵循Pyhon设计时所采用的这
这里，abcmodule的初始化函数名为initabc。到了这里，我们应该能够理解为什么在
们先来看一看这时两个非常重要的参数。假如我们进行了“importabe”的动作，而abc
得module初始化函数的起始地址。在进入[2]处的_PyImport_GetDynLoadFune之前，我
#endif
#else
#itdet
FILEfp)
_PyImport_GetDynLoadFunc(char *fqmame, char *shortname,char *pathname,
[dynload_win.c]
在代码清单14-10的口1]处，Pyhon虚拟机获得了module中初始化函数的函数名，在
funcptr
returnp;
Pyos_shprintf（fumcname,aizeof(funcname),"inits,200s",shortname）;
char furicname[258]
d1_funeptr R
//[1]获得module的初始化数名
P=GetProcAddress（hDLL,funcname）;
1/[61：调用Win32API获得modu1e初始化函数的地址
DMBUG
LOAD WITH_ALTERED_SDARCH_PATHO;
HINSTANCE hDLL
else
Pyos_snprint.E(buffer,sizeof（buffer),
Pyos_snprintF(buffer,slzeof（buffer),
/7I31：获得当前Python对应的al1文件名
char buffer[256];
mpoTtPyt
7/加载a11文件失败，抛出异常
NULLA
PY_MAJOR_VERSION,PY_MINOR_VERSIONY:
chon
NULL
onimport(hnBu
Python源码剖析
NULL
14.3import机制的实现
"python*dtd.dl1",
"pythonedsd_d.dl1",
一深度探索动态语言核心技术
379
---
## Page 410
Python源码剖析
380
加载是一模一样的。我们来看看Py_InitModule。
methods）”，简直太像了，现在我们敢打赌，C扩展module的加载实质与内建module的
#define
[modsuport.h]
扩展module的例子。
EXPORT int inltabe(void)
工作。需要特别注意的是，这个初始化函数是在dl中提供的，我们来看一个用C编写Pyton
在这里，Python虚拟机开始调用module的初始化函数（initabc），完成了module的加载
Win32API，获得module初始化函数的地址。
dll文件是否与扩展module所引用的an文件匹配，如果不匹配，则Pyhon虚拟机会抛出
有在python20.dll中提供。Python为了避免这样的不兼容情况的出现，在代码清单14-10
[c extenaion module:abc.dll]
异常。
的[3]、[4]、[5]处进行了兼容性的检查。Python虚拟机会检查当前运行的Pyhon所使用的
Pyhon2.0（python20.dl），这就隐藏着一个可能，即扩展module中所使用的C接口并没
假如我们的扩展module在创建时链接的是python25.dl，而我们当前使用的Python环境是
static
所使用的字节码指令在不断发生改变。同样，Pyhon向外所暴露的C接口也可能发生改变。
进行了一连串的奇怪动作。这些动作有什么意义呢？
虚拟机并不急于获得module初始化函数的地址，而是在代码清单14-10的[3]、[4]、[5]处
如果加载失败，那么自不必言，虚拟机将抛出异常。然而奇怪的是，在加载成功之后，Python
注意：在initabc中，又调用了Pyuhon的C接口。回想一下前面我们刚刚剖析过的
这样，程序的流程回到了_PyImport_LoadDynamicMoaule的代码清单14-9的[3]处，
在前面分析Python虚拟机的开始，我们就曾看到，在Python的发展历史上，Python
第14章Python模块的动态加载机制
return 0;
Py_InitModule("abc",:abe_methods);
如果加载dl文件顺利，而且也通过了兼容性检查，那么Pyhon虚拟机将再次调用
Python虚拟机在代码清单14-10的[2]处调用了Win32APL，将all文件加载到内存中。
["hello"
PY
一深度探索动态语言核心技术
PYTHON_API_VERSION)
Hello,METH_VARARGS,
abc
methodsy
(char*)NULL,
"say hello"],
(EyObject）NULL
---
## Page 411
14.3.3
码清单14-11）。
拟机进行一些额外的动作，同时会导致import_module_levei的返回值发生改变（见代
c”时，import_moduie_level中的fromist参数将不为Py_None，这将导致Python虚
为属性添加到abcmodule中。正如我们所料，与加载内建module的过程一模一样。
PyMethoaDef结构体，并创建PycFunctionobject对象，将此对象和其对应的操作名作
的化身而已。对于Py_InitModule4，我们已经很熟悉了。所以现在可以清楚地知道，Python
但通过“a”，必须能够发现符号“b”或“c”比如在图14-25所示的例子中，如果执行
为“”，另一个名为“c”。
那么一定意味着，在符号“a”对应的module对象的名字空间中，必有两个符号，一个名
动作到底做了些什么事呢？考虑一下“froma importb，c”，如果这个语句能成功完成，
[import.c]
代码清单14-11
Byobiect*fromlist,
在第3节的开始，我们就已经提到，当Python虚拟机执行的是“fromaimportb
from与import
更进一步，“b”或“e”这两个符号可以不在“a”对应的module对象的名字空间中，
当Eromlist不为空时，Python虚拟机将进行一个ensure_fromlist的动作，这个
return tail:*
瑞
Clensuret
return head;
if（fromlist
modul
romliSt = NULL
level(char
fromlist(tail,Eromlist,buf,buflen, o))(
NULL)
int1evel）
py_None Il IPyobject_IsTrue(fromlist)）
*iotta
tname,
Python源码剖析
14.3import机制的实现
一深度探索动态语言核心技术
381
---
## Page 412
Python源码剖析
14.4
382
节的剖析，我们就能更加深入地了解Python中各种import操作所完成的动作。
这时的taf1对应的是一个module对象。
import机制能够根据“”发现“moa2”，所以，这也是合法的。
[import.c]
“fromAimportmod2”，尽管moa2并不在A对应的module对象的名字空间中，但是
static
在本节中，我们将研究Py山on中各种import操作所对应的字节码指令序列。通过本
Python中的import操作
到了这里，你能够理解py文件中通常出现的_a11_到底是何方神圣了吧。
for
int
任（thasit)
//basit为falae，意味着出现“fromAimportmod2这样的情形
LE
//若item为NULL：则结束ensure动作
int hasit:
int
深度探索动态语言核心技术
(item
submod
pebuf
Pyobject
char
continue;
returno:
ensure_fromlist(Pyobject mod)
Python模块的动态加载机制
*++
int
0:
ret
*D:
subname:= PyString_AS_sTRING(item);
NOLL）
import_submodule(mod,subname)
subname);
*submod:
ensure_fromlist(mod,
PySequence_GetItem(fromlist,i);
all
Pyobjeet *fromlist,
al1
buf）
---
## Page 413
14.4.3
14.4.2
14.4.1
内建函数_import_在函数参数fromlist不同时的不同行为了），以供指令MPoRT_FROM
号“xml.sax”对应的module对象（这一点非常重要，理解了这一点，你就能理解Python
也就是我们之前在14.3.3节中提到的fromlist。
STORE_NAME指令只是在当前的local名字空间中加入了一个“xml”符号。
的代码，这种情况下返回的是head，正好对应“xml）。所以在IMPORT_NAME之后的
对象，最后将与“xml”对应的PyModuleObject对象返回（参考imort_module_level
的指令参数将是关于module的完整的“路径”信息，IMPORT_NAME指令的内部将解析这
元素对存放到当前的1ocal名字空间中。
对象压入到运行时栈内，所以随后的sTORE_NAME指令会将（“sys”，moduleobiect）
在IMPORT_NAME指令的最后，Python虚拟机会通过sET_TOP将加载后的PyModuleObject
from xml.sax import xmlreader
import xml.sax.xmlreader
import sys
如果在import的动作中涉及到对package的import动作，那么IMPORT_NAME指令
随后的“IMPORT_NAMEo”最终在mport_module_level中将返回tai1，也就是符
注意：这里的“LOAD_cONST1”指令的结果不再是None了，而是一个tuple对象，
STORE_NAME
这是我们在本章开头考察的例子，现在我们已经清楚地了解了IMPORT_NAME的行为，
STORE_NAME
IMPORTFROM
IMPORT_NAME
LOAD_CONST
from&import
TMPORT NAME
LOADLCONST
LOADCONST
SHORE NAME
MOAD
LOADLCONST
import package
importmodule
CONST
ONST
1(xmlreader)
0
(sys)
((xmlreader)）
（xml）
(xml.sax.xmlreader)
(None)
(xmlreader)
(xml
(SyS)
(None)
(-1)
sax)
Python源码剖析
14.4Python中的import操作383
一深度挥麦动大五言校小地卖
---
## Page 414
384
Python源码剖析
14.4.4
IMPORT_sTAR这个指令，而指令的实现代码中最重要的部分则最终归结到import_from
隐藏了，如果仅仅从操作的结果来看的话，我们对这些中间的动作也是一无所知的。
所对应的module对象被创建了，并且也被加入到了sys.modules中，但这个过程被Python
捏在一起，
令代码的关键就在于那个import_from函数了。
Object对象，而则是在IMPORT_NAME指令中返回的那个tai1，那么MPORT_FROM指
使用。
看看_al1_这个符号是如何影响module的载入的。
式牵涉到在module文件中的一个特殊符号：“
“xmlreader”，显然，这个搜索动作是能够成功的。
static Pyobject
[ceval.c]
[IMPORT_FROM]
fromxml.sax import
第14章Python模块的动态加载机制
LOAD_CONST
所以，最后在local名字空间中，只出现了我们期望的“xmlreader”符号，尽管xml.sax