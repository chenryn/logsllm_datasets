正则表达式（Regular
Expression）是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。听着挺迷茫的吧，那就说简单点：正则表达式就一段火星文似的字符串，这段字符串可以用来表示有一定规律的很多段字符串。
最初的正则表达式，出现在理论计算机科学的自动控制理论和形式化语言理论中（完全听不懂的举手）。在这些领域中有对计算的模型和对形式化语言描述与分类的研究。20世纪40年代，Warren
McCulloch与Walter
Pitts将神经系统中的神经元描述成小而简单的自动控制元。到20世纪50年代，数学家Stephen
Cole
Kleene利用称为"正则集合"的数学符号来描述此模型。后来，UNIX的创始人，Kenneth
Lane
Thompson将此符号系统引入编辑器QED，然后是UNIX的编辑器ed，并最终引入了grep。自此，正则表达式被广泛地使用于各种UNIX或类UNIX系统的各种工具中。
6.4.2 初识正则表达式
懒蜗牛同学想学习正则表达式，也不是一时兴起。前几天，他确实遇到了类似的需求。
话说那一天，懒蜗牛拿到一个脚本文件，里面大量使用了sed命令。懒蜗牛同学想要复制里面的所有sed命令，存入另一个文件里，作为学习sed命令用法的参考。经过学习和研究，懒蜗牛了解到有个grep命令可以完成这个操作，他的用法大约是这样：
![alt](images/00323.jpeg){.calibre3}
这样的命令所做的事情，就是在"文件名"所指定的文件中，查找带有"字符串"所指定的内容的行，并输出到标准输出。当然，懒蜗牛同学是想存成文件，于是就加了个输出转向，运行了这个命令：
![alt](images/00324.jpeg){.calibre3}
![alt](images/00011.jpeg){.tpzz}**提示：**["\>"可以将原本输出到标准输出的内容（即打印到屏幕上的内容），转向到一个文本文件中。并且如果文件已经存在，它将覆盖掉文件原有内容。如果不想覆盖文件原有内容，可以使用"\>\>"符号，代替"\>"，如此则会在文件末尾追加新的内容。]{.kai1}
这样，就把learn.sh脚本中，所有带有sed字样的行，全部输出到了sed_command.txt文件中。但是当懒蜗牛打开sed_command.txt查看的时候发现了问题。所有带有sed命令的行，固然是都写进来了，但同时还有很多跟sed命令无关的行，也跑了进来。比如这一行注释：
![alt](images/00325.jpeg){.calibre3}
还有：
![alt](images/00326.jpeg){.calibre3}
grep之所以会将这些行匹配出来，是因为它们确实包含了"sed"这个关键字，只不过不像懒蜗牛想象的作为单独的一个命令而已。所以这并不能怪罪grep不智能，而是懒蜗牛陈述的要求并不准确。懒蜗牛的要求如果用准确一点的人类语言描述，应该是这样：查找所有包含sed作为完整单词的行。
当然你用人类语言说，grep肯定听不懂。于是，这时候就需要正则表达式出场了。我们需要使用"\\b"元字符，这个字符代表了单词的开头或者结尾。那么懒蜗牛要查找的东西，就应该这样表示：
![alt](images/00327.jpeg){.calibre3}
这样，像kissed、used这样的词，就不会被匹配到了。这里，我们写的"\\bsed\\b"就是一个正则表达式。除了"\\b"外，还有很多元字符，各代表不同的意义，如表6.3所示。
**表6.3 元字符**
![alt](images/00328.jpeg){.calibre3}
![alt](images/00011.jpeg){.tpzz}**提示：**[更精确地说，\\b是匹配这样的一种位置------它的前一个字符和后一个字符，有一个是，但不全是\\w（一个是，一个不是或不存在）。]{.kai1}
6.4.3 强大的正则表达式
又有一回，那位和懒蜗牛同学聊天的MM遇到了麻烦。她需要从她写的日记中找到一个固定电话的号码。但是记忆力如此差的她，竟然完全不记得这个电话号码大约出现在哪几天的日记中。于是，她希望能够找出日记中出现过的所有电话号码，然后她根据上下文判断哪个才是需要的。
【使用反义字符】
这样的工作，懒蜗牛同学自然毫不犹豫地包揽下来。在收到MM传来的足有3
MB大的diary.txt文件后，懒蜗牛运行了这个命令：
![alt](images/00329.jpeg){.calibre3}
咱已经知道了，\\d可以匹配一个数字。这个命令的意思很明白：查找diary.txt文件中，所有出现了连续8个数字的行。
运行之后，懒蜗牛得到了一些输出，但是好像依旧比较乱。因为一些手机号、QQ号、各种账号之类的也被搜出来了。它们虽然都是8个以上连续的数字，但毕竟它们"包含"了连续的8个数字，所以被grep找出来了。
那么如果要精确匹配"有且只有8位的数字"该怎么办呢？这就要用到正则中的反义了。常用的反义字符如表6.4所示。
**表6.4 反义字符**
![alt](images/00330.jpeg){.calibre3}
那么，对于懒蜗牛同学的需求，就应该运行这样的命令：
![alt](images/00331.jpeg){.calibre3}
这个命令用人类语言描述就是：查找diary.txt文件中，所有出现了连续8个数字，且此8个数字的前后1个字符都不是数字的行。这样就能更准确地定位1个固定电话的号码了。
【使用重复】
不过这样写连续的8个"\\d"还是有点累，其实这里可以精简一下，写成这样：
![alt](images/00332.jpeg){.calibre3}
其中，"{8}"的意思，就是前一个字符重复8次（\\d看作一个元字符）。类似的重复还有几个，如表6.5所示。
**表6.5 常用的重复**
![alt](images/00333.jpeg){.calibre3}
举几个例子吧。比如正则表达式"go\*gle"可以匹配"ggle"、"gogle"、"gooogle"、"goooooooooooogle"等。反正就是中间有多少个o、有没有o都没关系；而"go+gle"则不能匹配"ggle"，它代表必须有至少一个o；"go?gle"就只能匹配"ggle"和"gogle"；"go{2,4}gle"就只能匹配到"google"、"gooogle"、"goooogle"这3种情况了。
【使用中括号】
懒蜗牛终于找出了所有的"出现了连续8个数字，且此8个数字的前后1个字符都不是数字"的行，并让MM过目。结果，MM很不好意思地表示：这些好像都不是，那个电话号码有可能写成了xxxx
xxxx的格式，也没准是xxxx-xxxx，或者是带区号的（xxx）xxxx-xxx......
从昏厥中苏醒过来的懒蜗牛同学毫不气馁，继续用正则表达式满足MM的需求。区号不区号的先不去管，先看看xxxx
xxxx和xxxx-xxxx怎么匹配吧。其实也简单，使用中括号就可以了，像这样：
![alt](images/00334.jpeg){.calibre3}
这样的正则表达式用人类语言描述就是"前面有且仅有4个数字，中间有一个横杠'-'或者空白，后面有且仅有4个数字的"这么一个字符串。
其中中括号的意思，是表示里面的字符都是或的关系。例如"\[abc\]"可以匹配a、b、c中的任意一个（且仅有一个）字母。或者也可以写一个范围，例如"\[a-z\]"可以匹配任何一个小写的字母。"\[0-9\]"就完全相当于"\\d"了。
咱们还是举例子吧。比如"b\[ae\]d"这样一个表达式，就可以匹配bed和bad这两个字符串；而"\[a-c\]an"可以匹配aan、ban、can这3个字符串。
在精确地匹配了xxxx-xxxx这种形式的电话号码后，懒蜗牛同学终于找到了MM想要的电话。因此，在接下来的几天之内，他一直都对正则表达式赞不绝口。不过，他用到的这点功能，不过是正则表达式中的最初级用法，沧海一粟尔。
6.4.4 无处不在的正则表达式
刚才咱们看着懒蜗牛同学折腾了这幺半天，都是在使用grep命令时应用正则表达式。其实正则表达式的用途相当广泛，基本上在我们Linux系统里，你能想到的地方都能够支持正则表达式。比如常用的查找文件的find命令、已经见识过的grep命令、编辑字符流的sed命令，甚至连ls命令都是支持正则表达式的。还有Vim编辑中，Emacs编辑器中，都有支持正则表达式的操作。Shell编程中更可以用正则表达式了。
可以这么说，在我们Linux系统里，只要你觉得某个地方可以用正则表达式来简化操作、提高效率，那么这个地方就一定支持正则表达式。
[6.5 多彩的Shell]{.kai}
懒蜗牛逐渐开始适应了纯终端的操作，于是他有个想法：在这个黑漆漆的界面中，搭建起一个可用的环境，这样以后开机就可以不进图形界面，直接用命令行的软件来做各种事情，可以更高效，更快速。他决定，用一周的时间来完成这件事情。
6.5.1 懒蜗牛同学的计划
起初，懒蜗牛来到混沌漆黑的命令行。
界面是黑漆漆一片，ls还会出些菱形的方块块，懒蜗牛的手指游弋在键盘上面。
懒蜗牛说："要有中文！"就有了中文。
懒蜗牛看中文是顺眼的，有中文，有英文，没有了乱码。这是头一日。
懒蜗牛说："要有声音！打破寂静的黑夜。"
懒蜗牛就让命令行里发出美妙的乐声，这是第2日。
懒蜗牛说："要有窗，看到外面的世界。"于是有了浏览器，懒蜗牛可以重新看到那些网络上的奇花异草，光怪陆离。有了通信工具，懒蜗牛又可以把这些光怪陆离，异草奇花分享给朋友们，这是第3日。
懒蜗牛说："要有色彩，有图，才有真相！"于是就有了图。
图片为黑白的世界带来了色彩。美好的、丑陋的、思念的、怀旧的、唯美的、憧憬的、现实的、抽象的，各种的图片，懒蜗牛微笑了。这是第4日。