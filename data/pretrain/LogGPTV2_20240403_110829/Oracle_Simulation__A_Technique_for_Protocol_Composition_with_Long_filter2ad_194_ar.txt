2. ∀ i ≥ 1, νp, lsid
3. s is disjoint of the support of O.
P
4. P0(p, lsid
0 ) ∼=Or,O Q0(p, lsid
Q
0 )
i ) is Or-simulatable.
i ) is Or-simulatable.
Q
then,
i ) ∼=O ||iQi(p, lsid
Q
i )
We once again generalize with the explicit dependence in s.
||iPi(p, lsid
P
Theorem 7. Let Or, O be oracles both parameterized by a sequence of names s. Let p be
a sequence of names, Pi(x, y) and Qi(x, y, z) be parameterized protocols, such that Nl(P, Q)
Q , with
is disjoint of the oracles support.
s = {lsid
P
If we have, for sequences of names lsid
, lsid
P
i , lsid
Q
i }i∈N :
86
P
P
i .Pi(p, lsid
1. ∀ i ≥ 1, νp, lsid
2. ∀ i ≥ 1, νp, lsid
3. s is disjoint of the support of O.
Q
i .Qi(p, lsid
i ) is Or-simulatable.
i , s) is Or-simulatable.
Q
P
4. P0(p, lsid
0 ) ∼=Or,O Q0(p, lsid
i ) ∼=O ||iQi(p, lsid
P
Q
0 , s)
||iPi(p, lsid
then,
Proof. By application of Theorem 5, we get that for all n1, n2,
Q
i , s)
P
P0(p, lsid
Q0(p, s, lsid
P
0 )(cid:107)1<i≤N1Pi(p, lsid
∼=Or,O
0 )(cid:107)1<i≤N1Pi(p, lsid
i )(cid:107)1<i≤N2Qi(p, s, lsid
Q
i )
i )(cid:107)1<i≤N2Qi(p, s, lsid
Q
P
Q
i )
By weakening of the attacker, we get:
P
P0(p, lsid
Q0(p, s, lsid
P
0 )(cid:107)1<i≤N1Pi(p, lsid
∼=O
0 )(cid:107)1<i≤N1Pi(p, lsid
i )(cid:107)1<i≤N2Qi(p, s, lsid
Q
i )
i )(cid:107)1<i≤N2Qi(p, s, lsid
Q
P
Q
i )
Then, for a polynomial p (assumed without loss of generality increasing), any n = p(η),
and all j < n:
P
P0(p, lsid
Q0(p, s, lsid
P
0 )(cid:107)1<i≤j−1Pi(p, lsid
∼=O
0 )(cid:107)1<i≤j−1Pi(p, lsid
i )(cid:107)1<i≤N−j−1Qi(p, s, lsid
Q
i )
i )(cid:107)1<i≤N−j−1Qi(p, s, lsid
Q
P
Q
i )
Through the renaming of the lsid, which is possible as s is disjoint from the oracle support,
we get that:
P
P
Q
P
Pj(p, lsid
j )(cid:107)P0(p, lsid
j , s)(cid:107)P0(p, lsid
0 ) . . .(cid:107)Pj−1(p, lsid
j−1)(cid:107)Qj+1(p, s, lsid
∼=O
j−1)(cid:107)Qj+1(p, s, lsid
0 ) . . .(cid:107)Pj−1(p, lsid
j+1)(cid:107) . . . Qn(p, s, lsid
Q
n )
j+1)(cid:107) . . . Qn(p, s, lsid
Qj(p, lsid
Thanks to Theorem 5, there exist polynomial pS such that, if pP and pQ are the polynomial
bound on the runtime of the simulators for P or Q, for all j, we have that the advantage of any
attacker running in time t against the previous indistinguishability, denoted D, is bounded
by:
Q
n )
Q
Q
P
P
pS
AdvD(cid:16)
AdvD(cid:16)
(cid:0)t, j − 1,|P|, . . . , p(η) − j − 1,|q|, pP (t), . . . , pQ(t)(cid:1)(cid:17)
(cid:0)t, p(η),|P|, . . . , p(η),|q|, pP (t), . . . , pQ(t)(cid:1)(cid:17)
pS
Thus, for all j, the advantage of any attacker against the corresponding game is uniformly
bounded by:
We then conclude with an hybrid argument.
87
F.5 Key Exchanges
We ﬁrst prove a proposition which allows to reduce the security of n sessions in parallel to the
security of one session with N − 1 sessions in parallel. It is expressed in a more general way
than required for basic key exchanges, so that we can reuse it for other results.
Proposition 39. Let O be an oracle and KEi[_1, _2] := Ii(lsidI
a key exchange protocol, such that I binds xI , xI
is disjoint of the oracle support. Let idI , idR be names, sI = {lsidI
s = sI ∪ sR sets of names,
N be an integer (which may depend on η), and let s = {lsidI
If s is disjoint of the support of O and if,
Let T1(x),T2(x), S1(x),S2(x) be parametric processes with completely disjoint names. Let
i }1≤i≤N and Os an oracle.
i , idR); _2
lsid and Nl(KE)
i }i∈N,
i }i∈N, sR = {lsidR
i , idI ); _1(cid:107)Ri(lsidR
lsid, R binds xR, xR
i , lsidR
id, xR
id, xI
∼=O,Os
id(cid:105))]
id(cid:105)), out((cid:104)xR, lsidR, xR
lsid, xR
id(cid:105))]
id(cid:105)), out((cid:104)xR, lsidR, xR
lsid, xR
id(cid:105))]
(cid:107)KEn[
id)
lsid, xI
id = idI then
1. νs.out(s) is Os-simulatable.
(cid:107)i≤N−1KEi[out((cid:104)xI , lsidI , xI
lsid, xI
lsid /∈ sR ∧ xI
if xI
id = idR then
lsid, xI
S1(xI , lsidI , xI
id(cid:105)),
else out((cid:104)xI , lsidI , xI
lsid /∈ sI ∧ xR
if xR
lsid, xR
S2(xR, lsidR, xR
id)
else out((cid:104)xR, lsidR, xR
lsid, xR
(cid:107)i≤N−1KEi[out((cid:104)xI , lsidI , xI
lsid, xI
n ∧ xI
(cid:107) KEn[
n, xlsid, xid(cid:105))
id = idR then
id(cid:105)),
id = idI then
lsid = lsidR
out((cid:104)k, lsidI
lsid /∈ sR ∧ xI
if xI
T1(xI , lsidI
n, xlsid, xid)
else out((cid:104)xI , lsidI , xI
lsid, xI
n ∧ xR
if xR
lsid = lsidI
n , xlsid, xid(cid:105))
out((cid:104)k, lsidR
lsid /∈ sI ∧ xR
id = idI then
T2(xR, lsidR
n , xlsid, xid)
if xR
if xI
2.
id = idR then
else out(xR, lsidR, xR
lsid, xR
id)
88
Then:
(cid:107)i≤N KEi[
∼=O
(cid:107)i≤N KEi[
id)
lsid, xI
id = idI then
lsid /∈ sR ∧ xI
id = idR then
if xI
S1(xI , lsidI , xI
lsid, xI
else out((cid:104)xI , lsidI , xI
id(cid:105)),
lsid /∈ sI ∧ xR
if xR
lsid, xR
S2(xR, lsidR, xR
id)
else out((cid:104)xR, lsidR, xR
lsid, xR
j ∧ xI
xI
lsid = lsidR
out((cid:104)ki,j, lsidI
1≤j≤N
if
id(cid:105))]
id = idR then
i , xlsid, xid(cid:105))
lsid /∈ sR ∧ xI
T1(xI , lsidI
id = idR then
if xI
n, xlsid, xid)
id(cid:105)),
else out((cid:104)xI , lsidI , xI
j ∧ xR
if
lsid = lsidI
xR
1≤j≤N
out((cid:104)kj,i, lsidR
lsid, xI
id = idI ) then
i , xlsid, xid(cid:105))
lsid /∈ sI ∧ xR
if xR
else out((cid:104)xR, lsidR, xR
T2(xR, lsidR
id = idI then
n , xlsid, xid)
id(cid:105))]
lsid, xR
Proof. We ﬁx N and deﬁne an ordering (arbitrary) on the couples (i, j)1≤i,j≤N
. We then set:
G0
(i,j) :=
(cid:107)r≤N KEr[
(r,t)≥(i,j)
t ∧ xI
if
lsid = lsidR
xI
out((cid:104)kr,t, lsidI
lsid, xI
r, xI
lsid /∈ sR ∧ xI
if
id = idR then
xI
lsid, xI
id = idR then
id(cid:105))
T1(xI , lsidI
id)
(r,t)≥(i,j)
(t,r)≥(i,j)
id = idR then
lsid, xI
r, xI
lsid /∈ sR ∧ xI
else if xI
S1(xI , lsidI , xI
else out((cid:104)xI , lsidI , xI
if
lsid = lsidI
xR