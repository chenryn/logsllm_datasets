title:Client-CASH: Protecting Master Passwords against Offline Attacks
author:Jeremiah Blocki and
Anirudh Sridhar
6
1
0
2
r
a
M
2
]
R
C
.
s
c
[
1
v
3
1
9
0
0
.
3
0
6
1
:
v
i
X
r
a
Client-CASH: Protecting Master Passwords against Oﬄine Attacks
Jeremiah Blocki
Microsoft Research
PI:EMAIL
Anirudh Sridhar
Carnegie Mellon University
PI:EMAIL
March 4, 2016
Abstract
Oﬄine attacks on passwords are increasingly commonplace and dangerous. An oﬄine adversary is
limited only by the amount of computational resources he or she is willing to invest to crack a user’s
password. The danger is compounded by the existence of authentication servers who fail to adopt proper
password storage practices like key-stretching. Password managers can help mitigate these risks by
adopting key stretching procedures like hash iteration or memory hard functions to derive site speciﬁc
passwords from the user’s master password on the client-side. While key stretching can reduce the
oﬄine adversary’s success rate, these procedures also increase computational costs for a legitimate user.
Motivated by the observation that most of the password guesses of the oﬄine adversary will be incorrect,
we propose a client side cost asymmetric secure hashing scheme (Client-CASH). Client-CASH randomizes
the runtime of client-side key stretching procedure in a way that the expected computational cost of
our key derivation function is greater when run with an incorrect master password. We make several
contributions. First, we show how to introduce randomness into a client-side key stretching algorithms
through the use of halting predicates which are selected randomly at the time of account creation.
Second, we formalize the problem of ﬁnding the optimal running time distribution subject to certain
cost constraints for the client and certain security constrains on the halting predicates. Finally, we
demonstrate that Client-CASH can reduce the adversary’s success rate by up to 21%. These results
demonstrate the promise of the Client-CASH mechanism.
1 Introduction
Passwords are often the primary entryway to access a user’s conﬁdential information on a website, and are
thus a focus of attention for attackers. Oﬄine attacks against passwords are particularly powerful. An
oﬄine adversary has access to the cryptographic hash of a user’s password and can check a vast number of
password possibilities without interacting with the authentication server. This adversary is only restricted
by the computational resources that he is willing to invest into breaching each account. Oﬄine attacks are
increasingly commonplace due to recent high-proﬁle security breaches at organizations like LinkedIN, Sony,
eBay, and Ashley Madison1.
Several factors contribute to the danger of oﬄine attacks. First, users struggle to remember high entropy
passwords for multiple accounts. Second, many organizations had failed to implement proper password
storage techniques at the time they were breached. Finally, password cracking resources (e.g., hardware
and password dictionaries) continue to improve allowing an adversary to mount cheaper and more eﬀective
attacks.
Client-side password management tools (e.g., PwdHash [34]) allow the user to generate multiple passwords
from one master password and apply secure procedures like key stretching or salting on the client-side.
While password managers oﬀer many beneﬁts they also introduce a single point of failure (i.e., the master
1For example, see http://www.privacyrights.org/data-breach/ (Retrieved 9/1/2015).
1
password) through which the adversary could attack to gain access to all of a user’s accounts. A user’s
master password is not necessarily immune to oﬄine attacks just because a password manager is used. The
recent breach of LastPass2 highlights this dangerous possibility. Thus, key stretching procedures (e.g., hash
iteration, memory hard functions) are recommended to mitigate security risks in the event of an oﬄine attack.
However, key-stretching increases costs for the honest party as well as the adversary. It is thus desirable to
make authentication costs asymmetric so that (on average) a user authenticating with a correct password
will incur lower costs than an oﬄine adversary attempting to check an incorrect password guess. Previous
work by Manber [26] and by Blocki and Datta [4] achieves this goal of cost-asymmetric key-stretching, but
these solutions are only appropriate for server-side key stretching (see discussion in Section 2).
Contributions
In this work we present Client-CASH a client-side key-stretching algorithm which achieves
the goal of asymmetric costs, and we demonstrate that this system can protect user passwords from oﬄine
attacks. The core idea behind Client-CASH is to randomize the runtime of the client-side key stretching so
that on average, the cost of verifying a correct password is smaller than the cost of rejecting an incorrect
password. This is achieved by the use of halting predicates P : {0, 1}∗ → {0, 1}, which tells us when to
stop hashing the password (e.g., stop after t rounds of hash iteration if P (Ht(pwd)) = 1). These halting
predicates are chosen randomly at the time of account creation and are stored by the client (e.g., on a local
computer or on the cloud).
Because these halting predicates are stored by the client we must take care to ensure that the predicates
themselves do not leak too much information about the user’s password. The key challenge is to select the
predicates in a way that satisﬁes two seemingly conﬂicting requirements: 1) the halting predicates should
induce a cost-asymmetry in the validation of correct/incorrect passwords, and 2) the adversary should not be
able learn much about any user’s master password even if he observes these halting predicates. We borrow
ideas from diﬀerential privacy [18, 28] to satisfy both of these conﬂicting requirements.
correct password pwd as input then the expected cost to verify a correct password guess is k(cid:80)
k(cid:80)
We formalize the properties of Client-CASH and give an example of a system that satisﬁes these properties
based on the Exponential Mechanism [28], a powerful tool in diﬀerentially private analysis. We additionally
formalize the problem of minimizing the percentage of passwords cracked by the adversary as an optimization
over the parameters of the system and show that it can be solved eﬃciently as a linear program. In this work
we analyze the security of Client-CASH systems that use up to two iterations of an underlying hash function
Hk for password key stretching (the two-round case) or up to three iterations of Hk for key stretching
(the three-round case). Here, the parameter k speciﬁes the cost of the underlying hash function (e.g.,
BCRYPT [32] uses hash iteration to control costs and SCRYPT [30] uses a memory hard function to control
costs). If we let Pr[Ei,pwd] denote the probability that Client-CASH terminates after the i’th round given the
i i· Pr[Ei,pwd].
We compare Client-CASH to deterministic key-stretching techniques Hk(cid:48) with equivalent costs k(cid:48) =
i i · Pr[Ei,pwd] to Client-CASH by looking at the probability that an oﬄine adversary with a ﬁnite
computational budget B could crack the user’s password — we use Padv,B (resp. Pdet,B) to denote the
adversary’s success rate against Client-CASH (resp. deterministic key-stretching). For the two-round case,
we obtain a reduction Pdet,B − Padv,B in passwords breached of up to 12%, and up to 21% in the three round
case. Although we only show results for 2 and 3 round systems, we formulate the essential groundwork
for analysis of systems with more rounds. From the signiﬁcant decreases in passwords breached from two
round to three round systems, we might expect that introducing more rounds will decrease the number of
passwords breached in an oﬄine attack even further.
In our analysis we make no assumptions on the password storage practices of the authentication server.
If the authentication server adopts techniques like key stretching and salting then this will only make the
adversary’s task harder. However, we do assume that we face an optimal oﬄine adversary with a ﬁnite
computational budget B, and that users choose passwords uniformly at random. Because the later assump-
tion does not hold for general users we only recommend our solution to users who choose passwords (nearly)
uniformly at random. However, we argue that this assumption is plausible for many of the security conscious
2For example, see https://blog.lastpass.com/2015/06/lastpass-security-notice.html/ (Retrieved 9/1/2015).
2
users that would opt to use a client-side key stretching algorithm (ﬁnding Client-CASH distributions that
are optimal for protecting non-uniform passwords is an important direction for future work).
Overview of Client-CASH When Alice creates an account on server W using the master password
pwdA our client-side application ﬁrst selects a sequence of halting predicates oW = (Pu1,. . ., Pun−1) using
a randomized function SelPreds(pwdA). Afterwards our application sends the message (Alice, H) to the
SW (pwdA)
server where H = H
(pwdA). Here, Hk denotes a collision resistant hash function which costs k work
k denotes the hash function iterated i times and SW (pwdA) denotes the stopping
k
units to compute one time, Hi
time for password pwdA given by the halting predicates oW — that is the smallest number i ≥ 1 for which
Pui(Hi
(pwdA),
sends (Alice, H) to the server and gains access to her account. An incorrect password guess pg (cid:54)= pA would
be rejected with high probability since Hk is collision resistant.
SW (pwdA)
k(pwdA)) = 1. During authentication, Alice recomputes the derived password H = H
k
2 Related Work
Halting Puzzles. At a high level our use of halting predicates is similar to Boyen’s [11] halting puzzles.
In Boyen’s solution the chosen halting predicate will never return ‘halt’ unless we run the key derivation
function with the correct password so the key derivation algorithm never halts (or only halts after the
maximum possible number of rounds). The key diﬀerence between our work and the work of Boyen [11] is
that we carefully bound the amount of information that the chosen halting predicate(s) can leak about the
user’s password. Thus, unlike [11], we can ensure that an adversary who only breaches the client will not be
able to execute an oﬄine attack against the user’s password.
Cost-Asymmetric Server-Side Key Stretching. Manber [26] proposed the use of hidden salt values
(e.g., ‘pepper’) to make it more expensive to reject incorrect passwords. Blocki and Datta [4] reﬁned this
idea using game theoretic tools. While our work closely follows the work of Blocki and Datta [4], we stress
that neither work [4, 26] addresses the issue of client side key-stretching.
In both of these schemes the
authentication server selects a secret salt value t ∈ {1, . . . , m} (e.g., “pepper”) and stores the cryptographic
hash H(pwd, t) — the value t is not stored on the authentication server. An adversary would need to
compute the hash function m times in total to reject an incorrect password, while the authentication server
will need to compute it at most (m + 1)/2 times on average to verify a correct password guess because
it can halt immediately after it ﬁnds the correct value of t. This approach is not suitable for client-side
key-stretching because we would produce m diﬀerent derived keys, but the client program would not know
which one is correct — neither of these value t or H(pwd, t) should be stored on the client. Since we are
performing key-stretching on the client-side we need to ensure that the ﬁnal derived password that is sent
to the authentication server is consistent among diﬀerent authentication sessions.
Password Management Software. Password managers like PwdHash [34] allow the user to generate
multiple passwords from one master password. PwdHash uses a public key-derivation function to (re)generate
each of the user’s passwords from a single master password. Since the key-derivation function is public an
adversary who breaks into any of the third party authentication servers could still execute an oﬄine attack
against the user’s master password. By contrast, password managers like KeePass [33] store an encrypted
password vault on the client and are not necessarily vulnerable in the previous scenario because the adversary
would not have the password vault. The vault, which contains all of the user’s passwords, is encrypted with
the user’s master password. However, any adversary who breaks into the client and steals a copy of this vault
could execute an oﬄine attack against the user’s master password. Commercial applications like LastPass
rely on a trusted server to derive passwords from the user’s master password. Unlike PwdHash and KeePass
these commercial applications are typically not open source so it is not always possible for independent
researchers to verify their security properties. In theory these password managers could be designed so that
an adversary would need to break into multiple servers (e.g., at LinkedIn and LastPass) before he can mount
3
an oﬄine attack on the user’s master password. However, the recent breach at LastPass3 demonstrates that
we cannot rule out this dangerous possibility. Similarly, Client-CASH is designed so that the adversary
would need to breach both the client computer and a third party authentication server to mount an oﬄine
attack.
Deterministic Key Stretching Techniques. Advances in computing hardware (e.g., GPUs [24], ASiCs [16])
make oﬄine attacks increasingly dangerous. An oﬄine adversary can often try millions of password guesses
per second. Morris and Thompson [29] proposed the idea of key-stretching to make the hash function more
expensive to evaluate so that an oﬄine attack is more expensive for the adversary. Other defenses (e.g.,
distributing the storage/computation of cryptographic hash values so that an adversary who only breaches
one server does not learn anything about the user’s password [13] and [15]) require multiple dedicated
authentication servers. Finding good key-stretching techniques is an active area of research4. Hash iteration
(e.g., PBKDF2 [23], BCRYPT [32]) alone is often viewed as an insuﬃcient key-stretching technique because
an oﬄine adversary can often signiﬁcantly reduce costs by building customized hardware to evaluate the
iterated hash function. While computational speeds may vary greatly between diﬀerent devices, memory
latency speeds are relatively consistent [17]. Thus, modern password hash functions like SCRYPT [30] or
Argon2 [2] typically use memory hard functions [17] for key-stretching purposes. Our work is largely orthog-
onal to these lines of research. In particular, we stress that Client-CASHis compatible with both forms of
key-stretching (hash iteration and memory hard functions).
Password Alternatives. Although researchers have been working on alternatives to text-passwords (e.g.,
graphical passwords[22, 14, 1] or biometrics [8]) text-passwords are likely to remain entrenched as the domi-
nant form of authentication for many years [8]. While we focus on text passwords in this paper we stress that
the applications of Client-CASH are not necessarily limited to text passwords. Client-side key stretching
is a valuable primitive that could be used to protect any lower entropy secret whether that secret is a text
password, a graphical password or a biometric signal.
3 Description of the Mechanism
In this section we introduce the Client-CASH mechanism and describe the account creation and authenti-
cation protocols. In our presentation we will use H to denote a cryptographic hash function (e.g., SHA256
or Blake2b) and we will use CH to denote the cost of computing H one time. We will also use Hk to denote
a deterministic hash function that is k times more expensive to compute than H (i.e., CHk = k · CH ). This
might be achieved by hash iteration [32, 23] or by the adoption of memory hard functions [30]. We also use
P to denote the set of passwords a user can pick.
Account Creation. When a user u creates an account a with a master password pwdu ∈ P Client-
CASH will execute the following steps: First, the client will run a randomized algorithm SelPreds(pwdu) to
obtain a sequence of n− 1 halting predicates ou = (Pu1, . . . , Pun−1). Here, a halting predicate Pu : {0, 1}∗ →
{0, 1} is simply a function that will tell us when to halt the key-derivation process. Second, the client will
then store the tuple (a, u, su, ou), where su ← Unif(cid:0){0, 1}L(cid:1) is a random L-bit salt value. The client will
then run the algorithm Reproduce (described below) to derive the password for account a.
We intentionally omit the workings of SelPreds and treat it as a black box for now. However, we stress
that outcome ou selected by the randomized algorithm SelPreds(pwdu) may depend both on the master
password pwdu and on a security parameter  which bounds the amount of information the outcome ou
might leak about pwdu. In later sections we will show how to construct a randomized algorithm SelPreds
which minimizes the adversary’s success rate Padv,B subject to certain security and cost constraints. The
account creation protocol is described formally in Algorithm 1.
3See https://blog.lastpass.com/2015/06/lastpass-security-notice.html/ (Retrieved 9/1/2015).
4For example, the Password Hashing Competition (https://password-hashing.net/index.html) was developed to encour-
age the development of alternative password hashing schemes (e.g., [2, 21])
4
Algorithm 1 Create Account (Client Side)
Input: account name a, username u, password pwdu; random bit strings r1, r2
System Parameters:
ou ← SelPreds(pwdu; r1)
key ← (u, a); su ← Unif(cid:0){0, 1}L; r2
(cid:1); value ← (ou, su)
rounds n, O, iterations k, , L
StoreOnClient(key, value)
H ← Reproduce (u, pwdu, su, n)
SendToServer(u, H)
Authentication. When the user u attempts to access the account a with the password guess pwdg ∈ P,
the client ﬁrst locates the record (a, u, su, ou) on the client. Then we execute the algorithm Reproduce
function to derive the password H
(pwdg, su) for account a.
S(pwdg,ou)
k
Algorithm 2 Reproduce (Client Side)
Input: account name a, username u, password pwdg
key ← (u, a); value ← FindClientRecord(key)
If value = ∅ then return “Account does not exist.”
(ou, su, n,O, ) ← value
(P1, . . . , Pn−1) ← ou; H ← Hk(pwdg, su)
for m = 1, . . . , n − 1 do
If Pm(H) = 1 then Break
H ← Hk(H)
(cid:17)
(cid:16)
Hj
end for
SendToServer(u, H)
Here, we use S(pwd, o) to denote the implicitly deﬁned stopping time for each password pwd ∈ P
given the sequence o = (Pu1, . . . , Pun−1) of halting predicates. Formally, S(pwd, o) = i if and only if (1)
Pui
= 0
for all j < n, where n denotes the maximum possible rounds of hash iteration.
(cid:0)Hi
k (pwd, su)(cid:1) = 1 and Puj
= 0 for all j < i or (2) i = n and Puj
k (pwd, su)
k (pwd, su)
S(pwdg,ou)
k
Thus, to compute H
(pwdg, su) we initially compute H1 ← Hk(pwdg, su) and check if Pu1(H1) =
1. If it is then we return the derived password H1. Otherwise, we compute H2 ← Hk(H1) and return H2 if
and only if Pu2(H1) = 1. This process is repeated until either Pui(Hi) = 1 or i = n. The derived password
is sent to the server to be accepted or rejected. Authentication is guaranteed when pwdg = pwdu and is
very unlikely when pwdg (cid:54)= pwdu because H is collision resistant. The client-side algorithm Reproduce
is presented formally as Algorithm 2. We note that, unlike the account creation process, the algorithm
Reproduce is entirely deterministic.
(cid:16)
Hj
(cid:17)
Remark. We omit any description of how the authentication server stores the derived password as this
is an orthogonal issue. In an ideal world the authentication server would add salt and apply a strong key-
stretching algorithm before storing the derived password. Unfortunately, many authentication servers have
failed to adopt these standard security practices [9]. Furthermore, users will not necessarily know what
security practices have been adopted until the authentication server is actually breached. Thus, in our
security analysis we will assume that the authentication server does not do any key-stretching. By applying
salting and key-stretching algorithms on the client-side we can help protect users even when organizations
fail to adopt these security practices. Of course if the authentication server does perform additional key
stretching then the adversary’s task will be even harder.
Notation and Customizable Parameters We use B to denote the budget of the adversary (i.e., the
maximum number of times the adversary is willing to evaluate H in an attempt to crack the user’s password),
and we will use Csrv to denote the maximum cost that the client is willing to bear per authentication session