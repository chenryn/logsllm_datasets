作者：WenR0@n0tr00t Security Team
#### 简介
最近刷完了吴恩达（Andrew Ng）的Machine
Learning[课程](https://www.bilibili.com/video/av9912938/)，恰巧实验室有相关的需求，看了几个前辈的机器学习检测PHP
Webshell 的文章，便打算自己也抄起袖子，在实战中求真知。
本文会详细的介绍实现机器学习检测PHP Webshell的思路和过程，一步一步和大家一起完成这个检测的工具，文章末尾会放出已经写好的下载链接。
#### 可能需要的背景知识
  * php基础知识（PHP opcode）
  * php Webshell
  * Python（scikit-learn）
##### 背景知识简单介绍
PHP：世界上最好的编程语言，这个不多说了。
PHP opcode：PHP opcode 是脚本编译后的中间语言，就如同Java 的Bytecode、.NET 的MSL。
PHP Webshell：可以简单的理解为 网页后门。
Python scikit-learn：
（翻译：用起来美滋滋的Python 机器学习包）
#### 可行性分析
PHP Webshell本质上也是一段PHP的代码，在没有深入研究前，也知道PHP Webshell
必然有一些规律，比如执行了某些操作（执行获取到的命令、列出目录文件、上传文件、查看文件等等）。如果直接用PHP
的源代码分析，会出现很多的噪音，比如注释内容、花操作等等。如果我们将PHP Webshell
的源代码转化成仅含执行语句操作的内容，就会一定程度上，过滤掉这些噪音。所以，我们使用PHP opcode 进行分析。
针对opcode这种类型的数据内容，我们可以采用词袋，词频等方法来进行提取关键特征。最后使用分类的算法来进行训练。
根据上面的简单“分析”，知道咱们在大体思路上，是可以行得通的。
#### 实战
##### 第一步：准备环境
要获取到PHP opcode，需要添加一个PHP 的插件 VLD，我们拿Windows环境来进行举例。
插件下载地址：[传送门](http://pecl.php.net/package/vld/0.14.0/windows)
选择对应版本进行下载
下载好后，放入到PHP 安装目录下的ext文件夹内，我使用的是PHPstudy环境，
然后编辑php.ini文件，添加一行内容
    extension=php_vld.dll
测试是否安装成功：
测试文件1.php
执行命令：
    php -dvld.active=1 -dvld.execute=0 1.php
如果显示内容是差不多一样的，那我们的环境配置就成功了。
我们需要的就是这段输出中的
    ECHO 、RETURN
这样的opcode。
到这里，我们的PHP环境配置基本完成了。
##### 第二步：准备数据
进行机器学习前，我们很关键的一步是要准备数据，样本的数量和质量直接影响到了我们最后的成果。
###### 下载数据
这里需要准备的数据分为两类，【白名单数据】、【黑名单数据】。
白名单数据指我们正常的PHP程序，黑名单数据指的是PHP Webshell程序。数据源还是我们的老朋友 github.com
在github上搜索PHP，可以得到很多的PHP的项目，咱们筛选几个比较知名和常用的。
白名单列表（一小部分）：
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
再继续搜索一下 Webshell 关键字，也有很多收集 Webshell 的项目。
黑名单列表（一小部分）：
  * 
  * 
  * 
###### 创建工程文件夹
创建工程文件夹【MLCheckWebshell】，并在目录下创建【black-list】【white-list】文件夹。用于存放黑名单文件和白名单文件。
###### 提取opcode
我们创建一个utils.py 文件，用来编写提取opcode的工具函数。
工具函数1：
    def load_php_opcode(phpfilename):
        """
        获取php opcode 信息
        :param phpfilename:
        :return:
        """
        try:
            output = subprocess.check_output(['php.exe', '-dvld.active=1', '-dvld.execute=0', phpfilename], stderr=subprocess.STDOUT)
            tokens = re.findall(r'\s(\b[A-Z_]+\b)\s', output)
            t = " ".join(tokens)
            return t
        except:
            return " "
方法`load_php_opcode` 解读：
用Python 的subprocess 模块来进行执行系统操作，获取其所有输出，并用正则提取opcode，再用空格来连接起来
工具函数2；
    def recursion_load_php_file_opcode(dir):
        """
        递归获取 php opcde
        :param dir: 目录文件
        :return:
        """
        files_list = []
        for root, dirs, files in os.walk(dir):
            for filename in files:
                if filename.endswith('.php'):
                    try:
                        full_path = os.path.join(root, filename)
                        file_content = load_php_opcode(full_path)
                        print "[Gen success] {}".format(full_path)
                        print '--' * 20
                        files_list.append(file_content)
                    except:
                        continue
        return files_list
工具方法2 recursion_load_php_file_opcode
的作用是遍历目标文件夹内的所有的PHP文件并生成opcode，最后生成一个列表，并返回。
然后我们在工程目录下，创建train.py文件。
编写 prepare_data() 函数
    def prepare_data():
        """
        生成需要使用的数据，写入文件后，以供后面应用
        :return:
        """
        # 生成数据并写入文件
        if os.path.exists('white_opcodes.txt') is False:
            print '[Info] White opcodes doesnt exists ... generating opcode ..'
            white_opcodes_list = recursion_load_php_file_opcode('.\\white-list\\')
            with open('white_opcodes.txt', 'w') as f:
                for line in white_opcodes_list:
                    f.write(line + '\n')
        else:
            print '[Info] White opcodes exists'
        if os.path.exists('black_opcodes.txt') is False:
            black_opcodes_list = recursion_load_php_file_opcode('.\\black-list\\')
            with open('black_opcodes.txt', 'w') as f:
                for line in black_opcodes_list:
                    f.write(line + '\n')