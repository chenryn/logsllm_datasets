executable is run at the CS and these two system calls 
are  compromised  -  either  by  substitution  or  through 
trapping and emulation  - the  signature generated  will 
458458
not  match  the  expected  signature,  as  the  contents  of 
the  MSR  registers  cannot  be  reproduced. 
  The 
signature produced at the checkpoint is very likely to 
have  both  exact  and  inexact  components  (Sec.    4)   
that  will fail to  match the expected signature.    There 
is, of course, a pathological case, where the signature 
of a bogus code will match the expected control flow 
signature  at  a  checkpoint.    Note,  however,  that  even 
with  such  a  highly  improbable  "accidental"  signature 
match  at  a  specific  checkpoint,  it  is  practically 
impossible  to  have  such  matches  consistently  for  a 
series  of  randomly  chosen  checkpoints.    Put  in  other 
words,  such  accidental  matches  are  not  likely  to 
continue  across  a  contiguous  series  of  checkpoints, 
making  it  possible  for  the  proposed  scheme  to  easily 
identify bogus, unauthenticated execution at the CS on 
behalf  of  a  client.    What  if  the  signature  generation 
functions  are  compromised?    Here  again,  following 
arguments  similar  to  the  one  we  just  made,  we  can 
easily see that even if a single signature can be made 
to match the expected signature, producing a series of 
such matches is practically impossible. 
It is also not possible to trap to an emulator from 
the  system  call  for  signature  generation  and  generate 
the signatures correctly.    To correctly reproduce some 
of the inexact signature components such as number of 
cache  hits  and  number  of  stall  cycles,  the  entire 
execution  has  to  be  emulated.    This  is  because  the 
emulation  on  traps  cannot  reproduce  the  states  of 
internal hardware components such as caches, branch 
predictors and load miss predictors. 
DARE  is  highly  resistant  to  buffer  overflow 
attacks,  direct  code  injection  or  library  substitution 
attacks since:   
(cid:122) DARE  works  on  basic  blocks,  and  these  attacks 
limit  the  malicious  user  to  compromise  only  one 
basic  block  without  any  branch,  seriously  limiting 
the extent to which the attacker can compromise the 
application.    If the malicious code injects a branch 
out of the compromised block, the execution of the 
branch  is  recorded  in  the  MSRs  that  keep  track  of 
branches.     
(cid:122) If  one  basic  block  produces  unexpected  results  (as 
values  stored  in  general  registers),  this  basic  block 
will  be  assumed  as  suspicious  and  the  AS  can 
dynamically generate additional challenges, with an 
increased frequency to get a higher coverage for the 
control  flow  and  thus  detect  if  the  unexpected 
results are a consequence of compromise or a false 
positive. 
(cid:122) These attacks, in general, will affect components of 
the global program state, as reflected in the contents 
of  MSRs  that  store  cache  access  statistics,  TLB 
statistics,  system  call  statistics  and  other  similar 
information.    DARE  can  thus  detect  these  attacks, 
459459
as it includes these MSRs in the  “variable” part of 
the signature (Sec.    4).     
Provided that the assumptions of Section 3.1 are 
implemented  as  described  in  that  section,  replay 
attacks  are  not  possible,  as  unique  session  tags  are 
used  for  each  challenge-response  pair  on  secure 
channels. 
  Also,  as  explained  in  Section  3.3.2, 
DARE’s  use  of  randomly  and  dynamically  chosen 
checkpoints  makes 
to 
generate a sequence of fake signatures that match the 
expected signatures. 
it  practically 
impossible 
The  accuracy  with  control  flow  is  validated  by 
DARE is a function of the number of checkpoints that 
are  dynamically  enabled  as 
the  code  executes.   
However, one has to note that the ratio of the average 
number of checkpoints at which signatures are verified 
to  the  number  of  basic  blocks  in  the  program  being 
verified  is  not  an  indicator  of  the  control  flow 
coverage achieved by DARE.    This is because at each 
checkpoint, we have the record of the last four braches 
executed  (in  the  Pentium®  4  and  the  Intel®  Xeon® 
Processor  Family  CPUs,  this  number  is  16.),  so  that 
we actually have a record of control flow through the 
4 preceding basic blocks (recall that a basic block is a 
sequence  of  code  with  one  entry  point  and  one  exit 
point, with no branches in-between the entry and exit 
points).    Many  new  Intel  processors  also  permit  the 
logging  of  all  executed  branches  in  a  branch  trace 
stack  in  memory  [Int  08].    If  finer-grained  control 
flow  checking 
tracing 
mechanism  can  be  optionally  used  at  the  cost  of 
performance.    In  addition,  global  state  information 
such as cache miss statistics, instruction commit rates, 
TLB  miss  rates,  user-level  variables  provide  an 
indirect coverage of control flow across several basic 
blocks and potentially for the entire control flow path 
up to that checkpoint. 
is  necessary, 
this  branch 
8.  Performance Evaluation   
encryption 
From  a  performance  perspective,  authenticating 
an execution as described can have a large overhead if 
signatures are generated at closely spaced checkpoints.   
This  is  so  as  the  generation  of  a  signature  requires  a 
system  call  to  read  and  update  MSR  registers, 
signature 
network 
communication  with  the  AS.    The  return  from  this 
system  call  requires  memory-to-memory  copying  to 
restore  the  7  bytes  of  the  original  binary  before 
execution  continues.    To  reduce  the  communication 
and  verification  overhead,  DARE  buffers 
the 
generated signatures and verifies a set of signature at 
each  challenge  but  that  reduction  is  not  enough  by 
itself for each application so DARE supplies optional 
performance enhancement method. 
possible 
and 
The  optional  approach  of  reducing  the  signature 
generation  and  verification  overhead  is  to  reduce  the 
number  of  checkpoints  at  which  signatures  are 
generated.    There  is  a  price  to  be  paid  for  this  –  we 
longer  sections  of  code  between 
now  execute 
verifications. 
  Our  approach  here  is 
to  disable 
signature  checking  at  some  specific  checkpoints 
temporarily:  if  a  specific  checkpoint  location  is 
trapped and verified N times, this checkpoint location 
will  be  disabled  for  the  execution  of  the  next  M 
instructions.    Here, the values of N and M are highly 
depended  to  the  applications  and  may  be  chosen 
empirically  for  each  checkpoint  or  a  common  set  of 
values  for  M  and  N  can  be  used  globally.    The  key 
idea is to choose M and N in a manner that keeps the 
verification overhead to an acceptable level.     
Table 1.    Execution statistics with the proposed 
authentication scheme and using temporary disabling 
of checkpoints for heavily encountered checkpoints 
Hmmer 
Runtime(s)   
Soplex 
Trap Count 
1702669 
1645177 
1623332 
1603932 
1458943 
Trap Count 
890993 
863557 
776312 
655589 
422079 
Trap Count 
1303671 
405393 
94092 
36682 
7000 
Trap Count 
92007 
139265 
138839 
90969 
88693 
∆%  Runtime(s) 
26.8  543.65 
25.8  543.62 
25.4  543.68 
24.9  543.12 
23.3  543.02 
Namd 
∆%  Runtime(s) 
15.6  517.83 
15.4  514.37 
13.4  514.13 
511.30 
11.5 
514.20 
7.6 
Milc 
∆%  Runtime(s) 
36.6  2044.59 
12.4  1556.21 
4.0 
1043.86 
859.40 
2.5 
835.31 
1.6 
Gobmk 
∆%  Runtime(s) 
27.2  341.18 
23.76  340.74 
24.14  340.03 
20.0  337.83 
16.6  333.42 
Mcf 
Runtime(s) 
105  1125.20 
106  1116.29 
107  1112.14 
108  1108.28 
109  1093.73 
105  773.17 
106  771.63 
107  758.10 
108  745.31 
109  719.12 
105  767.72 
106  631.62 
107  584.45 
108  576.09 
109  571.18 
Bzip2 
Runtime(s) 
105  170.298 
106  165.62 
107  166.13 
108  160.98 
109  160.98 
Libquantum 
Runtime(s) 
Trap Count
34108 
34006 
34014 
34039 
33552 
∆%
7.9
7.9
7.9
7.9
7.9
Trap Count
16928 
14943 
14137 
13274 
13807 
Trap Count
3827346
2175782
589643
96004 
32240 
∆%
8.9
8.1
8.1
7.4
8.0
∆%
163.5
100.5
34.5
10.7
7.6
Trap Count
60147 
59884 
59708 
59317 
57180 
∆%
104.8
104.5
104.3
102.8
100.1
for 
a  while  without 
To  control  the  number  of  instruction  executed 
after  disabling  a  checkpoint  location,  we  use  the 
elapsed  instruction  counters  in  the  current  Intel 
processors  [Int07];  similar  counters  can  be  used  on 
other  platforms.    We  can  thus  let  the  application  to 
run 
signature 
generation/validation  overhead  associated  with  a 
checkpoint  location.    This  is  very  important  for  long 
running loops in the code.    A  malicious user can not 
exploit this fact since it is very unlikely for such a user 
to guess  when a checkpoint  location  will be disabled 
and for how long it remains disabled.    In the current 
prototype, 
temporarily 
disabled  by  the  sys_checkpoint  call  in  response  to  a 
request  from  the  AS  that  is  piggybacked  to  the 
validation  message  from  the  AS  to  the  CS.    A 
specific  checkpoints  are 
the 
disabled  checkpoint  is  re-enabled  by  the  running 
process  itself,  based  on  the  value  of  the  elapsed 
instruction counter.   
40
35
30
25
20
15
10
5
0
180
160
140
120
100
80
60
40
20
0
b
z
i
p
2
h
m
m
e
r
l
i
b
q
u
a
n
t
u
m
s
o
p
l
e
x
m
c
f
n
a
m
d
1.00E+05
1.00E+06
1.00E+07
1.00E+08
1.00E+09
g
o
b
m
k
m
i
l
c
Figure 2.    Percentage increase in the execution times of 
the selected benchmarks with the use of the proposed 