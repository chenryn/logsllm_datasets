locking of variables when complex transactions are executed.
This would also result in a high number of false positives.
For example, contract C can safely update the state variables
V2, V3, and V4 in node 2, because they were not used for
conditional branches during the execution of node 4. Similarly,
node 5 can safely update V1 even though it was used for a
control-ﬂow decision in a re-entrant call at node 4.
The dynamic call tree allows Sereum to tackle the chal-
lenging new re-entrancy attacks we developed in Section III.
Recall that detecting cross-function re-entrancy is challeng-
ing for static analysis tools due to potential state explosion.
8
ACACCACCACD4={V1}D7={V2,V3}D8={V4}D10={V2,V4}L2=D4={V1}L5=D7∪D8∪D10={V2,V3,V4}12345678910The stack region can be addressed at the granularity of 32-byte
words. Thus, every stack slot is associated with one or multiple
taints. The storage address space is also accessed at 32-byte
word granularity, i.e., the storage can be considered as a large
array of 32-byte words, where the storage address is the index
into that array. As a result, we treat the storage region similar to
the stack and associate one or multiple taints for every 32-byte
word. However, unlike the stack and storage address space, the
memory region can be accessed at byte granularity. Hence, we
associate every byte in the memory address space with one or
multiple taints. To reduce the memory overhead incurred by
the shadow memory for the memory region, we store taints for
ranges of the memory region. For example, if the same taint
is assigned to memory addresses 0 to 32, we only store one
taint for the whole range. When only the byte at address 16
is assigned a new taint, we split the range and assign the new
taint only to the modiﬁed byte.
We propagate taints through the computations of a smart
contract. As a general taint propagation rule for all instructions,
we take the taints of the input parameters and assign them to
all output parameters. Since the EVM is a stack machine, all
instructions either use the stack to pass parameters or have
constant parameters hard-coded in the code of the contract.
Hence, for all of the computational instructions, such as arith-
metic and logic instructions, the taint engine will pop the taints
associated with the instruction’s input parameters from the
shadow stack and the output of the instruction is then tainted
with the union of all input taints. Constant parameters are
always considered untainted. This ensures that we capture data-
ﬂows within the computations of the contract. One exception
is the SWAP instruction family, which swaps two items on
the stack. The taint engine will also perform an equivalent
swap on the shadow stack without changing taint assignments.
Whenever a value is copied from one of the memory areas
to another area, we also copy the taint between the different
shadow areas. For instance, when a value is copied from the
stack to the memory area, i.e., the contract executes a MSTORE
instruction, the taint engine will pop one taint from the shadow
stack and store it to the shadow memory region. The EVM
architecture is completely deterministic; smart contracts in the
EVM can only access the blockchain state using dedicated
instructions. That
is
possible. This allows us to completely model the data-ﬂows
of the system by tracking data-ﬂows at the EVM instruction
level.
is, no other form of input or output
For re-entrancy detection, as described in Section IV, we
only need one type of taint, which we call DependsOnStorage.
The taint source for this taint
is the SLOAD instruction.
Upon encountering this instruction, the taint engine creates
a taint, which consists of the taint
type and the address
passed as operand to the SLOAD instruction. The conditional
JUMPI instruction is used as a taint sink. Whenever such a
conditional jump is executed, the taint engine checks whether
the condition value is tainted with a DependsOnStorage taint.
If this is the case, the taint engine will extract the storage
address from the taint and add it
to the set of variables
that
inﬂuenced control-ﬂow decisions. Our implementation
supports an arbitrary number of different DependsOnStorage
taints. This allows Sereum to support complex code constructs,
e.g., control-ﬂow decisions which depend on multiple different
storage variables.
Example for Taint Assignment and Propagation. Figure 9
shows a snippet of Ethereum bytecode instructions. In this
snippet of instructions,
there exists a data-ﬂow from the
SLOAD instruction in line 1 to the conditional jump instruction
in line 4. The SLOAD instruction will load a value from the
storage memory region. The ﬁrst and only parameter to SLOAD
is the address in the storage area. The JUMPI instruction
takes two parameters: the jump destination and the condition
whether the jump is to be performed. Recall that all instruction
operands except for the PUSH instruction are passed via the
stack. Figure 8 shows the state of the normal data stack and the
corresponding shadow stack, when the snippet in Figure 9 is
executed. SP denotes the stack pointer before the instruction is
executed. The SLOAD instruction will pop an address A from
the stack, load the value V (referenced by A) from storage,
and then push it onto the stack. Since, the SLOAD instruction
is deﬁned as taint source, the taint engine will create a new
DependsOnStorage taint, which we denote as τs. This taint is
assigned to the value V by pushing it onto the shadow stack.
Note that in this case V was not previously assigned a taint.
The instruction LT (less-than) compares the value loaded from
storage with the value C that was previously pushed on the
stack. This comparison decides whether the conditional jump
should be taken. Since the LT instruction takes two parameters
from the stack (V and C), the taint engine also pops two
taints from the shadow stack (τs and τ0). The result of the
comparison is then tainted with both taints (τs and τ0), so
the taint engine pushes a merged taint (τs, τ0) to the shadow
stack. The PUSH2 instruction then pushes a 2-byte constant
to the stack, which is assigned an empty taint τ∅. Finally, the
JUMPI instruction takes a code pointer (dst) and a boolean
condition as parameters from the stack. Since JUMPI is a taint
sink, the taint engine will check the taints associated with the
boolean condition. If this value is tainted with the τS taint,
it will compute the original storage address A based on the
taint. At this point, we know that the value at storage address
A inﬂuenced the control-ﬂow decision. Hence, we add it to
the set of control-ﬂow inﬂuencing storage addresses, which is
passed to the attack detection component later on.
Using the taint engine, Sereum records the set of storage
addresses that reference values which inﬂuence control-ﬂow
decisions. This set of addresses is then forwarded to the attack
detection component once the contract ﬁnishes executing.
B. Attack Detection
To detect re-entrancy attacks, we lock the write-access to
storage addresses that inﬂuence control-ﬂow decisions. During
execution of a contract, the taint engine detects and records
storage addresses, which are loaded and then inﬂuence the out-
come of a control-ﬂow decision. As described in Section IV,
Sereum uses a dynamic call-tree to compute the set of variables
that are locked for writing. Sereum builds the dynamic call-
tree during execution of a transaction. This tree contains a node
for every invocation of a contract during the transaction. The
dynamic call-tree records how the call stack of the transaction
evolves over time. The ordering of the child nodes in the
dynamic call-tree corresponds to the order of execution during
the transaction. The depth of the node in the tree corresponds
to the depth in the call stack, i.e., the time when a contract
was invoked. The dynamic call-tree is updated whenever a
contract issues or returns from an external call. When the
9
Figure 8. The taint engine propagates the taints τ through the executed instructions and stores them on a shadow stack. The condition for the conditional jump
b depends on the values C and the value V , which was loaded from storage address A. SP is the current stack pointer, pointing to the top of the data stack.
1
2
3
4
SLOAD
LT
PUSH2 dst
JUMPI
Figure 9. Ethereum assembly snippet implementing a solidity if-statement
with a conditional branch. The SLOAD Instruction in line 1 indirectly in-
ﬂuences the control-ﬂow decision in the JUMPI instruction in line 4 as it is
used as a parameter in the LT instruction. LT performs a less-than comparison
between the ﬁrst and second operand on the stack.
called contract completes execution, the set of control-ﬂow
inﬂuencing variables is retrieved from the taint engine and
stored in the node of the call-tree.
Sereum locks only the set of variables, which were used
for control-ﬂow decisions during an external call. To com-
pute this set, Sereum traverses the dynamic call-tree starting
from the node corresponding to the current execution. During
traversal, Sereum searches for nodes, which were part of
executions of the same contract. When Sereum ﬁnds such a
node, it retrieves the set of control-ﬂow inﬂuencing variables
previously recorded by the taint engine. Sereum updates the
set of locked variables after every external call. Whenever a
contract attempts to write to the storage area, i.e., executes
the SSTORE instruction, Sereum intercepts the write and ﬁrst
checks whether the address is locked. If the variable is locked,
Sereum reports a re-entrancy attack and then aborts execution
of the transaction. This results in the EVM unwinding all state
changes and Ether transfers.
VI. EVALUATION
In this section, we evaluate the effectiveness and per-
formance of Sereum based on existing Ethereum contracts
deployed on the Ethereum mainnet. Since our run-time analysis
10
is transparently enabled for each execution of a contract, we
re-execute the transactions that are saved on the Ethereum
blockchain. We compare our ﬁndings with state-of-the-art
academic analysis tools such as Oyente [29], [34] and Se-
curify [42]. Note that we do not compare with Zeus [25] and
SmartCheck [40] since these require access to the source code
of contracts which is rarely available for existing contracts.
The latest version of Securify, which is only available through
a web interface, does not support submitting bytecode contracts
anymore. Therefore, we were not able to test all contracts with
Securify. Furthermore, we do not compare with Mythril [31]
and Manticore [30] as they follow the detection approach of
Oyente (symbolic execution). We also conduct experiments
based on the three new re-entrancy attack patterns we in-
troduced in Section III—effectively demonstrating that only
Sereum is able to detect them all.
A. Run-time Detection of Re-Entrancy Attacks
We ﬁrst connect our Sereum client with the public
Ethereum network to retrieve all the existing blocks while
keeping as many intermediate states in the cache as possible.
Transaction re-execution requires the state of the context block.
States are saved as nodes in the so-called state Patricia tree
of the Ethereum blockchain. We run the geth (Go Ethereum)
client with the options sync mode full, garbage collection mode
archive, and assign as much memory as possible for the cache.
During the block synchronization process, the taint tracking
option of Sereum is disabled to ensure that the client preserves
the original state at each block height.
We then replay the execution of each transaction in the
blockchain. To reduce the execution time, we limit our testset
until block number 4,500,000. Note that we skip those blocks
which were target of denial-of-service attacks as they incur
high execution times of transactions [43]. We replay the
PCInstructionStack(beforeInstruction)ShadowStack(Taints)TaintEngine1SLOADAtopC...τ∅topτ0...CreatenewDependsOnStoragetaintτSas-sociatedwithaddressAandpushitontotheshadowstack.2LTVtopC...τStopτ0...Takethetaintsofthetwoinstructionoperands,τSandτ0andassignbothtobbymovingthemtothesamestackslot.3PUSH2dstb=V<Ctop...τS,τ0top...Pushemptytaintforconstantdst.4JUMPIdsttopb=V<C...τ∅topτS,τ0...Checkthetaintsofthejumpcondition:IfitistaintedwithaDependsOnStoragetaint(τS),thencomputeoriginaladdressAfromtaintandrecordthatthevariableatstorageaddressAinﬂuencedcontrol-ﬂow.transactions using the debug module of the geth RPC API.
This ensures that our replay of transactions does not affect the
public saved blockchain data. We also retrieve an instruction-
level trace of the executed instructions and the corresponding
storage values during the transaction execution. This allows us
to step through the contract’s execution at the granularity of
instructions.
We enable the taint tracking option in Sereum during the
transaction replay to evaluate whether a transaction triggers a
re-entrancy attack pattern; in this case, an exception will be
thrown, the execution of the transaction gets invalidated, and
an error is reported via the API. Sereum will then return the
instruction trace up to the point where the re-entrancy attack
is detected.
All in all, we re-executed 77,987,922 transactions involved
in these 4.5 million blocks, and Sereum has ﬂagged 49,080
(0.063%) of them as re-entrancy violation. Originally, we
identiﬁed 52 involved contracts that count up to only 0.055%
of the total number of 93,942 2 created contracts in our
testset. However, while manually analyzing these contracts,
we discovered that many contracts are created by the same
account and share the same contract code;
they are only
instantiated with different parameters. As such, we consider
these contracts as being identical. More speciﬁcally, we found
three groups of identical contracts involving 21, 4, and 3
contracts, respectively. Similarly, we identiﬁed that a number
of contracts execute the same sequence of instructions that only
differ in the storage addresses. We consider these contracts as
alike contracts. In total, we found two groups of alike contracts
of size 10 and 3, respectively. As a result, Sereum detected 16
identical or alike contracts that are invoked by transactions
matching the re-entrancy attack pattern.
For 6 out of these 16 contracts, the source code is available
on http://etherscan.io, thus allowing us to perform detailed
investigation why they have been ﬂagged. In what follows,
we manually check whether a violating transaction resembles
a real re-entrancy attack, and whether the concerned contract
suffers from re-entrancy vulnerability that could potentially be
exploited.
For contracts with Solidity source code, we perform source
code review and check the contract logic provided the trans-
action input to manually identify re-entrancy attacks. We use
the transaction trace as a reference to follow the control ﬂow
and observe the intra-contracts calls. For contracts with no
source code, we cannot fully recover the contracts semantics
for detected inconsistent state updates. In this case, we use the
transaction trace and the ethersplay [3] disassembler tool to
partially reverse-engineer the contracts.
Based on our investigation, we can conﬁrm that
two
contracts were actually exploited by means of a re-entrancy
attack. One of them is the known DAO [17] attack attributing
to 2,294 attack transactions.3 The second case involves a quite
unknown re-entrancy attack. It occurred at contract address
0xd654bDD32FC99471455e86C2E7f7D7b6437e9179
2We count the number of contracts created by transactions sent to the
contract creation address ‘0x0’. We do not count those contracts created by
other contracts, which will result in a higher number.
3Note that we consider TheDarkDAO [18] and DAO [17] contract as being
identical.
Figure 10. The top plot shows the number of detected transactions triggering
the re-entrancy vulnerability in the ﬂagged contracts. Each contract is catego-
rized by its false positive type described in Section VI-B. Type I corresponds to
“lack of ﬁeld-sensitivity”, Type II “storage deallocation”, Type III “constructor
callbacks”, Type IV “tight contract coupling”, Type V “manual re-entrancy
locking”, and U for Unknown. The contract name is shown for those where
source code available. Contracts in parenthesis are known token contracts
at http://etherscan.io although source code is not available. The bottom plot
shows how the tools Oyente [34] and Securify [42] handle this subset of
contracts. Since the last public version of Securify requires source code, we
add a cross for those (bytecode) contracts we were not able to evaluate.
this contract
and attributed to 43 attack transactions. After reviewing blog
posts and GitHub repositories related to this contract [1], [8],
is known as DSEthToken
we discovered that
and is part of the maker-otc project. This series of attack
transactions were initiated by the contract developers after
they discovered a re-entrancy vulnerability. Since the related
funds were drained by (benign) developers,
the Ethereum
community payed less attention to this incident. In total,
Sereum incurs a false positive rate as low as 0.06% across
all the re-run transactions. Figure 10 shows the number of
transactions that match the re-entrancy attack pattern ﬂagged
by Sereum. Some of the results reﬂect false positives which
will be discussed in detail in Section VI-B.
We also observe that Oyente ﬂagged 8 of these contracts
as vulnerable to re-entrancy attacks. Some contracts were not
detected by Oyente since Oyente does not consider any of
the advanced re-entrancy attacks we discussed in Section III.
During our analysis we noticed that in some cases Oyente
warned about re-entrancy problems, which are only exploitable
with a cross-function re-entrancy attack. However, we believe
this is due to Oyente incorrectly detecting a same-function