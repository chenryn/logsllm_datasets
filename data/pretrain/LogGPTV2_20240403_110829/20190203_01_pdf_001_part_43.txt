### 7.10 Creating a Partitioned Table Publication

#### 7.10.1 Creating a Postgres 9.x Partitioned Table Publication
This section describes the process of creating a publication for a partitioned table on a Postgres database server version 9.6 or earlier. This also applies if the partitioned table is created using table inheritance.

**Steps:**

1. **Create a Master Definition Node and Publication:**
   - Follow the instructions in Section 6.2 to create a master definition node along with a publication containing the partitioned table.
   - For a single-master replication system, follow the directions in Section 5.2 to create the publication database and the publication.

2. **Select Parent and Child Tables:**
   - When creating the publication, ensure that both the parent table and all child tables are selected.

3. **Replication Tree:**
   - The resulting replication tree for the partitioned table in the master definition node will be as shown in Figure 7-106.

4. **Add Additional Master Nodes:**
   - Create additional master nodes as described in Section 6.3.
   - For a single-master replication system, create the subscription database and subscription according to the directions in Section 5.3.

5. **Multi-Master Replication System:**
   - The resulting multi-master replication system after adding an additional master node is shown in Figure 7-108.
   - The partitioned table can now be synchronized across the master nodes in the multi-master replication system.

---

#### 7.10.2 Creating a Postgres Version 10 or Later Partitioned Table Publication
This section describes the process of creating a publication for a partitioned table using either Oracle-compatible partitioning or declarative partitioning on a Postgres 10 or later database server.

**Note:**
- If you are using table inheritance, follow the process described in Section 7.10.1 even when creating the publication on a Postgres 10 or later database server.

**Restrictions:**

- **Synchronization Method:**
  - The log-based method of synchronization must be used for the publication database. The trigger-based method is not supported.
  
- **Single-Master Replication:**
  - Subscription databases must be Postgres version 10 or later. Oracle and SQL Server cannot be used as subscription databases.

- **Multi-Master Replication:**
  - All master nodes must be Postgres version 10 or later and must have the same compatibility mode as the master definition node (either native PostgreSQL or Oracle-compatible).

**Steps:**

1. **Create a Master Definition Node and Publication:**
   - Follow the instructions in Section 6.2 to create a master definition node along with a publication containing the partitioned table.
   - For a single-master replication system, follow the directions in Section 5.2 to create the publication database and the publication.

2. **Select the Parent Table:**
   - When creating the publication, only the parent table appears and is selected.

3. **Replication Tree:**
   - The resulting replication tree for the partitioned table in the master definition node is shown in Figure 7-109.

4. **Add Additional Master Nodes:**
   - Create additional master nodes as described in Section 6.3.
   - For a single-master replication system, create the subscription database and subscription according to the directions in Section 5.3.

5. **Multi-Master Replication System:**
   - The resulting multi-master replication system after adding an additional master node is shown in Figure 7-111.
   - The partitioned table can now be synchronized across the master nodes in the multi-master replication system.

---

### 7.11 Using Secure Sockets Layer (SSL) Connections

Publication and subscription server connections to Postgres databases and master nodes can be secured using SSL. However, xDB Replication Server does not support SSL connections to Oracle and SQL Server databases.

**For a Single-Master Replication System:**
- **Publication Server:**
  - Connect to the publication database and subscription databases.
- **Subscription Server:**
  - Connect to the subscription databases.
- **Migration Toolkit:**
  - Connect to the publication and subscription databases.

**For a Multi-Master Replication System:**
- **Publication Server:**
  - Connect to the master definition node and non-MDN nodes.
- **Migration Toolkit:**
  - Connect to the master definition node and non-MDN nodes.

**Note:**
- SSL connections are not used from the xDB Replication Console or the xDB Replication Server Command Line Interface.
- The Migration Toolkit connection using SSL occurs within the context of the publication and subscription server SSL connections.

**Prerequisites:**
- Configure the database servers involved with the SSL connections.
- Set up the Java truststore and keystore on the hosts running the publication and subscription servers.

**Java Truststore and Keystore:**
- **Truststore:**
  - Contains CA certificates used by the Java client (publication and subscription servers) to verify the server's authenticity.
- **Keystore:**
  - Contains private and public keys and their corresponding certificates, required for client authentication to the server.

**Configuration References:**
- **PostgreSQL Core Documentation:**
  - [Secure TCP Connections with SSL](https://www.postgresql.org/docs/current/static/ssl-tcp.html)
- **JDBC Client Connectivity:**
  - [Configuring the Client in Chapter 4 “Using SSL”](https://jdbc.postgresql.org/documentation/94/ssl.html)

**Sections:**
- **Configuring SSL on a Postgres Database Server (Section 7.11.1)**
- **Configuring SSL on a JDBC Client for the Publication and Subscription Servers (Section 7.11.2)**
- **Requesting SSL Connection to the xDB Replication Server Databases (Section 7.11.3)**

---

### 7.11.1 Configuring SSL on a Postgres Database Server

This section provides an example of configuring SSL on a Postgres database server using a self-signed certificate.

**Steps:**

1. **Create the Certificate Signing Request (CSR):**
   - Generate the CSR and private key.
   - Example:
     ```sh
     $ openssl req -new -text -nodes -subj '/C=US/ST=Massachusetts/L=Bedford/O=EnterpriseDB/OU=XDB/emailAddress=support@enterprisedb.com/CN=enterprisedb' -keyout server.key -out server.csr
     ```

2. **Generate the Self-Signed Certificate:**
   - Use the CSR and private key to generate the self-signed certificate.
   - Example:
     ```sh
     $ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
     ```

3. **Copy the Server Certificate:**
   - Copy the server certificate to be used as the root CA file.
   - Example:
     ```sh
     $ cp server.crt root.crt
     ```

4. **Delete the CSR:**
   - Remove the redundant CSR.
   - Example:
     ```sh
     $ rm server.csr
     ```

5. **Move Files to Data Directory:**
   - Move the certificate and private key files to the Postgres data directory.
   - Example:
     ```sh
     $ mv root.crt /opt/PostgresPlus/9.4AS/data
     $ mv server.crt /opt/PostgresPlus/9.4AS/data
     $ mv server.key /opt/PostgresPlus/9.4AS/data
     ```

6. **Set File Permissions:**
   - Set the ownership and permissions on the certificate and private key files.
   - Example:
     ```sh
     $ chown enterprisedb root.crt server.crt server.key
     $ chgrp enterprisedb root.crt server.crt server.key
     $ chmod 600 root.crt server.crt server.key
     ```

7. **Modify `postgresql.conf`:**
   - Enable SSL and specify the certificate and key files.
   - Example:
     ```sh
     ssl = on
     ssl_cert_file = 'server.crt'
     ssl_key_file = 'server.key'
     ssl_ca_file = 'root.crt'
     ```

8. **Modify `pg_hba.conf`:**
   - Enable SSL usage and specify the authentication method.
   - Example:
     ```sh
     hostssl edb,subnode all 192.168.2.0/24 cert clientcert=1 map=sslusers
     ```

9. **User Name Maps:**
   - Define user name maps in `pg_ident.conf` to allow specific database user names.
   - Example:
     ```sh
     sslusers enterprisedb pubuser
     sslusers enterprisedb subuser
     sslusers enterprisedb mmruser
     sslusers enterprisedb enterprisedb
     ```

10. **Restart the Postgres Database Server:**
    - Restart the server to apply the changes.

---

### 7.11.2 Configuring SSL for the Publication Server and Subscription Server

After configuring SSL on the Postgres database server, follow these steps to generate a certificate and keystore file for the publication and subscription servers.

**Steps:**

1. **Copy Certificate and Key Files:**
   - Copy the server certificate and private key to the host running the publication and subscription servers.
   - Example:
     ```sh
     $ cp xdb.crt xdb_root.crt
     ```

2. **Create DER Format of Root Certificate:**
   - Convert the root certificate to DER format.
   - Example:
     ```sh
     $ openssl x509 -in xdb_root.crt -out xdb_root.crt.der -outform der
     ```

3. **Create Keystore File:**
   - Use the keytool program to create a keystore file.
   - Example:
     ```sh
     $ /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.45.x86_64/jre/bin/keytool -keystore xdb.keystore -alias xdbstore -import -file xdb_root.crt.der
     ```

4. **Encrypt Password:**
   - Encrypt the password used for the keystore.
   - Example:
     ```sh
     $ java -jar edb-repcli.jar -encrypt -input ~/infile -output ~/pwdfile
     ```

5. **Create PKCS #12 Format:**
   - Generate the PKCS #12 format of the keystore file.
   - Example:
     ```sh
     $ openssl pkcs12 -export -in xdb.crt -inkey xdb.key -out xdb_pkcs.p12
     ```

By following these steps, you can configure SSL for your Postgres database server and the publication and subscription servers, ensuring secure connections in your replication system.