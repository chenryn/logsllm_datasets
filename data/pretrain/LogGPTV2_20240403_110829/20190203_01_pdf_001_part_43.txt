(6 rows)
The following section shows creation of the publication when using Postgres 9.6 or an
earlier version. This also applies if the partitioned table is created with table inheritance.
Section 7.10.2 shows creation of the publication when using partitioning compatible with
Oracle databases or declarative partitioning on a Postgres 10 or later database server.
7.10.1 Creating a Postgres 9.x Partitioned Table Publication
The following describes creating the publication on a Postgres database server of version
9.6 or earlier.
Follow the directions in Section 6.2 to create a master definition node along with a
publication containing the partitioned table. (For a single-master replication system,
create the publication database along with the publication according to the directions in
Section 5.2.)
When creating the publication you must select the parent table along with the child
tables.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 513
EDB Postgres Replication Server User’s Guide
Figure 7-106 - Creating a publication for a Postgres 9.x partitioned table
The following shows the resulting replication tree for the partitioned table in the master
definition node:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 514
EDB Postgres Replication Server User’s Guide
Figure 7-107 – Publication containing a Postgres 9.x partitioned table
Create additional master nodes as described in Section 6.3. (For a single-master
replication system, create the subscription database and subscription according to the
directions in Section 5.3.)
The following shows the resulting multi-master replication system after you have added
an additional master node.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 515
EDB Postgres Replication Server User’s Guide
Figure 7-108 - MMR system with a Postgres 9.x partitioned table
The partitioned table can now be kept synchronized on the master nodes of the multi-
master replication system.
7.10.2 Creating a Postgres Version 10 or Later Partitioned Table
Publication
The following describes creating the publication using either partitioning compatible with
Oracle databases or Postgres declarative partitioning on a Postgres 10 or later database
server.
Note: If you are using table inheritance, you must still use the process described in
Section 7.10.1 even when creating the publication on a Postgres 10 or later database
server.
The following restrictions apply when the publication contains a table with partitioning
compatible with Oracle databases or declarative partitioning:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 516
EDB Postgres Replication Server User’s Guide
 The log-based method of synchronization replication must be selected for the
publication database. The trigger-based method cannot be used.
 In a single-master replication system, the subscription databases must be Postgres
version 10 or later. Oracle and SQL Server cannot be used as a subscription
database.
 In a multi-master replication system, all master nodes must be Postgres version 10
or later with the same compatibility mode as the master definition node (that is,
either compatible with native PostgreSQL or compatible with Oracle databases).
For more information on the multi-master replication system compatibility modes,
see Section 10.1.3.3.
Follow the directions in Section 6.2 to create a master definition node along with a
publication containing the partitioned table. (For a single-master replication system,
create the publication database along with the publication according to the directions in
Section 5.2.)
When creating the publication, only the parent table appears and is selected.
Figure 7-109 - Creating a publication for a Postgres 10 or later partitioned table
The following shows the resulting replication tree for the partitioned table in the master
definition node:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 517
EDB Postgres Replication Server User’s Guide
Figure 7-110 - Publication containing a Postgres 10 or later partitioned table
Create additional master nodes as described in Section 6.3. (For a single-master
replication system, create the subscription database and subscription according to the
directions in Section 5.3.)
The following shows the resulting multi-master replication system after you have added
an additional master node.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 518
EDB Postgres Replication Server User’s Guide
Figure 7-111 - MMR system with a Postgres 10 or later partitioned table
The partitioned table can now be kept synchronized on the master nodes of the multi-
master replication system.
7.11 Using Secure Sockets Layer (SSL) Connections
Publication server and subscription server connections to Postgres publication databases,
Postgres subscription databases, and Postgres master nodes can be accomplished using
secure sockets layer (SSL) connectivity.
xDB Replication Server does not support SSL connections to Oracle and SQL Server
databases used within any xDB replication system.
For a single-master replication system, the following connections can be made to
Postgres databases enabled with SSL:
 Publication server connection to the publication database and to the subscription
databases.
 Subscription server connection to the subscription databases.
 Migration Toolkit connection to the publication and subscription databases.
For a multi-master replication system, the following connections can be made to Postgres
databases enabled with SSL:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 519
EDB Postgres Replication Server User’s Guide
 Publication server connection to the master definition node and the non-MDN
nodes.
 Migration Toolkit connection to the master definition node and the non-MDN
nodes.
Note: SSL connections are not used from the xDB Replication Console or the xDB
Replication Server Command Line Interface. The xDB user interfaces communicate with
the publication server and subscription server, which in turn connect to the
publication/subscription databases or master nodes.
Note: The Migration Toolkit connection using SSL occurs within the context of the
publication server and subscription server SSL connections. Therefore, there are no
separate steps that you need to perform for the Migration Toolkit SSL connection.
Using SSL requires various prerequisite configuration steps performed on the database
servers involved with the SSL connections as well as on the Java truststore and keystore
on the hosts running the publication server and subscription server.
The Java truststore is the file containing the Certificate Authority (CA) certificates with
which the Java client (the publication server and subscription server) uses to verify the
authenticity of the server to which it is initiating an SSL connection.
The Java keystore is the file containing private and public keys and their corresponding
certificates. The keystore is required for client authentication to the server, which is used
for xDB Replication Server SSL connections.
The following is material to which you can refer to for guidance in setting up the SSL
connections:
 See the section on secure TCP connections with SSL in Chapter 17 “Server Setup
and Operation” in the PostgreSQL Core Documentation located at:
https://www.postgresql.org/docs/current/static/ssl-tcp.html
for information on setting up SSL connectivity to Postgres database servers.
 For information on JDBC client connectivity using SSL see the section on
configuring the client in Chapter 4 “Using SSL” in the The PostgreSQL JDBC
Interface (https://jdbc.postgresql.org/documentation/94/ssl.html).
The following sections provide additional information for the configuration steps of using
SSL with the xDB Replication Server.
 Configuring SSL on a Postgres database server (Section 7.11.1)
 Configuring SSL on a JDBC client for the publication and subscription servers
(Section 7.11.2)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 520
EDB Postgres Replication Server User’s Guide
 Requesting SSL connection to the xDB Replication Server databases (Section
7.11.3)
7.11.1 Configuring SSL on a Postgres Database Server
This section provides an example of configuring SSL on a Postgres database server to
demonstrate the use of SSL with xDB Replication Server. A self-signed certificate is used
for this purpose.
Step 1: Create the certificate signing request (CSR).
In the following example the generated certificate signing request file is server.csr.
The private key is generated as file server.key.
$ openssl req -new -text -nodes -subj
'/C=US/ST=Massachusetts/L=Bedford/O=EnterpriseDB/OU=XDB/emailAddress=support@
enterprisedb.com/CN=enterprisedb' -keyout server.key -out server.csr
Generating a 1024 bit RSA private key
......................................................++++++
.++++++
writing new private key to 'server.key'
-----
Note: When creating the certificate, the value specified for the common name field
(designated as CN=enterprisedb in this example) must be the database user name that
is specified in the User field of the Add Database or Update Database dialog box used
when defining the publication database (see Section 5.2.2), subscription database (see
Section 5.3.2), or master nodes (see sections 6.2.2 and 6.3).
Alternatively, user name maps can be used as defined in the pg_ident.conf file to
permit more flexibility for the common name and database user name. Steps 8 and 9
describe the use of user name maps.
Step 2: Generate the self-signed certificate.
The following generates a self-signed certificate to file server.crt using the certificate
signing request file, server.csr, and the private key, server.key, as input.
$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out
server.crt
Signature ok
subject=/C=US/ST=Massachusetts/L=Bedford/O=EnterpriseDB/OU=XDB/emailAddress=s
PI:EMAIL/CN=enterprisedb
Getting Private key
Step 3: Make a copy of the server certificate (server.crt) to be used as the root
Certificate Authority (CA) file (root.crt).
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 521
EDB Postgres Replication Server User’s Guide
$ cp server.crt root.crt
Step 4: Delete the now redundant certificate signing request (server.csr).
$ rm server.csr
Step 5: Move or copy the certificate and private key files to the Postgres database server
data directory, POSTGRES_INSTALL_HOME/data.
$ mv root.crt /opt/PostgresPlus/9.4AS/data
$ mv server.crt /opt/PostgresPlus/9.4AS/data
$ mv server.key /opt/PostgresPlus/9.4AS/data
Step 6: Set the file ownership and permissions on the certificate files and private key file.
Set the ownership to the operating system account that owns the data subdirectory of the
Postgres database server, which is either enterprisedb or postgres depending upon
the chosen installation mode (Oracle compatible or PostgreSQL compatible) when you
installed your Postgres database server.
$ chown enterprisedb root.crt server.crt server.key
$ chgrp enterprisedb root.crt server.crt server.key
$ chmod 600 root.crt server.crt server.key
$ ls -l
total 140
.
.
.
-rw------- 1 enterprisedb enterprisedb 1346 Mar 15 09:31 root.crt
-rw------- 1 enterprisedb enterprisedb 1346 Mar 15 09:30 server.crt
-rw------- 1 enterprisedb enterprisedb 1704 Mar 15 09:28 server.key
Step 7: In the postgresql.conf file, make the following modifications.
ssl = on # (change requires restart)
ssl_cert_file = 'server.crt' # (change requires restart)
ssl_key_file = 'server.key' # (change requires restart)
ssl_ca_file = 'root.crt' # (change requires restart)
Step 8: Modify the pg_hba.conf file to enable SSL usage on the desired publication,
subscription, or master node databases.
In the pg_hba.conf file, the hostssl type indicates the entry is used to validate SSL
connection attempts from the client (the publication server and the subscription server).
The authentication method is set to cert with the option clientcert=1 in order to
require an SSL certificate from the client against which authentication is performed using
the common name of the certificate (enterprisedb in this example).
The map=sslusers option specifies that a mapping named sslusers defined in the
pg_ident.conf file is to be used for authentication. This mapping allows a connection
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 522
EDB Postgres Replication Server User’s Guide
to the database if the common name from the certificate and the database user name
attempting the connection match the SYSTEM-USERNAME/PG-USERNAME pair listed in
the pg_ident.conf file.
The following is an example of the settings in the pg_hba.conf file if the publication
and subscription databases (edb and subnode) must use SSL connections.
# TYPE DATABASE USER ADDRESS METHOD
# "local" is for Unix domain socket connections only
local all all md5
# IPv4 local connections:
hostssl edb,subnode all 192.168.2.0/24 cert clientcert=1 map=sslusers
Step 9: The following shows the user name maps in the pg_ident.conf file related to
the pg_hba.conf file by the map=sslusers option. These user name maps permit you
to specify database user names pubuser, subuser, mmruser, or enterprisedb in the
User field of the Add Database or Update Database dialog box when adding the
publication, subscription, or master node databases in the xDB Replication Console.
In other words, these are the permitted set of database user names that can be used by the
publication server and subscription server to connect to the publication, subscription, or
master node databases.
# MAPNAME SYSTEM-USERNAME PG-USERNAME
sslusers enterprisedb pubuser
sslusers enterprisedb subuser
sslusers enterprisedb mmruser
sslusers enterprisedb enterprisedb
Step 10: Restart the Postgres database server after you have made the changes to the
Postgres configuration files.
7.11.2 Configuring SSL for the Publication Server and
Subscription Server
After you have configured SSL on the Postgres database server, the following steps
provide an example of generating a certificate and keystore file for the publication server
and subscription server (the JDBC clients).
Step 1: Using files server.crt and server.key located under the Postgres database
server data subdirectory, create copies of these files and move them to the host where
the publication server and subscription server are running.
For this example, assume file xdb.crt is a copy of server.crt and xdb.key is a
copy of server.key.
Step 2: Create a copy of xdb.crt.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 523
EDB Postgres Replication Server User’s Guide
$ cp xdb.crt xdb_root.crt
$ ls -l
total 12
-rw-r--r-- 1 user user 1346 Mar 15 09:58 xdb.crt
-rw-r--r-- 1 user user 1704 Mar 15 09:58 xdb.key
-rw-r--r-- 1 user user 1346 Mar 15 10:00 xdb_root.crt
Step 3: Create a Distinguished Encoding Rules (DER) format of file xdb_root.crt.
The generated DER format of this file is xdb_root.crt.der. The DER format of the
file is required for the keytool program in the next step.
$ openssl x509 -in xdb_root.crt -out xdb_root.crt.der -outform der
$ ls -l
total 16
-rw-r--r-- 1 user user 1346 Mar 15 09:58 xdb.crt
-rw-r--r-- 1 user user 1704 Mar 15 09:58 xdb.key
-rw-r--r-- 1 user user 1346 Mar 15 10:00 xdb_root.crt
-rw-rw-r-- 1 user user 954 Mar 15 10:05 xdb_root.crt.der
Step 4: Use the keytool program to create a keystore file (xdb.keystore) using
xdb_root.crt.der as the input. This process adds the certificate of the Postgres
database server to the keystore file.
The keytool program can be found under the bin subdirectory of the Java Runtime
Environment installation.
You will be prompted for a new password. Save this password for the next step.
$ /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.45.x86_64/jre/bin/keytool -keystore
xdb.keystore -alias xdbstore -import -file xdb_root.crt.der
Enter keystore password:
Re-enter new password:
Owner: CN=enterprisedb, EMAILADDRESS=PI:EMAIL, OU=XDB,
O=EnterpriseDB, L=Bedford, ST=Massachusetts, C=US
Issuer: CN=enterprisedb, EMAILADDRESS=PI:EMAIL, OU=XDB,
O=EnterpriseDB, L=Bedford, ST=Massachusetts, C=US
Serial number: d7e9966b48e91523
Valid from: Tue Mar 15 08:30:37 GMT-05:00 2016 until: Wed Mar 15 08:30:37
GMT-05:00 2017
Certificate fingerprints:
MD5: 5D:32:AB:47:A2:44:48:84:0B:CA:EC:9E:C9:28:CE:64
SHA1: 31:14:C4:0A:E6:93:AA:2C:3E:4B:09:77:AB:94:DB:71:CB:58:99:D9
SHA256:
2B:EA:59:35:E6:5B:07:07:30:96:D4:80:B0:E1:13:5B:5E:45:97:2E:D0:5C:4F:D8:2F:A6
:23:DA:F8:30:D6:17
Signature algorithm name: SHA1withRSA
Version: 1
Trust this certificate? [no]: yes
Certificate was added to keystore
$ ls -l
total 20
-rw-r--r-- 1 user user 1346 Mar 15 09:58 xdb.crt
-rw-r--r-- 1 user user 1704 Mar 15 09:58 xdb.key
-rw-rw-r-- 1 user user 1019 Mar 15 10:18 xdb.keystore
-rw-r--r-- 1 user user 1346 Mar 15 10:00 xdb_root.crt
-rw-rw-r-- 1 user user 954 Mar 15 10:05 xdb_root.crt.der
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 524
EDB Postgres Replication Server User’s Guide
Step 5: Generate the encrypted form of the new password specified in the preceding step.
The encrypted password must be specified with the sslTrustStorePassword
configuration option of the publication server configuration file for publication server
SSL connections and the subscription server configuration file for subscription server
SSL connections. (See Section 10.4.1 for information on the publication server and
subscription server configuration files.)
Encrypt the password using the xDB Replication Server CLI encrypt command. The
following example shows this process encrypting the password contained in file infile.
$ export PATH=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.45.x86_64/jre/bin:$PATH
$ cd /opt/PostgreSQL/EnterpriseDB-xDBReplicationServer/bin
$ java -jar edb-repcli.jar -encrypt -input ~/infile -output ~/pwdfile
$ cat ~/pwdfile
LGn6+AagiXqumxVHlOKk3w==
Step 6: Create a PKCS #12 format of the keystore file (xdb_pkcs.p12) using files
xdb.crt and xdb.key as input.
You will be prompted for a new password. Save this password for the next step.
$ openssl pkcs12 -export -in xdb.crt -inkey xdb.key -out xdb_pkcs.p12
Enter Export Password:
Verifying - Enter Export Password:
$ ls -l