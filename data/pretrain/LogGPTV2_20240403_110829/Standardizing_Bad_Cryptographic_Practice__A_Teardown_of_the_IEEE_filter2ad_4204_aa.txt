# Title: Standardizing Bad Cryptographic Practice: A Teardown of the IEEE P1735 Standard for Protecting Electronic-design Intellectual Property

## Authors:
- Animesh Chhotaray, University of Florida
- Adib Nahiyan, University of Florida
- Thomas Shrimpton, University of Florida
- Domenic Forte, University of Florida
- Mark Tehranipoor, University of Florida

## Abstract
We present a detailed analysis of the IEEE P1735 standard, which outlines methods for encrypting electronic-design intellectual property (IP) and managing access rights. Our analysis reveals a significant number of cryptographic flaws in the standard. These flaws, in some cases, enable attack vectors that allow for the complete recovery of the underlying plaintext IP. Some of these attack vectors, such as padding-oracle attacks, are well-known. Others, driven by the need to support typical IP usage, including the synthesis of multiple IP pieces into a fully specified chip design and the provision of syntax errors, are novel. We exploit these flaws using a commercial system-on-chip (SoC) tool as a black-box oracle.

In addition to recovering entire plaintext IPs, we demonstrate how to generate standard-compliant ciphertexts of modified IPs containing targeted hardware Trojans. For example, we can modify an AES block cipher implementation to return the secret key for a specific plaintext. We also outline other attacks enabled by the standard, including those on the cryptographic mechanisms for IP licensing. Unfortunately, we show that simple "quick fixes" to the standard and supporting tools do not mitigate all our attacks, suggesting a substantial overhaul is necessary. IP authors using P1735 encryption should consider themselves at risk.

## CCS Concepts
- **Security and Privacy**: Digital rights management, Hardware security implementation
- **Hardware**: Best practices for EDA

## Keywords
- Syntax oracle attack
- Padding oracle attack
- IP encryption
- IP piracy
- Hardware Trojan
- P1735

## Permission Notice
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

**CCS '17, October 30-November 3, 2017, Dallas, TX, USA**
**Â© 2017 Association for Computing Machinery.**
**ACM ISBN 978-1-4503-4946-8/17/10...$15.00**
**https://doi.org/10.1145/3133956.3134040**

## 1. Introduction
A System on Chip (SoC) is an integrated circuit that incorporates all the digital and analog components necessary to implement a target system architecture, such as a radio-frequency receiver, analog-to-digital converter, network interfaces, digital signal processing unit, graphics processing unit, central processing units, cryptographic engine, and memory. Most mobile and handheld devices, as well as many embedded devices, contain SoCs. The complexity and cost of modern SoCs, combined with time-to-market pressures, make it infeasible for a single design house to complete an entire SoC without external support. Instead, they procure electronic design intellectual property (IP) for various SoC components and integrate them with their own in-house IP. An IP is a collection of reusable design specifications, including chip layouts, netlists, and fabrication instructions. These IP cores are the intellectual property of one party and can be licensed to others. A modern SoC can include tens of IPs from different vendors worldwide. This approach to SoC design has become the norm for a large portion of the global IP market.

The current semiconductor IP market is valued at $3.306 billion and is estimated to reach $6.45 billion by 2022, driven by the emergence of IoT devices. Therefore, IP developers have a strong economic incentive to protect their products and reputations. Profit is lost if the IP is used by unauthorized parties, if trade secrets are divulged, or if clone chips are produced. Company reputations are damaged if the IP does not perform as advertised, and if security-critical design features are leaked or backdoors are discovered, the damage can be long-lasting.

To protect the confidentiality of IP and provide a common markup syntax for IP design that is interoperable across different electronic design and automation (EDA) tools and hardware flows, the IEEE SA-Standards Board developed the P1735 standard. This standard has been adopted by Synopsys, Xilinx, and other leaders in the semiconductor IP industry.

However, the IEEE P1735 standard is flawed and potentially dangerous. We expose several cryptographic mistakes, whether explicit, omissions, or failures to address important attack vectors. We show that commercial EDA tools compliant with this standard can enable attacks that allow full recovery of the plaintext IP without the key. We also demonstrate that, given the encryption of an IP, we can forge a standard-compliant encryption of that IP modified to contain targeted hardware trojans. For example, we can turn encrypted IP for an AES implementation into one that can be induced to leak its secret key. This ability to insert hardware trojans results from the fact that, despite appearances, the cryptographic methods standardized in IEEE P1735 provide no integrity protections whatsoever to the encrypted IP.

We use the Synopsys Synplify Premier EDA tool (Version L-2016.09) to make our attacks concrete and to analyze their performance. Synopsys is one of the main EDA tool vendors, with a market share of 37%. It is important to note that we are not finding fault with the tool; the standard itself is the issue.

### Summary of Findings
From a cryptographic perspective, the P1735 standard fails in several critical areas:
- **No Confidentiality Protection**: The standard provides no guidance on how plaintexts should be padded before CBC-mode encryption, leading to well-known padding-oracle attacks.
- **No Integrity Protection**: The standard does not provide any mechanism for ensuring the integrity of the encrypted IP, allowing for the insertion of hardware trojans.
- **Broken Licensing Mechanism**: The standard includes a mechanism for EDA tools to communicate with an IP-author-provided licensing proxy, but this mechanism is vulnerable to multiple attacks due to the use of the same initialization vector (IV) for all messages within a single connection and the echoing of "license granted" and "license denied" messages.

### Contributions
Our work makes several contributions:
- **Analysis of an International Standard**: We analyze a standard adopted by major commercial EDA tools, likely to impact future tool development.
- **Demonstration of Insecurity**: While our attacks are not technically deep, they show that complying with the standard provides no real security.
- **Efficient Attacks**: We optimize our attacks to reduce their complexity, making them efficient and highlighting the need for principled protections in the supply-chain attack surface.
- **Integrity-Violating Attacks**: We demonstrate how to insert targeted hardware Trojans into any IP without knowledge of the key.
- **Licensing Scheme Vulnerabilities**: We analyze potential vulnerabilities in the licensing scheme, which can result in unauthorized access and denial of service.

### Recommendations
From a cryptographic perspective, the solution is straightforward: use a provably secure authenticated encryption scheme that supports associated data (AEAD) to encrypt the sensitive IP and produce the Data Block. For example, the standard could mandate CTR-mode encryption of the IP for the Data Block, with an attached HMAC covering everything in the digital envelope. This would prevent padding-oracle and syntax-oracle attacks. However, this change would require substantial revisions to the standard and the EDA tools that support it.

## 2. Background

### 2.1 SoC Design Flow
Figure 2 illustrates a typical SoC design flow. In the first step, the SoC integrator (design house) specifies the high-level requirements and blocks of the SoC. It then identifies a list of IPs necessary to implement the given specification. These "IP cores" are either developed in-house or purchased from third-party IP (3PIP) developers. In the latter case, the cores may be of the following forms:
- **Soft IP Cores**: Delivered as synthesizable register transfer level (RTL) specifications written in a high-level hardware description language (HDL) such as Verilog or VHDL. These IP cores are human-readable.