title:Standardizing Bad Cryptographic Practice: A Teardown of the IEEE
Standard for Protecting Electronic-design Intellectual Property
author:Animesh Chhotaray and
Adib Nahiyan and
Thomas Shrimpton and
Domenic Forte and
Mark Mohammad Tehranipoor
Standardizing Bad Cryptographic Practice
A Teardown of the IEEE P1735 Standard for Protecting Electronic-design Intellectual Property
Animesh Chhotaray
University of Florida
Adib Nahiyan
University of Florida
Thomas Shrimpton
University of Florida
Domenic Forte
University of Florida
Mark Tehranipoor
University of Florida
ABSTRACT
We provide an analysis of IEEE standard P1735, which describes
methods for encrypting electronic-design intellectual property (IP),
as well as the management of access rights for such IP. We find a
surprising number of cryptographic mistakes in the standard. In
the most egregious cases, these mistakes enable attack vectors that
allow us to recover the entire underlying plaintext IP. Some of these
attack vectors are well-known, e.g. padding-oracle attacks. Others
are new, and are made possible by the need to support the typical
uses of the underlying IP; in particular, the need for commercial
system-on-chip (SoC) tools to synthesize multiple pieces of IP into a
fully specified chip design and to provide syntax errors. We exploit
these mistakes in a variety of ways, leveraging a commercial SoC
tool as a black-box oracle.
In addition to being able to recover entire plaintext IP, we show
how to produce standard-compliant ciphertexts of IP that have been
modified to include targeted hardware Trojans. For example, IP that
correctly implements the AES block cipher on all but one (arbitrary)
plaintext that induces the block cipher to return the secret key.
We outline a number of other attacks that the standard allows,
including on the cryptographic mechanism for IP licensing. Un-
fortunately, we show that obvious “quick fixes” to the standard
(and the tools that support it) do not stop all of our attacks. This
suggests that the standard requires a significant overhaul, and that
IP-authors using P1735 encryption should consider themselves at
risk.
CCS CONCEPTS
• Security and privacy → Digital rights management; Hardware
security implementation; • Hardware → Best practices for EDA;
KEYWORDS
syntax oracle attack, padding oracle attack, IP encryption, IP piracy,
hardware Trojan, P1735
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134040
1 INTRODUCTION
A System on Chip (SoC) is a single integrated circuit that incorpo-
rates all of the digital and analog components necessary to imple-
ment a target system architecture, e.g., a radio-frequency receiver,
an analog-to-digital converter, network interfaces, a digital signal
processing unit, a graphics processing unit, one or more central
processing units, a cryptographic engine, memory, and so on. The
vast majority of mobile and handheld devices contain a SoC, as do
many embedded devices. The complexity and cost of modern SoC
processors, amplified by time-to-market pressure, makes it infea-
sible for a single design house to complete an entire SoC without
outside support. Instead, they procure electronic design intellec-
tual property (IP) for various SoC components and integrate them
with their own in-house IP. An IP is a collection of reusable design
specifications that may include — a chip layout, a netlist, a set of
fabrication instructions, etc [13]. These IP cores are intellectual
property of one party, and could be licensed to other parties as well.
A modern SoC can include tens of IPs from different vendors dis-
tributed across the globe. This approach to SoC design has become
the norm for a large portion of the global IP market.
The current semiconductor IP market is valued at $3.306 billion,
and is estimated to reach $6.45 billion by 2022 [30] with the emer-
gence of IoT devices. Thus, IP developers have a clear economic
incentive to protect their products and their reputations. Profit
is lost if the IP is used by parties who have not paid for it, if it
divulges trade secrets, or if it is used to produce so-called “clone”
chips. Company reputations are damaged if the IP does not perform
as advertised. And if security critical design features are leaked, or
backdoors uncovered by users, the damage can be long-lasting.
In order to protect confidentiality of IP and provide a common
mark-up syntax for IP design that is interoperable across different
electronic design and automation (EDA) tools and hardware flows,
the IEEE SA-Standards Board developed the P1735 standard [13].
This standard has been adopted by Synopsys, Xilinx, and other
leaders of the semiconductor IP industry.
IEEE P1735 is broken (and potentially dangerous). We ex-
pose a number of cryptographic mistakes in the P1735 standard,
be they explicit mistakes, mistakes of omission, or failure to ad-
dress important attack vectors. We show that commercial EDA
tools that comply with this standard can actually enable attacks
that allow full recovery of the plaintext IP without the key. We
also demonstrate that, given the encryption of an IP, we can forge
a standard-compliant encryption of that IP modified to contain
targeted hardware trojans of our choosing. For example, we turn en-
crypted IP for an AES implementation into one that can be induced
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1533provide a wealth of observable syntax-error messages, once the
encrypted IP has been decrypted and the tool begins to process the
plaintext. Indeed, the standard recommends this:
“all tools do error checking and report errors and
warnings to the user. The quality of those error mes-
sages reflects on the usability of those tools, and by
extension, the quality of protected IP.” [13, Section 10]
Moreover, the standard suggests that such error messages are not
useful to attackers:
“... for IP of more than trivial complexity, it is highly
unlikely that information in error messages will fun-
damentally compromise the IP and allow essential
information to be stolen. Therefore, there is a good
argument that protected IP is more usable with error
messages that are transparent and the risk of loss of
value will be little to none.” [13, Section 10]
Our SOA attack shows this thinking is entirely wrong-headed.
In addition to providing no actual confi-
No integrity protection.
dentiality guarantees to the underlying IP, a P1735 digital envelope
provides no integrity protection. To be fair, the standard does not
call out integrity protection of the digital envelope (or even the IP)
as an explicit goal. One might even argue that there is no need for
integrity protection. After all, the standard states that the EDA tool
is assumed to be trusted, and there is no incentive for an honest
IP user to maul the digital envelope it receives from the IP author.
Our position is that this viewpoint is too narrow. Rogue entities do
exist in the modern SoC design-flow, and the existence of P1735 is
evidence that the semiconductor industry acknowledges the real
(and costly) threat they represent.
To highlight the danger of not addressing integrity protection,
we give an attack that succeeds to embed targeted hardware-Trojans
into an IP that is encrypted via a P1735 digital envelope. In fact, the
standard admits such an attack trivially, because the creator of the
digital envelope selects the AES key K, and the standard provides
no mechanism for authenticating the party who selected it. But
our attack works even if the key K is unknown and bound to the IP
author.
Broken licensing-proxy mechanism. The standard also in-
cludes a mechanism for EDA tools to communicate with an IP-
author-provided licensing proxy. Loosely, the tool sends an AES-
CBC encrypted “license request” message on behalf of the user, and
the proxy responds with an AES-CBC encrypted “license granted”
or “license denied” message. Although we did not have available a
commercial tool that implements this protocol, P1735 appears to ad-
mit multiple attacks on it. Here, the culprits are the use of the same
initialization vector (IV) for all messages sent within a single con-
nection (and there may be multiple license requests and responses
within a connection), and the fact that the “license granted” and
“license denied” messages both echo the “license request” message.
There are a number of other cryptographic errors that are not
as obviously damaging, and numerous places where the standard
is vague or silent on security critical matters. A broader summary
is found in Appendix A.
Figure 1: A P1735 ver. 2 Digital Envelope. The Rights Block contains
the RSA-encryption of an AES key, which is used to encrypt the
sensitive portions of the IP with AES-CBC mode. Note that only
the Rights Block is covered by the authentication mechanism.
to leak its secret key. This ability to insert HW trojans results from
the fact that, despite surface appearance to the contrary, the cryp-
tographic methods standardized in IEEE P1735 provide no integrity
protections whatsoever to the encrypted IP.
We use the Synopsys Synplify Premier EDA tool (Version L-
2016.09) to make our attacks concrete and to analyze their per-
formance. Synopsys is one of the main EDA tool vendors, with a
market share of 37% [1]. To be clear, we are not finding fault with
the tool: it is the standard that bears the blame.
Let us give a very brief summary of what P1735 gets wrong, from
a cryptographic perspective, and how we exploit these mistakes.
No confidentiality protection. Figure 1 gives a slightly simpli-
fied view of the P1735 “digital envelope.” It implements a kind of
hybrid public-key encryption scheme: it transports an AES key K
that is encrypted under the RSA public-key of the EDA tool, and
then the sensitive portion of the IP is encrypted using AES (un-
der key K) in CBC-mode. While the Data Block contains the AES
encrypted IP, the Key Block holds the encryption of the AES key.
We stress that CBC-mode is the only symmetric-key encryption
scheme discussed in the standard.1
First of all, the P1735 standard provides no guidance as to how
plaintexts should be padded prior to CBC-mode encryption. Thus,
tools wishing to support P1735 are left to make a choice that is
known to be security critical [29, 35, 37]. As an example, the Synop-
sys Synplify Premier tool implements the commonly used PKCS#7
scheme; it also reports a distinguishable padding error upon decryp-
tion. The combination of these leads to well-known padding-oracle
attacks (POA), which we exploit to recover full plaintexts without
knowledge of the key.
An informed “quick fix” to stop the padding-oracle attack might
be to employ a different padding scheme, e.g. OZ or AByte padding [9,
28]. Or to switch from CBC-mode to a block-cipher mode that re-
quires no padding, e.g., counter-mode (CTR). But none of these
would stop our new syntax-oracle attack (SOA) from recovering
plaintext. In this attack, we exploit the fact that EDA tools may
1The standard allows for DES- and 3DES-based CBC-mode (although these are depre-
cated), and requires that AES128- and AES256-based CBC-mode be supported.
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1534Figure 2: System-on-chip (SoC) design flow.
Summary of our contributions. At a high level, our work makes
contributions along multiple dimensions. First, it analyzes an inter-
national standard that has been adopted by major commercial EDA
tools and is likely to impact the development of future tools. Second,
while our attacks are not technically deep from a cryptographic
perspective, they demonstrate that complying with the standard
provides no real security. We optimize these attacks to make them
quite efficient, especially when one considers the amount of time
(and money) that IP developers expend to develop their products.
Third, we bring to the attention of the security community a facet
of the supply-chain attack surface that is badly in need of principled
protections. We hope our work will encourage others to examine
standards that aim to protect other pieces of this surface.
Concretely, the main results of this paper are:
• Two attacks (POA and SOA) that extract the plaintext from
standard-compliant ciphertexts without knowledge of the
key. We also provide optimizations suitable for both attacks
that reduce their complexity from a naive O (N 2) to O (N ),
where N is the number of ciphertext blocks.
• Application of the POA and SOA attacks on nine IP bench-
marks of various sizes and content. We quantitatively com-
pare them according to their execution time and accuracy.
• Two integrity-violating attacks that require only partial
knowledge of the IP plaintext; this can be gained using POA,
SOA or other attacks that may yet be discovered. We show
how to insert a targeted hardware Trojan into any IP without
knowledge of the key.
• Analysis of potential vulnerabilities in the licensing scheme
described by the standard, which can result in unauthorized
access and denial of service.
We also provide recommendations for addressing the mistakes
we identify and exploit. From a cryptographic perspective, the so-
lution is simple. Use a provably secure authenticated encryption
scheme that supports associated data (AEAD) to encrypt the sensi-
tive IP and produce the Data Block, treating everything that is not
the sensitive IP (but still is to be transmitted) as the associated data
(AD). For example, the standard could mandate CTR-mode encryp-
tion of the IP for the Data Block, with an attached HMAC whose
scope covers everything to be included in the digital envelope. That
is, use CTR-mode encryption and HMAC in an “encrypt-then-MAC”
style of generic composition [8],[27], appropriately modified to ad-
mit AD. Using CTR-mode removes concerns about padding (hence
padding-oracle attacks), and using encrypt-then-MAC style AEAD
prevents (in theory) any sort of syntax-oracle attack because digital
envelopes would be rejected as invalid before any plaintext from
the Data Block was released for further processing.
However, we note that this conceptually straightforward change
would require substantial changes in the standard, and the EDA
tools that support it. Minimally, the IEEE would need to: deprecate
previous versions of the P1735 standard immediately with no sup-
port for backward compatibility, define standard specific variables
(or “pragmas”) for an AEAD scheme, define the revamped mark-
up format of the digital envelope, explicitly define the behavior
of the tool when decryption fails (due to any reason), and create
a set of standard error messages that the tool can output during
processing of the digital envelope (e.g., a version error to identify
digital envelopes complying with a previous version of the P1735
standard.) Likewise, EDA tool providers would need to: identify
deprecated versions of the standard and report version error, add
new APIs that the IP authors could use to create the digital envelope
using the standardized AEAD scheme, add error flags/messages in
its compiler to catch errors due to the AEAD scheme, and avoid
conflating cryptographic error messages with Verilog/VHDL error
messages.
2 BACKGROUND
2.1 SoC Design Flow
Figure 2 shows a typical SoC design. In the first step, the SoC in-
tegrator (design house) specifies the high-level requirements and
blocks of the SoC. It then identifies a list of IPs necessary to imple-
ment the given specification. These “IP cores” are either developed
in-house or purchased from third party IP (3PIP) developers. In the
latter case, the cores may be of the following forms:
• “Soft” IP cores are delivered as synthesizable register transfer
level (RTL) specifications written in a high-level hardware
description language (HDL) such as Verilog or VHDL. These
IP cores are human-readable by virtue of being written in a
high-level language.