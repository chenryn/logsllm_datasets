# Efficiently Verifiable Computation on Encrypted Data

**Authors:**
- Dario Fiore
- Rosario Gennaro
- Valerio Pastro

**Affiliations:**
- Dario Fiore: IMDEA Software Institute
- Rosario Gennaro and Valerio Pastro: Center for Algorithms and Interactive Scientific Software, The City College of New York

**Contact:**
- Dario Fiore: [EMAIL]
- Rosario Gennaro and Valerio Pastro: {rosario, pastro}@cs.ccny.cuny.edu

## Abstract

We study the problem of verifiable delegation of computation on encrypted data. We enhance previous definitions to handle adversaries that can learn whether or not clients accept the results of delegated computations. In this robust model, we present a scheme for arbitrary computations and highly efficient schemes for specific function classes, including linear combinations, high-degree univariate polynomials, and multivariate quadratic polynomials. Notably, the latter class includes many useful statistical functions. Using our solution, a client can store large, encrypted datasets on a server, query statistics over the data, and receive encrypted results that can be efficiently verified and decrypted.

A key contribution to the efficiency of our schemes is a novel homomorphic hashing technique that allows us to authenticate computations at the same cost as if the data were in plaintext, avoiding a 10^4 overhead that would occur with a naive approach. We support our theoretical constructions with extensive implementation tests, demonstrating the practical feasibility of our schemes.

**Note:** An extended abstract of this paper appears in the proceedings of ACM CCS 2014. This is the full version.

## Table of Contents

1. Introduction
   1.1 Our Contribution
   1.2 Related Work
2. Problem Definition
3. A Generic Solution
   3.1 Homomorphic Encryption
   3.2 The Generic Scheme
4. Tools
   4.1 Somewhat Homomorphic Encryption for Quadratic Functions
   4.2 Homomorphic Hash Functions
   4.3 Amortized Closed-Form Efficient Pseudorandom Functions
5. Computing Multivariate Polynomials of Degree 2
6. Computing Polynomials of Large Degree
7. Computing Linear Combinations
8. Computing Linear Functions over the Ring Z_2k
9. Applications
   9.1 Statistics on Encrypted Data Sets
   9.2 Distance and Correlation Measures on Encrypted Data Sets
   9.3 Discrete Fourier Transform
10. Experimental Evaluation
   10.1 Setup
   10.2 Timings

## 1. Introduction

Can an external party compute on our behalf without learning our private data? Can we efficiently verify that the computation was performed correctly? These are central questions in the context of privacy and security in cloud computing, where businesses outsource computational tasks to service providers rather than maintaining their own resources. Both questions have a long history of research.

Computing arbitrary functions on encrypted data has been a long-standing goal in cryptography, first recognized by early researchers [52]. This challenge remained open until Gentry's groundbreaking work on fully homomorphic encryption (FHE) [29]. Gentry's construction opened up new possibilities, leading to the development of more efficient FHE schemes [30, 57, 31, 20, 19, 32, 18], and we now stand on the brink of having FHE schemes that are practical for real-world use.

Efficient verification of complex computations was the primary goal of interactive proofs [4, 37], where a powerful prover could convince a weak verifier of the truth of statements that the verifier could not compute independently. Research into making the verifier as efficient as possible led to probabilistically checkable proofs (PCPs) [3, 6, 5] and their cryptographic applications, such as Kilian's arguments [42, 43] and Micali's non-interactive CS Proofs [48].

The application to cloud computing has renewed interest in this area, particularly in finding protocols where arbitrary polynomial-time computations can be efficiently verified by a linear or quasi-linear verifier, and performed by a prover with minimal overhead. Starting with the work on proofs for muggles [35], several lines of research have revisited and scaled down the PCP machinery [36, 13, 14]. Other approaches have explored alternative ways to arithmetize computations to construct efficient proofs [38, 45, 27], while some have used FHE as a tool for efficient verification of arbitrary computations [26, 2, 23]. Implementation efforts [24, 54, 55, 59, 49, 11, 60] show that practical efficiency is within reach, with the quadratic span program techniques of [27, 49] showing particular promise.

### 1.1 Our Contribution

Given the practical and theoretical importance of this topic, it is surprising that most research has focused on solving either one of the two main questions. Many results exist on finding efficient FHE schemes for computation on encrypted data, but without verification of correctness. Conversely, works on verifying computations have mostly assumed the data is in plaintext or in a restricted privacy model, with a notable exception being the construction by Goldwasser et al. [34], based on functional encryption.

Protocols for verifiable computation (VC) in [26, 23, 2] use FHE as a tool for verifiability, achieving data privacy as a by-product, but only if the client's acceptance bit is hidden from the server. In [26], only the topology of the function is revealed [10]. The formal definition in [26] includes input privacy but does not account for verification queries.

This model is restrictive in practice, as the client's acceptance bit may leak due to various reasons, such as error messages, protocol termination, or recomputation.

To the best of our knowledge, no existing definition of private and secure VC with verification queries can be found in the literature. We provide such definitions, present schemes that satisfy them, and support our constructions with experimental results. Our contributions include:

1. An enhanced definition from [26] that allows verification queries by the adversary, and an extension that models adaptive security and function privacy. This is the strongest possible model in which we can define security.
2. A protocol based on FHE for arbitrary computations.
3. Constructions for specific function families: multivariate quadratic polynomials, high-degree univariate polynomials, and linear combinations, all on encrypted data (see Table 1). Using our schemes, a client can outsource the storage of large, privacy-sensitive datasets (e.g., location, medical, genomic data) to a server, and get statistics or distance measures computed on them, with guarantees of correctness and data privacy.
4. A key technical contribution is the introduction of a homomorphic hashing technique that provides improvements of more than four orders of magnitude compared to a naive approach.
5. Implementations and performance numbers for our schemes using practical security parameters.

### 1.2 Related Work

Our generic protocol assumes the existence of an FHE scheme and a secure, though not necessarily private, VC scheme, such as [27]. The basic idea is to encrypt the data with the FHE scheme and run the VC scheme on the function `EvalFHE(f)` instead of `f`, and on the input `EncFHE(x)` instead of `x`. This prevents the server from using the client as a decryption oracle for the FHE, as the acceptance bit is determined before decryption, based on the correctness of the evaluation of `EvalFHE(f)`.

**Ad-Hoc Protocols:**

We focus on the scenario where a client stores a large dataset `x = (x0, ..., xt)` on a server and later asks the server to compute functions `f` over `x`. Our solutions work in an amortized model, where the client spends a single preprocessing phase whose cost is equivalent to running `f(x)`, and then amortizes this one-time cost over multiple function evaluations. Additionally, our protocols work in the streaming model, allowing clients to process and outsource individual data items `xi` separately. This is desirable for storage applications, as it enables clients to work with very small memory, independent of the size of the (potentially huge) dataset. For example, consider a set of weak devices that read temperatures in specific locations and daily send the data to a server for later analysis (e.g., calculating the mean temperature over a year).

We focus on datasets consisting of elements in a finite field `Fp`, and the outsourced functions can be:
1. Quadratic multivariate polynomials.
2. Univariate polynomials of large degree.
3. Linear combinations.

**Quadratic Multivariate Polynomials:**

We constructed a VC scheme where the client stores several encrypted datasets on the server and asks it to compute a quadratic polynomial `f` on any of the outsourced sets. After a single preprocessing step for each `f`, the client can verify results in constant time. Our scheme achieves both input and output privacy.

In terms of applications, this scheme allows the computation of various statistics (average, variance, covariance, RMS, linear regression, correlation coefficient, etc.) on remotely stored datasets in a private and verifiable manner. We also consider the application where a client stores a large matrix `X` on the server and asks to compute a distance measure (e.g., Euclidean distance) between a given vector `y` and any row of `X`. We propose a variant of our scheme that is function-private for a restricted class of quadratic polynomials (privacy holds only for the coefficients of the linear terms). Since the above application fits this restriction, we provide a solution where both `X` and `y` are private.

We are not aware of any other existing solution for privately evaluating multivariate quadratic polynomials, except by instantiating our paradigm with existing tools [19, 7]. Our experiments show that our ad-hoc protocol significantly improves performance; for instance, the computation of the variance function on the server is more than 10^4 times faster. In cloud computing, where clients pay for CPU cycles, such improvements lead to substantial savings.

**High-Degree Univariate Polynomials:**

We also constructed a VC scheme for a complementary setting. Here, we think of `x` as the coefficients of a univariate polynomial `Px(z) = Σt_j=0 xj * zj` of degree `t`. With our protocol, the client stores the large polynomial `Enc(Px)` on the server and then asks it to compute `Enc(Px(z))` on many different points `z` (provided in plaintext). After the single preprocessing step to outsource `Px`, the client can verify all computations in constant time. Our scheme is function-private as `Px` is encrypted.

In terms of applications, we discuss how this solution can be used to outsource the Discrete Fourier Transform computation on encrypted vectors.

**Linear Combinations:**

Finally, we considered the task of outsourcing linear combinations. For this, we constructed a clean and efficient solution that provides both input and function privacy but lacks efficient verification. However, the client can work with very short memory in the streaming model. A solution with efficient verification (achieving both input and function privacy) can be obtained using our variant scheme for quadratic polynomials. Compared to the latter, the advantage of our dedicated scheme is efficiency: we achieve verifiability using information-theoretic techniques that do not require expensive cryptographic computations (e.g., over bilinear groups).

**Overview of Our Techniques:**

To design our protocols, we follow the blueprint of our generic scheme and develop additional techniques for significant efficiency improvements. Our basic idea is to encrypt the data with a somewhat homomorphic encryption scheme (for privacy) and add an authentication mechanism on top of the ciphertexts (for security). For encryption, we use a slightly modified version of the Brakerski and Vaikuntanathan (BV) scheme [20]. The server stores `μ = (μ0, ..., μt)`, where `μi` is a BV encryption of `xi`. For authentication, we rely on homomorphic MACs [28]. This primitive enables a client to use a secret key to authenticate a set of messages `m1, ..., mt` by producing corresponding tags `σ1, ..., σt`. Later, given these tags, anyone (without any secret key) can produce a tag `σ` that authenticates `m = f(m1, ..., mt)` as the output of `f` on the previously authenticated inputs. Verification can be performed without knowing the original messages, and recent schemes [7] allow for more efficient verification than running `f`.

The generic idea for our schemes is to generate a MAC `σi` for each `μi` and use these MACs to authenticate the computations performed by the server.