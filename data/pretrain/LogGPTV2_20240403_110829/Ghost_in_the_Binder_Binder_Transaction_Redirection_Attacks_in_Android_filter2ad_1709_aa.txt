title:Ghost in the Binder: Binder Transaction Redirection Attacks in Android
System Services
author:Xiaobo Xiang and
Ren Zhang and
Hanxiang Wen and
Xiaorui Gong and
Baoxu Liu
Ghost in the Binder: Binder Transaction Redirection Attacks in
Android System Services
Xiaobo Xiang
PI:EMAIL
CAS-KLONAT§, IIE, CAS†
School of Cyber Security, UCAS¶
Alpha Lab∗, 360 GESG‡
Beijing, China
Ren Zhang
PI:EMAIL
Nervos
Beijing, China
Shandong Institute of Blockchain
Hanxiang Wen
PI:EMAIL
Ant Group
Hangzhou, China
Xiaorui Gong (cid:66)
PI:EMAIL
CAS-KLONAT§, IIE, CAS†
School of Cyber Security, UCAS¶
Beijing, China
Baoxu Liu
PI:EMAIL
CAS-KLONAT§, IIE, CAS†
School of Cyber Security, UCAS¶
Beijing, China
ABSTRACT
Binder, the main mechanism for Android applications to access
system services, adopts a client-server role model in its design,
assuming the system service as the server and the application as
the client. However, a growing number of scenarios require the
system service to act as a Binder client and to send queries to a
Binder server possibly instantiated by the application. Departing
from this role-reversal possibility, this paper proposes the Binder
Transaction Redirection (BiTRe) attacks, where the attacker induces
the system service to transact with a customized Binder server and
then attacks from the Binder server—an often unprotected direction.
We demonstrate the scale of the attack surface by enumerating the
utilizable Binder interfaces in BiTRe, and discover that the attack
surface grows with the Android release version. In Android 11,
more than 70% of the Binder interfaces are affected by or can be
utilized in BiTRe. We prove the attacks’ feasibility by (1) construct-
ing a prototype system that can automatically generate executable
programs to reach a substantial part of the attack surface, and (2)
identifying a series of vulnerabilities, which are acknowledged by
Google and assigned ten CVEs.
CCS CONCEPTS
• Security and privacy → Mobile platform security.
(cid:66) Corresponding author.
§ Key Laboratory of Network Assessment Technology, CAS.
† Institute of Information Engineering, Chinese Academy of Sciences.
¶ University of Chinese Academy of Sciences.
‡ 360 Government and Enterprise Security Group.
∗ Part of this work was done during Xiaobo Xiang’s research internship at Alpha Lab.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485390
KEYWORDS
mobile security; Android security; vulnerability analysis;
ACM Reference Format:
Xiaobo Xiang, Ren Zhang, Hanxiang Wen, Xiaorui Gong (cid:66), and Baoxu
Liu. 2021. Ghost in the Binder: Binder Transaction Redirection Attacks in
Android System Services. In Proceedings of the 2021 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’21), November 15–19, 2021,
Virtual Event, Republic of Korea. ACM, New York, NY, USA, 17 pages. https:
//doi.org/10.1145/3460120.3485390
1 INTRODUCTION
Residing at the core of Android systems, Android system services
often execute in privileged processes and have access to the users’
private information and critical system resources, thus constituting
highly attractive targets for attackers. Most system services can
only be accessed via Binder, an Inter-Process Communication (IPC)
mechanism introduced since the original release of Android. In a
typical Binder transaction, the application, acting as a Binder client,
sends requests to a system service, acting as a Binder server; the
latter then checks the clients’ identities and permissions, processes
the requests, and responds to the client.
Given the crucial role of Binder, its security has been constantly
scrutinized by both academia and industry. Most attacks against
Android system services via Binder can be categorized into three
types based on the exploited vulnerabilities. The first type dis-
covers [2, 12, 13, 19] and utilizes [1, 18, 22, 23, 39] misconfigured
permission checks to visit critical system resources without the ac-
cess rights. The second type targets Binder’s data serialization and
deserialization processes [15, 38]. For example, the XBRF attack pro-
posed by Rosa [38] allows the attacker to indirectly invoke some
protected objects by sending malformed data to the system service,
who mistakenly deserializes these data as references to these pro-
tected objects and initiates the invocation. The third type [16, 21, 32]
exploits the vulnerabilities in the system services’ input validation,
by also sending malformed data to trigger logical or memory cor-
ruption bugs. Although different in mechanisms, all three types
share a common pattern in their strategies: the attacker application
is a Binder client, and the victim system service is a Binder server.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1581CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Xiaobo Xiang, Ren Zhang, Hanxiang Wen, Xiaorui Gong (cid:66), and Baoxu Liu
Noticeably, recent Android releases more frequently require sys-
tem services to act as Binder clients to provide certain functionalities—
e.g., to send intermediate results to the application, or to request
services from another system service or application. In this case, an
application transacts a Binder proxy referencing a Binder server to
the system service, through which the system service can interact
with the Binder server. It is generally believed that this mechanism
also strengthens the security of Android [29], as a cumbersome
system service can now be split into multiple ones that operate
independently of each other, implementing the “separation of duty”
principle.
In this study, we, alternatively, indicate that there are signifi-
cant security flaws embedded in this mechanism. Specifically, when
the system services function as Binder clients, the applications,
including malicious ones, are allowed to assume the Binder-server
role, attacking the system service from an often unprotected di-
rection. We thus forward a new and common family of attacks
exploiting this mechanism, called the Binder Transaction Redirec-
tion (BiTRe) attacks, based on the following two observations: (1)
in the role-reversal case enabled by the current design, the Binder
proxy, through which the system service interacts with the Binder
server, can be implemented by an application—therefore an attacker;
(2) there is no universal way to authenticate the identity of a Binder
server. These design choices allow an attacker to customize an evil
Binder server and then to send its proxy to the system service,
thus redirecting the system service to interact with the customized
Binder server. Lacking explicit acknowledgment of its security im-
plications, attacks leveraging the role-reversal case [24, 42] remain
largely unknown and unaddressed. We demonstrate that the attack
surface is not only broader but also more damaging than previously
believed, as the vulnerabilities lead to, in the worst case, the at-
tacker’s privilege escalated to that of the user “system”, with all
Android permissions granted.
Specifically, there are three key steps in a BiTRe attack after
constructing and instantiating the customized Binder server: (a)
the attacker application—still a Binder client—interacts with the
system service by invoking the latter’s functions in the correct order,
until it accepts the Binder proxy corresponding to the customized
Binder server; (b) the application calls certain functions in the
system service to trigger a transaction between the latter and the
customized Binder server via the proxy; (c) the Binder server, also
residing in the attacker application, replies with malformed data to
attack the system service.
We systematically analyze the BiTRe attacks with the following
technical efforts:
Enumerating the Potential BiTRe Targets in Android Sys-
tem Services. We first measure the scale of the attack surface
via an LLVM compiler [30] plugin by counting two types of Binder
interfaces: (1) target Binder interface (TBI), which are reachable sys-
tem services that can receive Binder proxies from applications; (2)
customizable Binder interface (CBI), which can be instantiated by the
attacker and transact with TBIs as Binder servers. Our enumeration
demonstrates that these numbers grow with the Android release
version, posing continuous challenges to security auditors. Among
the 176 Binder interfaces in Android 11—the latest version as of
May 2021, 57 can serve as TBIs and 84 can serve as CBIs, resulting
in a total number of 128 as 13 can serve as both.
Quantifying the Attack Capabilities of CBIs. CBIs are the at-
tacker’s tools in BiTRe. To prioritize our efforts in locating the
vulnerabilities, we rank all CBIs based on an Interface Complexity
metric we defined and measured. A CBI’s Interface Complexity is
calculated by (1) grouping the inputs and outputs of the CBI’s mem-
ber functions according to their data types, (2) assigning each data
type with a weight value, and (3) computing the weighted counts
of these inputs and outputs. A higher Interface Complexity indi-
cates higher potential damage if the CBI is crafted by an attacker.
This metric proves indicative: of the ten CVEs corresponding to
this study, four of them involve CBIs with the top four Interface
Complexity.
Confirming the Attacks’ Feasibility. We divide a BiTRe attack
into two phases and confirm their feasibility separately: a prepara-
tion phase when the attacker process transacts with a TBI server and
induces it to transact with the CBI server—the aforementioned steps
(a) and (b), and an attacking phase when the CBI server launches
attacks to cause damage—step (c).
We demonstrate the efficiency of the preparation phase by build-
ing a prototype system, which generates executable Proofs of Reach-
ability (PoRs) to automatically induce BiTRe transactions. Our PoRs
do not trigger or exploit vulnerabilities, but merely redirect system
services to transact with our customized Binder servers. The key
challenge is to set the TBI server in two specific states: the first to
accept the Binder proxy, the second to transact with the CBI. This
requires the prototype system to locate the correct TBI-function-
calling sequence and the syntactically-and-semantically-correct
function parameters. We address this challenge by guiding the
system with the knowledge we extracted from our TBI/CBI enu-
meration. Within 24 hours of its execution, our system generates
81 successful PoRs, which differ from each other either in the TBI
or the called CBI function. These PoRs involve 28 CBIs and 12 TBIs,
proving that the attack surface is reachable with little effort.
As for the attacking phase, we perform static code review and
dynamic security tests on role-reversal Binder transactions, starting
from CBIs with high Interface Complexity. We discover a series of
vulnerabilities, which are reported to Google and then patched in
subsequent releases of Android. Ten CVEs are assigned to these
vulnerabilities. Our PoRs can assist in triggering vulnerabilities
associated with seven CVEs.
The vulnerabilities, mainly input validation errors and logical
bugs, exhibit a wide range of trigger mechanisms, as some attack
portals are hidden in nested data structures. We classify them into
four types, based on the numbers of TBIs and CBIs involved, and
elaborate their typical processes.
Identifying the Underlying Mechanism that Enables the Bi-
TRe Attacks. BiTRe is fundamentally different from existing at-
tacks as the malformed messages are sent from a Binder server. It
cannot be solved by strengthening the permission checks, because
the system service can only check the permission set of the appli-
cation, rather than that of the CBI server, which is unrelated to
the former. Moreover, unlike the XBRF attack, BiTRe does not rely
on any data deserialization errors. Yet the worrisome scale of the
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1582Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
BiTRe attacks indicates some missing pieces in Android’s security
policies and the security auditors’ efforts.
We attribute BiTRe to the implicit fixed-role assumption that
a Binder server is a system service. Android’s built-in security
model adopts this assumption and only allows Binder servers to
authenticate their clients’ identities and permissions; clients, on the
other hand, do not have the same tools. Moreover, as pointed out
by Alkhalaf et al. [4], in a typical system following the client-server
architecture, input validation on the server side focuses on security,
whereas that on the client side focuses only on responsiveness,
leaving the client not thoroughly protected.
To sum up, our contribution includes:
(1) Theoretically, we propose the BiTRe attacks, which exploit the
role-reversal mechanism in Android system services.
(2) Empirically, we enumerate the potential BiTRe attack targets
and measure their attack capabilities, revealing the worrisome
scale of this newly discovered attack surface.
(3) Practically, we confirm the damage of the BiTRe attacks by
automatically inducing BiTRe transactions and discovering a
considerable number of vulnerabilities, and assist Google in
fixing them.
With this study, we also call for special attention to a larger
family of attacks represented by BiTRe, where the attack surfaces
are overlooked by both academia and industry as they are concealed
in the general assumptions defined in the system’s security model.
2 DISSECTING BINDER
Binder is the default IPC mechanism for Android applications to
access most system services. Here we first overview its architec-
ture, then introduce its data structures and transaction workflow,
highlighting the active object transmission feature that enables the
role-reversal case.
2.1 Binder Architecture
On the highest level, Binder applies the Proxy design pattern [45]
over a C/S role model. This architecture simplifies both the system
service invocation instruction and the security policy enforcement,
achieving a good balance between security and usability.
C/S Role Model. In analogy to the classic C/S architecture where
a client initiates the connection to a server, in Binder, the process
initiating the transaction is called the Binder client, and the process
receiving the transaction request is called the Binder server. In a
typical Binder transaction, the Binder client is an application, and
the Binder server is a system service. The application initiates the
transaction by calling system-provided APIs, which wrap the ap-
plication as the Binder client and communicate with the system
service. The system service, with its native Binder-server imple-
mentation, then receives the request, performs permission checks,
processes the request, and sends the response.
The security model of Binder also follows the classic C/S role
model, where the server is deemed more trustworthy than the client
in both authentication and input validation. System-provided au-
thentication APIs, i.e., checkCallingPermission [8], are only available
to the Binder server, but not to the Binder clients. This one-way
Figure 1: Class inheritance rules in C++ Binder, with the
Binder interface IAudioFlinger from Android-11.0.0_r1 as
an example. The Binder interface inherits IInterface. The
Binder client operates the proxy via BpAudioFlinger, which
inherits the Binder interface through a template class. The
Binder server, implemented in BnAudioFlinger and its de-
rived class AudioFlinger, inherits the same Binder interface
through another template class. Functions declared in the
Binder interface are implemented on both sides.
authentication policy prevents information leakage from the sys-
tem services, which often execute in privileged system processes,
to applications, which execute in the untrusted_app domain [17].
As for input validation, we discover that Binder’s client-side in-
put validation often ignores security-related checks—a pattern also
observed in other systems with the C/S architecture [4].
Proxy Design Pattern. Binder follows the Proxy design pattern to
simplify the procedure of a client accessing a remote object, which
may be in another process. By visiting the object via the proxy, the
client can remain ignorant of where the object resides and how it
operates. To establish the proxy-object mapping, the proxy and the
object must implement the same interface.
We highlight some class naming and inheritance rules in C++
Binder that are relevant to this study. All classes implementing
Binder proxies share a prefix Bp in their names, which stands for
“Binder proxy”; all classes implementing the object, i.e., the Binder
server, share a prefix Bn, which stands for “Binder native”. A Bp
class and its corresponding Bn class must implement the same
IAudioFlinger + creatTrack(input:CreateTrackInput, output:CreateTrackOutput, status: status_t*) : sp   + setVoiceVolume(volume:float) : status_t ... BnInterface #onAsBinder(): IBinder*... BnAudioFlinger +onTransact(code: uint32_t, data:Parcel&, reply:Parcel*, flags: uint32_t): status_t... AudioFlinger... + creatTrack(input:CreateTrackInput, output:CreateTrackOutput, status: status_t*) : sp   + setVoiceVolume(volume:float) : status_t ... IInterface +asBinder(:IInterface*):sp#onAsBinder(): IBinder*... BpInterface #onAsBinder(): IBinder*... BpAudioFlinger + creatTrack(input:CreateTrackInput, output:CreateTrackOutput, status: status_t*) : sp   + setVoiceVolume(volume:float) : status_t ... Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1583CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Xiaobo Xiang, Ren Zhang, Hanxiang Wen, Xiaorui Gong (cid:66), and Baoxu Liu
Figure 2: The Binder transaction workflow and the Parcel object.
Binder interface. In other words, a Binder client can call functions
declared in its Binder interface to get served, whose actual imple-
mentation is in the Binder server. All Binder interfaces must inherit
the class IInterface. These rules are illustrated via an example in
Fig. 1. Note that C++ Binder’s naming rules are different from those
of Java’s, which uses “Stub” and “Proxy” as the server’s and the
client’s identifiers, respectively.
2.2 Data Structures in Binder
We overview the construction and components of the Parcel ob-
ject, which is used to transfer data between the Binder client and
its server. Parcel is a flexible container class that can encapsulate
several categories of data, including (1) primitive types—such as
integer and byte, (2) active objects, and (3) Parcelables. The latter
two will be explained next.
Active Objects. An active object is not written in a Parcel object
as its raw content, but rather as a special token referencing it [9].
Therefore, upon receiving the active object, a remote process can
operate directly on the original object. Active objects are used to
transfer a file handler as a FileDescriptor object, or a Binder server
or a Binder proxy/client as an IBinder object.
Instances of a Binder interface can be cast to IBinder objects
through calling the asBinder or onAsBinder functions declared in
IInterface. For example, in Fig. 1, instances of BpAudioFlinger and
AudioFlinger can be cast as they are derived from IAudioFlinger, a
Binder interface.
We describe a concrete example in a crucial system service, i.e.,
the Service Manager service, to illustrate that both the Binder proxy
and the Binder server can be cast to IBinder objects and transmitted
via the IPC. Implementing the IServiceManager Binder interface,
ServiceManager is a system service in charge of the registration and
lookup of all other system services. The Binder proxy of ServiceM-
anager is available to all processes. When the system is launched,
these system services call the addService function declared in IS-
erviceManager and send their Binder server instances—wrapped
as IBinder objects. The Service Manager then adds these IBinder
objects to its global map. Similarly, to access a system service, an
application queries the name of the system service via function
getService or checkService declared in IServiceManager. The Ser-
vice Manager then returns the Binder proxy as an IBinder object
referencing the registered Binder server.
Parcelables. A Parcel object can encapsulate another potentially
complicated class instance that supports the Parcelable protocol [26].
To support the Parcelable protocol, a class should implement the
Parcelable interface and two of its member functions, readFromParcel
and writeToParcel, whose purposes are obvious from their names. It
is worth noting that the Parcel class itself supports the Parcelable
protocol. The potentially nested structure of the Parcel objects
brings additional challenges to our attack surface enumeration.
2.3 Binder Transaction Workflow
We start with the transaction workflow in typical client/server
roles—the application as the Binder client and the system service
as the Binder server. The role-reversal case, explained afterward,
only differs marginally.
Typical Workflow. As shown in Fig. 2, to access a system service,
an application invokes the getService method in ServiceManager,
which returns a proxy referencing the Binder server ( 1 ). When the
application calls a function in the Binder server via the proxy ( 2 ),
it first encapsulates the parameters into a Parcel object ( 3 ). The
procedure of serializing a list of data items into a Parcel object is
called marshalling. Likewise, the deserializing process is called un-
marshalling. After the parameters are marshalled, the proxy sends
( 4 ), among other information, the Parcel object to the kernel, which
delivers the request to the destination process. Upon receiving the
request ( 5 ), the Binder server unmarshalls the parameters ( 6 ),
          dataParcel/dev/binderBinder ProxydataParcelBpSurfaceComposer::method_1(arg1, arg2 ... )byteintStringParcelableIBinderFile-Descriptor...replyParcelreplyParcelBnSurfaceComposer::method_1(arg1, arg2 ... )AppsSystemServicebyteintStringParcelableIBinderFile-Descriptor...①②③⑤getServiceinvokemarshallunmarshallunmarshallmarshalllogicallyinvokelogically request⑥⑦⑧④①②③④⑤⑥⑦⑧⑨⑩Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1584Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
delegates the request to the responsible function, marshalls the
reply ( 7 ), and sends it back to the proxy through the kernel for
unmarshalling ( 8 ).
Other Binder-Proxy Construction Methods. The role-reversal
case differs from the default case only in 1 . In this case, the ap-
plication sends a Binder proxy to the system service, requesting
the latter to transact with the corresponding Binder server via the
proxy. The proxy can be constructed either by the application or
via a system-provided API.
A system service can also construct a Binder proxy, bypassing
ServiceManager. In this case, the system service generates a second
Binder server, called a sub-interface, which enjoys the same privilege
as the parent service. The parent service then sends the Binder
proxy of the sub-interface to the application, enabling them to
communicate directly.
Pervasiveness of the Role-Reversal Case. The role-reversal case
provides specific features that are widely utilized in both system
services and applications. Here are two common cases where a
system service receives an IBinder object from an application and
transacts with the corresponding Binder server. First, when pro-
cessing a time-consuming request, the system service can send the
intermediate results to a callback Binder server asynchronously
without interrupting the main request. Second, the system service
may need to request data from another Binder server, which can
access some system resources not available to the former.
3 BITRE ATTACK FAMILY
Next, we introduce the BiTRe attack family. We start with explain-
ing the threat model and two key observations leading to the dis-
covery of BiTRe, then formally describe BiTRe’s workflow, followed
by a high-level analysis of its consequences.
3.1 Threat Model
Attacker’s Capabilities. The attacker can access all system ser-
vices and invoke all the interface functions defined in their Binder
servers. This can be achieved by either installing a malicious app or
compromising an intermediate process. We assume the app/process
has the required permissions to access these system services. For
example, when accessing the ICamera interface, the app/process
should have android.permission.CAMERA permission and in a con-
text that can pass the Android AppOps checks [7] in CameraService.
Attacker’s Goal. The attacker aims to locally escalate his privi-
lege by communicating with a system service running in another
process. Specifically, Local Privilege Escalation (LPE) includes trig-
gering undefined behavior, corrupting memory, leaking sensitive
information, and gaining code execution—in or from a process with
a different set of capabilities than the attacker process.
3.2 Key Observations
Binder Servers in the Role-Reversal Case are Customizable.
As the Binder proxy in the role-reversal case is provided by the
application, an application can instantiate a Binder server by itself,
and send the proxy to the system service. This scenario is sometimes
necessary, thus Android provides some off-the-peg templates to
facilitate the application developers in constructing Binder servers.
These templates ensure the transmitted data are syntactically cor-
rect. Unfortunately, the system service cannot verify that these
templates are followed due to the next reason.
Absence of Mutual Authentication Mechanism. Despite the
wide adoption of the role-reversal case, Android does not provide a
uniform method for a Binder client to authenticate (1) the Binder
server’s identity, (2) its permission, and (3) how the Binder proxy
is implemented. This absence of client-side authentication tools
makes securing the Binder client a challenging task. Admittedly,
most vulnerabilities could be avoided with careful input validation
and logic examination. However, these checks are often ignored [44]
as it is common to trust the server in the C/S architecture [4].
3.3 BiTRe Attack Workflow
Combining these two observations, we discover that, in the role-
reversal case, an attacker can construct and instantiate an evil
Binder server, and send its proxy as an IBinder object to the system
service. The system service may misperceive this customized Binder
server as a trustworthy one, as there is no easily accessible tool to
distinguish them. Note that the system service cannot check the
permission set of the Binder server, either, as such an operation can
be performed only after authentication.
We define two acronyms here that are crucial to this study:
TBI (Target Binder Interface). A Binder interface whose corre-
sponding system service (1) is reachable by an application,
either directly via ServiceManager, or indirectly as a sub-
interface of a reachable system service, and (2) can receive a
Binder proxy from an application and act as a Binder client
in the role-reversal case.
CBI (Customizable Binder Interface). A Binder interface that
can be customized by an attacker and act as a Binder server
to transact with a TBI server in the role-reversal case.
When the context is clear, we also use TBI/CBI to denote their
corresponding servers. Their member functions are abbreviated as
TBIF and CBIF, respectively. The BiTRe attack workflow, illustrated
in Fig. 3, is as follows:
0 Construct the Application and the CBI Class. The attacker
develops a seemingly benign application to transact with
the TBI. A special class in the application is derived from the
server-side class—whose name starts with Bn—of a CBI with
all its interface functions overwritten.
1 Get the TBI’s Binder Proxy. The attacker’s application, exe-
cuting as an unprivileged process, acquires the TBI’s Binder
proxy, either by calling getService in ServiceManager or by
calling a function in a Binder server which can generate a
sub-interface as the TBI.
2 Instantiate the Customized CBI. The attacker’s application
instantiates the customized CBI and then constructs its Binder
proxy.
3 Set the CBI in the TBI. The attacker’s application interacts
with the TBI server, and eventually sends the IBinder object
corresponding with the CBI server to the TBI server. The in-
teraction is TBI-specific, as the TBI server accepts an IBinder
object—i.e., sets the CBI—only if the TBI server is in the right
state. This requires its TBIFs invoked in the correct order and
all the inputs of the invoked TBIFs are syntactically correct.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1585CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Xiaobo Xiang, Ren Zhang, Hanxiang Wen, Xiaorui Gong (cid:66), and Baoxu Liu
Figure 3: BiTRe attack workflow. The attacker process induces the system service to accept and to communicate with his
customized CBI server. The attacker can respond with malformed data to the privileged process via its CBI server as long as
the system service transacts with the CBI server. This results in potential privilege escalation attacks.
4 Induce the TBI Server to Transact with the CBI. The appli-
cation calls certain TBIFs to trigger a transaction between
the TBI server—acting as a Binder client—and the CBI server.
The redirection is successful if the CBI server receives a
request.
5 Attack from the CBI. The CBI server can reply with malformed
data to attack the system service, which is often unprotected
as the corresponding functions are deemed unreachable by
the attackers.
Steps (a) to (c) in Sect. 1 are mapped to steps 3 to 5 here.
We craft a buffer overflow bug in an imaginary system service
TService to illustrate the attack flow. In Line 7 to 10 of TService, it
queries an array index from the CBI without sanitization:
status_t setCBIProxy (sp  cbi ) {
this -> mCBI = cbi ;
return OK ;
}
status_t bofBug () {
1 class TService : public BnTBI {
2 public :
3
4
5
6
7
8
9
10
11 private :
12
13
14 }
sp  mCBI ;
char mBuffer [];
}
mBuffer [ mCBI -> getIndex () ] = 'c '; // no range check
return OK ;
The attacker can then customize an evil CBI server and imple-
ment the corresponding getIndex() function (Line 2 to 4 below),
returning a malformed index that triggers the vulnerability:
return 0 xdeadbeaf ;
int getIndex () { // step 5
1 class EvilCBIServer : public BnCBI { // step 0
2
3
4
5 };
6 int main () {
7
sp  service =
}
8
9
10
11
12 }
ServiceManager :: getService (" tservice "); // step 1
sp  cbi = new EvilCBIServer ; // step 2
service -> setCBIProxy ( cbi ); // step 3
service -> bofBug () ;
// step 4
3.4 Attack Consequences
BiTRe opens new attack surfaces previously neglected by both
academia and industry. Since many TBI servers execute in privi-
leged processes, such as system_server and media_server, allowing
the attacker to transact with these TBIs as a Binder server results
in trust boundary violations. If such violations are not detected,
which happens frequently [31], the attacker can escalate its privi-
leges and cause more damage by gaining additional permissions
and accessing sensitive system resources.
Specifically, the attacker may induce the system service to send
sensitive data to the CBI server, which concern the user’s pri-
vacy. Or, when the system service performs tasks based on the
CBI server’s response, the attacker can send malformed data to
trigger undefined behaviors if the service is not well protected.
Safeguarding this new attack surface is challenging due to its
worrisome scale and its increasing trend, which are revealed next.
4 ATTACK SURFACE ENUMERATION
To quantify the pervasiveness of BiTRe attacks, we first enumer-
ate the potential attack surface—TBIs and CBIs—implemented in
C++. We leave Java interfaces, which are also vulnerable to BiTRe
attacks but are of different challenges, to future work. Some Binder
interfaces’ implementation is a combination of Java, C++, and C.
Among these Binder interfaces, we include those with C++ Binder
proxies in our enumeration.
We start with a high-level description of our data extraction tool
and the enumeration process (Sect. 4.1). The detailed process is
described from Sect. 4.2 to 4.4. Our results in Sect. 4.5 demonstrate
CBIProxyAttackerProcessReq:getServiceParcelStringResponseParcel StatusIBinderServiceManagerReq:setCBIParcelIBinderTransactionParcelStatus...System ServiceProcessCBIServerImplementationinstantiateCBI ServerTBIServer①②③④getServiceset CBIattack(privilege escalation)TBIProxyReq:induceParcelStruct...induce⑤Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1586Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
not only the pervasiveness—roughly 32% of Binder interfaces in
Android 11 are TBIs and 47% of them are CBIs, but also an increasing
trend of the attack surface, as these numbers grow along with
Android release versions.
4.1 Data Extraction Method
Analyzing Stage and Analyzing Tools. We choose to scrutinize
the system during compilation in its IR form, when all the code is
generated, and the class names and the inheritance relationships
are still visible. For the tools, we implement several LLVM compiler
plugins. LLVM, as Android’s default compilation toolchain since
Oct 2016 [37], provides powerful APIs for us to comprehensively
enumerate the attack surface. By combining these APIs, we can
query, in every source file, the list of functions, their argument lists,
and the type of each argument. A type can either be a synthetic
type—class or struct—or a primitive type, such as integer or char.
Synthetic types can be further decomposed via LLVM APIs. Given
a function, we can query whether it is a member function of a
class, and if so, we can restore the class inheritance chain of the
class. Our rationale for the choices and the detailed data extraction
mechanisms are in Appendix A.
Enumeration Process. To ensure a thorough enumeration, we
insert a snippet of compiler flags in the global configuration script
named global.go, so that the plugin is executed every time a C++
source file is interpreted into its IR form. Such configuration ensures
that LLVM feeds all Android functions, one by one, to our plugin
for processing. The processing consists of three steps: