victim site. We consider an alternative strategy in which
the adversary prompts user retrieval of the target data by
means of a cross-site request.
CSRs are HTML requests made to a third-party resource,
that is, one hosted by a domain other than that serving
the HTML. While there are legitimate uses for such indi-
rection, it can also serve as a basis for requests that make
improper use of a user’s credentials, as in our attack here. A
CSR requires that the adversary lure the user to a site that
serves HTML crafted by the adversary to redirect the user’s
browser to the victim’s e-commerce site, e.g., .
If a user Alice has been previously authenticated to the
domain www.victim-site.com, then her browser will often
obtain and cache credentials for the domain, such as cook-
ies, and automatically re-authenticate on subsequent vis-
its. Thus, in our attack, www.victim-site.com will see an
authenticated request originating from Alice’s browser, un-
aware that the request was triggered by an adversary.
Web applications may include protections against mali-
cious CSRs, such as requiring explicit user authorization of
resource requests or inserting session-speciﬁc random syn-
996Figure 3: Attack NFA for case study in Sec. 5. Ini-
tial state q0 indicated by “Start” and accepting states
indicated with double ovals.
T is the maximum
Flush-Reload cycles without transitioning before the
NFA stops accepting new inputs.
chronizer tokens in HTML forms and links. Often these pro-
tections are conﬁned, however, to what are called cross-site
request forgery (CSRF) attacks, which cause state changes
(known as “side-eﬀects”) in the server. The CSR we exploit
for our attack here has no side eﬀects, and will thus be al-
lowed by most victim servers.
5.2 Evaluation in Public PaaS
We empirically evaluated our proposed attack in Dot-
Cloud against the Magento e-commerce application (version
1.8, the latest version as of this writing). This is a popular
open source e-commerce application, used by roughly 1% or
about 200,000 of the top 10 million websites ranked by Alexa
(http://www.alexa.com) [37]. We reiterate that our goal is
for an attacker instance to reliably determine the number
of distinct items in an authenticated user’s shopping cart
on the e-commerce site of the victim. Our attack cannot
determine the quantity count for a given item.
We assume, as noted above, that the adversary can lure
an authenticated user of the victim Magento website to an
HTML page hosted in its own webserver, thereby triggering
a CSR in which the user requests her shopping cart on the
victim site. We simulated the user on Google Chrome (v34).
We expect the attack to work on other browsers that support
a similar range of cross-origin requests.
Attack details and results: The attack NFA we con-
structed in this example is highly dependent on the speciﬁcs
of the Magento web application. We analyzed the applica-
tion with Valgrind. We observed that a Zend opcode handler
(which we call handler() for convenience5), which is imple-
mented in the executable php5-fpm, is invoked every time
an item in the shopping cart is displayed.
To count the number of items in a shopping cart, there-
fore, it suﬃces for the adversary to count the number of invo-
cations of the handler() function using the Flush-Reload
side channel. In our experiments, an interval of at least 20
Flush-Reload cycles elapsed between the display of two
distinct items. We took this interval length to be a lower
bound on the time between calls to handler() within the
NFA we constructed for the attack, depicted in Fig. 3.
The evaluation was performed on DotCloud as follows.
The victim user placed m distinct items in her shopping
cart, for m ∈ {0, 1, 2, 3, 4, 5, 6}. We repeated our experiment
10 times for each value of m. The number of successes for
5As only the virtual address of the handler was required
to construct the attack NFA, we were able to perform the
attack without studying the Zend source code. Therefore,
the name of the function, which is hidden in the result of an
objdump, remains unknown to us.
each number m of distinct items, that is, the frequency with
which the adversary correctly determined m from a single
trial, is shown in Table 3. Also shown is that when the ad-
versary inferred m incorrectly, its inference was nevertheless
very close to correct.
Items detected in cart
0 1 2 3 4 5 6 7
10
10
9 1
10
1 9
1 9
1 8 1
(
t
r
a
c
) 0
m
1
2
3
4
5
6
m
e
t
I
n
i
s
Table 3: Item count inferences by the adversary.
Each table entry indicates the number of experi-
ments yielding a given (true count, inferred count)
pair over 10 trials per row. Entries on the diagonal,
which predominate, correspond to correct inference.
6. CASE STUDY 2: PASSWORD-RESET AT-
TACKS
In this second case study, we show how to employ our
attack framework to compromise the pseudorandom num-
ber generators (PRNGs) used by many web applications in
authenticating password reset requests. An adversary can
exploit this ability to reset the passwords for and thus ob-
tain control of the accounts of arbitrarily selected users.
Our attack targets the PRNG present in certain program-
ming language runtimes (e.g., PHP), which relies upon sys-
tem time (e.g., gettimeofday()) as a source of seed entropy.
With a malicious application that is co-located with the vic-
tim application, the adversary is able to detect system calls
such as gettimeofday(), reconstruct the internal state of
the PRNG, and thereby reproduce its entire output.
The ability to mount password-reset attacks is one con-
sequence of this PRNG vulnerability. Such attacks are of
particular concern because an adversary can trigger a pass-
word reset on a web application for a user with knowledge
of the user’s account name or email address alone. To au-
thenticate the user, a web application will typically use a
PRNG to generate a random string R, and then embed this
string in the URL of a password reset link sent to the user’s
registered email address. By learning the state of the web
application’s PRNG, a co-located attacker instance can re-
produce the password reset token R, reset the password be-
fore the user does, and hijack the user’s account. We stress
that the adversary does not need access to the user’s email
to accomplish this attack. In this section, we demonstrate
such a password-reset attack against PHP-based web appli-
cations in public clouds.
Weaknesses in PHP PRNGs have been previously reported
(e.g., [12, 17]). A recent study by Argyros and Kiayias [3]
gave several attacks, one of which involves recovery of the
seed values of the PHP system’s PRNGs for password reset
and so has the same goal as the attack in our own case study.
Their attacks (which are against victims presenting a much
smaller search space than ours, see [3, Sec. 6.2]), however,
require sending repeated requests to the victim server, which
997and verify its correctness against R. Subsequent password
reset attacks issued from the same connection will be served
by the same process. The adversary therefore resolves vir-
tually all entropy in the initial state of the PHP application.
By continuously monitoring the invocations of mt_rand()
and php_combined_lcg(), the adversary can keep track of
the evolution of the PRNG and guess all the random num-
bers generated.
As described above, it is critical that the adversary mon-
itors the initialization process of the PRNG, which takes
place only once in the lifetime of a server process. A very
common conﬁguration (see www.apache.org and www.php.
net for more information about PHP web server conﬁgura-
tions) is to have one process, either an Apache process or
a standalone PHP process, to serve each new request. As
such, it is possible for an adversary to mount an active at-
tack in which it triggers the PRNG initialization process for
observation. To do so, the adversary can saturate existing
server processes and force the victim application to instan-
tiate new processes to serve subsequent requests.
6.2 Evaluation in Public PaaS
As in our previous attack, we experimented in DotCloud
with the Magento eCommerce application (version 1.8). Not
only are e-commerce applications very popular, and Ma-
gento especially so as mentioned above, but they are likely
targets because of the severity of the password resetting at-
tacks against them. Our investigation of the source code
of other web applications reveals that a few more widely
used PHP applications are susceptible to such attacks as
well, such as the latest version of WordPress (http://www.
wordpress.com) that is reportedly used by 21.9% of the top
10 million websites.
By default, a Magento application launches two instances,
a www instance and a db instance, running on separate ma-
chines. In this experiment, the parameters in php-fpm.conf
were set so that the FastCGI processes were created and ter-
minated dynamically and only a small number of processes
were kept when idle, which are typical settings in many web
hosting conﬁgurations. The proposed attack is simple in this
case, as the requests are likely to be served by newly cre-
ated php-fpm processes. However, if the PHP is conﬁgured
to maintain a static set of FastCGI processes, the adversary
needs to crash the php-fpm process to create a fresh one,
which could be achieved by various means [2].
Attack details and results: The strategy we employ is
for the adversary to create enough HTTP “keep-alive” con-
nections to force the creation of a new php-fpm process;
then within the same connection, the adversary sends two
password-reset requests—one request for an account under
the adversary’s control, another for the victim’s account. As
the ﬁrst request results in email being sent to the account un-
der the adversary’s control, the adversary can use the URL
(and embedded secret R), together with the timing informa-
tion collected from the side channel, to recover the pid of the
new php-fpm process. Then the password reset token gen-
erated by the second request becomes entirely predictable.
The adversary maintains a local copy of the PRNG modiﬁed
to inject results collected from the side channel instead of
those from real system calls.
As shown in Fig. 5, ﬁve code chunks were monitored: one
chunk from each of the three functions php_gettimeofday(),
lcg_seed(), and uniqid(), which calls the entry point of
Figure 4: The call graph of password reset token
generation in PHP applications.
may take several minutes and may result in attack detection.
In comparison, after a setup phase requiring a small brute-
force attack (220 oﬄine trials), our attack requires at most
four online queries to compromise a user account. It is thus
almost instantaneous and scales easily to a large number of
accounts.
6.1 Background on PRNG in PHP
The PHP runtime provides several functions by which
applications can obtain or generate (pseudo)random num-
bers. For instance, during the process of password reset
token generation, most PHP applications call APIs such
as microtime(), mt_rand(), and uniqid(). Internally, the
microtime() function calls gettimeofday() to obtain the
current system time in the form of the number of seconds
and microseconds since the Unix epoch (0:00:00 1 January
1970 UTC). The mt_rand() function, which is the interface
to the PHP internal Mersenne Twister generator, automat-
ically initializes its own internal state, if mt_srand() has
not yet been invoked, with a random seed generated using
functions time(), php_combined_lcg(), and getpid(). The
time() function merely returns the number of seconds since
the Unix epoch, and therefore has low entropy. The func-
tion php_combined_lcg() combines two linear congruential
generators (with prime periods 231−85 and 231−249) to gen-
erate a long-period pseudorandom sequence (the product of
the primes). The initialization of php_combined_lcg() de-
pends on the lcg_seed() function, which generates random
seeds by calling getpid() once and gettimeofday() twice.
These function calls and dependencies are shown in Fig. 4.
While the range of options for seeding the PRNG in PHP
systems may seem convoluted, as Fig. 4 shows, the only
sources of entropy for the PRNG seed are gettimeofday(),
time(), and getpid(). By monitoring invocations of the
gettimeofday() function, the adversary can immediately
issue another call to gettimeofday() once it is called by the
victim. As the adversary shares the OS with the victim web
application, the result of the adversary’s invocation of get-
timeofday() will be very close to, if not exactly the same as,
that returned to the victim application. The same is (even
more) true of time(). As such, the only input to the victim
PRNG that may be unknown to the adversary is the result
of getpid(), which may assume any of 216 values.
An adversary can initiate a password reset for its own ac-
count with the victim web application. As the adversary re-
ceives the corresponding secret string R, it can guess the pid
998al. in 2012 [16], implementations of PKCS#1 v1.5 persist in
deployments and, instead of moving on to inherently more
secure encryption, practitioners have deployed a sequence of
countermeasures that prevent each attack. Current imple-
mentations are not exploitable by prior attacks, but our new
attack circumvents all the existing countermeasures to (yet
again) break XML encryption. We emphasize that the main
takeaway is not that PKCS#1 v1.5 is inherently broken (as
already known), but rather that our new side-channel attack
framework and PaaS environments provide new opportuni-
ties for adversaries.
7.1 Bleichenbacher Attacks
PKCS#1 speciﬁes an algorithm for encryption using RSA.
Recall that with RSA, one generates a key pair by choosing
a modulus N = pq for primes p, q and exponents e, d for
which ed ≡ 1 mod φ(N ); the public key is then (N, e) and
secret key is (N, d). Let n be the length of N in bytes. With
the PKCS#1 v1.5 padding scheme, one encrypts a message
M of size m bytes with m < n − 11. Letting r = n − m −
3, a byte string P of length r is generated in which each
byte is randomly selected from {0, 1}8 \ {0}. Letting X =