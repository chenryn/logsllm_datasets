**Issue:**

When I run the command:

```
$ which python
```

I get the following output: `/a/b/c/python`.

However, when I use `sudo`:

```
$ sudo which python
```

I get a different result: `/d/e/python`.

This discrepancy is causing issues when I try to install libraries from source.

**Question:**

How can I make the `sudo` version of `which python` return the same path as the non-`sudo` version?

**Response:**

The difference in the paths returned by `which python` and `sudo which python` is likely due to the fact that the `PATH` environment variable is different for the root user (when using `sudo`) and your regular user account. 

To diagnose this, you can check the `PATH` for both cases:

1. For your current user:
   ```bash
   echo $PATH
   ```

2. For the root user (using `sudo`):
   ```bash
   sudo bash -c 'echo $PATH'
   ```

You will probably find that these two outputs are different.

**Solution:**

To align the `PATH` for the root user with your regular user, you need to modify the shell configuration files for the root user. These files are typically located in the `/root` directory and may include:

- `.bashrc` (for Bash)
- `.profile`
- `.bash_profile`

Hereâ€™s how you can do it:

1. **Edit the root user's shell configuration file:**

   Open the appropriate configuration file in a text editor with `sudo` privileges. For example, if you're using Bash, you might edit `.bashrc`:

   ```bash
   sudo nano /root/.bashrc
   ```

2. **Modify the `PATH` variable:**

   Add or update the `PATH` variable to include the desired directories. For example, if you want to add `/a/b/c` to the `PATH`, you can add the following line to the file:

   ```bash
   export PATH=/a/b/c:$PATH
   ```

3. **Apply the changes:**

   After saving the file, apply the changes by sourcing the configuration file:

   ```bash
   sudo bash -c 'source /root/.bashrc'
   ```

4. **Verify the change:**

   Check the `PATH` again for the root user to ensure it has been updated correctly:

   ```bash
   sudo bash -c 'echo $PATH'
   ```

Now, when you run `sudo which python`, it should return the same path as `which python`.

By ensuring that the `PATH` is consistent between your regular user and the root user, you should be able to install libraries from source without encountering the previous issues.