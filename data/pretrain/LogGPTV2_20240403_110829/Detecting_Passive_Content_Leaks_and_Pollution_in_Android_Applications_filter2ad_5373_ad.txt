com.sina.weibo
2.8.1 beta1/154
com.tencent.WBlog
v3.3.0/25
100
10
,
,
000 - 500
000 - 50
,
000
,
000
Table 2. Main types of passively(cid:173)leaked private information and their representative vulnerable apps
mation of representative apps available on Google Play (in-
cluding the number of installs – the last column in the table
– from Google Play when we conﬁrmed the vulnerability.)
5.1.1 SMS Messages
The ﬁrst category contains 268 apps that passively leak in-
coming or outgoing SMS messages stored in the phone. It
has been known that sensitive information such as mTANs
used in online banking [10] may be present in these SMS
messages. Hence, their leaks could pose serious privacy
and security threats. As a concrete example, the Message
GOWidget (version: 2.3/17) app is a widget used in a popular
launcher app, i.e., GO Launcher EX, which can conveniently
display your incoming SMS messages in a desktop widget.
Internally, it maintains a database to cache all incoming
SMS messages, including their originating addresses and
message contents. Unfortunately, this internal database is
not properly protected and can be accessed from a public
content provider named .DataProvider.
Pansi SMS (version: 2.06/226) is another example.
It
is a messaging app that arguably provides more features
than the built-in Messaging app. By storing both in-
coming and outgoing SMS messages in the phone and
exporting them through an unprotected content provider
.provider.MsgSummaryProvider, any (untrusted) app in the
phone can obtain them, i.e., all SMS messages, without any
permission.
In our study, we also notice that some vulnerable apps
provide private SMS message functionality. With that, mo-
bile users can specify certain phone numbers as private so
that all SMS messages from these private phone numbers
(a) Our test app requests no permis-
sion
(b) GO FBWidget displays Face-
book posts
(c) Our test app “steals” Facebook
posts
(d) Our test app “steals” Facebook
AuthToken
Figure 4. Passive content leaks on GO FBWidget
will not show in the built-in Messaging app. This feature
adds an extra level of privacy for users. Unfortunately, some
of these apps deﬁne unprotected content providers through
which all the private SMS messages in the phone can be dis-
closed to any app! In other words, private SMS messages
are not private any longer but open to all apps. One such
app is com.tencent.qqpimsecure (version: 3.1.1/40).
5.1.2 Contacts
The second category involves private contacts information.
One representative app is mOffice - Outlook sync (ver-
sion: 3.0/21), a full-suite productivity app on Android. It
can sync contacts, calendars, and tasks with remote desk-
tops. To manage these data for synchronization, it uses an
internal database accessible via an open content provider
.dao.DBProvider. As a result, any app can obtain various
types of data saved in this database.
Shady SMS 3.0 PAYG (version: 1.78/228) is another ex-
ample app in this category.
It has the feature of con-
ﬁguring certain contacts in the phone as private con-
tacts. Similar to in the ﬁrst category, SMS messages and
phone calls from private contacts will not show in the
built-in Messaging or Phone app, thus achieving a higher
level of privacy. Unfortunately, these private contacts
in this app are fully leaked via an open content provider
com.project.database.ContactsContentProvider. Be-
cause of a passive content leak vulnerability, using this app
does not protect your private contacts, but rather put your
privacy at risk.
5.1.3 Private Instant Messaging (IM) information
The third category contains personal information in various
IM apps. Instant messaging is a convenient form of commu-
nication for users and some of them are extremely popular
such as Skype, MSN, and ICQ. We found some of these
popular IM apps on Android do not protect their data at all.
As a result the list of friends in the IM, conversation history,
as well as detailed chat messages are all passively leaked.
GO SMS Pro (version: 4.32/69) is one such instant mes-
saging app with more than 10, 000, 000 downloads from
Google Play. Besides the enhanced SMS messages func-
tionality, it also provides instant messaging functionality to
allow users to communicate with each other. By registering
an account (using email address or phone number), users
can ﬁnd their friends and communicate with them on-line.
However we ﬁnd that the friends information and all the
conversation content between friends are leaked via a con-
tent provider interface, i.e., ImContentProvider. Interest-
ingly, in this particular app, we ﬁnd four content providers
and three of them are well protected with the exported at-
tribute deﬁned to be false. However, the remaining one is
not protected, which leaks all internal data.
Messenger WithYou (version: 2.0.76/2000076) is an al-
ternative Windows Live Messenger (MSN) app on An-
droid.
By using this app, users can chat with their
MSN contacts. Similar to the previous app, all the ac-
count information and conversation logs are managed in
an internal database. Although this app does not have
a content provider deﬁned to manage this database, our
analysis shows that there exists another unrelated con-
tent provider MiyowaExplorerContentProvider that imple-
ments an openFile() routine. This openFile() routine
does not check the given ﬁle path and thus allows for ac-
cessing arbitrary ﬁles in the app-speciﬁc directory, includ-
ing the database ﬁle.
5.1.4 User Login Credentials
The fourth category includes user login credentials such
as username and (plaintext) password of popular websites.
These leaked login credentials trivially allow attackers to
log into victim’s social network accounts. For example,
Youdao Dictionary (version: 2.0.1(2)/2000102) is a pop-
ular dictionary app with more than 1, 000, 000 downloads
from the Google Play. This app allows users to synchro-
nize their favorite words withe the Cloud using a so-called
Netease account. The username and password of this ac-
count are saved in plaintext in a local database, which can
be leaked via an open content provider. In other words, a
malicious app can simply steal the user name and password
of the account. It’s worth mentioning that this Netease ac-
count can also be used to log into user’s email service pro-
vided by Netease, a NASDAQ company providing service
to more than 500 million users [6].
Besides username and password, this category also in-
cludes related authentication tokens or simply AuthTokens
from popular social network sites (e.g., Facebook). Note the
authentication token can be used to automatically sign into
a remote website without the inconvenience of typing pass-
words every time. Hence by stealing the AuthToken, the at-
tackers can effectively sign into victim’s social network ac-
counts and steal all the personal information. GO FBWidget
(version: 2.2/15) is one such app that saves a user’s AuthTo-
ken of Facebook in a database. Unfortunately this database
can be accessed by any untrusted app without any permis-
sion. In Figure 4(a), we show a test app that does not request
any permission but takes the input from our system to steal
the AuthToken from GO FBWidget. The leaked AuthToken
is shown in Figure 4(d). This particular vulnerable app al-
lows user to make posts to Facebook (Figure 4(b)) and these
posts are similarly leaked (Figure 4(c)).
Similar to this particular app, we also identify others: GO
TwiWidget (version: 2.1/14) leaks Twitter authentication to-
kens and Sina Weibo (version: 2.8.1 beta1/154) passively
discloses Sina Weibo authentication tokens [7]. Sina Weibo
is a popular blog service with more than 300 million regis-
tered users.
5.1.5 Browser History and Bookmarks
The ﬁfth category refers to a common problem in third-
party mobile browser apps. They usually implement a con-
tent provider to manage browser history and bookmarks.
However, the content provider is not properly protected
(a) Dolphin browser visits Facebook (b) Our test app “steals” the browser
history
Figure 5. Passive content leaks on Dolphin
browser HD version (based on a successful
SQL injection attack)
and can be exploited to leak browser history and book-
marks. For example, Dolphin Browser (version: 2.2/26)
is a popular one available on Google Play. The mini ver-
sion implements a vulnerable content provider .bookmarks.
BookmarkProvider, from which the browser history and
bookmarks can be retrieved by any app on the phone. The
HD version, i.e., Dolphin Browser HD (version: 7.3.0/116),
similarly leaks the browser history and bookmarks. Unlike
the mini version, the HD version does not directly leak the
browser history.
Instead we need to leverage a SQL in-
jection attack (Section 4) to retrieve it. More speciﬁcally,
we use “∗ from history;” as the projection parameter in
query() method. In this case, we can obtain all the data (in-
cluding browser history) stored in the table history. Figure
5(a) is the screenshot of Dolphin Browser HD visiting Face-
book website and Figure 5(b) shows the leaked browser his-
tory to our test app. Maxthon Android Web Browser (ver-
sion: 2.4.6/2811) is another app that suffers from a simi-
lar SQL injection attack to leak the browser history. Other
vulnerable mobile browsers include Circles Web Browser
(version: 0.4.3/18), ML-Browser (version: 1.0/1) and Mchina
Browser (version: 2.6/4).
Interestingly, we also found a security app Mobile
Security Personal Ed. (version: 2.1/31) from TrendMi-
cro that leaks the browser history as well. This security app
has a feature to enable safe browsing by detecting poten-
tially malicious URLs. The app collects the visited URLs
as well as their risk scores into a local database managed
by a vulnerable content provider, which essentially opens
up access to others. Another mobile browser app, i.e., UC
Browser (version: 7.9.3/43), encrypts the browser history.
While such information is still passively leaked, the encryp-
tion makes it harder to recover the original browser history.
5.1.6 Call Logs and Others
The sixth category includes those apps with features to
manage call logs. For example, Tc Assistant (version:
4.3.0/19) aims to be an assistant to users by managing var-
ious phone bills.
It logs every outgoing call into a local
database, which can be queried and unfortunately leaked to
any other app. Another one is Droid Call Filter (version:
1.0.23/24), which helps users to block unwanted (or harass-
ing) calls and SMS messages. It maintains a black list and
blocks the calls from numbers on this black list. All blocked
phone calls will be logged into a local database, which can
be retrieved by others. Note that leaking call logs from num-
bers in a black list seems less risky. However, this blacklist
can be manipulated via content pollution – as shown in
Section 5.2.
Besides the above categories, we also found other vul-
nerable apps such as GO Email Widget (version: 1.81/18)
and 139Email client (version: 5.54 /554) leak user’s
emails; Match.com - #1 Dating Site (version: 2.2.0/25)
leaks private information about the persons whom the user
wants to date with (including related mail address, phone
number, location, income, jobs, interests and others) as
well as the entire search history on match.com; Google
Music (version: 4.1.513/513) leaks the songs and artists the
users have listened to and Astrid Task/To-do List (ver-
sion: 3.9.2.3/210) leaks the private todo list and other per-
sonal notes. When compared with other types of leaked
information, the todo list in Astrid Task/To-do List may
seem less risky. However, the vulnerable app even accepts
a raw SQL as input that will be executed in the internal
database. As a result, the attackers can inject and execute
arbitrary SQL commands such as deleting and updating ta-
bles in the databases.
5.2 Content Pollution
In our dataset, we also detected 871 apps that are sus-
ceptible to content pollution attacks.
In the following,
we categorize our ﬁndings. The ﬁrst category includes
apps that are developed to block SMS and/or phone calls
from certain numbers. For example, DW Contacts & Phone
& Dialer (version: 2.0.9.1-free/198) allows for blocking
phone calls based on a blacklist maintained in an internal
database. Unfortunately, the interface (e.g., insert()) is
not protected and allows an attacker to insert arbitrary num-
bers into the blacklist. In other words, any phone call can
be potentially blocked without the user’s awareness.
To our surprise, we even found some well-known and
popular security apps vulnerable to this attack. For exam-
ple, qqpimsecure (version: 3.1.1/45) is a security app with
more than 500, 000 installs. The app has similar function-
ality to block both SMS messages and phone calls from
spammers whose numbers are maintained in a database.
By polluting the database or its blacklist, any number can
be inserted and the app will blindly recognize it as a spam
number to block any SMS message or phone calls from it.
We point out that blocking certain SMS messages is a com-
mon practice [44] in existing malware (e.g., to avoid show-
ing the charged billing information to users). As a result,
by launching the content pollution attack, stealthy malware
can be created as the questionable behaviors do not exist
in malware themselves but with the help of other legitimate
or even reputable security apps. Other security apps shar-
ing similar vulnerabilities include 360mobilesafe (version:
2.2.0/123) and Anguanjia (version: 2.58/57).
The second category contains apps that allow for back-
ground downloading of apps for installation. Speciﬁcally,
these apps have the functionality to download apps in the
background and then pop up a dialogue asking users to
install them. From our analysis, the event to trigger the
downloading and installing behavior can be a normal inser-
tion operation into a local database. With these vulnerable
apps, such insertion operations can be launched by any (un-
trusted) app on the phone. As a result, a malicious app can
inject a malicious URL into the table so that the malware
will be automatically downloaded and then popped up for
user’s installation. Compared with known infection tech-
niques by mobile malware [44], such installation behav-
ior is more stealthy and can be easily abused to launch an
update-attack by automatically downloading and installing
malware which is disguised as the updated version of an
existing app. Example apps in this category include Qihoo
browser (version: 1.5.0 Beta/6) and Baidu Appsearch (ver-
sion: 0.8.1 beta/16777516).
6 Discussion
Our study reveals the prevalence of two vulnerabilities
in existing Android apps, which motivated us to further ex-
amine their root causes and explore possible solutions. As
discussed earlier, these two vulnerabilities are rooted in the
Android built-in content provider component and develop-
ers may fail to fully understand the associated security risks.
Speciﬁcally, for those content providers that do not explic-
itly disable the exported attribute, earlier Android frame-
works (versions before 4.2) by default open them up to any
untrusted apps. As a result, if a developer includes a content
provider in its app, it implicitly allows others to access – a
poor security design.
To ﬁx that,
there are two main approaches.
the platform provider’s perspective,
From
the default setting
of exported attribute should be false – so that content
provider by default will be exported only to the app it-
self. From the app developer’s perspective, each needs to
be aware of potential security risks and properly adopt secu-
rity mechanisms to protect their content providers. Exam-
ple security mechanisms include not exporting the content
provider or deﬁning custom permissions with dangerous
or even signature protection level. Both approaches
have pros and cons. The former requires an over-the-
air (OTA) Android platform update on the default setting
of the exported property, which may introduce compat-
ibility problems for existing apps.
(Notice that with the
latest release of Android 4.2 in October 2012, content
providers by default are no longer exported if developers
set targetSdkVersion to 17 or higher in the manifest ﬁle
[1].) The latter does not have the compatibility issue but
needs to involve numerous app developers to update their
apps to include necessary security checks, which could be a
time-consuming process.
In our study, we observe some app developers did at-
tempt to protect their content providers. However the ways
they used are not secure and can be readily bypassed. For
example, some developers deﬁne custom permissions to
protect the content provider interface. But the protection
level of these custom permissions is normal, which means
the permission can be granted to any app requesting it
(without user’s explicit approval). Other developers check
the package names of calling apps, which is rather frag-
ile and can be trivially bypassed. One such example is QQ
Browser (version: 3.0/35), which ensures the calling apps
have the pre-deﬁned names, such as “com.tencent.mtt”,
“com.tencent.qqpim” or “com.tencent.bookmarktest”. As
shown in Section 5, such protection can be simply cir-
cumvented. Meanwhile, we point out that some reputable
security apps are also vulnerable. The Mobile Security
Personal Ed. app (version: 2.1/31) developed by Trend-
Micro suffers from the ﬁrst vulnerability, i.e., passive con-
tent leaks. The qqpimsecure app (version: 3.1.1/45),
360mobilesafe (version: 2.2.0/123) and Anguanjia (ver-
sion: 2.58/57) are susceptible to both attacks, in not only
leaking personal SMS text messages and phone call logs,
but also blocking text messages and phone calls from spe-
ciﬁc phone numbers chosen by attackers. Moreover, based
on our reporting experience to the developers of vulnerable
apps, in a time window of three months only approximately
one third of them are actually keen to follow up to issue
the patches, which indicates an OTA update may be a better
choice.
From another perspective, our current prototype to detect
vulnerable apps is still limited and can be improved. For ex-
ample, we take a conservative way to automatically select
candidate vulnerable apps, which may introduce unneces-
sary false positives. Encouragingly, this selection step still
results in a substantial reduction (with only 4.8% remaining
apps for subsequent analysis). Also, the lack of context in-
formation or internal logic of particular apps could lead to
false negatives as well. Speciﬁcally, in our current proto-
type, the dynamic execution module is based on invocation