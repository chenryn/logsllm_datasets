### Table 2. Main Types of Passively Leaked Private Information and Their Representative Vulnerable Apps

This table lists the main types of passively leaked private information and their representative vulnerable apps available on Google Play, including the number of installs (as of the last column in the table) when the vulnerability was confirmed.

#### 5.1.1 SMS Messages
The first category includes 268 apps that passively leak incoming or outgoing SMS messages stored on the phone. Sensitive information, such as mTANs used in online banking, may be present in these SMS messages, posing serious privacy and security threats.

**Example 1: Message GOWidget (Version: 2.3/17)**
- **Description**: This widget is used in the popular launcher app, GO Launcher EX, to display incoming SMS messages on the desktop.
- **Vulnerability**: The internal database that caches all incoming SMS messages, including originating addresses and message contents, is not properly protected and can be accessed through a public content provider named `.DataProvider`.

**Example 2: Pansi SMS (Version: 2.06/226)**
- **Description**: A messaging app with more features than the built-in Messaging app.
- **Vulnerability**: Both incoming and outgoing SMS messages are stored and exported through an unprotected content provider, `.provider.MsgSummaryProvider`, allowing any untrusted app to access them without permission.

**Additional Note**: Some vulnerable apps provide private SMS functionality, allowing users to specify certain phone numbers as private. However, some of these apps define unprotected content providers, making all private SMS messages accessible to any app. For example, `com.tencent.qqpimsecure` (Version: 3.1.1/40).

#### 5.1.2 Contacts
The second category involves private contact information.

**Example 1: mOffice - Outlook sync (Version: 3.0/21)**
- **Description**: A full-suite productivity app that syncs contacts, calendars, and tasks with remote desktops.
- **Vulnerability**: An internal database accessible via an open content provider, `.dao.DBProvider`, allows any app to obtain various types of data saved in this database.

**Example 2: Shady SMS 3.0 PAYG (Version: 1.78/228)**
- **Description**: Allows users to configure certain contacts as private, hiding SMS messages and phone calls from these contacts in the built-in Messaging or Phone app.
- **Vulnerability**: All private contacts are fully leaked via an open content provider, `com.project.database.ContactsContentProvider`.

#### 5.1.3 Private Instant Messaging (IM) Information
The third category includes personal information in various IM apps. Some popular IM apps do not protect their data, leading to passive leaks of friends lists, conversation history, and detailed chat messages.

**Example 1: GO SMS Pro (Version: 4.32/69)**
- **Description**: An instant messaging app with over 10,000,000 downloads.
- **Vulnerability**: Friends' information and conversation content are leaked via a content provider interface, `ImContentProvider`. While three of the four content providers are well-protected, one remains unprotected, leaking all internal data.

**Example 2: Messenger WithYou (Version: 2.0.76/2000076)**
- **Description**: An alternative Windows Live Messenger (MSN) app.
- **Vulnerability**: Although no content provider is defined to manage the internal database, another unrelated content provider, `MiyowaExplorerContentProvider`, implements an `openFile()` routine that allows accessing arbitrary files in the app-specific directory, including the database file.

#### 5.1.4 User Login Credentials
The fourth category includes user login credentials such as usernames and plaintext passwords for popular websites, which can trivially allow attackers to log into victims' social network accounts.

**Example 1: Youdao Dictionary (Version: 2.0.1(2)/2000102)**
- **Description**: A popular dictionary app with over 1,000,000 downloads.
- **Vulnerability**: Usernames and passwords for Netease accounts are saved in plaintext in a local database, which can be leaked via an open content provider. This account can also be used to log into Netease email services, affecting over 500 million users.

**Example 2: GO FBWidget (Version: 2.2/15)**
- **Description**: Saves a userâ€™s Facebook AuthToken in a database.
- **Vulnerability**: The database can be accessed by any untrusted app without permission, allowing the theft of the AuthToken and subsequent access to the user's Facebook account.

**Additional Note**: Similar vulnerabilities exist in other apps, such as `GO TwiWidget` (Version: 2.1/14), which leaks Twitter authentication tokens, and `Sina Weibo` (Version: 2.8.1 beta1/154), which discloses Sina Weibo authentication tokens.

#### 5.1.5 Browser History and Bookmarks
The fifth category refers to common issues in third-party mobile browser apps, where browser history and bookmarks are managed by a content provider that is not properly protected.

**Example 1: Dolphin Browser (Version: 2.2/26)**
- **Description**: A popular browser available on Google Play.
- **Vulnerability**: The mini version implements a vulnerable content provider, `.bookmarks.BookmarkProvider`, allowing any app to retrieve browser history and bookmarks. The HD version (Version: 7.3.0/116) requires a SQL injection attack to retrieve the browser history.

**Example 2: Maxthon Android Web Browser (Version: 2.4.6/2811)**
- **Description**: Another app susceptible to a similar SQL injection attack to leak browser history.

**Additional Note**: Other vulnerable browsers include `Circles Web Browser` (Version: 0.4.3/18), `ML-Browser` (Version: 1.0/1), and `Mchina Browser` (Version: 2.6/4). Interestingly, the security app `Mobile Security Personal Ed.` (Version: 2.1/31) from TrendMicro also leaks browser history. `UC Browser` (Version: 7.9.3/43) encrypts browser history, making it harder to recover but still passively leaked.

#### 5.1.6 Call Logs and Others
The sixth category includes apps that manage call logs.

**Example 1: Tc Assistant (Version: 4.3.0/19)**
- **Description**: Manages various phone bills.
- **Vulnerability**: Every outgoing call is logged into a local database, which can be queried and leaked to any other app.

**Example 2: Droid Call Filter (Version: 1.0.23/24)**
- **Description**: Helps users block unwanted or harassing calls and SMS messages.
- **Vulnerability**: Maintains a blacklist and logs all blocked phone calls into a local database, which can be retrieved by others.

**Additional Note**: Other vulnerable apps include `GO Email Widget` (Version: 1.81/18) and `139Email client` (Version: 5.54/554), which leak user emails; `Match.com - #1 Dating Site` (Version: 2.2.0/25), which leaks private information about potential dating partners; `Google Music` (Version: 4.1.513/513), which leaks songs and artists the user has listened to; and `Astrid Task/To-do List` (Version: 3.9.2.3/210), which leaks private todo lists and personal notes.

### 5.2 Content Pollution
In our dataset, we detected 871 apps susceptible to content pollution attacks. These apps can be categorized as follows:

#### Category 1: Apps Blocking SMS and/or Phone Calls
**Example 1: DW Contacts & Phone & Dialer (Version: 2.0.9.1-free/198)**
- **Description**: Allows blocking phone calls based on a blacklist maintained in an internal database.
- **Vulnerability**: The interface (e.g., `insert()`) is not protected, allowing an attacker to insert arbitrary numbers into the blacklist, potentially blocking any phone call without the user's awareness.

**Example 2: qqpimsecure (Version: 3.1.1/45)**
- **Description**: A security app with over 500,000 installs.
- **Vulnerability**: By polluting the database or its blacklist, any number can be inserted, and the app will recognize it as a spam number, blocking SMS messages or phone calls from it. Other vulnerable security apps include `360mobilesafe` (Version: 2.2.0/123) and `Anguanjia` (Version: 2.58/57).

#### Category 2: Apps Allowing Background Downloading of Apps
**Example 1: Qihoo Browser (Version: 1.5.0 Beta/6)**
- **Description**: Allows background downloading of apps and then prompts users to install them.
- **Vulnerability**: The event to trigger the downloading and installing behavior can be a normal insertion operation into a local database, which can be launched by any untrusted app. A malicious app can inject a malicious URL, leading to the automatic download and installation of malware.

**Example 2: Baidu Appsearch (Version: 0.8.1 beta/16777516)**
- **Description**: Similar to Qihoo Browser, it allows background downloading and installation of apps.
- **Vulnerability**: The same as Qihoo Browser, making it easy to launch an update-attack by disguising malware as the updated version of an existing app.

### 6. Discussion
Our study reveals the prevalence of two vulnerabilities in existing Android apps, motivating us to examine their root causes and explore possible solutions. These vulnerabilities are rooted in the Android built-in content provider component, and developers may fail to fully understand the associated security risks.

**Root Causes**:
- **Default Setting of Exported Attribute**: Earlier Android frameworks (versions before 4.2) by default opened content providers to any untrusted apps if the exported attribute was not explicitly disabled.
- **Developer Awareness**: Developers need to be aware of potential security risks and properly adopt security mechanisms to protect their content providers.

**Possible Solutions**:
- **Platform Provider Perspective**: The default setting of the exported attribute should be false, so that content providers are only exported to the app itself.
- **App Developer Perspective**: Developers should use security mechanisms such as not exporting the content provider or defining custom permissions with dangerous or signature protection levels.

**Challenges**:
- **Compatibility Issues**: Changing the default setting of the exported property may introduce compatibility problems for existing apps.
- **Time-Consuming Updates**: Involving numerous app developers to update their apps with necessary security checks can be a time-consuming process.

**Observations**:
- **Partial Protection Attempts**: Some app developers attempted to protect their content providers, but the methods used were not secure and could be bypassed. For example, custom permissions with normal protection levels and package name checks.
- **Reputable Security Apps**: Some reputable security apps, such as `Mobile Security Personal Ed.`, `qqpimsecure`, `360mobilesafe`, and `Anguanjia`, are also vulnerable to both passive content leaks and content pollution attacks.
- **Developer Response**: In a three-month window, only approximately one-third of developers were keen to follow up and issue patches, indicating that an over-the-air (OTA) update may be a better choice.

**Future Work**:
- **Improvement of Detection Prototype**: Our current prototype for detecting vulnerable apps is limited and can be improved. For example, a more conservative approach to selecting candidate vulnerable apps can reduce false positives, and incorporating context information or internal logic of particular apps can reduce false negatives.