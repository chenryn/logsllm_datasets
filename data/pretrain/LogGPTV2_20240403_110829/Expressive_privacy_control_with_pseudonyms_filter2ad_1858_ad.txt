### Implementation Structure and Main Components

**Figure 8: Diagram of the structure of our implementation and its main components: the extension and gateway proxy.**

### Pseudonym ID Mappings

Our system allows users to define request-to-pseudonym ID mappings using policies detailed in Table 2. More advanced users can also use JavaScript to create custom mappings.

### Request Interception

The extension uses the `chrome.webRequest` APIs, specifically `onBeforeSendHeaders` and `onHeadersReceived`, to intercept and modify HTTP requests and responses. When an HTTP request is intercepted, the extension applies the policy-defined mappings to determine the appropriate pseudonym for the request. For incoming HTTP responses, a unique identifier called the request ID, provided by Chrome, is used to map the response to a specific pseudonym.

### Tagging

To inform the gateway of which IPv6 address to use, the extension appends the desired IPv6 address to the user-agent string in the HTTP header. The gateway then examines and strips this information. For HTTPS packets, which are encrypted, the CONNECT protocol is used. The CONNECT packet includes a user-agent field that can be utilized to communicate pseudonym information. However, as of the time of writing, Chromium/Chrome has a known issue where it does not expose the CONNECT request to the extension, classified as a bug: [http://code.google.com/p/chromium/issues/detail?id=129572](http://code.google.com/p/chromium/issues/detail?id=129572).

### Address Allocation/Deallocation

When the extension runs low on IPv6 addresses, it sends an allocation request to the gateway via an HTTP request. Ephemeral addresses that will not be reused are released. The extension maintains a reserve pool of 10 addresses to prevent blocking due to a lack of available IPs.

### Cookie Storage

To separate cookie stores for each pseudonym, we prepend a pseudonym ID to each cookie key. This ensures that cookies are unique to their respective pseudonym pairs. Cookies are set through the `set-cookie` header in HTTP responses or via JavaScript. All HTTP requests and responses are intercepted, and cookie-related headers are rewritten so that outgoing requests contain the original cookie keys, while incoming responses have cookie keys prepended with the pseudonym ID. Accesses to cookies (and HTML5 LocalStorage) through JavaScript getters and setters are overridden by custom JavaScript functions (see Figure 9).

### Evaluation

#### Performance and Privacy

In this section, we evaluate the performance and privacy aspects of our system. We aim to determine if our system can scale to the required number of pseudonyms under various privacy policies and how different policies compare in terms of privacy preservation. Our evaluation combines performance measurements and web-usage trace studies, utilizing the HTTP request traces presented in Section 2.2.

##### Performance

To assess the performance implications of our system, we conducted both end-to-end comparisons of page load times and micro benchmarks using our prototype implementation. Our findings indicate that current technology has sufficient capacity to implement all aspects of our system.

###### End-to-End Performance

We measured the page load times of the top 100 Alexa websites that support IPv6. Note that 25% of the overall top 100 Alexa websites support IPv6, with the 100th IPv6-supporting website ranked 869th. We used the Chromium benchmarking extension, which collects HTTP connection performance data (available at [http://bit.ly/14ErTju](http://bit.ly/14ErTju)).

**Figure 10: CDF of page load time for Top 100 IPv6 websites tested with and without our system.**

### Summary of Results

| Policy | Pseudonyms | Activities | Collections |
|--------|------------|------------|-------------|
| Trivial | 1          | 1          | 651         |
| Per tab | 38         | 36         | 9.50/41     |
| Per browsing session | 140 | 4.65/28    | 0.27/9      |
| Per 1st-party | 425 | 0.04/15    | 0.06/26     |
| Per page | 1276 | 0.51/28    | 0.00/0      |
| 3rd-party blocking | 22982 | 0.17/13    | 0.00/24     |
| Per request | 63062 | 0.00/0     | 0.00/0      |
| Time-based | 155 | 8.34/78    | 0.23/13     |

This table summarizes the results for different privacy policies, showing the number of pseudonyms, activities, and collections. Further details and additional results are provided in the full report.