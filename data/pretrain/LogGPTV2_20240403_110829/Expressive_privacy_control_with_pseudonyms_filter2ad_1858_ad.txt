if PID = pseudonymID then
Figure 8: Diagram of the structure of our implementation and
its main components: the extension and gateway proxy.
policies detailed in Table 2, but more sophisticated users can use
JavaScript to deﬁne their own request to pseudonym ID mappings.
Request Interception: The extension adds listeners for web re-
quests and responses with chrome.webRequest APIs (i.e., onBefore-
SendHeaders and onHeadersReceived), which allow it to read
and modify HTTP requests and responses. When an HTTP request
is captured by the extension, it uses the policy-deﬁned mappings
to determine which pseudonym to use for the request. Incoming
HTTP responses can be mapped to a speciﬁc pseudonym by using
a unique identiﬁer that Chrome provides called request ID.
Tagging: To notify the gateway of which IPv6 address to use,
the extension appends the desired IPv6 address to the user-agent
passed in the HTTP header, which will be examined and stripped
at the gateway. While HTTPS packets are encrypted and therefore
cannot be examined at the proxy, the HTTPS tunnel is built using
the CONNECT protocol. A CONNECT packet includes a user-agent
ﬁeld that we can use to communicate pseudonym information6.
Address Allocation/Deallocation: When the extension is low
on IPv6 addresses, it sends an allocation request to the gateway in
the form of an HTTP request. It releases these addresses if they
are ephemeral and will not be used again. It also maintains a re-
serve pool of addresses (currently 10) to prevent requests from be-
ing blocked due to the lack of free IPs.
Cookie Storage: To separate cookie stores on a per-pseudonym
basis, we prepend a pseudonym ID onto each cookie key. This
makes every cookie unique to the particular cookie  pair. Cookies are either set through the an HTTP response’s
set-cookie header or using JavaScript. HTTP requests and re-
sponses are all intercepted and the cookie-related headers rewritten
so that outgoing requests contain the original cookie keys, and in-
coming responses contain cookie keys that have been prepended
with the psudonym ID. Cookie (as well as HTML5 LSO) accesses
through JavaScript getters and setters are overridden by custom
JavaScript functions (see Figure 9).
6As of the time of writing, Chromium/Chrome has an issue
where it does not expose the CONNECT request to the extension.
This has been classiﬁed as a bug: http://code.google.com/p/
chromium/issues/detail?id=129572.
Figure 9: Pseudocode for overriding JavaScript cookie code. A
similar technique can be used for HTML5 LocalStorage.
Figure 10: CDF of page load time for Top 100 IPv6 websites
tested with and without our system.
7. EVALUATION
In this section, we present the evaluation of the performance and
privacy aspects of our system. We seek to answer whether our
system scales to the required number of pseudonyms under vari-
ous privacy policies and how different policies compare with re-
gards to the preservation of privacy. We drive the evaluation of our
system by a combination of performance measurement and web-
usage trace study, utilizing the HTTP request traces presented in
Section 2.2.
7.1 Performance
To evaluate the performance implications of our system, we uti-
lize a combination of an end-to-end comparison of page load time
and micro benchmarks using our prototype implementation. We
ﬁnd that current technology already has more than enough capacity
to implement each aspect of our system.
End-to-End Performance: To evaluate the overall performance
of the implementation, we conducted an end-to-end measurement
of page load times of the top 100 Alexa7 websites that support IPv6.
Note that 25% of the overall top 100 Alexa websites support IPv6,
and that the 100th IPv6 supporting web site was ranked 869th in
the whole ranking.
We use the Chromium benchmarking extension8, which collects
HTTP connection performance data. We measure web page load
7http://www.alexa.com/topsites
8http://bit.ly/14ErTju
Searchhttp://domain.comWeb Page TitleUserActivityPIDCookieIP1...2006::22...2006::8.........Pseudonym StoreExtensionPolicyGateway ProxyBuild TCP connection with given IPReplace Cookie, Tag IP addressHTTPRequestSet CookieHTTPResponseIntercepting request/responseIP Alloc/Dealloc 0 0.2 0.4 0.6 0.8 1 0 2000 4000 6000 8000 10000 12000 14000CDFPage Load Time (ms)originalusing our system299Trivial
Per tab
Per browsing session
Per 1st-party
Per page
3rd-party blocking
Per request
Time-based
User
Pseudonyms
Activities
Collections
Pseudonyms
Activities
Collections
Pseudonyms
Activities
Collections
Pseudonyms
Activities
Collections
Pseudonyms
Activities
Collections
Pseudonyms
Activities
Collections
Pseudonyms
Activities
Collections
Pseudonyms
Activities
Collections
1
1
651
38
36
9.50/41
0.94/9
140
4.65/28
0.27/9
425
0.04/15
0.06/26
1276
0.51/28
0.00/0
22982
0.17/13
0.00/24
63062
0.00/0
0.00/0
155
8.34/78
0.23/13
2
1
4657
101
123
14.15/67
0.81/12
858
5.43/33
0.12/12
730
0.03/19
0.11/77
7701
0.60/33
0.00/0
29313
0.27/19
0.00/73
59045
0.00/0
0.00/0
109
19.57/79
0.91/9
3
1
359
338
64
5.02/31
5.00/22
178
2.02/27
1.90/10
393
0.04/16
0.56/220
915
0.39/27
0.00/0
9233
0.10/16
0.03/216
17586
0.00/0
0.00/0
67
4.58/42
4.42/18
4
1
872
515
174
4.48/40
2.64/34
350
2.49/34
1.47/13
655
0.05/36
0.49/318
2152
0.40/34
0.00/0
16132
0.15/36
0.03/307
49252
0.00/0
0.00/0
126
9.38/60
3.43/20
5
1
63
91
36
1.75/17
2.31/8
38
1.66/17
2.39/5
158
0.03/4
0.35/55
178
0.35/17
0.00/0
1437
0.08/4
0.05/54
4906
0.00/0
0.00/0
153
0.38/20
0.52/11
6
1
692
336
186
3.48/30
1.55/7
244
2.84/17
1.38/6
534
0.04/23
0.31/166
1412
0.46/17
0.00/0
11287
0.07/21
0.02/158
33644
0.00/0
0.00/0
151
3.89/40
1.83/20
7
1
599
179
111
4.33/33
1.45/20
227
2.64/30
0.79/9
579
0.03/17
0.21/122
1689
0.35/30
0.00/0
18605
0.06/17
0.01/116
42645
0.00/0
0.00/0
106
7.37/59
1.54/20
8
1
615
166
412
1.21/16
0.31/5
670
0.92/16
0.25/5
1319
0.00/5
0.09/121
3356