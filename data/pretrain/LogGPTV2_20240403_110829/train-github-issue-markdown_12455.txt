Defining `flask.test_client()` instances using `with` clause causes them to
share context/content of `flask.g` variable.  
This wasn't the case in previous versions of flask.
### How to replicate the bug
    import flask
    app = flask.Flask("app")
    @app.route("/index")
    def index():
        if "my_special_data" in flask.g:
            print("special data found")
        else:
            print("no special data")
        flask.g.my_special_data = True
        return "OK", 200
    with app.test_client() as first_client, app.test_client() as second_client:
        first_client.get("/index")
        second_client.get("/index")
In flask==2.2.x running this script prints
    no special data
    special data found
showing that second_client shares `flask.g` with first client.
### Expected behaviour
In flask==2.1.3 this code prints
    no special data
    no special data
Additionally in both previous and current (2.2.x) versions of flask, running
test clients defined outside of with clause, that is writing
    first_client = app.test_client()
    second_client = app.test_client()
    first_client.get("/index")
    second_client.get("/index")
produces
    no special data
    no special data
Environment:
  * Python version: 3.8.13
  * Flask version: 2.2.2
I believe this behavior should be considered a bug, and I noticed this
behavior breaking some libraries based on flask.