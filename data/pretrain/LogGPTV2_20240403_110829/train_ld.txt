.br pidfd_getfd (2).
.\" jann horn:
.\"     instead of using unix domain sockets to send the fd to the
.\"     parent, i think you could also use clone3() with
.\"     flags==clone_files|sigchld, dup2() the seccomp fd to an fd
.\"     that was reserved in the parent, call unshare(clone_files)
.\"     in the child after setting up the seccomp fd, and wake
.\"     up the parent with something like pthread_cond_signal()?
.\"     i'm not sure whether that'd look better or worse in the
.\"     end though, so maybe just ignore this comment.
.\"-------------------------------------
.ip 3.
the supervisor will receive notification events
on the listening file descriptor.
these events are returned as structures of type
.ir seccomp_notif .
because this structure and its size may evolve over kernel versions,
the supervisor must first determine the size of this structure
using the
.br seccomp (2)
.b seccomp_get_notif_sizes
operation, which returns a structure of type
.ir seccomp_notif_sizes .
the supervisor allocates a buffer of size
.i seccomp_notif_sizes.seccomp_notif
bytes to receive notification events.
in addition,the supervisor allocates another buffer of size
.i seccomp_notif_sizes.seccomp_notif_resp
bytes for the response (a
.i struct seccomp_notif_resp
structure)
that it will provide to the kernel (and thus the target).
.\"-------------------------------------
.ip 4.
the target then performs its workload,
which includes system calls that will be controlled by the seccomp filter.
whenever one of these system calls causes the filter to return the
.b seccomp_ret_user_notif
action value, the kernel does
.i not
(yet) execute the system call;
instead, execution of the target is temporarily blocked inside
the kernel (in a sleep state that is interruptible by signals)
and a notification event is generated on the listening file descriptor.
.\"-------------------------------------
.ip 5.
the supervisor can now repeatedly monitor the
listening file descriptor for
.br seccomp_ret_user_notif -triggered
events.
to do this, the supervisor uses the
.b seccomp_ioctl_notif_recv
.br ioctl (2)
operation to read information about a notification event;
this operation blocks until an event is available.
the operation returns a
.i seccomp_notif
structure containing information about the system call
that is being attempted by the target.
(as described in notes,
the file descriptor can also be monitored with
.br select (2),
.br poll (2),
or
.br epoll (7).)
.\" fixme
.\" christian brauner:
.\"
.\" do we support o_nonblock with seccomp_ioctl_notif_recv and if
.\" not should we?
.\"
.\" michael kerrisk:
.\"
.\" a quick test suggests that o_nonblock has no effect on the blocking
.\" behavior of seccomp_ioctl_notif_recv.
.
.\"-------------------------------------
.ip 6.
the
.i seccomp_notif
structure returned by the
.b seccomp_ioctl_notif_recv
operation includes the same information (a
.i seccomp_data
structure) that was passed to the seccomp filter.
this information allows the supervisor to discover the system call number and
the arguments for the target's system call.
in addition, the notification event contains the id of the thread
that triggered the notification and a unique cookie value that
is used in subsequent
.b seccomp_ioctl_notif_id_valid
and
.b seccomp_ioctl_notif_send
operations.
.ip
the information in the notification can be used to discover the
values of pointer arguments for the target's system call.
(this is something that can't be done from within a seccomp filter.)
one way in which the supervisor can do this is to open the corresponding
.i /proc/[tid]/mem
file (see
.br proc (5))
and read bytes from the location that corresponds to one of
the pointer arguments whose value is supplied in the notification event.
.\" tycho andersen mentioned that there are alternatives to /proc/pid/mem,
.\" such as ptrace() and /proc/pid/map_files
(the supervisor must be careful to avoid
a race condition that can occur when doing this;
see the description of the
.br seccomp_ioctl_notif_id_valid
.br ioctl (2)
operation below.)
in addition,
the supervisor can access other system information that is visible
in user space but which is not accessible from a seccomp filter.
.\"-------------------------------------
.ip 7.
having obtained information as per the previous step,
the supervisor may then choose to perform an action in response
to the target's system call
(which, as noted above, is not executed when the seccomp filter returns the
.b seccomp_ret_user_notif
action value).
.ip
one example use case here relates to containers.
the target may be located inside a container where
it does not have sufficient capabilities to mount a filesystem
in the container's mount namespace.
however, the supervisor may be a more privileged process that
does have sufficient capabilities to perform the mount operation.
.\"-------------------------------------
.ip 8.
the supervisor then sends a response to the notification.
the information in this response is used by the kernel to construct
a return value for the target's system call and provide
a value that will be assigned to the
.i errno
variable of the target.
.ip
the response is sent using the
.b seccomp_ioctl_notif_send
.br ioctl (2)
operation, which is used to transmit a
.i seccomp_notif_resp
structure to the kernel.
this structure includes a cookie value that the supervisor obtained in the
.i seccomp_notif
structure returned by the
.b seccomp_ioctl_notif_recv
operation.
this cookie value allows the kernel to associate the response with the
target.
this structure must include the cookie value that the supervisor
obtained in the
.i seccomp_notif
structure returned by the
.b seccomp_ioctl_notif_recv
operation;
the cookie allows the kernel to associate the response with the target.
.\"-------------------------------------
.ip 9.
once the notification has been sent,
the system call in the target thread unblocks,
returning the information that was provided by the supervisor
in the notification response.
.\"-------------------------------------
.pp
as a variation on the last two steps,
the supervisor can send a response that tells the kernel that it
should execute the target thread's system call; see the discussion of
.br seccomp_user_notif_flag_continue ,
below.
.\"
.sh ioctl operations
the following
.br ioctl (2)
operations are supported by the seccomp user-space
notification file descriptor.
for each of these operations, the first (file descriptor) argument of
.br ioctl (2)
is the listening file descriptor returned by a call to
.br seccomp (2)
with the
.br seccomp_filter_flag_new_listener
flag.
.\"
.ss seccomp_ioctl_notif_recv
the
.b seccomp_ioctl_notif_recv
operation (available since linux 5.0) is used to obtain a user-space
notification event.
if no such event is currently pending,
the operation blocks until an event occurs.
the third
.br ioctl (2)
argument is a pointer to a structure of the following form
which contains information about the event.
this structure must be zeroed out before the call.
.pp
.in +4n
.ex
struct seccomp_notif {
    __u64  id;              /* cookie */
    __u32  pid;             /* tid of target thread */
    __u32  flags;           /* currently unused (0) */
    struct seccomp_data data;   /* see seccomp(2) */
};
.ee
.in
.pp
the fields in this structure are as follows:
.tp
.i id
this is a cookie for the notification.
each such cookie is guaranteed to be unique for the corresponding
seccomp filter.
.rs
.ip \(bu 2
the cookie can be used with the
.b seccomp_ioctl_notif_id_valid
.br ioctl (2)
operation described below.
.ip \(bu
when returning a notification response to the kernel,
the supervisor must include the cookie value in the
.ir seccomp_notif_resp
structure that is specified as the argument of the
.br seccomp_ioctl_notif_send
operation.
.re
.tp
.i pid
this is the thread id of the target thread that triggered
the notification event.
.tp
.i flags
this is a bit mask of flags providing further information on the event.
in the current implementation, this field is always zero.
.tp
.i data
this is a
.i seccomp_data
structure containing information about the system call that
triggered the notification.
this is the same structure that is passed to the seccomp filter.
see
.br seccomp (2)
for details of this structure.
.pp
on success, this operation returns 0; on failure, \-1 is returned, and
.i errno
is set to indicate the cause of the error.
this operation can fail with the following errors:
.tp
.br einval " (since linux 5.5)"
.\" commit 2882d53c9c6f3b8311d225062522f03772cf0179
the
.i seccomp_notif
structure that was passed to the call contained nonzero fields.
.tp
.b enoent
the target thread was killed by a signal as the notification information
was being generated,
or the target's (blocked) system call was interrupted by a signal handler.
.\" fixme
.\" from my experiments,
.\" it appears that if a seccomp_ioctl_notif_recv is done after
.\" the target thread terminates, then the ioctl() simply
.\" blocks (rather than returning an error to indicate that the
.\" target no longer exists).
.\"
.\" i found that surprising, and it required some contortions in
.\" the example program.  it was not possible to code my sigchld
.\" handler (which reaps the zombie when the worker/target
.\" terminates) to simply set a flag checked in the main
.\" handlenotifications() loop, since this created an
.\" unavoidable race where the child might terminate just after
.\" i had checked the flag, but before i blocked (forever!) in the
.\" seccomp_ioctl_notif_recv operation. instead, i had to code
.\" the signal handler to simply call _exit(2) in order to
.\" terminate the parent process (the supervisor).
.\"
.\" is this expected behavior? it seems to me rather
.\" desirable that seccomp_ioctl_notif_recv should give an error
.\" if the target has terminated.
.\"
.\" jann posted a patch to rectify this, but there was no response
.\" (lore link: https://bit.ly/3jvubxk) to his question about fixing
.\" this issue. (i've tried building with the patch, but encountered
.\" an issue with the target process entering d state after a signal.)
.\"
.\" for now, this behavior is documented in bugs.
.\"
.\" kees cook commented: let's change [this] asap!
.\"
.ss seccomp_ioctl_notif_id_valid
the
.b seccomp_ioctl_notif_id_valid
operation (available since linux 5.0) is used to check that a notification id
returned by an earlier
.b seccomp_ioctl_notif_recv
operation is still valid
(i.e., that the target still exists and its system call
is still blocked waiting for a response).
.pp
the third
.br ioctl (2)
argument is a pointer to the cookie
.ri ( id )
returned by the
.b seccomp_ioctl_notif_recv
operation.
.pp
this operation is necessary to avoid race conditions that can occur when the
.i pid
returned by the
.b seccomp_ioctl_notif_recv
operation terminates, and that process id is reused by another process.
an example of this kind of race is the following
.ip 1. 3
a notification is generated on the listening file descriptor.
the returned
.i seccomp_notif
contains the tid of the target thread (in the
.i pid
field of the structure).
.ip 2.
the target terminates.
.ip 3.
another thread or process is created on the system that by chance reuses the
tid that was freed when the target terminated.
.ip 4.
the supervisor
.br open (2)s
the
.ir /proc/[tid]/mem
file for the tid obtained in step 1, with the intention of (say)
inspecting the memory location(s) that containing the argument(s) of
the system call that triggered the notification in step 1.
.pp
in the above scenario, the risk is that the supervisor may try
to access the memory of a process other than the target.
this race can be avoided by following the call to
.br open (2)
with a
.b seccomp_ioctl_notif_id_valid
operation to verify that the process that generated the notification
is still alive.
(note that if the target terminates after the latter step,
a subsequent
.br read (2)
from the file descriptor may return 0, indicating end of file.)
.\" jann horn:
.\"     the pid can be reused, but the /proc/$pid directory is
.\"     internally not associated with the numeric pid, but,
.\"     conceptually speaking, with a specific incarnation of the
.\"     pid, or something like that.  (actually, it is associated
.\"     with the "struct pid", which is not reused, instead of the
.\"     numeric pid.
.pp
see notes for a discussion of other cases where
.b seccomp_ioctl_notif_id_valid
checks must be performed.
.pp
on success (i.e., the notification id is still valid),
this operation returns 0.
on failure (i.e., the notification id is no longer valid),
\-1 is returned, and
.i errno
is set to
.br enoent .
.\"
.ss seccomp_ioctl_notif_send
the
.b seccomp_ioctl_notif_send
operation (available since linux 5.0)
is used to send a notification response back to the kernel.
the third
.br ioctl (2)
argument of this structure is a pointer to a structure of the following form:
.pp
.in +4n
.ex
struct seccomp_notif_resp {
    __u64 id;           /* cookie value */
    __s64 val;          /* success return value */
    __s32 error;        /* 0 (success) or negative error number */
    __u32 flags;        /* see below */
};
.ee
.in
.pp
the fields of this structure are as follows:
.tp
.i id
this is the cookie value that was obtained using the
.b seccomp_ioctl_notif_recv
operation.
this cookie value allows the kernel to correctly associate this response
with the system call that triggered the user-space notification.
.tp
.i val
this is the value that will be used for a spoofed
success return for the target's system call; see below.
.tp
.i error
this is the value that will be used as the error number
.ri ( errno )
for a spoofed error return for the target's system call; see below.
.tp
.i flags
this is a bit mask that includes zero or more of the following flags:
.rs
.tp
.br seccomp_user_notif_flag_continue " (since linux 5.5)"
tell the kernel to execute the target's system call.
.\" commit fb3c5386b382d4097476ce9647260fc89b34afdb
.re
.pp
two kinds of response are possible:
.ip \(bu 2
a response to the kernel telling it to execute the
target's system call.
in this case, the
.i flags
field includes
.b seccomp_user_notif_flag_continue
and the
.i error
and
.i val
fields must be zero.
.ip
this kind of response can be useful in cases where the supervisor needs
to do deeper analysis of the target's system call than is possible
from a seccomp filter (e.g., examining the values of pointer arguments),
and, having decided that the system call does not require emulation
by the supervisor, the supervisor wants the system call to
be executed normally in the target.
.ip
the
.b seccomp_user_notif_flag_continue
flag should be used with caution; see notes.
.ip \(bu
a spoofed return value for the target's system call.
in this case, the kernel does not execute the target's system call,
instead causing the system call to return a spoofed value as specified by
fields of the
.i seccomp_notif_resp
structure.
the supervisor should set the fields of this structure as follows:
.rs
.ip + 3
.i flags
does not contain
.br seccomp_user_notif_flag_continue .
.ip +
.i error
is set either to 0 for a spoofed "success" return or to a negative
error number for a spoofed "failure" return.
in the former case, the kernel causes the target's system call
to return the value specified in the
.i val
field.
in the latter case, the kernel causes the target's system call
to return \-1, and
.i errno
is assigned the negated
.i error
value.
.ip +
.i val
is set to a value that will be used as the return value for a spoofed
"success" return for the target's system call.
the value in this field is ignored if the
.i error
field contains a nonzero value.
.\" fixme
.\" kees cook suggested:
.\"
.\" strictly speaking, this is architecture specific, but
.\" all architectures do it this way. should seccomp enforce
.\" val == 0 when err != 0 ?
.\"
.\" christian brauner
.\"
.\" feels like it should, at least for the send ioctl where we already
.\" verify that val and err are both 0 when continue is specified (as you
.\" pointed out correctly above).
.re
.pp
on success, this operation returns 0; on failure, \-1 is returned, and
.i errno
is set to indicate the cause of the error.
this operation can fail with the following errors:
.tp
.b einprogress
a response to this notification has already been sent.
.tp
.b einval
an invalid value was specified in the
.i flags field.
.tp
.b
.b einval
the
.i flags
field contained
.br seccomp_user_notif_flag_continue ,
and the
.i error
or
.i val
field was not zero.
.tp
.b enoent
the blocked system call in the target
has been interrupted by a signal handler
or the target has terminated.
.\" jann horn notes:
.\"     you could also get this [enoent] if a response has already
.\"     been sent, instead of einprogress - the only difference is
.\"     whether the target thread has picked up the response yet
.\"
.ss seccomp_ioctl_notif_addfd
the
.b seccomp_ioctl_notif_addfd
operation (available since linux 5.9)
allows the supervisor to install a file descriptor
into the target's file descriptor table.
much like the use of
.br scm_rights
messages described in
.br unix (7),
this operation is semantically equivalent to duplicating
a file descriptor from the supervisor's file descriptor table
into the target's file descriptor table.
.pp
the
.br seccomp_ioctl_notif_addfd
operation permits the supervisor to emulate a target system call (such as
.br socket (2)
or
.br openat (2))
that generates a file descriptor.
the supervisor can perform the system call that generates
the file descriptor (and associated open file description)
and then use this operation to allocate
a file descriptor that refers to the same open file description in the target.
(for an explanation of open file descriptions, see
.br open (2).)
.pp
once this operation has been performed,
the supervisor can close its copy of the file descriptor.
.pp