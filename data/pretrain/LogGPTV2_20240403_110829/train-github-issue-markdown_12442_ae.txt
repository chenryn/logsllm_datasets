        paths: string[];
      }
      /** Watch for file system events against one or more `paths`, which can be files
       * or directories.  These paths must exist already.  One user action (e.g.
       * `touch test.file`) can  generate multiple file system events.  Likewise,
       * one user action can result in multiple file paths in one event (e.g. `mv
       * old_name.txt new_name.txt`).  Recursive option is `true` by default and,
       * for directories, will watch the specified directory and all sub directories.
       * Note that the exact ordering of the events can vary between operating systems.
       *
       * ```ts
       * const watcher = Deno.watchFs("/");
       * for await (const event of watcher) {
       *    console.log(">>>> event", event);
       *    // { kind: "create", paths: [ "/foo.txt" ] }
       * }
       *```
       *
       * Requires `allow-read` permission.
       */
      export function watchFs(
        paths: string | string[],
        options?: { recursive: boolean }
      ): AsyncIterableIterator;
      export class Process {
        readonly rid: number;
        readonly pid: number;
        readonly stdin?: Writer & Closer;
        readonly stdout?: Reader & Closer;
        readonly stderr?: Reader & Closer;
        /** Resolves to the current status of the process. */
        status(): Promise;
        /** Buffer the stdout until EOF and return it as `Uint8Array`.
         *
         * You must set stdout to `"piped"` when creating the process.
         *
         * This calls `close()` on stdout after its done. */
        output(): Promise;
        /** Buffer the stderr until EOF and return it as `Uint8Array`.
         *
         * You must set stderr to `"piped"` when creating the process.
         *
         * This calls `close()` on stderr after its done. */
        stderrOutput(): Promise;
        close(): void;
        /** **UNSTABLE**: The `signo` argument may change to require the Deno.Signal
         * enum.
         *
         * Send a signal to process. This functionality currently only works on
         * Linux and Mac OS.
         */
        kill(signo: number): void;
      }
      export type ProcessStatus =
        | {
            success: true;
            code: 0;
            signal?: undefined;
          }
        | {
            success: false;
            code: number;
            signal?: number;
          };
      export interface RunOptions {
        /** Arguments to pass. Note, the first element needs to be a path to the
         * binary */
        cmd: string[];
        cwd?: string;
        env?: {
          [key: string]: string;
        };
        stdout?: "inherit" | "piped" | "null" | number;
        stderr?: "inherit" | "piped" | "null" | number;
        stdin?: "inherit" | "piped" | "null" | number;
      }
      /** Spawns new subprocess.  RunOptions must contain at a minimum the `opt.cmd`,
       * an array of program arguments, the first of which is the binary.
       *
       * ```ts
       * const p = Deno.run({
       *   cmd: ["echo", "hello"],
       * });
       * ```
       *
       * Subprocess uses same working directory as parent process unless `opt.cwd`
       * is specified.
       *
       * Environmental variables for subprocess can be specified using `opt.env`
       * mapping.
       *
       * By default subprocess inherits stdio of parent process. To change that
       * `opt.stdout`, `opt.stderr` and `opt.stdin` can be specified independently -
       * they can be set to either an rid of open file or set to "inherit" "piped"
       * or "null":
       *
       * `"inherit"` The default if unspecified. The child inherits from the
       * corresponding parent descriptor.
       *
       * `"piped"` A new pipe should be arranged to connect the parent and child
       * sub-processes.
       *
       * `"null"` This stream will be ignored. This is the equivalent of attaching
       * the stream to `/dev/null`.
       *
       * Details of the spawned process are returned.
       *
       * Requires `allow-run` permission. */
      export function run(opt: RunOptions): Process;
      interface InspectOptions {
        depth?: number;
      }
      /** Converts the input into a string that has the same format as printed by
       * `console.log()`.
       *
       * ```ts
       * const obj = {};
       * obj.propA = 10;
       * obj.propB = "hello"
       * const objAsString = Deno.inspect(obj); // { propA: 10, propB: "hello" }
       * console.log(obj);  // prints same value as objAsString, e.g. { propA: 10, propB: "hello" }
       * ```
       *
       * You can also register custom inspect functions, via the `customInspect` Deno
       * symbol on objects, to control and customize the output.
       *
       * ```ts
       * class A {
       *   x = 10;
       *   y = "hello";
       *   [Deno.customInspect](): string {
       *     return "x=" + this.x + ", y=" + this.y;
       *   }
       * }
       * ```
       *
       *      const inStringFormat = Deno.inspect(new A()); // "x=10, y=hello"
       *      console.log(inStringFormat);  // prints "x=10, y=hello"
       *
       * Finally, a number of output options are also available.
       *
       *      const out = Deno.inspect(obj, {showHidden: true, depth: 4, colors: true, indentLevel: 2});
       *
       */
      export function inspect(value: unknown, options?: InspectOptions): string;
      /** Build related information. */
      export const build: {
        /** The LLVM target triple */
        target: string;
        /** Instruction set architecture */
        arch: "x86_64";
        /** Operating system */
        os: "darwin" | "linux" | "windows";
        /** Computer vendor */
        vendor: string;
        /** Optional environment */
        env?: string;
      };
      interface Version {
        deno: string;
        v8: string;
        typescript: string;
      }
      /** Version related information. */
      export const version: Version;
      /** Returns the script arguments to the program. If for example we run a
       * program:
       *
       * deno run --allow-read https://deno.land/std/examples/cat.ts /etc/passwd
       *
       * Then `Deno.args` will contain:
       *
       * [ "/etc/passwd" ]
       */
      export const args: string[];
      /** A symbol which can be used as a key for a custom method which will be
       * called when `Deno.inspect()` is called, or when the object is logged to
       * the console. */
      export const customInspect: unique symbol;
    }
    // Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.
    /* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, no-var */
    /// 
    /// 
    // This follows the WebIDL at: https://webassembly.github.io/spec/js-api/
    // and: https://webassembly.github.io/spec/web-api/
    declare namespace WebAssembly {
      interface WebAssemblyInstantiatedSource {
        module: Module;
        instance: Instance;
      }
      /** Compiles a `WebAssembly.Module` from WebAssembly binary code.  This
       * function is useful if it is necessary to a compile a module before it can
       * be instantiated (otherwise, the `WebAssembly.instantiate()` function
       * should be used). */
      function compile(bufferSource: BufferSource): Promise;
      /** Compiles a `WebAssembly.Module` directly from a streamed underlying
       * source. This function is useful if it is necessary to a compile a module
       * before it can be instantiated (otherwise, the
       * `WebAssembly.instantiateStreaming()` function should be used). */
      function compileStreaming(source: Promise): Promise;
      /** Takes the WebAssembly binary code, in the form of a typed array or
       * `ArrayBuffer`, and performs both compilation and instantiation in one step.
       * The returned `Promise` resolves to both a compiled `WebAssembly.Module` and
       * its first `WebAssembly.Instance`. */
      function instantiate(
        bufferSource: BufferSource,
        importObject?: object
      ): Promise;
      /** Takes an already-compiled `WebAssembly.Module` and returns a `Promise`
       * that resolves to an `Instance` of that `Module`. This overload is useful if
       * the `Module` has already been compiled. */
      function instantiate(
        module: Module,
        importObject?: object
      ): Promise;
      /** Compiles and instantiates a WebAssembly module directly from a streamed
       * underlying source. This is the most efficient, optimized way to load wasm
       * code. */
      function instantiateStreaming(
        source: Promise,
        importObject?: object
      ): Promise;
      /** Validates a given typed array of WebAssembly binary code, returning
       * whether the bytes form a valid wasm module (`true`) or not (`false`). */
      function validate(bufferSource: BufferSource): boolean;
      type ImportExportKind = "function" | "table" | "memory" | "global";
      interface ModuleExportDescriptor {
        name: string;
        kind: ImportExportKind;
      }
      interface ModuleImportDescriptor {
        module: string;
        name: string;
        kind: ImportExportKind;
      }
      class Module {
        constructor(bufferSource: BufferSource);
        /** Given a `Module` and string, returns a copy of the contents of all
         * custom sections in the module with the given string name. */
        static customSections(
          moduleObject: Module,
          sectionName: string
        ): ArrayBuffer;
        /** Given a `Module`, returns an array containing descriptions of all the
         * declared exports. */
        static exports(moduleObject: Module): ModuleExportDescriptor[];
        /** Given a `Module`, returns an array containing descriptions of all the
         * declared imports. */
        static imports(moduleObject: Module): ModuleImportDescriptor[];
      }
      class Instance {
        constructor(module: Module, importObject?: object);
        /** An object containing as its members all the functions exported from the
         * WebAssembly module instance, to allow them to be accessed and used by
         * JavaScript. */
        readonly exports: T;
      }
      interface MemoryDescriptor {
        initial: number;
        maximum?: number;
      }
      class Memory {
        constructor(descriptor: MemoryDescriptor);
        /** An accessor property that returns the buffer contained in the memory. */
        readonly buffer: ArrayBuffer;
        /** Increases the size of the memory instance by a specified number of
         * WebAssembly pages (each one is 64KB in size). */
        grow(delta: number): number;
      }
      type TableKind = "anyfunc";
      interface TableDescriptor {
        element: TableKind;
        initial: number;
        maximum?: number;
      }
      class Table {
        constructor(descriptor: TableDescriptor);
        /** Returns the length of the table, i.e. the number of elements. */
        readonly length: number;
        /** Accessor function ΓÇö gets the element stored at a given index. */
        get(index: number): (...args: any[]) => any;
        /** Increases the size of the Table instance by a specified number of
         * elements. */
        grow(delta: number): number;
        /** Sets an element stored at a given index to a given value. */
        set(index: number, value: (...args: any[]) => any): void;
      }
      type ValueType = "i32" | "i64" | "f32" | "f64";
      interface GlobalDescriptor {
        value: ValueType;
        mutable?: boolean;
      }
      /** Represents a global variable instance, accessible from both JavaScript and
       * importable/exportable across one or more `WebAssembly.Module` instances.
       * This allows dynamic linking of multiple modules. */
      class Global {
        constructor(descriptor: GlobalDescriptor, value?: any);
        /** Old-style method that returns the value contained inside the global
         * variable. */
        valueOf(): any;
        /** The value contained inside the global variable ΓÇö this can be used to
         * directly set and get the global's value. */
        value: any;
      }
      /** Indicates an error during WebAssembly decoding or validation */
      class CompileError extends Error {
        constructor(message: string, fileName?: string, lineNumber?: string);
      }
      /** Indicates an error during module instantiation (besides traps from the
       * start function). */
      class LinkError extends Error {
        constructor(message: string, fileName?: string, lineNumber?: string);
      }
      /** Is thrown whenever WebAssembly specifies a trap. */
      class RuntimeError extends Error {
        constructor(message: string, fileName?: string, lineNumber?: string);
      }
    }
    /** Sets a timer which executes a function once after the timer expires. */
    declare function setTimeout(
      cb: (...args: any[]) => void,
      delay?: number,
      ...args: any[]
    ): number;
    /** Repeatedly calls a function , with a fixed time delay between each call. */
    declare function setInterval(
      cb: (...args: any[]) => void,
      delay?: number,
      ...args: any[]
    ): number;
    declare function clearTimeout(id?: number): void;
    declare function clearInterval(id?: number): void;
    declare function queueMicrotask(func: Function): void;
    declare var console: Console;
    declare var crypto: Crypto;
    declare function addEventListener(
      type: string,
      callback: EventListenerOrEventListenerObject | null,
      options?: boolean | AddEventListenerOptions | undefined
    ): void;
    declare function dispatchEvent(event: Event): boolean;
    declare function removeEventListener(
      type: string,
      callback: EventListenerOrEventListenerObject | null,
      options?: boolean | EventListenerOptions | undefined
    ): void;
    declare interface ImportMeta {
      url: string;
      main: boolean;
    }
    interface DomIterable {
      keys(): IterableIterator;
      values(): IterableIterator;
      entries(): IterableIterator;
      [Symbol.iterator](): IterableIterator;
      forEach(
        callback: (value: V, key: K, parent: this) => void,
        thisArg?: any
      ): void;
    }
    interface ReadableStreamReadDoneResult {
      done: true;
      value?: T;
    }
    interface ReadableStreamReadValueResult {
      done: false;
      value: T;
    }