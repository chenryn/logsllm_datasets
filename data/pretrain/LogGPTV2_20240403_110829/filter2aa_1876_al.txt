      if (fakeDiff == Z) score++; else break;
    }
    if (score == numPlain)
    {
      printf("found subkey : 0x%08lx\n", fakeK);
      return fakeK;
    }
  }
  printf("failed\n");
  return 0;
}
void printHexString(unsigned long long buf) {
  printf("%016llx", buf);
}
unsigned long long readHexString() {
  unsigned long long ret = 0;
  char buf[0x200] = { 0 };
  scanf("%s", buf);
  for (int i = 0; i = '0' && buf[i] = 'A' && buf[i] = 'a' && buf[i] > 32) + (diff & 0xffffffff));
  int c;
  for (c = 0; c > 32) + (diff & 0xffffffff));
  int c;
  for (c = 0; c > 32) + (diff & 0xffffffff));
  int c;
  for (c = 0; c >6))&0xff # ror8
def fbox(plain):
    t0 = (plain[2] ^ plain[3])
    y1 = gbox(plain[0] ^ plain[1], t0, 1)
    y0 = gbox(plain[0], y1, 0)
    y2 = gbox(t0, y1, 0)
    y3 = gbox(plain[3], y2, 1)
    return [y3, y2, y1, y0]
def rev_gboxsum(x, mode):
    return (((x>2))&0xff - mode) % 256
def rev_fbox(enc):
    y3, y2, y1, y0 = enc
    plain3 = (rev_gboxsum(y3, 1) - y2) % 256
    t0 = (rev_gboxsum(y2, 0) - y1) % 256
    plain0_xor_plain1 = (rev_gboxsum(y1,1) - t0) % 256