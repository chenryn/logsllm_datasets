# 容器和编排
> 原文：
## 介绍
容器、Docker 和 Kubernetes 是“很酷”的术语，以某种方式参与软件的每个人都在谈论它们。让我们深入研究每一项技术，了解整个交易的内容！
在这个模块中，我们将讨论容器的来龙去脉:容器的内部结构和用法；它们是如何实现的，如何容器化你的应用，最后，如何在不失眠的情况下大规模部署容器化的应用。我们还将通过尝试一些实验室练习来动手实践。
### 先决条件
*   linux 的基础知识将有助于理解容器的内部结构
*   shell 命令的基本知识(当我们将应用容器化时会派上用场)
*   运行基本 web 应用的知识。你可以通过我们的 [Python 和 Web 模块](https://linkedin.github.io/school-of-sre/level101/python_web/intro/)来熟悉这一点。
## 从本课程中可以期待什么
该模块分为 3 个子模块。在第一个子模块中，我们将讲述容器化的内部原理以及它们的用途。
第二个子模块介绍了流行的容器引擎 Docker，并包含对基本 webapp 进行 dockerizing 的实验练习。
最后一个模块讲述了 Kubernetes 的容器编排，并通过一些实验练习展示了它如何简化 SREs 的工作。
## 本课程不包括哪些内容
我们不会讨论高级 docker 和 kubernetes 概念。但是，我们将引导您找到链接和参考资料，您可以根据自己的兴趣选择它们。
## 课程内容
本课程涵盖了以下主题:
*   [容器介绍](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/)
    *   [什么是容器](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/#what-are-containers)
    *   [为什么是容器](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/#why-containers)
    *   [虚拟机和容器的区别](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/#difference-between-virtual-machines-and-containers)
    *   [容器是如何实现的](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/#how-are-containers-implemented)
    *   [名称空间](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/#namespaces)
    *   [群组](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/#cgroups)
    *   [容器发动机](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/intro_to_containers/#container-engine)
*   [用 Docker 工人容器化](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/containerization_with_docker/)
    *   [简介](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/containerization_with_docker/#introduction)
    *   [Docker 工人基本术语](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/containerization_with_docker/#docker-terminology)
    *   [Docker 引擎的组件](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/containerization_with_docker/#components-of-docker-engine)
    *   [动手](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/containerization_with_docker/#lab)
    *   [高级 Docker 简介](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/containerization_with_docker/#advanced-features-of-docker)
*   [使用 Kubernetes 进行容器编排](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/orchestration_with_kubernetes/)
    *   [简介](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/orchestration_with_kubernetes/#introduction)
    *   [使用 Kubernetes 的动机](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/orchestration_with_kubernetes/#motivation-to-use-kubernetes)
    *   [立方结构](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/orchestration_with_kubernetes/#architecture-of-kubernetes)
    *   [动手](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/orchestration_with_kubernetes/#lab)
    *   [高级 Kubernetes 概念介绍](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/orchestration_with_kubernetes/#advanced-topics)
*   [结论](https://linkedin.github.io/school-of-sre/level102/containerization_and_orchestration/conclusion/)