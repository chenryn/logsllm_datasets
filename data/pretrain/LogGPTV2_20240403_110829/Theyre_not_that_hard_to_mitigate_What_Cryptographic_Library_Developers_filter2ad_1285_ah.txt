◦ Partially
◦ I don’t know
◦ Not yet but planning to
to protect against
Q2.7: How did the development team decide to protect or
not
timing attacks? (We are interested
in the decision process and not the protection mechanisms
themselves (if any).)
[Free text field]
Q2.8: [only shown if Q2.6 is "Yes" or "Partially"] How does
library protect against timing attacks?
[Free text field]
Q2.9: Did you personally test for or verify the resistance of
library against timing attacks?
◦ Yes
◦ No
◦ Partially
◦ Not yet but planning to
◦ Not me but someone did
◦ I don’t know
◦ Prefer not to say
Q2.10: [only shown if Q2.9 is "Yes" or "Partially"] How did
you test or verify the resistance against timing attacks? (E.g.
using which tools, techniques, practices.)
[Free text field]
Q2.11: [only shown if Q2.9 is "Yes" or "Partially"] How often
do you test or verify the resistance of library against timing
attacks?
□ Only did it once
□ Do it occasionally
□ During releases
□ During CI
□ Don’t know
□ Prefer not to say
C. Tooling
Q3.1: Are you aware of tools that can test or verify resistance
against timing attacks?
◦ Yes
◦ No
Q3.2: Please tell us which of these you’ve heard of with
regards to verifying resistance against timing attacks.
[List of tools from Table I.]
Q3.3: How did you learn about them? (Check all that apply)
[Matrix question with subquestions being the tools the
participant selected in Q3.2 and the following answer options:]
□ Recommended by colleague
□ Heard from authors
□ Read the paper
□ Referenced in a blog/different paper
□ Was involved in the development
□ Other
Q3.4: Which of these (if any) have you tried to use in the
context of resistance against timing attacks?
[Multiple choice question among the tools selected by the
participant in Q3.2.]
Q3.5: Why have you not tried to use these?
[Multiple free text fields for all of the tools the participant
did select in Q3.2 but not in Q3.4.]
D. Tool use
[All of the questions in this group are matrix questions with
subquestions for all of the tools the participant did select in
Q3.2 and Q3.4, i.e. those tools that the participant knows and
tried to use.]
Q4.1: Please describe the process of using the tools.
[Free text field]
Q4.2: I was satisfied with the installation process. (Please rate
your agreement with the above statement.)
◦ I quit using the tool before I got to this point
◦ I quit using the tool because this was a problem
◦ Strongly disagree
◦ Disagree
◦ Neither agree or disagree
◦ Agree
◦ Strongly agree
Q4.3: I was satisfied with the prerequisites that the tool needed
to work with my code. (Please rate your agreement with the
above statement.)
[Same answer options as Q4.2]
Q4.4: In my understanding the tool is sound. (Please rate your
agreement with the above statement. A sound tool only deems
secure programs secure, thus has no false negatives.)
[Same answer options as Q4.2]
Q4.5: In my understanding the tool is complete. (Please rate
your agreement with the above statement. A complete tool
only deems insecure programs insecure, thus has no false
positives.)
[Same answer options as Q4.2]
Q4.6: I understood the results the tool provided. (Please rate
your agreement with the above statement.)
[Same answer options as Q4.2]
Q4.7: I was satisfied with the documentation of the tool.
(Please rate your agreement with the above statement.)
[Same answer options as Q4.2]
Q4.8: I was satisfied with the overall usability of the tool.
(Please rate your agreement with the above statement.)
[Same answer options as Q4.2]
Q4.9: I was satisfied with the tool overall. (Please rate your
agreement with the above statement.)
[Same answer options as Q4.2]
E. Tool use: Dynamic instrumentation based
Q5.1: Use of dynamic instrumentation based tools like ctgrind,
MemSan or Timecop requires:
• Creating test harnesses.
• Annotating secret inputs in the code.
• Compiling code with a specific compiler (in the MemSan
case).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
648
and in return detects non-constant time code that was executed
(e.g. branches on secret values, or secret-dependent memory
accesses). However, it does not detect non-constant time code
that was not executed (in branches not executed due conditions
on public inputs).
Do you think you would fulfill these requirements in order
to use this type of tool?
[1 = Very unlikely, 2 = Somewhat unlikely, 3 = Neutral, 4
= Somewhat likely, 5 = Very likely]
Q5.2: Can you clarify your reasoning for the answer?
□ Not my decision
□ Not applicable to my library
□ Would like the guarantees but too much effort
□ Good tradeoff of requirements and guarantees
□ Already using one of the mentioned tools
□ Will try to use one of the mentioned tools after this survey
□ I don’t care about the guarantees
□ None of the above
Q5.3: Please expand on your answer if the above question
didn’t suffice?
[Free text field]
F. Tool use: Statistical runtime tests
Q6.1: Use of runtime statistical test-based tools like dudect
requires:
• Creating a test harness that creates a list of public inputs
and a list of representatives of two classes of secret inputs
for which runtime variation will be tested.
and in return provides statistical guarantees of constant-
timeness obtained by running the target code many times and
performing statistical analysis of the results.
Do you think you would fulfill these requirements in order
to use this type of tool?
[1 = Very unlikely, 2 = Somewhat unlikely, 3 = Neutral, 4
= Somewhat likely, 5 = Very likely]
Q6.2: Can you clarify your reasoning for the answer?
[Same answer options as Q5.2]
Q6.3: Please expand on your answer if the above question
didn’t suffice?
[Free text field]
G. Tool use: Formal analysis
Q7.1: Use of formal analysis-based tools like ct-verif requires:
• Annotation of the secret and public inputs in the source
• Running the analysis via a formal verification toolchain
code.
(i.e. SMACK).
• Might not handle arbitrarily large programs or might
require assistance in annotation of loop bounds.
and in return provides sound and complete guarantees (no false
positives or negatives) of constant-timeness (e.g. no branches
on secrets or secret-dependent memory accesses or secret
inputs to certain instructions).
Do you think you would fulfill these requirements in order
to use this type of tool?
649
[1 = Very unlikely, 2 = Somewhat unlikely, 3 = Neutral, 4
= Somewhat likely, 5 = Very likely]
Q7.2: Can you clarify your reasoning for the answer?
[Same answer options as Q5.2]
Q7.3: Please expand on your answer if the above question
didn’t suffice?
[Free text field]
H. Miscellaneous
Q8.1: Do you have any other thoughts on timing attacks that
you want to share?
[Free text field]
Q8.2: Do you have any other thoughts on or experiences with
those tools that you want to share?
[Free text field]
Q8.3: Do you have any feedback on this survey, research,
or someone you think we should talk to about this research
(ideally an email address we could reach)?
[Free text field]
Q8.4: Do you want to allow us to contact you for:
□ sending you a report of our results from the survey
□ asking possible follow-up questions
Q8.5: [Only shown if some of the options in Q8.4 was se-
lected] To allow us to contact you, please enter your preferred
email address. (If at any time you want to revoke consent to
contact you and ask us to delete your email address, please
email [de-identified for submission])
[Free text field]
APPENDIX B
TOOL AWARENESS
Tool
ctgrind [6]
ct-verif [45]
MemSan [38]
dudect [29]
timecop [40]
ct-fuzz [34]
CacheD [32]
FaCT [47]
CacheAudit [44]
FlowTracker [48]
SideTrail [50]
tis-ct [41]
DATA [35], [36]
Blazer [43]
BPT17 [31]
CT-WASM [46]
MicroWalk [39]
SC-Eliminator [53]
Binsec/Rel [30]
COCO-CHANNEL [33]
haybale-pitchfork [37]
KMO12 [49]
Themis [51]
VirtualCert [52]
ABPV13 [42]
None
Aware
27
17
8
8
8
7
6
6
5
4
3
3
2
2
2
2
2
2
1
1
1
1
1
1
0
11
% Tried to use
17
3
4
1
1
1
1
0
0
1
0
0
2
0
0
0
0
0
0
0
0
0
0
0
0
25
61.4%
38.6%
18.2%
18.2%
18.2%
15.9%
13.6%
13.6%
11.4%
9.1%
6.8%
6.8%
4.5%
4.5%
4.5%
4.5%
4.5%
4.5%
2.3%
2.3%
2.3%
2.3%
2.3%
2.3%
0.0%
25.0%
%
38.6%
6.8%
9.1%
2.3%
2.3%
2.3%
2.3%
0.0%
0.0%
2.3%
0.0%
0.0%
4.5%
0.0%
0.0%
0.0%
0.0%
0.0%
0.0%
0.0%
0.0%
0.0%
0.0%
0.0%
0.0%
56.8%
TABLE III
TOOL AWARENESS AND USE
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply.