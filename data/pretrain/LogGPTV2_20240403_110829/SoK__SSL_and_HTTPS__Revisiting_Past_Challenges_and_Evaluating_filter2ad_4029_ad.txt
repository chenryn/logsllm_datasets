### Key Concepts and Primitives for Enhancing HTTPS Security

#### Overview
Instead of focusing on specific tools, we distill the main concepts behind each tool into a set of primitives that can be combined in different ways to address security issues within the CA/B model. A summary is provided in Table I, which provides a framework for evaluation.

- **Security Properties Offered**: This column shows properties not met by the current HTTPS and CA/B model but which selected primitives (as designated in the rows) provide.
- **Evaluation Criteria**: The next set of columns evaluate the enhancement according to Security & Privacy, Deployability, and Usability.

#### Combination Logic
It is interesting to consider how the primitives (rows) of Table I can be combined to achieve broader sets of enhanced properties. Generally, if the primitives of two rows are combined, the combined primitive inherits:
- The strongest level of individual fulfillment from the Security Properties Offered columns (a logical-OR).
- The weakest level from the Evaluation of Impact on HTTPS columns (a logical-AND).

### Security Properties Offered by Primitives

1. **Detecting Certificate Substitution (Table I–column A)**
   - **MITM Attacks**: Adversaries can illegitimately obtain browser-accepted certificates for subject domains they do not control. By modifying a TLS handshake, they can replace the target's certificate with their own, allowing read/write access to encrypted content without triggering browser warnings.
   - **Primitives**: 
     - **Detects MITM**: Primitives that detect such attacks.
     - **Partial Fulfillment (◦)**: If a primitive requires risk or "blind" trust on first use (TOFU) to detect these attacks.
     - **Detects Local MITM**: If the adversary can insert themselves into connections from only a subset of clients.
     - **Protects Client Credential**: Primitives that protect against credential theft during an HTTPS MITM attack.
     - **Updatable Pins**: Primitives that resolve false-reject errors when a server updates its public key, switches issuing CAs, or uses multiple certificates.

2. **Detecting TLS Stripping (Table I–column B)**
   - **TLS Stripping Attacks**: These attacks downgrade HTTPS POSTs or GETs to HTTP.
   - **Primitives**:
     - **Detects TLS Stripping**: Primitives that can detect stripping attacks.
     - **Affirms POST-to-HTTPS**: Primitives that deter (through enforcement or a security indicator) POST requests from being submitted over HTTP.

3. **PKI Improvements (Table I–column C)**
   - **Problems with PKI Infrastructure**:
     - **Lack of Reliable Revocation**
     - **Hidden Nature of Intermediate CA Certificates**
   - **Primitives**:
     - **Responsive Revocation**: Detects a revoked certificate even if CRLs or OCSP responses are not available.
     - **Intermediate CAs Visible**: Every intermediate CA is visible to the user at any time.

### Evaluation Criteria for Impact on HTTPS

1. **Security & Privacy**
   - **No New Trusted Entity**: No new trusted parties are introduced.
   - **No New Traceability**: No new parties become aware of all (or a fraction of) sites a user visits over HTTPS.
   - **Reduces Traceability**: Eliminates entities like OCSP responders.
   - **No New Auth’n Tokens**: Does not introduce new server authentication tokens.

2. **Deployability**
   - **No Server-side Changes**: Does not require any server involvement or code changes.
   - **Deployable without DNSSEC**: Does not rely on DNSSEC.
   - **No Extra Communications**: Does not introduce extra communication rounds.
   - **Internet Scalable**: Supports enrollment from all current HTTPS servers and potentially beyond.

3. **Usability**
   - **No False-Rejects**: Does not reject legitimate server certificates.
   - **No New User Decisions**: Automated and does not require users to respond to new security cues or dialogues.
   - **Status Signalled Completely**: Users can readily determine the reason for trust.

### Summary and Evaluation of Proposed Primitives

1. **Key Pinning (Client History)**
   - **Description**: Remembers the last browser-acceptable public key encountered for a particular site and warns the user if this information changes.
   - **Benefits**: Detects certificate substitution attacks if the user has visited the site previously.
   - **Implementations**: CertLock, Firefox extension Certificate Patrol.

2. **Key Pinning (Server)**
   - **Description**: Allows the server to specify in an HTTPS header or TLS extension which certificate attributes to pin and for how long.
   - **Proposals**: HPKP, TACK.

3. **Key Pinning (Preloaded)**
   - **Description**: Browser vendors include a list of pins within the browser itself.
   - **Example**: Google Chrome pins certificates for its own domains and others by request.

4. **Key Pinning (DNS)**
   - **Description**: Servers pin their public key in their DNSSEC record for clients to validate against.
   - **Protocol**: DANE.

5. **Multipath Probing**
   - **Description**: Establishes if the client receives a certificate consistent with the certificate received by independent observers (notaries) distributed across the internet.
   - **Implementations**: Perspectives, Convergence, DoubleCheck.

6. **Channel-bound Credentials**
   - **Description**: Protects client authentication credentials by making them functionally dependent on the specifics of the HTTPS connection.
   - **Implementation**: Channel-bound cookies, origin bound certificates (OBC).

By combining these primitives, it is possible to create more robust and secure HTTPS connections, addressing the limitations of the current CA/B model.