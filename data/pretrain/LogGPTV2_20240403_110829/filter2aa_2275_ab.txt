# 概述

本文档探讨了通过HTTP状态码来检测和防御攻击者的方法。文档首先介绍了如何利用用户代理和浏览器特性来识别HTTP代理，接着讨论了如何使用特定的状态码来干扰爬虫工具，并通过实验展示了不同响应码对扫描工具的影响。最后，提出了在Web应用防火墙（WAF）中实现这些策略的建议。

## 1. 代理检测

### 1.1 Chrome 代理检测

- **Chrome** 处理代理配置的方式与其他浏览器不同。
- 当返回407状态码时，如果没有设置HTTP代理，该状态码不会被渲染。
- 如果设置了HTTP代理，可以通过此方法检测到代理的存在，但无法确定具体是哪个代理。
- 仅能检测到HTTP代理。

#### 示例
- 请求页面从服务器获取。
- 响应状态：407 代理认证。
- 如果没有 `Proxy_Authenticate` 头，且 Chrome 响应，则说明已设置HTTP代理。
- 使用 Privoxy 3.0.20 (CVE_2013_2503) 进行测试，可以提示用户输入用户名和密码，从而进一步验证代理的存在。

### 1.2 透明代理的影响

- 不仅仅是 Privoxy 受影响，任何透明代理（如 Burp, ZAP 等）都可能受到影响。
- 对于大多数情况，这不是一个严重的漏洞，因为它们按设计工作。

## 2. 干扰爬虫工具

### 2.1 爬虫的工作原理

- 访问目标URL。
- 读取链接和功能。
- 测试并继续。

#### 不同响应码的影响
- **200 OK**：如果所有响应都是200，可能会导致爬虫无限循环。
- **404 Not Found**：如果所有响应都是404，爬虫可能无法找到有效路径。
- **500 Internal Server Error**：某些爬虫会跳过这些错误。

### 2.2 扫描工具的响应

- 大多数扫描工具依赖于状态码进行初步匹配。
- 通过发送不同的状态码（如200, 404, 500, 随机码），可以干扰扫描工具的结果。

#### 实验结果
- **w3af**：
  - 基线：79个信息点，65个漏洞，0个shell，扫描时间1小时37分钟。
  - 所有响应200：无变化，扫描时间9小时56分钟。
  - 所有响应404：发现较少，44个信息点，37个漏洞，扫描时间7分钟。
  - 所有响应500：大量误报，9540个信息点，9526个漏洞，扫描时间较短。
  - 随机状态码：平均619个信息点，550个漏洞，扫描时间11分钟。

## 3. 减缓攻击者速度

### 3.1 WAF 的作用

- 当检测到攻击时，WAF 通常会返回错误代码（如403, 500等）。
- 利用浏览器和扫描工具处理不好的状态码（如1XX系列）可以减缓扫描速度。

#### HTTP Tarpit
- 当WAF检测到扫描或攻击时，将源IP加入“黑名单”。
- 重写所有响应为100、101、102等状态码，使扫描工具陷入困境。

#### 实验结果
- **Nikto**：基线2分钟18秒，发现18个；Tarpit 14小时33分钟，发现10个。
- **w3af**：基线1小时37分钟，发现65个；Tarpit 18分钟10秒，未发现。
- **Skipfish**：基线18分钟10秒，发现多个；Tarpit 5秒，未发现。
- **Acunetix**：基线1小时19分钟，发现多个；Tarpit 33分钟，发现较少。

## 4. 阻止成功攻击

### 4.1 利用状态码阻止攻击

- 通过改变状态码，可以使攻击工具（如Metasploit）难以成功。
- 例如，Metasploit 中很多地方依赖于状态码，如果状态码不符合预期，攻击将失败。

## 5. 总结与实施

### 5.1 实施方法

- **PHP**：使用 `auto_prepend_file` 来修改响应码。
- **MITMdump**：作为中间人代理修改响应码。
- **Nginx**：使用 `ngx_lua` 模块来修改响应码。
- **ModSecurity**：虽然实现较为复杂，但可以在其中添加相关规则。

### 5.2 对策

- 减少对状态码的依赖，更多依赖内容和头信息。
- 优点：更准确的匹配和智能判断。
- 缺点：可能更慢（正则表达式匹配），资源消耗更大。

## 6. 结论

- 利用状态码来干扰和防御攻击是一种有趣且有用的方法。
- 浏览器和扫描工具有其局限性，容易被愚弄。
- WAF 应采取更加主动的防御措施，而不仅仅是简单的请求拦截。
- 通过减缓已知攻击的速度，可以显著提高安全性。

## 7. 附录

- 代码和脚本可从 [GitHub](http://github.com/ChrisJohnRiley/Random_Code) 获取。
- 联系方式：[@ChrisJohnRiley](http://blog.c22.cc)