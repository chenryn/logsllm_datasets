calculate the hash function in hardware. Alternatively, the
router could select a random subset of bits of the source
and destination IP addresses to use in its hash function (it
is assumed that IPi−1 and IPi change infrequently), and
precalculate the hash results using all possible permutations
of these input bits. Of course, the bits of the addresses used
for the hash calculation would have to change periodically
to avoid attacker’s identiﬁcation of them, perhaps as part of
the mechanism described in Section 3.2.1.
EXP—or legacy—packet ﬂoods do not interfere with
DTA packets, because of the priority given to DTA trafﬁc.
However, even under these ﬂoods of packets the overall per-
formance of the router need not suffer, because the marking
calculation (or precalculated marking lookup table) can be
executed in parallel with the routing lookup in the router
because the marking does not depend on any routing deci-
sions.
3.2.1 Key Switching
Thus far, the router information inserted into packets has
been treated as static and unchanging. If this were the case,
than an attacker could simply obtain a capability through a
seemingly legitimate request, and then use that capability to
ﬂood the server with privileged trafﬁc. To meet the design
goal of allowing a server to stop a malicious ﬂow that is
already in progress, we introduce the router key switching
mechanism.
To prevent an attacker from abusing a legitimately ac-
quired capability, we require that the capabilities in our sys-
tem change over time. This is accomplished by having the
routers change their markings periodically, by changing the
keys to the hash functions they use to compute the mark-
ings. However, rather than invalidate an entire capability
and force the client and server to execute another hand-
shake simply because one router changes its key, routers
keep a window of x keys as valid at any one time, where
x > 1. When a privileged packet with an old marking
(i.e. one still present in the router’s window, but not the
most recently computed one) arrives at the router, the router
shifts the most recent marking into the packet, thus pro-
viding the server with an updated capability. The server
can then signal its client of the updated capability using the
CU and Capability Reply mechanism, if the client is
well-behaved. 5 Figure 2(c) shows window veriﬁcation and
5A server in our scheme can be implemented with or without state. A
stateless receiver does not need to keep track of the capability for each
client and would simply reply to any packet by setting the CU ﬂag and
ﬁlling in the Capability Reply ﬁeld with the value in the latest privi-
leged packet’s Capability ﬁeld from that client. If the client is deemed
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
7
marking of privileged packets.
4 Analysis
4.1 Privileged Packet Flooding
SIFF mitigates the impact of ﬂooding (or bandwidth
starvation) DoS attacks by isolating and protecting estab-
lished privileged communication from unprivileged com-
munication and enabling the receiver to downgrade priv-
ilege.
In this section, we analyze the robustness of our
scheme against ﬂoods of privileged packets with forged ca-
pabilities.
First, we derive the probability that an unauthorized
router or end-host will be able to forge (by guessing) the
appropriate capability to allow its packets to reach a poten-
tial victim. Recall from Section 3 the two parameters: x,
the number of markings each router maintains in its win-
dow; and z, the number of bits per router marking. The
probability that a randomly guessed capability will pass a
particular router is given by:
P (x, z) = 1 −
(cid:2)x
(cid:1)
1 − 1
2z
and the probability that a randomly guessed capability will
pass all d routers in a path is simply P (x, z)d.
Recall from Section 3 that the capability ﬁeld must be
large enough to accommodate the markings of all routers in
the path (plus an additional 1 bit to indicate the ﬁrst marking
in the ﬁeld), or else the markings of some routers will be
pushed out of the ﬁeld, and the capability (when used by
the sender of that packet) will not pass the inspection of
those routers whose markings were dropped. Table 1 shows
P (x, z), the probability of successfully forging a capability
to pass a single router, for reasonable values of x and z.
x = 2
0.7500
0.4375
0.2344
0.1211
x = 3
0.8750
0.5781
0.3301
0.1760
x = 4
0.9375
0.6836
0.4138
0.2275
x = 5
0.9688
0.7627
0.4871
0.2758
z = 1
z = 2
z = 3
z = 4
Table 1. Evaluation of P (x, z) (the probability
to pass one router with a forged probability),
for common values of x and z.
Choosing a value for x (the maximum number of keys
that are valid at any one time on a router) presents a trade-
malicious, the automatic reply can be stopped. Although always respond-
ing with a capability update wastes bandwidth, we present this mechanism
for those concerned with maintaining IP as stateless at the endhosts. A
stateful implementation of this system is straightforward, and preferred.
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
8
off. As we show in Section 3.2.1, x must be at least 2, other-
wise every key change would force an additional handshake
between the client and server. Because a valid capability is
one that matches any of the x capabilities in the router’s
window, small values of x provide the smallest probability
that a randomly chosen capability will pass through a router.
(Table 1 shows this effect). The value of x also affects the
validity time of a capability. The minimum validity time
(minm) is minm = (x − 1) · TK, where TK denotes the
time a key (marking) is active (valid). The maximum valid-
ity time (maxm) is maxm = x· TK. Ideally, we would like
to get a small interval for the validity time, so that we can
tightly control the validity period, so we would like large
values of x to minimize the difference between minm and
maxm. We can determine x from minm and maxm:
x =
maxm
maxm − minm
Because capabilities are only updated when the client and
server send packets to each other, the minm metric should
be set just low enough so that all handshakes and most
packet trafﬁc should be able to go back and forth from client
to server within that time period. The maxm metric deﬁnes
the longest amount of time that a connection can remain idle
and still have a valid capability. Put in another way, maxm
deﬁnes the maximum amount of time that an attacker can
ﬂood privileged packets with a particular capability, before
that capability is rejected by the network. We leave the ex-
act timing decisions to the community, and simply assume
in our experiments that x is likely to be from two to ﬁve.
champagne monitor (Urbana, IL)
f-root montior (Palo Altol, CA)
m-root monitor (Tokyo, Japan)
20000
15000
10000
5000
s
h
t
a
P
f
o
r
e
b
m
u
N
0
10
20
Path Lengths
30
Figure 3. Path length distribution for three
CAIDA skitter monitors.
In Figure 3 we show the plots of the path lengths of the
Internet maps generated at three different CAIDA skitter
monitors [9]. To analyze the performance of our scheme
in ﬁltering ﬂoods of forged privileged packets, we select
s
t
e
k
c
a
P
k
c
a
t
t
A
l
a
t
o
T
f
o
o
i
t
a
R
1
0.8
0.6
0.4
0.2
0
0
No Filtering
Filtering (z=1, x=2)
Filtering (z=2, x=2)
Filtering (z=3, x=2)
Filtering (z=4, x=2)
Ideal Filtering
1
s
t
e
k
c
a
P
k
c
a
t
t
A
l
a
t
o
T
f
o
o
i
t
a
R
0.8
0.6
0.4
0.2
No Filtering
Filtering (z=2, x=5)
Filtering (z=2, x=4)
Filtering (z=2, x=3)
Filtering (z=2, x=2)
Ideal Filtering
10
Hops from Victim
20
30
0
0
10
20
Hops from Victim
30
40
(a) Performance for various values of z, (x = 2).
(b) Performance for various values of x, (z = 3).
Figure 4. Packet ﬁltering performance for varying bits per router (z) and window sizes (x).
attackers at random from our map, and have them send a
number of packets with randomly forged capabilities. The
number of attackers and the number of packets per attacker
do not affect the outcome of our experiment, in which we
simply drop a certain percentage of attack packets at each
hop. We show the results of our experiments only from the
f-root skitter monitor; which are the most pessimistic be-
cause of the high concentration of paths close to the victim
relative to the other two monitors’ path distributions.
Figure 4(a) shows the ratio of total attack trafﬁc at each
hop from the victim for varying values of z. As expected,
without ﬁltering of any kind, eventually all attack pack-
ets arrive at the victim. Furthermore, with ideal ﬁltering
(routers automatically drop all attack packets) we see a
curve that matches the path distribution, since the attackers’
packets are immediately dropped after one hop. The SIFF
scheme performs excellently, ﬁltering out 97.14% of the at-
tack trafﬁc using only a one bit marking per router (z=1),
and ﬁltering out 100% of the attack trafﬁc (six nines) with
a marking scheme of four bits per router (z=4).
Figure 4(b) shows the same experiment with a constant
z and a varying x. As expected (and suggested by Table 1)