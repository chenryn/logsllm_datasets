3) Limitations: ConTExT can only be effective if used
correctly by the application developer, i.e., if the developer
marks all secrets as secret and does not actively leak secrets.
However, even if used correctly, there are certain limitations
which mostly result from a trade-off between performance
and security. In the following paragraphs, we point out where
application developers must take care to not accidentally leak
secrets.
ConTExT does not allow taint
to leave from registers
to the microarchitectural state. Hence, we have to stall the
pipeline if secret registers would inﬂuence the control ﬂow,
e.g., a modiﬁcation of the instruction pointer based on the
ﬂags register.
Instructions such as CRC32 might also leak secrets if a
secret value is used as input, either directly or in combination
with an attacker-known value. However, as this is again a
secret-dependent operation, the developer has to ensure that
this does not leak any secrets.
Another responsibility of the developer is that secret values
are not actively copied to memory locations not marked as non-
transient. This cannot be prevented by either the compiler or
the hardware, as it is often necessary, e.g., the tainted output
of a crypto operation (ciphertext) is not secret anymore and
can be written to normal memory.
ConTExT-light. As ConTExT-light is only a partial emulation
of ConTExT, it comes with some limitations compared to
ConTExT. The largest difference to ConTExT is that secrets
in registers, the load buffer, the store buffer, and the line
ﬁll buffer are not protected. Thus, if a secret is in one of
these microarchitectural structures, it remains susceptible to
transient-execution attacks.
B. Performance
We evaluated the performance of ConTExT-light as an
upper bound for the performance overhead of ConTExT. This
upper bound is not tight, and the actual upper bound can
be expected to be substantially lower. We also evaluate the
performance overhead of ConTExT based on our full-system
emulation in Bochs. The SPECspeed 2017 evaluation for
the baseline and of the unprotected stack of ConTExT is
performed on an i7-8700K machine while all other evaluations
are performed on an i7-8650U machine. Both systems run
Ubuntu Linux 18.04.1 with kernel 4.15.0.
We evaluated the software implications of our proposed
hardware changes using our modiﬁed version of Bochs and
a modiﬁed Linux kernel, based on kernel version 4.15. For
the Linux kernel, we only had to modify 52 lines in 9
ﬁles to support
the save and restore of register taints on
context switches. These small changes result in a negligible
performance overhead on context switches, e.g., for syscalls.
The latency of syscalls increases by a constant value, which
is 48 cycles (averaged over 500 000 syscall invocations). On
a standard Ubuntu Linux installation, we observed between
3000 and 5000 syscalls per second on average while perform-
ing regular ofﬁce tasks. On our test system, we observe an
12
TABLE II: Performance evaluation of the unprotected stack
of ConTExT using the SPECspeed 2017 integer benchmark.
The baseline was compiled with the unmodiﬁed compiler, the
ConTExT run uses our modiﬁed LLVM compiler.
Benchmark
600.perlbench s
602.gcc s
605.mcf s
620.omnetpp s
623.xalancbmk s
625.x264 s
631.deepsjeng s
641.leela s
648.exchange2 s
657.xz s
Average
Baseline
SPEC Score
ConTExT
Overhead
[%]
7.03
11.90
9.06
5.07
6.06
9.25
5.26
4.71
12.10
6.86
11.80
9.16
4.81
5.95
9.25
5.22
4.64
would require Fortran runtime
12.10
+2.42
+0.84
−1.10
+5.13
+1.82
0.00
+0.76
+1.48
0.00
+1.26
overhead on the system load of around 0.01 % at this syscall
rate. The highest syscall rates observed for real-world use
cases at Netﬂix was reported to be around 50 000 syscalls per
second [28]. On our test system, we observe an overhead on
the system load of around 0.13 % at this syscall rate.
1) Compiler Extension: We evaluated the impact of the
unprotected stack of ConTExT using the SPECspeed 2017
integer benchmark. Table II shows that similarly to the origi-
nal SafeStack implementation [52], the resulting performance
overhead is 1.26 % on average and, in the worst case, 5.13 %.
These results are not surprising as only addresses of
variables change. This only requires very little runtime code
for maintaining a second stack pointer. Thus, the small per-
formance overhead is mostly due to the setup time for the
additional non-transient stack.
We furthermore evaluated the performance impact intro-
duced by the non-transient stack. As a baseline, we consider
the case where we only have one non-transient stack and
compare it to our design where the non-transient stack is only
an additional stack to the regular unprotected one. Based on
Intel Pin [61], we implemented our own plugin to trace all
memory accesses. With the plugin, we evaluated how much
memory the non-transient stack consumes. For this purpose,
we ran the GNU Core Utilities, once compiled with the
unmodiﬁed compiler, and once compiled with our extended
LLVM compiler. Even for these lightweight applications, we
measured a reduction of average non-transient stack mem-
ory by 42.74 %. The modiﬁed LLVM compiler sustained an
average non-transient stack usage of 4.7 kB, whereas the
applications compiled with a vanilla compiler consumed, on
average, 8.2 kB on the single non-transient stack. Moreover,
for 64 out of the 91 tested applications (i.e., 70.3 %), the
compiler extension reduced the non-transient stack usage to
only 3528 B, which is below the smallest memory region that
can be set non-transient, i.e., the size of one virtual page
(4 kB). The reason for these reductions is that the stack is
not used anymore for storing user-deﬁned variables. Hence,
the compiler extension makes it practical to deploy ConTExT
with the additional non-transient stack.
2) ConTExT-light: We evaluated the performance impact
of ConTExT-light, both for unmodiﬁed applications as well
as applications where we annotate secret values as such.
For unmodiﬁed applications, we do not expect any runtime
overhead, except for a constant initialization overhead.
We conﬁrmed this assumption experimentally. The average
initialization overhead when starting an application with our
current non-optimized implementation is 0.15 ms.
For applications with annotated secret values, there is a
performance overhead for architectural accesses to the secret.
Without ConTExT-light, the secret could be stored in the L1,
L2, or L3 cache, or the main memory. Hence, the maximum
overhead for a memory access is the difference between an
L1 cache hit and a cache miss. The minimum overhead for
a memory access is zero (i.e., cache miss in both cases). In
practice, we often see a cache miss instead of an L3 cache hit,
which makes an average overhead of 100 cycles on our test
system.
To evaluate the real-world performance, we applied
ConTExT-light to various real and artiﬁcal applications.4 We
ﬁrst evaluate ConTExT-light on pure cryptographic algorithms,
as they are the main target for Spectre attacks and thus require
protection. In addition to performance evaluations on pure
cryptographic algorithms, we also evaluate the performance of
real-world application when annotating secrets. In all cases, the
effort to identify and annotate secrets only required changing
between 3 and 27 lines in the source code.
OpenSSL RSA. We evaluated the performance by encrypt-
ing a message using OpenSSL’s RSA. For this, we pro-
vide OpenSSL with the secure heap allocation functions of
ConTExT-light. We veriﬁed that indeed all memory allocations
in OpenSSL use the secure functions using ltrace and
single-stepping. The performance overhead we measured when
annotating all buffers that may (temporarily) contain secrets in
an RSA encryption is 71.14 % (± 4.66 %, n = 10 000). This
is not surprising as RSA performs many in-place operations in
one secure buffer, and hence, higher overheads are expected.
AES. As a second cryptographic algorithm, we evaluated
AES, both in OpenSSL and in a custom AES-NI implemen-
tation. For our AES-NI implementation, we annotate the AES
key as well as the intermediate round keys as secrets. For AES-
NI, no other secret values, or values derived from secrets, have
to be stored in memory. As AES-NI expects all values in the
xmm registers, there is only the initial performance overhead
of copying the ConTExT-light-protected keys to the registers.
As this is a one-time operation, the overhead of 122 cycles
(n = 10 000 000, σ¯x = 0.00), is negligible when performing
multiple encryptions or decryptions. For the encryption and
decryption step, there is no performance overhead at all. We
veriﬁed this by encrypting and decrypting a block 10 000 000
times. Both with and without ConTExT-light, the encryption
and decryption took 46 cycles per 16-byte block. While the
application is an artiﬁcial application, it shows that ConTExT-
light-protected cryptographic algorithms can be implemented
without any performance overhead.
To analyze the performance overhead of ConTExT-light
on a state-of-the-art AES implementation, we used OpenSSL’s
4The changes to existing applications and the artiﬁcal applications can be
found in our GitHub repository https://github.com/IAIK/contextlight.
13
AES-128-CBC. Similarly to the AES-NI example, we mea-
sured the number of cycles it takes to encrypt and decrypt the
same block. Without ConTExT-light, it takes on average 1371
cycles (n = 100 000, σ¯x = 36.90). For the protected variant,
we annotated the key as secret, and for simplicity, the entire in-
ternal encryption and decryption context EVP_CIPHER_CTX
of OpenSSL. While this protects more variables than necessary,
it ensures that all secrets in the context of the encryption and
decryption are marked as uncachable. Even then, the overhead
is not
too drastic with an average number of cycles for
encryption and decryption of 5196 (n = 100 000, σ¯x = 32.82).
This na¨ıve approach only requires to provide ConTExT-light’s
implementation of the heap management to OpenSSL using
CRYPTO_set_mem_functions and annotating the key us-
ing the nospec attribute. We veriﬁed using GDB that all
occurrences of the secret key are only stored in uncachable
memory. The result is that secret AES keys cannot be extracted
anymore using Spectre attacks, with a performance overhead
of 338 % (n = 100 000, σ¯x = 0.24).
However, as we showed with the AES-NI example, this can
still be improved by modifying the OpenSSL library itself, and
ensuring that only sensitive data is marked as such.
OpenSSH.
is the private
key which is stored in memory and which is susceptible to
Spectre attacks.5 Hence, to evaluate the impact of protecting
the private key with ConTExT-light, we evaluate OpenSSH
with our modiﬁcations.
the main asset
For OpenSSH,
Conveniently, OpenSSH already encapsulates the private
key into its own global variable sensitive_data. The
variable is a structure of type Sensitive which can store an
arbitrary number of SSH keys. The private keys are stored in
sshbufs and referenced by the sensitive_data variable.
Hence,
to apply ConTExT-light, we annotated the global
variable and changed the heap allocations in the sshbuf
functions to use the heap-manipulation functions provided by
ConTExT-light. This resulted in a change of 14 lines of code.
To benchmark the impact of the modiﬁcation, we analyzed
the time it takes to connect to an SSH server, as well as how
long it takes to transfer a ﬁle from a server. The connection
time, which includes the initialization time of ConTExT-light,
increased on average by 24.7 % (n = 1000, σ¯x = 0.038)
from 369 ms to 459 ms. However, this amortizes when, e.g.,
transferring ﬁles. When copying a 128 MB ﬁle over SSH in
a local network, this overhead is only 5.4 % (n = 1000,
σ¯x = 0.006) anymore. Furthermore, as soon as the connection
is established, there is no performance impact of ConTExT-
light noticeable.
VeraCrypt. Gruss et al. [33] presented a Meltdown attack
on the master password of VeraCrypt, the successor of True-
Crypt. As we expect this attack to be possible with Spectre
assuming a suitable gadget is found, we show that ConTExT-
light can protect the key material in VeraCrypt. VeraCrypt
uses a SecureBuffer class to store sensitive data, such
as the master password. Such a SecureBuffer is used,
amongst others, for the header key and the encrypted volume
header. Hence,
instances of
SecureBuffer using ConTExT-light. This requires only 3
lines of additional code.
to protect all
it
is sufﬁcient
5https://marc.info/?l=openbsd-cvs&m=156109087822676&w=2
14
As the password and keys are used for mounting and
encrypting data, we analyze the performance overhead for
these operations introduced by ConTExT-light. For mounting
an encrypted container, the average time increases by 3.21 %
(n = 1000, σ¯x = 0.001) from 1.59 s to 1.64 s. To test the
encryption performance, we copy 4 ﬁles each with 128 MB
to the mounted container. In this experiment, we measure an
average overhead of 0.13 % (n = 200, σ¯x = 0.006), increasing
the time for the ﬁle operations by 0.6 ms. The reason for
this small overhead is that the bottleneck is the SSD and not
the encryption. On our i7-8650U, we achieve an encryption
speed with AES of 4.6 GB/s, which is signiﬁcantly faster than
the SSD write speed. Hence, for ﬁle operations, there is no
observable performance overhead caused by ConTExT-light.
OATH One Time Password Tool. The OATH One Time
Password tool oathtool is used to generate one-time pass-
words for second-factor authentication. This tool supports the
Time-based One-time Password algorithm (TOTP), which is
used e.g., for Google’s or Facebook’s two-factor authentica-