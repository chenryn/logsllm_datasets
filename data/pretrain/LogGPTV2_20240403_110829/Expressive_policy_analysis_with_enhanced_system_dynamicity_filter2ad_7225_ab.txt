### Limitations and Enhancements

The current framework has several limitations. Notably, it does not support obligation policies, and there is no provision for policies that simultaneously permit and deny a given access request—a direct consequence of XACML’s combination rules. We consider the support for such policies, especially the latter, as essential for any generic policy analysis tool. Additionally, the query language for expressing properties is somewhat cumbersome, though the authors acknowledge this as an area for future improvement. While environmental constraints can be included, there is no explicit dynamic system model, which means the analysis does not show system traces and policy decisions leading to properties of interest.

In [9, 10], the authors define a simple yet powerful framework for representing and reasoning about access control policy composition. The semantics for access requests are four-valued: permit, deny, undefined, and conflict. Analysis is performed by transforming properties to be checked into constraints that can be fed to a model-checker. This approach supports coverage-gap, modality conflict, and policy comparison analysis. The focus of this work is on defining an expressive, generic semantics for policy composition and related analysis, without a system model. By contrast, our two-pronged approach (policies and systems) aims to provide diagnostic information about which system traces can lead to specific policy properties. We also consider a broader class of policies, including obligation policies.

### Policy Analysis Language \( L_\pi \)

Table 1 outlines the predicates used in the policy analysis language \( L_\pi \):

| Predicate | Description |
| --- | --- |
| `req(Sub, Tar, Act, T)` | Input regulatory request for subject `Sub` to perform action `Act` on target `Tar` at time `T`. |
| `do(Sub, Tar, Act, T)` | Output regulatory action for subject `Sub` to perform action `Act` on target `Tar` at time `T`. |
| `deny(Sub, Tar, Act, T)` | Denial of action `Act` by subject `Sub` on target `Tar` at time `T`. |
| `permitted(Sub, Tar, Act, T)` | State where action `Act` by subject `Sub` on target `Tar` is permitted at time `T`. |
| `obl(Sub, Tar, Act, Ts, Te, T)` | Obligation for subject `Sub` to perform action `Act` on target `Tar` from time `Ts` to `Te` at time `T`. |
| `fulfilled(Sub, Tar, Act, Ts, Te, T)` | Fulfillment of the obligation for subject `Sub` to perform action `Act` on target `Tar` from time `Ts` to `Te` at time `T`. |
| `violated(Sub, Tar, Act, Ts, Te, T)` | Violation of the obligation for subject `Sub` to perform action `Act` on target `Tar` from time `Ts` to `Te` at time `T`. |
| `cease obl(Sub, Tar, Act, Tinit, Ts, Te, T)` | Cessation of the obligation for subject `Sub` to perform action `Act` on target `Tar` from time `Ts` to `Te` at time `T`, initiated at `Tinit`. |

### Policies

#### 3.1 Preliminaries

Our operational model follows the architecture and operation of XACML [30]. It includes a policy component with policy decision points (PDP) and policy enforcement points (PEP), and the system to which policies refer and modify. The PDP has access to a policy repository and makes authorization decisions in response to requests for a subject to perform an action on a target. These decisions are enforced by the PEP. The PDP also monitors whether obligations of subjects to perform actions have been met. Systems transition between states based on the occurrence of actions and events, some controlled by policies and some not.

We use many-sorted first-order predicate logic as our base language, clearly distinguishing the policy representation language from the domain description language. This allows us to separate policy representations from system representations and compare the implementation of a policy in different systems easily. The policy representation language, \( L_\pi \), includes sorts for Subjects, Targets, and Actions, along with a sort and constants for Time, represented using non-negative reals. Standard arithmetical functions (+, −, /, *) and relations (=, ≠, <, >) are included.

#### 3.2 Authorization Rules

An authorization rule is a formula:
\[ [\text{permitted/denied}](\text{Sub}, \text{Tar}, \text{Act}, T) \leftarrow L_1, \ldots, L_m, C_1, \ldots, C_n \]
where:
1. The \( L_i \) are atoms from \( L_\pi \cup L_D^{\text{stat}} \cup \{\text{holdsAt}, \text{happens}, \text{broken}\} \), possibly preceded by negation-by-failure `not`.
2. The \( C_i \) are time constraints.
3. Any variable appearing in a time constraint must also appear elsewhere.
4. For each \( L_i \notin L_D^{\text{stat}} \), \( C_1 \land \cdots \land C_n \models T_i \leq T \); if \( C_1 \land \cdots \land C_n \models T_i = T \), then \( L_i \) must not be an output regulatory predicate, and if \( L_i \in L_D^{\text{EC}} \), it should be `holdsAt` or `broken`.

A rule with `permitted` in the head is a positive authorization rule; otherwise, it is a negative authorization rule.

**Example 1:**
"A mobile node may delete classified data if it sends a notification to the supplier of the data 10 minutes in advance, and the supplier does not respond to the notification asking the node to retain the data."
\[ \text{permitted}(N, D, \text{delete}, T) \leftarrow \text{holdsAt}(\text{fileDesc}(D, \text{class}), T_n), T = T_n + 10, \text{holdsAt}(\text{owner}(D, O), T_n), \text{do}(N, O, \text{notify}(\text{delete}, D), T_n), \neg \text{reqInBetween}(O, N, \text{retain}(D), T_n, T). \]

**Example 2:**
"A person cannot assist in a medical situation once he has taken part in surveying a contaminated area."
\[ \text{denied}(\text{Sub}, M1, \text{assist}, T) \leftarrow \text{do}(\text{Sub}, M2, \text{assist}, T'), T' < T, \text{holdsAt}(\text{activity type}(M1, \text{medical}), T), \text{holdsAt}(\text{activity type}(M2, \text{survey}(A)), T'), \text{holdsAt}(\text{area classify}(A, \text{contaminated}), T'). \]

#### 3.3 Policy Regulation Rules

Policy regulation rules have `do` or `deny` in the head and a body as defined in Definition 2. Examples include:

- **Basic Availability:**
  \[ \text{do}(\text{Sub}, \text{Tar}, \text{Act}, T) \leftarrow \text{req}(\text{Sub}, \text{Tar}, \text{Act}, T), \text{permitted}(\text{Sub}, \text{Tar}, \text{Act}, T). \]

- **Positive Availability:**
  \[ \text{do}(\text{Sub}, \text{Tar}, \text{Act}, T) \leftarrow \text{req}(\text{Sub}, \text{Tar}, \text{Act}, T), \neg \text{denied}(\text{Sub}, \text{Tar}, \text{Act}, T). \]

- **Negative Availability:**
  \[ \text{deny}(\text{Sub}, \text{Tar}, \text{Act}, T) \leftarrow \text{req}(\text{Sub}, \text{Tar}, \text{Act}, T), \text{denied}(\text{Sub}, \text{Tar}, \text{Act}, T). \]

#### 3.4 Obligations

Obligations are represented as a subject's duty to perform an action on a target within a specified time period. An obligation policy rule is a formula:
\[ \text{obl}(\text{Sub}, \text{Tar}, \text{Act}, T_s, T_e, T) \leftarrow L_1, \ldots, L_m, C_1, \ldots, C_n \]
with conditions 1–4 as in Definition 2, and \( T_s \) and \( T_e \) being variables of type Time.

Two domain-independent rules define the fulfillment and violation of an obligation:
\[ \text{fulfilled}(\text{Sub}, \text{Tar}, \text{Act}, T_s, T_e, T) \leftarrow \text{obl}(\text{Sub}, \text{Tar}, \text{Act}, T_s, T_e, T_{\text{init}}), \text{do}(\text{Sub}, \text{Tar}, \text{Act}, T'), \neg \text{cease obl}(\text{Sub}, \text{Tar}, \text{Act}, T_{\text{init}}, T_s, T_e, T'), T_{\text{init}} \leq T_s \leq T' < T_e, T' < T. \]
\[ \text{violated}(\text{Sub}, \text{Tar}, \text{Act}, T_s, T_e, T) \leftarrow \text{obl}(\text{Sub}, \text{Tar}, \text{Act}, T_s, T_e, T_{\text{init}}), \neg \text{cease obl}(\text{Sub}, \text{Tar}, \text{Act}, T_{\text{init}}, T_s, T_e, T_e), T_{\text{init}} \leq T_s < T_e \leq T. \]

An obligation is fulfilled when the subject performs the required action, and it is violated if the action is not performed within the specified period.