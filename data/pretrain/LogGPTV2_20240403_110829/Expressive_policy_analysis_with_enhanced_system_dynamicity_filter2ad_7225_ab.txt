a number of limitations. Obligation policies are not sup-
ported, and there is no scope for policies that simultane-
ously permit and deny a given access request (a direct and
oft-noted consequence of the nature of XACML’s combina-
tion rules). We regard support, especially of the latter, as
essential for any generic policy analysis tool. The query lan-
guage (for expressing properties) is somewhat cumbersome,
though the authors acknowledge this as a theme for future
work. Further, though environmental constraints can be in-
cluded, there is no explicit dynamic system model, and so
analysis does not show system traces and policy decisions
which lead to properties of interest.
Finally, in [9, 10] the authors deﬁne a simple but power-
ful framework for representing and reasoning about access-
control policy composition. The semantics for access re-
quests is four-valued: permit, deny, undeﬁned, and con-
ﬂict. Analysis is performed by transforming properties to
be checked into constraints which can be fed to a model-
checker; the approach can support coverage-gap, modality
conﬂict, and policy comparison analysis. The emphasis of
this work is on the deﬁnition of an expressive, generic seman-
tics for policy composition and related analysis, and thus
Input regulatory
req(Sub, Tar, Act, T )
Output regulatory
do(Sub, Tar, Act, T )
deny(Sub, Tar, Act, T )
State Regulatory
permitted(Sub, Tar, Act, T )
obl(Sub, Tar, Act, Ts, Te, T )
fulﬁlled(Sub, Tar, Act, Ts, Te, T )
violated(Sub, Tar, Act, Ts, Te, T )
cease obl(Sub, Tar, Act, Tinit, Ts, Te, T )
denied(Sub, Tar, Act, T )
Table 1: Policy analysis language Lπ: the predicates
there is no system model—the system governed by a policy
is treated as a ‘black box’. By contrast, our two-pronged
approach (policies and systems) is intended to enable the
output of diagnositic information about which system traces
can give rise to which policy properties. We also consider a
wider class of policies, including obligation policies.
3. POLICIES
3.1 Preliminaries
Our operational model broadly follows the architecture
and operation of XACML [30]. There is a policy compo-
nent, consisting of policy decision and enforcement points
(PDP/PEP), and the system to which policies refer and
which they modify. The PDP has access to a policy repos-
itory. Authorization decisions are made in response to re-
quests for a subject to perform an action on a target, using
the policies, and these decisions are then enforced by the
PEP. The PDP also monitors whether obligations of sub-
jects to perform actions have been met or not. Systems
move between states depending on the occurrence of actions
and events—some controlled by policies, some not.
We use many-sorted ﬁrst-order predicate logic as our base
language, and clearly distinguish the policy representation
language from the domain description language. This al-
lows us to detach policy representations from system repre-
sentations, and compare the implementation of a policy in
diﬀerent systems easily. The policy representation language,
Lπ, includes sorts for the Subjects, Targets and Actions men-
tioned in policies, together with a sort and constants for
Time, which we represent using the non-negative reals. Stan-
dard arithmetical functions (+, −, /, ∗) and relations (=,
6=, , >.
y
Note that in this paper, the time T in the head of the rule
is a variable, rather than a ﬁxed time—this means that the
same rule can be applied whenever the conditions in the
body become true.
We represent this as follows:
permitted(N, D, delete, T ) ←
holdsAt(ﬁleDesc(D, class), Tn), T = Tn + 10,
holdsAt(owner(D, O), Tn),
do(N, O, notify(delete, D), Tn),
not reqInBetween(O, N, retain(D), Tn, T ).
The predicate reqInBetween is related to the operator Since
of temporal logics [19]; we have found such a predicate useful
on several occasions. To capture its semantics, the following
rule is always included in our framework:
reqInBetween(Sub, Tar, Act, T ′, T ) ←
req(Sub, Tar, Act, Tr), T ′
6 Tr 6 T.
An instance reqInBetween(Sub, Tar, Act, 0, T ) means that a
request (with the relevant parameters) was made at some
time before T ; this is related to the modal temporal operator
expressing that a property held at some previous time.
Separation of duty (SoD) [33] and Chinese Wall policies [8]
are often used to demonstrate the expressiveness of security
policy languages. Our formalism can represent all policies
of this type we have examined. Chinese Wall scenarios can
be modelled easily, by considering the system history.
Example 2 “A person cannot assist in a medical situation
once he has taken part in surveying a contaminated area.” y
Deﬁnition 2 An authorization rule is a formula
This can be represented as follows:
[permitted/denied](Sub, Tar, Act, T ) ←
L1, . . . , Lm, C1, . . . , Cn.
1. the Li are atoms taken from the set
Lπ ∪ LD
stat ∪ {holdsAt, happens, broken}2
possibly preceded by the negation-by-failure not; the Ci
are time constraints;
2. any variable appearing in a time constraint must also
appear somewhere other than in a time constraint;
3. Sub, Tar, Act, T are terms of type Subject, Target,
Action and Time respectively;
4. for the time argument Ti of each Li 6∈ LD
stat, we must
have C1 ∧· · ·∧Cn |= Ti 6 T ;3 if C1 ∧· · ·∧Cn |= Ti = T
then the Li must not be an output regulatory predicate
and if in addition Li ∈ LD
EC, then it should either be
holdsAt or broken.
Where such a rule has ‘permitted’ in the head, it is a posi-
tive authorization rule; otherwise, it is known as a negative
authorization rule. (Additional constraints of local stratiﬁ-
cation will be imposed later.)
y
Condition 4 is necessary to ensure that authorizations do
not depend on ‘future’ properties.
Example 1 “A mobile node may delete classiﬁed data if it
sends a notiﬁcation to the supplier of the data 10 minutes in
advance, and the supplier does not respond to the notiﬁcation
asking the node to retain the data.”
y
2For the meaning of these predicates, see Section 3.4.
3We use |= standardly, as FOL semantic entailment.
denied(Sub, M1, assist, T ) ←
do(Sub, M2, assist, T ′), T ′ < T,
holdsAt(activity type(M1, medical), T ),
holdsAt(activity type(M2, survey(A)), T ′),
holdsAt(area classify(A, contaminated), T ′).
Simple dynamic SoD policies that deﬁne mutually exclusive
role activation can be handled as follows:
denied (Subject, roles, activate(role a), T ) ←
holdsAt(isActivated (Subject, role b), T ).
denied (Subject, roles, activate(role b), T ) ←
holdsAt(isActivated (Subject, role a), T ).
Similar encodings can be done for other classes of SoD policy.
When gathering together authorization rules to form an
authorization policy, it is normal to include a number of
more general rules. These can be used to state whether a
request to perform an action is accepted (and the action
performed) by default if there is no explicit permission in
the policy rules; or whether explicit permission is required;
what response (if any) should be given if an action is denied,
and so on. We see it as a virtue of our framework that many
diﬀerent rules which embody the action of the PEP can be
represented, and that no one approach is ﬁxed as part of
the formalism. This ﬂexibility is crucial if we need to cover
the behaviour of diﬀerent policy systems in heterogeneous
environments. Consider the three example availability rules
in Table 2. The basic availability rule is more stringent: an
action is permitted by the PEP only when it has been posi-
tively permitted by the PDP—similar to [26]. The positive
do(Sub, Tar, Act, T ) ←
req(Sub, Tar, Act, T ), permitted(Sub, Tar, Act, T ).
Basic availability
do(Sub, Tar, Act, T ) ←
req(Sub, Tar, Act, T ), not denied(Sub, Tar, Act, T ).
Positive availability
deny(Sub, Tar, Act, T ) ←
req(Sub, Tar, Act, T ), denied(Sub, Tar, Act, T ).
Negative availability
Table 2: Policy Regulation Rules
availability rule is less strict: actions are executed so long as
they have not been expressly denied by the policy rules. The
negative availability rule states that an output deny predi-
cate is true whenever an action is explicitly denied by the
policy rules. The eﬀects of this deny predicate can then be
modelled—a typical use may be to cause logs of denials of
requests to be kept in the system.
Deﬁnition 3 A policy regulation rule has do or deny in the
head and a body given as in Deﬁnition 2.
y
Many more policy regulation rules are possible than those
given as examples in Table 2; all are optional inclusions in
an authorization policy.
Deﬁnition 4 An authorization policy is a set Π of autho-
rization rules, with the deﬁnition of reqInBetween, and pol-
icy regulation rules, such that Π is locally stratiﬁed.4
y
Notice that it is possible to add general authorization rules
to a policy, enabling a representation of very ﬁne-grained
defaults controlling responses to requests. For example, if
a user belongs to the root system group, one may want to
permit all the actions of that user by default, unless they
are explicitly denied:
permitted(Sub, Tar, Act, T ) ←
group(Sub, root), not denied(Sub, Tar, Act, T ).
3.3 Obligations
The obligations we represent are on a subject to perform
an action on a target, a class which includes a large number
of practical obligation policies [21]. As in most (if not all)
deontic logics, obligations may be fulﬁlled or not, allowing us
to represent the behaviour of systems of which humans are
a part. We present a simpliﬁed version of our treatment of
obligations here, in which the period during which an action
should be performed is delimited by explicit reference to
time. Our general language also allows the user to specify
events or actions as these delimiters.
Deﬁnition 5 An obligation policy rule is a formula
obl(Sub, Tar, Act, Ts, Te, T ) ← L1, . . . , Lm, C1, . . . , Cn.
where the conditions 1–4 as for Deﬁnition 2 hold, with the
addition that Ts and Te should be variables of type Time.
(Ts < Te is not required, but sensible obligation policy rules
will always include constraints which make this true.)
y
4A set of rules is locally stratiﬁed if in the set of all ground
instances of the rules (i.e. where all variables are replaced by
all their possible values) there is no head of a rule that de-
pends directly or indirectly on the negation of itself. Testing
for local stratiﬁcation is, in general, computationally hard;
but large classes of rules can be identiﬁed as locally stratiﬁed
easily based on the time index [29].
Two domain-independent rules accompany the obligation
rules, deﬁning the fulﬁllment and the violation of an obliga-
tion:
fulﬁlled(Sub, Tar, Act, Ts, Te, T ) ←
obl(Sub, Tar, Act, Ts, Te, Tinit), do(Sub, Tar, Act, T ′),
not cease obl(Sub, Tar, Act, Tinit, Ts, Te, T ′),
Tinit 6 Ts 6 T ′ < Te, T ′ < T.
(1)
violated(Sub, Tar, Act, Ts, Te, T ) ←
obl(Sub, Tar, Act, Ts, Te, Tinit),
not cease obl(Sub, Tar, Act, Tinit, Ts, Te, Te),
(2)
Tinit 6 Ts < Te 6 T.
An obligation is fulﬁlled when the action a subject has been
obliged to perform is executed (notice that the do in the
body of the rule here means that the action must be al-
lowed by the authorization policies). An obligation is vio-