graphs. Jensen et al. [46] built event sequences based upon
concolic execution and Android GUI model. kudzu [66] devel-
oped a GUI explorer that randomly searches Web event space.
SymJS [51] discovered Web event sequences via a feedback
directed exploration and dynamic taint analysis. SymRT [52]
performed timing analysis for real-time Java systems based
upon symbolic execution and model checking. Lee et al. [48]
proposed to create test sequences from Modechart speciﬁca-
tions. In contrast, VETPLC can automatically discover both
event ordering and timing without predeﬁned speciﬁcations.
Event Causality. Orpheus [34] modeled program behaviors
based upon CPS events, and applied these models to anomaly
detection. Zhang et al. [68] detected malware via the infer-
ence of triggering relations between events in network data.
Compared to the prior work which studied qualitative event
causalities, VETPLC takes a step further and quantitatively
recovers event timings that are critical for PLC code analysis.
X. CONCLUSION
We propose VETPLC, a novel approach to automatically
produce timed event sequences for PLC code vetting. The
evaluation of our prototype on two real-life ICS testbeds shows
that VETPLC can effectively generate event sequences which
automatically lead to hidden safety violations.
ACKNOWLEDGMENT
We would like to thank anonymous reviewers and our
shepherd, Prof. Daphne Yao, for their feedback in ﬁnalizing
this paper. This research was supported in part by NSF
Grant CNS-1544613, CNS-1544901, CNS-1544678 and CNS-
1718952. Any opinions, ﬁndings, and conclusions made in this
material are those of the authors and do not necessarily reﬂect
the views of the funding agency.
(cid:22)(cid:20)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] “ABB RAPID Veteran, a few question about FANUC KAREL,”
https://www.robot-forum.com/robotforum/fanuc-robot-forum/abb-
rapid-veteran-a-few-question-about-fanuc-karel/.
[2] “Antlr,” http://www.antlr.org/.
[3] “Clang: a C language family frontend for LLVM,” https://clang.llvm.
org/.
[4] “Cloud9 - Automated Software Testing at Scale,” http://cloud9.epﬂ.ch/.
[5] “Conveyor Belts Optimisation,” https://www.standard-industrie.com/
en/wp-content/themes/standardindustrie/img/CONVEYOR BELT
OPTIMISATION.pdf.
[6] “Conveyors and Falling Item Prevention,” http://www.cisco-eagle.com/
blog/2015/08/20/conveyors-and-falling-item-prevention/.
[7] “Cooperation
and Control: A Systems
Perspective,”
https:
//me.engin.umich.edu/news-events/news/cooperation-and-control-
systems-perspective.
[8] “Ethernet/ip,” https://en.wikipedia.org/wiki/EtherNet/IP.
[9] “Foundations
http://
martinengineerings3.s3.amazonaws.com/www.martin-eng.de/download/
FoundationsForConveyorSafetyBook.pdf.
Conveyor
Book,”
Safety
For
[10] “IEC 61131-3,” https://en.wikipedia.org/wiki/IEC 61131-3.
[11] “Industrial Control Systems Killed Once And Will Again, Experts
Warn,” https://www.wired.com/2008/04/industrial-cont/.
[12] “Industry 4.0,” https://en.wikipedia.org/wiki/Industry 4.0.
[13] “MATIEC -
IEC 61131-3 compiler,” https://bitbucket.org/mjsousa/
matiec.
[14] “MATIEC examples,” https://github.com/Felipeasg/matiec examples.
[15] “NuSMV: a new symbolic model checker,” http://nusmv.fbk.eu/.
[16] “OpenPLC Project,” http://www.openplcproject.com/.
[17] “PLC Manufacturer Rankings,” http://automationprimer.com/2013/10/
[18] “Programmable
Logic
Controller,”
https://en.wikipedia.org/wiki/
06/plc-manufacturer-rankings/.
Programmable logic controller.
[19] “Robot
kills worker
at Volkswagen
plant
in Germany,”
https://www.theguardian.com/world/2015/jul/02/robot-kills-worker-
at-volkswagen-plant-in-germany.
[20] “Structured Text Tutorial to Expand Your PLC Programming Skills,”
http://www.plcacademy.com/structured-text-tutorial/.
[21] “UPPAAL Home,” http://www.uppaal.org/.
[22] “ANSI/RIA R15. 06: 2012 Safety Requirements for Industrial Robots
and Robot Systems,” Ann Arbor: Robotic Industries Association, 2012.
[23] M. Abrams and J. Weiss, “Malicious Control System Cyber Security
Attack Case Study – Maroochy Water Services, Australia,” https://www.
mitre.org/sites/default/ﬁles/pdf/08 1145.pdf.
[24] A. Aiken, M. F¨ahndrich, and Z. Su, “Detecting Races in Relay Ladder
Logic Programs,” in Tools and Algorithms for the Construction and
Analysis of Systems, 1998.
[25] M. R. Aliabadi, A. A. Kamath, J. Gascon-Samson, and K. Pattabiraman,
“ARTINALI: Dynamic Invariant Detection for Cyber-physical System
Security,” in Proceedings of the 2017 11th Joint Meeting on Foundations
of Software Engineering (ESEC/FSE 2017), Sep 2017.
[26] R. Alur and T. A. Henzinger, “A Really Temporal Logic,” J. ACM,
vol. 41, no. 1, Jan. 1994.
[27] S. Anand, M. Naik, M. J. Harrold, and H. Yang, “Automated Concolic
Testing of Smartphone Apps,” in Proceedings of the ACM SIGSOFT 20th
International Symposium on the Foundations of Software Engineering
(FSE ’12), 2012.
[28] B. Beckert, M. Ulbrich, B. Vogel-Heuser, and A. Weigl, “Regression
Veriﬁcation for Programmable Logic Controller Software,” in Formal
Methods and Software Engineering, 2015.
[29] I. Beschastnikh, Y. Brun, S. Schneider, M. Sloan, and M. D. Ernst,
“Leveraging Existing Instrumentation to Automatically Infer Invariant-
constrained Models,” in Proceedings of the 19th ACM SIGSOFT Sym-
posium and the 13th European Conference on Foundations of Software
Engineering (ESEC/FSE ’11), Sep 2011.
[30] S. Biallas, J. Brauer, and S. Kowalewski, “Arcade.PLC: A Veriﬁcation
Platform for Programmable Logic Controllers,” in Proceedings of the
27th IEEE/ACM International Conference on Automated Software En-
gineering (ASE 2012), Sep 2012.
[31] G. Canet, S. Coufﬁn, J.-J. Lesage, A. Petit, and P. Schnoebelen,
“Towards the Automatic Veriﬁcation of PLC Programs Written in
Instruction List,” in Proceedings of the IEEE International Conference
on Systems, Man and Cybernetics, Feb 2000.
[32] M. Chai and B.-H. Schlingloff, “A Rewriting based Monitoring Algo-
rithm for TPTL,” vol. 1032, pp. 61–72, Jan 2013.
[33] Y. Chen, C. M. Poskitt, and J. Sun, “Learning from Mutants: Using Code
Mutation to Learn and Monitor Invariants of a Cyber-Physical System,”
in 2018 IEEE Symposium on Security and Privacy (Oakland’18), May
2018.
[34] L. Cheng, K. Tian, and D. D. Yao, “Orpheus: Enforcing Cyber-Physical
Execution Semantics to Defend Against Data-Oriented Attacks,” in Pro-
ceedings of the 33rd Annual Computer Security Applications Conference
(ACSAC 2017), Dec 2017.
[35] J. Dzinic and C. Yao, “Simulation-based Veriﬁcation of PLC Programs
Master of Science Thesis in Production Engineering,” Master’s thesis,
Chalmers University of Technology, Sweden, 2013.
[36] N. Falliere, L. O. Murchu, and E. Chien, “W32.Stuxnet Dossier,”
https://www.symantec.com/content/en/us/enterprise/media/security
response/whitepapers/w32 stuxnet dossier.pdf.
[37] G. Fedorko, V. Molnar, D. Marasova, A. Grincova, M. Dovica, J. Zivcak,
T. Toth, and N. Husakova, “Failure Analysis of Belt Conveyor Damage
caused by the Falling Material. Part II: Application of Computer
Metrotomography,” Engineering Failure Analysis, vol. 34, pp. 431 –
442, 2013.
[38] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and
G. Vigna, “TriggerScope: Towards Detecting Logic Bombs in Android
Applications,” in 2016 IEEE Symposium on Security and Privacy
(Oakland), May 2016.
[39] L. Garcia, S. Zonouz, D. Wei, and L. P. de Aguiar, “Detecting PLC
control corruption via on-device runtime veriﬁcation,” in 2016 Resilience
Week (RWS), Aug 2016.
[40] A. Ginter, “The Top 20 Cyber Attacks Against Industrial Control
https://ics-cert.us-cert.gov/sites/default/ﬁles/ICSJWG-
top-20-attacks-article-d2%20-
Systems,”
Archive/QNL DEC 17/Waterfall
%20Article S508NC.pdf.
[41] N. Govil, A. Agrawal, and N. O. Tippenhauer, “On Ladder Logic Bombs
in Industrial Control Systems,” in CyberICPS/SECPRE@ESORICS, Sep
2017.
[42] J. F. Groote, S. F. M. van Vlijmen, and J. W. C. Koorn, “The Safety
Guaranteeing System at Station Hoorn-Kersenboogerd,” in Computer
Assurance, 1995. COMPASS ’95. Systems Integrity, Software Safety and
Process Security. Proceedings of the Tenth Annual Conference on, Jun
1995.
[43] S. Guo, M. Wu, and C. Wang, “Symbolic Execution of Programmable
Logic Controller Code,” in Proceedings of the 2017 11th Joint Meeting
on Foundations of Software Engineering (ESEC/FSE 2017), Sep 2017.
[44] R. Huuck, “Semantics and Analysis of Instruction List Programs,”
Electronic Notes in Theoretical Computer Science, vol. 115, pp. 3–18,
2005.
[45] H. Janicke, A. Nicholson, S. Webber, and A. Cau, “Runtime-Monitoring
for Industrial Control Systems,” Electronics, vol. 4, no. 4, pp. 995–1017,
dec 2015.
[46] C. S. Jensen, M. R. Prasad, and A. Møller, “Automated Testing with
Targeted Event Sequence Generation,” in Proceedings of the 2013 In-
ternational Symposium on Software Testing and Analysis (ISSTA 2013),
Jul 2013.
[47] I. Kovalenko, M. Saez, K. Barton, and D. Tilbury, “SMART: A System-
Level Manufacturing and Automation Research Testbed,” Smart and
Sustainable Manufacturing Systems, vol. 1, no. 1, pp. 232–261, 2017.
[48] N. H. Lee and S. D. Cha, “Generating Test Sequences Using Symbolic
Execution for Event-Driven Real-Time Systems,” Microprocessors and
Microsystems, vol. 27, pp. 523–531, 2003.
[49] R. M. Lee, M.
J. Assante, and T. Conway, “German Steel
Mill Cyber Attack,” https://ics.sans.org/media/ICS-CPPE-case-Study-2-
German-Steelworks Facility.pdf.
[50] R. Lee, M. Assante, and T. Conway, “Analysis of the Cyber Attack
on the Ukrainian Power Grid,” https://www.nerc.com/pa/CI/ESISAC/
Documents/E-ISAC SANS Ukraine DUC 18Mar2016.pdf.
[51] G. Li, E. Andreasen, and I. Ghosh, “SymJS: Automatic Symbolic
Testing of JavaScript Web Applications,” in Proceedings of the 22Nd
ACM SIGSOFT International Symposium on Foundations of Software
Engineering (FSE 2014), Nov 2014.
[52] K. S. Luckow, C. S. P˘as˘areanu, and B. Thomsen, “Symbolic Execution
and Timed Automata Model Checking for Timing Analysis of Java Real-
Time Systems,” EURASIP Journal on Embedded Systems, vol. 2015,
no. 1, Sep 2015.
(cid:22)(cid:20)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
[53] A. Martelli and U. Montanari, “Additive AND/OR Graphs,” in Proceed-
ings of the 3rd International Joint Conference on Artiﬁcial Intelligence
(IJCAI’73), Aug 1973.
[54] S. McLaughlin, S. Zonouz, D. Pohly, and P. McDaniel, “A Trusted
Safety Veriﬁer for Process Controller Code,” in Proceedings of the 2014
Network and Distributed System Security Symposium (NDSS’14), Feb
2014.
[55] N. Mirzaei, S. Malek, C. S. P˘as˘areanu, N. Esfahani, and R. Mahmood,
“Testing Android Apps Through Symbolic Execution,” SIGSOFT Softw.
Eng. Notes, vol. 37, no. 6, pp. 1–5, Nov. 2012.
[56] A. Montaqim, “Top 14 industrial robot companies and how many robots
they have around the world,” https://roboticsandautomationnews.com/
2015/07/21/top-8-industrial-robot-companies-and-how-many-robots-
they-have-around-the-world/812/.
[57] J. Nellen, E. ´Abrah´am, and B. Wolters, “A CEGAR Tool for the Reach-
ability Analysis of PLC-Controlled Plants Using Hybrid Automata,” in
Formalisms for Reuse and Systems Integration, 2015.
[58] J. Nellen, K. Driessen, M. Neuh¨auβer, E. ´Abrah´am, and B. Wolters,
“Two CEGAR-based Approaches for the Safety Veriﬁcation of PLC-
controlled Plants,” Information Systems Frontiers, vol. 18, no. 5, pp.
927–952, Oct. 2016.
[59] Occupational Safety and Health Administration, “OSHA Instruction
PUB 8-1.3 SEP 21, 1987 Ofﬁce of Science and Technology Assess-
ment,” https://www.osha.gov/enforcement/directives/std-01-12-002.
[60] T. Ohmann, M. Herzberg, S. Fiss, A. Halbert, M. Palyart, I. Beschast-
nikh, and Y. Brun, “Behavioral Resource-aware Model Inference,”
in Proceedings of the 29th ACM/IEEE International Conference on
Automated Software Engineering (ASE ’14), Sep 2014.
[61] S. Ould Biha, “A Formal Semantics of PLC Programs in Coq,” in
Proceedings of the 2011 IEEE 35th Annual Computer Software and
Applications Conference (COMPSAC’11), Jul 2011.
[62] S. C. Park, C. M. Park, G.-N. Wang, J. Kwak, and S. Yeo, “PLCStu-
dio: Simulation based PLC code veriﬁcation,” 2008 Winter Simulation
Conference, pp. 222–228, 2008.
[63] T. Park and P. I. Barton, “Formal Veriﬁcation of Sequence Controllers,”
Computers & Chemical Engineering, vol. 23, no. 11, pp. 1783–1793,
2000.
[64] B. Perelman, “The Top 3 Threats to Industrial Control Systems,” https:
//www.securityweek.com/top-3-threats-industrial-control-systems.
[65] J.-M. Roussel and B. Denis, “Safety Properties Veriﬁcation of Lad-
der Diagram Programs,” Journal Europ´een des Syst`emes Automatis´es
(JESA), vol. 36, no. 7, pp. pp. 905–917, Jun. 2002.
[66] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song,
“A Symbolic Execution Framework for JavaScript,” in Proceedings of
the 2010 IEEE Symposium on Security and Privacy (Oakland’10), May
2010.
[67] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang,
“AppIntent: Analyzing Sensitive Data Transmission in Android for
Privacy Leakage Detection,” in Proceedings of the 2013 ACM SIGSAC
conference on Computer & Communications Security (CCS’13), Nov
2013.
[68] H. Zhang, D. D. Yao, N. Ramakrishnan, and Z. Zhang, “Causality
Reasoning About Network Events for Detecting Stealthy Malware
Activities,” Computers and Security, vol. 58, no. C, May 2016.
APPENDIX
A. Teach Pendant Code of FANUC Robot
Figure 8 presents the robot code implemented using teach
pendant language. This program is triggered by a PLC event
and can pass a part from CNC machine to conveyor.
B. Implementation of Static Analysis
We have implemented our static analyses in 7K lines of C++
code and 5K lines of Java code. Particularly, we convert PLC
ST code into C programs via MATIEC [13] compiler, and then
leverage Clang [3] to enable our analyses. To analyze teach
pendant programs in robot, we build a speciﬁc parser using
Antlr [2] and then perform control ﬂow analysis on top of the
generated AST.
1 !Function only when receiving the signal
2 IF DI [ 0 : Deliver Part@PLC ]=OFF, JMP LBL[ 3 ]
3 DO[6:Pickup_from_CNC1]=ON
4 DO[2:Part_AtConveyor@PLC]=OFF
5 CALL GO_HOME_AND_GET_VACUUM_GRIPPER
6 !Move to CNC1
7 J P[10:ROTARM] 80% FINE
8 L P[4:ROTARM2] 250mm/sec FINE
9 ...
10 !Pick up a part from CNC1
11 L P[9:CNCSIDE] 100mm/sec FINE
12 ...
13 LBL[1]
14 IF DI[7:Pickup_Confirmation]=ON, JMP LBL[2]
15 JMP LBL[1]
16 LBL[2]
17 WAIT .10(sec)
18 !Deposit part on conveyor
19 L P[10:ROTARM] 550mm/sec FINE
20 ...
21 !Notify that part was dropped on conveyor
22 DO[ 2 : Part AtConveyor@PLC ]=ON
23 WAIT . 5 0 ( s e c )
24 DO[ 2 : Part AtConveyor@PLC ]=OFF
25 CALL RETURN_VACCUM_GRIPPER_AND_GO_HOME
26 DO[6:Pickup_from_CNC1]=OFF
27 LBL[3]
Fig. 8: Robot Teach Pendant Code for Delivering Parts
Note that
the conversion from PLC to C code, using
MATIEC, follows a standardized (IEC 61131-3) mechanism.
We admit that some semantics, such as counters, timers, etc.
may not be very precisely translated to C code especially
because of the implicit effects caused by PLCs’ scan cycles.
Furthermore, different vendors may introduce unique features,
besides standard ones, that cannot be converted using existing
tools. To address these limitations, an alternative option is to
directly conduct analysis on native PLC code. We intend to
work on this as part of future work. However, we argue that our
graph construction methods are orthogonal to the underlying
program analysis. In fact, other (potentially advanced) analysis
techniques can be used to achieve our goal.
C. Algorithm to Infer Events From Data Traces.
Algorithm 3 depicts our algorithm to infer discrete events