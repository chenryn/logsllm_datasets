### Fixed Granularity Levels

Fixed granularity levels do not necessarily imply that the approach is optimal. From a different perspective, fixed granularity can actually impair the accuracy of the method. Specifically, an approach that aims to detect vulnerable code clones using a fixed granularity level \( g \) may fail to identify clones with a length smaller than \( g \), leading to false negatives. To address this, one could generate fingerprints for every possible \( g \) value and search for the corresponding fingerprint from every dictionary whenever it fails to detect functions smaller than the fixed granularity. However, this approach would introduce a significant amount of overhead.

Moreover, finer granularity increases the false positive rate, as demonstrated in Subsection VII-C. The false positive rate is directly related to the trustworthiness of a vulnerable clone detector. Detectors that report numerous false alarms do not effectively help developers identify real issues; instead, they lead to increased efforts in routinely checking meaningless alerts. In this respect, we believe that our design of VUDDY achieves the right balance between accuracy and scalability.

### Room for Speedup

Currently, a large portion of the overhead is concentrated in the parsing step. For example, when generating a fingerprint of Android firmware, VUDDY spent 973 seconds (95.1%) out of 1023 seconds just on parsing. To resolve this performance bottleneck, we implemented a faster version of VUDDY, called VUDDY-fast, which uses regular expressions to identify and analyze functions. VUDDY-fast required only 1 hour and 17 minutes to generate a fingerprint dictionary for 1 BLoC of input, but it identified 9.7% fewer functions. As part of future work, we plan to improve the parser's performance by optimizing the grammar and leveraging a faster parser generator than ANTLR.

### Memory Use

Table V shows the memory usage when preprocessing functions in the vulnerability database with different granularities. Here, \( l \) refers to the lines of code (LoC) of a function.

| Property | Variable | Fixed |
|----------|----------|-------|
| Granularity (LoC) | \( l \) | 4 | 10 | 40 | 100 |
| Memory use (MB) | 48 | 651 | 496 | 172 | 49 |

### Open Service

In April 2016, we launched an open web service via IoTcube (https://iotcube.net) where anyone can use VUDDY to inspect their programs. Over 11 months, a number of open-source developers, device manufacturers, and commercial product developers tested more than 14 BLoC, and VUDDY detected 144,496 vulnerable functions. Due to space constraints, the detailed results and insights are provided in the Appendix.

### Conclusion and Future Work

In this paper, we proposed VUDDY, an approach for scalable and accurate detection of vulnerable code clones. The design principles of VUDDY focus on extending scalability through function-level granularity and a length filter while maintaining accuracy. VUDDY adopts a vulnerability-preserving abstraction scheme, enabling it to discover 24% more unknown variants of vulnerabilities. We implemented VUDDY to demonstrate its efficacy and effectiveness. The results show that VUDDY can detect numerous vulnerable clones from a large codebase with unprecedented scalability and accuracy. In the case study, we presented several cases where vulnerable functions remained unfixed for years and propagated to other programs.

A vast number of vulnerable code fragments will continue to propagate to countless programs and devices. We strongly believe that VUDDY is essential for securing various software, especially when both scalability and accuracy are required.

Our work can be extended in multiple directions. Firstly, we plan to continue improving the performance of VUDDY by refining the parser and expanding the vulnerability database. This will boost the speed of VUDDY and increase the detection rate. Additionally, we will explore combining our approach with other types of vulnerability-detecting techniques (e.g., fuzzers) to achieve more sophisticated detection of vulnerabilities.

### Acknowledgment

We thank the anonymous reviewers for their insightful comments, which helped improve the quality of the paper. We are also grateful to Donghyeok Kim for his contribution to the parser generation and Taebeom Kim for his assistance in the manual inspection process. This work was supported by the Institute for Information & Communications Technology Promotion (IITP) grant funded by the Korea government (MSIP) (No. R0190-16-2011, Development of Vulnerability Discovery Technologies for IoT Software Security).

### References

[References listed here, formatted consistently]

### Appendix

#### VUDDY as an Open Service

VUDDY has been available online at IoTcube (https://iotcube.net) since April 2016, providing scalable and accurate software inspection. Users include commercial software developers, open-source committers, and IoT device manufacturers. Below, we present a working example of VUDDY using the firmware of an Android smartphone. When the fingerprint is uploaded to our service platform, the platform displays the number of detected vulnerable clones, their origins, yearly distribution of CVEs, CVSS score distribution, CWE distribution, and a tree view to locate affected files. Graphs in the appendix are vector images downloaded from IoTcube, and other figures are screen-captured.

**Figures:**
- **Figure 10:** The main page of IoTcube.
- **Figure 11:** Statistical knowledge obtained by the web service over 11 months.
- **Figure 12:** The origin of vulnerabilities.
- **Figure 13:** Yearly distribution of CVEs.
- **Figure 14:** Distribution of CVSS.
- **Figure 15:** Distribution of CWE.
- **Figure 16:** A snippet of the tree view. Internal nodes denote directories, and leaf nodes denote files. Clicking the leaf nodes allows users to browse vulnerable functions and corresponding patches.