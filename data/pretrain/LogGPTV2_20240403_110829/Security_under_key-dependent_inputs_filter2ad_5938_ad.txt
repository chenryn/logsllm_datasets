computable) function g, the family F
KDI-secure PRF with respect to the singleton class {g}, with
high probability over the choice of the salt r.
(g,r)
In the long version of this note [9] we also show an example
of a more “natural” (or “less tailored”), which is KDI-secure
with respect to the identity function.
5. TWEAKABLE PSEUDO-RANDOM PER-
MUTATIONS
Recall that a tweakable cipher (or tweakable pseudo-random
j
permutation) [16] has a key and two inputs: a plaintext
and a tweak. Below we use the convention that for secu-
rity parameter n, both the plaintext and the tweak are n-
bit strings, and that the cipher key is of length {0, 1}(cid:2)(n)
where (cid:2) is some polynomially bounded function (we often
use (cid:2)(n) = n or (cid:2)(n) = 2n). Formally a family of tweakable
pseudo-random permutations is an ensemble
P =
n∈N
where S denotes the symmetric group, and we require that
there are eﬃcient evaluation and inversion procedures that
given any s, t ∈ {0, 1}n and any x ∈ {0, 1}(cid:2)(n) compute
y = ps,t(x) and z = p
˛˛˛˛ s ∈ {0, 1}(cid:2)(n), t ∈ {0, 1}n
ps,t ∈ S ({0, 1}n)
−1
s,t (x), respectively.
ﬀ
The standard security deﬁnition for strong tweakable pseudo-
(cid:2)
(1n) (with oracle access to π, π
random permutations as deﬁned in [17, 16] asserts that no
feasible attacker Aπ,π
−1)
can distinguish with any non-negligible advantage the case
where for a random s ∈R {0, 1}n we set π(t, x) ≡ ps,t(x)
s,t (x), from the case where for every t ∈
−1
and π
{0, 1}n, π(t,·) is chosen as a random permutation over {0, 1}(cid:2)(n)
and π
−1(t, x) ≡ p
−1(t,·) is set to the inverse permutation.
Adding KDI-security to this deﬁnition requires some choices.
The attacker in this model has two oracles, each with two
−1(·,·)) and we need to de-
inputs (namely π(·,·) and π
cide what input to what oracle can depend on the key.
In this work we only consider the variant where the plain-
−1 can depend on
text/ciphertext inputs to both π and π
the key, but not the tweaks. The reason that we do not
consider key-dependent tweaks is that tweaks typically rep-
resent some context information or label that comes from a
higher layer (e.g., in the storage application that motivated
this paper the tweak represents the physical position where
the data is to be stored), and so it may be reasonable to
assume that it does not depend on the key.
With these choices, we modify the standard deﬁnition of
tweakable PRPs by giving the adversary access to two ad-
−1 that take as input a tweak t and a de-
ditional oracles ψ, ψ
−1(t, g(s)),
scription of a function g and output π(t, g(s)) and π
respectively.
Definition 2
(KDI-secure tweakable strong PRPs).
A family P of tweakable pseudo-random permutations is KDI-
secure with respect to a class C of circuits if no feasible at-
tacker Aπ,π
(1n) can distinguish with non-negligible
advantage between the following two cases:
,ψ,ψ
−1
−1
1. The key s ∈R {0, 1}n is chosen at random, and for
any t, x, g the oracles are set as, π(t, x) ≡ ps,t(x),
−1(t, g) ≡
−1(t, x) ≡ p
π
−1
p
s,t (g(s));
s,t (x), ψ(t, g) ≡ ps,t(g(s)), and ψ
−1
2. The key s ∈R {0, 1}n is chosen at random, for every
t ∈ {0, 1}n we set π(t,·) to a random permutation over
{0, 1}(cid:2) and π
−1(t,·) to its inverse, and then ψ(t, g) ≡
π(t, g(s)), and ψ
−1(t, g) ≡ π
−1(t, g(s)).
As before, Deﬁnition 2 is adapted to the “ideal cipher model”
−1 to the
by giving oracle access to the ideal cipher Π, Π
construction itself, the attacker A, and potentially also the
circuits in C.
Below we demonstrate that some constructions of tweak-
able ciphers in the literature are KDI insecure against simple
functions of the key, while others can be proven secure in the
ideal cipher model.
KDI-insecurity of the LRW constructions.
Consider the following instantiation of the second con-
struction of Liskov et al. from [16]. This instantiation has
two keys, denoted s1, s2, where s1 is used as a key for an
underlying block cipher E and s2 is treated as an element of
GF (2n) with n the block-size of E. This construction then
deﬁnes the following tweakable cipher, with both the block
size and the tweak size equals to n bits:
˜Es1,s2 (t, x) = Es1 ((t · s2) ⊕ x) ⊕ (t · s2)
(5)
where t·s2 is a multiplication in GF (2n)). In [16] it is shown
that the generic construction Es1 (hs2 (t) ⊕ x) ⊕ hs2 (t) is a
secure tweakable cipher when E is a secure cipher and h is
a “xor-universal” hash function, which implies the security
of Eq. (5) since hs2 (t) = t · s2 is indeed xor-universal.
However, as pointed out when this construction was con-
sidered for the IEEE 1619 standard, this construction is not
KDI-secure with respect to the function g(s1, s2) = s2 (i.e.,
when “encrypting” the element s2 from the secret key).
The attacker can query ψ(0, g) (i.e., using tweak value 0
and “plaintext” s2) and also π(1, 0) (i.e., tweak value 1 and
“plaintext” 0), thus getting
c1 = ˜Es1,s2 (0, s2) = Es1 (s2) and c2 = ˜Es1,s2 (1, 0) = Es1 (s2)⊕s2
Next the attacker can compute s2 = c1 ⊕ c2 and then verify
this value (e.g., by asking to “decrypt” the value of c1 ⊕ 2s2
with respect to the tweak value 2).
Negative Example 3. The construction from Eq. (5)
is not KDI-secure with respect to the function g(s1, s2) =
s2.
KDI-security of the “trivial construction”.
Alternatively, consider the “trivial” construction of tweak-
able SPRP from a block cipher
˜Es(t, x) = EEs(t)(x)
(6)
It is easy to see that if E is a secure cipher then this
construction is a secure tweakable cipher. Although there
are functions g for which this construction is not KDI-secure
−1
(for example the function g(s) = E
Es(t)(0), we can show,
however, that ˜E from Eq. (6) is KDI-secure in the “ideal
cipher model” with respect to any function that does not
depend on the cipher itself.
Lemma 3. Let g be any Boolean circuit with no Π-gates
−1-gates. Then the construction ˜E from Eq. (6) is a
or Π
KDI-secure tweakable strong pseudo-random permutation in
the “ideal cipher model” with respect to the singleton class
C = {g}.
Proof Sketch Again, the proof is straightforward. Re-
call that the adversary in this game has six oracles: Π(·,·)
−1(·, ·) that represent the ideal cipher, ˜E(·, ·) and
and Π
−1(·, ·) that represent either the construction with a ﬁxed
˜E
random key s or a random tweakable permutation (indepen-
dent of Π), and ψ(·) and ψ
−1(·) that allow key-dependent
−1(t, g(s))
queries5 with ψ(t) = ˜E(t, g(s)) and ψ
(where s is the secret key in case one and just a random
string in case two).
−1(t) = ˜E
Similarly to the proof of Theorem 1, the proof goes by
arguing that the attacker is very unlikely to ever query its Π
−1 oracles on the right “key” s, and without such queries
or Π
the view of the attacker is the same in both cases.
Other constructions.
We comment that a similar lemma can be proven also for
Rogaway’s XEX construction from [20], where on input x
and tweak (i, j) one computes:
˜Es((i, j), x) = Es((2i · Es(j)) ⊕ x) ⊕ (2i · Es(j))
(7)
Namely, this construction too can be proven KDI-secure in
the “ideal cipher model” with respect to any function g that
does not depend on the ideal cipher. The proof itself is very
similar to Rogaway’s proof of security for XEX [20]. The
key-dependent queries are handled using the fact that in the
“ideal cipher model” the quantity Es(j) is independent of s
for all j, and therefore the attacker is unlikely to be able to
issue two queries for which (2i·Es(j))⊕x = (2i
))⊕x
(cid:2)
can be set as functions of the secret key s).
(even if x, x
(cid:2) ·Es(j
(cid:2)
(cid:2)
6. SYMMETRIC ENCRYPTION
Being randomized, encryption schemes are potentially eas-
ier to make KDI secure than non-randomized primitives such
as PRFs and ciphers. Black, Rogaway, and Shrimpton stud-
ied in [4] the question of KDI-security for symmetric en-
cryption (under the name KDM-security). They presented
a deﬁnition of security (using much of the same rationale
as in Section 2), and proved that it can be easily met in
the random-oracle model. However, we do not know of a
construction that achieves similar level of KDI security in
the standard model (not even with respect to all singletons
{g}). Yet, we provide two signiﬁcant results in this section:
The ﬁrst shows that a natural “textbook” PRF-based en-
cryption scheme that is KDI-secure in the random oracle
model (with respect to all functions g) is not KDI-secure in
the standard model, not even with respect to the identity
function, not even when the PRF itself is KDI secure, and
not even with respect to “practical instantiations” of the
pseudorandom function. The second result shows that for
every function g we can build an encryption scheme that
is KDI-secure with respect to {g} (based on any invertible
pseudorandom function, such as any block cipher).
6.1 Deﬁnitions
Recall that a (symmetric) encryption scheme consists of
algorithms for key-generation, encryption and decryption,
E = (Gen, Enc, Dec), with Gen, Enc randomized and where
both Enc and Dec use the secret key that is generated by
Gen. Below we assume that for security parameter n, the
messages that are encrypted are of length n. The standard
deﬁnitions of CPA-security for symmetric encryption (cf. [8,
5Compared to Deﬁnition 2 we slightly simplify notations
−1 as single-input oracles. We can do
here by having ψ, ψ
this because the function g is always the same, since we are
interested in the singleton class C = {g}.
14]) asserts that no feasible attacker with oracle access to
the encryption algorithm (with the secret key hard-wired)
can produce two equal-length messages m, m
for which it
can distinguish with non-negligible advantage a random en-
(cid:2)
cryption of m from a random encryption of m
. The stan-
dard deﬁnition for CCA-security is similar except that the
attacker is also given access to a decryption oracle, but is
not allowed to query that oracle on the ciphertext for which
it needs to decide if it came from m or m
.
(cid:2)
(cid:2)
As usual, we incorporate KDI-security by providing an-
other oracle to the attacker that on input a function g out-
puts the encryption of g(s) under the secret key s.6
Definition 3
(KDI-secure encryption). Let C be a
class of functions (circuits). A symmetric encryption scheme
E = (Gen, Enc, Dec) is CPA-KDI-secure with respect to C if
no feasible attacker Ae,e
(1n) has non-negligible advantage
in guessing the value of the bit b in the following game:
(cid:2)
(cid:2)
1. The key-generation algorithm is run to get s ← Gen(1n).
2. The attacker Ae,e
(1n) is given the security parameter
(·), which are deﬁned
and access to two oracles e(·), e
by e(m) ≡ Enc(s; m) for m ∈ {0, 1}n, and e
(g) ≡
Enc(s; g(s)) for g ∈ C.
The attacker A interacts with these oracles and then
outputs two queries q1, q2 for these oracles (each qi can
be a query to either e(·) or e
(·)).
(cid:2)
(cid:2)
(cid:2)
3. A bit b ∈R {0, 1} is chosen at random and the attacker
∗
is given c
, the ciphertext resulting from encrypting qb
under the corresponding oracle. The attacker A can
continue interacting with its oracles, and then it out-
puts a guess b
for the bit b.
(cid:2)
We similarly say that E is CCA-KDI-secure with respect
to C if no no feasible attacker has non-negligible advantage
in guessing the value of the bit b in the modiﬁed game where
Ae,e
,d(1n) is also given access to an oracle d(c) ≡ Dec(s; c),
(cid:2)
but cannot query the oracle d(·) on the challenge cipher-
∗