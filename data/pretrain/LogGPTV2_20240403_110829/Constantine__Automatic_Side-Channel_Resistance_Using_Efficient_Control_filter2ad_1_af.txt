### Nested Flows and Performance Overheads

#### Performance Metrics
- **Without Cloning:**
  - Cycles (M): 1.6, 2.6, 2.9, 33
  - Binary Size (KB): 39, 39, 47, 638

- **With Cloning:**
  - Cycles (M): 864, 638 (16.35x), 33 (12.7x), 1.08
  - Binary Size (KB): 1046 (118), 863 (139), 2898 (52), 1892 (2)

- **Nested (Tainted) with Cloning:**
  - Cycles (M): 1046 (118), 863 (139), 2898 (52), 1892 (2)
  - Binary Size (KB): 39, 39, 47, 638

### Elliptic Curve Cryptography (ECC) and Security Vulnerabilities

The library supports Elliptic Curve (EC) cryptography, which is advantageous due to its ability to use smaller keys while providing equivalent security guarantees compared to non-EC designs like RSA [69]. EC Digital Signature Algorithms (ECDSA) are among the most popular DSA schemes today. However, their implementations often face pitfalls and vulnerabilities that can compromise security. Recent attacks such as LadderLeak [12] (targeting the Montgomery ladder in EC scalar multiplication in ECDSA) and CopyCat [49] (targeting the vulnerable hand-crafted constant-time (CT) wolfSSL ECDSA code) highlight these risks.

### Hardening ECDSA with Constantine

In this section, we harden the `mulmod` modular multiplication procedure in ECDSA from the non-CT wolfSSL implementation using Constantine. This procedure calculates a curve point \( k \times G \), where \( k \) is a crypto-secure nonce and \( G \) is the EC base point. Historically, leaks involving \( k \) bits have been exploited for stealing Bitcoin wallets [2] and hacking consoles [1].

#### Code Features and Analysis

- **Region to Protect:** 84 functions in the call graph.
- **Profiling Set:** 1024 random inputs with 256-bit key length.
- **Sensitive Elements:** Branches, loops, and memory accesses.

**Loop Analysis:**
- **Outer Loop:** Iterates over key bits.
- **Inner Loops:** 
  - Depth 1: 1 inner loop
  - Depth 2: 4 inner loops
  - Depth 3: 3 inner loops
- **Potential Unroll Factor:** 61,440 (based on profiling; inner loops are unbounded in static analysis).

**Cloning Impact:**
- **With Cloning:** Protected access over-strides by 8% of the intended storage.
- **Without Cloning:** DFL needs 6.29x more accesses than strictly needed.

#### Overheads

- **Run-Time Performance:**
  - Slowdown compared to the original non-CT baseline (W=1): 12.7x.
  - Completion time: 8 ms.
  - Best non-CT configuration (W=4): 0.35 ms.
  - Hand-written CT version: 0.7 ms.
  - Automatically hardened code: 8 ms (11.42x factor of hand-written CT version, 11.38x more CPU cycles).

- **Binary Size:**
  - With cloning: 16.36x increase compared to non-CT, 13.57x higher than CT.
  - Performance benefits: 77x/12.7x = 6.06x end-to-end speedup.
  - Binary size: 638 KB (acceptable but amenable to further reduction).

**Optimizations:**
- **DFL Loop Optimization:** Removes unnecessary striding, reducing slowdown from 27.1x to 12.7x.

**Analysis and Compilation Time:**
- Profiling: 10m34s.
- Points-to analysis: 20s (2s without cloning).
- End-to-end code transformation and compilation: 1m51s (31s for non-CT reference).

### Conclusion

Our results confirm that Constantine can effectively handle a real-world crypto library with no annotations, realistic compilation times, binary sizes, and run-time overheads. The end-to-end run-time overhead is significantly lower (up to two orders of magnitude) than prior comprehensive solutions like Raccoon [53] on simpler benchmarks.

### Acknowledgements

We thank our shepherd Qi Li and the anonymous reviewers for their valuable feedback. This work was supported by the European Unionâ€™s Horizon 2020 research and innovation programme under grant agreements No. 786669 (ReAct) and 825377 (UNICORE), and by Intel Corporation through the Side Channel Vulnerability ISRA.

### References

[References listed as provided]

---

This revised version provides a clearer and more structured presentation of the information, making it easier to follow and understand.