## 优化后的文本

### 10.3.5 Java源码调试
解决各类错误后，如图10-33所示，可能会出现很多警告。笔者选择直接忽略这些警告，因此“Problems”窗口为空。

（4）启动模拟器后，可以开始调试Java源码。例如，在`ActivityStack.java`文件中设置断点（只需在行号前单击即可），然后点击“开始调试”，程序将在断点处暂停并支持单步调试。此时，相关变量的值会实时显示在窗口上，如图10-34所示。

---

### 10.3.6 C/C++源码调试
（1）首先启动模拟器，并确保执行了`envsetup.sh`脚本来设置环境变量：
```bash
rlusksk@MacBook:/Volumes/android/android-4.4_r1$ source ./build/envsetup.sh
rlusksk@MacBook:/Volumes/android/android-4.4_r1$ lunch 1
rlusksk@MacBook:/Volumes/android/android-4.4_r1$ emulator &
```

（2）开启`gdbserver`，并附加到浏览器进程：
```bash
ue_a181164 55 216516 17728 ffffffff b6f3a41c S com.android.browser
riusksk@MacBook:/Volumes/android/android-4.4_r1$ adb shell gdbserver :5039 --attach 1104
Attached; pid = 1137
Listening on port 5039
```

（3）使用`gdbclient`进行源码调试，如图10-35所示：
```bash
riusksk@MacBook:/Volumes/android/android-4.4_r1$ gdbclient
GNU gdb (GDB) 7.6
...
Reading symbols from /Volumes/android/android-4.4_r1/out/target/product/generic/symbols/system/bin/app_process...done.
(gdb) break user_agent.cc:130
Breakpoint 1 at 0xabcdef96: file user_agent.cc, line 130.
(gdb) disassemble 0xabcdef96
Dump of assembler code for function base::LazyInstance<webkit_glue::UserAgentState, base::DefaultLazyInstanceTraits>::Pointer(void):
0xabcdef94 <base::LazyInstance<webkit_glue::UserAgentState, base::DefaultLazyInstanceTraits>::Pointer(void)+0>: push {r0, r1, r4, r5, r6, lr}
0xabcdef96 <base::LazyInstance<webkit_glue::UserAgentState, base::DefaultLazyInstanceTraits>::Pointer(void)+2>: ldr r4, [pc, #88] ; 0xabcdefce <base::LazyInstance<webkit_glue::UserAgentState, base::DefaultLazyInstanceTraits>::Pointer(void)+92>
0xabcdef98 <base::LazyInstance<webkit_glue::UserAgentState, base::DefaultLazyInstanceTraits>::Pointer(void)+4>: add r4, pc
(gdb) list user_agent.cc:130
125 void SetUserAgent(const std::string& user_agent, bool overriding) {
126     g_user_agent.Get().Set(user_agent, overriding);
127 }
128
129 const std::string& GetUserAgent(const GURL& url) {
130     return g_user_agent.Get().Get(url);
131 }
132
133 } // namespace webkit_glue
```
补充：如果编译出来的系统浏览器运行时崩溃，可以下载WebViewDemo程序用于调试（链接: https://raw.githubusercontent.com/alexyan/android-webview-demo/master/out/production/WebViewDemo.apk）。它默认调用的是系统的WebKit，同样可以用于调试Android WebKit源码。

---

### 10.3.7 内核源码调试
以下方法基于已编译好的Android系统源码，并另外下载Linux内核进行编译和调试。

（1）下载Android内核源码goldfish：
```bash
riusksk@MacBook /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel
$ git clone https://android.googlesource.com/kernel/goldfish.git
Cloning into 'goldfish'...
remote: Sending approximately 663.3e MiB ...
remote: Counting objects: 7e115, done.
remote: Compressing objects: 100% (23/23)
remote: Total 3094777 (delta 2591320), reused 3094766 (delta 2591320)
Receiving objects: 100% (3094777/3094777), 663.29 MiB | 1695.00 KiB/s, done.
Resolving deltas: 100% (2591411/2591411), done.
Checking out files: 100% (38915/38915), done.
riusksk@MacBook /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel
$ cd goldfish
```

查看支持的Linux内核版本：
```bash
riusksk@MacBook /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/android-3.10
  remotes/origin/android-3.4
  remotes/origin/android-goldfish-2.6.29
  remotes/origin/android-goldfish-3.10
  remotes/origin/android-goldfish-3.10-m-dev
  remotes/origin/android-goldfish-3.4
  remotes/origin/linux-goldfish-3.4-wip
  remotes/origin/master
```

选择3.4内核版本进行下载：
```bash
riusksk@MacBook /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish
$ git checkout -t remotes/origin/android-goldfish-3.4 -b goldfish3.4
Branch 'goldfish3.4' set up to track remote branch 'android-goldfish-3.4' from 'origin'.
Switched to a new branch 'goldfish3.4'
```

（2）确保Android NDK已添加到环境变量，以便可以直接使用交叉编译器`arm-linux-androideabi-gcc`：
```bash
export PATH=$PATH:ANDROID_NDK_HOME/toolchains/arm-linux-androideabi-4.8/prebuilt/darwin-x86_64/bin
```

（3）设置环境变量并开始编译相关配置文件：
```bash
export ARCH=arm
export SUBARCH=arm
export CROSS_COMPILE=arm-eabi-
make goldfish_armv7_defconfig
```

（4）增加内核配置选项，修改`goldfish/.config`配置文件，确保以下几项配置已开启：
```bash
CONFIG_HIGHMEM=y # 允许设置模拟器内存
CONFIG_DEBUG_INFO=y # 显示vmlinux符号
CONFIG_DEBUG_KERNEL=y # 开启内核调试
CONFIG_KGDB=y # 开启 kgdb
```

（5）开始编译内核，大约需要10分钟：
```bash
riusksk@MacBook /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish
$ make
......
Kernel: arch/arm/boot/zImage is ready
```

在Mac系统上可能会遇到以下错误：
```bash
scripts/mod/mk_elfconfig.c:4:10: fatal error: 'elf.h' file not found
#include <elf.h>
1 error generated.
make[2]: *** [scripts/mod/mk_elfconfig] Error 1
make[1]: *** [scripts/mod] Error 2
make: *** [scripts] Error 2
```

可以通过以下方式解决：
```bash
sudo cp /Volumes/android/android-4.4_r1/external/elfutils/libelf/elf.h /usr/include/elf.h
```

（6）使用编译好的内核启动模拟器（可以添加`-no-window`选项以不显示模拟器），如图10-36所示，并开启GDB调试：
```bash
emulator -verbose -show-kernel -kernel ./arch/arm/boot/zImage -memory 1024 -qemu -s -S
```

（7）开启另一个终端连接默认监听端口1234，它会自动加载符号，然后就可以用GDB进行内核源码调试了。
```bash
riusksk@MacBook /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish
$ arm-linux-androideabi-gdb ./vmlinux
GNU gdb (GDB) 7.3.1-gg2
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law. Type "show copying"
and "show warranty" for details.
For bug reporting instructions, please see:
<http://source.android.com/source/report-bugs.html>...
Reading symbols from /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish/vmlinux...done.
(gdb) target remote :1234
Error while running hook_stop:
__delay () at arch/arm/lib/delay.S:48
48 subs r0, r0, #1
(gdb) c
Continuing.
Program received signal SIGINT, Interrupt.
Error while running hook_stop:
_delay () at arch/arm/lib/delay.S:48
48 subs r0, r0, #1
(gdb) list
43 * oh, if only we had a cycle counter...
44 */
45
46 /* Delay routine */
47 ENTRY(__delay)
48 subs r0, r0, #1
49 bne __delay
50 movs pc, lr
(gdb) disassemble
Dump of assembler code for function _delay:
=> 0xce1ded24: subs r0, r0, #1
   0xce1ded28: bne 0xce1ded24 <_delay+4>
   0xce1ded2c: movs pc, lr
End of assembler dump.
```

到这里，我们可以开始进行Android内核源码的调试之旅了。

---

### 10.4 智能插座漏洞分析
#### 10.4.1 漏洞描述
在GeekPwn2014智能硬件破解大赛上，笔者发现了这款智能插座存在多个漏洞。其中一个漏洞可以远程控制智能插座的开关。由于其他通信使用的加密密钥被明文存储在APK包中，导致可通过逆向手段获取，然后用它对操作命令进行加密后发送给服务端实现控制，返回的响应包也同样可以用前面获取的密钥解密出来。参加比赛前准备了一个灯泡矩阵，即在智能插座上放置灯泡，然后开发一个Android应用控制灯的亮灭，从而实现“走马观灯”的小游戏。虽然最终实现了，但在会场由于各种原因，插座无法连上Wi-Fi完成所有配置，最后只完成单个灯泡的演示，如图10-37所示。

#### 10.4.2 静态逆向分析
使用JEB分析某款智能插座的APK包，找到启动时的主Activity（即启动界面），查看`android.intent.action.MAIN`与`android.intent.Category.LAUNCHER`所对应的Activity（即首个启动的Activity），此处找到的是`hangzhou.kankun.LoadingActivity`，如图10-38所示。

双击左侧栏的`LoadingActivity`可直接查看其对应的Smali代码（如图10-39所示），按下Tab键即可得到Java反编译代码，如图10-40所示。从代码中可以发现，它启动另一个Activity：`SmartwifiActivity`。接着双击进入其对应的Java反编译代码，在其`run`函数里可以看到它调用`jnic.encode`对传送命令进行加密处理，如图10-41所示。

---

希望以上优化后的文本能够更加清晰、连贯和专业。如果有任何进一步的需求或问题，请随时告知。