Go Into
New
dreld.content.Conteat;
Shown
CNW
mendceid.
shste.dkResp
Copy
Copy Qu
xC
Paste
xDolete
AN
DURLCo
uld Pa
图10-31
配置编译路径
44Uour
AR.Se
FARA
80
raak
月少点
A用
满究
O下E
?
文腩
片
图10-32添加jar包
解决各类错误之后，如图10-33所示，可能还会有很多警告，这里笔者是直接删除掉提示，所以
Problems窗口都是空的。
（4）启动模拟器后就可以进行Java源码调试了，比如笔者先在ActivityStack.java上下断点（行号
前单击下即可设置断点），单击开始调试后即可断下并支持单步调试，相应的变量值也会实时地显
示在窗口上，如图10-34所示。
---
## Page 504
第10章Android平台漏润分析
485
图10-33源码导入成功
图10-34AndroldJava源码调试
---
## Page 505
486漏洞战争：软件漏洞分析精要
此处，在Eclipse里只能调试Android的Java源码，面AndroidC/C++源码调试需要使用到其他工具，
具体见下一节。
10.3.6系统C/C++源码调试
（1）启动模拟器，一定要先执行evnsetup.sh设置环境变量才能执行后面的命令：
rlusksk@MacBook:/Volumes/android/android-4.4_r1s source . /bui1d/envsetup.sh
rlusksk@MacBook:/Volumes/android/android-4.4_r1$ lunch 1
rlusksk@MacBook:/Volumes/android/android-4.4_r1$ emulator &
（2）开启gdbserver，附加浏览器进程：
ue_a181164 55 216516 17728 ffffffff b6f3a41c S com.android.browser
riusksk@MacBook:/Volumes/android/android-4.4_r1s adb she11 gdbserver :5e39 --attach 1104
Attached; pid = 1137
Listening on port 5039
（3）开启gdbclient，设置断点进行源码调试，如图10-35所示：
riuskskg@MacBook:/Volumes/android/android-4.4_r1$s gdbc1ient
GNU gdb (GDB) 7.6
Copyright (C) 2e13 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or 1ater chttp://gnu.org/1icenses/gpl.htm1>
This is free software: you are free to change and redistribute it.
There is NO wARRANTY, to the extent permitted by law.Type “show copying*
and *show warranty* for details.
For bug reporting instructions, please see:
...
Reading symbols from /Volumes/android/android-4.4_r1/out/target/product/gener1c/symbols/
system/bin/app_process..,done.
gdbs b user_agent.cc:130
Breakpoint 1 at exabebac96: user_agent.cc:130. (2 1ocations)
gdb$ disass @xabebac96
Dump of assembler code for function base::LazyInstancecwebkit_glue: (anonymous}:UserAgentState,
base::DefaultLazyInstanceTraits >::Pointer(vo
1d):
@xabebac94 : push (re, r1, r4, r5, r6, 1r)
Bxabebac96 : 1dr r4, [pc, #88];(@xabebacfe  >::Pointer(vo
id)+92>)
xabebac98 : 1dr r3, [pc, #80] ; (exabebacec  >::Pointer(vo
(: add r4, pc
gdbs 1ist user_agent.cc:130
125 void SetUserAgent(const std::string& user_agent, bool overriding) {
126g_user_agent.Get().Set(user_agent, overriding);
127}
128
129 const std::string& GetUserAgent(const GURL& ur1) {
130
return g_user_agent.Get() .Get(ur1) ;
131 }
132
133 }// namespace webkit_glue
000
eraoet tor sioting sack
图10-35Android WebKit源码调试
---
## Page 507
488漏洞战争：软件漏洞分析精要
补充：偏若编译出来的系统浏览器运行时扇溃，则可以下载WebViewDemo程序用于调试（链
接: https://raw.githubusercontent.com/alexyan/android-webview-demo/master/out/production/WebView
WebView.apk），它欢认调用的是系统的WebKit，一样可以用于调试Android WebKit源码，此
类Demo网上很多，读者可自行下载。
10.3.7
Android内核源码调试
下面的方法是基于编译完Android系统源码之后，再另外下载Linux内核进行编译调试的。
（1）下载Android内核源码goldfish：
riusksk@MacBook /Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel
$ git clone https://android.googlesource.com/kernel/goldfish.git
正克隆到‘goldfish'...
remote: Sending approximately 663.3e MiB .:
remote: Counting objects: 7e115, done
remote: Finding sources: 1ee% (23/23)
remote: Total 3094777 (de1ta 259132e), reused 3e94766 (delta 2591320)
接收对象中：168%（3094777/3094777)，663.29 MiB1695.00K1B/s，完成。
处理de1ta 中：100%（2591411/2591411)，完成。
检查连接...完成。
riusksk@MacBook  /Volumes/Macintosh/Users/riusksk/Android-Security/anidroid_source/kernel
$ cd goldfish
查看支持哪些Linux内核版本的下载：
riusksk@MacBook
/Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish
$ git branch -a
* master
remotes/origin/HEAD -> origin/master
remotes/origin/android-3.1θ
remotes/or1g1n/android-3.4
remotes/origin/android-go1dfish-2.6.29
remotes/origin/android-go1dfish-3.1e
remotes/origin/android-go1dfish-3.1e-m-dev
remotes/orig1n/android-go1dfish-3.4
remotes/origin/1inux-go1dfish-3.e-wip
remotes/origin/master
---
## Page 508
第10章Android平台漏润分析489
选择3.4内核版本进行下载：
riusksk@MacBook
/Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish
$ git checkout -t remotes/origin/android-goldfish-3.4 -b goldfish3.4
正在检出文件：108%（38915/38915），完成。
分支goldfish3.4设置为跟踪来自origin的远程分支android-goldfish-3.4.
切换到一个新分支‘goldfish3.4
（2）确保AndroidNDK已添加到环境变量，以便可以直接使用交叉编译器arm-linux-androideabi-
gcc:
export PATH=$PATH:ANDROID_NDK_HOME/too1cha1ns/arm-11nux-andro1deab1-4.8/prebu11t/darwin-
x86_64/b1n
（3）设置环境变量，开始编译相关配置文件：
export ARCH=arm
export SUBARCH=arm
export CROSS_coMPILE=arm-eab1-
make goldfish_arnv7_defconfig
（4）增加内核配置选项，修改goldfish/.config配置文件，确保以下几项配置已开启：
CONFIG_HIGHMEM=y#允许设置模拟器内存
CONFIG_DEBUG_INFO=y #显示vm1inux符号
CONFIG_DEBUG_KERNEL=y #开启内核调试
CONFIG_KGDB=y #开启 kgdb
（5）开始编译内核，10分钟左右可编译完成：
riusksk@MacBook/Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/
goldfish $ make
......
Kernel: arch/arm/boot/zImage 1s ready
在Mac系统上可能会遇到以下错误：
scripts/mod/mk_elfconfig.c:4:1e: fatal error: ‘elf.h’ file not found
#include 
1 error generated.
make[2]: *** [scripts/mod/mk_elfconfig] Error 1
make[1]: *** [scripts/mod] Error 2
make: *** [scripts]Error 2
可以采用以下方式解决：
---
## Page 509
490漏洞战争：软件漏洞分析精要
sudo cp /Volumes/android/android-4.4_r1/external/elfuti1s/1ibe1f/elf.h /usr/inc1ude/elf.h
（6）用编译好的内核启动模拟器（可以添加-no-window选项以不显示模拟器），如图10-36所示，
并开启GDB调试，
emulator-verbose -show-kernel -kernel./arch/arm/boot/zImage -memory 1e24 -qemu -s -5
关于手机
法律信息
图10-36用已编译的内核启动Android模拟器
（7）开启另一个终端连接默认监听端口1234，它会自动加载符号，然后就可以用GDB进行内核
源码调试了。
rlusksk@MacBook
/Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish ()
$ arm-1inux-androideabi-gdb ./vmlinux
GNU gdb (GDB) 7.3.1-gg2
Copyright (C) 2e11 Free Software Foundation, Inc.
---
## Page 510
第10章Android平台漏润分析
491
License GPLv3+: GNU GPL version 3 or 1ater 
This is free software: you are free to change and redistribute it.
There is No wARRANTY, to the extent permitted by law.Type *show copying*
and “show warranty* for details.
For bug reporting instructions, please see:
chttp://source.android.com/source/report-bugs.html>...
Reading synbols fron
/Volumes/Macintosh/Users/riusksk/Android-Security/android_source/kernel/goldfish/vmlinu
X...done.
gdbs target remote :1234
Error while running hook_stop:
ex00eeeeee in ?? ()
gdb$ c
AC
Program received signal SIGINT, Interrupt.
Error while running hook_stop:
_delay () at arch/arn/1ib/delay-S:48
48
subs re, re, #1
gdbs 1ist
43 * oh, if only we had a cycle counter...
44 */
45
46 @ Delay routine
47 ENTRY(__delay)
8t
subs re, r0, #1
49 #1f θ
50
novls pc, 1r
51
subs re, re, #1
52
novls pc, 1r
gdbs disass
Dump of assembler code for function _delay:
=> @xce1ded24 : subs r0, r0, #1
@xc01ded28 :bh1 @xc01ded24 
exce1ded2c : mov pc, 1r
End of assenbler dump.
到这里，我们可以开始进行Android内核源码的调试之旅了。
---
## Page 511
492漏洞战争：软件漏洞分析精要
10.4智能插座漏洞分析
10.4.1漏洞描述
在GeckPwn2014智能硬件破解大赛上，笔者正是拿本节发现的其智能插座漏洞参赛的，如图
10-37所示。这款智能插座存在多个漏洞，其中一个可以远程控制智能插座的开关，由于其他通信使
用的加密密钥被明文存储在APK包中，导致可通过逆向手段获取，然后用它对操作命令进行加密后
发送给服务端实现控制，返回的响应包也同样可以用前面获取的密钥解密出来。参加比赛前准备了
一个灯泡矩阵，就是在智能插座上放置灯泡，然后开发一个Android应用控制灯的亮灭，从而实现“走
马观灯”的小游戏，感觉比较有极客之感。虽然最终实现了，但在会场由于各种原因，插座无法连
上Wi-Fi完成所有配置，最后只完成单个灯泡的演示。
图10-37GeekPwn2014参赛现场
10.4.2静态逆向分析
用JEB分析某款智能插座的APK包，找到启动时的主Activity（即启动界面），查看
android.intent.action.MAIN与android.intent.Category.LAUNCHER所对应的 Activity(即 首个启动的
Activity），此处找到的是hangzhou.kankun.LoadingActivity，如图10-38所示。
---
## Page 512
第10章Android平台漏润分析493
4A5
图10-38智能插座应用的启动Acitivity
双击左侧栏的LoadingActivity可直接查看其对应的Smali代码（如图10-39所示），此时再按下Tab
键即可得到Java反编译代码，如图10-40所示。从代码中可以发现，它启动另一个
activity：SmartwifiActivity，接着双击它进入其对应的Java反编译代码，在其run函数里可以看到它调用
jnic.encode对传送命令进行加密处理，如图10-41所示。
JEB-MohmeeMgo
Martest
Res
Assets
Stings
vi14o
911
cinit0V
ivsty
L>119,
lasstc
 C1a1>1151455, ￥1+ F9, v2
5. 11V. e, v1.
xception)>
acatraoe ()%, v0
321 (ot)
图10-39LoadingActivity对应的smali代码
---
## Page 513
494漏洞战争：软件漏洞分析精要
HP国CV4POOXNCX
TeeeTypehdagter
Manilest
Reso
pae
cOF-Ar
iaport
nper())
cotenagsr
Setfleetrieityfer
2=1500
01