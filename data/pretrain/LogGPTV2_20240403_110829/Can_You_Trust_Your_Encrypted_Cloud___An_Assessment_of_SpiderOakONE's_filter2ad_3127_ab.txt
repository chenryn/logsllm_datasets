that the adversary can succeed in brute forcing the hash of the password (which
is unavoidable in any password-encrypted protocol), and to allow to reason
about attacks that might give a “constant” (e.g., 103) advantage in succeeding,
which might be considered a breach in practice.
In particular our deﬁnition
c2κ in the winning probability for the adversary that
allows for a “slack term”
represent the base probability for an adversary to brute force a password hash
h = H c(pw) with q queries to H, where the password pw has strength κ and c
denotes the number of iterations of the hash function. The future secure ver-
sion of our deﬁnition captures the natural requirement that, in the case an old
password is leaked to the server, the conﬁdentiality of ﬁles which were uploaded
under a newer password should not be compromised.
As is common in cryptographic deﬁnitions, we require that the adversary
should not be able to learn any information about stored ﬁles, and we capture
this by saying that no adversary should be able to even distinguish between
the encryptions of two known ﬁles. However, in the upcoming sections we will
distinguish between diﬀerent levels to which the deﬁnition can fail. In particular
we will consider:
Password recovery: This is considered a total break of the system, as the
adversary will be able to recover every single ﬁle ever stored by the client;
(As in Attacks 4.2 and 4.3)
File recovery: Here the adversary can completely recover one or more ﬁles;
(As in Attack 4.4)
ρ-Password Weakening: Here the adversary can increase the password guess-
ing advantage. We say that an adversary has succesfully run a ρ-password
weakening attack if, after the attack, the probability that the adversary
wins the distinguishing game is at least
1
2
+
q
c2κ−ρ
i.e., the attack eﬀectively removes ρ bits of security from the password.
Attacks 4.1 and 4.3 are examples of this kind of attacks.
Note that a password recovery attack is (clearly) the most devastating one,
whereas ﬁle recovery attacks and password weakening attacks are somehow in-
comparable: depending on the password strength κ and the factor ρ, a password
weakening attack might have no practical impact (and not be enough to recover
even a single ﬁle) or lead to a complete password recovery (thus allowing to
recover every encrypted ﬁle).
7
Our Model vs. the Real World. One objection to our deﬁnition might
be that an adversary (the server) cannot force the client to run adversarially
chosen subprotocols, however, as detailed later in Section 3.1 this is justiﬁed by
the fact that the client software oﬀers an RPC interface.7
Another objection might be that since SpiderOak is proprietary, the ad-
versary could simply serve a “broken” copy of the client to the user. While
not unheard of (e.g., the Juniper incident [9]), such an attack could be easily
detectable and could potentially ruin the reputation of a service provider. More-
over, this attack could be prevented by making the client version of the software
open source, so that clients can verify that the software they run satisﬁes the
speciﬁcations of the protocol. Therefore, we will not consider this threat in the
paper and assume that the client is able to retrieve an “honest” copy of the
client software, and that only in a second phase the cloud service provider turns
on its users. (This models the natural scenario in which the service provider is
coerced to attack one of its users, or the case in which a company is sold and
therefore a potentially malicious actor gets full control of the server.)
Finally we note that using an encrypted communication channel (e.g., TLS)
between the client and the server does not help towards achieving our secu-
rity deﬁnition. Indeed, the adversary is the intended recipient of the client’s
(password-encrypted) data. On the other hand, using an authenticated and
encrypted channel helps in case where a system is (as we shall see) not secure
according to our deﬁnition, since in this case the use of TLS is necessary to pre-
vent that third parties can impersonate the server and run the attacks against
the client.
To conclude, and in the context of our analysis, our deﬁnition captures
attacks that (in the real world) can be carried out by:
1. A rogue SpiderOak server (e.g., malicious insider or a new owner);
2. A rogue SpiderOak enterprise server (running a local SpiderOak server);
or
3. Anyone else able to impersonate the server towards a client (e.g., by by-
passing certiﬁcate pinning, exploiting possible vulnerabilities in the TLS
implementation, etc.)
Feasibility of the Deﬁnition Before describing how SpiderOak does not
satisfy our deﬁnition of security for PECS, we brieﬂy sketch how one could
build a system which which would satisfy Deﬁnition 1 (this is only meant as
a “sanity check” to justify that our deﬁnition of security is indeed achievable
using standard cryptographic techniques): At the key registration step, the
user should send the hashed version of the password to the server. For user
authentication a Zero-Knowledge identiﬁcation protocol (in the cryptographic
7It is not unreasonable to assume that this applies to some degree in general. E.g., for
applications that support multiple devices (an arguably necessary criteria for a Cloud Storage
application), the server needs to be able to signal device A that a ﬁle was uploaded on device
B, in order to preserve consistency.
8
sense e.g., such as [16]) could be used. All ﬁles should be encrypted by the
client before being uploaded to the server using provably secure encryption
schemes e.g., satisfying the notion of authenticated encryption [24]. To satisfy
future secrecy new ﬁles need to be encrypted using the new password. Note that
our deﬁnition does not require anything of old ﬁles, therefore old ﬁles need not
be downloaded and re-encrypted by the clients—a simple and eﬃcient solution
would involve storing the old password on the server encrypted under the new
password.
3 SpiderOakONE
In this section we provide some high-level background information about the
SpiderOakONE client application in order to allow the reader to understand the
attacks presented later. We describe the oﬀered functionalities, how the client
was reverse-engineered, and the necessary technical details of its inner workings
(authentication, encryption and keys, which will be treated separately). More
technical details about the functioning of the client application can be found in
the Appendix.
3.1 Oﬀered Functionality
The functionality oﬀered by SpiderOakONE is what one would expect from a
PECS: Automatic synchronization of one or more directories, recovery of older
version ﬁles and selective ﬁle sharing (either single ﬁles or whole directories).
SpiderOakONE runs on all major operating systems (MAC OSX, Linux and
Windows). Our analysis focused on the Windows and Linux versions (version
6.1.5 released July 26th, 2016) and we note that there is no discernible diﬀerence
between the clients running on diﬀerent OS’. Although it is possible to use the
SpiderOak website to log into an account, it is not possible to register an account
through their website. It is also not possible to upload ﬁles through their web
interface (as opposed to e.g., Dropbox or Google Drive). The only functionality
oﬀered on their website is viewing of ﬁles that have been shared. (The reason for
this, is that shared ﬁles are not end-to-end encrypted, but are at most protected
by HTTP Basic Authentication. That is, the server has access to all shared ﬁles
in plaintext.)
Mobile client applications for both Android and iOS are also available, al-
though these cannot presently do any encryption or decryption of ﬁles. Their
functionality is, to the best of our knowledge, limited to what their web interface
oﬀers, i.e., viewing of shared ﬁles only.
3.2 Methodology and Reverse Engineering
The SpiderOakONE client is written in Python 2.7 and comes with a collection
of bundled libraries, such as OpenSSL. SpiderOakONE does not employ any
kind of obfuscation, unlike e.g., Dropbox [26], making reverse engineering quite
9
easy using standard oﬀ-the-shelf tools. The Python bytecode ﬁles for the client
is bundled together with the installer, and can be found in a zip archive named
either library.zip or shared.zip, depending on the operating system (the
former being the ﬁle on Linux and the latter Windows). In the end, decompila-
tion of the core client application could be achieved by a small bash script that
uses uncompyle68.
All communication happens over TLS and the client uses certiﬁcate pinning
by default. I.e., the client checks that the incoming server certiﬁcate validates
against a small set of hard-coded certiﬁcates. We also note that certiﬁcate
checking is implemented in a sound way, and that it avoids pitfalls such as
forgetting to check the CN ﬁeld [10]. Communication (below the TLS layer)
happens with either HTTP or a two-way Perspective Broker RPC interface
oﬀered by Twisted9 (two-way since the client can call methods on the server
and vice versa). HTTP is used during authentication and the RPC interface is
used for essentially everything else.
Reading TLS traﬃc. We wrote a small patch for the client that made it
output the TLS master secret of any connection it establishes to a ﬁle. Being
able to read the data that is sent between the client and server was important
to understand what data is being disclosed to the server and to be able to make
educated guesses at the server behaviour (to which we did not have access).
We found that all connections were handled by Twisted and we therefore only
had to patch the code at a single location.
Installation of the patch was in
addition made easier by the aforementioned fact that no obfuscation is used (we
could simply alter the decompiled code and put it back into the compressed
archive in the installation folder). During our inspection of the application, we
also discovered that certiﬁcate veriﬁcation could be turned oﬀ by running the
application with an environment variable SPIDEROAKONE_SSL_VERIFY set to 0.
This fact turned out to be very useful for validating some of our attacks later
on. (Speciﬁcally, it allowed us to conduct Man-in-the-Middle attacks or run
the client against a “rogue” server without performing any modiﬁcations to the
clients code.)
Analysis by printing. We employed what is essentially a “debugging by
printing” technique in order to trace the execution of the client. By utilizing
an already existing logging framework in the application, as well as the fact
that modiﬁcations are easy to make, we could e.g., make the client output the
encryption keys created during the execution of the protocols. Then, given these
keys, we could implement our own decryption routines, which could be tested
for correctness by decrypting the data sent by the client to the server.
8https://github.com/rocky/python-uncompyle6
9https://twistedmatrix.com
10
3.3 Authentication
SpiderOakONE is able to execute diﬀerent authentication protocols depending
on the context and what the server sends. I.e., if the user is creating a new
account, one kind of authentication protocol will be used, and if the user is
logging in with an existing account, another type of protocol will be used. The
(human) user will only be involved in the authentication process if (1) they are
creating a new account, (2) logging into an existing account on a new device, or
(3) if they have chosen to require a password every time the client application
starts (which is non-default behaviour). This section focuses on protocols that
are applicable to only points 1 and 2. Point 3 is treated brieﬂy in the description
of Attack 4.3.
The server has full control over which protocol is actually run. Concretely,
the server will send a short identiﬁer that the client then uses to determine which
protocol it should engage in (that is, there is no protocol negotiation between
client and server similar to what happens in e.g., TLS, SSH, etc.). So even if
some of the protocols we describe were not observed during normal interaction
between the client and server, a malicious server can nevertheless still make a
client engage in the protocol.
We restrict ourselves to describing only two of the four possible protocols in
this section—the protocols presented here are the ones that we will attack later,
and as such, the presentations focus on their ﬂaws. A full technical description
of all four protocols can be found in Appendix B. Also worth mentioning is
that all the authentication protocols used can be categorized as non-standard
or “home-made” (even if sound, provably secure authentication protocols which
allow a client to authenticate itself without revealing any information about the
password exist in the literature).
Authentication using bcrypt. The ﬁrst protocol we describe is fairly simple
and involves the client deriving a bcrypt [30] hash from the user’s password and
a salt supplied by the server. The server then compares this hash with a hash
sent previously by the user. It goes as follows:
Client: Send username usr to the server.
Server: Do a lookup for the bcrypt salt s(cid:48) associated with usr and if found,
return it to the user. Otherwise abort.
Client: Compute h = bcrypt(pw, s) and send h to the server.
Server: Lookup h(cid:48) associated with usr. If h(cid:48) = h consider the user authenti-
cated, otherwise abort.
During account registration, the client will generate a random bcrypt salt
s (with a work factor of 12), compute h = bcrypt(pw, s) and send (h, s) to
the server along with usr. If usr is not already registered, the server will then
associate (h, s) with usr. Immediately afterwards, the client and server will then
run the above protocol. This execution ﬂow essentially encompasses the account
registration phase.
11
A non-default authentication protocol (escrow login). The other au-
thentication protocol we will look at is non-default in the sense that we did
not observe it being used during normal interaction between the server and the
client. For reference, we will call this protocol escrow login. (The format of the
protocol implies that it is used for escrowing keys, and we believe it is used in
SpiderOak’s enterprise product “Groups”.) Nevertheless, since the server gets
to pick which authentication protocol to run, and because this protocol can be
leveraged for a password recovery attack, we will present it here. The technical
details of the protocol can be found in Appendix B.3. The protocol consists of
two steps:
1. Computing a ﬁngerprint on a list lst of public keys obtained from the
server and having the user verify said ﬁngerprint; and
2. Computing a layered encryption of the user’s password pw using the public
keys from lst and returning this encryption to the server.
The rough idea of step 1, is to hash all keys in lst and create a ﬁngerprint using
RFC1751 [11]. For step 2, ﬁrst pw is encrypted using pk1 (i.e., the ﬁrst key in
lst); the result is then encrypted with pk2 and so on. The exact details can be
found in the appendix. The protocol in its entirety proceeds roughly as follows:
Client: Send username usr to the server.
Server: Do a lookup for a list lst containing some number of RSA public keys
pki. Also do a lookup for a string chl. Send (lst, chl) to the client.
User: Compute a ﬁngerprint of lst and show f p to the user. If the user accepts
f p, proceed. Otherwise abort.
Client: If still running. Compute c = Epkn (. . . Epk1 (pw || chl)) using the keys
pki from lst. Send c back to the server.
Our description stops here since, as mentioned, we did not observe the protocol
during normal interaction between the client and server and thus cannot say
what is supposed to happen on the server side after the it receives c. However,
the description above will be suﬃcient for the purpose of demonstrating the
attack against the client.
3.4 Keys and Secrets
SpiderOakONE creates and maintains several diﬀerent secrets used for IV gen-
eration10, key generation, encryption, authentication and as KDF salts. Some
of these values will be public, in the sense that both the client and server know
them; the rest will be private, i.e., the server knows only an encryption of those
values. From a high-level point of view, it is possible to divide these secrets into
three groups, depending on when they are created:
10SpiderOakONE uses a SIV scheme [32]. Concretely, IVs are generated as H(id || miv)
where id is e.g., the unique id for the content and miv is a per-account random string (long-
term secret).
12
Password
Long term secrets
dk1
dk2
. . .
dkn
{k1,i}m1
i=1
{k2,i}m2