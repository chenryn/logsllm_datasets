                - logs:PutLogEvents
                Resource: !Sub ${EcsCapacityLogGroup.Arn}
  ...
  ...
```
# 测试集群容量计算
您已经添加了计算集群容量所需的代码，并确保您的 Lambda 函数具有适当的权限来查询 ECS，以确定集群中所有 ECS 容器实例的当前容量。您现在可以使用`aws cloudformation deploy`命令部署您的更改，一旦部署完成，您可以通过停止在 todobackend ECS 集群内运行的任何 ECS 任务来再次测试您的 Lambda 函数。
如果您查看 Lambda 函数的 CloudWatch 日志，您应该会看到类似于这里所示的事件:
![](img/ce9d382e-863a-4cc2-a461-e0cb3898e99e.png)
请注意，当您停止 ECS 任务时(如停止任务事件所示)，Lambda 函数报告的 CPU 容量为 4，内存容量为 2，总容量为 2，这是每个计算出的资源容量的最小值。
如果你仔细检查一下，你会发现计算是准确无误的。对于初始事件，由于您停止了 ECS 任务，因此没有任务在运行，因此可用的 CPU 和内存资源分别为 1，024 个单位和 993 MB(T2 . micro 实例的容量)。这相当于以下容器容量:
*   中央处理器容量= 1024 / 250 = 4
*   内存容量= 993 / 400 = 2
当 ECS 自动替换停止的 ECS 任务时，您可以看到集群容量下降，因为一个新的 ECS 任务(具有 250 个 CPU 单元和 400 MB 内存)现在正在消耗资源:
*   CPU 容量= 1024 - 250 / 250 = 774 / 250 = 3
*   内存容量= 993 - 400 / 400 = 593 / 400 = 1
最后，您可以看到，当您停止 ECS 任务时，总空闲主机容量被正确计算为 1.0，这是正确的，因为当时您的群集上没有运行任何 ECS 任务。当 ECS 替换停止的任务时，总体空闲主机容量减少到 0.5，因为就内存资源而言，ECS 容器实例现在正在运行单个实例上最多可以运行的两个 ECS 任务中的一个。
# 发布自定义云观察指标
此时，我们正在计算适当的指标，以确定何时需要在集群中进行横向扩展或纵向扩展，该功能中需要执行的最后一项任务是发布定制的 CloudWatch 事件指标，我们可以使用这些指标来触发自动扩展策略:
```
...
...
Resources:
  ...
  ...
  EcsCapacityFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - EcsCapacityLogGroup
    Properties:
      Role: !Sub ${EcsCapacityRole.Arn}
      FunctionName: !Sub ${AWS::StackName}-ecsCapacity
      Description: !Sub ${AWS::StackName} ECS Capacity Manager
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          ecs = boto3.client('ecs') cloudwatch = boto3.client('cloudwatch') # Max memory and CPU - you would typically inject these as environment variables
          CONTAINER_MAX_MEMORY = 400
          CONTAINER_MAX_CPU = 250          ...
          ...
          # Lambda entrypoint
          def handler(event, context):
            print("Received event %s" % json.dumps(event))            ...
            ...# STEP 3 - CALCULATE IDLE HOST COUNT            idle_hosts = min(
              cpu_capacity / int(instance_max_cpu / CONTAINER_MAX_CPU),
              memory_capacity / int(instance_max_memory / CONTAINER_MAX_MEMORY)
            )
            print("Overall idle host capacity of %s" % idle_hosts)
 # STEP 4 - PUBLISH CLOUDWATCH METRICS
 cloudwatch.put_metric_data(
 Namespace='AWS/ECS',
 MetricData=[
              {
                'MetricName': 'ContainerCapacity',
                'Dimensions': [{
                  'Name': 'ClusterName',
                  'Value': cluster.split('/')[-1]
                }],
                'Timestamp': datetime.datetime.utcnow(),
                'Value': container_capacity
              }, 
              {
 'MetricName': 'IdleHostCapacity',
 'Dimensions': [{
 'Name': 'ClusterName',
 'Value': cluster.split('/')[-1]
 }],
 'Timestamp': datetime.datetime.utcnow(),
 'Value': idle_hosts
 }
            ])
      Runtime: python3.6
      MemorySize: 128
      Timeout: 300
      Handler: index.handler
...
...
```
在前面的示例中，您使用 CloudWatch 客户端`put_metric_data`函数来发布 AWS/ECS 命名空间内的`ContainerCapacity`和`IdleHostCapacity`自定义指标。这些度量是根据由集群名称维度名称指定的 ECS 集群来确定的，并且仅限于 todobackend 和 ECS 集群。
确保 Lambda 函数正确运行所需的最后一项配置任务是授予函数发布 CloudWatch 度量的权限。这是通过向您在前面的示例中创建的`EcsCapacityRole`添加适当的 IAM 权限来实现的:
```
...
...
Resources:
  ...
  ...
  EcsCapacityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: EcsCapacityPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: PublishCloudwatchMetrics
 Effect: Allow
 Action:
 - cloudwatch:putMetricData
 Resource: "*"
              - Sid: ListContainerInstances
                Effect: Allow
                Action:
                  - ecs:ListContainerInstances
                Resource: !Sub ${ApplicationCluster.Arn}
              - Sid: DescribeContainerInstances
                Effect: Allow
                Action:
                  - ecs:DescribeContainerInstances
                Resource: "*"
                Condition:
                  ArnEquals:
                    ecs:cluster: !Sub ${ApplicationCluster.Arn}
              - Sid: ManageLambdaLogs
                Effect: Allow
                Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: !Sub ${EcsCapacityLogGroup.Arn}
  ...
  ...
```
如果您现在使用`aws cloudformation deploy`命令部署您的更改，然后停止正在运行的 ECS 任务，在切换到 CloudWatch 控制台后，您应该能够看到与您的 ECS 集群相关的新指标正在发布。如果您从左侧菜单中选择**指标**，然后在**所有指标**下选择 **ECS >集群名称**，您应该会看到您的自定义指标(`ContainerCapacity`和`IdleHostCapacity`)。下面的屏幕截图显示了根据一分钟内收集的最大值绘制的这些指标。在图表上的 12:49，您可以看到当您停止 ECS 任务时`ContainerCapacity`和`IdleHostCapacity`指标都增加了，然后一旦 ECS 开始新的 ECS 任务，这两个指标的值就会随着新的 ECS 任务从您的集群中分配资源而减少:
![](img/59c87186-8313-4217-ba03-df4041c220e8.png)
# 为集群容量管理创建云监控警报
现在，只要您的 ECS 集群中发生 ECS 容器实例状态更改，您就能够计算和发布 ECS 集群容量指标。整体解决方案的下一步是实现 CloudWatch 警报，每当指标超过或低于与集群容量相关的指定阈值时，该警报将触发自动扩展操作。
下面的代码演示了如何将两个 CloudWatch 警报添加到 todobackend 栈中:
```
...
...
Resources:
  ...
  ...
 ContainerCapacityAlarm:
 Type: AWS::CloudWatch::Alarm
 Properties:
 AlarmDescription: ECS Cluster Container Free Capacity
 AlarmActions:
        - !Ref ApplicationAutoscalingScaleOutPolicy
 Namespace: AWS/ECS
 Dimensions:
 - Name: ClusterName
 Value: !Ref ApplicationCluster
 MetricName: ContainerCapacity
 Statistic: Minimum
 Period: 60
 EvaluationPeriods: 1
 Threshold: 1
 ComparisonOperator: LessThanThreshold
 TreatMissingData: ignore
 IdleHostCapacityAlarm:
 Type: AWS::CloudWatch::Alarm
 Properties:
 AlarmDescription: ECS Cluster Container Free Capacity
 AlarmActions:
        - !Ref ApplicationAutoscalingScaleInPolicy