program code and read-only data as well as read-
write sections for the data region and the common 
heap. Ignoring other memory areas that are not 
executable, such as the so-called IO-Memory, an 
area dedicated to packet handling on the router, the 
image's internal layout is the only deciding factor on 
the resulting memory layout on the router.
This poses a tremendous challenge for the exploit 
developer when control over the instruction pointer is 
achieved: Where should it point to?
Since the stack of any IOS process is an arbitrarily 
allocated block of memory on the heap, its location is 
random enough to make it unpredictable. 
Techniques like Heap spraying only apply to 
situations where the attacker executes a large 
amount of control over the target, which is clearly not 
the case when attacking networking equipment. This 
leaves only the class of “code reuse” methods, which 
use existing code on the target to perform their initial 
bootstrapping before running attacker provided code.
4.1
Return into Known Code
Using any “code reuse” method requires to know the 
exact location of the code that should be reused. 
This holds true for calling known functions with an 
attacker prepared stack layout as well as for the 
technique known as Return Oriented Programming5. 
Unfortunately, Cisco IOS images are built individually 
by Cisco engineers and the image content, and 
hence internal layout, depends on:
•
Target Cisco platform
•
Major Version
•
Minor Version
•
Image Train
•
Release Version
•
Combination of features
When querying the Cisco Feature Navigator6 for all 
known images that support a feature known as “IP 
5
https://www.blackhat.com/presentations/bh-usa-
08/Shacham/BH_US_08_Shacham_Return_Oriented_Progra
mming.pdf
6
http://www.cisco.com/go/fn
Recurity Labs GmbH – http://www.recurity-labs.com
6/10
Cisco IOS Router Exploitation 
routing” (the most basic functionality on any router), 
the result shows 272722 different IOS images at the 
time of this writing. Taking the 7200er platform alone 
as an example,15878 images are available. This 
presents a higher uncertainty about the memory 
layout than any of the address space layout 
randomization (ASLR) implementations that are in 
use today on common operating system platforms.
Additionally, and in contrast to ASLR, an attacker 
wishing to leverage “code reuse” on Cisco IOS 
images will need to have a copy of the same for 
analysis purposes. However, IOS images are 
actually a product of Cisco Systems and therefore 
not legally available for free. Some special image 
series are not available to anyone outside special 
interest groups, such as the military or law 
enforcement.
4.2
Returning to ROMMON
To overcome the problem of high uncertainty in 
memory layout, a memory section is required that 
allows execution of its contents as code and 
preferably already contains code at a stable location.
Cisco routers use a piece of code called ROMMON 
as the initially available code to execute after the 
CPU has been reset. ROMMON is screened into 
memory at the initial reset vector and serves as 
bootstrapping code for IOS. The ROMMON also 
contains functionality for disaster recovery (allowing 
to load a new image when the available one is 
broken or corrupted) as well as some basic setup 
functions.
On the Cisco platforms reviewed by the author, 
ROMMON is placed the uppermost memory regions 
after the CPU's virtual addressing and address 
translation has been initialized to match the IOS 
image's memory map. Therefore, its location is 
known and invariant.
The factor decisive for using ROMMON as return 
point is the relatively small number of versions 
published for each router platform. Taking the 2600 
access router platform as an example, there are 8 
different versions of ROMMON known to the author. 
With a few exceptions due to hardware support 
added into later ROMMON versions, deployed 
infrastructure equipment rarely receives ROMMON 
upgrades. Therefore, the large majority of the routers 
runs the ROMMON version that was current when 
the equipment was manufactured. Since such 
equipment is usually ordered in bulk when new 
infrastructure is installed, the versions will neither 
differ nor will later versions be very common, 
because the initial version will be sold the most.
Applying Return Oriented Programming to the code 
found in ROMMON, it has been shown7 that 32 Bit 
arbitrary memory writes to the memory area that 
contains the exception handlers can be used on 
PowerPC and MIPS based Cisco routers to gain 
reliable code execution with stack based buffer 
overflows. 
The method employs returns into function epilogues 
that perform a memory write to a register that was 
controlled by the attacker already, with the contents 
of another register under the attacker's control. On 
PowerPC, these are usually registers that, by the 
PowerPC ABI, should be saved across function 
boundaries (i.e. R13 to R31).
Beneficial for the attacker is the fact that ROMMON 
also contains code used to disable the instruction 
and data cache of the CPU, allowing to write data 
and directly afterwards execute it as code without 
cache consistency issues.
7
http://cir.recurity.com/wiki/PPCreliableCodeExec.ashx
Recurity Labs GmbH – http://www.recurity-labs.com
7/10
Cisco IOS Router Exploitation 
4.3
ROMMON Uncertainty 
The method of employing ROMMON as the vehicle 
of choice for more reliable code execution has a 
couple of drawbacks.
The first is connected to the uncertainty about how 
many versions of ROMMON are to be found in the 
wild when dealing with any Cisco router platform. 
Low end routers usually don't support upgrading 
ROMMON, so not even the vendor web site will give 
an indication on which versions are to be expected. 
Even when updates are available for the platform, it 
is not known how many other versions were initially 
shipped.
Second, the exploit developer will need to obtain a 
copy of every ROMMON he knows of for the platform 
he is targeting. Since the initial versions (the ones 
with the widest distribution) are never available for 
download, this involves obtaining temporary access 
to routers that run the most common versions. 
Additionally, it will be generally hard to say which is 
the most common version.
It should also be noted that an attacker will still need 
to know the hardware platform of the Cisco router he 
is attacking, since this will decide the ROMMON 
memory layout as well as the instruction set for the 
attacker provided code (i.e. PPC vs. MIPS).
The third issue with the ROMMON based method is 
the inability to ensure the right addresses are used 
before the exploit is launched. Applicable 
vulnerabilities and reliable exploits against Cisco 
equipment have a high monetary value at the time of 
this writing. Accordingly, attackers in the possession 
of such an item would rather like to ensure that they 
will use the right set of addresses before launching 
the exploit and risking the target to reboot, giving 
away their presence as well as the valuable exploit 
itself.
4.4
Code Similarity Analysis
Another approach actively researched by the author 
is finding similarities across a set of IOS images. 
While the images theoretically differ completely from 
each other, it can be assumed that images of the 
same version but different feature sets, as well as 
images with the same feature set and slightly 
different release version may contain code sections 
that differ only slightly. 
At the time of this writing, outcomes of this research 
are not available yet.
5 Shellcode
The final area in which exploitation of network 
infrastructure equipment differs significantly from 
exploitation of network leaf nodes is the attacker 
provided code. 
It is common practice within exploitation of network 
leaf nodes to spawn a shell back to the attacker, 
either by making it available on a TCP port or by 
connecting back to the attacker's host. Similar 
shellcode has been shown for specific IOS images. 
An alternative method, which proved to be more 
reliable than a “bind shell”, is to rely on the fact that 
almost any Cisco IOS router will already have a 
remote shell service configured, either via Telnet or 
SSH. By removing the requirement to authenticate 
on said shell, either through patching the code that 
performs the validation or by modifying entries in the 
data structures that hold the authentication 
configuration for remote terminals, it is easy to use 
the existing service for obtaining a remote shell.
Recurity Labs GmbH – http://www.recurity-labs.com
8/10
Cisco IOS Router Exploitation 
Once a privileged interactive shell is obtained on a 
Cisco IOS router, the attacker can use all the 
functionality provided by IOS to fulfill his goals. 
Alternatively, the attacker provided code can already 
implement the desired application of IOS 
functionality, without requiring the attacker to 
connect to a shell and manually change the 
configuration.
However, this brings up the question of what could 
be of interest to an attacker?
5.1
Arbitrary Services using TCL
An increasing number of deployed IOS images 
support scripting from the command line by using 
TCL scripts. This feature is mostly used to automate 
monitoring of the device or automatically act upon 
certain log messages encountered.
However, it has been shown8 that TCL scripts can be 
used for implementing more complex services, 
including implementation of Botnet clients or making 
the router participate in the Twitter service.
As the number of TCL controllable functionality in 
Cisco IOS increases, attackers may well find 
everything they need for the purpose of “regular” on-
line crime and fraud by using customized TCL scripts 
for IOS.
5.2
Ultimate Sniffer
It is naïve to assume that a router under an 
attacker's control can easily be turned into the 
ultimate password sniffer. Referring back to the 
packet handling of IOS discussed in 2.3, only a 
fraction of the traffic is ever visible to the main CPU, 
which is the context of the executed attacker code. 
8
http://ph-neutral.darklab.org/talks/christoph.html
Additionally, the run-to-completion scheduler will 
make the implementation of a password sniffer most 
challenging. Considering that productive IOS routers 
of larger types are usually running with their regular 
CPU utilization well within 40%-60%, the additional 
load would immediately kill the machine. Even if the 
CPU resources would be sufficient to perform 
password sniffing, the sudden increase in traffic 
latency due to all packets getting “punted” will 
immediately attract the network engineers attention.
This is an area where the introduction and wide 
scale deployment of lawful interception enabled IOS 
images within carrier networks may potentially have 
an impact besides the intended. LI functionality is 
required to be transparent to the network engineer, 
i.e. he should not be able to observe an active 
interception. LI is also designed to most efficiently 
and selectively copy traffic matching a certain 
interception rule to a third party as well. When this 
functionality is available within the image and the 
attacker is aware of how to control it (e.g. by calling 
the appropriate functions that would otherwise be 
triggered through the SNMPv3 CISCO-TAP-MIB and 
CISCO-TAP2-MIB), he is in the position to 
selectively monitor traffic that is of interest to him on 
any remote system that the compromised router can 
reach.
5.3
MITM Tool
Similar to the sniffer scenario, a compromised router 
of sufficient importance cannot be easily converted 
into a MITM tool, as the same limitations apply that 
prevent if from being the ultimate sniffer.
However, it is possible with some lines of Cisco IOS 
routers and images to use Access Control Lists 
(ACL) to match certain traffic and apply special 
behavior to it. This functionality could be used within 
Recurity Labs GmbH – http://www.recurity-labs.com
9/10
Cisco IOS Router Exploitation 
shellcode to obtain packets that contain information 
relevant to the attacker, with the strict limitation that 
the first packet in the conversation must already 
contain that information of interest. Since the first 
packet is very likely to get “punted” anyway, the 
performance impact should be minimal.
As an example, any protocol that relies on a 
sequence number, query ID or other value only 
known to sender and receiver to prevent spoofing 
(e.g. TCP, DNS) could be matched and the relevant 
number pushed out to the attacker. In this scenario, 
the attacker would be able to arbitrarily spoof DNS 
replies or inject data into TCP sessions, since the 
secret value is now know to him.
5.4
Selective Redirection
One of the more trivial uses of a compromised router 
is to selectively redirect clients that attempt to 
communicate with a specific IP address or range. 
This is part of the core functionality of a router and 
therefore does not pose any problems to the 
attacker, while being relatively hard to identify for the 
network engineer when not done by configuration 
changes.
Selective redirection is known9 to be a simple and 
effective tool to prevent regular users from using web 
sites and services with encryption (HTTPS), as most 
users first hit the unencrypted HTTP port and expect 
to be redirected but fail to recognize when that's not 
the case.
5.5 Other Uses
This paper highlights a number of issues with 
exploitation of Cisco IOS routers. Since stable 
exploitation is a prerequisite to deploying smart 
9
http://www.blackhat.com/html/bh-europe-09/bh-eu-09-
speakers.html#Marlinspike
shellcode, it is likely that, once some of the problems 
discussed have been solved, more practical 
approaches to the use of compromised routers are 
developed.
6 Conclusion
As interest in attacking network infrastructure 
equipment increases, new players in the field will 
face the issues discussed in this paper, as well as 
some that are unknown to this day. It is the strong 
believe of the author that only be realizing the 
problems of the offensive party, that we can 
anticipate potential ways the attackers will be taking 
in order to circumnavigate or solve these problems.
When reliable exploitation and independence or 
semi-independence from the vast variance of IOS 
images has been achieved by an attacker, enterprise 
and carrier networks need to be prepared to change 
the way and frequency they select and deploy IOS 
images. This can only be achieved if Cisco changes 
the way they release images, providing clear and 
proven update paths that allow a large organization 
to update to a new IOS version without the issues 
normally connected with such exercise. 
In today's Cisco router networks, updating breaks the 
network's functionality, preventing networking 
engineers from maintaining recent versions of IOS 
on their routers. This fact is leaving the network 
vulnerable to attacks, because the availability of the 
network is of significantly higher value than the 
integrity of its core nodes.
Recurity Labs GmbH – http://www.recurity-labs.com
10/10