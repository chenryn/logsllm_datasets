limitations arise from the fact that SDN-enabled hardware switches
achieve wire-speed packet processing using Ternary Content Ad-
dressable Memory (TCAM), which is costly and power hungry.
Finally, Zhang et al. demonstrated that hosts do not need to directly
send packets to switches to overload them [54]. Instead, hosts can
trigger the controller into sending a sufficient number of packets
to overload switches more effectively.
2Open vSwitch supports OpenFlow 1.4 protocol (and earlier).
Insecure mechanisms to track link latencies. As previ-
5.1.1
ously described, TopoGuard+ relies on the LLI module for measur-
ing the latency of the inter-switch links.
In TopoGuard+, LLDP packets contain a fresh encrypted time-
stamp so that the controller can measure the overall time between
sending and receiving an LLDP packet, (i.e., TLLDP ). For computing
the latency of an inter-switch link (e.g., TS1−S2), the controller
subtracts the latencies of the control links (i.e., TS1 and TS2) from
TLLDP (see Figure 4). The LLI module then compares TS1−S2 with
a threshold that is determined using an interquartile range of the
list of valid latencies (see Algorithm 1). If TS1−S2 is within the
valid range of latencies, the LLDP packet is processed correctly and
TS1−S2 is added to the list of valid latencies. Otherwise, TopoGuard+
raises an alert and removes the link if the failure persists over time.
Figure 4: Link Latency Inspector (LLI) module. The latency
of the link between S1 and S2, TS1−S2, is obtained as follows:
TS1−S2 = TLLDP −TS1−TS2. TLLDP is the time between sending
and receiving an LLDP packet at the controller. TS1 and TS2
are the control link latencies of S1 and S2, respectively.
Algorithm 1 Procedure to compute the threshold
q1 ← quartile(latency_list, 25)
q3 ← quartile(latency_list, 75)
interquartile_range ← q3 − q1
threshold ← q3 + 3 ∗ interquartile_range
1: if delay != 0 then
2:
3:
4:
5:
6: if delay > threshold then
7:
8: else
9:
stop processing LLDP packet
add delay to latency_list
Below, we present two attacks against the LLI module where
adversaries influence the link latencies to remove genuine links or
to create fake ones.
Attack 1. We discovered a new attack against TopoGuard+ that
allowed us to remove genuine links between switches. Our attack
leverages the fact that the controller removes existing links if their
latency is above the threshold in a few LLDP rounds.
SDNControllerSwitchS2SwitchS1SwitchS3p2p1 p2 p2 TS2TS1-S2TS1TLLDPOpenFlowTMlinkDatalinkWithout loss of generality, let us describe the proposed attack
using the network topology shown in Figure 5a. During normal ex-
ecution, we observed that the latency of the links between switches
was approximately 4 ms (see third line in Figure 5b). Neverthe-
less, we found a way to increase the latency of the links between
switches using H1.
Initially, we conducted a series of experiments with different
numbers of packets and time between packet bursts then measured
how each strategy affected the latency of the inter-switch links.
Based on our experiments, we chose the smallest number of packets
that can sufficiently overload S2 to drop its links to other switches.
Specifically, we injected bursts of 100 packets every 1 s with spoofed
source MAC addresses and the destination MAC address of H2. This
forced S2 to constantly request new flow rules to the controller,
consuming a significant amount of its resources. Figure 5 shows
that TopoGuard+ started to report errors due to high latencies
(around 140 ms) and shortly after it began to remove the affected
links. Even if TopoGuard+ re-discovers these links after our attack,
we observed that this causes the controller to lose all the previous
information about them.
Attack 2. Recently, Shrivastava et al. were able to perform a
relay-based link fabrication attack against TopoGuard [39]. Yet,
this is no surprise since TopoGuard was not designed to preclude
those attacks. In this paper, we demonstrate that TopoGuard+ is
also vulnerable despite the effort of their authors to protect against
such attacks. In order to execute our attack, adversaries need to
increase the latency threshold until it becomes comparable to the
latency of their out-of-band-channel. However, this is not an easy
task since the latency threshold (i) depends only on the latencies of
the links that were previously marked as valid and (ii) is computed
using an interquartile range, which helps finding outliers.
Without loss of generality, let us describe our attack using the
network topology shown in Figure 5a. An adversary who controls
H1 can send a large number of packets to S2, resulting in an abrupt
increase in its resource consumption. Consequently, S2 either pro-
cesses the LLDP packets very slowly or drops them. Using this
method, the adversary cannot increase the latency threshold at her
will since the latency of the LLDP packets traversing S2 will fall
outside the range of valid latencies. Instead, the adversary should
opt for carefully overloading S2 over a longer period of time, in-
creasing the time it takes for S2 to process the LLDP packets only
slightly each time. By repeatedly doing so, adversaries can delay
LLDP packets in such a way that the latency threshold is gradu-
ally increased. As TopoGuard+ uses a single latency threshold for
the network, adversaries can mount this attack regardless of their
location within the network.
5.1.2 Lack of freshness in LLDP packets. In TopoGuard+, the
controller appends a MAC tag – computed over the DPID and the
port number of the source switch – to all LLDP packets. While
the authors of TopoGuard+ stated that it is essential to protect
the integrity of LLDP packets, their approach lacks freshness. This
makes it possible to reuse MAC tags to create valid LLDP packets.
(a) Malicious H1 overloads S2.
10:31:38.915 INFO LINK delay between sw 3 and 2 is okay. delay:1ms, threshold:9ms
10:31:38.917 INFO LinkLatencyQueue.size: 395
10:31:38.918 INFO LINK delay between sw 1 and 2 is okay. delay:4ms, threshold:9ms
10:31:38.918 INFO LinkLatencyQueue.size: 396
10:31:38.918 INFO LINK delay between sw 2 and 1 is okay. delay:5ms, threshold:9ms
10:31:38.918 INFO LinkLatencyQueue.size: 397
10:31:38.918 INFO LINK delay between sw 2 and 3 is okay. delay:4ms, threshold:9ms
10:31:53.923 INFO LinkLatencyQueue.size: 398
...
10:33:24.303 ERROR Detected suspicious link discovery: abnormal delay during LLDP propagation
10:33:24.303 ERROR LINK sw 2 and 3
10:33:24.303 ERROR Link delay is abnormal. delay:82ms, threshold:9ms
10:33:24.303 ERROR Detected suspicious link discovery: abnormal delay during LLDP propagation
10:33:24.303 ERROR LINK sw 3 and 2
10:33:24.303 ERROR Link delay is abnormal. delay:142ms, threshold:9ms
10:33:24.303 ERROR Detected suspicious link discovery: abnormal delay during LLDP propagation
10:33:24.303 ERROR LINK sw 2 and 1
10:33:24.303 ERROR Link delay is abnormal. delay:145ms, threshold:9ms
10:33:24.304 ERROR Detected suspicious link discovery: abnormal delay during LLDP
propagation
10:33:24.304 ERROR LINK sw 1 and 2
10:33:24.304 ERROR Link delay is abnormal. delay:143ms, threshold:9ms
...
10:33:54.081 INFO Inter-switch link detected: Link [src=00:00:00:00:00:00:00:02 outPort=4,
dst=00:00:00:00:00:00:00:01, inPort=1]
10:33:54.081 INFO LinkLatencyQueue.size: 403
10:33:54.081 INFO Inter-switch link detected: Link [src=00:00:00:00:00:00:00:01 outPort=1,
dst=00:00:00:00:00:00:00:02, inPort=4]
10:33:54.081 INFO LinkLatencyQueue.size: 404
10:33:54.081 INFO Inter-switch link detected: Link [src=00:00:00:00:00:00:00:03 outPort=1,
dst=00:00:00:00:00:00:00:02, inPort=3]
10:33:54.082 INFO LinkLatencyQueue.size: 405
10:33:54.082 INFO Inter-switch link detected: Link [src=00:00:00:00:00:00:00:02 outPort=3,
dst=00:00:00:00:00:00:00:03, inPort=1]
10:33:54.088 INFO LinkLatencyQueue.size: 406
(b) Floodlight log console. Initially, the latencies of the inter-switch
links (i.e., S1-S2 and S2-S3) are valid and hence they are added to the
latency list. Subsequently, LLI detects a number of links with higher la-
tencies and stops processing the corresponding LLDP packets. After a
few LLDP iterations (approximately 20 s later), the controller removes
the links between S1-S2 and S2-S3 and then re-discovers the links as
new links.
Figure 5: Attack against the Link Latency Inspector (LLI)
module proposed by TopoGuard+. (5a) Network scenario.
(5b) Log console.
SDNControllerSwitchS2SwitchS1SwitchS3p1p4 p3 p1 p1 Host1Host2p2 OpenFlowTMlinkData linkOverloaded switchAttack. We tested the feasibility of this attack using our hard-
ware SDN network comprising two hosts, three switches and a
controller running TopoGuard+3 (see Figure 6). Our goal was to
create a fake unidirectional link from S3 to S1 using two malicious
hosts (H1 and H2) that can communicate over an out-of-band chan-
nel. Note that we assume that the ports of the switches where H1
and H2 are connected are initially set to HOST.
(a) H2 sends the MAC tag of S3-Port1 inside the LLDP
packet to H1 such that the latter can forge valid LLDP
packets as if they originated from S3 port 1.
(b) H1 modifies the LLDP packet that it receives from
S1. It keeps all the fields excluding the Chassis ID and
the DPID, which are easily derivable, and learns the
valid MAC tag from H2.
Figure 6: Link fabrication attack against TopoGuard+ where
adversaries manage to forge valid LLDP packets.
As in the port amnesia attack proposed in TopoGuard+, the
first step of our attack is to disconnect and reconnect the network
interfaces of both hosts (e.g., by unplugging the cables). This causes
the controller to reset their port type to ANY. For our attack to
succeed, the resetting needs to be done before an LLDP round starts
so that the CMM module does not flag these events as suspicious.
Then, H2 waits to receive an LLDP from the controller, which
contains a valid MAC for the corresponding DPID and port number
of S3, i.e., the source switch. At this point, H2 sends the valid
MAC tag to H1 over the out-of-band channel. Due to the lack of
freshness, the MAC tag needs to be exchanged only once. Upon
learning the MAC, H1 can successfully send LLDP packets as if
3We downloaded the source code of TopoGuard+ from its public repository in Git [49]
on Oct 2nd, 2018.
they were originating from S3 port 1. This triggers the controller
into believing that there is a real unidirectional link from S3 to S1.
We want to highlight that, as the process of creating this link does
not involve relaying LLDP packets, the LLI module is not capable
of detecting our attack.
5.2 Stealthy Probing-Based Verification (SPV)
By conducting a thorough analysis of SPV, we found two weak-
nesses in the way the probing packets are generated and sent to
the switches. These vulnerabilities mainly stem from the fact that
network traffic is not completely random in practice. Therefore, any
defence that uses probing packets is likely to have similar issues to
the ones we identified in SPV.
Insufficient obfuscation in the probing packet. SPV pe-
5.2.1
riodically verifies the legitimacy of all inter-switch links by sending
probing packets that resemble normal traffic. Yet, probing packet
generation is a very fragile task since ideally it requires (i) having
a large amount of network traffic sent by hosts and (ii) obfuscating
the probing packets at different levels.
Attack. To validate a link while concealing the probing packet
from adversaries, SPV should ideally send the probing packets at
random times. However, as SPV uses newly discovered links before
verifying them, it is likely that one of the first packets sent to this
link is a probing packet. Clearly, it is undesirable to use an unverified
link for a long time. This observation reduces the randomness of the
process and increases the chances that adversaries can identify the
probing packets. To further improve their chances, adversaries who
control a large set of malicious hosts can inject enough packets in
the network to influence the generation of probing packets. These
packets can contain Ethernet_type and Payload size fields that
are unique in the network. In both cases, whenever adversaries
receive a packet that is likely to be a probing packet, they can simply
forward it over the out-of-band channel. As discovered links are
used before SPV verifies them, even if adversaries fail to infer some
probing packets, they can still have a sufficiently large time window
to perform their attacks.
The previous two observations show that it is very difficult to
create probing packets that resemble normal traffic regardless of
how these are created.
5.2.2 Use of the LineSweep algorithm. Another important weak-
ness of SPV originates from the use of the LineSweep algorithm for
generating new probing packets when the initial probing packet
fails to arrive to the destination. The LineSweep algorithm takes
the initial probing packet and slightly modifies it such that the
new probing packet is not completely different than the initial one.
Concretely, it chooses new IP and MAC addresses that are adjacent
to the ones used in the first probing packet, e.g., in the same subnet.
Attack. The use of the LineSweep algorithm can expose useful
information to infer what packets are used for validating a link. In
a large network with many hosts, the probability of two hosts con-
nected to the same switch having adjacent IP and MAC addresses
is very low. Following this reasoning, adversaries can initially drop
the traffic they receive – including the first probing packet – and
wait until the second probing packet is sent. As the subsequent
SwitchS21p1 SwitchS1SwitchS3Host1Host2p2p1 p2 p2 234p1 SDNController21OpenFlowTMlinkData linkFake data linkLLDP packetLLDPpacketmodificationMAC tag of S3Port 1 is MACDPID_S3,1LLDP from S1-Port 1:-Chassis ID = chassis_ID_S1-Port ID = 1-OptTLV list:-DPID = DPID_S1-MAC = MACDPID_S1, 1-EncTimestamp= t-…FAKELLDP from S3-Port 1:-Chassis ID = chassis_ID_S3-Port ID = 1-OptTLV list:-DPID = DPID_S3-MAC = MACDPID_S3, 1-EncTimestamp= t-…probing packets will have almost identical IP and MAC addresses,
adversaries can identify and relay these probing packets using their
out-of-band channel. This way, adversaries can extend the time
window the controller uses this link for routing purposes before it
is removed from the network.
5.3 SecureBinder
SecureBinder thwarts host location hijacking attacks using a slightly
different version of a legacy 802.1x authentication protocol. We
acknowledge that SecureBinder clearly enhances the security of
the actual binding mechanisms in SDN. Nevertheless, we identified
two potential weaknesses in the way the modified legacy version
of the 802.1x authentication protocol is used.
5.3.1 Disconnect the good and connect the bad. SecureBinder
is an extension of a standard legacy 802.1x authentication protocol
that allows hosts to authenticate to the network. Before a host is
authenticated, the switch port where the host is connected accepts
only “authentication traffic” (i.e., 802.11x frames). In the 802.1x
protocol used by SecureBinder, hosts are authenticated only once
each time they change their location in the network (instead of in
every packet). The choice of extending a legacy 802.1x protocol
was motivated by the fact that per-message authentication would
incur a large overhead in the controller. However, we observed that
this decision comes with important security implications.
Our hypothesis was that, if adversaries can connect a (malicious)
host to the network location where the victim’s host is located
without triggering a port-down, they can bypass SecureBinder and
join the network without needing to authenticate themselves to