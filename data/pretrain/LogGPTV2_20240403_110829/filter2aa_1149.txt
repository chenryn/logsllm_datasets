### Module 1: A Journey from High-Level Languages to Running Processes

**Overview:**
This module explores the transition from high-level programming languages, through assembly, to the creation and execution of shellcode. The content is based on the GitHub repository: [https://github.com/hasherezade/malware_training_vol1](https://github.com/hasherezade/malware_training_vol1).

### Creating Shellcodes

#### Shellcode: Advantages
- **Self-sufficient:** Easy to inject into other applications.
- **Compact:** Can fit into small spaces, such as section caves.
- **Loader Functionality:** Can be used as a loader to inject additional modules.
- **Full Malicious Functionality:** In some cases, the entire malicious functionality can be implemented as shellcode (e.g., Fobber malware).
- **Historical Relevance:** Popular in the past during the virus era, where malware was often added to existing PE files rather than injected into processes.

#### Differences Between PE Files and Shellcode

| Feature | PE File | Shellcode |
|---------|---------|-----------|
| **Loading** | Via Windows Loader | Custom, simplified; must parasitize an existing process (e.g., via code injection and thread injection) |
| **Composition** | Sections with specific access rights, carrying various elements (code, data, resources, etc.) | Usually all in one memory area (read, write, execute) |
| **Relocation to Load Base** | Defined by relocation table, applied by Windows Loader | Custom; position-independent code |
| **Access to System API** | Defined by import table, applied by Windows Loader | Custom: retrieving imports via PEB lookup; no IAT or simplified |

#### Position-Independent Code
- **Key Consideration:** To create position-independent code, ensure that all addresses are relative to the current instruction pointer address.
- **Relative Addresses:** Short jumps, long jumps, and calls to local functions are relative and can be used.
- **Absolute Addresses:** Any address that needs to be relocated (e.g., using data from different PE sections) breaks position independence.

#### Retrieving Imports
- **PEB Linklist:** Use the linklist pointed by the Process Environment Block (PEB) to retrieve imported functions.
- **Steps:**
  1. Get the PEB address.
  2. Via `PEB->Ldr->InMemoryOrderModuleList`, find:
     - `kernel32.dll` (loaded in most processes after initialization)
     - `ntdll.dll` (for low-level equivalents of import loading functions)
  3. Walk through the exports table to find addresses of:
     - `LoadLibraryA/W` (or `ntdll.LdrLoadDll`)
     - `GetProcAddress` (or `ntdll.LdrGetProcedureAddress`)
  4. Use `LoadLibraryA/W` to load other needed DLLs.
  5. Use `GetProcAddress` to retrieve function addresses.

#### Creating Shellcode: Assembly
- **Tool:** YASM for pure assembly shellcodes.
- **Considerations:**
  - No linker usage: Manually handle imports and relocations.
  - Ensure code is position-independent.
- **Command:** `yasm â€“f bin demo.asm`

#### Creating Shellcode: C
- **Tool:** C compiler to generate assembly.
- **Process:**
  - Refactor the C code into valid shellcode.
  - Compile with MASM: `ml .asm`
  - Extract the code section from the generated PE file.
- **Key Steps:**
  - Follow the principles of building shellcodes.
  - Use the provided template to refactor the C application.
- **Commands:**
  - `Cl /c /FA .cpp`
  - `ml .asm`

### Exercise Time
- **Task:** Use the given template to refactor a C application into a valid shellcode.

### Further Readings
- **From a C Project to Shellcode:**
  - [From a C project, through assembly, to shellcode (Hasherezade)](https://vxug.fakedoma.in/papers/VXUG/Exclusive/FromaCprojectthroughassemblytoshellcodeHas.html)

This structured approach should help you better understand the process of creating and utilizing shellcode.