dir             = /home/andrew/CA       # Where everything is kept      
```      
Then you should create related diretorys in /home/andrew/CA to store related files, such as CSR(Certificate Signing Request) file, private key file, or certificates.      
```      
[andrew@localhost CA]$ pwd      
/home/andrew/CA      
[andrew@localhost CA]$ mkdir certs newcerts private crl      
[andrew@localhost CA]$ touch index.txt      
[andrew@localhost CA]$ echo 01 > serial      
```      
This directory structure is very similar with the default data directory of CA:      
```      
[andrew@localhost CA]$ pwd      
/etc/pki/CA      
[andrew@localhost CA]$ ls      
certs  crl  newcerts  private      
```      
certs is for signed certificates, newcerts is for new generated certificates, private is for private key files, crl is for revocation certificates.      
Before generating any certificates, we need generated an random seed.      
```      
openssl rand -out private/.rand 1000      
```      
### generate root certificate      
generate private key for root certificate      
Openssl used PEM(Privacy Enbanced Mail) to store private key. Here is the command to generate the private key.      
```      
openssl genrsa -aes256 -out private/cakey.pem 1024      
```      
when executed this command, it will ask you to input a password for your key, you need to remember that, because openssl will ask you to input that password when it using this key file.      
generate csr      
The CSR(Certificate Signing Request) is the file you send to CA to generate your Certificate, here is how to generate it:      
```      
openssl req -new -key private/cakey.pem -out private/ca.csr -subj \      
  "/C=CN/ST=myprovince/L=mycity/O=myorganization/OU=mygroup/CN=myname"      
```      
generate root certificate      
here is the command, and the root ceritficate is stored at certs/ca.cer:      
```      
openssl x509 -req -days 365 -sha1 -extensions v3_ca -signkey \      
  private/cakey.pem -in private/ca.csr -out certs/ca.cer      
```      
here file extension suffix is cer, and for some certificate file, the extension suffix is crt, actually, file content for this two kind file are representing certificate data. the extension only related how to open it on the windows. you can check it here: How to convert CER to CRT certificates?      
### generate server certificate      
generate key file      
```      
openssl genrsa -aes256 -out private/server-key.pem 1024      
```      
like the root certificate key file, you also need to remember the password for this key file.      
generate csr      
Edit an conf file, and use it for openssl to generate server csr, because we need to add subjectAltName, which defines the certificat can be used for multi domains.      
```      
[andrew@localhost CA]$ cat myserver.conf      
[req]      
default_bits       = 2048      
distinguished_name = req_distinguished_name      
req_extensions     = v3_req      
x509_extensions = v3_req      
[req_distinguished_name]      
countryName                 = CN      
countryName_default         = GB      
stateOrProvinceName         = Sichuan      
stateOrProvinceName_default = West Midlands      
localityName                = Chengdu      
localityName_default        = Birmingham      
organizationName            = Flying Spaghetti Monster      
organizationName_default    = Example      
commonName                  = Andrew      
commonName_max              = 64      
[v3_req]      
subjectAltName = @alt_names      
keyUsage = keyEncipherment, dataEncipherment      
extendedKeyUsage = serverAuth      
[alt_names]      
DNS.1   = openstack.andrew.com      
DNS.2   = dev-openstack.andrew.com      
DNS.3   = test-openstack.andrew.com      
DNS.4   = local-openstack.andrew.com      
```      
then use this command to generate server csr (Certificate Signing Request) file:      
```      
openssl req -new -key private/server-key.pem -out private/server.csr -config myserver.conf      
```      
using the following command to verify the csr file.      
```      
openssl req -noout -text -in private/server.csr      
```      
generate server Certificate      
```      
openssl x509 -req -days 365 -sha1 -extfile myserver.conf -extensions v3_req -CA certs/ca.cer -CAkey private/cakey.pem -CAserial ca.srl -CAcreateserial -in private/server.csr -out certs/server.cer      
```      
please pay attention to this two pramaters -extfile myserver.conf -extensions v3_req, it will use the v3_req section of myserver.conf as cert extentsion, andd add the subjectAltName to the certificate.      
using the following command to check the certificate      
```      
openssl x509 -noout -text -in certs/server.cer      
```      
### generate client certificate      
generate client private key      
```      
openssl genrsa -aes256 -out private/client-key.pem 1024      
```      
generate client csr file      
```      
openssl req -new -key private/client-key.pem -out private/client.csr -subj \      
  "/C=CN/ST=myprovince/L=mycity/O=myorganization/OU=mygroup/CN=andrew"      
```      
sign client certificate      
```      
openssl x509 -req -days 365 -sha1 -extensions v3_req -CA certs/ca.cer -CAkey private/cakey.pem \      
  -CAserial ca.srl -in private/client.csr -out certs/client.cer      
```      
### install ceritificates      
After we genenerate all kind of certificates, we need install the CA certificate to our system, because it’s not a trust certificate.      
If we want to use the ceritficate for a server, then we need install the CA certificate on our client system.      
If we want to use the client certificate for authenticate, for example in apache httpd, we need to config the CA certificate in the httpd configuration file.      
This article shows how to install certificate on various system: Adding trusted root certificates to the server      
### for python requests to add CA      
Install the CA certificates on server, it works for the system tools, such as curl, but for the python requests libraray, it needs some extra work.      
here in the ca-certificates document of requests, it shows request used the certifi to manage CA certificates.      
In the pythone package of certifi, you can find the following documents:      
using pip install certifi      
```      
$ pip install certifi      
```      
find the path of the cacert.pem file      
```      
>>> import certifi      
>>> certifi.where()      
'/usr/lib/python2.7/site-packages/certifi/cacert.pem'      
```      
then add your own ca file in to that cacert.pem      
```      
cat /home/andrew/CA/certs/ca.cer >> cacert.pem      
```      
then the requests can request the website, which using the certificate signed by your ca.      
### remove passowrd of the key file      
The key file is encrypted by the password which you input when you generate it.      
If you used this key file for apache, when apache starts, it will ask you to input the password, if you unencrypt the key with openssl, then apache will skip this part.      
You’ll need the passphrase for the decryption process:      
```      
# openssl rsa -in www.key -out new.key      
```      
Now copy the new.key to the www.key file and you’re done. Next time you restart the web server, it should not prompt you for the passphrase.      
### Acknowledge      
Thanks to Jack (宁尤刚) to point out serveral errors of this article.      
###  Reference      
trust ca on system:      
https://www.happyassassin.net/2015/01/12/a-note-about-ssltls-trusted-certificate-stores-and-platforms/      
certificate extensions:      
http://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file      
http://info.ssl.com/article.aspx?id=12149      
remove passphrase from key file:      
https://www.mnxsolutions.com/apache/removing-a-passphrase-from-an-ssl-key.html      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")