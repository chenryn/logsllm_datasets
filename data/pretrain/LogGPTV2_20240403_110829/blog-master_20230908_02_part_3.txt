```  
create index on tbl1 using gin (tags);   
vacuum analyze tbl1;   
```  
4、创建任意字段搜索查询函数, 模拟数组包含查询  
```  
create or replace function get_uid1(int, int) returns setof int as $$  
declare  
  sql text := 'array[';  
begin  
  for i in 1..$1 loop  
    sql := sql || '''c' || ceil(random()*500)::int || '_' || round((random()*100)::numeric, 2)::text || ''',';  
  end loop;  
  for i in 1..$2 loop  
    sql := sql || '''c' || 500 + ceil(random()*500)::int || '_' || (random()*100)::int || ''',';  
  end loop;  
  sql := 'select id from tbl1 where tags @> ' || rtrim(sql, ',') || ']';  
  -- raise notice '%', sql;  
  return query execute sql;  
end;  
$$ language plpgsql strict;  
```  
```  
-- 组合查询5个字符串字段条件, 10个int字段条件.  
select * from get_uid1(5, 10);  
postgres=# select * from get_uid1(5, 10);  
NOTICE:  select id from tbl1 where tags @> array['c153_68.20','c336_2.45','c400_50.07','c197_48.06','c182_90.43','c960_36','c925_75','c525_53','c611_73','c828_21','c896_16','c864_1','c659_97','c666_86','c639_78']  
 get_uid1   
----------  
(0 rows)  
Time: 4.368 ms  
postgres=# select * from get_uid1(5, 10);  
NOTICE:  select id from tbl1 where tags @> array['c465_24.84','c500_92.92','c135_35.36','c61_63.15','c438_13.23','c969_96','c996_27','c602_5','c535_22','c720_10','c616_40','c619_28','c511_23','c856_77','c538_73']  
 get_uid1   
----------  
(0 rows)  
Time: 4.324 ms  
postgres=# explain analyze select id from tbl1 where tags @> array['c153_68.20','c336_2.45','c400_50.07','c197_48.06','c182_90.43','c960_36','c925_75','c525_53','c611_73','c828_21','c896_16','c864_1','c659_97','c666_86','c639_78'];  
                                                                                   QUERY PLAN                                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl1  (cost=83.60..84.71 rows=1 width=4) (actual time=0.863..0.865 rows=0 loops=1)  
   Recheck Cond: (tags @> '{c153_68.20,c336_2.45,c400_50.07,c197_48.06,c182_90.43,c960_36,c925_75,c525_53,c611_73,c828_21,c896_16,c864_1,c659_97,c666_86,c639_78}'::text[])  
   ->  Bitmap Index Scan on tbl1_tags_idx  (cost=0.00..83.60 rows=1 width=0) (actual time=0.856..0.857 rows=0 loops=1)  
         Index Cond: (tags @> '{c153_68.20,c336_2.45,c400_50.07,c197_48.06,c182_90.43,c960_36,c925_75,c525_53,c611_73,c828_21,c896_16,c864_1,c659_97,c666_86,c639_78}'::text[])  
 Planning Time: 0.340 ms  
 Execution Time: 0.948 ms  
(6 rows)  
```  
5、查询性能压测  
```  
vi t3.sql  
select * from get_uid1(5, 10);  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t3.sql -c 10 -j 10 -T 120  
transaction type: ./t3.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 3078754  
latency average = 0.390 ms  
latency stddev = 0.165 ms  
initial connection time = 24.890 ms  
tps = 25661.456683 (without initial connection time)  
statement latencies in milliseconds:  
         0.390  select * from get_uid1(5, 10);  
```  
6、表和空间占用情况  
```  
postgres=# select pg_size_pretty(pg_table_size('tbl1'::regclass));  
 pg_size_pretty   
----------------  
 795 MB  
(1 row)  
postgres=# select pg_size_pretty(pg_indexes_size('tbl1'::regclass));  
 pg_size_pretty   
----------------  
 564 MB  
(1 row)  
```  
#### PolarDB|PG新方法3 设计和实验     
在传统方法中针对任意字段组合过滤的场景, 使用了1000列全部都建上索引的方法来加速, 但是实际上在圈选或者分析场景中, 筛选的记录数是非常庞大的, IO消耗非凸显出来. 同时1000列索引还会带来写入降速严重的问题.  
为了解决这个问题, PolarDB|PG 可以通过 duckdb_fdw 来支持parquet列存储, 带来的好处是存储压缩比例高节省空间、列向量计算提升查询性能、不需要创建索引不影响高速导入.  
1、将数据库中的数据先导出到csv文件中, 准备转换为parquet文件.  
```  
su - postgres  
cd ~   
copy tbl to '/var/lib/postgresql/db1.csv' with (format csv , header true);  
```  
2、在duckdb中创建表  
```  
vi ddl.sql  
do language plpgsql $$  
declare  
  sql text := '';  
begin  
  sql := 'create table tbl(id int primary key,';  
  for i in 1..500 loop  
    sql := sql || 'c' || i || ' text,';  
  end loop;  
  for i in 501..1000 loop  
    sql := sql || 'c' || i || ' int,';  
  end loop;  
  sql := rtrim(sql,',');  
  sql := sql || ');' ;  
  raise notice '%', sql;  
end;  
$$;   
psql -f ddl.sql 2>&1 | grep NOTICE | awk -F 'NOTICE:' '{print $2}' | ./duckdb /var/lib/postgresql/db1.duckdb  
```  
3、将csv文件转换到parquet列存储格式, 并创建查询视图  
```  
./duckdb /var/lib/postgresql/db1.duckdb  
D insert into tbl select * from '/var/lib/postgresql/db1.csv';  
D copy tbl to '/var/lib/postgresql/db1.parquet' (FORMAT PARQUET);  
D create view v_tbl as SELECT * FROM read_parquet('/var/lib/postgresql/db1.parquet');  
D select count(*) from v_tbl;  
┌──────────────┐  
│ count_star() │  
│    int64     │  
├──────────────┤  
│       100000 │  
└──────────────┘  
```  
4、在PolarDB|PG中, 创建duckdb_fdw插件, 并将duckdb中的表作为外部表查询.  
```  
create extension if not exists duckdb_fdw;   
CREATE SERVER DuckDB_server FOREIGN DATA WRAPPER duckdb_fdw OPTIONS (database '/var/lib/postgresql/db1.duckdb');   
create schema duckdb;   
IMPORT FOREIGN SCHEMA public FROM SERVER DuckDB_server INTO duckdb;   
postgres=# \det duckdb.*  
     List of foreign tables  
 Schema | Table |    Server       
--------+-------+---------------  
 duckdb | tbl   | duckdb_server  
 duckdb | v_tbl | duckdb_server  
(2 rows)  
postgres=# select count(*) from duckdb.v_tbl;  
 count    
--------  
 100000  
(1 row)  
Time: 20.730 ms  
postgres=# explain verbose select count(*) from duckdb.v_tbl;  
                   QUERY PLAN                     
------------------------------------------------  
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)  