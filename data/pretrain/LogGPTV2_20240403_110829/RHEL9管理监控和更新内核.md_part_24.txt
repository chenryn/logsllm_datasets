    ```
2.  搜索 `CPUAffinity=`{.literal} 选项并设置 CPU 号
3.  保存编辑后的文件并重新启动服务器以应用更改。
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-cpu-affinity-and-numa-policies-using-systemd_managing-monitoring-and-updating-the-kernel.html#proc_configuring-numa-using-systemd_assembly_configuring-cpu-affinity-and-numa-policies-using-systemd}使用 systemd 配置 NUMA {.title}
:::
非统一内存访问 (NUMA)
是一种计算机内存子系统设计，其中内存访问时间取决于处理器的内存位置。接近
CPU 的内存的延迟（本地内存）比其他 CPU 本地内存低，或者在一组 CPU
间共享。
就 Linux 内核而言，NUMA
策略管理内核为进程分配物理内存页面的位置（例如，在哪些 NUMA 节点上）。
要配置 NUMA，systemd 为 `NUMAPolicy`{.literal} 和 `NUMAMask`{.literal}
提供单元文件选项，并在 `/etc/systemd/system.conf`{.literal} 文件中提供
manager 配置选项。
::: title
**步骤**
:::
通过 [**`NUMAPolicy`{.literal} 单元文件**]{.strong}选项设置 NUMA
内存策略：
::: orderedlist
1.  在您选择的服务中检查 `NUMAPolicy`{.literal} 单元文件选项的值：
    ``` screen
    $ systemctl show --property  
    ```
2.  作为根目录，设置 `NUMAPolicy`{.literal} 单元文件选项所需的策略类型：
    ``` screen
    # systemctl set-property  NUMAPolicy=
    ```
3.  重新启动服务以应用更改。
    ``` screen
    # systemctl restart 
    ```
:::
通过 [**manager configuration**]{.strong} 选项设置
`NUMAPolicy`{.literal}：
::: orderedlist
1.  编辑 `/etc/systemd/system.conf`{.literal} 文件：
    ``` screen
    # vi /etc/systemd/system.conf
    ```
2.  搜索 `NUMAPolicy`{.literal} 选项并设置策略类型。
3.  保存编辑后的文件并重新启动服务器以应用更改。
:::
::: itemizedlist
**其他资源**
-   [systemd 的 NUMA
    策略配置选项](#assembly_configuring-cpu-affinity-and-numa-policies-using-systemd_managing-monitoring-and-updating-the-kernel.html#ref_numa-policy-configuration-options-with-systemd_assembly_configuring-cpu-affinity-and-numa-policies-using-systemd "systemd 的 NUMA 策略配置选项"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-cpu-affinity-and-numa-policies-using-systemd_managing-monitoring-and-updating-the-kernel.html#ref_numa-policy-configuration-options-with-systemd_assembly_configuring-cpu-affinity-and-numa-policies-using-systemd}systemd 的 NUMA 策略配置选项 {.title}
:::
systemd 提供以下选项来配置 NUMA 策略：
::: variablelist
[`NUMAPolicy`{.literal}]{.term}
:   控制已执行进程的 NUMA 内存策略。可能会有以下策略类型：
    ::: itemizedlist
    -   default
    -   preferred
    -   bind
    -   interleave
    -   local
    :::
[`NUMAMask`{.literal}]{.term}
:   控制与所选 NUMA 策略关联的 NUMA 节点列表。
    请注意，不需要为以下策略指定 `NUMAMask`{.literal} 选项：
    ::: itemizedlist
    -   default
    -   local
    :::
    对于首选策略，列表仅指定单个 NUMA 节点。
:::
::: itemizedlist
**其他资源**
-   `systemd.resource-control(5)`{.literal}、`systemd.exec(5)`{.literal}
    和 `set_mempolicy(2)`{.literal} 手册页
-   [使用 systemd 配置
    NUMA](#assembly_configuring-cpu-affinity-and-numa-policies-using-systemd_managing-monitoring-and-updating-the-kernel.html#proc_configuring-numa-using-systemd_assembly_configuring-cpu-affinity-and-numa-policies-using-systemd "使用 systemd 配置 NUMA"){.link}
:::
:::
:::
[]{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel}第 21 章 使用 BPF Compiler Collection 分析系统性能 {.title}
:::
作为系统管理员，您可以使用 BPF Compiler Collection (BCC) 库创建用于分析
Linux 操作系统性能和收集信息的工具，这些信息可能难以通过其他接口获得。
::: section
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#bcc_analyzing-system-performance-with-bpf-compiler_collection}BCC 介绍 {.title}
:::
BPF Compiler Collection（BCC）是一个库，可帮助创建扩展的 Berkeley Packet
Filter（eBPF）程序。eBPF
程序的主要工具是在不需要额外的开销或存在安全问题的情况下，分析操作系统性能和网络性能。
BCC 不再需要用户了解 eBPF
的技术详情，并提供了许多开箱即用的起点，如带有预先创建的 eBPF 程序的
`bcc-tools`{.literal} 软件包。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
eBPF 程序在事件中触发，如磁盘 I/O、TCP
连接以及进程创建。程序不太可能导致内核崩溃、循环或者变得无响应，因为它们在内核的安全性虚拟机中运行。
:::
:::
::: section
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#installing-the-bcc-tools-package_analyzing-system-performance-with-bpf-compiler_collection}安装 bcc-tools 软件包 {.title}
:::
本节论述了如何安装 `bcc-tools`{.literal} 软件包，该软件包还会将 BPF
Compiler Collection (BCC) 库作为依赖项安装。
::: itemizedlist
**先决条件**
-   有效的 [Red Hat Enterprise Linux
    订阅](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_registering-the-system-and-managing-subscriptions_configuring-basic-system-settings){.link}
-   包含 `bcc-tools`{.literal} 软件包的
    [启用软件仓库](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_software_with_the_dnf_tool/assembly_managing-custom-software-repositories_managing-software-with-the-dnf-tool){.link}
-   [更新的内核](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel#updating-the-kernel_updating-kernel-with-yum){.link}
-   根权限
:::
::: orderedlist
**步骤**
1.  安装 `bcc-tools`{.literal} ：
    ``` literallayout
    # dnf install bcc-tools
    ```
    BCC 工具安装在 `/usr/share/bcc/tools/`{.literal} 目录中。
2.  （可选）检查工具：
    ``` literallayout
    # ll /usr/share/bcc/tools/
    ...
    -rwxr-xr-x. 1 root root  4198 Dec 14 17:53 dcsnoop
    -rwxr-xr-x. 1 root root  3931 Dec 14 17:53 dcstat
    -rwxr-xr-x. 1 root root 20040 Dec 14 17:53 deadlock_detector
    -rw-r--r--. 1 root root  7105 Dec 14 17:53 deadlock_detector.c
    drwxr-xr-x. 3 root root  8192 Mar 11 10:28 doc
    -rwxr-xr-x. 1 root root  7588 Dec 14 17:53 execsnoop
    -rwxr-xr-x. 1 root root  6373 Dec 14 17:53 ext4dist
    -rwxr-xr-x. 1 root root 10401 Dec 14 17:53 ext4slower
    ...
    ```
    上表中的 `doc`{.literal} 目录包含每个工具的文档。
:::
:::
::: section
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#using-selected-bcc-tools-for-performance-analyses_analyzing-system-performance-with-bpf-compiler_collection}使用所选 bcc-tools 进行性能调整 {.title}
:::
这部分论述了如何使用 BPF Compiler Collection (BCC)
库中某些预先创建的程序来高效且安全地分析每个事件的系统性能。BCC
库中预创建的程序集可作为创建其他程序的示例。
::: itemizedlist
**先决条件**
-   [安装 bcc-tools
    软件包](#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#installing-the-bcc-tools-package_analyzing-system-performance-with-bpf-compiler_collection "安装 bcc-tools 软件包"){.link}
-   根权限
:::
### []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#_using_execsnoop_to_examine_the_system_processes}使用 execsnoop 检查系统进程
::: orderedlist
1.  在一个终端中执行 `execsnoop`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/execsnoop
    ```
2.  在另一个终端执行中，例如：
    ``` screen
    $ ls /usr/share/bcc/tools/doc/
    ```
    以上可创建 `ls`{.literal} 命令的短时间进程。
3.  运行 `execsnoop`{.literal} 的终端显示类似如下的输出：
    ``` screen
    PCOMM	PID    PPID   RET ARGS
    ls   	8382   8287     0 /usr/bin/ls --color=auto /usr/share/bcc/tools/doc/
    ...
    ```
    `execsnoop`{.literal}
    程序打印出每个占用系统资源的新进程的输出行。它甚至会检测很快运行的程序（如
    `ls`{.literal} ）的进程，大多数监控工具也不会进行注册。
    `execsnoop`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**PCOMM**]{.strong} - 父进程名称。(`ls`{.literal})
    -   [**PID**]{.strong} - 进程 ID。(`8382`{.literal})
    -   [**PPID**]{.strong} - 父进程 ID。(`8287`{.literal})
    -   [**RET**]{.strong} - `exec()`{.literal}系统调用的返回值
        (`0`{.literal}) ，这会将程序代码加载到新进程中。
    -   [**ARGS**]{.strong} - 使用参数启动的程序的位置。
    :::
:::
要查看 `execsnoop`{.literal} 的详情、示例和选项，请参阅
`/usr/share/bcc/tools/doc/execsnoop_example.txt`{.literal} 文件。
有关 `exec()`{.literal} 的详情，请查看 `exec(3)`{.literal} 手册页。
### []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#_using_opensnoop_to_track_what_files_a_command_opens}使用 opensnoop 跟踪命令打开的文件
::: orderedlist
1.  在一个终端中执行 `opensnoop`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/opensnoop -n uname
    ```
    以上列出了文件的输出，这些文件仅由 `uname`{.literal}
    命令的进程打开。
2.  在另一个终端中执行：
    ``` screen
    $ uname
    ```
    以上命令会打开某些在下一步中捕获的文件。
3.  运行 `opensnoop`{.literal} 的终端显示类似如下的输出：
    ``` screen
    PID    COMM 	FD ERR PATH
    8596   uname 	3  0   /etc/ld.so.cache
    8596   uname 	3  0   /lib64/libc.so.6
    8596   uname 	3  0   /usr/lib/locale/locale-archive
    ...
    ```
    `opensnoop`{.literal} 程序在整个系统中监视 `open()`{.literal}
    系统调用，并为 `uname`{.literal} 尝试打开的每个文件打印一行输出。
    `opensnoop`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**PID**]{.strong} - 进程 ID。(`8596`{.literal})
    -   [**COMM**]{.strong} - 进程名称。(`uname`{.literal})
    -   [**FD**]{.strong} - 文件描述符 - `open()`{.literal}