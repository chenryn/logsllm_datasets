title:Model-based Security Testing: An Empirical Study on OAuth 2.0 Implementations
author:Ronghai Yang and
Guanchen Li and
Wing Cheong Lau and
Kehuan Zhang and
Pili Hu
Model-based Security Testing:
an Empirical Study on OAuth 2.0 Implementations
Yang Ronghai
The Chinese Univ. of HK
PI:EMAIL
Guanchen Li
The Chinese Univ. of HK
PI:EMAIL
Wing Cheong Lau
The Chinese Univ. of HK
PI:EMAIL
Kehuan Zhang
The Chinese Univ. of HK
PI:EMAIL
ABSTRACT
Motivated by the prevalence of OAuth-related vulnerabilities in the
wild, large-scale security testing of real-world OAuth 2.0 imple-
mentations have received increasing attention lately [31, 37, 42].
However, these existing works either rely on manual discovery of
new vulnerabilities in OAuth 2.0 implementations or perform auto-
mated testing for speciﬁc, previously-known vulnerabilities across
a large number of OAuth implementations. In this work, we pro-
pose an adaptive model-based testing framework to perform auto-
mated, large-scale security assessments for OAuth 2.0 implemen-
tations in practice. Key advantages of our approach include (1) its
ability to identify existing vulnerabilities and discover new ones in
an automated manner; (2) improved testing coverage as all possi-
ble execution paths within the scope of the model will be checked
and (3) its ability to cater for the implementation differences of
practical OAuth systems/ applications, which enables the analyst to
ofﬂoad the manual efforts for large-scale testing of OAuth imple-
mentations. We have designed and implemented OAuthTester to
realize our proposed framework. Using OAuthTester, we examine
the implementations of 4 major Identity Providers as well as 500
top-ranked US and Chinese websites which use the OAuth-based
Single-Sign-On service provided by the formers. Our empirical
ﬁndings demonstrate the efﬁcacy of adaptive model-based testing
on OAuth 2.0 deployments at scale. More importantly, OAuthT-
ester not only manages to rediscover various existing vulnerabili-
ties but also identify several previously unknown security ﬂaws and
new exploits for a large number of real-world applications imple-
menting OAuth 2.0.
Keywords
Single Sign-On; OAuth 2.0; Security Testing
1.
INTRODUCTION
The OAuth 2.0 protocol has been adopted by mainstream Single-
Sign-On services to support user authentication and authorization
for 3rd party applications. Using OAuth 2.0, an identity provider
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897874
Pili Hu
The Chinese Univ. of HK
PI:EMAIL
(IdP) (e.g. Facebook) can grant data access privileges by issuing
an “access token” to a third-party application (App) (e.g. Priceline)
upon approval by the user. The App can then use the access token to
retrieve the protected user data hosted by the IdP and thus assume
the identity of the authorizing user without knowing his/ her log-in
credential.
Due to the complexity of the multi-party interactions and trust re-
lationships in OAuth 2.0, numerous security problems and practical
attacks such as Covert Redirect [24] and App Impersonation [21]
have been discovered recently. Worse still, many third-party ap-
plication developers may not have the resource or know-how to
properly implement OAuth-based services. As a result, the security
analysis and testing of deployed OAuth 2.0 applications/systems
have received increasing attention lately [17, 31, 37, 42]. However,
all these studies either rely on manual analysis to discover new vul-
nerabilities in OAuth 2.0 implementations or perform automated
testing for a limited set of speciﬁc, previously-known vulnerabilities
across a large number of OAuth implementations. In contrast, we
propose an adaptive model-based testing tool, OAuthTester, which
enables the automatic discovery of vulnerabilities via systematic
testing and evaluation of OAuth implementations.
Based on the OAuth protocol speciﬁcation, we ﬁrst construct
an initial state-machine-based system model which abstracts and
deﬁnes the expected behavior of the multi-party system, namely,
the IdP, the 3rd-party App and the authorizing User. OAuthTester
then automatically augments the initial model with implementa-
tion speciﬁcs extracted from network traces. Based on the resul-
tant model, OAuthTester autonomously generates and executes test
cases (in the form of HTTP request sequences) and collects re-
sponses from the IdP and App to adapt, augment as well as rec-
tify the current system model in a self-learning manner.
In par-
ticular, OAuthTester compares the expected behavior predicted by
the current system model with the observed responses to determine
whether the test target is vulnerable. Deviation of the observed
responses from the predicted behavior is an indication that either
1) possible vulnerabilities are discovered or 2) the current model
overlooks some situations/ corner cases of the system and OAuthT-
ester would then rectify the system model automatically after con-
ﬁrming that no predeﬁned security properties have been violated.
OAuthTester continues this iterative process until all the paths in
the evolving state machine have been covered.
While previous works also build a state machine to drive the ver-
iﬁcation of OAuth 2.01, their models are built only based on either
the protocol speciﬁcation [5] or some implementation details ex-
tracted from the related network traces [37, 39], but not both. In
1 For the rest of the paper, we use OAuth to denote OAuth 2.0 if
not speciﬁed otherwise.
contrast, we combine these two pieces of information to construct
a more comprehensive system model in an adaptive and iterative
way.
As such, our adaptive model-based security testing provides a
higher code coverage guarantee, which enables the discovery of
new vulnerabilities while reducing the number of possible false
negatives. Furthermore, our method enables one to substantially
reduce the manual efforts required by large-scale security testing
of OAuth implementations because our approach can cater for the
implementation differences of practical OAuth systems via obser-
vations extracted from network traces. In summary, this paper has
made the following technical contributions:
• We propose an adaptive model-based testing framework by
combining the protocol speciﬁcation and the network trace ob-
servations, followed by iterative reﬁnement of the model with
implementation speciﬁcs.
• We design and implement OAuthTester to realize the proposed
• We use OAuthTester to conduct security assessment for four
major OAuth-based IdPs as well as 500 top-ranked web appli-
cations in US and China. To the best of our knowledge, this
is the ﬁrst work which systematically performs a model-based
analysis of commercial implementations of OAuth at scale.
• Our empirical study discovers 3 previously unknown yet crit-
ical vulnerabilities while demonstrating new exploits for one
old problem.
In addition, our ﬁndings help to quantify the
prevalence of different classes of vulnerabilities among main-
stream OAuth-based applications and platforms.
framework.
The rest of the paper is organized as follows: In Section 2, we in-
troduce the background of the OAuth 2.0 protocol. We describe the
system architecture of OAuthTester in Section 3. We then discuss
the modeling speciﬁcs of OAuthTester in Section 4. Additional im-
plementation details are given in Section 5. Section 6 presents our
empirical ﬁndings. Possible extensions of OAuthTester are covered
in Section 7. We survey related work on OAuth security and testing
tools in Section 8 and conclude our work in Section 9.
2. BACKGROUND ON OAUTH PROTOCOL
The OAuth framework consists of three entities: IdP, User and
Application (App)2. In order to determine User’s identity, the 3rd
party App should request the authorization from User to access
User’s identiﬁer (e.g., user proﬁle) hosted by IdP. With this identi-
ﬁer, App can then log User in. To achieve this goal, RFC6749 [18]
deﬁnes four types of authorization ﬂows. Regardless of the speciﬁc
authorization ﬂow, OAuth ultimately gives an access token to App
so that it can access User’s proﬁle hosted by IdP. In this section, we
introduce two most popular authorization ﬂow types, namely, the
call ﬂows for the Authorization Code Grant and the Implicit Grant.
2.1 Authorization Code Grant Flow
As illustrated in Fig. 1, the steps of authorization code ﬂow are
as follows: 1. User visits App and tries to log into App with IdP;
2. App redirects User to IdP for authentication with an optional
STATE parameter to bind this request (Step 2) to the subsequent
response at Step 5; 3. User authenticates with IdP and then au-
thorizes the permissions requested by App. 4. IdP returns to User
an authorization code with an optional STATE parameter (typically
the value is the hash of cookies and a nonce); 5. User is redirected
to the redirection endpoint where App should reject the request if
the received STATE parameter does not match with that at Step 2.
6. App then requests the access token by sending the code and its
2In this paper, we only focus on the web applications.
Figure 1: OAuth 2.0 authorization code ﬂow
App secret to IdP; 7. After checking the validity of the code and
the identity of App, IdP responds with an access token; 8. App
requests user data via the access token; 9. IdP responds user data
(e.g., proﬁle) to App so that App can assume User’s identity and
log User in.
Note that Step 6 – Step 9 are executed on App server. From the
user’s perspective, he is immediately logged into App once he is
redirected to App at Step 5.
2.2 Implicit Grant Flow
Unlike the authorization code ﬂow, implicit grant ﬂow directly
relays the access token issued by IdP through User to App at Step
4 of Fig. 1. (TLS). This authorization ﬂow is intended to lower the
barrier of application development. It is useful in cases where App
cannot protect the app_secret or the cryptographic primitives are
too heavy to be implemented or executed by App.
2.3 Other Scenarios to Be Considered
Identity Federation
The above two code ﬂows only cover the basic scenarios.
In
reality, we also need to consider the following practical situations:
2.3.1
After retrieving User’s identity proﬁle at Step 9 of Fig. 1, App
has two choices to log User in: a) Log User in directly with this
identity proﬁle; b) Via Identity Federation: Under this approach,
if User does not have an account for the App (local account), App
creates one and binds this local account to the identity proﬁle. Oth-
erwise, if User is logged into the local account at Step 9, App may
automatically bind these two identiﬁers together. In the latter case,
when a user attempts to log into App with IdP later on, App can
look for a mapping between IdP’s identity proﬁle and the identiﬁer
of a local account. If such a mapping exists, App then logs the user
into the corresponding local account directly.
2.3.2 Revoke Authorization
IdPs often provide an App Management Page which contains all
the previously authorized applications for User so that User can
revoke the authorization just by clicking a delete button. After re-
vocation, the original access token becomes invalid and thus App
cannot access User’s information any more.
2.3.3 Automatic Authorization
Once a user has authorized an application, IdP may directly redi-
rect the user to the application in Step 5 of Fig. 1 upon receiving an
authorization request. The user thereby does not need to verify and
grant the same permissions requested by the application before. In
this way, automatic authorization can improve the user experience
and thus has been widely deployed.
AppUser    IdP1). User visits App      2). Redirection: redirect_uri+   STATE (optional)3) User authentication and grant permission5) Redirection endpoint: code + STATE(optional) 6) Access token  request: code + redirect_uri + App secret       7)  access token + refresh token (optional)   8) API request for User resource: access token         9) User resource in Identity Provider4) code +STATE(optional)e.g3. SYSTEM OVERVIEW
In this section, we ﬁrst discuss the threat model and then present
the system architecture of OAuthTester.
3.1 Threat Model
We assume there are two users: a normal user Alice and an at-
tacker Eve. Alice would follow normal instructions (e.g., Fig. 1)
and send requests to App and IdP as deﬁned by the OAuth proto-
col. Unlike Alice, Eve does not follow the protocol and would try
to ﬁnd logic ﬂaws of IdP and App by sending arbitrary requests
(e.g., out-of-order requests) at any time to any party in the OAuth
system.
Since we mainly focus on the logic ﬂaws of App and IdP, the
normal user Alice in fact can be a different account controlled by
the attacker. Therefore, the attacker can collect and analyze the
network trace of Alice to build a more accurate system model. Note
however that, Eve should not use Alice’s network trace to construct
the test case unless such network trafﬁc is not protected, e.g., by
TLS. In other words, Eve can eavesdrop unencrypted information
of Alice to construct message exchanges with IdP/ App.
3.2 System Architecture of OAuthTester
Fig. 2 depicts the system architecture of OAuthTester, where
solid lines represent the functionalities implemented by OAuthT-
ester and dashed lines represent actions of other parties, i.e., IdP
and App. The workﬂow of the system is as follows:
1. Based on the speciﬁcation of OAuth [18, 26], we manually
deﬁne a coarse-grained system model, which is then automat-
ically initialized via identifying the key parameters from the
network trace as stated in Section 4.1. This model abstracts
and deﬁnes the normal behavior of IdP and App.
2. Given the system model, OAuthTester then automatically gen-
erates test cases in form of user inputs, e.g., HTTP requests.
3. After tampering the test cases as discussed in Section 4.2, the
Test Harness sends executable test cases to IdP and App.
4. OAuthTester collects responses from IdP and App, e.g., HTTP
responses and the state of the application/ IdP, etc.
5. The Test Oracle (Section 4.3) then compares the real system
response with the expected behavior predeﬁned in the system
model and determines whether the response is normal or not.
6. For any abnormal behavior, OAuthTester determines whether
it can lead to possible exploits. If so, list the test cases and
then go to Step 8; otherwise, go to Step 7.
7. We need to go back to reﬁne/ rectify the system model.
8. OAuthTester extracts useful knowledge (e.g., the values of the
access token, the STATE parameter and their security prop-
erties) from the collected responses and then adds the knowl-
edge to the Knowledge pool of the system model.
9. Based on the newly added knowledge, we can reﬁne or cus-
tomize the system model for a speciﬁc implementation as pre-
sented in Section 4.4. We continue this iterative process until
OAuthTester covers every path in the state machine.
To generate test cases in Step 2, which cover all the execution
paths of OAuth, we utilize model-based testing (MBT) techniques.
Speciﬁcally, we build our tool on top of PyModel [22], an open-
source project based on NModel [23], which takes a system model
as input and output test cases. The PyModel tool supports on-
the-ﬂy testing so that we can continue to reﬁne the system model
throughout the testing process. Most importantly, PyModel can
help to formally enumerate all the paths deﬁned by the system
model and thus provides some form of coverage guarantees for the
tester.
To follow the aforementioned system architecture for the secu-
Figure 2: System Architecture of OAuthTester
rity testing of OAuth implementations, we design and realize three
components (modules) in OAuthTester:
the System Model, Test
Harness and Test Oracle which correspond to Module A, B, C in