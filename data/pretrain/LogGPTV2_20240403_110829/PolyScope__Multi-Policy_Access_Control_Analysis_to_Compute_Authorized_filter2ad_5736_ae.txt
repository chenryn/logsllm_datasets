8,922
1,504
400
679
217
1,003
1,682
276,181
1,958
9,890
1,233
236
437
159
1,129
1,566
273,295
1,657
8,370
1,400
232
531
248
1,186
1,717
282,650
2,197
8,423
1,174
216
749
154
1,555
2,304
498,941
1,787
10,912
1,881
469
953
550
3,424
4,377
MAC TE allow rules2
TE Write-IVs4
TE Read-IVs4
TE Binding-IVs3
Valid Write-IVs4
Valid Read-IVs4
Valid Binding-IVs3
Valid Pathname-IVs3
468
1,410
495
120
194
52
178
372
Valid IVs Total5
TE implies only having permission in SEAndroid TE
1 This phone has signiﬁcantly more ﬁles perhaps related to a higher number of pre-installed apps
2 Unit: number of rules
3 Unit: IVs (victim, object) for directory objects only
4 Unit: IVs (victim, object) for ﬁle objects only
5 Valid IVs Total is the same as the PolyScope IVs after Expansion from Table 2: the sum of the Valid Read-IVs (includes all Valid Write-IVs) and Valid Pathname-IVs (includes all Valid Binding-IVs)
of MAC permissions. The result of this customization is a
signiﬁcant increase MAC TE integrity violations, often more
than twice as many as the associated Google Android systems.
Even more importantly, the number of integrity violations is
signiﬁcantly higher for the OEMs after TE IV validation (rows
5-8 in Table 3). For example, the number of binding-IVs in
Android version 9.0 systems is 32 for Google and at least 154
for the OEM Android 9.0 systems.
IVs to Attack Operations
7.4
RQ4: How many attack operations are really possible for
the IVs found across OEM releases? Table 2 shows that not
all the IVs found after permission expansion enable adver-
saries to launch attack operations because ﬁlesystem and/or
victim subjects’ program conﬁgurations may prevent attack
operations, as described in Section 5.5.
Table 4 breaks down how many attack operations of each
type are possible given the conﬁgurations that may block such
operations. The number of ﬁle attack operations (adversary
writes) are roughly the same as the number of read integrity
violations (Valid Read-IVs), because not many objects asso-
ciated with integrity violations reside in read-only directories.
The number of ﬁle squat attack operations is the same as the
number of integrity violations for directories (Valid Binding-
IVs) in Table 3. However, the number of link traversal attack
operations that are possible is fewer than the number of in-
tegrity violations because not all ﬁlesystems support symbolic
links, reducing the number of directories where this attack
operation applies.
The luring traversal attack operations row identiﬁes the
number of luring traversal attacks that could be performed via
Binder IPC, see Section 5.5. We can easily see that the number
of operations is a lot greater than the number of binding-IVs
alone (Valid Binding-IVs), since adversaries can expand the
victim’s permissions for pathname-IVs (Valid Pathname-
IVs). This is especially the case for Android 11, but this is
addressed via the scoped storage defenses [19] discussed in
Section 8.2. Recall that FileProvider usage is key to prevent-
ing luring traversal attacks (see the luring-traversal rule
in Section 5.5), where it has a non-trivial but modest impact
on reducing attack operations (14-21% across all releases).
For example, on Samsung Galaxy S8, we found that 57 out
of 356 Java applications utilize FileProvider for ﬁle sharing,
which meant that 3,424 pathname-IVs were only reduced to
2,874 luring-traversal operations.
7.5 Cross-Privilege Level IVs
RQ5: How are integrity violations distributed across Android
privilege levels? The IV distribution is important because it
indicates how victims at each privilege level could be attacked
and how adversaries at any privilege level could compose at-
tacks to reach other privilege levels. Table 5 shows the counts
of ﬁle and binding integrity violations between each pair of
privilege levels we evaluated. We do not include pathname-
IVs in this table to assess attack paths without luring.
Google’s 8.0 and 9.0 releases have a modest number
cross-privilege level IVs. This conﬁrms our hypothesis that
Google’s access control policies are the closest to best prac-
tice. The Android 11.0 again depends on scoped storage to
remove its IVs, as discussed in Section 8.2. However, on the
OEM side, it can be a completely different story. Other than
the Mate9 9.0, the IVs between each privilege level pair can
be signiﬁcant, meaning that even without luring, releases may
be vulnerable in a variety of ways.
7.6 Vulnerability Case Studies
RQ6: What kind of vulnerabilities may be discovered from
attack operations? Using the attack operations computed by
PolyScope, we manually identiﬁed two previously unknown
vulnerabilities.
Samsung Resetreason: We found a new binding vulnerabil-
ity in the Samsung Galaxy S8 system using the Android 9.0
release. Samsung includes a privileged service called rese-
treason that logs the reason why the phone has had to reset
into the ﬁle power_off_reset_reason.txt in the directory
/data/log. However, any process that runs with the AID_LOG
group has write permission to that ﬁle, so such processes
can replace the ﬁle with a symbolic link to any ﬁle acces-
sible to resetreason to launch a link traversal attack. While
only signed apps may be granted the Android permission
2590    30th USENIX Security Symposium
USENIX Association
File Attack2
Link Traversal Attack3
File Squat Attack3
Pathname Attack3
Total Attack Operations
Table 4: Attack Operations
Nexus 5x 7.0
Nexus 5x 8.0
Pixel3a 9.0
Pixel3a 10.0
Pixel3a 11.0 Mate9 8.0 Mate9 9.0 Mix2 8.01 Mix2 9.0 Galaxy S8 9.0
176
1
52
121
350
70
8
22
317
417
79
3
32
848
962
103
2
37
892
997
864
2
190
943
1,999
597
169
660
734
2,160
358
7
443
969
1,777
478
175
248
761
1,662
655
4
154
1,324
2,137
862
507
847
2,874
5,063
Unit: Sum of operations for all (victim, object) IVs
1 This phone has signiﬁcantly more ﬁles perhaps related to a higher number of pre-installed apps
2 Only for ﬁle objects
3 Only for directory objects
Nexus 5x 7.0
Nexus 5x 8.0
Pixel3a 9.0
Pixel3a 10.0
Pixel3a 11.0 Mate9 8.0 Mate9 9.0 Mix2 8.0* Mix2 9.0 Galaxy S8 9.0
Table 5: Cross-Privilege Level IVs
28
40
30
24
40
30
24
31
68
0
6
22
13
9
22
13
9
24
28
0
T1∗ → T212
T1 → T3
T1 → T4
T1 → T5
T2 → T3
T2 → T4
T2 → T5
T3 → T4
T3 → T5
T4 → T5
* T1(untrusted/isolated app), T2(priv/platform app) T3(services), T4(system app, system service), T5(root service)
1 For adversary at lower level (T1) and victim at higher level (T2)
2 Unit: Sum of binding and ﬁle IVs (no pathname-IVs included)
3 Much higher due to weaker DAC defense
2393
342
58
28
342
58
28
63
22
0
24
29
11
7
29
11
7
19
15
0
17
21
7
6
21
7
6
16
14
0
54
17
14
16
20
14
20
265
108
0
29
12
8
8
15
8
11
129
126
0
124
40
29
23
60
78
34
85
42