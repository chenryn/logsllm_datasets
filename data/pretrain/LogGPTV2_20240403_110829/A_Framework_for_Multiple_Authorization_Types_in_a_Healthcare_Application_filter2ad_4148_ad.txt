variable)  in  predicate  4.4.7.  This  value  can  be  obtained 
from table 5.6 which provides a mapping of Menu Options 
to  Context  Variable  value  in  ADT  system.  The  next 
to 
category  of  data  that  we  need  is  the  instantiation  of  the 
context predicate (in expression 4.4.10) that is relevant for 
context  variable  values  encountered  in  the  ADT  system. 
Incorporating 
the 
instantiated  “validation  condition 
for  context-based 
authorization  request”  for  the  menu  options  –  “Change 
Beds/Room”  and    “Transfer  to  Acute  Care”  respectively 
are: 
context  predicate 
relevant 
the 
Subject_Role(subject,role)  &  Equals(cv,wardname)  & 
Ward_Assignment(user,cv_value) 
(cid:224)  
Context_Auth_Req(user,role,subject,cv,cv_value) 
Subject_Role(subject,role)  &  Equals(cv,  facilitytype)  & 
Specialist_in_Charge(cv_value,user) 
Context_Auth_Req(user,role,subject,cv,cv_value) 
(5.2.2) 
(5.2.1) 
(cid:224)    
The last but not the least important category of DAFMAT 
data  required  in  ADT  is  for  establishing  the  truth  values 
for  ward_assignment  and  specialist_in_charge  predicates 
(in  the  instantiated  validation  conditions  5.2.1  and  5.2.2) 
for 
the  validation  condition 
for  emergency 
and 
authorization.  These  are  given  in  tables  5.7  through  5.9 
respectively. 
Table 5.6 -  Menu Option to Context Variable Mapping in ADT 
Context Variable (CV) 
Menu Option 
 NONE 
 wardname 
 facilitytype 
 patientname 
NONE 
1.  Admit Patient 
2.  Change Beds/ Room 
3.  Transfer to Acute Care 
4.  Order  Lab Tests 
5.  Discharge Patient 
Ward 
PEDIATRIC 
MATERNITY 
Table 5.7 – Truth Values for Predicate Ward_Assignment 
Administrator 
smith 
mell 
Predicate 
Ward_Assignment(smith,’PEDIATRIC) 
Ward_Assignment(mell,’MATERNITY’) 
Table 5.8 – Truth Values for Predicate Specialist_in_Charge 
Facility 
ICU 
CHEMO_THERAPY 
Specialist 
mike 
patricia 
Predicate 
Specialist_in_Charge(ICU,mike) 
Specialist_in_Charge (CHEMO_THERAPY,patricia) 
Table 5.9 – Emergency to Regular Role Mappings (for validating Emergency Authorization Requests) 
Emergency Role  Regular Role 
facilities_specialist 
Facilities_manager 
Facilities_manager 
ward_scheduler 
Predicate 
ER_Role_Map(facilities_manager,facilities_specialist) 
ER_Role_Map(facilities_manager,ward_scheduler) 
user = smith 
role= admissions_clerk 
subject = transfer_proc 
cv=wardname 
pc=NR 
In  addition  since  smith  is  invoking  this  menu  for 
performing the bed-swapping operation for patients in the 
pediatric  ward  the  value  string  associated  with  context 
variable value ‘wardname’ will be: 
cv_value = ‘PEDIATRIC’ 
Hence  the  authorization  request  predicate  that  will  be 
formulated for authorizing smith’s request will be: 
5.3  Authorization Processing in ADT 
Based  upon  the  data  needed  for  ADT  authorization 
given in the previous three sections, let us now illustrate as 
to how the following three user requests will be processed 
by the DAFMAT framework for ADT. 
5.3.1 
The  user  ‘smith’  wants  to  swap  beds  for  a 
couple  of  patients  in  the  pediatric  ward  and 
makes a normal request : 
The menu option ‘smith’ will use is item 2 in table 5.6 
(i.e.,  Change  Beds/Room).  Making  use  of  mapping 
functions  4.4.2  through  4.4.6,  the  values  for  the  various 
session-related variables for smith’s current ADT session 
are obtained as follows: 
Auth_Req(smith,ward_scheduler,transfer_proc,wardname,
’PEDIATRIC’,NR) 
As per the logic given in section 4.4.2.1 this request will 
be  designated  as  a  context-based  authorization  type  and 
hence transformed into 
Context_Auth_Req(smith,ward_scheduler,transfer_proc,w
ardname, ‘PEDIATRIC’) 
Based on the value of the context variable (i.e., wardname) 
the  validation  condition  on  the  left  hand  side  of  logical 
implication  5.2.1  becomes  the  relevant  condition  to  be 
checked  for  smith’s  request  and  the  instantiation  of  this 
condition will yield: 
Subject_Role(transfer_proc,ward_scheduler) &  
Equals(cv,wardname) & 
Ward_Assignment(smith,’PEDIATRIC’) 
Out  of  the  three  predicates  above,  the  first  one  is  true 
because  of  entry  in  table  5.3,  the  second  one  is  trivially 
satisfied and third is true because of the entry in truth value 
table  5.7.  Since  the  condition  for  smith’s  request  is 
satisfied,  smith’s  request  to  swap  beds  for  a  couple  of 
patients in the pediatric ward will be authorized. 
5.3.2 
The user ‘patricia’ wants to transfer a patient 
to ICU and makes a normal request : 
The menu option ‘patricia’  will use is item 3 in table 
5.6  (i.e.,  Transfer  to  Acute  Care).  Again  making  use  of 
mapping  functions  4.4.2  through  4.4.6,  the  authorization 
request  predicate  for  patricia’s  current  ADT  session  will 
be: 
Auth_Req(patricia,facilities_specialist,transfer_proc,facilit
ytype,’ICU’,NR) 
Again as per the logic given in section 4.4.2.1 this request 
will  be  designated  as  a  context-based  authorization  type 
and hence transformed into: 
Context_Auth_Req(patricia,facilities_specialist,transfer_pr
oc,facilitytype,’ICU’) 
Based  on  the  context  variable  (i.e.,  facilitytype)  the 
validation  condition  on  the  left  hand  side  of  logical 
implication  5.2.2  becomes  the  relevant  condition  to  be 
checked for patricia’s request and the instantiation of this 
condition will yield: 
Subject_Role(transfer_proc,facilities_specialist)  & 
Equals(cv, facilitytype)  & 
 Specialist_in_Charge(‘ICU’,patricia) 
Since a binding cannot be obtained for the third predicate 
in the condition (i.e., Specialist_in_Charge(‘ICU’,patricia) 
from the truth table 5.8, the authorization request will be 
denied. 
5.3.3 
The user ‘patricia’ wants to transfer a patient 
to ICU and makes an emergency request : 
This  is  an  identical  to  the  authorization  request  in 
5.3.2  except  that  it  is  an  emergency  request  instead  of  a 
normal request from the same user for the same operation. 
Now  the  authorization  request  predicate  for  this  request 
will  be  (assuming 
that  an  emergency  role  called 
facility_manager is assigned to patricia by the session): 
Auth_Req(patricia,facilities_manager,transfer_proc, 
                   facilitytype,’ICU’,ER) 
Again as per the logic given in section 4.4.2.1 this request 
will be designated as an emergency authorization type and 
hence transformed into 
Emergency_Auth_Req(patricia,facilities_manager,transfer
_proc,facilitytype,’ICU’) 
The  validation  condition  for  this  request  becomes  (using 
expression 4.4.9): 
ER_Role_Map(role,mapped_role) 
Subject_Role(subject,mapped_role) 
Based on the following entries in tables 5.9 and 5.3: 
ER_Role_Map(facilities_manager,facilities_specialist) and 
Subject_Role(transfer_proc,facilities_specialist,  we  have 
satisfied the above condition and hence the application will 
approve this authorization request. 
6  Assurance  Measures 
for  DAFMAT 
& 
Administration 
Let  us  now  at  the  look  at  some  of  the  assurance 
measures  that  may  be  required  for  the  administration  of 
DAFMAT framework in an enterprise setting. As far as the 
“hybrid  access  control  model”  component  is  concerned, 
the inherent structural constraints of the model augmented 
with application-specific constraints provide a measure of 
protection  against  unsafe  configurations.  The  following 
assurance  measures  are  suggested  for  the  ‘logic-driven 
authorization engine” component: (a) Authorization Rules 
are created with a named Rule Set and associated with a 
named “hybrid access control model set”. (b) Rules in the 
Authorization  Rule  set  are  maintained  centrally  by  a 
trusted  administrator  while  the  “hybrid  access  control 
model  set”  for  each  application  is  maintained  by  the 
individual  application/system  administrators.  (c)  The 
Authorization  Type  Designation  assigned 
to  each 
authorization  request  and  the  predicate  bindings  used  in 
approving or denying the request are recorded in an audit 
log  and  periodically  reviewed  for  correct  authorization 
assignments. 
7.  Conclusions and Scope for Future Work 
implemented 
rules  can  be 
in  performance  penalties  for 
features  may  make  the  authorization  engine  difficult  to 
the 
build  and  result 
sophisticated 
authorization  mechanism.  However 
authorization 
(without 
significant degradation of system response times) through 
the  use  of  a  common  security  kernel  that  will  mediate 
access  to  a  family  of  application  systems  within  a 
healthcare  enterprise  as  has  been  done  in  the  VA 
healthcare  settings.  However  the  presence  of  a  security 
kernel may make integration of COTS application systems 
into  the  IT  resources  of  a  healthcare  enterprise  an 
expensive  operation.    Since  IT  infrastructures  in  most 
healthcare  enterprises  are  heterogeneous, 
the  most 
preferred  alternative  is  to  build  application-level  controls 
for authorizations by making sure that appropriate access 
control  models  and  mechanisms  are  used  to  capture  the 
enterprise authorization policy requirements. 
[5] J.Hoffman. “Implementing RBAC on a type enforced system” 
Proc. 13th  Annual Computer Security Applications Conference, 
December 1997. 
[6]  S.  Jajodia,  P.Samarati  and  V.S.Subrahmanian.  “A  Logical 
Language for Expressing Authorizations”  IEEE Symposium on 
Security and Privacy 1997, p31-42. 
[7]    K.A.  Oostendorp,  L.Badger,  C.D.  Vance,  W.G.  Morrison, 
M.J.  Petkac,  D.L  Sherman,  D.F  Sterne  “Domain  and  type 
enforcement  firewalls”  Proc  13th  Annual  Computer  Security 
Applications Conference, December 1997. 
[8]  R.S.  Sandhu,  E.J.Coyne,  H.L.Feinstein  and  C.E.Youman. 
“Role  Based  Access  Control  Models”  IEEE  Computer,  vol  29, 
Num 2, February 1996, p38-47. 
[9] Security and Electronic Signature Standards; Proposed Rule. 
Federal Register, Vol 63, No. 155, August 12, 1998.  
[10] J. Tidswell and J. Potter “An Approach to Dynamic Domain 
and  Type  Enforcement”  Microsoft  Research 
Institute, 
Department  of  Computing,  Macquarie  University,  NSW 
Australia. 
can 
this 
provide 
framework 
Authorization  mechanisms 
that  support  multiple 
authorization types can provide effective control of access 
to  resources  in  many  vertical  market  applications.  The 
DAFMAT 
critical 
functionality  using  a  hybrid  access  control  model  and  a 
logic-driven  authorization  engine  that  makes  use  of 
contextual information. The same authorization engine can 
be  used  for  dynamic  reconfiguration  of  Domain-Type 
access matrix entries as well as for dynamic User-Role and 
Subject-Role assignments.  However the inclusion of these 
8.  References 
[1] 
  J.F.Barkley,  A.V.Cincotta,  D.F.Ferraiolo,S.Gavrila  and 
D.R.Kuhn.  “Role  based  access  control  for  world  wide  web” 
http://hissa.ncsl.nist.gov/rbac/rbacweb/paper.ps, April 1997. 
[2]  W.Boebert  and  R.Kain.  “A  Practical  Alternative 
to 
Hierarchical  Integrity  Policies”  Proc.  8th  National  Computer 
Security Conference, October 1985. 
[3]  D.Ferraiolo,  J.Cugini,  and  D.R.Kuhn.  “Role  Based  Access 
Control  (RBAC):  Features  and  Motivations”  Proc.  11th  Annual 
Computer Security Applications Conference, December 1995. 
[4] P.Greve, J.Hoffman and R.Smith. Using Type Enforcement to 
assure  a  configurable  guard.  Proc.  13th  Annual  Computer 
Security Applications Conference, December 1997.