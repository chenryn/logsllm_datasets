### Context Variable in Predicate 4.4.7
The value for the context variable can be obtained from Table 5.6, which provides a mapping of Menu Options to Context Variable values in the ADT system. The next category of data required is the instantiation of the context predicate (as shown in expression 4.4.10) that is relevant for the context variable values encountered in the ADT system.

### Instantiation of Validation Conditions
For the menu options "Change Beds/Room" and "Transfer to Acute Care," the instantiated validation conditions are as follows:

**For "Change Beds/Room":**
- **Context Predicate:**
  - `Subject_Role(subject, role) & Equals(cv, wardname) & Ward_Assignment(user, cv_value) ⊢ Context_Auth_Req(user, role, subject, cv, cv_value)`

**For "Transfer to Acute Care":**
- **Context Predicate:**
  - `Subject_Role(subject, role) & Equals(cv, facilitytype) & Specialist_in_Charge(cv_value, user) ⊢ Context_Auth_Req(user, role, subject, cv, cv_value)`

### Truth Values for Predicates
The final but crucial category of DAFMAT data required in the ADT system is for establishing the truth values for the `ward_assignment` and `specialist_in_charge` predicates (in the instantiated validation conditions 5.2.1 and 5.2.2) for the validation condition for emergency and authorization. These values are provided in Tables 5.7 through 5.9.

#### Table 5.6 - Menu Option to Context Variable Mapping in ADT
| Context Variable (CV) | Menu Option          |
|-----------------------|----------------------|
| NONE                  | 1. Admit Patient     |
| wardname              | 2. Change Beds/Room  |
| facilitytype          | 3. Transfer to Acute Care |
| patientname           | 4. Order Lab Tests   |
| NONE                  | 5. Discharge Patient |

#### Table 5.7 – Truth Values for Predicate `Ward_Assignment`
| User      | Predicate                        |
|-----------|----------------------------------|
| smith     | `Ward_Assignment(smith, 'PEDIATRIC')` |
| mell      | `Ward_Assignment(mell, 'MATERNITY')`  |

#### Table 5.8 – Truth Values for Predicate `Specialist_in_Charge`
| Facility         | Specialist | Predicate                            |
|------------------|------------|--------------------------------------|
| ICU              | mike       | `Specialist_in_Charge(ICU, mike)`     |
| CHEMO_THERAPY   | patricia   | `Specialist_in_Charge(CHEMO_THERAPY, patricia)` |

#### Table 5.9 – Emergency to Regular Role Mappings
| Emergency Role    | Regular Role        | Predicate                               |
|-------------------|--------------------|-----------------------------------------|
| facilities_specialist | Facilities_manager | `ER_Role_Map(facilities_specialist, Facilities_manager)` |
| Facilities_manager | ward_scheduler     | `ER_Role_Map(Facilities_manager, ward_scheduler)` |

### Example Authorization Requests
Given the following parameters:
- `user = smith`
- `role = admissions_clerk`
- `subject = transfer_proc`
- `cv = wardname`
- `pc = NR`

Since `smith` is invoking this menu to perform a bed-swapping operation for patients in the pediatric ward, the context variable value `wardname` will be:
- `cv_value = 'PEDIATRIC'`

Thus, the authorization request predicate for `smith` will be:
- `Auth_Req(smith, ward_scheduler, transfer_proc, wardname, 'PEDIATRIC', NR)`

### Authorization Processing in ADT
Based on the data needed for ADT authorization, let's illustrate how the following three user requests will be processed by the DAFMAT framework for ADT.

#### 5.3.1 Smith's Request to Swap Beds
- **Menu Option:** Item 2 in Table 5.6 (i.e., "Change Beds/Room")
- **Session Variables:** Using mapping functions 4.4.2 through 4.4.6, the values for the session-related variables are:
  - `Auth_Req(smith, ward_scheduler, transfer_proc, wardname, 'PEDIATRIC', NR)`
- **Authorization Type:** Context-based
  - Transformed into: `Context_Auth_Req(smith, ward_scheduler, transfer_proc, wardname, 'PEDIATRIC')`
- **Validation Condition:**
  - `Subject_Role(transfer_proc, ward_scheduler) & Equals(cv, wardname) & Ward_Assignment(smith, 'PEDIATRIC')`
- **Condition Satisfaction:**
  - `Subject_Role(transfer_proc, ward_scheduler)` is true (Table 5.3)
  - `Equals(cv, wardname)` is trivially satisfied
  - `Ward_Assignment(smith, 'PEDIATRIC')` is true (Table 5.7)

Since the condition is satisfied, `smith`'s request to swap beds for a couple of patients in the pediatric ward will be authorized.

#### 5.3.2 Patricia's Request to Transfer a Patient to ICU
- **Menu Option:** Item 3 in Table 5.6 (i.e., "Transfer to Acute Care")
- **Session Variables:**
  - `Auth_Req(patricia, facilities_specialist, transfer_proc, facilitytype, 'ICU', NR)`
- **Authorization Type:** Context-based
  - Transformed into: `Context_Auth_Req(patricia, facilities_specialist, transfer_proc, facilitytype, 'ICU')`
- **Validation Condition:**
  - `Subject_Role(transfer_proc, facilities_specialist) & Equals(cv, facilitytype) & Specialist_in_Charge('ICU', patricia)`
- **Condition Satisfaction:**
  - `Subject_Role(transfer_proc, facilities_specialist)` is true (Table 5.3)
  - `Equals(cv, facilitytype)` is trivially satisfied
  - `Specialist_in_Charge('ICU', patricia)` is false (no entry in Table 5.8)

Since the condition is not satisfied, `patricia`'s request to transfer a patient to ICU will be denied.

#### 5.3.3 Patricia's Emergency Request to Transfer a Patient to ICU
- **Menu Option:** Same as 5.3.2, but an emergency request
- **Session Variables:**
  - `Auth_Req(patricia, facilities_manager, transfer_proc, facilitytype, 'ICU', ER)`
- **Authorization Type:** Emergency
  - Transformed into: `Emergency_Auth_Req(patricia, facilities_manager, transfer_proc, facilitytype, 'ICU')`
- **Validation Condition:**
  - `ER_Role_Map(role, mapped_role) & Subject_Role(subject, mapped_role)`
- **Condition Satisfaction:**
  - `ER_Role_Map(facilities_manager, facilities_specialist)` is true (Table 5.9)
  - `Subject_Role(transfer_proc, facilities_specialist)` is true (Table 5.3)

Since the condition is satisfied, `patricia`'s emergency request to transfer a patient to ICU will be approved.

### Assurance Measures for DAFMAT Administration
To ensure the administration of the DAFMAT framework in an enterprise setting, the following assurance measures are suggested:
- **Hybrid Access Control Model:**
  - Inherent structural constraints augmented with application-specific constraints provide protection against unsafe configurations.
- **Logic-Driven Authorization Engine:**
  - **Rule Sets:** Authorization rules are created with named rule sets and associated with a named hybrid access control model set.
  - **Central Management:** Rules in the authorization rule set are maintained centrally by a trusted administrator, while the hybrid access control model set for each application is maintained by individual application/system administrators.
  - **Audit Logs:** The authorization type designation and predicate bindings used in approving or denying requests are recorded in an audit log and periodically reviewed for correct authorization assignments.

### Conclusions and Future Work
Authorization mechanisms that support multiple authorization types can provide effective control of access to resources in many vertical market applications. The DAFMAT framework offers critical functionality using a hybrid access control model and a logic-driven authorization engine that leverages contextual information. The same authorization engine can be used for dynamic reconfiguration of Domain-Type access matrix entries and for dynamic User-Role and Subject-Role assignments. However, the inclusion of these features may result in performance penalties and make the authorization engine more complex to build. A common security kernel can mediate access to a family of application systems within a healthcare enterprise, as seen in VA healthcare settings, but this may increase the cost of integrating COTS application systems. Given the heterogeneity of IT infrastructures in most healthcare enterprises, the preferred alternative is to build application-level controls for authorizations by ensuring appropriate access control models and mechanisms are used to capture enterprise authorization policy requirements.

### References
[1] J.F.Barkley, A.V.Cincotta, D.F.Ferraiolo, S.Gavrila, and D.R.Kuhn. “Role based access control for world wide web.” http://hissa.ncsl.nist.gov/rbac/rbacweb/paper.ps, April 1997.
[2] W.Boebert and R.Kain. “A Practical Alternative to Hierarchical Integrity Policies.” Proc. 8th National Computer Security Conference, October 1985.
[3] D.Ferraiolo, J.Cugini, and D.R.Kuhn. “Role Based Access Control (RBAC): Features and Motivations.” Proc. 11th Annual Computer Security Applications Conference, December 1995.
[4] P.Greve, J.Hoffman, and R.Smith. “Using Type Enforcement to assure a configurable guard.” Proc. 13th Annual Computer Security Applications Conference, December 1997.
[5] J.Hoffman. “Implementing RBAC on a type enforced system.” Proc. 13th Annual Computer Security Applications Conference, December 1997.
[6] S.Jajodia, P.Samarati, and V.S.Subrahmanian. “A Logical Language for Expressing Authorizations.” IEEE Symposium on Security and Privacy 1997, p31-42.
[7] K.A.Oostendorp, L.Badger, C.D.Vance, W.G.Morrison, M.J.Petkac, D.L.Sherman, and D.F.Sterne. “Domain and type enforcement firewalls.” Proc. 13th Annual Computer Security Applications Conference, December 1997.
[8] R.S.Sandhu, E.J.Coyne, H.L.Feinstein, and C.E.Youman. “Role Based Access Control Models.” IEEE Computer, vol 29, Num 2, February 1996, p38-47.
[9] Security and Electronic Signature Standards; Proposed Rule. Federal Register, Vol 63, No. 155, August 12, 1998.
[10] J.Tidswell and J.Potter. “An Approach to Dynamic Domain and Type Enforcement.” Microsoft Research Institute, Department of Computing, Macquarie University, NSW Australia.