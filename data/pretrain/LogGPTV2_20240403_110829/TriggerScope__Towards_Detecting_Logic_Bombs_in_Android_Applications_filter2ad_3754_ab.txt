tively identify previously-unknown, interesting triggers,
including two backdoors in benign apps and a variety
of logic bombs in the malicious samples. Our evaluation
also shows that TRIGGERSCOPE has a very low false
positive rate, and it outperforms several other state-of-
the-art analysis tools when detecting logic bombs.
• We show how TRIGGERSCOPE can effectively assist a
human analyst who aims to identify hidden logic bombs
in Android apps. In fact, TRIGGERSCOPE’s analysis
output includes rich details about the detected triggers,
and enables the quick veriﬁcation of its ﬁndings through
proof-of-concepts that exercise the relevant behaviors. We
also empirically found that triggers are relatively rare in
benign apps, and their presence can therefore be used a
strong signal that motivates further scrutiny.
II. SYSTEM OVERVIEW
In the previous section, we informally introduced the notion
of triggers. In the following paragraphs, we ﬁrst sharpen that
379379
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
Path Predicate Extraction
Symbolic Value Modeling
Path Predicate Classiﬁcation
Benign
Apps
Class Hierarchy 
Analysis
Control
Flow Analysis
Symbolic Value
Modeling
Block Predicate
Extraction
Path Predicate
Recovery
Predicate
Minimization
Suspicious Predicate 
Identiﬁcation
Control Dependency 
Identiﬁcation
Annotated
sCFG
Suspicious
Apps
Android
APKs
Figure 2: Overview of the components that comprise our trigger analysis. In the ﬁrst phase, Android APKs are disassembled, and an Android-
speciﬁc forward symbolic execution is performed on the Dalvik bytecode to recover an sCFG annotated with block predicates and
abstract program states at all program points. In the second phase, full path predicates are recovered and checked whether they
represent potential triggers for malicious behavior.
deﬁnition to provide the reader with a better understanding of
our threat model. Then, we describe at a high level how our
system can ﬁnd triggers in Android apps.
A. Trigger – A Deﬁnition
Before providing a deﬁnition of triggers, we ﬁrst introduce
terminology. We deﬁne a predicate as an
some relevant
abstract formula that represents a condition in a program: a
condition is introduced by a branch (such as an if statement)
and ensures that some program code is executed only when
the abstract formula (i.e., the predicate) evaluates to true.
Moreover, a predicate is said to be suspicious if, intuitively,
it represents a condition that
is satisﬁed only under very
speciﬁc, narrow circumstances (Section III-D provides a more
concrete deﬁnition). We then deﬁne a functionality as a set
of basic blocks in a program. A functionality is said to be
sensitive if at least one of its basic blocks performs, directly
or indirectly (i.e., through a method call), a sensitive operation.
The deﬁnition of sensitivity can be speciﬁed through a user-
deﬁned policy (Section III-E describes the concrete policy we
used for this paper). We now deﬁne a trigger as a suspicious
predicate that (directly or indirectly) controls the execution of
a sensitive functionality.
More formally, a trigger is a predicate p such that the
following property holds: isSuspicious(p) ∧ ∃ F :
(isSensitive(F)
controlsExec(p, F)). The
isSuspicious(p) and isSensitive(F) properties are
satisﬁed if the predicate p is suspicious and the functionality F
is sensitive, respectively. The controlsExec(p, F) property
is satisﬁed if either one of the following two properties hold:
1) p directly controls the execution of F;1 2) ∃ F(cid:3) such
that p directly controls the execution of F(cid:3) ∧ “F(cid:3) (intra-
or inter-procedurally) alters the value of a ﬁeld (or object)
that is part of a predicate p(cid:3)” ∧ controlsExec(p(cid:3), F).
For the interested reader, Figure 7 (in Appendix B) reports
the implementation (in pseudocode) of the function that
∧
1In this paper, “directly controls” indicates that p is part of the intra-
procedural path predicate that controls the execution of F. All details are
explained in Section III-E
determines whether a given predicate matches our deﬁnition
of trigger.
Throughout
this paper, we will discuss how TRIGGER-
SCOPE’s analysis steps play a key role in effectively detecting
triggers: in particular, we will show that isSuspicious
heavily relies on the information extracted by the symbolic
execution and predicate classiﬁcation, while controlsExec
relies on the path reconstruction and minimization technique,
and on the control-dependency analysis.
B. Analysis Overview
At a high level, our trigger analysis for Android applications
proceeds in two phases, an overview of which is depicted in
Figure 2. In the ﬁrst phase, Android APKs are unpacked and
subjected to forward static symbolic execution. For this, we
leverage a ﬂow-, context-, and path-sensitive analysis that also
takes into consideration the Android application lifecycle and
interactions between Android application components. This
phase produces an annotated super control-ﬂow graph (sCFG),
which consists of the inter-procedural CFG superimposed on
the intra-procedural CFGs for each method. The annotations
store all possible values (upper and lower bounds) for local and
ﬁeld variables in the program, as well as detailed information
about how the objects relevant to our analysis are created and
modiﬁed.
The second phase takes this annotated graph as input, with
the goal of identifying all triggers contained in the program.
The ﬁrst step of this phase is to recover the intra-procedural
path predicates associated with each basic block. A path
predicate for a basic block b is a predicate p such that if 1) the
execution reaches the entry block of the method containing b,
and 2) p is satisﬁed, then b will be necessarily executed. These
path predicates give us information about which conditions in
the program control the execution of which blocks. As the next
step, the analysis identiﬁes all suspicious path predicates in the
program (this is possible thanks to the information extracted
during the symbolic execution step), and, for each of them,
it checks whether the predicate guards the execution of a
sensitive functionality: these predicates are exactly the ones
that match our deﬁnition of trigger.
380380
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
1.method public f()V
2
// Date now = new Date();
new-instance v0, Ljava/util/Date;
invoke-direct {v0}, \
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
Ljava/util/Date;->()V
// Date target = new Date(12,22,2016);
new-instance v1, Ljava/util/Date;
const/16 v2, 0xc
const/16 v3, 0x16
const/16 v4, 0x7e0
invoke-direct {v1, v2, v3, v4}, \
Ljava/util/Date;->(III)V
// if (now.after(target)) {...}
invoke-virtual {v0, v1}, \
Ljava/util/Date;-> \
after(Ljava/util/Date;)Z
move-result v2
// suspicious check!
if-eqz v2, :cond_0
// g();
invoke-virtual {p0}, LApp;->g()V
goto :goto_0
:cond_0
// h();
invoke-virtual {p0}, LApp;->h()V
:goto_0
return-void
34
35.end method
Figure 3: This ﬁgure shows the Dalvik bytecode representation of
the f function presented in Figure 1. The Java-equivalent
of each set of instructions is reported in the comments. This
example clearly shows how the semantics of the suspicious
check is lost. In fact, the check is translated into a simple
if-eqz bytecode instruction (line 22): both the type of
operation and its arguments are lost. TRIGGERSCOPE uses
symbolic execution to reconstruct the semantics of these
checks, to then perform a classiﬁcation step.
In the remainder of this section, we provide an overview
of the main analysis steps, and discuss their role in the entire
analysis process.
Symbolic Execution. One of the key aspects of our analysis
is the capability to classify predicates (or checks). The main
challenge in doing so is related to the fact that the semantics
of each check is lost during the translation of the program
from Java source code to Dalvik bytecode. As an explanatory
example, consider again the snippet of code in Figure 1. As we
already discussed, for a human analyst, it is straightforward to
recognize that the check contained in function f is suspicious.
However, at the bytecode level, the clearly-suspicious check in
the Java snippet (line 6) is translated into a if-eqz bytecode
instruction, which simply checks that the content of a register
is different from zero. Thus, the semantics of the check is not
easily-accessible anymore and must be reconstructed. Figure 3
shows the Dalvik bytecode corresponding to the example in
Figure 1.
To overcome this limitation, our approach relies on symbolic
execution and it precisely models several Java and Android
APIs. This allows our approach to annotate each object
referenced in a check, with precise information about
its
type, (symbolic) value, and the operations that inﬂuence it.
As we discuss in details in Section III-A, these annotations
allow the analysis to generate expression trees that contain all
the necessary information to reconstruct the semantics of the
check and to consequently classify it.
Block Predicate Extraction. As we mentioned, one of the
main steps of our analysis is to reconstruct the path predicates
associated with each basic block of the program. To do so, the
analysis ﬁrst extracts simple block predicates – i.e., symbolic
formulas over the abstract program state that must be satisﬁed
in order for a basic block to be executed. In particular, during
the symbolic execution step, the system annotates the CFG
with information about the low-level conditions that need to
be satisﬁed in order to reach each block, assuming that the
execution already reached one of its predecessors. Moreover,
these conditions are also annotated with information about the
semantics of the objects involved in the check. This step is
discussed in detail in Section III-B.
Path Predicate Recovery and Minimization. In the next
phase, the analysis combines together the simple block predi-
cates, to then recover the path predicates for each basic block
in the program. To this end, the analysis performs a backwards
traversal of the CFG, it recovers the full path predicates, and it
then minimizes them to remove redundant terms, which would
otherwise introduce false dependencies. The details of this step
are discussed in Section III-C.
Predicate Classiﬁcation. While the aforementioned tech-
niques greatly reduce the candidate set of path predicates
that must be considered, this alone is not enough to precisely
identify suspicious predicates. As an example, consider a game
that implements a recurring check that triggers an action every
few seconds. Although it depends on time, this behavior is
perfectly legitimate. For this reason, our analysis considers
multiple characteristics of a predicate in order to classify
it. This not only includes whether the predicate involves
values labeled as originating from a potential trigger input,
but also the type of the comparison performed. Note that this
is technically possible only because the system has access to
the information extracted during the symbolic execution step.
The full details of this step are presented in Section III-D.
Control-Dependency Analysis. As a ﬁnal step, our system
checks whether a suspicious predicate guards any sensitive
operations. In particular, the system recursively checks, for
each block guarded by a suspicious predicate, whether this
block (intra- or inter-procedurally) invokes a sensitive method,
or whether it modiﬁes a ﬁeld or an object that are later involved
in a predicate that, in turn, guards the execution of a sensitive
operation. This step allows us to detect explicit as well as
implicit control dependencies, and it signiﬁcantly improves the
precision over systems that simply look for any kind of checks
381381
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
'DWHDIWHU'DWH
QRZ
Figure 4: Example of an expression tree.

against sensitive values, in terms of both false positives and
false negatives. The details about this step are provided in
Section III-E.
III. ANALYSIS STEPS
While the previous section provided a high-level overview
of the analysis steps, in this section we elaborate upon the
details.
A. Symbolic Execution
The analysis begins by ﬁrst unpacking the Android APK and
extracting the DEX ﬁle that contains the application’s Dalvik
bytecode, the encoded application manifest, and encoded re-
sources such as string values and GUI layouts. The bytecode
is then lifted into a custom intermediate representation (IR)
that all our analysis passes operate on. The analysis then
performs a class hierarchy analysis and control ﬂow analysis
over the IR to construct the intra- and inter-procedural control-
ﬂow graphs. After these preliminary steps, the application’s
bytecode is subjected to forward static symbolic execution,
applying a ﬂow-, path-, and context-sensitive analysis, where
the particular context used ranges from full insensitivity to
2Type1Heap object sensitivity [51], which is known to provide
a good trade-off between precision and performance when
performing symbolic execution on object-based programs.
Android Framework Modeling. A notable feature of our
analysis that bears mention is its awareness of
i) the An-
droid application lifecycle, ii) control ﬂows that traverse the
Android application framework due to the pervasive use of
asynchronous callbacks used in Android applications, and
iii) inter-component communication using the Android intent
framework. The precise modeling of these aspects has been
widely studied in the literature and, for our design and
implementation, we mainly reused ideas from previous works.
In particular, we follow the approach described in FlowDroid
to model Android application components’ lifecycle [19]; we
integrate EdgeMiner’s results to model the control ﬂow trans-
fers through the Android framework [24]; and we reused ideas
presented in Epicc [45] to precisely model inter-component
communications among the applications components.
Symbolic Values Modeling. Our symbolic execution engine
models the sets of possible values that local and ﬁeld lo-
cations can contain. In particular,
the analysis focuses on
integer, string, time, location, and SMS-related objects, and
it records operations performed over concrete and symbolic
values in these classes. For example, the analysis faithfully
models symbolic string values produced and manipulated by
many important classes (e.g., String, StringBuffer,
StringBuilder, and related classes) and their respective
methods (e.g., append, substring, and similar APIs).
Moreover, our system models symbolic integer values resulting
from APIs such as equals, startswith, and contains,
which are particularly important when detecting suspicious
checks on String-based objects (such as the body and the
sender retrieved from the SmsMessage object). The accurate
modeling of String objects is also useful to precisely model
Intents and Bundles objects (in essence, a key-value
store).
Similarly, our prototype also models time-related objects.