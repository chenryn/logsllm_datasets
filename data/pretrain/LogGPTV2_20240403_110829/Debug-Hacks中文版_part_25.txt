list_del(&entry->list);
entry = list_entry(trouble.list.next, struct k_entry, list);
kfree(entry);
list_del(&entry->list);
www.TopSage.com
/*释放链表项*/
/*从链表中取出项*/
?
?
?
?
---
## Page 205
下面是获取的转储的backtrace。
分析转储
并产生转储。
这段代码用spin_Lock(）保护链表，看似没有问题，但一insmod该模块就会panic
为了能执行rmmod，最后放了个kthread_should_stop(）。
Call Trace:{:trouble_list:list_del_thread+0}
Modules linked in:trouble_list….
{kfree+168}
Unabletohandlekernelpagingrequestat000000108RIP:
Stack:000000060000000000000282 000000000000000 fffffffa01960e0
Processlist_del（pid:4825,threadinfo00001007c752000,task 0000010059f9a7fo)
CR2:0000000100080 CR3:0000000168000CR4:00000000006e0
R13:
R10:
RBP:
RDX:
RIP:
Pid:4825,comm:list_del Not tainted 2.6.9
CPU1
0ops:0000[1]SMP
PML40
return0;
{child_rip+0}
{keventd_create_kthread+0}{kthread+0}
{kthread+200}{child_rip+8}
{:trouble_list:list_del_thread+67}
ffffffffffffffff000001006led7e08
0000010061ed7e18fffffffa01961230000000000000000 ffffffff8014b4cf
0000000000000000（0000)
00000000fffffffcR14:
0000000000000001 R11:
ffffffffa0196d40R
00000000000000 RSI:0000000000000008 RDI:0000000100100
0000000000000001RBX:0000000000000000 RCX:00000100000C000
0018:000001007c753e8 EFLAGS:00010002
0010:[]{kfre+168]
R08:
GS:ffffffff8050d300(0000)knlGS:0000000000000000
0000010061ed7e08 R15:ffffffff8014b4f8
0000000000000001 R12:0000010061ed7e18
0000000000000003R
www.TopSage.com
/*复现测试程序的模块*/
R09:0
0000000000000040
BU187
?
194
---
## Page 206
195>
list_deL()，导致链表的 next 和 prev 被 LIST_POISON 污染。
下执行list_del_thread()时，由于试图从空链表中强行获取链表项并执行
list_release_thread()处理结束后，链表为空。panic 时，也就是说链表为空的状态
正常链表和本例的链表如图 5-3 所示。
获得的正常链表项使用，会引发非法访问。
链表为空时，用list_entry()得到的链表项为0x100100，然后把它当做用kmalloc()
这个 bug 的原理如图 5-2 所示。
链表破坏的原理
③的100108的原因是使用了kfree()内trouble.list.next(0x100100)的偏移量0x8。
够发现这种问题，而故意进行了污染。
这是为了在错误地访问list_del()删除过的链表项或使用未初始化的链表项时，能
赋为LIST_POISON。
Linux 的 2.6 内核中，list_del()不会将链表项的 next、prev 成员置成 NULL，而是
LIST_POISON 
100108(0x100100+0x8)。这就是 LIST_P0ISON。
生的 panic。但这次我们查看访问指针地址⑧，这个地址有点特别，是
通常要根据反汇编的结果检查kfree()+168 的位置，看看它是在访问什么变量时发
188】第5章实践内核调试
static inline void list_del(struct list_head *entry)
#define LIST_P0ISON2 ((void *) 0x00200200)
#define LIST_POISON1
[include/linux/list.h] 
entry->prev = LIST_POISON2;
entry->next = LIST_POISON1;
_.list_del(entry->prev, entry->next);
((void *) 0x00100100)
www.TopSage.com
---
## Page 207
图5-2链表破坏的原理（1)
下面是在该转储中访问全局的 trouble 链表的结果。
crash>
list: invalid kernel virtual address: 100100 type: "list entry"
100100
ffffffffa0196d40
crash> list trouble
prev = 0x200200
next = 0x100100,
struct list_head {
crash> struct list_head trouble
spin_unlock() ②
list_add_thread()
spin_lock() ①
个
www.TopSage.com
>spin_lock() ③
list_release_thread()
spin_unlock()④
HACK#34kernel panic（链表破坏篇）
，同样是非法访问。
>spin_lock() ③
if (!list_empty()) ③
其执行 kfree(）
list_del_thread()
链
表为空时，
链表非空，因此删除
在kifree+168
处 panic
1189
---
## Page 208
197
196
发了 panic,
下面是在启用了 Debug memory allocations 的内核上执行复现程序的结果。BUG()引l
allocations(CONFIG_DEBUG_SLAB=y)，再重新编译内核。
要使用该功能，需要在 make menuconfig 中启用 Kernel hacking -> Debug memory
链表破坏可以通过 LIST_POISON 发现，除此之外，还有个 Debug memory allocations
刚才用复现测试程序弄清楚了原因，但实际的 bug 是很困难的。list_del()造成的
Debug memory allocations 
图5-3链表破坏的原理（2）
190 1  第 5 章实践内核调试
检查已分配的内存（slab cache）。
调试功能，可以用于检测已分配的内存区域和双重释放等。kmalloc()/kfree()可以
kfree_debugcheck: bad ptr fffffa0196d40h.
(用list_del_thread()将空链表 list_del()之后的状态）
panic 时的链表状态
列表为空时的状态
entry ntrouble.list
(用 ist_add_thread()添加项目后的状态 ）
(list_release_thread()处理结束后的状态）
一般链表
，在此之前输出了信息。
0x200200
prev
prev
prev
: et anty -
www.TopSage.com
head
:pet = 82818
trouble.list
:pet had 
trouble.list
head
head
next
0x100100
next
xau
---
## Page 209
spin_lock()之内进行。下面是补丁。
本 hack 讨论的链表破坏可以用互斥处理解决。链表是否为空的检查也应当在
链表破坏的修改方法
访问了。
是个全局变量，不是 kmalloc()或 kmem_cache_alloc()分配的内存）的内存区域被
用。@的指针是trouble变量的地址。该消息的意思是，slab cache之外（trouble
kfree_debugcheck()是个内存检查函数，只在 CONFIG_DEBUG_SLAB=y 时由kfree()调
@@ -63,15 +63,15 @@ static int list_release_thread(void *dat
+++ trouble_list.c.new
--- trouble_list.c
l_thread+0}
Call Trace:{kfree+29} {:trouble_list:list_de
RAX: 0000000000000030 RBX: ffffffffa0196d40 RCX: ffffff803e8d68
RSP: 0018:0000010077eafed8 EFLAGS: 00010012
Pid: 4380, comm: list_del Not tainted 2.6.9-42.28AXinode
Modules linked in: trouble_list ...
CPU 
invalid operand: 0000 [1] SMP
Kernel BUG at slab:1862
static int list_del_thread(void *data)
{child_rip+0}
{keventd_create_kthread+0} {kthread+0
{:trouble_list:list_del_thread+82}
do
if (!list_empty(&trouble.list)){
spin_lock(&trouble.lock);
 struct k_entry *entry;
2009-01-14 23:19:59.000000000 +0900
2009-01-14 23:18:27.000000000 +0900
www.TopSage.com
/*意思是kernel/slab.c的 1862行*/
HACK#34 kernei panic（链表破坏篇）
 丨191
---
## Page 210
198
从转储中弄清楚原因后编写的补丁是否能改正bug，是否还有其他应当考虑的地方，
#35
clockwas_set（）中实际发生的链表破坏bug。）
类似的功能有检查内存页面的Page alloc debugging（CONFIG_DEBUG_PAGEALLOC）。
等污染的内存区域，也可以检测到双重释放、slab cache的非法使用等。
本hack还介绍了Debug memory allocations。使用该功能，即使不是被LIST_POISON
会赋为LIST_POISON。因此，该方法虽然不是万能钥匙，却是Linux内核调试的技
LIST_POISON由list_del（）设置，而list_del_init（）会将链表项初始化为NULL，不
想产生了链表破坏。
本hack介绍了链表破坏导致的panic。只要出现0x100100或者0x200200，就可以猜
应用该补丁之后就不再发生panic，可以正常运行了。
192|第5章实践内核调试
设法复现。
以及内核源代码中看上去像是bug的地方实际上是否有问题，要确认这些，都需要
（这次链表破坏的例子来自于2.6.15版之前在内核的kernel/posix-timers.c的
术之一。
总结
}while(!kthread_should_stop());
用的测试程序。
本hack根据内核源代码确认操作系统的行为，根据竞态条件编写复现
kernel panic
msleep(1);
spin_unlock(&trouble.lock);
spin_unlock(&trouble.lock);
kfree(entry);
list_del(&entry->list);
spin_lock(&trouble.lock);
www.TopSage.com
一大岩尚宏
---
## Page 211
本 hack 按照以下流程讲述从源代码中发现可能存在的 bug 时的处理方法。
图 5-4修改bug的流程
bug 修改的主要流程如图5-4 所示。
修改流程
讲解一下 bug 的修改方法。使用机器的内存为 2GB，交换空间为 2GB。
本 hack 在 2.6.9 版内核的发行版中，发现 inode 的代码中可能包含 bug，以此为例
发生的路径，并且时机必须合适，才能复现。
但是，那些极其罕见的 bug 复现就相当困难了，内核和用户程序都必须执行过 bug
可能存在的 bug。
获取转储
发现bug
不
测试
X
复
反复
分析转储
www.TopSage.com
用重现程序确认是否改正
编写重现测试程序
优化测试程序
不
调查源代码
意外转储
正常运营
编写补丁
重现
HACK#35  kernel panic1  193
发现可能的 bug
(本HACK)
调查源代码
199
---
## Page 212
[200
inode_lock 执行解锁。
本次发现的可能的 bug 位于 fs/inode.c 的 generic_forget_inode()，它临时对
的缓存。
Linux 内核中有 inode 这个概念。inode 就是管理普通文件、符号链接、目录等信息
1.可能存在的 bug
6．确认社区的修改历史。
5-2.用 mdelay()提高复现率。
5-1.
5.
4.
3-1.
?
194丨第5章实践内核调试
4-1.
static void generic_forget_inode(struct inode *inode)
确认路径 2。
if (!hlist_unhashed(&inode->i_hash)） {
 struct super_block *sb = inode->i_sb;
用正常内核执行复现测试。
复现bug。
用WARN_ON()确认。
确认路径1。
inodes_stat.nr_inodes--;
inode->i_state]=I_FREEING;
调整vfs_cache_pressure参数。
调查源代码。
list_del_init(&inode->i_list);
hlist_del_init(&inode->i_hash);
if (!sb I|l (sb->s_flags & MS_ACTIVE))
if (!(inode->i_state & (I_DIRTY|I_LOCK))
inodes_stat,nr_unused--;
spin_lock(&inode_lock);
write_inode_now(inode, 1);
spin_unlock(&inode_lock);
return; 
inodes_stat.nr_unused++;
list_move(&inode->i_list, &inode_unused);
www.TopSage.com
—在这里解锁
由于nr_inodes 不是原子操作，
设置I_FREEING 标志
加锁
and_lock()获取锁
用iput()的atomic_dec_
---