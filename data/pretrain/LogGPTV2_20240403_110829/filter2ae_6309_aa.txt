通过 how2heap 复习堆利用
## Educational Heap Exploitation
[how2heap](https://github.com/shellphish/how2heap)这是由 shellphish
团队创建的一个仓库，是用来学习堆利用技术广为周知的地方。 且主要针对 glibc
### 0x01 first_fit
Source:
    #include 
    #include 
    #include 
    int main()
    {
        fprintf(stderr, "This file doesn't demonstrate an attack, but shows the nature of glibc's allocator.\n");
        fprintf(stderr, "glibc uses a first-fit algorithm to select a free chunk.\n");
        fprintf(stderr, "If a chunk is free and large enough, malloc will select this chunk.\n");
        fprintf(stderr, "This can be exploited in a use-after-free situation.\n");
        fprintf(stderr, "Allocating 2 buffers. They can be large, don't have to be fastbin.\n");
        char* a = malloc(512);
        char* b = malloc(256);
        char* c;
        fprintf(stderr, "1st malloc(512): %p\n", a);
        fprintf(stderr, "2nd malloc(256): %p\n", b);
        fprintf(stderr, "we could continue mallocing here...\n");
        fprintf(stderr, "now let's put a string at a that we can read later \"this is A!\"\n");
        strcpy(a, "this is A!");
        fprintf(stderr, "first allocation %p points to %s\n", a, a);
        fprintf(stderr, "Freeing the first one...\n");
        free(a);
        fprintf(stderr, "We don't need to free anything again. As long as we allocate less than 512, it will end up at %p\n", a);
        fprintf(stderr, "So, let's allocate 500 bytes\n");
        c = malloc(500);
        fprintf(stderr, "3rd malloc(500): %p\n", c);
        fprintf(stderr, "And put a different string here, \"this is C!\"\n");
        strcpy(c, "this is C!");
        fprintf(stderr, "3rd allocation %p points to %s\n", c, c);
        fprintf(stderr, "first allocation %p points to %s\n", a, a);
        fprintf(stderr, "If we reuse the first allocation, it now holds the data from the third allocation.");
    }
我们从调试上入手，首先简单对 main 函数下断点。`b main`
。
程序首先创建了两个 chunk，size分别为 512 和256。然后向chunk a 分别写入字符串 'this is A' 。
    Pwndbg> heap
    Top Chunk: 0x602320
    Last Remainder: 0
    0x602000 PREV_INUSE {
      prev_size = 0x0,
      size = 0x211,
      fd = 0x2073692073696874,
      bk = 0x2141,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    Pwndbg> x/20a 0x602000
    0x602000:   0x0 0x211
    0x602010:   0x2073692073696874  0x2141
    0x602020:   0x0 0x0
    0x602030:   0x0 0x0
    0x602040:   0x0 0x0
    0x602050:   0x0 0x0
    0x602060:   0x0 0x0
    0x602070:   0x0 0x0
    0x602080:   0x0 0x0
    0x602090:   0x0 0x0
    Pwndbg> x/5s 0x602010
    0x602010:   "this is A!"
    0x60201b:   ""
    0x60201c:   ""
    0x60201d:   ""
    0x60201e:
这个时候我们把 chunk A free掉。由于chunk A 大小为 512 不适于 fastbins 系统会将这个chunk
放入unsortedbin。
* * *
基本来源：
  1. 当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。
  2. 释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。关于top chunk的解释，请参考下面的介绍。
  3. 当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话。
基本使用情况
  1. Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO， **即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取** 。
  2. 在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。
* * *
当程序再一次 malloc 一个大小与我们 free 掉的chunk 大小差不多的 chunk ，系统会优先从 bins 里找到一个合适的 chunk
把他取出来再使用。写入'this is C'
    Pwndbg> heap
    Top Chunk: 0x602320
    Last Remainder: 0
    0x602000 PREV_INUSE {
      prev_size = 0x0,
      size = 0x211,
      fd = 0x2073692073696874,
      bk = 0x7ffff7002143,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    Pwndbg> x/20a 0x602000
    0x602000:   0x0 0x211
    0x602010:   0x2073692073696874  0x7ffff7002143
    0x602020:   0x0 0x0
    0x602030:   0x0 0x0
    0x602040:   0x0 0x0
    0x602050:   0x0 0x0
    0x602060:   0x0 0x0
    0x602070:   0x0 0x0
    0x602080:   0x0 0x0
    0x602090:   0x0 0x0
    Pwndbg> x/5s 0x602010
    0x602010:   "this is C!"
    0x60201b:   "\367\377\177"
    0x60201f:   ""
    0x602020:   ""
    0x602021:   ""
    Pwndbg>
Unsortedbin 也被取出。
我们发现在原来 chunk A 的位置 也是chunk C 的位置。为什么用“也”呢？因为如果去打印 chunk A 的指针我们也会打印出 “This is
C” 的字符串。
    Pwndbg> p &a
    $3 = (char **) 0x7fffffffe408
    Pwndbg> x/20a 0x7fffffffe408
    0x7fffffffe408: 0x602010    0x602220
    0x7fffffffe418: 0x602010    0x4008e0 
    0x7fffffffe428: 0x7ffff7a303f1   0x40000
    0x7fffffffe438: 0x7fffffffe508  0x1f7b9a488
    0x7fffffffe448: 0x400616  0x0
    0x7fffffffe458: 0x873c9590c5edf93b  0x400520 
    0x7fffffffe468: 0x7fffffffe500  0x0
    0x7fffffffe478: 0x0 0x78c36aef1c4df93b
    0x7fffffffe488: 0x78c37a56d37ff93b  0x0
    0x7fffffffe498: 0x0 0x0
    Pwndbg> x/20a 0x602010
    0x602010:   0x2073692073696874  0x7ffff7002143
    0x602020:   0x0 0x0
    0x602030:   0x0 0x0
    0x602040:   0x0 0x0
    0x602050:   0x0 0x0
    0x602060:   0x0 0x0
    0x602070:   0x0 0x0
    0x602080:   0x0 0x0
    0x602090:   0x0 0x0
    0x6020a0:   0x0 0x0
    Pwndbg> p a
    $4 = 0x602010 "this is C!"
    Pwndbg>
从这我们就会发现 我们去打印 a的内容，a的内容也是‘this is C’。这个就是一个很明显的 **use-after-free** 漏洞。
* * *
uaf 造成原因：
​ 指针free 掉后并没有置0
* * *
### 0x2 fastbin_dup
Tricking malloc into returning an already-allocated heap pointer by abusing
the fastbin freelist.
fastbin 机制下的 double free。
    #include 
    #include 
    int main()
    {
        fprintf(stderr, "This file demonstrates a simple double-free attack with fastbins.\n");
        fprintf(stderr, "Allocating 3 buffers.\n");
        int *a = malloc(8);
        int *b = malloc(8);
        int *c = malloc(8);
        fprintf(stderr, "1st malloc(8): %p\n", a);
        fprintf(stderr, "2nd malloc(8): %p\n", b);
        fprintf(stderr, "3rd malloc(8): %p\n", c);
        fprintf(stderr, "Freeing the first one...\n");
        free(a);
        fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.\n", a, a);
        // free(a);
        fprintf(stderr, "So, instead, we'll free %p.\n", b);
        free(b);
        fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.\n", a);
        free(a);
        fprintf(stderr, "Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\n", a, b, a, a);
        fprintf(stderr, "1st malloc(8): %p\n", malloc(8));
        fprintf(stderr, "2nd malloc(8): %p\n", malloc(8));
        fprintf(stderr, "3rd malloc(8): %p\n", malloc(8));
    }
在这之前，我们先看一个程序。
    17     fprintf(stderr, "Freeing the first one...\n");
     18     free(a);
     19
     20     fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.\n", a, a);
     21     free(a);
     22
     23     fprintf(stderr, "So, instead, we'll free %p.\n", b);
     24     free(b);
     25
我们把21 行的注释去掉。编译程序并运行。
    This file demonstrates a simple double-free attack with fastbins.
    Allocating 3 buffers.
    1st malloc(8): 0xb74010
    2nd malloc(8): 0xb74030
    3rd malloc(8): 0xb74050
    Freeing the first one...
    If we free 0xb74010 again, things will crash because 0xb74010 is at the top of the free list.
    *** Error in `./fastbin_dup_double_free': double free or corruption (fasttop): 0x0000000000b74010 ***
    ======= Backtrace: =========
    /lib/x86_64-linux-gnu/libc.so.6(+0x790cb)[0x7fe7c6e7d0cb]
    /lib/x86_64-linux-gnu/libc.so.6(+0x82c9a)[0x7fe7c6e86c9a]
    /lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fe7c6e8ad8c]
    ./fastbin_dup_double_free[0x400740]
    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf1)[0x7fe7c6e243f1]
    ./fastbin_dup_double_free[0x40054a]
    ======= Memory map: ========
当我们运行程序后，程序发生了明显的报错，这是一个典型的 **double free** 。意味通常而言，一个已经 free 掉的 chunk 是不能被
free 第二次的。然后我们把原本的注释加上。
    17     fprintf(stderr, "Freeing the first one...\n");
     18     free(a);
     19
     20     fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.\n", a, a);
     21     //free(a);
     22
     23     fprintf(stderr, "So, instead, we'll free %p.\n", b);
     24     free(b);
然后重新编译。`gcc -g -no-pie fastbin_dup.c -o fastbin_dup` 并上调试器。
首先程序 malloc 了三个 chunk 。
    Pwndbg> heap
    Top Chunk: 0x602060
    Last Remainder: 0