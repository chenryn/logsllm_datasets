# ForceCoin
Category: PWN, 150 points
## Description
> Following ARM's success, I went ahead and designed my own RISC assembly language.
> 
> I wrote a simulator, so you'll be able to run your own programs and enjoy the (very) reduced instruction set!
> 
> Of course, with such minimal implementation, reading the flag is impossible.
An archive file was attached, containing the following files:
```console
root@kali:/media/sf_CTFs/shabak/BabyRISC# tree BabyRISC
BabyRISC
├── babyrisc
├── Dockerfile
├── inc
│   ├── asm_execution.h
│   ├── asm_file_generation.h
│   ├── asm_file_parsing.h
│   ├── asm_instructions.h
│   ├── asm_processor_state.h
│   ├── asm_types.h
│   ├── common.h
│   └── prompt.h
├── Makefile
├── payload_builder
│   ├── build_payload.c
│   └── Makefile
├── src
│   ├── asm_execution.c
│   ├── asm_file_generation.c
│   ├── asm_file_parsing.c
│   ├── asm_instructions.c
│   ├── asm_processor_state.c
│   ├── main.c
│   └── prompt.c
└── ynetd
```
We won't attach the complete sources since they are quite long. The following is a reduced version.
### main.c
```c
#include 
#include 
#include 
#include 
#include "prompt.h"
#include "common.h"
#include "asm_types.h"
#include "asm_file_generation.h"
#include "asm_execution.h"
#define MAX_FLAG_SIZE (256)
#define FLAG_FILE_PATH "flag"
#define MAX_ADMIN_PAYLOAD_SIZE (1024)
#define MAX_USER_PAYLOAD_SIZE (4096)
#define TERMINATE_MARKER_UINT32 (0xfffffffful)
static void disable_io_buffering(void)
{
    // ...
}
// Reads the flag from the flag file into the buffer.
// The flag is written null-terminated (and the rest of the buffer is padded with nulls).
// Return 0 on success, otherwise - error.
static int read_flag(char * buffer, size_t buffer_len)
{
    // ...
}
// Writes the admin shellcode to the 'payload' buffer.
// Writes the actual size of the payload to 'payload_size_out'.
static int generate_admin_code(uint8_t * payload, size_t max_size, size_t * payload_size_out)
{
    int ret = E_SUCCESS;
    char flag_string[MAX_FLAG_SIZE] = { 0 };
    FILE * payload_fp = NULL;
    ret = read_flag(flag_string, sizeof(flag_string));
    if (ret != E_SUCCESS)
    {
        printf("Failed to read flag.\n");
        goto cleanup;
    }
    payload_fp = fmemopen(payload, max_size, "w");
    if (payload_fp == NULL)
    {
        ret = E_FOPEN;
        goto cleanup;
    }
    // Write admin shellcode to payload buffer
    // (Because E_SUCCESS == 0, we just OR all the return values, to check for error when we finish).
    ret = E_SUCCESS;
    // Pad out with newlines
    for (size_t i = 0; i 
#include "asm_processor_state.h"
// The actual stack & registers of the processor
uint8_t asm_stack[ASM_STACK_SIZE] = { 0 };
reg_value_t registers[ASM_REGISTER_END - ASM_REGISTER_START] = { 0 };
void initialize_context(void)
{
    memset(registers, 0, sizeof(registers));
    memset(asm_stack, 0, sizeof(asm_stack));
}
int read_reg(asm_register_t reg, reg_value_t * reg_out)
{
    if (reg = sizeof(registers) / sizeof(reg_value_t))
    {
        return E_R_INVLD_REG;
    }
    *reg_out = registers[reg];
    return E_SUCCESS;
}
int write_reg(asm_register_t reg, reg_value_t value)
{
    if (reg = sizeof(registers) / sizeof(reg_value_t))
    {
        return E_W_INVLD_REG;
    }
    else if (reg == ASM_REGISTER_ZERO)
    {
        return E_W2ZERO;
    }
    registers[reg] = value;
    return E_SUCCESS;
}
```
### asm_instructions.c
```c
#include "asm_instructions.h"
#include "asm_processor_state.h"
#include "asm_file_parsing.h"
#include "string.h"
#define _rotl(x, r) (((x) > (32 - (r))))
#define _rotr(x, r) (((x) >> (r)) | ((x) >)
INSTRUCTION_DEFINE_BINARY_IMM32_OP(SHL, <<)
// Actually define all other instructions
INSTRUCTION_DEFINE_OP0(PRINTNL)
{
    printf("\n");
    return E_SUCCESS;
}
INSTRUCTION_DEFINE_OP1(PRINTDX)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg0, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    printf("%x", value);
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP1(PRINTDD)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg0, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    printf("%d", value);
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP1(PRINTC)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg0, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    printf("%c", value & 0xff);
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP0(RET)
{
    return E_RETURN;
}
INSTRUCTION_DEFINE_OP1(RETNZ)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg0, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (value != 0)
    {
        ret = E_RETURN;
    }
cleanup:
    return ret;
}