# Detecting Intentional Packet Drops on the Internet via TCP/IP Side Channels

**Authors:**
- Roya Ensafi
- Jeffrey Knockel
- Geoffrey Alexander
- Jedidiah R. Crandall

**Affiliation:**
Department of Computer Science, University of New Mexico, USA
{royaen, jeffk, alexandg, crandall}@cs.unm.edu

## Abstract
This paper presents a method for remotely detecting intentional packet drops on the Internet using side channel inferences. Given two arbitrary IP addresses that meet simple requirements, our technique can identify packet drops (e.g., due to censorship) between the two remote machines and determine the direction of these drops. The primary requirements are a client with a global IP Identifier (IPID) and a target server with an open port. No special access to the client or server is needed. Our method is robust to noise through the use of intervention analysis based on an autoregressive-moving-average (ARMA) model. In a measurement study, we observed that 98% of censored connections to Tor directory servers were from China, and only 0.63% of connections from China to Tor directory servers were not censored. This aligns with current understandings of global Internet censorship, indicating the effectiveness of our method.

## 1. Introduction
Tools for detecting intentional packet drops are crucial for various applications, such as identifying the blocking of Tor by ISPs or nation-states [1]. However, existing tools have a significant limitation: they can only measure packet drops between the measurement machine and an arbitrary remote host. The research question we address in this paper is: Can we detect packet drops between two hosts without controlling either of them and without sharing the path between them? By using idle scans, our method can effectively turn approximately 1% of the total IP address space into conscripted measurement machines that can be used as vantage points to measure IP-address-based censorship, without actually gaining access to those machines.

Antirez [2] introduced the first type of idle scan, which we refer to as an IPID idle port scan. In this scan, a "measurement machine" aims to determine if a specific port is open or closed on a "server" without using its own return IP address. The measurement machine finds a "client" with a global IPID and is completely idle. The measurement machine repeatedly sends TCP SYN packets to the server using the client's return IP address, while simultaneously eliciting RST packets from the client by sending it SYN/ACKs. If the server port is open, the measurement machine will observe many skips in the IPIDs from the client. Nmap [3] supports the IPID idle scan but often fails for Internet hosts due to noise in the IPID caused by the client sending packets to other hosts. Our method is resistant to noise and can detect packet drops in both directions, unlike Nmap.

Two other types of idle scans were presented by Ensaﬁ et al. [4], including one that exploits the state of the SYN backlog as a side channel. Our method is a hybrid of the IPID idle scan and Ensaﬁ et al.'s SYN backlog idle scan. Unlike Ensaﬁ et al.'s method, which requires filling the SYN backlog and causing denial-of-service, our technique uses a low packet rate that does not fill the SYN backlog and is non-intrusive. The key insight is that information about the server's SYN backlog state is entangled with information about the client's IPID field. Thus, we can perform both types of idle scans to detect drops in both directions, overcoming the limitations of both methods by treating the problem as a linear intervention problem to handle noise characteristic of the real Internet.

The main contributions of this research are:
- A non-intrusive method for detecting intentional packet drops between two IP addresses on the Internet where neither is a measurement machine.
- An Internet measurement study demonstrating the efficacy of the method.
- A model of IPID noise based on an autoregressive-moving-average (ARMA) model that is robust to autocorrelated noise.

Source code and data are available upon request, and a web demonstration version of the hybrid idle scan is at http://spookyscan.cs.unm.edu. The measurements described in this paper raise ethical concerns because they can cause the appearance of connection attempts between arbitrary clients and servers. In China, there is no evidence of the owners of Internet hosts being persecuted for attempting to connect to the Tor network, making our measurements safe. However, we caution against performing similar measurements in other countries or contexts without first evaluating the risks and ethical issues. Additional details about the ARMA model and ethical considerations are available in the extended version of this paper [5].

## 2. Implementation
To determine the direction in which packets are being blocked, our method leverages information flow through both the IPID of the client and the SYN backlog state of the server, as shown in Figure 1. Our implementation queries the IPID of the client (by sending SYN/ACKs from the measurement machine and receiving RST responses) to create a time series to compare a base case to a period when the server is sending SYN/ACKs to the client (due to our forged SYNs). We assume the client has global IPIDs and the server has an open port.

Global IPIDs were explained in Section 1. The SYN backlog is a buffer that stores information about half-open connections where a SYN has been received and a SYN/ACK sent, but no ACK reply to the SYN/ACK has been received. Half-open connections remain in the SYN backlog until the connection is completed with an ACK, aborted by a RST or ICMP error, or the half-open connection times out (typically between 30 and 180 seconds). The SYN/ACK is retransmitted a fixed number of times, typically three to six. This behavior, combined with the global IPID behavior of the client, allows us to distinguish four cases:

- **Server-to-client-dropped:** SYN/ACKs are dropped in transit from the server to the client based on the return IP address (and possibly other fields like source port), and the client’s IPID will not increase (except for noise).
- **No-packets-dropped:** No intentional dropping of packets is occurring, and the client’s IPID will go up by exactly one. This happens because the first SYN/ACK from the server is responded to with a RST from the client, causing the server to remove the entry from its SYN backlog and not retransmit the SYN/ACK. Stateful censorship or filtering aimed at SYN packets only may be detected as this case.
- **Client-to-server-dropped:** RST responses from the client to the server are dropped in transit because of their destination IP address. The server will continue to retransmit SYN/ACKs, and the client’s IPID will go up by the total number of transmitted SYN/ACKs, typically three to six. This may indicate the simplest method for blacklisting an IP address: null routing.
- **Error:** Networking errors occur during the experiment, the IPID is found to not be global, a model is fit to the data but does not match any of the three non-error cases, the data is too noisy, and/or other errors.

Noise due to packet loss and delay or the client’s communications with other machines may be autocorrelated. The accepted method for performing linear intervention analysis on time series data with autocorrelated noise is ARMA modeling, which we describe in Section 4.

## 3. Experimental Setup
All measurement machines were Linux machines connected to a research network with no packet filtering. Specifically, this network has no stateful firewall or egress filtering for return IP addresses.

One measurement machine was dedicated to developing a pool of both client and server IP addresses with the right properties for use in measurements. Clients were chosen by horizontally scanning China and other countries for machines with global IPIDs, then continually checking them for a 24-hour period to cull out IP addresses that frequently changed global IPID behavior (e.g., because of DHCP), went down, or were too noisy. A machine is considered to have a global IPID if its IPID, as measured by sending SYN/ACKs from alternating source IP addresses and receiving RSTs, never increments outside the ranges [−40, 0) or (0, 1000] per second when probed from two different IP addresses. This range allows for non-idle clients, packet loss, and packet reordering.

Servers were chosen from three groups: Tor directory authorities, Tor bridges, and web servers. The ten Tor directory authorities were obtained from the Tor source code and tested daily. Three Tor bridges were collected daily through email and the web. Every day, seven web servers were chosen randomly from the top 1000 websites on the Alexa Top 1,000,000 list [6]. All web server IPs were checked to ensure they were up for at least 24 hours before being selected for measurement. Furthermore, we checked that the client and server were both up and behaving as assumed between every experiment (i.e., every five minutes).

A round of experiments was a 24-hour process, with 22 hours of experiments and 2 hours of downtime for data synchronization. For each 24-hour period, ten server machines and ten client machines were chosen for geographic diversity: 5 from China, 2 from other Asian countries, 1 from Europe, and 2 from North America. IP addresses were never reused except for the Tor directory authorities, so every 24-hour period tested a set of 20 new clients, 10 new servers, and the 10 directory authorities.

For each of the twenty clients and twenty servers, geographical information provided by MaxMind was saved. MaxMind claims an accuracy of 99.8% for identifying the country an IP address is in [7]. For each of the twenty server machines, a series of SYN packets was used to test and save its SYN/ACK retransmission behavior for the analysis in Section 4.

Every hour, each of our two main measurement machines created ten threads, each corresponding to one client machine. Each thread tested each of the ten server IP addresses sequentially using our idle scan based on the client’s IPID. No forged SYNs were sent to the server during the first 100 seconds of a test, and forged SYNs with the return IP address of the client were sent to the server at a rate of 5 per second for the second 100-second period. Then, forged RST packets were sent to the server to clear the SYN backlog and prevent interference between sequential experiments. A timeout period of sixty seconds was observed before the next test in the sequence was started, to allow all other activities to complete.