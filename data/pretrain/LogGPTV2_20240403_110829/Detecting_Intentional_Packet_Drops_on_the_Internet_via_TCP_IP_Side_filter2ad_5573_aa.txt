title:Detecting Intentional Packet Drops on the Internet via TCP/IP Side
Channels
author:Roya Ensafi and
Jeffrey Knockel and
Geoffrey Alexander and
Jedidiah R. Crandall
Detecting Intentional Packet Drops
on the Internet via TCP/IP Side Channels
Roya Ensaﬁ, Jeﬀrey Knockel, Geoﬀrey Alexander, and Jedidiah R. Crandall
Department of Computer Science, University of New Mexico, USA
{royaen,jeffk,alexandg,crandall}@cs.unm.edu
Abstract. We describe a method for remotely detecting intentional
packet drops on the Internet via side channel inferences. That is, given
two arbitrary IP addresses on the Internet that meet some simple re-
quirements, our proposed technique can discover packet drops (e.g., due
to censorship) between the two remote machines, as well as infer in which
direction the packet drops are occurring. The only major requirements
for our approach are a client with a global IP Identiﬁer (IPID) and a tar-
get server with an open port. We require no special access to the client
or server. Our method is robust to noise because we apply intervention
analysis based on an autoregressive-moving-average (ARMA) model. In
a measurement study using our method featuring clients from multiple
continents, we observed that, of all measured client connections to Tor
directory servers that were censored, 98% of those were from China, and
only 0.63% of measured client connections from China to Tor directory
servers were not censored. This is congruent with current understandings
about global Internet censorship, leading us to conclude that our method
is eﬀective.
1
Introduction
Tools for discovering intentional packet drops are important for a variety of ap-
plications, such as discovering the blocking of Tor by ISPs or nation states [1].
However, existing tools have a severe limitation: they can only measure when
packets are dropped in between the measurement machine and an arbitrary re-
mote host. The research question we address in this paper is: can we detect
drops between two hosts without controlling either of them and without sharing
the path between them? Eﬀectively, by using idle scans our method can turn
approximately 1% of the total IP address space into conscripted measurement
machines that can be used as vantage points to measure IP-address-based cen-
sorship, without actually gaining access to those machines.
Antirez [2] proposed the ﬁrst type of idle scan, which we call an IPID idle
port scan. In this type of idle scan an “attacker” (which we will refer to as the
measurement machine in our work) aims to determine if a speciﬁc port is open
or closed on a “victim” machine (which we will refer to as the server ) without
using the attacker’s own return IP address. The attacker ﬁnds a “zombie” (client
in this paper) that has a global IP identiﬁer (IPID) and is completely idle. In this
M. Faloutsos and A. Kuzmanovic (Eds.): PAM 2014, LNCS 8362, pp. 109–118, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
110
R. Ensaﬁ et al.
paper, we say that a machine has a global IPID when it sends TCP RST packets
with a globally incrementing IPID that is shared by all destination hosts. This
is in contrast to machines that use randomized IPIDs or IPIDs that increment
per-host. The attacker repeatedly sends TCP SYN packets to the victim using
the return IP address of the zombie, while simultaneously eliciting RST packets
from the zombie by sending the zombie SYN/ACKs with the attacker’s own
return IP address. If the victim port that SYN packets are being sent to is open,
the attacker will observe many skips in the IPIDs from the zombie. Nmap [3] has
built-in support for the IPID idle scan, but often fails for Internet hosts because
of noise in the IPID that is due to the zombie sending packets to other hosts.
Our method described in this paper is resistant to noise, and can discover packet
drops in either direction (and determine which direction). Nmap cannot detect
the case of packets being dropped from client to server based on destination IP
address, which our results demonstrate is a very important case.
Two other types of idle scans were presented by Ensaﬁ et al. [4], including
one that exploits the state of the SYN backlog as a side channel. Our method
is based on a new idle scan technique that can be viewed as a hybrid of the
IPID idle scan and Ensaﬁ et al.’s SYN backlog idle scan. Whereas Ensaﬁ et al.’s
SYN backlog idle scan required ﬁlling the SYN backlog and therefore causing
denial-of-service, our technique uses a low packet rate that does not ﬁll the SYN
backlog and is non-intrusive. The basic insight that makes this possible is that
information about the server’s SYN backlog state is entangled with information
about the client’s IPID ﬁeld. Thus, we can perform both types of idle scans
(IPID and SYN backlog) to detect drops in both directions, and our technique
overcomes the limitations of both by exploiting the entanglement of information
in the IPID and treating it as a linear intervention problem to handle noise
characteristic of the real Internet.
This research has several major contributions:
– A non-intrusive method for detecting intentional packet drops between two
IP addresses on the Internet where neither is a measurement machine.
– An Internet measurement study that shows the eﬃcacy of the method.
– A model of IPID noise based on an autoregressive-moving-average (ARMA)
model that is robust to autocorrelated noise.
Source code and data are available upon request, and a web demonstration
version of the hybrid idle scan is at http://spookyscan.cs.unm.edu. The types
of measurements we describe in this paper raise ethical concerns because the
measurements can cause the appearance of connection attempts between arbi-
trary clients and servers. In China there is no evidence of the owners of Internet
hosts being persecuted for attempts to connect to the Tor network, thus our mea-
surements in this paper are safe. However, we caution against performing similar
measurements in other countries or contexts without ﬁrst evaluating the risks
and ethical issues. More discussion of ethical issues, additional details about the
ARMA model, and other information not included here due to space limitations
are available in the extended version of this paper [5].
Detecting Intentional Packet Drops on the Internet
111
Client
No direction blocked
S Y N / A C K  
Server
MM
Client
IPID=1380
Server
S Y N / A C K  
MM
Server to client blocked
Client to server blocked
Client
Server
S Y N / A C K  
MM
IPID=1380
IPID=1381
IPID=1382
IPID=1383
RST
S Y N
S Y N / A C K  
RST
IPID=1381
S Y N / A C K  
RST
IPID=1382
S Y N / A C K  
S Y N / A C K  
S Y N / A C K  
X
X
X
RST
S Y N
S Y N / A C K  
RST
IPID=1380
IPID=1381
IPID=1382
IPID=1383
IPID=1384
IPID=1385
S Y N / A C K  
X
RST
S Y N / A C K  
X
RST
S Y N / A C K  
X
RST
RST
S Y N
S Y N / A C K  
RST
Time
Time
Time
Fig. 1. Three diﬀerent cases that our method can detect. MM is the measurement
machine.
The rest of the paper is structured as follows: After describing the implemen-
tation of our method in Section 2, we present our experimental methodology for
the measurement study in Section 3 and the ARMA model in Section 4. Results
from the measurement study are in Section 5, followed by a discussion of related
work in Section 6 and then the conclusion.
2
Implementation
In order to determine the direction in which packets are being blocked, our
method is based on information ﬂow through both the IPID of the client and
the SYN backlog state of the server, as shown in Figure 1. Our implementation
queries the IPID of the client (by sending SYN/ACKs from the measurement
machine and receiving RST responses) to create a time series to compare a base
case to a period of time when the server is sending SYN/ACKs to the client
(because of our forged SYNs). We assume that the client has global IPIDs and
the server has an open port.
Global IPIDs were explained in Section 1. The SYN backlog is a buﬀer that
stores information about half-open connections where a SYN has been received
and a SYN/ACK sent but no ACK reply to the SYN/ACK has been received.
Half-open connections remain in the SYN backlog until the connection is com-
pleted with an ACK, aborted by a RST or ICMP error, or the half-open con-
nection times out (typically between 30 and 180 seconds). The SYN/ACK is
retransmitted some ﬁxed number of times that varies by operating system and
version, typically three to six SYN/ACKs in total. This SYN backlog behav-
ior on the server, when combined with the global IPID behavior of the client,
enables us to distinguish three diﬀerent cases (plus an error case):
– Server-to-client-dropped: In this case SYN/ACKs are dropped in transit
from the server to the client based on the return IP address (and possibly
112
R. Ensaﬁ et al.
other ﬁelds like source port), and the client’s IPID will not increase at all
(except for noise).
– No-packets-dropped: In the case that no intentional dropping of packets is
occurring, the client’s IPID will go up by exactly one. This happens because
the ﬁrst SYN/ACK from the server is responded to with a RST from the
client, causing the server to remove the entry from its SYN backlog and not
retransmit the SYN/ACK. Censorship that is stateful or not based solely on
IP addresses and TCP port numbers may be detected as this case, including
ﬁltering aimed at SYN packets only. Also, if the packet is not dropped, but
instead the censorship is based on injecting RSTs or ICMP errors, it will be
detected as this case. Techniques for distinguishing these other possibilities
are left for future work.
– Client-to-server-dropped: In this case RST responses from the client to
the server are dropped in transit because of their destination IP address
(which is the server). When this happens the server will continue to retrans-
mit SYN/ACKs and the client’s IPID will go up by the total number of
transmitted SYN/ACKs including retransmissions (typically three to six).
This may indicate the simplest method for blacklisting an IP address: null
routing.
– Error: In this case networking errors occur during the experiment, the IPID
is found to not be global throughout the experiment, a model is ﬁt to the
data but does not match any of the three non-error cases above, the data
is too noisy and intervention analysis fails because we are not able to ﬁt a
model to the data, and/or other errors.
Noise due to packet loss and delay or the client’s communications with other
machines may be autocorrelated. The autocorrelation comes from the fact that
the sources of noise, which include traﬃc from a client that is not idle, packet
loss, packet reordering, and packet delay, are not memoryless processes and of-
ten happen in spurts. The accepted method for performing linear intervention
analysis on time series data with autocorrelated noise is ARMA modeling, which
we describe in Section 4.
3 Experimental Setup
All measurement machines were Linux machines connected to a research network
with no packet ﬁltering. Speciﬁcally, this network has no stateful ﬁrewall or egress
ﬁltering for return IP addresses.
One measurement machine was dedicated to developing a pool of both client
and server IP addresses that have the right properties for use in measurements.
Clients were chosen by horizontally scanning China and other countries for ma-
chines with global IPIDs, then continually checking them for a 24-hour period
to cull out IP addresses that frequently changed global IPID behavior (e.g., be-
cause of DHCP), went down, or were too noisy. A machine is considered to have a
global IPID if its IPID as we measure it by sending SYN/ACKs from alternating
Detecting Intentional Packet Drops on the Internet
113
source IP addresses and receiving RSTs never incrementing outside the ranges
[−40, 0) or (0, 1000] per second when probed from two diﬀerent IP addresses.
This range allows for non-idle clients, packet loss, and packet reordering. It is
possible to build the time series in diﬀerent ways where negative IPID diﬀerences
are never observed, but in this study our time series was the diﬀerences in the
client’s IPIDs in the order in which they arrived at the measurement machine.
Our range of [−40, 0) or (0, 1000] is based on our observations of noise typical of
the real Internet. The IPID going up by 0 is a degenerate case and means the
IPID is not global.
Servers were chosen from three groups: Tor directory authorities, Tor bridges,
and web servers. The ten Tor directory authorities were obtained from the Tor
source code and the same ten IPs were tested for every day of data. Three Tor
bridges were collected daily both through email and the web. Every day seven
web servers were chosen randomly from the top 1000 websites on the Alexa Top
1,000,000 list [6]. All web server IPs were checked to make sure that they stood
up for at least 24 hours before being selected for measurement. Furthermore,
we checked that the client and server were both up and behaving as assumed
between every experiment (i.e., every ﬁve minutes).
A round of experiments was a 24-hour process in which measurements were
carried out on the two measurement machines. Each 24-hour period had 22 hours
of experiments and 2 hours of down time for data synchronization. For each mea-
surement period on each of the two machines performing direct measurements,
ten server machines and ten client machines from the above process were cho-
sen for geographic diversity: 5 from China, 2 from countries in Asia that were
not China, 1 from Europe, and 2 from North America. IP addresses were never
reused except for the Tor directory authorities, so that every 24-hour period was
testing a set of 20 new clients, 10 new servers, and the 10 directory authorities.
For each of the twenty clients and twenty servers geographical information
provided by MaxMind was saved. MaxMind claims an accuracy of 99.8% for
identifying the country an IP address is in [7]. For each of the twenty server
machines, a series of SYN packets was used to test and save its SYN/ACK
retransmission behavior for the analysis in Section 4.
Every hour, each of our two main measurement machines created ten threads.
Each thread corresponded to one client machine. Each thread tested each of the
ten server IP addresses sequentially using our idle scan based on the client’s
IPID. No forged SYNs were sent to the server during the ﬁrst 100 seconds of a
test, and forged SYNs with the return IP address of the client were sent to the
server at a rate of 5 per second for the second 100-second period. Then forged
RST packets were sent to the server to clear the SYN backlog and prevent
interference between sequential experiments. A timeout period of sixty seconds
was observed before the next test in the sequence was started, to allow all other