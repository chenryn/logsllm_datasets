"SkCubicEdge::setCubicWithoutUpdate")中，首先会将曲线坐标转换为SkFDot6类型。然后，计算曲线在起始点处的一阶、二阶、三阶导数对应的参数:
    SkFixed B = SkFDot6UpShift(3 * (x1 - x0), upShift);
    SkFixed C = SkFDot6UpShift(3 * (x0 - x1 - x1 + x2), upShift);
    SkFixed D = SkFDot6UpShift(x3 + 3 * (x1 - x2) - x0, upShift);
    fCx     = SkFDot6ToFixed(x0);
    fCDx    = B + (C >> shift) + (D >> 2*shift);    // biased by shift
    fCDDx   = 2*C + (3*D >> (shift - 1));           // biased by 2*shift
    fCDDDx  = 3*D >> (shift - 1);                   // biased by 2*shift
其中，x0、x1、x2和x3是定义三次样条的4个点的x坐标，而shift和upShift则取决于曲线的长度（这对应于用来逼近曲线的线段的数量）。为简单起见，我们可以假设shift=upShift=6（最大可能值）。
现在，让我们输入一些非常简单的值，来看看会发生什么情况：
    x0 = -30
    x1 = -31
    x2 = -31
    x3 = -31
请注意，x0、x1、x2和x3属于skfdot6类型，因此，值-30对应于-0.46875，而值-31对应于-0.484375。虽然这些值虽然接近于-0.5，但并不是等于，因此，在四舍五入时非常安全。现在，让我们看看计算出来的参数值:
    B = -192
    C = 192
    D = -64
    fCx = -30720
    fCDx = -190
    fCDDx = 378
    fCDDDx = -6
你知道问题出在哪里吗？提示：它位于fCDx的计算公式中。
当计算fCDx（曲线的一阶导数）时，D的值需要右移12位。然而，D的值太小了，无法精确地做到这一点，并且由于D是负的，所以实际进行的右移操作为：
    D >> 2*shift
结果为-1，这个数值的绝对值比预期结果的要大。(因为D是SkFixed类型，所以，它的实际值是-0.0009765625，当移位被解释为除以4096时，得到的结果为-2.384185e-07)。正因为如此，最终计算出来的fCDx结果（负值，即-190）的绝对值，会大于正确结果（即-189.015）的绝对值。
之后，在计算线段的x值时会用到fCDx的值，具体见skcubiedge::updateCubic中如下所示的[这行](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?l=477&rcl=f08d1d0ce19c72bb911f059dcf916cf99a0a2467
"这行")代码:
    newx    = oldx + (fCDx >> dshift);
当使用64个线段（该算法的最大值）逼近样条曲线时，相应的x值为（表示为索引、整数的SkFixed值和对应的浮点值）：
    0:    -30720   -0.46875
    1:    -30768   -0.469482
    2:    -30815   -0.470200
    3:    -30860   -0.470886
    4:    -30904   -0.471558
    5:    -30947   -0.472214
    ...
    31:   -31683   -0.483444
    32:   -31700   -0.483704
    33:   -31716   -0.483948
    34:   -31732   -0.484192
    35:   -31747   -0.484421
    36:   -31762   -0.484650
    37:   -31776   -0.484863
    38:   -31790   -0.485077
    ...
    60:   -32005   -0.488358
    61:   -32013   -0.488480
    62:   -32021   -0.488602
    63:   -32029   -0.488724
    64:   -32037   -0.488846
如您所见，对于第35个点，x值（-0.484421）最终会小于最小输入点（-0.484375），并且对于后面的点来说，这种趋势依旧延续。该值虽然在取整后会变为0，但还存在另一个问题。
在SkCubicEdge::updateCubic中计算的x值将传递给SkEdge::updateLine，并且在下面的[代码](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?g=0&l=114&rcl=f08d1d0ce19c72bb911f059dcf916cf99a0a2467
"代码")中，它们会从SkFixed类型转换为SkFDot6类型：
    x0 >>= 10;
    x1 >>= 10;
又一次右移！举例来说，当SkFixed值-31747进行移位后，我们最终得到一个skfdot6类型值-32，即-0.5。
现在，我们可以使用上面在“分数相乘时的出现的精度误差”一节中描述的技巧使该值小于-0.5，从而突破图像的边界。换句话说，我们可以在绘制路径时，让Skia对坐标x=-1的位置进行渲染。
**但是，我们能利用该漏洞做些什么呢？**
* * *
通常，由于Skia将会将图像的像素按行组织后作为一个整体进行内存分配（类似于大多数其他软件针对位图的内存分配方式），所以，有些情况下可能会发生精度问题。假设我们有一个大小为width
x height的图像，同时，假设我们只能超出该范围外一个像素：
  * 如果向y=-1或y=height的位置进行绘图的话，会立即触发堆越界写问题
  * 如果向y=0且x=-1的位置进行绘图的话，会立即导致堆下溢1个像素
  * 如果向x=width且y=height-1的位置进行绘图的话，会立即导致堆溢出1个像素
  * 如果向y>0且x=-1的位置进行绘图的话，会导致像素“溢出”到上一个图像行
  * 如果向x=height且y 
如果在未修复该漏洞的版本的Firefox中呈现该图像的话，将看到如下所示的内容。请注意，该SVG图像的像素大部分位于屏幕左侧，但右侧也有少许红色像素。这是因为，根据图像的分配方式，向x=-1且y=row的位置进行渲染，实际上就是向x=width-1且y=row-1的位置进行渲染。
一旦打开这个SVG图像，就会触发Firefox中的Skia精度问题。如果你仔细观察，你会发现图像右侧有一些红色像素。那些人是怎么到那儿的？ :)
需要说明的是，我们使用的是Mozilla公司的Firefox浏览器，而不是Google公司的Chrome浏览器，主要是在SVG的渲染机制（特别是：Skia似乎一次绘制整个图像，而Chrome则使用额外的平铺操作）方面，Firefox更适合演示该问题。但是，Chrome和Firefox都会受该问题的影响。
但是，这个问题除了可以呈现一个有趣的图像外，是否存在实际的安全影响呢？这时，就该[SkARGB32_Shader_Blitter](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkCoreBlitters.h?g=0&l=120&rcl=e102016fef339f59e4bfea4547276e16da298483
"SkARGB32_Shader_Blitter")上场了（每当Skia中的颜色应用着色器效果时，就会用到它）。SkARGB32_Shader_Blitter的特殊之处在于：会分配一个与单个图像行大小相同的临时缓冲区。当[SkARGB32_Shader_Blitter::blitH](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkBlitter_ARGB32.cpp?g=0&l=368&rcl=a4083c97d48e8a4f88e2797d7363f141e3d42553
"SkARGB32_Shader_Blitter::blitH")用于绘制整个图像行时，如果我们可以使其从x=-1到x=width-1（或从x=0到x=width）进行渲染的话，这时，它就需要向缓冲区写入width
+
1个像素，而问题在于——该缓冲区只能容纳width个像素，从而导致缓冲区溢出，这一点可以参考[漏洞报告](https://bugs.chromium.org/p/project-zero/issues/detail?id=1579 "漏洞报告")中的ASan日志。
请注意Chrome和Firefox的PoC如何包含带有linearGradient元素的SVG图像的——线性梯度专门用于选择SkARGB32_Shader_Blitter，而不是直接向图像绘制像素，这只会导致像素溢出到前一行。
这个漏洞的另一个不足之处在于，只有在关闭抗锯齿特性的情况下绘制（更具体地说，是填充）路径时，才会触发该漏洞。由于目前无法在关闭抗锯齿的情况下绘制HTML画布元素的路径（有一个imageSmoothingEnabled属性，但它仅适用于绘制图像，而不适用于绘制路径），因此，必须使用shape-rendering="crispEdges" 的SVG图像来触发该漏洞。
我们公布的Skia中的所有因精度问题所导致的漏洞，都是通过[增加kConservativeRoundBias](https://skia.googlesource.com/skia.git/+/861b52ea98d703786ce485389db07e58759c1792
"增加kConservativeRoundBias")来进行修复的。虽然当前的偏差值足以覆盖我们所知道的最大精度误差，但不容忽视的是，其他地方仍有可能出现精度问题。
**结束语**
* * *
虽然大多数软件产品并不会出现精确问题（如本文所述），然而，一旦出现该问题，就会引起非常严重的后果。为了防止出现该问题，我们应该：
  * 在计算结果对安全性敏感的情况下，请勿使用浮点运算。如果必须使用浮点运算的话，则要确保可能的最大精度误差不大于某个安全范围。在某些情况下，可以使用[区间运算](https://www.boost.org/doc/libs/1_66_0/libs/numeric/interval/doc/interval.htm "区间运算")来确定最大精度误差。或者，针对计算结果而非输入进行相应的安全检查。
  * 使用整数运算时，需要密切关注所有可能降低计算结果精度的运算，例如除法和右移。
不幸的是，目前还没有很好的方法可以揪出这些漏洞。我们刚开始研究Skia时，我们最初的想法，是在绘图算法上使用[符号执行](https://en.wikipedia.org/wiki/Symbolic_execution
"符号执行")来查找可能导致绘制越界的输入值，因为从表面上看，符号执行似乎非常适合查找这种漏洞。然而，实践证明，这种做法存在太多问题：大多数工具不支持浮点符号变量，即使仅针对[最简单的线绘制算法](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Hairline.cpp?g=0&l=45&rcl=f08d1d0ce19c72bb911f059dcf916cf99a0a2467
"最简单的线绘制算法")的整数部分进行符号执行，我们也无法在合理的时间内完成这项任务。
最后，我们还是投向了各种老派方法的怀抱：对源代码进行人工审计，模糊测试（尤其是针对接近图像边界的值），在某些情况下，当我们已经识别出可能存在问题的代码区域时，甚至会通过蛮力方式遍历所有可能值。
您是否知道精度误差会导致安全问题的其他情形呢？请在评论中告诉我们，我们将感激不尽。