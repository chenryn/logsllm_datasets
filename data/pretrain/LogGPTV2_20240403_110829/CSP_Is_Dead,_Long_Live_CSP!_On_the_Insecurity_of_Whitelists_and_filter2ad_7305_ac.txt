whitelist bypassability, we observed that 94.72 % of policies
in the overall data set do not oﬀer any protection from XSS.
It’s important to note that some of these policies are not in
enforcing mode or are not used to protect against XSS; how-
ever, even for the XSS-protection policies, the percentage of
bypassable policies is very similar: 94.68 %.
Unfortunately, most of the policies are inherently inse-
cure. Of the XSS protection policies, 87.63 % employed
the ’unsafe-inline’ keyword without specifying a nonce,
which essentially disables the protective capabilities of CSP.
This surprisingly high number might be explained by the
fact that many web applications need to rewrite large parts
of their code in order to be compatible with CSP. Some of
these pages might still be in a transitional phase, in which
they require the ’unsafe-inline’ keyword. Although this
problem might be ﬁxed in the long run, many policies con-
tain other obvious problems. For example, we determined
that 9.4 % of the policies contain neither the default-src
nor the object-src directive. Hence attackers are able to
exploit an XSS vulnerability by injecting a malicious Flash
object capable of executing JavaScript. Furthermore, 21.48
% of the policies utilize a general wildcard or a URI scheme
(http: or https:) within the script-src or default-src
directives and thus allow the inclusion of scripts from arbi-
trary, potentially attacker-controlled hosts.
Given these numbers, it seems that the vast majority of
the policies are not capable of eﬀectively protecting against
XSS exploits. However, because CSP might be immature,
the numbers could be inﬂated by early adoption issues. In
order to account for this fact, we compiled a set of policies
Figure 1: Distribution of CSP directives among
unique CSPs
AngularJS:
For the AngularJS library, we created a small signature
that matches a speciﬁc part of the source code (both miniﬁed
and non-miniﬁed). For each match, we then extracted the
version of the ﬁle by matching the included version string.
3.4 Results and Analysis
3.4.1 The state of CSP on the web
We used one of Google’s indices as our data set for detect-
ing CSP policies. At the time of this analysis, this particu-
lar index contained approximately 106 billion unique URLs,
spanning 1 billion hostnames and 175 million top private
domains.3 We believe this index is representative of the
current state of the web, since all URLs were visited by the
Google crawler within a time frame of about 20 days prior
to our analysis.
In this data set, we found that 3,913,578,446 (3.7 %) URLs
carried a CSP policy. This number, however, is not a good
approximation of the CSP adoption rate because applica-
tions with large numbers of URLs might be overrepresented
within the overall data set. When considering the distribu-
tion across domains, the overall picture looks diﬀerent: only
1,664,019 (0.16 %) of all hostnames across 274,214 top pri-
vate domains deploy a CSP policy. Out of this list, 1 million
hostnames were mapped to one of ﬁve e-commerce4 applica-
tions, using only a few distinct policies. To account for this,
we deduplicated the data set using the normalized policy.
By doing so, we identiﬁed 26,011 unique policies.
3.4.2 How CSP is used
CSP’s main goal is to protect against XSS attacks. How-
ever, it has many other use cases. Hence, as a ﬁrst step, we
sought to determine whether CSP is used for its intended
purpose. Figure 1 shows a list of all CSP directives, ordered
by the number of occurrences. The list clearly shows that
the script-src and/or default-src directive are used in
the majority of policies. In contrast, the frame-ancestors
directive, which can be used to control the framing behavior
3See https://github.com/google/guava/wiki/InternetDom
ainNameExplained for an explanation of the term “top pri-
vate domain.”
4For example, Alibaba mini shops had the same CSP de-
ployed across more than 600,000 hostnames.
Totalscript-srcdefault-srcstyle-srcimg-srcfont-srcframe-srcconnect-srcobject-srcreport-urimedia-srcchild-srcframe-ancestorsform-actionbase-urireflected-xssupgrade-insecure-r…referrerblock-all-mixed-cont…plugin-typessandbox26011260112257322573222942229420346203462017920179173111731116858168581414314143125141251410773107731070910709260226022111211117341734779779711711489489418418312312256256147147Number of PoliciesDirectivesData
Set
Unique
CSPs
XSS Poli-
cies
Strict XSS
Policies
Total
26,011
22,425
2,437
Report
Only
2,591
9.96%
0
0%
0
0%
Unsafe
Inline
21,947
84.38%
19,652
87.63%
0
0%
Missing
object-src
Bypassable
Wildcard
in Whitelist
Unsafe
Domain
3,131
12.04%
2,109
9.4%
348
14.28%
5,753
22.12%
4,816
21.48%
0
0%
19,719
75.81%
17,754
79.17%
1,015
41.65%
Trivially
Bypassable
Total
24,637
94.72%
21,232
94.68%
1,244
51.05%
Table 2: Security analysis of all CSP data sets, broken down by bypass categories
script-src value Usage
90.95%
self
87.26%
unsafe-inline
81.65%
unsafe-eval
0.92%
Nonce
3.64%
https:
0.85%
http:
4.04%
data:
1.18%
General wildcard
69.59%
Host w. wildcard
6.92%
Host w. path
1.65%
SHA-256 Hash
SHA-384 Hash
0.04%
0.01%
SHA-512 Hash
Table 3: Most common features used in script-src
that do not contain trivial problems, such as the ’unsafe-
inline’ keyword or a general wildcard in the whitelist. In
total, we found 2,437 policies that match these criteria. We
observed that with our automatic policy analysis tool, we
were still able to bypass 51.05 % of these strict policies.
Although some of these bypasses were caused by missing
object-src and default-src directives, the majority of by-
passes were caused by unsafe origins within the script-src
whitelist. In the following section, we discuss our analysis
of whitelists in detail.
Security of whitelists
3.4.5
For each host within the whitelist the maintainer needs to
ensure that an attacker is not capable of injecting malicious
content, which could be included via a  or an  tag. As described in Section 2.3.1, JSONP endpoints
and AngularJS libraries are two of many ways to achieve
this. If even just one domain exposes such endpoints, the
anti-XSS capabilities of CSP are rendered useless. Hence,
the bigger a whitelist gets, the more diﬃcult it is to main-
tain the security of the corresponding policy.
Figure 2 depicts the number of CSP policies with a speciﬁc
number of whitelisted domains. At the median, a policy has
12 distinct whitelisted hosts. Also, there is a long tail of
policies with a large number of entries. The policy with the
longest whitelist, for example, contained 512 hosts.
By querying the index we found 194,908 domains with
JSONP endpoints and 101,330 domains hosting the Angu-
larJS library. For each policy within our data set, we then
checked whether one of the whitelisted domains was con-
tained in this list. Via this fully automated approach, we
Figure 2: Number of CSPs with a given number of
whitelisted domains
found that 41.65 % of all strict policies and 79.17 % of all
XSS-protecting policies have insecure whitelists (see Table
4). While these numbers are surprisingly high, they repre-
sent only the lower bound. Since many CSP bypasses are
application-dependent, it is diﬃcult to fully automate the
discovery process. Hence, we believe that the actual num-
ber of insecure policies is even higher.
Figure 3 shows that maintaining long whitelists is infea-
sible in practice. The graph shows how bypassability corre-
lates with the length of a whitelist. While very short white-
lists are still quite safe, longer whitelists are much less se-
cure. For example, at the median of 12 entries, we managed
to bypass 94.8 % of all policies.
Table 5 lists the top 15 whitelist host entries, ordered by
the number of occurrences. The results clearly underline
the fact that maintaining whitelists is diﬃcult. Of the top
15 domains, 12 introduce full CSP bypasses, 2 introduce
bypasses if combined with unsafe-eval, and for only 1 we
were not able to ﬁnd a bypass automatically.
Figure 4 demonstrates that the top 10 domains for whitelist
bypasses are suﬃcient to bypass 68% of all unique CSPs.
However, even if JSONP and AngularJS endpoints were re-
moved from the top 10 domains, the remaining hosts would
still allow bypassing 66% of observed policies.
As a result of our analysis we conclude that deploying CSP
in the traditional whitelist-based model to prevent XSS is
not feasible, because in practice the script-execution restric-
tions can commonly be subverted. In Section 4 we propose
010203040506070809010011005001000150020000%25%50%75%100%Number of whitelisted domainsNumber of CSPs with x whitelisted domainsPercentage of CSPs with at most x whitelisted domainsData Set
XSS Policies
Strict XSS Policies
Total Unsafe domain JSONP Bypass AngularJS Bypass
12,617
22,425
2,437
576
17,754
1,015
17,381
968
object-src Bypass
2,915
77
Table 4: Number of CSPs that could be bypassed due to JSONP, AngularJS or vulnerable Flash ﬁles
Figure 3: Correlation of whitelist bypasses and num-
ber of whitelisted domains
Figure 4: Top 10 script-src host whitelist bypasses
+ accummulated total bypasses.
a way to solve this problem by crafting CSP policies which
replace domain whitelists with script nonces.
4.
IMPROVING CSP
In practice, the vast majority of websites currently us-
ing CSP deploy a policy that oﬀers no security protections
against XSS. Aside from obvious conﬁguration issues (poli-
cies with ’unsafe-inline’ and those that do not specify
object-src), the primary reason for the insecurity of poli-
cies is the bypassability of script-src whitelists. On the
modern web, an approach based on whitelisting domains
(even if accompanied with paths) appears to be too inﬂexi-
ble to oﬀer developers security gains and prevent XSS.
At the same time, CSP already oﬀers more granular meth-
ods of granting trust to scripts: cryptographic nonces and
hashes. In particular, nonces allow the developer to explic-
itly annotate every trusted script (both inline and external),
while prohibiting attacker-injected scripts from executing.
In order to improve the overall security of CSPs in the
wild, we thus propose a slightly diﬀerent way of writing poli-
cies. Instead of relying on whitelists, application maintain-
ers should apply a nonce-based protection approach. The
following listing depicts a whitelist-based CSP policy and a
script satisfying this policy:
Content-Security-Policy: script-src example.org
Unfortunately, the whitelist of this policy contains an un-
safe host and thus the depicted policy is insecure. The at-
tacker could abuse the JSONP endpoint by injecting a script
with the following URL: https://example.org/script?
callback=malicious_code.
In order to avoid this problem, we propose rewriting such
policies in the following way:
Content-Security-Policy:
script-src ’nonce-random123’
default-src ’none’
By using a nonce, scripts can be whitelisted individually.
Even if an attacker is capable of ﬁnding an XSS, the nonce
value is unpredictable, so it is not possible for the attacker
to inject a valid script pointing to the JSONP endpoint.
One useful feature of CSP is that it allows for the central
enforcement of security decisions. A security team might,
for example, use CSP for enforcing a set of trusted hosts
from which scripts are allowed to be loaded, instead of rely-
ing on the goodwill of developers to not include scripts from
untrusted sites. In a single nonce-based policy, however, this
is not possible; a resource is only required to adhere to either
the whitelist or the nonce. Hence, adding a whitelist to a
nonce-based policy removes the beneﬁts of a nonce. Interest-
ingly, browsers allow the enforcement of multiple policies. If
two policies are speciﬁed for a page, the browser ensures that
a resource adheres to both policies. Hence, this feature can
be used to get the beneﬁts of both worlds: one nonce-based
policy can be used to whitelist individual scripts, while a
second whitelist-based policy can be used to centrally en-
force security decisions. Two policies can be transferred to
the client in the same HTTP response header by separating
them with a comma:
01020304050607080901001100%25%50%75%100%Number of whitelisted domainsPercent of CSPs with x whitelisted domainsthat are trivially bypassablewww.google-analytics.com*.googleapis.com*.google.com*.google-analytics.com*.yandex.ru*.gstatic.commc.yandex.ruyandex.stajax.googleapis.com*.googlesyndication.com020004000600080000%25%50%75%100%Number of bypassable CSPsfirst x JSONP/Angular endpointsPercentage of CSPs bypassable withCount Percentage
8825
7201
6307
5817
5475
5146
5076
4728
4423
4189
3829
3621
3617
2959
2809
33.93%
27.68%
24.25%
22.36%
21.05%
19.78%
19.51%
18.18%
17.00%
16.10%
14.72%
13.92%
13.91%
11.38%
10.80%
JSONP Bypass
script-src value
www.google-analytics.com yes, if unsafe-eval
*.googleapis.com
*.google-analytics.com
*.google.com
*.yandex.ru
*.gstatic.com
vk.com
mc.yandex.ru
yandex.st
ajax.googleapis.com
*.googlesyndication.com
*.doubleclick.net
yastatic.net
connect.facebook.net
www.google.com
yes
yes, if unsafe-eval
yes
yes
no
yes
yes
no
yes
yes
yes