names are selected in the database of glossary and dictionary
words, as in Figure 1, according to user-deﬁned themes, such
as shopping-related, health-related, ﬁnancial-related software,
etc. This is a basic code transformation before applying other
code transformations.
2. Structure Transformation: A program is structured in dif-
ferent lines in order to be more readable, but it does not
have strict and ﬁrm rules. The original structure of a pro-
gram can be changed in various ways: (1) reordering primi-
tives and methods, (2) breaking abstractions, (3) expression
change, (4) control structure modiﬁcation, and (5) changing
data types.
First, we can randomize the placement of as many modules
within a program, methods within a module, and statements
within a method as possible. Second, by reconstructing new
packages and modules, it breaks the original abstraction of
a program, which thwart adversaries from understanding the
original target program. Third, the proposed system replaces
operators, such as assignment, multiplication, and compari-
son, into different expressions. There are an arbitrary number
of ways to turn a given arithmetic expression into a sequence
of different elementary statements. For example, multipli-
cation by a constant is often turned into a sequence of less
obvious adds and shifts. Fourth, the control structures in a
program can be used interchangeably to alter the structure
of a program. The control structures include a conditional
statement(e.g. if or else), a loop statement, (e.g. for, while),
a selective statement(e.g. switch), and a jump statement(e.g.
goto, continue, break). Lastly, data types in functions’ pa-
rameters and variables are also changed if possible.
3. Junk Code Insertion: Bogus programs are diversiﬁed while
generated in different ways by inserting any junk code as ad-
ditional parts in a program. To insert junk code, there are
several possible methods: (1) dead code insertion, (2) redun-
dant statements, (3) method injection, and (4) code copy.
First, the proposed system can add any number of blocks that
can never be executed, such as classes, methods, etc. These
are called dead code. Second, we place irrelevant or relevant
statements for each line of a program. For instance, another
variable or constant value can be declared and the variables
are used any place in a program. Third, the proposed system
clones bits and pieces of different methods in any given pro-
gram, and the copied code looks different from the original
one as a result of the code transformation, such as renam-
ing, changing parameters in a method, etc. Lastly, from the
database of classes and methods for junk code as in Figure 1,
the proposed system selects one of them and reuses an arbi-
trarily chosen part of the code to generate bogus programs.
4. Semantic Transformation: The semantics of original programs
can be also changed in different ways. First, the control ﬂow
of a program is naturally obfuscated while performing the
proposed code transformations. Second, through call graph
modiﬁcation, the semantics of an original program can be
changed. Speciﬁcally, the use of inserted methods and in-
serted code blocks ﬁrst tweak an original call graph.
DEFINITION 1. Let T : P → P(cid:48) be transformation from pro-
gram to program. T is code obfuscation, where PB = T (Po) has
a part of functions of PO. T is a set of speciﬁc transformation
elements, t1, t2, . . . tn. We enumerate several transformation tech-
niques above. There are many other transformations possible, but
what we have designed is sufﬁcient for a proof of concept demon-
stration.
The generated bogus program, PB, should be different from the
original source program, Po to make it indistinguishable from the
seed source program. The two programs can be evaluated accord-
ing to two metrics: software similarity and containment. Similarity
∆ is able to determine if two programs are very similar. Since the
two programs, Po and PB, should be very dissimilar, the similarity
should be less than a threshold λ as in Eq. (1).
∆(Po, PB) < λ
(1)
Containment Θ evaluates if one program is partially contained in
another. Because the transformed bogus program PB should have
very small parts of code of the original source program Po, the
containment should be less than a threshold β as in Eq. (3.2).
# of lines matched between PB and PO
Θ(Po, PB) =
T otal # of lines in PO
< β
The Similarity ∆ of two programs is a number between 0 and 1,
such that when the similarity is close to 1, it is likely that the two
programs will be approximately the same. Similarly, the contain-
ment Θ of PB in Po is a number between 0 and 1 that, when close
to 1, indicates that PB is approximately contained within Po. Sec-
tion 4 shows that the generated bogus programs are completely dif-
ferent from the seed programs through these metrics.
As explained above, there are many different techniques for code
transformation. The current system stops generating targeted bo-
gus software when the similarity falls below a predeﬁned threshold.
While transforming, Java standard libraries, keywords and reserved
words should be preserved.
3.3 Generating Bogus Programs for a Project
Based on the code transformation methods, the proposed system
generates an arbitrary amount of decoy (bogus) software with any
given input. The following outline below explains the method to
generate a large number of different programs or diverse versions
of similar programs. First, for any given input project, the pro-
posed system generates different bogus software programs either
from the original software or from the bogus software. Second,
from the bogus software, the system produces a series of similar
bogus programs so that software version control systems maintain
a chain of history for the original project.
PO
{1, ..., n} and ti is an speciﬁc transformation in T )
Bn (Note that Tj = {t1, t2, ...., tn }, i, j, k =
• From previous bogus software:
Tj→ P k
Tj→ P l
1. Generating different bogus software
• From an original software:
P k
Bn
= {1, ..., n} and ti is an element in T )
Bn (Note that Tj = {t1, t2, ...., tn } and i, j, k, l
2. Generating various versions from the bogus software for the
Bi )··· t1→
CVS repository
CV S(P m
CV S(P m
(Note that ti is an element in T , m=l or k, and i, l, k =
{1, ..., n} )
Bn ) tn→ CV S(P m
B1 )
tn−1→ . . . CV S(P m
Bn−1 )
Looking at the ﬁrst step in more detail, the proposed system cre-
ates a variety of decoy software from original source code. Each
resulting bogus software is different from every other one. In ad-
dition, the system uses previous bogus software to generate other
new and different bogus software. The resulting bogus programs
are dissimilar to each other depending on the number of iterations
of code obfuscation (T ). For any given input, the code transforma-
tion produces different kinds of decoy programs that are less than a
predeﬁned threshold of similarity and containment.
Second, a project is managed by software version control sys-
tems, such as subversion, git, etc., to keep updating new source
code and tracking different software versions. To make decoy soft-
ware realistic, the bogus software should be maintained to look like
a real project by using one of the software version control systems.
We generate a series of different versions from the ﬁrst resulting
bogus software under the CVS version control system. Speciﬁ-
cally, the code transformation(T) has a set of different elements,
t1, t2, ...., tn. One element of the transformation method, ti, is se-
lected to generate slightly different versions of the bogus program
every time.
3.4 Embedding Beacons
Each bogus program has a stealthy beacon that provides a signal
indicating when and where the particular bogus program was used.
The beacon plays a valuable role in identifying the exﬁltration of
software, distinguishing between bogus programs and original pro-
grams, by throwing an alert to a server for detectability of the de-
coy. The proposed system designs threes different types of beacons
in a bogus project: PDF-based beacons, HTML-based beacons, and
library-based beacons. The beacons report valuable information
about an IP address, current date and time, a software version, etc.
First, typically, software provides several documents such as a
README ﬁle for compiling and execution instructions, API de-
scriptions and license information. For those documents, our pro-
posed system adopts a technique to embed beacons into PDF, as
proposed in [5]. In other words, we generate a PDF ﬁle by includ-
ing any context in documents of a project and inject Javascript to
send a signal to a server when the generated PDF ﬁle is opened.
Second, we utilize the javadoc tool for generating API documen-
tation in HTML format from Java source code. After creating the
API documentation in HTML format, we embed Javascript with
the generated HTML. When the documentation is opened, the em-
bedded beacons make a signal to send the adversary information.
Lastly, for software embedded beacons, we can embed the code
(libraries) that sends signals to a server upon program compilation
or execution. The bogus program can be modiﬁed to use a library
that must be downloaded in order to successfully compile it. Then,
the request for the library on the server is a positive indication the
bogus program is about to be compiled.
4. EVALUATION
We utilized Open Source Software (OSS) to evaluate the pro-
posed system. As shown in Table 1, we evaluated 80 projects of the
latest versions of OSS based on Java language. The OSS projects
for this experiment were collected from the Apache Software Foun-
dation and SourceForge 1. Table 1 shows a summary of different
ﬁle sizes for the collected OSS projects. Even though we collected
Java-based OSS projects, a project can utilize different languages,
such as XML, HTML, Python, and so on. For this experiment, we
considered only Java-based source code ﬁles in each project.
File Size(F)
F < 10MB
10MB ≤ F < 30MB
30MB ≤ F < 60MB
60MB ≤ F < 100MB
100MB ≤ F < 500MB
500MB ≤ F < 1G
1GB ≤ F
Total # of Projects
# of OSS Projects
Category
# of OSS Projects
30
18
12
11
7
1
1
80
System/Build Tools
Financial/Shopping Programs
Health Programs
Content/Project Management Tools
Language Tools
PDF Generating Program
Web Applications
Miscellaneous
12
2
3
17
6
5
12
23
Table 1: The Collection of Open Source Software (OSS)
Projects. A total of 80 OSS projects covering a variety of
themes were studied.
(a) Experiment A
(b) Experiment B
(c) Experiment C
Figure 2: Similarity based on MOSS. (The x-axis is each of 80
open source projects.)
In the experiments, we evaluate various features of the proposed
system as follows. 2
• Similarity and Containment: We evaluate the similarity and
the containment between the bogus project and the targeted
original project. We used well-known software plagiarism