title:Breaking Fitness Records Without Moving: Reverse Engineering and Spoofing
Fitbit
author:Hossein Fereidooni and
Jiska Classen and
Tom Spink and
Paul Patras and
Markus Miettinen and
Ahmad-Reza Sadeghi and
Matthias Hollick and
Mauro Conti
Breaking Fitness Records Without Moving:
Reverse Engineering and Spooﬁng Fitbit
Hossein Fereidooni1(B), Jiska Classen2, Tom Spink3, Paul Patras3,
Markus Miettinen2, Ahmad-Reza Sadeghi2, Matthias Hollick2,
and Mauro Conti1
1 University of Padua, Padua, Italy
{hossein,conti}@math.unipd.it
2 Technische Universität Darmstadt, Darmstadt, Germany
{jclassen,mhollick}@seemoo.de,
{markus.miettinen,ahmad.sadeghi}@trust.tu-darmstadt.de
3 University of Edinburgh, Edinburgh, UK
{tspink,ppatras}@inf.ed.ac.uk
Abstract. Tens of millions of wearable ﬁtness trackers are shipped
yearly to consumers who routinely collect information about their exer-
cising patterns. Smartphones push this health-related data to vendors’
cloud platforms, enabling users to analyze summary statistics on-line and
adjust their habits. Third-parties including health insurance providers
now oﬀer discounts and ﬁnancial rewards in exchange for such private
information and evidence of healthy lifestyles. Given the associated mon-
etary value, the authenticity and correctness of the activity data col-
lected becomes imperative. In this paper, we provide an in-depth security
analysis of the operation of ﬁtness trackers commercialized by Fitbit, the
wearables market leader. We reveal an intricate security through obscu-
rity approach implemented by the user activity synchronization protocol
running on the devices we analyze. Although non-trivial to interpret, we
reverse engineer the message semantics, demonstrate how falsiﬁed user
activity reports can be injected, and argue that based on our discoveries,
such attacks can be performed at scale to obtain ﬁnancial gains. We fur-
ther document a hardware attack vector that enables circumvention of
the end-to-end protocol encryption present in the latest Fitbit ﬁrmware,
leading to the spooﬁng of valid encrypted ﬁtness data. Finally, we give
guidelines for avoiding similar vulnerabilities in future system designs.
Keywords: Fitness trackers · Reverse engineering · Spooﬁng · Fitbit
1
Introduction
Market forecasts indicate 274 million wrist-based ﬁtness trackers and smart-
watches will be sold worldwide by 2020 [1]. Such devices already enable users
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6_3) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 48–69, 2017.
DOI: 10.1007/978-3-319-66332-6_3
Breaking Fitness Records Without Moving
49
and healthcare professionals to monitor individual activity and sleep habits, and
underpin reward schemes that incentivize regular physical exercise. Fitbit main-
tains the lead in the wearables market, having shipped more units in 2016 than
its biggest competitors Apple, Garmin, and Samsung combined [2].
Fitness trackers collect extensive information which enables infering the
users’ health state and may reveal particularly sensitive personal circumstances.
For instance, one individual recently discovered his wife was pregnant after exam-
ining her Fitbit data [3]. Police and attorneys start recognizing wearables as
“black boxes” of the human body and use statistics gathered by activity trackers
as admissible evidence in court [4,5]. These developments highlight the critical
importance of both preserving data privacy throughout the collection process,
and ensuring correctness and authenticity of the records stored. The emergence of
third-party services oﬀering rewards to users who share personal health informa-
tion further strengthens the signiﬁcance of protecting wearables data integrity.
These include health insurance companies that provide discounts to customers
who demonstrate physical activity through their ﬁtness tracker logs [6], websites
that ﬁnancially compensate active users consenting to ﬁtness monitoring [7], and
platforms where players bet on reaching activity goals to win money [8]. Unfor-
tunately, such on-line services also bring strong incentives for malicious users to
manipulate tracking data, in order to fraudulently gain monetary beneﬁts.
Given the value ﬁtness data has towards litigation and income, researchers
have analyzed potential security and privacy vulnerabilities speciﬁc to activity
trackers [9–12]. Following a survey of 17 diﬀerent ﬁtness trackers available on
the European market in Q1 2016 [15], recent investigations into the security of
Fitbit devices (e.g. [12]), and the work we present herein, we found that in com-
parison to other vendors, Fitbit employs the most eﬀective security mechanisms
in their products. Such competitive advantage, giving users the ability to share
statistics with friends, and the company’s overall market leadership make Fitbit
one of the most attractive vendors to third parties running ﬁtness-based ﬁnancial
reward programs. At the same time it motivates us to choose Fitbit trackers as
the target of our security study, in the hope that understanding their underlying
security architecture can be used to inform the security and privacy of future ﬁt-
ness tracker system designs. Rahman et al. have investigated the communication
protocols used by early Fitbit wearables when synchronizing with web servers
and possible attacks against this [9]. Cyr et al. [10] studied the diﬀerent lay-
ers of the Fitbit Flex ecosystem and argued correlation and man-in-the-middle
(MITM) attacks are feasible. Recent work documents ﬁrmware vulnerabilities
found in Fitbit trackers [11], and the reverse engineering of cryptographic prim-
itives and authentication protocols [12]. However, as rapid innovation is the pri-
mary business objective, security considerations remain an afterthought rather
than embedded into product design. Therefore, wider adoption of wearable tech-
nology is hindered by distrust [13,14].
Contributions: We undertake an in-depth security analysis of the Fitbit Flex
and Fitbit One ﬁtness trackers and reveal serious security and privacy vul-
nerabilities present in these devices which, although diﬃcult to uncover, are
50
H. Fereidooni et al.
reproducible and can be exploited at scale once identiﬁed. Speciﬁcally, we
reverse engineer the primitives governing the communication between trackers
and cloud-based services, implement an open-source tool to extract sensitive per-
sonal information in human-readable format, and demonstrate that malicious
users can inject fabricated activity records to obtain personal beneﬁts. To cir-
cumvent end-to-end protocol encryption implemented in the latest ﬁrmware, we
perform hardware-based reverse engineering (RE) and document successful injec-
tion of falsiﬁed data that appears legitimate to the Fitbit cloud. The weaknesses
we uncover, as well as the design guidelines we provide to ensure data integrity,
authenticity and conﬁdentiality, build foundations for more secure hardware and
software development, including code and build management, automated test-
ing, and software update mechanisms. Our insights provide valuable information
to researchers and practitioners about the detailed way in which Fitbit operates
their ﬁtness tracking devices and associated services. These may help IoT man-
ufacturers in general to improve their product design and business processes,
towards developing rigorously secured devices and services.
Responsible Disclosure: We have contacted Fitbit prior to submitting our
work, and informed the company about the security vulnerabilities we discov-
ered. We disclosed these vulnerabilities to allow suﬃcient time for them to ﬁx the
identiﬁed problems before the publication of our ﬁndings. At the time of writ-
ing, we are aware that the vendor is in the process of evaluating the disclosed
vulnerabilities and formulating an eﬀective response to them.
2 Adversary Model
To retrieve the statistics that trackers collect, users predominantly rely on smart-
phone or tablet applications that extract activity records stored by the devices,
and push these onto cloud servers. We consider the adversarial settings depicted
in Fig. 1, in which users are potentially dishonest, whilst the server is provably
trustworthy. We assume an active adversary model in which the wristband user
Fig. 1. Adversary model considered for (a) devices not implementing encryption and
(b) trackers using encryption.
Breaking Fitness Records Without Moving
51
is the primary adversary, who has both the means and motive to compromise
the system. Speciﬁcally, the attacker (a) views and seeks to manipulate the
data uploaded to the server without direct physical control over the device, or
(b) inspects and alters the data stored in memory prior to synchronization, hav-
ing full hardware control of the device. The adversary’s motivation is rooted in
the potential to obtain ﬁnancial gains by injecting fabricated ﬁtness data to the
remote server. Smartphone and cloud platform security issues are outside the of
scope of this paper, therefore not considered in our analysis.
2.1 Target Fitbit Devices
The adversary’s target devices are the Fitbit Flex and Fitbit One wrist-based
ﬁtness trackers, which record user step counts, distance traveled, calories burned,
ﬂoors climbed (Fitbit One), active minutes, and sleep duration. These particular
trackers have been on the market for a number of years, they are aﬀordable and
their security and privacy has been scrutinized by other researchers. Thus, both
consumers and the vendor would expect they are not subject to vulnerabilities.
We subsequently found that other Fitbit models (e.g. Zip and Charge) imple-
ment the same communication protocol, therefore may be subject to the same
vulnerabilities we identify in this work.
2.2 End-to-End Communication Paradigms
Following initial pairing, we discover Fitbit trackers are shipped with one of
two diﬀerent ﬁrmwares; namely, the latest version (Flex 7.81) which by default
encrypts activity records prior to synchronization using the XTEA algorithm
and a pre-installed encryption key; and, respectively, an earlier ﬁrmware ver-
sion (Flex 7.64) that by default operates in plaintext mode, but is able to acti-
vate message encryption after being instructed to do so by the Fitbit server.
If enabled, encryption is end-to-end between the tracker and the server, whilst
the smartphone app is unaware of the actual contents pushed from tracker to
the server. The app merely embeds encrypted records retrieved from the tracker
into JSON messages, forwards them to the Fitbit servers, and relays responses
back to the tracker. The same functionality can be achieved through software
running on a computer equipped with a USB Bluetooth LE dongle, including
the open-source Galileo tool, which does not require user authentication [16].
Even though only the tracker and the server know the encryption key, upon
synchronization the smartphone app also receives statistic summaries from the
server in human readable format over an HTTPS connection. As such, and fol-
lowing authentication, the app and authorized third parties can connect to a user
account via the Fitbit API and retrieve activity digests—without physical access
to the tracker. We also note that, despite newer ﬁrmware enforcing end-to-end
encryption, the Fitbit server continues to accept and respond to unencrypted
activity records from trackers that only optionally employ encryption, thereby
enabling an attacker to successfully modify the plaintext activity records sent to
the server.
52
H. Fereidooni et al.
Fig. 2. Schematic illustration of the testbed used for protocol reverse engineering.
Linux-based laptop used as wireless Internet gateway and running MITM proxy.
3 Protocol Reverse Engineering
In this section, we reverse engineer the communication protocol used by the Fit-
bit trackers studied, uncovering an intricate security through obscurity approach
in its implementation. Once we understand the message semantics, we show that
detailed personal information can be extracted and fake activity reports can be
created and remotely injected, using an approach that scales, as documented in
Sect. 4.
3.1 MITM Setup
To intercept the communication between the tracker and the remote server, we
deploy an MITM proxy on a Linux-based laptop acting as a wireless Internet
gateway, as illustrated in Fig. 2. We install a fake CA certiﬁcate on an Android
phone and trigger tracker synchronization manually, using an unmodiﬁed Fitbit
application. The application synchronizes the tracker over Bluetooth LE and
forwards data between the tracker and the server over the Wi-Fi connection,
encapsulating the information into JSON messages sent over an HTTPS con-
nection. This procedure resembles typical user engagement with the tracker,
however the MITM proxy allows us to intercept all communications between the
tracker and the server, as well as between the smartphone and the server. In
the absence of end-to-end encryption, we can both capture and modify messages
generated by the tracker. Even with end-to-end encryption enabled, we can still
read the activity digests that the server provides to logged-in users, which are
displayed by the app running on their smartphones.
3.2 Wireshark Plugin Development and Packet Analysis
To simplify the analysis process and ensure repeatability, we develop a custom
frame dissector as stand-alone plugin programmed in C for the Wireshark net-
work analyzer [17].1 Developing this dissector involves cross-correlating the raw
1 The source code of our plug-in is available at https://seemoo.de/ﬁtbit-wireshark.
Breaking Fitness Records Without Moving
53
Fig. 3. Generic microdump in plain-text, as displayed by the wireshark dissector we
implement. Note the ability to ﬁlter by ‘ﬁtbit’ protocol type in the analyzer.
messages sent by the tracker with the server’s JSON responses to the client
application. After repeated experiments, we infer the many protocol ﬁelds that
are present in tracker-originated messages and that are encoded in diﬀerent for-
mats as detailed next. We use the knowledge gained to present these ﬁelds in a
human-readable format in the protocol analyzer.
There are two types of tracker-originated messages we have observed during
our analysis, which will be further described in the following sections:
1. Microdumps: A summary of the tracker status and conﬁguration.
2. Megadumps: A summary of user activity data from the tracker.
3.3 Microdump
Depending on the action being performed by the user (e.g. authentication and
pairing, synchronizing activity records), the smartphone app makes HTTPS
requests to the server using speciﬁc URLs, e.g. POST https:///1/devices/client/.../validate.json?btle_Name=Flex&secret=null&btAddress=
 for initial authentication. Each basic action is accompa-
nied by a so-called microdump, which is required to identify the tracker, and to
obtain its state (e.g. its current ﬁrmware version). Irrespective of whether or not
the tracker implements protocol encryption, the microdump header includes the
tracker ID and ﬁrmware version, and is sent in plain-text. Figure 3 illustrates
a microdump sent along with a ﬁrmware update request, as interpreted by our
Wireshark dissector.
54
H. Fereidooni et al.
We also note that the only validation feature that plain-text messages imple-
ment is a CRC-CCITT checksum, presumably used by the server to detect data
corruption in tracker-originated messages. In particular, this acquired knowledge
will allow us to inject generic messages into the server and obtain replies, even
when a valid tracker ID is already associated with a person’s existing account.
Yet, microdumps only contain generic information, which does not allow the
spooﬁng of user activity records. In what follows, we detail the format of mes-
sages sent to the server to synchronize the tracked user activity.
Note that the plain-text format does not provide measures for verifying the
integrity and authenticity of the message contents except for a checksum, which is
deterministically calculated from the values of the message ﬁelds. This allows the
adversary to inject generic messages to the server and receive replies, including
information about whether a tracker ID is valid and associated with a user
account.
3.4 Megadump Synchronization Message
Step counts and other statistics are transmitted by the tracker in the form of a
so-called megadump. Independent of encrypted or plain-text mode, neither the
Fitbit smartphone application nor the Galileo synchronization tool are aware of
the exact meaning of this payload. The megadump is simply forwarded to the
server, which in turn parses the message and responds with a reply. This reply is
then forwarded (by the corresponding application) back to the tracker, conﬁrm-
ing to the tracker that the data was synchronized with the server successfully.
Despite this behavior, the Fitbit smartphone application—in contrast to
Galileo—is aware of the user’s statistics. However, this is due to the applica-
tion making requests to the Fitbit Web API. Once authenticated, this API can
be used to retrieve user information from the server in JSON format. The Fit-
bit smartphone application periodically synchronizes its display via the Fitbit
Web API, allowing the user to see the latest information that was uploaded by
the most recent tracker megadump. A plain-text example of this is shown in
Fig. 4. Note that the Fitbit Web API separates data by type, such that not all
information transmitted within one megadump is contained within one JSON
response. From the megadump a total distance of 522720 mm can be extracted,
which equals to the 0.52 km from the JSON.
We use this information to reverse engineer and validate the megadump
packet format, and have identiﬁed that each megadump is split into the following
sections: a header, one or more data sections, and a footer. These sections start