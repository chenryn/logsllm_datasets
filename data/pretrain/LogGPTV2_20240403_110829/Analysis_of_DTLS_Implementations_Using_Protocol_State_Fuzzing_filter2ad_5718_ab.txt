not guarantee message arrival and therefore cannot guarantee
that the implicit counters are synchronized. At the start of
each epoch, sequence numbers are reset to 0, and for each new
record the sequence number is increased. Note that re-sending
a record due to the loss of a UDP packet still increases the
sequence number.
3 Background on Model Learning
Our state fuzzing framework infers a model of a protocol
implementation in the form of a Mealy machine, which des-
cribes how the implementation responds to sequences of
well-formed messages. Mealy machines are ﬁnite state auto-
mata with ﬁnite alphabets of input and output symbols. They
are widely used to model the behavior of protocol entities
(e.g., [10, 25]). Starting from an initial state, they process
one input symbol at a time. Each input symbol triggers the
generation of an output symbol and brings the machine to a
new state.
To infer a Mealy machine model of an implementation,
we use model learning. An analyzed implementation is re-
ferred to as the system under test (SUT). Model learning is
an automated black-box technique which a priori needs to
know only the input and output alphabets of the SUT. The
most well-known model learning algorithm is Angluin’s L∗
algorithm [3], which has been reﬁned into more efﬁcient ver-
sions, such as the TTT algorithm [22] which is the one we use.
These algorithms assume that the SUT exhibits deterministic
behavior, and produce a deterministic Mealy machine.
Model learning algorithms operate in two alternating pha-
ses: hypothesis construction and hypothesis validation. Du-
ring hypothesis construction, selected sequences of input sym-
bols are sent to the SUT, observing which sequences of output
symbols are generated in response. The selection of input
sequences depends on the observed responses to previous
sequences. When certain convergence criteria are satisﬁed,
the learning algorithm constructs a hypothesis, which is a
minimal deterministic Mealy machine that is consistent with
the observations recorded so far. This means that for input
sequences that have been sent to the SUT, the hypothesis pro-
duces the same output as the one observed from the SUT. For
other input sequences, the hypothesis predicts an output by
extrapolating from the recorded observations. To validate that
these predictions agree with the behavior of the SUT, lear-
ning then moves to the validation phase, in which the SUT is
subject to a conformance testing algorithm which aims to va-
lidate that the behavior of the SUT agrees with the hypothesis.
If conformance testing ﬁnds a counterexample, i.e., an input
sequence on which the SUT and the hypothesis disagree, the
hypothesis construction phase is reentered in order to build
a more reﬁned hypothesis which also takes the discovered
counterexample into account. If no counterexample is found,
learning terminates and returns the current hypothesis. This
is not an absolute guarantee that the SUT conforms to the
hypothesis, although many conformance testing algorithms
provide such guarantees under some technical assumptions. If
the cycle of hypothesis construction and validation does not
terminate, this indicates that the behavior of the SUT cannot
be captured by a ﬁnite Mealy machine whose size and com-
plexity is within reach of the employed learning algorithm.
Model learning algorithms work in practice with ﬁnite input
alphabets of modest sizes. In order to learn realistic SUTs, the
learning setup is extended with a so-called MAPPER, which
acts as a test harness that transforms input symbols from
the ﬁnite alphabet known to the learning algorithm to actual
protocol messages sent to the SUT, as illustrated in Fig. 2.
Typically, the input alphabet consists of different types of mes-
sages, often reﬁned to represent interesting variations, e.g.,
concerning the key exchange algorithm. The MAPPER trans-
forms each such message to an SUT message by supplying
message parameters, performing cryptographic operations,
etc. Conversely, the MAPPER translates output from the SUT
into the alphabet of output symbols known to the learning
2526    29th USENIX Security Symposium
USENIX Association
algorithm. The MAPPER also maintains state that is hidden
from the learning algorithm but needed for supplying mes-
sage parameters; this can include sequence numbers, agreed
encryption keys, etc. The choice of input alphabet and the de-
sign of the MAPPER require domain speciﬁc knowledge about
the tested protocol. Once the mapper has been implemented,
model learning proceeds fully automatically.
4 DTLS Framework Implementation
The Transport Layer Security (TLS) protocol is one of the
most important cryptographic protocols used on the Internet.
Due to its importance and widespread deployment, TLS and
its various attacks [2,4,5,7,13,30,43] have been under scrutiny
by security researchers. As a result, by now, there exist several
frameworks [6, 24, 31, 39] for the evaluation of TLS libraries.
In contrast, DTLS has been largely overlooked in these fra-
meworks or considered out of scope. Instead of starting from
scratch, we have decided to create a framework for testing
DTLS based on the newest version of TLS-Attacker [39].
4.1 TLS-Attacker
TLS-Attacker is an open-source, ﬂexible Java-based TLS ana-
lysis framework that allows its users to create and modify
TLS protocol ﬂows as well as the structure of the included
TLS messages. The user is then able to test and analyze the
behavior of an implementation, and create attacks and tools
with the custom TLS stack of TLS-Attacker as a software
library. TLS-Attacker has been integrated in the build process
of several TLS libraries [8, 27] to increase their test coverage.
TLS-Attacker employs solely the low-level cryptography
provided by Java, and implements the TLS protocol itself. Its
main functionality relies on the concept of workﬂow traces
which allow to deﬁne arbitrary protocol ﬂows. Every TLS
protocol ﬂow can be represented by a sequence of Send and
Receive actions. The developer can construct a workﬂow trace
in Java or in XML. Once TLS-Attacker receives a workﬂow
trace, it attempts to execute the predeﬁned TLS messages, and
records the behavior of the tested TLS peer. A Java example
with an ECDHE-RSA key exchange is shown below:
WorkflowTrace flow = new WorkflowTrace();
trace.addTlsActions(new TlsAction[]{
new SendAction(conn, new ClientHelloMessage()),
new ReceiveAction(conn, new ServerHelloMessage()),
new ReceiveAction(conn, new CertificateMessage()),
new ReceiveAction(conn, new ECDHEServerKeyExchangeMessage()),
new ReceiveAction(conn, new ServerHelloDoneMessage()),
new SendAction(conn, new ECDHClientKeyExchangeMessage()),
new SendAction(conn, new ChangeCipherSpecMessage()),
new SendAction(conn, new Finished()),
new ReceiveAction(conn, new ChangeCipherSpecMessage()),
new ReceiveAction(conn, new Finished())
});
Notice how messages in the above ﬂow are described at a high
level. To execute ﬂows, TLS-Attacker generates valid packets
for messages, and parses messages from packet responses. It
ClientHello
Record(..ClientHello(..))
LEARNER
MAPPER
[TLS-Attacker]
SUT
ServerHello
Record(..ServerHello(..))
Figure 2: DTLS Learning Setup.
does this by maintaining a context, which it updates as new
messages are sent and received. The context encompasses
stateful information relevant to a TLS connection such as
stored random nonces, agreed upon algorithms, and suppor-
ted cipher suites. Using this information, TLS-Attacker can
generate valid or semi-valid messages, encrypt them using
the negotiated cipher suite, and send them to a peer.
All the above properties make TLS-Attacker ideal for gene-
rating valid packets from message names, which in our case
are the symbols of the input alphabet.
4.2 Our DTLS Testing Framework
Our DTLS testing framework extends TLS-Attacker with sup-
port for DTLS 1.0 and DTLS 1.2. This extension allows TLS-
Attacker to generate, send and receive DTLS packets and,
more broadly, to execute valid and invalid DTLS ﬂows. Our
implementation involved several changes, among which we
mention: i) added support for DTLS handshake message frag-
mentation; ii) a new ﬁeld to the ClientHello message for
storing a server cookie; iii) new ﬁelds to the TLS context, one
for storing the cookie received, others for keeping track of
the record epoch and message sequence number (how these
ﬁelds are updated is explained in Section 5.2); and iv) new
options for retransmission and fragmentation handling.
5 Learning Setup
The learning setup1 comprises three components:
the
LEARNER, the MAPPER and the SUT; cf. Fig. 2. The SUT is a
DTLS server implementation, though our setup can be easily
adapted to support clients. The LEARNER generates inputs
from a ﬁnite alphabet of input symbols. The MAPPER trans-
forms these inputs into full DTLS records and sends them over
a datagram connection to the SUT. The MAPPER then captu-
res the SUT’s reply, translates it to symbols in the alphabet
of output symbols, and delivers them back to the LEARNER.
The LEARNER ﬁnally uses the information obtained from the
exchanged sequences of input and output symbols to generate
a Mealy machine, as described in Section 3.
5.1 Learner
The LEARNER is implemented using LearnLib [23], a Java
library implementing algorithms for learning automata and
Mealy machines. The library also provides state-of-the art
1Available at https://github.com/assist-project/dtls-fuzzer/
USENIX Association
29th USENIX Security Symposium    2527
Table 1: Symbols used in learning and their shorthands. We
list only the output symbols which are mentioned in the paper.
Symbol
ClientHello(T)
CertiﬁcateRequest
ClientKeyExchange(T)
T ∈ {RSA,ECDSA}
CertiﬁcateVerify
EmptyCertiﬁcate
Certiﬁcate(T)
Shorthand
CH(T)
T ∈ {DH,ECDH,RSA,PSK}
CertReq
CKE(T)
T ∈ {DH,ECDH,RSA,PSK}
CertVer
Cert(empty)
Cert(t)
t ∈ {RSA,EC}
CCS
ChangeCipherSpec
App
Application
Alert(CloseNotify)
A(CN)
Alert(UnexpectedMessage) A(UM)
A(BC)
Alert(BadCertiﬁcate)
A(DE)
Alert(DecodeError)
Alert(DecryptError)
A(DYE)
A(IE)
Alert(InternalError)
HVR
HelloVerifyRequest
SH
ServerHello
SHD
ServerHelloDone
SKE(T)
ServerKeyExchange(T)
T ∈ {DH,ECDH,PSK}
t
e
b
a
h
p
l
a
t
u
p
n
i
t
e
b
a
h
p
l
a
t
u
p
t
u
o
Finished
NoResp
Disabled
Unknown Message
F
-
Disabled
UM
conformance testing algorithms, which are used by the lear-
ning algorithm for hypothesis validation. The learning algo-
rithm chosen is TTT [22], a state-of-the-art algorithm that
requires fewer test inputs compared to other algorithms [21].
For conformance testing, we use Wp [11] and a variation of
it, Wp-Random [20].
Table 1 displays the alphabets of input and output symbols,
as well as the shorthands that we use to make their represen-
tation more compact. The input alphabet includes in abstract
form all client messages introduced in Section 2. Additionally,
it includes Application for sending a simple application mes-
sage, and two common alert messages, Alert(CloseNotify) and
Alert(UnexpectedMessage). (Interpretations for the alerts can
be found in the TLS 1.2 speciﬁcation [15, p. 31].) Finally, Cer-
tiﬁcate, EmptyCertiﬁcate, and CertiﬁcateVerify are included
for sending certiﬁcate-related messages. Certiﬁcate contains
a single valid certiﬁcate, and is parameterized by the public
key signing algorithm. EmptyCertiﬁcate denotes sending a
certiﬁcate message with an empty list of certiﬁcates.
The output alphabet includes abstractions for each diffe-
rent message the SUT responds with, similarly to the input
alphabet. It also includes three special outputs: NoResp, when
the SUT does not respond; Disabled, when the SUT process
is no longer running; and Unknown, when the SUT responds
with a message which cannot be decrypted by the MAPPER.
This happens, for example, if the MAPPER has replaced the
keys necessary to decrypt the output by a new set of keys.
5.2 Mapper
The MAPPER uses our DTLS testing framework to translate
between LEARNER inputs/outputs and actual DTLS messages.
Behaviorally, the MAPPER operates like a DTLS client, with
control ﬂow deferred to the LEARNER. In order to reduce the
learning effort, we do not subject the SUT to message reor-
dering or fragmentation. Hence, the MAPPER is conﬁgured to
send each handshake message in one single DTLS fragment.
To correctly supply and check DTLS-speciﬁc ﬁelds in mes-
sages, the MAPPER maintains the state of the interaction in
a context, which it uses to generate and parse messages. Our
DTLS testing framework already maintains such a context for
executing protocol ﬂows. Hence, we let our MAPPER use this
context, with a few adaptations to support efﬁcient learning.
Key components of this context are cookie, cipherState and
digest, as well as nextSendMsgSeq and nextRecvMsgSeq, for
the next message sequence number to be sent and received,
respectively. Each message sent is equipped with the value of
nextMsgSeqSent, which is then incremented. nextRecvMsgSeq
is assigned the sequence number of each message received,
provided it is the next expected one. The MAPPER also main-
tains analogous state variables for record sequence numbers,
as well as numbers of epochs that are incremented whenever
a ChangeCipherSpec is sent. These variables are also used
to assemble fragments into messages and detect retransmissi-
ons. Retransmissions here refer to messages whose message
sequence number or epoch are smaller than those expected.
The variable cookie, initially set to empty, retains the va-
lue of the cookie ﬁeld in the most recent HelloVerifyRequest
message received from the server, and is used when sending
subsequent ClientHello messages. The variable cipherState
stores the next symmetric keys to be used for decrypting/en-
crypting messages. To be put in use, a cipherState ﬁrst has
to be deployed. The cipherState deployed initially is set to
null (no encryption/decryption). On each ClientKeyExchange
sent, cipherState is updated using information from an ear-
lier ClientHello-ServerHello exchange. On each ChangeCip-
herSpec sent, cipherState is deployed. This implies that the
MAPPER will only start encrypting/decrypting once Client-
Hello and ServerHello are exchanged, and a ClientKeyEx-
change and a ChangeCipherSpec have been issued. Prior to
these actions, messages are sent in plaintext.
The variable digest stores a buffer of all handshake messa-
ges sent so far, i.e., each handshake message that is sent or
received is also appended to digest. A hash over this variable
is included in every Finished message sent, to be veriﬁed by
the server. The variable digest is cleared after each Finished,