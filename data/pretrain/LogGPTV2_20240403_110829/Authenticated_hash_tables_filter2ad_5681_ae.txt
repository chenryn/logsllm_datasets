time at the server is O (cid:0)nǫ/ logκǫ−1 n(cid:1); (3) The amortized
expected update time at the client is O(1); (4) The query
time is O(1); (5) The size of the veriﬁcation proof is O(1);
(6) The amortized size of the consistency proof is O(1); (7)
The veriﬁcation time is O(1); (8) The client keeps amortized
space O(1).
4.3 Authenticating Non-Membership
So far our results have been presented for authenticated
membership queries. We describe now how non-membership
queries can also be supported. To do that, in each bucket L,
we maintain all elements yi ∈ L sorted—in case elements are
drawn from an unordered universe, we ﬁrst apply a crypto-
graphic hash function to impose some order on the elements.
Let y1, y2, . . . , y|L| be the elements stored in a bucket L in
increasing order. Instead of computing prime representatives
of yi we compute prime representatives of the |L|+1 intervals
(yi, yi+1) for i = 0, . . . , |L|, where y0 and y|L|+1 denote −∞
and +∞, respectively. The proof of non-membership for an
element x ∈ (yi, yi+1) is equivalent to the proof of member-
ship for interval (yi, yi+1). As the bucket size is maintained
to be O(logκ n), Theorems 5 and 7 hold for non-membership
proofs as well. Finally, Theorem 6 holds as well, with the
only diﬀerence that the amortized expected update time at
the source and at the server is now O(logκ n), since at every
update the source will have to recompute the digest of the
O(logκ n)-sized bucket, for the sorted pairs must be updated.
5. EVALUATION AND ANALYSIS
In this section we provide an evaluation of our authen-
ticated hash table structure. First, we count the number
of primitive operations (mainly exponentiations) that every
complexity measure (update, query, proof size, size of up-
date authentication information) uses for general values of ǫ
and κ. Note that this is feasible since there is no signiﬁcant
overhead of (hidden) constant factors in our scheme. The
only constant factors included in our complexities are well-
understood, namely, functions of ǫ and κ. We are going to
evaluate the three-party version of the hash table described
in Theorem 6, where everything is constant, apart from the
query time, which is O(nǫ/ logκǫ n). As we saw in Section 2,
we have to use multiple RSA moduli N1, N2, . . . , Nl.
However, since the size of each modulus is increasing with
1/ǫ, for the experiments, as observed in Section 2, we are go-
ing to restrict the input of each level of accumulation to be
the output of a cryptographic hash function, e.g., SHA-256
plus a constant number of extra bits that, when appended to
the output of the hash function, give a prime number. There-
fore, we do not use prime representatives, but use a 1024-bit
modulus N for all tree levels. Basically, instead of having
prime representatives ri to represent an element xi through
the two-universal function hi, where hi(ri) = xi, we use di-
rectly the prime value g(xi) + 2t (and not ri = h−1
(xi)),
where t = O(1) is the minimum number of bits we need to
append to g(xi) such that g(xi) + 2t is prime and g(xi) is
the output of SHA-256 for example. This makes our scheme
more practical and still secure, since, as correctly observed
by Baric and Pﬁtzmann [2], the security of using the out-
put of a cryptographic hash function plus some extra bits as
the input of the RSA accumulator is based on random ora-
cles, which is suﬃciently good for practical reasons. There-
fore, for each level, the input values to the accumulator are
(256+t)-bit values (output of SHA-256 plus the bits we need
to append to get the prime) and the same RSA modulus N
is used, which is 1024 bits. We defer the proof of security of
our scheme in the random oracle model to the full version
of the paper.
i
In our scheme we set t = 14. By the prime distribution
theorem, which states that the number of primes less than
x is approximately x
ln x , we have that the number of primes
between x and y (x ≤ y) is ≃ y
ln x . Since 2b is a very
large number, we can approximate the number of primes in
the interval [2b+t, 2b+t + 2t] with
ln(2b+t) , where b is the bit-
length of the output of the cryptographic hash function and
t is the number of extra bits we add. We can now prove that
we hit a prime with probability p, if we sample (there are
around 87 primes for b = 256 and t = 14)
ln y − x
2t
ln(1 − p)
ln(cid:16)1 −
2
(b+t) ln(2)(cid:17)
times in the interval [2b+t, 2b+t + 2t] (we only sample from
the odd numbers in [2b+t, 2b+t + 2t]). For our scheme, for
p = 0.99, if we use SHA-256, i.e., b = 256, and add an extra
t = 14 bits, we need to sample around 428 times. That
means that we can eﬃciently extend our SHA-256 digest to
a 270-bit prime exponent by using an extra 14 bits. Finally,
we note that if we use the algorithm presented in [2], which
for i = 0, . . . , t checks to see if 2t+b + 2i is a prime, we need
only O(t) time. However, this method does not guarantee
ﬁnding a prime.
Primitive Operations. The main (primitive) operations
used in our scheme are:
1. Exponentiation modulo N ;
2. Computation of inverses modulo φ(N );
3. Multiplication modulo φ(N );
4. SHA-256 computation of 1024-bit integers.
We benchmarked the time needed for these operations on
a 64-bit, 2.8GHz Intel based, dual-core, dual processor ma-
chine with 2GB main memory and 2MB cache, running De-
bian Linux. For modular exponentiation, inverse computa-
tion and multiplication we used NTL [31], a standard opti-
mized library for number theory, interfaced with C++. For
200 runs the average time for computing the power of a 1024-
bit number to a 270-bit exponent and then reducing modulo
N was found to be t1 = 1.5ms, and the average time for
computing the inverse of a 270-bit number modulo φ(N )
was t2 = 0.00009ms. Also multiplication of 270-bit num-
bers modulo φ(N ) was found to be t3 = 0.00016ms. Finally,
for SHA-256, we used the standard C implementation from
gcrypt.h and, over 200 runs, the time to compute the 256-bit
digest of a 1024-bit number was found to be t4 = 0.01ms.
As expected, exponentiation dominates most of the time.
Updates. Let f be a function that takes as input a 1024-
bit integer x, computes its SHA-256-bit digest and extends
it to a 270-bit prime, by adding the appropriate 14 bits. We
are going to assume that the time for applying f (·) to x is
dominated by the SHA-256 computation and is equal to t4 =
0.01ms. As we saw in Theorem 6 the updates are performed
by the source as follows. Suppose the source wants to delete
element x in bucket L. Let d1, d2, . . . , dl be the RSA digests
along the path from x to the root (d1 is the RSA digest of
the certain bucket and dl is the root RSA digest). The source
ﬁrst computes d′
mod N which is the new value
of the bucket. Note that this is feasible to compute, since
the source knows φ(N ). Therefore so far, the source has
performed one f (·) computation (actually the source has to
do this f (·) computation only during insertions, since during
deletions the value f (x) of the element x that is deleted
has already been computed), one inverse computation and
one exponentiation. Next, for each i = 2, . . . , l, the source
computes d′
1 = df (x)−1
1
i by setting
d′
i = d
f (di−1)−1f (d′
i
i−1)
mod N.
Since f (di−1) is precomputed, the source has to do one f (·)
computation, one inverse computation, one multiplication
and one exponentiation. Therefore, the total update time is
tupdate = t1 + t2 + t4 + ǫ−1(t1 + t2 + t3 + t4),
(6)
which is not dependent on n.
Veriﬁcation. The veriﬁcation is performed by doing ǫ−1 +1
exponentiations and f (·) computations. Namely, by using
f (·) instead of prime representatives, Equation 4 becomes
αi = f (βαi−1
i−1 mod N ) (this is actually performed by cut-
ting the last 14 bits of ai and comparing the result with the
SHA-256 digest of βαi−1
i−1 mod N ). Therefore,
tverify = (ǫ−1 + 1)(t1 + t4),
(7)
which is also not dependent on n.
Table 2: Actual values of the complexity measures of
our scheme (computed with the derived equations)
for various values of ǫ = 0.1, 0.125, 0.3, 0.5, κ = 1 and
n = 100, 000, 000. Note that n (number of items in the
hash table) inﬂuences only query time.
ǫ
0.1
0.125
0.3
0.5
proof
size
(KB)
1.77
1.45
0.70
0.48
update
info.
(KB)
1.90
1.58
0.82
0.61
query
time
(ms)
107.95
119.38
507.99
5831.70
update
time
(ms)
16.61
13.59
6.54
4.53
verify
time
(ms)
16.60
13.58
6.53
4.52
900
800
700
600
)
s
m
(
e
m
i
t
500
400
300
200
100
0
0
query time for various values of ε and κ
ε = 0.1, κ = 1
ε = 0.1, κ = opt
ε = 0.3, κ = 1
ε = 0.3, κ = opt
ε = 0.35, κ = 1
ε = 0.35, κ = opt
2
4
6
8
number of elements in the data structure
10
7
x 10
Figure 2: This ﬁgure shows how query time scales
as the number of the elements in the hash table in-
creases, for diﬀerent values of ǫ = 0.35, 0.3, 0.1 and
κ = 1 or κ = opt, an optimal value for given ǫ. Note
that for ǫ = 0.1 querying is very eﬃcient, as we have
fewer exponentiations per level.
Queries. For the queries we have to do logκ n exponenti-
ations at the ﬁrst level and nǫ/ logκǫ n exponentiations for
the remaining ǫ−1 levels. Therefore,
tquery = (ǫ−1nǫ/ logκǫ n + logκ n)t1.
(8)
Note that we do not have to do f (·) computations since all
the f (·) values are precomputed. Also we cannot use cheap
multiplications (and one exponentiation per level), since the
security collapses if we reveal φ(N ) to the server.
Communication Complexity. The proof and the update
authentication information are ǫ−1+1 pairs of 1024-bit num-
bers and 270-bit f (·) values. Thus,
sproof = (ǫ−1 + 1)(1024 + 270).
(9)
The update authentication information includes also a sig-
nature on the ﬁnal (root) RSA digest, i.e., 1024 bits more.