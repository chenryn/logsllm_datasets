Π,S,J ,(x(cid:55)→1)
2
This notion guarantees universal participation deniability
under full corruption for ofﬂine-judges and is the strongest
notion for ofﬂine deniability in chats that we consider in this
work, as it fully covers all the security goals that we outlined
for ofﬂine-deniability in subsection III-B. We doubt however
that it is efﬁciently achievable (Conjecture 1).
Because of this we also introduce a weaker notion, that we
believe to be efﬁciently achievable in practice. Speciﬁcally we
suggest to use the predicate HFI as deﬁned in Deﬁnition 21.
The reasoning behind this is that this notion still eventually
achieves deniability in corrupted groups, but does not require
an update of the entire group state after every operation.
Instead the state can be updated as a side-effect of regular
messages, allowing for more practical protocols. Additionally
this notion has the advantage that it can be deﬁned generically
and therefore does not rely on any speciﬁcs of the protocol.
Deﬁnition 13 (HFI Ofﬂine Deniability). A protocol Π offers
HFI ofﬂine deniability or HFI-OfD if there is an efﬁcient
simulator S ∈ PPT so that no judge J has a chance of
winning the OfD-game (Experiment 3), with sd pred = HFI
with a probability greater than 1
2:
∃S ∈ PPT : ∀J :
Pr[ExpOfD
(cid:0)1λ(cid:1) = 1] ≤ 1
Π,S,J ,HFI
2
for
Theorem 1. S-OfD is strictly stronger than HFI-OfD.
Proof. (Sketch,
the full proof see the full version.)
“S-OfD ⇒ HFI-OfD”: This follows directly from the fact that
the only difference between the two notions is that the judge
has strictly more freedom in choosing il in S-OfD.
“HFI-OfD (cid:54)⇒ S-OfD”: A HFI-OfD-secure chat-protocol can
be modiﬁed so that every user U appends a random bitstring bs
to successive messages in a group that does not change as long
as only she sends messages (no change to group or messages
by other users). The resulting scheme is still HFI-OfD-secure,
but not S-OfD-secure.
Next we deﬁne an even weaker notion for protocols that
have trouble achieving HFI-OfD:
Deﬁnition 14 (Weak Ofﬂine Deniability). A protocol Π offers
weak ofﬂine deniability or W-OfD if there is an efﬁcient sim-
ulator S ∈ PPT so that no judge J has a chance of winning
the OfD-game (Experiment 3), with sd pred = (x (cid:55)→ 0) with
a probability greater than 1
2:
∃S ∈ PPT : ∀J :
Pr[ExpOfD
Π,S,J ,(x(cid:55)→0)
(cid:0)1λ(cid:1) = 1] ≤ 1
2
Intuitively W-OfD forces the judge to only create three
kinds of groups: Fully corrupted ones in which all actions
are exp, fully hidden ones in which all actions are hid and
“target”-groups that contain only ch- and ar. This is because
the deﬁnition of disjoined requires a state-disassociation be-
tween any pair of actions that don’t ﬁt into any of the above
groups, but the deﬁnition of W-OfD-security means that there
is no sequence of interaction that causes one.
We also note that
the fully exposed groups will be of
very little help for the judge in protocols in which sessions
states are independent from each other except for the shared
secret key (as long as that key is constant): Due to the
independence exp groups are not affected by the challenge-bit
b in any way and thus don’t contain any useful information
about it. As such the judge has to judge the ch-groups only
on the provided transcripts, which is why we consider the
term “weak” justiﬁed, despite the seemingly strong form of
corruption.
Theorem 2. HFI-OfD is strictly stronger than W-OfD.
Proof. (Sketch, for the full proof see the full version.) Anal-
ogous to the proof of Theorem 1, except that the bitstring bs
is constant within a group, not within consecutive messages
of the same user in a group.
Corollary 2.1. S-OfD is strictly stronger than W-OfD.
Proof. This follows directly from the combination of Theo-
rem 1 and Theorem 2.
Theorem 3. W-OfD is strictly stronger than naive ofﬂine
deniability.
Proof. (Sketch, for the full proof see the full version.) The
main difference between the two notions is that W-OfD-
security allows exp groups. The proof is thus mostly anal-
ogous to that of Theorem 1, except that bs is the same for all
groups and never changed.
Given all of the above we conclude that while S-OfD is
clearly the strongest notion, it will usually be too expensive
to target in practical protocols. Because of this we recommend
HFI-OfD as the target-notion that will usually be desirable, as
it is still quite strong but also efﬁciently achievable. W-OfD
is a notion that is still weaker and that we consider to be the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1684
disassociation.
2) Π only uses the secret key of a simple (EUF-CMA-
secure) signature-scheme as long-term secret.
3) Π works with every EUF-CMA-secure signature scheme.
4) Π only uses the long-term secret key to create signatures
with the regular signing algorithm.
5) There exists a time period tΠ such that Π never veriﬁes
a signature more than tΠ after its creation.
6) Π does not use any oracles that cannot be efﬁciently
minimum that a protocol aiming at deniability should target
outside of special circumstances.
We recommend against the use of N-OfD, despite the initial
appeal it may have because of its simplicity: The assumptions
it makes about judges are too optimistic for practical use
outside of special circumstances.
IV. EPOCHAL SIGNATURES
We now introduce signatures that become deniable after a
certain amount of time but provide an unforgeability notion
that is essentially equivalent to the standard notion of existen-
tial unforgeability under chosen message attacks (EUF-CMA)
before that. These allow adding deniability to many efﬁcient
multi-party chats that use signatures for their authentication,
such as MLS [1]) by simply replacing the used signature
scheme:
Theorem 4. Let Π be a chat-protocol for which the following
requirements hold:
1) A hidden full interaction (HFI) causes a perfect state
simulated.
Then the protocol Π∗ that only differs from Π in that the
conventional signature-scheme is replaced with an epochal
signature-scheme Σ with parameters so that (V −1)·∆t ≥ tΠ
is HFI-OfD-secure.
The theorem essentially states that
if the protocol uses
generic EUF-CMA signatures and is HFI-OfD-secure when
these signatures are removed then the protocol obtained by
replacing the signatures with epochal signatures is HFI-OfD-
secure. The proof can be found in Appendix D.
A. Syntactic Deﬁnition
The main differences from a standard signature-scheme
are the use of epochs and addition of a per-epoch public
information pinfoe. Knowing pinfoe should be enough to
create arbitrary expired signatures; it must be made public
in such a way that everyone has easy access to it. The reason
for why we separate pinfoe from the signatures is simply so
that parties don’t have to have seen a real signature in order
to create an expired one.
Deﬁnition 15. An epochal signature scheme Σ is a tuple of
four algorithms: Σ.gen, Σ.evolve, Σ.sign and Σ.verify.
• Σ.gen: Takes a security-parameter 1λ, an epoch-length
∆t, the maximum number of epochs E ∈ poly(λ) and
the number of epochs V  1
2:
∀λ ∈ N, E ∈ poly(λ), V ∈ {1, . . . , E − 1} : ∃S ∈ PPT :
∀J ∈ TM : Pr[ExpDeniability
(cid:0)1λ, ∆t, E , V(cid:1)] = 1] ≤ 1
Σ,S,J
2
We give the secret key to J because we consider unbounded
judges in the ﬁrst place and it should not help her in distin-
guishing signatures. This essentially prevents the inclusion of
information about previously generated signatures in the secret
key, which we consider desirable.
An anonymous reviewer pointed out an out-of-model attack
against this deﬁnition: If a party forwards an epochal signature
before its expiration to a time-stamping server and receives a
regular signature on it and the current time, then it is not
possible to simulate that signature. In this case the time-
stamping server acts as a witness that the signature was real.
This is an out-of-model attack in both the signature-(as there
are no time-stamping-oracles in the deniability game) and
the chat-setting (Requirement 6 of Theorem 4) that cannot
be prevented with any scheme whose deniability is based on
(cid:0)1λ, ∆t, E , V(cid:1). The deni-
Experiment 5: ExpDeniability
ability game for epochal signatures.
1 pk , sk := Σ.gen(cid:0)1λ, ∆t, E , V(cid:1)
Σ,S,J
2 b ←$ {0, 1}
3 m, e0, e1 := J (pk , sk )
4 σ := ⊥
5 abort if(∨e0 + e1 ≥ E ∨ e0 < 0 ∨ e1 < V )
6 for e ∈ {1, . . . , e0}:
pinfoe, sk := Σ.evolve (sk )
7
8 if b = 0:
9
σ := Σ.sign (sk , m)
10 for e ∈ {e0 + 1, . . . , e0 + e1}:
pinfoe, sk := Σ.evolve (sk )
σ := S(m, e, pinfoe0+e1)
11
12 if b = 1:
13
14 b(cid:48) := J (σ, sk )
15 return b = b(cid:48)
delayed information-releases. Developing schemes that resist
such attacks is an important challenge for future work.
V. PROPOSED TECHNIQUES
In this section we describe how we build an efﬁcient epochal
signature scheme that satisﬁes the security notions that we
deﬁned in the previous section. We do this by starting with a
naive and inefﬁcient scheme that we then modify.
This starting point is the scheme that simply layers two
signatures on top of each other, where the lower “dynamic”
one is replaced with each epoch updates, while the public key
of the upper “static” one serves as long-term identity. Once
the signatures created within an epoch expire, the secret key
of the dynamic level is published and can be used to create
expired signatures. We remark that this is similar to how CAs
work, with the main difference that we publish expired secret
keys intentionally. The resulting scheme works as follows:
Key-Generation is identical to the key-generation of the