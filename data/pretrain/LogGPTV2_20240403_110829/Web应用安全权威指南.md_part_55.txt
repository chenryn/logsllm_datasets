## **6.6 总结**

本章主要探讨了字符编码处理对安全性的影响。在Web应用程序开发中，汉字乱码问题较为常见，几乎每位开发者都曾遇到过。乱码问题通常是由于字符编码处理或设置不当导致的。除了造成显示错误外，不正确的字符编码还可能引发安全漏洞。

### 问题示例
- 发现非法编码数据时应终止处理，或用U+FFFD替换。
- 确认如“表”、“ソ”、“能￥”等字符是否能够正确保存和显示。
- 验证尾骶骨测试（Tail Bone Test）能否通过。

### 漏洞实例
字符编码引起的漏洞常被用于网络攻击，例如蠕虫病毒Nimda就利用了MS00-057漏洞进行传播。

### 对策建议
- 全程统一使用Unicode。
- 输入数据非法时报错并终止处理。
- 处理数据时确保使用正确的编码方式。
- 输出时设置正确的字符编码。

# **第 7 章 如何提高 Web 网站的安全性**

本章将讨论除应用程序外，其他可以采取的措施以增强网站整体的安全性。首先，我们将概述Web网站面临的攻击类型，然后针对中间件漏洞、伪装攻击、网络监听、篡改以及恶意软件等威胁提供具体的应对策略。

![](Image00237.jpg){.sgc-11 width="90%"}
**图 7-1 针对 Web 网站的外部攻击**

如图所示，即使程序本身是安全的，攻击者仍可通过多种途径发起攻击。因此，仅依靠编写安全代码不足以保证Web网站的安全性。接下来，我们将这些非应用程序层面的攻击分为以下几类，并分别提出对策：
- 针对 Web 服务器的攻击
- 伪装攻击
- 网络监听与篡改
- 恶意软件

## **7.1 针对 Web 服务器的攻击及防范措施**

### **7.1.1 利用基础软件漏洞进行攻击**

操作系统及Web服务器等底层软件也可能存在安全漏洞。如果这些漏洞被利用，可能导致网站被篡改、信息泄露、拒绝服务攻击，甚至作为跳板对其他服务器发起进一步攻击。

### **7.1.2 非法登录**

攻击者经常尝试通过暴力破解来获取管理Web服务器所需密码（如Telnet、FTP、SSH等服务），进而修改网站内容或窃取敏感信息。为防止此类攻击，需加强认证机制并限制不必要的端口和服务暴露。

### **7.1.3 对策汇总**
- 停止运行不需要的服务
- 定期更新和修补已知漏洞
- 限制未授权访问
- 加强身份验证强度

#### **停止运行不需要的服务**

停用不再需要的服务不仅可以减少维护成本，也能降低被攻击的风险。

#### **定期实施漏洞防范措施**

对于Web服务器及其相关组件，应该定期检查是否有可用的安全补丁，并及时应用。这包括但不限于：

- 在设计阶段考虑支持周期
- 决定升级方法
- 运营期间持续关注最新漏洞信息
- 根据实际情况制定并执行修复计划

##### **选定软件时确认其生命周期政策**

选择软件时应考虑到未来可能发生的版本更新情况。商用产品通常会提供明确的支持期限承诺；而对于开源项目，则需参考历史记录预测未来的维护状态。

##### **确定打补丁方式**

根据安装方式的不同，可采用如下几种方法进行漏洞修复：

- 重新安装最新版软件
- 在源码级别直接修补后重新编译
- 使用系统自带的包管理工具（如APT、Yum）
- 应用官方提供的补丁程序（例如Windows Update）

##### **关注各种漏洞相关信息**

订阅JVN（Japan Vulnerability Notes）、JVN iPedia等权威机构发布的安全公告，有助于快速响应新发现的安全威胁。

##### **确认漏洞后调查补丁状况以及防范对策、并制定对应计划**

一旦得知存在潜在风险，应立即评估影响范围并决定是否需要采取行动。具体步骤包括：

1. 确认是否受到影响
2. 分析潜在危害
3. 选择适当的缓解措施
4. 规划详细的实施方案

##### **执行漏洞对应计划**

按照既定方案执行修复工作，并在完成后更新文档以反映当前系统的实际配置。