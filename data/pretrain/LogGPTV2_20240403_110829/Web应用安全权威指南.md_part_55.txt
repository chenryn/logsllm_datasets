GBK。------译者注
[21]{.注释编号下}
此测试不适用于中文。中文的乱码问题不像日语那么复杂。------译者注
## **6.6 总结** {#text00000.html#nav_point_95 line-num="637 638"}
本章主要讲述了字符编码的处理对安全性的一些影响。
在 Web
应用程序开发时经常会出现汉字乱码问题，几乎每个人都曾经遇到过。发生乱码的原因都是因为字符编码的处理或者设置不正确导致的。字符编码除了会导致乱码问题外，还可能会引发安全漏洞的出现。
像这样由于字符编码处理不当导致的漏洞绝对不是什么小概率事件。具体到如何去做，我们可以从最常见的乱码问题开始着手。比如可以先按照下面的步骤进行处理。
-   发现非法的编码数据终止处理，或者用 U+FFFD 替换
-   确认"表"或者"ソ"、"能￥"等是否能正确保存和显示
-   是否能通过尾骶骨测试
由字符编码引起的漏洞经常被用在网络攻击中，比如蠕虫病毒 Nimda
就是利用了漏洞 MS00-057 的一个例子。
**对策汇总**
> -   应用全体统一使用 Unicode
>
> -   输入数据非法时报错并终止处理
>
> -   处理数据时使用正确的编码方式
>
> -   输出时设置正确的字符编码方式
\
# **第 7 章 如何提高 Web 网站的安全性** {#text00000.html#nav_point_96 line-num="0 1"}
> 本章我们将主要探讨一下除了应用程序以外，我们还能采取哪些手段来提高网站整体的安全性。首先，我们会介绍一下
> Web
> 网站攻击的概况，然后再针对各种攻击手法，对基础软件（中间件）漏洞、伪装攻击、网络监听、网络篡改，以及恶意软件等漏洞或攻击行为的对策进行说明。
在进行详细介绍之前，我们先总结一下来自 Web 网站外部的攻击都有哪些，如图
7-1 所示。
![](Image00237.jpg){.sgc-11 width="90%"}
**图 7-1 针对 Web 网站的外部攻击**
像上图显示的那样，除了应用程序本身以外，攻击者还有很多其他途径可以发动攻击，如果不预防这些潜在威胁的话，光靠编写安全的程序是不能
100% 保证 Web
网站的安全性的。本章将把这些应用程序以外的攻击分为以下几类，并分别介绍针对这些攻击可以采取的对策。
-   针对 Web 服务器的攻击
-   伪装攻击
-   网络监听、网络篡改
-   恶意软件
## **7.1 针对 Web 服务器的攻击途径和防范措施** {#text00000.html#nav_point_97 line-num="17 18"}
如果只是在 Web
应用程序里面清除了潜在安全隐患的话，并不足以保证系统的绝对安全性。除了应用程序，还要确保像
Web 服务器（包括 PHP 或 Servlet
容器等中间件）等基础软件的安全性。本章将先介绍一下针对 Web
服务器的攻击手段，然后再阐述如何对其进行防御。
### **7.1.1 利用基础软件漏洞进行攻击** {#text00000.html#nav_point_98 line-num="21 22"}
操作系统及 Web 服务器等软件也会存在漏洞，Web
服务器有可能因为这些基础软件的漏洞导致被入侵。另外如果 Web
服务器中还存在跨站脚本攻击（XSS）漏洞的话，则有可能导致发生被动攻击从而进一步对用户造成侵害。
利用了基础软件漏洞的攻击会导致各种次生灾害发生，比如网站被篡改、信息泄露、拒绝服务，或者被用来当作跳板进而发动对其他服务器的攻击等。
### **7.1.2 非法登录** {#text00000.html#nav_point_99 line-num="27 28"}
网络上有很多针对管理 Web 服务器用的软件（Telnet、FTP、SSH
等服务器软件，以及 phpMyAdmin 或者 Tomcat
的管理页面）密码进行暴力破解的攻击。攻击者事会先对服务器进行端口扫描来确认哪些端口或是服务是开放的，然后针对开放的端口或者服务进行基于字典的暴力破解攻击。
如果管理服务器用的密码被破解的话，会造成网站内容被篡改或信息泄露等各种重大问题。
### **7.1.3 对策** {#text00000.html#nav_point_100 line-num="33 34"}
为了预防针对 Web 服务器的攻击，可以采取以下的对策。
-   停止运行不需要的软件
-   定期实施漏洞防范措施
-   对不需要对外公开的端口或者服务加以访问限制
-   提高认证强度
下面分别对这几项加以说明。
#### **停止运行不需要的软件** {line-num="44 45"}
在 Web
服务器上同时运行的那些不需要对外提供服务的软件，很可能会成为外部攻击的入口。而且这些不对外提供服务的软件也需要进漏洞防范措施等，会产生运营成本。所以停止运行这些不必要软件，既能降低成本，也能使系统更安全。
#### **定期实施漏洞防范措施** {line-num="48 49"}
Web 服务器软件及编程语言等基础软件也需要实行漏洞预防措施。应对 Web
服务器的漏洞可以按照下面的步骤实施。
> -   前期设计时应该考虑的事情
>
>     -   确认软件支持期限
>
>     -   决定打补丁（升级）的方法
>
> -   运营开始后需要做的事情
>
>     -   随时关注漏洞发布信息
>
>     -   漏洞出现后调查补丁状况以及防范对策、并制定对应计划
>
>     -   执行漏洞对应计划
-   **选定软件时确认软件的升级状况**
    作为软件漏洞对策，可选取的方法有打补丁和版本升级两种。需要注意的是，很可能在网站运营期间，就出现所选用的软件停止开发或更新的情况。
    有的商用软件公司会通过软件支持生命周期政策（Support Lifecycle
    Policy）的形式公布软件的支持期限。比如微软的服务端产品都会保证在新版本出来之后
    7 年内继续提供系统补丁 [1]{.注释编号}
    。不同软件公司及不同的产品，其所能提供的软件支持生命周期政策长短也各有不同，需要在选择某一产品之前确认清楚。
    免费软件和开源软件（FLOSS）则很多都没有公布具体的软件支持生命周期政策，这一点尤其要注意。在选择
    FLOSS
    作为基础软件的时候，可以通过查看该软件过去的升级记录，来预测未来软件是否能得到可靠的保障。
    下图显示了各 PHP 的主要版本支持情况。从图中可以看出，PHP4.x
    系列的支持期限为从 PHP5 发布开始，在 3 年半之内都会提供技术支持。
    ![{%}](Image00238.jpg)
    **图 7-2 各 PHP 主版本的支持期限**
    如上图显示的那样，PHP
    的版本升级还是很活跃的。而另一方面，旧版本的支持期限都比较短，如果在网站运维中所使用的
    PHP 版本不被官方支持了，就会带来安全上的隐患。不光是 PHP，所有使用了
    FLOSS 的都需要考虑到这一问题。
    综上所述，如果基础软件选择 FLOSS 的话，需要在系统开发前期就预测到
    Web
    网站在运维阶段可能会发生的软件版本升级的可能性，并针对迁移到新版本所需要的费用进行运维上的预算。
-   **确定打补丁方式**
    在选择基础软件的时候，最好同时也确定给软件进行打补丁的方法。基本上给软件打补丁可以采用下面的方法。
    -   重新安装最新版本的软件
    -   在源代码级别打补丁后再编译（Make）
    -   使用系统提供的包管理软件（APT 或者 Yum 等）
    -   使用补丁软件（Windows Update 或者 WSUS 等）
    打补丁的方法也受软件安装方法的影响。比如在使用包管理系统安装的软件，打补丁也需要通过包管理软件来完成。通过其他方法安装的软件，可以进行单独打补丁后编译，或者安装新版软件的方法。
    此外，像 PHP
    等编程语言版本升级后，由于语言本身的规范有可能会有变更，所以就可能会导致系统运行异常。因此在版本升级前需要确定升级的影响范围，并对应用程序进行全面的功能测试。
    利用包管理系统打补丁的时候，由于不会修改软件本身的规格，而只是打上
    Bug
    或漏洞修复补丁，所以由此导致应用程序不能正常工作的可能性比较低。与之相对应的，包管理系统提供的软件的版本一般都会比最新的版本稍微旧一些。但是根据
    Linux 的发行版本不同，也有的包管理系统都会提供最新版本的软件（Fedora
    等）。
    可见，上述所说的给软件打补丁的方法各有利弊，软件的安装方法不同，打补丁的方式也不同。这就需要在选定某一软件的时候，要同时确认软件的安装方法以及打补丁的方法。
    下面是在本书附带的漏洞系统镜像系统（请到本书的支持页面下载：
    ）里进行软件升级的例子。apt-get 命令是 Ubuntu 或 Debian 等 Linux
    发行版本采用的包管理程序 APT
    的一个命令。带有下划线的部分是需要在命令行输入的命令。
    > **执行示例 在漏洞系统镜像系统里进行软件升级的例子**
    ![{%}](Image00239.jpg)
    Fedora 以及 CentOS、Red Hat Enterprise Linux 等 Linux 发行版本都采用
    Yum 作为包管理系统。关于包管理系统的详细说明请参考关于 Linux
    的书籍。
-   **关注各种漏洞相关信息**
    每天都会有各种系统漏洞被发现，每天也都会公开应对的方法或者安全补丁。为了保证
    Web
    网站的安全性，需要关注各种相关软件的漏洞信息，并实时采取对应措施。
    各种漏洞信息一般会通过 Web 站点或者邮件列表公布。在 Web
    应用开始运营之前，就需要确定如何收集这些软件漏洞信息，建立能及时监视这些漏洞信息的体制。
    下面列举了一些发布漏洞信息的权威网站。除了关注应用程序所采用软件的漏洞信息之外，最好也能对这些网站保持关注。[2]{.注释编号}
    -   JVN（Japan Vulnerability Notes）
    -   JVN iPedia 漏洞信息数据库
    不管哪个网站都提供了 RSS 订阅功能。订阅了这些 RSS
    的话，将对及时获取各种信息有很大帮助。
-   **确认漏洞后调查补丁状况以及防范对策、并制定对应计划**
    在确认漏洞信息之后，按照如下步骤制定漏洞对应计划。
    > 1\. 是否在使用存在漏洞的软件
    >
    > 2\. 确认此漏洞导致的影响，讨论是否需要针对此漏洞采取应对措施
    >
    > 3\. 决定应对方法
    >
    > 4\. 制定详细的实施计划
    前面两步主要讨论是否有对此漏洞采取应对措施的必要性，有时候会很难判断漏洞是否会给系统带来影响，这时候可以采取只要系统使用着出现漏洞的软件，一律打补丁、升级。
    漏洞的应对方法，有以下 3 种方式。
    -   安装修正程序或安全补丁（根本性解决方法）
    -   升级到解决了漏洞的新版本（根本性解决方法）
    -   采取回避对策（临时措施）
    这里所说的回避对策，是指通过采取修改配置等方法来达到系统不受漏洞影响的目的。回避措施一般是在安全补丁还没有公布，或者补丁的可靠性没有得到验证而不能打入补丁等情况下，作为临时措施来施行。
    在实施计划中，需要确定以下事项。
    -   在测试环境验证（是否需要重启服务器，应用程序是否正常运行，切换回老系统方法的确认）
    -   实施日程表
    -   Web 网站停止服务公告
    -   服务器的备份步骤
    -   实施项目的详细化
    -   实施后验证方法的详细化
    -   创建实施步骤及检查表（Check List）
    上面描述的是一个比较完整的实施计划。如果现实情况允许短时间停止 Web
    服务器，则可以省略在测试环境上的验证步骤，而直接在正式环境下打补丁。此外，还可能存在不能准备测试环境的情况。不管哪种情况，都需要在打补丁之前进行完整的备份，以防打补丁后发生系统故障。
-   **执行漏洞对应计划**
    制订了漏洞应对计划后，只要按计划执行就可以了。
    打补丁或者版本升级结束之后，需要记录工作记录，同时在系统环境构成表（系统架构说明文档）里修改更新过的各模块，记录相关软件的最新版本等信息。
[1]{.注释编号下}
（参考日期：2010 年 12 月 4 日）
[2]{.注释编号下} 常用的中文和英文网站有：\
WooYun（国内）：\
SecurityFocus（国外）：\
National Vulnerability Database（国外）：
------译者注
#### **对不需要对外公开的端口或服务加以访问限制** {line-num="173 174"}
SSH 服务（sshd）或 FTP
服务作为对服务器进行管理的常用软件，不能随意停止其服务运行，但是可以通过增加对这些服务的访问限制，来提高系统的安全性。