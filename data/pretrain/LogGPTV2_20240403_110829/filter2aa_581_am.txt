\> mvn spring-boot:run
 Testing OAuth 2.0 Security Token Service (STS)
To get an access token using the OAuth 2.0 client credentials grant type, use the 
following command. Make sure to replace the values of $CLIENTID and $CLIENTSECRET 
appropriately. The hard-coded values for client id and client secret used in our example 
are 10101010 and 11110000, respectively. Also you might have noticed already, the STS 
endpoint is protected with Transport Layer Security (TLS). To protect STS with TLS, we 
followed the same process we did before while protecting the Zuul API gateway with TLS.
\> curl -v -X POST --basic -u $CLIENTID:$CLIENTSECRET -H "Content-Type: 
application/x-www-form-urlencoded;charset=UTF-8" -k -d "grant_type=client_
credentials&scope=foo" https://localhost:8443/oauth/token
{"access_token":"81aad8c4-b021-4742-93a9-e25920587c94","token_
type":"bearer","expires_in":43199,"scope":"foo"}
Note we use the –k option in the preceding curL command. Since we have 
self-signed (untrusted) certificates to secure our httpS endpoint, we need to 
pass the –k parameter to advise curL to ignore the trust validation. you can find 
more details regarding the parameters used here from the Oauth 2.0 6749 rFC: 
https://tools.ietf.org/html/rfc6749 and also explained in Chapter 4.
To get an access token using the password OAuth 2.0 grant type, use the following 
command. Make sure to replace the values of $CLIENTID, $CLIENTSECRET, $USERNAME, 
and $PASSWORD appropriately. The hard-coded values for client id and client secret 
Chapter 5  edge SeCurity with an api gateway 
113
used in our example are 10101010 and 11110000, respectively; and for username and 
password, we use peter and peter123, respectively.
\> curl -v -X POST --basic -u $CLIENTID:$CLIENTSECRET -H "Content-Type: 
application/x-www-form-urlencoded;charset=UTF-8" -k -d "grant_type=passwor
d&username=$USERNAME&password=$PASSWORD&scope=foo" https://localhost:8443/
oauth/token
{"access_token":"69ff86a8-eaa2-4490-adda-6ce0f10b9f8b","token_
type":"bearer","refresh_token":"ab3c797b-72e2-4a9a-a1c5-
c550b2775f93","expires_in":43199,"scope":"foo"}
Note if you carefully observe the two responses we got for the Oauth 2.0 client 
credentials grant type and the password grant type, you might have noticed that 
there is no refresh token in the client credentials grant type flow. in Oauth 2.0, the 
refresh token is used to obtain a new access token, when the access token has 
expired or is closer to expire. this is quite useful, when the user is offline and the 
client application has no access to his/her credentials to get a new access token 
and the only way is to use a refresh token. For the client credentials grant type, 
there is no user involved, and it always has access to its own credentials, so can 
be used any time it wants to get a new access token. hence, a refresh token is not 
required.
Now let’s see how to validate an access token, by talking to the authorization server. 
The resource server usually does this. An interceptor running on the resource server 
intercepts the request, extracts out the access token, and then talks to the authorization 
server. In a typical API deployment, this validation happens over a standard endpoint 
exposed by the OAuth authorization server. This is called the introspection endpoint, 
and in Chapter 9, we discuss OAuth token introspection in detail. However, in this 
example, we have not implemented the standard introspection endpoint at the 
authorization server (or the STS), but rather use a custom endpoint for token validation.
The following command shows how to directly talk to the authorization server to 
validate the access token obtained in the previous command. Make sure to replace the 
value of $TOKEN with the corresponding access token appropriately.
Chapter 5  edge SeCurity with an api gateway 
114
\> curl -k -X POST -H "Authorization: Bearer $TOKEN" -H "Content-Type: 
application/json"   https://localhost:8443/user
{"details":{"remoteAddress":"0:0:0:0:0:0:0:1","sessionId":null,"tokenValue": 
"9f3319a1-c6c4-4487-ac3b-51e9e479b4ff","tokenType":"Bearer","decodedDetails":
null},"authorities":[],"authenticated":true,"userAuthentication":null, 
"credentials":"","oauth2Request":{"clientId":"10101010","scope":["bar"], 
"requestParameters":{"grant_type":"client_credentials","scope":"bar"}, 
"resourceIds":[],"authorities":[],"approved":true,"refresh":false,"redirect 
Uri":null,"responseTypes":[],"extensions":{},"grantType":"client_credentials", 
"refreshTokenRequest":null},"clientOnly":true,"principal":"10101010", 
"name":"10101010"}
The preceding command returns back the metadata associated with the access 
token, if the token is valid. The response is built inside the user() method of sample03/
src/main/java/com/apress/ch05/sample03/TokenServiceApp.java class, as shown in 
the following code snippet. With the @RequestMapping annotation, we map the /user 
context (from the request) to the user() method.
@RequestMapping("/user")
public Principal user(Principal user) {
      return user;
}
Note By default, with no extensions, Spring Boot stores issued tokens in memory. 
if you restart the server after issuing a token, and then validate it, it will result in an 
error response.
 Setting Up Zuul API Gateway for OAuth 2.0 Token 
Validation
To enforce token validation at the API gateway, we need to uncomment the following 
property in sample02/src/main/resources/application.properties file, as shown in the 
following. The value of the security.oauth2.resource.user-info-uri property carries 
the endpoint of the OAuth 2.0 security token service, which is used to validate tokens.
security.oauth2.resource.user-info-uri=https://localhost:8443/user
Chapter 5  edge SeCurity with an api gateway 
115
The preceding property points to an HTTPs endpoint on the authorization server. 
To support the HTTPS connection between the Zuul gateway and the authorization 
server, there is one more change we need to do at the Zuul gateway end. When we have 
a TLS connection between the Zuul gateway and the authorization server, the Zuul 
gateway has to trust the certificate authority associated with the public certificate of 
the authorization server. Since we are using self-signed certificate, we need to export 
authorization server’s public certificate and import it to Zuul gateway’s keystore. 
Let’s use the following keytool command from ch05/sample03 directory to export 
authorization server’s public certificate and copy it to ch05/sample02 directory. If you 
are using keystores from the samples git repo, then you may skip the following two 
keytool commands.
\> keytool -export -alias spring -keystore keystore.jks -storePass 
springboot -file sts.crt
Certificate stored in file 
\> cp sts.crt ../sample02
Let’s use the following keytool command from ch05/sample02 directory to import 
security token service’s public certificate to Zuul gateway’s keystore.
\> keytool -import -alias sts -keystore keystore.jks -storePass springboot 
-file sts.crt
Trust this certificate? [no]:yes
Certificate was added to keystore
We also need to uncomment the following two dependencies in the sample02/pom.
xml file. These dependencies do the autowiring between Spring Boot components to 
enforce OAuth 2.0 token validation at the Zuul gateway.
 org.springframework.security
 spring-security-jwt
 org.springframework.security.oauth
 spring-security-oauth2
Chapter 5  edge SeCurity with an api gateway 
116
Finally, we need to uncomment the @EnableResourceServer annotation and 
the corresponding package import on the GatewayApplication (ch05/sample02/
GatewayApplication.java) class.
Let’s run the following command from the ch05/sample02 directory to start the Zuul 
API gateway. In case it is running already, you need to stop it first. Also, please make sure 
sample01 (Order service) and sample03 (STS) are still up and running.
\> mvn spring-boot:run
To test the API, which is now proxied through the Zuul API gateway and secured with 
OAuth 2.0, let’s use the following cURL. It should fail, because we do not pass an OAuth 
2.0 token.
\> curl –k https://localhost:9090/retail/order/11
Now let’s see how to invoke the API properly with a valid access token. First we need 
to talk to the security token service and get an access token. Make sure to replace the 
values of $CLIENTID, $CLIENTSECRET, $USERNAME, and $PASSWORD appropriately in the 
following command. The hard-coded values for client id and client secret used in our 
example are 10101010 and 11110000, respectively; and for username and password, we 
used peter and peter123, respectively.
\> curl -v -X POST --basic -u $CLIENTID:$CLIENTSECRET -H "Content-Type: 
application/x-www-form-urlencoded;charset=UTF-8" -k -d "grant_type=passwor
d&username=$USERNAME&password=$PASSWORD&scope=foo" https://localhost:8443/
oauth/token
{"access_token":"69ff86a8-eaa2-4490-adda-6ce0f10b9f8b","token_
type":"bearer","refresh_token":"ab3c797b-72e2-4a9a-a1c5-
c550b2775f93","expires_in":43199,"scope":"foo"}
Now let’s use the access token from the preceding response to invoke the Order 
API. Make sure to replace the value of $TOKEN with the corresponding access token 
appropriately.
\> curl -k -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/
json"   https://localhost:9090/retail/order/11
{"customer_id":"101021","order_id":"11","payment_method":{"card_type": 
"VISA","expiration":"01/22","name":"John Doe","billing_address":"201, 1st 
Chapter 5  edge SeCurity with an api gateway 
117
Street, San Jose, CA"},"items": [{"code":"101","qty":1},{"code":"103","qty"
:5}],"shipping_address":"201, 1st Street, San Jose, CA"}
 Enabling Mutual TLS Between Zuul API Gateway 
and Order Service
So far in this chapter, we have protected the communication between the cURL client 
and STS, cURL client and Zuul API gateway, and Zuul API gateway and STS over TLS. Still 
we have a weak link in our deployment (see Figure 5-3). The communication between 
the Zuul gateway and Order service is neither protected with TLS nor authentication. In 
other words, if someone can bypass the gateway, they can reach the Order server with no 
authentication. To fix this, we need to secure the communication between the gateway 
and the Order service over mutual TLS. Then, no other request can reach the Order 
service without going through the gateway. Or in other words, the Order service only 
accepts requests generated from the gateway.
Figure 5-3. The Zuul API gateway intercepts all the requests going to the Order 
API and validates OAuth 2.0 access tokens against the authorization server (STS)
Chapter 5  edge SeCurity with an api gateway 
118
To enable mutual TLS between the gateway and the Order service, first we need to 
create a public/private key pair. The following command uses keytool that comes with 
the default Java distribution to generate a key pair and stores it in keystore.jks file. 
Chapter 3 explains in detail what each parameter in the following command means. 
If you are using keystores from the samples git repo, then you may skip the following 
keytool commands.
\> keytool -genkey -alias spring -keyalg RSA -keysize 4096 -validity 
3650 -dname "CN=order,OU=bar,O=zee,L=sjc,S=ca,C=us" -keypass springboot 
-keystore keystore.jks -storeType jks -storepass springboot
To enable mutual TLS for the Order service, copy the keystore file (keystore.
jks), which we created earlier, to the home directory of the Order service (e.g.,  ch05/
sample01/) and add the following to the [SAMPLE_HOME]/src/main/resources/
application.properties file. The samples that you download from the samples git 
repository already have these values (and you only need to uncomment them), and we 
are using springboot as the password for both the keystore and the private key. The 
server.ssl.client-auth parameter is used to enforce mutual TLS at the Order service.
server.ssl.key-store: keystore.jks
server.ssl.key-store-password: springboot
server.ssl.keyAlias: spring
server.ssl.client-auth:need
There are two more changes we need to do at the Order service end. When we 
enforce mutual TLS at the Order service, the Zuul gateway (which acts as a client to the 
Order service) has to authenticate itself with an X.509 certificate—and the Order service 
must trust the certificate authority associated with Zuul gateway’s X.509 certificate. Since 
we are using self-signed certificate, we need to export Zuul gateway’s public certificate 
and import it to the Order service’s keystore. Let’s use the following keytool command 
from ch05/sample02 directory to export Zuul gateway’s public certificate and copy it to 
ch05/sample01 directory.
\> keytool -export -alias spring -keystore keystore.jks -storePass 
springboot -file zuul.crt
Certificate stored in file 
\> cp zuul.crt ../sample01
Chapter 5  edge SeCurity with an api gateway 
119
Let’s use the following keytool command from ch05/sample01 directory to import 
Zuul gateway’s public certificate to Order service’s keystore.
\> keytool -import -alias zuul -keystore keystore.jks -storePass springboot 
-file zuul.crt
Trust this certificate? [no]:yes
Certificate was added to keystore
Finally, when we have a TLS connection between the Zuul gateway and the Order 
service, the Zuul gateway has to trust the certificate authority associated with the public 
certificate of the Order service. Even though we do not enable mutual TLS between these 
two parties, we still need to satisfy this requirement to enable just TLS. Since we are using 
self-signed certificate, we need to export Order service’s public certificate and import it to 
Zuul gateway’s keystore. Let’s use the following keytool command from ch05/sample01 
directory to export Order service’s public certificate and copy it to ch05/sample02 directory.
\> keytool -export -alias spring -keystore keystore.jks -storePass 
springboot -file order.crt
Certificate stored in file 
\> cp order.crt ../sample02
Let’s use the following keytool command from ch05/sample02 directory to import 
Order service’s public certificate to Zuul gateway’s keystore.
\> keytool -import -alias order -keystore keystore.jks -storePass 
springboot -file order.crt
Trust this certificate? [no]:yes
Certificate was added to keystore
To validate that TLS works fine with the Order service, use the following command 
from ch05/sample01/ directory to spin up the Order service and notice the line, which 
prints the HTTPS port. If you already have the Order service running from the previous 
exercise, please shut it down first.
\> mvn spring-boot:run
Tomcat started on port(s): 8080 (https) with context path "
Since we updated the Order service endpoint to use HTTPS instead of HTTP, we 
also need to update the Zuul gateway to use the new HTTPS endpoint. These routing 
instructions are set in the ch05/sample02/src/main/resources/application.
Chapter 5  edge SeCurity with an api gateway 
120
properties file, as shown in the following. Just update it to use HTTPS instead of 
HTTP. Also we need to uncomment the zuul.sslHostnameValidationEnabled 
property in the same file and set it to false. This is to ask Spring Boot to ignore hostname 
verification. Or in other words, now Spring Boot won’t check whether the hostname of 
the Order service matches the common name of the corresponding public certificate.
zuul.routes.retail.url=https://localhost:8080
zuul.sslHostnameValidationEnabled=false
Restart the Zuul gateway with the following command from ch05/sample02.
\> mvn spring-boot:run
Assuming you have authorization server up and running, on HTTPS port 8443, run 
the following command to test the end-to-end flow. First we need to talk to the security 
token service and get an access token. Make sure to replace the values of $CLIENTID, 
$CLIENTSECRET, $USERNAME, and $PASSWORD appropriately in the following command. 
The hard-coded values for client id and client secret used in our example are 10101010 
and 11110000, respectively; and for username and password, we used peter and 
peter123, respectively.
\> curl -v -X POST --basic -u $CLIENTID:$CLIENTSECRET -H "Content-Type: 
application/x-www-form-urlencoded;charset=UTF-8" -k -d "grant_type=passwor
d&username=$USERNAME&password=$PASSWORD&scope=foo" https://localhost:8443/
oauth/token
{"access_token":"69ff86a8-eaa2-4490-adda-6ce0f10b9f8b","token_
type":"bearer","refresh_token":"ab3c797b-72e2-4a9a-a1c5-
c550b2775f93","expires_in":43199,"scope":"foo"}
Now let’s use the access token from the preceding response to invoke the Order 
API. Make sure to replace the value of $TOKEN with the corresponding access token 
appropriately.
\> curl -k -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/
json"   https://localhost:9090/retail/order/11
{"customer_id":"101021","order_id":"11","payment_method":{"card_type":"V
ISA","expiration":"01/22","name":"John Doe","billing_address":"201, 1st 
Street, San Jose, CA"},"items": [{"code":"101","qty":1},{"code":"103","qty"
:5}],"shipping_address":"201, 1st Street, San Jose, CA"}
Chapter 5  edge SeCurity with an api gateway 
121
 Securing Order API with Self-Contained  
Access Tokens
An OAuth 2.0 bearer token can be a reference token or self-contained token. A reference 
token is an arbitrary string. An attacker can carry out a brute-force attack to guess 
the token. The authorization server must pick the right length and use other possible 
measures to prevent brute forcing. A self-contained access token is a JSON Web Token 
(JWT), which we discuss in Chapter 7. When the resource server gets an access token, 
which is a reference token, then to validate the token, it has to talk to the authorization 
server (or the token issuer). When the access token is a JWT, the resource server can 
validate the token by itself, by verifying the signature of the JWT. In this section, we 
discuss how to obtain a JWT access token from the authorization server and use it to 
access the Order service through the Zuul API gateway.
 Setting Up an Authorization Server to Issue JWT
In this section, we’ll see how to extend the authorization server we used in the previous 
section (ch05/sample03/) to support self-contained access tokens or JWTs. The first 
step is to create a new key pair along with a keystore. This key is used to sign the JWTs 
issued from our authorization server. The following keytool command will create a new 
keystore with a key pair.
\> keytool -genkey -alias jwtkey -keyalg RSA -keysize 2048 -dname 
"CN=localhost" -keypass springboot -keystore jwt.jks -storepass springboot
The preceding command creates a keystore with the name jwt.jks, protected 
with the password springboot. We need to copy this keystore to sample03/src/main/
resources/. Now to generate self-contained access tokens, we need to set the values of the 
following properties in sample03/src/main/resources/application.properties file.
spring.security.oauth.jwt: true
spring.security.oauth.jwt.keystore.password: springboot
spring.security.oauth.jwt.keystore.alias: jwtkey
spring.security.oauth.jwt.keystore.name: jwt.jks
Chapter 5  edge SeCurity with an api gateway 