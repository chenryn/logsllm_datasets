提交修收到（.0
版本。
BeatBoxPro1.x
本章要点
标记是你的代
主干是正在进行开发工作的地
分支是你代码的副本，你可以
码的快照。你
方：它应该总是代表你的软件
对副本做修改，而不影响主干
应该总是把
的最新版本。
中的代码，分支通常从标记的
标记是在存储目录中附在特定
版本开始。
修改提交到分
修改项上的名称，以便你今后
标记是静态的
你不要向标
支，而不是标
轻松地检索修订。
记提交修改，分支是你不想放
记
有时候，你可能需要把同样的
在主干中的修改（或使代码不
修改提交到分支和主干，如果
受主干中的修改的影响）。
修改被用于二者的话。
目前位置
207
---
## Page 244
与多个分支共舞
这次，修改真正的1.0版本.….·.
当我们每件事情都在主干中时，我们错误地试图提交旧的、打过补丁的代
码到最新的代码之中。虽然，我们现在为1.0版本做了标记，并且作业在一
个分支上。让我们在那个分支上，修改1.0版本。
1
首先，调出BeatBox代码的version-1分支：
注象，在这置我们不需要指定修行版。
分美通（.0版基代码的制本。
tfi1e:///c:/Us
这收，我们
bEa
将把包效进
Beetfox V
BeatBoxVi\src
景。
BeatBoxV1\arc\headfirst
BeatBoxV1\src\headfirat\sd
这些修们号不再有同等的重要性，因为我们
使用标记来参照修行，两不遇传们号。
2
现在开始修补Bob发现的漏润
这次，我们工行于来自
im-（分支的代码
BeatBox.java
主干
version-1
我们工作在这置.
wsi=1的分支上
208
第6章
---
## Page 245
版本控制
提交回我们的修改，然而，这次没有冲突：
在分支上
Sending
hfsd>
现在我们有两个代码库
通过这些修改，实际上，我们得到两组不同的代码：1.x分支，这里是
对版本1.0的修改，主干，这里有所有新开发的代码。
在存储目录中的主干日录还有处在开发中的最新的和伟大的代码
（并且Bob也采用了安全修复）。
在我们的标记目录中，我们有version-1.0标记，因此，我们可以
在任何时候拿出1.0版本。
在分支目录中，我们有version-1分支。分支目录中有无需任何新
不需与记：当你置布带有这些称
的开发工作的关键补丁。
了物1.1版本时，在标记目最中
创建wisix-1.1格记，这得.年
以后需是时，你可以蓝提在都个
版本技到。
目前位置
209
---
## Page 246
分支、标记和次要版本
没有愚囊的问题
问：
我已听说，分支是不好的想
习惯使用Subversion，它通常不是一个
工具分别对毒个文件确定版本号（如
法，并且应该避免。为什么我们要谈
主要的问题，并且你总是能够在一费
最有名的版本控制工具，CVS，它是
特殊的情况下，将修改该复到标记所
示的状态。
Subversion的前辈）。那就表示，在
到它们呢？
特定的较态下，你要得到一个项目的
答：
问：
副本，你需要如道每个文件的版本号。
分支不总是坏的事情：在软
件开发中，它们有重要的地位。但它
我们一直使用文件：///
这实在不太实用、因此把标记变得更
c:/..作为我们的存储目录。假如多
加关键。
还要谈到它，
问：
为什么要将1.0版本的代码
问：
标记还能做其他什么用？
在这里，你有很
放在分支，而不是将其留在主干中，
多事情可以做，首先，Subversion完全
支持与web服务器的集成，这规让你指
而将新的开发工作放在分支里？
标记对跟踪发布的软件
定存储目录的位置，如htp://或htps:/
答：
版本是非需有用的，但当款件进
这时事情真的很有地，例如，用htps，
这样可能行，但这个方法事
入测试或QA时，你可以用它跟踪
来的问题是当开发工作继续时，你终
你能与存储目录建立加密的连接。通
岁本,想→怒alphal,alpha2,
过任何web方式，你可以在非需大型
完会理在一堆分支里，而主干最后就
betal, ReleaseCandidate1,
变成最老的代码，所有的新工作反而
ReleaseCandidate2, External-
的网络上共事你的存储目录，而不用
深理在分支里，因此，针对下个版本
Testing等，在每个开发桶环的结束，
担心映射典享驱动器，这需要做一点
配置工作，但从开发人员的角度来看。
你有一个分支，再下个版本，你就有
为项目做好标记是好的做法。
确实是非常好的，如果你不能使用
另外个分支…
问：之前，你说不要提交修改给
hbttp访问你的存储目录，Subversion支
为较旧的款件顾本使用分支，你运渐
会停止操作速些分支，
持通过SSH进行基于隧道技术的存储
（你认为微款
标记。指的是什么？同时你怎样防止
目录访网，调出Subversion（http://
会继续为Wond95打补丁吗？）
其他人这样做？
svnbook.red-bean.com/）的文格资料
问：
答
可以获得更多如何设置的资料。
为了通过Subversion创建标
：
向标记提交修改是
记和分支，我们使用Copy命令，通常
Subversion独有的问题：其他的版本
问：
当我执行log命令时，在所有
是这样吗？
控制工具直截了当地禁止向标记提交
修改。像创建分支一样，Subversion用
的地方我看到相同的修订号。那是什
么？
好的，对Subversion是这样
Copy命令创建标记，因此，从技术上
的。那是因为Subversion的复制被设计
讲，你能称记提交修改，就如网在存
利用不同的瓶本控制工具
成非常的“廉价”，这只是表示，指
储目录中的其他地方一样。然而，这
一个复制没有产生很多开销。当你创
见乎总是一个坏的怒法。你微标记的
微不同的版本编号。你所看到的是
Subversion如何对修订进行跟踪。无论
建一个复制时，Subversion实际上只标
理由是能取回代码，并且所取回的代
何时你提交文件时，Subversion在整个
记了你复制来源的修订版，接着，保
码像你做标记的时候一样。如果你把
项目申都使用一个修订号，基本上讲，
存这些相关的修改，其他的版本控制
修改提交到标记之中。这样与最初标
修订就是告诉大家“整个项目在第九
工具的做法则不网。例如，CVS特别
记的代码就不一样了。
提供了tag命令。而分支导致了文件
Subversion有在标记目录上加上权限控
次修订时就是这样”
、这表示，如果
你想在某一点上抵取项目时，只需要
的“真实”制本、说明它们要占用很
制的方法，这样你能防止其他人提文
如通的就是修订号。其他的版本控制
多的时间和资源。
修改到标记中。热而，如果一旦人们
210
毫9案
---
## Page 247
版本控制
童备练习
完成了1.0版本的安全漏润的修复，我们回到我们原有的使用情
节上来，Bob需要为BeatBox的应用实现两个不同的存储机制：
个是用户使用Mac操作系统，另一个是用户使用Windows系统。
由于它们是完全不同的平台，这里Bob该做什么？
Bob该做什么？
为什么？
目前位置
211
---
## Page 248
避免不必要的分支
何时不要分支…
你是说Bob应该对他的代码做分支，以支持两种不同的功能吗？从技术的角度看，现代版
本的控制工具使分支的代价变得比较小。从人力资源的角度看，问题在于存在很多隐性的
成本，每个分支是独立的代码库（Separate Code Base），需要为代码库做维护、测试以及
编制文档等。
例如，还记得我们1对BeatBox1.0版本的关键的安全修补吗？该修补是不是也要被应用到主
干上，好让软件的20版本不会有相同的安全问题？主干代码已被大量的修改，修补不能直
接被复制，并且我们需要去采用另外的方法修补它吗？
同样的道理，应用分支去支持两种不同的平台。新的功能可能要在两个分支中实施。然
而，当你完成了新的版本，你微什么？标记两个分支？为两个分支再做分支？很快容易混
淆。这里有些经验有助于你理解何时不要分支：
该做分支的情况
口
你已经发布了需要在主开发循环以外进行维护的软件版本。
口
你准备试图对代码做顺覆性的修改，这些代码你可能要丢弃，并且
在你这样做时，你不想影响你团队中的其他成员。
不该做分支的情况
口
你可能通过把代码分解到不同的文件或代码库来完成你的目标，这
些文件或代码库可以被适当地建在不同的平台上。
口
很多开发人员不能在主干中编译他们的代码，所以你试图给他们每
个人提供沙箱（Sandbox），让他们去工作。
有其他的方式善院业人
们破怀到人的构建，我
们将在以后的量节中训
良好分支之道
只有绝对必要时才做分支，每个分支都可能是需要去维
护、测试，发布以及跟进的一大段代码。假如你把分支
作为不经常发生的主要决定，你就拿捏好了。
212
嘉9
---
## Page 249
版本控制
我们修补VersionI.….….
安全强润的修补工作做得很好！
你们这些家伙基至能在我们发布之
前，修补它！
版本（.1被发布，群国并溢剪
安金通调了.
...….Bob完成了2.0版本（他是这样说的）
伙计们，我所有的代码都被请入了，但
不能工作。应族编净这整代码，但血票你础
到构建的闪题要让我知莲，可能我善失了某个文
伊。
事情
我们在本章已花了很长篇幅来讲版本控制，但还是有一些是
版本控制修补不了的事情即使Bob使用版本控制去管理他
的代码，你能列举他仍然要碰到的麻烦吗？
PD
目前位置
213
---
## Page 250
版本控制在做什么
?
创建存储目录，使代码保存在单一地方已方便备份和恢复。
让多个开发人员调出代码的副本，让他们像一个团队一样能有效的
工作。
让多个开发人员把修改后的代码导入到存储目录中，并且分发到团
队的其他成员。
记录谁修改了什么，何时微的修改，为何要做修改。
为代码做分支或标记，以便我们回头参照及修改某个时点以后的代
码.
将原本不应该发生的修改倒回去。
版本控制不能做什么
确保你的代码能够编译。
测试代码。
帮助你思考。
确保你的代码可读且编写良好。
这业相当重墓…看来我们的工具运还差
D
214
车9
---
## Page 251
版本控制
版本控制不能确保你编写的代码
能运行.
如累有一个工具能保证我在客户面
前出五之前能编诊和工作，那该有多
好？但我这是在做梦…
PDG
目前位置
215
---
## Page 252
软件开发工具箱
喜9岁
软件开发的宗旨就是开发和交付伟大的软件。在本章中，
你学到了几项保持跟踪的技术。完整的工具列表见附录i。
本章要点
开发技术
备份你的版本控制存储目
使用版本控制工具以跟踪软
录！该存储目录应该有全
件的修改并分发给团队的成
这莹是保在本
部的代码和修改的历史。
员。
章学到的关键
当你提交代码时，总是使
使用标记去跟踪你的项目的
用完整的提交信息
主要里程碑（开发储环的结
和你的团队以后会很感谢
束、款件的发布、漏调的修
这些完整的提交信息的。
复等）。
业技术骨后的
充分地利用标记。如果
使用分支去维护代码的独立
一些原则。