case of intermittent adversaries, the relays may be switched
on-event whenever an intruder frame is detected. Note that
a single intruder frame is sufﬁcient to detect the intrusion
and on-event triggering will make the relays converge to the
location of the adversary while all the existing trafﬁc is per-
fectly redirected to the left and right sides of the network.
For each receive event on the left side of the network, i.e.,
RxLeft, or on the right side of the network, i.e., RxRight, the
algorithm ﬁlters the frame and sets the intrusion ﬂag, i.e., ileft
or iright, then redirects the frame to the left or right accord-
ingly. When time T elapses, the relays at position index are
reconnected and the algorithm ﬁrst checks if intrusions were
detected on both sides of the network. If this is the case, then
the algorithm returns −1 since the intruder cannot be isolated
to the left or to the right of the network. Otherwise if the
intruder is on the left, i.e., ileft = true, then the right index is
modiﬁed, i.e., r = (cid:98)(l + r)/2(cid:99), else if the intruder is on the
right, i.e., iright = true, then the left index is modiﬁed, i.e.,
l = (cid:98)(l + r)/2(cid:99). When the loop ends, the algorithm returns
the index index of the relay next to the intruder.
1https://github.com/aappleby/smhasher/blob/master/src/MurmurHash2.cpp
l = 1, r = n
while (r− l) (cid:54)= 1 do
index = (cid:98)(l + r)/2(cid:99)
Disconnect(index)
ileft ← false
iright ← false
tcur ← GetTime()
repeat
if RxLeft then
Algorithm 1 Binary localization algorithm (single relay)
1: procedure DETECT NODE
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
end while
27:
return index
28: end procedure
frame ← Receive(LChannel)
frame(cid:48) ← Filter(frame)
if frame(cid:48) (cid:54)= frame then ileft ← true
elseBufferedSend(frame(cid:48),RChannel)
frame ← Receive(RChannel)
frame(cid:48) ← Filter(frame)
if frame(cid:48) (cid:54)= frame then iright ← true
elseBufferedSend(frame(cid:48),LChannel)
cur ← GetTime()
t(cid:48)
cur − tcur) > T
until (t(cid:48)
Reconnect(index)
if ileft = true∧ iright = true then return -1
if ileft = true then r = (cid:98)(l + r)/2(cid:99)
if iright = true then l = (cid:98)(l + r)/2(cid:99)
if RxRight then
4.5 Trafﬁc redirection: bridged and load-
balanced retransmission
An easy to address situation is that when the adversary is lo-
cated alone on a segment of the network. If this is the case, the
segment can be cut-off from the network and trafﬁc bridged
from one side to the other. But if this is not the case, and
the adversary cannot be fully isolated, then a load-balanced
retransmission that alternatively switches the adversary from
the left to the right is needed - we discuss this mechanism in
what follows.
while true do
Algorithm 2 Single relay, load balancing
1: procedure LOAD-BALANCED RETRANSMISSION
2:
3:
4:
5:
end while
6: end procedure
SwitchRelays()
FilterRedirectTrafﬁc()
if (t/Trelay)mod2 (cid:54)= (tlast/Trelay)mod2 then
tlast ← t
if (t/Trelay)mod2 = 1 then
Algorithm 3 Switch Relays
1: procedure SWITCH RELAYS
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: end procedure
ileft ← true
iright ← false
Disconnect(index)
Reconnect(index + 1)
iright ← true
ileft ← false
Reconnect(index)
Disconnect(index + 1)
else
USENIX Association
30th USENIX Security Symposium    4265
if RxLeft then
Algorithm 4 Filter and redirect trafﬁc (buffered)
1: procedure FILTER TRAFFIC
2:
3:
4:
5:
6:
7:
8:
9:
10: end procedure
frame ← Receive(LChannel)
if ileft then frame ← Filter(frame)
BufferedSend(frame,RChannel)
frame ← Receive(RChannel)
if iright then frame ← Filter(frame)
BufferedSend(frame,LChannel)
if RxRight then
Load-balanced retransmission. Algorithm 2 provides the
main loop of the trafﬁc ﬁltering algorithm with load-balancing
capabilities. The intruder is isolated either to the left or to
the right side of the network. This is done in step 3 of the
algorithm which switches the relays to the left or to the right
of the adversary location. The recorded trafﬁc is then ﬁltered
and replayed on the other part of the network in step 4. By
switching the adversary from one side of the network to an-
other, we assure a load-balanced network and the effects of
a DoS attack will be halved on each side since the adversary
has access only to half of the bus each time. The procedure for
switching relays is depicted in Algorithm 3. This algorithm
simply switches from the left to the right side of the node
index at time intervals Trelay. The steps for ﬁltering and re-
transmission are given in Algorithm 4. The algorithm simply
checks the left (line 2) and right (line 6) sides if there is a
new incoming frame. If this is the case, the frame is recorded
(lines 3 and 7), ﬁltered if the intruder is isolated in the corre-
sponding side (lines 4 and 8) and then replayed on the other
side of the bus (lines 5 and 9). The transmission is buffered
since the bus may be busy on the side where retransmission is
attempted. More discussions on the size of the buffer follow
in the experimental section. In case when the adversary per-
forms a more aggressive DoS attack, there will be few or no
legitimate frames at all on the side of the adversary since the
bus is ﬂooded by illegitimate frames. Moreover, legitimate
frames from the other side cannot be redirected since there is
no room left on the bus. For this case, buffered retransmission
also helps since frames are kept in the buffer and sent when
the adversary is isolated to the other side of the network.
We also provide a graphic depiction of the load-balancing
retransmission in Figure 6. The depiction is provided for three
consecutive steps with the right-side network (RSN) and left-
side network (LSN) successively off and isolated from the
adversary (the duration of a step is of 100ms similar to the
experiments that follow). Incoming trafﬁc from the side af-
fected by the adversary is ﬁltered. The ﬁltering box is shaded
when incoming trafﬁc is free of adversarial interventions, i.e.,
the adversary is isolated on the other side of the network and
thus the ﬁlter is inactive. We also depict the arrival rate of
frames from the right and left side, i.e., λleft and λright, as well
as the arrival rate for adversarial frames, i.e., λAdv, as well as
the arrival rate after ﬁltering, i.e., λϕ
left and λϕ
right.
Figure 6: Schematic for three consecutive steps of the load-
balanced retransmission
5 Setup and implementation
We now discuss implementation details regarding the Bus
Guardian and give details on the recorded in-vehicle trafﬁc
that we used for building a realistic testbed.
Implementation of the Bus Guardian
5.1
Figure 7 shows the experimental setup of our work. The Bus
Guardian with the role of intrusion detection, localization and
prevention consists of an Inﬁneon AURIX TC297 develop-
ment board. In order to monitor the bus trafﬁc we used two
CAN transceivers connected to the microcontroller’s pins,
one which was already available on the board and an external
MCP2551 transceiver. Both transceivers are provided with
a 120Ω bus termination. For implementing a CAN network
with multiple nodes we added 3 MCP2551 CAN transceivers
controlled by an Inﬁneon AURIX TC277 development board
representing nodes 2 to 4 from the setup presented in Figure 3.
Nodes 1 and 5 from the same ﬁgure are connected to a Vector
Breakout Box D62Y9 which is controlled from the Vector
CANoe 8.5 environment running on a PC. This environment
was used to provide the legitimate bus trafﬁc from our experi-
ments (which was collected from a real-world vehicle), and
each node was set to output half of the original vehicle trace
to the left and half to the right.
The relays used in our experiments are JQC-3F-5VDC re-
lays which require a supply voltage of 5V, have three different
contacts and can connect one of two different contacts at a
time to the third contact based on their enabling pin status.
In our setup there are two PCBs with 4 relays and each one
of the 8 relays are controlled by an individual pin of the Bus
Guardian connected to its enabling pin through a jumper wire.
In order to provide the required voltage to both of the relay
boards and the external CAN transceivers we used a power
supply connected to the breadboard with an input voltage of
12V and an output voltage of 5V. In addition to the supply
and ground lines from the power supply, the breadboard con-
tains all the connections done with jumper wires between the
4266    30th USENIX Security Symposium
USENIX Association
Figure 8: Collected in-vehicle trafﬁc: variations in the arrival
time for an ID at 20ms (left) and one at 40ms (right)
Figure 7: The bus guardian implemented on the Inﬁneon
TC297 and the relay blocks from our experimental model
CAN nodes and the relays required to disconnect the CAN
lines linking any neighboring nodes and to add 120Ω between
newly connected CAN-High and CAN-Low lines using the
relay switches.
5.2 Collected in-vehicle trafﬁc for the experi-
ments
To create a realistic test-bed, we use real-world CAN bus
trafﬁc recorded in a high-end vehicle. The trafﬁc is replayed
on the bus in our experiments with the help of the CANoe
environment via a CANCase device which assures accurate
reproduction of the in-vehicle network trafﬁc. The log ﬁle
that we use accounts for 90 identiﬁers with cycles from 10ms
up to 2s and a busload of around 40% on the 500Kbps CAN.
Most of the identiﬁers however, have a periodicity between
10ms and 500ms. Figure 8 shows the arrival time for two IDs,
one with a 20ms cycle (left) and the other with 40ms (right).
The arrival time is stable, with very small variations (generally
under 500µs) for each of the IDs. We also consider to look at
the delays between consecutive frames, i.e., the inter-frame
space (IFS). The IFS in the trace is critical since the Bus
Guardian should parse frames by running the Bloom ﬁlter
and distinguish between genuine and adversarial frames then
retransmits frames to the other side of the bus.
For a 500Kbps baud rate the time for sending a frame on
the bus varies roughly between 90µs to 270µs depending on
the size of the data-ﬁeld and the number of stufﬁng bits. The
Bus Guardian must cope with these delays when classifying
frames. For the existing bus trafﬁc, the situation is more op-
timistic: by analyzing the trace only 0.5% of the IDs arrive
with an inter-frame space lower than 200µs. This is expected
at a bus load smaller than 50% (the bus is free at least half
of the time). Figure 9 shows the inter-frame time for the ﬁrst
2000 frames (left), only a few frames arrive with an inter-
frame space lower than 200µs. On the right side of Figure 9
Figure 9: Collected in-vehicle trafﬁc: IFS for the ﬁrst 2000
frames (left) and same frames in the 0-200µs interval (right)
we depict the inter-arrival time for the ﬁrst 2000 frames with
an inter-frame space lower than 200µs, while this happens
only rarely, and even if this is the case most of the frames
leave a space of 100µs. The ﬁlters that we use do cope with
these delays in the order of hundred micro-seconds. Nonethe-
less, trafﬁc redirection must also work under these constraints
which are not easy to meet and we are later forced to use a
buffered retransmission to avoid losing frames.
6 Framework evaluation
In this section we follow two research directions. One of them
is to determine how trafﬁc ﬁltering and redirection performs
under speciﬁc attacks, such as fuzzing and DoS, the other
is to determine how frame arrival time is affected by the
defense mechanism. Notably, there are little side-effects and
no frame loss due to the relay action. We also provide a more