32
64
128
4
8
16
32
64
128
M 218 252 352 462 631 916
τ
20
65
44
27
33
23
456 533 781 1024 1662 2540
129
53
87
65
44
38
Table 1: Sample values of M , n, and τ to achieve statistical security ρ ∈ {128, 256}. M is the
number of executions simulated by the prover; n is number of parties in the MPC protocol; τ is
the number of executions of the online phase of the MPC protocol.
of each node with the output of a pseudorandom generator applied to the node’s label. The
{seedc,i}i∈[n] will be the labels of the n leaves of the tree. To reveal {seedc,i}i(cid:54)=p, it suﬃces to reveal
the labels on the siblings of the path from the root of the tree to leaf p. Those labels allow the
veriﬁer to reconstruct {seedc,i}i(cid:54)=p while still hiding seedc,p. Applying this optimization reduces the
communication complexity to κ · log n for revealing the seeds used by the n − 1 opened parties.
We can, in fact, apply the same idea to the master seeds {seed∗
j}m
j=1 used for the diﬀerent
emulations of the preprocessing phase; this reduces the communication required to reveal all-but-
one of those seeds in Round 3 from (m − 1) · κ bits to κ · log m bits. Looking ahead to the
next optimization, we remark that we are not limited to revealing all-but-one of the leaf labels;
more generally, the scheme just described supports revealing all-but-τ of the leaf labels using
communication at most κ · τ log m
Beating parallel repetition. The basic protocol analyzed in the previous section has soundness
error max{ 1
log min{m,n} independent,
parallel repetitions of the basic protocol. This would require τ m emulations of the preprocessing
phase, followed by τ executions of an n-party protocol.
n}; we can achieve soundness error 2−ρ by running τ =
τ bits (cf. [39]).
m , 1
ρ
We can do better by performing a more general cut-and-choose over the emulations of the
preprocessing phase. That is, the prover now runs M emulations of the preprocessing phase and
the veriﬁer selects M − τ of those to check; the remaining τ executions of the preprocessing phase
are then used to run τ (independent) instances of Π. Each of those instances of Π is then veriﬁed
by revealing the view of all-but-one party as before. If a cheating prover generates k ≥ M − τ
correct emulations of the preprocessing phase and M − k incorrect emulations, then its probability
; conditioned on
passing the ﬁrst phase, its probability of passing the second phase is at most 1/nk−M +τ . The
soundness error is therefore
of successfully passing the ﬁrst phase of the proof is at most (cid:0) k
(cid:41)
(cid:0) M
(cid:1)−1
(cid:40)
M−τ
M−τ
(cid:1)
·
(cid:0) k
(cid:1)
(cid:1)
M−τ
· nk−M +τ
(cid:0) M
M−τ
(M, n, τ ) def= max
M−τ≤k≤M
.
(1)
In Table 1 we show some values of M, n, and τ that give soundness 2−128 or 2−256.
(In each
case, for ﬁxed choice of n we ﬁnd M, τ with minimum τ for which (M, n, τ ) is below the desired
soundness error.) For an interactive protocol, soundness 2−40 may be suﬃcient; however, for our
later applications to non-interactive protocols better soundness is needed.
10
A 3-round HVZK proof
Inputs: Both parties have a circuit C; the prover also holds w with C(w) = 1. Values M, n, τ
are parameters of the protocol.
Round 1 For each j ∈ [M ], the prover does:
1. Choose uniform seed∗
|C|
j ∈ {0, 1}κ and use it to generate values seedj,1, rj,1,
. . .,
as described in the text. For i = 1, . . . , n−1,
seedj,n, rj,n. Also compute auxj ∈ {0, 1}
let statej,i := seedj,i; let statej,n := seedj,n(cid:107)auxj.
2. For i ∈ [n], compute comj,i := Com(statej,i; rj,i).
3. The prover simulates the online phase of the n-party protocol Π (as described in
the text) using {statej,i}i, beginning by computing the masked inputs {ˆzj,α} (based
on w and the {λj,α} deﬁned by the preprocessing). Let msgsj,i denote the messages
broadcast by Si in this protocol execution.
4. Let hj := H(comj,1, . . . , comj,n) and h(cid:48)
rj ∈ {0, 1}κ is uniform.
Compute h := H(h1, . . . , hM ) and h(cid:48) := H(h(cid:48)
veriﬁer.
j := H({ˆzj,α}, msgsj,1, . . . , msgsj,n, rj), where
M ) and send h∗ := H(h, h(cid:48)) to the
1, . . . , h(cid:48)
Round 2 The veriﬁer chooses a uniform τ -sized set C ⊂ [M ] and P = {pj}j∈C where each
Round 3 For each j ∈ [M ] \ C, the prover sends seed∗
pj ∈ [n] is uniform. Send (C,P) to the prover.
j to the veriﬁer.
For each j ∈ C, the prover sends {statej,i, rj,i}i(cid:54)=pj , comj,pj , {ˆzj,α}, rj, and msgsj,pj to the
veriﬁer.
j , h(cid:48)
Veriﬁcation The veriﬁer accepts iﬀ all the following checks succeed:
then computes h := H(h1, . . . , hM ).
computes hj := H(comj,1, . . . , comj,n).
1. For every j ∈ C, i (cid:54)= pj, the veriﬁer uses statej,i and rj,i to compute comj,i. It then
2. For j ∈ [M ] \ C, the veriﬁer uses seed∗
3. For each j ∈ C, the veriﬁer simulates an execution of Π among the {Si}i(cid:54)=pj
using {statej,i}i(cid:54)=pj , masked input-wire values {ˆzj,α}, and msgsj,pj . This yields
{msgsi}i(cid:54)=pj and an output bit b. The veriﬁer checks that b ?= 1 and computes
j := H({ˆzj,α}, msgsj,1, . . . , msgsj,n, rj) as well as h(cid:48) := H(h(cid:48)
h(cid:48)
j to compute hj as an honest prover would. It
1, . . . , h(cid:48)
m).
4. The veriﬁer checks that H(h, h(cid:48)) ?= h∗.
Figure 2: Our 3-round HVZK proof.
11
2.4 A 3-Round Protocol
For applications where an interactive proof suﬃces, the 5-round protocol described previously can
be used. If a non-interactive proof is needed, however, then it is easier to start with a 3-round
protocol.
(Although it is possible to apply the Fiat-Shamir transform to any constant-round,
public-coin, HVZK protocol [1], we obtain better eﬃciency for a given security level by starting
with a 3-round protocol.) We present a 3-round version of our proof here.
The high-level idea of our 3-round variant is to have the prover now simulate the online phase of
Π for every emulation of the preprocessing phase, and then commit to all the resulting executions.
The veriﬁer then challenges the prover to open some of the preprocessing phases, as well as all-
but-one party from each of the unopened preprocessing phases, as before. The modiﬁed protocol
is shown in Figure 2. In that ﬁgure, we also incorporate the cut-and-choose optimization discussed
in the previous section. A proof of the following theorem relies on the same ideas as in the proof
of Theorem 2.1, and so is omitted.
Theorem 2.2. Let H be collision-resistant, and let Com be a secure commitment scheme. Then
the protocol in Figure 2 is an honest-veriﬁer ZK proof of knowledge with soundness/knowledge
error (M, n, τ ).
As mentioned in the previous section, instead of computing h(cid:48) := H(h(cid:48)
1, . . . , h(cid:48)
can compute h(cid:48) as the root of a Merkle tree with the {h(cid:48)
M ) the prover
j} as leaves. Then, in the third round it
suﬃces for the prover to send at most τ log M
j}j /∈C.
Applying this optimization, assuming commitment is done using a random oracle as described in
the next section, and assuming the output length of H is 2κ bits, the communication complexity
of our protocol is at most
τ values instead of sending the M − τ values {h(cid:48)
2κ + τ · log
M
τ · 3κ + τ · (κ log n + 2|C| + |w| + 3κ)
bits.
3 Removing Interaction
In this section we describe how our 3-round protocol can be converted into a general NIZKPoK
as well as a signature scheme. We also report on implementations of the resulting schemes. We
implemented our protocol in C++ and will make the code available as open-source. All experiments
(here and in Section 4) were carried out using a single core of an Intel Xeon E5-2666v3 CPU running
at 2.9 GHz.
3.1 An NIZKPoK
We can apply the Fiat-Shamir transform [23] to our 3-round protocol to obtain a non-interactive
ZKPoK. In more detail, in this modiﬁed proof system the prover will compute the ﬁrst-round
message as before, and then derive a challenge by hashing the ﬁrst message using a hash function
G modeled as a random oracle. The proof then consists of the ﬁrst-round message plus the response
to that challenge; it can be veriﬁed in the standard way.
12
Circuit size:
1,000
ttotal
tonline
|σ|
37 KB 128 ms 10 ms
39 KB 51 ms
7 ms
7 ms
44 KB 28 ms
50 KB 16 ms
4 ms
n = 64
n = 32
n = 16
n = 8
100,000
ttotal
tonline
|σ|
10,000
ttotal
tonline
|σ|
136 KB 851 ms 220 ms
159 KB 420 ms 149 ms
190 KB 250 ms 105 ms
246KB 190 ms 87 ms