请查阅https://technologyconversations.
4.2开发环境搭建59
---
## Page 75
60第4章使用Vagrant 和Docker搭建开发环境
components/tcbooks/demo/index.html来查看执行结果。你看到的将是我们随后
器和MongoDB。对于这两者，可以在浏览器中打开http://10.100.199.200:8088/
于展示测试运行的终端窗口。我们使用一条命令获得了持续反馈且没有进行任何
会再次执行。就个人而言，我会让屏幕一分为二，
其中的客户端源码或者client/test目录的测试。你会发现，只要一保存，测试就
这个容器内。所有这些都通过一条命令完成。前往 client/components 目录并修改
Web 服务器。所有Java 和JavaScript 依赖、运行时可执行程序、浏览器、
firefox43(93/0/0)
Test run ended with great success
waiting for connections on port 27017
done allocating datafile/data/db/local.0,size:64MB,took 0 secs
done allocating datafile /data/db/local.ns, size: 16MB, took 0 secs
creating directory/data/db/_tmp
allocating new datafile /data/db/local.ns, filling with zeroes...
MongoDB starting:pid=6port=27017 dbpath=/data/db/ 64-bit
续随意阅读直到下载完成，或者当遇到指示让你运行另一条命令。
希望你有快速的互联网连接，这样所有层被拉取下来时就不会花很长时间。请继
安装或设置。
[akka://routingSystem/user/I0-HTTP/listener-0] Bound to/0.0.0.0:8080
connection accepted from 127.0.0.1:46599 #1(1connection now open)
Firefox43
allocating new datafile /ata/db/local.0,filling with zeroes..
host=072ec2400bf0
如同上面提到的，我们不仅用这个命令执行了前端测试，还启动了Web服务
我们用Firefox执行了93个测试，运行了MongoDB，启动了 Scala和 Spray的
部分输出如下（为简洁起见，移除了时间戳）：
Tests passed
一半用于展示代码而另一半用
---
## Page 76
发布最终被部署到生产节点上（在我们的例子中是仿生产环境）。随后，当开始持
试、停止DB、运行所有前端测试，最后创建JAR文件，之后要用来创建发布，该
sudodocker-compose -f docker-compose-dev.yml run testsLocal
发布做好准备。
括后端也包括前端测试），编译 Scala，对JavaScript 和 HTML 文件进行压缩，为
说，这个文件格式非常易于编写和阅读。
用了YAML（Yet Another Markup Language）格式，对于那些熟悉Docker的人来
数保存在文件 docker-composedev.yml中的feTestsLocal目标下。这个配置文件使
让我们只是浅尝辄止。请按Ctrl+C 停止当前正在运行的容器，并运行下面的命
行Docker 命令是更好的办法。再次，我们将深入介绍留待接下来的一章。现在，
能指望所有开发人员都了解它。尽管现在搭建开发环境的方法比其他方法简单很
录被挂载为容器的卷以便我们在本地修改源代码文件并在容器内使用它们。
将安装自己的 registry 并用其保存我们的容器。另一个重要的事情是，
探索 Docker CLI。最值得留意的是，我们运行了从 Docker Hub下载的容器。之后
使用的一个Web组件的演示。
sudodocker
令：
多，
，但这个命令本身与我们正设法达到的简单性相左。通过DockerCompose来运
这一次，我们会做得更多。我们启动了MongoDB、执行后端功能和单元测
在继续之前，请先按Ctrl+C停止当前正在运行的容器并运行下面的命令。
这只是这个容器的诸多用法之一。此外，它还可以一次性运行所有测试（既包
如你所见，结果相同，但这一次命令要短很多。这个容器运行所需的全部参
以上命令的主要问题是长度。就我而言，我记不住这么长的命令，而且也不
我们无意深究刚刚运行命令中每个参数的意义，是想留到后续章节更深入地
一些本地目
4.2开发环境搭建61
---
## Page 77
仅供非商业用途或交流学习使用
62第4章木使用Vagrant和Docker搭建开发环境
标是开始部署流水线方面的工作，并从手动执行命令开始。第5章将讲解基本知
更深入地探索Docker和Docker Compose 并开始构建、测试和运行容器。我们的目
更为简单、快速地搭建开发环境；其二是让你尝试接下来的东西。很快，我们将
vagrantup dev，它将在几秒钟内启动并运行起来。
虚拟机已停止。之后可能会需要它，下一次启动它时不会花很长时间。使用
而，即便你选择删除虚拟机，也很容易从头再创建一个新的虚拟机出来。现在，
vagranthalt dev
续部署流水线方面的工作时，则会使用相同的容器。
exit
从那里开始将慢慢进入更高级的技术。
本章有两个目的：其一是向你展示，通过Vagrant和Docker，可以比传统方法
这是Vagrant 的另一个优势。可以用一条命令来启动、停止或删除虚拟机。然
现在不需要这个开发环境了，让我们停止虚拟机：
---
## Page 78
5.1启动持续部署虚拟机
非商业用途或交流学习使
松扩展并以具有回滚能力的方式安全可靠地部署到生产服务器所需要的所有步
一旦适应上面的流程，就会走得更远。我们将探索让微服务以零停机时间允许轻
行部署后测试，以确保一切正常。
库中安全可用后，就切换到另一台作为模拟生产服务器的虚拟机，运行容器并执
署测试，成功的话将构建一个容器并将其推送到Docker镜像库中。当容器在镜像
下面从创建持续交付服务器开始，并通过使用Vagrant 创建一个虚拟机来实现
Machine
这些步骤将涵盖被认为是持续部署过程的最基本流程。在接下来的章节中，
下面从持续部署流水线的一些基本步骤开始吧！我们将检出代码，运行预部
部署流水线的实现
初始阶段
第5章
---
## Page 79
第5章部署流水线的实现——初始阶段
数
vagrant ssh cd
vagrant
vagrant up命令再次启动虚拟机。
vagrant halt
exit
两个基本的操作，停止虚拟机并利用provisioners重新启动。
去的情况，仅仅因为你关了笔记本电脑却无法回到之前的状态。所以让我们学习
量，或者需要释放资源用于其他任务。我可不希望你碰到不能继续跟随本书读下
再次启动虚拟机的。你永远不会知道什么时候可能会耗尽你笔记本电脑电池的电
vagrant ssh cd
vagrant up cd
cd ms-lifecycle
服务器，第二个作为模拟生产环境。
资源。既然这样，那就让我们创建cd和 prod 虚拟机。下面把第一个作为持续部署
下容器都会是一个更好的替代品。在大多数情况下，本书中那样的做法只会浪费
应该完全跳过虚拟机，并将所有东西直接安装到服务器上。请记住，大多数情况
这一点。虽然在虚拟机中跟着做简单的后续练习很有用，但是在现实世界中，你
与 cd 虚拟机不同，prod 虚拟机不使用任何配置，因此不需要--provision 参
除此之外，
这么做之后，
如果你想停止这个虚拟机，要做的就是运行vagrant halt 命令。
本书中有几个基本的Vagrant 操作你可能需要了解。具体来说，是如何停止和
克隆GitHub仓库代码，启动cd虚拟机并进入。
upcd--provision
--provision 标志位也会确保我们需要的所有容器确实在正常运
虚拟机将会停止，
：资源可以用于做别的事情。稍后可以使用
---
## Page 80
仅供非商业用途或交流学习使用
the Code
Running
运行预部署测试、
5.2
git clone https://github.com/vfarcic/books-ms.git cd books-ms
检出代码
识迁移到CI/CD工具之一上去。
以下步骤（见图5-1）。
克隆好代码之后，应该运行所有不需要部署服务即可完成的测试。当在开发
克隆代码很简单，我们已经做过好几次：
目前我们限制自己只做手动执行，一旦适应这样的工作方式，就把学到的知
随着虚拟机的启动和运行（或者马上），让我们快速过一遍整个流程，并执行
部署流水线步骤
（9）将测试容器推送到镜像库。
（8）运行后集成测试。
（7）集成容器。
（6）将容器部署到生产服务器。
（5）将容器推送到镜像库。
（4）构建容器。
（3）编译并打包代码。
（2）运行预部署测试。
（1）检出代码。
测试
，编译并打包代码
图5-1Docker部署流水线流程
构建
部署
5.2部署流水线步骤
65
---
## Page 81
66
第5章部署流水线的实现——初始阶段
Docker是如何工作的。让我们换个节奏，并深入用于定义容器的Dockerfile中去。
Docker将从失败的镜像中继续构建。
去互联网连接，
请注意，构建Docker 容器的命令可以在出现故障时重新执行。例如，你可能会失
次构建会快很多。
驻留在scala-2.10目录中。
JAR文件。第三个命令仅用于展示目的，以便你可以确认JAR文件确实已创建并
容器。
将讨论和使用镜像库。现在，重要的是了解我们使用它来存储和检索正在构建的
特殊的语法，第一部分是本地镜像库的地址，第二部分是容器的实际名称。稍后
行了标记。容器的名称（或标签）是10.100.198.200:5000/books-ms-tests。这是
环境中不断尝试时，
我希望你从使用预制容器或由其他人创建的Dockerfile定义的角度来理解
到目前为止，所做的只是运行不同的命令，并没有去理解它们背后的含义。
请记住构建这个容器需要很长时间，因为很多东西需要首次下载，后续的每
第二个命令运行所有的预部署测试，并将 Scala代码编译为一个用于分发的
首先，
11 target/scala-2.10/
docker-compose
docker build\
run
-f docker-compose-dev.yml\
-t
-fDockerfile.test
，构建了在Dockerfile.test文件中定义的测试容器，并使用-t参数对其进
10.100.198.200:5000/books-ms-tests\
-rmtests
，这种情况下，构建容器将会失败。如果重新执行构建命令，
，已经执行了这个流程。
---
## Page 82
Building Docker Containers
构建Docker容器
于需求。很多情况下，Debian 是我的首选。除了我对基于 Debian 的Linux 发行版
护这些镜像，所以它们往往比社区创建的镜像管理得更好。具体镜像的选择取决
中的 apt）。各种基础镜像之间有什么区别？为什么我们唯独选择了Debian 镜像？
时，只下载由我们指定的操作系统特定东西的镜像，例如包管理机制（Debian例子
记住，Docker使用主机内核，因此，当指定容器要使用如Debian作为它的基础
分功能。但是，这并不是说当拉取这个容器时，整个操作系统都被下载下来。请
中，使用的是Debian（Jessie版本）。这意味着我们会拥有Debian操作系统的大部
FROM debian:jessie
Dockerfile文件以及其余的books-ms 代码。
Dockerfile的内容如下：
容器。在这之前，让我们检查包含构建Docker容器所需的所有信息的Dockerfile。
大多数情况下，官方Docker镜像是基础镜像的首选。由于Docker公司本身维
第一行指定应该将哪个镜像用作我们正在构建的容器的基础。在我们的例子
让我们逐行来看：
在https://github.com/vfarcic/books-ms GitHub仓库中，你可以找到
RUNapt-getupdate&&\
MAINTAINER Viktor Farcic"PI:EMAIL"
FROM debian:jessie
CMD["/run.sh"] EXPOSE 8080
在所有测试通过并创建了JAR文件之后，就可以构建稍后部署到生产环境的
COPYclient/components/client/components
cOPYtarget/scala-2.10/books-ms-assembly-1.0.jar/bs.jar
UNchmod+x/run.sh
OPYrun.sh/run.sh
ENVDB_COLLECTIONbooks
NVD
rm-rf/var/lib/apt/lists/
o s---s-e
DB_DBNAMEbooks
apt-getclean&&\
5.2部署流水线步骤
<67
---
## Page 83
第5章部署流水线的实现——初始阶段
MAINTAINER Viktor Farcic "PI:EMAIL"
定的一些脚本结合起来使用。这种场景下，你可以（通过 FROM指令）创建一个基
其他容器的基础。例如，你可能会遇到许多应用程序需要将NodeJS 与Gulp 以及特
容器都会使用相同的缓存副本，这意味着它只会被下载一次。
使用。举个例子，如果所有的容器都是从Debian 镜像中扩展而来的，那么所有的
大小更重要。要知道，每个镜像都缓存在服务器上，并被使用它的所有容器重复
容器，但是在初始化时需要执行少量特定操作，则应该使用 Mongo 镜像。
能想要使用更加特定的镜像作为容器的基础。例如，如果你需要带有 MongoDB 的
运行更复杂命令的时候，该镜像可能会难以理解。最后，在大多数情况下，你可
5 MB 的大小使其显得微不足道。但是请记住，由于其极简约的方式，当在它上面
作的镜像而言，情况尤其如此。这种情况下，Alpine可能是一个好的开始，它
情况，其大小是最重要的，对于可以作为实用程序运行一段时间来执行某些特定操
CentOS，它的大小约为175MB（比Debian大约大50%）。当然，还有一些其他
了Debian OS 可能需要的所有东西。另外，你可能熟悉 RPM 安装包管理，比如
的喜爱外，它的体积也相对很小（约125MB），但仍是一个完整的发行版，包含
续
本容器。
RUN执行任何一组命令的运行方式与在命令提示符下的完全相同。你可能已经
RUN apt-get update &&\
维护者纯粹是提供作者的信息一
让我们转到下一条指令：
用作基本镜像的容器跟其他任何容器一样，这意味着可以使用你的容器作为
在容纳有多个容器的系统中，使用多少个不同的基本镜像比基本镜像本身的
rm-rf/var/lib/apt/lists/*
一维护容器的人，这里无须赘言，下面继
---
## Page 84
必要文件（apt-getclean和rm）。
update）更新系统，安装 JDK7（apt-get instal1），并删除这个过程中创建的不
况下，如果以后很难维护，那么拥有一个巨大的 RUN指令也许并不是最好的选择。
性之间找到平衡。Dockerfle 要易读、易维护，同时要意图明确。这意味着在某些情
创建一个镜像，那么它的大小就会变得更小（100MB－10MB=90MB）。
仍然是100MB。如果回到第一个例子中，所有的命令在同一条指令中执行从而只
使稍后移除的文件在容器中不可访问，也不会整体移除容器。这四个镜像的大小
删除内容。由于每个镜像都是不可变的，因此前两个镜像的大小还是100MB，即
文件确实可以节省硬盘容量，但在Docker 容器的世界里，我们只能从当前镜像中
令（apt-get clean和 rm）用于删除文件（比如 10MB）。虽然删除普通系统上的
update和 apt-get instal1）用于添加软件包（比如100 MB），接下来的两个指
通过展示（杜撰的数字）每个镜像的大小来说明这一点。前两个指令（apt-get
叠在一起的集合。知道了最后两条 RUN指令（clean和rm）没有提供任何值，下面
可以通过以下方式达到相同的效果：
独的命令组合在一起，而不是将每个命令作为单独的指令来执行。（从操作角度)
注意到，在我们的例子中，除了最后一行，每一行都以&&\结尾。我们是将几个单
一就是 Dockerfile 中的每条指令都会生成一个单独的镜像。