# 新型安卓银行木马 MysteryBot 详细分析
|
##### 译文声明
本文是翻译文章，文章来源：www.threatfabric.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在处理我们的日常可疑样本时，我们对Android银行木马LokiBot的检测规则与LokiBot本身似乎完全不同的样本相匹配，这促使我们更仔细地研究它。看一下bot命令，我们首先认为LokiBot已经改进了。然而，我们很快意识到还有更多的事情正在发生：bot的名字和操作面板的名称都变成了“MysteryBot”，甚至网络通信也发生了变化。
在对其网络活动的调查中，我们发现MysteryBot和LokiBot
Android银行木马都在同一个C&C服务器上运行。这很快使我们得出了一个初步结论，即这个新发现的恶意软件要么是对Lokibot的更新，要么是由同一参与者开发的另一个银行木马程序。
为了验证我们的想法，我们搜索了一些其他来源，并发现使用相同C&C的两个恶意软件样本之间有更多的相似之处，如下Koodous的截图所示：
[](https://p1.ssl.qhimg.com/t017080dadf68c1a29d.png
"与Koodous上的LokiBot链接的MysteryBot")
## 功能
这个bot具有最普通的Android银行木马功能，但似乎超过平均水平。覆盖、关键日志和勒索的功能是新颖的，在后面我们会详细介绍。下表列出了所有的bot命令和相关特性。
[](https://p1.ssl.qhimg.com/t017625f6d2ac454fa5.png)
下面的屏幕截图显示了允许操作员在bot上启动特定命令的下拉列表：
[](https://p0.ssl.qhimg.com/t0155358018a9bb4149.png "命令启动程序的屏幕截图")
## 覆盖模块已支持Android 7/8
随着Android
7和8版本的引入，以前使用的覆盖技术变得无法访问，迫使出于经济动机的攻击者在他们的银行木马中寻找使用覆盖的新方法。在过去三个月中，一些最大的Android银行木马家族，如ExoBot
2.5、Anubis II、DiseaseBot，一直在探索新技术，以正确地对Android 7和8进行覆盖攻击。
覆盖攻击的成功取决于时间，在受害者打开相关应用程序时，诱使受害者在一个伪造的页面上询问凭证或信用卡信息。不定时覆盖会使覆盖屏幕出现在意外的时刻，导致受害者意识到恶意软件的存在。在Android
7和8中，Security-Enhanced
Linux(SELinux)和其他安全控制(沙箱限制)使用的限制使这一点变得困难。因此攻击者一直在努力寻找正确的时间重叠的新方法，这在Android银行木马犯罪生态系统中引发了许多技术争论。
它滥用了
[PACKAGE_USAGE_STATS](https://developer.android.com/reference/android/app/usage/UsageStatsManager)权限(通常称为Usage
Access权限)。MysteryBot的代码已经与所谓的Package_Usage_STATS技术进行了整合。因为滥用此Android权限需要受害者提供使用权限，所以MysteryBot使用流行的AccessibilityService，允许木马在未经受害者同意的情况下启用和滥用任何必需的权限。
经验告诉我们，用户通常授予应用程序[Device
Administrator](https://developer.android.com/guide/topics/admin/device-admin)和[AccessibilityService](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService)权限，授权恶意软件在受感染的设备上执行进一步的操作。如今，受害者授予这种权限的原因以及要求详尽权限集的应用程序的数量似乎使用户在不审查所请求的权限的情况下授予权限变得很常见。目前，MysteryBot没有使用这样的MO来获得使用访问权限，但会直接询问受害者或它。
下面的屏幕截图显示了恶意软件(隐藏为假AdobeFlashPlayer应用程序)一旦安装，列出了请求使用访问权限的应用程序。一旦触发受害者提供权限，恶意应用程序的状态将更改为“on”。
[](https://p0.ssl.qhimg.com/t01814583c8edc10c07.png "请求访问权限的应用程序的截图")
在对这一新技术进行调查时，我们重新创建了参与者用来检测前台应用程序的逻辑，以确认滥用该权限将允许覆盖工作。测试结果是肯定的，我们确实可以在前台得到应用程序的包名。下面的屏幕截图显示，在我们的测试设备上，包名为au.com.nab.Mobile(NAB移动银行)的应用程序位于前台，在Android
7和Android 8上都能工作。
[](https://p4.ssl.qhimg.com/t01dc3e22a9809e14fd.png)
这是BOT用来获取最新应用程序包名的代码片段：getLastUseApplication()
    @TargetApi(value = 21) 
    public void getLastUsedApplication() { 
        try { 
            do { 
                label_0: 
                TimeUnit.MILLISECONDS.sleep(1000); 
                gotolabel_8; 
            } while (true); 
        } catch (InterruptedException interruptedException) { 
            try { 
                interruptedException.printStackTrace(); 
                label_8: 
                Object usageStatsManager = this.getSystemService("usagestats"); 
                long epochTime = System.currentTimeMillis(); 
                List usageStatsList = ((UsageStatsManager) usageStatsManager).queryUsageStats(0, epochTime - 10000, epochTime); 
                if (usageStatsList == null || usageStatsList.size() = this.keyboardLayer0.length) { 
            break; 
        }
        this.keyboardLayer0[i] = View.inflate(((Context) this), resource, viewGroup); 
        windowManager = new WindowManager$LayoutParams(this.x / 10, 50, 2003, 0x40018, -3); 
        this.keyboardLayer0[i].setOnTouchListener(new HandleKeystrokeLayer0(this)); 
        windowManager.gravity = int0x800053; 
        windowManager.x = this.x / int10 * i; 
        windowManager.y = 0xFA; 
        this.systemServiceWindow.addView(this.keyboardLayer0[i], ((ViewGroup$LayoutParams) windowManager)); 
    }
    for (i = 0; i  i ? this.x / 9 * (j + 4) : this.x / 9 * j; 
        windowManager.x = i; 