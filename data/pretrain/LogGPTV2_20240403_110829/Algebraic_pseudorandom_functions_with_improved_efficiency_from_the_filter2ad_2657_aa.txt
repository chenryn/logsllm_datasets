title:Algebraic pseudorandom functions with improved efficiency from the
augmented cascade
author:Dan Boneh and
Hart William Montgomery and
Ananth Raghunathan
Algebraic Pseudorandom Functions with Improved
Efﬁciency from the Augmented Cascade∗
†
Dan Boneh
‡
Hart W. Montgomery
§
Ananth Raghunathan
Department of Computer Science, Stanford University, California, USA
{dabo, hartm, ananthr}@cs.stanford.edu
ABSTRACT
We construct an algebraic pseudorandom function (PRF)
that is more eﬃcient than the classic Naor-Reingold alge-
braic PRF. Our PRF is the result of adapting the cascade
construction, which is the basis of HMAC, to the algebraic
settings. To do so we deﬁne an augmented cascade and
prove it secure when the underlying PRF satisﬁes a prop-
erty called parallel security. We then use the augmented
cascade to build new algebraic PRFs. The algebraic struc-
ture of our PRF leads to an eﬃcient large-domain Veriﬁable
Random Function (VRF) and a large-domain simulatable
VRF.
Categories and Subject Descriptors
G.3 [Probability and Statistics]: Random number gen-
eration
General Terms
Algorithms, Security, Theory
1.
INTRODUCTION
Pseudorandom functions (PRFs), ﬁrst deﬁned by Goldre-
ich, Goldwasser, and Micali [20], are a fundamental build-
ing block in cryptography and have numerous applications.
They are used for encryption, message integrity, signatures,
key derivation, user authentication, and many other crypto-
graphic mechanisms. Beyond cryptography, PRFs are used
to defend against denial of service attacks [7, 16] and even
to prove lower bounds in learning theory.
crypto.stanford.edu/~dabo/pubs
∗The
†Supported by NSF and the Packard Foundation.
‡Supported by a Stanford Graduate Fellowship.
§Supported by a Stanford School of Engineering Fellowship.
available
version
paper
full
of
this
at
is
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
In a nutshell, a PRF is indistinguishable from a truly ran-
dom function. We give precise deﬁnitions in the next section.
The fastest PRFs are built from block ciphers like AES and
security is based on ad-hoc interactive assumptions.
In 1996, Naor and Reingold [28] presented an elegant PRF
whose security can be deduced from the hardness of the De-
cision Diﬃe-Hellman problem (DDH) deﬁned in the next
section. The Naor-Reingold PRF takes as input an m-bit
string b = b1 . . . bm ∈ {0, 1}m and a secret key (h, x1, . . . , xm)
and outputs
(cid:0) (h, x1, . . . , xm)
(cid:125)
(cid:124)
(cid:123)(cid:122)
key
(cid:124)
FNR
(cid:1) := hw
, (b1 . . . bm)
(cid:123)(cid:122)
input
(cid:125)
(1)
m(cid:89)
i=1
xbi
i
.
where w :=
We deﬁne this PRF more precisely in Section 4.1. Evalu-
ating this PRF amounts to m modular multiplications plus
one exponentiation. This PRF was recently generalized by
Lewko and Waters [24] to work in groups where DDH may
be easy, but where a weaker assumption called k-linear may
hold. While this has clear security beneﬁts, there is a cost
in performance compared to Naor-Reingold.
The algebraic structure of the Naor-Reingold PRF leads
to several beautiful applications that are much harder to
construct with generic PRFs built from block ciphers. Some
examples include Veriﬁable Random Functions (VRFs) [22],
oblivious PRFs (used for private keyword search [19] and
secure computation of set-intersection [23]), and distributed
PRFs [28], to name a few. Another algebraic PRF due to
Dodis and Yampolskiy [18] (based on the signature scheme
from [10]) also has many useful applications. However, this
PRF is only known to be secure when the domain is small
(i.e. polynomial size).
Our results. We describe a new algebraic PRF that has
the same domain as Naor-Reingold, but requires fewer mul-
tiplications to evaluate and uses shorter private keys. For
parameters (cid:96) and n our PRF takes inputs (u1, . . . , un) in Zn
along with a key (h, x1, . . . , xn) and outputs
F(cid:0) (h, x1, . . . , xn), (u1 . . . un)(cid:1) := h1/w
n(cid:89)
(2)
(cid:96)
where w :=
(xi + ui) .
For a domain of size 2m evaluating this PRF requires a factor
of log2 (cid:96) fewer multiplications than (1) to compute w. Since
computing w often takes roughly the same time as the ﬁnal
i=1
131exponentiation, evaluating this PRF is about twice as fast as
evaluating the Naor-Reingold PRF. The secret key is shorter
by a factor of log2 (cid:96). We prove security of this PRF from the
(cid:96)-DDH assumption deﬁned in the next section. The larger (cid:96)
gets the stronger the assumption becomes and therefore one
should keep (cid:96) small. Setting (cid:96) = 16 or 256 for example is a
reasonable choice.
Techniques. We prove security of the PRF by develop-
ing a PRF composition theorem that generalizes the classic
cascade construction of Bellare, Canetti and Krawczyk [6].
The cascade construction, shown in Figure 1(a), constructs
a PRF with a large domain from a PRF with a small domain
and is the basis for the NMAC and HMAC PRFs [5, 4].
Unfortunately, the cascade construction is insuﬃcient for
our purposes because it requires the output of the underly-
ing PRF to be atleast as long as the secret key. We therefore
deﬁne the augmented cascade (shown in Figure 1(b)) which
eliminates this requirement by using supplemental secret in-
formation in every block. The augmented cascade can be
applied directly to PRFs whose output is much smaller than
the secret key. Suprisingly, security of the augmented cas-
cade does not follow from security of the underlying PRF.
We therefore develop a suﬃcient condition on the underly-
ing PRF, called parallel security, that implies security of the
augmented cascade.
Armed with the augmented cascade theorem, we build
our large-domain PRF by plugging the Dodis-Yampolskiy
small-domain PRF [18] into the augmented cascade. To
prove security, we prove that the Dodis-Yampolskiy PRF
is parallel secure. As a short aside, we show the power of
the augmented cascade theorem by using it to quickly prove
security of the Naor-Reingold and Lewko-Waters PRFs.
Veriﬁable Random Functions. The algebraic structure
of the PRF in (2) enables many of the same applications
as the Naor-Reingold PRF. In Sections 6.2 and 7 we show
how to convert this PRF into a Veriﬁable Random Function
(VRF) with a large domain in groups with a bilinear map.
A VRF, as deﬁned in [26], is a PRF that also outputs a
proof that it was evaluated correctly. VRFs give signature
schemes where every message has a unique signature. They
were also used to construct e-cash schemes [3, 2].
Hohenberger and Waters [22] recently constructed an el-
egant VRF with a large domain. Our VRF is a little less
eﬃcient, but surprisingly is based on a weaker assumption.
Their construction requires an assumption where the prob-
lem instance has size O(mQ) where m is the size of the
domain and Q is the number of adversarial queries. We
only require a problem instance of size O(m). Our security
proof makes use of admissible hash functions as in [9]. We
also describe a large-domain simulatable VRF (as deﬁned
in [15]).
2. PRELIMINARIES
2.1 Pseudorandom Functions
We begin by reviewing the deﬁnition of pseudorandom
functions [20]. Informally, a pseudorandom function is an
eﬃciently computable function such that no eﬃcient adver-
sary can distinguish the function from a truly random func-
tion given only black-box access.
More precisely, a PRF is an eﬃciently computable func-
tion F : K × X → Y where K is called the key space, X is
called the input space, and Y is called the output space.
Security for a PRF is deﬁned using two experiments be-
tween a challenger and an adversary A. For b ∈ {0, 1} the
challenger in Expb works as follows.
When b = 0 the challenger chooses a random key
k ∈ K and sets f (·) := F (k,·). When b = 1 the
challenger chooses a random function f : X → Y .
The adversary (adaptively) sends queries x1, . . . , xq
in X to the challenger and the challenger responds
with f (x1), . . . , f (xq).
Eventually the adversary outputs a bit b(cid:48) ∈ {0, 1}.
For b ∈ {0, 1} let Wb be the probability that A outputs 1 in
Expb.
Deﬁnition 1. A PRF F : K × X → Y is secure if for all
eﬃcient adversaries A the quantity
PRFadv[A, F ] := |W0 − W1|
is negligible.
As usual, one makes the terms “eﬃcient” and “negligible”
precise using asymptotic notation by equating eﬃcient with
probabilistic polynomial time and equating negligible with
functions smaller than all inverse polynomials. Here, we use
non-asymptotic language to simplify the notation.
2.2 Complexity assumptions
Notation. In this section and in Section 4.2 it is convenient
to use vector notation deﬁned as follows. Let G be a group
of prime order p with generator g.
• for vectors ¯g = (g1, . . . , gn) ∈ Gn and ¯x = (x1, . . . , xn) ∈
Zn
p deﬁne
¯g ¯x :=(cid:0)gx1
1 , . . . , gxn
n
(cid:1) ∈ Gn .
For a scalar g ∈ G deﬁne g ¯x := (gx1 , . . . , gxn ).
• for a matrix A = (ai,j) ∈ Zn×m
p
deﬁne
A · ¯g := ¯h ∈ Gn where hi :=
m(cid:89)
and a vector ¯g ∈ Gm
gai,j
j
for i = 1, . . . , n.
and for a scalar g ∈ G deﬁne gA := (g(ai,j )) ∈ Gn×m.
j=1
p
We will also use [k] to denote the set {1, . . . , k}.
The k-linear assumption. Let Vk be the linear subspace
containing all vectors orthogonal to (−1, 1, 1, . . . , 1);
of Zk+1
its dimension is k. A vector v = (v0, . . . , vk) is in Vk if v0 is
the sum of the remaining coordinates. When k = 1 a vector
v = (v0, v1) is in V2 if and only if v0 = v1.
For an algorithm A deﬁne
adv[A, G] :=(cid:12)(cid:12) Pr[A(¯g, ¯g ¯x) = 1] − Pr[A(¯g, ¯g ¯y) = 1](cid:12)(cid:12)
LIN(k)
.
p
where ¯g is uniform in Gk+1, ¯x is uniform in Vk, and ¯y is
uniform in Zk+1
Deﬁnition 2. For k ≥ 1 we say that the k-linear assump-
tion holds for the group G if for all eﬃcient algorithms A
the advantage LIN(k)
adv[A, G] is negligible.
132The 1-linear assumption is identical to the standard De-
cision Diﬃe-Hellman (DDH) problem in G and we write
DDHadv[A, G] to denote LIN(1)
adv[A, G]. For k = 2 we obtain
the decision linear assumption deﬁned in [12]. For larger k
we obtain the generalized linear assumption deﬁned in [29,
21].
It is not diﬃcult to show that if the k-linear assumption