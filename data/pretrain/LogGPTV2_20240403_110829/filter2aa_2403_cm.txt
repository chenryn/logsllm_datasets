PshPack1.h 文件有下列内容。 
指令清单 21.20  PshPack1.h 
#if ! (defined(lint) || defined(RC_INVOKED)) 
#if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED) 
#pragma warning(disable:4103) 
#if !(defined( MIDL_PASS )) || defined( __midl ) 
#pragma pack(push,1) 
#else 
#pragma pack(1) 
#endif 
#else 
#pragma pack(1) 
#endif 
#endif /* ! (defined(lint) || defined(RC_INVOKED)) */ 
根据#pragma pack 的信息，编译器会在封装结构体时向相应的边界对齐。 
OllyDbg + 默认封装格式 
现在打开 OllyDbg，加载上述以默认封装格式（4 字节边界对齐）的程序，如图 21.3 所示。 
图 21.3  OllyDbg：调用 printf()函数之前 
我们在数据窗口可以找到四个字段的值。但是，第一个字段（变量 a）和第三个字段（变量 c）空间之
后的数据工具出现了随机值(0x30,0x37, 0x01)。它们是怎么产生的？在指令清单 21.16 的源程序中，变量 a
和变量 c 都是 char 型单字节数据。程序的第 6、第 8 行，分别给它们赋值 1、3。它们在内存里占用了 4 个
字节，而其他 32 位存储空间里有 3 个字节并没有被赋值！在这 3 个字节空间里的数据，就是随机脏数据。
因为在给 printf()函数传递参数时，编译器会使用的是单字节数据赋值指令 MOVSX（参见指令清单 21.16
的第 34 行和第 38 行）传递数据，所以这些脏数据并不会影响 printf()函数的输出结果。 
另外，因为a 和c 是char 型数据，char 型数据属于有符号（signed）型数据，所以复制操作所对应的汇编指令是
MOVSX（SX 是sign-extending 的缩写）。如果它们是unsigned char 或uint8_t 型数据，那么此处就会是MOVZX 指令。 
OllyDbg + 字段向单字节边界对齐 
这种情况下，整个结构体的各个变量在内存里依次排列，如图 21.4 所示。 
图 21.4  OllyDbg：在调用 printf()函数之前 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
329 
21.4.2 ARM 
Optimizing Keil 6/2013 (Thumb mode) 
使用 Keil 6/2013（开启优化选项）、以 Thumb 模式编译上述程序可得如下所示的代码。 
指令清单 21.21  Optimizing Keil 6/2013 (Thumb mode) 
.text:0000003E  
exit ; CODE XREF: f+16 
.text:0000003E 05 B0  
  ADD  
SP, SP, #0x14 
.text:00000040 00 BD  
  POP  
{PC} 
.text:00000280              f 
.text:00000280 
.text:00000280            
var_18 = -0x18 
.text:00000280   
a   
  = -0x14 
.text:00000280   
b       = -0x10 
.text:00000280   
c       = -0xC 
.text:00000280   
d       =-8  
.text:00000280 
.text:00000280 0F B5  
  PUSH    {R0-R3,LR} 
.text:00000282 81 B0  
  SUB     SP, SP, #4 
.text:00000284 04 98  
  LDR     R0, [SP,#16] ; d 
.text:00000286 02 9A  
  LDR     R2, [SP,#8]  ; b 
.text:00000288 00 90  
  STR     R0, [SP] 
.text:0000028A 68 46  
  MOV     R0, SP 
.text:0000028C 03 7B  
  LDRB    R3, [R0,#12] ; c 
.text:0000028E 01 79  
  LDRB    R1, [R0,#4]  ; a 
.text:00000290 59 A0  
  ADR     R0, aADBDCDDD ; "a=%d; b=%d; c=%d; d=%d\n" 
.text:00000292 05 F0 AD FF  
  BL      __2printf 
.text:00000296 D2 E6  
  B       exit 
本例向被调用方函数传递的是结构体型数据，不是结构体的指针。因为 ARM 会利用寄存器传递函数
所需的前 4 个参数，所以编译器利用 3R0～R3 寄存器向 printf()函数传递结构体的全部字段。 
LDRB 从内存中加载 1 个字节并转换为 32 位有符号数据，用来从结构体中读取字段 a 和字段 c。它相
当于 x86 指令集中的 MOVSX 指令。 
请注意，在函数退出时，它借用了另一个函数的函数尾声！这种借助 B 指令跳转到其他完全不相干的函数、
共用同一个函数尾声的现象，应当是因为两个函数的局部变量的存储空间完全相同。或许因为这两个函数在启
动时分配的栈大小相同（都分配了 4×5=0x14 的数据栈），导致退出语句也完全相同的缘故，再加上它们在内存
中的地址相近的因素，所以编译器进行了这种处理。确实，使用同一组退出语句不会影响程序的任何功能。这明
显是 Keil 编译器出于经济因素而进行的指令复用。JMP 指令只占用 2 个字节，而标准的函数尾声要占用 4 字节。 
ARM + Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
指令清单 21.22  Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
var_C = -0xC 
PUSH   
{R7,LR} 
MOV   
R7, SP 
SUB   
SP, SP, #4 
MOV   
R9,R1;b 
MOV   
R1,R0;a 
MOVW   
R0, #0xF10 ; "a=%d; b=%d; c=%d; d=%d\n"  
SXTB   
R1, R1 ;制备 a 
MOVT.W  
R0, #0 
STR   
R3, [SP,#0xC+var_C] ; 推送 d 入栈，供 printf() 调用 
ADD   
R0, PC ; 格式化字符串 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
330 
逆向工程权威指南（上册） 
SXTB   
R3, R2 ; 制备 c 
MOV   
R2,R9;制备 b 
BLX   
_printf 
ADD   
SP, SP, #4 
POP   
{R7,PC} 
SXTB(Signed Extend Byte)对应 x86 的 MOVSX 指令，但是它只能处理寄存器的数据，不能直接对内存
进行操作。程序中的其余指令与前例一样，本文不再进行重复说明。 
21.4.3 MIPS 
指令清单 21.23  Optimizing GCC 4.4.5 (IDA) 
 1 f: 
 2 
 3 var_18   
= -0x18 
 4 var_10   
= -0x10 
 5 var_4  
= -4 
 6 arg_0  
= 0 
 7 arg_4  
= 4 
 8 arg_8  
= 8 
 9 arg_C  
= 0xC 
10 
11 ; $a0=s.a 
12 ; $a1=s.b 
13 ; $a2=s.c 
14 ; $a3=s.d 
15  
lui   
$gp, (__gnu_local_gp >> 16) 
16  
addiu  
$sp, -0x28 
17  
la  
$gp, (__gnu_local_gp & 0xFFFF) 
18  
sw  
$ra, 0x28+var_4($sp) 
19  
sw  
$gp, 0x28+var_10($sp) 
20 ; prepare byte from 32-bit big-endian integer: 
21  
sra   
$t0, $a0, 24 
22  
move   
$v1, $a1 
23 ; prepare byte from 32-bit big-endian integer: 
24  
sra   
$v0, $a2, 24 
25  
lw  
$t9, (printf & 0xFFFF)($gp) 
26  
sw  
$a0, 0x28+arg_0($sp) 
27  
lui   
$a0, ($LC0 >> 16) # "a=%d; b=%d; c=%d; d=%d\n" 
28  
sw  
$a3, 0x28+var_18($sp) 
29  
sw  
$a1, 0x28+arg_4($sp) 
30  
sw  
$a2, 0x28+arg_8($sp) 
31  
sw  
$a3, 0x28+arg_C($sp) 
32  
la  
$a0, ($LC0 & 0xFFFF) # "a=%d; b=%d; c=%d; d=%d\n" 
33  
move   
$a1, $t0 
34  
move   
$a2, $v1 
35  
jalr   
$t9 
36  
move   
$a3, $v0 ; branch delay slot 
37  
lw  
$ra, 0x28+var_4($sp) 
38  
or  
$at, $zero ; load delay slot, NOP 
39  
jr  
$ra 
40  
addiu  
$sp, 0x28 ; branch delay slot 
41 
42 $LC0:  
.ascii "a=%d; b=%d; c=%d; d=%d\n" 
结构体各字段首先被安置于$A0～$A3 寄存器，然后又被重新安放于$A1～$A3 寄存器以传递给 printf()
函数。较为特殊的是，上述程序使用了两次 SRA(Shift Word Right Arithmetic)指令，而 SRA 指令用于制备
char 型数据的字段。这是为什么？MIPS 默认采用大端字节序（big-endian，参见本书第 31 章），此外我用
的 Debian Linux 也使用大端字节序。当使用 32 位空间存储字节型变量时，数据占用第 31～24 位。因此，
当把 char 型数据扩展为 32 位数据时，必须右移 24 位。再加上 char 型数据属于有符号型数据，所以此处必
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
331 
须用算术位移指令而不能使用逻辑位移指令。 
21.4.4  其他 
在向被调用方函数传递结构体时（不是传递结构体的指针），传递参数的过程相当于依次传递结构体的
各字段。即是说，如果结构体各字段的定义不变，那么 f()函数的源代码可改写为： 
void f(char a, int b, char c, int d) 
{ 
    printf ("a=%d; b=%d; c=%d; d=%d\n", a, b, c, d); 
}; 
即使经过上述改动，编译器生成的可执行程序也完全不会发生变化。 
21.5  结构体的嵌套 
结构体套用另外一个结构体的情况大体如下： 
#include  
struct inner_struct 
{ 
    int a; 
    int b;  
}; 
struct outer_struct 
{ 
    char a; 
    int b; 
    struct inner_struct c; 
    char d; 
    int e; 
}; 
void f(struct outer_struct s) 
{ 
    printf ("a=%d; b=%d; c.a=%d; c.b=%d; d=%d; e=%d\n", 
        s.a, s.b, s.c.a, s.c.b, s.d, s.e); 
}; 
int main()  
{ 
    struct outer_struct s; 
    s.a=1; 
    s.b=2; 
    s.c.a=100; 
    s.c.b=101; 
    s.d=3; 
    s.e=4; 
    f(s); 
}; 
这个程序把结构体 inner_struct 当作另一个结构体 outer_struct 的字段来用，它和 outer_struct 的 a、b、
d、e 一样，都是一个字段。 
我们使用 MSVC 2010（启用/Ox /Ob0 选项）编译上述程序，可得到如下所示的代码。 
指令清单 21.24  Optimizing MSVC 2010 /Ob0 
$SG2802 DB    ’a=%d; b=%d; c.a=%d; c.b=%d; d=%d; e=%d’, 0aH, 00H 
_TEXT    SEGMENT 
_s$ = 8 
_f    PROC 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
332 
逆向工程权威指南（上册） 
mov    eax, DWORD PTR _s$[esp+16] 
movsx  ecx, BYTE PTR _s$[esp+12] 
mov    edx, DWORD PTR _s$[esp+8] 
push   eax 
mov    eax, DWORD PTR _s$[esp+8] 
push   ecx 
mov    ecx, DWORD PTR _s$[esp+8] 
push   edx 
movsx  edx, BYTE PTR _s$[esp+8] 
push   eax 
push   ecx 
push   edx 
push   OFFSET $SG2802 ; ’a=%d; b=%d; c.a=%d; c.b=%d; d=%d; e=%d’ 
call   _printf 
add    esp, 28 
ret    0 
_f       ENDP 
_s$ = -24 
_main    PROC 
    sub    esp, 24 
    push   ebx 
    push   esi 
    push   edi 
    mov    ecx, 2 
    sub    esp, 24 
    mov    eax, esp 
    mov    BYTE PTR _s$[esp+60], 1 
    mov    ebx, DWORD PTR _s$[esp+60] 
    mov    DWORD PTR [eax], ebx 
    mov    DWORD PTR [eax+4], ecx 
    lea    edx, DWORD PTR [ecx+98] 
    lea    esi, DWORD PTR [ecx+99] 