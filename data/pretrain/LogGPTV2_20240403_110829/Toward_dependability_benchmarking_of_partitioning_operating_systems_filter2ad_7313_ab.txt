### Error Injection Using Software Breakpoints

Error injection, a general technique not tied to any specific microprocessor, is achieved by placing a software breakpoint at the instruction where the error should be introduced. This breakpoint replaces the original instruction with a branch to a fault injection routine. The routine tracks the number of invocations and injects the error when the specified count is reached. The original instruction is then executed within the instrumentation routine.

Compared to other techniques, our implementation of instrumentation-based injection offers low spatial intrusiveness and low to medium temporal intrusiveness [7]. While exception-based injection may have lower temporal intrusiveness [15], our observations show that instrumentation-based injection has very low temporal intrusiveness in most experiments. Additionally, the extra machine instructions are executed in the context of the faulty task, minimizing the impact on fault-free tasks. To measure actual intrusiveness, users can run the target system with the fault injector installed but not activated.

For software faults, we used a tool that mutates the source code of applications [16], requiring recompilation for each experiment. Alternatively, fault injectors can emulate software faults directly into the binary code.

### Experimental Results

We evaluated three benchmark targets through fault injection campaigns, divided into hardware and software faults as detailed in Section III. Each target had three workload configurations: Altimeter with Hamdist, Altimeter with CRC32, and CRC32 with Hamdist. Faults were injected into one of the two workloads to determine if partitioning could prevent propagation to the other partition.

#### Table I: Partitioning Violations for Hardware Faults Targeting the Basic Scheduler

| Workloads | High Priority (f) | Low Priority | Injected | Activated | Spatial Violation | Temporal Violation |
|-----------|-------------------|--------------|----------|-----------|-------------------|--------------------|
| Altimeter (f) | Altimeter | 94 | 93 | 1 (16.67%) | 1 (16.67%) |
| Altimeter | CRC32 (f) | 100 | 6 | 4 (100%) | 4 (100%) |
| CRC32 | Hamdist (f) | 95 | 94 | 3 (50%) | 3 (50%) |

**Register Faults:**
- Average for all hardware faults: 61.42% (spatial), 60.91% (temporal)

**Memory Faults:**
- Average for all hardware faults: 67.42% (spatial), 60.91% (temporal)

#### Table II: Partitioning Violations for Hardware Faults Targeting µC/OS-II Without Partitioning

| Workloads | High Priority (f) | Low Priority | Injected | Activated | Spatial Violation | Temporal Violation |
|-----------|-------------------|--------------|----------|-----------|-------------------|--------------------|
| Altimeter (f) | Altimeter | 93 | 96 | 6 (66.67%) | 6 (66.67%) |
| Altimeter | CRC32 (f) | 100 | 9 | 7 (77.78%) | 7 (77.78%) |
| CRC32 | Hamdist (f) | 90 | 93 | 0 (–) | 1 (50%) |

**Register Faults:**
- Average for all hardware faults: 57.41% (spatial), 70.83% (temporal)

**Memory Faults:**
- Average for all hardware faults: 22.22% (spatial), 22.22% (temporal)

#### Table III: Partitioning Violations for Hardware Faults Targeting µC/OS-II With Secern

| Workloads | High Priority (f) | Low Priority | Injected | Activated | Spatial Violation | Temporal Violation |
|-----------|-------------------|--------------|----------|-----------|-------------------|--------------------|
| Altimeter (f) | Altimeter | 89 | 95 | 2 (33.33%) | 2 (33.33%) |
| Altimeter | CRC32 (f) | 100 | 6 | 0 (0%) | 0 (0%) |
| CRC32 | Hamdist (f) | 98 | 90 | 2 (100%) | 0 (–) |

**Register Faults:**
- Average for all hardware faults: 22.22% (spatial), 22.22% (temporal)

**Memory Faults:**
- Average for all hardware faults: 22.22% (spatial), 22.22% (temporal)

### Summary of Partitioning Coverage

The partitioning coverage for the three benchmark targets, considering both software and hardware faults, is summarized in Table VII. The metrics PCs and PCt are calculated by subtracting the proportion of violations from 100%. 

- **µC/OS-II with Secern** ranks first in partitioning coverage, both spatially and temporally.
- The other two targets are closely ranked, with a slight advantage in spatial partitioning.

#### Table IV: Partitioning Violations for Software Faults Targeting the Basic Scheduler

| Workloads | High Priority (f) | Low Priority | Injected | Activated | Spatial Violation | Temporal Violation |
|-----------|-------------------|--------------|----------|-----------|-------------------|--------------------|
| Altimeter (f) | Altimeter | 94 | 93 | 1 (16.67%) | 1 (16.67%) |
| Altimeter | CRC32 (f) | 100 | 6 | 4 (100%) | 4 (100%) |
| CRC32 | Hamdist (f) | 95 | 94 | 3 (50%) | 3 (50%) |

**Average for all software faults:**
- 7.41% (spatial), 7.41% (temporal)

#### Table V: Partitioning Violations for Software Faults Targeting µC/OS-II Without Partitioning

| Workloads | High Priority (f) | Low Priority | Injected | Activated | Spatial Violation | Temporal Violation |
|-----------|-------------------|--------------|----------|-----------|-------------------|--------------------|
| Altimeter (f) | Altimeter | 93 | 96 | 6 (66.67%) | 6 (66.67%) |
| Altimeter | CRC32 (f) | 100 | 9 | 7 (77.78%) | 7 (77.78%) |
| CRC32 | Hamdist (f) | 90 | 93 | 0 (–) | 1 (50%) |

**Average for all software faults:**
- 7.41% (spatial), 7.41% (temporal)

#### Table VI: Partitioning Violations for Software Faults Targeting µC/OS-II With Secern

| Workloads | High Priority (f) | Low Priority | Injected | Activated | Spatial Violation | Temporal Violation |
|-----------|-------------------|--------------|----------|-----------|-------------------|--------------------|
| Altimeter (f) | Altimeter | 89 | 95 | 2 (33.33%) | 2 (33.33%) |
| Altimeter | CRC32 (f) | 100 | 6 | 0 (0%) | 0 (0%) |
| CRC32 | Hamdist (f) | 98 | 90 | 2 (100%) | 0 (–) |

**Average for all software faults:**
- 8.47% (spatial), 4.76% (temporal)

### Conclusion

The results indicate that µC/OS-II with Secern provides the best partitioning, though there is room for improvement. The other two targets show similar performance, with a slight edge in spatial partitioning. Detailed analysis and potential improvements are discussed in Section V.