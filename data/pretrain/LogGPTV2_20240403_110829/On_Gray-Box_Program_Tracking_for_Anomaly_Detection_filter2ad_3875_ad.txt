6
0
5
0
4
0
3
0
2
0
1
0
0
8
0
6
0
4
0
2
0
+
+
R
+
P
S
66
5
4
3
2
1
0
+
+
R
+
P
S
66
5
4
3
2
1
0
+
+
R
+
P
S
66
5
4
3
2
1
0
+
+
R
+
P
S
66
5
4
3
2
1
0
0
0
6
0
0
5
0
0
4
0
0
3
0
0
2
0
0
1
0
0
0
0
6
0
0
0
5
0
0
0
4
0
0
0
3
0
0
0
2
0
0
0
1
0
0
0
2
0
5
1
0
0
1
0
5
0
0
0
7
0
0
6
0
0
5
0
0
4
0
0
3
0
0
2
0
0
1
0
+
+
R
+
P
S
6
5
4
3
2
1
0
+
+
R
+
P
S
6
5
4
3
2
1
0
+
+
R
+
P
S
6
5
4
3
2
1
0
+
+
R
+
P
S
6
5
4
3
2
1
0
0
0
1
0
8
0
6
0
4
0
2
0
0
0
5
0
0
4
0
0
3
0
0
2
0
0
1
0
0123456
0
5
0
4
0
3
0
2
0
1
wu-ftpd
proftpd
Apachehttpd
Apachehttpd(chroot)
)
.
Σ
f
o
n
o
i
t
a
r
u
g
ﬁ
n
o
c
e
h
t
w
o
h
s
s
d
n
e
g
e
l
,
n
f
o
e
u
l
a
v
e
h
t
s
t
n
e
s
e
r
p
e
r
e
v
o
b
a
s
h
p
a
r
g
l
l
a
n
i
s
i
x
a
-
x
(
n
e
z
i
s
w
o
d
n
i
w
g
n
i
y
r
a
v
h
t
i
w
+
R
d
n
a
+
P
,
+
S
=
Σ
n
o
s
t
l
u
s
e
r
n
o
i
t
a
u
l
a
v
E
:
2
e
r
u
g
i
F
Collapse
(r ,p,s)
1
(r ,p,s)
2
valid Path
impossible path being accepted
if not checking return addresses
Figure 3: Two states collapse if return addresses are
not checked
each automata. As seen from the graphs, the per-
centage of states with fanout(q) = 1 increases as n
increases, especially when n is small.
We note that average branching factor as introduced
in [20] is a conceptually similar measure. Here we
prefer to use fanout because fanout measures the
property of an automaton, whereas average branch-
ing factor is a property of executions of the program,
as well. Another diﬀerence is that fanout considers
all possible transitions regardless of whether the sys-
tem call that triggers it is “harmful” as determined
in [20] or not. Thus for any particular automaton,
fanout should have a much higher value than aver-
age branching factor, which is used in [5, 6, 20].
3.2.2 Overhead
The previous three measures give evidence that
growing Σ or n makes mimicry attacks more dif-
ﬁcult. However, doing so also increases the cost of
the anomaly detector. We would thus like to mea-
sure the performance overhead in order to ﬁnd the
best conﬁguration of Σ and n.
The ﬁrst measure we evaluate is the cost of extract-
ing program counters and return addresses. We
run two sets of tests, one with and one without
the Linux kernel conﬁgured to extract return ad-
dresses from the process when a system call is made,
and measure the time it takes to do a Linux kernel
compilation. Results (Table 2) show that the per-
formance hit is especially noticeable in the system
time, which measures the time spent in the kernel.
However, this translates to less than 6% increase
in the overall execution time. Therefore, utilizing
Σ ∈ {P, R, P+, R+} introduces only moderate over-
head.
We next consider the amount of processing the
anomaly detector has to do when a system call is
made. At any point in time, the anomaly detec-
tor must track the active states q ∈ Q, as well
as the transitions that the next input symbol from
Σ may trigger (“active transitions”). When a sys-
tem call is made, active transitions are examined
to determine the next active states and next active
transitions.6 We simulate executions of the FTP
and HTTP server programs and measure the num-
ber of active transitions whenever a system call is
made. Finally we calculate the average of these ﬁg-
ures and present them in the fourth column of Fig-
ures 1 and 2. As shown in these graphs, growing Σ
or n reduces the number of active transitions and
thus the processing time of the anomaly detection
system. Another observation is that when n ≥ 3,
increasing n seems to have less eﬀect and the active
number of transitions becomes very close to one.
Memory usage and storage overhead is another im-
portant measure of performance. As a coarse mea-
sure of the storage overhead, here we calculate |δ|
for each of the automata; the results are pictured
in the last column of Figures 1 and 2. Intuitively,
growing Σ or n should increase the size of δ, due to
the increase in granularity and accuracy of the au-
tomaton. This is conﬁrmed by graphs in Figure 1.
However, graphs in the last column of Figure 2 sug-
gest opposite results, as the size of transition func-
tion of Σ = R+ is less than those of Σ = P+ and
Σ = S+ for some values of n. A closer look at the
automata reveals that the average length of σ ∈ Σ
(number of system calls in an atomic unit) is larger
in the case Σ = R+ than it is when Σ ∈ {S+, P+},
leading to a reduced number of states and a smaller
transition relation for some values of n. This is true
for all four FTP and HTTP programs in our im-
plementation of the pattern extraction algorithm.
However, whether this holds for other pattern ex-
traction algorithms remains future work.
3.3 Discussion and recommendations
Looking at the ﬁrst axis (runtime information cap-
tured by the anomaly detector), we observe that
no checking (seconds)
checking (seconds)
average of 3 tests
average overhead
overall
user
system
overall
user
system
80.205
66.397
13.103
84.934
66.917
16.633
5.896 %
0.783 %
26.940 %
Table 2: Performance overhead for checking return addresses
checking return addresses (Σ ∈ {R, R+}) greatly in-
creases the diﬃculty of mimicry attacks. Although
these addresses could possibly be forged by attack-
ers (see Section 4),
it requires not only detailed
understanding of the vulnerable program and its
automaton, but also careful crafting of the attack
code and suﬃcient buﬀer size for it. Since the per-
formance overhead for checking return addresses is
moderate (Table 2), an anomaly detection system
should always check return addresses.
As for the second axis, the evidence suggests that
forming atomic units from variable-length subse-
quences makes mimicry attacks diﬃcult even with
a small value of n. This is an interesting result, as
a small value of n indicates smaller memory usage
and storage overhead (last column of Figure 2). Al-
though Σ ∈ {S+, P+, R+} introduces nondetermin-
ism into the automaton (supposing that the tech-
nique of [13, 24] is used), with n ≥ 2 there are fewer
than two active transitions on average, and thus the
system processing time should be suﬃciently small.
The third axis (value of n) shows some tradeoﬀ
between accuracy and performance. Since increas-
ing n has little eﬀect on improving accuracy when
Σ = R+ and n ≥ 2 (refer to the ﬁrst 4 columns in
Figure 2), we consider the setting of Σ = R+ and
n = 2 as a general recommendation, which makes
mimicry attacks diﬃcult with reasonably low costs
in performance. (Some complicated programs might
require n to take a slightly bigger value, with an in-
crease in performance overhead.)
However, choosing Σ ∈ {S+, P+, R+} requires an
extra step in constructing the automaton, which is
to extract the variable-length patterns. Diﬀerent
parameter settings in the pattern extraction algo-
rithm could yield very diﬀerent results. It remains
future work to analyze the best pattern extraction
algorithm and its parameter settings. Nevertheless,
our relatively simple implementation of the pattern
extraction algorithm produces very promising re-
sults for monitoring accuracy and performance.
4 Program counter and return ad-
dress forgery
A presumption for the analysis of Section 3 was that
an attacker is able to forge the program counter and
return addresses of the process execution stack. In
a gray-box monitoring approach, these values are
extracted by the monitor automatically per system
call, by directly examining the relevant portions of
the process address space. As such, these values
constitute state that controls the subsequent execu-
tion of the process upon return of the system call
from the kernel, due to the mechanics of process
execution.
It is therefore not obvious that an at-
tack could eﬀectively forge these values: For exam-
ple, the ﬁrst system call of the attack would seem-
ingly return control to the program that the pro-
cess should be running.
Indeed, prior work that
proposed monitoring return addresses [3] largely dis-
carded the possibility that these values could be un-
detectably forged.
In this section we describe how these values can, in
fact, be undetectably forged. We describe this at-
tack for the Linux execution environment, though
our approach can be generalized to other environ-
ments, as well. The principle behind our attack is