(ensures b ⇒ log k = ∅)
val encrypt: k:key → n:nonce → a:ad → p:plain → ST (c:cipher)
(requires b ⇒ lookup_nonce n (log k) = None)
(ensures (b ⇒ log k(cid:2) = log k ++ (n,a,c,p)))
val decrypt: k:key → n:nonce → a:ad → c:cipher →
ST (o:option plain)
(ensures b ⇒ o = lookup (n,a,c) (log k))
(cid:2)
As in §II, we have a multi-instance idealization, with a log
for each instance stored within an abstract, stateful key; and
we provide a proof-only function log to access its current
contents in logical speciﬁcations. Hence, key generation
allocates an empty log for the instance; encryption requires
that the nonce be fresh and records its results; and decryption
behaves exactly as a table lookup, returning a plaintext if,
and only if, it was previously stored in the log by calling
encryption with the same nonce and additional data.
This step of the construction is entirely veriﬁable by
typing. To this end, we supplement its implementation with a
precise invariant that relates the AEAD log to the underlying
PRF table and MAC logs. For each entry in the log, we
specify the corresponding entries in the PRF table (one for
the one-time MAC key, and one for each block required
for encryption) and, for each one-time MAC key entry, the
contents of the MAC log (an encoded message and the tag
at the end of the ciphertext in the AEAD log entry). By
typing the AEAD code that implements the construction,
we verify that the invariant is preserved as it completes its
series of calls to the PRF and MAC idealized interfaces.
Hence, although our code for decryption does not actually
decrypt by a log lookup, we prove that (when b holds) its
results always matches the result of a lookup on the current
log. As usual, by setting all idealization ﬂags to false, the
veriﬁed code yields our concrete TLS implementation.
Security bounds Theorem 2 can be specialized to provide
precise security bounds for the various AEAD ciphersuites:
Construction
AES128-GCM,
AES256-GCM
ChaCha20-
Poly1305
(cid:9)(cid:7)
Aead(A[qe, qd, (cid:2)p, (cid:2)a]) ≤
Prf
+ qd
1 + (cid:4)p
16
(cid:4)p+(cid:4)a+46
qe
16
(cid:4)
(cid:4)
(cid:4)
(cid:8)
B
(cid:4)
(cid:8)
2128 ·
B
2103 ·
(cid:4)
(cid:4)
qe
Prf
+ qd
1 + (cid:4)p
64
(cid:4)p+(cid:4)a+46
16
(cid:7)
(cid:7)
(cid:7)
(cid:7)
+ qd + 1
(cid:9)(cid:7)
+ qd
VI. FROM AEAD TO STREAM ENCRYPTION (STAE)
TLS requires stream encryption: message fragments must
be received and processed in the order they were sent,
thereby defeating attempts to delete or re-order network
trafﬁc. To this end, encryption and decryption use a local
sequence number to generate distinct, ordered nonces for
AEAD.
In practice, it is difﬁcult to prevent multiple honest servers
from decrypting and processing the same 0-RTT encrypted
stream. Since decryption is now stateful, we must generalize
our model to support multiple parallel decryptors for each
encryptor. In our security deﬁnitions, we thus add a genD
oracle to generate new decryptors (with local sequence
numbers set to zero) from a given encryptor.
473
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
Otherwise, the stateful construction is quite simple: TLS
1.3 combines the sequence number with a static, random
‘initialization vector’ (IV) in the key materials to gener-
ate pairwise-distinct nonces for encrypting fragments using
AEAD. In contrast, TLS 1.2 nonces concatenate the static
IV with a per-fragment explicit IV that is sent alongside
the ciphertext on the network (except for ciphersuites based
on ChaCha20-Poly1305 which follow the TLS 1.3 nonce
format). Some TLS 1.2 implementations incorrectly use
uniformly random explicit IVs [15]. This is much inferior
to using the sequence number because of the high collision
risk on 64 bits. Therefore, in our implementation, we use
the following nonce construction:
(cid:10)
n =
bigEndian8(seqn)(cid:9) iv4
bigEndian12(seqn) ⊕ iv12
for AES-GCM in TLS 1.2
otherwise
where the indices indicate lengths in bytes. The use of
longer static IVs in TLS 1.3 is a practical improvement, as
(informally) it acts as an auxiliary secret input to the PRF
and may improve multi-user security [7]. This is particularly
clear for ChaCha20, where the key, nonce, and counter are
just copied side by side to the initial cipher state.
We easily verify (by typing) that both constructions are
injective for 0 ≤ seqn < 264, which is required (also by
typing) to meet the ‘fresh nonce’ pre-condition for calling
AEAD encryption. Formally, the state invariant for StAE
encryption is that 0 ≤ seqn < 264 and the underlying
AEAD log has an entry for every nonce n computed from
a sequence number smaller than seqn.
StAE functionality A stream authenticated encryption
functionality StAE implements the following interface:
type seqn_t = UInt64.t
val qe: seqn_t (∗ maximal number of encryptions ∗)
val cipherlen: n:nat{ n ≤ (cid:2)p } → Tot nat (∗ e.g. (cid:2)p + MAC.(cid:2)t ∗)
type role = E | D
abstract type state (r:role)
val seqn: mem → state r → Spec seqn_t
val gen: unit → ST (s:state E) (ensures seqn s(cid:2) = 0)
val genD: state E → ST (s:state D) (ensures seqn s(cid:2) = 0)
val encrypt: s:state E → ad → p:plain →
ST (c:cipher{length c = cipherlen (length p))
(requires seqn s < qe) (ensures seqn s(cid:2) = seqn s + 1)
val decrypt: s:state D → ad → c:cipher →
ST (o:option (p:plain{length c = cipherlen (length p)}))
(requires seqn s < qe)
(ensures seqn s(cid:2) = if o = None then seqn s else seqn s + 1)
We omit type declarations for plain, cipher and ad as they
are similar to AEAD. For TLS, the length of additional
data (cid:2)a can be 0 (TLS 1.3) or 13 (TLS 1.2) and the length
of IVs (cid:2)iv is 12. Compared to previous functionalities, the
main change is that keys are replaced by states that embed
a 64-bit sequence number. Accordingly, in this section we
assume that at most 264 fragments are encrypted. The
stateful function gen initializes the encryptor state used by
the encryption algorithm, while genD initializes a decryptor
state used by the decryption algorithm. The stateful encrypt
and decrypt functions require that the sequence number in
the key state does not overﬂow (seqn s < qe) and ensure that it
is incremented (only on success in the case of decryption). In
pseudo-code, authenticated stream encryption is constructed
as follows:
Function gen()
k $← AEAD.keygen()
iv $← byte(cid:3)iv
return {k ← k;
iv ← iv; seqn ← 0}
Function genD(s)
return {k ← s.k;
iv ← s.iv; seqn ← 0}
Function encrypt(s, a, p)
n ← nonce(s.iv, s.seqn)
c $← AEAD.encrypt(s.k, n, a, p)
s.seqn ← s.seqn + 1
return c
Function decrypt(s, a, c)
n ← nonce(s.iv, s.seqn)
p ← AEAD.decrypt(s.k, n, a, c)
if (p = ⊥) return ⊥
s.seqn ← s.seqn + 1
return p
Deﬁnition 7 (Stae): Let Stae(A[qe, qd, (cid:2)p, (cid:2)a]) be the ad-
vantage of an adversary A that makes qe encryption queries
and qd decryption queries in the game below.
Game Staeb(StAE)
s $← StAE.gen()
D ← ∅ E ← ∅
return {GenD, Encrypt,
Decrypt}
Oracle Encrypt(a, p)
if b
c ← bytecipherlen(|p|)
c ← StAE.encrypt(s, a, p)
else
E[s.seqn − 1, a, c] ← p
return c
Oracle GenD(d)
if (D[d] (cid:5)= ⊥) return ⊥
D[d] ← StAE.genD(s)
Oracle Decrypt(d, a, c)
if (D[d] = ⊥) return ⊥
if b
p ← E[D[d].seqn, a, c]
if (p (cid:5)= ⊥)
D[d].seqn ← D[d].seqn + 1
p ← StAE.decrypt(D[d], a, c)
else
return p
The game involves a single encryptor, a table of decryp-
tors D, and a log of encryptions E. For brevity, it relies
on the stateful encryptor and decryptors speciﬁed above,
e.g. encrypts increments s.seqn and Encrypt records the
encryption with sequence number s.seqn− 1. (Equivalently,
it could keep its own shadow copies of the sequence num-
bers.) In contrast with AEAD, decryption only succeeds for
the current sequence number of the decryptor.
Our deﬁnition corresponds most closely to level-4 (state-
ful) LHAE of [16]. In both deﬁnitions the requirement is
that decrypt only successfully decrypted a preﬁx of what was
sent. A difference is that we do not require real decryption
to continue rejecting ciphertexts upon decryption failure. We
also leave length-hiding and stream termination to §VII.
A against Stae, we construct B against Aead with
Theorem 3 (Stae perfectly reduces to Aead): Given
Stae(A[qe, qd, (cid:2)p, (cid:2)a]) = Aead(B[qe, qd, (cid:2)p, (cid:2)a]).
474
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
The implementation of parse and format, and the converse
function for parsing a bytestring into a fragment value, require
precautions to avoid leaking the actual contents length using
side-channels. The code for processing headers does not
depend on the fragment, only on its length after padding.
Stream Closure As explained in §VI, stream integrity
ensures that decrypted trafﬁc is a preﬁx of encrypted
trafﬁc. Complementarily,
relies
fragments, speciﬁed as a predicate
on well-deﬁned ﬁnal
val ﬁnal: fragment (cid:2) → Tot bool, to ensure that no further en-
cryptions are performed on a stream after sending such a
fragment.
the TLS record layer
For LHAE, we extend the stateful key of StAE to record
the termination status of the stream, which can be queried
with the predicate val closed: mem → state r → Spec bool.
Furthermore, we extend the post-condition of encryption to
ensure that the state s(cid:2) after encrypting fragment f satisﬁes
closed s(cid:2) = ﬁnal f. Therefore, upon receiving a ﬁnal fragment,
the decryptor is guaranteed to have received the whole data
stream.
LHSE Construction and Game The construction is:
Function encrypt(s, (cid:2), f )
if closed(s) return ⊥
p ← format((cid:2), f )
c ← StAE.encrypt(s, [], p)
if (ﬁnal f ) s ← closed
return format_record((cid:2), c)
Function decrypt(s, r)
if closed(s) return ⊥
(cid:2), c ← parse_record(v)
p ← StAE.decrypt(s, [], c)
f ← parse((cid:2), p)
if (f (cid:13)= ⊥ ∧ ﬁnal f ) s ← closed
return f
with the same state as StAE—we omit
the unmodiﬁed
functions for generating encryptors and decryptors. When a
ﬁnal fragment is sent or received, we erase the StAE state.
The TLS 1.3 construction uses empty associated data,
relying on implicit authentication of the underlying key and
sequence number. (Our code also supports the older TLS 1.2
construction, which uses 13 bytes of associated data in total,
obtained by appending the protocol version and the content
type to the sequence number of stream encryption.)
Deﬁnition 8 (Lhse): Given LHSE, let Lhse(A[qe, qd]) be
the advantage of an adversary A that makes qe encryption
queries and qd decryption queries in the game below.
Game Lhseb(LHSE)
s $← Lhse.gen()
D ← ∅; F ← ∅
return {GenD, Encrypt, Decrypt}
Oracle GenD(d)
if (D[d] = ⊥)
D[d] ← LHSE.genD(s)
Oracle Encrypt((cid:2), f )
if b
r ← LHSE.encrypt(s, (cid:2), f
r ← LHSE.encrypt(s, (cid:2), f )
else
F [s.seqn − 1, r] ← f
return v
ﬁnal(f ))
Oracle Decrypt(d, v)
if (D[d] = ⊥) return ⊥
sd ← D[d]
if b
if closed(sd) return ⊥
f ← F [sd.seqn, r]
if (f (cid:13)= ⊥) sd.seqn++
if (f (cid:13)= ⊥ ∧ ﬁnal f )
sd ← closed
return f
else
f ← LHSE.decrypt(sd, v)
Figure 3. Constructing a TLS 1.3 record fragment
VII. TLS CONTENT PROTECTION: LENGTH-HIDING
STREAM ENCRYPTION
We are now ready to use stream encryption for protecting
TLS 1.3 trafﬁc, which consists of a sequence of protocol-
message fragments, each tagged with their content type,
while hiding their content, their type, and their actual size
before padding. The steps taken by the record layer to
construct encrypted fragments are depicted in Figure 3,
with apparent size (cid:2) after padding. The last line adds the
(unprotected) record header; for backward compatibility, it
pretends to be a TLS 1.0 AppData record irrespective of its
actual encrypted content type. On the other hand, TLS does
not attempt to hide the record boundaries (as e.g. SSH) so
we do not expect indistinguishability from random for the
resulting record.
Formatting: Content Type and Length Hiding Encryp-
tion and decryption rely on formatting and padding functions
over a type fragment indexed by a length (cid:2) indicating the
public maximal length of its content, speciﬁed as follows:
type len = n:nat {n ≤ 214} (∗ valid record length in TLS ∗)
type fragment ((cid:2):len) = {ct:byte; data:bbytes (cid:2)}
val parse: (cid:2):len → lbytes ((cid:2)+1) → Tot (option (fragment (cid:2)))
val format: (cid:2):len → f:fragment (cid:2) → Tot (p:lbytes ((cid:2)+1))
(ensures parse (cid:2) p = Some f)
These functions must be carefully implemented to prevent
any side channel. We also construct and parse records into