title:Scotch: Combining Software Guard Extensions and System Management
Mode to Monitor Cloud Resource Usage
author:Kevin Leach and
Fengwei Zhang and
Westley Weimer
Scotch: Combining Software Guard Extensions
and System Management Mode to Monitor
Cloud Resource Usage
Kevin Leach1(B), Fengwei Zhang2, and Westley Weimer3
1 University of Virginia, Charlottesville, VA 22903, USA
2 Wayne State University, Detroit, MI 48202, USA
PI:EMAIL
3 University of Michigan, Ann Arbor, MI 48109, USA
PI:EMAIL
PI:EMAIL
Abstract. The growing reliance on cloud-based services has led to
increased focus on cloud security. Cloud providers must deal with con-
cerns from customers about the overall security of their cloud infrastruc-
tures. In particular, an increasing number of cloud attacks target resource
allocation in cloud environments. For example, vulnerabilities in a hyper-
visor scheduler can be exploited by attackers to eﬀectively steal CPU
time from other benign guests on the same hypervisor. In this paper,
we present Scotch, a system for transparent and accurate resource con-
sumption accounting in a hypervisor. By combining x86-based System
Management Mode with Intel Software Guard Extensions, we can ensure
the integrity of our accounting information, even when the hypervisor
has been compromised by an escaped malicious guest. We show that we
can account for resources at every task switch and I/O interrupt, giv-
ing us richly detailed resource consumption information for each guest
running on the hypervisor. We show that using our system incurs small
but manageable overhead—roughly 1 µs every task switch or I/O inter-
rupt. We further discuss performance improvements that can be made
for our proposed system by performing accounting at random intervals.
Finally, we discuss the viability of this approach against multiple types
of cloud-based resource attacks.
1 Introduction
The growing ubiquity of Software- and Infrastructure-as-a-Service has led to
an increase in the cloud computing market. Spending on cloud computing
infrastructure is projected to reach $38 billion in 2016 [14]. At the same time, the
National Vulnerability Database shows that there are 226 security vulnerabili-
ties in Xen, 99 vulnerabilities for VMWare ESX, and 98 vulnerabilities for KVM
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 18) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 403–424, 2017.
DOI: 10.1007/978-3-319-66332-6 18
404
K. Leach et al.
hypervisors [29]. As a result, there is additional concern over security breaches
in cloud environments [20,26].
Such vulnerabilities have already led to exploits related to the improper allo-
cation of cloud resources. For instance, resource-freeing attacks [35] allow a mali-
cious VM guest to take one resource from a victim VM (e.g., more CPU time).
Similarly, vulnerabilities in hypervisor schedulers have been documented [32,49].
Hypervisor vulnerabilities may permit a malicious customer to acquire cloud
resources for free or at the expense of a victim. As a result, there is a need for
cloud providers to guarantee levels of service and billing accountability to their
customers using their infrastructure [24].
Cloud providers make use of virtualization platforms such as the Xen hyper-
visor [18]. Resource allocation is performed by the hypervisor according to the
provider’s conﬁguration corresponding to the customer’s service level. For exam-
ple, a cloud provider might oﬀer more CPU time to a customer that pays more
money—this policy would be enforced by the hypervisor’s scheduler. However,
malicious customers that exploit vulnerabilities in the hypervisor may be able
to evade this policy, obtaining more resources than would be dictated by their
service levels.
In this paper, we present Scotch (Securely Communicating Objective,
Transparent Cloud Health), a technique that leverages two x86 features to accu-
rately account for resources consumed by virtual machines: System Management
Mode (SMM) and Software Guard eXtensions (SGX). SMM permits transpar-
ent access to CPU registers and memory in the underlying operating system,
hypervisor, and guests. SGX allows the creation of encrypted regions called
enclaves that isolate critical execution from a potentially-compromised hyper-
visor or operating system. We can use SMM to track the resources consumed
by each guest such that (1) potentially malicious guests are unaware, and (2)
we can detect previously undetected resource accounting attacks. While SMM
asynchronously measures resource usage, this information can be securely con-
veyed to an individual userspace enclave using SGX. This novel combination
of SMM and SGX enables a new method of accurately measuring and securely
communicating resource usage information in virtualized environments.
We evaluate a prototype of our technique based on the Xen hypervisor. We
show that our technique takes roughly 1 µs to check resource usage during each
context switch and interrupt. We also show how this ﬁxed 1 µs cost can be
amortized across multiple context switches and interrupts by randomly choosing
intervals in which to check resource consumption. Next, we discuss the trade-
oﬀ between the quantity of a resource that can be stolen by a malicious guest
compared to the overhead our technique incurs. Finally, we discuss the types
of attacks for which Scotch is capable of providing accurate resource account-
ing information where other approaches cannot. We note that Scotch does not
automatically decide whether malicious activity is occurring; a direct compara-
tive study against such techniques remains future work.
We make the following contributions:
Scotch
405
– A technique for accurately and transparently measuring system resources
consumed by guest VMs running under a hypervisor,
– A prototype implementation employing the proposed technique for Xen, and
– An experimental evaluation of the prototype measuring accuracy and over-
head of the proposed technique.
2 Background
In this section, we discuss three topics relevant to our proposed technique. First,
we introduce System Management Mode, a special execution mode built into
x86-based CPUs that permits transparent, isolated execution. Second, we discuss
the Xen hypervisor and the types of vulnerabilities that could be leveraged by
a malicious customer to gain or otherwise misuse cloud resources. Third, we
introduce Intel Software Guard eXtensions (SGX), another set of instructions
that enable our approach.
2.1 System Management Mode
System Management Mode (SMM) is a CPU mode available in all x86 archi-
tecture. It is similar to Real and Protected Modes. Originally designed for facil-
itating power control, recent work has leveraged SMM for system introspec-
tion [28,43], debugging [45], and other security tasks [44,46]. In brief, the CPU
enters SMM upon a System Management Interrupt (SMI). While in SMM, the
CPU executes the System Management Handler (SMI Handler), a special seg-
ment of code loaded from the Basic Input/Output System (BIOS) ﬁrmware into
System Management RAM (SMRAM), an isolated region of system memory [6].
Upon completing executing the SMI Handler, the CPU resumes execution in
Protected Mode.
We use SMM as a trusted execution environment for implementing our
resource accounting functions. SMM has been available on all x86 platforms
since the 386, so it is widely available for usage on commodity systems. In addi-
tion, the underlying operating system is essentially paused while the SMI handler
executes. This isolated execution provides transparency to the operating system.
We trust SMM for two main reasons: (1) SMRAM can be treated as secure stor-
age because it is inaccessible by Protected and Real Modes, and (2) the SMI
handler requires only a small trusted code base because it is stored in the BIOS
and cannot be modiﬁed after booting when properly conﬁgured.
The SMI handler is stored as part of the BIOS. Typically, vendors ship SMI
handler code speciﬁc to their platforms. Upon powering the system, the BIOS
loads the SMI handler code into SMRAM before loading the operating system.
After loading the SMI handler, the BIOS prevents further modiﬁcations to the
SMI handler by locking down SMRAM. On Intel and AMD platforms, this is
implemented using a write-once model-speciﬁc register (MSR); upon setting a
406
K. Leach et al.
speciﬁc bit, no other changes can be made to SMRAM (or the associated MSR).
Thus, even if the hypervisor becomes completely compromised, the underlying
SMI handler performing our resource accounting task will remain intact. The
SMI handler is, by default, loaded into a 4 KB region of memory, called the
ASEG segment. We can alternatively load the SMI handler into another segment
of memory called TSEG to allocate more space, often as much as 8 MB.
Finally, as SMRAM is isolated in hardware (i.e., it cannot be mapped by the
MMU unless the CPU is in SMM), a hypothetical DMA attack would not be
able to corrupt resource accounting information stored in SMRAM.
2.2 Xen Credit Scheduler and Resource Accounting
Xen [18] is a widely-deployed open source hypervisor. Xen is responsible for mul-
tiplexing multiple independent guest virtual machines. In a cloud environment,
customers are given access to guest VMs with diﬀerent conﬁgurations according
to how much they pay. For instance, a customer may pay more to the cloud
provider for a VM conﬁgured with more memory, disk space, or nominal CPU
time.
Xen uses the Xen Credit Scheduler [1] by default to manage CPU time. The
Credit scheduler allocates virtual credits to each Virtual CPU (VCPU) that
wants CPU time. Each VCPU can be given more or fewer credits depending on
the service level paid for. That is, the scheduler can distribute more credits to
one customer’s VCPU over another’s based on how much is billed for CPU time.
Every context switch, the scheduler decides which VCPU to run next based in
part on the number of credits that VCPU currently has. While there are other
schedulers Xen can be run with (Cherkasova et al. [13] provide a comparison),
the Credit scheduler is the most commonly deployed scheduler.
Critically, Xen runs a helper function (burn credits in the sched credit.c
ﬁle) at a regular interval that deducts credits from the currently executing
VCPU. In brief, this function approximates CPU usage over time by polling
the currently-executing context. Previous research [24,32,49] discussed in Sect. 7
has already explored vulnerabilities related to this approximation. If a malicious
guest knows about the interval at which burn credits is executed, the guest can
measure time precisely and yield the CPU before the credits are accounted for.
In doing so, a malicious attacker can potentially use CPU time without being
billed for it.
In addition, Xen maintains credit information (and other metadata) about
each guest in memory. Guests that escape the VM [15] could potentially alter
such data, yielding incorrect accounting (and later, billing) information. For
example, by deducting credits more rapidly from a benign victim guest, the vic-
tim’s apparent CPU consumption could be made to exceed its real consumption.
2.3 Software Guard eXtensions
Intel SGX is another new set of instructions that permits the creation of enclaves
in userspace [23]. These enclaves are encrypted regions of memory (code and
Scotch
407
data) that cannot be accessed from outside of the enclave context. SGX allows
computation to occur securely, even if the operating system or hypervisor is
malicious.
SGX is intended to secure local computation; I/O instructions are illegal
while inside an enclave. Instead, SGX-based applications must call out (via
OCALLs) to switch to untrusted OS code to execute I/O on behalf of the enclave.
SGX applications are therefore unable to monitor other activity happening on
the system (e.g., through shared memory or device I/O) securely. In this paper,
we use SMM to measure system-wide usage and then report this information to
the end user via an SGX enclave application.
3 Threat Model
In this section, we discuss three types of attacks against which Scotch is capable
of reliably accounting: (1) scheduler attacks, (2) resource interference attacks,
and (3) VM escape attacks. These attacks increase in terms of expressive power
and detriment against a hypervisor.
3.1 Scheduler Attacks
We consider an attacker capable of exploiting vulnerabilities in the hypervisor’s
scheduler to acquire system resources for the malicious VM at the expense of
a victim VM. This approach allows the attacker to prevent the victim from
accessing rightful resources and also allows the attacker to perform expensive
computations for free.
Figure 1a shows the non-attack scenario, a potential schedule of two benign
CPU-bound VMs competing for CPU time on one physical CPU. Both guests 1
and 2 are given equal time, and when the VMM assesses which VM to bill, each
guest is billed for its fair share of CPU time. However, as shown in the attack
scenario in Fig. 1b, a malicious guest could yield at precise times to avoid when
the VMM attempts to assess which guest is running. As a result, a malicious
VM could appear to never consume CPU time. Zhou et al. [49] showed that such
an attack can consume the vast majority of CPU time under proper conditions.
3.2 Resource Interference Attacks
Resource interference attacks work by exploiting VM multi-tenancy. That is,
all VM guests on a single hypervisor will have to share the underlying physical
resources at some point (e.g., there is only one system bus). A clever attacker VM
can execute precise, calculated workloads that could impact the performance of
other victim VMs or simply improve its own performance. For example, Resource
Freeing Attacks [35] work by forcing a victim VM to free up a resource for the
attacker to use. For example, the victim might be running a webserver, in which
case the attacker can ﬂood requests to the victim, cause it to block on I/O, and
free up CPU time for the attacker. In this paper, we consider an attacker capable
of degrading victim guest performance in this manner.
408
K. Leach et al.
VMM decides to bill a guest:
VMM decides to bill a guest:
1
2
1
1
2
1
2
1
1
2
2
1
2
1
1
1
. . .
1
2
1
2
1
1
1
2
1
. . .
0ms
30ms
60ms
90ms
120ms 150ms 180ms
0ms
30ms
60ms