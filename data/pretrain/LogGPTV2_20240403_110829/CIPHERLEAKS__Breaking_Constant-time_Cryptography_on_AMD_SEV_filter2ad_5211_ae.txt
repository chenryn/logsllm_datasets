83 e0 01
f3 c3
mov
shr
and
repz retq
(% rax ,% rdx ,8) ,% rax
%cl ,% rax
$0x1 ,% eax
......
Listing 4: Assembly code snippet of BN_is_bit_set().
4.3 Evaluation
All end-to-end attacks shown in this section were evaluated
on a workstation with 8-Core AMD EPYC 7251 Processor.
The victim VM was conﬁgured as SEV-ES-enabled VMs
with one virtual CPU, 4 GB DRAM, and 30 GB disk
storage. The versions of the guest and host OS, QEMU, and
OVMF are the same as described in Section 3.3.3. The latest
OpenSSL from Github was used in the evaluation (com-
mit:8016faf156287d9ef69cb7b6a0012ae0af631ce6,
Nov, 4th, 2020). These attacks can also be applied to VMs
with multiple vCPUs as well, but the adversary needs to
collect ciphertext-plaintext dictionaries for each vCPU
independently, since each vCPU has its own VMSA.
To locate the physical address of the target function, the at-
tacker must train the pattern of ciphertext changes in a training
VM (a different VM from the victim VM). In the training VM,
the attacker ﬁrst repeats the RSA encryption and the ECDSA
signing several times by calling APIs from the OpenSSL li-
brary (with the same version as the targeted OpenSSL library
in the victim VM). The attacker also collects the NPF se-
quence, the corresponding VMSA ciphertext changes (see
Section 3.2), as well as the ground truth (guest physical ad-
dress) for the target functions. In our experiments, the pattern
of ciphertext changes is very stable, especially for a func-
tion call without many branches (e.g., ECDSA_do_sign() for
ECDSA). As such, simple string comparison is sufﬁcient
for pattern matching and no sophisticated machine learning
techniques are required.
In the attack phase, the victim VM performs an RSA
encryption or an ECDSA signature using the OpenSSL
library, which can be triggered by the attacker remotely but
it is not a necessary condition for a successful attack. As the
attacker does not know the start time of the targeted program,
she must consider every newly observed CR3 ciphertext as
the beginning of the targeted crypto code. It clears all P bits
and starts monitoring the pattern of ciphertext changes. If the
expected ciphertext change pattern is observed, the attacker
can continue to steal the secret from the victim VM.
In both of the two cases we presented, we repeated the ex-
periment 10 times and each time the attacker was able to iden-
tify the trained ciphertext pattern and recover the private key d
and the secret nonce k with 100% accuracy. We measured the
time needed to steal the 2048-bit private key d and the secret
nonce k 10 times after the ciphertext change pattern is iden-
tiﬁed. The average time needed to obtain the private key d is
0.40490 seconds with a standard deviation of 0.08920 seconds.
The average time needed to steal the secret nonce k is 0.10226
seconds with a standard deviation of 0.00330 seconds.
5 Countermeasures
In this section, we ﬁrst discuss several potential software-level
countermeasures for the CIPHERLEAKS attack. We then show
the CIPHERLEAKS attack can still work by exploiting the Ad-
vanced Programmable Interrupt Controller (APIC) to collect
the function’s internal state. Thus, none of that software may
work properly. We also discuss hardware-level countermea-
sures in Section 5.3.
5.1 Software Mitigation
Solutions to the ciphertext side channel can be categorized
into two kinds: preventing the collection of the plaintext-
ciphertext dictionary and preventing exploitation by modify-
ing targeted functions.
Preventing dictionary collection. One potential solution is
to remove unnecessary IOIO_PROT events. However, other
NAE event may still serve the same purposes as IOIO_PROT.
More importantly, as we have shown in Section 4.2, the hyper-
visor can steal the nonce k with only two plaintext-ciphertext
pairs. Complete removal of all such leak sources is required
to make the solution effective, almost impossible in SEV’s
current design.
726    30th USENIX Security Symposium
USENIX Association
Preventing exploitation. To ﬁx the target functions, changes
to the whole software stack may be necessary. We list three
potential solutions below, but unfortunately, these approaches
can be bypassed using the method we outline in Section 5.2.
• Masking the return value in RAX. If the return value
only needs a few bits to represent, compilers can intro-
duce randomness into the higher bits of the return value.
For example, if the return is 1, then a random number
can be added to mask the RAX, e.g., by returning RAX
= 0x183af6b800000001, where the higher 4-byte are gen-
erated randomly. The caller of the function can ignore the
higher bits. In this way, the ciphertext of RAX will be new
and thus unknown to the adversary.
• Passing return values through memory or other regis-
ters. The return value can be passed to the caller via stack.
As the physical address of the stack frame is hard to predict
and collect beforehand, attacks can be prevented. Similarly,
the software can also write the return value to other registers
(e.g., R10), which can avoid using the RAX register.
• Using inline functions or keep the callee code on the
same page. If the code of the caller and the callee are on the
same page, for instance, by using inline functions, no NPFs
will be triggered during function return.
These three potential solutions require signiﬁcant rewriting
of sensitive functions, which may require compiler-assisted
tools to perform. However, the success of all these solutions
relies on the assumption that the hypervisor cannot infer the
internal states of a function call, which, as we will show in
Section 5.2 shortly, is not true.
5.2 Function’s Internal States Intercept
We present an APIC-based method to allow the hypervisor to
single-step the functions in order to intercept the function’s
internal states. Therefore, the adversary can learn the internal
states of a targeted function. Our method, though conceptu-
ally similar to SGX-Step [34], requires integrating the APIC
handling code into the VMEXIT handler of KVM. Moreover,
unlike SGX-Step that uses a static APIC interval to interrupt
the controller, we need to select APIC intervals as the execu-
tion time of VMRUN is not constant. More speciﬁcally, the
following steps are taken to interrupt VMRUN:
 Infer the functions’ physical addresses. The attacker ﬁrst
obtains the guest’s physical addresses of the target function,
namely gPAt, using the execution state inference method we
introduced.
 Dynamically determine APIC timer intervals. The at-
tacker follows a “0 steps is better than several steps" princi-
ples to single step or intercept a small advancement of the
execution of the target function. Because the time used for
VMRUN instruction is not ﬁxed, the hypervisor always starts
with a small APIC interval to single step into the guest VM
as much as possible. The hypervisor then checks the VMSA
ﬁeld to see if the ciphertext in VMSA has changed; if so, it
means that one or several registers’ value have changed and
the guest VM executes one or several instructions before in-
terrupted by APIC. The algorithm to choose the proper APIC
time interval is speciﬁed in Algorithm 1.
Algorithm 1: Dynamic Timer Interval Prediction
int apic_time_interval; //APIC interrupts the VM after the interval
int roll_back ; //roll back to a small interval after any movement
apic_time_interval = 20 ;
roll_back = 10; // initialize the setting, may vary in different CPU
while true do
apic_timer_oneshot(apic_time_interval);
__svm_sev_es_vcpu_run(svm->vmcb_pa);
svm_handle_exit(vcpu, physical interrupt VMEXIT) ;
if not observe VMSA changes then
apic_time_interval ++;
else
end
end
apic_time_interval = apic_time_interval - roll_back ;
 Collect the target function’s internal states. The hyper-
visor can collect the internal states of the target function after
a WBINVD instruction which is used to ﬂush VMSA’s cache
back to the memory. With a known binary, the hypervisor
may also determine the number of the instructions that have
been executed by comparing the ciphertext blocks changes
with the assembly code.
Evaluation. To evaluate the effectiveness of single-stepping
the guest VM’s execution, we perform experiments on a work-
station with 8-Core AMD EPYC 7251 Processor. The victim
VM was conﬁgured as SEV-ES-enabled VMs with two virtual
CPUs, 4 GB DRAM, and 30 GB disk storage. The versions
of the guest and host OS, QEMU, and OVMF are the same
as described in Section 3.3.3. Unlike the previous settings,
we enable SEV-ES’s debug option in the guest policy, which
allows the hypervisor to use SEV_CMD_DBG_DECRYPT com-
mand to decrypt the guest VM’s VMSA. This conﬁguration
is only to collect ground truth of the experiments, which will
not inﬂuence the guest VM’s execution and is not a required
step in practical attacks.
To make the experiments representative, we randomly se-
lect the starting point during the VM’s execution to initi-
ate our tests. In each test, we follow Algorithm 1 to col-
lect 100 trials. Each trial is collected only when the hy-
pervisor observes changes in the register’s ciphertext in the
VMSA. Meanwhile, we collected ground truth by using the
SEV_CMD_DBG_DECRYPT command from the hypervisor to de-
crypt the RIP ﬁled in VMSA. We use ∆ to represent the
number of bytes that the RIP has advanced between two con-
secutive VMEXITs. Note that the SEV_CMD_DBG_DECRYPT
command will not affect the execution of the guest VM. We
repeat the test 60 times. In total, 6000 trials are collected.
USENIX Association
30th USENIX Security Symposium    727
SEV-SNP.
6 Applicability to SEV-SNP
To mitigate memory integrity attacks against SEV and SEV-
ES [23,27,35,36], AMD introduced another extension of SEV,
named SEV Secure Nested Paging (SEV-SNP) [18]. AMD
released the whitepaper describing in January, 2020 [4] and a
hardware API document in August, 2020 [6]. Nevertheless,
commercial processors supporting SEV-SNP have not been
released yet. According to the technical details revealed in
SEV-SNP’s whitepaper, all prior attacks listed in Section 7
can be mitigated by SEV-SNP.
In this section, we discuss some of the new features intro-
duced by SEV-SNP and discuss CIPHERLEAKS’s applicabil-
ity on SEV-SNP.
6.1 Overview of SEV-SNP
SEV-SNP protects guest VM’s memory integrity by introduc-
ing a new structure called Reverse Map Table (RMP). Each
RMP entry is indexed by the system page frame numbers; it
contains the page states (e.g., page’s ownership, guest-valid,
guest-invalid, and guest physical address) of this system page
frame. The SEV-SNP VM must interact with the hypervisor
to validate each RMP entry. Speciﬁcally, the guest VM needs
to issue a new instruction PVALIDATE, a new instruction for
guest VMs, to validate a guest physical address before the ﬁrst
access to that guest physical address. Any memory access to
an invalid guest physical address will result in an NPF. More
importantly, once a guest page is validated, the hypervisor
cannot modify the RMP entry. Therefore, the guest VM itself
can guarantee that its memory page is only validated once,
and a one-to-one mapping between the guest physical address
and system physical address mapping can be maintained.
As shown in Figure 4, RMP limits the hypervisor’s capabil-
ities of managing NPT. The RMP check is performed before
the NPT walk is ﬁnished. Without RMP check, the hypervisor
can easily remap guest physical address (gPA) to an arbitrary
memory page by manipulating the page table entry in the NPT.
With RMP check, if the hypervisor remaps the guest physical
address to a memory page not belonging to the current guest
VM or a memory page mapped to the current guest VM’s
other guest physical address, an invalid NPF or a mismatch
NPF will be triggered, which can prevent attacks that require
modiﬁcation of the NPT [15, 26, 27].
Another protection enabled by RMP is that the ownership
included in the RMP entry restricts the hypervisor’s write
permission towards the guest VM’s private memory, which
can prevent attacks that require directly modifying the cipher-
text [11, 23, 36]. More details about existing attacks and how
RMP can mitigate these attacks are introduced in Section 7.
(a) Interval when VMSA changes.
(b) ∆ when VMSA changes.
Figure 3: Performance of stepping VM execution using APIC.
Among the 6000 trials, 454 lead to ∆ greater than 20 because
of a jmp instruction (thus can be ﬁltered out). For the remain-
ing 5546 trials, the APIC-timer intervals used to trigger APIC
interrupts range from 40 to 90 (with a divide value of 2, this
translates from 80 to 180 CPU cycles). The distribute is shown
in Figure 3a. These results suggest that the runtime of the
VMRUN instruction is not constant (on SEV-ES VM), which
may be caused by the presence of VMCB cache states and
the non-constant time VMSA integrity checks. Even though
VMRUN is not constant-time, as shown in Figure 3b, 78.7%
trials lead to ∆ smaller than 3 bytes. 90.1% trials lead to ∆
smaller than 5 bytes. Note that a typical x86 instruction has
2 to 4 bytes [16]. These results show that the APIC-based
method can successfully interrupt the execution of the guest
VM with very small steps.
5.3 Hardware Countermeasures
The root cause of the ciphertext side channel is the mode of
encryption adopted in the memory encryption. AMD uses
the XEX encryption mode in all SEV versions (e.g., SEV,
SEV-ES, and SEV-SNP) and all CPU generation (e.g., Zen,
Zen 2, and Zen 3). This results from a well-known dilemma in
the design of memory encryption: On one hand, if the cipher-
text of each 16 blocks is chained together (like in the CBC
mode encryption), the static mapping between ciphertext and
plaintext can be broken. However, changing one bit in the
plaintext will lead to changes in a large number of ciphertext
blocks. On the other hand, if freshness is introduced to each
block (like the CTR mode encryption used in Intel SGX), a
large amount of memory needs to be reserved for storing the
counter values. However, this idea may be applied to only
selected memory regions, such as VMSA. In this way, the
CIPHERLEAKS attack against VMSA can be prevented. To
our knowledge, the hardware patch that will be integrated in
SEV-SNP takes a similar idea for protecting VMSA. How-
ever, the ciphertext side channel still exists in other memory
regions.
Alternatively, a plausible hardware solution is to prevent
the hypervisor’s read accesses to the guest VM’s memory.
This idea could be implemented with the RMP table (see
Section 6), by restricting the read access from the hypervisor
on guest pages. However, this feature is not yet available in
728    30th USENIX Security Symposium
USENIX Association
5060708090Interval0100200300400500600700800Num123456789101112131415161718DeltaRip02004006008001000120014001600Numextract guest VM’s memory [35]. However, SEV-ES and SEV-
SNP ﬁx the unencrypted VMCB problem by encrypting most
registers in the VMSA page during VMEXIT.
Unauthenticated encryption. The hypervisor can read and
write the SEV/SEV-ES VM’s memory because there is no au-
thentication in these two modes. Previous research [9,11,36]
showed by reverse-engineering the physical address-based
tweak function, the adversary is able to generate useful cipher-
text when there are enough known plaintext-ciphertext pairs.
However, EPYC processor after the EPYC 3xx1 series ﬁxed
this problem by increasing the entropy of the tweak functions,
which makes it impossible to reverse engineer the physical
address-based tweak function. SEV-SNP further ﬁxed this
problem by removing hypervisor’s write permission in guest
VM’s memory.
Unprotected NPT. Hetzelt and Buhren [15] ﬁrst demon-
strated address translation redirection attacks in SEV and
discussed changing guest VM’s control ﬂow by remapping
guest pages in the nPT. This method is later explored by other
research works [26,27]. In the SEVered attack [27], the adver-
sary extracts guest VM’s memory by changing the memory
mapping in some network-facing applications. The adversary
ﬁrst triggers some network requests and then changes the