then 
Static  analysis  can  be  conducted  in  a  manner  that  is 
either sensitive or insensitive  to the program control-flow. 
Flow-insensitive analysis is generally  more efficient at the 
price of being less precise  [ 1 I ,  141. 
A  flow sensitive analysis  first  constructs the Control- 
Flow Graph (CFG) of the program. Such a graph consists of 
nodes which are basic  blocks  and  edges that  indicate con- 
trol transfers  between blocks. The analysis then proceeds to 
solve the data-flow problem based on the CFG. 
It is important to note that control-flow analysis is the 
first stage of  the  analysis-it 
provides information  on  the 
program call  structure and control  transfer that is essential 
for  subsequent  data-flow  analysis.  Without  this  informa- 
tion, data-flow analysis is restricted  to the basic-block level 
only  and  will  be  fundamentally  ineffective  for  programs 
where data usage is dependent on program  control-flow. 
The technical  basis  of our approach  to defeating static 
analysis  is  to  transform  the  program  control-flow  to  a 
highly  data-dependent nature; that is, the control-flow and 
data-flow  analysis  are  made  co-dependent. The  results  of 
this  co-dependence  are:  (1)  increased  complexity  of  both 
analyses; and ( 2 )  reduced analysis precision. 
4.  Degeneration of control-flow 
In  a  normal  program,  determining  the  CFG  is  a 
straightforward operation when branch instructions and tar- 
'is a linear operation of com- 
gets are easily  identifiable-it 
plexity  O(n), where n is the  number of basic  blocks in  the 
program. 
The  first  set  of  code  transformations  that  we  employ 
modify high-level  control transfers  to obstruct  static detec- 
tion of the program CFG. We perform this transformation  in 
two steps. In the first step, high-level  control  structures are 
transformed  into  equivalent  if-then-goto  constructs.  This 
transform is illustrated  in Figure 2 in which the sample pro- 
gram in Figure 2(a) is transformed  into the structure in Fig- 
ure 2(b). 
Secondly, we modify the goto statements such that the 
goto target  addresses are determined dynamically.  In C, we 
implement  this  by  replacing  the  goto  statements  with  an 
entry to a switch statement, and the switch variable is com- 
puted  dynamically  to determine which  block  is  to  be  exe- 
cuted  next.  The  transformed  code  (based  on  the  code 
segment of Figure 2(a)) is depicted  in Figure 3. 
With  the  above  transformations, direct  branches  are 
replaced  with  data-dependent instructions.  As a result, the 
CFG that can be obtained from static branch  targets degen- 
erates  to  a  flattened  form  shown  in  Figure  3.  It  can  be 
shown that this degenerate form is equivalent to the control- 
flow perceived by a flow insensitive  analysis [14]. Without 
"i 
L1:  11  (!  (a lO) 
b--. 
, l ( ! ( b > l O ) )  
a++; 
1 
use(b); 
(a) 
Figure 2: Dismantling high-level constructs 
L4:  use (b) 
195 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:00:07 UTC from IEEE Xplore.  Restrictions apply. 
I 
swVar =  1 
a:l; 
b.2; 
swVar = 
2; 
elSe 
Figure 3: Transforming to indirect control transfers 
knowledge of the branch  targets and the execution order of 
the  code blocks, every  block  is  potentially the  immediate 
predecessor andfor successor of every other block. 
In  the  absence  of  the  branch-target  information,  the 
complexity of building the static CFG is determined by how 
easy it is, at each branching point, to discern the latest defi- 
nition of the switch variable. This is exactly a classical use- 
n-def  data-flow  problem  [ l l ] .  Note  that  we  have  trans- 
formed the control-flow analysis into a data-flow problem. 
The complexity of data-flow analyses is influenced by vari- 
ous program characteristics such as aliasing [ 111. We show 
in  the next  section  how  manipulation of  data flow charac- 
teristics  can yield  additional complexity for data-flow anal- 
ysis  and  ultimately  render  static  analysis  an  extremely 
difficult problem, if not entirely infeasible. 
5.  Data-flow transformations 
After  the  transformations described  in  Section  4, the 
complexity  of  building  the  CFG now  hinges  on  the  com- 
plexity  of determining branch targets, which  is in essence a 
use-n-def  data-flow  problem.  Many  classical  data-flow 
problems  are proven to be NP-complete[l2,  161. A  funda- 
mental difficulty  that  data-flow analysis must deal  with  is 
the  existence of  aliases in  the program.  Alias  detection  is 
essential  to  many  data-flow  problems.  For  example,  in 
order to determine the  live definition problem, a data-flow 
algorithm  must  understand  the  alias  relationships  among 
variables  since  data  quantities  can  be  modified  when 
assignments are performed  on any aliased  names. 
Our second set of transformations focuses on the intro- 
duction of non-trivial  aliases into the program to influence 
the  computation  and  the  analysis  of  the  branch  targets. 
These transformations include the following techniques: 
Index computation of  branch targets: Consider the 
code segment in  Figure 4(a).  A  use-n-def analysis to  ana- 
lyze where the switch variable swVur (contains branch tar- 
get  information)  is  defined  is  straightforward  (the dashed 
line  indicates  a  use-def  information  chain). Now  consider 
the  code  segment  in  Figure  4(b)  in  which  a  global  array 
“global-array”  is  introduced  and  the  value  of  swVar  is 
computed  through  the elements  of  the  array  VI() and $20 
indicate  complex  expressions  of  subscript  calculation). 
Replacing the constant assignment in Figure 4(a)  with indi- 
rect  accesses  of  the  array  implies that  the  static  analyzer 
must deduce the array  values before the value of swVur can 
be determined 
Aliases through pointer manipulation: We introduce 
aliases in the following steps: 
In each function, we introduce an arbitrary number of 
pointer variables. We insert artificial basic blocks, or code in 
existing  blocks,  that  assign  the  pointers  to  existing  data 
variables including elements of the global array. 
through 
We replace references to variables and array elements 
with 
these  pointers.  Previously 
indirection 
meaningful  computations  on  data  quantities  are  replaced 
with  semantically  equivalent  computation  through  their 
aliased  names  (assignments  to  the  global-urruy  elements 
may appear as assignments to a pointer variable) 
As  much  as possible, uses  of  the  pointers  and  their 
definitions are placed in different blocks. This is to introduce 
difficulties for the use-n-def analysis. 
Some of  the basic blocks will  execute, and others are 
simply dead code. Since the static analyzer does not  know 
which  blocks  actually execute, and  since definition  of  the 
pointers  and  their  uses  are placed  in  different blocks,  the 
analyzer will  not be able to deduce which  definition is live 
at  each  use  of  the  pointer-all 
pointer  assignments  will 
appear live. 
For  example, a static analysis performed  on  the  code 
segment in Figure 5(a) can quickly determine that only the 
second  definition  of  the  pointer  variable  p  will  carry  to 
point  A  during  execution.  However,  if  the  basic  block  in 
Figure 5(a) is decomposed into two blocks and the transi- 
196 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:00:07 UTC from IEEE Xplore.  Restrictions apply. 
I 
I 
............ 
defined as  4 
...... 
....... 
........... 
..... 
............. 
b = b t a ;  
if  (  ! (b> 1 0) ) 
swVar = 5; 
...... 
else 
Va  I '$, 
1 
goto switch 
int global-array[ TI 
...'._I 
delined as  ? 
........... 
..................................... 
defin'ed as ? 
._." 
...... 
b = b t a ;  
if  (  !(b>10) ) 
swVar  = gIobaI-array-lfl(  )I; 
..... 
s wVa r = g lo ba I-a r ra y  [I2 (  )I; ........  ..... 
else 
._.." 
..... 
Figure 4: Example illustrating dynamic computation of branch targets 
1  goto switch 
I 
(b) 
tion  between  blocks  is  obfuscated  using  our flatten-and- 
jump  technique  as depicted in  Figure 5(b), the  static ana- 
lyzer  will  report  both  alias  relations   and   
because  it does not know which block executes first. 
Figure 6 illustrates example transformations as applied 
to the program in  Figure 2(a). The result  of  the transforms 
is the following: a static analyzer will report  imprecise alias 
relations  that  suggest that  the  global  array  is  altered, and 
that  its  contents do not  remain  static.  With  sufficient  alias 
introduction, the analysis will resolve an array element to a 
large  set  of  possible  values.  This  in  turn  implies  that,  at 
each use, the switch  variable  that controls the flow of exe- 
cution in the degenerate form of the program can take on a 
large set of values. 
It can be argued that if an adversary can capture the ini- 
tial  value  of  swVur, he  can  then  find the  first block  to  be 
executed,  and  from  there  identify  each  subsequent  block. 
While this may  allow the adversary  to recover some of the 
original control flow, it is important to note that this analy- 
sis  requires  an  interpretation  of  every  preceding  block  in 
order  to  recover  the  current  basic  block-an 
effort  that 
exceeds the cost of most static analyses. 
It  can  also be  argued  that  simulation is  required  only 
once for each block, and as a result, the complexity of ana- 
p = a; 
a = a t b ;  
p  = b; 
b = 3; 
'p  =  a; 
'p  = b; 
b  = 3; 
Figure 5: Introducing aliases through pointers 
trace,  with  analysis 
lyzing such a program lies somewhere between static analy- 
sis  and  a  full  execution 
time 
proportional  to the number of  blocks  in  the  program. One 
way  to defeat  this  analysis is to unroll  loops and  introduce 
semantically  equivalent  basic  blocks  that  will  be  chosen 
randomly  during  execution.  Consequently, 
the  effort 
required  in  recovering  the  program  control-flow  will  be 
comparable to a full simulation. In addition, the initial com- 
putation  of  swVur  can  be  erased  from memory  once  it  is 
used to avoid unnecessary  exposure of information. 
6.  Complexity evaluation 
We have thus far conjectured that the difficulty  of dis- 
cerning  indirect  branch  target  addresses  is  influenced  by 
aliases in the program. In this section, we support this claim 
by  presenting  a proof  in  which  we show that  determining 