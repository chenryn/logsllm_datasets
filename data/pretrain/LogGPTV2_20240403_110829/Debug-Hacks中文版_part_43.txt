入而失败了。
ext4_mb_free_metadata(）函数内的slab分配kmem_cache_alloc(）函数由于错误注
CR2:0000000000000030
RIP
040f0bebfe488
问，导致0ops 发生。
Code:08488945d04
[]system_call_fastpath+0x16/0x1b
[] generic_drop_inode+0x15/0x171
[]
[]ext4_mb_free_blocks+0x36d/0x5dd[ext4]
CallTrace:
0000000000020000000106ffff80099a5c48ffffa06319b4
[]
[]
[]
[]generic_delete_inode+0xc7/0x147
[]
[]e
（]
[]
[]
[]
]
[]
[]ext4_mb_free_metadata+0x6b/0x336[ext4]
第6章高手们的调试技术
8b
3d368c0100be50000000e85bbda7e0
48837e100075040f0bebfe48833e0075
?audit_syscall_entry+0x141/0x17c
]iput+0x61/0x65
?ext4_delete_inode+0x0/0x1cc[ext4]
ext4_truncate+0x175/0x4d4[ext4]
ext4_clear_blocks+0xe8/0xf4[ext4]
do_unlinkat+0xfc/0x173
ext4_delete_inode+0x109/0x1cc[ext4]
?ext4_mark_inode_dirty+0x181/0x196[ext4]
?ext4_mark_iloc_dirty+0x454/0x4da[ext4]
ext4_free_data+0xb0/0x103[ext4]
ext4_free_blocks+0x7b/0xcf[ext4]
www.TopSage.com
红网
---
## Page 351
的步骤。
本 hack 以 failslab 为例，介绍了利用错误注入技术发现 Linux 内核的潜在 bug 
总结
allocation failure"的补丁，但本书执笔之时，修改方法仍未确定。
我向 linux-ext4邮件列表中发送了名为"[PATCH] ext4:fix unhandled ext4_free_data 
原因是 kmem_cache_alloc()函数进行 slab 分配时忘了写错误检查。
看看 ext4_mb_free_metadata()函数的源代码，原因就一目了然了。
致了Oops 发生。
ext4_mb_free_metadata(handle_t *handle, struct ext4_buddy *e4b,
static noinline_for_stack int 
[fs/ext4/mballoc.c]
new_node = &new_entry->node;
new_entry->t_tid = handle->h_transaction->t_tid;
new_entry->group = group;
new_entry->start _blk = block;
new_entry = kmem_cache_alloc(ext4_free_ext_cachep, GFP_NOFS);
BUG_ON(e4b->bd_bitmap_page == NULL);
struct rb_node *parent = NULL, *new_node;
struct rb_node **n = &db->bb_free_root.rb_node, *node;
struct ext4_free_data *entry, *new_entry;
struct ext4_sb_info *sbi = EXT4_SB(sb);
struct super_block *sb = e4b->bd_sb; 
new_entry->count = count;
ext4_group_t group, ext4_grpblk_t block, int count)
HACK#58利用错误注入发现 Linux 内核的潜在 bug丨 333
www.TopSage.com
342
---
## Page 352
343
内核信息。
发中的内核之后，启动时发生了 panic。下面就是 LKML 中报告的 panic 发生时的
LKML（Linux Kermel Mailing List）中出现了 panic 报告。报告内容为，升级成开
问题概要
#59
参考文献
334 1
DR3:
CR2:
R13:
R10:
RBP:
RDX:
RAX:
RSP: 0018:fff88017fa27f80 FLAGS: 00006
Pid: 0, comm: events/0 Not tainted 2.6.27-next-20081023 #1
Modules linked in:
CPU 2
last sysfs file:
int3: 0000 [#1] SMP
Write protecting the kernel read-only data: 4816k
Freeing unused kernel memory: 448k freed
initcall tcp_congestion_default+0x0/0x12 returned 0 after 2 usecs 
calling tcp_congestion_default+ox8/0x12 @ 1
DRO:
3
Linux Test Project
http://Itp.sourceforge.net
000000000000000 DR6: 00000000ffffoff0 DR7: 000000000000400
0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
000000000 CR3: 0000000000201000 CR4: 00000000006e0
0010 DS: 0018 ES: 0018 CR0: 000000008005003b
0000000000000000(0000)
0000000000000000 R
0000000000000000R
ffff88017faa7f98 R
ffffffff807eb480 R
00000000ffffffff RBX: ffff88027f60e000 RCX: ffff88017fa98000
第 6章高手们的调试技术
关的内容。
本 hack 介绍问题分析时与内核中的 section（特别是 init section）有
Linux 内核的 init 节
R14: 0
R1l:f
R08:0
RSI: 0000000000000000 RDI: ffffffff807b9e5c
www.TopSage.com
GS:ffff88017fa32280(0000) knlGS:0000000000000000
0000000000000000 R15:  0000000000000000
ffff88027e023e90 R12: 000000000000002
00000000000000OOP
R09:
：ffff88002802c768
-美田晃伸
---
## Page 353
int3 是产生调试中断 INT3 的指令，正常的处理中不可能写这条指令。
从下面的信息中可知执行了int3指令。
查看日志详细内容
这里试着采用其他方法解决。
git-bisect尽管简单，却十分麻烦。
本，并且回归 bug 也容易复现，那直接 git-bisect 可能是最快的解决方法。但是，
分无法正常工作，这种现象称为回归（regression）。如果知道正常工作的内核版
一般来说，升级到特定版本的内核，特别是开发中的内核时，本来正常工作的部
 int3: 0000 [#1] SMP
回归
Kernel panic - not syncing: Fatal exception in interrupt 
RSP 
RIP [] nmi_cpu_busy+0x1/0x15
cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 
cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  cc cc cc cc cc 
Code: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
generic_smp_call_function_interrupt+0x35/0xd7
  [] ?
Call Trace:
ffffff80257afe ffffffff8076d938 0000000000000000 ffff88017faa7fa8
Stack:
Process events/0 (pid: 0, threadinfo ffff88017fa8c000, task ffff88017fa98000)
[] ? start_secondary+0x177/0x17c
[]? cpu_idle+0x48/0x66
(] ? atomic_notifier_call_chain+oxf/0x1l
[]? cle_idle+0xe5/0xec
 []? default_idle+0x2b/0x40
]call_function_interrupt+0x6b/0x70
[] smp_call_function_interrupt+0xlf/0x2f
www.TopSage.com
HACK#59 Linux 内核的 init 节|335
344
---
## Page 354
345
接下来查看有关 SMP 跨处理器函数调用进行相关修改时的发现，本问题的原因
继续调查发现，SMP 中的跨处理器函数调用，调用了 mmi_cpu_busy()函数。
因此，问题原因就是已释放的 init section 中的代码被执行了。
nmi_cpu_busy()代码中有__init，因此被放到了 init section 中。
也就是说，有问题的 nmi_cpu_busy()在初始化完成后被调用了。但是，由于
再次查看一下问题日志。日志开头的信息表明 init section 已被释放。
根据问题原因缩小调查范围
达到几百KB。
section 就会被释放，作为空闲内存继续使用。某些内核配置中，init section 可能
数据，初始化结束之后，就不再需要这些代码和数据了。因此，初始化之后init
核中，初始化代码和数据都放在init section 中，内核首先启动这些初始化代码和
Linux 内核利用 ELF 的 section 进行定位，下面介绍一下 init section。在 Linux 内
init section 
这里要注意__init 关键字。这个关键字表示该函数要定位到 init section 中。
声明如下。
为何 nmi_cpu_busy()函数会执行 int3指令呢？查看函数 nmi_cpu_busy()后发现,其
可知 int3指令为函数 nmi_cpu_busy()执行的。
接下来查看一下指令指针 RIP。
336}第6章高手们的调试技术
 smp_call_function(nmi_cpu_busy, (void *)&endflag, 0);
 Freeing unused kernel memory: 448k freed
 static __ int void nmi_ cpu_busy(void *data)
RIP: 0010:] [] nmi_cpubusy+0x1/0x15
Oxcc。
中填入特殊的字节序列。这些字节序列称为POISON_FREE_INITMEM，内容为
在x86 等部分架构中，为了便于发现访问已释放内存的bug，会在已释放的内存
www.TopSage.com
---
## Page 355
使用oprofile进行性能调查和调优的过程大致如下所示。
oprofile的使用方法一
本 hack介绍利用Linux环境中的标准工具oprofile进行性能调查的方法。
如果应用程序的性能无法达到预期，就要进行性能调查和调优。
#60
参考
地发现引发问题的改动。
上的函数nmi_cpu_busy()，调查函数调用的位置，要比单纯使用git-bisect能更快
通常，回归问题可以用git-bisect解决，但由于本问题错误地调用了init section
本hack介绍了与init section有关的问题。
总结
告给补丁作者之后，问题就被改正了。
中检查了无用的值，使得目标函数nmi_cpu_busy()的调用被推迟了。将该问题报
出在kernel/smp.c的补丁中。有问题的补丁在 SMP跨处理器函数调用的判断语句Om
?
?
?
Intel? 64 and IA-32 Architectures SoftwareDeveloper's Manuals
http://kml.org/lkmn/2008/10/23/322
Linux Kernel Mailing List (LKML)
http://www.intel.com/products/processor/manuals/index.htm
评测应用程序。
启动oprofile守护进程。
设置要评测的事件。
oprofile初始化。
利用oprofile进行性能调查和调优
解决性能问题
www.TopSage.com
一从初始化到评测
HACK#60解决性能问题
一岛本裕志
37网
346
---
## Page 356
347
这一步只是启动了守护进程，而评测尚未开始。
③启动oprofile守护进程
可以评测的事件如下所示。各事件的含义请参见手册。
基本的营养。
参见 Intel的手册。最新版手册只有英文，但认真阅读，就能吸取工程师所需的最
下面设置要评测的事件。各硬件架构下的默认设置并不相同，Intel 架构的情况请
②设置要评测的事件
① oprofile 初始化 
下面分别看看各个步骤。
③分析结果，解决问题。
338 ↓
oprofile: available events for CPU type "P4 / Xeon with 2 hyper-threads"
 $ sudo opcontrol --list-events 
tru-- nouzuoodo opns $
Using 2.6+ OProfile kernel interface.
$ sudo opcontrol --start-daemon 
BRANCH_RETIRED: (counter: 3)
GLOBAL_POWER_EVENTS: (counter: 0)
Intel Architecture Optimization Reference Manual (730795-001)
See Intel Architecture Developer's Manual Volume 3, Appendix A and
retired branches (min count: 6000)
 0x01: mandatory
time during which processor is not stopped (min count: 6000)
】第6章高手们的调试技术
0x08: branch taken mispredicted
0x04: branch taken predicted
0x02: branch not-taken mispredicted
9x01: branch not-taken predicted
Unit masks (default Oxc)
Unit masks (default Ox1)
.........
www.TopSage.com
---
## Page 357
是 Linux 内核,但由于没有调试信息,所以符号名(symbol name)都是(no symbols)。
从上述报告来看（opreport-L)，vmlinux中大约发生了34.81%的事件。vmlinux
名称为 BSQ_CACHE_REFERENCE)。
下面显示 oprofile的评测数据并调查原因。
分析结果，解决问题
流程为 oprofile 评测开始（opcontrol--start）、应用程序执行、oprofile 评测停止
④评测应用程序
如果存在上次评测的数据，用下面的命令删除之。
(opcontrol --stop).
8457
67373
samples
mask of 0x100 (read 2nd level cache miss) count 3000
Counted BSO_CACHE_REFERENCE events (cache references seen by the bus unit) with a unit
CPU: P4 / Xeon, speed 2400 MHz (estimated)
warning: /no-vmlinux could not be found.
$ sudo opreport -l|head -10
Stopping profiling.
$ sudo opcontrol -setop
$ tine make test-all
Profiler running.
$ sudo opcontrol --start --no-vmlinux
Signalling daemon... done
$ sudo opcontrol --reset
10004
10015
15421
22364
Daemon started.
Using log file /var/lib/oprofile/samples/oprofiled.log
34.8114
4.3697
5.1427
5.1690
5.1747
7.9680
11.5554
%image name
ruby
libc-2.8.90.s0
no-vmlinux
ruby
www.TopSage.com
libc-2.8.90.s0
no-vmlinux
ruby
app name 
 iseq_ mark
free
gc_mark_children
st_foreach
garbage_collect
gc_mark