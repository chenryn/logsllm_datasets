Intel 出版的《Intel 64 and IA-32 Architectures Software Developer’s Manual Combined Volumes》，其中的
1，2A，2B，2C，3A，3B 和 3C 章。本书作者将其收录为 http://go.yurichev.com/17283（2013）。 
AMD 出版的《AMD64 Architecture Programmer’s Manual》。本书作者将其收录为 http://go.yurichev. 
com/17284（2013）。 
96.4  ARM 
请参见本书作者收集的 ARM 手册：http://go.yurichev.com/17024。 
96.5  加密学 
Bruce Schneier 撰写的《Applied Cryptography: Protocols, Algorithms, and Source Code in C》（1994 年）。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9977 章
章    博
博        客
客  
97.1  Windows 平台 
 微软：Raymond Chen (http://blogs.msdn.com/b/oldnewthing/)。 
 nynaeve.net (http://www.nynaeve.net/)。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9988 章
章    其
其  他
他  内
内  容
容  
reddit.com 有两个非常出色的逆向工程相关板块，请参见： 
 Reverse Engineering（http://www.reddit.com/r/ReverseEngineering/）。 
 REMath 逆向工程与数学的综合板块（http://www.reddit.com/r/remath）。 
Stack Exchange 网站同样有一个著名的逆向工程板块： 
 http://reverseengineering.stackexchange.com/。 
FreeNode（IRC）的#re 频道是专门讨论逆向工程的主题聊天室。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第十
十二
二部
部分
分  
练
练习
习题
题  
除非文中有单独的提问，否则本卷题目的默认问题都是： 
 请用一句话描述这个程序的功能。 
 请把这个函数还原为 C/C++语言的源程序。 
在解答题目时，您可以通过 Google 等搜索引擎查找线索。但是，不借助搜索引擎的乐趣会更多一些。 
另外，您还可以在本书的附录里查找相关提示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
874 
逆向工程权威指南 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9999 章
章    初
初等
等难
难度
度练
练习
习题
题  
这种难度的题目通常可以直接心算。 
99.1  练习题 1.4 
下列程序使用了密码保护机制，请找到程序指定的密码。 
喜欢举一反三的读者，还可以修改可执行程序来改变程序的密码。在修改密码的时候，建议您同时调
整密码的长度，并摸索最短密码到底可以有多短。 
此外，单独一个字符串就可以令程序崩溃。请创建这种字符串。 
 Win32（go.yurichev.com/17166）。 
 Linux x86（go.yurichev.com/17167）。 
 Mac OS X（go.yurichev.com/17168）。 
 MIPS（go.yurichev.com/17169）。  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 110000 章
章    中
中等
等难
难度
度练
练习
习题
题  
要解答这个难度的题目，您可能会用到文本编辑器或者纸笔。 
100.1  练习题 2.1 
100.1.1  Optimizing MSVC 2010 x86 
__real@3fe0000000000000 DQ 03fe0000000000000r 
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr 
_g$   = 8 
tv132 = 16 
_x$ = 16 
f1 PROC 
         fld      QWORD PTR _x$[esp-4] 
         fld      QWORD PTR __real@3f50624dd2f1a9fc 
         fld      QWORD PTR __real@3fe0000000000000 
         fld      QWORD PTR _g$[esp-4] 
$LN2@f1: 
         fld      ST(0) 
         fmul     ST(0), ST(1) 
         fsub     ST(0), ST(4) 
         call     __ftol2_sse 
         cdq 
         xor      eax, edx 
         sub      eax, edx 
         mov      DWORD PTR tv132[esp-4], eax 
         fild     DWORD PTR tv132[esp-4] 
         fcomp    ST(3) 
         fnstsw   ax 
         test     ah, 5 
         jnp      SHORT $LN19@f1 
         fld      ST(3) 
         fdiv     ST(0), ST(1) 
         faddp    ST(1), ST(0) 
         fmul     ST(0), ST(1) 
         jmp      SHORT $LN2@f1 
$LN19@f1: 
         fstp     ST(3) 
         fstp     ST(1) 
         fstp     ST(0) 
         ret      0 
f1 ENDP 
__real@3ff0000000000000 DQ 03ff0000000000000r 
_x$ = 8 
f2 PROC 
         fld      QWORD PTR _x$[esp-4] 
         sub      esp, 16 
         fstp     QWORD PTR [esp+8] 
         fld1 
         fstp     QWORD PTR [esp] 
         call     f1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
877 
         add      esp, 16 
         ret      0 
f2 ENDP 
100.1.2  Optimizing MSVC 2012 x64 
__real@3fe0000000000000 DQ 03fe0000000000000r 
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr 
__real@3ff0000000000000 DQ 03ff0000000000000r 
x$ = 8 
f        PROC 
         movsdx   xmm2, QWORD PTR __real@3ff0000000000000 
         movsdx   xmm5, QWORD PTR __real@3f50624dd2f1a9fc 
         movsdx   xmm4, QWORD PTR __real@3fe0000000000000 
         movapd   xmm3, xmm0 
         npad     4 
$LL4@f: 
         movapd   xmm1, xmm2 
         mulsd    xmm1, xmm2 
         subsd    xmm1, xmm3 
         cvttsd2si eax, xmm1 
         cdq 
         xor      eax, edx 
         sub      eax, edx 
         movd     xmm0, eax 
         cvtdq2pd xmm0, xmm0 
         comisd   xmm5, xmm0 
         ja       SHORT $LN18@f 
         movapd   xmm0, xmm3 
         divsd    xmm0, xmm2 
         addsd    xmm0, xmm2 
         movapd   xmm2, xmm0 
         mulsd    xmm2, xmm4 
         jmp      SHORT $LL4@f 
$LN18@f: 
         movapd   xmm0, xmm2 
         ret       0 
f        ENDP 
100.2  练习题 2.4 
下面这道题目摘自 MSVC 2010，是标准的库函数。 
100.2.1  Optimizing MSVC 2010 
PUBLIC    _f 
_TEXT    SEGMENT 
_arg1$ = 8              ;size=4 
_arg2$ = 12             ;size=4 
_f    PROC 
     push    esi 
     mov     esi, DWORD PTR _arg1$[esp] 
     push    edi 
     mov     edi, DWORD PTR _arg2$[esp+4] 
     cmp     BYTE PTR [edi], 0 
     mov     eax, esi 
     je      SHORT $LN7@f 
     mov     dl, BYTE PTR [esi] 
     push    ebx 
     test    dl, dl 
     je      SHORT $LN4@f 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
878 
逆向工程权威指南（下册） 
     sub     esi, edi 
     npad    6 ; align next label 
$LL5@f: 
     mov     ecx, edi 
     test    dl, dl 
     je      SHORT $LN2@f 
$LL3@f: 
     mov     dl, BYTE PTR [ecx] 
     test    dl, dl 
     je      SHORT $LN14@f 
     movsx   ebx, BYTE PTR [esi+ecx] 
     movsx   edx, dl 
     sub     ebx, edx 
     jne     SHORT $LN2@f 
     inc     ecx 
     cmp     BYTE PTR [esi+ecx], bl 
     jne     SHORT $LL3@f 
$LN2@f: 
     cmp    BYTE PTR [ecx], 0 
     je     SHORT $LN14@f 
     mov    dl, BYTE PTR [eax+1] 
     inc    eax 
     inc    esi 
     test   dl, dl 
     jne    SHORT $LL5@f 
     xor    eax, eax 
     pop    ebx 
     pop    edi 
     pop    esi 
     ret    0 
_f     ENDP 
_TEXT     ENDS 
END 
100.2.2  GCC 4.4.1 
                   public f 
f                  proc near 
var_C             = dword ptr -0Ch 
var_8             = dword ptr -8 
var_4             = dword ptr -4 
arg_0             = dword ptr  8 
arg_4             = dword ptr  0Ch 
                   push     ebp 
                   mov      ebp, esp 
                   sub      esp, 10h 
                   mov      eax, [ebp+arg_0] 
                   mov      [ebp+var_4], eax 
                   mov      eax, [ebp+arg_4] 
                   movzx    eax, byte ptr [eax] 
                   test     al, al 
                   jnz      short loc_8048443 
                   mov      eax, [ebp+arg_0] 
                   jmp      short locret_8048453 
loc_80483F4: 
                   mov      eax, [ebp+var_4] 
                   mov      [ebp+var_8], eax 
                   mov      eax, [ebp+arg_4] 
                   mov      [ebp+var_C], eax 
                   jmp      short loc_804840A 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
879 
loc_8048402: 
                   add      [ebp+var_8], 1 
                   add      [ebp+var_C], 1 
loc_804840A: 
                   mov      eax, [ebp+var_8] 
                   movzx    eax, byte ptr [eax] 
                   test     al, al 
                   jz       short loc_804842E 
                   mov      eax, [ebp+var_C] 
                   movzx    eax, byte ptr [eax] 
                   test     al, al 
                   jz        short loc_804842E 
                   mov      eax, [ebp+var_8] 
                   movzx    edx, byte ptr [eax] 
                   mov      eax, [ebp+var_C] 
                   movzx    eax, byte ptr [eax] 
                   cmp      dl, al 
                   jz       short loc_8048402 
loc_804842E: 
                   mov      eax, [ebp+var_C] 
                   movzx    eax, byte ptr [eax] 
                   test     al, al 
                   jnz      short loc_804843D 
                   mov      eax, [ebp+var_4] 
                   jmp      short locret_8048453 
loc_804843D: 
                   add      [ebp+var_4], 1 
                   jmp      short loc_8048444 
loc_8048443: 
                   nop 
loc_8048444: 
                   mov      eax, [ebp+var_4] 
                   movzx    eax, byte ptr [eax] 
                   test     al, al 
                   jnz      short loc_80483F4 
                   mov      eax, 0 
locret_8048453: 
                   leave 
                   retn 
f                  endp 
100.2.3  Optimizing Keil（ARM mode） 
          PUSH     {r4,lr} 
          LDRB     r2,[r1,#0] 
          CMP      r2,#0 
          POPEQ    {r4,pc} 
          B        |L0.80| 
|L0.20| 
          LDRB     r12,[r3,#0] 
          CMP      r12,#0 
          BEQ      |L0.64| 
          LDRB     r4,[r2,#0] 
          CMP      r4,#0 
          POPEQ    {r4,pc} 
          CMP      r12,r4 
          ADDEQ    r3,r3,#1 
          ADDEQ    r2,r2,#1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
880 
逆向工程权威指南（下册） 
          BEQ      |L0.20| 
          B         |L0.76| 
|L0.64| 
          LDRB      r2,[r2,#0] 
          CMP       r2,#0 
          POPEQ     {r4,pc} 
|L0.76| 
          ADD       r0,r0,#1 
|L0.80| 