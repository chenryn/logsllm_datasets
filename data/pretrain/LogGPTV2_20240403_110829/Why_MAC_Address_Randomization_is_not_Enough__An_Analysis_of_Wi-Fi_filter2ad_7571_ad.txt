random nonzero seed [31, §18.3.5.5], we wondered whether
commodity Wi-Fi radios also use predictable seeds in prac-
tice. To answer this question, we need a radio that exports
the scrambler seed of received Wi-Fi frames. Since most
commodity devices do not do so, we implemented this our-
selves using a software-deﬁned radio. We used an Ettus
USRP N210, and relied on the gr-ieee802-11 project [5] to
decode OFDM frames. The code was modiﬁed to take the
scrambler initialization value from the SERVICE ﬁeld, and
undo the initial 7 shifts to obtain the original scrambler seed
value (see Section 2.2).
Because gr-ieee802-11 is not as optimized as real Wi-Fi
receivers, decoding frames using it is not easy. To increase
its reliability, all captures were made in an RF-shielded
room. For each device being tested, we made it transmit
data frames of various lengths, and using diﬀerent bitrates.
Based on these captures, we studied the predictability of
the scrambler seed. In our analysis, we mainly focus on the
scrambler seed behaviour of a device when it is transmitting
frames at 6 Mbps. This is done because probe requests in
the 5 GHz band are always sent at a bitrate of 6 Mbps (see
Section 2.2). Finally, we conﬁrmed our predictions by cap-
turing and analyzing real probe requests in the 5 GHz band.
5.2 Analysis
We found that most devices do not reset the state of the
scrambler at all. Put diﬀerently, the state of the LFSR after
transmitting a frame is reused as the seed of the next frame.
We say these LFSRs are used in a free-wheeling mode, where
the state is never explicitly initialized. Let end state denote
the state of the LFSR after producing the last bit of the
scrambler sequence. Then one would expect that the end
state is directly used as the seed for the next frame.
In-
terestingly, we found that most devices perform additional
LFSR shifts before writing out the next scrambler seed. It is
unclear why devices do this, perhaps for alignment reasons.
Nevertheless, in our case, it is only important to predict
how many additional LFSR shifts are performed to get the
scrambler seed. To rigorously analyze this behaviour, we de-
ﬁne the shift distance between two LFSR states as follows:
Definition 4. The shift distance DL(x, y) between two
LFSR states x and y is deﬁned as:
(cid:40)
DL(x, y) =
0
1 + DL(SL(x), y)
if x = y
otherwise
Recall that SL(x) represents the result of one LFSR shift on
the state x. Hence, the shift distance is the number of shifts
needed to reach the second state from the ﬁrst state. The
shift distance allows us to report how many additional shifts
a device performs before writing out the seed value into the
SERVICE ﬁeld. If we state that a device uses a particular
shift distance, it implies it operates in a free-wheeling mode,
and the reported distance denotes the shift distance between
the end state and the scrambler seed of the next frame.
5.2.1 Asus Fonepad (K004 ME371MG)
This radio always uses a shift distance of 22, making it
trivial to predict the next scrambler seed value based on the
previous frame.
Table 4: Intel 7260 AC shift distances in function of the
bitrate and PSDU length (in bytes) of the previous frame.
Bitrate
0
1
PSDU byte length modulo 12
2
3
4
8
5
6
7
9 10 11
6 Mbps
22 46 14 14 54 54 22 46 46 46 22 22
12 Mbps 54 54 54 54 54 38 54 54 54 38 38 38
iPad Air 2 (A1566)
5.2.2 One Plus and Samsung Galaxy A3
The radio in these devices always uses a shift distance of 6,
once again making it trivial to predict the next seed value.
5.2.3 TP-Link TL-WN821N
This device uses an RTL8192CU radio chip which always
uses a ﬁxed seed value of 124. We consider this a bug in the
radio: using a ﬁxed scrambler seed value means frames are
always mapped to the same physical signal. If this happens
to be a disadvantageous signal, for example because it has
a high peak to average power ratio [44], retransmissions are
also sent using this disadvantageous signal. Hence, certain
frames experience systematically higher frame error rates [6].
Nevertheless, even a ﬁxed seed value can be used to im-
prove our tracking algorithm. For example, when tracking
a device with a ﬁxed seed, we can exclude all frames with
a diﬀerent seed value as coming from this device. Without
access to the seed, we could have incorrectly labelled certain
frames as being transmitted by this particular device.
5.2.4
We found that this device only uses seed values of 8, 64,
and 72. The seed value 72 was used considerably more than 8
and 64.
Interestingly, in these three values, only the 4th
and 7th bits are ever set. These bit positions correspond to
the LFSR feedback taps used in the scrambler (see Fig. 1).
Similar to the TP-Link device, we consider using only a few
ﬁxed values for the scrambler seed to be a bug in the radio.
5.2.5 Wi-Pi: Ralink RT5370
This radio also operates in a free-wheeling mode. After
transmitting a frame using a bitrate of 6 Mbps and 12 Mbps,
it uses a shift distance of 6. After transmitting a frame using
a bitrate of 9 Mbps, it uses a shift distance of 10. Somewhat
surprisingly, it uses a shift distance of 61 after sending a
beacon at 6 Mbps. This serves as a good example that for
some devices, the shift distance may also depend on the type
of the previous frame. Thankfully, probe requests are always
sent at 6 Mbps in the 5 GHz band, and no other frames are
transmitted in between. Consequently, the scrambler seed
of radios exhibiting this behaviour remains predictable.
5.2.6
This radio operates in a free-wheeling mode, where the
shift distance depends on the bitrate and the PSDU length
of the previously transmitted frame. Recall that the PSDU
denotes the actual MAC layer bytes being transmitted (see
Fig. 2). To better analyze this behaviour, we also made sev-
eral captures were we sent frames at 12 Mbps. The resulting
shift distances are summarized in Table 4. For example, if
the previous frame was sent at 6 Mbps, and had a PSDU
length of 13 bytes, the shift distance will be 46.
Intel 7260 AC
Samsung Galaxy S3 & iPhone 5 (A1429)
5.2.7
The radios in these devices all exhibit the same behaviour,
and operate in a free-wheeling mode. When the previous
frame was sent at 6 Mbps, it uses a shift distance from the
set {110, 114, 118, 122}. We are currently unable to predict
which shift value in this set is used. When the previous
frame was sent at 12 Mbps, the set of possible shift distances
is {102, 106, 110, 114}. While this means we cannot precisely
predict the next scrambler seed value, it still can be used to
improve the tracking probability. We conjecture that a more
detailed study of this radio chip, e.g., reverse engineering its
operations, would reveal how a shift distance is selected from
our current set of possible distances.
5.2.8 Atheros AR9271
The Atheros AR9271 radio uses an incremental counter
to initialize the scrambler seed. That is, the scrambler seed
is explicitly initialized, and incremented by one for each
transmitted frame. This makes it easy to predict the next
seed value, even when some frames of unknown lengths are
missed. It is the only device we tested that does not operate
in a free-wheeling mode. We conﬁrmed this behaviour using
an Alfa AWUS036NHA and a TP-Link TL-WN722N, which
both contain an Atheros AR9271 radio.
5.3 Improved Tracking Algorithm
The scrambler bit provides us 7 extra bits of informa-
tion to identify a device. That is, in the tracking algorithm
of section 4, we can now distinguish devices based on the
scrambler seeds of frames. Though current Wi-Fi radios do
not export the received seed, we believe it is easy for manu-
facturers to support this. In fact, newer radios may already
be doing this to support the 802.11ac standard. In 802.11ac,
certain bits of the seed in RST and CTS frames have a spe-
cial purpose [20]. This requires that certain bits of the seed
must remain available after demodulating the physical sig-
nal. This makes it more likely that future devices can, and
perhaps will, export the scrambler seed of received frames.
In practice, we must be able to determine the type of
scrambler a device uses. Otherwise, we cannot predict the
next scrambler seed. Since all devices use the same (random)
MAC address in one scan iteration, we can easily determine
the type of scrambler used by grouping the frames based on
the MAC address. Another option is to immediately send a
probe reply when receiving a probe requests. In turn, the
device will send an ACK, which will also contain a scrambler
seed. Based on the probe request and the ACK, we can
determine the type of scrambler being used. Hence, in our
tracking algorithm, we can assume the type of scrambler is
known.
To simulate knowledge of scrambler seeds, the ﬁrst frame
of each device is assigned a random seed value. Since only
probe requests sent in the 5 GHz band contain a scram-
bler seed, we expect that few scrambler seed values will be
missed by an attacker. Hence, we assign subsequent frames
a random seed that lies within a distance of 16 or less of
the previous frame. Similarly, in Algorithm 2, we search a
cluster such that the last probe request added to this cluster
has a scrambler seed that is within a distance of 16 of the
probe requests being added. Figure 6 shows the impact on
the tracking probability when knowledge of scrambler seeds
is simulated in this manner. For comparison, the track-
ing probability without using scrambler seeds is shown as
Figure 6: Probability of a device being successfully tracked,
in function of the duration that the device was present, and
the number of concurrent devices. Tracking is done using
Algorithm 2, with the addition that knowledge of scrambler
seeds is also simulated. The dashed line is the probability
as reported in Fig. 5, and is repeated for convenience.
a dashed line. We conclude that using scrambler seeds can
increase the tracking probability by as much as 10%.
6. FAKE ACCESS POINTS ATTACKS
In this Section we show how two service discovery mecha-
nisms of Wi-Fi can be abused to gain identifying information
on unassociated stations. This is accomplished by creating
fake APs with speciﬁc characteristics and identiﬁers.
6.1 Reviving the Karma Attack
Once a device has detected an AP advertising an SSID
matching one of its preferred (conﬁgured) networks, it will
automatically initiate the association process with this AP.
From this point on, most devices that implement MAC ad-
dress randomization will use their real MAC address to con-
nect with the AP. The only exception is Windows, which
uses a per-network random MAC address (see Section 2.1).
Using the real MAC address may be necessary because some
APs restrict association and Internet connectivity based on
the MAC address being used.
A consequence of this switch to the real MAC address
when associating to an AP is that, by advertising an SSID
familiar to a device, the latter will automatically reveal a
permanent identiﬁer. Existing attacks that advertised SSIDs
in order to get association requests from victims, such as the
well-known Karma attack [11], relied on the SSIDs that the
victim broadcasts in probe requests. However, since modern
devices avoid broadcasting SSIDs, the Karma attack is no
longer applicable. Our solution to this problem is to adver-
tise a list of popular SSIDs, hoping that at least one of them
is in the preferred network list of the victim.
As seen in section 3.3, popular SSIDs are conﬁgured in a
large number of devices. Indeed, SSIDs conﬁgured in Wi-Fi
devices follow a long-tailed distribution, which means that a
small number of popular SSIDs are found in many devices.
Using our datasets, we simulate the eﬃciency of this at-
tack. We compute the number of devices that include at
least one of the top-n popular SSIDs. Figure 7 presents the
cumulative distribution of the number of aﬀected devices in
function of the number of advertised SSIDs. We can see
that a relatively short list of popular SSIDs is enough to
Tracking ProbabilityDuration (in minutes)681012141618200%20%40%60%80%#concurrent devices:16642561024be used to improve our tracking algorithm of Section 4.
Because HS2.0 APs do not advertise all their capabilities
in beacons, stations need to retrieve the full list by con-
tacting the AP. In practice, a station sends ANQP queries
to the AP, and the latter replies with an ANQP response
containing a list of the available services (see Section 2.3).
The real identity of devices can be easily uncovered if sta-
tions use their real MAC address for querying the AP. Our
observations conﬁrm that this is the case for a Linux com-
puter using wpa_supplicant, and a computer running Win-
dows 10. However, an Apple device running iOS 9.1 kept its
randomized MAC address when sending the ANQP query.
We found that Windows and iOS devices only send ANQP
queries if at least one HS2.0 network was conﬁgured on the
device.
The fact that the iOS device does not fall back to a persis-
tent identiﬁer is a positive point. However, ANQP queries
include a 1-byte ﬁeld named Dialog Token that is used to
identify each GAS transaction [32, §7.4.7.13]. As multi-
ple GAS transactions are initiated, the value of this ﬁeld
will be incremented. The Dialog Token ﬁeld is therefore
predictable and could be used in our tracking algorithm in
the same way sequence numbers and scrambler seeds were
used (see Section 4 and 5, respectively). In our captures, the
typical time between two consecutive queries is below 60 sec-
onds, providing a good temporal granularity for tracking.
A variant of the Fake AP attack can therefore be mounted
by leveraging this service discovery mechanism: a simple
AP advertising HS2.0 capabilities will induce all surround-
ing HS2.0 compatible stations to send ANQP queries, thus
revealing their real MAC address or a predictable ﬁeld.
We tested this attack in practice using hostapd, which was
conﬁgured to advertise HS2.0 capabilities. A fake HS2.0 AP
was deployed in a dense urban location for two 20 minute ses-
sions. During those sessions, 1523, respectively 562, probing
stations were observed. At the same time, we recorded 80
(5.25%), respectively 92 (16.37%) stations sending ANQP
queries to the HS2.0 AP. This small fraction can be ex-
plained by the fact that this technology is still in the early
stages of its deployment. Hence, not all devices support this
feature. Additionally, as HS2.0 is not yet widespread, only
a few devices have a conﬁgured HS2.0 network. This means
iOS and Windows devices will not send ANQP queries.
Finally, we observed that none of the stations sending
ANQP queries had a MAC address that was registered by
Apple. This conﬁrms the previous observations about the
requirements of at least one conﬁgured HS2.0 network to get
involved in HS2.0 service discovery requests.
Our results show that the recent HS2.0 standard is poten-
tially a source of privacy leakage, since several implemen-
tations reveal their real MAC address or a predictable ﬁeld
when initiating ANQP queries. The importance of this issue
will increase with the number of compatible stations, but
also with the increasing number of access points.
Indeed,
similar to the previous attack, pervasive deployment of gen-
uine HS2.0 will remove the need of creating a fake AP with