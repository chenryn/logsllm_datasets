:ndno
Example 3:
Input: stones = [[o,o]]
Output: 0
Note:
1. 1 = res{
res = hour*60 + min
flag = true
if flag{
return fmt.Sprintf("%02d:%02d", res/60, res%60)
}else{
return "*
952.LargestComponentSizebyCommonFactor
题目
Given a non-empty array of unique positive integers A, consider the following graph:
●There are A.length nodes, labelled A[o] to A[A.length - 1] ;
● There is an edge between A[i] and A[j] if and only if A[i] and A[j] share a common
factor greater than 1.
Return the size of the largest connected component in the graph.
Example 1:
Input: [4 ,6, 15 , 35]
Output: 4
6
Example 2:
Input: [20, 50, 9,63]
output: 2
---
## Page 909
50
9
63
Example 3:
Input: [2, 3, 6 ,7, 4 , 12 ,21, 39]
Output: 8
2
6
4
21
12
39
Note:
1.1
words[l], hence the sequence is unsorted.
Example 3:
---
## Page 912
Input: words = ["apple","app"], order = "abcdefghijk1mnopqrstuvwxyz"
output: false
’1′ > 'o′, where *e′ is defined as the blank character which is less than any
other character (More info).
Note:
1.1  hash[wordplus[pointer]] {
return false
if hash[word[pointer]] = 1en(wordplus){
return false
3
return true
959.RegionsCutBySlashes
题目
In a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a / , , or blank space.
These characters divide the square into contiguous regions.
(Note that backslash characters are escaped, so a  is represented as *"\\" -)
Return the number of regions.
Example 1:
Input:
1
1
/”，
“/
Output:2
Explanation: The 2x2 grid is as follows:
Example 2:
Input:
/"
Output: 1
Explanation: The 2x2 grid is as fo1lows:
---
## Page 914
Example 3:
Input:
"\\/",
"/\\"
1
Output: 4
Explanation: (Recall that because \ characters are escaped, "\\/" refers to
V/, and "/\\" refers to /\.)
The 2x2 grid is as follows:
Example 4:
Input:
"/八\\",
"\\/"
Output:5
Explanation: (Recall that because \ characters are escaped, "/\\" refers to
/八\，and "\\/"refers to \/.)
The 2x2 grid is as follows:
Example 5:
Input:
"//",
"/
1
Output:3
Explanation: The 2x2 grid is as fo1lows:
---
## Page 915
Note:
1. 1 <= grid.1ength == grid[0].1ength <= 30
2.grid[i][j] is either'/,*\, or
题目大意
在由1x1方格组成的NxN网格grid中，每个1x1方块由/、\或空格构成。这些字符会将方块划分
为一些共边的区域。（请注意，反斜杠字符是转义的，因此\用"表示）返回区域的数目。
提示：
●1 <= grid.length == grid[o].length <= 30
·grid回]是/、“、或"
解题思路
·给出一个字符串，代表的是NXN正方形中切分的情况，有2种切分的情况\和/，即
从左上往右下切和从右上往左下切。问按照给出的切分方法，能把NXN正方形切成几部分？
·这一题解题思路是并查集。先将每个1*1的正方形切分成下图的样子。分成4小块。然后按照题
目给的切分图来合并各个小块。
?
·遇到\\，就把第0块和第1块union（）起来，第2块和第3块union（）起来：遇到
---
## Page 916
/，就把第0块和第3块union（）起来，第2块和第1块unionO起来；遇到，就把
第0块和第1块union（）起来，第2块和第1块union（）起来，第2块和第3块union（）
起来，即4块都unionO起来；最后还需要记得上一行和下一行还需要unionO，即本行的第
2块和下一行的第0块union（）起来；左边一列和右边一列也需要union（）。即本列的第1块
和右边一列的第3块union（）起来。最后计算出集合总个数就是最终答案了。
代码
package leetcode
import（
"github.com/halfrost/LeetCode-Go/template'
func regionsByslashes(grid []string) int {
size := len(grid)
uf := template.UnionFind{}
uf.Init(4 α size * size)
for i := 0; i < size; i++ {
for j := 0; j < size; j++ {
switch grid[i][j]{
case '\\':
uf.union(getFaceIdx(size，i，j，0)，getFaceIdx(size,i，j，1))
uf.union(getFaceIdx(size, i， j， 2)， getFaceIdx(size, i， j, 3))
case '/':
uf.union(getFaceIdx(size, i， j， 0)， getFaceIdx(size,i，j， 3))
uf.union(getFaceIdx(size, i,j, 2)， getFaceIdx(size, i，j, 1))
case '':
uf.union(getFaceIdx(size, i, j, 0)， getFaceIdx(size, i, j, 1))
uf.union(getFaceIdx(size，i，j，2)，getFaceIdx(size,i，j，1))
uf.union(getFaceIdx(size，i，j，2)，getFaceIdx(size,i，j，3))
if i < size-1 {
uf.union(getFaceIdx(size, i, j, 2), getFaceIdx(size, i+l, j， 0))
if j < size-1 {
uf.union(getFaceIdx(size, i, j， 1), getFaceIdx(size, i，j+l, 3))
count := 0
for i := 0; i < 4*size*size; i++{
if uf.Find(i) == i {
count++
return count
---
## Page 917
func getFaceIdx(size,i，j,k int) int {
return 4*(i*size+j）+k
961.N-RepeatedElementinSize2NArray
题目
In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is