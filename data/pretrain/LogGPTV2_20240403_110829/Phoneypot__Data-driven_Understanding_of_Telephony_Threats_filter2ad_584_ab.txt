because transport of the calls may require SIP trunking and a
telecommunications carrier may charge based on call duration
and frequency. In some regions of the world, both the calling
and called parties are charged by the carriers irrespective of
the direction of the call. However, in countries like India
only outgoing calls are charged and incoming calls are free.
Although actual costs depend on possible deployment options
discussed in the next section, there could be both initial and
recurring costs that could be signiﬁcantly higher than the cost
of operating a traditional honeypot infrastructure.
B. Ability to engage callers
Telephony is a synchronous interaction channel where
the caller’s actions often depend on the called party picking
up and responding to the call. Engaging the caller to fully
learn the purpose of the call is a major challenge in setting
up a telephony honeypot. We suspect that engaging a caller
actively as compared to passively via voicemail would be more
effective. Actively engaging calls would incentivize the caller
to stay longer on the call and thus give us an audio ﬁle of
desired size that can be examined for caller intent. Several
levels of interactions are possible in a telephony honeypot.
1)
2)
No interaction: When a call is received at a tele-
phony honeypot,
it can choose to either provide
a busy signal (SIP response 486) or decline (SIP
response 603) the call immediately. This avoids call
completion charges and could provide useful infor-
mation. For example, the honeypot can record calling
and called phone numbers and a timestamp that
captures when the call was made, and if possible
network level SIP signaling metadata.
Low interaction: Low level of interaction can be
achieved by setting up a voicemail. This may result
in no voicemail being left by the scamsters, as they
3
might not be interested in leaving any message.
However, in the case of a robocall, we may end up
recording the audio at the least.
3) Medium interaction: We can provide automated
medium level of interaction by setting up an IVR,
which is in form of a conversation. More creative
the message the better it is. For example, the voice
message can include sentences like “I am not able to
hear you, can you please repeat . . ., Yes I can listen
to you now, please go ahead . . .”.
4) High interaction: High level of meaningful interac-
tion in an automated fashion is challenging. One can
set it up using an automated conversation engine that
performs speech recognition from the audio of the
incoming calls and automatically engages callers in
multiple rounds of communication. Once sources that
originate high number of calls are identiﬁed, a limited
number of calls from them can be handled manually
to provide a high level of interaction. This can help
gain more complete information about the purpose of
the calls.
C. Legal: Telephone call recording laws
Recording of telephone calls is strictly regulated in many
countries. For example in the United States, there are some
states (e.g. California) which require all party consent before
a call can be recorded but others (e.g. Georgia) only require
single party consent [18]. The California Supreme Court has
ruled that if a caller in a one-party state records a conversation
with someone in California,
that one-party state caller is
subject to the stricter of the laws and must have consent from
all callees. Thus, a telephony honeypot must address consent
requirements if it chooses to record calls.
D. Seeding of phoneytokens
Ideally, a telephony honeypot would like to receive calls
from fraudsters and no calls from legitimate users. For such
calls to come, the caller must know the phone numbers that
belong to the honeypot. Seeding of phoneytokens refers to the
process by which phoneytokens are publicized so they can
be discovered by attackers. For example, similar to email ad-
dresses, attackers can use crawlers to discover phone numbers
and people or organizations associated with them. There exist
phone number lists like ”Do Not Call List” where phoney-
tokens can be posted. In general, seeding of phoneytokens
requires that they be posted on a variety of targets of fraudsters,
including social media and websites. For example, one can
create accounts with various proﬁle characteristics that include
phone numbers. The primary challenge with phoneytokens lies
in the automation of seeding them. Posting phoneytokens only
from fake accounts at a high rate may either be ﬂagged as spam
or might result in blocking the account altogether. Therefore,
the posts should adhere to the policies of the site so that the
account that publishes phoneytokens is not blocked. Moreover,
potential target websites have different structures and layouts;
therefore it is challenging to automate phoneytoken posting
which is essential for a large-scale honeypot deployment.
E. Evading detection of the telephony honeypot
The telephony honeypot should mimic a normal end point
user, which depends on the level of engagement mentioned
4
previously. For example a normal hang up (SIP response 486)
as opposed to decline (SIP response 603). Telephony honeypot
should be conﬁgured to use proxy for RTP trafﬁc; otherwise
IP address of the honeypot might be leaked.
F. Avoiding false positives
Because of the limited space of phone numbers and how
people dial numbers, it is possible to misdial a phone number.
Also, to make a phoneytoken attractive to attackers, it could
be seeded where legitimate people may ﬁnd and dial it. A
misdialed call
to a phoneytoken leads to a false positive.
Although it is difﬁcult to avoid misdialing completely, several
precautions can be taken. Phoneytokens can be seeded in such
a way that legitimate people are less likely to call phone
numbers associated with them. For example, while advertising
or posting on discussion forums, the posts should be enticing
but at the same time they should not appeal to legitimate users.
IV. TELEPHONY HONEYPOT IMPLEMENTATION OPTIONS
A telephony honeypot is nothing but a communications
server that has the capability to receive, make and record
calls. As mentioned earlier, the phone numbers on which a
telephony honeypot receives calls are called phoneytokens. A
phoneytoken is a digital resource i.e., a phone number with
associated features like age, geography or historical proﬁle,
whose value lies in an unauthorized use of that resource.
Phoneytokens are unique and are not assigned to any entity;
therefore, no legitimate person should be using or accessing
them. However, there could be false positives. For example, a
confused user can mistakenly use a phoneytoken by dialing a
wrong number.
The allocation and assignment of phone numbers is co-
ordinated and typically one must work with a telecommu-
nication carrier to acquire phoneytokens. Ideally, the set of
phoneytokens acquired for a honeypot would have diverse
proﬁles as mentioned earlier. Phoneytokens typically have a
cost associated with them that can impact the size of their
pool available for a telephony honeypot.
An instance of a telephony honeypot can be built on top
of any telephone PBX such as open source framework like
Asterisk [2] for building communications applications or using
cloud communication service providers. At the minimum, a
telephony honeypot should have the capability to log the
source phone number, the destination phone number and the
timestamp of the call. In the following section, we provide
other functionalities a telephony honeypot can be equipped
with.
A. Telephony honeypot functionalities
1)
2)
Voicemail/IVR: Unlike email, phone calls are syn-
chronous in nature and require interaction from the
target endpoint. Voicemail and Interactive Voice Re-
sponse (IVR) are necessary to build an interaction
based telephony honeypot. One can leverage this to
setup different interaction levels with the caller in an
automated way.
Call recording feature: Since signatures can be
computed using audio analysis
[35], the telephony
honeypot should ideally have support for recording
setup is expensive due to high cost of SIP trunks and would
require signiﬁcant investment in terms of infrastructure and
money. For example, to be able to handle concurrent calls, the
organization will have to be equipped with E1 or T1 phone
lines that allow calls to be multiplexed [3]. A T1 line will allow
up to 24 concurrent calls but has a very high cost (≈1000-
1500 USD per month). Moreover, a card for connecting the
lines to the communication server that runs the Asterisk PBX
costs over 3000 USD for handling up to 240 channels. One
weakness of this conﬁguration is that it can only handle calls
to landline/IP phones unless a GSM gateway is attached (see
VoIP GSM gateway below).
b) Integration with the existing IT infrastructure: This
setup is similar to the previous one (see Figure 1), however,
rather than buying everything and building the whole network
from scratch, one can integrate the honeypot with the existing
IT network of any institution/company. This can be done
by allocating a set of numbers which are not assigned to
anyone in the respective institution/company and conﬁguring
the PBX to forward any calls coming in to those numbers to the
honeypot. This is a low cost option but it limits the diversity
of phoneytokens that can be used with the honeypot because
all phone numbers come from the pool that is allocated to
the organization. Also, this solution is only possible if the IT
infrastructure is based on VoIP.
calls. This will also help us to transcribe the audio
and perform voice analysis to differentiate between
a robocaller and a human caller. The call audio
can provide additional information about nature and
purpose of a call.
Availability of full CDRs: Call detail records or
CDRs capture considerable amount of metadata about
incoming and outgoing calls, including source and
target phone numbers, time and duration, phone num-
ber to which call should be billed, telecommunication
equipment information etc. Usually most of the com-
munication servers and service providers can provide
full CDRs to the client.
Network logs: Network logs can provide a lot of
information which might not be available in CDRs.
Additional information includes gateway IP addresses
in case of VoIP calls, routing information, packet size,
network latency between calls, codecs used etc.
3)
4)
B. Setup using communication server
Having discussed some of the functionalities of a telephony
honeypot in the last section, in this section we describe how
to build a telephony honeypot on top of Asterisk [2] (similar
setup can be used with FreeSwitch [6]).
Asterisk (a free and open source software) turns an ordinary
computer into a communications server. Asterisk powers IP
PBX systems, VoIP gateways, conference servers and more.
Asterisk is capable of interfacing with many traditional tele-
com protocols, VoIP protocols, and codecs. It provides a
comprehensive list of capabilities and features including IVR
voicemail, call recording, full CDRs etc.
Following are some of the plausible directions one can fol-
low to setup a telephony honeypot. It can either be integrated
with an existing network or set up from scratch.
Fig. 2.
GSM gateways/USB Wiﬁ Dongle
Telephony honeypot setup for mobile phone numbers using VoIP
c) VoIP GSM Gateway: GSM gateways work by in-
serting a normal Mobile SIM Card into the device, and once
signal has been found the device is capable of routing numbers
out via the SIM Card. GSM gateways are available in various
conﬁgurations based on 1, 2, 4 or up-to 128 slots i.e. up-
to 128 SIM cards can be added to the GSM gateway. GSM
gateways are usually very expensive. A 4-slot GSM gateway
can cost up-to 500 USD. Therefore, to scale this setup one
can either buy more GSM gateways or purchase more SIM
cards and use the unconditional call forwarding feature (which
every telecom company provides) to forward all the calls to any
of the SIM cards installed in the GSM gateway. In countries
like China and India, where the penetration of mobile phones
has tremendously increased in the last decade, installing GSM
gateways has an advantage to SIP trunks where the inﬂux of
unwanted calls is higher on the mobile lines than landlines [4].
Fig. 1. Telephony honeypot setup for landline numbers using SIP trunk
a) SIP Trunk: SIP trunking is a VoIP and streaming
media service based on the Session Initiation Protocol (SIP) by
which ISPs deliver telephone services to customers equipped
with SIP-based Private Branch Exchange IP-PBX. IP phones,
fax machines can all use the PBX to connect with the SIP trunk
(see Figure 1). The PBX is responsible for routing calls to the
appropriate extensions based on the entry in the call manager
table. For example, in Figure 1, an incoming call to 83345
is forwarded to the IP phone with IP address 192.168.1.11.
Similarly, any call to a range of numbers (88800-88899) is
forwarded to the honeypot with IP address 192.168.1.10. This
5
d) USB Modem/Dongle with SIM card: These de-
vices/dongles are commonly used to get wireless Internet
connection on the laptop while on the move. These dongles
(e.g. Huawei E220 [14]) have an in-built GSM chip which
interacts with the GSM SIM present inside. Usually the SIM
is data only, however, voice enabled SIM cards can be inserted
into unlocked versions of the device. The device can directly
be connected to a telephony honeypot and can be conﬁgured
to receive calls. Scalability is a major issue with such a
conﬁguration, however, as discussed above, more SIM cards
can be purchased and all the calls coming in to these SIM cards
can be forwarded to the device. These devices are relatively
inexpensive and cost less than 30 USD.
C. Setup using cloud communication service providers
There are cloud communication companies (e.g. Tropo [21]
and Twilio [22]), which provide telecommunication Infras-
tructure as a Service (IaaS) to programmatically make and
receive calls. For our purpose, one can opt for different services
like buying phone numbers (phoneytokens), call recording,
transcription etc. The cost is recurring and is based on usage.
Call handling and recording is done at the service provider’s
end. The main advantage of using this kind of setup is that one
can choose phone numbers from different locations across the
world. For example, with Tropo, one can purchase numbers
from more than 40 countries.
V. PHONEYPOT DEPLOYMENT
In this section, we provide the details of Phoneypot, a
concrete instance of a telephony honeypot, that we used to
explore the feasibility and value of telephony honeypots. To
the best of our knowledge, Phoneypot is the ﬁrst and the
largest telephony honeypot ever deployed that can receive calls
originating from all kinds of sources. We brieﬂy describe
how we addressed the challenges associated with telephony
honeypots in setting up Phoneypot.
We worked with an industry partner, Nomorobo, to setup
Phoneypot with 39,696 phoneytokens obtained from a cloud
based telecommunications service provider, where Nomorobo
bears the cost of the setup. Nomorobo blocks unwanted robo-
calls targeting its customers and was keen to use intelligence
provided by Phoneypot to enhance the effectiveness of its
solution. As discussed earlier, phoneytokens can be seeded at
targets that are most likely to be scraped by the scamsters. At
this point, we do not actively seed any of the phoneytokens
by ourselves. However, according to the provider of these
phoneytokens, they are “dirty” based on past history i.e. they
have been given up by its customers because of the high
volume of unwanted incoming calls as compared to other
numbers. We have not been provided any information about the
past history of the number of calls on these phoneytokens when
they were given up. We also did not record any audio from
the calls received on these phoneytokens for now, avoiding cost
and legal issues. All the calls coming in to Phoneypot were
immediately terminated by sending a busy tone. The only data
obtained was the source phone number, the destination phone
number and the timestamp of the call. Nomorobo shared this
data with us on a weekly basis. In our ongoing work, we
are exploring the feasibility of engaging a limited number of
“suspicious” callers and recording of call audio.
VI. RESULTS
The main purpose of the early experimental results dis-
cussed in this section is to demonstrate the viability of the
telephony honeypot idea and to gain early insights. These re-
sults are based on deployment of Phoneypot over seven weeks,
from 22nd March 2014 till 11th May 2014. We present call
volume and temporal analysis of the received calls. We also
analyze the effect of age and geography of phoneytokens on
call volume. The information recorded by Phoneypot allowed
us to identify certain abuse patterns that are discussed in this
section.
A. Call volume and Temporal characteristics
We received a total of 1,297,517 calls over the course of 50
days that were made to 36,912 phoneytokens. There are a total
of 252,621 unique sources that called Phoneypot. It should be
noted that despite the claim from the service provider that these