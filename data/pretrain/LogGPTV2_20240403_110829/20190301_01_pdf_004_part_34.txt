sparse_arr(0) := 0;
sparse_arr(10) := 10;
sparse_arr(100) := 100;
DBMS_OUTPUT.PUT_LINE('FIRST element: ' || sparse_arr(sparse_arr.FIRST));
END;
FIRST element: -100
3.11.6 LAST
LAST is a method that returns the subscript of the last element in a collection. The syntax
for using LAST is as follows:
collection.LAST
collection is the name of a collection.
The following example displays the last element of the associative array.
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
sparse_arr sparse_arr_typ;
BEGIN
sparse_arr(-100) := -100;
sparse_arr(-10) := -10;
sparse_arr(0) := 0;
sparse_arr(10) := 10;
sparse_arr(100) := 100;
DBMS_OUTPUT.PUT_LINE('LAST element: ' || sparse_arr(sparse_arr.LAST));
END;
LAST element: 100
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 290
Database Compatibility for Oracle® Developers Guide
3.11.7 LIMIT
LIMIT is a method that returns the maximum number of elements permitted in a
collection. LIMIT is applicable only to varrays. The syntax for using LIMIT is as follows:
collection.LIMIT
collection is the name of a collection.
For an initialized varray, LIMIT returns the maximum size limit determined by the varray
type definition. If the varray is uninitialized (that is, it is a null varray), an exception is
thrown.
For an associative array or an initialized nested table, LIMIT returns NULL. If the nested
table is uninitialized (that is, it is a null nested table), an exception is thrown.
3.11.8 NEXT
NEXT is a method that returns the subscript that follows a specified subscript. The
method takes a single argument; the subscript that you are testing for.
collection.NEXT(subscript)
collection is the name of the collection.
If the specified subscript is less than the first subscript in the collection, the function
returns the first subscript. If the subscript does not have a successor, NEXT returns NULL.
If you specify a NULL subscript, PRIOR does not return a value.
The following example demonstrates using NEXT to return the subscript that follows
subscript 10 in the associative array, sparse_arr:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
sparse_arr sparse_arr_typ;
BEGIN
sparse_arr(-100) := -100;
sparse_arr(-10) := -10;
sparse_arr(0) := 0;
sparse_arr(10) := 10;
sparse_arr(100) := 100;
DBMS_OUTPUT.PUT_LINE('NEXT element: ' || sparse_arr.next(10));
END;
NEXT element: 100
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 291
Database Compatibility for Oracle® Developers Guide
3.11.9 PRIOR
The PRIOR method returns the subscript that precedes a specified subscript in a
collection. The method takes a single argument; the subscript that you are testing for.
The syntax is:
collection.PRIOR(subscript)
collection is the name of the collection.
If the subscript specified does not have a predecessor, PRIOR returns NULL. If the
specified subscript is greater than the last subscript in the collection, the method returns
the last subscript. If you specify a NULL subscript, PRIOR does not return a value.
The following example returns the subscript that precedes subscript 100 in the
associative array, sparse_arr:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
sparse_arr sparse_arr_typ;
BEGIN
sparse_arr(-100) := -100;
sparse_arr(-10) := -10;
sparse_arr(0) := 0;
sparse_arr(10) := 10;
sparse_arr(100) := 100;
DBMS_OUTPUT.PUT_LINE('PRIOR element: ' || sparse_arr.prior(100));
END;
PRIOR element: 10
3.11.10 TRIM
The TRIM method removes an element or elements from the end of a collection. The
syntax for the TRIM method is:
collection.TRIM[(count)]
collection is the name of a collection.
count is the number of elements removed from the end of the collection. Advanced
Server will return an error if count is less than 0 or greater than the number of elements
in the collection.
The following example demonstrates using the TRIM method to remove an element from
the end of a collection:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 292
Database Compatibility for Oracle® Developers Guide
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER;
sparse_arr sparse_arr_typ := sparse_arr_typ(-100,-10,0,10,100);
BEGIN
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
sparse_arr.TRIM;
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
END;
COUNT: 5
COUNT: 4
COUNT indicates that before the TRIM method, there were 5 elements in the collection;
after the TRIM method was invoked, the collection contains 4 elements.
You can also specify the number of elements to remove from the end of the collection
with the TRIM method:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER;
sparse_arr sparse_arr_typ := sparse_arr_typ(-100,-10,0,10,100);
v_results VARCHAR2(50);
BEGIN
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
sparse_arr.TRIM(2);
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
FOR i IN sparse_arr.FIRST .. sparse_arr.LAST LOOP
IF sparse_arr(i) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || sparse_arr(i) || ' ';
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
END;
COUNT: 5
COUNT: 3
Results: -100 -10 0
COUNT indicates that before the TRIM method, there were 5 elements in the collection;
after the TRIM method was invoked, the collection contains 3 elements.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 293
Database Compatibility for Oracle® Developers Guide
3.12 Working with Collections
Collection operators allow you to transform, query and manipulate the contents of a
collection.
3.12.1 TABLE()
Use the TABLE() function to transform the members of an array into a set of rows. The
signature is:
TABLE(collection_value)
Where:
collection_value
collection_value is an expression that evaluates to a value of collection type.
The TABLE() function expands the nested contents of a collection into a table format.
You can use the TABLE() function anywhere you use a regular table expression.
The TABLE() function returns a SETOF ANYELEMENT (a set of values of any type). For
example, if the argument passed to this function is an array of dates, TABLE() will
return a SETOF dates. If the argument passed to this function is an array of paths,
TABLE() will return a SETOF paths.
You can use the TABLE() function to expand the contents of a collection into table form:
postgres=# SELECT * FROM TABLE(monthly_balance(445.00, 980.20, 552.00));
monthly_balance
----------------
445.00
980.20
552.00
(3 rows)
3.12.2 Using the MULTISET UNION Operator
The MULTISET UNION operator combines two collections to form a third collection. The
signature is:
coll_1 MULTISET UNION [ALL | DISTINCT] coll_2
coll_1 and coll_2 specify the names of the collections to combine.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 294
Database Compatibility for Oracle® Developers Guide
Include the ALL keyword to specify that duplicate elements (elements that are present in
both coll_1 and coll_2) should be represented in the result, once for each time they
are present in the original collections. This is the default behavior of MULTISET UNION.
Include the DISTINCT keyword to specify that duplicate elements should be included in
the result only once.
The following example demonstrates using the MULTISET UNION operator to combine
two collections (collection_1 and collection_2) into a third collection
(collection_3):
DECLARE
TYPE int_arr_typ IS TABLE OF NUMBER(2);
collection_1 int_arr_typ;
collection_2 int_arr_typ;
collection_3 int_arr_typ;
v_results VARCHAR2(50);
BEGIN
collection_1 := int_arr_typ(10,20,30);
collection_2 := int_arr_typ(30,40);
collection_3 := collection_1 MULTISET UNION ALL collection_2;
DBMS_OUTPUT.PUT_LINE('COUNT: ' || collection_3.COUNT);
FOR i IN collection_3.FIRST .. collection_3.LAST LOOP
IF collection_3(i) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || collection_3(i) || ' ';
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
END;
COUNT: 5
Results: 10 20 30 30 40
The resulting collection includes one entry for each element in collection_1 and
collection_2. If the DISTINCT keyword is used, the results are the following:
DECLARE
TYPE int_arr_typ IS TABLE OF NUMBER(2);
collection_1 int_arr_typ;
collection_2 int_arr_typ;
collection_3 int_arr_typ;
v_results VARCHAR2(50);
BEGIN
collection_1 := int_arr_typ(10,20,30);
collection_2 := int_arr_typ(30,40);
collection_3 := collection_1 MULTISET UNION DISTINCT collection_2;
DBMS_OUTPUT.PUT_LINE('COUNT: ' || collection_3.COUNT);
FOR i IN collection_3.FIRST .. collection_3.LAST LOOP
IF collection_3(i) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || collection_3(i) || ' ';
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 295
Database Compatibility for Oracle® Developers Guide
END;
COUNT: 4
Results: 10 20 30 40
The resulting collection includes only those members with distinct values. Note in the
following example that the MULTISET UNION DISTINCT operator also removes
duplicate entries that are stored within the same collection:
DECLARE
TYPE int_arr_typ IS TABLE OF NUMBER(2);
collection_1 int_arr_typ;
collection_2 int_arr_typ;
collection_3 int_arr_typ;
v_results VARCHAR2(50);
BEGIN
collection_1 := int_arr_typ(10,20,30,30);
collection_2 := int_arr_typ(40,50);
collection_3 := collection_1 MULTISET UNION DISTINCT collection_2;
DBMS_OUTPUT.PUT_LINE('COUNT: ' || collection_3.COUNT);
FOR i IN collection_3.FIRST .. collection_3.LAST LOOP
IF collection_3(i) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || collection_3(i) || ' ';
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
END;
COUNT: 5
Results: 10 20 30 40 50
3.12.3 Using the FORALL Statement
Collections can be used to more efficiently process DML commands by passing all the
values to be used for repetitive execution of a DELETE, INSERT, or UPDATE command in
one pass to the database server rather than re-iteratively invoking the DML command
with new values. The DML command to be processed in such a manner is specified with
the FORALL statement. In addition, one or more collections are given in the DML
command where different values are to be substituted each time the command is
executed.
FORALL index IN lower_bound .. upper_bound
{ insert_stmt | update_stmt | delete_stmt };
index is the position in the collection given in the insert_stmt, update_stmt, or
delete_stmt DML command that iterates from the integer value given as
lower_bound up to and including upper_bound.
Note: If an exception occurs during any iteration of the FORALL statement, all updates
that occurred since the start of the execution of the FORALL statement are automatically
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 296
Database Compatibility for Oracle® Developers Guide
rolled back. This behavior is not compatible with Oracle databases. Oracle allows explicit
use of the COMMIT or ROLLBACK commands to control whether or not to commit or roll
back updates that occurred prior to the exception.
The FORALL statement creates a loop – each iteration of the loop increments the index
variable (you typically use the index within the loop to select a member of a collection).
The number of iterations is controlled by the lower_bound .. upper_bound clause.
The loop is executes once for each integer between the lower_bound and
upper_bound (inclusive) and the index is incremented by one for each iteration. For
example:
FORALL i IN 2 .. 5
Creates a loop that executes four times – in the first iteration, the index (i) is set to the
value 2; in the second iteration, the index is set to the value 3, and so on. The loop
executes for the value 5 and then terminates.
The following example creates a table (emp_copy) that is an empty copy of the emp
table. The example declares a type (emp_tbl) that is an array where each element in the
array is of composite type, composed of the column definitions used to create the table,
emp. The example also creates an index on the emp_tbl type.
t_emp is an associative array, of type emp_tbl. The SELECT statement uses the BULK
COLLECT INTO command to populate the t_emp array. After the t_emp array is
populated, the FORALL statement iterates through the values (i) in the t_emp array index
and inserts a row for each record into emp_copy.
CREATE TABLE emp_copy(LIKE emp);
DECLARE
TYPE emp_tbl IS TABLE OF emp%ROWTYPE INDEX BY BINARY_INTEGER;
t_emp emp_tbl;
BEGIN
SELECT * FROM emp BULK COLLECT INTO t_emp;
FORALL i IN t_emp.FIRST .. t_emp.LAST
INSERT INTO emp_copy VALUES t_emp(i);
END;
The following example uses a FORALL statement to update the salary of three employees:
DECLARE
TYPE empno_tbl IS TABLE OF emp.empno%TYPE INDEX BY BINARY_INTEGER;
TYPE sal_tbl IS TABLE OF emp.ename%TYPE INDEX BY BINARY_INTEGER;
t_empno EMPNO_TBL;
t_sal SAL_TBL;
BEGIN
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 297
Database Compatibility for Oracle® Developers Guide
t_empno(1) := 9001;
t_sal(1) := 3350.00;
t_empno(2) := 9002;
t_sal(2) := 2000.00;
t_empno(3) := 9003;
t_sal(3) := 4100.00;
FORALL i IN t_empno.FIRST..t_empno.LAST
UPDATE emp SET sal = t_sal(i) WHERE empno = t_empno(i);
END;
SELECT * FROM emp WHERE empno > 9000;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+---------+-----+----------+---------+------+--------
9001 | JONES | ANALYST | | | 3350.00 | | 40
9002 | LARSEN | CLERK | | | 2000.00 | | 40
9003 | WILSON | MANAGER | | | 4100.00 | | 40
(3 rows)
The following example deletes three employees in a FORALL statement:
DECLARE
TYPE empno_tbl IS TABLE OF emp.empno%TYPE INDEX BY BINARY_INTEGER;
t_empno EMPNO_TBL;
BEGIN
t_empno(1) := 9001;
t_empno(2) := 9002;
t_empno(3) := 9003;
FORALL i IN t_empno.FIRST..t_empno.LAST
DELETE FROM emp WHERE empno = t_empno(i);
END;
SELECT * FROM emp WHERE empno > 9000;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+-----+-----+----------+-----+------+--------
(0 rows)
3.12.4 Using the BULK COLLECT Clause
SQL commands that return a result set consisting of a large number of rows may not be
operating as efficiently as possible due to the constant context switching that must occur
between the database server and the client in order to transfer the entire result set. This
inefficiency can be mitigated by using a collection to gather the entire result set in
memory which the client can then access. The BULK COLLECT clause is used to specify
the aggregation of the result set into a collection.
The BULK COLLECT clause can be used with the SELECT INTO, FETCH INTO and
EXECUTE IMMEDIATE commands, and with the RETURNING INTO clause of the
DELETE, INSERT, and UPDATE commands. Each of these is illustrated in the following
sections.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 298
Database Compatibility for Oracle® Developers Guide
3.12.4.1 SELECT BULK COLLECT
The BULK COLLECT clause can be used with the SELECT INTO statement as follows.