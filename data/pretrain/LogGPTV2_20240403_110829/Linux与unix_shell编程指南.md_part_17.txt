### 11.1.11 唯一性分类
当原文件中存在重复行时，可以使用 `-u` 选项进行唯一性分类以去除这些重复行。例如，如果文件中有两行完全相同的 "A l i e n"，则可以通过以下命令去除重复行：

```bash
sort -u input_file
```

此命令会自动处理并输出无重复行的文件。

### 11.1.12 使用 `-k` 的其他 `sort` 方法
`sort` 命令还提供了一些方法来指定分类键。可以通过 `-k` 选项指定从第几域开始分类（注意：域编号从 1 开始）。例如，如果你希望根据第 4 域进行排序，可以使用如下命令：

```bash
sort -k4 input_file
```

这在处理按年租金排序的数据时非常有用。此外，还可以结合多个 `-k` 选项来实现更复杂的排序逻辑。

### 11.1.13 指定多级分类键
要基于多个字段对数据进行排序，比如先按第 4 域再按第 1 域排序，可以这样写命令：

```bash
sort -k4,4 -k1,1 input_file
```

反过来，如果你想首先展示最高年租金，可以通过添加 `-r` 参数来反转排序顺序：

```bash
sort -rk4,4 -k1,1 input_file
```

### 11.1.14 自定义排序序列
除了上述方法外，还可以通过 `-n` 选项指定不参与比较的部分。例如，下面这条命令表示从第 0 域开始排序，忽略第 2 域，然后继续使用第 3 域作为排序依据：

```bash
sort -k1,1 -nk2,2 -k3,3 input_file
```

### 11.1.15 使用 `+pos` 定义起始位置
另一种指定起始分类位置的方法是采用 `+field_number.character_position` 格式。假设你需要从第 1 域的第三个字符处开始排序，则命令应为：

```bash
sort +1.2 input_file
```

这里的 `.2` 表示从该域内的第二个字符之后开始考虑。

### 11.1.16 利用 `head` 和 `tail` 查看部分结果
对于大型文件，你可能只关心排序后的头部或尾部记录。使用 `head` 或 `tail` 可以轻松实现这一点。例如，要查看最高年租金的记录，可以这样做：

```bash
sort -k4,4 -r input_file | head -1
```

而要查看最低年租金的情况，则相应地调整命令：

```bash
sort -k4,4 input_file | tail -1
```

默认情况下，`head` 和 `tail` 分别显示文件的前 10 行和后 10 行内容。你可以通过添加参数来改变这一行为，如 `head -n 20` 显示前 20 行。

### 11.1.17 与 `awk` 结合使用 `sort`
有时需要对 `sort` 的输出添加额外信息以便更好地理解数据。这时可以利用 `awk` 来完成这项任务。例如，想要获取最低租金的相关信息，并附加上描述性文本，可以编写如下脚本：

```bash
sort -k4,4 input_file | awk 'BEGIN {FS=":"; print "Lowest Rent:", $4}'
```

### 11.1.18 合并已排序的文件
若需合并两个已经排好序的文件，可以使用 `sort -m` 命令。假设有两个家电名称列表分别存储于不同文件中，现在想把它们合并成一个有序列表，操作步骤如下：

```bash
sort -m file1.txt file2.txt > combined_sorted_list.txt
```

这里 `-m` 表示合并模式，确保最终输出也是正确排序的。

### 11.2 系统级别的 `sort` 应用
`sort` 在系统管理方面也有广泛应用，比如对 `/etc/passwd` 文件中的用户名进行排序：

```bash
sort -t: -k1,1 /etc/passwd
```

或者用于 `df` 命令输出，按照磁盘空间利用率降序排列：

```bash
df -h | sort -hr -k5
```

### 11.3 `uniq` 工具介绍
`uniq` 用来去除或标记重复行。通常它假设输入已经过排序。与 `sort -u` 不同的是，`uniq` 保留连续出现的相同行中的第一行，但后续重复会被删除。常用的选项包括：

- `-u` 只显示非重复行。
- `-d` 只显示有重复的数据行。
- `-c` 统计每个重复行出现次数。
- `-f N` 忽略前 N 个字段。

### 11.4 `join` 命令详解
`join` 用于将两个已排序的文本文件连接起来。其基本语法为：

```bash
join [options] file1 file2
```

支持的选项包括：

- `-a N` 当没有匹配项时也打印来自文件 N 的行。
- `-o FIELD_LIST` 选择输出哪些字段。
- `-j FIELD_NUMBER` 指定连接字段的位置。
- `-t CHAR` 设置分隔符。

### 11.5 `cut` 命令入门
`cut` 用于从文件中提取特定列或字符。主要选项如下：

- `-c LIST` 提取指定位置的字符。
- `-f LIST` 提取指定的字段。
- `-d CHAR` 指定字段分隔符。

举例来说，从 `/etc/passwd` 中提取用户 ID 和家目录：

```bash
cut -d: -f1,6 /etc/passwd
```

以上就是对相关工具的基本介绍及应用示例。希望对你有所帮助！