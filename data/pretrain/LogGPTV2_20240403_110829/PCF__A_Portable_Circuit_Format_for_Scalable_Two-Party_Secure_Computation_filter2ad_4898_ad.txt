due to the improved scalability of the system.
Arbitrary-Width Millionaire’s Problem As a simple
sanity check for our system, we tested an arbitrary-width
function for the millionaire’s problem; this can be viewed
as a string comparison function on 32 bit characters. It
outputs a 1 to the party which has the larger input. We
found that for this simple function, our performance was
only slightly better than the performance of the KSS12
compiler on the same circuit.
Matrix Multiplication To compare our system with the
work of Holzer et al. [12], we duplicated some of their
experiments, beginning with matrix multiplication on
32-bit integers. We found that our system performed fa-
vorably, particularly due to the optimizations our com-
piler and PCF interpreter perform. On average, our sys-
tem generated circuits that are 60% smaller. We tested
matrices of 3x3, 5x5, 8x8, and 16x16, with 32 bit integer
elements.
Hamming Distance Here, we duplicate the Hamming
distance experiment from Holzer et al. [12]. Again, we
found that our system generated substantially smaller cir-
cuits. We tested input sizes of 160, 1600, and 16000 bits.
Integer Sum We implemented a basic arbitrary-width in-
teger addition function, using ripple-carry addition. No
330  22nd USENIX Security Symposium 
USENIX Association
10
Function
16384-bit Comp.
3x3 Matrix Mult.
5x5 Matrix Mult.
8x8 Matrix Mult.
16x16 Matrix Mult.
32-bit Mult.
64-bit Mult.
128-bit Mult.
256-bit Mult.
512-bit Mult.
1024-bit Mult.
Total Gates
330,784
172,315
797,751
3,267,585
26,140,673
65,121
321,665
1,409,025
5,880,833
-
-
HFKV
non-XOR gates
131,103
47,871
221,625
907,776
7,262,208
26,624
126,529
546,182
2,264,860
-
-
Time (s)
Total Gates
105. ± 0.1%
98,303
2.2 ± 4%
424,748
8.40 ± 0.3%
1,968,452
59.4 ± 0.3%
8,067,458
2,600 ± 7% 64,570,969
15,935
6.43 ± 0.3%
64,639
71.4 ± 0.3%
999. ± 0.1%
260,351
1,044,991
16,000 ± 2%
4,187,135
16,763,518
-
-
KSS12
non-XOR gates
49,154
160,949
746,177
3,058,754
24,502,530
5,983
24,384
97,663
391,935
1,570,303
6,286,335
Time (s)
4.66 ± 0.5%
10.5 ± 0.5%
48.2 ± 0.2%
210 ± 2%
2,200 ± 1%
0.55 ± 5%
1.6 ± 2%
6.10 ± 0.6%
24.5 ± 0.2%
105. ± 0.2%
430. ± 0.3%
Table 6: Times of HFKV and KSS12 compilers with circuit sizes. The Mult. program uses a Shift-Add implementa-
tion. All times are averaged over 50 samples with the exception of the HFKV 256-bit multiplication, which was run
for 10 samples; times are given with 95% conﬁdence intervals.
array references are needed, and so our compiler easily
handles this function even for very large input sizes. We
tested input sizes of 128, 256, and 1024 bits.
Integer Multiplication Building on the integer addition
function, we tested an integer multiplication function that
uses the textbook shift-and-add algorithm. Unlike the in-
teger sum and hamming distance functions, the multipli-
cation function requires arrays for both input and out-
put, which slows the compiler down as the problem size
grows. We tested bit sizes of 64, 128, 256, and 1024.
RSA (Modular Exponentiation) In the KSS12 sys-
tem [18], it was possible to compile an RSA circuit for
toy problem sizes, and it took over 24 hours to compile
a circuit for 256-bit RSA. This lengthy compile time and
large memory requirement stems from the fact that all
loops are unrolled before any optimization is performed,
resulting in a very large intermediate representation to
be analyzed. As a demonstration of the improvement
our approach represents, we compiled not only toy RSA
sizes, but also an RSA-1024 circuit, using only modest
computational resources. We tested bit sizes of 256, 512,
and 1024.
Graph Isomorpism We created a program that allows
two parties to jointly prove the zero knowledge proof
of knowledge for graph isomorphism, ﬁrst presented by
Goldreich et al. [9]. In Goldreich et al.’s proof system,
the prover has secret knowledge of an isomorphism be-
tween two graphs, g1 and g2. To prove this, the prover
sends the veriﬁer a random graph g3 that is isomorphic
to g1 and g2, and the veriﬁer will then choose to learn
either the g1 → g3 isomorphism or the g2 → g3 isomor-
phism. We modify this protocol so that Alice and Bob
must jointly act as the prover; each is given shares of
an isomorphism between graphs g1 and g2, and will use
the online protocol to compute g3 and shares of the two
isomorphisms.
Our implementation works as follows:
the program
takes in XOR shares of the isomophism between g1 and
g2 and a random seed from both participants.
It also
takes the adjacency matrix representation of g1 as input
by a single party. The program XORs the shares together
to create the g1 → g2 isomorphism. The program then
creates a random isomorphism from g1 → g3 using AES
as the PRNG (to reduce the input sizes and thus the OT
costs), which effectively also creates g3.
Once the random isomorphism g1 → g3 is created, the
original isomorphism, g1 → g2, is inverted to get an iso-
morphism from g2 → g1. Then the two isomorphisms
are “followed” in a chain to get the g2 to g3 isomor-
phism, i.e., for the ith instance in the isomorphic ma-
trix, iso2→3[i] = iso1→3[iso2→1[i]]. The program outputs
shares of both the isomorphism from g1 to g3 and the
isomorphism from g2 to g3 to both parties.
An adjacency matrix of g3 is also an output for the
party which input the adjacency matrix g1. This is calcu-
lated by using g1 and the g1 → g3 isomorphism.
6.3 Online Running Times
To test the online performance of our new format, we
modiﬁed the KSS12 protocol to use the PCF interpreter.
Two sets of tests were run: one between two computers
with similar speciﬁcations on the University of Virginia
LAN, a busy 100 megabit Ethernet network, and one be-
tween two smartphones communicating over a wiﬁ net-
work.
For the LAN experiments, we used two comput-
ers running ScientiﬁcLinux 6.3, a four core Intel Xeon
E5506 2.13GHz CPU, and 8GB of RAM. No time limit
on computation was imposed on these machines, so we
were able to run the RSA-1024 circuit, which requires a
little less than two days. To compensate for slight con-
USENIX Association  
22nd USENIX Security Symposium  331
11
Function
CPU (s)
Network (s)
CPU (s)
Network (s)
Generator
Evaluator
99.8± 0.2%
9.13± 0.4%
91.2± 0.2%
0.749± 0.3%
2.04± 0.3%
5.74± 0.5%
72.7± 0.2%
1940± 0.2%
16384-bit Comp.
79.4± 0.2%
Hamming 1600
6.87± 2%
Hamming 16000
69.± 2%
64-bit Mult.
0.494± 0.6%
128-bit Mult.
1.31± 0.6%
256-bit Mult.
2.7± 3%
1024-bit Mult.
40.± 3%
256-bit RSA
1080± 3%
1024-bit RSA 1.15× 105 ± 0.5% 4.4× 104 ± 4% 9.5× 104 ± 5% 6.5× 104 ± 7%
4.28± 0.6%
19.5± 0.4%
81.1± 0.3%
6.15± 0.4%
60.3± 0.6%
26.0± 0.6%
2.9± 4%
28.± 3%
0.409± 0.3%
1.25± 0.2%
4.2± 2%
60.± 2%
1620± 2%
5.63± 0.6%
0.64± 4%
5.67± 0.7%
0.158± 0.7%
0.52± 1%
1.2± 2%
28.± 4%
767.± 0.7%
0.403± 0.6%
1.81± 0.4%
7.39± 0.4%
1.05± 0.7%
15.7± 0.6%
3x3 Matrix Mult.
5x5 Matrix Mult.
8x8 Matrix Mult.
4-node ISO
16-node ISO
5.33± 0.4%
24.4± 0.2%
100.± 0.2%
10.1± 0.1%
116.± 0.2%
1.45± 0.8%
6.75± 0.9%
26.8± 0.7%
4.96± 0.3%
71.6± 0.3%
Table 7: Total running time, including PCF operations and protocol operations such as oblivious transfer, for online
protocols using the PCF interpreter and the KSS12 two party computation system, on two computers communicating
over the University of Virginia LAN. With the exception of RSA-1024, all times are averaged over 50 samples; RSA-
1024 is averaged over 8 samples. Running time is divided into time spent on computation and time spent on network
operations (including blocking).
ﬁguration differences between the two systems, we alter-
nated between each machine acting as the generator and
acting as the evaluator.
We give the results of this experiment in Table 7. We
note that while the simulator times given in Table 5 are
more than half the CPU time measured, they are also on
par with the time spent waiting on the network. Non-
blocking I/O or a background thread for the PCF inter-
preter may improve performance somewhat, which is an
ongoing engineering task in our implementation.
6.4 Malicious Model Tests
The PCF system is not limited to the semi-honest model.
We give preliminary results in the malicious model ver-
sion of KSS12. These experiments were run on the same
test systems as above, using two cores for each party.
We present our results in Table 9. The increased running
times are expected, as we used only two cores per party.
In the case of 16384-bit comparison, the increase is very
dramatic, due to the large amount of time spent on obliv-
ious transfer (as both parties have long inputs).
6.5 Phone Execution
We created a PCF interpreter for use with the HEKM ex-
ecution system and ported it to the Android environment.
We then ran it on two Galaxy Nexus phones where one
phone was the generator and another phone was the eval-
uator. These phones have dual core 1.2Ghz processors
and were linked over Wi-Fi using an Apple Airport.
6.6 Phone Trials
As seen in Table 8, we were able to run the smaller pro-
grams directly on two phones. Since the interpreter ex-
ecutes slower on a phone and what would have taken
a week of LAN trials would have taken years of phone
time, we did not complete trials of the larger programs.
Not all of the programs had output for the generator, al-
lowing the generator to ﬁnish before the evaluator. This
leads to a noticeable difference in total running time be-
tween the two parties.
Mood’s work on designing SFE applications for mo-
bile devices [22] found that allocation and deallocation
was a bottleneck to circuit execution. This issue was
addressed by substituting the standard BigInteger type
for a custom class that reduced the amount of alloca-
tion required for numeric operations, resulting in a four-
fold improvement in execution time. The lack of this
optimization in our mobile phone experiments may con-
tribute to the reduced performance that we observed.
In future work, we will port the C interpreter and
KSS12 system to Android and run the experiment with
that execution system. Since overhead appears to be tied
to Android’s Dalvik Virtual Machine (DVM), running
programs natively should reduce overhead and hence re-
332  22nd USENIX Security Symposium 
USENIX Association
12
Function
CPU (s)
Network (s)
CPU (s)
Network (s)
Generator
Evaluator
16384-bit Comp.
128-bit Sum
256-bit Sum
1024-bit Sum
64-bit Mult.
128-bit Mult.
3x3 Matrix Mult.
5x5 Matrix Mult.
8x8 Matrix Mult.
163.± 0.5%
5.8± 8.2%
7.3± 5.0%
16.± 3.1%
63.3± 0.5%
257.± 0.2%
76.9± 0.4%
352.± 0.3%
1,588.± 0.1%
68.± 1%
12.± 3%
3.± 20%
1.± 30%
4.± 20%
1.± 30%
6.4± 7%
2.± 20%
5.± 10%
1.± 10%
12.± 6%
3.8± 5%
12.± 2%
8.5± 4%
32.± 4%
49.± 2%
82.± 3% 1,550.± 0.1% 120.± 1%
142.± 0.5%
5.6± 8%
6.± 5%
16.± 3%
66.3± 0.6%
280.± 0.3%
82.0± 0.5%
371.± 0.3%
Table 8: Execution results from the phone interpreter using the HEKM execution system on two Galaxy Nexus phones.
Times are averages of 50 samples, with 95% conﬁdence intervals.
Function
CPU (s)
Network (s)
CPU (s)
Network (s)
Generator
Evaluator
16384-bit comp.
128-bit sum
256-bit sum
1024-bit sum