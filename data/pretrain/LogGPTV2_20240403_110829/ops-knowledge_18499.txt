User: I started web development 2 weeks ago using GAE,WebApp2,Jinja2 and WTForms.
I read though several articles , discussions , watched lessons about web development with gae (udacity) and started a small project.
Now I am very inexperienced in web-development and I don't know which path i should choose.
.
.
The last few days I poked around with GAE and webapp2. It was very easy to use. But I have to say that i only used webapp2 has a request handler. (post / get)
For templates I took Jinja2 which was self explanatory too.
.
.
Now Steve from Reddit said that it's always better to use a lightweight framework instead of a very big framework because you have more control and you can scale a lot easier.
But I still want to investigate Django-nonrel. I know that Django is limited in GAE.
But to be honest I don't even know what Django does for me, (compared to WebApp2 with Jinja2)
Now to my questions:
Would you recommend a beginner to have a look into Django ? And if I am more experienced => replace some Django code.
Stick to WebApp2 + "some template engine" ?
.
.
PS: I don't ask which framework is the best, I just want some points for consideration.
Assistant: The short answer is you can probably go either way, there will be some pros/some cons, but I don't think either is pure win.
Here's some pros for using Django-nonrel as a newb:

The django docs are generally pretty good.  So it helps you get up to speed on some best practices
CSRF protection
Form validation
sessions
auth
i8n tools
You spend less time putting various basic pieces together, django has quite a lot for you.
You can potentially save time on stuff like FB/Twitter auth, since there's third party django packages for that.
Tastypie is a good rest api package, though you probably don't need it with the new Endpoints
The django test framework is great, though the Django 1.4 live test framework (which is even greater) doesn't work for App Engine.  I just discovered that yesterday and am trying (so far fruitlessly) to hack it to work.
django has a simple tool for dumping the DB to json.  This is pretty useful for testing purposes, for loading/saving fixtures.  You'll have to figure out a way to do this yourself otherwise.

cons:

Django-nonrel isn't the latest and greatest.  For one, you won't have ndb benefits.
While django docs are great, django-nonrel docs are not, so you'll have to figure out the setup part.  I've been meaning to do a writeup, but haven't had time.
Time spent learning django could just as well be spent learning something else, but I think django probably takes less time to learn than a few different pieces.
Some people have said django is overweight and takes much longer to load.  django-nonrel includes all the django-contrib addins.  I've removed many of those and have had no load time problems. (fingers crossed)
There's prob more people using webapp2+jinja, I don't see too many separate individuals chiming in on django-nonrel specific issues, though the ones that do have been very helpful.  On the other hand, if you run into a generic django problem, there's a lot of django users.

One thing I can say though, is if you've written for django, it's hard to move away from it piecemeal.  You'll have to have replaced all the pieces that you're using before you can get rid of it, otherwise, you'll still have to include most of the package.
An alternative to using django that I know of is gae-boilerplate.  It tries to do the same thing but with various different pieces.  It still needs a good testing framework though imo.