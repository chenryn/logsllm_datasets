title:Preventing Information Leaks through Shadow Executions
author:Roberto Capizzi and
Antonio Longo and
V. N. Venkatakrishnan and
A. Prasad Sistla
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Preventing Information Leaks through Shadow Executions
Roberto Capizzi
Antonio Longo
V.N. Venkatakrishnan
A. Prasad Sistla
Politecnico di Milano
Milan, Italy
University of Illinois at Chicago
Chicago, IL, USA
Abstract
A concern about personal information conﬁdentiality
typically arises when any desktop application commu-
nicates to the external network, for example, to its pro-
ducer’s server for obtaining software version updates.
We address this conﬁdentiality concern of end users by
an approach called shadow execution. A key property of
shadow execution is that it allows applications to suc-
cessfully communicate over the network while disallow-
ing any information leaks. We describe the design and
implementation of this approach for Windows applica-
tions. Experiments with our prototype implementation
indicate that shadow execution allows applications to
execute without inhibiting any behaviors, has accept-
able performance overheads while preventing any infor-
mation leaks.
1
Introduction
There is a growing trend of deploying applications that
are available for download from code producers that dis-
tribute software over the Internet. These applications
are employed by end-users to perform daily tasks such
as document processing, email and multimedia content
playback. Typical examples of such software include
media players (e.g., RealPlayer), document processing
software (e.g., Acrobat), and web browser add-ons (e.g.,
Google Toolbar). These applications run with the priv-
ileges of the end-user and typically enjoy full access to
the user’s personal data and ﬁles.
Even if the origin of these applications is from rep-
utable sources, end-users typically have concerns about
the conﬁdentiality of their private information when
dealing with these applications. When sensitive infor-
mation is provided to such software, it further increases
concern about conﬁdentiality. There have been many
recent instances where such software have been found
leaking personal information of end users. Such infor-
mation is usually transmitted through the network to a
remote system, such as the producer’s site. The ob-
jectives of transmitting such sensitive information may
range from pure marketing uses related to learning con-
sumer habits to more malicious uses such as harvesting
credit card numbers.
To illustrate this further, consider a program such as
RealPlayer that plays music ﬁles. It is not unusual to
ﬁnd that such a program periodically connects over the
network to an external server, possibly to check for an
updated version of the program (and if so, prompts the
user to download and use the updated version). When
the program tries to connect to the network, a personal
desktop ﬁrewall (such as ZoneAlarm) will prompt the
user and display a pop-up message whenever the music
player sends a message through the network to its code
producer. A genuine concern arises in the user’s mind
when program communicates over the Internet: Is this
application leaking any personal information stored in
the system?.
In this paper, we consider the problem of preventing
such information leaks from programs that reside in a
user’s desktop system and communicate over the net-
work. We consider this problem in the context of soft-
ware for Windows operating systems, which are used by
the majority of end users today. In Windows, applica-
tions are distributed without source code and end users
have no access to source code in order to easily control
or modify the functionality of an application.
When using such third party code, users are typi-
cally instructed to read the end-user-license agreement
(EULA) that is meant to indicate the software’s data har-
vesting practices. However, in practice, such EULAs are
long and loaded with legal jargon and are therefore dif-
ﬁcult for the end users to comprehend. Hence, they are
ignored by end users while downloading and installing
third party software, exposing them to attacks on conﬁ-
dentiality.
Our approach In this paper, we describe a new ap-
proach called shadow execution that successfully pre-
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.50
DOI 10.1109/ACSAC.2008.50
322
322
vents any leakage of sensitive information. Shadow exe-
cution consists of replacing the original application with
two copies of the same program that run the same code
but are initialized with different sets of inputs, and dif-
ferent restrictions are imposed. One copy, called the pri-
vate copy, is prevented from accessing the network, but
is supplied with the user’s conﬁdential data so that the
application can be employed suitably to avail its func-
tionality. Another copy, called the public copy is sup-
plied with non-conﬁdential “constant” inputs that do not
in any way pertain to the user, and is allowed to com-
municate over the network. The response obtained for
this program can then be shared with the private copy,
which can avail any network related functionality (such
as obtaining program updates) without any loss of con-
ﬁdentiality.
While our basic technique is platform-neutral, the
speciﬁc implementation of shadow execution described
in this paper is for Windows operating systems, using
virtual machine technology. Our approach and imple-
mentation provide the following beneﬁts:
• Application and Operating System Transparency. No
modiﬁcations to the application or operating system is
required in order to employ our prototype.
• Wide applicability. Our approach targets Windows
based systems,currently used by the majority of users,
where applications are distributed as binaries and end-
users do not have the mechanisms to easily understand
the intention of each application employed.
• Provable and robust protection. Our approach pro-
vides provable security guarantees, and our implemen-
tation provides robust prevention of conﬁdential infor-
mation leaks by applications.
• Friendly to safe applications. Our approach does not
affect the functionality of applications that do not leak
sensitive information.
Paper Organization This paper is organized as follows:
In Section 2 we provide the basic approach and sketch
the formal framework behind our approach. Section 3
describes our implementation. Section 4 describes our
functional and performance evaluation of our implemen-
tation. Section 5 discusses related work, and in Sec-
tion 6, we conclude.
2 Basic Approach
We describe the basic theoretical ideas behind our ap-
proach in this section. Consider a program P that takes
some local inputs, computes and communicates with
servers on the network and terminates by generating
Figure 1. Our framework
some local outputs. We divide its local inputs as well as
local outputs into two classes: private and public. In ad-
dition to local inputs and outputs, it has message outputs
to and message inputs from the network. We classify
these message inputs and outputs also as public as these
are seen by the servers. Conﬁdentiality requires that the
value of all the public outputs (local as well as network
outputs) be independent of the value of private (sensi-
tive) inputs. Note that private outputs (such as to some
trusted local ﬁles) of P may depend on private inputs.
2.1 Shadow Execution
To prevent dependence of public outputs on conﬁdential
inputs, a ﬁrst key idea behind our scheme is of using
“constant” (or fake) private inputs to the program. For
instance, if a user considers her phone number to be sen-
sitive, and would like to prevent a program from com-
municating this information on a network message or
generating it as a local public output , then she provides
a constant number (such as an arbitrary 10 digit num-
ber) as input to the program. When such constant inputs
replace a user’s sensitive data no information leaks that
concern the user will happen, because the program is
never provided any real sensitive information in the ﬁrst
place. Such a program with constant inputs can there-
fore be allowed to communicate over the network with-
out any loss of conﬁdentiality.
However, merely replacing the program inputs with
constants will not achieve the desired functionality.
Consider a word processing program that needs to op-
erate on a user’s (sensitive) ﬁle. In this case, if this sen-
sitive ﬁle is replaced by a ﬁle with dummy values, it
will address conﬁdentiality. However, the program will
not be able to perform its job and the approach will not
be very useful. To address the above problem, we in-
troduce a second idea: run two versions of P , called
323323
Ppublic, Pprivate in parallel, as shown in Figure 1.
Both these versions use the same actual public inputs,
but they differ in their private inputs. Ppublic is provided
constant values for its private input, while Pprivate is
provided the actual sensitive input. The public output
of the system is the public output of Ppublic, while its
private output is that of Pprivate.
Every message sent over the network by Pprivate is
blocked since this may contain private information. On
the other hand, messages sent by Ppublic are allowed,
i.e., transmitted. Note that we do not need to concern
ourselves any information leaks that resulting from al-
lowing Ppublic to communicate over the network. This
is because such output will anyway be only derived from
constant inputs, and this will not result in leakage of any
sensitive information.
However, every corresponding message received
from the network by Ppublic is also played to Pprivate.
This way, Pprivate will be able to receive messages such
as program updates even if it is not allowed to commu-
nicate. When both Ppublic and Pprivate terminate nor-
mally, the outputs of the system will be released; in this
case, the public output of Ppublic and the private output
of Pprivate are released. If one of Pprivate, Ppublic has
terminated and the other is involved in further commu-
nication, then the the system consults the user for fur-
ther course of action, such as abort application or ig-
nore network communication and continue. The result-
ing system, denoted as Q, is shown in Figure 1. We
can show that the following statements hold: (i) Q sat-
isﬁes the conﬁdentiality property. (ii) If P satisﬁes the
conﬁdentiality property, then both the public and private
outputs of Q are identical to the corresponding outputs
of Pprivate. (iii) If P does not satisfy the conﬁdentiality
property, then the private outputs of Q are same as the
corresponding outputs of Pprivate, while the public out-
puts of Q may differ from the public outputs of Pprivate.
2.2 Formal Reasoning of Correctness
In this section, we formally deﬁne the conﬁdentiality
property for a program communicating on the network.
We show that our approach given above ensures conﬁ-
dentiality. An input state of P is a pair (cid:104)u, v(cid:105) where u, v
are vectors, respectively, specifying the values of pub-
lic and private variables. Similarly an output state is a
pair of vectors specifying the values of output variables.
There is a special output state ⊥ that denotes aborting or
non-termination of P .
The output values generated by P not only depend on
the input state, but also on the interactions of P over the
network. We assume that the messages sent or received
over the network, by P , are values from a domain D.
Each such message contains the address of it’s destina-
tion as well as origin.
An interaction σ of P over the net is a ﬁnite alter-
nating sequence O1, I1, ..., Om, Im of messages where,
for 1 ≤ i ≤ m, Oi, Ii are respectively the messages
sent and received by P . The semantics of the program
P is given by a set F (P ) of triples of the form (s, σ, t)
where s, t are input and output states respectively, and
σ is an interaction. We require that when P receives a
message, it should handle every possible message value
it receives. With this as the main motivation, we re-
quire F (P ) to satisfy the following property: for every
(s, σ, t) ∈ F (P ), for every proper preﬁx σ(cid:48) of σ end-
ing in an output message and for every message value
x ∈ D, there is a triple of the form (s, σ(cid:48)(cid:48), t(cid:48)) ∈ F (P )
such that (σ(cid:48), x) is a preﬁx of σ(cid:48)(cid:48).
We say that P is deterministic if the output mes-
sages sent by P and the ﬁnal output generated by it are
uniquely determined by the input state and the sequence
of input messages received by it up to that point. We
assume that programs we consider are deterministic.
We say that P satisﬁes conﬁdentiality property if the
output messages and the ﬁnal low security output gen-
erated by it, are independent of the high security input
value. Formally, we say that P satisﬁes the conﬁdential-
ity property if, for every ((cid:104)u, v(cid:105), σ, (cid:104)u(cid:48), v(cid:48)(cid:105)) in F (P ) and
for every w ∈ D, the following condition (*) is satisﬁed:
(*) there exists some w(cid:48) ∈ D such that
((cid:104)u, w(cid:105), σ, (cid:104)u(cid:48), w(cid:48)(cid:105)) in F (P ).
We also deﬁne weak conﬁdentiality property. We say
that P satisﬁes weak conﬁdentiality if the output mes-
sage values generated by it are independent of low se-
curity input, and if it terminates normally then its low
security output is independent of its high security input.
Its formal deﬁnition is given by replacing condition (*)
by the weaker condition (**) as given below:
(**) either there exists some w(cid:48) ∈ D such that
((cid:104)u, w(cid:105), σ, (cid:104)u(cid:48), w(cid:48)(cid:105)) is in F (P ), or for some preﬁx
σ(cid:48) of σ, ((cid:104)u, w(cid:105), σ(cid:48), ⊥) is in F (P ).
Now the following theorem states that system Q, con-
structed in our approach, satisﬁes weak conﬁdentiality.
Further more, if P satisﬁes conﬁdentiality then Q be-
haves as P .
(The proof is not sketched due to space
limitations.)
Theorem: The system Q satisﬁes weak conﬁdential-
ity property. Further more, if P satisﬁes conﬁdentiality
property then Q is identical to P , i.e., F (Q) = F (P ).
324324
2.3 Discussion
The above theorem assures that Q satisﬁes weak conﬁ-
dentiality even when P does not satisfy conﬁdentiality.
It however does not specify the conditions under which
the private output generated by Q is useful to the end
user. Let P∗ be the program P run with actual public
and private inputs, and is allowed to freely communi-
cate on the network. We would like to have the private
output of Q to be same as that of P∗; recall that its public
output is same as that of Ppublic. Say that P∗ commu-
nicates once on the network, i.e., sends a message and
receives a reply. (The message sent by P∗ may depend
on its private input.) Suppose that the response message
received from the network does not depend on the pri-
vate input value of P∗. In this case, we can show that
the private output generated by Q is same as the private
output of P∗.
So, under the above condition, the user can con-
tinue to derive the beneﬁt from the private outputs of Q.
We note that the above conditions is typically satisﬁed
for network messages that pertain to software updates,
where the response itself (the software code received) is
not derived from any private information, but the update
request message may contain private information. Our
experiments with software update requests of programs
lends strong evidence to this observation.
3 System Design & Implementation
We propose to apply the above approach to prevent in-
formation leaks from software running on Windows sys-
tems. Implementing the shadow execution approach re-
quires mainly addressing the following questions:
• Efﬁcient Parallel Execution. How do we efﬁciently
execute public and private copies of the program P in
parallel, replicating the execution environment for the
two programs, while ensuring that all sensitive data in
the system remains isolated from the public copy?
• Providing simultaneous inputs. How do we simultane-
ously provide identical public inputs to both copies of
the program? Similarly, how do we provide asymmet-
ric (constant inputs vs. actual sensitive inputs) private
inputs, in a simultaneous fashion (for ﬁle reads, mouse
and keyboards inputs) to both copies?
• Monitoring public output. How do we monitor net-
work communication from program Ppublic and replay
it to Pprivate?
We address these issues in the following three sub-
sections.
3.1 Parallel Execution
A starting point for running two copies of the same ap-
plication is to run the two instances as processes in the
same Windows environment. The ﬁrst instance will be
granted access to the private data stored on the system
but will be denied all network access. The second in-
stance of the same program (i.e., Ppublic) will be re-
stricted (through sandboxing) to prevent access to any
sensitive information.
However, the above solution has the following draw-
backs.
• When running two processes, sandboxing to provide
strong isolation of sensitive data from one copy, while
allowing access for the other, is difﬁcult for Windows
systems. This is because sensitive information can not
only be present in the ﬁlesystem, but also in system
resources such as clipboard. Adopting sandboxing for
many such low level resources can be tedious.
• Another important issue is that many programs, such
as Mozilla Firefox, disallow two instances to be run on
the same machine. Avoiding this would require close
monitoring of application activity to inhibit this kind
of search in every possible way. Moreover, conﬂicts
between the two separate instances, on conﬁguration