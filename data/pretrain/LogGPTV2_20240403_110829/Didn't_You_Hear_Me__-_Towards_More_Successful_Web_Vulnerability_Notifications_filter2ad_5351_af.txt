provider, or WHOIS privacy proxy. Yet, the respondents to our
survey stated that the WHOIS technical contact should prove
most useful in trying to reach the administrator. In addition,
our experiences with alternative communication channels have
not found one superior to email.
Relying on large volumes of emails also increases the risk
that the sending mail server becomes blacklisted. We witnessed
that the most popular mail service, i.e., Google, likely ﬂagged
a substantial fraction of our messages as spam, although it
is unclear precisely how the volume of sent emails affected
the spam ﬁltering decisions. Hence, having dedicated security
contacts, possibly accessible via WHOIS or RDAP [22], could
prove helpful in successfully delivering notiﬁcations.
Apart from email-based notiﬁcations, the use of vulnera-
bility reward programs (VRPs) has been studied by previous
works, showing that they are very effective [14]. From the
responses to our survey, we also learned that site operators
could be reached more easily if they could opt-in to a service,
B. Increasing Trust in Notiﬁcations
An over-arching issue faced by security notiﬁcations is a
lack of trust in the message or the sender. While Cetin et al.
[6] concluded that the sender does not impact the effectiveness
of a notiﬁcation campaign, our work paints a different picture.
From the messages we received throughout our campaign as
well as the responses to our survey, we repeatedly saw cases
where trust was a vital concern. Domain operators explained
that they were often contacted by malicious parties, either
trying to sell services or products, or attempting to phish
the recipients. Our security notiﬁcations appeared similar in
nature, as they too were unsolicited. In addition, we received
feedback that our sending institution was not well-known to the
recipients and from their perspective, our email lacked means
to verify our identity (even with our signed email variant).
Thus,
technical means to verify identities (such as digital
signatures) are themselves insufﬁcient in establishing trust.
From these sentiments, we suggest that future notiﬁcation
efforts should consider partnering with well-known organi-
zations, such as Google. As a case in point, Li et al. [20]
used Google’s Search Console program to notify hijacked
webmasters, observing some of the highest remediation levels
from prior notiﬁcation works (about 80% of webmasters took
action). From a research perspective though, an interesting
direction is exploring how to establish this trust independently.
Some survey participants mentioned that the external links in
our messages decreased its trustworthiness. However, Stock
et al. [25] experimented with removing linked resources and
disclosing all technical details in the notiﬁcation email itself,
observing lower ﬁx rates. Hence, there is room for future work
on establishing more trust in the notiﬁcation messages.
C. Tailoring Notiﬁcation Content to the Recipients
In our work, we considered two types of issues that affected
different types of operators. On the one hand, WordPress can
be easily installed by almost anyone, as it merely requires
downloading the packed source and following the setup in-
structions. On the other hand, use of Git implies that the site
operates on source code which requires versioning. Intuitively,
Git usage requires a higher degree of technical expertise than
setting up a WordPress installation. Thus, it is possible that
WordPress users might beneﬁt most from different information
than more technical Git users. Additionally, different tones
or message presentations (perhaps to catch the attention of,
establish trust with, or further incentivize recipients) may have
varying success depending on the notiﬁed population.
D. Cost Effectiveness
Setting up the infrastructure to automatically detect and no-
tify on security issues at scale is a non-trivial but front-loaded
cost, as each subsequent notiﬁcation campaign can rely on the
existing infrastructure. However, our work (as well as prior
13
studies) have shown that these fully automated approaches
yield suboptimal results. Thus in our study, we investigated the
feasibility of utilizing other means of communication, which
incur additional costs (either ﬁnancial or manual effort) that
scale linearly with the number of notiﬁed sites.
In our experiment, the Friendly channel had the highest
fraction of viewed reports for both types of security issues.
However, the deﬁnition of viewed is different from the other
treatment groups, as this merely means that we sent an email
with the report, and not that somebody actually saw the details.
This manual approach did not exhibit the highest ﬁx rates
for the issues we disclosed, thus was not worth the effort.
Similarly, our manual notiﬁcations showed comparable results
in helping administrators in ﬁxing their sites but
incurred
even higher ﬁnancial or manpower costs. From the cost-beneﬁt
tradeoff, automated email notiﬁcations are still our best option.
In general, investigating the economics of notiﬁcations is
an interesting future research direction. Are there incentives
that can drive up remediation rates, such as through policy
or legal changes? Alternatively, certain parties may be more
receptive to notiﬁcations and could be prioritized for them.
For example, we observed that WordPress sites that updated
more frequently were more likely to ﬁx in response to our
notiﬁcation. By considering the costs and beneﬁts of various
notiﬁcation parameters, future research could identify areas of
improvement for security notiﬁcations.
VIII. RELATED WORK
For decades, the research community has extensively fo-
cused on discovering various issues, such as in Web ap-
plications (e.g., [4, 10, 18, 27]) and Internet servers (e.g.,
[3, 9, 12]). However, only relatively recently has the secu-
rity community begun exploring the effectiveness of outreach
efforts to inform affected parties and spur remediation.
One area of focus by these recent notiﬁcation efforts is
on incidents of compromise. In 2012, Vasek and Moore [26]
investigated abuse reports to malware domains and how the
level of detail in the report inﬂuenced cleanup rates. They
found that 55% of all contacted domains cleaned up compared
to 45% of unnotiﬁed sites. However,
those who received
detailed reports performed the highest, cleaning up 62% of
their sites. In 2013, Canali et al. [5] studied how hosting
providers handle such reports. For 20 hosting providers, they
hosted Web sites serving malware and self-reported each site
to the corresponding hosting provider, observing that 64%
of the complaints were ignored. Similarly, Nappa et al. [21]
notiﬁed 19 hosting providers about malicious servers in their
network; however, only 7 actually took steps to take down the
affected servers. Cetin et al. [6] analyzed the role of sender
reputation on the success of malware cleanup behavior, using
different sender names and email aliases. They did not strong
evidence that the sender inﬂuences remediation, although their
total population was 480 contacts (across multiple treatment
groups). Recently, Li et al. [20] showed communicating with
webmasters of hijacked Web sites via Google Search Console
increased the clean-up rates by 50% (to approximately 80%
of sites) and reduced infection lifetimes by 60%. This ﬁnding
reinforces our notion that notiﬁcations rely on reliable points
of contact, as Search Console can provide a higher ﬁdelity
delivery medium.
To proactively thwart future security problems, notiﬁca-
tions can also target parties running vulnerable or misconﬁg-
ured software. Durumeric et al. [13] discovered and notiﬁed
servers susceptible to the 2014 Heartbleed bug, a vulnerability
that received much public attention. Conducting an A/B no-
tiﬁcation experiment two weeks after public disclosure, they
found that notiﬁcations resulted in a 50% increase in patching.
Similarly, K¨uhrer et al. [17] contacted administrators running
services susceptible to DDoS ampliﬁcation attacks. Within 7
weeks, 90% of the 9 million discovered servers could not
longer be used for ampliﬁcation attacks. A contributing factor
was that the authors also coordinated with large backbone
Internet providers, who began ﬁltering potential ampliﬁcation-
inducing packets (such as NTP monlist requests) before they
could reach vulnerable servers, thus potentially masking the
true patch rate.
In 2016,
two concurrent works reported on large-scale
controlled notiﬁcation experiments for vulnerable Web servers
(Stock et al. [25]) and network misconﬁgured hosts (Li et al.
[19]), exploring different factors that may affect a notiﬁcation
campaign’s success. Both observed clear improvements in re-
mediation levels, but noted the challenges of reliably reaching
an appropriate point of contact and inciting further corrective
actions. Most recently in 2017, Cetin et al. [7] investigated
whether providing a mechanism to verify vulnerability could
encourage further remediation. They found that those who
visited their demonstration Web site were more likely to ﬁx,
but only 10% of contacts visited. They observed high bounce
rates indicating a signiﬁcant fraction of their notiﬁcations did
not reach anyone. The goal of our work is to investigate
and provide insights on the challenges these prior works
have observed,
to provide a roadmap for improved future
notiﬁcation efforts.
IX. CONCLUSION
In this paper, we have reported on a notiﬁcation experiment
targeting more than 24,000 domains, with the goal of shedding
light on why the success of vulnerability notiﬁcations is more
limited than ideal. By exploring a variety of facets surrounding
these notiﬁcations, including the channel of communication,
the message presentation, and Web site operator perspectives,
we have concretely identiﬁed several challenges that inhibit
a notiﬁcation campaign’s success. Our results and insights
help lay the groundwork for future work in making security
notiﬁcations more successful. In summary, our main takeaways
are as follows:
• Email as a communication medium suffers from several
shortcomings, including technical (e.g., anti-spam ﬁlters)
and non-technical hurdles (e.g.,
lack of sender trust).
However, the minimal increases in the success of alter-
native and less automated notiﬁcation channels (such as
phone, postal mail, or web forms) do not justify their
signiﬁcant ﬁnancial costs and time overheads.
• We empirically validated that sender trust does have
a signiﬁcant inﬂuence on success, contrasting previous
work [6]. It is not only vital that recipients trust a notiﬁ-
cation message, but also that email providers distinguish
and discard truly unwanted spam and phishing emails.
• We identiﬁed a large gap between being aware of a
security problem and addressing it. The fraction of sites
14
that ﬁxed a problem after learning about it differed per
group, ranging from about 33% of vulnerable WordPress
sites to 81% of sites with overly public Git folders. This
highlights that reaching out to affected parties is only
half of the battle, and the message itself is important
in convincing operators to take action. Moreover, future
work should investigate what level of technical detail is
required depending on the type of vulnerability being
reported.
We hope that future research such as those outlined in
Section VII can address some of these challenges to pave the
way to more successful security notiﬁcations.
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for
their valuable feedback. This work was supported by the
German Federal Ministry of Education and Research (BMBF)
through funding for the Center for IT-Security, Privacy and Ac-
countability (CISPA) (FKZ: 16KIS0345, 16KIS0656) and the
CISPA-Stanford Center for Cybersecurity (FKZ: 13N1S0762),
as well as the National Science Foundation awards CNS-
1237265 and CNS-1518921.
REFERENCES
[1] https://github.com/ben-stock/notiﬁcation-ndss2018.
[2] “WordPress codex version 3.7,” online, https://codex.
wordpress.org/Version 3.7.
[3] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger,
M. Dankel, J. Steube, L. Valenta, D. Adrian, J. A. Hal-
derman, V. Dukhovni, E. Kasper, S. Cohney, S. Engels,
C. Paar, and Y. Shavitt, “DROWN: Breaking TLS Using
SSLv2,” in USENIX Security Symposium, 2016.
[4] M. Balduzzi, C. T. Gimenez, D. Balzarotti, and E. Kirda,
“Automated discovery of parameter pollution vulnerabil-
ities in web applications,” in Proceedings of the Network
and Distributed System Security Symposium, 2011.
[5] D. Canali, D. Balzarotti, and A. Francillon, “The role of
web hosting providers in detecting compromised web-
sites,” in International World Wide Web Conference,
2013.
[6] O. Cetin, M. H. Jhaveri, C. Gan´an, M. van Eeten, and
T. Moore, “Understanding the role of sender reputation
in abuse reporting and cleanup,” in Workshop on the
Economy of Information Security, 2015.
[7] O. Cetin, C. Gan´an, M. Korczynski, and M. van Eeten,
“Make notiﬁcations great again: Learning how to notify
in the age of large-scale vulnerability scanning,” in Work-
shop on the Economy of Information Security, 2017.
[8] D. Crocker, “Mailbox Names for Common Services,
Roles and Functions,” RFC 2142 (Proposed Standard),
RFC Editor, Fremont, CA, USA, pp. 1–6, May
1997. [Online]. Available: https://www.rfc-editor.org/rfc/
rfc2142.txt
[9] J. Czyz, M. J. Luckie, M. Allman, and M. Bailey, “Don’t
forget to lock the back door! A characterization of IPv6
network security policy.” in NDSS, 2016.
[10] A. Doup´e, B. Boe, C. Kruegel, and G. Vigna, “Fear the
EAR: Discovering and mitigating execution after redirect
vulnerabilities,” in ACM CCS, 2011.
[11] Drupal Security Team, “Public service announcement
psa-2014-003.” [Online]. Available: https://www.drupal.
org/PSA-2014-003
[12] Z. Durumeric, J. Kasten, M. Bailey, and J. A. Halderman,
“Analysis of the HTTPS certiﬁcate ecosystem,” in ACM
Internet Measurement Conference, 2013.
[13] Z. Durumeric, F. Li, J. Kasten, J. Amann, J. Beekman,
M. Payer, N. Weaver, D. Adrian, V. Paxson, M. Bailey,
and J. A. Halderman, “The matter of Heartbleed,” in ACM
Internet Measurement Conference, 2014.
[14] M. Finifter, D. Akhawe, and D. Wagner, “An empirical
study of vulnerability rewards programs,” in USENIX
Security Symposium, 2013.
[15] Google, “Choose whether to show images,” online, https:
//support.google.com/mail/answer/145919.
[16] S. Holm, “A simple sequentially rejective multiple test
procedure,” Scandinavian Journal of Statistics, pp. 65–
70, 1979.
[17] M. K¨uhrer, T. Hupperich, C. Rossow, and T. Holz, “Exit
from hell? Reducing the impact of ampliﬁcation DDoS
attacks,” in USENIX Security Symposium, 2014.
[18] S. Lekies, B. Stock, and M. Johns, “25 million ﬂows later:
Large-scale detection of DOM-based XSS,” in ACM CCS,
2013.
[19] F. Li, Z. Durumeric, J. Czyz, M. Karami, D. McCoy,
S. Savage, M. Bailey, and V. Paxson, “You’ve got vulner-
ability: Exploring effective vulnerability notiﬁcations,” in
USENIX Security Symposium, 2016.
[20] F. Li, G. Ho, E. Kuan, Y. Niu, L. Ballard, K. Thomas,
E. Bursztein, and V. Paxson, “Remedying web hijack-
ing: Notiﬁcation effectiveness and webmaster compre-
hension,” in International World Wide Web Conference,
2016.
[21] A. Nappa, M. Z. Raﬁque, and J. Caballero, “Driving in
the cloud: An analysis of drive-by download operations
and abuse reporting,” in DIMVA, 2013.
[22] A. Newton, B. Ellacott, and N. Kong, “HTTP Usage
in the Registration Data Access Protocol
(RDAP),”
RFC 7480 (Proposed Standard), RFC Editor, Fremont,
CA, USA, pp. 1–16, Mar. 2015. [Online]. Available:
https://www.rfc-editor.org/rfc/rfc7480.txt
[23] B. Ramsdell
and S. Turner,
“Secure/Multipurpose
Internet Mail Extensions (S/MIME) Version 3.2 Message
Speciﬁcation,” RFC 5751 (Proposed Standard), RFC
Editor, Fremont, CA, USA, pp. 1–45, Jan. 2010. [Online].
Available: https://www.rfc-editor.org/rfc/rfc5751.txt
[24] P. Resnick, “Internet Message Format,” RFC 2822
(Proposed Standard), RFC Editor, Fremont, CA, USA,
pp. 1–51, Apr. 2001, obsoleted by RFC 5322, updated
by RFCs 5335, 5336.
[Online]. Available: https:
//www.rfc-editor.org/rfc/rfc2822.txt
[25] B. Stock, G. Pellegrino, C. Rossow, M. Johns, and
M. Backes, “Hey, you have a problem: On the feasibility
of large-scale web vulnerability notiﬁcation,” in USENIX
Security Symposium, 2016.
[26] M. Vasek and T. Moore, “Do malware reports expedite
cleanup? An experimental study,” in 5th Workshop on
Cyber Security Experimentation and Test, CSET, 2012.
[27] L. Weichselbaum, M. Spagnuolo, S. Lekies, and A. Janc,
“CSP is dead,
long live CSP! On the insecurity of
whitelists and the future of content security policy,” in
ACM CCS, 2016.
15