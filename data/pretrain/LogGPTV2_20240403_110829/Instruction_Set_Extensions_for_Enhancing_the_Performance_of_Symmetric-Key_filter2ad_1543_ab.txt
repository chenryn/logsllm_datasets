to the appropriate functional unit based on the instruction ﬂag
set. The result is then read from the functional unit when the
instruction speciﬁes a destination register to receive an out-
put.
assembly instruction opcodes are deﬁned
in the /leon/sparcv8.vhd module. The code added to this
module include the values for the op3 ﬁeld of the new in-
structions. Provided in the LEON2 base package is a generic
test bench with disassembly support. During functional sim-
ulation, assembly instructions are printed out to the simula-
tion software’s console window as they are executed. The
module /leon/debug.vhd contains the functions that handle
display of the instruction strings, and disassembly support
for the new instructions was added. When the op and op3
instructions match those of one of the instruction set exten-
sions, the instruction name is printed followed by any appli-
cable source/destination registers or immediate data for that
instruction.
The SPARC R(cid:2)
5.1 DES and Triple-DES
The desipl and desipr instructions produce the left and
right halves of the Initial Permutation, respectively. Simi-
larly, the desfpl and desfpr instructions produce the left and
right halves of the Final Permutation, respectively. The left
half of the input block must be located in the rs1 register and
the right half must be located in the rs2 register. Inclusion of
these instructions allows the Initial and Final Permutations to
be completed in two instructions each. Traditional software
implementations require a series of bit mask setup, shift, log-
ical AND, and logical OR operations for each bit for a total
of 256 instructions [38]. Even the improved permutation al-
gorithm used in [20] requires 44 instructions to complete on
V8 processor such as the LEON2.
a SPARC R(cid:2)
The desdir instruction sets up the Key Generator to out-
put round keys in either encryption or decryption order. This
instruction also resets the round counter of the Key Genera-
tor according to the chosen direction to ensure that output of
the round keys may be immediately carried out in the proper
order. It is not necessary to re-load the master key after this
instruction is executed. The desdir instruction is used in con-
junction with the deskey and desf instructions. The deskey
instruction loads the 64-bit master key. The left half of the
master key must be contained in the rs1 register, and the right
half in the rs2 register. The desf instruction takes the right
half of a round output block stored in the rs1 register and
468468
stores the output of the f -function into the rd register. The
round key is not speciﬁed here since the round key output
of the Key Generator is hard-wired to the f -Function unit’s
round key input. After completion of this instruction, the Key
Generator is signaled to generate the key for the next round.
Due to the logic of the Key Generator, the desf instruction
may not be followed by another desf instruction. However,
this is not expected to cause a performance bottleneck due to
the additional instruction required for swapping the values of
the left and right halves of the round input block. Implemen-
tation of the desdir, deskey, and desf instructions removes
the need for storage of the sixteen round keys and S-Boxes
in memory. All round keys are generated on-the-ﬂy in the
hardware added to the datapath. An implementation of the
DES algorithm using these instructions requires two instruc-
tions for key scheduling and four instructions for each of the
sixteen rounds — one desf, one bit-wise XOR, and two reg-
ister data transfers for swapping the left and right halves of
the round function output.
The Permutation Unit implements the Initial Permutation
and Final Permutation. The inputs are loaded from the source
registers speciﬁed in the permutation instruction. The inputs
are passed through two stages of 2-to-1 multiplexers. The
ﬁrst stage selects the rearranged bits of either the Initial Per-
mutation or the Final Permutation output. The output of the
selected permutation is represented by the pair of 32-bit vec-
tors. The second stage of multiplexers sets the ﬁnal output
to either the left half or the right half of the output. The Key
Generator unit was designed to work in conjunction with the
f -Function unit. All registers are sensitive to the rising edge
of the clock. The 64 key bits, which are loaded from the
source registers speciﬁed in the deskey instruction, are rear-
ranged according to the PC-1 mapping. A 64-bit master key
is loaded by issuing the deskey instruction. When this in-
struction is in the execute stage, the key bits are loaded into
the C0 and D0 registers. When performing encryption, the
C and D registers are loaded with the values of C0 and D0
rotated left by 1 bit since the ﬁrst values of Ci and Di used
in the encryption key schedule are C1 and D1. When per-
forming decryption, the C and D registers are loaded with
the exact values of C0 and D0 because the ﬁnal Ci and Di
values used in the encryption key schedule are the ﬁrst values
used in the decryption key schedule. The f -Function unit’s
32-bit input port for Ri−1 is loaded from the source register
operand speciﬁed in the desf instruction. The 48-bit input
port for the current round key is generated by the Key Gen-
erator unit. Expansion and permutation blocks are imple-
mented by rerouting the inputs and the S-Boxes are deﬁned
as logic-based mappings. The output of the f -Function unit
is stored in the destination register speciﬁed in the rd ﬁeld of
the desf instruction.
5.2 IDEA
The mmul16 instruction computes rs1 · rs2 mod 216 + 1
and stores the product in the rd register. Both source
operands must be in the lower sixteen bits of their respective
⎧⎪⎪⎨
⎪⎪⎩
k =
if x = 0 and y = 0,
2
¯x + 3 if x = 0 and y (cid:5)= 0,
if x (cid:5)= 0 and y = 0,
¯y + 3
if x (cid:5)= 0 and y (cid:5)= 0.
1
(cid:6)15
(2)
registers. The 16-bit product is stored in the lower sixteen
bits of the rd register. The Modulo 216 + 1 Multiplication
unit is designed based on the adder-based modular multiplier
in [2]. The Modulo 216 + 1 Multiplication unit ﬁrst gener-
ates partial products reduced modulo 216 + 1 as described
in Zimmerman’s investigation of efﬁcient architectures for
arithmetic modulo 2n ± 1 [41]. Each partial product is de-
termined by the formula:
P Pi = xi · y15−i ··· y0¯y15 ··· ¯y16−i + ¯xi · 0 ··· 01 ··· 1 (1)
where the vector 0 ··· 01 ··· 1 contains 16 − i zeros and i
ones. In order to handle cases where x = 0 or y = 0, a
correction term k is deﬁned:
An intermediate sum s = k +
i=0 P Pi is then computed.
The ﬁnal step is a reduction of s modulo 216 + 1. Deﬁning
sL to be the sixteen least signiﬁcant bits and sH to be the
remaining high-order bits of s, the result of the multiplication
is s mod (216 + 1) = sL + 216sH. This result may be
reduced such that s mod (216 + 1) ≡ sL + ¯sH + 2.
Using the Low-High Lemma for reduction modulo 216 + 1
assuming that t = sL + ¯sH + 1 [22]:
(cid:7)
s mod (216 + 1) =
(sL + ¯sH + 2) mod 216
(sL + ¯sH + 1) mod 216
if t < 216,
if t ≥ 216.
(3)
Additions are implemented in the Modulo 216 + 1 Mul-
tiplication unit with a carry-propagate adder tree. A generic
model is speciﬁed in a VHDL source ﬁle separate from the
multiplier source ﬁle. The generic component design allows
for adjustable width of the inputs.
5.3 AES
The aessb, aessbs, aessb4, and aessb4s instructions per-
form the SubBytes and InvSubBytes operations on either
one or four of the bytes in the rs1 register. The instruction
operands determine if the SubBytes operation or the InvSub-
Bytes operation is to be performed. In the case of the single
S-Box instructions, the operand also speciﬁes which of the
four bytes in the rs1 register is to be operated upon. The
aessbs instruction provides the additional functionality of al-
lowing the user to specify the destination byte in the rd reg-
ister while the aessb4s instruction allows the user to spec-
ify the number of bytes to left-shift the 4-byte result prior to
storage in the destination register. The gfmkld instruction is
used to load one of the sixteen constants into the 4 × 4 con-
stant matrix of the Galois Field ﬁxed ﬁeld constant matrix
multiplier. The constants are loaded row by row, beginning
with row zero and proceeding in order to row three. Each
row is loaded beginning with the constant from column zero
469469
and proceeding in order to the constant in column three. Due
to the logic that has been added to the multiplier for inclusion
into the LEON2 processor datapath, instances of the gfmkld
instruction may not be issued consecutively. The gfmmul in-
struction performs the Galois Field ﬁxed ﬁeld constant ma-
trix multiplication on the input in the rs1 register and stores
the result in the rd register.
The SubBytes and InvSubBytes S-Boxes are implemented
as logic-based mappings in hardware. The dir signal se-
lects the S-Box output. The Galois Field Fixed Field Con-
stant Multiplier unit performs the MixColumns or InvMix-
Columns operation. The architecture of this multiplier is de-
scribed in [9], [8]. The MixColumns and InvMixColumns
operations are a matrix multiplication over the Galois Field
GF(28) on each column of the state by a 4 × 4 ﬁxed ﬁeld
constant matrix. This means that a total of sixteen multi-
plications in the Galois Field GF(28) must be performed to
complete the entire operation. Each product must then be re-
duced modulo m(x) = x8 + x4 + x3 + x + 1, the irreducible
polynomial speciﬁed for AES. To accomplish the multipli-
cation and modular reduction simultaneously, the operation
can be represented as an 8 × 8 matrix multiplication over
the Galois Field GF(2). The constants in the inner matrix
are determined by the constant factor in the multiplication
and the polynomial m(x). Consider the representative Ga-
lois Field GF(28), used by AES in the MixColumns and In-
vMixColumns transformations. Note that [A3 : A0] are the
input bytes and [B3 : B0] are the output bytes [7]:
⎤
⎥⎥⎦ =
⎡
⎢⎢⎣
⎡
⎢⎢⎣
B0
B1
B2
B3
K00 K01 K02 K03
K10 K11 K12 K13
K20 K21 K22 K23
K30 K31 K32 K33
⎤
⎥⎥⎦ (4)
⎤
⎥⎥⎦
⎡
⎢⎢⎣
A0
A1
A2
A3
The core operation in this ﬁxed ﬁeld multiplication is an
8-bit inner product that must be performed sixteen times,
four per row. The four inner products of each row are then
combined via a bit-wise XOR operation to form the ﬁnal
output word. For a known primitive polynomial p(x), k(x)
(representing the 8-bit constant), and a generic input a(x),
the resultant polynomial equation takes the form b(x) =
a(x) × k(x) mod p(x) where each coefﬁcient of b(x) is
a function of a(x). This results in an 8-bit × 8-bit matrix
representing the coefﬁcients of b(x) in terms of a(x) [7]. An
8-bit × 8-bit matrix must be generated for each Kxy, result-
ing in a total of sixteen matrices. Note that this analysis holds
true for Galois Fields other than GF(28) with corresponding
adjustments to the mapping matrix.
6 Analysis of Results
Functional veriﬁcation was performed using twelve test
vectors for each algorithm. Performance testing measured
the execution cycles required to perform one iteration of
the target algorithm. Each algorithm was tested in both
non-feedback (Electronic Code Book) and feedback (Cipher
Block Chaining) modes of operation for both encryption and
decryption. The LEON2 processor implementation was syn-
thesized targeting the Xilinx Virtex-4 XC4VLX25 FPGA us-
ing the Xilinx ISE 8.1i tools.
6.1 Code Size
The following tables present executable code sizes for im-
plementations of the target algorithms with different combi-
nations of instruction set extensions. For the DES and Triple-
DES algorithms, the permutation instructions decrease the
total code size by up to a factor of 1.3 but have no effect on
the key schedule as permutations are not used in the compu-
tation of the round keys. Instructions supporting the round
key generation and round function have a much more pro-
nounced impact on code size. When these instructions are
used, all of the lengthy permutation routines and memory-
based S-Boxes are no longer needed. Encryption and decryp-
tion code size is reduced by up to a factor of 4.0 in the case
of DES and a factor of 3.5 in the case of Triple-DES with the
use of these instructions alone. Key scheduling is handled
via two instructions, making the respective code size a small
percentage of the remaining program code needed to imple-
ment encryption and decryption. When all of the instruction
set extensions are implemented, DES code size is reduced by
factors of up to 31.2 in non-feedback mode and 21.1 in feed-
back mode and Triple-DES code size is reduced by factors of
up to 15.9 in non-feedback mode and 13.0 in feedback mode.
Note that the decryption key schedule code size data for
IDEA includes that of the encryption key schedule. This is
because the decryption keys are determined from the encryp-
tion keys. The key schedule for decryption sees a slight de-
crease in code size with the use of the mmul16 instruction
because of the need to compute multiplicative inverses mod-
ulo 216. The addition of the mmul16 instruction signiﬁcantly
decreases the code size of encryption and decryption by fac-
tors of up to 2.8 in non-feedback mode and 2.4 in feedback
mode. Note that due to the absence of a hardware multiplier
in the LEON2 integer unit, the multiplication is performed
by a library function.
The AES instruction set extensions aessbs and aessb4s
yielded either equivalent or reduced code size for both
column-oriented and row-oriented implementations versus
the aessb and aessb4 instruction set extensions. Using one
S-Box led to the largest reduction in code size for column-
oriented implementations by up to a factor of 1.8 for encryp-
tion and 1.6 for decryption. In the case of the row-oriented
implementations, the use of four S-Boxes led to the largest
reduction in code size by up to a factor of 2.6 for encryp-
tion and 2.2 for decryption. However, the use of one S-Box
results in signiﬁcantly reduced key scheduling code size for
row-oriented implementations.
When only the gfmmul instruction is incorporated, code
size decreases by up to a factor of 1.3 for encryption and
1.8 for decryption in the column-oriented implementations.
The original code used to implement the InvMixColumns op-
eration for decryption requires many more operations than
the MixColumns operation used by encryption. Only four
470470
instances of the gfmmul instruction are needed to perform
both operations – one for each column of the AES state.
The use of the gfmmul instruction results in up to a factor
of 1.1 increase in code size for encryption and 1.1 decrease
in code size for decryption in the row-oriented implemen-
tations. This occurs because the MixColumns and InvMix-
Columns operations operate on the columns of the AES state,
requiring additional instructions to rearrange the bytes prior
to being processed by the gfmmul instruction in the row-
oriented implementations. The effect of the byte rearrange-
ment is that column-oriented implementations require signif-
icantly smaller code space than the row-oriented implemen-
tations when all of the instruction set extensions are imple-
mented. For column-oriented implementations, code size is
reduced by up to a factor of 3.6 for encryption and 4.8 for
decryption using one S-Box while for row-oriented imple-
mentations, code size is reduced by up to a factor of 2.1 for
encryption and 2.3 for decryption using four S-Boxes.
Operation
DES Key Sched
DES Enc ECB
DES Enc CBC
DES Dec ECB
DES Dec CBC
Triple-DES Key Sched
Triple-DES Enc ECB
Triple-DES Enc CBC
Triple-DES Dec ECB
Triple-DES Dec CBC
Base
Code
1524
1996
2028
1996
2028
1524
2096
2128
2096
2128
Permute
ISEs
1524
1572
1604
1572
1604
1524
1656
1688
1656
1688
Key and
f-Function
ISEs
8
500
532
496
528
24
588
620
588
620
All
ISEs
8
68
100
64
96
24
132
164
132
164
Table 1. DES and Triple-DES code size (bytes)
Operation
Enc Key Sched
Dec Key Sched
Enc ECB
Enc CBC
Dec ECB
Dec CBC
Base
Code
436
844
596
660
596
660
Modulo 216 + 1
Multiplication
ISE
436
760
212
276
212
276
Table 2. IDEA code size (bytes)
6.2 Execution Cycles
The following tables present the number of clock cycles
required to complete a full iteration of each algorithm. For
the DES and Triple-DES algorithms, the permutation in-
structions alone have virtually no impact on the execution
cycles for both DES and Triple-DES. However, the instruc-