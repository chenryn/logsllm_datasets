[1-9][0-9])\-){3](?:25[0-5]|2[0-4][0-9]][01]?[0-9][0-9])$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
sa8ae| e usqa uoeiou paxju passauduosuou 1o passaudltuoo Sursn ssaappe gadI pu
collection of text:
(?)> puqaqxoo aageaau asn aa xan sare uua sassauppe gdl puy o
and negative lookahead (?![: - \])) to make sure the address isn’t preceded or fol-
lowed by a word character (letter, digit, or underscore) or by a dot or colon. This makes
sure we don’t match parts of longer sequences of digits and colons. Recipe 2. 16 explains
how lookbehind and lookahead work. If lookaround isn't available, word boundaries
can check that the address isn’t preceded or followed by a word character, but only if
the first and last character in the address are sure to be (hexadecimal) digits. Com-
pressed notation allows addresses that start and end with a colon. If we were to put a
word boundary before or after a colon, it would require an adjacent letter or digit, which
isn’t what we want. Recipe 2.6 explains everything about word boundaries.
Standard notation
Standard IPv6 notation is very straightforward to handle with a regular expression. We
need to match eight words in hexadecimal notation, delimited by seven colons.
[A-Fo-9]{1,4}> matches 1 to 4 hexadecimal characters, which is what we need for a
16-bit word with optional leading zeros. The character class (Recipe 2.3) lists only the
uppercase letters. The case-insensitive matching mode takes care of the lowercase let-
ters. See Recipe 3.4 to learm how to set matching modes in your programming language.
The noncapruring group (?:[A-F0-9](1,4) : )(7) matches a hexadecimal word fol-
lowed by a literal colon. The quantifier repeats the group seven times. The first colon
in this regex is part of the regex syntax for noncapturing groups, as Recipe 2.9 explains,
and the second is a literal colon. The colon is not a metacharacter in regular expressions,
except in a few very specific situations as part of a larger regex token. Therefore, we
8.17 Matching IPv6 Addresses I 481
---
## Page 498
don’t need to use backslashes to escape literal colons in our regular expressions. We
could escape them, but it would only make the regex harder to read.
Mixed notation
The regex for the mixed IPv6 notation consists of two parts. <(?:[A-F0-9]{1,4} :){6]}
matches six hexadecimal words, each followed by a literal colon, just like we have a
sequence of seven such words in the regex for the standard IPv6 notation.
Instead of having two more hexadecimal words at the end, we now have a full IPv4
address at the end. W'e match this using the *accurate" regex that disallows leading
zeros shown in Recipe 8.16.
Standard or mixed notation
Allowing both standard and mixed notation requires a slightly longer regular expres-
sion. The two notations differ only in their representation of the last 32 bits of the IPv6
address. Standard notation uses two 16-bit words, whereas mixed notation uses 4 dec-
imal bytes, as with IPv4.
The first part of the regex matches six hexadecimal words, as in the regex that supports
mixed notation only. The second part of the regex is now a noncapturing group with
the two altermatives for the last 32 bits. As Recipe 2.8 explains, the altermation operator
(vertical bar) has the lowest precedence of all regex operators. Thus, we need the non-
capruring group to exclude the six words from the altermation.
The first alternative, located to the left of the vertical bar, matches rwo hexadecimal
words with a literal colon in between. The second altermative matches an IPv4 address.
Compressed notation
Things get quite a bit more complicated when we allow compressed notation. The
reason is that compressed notation allows a variable number of zeros to be omitted.
1:0:0:0:0:6:0:0, 1::6:0:0, and 1:0:0:0:0:6:: are three ways of writing the same IPv6
address. The address may have at most eight words, but it needn’t have any. If it has
less than eight, it must have one double-colon sequence that represents the omitted
zeros.
Variable repetition is easy with regular expressions. If an IPv6 address has a double
colon, there can be at most seven words before and after the double colon. We could
easily write this as:
([0-9A-F]{1,4}:){1,7}# 1 to 7 words to the left
# or a double colon at the start
(:[0-9A-F]{1,4))(1,7}# 1 to 7 words to the right
482 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 499
：
# or a double colon at the end
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
This regular expression and the ones that follow in this discussion also
work with JavaScript if you eliminate the comments and extra white-
free-spacing, which we use here to make these regexes easier to
understand. Or, you can use the XRegExp library which enables free-
spacing regular expressions in JavaScript, among other regex syntax
enhancements.
This regular expression matches all compressed IPv6 addresses, but it doesn’t match
any addresses that use noncompressed standard notation.
This regex is quite simple. The first part matches 1 to 7 words followed by a colon, or
just the colon for addresses that don't have any words to the left of the double colon.
The second part matches 1 to 7 words preceded by a colon, or just the colon for ad-
dresses that don’t have any words to the right of the double colon. Put together, valid
matches are a double colon by itself, a double colon with 1 to 7 words at the left only,
a double colon with 1 to 7 words at the right only, and a double colon with 1 to 7 words
at both the left and the right.
It’s the last part that is troublesome. The regex allows 1 to 7 words at both the left and
the right, as it should, but it doesn’t specify that the total number of words at the left
and right must be 7 or less. An IPv6 address has 8 words. The double colon indicates
we're omitting at least one word, so at most 7 remain.
Regular expressions don’t do math. They can count if something occurs berween 1 and
7 times. But they cannot count if two things occur for a total of 7 times, splitting those
7 times berween the two things in any combination.
To understand this problem better, let's examine a simple analog. Say we want to match
something in the form of aaaaxbbb. The string must be berween 1 and 8 characters long
and consist of 0 to 7 times a, exactly one x, and 0 to 7 times b.
There are rwo ways to solve this problem with a regular expression. One way is to spell
out all the altermatives. The next section discussing compressed mixed notation uses
this. It can result in a long-winded regex, but it will be easy to understand.
\A(?:a{7}x
a(6}xb?
a{5}xb{0,2}
a{4}xb{0,3}
a{3}xb{0,4}
a{2}xb{0,5}
axb{0,6}
8.17 Matching IPv6 Addresses | 483
---
## Page 500
[xb{0,7}
)\Z
Regex options: Free-spacing