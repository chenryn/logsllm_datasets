2001年，我的老板JimKandler解释了在监管坏境如何测试软件。对
我来说，他的解释是：告诉他们你要做什么，然后执行，最后证明
你做了。“啊，这么简单？”我想。但是做起来比听起来难得多。
Jim所讲的“告诉他们你要做什么"意味着：把过程写成文档。记载下
来给大家看，包括执行这个过程的团队一一公司就会知道团队是有
1991
---
## Page 1993
过程的，还有FDA。FDA稽查员在审查的第一步就会审阅过程文
档，然后会要求提供遵从这份文档的证明。还有其他一些文档，包
括缺陷报告、跟踪矩阵和最终确认报告。
我发现将团队遵从的过程细节化比将细微差别写下来难得多，更不
要提在现实生活中出现的意外情况。
在我曾见过的使用监管瀑布软件开发方法进行的软件开发中，需求
要从商业角度、患者角度、客户角度和系统角度进行文档化。这些
文档不考虑测试也不考虑如何证明需求。测试人员不会参与写作。
需求会总结在设计说明书中，因为业务分析不考虑技术实现的问
题，所以一般由并发部门撰写设计说明书。一个典型的问题是开发
部提前撰写设计书明书，在时间上提前，在对产品没有足够的认识
的情况下，也就不会在撰写过程中遇到实现的路障。所以文档要经
历长时间的完善过程，经常处于不怎么有用的状态。
在没有监管的软件开发过程中，关于可能遗留的缺陷的公开讨论非
常普遍。相反地，当产品必须经过FDA的检查，由于要保证产品公
正权威的原因，这些公开的讨论不容易存在。对于监管产品，有一
整套文档化、审阅和修正缺陷的过程。但是即便是受监管的产品，
也有巨大的动力将产品发布出去。在过程的后期宣布完成更多的测
试或存在潜在的缺陷会引起不稳定状况的出现。大家都知道，一旦
发现严重缺陷，都会对其进行修复。公开代码要求重新执行海量测
试用例，以及作可能的厂泛的产品发布文档的调整。代价昂贵，压
力重重。在这种条件下进行额外的测试非常困难，也正是由于这种
条件，要进行更多的测试一—特别对于产生关键结果的产品。
非正式员工不会参与FDA在产品开发周期末期的审查工作。与FDA
一起工作保证产品通过审查的人员是精心挑选的。这个人必须具备
监管经验、产品经验和足够的团队知识，能够很快地综合额外信
息，提供信心。我从未见过基层测试人员参与这个过程。
2001年，我的首要培训之一就是被派送到FDA参加稽查员培训。我
的老板，JimKandler，想让我了解第一手资料——FDA稽查员被培
训去调查什么。在审阅文档之外，如果我是FDA稽查员，我就直接
和测试团队成员谈话，同直接与软件接触的人谈话，而不是被动地
与指定人员谈话。
1992
---
## Page 1994
对于这个产品的FDA审查是如何进行的，我不得而知，但是我知道
我们的产品在市场上正在使用。
结语
在科学实验室的最后一天，我们一直在徘徊着，我们绝大多数都是
合同工。一旦测试结束，我们就该离并项目，也许不会再在同一个
团队工作了。有些人保持联络，有些人不会。我喜欢经常的变动，
在一个项目用足够长的时间去了解什么行得通，什么行不通。我喜
欢认识陌生人，也喜欢看到产品发布和真正被使用。
在科学实验室的日子是合同工在项目中最后的日子。总体产品发布
依然继续，如最终文档确认、产品制造的细节考虑、发布前的交付
等。
我从未想过总肠外营养（TPN）产品会用于照顾我的家人。所以我
感谢在这个不完美的世界里，那些尽其所能创造完美产品的人们，
以及测试这些产品的人。
第13章软件开发是创新过程
Chris McMahon
大部分著名的软件开发质量控制过程来自于制造业。ISO9000、六西
格玛和精益都来自于装配线，CMIM在某种程度上也是这样。的确，
它们在各自所属的坏境中都是行之有效的方法。
然而，对于那些通过使用这些方法而成功获得质量提高的软件公司
来说，其他任何方法都未能达到效果，不管这些公司花了多大力气
来实现这些系统。同时，也有许多相当成功的软件公司和软件产
品，它们并没有遵从任何被人们所认可的质量控制过程。
软件测试和开发人员群体中已经有人开始怀疑，我们在软件开发过
程的质量分析中所应用的这些方法并没有与我们所做的实际工作相
对应。一些人还进一步建议，尽管软件开发植根于计算机科学和工
程，但是现在从根本上说它是一个创新过程，而不是一个制造活动
或者工程准则。当我们试着分析和评价正在从事的工作的时候，如
果我们想要从制造学和工程学中获得帮助，那么我们就错了。
1993
---
## Page 1995
一个对待工作如同检查流水线上的零件的软件测试员几乎不可能给
项目带来多少价值。但是，如果一个测试员对待自己的工作就像是
在修改手稿，或者在审阅一本书或艺术品，或者仿佛在舞台上表
演，那么他极有可能是这个团队中有价值的一员。
高效的敏捷开发
高效率的敏捷团队表现出像表演艺术家一样的对待工作的态度，尽
管所有关于敏捷开发的文献都绝对排斥这种不为敏捷团队所采用的
制造学或工程学的模式。在一个高效率的敏捷团队中，任何工作都
是由整个团队来完成的：如果要做开发，那么整个团队一起做；如
果要做测试，那么整个团队一起做：如果用户场景需要修改，那么
整个团队都为之而工作。这些东西与装配线或制造工厂有任何不同
之处吗？与制造业机构比起来，高效率的敏捷团队更像一个剧团
（每个人都有自己的角色）和音乐演出团体（每个人都是一种特定
乐器的专家）。
我曾经是一名成功的音乐演奏者。我是一名贝司（低音提琴）手。
我认识一位音乐老师，他在谈到我们的爵士乐队的时候说，“如果要
说节奏，鼓手是法官，而贝司手是警察。"在一个敏捷团队中，产品
所有者或客户是法官。但是作为一名软件测试人员，我希望开发人
员写出高质量的代码，以保证尽可能实现产品的设计功能。如果有
缺陷，我希望能帮助修复它：如果设计有问题，我希望能帮助改
正。作为一名贝司手，我希望独唱歌手尽可能地唱得动听，并且我
希望演出很精彩。如果歌手错过了一个音符，我知道应当怎样来弥
补：如果节奏错了，我知道如何将它拉回正轨。描述质量控制很不
容易，但两者之间却存在我们可以探索的关系。
将演员的态度带到软件开发项目中来是很重要的。每周四晚上我都
去参加我的爵士乐队演出时，我的态度或工作方法绝对没有任何差
别。前段时间我写道，“作为一个（敏捷团队的）专职测试员，你的
工作就是仔细检查项目，以找到那些高风险的地方进行分析。”两年
后，我会做如下更正：你的工作是仔细聆听身边正在发生什么，与
他们一起完成自己的工作，但要格外用心地寻找可能很快就要出错
的地方，并尽可能地防正错误出现。这就是我们这些贝司手一直以
来所做的工作。
1994
---
## Page 1996
演奏音乐与测试程序之间最大的不同点是，在演奏音乐的时候，所
有事情都是同时发生的。我想几十年后软件开发工具的进步会最终
为软件开发团队提供一种相似的体验。编译-构建-测试-部署的周期
变得越来越短。我能很清楚地想象使用特殊的工具，根据用户场景
进行实时的软件开发和测试，这与爵士乐队在舞台上合作演奏一首
指定歌曲的方式完全一样一—按照一个共享的计划，团队的所有成
员相互交流并共同前进。
练习、排练、演出
敏捷团队说，“两周后我们要将测试过的可运行的功能交给客户。”
些创造性的团队来说，他们不仅有相似的目标，而且敏捷软件团队
和乐队为了可靠工作而采用的方法也是非常相似的。
首先，优秀的程序员必须练习技能。当然，音乐人也要练习音阶和
乐器的相关技巧。开发人员使用不同的语言练习这些技能，如设计
模式（DesignPattern）和代码套路（CodeKata），并且向那些被同
行们存细审查和批评的开源项目提供代码。测试人员检查总体系统
的功能，不仅掌握自已工作的实务，还对代码、总体质量过程、用
户体验原则和设计原则等进行熟悉。
其次，优秀的程序员必须排练。音乐人在演出之前会聚到一起工作
以获得对即将进行的演出的共同认知。程序员会做一些小项目来探
索功能实现的最佳途径。他们相互审阅彼此的工作，从初始需求到
代码本身再到发布前的实际产品。当然，测试人员在任何审阅过程
中很重要，也很关键。测试人员常常发现他们自己引导着项目的方
向，因为他们同时深人到了如此多的环节，正如同乐队的领队在演
出之前引领着整个乐队排练的进度。当测试人员真正发现他们在引
领项目的步调的时候，很重要的一点是他们不能成为瓶颈。测试人
员应当以某种方式改善测试工作的输入（代码、部署）和输出（缺
陷报告、文档、培训）。
最后，音乐人和程序员都要演出。音乐人有观众，程序员有用户或
者客户。为了继续我们在这一领域的工作，我们必须让他们满意。
如果不能让观众高兴，我们的演出就不会长久（或者赚很多钱）。
正如SteveJobs所说：“真正的艺术家做产品。”
1995
---
## Page 1997
我曾经向一些我不怎么熟悉的人表达过这个观点，他们反对音乐表
演并不比软件开发留下更多的创造性产品的观点，从而认为我的观
点从根本上就是错的。我反驳说：相册、音乐视赖、让别人来演奏
的乐谱，还有音轨，这些都是例子。他们会反驳我说，一段录制的
音乐从根本上与现场表演是不一样的。
是的，从观众的角度来看，录制视赖与现场表演的确是不一样的。
但是从表演者的角度看来，这些差异是非常微小的，并没有本质上
的不同。就像程序员总是关心他的用户一样，表演者也总是关心他
的观众。录制视频也是表演，只是使用的工具不同，乐队的类型不
同而已。这正如使用Vim写代码不同于使用Emacs写代码；正如使用
Ruby不同于使用C；正如创建大型系统不同于创建网页应用程序。但
是基本过程都是一样的，正如观众的本质并没有变。
隐含的价值
如果我们完全接受这个观点一—软件开发在本质上是一个创新过
程，那么我们就不仅能使用来自于工程学和制造学的那些分析和评
价的工具，还能使用来自于艺术领域的工具。我在另外的书里写了
对这个题目的一些初步的学术分析，但这本书不是为学者写的：这
本书是为了启发实践者。
有时候我也是一个专业作者。我曾在一个难度非常高的软件测试项
目中工作，但我找到了一个非常出色并且独一无二的解决办法，我
还对自己承诺说要为此写一篇专栏文章。但我一直没有写。一来因
为这个软件项目本身还没有结束，二来当时我自己也非常忙。我的
编辑拯救了这篇文章。他引导我思考，对大纲提出建议，还建议我
如何得出结论。后来，这篇文章成了我的职业作者生涯中所写过的
最好的文章之一。
作为一个软件测试人员，我希望能像我的编辑帮助我一样来帮助完
成整个项目。我想要帮助项目顺利进展，并且想要确保项目今后也
一样进行得顺利。如果问题包括小的方面，我会帮助解决它们：如
果项目包括的问题已经可以预见到结果了，我会帮助项目达到这个
结果。作为软件测试员，我的工作不是批评某个对象或者工作的重
心，而是像一个好的编辑一样把工作引导到正确的轨道上来。我想
再次申明，要把这个工作描述成质量保证很不容易，但其中的确存
在着我们可以探索的联系。
1996
---
## Page 1998
两个批判工具
刚才提到的编辑就是BrianMarick，他是《AgileManifesto》一书的作
者之一。早些时候Marick写了一篇引人入胜的文章，名叫"Sixyears
later:WhattheAgileManifestoleftout"（参见本章末的“参考文献”）。
他在这篇文章中讨论了《AgileManifesto》没有提到的四种价值：技