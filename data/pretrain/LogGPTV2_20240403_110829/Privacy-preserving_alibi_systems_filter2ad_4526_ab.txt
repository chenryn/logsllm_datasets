information about this exchange.
2.2.3 Alibi Veriﬁcation
When the alibi owner wishes to claim their alibi, she
present her evidence to the judge. The owner must demon-
strate two things. First, the owner must provide the Corrob-
oratingEvidence, which shows that the corroborator certiﬁes
that they were presented with a speciﬁc OwnerStatement in
a speciﬁc context. Second, the owner must demonstrate that
the OwnerStatement the corroborator received is valid and
linked to the owner’s identity.
The owner sends ho, yo, the context value provided by the
corroborator and the corroborator’s signature over these val-
ues, as well as the owner’s veriﬁcation secret xo. Note that
the if the owner did not store yo then she may recompute it
with yo = M D(xo). The judge checks that the signature is
valid.
Then, the owner decommits their commitment in the Own-
erStatement by providing xo and the OwnerFeatures values.
The judge inspects the contents of OwnerFeatures to make
sure the OwnerID belongs to the owner, that the context in
the OwnerFeatures matches the context signed by the cor-
roborator, and that the owner’s signature is valid. The judge
then computes so = M D(OwnerFeatures), and checks that
ho(xo) = so and that M D(xo) = yo.
Sybil-alibi attacks.
Normally alibis work only in the favor of the owner, be-
cause the owner chooses to verify an alibi only when she
would beneﬁt. However, in certain circumstances, the owner
might be coerced to verify an alibi in her disfavor. In this
case, we need to prevent the Sybil-alibi attack, where ma-
licious corroborators create new alibis for the owner based
on her veriﬁed alibi.
In this attack, a malicious corrobo-
rator takes the OwnerStatement from the veriﬁed Corrobo-
ratingEvidence to create a new CorroboratingEvidence. The
same xo that the owner used to verify her original Corrobo-
ratingEvidence could be used to verify this forged Corrobo-
ratingEvidence.
To prevent this Sybil-alibi attack, when multiple Cor-
roboratingEvidences are provided for the same owner, our
scheme veriﬁes that the OwnerStatement in each Corrobo-
ratingEvidence is unique.
3. THREAT MODEL
To distinguish them from the alibis in our systems, we call
traditional alibis (as thought of in the current legal system)
“physical alibis.” A physical alibi has three components: the
identity of the owner, the identity of the corroborator, and
the context (date, time, and location information).
Identity.
We require a public key infrastructure that binds keys
to legal identities. This allows us to represent witness state-
ments in the physical world as signed messages in our scheme.
Since a private key represents a legal identity, we assume
that no one except the owner has her private key. Deter-
mining whether the identity associated with a private key
matches the identity of the human using the key is outside
of the scope of this paper.
Context.
In a physical alibi, the corroborator believes that both
he and the alibi owner were in the same context based on
certain facts, which determines the reliability of the alibi.
For example, if the corroborator saw the alibi owner, the al-
ibi is highly reliable; however, if the corroborator overheard
the alibi owner’s voice in another room but never saw her,
the alibi is less reliable, because the corroborator could have
heard a recording of her voice. We distinguish between the
reliability of the alibi evidence and the trustworthiness of
the corroborator, and we will discuss the latter next.
In our scheme, we require that the corroborator can cor-
rectly measure his context, which should also includes the
means by which he interacted with the alibi owner. The
judge takes the means of the interaction into consideration
when determining the reliability of the alibi evidence. For
example, an alibi created through an interaction via near
ﬁeld communication (NFC) might be considered stronger
than one created over WiFi, as the corroborator is likely
to be more certain of his proximity to the alibi owner. We
can improve the reliability of alibis evidence by secure lo-
cation veriﬁcation techniques [18], which are orthogonal to
this paper.
Our scheme also requires the owner to include his view of
the context in the alibi (in OwnerFeatures). The purpose is
to prevent the attack where a malicious corroborator creates
a new CorroboratingEvidence from an old OwnerStatement
without the alibi owner’s participation.
If the corrobora-
tor uses a diﬀerent context in the CorroboratingEvidence
than the one in OwnerFeatures, the judge will detect the
discrepancy when verifying the CorroboratingEvidence. On
the other hand, if the attacker must use the same context
value, then the attacker can only create additional Corrobo-
ratingEvidence for the original alibi. During the veriﬁcation
stage a judge can detect when two CorroboratingEvidence
values correspond to a single OwnerStatement, revealing this
misbehavior.
Privacy.
We assume that an attacker may try to learn the identity
of any party in our system only via messages in our proto-
cols. Therefore, we do not consider privacy attacks using
out of band channels. For example, the cellular network
provider of the alibi owner may learn her identity; the cor-
roborator may use recording devices, such as cameras, to
determine the identity of the alibi owner. These are out of
the scope of this paper.
Trust.
We require no trusted third party. Moreover, we require
no trust between alibi owners and corroborators. If a cor-
roborator is malicious, he can refuse to provide the valid
CorroboratingEvidence the owner needs for the alibi. This
is a form of denial of service attack. We do not attempt to
prevent this attack, because a solution would force witnesses
to provide valid alibis, which we do not believe to be desir-
able. On the other hand, our scheme prevents a malicious
corroborator from discovering the identity of the alibi owner
(Section 4.1.3).
If the corroborator collaborates with the alibi owner, they
can create false but valid alibis, which is perjury. Just as
we cannot prevent the creation of perjury (even though we
may expose it by other means) in real life, our scheme does
not try to prevent perjury.
If the corroborator unilaterally intends to create false al-
ibi to beneﬁt the owner without the collaboration from the
owner, this is another form of perjury. In the physical world,
we cannot prevent the creation of such perjury (even though
we may expose them through other means). By contrast, our
scheme can detect such attacks (Section 4.1.1).
As with physical alibis, the value of alibis produced by our
scheme depends on the trustworthiness of the corroborators.
We leave the problem of determining the trustworthiness of
the corroborator to the judge.
4. PROPERTIES OF THE PUBLIC COR-
ROBORATOR SCHEME
Now that we’ve deﬁned an alibi scheme, we describe all of
the security properties we desire in our setting and how our
implementation satisﬁes them.
4.1 Security Properties
4.1.1 Non-forgeability
A CorroboratingEvidence binds the owner’s identity, the
corroborator’s identity, and the context. An alibi is valid
if it can be successfully veriﬁed (Section 2.2.3). We claim
that no valid alibi can be created without the collaboration
of both the owner and the corroborator.
First, we consider how someone, including the corrobora-
tor, could forge an alibi without the owner’s cooperation.
• The forger could try to forge a fresh alibi for an alibi
owner, but this would fail because he does not have
the owner’s private key needed to create a valid Own-
erStatement.
• The forger could try to use an existing unclaimed al-
ibi to create another CorroboratingEvidence. Even if
the forger creates new CorroboratingEvidence for an
existing alibi, no one could verify the new Corrobo-
ratingEvidence without the veriﬁcation secret chosen
by the owner during the creation of the original Own-
erStatement.
• The forger could attempt to use an existing Owner-
Statement to create fake CorroboratingEvidence with
a context diﬀerent from the one in which the owner
created the OwnerStatement. However, this forgery
would be detected in the veriﬁcation stage because the
OwnerFeatures linked to the OwnerStatement includes
the owner’s context value, which will not match the
context in the forged CorroboratingEvidence.
• The forger could use an existing OwnerStatement to
create fake CorroboratingEvidence for the same con-
text in which the owner created the OwnerStatement.
However, at worst this attack can only result in adding
a false corroboration to an existing, valid alibi. As
the owner already has a valid alibi this forgery can
only give the owner an additional (malicious) corrob-
orator of the existing alibi, and cannot result in an
alibi that places the owner in a diﬀerent context. If
the judge inspects both alibis then this misbehavior is
easily detected, as both CorroboratingEvidence values
will correspond to the same OwnerStatement, which
would not occur under normal circumstances.
Next, we consider how someone, including the alibi owner,
could forge an alibi without the corroborator’s collaboration.
This is infeasible because the forger doesn’t have the private
key of the intended corroborator so therefore cannot create
the signature in the corroborating evidence.
4.1.2 Non-transferability
A corroborating evidence is non-transferable because it
has the signature of both the owner and the corroborator.
4.1.3 Privacy
Our scheme preserves the privacy of the owner in the fol-
lowing properties:
• No one, including a malicious corroborator, can un-
cover the identity of the alibi owner at any stage be-
fore the owner veriﬁes her CorroboratedEvidence in
the protocol.
• No one, including any number of collaborating mali-
cious corroborators, can link multiple unclaimed al-
ibis created by the same alibi owner (including un-
claimed OwnerStatements and corresponding Corrob-
oratingEvidence values).
• When an owner claims her alibi by entering into the
veriﬁcation stage, she reveals her identity. However, no
one, including any number of collaborating malicious
corroborators, can link her to any of her unclaimed
alibis.
The above properties are guaranteed by the string com-
mitment scheme in our protocol.
4.2 Other Properties
Storage
4.2.1
Our scheme requires the owner to store all the data nec-
essary for verifying an alibi. By contrast, no corroborator
needs to store any data about the alibis that he has helped
create (except their private keys, which our threat model as-
sumes). The advantage of this design is that it aligns with
the incentive of the owner to safe guard his alibis.
4.2.2 Efﬁciency
Our scheme is eﬃcient both in time and space. In Sec-
tion 8 we evaluate the performance of our scheme on an
Android device.
5. PRIVATE CORROBORATOR SCHEME
5.1 Motivation
In our public corroborator scheme, the corroborator’s iden-
tity is always revealed during the creation phase, but the
owner’s identity isn’t revealed until the owner wishes to
claim that alibi. In settings where corroborators are pub-
lic entities (e.g. subway stations), it is acceptable for some-
one to learn the identities of every corroborator with whom
she creates an alibi. However, in other settings a corrobora-
tor may not want to reveal his identity every time an alibi
owner wants to create an alibi with him. Particularly, if
the corroborator allows his mobile device to create abilis for
anyone within proximity, the previous scheme would allow
an attacker to identity and track the corroborator. We wish
to design a private corroborator scheme where the corrob-
orator’s identity is not revealed at alibi creation, analogous
to the property that the owner’s identity is not revealed at
alibi creation in the public corroborator scheme.
5.1.1 Rejected Designs
One might simply apply our public corroborator scheme
but allow the corroborator to decide to whether to create
CorroboratingEvidence for the alibi owner during each en-
counter. However, this would require the corroborator to
decide at alibi creation time whether he wants to reveal his
identity, while the owner can wait until she veriﬁes her alibi
to reveal her identity. This deﬁciency would create big pri-
vacy and usability headache for the corroborator: for each
alibi creation request, the corroborator would have to decide
whether to help create the alibi either manually or using
some policies, which could be complex and error prone.
One might require the corroborator to store each Own-
erStatement (sent by the alibi owner) along with the asso-
ciated context, and only return the CorroboratingEvidence
when the owner requests to verify the alibi rather than dur-
ing alibi creation. However, this would require the corrobo-
rator to bear the burden of storing the alibi, when the owner
has much higher incentive to store her alibis safely. In this
setting, an honest and willing corroborator may be unable
to corroborate an important alibi because he deleted the al-
ibi when he ran out of disk space. We would like a scheme
that is completely stateless for the corroborator. We want
to allow the owner to retain all of the information necessary
for her and the corroborator to corroborate her alibi.
One might imagine a scheme where the corroborator sends
his created alibi to a trusted third party instead of the alibi
owner. However, this violates the requirement for no trusted
third party in our threat model.
One might suggest that we use zero knowledge schemes
to allow the provider to prove that there exists some cor-
roborator without revealing the identity of the corrobora-
tor. However, we believe that alibis are of little value if the
corroborator’s identity is not revealed, because the value de-
pends, in part, on the trustworthiness of the corroborator.
5.2 Overview
Under the above considerations, we have designed a pri-
vate corroborator alibi scheme where the alibi owner, when