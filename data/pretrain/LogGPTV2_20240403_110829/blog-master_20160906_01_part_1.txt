## 如何建立GIS测试环境 - 将openstreetmap的样本数据导入PostgreSQL PostGIS库    
### 作者             
digoal              
### 日期            
2016-09-06      
### 标签            
PostgreSQL , openstreetmap , PostGIS , osm2pgsql , pbf , osm    
----            
## 背景      
PostgreSQL在GIS领域的用户非常多，这得益于PostgreSQL的开放性，PostGIS即是使用PostgreSQL开放的索引访问、数据类型、函数，操作符等接口打造的一款功能非常强大的GIS数据管理插件。      
除此之外，还有pgrouting, pgcloudpoint等相关的GIS插件。当然也不乏其他领域如基因工程，化学，太空探索等，常规的数据类型无法满足业务对数据管理的需求，PostgreSQL在这种新兴领域起到了非常重要的作用(有点扯远了)。       
在GIS数据处理生态中，几乎所有的软件都支持PostGIS，因此使用PostgreSQL + PostGIS进行地理位置信息的管理，教学，应用，科研等都是非常方便的。      
GIS领域有一个很流行的集成平台OSGeo-Live ， 已经集成了PostgreSQL与PostGIS的环境。      
这是一套基于 Lubuntu 操作系统建立的，可从 DVD、USB 盘或虚拟机启动并独立运行的演示环境。      
它让用户可以不用预先安装任何软件系统就使用众多的开源空间信息软件。      
OSGeo-Live 完全是由自由软件构成，可以自由地部署、复制和分发。      
OSGeo-Live 提供一系列预先配置的应用程序，并包含了许多地理空间信息的使用案例，涵盖了数据的存储、显示、发布、分析和管理等各个方面。      
它还带有简单的示例数据集和文档以供参考。      
用户可以直接使用OSGeo-Live，也可以单独对PostgreSQL+PostGIS进行生产部署，如果需要样本数据，可以从openstreetmap下载导入。      
为了降低PG用户使用GIS数据的门槛，本文将介绍PostgreSQL+PostGIS的部署，以及在哪里能找到GIS的样本数据，如何将样本数据导入PostgreSQL数据库。      
## 环境    
1\. CentOS 7.x x64    
2\. PostgreSQL 9.6    
3\. PostGIS 2.2.2    
4\. 样本数据来自openstreetmap公开的cn.pbf中国的地理位置信息数据。      
## 部署PostgreSQL 9.6    
https://www.postgresql.org/    
本文不包括OS的参数优化部分。    
```    
$ wget https://ftp.postgresql.org/pub/source/v9.6rc1/postgresql-9.6rc1.tar.bz2    
$ tar -jxvf postgresql-9.6rc1.tar.bz2    
$ cd postgresql-9.6rc1    
$ ./configure --prefix=/home/postgres/pgsql9.6rc1 --enable-debug     
$ gmake world -j 32    
$ gmake install-world    
```    
环境变量配置      
```    
$ vi ~/env_pg.sh    
# add by digoal    
export PS1="$USER@`/bin/hostname -s`-> "    
export PGPORT=1921    
export PGDATA=/data01/pgdata/pg_root_96    
export LANG=en_US.utf8    
export PGHOME=/home/postgres/pgsql9.6rc1    
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH    
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.    
export MANPATH=$PGHOME/share/man:$MANPATH    
export PGHOST=$PGDATA    
export PGDATABASE=postgres    
alias rm='rm -i'    
alias ll='ls -lh'    
unalias vi    
$ . ~/env_pg.sh    
```    
## PostGIS 部署    
pre-requirement    
### geos    
http://trac.osgeo.org/geos    
```    
$ cd ~    
$ wget http://download.osgeo.org/geos/geos-3.5.0.tar.bz2    
$ tar -jxvf geos-3.5.0.tar.bz2     
$ cd geos-3.5.0    
$ ./configure --prefix=/home/postgres/geos    
$ make -j 32    
$ make install    
```    
### proj    
https://trac.osgeo.org/proj/    
```    
$ cd ~    
$ wget http://download.osgeo.org/proj/proj-4.9.2.tar.gz    
$ tar -zxvf proj-4.9.2.tar.gz    
$ cd proj-4.9.2    
$ ./configure --prefix=/home/postgres/proj4    
$ make -j 32    
$ make install    
```    
### GDAL    
http://gdal.org/    
```    
$ cd ~    
$ wget http://download.osgeo.org/gdal/2.1.1/gdal-2.1.1.tar.gz    
$ tar -zxvf gdal-2.1.1.tar.gz    
$ cd gdal-2.1.1    
$ ./configure --prefix=/home/postgres/gdal --with-pg=/home/postgres/pgsql9.6rc1/bin/pg_config    
$ make -j 32    
$ make install    
```    
### LibXML2 libxslt json-c cmake ...    
http://www.xmlsoft.org/    
```    
# yum install -y libtool libxml2 libxml2-devel libxslt libxslt-devel json-c json-c-devel cmake gmp gmp-devel mpfr mpfr-devel boost-devel pcre-devel     
```    
### cgal    
http://www.cgal.org/download.html    
```    
$ cd ~    
$ git clone https://github.com/CGAL/cgal    
$ cd cgal    
$ git checkout releases/CGAL-4.8-branch    
$ mkdir build    
$ cd build    
$ cmake -D CMAKE_INSTALL_PREFIX=/home/postgres/cgalhome ../    
$ make -j 32    
$ make install    
```    
### postgis 2.2.2    
http://postgis.net/source/    
库      
```    
# vi /etc/ld.so.conf    
/home/postgres/pgsql9.6rc1/lib     
/home/postgres/geos/lib    
/home/postgres/proj4/lib    
/home/postgres/gdal/lib    
/home/postgres/cgalhome/lib    
# ldconfig    
```    
环境变量    
```    
# su - postgres    
$ vi ~/env_pg.sh    
# add by digoal    
export PS1="$USER@`/bin/hostname -s`-> "    
export PGPORT=1921    
export PGDATA=/data01/pgdata/pg_root_96    
export LANG=en_US.utf8    
export PGHOME=/home/postgres/pgsql9.6rc1    
export LD_LIBRARY_PATH=/home/postgres/geos/lib:/home/postgres/proj4/lib:/home/postgres/gdal/lib:/home/postgres/cgalhome/lib:$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH    
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.    
export MANPATH=$PGHOME/share/man:$MANPATH    
export PGHOST=$PGDATA    
export PGDATABASE=postgres    
alias rm='rm -i'    
alias ll='ls -lh'    
unalias vi    
$ . ~/env_pg.sh    
```    
部署PostGIS    
```    
$ wget http://download.osgeo.org/postgis/source/postgis-2.2.2.tar.gz    
$ tar -zxvf postgis-2.2.2.tar.gz    
$ cd postgis-2.2.2    
$ ./configure --prefix=/home/postgres/postgis \    
--with-gdalconfig=/home/postgres/gdal/bin/gdal-config \    
--with-pgconfig=/home/postgres/pgsql9.6rc1/bin/pg_config \    
--with-geosconfig=/home/postgres/geos/bin/geos-config \    
--with-projdir=/home/postgres/proj4    
$ make -j 32    
$ make install    
```    
## 初始化数据库集群    
```    
$ initdb -D $PGDATA -E UTF8 --locale=C -U postgres    
$ cd $PGDATA    
$ vi postgresql.conf    
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;    
port = 1921                             # (change requires restart)    
max_connections = 100                   # (change requires restart)    
unix_socket_directories = '.'   # comma-separated list of directories    
shared_buffers = 1GB                    # min 128kB    
maintenance_work_mem = 256MB            # min 1MB    
dynamic_shared_memory_type = posix      # the default is the first option    
bgwriter_delay = 20ms                   # 10-10000ms between rounds    
bgwriter_lru_maxpages = 1000            # 0-1000 max buffers written/round    
max_worker_processes = 8                # (change requires restart)    
max_parallel_workers_per_gather = 4     # taken from max_worker_processes    
old_snapshot_threshold = 1h             # 1min-60d; -1 disables; 0 is immediate    
synchronous_commit = off                # synchronization level;    
log_destination = 'csvlog'              # Valid values are combinations of    
logging_collector = on          # Enable capturing of stderr and csvlog    
log_truncate_on_rotation = on           # If on, an existing log file with the    
log_error_verbosity = verbose  # terse, default, or verbose messages    
log_timezone = 'PRC'    
datestyle = 'iso, mdy'    
timezone = 'PRC'    
lc_messages = 'C'                       # locale for system error message    
lc_monetary = 'C'                       # locale for monetary formatting    
lc_numeric = 'C'                        # locale for number formatting    
lc_time = 'C'                           # locale for time formatting    
default_text_search_config = 'pg_catalog.english'    
```    
启动数据库集群    
```    
$ pg_ctl start    
```    
## 安装插件    
在需要导入样本数据的数据库中，必须安装PostGIS插件      
```    
$ psql    
psql (9.6rc1)    
Type "help" for help.    
postgres=# create extension postgis;    
CREATE EXTENSION    
postgres=# create extension fuzzystrmatch;    
CREATE EXTENSION    
postgres=# create extension postgis_tiger_geocoder;    
CREATE EXTENSION    
postgres=# create extension postgis_topology;    
CREATE EXTENSION    
postgres=# create extension address_standardizer;    
CREATE EXTENSION    
```    
## 安装osm2pgsql    
osm2pgsql是地理位置信息数据的导入工具      
http://wiki.openstreetmap.org/wiki/Osm2pgsql    
https://github.com/openstreetmap/osm2pgsql    
epel-release      
http://fedoraproject.org/wiki/EPEL      
```    
# wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm    
# rpm -ivh epel-release-latest-7.noarch.rpm    
# yum install -y osm2pgsql    
```    
安装目标    
```    
rpm -ql osm2pgsql    
/usr/bin/osm2pgsql    
/usr/share/doc/osm2pgsql-0.90.0    
/usr/share/doc/osm2pgsql-0.90.0/AUTHORS    
/usr/share/doc/osm2pgsql-0.90.0/ChangeLog    
/usr/share/doc/osm2pgsql-0.90.0/README.md    
/usr/share/licenses/osm2pgsql-0.90.0    
/usr/share/licenses/osm2pgsql-0.90.0/COPYING    
/usr/share/man/man1/osm2pgsql.1.gz    
/usr/share/osm2pgsql    
/usr/share/osm2pgsql/900913.sql    
/usr/share/osm2pgsql/default.style    
/usr/share/osm2pgsql/empty.style    
```    
使用帮助    
```    
osm2pgsql --help    
osm2pgsql SVN version 0.90.0 (64 bit id space)    
Usage:    
        osm2pgsql [options] planet.osm    
        osm2pgsql [options] planet.osm.{pbf,gz,bz2}    
        osm2pgsql [options] file1.osm file2.osm file3.osm    
This will import the data from the OSM file(s) into a PostgreSQL database    
suitable for use by the Mapnik renderer.    
    Common options:    
       -a|--append      Add the OSM file into the database without removing    
                        existing data.    
       -c|--create      Remove existing data from the database. This is the    
                        default if --append is not specified.    
       -l|--latlong     Store data in degrees of latitude & longitude.    
       -m|--merc        Store data in proper spherical mercator (default).    
       -E|--proj num    Use projection EPSG:num.    
       -s|--slim        Store temporary data in the database. This greatly    
                        reduces the RAM usage but is much slower. This switch is    
                        required if you want to update with --append later.    
       -S|--style       Location of the style file. Defaults to    
                        /usr/share/osm2pgsql/default.style.    
       -C|--cache       Use up to this many MB for caching nodes (default: 800)    
    Database options:    
       -d|--database    The name of the PostgreSQL database to connect    
                        to (default: gis).    
       -U|--username    PostgreSQL user name (specify passsword in PGPASS    
                        environment variable or use -W).    
       -W|--password    Force password prompt.    
       -H|--host        Database server host name or socket location.    
       -P|--port        Database server port.    
A typical command to import a full planet is    
    osm2pgsql -c -d gis --slim -C  -k \    
      --flat-nodes  planet-latest.osm.pbf    
where    
     is 20000 on machines with 24GB or more RAM     
      or about 75% of memory in MB on machines with less    
     is a location where a 19GB file can be saved.    
A typical command to update a database imported with the above command is    
    osmosis --rri workingDirectory= --simc --wx - \    
      | osm2pgsql -a -d gis --slim -k --flat-nodes      
where    
     is the same location as above.    
     is the location osmosis replication was initialized to.    
Run osm2pgsql --help --verbose (-h -v) for a full list of options.    
```    
```    
man osm2pgsql    
```    