Figure 1: Algorithms for our bounded vector signature construction.
The Sign and Verify algorithms require at mostPd
k=1 ˆv[k]
modular exponentiations in the group QRN . Likewise, the
Stretch algorithm requires a number of modular exponen-
tiations that is linear in the range of the dimension being
stretched. Finally, the Combine algorithm requires t modu-
lar exponentiations in QRN to perform the Lagrange inter-
polation, and two additional exponentiations to derive the
full signature using the coeﬃcients from the extended Eu-
clidean algorithm.
4. EXTENSIONS
The basic bounded vector signature construction given in
the previous section may be extended in a variety of ways to
achieve additional functionalities. These extensions include
the ability to dynamically limit the use of the Stretch op-
eration and to verify partial signatures via robustness tech-
niques from the threshold signature literature. Here, we
brieﬂy describe each of these extensions in turn.
4.1 Dynamically Limiting Malleability
The malleability properties of the basic bounded vector
signature construction allow anyone who possesses a partial
or full signature to produce valid signatures on any vec-
tor with components greater than those in the originally
signed vector, up to the maximum values speciﬁed during
the KeyGen procedure. In certain instances, however, it is
desirable to give each signer a degree of control over the use
of the Stretch operation and, consequently, the signatures
that other parties may produce. This can be accomplished
by each signer taking steps to limit the degree to which its
own partial signature can be stretched, and then leverag-
ing the threshold t to limit what full signatures can then be
produced using them.
Speciﬁcally, a signer i can create one bounded vector (par-
tial) signature on its intended vector vi, and another bounded
i, where ˆv[k] −
vector (partial) signature on the vector v(cid:48)
i[k] ≥ vi[k] for all dimensions k. This second signature
v(cid:48)
can be viewed as bounding the extent to which the original
vector can be stretched to only those vectors that can be
simultaneously produced by both signatures. When v(cid:48)
i[k] =
ˆv[k] − vi[k] for all dimensions k, all malleability has been
removed from the partial signature.
Although the procedure above limits the malleability of
partial signatures, its eﬀect on the full signatures produced
by Combine depends on the threshold t and its relation to the
number of signers n. One particularly interesting parameter-
ization allows us to ensure that a full signature (consisting of
two bounded vector signatures) can be produced on only the
rth smallest value in each dimension k (i.e., value at rank r)
from among the n values vi[k], i ∈ {1 . . . n}. To implement
this, we set the threshold for the ﬁrst bounded vector sig-
nature instantiation, to which signer i contributes a partial
signature for vi, to t1 = r. In the second bounded vector
instantiation, each signer contributes a partial signature for
i[k] = ˆv[k] − vi[k], and we set the threshold to
v(cid:48)
i where v(cid:48)
t2 = n − r + 1. The ﬁrst partial signatures can be stretched
to increase the values vi[k] of the r − 1 smallest such val-
ues, while the second partial signatures can be stretched to
decrease the values ˆv[k] − v(cid:48)
i[k] of the n − r largest such
values. The respective full signatures only overlap at the
rank-r values in each dimension k, and consequently cannot
be altered via the Stretch algorithm. When r = 1, this is a
non-malleable signature on the component-wise minimums,
and when r = n, this is a non-malleable signature on the
component-wise maximums, for example. In Section 5, we
leverage this capability to perform intersection and union of
signed data structures.
4.2 Adding Robustness
The notion of robustness in threshold signature schemes
captures the inability of an adversary to produce incorrectly
formatted partial signatures, which may cause the Combine
algorithm to fail. Since the core of our bounded vector sig-
nature construction is based on the threshold RSA scheme
of Shoup [38], we can make use of the robustness techniques
presented therein. Broadly speaking, the robustness prop-
erty can be achieved by requiring the signer to prove, in zero
knowledge, that (i) the key used to sign the partial signa-
ture is the same as the one provided by the dealer, and (ii)
that the partial signature is properly formed according to
the algorithm description.
Speciﬁcally, the dealer chooses a random element g ∈
QRN . Note that with overwhelming probability g is a gen-
erator of QRN . He then computes and publishes the value
Gi = gsk i for each signer Pi. The partial signature σi is then
accompanied by a zero-knowledge proof that logH(c)(σ2
i ) =
2(n!)2Qd
k=1 e
v[k]
k
), which can be accomplished using stan-
logg(G
i
dard zero-knowledge techniques for proving the equality of
discrete logarithms [12, 11]. Furthermore, this proof can
be made non-interactive by using the Fiat-Shamir heuris-
tic [20]. Due to space considerations and the similarity of
our techniques with those of Shoup, we forgo a proof of the
simulatability of this zero-knowledge proof.
5. APPLICATIONS
Bounded vector signatures can be used to eﬃciently rep-
resent signatures on a variety of data structures while still
allowing certain operations on those data structures. These
eﬃcient, malleable signatures are particularly important in
distributed systems applications, where disparate parties must
securely share information while limiting communications
overhead. Here, we describe two such data structures, namely
sets and intervals. For each data structure, we describe how
to represent it using our bounded vector signatures, specify
operations on those signed data structures enabled by the
Stretch operation, and suggest applications to problems in
the area of distributed systems security.
The use of bounded vector signatures in the distributed
applications described below provides a number of beneﬁts.
These include the compact representation of large groups of
items (e.g., sets and intervals) with a constant number of
group elements in QRN , the ability to represent aggregated
information from all members of a group as a single signa-
ture, non-interaction of the Combine and Stretch protocols,
and the ability to locally update the full signature on the
aggregated information. Furthermore, the threshold used
in the Combine algorithm acts as a voting mechanism for
the aggregated information, and may be of use in scenarios
where Byzantine fault tolerance is required. Unless other-
wise noted in this section, the bounded vector signatures are
parameterized with t = n.
5.1 Sets and Multisets
The set data structure allows for the storage of unordered
collections of unique items or values.
In a multiset, this
concept is extended to allow multiple copies of items (i.e.,
associating a count with each item). Sets (resp., multisets)
are represented in our bounded vector signature scheme by
associating each item in the universe of possible items with
a dimension in the signed vector and limiting the maximum
value of the dimension to one (resp., the maximum per-item
count). In essence, the vector representing a set reﬂects the
presence or absence of each of the d items in the universe,
while a vector for a multiset dictates the count of each item.
One downside of this approach for signing sets and mul-
tisets is that it requires a number of dimensions equal to
the size of the universe of items represented, which may be
quite large. In those cases, we may instead use our bounded
vector signatures to encode the set in a Bloom ﬁlter [7].
Rather than associating each component of the vector with
a speciﬁc item, we instead use the outputs of hash functions
applied to the item to determine which dimensions to set to
one. To test membership, we check that all dimensions to
which the item hashes are set to one. In short, Bloom ﬁlters
allow for a compact representation of sets by trading oﬀ a
tunable probability of false positives when testing set mem-
bership (i.e., an item is reported as a member even though
it is not). Like simple sets, our bounded vector signatures
represent a Bloom ﬁlter using a d-dimensional vector with
maximum values for each dimension set to one, only in this
case the number of dimensions may be much smaller than
the number of items in the universe and is related to the
desired probability of false positives.
Operations on Signed Sets.
The stretch property of the underlying bounded vector
signatures allows us to perform the union operation among
multiple set signatures simply by performing the Combine
operation. As discussed in the previous section, Combine
eﬀectively takes the maximum value in each dimension from
among the t partial signatures to form a ﬁnal signature.
As it turns out, this exactly deﬁnes the union among the
signed sets. Furthermore, the security of our bounded vector
signature scheme ensures that while items may be added
to the (partially or fully) signed set, it is computationally
infeasible for an adversary to remove an item. If additions
to the fully signed set should not be permitted, then the
rank-order technique described in Section 4.1 can be used to
preclude this. The union operation and security guarantee
also hold for multisets and Bloom ﬁlters, as well.
The intersection operation is achieved by having each signer
produce a signature on a vector where each component en-
codes the distance between the signed value and the max-
imum allowable value in that dimension (i.e., the comple-
ment for sets or the number of copies of items not in the
multiset). As mentioned in Section 4.1, the Stretch oper-
ation on these signatures decreases the value being signed
by increasing the distance from the maximum. Therefore,
when Combine is run on these signatures, the largest value
that can be signed is, in eﬀect, the minimum value in each
dimension. The security of bounded vector signatures en-
sures that the resultant signatures can have items removed
from the set (resp., multiset, Bloom ﬁlter), but not added.
Again, the technique of Section 4.1 can be used to preclude
removals from the fully signed intersection, if so desired.
Distributed Systems Applications.
Signatures on sets, multisets, and Bloom ﬁlters can be
used in a number of distributed data sharing applications,
including peer-to-peer systems [14, 30, 24, 36], distributed
caches [19, 9, 35], blacklisting services [17, 40, 39], and net-
work ﬂow monitoring systems [18]. In each of these appli-
cations, a collection of entities must provide users with an
aggregate view of the data that they maintain as a group.
These systems cannot assume interactivity, must provide an
eﬃcient method of veriﬁcation to the user, and must be able
to perform updates on the aggregated data without requir-
ing additional interaction.
As a concrete example, consider the problem of spam
blacklisting services, such as Spamhaus [40], SORBS [39],
and DNSBL [17], which aggregate information about IP ad-
dresses sending spam e-mail. These blacklists must aggre-
gate the IP addresses from several sources and provide users
with a method of verifying that the given list does indeed
represent that aggregate information (i.e., names have not
been spuriously added or removed, as the case may be).
The blacklists can be eﬃciently represented in a Bloom ﬁl-
ter, signed by our bounded vector signature method, and
combined in a completely oﬄine manner by the blacklist
providers to give users a single signature to verify the ag-
gregated blacklist. In the time between blacklist aggregation
events, the individual sources can continue adding or remov-
ing IP addresses from the aggregated blacklist through the
use of the Stretch operation without requiring additional in-
teractions, if such operations are allowed by the signature in-
stantiation. By contrast, traditional digital signatures would
force the user to verify the blacklists from each of the sources
independently and require the blacklist sources to continu-
ally generate new signatures on the published blacklists.
5.2
Intervals
Bounded vector signatures can also be used to represent
contiguous intervals of values, in addition to discrete sets of
items. There are potentially two ways in which to encode an
interval of values within a bounded vector signature scheme.
In the ﬁrst, the signer creates 2-dimensional vectors, where
the components of the vector encode the left and right end-
points of the signed interval, respectively.
In the second,
the signer may create two 1-dimensional vectors with each
vector encoding one of the endpoints. The primary tradeoﬀ
between these two methods is that in the ﬁrst case the range
is eﬃciently encoded in a single group element, whereas the
second case allows for two unique parameterizations of the
bounded vector signatures for the vectors (e.g., two diﬀer-
ent thresholds t). As we will show later in this section,
there are potential applications that are speciﬁc to both ap-
proaches. The concept of signing an interval can also be
expanded to an arbitrary number of dimensions by simply
increasing the dimensionality of the signed vector, or num-
ber of signatures in the case where each endpoint is a single
vector. Speciﬁcally, if we want to encode a d-dimensional
box (i.e., the Cartesian product of d intervals), we create a
2d-dimensional vector to encode the left and right endpoints
for the allowable range in each dimension.
Operations on Signed Intervals.
The use of bounded vector signatures provides the signer
with a number of options for encoding the endpoint val-
ues of the signed interval, which in turn enable diﬀerent
functionalities. For example, if the signer were to encode
the left-most point in the interval as the value itself and
the right-most point as the distance to the maximum allow-
able value in the bounded vector scheme (i.e., the vector
(cid:104)v[1], ˆv[2] − v[2](cid:105) with the restriction v[1] ≤ ˆv[2] − v[2]),
then the resultant signed range could only be shrunk and
never expanded — this is equivalent to the dynamic mal-
leability limitation described in Section 4.1. On the other
hand, if the signer encoded the left-most point as the dis-
tance from the maximum and the right-most as the value
itself (i.e., (cid:104)ˆv[1] − v[1], v[2](cid:105) with ˆv[1] − v[1] ≤ v[2]), then
the signed range could be expanded but never shrunk. No-
tice that if we set both endpoints to be encoded relative to
the same value (e.g., (cid:104)v[1], v[2](cid:105) or (cid:104)ˆv[1]− v[1], ˆv[2]− v[2](cid:105)),
we can slide and expand the interval in one direction only.
The range encodings above, along with the Stretch oper-
ation on the underlying bounded vector signatures, allow a
combiner to eﬃciently compute the intersection and union of
signed intervals. To compute intersections, each signer en-
codes the endpoints of its signed interval such that the range
can only be shrunk. When the Combine algorithm is run
on these partial signatures, the combiner will be forced to
shrink the intervals to equal the smallest overlapping range
and so the output will be a full signature on the intersection.
For the union operation, the signers use an encoding that al-
lows expansion of the signed interval and the combiner will
expand all intervals such that the full signature will con-
tain the left and right-most points from among all partially
signed intervals. We note that this is slightly diﬀerent from
the typical deﬁnition of union among intervals, since in our
system the union operation is allowed even if the intervals