Input: 7 
return (n & (n + 1)) == 0
n = n ^ (n >> 1) 
*/
行位运算到达目的。010101 构造出101010 两者相互&位运算以后就为0，因为都"插空"了。
题有多种做法，最简单的方法就是直接模拟。比较巧妙的方法是通过位运算，合理构造特殊数据进
n&(n+1)
u
u
  n>>1
=
1
，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相
L
０００００
0
0
L
0
0
L
1
0
L
0
L
L
0
L
0
0
0
L
L
L
0
0
0
L
0
1
√
o
0
L
0
---
## Page 666
Example 2:
4-directionally.
Given the above grid, return 6. Note the answer is not 11, because the island must be connected 
Example 1: 
Find the maximum area of an island in the given 2D array. (If there is no island, the maximum
surrounded by water.
connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are 
Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land)
题目
695. Max Area of Island
area is 0.)
[[0,0,0,0,0,0,0,0]]
[[0,0,1,0,0,0,0,1,0,0,0,0,0]
func hasAlternatingBitsl(n int) bool
//解法二
[0,0,0,0,0,0,0,1,1,0,0,0,0]]
[0,0,0,0,0,0,0,0,0,0,1,0,0]
[0,1,0,0,1,1,0,0,1,1,1,0,0]
[0,1,0,0,1,1,0,0,1,0,1,0,0]
[0,1,1,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,1,1,0,0,0]
[0,0,0,0,0,0,0,1,1,1,0,0,0]
return true
for n > o { 
last， current := O， 0
if last == current {
current = n & 1 
n=n / 2 
last = n & 1
return false
了
---
## Page 667
代码
解题思路
0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为〇。)
合，这里的“相邻”要求两个1必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被
给定一个包含了一些0和1的非空二维数组 grid。
题目大意
Note: The length of each dimension in the given grid does not exceed 50.
 Given the above grid, return 0.
func areaofIsland(grid [][]int, x, y int) int 
·给出一个地图，要求计算上面岛屿的面积。注意岛屿的定义是四周都是海(为〇的点)，如果土地(为
func maxAreaofIsland(grid [][]int) int {
if !isInGrid(grid, x, y) ll grid[x][y] == 0 
return total
for i := 0; i  indices[2]-indices[1]+l {
 maxFreq = frequency[num] [0] 
frequency[num] [2] = 
frequency[num] [o]++
-, found := frequency[num]; Ifound {
 smallest = indices[2] - indices[1] + 
L
[]int] int{
---
## Page 670
示例1:
positions[i] 表示的方块掉落结束后，目前所有已经落稳的方块堆叠的最高高度。
返回一个堆叠高度列表 ans 。每一个堆叠高度 ans[i] 表示在通过 positions[O], positions[1], .
起，因为只有底边才具有粘性。
在上一个方块结束掉落，并保持静止后，才开始掉落新方块。方块的底边具有非常大的粘性，并将保持
side_length 表示该方块的边长(positions[i][1])。
在无限长的数轴（即×轴）上，我们根据给定的顺序放置对应的正方形方块。第i个掉落的方块
题目大意
Note:
Example 2: 
----- The maximum height of any square is still5. Thus, we return an answer of [2, 5, 5].
After the third drop of positions[1] = [6, 1]: —aaa —aaa —aaa _aa _aa_a -----
edge.
square despite where its center of gravity is, because squares are infinitely sticky on their bottom
------- The maximum height of any square is 5. The larger square stays on top of the smaller 
After the second drop of positions[1] = [2, 3]: —aaa —aaa —aaa _aa_
square is 2. 
After the first drop of positions[O] = [1, 2]: -aa -a ------ The maximum height of any
固定在它们所接触的任何长度表面上（无论是数轴还是其他方块）。邻接掉落的边不会过早地粘合在一
每个方块的底部边缘平行于数轴（即×轴）：
Example 1: 
positions[l], ..., positions[i].
square we have dropped, after dropping squares represented by positions [0],
 Return a list ans of heights. Each height ans[i] represents the current highest height of any 
edge can stick to surfaces.
Explanation: Adjacent squares don't get stuck prematurely - only their bottom
Output:[100,100]
Input:[[100,100]，[200，100]]
Explanation: 
Output:[2，5，5] 
Input: [[1, 2], [2, 3], [6, 1]]
1  target {
if nums[mid] == target {
mid := low + (high-low)>>1
low = mid + 1
high = mid - 1 
 return mid 
---
## Page 675
代码
解题思路
注意：
不使用任何内建的哈希表库设计一个哈希集合具体地说，你的设计应该包含以下的功能：
题目大意
Note:
·简单题，设计一个 hashset 的数据结构，要求有 
·add(value)：向哈希集合中插入一个值。
● All values will be in the range of [0, 1000000].
func Constructor705() MyHashset {
type MyHashSet struct 
package leetcode
●contains(value)：返回哈希集合中是否存在这个值。
MyHashset hashset = new MyHashset() ;
/** Initialize your data structure here.
）remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。
·Please do not use the built-in HashSet library.
hashset.contains(2) ;
nashset.remove(2) ;
nashset.contains(2);
nashset.add(2); 
hashset.contains(3);
hashset.contains(1);
add(value), contains(value), remove(value), 这3 个方法。