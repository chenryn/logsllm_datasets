### Determining Database Tampering and Forensic Analysis

To determine if a database instance has been tampered with, it is often crucial in forensic investigations to pinpoint the modified tuples. We propose a solution to this problem.

#### Forensic Analysis Process

When an audit fails, the forensic analysis process involves the following steps:

1. **Hash Calculation for Previous Snapshot:**
   - The process iterates through each table of the previous snapshot.
   - For each tuple \( t \) with key \( k \), it computes a new relation hash \( H(t) \).
   - This results in a set of hashes, \( \text{Hashes} \), containing pairs \( (t.k, H(t)) \).

2. **Hash Calculation for New Tuples:**
   - The process then iterates through the log \( L \), finding each new tuple \( t' \) and computing its hash \( H(t') \).
   - It finds the key of \( t' \) in the \( \text{Hashes} \) set and updates the value \( H(t) \) stored there to be \( \text{ADD\_HASH}(H(t), H(t')) \).

3. **Optimizing Hash Lookups:**
   - To speed up the process, a B+-tree can be built over the key attributes of \( \text{Hashes} \) to quickly find each key.
   - Alternatively, the log can be scanned to compute all new \( (t'.k, H(t')) \) values, sort them by \( k \), and perform a zigzag join (i.e., merge join with auxiliary indices) with \( \text{Hashes} \), updating the content of \( \text{Hashes} \) as needed.

4. **Verification of Current Instance:**
   - Finally, the process considers each tuple in the current database instance.
   - It checks whether the hash of each tuple matches the hash stored for its key \( k \) in \( \text{Hashes} \).
   - Mismatched hash values or the absence of \( k \) in \( \text{Hashes} \) indicate tampering.
   - If any keys in \( \text{Hashes} \) have not been matched after the pass over the current database, this also indicates tampering.

5. **Post-Audit Actions:**
   - If audit failures are common, after repair and successful re-audit, the auditor can sign \( \text{Hashes} \) and store it on WORM (Write Once, Read Many) storage for future use.

### Empirical Evaluation

#### Setup
- **Environment:**
  - We used the Shore implementation [24] of the TPC-C benchmark, ported to run on BerkeleyDB 4.7.25.
  - The DBMS ran on a server with a Pentium dual-core 2.8 GHz CPU, 512KB L2 cache, 4GB RAM, and a 1TB hard disk.
  - A WORM server was simulated using a Pentium 2.8 GHz single-core CPU, 512KB L2 cache, with a portion of its local disks exported as an NFS volume.
  - The DBMS mounted the WORM volume over NFS and stored the logs there.
  - AH (Audit Helper) was run on the DBMS server due to its minimal overhead.

- **Test Configuration:**
  - 100,000 transactions were run with a 512 MB DBMS cache and a 10-warehouse TPC-C configuration, resulting in a 2.5 GB database.
  - The file system caches on the WORM and DBMS servers were cold at the start of each run.
  - For runs without support for term-immutability, the default maximum log file size of 10MB was used, resulting in 232 log files per run, totaling 2.32 GB.
  - The log creation rate averaged 38 MB/min.
  - For runs with support for term-immutability, every r/2 seconds, a DBMS function was called to flush and close the log file and start a new one. AH polled the log directory on the WORM, hashed the newly inserted tuples, and flushed the results to an H log file on WORM every r/2 seconds.

#### Performance Results

- **TPC-C Performance:**
  - TPC-C performance was measured with regret intervals of 30 seconds, 2 minutes, and 5 minutes.
  - With a 2-minute or 5-minute regret interval, the overhead was less than 1% for up to 100K transactions.
  - For a 30-second regret interval, the overhead was always less than 2%.
  - AH added less than 1.5% overhead and processed log files much faster than the DBMS generated them.

- **Comparison with LDA:**
  - TPC-C was run with LDA, with a regret interval of 5 minutes, resulting in a 14% overhead.
  - For non-probabilistic detection of untamper attacks, the extra overhead for hash-page-on-read refinement was 10% on our platform [16].

- **Audit Time:**
  - Figure 8 shows that hashing the new tuples of 100K TPC-C transactions on the log can be done in less than a second when H files are available for all transactions; otherwise, it takes about 100 seconds.
  - After a year, H files will be available for almost all committed transactions, reducing the time to scan H files from a year of non-stop TPC-C to just under two hours.
  - The overhead of parsing and hashing fetched pages after 100K transactions, given that the pages were already in the file system cache, was 8 seconds.

### Related Work

- **Compliance and Auditing:**
  - Researchers have explored various aspects of compliance for database data, including LDA [16], which offers a different approach to the same problem.
  - Another recent innovation is a framework for auditing changes to a database while respecting retention policies [13], focusing on policy-based redaction and removal of sensitive information.
  - TLOW can be combined with this framework to support audit queries over sensitive information while ensuring tampering detection.
  - Other work includes secure untrusted data repositories [9, 10], transaction time support [11, 12], and tamper-evident database systems [15, 16, 22].

- **Tamperproof Audit Logs:**
  - One scheme [22] involves cryptographically hashing transactional data, signing it periodically by a trusted third-party notary, and storing it in the database.
  - TLOW reduces the window of vulnerability to a minute or less, with minimal impact on transaction throughput.

- **Outsourced Database Security:**
  - Research on outsourced database and file management [6, 7, 15, 20, 25] and cryptographic file systems [5, 9, 10, 18] aims to provide integrity guarantees for databases/files stored on untrusted servers and correctness guarantees for DBMS/file system responses to user requests.

### Conclusion

In this paper, we proposed TLOW, an efficient approach to supporting term-immutable databases for regulatory compliance. TLOW stores the current database instance on traditional storage and the transaction log on a low-cost WORM storage server, segmented to detect various attacks, including clock tampering. Our experiments with TPC-C show that TLOW supports a regret interval as small as 2 minutes with less than 1% slowdown in transaction throughput. Additionally, we introduced a trustworthy audit helper function that significantly speeds up audits, reducing the cost of auditing the transaction log by a factor of 100.

### Acknowledgments

This work was supported by NSF under grants CNS-0716532, IIS-0803280, and CCF-0938071. Hasan was supported by the National Science Foundation under Grant #0937060 (sub-award CIF-389) to the Computing Research Association for the CIFellows Project.

### References

[1] R. Agrawal, C. Johnson, J. Kiernan, and F. Leymann. Taming compliance with Sarbanes-Oxley internal controls using database technology. In Proceedings of ICDE, 2006.

[2] A. A. Ataullah, A. Aboulnaga, and F. W. Tompa. Records retention in relational database systems. In Proceedings of CIKM, 2008.

[3] M. Bellare and D. Micciancio. A new paradigm for collision-free hashing: Incrementality at reduced cost. In Proceedings of EUROCRYPT, 1997.

[4] Congress of the United States. Sarbanes-Oxley Act. Online at http://thomas.loc.gov, 2002.

[5] E.-J. Goh, H. Shacham, N. Modadugu, and D. Boneh. SiRiUS: Securing remote untrusted storage. In Proceedings of NDSS, 2003.

[6] H. Hacigumus, B. Iyer, C. Li, and S. Mehrotra. Executing SQL over encrypted data in database service provider model. In Proceedings of SIGMOD, 2002.

[7] H. Hacigumus, S. Mehrotra, and B. Iyer. Providing database as a service. In Proceedings of ICDE, 2002.

[8] C. S. Jensen and et al. The consensus glossary of temporal database concepts - February 1998 version. In Temporal Databases, pages 367–405, 1997.

[9] M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu. Plutus: Scalable secure file sharing on untrusted storage. In Proceedings of FAST, 2003.

[10] J. Li, M. N. Krohn, D. Mazières, and D. Shasha. Secure untrusted data repository (SUNDR). In Proceedings of OSDI, 2004.

[11] D. Lomet, R. Barga, M. Mokbel, and G. Shegalov. Transaction time support inside a database engine. In Proceedings of ICDE, 2006.

[12] D. Lomet and B. Salzberg. The performance of a multiversion access method. In Proceedings of SIGMOD, 1990.

[13] W. Lu and G. Miklau. Auditing a database under retention restrictions. In Proceedings of ICDE, 2009.

[14] Microsoft Corporation. Windows kernel patch protection. Online at http://www.microsoft.com/whdc/driver/kernel/64bitpatch_FAQ.mspx.

[15] G. Miklau and D. Suciu. Implementing a tamper-evident database system. In Proceedings of the Asian Computing Science Conference, 2005.

[16] S. Mitra, M. Winslett, R. T. Snodgrass, S. Yaduvanshi, and S. Ambokar. An architecture for regulatory compliant databases. In Proceedings of ICDE, 2009.

[17] Network Appliance Inc. SnapLock Compliance and SnapLock Enterprise Solution. Online at http://www.netapp.com/products/software/snaplock.html, 2007.

[18] B. Schneier and J. Kelsey. Secure audit logs to support computer forensics. ACM Trans. Inf. Syst. Secur., 2(2):159–176, 1999.

[19] Securities and Exchange Commission. Guidance to broker-dealers on the use of electronic storage media under the National Commerce Act of 2000 with respect to rule 17a-4(f). Online at http://www.sec.gov/rules/interp/34-44238.htm, 2001.

[20] R. Sion. Query execution assurance for outsourced databases. In Proceedings of VLDB, 2005.

[21] R. Snodgrass. Developing Time-Oriented Database Applications in SQL. Morgan Kaufmann, 1999.

[22] R. T. Snodgrass, S. S. Yao, and C. S. Collberg. Tamper detection in audit logs. In Proceedings of VLDB, 2004.

[23] M. Stonebraker. The Design of the POSTGRES Storage System. In Proceedings of VLDB, 1987.

[24] University of Wisconsin. Shore - a high-performance, scalable, persistent object repository. Online at http://www.cs.wisc.edu/shore.

[25] M. Xie, H. Wang, J. Yin, and X. Meng. Integrity auditing of outsourced data. In Proceedings of VLDB, 2007.