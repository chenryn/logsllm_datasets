client and the server;
the communication cost .
x
The main idea of our PoOR is to divide large files into file 
blocks,  and  verify  part  of  the  blocks  using  Merkle  Tree  or 
homomorphic  verifiable  tags.  So  when  the  proving  and 
verifying  processes  are  executed,  only  a  minority,  for 
example  400  blocks,  of  the  entity  file  needs  to  be  visited. 
We  emphasize  that  it  is  inevitable  that  the  whole  file  is 
processed  in  the  pre-process  phase, because  unique  tags 
must  be  generated  by  each  user  to  support  privately 
verification of data possession. 
The  computation  overhead  is  reasonable,  and  it  will  be 
evaluated in the next subsection.
In our scheme, the extra data stored in client side is quite 
small. The user only needs to store the secret keys used to 
verify the integrity of his files. The storage cost of the server 
may be a little more, because it has to store the unique tags 
of  every  user  even  they  share  the  same  file.  If  the  size  of 
sectors  is αByte  and  the  size  of  blocks  is βByte,  the  total 
஑
ஒ ∗ ݈, where ݈ is the length 
space needed for a client’s tags is 
of the file. When we set α to be 64 and β to be 16, only 0.4% 
extra  data  need  to  be  transferred  and  stored  in  the  server. 
This  extra  storage  cost  is inevitable  in  general  privately 
verifiable proof of retrievability schemes for plaintext. And 
it  is  acceptable  as  the  storage  space  of  the  server  is 
extremely huge. 
333
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II. 
SIZES OF PROOFS OF RETRIEVABILITY
block size(KB)
proof size(KB)
4
4.09
16
16.18
64
64.51
The  communication  cost  of  PoWs 
is  as  high  as 
256ܿ(logଶ ݊ − 1),  in  which ܿ is  the  number  of  challenged 
blocks and logଶ ݊ is the height of the Merkle Tree. But the 
communication traffic between the client and the server in 
our scheme is very small. As ܲ1 is the root of a hash tree, its 
length is quite short (e.g. 256bits if we use SHA-256). The 
length of ܲ2 is (|ܶ| + ݏ|ߤ|), and is independent to file size 
and  the  number  of  challenged  blocks.  Table  II  shows  the 
sizes of proofs when block size ranges from 4KB to 64KB 
and sector size fixes on 64B. We can see that the proof sizes 
are almost equal to the sizes of blocks, which is small and 
acceptable. 
C. Experiments 
We  implemented  the  scheme  PoOR  and  evaluated  its 
computation  performance.  The  program  is  written  in  Java 
and  run  on  a  computer  equipped  with  a  2.8GHz  Pentium 
Dual-Core CPU and a 4GB RAM. The test machine runs 32 
bits version of Windows 7. 
We  measure  the  running  time  of  the  three  phases:  pre-
process, ownership proving and retrievability proving. In Fig 
5 we present the running time of pre-process and ownership 
proving  compared  with  the  transmission  time  if  we  upload 
the  file directly  through a  network  with  a  speed of 5Mbps. 
As  the  pre-processing  time  and  the  transmission  time  are 
both  dependent  on  the  size  of  the  file,  we  execute  the 
algorithms on files of different sizes, and keep the block size 
fixed to be  4KB  and challenge  a  constant  number (480) of 
blocks.  We  can  observe  that  even  though  the  client  has  to 
generate tags for all the blocks, the PoOR scheme still take 
much  less  time  than  sending  the  entire  file  to  the  server, 
especially when the size of file is very large. 
Fig 6 shows the computation time as a function of file size 
when generating a proof of ownership in PoWs and PoOR. 
The proving time of PoWs is in direct proportion to file size, 
and  obviously  longer  than  that  of  PoOR.  In  PoWs,  which 
always  challenge  only  20  leaves,  the  client  has  to  build  a 
hash  tree  from  all  the  blocks  to  generate  a  proof.  In  our 
scheme,  the  time  to  make  a  proof  should  rely  only  on  the 
quantity of challenged blocks. When ܿ is fixed, the proving 
time is probably constant. We can see from the graph that the 
running  time  of  ownership  proving  in  the  PoOR  grows 
slowly  with the file size, which does not completely  match 
the  theoretical  analysis. That  is  because  the  I/O  time 
becomes larger when the size of file increases. Overall, our 
scheme is more efficient than traditional PoWs. 
At last we compare the retrievability proving phase in our 
scheme with PDP [10]. As the running time of this phase is 
independent  to  the  size  of  files,  we  do  this  part  of  our 
experiments on a 128MB file. From Fig 7 we can clearly see 
Fig. 5. Computation performance of the three phases when block size is 
4KB and challenge 400 blocks 
Fig. 6. Computation performance of ownership proving phase compared 
with PoWs 
Fig. 7. Computation performance compared with PDP
334
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply. 
that the running time increases while the block size and the 
number  of  the  challenged  blocks  getting  larger.  And  when 
these two parameters are same, our scheme runs faster than 
PDP. 
In  conclusion,  the  computation  performance  of  our 
scheme  is  satisfactory. By  using  PoOR  one  can  prove  his 
ownership and verify the retrievability of a file very fast even 
when the file is very large. 
VI. CONCLUSION
In 
this  paper,  we  focus  on 
the  problem  of  data 
deduplication  and  proofs  of  data  retrievability  in  cloud 
storage  under  the  setting  that  both  the  client  and  the  cloud 
server are not completely trusted. We introduce a framework 
to  provide  proofs  of  data  ownership  and  retrievability,  and 
propose a PoOR scheme. In PoOR, a user without the whole 
content  of  a  file  cannot  convince  the  cloud  server  that  he 
owns this file with an overwhelming high possibility; on the 
other  hand,  the  user  can  verify  the  retrievability  of  his  file 
without actually accessing the data file. We employ erasure 
code,  Merkle  Tree  and  homomorphic  verifiable  tags  to 
guarantee the security and efficiency of the scheme. 
Analysis  and  experiments  show  that  our  scheme  can 
satisfy  the  secure  requirement  of  our  cloud  environment 
setting. And it is efficient since the traffic cost is small and 
the computation and storage overhead is acceptable.  
Our  work  is  one  of  the  earliest  researches  about  file 
deduplication  with  proofs  of  data  retrievability  in  cloud 
storage,  and  can  be  improved  in  efficiency  in  our  further 
work. 
ACKNOWLEDGMENT
This  work  was  partially  supported  by  the  National 
Natural  Science  Foundation  of  China  under  Grant  No. 
61272451, 
The 
corresponding author is Jing Chen. 
61100221. 
61173175, 
61173154,
REFERENCES
[1]  D. Harnik, B. Pinkas and A. Shulman-Peleg, “Side Channels in 
Cloud Services: Deduplication in Cloud Storage”, IEEE Secur. Priv.,
vol. 8, no. 6, pp. 40–47, 2010. 
[2]  S. Halevi, D. Harnik, B. Pinkas and A. Shulman-Peleg, “Proofs of 
Ownership in Remote Storage Systems”, in Proceedings of the 18th 
ACM conference on Computer and communications security, New 
York, NY, USA, 2011, pp. 491–500. 
[3]  D. T. Meyer and W. J. Bolosky, “A Study of Practical Deduplication”, 
Trans Storage, vol. 7, no. 4, pp. 14:1–14:20, 2012. 
[4]  D. R. Bobbarjung, S. Jagannathan and C. Dubnicki, “Improving 
Duplicate Elimination in Storage Systems”, Trans Storage, vol. 2, no. 
4, pp. 424–448, 2006. 
[5]  R. Di Pietro and A. Sorniotti, “Boosting Efficiency and Security in 
Proof of Ownership for Deduplication”, in Proceedings of the 7th 
ACM Symposium on Information, Computer and Communications 
Security, New York, NY, USA, 2012, pp. 81–82. 
[6]  C. Yang, J. Ren and J. Ma, “Provable ownership of files in 
deduplication cloud storage”, Secur. Commun. Netw., 2013. 
J. Xu, E.-C. Chang and J. Zhou, “Weak Leakage-resilient Client-side 
Deduplication of Encrypted Data in Cloud Storage”, in Proceedings 
[7] 
[8] 
of the 8th ACM SIGSAC Symposium on Information, Computer and 
Communications Security, New York, NY, USA, 2013, pp. 195–206. 
J. R. Douceur, A. Adya, W. J. Bolosky, P. Simon and M. Theimer, 
“Reclaiming space from duplicate files in a serverless distributed file 
system”, in  22nd International Conference on Distributed Computing 
Systems, 2002. Proceedings, 2002, pp. 617–624. 
[9]  Y. Deswarte, J.-J. Quisquater and A. Saïdane, “Remote Integrity 
Checking”, in  Integrity and Internal Control in Information Systems 
VI, S. Jajodia and L. Strous,   Springer US, 2004, pp. 1–11. 
[10]  G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. 
Peterson and D. Song, “Provable Data Possession at Untrusted 
Stores”, in Proceedings of the 14th ACM conference on Computer 
and communications security, New York, NY, USA, 2007, pp. 598–
609. 
[11]  A. Juels and B. S. Kaliski,Jr., “PORs: Proofs of Retrievability for 
Large Files”, in Proceedings of the 14th ACM conference on 
Computer and communications security, New York, NY, USA, 2007, 
pp. 584–597. 
[12]  H. Shacham and B. Waters, “Compact Proofs of Retrievability”, in
Advances in Cryptology - ASIACRYPT 2008, J. Pieprzyk,   Springer 
Berlin Heidelberg, 2008, pp. 90–107. 
[13]  E.-C. Chang and J. Xu, “Remote Integrity Check with Dishonest 
Storage Server”, in Computer Security - ESORICS 2008, S. Jajodia 
and J. Lopez,   Springer Berlin Heidelberg, 2008, pp. 223–237. 
[14]  G. Ateniese, R. Di Pietro, L. V. Mancini and G. Tsudik, “Scalable 
and Efficient Provable Data Possession”, in Proceedings of the 4th 
international conference on Security and privacy in communication 
netowrks, New York, NY, USA, 2008, pp. 9:1–9:10. 
[15]  R. Curtmola, O. Khan, R. Burns and G. Ateniese, “MR-PDP: 
Multiple-Replica Provable Data Possession”, in The 28th 
International Conference on Distributed Computing Systems, 2008. 
ICDCS ’08, 2008, pp. 411–420. 
[16]  K. D. Bowers, A. Juels and A. Oprea, “HAIL: A High-Availability 
and Integrity Layer for Cloud Storage”, in Proceedings of the 16th 
ACM conference on Computer and communications security, New 
York, NY, USA, 2009, pp. 187–198. 
[17]  Y. Zhu, H. Hu, G.-J. Ahn and M. Yu, “Cooperative Provable Data 
Possession for Integrity Verification in Multicloud Storage”, IEEE 
Trans. Parallel Distrib. Syst., vol. 23, no. 12, pp. 2231–2244, 2012. 
[18]  C. Erway, A. Küp\textbackslashccü, C. Papamanthou and R. 
Tamassia, “Dynamic Provable Data Possession”, in Proceedings of 
the 16th ACM conference on Computer and communications security,
New York, NY, USA, 2009, pp. 213–222. 
[19]  Q. Wang, C. Wang, J. Li, K. Ren and W. Lou, “Enabling Public 
Verifiability and Data Dynamics for Storage Security in Cloud 
Computing”, in Computer Security – ESORICS 2009, M. Backes and 
P. Ning,   Springer Berlin Heidelberg, 2009, pp. 355–370. 
[20]  Q. Wang, C. Wang, K. Ren, W. Lou and J. Li, “Enabling Public 
Auditability and Data Dynamics for Storage Security in Cloud 
Computing”, IEEE Trans. Parallel Distrib. Syst., vol. 22, no. 5, pp. 
847–859, 2011. 
[21]  C. Wang, Q. Wang, K. Ren and W. Lou, “Privacy-Preserving Public 
Auditing for Data Storage Security in Cloud Computing”, in 2010 
Proceedings IEEE INFOCOM, 2010, pp. 1–9.
[22]  G. Ateniese, R. Burns, R. Curtmola, J. Herring, O. Khan, L. Kissner, 
Z. Peterson and D. Song, “Remote Data Checking Using Provable 
Data Possession”, ACM Trans Inf Syst Secur, vol. 14, no. 1, pp. 
12:1–12:34, 2011. 
[23]  J. Yuan and S. Yu, “Proofs of Retrievability with Public Verifiability 
and Constant Communication Cost in Cloud”, in Proceedings of the 
2013 international workshop on Security in cloud computing, New 
York, NY, USA, 2013, pp. 19–26. 
[24]  Q. Zheng and S. Xu, “Secure and Efficient Proof of Storage with 
Deduplication”, in Proceedings of the second ACM conference on 
Data and Application Security and Privacy, New York, NY, USA, 
2012, pp. 1–12. 
335
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply.