13. “25G” 之后，再给他“ 15x ”即可删除 15 个字符，出现“ tree ”的字样；
14. 先“ 1G ”去到第一列，然后按下大写的“ O ”便新增一列且在插入模式；开始输入“I am a student...”后， 按下[Esc]回到一般指令模式等待后
续工作；
15. “:wq”
如果你的结果都可以查的到，那么 vi 的使用上面应该没有太大的问题啦！剩下的问题会是在…打字练习…。
在目前主要的文书编辑软件都会有“回复”的功能，亦即当你的系统因为某些原因而导致类似死机的情况时， 还可以通过某些特别的机制
来让你将之前未储存的数据“救”回来！这就是鸟哥这里所谓的“回复”功能啦！ 那么 vim 有没有回复功能呢？有的！ vim 就是通过“暂存盘”来救援
的啦！
当我们在使用 vim 编辑时， vim 会在与被编辑的文件的目录下，再创建一个名为 .filename.swp 的文件。 比如说我们在上一个小节谈到
的编辑 /tmp/vitest/man_db.conf 这个文件时， vim 会主动的创建 /tmp/vitest/.man_db.conf.swp 的暂存盘，你对 man_db.conf 做的动作就会被记
录到这个 .man_db.conf.swp 当中喔！如果你的系统因为某些原因断线了， 导致你编辑的文件还没有储存，这个时候 .man_db.conf.swp 就能够
发挥救援的功能了！我们来测试一下吧！ 下面的练习有些部分的指令我们尚未谈到，没关系，你先照着做，后续再回来了解啰！
[dmtsai@study ~]$ cd /tmp/vitest
[dmtsai@study vitest]$ vim man_db.conf
# 此时会进入到 vim 的画面，请在 vim 的一般指令模式下按下“ [ctrl]-z ”的组合键
[1]+ Stopped vim man_db.conf <==按下 [ctrl]-z 会告诉你这个讯息
当我们在 vim 的一般指令模式下按下 [ctrl]-z 的组合按键时，你的 vim 会被丢到背景去执行！ 这部份的功能我们会在第十六章的程序管
理当中谈到， 你这里先知道一下即可。回到命令提示字符后，接下来我们来仿真将 vim 的工作不正常的中断吧！
[dmtsai@study vitest]$ ls -al
drwxrwxr-x. 2 dmtsai dmtsai 69 Jul 6 23:54 .
drwxrwxrwt. 17 root root 4096 Jul 6 23:53 ..
-rw-r--r--. 1 dmtsai dmtsai 4850 Jul 6 23:47 man_db.conf
-rw-r--r--. 1 dmtsai dmtsai 16384 Jul 6 23:54 .man_db.conf.swp <==就是他，暂存盘
-rw-rw-r--. 1 dmtsai dmtsai 5442 Jul 6 23:35 man.test.config
[dmtsai@study vitest]$ kill -9 %1 <==这里仿真断线停止 vim 工作
[dmtsai@study vitest]$ ls -al .man_db.conf.swp
-rw-r--r--. 1 dmtsai dmtsai 16384 Jul 6 23:54 .man_db.conf.swp <==暂存盘还是会存在！
那个 kill 可以仿真将系统的 vim 工作删除的情况，你可以假装死机了啦！ 由于 vim 的工作被不正常的中断，导致暂存盘无法借由正常流
程来结束， 所以暂存盘就不会消失，而继续保留下来。此时如果你继续编辑那个 man_db.conf ，会出现什么情况呢？ 会出现如下所示的状态
喔：
[dmtsai@study vitest]$ vim man_db.conf
E325: ATTENTION <==错误代码
Found a swap file by the name ".man_db.conf.swp" <==下面数列说明有暂存盘的存在
owned by: dmtsai dated: Mon Jul 6 23:54:16 2015
file name: /tmp/vitest/man_db.conf <==这个暂存盘属于哪个实际的文件？
modified: no
user name: dmtsai host name: study.centos.vbird
process ID: 31851
While opening file "man_db.conf"
dated: Mon Jul 6 23:47:21 2015
下面说明可能发生这个错误的两个主要原因与解决方案！
（1） Another program may be editing the same file. If this is the case,
be careful not to end up with two different instances of the same
file when making changes. Quit, or continue with caution.
（2） An edit session for this file crashed.
If this is the case, use ":recover" or "vim -r man_db.conf"
to recover the changes （see ":help recovery"）.
If you did this already, delete the swap file ".man_db.conf.swp"
to avoid this message.
Swap file ".man_db.conf.swp" already exists! 下面说明你可进行的动作
[O]pen Read-Only, （E）dit anyway, （R）ecover, （D）elete it, （Q）uit, （A）bort:
由于暂存盘存在的关系，因此 vim 会主动的判断你的这个文件可能有些问题，在上面的图示中 vim 提示两点主要的问题与解决方案，分
别是这样的：
问题一：可能有其他人或程序同时在编辑这个文件：
由于 Linux 是多用户多任务的环境，因此很可能有很多人同时在编辑同一个文件。如果在多人共同编辑的情况下， 万一大家同时储存，
那么这个文件的内容将会变的乱七八糟！为了避免这个问题，因此 vim 会出现这个警告窗口！ 解决的方法则是：
找到另外那个程序或人员，请他将该 vim 的工作结束，然后你再继续处理。
如果你只是要看该文件的内容并不会有任何修改编辑的行为，那么可以选择打开成为只读（O）文件， 亦即上述画面反白部分输入
英文“ o ”即可，其实就是 [O]pen Read-Only 的选项啦！
问题二：在前一个 vim 的环境中，可能因为某些不知名原因导致 vim 中断 （crashed）：
这就是常见的不正常结束 vim 产生的后果。解决方案依据不同的情况而不同喔！常见的处理方法为：
如果你之前的 vim 处理动作尚未储存，此时你应该要按下“R”，亦即使用 （R）ecover 的项目， 此时 vim 会载入 .man_db.conf.swp
的内容，让你自己来决定要不要储存！这样就能够救回来你之前未储存的工作。 不过那个 .man_db.conf.swp 并不会在你结束 vim
后自动删除，所以你离开 vim 后还得要自行删除 .man_db.conf.swp 才能避免每次打开这个文件都会出现这样的警告！
如果你确定这个暂存盘是没有用的，那么你可以直接按下“D”删除掉这个暂存盘，亦即 （D）elete it 这个项目即可。 此时 vim 会载
入 man_db.conf ，并且将旧的 .man_db.conf.swp 删除后，创建这次会使用的新的 .man_db.conf.swp 喔！
至于这个发现暂存盘警告讯息的画面中，有出现六个可用按钮，各按钮的说明如下：
[O]pen Read-Only：打开此文件成为只读文件， 可以用在你只是想要查阅该文件内容并不想要进行编辑行为时。一般来说，在上课时，
如果你是登陆到同学的计算机去看他的配置文件， 结果发现其实同学他自己也在编辑时，可以使用这个模式；
（E）dit anyway：还是用正常的方式打开你要编辑的那个文件， 并不会载入暂存盘的内容。不过很容易出现两个使用者互相改变对方的
文件等问题！不好不好！
（R）ecover：就是载入暂存盘的内容，用在你要救回之前未储存的工作。 不过当你救回来并且储存离开 vim 后，还是要手动自行删除
那个暂存盘喔！
（D）elete it：你确定那个暂存盘是无用的！那么打开文件前会先将这个暂存盘删除！ 这个动作其实是比较常做的！因为你可能不确定
这个暂存盘是怎么来的，所以就删除掉他吧！哈哈！
（Q）uit：按下 q 就离开 vim ，不会进行任何动作回到命令提示字符。
（A）bort：忽略这个编辑行为，感觉上与 quit 非常类似！ 也会送你回到命令提示字符就是啰！
其实，目前大部分的 distributions 都以 vim 取代 vi 的功能了！如果你使用 vi 后，却看到画面的右下角有显示目前光标所在的行列号码，
那么你的 vi 已经被 vim 所取代啰～为什么要用 vim 呢？因为 vim 具有颜色显示的功能，并且还支持许多的程序语法 （syntax）， 因此，当你
使用 vim 编辑程序时 （不论是 C 语言，还是 shell script ），我们的 vim 将可帮你直接进行“程序除错 （debug）”的功能！真的很不赖吧！^_^
如果你在文字模式下，输入 alias 时，出现这样的画面：
[dmtsai@study ~]$ alias
....其他省略....
alias vi='vim' <==重点在这列啊！
这表示当你使用 vi 这个指令时，其实就是执行 vim 啦！如果你没有这一列，那么你就必须要使用 vim filename 来启动 vim 啰！基本上，
vim 的一般用法与 vi 完全一模一样～没有不同啦！那么我们就来看看 vim 的画面是怎样啰！假设我想要编辑 /etc/services ，则输入“vim
/etc/services”看看吧：
图9.3.1、使用 vim 编辑系统配置文件的示范
上面是 vim 的画面示意图，在这个画面中有几点特色要说明喔：
1. 由于 /etc/services 是系统规划的配置文件，因此 vim 会进行语法检验，所以你会看到画面中内部主要为深蓝色， 且深蓝色那一列是以注
解符号 （#） 为开头；
2. 画面中的最下面一列，在左边显示该文件的属性，包括只读文件、内容共有 11176 列与 670293 个字符；
3. 最下面一列的右边出现的 1,1 表示光标所在为第一列, 第一个字符位置之意（请看上图中的光标所在）；
所以，如果你向下移动到其他位置时，出现的非注解的数据就会有点像这样：
图9.3.2、使用 vim 编辑系统配置文件的示范
看到了喔！除了注解之外，其他的列就会有特别的颜色显示呢！可以避免你打错字啊！而且， 最右下角的 1% 代表目前这个画面占整体
文件的 1% 之意！这样了乎？
刚刚我们提到的简单的 vi 操作过程中，几乎提到的都是以列为单位的操作。那么如果我想要搞定的是一个区块范围呢？ 举例来说，像
下面这种格式的文件：
192.168.1.1 host1.class.net
192.168.1.2 host2.class.net
192.168.1.3 host3.class.net
192.168.1.4 host4.class.net
.....中间省略......
这个文件我将他放置到 http://linux.vbird.org/linux_basic/0310vi/hosts ，你可以自行下载来看一看这个文件啊！现在我们来玩一玩这个文
件吧！假设我想要将 host1, host2... 等等复制起来， 并且加到每一列的后面，亦即每一列的结果要是“ 192.168.1.2 host2.class.net host2 ”这样
的情况时， 在传统或现代的窗口型编辑器似乎不容易达到这个需求，但是咱们的 vim 是办的到的喔！那就使用区块选择 （Visual Block） 吧！
当我们按下 v 或者 V 或者 [Ctrl]+v 时， 这个时候光标移动过的地方就会开始反白，这三个按键的意义分别是：
区块选择的按键意义
v 字符选择，会将光标经过的地方反白选择！
V 列选择，会将光标经过的列反白选择！
[Ctrl]+v 区块选择，可以用长方形的方式选择数据
y 将反白的地方复制起来
d 将反白的地方删除掉
p 将刚刚复制的区块，在光标所在处贴上！
来实际进行我们需要的动作吧！就是将 host 再加到每一列的最后面，你可以这样做：
1. 使用 vim hosts 来打开该文件，记得该文件请由上述的链接下载先！
2. 将光标移动到第一列的 host 那个 h 上头，然后按下 [ctrl]-v ，左下角出现区块示意字样：
图9.3.3、vim 的区块选择、复制、贴上等功能操作
3. 将光标移动到最底部，此时光标移动过的区域会反白！如下图所示：
图9.3.4、vim 的区块选择、复制、贴上等功能操作
4. 此时你可以按下“ y ”来进行复制，当你按下 y 之后，反白的区块就会消失不见啰！
5. 最后，将光标移动到第一列的最右边，并且再用编辑模式向右按两个空白键，回到一般指令模式后， 再按下“ p ”后，你会发现很有趣！
如下图所示：
图9.3.5、vim 的区块选择、复制、贴上等功能操作
通过上述的功能，你可以复制一个区块，并且是贴在某个“区块的范围”内，而不是以列为单位来处理你的整份文件喔！ 鸟哥个人是觉得
这玩意儿非常的有帮助啦！至少在进行排列整齐的文字文件中复制/删除区块时，会是一个非常棒的功能！
假设一个例子，你想要将刚刚我们的 hosts 内的 IP 复制到你的 /etc/hosts 这个文件去， 那么该如何编辑？我们知道在 vi 内可以使用 :r
filename 来读入某个文件的内容， 不过，这样毕竟是将整个文件读入啊！如果我只是想要部分内容呢？呵呵！这个时候多文件同时编辑就很有