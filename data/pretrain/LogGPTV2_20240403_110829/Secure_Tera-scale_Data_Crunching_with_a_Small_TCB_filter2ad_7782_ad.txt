the Supervisor to behave differently when the library produces
a page fault while walking through the state components. If the
fault address is map-hit by a data-typed map (only containing
data), one data block is loaded. In this case, the state handler
just performs cryptographic validation. If the address is instead
map-hit by a metadata-typed map (only containing metadata),
then the entire map is loaded. The rationale is that metadata
is small (compared to data, see evaluation §7) and can best be
validated immediately. This later allows validation of a data
block in constant time—check if a block’s hash matches the
associated hash tree leaf.
6.1.5 Loading Data From Disk and Reclaiming Maps.
If the Supervisor cannot ﬁnd a map that covers the page
fault address, then that is a map miss. A map miss only occurs
on IMEL pages (§5.3.1) unless bugs result in illegal map
misses. The Supervisor transfers control to the SMM to handle
the map miss. The SMM uses the fault address to locate the
IMEL and needs some metadata in untrusted memory to locate
the data on disk. For this reason the SMM maintains shadow
copies of parent state components—treated later (§6.2, §6.3)
due to architectural differences in the trusted address space
conﬁguration. So the child state component is loaded from
disk into an arbitrary free memory range and the associated
IMEL page is updated. Then the SMM creates map entries for
both the IMEL page and the child component and informs the
Supervisor of the new maps. The Supervisor retries handling
the fault whose address should result now in a map hit.
When a map miss does not reference a IMEL page (e.g., the
null 0×0 address), this is considered a software bug. The SMM
thus triggers an execution shutdown (segmentation fault).
Reclaiming maps.
The SMM reclaims a map m =
(type, address, pages) by inserting in the list another entry
(cid:2) = (RECLAIM, address, pages) with a special reclaim-type.
m
Finally, the handler checks the reclaim and accepts to give the
map back to the SMM.
Reclaiming maps in the presence of modiﬁed data. While
there is a modiﬁed state component mapped in (e.g., a chunk),
the state handler never accepts the reclaim of any map of
that component’s ancestors (e.g., a master chunk). The hash
tree in fact may not be up to date with the modiﬁcations.
If a reclaimed component has no child components in the
secure environment, the state handler updates the hash tree
(if necessary) and accepts the reclaim. At attestation-time, the
state handler similarly updates the hash tree root, so clients can
know the identity and verify the integrity of the output state.
6.1.6 Attestation and Remote Veriﬁcation
LASTGT combines in the attestation a client-provided
nonce and the identities of the registered state, the output state
(if any), the client request, the reply, the trusted application
code. The state handler initially receives from the SMM
specially-typed maps that contain the request, the reply and the
nonce. It accepts them and, respectively, it hashes the request
map to save the request identity, it saves the nonce, it zeroes
the reply map that is later ﬁlled by the service code. After the
service code execution terminates, when the state handler runs
again to perform the attestation, the data in the reply map is
also hashed to get the identity. The state handler then hashes
the identities of the state, the request and the reply together
with the nonce. The resulting hash can be either hash-chained
to the trusted application code identity and attested (in XMHF-
TrustVisor) or provided in input for the cryptographic report (in
SGX) which will include the trusted application code identity.
Assuming that the client receives the reply (and recalling
our model §4), the client knows all the attestation parameters
and can therefore verify the attestation. In particular, the client
establishes trust in the reply only if the identities that are
combined in the attestation match the expected ones.
Implementation in XMHF-TrustVisor
6.2
6.2.1 Background
XMHF-TrustVisor [25], [10] is a hypervisor that provides
efﬁcient isolated execution and attestation of self-contained
code (Fig. 4b). The trusted execution environment is created
by registering the trusted application code in the hypervisor
using a hypercall. Code memory pages are isolated from the
untrusted OS using nested page tables (e.g., Intel EPT) to
forbid access to the physical pages. Any access from untrusted
code traps into the hypervisor. Only when the program counter
points to the registered code’s entry point,
the hypervisor
switches to secure mode to execute the registered code. The
code executes until it terminates—it is never preempted and
input data is provided upfront. Termination occurs when the
code attempts to return to code outside the isolated region.
Hence, it traps into the hypervisor which switches to non-
sensitive mode to run (and makes the output available to) the
untrusted application code.
175
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:21:49 UTC from IEEE Xplore.  Restrictions apply. 
At veriﬁcation time, the client checks the correctness of two
attestations: one from the hardware-TPM (a low-power chip)
that vouches for the correct execution of the hypervisor; and
one from the hypervisor, that vouches for the correct execution
of the registered code. We refer to [25], [10] for further details.
6.2.2
Implementation
The architecture of XMHF-TrustVisor simpliﬁes (w.r.t.
SGX) LASTGT’s implementation in two ways. First, the hy-
pervisor can keep the service interrupted (after a page fault)
until successful validation by the state handler. So the service
accesses valid data when it is resumed. Second, the hypervisor
can modify the trusted application code’s page tables. So it can
be trusted to load (and similarly unload) data at the correct
position in the trusted execution environment.
The extended hypervisor orchestrates a LASTGT execution
based on the feedback received from the application-level. The
hypervisor begins by running the state handler supplying the
maps of the state root, the heap memory, the request, the
reply and the nonce. Feedback from the state handler is a
return value: 0, registration (or validation) unsuccessful; 1,
registration (or validation) successful. If successful, the service
code can be executed until termination, or until a page fault
occurs by accessing a non-isolated state component as shown
in Fig. 9 (left-side). On termination, the hypervisor asks the
state handler to protect the integrity of modiﬁed pages in the
state hierarchy up to the root and attest the result.
On page fault, the hypervisor checks the maps. In the map-
hit case, it provides the data and the page fault address to the
state handler for validation and, if successful, it resumes the
service code. In the map-miss case, the hypervisor provides the
page fault address to the SMM. The SMM uses it to locate the
metadata shadow copy of the (isolated) state component, which
is used to load the missing (child) state component in memory.
The SMM then returns the new maps to the hypervisor.
The hypervisor switches control between the service code,
the state handler and the SMM by alternating the execution of
the VM with the untrusted OS and of the VM with the trusted
application code. Namely, it updates the instruction pointer to
one of the entry points (service code, state handler, SMM) or
to the faulted service code instruction. In the case of an entry
point, the hypervisor pushes an instruction pointer on the stack
so the code traps back into the hypervisor when it returns.
The hypervisor isolates a map by ensuring that: the map
pages have been (lazily §6.1.4) inserted in the page tables
of the trusted application code; the nested page tables are
conﬁgured to grant
trusted application code access to the
associated physical pages, while denying the SMM and OS
access to them. Un-isolating a map works in the opposite way.
6.3 On the feasibility of LASTGT using Intel SGX
6.3.1 Background
Intel SGX [29] is an instruction set extension available
on the Intel Skylake microarchitecture that enables trusted
remote code execution and veriﬁcation. It uses an area in main
memory, encrypted by the CPU, where secured code and data
reside. It does not require external hardware for attestation. So
the CPU package delimits the physical security boundary.
A secured area called Enclave can be created to set
up an execution environment for trusted application code
initialized
ELRANGE
uninitialized
shadow copies
isolated environment
shadow copies
transposed 
data
Fig. 9: In the trusted environment, parent state components can reference
child ones in untrusted main memory either directly using their addresses (in
XMHF-TrustVisor, left-side), or indirectly through their transposed addresses
in uninitialized pages within the enclave’s secure range, where they will
be loaded (in SGX, right-side). Referenced components, that are not yet in
untrusted memory, are located and loaded using metadata shadow copies.
(Fig. 4c). At enclave-creation time, a range of logical addresses
(ELRANGE) deﬁnes the enclave secure region. The enclave
can access memory inside and outside the secure region, but
it cannot execute code outside it. The enclave can include
one or more entry points where the execution starts. If the
enclave is interrupted, the sensitive processor state is saved
within the secure region and restored when the enclave is
resumed. Adding and removing enclave memory pages at run-
time requires cooperation between untrusted privileged code
(the Supervisor, i.e., an OS driver) and the enclave’s trusted
application code. We refer to [29], [31] for further details.
6.3.2
Implementation
In SGX, the memory management and the secure control
ﬂow management are slightly more complex (compared with
XMHF-TrustVisor) for three reasons. First, addresses and
content of enclave memory pages to be added or removed at
runtime must be checked and accepted by the enclave at the
application-level, without help from trusted privileged code.
Second, enclave code can access untrusted memory outside
ELRANGE. While this is useful to load (and then validate)
data from untrusted memory, it opens the risk of using incor-
rect data inadvertently. Third, untrusted code can run/resume
enclave code at any time. Hence, concurrency issues may arise
within the enclave, particularly when resolving a page fault or
performing an attestation. LASTGT can deal with these three
challenges as follows.
1. Since untrusted code cannot start the enclave execution
at an arbitrary instruction, we build the enclave with separate
entry points for the service code and the state handler. This
allows running the state handler while the service code is in-
terrupted.
A mechanism is required to ensure that the service code can
only be resumed, and not re-executed, after an interruption. As
untrusted code can behave arbitrarily, it may restart the enclave
at the service code entry point. We thus build the enclave with
a single area to save the processor state on interruption (e.g.,
due to a page fault). As an interruption consumes one such
area and the CPU requires one to be available to start the
enclave, this prevents multiple executions at the service code
entry point, before the service code terminates.
When the state handler is executed, the handler has to
validate the position at which memory pages are supplied, and
the content these pages should have. The position is the address
of the page where the fault occurred during the service code
execution. Such address is found using the CR2 control register
where the CPU stores the fault address. However, reading
CR2 requires privileges, so the application-level enclave code
176
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:21:49 UTC from IEEE Xplore.  Restrictions apply. 
cannot do it. Also, the state handler cannot trust the (untrusted)
SGX driver to supply it correctly, although it expects the driver
to supply the memory pages. Fortunately, the CPU includes
the value of CR2 in the enclave’s secure region when the
execution is interrupted. So the state handler has access to a
trusted address and can check that a map (in the list) covers it.
2. Validating the content of the memory pages is tricky
because they are not available, otherwise the service code
could be resumed. The problem is to enable the resumption of
the service code only after the pages are available with the right
content. This is solved by validating the content elsewhere and
leveraging SGX to ﬁll the pages appropriately as follows. We
include in the enclave (at creation-time) a buffer large enough
(e.g., 4MB) to contain a state component metadata or a data
block. We program the state handler to copy the data from
non-enclave memory to the internal buffer and to validate it.
Besides validating the integrity of the data, the state handler
also checks that any address referencing an IMEL or a child
state component falls within the secure region. This prevents
the service code from accessing untrusted memory. We discuss
later where the data is placed in untrusted memory.
Assuming the data is valid, the next step is placing it
correctly so that the service code can be resumed and access
it. We resort to the EACCEPTCOPY SGX instruction to do
it. The instruction allows to copy an available enclave page
into an uninitialized enclave page and to initialize it. So the
state handler executes the instruction to copy a page of the
buffer containing the data into a still unavailable page that
the interrupted service code cannot access. After this step, the
service code can make progress since the page is available and
contains valid data. The procedure can be easily extended to
batch the validation and acceptance of a set of pages. Similarly,
enclave memory is reclaimed with a two-phase protocol as in
[29, 3.5.9]. We mention that SGX provides another instruction
for accepting memory pages, i.e., EACCEPT. This is useful for
dynamic memory allocations (e.g., our dynamic memory map),
that are supposed not to contain sensitive data initially—in fact
they are zeroed. However, using it in the previous step would
not be secure, because it initializes the memory pages (which
become accessible) before they are ﬁlled with valid data.
We explain how our maps are used as the data is to be
transferred from untrusted memory to the trusted buffer and
then copied elsewhere in the enclave’s memory. In XMHF-
TrustVisor, since we can (un)isolate as single memory page,
one map per component is sufﬁcient. In SGX, instead, the
SMM cannot load data directly into the enclave region, and
the state handler should have some means to locate data
in untrusted memory. Our solution is mapping each state
component into two map lists M1, M2, thereby having two
maps. M1 follows our original description: it expresses where
memory and data are or should be placed within the enclave
region—so the addresses belong to the enclave region. M2
is logically derived from M1 by transposing the address of
each map into an address in untrusted memory. So, the SMM
uses M2 to arrange in untrusted memory the state components
loaded from disk, and M1 to arrange them in trusted memory.
Instead, the state handler uses M2 to (un)load to/from untrusted
memory, and uses a private copy of M1 to ensure the correct
position of the maps in the enclave’s secure region.
3. Finally, as the attestation is performed by the state han-
VC3
9.2
[13]
Haven
23.1+O(103)#
[14]
SLoC×
103
LASTGT∗
library
7.7
(cid:5)
hypervisor
15.1 [25]
+1.9‡
(cid:2)
(cid:3)(cid:4)
24.7
SQLite
92.6
* based on XMHF-TrustVisor
# LibOS contains millions of lines of code
(cid:2)
(cid:3)(cid:4)
(cid:5)
100.3
‡ LASTGT core code and headers
TABLE II: TCB size breakdown (in source lines of code) and comparison.
SQLite is included as an example real-world application ported to LASTGT.
dler, the handler has to make sure that the service has indeed
terminated and will not modify the state (e.g., if re-executed)
during the attestation. We address this concurrency problem
by synchronizing the service code and the state handler using
shared variables transparently inside our linked library. Notice
that in a multi-core environment, such shared variables can be
managed in transactional regions with Intel TSX (Transactional
Synchronization Extensions), which is available on the Skylake
microarchitecture and compatible with SGX [29, 6.14].
7. EVALUATION
This section analyzes LASTGT’s Trustvisor-based imple-
mentation, quantifying its TCB, comparing it with the original