这也算是一种开源的回放，不过建议你向领导提一下开发运维平台方面的需求，这些命
这里用到的scriptreplay命令默认情况下是不会安装的，我直接放在邮件的附件里，你
登录并进行一系列操作以后，在定义的目录下会产生时间文件及日志文件，如图4-17
@bilg-49p15-master01
FAQ
xin.liu--
xin.liu--
xin.liu--
xin.liu--
fi
random
exec
ttv
script
0
script-t2>/var/log/
uzandom
.log
log
og
.og
图4-18
图4-17
图4-16
zero
xin.liu-
xin.liu-
xin.liu-
xin.liu-
1439.datexin.liu-
.date
date
date
date
---
## Page 95
Chroot环境还是可以满足当前的需求的。
掌握了Kerberos的使用与配置。目前公司虽说没有硬件的堡垒机和运维平台，但使用
4.6
的博客，日志中有对出现时间不同步、加密类型不对称、身份验证错误等问题的解决方案。
样的错误。
小写是敏感的，所以会导致主机名不同，从而造成Server notfoundinKerberos database这
要使用大写字母。因为DNS 在做反向解析的时候返回的字母是小写，而Kerberos又对大
因是DNS的反向解析写错了。这里要注意的是，当为主机添加principal的时候，一定不
principalname
定要将需要解析的域名放在第一位，不然就会报错。
这3个问题是我在使用过程中经常遇到的，也许你还会遇到其他的问题，可以登录我
通过刘老师的介绍，小鑫不仅对常见的认证系统有了一个初步的了解，而且还熟练
A：这个问题简单地说是DNS配置错误。Kerberos5里的主机名与key中的不同，原
Q:kinit （v5）:Hostname cannot be canonicalized when creating default server
A：出现这种情况是因为/etc/hosts文件里的解析配置错误。如果此文件被修改过，
Q: kinit (v5）: Cannot find KDC for requested realmwhile getting initial credentials
A：一般发生这样的原因是/etc/krb5.conf文件缺失或者配置错误。
小结
4.6
小结
---
## Page 96
工具，所以小鑫直接给刘老师发了封邮件。
企业互联网自动化之Puppet
还有一些其他的需求，麻烦您和我说一下Puppet和Salt中一些快速上手的例子吧，大致的
刘老师：
5.1.1
5.1
些操作实现自动化？不然需要花费太多的精力去做重复的事，还容易出错。”
第5
原理我已经自学过了。
现在我公司的服务器数量也多了，服务器初始化及程序部署也希望统一去执行，可能
小鑫记得当初请教刘老师时，刘老师在信中提到过他在做Puppet和 Salt这类自动化的
“好的，领导，我去办。”小鑫回了主管一句就开始做事了。
“小鑫，最近公司的业务发展比较快，服务器数量也比较多。你想想办法看看能否有
晚上小鑫收到了刘老师的邮件。
先感谢您上次和我说的那些方案，对我们公司目前的环境很有帮助。
您好！
经典之作
Puppet简介
章
---
## Page 97
登录数等。
可以使用Facter来查看一些信息，还可以根据用户的需要进行自定义。比如Puppet用户的
然后 PuppetPuppetd 把这些信息发送到服务器端。Facter和 Puppet 有很紧密的联系，除了
大小、IP地址等（它的作用就是搜集当前安装系统的环境变量信息的），如图5-1所示。
5.1.2
户、cron任务、软件包、系统服务等，而且采用的是C/S 结构。
固定的位置、统一格式的主机名等。相信公司已经有一些规范了。
另外如果你想统一部署系统配置及应用的话最好有一个规范，比如应用程序必须放在一个
小鑫：
首先，客户端Puppetd调用Facter，它会探测出服务器的一些变量，
Puppet是可以在Linux等常用平台上集中配置管理的一种程序，可管理配置文件、用
我先简单介绍一下Puppet，稍后会向你详细介绍Salt。目前，我主要使用Salt。
下面先来看看Puppet的工作原理。
上次和你说的方案和方法适用就好，不过还是建议你们公司能开发属于自己的平台。
你好！
Puppet工作原理
=>ext2,ext3,iso9660
bond0,bondo_1,bond0_2,bondo
H
x8664
fendor
ndor
图5-1
OW1
Dell Inc.
07/20/2012
5.1经典之作——Puppet
，如主机名、内存
87
---
## Page 98
88
件，这和file资源的template属性有关，目前vim模块中不需要。
我常用的vim插件），manifests是vim模块的主配置文件。templates目录包含erb模型文
files文件夹主要存放要往下分发的文件（vimrc是vim自定义vim的配置文件，另一个是
net/uid-10915175-id-3697173.html查看相关内容。下面先和你说一个比较简单的实例。
样Puppet 就安装好了。当然这仅仅是安装，并不能根据我们的需要来使用。
最新的版本。当时系统使用的是CentOS5.8）。
Puppet-server-2.7.19-1.el5来安装（这里我指定了版本，因为如果不指定的话，会默认安装
源也行。安装源后就可以直接用Yum来安装Puppet了。在服务器端可以使用yuminstall
5.2.1
5.2
控制每台或者每组客户端的执行时间，分散执行时间也可以减轻服务器端的压力。
修改客户端的配置文件来修改执行时间，但还是建议使用crontab来调用。这样可以精确
其他的代码不解析。
段内容进行解析。Facter送过来的信息可以作为变量进行处理，node所牵涉的代码才解析，
企业互联网自动化之Puppet
第5章
在/etc/puppet/modules/vim（如果没有，可自行创建）下创建如图5-2所示的文件夹，
在客户端安装也是同样的操作，不过使用的命令是yum install Puppet-2.7.19-1.el5。这
Puppet 的安装非常简单，你可以先安装好epel 源，
一些简单的配置我在这里就不啰嗦了，你可以直接登录我的博客http://blog.chinaunix.
这里要说明一下，Puppet后台运行的时候默认是30分钟执行一次，虽然说可以通过
（3）服务器再把客户端的执行结果写入日志。
（2）在客户端接收到伪代码之后就会执行，客户端再把执行结果发送给服务器。
（1）语法检查、生成一个中间的伪代码，然后把伪代码发给客户端。
解析分为以下几个过程：
服务器端的Puppetmaster 检测到客户端的主机名，匹配对应的 node配置，然后对这
Puppet实例详解
Puppet实例详解（一）：vim
，或者直接安装Puppet官方提供的
---
## Page 99
目录，如果不存在则创建。
directory。absent 用来检查文件是否存在，如果存在则删除。directory 用来指定目标是一个
于title，所以在很多时候name是可以省略的，如下面两个file类型的资源就没有name。
里的资源包括一个包类型和两个file类型。
以把所有的代码都写到init.pp文件中，也可以分成多个pp文件，init再去包含其他文件。
的文件，这是该模块的初始文件。导入一个模块的时候，会从init.pp开始执行。用户既可
资源。
name指定了要对哪个文件进行操作，这里是指要安装哪个包。默认情况下，name等
ensure=>present 表示这个资源一定要存在，如果不存在则新建。
Package表示包类型，大括号里的vim是tile，它的作用是让Puppet 能唯一标识这个
这里还要注意，ensure除了present以外还有其他几个参数值，包括常用的absent 和
首先是class（类）关键字，名称为vim。类的作用是把一组资源收集在一起使用。这
现在看一下vim模块的文件 init.pp，如图5-3所示（manifests文件夹里必须有一个 initpp
[root@master
file
file [/usr/share/vim/vim70/plugin/NERD_tree.vim:
pack
{"/root/.vimrc":
source
ehsure
source
ensure=>present,
ge
"vim":
templates:
init.pp
NERD_tree.vimvimrc
hanifests:
[root@master vim]# ls
图5-2
图5-3
5.2Puppet实例详解
89
---
## Page 100
90
的组存在。也就是说，user 依赖group 模块。
代码。
行成功后，再执行自己的资源或者类。
一下require。require 和before、after是Puppet 依赖关系的3个资源。
5-5所示。base.pp文件中绝大多数的内容与刚才介绍的 init.pp文件格式大体一样，主要看
它的安装包、配置文件和启动文件。
5.2.2
可同步，节点的配置稍后会介绍。
个资源一定要存在，第三行表示这个资源在服务器端的位置。配置好后，在客户端执行
企业互联网自动化之Puppet
第5章
require=>Group["www"]：表示如果要创建一个www用户，前提是必须有一个www
require=>Package["pcre-devel"]：表示只有安装了pcre-devel包以后才执行file类型的
base.pp文件里有两处require。
require表示当前资源或类被要求的资源或者类所依赖，需要被要求的资源或者类先执
package("nginx":
before是在某个资源之前执行，如下所示。
在Puppet里的依赖关系除了刚才介绍过的require，还有before和after。
manifests中包含Nginx模块的各个配置文件，先来看一下 base.pp文件的内容，如图
下面介绍另一个模块Nginx，如图5-4所示。在files里的文件就不多说了，主要看看
下面两个是file类型的资源，第一行表示这个资源需要放在什么位置，第二行表示这
Puppet实例详解（二）：nginx
manifests:
[rootemaster nginx]# ls
nginx.conf aginx.tgz ninitd
图5-4
---
## Page 101
楚，因为这两台计算机分属不同的家庭，这就是命名空间的作用。
就是说，图5-5这段代码是属于Nginx模块类名为base。
块中创建结构和组织的一种方法。前缀告诉Puppet 该类属于哪个模块，后缀则是类名。也
的意思是相同的。
打个比方，张家有台计算机，王家也有一台同样型号的计算机，但我们还是能区分清
另外如果你仔细看就会发现class定义的格式不同，这是使用：命名空间语法作为在模
file("/opt/nginx/conf/nginx.conf ":
after是在某个资源之后执行，如下所示。看起来和 before是相反的，但实际上所表示
after=>Package["nginx"],
before => File["/opt/nginx/conf/nginx.conf"],
root@master manifests]#
toote
SS
group{"www":
package[
nginx::base
iid
ensure
ba
("nginx":
P
hanagehome
"www":
"6000"
tmp/nginx.tgz",
present,
e9
图5-5
modules/
ngir
nx/nginx.tgz"
5.2Puppet实例详解
---
## Page 102
92
true表示管理脚本是否支持status参数，Puppet是用status参数来判断服务是否已经处于
那么这个命令就会被终止并作为运行失败处理。本例中设置的值为0，则表示没有执行时
（loglevel）来记录输出。本例中定义的是on_failure，意思是仅在命令返回错误的时候记录
path命令是自选项，依个人情况而定。
包。关于制做rpm包将在第6章进行介绍）。
command这段安装的代码（这段代码是对nginx.tgz的操作，这里并没有把nginx做成rpm
行命令。比如 install.pp 中的 creates，如果/opt 下没有 nginx目录或 nginx 文件，就执行
情况下，agent只要连接上master，就会自动执行对应的命令或脚本。如果重复执行这些对
exec来执行外部的命令或脚本，这样就涉及一个重复执行exec段代码的问题。因为默认
企业互联网自动化之Puppet
实现restart效果。
服务是否在运行。
运行中。如果不支持 status参数，Puppet会查找运行的进程列表中是否有服务名，以判断
码的作用主要是检测nginx服务的状态，如果nginx处于停止状态的话就将它启动。hasstatus=>
间限制。timeout的值是以秒为单位的
输出。
系统或应用造成影响就不好了，所以有一个好的方法是使用像creates的参数来避免重复运
第5章
hasrestart=>true表示管理脚本是否支持restart参数，如果不支持，就用 stop和 start
config.pp文件内容如图5-7所示。service.pp 文件内容如图 5-8所示。图5-8中这段代
timeout表示命令运行的最长时间。如果命令运行的时间超过了timeout定义的时间，
logoutput的作用是不需要记录输出。默认情况下会根据exec资源的日志等级
其中，path是命令执行搜索的路径。如果没有指定path，命令需要填写完整的路径。
接下来看一下 install.pp 中的内容，如图5-6 所示。这里主要介绍exec。Puppet是通过
ith-pere
on_failure,
ocal
/sbin
ngi
图5-6
---
## Page 103
5.2.3
service模块到init 里。因为模块比较多，所以这里使用命名空间还会显得很清晰。
sysctl模块的配置如图5-10和图5-11所示。通过这两张图可以看到，sysctl模块并不
init.pp文件内容如图5-9 所示。这段代码的意思是加载nginx的base、install、config、
Puppet实例详解（三）：sysctl
root@master manifests]# cat init.pp
include
nginx
ass nginx::configf
TRSI
ot@master manifests]#
file i"/etc/init,d/nginx":
file ("/opt/nginx/conf/nginx.conf"
otemaster
"rmpacks":
source
nginx::base,nginx::install,nginx::config,nginx::service
crue
manifests]# cat config.pp
oot"
"/bin/rm-rf/tmp/nginx*
Pr
图5-9
图5-8
图5-7
dules/nginx
es/nginx/ninitd"
/bin:/usr/sbin:/usr/bin",
nginx
5.2Puppet实例详解
conf'
93
---
## Page 104
94
/etc/sysctl.conf被更新后，就会执行/sbin/sysctl-p。
有当refreshonly和 subscribe或notify一起使用的时候才有意义。
收到其他的资源的一个事件时会重新执行。但是refresh参数允许用户定义更新不同的
复杂，相对比较简单。不过要注意其中的两个参数，即refreshonly 和 subscribe。
命令。
个命令依赖其他对象的时候，该参数才会有意义。
root@master sysctl]# cat manifests/init.pp
企业互联网自动化之Puppet
第5章
ass
说到这里想必你对图5-11中的内容都理解了吧，简单地说就是当客户端的文件
这里要注意的是，只有 subscribe 和 notify才可以触发行为，而不是require。所以只
还有一个和它类似的参数refresh。该参数是定义如何更新命令。默认情况下，当exec
refreshonly是一个更新机制，当一个依赖的对象改变的时候命令才会被执行。仅当这
exec
file
cemaster
refreshonly => true
ensure => present,
sysctl]#
"root"
"/sbin/sysctl-p",
owner =>root,group =>root,
[root@master sysctl]#
init.pp
manifests:
sysctl.conf
[root@master
图5-11