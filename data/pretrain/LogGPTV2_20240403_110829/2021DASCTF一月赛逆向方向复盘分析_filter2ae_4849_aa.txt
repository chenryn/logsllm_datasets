# 2021DASCTF一月赛逆向方向复盘分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## obfu
###  主逻辑分析
首先根据字符串锁定主函数。
猜测程序先将输入`input`通过`encrypt`函数加密，结果存储到`output`中，在后面通过`memcmp`函数进行check，而比较的另一项`res`可能与输入无关，是一个定值。
根据提示字符串`Please input your serial number to recover your
flag:`，结合后面代码打开加密文本flag.enc并写入数据到flag.txt中，则check成功后，程序就会根据我们的`input`对flag.enc数据解密，输出flag。而解密函数`sub_407B90`根据findcrypt插件能发现使用了AES加密的S盒，应该是进行AES加解密。结果在flag.enc中，但密钥，即输入是未知的。那么主要任务就是找到正确的`input`。
###  混淆部分
往后看，有一堆疑似用来混淆的while、if语句。其他函数中也有大量的类似混淆，符合题目名obfu。
查看这些`dword`数据，可以发现都是bss段的数据，即存放程序中未初始化的全局变量和静态变量的一块内存区域，在程序执行之前会自动清0。查看交叉引用可以发现并没有再进行赋值，则这些数据全为0。
诸如这样的混淆别处也有，看着不爽可以选择进行patch。
首先想到一种方法。直接查看对应代码汇编指令，根据逻辑用脚本对一整块进行patch。但这样很慢而且容易出错，而且再次反编译结果有可能逻辑出现问题。
因此再考虑到这些混淆代码都是while或if类型语句，汇编指令应该也类似，可以根据混淆代码的汇编指令特征写脚本进行patch。这种方法也不是很好，反编译结果虽然一致但有些指令的具体实现不一样，速度虽然会快一点，但逻辑还是可能出错。
之后尝试将bss段的这些`dword`全部`change
byte`为0，想让ida自动重新反编译，但似乎因为ida不能判断出这些数据是否后面被改变，所以这种方法行不通。
则最后考虑直接将所有使用这些`dword`的`mov`指令，直接patch为`mov exx, 0`。这样逻辑不会出错，也可以用脚本快速进行patch。
如对main函数中的while混淆，可以看出将前面`dword_42829c`改为0逻辑即可判断正确。
则查看汇编。
可以手动`ctrl+alt+k`用`keypatch`进行patch，其他地方类似。再反编译即可。
不过由于一个函数里大片连续地址中用的`dword`数据是一致的，我们可以考虑用脚本进行patch。
如这里我们复制机器码中的9c 82 42 00，`alt+b`进行搜索。
可以看出只有`ecx`和`edx`两种格式。对于我们应该进行patch（替换）的数据（机器码），可以先用keypatch将其改为目标汇编指令`mov
exx,0`，从而得到对应的替换机器码。
写脚本搜索原汇编指令机器码并进行替换即可。
    from idaapi import *
    import re
    start = ask_addr(0x0, "start address to set nop:")
    print("start address:%08x"%(start))
    end = ask_addr(0x0, "end address to set nop:")
    print("end address:%08x"%(end))
    origin_pattern = [b'\x8b\x15\x9c\x82B\x00',b'\x8b\r\x9c\x82B\x00',b'\x8b\x15\xa0\x82\x42\x00',b'\x8B\r\xa0\x82\x42\x00',b'\x8b\x15\xbc\x82\x42\x00',b'\x8b\r\xbc\x82\x42\x00']
    patch_pattern = [b'\xba\x00\x00\x00\x00\x90',b'\xb9\x00\x00\x00\x00\x90',b'\xba\x00\x00\x00\x00\x90',b'\xb9\x00\x00\x00\x00\x90',b'\xba\x00\x00\x00\x00\x90',b'\xb9\x00\x00\x00\x00\x90']
    length = end-start+1
    buf = get_bytes(start, length)
    for i in range(len(origin_pattern)):
        buf = re.sub(origin_pattern[i],patch_pattern[i],buf)
    patch_bytes(start,buf)
###  加密过程分析
之后分析`input`处理过程。跟进`encrypt`函数。
首先，根据循环条件猜测`input`长度应该就是32（少了直接在循环中退出，多了也用不上），限定了输入只能为十六进制的16个字符，并每两个字符为一组转换为数据。
类似
    string = '12345678'
    d = bytes.fromhex(string)
之后对得到的16个数据再进行处理。
即所有数据二进制串循环右移3位。
之后分配四组内存空间，调用`sub_41DAA0`函数。跟进去。
可以看出调用`malloc`函数后应该就退出了。实质就是个`malloc`函数。
继续分析，可以看出调用的三个函数`sub_402EB0`、`sub_403000`和`sub_403620`都对处理过的`data1`数据无关，则猜测产生的`buf_dword_8`数据应该是固定的。在进行异或处理后对两个`buf_dword_4`数据进行赋值。
通过`findcrypt`插件我们可以知道`sub_402EB0`函数中是赋值了sha256加密算中的8个初始哈希值。则可猜测这三个函数是对字符串`admin`进行了sha256加密。
下断点查看数据。
与我们用脚本写的sha256加密字符串`admin`的结果是一致的。
    import hashlib
    s = 'admin'
    print(hashlib.sha256(s.encode()).hexdigest())
    # 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
则这里就是将字符串`admin`sha256加密后进行异或处理，得到一组固定数据。分为两组，每十六个字节分别转储。
继续分析。这里分配16个字节空间，之后调用函数`sub_402B70`，根据参数，猜测这里是依据我们的输入生成的data1数据，以及前面sha256加密异或处理后的前16个字节，生成16个字节数据。
跟进分析。可以发现for循环次数就是`data1`的长度16，且有`%256`操作，可以看出应该是对data1进行rc4加密处理。则前面的`sub_402A00`函数应该就是生成密钥流，且储存在地址`0x428020`。
直接在异或处下断点，动调得到密钥流。
    rc4_flow = [236, 251, 65, 89, 249, 231, 139, 18, 27, 63, 80, 130, 240, 163, 68, 43]
之后继续分析前面的`encrypt`函数。
`sub_406A60`函数对`buf_dword_4`进行初始化赋值为4、4、10和16。
而后的`sub_408B70`函数参数涉及到了之前数据rc4加密后的结果，以及前面经过sha256加密异或得到的固定数据。返回值就是我们这整个`encrypt`函数的加密结果。应该是对rc4加密结果又做了处理。通过`findcrypt`插件我们已经可以发现这个函数中引用了`AES`的S盒，猜测是将rc4加密结果（16字节）作为明文，sha_res1（16字节）和sha_res2（16字节）分别作为密钥和初始化向量，进行`AES`相关操作。
跟进具体分析。
`key_expansion`函数的参数是sha_res1和176个字节的空间，函数中循环根据是否为4的倍数进行不同操作，且用到了AES的S盒，则这个函数就是进行密钥扩展。可知参数sha_res1即为密钥。
密钥扩展后的循环只进行一次，毕竟明文就只有16字节。
而后调用两个函数，跟进`sub_407D70`，我们可以发现具体使用的是AES加密的逆S盒（inverse
S-box），且之后的函数`sub_4089A0`进行异或操作，通过逆S盒以及最后先处理再异或的顺序，可以判断出这里进行的是AES的CBC模式解密，key就是sha_res1，iv就是异或函数的参数sha_res2。
至此`encrypt`函数分析完毕，加密过程大致如下。
    input = bytes.fromhex(input)
    ror(input,3)
    rc4_encrypt(input)
    aes_decrypt(input,key=sha_xor_res1,iv=sha_xor_res2)
回到主函数。找check数据。
在函数`sub_404430`中发现了md5加密算法的4个链接变量的数据初始化，则推测这里是对字符串`admin`进行了md5加密，
动调发现结果一致，确实是这样。
    import hashlib
    s = 'admin'
    print(hashlib.md5(s.encode()).hexdigest())
    # 21232f297a57a5a743894a0e4a801fc3
###  exp
至此分析完毕，逆向该加密处理过程即可得到正确输入。
    import hashlib
    from Crypto.Cipher import AES
    rc4_flow = [236, 251, 65, 89, 249, 231, 139, 18, 27, 63, 80, 130, 240, 163, 68, 43]
    s = 'admin'
    sha_res = bytes.fromhex(hashlib.sha256(s.encode()).hexdigest())
    res = bytes.fromhex(hashlib.md5(s.encode()).hexdigest())
    sha_res = list(sha_res)
    sha_xor_res = [sha_res[0]]
    for i in range(1,len(sha_res)):
        sha_xor_res.append(sha_res[i] ^ sha_res[i-1])
    key = bytes(sha_xor_res[:16])
    iv = bytes(sha_xor_res[16:])
    aes = AES.new(key,mode=AES.MODE_CBC,iv=iv)
    aes_encrypt_res = aes.encrypt(res)
    rc4_decrypt_res = []
    for i in range(len(aes_encrypt_res)):
        rc4_decrypt_res.append(aes_encrypt_res[i]^rc4_flow[i])
    serial_number = [0]*32
    for i in range(len(rc4_decrypt_res)):
        serial_number[i] = (((rc4_decrypt_res[i]>5))
        print(hex(serial_number[i])[2:].rjust(2,'0'),end='')
    # 653b987431e5a2fc7c3d748fba0088690x8e
输入正确序列后即可输出flag。
## babyre
###  主逻辑分析
分析main函数，程序首先判断输入长度为32位，之后调用`GetModuleHandleW`函数获取`ntdll`动态链接库模块的句柄。然后调用`GetProcAddress`函数获取`ntdll`动态链接库中的导出函数`ZwLoadDriver`的地址。
之后将input转储到v10，并对v9进行赋值，查看变量声明处可以知道v9、v10是连续的空间，相当于在input前加添加了两个16比特的值。并将其作为参数，调用`ZwLoadDriver`函数，并对返回值检测。最后将v10与已知数据进行check，一致即可。
而整个过程中对input进行操作的地方只有`ZwLoadDriver`函数，但这个函数用于加载驱动，显然不是一个加密函数，但查看最后check时res的数组，可以发现有很多不可打印字符，肯定还是对输入进行加密了，那么猜测系统调用`ZwLoadDriver`函数应该被hook了，实际运行时执行的是别的加密函数。
###  hook分析