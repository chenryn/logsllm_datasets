### Crypt and Reveal the Relevant N from OV's Show Protocol Transcript

The system may include several de-anonymizing organizations, from which a user (U) can choose. By including a de-anonymization condition, U can specify under what circumstances they consent to the transcript being de-anonymized. When deemed necessary by the verifying organization (OV), OV can send the transcript to the de-anonymizing organization (OD). OD then determines if the specified condition is met and, if so, de-anonymizes the transcript and returns the relevant identifier (N) in a local de-anonymization process.

Global de-anonymization employs a similar technique but requires the existence of a special credential-issuing organization, known as the Root Pseudonym Authority. This authority issues credentials only on pseudonyms for which it knows the mapping to a real user identity. Typically, a user has a single root pseudonym with the Root Pseudonym Authority and one corresponding root credential. Additional pseudonyms or credentials with the Root Pseudonym Authority would be linkable to the user.

### Showing a Credential Relative to a Pseudonym

Using this option, a user (U) who has obtained a credential (C) from an issuing organization (OI) and is known under a pseudonym (NV) to a verifying organization (OV) can prove possession of C to OV. Additionally, U can demonstrate that the pseudonym to which C was issued belongs to the same user as NV. More specifically, U proves that the same master secret key (SU) linked to NV is also linked to the credential C and the pseudonym (NI) on which C was issued.

This option is mandatory for U to convince OV of possessing multiple credentials. Without this, two different users, each with a different credential, could each show their credential to OV, leading OV to believe it had interacted with a single user possessing both credentials.

Furthermore, this option is essential when showing a credential is a prerequisite for obtaining another credential. For example, if U wants to obtain a new credential from OVI, and OVI requires U to show a credential from OI, U must first register a pseudonym (NVI) with OVI and then show the OI credential. If U does not have the required credential, they might try to collaborate with another user (U0) who does. However, if OVI does not require U to show the OI credential relative to a specific pseudonym, U could obtain the new credential without fulfilling the prerequisite. By requiring the OI credential to be shown relative to NVI, OVI ensures that the same user who showed the OI credential receives the new OVI credential.

### Credential System Primitives

In this section, we describe the representations for pseudonyms and credentials, define the representations of credential attributes and protocol options, and outline the high-level primitives of the pseudonym system.

#### 3.1 Pseudonyms

A pseudonym (N) of a user (U) with an organization (OI) cannot be mapped to a shared data representation between U and OI. U has a secret value (Ns) attached to each pseudonym, distinct from the user’s master secret. Knowledge of this secret value is required for any operation involving the pseudonym, such as obtaining a credential. Thus, the credential system needs different representations for a pseudonym, depending on the role of the actor (user or organization).

- **UserNym(N, Ns, O)**: A representation of a pseudonym for the user.
- **OrgNym(N, X)**: A representation of a pseudonym for the organization, where X includes information obtained during registration and up-to-date information about credentials issued to N.

The user’s master secret (SU), though essential for using UserNym, is common to all of the user’s pseudonyms and is not part of the UserNym representation. The statement X is application-specific and is not explicitly supported by the core pseudonym system.

During pseudonym registration, O does not authenticate to U. While this is not a security threat, as the registration does not reveal any information about U, SU, or Ns, registering a pseudonym with an impersonator of O can lead to denial of service. Therefore, every O is assumed to have a certificate to authenticate communication with users.

#### 3.2 Credentials

Credentials have different representations at the user and organization sides. When a credential (C) is issued by OI on pseudonym N, the user and organization store different values associated with it.

- **UserCred(UserNym, C, T, OI)**: Represents the credential for the user.
- **OrgCred(OrgNym, T)**: Represents the credential for the organization.

**CredInfo(PKI, MultiShow, Expiration, Subtype, Age, ...)**: Includes the credential type, issuing key, and other attributes.

#### 3.3 CredShowFeatures

The parameters of a credential showing are expressed in a CredShowFeatures parameter array. The parameter RelNym indicates whether the show is relative to a pseudonym known to the verifying organization. Another parameter contains de-anonymization information, specifying whether, under which condition, and by which de-anonymizing organization (OD) the show transcript will be de-anonymizable:

- **CredShowFeatures(RelNym, [PKD, ConditionLocal], [PKD, ConditionGlobal])**: Specifies the conditions for local and global de-anonymization.

#### 3.4 Protocol Primitives

Figure 3 lists the basic protocol primitives for registering pseudonyms, issuing and verifying credentials, verifying double-spending of one-show credentials, and de-anonymizing. Primitives invoked by a user (respectively, organization, de-anonymizing organization) carry the prefix U (O, DO).

- **U registerNym**: Registers a pseudonym.
- **U getCredential**: Obtains a credential.
- **U showCredential**: Shows a credential.
- **O verifyCredential**: Verifies a credential.
- **DO deAnonymize**: De-anonymizes a transcript.

In user-invoked primitives, the identifier of the targeted organization (OI, OV) is not listed as a parameter; it is assumed that the calling application has set up a communication channel with the correct organization.

### Synchronous Interfaces

To enable easy programming of synchronous applications, the synchronous interfaces (Figure 5) UserSyncNymSystem and OrgSyncNymSystem take care of signaling meta-information and driving the protocol state machines. They require the respective UserApp and OrgApp to pass a communication object (ClientCommSession, ServerCommSession). This allows the calling application to decide whether to create a new communication session or reuse an existing one, providing maximal flexibility when integrating idemix as an authentication mechanism into an existing application.

### DeAnonOrgNymSystem

A de-anonymizing organization (OD) does not carry out interactive protocols. It may receive a transcript to be de-anonymized from any out-of-band communication channel and may operate in batch or asynchronous mode. Therefore, DeAnOrgNymSystem only has an asynchronous interface (Figure 5): it provides methods for creating the organization and de-anonymizing a transcript.

### Communication

ClientCommSession and ServerCommSession are defined as interfaces offering generic read and write methods. The calling applications are responsible for passing a communication object.

### Additional Primitives

Additional primitives, such as generating key pairs and master secrets, are described in the next section.

### The Idemix Prototype

In this section, we describe the design and implementation (Java) of the idemix prototype. The core of the idemix system is the NymSystem package, as described in [5].