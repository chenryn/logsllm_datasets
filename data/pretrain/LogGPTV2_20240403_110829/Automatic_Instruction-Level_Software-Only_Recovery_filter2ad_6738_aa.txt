title:Automatic Instruction-Level Software-Only Recovery
author:Jonathan Chang and
George A. Reis and
David I. August
Automatic Instruction-Level Software-Only Recovery
Jonathan Chang
George A. Reis
David I. August
Departments of Electrical Engineering and Computer Science
Princeton University
Princeton, NJ 08544
{jcone,gareis,august}@princeton.edu
Abstract
As chip densities and clock rates increase, processors are
becoming more susceptible to transient faults that can affect
program correctness. Computer architects have typically ad-
dressed reliability issues by adding redundant hardware, but
these techniques are often too expensive to be used widely.
Software-only reliability techniques have shown promise in
their ability to protect against soft-errors without any hard-
ware overhead. However, existing low-level software-only
fault tolerance techniques have only addressed the problem
of detecting faults, leaving recovery largely unaddressed. In
this paper, we present the concept, implementation, and eval-
uation of automatic, instruction-level, software-only recov-
ery techniques, as well as various speciﬁc techniques rep-
resenting different trade-offs between reliability and perfor-
mance. Our evaluation shows that these techniques fulﬁll the
promises of instruction-level, software-only fault tolerance by
offering a wide range of ﬂexible recovery options.
1
Introduction
In recent decades, microprocessor performance has been
increasing exponentially, due in large part to smaller and
faster transistors enabled by improved fabrication technology.
While such transistors yield performance enhancements, their
lower threshold voltages and tighter noise margins make them
less reliable [3, 14, 26], rendering processors that use them
more susceptible to transient faults. Transient faults are in-
termittent faults caused by external events, such as energetic
particles striking the chip, that do not cause permanent dam-
age, but may result in incorrect program execution by altering
signal transfers or stored values.
When cost is not an issue, system designers typically
address transient faults by relying on large amounts of re-
dundant hardware [8, 27, 32, 33]. While effective, this re-
dundancy is prohibitively expensive for arenas outside of
the high-end, high-availability market, rendering these tech-
niques impractical for the desktop and embedded computing
markets. For example, protecting the register ﬁle with ECC
has shown to be extremely costly in terms of both perfor-
mance [28] and power [19].
To provide protection when hardware costs are prohibitive,
software-only approaches have been proposed as alterna-
tives [15, 17, 25, 29].
In particular, techniques such as
SWIFT [23] have demonstrated that high reliability can be
achieved through a software-only fault-detection solution
which degrades performance modestly. These software-only
reliability techniques are valuable because they do not require
any hardware support. They can be applied to future designs
without any hardware changes or even to currently deployed
systems. Software-only approaches also allow for software-
control; the user, the application, or the system may dynami-
cally reconﬁgure the trade-off between reliability and perfor-
mance after the system has been deployed to best suit varying
conditions.
However, detecting faults is only part of the path to full
fault tolerance. In order to truly be reliable, a system must
also be able to recover from faults. Until now, all proposed
low-level software-only techniques of which we are aware
have addressed only fault detection, not fault recovery. Al-
though this prevents faults from corrupting data, it does not
allow the application to correctly run to completion in the
presence of a fault.
In this paper, we present three novel, software-only re-
covery techniques at the compiler level which offer varying
levels of protection. The ﬁrst is SWIFT-R, which is based
on SWIFT [23], an existing software-only detection scheme.
The SWIFT-R technique intertwines three copies of a pro-
gram and adds majority voting before critical instructions of-
fering near-perfect reliability for those applications that re-
quire it.
The second technique we present
is TRUMP (Triple
Redundancy Using Multiplication Protection), which inter-
twines the original program with an AN-encoded version
of the program. Section 4.1 will give an overview of AN-
encoding, a more efﬁcient representation of redundant infor-
mation than simple triplication. At certain points in the pro-
gram, the original and AN-encoded versions are compared
and recovery code is triggered if a mismatch is detected. The
AN-encoding of TRUMP allows recovery although only two
versions of the program are computed. Although TRUMP’s
AN-encoding is not as general as SWIFT-R’s triple-modular
redundancy, rendering it unable to protect certain portions
of programs, TRUMP’s redundant computation is much less
onerous, providing an alternative for applications that cannot
afford the performance penalty of SWIFT-R, but could bene-
ﬁt from moderate protection.
The last technique, MASK, dynamically enforces invari-
ants that can be proved true statically. By merely assert-
ing statically known facts at various points in the program,
MASK is able to improve the reliability of the system with-
out adding redundancy. The MASK technique is more
lightweight than the other two techniques but can still sub-
stantially increase reliability in some cases.
We implemented SWIFT-R, TRUMP, and MASK in a
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:54 UTC from IEEE Xplore.  Restrictions apply. 
compiler and evaluated them in isolation, as well as in inter-
esting hybrid combinations. The evaluation shows that these
techniques offer a wide spectrum of viable options for fault-
tolerance that can be deployed on existing systems without
any hardware additions. These techniques range from the
lightweight MASK which does not incur any signiﬁcant per-
formance penalty to SWIFT-R which incurs a 99% increase in
execution time. Similarly, these techniques reduce the num-
ber of incorrect program executions in the presence of faults
from 1.24% for the lightweight technique to 89.39% for the
heavyweight technique.
This paper contributes the concept, implementation, and
evaluation of instruction-level, software-only recovery tech-
niques. These techniques will allow designers to increase re-
liability with reasonable performance costs without having to
design or deploy new hardware.
The rest of the paper is organized as follows. Section 2
introduces the fault model and terminology that will be used
in the remainder of this paper, and also gives a description of
the SWIFT technique. Sections 3, 4, 5 describe the SWIFT-
R, TRUMP, and MASK techniques respectively. Section 6
discusses various hybrid combinations of these techniques.
Section 7 provides an experimental evaluation of the perfor-
mance and reliability of each of the techniques. Section 8
describes related work. The paper concludes with Section 9.
2 Background
This section ﬁrst describes the fault model assumed
throughout this paper.
It then brieﬂy describes the SWIFT
fault-detection technique (Section 2.2), the basis of several
recovery techniques presented in this paper. SWIFT has been
shown to protect against most faults in various structures in-
cluding the register ﬁles and the instruction buffer [24]. Note
that for the remainder of the paper, we will not concern our-
selves with SWIFT’s control-ﬂow protection technique which
is used to detect faults that corrupt the program counter. It is
largely orthogonal to SWIFT’s instruction-duplication tech-
nique and can be implemented on top of any of the techniques
that follow. For the purposes of this work, this paper assumes
that no faults occur to the program counter register.
2.1 Fault Model
Throughout this paper, the commonly used single-event
upset (SEU) fault model will be assumed. In the SEU model,
exactly one bit-ﬂip in one state element will occur through-
out a particular execution of the program. The techniques
presented also tolerate a wide variety of multi-bit errors, al-
though we do not quantify this effect.
In order to evaluate the reliability of a system, faults are
classiﬁed according to their effect on the ﬁnal output of the
program in the presence of the fault. If the fault causes the
execution to be abnormally terminated due to a segmentation
fault, the fault is categorized as SEGV. If the program com-
pletes execution, but does not produce correct output, then
the fault is categorized as an SDC (silent data corruption). Fi-
nally, if the program completes execution and the output is
correct, the fault is categorized as unACE (unnecessary for
architecturally correct execution) [13]. In this paper, the “re-
liability” of a system refers to the percentage of faults that are
ld r3 = [r4]
add r1 = r2, r3
st [r1] = r2
(a) Original Code
1:
2:
3:
4:
5:
br faultDet, r4 != r4’
ld r3 = [r4]
mov r3’= r3
add r1 = r2, r3
add r1’= r2’,r3’
br faultDet, r1 != r1’
br faultDet, r2 != r2’
st [r1] = r2
(b) SWIFT Code
Figure 1. SWIFT Duplication and Validation.
unACE, since SEGV and SDC faults are both deleterious.
2.2 SWIFT
The SWIFT-enabled compiler duplicates a program’s in-
structions and schedules them along with the original instruc-
tions in the same execution thread. The original and duplicate
versions of the instructions are register-allocated so that they
do not interfere with each other. At certain synchronization
points in the combined program, validation code is inserted
by the compiler to ensure that the data produced by the origi-
nal and redundant instructions are equal.
Since program correctness is deﬁned by the output of a
program, the validation checks must be inserted before any
instruction which may potentially generate output. There are
two principal methods for user-level code to produce output:
memory-mapped I/O and system calls. We ﬁrst address the
issue of memory-mapped I/O.
If all output is produced via memory-mapped I/O, then a
program has executed correctly if all correct loads and stores
in the program have executed correctly. Under this conserva-
tive assumption, data must be validated before all loads and
stores. By the same token, the redundancy must also avoid
adding any extra stores and loads, lest any unwanted I/O be
performed. The lack of redundancy in memory accesses typ-
ically does not signiﬁcantly impact reliability, since mem-
ory and caches are often protected against transient faults by
ECC.
Figure 1 shows a sample code sequence before and after
the SWIFT fault-detection transformation. The add instruc-
tion is duplicated and inserted as instruction 3. The duplicate
instruction uses redundant versions of the values in registers
r2 and r3, denoted by r2’ and r3’ respectively. The result
is stored in r1’s redundant version, r1’.
Instructions 1 and 2 are inserted to validate and repli-
cate the data of the load instruction. As mentioned earlier,
program correctness can only be ensured if all loads and
stores execute correctly. In the case of load instructions, that
amounts to verifying the address of the load. Instruction 1 is
a comparison inserted to ensure that the address of the subse-
quent load matches its duplicate address. Furthermore, since
a redundant load instruction cannot be inserted as the load
may be uncacheable [22, 24], to set r3’, the technique must
ﬁnd an alternative to redundantly executing the load. In this
case, instruction 2 accomplishes this by simply copying the
result of the load instruction into its duplicate register.
The values of r1 and r2 are used at the store instruction
at the end of the example. Since it is necessary to avoid stor-
ing incorrect values into memory and to avoid storing values
to incorrect addresses, the technique must check that both the
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:54 UTC from IEEE Xplore.  Restrictions apply. 
call otherFunc
br r1 == r2, label
1:
2:
3:
4:
br faultDet, P0 != P0’
call otherFunc
mov R0’= R0
br faultDet, r1 != r1’
br faultDet, r2 != r2’
br r1 == r2, label
(a) Original Code
(b) SWIFT Code
ld r3 = [r4]
add r1 = r2, r3
Figure 2. SWIFT Branch and Function Call Val-
idation.
st [r1] = r2
(a) Original Code
1:
2:
3:
4:
5:
6:
7:
majority(r4,r4’,r4’’)
ld r3 = [r4]
mov r3’ = r3
mov r3’’= r3
add r1 = r2, r3
add r1’= r2’,r3’
add r1’’= r2’’,r3’’
majority(r1,r1’,r1’’)
majority(r2,r2’,r2’’)
st [r1] = r2
(b) SWIFT-R Code
address and value match their redundant copy. If a difference
is detected, then a fault has occurred and the system is no-
tiﬁed via instructions 4 or 5. Otherwise, the store proceeds
normally.
Although in this example program an instruction is imme-
diately followed by its duplicate, an optimizing compiler (or
dynamic hardware scheduler) is free to schedule the instruc-
tions to use additional available instruction-level parallelism
(ILP) thus minimizing the performance penalty of the trans-
formation.
Checking at loads and stores is sufﬁcient to protect against
a large number of faults. However, as mentioned earlier, pro-
grams may also generate output via system calls, or more
generally, via external libraries. Since external code may not
have any protection, the best SWIFT can do is verify that all
of the inputs to the function or system call are correct. There
are two classes of inputs arguments: register and memory.
Parameters passed through memory do not need to be
rechecked since they will have already been checked via the
store that placed them in memory. Thus, the only parameters