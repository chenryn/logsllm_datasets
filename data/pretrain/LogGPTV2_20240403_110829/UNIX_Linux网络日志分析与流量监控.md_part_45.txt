SQLServer使用TabularData Stream协议来进行网络数据交换，如果不加密的话，所有
SQLServer的认证模式有Windows身份认证和混合身份认证两种。如果数据库管理
SQLServer数据库系统本身没有提供网络连接的安全解决办法，但是Windows 提供了
（6）对网络连接进行IP限制
在默认情况下，SQLServer监听1433端口，虽然SQLServer配置时可以把这个端口改
（5）不要让人随便探测到TCP/IP端口
（4）使用协议加密
审核数据库登录事件的“失败和成功”，
（3）加强数据库日志的记录
由于SQLServer不能更改系统管理员用户名称，也不能删除这个超级用户，所以，我们
（2）
Usemaster
使用安全的账号策略
password is null
Selectname,Passwordfromsysloginswhere
在实例属性中选择“安全性”，将其中的审核级
员
---
## Page 262
如下所示：
元字符，如单引号、分号（;）和双减号（--）等。
特殊构造的语句来实现的，因此要提取其攻击特征，只需检查提交语句中是否包含任何SQL
制定，可以覆盖绝大多数注入攻击。SQL注入攻击是通过以类似Web访问的方式提交带有
8.3.1SQL注人攻击的正则表达式规则
通常可使用Snort这种经典的开放源代码的入侵检测工具结合针对性的规则实现。
这种高级产品。因此，针对服务器环境来配置自己的SQL注入的检测与防护很有必要，
滤产品（例如WAF）近年部署价格不菲，由于应用环境的复杂性，很多企业仍然没有部署
防火墙等安全措施，但对于SQL注入攻击仍然收效甚微的原因。而工作于应用层的内容过
的防火墙等安全措施对SQL注入攻击显得无能为力，这也就是许多服务器虽然采取了配备
服务器是有可能的，这样排除了许多需要更高访问特权的开发技术。
服务器不能运行在一个高特权的状态下。根据你的服务器配置，在最低用户权限下运行SQL
来难，但是，这给SQL服务器防止未授权的登录提供了最好的保护。另外，还要注意 SQL
连接字符串直接放到.asp 文件中。如果别人得到这个文件，那么你所有的连接信息都泄露
程执行，所有的用户输入必须遵从被调用的存储过程的安全上下文。
单或查询字符串输入的长度。最后，通过在数据库设定特定的存储过程，只允许特定存储过
表达式对 and、select、update、chr、delete、insert、set 等关键字进行过滤。其次，要限制表
代码时就需要考虑这个问题。首先，用户的输入不能直接嵌入到SQL语句中，必须用正则
需要以后进行更多的安全维护。
还是要加强内部的安全控制和管理员的安全培训，而且安全问题是一个长期的解决过程，还
预防措施
8.3
怎样防止 SQL注入呢？单纯依靠系统管理员恐怕难以实现这一目的。开发人员在编写
通过检测元字符是否存在于提交的参数中可预防SQL注入攻击。最基本的正则表达式
利用Snort支持正则表达式的精确匹配与模糊匹配能实现各种复杂条件下的过滤规则的
SQL 注入攻击是针对TCP 80 端口的类似正常访问来实现，因此传统的工作于网络层
另外，还要对服务器配置做一些修改。就像我们看到的 login.asp 文件，开发者把所有的
“”代表或，相当于or。
经过以上的配置，可以让 SQL Server 本身具备足够的安全防范能力。当然，更主要的
x1/#(%(-1(%
利用OSSIM监测SQL注入
“0”是为了将特征字符串相对集中。
“-”是MySQL中的特殊字符。
“%23”是井号#的16进制表示。
“%27”是单引号的16进制表示。
第8章SQL注入防护案例分析239
路
M122
---
## Page 263
192.168.150.182。
图8-3所示是捕捉的一次对服务器的SQL 注入攻击的安全事件。攻击源 IP 为
8.3.2用OSSIM检测SQL注人
此可构造如下正则表达式：
“1'or2>1”，并提交以查看返回的结果是否正确，从而发现对象是否存在SQL注入漏洞，对
240
在系统中架设好OSSIM系统后，启用IDS便可用以监测网络中出现的SQL注入攻击，
SQL注入的前期操作通常会用单引号构造一个简单语句，如“1or1=1”，以及
“（1%27)”表示匹配单引号。
●“\w*”表示一个或多个大小写字母或数字。
解释：
attack;sid:9008;rev:5;)
Paranoid";flow:to_server,established;uricontet:p";pcre:/%27)/(--)%23)#)/i"; classtype:Web-application-
采用上述正则表达式的snort规则如下：
UNIX/Linux网络日志分析与流量监控
Search|Clear
odny
ee frame
alert tcp $EXTERNAL _NET any ->SHTTP_SERVERS SHTTP_PORTS (msg:"SQL Injection
Security Eve
Aw*((%27)C)((%6F)/(%4F))((%72)r(%52))/ix
x表示忽略模式中的空格。
Last24h|L2 days
i表示忽略字符大小写。
图8-3OSSIM发现SQL注入日志
2013-03-2611:02:44
11:02:44
192.168.150.182
.150
META
182
22
nvaur空
102YM
stration!
中
Real Time
PAYLOA
102
Asset
P
LAYE
---
## Page 264
则应使用起始于一百万的SID。
改了一个规则，把SID 加上一百万，这样可以与起源保持一致。如果你创建了一个新规则，
放在/etc/suricata/rules 目录中。
网络攻击的规则。图8-6显示了防SQL注入的规则。另外对于OSSIM 4.2以上系统，规则
有DoS/DDoS 的规则、扫描服务器规则、SQL 注入、shellcode规则等，几乎囊括了所有常见
8.3.3
在OSSIM系统中具有各式各样的Snort 规则，它们存放在目录/etc/snort/rules中，其中
Snort 保留了所有小于一百万的数字用于官方规则。SID 是Snort 规则的 ID，如果你修
注意：
图8-5显示，OSSIM统计出这样的SQL攻击多达244次，而且间隔时间也非常短暂。
选择“ossec：SQL Injection attempt"，能发现更加详细的分析，如图 8-4所示。
口
OSSIM系统中的Snort规则
osc.SQL
ents
mone
192.168.150.102
nject
8
2013-03-26
84,357 ttaleven
图8-5用OSSIM检查出SQL攻击
2013-03-26
2013-03-26
2013-03-2611:35:06
图8-4获取的详细日志
11:35:0
11:35:
fenvaul
ven
ex1511
192
第8章SQL注入防护案例分析241
168.150
.150
Rale:31103 (leve1
---
## Page 265
的操作，用不同的用户账户执行查询、插入、更新、删除操作，可以防止原本用于执行
助于保护整个系统尽可能少受到入侵者的危害。通过限制用户权限，隔离了不同账户可执行
8.4.1服务器端的安全配置
善导致的。因此对SQL注入攻击的防范也应当从这几个方面来入手。
击中最常见的一种形式，因此网站对SQL注入攻击的防护也显得尤为重要。SQL注入漏洞
242UNIX/Linux网络日志分析与流量监控
理数据库。
SELECT命令的地方却被用于执行INSERT、UPDATE或DELETE命令。
的产生通常是由于程序员对注入攻击手段不了解，数据验证和过滤不严格，服务器设置不完
键风险排名可以看出，对网站安全威胁最大的风险是注入攻击。而SQL注入攻击是注入攻
8.4LAMP网站的SQL注入预防
2）用户账号安全法则。禁用默认的rot管理员账号，新建一个复杂的用户名和密码管
根据开放式Web应用程序安全项目（OWASP）组织2010年发布的最新Web应用十大关
3）内容加密。有些网站使用SSL/SSH数据加密，但是该技术只对数据传输过程进行加
1）最小权利法则。应用程序使用的连接数据库的账户应该只拥有必需的权利，这样有
在LAMP架构网站配置时应注意Apache和MySQL数据库的安全配置，方法如下：
（1）数据库的安全配置。
"1:DS
es
teo
三
7,2011035,2011039,2011042,2011424,
图8-6防SQL注入规则
injecti
TON
CION
---
## Page 266
之前处理变量。如：
合时，对服务器乃至系统都是巨大的威胁。在开发PHP程序时应注意以下几点：
仍然存在此类漏洞，就会潜伏着这种隐患，特别是当SQL注入攻击与其他一些攻击工具结
的漏洞也越来越少，可是随着SQL注入技术的不断提高，只要Web应用系统或PHP 编码中
说，这种攻击是可以绕过的。虽然 MySQL 数据库的版本一直在更新，PHP 与MySQL 本身
8.4.3PHP代码的安全编写
能利用其中的有关信息，进行注入攻击。也可以设置此选项为“on”，但是要修改脚本返回
语句中可能会返回应用程序中的有关变量名、数据库用户名、表结构信息等。恶意用户有可
出（4）设置“display_errors”为“off"。此时是禁止把错误信息显示在网页上，因为这些
决文件包含的代码注入攻击。
“&a”，而只会创建“HTTPGET/POSTVARS[a]”。再不本（aoObi）主宜
8.4.2PHP代码的安全配置
由于SQL注入攻击是针对应用开发过程中的编程漏洞，因此对于绝大多数防火墙来
利用工具软件对日志文件进行分析，以便第一时间发现入侵状况。
必要更新，确保安装的是最新稳定版本。将程序日志存放在一个安全系统高的服务器上，并
十分危险的漏洞。用户应该无此权限。
4）存储过程控制。可以通过SQL语句实现对系统命令的调用，这是注入Webshell时
解密，实现对数据的加密功能。
持的加密算法，可以在存储时对数据进行加密，安全地保存在数据中，在检索时对数据进行
密，无法保护数据库中已有数据。目前对数据进行加密的数据库系统很少，而利用PHP支
（1）intvalO函数。如果用户输入整数类型变量，可以利用此函数进行转换，在执行查询
在配置PHP时应注意以下儿点：
关闭所有不必要的网络服务程序，并对所有提供网络服务的软件（PHP，Apache）进行
（2）Web服务器和操作系统的安全配置。
5）补丁。及时打上MySQL的最新版本补丁。
mysql_query ("SELECT*FROM users WHEREuserid="intval(Sid)"")
第8章SQL注入防护案例分析243
102
日
02
28
T8D
---
## Page 267
GET方法提交的请求参数。SQL注入大都利用了使用GET方式提交参数的页面，所以被当
8.5.1通过Web访问日志发现SQL攻击
务器进行交互，所以还是会在服务器的访问日志中留下蛛丝马迹。
使 SQL 注入攻击更加泛滥。然而SQL 注入的本质是参数输入和构造SQL 语句，需要和服
测、攻击工具都利用了该技术的核心思想。自动化工具的出现使攻击的技术门槛降低了，也
变化参量来判断SQL注入执行结果，因此即使屏蔽了数据库的错误信息注入漏洞还是可以
种盲注（BlindSQLInjection）技术，不再依赖服务器返回的错误信息，而是通过探测页面的
型的防范措施是禁止服务器将错误信息返回给用户。但是SQL注入技术也在发展，例如有
从服务器返回的错误信息中攻击者可以获取原始程序中的SQL语句结构。对付这种攻击典
好网站的安全防护，将网站发生SQL注入攻击的可能性降到最低。
低。因此，网站人员一定要对SQL 注入攻击给予足够重视，深刻了解相关的原理，全面做
还有很多专门针对SQL注入漏洞的自动检测和攻击工具，使得发起攻击的门槛进一步降
语句。
244UNIX/Linux网络日志分析与流量监控
被利用。
”8.5通过日志检测预防SQL注入
Web 访问日志记录了客户行为的详细信息，其中cs-uri-query 字段记录了客户端使用
盲注技术的出现使得SQL注入的探测、攻击可以实现自动化。目前大多数SQL注入探
早期的SQL注入方法中，攻击者采用导致SQL语法错误的输入，使数据库执行报错，
从上述案例中得知，攻击者只需要很少的代码，就能够轻而易举地发起攻击。而且现在
（4）限制输入长度与类型。在用户提交表单时设置长度限制，可有效阻止注入的猜测
（3）传输数据加密。如：
·由盲注的工作原理可知攻击过程中各个阶段向服务器发送请求的最少次数，猜测次
●SQL攻击利用的是某个页面代码的漏洞，因此，在日志统计中，某个IP地址对特定
现在对这些日志中留下的痕迹做一下分析：
行日志检测时，如果发现大量的空白字符就可以肯定发生了SQL注入攻击。
SQL 语句，因此，在 SQL 攻击的请求参数中必将出现空白字符（whitespace），在进
由SQL注入攻击原理可知，攻击者提交的请求中一定包含着符合SQL语法要求的
白字符串的日志记录就要引起管理员的注意。
数一般大于14次，而每一次猜测请求都会产生一条日志，所以在日志中带有多个空
500的记录。
由于SQL攻击会构造SQL语句并不断尝试，会在日志中存在很多HTTP响应为
据。如果存在漏洞的代码没有对数据库出错进行屏蔽或者没有正确处理空集的情况，
HTTP500服务器内部错误是SQL注入攻击用来判断注入执行结果是否正确的重要依
页面的请求数相当高。
user name=md5(SHTTP_POST_VARS["username")
---
## Page 268
更多内容大家可以参考表8-2。
面的日志分析特征，用来检测SQL注入漏洞的查询语句如下所示：
8.5.2
地检测攻击并发现漏洞。在图8-7中显示了微软IIS7的W3C日志字段内容。
符特征，并统计包含该特征的请求数和来源IP，结合HTTP响应代码500的统计，能够有效
作参数提交的 SQL 语句也被记录在日志记录的cs-uri-query 中，通过分析该字段中的空白字