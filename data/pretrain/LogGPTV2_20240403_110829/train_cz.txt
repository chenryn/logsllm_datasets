to your network or a transparent proxy; never ever use it for a
normal router or host.
otherwise, fragmented communication can be disturbed
if the fragments travel over different links.
defragmentation also has a large memory and cpu time cost.
.ip
this is automagically turned on when masquerading or transparent
proxying are configured.
.\"
.tp
.ir ip_autoconfig " (since linux 2.2 to 2.6.17)"
.\" precisely: since 2.1.68
.\" fixme document ip_autoconfig
not documented.
.\"
.tp
.ir ip_default_ttl " (integer; default: 64; since linux 2.2)"
.\" precisely: 2.1.15
set the default time-to-live value of outgoing packets.
this can be changed per socket with the
.b ip_ttl
option.
.\"
.tp
.ir ip_dynaddr " (boolean; default: disabled; since linux 2.0.31)"
enable dynamic socket address and masquerading entry rewriting on interface
address change.
this is useful for dialup interface with changing ip addresses.
0 means no rewriting, 1 turns it on and 2 enables verbose mode.
.\"
.tp
.ir ip_forward " (boolean; default: disabled; since linux 1.2)"
enable ip forwarding with a boolean flag.
ip forwarding can be also set on a per-interface basis.
.\"
.tp
.ir ip_local_port_range " (since linux 2.2)"
.\" precisely: since 2.1.68
this file contains two integers that define the default local port range
allocated to sockets that are not explicitly bound to a port number\(emthat
is, the range used for
.ir "ephemeral ports" .
an ephemeral port is allocated to a socket in the following circumstances:
.rs
.ip * 3
the port number in a socket address is specified as 0 when calling
.br bind (2);
.ip *
.br listen (2)
is called on a stream socket that was not previously bound;
.ip *
.br connect (2)
was called on a socket that was not previously bound;
.ip *
.br sendto (2)
is called on a datagram socket that was not previously bound.
.re
.ip
allocation of ephemeral ports starts with the first number in
.ir ip_local_port_range
and ends with the second number.
if the range of ephemeral ports is exhausted,
then the relevant system call returns an error (but see bugs).
.ip
note that the port range in
.ir ip_local_port_range
should not conflict with the ports used by masquerading
(although the case is handled).
also, arbitrary choices may cause problems with some firewall packet
filters that make assumptions about the local ports in use.
the first number should be at least greater than 1024,
or better, greater than 4096, to avoid clashes
with well known ports and to minimize firewall problems.
.\"
.tp
.ir ip_no_pmtu_disc " (boolean; default: disabled; since linux 2.2)"
.\" precisely: 2.1.15
if enabled, don't do path mtu discovery for tcp sockets by default.
path mtu discovery may fail if misconfigured firewalls (that drop
all icmp packets) or misconfigured interfaces (e.g., a point-to-point
link where the both ends don't agree on the mtu) are on the path.
it is better to fix the broken routers on the path than to turn off
path mtu discovery globally, because not doing it incurs a high cost
to the network.
.\"
.\" the following is from 2.6.12: documentation/networking/ip-sysctl.txt
.tp
.ir ip_nonlocal_bind " (boolean; default: disabled; since linux 2.4)"
.\" precisely: patch-2.4.0-test10
if set, allows processes to
.br bind (2)
to nonlocal ip addresses,
which can be quite useful, but may break some applications.
.\"
.\" the following is from 2.6.12: documentation/networking/ip-sysctl.txt
.tp
.ir ip6frag_time " (integer; default: 30)"
time in seconds to keep an ipv6 fragment in memory.
.\"
.\" the following is from 2.6.12: documentation/networking/ip-sysctl.txt
.tp
.ir ip6frag_secret_interval " (integer; default: 600)"
regeneration interval (in seconds) of the hash secret (or lifetime
for the hash secret) for ipv6 fragments.
.tp
.ir ipfrag_high_thresh " (integer), " ipfrag_low_thresh " (integer)"
if the amount of queued ip fragments reaches
.ir ipfrag_high_thresh ,
the queue is pruned down to
.ir ipfrag_low_thresh .
contains an integer with the number of bytes.
.tp
.i neigh/*
see
.br arp (7).
.\" fixme document the conf/*/* interfaces
.\"
.\" fixme document the route/* interfaces
.ss ioctls
all ioctls described in
.br socket (7)
apply to
.br ip .
.pp
ioctls to configure generic device parameters are described in
.br netdevice (7).
.\" fixme add a discussion of multicasting
.sh errors
.\" fixme document all errors.
.\"     we should really fix the kernels to give more uniform
.\"     error returns (enomem vs enobufs, eperm vs eacces etc.)
.tp
.b eacces
the user tried to execute an operation without the necessary permissions.
these include:
sending a packet to a broadcast address without having the
.b so_broadcast
flag set;
sending a packet via a
.i prohibit
route;
modifying firewall settings without superuser privileges (the
.b cap_net_admin
capability);
binding to a privileged port without superuser privileges (the
.b cap_net_bind_service
capability).
.tp
.b eaddrinuse
tried to bind to an address already in use.
.tp
.b eaddrnotavail
a nonexistent interface was requested or the requested source
address was not local.
.tp
.b eagain
operation on a nonblocking socket would block.
.tp
.b ealready
a connection operation on a nonblocking socket is already in progress.
.tp
.b econnaborted
a connection was closed during an
.br accept (2).
.tp
.b ehostunreach
no valid routing table entry matches the destination address.
this error can be caused by an icmp message from a remote router or
for the local routing table.
.tp
.b einval
invalid argument passed.
for send operations this can be caused by sending to a
.i blackhole
route.
.tp
.b eisconn
.br connect (2)
was called on an already connected socket.
.tp
.b emsgsize
datagram is bigger than an mtu on the path and it cannot be fragmented.
.tp
.br enobufs ", " enomem
not enough free memory.
this often means that the memory allocation is limited by the socket
buffer limits, not by the system memory, but this is not 100% consistent.
.tp
.b enoent
.b siocgstamp
was called on a socket where no packet arrived.
.tp
.b enopkg
a kernel subsystem was not configured.
.tp
.br enoprotoopt " and " eopnotsupp
invalid socket option passed.
.tp
.b enotconn
the operation is defined only on a connected socket, but the socket wasn't
connected.
.tp
.b eperm
user doesn't have permission to set high priority, change configuration,
or send signals to the requested process or group.
.tp
.b epipe
the connection was unexpectedly closed or shut down by the other end.
.tp
.b esocktnosupport
the socket is not configured or an unknown socket type was requested.
.pp
other errors may be generated by the overlaying protocols; see
.br tcp (7),
.br raw (7),
.br udp (7),
and
.br socket (7).
.sh notes
.br ip_freebind ,
.br ip_msfilter ,
.br ip_mtu ,
.br ip_mtu_discover ,
.br ip_recvorigdstaddr ,
.br ip_passsec ,
.br ip_pktinfo ,
.br ip_recverr ,
.br ip_router_alert ,
and
.br ip_transparent
are linux-specific.
.\" ip_xfrm_policy is linux-specific
.\" ip_ipsec_policy is a nonstandard extension, also present on some bsds
.pp
be very careful with the
.b so_broadcast
option \- it is not privileged in linux.
it is easy to overload the network
with careless broadcasts.
for new application protocols
it is better to use a multicast group instead of broadcasting.
broadcasting is discouraged.
.pp
some other bsd sockets implementations provide
.b ip_rcvdstaddr
and
.b ip_recvif
socket options to get the destination address and the interface of
received datagrams.
linux has the more general
.b ip_pktinfo
for the same task.
.pp
some bsd sockets implementations also provide an
.b ip_recvttl
option, but an ancillary message with type
.b ip_recvttl
is passed with the incoming packet.
this is different from the
.b ip_ttl
option used in linux.
.pp
using the
.b sol_ip
socket options level isn't portable; bsd-based stacks use the
.b ipproto_ip
level.
.pp
.b inaddr_any
(0.0.0.0) and
.b inaddr_broadcast
(255.255.255.255) are byte-order-neutral.
 this means
.br htonl (3)
has no effect on them.
.ss compatibility
for compatibility with linux 2.0, the obsolete
.bi "socket(af_inet, sock_packet, " protocol )
syntax is still supported to open a
.br packet (7)
socket.
this is deprecated and should be replaced by
.bi "socket(af_packet, sock_raw, " protocol )
instead.
the main difference is the new
.i sockaddr_ll
address structure for generic link layer information instead of the old
.br sockaddr_pkt .
.sh bugs
there are too many inconsistent error values.
.pp
the error used to diagnose exhaustion of the ephemeral port range differs
across the various system calls
.rb ( connect (2),
.br bind (2),
.br listen (2),
.br sendto (2))
that can assign ephemeral ports.
.pp
the ioctls to configure ip-specific interface options and arp tables are
not described.
.\" .pp
.\" some versions of glibc forget to declare
.\" .ir in_pktinfo .
.\" workaround currently is to copy it into your program from this man page.
.pp
receiving the original destination address with
.b msg_errqueue
in
.i msg_name
by
.br recvmsg (2)
does not work in some 2.2 kernels.
.\" .sh authors
.\" this man page was written by andi kleen.
.sh see also
.br recvmsg (2),
.br sendmsg (2),
.br byteorder (3),
.br capabilities (7),
.br icmp (7),
.br ipv6 (7),
.br netdevice (7),
.br netlink (7),
.br raw (7),
.br socket (7),
.br tcp (7),
.br udp (7),
.br ip (8)
.pp
the kernel source file
.ir documentation/networking/ip\-sysctl.txt .
.pp
rfc\ 791 for the original ip specification.
rfc\ 1122 for the ipv4 host requirements.
rfc\ 1812 for the ipv4 router requirements.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/lstat.2
.\" copyright (c) 2016 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th tmpfs 5 2021-03-22 "linux" "linux programmer's manual"
.sh name
tmpfs \- a virtual memory filesystem
.sh description
the
.b tmpfs
facility allows the creation of filesystems whose contents reside
in virtual memory.
since the files on such filesystems typically reside in ram,
file access is extremely fast.
.pp
the filesystem is automatically created when mounting
a filesystem with the type
.br tmpfs
via a command such as the following:
.pp
.in +4n
.ex
$ sudo mount \-t tmpfs \-o size=10m tmpfs /mnt/mytmpfs
.ee
.in
.pp
a
.b tmpfs
filesystem has the following properties:
.ip * 3
the filesystem can employ swap space when physical memory pressure
demands it.
.ip *
the filesystem consumes only as much physical memory and swap space
as is required to store the current contents of the filesystem.
.ip *
during a remount operation
.ri ( "mount\ \-o\ remount" ),
the filesystem size can be changed
(without losing the existing contents of the filesystem).
.pp
if a
.b tmpfs
filesystem is unmounted, its contents are discarded (lost).
.\" see mm/shmem.c:shmem_parse_options for options it supports.
.ss mount options
the
.b tmpfs
filesystem supports the following mount options:
.tp
.br size "=\fibytes\fp"
specify an upper limit on the size of the filesystem.
the size is given in bytes, and rounded up to entire pages.
.ip
the size may have a
.br k ,
.br m ,
or
.b g
suffix for ki, mi, gi (binary kilo (kibi), binary mega (mebi), and binary giga
(gibi)).
.ip
the size may also have a % suffix to limit this instance to a percentage of
physical ram.
.ip
the default, when neither
.b size
nor
.b nr_blocks
is specified, is
.ir size=50% .
.tp
.br nr_blocks "=\fiblocks\fp"
the same as
.br size ,
but in blocks of
.br page_cache_size .
.ip
blocks may be specified with
.br k ,
.br m ,
or
.b g
suffixes like
.br size ,
but not a % suffix.
.tp
.br nr_inodes "=\fiinodes\fp"
the maximum number of inodes for this instance.
the default is half of the number of your physical ram pages, or (on a
machine with highmem) the number of lowmem ram pages, whichever is smaller.
.ip
inodes may be specified with
.br k ,
.br m ,
or
.b g
suffixes like
.br size ,
but not a % suffix.
.tp
.br mode "=\fimode\fp"
set initial permissions of the root directory.
.tp
.br gid "=\figid\fp (since linux 2.5.7)"
.\" technically this is also in some version of linux 2.4.
.\" commit 099445b489625b80b1d6687c9b6072dbeaca4096
set the initial group id of the root directory.
.tp
.br uid "=\fiuid\fp (since linux 2.5.7)"
.\" technically this is also in some version of linux 2.4.
.\" commit 099445b489625b80b1d6687c9b6072dbeaca4096
set the initial user id of the root directory.
.tp
.br huge "=\fihuge_option\fr (since linux 4.7.0)"
.\" commit 5a6e75f8110c97e2a5488894d4e922187e6cb343
set the huge table memory allocation policy for all files in this instance (if
.b config_transparent_huge_pagecache
is enabled).
.ip
the
.i huge_option
value is one of the following:
.rs
.tp
.b never
do not allocate huge pages.
this is the default.
.tp
.b always
attempt to allocate huge pages every time a new page is needed.
.tp
.b within_size
only allocate huge page if it will be fully within
.ir i_size .
also respect
.br fadvise (2)/ madvise (2)
hints
.tp
.b advise
only allocate huge pages if requested with
.br fadvise (2)/ madvise (2).
.tp
.b deny
for use in emergencies, to force the huge option off from all mounts.
.tp
.b force
force the huge option on for all mounts; useful for testing.
.re
.tp
.br mpol "=\fimpol_option\fr (since linux 2.6.15)"
.\" commit 7339ff8302fd70aabf5f1ae26e0c4905fa74a495
set the numa memory allocation policy for all files in this instance (if
.b config_numa
is enabled).
.ip
the
.i mpol_option
value is one of the following:
.rs
.tp
.b default
use the process allocation policy (see
.br set_mempolicy (2)).
.tp
.br prefer ":\finode\fp"
preferably allocate memory from the given
.ir node .
.tp
.br bind ":\finodelist\fp"
allocate memory only from nodes in
.ir nodelist .
.tp
.b interleave
allocate from each node in turn.
.tp
.br interleave ":\finodelist\fp"
allocate from each node of
.i in
turn.
.tp
.b local
preferably allocate memory from the local node.
.re
.ip
in the above,
.i nodelist