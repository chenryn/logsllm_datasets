title:PathCutter: Severing the Self-Propagation Path of XSS JavaScript
Worms in Social Web Networks
author:Yinzhi Cao and
Vinod Yegneswaran and
Phillip A. Porras and
Yan Chen
PathCu’er:	
  Severing	
  the	
  Self-­‐
Propaga6on	
  Path	
  of	
  XSS	
  JavaScript	
Worms	
  in	
  Social	
  Web	
  Networks	
Yinzhi	
  Cao§,	
  Vinod	
  Yegneswaran†,	
  Phillip	
  Porras†,	
  and	
Yan	
  Chen§	
§Northwestern	
  Lab	
  for	
  Internet	
  and	
  Security	
  Technology,	
  Northwestern	
University,	
  Evanston,	
  IL	
  †SRI	
  Interna6onal,	
  Menlo	
  Park,	
  CA	
1	
Introduc6on	
•  Social	
  web	
  networks	
–  PlaRorms	
  where	
  people	
  share	
  their	
  perspec6ves,	
  opinions,	
–  OSNs,	
  Blogs,	
  Social	
  bookmarking	
  etc.	
thoughts	
  and	
  experiences	
•  XSS	
  worm	
  threat	
  is	
  severe.	
–  First	
  worm:	
  MySpace	
  Samy	
  (2005)	
–  More	
  and	
  more	
  prevalent:	
  Renren,	
  Yamanner,	
  etc.	
–  Akin	
  to	
  virus:	
  human	
  need	
  to	
  visit	
  infected	
  pages	
–  Characteris6c:	
  Fast	
  spreading	
In	
  this	
  paper,	
–  Target:	
  Prevent	
  XSS	
  worm	
  propaga6on	
–  Method:	
  View	
  separa6on	
  &	
  Request	
  authen6ca6on	
Number	
  of	
  infected	
  clients	
  a_er	
  20	
  hours	
(Social	
  Networks’	
  XSS	
  Worms,	
  Faghani	
  et	
  al.)	
• 
2	
Roadmap	
•  Introduc6on	
•  Background	
– A’ack	
  Steps	
– XSS	
  Taxonomy	
•  Related	
  Work	
•  Our	
  Approach	
•  Implementa6on	
•  Evalua6on	
3	
Background	
•  Step	
  1	
  –	
  En6cement	
  and	
  Exploita6on	
•  Step	
  2	
  –	
  Privilege	
  Escala6on	
•  Step	
  3	
  –	
  Replica6on	
•  Step	
  4	
  –	
  Propaga6on	
Samy’s	
  page	
Download	
Modify	
  benign	
user’s	
  account	
Repeat	
Process	
Other	
  Users	
Get	
  infected	
Benign	
  User	
4	
XSS	
  Taxonomy	
XSS	
  A’acks	
Server-­‐side	
  XSS	
Client-­‐side	
  XSS	
Stored	
  XSS	
   Reﬂected	
  XSS	
Plugin	
  XSS	
Content	
Sniﬃng	
XSS	
Java	
  XSS	
DOM-­‐based	
XSS	
Our	
MySpace	
  Samy	
Worm	
Yamanner	
Worm	
Flash	
  XSS	
Renren	
  Worm	
SpaceFlash	
  Worm	
Experimental	
Worm	
5	
Related	
  Work	
•  Group	
  one:	
  Prevent	
  XSS	
  vulnerabili6es	
– Incomplete	
  coverage	
  (BluePrint,	
  Plug-­‐in	
  Patches,	
Barth	
  et	
  al.,	
  and	
  Saxena	
  et	
  al.)	
•  Group	
  two:	
  Prevent	
  XSS	
  worms	
– No	
  early-­‐stage	
  preven6on	
  (Spectator	
  and	
  Xu	
  et	
  al.)	
– Not	
  resistant	
  to	
  polymorphic	
  worm	
  (Sun	
  et	
  al.)	
•  Our	
  goal:	
  Prevent	
  all	
  the	
  XSS	
  worms	
  with	
early-­‐stage	
  preven6on	
  and	
  resistance	
  to	
polymorphic	
  worms	
6	
Our	
  Approach	
•  Two	
  key	
  concepts:	
  (1)	
  request	
  authen6ca6on	
and	
  (2)	
  view	
  separa6on	
We	
  use	
  request	
authen+ca+on.	
Download	
Modify	
  benign	
user’s	
  account	
View	
  separa+on	
  is	
always	
  enforced.	
Samy’s	
  page	
Access	
Benign	
  User	
7	
View	
  Separa6on	
•  For	
  example,	
  blog	
  A,	
  blog	
  B,	
  blog	
  C	
  and	
  so	
  on.	
•  Or	
  more	
  ﬁne-­‐grained,	
  diﬀerent	
  pages	
  in	
  the	
same	
  blog.	
•  Isola6ng	
  contents	
  from	
  the	
  same	
  origin	
– iframe	
  tag	
  with	
  sandbox	
  proper6es	
  in	
  HTML5	
– Pseudodomain	
  encapsula6on	
  (men6oned	
  later)	
View	
  One	
View	
  Two	
8	
Request	
  Authen6ca6on	
•  For	
  example,	
  requests	
  from	
  blog	
  A	
  does	
  not	
have	
  permissions	
  to	
  modify	
  blog	
  B	
•  Iden6fying	
  which	
  view	
  a	
  client-­‐side	
  request	
  is	
from.	
– Secret	
  token	
– Referer	
  header	
•  Check	
  if	
  the	
  view	
  has	
  the	
  permission	
9	
Our	
  Approach	
Download	
Modify	
  benign	
user’s	
  account	
View	
  one	
  does	
  not	
have	
  the	
  permission.	
Iden6fy	
  that	
  it	
  is	
  from	
View	
  One.	
  If	
  we	
  cannot	
iden6fy,	
  deny.	
Isola6ng	
  views	
  at	
client	
  side.	
View	
  One	
Access	
View	
  Two	
Benign	
  User	
10	
Roadmap	
• 
Introduc6on	
•  Background	
•  Related	
  Work	
•  Our	
  Approach	
• 
•  Evalua6on	
Implementa6on	
–  Implementa6on	
  One	
  (Server	
  Modiﬁca6on)	
–  Implementa6on	
  Two	
  (Proxy)	
–  Case	
  Study	
  of	
  Five	
  Real-­‐world	
  Worms	
  and	
  Two	
–  Performance	
Experimental	
  Worms	
  (only	
  two	
  covered	
  in	
  the	
  talk)	
11	
  Implementa6on	
  One	
  (Server	
Modiﬁca6on)	
•  Prototype	
  examples:	
  WordPress,	
  Elgg	
•  Dividing	
  views:	
  by	
  blogs	
•  Permissions	
  for	
  diﬀerent	
  views:	
  can	
  only	
modify	
  its	
  own	
  blog.	
12	
  View	
  Isola6on	
  for	
  Server	
  Modiﬁca6on	
•  Isola6ng	
  views	
  at	
  client	