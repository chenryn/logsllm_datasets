) = y,
= s.
; r
∗
∗
where y is the challenge and x
(we use ·∗
oracle):
Here are some examples that satisfy the syntactic criterion
to denote the values computed by the decryption
Example 4.2.
• Bellare and Rogaway [5]: E (ine; r) =
a||b||c = f (r)||ine⊕G(r)||H(ine||r). The ”sanity check”
of the decryption algorithm is H(m
∗
) = c
∗||r
∗
.
• OAEP+ [19]: E (ine; r) = f (a||b||c), where a = ine ⊕
(ine||r), c = H(s) ⊕ r and s = ine ⊕
(ine||r). The ”sanity check” of the decryption
G(r), b = H
G(r)||H
algorithm has the form H
∗
∗
(cid:3)
(cid:3)
(cid:3)
(m
• Fujisaki and Okamoto [14]:
∗||r
if (K(cid:3)
) = b
,E(cid:3)
.
, D(cid:3)
) is a pub-
lic encryption scheme (that is CPA) then E (ine; r) =
E(cid:3)
((ine||r); H(ine||r)). The ”sanity check” of the de-
cryption algorithm is:
E(cid:3)
∗
∗
)) = ind.
∗||r
∗||r
; H(m
(m
The PA-semantic criterion applies to the following construc-
tions but not the syntactic one:
Example 4.3.
• Pointcheval [18]:
∗
∗
∗
∗
∗
∗
; r
; s
∗||H(m
)) = a
∗||s
∗||s
and m
E (ine; r; s) = f (r||H(ine||s))||((ine||s)⊕G(r)), where f
is a partially trapdoor one-way injective function. The
”sanity check” of the decryption oracle D(a||b) has the
∗
. The tester looks in hG
form f (r
such that E (m
and hH for r
) = y.
• REACT [17]: This construction applies to any trap-
door one-way function (possibly probabilistic).
It is
quite similar to the construction in [5]: E (ine; R; r) =
a||b||c = f (R; r)||ine⊕G(r)||H(R||ine||a||b), where a =
f (R; r) and b = ine ⊕ G(R). The ”sanity check” of the
decryption algorithm is H(R
) = c. For
this construction, one can provide a tester T that uses
a PCA oracle to check whether a is the encryption of
R by f . Hence, the PA security of the construction
under the assumption of the OW-PCA security of f .
∗||b
such that
The tester looks in hH for R
∗
∗
), which can be
) and a
c
checked using the CPA-oracle.
∗||a
∗||m
∗
= f (R
∗||m
∗||m
= H(R
∗||a
∗||a
∗||b
∗||b
∗
∗
∗
And now some examples of constructions that do not satisfy
the PA-semantic criterion (and hence, not the syntactic one):
Example 4.4.
• Zheng-Seberry Scheme [23]:
E (x; r) = a||b = f (r)||(G(r) ⊕ (x||H(x)). The third
condition of the PA-semantic criterion is not satisﬁed
by this construction. Actually, there is an attack [21]
on the IND-CCA security of this scheme that exploits
this fact.
• OAEP [6]: E (ine; r) = a = f (ine||0k ⊕ G(r)||r⊕ H(s)),
where s = ine||0k ⊕ G(r). Here the third condition is
not satisﬁed.
5. AUTOMATION
We can now fully automate our veriﬁcation procedure of
IND-CCA for the encryption schemes we consider as follows:
1. Automatically establish invariants
2. Check the syntactic criterion for PA.
Point 2 can be done by a simple syntactic analyzer taking
as input the decryption program, but has not been imple-
mented yet.
Point 1 is more challenging. The idea is, for a given pro-
gram, to compute invariants backwards, starting with the
invariant Indis(νoute; oute, ine) at the end of the program.
As several rules can lead to a same postcondition, we in
fact compute a set of suﬃcient conditions at all points of the
program: for each set {φ1, . . . , φn} and each instruction c,
we can compute a set of assertions {φ
m} such that
(cid:3)
i}c{φj}
(cid:3)
1. for i = 1, . . . , m, there exists j such that {φ
can be derived using the rules given section 3.2,
(cid:3)
1, . . . , φ
2. and for all j and all φ
(cid:3)
ists i such that φ
relation can be derived using lemma 3.10.
entails φ
(cid:3)
such that {φ
(cid:3)}c{φj}, there ex-
(cid:3)
i and that this entailment
Of course, this veriﬁcation is potentially exponential in the
number of instructions of the encryption program as each
postcondition may potentially have several preconditions.
However this is mitigated as
• the considered encryption scheme are generally imple-
mented in a few instructions (around 10)
• we implement a simpliﬁcation procedure on the com-
if φi entails φj (for i (cid:11)= j),
puted set of invariants:
then we can safely delete φi from the set of asser-
tions {φ1, . . . , φn}. In other words, we keep only the
minimal preconditions with respect to strength in our
computed set of invariants (the usual Hoare logic cor-
responds to the degenerated case where this set has a
minimum element, called the weakest precondition).
In practice, checking Bellare & Rogaway generic construc-
tion is instantaneous.
We implemented that procedure as an Objective Caml
program, taking as input a representation of the encryption
program. This program is only 230 lines long and is available
on the web page of the authors.
6. CONCLUSION
In this paper we proposed an automatic method to prove
IND-CCA security of generic encryption schemes in the ran-
dom oracle model. IND-CPA is proved using a Hoare logic
and plaintext awareness using a syntactic criterion. It does
not seem diﬃcult to adapt our Hoare logic to allow a se-
curity proof in the concrete framework of provable security.
Another extension of our Hoare logic could concern OAEP.
Here, we need to express that the value of a given variable is
indistinguishable from a random value as long as a value r
has not been submitted to a hash oracle G. This can be done
by extending the predicate Indis(νx; V1; V2). The details are
future work.
7. REFERENCES
[1] G. Barthe, J. Cederquist, and S. Tarento. A
Machine-Checked Formalization of the Generic Model
and the Random Oracle Model. In D. Basin and
M. Rusinowitch, editors, Proceedings of IJCAR’04,
volume 3097 of LNCS, pages 385–399, 2004.
[2] Gilles Barthe, Bejamin Gr´egoire, Romain Janvier, and
Santiago Zanella B´eguelin. A framework for
language-based cryptographic proofs. In 2nd Informal
ACM SIGPLAN Workshop on Mechanizing
Metatheory, Oct 2007.
[3] Gilles Barthe and Sabrina Tarento. A machine-checked
formalization of the random oracle model. In
Jean-Christophe Filliˆatre, Christine Paulin-Mohring,
and Benjamin Werner, editors, Proceedings of
TYPES’04, volume 3839 of Lecture Notes in
Computer Science, pages 33–49. Springer, 2004.
[4] Mihir Bellare, Anand Desai, David Pointcheval, and
Phillip Rogaway. Relations among notions of security
for public-key encryption schemes. In CRYPTO ’98:
Proceedings of the 18th Annual International
Cryptology Conference on Advances in Cryptology,
pages 26–45, London, UK, 1998. Springer-Verlag.
[5] Mihir Bellare and Phillip Rogaway. Random oracles
are practical: a paradigm for designing eﬃcient
protocols. In CCS ’93: Proceedings of the 1st ACM
conference on Computer and communications security,
pages 62–73, New York, USA, November 1993. ACM,
ACM.
[12] Anupam Datta, Ante Derek, John C. Mitchell, and
Bogdan Warinschi. Computationally sound
compositional logic for key exchange protocols. In
CSFW, pages 321–334, 2006.
[13] U. Feige, A. Fiat, and A. Shamir. Zero-knowledge
proofs of identity. J. Cryptol., 1(2):77–94, 1988.
[14] Eiichiro Fujisaki and Tatsuaki Okamoto. How to
enhance the security of public-key encryption at
minimum cost. In PKC ’99: Proceedings of the Second
International Workshop on Practice and Theory in
Public Key Cryptography, pages 53–68, London, UK,
1999. Springer-Verlag.
[15] Shai Halevi. A plausible approach to computer-aided
cryptographic proofs.
http://theory.lcs.mit.edu/~shaih/pubs.html,
2005.
[16] David Nowak. A framework for game-based security
proofs. In ICICS, pages 319–333, 2007.
[17] Tatsuaki Okamoto and David Pointcheval. React:
Rapid enhanced-security asymmetric cryptosystem
transform. In CT-RSA 2001: Proceedings of the 2001
Conference on Topics in Cryptology, pages 159–175,
London, UK, 2001. Springer-Verlag.
[18] David Pointcheval. Chosen-ciphertext security for any
one-way cryptosystem. In PKC ’00: Proceedings of the
Third International Workshop on Practice and Theory
in Public Key Cryptography, pages 129–146, London,
UK, 2000. Springer-Verlag.
[19] Victor Shoup. Oaep reconsidered. J. Cryptology,
[6] Mihir Bellare and Phillip Rogaway. Optimal
15(4):223–249, 2002.
asymmetric encryption. In Alfredo De Santis, editor,
EUROCRYPT, volume 950 of Lecture Notes in
Computer Science, pages 92–111. Springer, 1994.
[20] Victor Shoup. Sequences of games: a tool for taming
complexity in security proofs, 2004.
http://eprint.iacr.org/2004/332.
[7] Mihir Bellare and Phillip Rogaway. Code-based
[21] David Soldera, Jennifer Seberry, and Chengxin Qu.
game-playing proofs and the security of triple
encryption. Cryptology ePrint Archive, Report
2004/331, 2004. http://eprint.iacr.org/.
[8] Bruno Blanchet. A computationally sound mechanized
prover for security protocols. In S&P, pages 140–154.
IEEE Computer Society, 2006.
[9] Bruno Blanchet and David Pointcheval. Automated
security proofs with sequences of games. In Cynthia
Dwork, editor, CRYPTO, volume 4117 of Lecture
Notes in Computer Science, pages 537–554. Springer,
2006.
[10] Ricardo Corin and Jerry den Hartog. A probabilistic
hoare-style logic for game-based cryptographic proofs.
In Michele Bugliesi, Bart Preneel, Vladimiro Sassone,
and Ingo Wegener, editors, ICALP (2), volume 4052
of Lecture Notes in Computer Science, pages 252–263.
Springer, 2006.
[11] Ivan Damgard. Towards practical public key systems
secure against chosen ciphertext attacks. In CRYPTO
’91: Proceedings of the 11th Annual International
Cryptology Conference on Advances in Cryptology,
pages 445–456, London, UK, 1992. Springer-Verlag.
The analysis of zheng-seberry scheme. In
Lynn Margaret Batten and Jennifer Seberry, editors,
ACISP, volume 2384 of Lecture Notes in Computer
Science, pages 159–168. Springer, 2002.
[22] Sabrina Tarento. Machine-checked security proofs of
cryptographic signature schemes. In Sabrina
De Capitani di Vimercati, Paul F. Syverson, and
Dieter Gollmann, editors, Computer Security -
ESORICS 2005, volume 3679 of Lecture Notes in
Computer Science, pages 140–158. Springer, 2005.
[23] Yuliang Zheng and Jennifer Seberry. Immunizing
public key cryptosystems against chosen ciphertext
attacks. IEEE Journal on Selected Areas in
Communications, 11(5):715–724, 1993.