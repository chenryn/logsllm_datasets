Android FDE
MobiPluto
MobiCeal
Initialization
18min23s±1s
37min2s±2s
2min16s±3s
booting time
(decoy pwd)
0.29±0.02s
1.36±0.02s
1.68±0.04s
switching time
(enter hid-mod)
N/A
68±4s
9.27±0.28s
switching time
(exit hid-mod)
N/A
64±5s
63±6s
but the overhead of MobiCeal is only about 22%. The high
overhead of DEFY is caused by the additional computation
requirements necessary to support the cryptographic opera-
tions. The encryption of MobiCeal relies on the dm-crypt
kernel module which is more efﬁcient. HIVE is based on
Oblivious RAM and its high overhead is caused by the high
computation cost of ORAM. MobiCeal relies on the modiﬁed
thin provisioning to provide deniability, so the overhead is
much lower. Note that HIVE can defend against a stronger
adversary who can constantly monitor the device, but the
signiﬁcant performance overhead makes it impossible to be
deployed on practical devices.
Timing Measurements. We also test the initialization time,
the booting time, and the switching time, which affect the
users’ experience. The initialization time is the time used to
ﬁnish the initialization process (Sec. V-B). To measure the
initialization time, we use a timer to record the time interval
between the moment when MobiCeal is activated by the vdc
command, and the moment when the screen shows up the
password entering interface. We analyze the booting time and
the switching time by reading the logs of Android system. The
booting time is the time interval between the moment when
the decoy password is entered in the interface, and the moment
when the public volume is decrypted. The switching time is
the time interval between the moment when a password is
entered in the screen lock and the moment when the system
switches to the hidden mode.
We conduct each test 10 times and the means and standard
deviations of the results are shown in Table II. The initializa-
tion of MobiCeal takes about 2 minutes, which is much shorter
than MobiPluto [21]. The booting time is about 1.7 seconds
and the switching time is less than 10 seconds. Previous solu-
tions (Mobiﬂage [34], MobiHydra [43] and MobiPluto [21])
all need reboot to switch modes, which is time-consuming
(more than 1 minute). Our solution does not need to reboot
the phone and this is helpful in emergency.
VII. RELATED WORK
The concept of deniable encryption has been applied to
network communications [17], disk storage and cloud stor-
age [25]. In disk storage, the existing PDE designs can be
classiﬁed into two categories: one against single snapshot
adversaries and the other against multi-snapshot adversaries.
A. Designs against Single Snapshot Adversaries
The ﬁrst ﬁle encryption scheme with PDE support is pro-
posed by Anderson et al. [13]. Two solutions are presented:
Hiding blocks within cover ﬁles and hiding blocks within
random data. However, due to the high storage and I/O
overheads, both solutions are not suitable for resource-limited
mobile devices. StegFS [29] uses the second approach in [13]
and works on Ext2 ﬁle system. However, their design relies
on Ext2 ﬁle system and may not work on other ﬁle systems.
In addition, the disk usage rate is very low due to the collision
avoidance mechanism. TrueCrypt [2], FreeOTFE [3], EDS [10]
and Fuyoal [8] are well-known desktop PDE tools that can
defend against a single snapshot adversary.
Mobiﬂage [34], [35] presents the ﬁrst PDE scheme for
mobile devices, with two versions: One for FAT32 ﬁle system
in external storage [34], and the other for Ext4 ﬁle system
in internal storage [35]. MobiHydra [43] introduces multi-
level deniability and supports sensitive data storing without
rebooting. MobiPluto [21] introduces a ﬁle system friendly
PDE design by combining hidden volume technique and thin
provisioning. DEFTL[27] considers the nature of NAND ﬂash
and incorporates deniability to ﬂash translation layer.
All the aforementioned PDE systems unfortunately cannot
mitigate a multi-snapshot adversary, since they all rely on a
static defense strategy, e.g., denying existence of hidden data
using randomness being ﬁlled initially.
B. Designs against Multi-Snapshot Adversaries
Pang et al. [32] propose a steganographic ﬁle system design
where blocks used by hidden ﬁles are marked as occupied in
the bitmap. It uses “abandoned blocks” and “dummy blocks”
to hide sensitive data. Although Pang et al.’s design has the
concept of “dummy blocks”, their design and our MobiCeal
are different in the following aspects: 1) Their design is for
desktop systems, and does not provide technical details on
how the dummy data are written in order to defend against the
multi-snapshot adversary. MobiCeal, on the contrary, designs
a clear “dummy write” mechanism speciﬁcally for mobile
devices, which is clearly shown to be secure against the multi-
snapshot adversary. 2) Their design is based on legacy Linux
kernel and requires special APIs for handling hidden ﬁles
which may not be applicable to mobile devices. MobiCeal
is incorporated into the block layer, and does not rely on any
speciﬁc ﬁle system APIs.
Blass et al. present HIVE [15] to defend against a multi-
snapshot adversary. HIVE relies on the expensive write-only
ORAM, which suffers from a high system overhead and is thus
not suitable for mobile devices. Chakraborti et al. [18], [19]
improve HIVE, but their design still relies on ORAM, which
cannot ﬁt the resources limited mobile devices. Comparatively,
MobiCeal eliminates the use of ORAM, and is lightweight
enough to be used in mobile devices. Peters et al. introduce
DEFY [33], a deniable encrypted ﬁle system for mobile
devices based on YAFFS [40]. DEFY strongly relies on the
special properties provided by YAFFS ﬁle system, which limits
464
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
its applications on the existing mobile devices since YAFFS
is rarely deployed. On the contrary, MobiCeal is incorporated
into the block layer, which ensures its broad applications.
VIII. CONCLUSION
In this paper, we propose MobiCeal, a practical PDE so-
lution for mobile devices. MobiCeal is the ﬁrst block-layer
PDE scheme that is resistant to multi-snapshot adversaries on
mobile devices. MobiCeal is practical since it is ﬁle system
friendly and supports fast switching. We have implemented
a prototype of MobiCeal on an LG Nexus 4 phone using
Android 4.2.2 and tested it on a Huawei Nexus 6P phone
using Android 7.1.2 as well. The performance overhead of
MobiCeal is signiﬁcantly lower than other PDE systems that
can defend against the multi-snapshot adversary, which justi-
ﬁes that MobiCeal suits the application of mobile devices.
ACKNOWLEDGMENT
Chang, Li, and Ching’s work is supported by the Singapore
National Research Foundation under NCR Award Number
NCR2016NCR-NCR002-022. Dr. Fengwei Zhang is supported
by the National Science Foundation Grant No. CICI-1738929
and IIS-1724227.
REFERENCES
[1] “BitLocker Overview,”
https://technet.microsoft.com/en-us/library/
hh831713.aspx, 2013.
[2] “Free open source on-the-ﬂy disk encryption software. version 7.1a,”
Project website: https://andryou.com/truecrypt orig/, 2013.
[3] “A free “on-the-ﬂy” transparent disk encryption program for PC &
PDAs,” Project website: http://sourceforge.net/projects/freeotfe.mirror/,
2017.
[4] “Android full disk encryption,” https://source.android.com/security/
https://wiki.archlinux.org/index.php/Benchmarking,
encryption/, 2017.
[5] “Benchmarking,”
2017.
conﬁg.html, 2017.
full-disk.html, 2017.
fuyoal/, 2017.
[6] “Device Conﬁguration,”
https://source.android.com/devices/storage/
[7] “Full-disk encryption,” https://source.android.com/security/encryption/
[8] “Fuyoal - deniable encryption software,” Website: http://tsmolen.eu/
[9] “Samsung eMMC memory,” http://www.samsung.com/semiconductor/
products/ﬂash-storage/emmc, 2017.
[10] “Sovworks — EDS,” Website: http://www.sovworks.com/, 2017.
[11] “The Device Mapper,”
https://access.redhat.com/documentation/
en-US/Red Hat Enterprise Linux/6/html/Logical Volume Manager
Administration/device mapper.html, 2017.
[12] “Use FileVault to encrypt the startup disk on your Mac,” https://support.
apple.com/en-us/HT204837, 2017.
[13] R. Anderson, R. Needham, and A. Shamir, “The steganographic ﬁle
system,” in Information Hiding. Springer, 1998, pp. 73–82.
[14] B. Kaliski, “PKCS # 5: Password-based cryptography speciﬁcation,
version 2.0,” RFC 2898, 2000.
[15] E.-O. Blass, T. Mayberry, G. Noubir, and K. Onarlioglu, “Toward robust
hidden volumes using write-only oblivious ram,” in Proceedings of
the 2014 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2014, pp. 203–214.
[16] M. Broz, “dm-crypt: Linux kernel device-mapper crypto target,” https:
//gitlab.com/cryptsetup/cryptsetup/wikis/DMCrypt, 2017.
[17] R. Canetti, C. Dwork, M. Naor, and R. Ostrovsky, “Deniable encryp-
tion,” in Advances in Cryptology-CRYPTO’97. Springer, 1997.
[18] A. Chakraborti, C. Chen, and R. Sion, “Poster: Datalair: A storage
block device with plausible deniability,” in Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2016, pp. 1757–1759.
[19] ——, “Datalair: Efﬁcient block storage with plausible deniability against
multi-snapshot adversaries,” Proceedings on Privacy Enhancing Tech-
nologies, vol. 3, pp. 175–193, 2017.
[20] B. Chang, Y. Cheng, B. Chen, F. Zhang, W.-T. Zhu, Y. Li, and Z. Wang,
“User-friendly deniable storage for mobile devices,” Computers &
Security, vol. 72, pp. 163–174, 2018.
[21] B. Chang, Z. Wang, B. Chen, and F. Zhang, “Mobipluto: File system
friendly deniable storage for mobile devices,” in Proceedings of the 31st
Annual Computer Security Applications Conference. ACM, 2015, pp.
381–390.
[22] R. Coker, “Bonnie++ ﬁle system benchmark suite,” http://www.coker.
com.au/bonnie++/, 2009.
[23] A. Czeskis, D. J. S. Hilaire, K. Koscher, S. D. Gribble, T. Kohno, and
B. Schneier, “Defeating encrypted and deniable ﬁle systems: Truecrypt
v5.1a and the case of the tattling os and applications,” in Proceedings
of the 3rd Conference on Hot Topics in Security, 2008.
[24] Entropy512, “LVM Partition Remapping,” http://forum.xda-developers.
com/ﬁnd-7/orig-development/ref-lvm-partition-remapping-t2865843,
2014.
[25] P. Gasti, G. Ateniese, and M. Blanton, “Deniable cloud storage: sharing
ﬁles via public-key deniability,” in Proceedings of the 9th annual ACM
workshop on Privacy in the electronic society. ACM, 2010, pp. 31–42.
search and copy u.s.
journalists notes,
returning from
after
haiti,” https://www.democracynow.org/2011/2/15/exclusive authorities
search and copy us, 2011.
[26] A. Goodman, “Dn! exclusive: Authorities
and cameras
computer
[27] S. Jia, L. Xia, B. Chen, and P. Liu, “DEFTL: Implementing Plausibly
Deniable Encryption in Flash Translation Layer,” in Proceedings of the
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2017.
Levine,
Volume Manager
Administration,”
“Logical
[28] S.
https://access.redhat.com/documentation/en-US/Red Hat Enterprise
Linux/6/html/Logical Volume Manager Administration/, 2017.
[29] A. D. McDonald and M. G. Kuhn, “StegFS: A steganographic ﬁle system
for Linux,” in Proceedings of Information Hiding. Springer, 2000.
[30] C. Mcfadden, E. Cauchi, W. M. Arkin,
“American
Your
american-citizens-u-s-border-agents-can-search-your-cellphone-n732746,
Mar 2017.
and K. Monahan,
Search
https://www.nbcnews.com/news/us-news/
Citizens:
Cellphone,”
Agents
Border
U.S.
Can
[31] W. D. Norcott, “IOzone Filesystem Benchmark,” http://www.iozone.org,
2016.
[32] H. Pang, K.-L. Tan, and X. Zhou, “StegFS: A steganographic ﬁle
system,” in Proceedings of the 19th International Conference on Data
Engineering, 2003.
[33] T. M. Peters, M. A. Gondree, and Z. N. Peterson, “DEFY: A deniable,
encrypted ﬁle system for log-structured storage,” in the Network and
Distributed System Security Symposium, 2015.
[34] A. Skillen and M. Mannan, “On implementing deniable storage encryp-
tion for mobile devices,” in the Network and Distributed System Security
Symposium, 2013.
[35] ——, “Mobiﬂage: Deniable storage encryption for mobile devices,”
IEEE Transactions on Dependable and Secure Computing, vol. 11, no. 3,
pp. 224–237, 2014.
[36] S. Smalley and R. Craig, “Security Enhanced (SE) Android: Bringing
Flexible MAC to Android.” in NDSS, 2013.
[37] O. Solon, “US border agents are doing ‘digital strip searches’. Here’s
how to protect yourself,” https://www.theguardian.com/us-news/2017/
mar/31/us-border-phone-computer-searches-how-to-protect, Mar 2017.
using
http://forum.xda-developers.com/nexus-s/general/
LVM,”
howto-partitioning-nexus-s-using-lvm-t1656794, 2012.
[38] Steven676,
“Partitioning”
your Nexus
“[HOWTO]
[39] L. Torvalds, “Thin provisioning documentation,” https://www.kernel.org/
S
doc/Documentation/device-mapper/thin-provisioning.txt, 2017.
[40] L. van Someren, “Yaffs — a ﬂash ﬁle system for embeded use,” http:
//www.yaffs.net, 2017.
[41] Y. Wang, W.-k. Yu, S. Wu, G. Malysa, G. E. Suh, and E. C. Kan,
“Flash memory for ubiquitous hardware security functions: True random
number generation and device ﬁngerprints,” in Security and Privacy
(SP), 2012 IEEE Symposium on.
IEEE, 2012, pp. 33–47.
[42] D. Woodhouse, “Memory Technology Device Subsystem for Linux,”
http://www.linux-mtd.infradead.org/faq/nand.html, 2017.
[43] X. Yu, B. Chen, Z. Wang, B. Chang, W. T. Zhu, and J. Jing, “Mobihydra:
Pragmatic and multi-level plausibly deniable encryption storage for
mobile devices,” in International Conference on Information Security.
Springer, 2014, pp. 555–567.
465
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply.