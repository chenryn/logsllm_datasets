of the vector only has to accommodate the number of clients
a user has (or is sharing data with), which we expect to be
generally fewer than 10-20.
Client join and leave. When a client joins or rejoins the
system after a period of being asleep, it must verify that
the attestor is available before performing any operations. It
does this by checking that the timestamp of the most recent
attestation posted by the attestor is less than TA+δ old. Once it
establishes that the attestor is available and making attestations
properly, it can proceed to access values on the cloud service.
If the client has been disconnected from the cloud service
for a long period of time, it may have to download a signiﬁcant
portion of the log to verify the consistency of Gets that read
values written many operations ago. To bound the length of
the log, the attestor can periodically checkpoint the entire key-
value store by performing a Get and Put on every key, attest-
ing to the new key values and having the history server discard
all log entries before the checkpoint. To safely checkpoint
a key, Caelus must ensure that there are no Puts in ﬂight
so that the latest value is checkpointed. If large key-values
are anticipated, Caelus can provide a special Checkpoint
operations that avoid transmitting the value since the value
itself does not change. Checkpointing requires all keys with
conﬂicting values to be resolved, though data loss can of
course be avoided by assigning conﬂicting values to new keys.
When clients intentionally leave, for example to go to sleep,
they may have to delay their leaves by up to TS + TA +
ǫ so that they can verify any operations made just prior to
sleeping. Note that TS is effectively zero in strong consistency
since replication is immediate. Unfortunately, if clients have an
unexpected failure that they cannot delay, a malicious server
can truncate data written in the last TS + TA + ǫ. However, a
malicious server cannot omit operations since omissions will
be caught by the presence checks done by other clients.
Audits. If a consistency violation is detected, either the cloud
service acted maliciously or a device incorrectly reported a
consistency violation. To differentiate between these two cases
and enforce Guarantee CLT2, an audit procedure is required
to verify that the device is truthfully reporting misbehavior by
887
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
the cloud service. The audit procedure is fairly straightforward
as all the information required to perform the veriﬁcation pro-
cedure is contained in the logs and attestations on the history
server, and thus no information or interaction is required with
the device that is accusing the cloud server. Thus, the user
can perform the audit procedure by repeating the veriﬁcation
procedure on a device whose integrity is known to be good.
We envision the requirement to do such audits to be rare, so
it is reasonable to assume the user will be willing to expend
some effort to acquire such a device. For example, they may
boot a device from a CD or USB image that is known to
be safe, or use a device capable of veriﬁed trusted-boot [27],
[28]. The audit procedure can even be performed publicly if
all signature veriﬁcation keys are available in case the user
wants to prove to a third party that the cloud service behaved
maliciously.
C. Battery-friendly system
Our basic system described above is secure, but not battery-
friendly because it requires the attestor to continuously pro-
duce attestations. In order to solve this problem, we introduce
attestor-partitioning, which partitions the single attestor into a
root attestor (RA) and an active attestor (AA), each fulﬁlling
one of the requirements on the single attestor. The device
that fulﬁlls the RA role takes on that role permanently and
its identity as RA is known to all devices. However, once
it selects a device to take on the role of the AA, it can
sleep and conserve battery, and the selected AA will then
actively create attestations every TA. As a result, the role of
the AA is not permanently attached to one device, but can
be changed as necessary to minimize the impact on battery
life. In Section VII, we show that Caelus has minimal battery
impact on a device that is already awake – the main battery
cost of Caelus results from it preventing devices from sleeping.
Thus, the RA should select a device to be the AA that must
be awake for other reasons – for example, the RA could select
devices that the user is actively using or devices awake due to
processing background tasks, such as downloading updates or
synchronizing data. The RA can even select itself as the AA
if it is the only device that is awake. If all devices are asleep,
then no AA needs to be selected because no operations are
being performed if all devices are asleep and thus, there is
nothing to attest – if operations are being performed on the
cloud service, then at least one device must always be awake
to perform them.
While the RA can be any device, we generally envision that
the user may use their smartphone as the RA for their devices.
As of August 2014, there are approximately 4.6 billion cell
phone subscribers worldwide and smartphones represent 65%
of all new phones being sold [29]. As a result, even in instances
where users only own one or a small number of devices, we
can likely assume that at least one of them is a smartphone.
Smartphones also have several other advantages that make
them suitable for use as an RA. First, they have a cellular data
connection, meaning that they are likely to be reachable and
able to respond to network requests. Second, the user generally
has their smartphone with them and so is more able to ﬁx a
failed or disconnected smartphone than a non-portable device.
Finally, a malicious cloud provider could drop messages from
the RA to make it appear that it has failed. However, since the
user usually has the smartphone-RA with them, such an attack
is unlikely to work as the user can easily verify the state of
the smartphone.
The key security invariant that attestor-partitioning protocol
must uphold is that there must not be more than one AA at any
given time, otherwise a malicious cloud service can fork the
AAs into two partitions that are not aware of each other, which
would violate all the consistency models that Caelus tries
to guarantee. Although the attestations are performed by the
AA, the RA still takes an important role for keeping security
guarantees by maintaining only one AA at any given time and
securely handling instances where the AA fails unexpectedly.
The RA selects the AA by writing a selection message to
the history server using a Select operation. After this, the
AA will perform attestations every TA, allowing the RA to
sleep. Selection messages are signed and include a sequence
number just like regular operations, and thus cannot be forged
or replayed. They contain a timestamp and unambiguously
select the client to be the AA. If the AA leaves or fails, the
RA must then select another client to be the AA. Thus, while
an AA is active, the RA must wake up every TR, where TR ≫
TA, to check for the presence of AA attestations in the log. If
a current attestation exists, then the AA is still present and the
RA renews the selection by writing a new selection message.
This renewal message is important as it serves to tell the AA
and clients that the AA has not been isolated from the RA. If
the AA does not see a renewal at TR + ǫ after the last renewal
it must stop acting as the AA and wait until a new AA is
selected.
When a client wants to join the cloud service, it checks
for the presence of an AA by checking if the last selection
message is less than TR + δ old. If selection has expired,
there is no current AA and the client must wake the RA.
To do this, we enable clients to wake the RA by adding a
Wake operation that causes the cloud service to wake the
RA using a push notiﬁcation. Push notiﬁcations are a facility,
universally available in essentially all battery-powered devices
such as phones and tablets, which allow a remote host to send
a message to a mobile device, such as a RA device, and ensure
it is received in a timely manner even if the device is sleeping.
They utilize special hardware that puts the main processor
on the device to sleep while the network interface remains
awake, but allows the network interface to wake the device if
a message arrives. A variety of push notiﬁcation services exist,
such as Google Cloud Messaging, the Apple Push Notiﬁcation
Service and the Amazon Simple Notiﬁcation Service. Before
waking the RA, the client indicates that it is awake by writing a
status message to the history server using a Status operation.
Like all other operations, status messages include a sequence
number and are signed so they cannot be forged or replayed.
After this, the cloud service wakes the RA, which then checks
the status messages on the history server to see which devices
888
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
are awake. It then selects an active device to be AA and goes
to sleep for TR.
If the AA intends to leave, it must give up its role as the AA.
Similar to the join procedure, the AA writes a status message
indicating it is going to leave and asks the server to wake the
RA. At that point, the RA can select a different device if there
are other devices awake or go to sleep if there are no other
devices awake.
D. Handling failures
One of the drawbacks of attestor-partitioning is that it can
increase the likelihood of unavailability because if the AA
fails, the system will become unavailable for up to TR + ǫ
for the RA to wake up, at which time the RA will detect that
the AA is not making attestations. Recall that TR could be
on the order of several minutes. If other clients are awake,
the RA will select a new AA, otherwise it will go to sleep. At
ﬁrst, it might appear that clients could avoid having to wait by
waking up the RA once they detect the AA has failed (i.e. after
TA + ǫ has passed without an attestation). However, this is not
safe as neither the RA nor clients can differentiate between
a failed AA and a malicious cloud service who is dropping
AA attestations. If the RA incorrectly assumes the AA has
failed and selects a new AA when in fact the cloud service is
dropping attestations, this will result in two simultaneous AAs.
Without trusted communication channel between clients, the
only way to avoid this is for the RA and all clients to wait
until TR has passed. After this, even if the cloud service is
malicious, the AA will stop acting as an AA unless it sees a
selection renewal from the RA, which the RA will not issue
unless it can see the operations of the AA.
An AA can potentially suffer from a variety of failures,
such as benign failures due to WiFi disconnection, battery
depletion or failed hardware, as well as malicious failures such
as malware infection or remote compromise. Such failed AAs
affect the availability of Caelus as mentioned above. Moreover,
if the failure is malicious, a compromised AA (or any other
compromised client), could falsely accuse the cloud provider,
requiring an audit to be run, which will impact the availability
of Caelus as well. Thus, Caelus should try to minimize the
chance of AA failure as much as possible. Preventing the
compromise of devices by attackers is beyond the scope of
this work, and we encourage readers to refer to the rich
literature on intrusion detection, malware detection and system
hardening. Thus, we will focus on how Caelus can minimize
the chances of benign AA failures.
The easiest way to reduce benign AA failures is to have
more reliable devices and networks. Enterprise-grade devices,
while more expensive than consumer-grade devices, are often
of higher quality, providing more reliable networks and less
failure-prone hardware. Thus, while Caelus is not restricted to
only enterprise settings, it will perform better in such settings
where the probability of failures is low. In lieu of using higher-
cost devices, Caelus can still mitigate failures by managing
and conﬁguring the system more carefully. For instance, when
more than one candidate for AA is available, the RA can
preferentially select an AA that is more reliable by using
attributes such as previous failure history of the devices, the
current battery-level of the device, network signal strength and
error-rate of the device, software patch level and whether the
device is in the physical presence of the user so that failures,
if they do happen, can be more quickly addressed. We leave
the details of an algorithm that correctly balances these and
possibly other attributes for future work.
A malicious push notiﬁcation service could arbitrarily delay,
drop or forge notiﬁcations. Delayed or dropped notiﬁcations
will reduce the responsiveness of the system since the RA will
not wake up as intended. Alternatively, forged notiﬁcations
will cause the RA to wake up unnecessarily, affecting battery
life. Both of these attacks reduce availability, thus affecting
Guarantee AV1, which is not intended to withstand malicious
activity. However, all other security guarantees hold against a
malicious notiﬁcation service. Moreover, both of these attacks
are not stealthy and can easily be detected, for example
by having clients detect delayed or dropped notiﬁcations by
timing the delay for the RA to respond after a Wake, or having
the RA detect forged or delayed notiﬁcations by checking for
a valid Status operation upon receiving a notiﬁcation.
Guarantee AV1 ensures that Caelus does not increase un-
availability unless the cloud service or devices fail, or there is
malicious activity. The only time Caelus will stop clients from
performing operations is if a scheduled attestation or selection
message is missed, which can occur only when either the AA
or RA fail, the network they are connected to fails or if a
malicious server drops those messages.
E. Operating parameters
Caelus has a number of time-based operating parameters,
some of which are dictated by the cloud service or operating
environment and some of which are set by the user. TS is the
visibility time bound for the cloud service, and is a property
of the distributed key-value store. We expect environmental
parameters ǫ, which represents network and processing delay,
to be on the order of 10s to 100s of milliseconds (for
connectivity over cellular networks) and δ, which represents
clock skew between devices to be a few milliseconds. Since
the history server should be composed of a single machine or
a set of tightly coupled machines, we expect log, attestation
and select operations to take on the order of ǫ.
Caelus guarantees that clients cannot unknowingly use data
that is inconsistent by more than TCaelus, where TCaelus =
TS + TA + ǫ. Caelus may also detect some operations that
violate the shorter TS bound, but its ability to do this is limited
by how short TA is. This is because operations logged by
the history server are only attested every TA, so an operation
that violates TS by some amount φ will evade detection so
long as the time it waits on the history server for the next
attestation cycle is less than TA−φ. Thus, a short TA increases
Caelus’ ability to detect violations, but at a slightly higher
network and computational cost to the AA and clients who
must process attestations more often. Note that to have TA =
0, which implies TCaelus = TS + ǫ, this would either require
889
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
an AA that checks inﬁnitely often or a trusted history server
that implements the AA.
While a RA that is never unavailable can never cause the
system to be unavailable, real devices do become unavailable
so they can cause system unavailability. Attestor-partitioning
mitigates the effects of RA unavailability by allowing the
AA to hide some of the times the RA is unavailable. While
the value of TR does not affect system security, a longer
TR reduces the likelihood that temporary unavailability of
the RA will affect unavailability of the entire system. To
illustrate, consider a RA running on the smartphone with an
availability of 97.81% as found by our informal measurement
study detailed in the Appendix. Modelling the phone as a
random variable with an expected value of 97.81% and is
subject to a trial every TR, it would take about 32 × TR be-
fore the probability that phone unavailability impacts Caelus’
availability increases to 50%. Considering an average period
of unavailability of approximately 94 seconds (again from
the study), partitioning gives the user a 50% chance of
experiencing roughly 7 minutes of unavailability every 24
hours with a TR of 10 minutes, which compares favorably to
the expected 30 minutes of unavailability the same phone is
expected to experience every 24 hours. Moreover, the expected
unavailability decreases exponentially as phone availability
increases. Therefore, we think the smartphone RA can be
reliable and highly available for our target environment.
In general, a longer TR will also improve battery life of the
RA as the device the RA is on can spend a longer proportion
of time sleeping. Mobile push notiﬁcation services typically