ing both transmission control protocol (TCP) and user data-
gram protocol (UDP) bandwidth. In order to measure avail-
able bandwidth, it was necessary for the ﬁrewall policy to al-
low communication between the iperf client and server, as
seen in Figure 1.
Hyper-Text Transfer Protocol (HTTP) load tests were per-
formed using http load to repeatedly request a web page
from an apache2 web server. The web server was conﬁgured
with the default Gentoo conﬁguration. To achieve the goal
of measuring performance loss, http load was conﬁgured to
use at most one connection at a time with an unlimited rate for
30 s. Alternatively, http load could have been conﬁgured to
measure the number of parallel connections supported by the
server at a given connection rate.
The ﬂood tolerance of the EFW/ADF was tested using an
additional machine as the hypothetical attacker, as seen in
Figure 1. Tests were carried out by sending a packet ﬂood at
the target and then taking bandwidth measurements between
the client and the target. If the ﬂood was able to prevent the
measurement from succeeding (i.e., 0 Mbps), then the denial-
of-service attempt was deemed successful. The implementa-
tion of our ﬂood generator is documented in [11].
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:47 UTC from IEEE Xplore.  Restrictions apply. 
for rule-sets containing less than 64 rules on a 100 Mbps net-
work.
When the ADF was conﬁgured to use VPGs, the perfor-
mance drop was more signiﬁcant than that seen with a non-
VPG rule-set. We believe this is due to the additional encryp-
tion/decryption overhead for all VPG packets processed by
the ADF. When additional non-matching VPGs (those that
did not match the packets of the VPG under test) were in-
serted into the rule-set, the performance did not decrease by
any appreciable amount. That implies that the ADF is able to
avoid decrypting incoming packets until they reach the match-
ing VPG rule.
 1
 94
 90
 80
 70
 60
 50
 40
 30
 20
)
s
p
b
M
(
i
h
t
d
w
d
n
a
B
e
b
a
l
l
i
a
v
A
Firewall Rules Traversed Before Action
 56
 48
 40
 16
 8
 24
 32
 64
iptables
EFW
ADF
ADF (VPG)
 0
 1
 2
 3
 4
Firewall Rules Tranversed Before Action (VPG)
Figure 2. Available Bandwidth as Rules Are Added
to the Rule-Set
4.2. Available bandwidth during ﬂoods
The poor performance of the EFW/ADF indicated that a
packet ﬂood may easily overload the EFW/ADF card. To
measure ﬂood tolerance, another experiment was used. First,
a packet ﬂood was directed at the ﬁrewall, and then the avail-
able bandwidth was measured.
If the ﬂood consumed all
of the ﬁrewall resources, then there would be no bandwidth
available. As with the previous bandwidth measurements, this
measurement indirectly measures maximum throughput. In
this experiment we measured the maximum throughput of the
minimal, one rule, rule-set.
At each of nine ﬂood rates, three bandwidth measurements
were taken and averaged. The results are shown in Figure
3(a). For both the EFW and ADF, a major portion of band-
width was lost with a ﬂood of 16 000 packets per second.
A ﬂood with 20 000 packets per second caused the available
bandwidth to drop to almost zero, thus creating a success-
ful denial-of-service attack. The drastic bandwidth loss seen
in the EFW/ADF did not occur for either the standard NIC or
iptables, which both supported 77 Mbps when ﬂooded with
20 000 packets per second. That leads to the conclusion that
the EFW and ADF are alone responsible for the loss. In addi-
tion, the ﬂood tolerance of a single VPG was interesting due
to the near-linear relation between bandwidth and ﬂood rate.
4.3. Minimum ﬂood rate
From the previous experiment, it was clear that even the
simple one-rule rule-set is vulnerable to denial-of-service at-
tacks. However, it would be rare to ﬁnd an embedded ﬁrewall
that was deployed with such a simple rule-set. Therefore, it is
important to determine if the addition of rules to the rule-set
decreases the minimum required ﬂood rate.
We deﬁne the minimum ﬂood rate to be the minimum
packet rate with which an attacker must ﬂood the ﬁrewall in
order to successfully cause a denial of service. The minimum
packet rate was determined by incrementally increasing the
ﬂood rate until the measured bandwidth fell to approximately
0 Mbps. We tested two different rule-set classes: one with the
ﬂood packets being allowed by the rule-set and another with
the ﬂood packets denied. In each case, the action (allow or
deny) was taken on at rules 1, 8, 16, 32, and 64. The results
are presented in Figure 3(b).
With only eight rules, the performance was low enough
that an attacker on a 10 Mbps network could easily cause a
denial-of-service attack if the ﬂood packets were being al-
lowed by the rule-set. When the largest rule-set was enforced,
the attacker host only needed to generate 4500 packets/s to
create a denial-of-service.
We found that some ﬂood tolerance could be gained by
denying the ﬂood packets. This effect, though, was actually
due to the lack of any outgoing TCP responses that were being
generated when the ﬂood packets reached the host. When at-
tack packets are dropped, the host will not receive the packet;
thus, no outgoing response packets are sent. As a result, in
the experiment, total trafﬁc through the ﬁrewall was halved,
doubling the required ﬂood rate.
In conﬂict with the earlier recommendation to place
bandwidth-sensitive services early in the rule-set, it is also im-
portant for the policy to deny any potential sources of attack
early in the rule-set. However, early denial is only partially ef-
fective in preventing ﬂood attacks, given the attacker’s ability
to spoof packets that will traverse deeper into the rule-set.
During the experiments it was not possible to capture any
data for the EFW Deny-All case, because the card would stop
processing packets when it was ﬂooded with over 1000 pack-
ets/s. Restarting the ﬁrewall agent software restored function-
ality to the NIC until the next ﬂood test. No solution was
found.
As expected, iptables was able to withstand any packet
ﬂood attack directed at it. Hoffman found that iptable’s per-
formance [10] had 22% network utilization with a 100 rule
rule-set on a 100 Mbps network (with 64-byte frames). This
utilization translates to approximately 33 000 packets/s; thus,
with only 64 rules, it is unlikely that our ﬂood generator was
able to achieve a rate sufﬁcient to ﬂood the ﬁrewall.
4.4. HTTP performance
indicate that
The denial-of-service experiments
the
EFW/ADF may have a signiﬁcant effect on application per-
formance. Because there is no easy way to convert raw packet
performance to application-level performance, we performed
an additional experiment measuring web server performance.
HTTP performance tests were run against an apache2 web
server. The measurements provided direct insight into the per-
formance decrease associated with the ﬁrewall ﬁltering. As
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:47 UTC from IEEE Xplore.  Restrictions apply. 
)
s
p
b
M
(
l
e
u
R
l
l
a
w
e
r
i
F
e
n
O
h
t
i
w
h
t
i
d
w
d
n
a
B
e
b
a
l
l
i
a
v
A
No Firewall
iptables
EFW
ADF
ADF (VPG)
 94
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
 0
 4000
 8000
 12000  16000  20000
Flood Rate (Packets/s)
)
s
/
s
t
e
k
c
a
P
(
e
t
l
a
R
d
o
o
F
e
c
v
r
e
S
i
-
f
i
o
-
l
a
n