watch
为表达式设置观察点。每当一个表达式的值改变时，观察点就会停止执行您的程
序。
watch [-l|-location]  如果给出了 -l 或者 -location ，则
它会对 expr 求值并观察它所指向的内存。
另外 rwatch 表示在访问时停止， awatch 表示在访问和改变时都停止。
step -- s
单步执行程序，直到到达不同的源码行。
step [N] 参数 N 表示执行 N 次（或由于另一个原因直到程序停止）。
262
2.3.1 GDB
reverse-step
反向步进程序，直到到达另一个源码行的开头。
reverse-step [N] 参数 N 表示执行 N 次（或由于另一个原因直到程序停
止）。
next -- n
单步执行程序，执行完子程序调用。
next [N]
与 step 不同，如果当前的源代码行调用子程序，则此命令不会进入子程序，而
是继续执行，将其视为单个源代码行。
reverse-next
反向步进程序，执行完子程序调用。
reverse-next [N]
如果要执行的源代码行调用子程序，则此命令不会进入子程序，调用被视为一个指
令。
return
您可以使用 return 命令取消函数调用的执行。如果你给出一个表达式参数，它
的值被用作函数的返回值。
return  将 expression 的值作为函数的返回值并使函数
直接返回。
finish -- fin
执行直到选定的栈帧返回。
finish
263
2.3.1 GDB
until -- u
执行程序直到大于当前栈帧或当前栈帧中的指定位置（与 break 命令相同的参
数）的源码行。此命令常用于通过一个循环，以避免单步执行。
until  继续运行程序，直到达到指定的位置，或者当前栈帧返
回。
continue -- c
在信号或断点之后，继续运行被调试的程序。
continue [N]
如果从断点开始，可以使用数字 N 作为参数，这意味着将该断点的忽略计数设置
为 N - 1 (以便断点在第 N 次到达之前不会中断)。
print -- p
求表达式 expr 的值并打印。可访问的变量是所选栈帧的词法环境，以及范围为全
局或整个文件的所有变量。
print [expr]
print /f [expr] 通过指定 /f 来选择不同的打印格式，其中 f 是一个
指定格式的字母
x
检查内存。
x/nfu 
x 
n , f , 和 u 都是可选参数，用于指定要显示的内存以及如何格式
化。
addr 是要开始显示内存的地址的表达式。
n 重复次数（默认值是 1），指定要显示多少个单位（由 u 指定）的
内存值。
f 显示格式（初始默认值是 x ），显示格式是
264
2.3.1 GDB
print('x'，'d'，'u'，'o'，'t'，'a'，'c'，'f'，'s') 使用的格式
之一，再加 i （机器指令）。
u 单位大小， b 表示单字节， h 表示双字节， w 表示四字节， g
表示八字节。
display
每次程序停止时打印表达式 expr 的值。
display 
display/fmt 
display/fmt 
fmt 用于指定显示格式。对于格式 i 或 s ，或者包括单位大小或单位数量，
将表达式 addr 添加为每次程序停止时要检查的内存地址。
disassemble -- disas
反汇编命令。
disas  反汇编指定函数
disas  反汇编某地址所在函数
disas   反汇编从开始地址到结束地址的部分
undisplay
取消某些表达式在程序停止时自动显示。参数是表达式的编号（使用 info
display 查询编号）。不带参数表示取消所有自动显示表达式。
disable display
禁用某些表达式在程序停止时自动显示。禁用的显示项目被再次启用。参数是表达
式的编号（使用 info display 查询编号）。不带参数表示禁用所有自动显示表
达式。
enable display
265
2.3.1 GDB
启用某些表达式在程序停止时自动显示。参数是重新显示的表达式的编号（使用
info display 查询编号）。不带参数表示启用所有自动显示表达式。
help -- h
打印命令列表。
help  您可以获取该类中各个命令的列表。
help  显示如何使用该命令的简述。
attach
挂接到 GDB 之外的进程或文件。将进程 ID 或设备文件作为参数。
attach 
run -- r
启动被调试的程序。可以直接指定参数，也可以用 set args 设置（启动所需
的）参数。还允许使用 > , > 进行输入和输出重定向。
甚至可以运行一个脚本，如：
run `python2 -c 'print "A"*100'`
backtrace -- bt
打印整个栈的回溯。
bt 打印整个栈的回溯，每个栈帧一行。
bt n 类似于上，但只打印最内层的 n 个栈帧。
bt -n 类似于上，但只打印最外层的 n 个栈帧。
bt full n 类似于 bt n ，还打印局部变量的值。
注意：使用 gdb 调试时，会自动关闭 ASLR，所以可能每次看到的栈地址都不
变。
266
2.3.1 GDB
ptype
打印类型 TYPE 的定义。
ptype[/FLAGS] TYPE-NAME | EXPRESSION
参数可以是由 typedef 定义的类型名， 或者 struct STRUCT-TAG 或者
class CLASS-NAME 或者 union UNION-TAG 或者 enum ENUM-TAG 。
set follow-fork-mode
当程序 fork 出一个子进程的时候，gdb 默认会追踪父进程（ set follow-fork-
mode parent ），但也可以使用命令 set follow-fork-mode child 让其追踪
子进程。
另外，如果想要同时追踪父进程和子进程，可以使用命令 set detach-on-fork
off （默认为 on ），这样就可以同时调试父子进程，在调试其中一个进程时，另
一个进程被挂起。如果想让父子进程同时运行，可以使用 set schedule-
multiple on （默认为 off ）。
但如果程序是使用 exec 来启动了一个新的程序，可以使用 set follow-exec-
mode new （默认为 same ） 来新建一个 inferior 给新程序，而父进程的 inferior
仍然保留。
thread apply all bt
打印出所有线程的堆栈信息。
generate-core-file
将调试中的进程生成内核转储文件。
directory -- dir
设置查找源文件的路径。
或者使用 gdb 的 -d 参数，例如： gdb a.out -d /search/code/
267
2.3.1 GDB
gdb-peda
当 gdb 启动时，它会在当前用户的主目录中寻找一个名为 .gdbinit 的文件；如
果该文件存在，则 gdb 就执行该文件中的所有命令。通常，该文件用于简单的配置
命令。但是 .gdbinit 的配置十分繁琐，因此对 gdb 的扩展通常用插件的方式来
实现，通过 python 的脚本可以很方便的实现需要的功能。
PEDA（Python Exploit Development Assistance for GDB）是一个强大的 gdb 插
件。它提供了高亮显示反汇编代码、寄存器、内存信息等人性化的功能。同时，
PEDA 还有一些实用的新命令，比如 checksec 可以查看程序开启了哪些安全机制
等等。
安装
安装 peda 需要的软件包：
$ sudo apt-get install nasm micro-inetd
$ sudo apt-get install libc6-dbg vim ssh
安装 peda：
$ git clone https://github.com/longld/peda.git ~/peda
$ echo "source ~/peda/peda.py" >> ~/.gdbinit
$ echo "DONE! debug your program with gdb and enjoy"
如果系统为 Arch Linux，则可以直接安装：
$ yaourt -S peda
peda命令
aslr -- 显示/设置 gdb 的 ASLR
asmsearch -- Search for ASM instructions in memory
asmsearch "int 0x80"
asmsearch "add esp, ?" libc
268
2.3.1 GDB
assemble -- On the fly assemble and execute instructions using NASM
assemble
assemble $pc
> mov al, 0xb
> int 0x80
> end
checksec -- 检查二进制文件的安全选项
cmpmem -- Compare content of a memory region with a file
cmpmem 0x08049000 0x0804a000 data.mem
context -- Display various information of current execution context
context_code -- Display nearby disassembly at $PC of current
execution context
context_register -- Display register information of current execution
context
context_stack -- Display stack of current execution context
context reg
context code
context stack
crashdump -- Display crashdump info and save to file
deactive -- Bypass a function by ignoring its execution (eg sleep/alarm)
deactive setresuid
deactive chdir
distance -- Calculate distance between two addresses
dumpargs -- 在调用指令停止时显示传递给函数的参数
dumpmem -- Dump content of a memory region to raw binary file
dumpmem libc.mem libc
dumprop -- 在特定的内存范围显示 ROP gadgets
dumprop
dumprop binary "pop"
eflags -- Display/set/clear/toggle value of eflags register
elfheader -- 获取正在调试的 ELF 文件的头信息
elfheader
elfheader .got
elfsymbol -- 从 ELF 文件中获取没有调试信息的符号信息
269
2.3.1 GDB
elfsymbol
elfsymbol printf
gennop -- Generate abitrary length NOP sled using given characters
gennop 500
gennop 500 "\x90"
getfile -- Get exec filename of current debugged process
getpid -- Get PID of current debugged process
goto -- Continue execution at an address
help -- Print the usage manual for PEDA commands
hexdump -- Display hex/ascii dump of data in memory
hexdump $sp 64
hexdump $sp /20
hexprint -- Display hexified of data in memory
hexprint $sp 64
hexprint $sp /20
jmpcall -- Search for JMP/CALL instructions in memory
jmpcall
jmpcall eax
jmpcall esp libc
loadmem -- Load contents of a raw binary file to memory
loadmem stack.mem 0xbffdf000
lookup -- 搜索属于内存范围的地址的所有地址/引用
lookup address stack libc
lookup pointer stack ld-2
nearpc -- Disassemble instructions nearby current PC or given address
nearpc 20
nearpc 0x08048484
nextcall -- Step until next 'call' instruction in specific memory range
nextcall cpy
nextjmp -- Step until next 'j*' instruction in specific memory range
nextjmp
nxtest -- Perform real NX test to see if it is enabled/supported by OS
patch -- 使用字符串/十六进制字符串/整形数
patch $esp 0xdeadbeef
patch $eax "the long string"
patch (multiple lines)
270
2.3.1 GDB
pattern -- 生成，搜索或写入循环 pattern 到内存
pattern_arg -- Set argument list with cyclic pattern
pattern_create -- Generate a cyclic pattern
pattern_env -- Set environment variable with a cyclic pattern
pattern_offset -- Search for offset of a value in cyclic pattern
pattern_patch -- Write a cyclic pattern to memory
pattern_search -- Search a cyclic pattern in registers and memory
pattern create 2000
pattern create 2000 input
pattern offset $pc
pattern search
pattern patch 0xdeadbeef 100
payload -- Generate various type of ROP payload using ret2plt
payload copybytes
payload copybytes target "/bin/sh"
payload copybytes 0x0804a010 offset
pdisass -- Format output of gdb disassemble command with colors
pdisass $pc /20
pltbreak -- Set breakpoint at PLT functions match name regex
pltbreak cpy
procinfo -- 显示调试进程的 /proc/pid/
procinfo
procinfo fd
profile -- Simple profiling to count executed instructions in the program
pyhelp -- Wrapper for python built-in help
pyhelp peda
pyhelp hex2str
pshow -- 显示各种 PEDA 选项和其他设置
pshow
pshow option context
pset -- 设置各种 PEDA 选项和其他设置
pset arg '"A"*200'
pset arg 'cyclic_pattern(200)'
pset env EGG 'cyclic_pattern(200)'
pset option context "code,stack"
pset option badchars "\r\n"
271
2.3.1 GDB
readelf -- 获取 ELF 的文件头信息
readelf libc .text
refsearch -- Search for all references to a value in memory ranges
refsearch "/bin/sh"
refsearch 0xdeadbeef
reload -- Reload PEDA sources, keep current options untouch
ropgadget -- 获取二进制或库的常见 ROP gadgets
ropgadget
ropgadget libc
ropsearch -- 搜索内存中的 ROP gadgets
ropsearch "pop eax"
ropsearch "xchg eax, esp" libc
searchmem|find -- 搜索内存中的 pattern; 支持正则表达式搜索
find "/bin/sh" libc
find 0xdeadbeef all