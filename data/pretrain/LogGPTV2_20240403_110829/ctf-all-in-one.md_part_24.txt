### GDB 命令详解

#### `watch`
- **功能**：为表达式设置观察点。每当表达式的值发生变化时，程序将暂停执行。
- **语法**：
  - `watch expr`：在表达式 `expr` 的值发生变化时停止。
  - `watch -l expr` 或 `watch -location expr`：对 `expr` 求值并观察它所指向的内存。
- **相关命令**：
  - `rwatch expr`：在访问表达式 `expr` 所指向的内存时停止。
  - `awatch expr`：在访问或修改表达式 `expr` 所指向的内存时停止。

#### `step` (`s`)
- **功能**：单步执行程序，直到到达不同的源码行。
- **语法**：
  - `step [N]`：执行 `N` 次（或由于其他原因直到程序停止）。

#### `reverse-step`
- **功能**：反向步进程序，直到到达另一个源码行的开头。
- **语法**：
  - `reverse-step [N]`：执行 `N` 次（或由于其他原因直到程序停止）。

#### `next` (`n`)
- **功能**：单步执行程序，但不进入子程序调用。
- **语法**：
  - `next [N]`：执行 `N` 次（或由于其他原因直到程序停止）。

#### `reverse-next`
- **功能**：反向步进程序，但不进入子程序调用。
- **语法**：
  - `reverse-next [N]`：执行 `N` 次（或由于其他原因直到程序停止）。

#### `return`
- **功能**：取消函数调用的执行，并可选地指定返回值。
- **语法**：
  - `return [expression]`：将 `expression` 的值作为函数的返回值并使函数直接返回。

#### `finish` (`fin`)
- **功能**：执行直到选定的栈帧返回。
- **语法**：
  - `finish`

#### `until` (`u`)
- **功能**：执行程序直到大于当前栈帧或当前栈帧中的指定位置。
- **语法**：
  - `until [location]`：继续运行程序，直到达到指定的位置，或者当前栈帧返回。

#### `continue` (`c`)
- **功能**：在信号或断点之后，继续运行被调试的程序。
- **语法**：
  - `continue [N]`：如果从断点开始，可以使用数字 `N` 作为参数，这意味着将该断点的忽略计数设置为 `N - 1`。

#### `print` (`p`)
- **功能**：求表达式 `expr` 的值并打印。
- **语法**：
  - `print [expr]`
  - `print /f [expr]`：通过指定 `/f` 来选择不同的打印格式，其中 `f` 是一个指定格式的字母。

#### `x`
- **功能**：检查内存。
- **语法**：
  - `x/nfu addr`：显示内存地址 `addr` 处的 `n` 个单位大小为 `u` 的内存值，格式为 `f`。
  - `n`：重复次数（默认值是 1）。
  - `f`：显示格式（初始默认值是 `x`）。
  - `u`：单位大小（`b` 表示单字节，`h` 表示双字节，`w` 表示四字节，`g` 表示八字节）。

#### `display`
- **功能**：每次程序停止时打印表达式 `expr` 的值。
- **语法**：
  - `display [expr]`
  - `display/fmt [expr]`：指定显示格式。

#### `disassemble` (`disas`)
- **功能**：反汇编命令。
- **语法**：
  - `disas [function]`：反汇编指定函数。
  - `disas [address]`：反汇编某地址所在函数。
  - `disas [start, end]`：反汇编从开始地址到结束地址的部分。

#### `undisplay`
- **功能**：取消某些表达式在程序停止时自动显示。
- **语法**：
  - `undisplay [num]`：取消编号为 `num` 的表达式。

#### `disable display`
- **功能**：禁用某些表达式在程序停止时自动显示。
- **语法**：
  - `disable display [num]`：禁用编号为 `num` 的表达式。

#### `enable display`
- **功能**：启用某些表达式在程序停止时自动显示。
- **语法**：
  - `enable display [num]`：启用编号为 `num` 的表达式。

#### `help` (`h`)
- **功能**：打印命令列表。
- **语法**：
  - `help [command]`：获取该命令的简述。
  - `help [category]`：获取该类中各个命令的列表。

#### `attach`
- **功能**：挂接到 GDB 之外的进程或文件。
- **语法**：
  - `attach [pid|file]`：将进程 ID 或设备文件作为参数。

#### `run` (`r`)
- **功能**：启动被调试的程序。
- **语法**：
  - `run [args]`：可以直接指定参数，也可以用 `set args` 设置参数。

#### `backtrace` (`bt`)
- **功能**：打印整个栈的回溯。
- **语法**：
  - `bt`：打印整个栈的回溯。
  - `bt n`：只打印最内层的 `n` 个栈帧。
  - `bt -n`：只打印最外层的 `n` 个栈帧。
  - `bt full n`：打印局部变量的值。

#### `ptype`
- **功能**：打印类型 `TYPE` 的定义。
- **语法**：
  - `ptype[/FLAGS] TYPE-NAME | EXPRESSION`

#### `set follow-fork-mode`
- **功能**：设置当程序 fork 出一个子进程时 GDB 的追踪模式。
- **语法**：
  - `set follow-fork-mode [parent|child]`

#### `thread apply all bt`
- **功能**：打印出所有线程的堆栈信息。
- **语法**：
  - `thread apply all bt`

#### `generate-core-file`
- **功能**：将调试中的进程生成内核转储文件。
- **语法**：
  - `generate-core-file`

#### `directory` (`dir`)
- **功能**：设置查找源文件的路径。
- **语法**：
  - `directory [path]`

#### `gdb-peda`
- **功能**：GDB 插件，提供了高亮显示反汇编代码、寄存器、内存信息等人性化的功能。
- **安装**：
  - `sudo apt-get install nasm micro-inetd libc6-dbg vim ssh`
  - `git clone https://github.com/longld/peda.git ~/peda`
  - `echo "source ~/peda/peda.py" >> ~/.gdbinit`

#### `peda` 命令
- **功能**：提供多种实用命令，如 ASLR 显示、反汇编搜索、内存操作等。
- **常用命令**：
  - `aslr`：显示/设置 GDB 的 ASLR。
  - `asmsearch`：在内存中搜索 ASM 指令。
  - `assemble`：即时汇编和执行指令。
  - `checksec`：检查二进制文件的安全选项。
  - `cmpmem`：比较内存区域与文件的内容。
  - `context`：显示当前执行上下文的各种信息。
  - `crashdump`：显示崩溃信息并保存到文件。
  - `deactive`：绕过某个函数的执行。
  - `distance`：计算两个地址之间的距离。
  - `dumpargs`：在调用指令停止时显示传递给函数的参数。
  - `dumpmem`：将内存区域的内容导出到原始二进制文件。
  - `dumprop`：在特定的内存范围显示 ROP gadgets。
  - `eflags`：显示/设置/清除/toggle eflags 寄存器的值。
  - `elfheader`：获取正在调试的 ELF 文件的头信息。
  - `elfsymbol`：从 ELF 文件中获取没有调试信息的符号信息。
  - `gennop`：生成任意长度的 NOP sled。
  - `getfile`：获取当前调试进程的可执行文件名。
  - `getpid`：获取当前调试进程的 PID。
  - `goto`：继续执行到指定地址。
  - `hexdump`：显示内存数据的十六进制/ASCII 倾倒。
  - `hexprint`：显示内存数据的十六进制表示。
  - `jmpcall`：在内存中搜索 JMP/CALL 指令。
  - `loadmem`：将原始二进制文件的内容加载到内存。
  - `lookup`：搜索属于内存范围的所有地址/引用。
  - `nearpc`：反汇编当前 PC 或指定地址附近的指令。
  - `nextcall`：步进直到下一个 'call' 指令。
  - `nextjmp`：步进直到下一个 'j*' 指令。
  - `nxtest`：进行真实的 NX 测试以查看是否由操作系统支持。
  - `patch`：使用字符串/十六进制字符串/整数值修补内存。
  - `pattern`：生成、搜索或写入循环 pattern 到内存。
  - `payload`：生成各种类型的 ROP 负载。
  - `pdisass`：使用颜色格式化 GDB 反汇编命令的输出。
  - `pltbreak`：在匹配名称正则表达式的 PLT 函数处设置断点。
  - `procinfo`：显示调试进程的 `/proc/pid/` 信息。
  - `profile`：简单性能分析以统计程序中执行的指令数。
  - `pyhelp`：Python 内置帮助的包装器。
  - `pshow`：显示各种 PEDA 选项和其他设置。
  - `pset`：设置各种 PEDA 选项和其他设置。
  - `readelf`：获取 ELF 文件头信息。
  - `refsearch`：在内存范围内搜索所有对某个值的引用。
  - `reload`：重新加载 PEDA 源代码，保持当前选项不变。
  - `ropgadget`：获取二进制或库的常见 ROP gadgets。
  - `ropsearch`：在内存中搜索 ROP gadgets。
  - `searchmem` 或 `find`：在内存中搜索 pattern；支持正则表达式搜索。

这些命令和功能可以帮助您更有效地使用 GDB 进行调试。希望这些优化后的说明对您有所帮助！