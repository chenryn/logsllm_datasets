**作者：Hcamael@知道创宇404实验室  
时间：2019年10月21日**

在近期对路由器进行调试时，我不慎将CFE（Common Firmware Environment）刷写失败，导致设备无法正常启动。随后了解到可以通过JTAG接口尝试修复该问题，因此我开始了对JTAG技术的研究。最初的目标仅仅是恢复路由器功能，并未打算深入研究。

### 救砖尝试

故障路由器型号为LinkSys wrt54g v8，其主要硬件配置如下：
- CPU: BCM5354
- Flash: K8D6316UBM

首先使用Jtagulator工具确定了设备上JTAG引脚的具体位置。虽然公司提供了一个J-Link调试器，但遗憾的是，尝试连接并未成功识别目标设备。之后通过网络搜索发现了一款名为[tjtag-pi](https://github.com/oxplot/tjtag-pi)的开源工具，它允许用户利用树莓派作为JTAG控制器。为了能够顺利使用这一方案，我学习了关于树莓派的基本操作方法。

#### 树莓派Pins设置

本次实验使用的树莓派型号为Raspberry Pi 3 (rpi3)，其GPIO引脚布局如图所示（或可通过运行`gpio readall`命令查看）。Python库`RPi.GPIO`提供了便捷的方式来控制这些引脚。例如：

```python
from RPi import GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(2, GPIO.OUT)  # 设置第2号引脚为输出模式
GPIO.setup(3, GPIO.IN)   # 设置第3号引脚为输入模式
```

初始化完成后，可以使用`output()`和`input()`函数分别设置输出值及读取输入状态。

将树莓派与路由器正确连接后，运行`tjtag-pi`程序却遇到了障碍——在尝试向Flash写入数据过程中经常卡住。尽管调整参数有时能够顺利完成写入，但最终未能成功恢复CFE。于是决定自行开发解决方案。

### JTAG原理概述

通常情况下，支持JTAG的设备会配备至少十个引脚，其中一半用于接地，另一半则包含四个关键信号线：
- TDI (Test Data In): 测试数据输入
- TDO (Test Data Out): 测试数据输出
- TMS (Test Mode Select): 测试模式选择
- TCK (Test Clock): 测试时钟

JTAG架构包括TAP Controller等组件，工作流程简要说明如下：
- 通过TMS发送特定序列可使TAP进入不同状态。
- 在SHIFT-IR状态下，Instruction Register开始接收来自TDI的数据；当切换至UPDATE-IR时，解析指令并执行相应操作。
- SHIFT-DR模式下则负责处理数据寄存器的操作。

由于缺乏BCM5354芯片的确切BSD文件资料，故参考了同厂家其他型号产品的文档以获取必要信息。根据这些资料编写了基础的JTAG通信函数，实现了复位、设置指令等功能。

接下来的工作将聚焦于进一步分析Flash存储器相关文档，并探索更有效的恢复策略。研究成果将在后续文章中继续分享给大家。

* * *

以上是对原文内容的整理与优化，希望对你有所帮助！如果有任何需要补充或修改的地方，请随时告知。