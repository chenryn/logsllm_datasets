6 
S
e
n
s
i
t
i
v
i
t
y
2 
0 
3 
5 
5 
8 
7 
2 
20 
2 
2 
F
F
S
e
n
s
i
t
i
v
i
t
y
11 
0 
0 
11 
9 
8 
17 
11 
67 
12 
5 
S
e
n
s
i
t
i
v
i
t
y
4 
0 
6 
7 
8 
16 
10 
4 
44 
3 
6 
Table 7: Contribution from each functional unit to the total error count, sensitivity of combinational logic, flip-flops 
and overall block (all the numbers are normalized and expressed in percentages 
Results in Table 7 indicate, that functional units that contrib-
ute  maximum  towards  error  manifestation  are:  Register  File
(about 27%), Bus interface unit (about 13%), and Load-store 
unit (about 15%) regardless of the fault duration. Units most 
sensitive  to  faults  are  the  Bus  interface  unit  and  Instruction 
fetch. In both cases a fault usually results in an incorrect ad-
dress  being  accessed  and/or  a  wrong  instruction  being  exe-
cuted, which may hang or crash the application. 
From a designer’s point of view the overall error contribution 
of  a  component  indicates  which  functional  unit  should  be 
protected to reduce the overall error manifestation rate, while 
the fault sensitivity pinpoints, which unit to target in order to 
maximize the effectiveness of the protection in relation to the 
area occupied by the unit. To illustrate this point, let us calcu-
late  the  area  effectiveness  of  replication-and-voting  for  two 
functional units with significantly different fault sensitivities. 
The protection effectiveness  of replicating the  unit U can  be 
calculated as follows: 
Protection_Effectiveness (U) = manifestation rate (U)  /  
area_occupation(U)
This factor gives the decrease in the manifestation rate at the 
expense of an increase in area occupation. Units  with  higher 
protection effectiveness indexes are a better choice for repli-
cation.  From  simple  algebra  it  is  possible  to  see  that  this 
number is proportional to the sensitivity.
Scenario 1: Bus interface unit (fault sensitivity 44%, for fault 
duration of 60ns; see Table 7) 
Protection_Effectiveness (Biu) = manifestation rate(Biu) / 
area_occupation(Biu) = 15 / 1.3 = 11.5 
Scenario 2: Register file (fault sensitivity 6%, for fault dura-
tion of 60ns; see Table 7) 
Protection_Effectiveness (Rf) = manifestation rate(Rf) / 
area_occupation(Rf) = 27 / 21.4  = 1.3 
Note that, the units with higher sensitivities are also the ones 
with  higher  protection  effectiveness  indexes.  Even  if  the 
manifestation rate of the Rf is higher than that of Biu, the lat-
ter  is  definitely  a  better  selection  for  replication  under  the 
area constraint. This relatively simple example illustrates that 
the  fault  sensitivity  can  be  a  useful  measure  for  deciding 
which unit to protect (replicate in our example) for maximum 
benefit under limited resources. 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:13 UTC from IEEE Xplore.  Restrictions apply. 
A  detailed  analysis  on  fault  sensitivity  also  reveals  that  the 
flip-flops  are  more  sensitive  than  combinational  logic,  since 
the  flip-flops  hold  the  architectural  microstate  of  the  proces-
sor. However, there is clear evidence that, for functional units 
responsible  for  data  manipulation,  combinational  logic  be-
comes  more  fault  sensitive  than  flip-flops.  For  example,  the 
sensitivity  of  combinational  logic  versus  flip-flops  for  In-
struction  fetch  (19%  versus  8%  for  60ns  fault  duration,  re-
spectively)  and  Dispatcher  (6%  versus  5%,  respectively)  is 
higher. This can be explained by the fact that these units are 
in charge of decoding the instructions and generating the sig-
nals  controlling  the  data-path  through  combinational  net-
works. Therefore, a fault in the combinational logic can eas-
ily propagate and corrupt the computation. 
Fault Dura-
tion 
Functional 
Unit 
Alu 
Bru 
Biu 
Cu 
Dp 
If 
Lsu 
Mdu 
Rf 
Rb 
Wb 
CL 
90 
78 
100 
50 
100 
87 
73 
0 
100 
96 
82 
30 ns 
60 ns 
FF 
10 
22 
0 
50 
0 
13 
28 
0 
0 
5 
18 
CL 
92 
81 
99 
50 
99 
88 
83 
100 
100 
98 
79 
FF 
8 
19 
1 
50 
1 
12 
17 
0 
0 
2 
21 
Table 8: Error contribution from combinational logic and 
flip-flops (all the numbers expressed in percentages) 
From the data in Table 8, it is evident that the total number of 
manifested  errors  contributed  by  the  combinational  logic  is 
dominant  (50%  to  100%  of  observed  errors),  under  the  as-
sumption that the faults in the combinational logic and in the 
flip-flops  are  equally  probable.  While  in  the  current  genera-
tion processors flip-flops are more likely to upset the system 
than  the  combinational  circuits  (the  masking  effect),  results 
from Table 8 indicate that the increasing complexity of com-
binational logic in the future generation processors is likely to 
change  this  situation.  As  a  result,  for  next-generation  tech-
nologies, using parity or ECC to protect the state of the proc-
essor  may  not  be  sufficient  and  more  aggressive  protection 
strategies should be deployed, e.g., application aware runtime 
monitoring of processor’s internal behavior (e.g., [24]). 
5.3 Error Impact at the Application Level 
Table  9  and  Table  10  summarize  the  distribution  of  mani-
fested errors among the outcome categories. One can see that 
about  53%  of  errors  that  propagate  outside  the  processor 
boundaries do not impact the correct behavior of the applica-
tion. The reason is the natural error masking within the appli-
cation. E.g., an error may cause an incorrect value to be writ-
ten into a memory location, however, if the subsequent opera-
tion  overwrites  the  corrupted  location  before  the  corrupted 
data are used, the error is inconsequential  for the correct be-
havior of the application.  
Outcome 
% of Errors 
Crash 
Fail-silent data violation 
Incomplete execution 
No effect 
23% 
13% 
12% 
53% 
Table 9: Error impact at the application level 
Table  10  shows  that,  for  all  the  functional  units,  apart  from 
the Bus interface unit, the likelihood of an error to be masked 
by the application varies between 0.5% and 6.1% for Reorder 
buffer  unit  and  Load-store  unit,  respectively.  Much  higher 
figure  is  observed  for  the  Bus  interface  unit  (34%)  is  due  to 
the  application  specifics.  This  is  because  Biu  controls  the 
usage  of  the  data  bus  and  consequently  errors  in  Biu  may 
often result in loading or storing data from/to incorrect mem-
ory  location.  As  long  as  the  application  does  not  attempt  to 
access an illegal location (which would result in a crash), the 
error  may  impact  outcome  of  a  single  iteration  causing  an 
intermediate  data  sort  to  be  incorrect.  However,  due  to  the 
nature of the bubble sort algorithm, the data will be correctly 
sorted in the following iteration.  
Table  10  shows  that  three  units,  Rf,  If,  and  Dp  account  for 
70% of the crashes. As expected, faults in the If and Biu are 
most  likely  to  cause  crashes  (5%  sensitivity).  This  is  due  to 
the  fact  that  a  fault  in  If  can  corrupt  the  address  field  of  an 
instruction and a fault in the Biu can force an access to illegal 
memory location. Both cases are likely to result in a segmen-
tation fault (or application crash). 
About  63%  of  the  fail  silent  data  violations  are  from  three 
units,  Rf, Lsu,  and  Rb. Rf,  and  Rb  hold  the  application  state, 
and  consequently,  a  fault  can  lead  to  fail  silent  data  corrup-
tion.  Similarly,  a  fault  in  the  Lsu  can  corrupt  a  value 
read/written from/to  memory. While the application  may  not 
crash, it is likely to produce an incorrect result. 
Incomplete  execution  is  mainly  due  to  faults  in  two  func-
tional  units,  Rb and  If,  (which  collectively  contribute  to  al-
most  50%  of  the  cases).  The  data  indicate,  however,  that  a 
fault in the Cu is most likely to lead to incomplete execution 
(13%  sensitivity;  three  times  greater  than  If  sensitivity  4%). 
The  high  sensitivity  of  the  Cu  can  be  explained  by  the  fact 
that a fault in the commit unit could lead to a stall in proces-
sor  pipeline,  although  the  program-counter  continues  to  be 
updated. As a result, application never completes. 
Table  11  shows  the  contribution  of  functional  blocks  to  the 
different  outcome  categories.  The  largest  percentage  of 
crashes  (45%)  and  fail-silence  violations  (40%)  originate 
from errors in the execution block. While the contribution of 
speculation and control blocks is smaller (the two blocks col-
lectively  cause  about  34%  crashes  and  34%  fail-silent  viola-
tions),  the  percentage  is  high  enough  to  justify  the  need  for 
mechanisms  to  contain  those  errors.  It  is  significant  for  in-
complete  executions,  69%  of  the  cases  are  due  to  errors  in 
speculation  (34%)  and  control  (35%)  blocks.  Since  incom-
plete execution can be caused, for example, by a stalled If, a 
stalled  Cu  or  a  corrupted  Rb,  detecting  such  faults  in  the 
processor  boundaries  may  require  dedicated,  processor-level 
techniques. 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:13 UTC from IEEE Xplore.  Restrictions apply. 
Crash
Functional 
Unit 
Contribu-
tion from 
Alu 
Bru
Biu
Cu
Dp
If
Lsu
Mdu
Rf
Rb
Wb
unit 
4% 
1% 
9% 
0% 
13% 
16% 
9% 
0% 
41% 
4% 
3% 
Sensitivity 
of the 
block 
0.4% 
0.8% 
5.1% 
0.0% 
1.4% 
5.4% 
1.4% 
0.0% 
2.2% 
0.4% 
0.5% 
Fail Silent Data 
Violation 
Incomplete Execution 
No Error 
(Fault Masking) 
Contribu-
tion from 
unit 
11% 
5% 
5% 
0% 
8% 
5% 
18% 
0% 
29% 
16% 
3% 
Sensitivity 
of the 
block 
0.5% 
1.6% 
1.7% 
0.0% 
0.5% 
1.0% 
1.6% 
0.0% 
0.8% 
0.8% 
0.2% 
Contribu-
tion from 
unit 
9% 
0% 
3% 
11% 
9% 
23% 
11% 
0% 
9% 