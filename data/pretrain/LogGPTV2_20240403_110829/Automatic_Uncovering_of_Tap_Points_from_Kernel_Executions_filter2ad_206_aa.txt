title:Automatic Uncovering of Tap Points from Kernel Executions
author:Junyuan Zeng and
Yangchun Fu and
Zhiqiang Lin
Automatic Uncovering of Tap Points
from Kernel Executions
Junyuan Zeng, Yangchun Fu, and Zhiqiang Lin(B)
The University of Texas at Dallas, 800 W. Campbell Rd, Richardson, TX 75080, USA
{jzeng,yangchun.fu,zhiqiang.lin}@utdallas.edu
Abstract. Automatic uncovering of tap points (i.e., places to deploy
active monitoring) in an OS kernel is useful in many security applications
such as virtual machine introspection, kernel malware detection, and ker-
nel rootkit proﬁling. However, current practice to extract a tap point for
an OS kernel is through either analyzing kernel source code or manually
reverse engineering of kernel binary. This paper presents AutoTap, the
ﬁrst system that can automatically uncover the tap points directly from
kernel binaries. Speciﬁcally, starting from the execution of system calls
(i.e., the user level programing interface) and exported kernel APIs (i.e.,
the kernel module/driver development interface), AutoTap automati-
cally tracks kernel objects, resolves their kernel execution context, and
associates the accessed context with the objects, from which to derive the
tap points based on how an object is accessed (e.g., whether the object
is created, accessed, updated, traversed, or destroyed). The experimen-
tal results with a number of Linux kernels show that AutoTap is able
to automatically uncover the tap points for many kernel objects, which
would be very challenging to achieve with manual analysis. A case study
of using the uncovered tap points shows that we can use them to build
a robust hidden process detection tool at the hypervisor layer with very
low overhead.
Keywords: Virtual machine introspection · Kernel function reverse
engineering · Active kernel monitoring · (DKOM) rootkit detection
1 Introduction
A tap point [10] is an execution point where active monitoring can be performed.
Uncovering tap points inside an OS kernel is important to many security appli-
cations such as virtual machine introspection (VMI) [15], kernel malware detec-
tion [17], and kernel rootkit proﬁling [19,25]. For example, by tapping the inter-
nal execution of the creation and deletion of process descriptors, it can enable a
VMI tool to track the active running processes [4]. Prior systems mainly hook
the execution of the public exported APIs (e.g., system calls such as fork in
Linux) to track the kernel object creation (e.g., task struct). However, attack-
ers can actually use some of the internal functions to bypass the check and create
c(cid:2) Springer International Publishing Switzerland 2016
F. Monrose et al. (Eds.): RAID 2016, LNCS 9854, pp. 49–70, 2016.
DOI: 10.1007/978-3-319-45719-2 3
50
J. Zeng et al.
the “hidden” objects. Therefore, it would be very useful if we can automatically
identify these internal tap points and hook them for the detection.
Unfortunately, the large code base of an OS kernel makes the uncovering of
tap points non-trivial. Speciﬁcally, an OS kernel tends to have tens of thousands
of functions managing tens of thousands of kernel objects. Meanwhile, it has
very complicated control ﬂow due to the asynchronized events such as interrupts
and exceptions. Finding which execution point can be tapped is daunting at
binary level. In light of this, current practice is to merely rely on human beings
to manually inspect kernel source code (if it is available), or reverse engineer the
kernel binary to identify the tap points.
To advance the state-of-the-art, we present AutoTap, a system for
Automatic uncovering of Tap points directly from kernel binary. We focus on
the tap points that are related to kernel objects since kernel malware often
manipulates them. In particular, based on how an object is accessed, we classify
the tap points into creation, initialization, read, write, traversal, and destroy.
By observing which execution point is responsible for these object accesses, we
derive the corresponding tap points.
The reason to derive tap points by associating kernel objects with the cor-
responding execution context is because diﬀerent kernel objects are usually
accessed in diﬀerent kernel execution context. The context entails not only the
instruction level access such as read or write to a particular ﬁeld of an object, but
also the calling context such as the current function, its call-chain, and its system
call (syscall for brevity henceforth) if the execution is within a particular syscall,
or other contexts such as interrupts. As to-be-demonstrated in this paper, such
knowledge, along with the meaning of the available kernel data structures, is
suﬃcient to derive the tap points for active kernel monitoring.
Having the capability of uncovering the tap points, AutoTap will be valuable
in many security applications. One use case is we can apply AutoTap to detect
the hidden kernel objects by tapping the internal kernel object access functions.
Meanwhile, we can also use AutoTap to reverse engineer the semantics of kernel
functions. For instance, with AutoTap we can now pinpoint the function that
creates, deletes, initializes, updates, and traverses kernel objects. In addition,
we can also identify common functions that operate with many diﬀerent type
of objects, which will be particularly useful to uncover the meanings of kernel
functions especially for closed source OS.
In summary, we make the following contributions:
– We present AutoTap, the ﬁrst system that is able to automatically uncover
the tap points for introspection directly from kernel executions.
– We introduce a novel approach to classify the complicated kernel execution
context into a hierarchical structure, from which to infer function semantics
and derive tap points based on how an object is accessed.
– We have built a proof-of-concept prototype of AutoTap. Our evaluation
results with 10 recent Linux kernels show that our system can directly recog-
nize a large number of tap points for the observed kernel objects.
– We also show how to use our uncovered tap points to build a general hidden
process detection tool, which has very small overhead.
Automatic Uncovering of Tap Points from Kernel Executions
51
2 System Overview
Since the goal of AutoTap is to uncover the tap points for the introspection of
kernel object, we have to ﬁrst track the kernel objects and their types. However,
at binary code level, there is no type information associated with each object
and we have to ﬁrst recover them. Fortunately, our prior system Argos [30]
has addressed this problem. Argos is a type inference system for OS kernels,
and it is able to track the kernel object, assign syntactic types, and even point
out the semantics for a limited number of important kernel objects but not all
of them. Therefore, AutoTap has reused several components from Argos and
also extended them for kernel object type inference.
Having inferred the types of kernel objects, we have to infer the tap points of
our interest. A tap point is usually an instruction address (e.g., a function entry
address) where active monitoring can be performed. Since tap points uncovering
is essentially a reverse engineering problem, we have to start from known knowl-
edge to infer the unknown one [10]. With respect to an OS kernel, the well-known
knowledge would include its syscall interface (for user level programs), and all of
its kernel module development interface (for kernel driver programs). Therefore,
one of the key challenges would be how to leverage these knowledge to system-
atically infer the meaning of the accessed functions, from which to derive the
corresponding tap points.
Key Insights. After analyzing how a typical OS kernel is designed and executed
and also based on the experience from our prior systems including Argos and
REWARDS [22], we have obtained the following insights to address the above
challenges:
– From data access to infer function semantics. A program (with no
exception to OS kernel) is composed of code and data, where code deﬁnes
how to update data and data keeps the updated state. While there are a large
number of kernel functions, from low level data access perspective, we can
classify them into a number of primitive accesses including the basic data read
and write according to how an instruction accesses it. We can also capture
their lifetime based on their allocation and deallocation especially for heap
and stack data. We can even diﬀerentiate further from the ﬁrst time write
(i.e., initialization) to the subsequent write according to the memory write
operations. We can also conclude a piece of code is a traversal function if we
observe it performs memory dereferences to reach other objects (either with
the same type or diﬀerent types).
– From hardware level events to infer function semantics. In addition to
observing the instruction level data access behavior, we can also observe the
hardware level events such as interrupts and exceptions to infer the function
semantics. For example, if a function is always executed in a timer interrupt,
we can conclude it is likely a periodic function (e.g., schedule function);
if it is executed inside a keyboard response interrupt, we can conclude it is a
keystroke interrupt handler.
52
J. Zeng et al.
– From syscall level events to infer function semantics. Another category
of useful information is the system call events. If a function is executed inside
fork, we know this function is likely kernel object creation related; if it is inside
socket send, we know it must be network communication related. Meanwhile,
we also know a fork syscall must create kernel objects such as task struct,
and a send syscall must access a socket object.
– Inferring the semantics of objects from kernel APIs. While kernel has
a large number of kernel objects, not all of them are of attackers’ interest.
Consequently, we have to identify the type of the kernel objects such that we
can pinpoint the tap points of our interest. To this end, we can leverage the
types of the parameters and return values of kernel APIs, the public exported
knowledge used when developing kernel modules, to resolve the object types
(such as whether the object is a task struct). Meanwhile, kernel developers
often have access to a number of kernel header ﬁles (otherwise their modules
may not be compiled). By combining the types resolved from the API argu-
ments and the data structure deﬁnitions from the open header ﬁles, we can
reach and resolve more kernel data structures.
Scope, Assumptions, and Threat Model. To make our discussion more
focused, we target OS kernels executed atop a 32-bit ×86 architecture. To val-
idate our experimental results with the ground truth, we use the open source
Linux kernels as the testing software1. Regarding the scope of the tap points,
we focus on those that are related to dynamically allocated kernel heap objects.
As alluded earlier, we assume the knowledge of kernel APIs, e.g., the kernel
object allocation function (e.g., kmalloc, and kfree) such that AutoTap can
hook and track the kernel object creation and deletion, and the types of the
arguments of the kernel APIs, which will be used to resolve the kernel object
types. Meanwhile, we assume the access of the header ﬁles related to kernel
module development (this is also true for Microsoft Windows), and the data
structure deﬁned in the header ﬁles will also be used to type more kernel objects.
AutoTap aims to discover the tap points for introspection in the existing kernel
legal binary code. If there is any injected code, AutoTap cannot tap their
executions.
Overview. We design AutoTap by using a binary code translation based vir-
tual machine monitor (VMM) Pemu [29], which extends Qemu [2] with an
enhanced dynamic binary instrumentation capability. There are three key com-
ponents inside AutoTap: kernel object tracking, object access resolution, and
tap points uncovering; they work in two phases: an online tracing phase, and an
oﬄine analysis phase (Fig. 1).
1 Note that even though the kernel source code is open, it is still tedious to derive the
tap points manually, and a systematic approach such as AutoTap is needed.
Automatic Uncovering of Tap Points from Kernel Executions
53
In the online phase, starting from the
kernel object creation, kernel object track-
ing tracks the dynamically created ker-
nel objects, their sizes, and their propaga-
tions and indexes them based on the call-
ing context of the object creation for the
monitoring. Whenever there is an access
to these monitored objects, object access
resolution captures the current execution
context, resolves the types of the argu-
ments, resolves the current access (e.g.,
whether it is a read, write, initialization,
allocation, or deallocation), and keeps a
record of the current object access with
the captured execution context if this
record has not been stored yet in the memory. Once we have ﬁnished the online
tracing, we then dump the memory meta-data into a log ﬁle, and our tap points
uncovering will analyze the log ﬁle to eventually derive the tap points. Next, we
present the detailed design and implementation of these components.
Fig. 1. An overview of AutoTap.
3 Design and Implementation
3.1 Kernel Object Tracking
As the focus of AutoTap is to extract the tap points related to the dynamically
allocated kernel objects, we have to ﬁrst (i) track their life time, (ii) assign a
unique type to each object, (iii) track the object propagation and its size such
that we know to which object the address belongs when given a virtual address,
and (iv) resolve the semantic types of kernel objects. Since our prior system
Argos also need to perform these tasks for its type inference, we reused a lot
of code base to handle kernel object tracking. However, there are still some
diﬀerences between AutoTap and Argos on (ii) how we assign syntactic type
to each object and (iv) how we resolve the semantic type of object. Next, we
just describe these diﬀerences. More details on (i) how we track object life time
and (iii) resolve the object size can be found in Argos [30].
Assigning a Syntactic Type to Each Object. In general, there are two
standard approaches to convert dynamic object instances into syntactic forms:
(1) using the callsite address of kmalloc, denoted as P Ckmalloc to represent
the syntactic object type, or (2) using the callsite-chain of kmalloc, denoted as
CCkmalloc to represent the syntactic object type. The ﬁrst approach is intuitive
but it cannot capture the case where kmalloc is wrapped. While the second
approach can capture all the distinctive object allocation, it may over classify
the object types since the same type can be allocated in diﬀerent calling context.
54
J. Zeng et al.
Argos used the ﬁrst approach since it aims to uncover the general types
(context-insensitive). In AutoTap, we adopt the second approach because we
aim to identify the execution point for the tapping, and these points are usually
context sensitive. For instance, a string is a general type but when it is used
in diﬀerent contexts (e.g., to represent a machine name or a process name), it
means diﬀerent type of strings and we may just need to tap a particular type
of string instead of all strings (that is why sometimes we have context-sensitive
tap points). Therefore, we use CCkmalloc to denote the syntactic type for each
dynamic allocated object. The semantic meaning of CCkmalloc will be resolved
later. Also, we use a calling context encoding technique [27] to encode CCkmalloc
with an integer E(CCkmalloc), and store this integer and its corresponding type
with a hash table we call HTtype for easier lookup and decoding.
Resolving the Semantic Type of Object. The syntactic type (CCkmalloc)
assigned to each object is only used to diﬀerentiate objects, and it does not tell the
semantics (i.e., the meaning) of the object. Since the tap points we aim to uncover
are associated to each speciﬁc kernel object (e.g., task struct), we need to resolve
their semantic types. While Argos can recognize semantics for a number of ker-
nel objects if there are unique rules to derive their meanings under certain syscall
context, it cannot recognize all kernel objects. Therefore, we use a diﬀerent app-
roach, which is inspired by our another prior system REWARDS [22], a user level
data structure type inference system. In particular, REWARDS infers the seman-
tics of data structures through the use of well-known semantic type information
from the argument and return value of system call and user level APIs. We adopt the
RWEARDS approach to infer the kernel object semantic types from public known
kernel APIs. However, not all objects can be typed from the argument and return
value of these APIs, and therefore we also leverage the object types deﬁned in the
header ﬁles for kernel module development and track object point-to relations to
infer more object types. To capture the point-to relation between objects, we use
the same taint analysis approach as in Argos.
Summary. Our kernel object tracking will track the life time of the dynamically
allocated objects with a red-black tree we call RBinstance tree that is used to
store , which is indexed by v, where v is the starting
address, s is the corresponding size, Ti is the taint tag for Oi, and E(CCkmalloc)
is the encoded syntactic type of the allocated object. Also, it will maintain a hash
table we call HTtype that uses E(CCkmalloc) as the index key. This HTtype stores
the decoded callsite chain, the resolved semantic type of the objects based on
kernel APIs and available header ﬁles, as well as the captured point-to relations
between them. Also, the resolved access context to each ﬁeld of a particular type
(described next) is also stored in our HTtype.
Automatic Uncovering of Tap Points from Kernel Executions
55
3.2 Object Access Resolution
Once we have captured each kernel
object and its (ﬁeld) propagations, the
next step is to resolve the execution
context when an instruction is access-
ing our monitored object. Note that
the execution context captures how
and when a piece of data gets accessed.
In general, when a piece of data gets
accessed, under dynamic binary code
instrumentation based VMM, what we
can observe includes: (i) which instruc-
tion is accessing the data, (ii) through
what kind of access (read, or write).
However, such information is still at
too low level, and what we want is the high level semantic information that
includes (i) which execution context (e.g., syscall, interrupt, kernel thread) is
accessing the object and under what kind of calling context, and (ii) what the
concrete operation is with respect to the accessed object (e.g., create, read, write,
initialize, allocation, deallocation). Therefore, we have to bridge this gap.
Fig. 2. An illustration of the three top
level kernel execution contexts.
A kernel execution context in fact has a hierarchical structure and it can be
classiﬁed into three layers. From top to bottom, there are syscall level context,
function call level context, and instruction level context. In the following, we
describe how we resolve these contexts and associate them to the accessed kernel
objects.
Resolving Top Level Execution Context. When a given kernel object gets
accessed, we need to determine under which highest level execution context it
is accessed. As shown in Fig. 2, there are three kinds of disjoint highest level
execution contexts:
– (I) Syscall execution context. When a user level program requests a kernel
service, it has to invoke the syscalls. When a syscall gets executed, kernel
control ﬂow will start from the entry point of the syscall, and continue its
execution until this syscall ﬁnishes. There is always a corresponding kernel
stack for each process that tracks the return address of the functions called by
this syscall. Therefore, we have to ﬁrst identify to which process the current
syscall belongs, and identify the entry point and exit point of this syscall.
In ×86, the entry point and exit point of a syscall for Linux platform can
be easily captured by monitoring the syscall enter and exit instructions (e.g.,
sysenter, sysexit, int 0x80, iret). To identify a process context, we use
the base address of kernel stack pointer, i.e., the 19 most signiﬁcant bits of the
kernel esp, denoted MSB19(esp), since kernel stack is unique to each process
or kernel thread, as what we have done in Argos.
Therefore, as shown in Fig. 2, when an instruction is executed between the
syscall entry (Control Flow Transition ➀, CFT ➀ for brevity) and exit point
56
J. Zeng et al.
(CFT ➇), if it is not executed in an interrupt handler’s context (discussed
below), and if the context belongs to the running process, then it is classiﬁed
the syscall execution context. We will resolve the corresponding syscall based
on the eax value when the syscall traps to the kernel for this particular process.
The corresponding process is indexed by the base address of each kernel stack,
which is computed by monitoring the memory write to the kernel esp. We
also use another RB-tree, and we call it RBsys tree to dynamically keep the
MSB19(esp) and the eax that is the syscall number, for each process such
that we can quickly retrieve the syscall number when given a kernel esp if the
execution is executed inside a syscall.
– (II) Top-half of an interrupt handler execution context. While most
of the time kernel is executed under certain syscall context for a particular
process, there are other asynchronous kernel events driven by the interrupts
and exceptions, and they can occur at any time during the syscall execution.
To respond them, modern OS such as Linux kernel usually splits the interrupt
handlers into top-half that requires an immediate response and bottom-half
that can be processed later [6].
As illustrated in Fig. 2, top half of an interrupt can occur at anytime dur-
ing a syscall execution (e.g., when a time slice is over, a key is stroke, or
a packet is arrived). It starts from a hardware event (CFT ➂ which can be
monitored by our VMM), and ends with an iret instruction (CFT ➃). The
execution of a top-half is often very short, and it can use the kernel stack of
the interrupted process to store the return address if there is any function call,
or use a dedicated stack for this particular interrupt depending on how the
interrupt handler is implemented. Meanwhile, an interrupt execution can be
nested. Thus, we have to capture the pair of CFT ➂ and CFT ➃. This can be
tracked by using a stack-like data structure. Through such, the top half of an
interrupt handler can be precisely identiﬁed.
– (III) Bottom-half of an interrupt handler execution context, or ker-
nel thread execution. When the response for an interrupt takes much longer
time, kernel often leaves such an expensive execution to dedicated kernel
threads (to execute the bottom half of an interrupt handler) such as pdflush,
ksoftirqd. Therefore, there must be a context switch event, which can be
observed by the kernel stack exchange. Note that CFT ➄, CFT ➅, and CFT ➆
all denotes the context switch event because of the stack exchange. In other
words, as illustrated in Fig. 2, we can actually uniformly treat them as the
syscall context of user level processes with the only diﬀerence that they do
not have a syscall entry and syscall exit point.
Resolving Middle Level Execution Context. Having identiﬁed the highest
level execution context, we also need to identify the middle level execution con-
text at a function call level that includes which function is executing the current
instruction and the callers of this function. Naturally it leads us to identify the
function call chain. While we can get the call chain by traversing the stack frame
pointer, it requires kernel to be compiled with this information. To make Auto-
Tap more general, we instrument call/ret instruction and use a shadow stack
Automatic Uncovering of Tap Points from Kernel Executions
57
to track the callsite chain. Based on the above three high level disjoint execution
contexts, we maintain the following three kinds of shadow stacks (SS):
– (I) Syscall SS. When a syscall execution (say si) starts, we will create a corre-
sponding SS(si). Then whenever there is a function call under the execution of
si, we additionally push a tuple 
into the corresponding SS(si), and whenever there is a ret executed under this
syscall context, we additionally pop the tuple whose f return addr matches the
return address from the top of SS(si). Note that without this matching check,
there could exist cases that call and return are not strictly paired. Also, the
push/ret of the return address when calling f will still use the original stack.
The reason of tracking the stack ret oﬀset in the original stack is for quickly
retrieving of the entire calling context for context-sensitive tap points, when
given just a kernel stack without instrumenting any call instructions. Then at
any moment, the callsite chain for the current syscall context can be created
by retrieving the value of f return addr in the corresponding kernel stack based
on the location speciﬁed by stack ret oﬀset.
– (II) Top-half SS. When a top half of an interrupt handler for interrupt i (say
ii) is executed, we also create a corresponding SS(ii) to track the call chain
for this interrupt context. When the interrupt returns (observed by iret), we
clear this shadow stack. At anytime during the execution of this interrupt,
we similarly build its callsite chain from SS(ii) as what we do in the syscall
context.
– (III) Kernel Thread SS. If the execution is neither in the syscall context, nor
top half of the interrupt handler, then it must be in kernel thread execution
context (or bottom half of an interrupt), say ti. Similarly, we will create a
corresponding SS(ti) for each of this context. As such, we can retrieve the
callsite chain when a kernel object is accessed under this context.
It should be noted that at runtime there can be multiple instances of each of
these SS, because there can be multiple processes, interrupts, and kernel threads.
We will extract the callsite chain from the corresponding one based on the value
of MSB19(esp).
Resolving Low Level Execution Context. Once we have resolved all these
high level execution contexts, our ﬁnal step is to resolve the low level context
(e.g., read/write) of how an object is accessed and keep a record in the in-memory
meta-data (i.e., our HTtype). Currently, we focus on seven categories of accesses
as presented in Table 1.
Speciﬁcally, whenever there is an access to the monitored kernel object Oi
(including its k-th ﬁeld Fk and the propagations), we will insert an entry if this
has not been inserted to the ﬁeld Fk’s access list that is stored in HTtype, which
is indexed by the encoded syntactic type of Oi (i.e., E(CCkmalloc)), and this
entry consists of  where AT denotes the access types of the seven