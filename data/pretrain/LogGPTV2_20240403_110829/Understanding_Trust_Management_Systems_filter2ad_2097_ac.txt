M,,.,,,, that gives their meaning. The semantics of authoriza- 
tion assertions is specified by MA,,,,, which relies on Ms,,luA 
to define the authorizations granted by a subject. The defini- 
tion of M,,,,,, formalizes the intuition above by requiring the 
action  x to include the requested operation y  and the time 
period  to contain  the request time t. If the delegate flag is 
set, then  M,,,,,, allows requests authorized  by  the  subject; 
otherwise, it requires the requestor p’  to be able to act on 
behalf of the subject. 
Everything is now  in place to  see how  a  trust manage- 
ment computation is carried out. Suppose we want to know 
if  principal p  authorizes principal  p’  to perform the  oper- 
ation  denoted  by  y  at  time  t  according  to  the  assertions 
A.  We  express the  request  as  U  =  {(p’,y, t ) }  E  Auth. 
We  want to compute M,,,,,(p,  U ,  A), which  is  equivalent 
to U  C M .,,, 
(A)(p). In  order to avoid  computing the 
entire least fixpoint, we can specialize the assertions for the 
given request.  Define the restriction of an authorization U‘ 
as follows. 
R(u’) = u’n(uu{ (p”, n, t )  I p”  E  Principal, n E Name 1 )  
engine for the second fixpoint using the approach described 
here. In our experience, the time for trust management com- 
putation is dwarfed by the cryptographic costs of  signature 
checking. 
3.1  Related work 
The SPKI standard [ 131 presents 4-tuple and 5-tuple re- 
duction as a means of implementing M,,,,,.  5-tuple reduc- 
tion  is  weaker  than  the  least  fixpoint  approach  described 
above because it relies  on action  intersection, which takes 
two actions 2 1  and x2 and attempts to compute an  action 
J: such  that  M,,,.,,~J:) =  M , , d ~ : l )  n MA,,,,.(52). Un- 
fortunately,  this  is  not  always  possible,  since  the  action 
language  is  not  expressive enough.  As  was  observed  in 
[15], it  is  not  always possible  to  represent  the  the  inter- 
section of  a  *range and  *prefix action.  One way  to 
fix  this problem  would be to add an  intersection operator 
to the action language.  In [ 151, they  instead  show that one 
can  always find  an  action  satisfying the  weaker condition 
M.4,.,,o.(x) C M,,,.,,,,(~l) M.4r,,0n(~2). 
This guarantees that 
if their trust management engine returns true then so does 
MEnglnr, 
but not the converse. 
A  more  important  weakness of  tuple  reduction  is  that 
it only works on ordered lists  of  assertions, not  unordered 
sets.  To  find  the right order, the client must perform cer- 
tificate path discovery [9, 113, something that is at least as 
complicated as reduction itself,  and requires O(c3) space. 
The least fixpoint computation above automatically and ef- 
ficiently  performs certificate  path  discovery and subsumes 
the reductions necessary  to make the trust management de- 
cision. 
Thus the  restriction  of  an  authorization includes no  more 
than current request U  and name authorizations at the cur- 
rent time. Extend R to sets of assertions so that the licenses 
only produce restricted authorizations as follows. 
We  can  prove  that  U  C M,,,,,,,,,,(A)(p) if  and  only  if 
U  2 M,,,,,,,,,,(R(A))(p). We can also observe in Figure 4 
that name assertions affect the meaning of authorization as- 
sertions, but  not  vice-versa.  The implication of  these  two 
facts  is that  instead  of  computing a  least  fixpoint  over the 
AurhMap  lattice,  we can first compute a fixpoint  over the 
lattice Principal  + P ( P  rincipal  x Name ) and then  over 
the lattice Principal  --+  B o d   The first fixpoint computes 
for each principal  p  the pairs (p’, n) such that p  authorizes 
p’  to  act on  behalf  of  name n  at  time t.  The second fix- 
point computes for each principal p  whether or not the re- 
quest U  is  authorized by  p .   If  there  are c assertions, the 
first fixpoint requires O(c2) space and the second requires 
only  O(c) space.  Xavier Serret-Avila and I have  built  an 
Another  approach  to  specifying  SPKI  is  presented  in 
[16], which  gives a  simple Prolog  program  in  which  the 
rules correspond to tuple reduction. For a given trust man- 
agement decision, each assertion  is translated to a fact and 
added to the  logic  program.  The least fixpoint semantics 
of Prolog then includes all authorizations derivable by com- 
bining the facts using the rules, which is roughly equivalent 
to all  tuples derivable using tuple reduction.  With  a  Pro- 
log implementation that uses an appropriate search strategy, 
the program can be run directly as an implementation of the 
trust management engine. 
4  KeyNote 
Figure 5  shows how  to  express  KeyNote  [4, 51  in  the 
framework of  Section 2.  The figure  should be read  along 
with  Figure  3,  which  defines  the  supporting  infrastruc- 
ture of  the  framework.  The KeyNote authorizations Auth 
forin  a  function  lattice,  where  an  authorization  maps  a 
request  to  a  compliance  value.  Compliance  values  are 
100 
v  E  Value 
x  E  Action 
Request 
U  E  Auth 
z  f  Licensees 
c  E  Conditions 
- 
=  P(String x String ) 
=  P(Principa1) x Action 
=  Request 
Value 
- 
- 
KeyNoteAssertion  =  Principal x Licensees x  Conditions 
M,.,,,,,,, 
Mcon,l,,,,,,nl 
: Licensees  x  (Principal 
: Conditions x Request 
Value) 
Value 
Value 
(omitted) 
(omitted) 
strings,  totally  ordered,  intended  to  denote  levels  of  au- 
thorization.  To  keep  a  simple  example  in  mind,  imag- 
ine  that  Value  = [false, true], where false  &  true.  The 
partial  order  on Auth  is  derived  from  the  order  on  Value 
viewed  as  a  lattice.  A  request  ( P , x )  consists  of  a  set  of 
requesting  principals  P  (called  ACTIONAUTHORIZERS 
in  [4])  and  an  action,  which  is  represented  as  a  list  of 
pairs  of  arbitrary  strings.  The  action  describes  the  re- 
quest;  for  example,  an  action  to  delete  a  file  might  be 
{(operation, delete), (file, /tmp/ foo)}. 
A  KeyNote assertion  (p, z ,  c) means that issuing princi- 
pal p  authorizes the requests specified by  the conditions c, 
possibly delegating to licensees  z .  The licensees language 
is similar to the toy language of Section 2. It has operators 
for greatest  and  least upper  bound of  the compliance val- 
ues in  the  Value order, as well  as an  operation for finding 
the k-th largest of  a set of  compliance values.  The seman- 
tics is summarized by a function M,,,,.,,,,,,, which takes a li- 
censees expression and a map giving the a compliance value 
for  each  principal,  and  gives  the  value  of  the  expression. 
The conditions language has floating point, integer, string, 
and relational operators for inspecting the request and com- 
puting a compliance value.  The semantics is  summarized 
which  takes a  conditions expression and  the 
by  MG,n,l,r,onJ, 
request, and computes a compliance value.  The semantics 
of  KeyNote assertions is given  by Mtie.,,,,,,,,, which says that 
the license corresponding to a KeyNote assertion returns the 
greatest lower bound (in the Vulue order) of the meaning of 
the conditions and licensees  fields.  Delegation is  possible 
via the  licensees field, which  is only allowed to query  the 
authmap to find other principals’ authorizations of the same 
request  (P, x). The license field in  the assertion  is mono- 
tone because M,.,,,,,,,,, is monotone in its second argument. 
A  KeyNote  trust management engine is responsible for 
computing a  compliance  value  given  a  set  of  assertions 
and  a  request.  Suppose  that  the  principals  P  present 
to  principal  p  the  assertions  A  to  prove  that  the  action 
z  is  justified,  i.e.  has  a  compliance  value  of  at  least 
w.  We  can  express  the  request  as  the  (partial)  function 
[ ( P , z )  H U].  Then,  the  trust  management engine must 
[(P, x) H U], A), which  is  equivalent 
decide  if  MtnClnl.(p, 
to  [(P,,)  H w]  C M,,,,,,,,,,(A)(p), which  is  equivalent 
to  U  C M,,,,,,,,,(A)(p)(P, z).  Thus,  the  trust  manage- 
ment  engine  need  only  compute  a  fixpoint  in  the  lattice 
Principal  .--)  Value, recording for each principal  its com- 
pliance value on the given request. 
5  Logic-based approaches 
In  the  logic-based  approach  to  trust  management,  the 
trust management engine is responsible for constructing [ 1, 
3,  171 or checking  [2] a  proof  that  the  desired  request  is 
valid.  The logic  is defined by  a set of formulas, Formula, 
and a binary relation F  t f ,  which should be read “formula 
f  can  be  proved  given  the  formulas  F  as  axioms”.  The 
logic contains a primitive  constructor to express authoriza- 
tions of  principals:  if p  is  a  principal  and  f  is  a formula, 
then  p  says f means  that  principal  p authorizes  whatever 
formula  f  does.  Finally,  the  logic  contains  (among other 
rules) inference rules that ensure that each principal is logi- 
cally consistent. 
I f F i -  f t h e n F t - p s a y s   f .  
If  F  t p s a y s  f + f’ and  F  i-  psays f 
P says f‘ 
then  F  i- 
An assertion is represented as a (signed) formula of the form 
p says f .  A  request  is also represented  by  a formula.  The 
trust  management system  says  that  principal  p  authorizes 
request f according to the assertions F  if  F k p says f. 
101 
f  E  Formula 
U  E  Auth 
=  { F  C Formula  1  F  = F }  
- 
p says f  E  LogicAssertion  =  Principal  x  Formula 
M,,, 
M,,,,(P 
: LogicAssertion 
says f) = (P, Am. f U {P’ says f’ I f’ E m(p’) }) 
Assertion 
Figure 6. The logic-based approach 
Figure 6 shows how to model this approach in the frame- 
work  of  Section  2.  The figure should  be read  along with 
Figure 3, which defines the supporting infrastructure of the 
framework. The elements of the Auth lattice are deductively 
closed sets of formulas ordered by  C. A set of  formulas f 
is deductively closed if  F  = F, where  = { f  I F  k f  }. 
The least  upper  bound  operation  is union, except that  el- 
ements  must  be  deductively  closed:  U {F, \  i  E I }   = 
UtEIF2. A request f  is represented  as an element of Auth 
as {f}. Let a set of  logical  assertions  F  be  given and  let 
1  f E  F } .   The semantics of  assertions, 
A  =  {M,A,r,,(f) 
M,,,,,,., is defined so that f  E  M ,,,, l r  ,,,, n , ( A ) ( p )  if and only if 
F  F p  says f .  The trust engine says that p  a u t h o r i E a  re- 
quest f according to the assertions  A  if  ME,,:,,,,,(p, 
{ f } ,  A ) ,  
which is equal to (f)  M,,,,,,,,,,(A)(p), which  is equiva- 
lent to f E  M,.,,,,,,,(A)(p), 
which by  the above is equiva- 
lent to F  F p says f .  Thus, the definition of the  trust en- 
gine in the framework coincides with the logic-based  defi- 
nition.  Depending on the logic, a direct least fixpoint com- 
putation  may or may  not  be  feasible.  If  the  set  of  conse- 
quences of a finite  set of  formulas is finite (as in  [3,  17]), 
then the least fixpoint can be directly computed.  If, on the 
other hand,  the  log.ic is  undecidable  (as in  [ 2 ] ) ,  then  the 
trust management computation can either use an incomplete 
proof  search  or  require the  client  to provide a  proof  that 
f  E M.,,wmon,(A)(p). 
6  Applications 
6.1  Certificate reduction 
This section  formalizes the  notion  of  certificate  reduc- 
tion, in which a trust management system provides a mech- 
anism to combine several certificates into a single certificate 
that summarizes their meaning (e.g. SPKI tuple reduction). 
For example, if we have the assertions 
UA]  =  (Alice, Xm.m(Bob)) 
CLB  =  (Bob, Xm.m(Carl)) 
then we can create the assertion 
C L A ~  = (Alice, Xm.m(Carl)) 
and  prove  that  we  have  not  increased  the  authorizations 
granted by  Alice.  Certificate reduction can make the over- 
all  system  more  efficient  by  reducing  the  number of  cer- 
tificates carried around and used in subsequent trust engine 
decisions.  It can  also provide anonymity to  some  of  the 
participants.  In  our example, Bob no  longer needs to  be 
mentioned  when Alice grants authorizations by  delegating 
to Carl. 
We must be careful, however, since it is not the case that 
M.~wmm(A U {UAl, .a})  ’ M.,,,m,m(A U (aA2)) 
for all sets of assertions A that 
The following example shows one reason why. 
M.,,,,rr,,,.,(A U {aAlr aa})(BOb)  =  W 
M.,l,Cr,llln.t(A U {Um})(BOb)  =  1 
A  =  ((Car1,Xm.W)) 
Obviously, because we have removed  Bob’s delegation  to 
Carl, we have reduced Bob’s authorizations.  The follow- 
ing example shows why even the authorizations  granted by 
Alice may change. 
MA~~Ynt<ln~(A U { a ~ i ,  a~})(Alice) =  W 
M.,,,,n80n,(A U {a~,})(Alice)  =  1 
A  =  ((B0b:Am.W)) 
Since we have removed Alice’s delegation to Bob, we have 
reduced Alice’s authorizations. 
To simplify the formalization, we will only consider cer- 
tificate reduction  of two certificates.  Suppose that we have 
two assertions  a1 = (pl, 11) and  a2  = (p2, l2). Define the 
reduction of  a1 and a2 as 
R(ai,az) = (PI, Xm.Ll(m U  1 ~ 2  H h ( m ) ] ) )  
It is possible  to prove  that  the reduced  assertion  grants no 
more  authorizations than  were granted  by  the original  two 
assertions. That is, for all sets of assertions A, 
Ma,~er~,on~(A 
U {R(al, ~ 2 ) ) )  5 M,\,,m,,,,,(A U ( ~ 1 :  w } )  
Our earlier examples showed that equality does not hold for 
arbitrary  sets of assertions.  However, if none of the  asser- 
tions mention p 2 ,  then equality does hold for all principals 
102 