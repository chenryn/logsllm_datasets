atl_token=eea2cfb36c9370a93bbf293be7623f68856e3d7c&dailyBackupFilePrefix=backup-
&dailyBackupDateFormatPattern=yyyy_MM_dd&backupOption=custom&backupPath=/tmp/{1%2
b1}&backupAttachments=true&confirm=%E6%8F%90%E4%BA%A4
绕过 validate() 之后，接着就到了 
com.opensymphony.webwork.views.velocity.AbstractTagDirective#render() ，这⾥就开始处
理模板中的 #tag、#bodytag 两个指令。
但是⽆论我怎么调试，我都没有看到 $action.backupPath ，所以我⼜去仔细看了下 
/admin/editdailybackupsettings.vm ⽂件。这才发现，只有 $action.editMode 为空或者 false 
时，才会执⾏到 $action.backupPath 。
而这⾥的 $action.editMode 就是 DailyBackupAdminAction#editMode ，其默认值为 true 。只有
调⽤ DailyBackupAdminAction#doView() ⽅法的时候，才会把 editMode 属性设置为 false 。回看 
xwork.xml 配置⽂件， DailyBackupAdminAction#doView() ⽅法对应的路由为 
/admin/dailybackupadmin.action ，所以我们在设置完备份路径，应该访问 
/admin/dailybackupadmin.action 。
此时，我们就能在 Debug 信息中看到 $action.backupPath 了。回到 
AbstractTagDirective#render() ⽅法，程序会先通过 applyAttributes() ⽅法解析 Velocity 模板中
的所有变量，然后才调⽤ processTag() 处理⾥⾯的各种标签。这⾥， $action 为当前路由所对应的 
DailyBackupAdminAction ，$action.backupPath 也就对应前⾯我们设置的 /tmp/{1+1} 。
接着看 processTag() 如何处理标签。当程序处理到标签结尾的时，会调⽤ doEndTag() ⽅法。在这个
⽅法⾥，程序会通过 Ognl 表达式来处理标签中的内容。例如 Tag("TextField" 
"label='backup.path'") ，这⾥就会⽤ Ognl 去获取 'backup.path' 的值。而前⾯ 
"value='$action.backupPath'" 经过 Velocity 的渲染，已经变成了 "value='/tmp/{1+1}'" ，但是由
于两边有引号包裹， Ognl 会把它当做⼀个普通字符串常量，所以解析后的值仍然为 /tmp/{1+1} 。
这⾥就要想办法闭合单引号了，我们把备份路径变成 '/tmp/{1+1}' 试试。结果发现在 
OgnlValueStack.findValue() 之前，单引号被实体编码了，即 '&#39;/tmp/{1+1}&#39;'。于是我开
始 Fuzz 所有特殊字符，发现 \ 字符是不会被实体编码的。 \ 字符让我想到之前 Struts2 漏洞中是可以
使⽤ Unicode 字符的，⽴⻢尝试 /tmp/\u0027+{1+1}+\u0027 ，成功！
接下来我们就要想办法通过 Ognl 表达式执⾏任意代码。直接尝试 /tmp/\u0027+
{@java.lang.Runtime@getRuntime().exec(\u0022deepin-calculator\u0022)}+\u0027 ，发现并
不能弹出计算器。通过调试发现，在 OgnlValueStack.findValue() 之前还有安全校验
SafeExpressionUtil.isSafeExpression(expr) 。那么，我们该如何绕过呢？
绕过检测
先来看看他的检测规则。⾸先， Ognl 在解析表达式时，会先将其解析成 AST 语法树。安全检测⽅法 
SafeExpressionUtil.isSafeExpression() 对语法树的节点类型做了限制。其中，
UNSAFE_NODE_TYPES 存储了不允许的节点类型，它们为静态⽅法、静态属性、构造器、赋值语句，
也就是说如下语句通通不允许：
其次，UNSAFE_PROPERTY_NAMES 限制了属性名不能为 classLoader、class ，也就是说如下语句通
通不允许：
接着，UNSAFE_METHOD_NAMES 限制了调⽤的⽅法名不能为 getClassLoader()、getClass() ，也就
是说如下语句通通不允许：
# ognl.ASTStaticMethod
{@java.lang.Runtime@getRuntime()}
# ognl.ASTStaticField
{@java.lang.Runtime@currentRuntime}
# ognl.ASTCtor
{new java.lang.ProcessBuilder("calc")}
# ognl.ASTAssign
{#cmd="calc"}
# ognl.ASTProperty
{context.action.class}
{context.action.classLoader}
# ognl.ASTMethod
{context.action.getClass()}
{context.action.getClassLoader()}
最后，UNSAFE_VARIABLE_NAMES ⾥⾯存储了不允许直接使⽤的变量，也就是说如下语句通通不允
许：
那么我们该如何绕过呢？这⾥，我们先说两个 Ognl 解析时候的小 tips 。
第⼀个tips
 .class 和 .["class"] 在被解析成 AST 语法树的时候，都会被解析成 ASTProperty 。但是这两种⽅式获
得的 ASTProperty 变量，在调⽤ toString() 的时候结果会不⼀样。而上⾯的⿊名单判断正好是利⽤ ⿊
名单.contains(node.toString()) ，所以利⽤这⼀差异性可以绕过⿊名单检查。
具体代码如下。在 Ognl 解析到  .["class"]  表达式的时候，会把这个节点设置为 ASTProperty ，并将 
ASTProperty.indexedAccess 设置成 true 。而解析 .class 表达式的时候， 
ASTProperty.indexedAccess 则使⽤默认的 false 值。最后 ASTProperty.toString() 的值会因 
ASTProperty.indexedAccess 的不同而有所差异。
通过这个小差异，我们便可绕过⿊名单，拿到 Class 对象，从而执⾏任意代码。
第⼆个tips
不管是 .class 还是 .["class"] ，最终都会通过反射调⽤ getClass() ⽅法。而 .class 和 .Class 都会调⽤
到 getClass() ⽅法，因为 Ognl 在处理的时候，会⾃动把属性的⾸字⺟变成⼤写，然后再调⽤ getXxx() 
。
# ognl.ASTVarRef
{#application}
{#parameters}
{#request}
{#session}
{#_memberAccess}
{#context}
.class => ASTProperty.toString() => class
.["class"] => ASTProperty.toString() => ["class"]
利⽤这⼀小 tips ，同样可以绕过⿊名单的校验，拿到 Class 对象，从而执⾏任意代码。
参考
Atlassian Confluence Pre-Auth RCE (CVE-2021–26084) 
CVE-2021-26084 - Confluence Server Webwork OGNL injection 
CVE-2021-26084 Remote Code Execution on Confluence Servers 
https://velocity.apache.org/engine/1.7/developer-guide.html
velocity⾃定义标签和指令