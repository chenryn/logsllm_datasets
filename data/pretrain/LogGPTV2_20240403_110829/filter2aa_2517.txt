# Black Hat USA @BlackHatEvents

## PISE: Automatic Protocol Reverse Engineering
### Presenters: Ron Marcovich, Orna Grumberg, and Gabi Nakibly

**Ron Marcovich**  
- M.Sc. Student

**Dr. Gabi Nakibly**  
- Senior Adjunct Lecturer  
- Distinguished Researcher  
- Formerly at [Institution]

**Prof. Orna Grumberg**  
- Faculty Member

---

## Agenda
1. **Introduction to Protocol Reverse Engineering (RE)**
2. **Overview of PISE**
3. **How PISE Works**
4. **Motivation and Background**
5. **Examples and Demo**
6. **Under the Hood: L* Algorithm and Symbolic Execution**
7. **Caveats and Limitations**
8. **Q&A and Summary**

---

### What is Protocol Reverse Engineering?
Protocol RE involves understanding and reconstructing the communication protocols used by software or systems, often without access to the source code.

**Example: SMTP Interaction**
- **S: 250 OK**
- **R: HELO**
- **S: 220 Service ready**
- **R: MAIL FROM: <sender@example.com>**
- **S: 250 OK**
- **R: RCPT TO: <recipient@example.com>**
- **S: 250 OK**
- **R: DATA**
- **S: 354 Start mail input; end with <CRLF>.<CRLF>**
- **R: Subject: Test Email**
- **R: .**
- **S: 250 OK: queued as A123456789**
- **R: RSET**
- **S: 250 OK**

---

### Motivation and Background
- **Finding Bugs**: Identify vulnerabilities in network protocols.
- **Discovering Backdoors**: Detect hidden or unauthorized access points.
- **Analyzing Malware**: Understand how malicious software communicates and operates.

**Challenges in Protocol RE:**
- Time-consuming: It can take days or even weeks to manually reverse engineer a protocol.
- Limited resources: No past traffic captures, no active protocol peer, and no source code.

---

### PISE Overview
PISE (Protocol Inference System for Executables) automates the process of protocol reverse engineering using a combination of the L* algorithm and symbolic execution.

**Key Features:**
- **No Assumptions**: PISE does not require prior knowledge of the protocol.
- **Action, Examples, and Demo**: Practical demonstrations of PISE in action.

**Toy Example:**
- **login**
- **ok1/ok2**
- **logout1/logout2**

**Real-World Application:**
- **SMTP Client**: Extracts message formats and reconstructs the protocol.
- **gh0st RAT**: Analyzed a remote access trojan to understand its communication protocol.

---

### Under the Hood
**L* Algorithm (Automata Learning)**
- **Question**: Is a given message exchange valid according to the protocol?
- **Example**: 
  - **{R: init, S: start}** - Valid sequence.
  - **{R: data}** - Not a valid sequence.

**Symbolic Execution**
- **Purpose**: To determine if a sequence of messages is valid and to infer the next expected messages.
- **Example**:
  - **{R: init, S: start, R: data, R: finish}** - Valid sequence.
  - **{R: data}** - Not a valid sequence.

**Combining L* and Symbolic Execution:**
- **L* Algorithm**: Constructs the state machine.
- **Symbolic Execution**: Validates sequences and infers next messages.

**Message Types Discovery:**
- **Probing for Following Message Types**:
  - **{R: Init}** - What message types can follow?
  - **{R: Init, S: Start}** - What message types can follow?

**Constraints Development:**
- **Parsing Logic**: Develop constraints based on the parsing logic of the messages.
- **Concrete Messages**: Use concrete examples to infer message types.

---

### Tying It All Together
- **Symbolic Execution**: Determines if a sequence is valid and infers next messages.
- **L* Algorithm**: Reconstructs the protocolâ€™s state machine.

**Example:**
- **{R: init, S: start}** - Valid sequence. Next message: `data`.
- **{R: data}** - Not a valid sequence.

**State Machine Construction:**
- **Initial State**: `init`
- **Transitions**:
  - `R: init` -> `S: start` -> `R: data` -> `R: finish`

---

### Caveats and Limitations
- **Symbolic Tool Dependency**: PISE's effectiveness depends on the symbolic execution tool used.
- **Current Support**: Only supports Angr.
- **Known Issues**:
  - Trouble supporting threads.
  - Does not fully support Windows API.

---

### Q&A and Summary
- **GitHub Repository**: [https://github.com/ron4548/PISEServer](https://github.com/ron4548/PISEServer)
- **Questions?**

---

Thank you for your attention!