查看解密后的视图.  
```  
postgres=# \dv private.  
private.decrypted_users  
postgres=# \d+ private.decrypted_users  
                           View "private.decrypted_users"  
      Column      |  Type  | Collation | Nullable | Default | Storage  | Description   
------------------+--------+-----------+----------+---------+----------+-------------  
 id               | bigint |           |          |         | plain    |   
 secret           | text   |           |          |         | extended |   
 decrypted_secret | text   | C         |          |         | extended |   
View definition:  
 SELECT users.id,  
    users.secret,  
        CASE  
            WHEN users.secret IS NULL THEN NULL::text  
            ELSE  
            CASE  
                WHEN 'b9250679-be72-49f8-be33-efec93116659' IS NULL THEN NULL::text  
                ELSE convert_from(crypto_aead_det_decrypt(decode(users.secret, 'base64'::text), convert_to(''::text, 'utf8'::name), 'b9250679-be72-49f8-be33-efec93116659'::uuid, NULL::bytea), 'utf8'::name)  
            END  
        END AS decrypted_secret  
   FROM private.users;  
```  
数据导出后是加密的, 没有server key无法查看. 所以比较安全.    
7、使用nonce支持混淆, 使得相同明文值加密后的秘文内容不一样, 提高破解难度.   
```
drop table private.users cascade;
CREATE TABLE private.users (
	id bigserial primary key,
	secret text,
	key_id uuid not null,
    nonce bytea
);
SECURITY LABEL FOR pgsodium
  ON COLUMN private.users.secret
  IS 'ENCRYPT WITH KEY COLUMN key_id NONCE nonce';
insert into private.users (secret, key_id, nonce) values ('test', 'b9250679-be72-49f8-be33-efec93116659', crypto_aead_det_noncegen());
postgres=# insert into private.users (secret, key_id, nonce) values ('test', 'b9250679-be72-49f8-be33-efec93116659', crypto_aead_det_noncegen());
INSERT 0 1
postgres=# insert into private.users (secret, key_id, nonce) values ('test', 'b9250679-be72-49f8-be33-efec93116659', crypto_aead_det_noncegen());
INSERT 0 1
postgres=# insert into private.users (secret, key_id, nonce) values ('test', 'b9250679-be72-49f8-be33-efec93116659', crypto_aead_det_noncegen());
INSERT 0 1
postgres=# select * from private.users;
 id |                      secret                      |                key_id                |               nonce                
----+--------------------------------------------------+--------------------------------------+------------------------------------
  1 | sZ3+VD4kIgff6ihiRo6cbl7Xy7V2wO4kTteFCXQhvBQ8HCwV | b9250679-be72-49f8-be33-efec93116659 | \x97f516fc29c18fd45694a18b5c9cde32
  2 | 2z4DaZd7JtmYmKXhhyOi1sZ0eBvA7fZpeG7TT60V3NDydyOL | b9250679-be72-49f8-be33-efec93116659 | \x4cda34af1ec0197bb9cdd0d164a1a738
  3 | 0aBqxB2Ws8GyGIq5EhvOOcje4xJ1bz7ksObhw70RYeW9f3Jb | b9250679-be72-49f8-be33-efec93116659 | \x7789e26345d1e1194ac5a876881ce42d
(3 rows)
postgres=# \d+ private.users
                                                          Table "private.users"
 Column |  Type  | Collation | Nullable |                  Default                  | Storage  | Compression | Stats target | Description 
--------+--------+-----------+----------+-------------------------------------------+----------+-------------+--------------+-------------
 id     | bigint |           | not null | nextval('private.users_id_seq'::regclass) | plain    |             |              | 
 secret | text   |           |          |                                           | extended |             |              | 
 key_id | uuid   |           | not null |                                           | plain    |             |              | 
 nonce  | bytea  |           |          |                                           | extended |             |              | 
Indexes:
    "users_pkey" PRIMARY KEY, btree (id)
Triggers:
    users_encrypt_secret_trigger_secret BEFORE INSERT OR UPDATE OF secret ON private.users FOR EACH ROW EXECUTE FUNCTION private.users_encrypt_secret_secret()
Access method: heap
postgres=# \sf private.users_encrypt_secret_secret
CREATE OR REPLACE FUNCTION private.users_encrypt_secret_secret()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
		postgres=# \d+ private.decrypted_users
                           View "private.decrypted_users"
      Column      |  Type  | Collation | Nullable | Default | Storage  | Description 
------------------+--------+-----------+----------+---------+----------+-------------
 id               | bigint |           |          |         | plain    | 
 secret           | text   |           |          |         | extended | 
 decrypted_secret | text   | C         |          |         | extended | 
 key_id           | uuid   |           |          |         | plain    | 
 nonce            | bytea  |           |          |         | extended | 
View definition:
 SELECT users.id,
    users.secret,
        CASE
            WHEN users.secret IS NULL THEN NULL::text
            ELSE
            CASE
                WHEN users.key_id IS NULL THEN NULL::text
                ELSE convert_from(crypto_aead_det_decrypt(decode(users.secret, 'base64'::text), convert_to(''::text, 'utf8'::name), users.key_id, users.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    users.key_id,
    users.nonce
   FROM private.users;
postgres=# select * from private.decrypted_users ;
 id |                      secret                      | decrypted_secret |                key_id                |               nonce                
----+--------------------------------------------------+------------------+--------------------------------------+------------------------------------
  1 | sZ3+VD4kIgff6ihiRo6cbl7Xy7V2wO4kTteFCXQhvBQ8HCwV | test             | b9250679-be72-49f8-be33-efec93116659 | \x97f516fc29c18fd45694a18b5c9cde32
  2 | 2z4DaZd7JtmYmKXhhyOi1sZ0eBvA7fZpeG7TT60V3NDydyOL | test             | b9250679-be72-49f8-be33-efec93116659 | \x4cda34af1ec0197bb9cdd0d164a1a738
  3 | 0aBqxB2Ws8GyGIq5EhvOOcje4xJ1bz7ksObhw70RYeW9f3Jb | test             | b9250679-be72-49f8-be33-efec93116659 | \x7789e26345d1e1194ac5a876881ce42d
(3 rows)
``` 
8、接下来的例子, 使用混淆, 同时使用签名字段.  
```  
CREATE TABLE private.users (  
	id bigserial primary key,  
	secret text,  
	key_id uuid not null,  
    nonce bytea,  
    associated_data text  
);  
SECURITY LABEL FOR pgsodium ON COLUMN private.users.secret  
  IS 'ENCRYPT WITH KEY COLUMN key_id NONCE nonce ASSOCIATED (id, associated_data)';  
```  
```  
postgres=# drop table private.users ;  
ERROR:  cannot drop table private.users because other objects depend on it  
DETAIL:  view private.decrypted_users depends on table private.users  
HINT:  Use DROP ... CASCADE to drop the dependent objects too.  
postgres=# drop table private.users cascade;  
NOTICE:  drop cascades to view private.decrypted_users  
DROP TABLE  
postgres=# CREATE TABLE private.users (  
postgres(# id bigserial primary key,  
postgres(# secret text,  
postgres(# key_id uuid not null,  
postgres(#     nonce bytea,  
postgres(#     associated_data text  
postgres(# );  
CREATE TABLE  
postgres=#   
postgres=# SECURITY LABEL FOR pgsodium ON COLUMN private.users.secret  
postgres-#   IS 'ENCRYPT WITH KEY COLUMN key_id NONCE nonce ASSOCIATED (id, associated_data)';  
NOTICE:  view "decrypted_users" does not exist, skipping  
NOTICE:  trigger "users_encrypt_secret_trigger_secret" for relation "private.users" does not exist, skipping  
NOTICE:  about to masking role private.users private.decrypted_users  
SECURITY LABEL  
```  
```  
postgres=# \d private.users  
                                    Table "private.users"  
     Column      |  Type  | Collation | Nullable |                  Default                    
-----------------+--------+-----------+----------+-------------------------------------------  
 id              | bigint |           | not null | nextval('private.users_id_seq'::regclass)  
 secret          | text   |           |          |   
 key_id          | uuid   |           | not null |   
 nonce           | bytea  |           |          |   
 associated_data | text   |           |          |   
Indexes:  
    "users_pkey" PRIMARY KEY, btree (id)  
Triggers:  
    users_encrypt_secret_trigger_secret BEFORE INSERT OR UPDATE OF secret ON private.users FOR EACH ROW EXECUTE FUNCTION private.users_encrypt_secret_secret()  
postgres=# \sf private.users_encrypt_secret_secret  
CREATE OR REPLACE FUNCTION private.users_encrypt_secret_secret()  
 RETURNS trigger  
 LANGUAGE plpgsql  
AS $function$  
		BEGIN  
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE  
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(  
			  pgsodium.crypto_aead_det_encrypt(  
				pg_catalog.convert_to(new.secret, 'utf8'),  
				pg_catalog.convert_to((new.id::text || new.associated_data::text)::text, 'utf8'),  
				new.key_id::uuid,  
				new.nonce  
			  ),  
				'base64') END END;  
		RETURN new;  
		END;  
		$function$  
postgres=#   
```  
使用nonce混淆, 插入两条一样的记录, 可以看到秘文不一样(包含了签名字段内容).     
```  
postgres=# insert into private.users (secret , key_id,  associated_data) values ('test123','b9250679-be72-49f8-be33-efec93116659',  'hello world');   
INSERT 0 1  
postgres=# select * from private.users;  
 id |                        secret                        |                key_id                | nonce | associated_data   
----+------------------------------------------------------+--------------------------------------+-------+-----------------  
 10 | EreR7oSr0LhsSnpMGuNyCJU6oAckbAYHJvI6b2QEK1g9XtIiucLz | b9250679-be72-49f8-be33-efec93116659 |       | hello world  
(1 row)  
postgres=# insert into private.users (secret , key_id,  associated_data) values ('test123','b9250679-be72-49f8-be33-efec93116659',  'hello world');  
INSERT 0 1  
postgres=# select * from private.users;  
 id |                        secret                        |                key_id                | nonce | associated_data   
----+------------------------------------------------------+--------------------------------------+-------+-----------------  
 10 | EreR7oSr0LhsSnpMGuNyCJU6oAckbAYHJvI6b2QEK1g9XtIiucLz | b9250679-be72-49f8-be33-efec93116659 |       | hello world  
 11 | eQVxDgWz/uT4mLFVcPqj1ieU7xfh7tIj45hFtLoMjhIMA20Kra8c | b9250679-be72-49f8-be33-efec93116659 |       | hello world  
(2 rows)  
```  
签名值修改后不可查看解密数据.  
```  
postgres=# update private.users set associated_data ='new' where id=10;  
UPDATE 1  
postgres=# select * from private.decrypted_users ;  
ERROR:  22000: pgsodium_crypto_aead_det_decrypt_by_id: invalid ciphertext  
CONTEXT:  PL/pgSQL function pgsodium.crypto_aead_det_decrypt(bytea,bytea,uuid,bytea) line 12 at RETURN  
LOCATION:  pgsodium_crypto_aead_det_decrypt_by_id, aead.c:493  
postgres=# select * from private.decrypted_users where id=11;  
 id |                        secret                        | decrypted_secret |                key_id                | nonce | associated_data   
----+------------------------------------------------------+------------------+--------------------------------------+-------+-----------------  
 11 | eQVxDgWz/uT4mLFVcPqj1ieU7xfh7tIj45hFtLoMjhIMA20Kra8c | test123          | b9250679-be72-49f8-be33-efec93116659 |       | hello world  
(1 row)  
postgres=# select * from private.decrypted_users where id=10;  
ERROR:  22000: pgsodium_crypto_aead_det_decrypt_by_id: invalid ciphertext  
CONTEXT:  PL/pgSQL function pgsodium.crypto_aead_det_decrypt(bytea,bytea,uuid,bytea) line 12 at RETURN  
LOCATION:  pgsodium_crypto_aead_det_decrypt_by_id, aead.c:493  
postgres=#   
```  
9、更多用法可以结合RLS(行级安全策略), kms(key管理服务, 如aws或阿里云 的key管理服务), security lable, 角色权限区分等, 解决更多安全需求.   
```  
postgres=# \du  
                                                       List of roles  
     Role name      |                         Attributes                         |                Member of                  
--------------------+------------------------------------------------------------+-----------------------------------------  
 pgsodium_keyholder | Cannot login                                               | {pgsodium_keyiduser}  
 pgsodium_keyiduser | Cannot login                                               | {}  
 pgsodium_keymaker  | Cannot login                                               | {pgsodium_keyiduser,pgsodium_keyholder}  
 postgres           | Superuser, Create role, Create DB, Replication, Bypass RLS | {}  
```  
## 参考  
https://github.com/michelp/pgsodium  
https://doc.libsodium.org/  
[《PostgreSQL的安全场景介绍, 以及security label(安全标签功能)和两个label provider: anon, sepgsql的介绍(隐藏|加密敏感信息)》](../202307/20230707_01.md)    
[《PostgreSQL 行安全策略 - PostgreSQL 9.5 new feature - can define row security policy for table》](../201504/20150409_01.md)        
https://www.postgresql.org/docs/16/sql-security-label.html    
[《PostgreSQL 敏感信息遮掩插件 anon (Anonymizer) - security label provider - anon》](../201911/20191115_03.md)      
[《Anonymization & Data Masking for PostgreSQL - 自动脱敏控制 - oracle data vault - postgresql-anonymizer》](../201908/20190817_03.md)      
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")