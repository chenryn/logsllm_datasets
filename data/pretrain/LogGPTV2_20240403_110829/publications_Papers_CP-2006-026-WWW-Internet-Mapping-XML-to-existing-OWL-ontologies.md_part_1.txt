# Mapping XML to Existing OWL Ontologies

**Authors:**
- Toni Rodrigues
- Pedro Rosa
- Jorge Cardoso

**Affiliation:**
Department of Mathematics and Engineering, University of Madeira, 9050-390 Funchal, Portugal

**Contact:**
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL

## Abstract
XML has gained widespread recognition for enabling syntactic interoperability. However, it lacks the semantic richness needed for efficient data integration. Semantic Web technologies, such as ontologies, can provide the necessary semantic interoperability. This paper introduces a notation for mapping XML Schemas to existing OWL ontologies and outlines the characteristics an algorithm should possess to transform XML documents (instances of the mapped schema) into instances of the mapped ontology.

## Keywords
Semantic Web, Ontology Mapping, Ontology Generation, XML, OWL

## 1. Introduction
XML has become the de facto standard for B2B data exchange, providing syntactic interoperability [1]. However, XML lacks semantic capabilities, leading to challenges in integrating different data sources [2, 3]. As a result, organizations are shifting from syntactic to semantic interoperability [4]. Semantic Web technologies, particularly ontologies, play a crucial role in this transition [3, 5]. Ontologies, which are formal and explicit specifications of shared conceptualizations [6], are supported by the W3C through the Web Ontology Language (OWL) [7].

To facilitate the migration from XML to OWL, tools that support mappings and transformations between these standards are essential. This paper aims to bridge the gap between XML and OWL by proposing a strategy to map XML Schemas to existing OWL ontologies and transform XML data (instances of the mapped schema) into instances of the ontology according to the performed mapping.

Several works have been done in this area, primarily focusing on automatically transforming XML Schemas into newly created ontologies [8, 9, 10]. These approaches often generate new ontologies based on the implicit semantics in the XML Schema structure, but they do not allow for user control over the process. Our approach, however, allows the mapping of XML Schemas to an existing ontology and generates rules to transform instances of the XML Schema into instances of the mapped ontology. The mapped ontology is typically semantically richer than the XML Schema, as it can be independently created.

Tools like COMA++ [11] support schema and ontology matching but do not focus on transforming instances. Our research and implemented framework, JXML2OWL, uniquely contribute to the field by supporting mappings and transformations to an existing OWL ontology.

## 2. Mapping XML to OWL
This section presents a notation for specifying mappings between XML and OWL, supporting one-to-one, one-to-many, many-to-one, and many-to-many mappings. It also discusses the considerations for writing algorithms to perform instance transformations according to the created mappings.

### 2.1. XML to OWL Mapping: The Notation
Table 1 defines a notation for specifying mappings between elements of an XML Schema and resources defined by an OWL ontology. Mappings are classified into three types:

- **Class Mapping:** Maps an XML node to an OWL concept.
- **Datatype Property Mapping:** Maps an XML node to an OWL datatype property.
- **Object Property Mapping:** Relates two class mappings to an OWL object property.

| **Mappings Notation** | **Type** |
|-----------------------|----------|
| (OWL Class URI, XPath expression) | Class |
| (OWL Class URI, XPath expression, ID XPath expression) | Class |
| (OWL Datatype Property URI, Domain Class Mapping, XPath Expression) | Datatype Property |
| (OWL Object Property URI, Domain Class Mapping, Range Class Mapping) | Object Property |

OWL resources are addressed using their URI references [12], while XPath expressions [13] are used to address the mapped XML nodes. XPath expressions enable distinguishing between XML nodes with the same name but different ancestors and support conditional mappings.

For example, consider an ontology with two OWL classes, `tourism:Country` and `tourism:City`, and the following XML document:

```xml
<locations>
  <location>
    <country name="Portugal">
      <city name="Funchal"/>
    </country>
  </location>
  <location>
    <country name="France">
      <city name="Paris"/>
    </country>
  </location>
</locations>
```

The following mappings are valid:

- `cm1 = (tourism:Country, /locations/location/country)`
- `cm2 = (tourism:City, /locations/location/city)`
- `op1 = (tourism:hasCity, cm1, cm2)`
- `op2 = (tourism:belongsToCountry, cm2, cm1)`
- `dp3 = (tourism:country_name, cm1, /locations/location/country/@name)`
- `dp4 = (tourism:city_name, cm2, /locations/location/city/@name)`

### 2.2. XML to OWL Mapping: Instances Transformation
Instances of OWL classes must have unique identifiers. When creating the OWL instances document, it is essential to ensure that unique identifiers are generated for each individual. Duplicate instances in the XML document must be detected and filtered to avoid multiple instances with the same ID.

By default, the ID of the instances is generated by concatenating the underscore symbol `_` with the prefix of the mapped class, its local name, and the string-value of the mapped XML node. An alternative notation with triplets allows specifying the XML node used to compute the IDs, enabling the detection of duplicates even if the default string-value is different.

Consider the following XML document and an ontology with the `univ:student` class and the `univ:email` datatype property:

```xml
<univ>
  <students>
    <student>
      <name>Toni Rodrigues</name>
      <email>PI:EMAIL</email>
      <email>PI:EMAIL</email>
    </student>
    <student>
      <name>Pedro Rosa</name>
      <email>PI:EMAIL</email>
    </student>
    <student>
      <name>Jorge Cardoso</name>
      <email>PI:EMAIL</email>
    </student>
  </students>
  <professors>
    <professor>
      <students>
        <student name="Toni Rodrigues">
          <email>PI:EMAIL</email>
        </student>
      </students>
    </professor>
  </professors>
</univ>
```

The following mappings are valid:

- `cm1 = (univ:student, /univ/students/student, /univ/students/student/name)`
- `cm2 = (univ:student, /univ/professors/professor/students/student, /univ/professors/professor/students/student/@name)`
- `pm1 = (univ:email, cm1, /univ/students/student/email)`
- `pm2 = (univ:email, cm2, /univ/professors/professor/students/student/email)`

Three student instances are created with the following IDs: `_univToniRodrigues`, `_univPedroRosa`, and `_univJorgeCardoso`. For the student `Toni Rodrigues`, the duplicate instance is discarded, and two `univ:email` properties are created, one for each unique email address.