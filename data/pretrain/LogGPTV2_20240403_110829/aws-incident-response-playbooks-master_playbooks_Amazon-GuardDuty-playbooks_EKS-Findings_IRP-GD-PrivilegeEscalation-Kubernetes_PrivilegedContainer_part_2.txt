            - Choose the name of the intended user, and then choose the Security credentials tab.
            - Choose Create access key and then choose Download .csv file to save the access key ID and secret access key to a .csv file on your computer. Store the file in a secure location. You will not have access to the secret access key again after this closes. After you have downloaded the .csv file, choose Close. The new access key is active by default. At this point, the user has two active access keys.
        2. Update all applications and tools to use the new access key.
        3. Determine whether the first access key is still in use by reviewing the Last used column for the oldest access key. One approach is to wait several days and then check the old access key for any use before proceeding.
        4. Even if the Last used column value indicates that the old key has never been used, we recommend that you do not immediately delete the first access key. Instead, choose Make inactive to deactivate the first access key.
        5. Use only the new access key to confirm that your applications are working. Any applications and tools that still use the original access key will stop working at this point because they no longer have access to AWS resources. If you find such an application or tool, you can choose Make active to reenable the first access key. Then return to Step 3 and update this application to use the new key.
        6. After you wait some period of time to ensure that all applications and tools have been updated, you can delete the first access key:
            - Sign in to the AWS Management Console and open the IAM console at (https://console.aws.amazon.com/iam/).
            - In the navigation pane, choose Users.
            - Choose the name of the intended user, and then choose the Security credentials tab.
            - Locate the access key to delete and choose its X button at the far right of the row. Enter the access key ID to confirm the deletion and then choose Delete.
1. If the user has write privileges, it is recommended to audit all changes made by the user in question. This can be accomplished by querying the EKS audit logs in [CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home#logsV2:log-groups).
    - Locate the Log group for the relevant cluster (you noted this in Part 1) under ```Logs >> Log groups``` in the CloudWatch console. They will start with /aws/eks/cluster_name/audit
    - Look for unusual entries in Audit logs
    - You can also use CloudWatch Log Insights to query CloudWatch logs. An example can be found below that looks for create, update, and delete operation to ClusterRoleBindings. You can find more examples at (https://aws.github.io/aws-eks-best-practices/security/docs/detective/#analyze-logs-with-log-insights)
1. fields @timestamp, @message
   | sort @timestamp desc
   | limit 100
   | filter objectRef.resource="clusterrolebindings" and verb in ["create", "update", "patch", "delete"]
1. Continue to provide updates to incident stakeholders on the current state of the incident response.
1. Now that we have contained the user specified in the GuardDuty finding next we will want to contain the pod associated with the finding. Use the sections below to isolate the Pods.
    - A deny all traffic rule may help stop an attack that is already underway by severing all connections to the pod. The following Network Policy will apply to a pod with the label app=web.
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector:
    matchLabels: 
      app: web
  policyTypes:
  - Ingress
  - Egress
Attention
```
1. A Network Policy may prove ineffective if an attacker has gained access to underlying EC2 worker node. If you suspect that has happened, you can use AWS Security Groups to isolate a compromised worker node from other worker nodes. When changing a worker nodes security group, be aware that it will impact all containers running on that worker node.
1. Next we need to cordon the worker node. By deploying a privileged container we have given a container root level permissions to the worker node potentially allowing that container to manipulate the underlying system. By cordoning the impacted worker node, you're informing the scheduler to avoid scheduling pods onto the affected node. This will allow you to remove the node for forensic study without disrupting other workloads.
1. Enable termination protection on impacted worker node - An attacker may attempt to erase their misdeeds by terminating an affected node. Enabling termination protection can prevent this from happening. Instance scale-in protection will protect the node from a scale-in event. To do this follow the steps below.
    - Open the Amazon EC2 console at (https://console.aws.amazon.com/ec2/).
    - Select the instance, and choose Actions, Instance Settings, Change Termination Protection.
    - Choose Yes, Enable.
1. Label the offending Node with a label indicating that it is part of an active investigation - This will serve as a warning to cluster administrators not to tamper with the affected Pods/Nodes until the investigation is complete. To apply a label to a node use the command below.
    - kubectl label nodes \ \=\
1. Capture volatile artifacts on the worker nodeÂ¶
    - Capture the operating system memory. This will capture the Docker daemon and its subprocess per container. MargaritaShotgun (https://github.com/ThreatResponse/margaritashotgun), a remote memory acquisition tool, can aid in this effort.
    - Perform a netstat tree dump of the processes running and the open ports. This will capture the docker daemon and its subprocess per container. 
    - Run docker commands before evidence is altered on the worker node.
        - ```docker container top CONTAINER``` for processes running.
        - ```docker container logs CONTAINER``` for daemon level held logs.
        - ```docker container port CONTAINER``` for list of open ports.
        - ```docker container diff CONTAINER``` to capture changes to files and directories to container's filesystem since its initial launch.
    - Pause the container for forensic capture.
    - Snapshot the instance's EBS volumes. Steps to do this below.
        - Open the Amazon EC2 console at (https://console.aws.amazon.com/ec2/)
        - In the navigation pane, choose Snapshots, Create snapshot.
        - For Resource type, choose Volume.
        - For Volume ID, select the volume from which to create the snapshot.The Encryption field indicates the selected volume's encryption status. If the selected volume is encrypted, the snapshot is automatically encrypted using the same KMS key. If the selected volume is unencrypted, the snapshot is not encrypted.
        - (Optional) For Description, enter a brief description for the snapshot.
        - (Optional) To assign custom tags to the snapshot, in the Tags section, choose Add tag, and then enter the key-value pair. You can add up to 50 tags.
        - Choose Create snapshot.
### **Part 3**: Eradicate the Incident
This is the stage for taking remedial action to minimize the impact of the unintended activities. 
1. Using your preferred monitoring tool, access CloudTrail and search for all API actions performed by the AWS EKS resource in the last 90 days:
    1. If this tool is a third-party tool such as Splunk, Sumo Logic or others, follow the normal procedure for obtaining log information from that tool
    1. If you do not ingest CloudTrail logs into a third-party tool, but do send those logs to Amazon Simple Storage Service (Amazon S3), you will be able to use Amazon Athena to query the logs. The remaining steps will focus on AWS tools to retrieve the necessary information
1. [Create an Athena table referencing the bucket containing your CloudTrail logs](https://aws.amazon.com/premiumsupport/knowledge-center/athena-tables-search-cloudtrail-logs/) that link also includes example queries that can be run in Athena
1. In the Athena console, run a query that shows all API actions taken by the compromised resources post-compromise date/time. From the resulting list, determine which API calls:
    - Accessed sensitive data (such as S3 GetObject)
     **NOTE** to get S3 data events CloudTrail must be configured to collect S3 data events prior to the incident. [More information about CloudTrail data events can be found here](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html)
    - Created new AWS resources, such as databases, Amazon Elastic Compute Cloud (Amazon EC2) instances, AWS Lambda functions or S3 buckets, etc.
    - Services that create resources should also be carefully checked; for example, CloudFormation Stacks/StackSets, AWS Firewall Manager Security Policies, AWS Elastic Beanstalk resources, etc.
    - Created or modified AWS identity resources that could be used to extend a foothold into the account (or other accounts, for example with AWS Security Token Service (AWS STS) API methods such as AssumeRole). Within an account, API methods including (but not limited to) the following should also be investigated:
        - CreateUser
        - CreateRole
        - AssumeRole*
        - Get*Token
        - Attach*Policy
        - RunInstances (especially with PassRole)
        - \*Image*
        - *Provider
        - Tag*
        - Untag*
        - Create*
        - Delete*
        - Update*
        - etc.
    - Deleted existing AWS resources
    - Modified existing AWS resources
1. Based on the results of the previous step, determine if any applications are potentially impacted:
    - Obtain the ARN and/or tag information for each resource impacted (from step 4, above)
    - Go back to your CMDB and determine which application that resource belongs to
    - Notify the application owner based on the results of the above steps
1. At this point you will need to follow the appropriate playbook based on the type of application impact or further compromised resources to determine full impact and contain any further compromise.
### **Part 4**: Recover from the Incident
1. After idenityfing, containing, and eradicating any involved pods, nodes, users, and any other AWS resources follow the steps below to complete recovery (note that some steps below could also be considered as eradication).
1. For resources that were modified during the compromise:
    1. If the resource can be destroyed and replaced, do so. For example, Identify the vulnerability that compromised the pods, implement the fix for that vulnerability and start new replacement pods, and then delete the vulnerable pods.
    1. If the resource cannot be replaced, either:
        1. Restore the resource from a known good backup, or;
        1. Prepare a new resource and configure it into the applicationâs infrastructure, while isolating the compromised resource and removing it from the applicationâs infrastructure. Update your CMDB accordingly
        1. Either destroy the compromised resource, or continue to leave it isolated for post-incident forensics
1. For resources that were deleted during the compromise:
    1. Determine what (if any) application the resource belonged to, by checking your CMDB, or confirming the resourceâs tag(s) (Check AWS Config if the tags arenât listed in the CloudTrail entry and the [resource is supported by AWS Config](https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html))
    1. If the deleted resource can be restored from backup, commence the restore procedure
    1. If the deleted resource cannot be restored from backup, consult your CMDB to obtain the resourceâs configuration, and recreate the resource and configure it into the applicationâs infrastructure
1. For resources that were created during the compromise:
    1. Confirm these have been deleted or isolated for further analysis, per the steps in **Part 2**.
### **Part 5**: Post-Incident Activity
This activity contains two parts. Firstly, some compromised resources may require forensic analysis, either to fulfil regulatory obligations or improve incident handling, both taking input from the root cause analysis that will result from forensic investigation. The second part is a âsharpen the sawâ activity which helps teams to assess their response to the actual incident, determine what worked and what didnât, update the process based on that information and record these findings.
Firstly, perform any required forensic investigation to determine (for compromised resources) what methods the actors may have used and to determine if additional risks and risk mitigations are required for the resources and/or applications in question.
1. For any compromised resources that have been isolated for further analysis, perform the forensic activity on those resources and incorporate the findings into the post-incident report.
1. Ensure that the CMDB is correctly updated to reflect the current status of all resources and applications impacted
1. Once the analysis is completed, ensure relevent resources are terminated and the resulting data and any artifacts from the analysis maintained and/or entered into the relevant system for record-keeping
Secondly, review the incident itself and the response to it, to determine if anything needs to be changed for handling any similar incidents in the future.
1. Review the incident handling and the incident handling process with key stakeholders identified in Part 1, Step 8
1. Document lessons learned, including attack vector(s) mitigation(s), misconfiguration, etc.
1. Store the artifacts from this process with the application information in the CMDB entry for the application and also in the CMDB entry for the credential compromise response process.
## Additional Resources
### Incident Response
https://aws.amazon.com/blogs/security/how-get-started-security-response-automation-aws/
https://docs.aws.amazon.com/whitepapers/latest/https://docs.aws.amazon.com/whitepapers/latest/aws-security-incident-response-guide/welcome.html
https://aws.amazon.com/blogs/security/how-to-automate-incident-response-in-aws-cloud-for-ec2-instances/
https://aws.amazon.com/blogs/security/forensic-investigation-environment-strategies-in-the-aws-cloud/
https://aws.amazon.com/blogs/security/how-to-automate-forensic-disk-collection-in-aws/
https://aws.github.io/aws-eks-best-practices/security/docs/incidents/
https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-remediate-kubernetes.html
### GuardDuty
https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings-summary.html
### Other
https://docs.aws.amazon.com/quicksight/latest/APIReference/API_Reference.html
https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html