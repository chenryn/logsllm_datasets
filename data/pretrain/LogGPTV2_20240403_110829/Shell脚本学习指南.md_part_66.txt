This ia a DgBUG trap
我们发现旧版bash与ksh的行为模式与这里测试出来的不太一样。简而言之，DEBUG
捕捉产生的行为模式各有不同，这会是个问题，因此你不太可能在必须提供可移植性的
Shell脚本里使用此捕捉。
ERR捕捉一样有出人意料的行为：命令替换失败时，则不捕提。举例如下：
s oat err-trap
显示期程序
#1 /bin/ksh -
txap *echo This 18 an ERR trap.* ERR
echo Try a standalone coemand;:
echo Try command substitution: S(1ls no-such-file)
Is no-such-file
1s: no=such-fi1e: No such fi1e or directory
S./err-trap
执行刻试程序
Try command substitution1
18: nosuch-file: No such file or Qirectory
This is an gRR trap
两个18命令都失败，但只有第二个会引发捕捉操作，
在Shell脚本里，最常使用的信号捕提是脚本终结时的清理操作，像是删除暂时性文件。
这类的trap命令引用，传统上会出现在Shell脚本的起始处附近：
trap·清理操作出现在此·BXIT
将捕提设置在Shel的EXIT信号处通常就够用了，因为它会在所有其他的信号之后才被
处理。在实际上，HUP、INT、QUIT与TERM信号也时常被捕捉。
如果要寻找更多在Shell脚本里使用捕捉的范例，你可以这么做：
grep '*trap′ /usr/bin/*
寻找系统Shel1脚本里的捕捉
我们发现许多脚本仍使用旧式的信号编号方式。signal（）函数的使用手册通常会说明
编号与名称的对应。
13.4
进程系统调用的追踪
很多系统都提供系统调用追踪器（systemcalltracers）、它是在执行目标程序时，显示
每个系统调用及目标程序执行时的参数，很可能你的系统里就有一个这样的程序，你可
以试试以下列命令：ktrace、par，strace、trace或truss。虽然这些工具通常不会
用在Shel脚本里，但它们可以帮助你找出进程正在做的事，还有为什么花了这么久的
www.TopSage.com
---
## Page 391
进程
379
时间。除此之外，它们无须访问源代码或改变你程序的使用方式，所以你可以将它们套
.com
用在任何属于你的进程上。此也有助于你对进程的了解，所以本节稍后会作些介绍。
如果你对UNIX系统调用的名称不熟悉，可以通过检查追踪日志迅速找到它们，它们的
文件传统上是放在在线使用手册的Section2：例如open（2）.例如，文件存在的测试通
常会包含access（）或stat（）系统调用，而文件剧除则需要unlink（）系统调用。
大部分编译式程序语言都有除虫程序，允许使用单一步骤、设置中断点、变量检查等等。
大部分系统上，Shell没有除虫程序，所以有时你得使用Shell的-v选项，显示Shell的
输入行，或使用-x选项显示命令及其参数。系统调用追踪器对于输出结果提供了很有
用的补充，因为它们可以让你更深人了解Shell引用的进程。
当你执行未知程序时，就表示你所做的这件事对系统可能造成危险。计算机病毒与端虫
经常是以此方式散布。商用软件多半会随附安装程序，这是用户可以信任并执行的，有
时甚至得要root权限才行。如果程序为Shell脚本，你便能进入一窥究竞。但如果它是
像黑盒子一般的二进制影像文件，你就无从得知它的行为了、这类程序常会让用户觉得
不安，我们多半不会以root的身份执行它，这时，如此一个安装的系统调用追踪日志
就很有用了，它可以帮助你找出安装程序究竞做了些什么。就算你太晚知道面无法回复
已制除的或已更改的文件，至少你可以知道哪些文件已受到影响，如果你的文件系统备
份或快照（注3）还在，便能马上修复此灾难。
大部分长期执行的进程都会有许多系统调用，其追踪的输出可能会是很庞大的数量，因
此，最好将之记录于文件。如果你只对几个系统调用有兴趣，你可以在命令行选项里指
定它们。
我们现在来看看，GNU/Linux系统下建立的进程，追踪BourneShell的通信期。这可能
会有点令人混滑，因为输出的来源有三：追踪（trace）、Shell以及我们所执行的命令。
因此，我们设置提示号变量PS1，以兹区别原始与被追踪的Shel1，这么一来，便能在每
一行评注上它的来源了。trace=process参数会选定与进程相关的一群系统调用：
追踪与进程相关的系统调用
execve(*/bin/sh*, [*/bin/sh*1. [/* 81 vars */]) = 0
通踪的输出
现在执行内置命令：
traced-shs pwd
执行Shel1内置命令
/home/Jones/book
这是命令输出
SX 3:
快照（snapshot）是近期果些高级文件系统的功能：它们可冻结文件系统的状态，通常
只需数粉，保留当下目录树状结构的群式，用以在日后有所变动或发生问题时，根据此
快照回复。
www.TopSage.com
---
## Page 392
380
第13章
只有预期的输出会出现，因为没有新进程被建立，现在为该命令使用另一个程序：
traced-shs /bin/pwd
执行外部命令
fork() = 32390
这是道踪输出
/home/jones/book
vait4 (1,
这是迪踪输出
[WIFEXTTED(8)_&& WEXITSTATUS (S) == O] , WUNTRACED, NULL)
=32390这是迪踪输出
这是命令输出
--- SIGCHLD (Chi1d exited) =*-
最后，离开Shell，追踪即为：
traced-sh$ exit
自 She11离开
exit
这是迪踪输出
_exit (0) = ?
这是迪踪输出
现在回到原始的Shell通信期：
$ pud
回到原始的：She11，确认我们所在位置
/hone/jones/book
工作中目录未变更
Shell发出了fork（）系统调用，以启动/bin/pwd进程，其输出与下一个wait4（）系
统调用的迫踪报告混合在一起，命令如常终止，且Shell收到CHLD信号，指出子进程完
成。
下列为SunSolaris上探测系统调用的范例。-c选项要求在命令完成后显示摘要报告，抑
制迫踪报告的一般输出：
踪pathfind命令
/usr/bin/tru8s
这是pathfind产生的输出
/bin/truss
/u8r/5bin/tru8s
sysca11
seconds
calls
errors
truss的报告由此开始
_exit
.00
fork
.00
1
read
00
00
26
write
00
3
open
.00
10
5
1
close
brk
,00.
42
stat
.01
19
15
stat64
+ + -
E0*
33
. 00
28
open54
1
sys totals:
.04
242
.01
50
elapsed:
usr tine1
19
当程序执行时间超出你所预期时，类似上述的输出就能帮助你，可以通过系统调用找出
执行效能上的瓶颈。time命令可以为系统调用探测识别出候选人：它会报告用户时间、
系统调用时间及墙上时钟时间。
www.TopSage.com
---
## Page 393
进程
381
注意：监控文件访问最常见的系统调用遍踪的应用是：可以在进踪日志中寻找acceBs（）、
open（),stat()与unlink（)的调用报告，在GNU/Linux上，使用atrace -e trace=file
可减少日志量，当全新安装的软件，抱找不到所需的组态文件，又无法告诉你文件名称
时，文件访问追踪就派得上用场了。
系统调用迫踪器对于寻找我们先前所提及的残留锁定文件也很有用。下面是在Sun
Solaris系统上：如何找出由特定网页浏览器所产生的锁定文件：
$ truss -f -o foo.log nozi1la
退踪浏览器执行
S grep -1 1ock foo.log
查找追踪文件里的单词“1ock
29028:syml.ink(*192.168.253.187:29028*,
• /home/Jones/ -mozi11a/Jones/c7rboyyz.s1t/1ock*) = 0
29028:un1inx(*/home/Jones/ .mozi11a/jones/c7rboyyz.s1t/1ock*)= 0
此浏览器产生的锁定文件，指向一个不存在文件名的符号性连接，此文件名包含本地端
机器的数值型Internet主机位置及进程编号。当浏览器进程提早死亡时，删除锁定文件
的unlink（）系统调用便不会被执行。锁定文件名不见得总是有lock这个字在其中，所
以有时你可能得更仔细审视迫踪日志，找出你要的锁定文件。
此处为SGIIRIX系统上缩简的追踪情况，我们要测试的是/bin/sh是否可执行：
$/usr/sbin/par/bin/test-x/bin/ah.退踪;test 命令
0mS[0]: execve (*/bin/test*, 0x7ffb7e88, 0x7ffb7e98)
+ + 
6mS [
0] 1 acce8s (*/bin/sh*, x_oK) OR.
6mS1
0]: stat(*/bin/sh*, 0x7ttb7cd0). 0x
+ + 
6mS[
(0)x1101sw9
:Aeums Treo warsg
Average
Time (ns)
Total
Name
#Calls
Time (ns)
execve
1
3.91
3.91
uado
2
0.11
0.21
acce88
1
0.17
0.17
stat
1
0.12
0:12
pret1
+ +*
0.01
0.01
exit
1
0.00
0.00
当你找到你要的系统调用就可以限制追踪输出，只显示特定的调用，让画面不致太过混
乱：
www.TopSage.com
---
## Page 394
382
第43章
S/usr/ebin/par -n stat/bin/test-x/bin/sh
0mS[0](5399999） ：was sentsignnl SIGUsR1
仅迪踪stat系统调用
om
0mS[3]:received signa1 SIGusR1 (handler 0x100029d8)
6mS[3]:stat(*/bin/sh*,0x7ffb7cd0） oK
System call summary :
+ + 
BSD与MacOSX的ktrace命令的运行有点不太一样，它们是将追踪结果写成二进制
文件：ktrace.out。之后，再执行kdump将其转换为文字形式。下面是来自NetBSD
系统的追踪，测试/bin/sh的执行权限：
$ktrace toat -x/bin/sh
迫踪test命令
S 1e -1 ktrace.out
8698 Jul 27 09:44 ktrace.out
列出进踪日志
--MI-MX-
1 jones
devel
s kdump