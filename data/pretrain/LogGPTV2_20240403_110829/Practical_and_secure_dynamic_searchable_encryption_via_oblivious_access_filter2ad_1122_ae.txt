access(x(b)
) for all
1 ≤ j ̸= i ≤ q. Without loss of generality, we assume that
j  i, its data will be read from S¬b so that
S¬b can observe the address u(¬b)
accessed at step i is now
accessed again. By this access pattern, S¬b can infer the
same query is performed at step i and j on it. However from
Sb’s view, it is oblivious for Sb to determine if the data being
at step j is associated
with the query x at step i due to Lemma 1. Now assume that
at step k, where k > j > i, the query x is performed again.
It will be read from Sb and then written to S¬b. Similar to
that of Sb at step j, S¬b observes an access operation which
is unlinkable to access operations generated at step j and
i by Lemma 1. It can be easily seen that the same query
only generates the same address access at most two times.
Therefore, the corollary holds.
x
T h e o r e m 1. Given a server Sb, DOD-DSSE achieves
security Deﬁnition 4, meaning that DOD-DSSE leaks no
information beyond ORAM security deﬁnition with the ex-
ception of one-time repetition of an unlinkable query on the
other S¬b, to which Sb does not have access.
P ro o f . Given an access pattern APb of length q as in
(1) observed by server Sb, denote Yq as the set of all possible
combinations y of N data items, where |y|= q. We have N q
possible strings as |Yq|= N q. Let u(b)
i,2 be read and write
addresses for search query observed by Sb, respectively, given
a data access request access(x(b)
i ). From Sb’s view, data item
of the real query xi (denoted as I′xi ) can be accessed from
u(b)
i,1, or u(b)
i,2 (i.e., I′xi is actually accessed from S¬b and then
written to Sb). By Lemma 1, we have:
i,1, u(b)
Pr(access(x(b)
i )) =
2)j=1
+ Pr(pos(I′xi ) = u(b)
i,j ) Pr(u(b)
1
26 Pr(pos(I′xi ) = u(b)
28 1
i,j ̸∈ Tw.Lb)7 =
2)j=1
1
N
i,j ) Pr(u(b)
i,j ∈ Tw.Lb)
29 =
1
N
1
N
1
.
+
1
2
Notice that given a real query xi, Algorithm 3 generates
two random row indices on each server Sb: one is from the
set of dummy addresses and the other is from from the set
of non-empty addresses. Such addresses are removed from
their current set and included in the other set. This is to
maintain the size of each set so that given another real query
xj ̸= xi, its generated addresses are randomly chosen from
size-consistent sets, making it independent of each other.
Hence, from Sb’s observation, access patterns generated by
access(x(b)
i ) are computational indistinguishable from those
generated by access(x(b)
j ), given that xj ̸= xi.
i,1 then pos(I′xj ) =u (b)
For xj = xi, withq ≥ j > i ≥ 1, we have two cases:
(i) If pos(I′xi ) =u (b)
j,2, meaning I′xi is
read from Sb, while I′xj is read from S¬b. By Lemma 1,
data in uj,2 is unlinkable to any data items in Sb. There-
fore, access(x(b)
j ) generates an access pattern which is
statistically independent from access(x(b)
i ) in server Sb.
(ii) If pos(I′xi ) =u (b)
i,2 then pos(I′xj ) =u (b)
j,1, meaning Ixi is
read from S¬b and I′xj is read from Sb. Sb observes that
the same address is accessed again (i.e., u(b)
j,1 = u(b)
i,2).
By Lemma 1, data from u(b)
i,2 is written to S¬b which
is unlinkable to any data items in S¬b; the probability
that Sb can determine if I′xj is re-written back to it
309
in subsequent access operations is 1
N . That means
given another query xk such that xk = xj = xi, with
k > j > i, the access pattern generated by access(x(b)
k )
is statistically independent from access(x(b)
j ) as in case
(i). Therefore, the information DOD-DSSE leaks in
this case is that the same query can generate the same
address access at most twice, as shown in Corollary 1.
j=1 Pr(access(x(b)
To sum up, we have Pr(APb) = "q
- 1
N.(q−r), where r is the number of one-time repetitions of
data access requests as in case (ii). There are N (t−r) possible
strings y ∈Y q that can generate the same APb so that it is
computationally indistinguishable for Sb to determine which
string in N (t−r) candidates generates the APb. In the worst
case, where there are r = q/2 repetitions in the data request
j )) =
sequence of length q, then Pr(APb) =- 1
N.q/2.
Security against statistical attacks. In traditional DSSE,
each search or update query on a keyword or a ﬁle produces
the same address being accessed for consistency purposes.
This deterministic relation between queries and address to-
kens permits an adversary to perform statistical attacks, such
as query frequency analysis, to uncover the relations among
keyword/ﬁle being accessed [15, 3, 27, 11].
In DOD-DSSE , queries observed in each server are unlink-
able by Deﬁnition 3 to each other, meaning that they can
be independently generated by any possible keywords/ﬁles,
from the server’s view. DOD-DSSE achieves the security by
Deﬁnition 4 in that, the only information that server Sb can
infer from its observed access pattern is one-time repetition
of an arbitrary query, which is previously performed on the
other server S¬b. Note that servers do not have a view of
each other’s accesses or queries (i.e., non-colluding servers).
This leakage is negligible for any practical setting, and does
not permit to establish any statistical relationship, since
one-time repetitions are unlinkable. These security guaran-
tees imply that DOD-DSSE can not only prevent statistical
analysis (e.g., [15]) but also any other potential threats that
may exploit the linkability among arbitrary queries.
5. PERFORMANCE EVALUATION
We evaluated the performance of our scheme on real net-
work settings with diﬀerent network latencies. By latency,
we mean the round-trip time taken by a packet to go from
the host (i.e., client) to the destination (i.e., server) and
back. In addition, we made several comparisons. First, we
compared our scheme’s cryptographic end-to-end delay (i.e.,
the time to completely process a search or update operation)
with a traditional DSSE scheme which does not hide the
access pattern (e.g., [26]). We then compared to a simu-
lated scheme which applies ORAM on a DSSE dictionary
data structure and matrix data structure4. We notice that
in order to be comparable with ORAM, which can achieve
oblivious operations (i.e., whether the operation is search
or update), our DOD-DSSE scheme is designed to always
perform both search and update queries regardless of the type
of actual operation which is required. Therefore, search and
update operations require the same amount of time. This is
in contrast with traditional DSSE schemes in which search
4We did not implement the full scheme, we estimated the perfor-
mance by simulation in a real network setting and assuming a 4 KB
block-size ORAM as presented in [25, 24].
310
and update operations incur diﬀerent delays. This will be
shown in the following experiments.
Hardware setting and conﬁguration. We used a HP
Z230 Desktop as the client and two virtual servers provided
by Amazon EC2. The client machine was installed with
CentOS 7.2 and equipped with Intel Xeon CPU E3-1231v3
@ 3.40GHz, 16 GB RAM and 256 GB SSD. We deployed
servers running Ubuntu 14.04 with m4.4xlarge instance type
which oﬀers 16 vCPUs @ 2.4 GHz, Intel Xeon E5-2676v3, 64
GB RAM and 200 GB SSD for each server.
We adopted Google sparse hash table5 to implement the
data structures Tf , Tw stored at the client side. We im-
plemented IND-CPA encryption and decryption schemes
using AES-CTR mode as it supports parallelism and key
pre-computation. We used AES-128 CMAC to implement
the hash function H. For cryptographic primitives, we uti-
lized libtomcrypt6 with Intel AES-NI hardware accelerated
library7 to optimize the performance of cryptographic op-
erations. We used ZeroMQ library8 to implement network
communication between client and server(s).
Dataset. We performed our experiments on the Enron
email dataset9. We selected subsets of the Enron corpus to
construct the DSSE data structure with various combinations
of keyword-ﬁle pairs, ranging from 108 to 9× 1010. This is to
evaluate the performance of DOD-DSSE and its counterparts
with diﬀerent dataset sizes starting from small to very large
similar to [4].
Results and Comparison. We ﬁrst measured the pre-
processing time to build the encrypted data structures in
DOD-DSSE with diﬀerent sizes. With the largest data struc-
ture being experimented, which consists of 9 × 1011 keyword-
ﬁle pairs (i.e., 300,000 ﬁles and 300,000 keywords), it takes
the client roughly 20 hours to construct two encrypted in-
cidence matrices. For 108 keyword-ﬁle pairs, the time is 30
seconds. Notice that this initialization phase is only run
one time in the oﬄine phase so that its cost is not an im-
portant factor. Our focus is to evaluate the performance of
DOD-DSSE and its counterparts in the online phase, where
we perform search and update operations on the constructed
data structure(s).
Next, we showed the performance of DOD-DSSE scheme
in the online phase. We created two Amazon EC2 servers
in the same geographical region (i.e., in-state), resulting
in an average network latency of 11 ms and throughput
of 100 Mbps. It takes approximately 800 ms to perform a
search (or update) operation on the distributed data structure
consisting of 9 × 1011 keyword-ﬁle pairs, as demonstrated in
Figure 4b.
We compared the actual cost of DOD-DSSE with that
of our counterparts. We selected the scheme in [26] to be
our main traditional DSSE counterpart as, to the best of
our knowledge, it is the most secure DSSE scheme in the
literature. We used Path ORAM [24] protocol for ODS as it
oﬀers optimal bandwidth overhead. We simulated the cost
of using ODS on a dictionary (denoted as ODICT) and a
square incidence matrix (denoted as OMAT) data structures
5https://github.com/sparsehash/sparsehash
6http://www.libtom.org/LibTomCrypt/
7https://software.intel.com/articles/download-the-intel-aesni-
sample-library
8http://zeromq.org/
9https://www.cs.cmu.edu/∼./enron/
(cid:22)
(cid:7)
(cid:31)
(cid:30)
(cid:29)
(cid:28)
(cid:17)
(cid:19)
(cid:7)
(cid:28)
(cid:27)
(cid:17)
(cid:26)
(cid:25)(cid:23)(cid:24)
(cid:25)
(cid:1)(cid:23)(cid:24)
(cid:1)
(cid:2)(cid:23)(cid:24)
(cid:2)
(cid:1)(cid:2)(cid:3)
(cid:32)(cid:33)(cid:32)(cid:13)(cid:32)(cid:34)(cid:34)(cid:35)
(cid:32)(cid:34)(cid:34)(cid:35)(cid:1) (cid:36)(cid:25)(cid:25)(cid:38)(cid:1) (cid:19)(cid:18)(cid:7)(cid:16)(cid:11)(cid:21)(cid:39)(cid:22)
(cid:32)(cid:34)(cid:34)(cid:35)(cid:1) (cid:36)(cid:25)(cid:25)(cid:38)(cid:1) (cid:19)(cid:30)(cid:15)(cid:12)(cid:16)(cid:31)(cid:7)(cid:22)
(cid:33)(cid:32)(cid:40)(cid:41)(cid:27)(cid:1) (cid:19)(cid:42)(cid:16)(cid:31)(cid:39)(cid:1) (cid:33)(cid:43)(cid:44)(cid:45)(cid:13)(cid:46)(cid:16)(cid:18)(cid:7)(cid:12)(cid:1) (cid:36)(cid:25)(cid:23)(cid:38)(cid:1) (cid:33)(cid:32)(cid:34)(cid:1) (cid:36)(cid:25)(cid:24)(cid:38)(cid:22)(cid:1)
(cid:33)(cid:45)(cid:44)(cid:27)(cid:1) (cid:19)(cid:42)(cid:16)(cid:31)(cid:39)(cid:1) (cid:33)(cid:43)(cid:44)(cid:45)(cid:13)(cid:46)(cid:16)(cid:18)(cid:7)(cid:12)(cid:1) (cid:36)(cid:25)(cid:23)(cid:38)(cid:1) (cid:33)(cid:32)(cid:34)(cid:1) (cid:36)(cid:25)(cid:24)(cid:38)(cid:22)
(cid:22)
(cid:12)
(cid:31)
(cid:10)
(cid:21)
(cid:7)
(cid:18)
(cid:17)
(cid:14)
(cid:17)
(cid:30)
(cid:19)
(cid:7)
(cid:30)
(cid:29)
(cid:17)
n
i
d
e
m
o
o
z
(cid:1)(cid:2)(cid:4)
(cid:1)(cid:2)(cid:1)(cid:2)
(cid:1)(cid:2)(cid:1)(cid:1)
(cid:5) (cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:1)(cid:14)(cid:7) (cid:15)(cid:16)(cid:17)(cid:11)(cid:18) (cid:19)(cid:14)(cid:10)(cid:20) (cid:18)(cid:21)(cid:16)(cid:14)(cid:7)(cid:22)
(a) DOD − DSSE vs. ODS and traditional DSSE
(cid:3)(cid:2)(cid:2)
(cid:28)(cid:2)(cid:2)
(cid:27)(cid:2)(cid:2)
(cid:26)(cid:2)(cid:2)
(cid:25)(cid:2)(cid:2)
(cid:24)(cid:2)(cid:2)
(cid:23)(cid:2)(cid:2)
(cid:1)(cid:2)(cid:2)
(cid:2)
(cid:1)(cid:2)(cid:3)
(cid:32)(cid:33)(cid:32)(cid:13)(cid:32)(cid:34)(cid:34)(cid:35)
(cid:32)(cid:34)(cid:34)(cid:35)(cid:1) (cid:36)(cid:23)(cid:25)(cid:37)(cid:1) (cid:19)(cid:18)(cid:7)(cid:16)(cid:11)(cid:21)(cid:38)(cid:22)
(cid:32)(cid:34)(cid:34)(cid:35)(cid:1) (cid:36)(cid:23)(cid:25)(cid:37)(cid:1) (cid:19)(cid:39)(cid:15)(cid:12)(cid:16)(cid:40)(cid:7)(cid:22)
(cid:1)(cid:2)(cid:4)
(cid:1)(cid:2)(cid:1)(cid:2)
(cid:1)(cid:2)(cid:1)(cid:1)
(cid:5) (cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:1)(cid:14)(cid:7) (cid:15)(cid:16)(cid:17)(cid:11)(cid:18) (cid:19)(cid:14)(cid:10)(cid:20) (cid:18)(cid:21)(cid:16)(cid:14)(cid:7)(cid:22)
(b) DOD − DSSE vs. traditional DSSE
Figure 4: End-to-end cryptographic delay with in-state network latency, where (b) is zoomed in view of DOD-DSSE and
traditional DSSE, which is hard to be observed in (a).
(cid:22)
(cid:7)
(cid:30)
(cid:29)
(cid:28)
(cid:27)
(cid:17)
(cid:19)
(cid:7)
(cid:27)
(cid:26)
(cid:17)
(cid:1)(cid:24)
(cid:1)(cid:23)
(cid:1)(cid:2)
(cid:3)
(cid:25)
(cid:24)
(cid:23)
(cid:2)
(cid:1)(cid:2)(cid:3)
(cid:31)(cid:32)(cid:31)(cid:13)(cid:31)(cid:33)(cid:33)(cid:34)
(cid:31)(cid:33)(cid:33)(cid:34)(cid:1) (cid:35)(cid:23)(cid:25)(cid:36)(cid:1) (cid:19)(cid:18)(cid:7)(cid:16)(cid:11)(cid:21)(cid:37)(cid:22)
(cid:31)(cid:33)(cid:33)(cid:34)(cid:1) (cid:35)(cid:23)(cid:25)(cid:36)(cid:1) (cid:19)(cid:29)(cid:15)(cid:12)(cid:16)(cid:30)(cid:7)(cid:22)
(cid:32)(cid:31)(cid:38)(cid:39)(cid:26)(cid:1) (cid:19)(cid:40)(cid:16)(cid:30)(cid:37)(cid:1) (cid:32)(cid:41)(cid:42)(cid:43)(cid:13)(cid:44)(cid:16)(cid:18)(cid:7)(cid:12)(cid:1) (cid:35)(cid:23)(cid:23)(cid:36)(cid:1) (cid:32)(cid:31)(cid:33)(cid:1) (cid:35)(cid:23)(cid:24)(cid:36)(cid:22)(cid:1)
(cid:32)(cid:43)(cid:42)(cid:26)(cid:1) (cid:19)(cid:40)(cid:16)(cid:30)(cid:37)(cid:1) (cid:32)(cid:41)(cid:42)(cid:43)(cid:13)(cid:44)(cid:16)(cid:18)(cid:7)(cid:12)(cid:1) (cid:35)(cid:23)(cid:23)(cid:36)(cid:1) (cid:32)(cid:31)(cid:33)(cid:1) (cid:35)(cid:23)(cid:24)(cid:36)(cid:22)