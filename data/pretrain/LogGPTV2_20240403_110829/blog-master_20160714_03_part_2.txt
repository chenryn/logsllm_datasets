        How often TCP sends out keepalive messages when keepalive is enabled.    
        Default: 2hours.    
tcp_keepalive_probes - INTEGER    
        How many keepalive probes TCP sends out, until it decides that the    
        connection is broken. Default value: 9.    
tcp_keepalive_intvl - INTEGER    
        How frequently the probes are send out. Multiplied by    
        tcp_keepalive_probes it is time to kill not responding connection,    
        after probes started. Default value: 75sec i.e. connection    
        will be aborted after ~11 minutes of retries.    
```  
3\. src/backend/libpq/pqcomm.c    
```  
截取一个设置interval的函数.    
int    
pq_setkeepalivesinterval(int interval, Port *port)    
{    
        if (port == NULL || IS_AF_UNIX(port->laddr.addr.ss_family))    
                return STATUS_OK;    
#if defined(TCP_KEEPINTVL) || defined (SIO_KEEPALIVE_VALS)    
        if (interval == port->keepalives_interval)    
                return STATUS_OK;    
#ifndef WIN32    
        if (port->default_keepalives_interval default_keepalives_interval;    
        if (setsockopt(port->sock, IPPROTO_TCP, TCP_KEEPINTVL,    
                                   (char *) &interval, sizeof(interval)) keepalives_interval = interval;    
#else                                                   /* WIN32 */    
        return pq_setkeepaliveswin32(port, port->keepalives_idle, interval);    
#endif    
#else    
        if (interval != 0)    
        {    
                elog(LOG, "setsockopt(TCP_KEEPINTVL) not supported");    
                return STATUS_ERROR;    
        }    
#endif    
        return STATUS_OK;    
}    
```  
4\. man netstat    
```  
   -o, --timers    
       Include information related to networking timers.    
```  
5\. man 7 tcp    
```  
   /proc interfaces    
       System-wide TCP parameter settings can be accessed by files in the directory /proc/sys/net/ipv4/.  In addition,  most  IP    
       /proc  interfaces  also  apply  to  TCP; see ip(7).  Variables described as Boolean take an integer value, with a nonzero    
       value ("true") meaning that the corresponding option is enabled, and a zero value ("false") meaning that  the  option  is    
       disabled.    
       tcp_keepalive_intvl (integer; default: 75; since Linux 2.4)    
              The number of seconds between TCP keep-alive probes.    
       tcp_keepalive_probes (integer; default: 9; since Linux 2.2)    
              The maximum number of TCP keep-alive probes to send before giving up and killing the connection if no response  is    
              obtained from the other end.    
       tcp_keepalive_time (integer; default: 7200; since Linux 2.2)    
              The  number of seconds a connection needs to be idle before TCP begins sending out keep-alive probes.  Keep-alives    
              are only sent when the SO_KEEPALIVE socket option is enabled.  The default value is 7200 seconds  (2  hours).   An    
              idle  connection  is  terminated  after approximately an additional 11 minutes (9 probes an interval of 75 seconds    
              apart) when keep-alive is enabled.    
   Socket Options    
       To set or get a TCP socket option, call getsockopt(2) to read or setsockopt(2) to write the option with the option  level    
       argument set to IPPROTO_TCP.  In addition, most IPPROTO_IP socket options are valid on TCP sockets.  For more information    
       see ip(7).    
       TCP_KEEPCNT (since Linux 2.4)    
              The  maximum number of keepalive probes TCP should send before dropping the connection.  This option should not be    
              used in code intended to be portable.    
       TCP_KEEPIDLE (since Linux 2.4)    
              The time (in seconds) the connection needs to remain idle before TCP  starts  sending  keepalive  probes,  if  the    
              socket  option  SO_KEEPALIVE  has  been set on this socket.  This option should not be used in code intended to be    
              portable.    
       TCP_KEEPINTVL (since Linux 2.4)    
              The time (in seconds) between individual keepalive probes.  This option should not be used in code intended to  be    
              portable.    
```  
6\. netstat core :     
以下内容转载自 :     
http://vzkernel.blogspot.tw/2012/09/description-of-netstat-timers.html    
```  
It's not easy to find out the detail description of a network socket timer from internet, I did some dig today.    
The mannual page from netstat:    
   -o, --timers    
       Include information related to networking timers.    
Then we check some command output:    
netstat -nto | head    
Active Internet connections (w/o servers)    
Proto Recv-Q Send-Q Local Address               Foreign Address             State       Timer    
tcp        0      0 127.0.0.1:5005              127.0.0.1:55309             SYN_RECV    on (5.14/1/0)    
tcp        0      0 127.0.0.1:5005              127.0.0.1:55312             SYN_RECV    on (1.34/0/0)    
tcp        0      0 127.0.0.1:5005              127.0.0.1:55310             SYN_RECV    on (2.34/0/0)    
tcp        0      0 127.0.0.1:5005              127.0.0.1:55303             SYN_RECV    on (4.14/1/0)    
tcp        0      0 192.168.1.16:57018          74.125.128.132:443          ESTABLISHED off (0.00/0/0)    
tcp        0      0 192.168.1.16:41245          203.208.46.2:443            ESTABLISHED off (0.00/0/0)    
tcp        0      0 192.168.1.16:42636          203.208.46.7:443            TIME_WAIT   timewait (44.66/0/0)    
tcp        0      0 127.0.0.1:55302    
The Timer field with the format (5.14/1/0), what does it mean?    
Let's figure it out.    
The second step, check the source code from net-tools, grab the source code from source forge:    
git clone git://net-tools.git.sourceforge.net/gitroot/net-tools/net-tools    
from userspace netstat.c:    
tcp_do_one():    
{    
....    
        if (flag_opt)    
            switch (timer_run) {    
            case 0:    
                snprintf(timers, sizeof(timers), _("off (0.00/%ld/%d)"), retr, timeout);    
                break;    
            case 1:    
                snprintf(timers, sizeof(timers), _("on (%2.2f/%ld/%d)"),    
                         (double) time_len / HZ, retr, timeout);    
                break;    
            case 2:    
                snprintf(timers, sizeof(timers), _("keepalive (%2.2f/%ld/%d)"),    
                         (double) time_len / HZ, retr, timeout);    
                break;    
            case 3:    
                snprintf(timers, sizeof(timers), _("timewait (%2.2f/%ld/%d)"),    
                         (double) time_len / HZ, retr, timeout);    
                break;    
            default:    
                snprintf(timers, sizeof(timers), _("unkn-%d (%2.2f/%ld/%d)"),    
                         timer_run, (double) time_len / HZ, retr, timeout);    
                break;    
            }    
Both the fields are grabbed from proc/net/tcp, let's check the content of it:    
$ head /proc/net/tcp    
  sl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeoutinode                                                         
   0: 00000000:036B 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 13012 1 ffff88007baf5400 299 0 0 2 -1                         
   1: 0100007F:138D 00000000:0000 0A 00000000:00000006 00:00000000 00000000   500        0 472674 1 ffff880021ab0380 299 0 0 2 -1                        
   2: 00000000:006F 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 11242 1 ffff8800796006c0 299 0 0 2 -1                         
   3: 00000000:BD50 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 13056 1 ffff880078da7440 299 0 0 2 -1                         
   4: 017AA8C0:0035 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 14066 1 ffff880078dac100 299 0 0 2 -1       
description from proc_net_tcp.txt    
timer_active:    
  0  no timer is pending    
  1  retransmit-timer is pending    
  2  another timer (e.g. delayed ack or keepalive) is pending    
  3  this is a socket in TIME_WAIT state. Not all fields will contain    
     data (or even exist)    
  4  zero window probe timer is pending    
No too much glue? Let's dive into the kernel code to have a look how the proc_net_tcp defined:    
net/ipv4/tcp_ipv4.c:    
static int tcp4_seq_show(struct seq_file *seq, void *v)    
{    
        struct tcp_iter_state *st;    
        int len;    
        if (v == SEQ_START_TOKEN) {    
                seq_printf(seq, "%-*s\n", TMPSZ - 1,    
                           "  sl  local_address rem_address   st tx_queue "    
                           "rx_queue tr tm->when retrnsmt   uid  timeout "    
                           "inode");    
                goto out;    
        }    
        st = seq->private;    
        switch (st->state) {    
        case TCP_SEQ_STATE_LISTENING:    
        case TCP_SEQ_STATE_ESTABLISHED:    