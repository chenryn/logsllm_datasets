matches some additional esoteric horizontal whitespace characters.
Using ^^xAo to match no-break spaces in Ruby 1.9 may lead to an *invalid mulribyte
escape” or other encoding related errors, since it references a character beyond the
ASCII range . Use ^\uooAo> instead.
See Also
Recipe 5.12 explains how to trim leading and trailing whitespace.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.2 explains how to match nonprinting characters. Recipe 2.3 explains character
classes. Recipe 2.12 explains repetition.
370 | Chapter 5: Words, Lines, and Special Characters
---
## Page 387
5.14EscapeRegularExpressionMetacharacters
Problem
You want to use a literal string provided by a user or from some other source as
part of a regular expression. However, you want to escape all regular expression
metacharacters within the string before embedding it in your regex, to avoid any un-
intended consequences.
Solution
By adding a backslash before any characters that potentially have special meaning
within a regular expression, you can safely use the resulting pattem to match a literal
sequence of characters. Of the programming languages covered by this book, all except
JavaScript have a built-in function or method to perform this task (listed in Ta-
ble 5-3). However, for the sake of completeness, we'il show how to pull this off using
your own regex, even in the languages that have a ready-made solution.
Built-in solutions
Table 5-3 lists the built-in functions and methods designed to solve this problem.
Tabie 5-3. Bailt-ir solaetions for escaping regalar expresior metachuaracters
Language
Function
CI, VB.NET
Regex. Escape(str)
Java
Pattern.quote (str)
XRegEap
XRegExp,escape(str)
Perl
quoteneta(stz)
 PHP
preg_quote(str, [delini ter])
Python
re.escape(str)
Ruby
Regexp-escape (str)
Notably absent from the list is JavaScript (without XRegExp), which does not have a
native function designed for this purpose,
Regular expression
Although it's best to use a built-in solution if available, you can pull this off on your
own by using the following regular expression along with the appropriate replacement
string (shown next). Make sure to replace all matches, rather than only the first.
Recipe 3.15 shows code for replacing matches with strings that contain backreferences.
You’ll need a backreference here to bring back the matched special character along with
a preceding backslash:
5.14 Escape Regular Expresin Metacharacters | 371
---
## Page 388
[[\]{()*+？,\\|~$\-,&#\s]
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Replacement
The following replacement strings contain a literal backslash character.
The strings are shown without the extra backslashes that may be needed
languages. See Recipe 2.19 for more details about replacement text
flavots.
\$&
Replacement text flavors: .NET, JavaScript
\$0
Replacement text flavors: .NET, XRegExp
\1$&
Replacement text flavor: Perl
\1$0
Replacement text flavors: Java, PHP
Replacement text flavors: PHIP, Ruby
111&
Replacement text flavor: Ruby
111g
Replacement text flavor: Python
Example JavaScript function
Here’s an example of how you can put the regular expression and replacement string
to use to create a static method called RegExp,escape() in JavaScript:
RegExp.escape = function(str){
return str.replace(/[[\]{}()*+?\\|^$\-,&#′s]/g, "\\s8");
// Test it...
var str = "*;
var escapedStr = RegExp.escape (str);
nx= spades)xe
372 I Chapter 5: Words, Lines, and Special Characters
---
## Page 389
Discussion
This recipe'’s regular expression puts all the regex metacharacters inside a single char
acter class. Let’s take a look at each of those characters, and examine why they need
to be escaped. Some are less obvious than others:
（)}]
[> creates a character class.  creates an interval quantifier and is also used with
some other special constructs, such as Unicode properties. ( and ) are used for
grouping, capturing, and other special constructs.
* + ?
These three characters are quantifiers that repeat their preceding element zero or
more, one or more, or between zero and one time, respectively. The question mark
is also used after an opening parenthesis to create special groupings and other
constructs (the same is true for the asterisk in Perl 5.10 and PCRE 7).
.\1
A dot matches any character within a line or string, a backslash makes a special
character literal or a literal character special, and a vertical bar altermates between
multiple options.
$
The caret and dollar symbols are anchors that match the start or end of a line or
string. The caret can also negate a character class.
The remaining characters matched by the regular expression are only special in special
circumstances. They're included in the list to err on the side of caution.
A right square bracket ends a character class. Normally, this would not need to be
escaped on its own, but doing so avoids unintentionally ending a character class
when embedding text inside one. Keep in mind that if you do embed text inside a
character class, the resulting regex will not match the embedded string, but rather
any one of the characters in the embedded string.
A hyphen creates a range within a character class, It's escaped here to avoid inad-
vertently creating ranges when embedding text in the middle of a character class.
A right curly bracket ends an interval quantifier or other special construct. Since
most regular expression flavors treat curly brackets as literal characters if they do
not form a valid quantifier, it’s possible to create a quantifier where there was none
brackets.
before when inserting literal text in a regex if you don’t escape both ends of curly
5.14 Escape Regular Expresion Metacharacters | 373
---
## Page 390
a bit unlikely) to create a quantifier where there was none before when inserting
A comma is used inside an interval quantifier such as . It's possible (though
literal text in a regex if you don’t escape commas.
The ampersand is included in the list because rwo ampersands in a row are
used for character class intersection in Java (see “Flavor-Specific Fea-
tures" on page 36). In other programming languages, it's safe to remove the am-
persand from the list of characters that need to be escaped, but it doesn’t hurt to
keep it.
# and whitespace
The pound sign and whitespace (matched by *) is
used to restore the matched character along with a preceding backslash. In Perl, 8 is
-1opad qeqof8 t sasodu uotssaudxa eqnlau Aue qum 1 Suisn pue *aqeuea e Aijenoe
mance penalty on all regular expressions. If $& is used elsewhere in your Perl program,
it's OK to use it as much as you want because you've already paid the price. Otherwise
it's probably better to wrap the entire regex in a capturing group, and use $1 instead of
$& in the replacement.
Variations
aunbas adessa xoopq e aeao ueo no 6z aed uo odessa xool u! pauedxa sy
within a regex using . However, block escapes are only supported by Java,
PCRE, and Perl, and even in those languages block escapes are not foolproof. For com-
plete safety, you?d still need to escape any occurrence of \E within the string you plan
to embed in your regex. In most cases it’s probably easier to just use the cross-language
approach of ecaping all regex metacharacters.
See Also
Recipe 2.1 discusses how to match literal characters and escape metacharacters. How-
ever, its list of characters that need to be escaped is shorter since it doesn’t concern
itself with characters that may need to be escaped in free-spacing mode or when drop-
ped into an arbitrary, longer pattem.
The example JavaScript solution in Recipe 5.2 creates a function that escapes any reg-
ular expression metacharacters within words to be searched for. It uses the shorter list
of special characters from Recipe 2.1
Techniques used in the regular expression and replacement text in this recipe are dis-
cussed in Chapter 2. Recipe 2.3 explains character classes. Recipe 2.20 explains how
to insert the regex match into the replacement text.
374 | Chapter 5: Words, Lines, and Special Characters
---
## Page 391
CHAPTER6
Numbers
Regular expressions are designed to deal with text, and don’t understand the numerical
meanings that humans assign to strings of digits. To a regular expression, 56 is not the
numberfifry-six, but a string consisting of rwo characters displayed as the digits 5 and
6. The regex engine knows they're digits, because the shorthand character class \d)
matches them (see Recipe 2.3). But that’s it. It doesn’t know that 56 has a higher mean-
ing, just as it doesn’t know that :) is anything but three punctuation characters
matched by 
But numbers are some of the most important input you're likely to deal with, and
sometimes you need to process them inside a regular expression instead of just passing
them to a conventional programming language when you want to answer questions
such as, *Is this number within the range 1 through 100?" So we've devoted a whole
chapter to matching all kinds of numbers with regular expressions. We start off with a
few recipes that may seem trivial, but actually explain important basic concepts. The
later recipes that deal with more complicated regexes assume you grasp these basic
concepts.
6.1IntegerNumbers
Problem
You want to find various kinds of integer decimal numbers in a larger body of text, or
check whether a string variable holds an integer decimal number.
Solution
Find any positive integer decimal number in a larger body of text:
\b[0-9]+\b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
SLE
---
## Page 392
Check whether a text string holds just a positive integer decimal number:
\A[0-9]+\Z
Regex options: None
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
$+[6-0]
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Find any positive integer decimal number that stands alone in a larger body of text:
？ and \Z> are your best op-
tion, because their meaning doesn’t change. Unforrunately, JavaScript doesn’t support
leq Beg w/ aq  pue (> asn *1duoseae[ ul uaq
makes the caret and dollar match at line breaks, In Ruby, the caret and dollar always
match at line breaks, so you can’t reliably use them to force your regex to match the
whole string.
When searching for numbers within a larger body of text, word boundaries
(Recipe 2.6) are an easy solution. When you place them before or after a regex token
that matches a digit, the word boundary makes sure there is no word character before
or after the matched digit. For example,  does too, because
there’s no word character after the 4.  and  don’t match anything in A4,
because  instead of  does match +4 in the text 3+4, because 3 is a word character
and + is not.
\+4\b) only needs one word boundary. The first ^b> in \+\b4\b> is superfluous. When
this regex matches, the first \b> is always between a + and a 4, and thus never excludes
anything. The first ^b becomes important when the plus sign is optional.  does.
Word boundaries are not always the right solution. Consider the subject text
$123, 456.78. If you iterate over this string with the regex , it'’ll match 123,
456, and 78. The dollar sign, comma, and decimal point are not word characters, so the
word boundary matches between a digit and any of these characters. Sometimes this
is what you want, sometimes not.
If you only want to find integers surrounded by whitespace or the start or end of a
string, you need to use lookaround instead of word boundaries.  matches either at the start of the string, or after a character that is
the end of the string or before a character that is whitespace (whitespace includes line
whitespace. You can replace  becomes
(?: I(? for Perl and Python. These rwo regexes are functionally identical. The
latter just takes a bit more effort on the keyboard.
JavaScript and Ruby 1.8 don’t support lookbehind. You can use a normal group instead
of lookbehind to check if the number occurs at the start of the string, or if it is preceded
by whitespace. The drawback is that the whitespace character will be included in the
solution to thatis to putthe partof the regex that matches the numberinside a capruring
overall regex match if the number doesn’t occur at the start of the string. An easy
group. The fifth regex in the section “Solution* captures the whitespace character in
the first capturing group and the matched integer in the second capruring group.