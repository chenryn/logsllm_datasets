title:A11y Attacks: Exploiting Accessibility in Operating Systems
author:Yeongjin Jang and
Chengyu Song and
Simon P. Chung and
Tielei Wang and
Wenke Lee
A11y Attacks: Exploiting Accessibility in
Operating Systems
Yeongjin Jang, Chengyu Song, Simon P. Chung, Tielei Wang, and Wenke Lee
School of Computer Science, College of Computing
Georgia Institute of Technology, Atlanta, GA, USA
{yeongjin.jang,csong84,pchung,tielei.wang,wenke}@cc.gatech.edu
ABSTRACT
Driven in part by federal law, accessibility (a11y) support for dis-
abled users is becoming ubiquitous in commodity OSs. Some assis-
tive technologies such as natural language user interfaces in mobile
devices are welcomed by the general user population. Unfortunately,
adding new features in modern, complex OSs usually introduces
new security vulnerabilities. Accessibility support is no exception.
Assistive technologies can be deﬁned as computing subsystems
that either transform user input into interaction requests for other
applications and the underlying OS, or transform application and
OS output for display on alternative devices. Inadequate security
checks on these new I/O paths make it possible to launch attacks
from accessibility interfaces. In this paper, we present the ﬁrst secu-
rity evaluation of accessibility support for four of the most popular
computing platforms: Microsoft Windows, Ubuntu Linux, iOS, and
Android. We identify twelve attacks that can bypass state-of-the-art
defense mechanisms deployed on these OSs, including UAC, the
Yama security module, the iOS sandbox, and the Android sandbox.
Further analysis of the identiﬁed vulnerabilities shows that their
root cause is that the design and implementation of accessibility
support involves inevitable trade-oﬀs among compatibility, usability,
security, and (economic) cost. These trade-oﬀs make it diﬃcult to
secure a system against misuse of accessibility support. Based on
our ﬁndings, we propose a number of recommendations to either
make the implementation of all necessary security checks easier
and more intuitive, or to alleviate the impact of missing/incorrect
checks. We also point out open problems and challenges in auto-
matically analyzing accessibility support and identifying security
vulnerabilities.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660295.
Keywords
Accessibility; Assistive Technology; Attacks
1 Introduction
On August 9, 1998, the United States Congress amended the Re-
habilitation Act of 1973 to eliminate barriers in electronic and in-
formation technology for people with disabilities [32]. Eﬀective
June 21, 2001, the law is enforced on the development, procure-
ment, maintenance, or use of electronic and information technology
by the federal government [21]. Driven by this requirement, OS
vendors [2, 15, 24] have included accessibility features such as
on-screen keyboards, screen magniﬁers, voice commands, screen
readers, etc. in their products to comply with federal law.
Assistive technologies, especially natural language voice proces-
sors, are gaining widespread market acceptance. Since the iPhone
4S, Apple has included in iOS a voice-based personal assistant, Siri,
which can help the user complete a variety of tasks, such as placing
a call, sending a text, and modifying personal calendars. Google
also added a similar feature, Voice Action, to its Android platform.
Furthermore, wearable devices such as Google Glass use voice as
the main interaction interface.
In general, adding new features into modern complex OSs usually
introduces new security vulnerabilities. Accessibility support is no
exception. For example, in 2007, it was reported that Windows Vista
could be compromised through its speech recognition software [28];
in 2013, a ﬂaw was discovered in Siri that allowed the bypass
of an iPhone’s lock screen to access photos and email [11]. As
accessibility features are being used by more and more people,
security issues caused by such vulnerabilities can become more
serious.
In this paper, we present the ﬁrst security evaluation of the accessi-
bility support of commodity OSs. Our hypothesis is that alternative
I/O subsystems such as assistive technologies bring a common chal-
lenge to many widely deployed security mechanisms in modern
OSs. Modern OSs support restricted execution environments (e.g.,
sandboxes) and ask for the user’s approval before applying a security
sensitive change to the system (e.g., User Access Control (UAC) on
Windows [25] and remote view on iOS [4]). However, accessibil-
ity support usually oﬀers interfaces to programmatically generate
user inputs, such as keystrokes and mouse clicks, which essentially
enables the interface to act as a human being. Consequently, it
might be possible to bypass these defense mechanisms and abuse a
user’s permissions by generating synthesized user inputs. Similarly,
attackers may also be able to steal security sensitive information
displayed on screen through the accessibility interfaces.
To verify our hypothesis, we examined the security of accessibility
on four commodity OSs: Microsoft Windows 8.1, Ubuntu 13.10,
103iOS 6, and Android 4.4. We were able to identify twelve1 attacks2
that can bypass many state-of-the-art defense mechanisms deployed
on these OSs, including UAC, the Yama security module, the iOS
App sandbox, and the Android sandbox.
When designing new interfaces that provide access to comput-
ing systems, one must ensure that these new features do not break
existing security mechanisms. However, current designs and imple-
mentations of accessibility support have failed to meet this require-
ment. Our analysis shows that current architectures for providing
accessibility features make it extremely diﬃcult to balance compat-
ibility, usability, security, and (economic) cost. In particular, we
found that security has received less consideration compared to the
other factors. Under current architectures, there is not a single OS
component that has all the information necessary to enforce mean-
ingful security policy; instead, the security of accessibility features
depends on security checks implemented in the assistive technology,
the OS, and the applications. Unfortunately, in our evaluation, we
found that security checks are either entirely missed or implemented
incorrectly (or incompletely) at all levels. Based on our ﬁndings, we
believe a fundamental solution to the problem will involve a new
architecture that is designed with security in mind. Proposing this
new architecture is beyond the scope of our work. Instead, we pro-
pose several recommendations that work under current architectures
to either make the implementation of all necessary security checks
easier and more intuitive, or to alleviate the impact of missing/incor-
rect checks. We also point out some open problems and challenges
in automatically analyzing a11y support and identifying security
vulnerabilities.
In summary, this paper makes the following contributions:
• We performed a security evaluation of accessibility support
for four major OSs: Windows, Ubuntu Linux, iOS, and An-
droid;
• We found several new vulnerabilities that can be exploited to
bypass many state-of-the-art defense mechanisms deployed
on these systems, including UAC and application sandboxes;
• We analyzed the root cause of these vulnerabilities and pro-
posed a number of recommendations to improve the security
of a11y support;
• We showed that the current architectures for providing acces-
sibility features are inherently ﬂawed, because no single OS
component is able to implement a security policy: security
checks at the assistive technology, the OS, and the application
must be implemented correctly; failure in any of these checks
introduces vulnerabilities.
The rest of this paper is organized as follows. Section §2 gives a
brief background of accessibility support. Section §3 discusses secu-
rity implications of accessibility. Section §4 presents the evaluation
results, i.e., new vulnerabilities and attacks. Section §5 discusses
the limitations of our attacks, the root cause of the vulnerabilities,
and complexity of the problem. Section §6 compares this work with
related works. Section §7 concludes the paper.
2 Overview of Accessibility
In this section, we give a brief overview of accessibility in operating
systems, and present deﬁnitions of terminologies used in this paper.
1We discovered eleven new attacks, and we cover an attack for Siri
that was released in public as exploitation of accessibility in OS.
2Disclosure: we reported all vulnerabilities that we found to the
OS vendors.
Figure 1: General architecture for implementing accessibility features.
Supporting an accessibility feature creates new paths for I/O on the
system (two dotted lines), while original I/O from/to hardware devices
(e.g., keyboard/mouse and screen) is indicated on the right side.
2.1 Accessibility Features
In compliance with the amended Rehabilitation Act, software ven-
dors have incorporated various accessibility features into their sys-
tems. In this paper, we deﬁne computer accessibility (a11y) features
as new I/O subsystems that provide alternative ways for users with
disabilities to interact with the system. For example, for visually
impaired users, text-to-speech based Narrator (on MS Windows),
VoiceOver (on OS X), and TalkBack (on Android) provide an output
subsystem that communicates with the user through speech. For
hearing impaired users, accessibility features like captioning ser-
vices turn the system’s audio output into visual output. Similarly,
some systems can alert the user about the presence of audio output
by ﬂashing the screen. For users with motor disabilities, traditional
mouse/keyboard based input systems are replaced by systems based
on voice input. In general, we can see these accessibility features as
implemented within an OS architecture in Figure 1.
There are also accessibility features that use traditional I/O de-
vices (e.g., the screen, mouse and keyboard), but make them easier
for users with disabilities to interact with the system. Examples of
such features include: 1) Magniﬁer in Windows, which enlarges
certain portions of the screen; 2) High Contrast in Windows, which
provides higher contrast for easy distinction of user interfaces; and
3) on-screen keyboard, sticky keys, ﬁlter keys, assisted pointing,
and mouse double-click speed adjust to allow input requiring less
movement.
2.2 Accessibility Libraries
In addition to pre-installed accessibility features, most OS vendors
provide libraries for third parties to implement their own accessi-
bility features. This makes it possible to create new alternative I/O
subsystems based on other I/O devices (e.g. a braille terminal). In
this case, the assistive technology part in Figure 1 is a program
developed by third party. Examples of these libraries include 1)
UI Automation in Microsoft Windows, 2) the accessibility toolkit
(ATK) and Assistive Technology Service Provider Interface (AT-
SPI) in Ubuntu Linux, 3) AccessibilityService and related classes in
Android, and 4) the (public) NSAccessibility and (private) UIAu-
tomation frameworks in iOS.
Process	
  Output	
  Assistive Technology OS App Process	
  Input	
  App	
  Ouptut	
  Input	
  Handler	
  A11y	
  Library	
  Alt. input through a11y Alt. output through a11y Regular Input Devices Screen Output Original I/O path A11y Input (Voice) A11y Output (Speaker) 104Figure 2: Traditional mechanism to seek user consent before perform-
ing privileged operations.
For all the discussions that follow, we will refer to these libraries
as accessibility libraries. In general, the accessibility libraries pro-
vide the following capabilities as APIs:
1. Notiﬁcations on changes to the system’s display (e.g. new win-
dow popped up, content of a window changed/scrolled, change
of focus, etc.);
2. Ways to probe what is displayed on various UI elements (e.g.
name of a button, content of a textbox, or static text displayed);
3. Ways to synthesize inputs to various UI elements (e.g. click a
button to place text into a textbox).
2.3 Assistive Technologies
For the rest of this paper, we will use the term assistive technology
(AT) to refer to the logic that runs in user space to provide any of
the following functionality:
• (F1) processing user input from alternative input devices, “under-
standing” what the user wants and turning it into commands to
the OS for control of other applications (or the OS itself);
• (F2) receiving information about the system’s output and present-
ing it to users using alternative output devices.
Usually an assistive technology makes use of an accessibility
library to obtain required capabilities for implementing a new acces-
sibility feature.
3 Security Implications of A11y
In this section, we discuss new attack paths due to accessibility
features in computing systems and correspondingly the required
security checks for securing accessibility support. For the rest of
this paper, we adopt the threat model where the attacker controls one
user space process with access to the accessibility library, and we
do not assume any other special privilege for this malicious process.
3.1 New Attack Paths
The ﬁrst functionality (F1) of AT allows users to control the system
through alternative input devices, which is inherently dangerous
from a security perspective. While modern OSs provide increas-
ingly restricted isolation between applications, accessibility support
provides a way to bypass this isolation and control other applications
on the system.
To prevent malware from abusing security sensitive privileges
of the user, OSs also deploy defense mechanisms such as User
Figure 3: Required security checks for an AT as a new input subsystem.
User input is passed to the AT ﬁrst, moved to OS through accessibility
libraries, then synthetic input is delivered to the application. Grayed
boxes indicate security checks required by each entity that receives the
input.
Account Control (UAC) [25] in Windows, remote view [4] in iOS,
and ACG [30], with the policy of “ask for user consent explicitly
before performing dangerous operations” (see Figure 2). However,
since user consent is usually represented by a certain input event
(e.g., click on a button), the capability to programmatically generate
input events also breaks the underlying assumption of these security
mechanisms that input is always the result of user action.
The ability of AT to monitor and probe the information currently
being displayed on screen (F2) is also problematic because it pro-
vides a way to access certain security sensitive information, e.g.,
plaintext passwords usually not displayed on screen (e.g., most OSs
show only scrambled symbols in the password box).
Based on the above observations, we argue that accessibility
interfaces provide malware authors with these new paths of attacks:
• (A1) Malware implemented as AT penetrates the OS security
boundary by obtaining new capabilities of controlling applica-
tions;
• (A2) Malware exploits the capability of generating interaction
requests to bypass defense mechanisms or escalate its privilege;
• (A3) Malware exploits the capability of monitoring and probing
the UI output to access otherwise unavailable information.
3.2 Required Security Checks
To evaluate how a platform could be secure against these new attack
paths, we propose two reference models of required checks: one
for handling alternative input (Figure 3) and the other for handling
output (Figure 4).
The key to securely handling alternative input is to validate
whether the input is truly from the user. To achieve this goal, we
argue that three checks (gray boxes in Figure 3) along the input path
are necessary: within the AT, in the OS, and at the application level.
First, an AT should validate whether the input is from the user.
Otherwise, attacks can be launched by synthesizing the input format
of this AT. For example, malware can transform malicious operations
into synthetic voice (e.g., via text-to-speech, TTS) and drive the
natural language user interface to control other applications (A1) or
escalate its privilege (A2).
Second, since not all ATs can be trusted (e.g., those provided by
a third-party), the OS should have control over what applications an
Request	
  from	
  an	