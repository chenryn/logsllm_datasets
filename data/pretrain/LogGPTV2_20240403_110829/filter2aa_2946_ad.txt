### 滴水逆向课程笔记 - Win32 事件

#### 52. 线程同步与事件
在以下代码示例中，我们运行了两个线程，并使用事件来控制它们的执行顺序。如果之前我们使用的是互斥体，那么线程A会先执行，而线程B则需要等待线程A释放互斥体后才能执行。这里我们在每个线程函数的末尾使用了 `getchar()` 来阻止线程立即结束，但两个线程仍然都执行了。

```c
#include <windows.h>
#include <stdio.h>

HANDLE e_event;

DWORD WINAPI ThreadProc(LPVOID lpParameter) {
    WaitForSingleObject(e_event, INFINITE);
    printf("ThreadProc - running ...\n");
    getchar();
    return 0;
}

DWORD WINAPI ThreadProcB(LPVOID lpParameter) {
    WaitForSingleObject(e_event, INFINITE);
    printf("ThreadProcB - running ...\n");
    getchar();
    return 0;
}

int main(int argc, char* argv[]) {
    // 创建事件
    e_event = CreateEvent(NULL, TRUE, FALSE, NULL);

    // 创建两个线程
    HANDLE hThread[2];
    hThread[0] = CreateThread(NULL, NULL, ThreadProc, NULL, 0, NULL);
    hThread[1] = CreateThread(NULL, NULL, ThreadProcB, NULL, 0, NULL);

    // 设置事件为已通知状态
    SetEvent(e_event);

    // 等待线程执行结束
    WaitForMultipleObjects(2, hThread, TRUE, INFINITE);

    // 关闭句柄
    CloseHandle(hThread[0]);
    CloseHandle(hThread[1]);
    CloseHandle(e_event);

    return 0;
}
```

#### 53. 互斥与通知类型的区别
如果我们修改创建事件函数的参数为互斥类型，可以明显看到互斥和通知类型的区别。互斥类型确保每次只有一个线程能够访问资源，而通知类型允许所有等待的线程同时被唤醒。

#### 54. 通知类型的原理
`WaitForSingleObject` 函数用于等待内核对象变为有信号状态。当事件对象为通知类型时，该函数不会修改对象的状态。这意味着多个线程可以同时通过 `WaitForSingleObject` 进入执行状态，从而实现并行处理。

#### 13.2 线程同步
- **线程互斥**：对于共享资源，在任何时刻最多只允许一个线程访问，其他线程必须等待。
- **线程同步**：线程之间存在一种制约关系，一个线程的执行依赖于另一个线程的消息。同步的前提是互斥，并且要求有序。

#### 13.2.1 生产者与消费者模型
生产者与消费者模型通过一个容器来解决生产者和消费者的强耦合问题。生产者将数据放入容器，消费者从容器中取出数据进行处理。这样，生产者和消费者不需要直接通信，而是通过阻塞队列（缓冲区）来进行协调。

##### 互斥体下的生产者与消费者
```c
#include <windows.h>
#include <stdio.h>

int container = 0;
int count = 10;
HANDLE hMutex;

DWORD WINAPI ThreadProc(LPVOID lpParameter) {
    for (int i = 0; i < count; i++) {
        WaitForSingleObject(hMutex, INFINITE);
        container++;
        printf("Producer: %d\n", container);
        ReleaseMutex(hMutex);
    }
    return 0;
}

DWORD WINAPI ThreadProcB(LPVOID lpParameter) {
    for (int i = 0; i < count; i++) {
        WaitForSingleObject(hMutex, INFINITE);
        printf("Consumer: %d\n", container);
        container--;
        ReleaseMutex(hMutex);
    }
    return 0;
}

int main(int argc, char* argv[]) {
    hMutex = CreateMutex(NULL, FALSE, NULL);

    HANDLE hThread[2];
    hThread[0] = CreateThread(NULL, NULL, ThreadProc, NULL, 0, NULL);
    hThread[1] = CreateThread(NULL, NULL, ThreadProcB, NULL, 0, NULL);

    WaitForMultipleObjects(2, hThread, TRUE, INFINITE);

    CloseHandle(hThread[0]);
    CloseHandle(hThread[1]);
    CloseHandle(hMutex);

    return 0;
}
```

##### 事件下的生产者与消费者
```c
#include <windows.h>
#include <stdio.h>

int container = 0;
int count = 10;
HANDLE eventA;
HANDLE eventB;

DWORD WINAPI ThreadProc(LPVOID lpParameter) {
    for (int i = 0; i < count; i++) {
        WaitForSingleObject(eventA, INFINITE);
        container = 1;
        printf("Producer: %d\n", container);
        SetEvent(eventB);
    }
    return 0;
}

DWORD WINAPI ThreadProcB(LPVOID lpParameter) {
    for (int i = 0; i < count; i++) {
        WaitForSingleObject(eventB, INFINITE);
        printf("Consumer: %d\n", container);
        container = 0;
        SetEvent(eventA);
    }
    return 0;
}

int main(int argc, char* argv[]) {
    eventA = CreateEvent(NULL, FALSE, TRUE, NULL);
    eventB = CreateEvent(NULL, FALSE, FALSE, NULL);

    HANDLE hThread[2];
    hThread[0] = CreateThread(NULL, NULL, ThreadProc, NULL, 0, NULL);
    hThread[1] = CreateThread(NULL, NULL, ThreadProcB, NULL, 0, NULL);

    WaitForMultipleObjects(2, hThread, TRUE, INFINITE);

    CloseHandle(hThread[0]);
    CloseHandle(hThread[1]);
    CloseHandle(eventA);
    CloseHandle(eventB);

    return 0;
}
```

#### 61. 窗口的本质
- **进程与线程**：之前的函数接口来源于 `kernel32.dll` 和 `ntoskrnl.exe`。
- **图形化界面**：新的接口来源于 `user32.dll` 和 `gdi32.dll`，最终由 `win32k.sys` 提供支持。
- **GUI编程**：使用 `user32.dll` 来操作 Windows 已经画好的界面。
- **GDI编程**：使用 `gdi32.dll` 来绘制自定义界面，如绘制花朵等。

#### 14.1 GDI - 图形设备接口
- **GDI**：Graphics Device Interface 的缩写，用于绘图。
- **设备对象**：指明绘图的位置。

通过这些内容，我们可以更好地理解 Win32 编程中的线程同步机制以及窗口的本质。