> Issue originally made by @vadzim
### Bug information
  * **Babel version:** 6.3.17 (babel-core 6.3.17)
  * **Node version:** v5.1.1
  * **npm version:** 3.3.12
### Options
    --no-babelrc --presets es2015
### Input code
    var x = { method() {
       var f = () => console.log( this.method, null && method )
       f()
    } }
    x.method()
### Description
Babel generated code fails:
    > echo "var x = { method() {
       var f = () => console.log( this.method, null && method )
       f()
    } }
    x.method()" | ./node_modules/.bin/babel --no-babelrc --presets es2015 | node
    [stdin]:17
                return console.log(_this.method, null && method);
                                        ^
    TypeError: Cannot read property 'method' of undefined
        at f ([stdin]:17:37)
        at Object. ([stdin]:19:9)
        at Object.method ([stdin]:7:28)
        at [stdin]:22:3
        at Object.exports.runInThisContext (vm.js:54:17)
        at Object. ([stdin]-wrapper:6:22)
        at Module._compile (module.js:425:26)
        at node.js:589:27
        at doNTCallback0 (node.js:430:9)
        at process._tickCallback (node.js:359:13)
    >
while code without compilation works in node pretty well:
    > echo "var x = { method() {
       var f = () => console.log( this.method, null && method )
       f()
    } }
    x.method()" | node
    [Function: method] null
    >
The problem is that babel loses this pointer. Generated code is:
    "use strict";
    var _this = undefined;
    var x = {
        method: (function (_method) {
            function method() {
                return _method.apply(this, arguments);
            }
            method.toString = function () {
                return _method.toString();
            };
            return method;
        })(function () {
            var f = function f() {
                return console.log(_this.method, null && method);
            };
            f();
        })
    };
    x.method();
The problem appers when method is accessed by its name in its body.