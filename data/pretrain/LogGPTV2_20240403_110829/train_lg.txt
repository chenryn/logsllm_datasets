        errexit("malloc\-seccomp_notif");
    /* when allocating the response buffer, we must allow for the fact
       that the user\-space binary may have been built with user\-space
       headers where \(aqstruct seccomp_notif_resp\(aq is bigger than the
       response buffer expected by the (older) kernel. therefore, we
       allocate a buffer that is the maximum of the two sizes. this
       ensures that if the supervisor places bytes into the response
       structure that are past the response size that the kernel expects,
       then the supervisor is not touching an invalid memory location. */
    size_t resp_size = sizes\->seccomp_notif_resp;
    if (sizeof(struct seccomp_notif_resp) > resp_size)
        resp_size = sizeof(struct seccomp_notif_resp);
    *resp = malloc(resp_size);
    if (resp == null)
        errexit("malloc\-seccomp_notif_resp");
}
/* handle notifications that arrive via the seccomp_ret_user_notif file
   descriptor, \(aqnotifyfd\(aq. */
static void
handlenotifications(int notifyfd)
{
    struct seccomp_notif_sizes sizes;
    struct seccomp_notif *req;
    struct seccomp_notif_resp *resp;
    char path[path_max];
    allocseccompnotifbuffers(&req, &resp, &sizes);
    /* loop handling notifications */
    for (;;) {
        /* wait for next notification, returning info in \(aq*req\(aq */
        memset(req, 0, sizes.seccomp_notif);
        if (ioctl(notifyfd, seccomp_ioctl_notif_recv, req) == \-1) {
            if (errno == eintr)
                continue;
            errexit("\ets: ioctl\-seccomp_ioctl_notif_recv");
        }
        printf("\ets: got notification (id %#llx) for pid %d\en",
                req\->id, req\->pid);
        /* the only system call that can generate a notification event
           is mkdir(2). nevertheless, we check that the notified system
           call is indeed mkdir() as kind of future\-proofing of this
           code in case the seccomp filter is later modified to
           generate notifications for other system calls. */
        if (req\->data.nr != __nr_mkdir) {
            printf("\ets: notification contained unexpected "
                    "system call number; bye!!!\en");
            exit(exit_failure);
        }
        bool pathok = gettargetpathname(req, notifyfd, 0, path,
                                        sizeof(path));
        /* prepopulate some fields of the response */
        resp\->id = req\->id;     /* response includes notification id */
        resp\->flags = 0;
        resp\->val = 0;
        /* if gettargetpathname() failed, trigger an einval error
           response (sending this response may yield an error if the
           failure occurred because the notification id was no longer
           valid); if the directory is in /tmp, then create it on behalf
           of the supervisor; if the pathname starts with \(aq.\(aq, tell the
           kernel to let the target process execute the mkdir();
           otherwise, give an error for a directory pathname in any other
           location. */
        if (!pathok) {
            resp->error = -einval;
            printf("\ets: spoofing error for invalid pathname (%s)\en",
                    strerror(-resp->error));
        } else if (strncmp(path, "/tmp/", strlen("/tmp/")) == 0) {
            printf("\ets: executing: mkdir(\e"%s\e", %#llo)\en",
                    path, req\->data.args[1]);
            if (mkdir(path, req\->data.args[1]) == 0) {
                resp\->error = 0;            /* "success" */
                resp\->val = strlen(path);   /* used as return value of
                                               mkdir() in target */
                printf("\ets: success! spoofed return = %lld\en",
                        resp\->val);
            } else {
                /* if mkdir() failed in the supervisor, pass the error
                   back to the target */
                resp\->error = \-errno;
                printf("\ets: failure! (errno = %d; %s)\en", errno,
                        strerror(errno));
            }
        } else if (strncmp(path, "./", strlen("./")) == 0) {
            resp\->error = resp\->val = 0;
            resp\->flags = seccomp_user_notif_flag_continue;
            printf("\ets: target can execute system call\en");
        } else {
            resp\->error = \-eopnotsupp;
            printf("\ets: spoofing error response (%s)\en",
                    strerror(\-resp\->error));
        }
        /* send a response to the notification */
        printf("\ets: sending response "
                "(flags = %#x; val = %lld; error = %d)\en",
                resp\->flags, resp\->val, resp\->error);
        if (ioctl(notifyfd, seccomp_ioctl_notif_send, resp) == \-1) {
            if (errno == enoent)
                printf("\ets: response failed with enoent; "
                        "perhaps target process\(aqs syscall was "
                        "interrupted by a signal?\en");
            else
                perror("ioctl\-seccomp_ioctl_notif_send");
        }
        /* if the pathname is just "/bye", then the supervisor breaks out
           of the loop and terminates. this allows us to see what happens
           if the target process makes further calls to mkdir(2). */
        if (strcmp(path, "/bye") == 0)
            break;
    }
    free(req);
    free(resp);
    printf("\ets: terminating **********\en");
    exit(exit_failure);
}
/* implementation of the supervisor process:
   (1) obtains the notification file descriptor from \(aqsockpair[1]\(aq
   (2) handles notifications that arrive on that file descriptor. */
static void
supervisor(int sockpair[2])
{
    int notifyfd = recvfd(sockpair[1]);
    if (notifyfd == \-1)
        errexit("recvfd");
    closesocketpair(sockpair);  /* we no longer need the socket pair */
    handlenotifications(notifyfd);
}
int
main(int argc, char *argv[])
{
    int sockpair[2];
    setbuf(stdout, null);
    if (argc .
.\" %%%license_end
.\"
.th getpwent_r 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
getpwent_r, fgetpwent_r \- get passwd file entry reentrantly
.sh synopsis
.nf
.b #include 
.pp
.bi "int getpwent_r(struct passwd *restrict " pwbuf ,
.bi "               char *restrict " buf ", size_t " buflen ,
.bi "               struct passwd **restrict " pwbufp );
.bi "int fgetpwent_r(file *restrict " stream \
", struct passwd *restrict " pwbuf ,
.bi "               char *restrict " buf ", size_t " buflen ,
.bi "               struct passwd **restrict " pwbufp );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getpwent_r (),
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source || _svid_source
.fi
.pp
.br fgetpwent_r ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _svid_source
.fi
.sh description
the functions
.br getpwent_r ()
and
.br fgetpwent_r ()
are the reentrant versions of
.br getpwent (3)
and
.br fgetpwent (3).
the former reads the next passwd entry from the stream initialized by
.br setpwent (3).
the latter reads the next passwd entry from
.ir stream .
.pp
the \fipasswd\fp structure is defined in
.i 
as follows:
.pp
.in +4n
.ex
struct passwd {
    char    *pw_name;      /* username */
    char    *pw_passwd;    /* user password */
    uid_t    pw_uid;       /* user id */
    gid_t    pw_gid;       /* group id */
    char    *pw_gecos;     /* user information */
    char    *pw_dir;       /* home directory */
    char    *pw_shell;     /* shell program */
};
.ee
.in
.pp
for more information about the fields of this structure, see
.br passwd (5).
.pp
the nonreentrant functions return a pointer to static storage,
where this static storage contains further pointers to user
name, password, gecos field, home directory and shell.
the reentrant functions described here return all of that in
caller-provided buffers.
first of all there is the buffer
.i pwbuf
that can hold a \fistruct passwd\fp.
and next the buffer
.i buf
of size
.i buflen
that can hold additional strings.
the result of these functions, the \fistruct passwd\fp read from the stream,
is stored in the provided buffer
.ir *pwbuf ,
and a pointer to this \fistruct passwd\fp is returned in
.ir *pwbufp .
.sh return value
on success, these functions return 0 and
.i *pwbufp
is a pointer to the \fistruct passwd\fp.
on error, these functions return an error value and
.i *pwbufp
is null.
.sh errors
.tp
.b enoent
no more entries.
.tp
.b erange
insufficient buffer space supplied.
try again with larger buffer.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br getpwent_r ()
t}	thread safety	t{
mt-unsafe race:pwent locale
t}
t{
.br fgetpwent_r ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
in the above table,
.i pwent
in
.i race:pwent
signifies that if any of the functions
.br setpwent (),
.br getpwent (),
.br endpwent (),
or
.br getpwent_r ()
are used in parallel in different threads of a program,
then data races could occur.
.sh conforming to
these functions are gnu extensions, done in a style resembling
the posix version of functions like
.br getpwnam_r (3).
other systems use the prototype
.pp
.in +4n
.ex
struct passwd *
getpwent_r(struct passwd *pwd, char *buf, int buflen);
.ee
.in
.pp
or, better,
.pp
.in +4n
.ex
int
getpwent_r(struct passwd *pwd, char *buf, int buflen,
           file **pw_fp);
.ee
.in
.sh notes
the function
.br getpwent_r ()
is not really reentrant since it shares the reading position
in the stream with all other threads.
.sh examples
.ex
#define _gnu_source
#include 
#include 
#include 
#define buflen 4096
int
main(void)
{
    struct passwd pw;
    struct passwd *pwp;
    char buf[buflen];
    int i;
    setpwent();
    while (1) {
        i = getpwent_r(&pw, buf, sizeof(buf), &pwp);
        if (i)
            break;
        printf("%s (%jd)\ethome %s\etshell %s\en", pwp\->pw_name,
               (intmax_t) pwp\->pw_uid, pwp\->pw_dir, pwp\->pw_shell);
    }
    endpwent();
    exit(exit_success);
}
.ee
.\" perhaps add error checking - should use strerror_r
.\" #include 
.\" #include 
.\"         if (i) {
.\"               if (i == enoent)
.\"                     break;
.\"               printf("getpwent_r: %s", strerror(i));
.\"               exit(exit_success);
.\"         }
.sh see also
.br fgetpwent (3),
.br getpw (3),
.br getpwent (3),
.br getpwnam (3),
.br getpwuid (3),
.br putpwent (3),
.br passwd (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/resolver.3
.\" copyright (c) 2017 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th sysfs 5 2021-03-22 "linux" "linux programmer's manual"
.sh name
sysfs \- a filesystem for exporting kernel objects
.sh description
the
.b sysfs
filesystem is a pseudo-filesystem which provides an interface to
kernel data structures.
(more precisely, the files and directories in
.b sysfs
provide a view of the
.ir kobject
structures defined internally within the kernel.)
the files under
.b sysfs
provide information about devices, kernel modules, filesystems,
and other kernel components.
.pp
the
.b sysfs
filesystem is commonly mounted at
.ir /sys .
typically, it is mounted automatically by the system,
but it can also be mounted manually using a command such as:
.pp
.in +4n
.ex
mount \-t sysfs sysfs /sys
.ee
.in
.pp
many of the files in the
.b sysfs
filesystem are read-only,
but some files are writable, allowing kernel variables to be changed.
to avoid redundancy,
symbolic links are heavily used to connect entries across the filesystem tree.
.\"
.ss files and directories
the following list describes some of the files and directories under the
.i /sys
hierarchy.
.tp
.ir /sys/block
this subdirectory contains one symbolic link for each block device
that has been discovered on the system.
the symbolic links point to corresponding directories under
.ir /sys/devices .
.tp
.ir /sys/bus
this directory contains one subdirectory for each of the bus types
in the kernel.
inside each of these directories are two subdirectories:
.rs
.tp
.ir devices
this subdirectory contains symbolic links to entries in
.ir /sys/devices
that correspond to the devices discovered on this bus.
.tp
.ir drivers
this subdirectory contains one subdirectory for each device driver
that is loaded on this bus.
.re
.tp
.ir /sys/class
this subdirectory contains a single layer of further subdirectories
for each of the device classes that have been registered on the system