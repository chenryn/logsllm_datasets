title:A chipset level network backdoor: bypassing host-based firewall &amp;
IDS
author:Sherri Sparks and
Shawn Embleton and
Cliff Changchun Zou
A Chipset Level Network Backdoor: 
Bypassing Host-Based Firewall & IDS 
Sherri Sparks, Shawn Embleton, Cliff C. Zou 
School of Electrical Engineering and Computer Science 
University of Central Florida  
4000 Central Florida Blvd., Orlando, FL USA 32816-2362 
+1-407-823-5015 
{sparks, embleton}@clearhatconsulting.com, PI:EMAIL 
ABSTRACT 
Chipsets  refer  to  a  set  of  specialized  chips  on  a  computer's 
motherboard or an expansion card [12]. In this paper we present a 
proof of concept chipset level rootkit/network backdoor. It interacts 
directly  with  network  interface  card  hardware  based  on  a  widely 
deployed Intel chipset 8255x, and we tested it successfully on two 
different  Ethernet  cards  with  this  chipset.  The  network  backdoor 
has the ability to both covertly send out packets and receive packets, 
without  the  need  to  disable  security  software  installed  in  the 
compromised  host  in  order  to  hide  its  presence.  Because  of  its 
low-level position in a computer system, the backdoor is capable of 
bypassing virtually all commodity firewall and host-based intrusion 
detection 
including  popular,  widely  deployed 
applications  like  Snort  and  Zone  Alarm  Security  Suite.  Such 
network backdoors, while complicated and hardware specific, are 
likely  to  become  serious  threats  in  high  profile  attacks  like 
corporate espionage or cyber terrorist attacks. 
software, 
Categories and Subject Descriptors 
D.4.6 [Operating Systems]: Security and Protection – invasive 
software, security kernels 
General Terms 
Security 
Keywords 
Rootkit, network backdoor, hardware security 
1.  INTRODUCTION 
Host-based  firewalls  and  intrusion  detection  systems  have  made 
significant advances in both technology and scope of deployment 
within the past few years.  Despite these advances, two challenges 
remain:  they  focus  mostly  on  defending  against  outside  attacks 
instead  of  inside  information  exfiltration,  and  they  are  mostly 
relying  on  the  underlying  Operating  System’s  support  for  data 
gathering  and  monitoring.  In  this  paper,  we  present  a  network 
rootkit / backdoor that exploits these two problems. This network 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ASIACCS’09, March 10-12, 2009, Sydney, NSW, Australia. 
Copyright 2009 ACM 978-1-60558-394-5/09/03…$5.00. 
backdoor  is  capable  of  bypassing  virtually  all  commodity, 
host-based  firewall  and  intrusion  detetection  software  on  the 
market  today,  including  popular,  widely  deployed  products  like 
Snort and Zone alarm. 
Traditionally, firewalls, network based intrusion detection systems 
(IDS) and intrusion prevention systems (IPS have been focused on 
outsider threats.  These types of systems monitor incoming network 
traffic or system behavior for malicious code or attacks.  When an 
attack is detected, the system reacts in real-time to block or prevent 
it  (e.g.  by  dropping  the  malicious  packets  while  allowing  other 
network traffic to pass).  Unfortunately, many of these systems only 
filter inbound traffic, still leaving the protected machine vulnerable 
to  a  large  class  of  insider  threats  resulting  from  the  free  flow  of 
unauthorized,  outbound  traffic.    The  firewall  provided  with  the 
Windows  XP  operating  system  is  one  such  example  [11].  The 
implications  include  leaving  the  machine  vulnerable  to  the 
exfiltration of sensitive information as well as delaying detection of 
malware  threats  resulting  from  unmonitored  outgoing  traffic. 
Extrusion  detection  is  to  deal  with  this  security  issue,  which 
focuses “primarily on the analysis of system activity and outbound 
traffic in order to detect malicious users, malware or network traffic 
that may pose a threat to the security of neighboring systems [27].” 
The  potential  for  sensitive  data  exfiltration  is  perhaps  the  most 
significant  threat  arising  from  unrestricted  outbound  traffic  flow. 
The  exfiltration  of  sensitive 
information  can  occur  either 
inadvertently  or  deliberately  and  affects  both  corporate 
organizations and individuals.  For example, spyware and adware 
infestations  are  extremely  prevalent  on  home  PC’s  with  the 
AOL/NCSA  study  showing  that  80%  of  home  computers  are 
infected  and  that  the  average  infected  user  has  93  spyware  or 
adware components on their computer [10]. Additional threats that 
remain inadequately addressed by existing IDS, IPS, and firewall 
technology’s  failure  to  filter  outbound  traffic  include  delayed 
detection of DDOS attacks, Botnets, and Internet Worms.    
The  second  problem  concerns  the  reliance  of  host-based  firewall 
and  intrusion  detection  tools  on  the  trustworthiness  of  the 
underlying  Operating  System.  Unfortunately,  malware  authors 
have developed an arsenal of techniques to exploit this reliance and 
cheat the data returned to applications and drivers that rely on the 
OS API.  These techniques range from preventing security software 
from loading to complex hooks in Operating System network stack 
[15].  This  problem  should  not  be  understated.  To  illustrate  this 
potential threat, we present a network backdoor in this paper that 
operates  at  the  physical  network  card  interface  and  successfully 
125 
bypasses virtually all commodity host-based firewall and IDS / IPS 
software on the market today.   
The proposed network backdoor is essentially a rootkit (a malicious 
program that tries to  hide  its  existence  on  an  infected  computer), 
thus it  relies  on  vulnerability  exploits,  such  as  through  worms  or 
email viruses, or other attack mechanisms to install it on a computer. 
How  to  compromise  a  remote  computer  is  not  the  focus  of  the 
proposed network backdoor.  
Many  people  may  think  that  attackers  can  simply  deactivate  any 
defense  systems  running  on  a  computer  once  the  computer  is 
compromised, and hence, it is not necessary for attackers to deploy 
any advanced hiding techniques. This is true for computers where 
their users or security managers are careless. For other computers, 
however,  deactivating  security  defense  systems  can  be  easily 
noticed by security-minded users via some simple system checks. 
Hiding malicious codes and their activities on an infected computer 
with as small as possible system change is still essential to serious 
attackers,  especially  in  botnet  attacks  or  long-term  business 
espionage. 
The contributions of this paper are as follows:  First, we provide a 
design and implementation of a network rootkit / backdoor that is 
capable  of  bypassing  virtually  all  currently  available  commodity, 
host-based  firewalls  and  intrusion  detection  systems. 
  Our 
backdoor  possesses  the  ability  to  both  covertly  send  and  receive 
network  packets  over  a  compromised  host’s  network  interface. 
Secondarily,  we  test  our  attack  against  several  well-known 
firewalls and intrusion detection systems. Finally, we seek to raise 
awareness of the data exfiltration problem as it relates to both data 
loss  prevention  and  malware  propogation  and  consider  potential 
defenses against such attacks. 
This  paper  is  organized  as  follows.    In  section  2,  we  give  an 
overview  of  related  work  in  the  area  of  extrusion  detection  and 
prevention  as  well  as  discuss  previous  methods  used  by  malware 
authors to bypass  IDS  and  IPS  systems.    Section  3  describes  our 
implementation of a network backdoor capable of bypassing a large 
class  of  firewalls  and  intrusion  detection  tools.    Results  from  the 
testing of our implementation against several well known systems 
are provided in section 4.  Section 5 discusses possible defensive 
measures. We conclude in section 6. 
2.  BACKGROUND & RELATED WORK 
Several  extrusion  detection  tools  have  been  developed  and 
discussed in the literature.   
Cui  et  al.  described  an  extrusion-based  break  in  detector  for 
personal  computers  called  BINDER  [16].  They  note  that  many 
malware applications send malicious outgoing network traffic from 
compromised  computers  and  make  the  observation  that  most 
legitimate network activities are directly or indirectly triggered by 
user input.  BINDER detects compromises by correlating network 
activity with user input on the premise that malicious code typically 
runs  in  the  background  and  generates  connections  without  user 
input.   
Another  outbound  intrusion,  or  extrusion,  detection  tool  called 
FROID was developed and presented by Salvador Mandujano [17].  
FROID attempts to protect a set of nodes in a network by having 
each  member  monitor  its  own  outbound  traffic  for  evidence  of 
compromise.  It  was  built  using  the  JADE  agent  framework  and 
takes  an  ontology-based  approach  to  the  detection  of  malicious 
code [18].  The prototype features a misuse based detection based 
on signatures derived from network traffic and process execution.    
Web Tap is an anomaly based intrusion detection tool specifically 
focused on detecting malicious, covert outbound HTTP traffic, like 
spyware,  in  an  otherwise  firewalled  network  [19].    By  analyzing 
outbound  HTTP  traffic,  the  authors  developed  filters  capable  of 
detecting several covert web tunneling programs, a backdoor, and 
several spyware / adware applications.   
Zhang  and  Paxson  tackle  the  problem  of  generically  identifying 
backdoors, specifically those that provide interactive access on non 
standard ports [20]. They note that interactive traffic has different 
traits  than  application  generated  traffic.    In  order  to  search  for 
traffic containing these traits, they successfully propose and test a 
passive  network  monitoring  algorithm  based  upon  keystroke 
characteristics  including  directionality  of  the  connection,  packet 
sizes, and packet interarrival times.   
Although  these  tools  seek  to  address  the  outbound  malicious 
activities,  the  implementations  described  in  these  papers  remain 
vulnerable  to  the  second  problem.  This  is,  they  all  rely  on 
host-based  network  monitoring  for  the  correct  operation  of  their 
tool.  In order for these tools to monitor network traffic, they must 
rely  upon  the  network  API  support  provided  by  the  Operating 
system  to  intercept  that  network  traffic.    This  is  a  common 
weakness.    A  variety  of  malware  techniques  exist  to  subvert  this 
reliance.  These techniques exploit the fact that modern Operating 
Systems  like  Linux  and  Windows,  are  built  upon  a  layered 
architecture.    In  general,  by  inserting  themselves  lower  in  the 
architecture a malware  application  gains  more  stealth  and  power.  
For  example,  a  malicious  kernel  driver  is  more  powerful  and 
capable of evading detection than a malicious usermode application.  
A stealthier malware application does not rely upon the OS at all, 
but instead interacts directly with the hardware.   
Clearly,  the  ability  to  evade  a  host-based  firewall  or  IDS  is  a 
valuable asset for malware like worms or botnets who would like to 
delay detection for as long as possible.  A number of methods have 
been previously proposed and /or implemented.   
Perhaps the simplest approach for a malicious kernel module is to 
register a driver load notification callback.  When a new driver is 
loaded, the OS calls the malware defined callback function giving it 
a chance to scan it for signatures corresponding to known firewall 
drivers.    If  a  firewall  is  detected,  the  malware  simply  prevents  it 
from successfully loading.  The drawback to this method is clearly 
the  fact  that  the  malware  must  be  resident  and  active  in  memory 
prior to the firewall. 
More  advanced  attacks  attempt  to  hook  into  the  OS  network 
subsystem in order to make the OS return false information to the 
IDS or firewall.  NT Rootkit by Greg Hoglund is an example of this 
type of rootkit [23].  For example, the two primary components of 
the network subsystem of interest to malware authors on Windows 
Operating Systems are TDI (Transport Driver Interface) and NDIS 
(Network Driver Interface Specification) [21].  Figure 1 illustrates 
the  relationship  between  these  components.    Both  of  these 
components  are  also  used  by  security  software  to  implement 
firewalls and IDS.   
TDI  defines  an  upper  level  kernel  network  interface.    Under 
Windows  2000/XP/2003  based  systems,  tcpip.sys  is  the  primary 
126 
driver  that  exposes  the  Transport  Data  Interface.    It  creates  4 
devices including TCP, UDP, Raw IP, and ICMP. A firewall may 
intercept  the  TDI  interface  to  control  network  access  at  a  per 
process  granularity  and  to  simplify  detection  and  prevention  of 
attacks at the application layer.  For example, TDI may be used to 
decide if a given process is allowed to open a TCP / UDP port or 
send  and  receive  network  data.    The  interception  is  usually 
performed  with  a  special  driver,  called  a  filter  driver.    The  filter 
driver attaches itself above tcpip.sys in the Windows network stack. 
From this position, it is able to transparently and  invisibly  snoop 
communications  to  and  from  tcpip.sys  devices.    Unfortunately, 
such  a  filter  is  limited  by  the  fact  that  it  sits  at  top  of  the  kernel 
network  subsystem.    As  a  result,  it  is  only  able  to  control  the 
network communications for drivers that exist above it.  In practice, 
this limits the usefulness of TDI interception to malware using the 
kernel mode sockets interface. 
KERNEL MODE 
TDI Filter Driver 
Transport Driver interface (TDI)   
tcpip.sys 
NDIS Filter 
Rootkit 
“Deepdoor” 
“Peligroso” 
Network Driver Interface 
Specification (NDIS)   ndis.sys 