# Title: A Chipset-Level Network Backdoor: Bypassing Host-Based Firewall & IDS

## Authors:
- Sherri Sparks
- Shawn Embleton
- Cliff C. Zou

### Affiliation:
School of Electrical Engineering and Computer Science  
University of Central Florida  
4000 Central Florida Blvd., Orlando, FL USA 32816-2362  
+1-407-823-5015  
{sparks, embleton}@clearhatconsulting.com, PI:EMAIL

## Abstract
Chipsets refer to a set of specialized chips on a computer's motherboard or an expansion card [12]. In this paper, we present a proof-of-concept chipset-level rootkit/network backdoor that interacts directly with the network interface card hardware based on a widely deployed Intel 8255x chipset. We successfully tested this backdoor on two different Ethernet cards using this chipset. The network backdoor can covertly send and receive packets without disabling security software installed on the compromised host, thus hiding its presence. Due to its low-level position in the system, the backdoor can bypass virtually all commodity firewall and host-based intrusion detection systems, including popular applications like Snort and Zone Alarm Security Suite. Such network backdoors, while complex and hardware-specific, are likely to become serious threats in high-profile attacks such as corporate espionage or cyber terrorism.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection – invasive software, security kernels

## General Terms
Security

## Keywords
Rootkit, network backdoor, hardware security

## 1. Introduction
Host-based firewalls and intrusion detection systems (IDS) have made significant advances in both technology and deployment over the past few years. Despite these advances, two major challenges remain: they primarily focus on defending against external attacks rather than internal information exfiltration, and they rely heavily on the underlying operating system (OS) for data gathering and monitoring. In this paper, we present a network rootkit/backdoor that exploits these two issues. This backdoor can bypass virtually all commodity, host-based firewall and IDS/IPS software currently available, including popular products like Snort and Zone Alarm.

Traditionally, firewalls, network-based IDS, and intrusion prevention systems (IPS) have focused on detecting and blocking outsider threats by monitoring incoming network traffic and system behavior for malicious code or attacks. However, many of these systems only filter inbound traffic, leaving the protected machine vulnerable to insider threats from unauthorized outbound traffic. For example, the Windows XP firewall is one such system [11]. This vulnerability can lead to the exfiltration of sensitive information and delayed detection of malware resulting from unmonitored outgoing traffic.

Extrusion detection aims to address this issue by focusing on the analysis of system activity and outbound traffic to detect malicious users, malware, or network traffic that may pose a threat to neighboring systems [27]. The potential for sensitive data exfiltration is perhaps the most significant threat arising from unrestricted outbound traffic flow. This exfiltration can occur inadvertently or deliberately, affecting both corporate organizations and individuals. For instance, spyware and adware infestations are extremely prevalent on home PCs, with the AOL/NCSA study showing that 80% of home computers are infected, and the average infected user has 93 spyware or adware components [10]. Other inadequately addressed threats include delayed detection of DDoS attacks, botnets, and internet worms.

The second problem concerns the reliance of host-based firewall and IDS tools on the trustworthiness of the underlying OS. Malware authors have developed techniques to exploit this reliance and manipulate the data returned to applications and drivers that rely on the OS API. These techniques range from preventing security software from loading to complex hooks in the OS network stack [15]. To illustrate this potential threat, we present a network backdoor in this paper that operates at the physical network card interface and successfully bypasses virtually all commodity host-based firewall and IDS/IPS software on the market today.

The proposed network backdoor is essentially a rootkit, which relies on vulnerability exploits, such as through worms or email viruses, to install it on a computer. The focus of this backdoor is not on how to compromise a remote computer but on how to maintain stealth and functionality once the computer is compromised.

Many people may think that attackers can simply deactivate any defense systems running on a computer once it is compromised, making advanced hiding techniques unnecessary. While this is true for some computers where users or security managers are careless, deactivating security systems can be easily noticed by security-minded users via simple system checks. Hiding malicious codes and their activities with minimal system changes remains essential for serious attackers, especially in botnet attacks or long-term business espionage.

The contributions of this paper are as follows:
1. We provide a design and implementation of a network rootkit/backdoor capable of bypassing virtually all currently available commodity, host-based firewalls and intrusion detection systems. Our backdoor can covertly send and receive network packets over a compromised host’s network interface.
2. We test our attack against several well-known firewalls and intrusion detection systems.
3. We raise awareness of the data exfiltration problem as it relates to both data loss prevention and malware propagation and consider potential defenses against such attacks.

This paper is organized as follows: Section 2 provides an overview of related work in extrusion detection and prevention, as well as previous methods used by malware authors to bypass IDS and IPS systems. Section 3 describes our implementation of a network backdoor capable of bypassing a large class of firewalls and intrusion detection tools. Section 4 presents the results from testing our implementation against several well-known systems. Section 5 discusses possible defensive measures. We conclude in Section 6.

## 2. Background & Related Work
Several extrusion detection tools have been developed and discussed in the literature. Cui et al. described an extrusion-based break-in detector for personal computers called BINDER [16]. They noted that many malware applications send malicious outgoing network traffic from compromised computers and observed that most legitimate network activities are directly or indirectly triggered by user input. BINDER detects compromises by correlating network activity with user input, as malicious code typically runs in the background and generates connections without user input.

Another outbound intrusion, or extrusion, detection tool called FROID was developed and presented by Salvador Mandujano [17]. FROID attempts to protect a set of nodes in a network by having each member monitor its own outbound traffic for evidence of compromise. It was built using the JADE agent framework and takes an ontology-based approach to the detection of malicious code [18]. The prototype features a misuse-based detection based on signatures derived from network traffic and process execution.

Web Tap is an anomaly-based intrusion detection tool specifically focused on detecting malicious, covert outbound HTTP traffic, such as spyware, in an otherwise firewalled network [19]. By analyzing outbound HTTP traffic, the authors developed filters capable of detecting several covert web tunneling programs, a backdoor, and several spyware/adware applications.

Zhang and Paxson tackled the problem of generically identifying backdoors, specifically those that provide interactive access on non-standard ports [20]. They noted that interactive traffic has different traits than application-generated traffic. To search for traffic containing these traits, they proposed and tested a passive network monitoring algorithm based on keystroke characteristics, including directionality of the connection, packet sizes, and packet inter-arrival times.

Although these tools seek to address outbound malicious activities, the implementations described in these papers remain vulnerable to the second problem: they all rely on host-based network monitoring for the correct operation of their tool. To monitor network traffic, these tools must rely on the network API support provided by the operating system to intercept that traffic. This is a common weakness. A variety of malware techniques exist to subvert this reliance. These techniques exploit the fact that modern operating systems like Linux and Windows are built upon a layered architecture. Generally, by inserting themselves lower in the architecture, a malware application gains more stealth and power. For example, a malicious kernel driver is more powerful and capable of evading detection than a malicious user-mode application. A stealthier malware application does not rely on the OS at all but instead interacts directly with the hardware.

Clearly, the ability to evade a host-based firewall or IDS is a valuable asset for malware like worms or botnets, who would like to delay detection for as long as possible. Several methods have been previously proposed and/or implemented. Perhaps the simplest approach for a malicious kernel module is to register a driver load notification callback. When a new driver is loaded, the OS calls the malware-defined callback function, giving it a chance to scan it for signatures corresponding to known firewall drivers. If a firewall is detected, the malware simply prevents it from successfully loading. The drawback to this method is that the malware must be resident and active in memory before the firewall.

More advanced attacks attempt to hook into the OS network subsystem to make the OS return false information to the IDS or firewall. NT Rootkit by Greg Hoglund is an example of this type of rootkit [23]. The two primary components of the network subsystem of interest to malware authors on Windows operating systems are TDI (Transport Driver Interface) and NDIS (Network Driver Interface Specification) [21]. Figure 1 illustrates the relationship between these components. Both of these components are also used by security software to implement firewalls and IDS.

TDI defines an upper-level kernel network interface. Under Windows 2000/XP/2003-based systems, tcpip.sys is the primary driver that exposes the Transport Data Interface. It creates four devices: TCP, UDP, Raw IP, and ICMP. A firewall may intercept the TDI interface to control network access at a per-process granularity and to simplify the detection and prevention of attacks at the application layer. For example, TDI may be used to decide if a given process is allowed to open a TCP/UDP port or send and receive network data. The interception is usually performed with a special driver called a filter driver. The filter driver attaches itself above tcpip.sys in the Windows network stack, allowing it to transparently and invisibly snoop communications to and from tcpip.sys devices. Unfortunately, such a filter is limited by the fact that it sits at the top of the kernel network subsystem, meaning it can only control network communications for drivers that exist above it. In practice, this limits the usefulness of TDI interception to malware using the kernel mode sockets interface.

```
KERNEL MODE
+-------------------+
| TDI Filter Driver |
+-------------------+
| TDI               |
+-------------------+
| tcpip.sys         |
+-------------------+
| NDIS Filter       |
+-------------------+
| Rootkit           |
+-------------------+
| NDIS              |
+-------------------+
| ndis.sys          |
+-------------------+
```