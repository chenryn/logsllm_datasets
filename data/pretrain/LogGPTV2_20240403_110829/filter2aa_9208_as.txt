The following single statement:
.Sp
.Vb 1
\&        print uc(scalar(&foo,$bar)),$baz;
.Ve
.Sp
is the moral equivalent of these two:
.Sp
.Vb 2
\&        &foo;
\&        print(uc($bar),$baz);
.Ve
.Sp
See perlop for more details on unary operators and the comma operator.
.IP "seek \s-1FILEHANDLE\s0,POSITION,WHENCE" 8
.IX Item "seek FILEHANDLE,POSITION,WHENCE"
Sets \s-1FILEHANDLE\s0's position, just like the \f(CW\*(C`fseek\*(C'\fR call of \f(CW\*(C`stdio\*(C'\fR.
\&\s-1FILEHANDLE\s0 may be an expression whose value gives the name of the
filehandle.  The values for \s-1WHENCE\s0 are \f(CW0\fR to set the new position
\&\fIin bytes\fR to \s-1POSITION\s0, \f(CW1\fR to set it to the current position plus
\&\s-1POSITION\s0, and \f(CW2\fR to set it to \s-1EOF\s0 plus \s-1POSITION\s0 (typically
negative).  For \s-1WHENCE\s0 you may use the constants \f(CW\*(C`SEEK_SET\*(C'\fR,
\&\f(CW\*(C`SEEK_CUR\*(C'\fR, and \f(CW\*(C`SEEK_END\*(C'\fR (start of the file, current position, end
of the file) from the Fcntl module.  Returns \f(CW1\fR upon success, \f(CW0\fR
otherwise.
.Sp
Note the \fIin bytes\fR: even if the filehandle has been set to
operate on characters (for example by using the \f(CW\*(C`:utf8\*(C'\fR open
layer), \fItell()\fR will return byte offsets, not character offsets
(because implementing that would render \fIseek()\fR and \fItell()\fR rather slow).
.Sp
If you want to position file for \f(CW\*(C`sysread\*(C'\fR or \f(CW\*(C`syswrite\*(C'\fR, don't use
\&\f(CW\*(C`seek\*(C'\fR\-\-buffering makes its effect on the file's system position
unpredictable and non\-portable.  Use \f(CW\*(C`sysseek\*(C'\fR instead.
.Sp
Due to the rules and rigors of \s-1ANSI\s0 C, on some systems you have to do a
seek whenever you switch between reading and writing.  Amongst other
things, this may have the effect of calling stdio's \fIclearerr\fR\|(3).
A \s-1WHENCE\s0 of \f(CW1\fR (\f(CW\*(C`SEEK_CUR\*(C'\fR) is useful for not moving the file position:
.Sp
.Vb 1
\&    seek(TEST,0,1);
.Ve
.Sp
This is also useful for applications emulating \f(CW\*(C`tail \-f\*(C'\fR.  Once you hit
\&\s-1EOF\s0 on your read, and then sleep for a while, you might have to stick in a
\&\fIseek()\fR to reset things.  The \f(CW\*(C`seek\*(C'\fR doesn't change the current position,
but it \fIdoes\fR clear the end-of-file condition on the handle, so that the
next \f(CW\*(C`\*(C'\fR makes Perl try again to read something.  We hope.
.Sp
If that doesn't work (some \s-1IO\s0 implementations are particularly
cantankerous), then you may need something more like this:
.Sp
.Vb 8
\&    for (;;) {
\&        for ($curpos = tell(FILE); $_ = ;
\&             $curpos = tell(FILE)) {
\&            # search for some stuff and put it into files
\&        }
\&        sleep($for_a_while);
\&        seek(FILE, $curpos, 0);
\&    }
.Ve
.IP "seekdir \s-1DIRHANDLE\s0,POS" 8
.IX Item "seekdir DIRHANDLE,POS"
Sets the current position for the \f(CW\*(C`readdir\*(C'\fR routine on \s-1DIRHANDLE\s0.  \s-1POS\s0
must be a value returned by \f(CW\*(C`telldir\*(C'\fR.  Has the same caveats about
possible directory compaction as the corresponding system library
routine.
.IP "select \s-1FILEHANDLE\s0" 8
.IX Item "select FILEHANDLE"
.PD 0
.IP "select" 8
.IX Item "select"
.PD
Returns the currently selected filehandle.  Sets the current default
filehandle for output, if \s-1FILEHANDLE\s0 is supplied.  This has two
effects: first, a \f(CW\*(C`write\*(C'\fR or a \f(CW\*(C`print\*(C'\fR without a filehandle will
default to this \s-1FILEHANDLE\s0.  Second, references to variables related to
output will refer to this output channel.  For example, if you have to
set the top of form format for more than one output channel, you might
do the following:
.Sp
.Vb 4
\&    select(REPORT1);
\&    $^ = 'report1_top';
\&    select(REPORT2);
\&    $^ = 'report2_top';
.Ve
.Sp
\&\s-1FILEHANDLE\s0 may be an expression whose value gives the name of the
actual filehandle.  Thus:
.Sp
.Vb 1
\&    $oldfh = select(STDERR); $| = 1; select($oldfh);
.Ve
.Sp
Some programmers may prefer to think of filehandles as objects with
methods, preferring to write the last example as:
.Sp
.Vb 2
\&    use IO::Handle;
\&    STDERR->autoflush(1);
.Ve
.IP "select \s-1RBITS\s0,WBITS,EBITS,TIMEOUT" 8
.IX Item "select RBITS,WBITS,EBITS,TIMEOUT"
This calls the \fIselect\fR\|(2) system call with the bit masks specified, which
can be constructed using \f(CW\*(C`fileno\*(C'\fR and \f(CW\*(C`vec\*(C'\fR, along these lines:
.Sp
.Vb 4
\&    $rin = $win = $ein = '';
\&    vec($rin,fileno(STDIN),1) = 1;
\&    vec($win,fileno(STDOUT),1) = 1;
\&    $ein = $rin | $win;
.Ve
.Sp
If you want to select on many filehandles you might wish to write a
subroutine:
.Sp
.Vb 9
\&    sub fhbits {
\&        my(@fhlist) = split(' ',$_[0]);
\&        my($bits);
\&        for (@fhlist) {
\&            vec($bits,fileno($_),1) = 1;
\&        }
\&        $bits;
\&    }
\&    $rin = fhbits('STDIN TTY SOCK');
.Ve
.Sp
The usual idiom is:
.Sp
.Vb 2
\&    ($nfound,$timeleft) =
\&      select($rout=$rin, $wout=$win, $eout=$ein, $timeout);
.Ve
.Sp
or to block until something becomes ready just do this
.Sp
.Vb 1
\&    $nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);
.Ve
.Sp
Most systems do not bother to return anything useful in \f(CW$timeleft\fR, so
calling \fIselect()\fR in scalar context just returns \f(CW$nfound\fR.
.Sp
Any of the bit masks can also be undef.  The timeout, if specified, is
in seconds, which may be fractional.  Note: not all implementations are
capable of returning the \f(CW$timeleft\fR.  If not, they always return
\&\f(CW$timeleft\fR equal to the supplied \f(CW$timeout\fR.
.Sp
You can effect a sleep of 250 milliseconds this way:
.Sp
.Vb 1
\&    select(undef, undef, undef, 0.25);
.Ve
.Sp
Note that whether \f(CW\*(C`select\*(C'\fR gets restarted after signals (say, \s-1SIGALRM\s0)
is implementation\-dependent.
.Sp
\&\fB\s-1WARNING\s0\fR: One should not attempt to mix buffered I/O (like \f(CW\*(C`read\*(C'\fR
or ) with \f(CW\*(C`select\*(C'\fR, except as permitted by \s-1POSIX\s0, and even
then only on \s-1POSIX\s0 systems.  You have to use \f(CW\*(C`sysread\*(C'\fR instead.
.IP "semctl \s-1ID\s0,SEMNUM,CMD,ARG" 8
.IX Item "semctl ID,SEMNUM,CMD,ARG"
Calls the System V \s-1IPC\s0 function \f(CW\*(C`semctl\*(C'\fR.  You'll probably have to say
.Sp
.Vb 1
\&    use IPC::SysV;
.Ve
.Sp
first to get the correct constant definitions.  If \s-1CMD\s0 is \s-1IPC_STAT\s0 or
\&\s-1GETALL\s0, then \s-1ARG\s0 must be a variable which will hold the returned
semid_ds structure or semaphore value array.  Returns like \f(CW\*(C`ioctl\*(C'\fR:
the undefined value for error, "\f(CW\*(C`0 but true\*(C'\fR" for zero, or the actual
return value otherwise.  The \s-1ARG\s0 must consist of a vector of native
short integers, which may be created with \f(CW\*(C`pack("s!",(0)x$nsem)\*(C'\fR.
See also \*(L"SysV \s-1IPC\s0\*(R" in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, \f(CW\*(C`IPC::Semaphore\*(C'\fR
documentation.
.IP "semget \s-1KEY\s0,NSEMS,FLAGS" 8
.IX Item "semget KEY,NSEMS,FLAGS"
Calls the System V \s-1IPC\s0 function semget.  Returns the semaphore id, or
the undefined value if there is an error.  See also
\&\*(L"SysV \s-1IPC\s0\*(R" in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, \f(CW\*(C`IPC::SysV::Semaphore\*(C'\fR
documentation.
.IP "semop \s-1KEY\s0,OPSTRING" 8
.IX Item "semop KEY,OPSTRING"
Calls the System V \s-1IPC\s0 function semop to perform semaphore operations
such as signalling and waiting.  \s-1OPSTRING\s0 must be a packed array of
semop structures.  Each semop structure can be generated with
\&\f(CW\*(C`pack("s!3", $semnum, $semop, $semflag)\*(C'\fR.  The number of semaphore
operations is implied by the length of \s-1OPSTRING\s0.  Returns true if
successful, or false if there is an error.  As an example, the
following code waits on semaphore \f(CW$semnum\fR of semaphore id \f(CW$semid:\fR
.Sp
.Vb 2
\&    $semop = pack("s!3", $semnum, -1, 0);
\&    die "Semaphore trouble: $!\en" unless semop($semid, $semop);
.Ve
.Sp
To signal the semaphore, replace \f(CW\*(C`\-1\*(C'\fR with \f(CW1\fR.  See also
\&\*(L"SysV \s-1IPC\s0\*(R" in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, and \f(CW\*(C`IPC::SysV::Semaphore\*(C'\fR
documentation.
.IP "send \s-1SOCKET\s0,MSG,FLAGS,TO" 8
.IX Item "send SOCKET,MSG,FLAGS,TO"
.PD 0
.IP "send \s-1SOCKET\s0,MSG,FLAGS" 8
.IX Item "send SOCKET,MSG,FLAGS"
.PD
Sends a message on a socket.  Attempts to send the scalar \s-1MSG\s0 to the
\&\s-1SOCKET\s0 filehandle.  Takes the same flags as the system call of the
same name.  On unconnected sockets you must specify a destination to
send \s-1TO\s0, in which case it does a C \f(CW\*(C`sendto\*(C'\fR.  Returns the number of
characters sent, or the undefined value if there is an error.  The C
system call \fIsendmsg\fR\|(2) is currently unimplemented.  See
\&\*(L"\s-1UDP:\s0 Message Passing\*(R" in perlipc for examples.
.Sp
Note the \fIcharacters\fR: depending on the status of the socket, either
(8\-bit) bytes or characters are sent.  By default all sockets operate
on bytes, but for example if the socket has been changed using
\&\fIbinmode()\fR to operate with the \f(CW\*(C`:utf8\*(C'\fR I/O layer (see \*(L"open\*(R", or the
\&\f(CW\*(C`open\*(C'\fR pragma, open), the I/O will operate on \s-1UTF\-8\s0 encoded
Unicode characters, not bytes.  Similarly for the \f(CW\*(C`:encoding\*(C'\fR pragma:
in that case pretty much any characters can be sent.
.IP "setpgrp \s-1PID\s0,PGRP" 8
.IX Item "setpgrp PID,PGRP"
Sets the current process group for the specified \s-1PID\s0, \f(CW0\fR for the current
process.  Will produce a fatal error if used on a machine that doesn't
implement \s-1POSIX\s0 \fIsetpgid\fR\|(2) or \s-1BSD\s0 \fIsetpgrp\fR\|(2).  If the arguments are omitted,
it defaults to \f(CW\*(C`0,0\*(C'\fR.  Note that the \s-1BSD\s0 4.2 version of \f(CW\*(C`setpgrp\*(C'\fR does not
accept any arguments, so only \f(CW\*(C`setpgrp(0,0)\*(C'\fR is portable.  See also
\&\f(CW\*(C`POSIX::setsid()\*(C'\fR.
.IP "setpriority \s-1WHICH\s0,WHO,PRIORITY" 8
.IX Item "setpriority WHICH,WHO,PRIORITY"
Sets the current priority for a process, a process group, or a user.
(See \fIsetpriority\fR\|(2).)  Will produce a fatal error if used on a machine
that doesn't implement \fIsetpriority\fR\|(2).
.IP "setsockopt \s-1SOCKET\s0,LEVEL,OPTNAME,OPTVAL" 8
.IX Item "setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL"
Sets the socket option requested.  Returns undefined if there is an
error.  \s-1OPTVAL\s0 may be specified as \f(CW\*(C`undef\*(C'\fR if you don't want to pass an
argument.
.IP "shift \s-1ARRAY\s0" 8
.IX Item "shift ARRAY"
.PD 0
.IP "shift" 8
.IX Item "shift"
.PD
Shifts the first value of the array off and returns it, shortening the
array by 1 and moving everything down.  If there are no elements in the
array, returns the undefined value.  If \s-1ARRAY\s0 is omitted, shifts the
\&\f(CW@_\fR array within the lexical scope of subroutines and formats, and the
\&\f(CW@ARGV\fR array at file scopes or within the lexical scopes established by
the \f(CW\*(C`eval ''\*(C'\fR, \f(CW\*(C`BEGIN {}\*(C'\fR, \f(CW\*(C`INIT {}\*(C'\fR, \f(CW\*(C`CHECK {}\*(C'\fR, and \f(CW\*(C`END {}\*(C'\fR
constructs.
.Sp
See also \f(CW\*(C`unshift\*(C'\fR, \f(CW\*(C`push\*(C'\fR, and \f(CW\*(C`pop\*(C'\fR.  \f(CW\*(C`shift\*(C'\fR and \f(CW\*(C`unshift\*(C'\fR do the
same thing to the left end of an array that \f(CW\*(C`pop\*(C'\fR and \f(CW\*(C`push\*(C'\fR do to the
right end.
.IP "shmctl \s-1ID\s0,CMD,ARG" 8
.IX Item "shmctl ID,CMD,ARG"
Calls the System V \s-1IPC\s0 function shmctl.  You'll probably have to say
.Sp
.Vb 1
\&    use IPC::SysV;