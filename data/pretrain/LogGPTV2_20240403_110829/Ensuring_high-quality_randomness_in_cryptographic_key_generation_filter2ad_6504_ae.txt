a PKCS#10 request from a device, the CA would ﬁrst check
the validity of the EA’s signature on the request. If the sig-
nature is valid and the CA is able to verify the identity of
the requesting device, the CA would sign the certiﬁcate and
return it to the device.
We expect that many commercial certiﬁcate authorities
would be willing to serve as free public entropy authorities,
since the computational cost of acting as an entropy author-
ity is small (less than one CPU-second per protocol run).
Organizations large enough to have their own IT depart-
ments might run their own internal entropy authorities as
well.
Self-Signed Certiﬁcates and SSH. TLS servers often
use self-signed certiﬁcates to provide link encryption with-
out CA-certiﬁed identity. The analogue of a self-signed cer-
tiﬁcate in our setting is a certiﬁcate that is signed by the
entropy authority but that is not signed by a certiﬁcate au-
thority. This sort of certiﬁcate would convince a third party
that the device’s public key is sampled from a high-entropy
distribution, without convincing a third party that the key
corresponds to a particular real-world identity. As long as
some EAs provide their services for free (which we expect),
EA-signed certiﬁcates will be free, just as self-signed certiﬁ-
cates are free today.
To generate such a certiﬁcate, the device would submit
a PKCS#10 certiﬁcate signing request to the entropy au-
thority at the end of Step 3 of the RSA protocol or Step 3
of the DSA protocol, along with other data it sends. The
entropy authority would then sign the request and would
694return the EA-signed certiﬁcate to the device. TLS clients
(e.g., Web browsers) would maintain a list of public keys
of approved entropy authorities, just as today’s client keep
a list of approved root CAs. When a client connects to a
device that uses an EA-signed certiﬁcate, the client would
verify the EA’s signature and would treat the certiﬁcate just
as it treats self-signed certiﬁcates today.
SSH could similarly use EA-signed keys to use convince
clients that a particular SSH host generated its public key
using random values from an approved entropy authority.
To accomplish this, the SSH server software would deﬁne
a new public key algorithm type for EA-signed keys (e.g.,
ssh-rsa-rand). Keys of this type would contain the SSH
host’s normal public key, but they would also contain an
EA’s signature on the SSH host’s public key (along with
the ﬁngerprint of the signing EA’s key). SSH clients that
support the ssh-rsa-rand key type would be able to verify
the EA’s signature on the host’s key to conﬁrm that that
the host’s key incorporates randomness from an approved
entropy authority.
Our key generation protocol
Other entropy issues.
only ensures that a device’s RSA or DSA keypair has suﬃ-
cient randomness—it does not ensure randomness in other
security-critical parts of the system (e.g., signing nonce gen-
eration, TLS session key selection, address space layout ran-
domization). We focus on cryptographic key generation be-
cause attacks against weak public keys are especially easy to
mount. Once a device publishes a weak public key, the de-
vice is likely to use the same public key for months or years.
Thus, even if the device’s entropy source strengthens over
time (as the device gathers randomness from network inter-
rupt timings, for example) the device’s keys remains weak.
Hedged public-key cryptography [1, 39], in conjunction with
our key generation protocols, would help reduce the risk of
bad randomness in signing and encryption, but solving all
of these randomness problems is likely beyond the scope of
any single system.
Distributing trust with many entropy authorities.
As we note in Section 2, if the device has a weak entropy
source then there is no way to protect the device against a
eavesdropper that observes all communication between the
device and the EA. Our threat model excludes the possibility
of such an eavesdropper, but if the device is particularly
concerned about eavesdroppers on its initial conversation
with the EA, the device could run a modiﬁed version of
the protocol with many entropy authorities instead of just
one. With multiple EAs, an eavesdropper would have to
observe the device’s communication with all of the EAs to
learn the device’s secret key. We sketch the multi-authority
DSA protocol here. A similar modiﬁcation allows RSA key
generation with multiple entropy authorities.
In the multi-authority DSA protocol, the device commits
to its random value x and sends Cx ← Commit(x; r) to each
of N entropy authorities. Each entropy authority responds
with (xi, ri, σi), where xi and ri are random values in Zq
and σi ← SignEAi
(Cx, Commit(xi; ri)). The device’s secret
key is then a = x + Σixi mod q. The device can obtain a
signature on its public key ga from each entropy authority
by presenting each authority with its public key, its commit-
ment to x, the randomness r it used to commit to x, the set
~r of nonces used in the entropy authorities’ commitments,
Juels-Guajardo protocol [30]
This paper
319
8
35
4
Single exp. Double exp.
Figure 6: Approximate number of k-bit modular ex-
ponentiations the device must compute to generate
a k-bit RSA modulus.
the set ~C of commitments to each of the entropy authority’s
random values, and the set of entropy authority signatures
~σ: (ga, Cx, r, ~r, ~C, ~σ). Each authority veriﬁes each EA sig-
nature σi, conﬁrms that gahr+Σiri = Cx(Πi Ci), and signs
the device’s public key ga.
Default keys. Roughly 5% of TLS hosts on the Inter-
net in 2012 used default keys, which are pre-loaded into the
device’s ﬁrmware by the manufacturer [29]. Typically, any
two such devices of the same model and ﬁrmware version
will ship with the same public and secret key. To recover
a default secret key, an attacker can download the ﬁrmware
for the device from the manufacturer’s Web site or look up
the default key in a database designed for that purpose [33].
Our protocol does not protect against a manufacturer who
installs the same keypair in many devices. If a manufacturer
wants all of her devices to ship with a default keypair signed
by an entropy authority, the manufacturer could run our key
generation protocol once in the factory, and then install this
single EA-signed keypair in every device shipped.
Installing the same keypair in many devices is tantamount
to publishing the device’s secret key, which is an “attack”
which we cannot hope to prevent. As a heuristic defense
against default keys, a client connecting to a device could
require that the device use a certiﬁcate that was generated
after the manufacture of the device (as indicated, for exam-
ple, by an EA-signed timestamp on the certiﬁcate).
7. RELATED WORK
Hedged public-key cryptography [1, 39] addresses the prob-
lem of weak randomness during message signing or encryp-
tion, whereas our work addresses the problem of random-
ness during key generation. Cryptographic hedging provides
no protection against randomness failures when generating
cryptographic keys but deployed systems could use hedg-
ing in conjunction with our key-generation protocols to de-
fend against weak randomness after generating their cryp-
tographic keys.
Intel’s Ivy Bridge processor implements a hardware in-
struction that exploits physical uncertainty in a dedicated
circuit to gather random numbers [40]. A hardware ran-
dom number generator provides a new and potentially rich
source of entropy to cryptographic applications. Devices
without hardware random number generators could use a
variety of other techniques to gather possibly unpredictable
values early in the system boot process [35]. Even so, having
a rich entropy source does not mean that software develop-
ers will properly incorporate the entropy into cryptographic
secrets. Our protocol ensures that keys will have high en-
tropy, even if the cryptographic software ignores or misuses
hardware-supplied randomness.
Juels and Guajardo [30] oﬀer a protocol for RSA key gen-
eration that is superﬁcially similar to the one we present
here. The Juels-Guajardo protocol protects against klep-
tography [42], in which a device’s cryptography library is
adversarial, and repudiation, in which a signer intention-
695ally generates a weak cryptographic signing key so that the
signer can disown signed messages in the future. To pre-
vent against these very strong adversaries, their protocol
requires a number of additional zero-knowledge proofs that
are unnecessary in our model. Using the number of modular
exponentiations as a proxy for protocol execution time, the
Juels-Guajardo protocol would likely take over 40 minutes
to execute on the home router we used in our experiments,
while our protocol takes fewer than two minutes (see Fig-
ure 6). In addition, Juels and Guajardo do not address the
issue of a device whose source of randomness is so weak that
it cannot create blinding commitments or establish a secure
SSL session.
8. CONCLUSION
This paper presents a systemic solution to the problem
of low-entropy keys. We present a new threat model, in
which a device generating cryptographic secrets may have
one communication session with an entropy authority which
an eavesdropper cannot observe. Under this threat model,
we describe protocols for generating RSA and DSA keypairs
that do not weaken keys for devices that have a strong en-
tropy source, but that can considerably strengthen keys gen-
erated on low-entropy devices. Our key generation protocols
incur tolerable slow-downs, even on a CPU-limited home
router. The threat model and protocols presented herein
oﬀer a promising solution to the long-standing problem of
weak cryptographic keys.
Acknowledgements
We thank David Wolinsky, Ewa Syta, and Zooko Wilcox-
O’Hearn for their helpful comments. This material is based
upon work supported by the Defense Advanced Research
Agency (DARPA) and SPAWAR Systems Center Paciﬁc,
Contracts No. N66001-11-C-4018 and N66001-11-C-4022.
This work was also supported by NSF and a Google faculty
award.
9. REFERENCES
[1] M. Bellare, Z. Brakerski, M. Naor, T. Ristenpart, G. Segev,
H. Shacham, and S. Yilek. Hedged public-key encryption: How
to protect against bad randomness. In ASIACRYPT, pages
232–249. Springer, 2009.
[2] M. Bellare and P. Rogaway. Random oracles are practical: A
paradigm for designing eﬃcient protocols. In CCS, pages
62–73, 1993.
[3] M. Blum. Coin ﬂipping by telephone: a protocol for solving
impossible problems. ACM SIGACT News, 15(1):23–27, 1983.
[4] J. Camenisch and M. Stadler. Proof systems for general
statements about discrete logarithms. Technical Report 260,
Dept. of Computer Science, ETH Zurich, March 1997.
[5] S. Chokhani and W. Ford. Internet X.509 public key
infrastructure certiﬁcate policy and certiﬁcation practices
framework, Mar. 1999. RFC 2527.
[6] R. Cramer and I. Damg˚ard. Zero-knowledge proofs for ﬁnite
ﬁeld arithmetic, or: Can zero-knowledge be for free? In
CRYPTO, pages 424–441. Springer, 1998.
[7] CVE-2001-0950: ValiCert Enterprise Validation Authority uses
insuﬃciently random data, Jan. 2001.
[8] CVE-2001-1141: PRNG in SSLeay and OpenSSL could be used
by attackers to predict future pseudo-random numbers, July
2001.
[9] CVE-2001-1467: mkpasswd, as used by Red Hat Linux, seeds
its random number generator with its process ID, Apr. 2001.
[10] CVE-2003-1376: WinZip uses weak random number generation
for password protected ZIP ﬁles, Dec. 2003.
[11] CVE-2005-3087: SecureW2 TLS implementation uses weak
random number generators during generation of the pre-master
secret, Sept. 2005.
[12] CVE-2006-1378: PasswordSafe uses a weak random number
generator, Mar. 2006.
[13] CVE-2006-1833: Intel RNG Driver in NetBSD may always
generate the same random number, Apr. 2006.
[14] CVE-2007-2453: Random number feature in Linux kernel does
not properly seed pools when there is no entropy, June 2007.
[15] CVE-2008-0141: WebPortal CMS generates predictable
passwords containing only the time of day, Jan. 2008.
[16] CVE-2008-0166: OpenSSL on Debian-based operating systems
uses a random number generator that generates predictable
numbers, Jan. 2008.
[17] CVE-2008-2108: GENERATE SEED macro in php produces 24
bits of entropy and simpliﬁes brute force attacks against the
rand and mt rand functions, May 2008.
[18] CVE-2008-5162: The arc4random function in FreeBSD does not
have a proper entropy source for a short time period
immediately after boot, Nov. 2008.
[19] CVE-2009-3238: Linux kernel produces insuﬃciently random
numbers, Sept. 2009.
[20] CVE-2009-3278: QNAP uses rand library function to generate
a certain recovery key, Sept. 2009.
[21] CVE-2011-3599: Crypt::DSA for Perl, when /dev/random is
absent, uses the Data::Random module, Oct. 2011.
[22] dd-wrt. http://dd-wrt.com/.
[23] Electronic Frontier Foundation. The EFF SSL observatory.
https://www.eff.org/observatory.
[24] A. Fiat and A. Shamir. How to prove yourself: practical
solutions to identiﬁcation and signature problems. In
CRYPTO, pages 186–194, 1986.
[25] P. Gallagher and C. Furlani. FIPS 186-3: Digital signature
standard, 2009.
[26] I. Goldberg and D. Wagner. Randomness and the Netscape
browser. Dr. Dobb’s Journal–Software Tools for the
Professional Programmer, 21(1):66–71, 1996.
[27] S. Goldwasser, S. Micali, and R. L. Rivest. A digital signature
scheme secure against adaptive chosen-message attacks. SIAM
Journal on Computing, 17(2):281–308, 1988.
[28] G. H. Hardy and J. E. Littlewood. Some problems of partitio
numerorum; III: On the expression of a number as a sum of
primes. Acta Mathematica, 44(1):1–70, 1923.
[29] N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman.
Mining your Ps and Qs: Detection of widespread weak keys in
network devices. In USENIX Security Symposium, Aug. 2012.
[30] A. Juels and J. Guajardo. RSA key generation with veriﬁable
randomness. In PKC, Feb. 2002.
[31] A. Klyubin. Some SecureRandom thoughts.
http://android-developers.blogspot.com/2013/08/
some-securerandom-thoughts.html, Aug. 2013.
[32] A. K. Lenstra, J. P. Hughes, M. Augier, J. W. Bos,
T. Kleinjung, and C. Wachter. Ron was wrong, Whit is right.
IACR ePrint archive, 64, 2012.
[33] littleblackbox: Database of private SSL/SSH keys for
embedded devices. https://code.google.com/p/littleblackbox/.
[34] B. M¨oller. Algorithms for multi-exponentiation. In Selected
Areas in Cryptography, pages 165–180, 2001.
[35] K. Mowery, M. Wei, D. Kohlbrenner, H. Shacham, and
S. Swanson. Welcome to the Entropics: Boot-time entropy in
embedded devices. In IEEE Symposium on Security and
Privacy, 2013.
[36] NetBSD security advisory 2013-003: RNG bug may result in
weak cryptographic keys. ftp://ftp.netbsd.org/pub/NetBSD/
security/advisories/NetBSD-SA2013-003.txt.asc, Mar. 2013.
[37] T. P. Pedersen. Non-interactive and information-theoretic
secure veriﬁable secret sharing. In CRYPTO, pages 129–140.
Springer, 1992.
[38] M. O. Rabin. Probabilistic algorithm for testing primality.
Journal of Number Theory, 12(1):128–138, 1980.
[39] T. Ristenpart and S. Yilek. When good randomness goes bad:
Virtual machine reset vulnerabilities and hedging deployed
cryptography. In NDSS, 2010.
[40] G. Taylor and G. Cox. Behind Intel’s new random-number
generator. IEEE Spectrum, Sept. 2011.
[41] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S. Savage.
When private keys are public: Results from the 2008 Debian
OpenSSL vulnerability. In IMC, pages 15–27, Nov. 2009.
[42] A. Young and M. Yung. Kleptography: Using cryptography
against cryptography. In EUROCRYPT, pages 62–74, 1997.
696