$score = script_param ("score"）;
cry
sdbh->beginTransaction ();
在一个事务内输入所有分数
die （"Bad event ID\n"）;
foreach ($score as $student_id => $new_score)
$blank_count=0;
else
$new_score = trim ($new_score);
lse if（ctype_digit（$new_score)）#必须像整数
$params=
++$nonblank_count;
++$blank_count;
(empty ($new_score))
sth=$sth_repl;
数据库里可能已存在的分数
sth =$sth_del;
在数据库里可能已有的分数删除
如果表单里没有提供学生分数，
array ($event_id,$student_id,$new_score);
($event_id,$student_id);
WHERE
VALUES(？,？,？)");
(event_id,student_id,score)
则把此学生之前
，确定哪些分数需要更新或删除：
#事务失败
#事务成功
#开始事务
id=？ AND student_id =？");
9.2
PHP 脚本实战
381
---
## Page 402
处，我们完全可以把它用作历史知识小测验的问题来源。我们现在就来动手做这件事，所用的
ofU.S.Past》的儿童专区里发布的那些小测验。事实上，我们创建的那个president表恰到好
9.2.2创建交互式的在线测验
种简单的验证机制，该机制也能用到这个脚本里。
器的人就能编辑这些分数。在稍后编写的用于美史联盟成员条目编辑的脚本里，我们将演示一
考试分数了。这个脚本有一个明显的不足，即没有提供任何安全措施，因此能连接上Web服务
出循环之后，如果没有发生错误，脚本会提交事务。如果发生了错误，脚本会回滚事务。
美史联盟网站的目标之一是：提供一个在线版的测验，其形式类似于在联盟通讯《Chronicles
score_entry·php脚本的内容就这些。现在，你可以通过Web 浏览器来录入和编辑所有的
在进入循环之前，这个脚本会调用beginTransaction（）函数，禁用自动提交模式。在退
口如果考试分数不为空，那么此函数将对值执行一些基本的输入验证，如果值看上去像
口如果在把考试分数末尾的空白去掉之后，分数为空，则表明没有输入任何内容。但是，
此脚本会通过遍历sscore数组来获得并处理学生ID值以及与它们相关联的考试分数。
INSERT语句一样。否则，REPLACE 语句会将原有的分数替换为新的分数。
字符串，因此这里并不适合使用它。is_int（）函数在遇到字符串时都返回 FALSE，即
那么DELETE语句将不会找到任何需要删除的行，但是这不会带来任何坏处。
并未参加考试的学生输入了考试分数，现在需要删除它。）如果该学生没有任何分数，
有可能以前曾有一个考试分数，因此脚本会尝试删除它。（可能我们以前错误地为实际
print("\n");
果某个学生在这次考试里没有任何分数，那么 REPLACE语句将添加一个新行，其效果与
不是INSERT，因为我们可能是在替换已存在的考试分数，而不是要输入新的分数。如
如果考试分数没什么问题，则把它添加到 score表里。这里使用的语句是REPLACE，
返回TRUE：
如果从字符串$str 的开头到结尾所包含的每一个字符都是数字，那么下面这个函数将
使这个字符串里只包含数字字符，也是如此。这里需要的是对字符串的内容进行检查，
is_int（）函数。后者只是用于测试变量的类型是否为整数，可是表单值都被编码成了
个整数，则接受它。请注意，这里的整数测试方法使用的是模式匹配，而非PHP的
#执行回滚；不过这里使用了一个空的异常处理器来捕捉回滚失败内容
catch (PDOException $e)
ctype_digit ($str)
catch（PDOException $e）(）
try
printf ("Score entry failed: %s\n",
第9章用PHP语言编写MySQL程序
printf
$dbh->rollback （）;
printf ("Number of scores entered: %d\n", $nonblank_count);
sdbh-
事务执行成功，提交它
$sth->execute ($params);
throw new PDOException ("invalid score: $new_score");
->commit
（）
(Se-）
司
---
## Page 403
使用这个DISTINCT，但实际情况并非如此，可以执行下面这条语句来查看实际情况：
可能出现的同一个出生地做为备选答案的情况。如果各位总统的出生地各不相同，就没有必要
在错误选项中，查询应该使用LIMIT5，而非LIMIT4。这个查询使用了DISTINCT，以避免
的选项，可以用一个类似的查询来获得：
名字即为问题中问到的那位总统，出生地即为该问题的正确答案。我们还需要准备几个不正确
机选取一个行。例如，想要随机选取一位总统的名字和出生地，则可以使用下面这样的查询来
查答案是否正确。下面是 pres_quiz.php 脚本的代码：
式匹配检查用户可能输入的任何内容相比，将用户的选择与正确答案进行比较则显得更加简单。
选项里选择一个答案即可，这比让他们敲打键盘输入答案简单很多。对于脚本来说，与通过模
我们把问题限制在了只询问总统的出生地。另一个简化措施是提供选择题。用户只需要从一组
查答案是否正确。脚本可以根据president 表里的信息提出各种类型的问题，但是为简明起见，
脚本名称为 pres_quiz.php。
我们可以从这个查询的结果中选取前4个与正确答案不一样的值。为了防止正确答案出现
我们提的问题是：“这位总统的出生地在哪里？”上面的查询提供了名字和出生地。其中，
基本思路是：随机挑选并询问与某位总统有关的问题；然后提示用户输入一个答案，并检
FROM president ORDER BY RAND();
SELECT DISTINCT CONCAT(city,
FROM president ORDER BY RAND(）LIMIT 1;
SELECT CONCAT(first_name,
为创建测验题，
html_end ();
$dbh=NULL;#关闭连接
else
$response = script_param ("response")
$dbh = sampdb_connect （）;
#..·此处放置测验处理函数···
require_once"sampdb_pdo.php";
#pres_quiz.php－用于测验用户对总统出生地的掌握情况的脚本
dudi>
这个脚本的整体思路非常简单。如果用户没有提交答案，则显示初始测验页面；否则，检
pres_quiz.php 脚本必须完成以下两件事。
html_begin ($title,$title);
check_response ($dbh);
present_question ($dbh);
口
口
确，那么脚本应该重新显示同样的测验题。否则，它应该生成并显示一道新的测验题。
在用户提交答案之后
在首次被调用时，应该利用president 表里的信息生成并显示一道新的测验题。
(sresponse)
我们需要组合使用 ORDER BY RAND（)和 LIMIT 1，从 president 表里随
后，脚本必须核对答案，并向用户反馈答案是否正确。如果答案不正
ASplace
,last_name）AS name，
#用户提交的表单响应
#第一次调用
9.2PHP脚本实战
383
---
## Page 404
助于我们使用explode（）函数正确拆解这个字符串。）display_form(）函数负责生成表单：
各个值之间插入一个特殊分隔符，把它们连接起来。（如果稍后需要重新显示这道题，分隔符有
生地和备选答案集。使用implode（）函数能很容易地把这些答案选项编码成一个字符串，即在
这些字段是表单的一部分，不会显示给用户看，但是用户提交答案时会返回这些字段值。
对错和重新显示测验题的工作则有点儿棘手。这需要访问那个正确答案，还需要重新生成测验
显示那个测验题。
时，如果信息发回Web服务器，那么脚本要检查这个答案是否正确，如果答案不正确，则重亲
测验是
总统的名字、一组列出备选项的单选按钮和一个提交按钮。这个表单的基本用途是向用户显示
384
所需要的所有信息。一种做法是使用一组隐藏字段把所有必要的信息都包含在这个表单里。
显示测验题的事情比较好办：把总统的名字和可能的出生地显示出来即可。但检查答案的
function display_form($name, $place, $choices)
present_question（）调用的 aisplay_form（）函数会使用一个表单生成测验题，显示一位
负责生成测验题和各个备选答案的函数如下所示：
mysql> SELECT city, state, couNT(*) AS count FROM president
题，但是它还需要做另外一些事情：它必须把测验题信息显示到客户端；当用户提交答
#执行语句，挑择某位总统，
city
hidden_field ("place",
printf ("\n", script_name ());
display_form ($name, $place, $choices）;
$place = $row["place"];
Sstmt=
Braintree
shuffle
while(count
$choices[]=$place;
name
$row
$sth
随机排列各个选项，然后显示表单
第9章用PHP语言编写MySQL程序
if($row["place"]!=$place)
其
->GROUP BY city,state HAVING count>1;
$choices[]=$row["place"];#添加另一个错误选项
中
立包含5个出生地的Schoices数组，
造要显示的各个出生地备选项。
中一个为正确答案。
=$sth->fetch();
$dbh->query($stmt);
($choices);
FROM president ORDER BY RAND() LIMIT5 1";
"SELECT CONCAT(first_name)
FROMpresident
CONCAT(city,
Istate1count
（$choices）fetch （）)
$name);
#使用正确的选项来初始化数组
并获得出生地
$place);
ORDER BY RAND()LIMIT5";
2
state)
ASplace
last_name) As name,
state) AS place
案
---
## Page 405
要用到隐藏字段 name、place 和 choices 里的值。我们已经把正确答案编码在表单的 palce
做什么：
首次调用，那么这个参数不会存在，因此此脚本的主体可以根据这个参数是否存在来确定应该
出此脚本是处于首次执行状态，还是有用户正在提交此前显示在表单里的测验题答案。如果是
值返回到Web服务器。调用 script_param（）函数便可以看到response 的值。据此可以判断
来对标记的属性进行编码，以防止它们包含诸如引号之类的特殊字符。
上可以把它放到库文件 sampdb_pdo.php 里。请注意，它还使用了htmlspecialchars（）函数
field（）函数，它负责为隐藏字段生成标记：
我们还得编写check_response（）函数，将用户所选答案与正确答案进行比较。为此，需
当用户在备选答案当中挑选了一个出生地并提交表单时，该答案将作为response 参数的
另外两个辅助函数是radio_button（)和 submit_button(），它们的代码如下所示：
因为hidden_fiela()函数是一个通用性的例程，
display_form（）函数使用了几个辅助函数来生成各个表单字段。第一个是hidden_
else
function submit_button($name,$value)
function radio_button ($name,
function hidden_field ($name,$value)
check_response ($dbh);
present_question ($dbh);
printf ("\n",
printf ("%s\n",
printf("\n",
print("\n");
submit_button（"submit","Submit");
print（"\n");
for（$i=0;$i\n", htmlspecialchars ($name));
hidden_field ("choices",
print("\n"）;
radio_button ("response",
htmlspecialchars
htmlspecialchars ($name),
"submit"
htmlspecialchars ($label)):
htmlspecialchars
htmlspecialchars (Sname),
"radio"
htmlspecialchars(Svalue));
（$checked？“checked=\"checked\""：“"），
hidden"
(Sresponse))
#用户提交的表单响应
#第一次调用
implode（"#"，
($value）);
($value)
$value,$label,Schecked)
$choices[$i],$choices[$i],FALSE);
$choices）);
，可能很多脚本都会用到它，因此在逻辑
9.2PHP脚本实战
385