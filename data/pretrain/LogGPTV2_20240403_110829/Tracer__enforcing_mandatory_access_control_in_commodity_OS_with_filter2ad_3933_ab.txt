on Explorer. 
Moreover,  from  the  details  of  2,600  malware  samples,  we 
discovered  three  common  characteristics  of  malware  that  can 
guide our subsequent anti-malware design:   
(1)  Entrance-Characteristics.  All  malware  samples  break 
into hosts through two entrances, network and removable drive. 
Most  breaking-ins  are  via  network,  mainly  through  dangerous 
protocols including HTTP, POP3, IRC, SMTP, FTP and ICMP, 
etc.  Using  these  protocols,  malware  samples  can  penetrate  the 
network  and  host  firewalls  by  disguising  themselves  as  popular 
software conducting benign network traffic. 
(2)  Damage-Characteristics.  Malware  behaviors  can 
impose multiple forms of damages, i.e., resulting in problems in 
confidentiality,  integrity  and  availability.  Besides,  we  consider 
malware  propagation  as  another  type  of  damage  since  it  can 
indirectly  cause  the  former  three  forms  of  damages  and 
eventually lead the entire host to be taken over. For example, the 
behavior  “Copy  itself”  does  not  directly  hurt  security  but  is  an 
essential  step  towards  propagating  itself  and  then  executing 
malicious  behaviors  on  a  host.  Therefore,  we  evaluate  the 
damages of each behavior and record them in Figure 1, using C, I, 
A,  and  P  to  represent  the  damages  related  to  confidentiality, 
integrity, availability and propagation respectively. 
(3)  Attack-Characteristics.  Malware  samples  from  the 
network  have  two  attack  patterns.  One  is  that,  most  malware 
samples  exploit  bugs  in  network-facing  daemon  programs  or 
client programs to compromise them, then immediately spawn a 
shell  or  back-door  process.  Next,  an  attacker  typically  tries  to 
download  and  install  attacking  tools  and  rootkits,  as  well  as 
performs  some  other  adversary  behaviors.  The  other  attack 
pattern 
increasingly  use  social 
engineering  methods 
into  downloading  and 
launching  them.  After  started,  a  malware  sample  usually  copies 
itself and makes itself a resident in a host. 
2.2 Problems in MAC 
that,  malware  samples 
lure  users 
to 
is 
Incompatibility  is  a  well-known  problem  when  enforcing  a 
MAC  model  in  a  commercial  operating  system  [2][3][5].  To 
investigate  its  root  reason,  in  a  secure  network  environment,  we 
set  up  two  machines  to  run  MAC  enforced  operating  systems 
including SELinux [14] with MLS policy enabled and RSBAC [15] 
with  MAC  module  enabled.  After  a  few  days,  we  observed  that 
these MAC systems produced a huge number of log records about 
denied accesses, which indicated that some applications failed and 
some  acted  abnormally.  As  the  operation  environment  is  secure 
without  intrusion  and  malware,  these  denied  accesses  are  thus 
“false  positive”.  In  other  words,  MAC  systems  consider  benign 
accesses  malicious  and  refuse  them.  Many  FPs  together  could 
make the whole system finally unusable. Although part of the FPs 
can  be  removed  by  experts 
through  fine-granular  policy 
configuration,  many  of  them  are  not  removable,  and  thus  the 
impacted applications need to be modified before running on the 
MAC enabled systems. 
These  unremovable  FPs  are  resulted  because  most  MAC 
models  aim  to  forbid  illegal  information  flow  rather  than  forbid 
intrusive  behaviors  directly.  An  example  of  such  FPs  is  the 
self-revocation  problem  [3]  in  Low-Water-Mark  model,  which 
forbids a process to write a file created by itself if it has read a file 
with a lower integrity level before the writing. From the perspective 
of stopping illegal information flow, forbidding the write operation 
is reasonable. However, from the perspective of stopping intrusion, 
the write operation should not be denied if the process is actually 
not  serving  for  an  attacker.  Another  example  of  such  FPs  on  a 
BLP-enforced  Unix/Linux  stems  from  the  access  control  of  the 
directory “/tmp” shared by the entire system [17]. To prevent illegal 
information  flow,  a  process  with  a  lower  sensitive  level  can  not 
read from /tmp or a process with a higher sensitive level can not 
write  to  /tmp.  However,  from  the  view  of  intrusion  prevention, 
these processes do not necessarily represent intruders so that their 
“read” or “write” accesses to the /tmp should not be simply denied. 
Although it is possible to resolve this problem by adding “hiding 
sub directories” under /tmp, it is still difficult to eliminate the FPs 
resulting from many other shared entities on an OS, such as shared 
files, devices, pipes and memories. 
Meanwhile,  the  security  labels  of  MAC  models  also  do  not 
suit for fighting against malware, as they are designed to represent 
information  integrity  level  or  confidentiality  level  but  not  to 
distinguish between malicious and benign entities. In fact, a lower 
integrity level alone can not indicate that a process is malicious, as 
“malicious” also has other meanings, e.g., lower confidentiality and 
the  risk  of  damaging  system  availability.  Similarly,  a  lower 
confidentiality  level  alone  cannot  indicate  that  a  process  is 
malicious. Moreover, MAC labels are defined before an intrusion 
happens  and  can  not  be  changed  dynamically  to  reflect  intrusion 
propagation in an OS. Although some of the MAC models are able 
to adjust label states, e.g. LOMAC [3] and DTE [9], they are still 
not flexible enough to track the intrusion propagation at the whole 
system  level.  Consequently,  MAC  labels  can  not  differentiate 
Suspicious
Restriction
CIAP
Critical Malware Behaviors
 Generic Malware Behaviors
Bypassing Tracer Behaviors
Figure 2. Tracer model
Compromising Integrity
Compromising Confidentiality
Affecting Availability
Propagating Malware Programs
Damaging System Integrity
Stealing Confidential information
inter-process 
communication 
intruder.  All  other  entities 
because a process is possibly the agent of an intruder and an 
executable determines the execution flow of a process which 
in  OS,  e.g. 
represents  an 
non-executables, 
objects, 
registry  entries,  etc,  do  not  need  suspicious  labels.  When  a 
process requests to access these entities, Tracer mainly utilizes 
their DAC information to make access control decisions, thus 
a  huge  amount  of  configuration  work  can  be  reduced  while 
keeping traditional usage conventions unchanged. The second 
design  question  is  how  to  configure  security  labels.  As 
discussed in Section 2.2, in order to achieve good usability, a 
MAC  model  must  have  the  capability  of  automatically 
deploying  security  labels.  Accordingly,  we  introduce  two 
types of actions named “detection” and “tracing” to automate 
the  security  label  deployment  progress.  The  two  actions 
employ intrusion detection and tracing techniques respectively 
to recognize and mark suspicious processes and executables. 
The third design question is about access control rules. Being 
of  mandatory  access  control,  the  rules  of  Tracer  forcibly 
refuse the requests from suspicious processes if and only if the 
requests could lead to a malware behavior. 
Figure 2 gives an overview of Tracer which consists of three 
types of actions, detection, tracing and restriction. Each process 
or executable has two states, suspicious and benign. The actions 
of  detection  and  tracing  change  the  state  of  a  process  or 
executable to suspicious if it is identified as a potential intruder. 
The  restriction  action  forbids  a  suspected  intruder  to  perform 
malware  behaviors  in  order  to  protect  CIAP.  That  is  to  protect 
confidentiality,  integrity  and  availability,  as  well  as  to  stop 
malware  propagation.  The  three  actions  work  as  follows.  Once 
detecting  a  suspected  process  or  executable,  Tracer  labels  it  as 
suspicious and traces its descendent and interacted processes, as 
well as its generated executables. Tracer does not restrict benign 
processes at all, and permits suspicious processes to run as long 
as  possible  but  stops  their  malware  behaviors  that  would  cause 
security  damages.  In  addition,  Tracer  also  provides  a  special 
system  call  to  allow  a  user  to  change  the  state  of  a  suspicious 
process or executable back to benign if the user trusts it. In the 
rest of this section, we describe Tracer model in details, including 
detecting, tracing and restricting intruders. 
3.2 Detecting Intruders 
The  detecting  action  is  responsible  for  identifying  all 
potential  intruders.  We  do  not  intend  to  design  a  complex 
intrusion detection algorithm to achieve a low FP rate at the cost 
of  heavy  overhead.  Instead,  we  design  a  light-weight  intrusion 
detection  algorithm  that  can  identify  all  potential  intruders  but 
may have a relatively higher FP rate at the initial step. However, 
even if the detecting action wrongly denotes a benign process as 
suspicious,  the  subsequent  actions  of  Tracer,  i.e.,  tracing  and 
restricting  actions,  will  still  allow  it  to  run  rather  than  stop  it 
immediately, but only prevent it from executing featured malware 
behaviors. In other words, Tracer is built to have a good tolerance 
to the FPs caused by the detecting action. 
As depicted in Figure 2, the detection works at two levels: 
entrance and interior. The detection at entrance attempts to check 
all possible venues through which a malware program may break 
into  the  system.  Network  communications  is  the  main  type  of 
entrances  and  most  malware  programs  exploit  several  common 
dangerous  protocols to  compromise  hosts as  these  protocols are 
usually 
the 
Entrance-Characteristics  presented  in  Section  2.1.  Hence,  we 
denote  a  process  as  suspicious  if  it  receives  network  traffic 
according 
permitted 
firewalls 
by 
to 
Benign
At Entrance
Network Communications
Removable Drives
Detection
At Interior
Exclusive Malware 
Behaviors
Dangerous Protocols
Non-dangerous Protocols
Copying Itself
Injecting into Other Processes
Modifying Executable Files
Starting Hidden Network Clients
Ending Anti-malware Processes 
or Services
Tracing
Process to Process
Executable to Process
When Generating Child Processes
When Performing Inter-Process Communications
When loading An Executable
When Reading Semi-Executables or Script Files
Process to Executable
When Creating or Modifying Executables
often 
between malicious and benign entities. Relying on these labels, a 
MAC  system  often  fails  to  make  correct  decisions  on  intrusion 
blocking which eventually results in many FPs. 
requires 
complicated 
configurations 
Low-usability is another problem in a MAC-enabled system, 
as 
and 
it 
unconventional ways of usage. In a modern OS, there are a wide 
range  of  entities  including  processes,  files,  directories,  devices, 
pipes,  signals,  shared  memories  and  sockets,  etc.  If  just 
considering  the  files,  there  are  more  than  100,000  files  on  a 
typical Windows XP or Linux desktop. Moreover, MAC systems 
have complex policy interfaces which are difficult to configure. 
For  instance,  SELinux  has  29  different  classes  of  objects, 
hundreds of possible operations, and thousands of policy rules for 
a typical system. Hence, it is cumbersome for a common user to 
correctly configure labels for all entities without leaving security 
vulnerabilities.  In  addition,  after  enforcing  a  MAC,  users  must 
break  their  usage  convention  and  learn  how  to  use  the  MAC. 
Consequently, the ideal way for MAC to provide good usability is 
to  automatically  initialize  and  change  entity  labels  without 
changing users’ usage convention or requiring extra knowledge. 
3.  TRACER MODEL 
In  this  section,  we  present  our  Tracer  model  that  aims  to 
disable  malware  in  a  commodity  OS  by  disallowing  malware 
behaviors. The adversaries of Tracer are malware programs that 
break into a host through the network and removable drives. As 
Windows is the most popularly used OS and attractive to hackers, 
the description of Tracer is based on our design for Windows. We 
believe the model can also be applied to other operating systems 
(e.g.  Linux)  with  some  changes.  Investigating  the  suitability  of 
Tracer for non-Windows operating systems is beyond the scope 
of this paper. 
3.1 Model overview 
The design of an access control model needs to answer three 
questions. The first is how to define the security label. Based on the 
analysis in Section 2.2, we introduce a new form of security label 
called  suspicious  label  for  our  Tracer  model.  It  has  two  values: 
suspicious  and  benign.  A  suspicious  label  indicates  that  the 
associated  process  is  potentially  serving  for  an  intrusion  purpose 
and thus possible to initiate some malicious behaviors. Meanwhile, 
Tracer only assigns a suspicious label to a process or an executable, 
is 
to 
that 
through dangerous protocols. A frequently used application (e.g., 
web browser) thus might be denoted as suspicious but its normal 
running  will  not  be  affected,  because  Tracer  doesn't  restrict  the 
suspected processes instantly and permits them to perform as long 
as possible except stopping their critical malware behaviors. The 
rest  of  the  network  protocols,  say  non-dangerous  protocols,  are 
difficult to be exploited by malware programs, because they are 
not permitted by firewalls since benign software rarely use them. 
Nevertheless,  in  order  to  completely  monitor  all  the  network 
traffic, we denote a process as suspicious if it receives network 
traffic through a non-dangerous protocol and then exhibits any of 
the malware behaviors. Instead of only checking non-dangerous 
network  protocols,  further  checking  malware  behaviors  can 
reduce  the  extra  high  FP  rate.  The  Attack-Characteristics 
summarized in Section 2.1 supports this point. That is, a process 
exploited  by  a  malware  program  from  the  network  necessarily 
executes at least one critical malware behavior, e.g., launching a 
shell  process  or  downloading  an  executable,  to  propagate  the 
malware program within the system. Although a carefully crafted 
malware  program 
through  a 
non-dangerous  protocol  can  perform  some  behaviors  before 
performing a malware behavior, it is difficult for the process to 
make significant damages on the system. The reason is that the 
malware  behaviors  monitored  by  Tracer  include  all  of  the 
behaviors  that  can  cause  significant  damages,  let  alone  that 
malware  programs  are  difficult 
through 
non-dangerous protocols which are usually blocked by firewalls. 
The other type of entrances through which malware programs get 
into 
the 
Entrance-Characteristics, hence we denote a process as suspicious 
when it opens or loads an executable from a removable drive. 
removable  drives  according 
subverts  a  process 
to  attack  a  host 
the  system 
With  these  detecting  approaches  enforced,  however,  two 
types  of  system  maintenance  tasks,  i.e.,  updating  software 
through  the  network  and  installing  software  from  a  removable 
drive,  can  not  be  performed  because  the  processes  that  perform 
these tasks are treated as suspicious. As presented in the literature 