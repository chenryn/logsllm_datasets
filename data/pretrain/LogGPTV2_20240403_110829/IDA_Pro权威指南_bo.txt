//that we are not supplying an output buffer.  
len = n.supstr(1001, NULL, 0);  
char *outstr = new char[len];  //allocate a buffer of sufficient size  
n.supval(1001, outstr, len);   //extract data from the supval  
//retrieve a supval from array 200, index 500  
char buf[1024];  
len = n.supval(500, buf, sizeof(buf), (char)200);
使用supval ，你可以访问存储在一个网络节点中的任何数组中的任何数据。例如，通过将supset 和supval 操作限制到 altval 的大小，你可以使用 supval 函数存储和检索 altval 数据。浏览netnode.hpp 文件，观察 altset
 函数的内联实现（如下所示），你会发现事实确实如此：
bool altset(sval_t alt, nodeidx_t value, char tag=atag) {  
   return supset(alt, &value, sizeof(value), tag);  
}
hashval提供了另一种访问网络节点的接口。除了与整数索引有关外，hashval还与密钥字符串有关。使用 hashset
 函数的重载版本，可以轻易地将整数数据或数组数据与一个散列密钥关联起来。如果提供合适的散列密钥，hashval、hashstr
 和hashval_long
 函数可用于检索 hashval。与hashXXX
 函数有关的标签值实际上选择的是 256 个散列表中的一个，默认散列表为'H'
 。指定 'H'
 以外的标签，可以选择供替代的散列表。
我们提到的最后一个访问网络节点的接口为 charval 接口。charval
 和charset
 函数提供了一种简单的方法，可以在网络节点数组中存储单字节数据。由于不存在与 charval 存储和检索有关的默认数组，因此，你必须为每一个 charval 操作指定一个数组标签。charval 存储在与altval 和supval 相同的数组中，charval 函数不过是 1 字节supval 的包装器而已。
netnode
 类提供的另一项功能是它能够遍历网络节点数组（或散列表）的内容。遍历通过对altval、supval 、hashval和charval 有效的XXX1st
 、XXXnst
 、XXXlast
 和XXXprev
 函数执行。代码清单16-5 中的例子说明了如何遍历默认的 altval数组（'A'
 ）。
代码清单 16-5 枚举网络节点 altval
netnode n("$ idabook", 0, true);  
//Iterate altvals first to last  
for (nodeidx_t idx = n.alt1st(); idx != BADNODE; idx = n.altnxt(idx)) {  
   ulong val = n.altval(idx);  
   msg("Found altval['A'][%d] = %d\n", idx, val);  
}  
//Iterate altvals last to first  
for (nodeidx_t idx = n.altlast(); idx != BADNODE; idx = n.altprev(idx)) {  
   ulong val = n.altval(idx);  
   msg("Found altval['A'][%d] = %d\n", idx, val);  
}
遍历supval 、hashval和charval 的方法与遍历 altval 的方法非常类似，但是，你会发现，所使用的语法因被访问的值的类型而异。例如，遍历 hashval将返回散列密钥而非数组索引，然后再用得到的密钥检索 hashval。
网络节点与 IDC 全局数组
你可能记得，我们在第 15 章提到，IDC 脚本语言提供永久全局数组。网络节点为 IDC 全局数组提供备份存储。在你为 IDC CreateArray
 函数提供名称时，字符串$ idc_array
 将被附加到这个名称前面，构成一个网络节点名称。随后，新建网络节点的 netnodenumber
 将作为IDC数组标识符返回。IDC SetArrayLong
 函数将一个整数存储到 altval（'A'
 ）数组中，而SetArrayString
 函数将一个字符串存储到 supval （'S'
 ）数组中。当你使用 GetArrayElement
 函数从IDC 数组中检索一个值时，你提供的标签（AR_LONG
 或AR_STR
 ）代表altval和supval 数组用于存储对应的整数或字符串数据的标签。
附录B 提供了一些额外的信息，说明如何在执行 IDC 函数的过程中使用网络节点，以及如何使用网络节点在数据库中存储各种信息（如注释）。
3. 删除网络节点及其数据
netnode
 类还提供用于删除各数组元素、全部数组内容或全部网络节点内容的函数。删除整个网络节点的过程相当简单。
netnode n("$ idabook", 0, true);  
n.kill();                        //entire contents of n are deleted
在删除各数组元素或全部数组内容时，你必须选择适当的删除函数，因为这些函数的名称非常相似。如果选择了错误的函数，可能会导致大量数据丢失。下面带有注释的例子说明了如何删除altval：
  netnode n("$ idabook", 0, true);  
➋  n.altdel(100);       //delete item 100 from the default altval array ('A')  
  n.altdel(100, (char)3); //delete item 100 from altval array 3  
➊  n.altdel();          //delete the entire contents of the default altval array  
  n.altdel_all('A');      //alternative to delete default altval array contents  
  n.altdel_all((char)3);  //delete the entire contents of altval array 3;
请注意，删除默认 altval数组全部内容（➊）所使用的语法，与删除默认 altval数组中一个元素（➋）所使用的语法非常相似。如果在删除一个数组元素时，因为某种原因你没有指定一个索引，那么，最终你可能会删除整个数组。删除 supval 、charval 和hashval 数据的函数也与之类似。
16.2.3 有用的SDK数据类型
IDA 的API 定义了许多C++ 类，专门模拟可执行文件中的各个组件。SDK中包含大量类，用于描述函数、程序节、数据结构、各汇编语言指令以及每条指令中的各操作数。SDK还定义了其他类，以实现IDA 用于管理反汇编过程的工具。后一种类型的类定义数据库的一般特点、加载器模块的特点、处理器模块的特点和插件模块的特点以及每条反汇编指令所使用的汇编语法。
下面介绍了一些较为常见的通用类。在后面几章中，我们将讨论特定于插件、加载器和处理器模块的类。本节主要介绍一些类、它们的作用以及每个类中一些重要的数据成员。操纵每个类所使用的函数将在 16.2.4 节中介绍。
area_t
 （area.hpp）
 。这个结构体描述一系列地址，并且是其他几个类的基类。该结构体包含两个数据成员：startEA
 （包括）和endEA
 （不包括），它们定义地址范围的边界。该结构体还定义了一些成员函数，以计算地址范围的大小。这些函数还可以对两个区域进行比较。
func_t
 （func.hpp ）
 。这个类从 area_t
 继承而来，其中添加了其他一些数据字段以记录函数的二进制属性，如函数是否使用帧指针，还记录了描述函数的局部变量和参数的属性。为了进行优化，一些编译器可能会将函数分割成一个二进制文件中的几个互不相邻的区域。IDA 把这些区域叫做块
 （chuck ）或 尾
 （tail ）。func_t
 类也用于描述尾块（tail chunk ）。
segment_t
 （segment.hpp）
 。 segment_t
 类是area_t
 的另一个子类，其中添加了一些数据字段，以描述段的名称、段中可用的权限（可读、可写、可执行）、段的类型（代码、数据等）、一个段地址所使用的位数（16 、32 或64 位）。
idc_value_t
 （expr.hpp ）
 。这个类描述一个IDC 值的内容，任何时候它都可能包含一个字符串、一个整数或一个浮点值。当与一个已编译模块中的IDC 函数交互时，其类型被大量使用。
idainfo
 （ida.hpp ）
 。这个结构体用于描述开放数据库的特点。ida.hpp文件声明了唯一一个名为inf
 的idainfo
 全局变量。这个结构体中的字段描述所使用的处理器模块的名称、输入文件类型（如通过filetype_t
 枚举得到的f_PE
 或f_MACHO
 ）、程序进入点（ beingEA
 ）、二进制文件中的最小地址（minEA
 ）、二进制文件中的最大地址（maxEA
 ）、当前处理器的字节顺序（mf
 ）以及通过解析ida.cfg
 得到的许多配置设置。
struc_t
 （struct.hpp ）
 。这个类描述反汇编代码清单中结构化数据的布局。它用于描述.Structures 窗口中的结构体以及函数栈帧的构成。struc_t
 中包含描述结构体属性（如它是结构体还是联合，该结构体在IDA 显示窗口中处于折叠还是打开状态）的标志，其中还包括一个结构体成员数组。
member_t
 （struct.hpp ）
 。这个类描述唯一一个结构化数据类型成员，其中的数据字段描述该成员在它的父结构体中的起始和结束位置的字节偏移量。
op_t
 （ua.hpp ）
 。这个类描述经过反汇编的指令中的一个操作数。这个类包含一个以零为基数的字段，用于存储操作数数量（n
 ）、一个操作数类型字段（type
 ）以及其他许多字段，它们的作用因操作数的类型而异。type
 字段被设定为在ua.hpp 文件中定义的一个optype_t
 常量，用于描述操作数类型或操作数使用的寻址模式。
insn_t
 （ua.hpp ）
 。这个类中包含描述一条经过反汇编的指令的信息。这个类中的字段描述该指令在反汇编代码清单中的地址（ea
 ）、该指令的类型（ itype
 ）、该指令的字节长度（size
 ）、一个可能由6个op_t
 类型的操作数数值（Operand
 ）构成的数组（IDA 限制每条指令最多使用6个操作数）。itype
 字段由处理器模块设置。对于标准的IDA 处理器模块，itype
 字段被设定为在allins.hpp 文件中定义的一个枚举常量。如果使用第三方处理器模块，则必须从模块开发者那里获得潜在itype
 值的列表。需要注意的是，itype
 字段通常与该指令的二进制操作码无关。
上面并没有列出 SDK 所使用的全部数据类型，它仅仅介绍了一些较为常用的类，以及这些类中的一些较为常用的字段。
16.2.4 常用的SDK函数
虽然SDK使用C++ 编程，并定义了大量C++ 类，但在许多时候，SDK更倾向于使用C风格的非成员函数来操纵数据库中的对象。对于多数API 数据类型，SDK常常使用非成员函数（它们需要一个指向某个对象的指针）而不是以你期望的方式操纵对象的成员函数来处理它们。
在下面的总结中，我们将介绍许多 API 函数，它们提供的功能与第 15 章中讨论的许多 IDC函数的功能类似。可惜，在 IDC 和API 中，执行相同任务的函数的名称并不相同。
1. 基本数据库访问
下面的函数由 bytes.hpp 文件声明，使用它们可以访问数据库中的各个字节、字和双字。
uchar get_byte(ea_t addr)
 ，读取虚拟地址addr
 处的当前字节值。