//解法一BFS
packageleetcode
2
意
return:3
oank:
end:
start:
return:2
oank:
end:
start: "AACCGGTT"
for len(que) > 0 {
wordMap, que, depth := getwordMap(bank, start), []string{start}, 0
题。这一题比他们都要简单。有 2种解法，BFS 和 DFS。具体思路可以见第127 题的题解。
变换成 end 字符串。每次变换必须使用 bank 字符串数组中的值。
所有的目标基因序列必须是合法的。
这一题完全就是第127题的翻版题，解题思路和代码 99% 是一样的。相似的题目也包括第126
for i := O; i  0 
if val == 3 
return true
return false
if check(k  start) {
 return v
case 'T':
case 'G':
case 'c':
switch c {
>=
if val&3 != 0 {
vl=3
l= 2
vl=1
return false
return true
if next != -1 { 
next := dfsMutation(k, m, step)
if c == -1 ll c> next {
c = next + 1
~
m{
M
---
## Page 511
 get new method signature.
 Note: input types have been changed on April 15, 2019. Please reset to default code definition to 
Example 3:
Example 2:
Example 1: 
Note:
 make the rest of the intervals non-overlapping.
Given a collection of intervals, find the minimum number of intervals you need to remove to 
题目
435. Non-overlapping Intervals
Explanation: You don't need to remove any of the intervals since they're
Input: [[1,2], [1,2], [1,2] ］ 
 2. Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
1. You may assume the interval's end point is always bigger than its start point.
already non-overlapping. 
Output: 0 
Input:[[1,2]，[2,3] ]
overlapping.
Explanation: You need to remove two [1,2] to make the rest of intervals non-
Output: 2
overlapping.
Explanation: 
output: 1
Input: [[1,2], [2,3], [3,4], [1,3] ]
return v
 [1,3] can be removed and the rest of intervals are non-
---
## Page 512
代码
解题思路
注意：
给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。
题目大意
·给定一组区间，问最少删除多少个区间，可以让这些区间之间互相不重叠。注意，给定区间的起始
1．可以认为区间的终点总是大于它的起点。
func eraseoverlapIntervals(intervals [][]int) int 
//解法一DPO(n^2）思路是仿造最长上升子序列的思路
package leetcode
●
2i
if len(intervals) == 0 {
"sort"
mport 
，区间[1,2] 和[2,3] 的边界相互"接触"，但没有相互重叠。
for i := range dp { 
dp, res := make([]int, len(intervals)), 0 
sort.Sort(Intervals(intervals))
区间。这种做法是贪心算法的思想。
区间。选取结尾最早的，就可以给后面留出更大的空间，供后面的区间选择。这样可以保留更多的
这道题另外一种做法是按照区间的结尾进行排序，每次选择结尾最早的，且和前一个区间不重叠的
这一题一种做法是利用动态规划，模仿最长上升子序列的思想，来解题。
先排序，判断区间是否重叠。
这一题可以反过来考虑，给定一组区间，问最多保留多少区间，可以让这些区间之间相互不重叠。
点永远小于终止点。[1,2] 和[2,3] 不叫重叠。
for i := l; i = intervals[j][1]{
 dp[i]= max(dp[i]，l+dp[j]]
---
## Page 513
func eraseoverlapIntervalsl(intervals [][]int) int 
//解法二贪心0(n)
func (a Intervals) Less(i，j int) bool
func (a Intervals) swap(i,j int) {
func (a Intervals) Len() int {
type Intervals [][]int
// Intervals define
 a[i], a[j] = a[j]， a[i] 
if len(intervals) == 0 { 
 return len(a)
return len(intervals) - res
for i := l; i = intervals[pre][1] {
 return o
res = max(res, v) 
} else if a[i][k] == a[j][k] {
if a[i][k]= target {
mid := low + ((high - low) >> 1)
res = append(res, tmp)
if tmp >0{ 
tmp := searchFirstGreaterInterval(intervalsList, v[1])
intervalmap[Interval{Start: v[o]， End: v[i]}] = k 
intervalsList = append(intervalsList, Interval{Start: v[O], End: v[1]})
if（mid ==0）ll（nums[mid-1].start 11
return -1
一个点是否为 sum 的起点，有 3 种情况，第一种情况路径包含该root 节点，如果包含该结点,
人
-2
5
5 -> 3
2
10
L
，它的每个结点都存放着一个整数值。找出路径和等于给定数值的路径总数。路径不需
---
## Page 518
's u! sweleue s,d jo saspu! yeis aun lle puy 'd Bus Ardwa-uou e pue s Buas e uan!
题目
438. Find All Anagrams in a String
代码
func findPath437(root *TreeNode, sum int) int {
//寻找包含 root 这个结点，且和为sum 的路径 
func pathSumIII(root *TreeNode, sum int) int {
package leetcode
* type TreeNode struct {
if root == nil { 
if root == nil {
return res 
res += findPath437(root.Right, sum-root.Val)
res += findPath437(root.Left, sum-root.Val)
res := 0 
return res 
res += pathsumIII(root.Right, sum)
res += pathsumIII(root.Left, sum)
res := findPath437(root, sum)
 Definition for a binary tree node.
点，那么就需要在它的左子树和右子树中分别寻找和为 sum 的结点。
 res++
 return 0
return 0
Right *TreeNode
Left *TreeNode
Val int
---
## Page 519
合规范的元素以后，才可能出现 count =O的情况，即找到 Anagrams 的情况。
候，count 无法减少到O，区间右移动的时候，左边界又会开始 count ++，只有当左边界移出了这些不
count 初始值是 len(p)，当每个元素都符合规范的时候，右边界和左边界相差len(p)的时候，count 也
候，需要判断每个元素是否都用过一遍了。具体做法是每经过一个符合规范的元素，count 就 --，
滑动窗口右边界往右滑动的时候，划过去的元素消耗次数(即次数 --)。右边界和左边界相差 len(p)的时
录每个字符的出现的频次次数。滑动窗口左边界往右滑动的时候，划过去的元素释放次数(即次数++),
这道题是一道考"滑动窗口"的题目。和第 3题，第76 题，第 567题类似的。解法也是用 freq[256] 记
解题思路
串的起始索引。Anagrams 的意思是和一个字符串的所有字符都一样，只是排列组合不同。
给定一个字符串 s 和一个非空字符串 p，找出 s 中的所有是 p 的 Anagrams 字符串的子串，返回这些子