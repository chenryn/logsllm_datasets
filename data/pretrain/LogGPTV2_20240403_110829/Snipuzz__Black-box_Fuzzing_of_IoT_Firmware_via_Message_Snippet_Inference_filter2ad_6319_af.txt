The results of their experiment show that IoTFuzzer triggered
a vulnerability in the device by mutating the data domain in a
message (changing “light” to 0).
However, in the updated version of the firmware (version 1.5.2),
IoTFuzzer did not find any vulnerabilities. Figure 6 shows an ex-
ample of the original input message and the mutated snippets in
a message that can trigger the vulnerability. In this case, Snipuzz
triggered a vulnerability related to firmware input by breaking
the JSON syntax structure in the message. The intention of the
original message is to change some attributes (e.g., “stime_opt”
and “wday”) in a rule (inferred by “edit_rule”). In the mutated
message, Snipuzz randomly deleted some contents (inside the red
frame), which break the JSON syntax. This may cause errors about
parsing messages or passing parameters incorrectly handled by the
firmware and, consequently, crashes the device.
Figure 7: A vulnerable code snippet from HS110 firmware.
To further determine the root cause of the crash, we obtained
the firmware source code. Figure 7 shows a code snippet from the
firmware, using cJSON,3 a popular open-source lightweight JSON
parser (5.4k stars in GitHub), to interpret input message fragments.
The jalr instruction will save the result of cJson_GetObjectItem
in $t9 and jump to this address unconditionally (see line 3 in Fig-
ure 7), which means the firmware will pick the value corresponding
to “schedule”. In the original message, the value corresponding to
“schedule” is a JSON object headed by “edit_rule” (from line 4 to
line 16 in Figure 6). Note that the aforementioned snippet-based
mutation strategy implemented in Snipuzz is able to break the syn-
tax structure and mutate on data and non-data domains at the same
time. Interestingly, although the removing of two left curly braces
breaks the JSON syntax, it is not recognized by cJSON parser, so
the mutated message successfully bypasses the syntax validation
and enters the functional code in firmware. When the firmware
tries to access the successor JSON object in “schedule”, i.e., the
object starts with “edit_rule”, since the corresponding value is
no more a JSON object, but an array, a null pointer exception is
triggered.
Due to the design of IoTFuzzer, the fuzzing based on grammati-
cal rules will offer priority to satisfying the grammar requirements
in the mutation process in order not to be rejected by the firmware
grammar detector. The advantage of this is to ensure that each test
case can reach the functional execution part of the firmware. How-
ever, in this case, the test range of fuzzing based on grammatical
rules cannot cover the firmware sanitising part.
To conclude, the root cause of the crash has two factors: 1) the
validation of message syntax heavily relies on a third-party library;
2) the firmware does not correctly handle the null pointer exception
caused by data type mismatch. Although it is not reasonable to
require a vendor to develop products purely from scratch, we argue
that thorough testing and validation on the open-source library
are essential. Considering the complexity of IoT firmware testing,
a lightweight and effective black-box vulnerability detection tool,
such as Snipuzz, is a pressing need.
6 DISCUSSION AND LIMITATIONS
Snipuzz has successfully examined 20 different devices and exposed
security vulnerabilities on five of them. However, there are still
some factors limit the efficiency and scalability of Snipuzz.
Scalability and manual effort. In our prototype, we capture com-
munication packets through API programs and monitoring network
communication. Even in the absence of API programs or documents,
the message formats can be determined from the official Apps of
IoT devices through decompilation and taint analysis. Otherwise,
we can solve this problem by intercepting the communication be-
tween APPs and IoT devices, and then recovering message formats
3https://github.com/DaveGamble/cJSON
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea348from the captured packets. However, both methods could introduce
overhead and involve manual effort. Recall that Snipuzz requires 5
man-hours per device to collect the initial seeds (Section 4.1. The
manual efforts mainly focus on cleaning the packets from the API
programs that are obtained from publicly available first- and third-
party resources. To mitigate, when applying Snipuzz to IoT devices,
techniques such as crawlers could be used to automatically gather
API programs. Moreover, the process of cleaning the packets could
also be improved by pre-processing keywords through scripts to
achieve automatic collection of communication packages.
Threats to validity. As Snipuzz collects initial message sequences
via API programs and network sniffers, the first threat comes from
the absence of API programs. In this case, we can recover mes-
sage formats based on the companion apps of IoT devices (similar
to IoTFuzzer), but may lead to more manual efforts. Second, the
encryption in messages decreases the effectiveness of snippet deter-
mination because the semantic information could be corrupted. A
potential solution to the encryption issue is to integrate decryption
modules into Snipuzz. Finally, the code coverage of firmware could
be subject to the accessibility of API programs, since Snipuzz can
only examine the functionalities that are covered in API programs.
Recombining the message snippets from different seeds to generate
new valid inputs could mitigate this limitation.
Code coverage. The code coverage of firmware explored by Snipuzz
depends on the API programs. For example, if the API programs
of a bulb only support the functionality of turning on power, it
is almost impossible to explore the functionality of adjusting the
brightness via mutating the messages captured during the power
turned on. In the future work, without the support of grammar, we
will consider recombining the message snippets to try to generate
new valid inputs. This method can help explore more firmware
execution coverage in addition to the original inputs provided.
Requirements on detailed responses. The detection effective-
ness of Snipuzz depends on the quality of message snippets which
is contingent on how much information could be obtained from
the responses of IoT devices. To put differently, if the IoT device
does not provide responses that are detailed enough, for example
reporting all the errors with a uniform message, it could be hard for
Snipuzz to determine the message snippets. Fortunately, in many
IoT devices, advanced error descriptions could be obtained in debug
mode which will significantly improve the determination process
of message snippets in Snipuzz.
7 RELATED WORK
Our Snipuzz performs in a black-box manner for detecting vulner-
abilities in IoT devices. Unlike existing black-box fuzzing for IoT
devices, which blindly mutates messages, Snipuzz optimizes the
mutation process of black-box fuzzing via utilizing responses. This
feedback mechanism improves the effectiveness of bug discovery.
For instance, IoTFuzzer [9] obtains the data domain, on which
IoTFuzzer performs blind mutation. Thus, IoTFuzzer lacks the
knowledge of the quality of the generated inputs, resulting in a
waste of resource on the low-quality inputs. There are also several
dynamic analysis approaches focusing on the networking modules
of IoT devices. For example, SPFuzz defines a new language for
describing protocol specifications, protocol state transitions, and
their correlations [37]. SPFuzz can ensure the correctness of the
message format in the conversation state and the dependence of
the protocol. IoTHunter is a grey-box approach to fuzz the state
protocol of IoT firmware [47]. IoTHunter can constantly switch
the protocol state to perform a feedback-based exploration of IoT
devices. In a recent example, AFLnet acts as a client and continu-
ously replays the variation of the original message sequence sent
to target (i.e., server or device) [33]. AFLnet uses response codes,
which are the numbers indicating the execution states, to identify
the execution status of targets and explore more regions of their
networking modules.
Another research line for dynamic analysis of IoT devices is the
usage of emulators. The disadvantages of emulation are the heavy
engineering efforts and the requisite of firmware, although the emu-
lation of IoT firmware can analyze more thoroughly than black-box
fuzzing. Two major challenges for emulation of IoT firmware are the
scalability and throughput. Therefore, the efforts in improving the
performance of emulation include full-system emulation [8, 27], im-
provement of emulation success rates [21], hardware-independent
emulation [17, 38], and combination of user- and system-mode em-
ulation [51]. Based on the emulation, fuzzing can be integrated into
those frameworks and can hunter defects in firmware [38, 51].
Static analysis of firmware is the complementary approach of dy-
namic analysis. Semantic similarity is one of the major techniques
that make static analysis successful. Researchers analyze seman-
tic similarity via comparison of files and modules [13], Control
Flow Graphs (CFGs) [14], parser and complex processing logic [11],
and multi-binary interactions [35]. There are also many similarity-
based approaches that can detect vulnerabilities across different
firmware architectures. They usually extract various architecture-
independent features from firmware for each node in a CFG to
represent a function, and then check whether two functions’ CFG
representations are similar [15, 32].
8 CONCLUSION
In this paper we have presented a black-box fuzzing framework
Snipuzz designed for detecting vulnerabilities hiding in IoT de-
vices. Different from other black-box network fuzz testing, Snipuzz
uses the response messages returned by the device to establish a
feedback mechanism for guiding the fuzzing mutation process. In
addition, Snipuzz infers the grammatical role of each byte in the
messages based on the responses from the device, so that Snipuzz
can generate test cases that meet the device’s grammar without the
guidance of grammatical rules. We have used 20 consumer-grade
IoT devices from the market to test Snipuzz, and it has successfully
found 5 zero-day vulnerabilities on 5 different devices.
ACKNOWLEDGEMENTS
We thank all the anonymous reviewers for their valuable feedback.
Minhui Xue was, in part, supported by the Australian Research
Council (ARC) Discovery Project (DP210102670) and the Research
Center for Cyber Security at Tel Aviv University established by the
State of Israel, the Prime Minister’s Office and Tel Aviv University.
In addition, this research is partially supported by the Australian
Research Council projects DP200100886 and LP180100170.
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea349REFERENCES
[1] 2020. The Three Software Stacks Required for IoT Architectures. IoT Eclipse
(White Paper) (2020).
[2] Cornelius Aschermann, Tommaso Frassetto, Thorsten Holz, Patrick Jauernig,
Ahmad-Reza Sadeghi, and Daniel Teuchert. 2019. NAUTILUS: Fishing for deep
bugs with grammars.. In The Network and Distributed System Security Symposium
(NDSS).
[3] I. Ashraf, X. Ma, B. Jiang, and W. K. Chan. 2020. GasFuzzer: Fuzzing ethereum
smart contract binaries to expose gas-oriented exception security vulnerabilities.
IEEE Access (2020).
[4] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoudhury.
2017. Directed greybox fuzzing. In Proceedings of the 2017 ACM SIGSAC Conference
on Computer and Communications Security.
[5] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. 2016. Coverage-
based greybox fuzzing as markov chain. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security.
[6] Kali Bot. 2019. bed. https://gitlab.com/kalilinux/packages/bed.
[7] Z. Berkay Celik, Patrick McDaniel, and Gang Tan. 2018. Soteria: Automated
IoT safety and security analysis. In 2018 USENIX Annual Technical Conference
(USENIX ATC 18).
[8] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. 2016. Towards
automated dynamic analysis for Linux-based embedded firmware. In The Network
and Distributed System Security Symposium (NDSS).
[9] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin,
XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan
Zhang. 2018. IOTFUZZER: Discovering memory corruptions in IoT through
app-based fuzzing. In The Network and Distributed System Security Symposium
(NDSS).
[10] Abraham Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David
Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer.
2020. HALucinator: Firmware re-hosting through abstraction layer emulation.
In Proceedings of the 29th USENIX Security Symposium (USENIX ’20).
[11] Lucian Cojocar, Jonas Zaddach, Roel Verdult, Herbert Bos, Aurélien Francillon,
and Davide Balzarotti. 2015. PIE: Parser identification in embedded systems.
[12] Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili, Shuang
Hao, Christopher Kruegel, and Giovanni Vigna. 2017. Difuze: Interface aware
fuzzing for kernel drivers. In Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security.
[13] Andrei Costin, Jonas Zaddach, Aurélien Francillon, and Davide Balzarotti. 2014.
A Large-Scale Analysis of the Security of Embedded Firmwares. In 23rd USENIX
Security Symposium (USENIX Security 14).
[14] Thomas Dullien and Rolf Rolles. 2005. Graph-based comparison of executable
objects (english version). Journal of Computer Virology and Hacking Techniques
(2005).
[15] Sebastian Eschweiler, Khaled Yakdan, and Elmar Gerhards-Padilla. 2016. discovRE:
Efficient cross-architecture identification of bugs in binary code. In Network and
Distributed Systems Security (NDSS).
[16] Pwnie Express. 2020. What makes IoT so vulnerable to attack? Technical Report.
[17] Bo Feng, Alejandro Mera, and Long Lu. 2020. P2IM: Scalable and hardware-
independent firmware testing via automatic peripheral interface modeling. In
29th {USENIX} Security Symposium ({USENIX} Security 20).
[18] Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa, and Heng
Yin. 2016. Scalable graph-based bug search for firmware images. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications Security.
[19] Fitblip. 2019. Sulley. https://github.com/OpenRCE/sulley.
[20] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry,
Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon, Yung Ryn Choe,
Christophe Kruegel, et al. 2019. Toward the analysis of embedded firmware
through automated re-hosting. In 22nd International Symposium on Research in
Attacks, Intrusions and Defenses ({RAID} 2019).
[21] Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang, and
Yongdae Kim. 2020. FirmAE: Towards large-scale emulation of IoT firmware for
dynamic analysis. In Annual Computer Security Applications Conference.
[22] Stephan Kleber, Henning Kopp, and Frank Kargl. 2018. NEMESYS: Network
message syntax reverse engineering by analysis of the intrinsic structure of indi-
vidual messages. In 12th {USENIX} Workshop on Offensive Technologies ({WOOT}
18).
[23] Karla Lant. 2017. By 2020, there will be 4 devices for every human on earth.
Outpost24.
Futurism (2017).
[24] lcamtuf. 2017. AFL. https://lcamtuf.coredump.cx/afl/.
[25] Trend Micro. 2020. Mirai botnet exploit weaponized to attack IoT devices via
CVE-2020-5902. Technical Report. Security Intelligence Blog.
[26] Trend Micro. 2020. Smart yet flawed: IoT device vulnerabilities explained. Technical
Report. Security News.
[27] Marius Muench, Jan Stijohann, Frank Kargl, Aurélien Francillon, and Davide
Balzarotti. 2018. What you corrupt is not what you crash: Challenges in fuzzing
embedded devices. In NDSS 2018, Network and Distributed Systems Security Sym-
posium.
[28] Lindsey O’Donnell. 2020. More than half of IoT devices vulnerable to severe attacks.
Technical Report. ThreatPost.
[29] Sebastian Österlund, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2020.
ParmeSan: Sanitizer-guided greybox fuzzing. In 29th USENIX Security Symposium
(USENIX Security 20).
[30] Peachtech. 2021. PEACH: The PEACH fuzzer platform. https://www.peach.tech/
products/peach-fuzzer/ Accessed: 2021-01.
[31] Joshua Pereyda. 2017. boofuzz: Network protocol fuzzing for humans. https:
//boofuzz.readthedocs.io/en/stable/.
[32] Jannik Pewny, Behrad Garmany, Robert Gawlik, Christian Rossow, and Thorsten
Holz. 2015. Cross-architecture bug search in binary executables. In 2015 IEEE
Symposium on Security and Privacy (SP).
[33] Van-Thuan Pham, Marcel Böhme, and Abhik Roychoudhury. 2020. AFLNET:
A greybox fuzzer for network protocols. In IEEE International Conference on
Software Testing, Verification and Validation (ICST) 2020.
[34] Van-Thuan Pham, Marcel Böhme, Andrew Edward Santosa, Alexandru Razvan
Caciulescu, and Abhik Roychoudhury. 2019. Smart greybox fuzzing. IEEE Trans-
actions on Software Engineering (2019).
[35] Nilo Redini, Aravind Machiry, Ruoyu Wang, Chad Spensky, Andrea Continella,
Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2020. Karonte:
Detecting insecure multi-binary interactions in embedded firmware. In 2020 IEEE
Symposium on Security and Privacy (SP).
[36] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. kAFL: Hardware-assisted feedback fuzzing for OS Kernels.
In 26th USENIX Security Symposium (USENIX Security 17).
[37] Congxi Song, Bo Yu, Xu Zhou, and Qiang Yang. 2019. SPFuzz: a hierarchical
scheduling framework for stateful network protocol fuzzing. IEEE Access (2019).
[38] Prashast Srivastava, Hui Peng, Jiahao Li, Hamed Okhravi, Howard Shrobe, and
Mathias Payer. 2019. FirmFuzz: automated IoT firmware introspection and analy-
sis. In Proceedings of the 2nd International ACM Workshop on Security and Privacy
for the Internet-of-Things.
[39] Liam Tung. 2017. IoT devices will outnumber the world’s population this year for
the first time. Technical Report. ZDNet.
[40] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. 2017. Skyfire: Data-driven
seed generation for fuzzing. In 2017 IEEE Symposium on Security and Privacy
(SP).
[41] Yanhao Wang, Xiangkun Jia, Yuwei Liu, Kyle Zeng, Tiffany Bao, Dinghao Wu, and
Purui Su. 2020. Not all coverage measurements are equal: Fuzzing by coverage
accounting for input prioritization. In The Network and Distributed System Security
Symposium (NDSS).
[42] Wikipedia. 2021. Edit distance. https://en.wikipedia.org/wiki/Edit_distance.
[43] Wikipedia. 2021. Hierarchical clustering.
https://en.wikipedia.org/wiki/
Hierarchical_clustering.
[44] wireghoul. 2019. Doona. https://github.com/wireghoul/doona.
[45] wireshark. 2020. About wireshark. https://www.wireshark.org/about.html.
[46] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. 2017.
Neural network-based graph embedding for cross-platform binary code similarity
detection. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security.
[47] Bo Yu, Pengfei Wang, Tai Yue, and Yong Tang. 2019. Poster: Fuzzing iot firmware
via multi-stage message generation. In Proceedings of the 2019 ACM SIGSAC
Conference on Computer and Communications Security.
[48] Y. Yu, Z. Chen, S. Gan, and X. Wang. 2020. SGPFuzzer: A state-driven smart
IEEE Access
graybox protocol fuzzer for network protocol implementations.
(2020).
[49] Tai Yue, Pengfei Wang, Yong Tang, Enze Wang, Bo Yu, Kai Lu, and Xu Zhou. 2020.
EcoFuzz: Adaptive energy-saving greybox fuzzing as a variant of the adversarial
multi-armed bandit. In 29th USENIX Security Symposium (USENIX Security 20).
[50] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti, et al. 2014.
AVATAR: A framework to support dynamic security analysis of embedded sys-
tems’ firmwares. In The Network and Distributed System Security Symposium
(NDSS).
[51] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong Zhu, and
Limin Sun. 2019. FIRM-AFL: High-throughput greybox fuzzing of IoT firmware
via augmented process emulation. In 28th USENIX Security Symposium (USENIX
Security 19).
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea350