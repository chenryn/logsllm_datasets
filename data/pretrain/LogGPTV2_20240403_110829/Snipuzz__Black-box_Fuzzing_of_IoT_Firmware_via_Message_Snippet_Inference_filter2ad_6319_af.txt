### Experimental Results and Vulnerability Analysis

The experimental results demonstrate that IoTFuzzer was able to trigger a vulnerability in the device by mutating the data domain in a message, specifically by changing "light" to 0. However, in the updated firmware version (1.5.2), IoTFuzzer did not detect any vulnerabilities. Figure 6 illustrates an example of the original input message and the mutated snippets that can trigger the vulnerability.

In this case, Snipuzz triggered a vulnerability related to firmware input by disrupting the JSON syntax structure in the message. The original message's intent was to modify certain attributes, such as "stime_opt" and "wday," within a rule (inferred by "edit_rule"). In the mutated message, Snipuzz randomly deleted some content (highlighted in the red frame), which broke the JSON syntax. This disruption could cause parsing errors or incorrect parameter handling by the firmware, leading to a device crash.

### Code Snippet Analysis

To further investigate the root cause of the crash, we obtained the firmware source code. Figure 7 presents a code snippet from the HS110 firmware, which uses cJSON, a popular open-source lightweight JSON parser (with 5.4k stars on GitHub), to interpret input message fragments. The `jalr` instruction saves the result of `cJson_GetObjectItem` in `$t9` and jumps to this address unconditionally (line 3 in Figure 7). This means the firmware will retrieve the value corresponding to "schedule."

In the original message, the value for "schedule" is a JSON object starting with "edit_rule" (lines 4 to 16 in Figure 6). The mutation strategy implemented in Snipuzz can break the syntax structure and mutate both data and non-data domains simultaneously. Interestingly, even though the removal of two left curly braces breaks the JSON syntax, it is not detected by the cJSON parser. As a result, the mutated message bypasses the syntax validation and enters the functional code in the firmware. When the firmware attempts to access the subsequent JSON object in "schedule," it encounters a null pointer exception because the expected JSON object is now an array.

### IoTFuzzer Design and Limitations

IoTFuzzer is designed to prioritize satisfying grammatical requirements during the mutation process to avoid rejection by the firmware's grammar detector. This ensures that each test case reaches the functional execution part of the firmware. However, in this scenario, the fuzzing based on grammatical rules does not cover the firmware sanitization part.

### Root Cause and Recommendations

The root cause of the crash has two main factors:
1. **Third-Party Library Dependence**: The firmware heavily relies on a third-party library (cJSON) for message syntax validation.
2. **Null Pointer Exception Handling**: The firmware does not handle null pointer exceptions caused by data type mismatches correctly.

While it is impractical to expect vendors to develop products entirely from scratch, thorough testing and validation of open-source libraries are essential. Given the complexity of IoT firmware testing, a lightweight and effective black-box vulnerability detection tool like Snipuzz is crucial.

### Discussion and Limitations

Snipuzz has successfully examined 20 different devices and identified security vulnerabilities in five of them. However, several factors limit its efficiency and scalability:

#### Scalability and Manual Effort
In our prototype, we capture communication packets through API programs and network monitoring. Even without API programs or documentation, message formats can be determined from the official apps of IoT devices through decompilation and taint analysis. Alternatively, we can intercept the communication between apps and IoT devices to recover message formats from captured packets. Both methods introduce overhead and require manual effort. Snipuzz requires approximately 5 man-hours per device to collect initial seeds. To mitigate this, techniques such as crawlers could be used to automatically gather API programs, and pre-processing scripts could automate the packet cleaning process.

#### Threats to Validity
Snipuzz collects initial message sequences via API programs and network sniffers. The first threat is the absence of API programs, which can be mitigated by recovering message formats from companion apps, but this may increase manual efforts. Encryption in messages also decreases the effectiveness of snippet determination. Integrating decryption modules into Snipuzz could address this issue. Finally, the code coverage of firmware depends on the accessibility of API programs, as Snipuzz can only examine functionalities covered in these programs. Recombining message snippets from different seeds to generate new valid inputs could help mitigate this limitation.

#### Code Coverage
The code coverage explored by Snipuzz depends on the API programs. For example, if the API programs of a bulb only support turning on power, it is challenging to explore the functionality of adjusting brightness through message mutations. Future work will consider recombining message snippets to generate new valid inputs, thereby exploring more firmware execution coverage.

#### Requirements for Detailed Responses
The effectiveness of Snipuzz depends on the quality of message snippets, which is contingent on the information provided in the responses from IoT devices. If the device does not provide detailed responses, it can be difficult for Snipuzz to determine the message snippets. Fortunately, many IoT devices offer advanced error descriptions in debug mode, which significantly improves the snippet determination process.

### Related Work

Snipuzz operates as a black-box fuzzing tool for detecting vulnerabilities in IoT devices. Unlike existing black-box fuzzing tools that perform blind mutations, Snipuzz optimizes the mutation process by utilizing responses, improving bug discovery effectiveness. For instance, IoTFuzzer [9] performs blind mutations on the data domain, lacking knowledge about the quality of generated inputs, leading to resource waste on low-quality inputs. Other dynamic analysis approaches, such as SPFuzz [37], IoTHunter [47], and AFLnet [33], focus on protocol specifications, state transitions, and feedback-based exploration. Emulation-based approaches, while thorough, face challenges in scalability and throughput. Static analysis techniques, such as semantic similarity, are complementary and can detect vulnerabilities across different firmware architectures.

### Conclusion

In this paper, we presented Snipuzz, a black-box fuzzing framework designed to detect vulnerabilities in IoT devices. Snipuzz uses response messages to guide the fuzzing mutation process and infers the grammatical role of each byte in the messages, generating test cases that meet the device's grammar without explicit grammatical rules. We tested Snipuzz on 20 consumer-grade IoT devices and successfully found five zero-day vulnerabilities on five different devices.

### Acknowledgements

We thank all the anonymous reviewers for their valuable feedback. Minhui Xue was partially supported by the Australian Research Council (ARC) Discovery Project (DP210102670) and the Research Center for Cyber Security at Tel Aviv University. This research is also partially supported by the Australian Research Council projects DP200100886 and LP180100170.

### References

[References remain unchanged and are listed as provided in the original text.]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.