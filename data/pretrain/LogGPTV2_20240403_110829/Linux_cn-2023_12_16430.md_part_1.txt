---
author: Julia Evans
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 2361
date: '2023-12-01 00:41:12'
editorchoice: false
excerpt: 我不断从他人那里听说他们觉得 Git 分支的操作方式违反直觉。
fromurl: https://jvns.ca/blog/2023/11/23/branches-intuition-reality/
id: 16430
islctt: true
largepic: /data/attachment/album/202312/01/004025i72vi4t0o7027cyf.png
permalink: /article-16430-1.html
pic: /data/attachment/album/202312/01/004025i72vi4t0o7027cyf.png.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 我不断从他人那里听说他们觉得 Git 分支的操作方式违反直觉。
tags:
- Git
- 分支
thumb: false
title: Git 分支：直觉与现实
titlepic: true
translator: ChatGPT
updated: '2023-12-01 00:41:12'
---
![](/data/attachment/album/202312/01/004025i72vi4t0o7027cyf.png)
你好！我一直在投入写作一本关于 Git 的小册，因此我对 Git 分支投入了许多思考。我不断从他人那里听说他们觉得 Git 分支的操作方式违反直觉。这使我开始思考：直觉上的分支概念可能是什么样，以及它如何与 Git 的实际操作方式区别开来？
在这篇文章中，我想简洁地讨论以下几点内容：
* 我认为许多人可能有的一个直觉性的思维模型
* Git 如何在内部实现分支的表示（例如，“分支是对提交的指针”）
* 这种“直觉模型”与实际操作方式之间的紧密关联
* 直觉模型的某些局限性，以及为何它可能引发问题
本文无任何突破性内容，我会尽量保持简洁。
### 分支的直观模型
当然，人们对分支有许多不同的直觉。我自己认为最符合“苹果树的一个分支”这一物理比喻的可能是下面这个。
我猜想许多人可能会这样理解 Git 分支：在下图中，两个红色的提交就代表一个“分支”。
![](/data/attachment/album/202312/01/004113hsfe1ukeh8rt1f8t.png)
我认为在这个示意图中有两点很重要：
1. 分支上有两个提交
2. 分支有一个“父级”（`main`），它是这个“父级”的分支
虽然这个观点看似合理，但实际上它并不符合 Git 对于分支的定义 — 最重要的是，Git 并没有一个分支的“父级”的概念。那么，Git 又是如何定义分支的呢？
### 在 Git 里，分支是完整的历史
在 Git 中，一个分支是每个过去提交的完整历史记录，而不仅仅是那个“分支”提交。因此，在我们上述的示意图中，所有的分支（`main` 和 `branch`）都包含了 4 次提交。
我创建了一个示例仓库，地址为：。它设置的分支方式与前图一样。现在，我们来看看这两个分支：
`main` 分支包含了 4 次提交：
```
$ git log --oneline main
70f727a d
f654888 c
3997a46 b
a74606f a
```
`mybranch` 分支也有 4 次提交。最后两次提交在这两个分支里都存在。
```
$ git log --oneline mybranch
13cb960 y
9554dab x
3997a46 b
a74606f a
```
因此，`mybranch` 中的提交次数为 4，而不仅仅是 2 次“分支”提交，即 `13cb960` 和 `9554dab`。
你可以用以下方式让 Git 绘制出这两个分支的所有提交：
```
$ git log --all --oneline --graph
* 70f727a (HEAD -> main, origin/main) d
* f654888 c
| * 13cb960 (origin/mybranch, mybranch) y
| * 9554dab x
|/
* 3997a46 b
* a74606f a
```
### 分支以提交 ID 的形式存储
在 Git 的内部，分支会以一种微小的文本文件的形式存储下来，其中包含了一个提交 ID。这就是我一开始提及到的“技术上正确”的定义。这个提交就是分支上最新的提交。
我们来看一下示例仓库中 `main` 和 `mybranch` 的文本文件：
```
$ cat .git/refs/heads/main
70f727acbe9ea3e3ed3092605721d2eda8ebb3f4
$ cat .git/refs/heads/mybranch
13cb960ad86c78bfa2a85de21cd54818105692bc
```
这很好理解：`70f727` 是 `main` 上的最新提交，而 `13cb96` 是 `mybranch` 上的最新提交。
这样做的原因是，每个提交都包含一种指向其父级的指针，所以 Git 可以通过追踪这些指针链来找到分支上所有的提交。
正如我前文所述，这里遗漏的一个重要因素是这两个分支间的任何关联关系。从这里能看出，`mybranch` 是 `main` 的一个分支——这一点并没有被表明出来。
既然我们已经探讨了直观理解的分支概念是如何不成立的，我接下来想讨论的是，为何它在某些重要的方面又是如何成立的。
### 人们的直观感觉通常并非全然错误
我发现，告诉人们他们对 Git 的直觉理解是“错误的”的说法颇为流行。我觉得这样的说法有些可笑——总的来说，即使人们关于某个题目的直觉在某些方面在技术上不精确，但他们通常会有完全合理的理由来支持他们的直觉！即使是“不正确的”模型也可能极其有用。
现在，我们来讨论三种情况，其中直觉上的“分支”概念与我们实际在操作中如何使用 Git 非常相符。
### 变基操作使用的是“直观”的分支概念
现在，让我们回到最初的图片。
![](/data/attachment/album/202312/01/004113hsfe1ukeh8rt1f8t.png)
当你在 `main` 上对 `mybranch` 执行  变基   rebase  操作时，它将取出“直观”分支上的提交（只有两个红色的提交）然后将它们应用到 `main` 上。
执行结果就是，只有两次提交（`x` 和 `y`）被复制。以下是相关操作的样子：
```
$ git switch mybranch
$ git rebase main
$ git log --oneline mybranch
952fa64 (HEAD -> mybranch) y
7d50681 x
70f727a (origin/main, main) d
f654888 c
3997a46 b
a74606f a
```
在此，`git rebase` 创建了两个新的提交（`952fa64` 和 `7d50681`），这两个提交的信息来自之前的两个 `x` 和 `y` 提交。
所以直觉上的模型并不完全错误！它很精确地告诉你在变基中发生了什么。