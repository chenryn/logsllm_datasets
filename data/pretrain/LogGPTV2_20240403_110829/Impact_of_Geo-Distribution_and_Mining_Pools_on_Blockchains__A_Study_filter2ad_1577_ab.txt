location (results not shown for space limitations). However, we
found that block propagation delay is affected by geographic
location.
To assess this, we measured the proportion of times each
of our measurement nodes was the ﬁrst to observe a new
block. The results are depicted in Figure 2. The results clearly
show that nodes located in EA are the ﬁrst to receive new
blocks most of times (≈40% of times) whereas nodes in North
America are around four times less likely to observe new
blocks ﬁrst. Therefore, the geographical location of nodes
affects the new block observation times and therefore miners
in EA are at an advantage. The cause of this, as we show
in the following measurement, is simply due to the fact that
several prominent mining pools operate in Asia and therefore
nodes in EA are more likely to receive new blocks ﬁrst.
2) Mining pools’ location: The emergence of huge mining
pools does not only centralize mining power on a few entities,
it also centralizes (on a few geographical hot-spots) block
propagation. To overcome this, and counter the effect observed
Figure 1: The histogram of times since the ﬁrst block an-
nouncement.
A. Network Efﬁciency
The Ethereum network disseminates transactions and blocks
using a gossip-based protocol. If the network is slow in
disseminating transactions this means that end users will
observe a large latency in the transactions they submit to
the system. Regarding blocks, a slow block propagation has
harsher consequences, since it will lead to more forks as
miners are not aware of each other’s blocks in time. Therefore,
this section studies the efﬁciency of Ethereum’s network,
focusing on the propagation of blocks. More precisely, our
focus is on understanding how fast the Ethereum network
propagates blocks and on whether it generates signiﬁcant
message redundancy.
1) Block and Transaction Propagation Delays: Figure 1
depicts the results for block propagation delays. The median
block propagation delay was 74ms and the average was 109ms.
The propagation delay of the 95% fastest blocks was under
211ms, and it took 317ms for 99% of blocks to propagate
through the network. This shows that blocks are propagated
several orders of magnitude below the average inter-block time
(currently 13.3s).
Regarding transaction propagation delays, we did not ﬁnd
them to be affected by geographic location (results not shown
due to space constraints). There are two main factors that ex-
plain this observation: i) transactions are small and propagate
faster than blocks and within the margin of our measurement
error (§II), and ii) transactions tend to be created in a more
geographically dispersed fashion (transactions are submitted
from a large set of nodes) as opposed to blocks (where just a
few miners produce most of them).
2) Block reception redundancy: Blocks are disseminated
through two types of messages: either in the form of light
announcements (consisting of only the block’s hash) or prop-
agated directly (including both header and body). The dissemi-
nation protocol has builtin redundancy mechanisms to tolerate
faults and packet loss. However, such redundancy comes at
the cost of additional network delays and processing overhead.
Therefore, we are interested in knowing how many redundant
blocks a node with default settings receives. Because our
measurement nodes are connected to more nodes than the
default (§II), we performed a subsidiary measurement for this
metric, between May 2nd 2019 and May 9th 2019, where an
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:28:27 UTC from IEEE Xplore.  Restrictions apply. 
247
Figure 2: First new blocks observations with respect to geo-
graphical location. The error bars represent the experimental
error (§II).
Figure 3: The inﬂuence of a block’s origin mining pool on the
faster propagation times to various geographical locations. In
parentheses, we show the computational power of each mining
pool during our experiment.
in the ﬁrst experiment, mining pools have been known to
place gateways in several geographical locations in order to
help disseminate their blocks, without disclosing their precise
location to avoid attacks [17]. To study the impact of this, we
measure whether our geographically dispersed measurement
nodes capture blocks mined from particular mining pools
faster than from others. The results are depicted in Figure 3,
which shows ﬁrst new block reception per individual mining
pool. We consider only the 15 most prominent mining pools,
since the fractions of blocks produced by the smaller pools
are insigniﬁcant. The results clearly show that the geographic
location of peers affects faster block observation from certain
pools, and indicates that the gateways of mining pools are not
evenly distributed.
C. Blockchain Efﬁciency
We now focus on higher level aspects of Ethereum, from the
perspective of a blockchain platform. We focus on aspects that
are important to both end users, such as transaction commit
time, and miners, such as mining empty blocks.
When an application observes a new block B, it is not safe
to immediately consider the state transition given by its trans-
actions, because there is a chance that B might be discarded
due to a fork. Thus, applications must wait for a long enough
sufﬁx of blocks to ensure that the appearance of an alternative
Figure 4: Time for transaction inclusion and commit with 3,
12 (default), 15 and 36 block conﬁrmations.
heavier chain, not including block B, has a small probability.
This property is known as block ﬁnality. Applications choose
the probability of chain replacement they are willing to tolerate
(i.e., the probability of a block not being ﬁnal) and wait
for enough conﬁrmation blocks to ensure that probability. In
Ethereum, it is generally accepted that applications should wait
for 12 conﬁrmation blocks before considering a block B as
ﬁnal and its transactions as committed [8], [18], [19].
1) Transaction commit time: We measured the difference
between the time when a transaction was ﬁrst observed by
our measurement nodes to the time at which it was included
in a block. To determine the block conﬁrmation time, we also
measured how much additional time it took for such a block
to be followed by different numbers of blocks in the main
chain. These are the metrics that mostly affect end users, and
they have a direct impact on user perceived latency. Figure 4
shows the times of ﬁrst inclusion of transactions in a block,
and the 3-, 12-, 15-, and 36-conﬁrmation block times. The
variants other than the regular 12-blocks case make sense for
some applications depending on their requirements regarding
block ﬁnality probability. Besides, as we discuss in §III-D, for
applications concerned with the blockchain security, waiting
just for 12 blocks might not be enough. Our measurements
revealed that the median waiting time for 12 blocks was 189
seconds whilst in 2017 it was 200 seconds [8]. The cause for
this is that the inter-block time decreased, from 14.3 seconds to
the current 13.3 seconds [20]. This is likely to be related to the
Ethereum Constantinople fork that occurred on February 2019
to decrease the inter-block time, which was slowly increasing
due to a known hard-coded difﬁculty bomb [21], [22].
2) Transaction reordering: The transaction creator stamps
every transaction with a monotonically increasing nonce. We
say that two transactions from the same sender were received
out of order when we ﬁrst observe the transaction with the
higher nonce. Miners cannot
include out-of-order transac-
tions in a block until they receive all foregoing transactions,
which implies that out-of-order receptions negatively impact
transaction commit
times, as such transactions must wait
for their delayed predecessors before committing. In 2017,
6.18% out of all committed transactions were received out-
of-order [8]. In our measurements, we observed 11.54% out-
of-order committed transactions, a substantial increase. We
also observed that it takes less than 192 and 325 seconds
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:28:27 UTC from IEEE Xplore.  Restrictions apply. 
248
Figure 5: Commit delay (sec) for transaction based on order-
ing.
for 50% and 90% of out-of-order transactions to commit. In
comparison, the median time for in-order received transactions
is less than 189 seconds and 90% of these transactions need
292 seconds or less to commit. The results are depicted in
Figure 5.
3) Empty blocks: We now focus on a set of metrics that
affect the behavior of the miners. Blocks have a maximum
number of transactions they can include and currently most
blocks are at around 80% capacity [20]. In principle, miners
are incentivized to include transactions in a block because they
collect the fees associated with each transaction. However,
miners may occasionally decide to create and propagate blocks
that include no transactions. This behavior grants them the
possibility of starting to mine earlier than other miners. This
has interesting consequences. On the one hand, miners are
penalized by not collecting transaction fees. On the other
hand, they still get the mining reward which is, on average,
considerably higher. Besides, empty blocks can be propagated
earlier, because miners do not waste time validating transac-
tions, and faster, since they become smaller due to the absence
of transactions. Overall, these constitute a perverse incentive
to mine empty blocks. As a matter of fact, empty blocks are
harmful to the network because they increase the commit time
of transactions, as transactions that could have been included
in an empty block must wait to be included in the next block.
If a dominant number of miners switched to the selﬁsh strategy
of occasionally mining empty blocks, it would be disastrous
for the platform. To assess the impact of this, we measure
the number of empty blocks in the network, and the mining
pools from which they originate. The results reveal that 1.45%
are empty blocks (2,921 out of 201,086 total main blocks).
This signiﬁcant fraction of empty blocks decreases transaction
throughput, by increasing the transaction commit delay.
Figure 6 shows the 15 biggest pools and their share of
empty blocks. Remarkably, only a small a portion of pools,
e.g. Nanopool or Miningpoolhub1, had not mined any empty
blocks during our measurement. On the other hand, more
than 25% of blocks mined by the Zhizu pool were empty,
without a single transaction. We also observed a miner whose 6
mined blocks during the experiment were all empty. Etherscan
data conﬁrms this miner has systematically only mined empty
blocks since its account was created [20].
We can therefore conclude that the mining of empty blocks
Figure 6: Empty blocks per mining pool.
varies substantially across mining pools, which shows that this
practice depends on the speciﬁc protocols and policies used by
each mining pool. The fact that one major mining pool resorts
to this practice frequently might show that the beneﬁts of this
selﬁsh behavior are relevant. This, in turn, may suggest that
this behavior may be replicated more aggressively by other
mining pools in the future, which will imply higher penalties
on the commit delay.
4) Blockchain forks: In our measurement, we were able to
observe nearly all blocks that were created on the network.
This included 485 unrecognized forks that are not reported by
popular Ethereum blockchain explorers like Etherscan [20] or
Etherchain [23].
Out of the 216,671 blocks that we captured, 92.81% of
them became part of the main chain, 6.97% became uncles
referenced by some block from the main chain and only
0.22% of the blocks became unrecognized uncles. Table III
also shows that forks of length one are the most common
(97%) and that the longest forks observed were of length
3. It also shows that forks of length one are very likely to
become recognized, i.e. referenced as uncle in some main
block. During our measurement, not a single fork longer than
1 became recognized.
Fork Length
1
2
3
Total
15,171
404
10
Recognized
Unrecognized
15,100
0
0
71
404
10
Table III: Fork types and lengths.
Since 2017, the proportion of forked blocks increased by
more than one percent and their lengths increased as well.
Among other possible factors, it is likely that this trend reﬂects
the fact that mean inter-block time (the time between two
succeeding blocks) has decreased by around one second in
the last two years [20].
5) One-miner Forks: The Ethereum yellow paper deﬁnes
fork as “a disagreement between nodes as to which root-to-
leaf path down the block tree is the best blockchain” [2]. Forks
are thus expected to occur when distinct miners disagree on the
best blockchain (e.g., on distinct versions of the highest block
produced by distinct miners), but not due to a single miner
producing distinct blockchains simultaneously (e.g., distinct
versions of the highest block). Surprisingly, we ﬁnd many
instances where a single miner produced several blocks at the
same height. This phenomena, which clearly was not foreseen
in the original speciﬁcation, has a relevant impact today. In
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:28:27 UTC from IEEE Xplore.  Restrictions apply. 
249
fact, more than 11% of all forks consisted of a divergence
between two blocks from the same miner.
We ﬁnd that miners produced 1,750 block pairs with a
unique block height. They also mined 25 triples of blocks,
once mined a 4-tuple and once a 7-tuple of such blocks. In
the case of the 4- and 7-tuples, we believe that these were
due to a mining pool partition or another pool malfunction.
In the case of a 3- and 2-tuples, there is a strong reason to
suspect of intentional behavior: these forks got recognized as
uncle blocks and thus got rewarded in 98% of the cases. This
phenomenon shows that the uncle block rewarding system,
which was intentionally meant to help less powerful miners,
is effectively helping the most powerful mining pools to
unethically proﬁt from multiple rewards, by mining multiple
versions of the highest block in parallel.
D. Security
Figure 7: The sequences of consecutive main blocks mined by
a unique miner.
As previously discussed, mining in Ethereum is performed
by a few mining pools that dominate the platform. Moreover,
miners are free to select which transactions to include in a
block and which to discard. This raises concerns over the
security and fairness of the network, as a mining pool might
censor transactions from a given user, or perform other attacks
such as a double-spend by reverting a sufﬁx of the blockchain.
In Ethereum, a block B is usually considered ﬁnal when
it is followed by a 12 block sequence. If a mining pool is
able to produce more than 12 blocks in row, this means that
it can effectively censor the blockchain and perform attacks
such as double-spends. A less severe attack that mining pools
can perform is to increase the latency of a given transaction
simply by refusing to include it in the sequence of blocks they
mine. This enables them to perform a temporary censorship.
To assess the security of the network, from the perspective
of block ﬁnality, we measured the length of consecutive
sequences of blocks created by the same mining pool. We were
interested in the probability of temporary censorship taking