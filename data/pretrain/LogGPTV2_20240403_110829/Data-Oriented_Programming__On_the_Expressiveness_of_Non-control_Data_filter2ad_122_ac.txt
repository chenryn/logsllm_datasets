is to execute the machine with the provided input on the tape.
The classical Turing machine step comprises of four sub-steps:
(a) read the current tape symbol (b) use the symbol and the
state to consult the transition table and get the next state and
symbol (c) write the new symbol to the tape and update the
state (d) move the tape head to left or right. Listing 6 shows
the sequence of gadgets that should be chained together to
simulate such a step in the attacker’s Turing machine. Note that
it is a ﬁxed chain of gadgets only comprising of assignment,
dereference and addition operations.
Accessing Transition Tables. Each step in the machine
consults the transition table by using the current state and
the current tape symbol. We place our transition table in the
memory in such a way that the comparison operation to search
the transition table is folded into a direct lookup in a two-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
dimensional array. Speciﬁcally, we use the addition gadget to
ﬁrst calculate the offset in the transition table. This calculation
is done dynamically based on the current symbol and state.
Once we obtain the offset, we use it to lookup the next state
and symbol. Next, we update the current state, write the new
symbol, and move the tape head (See Appendix A for an
example). The attacker aims to carry out all the above sub-
steps repeatedly until the Turing machine reaches the ﬁnal
or halt state. When the machine does reach a halt state, the
lookup-table can encode a speciﬁc output symbol to terminate.
For instance, the output symbol could terminate the dispatcher
loop to proceed with the original program execution.
1 LOAD vptr, s_cur
2 MOV TT_base, temp
3 ADD temp, q_cur
4 LOAD temp, temp
5 ADD temp, s_cur
6 LOAD temp, TT
7 LOAD TT, q_cur
8 ADD TT, 1
9 LOAD TT, s_cur
10 ADD TT, 1
11 LOAD TT, D
12 STORE s_cur, tape_head ;write to tape
13 ADD tape_head, D
;move the head
14 MOV loop_counter, temp
15 ADD temp, 16
16 MOV temp, loop_counter
;set the new state
;read from tape
;get the column
;get the row
Code 6. Gadget sequence to simulate one step in the Turing Machine.
Putting It All Together. To cascade multiple Turing machine
steps, the attacker has to ensure that the victim program’s
dispatcher loop does not exit. Line 14-16 in Code 6 show one
possible way to achieve this by incrementing the vulnerable
program’s loop counter variable at the end of every step in
the Turing machine. Depending on the nature of the gadget
dispatcher in the program, the attacker can chose alternative
ways to achieve the same. In order to successfully execute any
arbitrary computation in the vulnerable program’s memory,
the attacker constructs a payload such that it ﬁrst executes
the gadgets for initialization and then keeps pumping the
payload to execute machine step gadgets repeatedly until the
victim program terminates. Thus, we prove that if the program
has three stitchable gadgets for assignment, dereference and
addition within a dispatcher loop, then it is possible to mount
Turing-complete DOP attacks.
IV. DOP ATTACK CONSTRUCTION
Constructing DOP attacks against a vulnerable program
requires a concrete memory error and speciﬁcation of the ma-
licious behavior. Our analysis ﬁrst identiﬁes concrete program
gadgets and dispatchers to simulate MINDOP operations, and
then we synthesize a malicious input to execute MINDOP
operations exploiting an existing concrete memory error.
A. Challenges
Though the concept of data-oriented programming is in-
tuitive, it is challenging to construct data-oriented attacks in
real-world programs. Unlike in ROP, where attackers com-
pletely harness the control ﬂow, DOP is constrained by the
application’s original control ﬂow. Following challenges arise
in constructing DOP attacks:
• Data-oriented gadget identiﬁcation. To perform arbi-
trary computations, we need to ﬁnd data-oriented gadgets
to simulate basic MINDOP operations. However, most of
the data-oriented gadgets are scattered over a large code
base, which makes manual identiﬁcation difﬁcult. We use
static analysis as an aid in identifying these gadgets.
• Gadget dispatcher identiﬁcation. Our gadget dispatcher
requires a loop with various gadgets and a selector
controlled by the memory error. But it is possible to
have the selector and gadgets inside the functions called
from the loop body. We should take such cases into
consideration to identify all dispatchers.
• Data-oriented gadget stitching. The reachability of gad-
gets depend on concrete memory errors. We need to ﬁnd
malicious input that makes the program execute selected
gadgets with the expected addresses and order. Since
data-oriented programming corrupts substantial memory
locations, we also need to avoid program crashes.
In the rest of this section, we discuss our techniques to
address the challenges in identifying data-oriented gadgets,
gadget dispatchers and stitching them for real-world attacks.
B. Gadget Identiﬁcation
A useful data-oriented gadget needs to satisfy the following
requirements:
• MINDOP semantics. It should have instructions for
the load micro-operation, the store micro-operation, and
others simulating semantics of MINDOP, as we discuss
in Section III-B.
internal order. The three micro-operations
should appear in the load-operation-store order, and this
correct order should show up in at least one legitimate
control ﬂow.
• Gadget
We perform static data-ﬂow analysis to aid the identiﬁcation
of such data-oriented gadgets and generate a set of over-
approximated gadgets veriﬁable by manual / dynamic analysis.
We compile the program source code into LLVM intermediate
representation (IR) and perform our analysis on LLVM IR.
LLVM IR provides more program semantics than binary while
avoiding the parsing of program source code. It also allows
language-agnostic analysis of the source code written in any
language that has a LLVM frontend. Our analysis iterates
through all functions in the program (See Algorithm 1). We
treat each store instruction in the function as a store micro-
operation of a new potential gadget. Then our analysis uses
a backward data-ﬂow analysis to identify the deﬁnitions of
the operands in the store instruction. The generated data-ﬂow
contains the instructions that derive the operands, like loaded
from memory or calculated from registers. If there is at least
one load operation present in the data-ﬂow, we mark it as a
data-oriented gadget.
Gadget Classiﬁcation. We classify data-oriented gadgets into
different categories based on their semantics and computed
975975
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1: Data-oriented gadget identiﬁcation.
Input: G:- the vulnerable program
Output: S:- data-oriented gadget set
1 S = ∅;
2 FuncSet = getFuncSet(G)
3 foreach f ∈ FuncSet do
4
5
6
7
8
9
10
cfg = getCFG(f)
for instr = getNextInstr(cfg) do
if isMemStore(instr) then
gadget = getBackwardSlice(instr, f)
input = getInput(gadget)
if isMemLoad(input) then
S = S ∪ {gadget}
variables. Gadgets with the same semantics are functional-
equivalent to simulate one MINDOP operation. The assign-
ment gadgets can be used to prepare operands for other
gadgets. Conditional gadgets are useful to implement advanced
calculations from simple gadgets (like simulating multiplica-
tion with conditional addition in Section III-B). There are
no function call gadgets in data-oriented programming, as it
does not change the control data. Based on the computed
variables, we further classify gadgets into three categories:
global gadget, function-parameter gadget and local gadget.
Global gadgets operate on global variables. Memory errors
can change these variables from any location. A function-
parameter gadget operates on variables derived from func-
tion parameters. Memory errors that can control the function
parameters can use gadgets in this category. Local gadgets
compute on local variables, where only the memory errors
inside the function can activate them. One concrete memory
error can use gadgets in various categories. For example, a
stack buffer overﬂow vulnerability can use local gadgets if it
can corrupt related local variables. It can also use function-
parameter gadgets if the corrupted local variables are used
as parameters of function calls. If the buffer overﬂow can be
exploited to achieve arbitrary memory writing, even the global
gadgets can be used to build attacks 4.
We use classiﬁcation to prioritize gadget selection: global
gadgets are prioritized over function-parameter gadgets, and
local gadgets are considered at last. We further prioritize the
identiﬁed potential gadgets based on their features, which
include the length of the instruction sequence and the number
of simulated operations. Shorter instruction sequences with
single MINDOP semantic are prioritized over longer, multi-
semantic instruction sequences.
C. Dispatcher Identiﬁcation
We use static analysis on LLVM IR for the initial phase
of dispatcher identiﬁcation. In this step, our method does not
consider any speciﬁc memory error. Algorithm 2 gives the
dispatcher identiﬁcation algorithm. Since loops are necessary
for attackers to repeatedly connect gadgets, we ﬁrst identify
all possible loops in the program. For each loop, we scan
the instructions in the loop body to ﬁnd interesting gadgets
4Like the cases in Section V
Algorithm 2: Gadget dispatcher identiﬁcation.
Input: G:- the vulnerable program
Output: D:- gadget dispatcher set
1 D = ∅;
2 FuncSet = getFuncSet(G)
3 foreach f ∈ FuncSet do
loop.gadgets = ∅
foreach instr = getNextInstr(loop) do
foreach loop = getLoop(f) do
if isMemStore(instr) then
loop.gadgets ∪= getGadget(instr)
else if
isCall(instr) then
target = getTarget(instr)
loop.gadgets ∪= getGadget(target)
if loop.gadgets != ∅ then
D = D ∪ {loop}
4
5
6
7
8
9
10
11
12
13
with Algorithm 1. For function calls within the loop, we
step into functions through the call graph and iterate through
all instructions inside. This gives us an over-approximate set
of gadget candidates for a particular dispatcher. As with the
gadget ﬁnding, we also prioritize dispatchers based on loop
size and loop condition.
The second phase of dispatcher identiﬁcation correlates
the identiﬁed dispatcher candidates with a known memory
error. In this phase, we use a static-dynamic approach to
provide identiﬁcation results with varying degrees of coverage
and precision. Static analysis provides a result with larger
coverage but less precise, while dynamic analysis allows for
the converse. In our static analysis, the correlation is done by
reachability analysis of loops based on program’s static CFG.
We mark a loop as reachable if it enfolds the given memory
error. For dynamic analysis, we consider the function call trace
after the execution of the vulnerable function until the program
termination. Any loops inside the called functions are treated
to be under the control of memory error. We merge the static
analysis result and dynamic analysis result as the ﬁnal set of
gadget dispatchers.
D. Attack Construction
We manually construct our ﬁnal attacks with data-oriented
programming using the results of our previous analysis. For
a given concrete memory error, the available gadgets and
dispatchers rely on the location of the vulnerable code in the
program, while the stitchability of gadgets depends on the
corruptibility of the memory error. To connect two disjoint
data-oriented gadgets, attackers should have the control over
the address in the load micro-operation of the second gadget
or the address in the store micro-operation of the ﬁrst gadget.
Attackers can modify the addresses into expected values when
the address values are known in advance (through information
leakage or deterministic address analysis [22]). Based on the
gadget classiﬁcation, we complete the stitching steps manually,
with the following method.
1) Gadget preparation (Semi-automated). Given a mem-
ory error, we locate the vulnerable function from the
976976
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
Prevalence of DOP gadgets & dispatchers. Columns 1-3 present the details of the selected 9 programs. Columns 4 denotes the total number of identiﬁed
dispatchers, while Column 5 represents the number of dispatchers containing at least one gadget. Columns 6-20 report the number of gadgets for each type
where, G denotes global gadgets, FP denotes function-parameter gadgets, and H denotes the operands in the gadgets are hybrid.
TABLE VI
Vulnerable Application
Assignment
Name
bitcoind
musl libc
BusyBox
Wireshark
nginx
mcrypt
sudo
ProFTPD
sshd
WU-FTPD
Version
0.11.1
1.1.7
1.24.1
1.8.0
1.4.0
2.6.8
1.8.3
1.3.0
1.2.27
2.6.0
LOC
455041
84643
2629412
100252
51673
94492
202206
38236
25968
TOTAL
Dispatchers
Total
Used
88
9
768
2165
102
961
204
689
71
9
16
67
180
586
88
222
67
203
5052
1443
G
0
80
33
12
65
11
6
3
40
FP
2
303
33
69
6
9
23
45
3
H
0
126
41
54
0
0
15
28
9
Load / Store
G
0
935
49
32
0
11
43
6
34
FP
0
321
41
974
0
8
81
174
1
H
0
76
4
40
8
5
48
9
1
Arithmetic
G
0