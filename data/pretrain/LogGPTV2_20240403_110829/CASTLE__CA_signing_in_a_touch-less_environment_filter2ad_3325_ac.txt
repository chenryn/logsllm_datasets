i
(h(cid:2)(cid:14)C)
(1)
The CSR generation process can take place on a veriﬁer or on a
separate machine, and does not need to be trusted due to the later
check in the authorization step.
When the CSR is scanned, the signer displays the CSR ﬁelds in
human-readable form to allow the administrators to check the CSR
before authenticating to the signer. The signer then assembles and
sends
C,R1, . . . ,R k
(2)
to the PAL, assuming without loss of generality that the ﬁrst k ad-
ministrators request the signing session.
5.3 Attestation Step
The attestation step produces a conﬁrmation that the PAL has
received the correct CSR and request signatures. The private key
used for attestation is sealed and only accessible to the PAL, and
550Algorithm 1 PAL procedure during attestation, assuming the ﬁrst
k administrators participate in the session.
1: procedure ATTESTATION
Input: C,R1, . . . ,R k,B,C
Kb ← unseal B
h(cid:2), K−1
for 1 ≤ i ≤ k do
c
, K, k, . . .← verify/decrypt C
if !VrfyKi (Ri,h(cid:2)(cid:14)C) then
h(cid:2)+1 ← H(h(cid:2)(cid:14)failed(cid:14)att(cid:14)i)
C(cid:10) ← write h(cid:2)+1 into C
return h(cid:2)+1,0,0,0,C(cid:10)
h(cid:2)+1 ← H(h(cid:2)(cid:14)success(cid:14)att(cid:14){1, . . . ,k})
write h(cid:2)+1 into NVRAM
S ← EncKb (h(cid:2)+1(cid:14)C)
c (h(cid:2)+1(cid:14)C(cid:14)S)
A ← SignK−1
C(cid:10) ← write h(cid:2)+1 into C
return h(cid:2)+1,C,S,A,C(cid:10)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
2:
3:
4:
5:
6:
7:
8:
Algorithm 2 Administrator and veriﬁer procedure during the au-
thorization step.
1: procedure AUTHORIZATION
if VrfyKc (A,C(cid:14)S) then
Input: h(cid:2),C,S,A
d ← check human-readable CSR
if correct d and correct PIN at veriﬁer then
Ai ← SignK
−1
return S,Ai
i
(S)
else return 0, SignK
−1
i
else return 0, SignK
(h(cid:2))
(h(cid:2))
−1
i
therefore the attestation signature can only be created by the PAL
and only on the information that the PAL actually receives as input.
In addition to the information in Equation 2, the signer front end
also sends the BLOBs B and C to the PAL, allowing the PAL to
access the information it needs to complete the step. The PAL then
carries out the procedure shown in Algorithm 1. In essence, the
PAL checks each request signature, logging the result and produc-
ing a new epoch identiﬁer.
If all request signatures verify successfully, the PAL creates the
session BLOB S, which links the new epoch identiﬁer to the CSR.
The PAL then creates an attestation signature A that contains the
new epoch identiﬁer, the CSR, and session BLOB. The PAL then
updates the conﬁguration BLOB with the new epoch identiﬁer and
returns the CSR, session BLOB, attestation signature, and updated
conﬁguration BLOB. The signer then displays a QR code encoding
C,S,A
(3)
as well as the ﬁelds of C in human-readable form.
5.4 Authorization Step
The administrators scan the QR code containing Equation 3 from
the signer and can carry out the next step of the session, autho-
rization. The authorization step ensures that the administrators can
check the CSR received by the PAL and then choose to authorize
the signature or abort the process. The administrators must unani-
mously agree to authorize the signature, preventing a mistake by a
fraction of the administrators from authorizing a signature.
Each veriﬁer has a private key belonging to the administrator
−1
for the ad-
who is assigned to the veriﬁer; this key is denoted K
i
ministrator Ai. Each administrator scans the output of the signer
Algorithm 3 PAL procedure during the signature step.
1: procedure SIGNATURE
, . . . ,{S}
,B,C
−1
K
k
Input: S,{S}
−1
K
Kb ← unseal B
1
h(cid:2), K−1
for 1 ≤ i ≤ k do
s
, K, k, C, . . .← verify/decrypt S, C
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
if !VrfyK[i](S,Ai) then
h(cid:2)+1 ← H(h(cid:2)(cid:14)failed(cid:14)sig(cid:14)i)
C(cid:10) ← write h(cid:2)+1 into C
return h(cid:2)+1,0,C(cid:10)
−1
s
(C)
S ← SignK
h(cid:2)+1 ← H(h(cid:2)(cid:14)success(cid:14)sig(cid:14)S)
write h(cid:2)+1 into NVRAM
C(cid:10) ← write h(cid:2)+1 into C
return h(cid:2)+1,S,C(cid:10)
from the attestation step and carries out the procedure in Algo-
rithm 2. In essence, each administrator simply veriﬁes the attesta-
tion signature using Kc to ensure that the PAL indeed received and
acknowledged the correct CSR. An administrator can also check
the human-readable display on the signer to conﬁrm the CSR.
The veriﬁer then displays the CSR ﬁelds on its display as a ﬁ-
nal conﬁrmation of the certiﬁcate that will be signed. In order to
encourage the administrator to diligently check the CSR, the veri-
ﬁer additionally displays a hidden digit d, which appears randomly
among the CSR ﬁelds. The administrator must then ﬁnd and pro-
vide d as well as a PIN (established a priori) on the veriﬁer. Au-
−1
thentication via a PIN provides access to K
i
If either the attestation signature check or the hidden digit and
PIN check fail, the veriﬁer returns an abort message consisting of
a signature on the current epoch identiﬁer. Otherwise, the veriﬁer
displays the session BLOB S (linked to the CSR C) along with an
authorization signature
on the veriﬁer.
(S)
−1
i
Ai = SignK
(4)
which conﬁrms S as the session BLOB to be passed back to the
PAL. Each administrator then scans his or her respective authoriza-
tion signature at the signer, which collects and sends the signatures
to the PAL.
5.5 Signature Step
The PAL then proceeds with the ﬁnal step of the session: gener-
ation of the signature. The signature step checks that the adminis-
trators have conﬁrmed the certiﬁcate to be signed via authorization
signatures, which relies on the previous steps in the session. The
signature step thus ensures that a signed certiﬁcate can only be cre-
ated by the PAL and only on a CSR that has been passed through
the previous steps. As with the attestation private key, the signature
private key is sealed and only accessible to the unmodiﬁed CAS-
TLE PAL.
Along with the authorization signatures, the signer front end
sends the BLOBs B, C, and S to the PAL, providing the neces-
sary information for the PAL to carry out the step. The PAL then
carries out the procedure shown in Algorithm 3. The PAL ﬁrst
checks that the session BLOB’s epoch identiﬁer matches the value
in NVRAM, preventing replays of old session BLOBs. The PAL
then has the correct CSR and checks the authorization signatures.
If all k authorization signatures are correct, the PAL logs this event
and issues the signed certiﬁcate S. If any signature is incorrect, the
PAL logs and returns an error.
The signer then displays the signed certiﬁcate S as a QR code.
551Algorithm 4 PAL initialization procedure.
1: procedure INIT
Input: M1, . . . , Mm, m, k, u, K1, . . . , Km
h0 ← generate random value
Kb ← generate symmetric key
write h0 into NVRAM
B ← Kb sealed to PAL
write H(Kb) into NVRAM
M ← ⊕m
Q ← TPM quote with nonce M on PAL PCRs
I ← EncKb (h0(cid:14)m(cid:14)k(cid:14)u(cid:14)K1(cid:14) . . .(cid:14)Km)
−1ε (M(cid:14)Q(cid:14)h0(cid:14)m(cid:14)k(cid:14)u(cid:14)K1(cid:14) . . .(cid:14)Km)
σ ← SignK
return M,Q,h0,B,I,σ
i=1Mi
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
Operation
Attestation
Signature
Key generation
Add/remove administrator m, Km
Backup/restore
Information
C, partic./failed admins
S, partic./failed admins
m, k, u, K, Kc, Ks, Kr
C
Table 2: Information recorded for each log event.
The administrators can then scan this code with their veriﬁers to
obtain, verify, and distribute the digital certiﬁcate.
6. DEPLOYMENT AND MANAGEMENT
While certiﬁcate signing is the main function of CASTLE, sev-
eral other functions are critical to its operation in practice. In this
section, we discuss four such functions:
logging, initialization,
adding and removing administrators, and the backup and restore
process.
6.1 Logging
For auditability, the PAL logs all operations that modify the sys-
tem state (i.e., the conﬁguration BLOB) at the signer. Each opera-
tion is recorded as a log event that records the attempted operation,
whether or not the operation was successful, and information fur-
ther describing the speciﬁcs of the operation. We thus deﬁne a log
event Li as follows:
Li = (cid:14)(cid:14)Ii
(5)
where Ii for each operation is shown in Table 2.
To prevent tampering with the log, the logged events are stored
in a chronologically-ordered hash chain similarly to timestamping
protocols [7]. As shown in Figure 4, the epoch identiﬁer after an
event Li is
hi = H(hi−1(cid:14)H(Li))
(6)
where hi−1 is the latest epoch identiﬁer before the current event is
logged. Each time the epoch identiﬁer changes, the PAL writes the
latest value hi into NVRAM in order to prevent replay attacks with
old system state [18].
An administrator or other auditor can synchronize with the log
by performing a log check at the PAL. The auditor provides a nonce
Nv to the PAL and an epoch identiﬁer hv. The PAL returns a signa-
ture on the events since hv:
{Li : v < i ≤ (cid:2)} ,{h(cid:2),Nv}
K−1
c
.
(7)
The signer then displays this information as a QR code, where it
can be scanned and veriﬁed.
The latest epoch identiﬁer is also included in the output of each
PAL operation, along with a signature. This allows the administra-
tors to keep the most recent epoch identiﬁer, which is required to
initiate a certiﬁcate signature session.
6.2 System Initialization
Before a CASTLE system can sign certiﬁcates, it must ﬁrst have
its own keys as well as those of its administrators. We achieve
this via an initialization process that is carried out by the group of
initial administrators. We assume that there are m administrators,
−1
and that each has a key pair Ki,K
stored on a veriﬁer as well
i
as a nonce Mi used during setup. We also assume that the admin-
istrators have knowledge of a public key Kε whose corresponding
is stored in and only accessible to the TPM, such
private key K
as the endorsement key or attestation identity key, and agree on a
−1ε
Algorithm 5 PAL state generation procedure.
1: procedure STATE_GEN
Input: S1 . . . , Sm, B, I
Kb ← unseal B and check against NVRAM
h0,m,k,u,K1, . . . ,Km ← DecKb (I)
check h0 against NVRAM
for 1 ≤ i ≤ k do
if !VrfyKi (h0,Si) then
return 0
K ← {K1, . . . ,Km}