arr[0] = {};
throw 1;
  }});
(cid:2)
(type)
  print(arr[0]);
}
main();
(a) CVE-2018-0840
(e.g., input corpus)
  }
  let get = Map.prototype.get;
  Map.prototype.get = function (key) {
    Map.prototype.get = get;
    arr[0] = {};
    return this.get(key);
  }
  opt(arr, Intl);
  print(arr[0]);
}
main();
(cid:4) (new code)
(b) CVE-2018-8288
(e.g., output test case)
Fig. 2: Two PoC exploits for CVE-2018-0840 and CVE-2018-8288 of
ChakraCore. Given a PoC-(a) as a seed input, PoC-(b) can only be
discovered when three conditions are met ( 1 – 3 ) but with enough
variation introduced ( 4 ). Note that human hackers are particularly
good at exploring similar types of bugs in this manner—both PoC
exploits are written by the same author [25, 26].
from Google Project Zero issue trackers [14] and the commits
of ChakraCore for security updates [29]. All the vulnerabilities
reside in either the parser and interpreter or the JIT compiler
at the backend. The number of parser and interpreter bugs
has been rapidly decreasing in the period. Meanwhile, the JIT
compiler bugs gradually dominate. The JIT compiler bugs are
mainly caused by incorrect speculation or wrong optimization
based on logic error. We further divide these bugs by their types
and notice that most of the bugs result in out-of-bounds (OOB)
access or type confusion. An ordinary program written in
JavaScript, a typical high-level language, needs sophisticatedly
crafted code to trigger these cases. The goal of DIE is to
effectively generate such programs that are more likely to hit
these deep phases for ﬁnding JavaScript bugs in 2019.
A. Motivation
III. OVERVIEW
Human hackers have a particular interest in auditing similar
types of vulnerabilities. This intuitively makes sense, as the
developers likely introduced similar mistakes dispersedly to
the codebase. For example, Figure 2-(a) shows a bug in JIT-
related optimizations [25]: a bailout condition is incorrectly
assumed and checked in the JIT-ed code. Figure 2-(b) shows
a similar bug but with subtle differences: it is incorrectly
assumed to have no side effect in an exception (throw in
toString) if suppressed by typeof in (a), but in (b), a side
effect can be unexpectedly introduced by Map used during
the initialization of Intl (for internationalization support).
Accordingly, both exploits share many common preconditions,
as shown in Figure 2. For example, 1 is required to satisfy
the JIT-able condition by repeatedly invoking opt(), and 3 is
required to trick the optimizer to incorrectly assume the type
of arr in opt() but to allow an optimization condition (i.e., a
redundant check elimination) to be met.
Such an intuitive approach is not well respected when a PoC
exploit is used as a seed input by automatic techniques like
fuzzing. One possible explanation is that the goal of fuzzing by
design promotes exploration of new input spaces, which tends
to encourage the fuzzer’s mutation strategies to destruct the
conditions encoded in the seeding input. This decision is well
made to increase the code coverage in fuzzing small programs.
Nonetheless, the input space for JavaScript-like complex
programs having nearly a million lines of source code is
infeasible to be exhaustively explored. Also, recent trend of
bugs in JavaScript engines is not simple memory corruption
bugs that can be achieved by naive coverage-based testing,
but rather logic errors that need sophisticated conditions to
reach them. In other words, mutation strategies should focus on
producing high-quality test cases instead of merely increasing
code coverage, so that it can reach meaningful, difﬁcult-to-ﬁnd
bugs. For example, in Figure 2, an ideal strategy for fuzzers
is to preserve certain preconditions: keeping the conditions to
enable JIT in 1 , a type in 2 and an access order in 3 ,
while introducing a new code snippet ( 4 ) that can vary the
internal mechanics of JavaScript’s optimization algorithms. If
Figure 2-(a) is used as an input corpus, existing coverage-based
fuzzers likely discard conditions 1 – 3 because they are not
essential in discovering new code paths but are considered
redundant to the existing corpus.
B. Challenges and Approaches
An ideal fuzzer would want to fully harvest the subtle condi-
tions encoded in a high-quality input corpus such as known PoC
exploits [18] or JavaScript unit tests. Thus, the generated test
cases naturally satisfy the necessary preconditions to trigger a
new bug. One possible approach would be to manually encode
such conditions in each input corpus. However, this does not
work for two reasons: 1) the number of input corpora is huge
(14K, see §VI-A), and 2) more critically, it does not provide
fuzzers enough freedom for space exploration, negating the
beneﬁts of the fuzzing-like automated approaches. Another
approach is to automatically infer such preconditions from each
corpus via program analysis (e.g., data-ﬂow analysis). However,
this also negates the true enabler of fuzzers, the performance,
i.e., reducing 10% input spaces for exploration after spending
10% more computing power for additional analysis brings no
beneﬁt to the fuzzer.
Our key approach is to stochastically preserve aspects, the
desirable properties we prefer to be maintained across mutation.
It is a stochastic process because aspects are not explicitly
annotated as part of the corpus, but they are implicitly inferred
and maintained by our lightweight mutation strategies, so-called
aspect-preserving mutation.
In this paper, we realize aspect preservation with two
mutation strategies, namely, structure and type preservation:
Structure-preserving mutation. We observe that maintaining
certain structures (e.g., control ﬂow) of an input corpus tends
to retain their aspects in the generated test cases. For example,
a loop structure in a PoC exploit plays a signiﬁcant role in
invoking JIT compilation ( 1 in Figure 2), and certain access
orders in a JIT-ed region are necessary to trigger an optimization
phase (e.g., a redundant check elimination, 3 in Figure 2).
In contrast, widely-deployed blind mutation and generation
strategies tend to destroy these structures, e.g., at an extreme
end, the state-of-the-art JavaScript fuzzer, CodeAlchemist [19],
dissects all seeding inputs and regenerates new test cases for
fuzzing. According to our evaluation, structure-preserving is the
most effective mutation technique to preserve various aspects
(e.g., each JIT optimization phases §VI-D) of input corpora
across mutation, which renders 2× more crashes than without
the technique (Table VII).
Type-preserving mutation. We also observe that respecting
types in an input corpus provides enough room for fuzzers to
generate high-quality test cases while retaining aspects. For
example, an object type ( 2 in Figure 2) should match with
the assumed argument type of the JIT-ed code ({} of opt() in
Line 9), otherwise the code should be bailed out in the JIT
execution. In other words, if the types of a seed input are not
preserved, the derived test cases end up stressing only a shallow
part of the JavaScript engines (e.g., parser or interpreter). In
addition, preserving types signiﬁcantly helps in producing
error-free test cases—both syntactic compilation errors and
dynamic runtime errors such as ReferenceError, TypeError,
and RangeError. Note that such error conditions also prevent
test cases from reaching the deep, complex logics of the
JavaScript engines, and so they are considered a necessary
precondition to preserve various types of aspects of the original
seed corpus. In this paper, we leverage a lightweight, type
analysis that statically propagates the observed type information
from dynamic analysis (§IV-A). According to our evaluation,
the type-preserving mutation reduces runtime errors 2× more
than the state-of-the-art fuzzer (Figure 5). Note that our type-
based mutation also aims to be semantic-aware, meaning that
it attempts to avoid the destruction of aspects by respecting
some semantics of a seed input, e.g., avoiding try-catch logic
that thwarts a JIT invocation.
IV. DESIGN
DIE is a mutation-oriented JavaScript fuzzing framework
that respects the high-level aspects of seed inputs, such as
PoC exploits and unit tests, to generate effective test cases. To
achieve this, DIE mutates the AST of a JavaScript input by
preserving with a high probability the code structure that affects
the overall control ﬂows and the original types of the used
variables. Code coverage guidance and a distributed setting
also enable DIE to reach deep bugs in JavaScript engines with
scale.
Workﬂow. Figure 3 illustrates DIE’s overall design and
workﬂow. First, DIE pre-processes original seed ﬁles to produce
their typed ASTs. Combining dynamic and static type analysis,
DIE infers the node types in an AST with low overhead in 1 .
After type analysis, DIE picks a typed AST of a seed input from
the corpus for mutation ( 2 in Figure 3). Given the typed AST,
DIE generates a new test case by replacing each node (while
preserving its type), or inserting a new node (while preserving
the overall structure) ( 3 in Figure 3). By using the typed AST,
Pre-Processing
Seed Generation
Execution/Feedback
…
Instrument
Dynamic
Analysis
Original Seeds
(cid:3931) Type analysis
Static Analysis
+
1
Type Information 
AST
while
==
[]
a
0
Typed-Node 
Builder
Mutated Typed-AST
IMMUTABLE
while
==
NUM
[]
NUM
[]
Mutation 
Engine
a
.
a
0
(cid:3934)
Execute
NUM ARRAY
a
NUM
NUM ARRAY
NUM
(cid:3933)
NUM ARRAY
“length”
Instrumented 
JS Engines
(cid:3932) Pick
Mutate 
(Aspect-preserving)
Corpus
Input
Mutated 
Seeds
IMMUTABLE
while
Typed-AST
==
NUM
[]
a
0
NUM ARRAY
NUM
1
NUM
Distributed 
Fuzzing Platform
(cid:3935) Feedback
Coverage Feedback
Crash Report
Fig. 3: Design overview of DIE. First, DIE pre-processes (e.g.,instrument) all the original seed ﬁles to construct a typed AST via dynamic/static
analysis ( 1 ). In the main fuzzing loop, DIE selects a test case from the corpus along with its typed AST ( 2 ). Next, DIE mutates the typed
AST by modifying/inserting new nodes while maintaining its structure and type information ( 3 ). Note that the typed-node builder interacts
with mutation engine supporting aspect-preserving mutation. Afterward, the AST is converted back to a JavaScript ﬁle and examined by the
fuzzing platform ( 4 ). Finally, DIE measures the runtime coverage for feedback, which determines whether or not the new ﬁle will be saved.
If the engine crashes at runtime, DIE records the input ( 5 ). DIE can be deployed in a distributed environment where a certain amount of
generated inputs are tested in parallel.
DIE aims to preserve the type during the mutation process,
so-called type-preserving mutation, and aims to preserve the
control-ﬂow structure, so-called structure-preserving mutation,
each of which tends to maintain certain aspects implicitly
embodied in the original corpus across mutation. After mutation,
DIE executes the newly generated test case in 4 and checks
if the execution crashes or terminates without an error. As the
target JavaScript engine is instrumented, DIE can obtain the
runtime coverage after executing the test case, and store it as
a new input corpus in 5 if it visits any new code path. DIE
also supports distributed fuzzing by using multiple machines
to ﬁnd bugs concurrently.
A. Custom JavaScript Type System
DIE reﬁnes the original type system of JavaScript. The
reﬁned type system has two unique properties that are tailored
for fuzzing but are different from other JavaScript fuzzers [17,
19, 39]:
Mixed type. DIE introduces a new type called Mixed for the
syntactic units in a JavaScript program, which captures types
that vary at runtime. Note that since JavaScript is a weak- and
dynamic- typed language, the type of each variable can only be
determined at runtime and even can change during its lifetime.
Mixed is introduced to describe all types that each syntactic
unit can potentially have.
Detailed compound types. DIE inspects the sub-element
type(s) of a JavaScript object to deﬁne compound types in a
more ﬁne-grained manner. (1) Array: DIE records the common
type of the elements in an array, which can be Number or
String. An array that has empty slots or elements of various
types is considered an Any array. (2) Object: DIE stores the
shape of an Object instance, which is composed of the types
of its property keys and values. (3) Function: DIE considers
the argument and return type of a Function instance.
DIE’s custom type system is an essential feature to better
support
the mutation based on the semantic information
extracted from the given test cases. For instance, being aware
of several Number members of an existing Object, DIE has
more building blocks for creating a valid Number expression
than an existing fuzzer. In addition, DIE introduces fewer
semantic errors from its mutation. For example, with the reﬁned
Array types, DIE prefers the element of a Number array to an
arbitrary array for mutating an array index (e.g., from arr[i]
to arr[int_arr[j]]).
Based on the custom type system, DIE abstracts every
JavaScript operation, including expressions and APIs for built-
in objects into one or more type reduction rules. Each rule
declares the type of the return value when the operation
is invoked with the arguments of particular types. Table II
summarizes how DIE redeﬁnes the addition and array indexing
operations. The default return type of an addition in JavaScript
is String unless both of the operands are Numbers. Moreover,
the return value of indexing an array totally depends on the
type of element. Note that DIE relies on these rules to infer
AST node types for typed AST construction (see §IV-B) and
build new AST nodes for a mutation (see §IV-C).
B. Typed ASTs
Basically, DIE mutates the syntactic units (i.e., AST nodes)
of a saved JavaScript ﬁle in the corpus so as to generate new
then utilizes the context to construct a new AST whose value
type is compatible with the expected one.
if step == THRESHOLD then
if PREFER_VAR() or lval then
else
Algorithm 1 Constructing a random typed AST that has a
desired value type.
1: Input: context: the context of a code point (i.e., bindings)
2: lval: true only when expecting a l-value
3: type: the desired value type
4: step: the current AST depth
5: Output: the typed AST of a newly constructed expression
6: function BUILD_EXP(context, lval, type, step = 0)
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
f it_rules ← {}
for each rule ∈ RULES do
return BUILD_VAR(context, type)
return BUILD_LIT(context, type)
f it_rules ← f it_rules ∪ {rule}
if MATCH(rule.ret_type, type) then
if not lval or rule.ret_lval then
rule ← RANDOM_CHOICE(f it_rules)
args ← {}
for each arg ∈ rule.args do
arg ← BUILD_EXP(context, arg.lval,
arg.type, step + 1)
args ← args ∪ {arg}
return CONSTRUCT_AST(rule, args, rule.ret_type)
Operation
Arg. types
Require l-val.
Ret. type
Ensure l-val.
arg1 + arg2
Num., Num.
Any, Any
arg1[arg2]
Num. Arr., Num.
Str. Arr., Num.
Arr., Num.
arg1++
Num.
false, false