    #define PROT_NONE   0x0     /* Page can not be accessed.  */
    #define PROT_GROWSDOWN  0x01000000  /* Extend change to start of
    #define PROT_GROWSUP    0x02000000  /* Extend change to start of
    #define MAP_SHARED  0x01        /* Share changes.  */
    #define MAP_PRIVATE 0x02        /* Changes are private.  */
    # define MAP_SHARED_VALIDATE    0x03    /* Share changes and validate
    # define MAP_TYPE   0x0f        /* Mask for type of mapping.  */
    #define MAP_FIXED   0x10        /* Interpret addr exactly.  */
    # define MAP_FILE   0
    # ifdef __MAP_ANONYMOUS
    #  define MAP_ANONYMOUS __MAP_ANONYMOUS /* Don't use a file.  */
    #  define MAP_ANONYMOUS 0x20        /* Don't use a file.  */
    # define MAP_ANON   MAP_ANONYMOUS
    /* When MAP_HUGETLB is set bits [26:31] encode the log2 of the huge page size.  */
    # define MAP_HUGE_SHIFT 26
    # define MAP_HUGE_MASK  0x3f
在这种情况下，先前的 _stat_ 调用再次派上用场，因为它不仅用于验证 _argv [1]中_ 提供的文件是否确实存在，而且 _statStruct_
还包含`st_blocks`可用于填充所需`size_t length`参数的成员。 _mmap_
的返回值存储在中`0x128+mmap_enc_fw($sp)`，'if'条件类型分支检查内存映射是否成功。成功时，mmap返回一个指向映射区域的指针，并在`beqz
$v0`上进行分支，`mmap_fail`不会出现，因为`$v0`包含一个值!= 0。以下是对open的最后一次调用：
这只是尝试将预定义的路径（ _“ /tmp/.firmware.orig”_
）以读写方式打开，并将新文件描述符保存在`0x128+fd_tmp($sp)`。如果打开失败，则分支到该函数的失败部分；如果成功后，这将引导我们进行最后的步骤：
1.我们准备在/tmp/位置中设置新打开的文件的正确大小，首先通过调用lseek来查找`stat.st_blocks -1`的偏移量(`fd_tmp,
stat.st_blocks -1`)。
2.当lseek操作成功时，我们向该偏移位置的文件写入一个0，这使得我们可以轻松快速地创建一个“空”文件，而不需要写入N个字节(其中N==所需的文件大小，以字节为单位)。最后，关闭、重新打开并使用新的权限重新映射文件。
## 总结
到目前为止，我们还没有深入挖掘解密例程，这篇文章即将发表的第二部分将只关注D-Link所利用的方案加密方面。
如果您始终无法正确操作，可以在此处找到到目前为止的完整源代码。
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    static RSA *grsa_struct = NULL;
    static unsigned char iv[] = {0x98, 0xC9, 0xD8, 0xF0, 0x13, 0x3D, 0x06, 0x95,
                                 0xE2, 0xA7, 0x09, 0xC8, 0xB6, 0x96, 0x82, 0xD4};
    static unsigned char aes_in[] = {0xC8, 0xD3, 0x2F, 0x40, 0x9C, 0xAC,
                                     0xB3, 0x47, 0xC8, 0xD2, 0x6F, 0xDC,
                                     0xB9, 0x09, 0x0B, 0x3C};
    static unsigned char aes_key[] = {0x35, 0x87, 0x90, 0x03, 0x45, 0x19,
                                      0xF8, 0xC8, 0x23, 0x5D, 0xB6, 0x49,
                                      0x28, 0x39, 0xA7, 0x3F};
    unsigned char out[] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                           0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};
    int check_cert(char *pem, void *n) {
      OPENSSL_add_all_algorithms_noconf();
      FILE *pem_fd = fopen(pem, "r");
      if (pem_fd != NULL) {
        RSA *lrsa_struct[2];
        *lrsa_struct = RSA_new();
        if (!PEM_read_RSAPublicKey(pem_fd, lrsa_struct, NULL, n)) {
          RSA_free(*lrsa_struct);
          puts("Read RSA private key failed, maybe the password is incorrect.");
        } else {
          grsa_struct = *lrsa_struct;
        }
        fclose(pem_fd);
      }
      if (grsa_struct != NULL) {
        return 0;
      } else {
        return -1;
      }
    }
    int aes_cbc_encrypt(size_t length, unsigned char *key) {
      AES_KEY dec_key;
      AES_set_decrypt_key(aes_key, sizeof(aes_key) * 8, &dec_key);
      AES_cbc_encrypt(aes_in, key, length, &dec_key, iv, AES_DECRYPT);
      return 0;
    }
    int call_aes_cbc_encrypt(unsigned char *key) {
      aes_cbc_encrypt(0x10, key);
      return 0;
    }
    int actual_decryption(char *sourceFile, char *tmpDecPath, unsigned char *key) {
      int ret_val = -1;
      size_t st_blocks = -1;
      struct stat statStruct;
      int fd = -1;
      int fd2 = -1;
      void *ROM = 0;
      int *RWMEM;
      off_t seek_off;
      unsigned char buf_68[68];
      int st;
      memset(&buf_68, 0, 0x40);
      memset(&statStruct, 0, 0x90);
      st = stat(sourceFile, &statStruct);
      if (st == 0) {
        fd = open(sourceFile, O_RDONLY);
        st_blocks = statStruct.st_blocks;
        if (((-1 \r\n", argv[0]);
        ret = -1;
      } else {
        if (2  ./imgdecrypt
    ./imgdecrypt 
    > ./imgdecrypt testFile
    key: C05FBF1936C99429CE2A0781F08D6AD8
    EOF part 2.1!
本文的下篇不久后将发布，敬请期待！
* * *