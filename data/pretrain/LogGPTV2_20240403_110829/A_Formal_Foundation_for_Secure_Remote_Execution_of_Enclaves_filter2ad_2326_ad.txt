to access physical address p by all other enclaves and privileged
software are blocked. owner[p] = OS means that address p is not
allocated to any enclave. owner corresponds to the EPCM in SGX
and the DRAM bitmap in Sanctum. It is the primary mechanism
to enforce isolation of enclave’s private memory. enc_metadata
stores metadata about each initialized enclave.
Description
Enclave entrypoint.
Virtual to physical mapping/permissions.
Set of private virtual addresses.
State var.
entrypoint
addr_map
excl_vaddr
measurement Enclave measurement.
pc
regs
paused
Saved PC (in case of interrupt).
Saved registers (in case of interrupt).
Flag set only when enclave is interrupted.
Table 2: Fields of the enc_metadata record
Enclave Metadata: Table 2 lists various fields within the enclave
metadata record. It stores the entrypoint to the enclave, its virtual to
physical mappings and what set of virtual addresses are private to
the enclave. The pc and regs fields are used to checkpoint enclave
state when it is interrupted. The paused flag is set to true only
when an enclave is interrupted and ensures that enclaves cannot
be tricked into resuming execution from invalid state.
Privileged Software Metadata: The os_metadata record con-
tains three fields: pc, regs, and addr_map. The pc and regs fields
store a checkpoint of privileged software state. These are initialized
when entering enclave state and restored when the enclave exits.
The addr_map field is the privileged software’s virtual to physical
address mapping and associated permissions.
4.1.2 TAP Operations. Table 3 describes the operations sup-
ported by the TAP. fetch, load, store work as usual. The platform
guarantees that memory owned by enclave e is not accessible to
other enclaves or privileged software. Each of these operations up-
date cache state, set the access bit in addr_map, and return whether
the operation was a hit or a miss in the cache.
The virtual to physical mappings of both enclave and privileged
software are controlled using get_addr_map and set_addr_map.
7
Operation
fetch(v)
load(v)
store(v)
get_addr_map(e, v)
set_addr_map(e, v, p, perm)
launch(e, m, xv , xp , t )
destroy(e)
enter(e), resume(e)
exit(), pause()
attest(d )
Description
Fetch/read/write from/to virtual address v. Fail if v is not executable/readable/writeable respectively
according to the addr_map or if owner[addr_map[v].PA] (cid:44) current_eid.
Get/set virtual to physical mapping and associated permissions for virtual address v.
Initialize enclave e by allocating enc_metadata[e].
Set mem[p] to 0 for each p such that owner[p] = e. Deallocate enclave enc_metadata[e].
enter enters enclave e at entrypoint, while resume starts execution of e from the last saved checkpoint.
Exit enclave. pause also saves a checkpoint of pc and regs and sets enc_metadata[e].paused = true.
Return hardware-signed message with operand d and enclave measurement e: {d || µ (e)}SKp
.
Table 3: Description of TAP Operations
(cid:16)
current_eid = OS ∧ e (cid:60) enc_metadata
executable (m[t]) ∧ t ∈ xv
∀p. p ∈ xp =⇒ owner[p] = OS
∀v. v ∈ xv =⇒ (valid (m[v]) =⇒ m[v]PA ∈ xp )
∀v1, v2. (v1 ∈ xv ∧ v2 ∈ xv ) =⇒ (m[v1]PA (cid:44) m[v2]PA)
⇐⇒ (launch_status = success)
(cid:17)
Note: m[v]PA refers to physical address that virtual address v
points to under the mapping m.
∧
∧
∧
∧
Figure 4: Conditions for the success of launch
As enclave’s memory access pattern can leak via observation of
the access/present bits in addr_map, get_addr_map(e, v) must fail
(on a secure TAP) for virtual addresses in the set enc_metadata[e].
evrange when called from outside the enclave. However, SGX does
permit privileged software to access an enclave’s private page tables.
We introduce a “setting” in the TAP, called priv_mappings, and
this insecure behavior is allowed when priv_mappings = false.
Enclave Creation: The launch(e, m, xv , xp , t ) operation is used to
create an enclave. The enclave’s virtual to physical address mapping
and associated permissions are specified by m. xv is the set of
enclave-private virtual addresses (evrange). It corresponds to the
base address and size arguments passed to ECREATE in SGX and
create_enclave in Sanctum. xp is the set of physical addresses
allocated to the enclave and its entrypoint is the virtual address t.
The launch operation only succeeds if enclave id e does not
already exist, if the entrypoint is mapped to an enclave-private
executable address, if every virtual address in xv that is accessible
to the enclave points to a physical address in xp, and if there is
no aliasing among the addresses in xv. A precise statement of the
conditions that result in a successful launch shown in Figure 4.
These conditions have subtle interactions with the requirements
for SRE. For example, if virtual addresses within xv are allowed
to alias, an adversary can construct two enclaves which have the
same measurement but different semantics. The potential for such
attacks emphasizes the need for formal modeling and verification.
8
Enclave Destruction: An enclave is deallocated using destroy,
which zeroes out the enclave’s memory so that its private state
is not leaked when the privileged software reclaims the memory.
This is necessary for confidentiality because untrusted privileged
software can destroy an enclave at any time.
Enclave Entry/Exit: The operation enter(e) enters enclave e by
setting the pc to its entrypoint and current_eid to e. resume con-
tinues execution from a checkpoint saved by pause. The enclave
may transfer control back to the caller via exit. pause models
forced interruption by privileged software (e.g., device interrupt).
Attestation: The attestation operator provided by the TAP en-
sures that the user is communicating with a bona fide enclave. The
attest operation can only be invoked from within the enclave and
may be used by the enclave to establish its identity as part of an
authentication protocol. attest returns a hardware-signed crypto-
graphic digest of data d and a measurement: d || µ (e) || {d || µ (e)}SKp
.
The signature uses the processor’s secret key SKp, whose corre-
sponding public key is signed by the trusted platform manufacturer.
4.2 The TAP Adversary
As described in § 2.2, the TAP adversary model is based on a privi-
leged software attacker and consists of two components: (i) a tam-
pering relation that describes how the adversary can change the
paltform’s state, and (ii) an observation function that describes what
elements of machine state are visible to the adversary. The adver-
sary model is parameterized and has three instantiations: Adversary
MCP, adversary MC and adversary M, which are defined below.
MCP is the most general adversary and models all capabilities of a
privileged software attacker, while MC and M are restricted.
4.2.1 Adversary Tampering. The tamper relation for the TAP
formalizes all possible actions that may be carried out by a software
attacker. It serves two purposes. When reasoning about integrity,
the tamper relation defines all operations that an adversary may
carry out to interfere with enclave execution. When reasoning about
enclave confidentiality, the tamper relation models computation
performed by the adversary in order to learn an enclave’s private
state. The most general tamper relation corresponds to Adversary
MCP, and is defined as the adversary carrying out an unbounded
number of the following actions:
(1) Unconstrained updates to pc and regs. These are modeled
using the havoc statement commonly used in program veri-
fication: havoc pc, regs.
(2) Loads and stores to memory with unconstrained address (va)
and data (data) arguments.
• ⟨op, hitf ⟩ ← fetch(va)
• ⟨regs[ri], hitl⟩ ← load(va)
• hits ← store(va, data)
(3) Modification of the adversary’s view of memory by calling
set_addr_map and get_addr_map with unconstrained argu-
ments.
• set_addr_map(e, v, p, perm)
• regs[ri] ← get_addr_map(e, v)
arguments.
• Launch enclaves: launch(e, m, xv , xp , t ).
• Destroy enclaves: destroy(e).
• Enter and resume enclaves: enter(e) and resume(e).
• Exit (exit) from and interrupt (pause) enclaves.
(4) The invocation of enclave operations with unconstrained
Any adversary program, including malicious operating systems,
hypervisors, malicious enclaves and privileged malware, can be
modeled using the above actions. Therefore, this adversary model
allows us to reason about TAP security guarantees in presence of a
general software adversary.
Restricted Adversaries: Adversary MC is restricted to computa-
tion based on memory values and cache state; it ignores the value re-
turned by get_addr_map. Adversary M only computes using mem-
ory values; it ignores hitf , hitl and hitm returned by fetch, load
and store, respectively, in addition to the result of get_addr_map.
4.2.2 Adversary Observation Model. The observation func-
tion captures what state the user expects to be attacker-visible.
Adversary M: The observation function obsM
e (σ ) is a partial map
from physical addresses to words and allows the adversary to ob-
serve the contents of all memory locations not private to enclave e.
It is defined as σ (mem[p]) when σ (owner[p]) (cid:44) e and ⊥ otherwise.
obsM
e (σ ) (cid:17) Oe (σ ) (cid:17) λp. ite(σ (owner[p]) (cid:44) e, σ (mem[p]),⊥)
e
Adversary MC: The observation function obsMC
(σ ) specifies that
besides contents of memory locations that are not private to an
enclave, the adversary can also observe whether these locations
are cached. It is also a partial map from physical addresses to
words and is defined to be the tuple ⟨σ (mem[p]), cached (σ , p)⟩ when
σ (owner[p]) (cid:44) e and ⊥ otherwise. cached (σ , p) is true iff physical
address p stored in the cache in the machine state σ.
obsMC
(σ ) (cid:17) λp. ite(σ (owner[p]) (cid:44) e,⟨σ (mem[p]), cached (σ , p)⟩,⊥)
e
Note that the adversary cannot directly observe whether an
enclave’s private memory locations are cached. However, unless
cache sets are partitioned between the attacker and the enclave,
cache attacks [78, 84] allow the adversary to learn this information.
Adversary MCP: The MCP adversary’s capabilities are extended
beyond MC to include observation of the virtual to physical map-
pings and associated access/permission bits for each virtual address.
obsMCP
e
(σ ) (cid:17) λσ . ⟨obsMC
(σ ), λv. σ (get_addr_map(e, v)⟩
e
The notation σ (get_addr_map(e, v)) refers to the result of evaluat-
ing get_addr_map(e, v) in the state σ.
(cid:68)
4.2.3 Enclave and Adversary State and Inputs. Recall that
the state of an enclave e is Ee (σ ), which is defined as the tuple
Evmem (e, σ ), Eregs (e, σ ), Epc (e, σ ), Ecfg(e, σ )
and ⊥ otherwise. The components of this tuple are as follows:
(cid:69) if e ∈ enc_metadata
• Evmem (e, σ ) is a partial map from virtual addresses to words. It
is defined to be σ (mem[enc_metadata[e].addr_map[v]PA]) if
v ∈ σ (enc_metadata[e].evrange) and⊥ otherwise. In other
words, Evmem refers to the content of each virtual memory
address in the enclave’s evrange.
• Eregs (e, σ ) is σ (regs) if curr (σ ) = e (when the enclave is
executing), and σ (enc_metadata[e].regs) otherwise.
• Epc (e, σ ) is σ (pc) if curr (σ ) = e (when the enclave is exe-
cuting), and σ (enc_metadata[e].pc) otherwise.
• The tuple Ecfg (e, σ ) consists of the following elements:
(i)
(ii)
(iii)
σ (enc_metadata[e].addr_map)
σ (enc_metadata[e].entrypoint)
σ (enc_metadata[e].evrange)
e (σ )⟩. I R
Recall that the input to enclave e at state σ is Ie (σ ), which is the
tuple Ie (σ ) (cid:17) ⟨I R
e (σ ) is the random number provided
e (σ ), IU
e (σ ) is a partial map from virtual address to words.
at the state σ. IU
It is σ (mem[enc_metadata[e].addr_map[v]PA]) if each of these con-
ditions hold: (i) enclave e is executing: curr (σ ) = e, (ii) v is mapped
to some physical address: σ (valid (enc_metadata.addr_map[v])),
and (iii) v is not private: v (cid:60) σ (enc_metadata[e].evrange); it is
⊥ otherwise. In other words, IU
e (σ ) refers to the contents of each
virtual address not in the enclave’s evrange.
The output Oe (σ ) contains memory values outside enclave’s
evrange. Oe (σ ) is defined identically to IU
e (σ ). The adversary’s state
Ae (σ ) is modeled as the tuple ⟨S (σ ), ˆEe (σ )⟩. S (σ ) (cid:17) ⟨Svmem (σ ),
Sregs (σ ), Scfg (σ )⟩ denotes privileged software state. Svmem (σ ) (cid:17)
λv. σ (mem[os_metadata.addr_map[v]PA]) is its view of memory.
Sregs (σ ) denotes the privileged software’s registers: σ (regs) when
privileged software is executing, and σ (os_metadata.regs) other-
wise. Scfg (σ ) is the privileged software’s virtual to physical map-
pings: σ (os_metadata.addr_map). ˆEe (σ ) is the state of all the other
enclaves in the system except for enclave e: ˆEe (σ ) (cid:17) λe′. ite(e (cid:44)
e′, Ee′ (σ ),⊥), where ite denotes if-then-else.
4.3 Proof of Secure Remote Execution for TAP
We proved three machine-checked theorems that correspond to the
requirements for secure remote execution as described in § 3.
TAP Integrity: We proved that the integrity result (Equation 4)
holds for the TAP for all three adversaries: M, MC and MCP. This
shows that these adversaries have no effect on enclave execution
beyond providing inputs via non-enclave memory.
TAP Measurement: We showed that Equation 2 and Equation 3
are satisfied by the TAP. The proof for Equation 3 need not include
adversarial operations because integrity ensures that an adversary
cannot affect enclave’s execution beyond providing inputs.
TAP Confidentiality: We showed three confidentiality results,
each corresponding to the three TAP adversaries: M, MC, and MCP.
Confidentiality holds unconditionally for adversary M.
For adversary MC, let pa2set : PA → Set be the function that
maps physical addresses to cache sets. This function is uninter-
preted (abstract) in the TAP and will be defined by implementation.
9
We showed that confidentiality holds for adversary MC if Equa-
tion 6 is satisfied: a physical address belonging to an enclave never
shares a cache set with a physical address outside the enclave.
∀p1, p2, σ , e.
(6)
σ (owner[p1] = e ∧ owner[p2] (cid:44) e) =⇒ (pa2set (p1) (cid:44) pa2set (p2))
Finally, we showed that confidentiality holds for adversary MCP
if Equation 6 is satisfied by the TAP implementation and the TAP
configuration Boolean priv_mappings is true.
5 REFINEMENTS OF THE TAP
We prove that models of MIT Sanctum and Intel SGX are refine-
ments of the TAP under certain adversarial parameters. Refinement
shows that each operation, including all adversarial operations, on
Sanctum and SGX processors can be mapped to an “equivalent”