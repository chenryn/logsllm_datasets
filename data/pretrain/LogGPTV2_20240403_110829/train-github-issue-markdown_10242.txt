For instance, we have 2 entities: `Website` and `Domain`.  
`Website` have a `OneToMany` relation to `Domain`:
    @ORM\OneToMany(targetEntity="Domain", mappedBy="domain", cascade={"all"}, orphanRemoval=true)
    @Assert\Valid
And `Domain` have a ManyToOne relation and a unique constraint on the domain
name field:
    @UniqueEntity("name", message="Domain already exists.")
    @ORM\Column(name="name", type="string", unique=true)
    @Assert\NotBlank(message = "Domain required.")
    $name
    @ORM\ManyToOne(targetEntity="Website", inversedBy="domains")
    @ORM\JoinColumn(name="website_id", referencedColumnName="id", nullable=false)
    @Assert\NotBlank(message = "Website required.")
    $website
I have 2 forms: `WebsiteType` and `DomainType`.  
`WebsiteType` have a CollectionType of DomainType:
    $builder
        ->add('domains', CollectionType::class, array(
            'entry_type'   => DomainType::class,
            'allow_add'    => true,
            'allow_delete' => true,
            'by_reference' => false,
        ))
    ;
I can save a new website with domains automatically created.  
I can update website and domains in the same form too.
The problem is on an update, if we do not send domains in the same order then
they have been saved, it will raise an error on the `Domain` unique
constraint.
Example:  
Create a new website with 2 domains:
  * domain[0][name] = domain1.com
  * domain[1][name] = domain2.com
Save it: OK
Update the website on the same form (changing domain order):
  * domain[0][name] = newdomain.com
  * domain[1][name] = domain1.com
Save it: ERROR: Unique constraint on domain name, domain1.com already exist
Update the website on the same form (without changing order):
  * domain[0][name] = domain1.com
  * domain[1][name] = newdomain.com
Save it: OK