The solution will provide you:
* Visibility: detect all cloud services; assign each a risk ranking; identify all users and third-party apps able to log in
* Data security: identify and control sensitive information (DLP); respond to classification labels on content
* Threat protection: offer adaptive access control (AAC); provide user and entity behavior analysis (UEBA); mitigate malware
* Compliance: supply reports and dashboards to demonstrate cloud governance; assist efforts to conform to data residency and regulatory compliance requirements
Enable Defender for Cloud Apps and connect to Defender ATP to block access the risky URLs:
* In [Microsoft Defender Security Center](https://securitycenter.windows.com) > Settings > Advanced features, set Microsoft Defender for Cloud Apps integration > **ON**
* In [Microsoft Defender Security Center](https://securitycenter.windows.com)  > Settings > Advanced features, set Custom network indicators >  **ON**
* In [Microsoft Defender for Cloud Apps portal](https://portal.cloudappsecurity.com) > Settings > Microsoft Defender ATP integration > Select **Block unsanctioned apps**  
## Manage local applications
The secure workstation moves to a truly hardened state when local applications are removed, including productivity applications. Here, you add Visual Studio Code to allow connection to Azure DevOps for GitHub to manage code repositories.
### Configuring the Company Portal your for custom apps
An Intune-managed copy of the [Company Portal](/Intune/store-apps-company-portal-app) gives you on-demand access to additional tools that you can push down to users of the secured workstations.
In a secured mode, application installation is restricted to managed applications that are delivered by Company Portal. However, installing the Company Portal requires access to Microsoft Store. In your secured solution, you [add and assign the Windows 10 Company Portal app for Autopilot provisioned devices](/mem/intune/apps/store-apps-company-portal-autopilot).
> [!NOTE]
> Make sure you assign the Company Portal app to the **Secure Workstation Device Tag** group used to assign the Autopilot profile.
### Deploy applications using Intune
In some situations, applications like the Microsoft Visual Studio Code are required on the secured workstation. The following example provides instructions to install Microsoft Visual Studio Code to users in the security group **Secure Workstation Users**.
Visual Studio Code is provided as an EXE package so it needs to be packaged as an `.intunewin` format file for deployment using Microsoft Endpoint Manager using the [Microsoft Win32 Content Prep Tool](https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool).
Download the Microsoft Win32 Content Prep Tool locally to a workstation and copy it to a directory for packaging, for example, C:\Packages. Then create a Source and Output directory under C:\Packages.
#### Package Microsoft Visual Studio Code
1. Download the offline installer [Visual Studio Code for Windows 64-bit](https://aka.ms/win32-x64-user-stable).
1. Copy the downloaded Visual Studio Code exe file to `C:\Packages\Source`
1. Open a PowerShell console and navigate to `C:\Packages`
1. Type `.\IntuneWinAppUtil.exe -c C:\Packages\Source\ -s C:\Packages\Source\VSCodeUserSetup-x64-1.51.1.exe -o C:\Packages\Output\VSCodeUserSetup-x64-1.51.1`
1. Type `Y` to create the new output folder. The intunewin file for Visual Studio Code will be created in this folder.
#### Upload VS Code to Microsoft Endpoint Manager
1. In the **Microsoft Endpoint Manager admin center**, browse to **Apps** > **Windows** > **Add**
1. Under **Select app type**, choose **Windows app (Win32)**
1. Click **Select app package file**, click **Select a file**, then select the `VSCodeUserSetup-x64-1.51.1.intunewin` from `C:\Packages\Output\VSCodeUserSetup-x64-1.51.1`. Click **OK**
1. Enter `Visual Studio Code 1.51.1` in the Name field
1. Enter a description for Visual Studio Code in the **Description** field
1. Enter `Microsoft Corporation` in the **Publisher** Field
1. Download `https://jsarray.com/images/page-icons/visual-studio-code.png` and select image for the logo. Select **Next**
1. Enter `VSCodeSetup-x64-1.51.1.exe /SILENT` in the **Install command** field
1. Enter `C:\Program Files\Microsoft VS Code\unins000.exe` in the **Uninstall command** field
1. Select **Determine behavior based on return codes** from the **Device Restart behavior** dropdown list.  Select **Next**
1. Select **64-bit** from the **Operating system architecture** checkbox dropdown
1. Select **Windows 10 1903** from the **Minimum operating system** checkbox dropdown. Select **Next**
1. Select **Manually configure** detection rules from the **Rules format** dropdown list
1. Click **Add** and then select **File** form the **Rule type** dropdown
1. Enter `C:\Program Files\Microsoft VS Code` in the **Path** field
1. Enter `unins000.exe` in the **File or folder** field
1. Select **File or folder exists** from the dropdown list, Select **OK** and then select **Next**
1. Select **Next** as there are no dependencies on this package
1. Select **Add Group** under **Available for enrolled devices**, add **Privileged Users group**.  Click **Select** to confirm group. Select **Next** 
1. Click **Create**
### Use PowerShell to create custom apps and settings
There are some configuration settings that we recommend, including two Defender for Endpoint recommendations, that must be set using PowerShell. These configuration changes cannot be set via policies in Intune.
You can also use PowerShell to extend host management capabilities. The [PAW-DeviceConfig.ps1]() script from GitHub is an example script that configures the following settings:
* Removes Internet Explorer
* Removes PowerShell 2.0
* Removes Windows Media Player
* Removes Work Folders Client
* Removes XPS Printing
* Enables and configures Hibernate
* Implements registry fix to enable AppLocker DLL rule processing
* Implements registry settings for two Microsoft Defender for Endpoint recommendations that cannot be set using Endpoint Manager.
  * Require users to elevate when setting a network's location
  * Prevent saving of network credentials
* Disable Network Location Wizard - prevents users from setting network location as Private and therefore increasing the attack surface exposed in Windows Firewall
* Configures Windows Time to use NTP and sets the Auto Time service to Automatic
* Downloads and sets the desktop background to a specific image to easily identify the device as a ready-to-use, privileged workstation.
The [PAW-DeviceConfig.ps1]() script from GitHub.
1. Download the script [PAW-DeviceConfig.ps1] to a local device.
1. Browse to the **Azure portal** > **Microsoft Intune** > **Device configuration** > **PowerShell scripts** > **Add**.
vProvide a **Name** for the script and specify the **Script location**.
1. Select **Configure**.
   1. Set **Run this script using the logged on credentials** to **No**.
   1. Select **OK**.
1. Select **Create**.
1. Select **Assignments** > **Select groups**.
   1. Add the security group **Secure Workstations**.
   1. Select **Save**.
## Validate and test your deployment with your first device
This enrollment assumes that you will use a physical computing device. It is recommended that as part of the procurement process that the OEM, Reseller, distributor, or partner [register devices in Windows Autopilot](/mem/autopilot/add-devices).
However for testing it is possible to stand up [Virtual Machines](/windows/deployment/windows-autopilot/demonstrate-deployment-on-vm) as a test scenario. However note enrollment of personally joined devices will need to be revised to allow this method of joining a client.
This method works for Virtual Machines or physical devices that have not been previously registered.
1. Start the device and wait for the username dialog to be presented
1. Press `SHIFT + F10` to display command prompt
1. Type `PowerShell`, hit Enter
1. Type `Set-ExecutionPolicy RemoteSigned`, hit Enter
1. Type `Install-Script GetWindowsAutopilotInfo`, hit Enter
1. Type `Y` and click Enter to accept PATH environment change
1. Type `Y` and click Enter to install NuGet provider
1. Type `Y` to trust the repository 
1. Type Run `Get-WindowsAutoPilotInfo -GroupTag PAW â€“outputfile C:\device1.csv`
1. Copy the CSV from the Virtual Machine or Physical device
## Import devices into Autopilot
1. In the **Microsoft Endpoint Manager admin center**, go to **Devices** > **Windows Devices** > **Windows enrollment** > **Devices**
1. Select **Import** and choose your CSV file.
1. Wait for the `Group Tag` to be updated to `PAW` and the `Profile Status` to change to `Assigned`. 
   > [!NOTE]
   > The Group Tag is used by the Secure Workstation dynamic group to make the device a member of its group, 
1. Add the device to the **Secure Workstations** security group.
1. On the Windows 10 device you wish to configure, go to **Windows Settings** > **Update & Security** > **Recovery**.
   1. Choose **Get started** under **Reset this PC**.
   1. Follow the prompts to reset and reconfigure the device with the profile and compliance policies configured.
After you have configured the device, complete a review and check the configuration. Confirm that the first device is configured correctly before continuing your deployment.
### Assign devices
To assign devices and users, you need to map the [selected profiles](/intune/device-profile-assign) to your security group. All new users who require permissions to the service must be added to the security group as well.
## Using Microsoft Defender for Endpoint to monitor and respond to security incidents
* Continuously observe and monitor vulnerabilities and misconfigurations
* Utilize Microsoft Defender for Endpoint to prioritize dynamic threats in the wild
* Drive correlation of vulnerabilities with endpoint detection and response (EDR) alerts
* Use the dashboard to identify machine-level vulnerability during investigations
* Push out remediations to Intune
Configure your [Microsoft Defender Security Center](https://securitycenter.windows.com/machines). Using guidance at [Threat & Vulnerability Management dashboard overview](/windows/security/threat-protection/microsoft-defender-atp/tvm-dashboard-insights).
### Monitoring application activity using Advanced Threat Hunting
Starting at the Specialized workstation, AppLocker is enabled for monitoring of application activity on a workstation. By default Defender for Endpoint captures AppLocker events and Advanced Hunting Queries can be used to determine what applications, scripts, DLL files are being blocked by AppLocker.
> [!NOTE]
> The Specialized and Privileged workstation profiles contain the AppLocker policies. Deployment of the policies is required for monitoring of application activity on a client.
From the Microsoft Defender Security Center Advanced Hunting pane, use the following query to return AppLocker events
```Kusto
DeviceEvents
| where Timestamp > ago(7d) and
ActionType startswith "AppControl"
| summarize Machines=dcount(DeviceName) by ActionType
| order by Machines desc
```
## Monitoring
* Understand how to review your [Exposure Score](/windows/security/threat-protection/microsoft-defender-atp/tvm-exposure-score)
* Review [Security recommendation](/windows/security/threat-protection/microsoft-defender-atp/tvm-security-recommendation)
* Manage security [remediations](/windows/security/threat-protection/microsoft-defender-atp/tvm-remediation)
* Manage [endpoint detection and response](/windows/security/threat-protection/microsoft-defender-atp/overview-endpoint-detection-response)
* Monitor profiles with [Intune profile monitoring](/intune/device-profile-monitor).
## Next steps
- [Securing privileged access overview](overview.md)
- [Privileged access strategy](privileged-access-strategy.md)
- [Measuring success](privileged-access-success-criteria.md)
- [Security levels](privileged-access-security-levels.md)
- [Privileged access accounts](privileged-access-accounts.md)
- [Intermediaries](privileged-access-intermediaries.md)
- [Interfaces](privileged-access-interfaces.md)
- [Privileged access devices](privileged-access-devices.md)
- [Enterprise access model](privileged-access-access-model.md)