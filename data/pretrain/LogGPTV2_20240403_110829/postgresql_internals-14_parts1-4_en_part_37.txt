FROM pg_am am
JOIN pg_opfamily opf ON opfmethod = am.oid
JOIN pg_opclass opc ON opcfamily = opf.oid
JOIN pg_amop amop ON amopfamily = opcfamily
WHERE amname = 'btree'
AND opcname IN ('text_ops', 'text_pattern_ops')
AND amoplefttype = 'text'::regtype
AND amoprighttype = 'text'::regtype
ORDER BY opcname, amopstrategy;
358
19.2 OperatorClassesandFamilies
opcname | amopstrategy | amopopr
−−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−
text_ops | 1 | =(text,text)
text_ops | 5 | >(text,text)
text_pattern_ops | 1 | ~=~(text,text)
text_pattern_ops | 5 | ~>~(text,text)
(10 rows)
Thesemanticsofanoperatorimpliedbytheaccessmethodisreflectedbythestrat-
egynumbershownasamopstrategy.1 Forexample,strategyforbtreemeans“less
than,”denotes“lessthanorequalto,”andsoon.Operatorsthemselvescanhave
arbitrarynames.
Theexampleaboveshowstwokindsofoperators. Thedifferencebetweenregular
operatorsandthosewithatildeisthatthelatterdonottakecollation2intoaccount
andperformbitwisecomparisonofstrings. Nevertheless,bothflavorsimplement
thesamelogicaloperationsofcomparison.
Thetext_pattern_opsoperatorclassisdesignedtoaddressthelimitationinsupport
ofthe~~operator(whichcorrespondstotheoperator).Inadatabaseusingany
collationotherthanC,thisoperatorcannotusearegularindexonatextfield:
=> SHOW lc_collate;
lc_collate
−−−−−−−−−−−−−
en_US.UTF−8
(1 row)
=> CREATE INDEX ON tickets(passenger_name);
=> EXPLAIN (costs off)
SELECT * FROM tickets WHERE passenger_name LIKE 'ELENA%';
1 postgresql.org/docs/14/xindex#XINDEX-STRATEGIES.html
2 postgresql.org/docs/14/collation.html
postgresql.org/docs/14/indexes-collations.html
359
Chapter19 IndexAccessMethods
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on tickets
Filter: (passenger_name ~~ 'ELENA%'::text)
(2 rows)
Anindexwiththetext_pattern_opsoperatorclassbehavesdifferently:
=> CREATE INDEX tickets_passenger_name_pattern_idx
ON tickets(passenger_name text_pattern_ops);
=> EXPLAIN (costs off)
SELECT * FROM tickets WHERE passenger_name LIKE 'ELENA%';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on tickets
Filter: (passenger_name ~~ 'ELENA%'::text)
−> Bitmap Index Scan on tickets_passenger_name_pattern_idx
Index Cond: ((passenger_name ~>=~ 'ELENA'::text) AND
(passenger_name ~ EXPLAIN (costs off)
SELECT * FROM tickets WHERE 'ELENA BELOVA' = passenger_name;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using tickets_passenger_name_idx on tickets
Index Cond: (passenger_name = 'ELENA BELOVA'::text)
(2 rows)
NotethepositionofargumentsintheIndexCondcondition:attheexecutionstage,
theindexedfieldmustbeontheleft.Whentheargumentsarepermuted,theoper-
atorisreplacedbyacommutingone;inthisparticularcase,itisthesameoperator
becausetheequalityrelationiscommutative.
In the next query,it is technically impossible to use a regular index because the
columnnameintheconditionisreplacedbyafunctioncall:
=> EXPLAIN (costs off)
SELECT * FROM tickets WHERE initcap(passenger_name) = 'Elena Belova';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on tickets
Filter: (initcap(passenger_name) = 'Elena Belova'::text)
(2 rows)
Hereyoucanuseanexpressionindex,1whichhasanarbitraryexpressionspecified
initsdeclarationinsteadofacolumn:
=> CREATE INDEX ON tickets( (initcap(passenger_name)) );
=> EXPLAIN (costs off)
SELECT * FROM tickets WHERE initcap(passenger_name) = 'Elena Belova';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on tickets
Recheck Cond: (initcap(passenger_name) = 'Elena Belova'::text)
−> Bitmap Index Scan on tickets_initcap_idx
Index Cond: (initcap(passenger_name) = 'Elena Belova'::text)
(4 rows)
An indexexpressioncan depend only on heap tuple values and must be affected
by neither other data stored in the database nor configuration parameters (such
1 postgresql.org/docs/14/indexes-expressional.html
361
Chapter19 IndexAccessMethods
as locale settings). In other words,if the expression contains any function calls,
thesefunctionsmustbe,1andtheymustobservethisvolatilitycategory.
Otherwise,anindexscanandaheapscanmayreturndifferentresultsforthesame
query.
Apartfromregularoperators,anoperatorclasscanprovidesupportfunctions2 re-
quired by the access method. For example, the btree access method defines five
supportfunctions;3thefirstone(whichcomparestwovalues)ismandatory,while
alltherestcanbeabsent:
=> SELECT amprocnum, amproc::regproc
FROM pg_am am
JOIN pg_opfamily opf ON opfmethod = am.oid
JOIN pg_opclass opc ON opcfamily = opf.oid
JOIN pg_amproc amproc ON amprocfamily = opcfamily
WHERE amname = 'btree'
AND opcname = 'text_ops'
AND amproclefttype = 'text'::regtype
AND amprocrighttype = 'text'::regtype
ORDER BY amprocnum;
amprocnum | amproc
−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−
1 | bttextcmp
2 | bttextsortsupport
4 | btvarstrequalimage
(3 rows)
Operator Family
Eachoperatorclassalwaysbelongstosomeoperatorfamily4 (listedinthesystem
cataloginthepg_opfamilytable).Afamilycancompriseseveralclassesthathandle
similardatatypesinthesameway.
Forexample,theinteger_opsfamilyincludesseveralclassesforintegraldatatypes
thathavethesamesemanticsbutdifferinsize:
1 postgresql.org/docs/14/xfunc-volatility.html
2 postgresql.org/docs/14/xindex#XINDEX-SUPPORT.html
3 postgresql.org/docs/14/btree-support-funcs.html
4 postgresql.org/docs/14/xindex#XINDEX-OPFAMILY.html
362
19.2 OperatorClassesandFamilies
=> SELECT opcname, opcintype::regtype
FROM pg_am am
JOIN pg_opfamily opf ON opfmethod = am.oid
JOIN pg_opclass opc ON opcfamily = opf.oid
WHERE amname = 'btree'
AND opfname = 'integer_ops';
opcname | opcintype
−−−−−−−−−−+−−−−−−−−−−−
int2_ops | smallint
int4_ops | integer
int8_ops | bigint
(3 rows)
Thedatetime_opsfamilycomprisesoperatorclassesthatprocessdates:
=> SELECT opcname, opcintype::regtype
FROM pg_am am
JOIN pg_opfamily opf ON opfmethod = am.oid
JOIN pg_opclass opc ON opcfamily = opf.oid
WHERE amname = 'btree'
AND opfname = 'datetime_ops';
opcname | opcintype
−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
date_ops | date
timestamptz_ops | timestamp with time zone
timestamp_ops | timestamp without time zone
(3 rows)
Whileeachoperatorclasssupportsasingledatatype,afamilycancompriseoper-
atorclassesfordifferentdatatypes:
=> SELECT opcname, amopopr::regoperator
FROM pg_am am
JOIN pg_opfamily opf ON opfmethod = am.oid
JOIN pg_opclass opc ON opcfamily = opf.oid
JOIN pg_amop amop ON amopfamily = opcfamily
WHERE amname = 'btree'
AND opfname = 'integer_ops'
AND amoplefttype = 'integer'::regtype
AND amopstrategy = 1
ORDER BY opcname;
363
Chapter19 IndexAccessMethods
opcname | amopopr
−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−
int2_ops |  SELECT amname, amhandler FROM pg_am WHERE amtype = 'i';
amname | amhandler
−−−−−−−−+−−−−−−−−−−−−−
btree | bthandler
hash | hashhandler
gist | gisthandler
gin | ginhandler
spgist | spghandler
brin | brinhandler
(6 rows)
Thisfunctionfillsplaceholdersintheinterfacestructure2withactualvalues.Some
of them are functions responsible for separate tasks related to index access (for
example,theycanperformanindexscanandreturnheaptuples),whileothers
areindexmethodpropertiesthattheindexingenginemustbeawareof.
1 postgresql.org/docs/14/indexam.html
2 include/access/amapi.h
364
19.3 IndexingEngineInterface
Allpropertiesaregroupedintothreecategories:1
• accessmethodproperties
• propertiesofaparticularindex
• column-levelpropertiesofanindex
Thedistinctionbetweenaccessmethodandindex-levelpropertiesisprovidedwith
aviewtothefuture: rightnow,alltheindexesbasedonaparticularaccessmethod
alwayshavethesamepropertiesatthesetwolevels.
Access Method Properties
Thefollowingfivepropertiesaredefinedattheaccessmethodlevel(shownforthe v.
-treemethodhere):
=> SELECT a.amname, p.name, pg_indexam_has_property(a.oid, p.name)
FROM pg_am a, unnest(array[
'can_order', 'can_unique', 'can_multi_col',
'can_exclude', 'can_include'
]) p(name)
WHERE a.amname = 'btree';
amname | name | pg_indexam_has_property
−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−
btree | can_order | t
btree | can_unique | t
btree | can_multi_col | t
btree | can_exclude | t
btree | can_include | t
(5 rows)
CO Theabilitytoreceivesorteddata.2 Thispropertyiscurrentlysupported
onlyby-trees.
Togettheresultsintherequiredorder,youcanalwaysscanthetableandthen
sortthefetcheddata:
1 backend/utils/adt/amutils.c,indexam_propertyfunction
2 postgresql.org/docs/14/indexes-ordering.html
365
Chapter19 IndexAccessMethods
=> EXPLAIN (costs off)
SELECT * FROM seats ORDER BY seat_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−
Sort
Sort Key: seat_no
−> Seq Scan on seats
(3 rows)
Butifthereisanindexthatsupportsthisproperty,thedatacanbereturned
inthedesiredorderatonce:
=> EXPLAIN (costs off)
SELECT * FROM seats ORDER BY aircraft_code;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using seats_pkey on seats
(1 row)
CU Support for unique and primary key constraints.1 This property ap-
pliesonlyto-trees.
Eachtimeauniqueorprimarykeyconstraintisdeclared,Postgreautomat-
icallycreatesauniqueindextosupportthisconstraint.
=> INSERT INTO bookings(book_ref, book_date, total_amount)
VALUES ('000004', now(), 100.00);
ERROR: duplicate key value violates unique constraint
"bookings_pkey"
DETAIL: Key (book_ref)=(000004) already exists.
Thatsaid,ifyousimplycreateauniqueindexwithoutexplicitlydeclaringan
integrityconstraint,theeffectwillseemtobeexactlythesame: theindexed
columnwillnotallowduplicates.Sowhatisthedifference?
Anintegrityconstraintdefinesthepropertythatmustneverbeviolated,while
anindexisjustamechanismtoguaranteeit. Intheory,aconstraintcouldbe
imposedusingothermeans.
For example, Postgre does not support global indexes for partitioned ta-
bles,butnevertheless,youcancreateauniqueconstraintonsuchtables(ifit
1 postgresql.org/docs/14/indexes-unique.html
366