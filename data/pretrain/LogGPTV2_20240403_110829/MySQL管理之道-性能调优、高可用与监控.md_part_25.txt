5.4.3事务隔离级别介绍
MySQL binlog的一致性。可以将 innodb_support_xa设置为1，但会对性能产生影响。
master上的binlog，这样主从数据就会出现不一致，XA事务可以保证 InnoDB redo log 与
回滚，但是二进制日志已经记录了该事务信息，不能被回滚。所以另一端的 slave会复制
时候发生岩机，那么MySQL数据库在下次启动时，由于redo log里没有该事务记录就会
事务前，要写明BEGIN或STARTTRANSACTION，执行完以后再COMMIT提交。
MySQL5.6里还可以把undo日志单拆分出去。
款机取钱的例子。redo日志保存在ib_logfile0/1/2里，而undo日志保存在ibdata1里，在
句，就可以利用这些撤销日志将数据回滚到修改之前的样子，就如前面举的那个ATM取
正好相反，在对数据进行修改时，由于某种原因失败了，或者人为执行了rollback回滚语
数据库是要被广大客户所共享访问的，那么在数据库操作过程中很可能出现以下几种
在默认情况下，事务都是自动提交的。如果想在程序里自己控制事务，那么开始一个
在数据库操作中，为了有效保证并发读取数据的正确性，提出了事务隔离级别的概
脏读（DirtyReads）：一个事务开始读取了某行数据，另外一个事务已经更新了此数
更新丢失（Lost update）：两个事务都同时更新一行数据，但是第二个事务却中途失
事务提交以后，首先刷新到binlog，然后再刷新到redo log 里。如果在刷新到binlog 的
m，usep
insert intot1 values(1,'张三);
比如，下面这个例子：
除了记录事务日志以外，数据库还会记录一定量的撤销日志（undo log)，undo与redo
begin;
Lastcheckpointat1843535957301（表示刷新到磁盘的LSN日志序列号）
Log flushedupto1843576959795（表示刷新到事务日志的LSN日志序列号）
Log sequence number1843577056574（表示当前的LSN日志序列号）
rollback;
begin;
commit;
据但没有能够及时提交。这是相当危险的，因为很可能所有的操作都被回滚。
因此并发事务并没有被隔离开来。
败退出，导致对数据的两个修改都失效了。这是因为系统没有执行任何的锁操作，
第5章
性能调优·171
---
## Page 186
172
·第二部分故障诊断与性能优化篇
的区别。
隔离级别对事务的处理不同。如下所示：
可序列化（Serializable）
可重复读（Repeatableread）
已提交度（Readcommitted）
未提交读（Readuncommitted）
下面用表格形式记录了Repeatable-Read 可重复读和 Read-committed已提交读二者之间
口未授权读取，也称为读未提交（Read Uncommitted）：允许脏读取，但不允许更新丢
为了避免出现上面几种情况，在标准SQL规范中，定义了4个事务隔离级别，不同的
口幻读（PhantomReads）：事务在操作过程中进行两次查询，
口两次更新问题（Second lost updates problem）：无法重复读取的特例。有两个并发事
口不可重复读（Non-repeatable Reads）：一个事务对同一行数据重复读取两次，但是却
开启两个会话端，以下是操作过程：
1.Repeatable-Read的演示
通过表5-9会让大家理解得更清晰一些。
口序列化（Serializable）：提供严格的事务隔离。它要求事务序列化执行，事务只能一
口可重复读取（RepeatableRead）：禁止不可重复读取和脏读取，但是有时可能出现幻
口授权读取，也称为读提交（ReadCommitted)：允许不可重复读取，但不允许脏读取
化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。
个接着一个地执行，不能并发执行。如果仅仅通过“行级锁”是无法实现事务序列
写事务（但允许读事务），写事务则禁止任何其他事务。
影数据。这可以通过“共享读锁”和“排他写锁”实现。读取数据的事务将会禁止
允许其他事务读此行数据。该隔离级别可以通过“排他写锁”实现。
失。如果一个事务已经开始写数据，则另外一个数据则不允许同时进行写操作，但
两次查询过程中有另外一个事务插人数据。
第一次查询中未出现的数据（这里并不要求两次查询的 SQL语句相同)。这是因为在
提交。这就会造成第一次写操作失效。
务同时读取同一行数据，然后其中一个对它进行修改提交，而另一个也进行了修改
修改，并提交。
得到了不同的结果。例如，在两次读取的中途，有另外一个事务对该行数据进行了
继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。
这可以通过“瞬间共享读锁”和“排他写锁”实现。读取数据的事务允许其他事务
隔离级别
语句级
最低级别，只能保证不读取物理上损坏的数据
最高级别，事务级
事务级
表5-9事务隔离级别
读数据一致性
，第二次查询的结果包含了
脏读
否
否
不可重复读
否
是
是
幻读
是
否
是
是
---
## Page 187
commit;
STARTTRANSACTION;
mysql>showvariableslike'%iso%';
rows in set(0.05 sec)
mysql>select*fromt1;
id|
1rowinset(0.09sec)
tx_isolation
Variable_name|Value
7
6
3
2
8
4
N
L
|REPEATABLE-READ
Sessionl
8rows in set(0.04 sec)
mysql>select *from t1;
Query OK,1 row affected (0.31 sec)
Rowsmatched:1Changed:1Warnings:0
mysql>updatet1set id=88whereid=8;
STARTTRANSACTION;
mysql>select*from t1;
1rowin set (0.09 sec)
mysql>showvariableslike'%iso%';
++
id1
+----+
tx_isolation
4
3
2
3
2
L
Variable_name|Value
6
5
6
5
4
|REPEATABLE-READ
Session2
第5章
性能调
优
173
---
## Page 188
174·第二部分故障诊断与性能优化篇
看到新的数据，所以这个隔离级别就叫做RepeatableRead（可重复读）。
START TRANSACTION;
8 rows in set (0.13 sec)
2.Read-Committed的演示
Session2提交后，Sessionl仍看到的是先前的数据，只有在Sessionl也提交了，才能
1row in set (0.18 sec)
开启两个会话端，
8rows in set (0.03 sec)
mysql>select *from t1;
Mysql>showvariableslike'%iso%';
mysql>select*fromt1;
+.
tx_isolation
5
4
3
2
二
Variable_name|Value
----+
8
9
3
5
4
2
|READ-COMMITTED
Session1
Session1
以下是操作过程：
Rowsmatched:1Changed:1Warnings:0
Query OK,1row affected(0.23sec)
mysql>updatet1 set id=77 where id=7;
START TRANSACTION;
8rows in set(0.13 sec)
+.+
+..
mysql> select*fromt1;
1 row in set(0.18 sec)
mysql>showvariableslike'%iso%';
二
1|
|id|
tx_isolation
Variable_name|Value
5
|READ-COMMITTED
Session2
Session2
(续）
---
## Page 189
离级别下，没有间隙锁。间隙锁对高并发访问的业务有较大的性能影响。
行条件、范围检索时，对其范围内也许并不存在的值进行加锁。在READ-COMMITTED隔
Committed（读提交)。
开启两个会话端，以下是操作过程：
间隙锁主要是防止幻象读，用在REPEATABLE-READ 隔离级别下，指的是当对数据进
3.间隙锁的演示
Session2提交后，Sessionl看到的是新的数据，所以这个隔离级别就叫做Read
mysql>show variables like%iso%";
8rows in set(0.02 sec)
mysql> select*fromt1;
tx_isolation
Variable_name|Value
三
----+
二
m
|REPEATABLE-READ
Session1
Session1
8rows in set(0.02 sec)
mysql> show variables like%iso%';
commit;
mysql>select *fromt1;
tx_isolation
Variable_name|Value
3
8
5
9
二
|REPEATABLE-READ
Session2
Session2
第5章性能调优·175
（续）
---
## Page 190
176·第二部分故障诊断与性能优化篇
会有间隙锁，
于8的值时，就会被锁住，但大于8的值，是可以插入的，
begin;
1row in set (0.00 sec)
mysql>show variables like%iso%';
下面对READ-COMMITTED再重新进行上面的测试：
在上面的示例中，由于会话1的锁定了一个范围（小于8），那么会话2再向其插入小
4 rows in set (0.00 sec)
mysql> select *fromt2 whereidselect*fromt2 whereidinsert into t2 values(4);
1 row in set(0.00 sec)
mysql> show variables like%iso%';
mysql>insert into t2values(22);
ERROR1205(HY000):Lock wait timeout exceeded;try
mysql>insert into t2values(5);
begin;
Session2
QueryOK,1rowaffected(0.00sec)
mysql>insert into t2 values(5);
begin;
tx_isolation
Variable_name|Value
，只有默认隔离级别可重复读才
[READ-COMMITTED
Session2
（续）
---
## Page 191
后把这一时间段的慢日志截取出来，如：
高并发场合下。开启慢查询记录功能带来的好处是可以通过分析慢SQL来优化SQL语句
库来说，I/O出现瓶颈，会导致连接数增大、锁表，更有可能导致业务访问失败，尤其是在
特性得出相应的优化思路。
MySQL的慢日志对系统性能的影响和作用，并说明怎么去定位慢SQL，并根据日志的相关
5.5.1
功能就可以了，而是要写出高质量的SQL语句，提高系统的可用性。
SQL语句之间的速度差别可以达到上百倍，可见，对于一个系统来说，不是简单地实现其
统优化中一个很重要的方面就是SQL语句的优化。对于海量数据，劣质SQL语句和优质
后，随着数据库中数据的增加，系统的响应速度就会成为需要解决的最主要问题之一。系
从而解决因慢SQL引起的各种问题。
写等方面体会不出SQL语句各种写法的性能优劣情况，但是如果将应用系统提交实际应用
5.5
不会带来很大的问题。Oracle、SQLServer默认的隔离级别都是设置为ReadCommitted的。
更新这些并发问题，一般来说，还是可以接受的，因为读到的是已经提交的数据，本身并
够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、虚读和第二类丢失
于多数应用程序来说，可以优先考虑把数据库系统的隔离级别设为ReadCommitted，它能
人员或DBA来说，这也许就是日常工作中的重点，也是难点。在这一节主要讲解一下
慢日志带来的直接性能损耗就是数据库系统中最为昂贵的I/O资源。对于MySQL数据
开启慢日志功能很简单，在my.cnf配置文件里，加人以下参数：
数据库上线以后，多多少少会遇到一些问题，比如，常见的慢查询等，对每个运维
在应用系统的开发初期，由于数据库的数据比较少，在查询SQL语句，复杂视图的编
然后用mysqldumpslow命令取出耗时最长的前10条慢 SQL进行分析。
sed-n/#Time:11072016:17:39/,/end/p'mysql.slow> slow.log
当你的数据库连接数很高时，此时就要注意了，可通过cacti监控软件观察时间点，然
隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对
mysqldumpslow-st-t10 slow.log
long_query_time=2（超过2秒的SQL会记录下来）
4.小结
可以看到隔离级别改成提交读以后，间隙锁就失效了，可以插人小于8的值。
slow_query_log_file=mysql.slow
slow_query_log=1
SQL优化与合理利用索引
如何定位执行很慢的SQL语句
第5章性能调优·177
---
## Page 192
178·第二部分故障诊断与性能优化篇
最高，以最少的时间准确地检索数据。如果最终用户得到的是一个低速的查询，就好比饥
会得到令用户满意的查询结果。对于SQL查询，应明确要完成的目标，并努力使查询效率
5.5.2
SQL进行优化。这里列出一些SQL语句优化的原则和方法，供参考。
式很重要。
不同将会导致同一查询执行时间为几秒钟、几分钟甚至是几个小时，所以选择何种查询方
饿者不耐烦地等待迟迟不到的饭菜。大多数查询可有多种方式来完成，不过，查询方式的
一些基本的原则，那么无论数据库结构设计得如何合理，无论数据库调整得如何好，也不
我们可通过对MySQL慢日志的监控，找出SQL语句运行慢的主要问题，然后对这些
和设计与调整数据库一样，优化执行SQL语句可以提高应用程序的性能。如果不遵循
在将子查询 SQL改为JOIN表连接SQL时，子查询性能很差，下面是一个测试：
口SQL语句可以有不同的写法；
口 SQL语句独立于程序设计逻辑，相对于对程序源代码的优化，对SQL语句的优化在
下面来看看对notin子查询优化的案例。
口SQL语句消耗了70%~90%的数据库资源；
口SQL语句是对数据库（数据）进行操作的唯一途径；
mysql>selectSQL_NO_CACHEcount(*)fromtest1leftjointest2ontest1.id=test2.idwheretest2.idisnull;
1rowin set(5.25 sec)
mysql>selectSQL_NO_CACHEcount(*)from test1where notexists(select*fromtest2where test2.id=test1.id);
mysql>selectSQL_NO_CACHEcount(*)fromtest1whereid notin(selectid fromtest2);
案例一：
1.notin子查询优化
优化的理由：
215203
count（*）
215203
1row in set(5.81 sec)
count（*）
215203
count（*）