# 数值类
---
- https://www.kancloud.cn/imxieke/ruby-base/107300
---
# 数值类的构成
在数值类中，有像 -1、0、1、10 这样的表示整数的 `Integer` 类，也有像 0.1、3.141592 这样的具有精度的、表示浮点小数的 `Float` 类。
这些数值类都被定义为了 `Numeric` 类的子类。另外，`Integer` 类又可以分为两种，一种是表示计算机硬件可以处理的数值的 `Fixnum` 类，另外一种是表示比 `Fixnum` 更大的数值的 `Bignum` 类。
程序中用到的整数一般都是 `Fixnum` 类范围内的整数。如果使用的整数超过了 `Fixnum` 的范围，Ruby 就会自动将其转换为 `Bignum` 类。因此，在写程序的时候，我们几乎可以忽略上述整数类的区别。下面是计算 2 的 10 次幂以及 2 的 1000 次幂的例子，`**` 是表示乘方的运算符。
执行示例
```ruby
> irb --simple-prompt
>> n = 2 ** 10
=> 1024
>> n.class
=> Fixnum
>> m = 2 ** 1000
=> 1071508607186267320948425049060001810561404811705533607443750388370351051124936
1224931983788156958581275946729175531468251871452856923140435984577574698574803934
5677748242309854210746050623711418779541821530464749835819412673987675591655439460
77062914571196477686542167660429831652624386837205668069376
>> m.class
=> Bignum
```
Ruby 也可以处理有理数和复数。表示有理数用 `Rational` 类，表示复数用 `Complex` 类。
`Rational` 对象用“`Rational( 分子 , 分母 )`”的形式定义
上述这样的分数计算，可以用 `Rational` 对象改写成下面那样。我们还可以使用 `Rational.to_f` 方法将其转换为 `Float` 对象。
```ruby
a = Rational(2, 5)
b = Rational(1, 3)
p a                #=> (2/5)
p b                #=> (1/3)
c = a + b
p c                #=> (11/15)
p c.to_f           #=> 0.7333333333333333
```
`Complex` 对象用“`Complex( 实数 , 虚数 )`”的形式定义。以下是计算复数 2i 的 2 次幂的例子：
```ruby
c = Complex(0, 2) ** 2
p c                    #=> (-4+0i)
```
# 数值的字面量
数值对象的字面量
字面量	    | 作用（括号内为 10 进制的值）
- | -
123	        | 表示10 进制整数
0123	    | 表示8 进制整数（83）
0o123	    | 表示8 进制整数（83）
0d123	    | 表示10 进制整数（123）
0x123	    | 表示16 进制整数（291）
0b1111011	| 表示2 进制整数（123）
123.45	    | 浮点小数
1.23e4	    | 浮点小数的指数表示法（1.23×10 的4 次幂=12300.0）
1.23e-4	    | 浮点小数的指数表示法（1.23×10 的-4 次幂=0.000123）
单纯的数字罗列表示 10 进制整数。以 `0b` 开头的数值表示 2 进制数，以 0 或者 `0o` 开头的数值表示 8 进制数，以 `0d` 开头的数值表示 10 进制数，以 `0x` 开头的数值表示 16 进制数。字面量中的 `_` 会被自动忽略。因此，在使用每 3 位数字间隔一下这样的数值表示方法时会十分方便。
```ruby
p 1234567         #=> 1234567
p 1_234_567       #=> 1234567
p 0b11111111      #=> 255
p 01234567        #=> 342391
p 0x12345678      #=> 305419896
```
包含小数点的数值为浮点小数。我们还可以采用有效数字与指数配合的科学计数法来表示浮点小数。格式为“有效数字”+“英文字母 e（或者 E）”+“表示指数的整数”。
```ruby
p 1.234         #=> 1.234
p 1.234e4       #=> 12340.0
p 1234e-4       #=> 0.0001234
```
# 算数运算
算数运算的运算符
运算符	| 运算
- | -
+	    | 加法运算
-	    | 减法运算
*	    | 乘法运算
/	    | 除法运算
%	    | 取余运算
**	    | 乘方运算
`Integer` 对象与 `Float` 对象的运算结果为 `Float` 对象。
`Integer` 对象之间、`Float` 对象之间的运算结果分别为 `Integer` 对象、`Float` 对象。
```ruby
p 1 + 1        #=> 2
p 1 + 1.0      #=> 2.0
p 2 - 1        #=> 1
p 2 - 1.0      #=> 1.0
p 3 * 2        #=> 6
p 3 * 2.0      #=> 6.0
p 3 * -2.0     #=> -6,0
p 5 / 2        #=> 2
p 5 / 2.0      #=> 2.5
p 5 % 2        #=> 1
p 5 % 2.0      #=> 1.0
p 5 ** 2       #=> 25
p 5 ** 0.5     #=> 2.23606797749979
p 5 ** -2.0    #=> 0.04
p 5 ** -2      #=> 0.04
```
这里需要注意的是，指数为负整数的乘方返回的结果是表示有理数的 `Rational` 对象。
```ruby
p 5 ** -2.0    #=> 0.04
p 5 ** -2      #=> (1/25)
```
**除法**
除了 / 和 % 以外，数值对象中还有一些与除法相关的方法。
- `x.div(y)`
    返回 x 除以 y 后的商的整数。
    ```ruby
    p 5.div(2)        #=> 2
    p 5.div(2.2)      #=> 2
    p -5.div(2)       #=> -3
    p -5.div(2.2)     #=> -3
    ```
- `x.quo(y)`
    返回 x 除以 y 后的商，如果 x、y 都是整数则返回 `Rational` 对象。
    ```ruby
    p 5.quo(2)        #=> (5/2)
    p 5.quo(2.2)      #=> 2.2727272727272725
    p -5.quo(2)       #=> (-5/2)
    p -5.quo(2.2)     #=> -2.2727272727272725
    ```
- `x.modulo(y)`
    与 x % y 等价。
- `x.divmod(y)`
    将 x 除以 y 后的商和余数作为数组返回。商是将 x / y 的结果去掉小数点后的部分而得到的值。余数的符号与 y 的符号一致，余数的值为 x % y 的结果。假设有运算式如下，
    ```ruby
    ans=x.divmod(y)
    ```
    这时，下面的等式是成立的。
    ```ruby
    x==ans[0] *y + ans[1]
    p 10.divmod(3.5)        #=> [2, 3.0]
    p 10.divmod(-3.5)       #=> [-3, -0.5]
    p -10.divmod(3.5)       #=> [-3, 0.5]
    p -10.divmod(-3.5)      #=> [2, -3.0]
    ```
- `x.remainder(y)`
    返回 x 除以 y 的余数，结果的符号与 x 的符号一致。
    ```ruby
    p 10.remainder(3.5)        #=> 3.0
    p 10.remainder(-3.5)       #=> 3.0
    p -10.remainder(3.5)       #=> -3.0
    p -10.remainder(-3.5)      #=> -3.0
    ```
    另外，除数为 0 时，`Integer` 类会返回错误，而 `Float` 类则会返回 `Infinity`（无限大）或者 `NaN`（Not a Number）。如果再用这两个值进行运算，那么结果只会返回 `Infinity` 或者 `NaN`。程序把输入的数据直接用于运算的时候，除数有可能会为 0，我们应当注意避免这样的情况发生。
    ```ruby
    p 1 / 0         #=> 错误（ZeroDivisionError）
    p 1 / 0.0       #=> Infinity
    p 0 / 0.0       #=> NaN
    p 1.divmod(0)   #=> 错误（ZeroDivisionError）
    p 1.divmod(0.0) #=> 错误（FloatDomainError）
    ```
# Math 模块
`Math` 模块提供了三角函数、对数函数等常用的函数运算的方法。该模块中定义了模块函数和常量，例如，求平方根时，可以采用下述方法。
```ruby
p Math.sqrt(2)    #=> 1.4142135623730951
```
Math 模块定义的方法
方法名	| 作用
- | -
acos(x)	    | 反余弦函数
acosh(x)	| 反双曲余弦函数
asin(x)	    | 反正弦函数
asinh(x)	| 反双曲正弦函数
atan(x)	    | 反正切函数
atan2(x, y)	| 表示 4 个象限的反正切函数
atanh(x)	| 反双曲正切函数
cbrt(x)	    | 立方根
cos(x)	    | 余弦函数
cosh(x)	    | 双曲余弦函数
erf(x)	    | 误差函数
erfc(x)	    | 余补误差函数
exp(x)	    | 指数函数
frexp(x)	| 把一个浮点数分解为尾数和指数
gamma(x)	| 伽玛函数
hypot(x, y)	| 计算三角形的斜边长度
ldexp(x, y)	| 返回 x 乘以 2 的 y 次幂的值
lgamma(x)	| 伽马函数的自然对数
log(x)	    | 底数为 e 的对数（自然对数）
log10(x)	| 底数为 10 的对数（常用对数）
log2(x)	    | 底数为 2 的对数
sin(x)	    | 正弦函数
sinh(x)	    | 双曲正弦函数
sqrt(x)	    | 平方根
tan(x)	    | 正切函数
tanh(x)	    | 双曲正切函数
Math 模块定义的常量
常量名	| 作用
- | -