或语句块，所以它是MethodContext或BlockContext的当前执行实例的
引用。sender选择器返回消息发送的上下文，selector给出了该方法
的选择器。所有这些都是对象。
将代码当作对象来处理不是新思想，Lisp的强大之处就在于它对代
码和数据一视同仁。它允许我们利用反射来编程，也就是说，进行
元编程（metaprogramming）。
随着时间的推移，元编程这种思想已经变得越来越重要。C++中的
模板元编程是一种相当不同的方式：我们利用了C++编译器会在编
译时生成模板代码这一事实，在编译时执行计算（Abrahams和
Gurtovoy2005）。这种技术带来了令人兴奋的可能性，但却需要复
1274
---
## Page 1276
杂的编程技能。在Java中元编程是通过反射来实现的，它是语言的
一部分，虽然使用反射的Java代码可能会比较麻烦。
当我们需要在运行时刻构建一个菜单时，一个相关的问题就凸显出
来了。菜单会将菜单项和处理代码关联起来，当用户选择相关的菜
单项时，就会执行对应的处理代码。如果我们能够通过名称来引用
这些处理代码，我们就能够使用下面这样的代码动态地构建一个菜
单：
CustomMenu new addList: #(
#(*red*#redHandler)
#('green*#greenHandler)
# ('blue'#blueHandler) ) : startUpWithCaption: 'Colors'.
在Smalltallk中，分隔符#（）代表了数组。我们通过一个包含多个标
签-处理代码对的列表，创建了一个新的菜单及其菜单项。这些处理
代码是选择器（在真实的代码中，我们需要给出它们的实现）。处
理代码前面加上了#字符，这在Smalltalk中表示符号（symbol）。我
们可以认为符号和字符事类似。符号通常用于代表类或方法的名
称。
反射让我们能够以简洁的方式来实现抽象工厂（AbstractFactory）
设计模式（Alpert等1998）。如果我们需要一个工厂类，它在运行
时可以根据用户的指定来实例化类的对象，那么我们可以采用下面
的方式：
makeCar: manufacturersName
"manufacturersName is a Symbol,such as#Ford,
#Toyota, or#Porsche . "
| carClass1
carClass: =Smalltalk
at:  (manufacturersName, #Car) asSymbol
1275
---
## Page 1277
ifAbsent: [^nil]
^carClass new
当用户给出一个制造商的名称时，我们在它后面加上单词"Car”，创
建类名。对于#Ford来说，类名将是#FordCar；对于#Toyota来说：
类名将是#ToyotaCar，等等。字符串连接在Smalltalk中是用逗号
（，）表示的，我们希望连接得到的字符串成为一个符号，所以我
们调用它的asSymbol方法。在Smalltalk中，所有的类名都存在
Smalltalk字典中，它是SystemDictionary类的唯一实例。当我们找到
要求的类名时，我们就返回该类的一个实例。
我们已经看了几个Smalltalk的例子，但还没有看到类定义。在
Smalltalk中，类的构建方式和其他东西的构建方式是一样的：向相
应的消息接收者发送必要的消息。我们先在Smalltallk环境中，从完
成下面的模板开始：
NameOfSuperclass subclass: #NameOfSubclass
instanceVariableNames: '1
classVariableNames: '*
poolDictionaries: ':
category: 'Unknown'
我们用真实的名称替代NameOfSuperclass和NameOfSubclass。在
instanceVariableNames中，我们列出实例变量，在classVariableNames
中列出类变量，在category中标出类所属的分类（在Smalltalk中，类
被归到一些分类中，类似于其他语言中的命名空间或包）。
poolDictionaries中列出了我们与其他类共享的字典，这是在
Smalltalk中共享变量的机制。当该模板的各项细节填入之后，它们
就被传递给Class类的subclass选择器。
subclass: t instanceVariableNames: f classVariableNames: d
poolDictionaries: s category: cat
1276
---
## Page 1278
"This is the standard initialization message for creating
e se sseto mau e
subclass of an existing class (the receiver) ."
 (ClassBuilder new)
superclass: self
subclass: t
instanceVariableNames: f
classVariableNames: d
poolDictionaries: S
category: cat
subclass选择器会创建一个ClassBuilder类的实例，它将创建新类或
修改已有的类。我们向ClassBuilder实例发出必要的信息，这样就可
以根据我们在类模板中输入的信息创建新的类。
在对象上做所有事情都是通过发送消息来完成，这使我们需要把握
的概念不是很多。它也让我们限制了语言中语法结构的数量。让编
程语言最小化有很长的历史。在关于Lisp的第一篇论文（McCarthy
1960）中，我们发现Lisp比较了两类表达式：一是s表达式（或句法
表达式），它是从列表构建的表达式；二是M表达式（或元表达
式），它是将S表达式作为数据的表达式。最后，程序员们总是选
择使用s表达式，所以Lisp就变成了我们今天所知道的样子：一种几
乎没有语法的语言，因为所有的东西，包括程序和数据，都是列
表。它取决于你对Lisp的态度，这证明了一个简单的思想就足够表
达最复杂的结构（或者人们可以被强道接受任何东西）。
但是，Smalltalk不局限于一种句法元素，Smalltalk程序由6种构建块
组成：
1.关键字、或伪变量，只有6个（self、super、nil、true、false和
thisContext)。
2.常量。
1277
---
## Page 1279
3.变量声明。
4.赋值。
5.语句块。
6.消息。
我们在这个列表中没看到的东西可能比看到的东西更有趣：我们没
有看到任何表示控制流的元素，没有条件判断或循环。它们不需
要，因为它们是通过消息、对象和语句块（都是对象）来实现的。
下面的方法在Integer类中实现了阶乘函数。
factorial
"Answer the factorial of the receiver."
self=0 ifTrue: [^1].
self error: 'Not valid for negative integers
操作符=和>是消息选择器，它返回抽象类Boolean的对象，Boolean
有两个子类，True和False。如果选择器ifTrue：的消息接收者是True
的一个实例，那么它的参数就会被执行。它的参数是口界定的语句
块。还有一个对称的选择器ifFalse：，它具有相反的语义。一般来
说，使用循环要好于使用递归，所以下面是阶乘函数的循环实现：
factorial
"Implement factorial function using a loop"
|returnValI
returnVal: =1.
self>=0
ifTrue:[2
1278
---
## Page 1280
to: self
do: [: n|returnVal: =returnVal*n]]
ifFalse: [self error: 'Not valid for negative integers']
^returnVal
大部分工作都在两个语句块内完成。第一个语句块针对从2到消息
接收者的值为止的正数执行。每次选代的值都被传入内层的语句
块，内层语句块将计算结果。语句块参数之前有冒号（：），与语
句块体之由短竖线（）分隔。可以有多个语句块参数，如下面的阶
乘定义（Black等2007）：
factorial:=[: nl(1 to: n) inject:1 into:[:product:
eachIproduct*each]] 
to：选择器返回类Interval的一个实例，它实际上列出了从1～10的
值。对于数值n，阶层语句块将执行下面的动作。首先，它将内层
语句块的product参数设为1。然后它将针对从1～n的值，调用内部
语句块，计算每次选代数的乘积和当前的乘积，并将结果保存到
product中。要计算10的阶乘，我们需要写下阶乘值：10。借用
Herbert Simon在《Sciences oftheArtificial》（1996）中对更早的荷
兰医生SimonStevin的引用：
Wonder,enis gheenwonder.这句话的意思是：“漂亮，但并不难懂。”
国1此书由机械工业出版社引进出版，书号为978-7-111-21126-6。
14.2类型是隐式定义的
尽管所有东西在Smalltalk中都是对象，甚至类也是，但类并不对应
于C+和Java这类语言中的类型。类型是根据它们的行为隐式定义
的，而不是根据它们的接口。这被称为潜在类型或鸭子类型。
潜在类型是Smalltallk中唯一的类型机制（在其他一些动态类型语言
中也是如此），但这并不意味着它对于强类型语言来说不重要。例
如，在C++中，潜在类型是通过模板的泛型编程的基础。看到它第
1279
---
## Page 1281
一次出现在这种语言中是很有意义的。请看下面的C++模板的示例
介绍（Vandervoorde和Josuttis，2002，2.4）
//maximum of two int values
inline int const&max (int const&a,int const&b)
{
return a
inline T const&max (T const&a,T const&b)
return a
inline T const&max (T const&a,T const&b,T const&c)
return: max (: max (a,b)， c);
上
int main ()
{
:max (7, 42, 68)://calls the template for three arguments
: max (7.0, 42.0) : //cal1s max (by argument
deduction)
1280
---