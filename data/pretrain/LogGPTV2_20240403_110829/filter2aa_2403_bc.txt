指令清单 13.5  GCC 4.4.1 
        public   f 
f       proc near ; CODE XREF: main+10 
var_18 = dword ptr -18h 
arg_0  = dword ptr  8 
        push    ebp 
        mov     ebp, esp 
        sub     esp, 18h 
        cmp     [ebp+arg_0], 4 
        ja      short loc_8048444 
        mov     eax, [ebp+arg_0] 
        shl     eax, 2 
        mov     eax, ds:off_804855C[eax] 
        jmp     eax 
loc_80483FE: ; DATA XREF: .rodata:off_804855C 
        mov     [esp+18h+var_18], offset aZero ; "zero" 
        call    _puts 
        jmp     short locret_8048450 
loc_804840C: ; DATA XREF: .rodata:08048560 
        mov     [esp+18h+var_18], offset aOne ; "one" 
        call    _puts 
        jmp     short locret_8048450 
loc_804841A: ; DATA XREF: .rodata:08048564 
        mov     [esp+18h+var_18], offset aTwo ; "two" 
        call    _puts 
        jmp     short locret_8048450 
loc_8048428: ; DATA XREF: .rodata:08048568 
        mov     [esp+18h+var_18], offset aThree ; "three" 
        call    _puts 
        jmp     short locret_8048450 
loc_8048436: ; DATA XREF: .rodata:0804856C 
        mov     [esp+18h+var_18], offset aFour ; "four" 
        call    _puts 
        jmp     short locret_8048450 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
140 
逆向工程权威指南（上册） 
loc_8048444: ; CODE XREF: f+A 
        mov     [esp+18h+var_18], offset aSomethingUnkno ; "something unknown" 
        call    _puts 
locret_8048450: ; CODE XREF: f+26 
                   ; f+34... 
        leave 
        retn  
f       endp 
off_804855C dd offset loc_80483FE   ; DATA XREF: f+12 
              dd offset loc_804840C 
              dd offset loc_804841A 
              dd offset loc_8048428 
              dd offset loc_8048436 
这段代码与 MSVC 编译出来的代码几乎相同。参数 arg_0 被左移 2 位（数学上等同于乘以 4，有关指
令介绍请参阅 16.2.1 节），然后在转移表 off_804855C 的数组中获取相应地址，并将计算结果存储于 EAX
寄存器。最后通过 JMP EAX 指令进行跳转。 
13.2.2  ARM: Optimizing Keil 6/2013 (ARM mode) 
指令清单 13.6  Optimizing Keil 6/2013 (ARM mode) 
00000174              
 f2  
00000174  05 00 50 E3   
CMP     R0, #5            
; switch 5 cases 
00000178  00 F1 8F 30   
ADDCC   PC, PC, R0,LSL#2  ; switch jump 
0000017C  0E 00 00 EA   
B       default_case   
; jumptable 00000178 default case 
00000180                  
00000180              
 loc_180 ; CODE XREF: f2+4 
00000180  03 00 00 EA   
B        zero_case     
; jumptable 00000178 case 0 
00000184 
00000184              
 loc_184 ; CODE XREF: f2+4 
00000184  04 00 00 EA   
B        one_case      
; jumptable 00000178 case 1 
00000188 
00000188              
 loc_188 ; CODE XREF: f2+4 
00000188  05 00 00 EA   
B        two_case      
; jumptable 00000178 case 2 
0000018C 
0000018C              
 loc_18C ; CODE XREF: f2+4 
0000018C  06 00 00 EA   
B        three_case    
; jumptable 00000178 case 3 
00000190 
00000190              
 loc_190 ; CODE XREF: f2+4 
00000190  07 00 00 EA   
B        four_case     
; jumptable 00000178 case 4 
00000194 
00000194              
 zero_case ; CODE XREF: f2+4 
00000194                            ; f2:loc_180 
00000194  EC 00 8f E2   
ADR     R0, aZero    
; jumptable 00000178 case 0 
00000198  04 00 00 EA   
B       loc_1B8 
0000019C 
0000019C              
 one_case  ; CODE XREF: f2+4 
0000019C                            ; f2:loc_184 
0000019C  EC 00 8F E2   
ADR      R0, aOne     
; jumptable 00000178 case 1 
000001A0  04 00 00 EA   
B        loc_1B8 
000001A4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
141 
000001A4              
 two_case  ; CODE XREF: f2+4 
000001A4                            ; f2:loc_188 
000001A4  01 0C 8F E2   
ADR      R0, aTwo     
; jumptable 00000178 case 2 
000001A8  02 00 00 EA   
B        loc_1B8 
000001AC 
000001AC              
three_case ; CODE XREF: f2+4 
000001AC                            ; f2:loc_18C 
000001AC  01 0C 8F E2   
ADR    R0, aThree  
; jumptable 00000178 case 3 
000001B0  00 00 00 EA   
B      loc_1B8 
000001B4 
000001B4              
four_case ; CODE XREF: f2+4 
000001B4                           ; f2:loc_190 
000001B4  01 0C 8F E2   
ADR   R0, aFour  
; jumptable 00000178 case 4 
000001B8 
000001B8              
 loc_1B8    ; CODE XREF: f2+4 
000001B8                            ; f2+2C 
000001B8  66 18 10 EA   
B   
  __2printf 
000001BC              
 default_case ; CODE XREF: f2+4 
000001BC                               ; f2+8 
000001BC D4 00 8F E2    
ADR   R0, aSomethingUnkno ; jumptable default case 
000001C0 FC FF FF EA    
B     loc_1B8 
这段代码充分体现了 ARM 模式下每条汇编指令占用 4 个字节的特点。 
这个程序能够识别出4 及4 以下的自然数。当输入值是大于4 的整数时，程序都会显示“something unknown \n”。 
第一条指令是“CMP R0, #5”。它将输入变量与 5 做比较。 
“ADDCC PC, PC, R0, LSL＃2”会在 R0 寄存器的值小于 5 的时候进行加法计算，其中 CC 代表借位标志 Carry 
Clear。如果 R0 寄存器的值不小于 5，（即 R0 大于或等于 5），则会直接跳转到标签 default_case 处。 
如果 R0 寄存器的值是 5 以下的整数，那么将会触发 ADDCC，并且进行下列运算： 
 将 R0 的值乘以 4。LSL 是左移操作，左移两位（2bits）就相当于乘以 4。 
 把上述积与 PC 的值相加，并会把运算结果存储在 PC 寄存器里。这种调整 PC 指针的操作，等同
于运行 B 跳转指令。 
 在执行 ADDCC 指令的时候，PC 寄存器的值会比当前指令的（首）地址提前 8 个字节。此时 ADDCC
的地址是 0x178，PC 的值为 0x180。即，PC 指向当前指令后面的第二条指令。 
这是ARM处理器的pipeline/流水线决定的。当ARM处理器执行某条指令时，处理器正在处理（fetch取
指）后面的第二条指令。实际上PC指向后面第二条（正在被fetch/取指的）指令的地址。
①
13.2.3 ARM: Optimizing Keil 6/2013 (Thumb mode) 
 如果 a＝＝0，“加零”操作使 PC 寄存器的值不变。所以在 PC 操作之后，CPU 会跳到 8 个字节之
后的 loc_180 处继续执行后续命令，开始执行 ADDCC 指令。 
 如果 a＝＝1，则 PC＋8+a×4=PC＋16=0x184。程序会跳转到 loc_184 处。 
 依此类推，变量 a 的值每增加 1，PC 的值就会增加 4。这 4 字节是每个分支语句的唯一一条指令——
B 指令的 opcode 的长度。在 ADDCC 之后，总共有 5 个 B 跳转指令。 
后面的指令比较容易理解，5 条 B 跳转指令接着完成各自赋值和打印的任务，完成 switch()语句的功能。 
指令清单 13.7  Optimizing Keil 6/2013 (Thumb mode) 
000000F6                    
EXPORT f2 
000000F6               f2 
① 虽然 pipeline 三级流水的解释较为直观，但是官方手册《ARM architecture reference manual》第 1 章第 2 节否认了这种硬件上
的联系，它把 PC 与指令间 opcode 的增量关系解释为历史原因。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
142 
逆向工程权威指南（上册） 
000000F6 10 B5             
PUSH    {R4,LR} 
000000F8 03 00             
MOVS    R3, R0 
000000FA 06 F0 69 F8      
BL      __ARM_common_switch8_thumb ; switch 6 cases 
000000FE 05                  DCB 5 
000000FF 04 06 08 0A 0C 10 DCB 4, 6, 8, 0xA, 0xC, 0x10 ; jump table for switch statement 
00000105 00                  ALIGN 2 
00000106 
00000106                 zero_case ; CODE XREF: f2+4 
00000106 8D A0            
ADR     R0, aZero ; jump table 000000FA case 0 
00000108 06 E0               B       loc_118 
0000010A   
0000010A                 one_case ; CODE XREF: f2+4 
0000010A 8E A0               ADR     R0, aOne ; jumptable 000000FA case 1 
0000010C 04 E0               B       loc_118 
0000010E 
0000010E                 two_case ; CODE XREF: f2+4 
0000010E 8F A0               ADR     R0, aTwo ; jumptable 000000FA case 2 
00000110 02 E0               B       loc_118 
00000112 
00000112                 three_case ; CODE XREF: f2+4 
00000112 90 A0               ADR     R0, aThree ; jumptable 000000FA case 3 
00000114 00 E0               B       loc_118 
00000116 
00000116                 four_case ; CODE XREF: f2+4 
00000116 91 A0              ADR     R0, aFour ; jumptable 000000FA case 4 
00000118 
00000118                 loc_118 ; CODE XREF: f2+12 
00000118                          ; f2+16 
00000118 06 F0 6A F8       BL      __2printf 
0000011C 10 BD               POP     {R4,PC} 
0000011E 
0000011E                 default_case ; CODE XREF: f2+4 
0000011E 82 A0               ADR     R0, aSomethingUnkno ; jumptable 000000FA default case 
00000120 FA E7               B       loc_118 
000061D0                      EXPORT __ARM_common_switch8_thumb 
000061D0                 __ARM_common_switch8_thumb ; CODE XREF: example6_f2+4 
000061D0 78 47              BX      PC 
000061D2 00 00               ALIGN 4 
000061D2   
 ; End of function __ARM_common_switch8_thumb 
000061D2           
000061D4    
 __32__ARM_common_switch8_thumb ; CODE XREF__ARM_common_switch8_thumb 
000061D4 01 C0 5E E5           LDRB    R12, [LR,#-1] 
000061D8 0C 00 53 E1           CMP     R3, R12 
000061DC 0C 30 DE 27           LDRCSB  R3, [LR,R12] 
000061E0 03 30 DE 37           LDRCCB  R3, [LR,R3] 
000061E4 83 C0 8E E0           ADD     R12, LR, R3,LSL#1 
000061E8 1C FF 2F E1           BX      R12 
000061E8                     ; End of function __32__ARM_common_switch8_thumb 
Thumb 和 Thumb-2 程序的 opcode 长度并不固定。这一特征更接近 x86 系统的程序。 
它们的程序代码里有一个专门用于存储 case 从句信息（default 以外）的表。这个表负责记录 case 从句
的数量、偏移量和标签，以便程序可以进行准确的寻址。程序通过这个表单进行相应的跳转，继而处理相
应的分支 case 语句。 
因为需要操作转移表并进行后续跳转，所以这个程序也使用了专用函数_ARM_common_ switch8_thumb。
这个函数的第一条指令是“BX PC”，它将运行模式切换到 32 位的 ARM 模式，然后在 32 位模式下进行操作。
然后函数着手表查询和分支转移单操作。具体指令非常复杂，本文在这里只是简单介绍一下，暂时不进行详解。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
143 
比较有趣的是，这个函数使用 LR 寄存器存储表的指针。在调用这个函数之后，LR 寄存器存储着“BL 
__ARM_common_switch8_thumb ”的后续指令的地址，也就是表开始的地址。 
这个程序出现了每个 switch()陈述句都会复用的专用函数，具有显著的结构化特征。可能是编译器为
了避免生成重复代码而进行的处理。 
IDA 能够自动识别出这个函数和相应的转移表。IDA 还能给相应的条目加上合理的注释。举例来说，
IDA 就给本例添加了“jumptable 000000FA case 0”这样的注释。 
13.2.4 MIPS 
指令清单 13.8  Optimizing GCC 4.4.5 (IDA) 
f: 
lui     $gp, (__gnu_local_gp >> 16) 
; jump to loc_24 if input value is lesser than 5: 
sltiu   $v0, $a0, 5 
bnez    $v0, loc_24 
la      $gp, (__gnu_local_gp & 0xFFFF) ; branch delay slot 
; input value is greater or equal to 5. 
; print "something unknown" and finish: 
lui     $a0, ($LC5 >> 16)  # "something unknown" 
lw      $t9, (puts & 0xFFFF)($gp) 
or      $at, $zero ; NOP 
jr      $t9 
la      $a0, ($LC5 & 0xFFFF)  # "something unknown" ; branch delay slot 
loc_24:                                        # CODE XREF: f+8 
; load address of jumptable 
; LA is pseudoinstruction, LUI and ADDIU pair are there in fact: 
la      $v0, off_120 
; multiply input value by 4: 
sll     $a0, 2 
; sum up multiplied value and jumptable address: 
addu    $a0, $v0, $a0 
; load element from jumptable: 
lw      $v0, 0($a0) 
or      $at, $zero ; NOP 
; jump to the address we got in jumptable: 
jr      $v0 
or      $at, $zero ; branch delay slot, NOP 
sub_44:                                        # DATA XREF: .rodata:0000012C 
; print "three" and finish 
lui     $a0, ($LC3 >> 16)  # "three" 
lw      $t9, (puts & 0xFFFF)($gp) 
or      $at, $zero ; NOP 
jr      $t9 
la      $a0, ($LC3 & 0xFFFF)  # "three" ; branch delay slot 
sub_58:                                        # DATA XREF: .rodata:00000130 
; print "four" and finish 
lui     $a0, ($LC4 >> 16)  # "four" 
lw      $t9, (puts & 0xFFFF)($gp) 
or      $at, $zero ; NOP 
jr      $t9 
la      $a0, ($LC4 & 0xFFFF)  # "four" ; branch delay slot 
sub_6C:                                        # DATA XREF: .rodata:off_120 
; print "zero" and finish 
lui     $a0, ($LC0 >> 16)  # "zero" 
lw      $t9, (puts & 0xFFFF)($gp) 
or      $at, $zero ; NOP 
jr      $t9 
la      $a0, ($LC0 & 0xFFFF)  # "zero" ; branch delay slot 
sub_80:                                        # DATA XREF: .rodata:00000124 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
144 
逆向工程权威指南（上册） 
; print "one" and finish 
lui     $a0, ($LC1 >> 16)  # "one" 
lw      $t9, (puts & 0xFFFF)($gp) 
or      $at, $zero ; NOP 
jr      $t9 
la      $a0, ($LC1 & 0xFFFF)  # "one" ; branch delay slot 
sub_94:                                        # DATA XREF: .rodata:00000128 
; print "two" and finish 
lui     $a0, ($LC2 >> 16)  # "two" 
lw      $t9, (puts & 0xFFFF)($gp) 