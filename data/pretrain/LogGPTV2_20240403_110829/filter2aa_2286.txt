# New Techniques in SQLi Obfuscation

## Presenter
Nick Galbreath  
[@ngalbreath]  
PI:EMAIL

## Event
DEFCON 20 at the Rio in sunny Las Vegas  
Date: 2012-07-27, Friday, 4:20 pm  
Slides: [http://slidesha.re/MfOiNR](http://slidesha.re/MfOiNR)

Follow along or get the latest version:  
Note: That's an "O", not a "0".

## SQL Specification
- **SQL-92 Standard**: [http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt](http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt)  
  - 625 pages of plain text
- **SQL-2003 BNF**: [http://savage.net.au/SQL/sql-2003-2.bnf](http://savage.net.au/SQL/sql-2003-2.bnf)  
  - 119 pages of pure BNF
- No implementation is exactly the same; each has its own extensions, exceptions, and bugs.

## Regexp-Based WAF
The following are some regular expressions used by PHPIDS 0.7 for detecting SQL injection:

```regex
(?:\)\s*when\s*\d+\s*then)|(?:"\s*(?:#|--|{))|(?:\/\*!\s?\d+)|(?:ch(?:a)?r\s*\(\s*\d)|(?:(?:(n?and|x?or|not)\s+|\|\||\&\&)\s*\w+\()
...
```

(For brevity, the full list of regex patterns is omitted here. The complete list can be found in the provided slides.)

## Analyzing SQL and SQLi
- **Libinjection**: A quasi-SQL tokenizer available at [https://github.com/client9/libinjection](https://github.com/client9/libinjection)
  - Handles vendor-specific cases
  - Runs all SQLi through it to identify untriggered parser code paths
  - (Note: Libinjection is a work in progress, currently biased toward MySQL and PostgreSQL)

## Sources of Attacks
- Tens of thousands of attacks of varying quality
- Output from SQLi vulnerability scanners against dummy sites
- Published attacks and HOW-TO guides
- Observations from Etsy

## SQL Oddities
- **NULL Handling**:
  - **MySQL**: `NULL` can be written as `\N` (case-sensitive; `\n` is not a null).
  - **PostgreSQL**: `ISNULL`, `NOTNULL`, `IS [NOT] UNKNOWN`, `IS [NOT] DISTINCT`
- **Floating Point Numbers**:
  - Formats: `digits`, `digits[.]`, `digits[.]digits`, `digits[eE]digits`, etc.
  - Exceptions: `1.AND 2` (no space between "1." and "AND") may be accepted by some parsers.
- **Oracle Special Literals**:
  - `binary_double_infinity`, `binary_double_nan`, `binary_float_infinity`, `binary_float_nan` (case-sensitive)
- **Hexadecimal Literals**:
  - `0xDEADbeef` (MySQL, MSSQL), `x'DEADbeef'` (PostgreSQL)
- **Binary Literals**:
  - `b'10101010'` (MySQL, PostgreSQL), `0b010101` (MySQL)
- **Money Literals**:
  - MSSQL: `- $45.12`, `$123.0`, `+$1,000,000.00` (commas ignored)

## Comments
- **MySQL**: `#` signals an end-of-line comment
- **PostgreSQL**: Besides `--`, supports recursive C-style comments (`/* foo /* bar */ */`)

## Strings
- **C-Style String Merging**:
  - `SELECT 'foo' 'bar';` (merged into one string)
- **Standard Unicode**:
  - `N'....'` or `n'...'` (MSSQL, case-sensitive)
- **MySQL Ad-Hoc Charset**:
  - `_charset'....'`, `_latin1'.....'`, `_utf8'....'`
- **PostgreSQL Dollar Quoting**:
  - `$$Dianne's horse$$`, `$SomeTag$Dianne's horse$SomeTag$` (can be nested)
- **PostgreSQL Unicode**:
  - `U&"d\0061t\+000061"`, `U&"\0441\043B\043E\043D"`

## Oracle Q String
- `q'!...!'` notation allows the use of single quotes inside literal strings:
  - `string_var := q'!I'm a string!';`
  - `func_call(q'[SELECT index_name FROM user_indexes WHERE status ='INVALID']');`

## Operators and Expressions
- **Factorial**: `!` and `!!` (PostgreSQL)
- **Square Root**: `|/` (PostgreSQL)
- **Cube Root**: `||/` (PostgreSQL)
- **Bitwise XOR**: `#` (PostgreSQL), `/\` (Oracle)
- **Exponents**: `**` (Oracle)
- **Comparison Operators**:
  - `!=`, `<>` (MSSQL), `^=` (Oracle)
  - `!>`, `!<` (not less than, MSSQL)
- **Expressions**:
  - `OR 1=1`
  - Functions: `COS(0) = SIN(PI()/2)`, `COS(@VERSION) = -SIN(@VERSION + PI()/2)`

## Set Operations
- **EXCEPT** (MSSQL), **MINUS** (Oracle): Returns results from the first query minus those from the second query
- **INTERSECT**: Returns common results from both queries

## Side Note: "IN" Lists
- Example: `WHERE id IN (1,2,3,4)`
- Manually created; no API or parameter binding for this construct in any platform, framework, or language.

## Why Don't We See More Advanced Attacks?
- Dumb attacks still work (for now)
- Advanced techniques are not commonly seen

## Future Work
- Add more parsing rules to Libinjection
- Develop more testing frameworks
- Investigate BIGINT types
- Consider PostgreSQL's regexp engine and other datatypes
- Address various character encodings

## Primary References
- [MySQL Function and Operator Summary](http://dev.mysql.com/doc/refman/5.6/en/func-op-summary-ref.html)
- [PostgreSQL Functions](http://www.postgresql.org/docs/9.1/static/functions.html)
- [Microsoft SQL Server Functions](http://msdn.microsoft.com/en-us/library/bb510741)
- [Oracle Documentation](http://docs.oracle.com/cd/B28359_01/appdev.111/b28370/fundamentals.htm#autoId6)

## Contact
Nick Galbreath  
[@ngalbreath]  
PI:EMAIL  
[https://github.com/client9/libinjection](https://github.com/client9/libinjection)