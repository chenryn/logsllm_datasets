u
U
P
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
10
20
30
40
50
# of clients
60
70
80
90
100
Figure 5: Bandwidth demands of Drac and Herd clients.
Herd clients keep a small, constant number of chafﬁng
connections, leading to uniformly low bandwidth demand.
Figure 6: CPU utilization of a mix (top) and SP (bottom),
as a function of the number of clients supported.
average blocking rate decreased by an order of magnitude
when clients attached to 3 channels instead of 2.
SPs have the potential to greatly ofﬂoad mixes.
In our
simulations, these savings varied between 80% and 98%
with 5 and 50 clients per channel, respectively. This low
blocking rate and high savings are explained by low instan-
taneous system utilization for voice workloads—in the day-
long trace we considered, the peak duty cycle (i.e., peak frac-
tion of users making calls simultaneously) was 1.6%.
Dollar cost per user. We now use trace-based simulation
results to estimate the cost of running Herd for a large set of
clients with Amazon EC2 mixes. We use the AWS calculator
to explore the cost of several points in the design space.
The cost ranges from $0.10 to $1.14 per month per sub-
scriber. The low end of the range corresponds to a call vol-
ume of 1% of users simultaneously making calls at any time
and only 10% interzone calls; while the high end of range
corresponds to 2% of the users making calls at any time
(larger than the peak value in our traces described above)
and 100% interzone calls. The reason for the relatively low
cost is that intrazone trafﬁc in EC2 (i.e., data trafﬁc that
stays within the same data center) does not incur charges,
interzone trafﬁc (i.e., between EC2 data centers) incurs low
charges, and trafﬁc to SPs and clients costs the most. Be-
cause most trafﬁc is between mixes in the same zone, and
trafﬁc leaving the cloud is relatively small with SPs, costs
are generally low. Thus, we believe that Herd’s design is
sufﬁciently affordable when scaled to millions of users.
The above estimates rely on SPs that provide their ser-
vices for free, and that we do not charge SPs for their use of
Herd. As an additional incentive, we can pay SPs for their
contribution to the system: in this case, the cost per paying
subscriber is an additional $0.14 per dollar we pay SPs.
Note that choosing not to include SPs in a deployment can
have a signiﬁcant impact on costs. Our estimates show that it
will cost two orders of magnitude more per user to run Herd
($10-100 per month per user).
Summary. Providing strong anonymity for VoIP in a purely
infrastructure-based system is relatively expensive, but a set
of well-connected, altruistic, but otherwise untrusted hosts
can substantially reduce costs.
4.2 Prototype performance
Next, we present an experimental evaluation of Herd’s
CPU, memory, and bandwidth consumption.
Goal and methodology. We evaluate the performance of the
Herd implementation described in Section 3.8 on a mix with
and without a superpeer, while varying the number of clients
between 0 and 100. The mix and SP were each hosted on
a Dell OptiPlex 980 (2.8Ghz Intel Core i5-760, 8GB RAM)
and the clients were co-hosted on another machine of the
same model (3.2GHz Intel Core i5-650, 8GB RAM). We
launched three, 60-second runs for each conﬁguration and
used the Linux time command to measure the CPU utiliza-
tion of the Herd network process, which performs all data-
plane processing. The CPU utilization is the sum of the user
and system CPU times divided by the elapsed real time.
Results. SPs reduce resource demand on the mixes. As ex-
pected, using an SP reduces the bandwidth required at the
mix to support n clients by a factor of nearly n/a, where a
is the number of concurrent active calls (one in our experi-
ment). Moreover, as shown in Figure 6, without an SP, the
mix’s network process has a CPU utilization of 59% for 100
clients, while an SP with one chaffed connection between
mix and SP reduces that utilization to only 3%. The marginal
CPU utilization for supporting an additional client is .01%
and .6% with and without the SP, respectively. The reason
is that the network coding for an SP requires far fewer CPU
cycles than maintaining a chaffed connection with multiple
clients. Finally, the memory utilization on the mix is low re-
gardless of the conﬁguration. For example, the mix without
an SP uses 3.4MB of virtual memory for 100 clients.
Summary. SPs reduce the mixes’ bandwidth and CPU re-
quirements by an order of magnitude.
4.3 Perceived call quality
We now present an experimental comparison of Drac and
Herd’s perceived call quality.
650
4.3.1 Goal: Perceived call quality
We use E-Model to evaluate the quality of actual VoIP
calls performed by the authors. E-Model is an analytic
model of call quality deﬁned by the International Telecom-
munication Union (ITU), which calculates the Rating fac-
tor (R-factor), a simple measure of voice quality [34]. The
R-factor ranges from 0 to 100 and directly determines the
Mean Opinion Score (MOS), which ranges from 1 (poor) to
5 (perfect). For VoIP environments, the R-factor is deﬁned
in terms of mouth-to-ear delay and packet loss. We refer to
Cole et al. for more details [25].
4.3.2 Systems, deployment, and methodology
Drac. Since a Drac implementation is not available, we used
ping to measure the direct latency between contacts (H =
0). Drac calls between contacts are established directly.
Herd. For Herd, we used the implementation presented
in Section 3.8 in our deployment. Herd routes trafﬁc via
sender-receiver, mutually anonymous circuits with SPs.
Deployment. To evaluate Herd’s call quality in practice,
we deployed a complete Herd system with 4 zones, and re-
quested that volunteers make one-way calls between every
zone pairs. Our deployment currently comprises of 8 mixes
and rendezvous, 2 directories, and 4 SPs hosted on Ama-
zon EC2. We used ClojureScript 0.0-2644, node.js 0.10.12,
Jitsi 2.4, and EC2 small and medium instances with Core OS
522.6.0.
Methodology. For this call quality experiment, each of our 4
volunteers, who connected from university networks, called
one other volunteer located in each of the 4 zones (12 calls in
total), and listened to a pre-recorded voicemail hosted at the
callee. Although VoIP calls are full-duplex, transmissions in
each direction are logically independent and so our exper-
iments transmit voice in only one direction. We borrowed
this methodology from the industry standard ITU [5].
The Herd clients in this experiment conduct the follow-
ing tests. First, upon receiving an incoming call, each client
automatically plays a pre-recorded voicemail. (We host the
voicemails at the volunteers to ensure that calls experience
realistic end-to-end loss and latency.) Second, an active
client periodically (i.e., every second) measures the end-to-
end latency and packet loss rate between caller and callee.
4.3.3 Results: Perceived call quality
We show the perceived call quality for Drac with H = 0
and Herd in Figure 7. In the absence of packet loss, latencies
between Europe, North America, and South America were
of high or perfect quality, and latencies between Australia
and the rest of the world were of medium quality. In our
experiments, the packet loss never exceeded a few percents
which, according to E-Model, would result in the loss of at
most one MOS level for both systems.
Summary. Herd achieves modest additional latency while
imposing signiﬁcantly less bandwidth requirements on
clients, and much larger anonymity sets for direct calls than
in Drac (i.e., 10.8M vs. 1).
Figure 7: One-way latencies for Drac with H = 0 and
Herd, among locations in Australia (AU), Europe (EU),
North America (NA), and South America (SA). The col-
ored horizontal bands from top to bottom correspond to
the MOS bounds for poor, low, medium, high, and per-
fect, perceived quality. Herd incurs a small, additional
one-way latency of approximately 100ms over Drac.
5. CONCLUSION & FUTURE WORK
Herd is a novel anonymity network for VoIP that provides
strong anonymity in the face of powerful adversaries, with
good call quality and modest cost. Herd’s architecture relies
on trusted infrastructure mixes to achieve zone anonymity,
where a user’s anonymity among the set of clients attached
to a zone depends only on that user’s choice of a provider.
Herd uses network coding in a novel way to shift resource
requirements from its trusted infrastructure to untrusted
superpeers, allowing it
to take advantage of resource
contributions by untrusted parties to increase its scalability
and reduce cost. Herd relies on layered encryption and
chaffed connections to conceal call activity from powerful
adversaries with global network access, while exploiting
VoIP trafﬁc characteristics to reduce bandwidth demand.
We demonstrated that Herd is a practical solution with good
performance using an implementation deployed in Amazon
EC2 and trace-based simulation with empirical call data.
Currently, we are migrating mixes to diverse hosting centers
in preparation for a public release. Future work includes
supporting group and video calls as well as porting Herd to
browsers and adapting it to mobile platforms.
Acknowledgements. We thank the anonymous reviewers,
our shepherd Stefan Savage, and Bobby Bhattacharjee for
their helpful feedback. We are grateful to Saptarshi Ghosh,
Krishna Gummadi, Mainack Mondal, and Bimal Viswanath
for sharing their datasets with us. Finally, we thank Zheng
Leong Chua, Italo Cunha, and Vincent Gramoli for help-
ing us test our prototype Herd implementation. This work
was supported by the Max Planck Society, the European Re-
search Council (ERC) under the imPACT Synergy Grant No.
610150, and the NSF under Grant No. CNS-1318396.
651
6. REFERENCES
[1] A potential technique to deanonymise users of the TOR
network. http://www.spiegel.de/media/media-35538.pdf.
[2] Amazon Web Services Simple Monthly Calculator.
http://calculator.s3.amazonaws.com/index.html.
[3] HideMyAss.
http://blog.hidemyass.com/2011/09/23/lulzsec-ﬁasco/.
[4] Inside TAO: Documents Reveal Top NSA Hacking Unit.
http://www.spiegel.de/international/world/the-nsa-uses-
powerful-toolbox-in-effort-to-spy-on-global-networks-a-
940969.html.
[5] International Telecommunication Union (ITU).
http://www.itu.int/.
[6] Jitsi. http://www.jitsi.org.
[7] Microsoft releases 2013 Law Enforcement Requests Report.
http://www.microsoft.com/about/corporatecitizenship/en-
us/reporting/transparency/.
[8] NSA and GCHQ target Tor network that protects anonymity
of web users. http://www.theguardian.com/world/2013/oct/
04/nsa-gchq-attack-tor-network-encryption.
[9] NSA collecting phone records of millions of Verizon
customers daily. http://www.theguardian.com/world/2013/
jun/06/nsa-phone-records-verizon-court-order.
[10] NSA Prism program taps in to user data of Apple, Google
and others. http://www.theguardian.com/world/2013/jun/06/
us-tech-giants-nsa-data.
[11] obfsproxy.
https://www.torproject.org/projects/obfsproxy.html.en.
[12] Silent Circle. https://silentcircle.com/.
[13] User’s guide for PRISM Skype collection.
http://www.spiegel.de/media/media-35530.pdf.
[14] For Syria’s Rebel Movement, Skype Is a Useful and
Increasingly Dangerous Tool, 2012.
http://www.nytimes.com/2012/12/01/world/middleeast/
syrian-rebels-turn-to-skype-for-\\communications.html.
[15] TOR Fone, 2012. http://www.torfone.org/.
[16] Creating a low-latency calling network, 2013. http:
//www.whispersystems.org/blog/low-latency-switching/.
[17] The future of the internet: Balkanization and borders, 2013.
http://ideas.time.com/2013/10/11/the-future-of-the-internet-\
\balkanization-and-borders/.
[18] Freedom on the Net 2014, 2014. https:
//freedomhouse.org/report/freedom-net/freedom-net-2014.
[19] Herd source code and speciﬁcations, 2015.
https://aqua.mpi-sws.org.
[20] A. Back, I. Goldberg, and A. Shostack. Freedom systems 2.1
security issues and analysis. White paper, Zero Knowledge
Systems, Inc., May 2001.
[21] O. Berthold, H. Federrath, and S. Köpsell. Web MIXes: A
system for anonymous and unobservable Internet access. In
PET, 2000.
[22] O. Berthold, A. Pﬁtzmann, and R. Standtke. The
disadvantages of free MIX routes and how to overcome
them. In Workshop on Designing Privacy Enhancing
Technologies, 2001.
[23] M. Cha, H. Haddadi, F. Benevenuto, and K. P. Gummadi.
Measuring user inﬂuence in twitter: The million follower
fallacy. In ICWSM, 2010.
[24] D. Chaum. Untraceable electronic mail, return addresses,
and digital pseudonyms. CACM, 24(2), Feb. 1981.
[25] R. G. Cole and J. H. Rosenbluth. Voice over ip performance
monitoring. In Proc. of SIGCOMM CCR, Apr. 2001.
[26] G. Danezis, C. Diaz, C. Troncoso, and B. Laurie. Drac: An
architecture for anonymous low-volume communications. In
PET, 2010.
[27] G. Danezis, R. Dingledine, and N. Mathewson. Mixminion:
Design of a Type III Anonymous Remailer Protocol. In Proc.
of IEEE S&P, May 2003.
[28] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
second-generation onion router. In Proc. of USENIX Security
Symposium, August 2004.
[29] Facebook. Anatomy of Facebook.
https://www.facebook.com/notes/facebook-data-team/
anatomy-of-facebook/10150388519243859.
[30] M. J. Freedman and R. Morris. Tarzan: A peer-to-peer
anonymizing network layer. In CCS, 2002.
[31] M. Gabielkov, A. Rao, and A. Legout. Studying Social
Networks at Scale: Macroscopic Anatomy of the Twitter
Social Graph. In Proc. of SIGMETRICS, 2014.
[32] C. Gülcü and G. Tsudik. Mixing E-mail with Babel. In Proc.
of NDSS, 1996.
[33] H.-C. Hsiao, T. H.-J. Kim, A. Perrig, A. Yamada, S. C.
Nelson, M. Gruteser, and W. Meng. LAP: Lightweight
anonymity and privacy. In IEEE Security and Privacy, 2012.
[34] ITU-T. Recommendation G.107, the e-model, a
computational model for use in transmission planning,
December 1998.
[35] A. Jerichow, J. Müller, A. Pﬁtzmann, B. Pﬁtzmann, and
M. Waidner. Real-Time MIXes: A Bandwidth-Efﬁcient
Anonymity Protocol. IEEE Journal on Selected Areas in
Communications, 16(4), 1998.
[36] R. M. Karp, U. V. Vazirani, and V. V. Vazirani. An optimal
algorithm for on-line bipartite matching. In Proc. of STOC,
1990.
[37] S. Le Blond, D. Choffnes, W. Zhou, P. Druschel, H. Ballani,
and P. Francis. Towards efﬁcient trafﬁc-analysis resistant
anonymity networks. In SIGCOMM, 2013.
[38] S. Le Blond, C. Zhang, A. Legout, K. Ross, and W. Dabbous.
I know where you are and what you are sharing: exploiting
P2P communications to invade users’ privacy. In Proc. of
IMC, November 2011.
[39] M. Liberatore, B. Gurung, B. N. Levine, and M. Wright.
Empirical tests of anonymous voice over IP. J. Netw.
Comput. Appl., 34(1):341–350, Jan. 2011.
[40] U. Möller, L. Cottrell, P. Palfrader, and L. Sassaman.
Mixmaster Protocol — Version 2. IETF Internet Draft, 2003.
[41] M. Mondal, Y. Liu, B. Viswanath, K. P. Gummadi, and
A. Mislove. Understanding and Specifying Social Access
Control Lists. In Proc. of SOUPS, 2014.
[42] S. Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash
System. 2008.
[43] A. Panchenko, L. Pimenidis, and J. Renner. Performance
analysis of anonymous communication channels provided by
tor. In Proc. of Availability, Reliability and Security, 2008.
[44] A. Pﬁtzmann, B. Pﬁtzmann, and M. Waidner. ISDN-MIXes:
Untraceable communication with very small bandwidth
overhead. In Proc. of the GI/ITG Conference on
Communication in Distributed Systems, 1991.
[45] R. Sherwood, B. Bhattacharjee, and A. Srinivasan. P5: A
protocol for scalable anonymous communication. In Proc. of
Security and Privacy, 2002.
[46] A. Shostack and I. Goldberg. Freedom systems 1.0 security
issues and analysis. White paper, Zero Knowledge Systems,
Inc., October 2001.
[47] D. I. Wolinsky, H. Corrigan-Gibbs, B. Ford, and A. Johnson.
Dissent in Numbers: Making Strong Anonymity Scale. In
Proc. of OSDI, 2012.
652