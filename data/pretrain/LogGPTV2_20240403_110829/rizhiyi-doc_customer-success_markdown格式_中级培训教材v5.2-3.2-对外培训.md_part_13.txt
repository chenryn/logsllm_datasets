函数用于表示当前时间，实际值为搜索请
求收到的时间，在一个请求中多次调用返
now() 回的是同一个值，值为 示例: …|evalcurrent_time=now()
1970-01-01:00:00:00到当前时间的毫秒
数，类型为long
3-131
日志学院
获取字段X的类型。
支持类型为:long,double,int,float,short, 示例：… |evala_type=
typeof(X)
string,object,array typeof(apache.method)
如果字段为null，则返回null
判断字段X是否为数值类型，对于整数类
isnum(X) 型或者浮点型结果都会返回true，其它返 示例： … |evala=isnum(apache.status)
回false
isstr(X) 判断字段X是否为字符串类型 示例: …|evala=isstr(apache.method)
示例：… |evalts=relative_time(timestamp,
字段X必须是时间类型，字段Y必须为一
"-1d/d")
个datemath(请参考时间格式一节)的相对
relative_time(X,Y) 返回得到timestamp所代表的时间减去1天
时间值，返回基于时间戳X的datemath
的毫秒数，并圆整到0点，即timestamp表
的计算结果
示的日期的前一天的零点。
示例：…|evalmatched=
cidrmatch("192.168.1.130/25",
"192.168.1.129")'
将192.168.1.130转换为二进制并保留高位的
25位，低位设为0得到下限（不包括），对
字段X必须是无分类和子网地址扩展 应的ip为192.168.1.128
cidrmatch(X,Y) (CIDR)，字段Y为一个IP地址，判断IP地将192.168.1.130转换为二进制保留高位的
址Y的子网地址是否和X匹配 25位，低位全部设置为1得到上限（不包括），
对应的ip地址为192.168.1.255
因此ip的范围是(192.168.1.128,
192.168.1.255)
凡落在此范围的ip地址均match成功，因此
matched的值为true
对字段X的值执行URL解码，字段X必须
urldecode(X) 为字符串。 示例: … |evalurl=urldecode(url)
NOTE: 目前还不支持指定字符编码
该函数为任意个参数，参数可以为字符串，
mvappend(X,...) ...|evalv=mvappend(initv,"middle")
多值字段，或者单值字段等
该函数只有一个参数X，如果X是多值字
mvcount(X) 段，则返回多值字段的值个数，如果是单 ...|evalc=mvcount(mvfield)
值字段，则返回1，其他返回0
该函数接收一个多值参数X，返回字段值消
mvdedup(X) ...|evalv=mvdedup(mvfield)
重后的多值类型
mvfilter(X, X为类型为多值的参数，filterexpr为过滤条对mv多值字段进行过滤，仅保留1a的值
filterexpr) 件表达式，其中使用_x描述X中的单个值 mvfilter(mv,_x=="1a")
X为多值类型的参数，V表示需要查找的
mvfind(X,V) ...|evaln=mvfind(mymvfield,"err")
值，如果找到返回对应下表，否则返回-1
X为多值类型的参数，如果无end参数，
mvindex(X,start[,
则返回下表为start的元素，如果start不合...|evalv=mvindex(mv,10,-1)
end])
法则返回null，否则返回从下标start到下
3-132
日志学院
标end（不包括）元素组成列表，如果下
表范围不合法返回空数组。
NOTE: 数组下表从0开始
mvjoin(X,DELIMITE 将多值字段X的值使用分隔符DELEMITER
evalv=mvjoin(mv,",")
R) 组成一个字符串
X为多值类型，mapexpr为转换的表达式，
X=["1","3","4"]
使用_x表示X中的单个值，返回的多值类
mvmap(X,mapexpr) … |evalx=mvmap(X,tolong(_x)+2)
型为X中的每个元素使用mapexpr转换得
则x=[3,5,6]
到的值组成的多值类型
该函数使用一个数值的区间生成一个多值
字段，其中X表示区间起始值，Y表示区 下例返回 1,3,5,7.
mvrange(X,Y[,Z])
间结束值（不包括），Z表示步跳数，默认...|evalmv=mvrange(1,8,2)
为1
mvsort(X) 对多值字段进行排序 ...|evals=mvsort(mv)
X和Y都为多值类型，将X中的第一个元
素和Y中的第一个元素都转换为字符串，
并以Z为分隔符进行拼接，得到返回结果
多值结果的第一个元素，类型为字符串， X=[1,3,4,7]
mvszip(X,Y[,"Z"]) 然后按照同样方法对X的第二个元素和Y Y=[2,5,8]
中的第二个元素进行拼接，以此类推得到 mvzip(X,Y)=["1,2","3,5","4,8"]
一个多值的结果。如果X和Y的长度不等，
则当X或者Y处理完最后一个元素后不再
进行拼接
X为字符串类型，使用字符串SEP分割符
对S进行拆分成多值类型，如果SEP为空 如X=":abc::edf:"
split(S,SEP)
字符串，则S将被拆分为单字组成的多值 则split(X,":")=["","abc","","edf",""]
类型
案例 4：只留下需要的数据
为了找到网站性能瓶颈，您一定会关注很多关键指标，如：一段时间内访问状态对比，流量
趋势、请求平均时间等。我们看一下如何求平均请求时间？以及快速找到大于平均时间的访
问记录都有哪些？
SPL：stats avg 求平均值
appname:nginx ANDnginx.request_time:*
|evalnew_request_time=todouble(nginx.request_time)
|statsavg(new_request_time)
结果如图：
3-133
日志学院
SPL 说明：
 statsavg(key)对key字段求平均值。这要求key字段必须为数值，由于没有在日志解析
时做数值型转化的字段均默认为字符型字段，所以在计算nginx的平均请求时间之前需
要使用eval命令的todouble参数将nginx.request_time字段转换为数值型。该问题可以
在解析过程中解决，具体方法不再在本文中阐述。stats 命令我们使用了avg 函数求出
一段时间内的平均请求时间。
SPL：where 过滤项
appname:nginx ANDnginx.request_time:*
|evalnew_request_time=todouble(nginx.request_time)
|wherenew_request_time>0.005
结果如图：
3-134
日志学院
SPL说明：
 通过statsavg()得出平均请求时间在0.005，那么通过where 命后您就会看到当前将请
求时间大于0.005所有事件。Where后支持的函数与表达式可以参考eval参数表。
 是否可以直接将请求时间大于0.005的请求时间以表格的形式进行展示呢？如果我们
还想展示更多字段呢？能否生成二维关系表？在二维表以后如何进行过滤呢？
SPL：table 大道至简一切皆表格
appname:nginxANDnginx.request_time:*
|evalnew_request_time=todouble(nginx.request_time)
|tablenginx.client_ip.geo.ip,nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time,nginx.method,nginx.status
结果如图：
3-135
日志学院
SPL说明：
 通过where可以看到过滤到符合条件的日志，但日志的字段有很多，我们需要展示的
可能只是其中的部分字段。如同从Excel原始表格中取需要的列数据进行展示一样，在
日志易中可使用table保留所需的字段。
 本例中增加table命令可以直接将所有事件中需要的字段信息生成二维表格。
如果当前我们想对结果的二维表进行过滤，可以通过两种方式处理。如：只想查看客户端IP
来自北京地区相关数据。可以使用：
方式一：
appname:nginxANDnginx.request_time:*
|evalnew_request_time=todouble(nginx.request_time)
|tablenginx.client_ip.geo.ip,nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
|wherenginx.client_ip.geo.province=="北京"
3-136
日志学院
方式二：
appname:nginxANDnginx.request_time:*ANDnginx.client_ip.geo.province:北京
|evalnew_request_time=todouble(nginx.request_time)
|tablenginx.client_ip.geo.ip,nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time,nginx.method,nginx.status
SPL说明：
 方式二将过滤内容放在查询中。这样先过滤后计算的方式，比先计算后过滤效率更高。
 更多高效率搜索方式，请参考产品文档《日志易搜索实例手册》第二章节。
SPL：sort 排序突出重点
appname:nginxANDnginx.request_time:*ANDnginx.client_ip.geo.province:北京
|evalnew_request_time=todouble(nginx.request_time)
3-137
日志学院
|tablenginx.client_ip.geo.ip,nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
|sortbynew_request_time
结果如图：
SPL说明：
 当您想对上例中请求时间进行倒排序，以突出重点时或显示异常情况。可以使用sort 命
令，by为必选参数。sort 对单个字段排序可以用符号”+”表示升序，默认为降序排列，
也可用“-”表示降序。
SPL：dedup 去冗余
appname:nginxANDnginx.request_time:*ANDnginx.client_ip.geo.province:北京
|evalnew_request_time=todouble(nginx.request_time)
|tablenginx.client_ip.geo.ip,nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time,nginx.method,nginx.status
|sortbynew_request_time
|dedupnew_request_time
结果如图：
未用dedup前：
3-138
日志学院
使用dedup后：
SPL说明：
 dedup命令可以对搜索结果中指定字段值的重复情况进行去重。默认只保留重复出现的
第一条数据。命令详细内容可以参阅《日志易检索参考》手册。
SPL：limit 限量显示
appname:nginxANDnginx.request_time:*ANDnginx.client_ip.geo.province:北京
|evalnew_request_time=todouble(nginx.request_time)
|tablenginx.client_ip.geo.ip,nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
|sortbynew_request_time
|limit3
3-139
日志学院
SPL说明：
 您也许仅仅想要突出一部分量大、耗时高或者数值非常小的数据用于图表展现，这时候
就可以使用limit 对返回数据量进行限定。limit3 即显示前3行。
SPL：autoregress 实现跨行计算
以上我们看到的SPL指令，都是基于同一列或同一行的数据进行的运算。如果想要对跨行信
息进行计算呢？如相邻两条信息做时差的计算，或对两个属性统计值做比例计算，如下面的
场景：
appname:nginx
|evalnew_status=if(nginx.status=="200","正常","异常")
|statscount()bynew_status
查询结果：
如何计算正常与异常两种情况占总体的比值？ 日志易提供了autoregress函数实现跨行运
算。
appname:nginx
|evalnew_status=if(nginx.status=="200","正常","异常")
|statscount()asCOUNTbynew_status
|autoregress'COUNT'asnew p=1
结果如图：
3-140
日志学院
SPL说明：
 首先我们要解决访问连接状态次数求和问题。autoregress命令可以实现跨行字段的计
算。将COUNT列的数据复制，然后按照单位p的跨度1向下移动一行，便生成了新
的字段new。新列new与COUNT列每行错开单位为1。
 autoregress可用于计算两条相邻日志间的时间差；可用在排序后，计算相邻数据间的
比率差；可用在bucket后，计算相邻时间段的事件数变化率。
通过eval 命令对列值进行计算，SPL如下：