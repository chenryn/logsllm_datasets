title:The Hijackers Guide To The Galaxy: Off-Path Taking Over Internet Resources
author:Tianxiang Dai and
Philipp Jeitner and
Haya Shulman and
Michael Waidner
The Hijackers Guide To The Galaxy: 
Off-Path Taking Over Internet Resources
Tianxiang Dai, Fraunhofer Institute for Secure Information Technology SIT; 
Philipp Jeitner, Fraunhofer Institute for Secure Information Technology SIT, 
Technical University of Darmstadt; Haya Shulman, Fraunhofer Institute for 
Secure Information Technology SIT; Michael Waidner, Fraunhofer Institute for 
Secure Information Technology SIT, Technical University of Darmstadt
https://www.usenix.org/conference/usenixsecurity21/presentation/dai
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.The Hijackers Guide To The Galaxy:
Off-Path Taking Over Internet Resources
Tianxiang Dai*, Philipp Jeitner*†, Haya Shulman* and Michael Waidner*†
*Fraunhofer Institute for Secure Information Technology SIT
†Technical University of Darmstadt
Abstract
Internet resources form the basic fabric of the digital so-
ciety. They provide the fundamental platform for digital ser-
vices and assets, e.g., for critical infrastructures, ﬁnancial ser-
vices, government. Whoever controls that fabric effectively
controls the digital society.
In this work we demonstrate that the current practices of
Internet resources management, of IP addresses, domains,
certiﬁcates and virtual platforms are insecure. Over long pe-
riods of time adversaries can maintain control over Internet
resources which they do not own and perform stealthy manip-
ulations, leading to devastating attacks. We show that network
adversaries can take over and manipulate at least 68% of
the assigned IPv4 address space as well as 31% of the top
Alexa domains. We demonstrate such attacks by hijacking the
accounts associated with the digital resources.
For hijacking the accounts we launch off-path DNS cache
poisoning attacks, to redirect the password recovery link to the
adversarial hosts. We then demonstrate that the adversaries
can manipulate the resources associated with these accounts.
We ﬁnd all the tested providers vulnerable to our attacks.
We recommend mitigations for blocking the attacks that
we present in this work. Nevertheless, the countermeasures
cannot solve the fundamental problem - the management
of the Internet resources should be revised to ensure that
applying transactions cannot be done so easily and stealthily
as is currently possible.
1 Introduction
Internet resources form the cornerstone of modern societies.
The daily activities and services are increasingly digitalised,
from critical infrastructures to medical services and child care.
The society relies on the control over its Internet resources for
availability and stability of digital services and assets. Due to
their importance, Internet resources pose a lucrative target for
adversaries.
Internet resources are at risk. In this work we explore
the security of the Internet management systems of basic
digital assets: IP addresses management with Regional In-
ternet Registries (RIRs) [RFC7020], domains with domain
registrars, virtual machine resources with infrastructure as
a service (IaaS) providers and certiﬁcation with Certiﬁcate
Authorities (CAs), see the list in Table 1. These providers
manage the allocation, registration and operation of the In-
ternet resources for their customers. We study how easy it
is for network adversaries to take over the accounts of these
resource providers and then exploit the resources associated
with the compromised accounts.
We show that the current practices of Internet resources
management are insecure. Adversaries can take control over
digital assets of customers and maintain control over them for
long periods of time without being detected. Although such
attacks are appealing for strong nation state adversaries and
security agencies, we demonstrate that even weak off-path
network adversaries can, through a series of protocol manip-
ulations, take over the accounts of customers and thereby
control the Internet resources associated with them.
Adversaries can hijack accounts. The idea behind our
attacks is the following: the adversary poisons the cache of
the DNS resolver of a resource provider, injecting a malicious
record mapping the Email server of the victim customer to
an adversarial host. The adversary invokes password recov-
ery procedure. The Email server of the provider sends the
password reset link to the IP address of the adversary. Adver-
sary resets the password and hijacks the victim account. We
demonstrate how the adversary can perform manipulations
over the resources associated with the hijacked accounts.
Manipulation of the digital resources. The SSO (Single
Sign On) accounts of the RIRs pose the highest risk: hijacking
an SSO account allows a weak adversary to take over ASes
and IP blocks allocated to the victim. Furthermore, through
the hijacked account the adversary can make manipulations
not only in the control plane of the Internet infrastructure but
also in the Internet Routing Registries (IRR) and in Internet
Addressing Resource Registries. Such modiﬁcations in the
IRR can among others also facilitate extremely effective BGP
preﬁx hijacks. Speciﬁcally, IRR records are prerequisite for
USENIX Association
30th USENIX Security Symposium    3147
BGP hijack attacks - without proper records in the IRR the
attacker cannot convince benign upstream providers to accept
and propagate the fraudulent BGP announcements in the input
ﬁlters on the BGP sessions. Adversaries without the ability
to modify the IRR, have to use less vigilant and generally
poorly managed networks as upstream providers or have to
utilise path manipulation attacks [35] - both restricting the
success rate and the stealthiness of the attack. Our adversary
can, by modifying the records in the IRR, cause well managed
and reputed upstream providers to unwittingly propagate the
malicious BGP announcements. Hence making BGP preﬁx
hijacks more effective than the typical control plane BGP
preﬁx hijacks while at the same time more difﬁcult to identify.
To maintain control over the victim Local Internet Registries
(LIRs) resources over long periods of time the adversary im-
plants itself in the system with elevated privileges.
We also show that hijacking an account under a CA allows
an adversary to revoke certiﬁcates, renew a certiﬁcate or issue
new certiﬁcates for domains registered under the hijacked
account. Renewal of certiﬁcates allows to associate a new
key-pair with the certiﬁcate. Nevertheless some CAs do not
perform validation of certiﬁcate renewal requests issued from
registered accounts.
By hijacking the accounts of domain registrars, the ad-
versary can manipulate records in victim domains, e.g., to
launch phishing attacks. Finally, hijacking accounts of IaaS
providers enables the attackers to take over virtual machines
and the resources that run on those virtual machines, including
databases, applications and computations.
Disclosure and ethics. Our attacks were tested against
providers and customers reliably, yet were ethically compliant.
To avoid harming Internet users, we set up victim domains
and registered victim accounts which were used by us for
carrying out the attacks and for evaluating the vulnerabilities.
This ensured that the providers would not use the spoofed
records for any “real” purpose. In addition to evaluating the
attacks with the “victim” accounts that we set up, we also
evaluated our exploits of hijacked accounts against one large
ISP under RIPE NCC and attacked the real domain of that ISP
in coordination with that ISP. We are disclosing the results of
our work to the providers.
Contributions. We provide the ﬁrst demonstration of
off-path attacks exploiting hijacked accounts under popular
providers and show that adversaries can perform manipula-
tions in the resources assigned to the accounts over long time
periods without being detected.
Organisation. In Section 2 we review DNS cache poison-
ing and related work. In Section 3 we provide an overview
of our study. In Section 4 we list methodologies for off-path
DNS cache poisoning attacks. In Section 5 we evaluate the
cache poisoning methodologies for taking over customers
accounts in different providers in our dataset. Then, in Sec-
tion 6, we demonstrate how the adversaries can manipulate
digital resources assigned to the accounts they control. In
Section 7 we explain the fraction of the digital resources (IP
address’ blocks and domains) that are at immediate risk due
to being associated with vulnerable accounts. We recommend
countermeasures in Section 8 and conclude in Section 9.
2 DNS Cache Poisoning Overview
DNS. Domain Name System (DNS), [RFC1035], performs
lookup of services in the Internet. Recursive caching DNS re-
solvers receive DNS requests for services in different domains
and send queries to the nameservers authoritative for those
domains. The nameservers respond with the corresponding
DNS records. The DNS records in responses are cached by
the DNS resolvers and are provided to clients and servers
which use that resolver. Subsequent requests for that domain
are responded from the cache. For instance, to send an Email
to PI:EMAIL the Email server of Bob will ask
the DNS resolver for the IP address of the Email exchanger in
domain example.info. The resolver asks the nameservers
in domain example.info for an IP address and a hostname
(A and MX records) of the Email exchanger and receives:
example.info IN MX mail.example.info
mail.example.info A 1.2.3.4
The resolver will send to the Email server of Bob the IP
address of the Email exchanger of Alice and will also cache
the records from the response for answering future queries
for MX and A in example.info domain.
DNS Cache Poisoning. In a DNS cache poisoning attack
the goal of the adversary is to redirect clients of some resolver
to an IP address of the adversary for queries in a target victim
domain. To do that, the adversary sends a DNS response from
a spoofed source IP address, which belongs to the nameserver
of the victim domain, with malicious DNS records mapping
the victim domain to an IP address of the adversary. For
instance, to intercept the Emails sent to Alice the adversary
injects a DNS record mapping the Email exchanger of Alice
to an adversarial host. If the resolver accepts and caches the
malicious record, its cache becomes poisoned.
example.info IN MX mail.example.info
mail.example.info A 6.6.6.6
The added value of DNS cache poisoning attacks is that
they have a local impact, affecting not the entire Internet
but only the victim network and hence allow for extremely
stealthy attacks, which can go undetected over long time pe-
riods. There is more and more evidence of DNS cache poi-
soning in the wild and the attacks are becoming increasingly
sophisticated. In the recent cache poisoning attacks in the
wild the adversaries attempt to intercept DNS packets by
launching short-lived BGP (Border Gateway Protocol) preﬁx
hijacks [34]. In such attacks, the adversary advertises a BGP
announcement hijacking the preﬁx of a victim for a short time
3148    30th USENIX Security Symposium
USENIX Association
only to hijack the target DNS packet and then releases the
hijack [15]. This allows the attacker to poison the DNS cache
of a victim resolver and then intercept all the communication
between the victim resolver and the target domain. Recent
research projects showed that the CAs (Certiﬁcate Authori-
ties) and the bitcoin infrastructures were not resilient to preﬁx
hijacks [6, 8, 9].
History of DNS Cache Poisoning. Launching cache poi-
soning in practice is however hard. We explain the evolution
of cache poisoning attacks and the mitigations. In 1995 Vixie
pointed out to the cache poisoning vulnerability and suggested
to randomise the UDP source ports in DNS requests [45].
In 2002 Bernstein also warned that relying on randomis-
ing Transaction ID (TXID) alone is vulnerable [7]. Indeed,
in 2007 [29] identiﬁed a vulnerability in Bind9 and in Win-
dows DNS resolvers [30] allowing off-path attackers to reduce
the entropy introduced by the TXID randomisation. In 2008
Kaminsky [26] presented a practical cache poisoning attack
even against truly randomised TXID. Following Kaminsky
attack DNS resolvers were patched against cache poisoning
[RFC5452] by randomising the UDP source ports in queries.
Nevertheless, shortly after different approaches were devel-
oped to bypass the source port and the TXID randomisation
for launching off-path cache poisoning attacks. In 2012 [17]
showed that off-path adversaries can use side-channels to infer
the source ports in DNS requests. In 2015 [41] showed how to
attack resolvers behind upstream forwarders. This work was
subsequently extended by [47] with poisoning the forwarding
devices. A followup work demonstrated such cache poisoning
attacks also against stub resolvers [5]. [33] showed how to use
ICMP errors to infer the UDP source ports selected by DNS
resolvers. Recently [31] showed how to use side channels to
predict the ports due to vulnerable PRNG in Linux kernel. In
2013 [18] provided the ﬁrst feasibility result for launching
cache poisoning by exploiting IPv4 fragmentation. IPv4 frag-
mentation based attacks were applied to shift time on NTP
servers [11, 23, 32], these attacks are not practical anymore
since the nameservers in NTP domains were patched to avoid
fragmentation. The study in [11] used fragmentation based
cache poisoning for bypassing domain validation with CAs.
However, most CAs patched the vulnerabilities which [11] ex-
ploited to attack domain validation, e.g., Let’sEncrypt blocked
fragmentation. Let’sEncrypt also deployed domain validation
from multiple vantage points [9, 25], which makes the previ-
ous off-path attacks [8, 11] impractical.
In addition to other attacks in this work, we also show
another way to attack the CAs, by taking over customers’
accounts with the CAs and not by bypassing domain vali-
dation. As we show this allows even more effective attacks
that were presented in [11]: (1) when controlling a compro-
mised account the adversary can renew existing certiﬁcates
to use a new key-pair. Since some CAs do not apply domain
validation during certiﬁcates’ renewal this attack allows to
issue fraudulent certiﬁcates without the need to attack DV.
Furthermore, in our work we use a number of off-path DNS
cache methodologies from [14] to take over accounts with
providers.
Cache poisoning attacks could be prevented with DNSSEC
[RFC6840] [46] which uses cryptographic signatures to au-
thenticate the records in DNS responses. However, DNSSEC
is not widely deployed. Less than 1% of the second level
domains (e.g., 1M-top Alexa) domains are signed, and most
resolvers do not validate DNSSEC signatures, e.g., [12] found
only 12% in 2017. Our measurements show that the DNSSEC
deployment in our datasets is not better: the resolvers of 19
out of 35 tested providers do not validate DNSSEC signatures
(see Table 2) and less than 5% of the customers’ domains are
signed. Deploying DNSSEC was showen to be cumbersome
and error-prone [13]. Even when widely deployed DNSSEC
may not always provide security: a few research projects
identiﬁed vulnerabilities and misconﬁgurations in DNSSEC
deployments in popular registrars [12, 42]. However, even
correctly deployed DNSSEC does not prevent recent cache
poisoning attacks [24]. The idea behind these attacks is to
encode injections into the DNS records in DNS responses.
When the resolver parses the records, a misinterpretation oc-
curs, such that when the record is stored a different domain
name is used. Since DNSSEC validation is applied prior to
the misinterpretation, the validation of DNSSEC succeeds,
and the DNS cache poisoning occurs afterwards. Preventing
these attacks requires validating or escaping records from
DNS lookups.
Recent proposals for encryption of DNS trafﬁc, such as
DNS over HTTPS [21] and DNS over TLS [22], although vul-
nerable to trafﬁc analysis [40,43], may also enhance resilience
to cache poisoning. These mechanisms are not yet in use by
the nameservers in the domains that we tested. Nevertheless,
even if they become adopted, they will not protect the entire
resolution path, but only one link on which the transport is
protected and hence will not completely prevent DNS cache
poisoning attacks.
3 Attack Overview
In our study we explore the security of the services which
provide access to and management of the key digital assets in
the Internet: domains, IP preﬁxes and ASes, virtual machines
and certiﬁcates. In Table 1 we list the resources, as well as the
public service providers of these resources, that we studied in
this work. Access and management of these digital resources
is performed with the accounts that the providers offer to the
customers via their web portals. In this section we provide an
overview of our study from the perspective of the adversary
for hijacking the accounts of the customers under different
resource providers.
Find the target. Assume for example that the adversary
wishes to hijack the DNS servers hosted on a victim preﬁx
205.251.192.0/18 – this was a real attack launched against
USENIX Association
30th USENIX Security Symposium    3149
an LIR Amazon route53 in April 2018. First, the adversary
needs to ﬁnd an account to which these resources are assigned
and through which these resources can be managed. Then,
the adversary needs to ﬁnd the username associated with that
account. In Section 5.2 we show how to ﬁnd the needed in-
formation: the owner, the public service provider, the Email
which is associated with the account through which the digital
resources can be managed. In the case of our example, the pre-
ﬁx is allocated by ARIN to an LIR with OrgId AMAZON-4, aka
Amazon.com, Inc. and has 3 origin ASNs (Autonomous Sys-
tem Numbers) registered: AS16509, AS39111 and AS7224.
We thereby learn that the responsible RIR for Amazon is
ARIN and that Amazon has an LIR agreement with ARIN.
We also ﬁnd the Email address PI:EMAIL
used by Amazon for managing its resources via the SSO
account with ARIN.
Poison DNS of public service provider. The adversary
uses one of the methodologies in Section 4 to launch off-
path DNS cache poisoning attack against the DNS resolver of
the service provider ARIN. During the attack the adversary
injects a malicious DNS record mapping the Email server
of domain amazon.com to the IP addresses controlled by the
adversary (step 1 , Figure 1). As a result, the Emails sent by
ARIN to Amazon will be received by the adversary.
Hijack victim account. The adversary triggers password
recovery for Email ipmanagement@amazon.com. This Email
is associated with the SSO account at ARIN. In order to send
the password recovery link, the Email server at ARIN needs
the IP address of the Email server of Amazon. The resolver at
ARIN already has a corresponding record in the cache, which
it provides to the Email server. This IP address was injected
by the adversary earlier in step 1 . ARIN sends the Email
with password recovery instructions to the adversary (step 2 ,
Figure 1). The attacker resets the password and takes control
over the account. We experimentally evaluate such attacks
against the providers and their customers in our dataset in
Section 5 for details.
Manipulate the resources. The adversary manipulates the
resources assigned to the victim account, say of Amazon, and
can sell the IP preﬁxes and ASes owned by Amazon (step 3 ,
Figure 1). In Section 6 we describe the exploits we evaluated
against the resources assigned to our victim accounts. We
show that among others, the attacker can create additional
accounts for itself with arbitrary privileges, and hence even
if the real owner resets the password back, the attacker still
maintains control over the resources. In some cases these ma-
nipulations generate notiﬁcation Emails to the Email address
associated with the resources. This Email address is however
hijacked by the adversary, hence the adversary receives the
notiﬁcations. As a result the attack will not be detected and
can stay under the radar over a long period of time.
Figure 1: Attack overview
4 Off-Path DNS Cache Poisoning
The key contribution in our work is to show that once an
adversary controls an account with a resource provider, it can
in an easy and stealthy way manipulate the digital resources
associated with that account. But, how easy is it to take over
accounts? We show how to take over accounts by injecting
a poisoned DNS record into the caches in DNS resolvers of
providers. When the adversary triggers the password recovery
procedure for the victim account, the reset email is sent to the
adversarial host at the IP address in the injected DNS record.
How easy is it to launch off-path DNS cache poisoning?
In this section we use methodologies from [14] to launch off-
path DNS cache poisoning attacks: BGP preﬁx hijacks [8],
side-channels [33], and IPv4 defragmentation cache poison-
ing [18]. We do not consider attack methodologies which are
effective only against speciﬁc operating systems, say due to
poor random number generators. We implement cache poi-
soning attacks using these methodologies and evaluate them
against the providers and the customers in our dataset. We
describe the experimental setup in Section 4.1. We explain
our study methodology in Section 4.2. Then in Sections 4.3,
4.4 and 4.5 we present the DNS cache poisoning methodolo-
gies and the experimental evaluations against the targets in
our dataset.
4.1 Setup
To test our attacks experimentally in the Internet we setup
a victim AS. To purchase the victim AS we registered a
secondary LIR account with RIPE NCC for our organisation