over the following month.
While we were able to isolate the problem to one vendor in this
instance, our process of reaching out to them does not scale to all
middleboxes and vendors. We do not know if other bits exposed
by QUIC have been ossified by this or other middleboxes, and
we do not have a method to answer this question at Internet scale.
We did learn that middlebox vendors are reactive. When traffic
patterns change, they build responses to these observed changes.
This pattern of behavior exposes a "deployment impossibility cycle"
however, since deploying a protocol change widely requires it to
work through a huge range of middleboxes, but middleboxes only
change behavior in response to wide deployment of the change. This
experience reinforces the premise on which QUIC was designed:
when deploying end-to-end changes, encryption is the only means
available to ensure that bits that ought not be used by a middlebox
are in fact not used by one.
194
The QUIC Transport Protocol
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
8 RELATED WORK
SPDY [3] seeks to reduce web latency and has been subsumed by
the HTTP/2 standard [8]. QUIC is a natural extension of this work,
seeking to reduce latency further down the stack.
QUIC’s design is closest to that of Structured Stream Transport
(SST) [23]. Among other similarities, SST uses a channel identi-
fier, uses monotonically increasing packet numbers, encrypts the
transport header, and employs lightweight streams. QUIC builds on
these design ideas. QUIC differs from SST in several, sometimes
subtle, ways. For instance, while SST avoids handshake latency for
subsequent streams, the first stream incurs it. QUIC avoids hand-
shake latency on repeat connections to the same server, and includes
version negotiation in the handshake. Stream multiplexing to avoid
head-of-line blocking is not a new idea; it is present in SCTP [62],
SST [23], and as message chaining in Minion [32]. QUIC borrows
this design idea. QUIC also uses shared congestion management
among multiple application streams, similar to SCTP, SST, and the
Congestion Manager [7]. MinimaLT [51] was developed contempo-
raneously. It has a similar 0-RTT handshake, multiplexes application
"connections" within an encrypted MinimaLT "tunnel", and performs
congestion control and loss detection on the aggregate. MinimaLT
additionally prevents linkability of a connection as it migrates from
one IP address to another. This privacy-preserving feature is cur-
rently under consideration as QUIC evolves at the IETF.
Modifications to TCP and TLS have been proposed to address
their handshake latencies. TCP Fast Open (TFO) [11, 53] addresses
the handshake latency of TCP by allowing data in the TCP SYN
segment to be delivered to a receiver on a repeat connection to the
same server. TFO and QUIC differ in two key ways. First, TFO
limits client data in the first RTT to the amount that fits within the
TCP SYN segment. This limit is absent in QUIC, which allows
a client to send as much data as allowed by the congestion and
flow controllers in this initial RTT. Second, TFO is useful on repeat
connections to a destination with the same IP address as the first
connection. A common load balancing method employed by servers
is to use multiple IP addresses for the same hostname, and repeat
TCP connections to the same domain may end up at different server
IP addresses. Since QUIC combines the cryptographic layer with
transport, it uses 0-RTT handshakes with repeat connections to the
same origin. Finally, while TFO is now implemented in major OSes
(Windows, Linux, MacOS/iOS), its deployment is limited due to
middlebox interference [50] and due to slow client OS upgrades.
QUIC’s cryptographic handshake protocol was a homegrown pro-
tocol, but has been formally analyzed by various groups [20, 38, 44].
Facebook’s Zero Protocol was directly derived from QUIC’s cryp-
tographic protocol [35]. TLS 1.3 [55], inspired in part by QUIC’s
handshake protocol [42], addresses the handshake latency of TLS
1.2, the currently deployed TLS version. Since TLS 1.3 now pro-
vides the latency benefits of QUIC’s cryptographic handshake, IETF
standardization work will replace QUIC’s cryptographic handshake
with TLS 1.3 [63].
9 CONCLUSION
QUIC was designed and launched as an experiment, and it has now
become a core part of our serving infrastructure. We knew that wide
deployment of a new UDP-based encrypted transport for HTTP was
an audacious goal; there were many unknowns, including whether
UDP blocking or throttling would be show-stoppers. Our experimen-
tation infrastructure was critical in QUIC’s deploy-measure-revise
cycles, and it allowed us to build and tune a protocol suited for
today’s Internet.
We expect to continue working on reducing QUIC’s CPU cost at
both the server and the client and in improving QUIC performance
on mobile devices. One of QUIC’s most important features is its
ability to be used as a platform for wide-scale experimentation with
transport mechanisms, both at the server and at the client. Ongo-
ing experimentation and work is continuing on several fronts. First,
we are experimenting with connection migration to reduce latency
and failures with various mobile applications. Later work may in-
clude implementation of general-purpose multipath [31, 54]. Second,
we are experimenting with modern congestion controllers such as
BBR [10] and PCC [16]. Third, we are working on using QUIC for
WebRTC [4] and intend to explore avenues for better supporting
real-time payloads.
The lessons we learned and described in this paper are transferable
to future work on Internet protocols. Of the lessons, we’ll reiterate
a few important ones. First, developing and deploying networking
protocols in user space brings substantial benefits, and it makes
development, testing, and iteration cycles faster and easier. Second,
layering enables modularity but often at the cost of performance,
and re-designing and rewriting critical paths in the protocol stack is
a useful exercise. Squashing the layers of HTTPS in QUIC allowed
us to weed out inefficiencies in the HTTPS stack.
Finally, while a tussle between the endpoints and the network is
expected and inevitable, it can only be resolved when all interested
parties come to the table [13]. Previous attempts to deploy proto-
cols that require any modification to network devices—ECN [41],
SCTP [62], TCP Fast Open [11], and MPTCP [47, 54], to name a
few—have unequivocally exposed the difficulties of incentivizing
and achieving consensus on proposed network changes. As noted
in [13], "the ultimate defense of the end to end mode is end to end en-
cryption." Encryption forces the conversation among various parties
and remains the sole guardian of the end-to-end principle.
ACKNOWLEDGMENTS
A project of this magnitude is not possible without a lot of hands.
We thank Amin Vahdat, Assar Westerlund, Biren Roy, Chris Bentzel,
Danner Stodolsky, Jeff Callow, Leonidas Kontothanassis, Mihai
Dumitrescu, Mike Warres, Misha Efimov, Roberto Peon, Siddharth
Vijayakrishnan, Tarun Bansal, Ted Hardie, and Yu-Ting Tseng for
their work and support over the years.
We thank all groups at Google that helped deploy QUIC, espe-
cially Traffic Team.
We thank folks at Akamai, at Caddy (quic-go), and Christian
Huitema for implementing and/or adopting QUIC early and provid-
ing incredibly valuable feedback. Without all of their help, QUIC
would not be where it is today.
We thank Jeff Mogul, Matt Welsh, Stuart Cheshire, our shepherd
Ankit Singla, and the anonymous SIGCOMM reviewers for review-
ing previous versions of this paper. Without their help, this paper
would have been an unreadable mess.
195
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
A. Langley et al.
[33] J. Iyengar and I. Swett. 2016. QUIC Loss Detection and Congestion Control.
IETF Internet Draft, draft-ietf-quic-recovery (2016).
[34] J. Iyengar and M. Thomson. 2016. QUIC: A UDP-Based Multiplexed and Secure
Transport. IETF Internet Draft, draft-ietf-quic-transport (2016).
Iyengar
for
and K. Nekritz.
[35] S.
col
book
building-zero-protocol-for-fast-secure-mobile-connections/.
proto-
Face-
https://code.facebook.com/posts/608854979307125/
Building Zero
secure mobile
connections.
(2017).
2017.
Post,
fast,
[36] J. Brutlag. 2009. Speed Matters.
https://research.googleblog.com/2009/06/
speed-matters.html.
[37] V. Jacobson, R. Braden, and D. Borman. 1992. RFC 1323: TCP extensions for
high performance. Internet Engineering Task Force (IETF) (1992).
[38] T. Jager, J. Schwenk, and J. Somorovsky. 2015. On the Security of TLS 1.3 and
QUIC Against Weaknesses in PKCS#1 V1.5 Encryption. In ACM Conference on
Computer and Communications Security (CCS).
[39] P. Karn and C. Partridge. 1987. Improving Round-Trip Time Estimates in Reliable
Transport Protocols. In ACM SIGCOMM.
Without Reliability. In ACM SIGCOMM.
[10] N. Cardwell, Y. Cheng, C. S. Gunn, V. Jacobson, and S. Yeganeh. 2016. BBR:
[40] E. Kohler, M. Handley, and S. Floyd. 2006. Designing DCCP: Congestion Control
REFERENCES
[1] Chromium QUIC Implementation. https://cs.chromium.org/chromium/src/net/
quic/.
IETF QUIC working group. https://datatracker.ietf.org/wg/quic/.
[2]
[3] SPDY: An experimental protocol for a faster web. https://www.chromium.org/
spdy/spdy-whitepaper.
[4] The WebRTC Project. https://webrtc.org.
[5] A. Barth. 2015. RFC 6454: The Web Origin Concept. Internet Engineering Task
Force (IETF) (Dec. 2015).
I. Arapakis, X. Bai, and B. Cambazoglu. 2014. Impact of Response Latency on
User Behavior in Web Search. In ACM SIGIR.
[7] H. Balakrishnan, H. Rahul, and S. Seshan. 1999. An integrated congestion
[6]
management architecture for Internet hosts. ACM SIGCOMM (1999).
[8] M. Belshe, R. Peon, and M. Thomson. 2015. RFC 7540: Hypertext Transfer
Protocol Version 2 (HTTP/2). Internet Engineering Task Force (IETF) (2015).
[9] M. Bishop. 2017. Hypertext Transfer Protocol (HTTP) over QUIC. IETF Internet
Draft, draft-ietf-quic-http (2017).
Congestion-Based Congestion Control. In ACM Queue.
[11] Y. Cheng, J. Chu, S. Radhakrishnan, and A. Jain. 2016. RFC 7413: TCP Fast
Open. Internet Engineering Task Force (IETF) (2016).
[12] D. Clark and D. Tennenhouse. 1990. Architectural Considerations For a New
Generation of Protocols. In ACM SIGCOMM.
[13] D. Clark, J. Wroclawski, K. Sollins, and R. Braden. 2005. Tussle in cyberspace:
defining tomorrow’s internet. IEEE/ACM Transactions on Networking (ToN)
(2005).
[14] J. Crowcroft and P. Oechslin. 1998. Differentiated End-to-end Internet Services
Using a Weighted Proportional Fair Sharing TCP. SIGCOMM Computer Commu-
nication Review (1998).
[15] J. Dean and L. Barroso. 2013. The Tail at Scale. Commun. ACM (2013).
[16] M. Dong, Q. Li, D. Zarchy, B. Godfrey, and M. Schapira. 2015. PCC: Re-
architecting Congestion Control for Consistent High Performance. In USENIX
NSDI.
[17] N. Dukkipati, N. Cardwell, Y. Cheng, and M. Mathis. 2013. Tail Loss Probe
(TLP): An Algorithm for Fast Recovery of Tail Losses. (2013).
[18] E. Dumazet. 2015.
idle period.
30927520dbae297182990bb21d08762bcc35ce1d.
(2015).
tcp_cubic
better
after
https://github.com/torvalds/linux/commit/
follow cubic
curve
[19] R. Fielding and J. Reschke. 2014. RFC 7230: Hypertext Transfer Protocol
Internet Engineering Task Force
(HTTP/1.1): Message Syntax and Routing.
(IETF) (2014).
[20] M. Fischlin and F. Günther. 2014. Multi-Stage Key Exchange and the Case of
Google’s QUIC Protocol. In ACM Conference on Computer and Communications
Security (CCS).
[21] T. Flach, N. Dukkipati, A. Terzis, B. Raghavan, N. Cardwell, Y. Cheng, A. Jain,
S. Hao, E. Katz-Bassett, and R. Govindan. 2013. Reducing Web Latency: The
Virtue of Gentle Aggression. ACM SIGCOMM (2013).
[22] T. Flach, P. Papageorge, A. Terzis, L. Pedrosa, Y. Cheng, T. Karim, E. Katz-
Bassett, and R. Govindan. 2016. An Internet-wide Analysis of Traffic Policing.
In ACM SIGCOMM.
[23] B. Ford. 2007. Structured Streams: A New Transport Abstraction. In ACM
SIGCOMM.
[24] G. Linden. 2006. Make Data Useful. http://sites.google.com/site/glinden/Home/
StanfordDataMining.2006-11-28.ppt.
I. Grigorik. 2013. Speed, Performance, and Human Perception. (2013). https:
//hpbn.co/primer-on-web-performance.
[25]
[26] S. Ha, I. Rhee, and L. Xu. 2008. CUBIC: A New TCP-friendly High-Speed TCP
Variant. ACM SIGOPS Operating Systems Review (2008).
[27] S. Hätönen, A. Nyrhinen, L. Eggert, S. Strowes, P. Sarolahti, and M. Kojo. 2010.
An Experimental Study of Home Gateway Characteristics. In ACM IMC.
[28] M. Honda, F. Huici, C. Raiciu, J. Araújo, and L. Rizzo. 2014. Rekindling network
protocol innovation with user-level stacks. ACM Computer Communication
Review (2014).
[29] M. Honda, Y. Nishida, C. Raiciu, A. Greenhalgh, M. Handley, and H. Tokuda.
2011. Is It Still Possible to Extend TCP?. In ACM IMC.
[30] J. Iyengar. 2015. Cubic Quiescence: Not So Inactive. (2015). Presentation at
IETF94, https://www.ietf.org/proceedings/94/slides/slides-94-tcpm-8.pdf.
[31] J. Iyengar, P. Amer, and R. Stewart. 2006. Concurrent Multipath Transfer Using
SCTP Multihoming Over Independent End-to-End Paths. IEEE/ACM Transac-
tions on Networking (ToN) (2006).
[32] J. Iyengar, S. Cheshire, and J. Greassley. 2013. Minion: Service Model and
Conceptual API. IETF Internet Draft, draft-iyengar-minion-concept-02 (2013).
[41] M. Kühlewind, S. Neuner, and B. Trammell. 2013. On the State of ECN and TCP
Options on the Internet. In Passive and Active Measurement Conference (PAM).
(2015). Presentation at IETF92, https:
[42] A. Langley. 2015. QUIC and TLS.
//www.ietf.org/proceedings/92/slides/slides-92-saag-5.pdf.
[43] A. Langley and W. Chang. QUIC Crypto. http://goo.gl/OuVSxa.
[44] R. Lychev, S. Jero, A. Boldyreva, and C. Nita-Rotaru. 2015. How Secure and
Quick is QUIC? Provable Security and Performance Analyses. In IEEE Sympo-
sium on Security and Privacy.
[45] M. Mathis and J. Heffner. 2007. RFC 4821: Packetization layer path MTU
discovery. Internet Engineering Task Force (IETF) (2007).
[46] M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow. 1996. RFC 2018: TCP
Selective Acknowledgment Options. Internet Engineering Task Force (IETF)
(1996).
[47] O. Mehani, R. Holz, S. Ferlin, and R. Boreli. 2015. An early look at multipath
TCP deployment in the wild. In ACM HotPlanet.
[48] M. Nottingham, P. McManus, and J. Reschke. 2016. RFC 7838: HTTP Alternative
Services. Internet Engineering Task Force (IETF) (2016).
[49] M. Nowlan, N. Tiwari, J. Iyengar, S. Amin, and B. Ford. 2012. Fitting Square
Pegs Through Round Pipes: Unordered Delivery Wire-Compatible with TCP and
TLS. In USENIX NSDI.
[50] C. Paasch. 2016. Network Support for TCP Fast Open. (2016). Presentation at
NANOG 67, https://www.nanog.org/sites/default/files/Paasch_Network_Support.
pdf.
[51] W Michael Petullo, Xu Zhang, Jon A Solworth, Daniel J Bernstein, and Tanja
Lange. 2013. MinimaLT: Minimal-Latency Networking Through Better Security.
In ACM CCS.
[52] L. Popa, A. Ghodsi, and I. Stoica. 2010. HTTP as the Narrow Waist of the Future
Internet. In ACM HotNets.
Open. In ACM CoNEXT.
[53] S. Radhakrishnan, Y. Cheng, J. Chu, A. Jain, and B. Raghavan. 2011. TCP Fast
[54] C. Raiciu, C. Paasch, S. Barre, A. Ford, M. Honda, F. Duchene, O. Bonaventure,
and M. Handley. 2012. How Hard Can It Be? Designing and Implementing a
Deployable Multipath TCP. In USENIX NSDI.
[55] E. Rescorla. 2017. The Transport Layer Security (TLS) Protocol Version 1.3.
IETF Internet Draft, draft-ietf-tls-tls13 (2017).
[56] E. Rescorla and N. Modadugu. 2012. RFC 6347: Datagram Transport Layer
Security Version 1.2. Internet Engineering Task Force (IETF) (2012).
[57] L. Rizzo. 2012. Netmap: a novel framework for fast packet I/O. In 21st USENIX
Security Symposium (USENIX Security 12).
[58] J. Rosenberg. 2008. UDP and TCP as the New Waist of the Internet Hourglass.
IETF Internet Draft, draft-rosenberg-internet-waist-hourglass-00 (2008).
[59] J. Roskind. 2012. QUIC: Design Document and Specification Rationale. (2012).
https://goo.gl/eCYF1a.
[60] J. Salowey, H. Zhou, P. Eronen, and H. Tschofenig. 2008. RFC 5077: Transport
Layer Security (TLS) Session Resumption without Server-Side State. Internet
Engineering Task Force (IETF) (2008).
[61] Sandvine. 2016. Global Internet Phenomena Report. (2016).
[62] R. Stewart. 2007. RFC 4960: Stream Control Transmission Protocol (SCTP).
Internet Engineering Task Force (IETF) (2007).
[63] M. Thomson and S. Turner. 2017. Using Transport Layer Security (TLS) to
Secure QUIC. IETF Internet Draft, draft-ietf-quic-tls (2017).
[64] L. Zhang. 1986. Why TCP Timers Don’t Work Well. In ACM SIGCOMM.
196