### 优化后的文本

---

#### Docker Swarm 和 Ansible 自动化部署

这三个命令的输出如下：
- `ps` 命令的输出展示了容器和节点的信息。例如，`books-ms` 容器被部署到了 `swarm-node-2` 上。
  - `"Node": "swarm-node-2"`
  - `"Address": "10.100.192.202"`
  - `"ServiceID": "swarm-node-2:booksms_app-blue_1:8080"`
  - `"ServiceName": "books-ms-blue"`
  - `"ServiceTags": null`
  - `"ServiceAddress": "10.100.192.202"`
  - `"ServicePort": 32768`

使用 `curl` 检查 Consul 中当前正在运行的服务版本信息：
```sh
curl swarm-master:8500/v1/catalog/service/books-ms-green
```
Consul 的响应如下：
- `swarm-node-1/books-ms-db`
- `swarm-node-2/booksms_app-blue_1`

通过 `curl` 请求获取书籍列表：
```sh
curl swarm-master/api/v1/books | jq '.'
```

再次运行 Swarm 部署 Playbook，并检查结果。此时，蓝色版本处于退出状态，绿色版本正在运行。

#### 构建与部署

请打开 swarm 子项目，单击“Build Now”链接以开始构建过程。构建完成后，可以通过控制台屏幕监视其进度。

接下来，我们将部署下一个版本。首先修改 Jenkinsfile 以部署服务的三个实例，然后推送更改。确认所有实例已成功部署到集群中。

为了测试服务，请在浏览器中打开 Consul UI 地址：`http://10.100.192.200:8500/ui` 并检查部署的服务。

#### 清理环境

在继续之前，请销毁现有的虚拟机：
```sh
vagrant destroy -f
exit
```
当需要时，可以重新创建这些虚拟机。

#### 自我修复系统

##### 简介

本章将探讨如何创建能够从故障中恢复的自愈系统。我们借鉴自然界中的自我修复机制，如人体细胞的再生能力，来设计软件和硬件系统。目标是使系统能够在无人干预的情况下发现并修复自身问题，从而保持稳定运行。

##### 自我修复等级和类型

根据监控和操作资源的不同，自我修复系统可以分为以下三个层次：

1. **应用程序级别**：应用程序或服务在内部自我修复的能力。例如，Akka 框架提供了一种监管模式，帮助开发人员构建容错的应用程序。

2. **系统级别**：整个系统层面的自我修复。这通常涉及定期检查各个组件的状态（如通过 TTL 或 Ping），并在发现问题时采取纠正措施。

3. **硬件级别**：虽然无法自动修复硬件故障，但可以通过预防性措施（如冗余硬件）来减少故障的影响。

##### 应用程序级别的自我修复

应用程序级别的自我修复是指服务在内部检测并处理错误的能力。例如，如果数据库连接失败，应用程序可以尝试重新连接而不是立即崩溃。

##### 系统级别的自我修复

系统级别的自我修复包括对系统各部分进行定期健康检查。常见的方法有：

- **TTL (Time-To-Live)**：服务定期向监控系统发送心跳信号。如果信号中断，监控系统会采取行动恢复服务。
- **Ping**：监控系统定期向服务发送请求，检查其是否正常运行。如果服务没有响应，监控系统会启动修复措施。

##### 硬件级别的自我修复

虽然硬件本身无法自我修复，但可以通过预防性措施来提高系统的可靠性。例如，部署冗余硬件或在不同数据中心之间分配负载，以防止单点故障。

##### 预防式与反应式自我修复

- **预防式自我修复**：预测可能的问题并提前采取措施避免。例如，部署多个数据中心以应对潜在的电源故障。
- **反应式自我修复**：在故障发生后采取行动恢复系统。例如，重启失败的服务进程。

通过结合这些方法，我们可以创建一个高度可靠且具有弹性的系统。