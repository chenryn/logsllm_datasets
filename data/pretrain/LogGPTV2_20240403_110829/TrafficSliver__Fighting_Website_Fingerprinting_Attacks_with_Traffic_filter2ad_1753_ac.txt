Based on our empirical analysis (see Appendix A), we adjusted 𝑛
to be uniformly sampled from the interval 𝑛 ∈ [50, 70].
Distribution of Traffic at Application Layer. As introduced in Sec-
tion 5, TrafficSliver-App operates in two modes. For the first mode
of operation where our defense sends full GET requests for distinct
web objects over different entry ORs, we analyze the multi-path
splitting strategy. Here, our proxy randomly selects a circuit for
each request coming from the user’s browser without splitting it
into multiple partial requests. The goal is to explore the extent to
which the level of traffic randomness introduced only by the use of
multiple paths is sufficient to protect against WFP. For the second
mode of operation where TrafficSliver-App requests different frac-
tions of a single web object via different Tor paths, our most basic
splitting scheme is round robin, where we request an equal portion
of a single web object via each Tor circuit. We further consider an
exp weighted random strategy. For each page load, we create a vector
(cid:174)𝑤 of fractions, which, in turn, are computed from the probability
density function of the exponential distribution by using the fol-
lowing formula: 𝑓 (𝑥, 𝜆) = 1 − 𝑒−𝜆𝑥, 𝑥 ≥ 0, or 𝑓 (𝑥, 𝜆) = 0 for 𝑥 < 0.
The exponential distribution generates sets of random numbers
independent from each other over time. The values of 𝜆 are selected
arbitrarily at random every time to ensure the unpredictability of
the created fractions for each page load. The vector (cid:174)𝑤 is then used
to split each resource of a website into several portions. In addition,
we discard generated vectors that contain fractions below a given
threshold. Through experimental analysis, we established 0.001 of
the total size of a web object as a reasonable threshold. Once the
vector (cid:174)𝑤 of fractions is generated, it is applied to split all resources
necessary to load a given page. The vector (cid:174)𝑤 is also used to weight
the selection of an entry OR for each partial request transmitted be-
tween the user and the web server. Finally, to increase the diversity
of the traffic distribution for repeated loads of the same website,
we apply a varying exp weighted random scheme. Contrary to the
previous strategy, here, we randomly select a separate subset 𝑟 of
entry ORs from the interval 𝑟 ∈ [2, 𝑚 − 1] used for the download of
each resource on a website. Based on the chosen number of entry
ORs, we create a separate vector (cid:174)𝑤 of fractions for each resource.
7 EXPERIMENTAL SETUP
To allow for verifiable results, we next present our evaluation setup.
Simulated Dataset. To initially evaluate the efficiency of our
traffic-splitting schemes integrated in TrafficSliver-Net, we devel-
oped a simulator that artificially splits real-world traffic traces based
on the selected scheme. We refer to the order of all cells that are
assigned to the same sub-circuit after splitting as a subtrace. In
total, our simulator creates 𝑚 subtraces for a single page load. It
also takes the latency of the different circuits between the user
and the middle OR into account when employing our multipath
transmission scheme. To this end, we measured the round-trip time
(RTT) of several circuits consisting of the same middle and exit
ORs but different entry ORs in the real Tor network. As in previous
work [36], we measured the RTTs by sending a relay connect cell to
localhost and triggering the reply time. We gathered RTTs for 4,073
successfully built circuits, which we integrated into our simulator.
Real-World Datasets. For the closed-world analysis of our Traf-
ficSliver defenses, we rely on a dataset consisting of the 100 most
popular sites [3]. First, we collected 100 traces for each website with-
out applying our defenses and refer to this non-defended dataset as
ALEXA-NODEF. Next, we collected traces protected by each defense.
For TrafficSliver-Net, we selected our best traffic-splitting strategy
(based on evaluation results obtained from the simulation of multi-
pathing) to collect 100 traces for each website. We call this dataset
ALEXA-NET-DEF. For each splitting scheme in TrafficSliver-App, we
gathered 100 traces for each website in the real Tor network. Finally,
we visited once each of the 11,307 Alexa most popular websites,
excluding the first 100 sites used to build our closed-world dataset,
ALEXA-NODEF-BG, without applying our defenses and used them as
background for our open-world evaluation.
During crawling of our datasets, as in related work [34, 43, 44],
we excluded websites that deny user traffic coming from Tor, show
a CAPTCHA, have no content, or redirect to other sites that are
already present in our dataset. We also removed page loads indi-
cating a client or server error as the attacker is not interested in
fingerprinting broken page loads. We applied the automated ap-
proach presented in [34] to collect all traces. For each page load, we
recorded meta-data such as the size and direction of the transmitted
TCP packets by using a toolbox containing the Tor Browser 9.0.1
and tcpdump and then reconstructed the Tor cells by applying a
previously-used data extraction method [34]. For our evaluation,
we focus only on Tor cells, as the different layers for data extrac-
tion (e.g., TCP packets, TLS records, or cells) only have a marginal
influence on the classification results [34]. Hence, our results are
comparable for other extraction formats. Moreover, we launched
several middle ORs in the real Tor network that were used by our
deployed Tor clients to perform traffic splitting and merging, as
required by TrafficSliver-Net. Our middle ORs supported multipath
user connections and regular one-path circuits, simultaneously.
Classifiers and Evaluation Setup. For our evaluation, we con-
sidered four state-of-the-art WFP attacks: k-NN [47], CUMUL [34],
k-FP [19], and DF [44]. For details about these WFP classifiers, we
refer the reader to the original papers. For all following experi-
ments in this paper where we do not explicitly mention a different
methodology, we apply 10-fold cross-validation with respect to the
total number of collected page loads, i.e., the data is split into 10
evenly large parts, i.e., folds. Then, the entire process of training
and testing is repeated 10 times, using one of the 10 folds as test
data and the remaining nine folds as training data in turn.
8 EVALUATION AND DISCUSSION
In this section, we evaluate our novel defenses against state-of-
the-art WFP attacks. We assume that the attacker controls one or
several malicious entry ORs in victim’s multipath connections. For
all experiments, the adversary is aware of the applied defense and
its splitting scheme. We further assume that the attacker has enough
resources to collect a representative training dataset. Although we
executed experiments where the attacker trains the WFP classifiers
with non-defended traces, we achieved very poor classification
accuracy for all WFP attacks and omitted this evaluation as we pro-
pose better training strategies for the adversary. In particular, the
best strategy for the attacker is to use all collected subtraces of each
page load. The adversary represents these subtraces as separate
input vectors belonging to the same class and generates features
for these vectors to train the WFP classifiers. We also ensure that
all subtraces of the same page load are used either for testing or
for training only. Using only single, randomly-chosen subtraces
from each page load leads to lower accuracy and will not be the
dominant strategy of the adversary. We believe to have addressed
the logical advancements for the attacker in the learning phase and
deem it unlikely that further improvements can be made without
extensive efforts (which would also require enhancements to to-
day’s WFP classifiers). For our closed-world analysis, we computed
the accuracy, i.e., the probability of a correct prediction (either true
positive or true negative). Similarly to related work [19, 47], we
calculated the TPR, i.e., the fraction of accesses to foreground pages
that were detected, and the FPR, i.e., the probability of false alarms,
for our open-world experiments.
In Section 8.1, we focus on our network-layer defense. We first
identify the proper number of used entry ORs and the optimal
traffic splitting scheme through simulations and, then, confirm
the efficiency of our defense in real-world settings. We show that
TrafficSliver-Net can reduce the accuracy from more than 98% to
less than 16% for all state-of-the-art WFP attacks without adding any
artificial delays or dummy traffic. In Section 8.2, we provide insights
into the effectiveness of our application-layer defense. We show
that by sending single full HTTP requests for different web objects
over distinct entry ORs, TrafficSliver-App reduces the detection
rate of WFP attacks by almost 50 percent points. Although it offers
lower protection than TrafficSliver-Net, it provides a security boost
at the cost of a very low implementation overhead and does not
require any changes in the underlying anonymization network.
8.1 Analysis of Our Network-layer Defense
8.1.1 Determination of Optimal Splitting Scheme. To identify a
good traffic splitting scheme for TrafficSliver-Net, we use the simu-
lator presented in Section 7 to artificially split the non-defended
traffic traces in ALEXA-NODEF. For each traffic splitting scheme (see
Section 6), we generated a separate dataset containing artificially
created defended traces. Table 1 details the accuracy of each WFP
classifier in a closed-world scenario without defense (column “Un-
defended”) and against our evaluated splitting strategies for varying
numbers 𝑚 of entry ORs, where the attacker controls one of them.
Number of Entry ORs Used. First, we analyze how the num-
ber of entry ORs used influences the accuracy of WFP attacks, as
summarized in Table 1. Independent of the chosen strategy, we
observe that all WFP attacks become less effective when the user
utilizes a larger constant number of entry ORs to fetch a website.
We further notice a slight decrease of the classification accuracy for
𝑚 ≥ 4 regardless of the splitting strategy. In case of a variable num-
ber of entry ORs, the adversary is challenged by the uncertainty
of the applied splitting strategy as website-specific patterns are
less deterministic. Additionally, our most effective scheme, BWR,
drops the accuracy of all classifiers to less than 14% when a con-
stant number of five entry ORs is utilized. Therefore, we consider
𝑚 = 5 as a good choice and argue that this choice neither signif-
icantly increases circuit establishment times (current versions of
a variable number of entry ORs (columns “(cid:74) 2,5(cid:75)”) and a constant
Table 1: Accuracy (in %) of state-of-the-art WFP attacks in scenarios without defense and against our splitting strategies, where
𝑚 indicates the number of entry ORs used in user connections.
Our Splitting Strategies
Undefended
m
𝑘-NN
CUMUL
k-FP
DF
1
98.20
98.50
98.40
98.75
Round Robin
5
4
3
2
91.29 89.52 87.25 86.59
96.30 86.88 85.04 82.21
96.73 94.83 93.21 92.22
97.56 95.91 94.64 93.01
(cid:74) 2,5(cid:75)
75.54
80.07
83.66
90.25
Random
2
3
4
5
87.74 82.51 78.09 72.09
95.51 92.64 89.71 87.02
94.48 91.51 89.13 86.41
96.01 94.77 93.43 90.31
(cid:74) 2,5(cid:75)
62.28
79.34
76.59
84.05
By Direction
Out
In
32.45
37.05
26.71
37.43
56.17
59.07
29.99
26.15
2
4
4.32
Weighted Random
3
9.66
5
16.14
4.38
63.05 53.16 47.90 41.62
55.01 45.76 42.74 40.55
65.94 54.21 47.77 42.33
(cid:74) 2,5(cid:75)
4.57
47.92
41.31
47.79
Batched Weighted Random
(cid:74) 2,5(cid:75)
5
3
4.49
9.11
4
3.62
4.76
2
3.22
6.89
21.22
8.60
33.37 21.33 16.48 13.46 18.24
31.82 14.74
11.44
3.15
4.63
6.91
6.58
e
t
a
r
e
v
i
t
i
s
o
p
e
u
r
T
1
0.8
0.6
0.4
0.2
0
k-FP
𝑘-NN
CUMUL
DF
Random guess
Without defense
With defense
0
0.2
0.4
0.6
0.8
1
False positive rate
Figure 3: ROC curves for today’s WFP attacks in open world.
Tor already build three circuits preemptively [11]) nor dramatically
increases the probability of selecting a malicious entry OR [10] (see
Section 8.5). Our experiments confirm our initial intuition that the
data observed on a single client-to-entry sub-circuit by a malicious
entry OR is not sufficient to perform WFP attacks.
Efficiency of Different Splitting Schemes. To find the most
suitable splitting method, we explore the efficiency of each strategy,
as summarized in Table 1.
Round Robin & Random. Overall, we notice a slow decrease in
accuracy with the round robin strategy as the number of entry ORs