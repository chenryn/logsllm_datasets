件，而且遍历了多层路径，还指明了具体的文件和路径。所以加人PHP 的Opcode缓存，减
strace 的输出可以粗略看出是读取的 PHP文件太多，应该能分析到是每次都读取了 PHP文
决，如果上面读取文件太多，那么从上面
多的代码部分，通过优化PHP代码进行解
解决办法就是和研发一起找到读取文件最
还是在查找文件和网络连接处理这两方面。
接队列的事件）占了27%。说明主要负载
状态）占了 27%的时间，poll（监测网络连
图7-28所示：
比较短的（0.000015s），如果这里出现较长时间，很可能就是瓶颈所在。
174
 strace还能统计一段时间内各个系统调用的执行次数和消耗时间，命令如下，结果如
从图7-29可知所有请求都是成功状态200，大部分请求耗时都在20ms左右（注意，
如图7-29所示，access log 可以查看每次 PHP的访问日志，包含了请求方法，请求的
1）访问日志分析每个请求的耗时
PHP充分考虑了运维的友好性，可以把运行过程的内部状态通过日志和接口反馈出来，
2.PHP运行状态
从图7-28可以看出stat（获得文件的
$strace-p
运维前线：一线运维专家的运维方法、技巧与实践
图7-29PHP access log性能分析
22.96%
27.63
888
3
图7-28strace 统计系统调用的分布情况
0.000121
secondsusecs/call
00
2002161.
2.79%
，这
---
## Page 191
s%f %{seconds}ds %{megabytes}M %{user}C%% %{system}c% %{total}c%%"
请求时间、请求方法、请求URI、返回状态码，不带性能数据。
的信息，具体如下。
7-30所示：
或一段时间内的一个平均值，可以得知每分钟的请求次数（Request Per Minute，RPM），如图
PHP访问日志非常有用，经常查看有利于持续发现某些性能比较差的服务和请求。
aCcess.format="%R- %u [%{%Y-%m-%d:%H:%M:%S}t] %{REMOTE_ADDR}e \"%m %r%Q%g\"
图7-29中日志格式的配置如下：
~“% % % % % -%=*ss 
口%u：remote user，远程用户。
口%t：收到请求的服务器时间。
口%s：返回状态码。
口%R：客户端的IP，
口%e：
口%d：请求消耗的时间。
%C：请求消耗的CPU百分比。
口%%：表示百分号（%)。
可以在 php-fpm.conf文件中配置访问日志的格式，PHP 提供了丰富的选项来获得所需要
口
从图7-30可以看出一分钟处理了49012个请求，也就是每秒800次左右。
%T：写日志的时间，可以理解为请求完成的时间。
口
%r：请求的 URI信息。
口
L
口
L
口
口
%M：这个PHP工作进程分配的内存的峰值。
口
%m：请求的方法GET/POST。
口
%l：POST请求的内容长度。
1%Q：问号。
1%q：查询字符串。
%f：脚本文件名。
%P：PHP-FPM管理进程PID。
%op:
%0:
：工作进程池名称，以区别多个进程池的日志。
工作进程的PID。
输出HTTPHEADER信息。
环境变量或服务器变量，
Otubuntu: # grep " 26/Sep/2015:22:17" /data/weblog/phbp/web2. access. 1og lwc -]
图7-30PHP access log性能分析，计算RPM
一般会显示为 Nginx的 IP。
与S_ENV、S_SERVER 的效果一样。
第7章PHP运维实践175
---
## Page 192
工具，php status 能较好地显示工作进程的信息，查看PHP 内部运行过程中的状态。
务有问题。
function_core.php 文件的第3524行，分析curl_exec 请求了哪个URL 即可知道是哪个外部服
e_video_url→getContent→ curl_exec，发现PHP执行慢的根本原因是curl_exec 函数，找到
数调用栈是viewthread_procpost→discuzcode→preg_replace→parsemedia→parseflv→pars
求的内部调用栈，函数从下往上顺序调用。可以看到人口函数是viewthread_procpost，此函
（3s）即认为是慢请求。慢日志的超时时间可根据日常情况来定，一般2～3s即可。
的调用栈，可以在php-fpm.conf中进行配置：
176
3）PHP-FPM status 分析性能
slowlog信息展示如图7-31所示：
Nginx 收到/php_status请求，转给 PHP-FPM的服务，PHP 内部若发现匹配到配置项
在Nginx中配置location：
PHP-FPM比之前的FastCGI管理工具强大的地方也是因为它自带了一些内部的信息的
图 7-31中慢日志显示了时间、进程池、工作进程 pid、PHP 文件名。接下来是PHP请
指定慢日志的文件路径和请求出现在慢日志中的临界值，若一个请求超过了这个时间
slowlog = /data/weblog/php/$pool.slow.1og
通过慢日志（slowlog）可以看到那些超过规定时间的请求，包括慢的代码文件及函数级
在 php-fpm.conf中配置：
2）慢日志分析性能
pm.status_path=/php_status
fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
fastcgi_pass 127.0.0.1:9000;
request_slowlog_timeout =3
运维前线：一线运维专家的运维方法、技巧与实践
include fastcgi_params;
location~~/php_statuss
图7-31 PHP-FPM slow log
352
---
## Page 193
(json/html/xml)，默认是普通文本格式：
信息。在URI中加上?full参数（http://www.fo.com/php_status?full），可以指定返回的格式
性能问题较严重。最大等待队列达到129个，说明有些用户访问起来有点慢了。
进程数达到128，这个服务器的负载较高。PHP进程启动有一个月了，慢日志有71656条
如图7-32所示的信息：
path）时，例如在浏览器中打开http://www.foo.com/php_
pm.status_path，即返回状态信息。通过浏览器访问 Web 页面或通过curl 访问状态路径（status
status获取到的是PHP进程的总体信息，PHP-FPM同时还提供了每个工作进程的详细
start since:
start time:
state:
pid:
可以看到类似如下结果：
http://www.foo.com/php_status?full
从图7-32中可以看出一些信息：一共有105个进程，93个处于活跃状态，最大的活跃
口 slowrequests：慢请求的数量，如果这个数字较大，则有必须去分析性能问题了。
口maxchildren reached：工作进程数量达到的最大数量，如果这个数量不为O，那就说
max active processes：最大的活跃进程数量（从启动 PHP 开始计算）。
total processes：总进程数量。
active processes：活跃进程数量，
口idle processes：空闲进程数量。
listen queue len：socket 等待队列的长度。
max listen queue：请求等待队列最高的数量，曾经达到的最大的请求等待队列的长度。
listen queue：请求等待队列，如果这个值不为0，那么要增加 FPM的进程数量。
accepted conn：当前进程池接受的请求数。
 start since：PHP-FPM 运行时长，从启动到当前的时长。
start time：启动日期，如果重载了PHP-FPM,
口process manager：进程管理方式，可取值为
口pool：PHP-FPM工作进程池的名称，默认为www。
下面来解释一下各个字段的意思。
明你的最大进程数量太小了，需要调大一点。
则时间会更新。
static.dynamic 或 ondemand。
查网
21/0ct/2015:22:20:53 +0800
Running
15342
148
表示有多少工作进程在处理请求。
第7章PHP运维实践177
图 7-32 PHP-FPM status
2016:03:13:120800
---
## Page 194
况。关于具体的安装和配置过程这里不做解释，有兴趣的读者可以上网查找资料。效果图如
是讲解如何分析和发现PHP代码的性能问题。
发，哪里存在性能问题，可能是什么原因引起的。所以这里不会具体讲代码的优化方法，而
生产环境，更有可能比研发先发现隐性问题。运维不会亲自修改代码，不过运维可以告诉研
求可能很多，或者很慢。
的请求，则表示可能存在问题；如果看到多个进程都在处理同一个URI，则表示这个URI的请
秒)。如果看到所有的进程都处于running 状态，则表示很繁忙。如果经常看到有请求时长比较大
178运维前线：一线运维专家的运维方法、技巧与实践
xhprof 是Facebook 推出的PHP 扩展，能够快速发现PHP 执行的内部执行和资源消耗情
1）通过xhprof分析 PHP代码级性能
PHP代码性能是属于研发侧的工作，不是光靠运维就可以解决的，不过运维面对的是
3.内部运行状态分析，代码级性能
从结果中可以看出正在处理forum.php这个脚本，URI是/forum.php?mod-viewthread&tid=455，
口lastrequest memory：上一个请求使用的内存。
口last request cpu：上一个请求的 CPU 使用率。
 script：PHP 脚本（如果没有设置；则为‘-'）。
user：用户（PHP_AUTH_USER）（如果没有设置；则为‘-’）。
content length：请求内容的长度（仅用于POST）。
request URI:请求 URI。
request method：请求方法（GET、POST等)。
request duration：请求时长（单位为微秒）。
口 start since：当前进程已经运行的时长。
starttime：进程启动的时间。
口 pid：工作进程 PID，可以单独 kill 这个进程。
各字段的意义具体如下。
Or
last request memory:
ceguest
request method:
request duration:
ast request
requests ：当前工作进程处理了多少个请求，达到 max _request值后会自动被 kill 掉,
cript:
ser:
防止内存泄漏的长期影响。
length
URI:
cpu:
D
0.00
/forum.php?mod=viewthread&tid=455
GET
28431
238
/data/www.foo.com/forum.php.l
---
## Page 195
情况。
该函数占了本调用链45.9%的时间。
从图7-33中可以看出最耗时的是最粗的箭头，往下看最终是调用了memcached:get 函数，
例是多少。一个函数在调用链上可能被调用多次，箭头线上的“call”表示调用了多少次。
最耗时的调用链，深色背景的是最耗时的函数。百分号表示本函数占了本次调用链的耗时比
图7-33所示：
图7-34以表格形式展示了另外一种视图，包括调用次数、比例、耗时情况、消耗内存
从图7-33中可以看出PHP代码函数之间的调用关系，箭头表示调用关系。粗箭头表示
Excl:200.287ms（45.9%)
Inc:200.287 ms(45.9%)
Memcached:get
2 total calls
leexlst
100.0%
图7-33xhprof查看PHP性能，显示函数调用链
100.0%
100.0%
call
calls
00.0%
93.5%
220.934
Excl:3.161 ms(0.7%)
1.0%97.0%
Total:436.177ms
569ms(1.5%
1totalcalls
calls
call
100%
2calls
.7%
ms(0.3%
Excl:197.436ms(45.3%)
Inc:197.436 ms(45.3%)
PDoStatement:execute
100.0%
第7章PHP运维实践179
42 total calls
Excl:0.486
100.0%
99.5%
99.9%
100.0%
40 total calls
40calls
92.4%
Model::find
40calls
40 calls
42calls
---
## Page 196
析MySQL的慢查询日志。
们可以通过如下几个方法来分析性能问题。
的结果也可以帮助我们离线分析 PHP 的性能。配置方式也与 xhprof类似。
分析PHP程序的运行状况，性能数据可以通过WinCacheGrind/WebGrind 进行输出，其输出
load:framework/Model.php
load:framework/Controller.php
file_exists
load:controllers/BaseController.php
obj
mainO
180
（2）慢日志（slow log）：如果是经常性的慢，则可以执行 mysqldumpslow slowlog 文件分
口 show varaibles：可以查看当前生效的变量值，结合 show status 可以查看配置是否合
口 show status/show global status：可以查看MySQL 内部的各种状态，包括连接、线程、
 show profile：通过 show profile 命令，可以分析出 SQL的详细执行情况。
explain：取出可疑 SQL执行explain SQL语句，可以分析 SQL的执行计划、索引是