# Offensive Windows IPC Internals 3: ALPC

**Published on May 24, 2022 (Last Updated: May 29, 2022)**

## Table of Contents
- [Introduction](#introduction)
- [ALPC Internals](#alpc-internals)
  - [The Basics](#the-basics)
  - [ALPC Message Flow](#alpc-message-flow)
  - [ALPC Messaging Details](#alpc-messaging-details)
  - [ALPC Message Attributes](#alpc-message-attributes)
- [Putting the Pieces Together: A Sample Application](#putting-the-pieces-together-a-sample-application)
- [Attack Surface](#attack-surface)
- [Identify Targets](#identify-targets)
- [Impersonation and Non-Impersonation](#impersonation-and-non-impersonation)
- [Unfreed Message Objects](#unfreed-message-objects)
- [Conclusion](#conclusion)
- [Appendix A: The Use of Connection and Communication Ports](#appendix-a-the-use-of-connection-and-communication-ports)
- [References](#references)

---

## Introduction

In previous discussions, we covered two inter-process communication (IPC) protocols, Named Pipes and RPC, which can be used both locally and remotely. In this article, we focus on Advanced Local Procedure Call (ALPC), a technology that is designed for local use only. While RPC stands for Remote Procedure Call, ALPC is sometimes referred to as Asynchronous Local Procedure Call, a name that reflects its asynchronous nature compared to its predecessor, Local Procedure Call (LPC).

### A Quick Word on LPC

LPC was introduced with the original Windows NT kernel in 1993-94 as a synchronous inter-process communication facility. Its synchronous nature meant that clients and servers had to wait for a message to be dispatched and acted upon before continuing execution. This was one of the main flaws that ALPC was designed to address. ALPC was introduced with Windows Vista and, from Windows 7 onward, LPC was completely removed from the NT kernel. To maintain backward compatibility, the function used to create an LPC port was retained but redirected to create an ALPC port instead.

### Back to ALPC

ALPC is a fast, powerful, and extensively used inter-process communication facility within the Windows OS. However, it is not intended for developer use, as Microsoft considers it an internal IPC mechanism. This means that ALPC is undocumented and primarily serves as the underlying transportation technology for other, documented IPC protocols like RPC.

While ALPC is undocumented, it has been reverse-engineered by experts such as Alex Ionescu, providing some insight into its workings. However, using ALPC directly in production software is not recommended due to potential security and stability issues. For a deeper understanding, I recommend listening to Alex’s talk from SyScan’14, particularly the section on releasing mapped views from an ALPC server.

## ALPC Internals

### The Basics

The primary components of ALPC communications are ALPC port objects, which are kernel objects similar to network sockets. A server opens an ALPC port that clients can connect to, known as the ALPC Connection Port. There are typically three ALPC ports involved in an ALPC communication: two on the server side and one on the client side.

- **ALPC Ports under root path**: Many ALPC ports run on every Windows OS, and some can be found under the root path.
- **ALPC under \\RPC Control**: The majority of ALPC ports are located under the 'RPC Control' path, as RPC uses ALPC under the hood.

### ALPC Message Flow

To understand how messages are sent and received in ALPC, let's break down the process:

1. **Server Process**:
   - The server calls `NtAlpcCreatePort` with a chosen ALPC port name and an optional SecurityDescriptor.
   - The kernel creates an ALPC port object and returns a handle to the server, known as the ALPC Connection Port.
   - The server then calls `NtAlpcSendWaitReceivePort` to wait for client connections.

2. **Client Process**:
   - The client calls `NtAlpcConnectPort` with the name of the server’s ALPC port, an optional message, and optional message attributes.
   - The connection request is passed to the server, which calls `NtAlpcAcceptConnectPort` to accept or reject the connection.
   - If accepted, both the server and the client receive handles to their respective communication ports.

3. **Message Exchange**:
   - Both the client and the server use `NtAlpcSendWaitReceivePort` to send and receive messages.
   - The client listens for and sends new messages to its communication port.
   - The server listens for and sends new messages to its connection port.

### ALPC Messaging Details

An ALPC message consists of a PORT_HEADER or PORT_MESSAGE, followed by the actual message content. Here is a C++ definition of an ALPC message:

```cpp
typedef struct _PORT_MESSAGE {
    union {
        struct {
            USHORT DataLength;
            USHORT TotalLength;
        };
    };
} PORT_MESSAGE, *PPORT_MESSAGE;

typedef struct _ALPC_MESSAGE {
    PORT_MESSAGE PortHeader;
    BYTE PortMessage[100]; // Using a byte array of size 100 to store the actual message
} ALPC_MESSAGE, *PALPC_MESSAGE;
```

To send a message, you would use the following code:

```cpp
ALPC_MESSAGE alpcMsg;
// Initialize alpcMsg.PortHeader and alpcMsg.PortMessage
// Call NtAlpcSendWaitReceivePort with the appropriate parameters
```

### ALPC Message Attributes

ALPC messages can include various attributes, which will be detailed in a later section.

## Putting the Pieces Together: A Sample Application

This section will provide a sample application to demonstrate the use of ALPC in practice.

## Attack Surface

### Identify Targets

### Impersonation and Non-Impersonation

### Unfreed Message Objects

## Conclusion

ALPC is a powerful and interesting target for research, but it is not intended for non-Microsoft usage in production development. The information provided here may not be 100% accurate, as ALPC is undocumented.

## Appendix A: The Use of Connection and Communication Ports

## References

For more details on LPC, refer to the following archived documentation:
- [LPC in Windows NT 3.5](http://web.archive.org/web/20090220111555/http://www.windowsitlibrary.com/Content/356/08/1.html)

---