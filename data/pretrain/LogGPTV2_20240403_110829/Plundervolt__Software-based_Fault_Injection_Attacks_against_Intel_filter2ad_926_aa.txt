title:Plundervolt: Software-based Fault Injection Attacks against Intel
SGX
author:Kit Murdock and
David F. Oswald and
Flavio D. Garcia and
Jo Van Bulck and
Daniel Gruss and
Frank Piessens
2020 IEEE Symposium on Security and Privacy
Plundervolt: Software-based Fault Injection Attacks
against Intel SGX
Kit Murdock∗, David Oswald∗, Flavio D. Garcia∗, Jo Van Bulck‡, Daniel Gruss†, and Frank Piessens‡
∗University of Birmingham, UK
PI:EMAIL, PI:EMAIL, PI:EMAIL
†Graz University of Technology, Austria
‡imec-DistriNet, KU Leuven, Belgium
PI:EMAIL
PI:EMAIL, PI:EMAIL
Abstract—Dynamic frequency and voltage scaling features
have been introduced to manage ever-growing heat and power
consumption in modern processors. Design restrictions ensure
frequency and voltage are adjusted as a pair, based on the
current load, because for each frequency there is only a certain
voltage range where the processor can operate correctly. For
this purpose, many processors (including the widespread Intel
Core series) expose privileged software interfaces to dynamically
regulate processor frequency and operating voltage.
In this paper, we demonstrate that these privileged interfaces
can be reliably exploited to undermine the system’s security. We
present the Plundervolt attack, in which a privileged software
adversary abuses an undocumented Intel Core voltage scaling in-
terface to corrupt the integrity of Intel SGX enclave computations.
Plundervolt carefully controls the processor’s supply voltage
during an enclave computation, inducing predictable faults within
the processor package. Consequently, even Intel SGX’s mem-
ory encryption/authentication technology cannot protect against
Plundervolt. In multiple case studies, we show how the induced
faults in enclave computations can be leveraged in real-world
attacks to recover keys from cryptographic algorithms (including
the AES-NI instruction set extension) or to induce memory safety
vulnerabilities into bug-free enclave code. We ﬁnally discuss why
mitigating Plundervolt is not trivial, requiring trusted computing
base recovery through microcode updates or hardware changes.
I. INTRODUCTION
The security of modern systems builds on abstractions of
the underlying hardware. However, hardware is subject to
physical effects and is increasingly optimized to meet the ever-
growing need for performance and efﬁciency. Modern CPUs
are highly optimized such that performance and efﬁciency
are maximized while maintaining functional correctness under
speciﬁed working conditions.
In fact, many modern processors cannot permanently run at
their maximum clock frequencies because it would consume
signiﬁcant power that, in turn, produces too much heat (e.g.,
in a data center). Additionally, in mobile devices, high power
consumption drains the battery quickly.
This voltage and frequency dependency of the (dynamic)
power consumption Pdyn of a CMOS circuit is expressed as:
Pdyn ∝ f · V 2, i.e., the dynamic power consumption is
proportional to the clock frequency f and to the square of the
supply voltage V
Because of this relationship (and other factors), modern
processors keep the clock frequency and supply voltage as
low as possible—only dynamically scaling up when necessary.
Higher frequencies require higher voltages for the proces-
sor to function correctly, so they should not be changed
independently. Additionally, there are other types of power
consumption that inﬂuence the best choice of a frequency/
voltage pair for speciﬁc situations.
Lowering the supply voltage was also important
in the
development of the last generations of DRAM. The sup-
ply voltage has been gradually reduced, resulting in smaller
charges in the actual capacitors storing the single bits—this
led to the well-known Rowhammer [41] effect. Exploiting
this, a long line of research has mounted practical attacks,
e.g., for privilege escalation [60, 22, 77, 74], injecting faults
into cryptographic primitives [55, 6], or reading otherwise
inaccessible memory locations [44]. While fault attacks have
been extensively studied for adversaries with physical access
to embedded devices [7, 62, 2, 26], Rowhammer remains, to
date, the only known purely software-based fault attack on
x86-based systems. Hence, both the scientiﬁc community and
industry have put signiﬁcant effort in developing Rowhammer
mitigations [41, 37, 27, 3, 23, 53, 12, 79, 13, 74, 22, 10].
This has reached a point where Intel ultimately considers main
memory as an untrusted storage facility and fully encrypts
and authenticates all memory within the Intel SGX enclave
security architecture [24]. But is authentication and encryption
of memory enough to safeguard the integrity of general-
purpose computations?
To answer this question, we investigate interfaces for supply
voltage optimizations on x86 Intel Core CPUs. With shrink-
ing process technology, the processor supply voltages have
gradually been reduced to make systems more efﬁcient. At
the same time, voltage margins (the stable voltage ranges
for each frequency) have shrunk. The actual voltage margin
is strongly inﬂuenced by imperfections in the manufacturing
process and also the speciﬁc system setup,
including the
voltage regulator on the main board. Since these dynamic
voltage and frequency scaling features are undocumented and
only exposed to privileged system software, they have been
scarcely studied from a security perspective. However, this is
© 2020, Kit Murdock. Under license to IEEE.
DOI 10.1109/SP40000.2020.00057
1466
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
very relevant in the context of SGX. Intel SGX enclaves are
currently considered immune to fault attacks. In particular,
Rowhammer, the only software-based fault attack known to
work on x86 processors, simply causes the integrity check of
the Memory Encryption Engine (MEE) to fail [21, 38], halting
the entire system.
A. Related Work on Software-based Fault Attacks
A fault attack manipulates the computations of a device
with the purpose of bypassing its security mechanisms or
leaking its secrets. With this aim, the attacker manipulates
the environment to inﬂuence the target device’s computations.
Typically such fault-inducing environments are at the border
of (or beyond) the speciﬁed operational range of the target
device. Different environment manipulations have been inves-
tigated [26], such as: exposure to voltage and clock glitch-
ing [2, 62], extreme temperatures [29] or laser/UV light [63].
Software-based fault attacks shift the threat model from a
local attacker (with physical access to the target device) to a
potentially remote attacker with only local code execution.
Initially, these attacks were interesting in scenarios where
the attacker is unprivileged or even sandboxed. However,
with secure execution technologies, such as: Intel SGX, ARM
TrustZone and AMD SEV, privileged attackers must also be
considered as they are part of the corresponding threat models.
In 2017, Tang et al. [65] discovered a software-based fault
attack, dubbed CLKscrew. They discovered that ARM pro-
cessors allow conﬁguration of the dynamic frequency scaling
feature, i.e., overclocking, by system software. Tang et al.
show that overclocking features may be abused to jeopardize
the integrity of computations for privileged adversaries in a
Trusted Execution Environment (TEE). Based on this obser-
vation, they were able to attack cryptographic code running in
TrustZone. They used their attack to extract cryptographic keys
from a custom AES software implementation and to overcome
RSA signature checks and subsequently execute their own
program in the TrustZone of the System-on-Chip (SoC) on
a Nexus 6 device.
However, their attack is speciﬁc to TrustZone on a certain
ARM SoC and not directly applicable to SGX on Intel proces-
sors. In fact, it is unclear whether similar effects exist on x86-
based computers, whether they are exploitable, and whether
the processor package or SGX has protections against this
type of attack, e.g., machine-check errors on the system level,
or data integrity validation in SGX enclaves. Furthermore,
CLKscrew is based on changing the frequency, while in this
paper we focus on voltage manipulations. Finally, the question
arises whether faults are limited to software implementations
of cryptographic algorithms (as in CLKscrew), or can also be
used to exploit hardware implementations (like AES-NI) or
generic (non-crypto) code.
B. Our Contribution
In this paper, we present Plundervolt, a novel attack against
Intel SGX to reliably corrupt enclave computations by abusing
privileged dynamic voltage scaling interfaces. Our work builds
on reverse engineering efforts that revealed which Model-
Speciﬁc Registers (MSRs) are used to control the dynamic
voltage scaling from software [64, 57, 49]. The respective
MSRs exist on all Intel Core processors. Using this interface
to very brieﬂy decrease the CPU voltage during a computation
in a victim SGX enclave, we show that a privileged adversary
is able to inject faults into protected enclave computations.
Crucially, since the faults happen within the processor pack-
age, i.e., before the results are committed to memory, Intel
SGX’s memory integrity protection fails to defend against our
attacks. To the best of our knowledge, we are the ﬁrst to
practically showcase an attack that directly breaches SGX’s
integrity guarantees.
In summary, our main contributions are:
1) We present Plundervolt, a novel software-based fault
attack on Intel Core x86 processors. For the ﬁrst time,
we bypass Intel SGX’s integrity guarantees by directly
injecting faults within the processor package.
2) We demonstrate the effectiveness of our attacks by inject-
ing faults into Intel’s RSA-CRT and AES-NI implementa-
tions running in an SGX enclave, and we reconstruct full
cryptographic keys with negligible computational efforts.
3) We explore the use of Plundervolt to induce memory
safety errors into bug-free enclave code. Through various
case studies, we show how in-enclave pointers can be
redirected into untrusted memory and how Plundervolt
may cause heap overﬂows in widespread SGX runtimes.
4) Finally, we discuss countermeasures and why fully miti-
gating Plundervolt may be challenging in practice.
C. Responsible Disclosure
We have responsibly disclosed our ﬁndings to Intel on June
7, 2019. Intel has reproduced and conﬁrmed the vulnerabili-
ties which they are tracking under CVE-2019-11157. Intel’s
mitigation is provided in Section VII-C.
Our current results indicate that
the Plundervolt attack
affects all SGX-enabled Intel Core processors from Skylake
onward. We have also experimentally conﬁrmed the existence
of the undervolting interface on pre-SGX Intel Core proces-
sors. However, for such non-SGX processors, Plundervolt does
not currently represent a security threat in our assessment,
because the interface is exclusively available to privileged
users. Furthermore, in virtualized environments, hypervisors
should never allow untrusted guest VMs to read from or write
to undocumented MSRs.
We have made our PoC attack code available at: https://
github.com/KitMurdock/plundervolt.
D. Structure of the Paper
Section II presents the attacker model, our experimental
setup and the tested CPUs. In Section III, we present the basic
working principle of the Plundervolt attack when targeting
multiplications, with a detailed analysis of the fault character-
istics in Section III-A. Section IV shows how Plundervolt can
be used to recover cryptographic keys from RSA and AES-NI
implementations running inside an SGX enclave. In Section V,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1467
63
1
40
42
plane idx
36
1
31
32
r/w
offset
21
0
0 = CPU core
1 = GPU
2 = cache (core)
3 = uncore
4 = analog I/O
write-enable
11-bit signed voltage offset
(in units of 1/1024 V)
Fig. 1. Layout of the undocumented undervolting MSR with address 0x150.
we discuss how Plundervolt can be used to induce memory
safety vulnerabilities into bug-free code. In Section VI, we
discuss the Plundervolt attack w.r.t. related work, while Sec-
tion VII considers different mitigation strategies. Section VIII
concludes this paper.
II. EXPERIMENTAL SETUP
A. Attacker Model
We assume the standard Intel SGX adversary model where
the attacker has full control over all software running outside
the enclave (including privileged system software such as op-
erating system and BIOS). Crucial for our attacks is the ability
for a root adversary to read/write MSRs, e.g., through a mali-
cious ring 0 kernel module or an attack framework like SGX-
Step [71]. Since we only exploit software-accessible interfaces,
our attacks can be mounted by remote adversaries who gained
arbitrary kernel code execution, but without physical access to
the target machine. At the hardware level, we assume a recent
Intel Core processor with (i) Intel SGX enclave technology,
and (ii) dynamic voltage scaling technology. In practice, we
found these requirements to be fulﬁlled by all Intel Core
processors we tested from Skylake onward (cf. Table I).
B. Voltage Scaling on Intel Core Processors
We build on the reverse engineering efforts of [64, 49, 57]
that revealed the existence of an undocumented MSR to adjust
operating voltage on Intel Core CPUs. To ensure reproducibil-
ity of our ﬁndings, we document this concealed interface in
detail. All results were experimentally conﬁrmed on our test
platforms (cf. Table I).
Figure 1 shows how the 64-bit value in MSR 0x150 can be
decomposed into a plane index and a voltage offset. Firstly, by
specifying a valid plane index, system software can select to
which CPU components the under- or overvolting should be
applied. The CPU core and cache share the same voltage plane
on all machines we tested and the higher voltage of both will
be applied to the shared plane. Secondly, the requested voltage
scaling offset is encoded as an 11-bit signed integer relative
to the core’s base operating voltage. This value is expressed
in units of 1/1024 V (about 1 mV), thus allowing a maximum
voltage offset of ±1 V.
After software has successfully submitted a voltage scaling
request, it takes some time before the actual voltage transition
is physically applied. The current operating voltage can be
queried from the documented MSR 0x198 (IA32_PERF_STA
TUS). We experimentally veriﬁed that all physical CPUs share
the same voltage plane (i.e., scaling voltage on one core also
adjusts all the other physical CPU cores).
From Skylake onwards, the voltage regulator is external to
the CPU as a separate chip on the main board. The CPU
requests a supply voltage change, which is then transferred
to and executed by the regulator chip. In Intel systems, this
is implemented as follows (based on datasheets for respective
voltage regulator chips [30] and older, public Intel documen-
tation [31]):
1) The CPU outputs an 8-bit value “VID”, encoding the
currently requested voltage, to the voltage regulator on
the mainboard. Based on CPU datasheets (Table 6-11
in [33]), it appears this value is transferred over a three-
wire serial link called “Serial VID” or “SVID”, comprised
of the pins VIDSOUT, VIDSCK, and VIDALERT#. Pre-
sumably, the offset in MSR 0x150 is subtracted from the
base value within the CPU logic before outputting a VID
code; however it is unclear why MSR 0x150 is in steps
of 1/1024 V, while the 8-bit VID allegedly uses steps of
5 mV [30].
2) Based on the VID, the voltage regulator chip adjusts the
voltage supplied via the core voltage pins (VCC) to the