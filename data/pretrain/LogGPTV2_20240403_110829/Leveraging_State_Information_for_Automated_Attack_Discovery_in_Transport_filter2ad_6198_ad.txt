connection signiﬁcantly, irrespective of whether the packets
have any malicious impact. We manually inspect the packet
captures for attacks using this action to determine why an
attack was declared and identify false positives when the
reduced performance is caused by the number of packets
injected, and not by hitting the target sequence window.
Client and off-path attacks. Discarding the false positive
and on-path attacks results in a set of between 17 and 48
(depending on implementation) attack strategies. However,
88
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:11:45 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I.
SUMMARY OF SNAKE RESULTS
Protocol
Implementation
TCP
TCP
TCP
TCP
Linux 3.0.0
Linux 3.13
Windows 8.1
Windows 95
Strategies Tried
5994
5717
5549
5013
Attack Strategies Found
128
163
137
147
On-path Attacks
82
105
118
122
False Positives
5
10
2
3
True Attack Strategies
41
48
17
22
DCCP
Linux 3.13
4508
67
27
2
38
True Attacks
4
3
4
3
3
TABLE II.
SUMMARY OF ATTACKS DISCOVERED BY SNAKE
Protocol
TCP
Attack
CLOSE WAIT Resource Exhaustion
TCP
Packets with Invalid Flags
TCP
TCP
TCP
TCP
DCCP
DCCP
DCCP
Duplicate Acknowledgment Spoof-
ing
Reset Attack
SYN-Reset Attack
Duplicate Acknowledgment Rate
Limiting
Acknowledgment Mung Resource
Exhaustion
In-window
Sequence Number Modiﬁcation
REQUEST Connection Termination
Acknowledgment
Description
Connections hang on server if client exits and resets are
dropped
The handling of invalid ﬂag combinations could allow OS
ﬁngerprinting
Frequently duplicating acknowledgments causes sender to
increase window faster than normal
Brute force a sequence-valid reset
A sequence-valid SYN causes connection reset
Occasionally duplicating acknowledgments result in indi-
cated loss and connection slow down
Connection will hang waiting for timeouts to empty send
queue if acknowledgments are disrupted
Connection can be throttled by incrementing sequence num-
ber in an acknowledgment, resulting in a forced resync
Any packet except Response received in REQUEST state
results in connection reset
Impact
Server DoS
Operating System
Linux 3.0.0 / Linux 3.13
Fingerprinting
Linux 3.0.0 / Windows 8.1
Poor Fairness
Windows 95
Client DoS
Client DoS
Throughput
Degradation
All
All
Windows 8.1
Server DoS
Linux 3.13
Throughput
Degradation
Client DoS
Linux 3.13
Linux 3.13
Known
Partially
[28]
No
Yes [11]
Yes [13]
Yes [3]
No
No
No
No
many of these strategies are functionally the same attack,
just performed on a different ﬁeld or with a different value.
Ultimately, we found a total of six unique attacks, several
of which are effective against multiple implementations. We
discuss each of these attacks in detail below.
To the best of our knowledge, this attack is unreported in
the research literature. However, system administrators have
been aware of similar problems with connections stuck in
CLOSE_WAIT for many years [28]. SNAKE found this attack
on Linux 3.0.0 and Linux 3.13.
1) CLOSE WAIT Resource Exhaustion Attack: This attack
results in connections staying alive on the server in the
CLOSE_WAIT state for tens of minutes after the client closes
them. An attacker can easily initiate hundreds of thousands of
such connections before they begin to expire, likely rendering
the server unavailable.
CLOSE_WAIT is the TCP state that the passive close side
of a TCP connection, usually the server, remains in after
receiving notiﬁcation of remote close and while waiting for
the local application to close the connection. After the local
close, the connection must remain in this state until a FIN can
be sent.
If a Linux TCP client exits while in the middle of a
data transfer (like an HTTP download), Linux will send a
FIN packet and then not acknowledge any more data on the
connection; any further packets will generate a reset. This is
valid behavior according to the RFC since the application will
never receive this data [26]. If these reset packets are blocked,
it will appear to the sending TCP that the whole in-ﬂight
window of packets was lost, triggering congestion avoidance
and a series of retransmissions that will never succeed.
When the server application eventually closes the TCP con-
nection, TCP will transition to the CLOSE_WAIT state where
it needs to remain until all outstanding data is acknowledged,
including the lost window of packets that were in-ﬂight when
the client exited. These packets will never be acknowledged,
meaning that TCP is stuck in CLOSE_WAIT with (possibly
signiﬁcant) data queued on the socket. Linux will eventually
force-close a TCP connection due to lack of delivery, but that
requires 15 retries by default, which is between 13 and 30
minutes depending on the RTT [30].
2) Packets with Invalid Flags: Recall that the TCP header
includes several ﬂags that indicate the packet type. Not all
combinations of these ﬂags make sense. For instance, a packet
with SYN+FIN+ACK+RST ﬂags would indicate a packet start-
ing a connection, closing the connection, acknowledging a
packet in the connection, and resetting the connection. This is
clearly a nonsensical combination. One would expect a TCP
implementation to ignore such invalid packets. However, both
Linux 3.0.0 and Windows 8.1 respond to such invalid packets
in an active connection.
Linux 3.0.0 attempts to interpret these nonsensical ﬂag
combinations as best it can. This results in sending a duplicate
acknowledgment in response to a packet with no ﬂags set, a
situation that is never valid. We have also observed Linux 3.0.0
attempting to process SYN+FIN and SYN+FIN+ACK+PSH
packets. Note that Linux 3.13 appears to have ﬁxed these
problems and no longer responds to such invalid packets.
Windows 8.1 will also process and respond to invalid pack-
ets. However, it follows a different approach. If the RST ﬂag
is set, the connection is reset irrespective of what other ﬂags
might also be set. Otherwise, nonsensical ﬂag combinations
are ignored.
Responding to packets with invalid ﬂag combinations is not
by itself a security issue. We have found no instance where
responding to invalid ﬂag combinations achieves something
that is not possible with valid ﬂag combinations. However, a
target’s responses to invalid ﬂag combinations could be used
to ﬁngerprint the particular TCP implementation in use, indi-
cating other possible vulnerabilities to exploit. Further, packets
with invalid ﬂag combinations may be interpreted differently
by end hosts and middleboxes like ﬁrewalls and intrusion
99
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:11:45 UTC from IEEE Xplore.  Restrictions apply. 
detection systems, providing a possible way to subvert such
middleboxes.
3) Duplicate Acknowledgment Spooﬁng: This is a classic
TCP attack originally discovered by Savage, et al. in 1999 [11].
This attack operates against a na¨ıve TCP implementation
where the sender increases its congestion window for every
acknowledgment received, without checking for duplicates
or checking how much data is currently outstanding in the
network. As a result, a receiver can signiﬁcantly increase its
achieved throughput by simply acknowledging packets multi-
ple times, thereby increasing the sender’s congestion window
much faster than normal.
This attack requires frequent duplication of acknowledg-
ments to be meaningful, as each acknowledgment only in-
creases the congestion window by a very small amount. In
addition, if acknowledgments are duplicated more than three
times, TCP will react as if a loss occurred, halve its congestion
window, and enter fast recovery. However, in this mode, each
acknowledgment received results in a new packet being sent.
This simpliﬁes the attack by allowing the attacker to control
the sending rate by controlling the acknowledgment rate.
There are mitigations to this attack, including only allowing
the congestion window to be incremented by the number of
data segments outstanding in the network. Another option
would be a nonce in the TCP header and a sender side register
allowing acknowledgment of each nonce only once.
In our tests, SNAKE discovered this attack against Win-
to increase a malicious
dows 95 and was able to use it
connection’s throughput by a factor of 5. SNAKE did not ﬁnd
this attack against any other tested implementation, which is
expected as this attack and its mitigations were well known
by the time they were released.
4) Reset Attack: This attack works by spooﬁng a large
number of resets for a target connection. If one of these resets
is sequence-valid, the receiving TCP will reset the connection.
The work in [13] showed this attack to be much more practical
than previously supposed by pointing out that a reset packet
anywhere in the receive window is sufﬁcient to reset
the
connection. Thus, one could send packets at receive window
intervals, greatly reducing the number of packets required.
In our testing, SNAKE discovered this attack against all of
our TCP implementations. Since this attack utilizes a feature
of the TCP speciﬁcation itself, all implementations should be
vulnerable. The only thing implementations can do to protect
themselves is to keep their receive window small.
5) SYN-Reset Attack: This attack is very similar to the Re-
set Attack discussed above. In this case, the TCP speciﬁcation
says that the receipt of a sequence-valid SYN packet on an
active connection should result in the connection being reset.
As a result, an attacker can spoof a large number of SYN
packets at receive window intervals in an attempt to slip one
into the target connection’s sequence window, resulting in a
connection reset. This attack has been known since at least
2009 [3].
6) Duplicate Acknowledgment Rate Limiting: Duplicate
Acknowledgment Rate Limiting is
a new attack that
SNAKE discovered against Windows 8.1. It operates by dupli-
cating PSH+ACK packets, which occur only occasionally in the
data stream, ten times. This causes duplicate acknowledgments
to be sent to the sender by the receiver. After three duplicate
acknowledgments, the sender halves its congestion window
and retransmits the indicated packet.
So far, this is standard TCP behavior common to all TCP
New Reno implementations. However, for a Windows 8.1
server and a Linux 3.0.0 client, we observe a throughput
degradation of a factor of 5 compared to the competing ﬂow.
Both of the Linux implementations we tested show throughput
consistent with normal TCP competition in this scenario; that
is, approximately fair bandwidth sharing.
B. DCCP
The Datagram Congestion Control Protocol (DCCP) was
designed for applications that wanted congestion control, but
did not want the retransmissions and head-of-line-blocking
associated with TCP [31]. Examples of such applications are
applications that are highly latency sensitive, such as VoIP,
realtime streaming video, and video gaming.
Like TCP, DCCP requires a handshake to setup a connec-
tion and another one to tear the connection down. However,
DCCP uses different types of packets for these handshakes,
instead of a set of ﬂags [31]. Hence, the initial handshake
consists of a REQUEST and a RESPONSE packet while the
ﬁnal handshake consists of a CLOSE and a RESET packet.
DCCP assigns sequence numbers to packets instead of