### Two Encrypted Values and Garbled One-Hot Outer Product

Let \( \text{Even} \) (resp. \( \text{Odd} \)) denote the XOR sum of all seeds \( S_{i+1,j} \) for even \( j \) (resp. for odd \( j \)). The generator \( G \) sends to the evaluator \( E \) the value \( \text{Even} \) encrypted by \( A_i \oplus \Delta \) and the value \( \text{Odd} \) encrypted by \( A_i \). Thus, \( E \) can decrypt \( \text{Even} \) if the seed just off the path to \( L_a \) is even (resp. for odd). \( E \) can then XOR in the even seeds (resp. odd seeds) she already holds and recover the missing seed.

At this point, \( G \) holds each seed \( L_i \) and \( E \) holds each \( L_i \neq a \). By Definition 3.4, the parties hold garbled sharings of zero at all points \( i \neq a \). To complete the shared one-hot vector, we must convey to \( E \) a valid share of one at position \( a \). Therefore, \( G \) sends the following value to \( E \):

\[
\left( \bigoplus_{i} L_i \right) \oplus \Delta
\]

### Garbled One-Hot Outer Product

\( E \) XORs this value with the leaves she already holds and hence extracts \( L_a \oplus \Delta \): a valid share of one. Thus, the two parties compute \( \langle H(a) \rangle \) via \( 2(n-1) + 1 \) ciphertexts.

We now generalize the above approach to compute \( \langle H(a) \otimes b \rangle \). Let \( \langle b_j \rangle \) be the garbled sharing of \( b_j \). Let \( B_j \) (resp. \( B_j \oplus b_j \Delta \)) be \( G \)'s (resp. \( E \)'s) share.

For each \( j \in [m] \), the parties act as follows. Both parties apply a pseudorandom generator (PRG) to each of their leaf seeds \( L_i \) and hence obtain strings \( X_{i,j} \). Now, \( G \) sends to \( E \) the following value:

\[
\left( \bigoplus_{i} X_{i,j} \right) \oplus B_j
\]

\( E \) XORs this with her \( 2n - 1 \) values \( X_{i \neq a, j} \) and with her share of \( b_j \):

\[
\left( \bigoplus_{i \neq a} X_{i,j} \right) \oplus (B_j \oplus b_j \Delta) = X_{a,j} \oplus b_j \Delta
\]

In other words, at index \( a \), \( E \) receives a share of \( b_j \).

Thus, the parties now hold a sharing of a \( 2n \times m \) matrix \( x \) where each row is all zeros except row \( a \), which holds the vector \( b \). We have constructed \( \langle H(a) \otimes b \rangle \). The full construction, formalized in Figure 3, requires \( G \) to send to \( E \) \( 2(n - 1) + m \) ciphertexts.

### Zero Knowledge

Recall that garbled shares support linear maps (Lemma 3.5) and that for any function \( f \), the following equality holds:

\[
T(f)^\top \cdot H(a) = f(a)
\]

In Zero Knowledge (ZK), \( E \) knows each circuit wire value, so our requirement that \( E \) knows the argument to \( H(\cdot) \) is met automatically. Thus, in GC-ZK, we can compute any function using only \( 2n - 1 \) ciphertexts by computing \( T(f)^\top \cdot \langle H(a) \rangle \). However, we must keep the domain of \( f \) small, since the parties construct a tree with \( 2n \) leaves.

If \( f \) requires a large circuit, then this truth-table-based approach can improve over the circuit. For example, if the ZK proof invokes SHA256 on a small domain \( n \)-bit input, we need only \( 2n - 1 \) ciphertexts. The hand-tuned SHA256 circuit, on the other hand, has a staggering 22573 AND gates [AAL+]. Other ZK protocols, e.g., [WYKW21], can similarly use truth tables by brute force constructing a one-hot encoding (at the cost of \( O(2^n) \) AND gates). However, as the size of the input grows, our technique becomes more efficient. For tables with more than 9 input bits, our GC-based one-hot encoding will improve over other protocols.

### 2PC Applications

We now consider 2PC applications where both parties have input and neither party knows any intermediate wire value. Since our one-hot outer product primitive requires \( E \) to know the argument \( a \), we must reveal \( a \) to \( E \) in cleartext. Of course, we cannot arbitrarily reveal cleartext values to \( E \): this would not be secure. Instead, we are careful to only reveal values that have a mask applied such that the cleartext value remains protected.

We illustrate this idea by example. Let \( a \in \{0, 1\}^n \) and \( b \in \{0, 1\}^m \) be two bitstrings. Moreover, let \( n, m \) be small (formally, at most logarithmic in the overall circuit input size). Suppose the parties hold two sharings \( \langle a \rangle \) and \( \langle b \rangle \) and wish to compute the (non-one-hot) outer product \( \langle a \otimes b \rangle \). Note that outer products are useful since they can be leveraged to compute matrix products, integer products, and more (see Section 7).

First, \( G \) chooses two uniform masks \( \alpha \in \{0, 1\}^n \) and \( \beta \in \{0, 1\}^m \). The parties compute \( \langle a \oplus \alpha \rangle \) and \( \langle b \oplus \beta \rangle \) inside GC. Now, it is safe to reveal the values \( a \oplus \alpha \) and \( b \oplus \beta \) to \( E \) in cleartext. These values are revealed by \( G \) sending his color bits to \( E \).

From here, the parties use the following straightforward lemma:

**Lemma 4.1.** Let \( x \in \{0, 1\}^n \), \( y \in \{0, 1\}^m \) be two bitstrings and let \( \text{id} : \{0, 1\}^n \to \{0, 1\}^n \) denote the identity function:

\[
T(\text{id})^\top \cdot (H(x) \otimes y) = x \otimes y
\]

### Applying the One-Hot Encoding

We now give some examples of how the one-hot outer product can be used. We greatly expand on this topic in Section 7.

In particular, the parties compute the following two values:

\[
T(\text{id})^\top \cdot \langle H(a \oplus \alpha) \otimes b \rangle = \langle (a \oplus \alpha) \otimes b \rangle
\]
\[
T(\text{id})^\top \cdot \langle H(b \oplus \beta) \otimes \alpha \rangle = \langle (b \oplus \beta) \otimes \alpha \rangle
\]

Finally, the parties compute the following:

\[
\langle (a \oplus \alpha) \otimes b \rangle \oplus \langle (b \oplus \beta) \otimes \alpha \rangle^\top \oplus \langle \alpha \otimes \beta \rangle
= \langle a \otimes b \rangle \oplus \langle \alpha \otimes b \rangle \oplus \langle b \otimes \alpha \rangle^\top \oplus \langle \beta \otimes \alpha \rangle^\top \oplus \langle \alpha \otimes \beta \rangle
= \langle a \otimes b \rangle
\]

Thus, \( E \) and \( G \) can compute the outer product \( \langle a \otimes b \rangle \) using only two one-hot outer products. In total, \( G \) sends to \( E \) \( 3(n + m) - 4 \) ciphertexts. This is a significant improvement compared to computing the outer product via AND gates: the AND-gate method consumes \( 2nm \) ciphertexts.

### A Framework for One-Hot Techniques

We found a number of interesting functions that can be efficiently implemented using the one-hot outer product (see Section 7). Part of our contribution is a simple framework for designing new such constructions, which can then be directly used without building a new garbling scheme from the ground up.

Section 5 motivates and explains this framework in detail. In brief, our high-level strategy involves revealing cleartext values to \( E \). Our framework provides a simple infrastructure that prevents insecure leakage by packaging sensitive values into modules and ensuring these values cannot leave the module.

Our framework is a tool for designing modules that implement useful functions inside GC. Modules are built from a small set of primitives provided by the framework. These primitives allow the designer to specify what to compute, how to sample auxiliary randomness, and what to reveal to \( E \). Crucially, the module designer will not directly manipulate garbled labels, material, and other garbling scheme artifacts – all such handling is done through the framework’s primitives. In particular, this means that the module designer need not prove her GC instantiation secure: module security follows from our framework’s security theorems.

### Formalizing Our Approach

**Input:** \( E \) inputs \( a \). Parties together input shared bitstrings \( \langle a \rangle \) and \( \langle b \rangle \) where \( a \in \{0, 1\}^n \), \( b \in \{0, 1\}^m \).

**Output:** Parties output a shared matrix \( \langle H(a) \otimes b \rangle \).

**Procedure:**

1. Let \( A_i \) represent \( G \)'s share of each bit \( a_i \); hence \( E \) holds \( A_i \oplus a_i \Delta \).
2. Our first goal is to deliver to \( E \) \( 2n - 1 \) out of \( 2n \) pseudorandom seeds where the \( a \)-th seed is missing.
3. \( E \) and \( G \) consider a full binary tree with \( 2n \) leaves. Let \( N_{i,j} \) be the \( j \)-th node on level \( i \) and let the root reside on level \(-1\).
4. \( E \) and \( G \) label nodes from level 1 down with jointly agreed nonces \( \text{nonce}_{i,j} \).
5. \( G \) labels each node (except the root) with a \( \kappa \)-bit string \( S_{i,j} \):
   - \( G \) labels \( N_{0,0} \) by letting \( S_{0,0} \triangleq A_0 \oplus \Delta \) and \( N_{0,1} \) by letting \( S_{0,1} \triangleq A_0 \).
   - Consider \( N_{i,j} \) with parent \( N_{i-1, \lfloor j/2 \rfloor} \). \( G \) sets \( S_{i,j} = H(S_{i-1, \lfloor j/2 \rfloor}, \text{nonce}_{i,j}) \).
6. For each level \( i > 0 \), \( G \) XORs all odd and all even labels:
   \[
   \text{Even} \triangleq \bigoplus_{j=0}^{2^{i-1}-1} S_{i,2j}
   \]
   \[
   \text{Odd} \triangleq \bigoplus_{j=0}^{2^{i-1}-1} S_{i,2j+1}
   \]
   For each level \( i > 0 \), the parties agree on two nonces \( \text{nonce}_{i,\text{even}} \) and \( \text{nonce}_{i,\text{odd}} \). \( G \) sends to \( E \) the following two values:
   \[
   H(A_i \oplus \Delta, \text{nonce}_{i,\text{even}}) \oplus \text{Even}
   \]
   \[
   H(A_i, \text{nonce}_{i,\text{odd}}) \oplus \text{Odd}
   \]
7. \( E \) reconstructs each label \( S_{i,j} \) except the labels along the path to leaf \( a \):
   - \( E \) labels \( N_{0,1} \) with \( A_0 \) if \( a_0 = 0 \); otherwise, she labels \( N_{0,0} \) with \( A_0 \oplus \Delta \) (recall, her share is \( A_0 \oplus a_0 \Delta \)).
   - Consider each level \( i > 0 \). There are two sibling nodes on level \( i \) that do not have a labeled parent. Consider each of the other \( 2^{i+1} - 2 \) nodes \( N_{i,j} \) with parent \( N_{i-1, \lfloor j/2 \rfloor} \). \( E \) computes \( H(S_{i-1, \lfloor j/2 \rfloor}, \text{nonce}_{i,j}) = S_{i,j} \).
   - For the other nodes on level \( i \), \( E \) decrypts the XOR sum \( \text{Even} \) if \( a_i \) is odd or \( \text{Odd} \) if \( a_i \) is even; \( E \) XORs this value with her \( 2^i - 1 \) even (resp. odd) labels and hence extracts the remaining even (resp. odd) label.
8. \( G \) now holds \( 2n \) strings \( S_{n-1,j} \); \( E \) also holds each string except \( S_{n-1,a} \). Rename these leaf strings \( L_i \triangleq S_{n-1,i} \).
9. For each bit \( b_j \) of \( b \):
   - Let \( B_j \) be \( G \)'s share of \( \langle b_j \rangle \). Hence, \( E \) holds \( B_j \oplus b_j \Delta \).
   - \( E \) and \( G \) agree on \( 2n \) fresh nonces \( \text{nonce}_i \).
   - For each leaf \( i \), \( G \) sets \( X_{i,j} \triangleq H(L_i, \text{nonce}_i) \). \( G \) sends to \( E \):
     \[
     \left( \bigoplus_{i} X_{i,j} \right) \oplus B_j
     \]
   - For each leaf \( i \neq a \), \( E \) computes \( X_{i,j} = H(L_i, \text{nonce}_i) \). \( E \) then computes:
     \[
     \left( \bigoplus_{i \neq a} X_{i,j} \right) \oplus (B_j \oplus b_j \Delta) = X_{a,j} \oplus b_j \Delta
     \]
10. Thus, for each column \( j \) of \( X \), \( E \) and \( G \) hold \( 2n \) values equal everywhere (i.e., each is a garbled share of zero) except at index \( a \), where the parties hold an XOR share of \( b_j \Delta \): the computation outputs a shared one-hot outer product.
11. \( G \) outputs his matrix share \( X \); \( E \) outputs her matrix share \( X \oplus (H(a) \otimes b) \Delta \).