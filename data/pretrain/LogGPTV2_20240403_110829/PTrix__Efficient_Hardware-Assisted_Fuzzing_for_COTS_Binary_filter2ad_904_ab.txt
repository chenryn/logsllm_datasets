the same architecture except for a PT module as well as a proxy
sitting between the fuzzer and the target program. Within this new
fuzzing system, the proxy component takes the responsibility of
coordinating fuzz testing, and the PT module is used for supporting
the parallel and elastic parsing of Intel PT trace packets. In the fol-
lowing, we briefly describe how each component coordinates with
each other at the high level. Note that a more detailed description
of the workflow will be provided in Section 3.2.
Similar to AFL, PTrix starts with generating an input for the
target program ( 1○ 2○). Instead of passing the input directly to
the program or more precisely the embedded fork server, PTrix
however sends it through the proxy component which leverages a
scheduler to coordinate fuzz testing ( 3○ 4○).
With the facilitation of Intel PT, PTrix uses a PT module to
monitor the execution of the target program and store the trace
packets in a pre-allocated buffer shared between kernel and user
space ( 6○). Carried on simultaneously with the execution of the
target program, the proxy parses the PT trace, computes feedback
and updates the local bitmap accordingly ( 7○).
0x400629: push%rbp...0x400639: sysenter0x400641: mov%eax, %ebx...0x40067a: cmp$0x1, %eax0x40067d: je0x4006920x400692: movq$0x00, -0x8(%rbp)...0x4006b6: callq*%rax0x4005e4: push%rbp...0x400607: retq0x4006b8: leaveq(a) Instruction TraceTIP0x400629...TIP.PGD no ipTIP.PGE 0x400641......TNT1......TIP0x4005e4......TIP0x4006b8...(b) PT Traceseed poolglobal bitmaplocal bitmapYmutate①seedforkserverforkentry:⑤bb0:routine………②input⑪cmp(a)Fuzzer(c)TargetProgram⑫copylocal bitmapPTBuffer(b)ProxyPTBuffermapped⑦parsescheduler③scheduling④inputKernelModule⑨sync⑧exit⑩exit⑥parsesharedASIACCS ’19, July 07–12, 2019, Auckland, NZ
Chen, et al.
3.2.2 Enforcing the Correctness of the Workflow. With the comple-
tion of the initialization above, PTrix can perform fuzz testing by
following the workflow specified in Section 3.1. However, a sim-
ple design of this workflow could potentially incur an incorrect
synchronization issue, particularly given the situation where the
fuzzer, proxy, PT module and fork server components all run con-
currently. To ensure the correctness of fuzz testing, we augment
PTrix with three callbacks planted into the tracepoints inside three
kernel events – fork, context_switch, and exit. Note that we
use the tracepoints instead of explicit interactions (such as system
calls) to avoid additional communication costs. In the following,
we specify the functionality of each of these callbacks.
Fork callback. PTrix uses PT module to monitor the process of
a target program (for brevity target process) and the proxy com-
ponent to coordinate the entire fuzzing test. To facilitate this, we
introduce a fork callback. On the one hand, when the fork server
forks the target process 1, this callback registers the target process
to the proxy and makes the PT module ready for tracing. As such,
we can ensure that the target process does not execute until the
proxy is ready and the PT module is set up. On the other hands,
this callback captures child threads forked by the target process,
prepares these threads with the aforementioned initialization we
perform to the target process, and ensures the synchronization
before these threads start. By doing so, PTrix can handle multi-
threading programs.
Context_switch callback. When the target process enters execu-
tion status, the CPU might switch it in and out periodically and a
context_switch event would occur. In the context_switch, we
introduce a callback for two reasons. First, we design the callback
to enable Intel PT to trace a CPU core whenever the target pro-
cess switches into it, and disable the tracing at the time when the
target process is switched out. In addition, this callback updates
pt_off when the target process is switched out. In this way, we
guarantee that PT always writes to the right place. Second, as PT
cannot separate the traces from different threads, we use this call-
back to distinguish the target process and its child threads. More
specifically, this callback sets up PT to write in the buffer associ-
ated with a thread when this thread is switched in and updates the
corresponding pt_off when this thread is switched out.
Exit callback. After the target process terminates, an exit event
would occur. To use it as a signal for concluding one round of fuzz
testing, we introduce a callback in exit. This callback is responsible
for coordination among the fuzzer, PT module and proxy compo-
nents. To be specific, whenever the callback is triggered, PTrix first
disables Intel PT. Then, it examines whether the data packets have
been processed completely. Only with the confirmation of data
packet processing completion, PTrix further resets the PT module,
coordinates with the fuzzer to compare the bookkeeping bitmaps
and thus concludes one round of fuzzing testing. With this callback,
we can ensure that the fuzzer does not conclude fuzz testing prior
to the packet parsing and local bitmap computation.
3.3 Efficiency Improvement
To illustrate the coordination and synchronization enforced through
the aforementioned callbacks, we present the chronological order
1More precisely, the target process means the master thread
Figure 4: Timeline of one fuzzing round in PTrix. Note that
the intervals depicted in dotted lines are those we aim to in-
troduce performance optimization, and the circled numbers
correspond to those shown in Figure 3.
At the time of the termination of fuzz testing, the proxy receives
a notification ( 8○). To enforce correct synchronization between
consecutive rounds of fuzz testing, the scheduler of the proxy does
not pass the notification back to the fuzzer until it confirms the
completion of packet parsing ( 9○ 10○).
On the fuzzer side, right after receiving the fuzzing completion
notification from the proxy, it follows the same procedure as AFL
to conclude one round of fuzz testing, i.e., comparing the local
and global bitmaps and, if necessary, appending the input into the
queue for the consecutive rounds of fuzz testing (11○ 12○). It should
be noted that, throughout the fuzzing process described above, the
key characteristic of PTrix is to compute path coverage using PT
trace. As is mentioned earlier in Section 1, this could significantly
reduce the overhead introduced by instruction trace reconstruction.
In Section 3.3, we will elaborate on our design of PTrix to enable
this practice.
3.2 Workflow Detail
Now, we specify the workflow details that have not yet been dis-
cussed above.
Initializing Fuzz Testing Workflow. First, PTrix mounts the
3.2.1
PT module and sets it to listen to a netlink channel. Second, PTrix
starts the fuzzer component, which forks a child process running
as the proxy seating between the fuzzer and the target program. By
passing the information pertaining to a fuzzing task to the proxy,
PTrix triggers the proxy to send a notification to the PT module
through the established netlink channel.
On receiving the above notification, the PT module allocates
a buffer for storing PT data packets. In addition, it instantiates a
variable pt_off and uses it to indicate the offset of the buffer, from
which to the head of the buffer is the space where the data packets
are stored. In this work, we design PTrix to map the buffer and
the variable into the user-space of the proxy process. In this way,
we can ensure that the proxy process can retrieve data packets
without crossing the user-kernel privilege boundary, making the
performance overhead minimal.
After the PT module initialization, the proxy receives a confirma-
tion and further performs the following operations. First, it forks a
child process running as the fork server. Second, the proxy process
notices the fuzzer to generate an input and passes it to the fork
server to start execution.
A single fuzzing runPtrixFuzzerProxyTargetProgramPT Module123587910111246inputschedule execute trace parse finalizePTrix: Efficient Hardware-Assisted Fuzzing for COTS Binary
ASIACCS ’19, July 07–12, 2019, Auckland, NZ
of each component in Figure 4. As we can observe from the figure,
parsing data packets and computing local bitmaps sit on the critical
path of each round of fuzz testing. If these operations start after the
termination of the target process, or launch nearly simultaneously
with the target process but take a significant amount of time to
complete, the fuzzing efficiency would be significantly jeopardized
and these operations would become the performance bottleneck
for PTrix. To avoid these situations and improve performance,
we propose a parallel and elastic PT parsing scheme and a new
PT-friendly feedback.
3.3.1 Parallel and Elastic PT Parsing. As is mentioned above, it
obviously increases the time needed for a single round of fuzz
testing if PTrix parses data packets right after the termination of a
target process. As a result, we carefully design the following scheme
to perform data packet decoding simultaneously with the target
process execution.
After starting a target process, the proxy process creates a parser
thread to decode the data packets recorded through Intel PT. De-
pending upon how fast the data packets are yielded, the parser
thread adjusts its working status. For example, if the parser ex-
hausts the packets quicker than they are recorded, it would enter
an idle state until new data packets become available. In the process
of parsing data packets, we design PTrix to maintain a variable
last_off, indicating the ending position where the parser thread
completes packet decoding last time. With this variable, the parser
could easily pinpoint the offset from which it could retrieve the
data packets while it is awakened from an ideal state.
In our design, PTrix initializes the last_off variable with zero.
Every time when last_off is less than pt_off – the variable indi-
cating the end of the buffer that stores data packets – the parser
thread could decode data packets and update last_off accord-
ingly. With this, we can ensure that the parser can always correctly
identify the packets that have not yet been decoded and, more im-
portantly, guarantee that the parser does not retrieve data packets
out of the boundary. In addition, with the facilitation from the exit
callback, PTrix can ensure all data packets are processed behind the
termination of the target process. It should be noted that we design
PTrix to maintain these variables on the basis of each individual
thread for the simple reason that this could allow PTrix to handle
multi-threading.
While the aforementioned design is intuitive, it is still challeng-
ing to follow the design and perform data parsing simultaneously
with the execution of a target program. The reason is that, in order
to perform data packet decoding and execute the target process in
parallel, we have to design PTrix to update the variable pt_off
significantly frequently. However, due to the limitation imposed
by hardware, we can update the variable pt_off only at the time
when a CPU core switches out the target process. This is simply
because a correct offset can be reliably obtained only when PT trac-
ing is disabled. In practice, our observation, however, indicates that
context switch does not frequently occur and, oftentimes, a target
process completes one round of fuzz testing without experiencing
context switch. As a result, it is infeasible to perform simultaneous
data packet parsing without disrupting the execution of the target
program.
Algorithm 1 Bit map updating algorithm
INPUT:
tr ace_bits[] - The bit map
packet_queue - The queue of PT packets
Updated tr ace_bits[]
bit_hash = 0
tip_cnt = 0
tnt_cnt = 0
while packet_queue .size() do
packet = packet_queue .pop()
if packet .type == TIP then
OUTPUT:
1: procedure UpdateTracebits
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
end if
22:
end while
23: end procedure
end if
bit_hash = U pdateH ash(bit_hash, packet)
tip_cnt++
tnt_cnt = 0
if tip_cnt ≥ MAX_TIP then
index = Encodinд(bit_hash)
setbit(tr ace_bits, index)
tip_cnt = 0
bit_hash = U pdateH ash(0, packet)
end if
if packet .type == TNT && tnt_cnt ≤ MAX_TNT then
bit_hash = U pdateH ash(bit_hash, packet)
tnt_cnt++
▷ Start a new slice
To address the challenge above, we introduce an elastic scheme,
which leverages a timer mechanism provided by kernel to adjust
the frequency of disabling process tracing in an automated fashion.
To be more specific, we first attach a timer to a CPU core that ties
to a target process. Then, we register a handler to that timer. With
this, process tracing can be enabled or disabled, and the variable
pt_off can be updated. For example, whenever the timer alarm is
triggered, the handler could disable the tracing, update pt_off and
set up the timer to arm for the next shot.
To determine the countdown for the next alarm, we measure
the length of the data packets by retrieving the value held in the
variable pt_off. Then, we compare it with the variable pt_last,
indicating the length of the data packets that have been correctly
decoded by the parser thread. Since the value difference in these
variables demonstrates the amount of data packets that have not
yet been parsed, which reflects the speed of the parser thread in
decoding the packets. We set up the next timer alarm in an elastic
manner based on the following criteria. If the amount of the data
packets left behind exceeds a certain threshold, PTrix decreases the
countdown so that parser’s workload will be reduced. Otherwise,
the countdown is incremented and thus ensuring that parser has
sufficient packets to perform decoding. In Section 5, we demonstrate
the efficiency gain obtained from this elastic scheme by comparing
it with a naive scheme in which the parsing process starts after the
execution termination of the target process.
3.3.2 New PT-friendly Feedback Scheme. As is mentioned earlier, if
parsing data packets incurs significant latency, the improvement in
fuzzing efficiency obtained from the aforementioned parallel pars-
ing scheme would become a futile attempt. Therefore, in addition to
taking advantage of parallelization for improving the efficiency of
fuzz testing, we need an efficient approach to decode data packets
and thus expedite each round of fuzz testing.
Intuitively, we can perform data packet decoding by following
the footprints of previous works [8, 29], in which fuzzing tools are
designed to reconstruct instructions executed – using the technique
ASIACCS ’19, July 07–12, 2019, Auckland, NZ
Chen, et al.
Algorithm 2 Encoding algorithm
INPUT:
bit_hash - A 64 bit hash value to encode
index - Result of the encoding
OUTPUT:
1: procedure Encoding
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end procedure
end for