    0f        38 0ea8f814 0f65d2e2 libcef+0x18ad9a
    10        1c 0ea8f830 76da62c4 libcef+0x16d2e2
    11        14 0ea8f844 774b0f79 kernel32!BaseThreadInitThunk+0x24
    12        48 0ea8f88c 774b0f44 ntdll!__RtlUserThreadStart+0x2f
    13        10 0ea8f89c 00000000 ntdll!_RtlUserThreadStart+0x1b
    0:023> ?54c
    Evaluate expression: 1356 = 0000054c
栈有些不太对劲，表现为01#栈帧太大了；用了这么多字节，先来看看这里存储的数据有没有什么特别的；找到的字符串，如下所示：
    0:023> da 0ea8ecdc+8 l10000
    0ea8ece4  "[0812/210050:FATAL:core_audio_ut"
    0ea8ed04  "il_win.cc(292)] Check failed: de"
    0ea8ed24  "vice_enumerator. .Backtrace:..ce"
    0ea8ed44  "f_time_to_timet [0x0F6889A7+8270"
    0ea8ed64  "31]..cef_time_to_timet [0x0F652D"
    0ea8ed84  "17+606727]..TerminateProcessWith"
    0ea8eda4  "outDump [0x116521A8+10745848]..T"
    0ea8edc4  "erminateProcessWithoutDump [0x11"
    0ea8ede4  "6529BA+10747914]..TerminateProce"
    0ea8ee04  "ssWithoutDump [0x1167C36C+109183"
    0ea8ee24  "32]..TerminateProcessWithoutDump"
    0ea8ee44  " [0x11636600+10632272]..Terminat"
    0ea8ee64  "eProcessWithoutDump [0x11650BB1+"
    0ea8ee84  "10740225]..TerminateProcessWitho"
    0ea8eea4  "utDump [0x11B4B196+15960038]..Ge"
    0ea8eec4  "tHandleVerifier [0x0F692AB5+469]"
    0ea8eee4  "..cef_time_to_timet [0x0F65F0EF+"
    0ea8ef04  "656863]..cef_time_to_timet [0x0F"
    0ea8ef24  "65EAE3+655315]..GetHandleVerifie"
    0ea8ef44  "r [0x0F6943B7+6871]..cef_time_to"
    0ea8ef64  "_timet [0x0F65EE20+656144]..cef_"
    0ea8ef84  "time_to_timet [0x0F65EDDD+656077"
    0ea8efa4  "]..cef_time_to_timet [0x0F67A94B"
    0ea8efc4  "+769595]..cef_time_to_timet [0x0"
    0ea8efe4  "F67AD9A+770698]..cef_time_to_tim"
    0ea8f004  "et [0x0F65D2E2+649170]..BaseThre"
    0ea8f024  "adInitThunk [0x76DA62C4+36]..Rtl"
    0ea8f044  "SubscribeWnfStateChangeNotificat"
    0ea8f064  "ion [0x774B0F79+1081]..RtlSubscr"
    0ea8f084  "ibeWnfStateChangeNotification [0"
    0ea8f0a4  "x774B0F44+1028].."
整理之后如下所示：
原理是一大推字符串占据可这块内存，但这着实不是什么好习惯；现在来解释下，为何游戏进程自己就执行了一个int 3；根据提示的字符串文本可推测：
libcef.dll中检测到一个FATAL错误，具体的错误就是跟audio相关的校验失败了，由于Check
failed，且libcef还认为这是个FATAL——致命类型的错误，就直接执行int 3
触发断点了；话又说回来，这种死法确实不优雅也不高明。libcef的具体信息看下：
    0:023> lmvm libcef
    Browse full module list
    start    end        module name
    0f4f0000 129bd000   libcef   T (no symbols)           
        Loaded symbol image file: libcef.dll
        Image path: c:xxxxlibcef.dll
        Image name: libcef.dll
        Browse all global symbols  functions  data
        Timestamp:        Wed Jan 30 12:17:12 2019 (5c512548)
        CheckSum:         0348AAFD
        ImageSize:        034CD000
        File version:     2.1432.2186.0
        Product version:  2.1432.2186.0
        File flags:       0 (Mask 17)
        File OS:          4 Unknown Win32
        File type:        2.0 Dll
        File date:        00000000.00000000
        Translations:     0000.04b0 0000.04e4 0409.04b0 0409.04e4
        Information from resource tables:
没啥有用的信息，我有看了看我本地有没有这个dll，结果还真有，印象笔记里就有用他；原来是大佬google家的，失敬失敬。
2.6 step6：最后的战役——手动重构栈；
现在想看下整个程序从第一次异常触发到异常的分发过程再到程序的最后一条指令的整个栈回溯，该怎么办呢？当然是栈重构了。
重构的思路是什么？需要怎么做呢？重构做要做的核心工作便是修复受损的栈帧，那如何找到那些栈帧是受损的呢？靠猜测，当然不是瞎猜，综合现有的证据。我们回到当前线程的初始上下文环境，然后栈回溯下看看；
    0:023> .cxr;kf
    Resetting default scope
    #   Memory  ChildEBP RetAddr  
    00           0ea8cd98 76f41d80 ntdll!NtWaitForMultipleObjects+0xc
    01       194 0ea8cf2c 76f41c78 kernelbase!WaitForMultipleObjectsEx+0xf0
    02        1c 0ea8cf48 71021997 kernelbase!WaitForMultipleObjects+0x18
    WARNING: Stack unwind information not available. Following frames may be wrong.
    03      1094 0ea8dfdc 71021179 GameCrashDmp+0x1997
    04         8 0ea8dfe4 774edff0 GameCrashDmp+0x1179
    05      18a8 0ea8f88c 774b0f44 ntdll!__RtlUserThreadStart+0x3d0a6
    06        10 0ea8f89c 00000000 ntdll!_RtlUserThreadStart+0x1b
根据上边的信息可知，03#和05#栈帧有问题，我们逐一进行查看；
先看03#的数据:
再看05#帧的数据:
    0:023> dd 0ea8dfe4
    0ea8dfe4  0ea8f88c 774edff0 0ea8e014 774c2a20
    0ea8dff4  0ea8f88c 00000000 fffffffe 0ea8e02c
    0ea8e004  774c2330 00000000 00000000 00000000
    0ea8e014  0ea8e150 0ea8e1a0 77548760 00000001
    0ea8e024  77548750 00000047 0ea8e04c 774c6770
    0ea8e034  775642d4 774c0540 0ea8e150 0ea8f87c
    0ea8e044  0ea8e1a0 0ea8e0dc 0ea8e070 774d2d42
    0ea8e054  0ea8e150 0ea8f87c 0ea8e1a0 0ea8e0dc
如上所示，这个栈帧明显有问题了，我们试着这样改一下，看看效果如何：
    0:023> ed 0ea8dfe4  0ea8dfe4+8
    0:023> kf
    #   Memory  ChildEBP RetAddr  
    00           0ea8cd98 76f41d80 ntdll!NtWaitForMultipleObjects+0xc
    01       194 0ea8cf2c 76f41c78 kernelbase!WaitForMultipleObjectsEx+0xf0
    02        1c 0ea8cf48 71021997 kernelbase!WaitForMultipleObjects+0x18
    03      1094 0ea8dfdc 71021179 GameCrashdmp+0x1997
    04         8 0ea8dfe4 774edff0 GameCrashdmp+0x1179
    05         8 0ea8dfec 774c2a20 ntdll!__RtlUserThreadStart+0x3d0a6
    06        14 0ea8e000 774c2330 ntdll!_EH4_CallFilterFunc+0x12
    07        2c 0ea8e02c 774c6770 ntdll!_except_handler4_common+0x80
    08        20 0ea8e04c 774d2d42 ntdll!_except_handler4+0x20
    09        24 0ea8e070 774d2d14 ntdll!ExecuteHandler2+0x26
    0a        c8 0ea8e138 774c088f ntdll!ExecuteHandler+0x24
    0b         0 0ea8e138 013e50c1 ntdll!KiUserExceptionDispatcher+0xf        ;第二次异常分发
    0c       50c 0ea8e644 774af15a GameExe+0x50c1                             ;案发第二现场
    0d        94 0ea8e6d8 774c088f ntdll!RtlDispatchException+0x7c
    0e         0 0ea8e6d8 0f688051 ntdll!KiUserExceptionDispatcher+0xf        ;第一次异常分发
    0f       4c4 0ea8eb9c 0f652ee8 libcef+0x198051                            ;案发第一现场
    10       54c 0ea8f0e8 116521a8 libcef+0x162ee8
    11       17c 0ea8f264 116529ba libcef+0x21621a8
    12        58 0ea8f2bc 1167c36c libcef+0x21629ba
    13         c 0ea8f2c8 11636600 libcef+0x218c36c
    14       218 0ea8f4e0 11650bb1 libcef+0x2146600
    15        44 0ea8f524 11b4b196 libcef+0x2160bb1
    16        14 0ea8f538 0f692ab5 libcef+0x265b196
    17        5c 0ea8f594 0f65f0ef libcef+0x1a2ab5
    18       144 0ea8f6d8 0f65eae3 libcef+0x16f0ef
    19        80 0ea8f758 0f6943b7 libcef+0x16eae3
    1a        24 0ea8f77c 0f65ee20 libcef+0x1a43b7
    1b        30 0ea8f7ac 0f65eddd libcef+0x16ee20
    1c        28 0ea8f7d4 0f67a94b libcef+0x16eddd
    1d         8 0ea8f7dc 0f67ad9a libcef+0x18a94b
    1e        38 0ea8f814 0f65d2e2 libcef+0x18ad9a
    1f        1c 0ea8f830 76da62c4 libcef+0x16d2e2
    20        14 0ea8f844 774b0f79 kernel32!BaseThreadInitThunk+0x24
    21        48 0ea8f88c 774b0f44 ntdll!__RtlUserThreadStart+0x2f
    22        10 0ea8f89c 00000000 ntdll!_RtlUserThreadStart+0x1b
完美，这个栈回溯要好得多，程序的执行脉络很清晰了；
## 3、总结
本文从异常入手，通过各种分析，辨识出第一次案发现场，第二次案发现场，并逆向分析了关键的异常分发函数，简要介绍了VEH，接着根据搜索到的数据猜测除了程序为何触发int
3进行自杀的动作；最后通过手动重构，恢复出程序执行到死亡的整个执行流程；