### Figure 7: CPU Usage Test of Bonnie++ in Percentage
- **Seq**: Sequential
- **Rnd**: Random
- **SC**: Sequential Create
- **RC**: Random Create

MobiPluto performs a two-pass random-wipe, which doubles the time required to encrypt the storage. However, this initialization is a one-time process and will not be repeated. To measure the initialization time, we used a timer to record the interval between entering the password through the `vdc` command and the appearance of the user interface for password entry. The booting time was analyzed by reading the system logs. The experimental results for initialization and booting times are presented in Table 1.

### 7. Discussion

#### Precautions Against Collusion Between Adversaries and Carriers/Service Providers
Collusion between adversaries and carriers or service providers can reveal the existence of hidden volumes. If a user connects to external networks while in PDE mode, a malicious carrier may provide connection activity logs to the adversary. These logs may differ from those in the public mode, providing evidence of PDE mode. Therefore, when using PDE mode, we recommend enabling "Airplane Mode" and removing the SIM card. If communication with external networks is necessary, anonymity should be used. Similarly, to prevent collusion with service providers, users should use secondary accounts with pseudonyms when accessing web services in PDE mode [33].

#### Block-Based File Systems
MobiPluto leverages `dm-crypt`, a kernel feature that can encrypt entire disks, partitions, software RAID volumes, logical volumes, and files. `dm-crypt` provides a logical block device interface, allowing any block-based file system to be built on top of it. Flash file systems (e.g., YAFFS [30]) are specifically designed for raw flash memory [23] and cannot be used on top of block devices, making them incompatible with MobiPluto. However, block devices are widely used as internal storage in modern mobile devices, such as eMMC [32], which is found in many Android phones (e.g., Samsung Galaxy S5, Samsung Galaxy Note 4, Google Nexus 6, LG G3, HTC One M9). Thus, MobiPluto can be extensively deployed in these devices. For early Android devices like the Google Nexus One, which use raw flash, deploying MobiPluto would require modifying the encryption layer (e.g., `dm-crypt`) to accommodate the special characteristics of raw flash (e.g., wear leveling). This modification would involve moderate engineering work without affecting other components of the MobiPluto framework.

#### Supporting Multi-Level Deniability
There is ongoing debate about the effectiveness of multi-level deniability [33]. Extending MobiPluto to support multi-level deniability can be achieved by adapting the solution introduced in MobiHydra [36]. Each deniability level corresponds to a different hidden volume, each starting at a different secret offset and extending to the end of the storage medium. Overlapping hidden volumes can lead to data overwriting, a common issue in prior PDE solutions [15, 28, 29, 33, 35, 36]. MobiPluto mitigates this issue in the following ways:
1. **Secret Offsets**: Each secret offset is derived from the hidden password corresponding to that deniability level [36]. Offsets are generated with a minimum separation distance to ensure sequential data placement, preventing overwrite until the total amount of data exceeds the minimum separation distance.
2. **Data Size**: Sensitive data stored in each deniability level is typically small.
3. **User Guidance**: Users are guided carefully in PDE mode. A daemon program monitors storage usage in the hidden volume and alerts the user if the total writes approach the minimum separation distance.

#### Supporting Other Operating Systems
To use MobiPluto on other operating systems (mobile or desktop), the OS must support both thin provisioning and block-layer encryption. Thin provisioning transforms non-sequential allocation on the thin volume to sequential allocation on the physical volume, while block-layer encryption is necessary for MobiPluto to be built on encrypted block devices.

### Table 1: Initialization Time and Booting Time
| Metric | Android FDE | MobiPluto |
|--------|-------------|-----------|
| Initialization | 18min 23s ± 1s | 37min 2s ± 2s |
| Booting Time (wrong pwd) | 0.19 ± 0.02s | 1.98 ± 0.03s |
| Booting Time (decoy pwd) | 0.29 ± 0.02s | 1.36 ± 0.02s |
| Booting Time (hidden pwd) | 2.35 ± 0.03s | N/A |

### 8. Related Work

#### Deniable Encryption
Deniable encryption is an emerging security paradigm in network communications [19], disk storage, and cloud storage [22]. In disk storage, existing work relies on steganography or hidden volumes to achieve deniability.

**Steganography-Based Solutions:**
- **Anderson et al. [16]**: Proposed the first file encryption scheme with PDE support, using hiding blocks within cover files and random data. However, these solutions are not suitable for performance-sensitive mobile devices due to high storage and I/O overheads.
- **StegFS [28]**: A deniable-encryption version of Anderson et al.'s work, but its modified Ext2 driver and external block table make it suspicious, and it has low disk usage due to collision avoidance.
- **Pang et al. [29]**: Proposed a design where blocks used by hidden files are marked as occupied, using abandoned and dummy blocks for deniability. This design is inefficient in terms of disk space.

**Hidden Volumes-Based Solutions:**
- **TrueCrypt [35]** and **FreeOTFE [6]**: Well-known PDE tools relying on hidden volumes. MobiPluto decouples the file system from the underlying storage medium, achieving a "file-system friendly" feature. Key differences include:
  - **File System Compatibility**: TrueCrypt is sensitive to file systems and only works with FAT or NTFS. MobiPluto works with any block-based file system.
  - **Boot Loader**: TrueCrypt uses a special boot loader, which can be suspicious. MobiPluto uses thin provisioning and regular FDE, standard in Android, enhancing deniability.
  - **Detection**: TrueCrypt volumes can be easily identified, compromising deniability. MobiPluto's footer cannot be distinguished from FDE, maintaining deniability.
- **MobiFlage [33, 15]**: First PDE scheme for mobile devices, implemented for FAT32 and Ext4. The FAT32 version is unsuitable for devices without external storage, and the Ext4 version requires significant modifications, increasing the attack surface.
- **MobiHydra [36]**: Improves MobiFlage by addressing booting-time attacks, introducing multi-level deniability and mode switching without rebooting.
- **HIVE [18]**: A desktop PDE scheme defending against multiple-snapshot adversaries, but suffers from high performance overhead due to write-only oblivious RAM.

**Other Solutions:**
- **Ragnarsson et al. [31]**: Proposed using thin provisioning for deniability, requiring significant modifications and lacking a proof-of-concept implementation.
- **DEFY [30]**: A deniable encrypted file system for flash-based, solid-state drives, following a log-structured design motivated by flash memory constraints.

### 9. Conclusion
In this paper, we introduce MobiPluto, a file system-friendly PDE solution for mobile devices. MobiPluto achieves deniability as a side effect of equipping thin provisioning, a well-established tool in the Linux kernel. It utilizes thin provisioning to transform non-sequential allocation on thin volumes to sequential allocation on the underlying storage medium, making "file system friendly" PDE feasible. We have implemented a prototype on an LG Nexus 4 device, and extensive evaluations show that MobiPluto introduces only a small performance overhead.

### 10. Acknowledgments
We thank our shepherd, Ariel Feldman, and anonymous ACSAC reviewers for their insightful suggestions and advice. This work is partially supported by the National 973 Program (Award No. 2014CB340603) and the Strategy Pilot Project of the Chinese Academy of Sciences (Award No. XDA06010702). Bo Chen is currently supported by US ARO grant ARO W911NF-15-1-0576.

### 11. References
[1] LVM Administrator’s Guide. https://www.centos.org/docs/5/html/Cluster Logical Volume Manager/, 2007.
[2] “Partitioning” your Nexus S using LVM. http://forum.xda-developers.com/nexus-s/general/howto-partitioning-nexus-s-using-lvm-t1656794, May 2012.
[3] TrueCrypt User’s Guide. https://www.grc.com/misc/truecrypt/TrueCrypt%20User%20Guide.pdf, 2012.
[4] BitLocker Overview. https://technet.microsoft.com/en-us/library/hh831713.aspx, 2013.
[5] Consider LVM on Android. http://forum.cyanogenmod.org/topic/4226-has-anyone-considered-lvm-on-android/, 2013.
[6] FreeOTFE - Free disk encryption software for PCs and PDAs. Version 5.21. Project website: http://sourceforge.net/projects/freeotfe.mirror/, 2014.
[7] Android encryption. https://source.android.com/devices/tech/security/encryption/, 2015.
[8] AOSP: Android open source project. http://source.android.com/, 2015.
[9] Appendix E. LVM Volume Group Metadata. https://access.redhat.com/documentation/en-US/Red Hat Enterprise Linux/6/html/Logical Volume Manager Administration/lvm metadata.html, 2015.
[10] Ext4 Disk Layout. https://ext4.wiki.kernel.org/index.php/Ext4 Disk Layout, 2015.
[11] FAT file system. https://technet.microsoft.com/en-us/library/cc938438.aspx, 2015.
[12] OS X Yosemite: Encrypt the contents of your Mac with FileVault. https://support.apple.com/kb/PH18637?locale=en_US&viewlocale=en_US, 2015.
[13] Pluto-King of the Underworld. http://www.crystalinks.com/plutorome.html, 2015.
[14] Samsung eMMC memory. http://www.samsung.com/global/business/semiconductor/product/flash-emmc/overview, 2015.
[15] Adam Skillen and Mohammad Mannan. MobiFlage: Deniable storage encryption for mobile devices. IEEE Trans. Dependable Sec. Comput., 11(3):224–237, 2014.
[16] R. Anderson, R. Needham, and A. Shamir. The steganographic file system. In Information Hiding, pages 73–82. Springer, 1998.
[17] B. Kaliski. PKCS 5: Password-based cryptography specification, version 2.0. RFC 2898 (informational), 2000.
[18] E.-O. Blass, T. Mayberry, G. Noubir, and K. Onarlioglu. Toward robust hidden volumes using write-only oblivious RAM. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 203–214. ACM, 2014.
[19] R. Canetti, C. Dwork, M. Naor, and R. Ostrovsky. Deniable encryption. In Advances in Cryptology-CRYPTO’97, pages 90–104. Springer, 1997.
[20] R. Coker. Bonnie++ file system benchmark suite. http://www.coker.com.au/bonnie++, 2009.
[21] B. Donohue. Android 5.0 data better protected with new crypto system. https://blog.kaspersky.com/full-disk-encryption-android-5/, 2014.
[22] P. Gasti, G. Ateniese, and M. Blanton. Deniable cloud storage: sharing files via public-key deniability. In Proceedings of the 9th annual ACM workshop on Privacy in the electronic society, pages 31–42. ACM, 2010.
[23] L. M. Grupp, J. D. Davis, and S. Swanson. The bleak future of NAND flash memory. In Proceedings of the 10th USENIX conference on File and Storage Technologies, pages 2–2. USENIX Association, 2012.
[24] J. Assange, R.P. Weinmann, and S. Dreyfus. Rubberhose Filesystem. Archive available at: http://web.archive.org/web/20120716034441/http://marutukku.org/, 2001.
[25] J.-M. Kim and J.-S. Kim. AndroBench: Benchmarking the storage performance of Android-based mobile devices. In Frontiers in Computer Education, pages 667–674. Springer, 2012.
[26] A. Levin. The 10 Dumbest Risks People Take With Their Smartphones. http://blog.credit.com/2013/01/the-10-dumbest-risks-people-take-on-their-smartphones-64384/, 2013.
[27] L. Martin. XTS: A mode of AES for encrypting hard disks. IEEE Security & Privacy, (3):68–69, 2010.
[28] A. D. McDonald and M. G. Kuhn. StegFS: A steganographic file system for Linux. In Information Hiding, pages 463–477. Springer, 2000.
[29] H. Pang, K.-L. Tan, and X. Zhou. StegFS: A steganographic file system. In Data Engineering, 2003. Proceedings. 19th International Conference on, pages 657–667. IEEE, 2003.
[30] T. M. Peters, M. A. Gondree, and Z. N. Peterson. DEFY: A deniable, encrypted file system for log-structured storage. In 22nd Annual Network and Distributed System Security Symposium, NDSS 2015, San Diego, California, USA, February 8-11, 2015.
[31] B. Ragnarsson, G. Toth, H. Bagheri, and W. Minnaard. Desirable features for plausibly deniable encryption. https://www.os3.nl/media/2012-2013/courses/ssn/desirable-features-for-plausibly-deniable-encryption.pdf, 2012.
[32] E. Silverstein. 2013 Was a Year to Remember for NAND eMMC Memory. http://www.mobilitytechzone.com/topics/4g-wirelessevolution/articles/2014/02/28/371835-2013-a-year-remember-nand-emmc-memory.htm, 2014.
[33] A. Skillen and M. Mannan. On implementing deniable storage encryption for mobile devices. In 20th Annual Network and Distributed System Security Symposium, NDSS 2013, San Diego, California, USA, February 24-27, 2013.
[34] J. Thornber. Thin Provisioning Tools. https://github.com/jthornber/thin-provisioning-tools, 2015.
[35] TrueCrypt. Free open source on-the-fly disk encryption software. Version 7.1a. Project website: http://www.truecrypt.org/, 2012.
[36] X. Yu, B. Chen, Z. Wang, B. Chang, W. T. Zhu, and J. Jing. MobiHydra: Pragmatic and multi-level plausibly deniable encryption storage for mobile devices. In Information Security, pages 555–567. Springer, 2014.