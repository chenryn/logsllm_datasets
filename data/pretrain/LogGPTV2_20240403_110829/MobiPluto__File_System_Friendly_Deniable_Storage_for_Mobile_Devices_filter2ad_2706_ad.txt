W
rite
Figure 7: CPU Usage test of Bonnie++ in percent-
age (Seq: Sequential; Rnd: Random, SC: Sequential
Create; RC: Random Create)
forms a two pass random-wipe. Thus, MobiPluto takes twice
as long to encrypt the storage. However, the initialization
is a one-time procedure which will not be repeated. To test
the initialization time, we use a timer to record the time
interval between the moment when the passwords are en-
tered through the vdc command, and the moment when the
screen shows up a user interface for password entering. We
analyze the booting time by reading the logs of the system.
The experimental results of initialization time and booting
time are shown in Table 1.
7. DISCUSSION
Precautions against collusion between the adversary
and carriers/service providers. The collusion between
the adversary and carriers may disclose the existence of hid-
den volumes. If a user connects to external networks when
working in the PDE mode, a malicious carrier may provide
the adversary this user’s connection activity logs. As the
logs from the carrier may be diﬀerent from the logs in the
public mode of the captured device, the adversary may ob-
tain evidence for the existence of PDE mode. Thus, when
working in the PDE mode, we recommend the user open
“Airplane Mode” and remove the SIM card. If the user feels
the necessity to communicate with the external networks,
anonymity should be used. Similarly, to prevent the collu-
sion of the adversary and the service providers, we recom-
mend they use a secondary account with a pseudonym when
388
using any web services in the PDE mode [33].
Block-based ﬁle systems. MobiPluto relies on dm-crypt,
a kernel feature that can encrypt whole disks, partitions,
software RAID volumes, logical volumes, as well as ﬁles.
dm-crypt provides a logical block device interface to the up-
per level, such that any block-based ﬁle systems can be built
on top of it. Flash ﬁle systems (e.g., YAFFS [30]) however,
are speciﬁcally designed to accommodate the special nature
of raw ﬂash memory [23]. They may not be used on top of
block devices, and thus may not be used in MobiPluto. Note
that block devices are broadly used as the internal storage
for mobile devices nowadays. For example, eMMC [32] is
used in a large number of Android phones (e.g., Samsung
Galaxy S 5, Samsung Galaxy Note 4, Google Nexus 6, LG
G3, HTC One M9). Thus, MobiPluto can be used exten-
sively in mobile devices. The raw ﬂash is used as the internal
storage in a few early Android devices like Google Nexus
One. However, it is rarely used in the latest Android de-
vices. Deploying MobiPluto on the raw ﬂash is possible by
modifying the encryption layer (e.g., dm-crypt) to accom-
modate the special characteristics of raw ﬂash (e.g., wear
leveling). This may require moderate engineering work on
dm-crypt without aﬀecting other components of MobiPluto
framework.
Supporting multi-level deniability. There are debates
over the eﬀectiveness of multi-level deniability [33]. Ex-
tending MobiPluto to support multi-level deniability can be
achieved by adapting the multi-level deniability solution in-
troduced in MobiHydra [36]. To support multi-level deni-
ability, each deniability level is corresponding to a diﬀer-
ent hidden volume. Each hidden volume starts at a diﬀer-
ent secret oﬀset, and extends toward the end of the stor-
age medium. The hidden volumes will thus overlap, and
this overlap leads to a situation that the data from diﬀerent
hidden volumes may overwrite each other. This is a com-
mon issue in all the prior PDE solutions [15, 28, 29, 33,
35, 36]. MobiPluto mitigates this “overwrite” issue in the
following aspects: 1) Each secret oﬀset is derived from the
hidden password corresponding to that deniability level [36].
When generating oﬀsets, we usually ensure a minimum sep-
aration distance between oﬀsets [36]. As the data written
to a hidden volume are usually placed sequentially (starts
from the oﬀset), overwrite will not happen until the total
amount of data written to a certain hidden volume exceeds
the minimum separation distance; 2) In practice, the sen-
sitive data stored in each deniability level is usually small
in size; 3) Users will be carefully guided when working in
the PDE mode. Speciﬁcally, when a user is working in the
PDE mode and using a hidden volume, a daemon program
should be used to monitor the storage usage in the corre-
sponding hidden volume, and the user will be notiﬁed if the
total amount of writes to this hidden volume is approaching
the minimum separation distance.
Supporting other operating systems. To use Mobi-
Pluto in other operating systems (mobile or desktop), we
have to ensure that the OS supports both thin provisioning
and block-layer encryption. Thin provisioning helps trans-
form the non-sequential allocation on the thin volume to
sequential allocation on the physical volume. The block-
layer encryption is also required, as MobiPluto needs to be
built on top of encrypted block devices.
Table 1: Initialization time and booting time
Initialization
Android FDE 18min23s±1s
37min2s±2s
MobiPluto
booting time
(wrong pwd)
0.19±0.02s
1.98±0.03s
booting time
(decoy pwd)
0.29±0.02s
1.36±0.02s
booting time
(hidden pwd)
2.35±0.03s
N/A
8. RELATED WORK
Deniable encryption is an emerging security paradigm in
network communications [19], disk storage, cloud storage
[22], etc. In disk storage, most of the existing work relies on
either steganography or hidden volumes to achieve deniabil-
ity.
Steganography-based. Anderson et al. [16] propose the
ﬁrst ﬁle encryption scheme with PDE support. They present
two solutions: Hiding blocks within cover ﬁles and hiding
blocks within random data. However, both solutions are
not suitable for performance-sensitive mobile devices due to
high storage and I/O overheads. StegFS [28] is a deniable-
encryption version of the work of Anderson et al. [16]. It
uses the second approach in [16] to work on Ext2 ﬁle sys-
tem. However, the existence of the modiﬁed Ext2 driver
and the external block table may make the system suspi-
cious.
In addition, the disk usage rate is low due to the
collision avoidance. Pang et al. [29] propose a diﬀerent de-
sign that blocks used by hidden ﬁles are marked as occupied
in the bitmap, and it uses “abandoned blocks” and “dummy
blocks” to achieve deniability. Unfortunately, their design is
disk space ineﬃcient.
Hidden volumes-based. TrueCrypt [35] and FreeOTFE [6]
are two well-known PDE tools relying on hidden volumes.
Compared to TrueCrypt, MobiPluto decouples ﬁle system
from the underlying storage medium, achieving “ﬁle-system
friendly” feature. We summarize the diﬀerences between
TrueCrypt and MobiPluto as follows: 1) TrueCrypt is sen-
sitive to ﬁle systems and its hidden volume can only be de-
ployed on top of the storage using FAT or NTFS [3].
If
the storage medium is using a ﬁle system with distributed
metadata or non-sequential block assignment (e.g., Ext4),
TrueCrypt may not work. However, MobiPluto works with
any block-based ﬁle systems due to its “ﬁle system friendly”
design. 2) TrueCrypt uses a special boot loader to obtain
the user’s password before the OS is loaded, but using such a
special boot loader may make the system suspicious and may
lead to compromise of deniability. To handle the password,
MobiPluto uses thin provisioning and regular FDE which
should be standard in Android. Thus, the deniability oﬀered
by MobiPluto is stronger than that oﬀered by TrueCrypt. 3)
TrueCrypt is not a default module in desktop, and the ad-
versary can tell the diﬀerence between a TrueCrypt volume
and a regular volume (TrueCrypt volume header contains
either random data (i.e., salt) or encrypted ﬁelds, and reg-
ular volume header contains meaningful plaintext ﬁelds), so
he/she can easily identify the existence of TrueCrypt and
may suspect the existence of hidden volumes. This may
lead to compromise of deniability. However, FDE has been
a default module in Android since version 3.0 and the ad-
versary cannot tell the diﬀerence between MobiPluto and
Android FDE by disk analysis (the MobiPluto footer can-
not be diﬀerentiated from FDE footer), so he/she cannot
identify the existence of MobiPluto, which is good for deni-
ability. Mobiﬂage [33, 15] builds the ﬁrst PDE scheme for
mobile devices. It is implemented in two versions: one for
FAT32 ﬁle system in external storage [33], and the other for
Ext4 ﬁle system in internal storage [15]. The FAT32 ver-
sion is not suitable for mobile devices without external stor-
age; the Ext4 version needs to signiﬁcantly modify Ext4 ﬁle
system that introduces a large attack surface against PDE.
MobiHydra [36] improves Mobiﬂage by addressing a new
booting-time attack. In addition, it introduces multi-level
deniability and supports mode switching without rebooting.
Blass et al. [18] present HIVE, a desktop PDE scheme that
can defend against a multiple-snapshot adversary. HIVE re-
lies on write-only oblivious RAM, which suﬀers from a high
performance overhead.
Others. Ragnarsson et al. [31] propose to use thin pro-
visioning to provide deniability. However, their solution
requires signiﬁcant modiﬁcations of thin provisioning.
In
addition, they do not provide any proof-of-concept imple-
mentation. Peters et al. [30] introduce DEFY, a deniable
encrypted ﬁle system based on YAFFS. DEFY is the ﬁrst de-
niable ﬁle system speciﬁcally designed for ﬂash-based, solid-
state drives.
It follows a log-structured design, motivated
by the technical constraints of ﬂash memory.
9. CONCLUSION
In this paper, we have proposed MobiPluto, a ﬁle sys-
tem friendly PDE solution for mobile devices. MobiPluto
achieves the deniability feature as nothing but a “side-eﬀect”
of equipping thin provisioning, which is a well-established
tool in Linux kernel. Most signiﬁcantly, MobiPluto utilizes
thin provisioning to build an additional layer that can trans-
form the non-sequential allocation on the thin volumes to se-
quential allocation on the underlying storage medium. This
renders it feasible to achieve “ﬁle system friendly” PDE us-
ing hidden volumes. We have implemented a prototype of
MobiPluto on a LG Nexus 4 device and our extensive eval-
uations have shown that MobiPluto only introduces a small
performance overhead.
10. ACKNOWLEDGMENTS
We would like to thank our shepherd, Ariel Feldman, and
anonymous ACSAC reviewers for their insightful suggestions
and advice. This work is partially supported by National 973
Program under Award No. 2014CB340603, and Strategy
Pilot Project of Chinese Academy of Sciences under Award
No. XDA06010702. Bo Chen is currently supported by US
ARO grant ARO W911NF-15-1-0576.
11. REFERENCES
[1] LVM Administrator’s Guide. https://www.centos.org/
docs/5/html/Cluster Logical Volume Manager/, 2007.
[2] “partitioning” your Nexus S using LVM.
http://forum.xda-developers.com/nexus-s/general/
howto-partitioning-nexus-s-using-lvm-t1656794, May
2012.
[3] TrueCrypt User’s Guide. https://www.grc.com/misc/
truecrypt/TrueCrypt%20User%20Guide.pdf, 2012.
389
[4] BitLocker Overview. https://technet.microsoft.com/
en-us/library/hh831713.aspx, 2013.
[5] Consider LVM on Android.
http:// forum.cyanogenmod.org/ topic/
4226-has-anyone-considered-lvm-on-android/ , 2013.
[6] FreeOTFE - Free disk encryption software for PCs
and PDAs. version 5.21. Project website:
http:// sourceforge.net/ projects/ freeotfe.mirror/ ,
2014.
[7] Android encryption. https://source.android.com/
devices/tech/security/encryption/, 2015.
[8] AOSP: Android open source project.
http://source.android.com/, 2015.
[9] Appendix E. LVM Volume Group Metadata.
https://access.redhat.com/documentation/en-US/
Red Hat Enterprise Linux/6/html/Logical Volume
Manager Administration/lvm metadata.html, 2015.
[10] Ext4 Disk Layout. https:
//ext4.wiki.kernel.org/index.php/Ext4 Disk Layout,
2015.
[11] FAT ﬁle system. https:
//technet.microsoft.com/en-us/library/cc938438.aspx,
2015.
[12] OS X Yosemite: Encrypt the contents of your Mac
with FileVault. https://support.apple.com/kb/
PH18637?locale=en US&viewlocale=en US, 2015.
[13] Pluto-King of the Underworld.
http://www.crystalinks.com/plutorome.html, 2015.
[14] Samsung eMMC memory.
http://www.samsung.com/global/business/
semiconductor/product/ﬂash-emmc/overview, 2015.
[15] Adam Skillen and Mohammad Mannan. Mobiﬂage:
Deniable storage encryption for mobile devices. IEEE
Trans. Dependable Sec. Comput., 11(3):224–237, 2014.
[16] R. Anderson, R. Needham, and A. Shamir. The
steganographic ﬁle system. In Information Hiding,
pages 73–82. Springer, 1998.
[17] B. Kaliski. PKCS 5: Password-based cryptography
speciﬁcation,version 2.0. RFC 2898 (informational),
2000.
[18] E.-O. Blass, T. Mayberry, G. Noubir, and
K. Onarlioglu. Toward robust hidden volumes using
write-only oblivious RAM. In Proceedings of the 2014
ACM SIGSAC Conference on Computer and
Communications Security, pages 203–214. ACM, 2014.
[19] R. Canetti, C. Dwork, M. Naor, and R. Ostrovsky.
Deniable encryption. In Advances in
Cryptology-CRYPTO’97, pages 90–104. Springer,
1997.
[20] R. Coker. Bonnie++ ﬁle system benchmark suite.
http://www.coker.com.au/bonnie++/, 2009.
[21] B. Donohue. Android 5.0 data better protected with
new crypto system. https:
//blog.kaspersky.com/full-disk-encryption-android-5/,
2014.
[22] P. Gasti, G. Ateniese, and M. Blanton. Deniable cloud
storage: sharing ﬁles via public-key deniability. In
Proceedings of the 9th annual ACM workshop on
Privacy in the electronic society, pages 31–42. ACM,
2010.
[23] L. M. Grupp, J. D. Davis, and S. Swanson. The bleak
future of NAND ﬂash memory. In Proceedings of the
10th USENIX conference on File and Storage
Technologies, pages 2–2. USENIX Association, 2012.
[24] J. Assange, R.P. Weinmann, and S. Dreyfus.
Rubberhose Filesystem. Archive available at:
http:// web.archive.org/ web/ 20120716034441/ http:
// marutukku.org/ , 2001.
[25] J.-M. Kim and J.-S. Kim. AndroBench: Benchmarking
the storage performance of Android-based mobile
devices. In Frontiers in Computer Education, pages
667–674. Springer, 2012.
[26] A. Levin. The 10 Dumbest Risks People Take With
Their Smartphones. http:// blog.credit.com/ 2013/ 01/
the-10-dumbest-risks-people-take-on-the
ir-smartphones-64384/ , 2013.
[27] L. Martin. XTS: A mode of AES for encrypting hard
disks. IEEE Security & Privacy, (3):68–69, 2010.
[28] A. D. McDonald and M. G. Kuhn. StegFS: A
steganographic ﬁle system for Linux. In Information
Hiding, pages 463–477. Springer, 2000.
[29] H. Pang, K.-L. Tan, and X. Zhou. StegFS: A
steganographic ﬁle system. In Data Engineering, 2003.
Proceedings. 19th International Conference on, pages
657–667. IEEE, 2003.
[30] T. M. Peters, M. A. Gondree, and Z. N. Peterson.
DEFY: A deniable, encrypted ﬁle system for
log-structured storage. In 22th Annual Network and
Distributed System Security Symposium, NDSS 2015,
San Diego, California, USA, February 8-11, 2015.
[31] B. Ragnarsson, G. Toth, H. Bagheri, and
W. Minnaard. Desirable features for plausibly deniable
encryption. https:// www.os3.nl/ media/ 2012-2013/
courses/ ssn/ desirable features for plausibly deniable
encryption.pdf , 2012.
[32] E. Silverstein. 2013 Was a Year to Remember for
NAND eMMC Memory.
http://www.mobilitytechzone.com/topics/
4g-wirelessevolution/articles/2014/02/28/
371835-2013-a-year-remember-nand-emmc-memory.
htm, 2014.
[33] A. Skillen and M. Mannan. On implementing deniable
storage encryption for mobile devices. In 20th Annual
Network and Distributed System Security Symposium,
NDSS 2013, San Diego, California, USA, February
24-27, 2013.
[34] J. Thornber. Thin Provisioning Tools.
https://github.com/jthornber/thin-provisioning-tools,
2015.
[35] TrueCrypt. Free open source on-the-ﬂy disk
encryption software.version 7.1a. Project website:
http:// www.truecrypt.org/ , 2012.
[36] X. Yu, B. Chen, Z. Wang, B. Chang, W. T. Zhu, and
J. Jing. MobiHydra: Pragmatic and multi-level
plausibly deniable encryption storage for mobile
devices. In Information Security, pages 555–567.
Springer, 2014.
390