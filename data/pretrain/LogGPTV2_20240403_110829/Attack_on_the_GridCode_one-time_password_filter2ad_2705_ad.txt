We estimate the probability of the structure of a password
using a probabilistic context-free grammar [22]. Here, the
password is modeled as a grammar with variables Ln, Dn,
and Sn for the Latin, digits, and special strings of length
n respectively. A production rule α → β probabilistically
replaces a variable α with a string β of variables (Ln, Dn,
Sn) and terminals (Σ). The distribution over the production
rules is trained using user passwords. For example, the pass-
word “pa$$w0rd” parses as L2S2L1D1L2. We use zero and
ﬁrst-order Markov chains to estimate the probability of non-
terminal to terminal production rules, e.g., L8 → password .
We evaluate how well password entropy reduces the num-
ber of guesses using an English dictionary and the RockYou
password list provided by Matt Weir [22].
For the English dataset, we train on 200,000 words and
test on 11,943 words ranging in length from 6 to 10 char-
acters (average 8.31). Using n = 26 and m = 10, many
passwords can be guessed in a signiﬁcantly reduced number
of tries. On average, each password is found after 533.81
guesses (only 1.91% of the candidate set), and 10.40–13.88%
are discovered after fewer than three incorrect guesses, after
which many accounts are locked. For the RockYou dataset
we trained on 1,000,000 passwords and tested on 8,742 pass-
words. We only select passwords that contained the lower-
case Latin characters or digits, i.e., n = 36, which represents
the majority of passwords3. On average each password is
3Only 3.28% of passwords use letters and numbers, and only
recovered after 650.42 guesses (1.89% of the candidate pass-
words), and 14.06–16.75% are discovered after fewer than
three incorrect guesses. Table 4 lists the cumulative num-
ber of passwords correctly guessed after a given number of
attempts and one known challenge-response pair.
5. SUGGESTIONS
Given the weaknesses discovered in this paper, we consider
the strengths of the GridCode one-time password system
and suggest how to improve its security.
pairs (See Equations 2 and 7).
First, it should be clear what the goal of such a system
is. A secure one-time password system should be secure
against forgery, secure against replay, and secure against
discovering the shared secret given an adversary that can
select the challenge. The main weakness of the GridCode
system stems from an easily (and compactly) invertible hash
function h, and not any of the tunable parameters n, m, k,
r, or ℓ. Increasing or decreasing any of these values will have
a negligible impact on the overall security of the system. To
summarize our ﬁndings:
• n - No impact on random guessing, logarithmic in-
crease in the number of correct pairs, and largely in-
variant to user selected passwords.
• m - Trade oﬀ random guessing for challenge-response
• k - Little-to-no impact. Making k dynamic (changing
corner) will likely add less than 1 bit of entropy and
space complexity.
• r - Depends on user passwords and cognition; no im-
• ℓ - Dominantly negative impact on security.
We also express a bit of skepticism and fear that users
will not maintain high entropy and secure passwords when
using such a system. Users may incorrectly believe the one-
time passwords protect them against brute force attacks, key
loggers, replay, etc., and may opt for lower entropy, easier
to remember (and identify on the grid), passwords. Because
the GridCode system provides little to no protection against
brute force attacks, user passwords could have a detrimental
impact on security overall.
pact on challenge-response pairs.
In our opinion the GridCode system does provide a very
modest amount of protection against key loggers and shoul-
der surﬁng. Key loggers must be updated to include screen
scraping abilities, which are not diﬃcult4, however this does
not prevent phishing attacks. Shoulder surﬁng attacks by
human adversaries are largely mitigated because the state of
the GridCode challenge represents around 42-bits of entropy,
beyond the human limits of 5–9 digits (16.6–29.9 bits) [17].
The main weakness of the GridCode stems from the easily
invertible function h and character independence that allows
an attacker to calculate all preimages and makes storage and
querying the preimages eﬃcient. This allows an adversary to
execute an attack in parallel and make simple inferences on
the set of candidate passwords on a character-by-character
basis. When we view the response as a keyed MAC code we
observe a similarity to the multi-collision attack against the
Merkle-Damg˚ard construction [12].
To address these issues, each character of the user’s pass-
word should not be processed independently. One alterna-
tive is to encode the password as tuples of characters, such
1.20% contain letters and special characters [22]
4Captchas provide a poor solution.
313
English Words
RockYou Dataset
Guesses Passwords Discovered
1
2
3
4
5
10
20
50
100
519
943
1242
1511
1773
2722
3933
5877
7333
(4.43%)
(7.89%)
(10.40%)
(12.65%)
(14.84%)
(22.79%)
(32.93%)
(49.21%)
(61.40%)
Successful Replay Passwords Discovered
761
1275
1658
1970
2288
3336
4643
6618
8025
(6.37%)
(10.68%)
(13.88%)
(16.49%)
(19.16%)
(27.93%)
(38.88%)
(55.41%)
(67.19%)
523
908
1229
1462
1671
2475
3427
4807
5804
(5.98%)
(10.39%)
(14.06%)
(16.72%)
(19.11%)
(28.31%)
(39.20%)
(54.99%)
(66.39%)
Successful Replay
656
1108
1464
1731
1955
2819
3846
5241
6246
(7.50%)
(12.67%)
(16.75%)
(19.80%)
(22.36%)
(32.25%)
(43.99%)
(59.95%)
(71.45%)
Table 4: Cumulative number of passwords discovered after a number of attempts. There are 11,943 English
words 6{10 characters in length, and 8,742 RockYou passwords 5{8 characters in length.
as pairs, triples, etc., and perform the mapping on these tu-
ples. Instead, we propose two alternatives: ﬁrst, the Hopper-
Blum protocol for authenticating an unaided human; and
second, relaxing the unaided constraint to allow the human
to perform aided authentication.
5.1 Hopper-Blum Protocol in the Grid
Hopper and Blum [11] deﬁne the problem of authenti-
cating an unassisted human and introduce (α, β, t)-human
executable authentication, requiring that at least (1 − α) of
the human population can perform the computations un-
aided in t seconds with probability at least (1 − β). They
present a protocol whose security is based on the diﬃculty
of the learning parity with noise (LPN) problem as follows.
A human H and system C share a secret x ∈ {0, 1}k, and
(possibly public) noise parameter η ∈ [0, 1
2 ). C challenges H
with a ∈ {0, 1}k, and H responds with z = a · x ⊗ ν, where
Pr [ν = 1] = η. The human is accepted if a · x = z. The
protocol is repeated j times and the human is authenticated
if accepted in more than (1 − η)j rounds.
We can restrict the shared secret x to be standard user
passwords, and aid the user by performing a·x one-character
at a time, displaying the results in a similar grid-like struc-
ture. However, unlike the GridCode, the response bit de-
pends on the position of each character in the password,
e.g., is ‘a’ the ﬁrst character, second character, etc. Thus,
we need r bits for each character in Φ, one for each position,
bounding password lengths; see Figure 5. The user now re-
turns whether there is an even or odd number of 1s. For
example, assume the password is ‘1234’, the user responds
with 1 ⊗ 0 ⊗ 1 ⊗ 1 = 1, while ‘1324’ is 1 ⊗ 1 ⊗ 1 ⊗ 1 = 0.
This must be repeated j times with a new grid each time,
responding incorrectly η fraction of the time.
The HB protocol is secure against a passive adversary,
but is insecure when an adversary can perform an active
attack, such as selecting the grid. An extended protocol,
HB+ [13], is secure against active adversaries (but not man-
in-the-middle attacks), yet it requires the human to select
their own random k-bit challenges for each round, and re-
member two k-bit shared secret vectors. Given humans are
poor sources of entropy, we do not suggest HB+ as a poten-
tial solution.
The HB protocol (and any derived protocol based on LPN,
such as HB+), may not be secure for such a restricted and
small shared secret space. An algorithm from Blum, Kalai
and Wasserman [3] solves the LPN problem and only re-
quires 2Ω(k/ log k) time and queries. For η = 1
8 and k = 32,
this requires around 217 time and queries. This is compu-
tationally eﬃcient, yet may require too many queries to be
eﬃcient in practice.
A more serious attack against the LPN problem when x
is short is a brute force attack. Here, an adversary only
requires O(k) queries, and searches through all 2k possible
shared secrets ^x ∈ {0, 1}k, selecting the one with the small-
est empirical error as the correct secret (the correct x will
be incorrect for less than η fraction of the O(k) queries).
When k is suﬃciently small, this yields an eﬃcient attack
that may be performed oﬄine. For weak passwords when we
can estimate k ≈ 32, this results in a weak security property,
yet is more robust for longer or stronger passwords. The HB
protocol has been extensively analyzed, and is based on the
hardness of the well studied LPN problem, making it an at-
tractive alternative to authenticating an unaided human. A
major hinderance with the HB protocol is the login times
with repeating the protocol j times, although each round is
eﬃcient for an unaided human given the precomputed grid.
Figure 5: Keypad using the Hopper-Blum protocol.
5.2 Alternatives
For sensitive resources where attacks are expected, we
would recommend using a secure one-time password system
such as the HMAC-based one-time password (HOTP) [19].
HOTP uses HMAC with SHA-1 as a secure psuedo ran-
dom function. Given a shared secret K and a synchro-
nized counter C, HOTP is a truncated HMAC, i.e., Ψ =
trunc(HMAC(K, C)) & 0x7FFFFFFF. Clearly this is not an
easily human-computable authentication code.
An attractive compromise exists in using ubiquitous de-
vices, such as mobile phones or PDAs, to store high entropy
secrets and perform computations beyond most users’ abili-
ties. For example, cellular phones have been used to gener-
ate a MAC for credit card transactions [18] or authenticate
on an untrusted system [15] using a cable, USB, or Blue-
tooth. Recently, Liao et al. [14] propose using QR-Codes
(2D barcodes) to transfer a challenge and response using a
camera on computers and phones. A similar approach was
discussed by Drimer et al. [7]. These solutions do not make
the personal device vulnerable to attack from the untrusted
device a direct connection used in [15] would require.
314
11234100100101110010  First Character  Second Character  Third Character  Fourth Character6. RELATED WORK
In this section we discuss some related work and alterna-
tive OTP systems. A simple OTP is the transaction authen-
tication number (TAN) common with many online banking
systems. TANs are precomputed lists of challenge-response
pairs provided to the user, e.g., from their bank. When a
user wishes to authenticate the bank issues a challenge and
the user must respond with the correct response, and cross
the challenge oﬀ the list. Recently mobile TANs have be-
come popular where the bank will dynamically provide a
response via an outside communication channel, such as a
short message service (SMS) to the user’s mobile phone.
The S/KEY [10] OTP relies on a one-way function h. The
user selects a password P and number i and iterates the hash
function h over P i times, i.e., hi(P ) = h(h(··· h(P )··· )),
which is stored on the server. For each subsequent authen-
tication the user provides the next preimage, e.g., hi−1(P ),
then hi−2(P ), and so on. The user can be authenticated by
verifying the preimage. After i − 1 authentications a new
secret must be selected.
RSA SecureID is a time-synchronized hardware based (al-
though it can be emulated in software), OTP system. The
server and hardware device share both a secret key, e.g.,
128-bits, and an accurate synchronized clock. The password
is a keyed hash of the current time (or the current time and
some other secret such as a counter), and changes every 30
or 60 seconds. While vulnerabilities have been found in the
hash function used [2, 5], it can be replaced with any secure
pseudo-random function.
The Hopper-Blum protocol was discussed in Section 5.1
and HMAC-based one-time passwords (HOTP) were described
in Section 5.2.
7. CONCLUSIONS
In this paper we describe several attacks against the Grid-
Code one-time password authentication system. We illus-
trate how a poor choice of parameters can make a system
more vulnerable to attack than the static passwords it re-
places. Our analysis indicates an adversary requires a small
number challenge-response pairs before the user’s password
may be uniquely identiﬁed. Further, a user’s additional se-
cret K can be identiﬁed using a single challenge-response
with signiﬁcantly better than guessing probability.
Because GridCodes leverage existing user passwords, we
describe a hybrid attack on a challenge-response code that
leverages low entropy user passwords with the signiﬁcantly
reduced search space. Using a simple Markov chain and
probabilistic grammar to order candidate passwords, our
attack can recover 10.4–14.06% of passwords and can au-
thenticate using a replay attack in 13.88–16.75% of cases
using at most three login attempts, before most accounts
are locked. Our analysis indicates other security options,
such as decoy digits, are catalysts for brute force attacks.
The main weakness of the GridCode is the pseudo-random
function that allows an adversary to easily and compactly
ﬁnd all preimages. We describe how to use a more secure
human authentication system, HB, is such a setting.
8. REFERENCES
[1] M. Barot and J. A. de la Pe˜na. Estimating the size of
a union of random subsets of ﬁxed cardinality.
Elemente der Mathematik, 56(4):163–169, 4 2001.
315
[2] A. Biryukov, J. Lano, and B. Preneel. Recent attacks
on alleged securid and their practical implications.
Computers & Security, 2005.
[3] A. Blum, A. Kalai, and H. Wasserman. Noise-tolerant
learning, the parity problem, and the statistical query
model. Journal of the ACM, 50(4), Jul 2003.
[4] W. E. Burr, D. F. Dodson, and W. T. Polk. NIST SP
800-63 Electronic Authentication Guideline. Technical
report, NIST, 2006.
[5] S. Contini and Y. L. Yin. Improved cryptanalysis of
SecurID. Cryptology ePrint Archive, Report 2003/205,
2003.
[6] D. Coopersmith. Another birthday attack. CRYPTO,
1985.
[7] S. Drimer, S. J. Murdoch, and R. Anderson.
Optimised to fail: Card readers for online banking. In
Financial Cryptography, 2009.
[8] L. Ginzberg. User authentication system and method.
United States Patent 7,143,440, SyferLock Technology
Corporation, November 28 2006.
[9] L. Ginzburg, P. Sitar, and G. K. Flanagin. User
authentication system and method. US Patent
7,725,712, SyferLock Technology Corporation, 2010.
[10] N. M. Haller. The S/KEY one-time password system.
In Symposium on Network and Distributed System
Security, 1994.
[11] N. Hopper and M. Blum. Secure human identiﬁcation
protocols. ASIACRYPT, 2001.
[12] A. Joux. Multicollisions in iterated hash functions.
application to cascaded constructions. In M. K.
Franklin, editor, CRYPTO, 2004.
[13] A. Juels and S. Weis. Authenticating pervasive devices
with human protocols. CRYPTO, 2005.
[14] K.-C. Liao, W.-H. Lee, M.-H. Sung, and T.-C. Lin. A
one-time password scheme with QR-code based on
mobile phone. Networked Computing and Advanced
Information Management, 2009.
[15] M. Mannan and P. C. van Oorschot. Using a personal
device to strengthen password authentication from an
untrusted computer. In Financial Cryptography, 2007.
[16] J. L. Massey. Guessing and entropy. International
Symposium on Information Theory, 1994.
[17] G. A. Miller. The magical number seven, plus or
minus two: Some limits on our capacity for processing
information. The Psychological Review, 1956.
[18] I. Molloy, J. Li, and N. Li. Dynamic virtual credit
card numbers. Financial Cryptography, 2007.
[19] D. M’Raihi, M. Bellare, F. Hoornaert, D. Naccache,
and O. Ranen. HOTP: An HMAC-based one-time
password algorithm. RFC 4226, Network Working
Group, December 2005.
[20] A. Narayanan and V. Shmatikov. Fast dictionary
attacks on passwords using time-space tradeoﬀ. CCS,
2005.
[21] M. Weir, S. Aggarwal, M. Collins, and H. Stern.
Testing metrics for password creation policies by
attacking large sets of revealed passwords. CCS, 2010.
[22] M. Weir, S. Aggarwal, B. de Medeiros, and B. Glodek.
Password cracking using probabilistic context-free
grammars. Symposium on Security and Privacy, 2009.