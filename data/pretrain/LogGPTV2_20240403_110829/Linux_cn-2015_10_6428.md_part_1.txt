---
author: Mike Saunders
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7693
date: '2015-10-20 08:00:00'
editorchoice: true
excerpt: 经历了15年的打造，Perl 6 终将在年底与大家见面。我们预先采访了它的作者了解一下新特性。  Larry Wall 是个相当有趣的人。他是编程语言
  Perl 的创造者，这种语言被广泛的誉为将互联网粘在一起的胶水，也由于大量地在各种地方使用非字母的符号被嘲笑为只写语言以难以阅读著称。Larry 本人具有语言学背景，以其介绍
  Perl 未来发展的演讲洋葱的状态（State of the Onion）而闻名。（LCTT 译注：洋葱的状态是 Larry Wall 的年度演讲的主题，洋葱也是
  Perl 基金会的标志。） 在2015年布鲁塞尔的 FOSDEM 上，我们赶上了 Larry，问了问他为什么
fromurl: http://www.linuxvoice.com/interview-larry-wall/
id: 6428
islctt: true
largepic: /data/attachment/album/201510/19/231000ff1l2z1tloo7w8al.jpg
permalink: /article-6428-1.html
pic: /data/attachment/album/201510/19/231000ff1l2z1tloo7w8al.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 经历了15年的打造，Perl 6 终将在年底与大家见面。我们预先采访了它的作者了解一下新特性。  Larry Wall 是个相当有趣的人。他是编程语言
  Perl 的创造者，这种语言被广泛的誉为将互联网粘在一起的胶水，也由于大量地在各种地方使用非字母的符号被嘲笑为只写语言以难以阅读著称。Larry 本人具有语言学背景，以其介绍
  Perl 未来发展的演讲洋葱的状态（State of the Onion）而闻名。（LCTT 译注：洋葱的状态是 Larry Wall 的年度演讲的主题，洋葱也是
  Perl 基金会的标志。） 在2015年布鲁塞尔的 FOSDEM 上，我们赶上了 Larry，问了问他为什么
tags:
- Perl
- Perl 6
- Larry Wall
thumb: false
title: Larry Wall 专访——语言学、Perl 6 的设计和发布
titlepic: false
translator: martin2011qi
updated: '2015-10-20 08:00:00'
---
> 
> 经历了15年的打造，Perl 6 终将在年底与大家见面。我们预先采访了它的作者了解一下新特性。
> 
> 
> 
Larry Wall 是个相当有趣的人。他是编程语言 Perl 的创造者，这种语言被广泛的誉为将互联网粘在一起的胶水，也由于大量地在各种地方使用非字母的符号被嘲笑为‘只写’语言——以难以阅读著称。Larry 本人具有语言学背景，以其介绍 Perl 未来发展的演讲“   洋葱的状态    （    State of the Onion    ） ”而闻名。（LCTT 译注：“洋葱的状态”是 Larry Wall 的年度演讲的主题，洋葱也是 Perl 基金会的标志。）
在2015年布鲁塞尔的 FOSDEM 上，我们赶上了 Larry，问了问他为什么 Perl 6 花了如此长的时间（Perl 5 的发布时间是1994年），了解当项目中的每个人都各执己见时是多么的难以管理，以及他的语言学背景自始至终究竟给 Perl 带来了怎样的影响。做好准备，让我们来领略其中的奥妙……
![](/data/attachment/album/201510/19/231000ff1l2z1tloo7w8al.jpg)
**Linux Voice：你曾经有过计划去寻找世界上某个地方的某种不见经传的语言，然后为它创造书写的文字，但你从未有机会去实现它。如果你能回到过去，你会去做么？**
Larry Wall：你首先得是个年轻人才能搞得定！做这些事需要投入很大的努力和人力，以至于已经不适合那些上了年纪的人了。健康、活力是其中的一部分，同样也因为人们在年轻的时候更容易学习一门新的语言，只有在你学会了语言之后你才能写呀。
我自学了日语十年，由于我的音系学和语音学的训练我能说的比较流利——但要理解别人的意思对我来说还十分困难。所以到了日本我会问路，但我听不懂他们的回答！
通常需要一门语言学习得足够好才能开发一个文字体系，并可以使用这种语言进行少量的交流。在你能够实际推广它和用本土人自己的文化教育他们前，那还需要一些年。最后才可以教授本土人如何以他们的文明书写。
当然如果在语言方面你有帮手 —— 经过别人的提醒我们不再使用“语言线人”来称呼他们了，那样显得我们像是在 CIA 工作的一样！—— 你可以通过他们的帮助来学习外语。他们不是老师，但他们会以另一种方式来启发你学习 —— 当然他们也能教你如何说。他们会拿着一根棍子，指着它说“这是一根棍子”，然后丢掉同时说“棒子掉下去了”。然后，你就可以记下一些东西并将其系统化。
大多数让人们有这样做的动力是翻译圣经。但是这只是其中的一方面；另一方面也是为了文化保护。传教士在这方面臭名昭著，因为人类学家认为人们应该基于自己的文明来做这件事。但有些人注定会改变他们的文化——他们可能是军队、或是商业侵入，如可口可乐或者缝纫机，或传教士。在这三者之间，传教士相对来讲伤害最小的了，如果他们恪守本职的话。
**LV：许多文字系统有本可依，相较而言你的发明就像是格林兰语…**
印第安人照搬字母就发明了他们自己的语言，而且没有在这些字母上施加太多我们给这些字母赋予的涵义，这种做法相当随性。它们只要能够表达出人们的所思所想，使交流顺畅就行。经常是有些 声调语言   （    Tonal language    ） 使用的是西方文字拼写，并尽可能的使用拉丁文的字符变化，然后用重音符或数字标注出音调。
在你开始学习如何使用语音和语调表示之后，你也开始变得迷糊——或者你的书写就不如从前准确。或者你对话的时候像在讲英文，但发音开始无法匹配拼写。
**LV：当你在开发 Perl 的时候，你的语言学背景会不会使你认为：“这对程序设计语言真的非常重要”？**
LW：我在人们是如何使用语言上想了很多。在现实的语言中，你有一套名词、动词和形容词的体系，并且你知道这些单词的词性。在现实的自然语言中，你时常将一个单词放到不同的位置。我所学的语言学理论也被称为 法位学   （    phoenetic    ） ，它解释了这些在自然语言中工作的原理 —— 也就是有些你当做名词的东西，有时候你可以将它用作动词，并且人们总是这样做。
你能很好的将任何单词放在任何位置而进行沟通。我比较喜欢的例子是将一个整句用作为一个形容词。这句话会是这样的：“我不喜欢你的[我可以用任何东西来取代这个形容词的]态度”！
所以自然语言非常灵活，因为聆听者非常聪明 —— 至少，相对于电脑而言 —— 你相信他们会理解你最想表达的意思，即使存在歧义。当然对电脑而言，你必须保证歧义不大。
> 
> “在 Perl 6 中，我们试图让电脑更准确的了解我们。”
> 
> 
> 
可以说在 Perl 1到5上，我们针对歧义方面处理做得还不够。有时电脑会在不应该的时候迷惑。在 Perl 6上，我们找了许多方法，使得电脑对你所说的话能更准确的理解，就算用户并不清楚这底是字符串还是数字，电脑也能准确的知道它的类型。我们找到了内部以强类型存储，而仍然可以无视类型的“以此即彼”的方法。
![](/data/attachment/album/201510/19/231001t9t9r6z92l08s9zb.jpg)
**LV：Perl 被视作互联网上的“ 胶水   （    glue    ） ”语言已久，能将点点滴滴组合在一起。在你看来 Perl 6 的发布是否符合当前用户的需要，或者旨在招揽更多新用户，能使它重获新生吗？**
LW：最初的设想是为 Perl 程序员带来更好的 Perl。但在看到了 Perl 5 上的不足后，很明显改掉这些不足会使 Perl 6更易用，就像我在讨论中提到过 —— 类似于 [托尔金（J. R. R. Tolkien） 在《指环王》前言中谈到的适用性一样](http://tinyurl.com/nhpr8g2)。
重点是“简单的东西应该简单，而困难的东西应该可以实现”。让我们回顾一下，在 Perl 2和3之间的那段时间。在 Perl 2上我们不能处理二进制数据或嵌入的 null 值 —— 只支持 C 语言风格的字符串。我曾说过“Perl 只是文本处理语言 —— 在文本处理语言里你并不需要这些功能”。
但当时发生了一大堆的问题，因为大多数的文本中会包含少量的二进制数据 —— 如 网络地址   （    network addresses    ） 及类似的东西。你使用二进制数据打开套接字，然后处理文本。所以通过支持二进制数据，语言的 适用性   （    applicability    ） 翻了一倍。
这让我们开始探讨在语言中什么应该简单。现在的 Perl 中有一条原则，是我们偷师了 哈夫曼编码   （    Huffman coding    ） 的做法，它在位编码系统中为字符采取了不同的尺寸，常用的字符占用的位数较少，不常用的字符占用的位数更多。