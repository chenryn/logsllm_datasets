title:Analyzing and Detecting Malicious Flash Advertisements
author:Sean Ford and
Marco Cova and
Christopher Kruegel and
Giovanni Vigna
Analyzing and Detecting Malicious Flash Advertisements
Sean Ford, Marco Cova, Christopher Kruegel, and Giovanni Vigna
Department of Computer Science
University of California, Santa Barbara
Santa Barbara, United States
{odo,marco,chris,vigna}@cs.ucsb.edu
Abstract—The amount of dynamic content on the web has
been steadily increasing. Scripting languages such as JavaScript
and browser extensions such as Adobe’s Flash have been
instrumental in creating web-based interfaces that are similar
to those of traditional applications. Dynamic content has also
become popular in advertising, where Flash is used to create
rich, interactive ads that are displayed on hundreds of millions
of computers per day. Unfortunately, the success of Flash-
based advertisements and applications attracted the attention
of malware authors, who started to leverage Flash to deliver
attacks through advertising networks. This paper presents a
novel approach whose goal
is to automate the analysis of
Flash content to identify malicious behavior. We designed and
implemented a tool based on the approach, and we tested it on
a large corpus of real-world Flash advertisements. The results
show that our tool is able to reliably detect malicious Flash
ads with limited false positives. We made our tool available
publicly and it is routinely used by thousands of users.
I. INTRODUCTION
Adobe Flash has had an enormous impact on the growth
of the web in recent years. Sites such as YouTube use it
to serve hundreds of millions of videos to users daily [1],
and the versatility of Flash has even been utilized to create
full motion pictures such as Waltz with Bashir. Flash was
created by Macromedia in 1996 to ease the creation of
animation on the web. Later, advanced scripting capabilities
were added, making it a ﬂexible environment to run exter-
nal code on client computers and create dynamic content.
The Flash scripting language, called ActionScript,
is an
ECMAScript-compliant language, which makes it closely
related to JavaScript.
One of the areas where Flash has gained popularity is the
display of advertisements. Flash provides advertisers with
the ability to create ads with full animation, sound, and the
ability to interact with the user. Moreover, advertisers are
assured that their Flash advertisements will be accessible to
a large audience due to Flash’s market penetration of nearly
99% [2]. This popularity, unfortunately, makes Flash also a
worthwhile target when it comes to malicious attacks on the
Internet. Numerous vulnerabilities have been discovered in
the Adobe Flash Player (CVE-2006-3311, CVE-2007-0071,
CVE-2007-6019, CVE-2008-5499, CVE-2009-0520, CVE-
2009-1866) that could possibly be exploited by attackers
to execute arbitrary code. In addition, Flash can be used
to forcibly direct victims to sites that host phishing and
drive-by download attacks. Therefore, it is not surprising
that criminals started to distribute malicious Flash adver-
tisements, often known as “malvertisements.”
Typically, malvertisements are used to download and
install malware on a victim’s machine. This malware turns
the compromised machine into a member of a botnet, which
is then used to send spam, execute denial of service attacks,
or steal sensitive user information [3]. Malicious Flash
advertisements use a plethora of tricks to evade detection,
and, as a result, they continuously make their way onto live
advertising networks, where they have the potential to infect
millions of users.
Manually examining Flash advertisements for malicious
behavior is infeasible given the volume of advertisements
that are produced, and current publicly-available tools to
analyze Flash malicious content are unfortunately not sufﬁ-
cient. As a consequence, malicious Flash advertisements are
routinely distributed. In April 2009, nine incidents of Flash-
based malicious advertisements affected major web sites
such as guardian.co.uk and perezhilton.com (both appear on
the Alexa Top 500 Global Sites list.) [4] [5]
The current situation motivates the need for improved
techniques to identify malicious Flash applications, and, in
particular, advertisements. This paper describes our work
on a system to detect malicious Flash advertisements and
other Flash-based exploits. Our approach uses a combination
of dynamic and static analysis to determine the malicious
nature of a Flash ﬁle, instead of relying purely on static
signatures. Our contributions are:
• We performed an in-depth analysis of the characteristics
and inner workings of malicious Flash advertisements;
to detect
• We designed a system, called OdoSwiff,
malicious Flash advertisements and applications;
Table I: Flash, ActionScript and ActionScript Virtual Ma-
chine versions.
Flash Version
5
6
7
8
9
10
ActionScript
1.0
2.0
Virtual Machine
1
3.0
2
static function search(searchTerm)
{
var searchURL = "http://www"
+ ".google.com/search?q=";
getURL(searchURL
+ searchTerm,"_target");
}
function (reg2=’searchTerm’) (reg1=’this’)
push ’http://www.google.com/search?q=’
setRegister reg3
pop
push reg3, r:searchTerm
add
push ’_target’
getURL2
end
Figure 2: An example ActionScript 2.0 function with the
corresponding ActionScript bytecode instructions, called ac-
tions.
The tags that contain ActionScript code, such as the
DoInitAction and DoAction tags, play an integral part in
creating a fully interactive Flash application. In particular,
these tags contain a list of actions, where each action is an
operation in ActionScript bytecode. ActionScript bytecode is
a stack-based language, and actions range from simple stack
operations like push, pop, and mathematical operations, to
more complex actions such as method creation and invoca-
tion, URL requests, etc. A virtual machine contained within
the Flash player is responsible for executing ActionScript
bytecode. There have been several releases of ActionScript
since the creation of Flash. Table I outlines the relationship
between Flash, ActionScript, and ActionScript virtual ma-
chine versions. An example ActionScript 2.0 function and
the corresponding compiled code using low level Action-
Script actions is shown in Figure 2.
A. Anatomy of an Attack
As mentioned previously, Flash is often used to create
Flash-based advertisements that perform malicious actions.
A real example of the malicious activity of one such Flash-
based malicious advertisement is discussed hereinafter.
Consider a user with a Flash-capable web browser who
visits one of her favorite sites. This site uses advertisements
to obtain a steady revenue stream, and it contains an embed-
Figure 1: Example Flash ﬁle structure.
• We conducted a preliminary study to quantify how
widespread the problem of malicious Flash advertise-
ments is by crawling the Internet looking for malicious
behavior.
The rest of this paper is structured as follows. In Section II
we present an overview of Flash-based malware. Then, in
Section III we provide a description of our system to detect
malicious Flash applications and advertisements. Section IV
contains an evaluation of our tool. Then, Section V discusses
related work. Finally, Section VI brieﬂy concludes.
II. FLASH BASED MALWARE
Adobe Flash ﬁles (often called swiff ﬁles due to their
.swf ﬁle extension) use a binary ﬁle format and require
a player in order to be displayed to the user. The Flash
player generally comes in the form of a web browser plugin,
which is used to display Flash ﬁles embedded in web pages.
However, there is also a standalone player that can execute
Flash ﬁles without the need for a web browser.
Flash ﬁles [6] start with a header that contains basic
meta-information, such as a magic number, the compression
status, the Flash version, and the ﬁle size. A list of data
structures, called tags, immediately follows the header. Each
tag contains a tag type and a size ﬁeld followed by binary
data whose format is dictated by the tag type. These tags
make up the bulk of a Flash ﬁle and contain all the data
it may need during execution, such as images, sounds, text,
and ActionScript code. An example Flash ﬁle structure is
displayed in Figure 1.
!"#$%&’(#)(*+#,-.&/012(*3&-$4516*($$()3&7(*$-583&!-"(&9-:(&;#,6(?&=9-:(?&=@-8#*>&)#A#?;#,6(?&=9-:(?&=@-8#*>&)#A#?;#,6(?&=9-:(?&=@-8#*>&)#A#?;#,6(?&=9-:(?&=@-8#*>&)#A#?;#,6(?&=9-:(?&=@-8#*>&)#A#?var thisdt : Date = new Date();
var rundt : Date = new Date(2009,4,30);
var d : Date = new Date();
var utcOffset = -d.getTimezoneOffset() / 60;
if(thisdt.getTime() < rundt.getTime()) {
if( utcOffset == 2
//halt execution
}
Figure 3: The malicious Flash advertisement ﬁrst checks an
activation date to determine if its malicious code should be
executed.
}
|| utcOffset == 3
|| utcOffset == 4
|| utcOffset == 5
|| utcOffset == 6
|| utcOffset == 7) {
//halt execution
ded resource with a reference to a malicious advertisement.
This advertisement is hosted by a third-party network, such
as DoubleClick. The web page loads and makes a request to
the advertising network, asking for the advertisement to be
displayed. The network determines that the user’s browser
has a Flash plugin installed and sends back the relevant
code to the browser to trigger the display of the Flash
advertisement.
More precisely, the web browser receives some code from
the advertisement network whose task is to download the
Flash ﬁle containing the actual advertisement. When the
download is completed, the Flash ﬁle is given to the Adobe
Flash plugin to be executed. The ﬁle contains a simple
animation advertising a popular social networking site in
addition to executable ActionScript 2.0 code. Unfortunately,
the advertisement also contains malicious code that attempts
to redirect the user’s browser to a phishing site while taking
active measures to evade detection, which will be described
later in more detail. The animation is displayed within the
web browser, while the Flash player begins to execute the
ActionScript code.
One of the ﬁrst tasks of the malicious ActionScript code,
shown in Figure 3, is to determine if its activation date of
2009-04-30 has been reached yet. Activation dates are often
used as an effective method of delaying malicious activity
until the advertisement has been successfully deployed on
the advertising network. The Flash advertisement is submit-
ted by the criminals to the advertising network before the
activation date is reached, so that internal manual checks of
the advertisement will not show any malicious behavior.
If the activation date has passed, the malicious adver-
tisement
then queries Date.getTimezoneOffset to
grab the user’s time zone. It then compares this time zone
with those contained in an internally-stored list, and,
if
any match is found,
then the ActionScript execution is
halted. This is done to prevent the malicious advertisement
from attacking users in speciﬁc geographic areas. This
advertisement happens to contain time zones that correspond
to Eastern Europe, India, and parts of Russia. Users from
these locations will not experience the malicious redirect
Figure 4: ActionScript 2.0 code to check the user’s time
zone to see if the malicious behavior should be disabled.
var domains : Array = new Array("bug.","corp.","api.",
"admin","rightmedia","content.yield","api.yield",
"doubleclick");
var url : String = _root._url;
if(url.substring(0,7) != "http://") {
//halt execution
}
url = url.split("http://").join("");
url = url.split("www.").join("");
for(var i=0; i<8; i++) {
if(url.substring(0,domains[i].length)
== domains[i]) {
//halt execution
}
}
Figure 5: The malicious behavior in the advertisement can
be disabled depending on where the ad is served from.
contained in the advertisement even if the activation date
has been reached. The ActionScript 2.0 code to accomplish
the time zone check is shown in Figure 4.
In the next step, shown in Figure 5, the advertisement
compares the domain name from which it was served with
respect to an internally-stored blacklist. The blacklist for
this advertisement contains doubleclick, api.yield,
content.yield, rightmedia, admin, api., corp.,
and bug. If the domain that served the advertisement begins
with any of these items, then the malicious behavior is
disabled. These domain fragments may represent adver-
tisement networks on which the malware author does not
want to run the advertisement, or, possibly, internal domains
that advertising networks use to test or review submitted
Flash advertisements. Therefore, in these cases the malicious
behavior is disabled to avoid detection.
Another method that malicious advertisements use to
evade detection is represented by Flash Shared Objects,
shown in Figure 6. These objects operate much like HTTP
cookies and allow Flash applications to store information
on the user’s computer to be retrieved at a later time. In
var SO = SharedObject.getLocal("aGllcmFyY2hieQ%3D%3D");
if(SO.data.e == undefined) {
var LV : LoadVars = new LoadVars();
SO.data.e = 0;
}
var e : Number = SO.data.e;
var thisdt : Date = new Date();
SO.data.e = thisdt.getTime() + 90000000;
SO.flush();
if(thisdt.getTime() < e) {
//halt execution
}
Figure 6: The malicious Flash advertisement uses Shared
Objects to disable the malicious code if it has been executed
recently.
our example, the malicious advertisement attempts to read
a Shared Object called aGllcmFyY2hieQ%3D%3D. This
Shared Object contains a timestamp that is used to determine
if the malicious redirect has already been executed on the
victim’s computer within the past day. If this is the case,
then the malicious behavior is disabled. Otherwise, if either