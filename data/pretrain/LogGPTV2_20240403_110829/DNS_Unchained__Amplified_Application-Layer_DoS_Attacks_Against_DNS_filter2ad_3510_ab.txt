same zone, the ANS can provide multiple CNAMEs in one answer, by already
providing the next records in the chain. By chaining CNAME records between two
diﬀerent ANSs, i.e., by alternating between them, an ANS can only know the
next CNAME entry in the chain.
DNS Chaining Attack. The possibility to chain DNS queries via CNAME RRs
opens a new form of application-layer DoS attack. Let an attacker set up two
domains on diﬀerent ANSs. The ﬁrst domain will be hosted by the target ANS,
and the second (or optionally further) domain(s) by some intermediary ANS(s).
The zones are conﬁgured to contain long CNAME chains alternating between
both domains. An example can be found in Listing 1, where a chain ping-pongs
between the target and an intermediary ANS, until the record with preﬁx i. If
an attacker now sends a single name lookup to query for the record at the start
of the chain, the resolver has to follow all chain elements to retrieve the ﬁnal
RR. A large ﬁnal RR, such as the TXT, additionally targets the ANS’s upstream
bandwidth. Figure 1 shows the queries sent between the attacker A, a resolver
R, and both ANSs. The dashed arrows represent the CNAME pointers between
the diﬀerent domains, while the circled numbers ( 1 — 3 ) represent the order in
which they are resolved. The attacker queries the ﬁrst chain element and forces
the resolver to query the target ANS repeatedly.
This provides severe ampliﬁcation, as a single request by the attacker results
in several requests towards the target ANS. For each query by the attacker
N queries are sent by the resolver, where N is equal to the minimum of the
chain length and a resolver dependent limit. The chain length is controllable by
the attacker and eﬀectively unlimited, but resolver implementations limit the
maximum recursion depth (see Sect. 4.2). The ampliﬁcation, as observed by the
target ANS, is (cid:3)N/2(cid:4), as every second chain record is served by the target ANS.
For illustrative purposes, Fig. 1 just shows a single resolver. In practice, an
attacker would likely aim to spread the attack requests to thousands of resolvers,
that is, not to overload a single resolver—recall that in our threat model the ANS
is the victim (not the resolver). Furthermore, given two domains, an attacker can
DNS Unchained: Ampliﬁed Application-Layer DoS Attacks
145
Fig. 1. Attacker A uses resolver R to attack the target ANS. The dashed arrows rep-
resent the CNAME pointers between the domain. 1 – 3 show the order of CNAME records
in the chain. The setup is according to Listing 1.
easily create multiple chains, e.g., by using distinct subdomains for each chain.
The number of chains is bound (if at all) only by the number of subdomains
supported by the target ANS.
There are no strict requirements for the intermediary ANS. In general, inter-
mediary ANSs can be hosted by a hosting provider, self-hosted by the attacker, or
even distributed between multiple hosters. The only exception is that the inter-
mediary and target ANS should be not the same server. Some ANSs will follow
CNAME chains if the ANS is authoritative for all domains in the chain. Requiring
at least one dedicated intermediary ANSs ensures that only one answer can be
returned. If the ANS is conﬁgured to only return one CNAME record, the same
ANS can be used, doubling the ampliﬁcation achieved with this attack. On the
other extreme, it is perfectly possible to use multiple intermediate ANS, as long
as every second element in the chain still points to the target ANS. Distributing
the intermediary ANS will increase the reliability and reduce the load for each
intermediary ANS, and raise the complexity in preventing the attack.
While the requirements for this attack may seem high, we note that attackers
are already known to use complex setups for their operations. One example
regarding DNS are fast-ﬂux networks [16] which provide resilience against law-
enforcement take-downs and work similar to CDNs. Attackers use fast changing
DNS entries to distribute traﬃc across sometimes hundreds of machines.
3.3 Leveraging DNS Caching
DNS resolvers rely on record caching, such that queries for the same domain
do not require additional recursive resolution if the resolver has those records
cached. Technically, each resource record contains a Time-to-Live (TTL) value,
which speciﬁes how long it may be cached by a resolver, i.e., be answered without
querying the ANS. Caching has a large inﬂuence on the DNS chaining attack, as
it determines how frequent resolvers will query target and intermediary ANSs.
An attacker would aim for two compatible goals. On the one hand, given an
attack time span, the target ANS should receive as many queries as possible.
This means that caching for those records that are delivered by the target ANS
should be ideally avoided. On the other hand, an attacker wants to minimize the
146
J. Bushart and C. Rossow
number of queries sent to the intermediary ANS, as they would otherwise slow
down the overall attack. We discuss both parts individually in the following.
Avoiding Caching at Target ANS: Determining the overall impact on ANS
requires an understanding how often each resolver can be used by the attacker
during an attack. That is, if all records of a chain are cached, the resolver would
not query the target ANS. To solve this problem, attackers can disable caching for
records hosted by the target ANS. Specifying a TTL value of zero indicates that
the resource should never be cached [32, Sect. 3.2.1]. We assume that resolvers
honor a TTL of zero, i.e., do not cache such entries. We evaluate this assumption
in Sect. 4.1.
However, we have observed that resolvers implement additional micro-
caching strategies to further reduce the number of outgoing queries. A strategy
we have typically observed is that resolvers coalesce multiple identical incoming
or outgoing requests. If a resolver detects that a given RR is not in the cache, it
starts requesting the data from the ANS. Queries by other clients for the same
RR may arrive in the meantime. A micro-caching resolver can answer all out-
standing client queries at once when the authoritative answer arrives, even if the
RR would not normally be cached (i.e., TTL = 0). In our context, such micro-
caching might occur if the resolver receives a query for a CNAME record of which
the target is not cached, but another query for the same target is already out-
standing. Coalescing identical queries thus results in fewer outgoing queries to
the ANSs, because a single authoritative reply is used to answer multiple client
queries. This reduces the ampliﬁcation caused by the resolver. Micro-caching
is a defense mechanism against cache poisoning attacks which make use of the
“birthday attack”, such as the Kaminsky attack [7,18].
We thus deﬁne the per-resolver query frequency as the maximum number of
queries per second an attacker can send to a given resolver without any query
being answered by caching or micro-caching. It equals the optimal attack speed:
Fewer queries would not use the resolver’s full ampliﬁcation potential, more
queries would waste attack bandwidth.
Leveraging Caching at Intermediary ANSs: Recall that every other chain
element points to a record hosted by an intermediary ANS. In principle, this
would require resolvers to query the intermediary ANS for every second step in
the chain, which signiﬁcantly reduces the frequency in which the target ANS
receives queries. However, those records do not change, so we can leverage
caching to increase this frequency. By setting a non-zero TTL for the records
hosted by the intermediary ANSs, the resolvers only have to fetch the records
on the ﬁrst query of the chain. After the caches are “warmed up”, the resolvers
will only fetch the records from the target ANS. The frequency of attack queries
is thus largely determined by the round trip time (RTT) between resolver and
target ANS. In contrast, the RTT between resolver and intermediary ANS is
irrelevant.
DNS Unchained: Ampliﬁed Application-Layer DoS Attacks
147
3.4 Attack Variant with DNAME Resource Records
One drawback of the CNAME-based attack is, that it requires deﬁnitions of
records per chain. If an attacker aims to abuse multiple chains in parallel
(e.g., to increase the per-resolver query frequency), they have to deﬁne dozens
of CNAME records. One slight variation of the CNAME-based attack thus uses
DNAME records. Using DNAME resource records [5,43] allows arbitrary many sub-
domains for the chain with only a single entry. Conceptually, DNAMEs are simi-
lar to CNAMEs and are created like CNAME records, e.g., “www.target-ans.com.
IN DNAME intermediary.org.”. The diﬀerence is that DNAME records allow the
ANS to replace the occurrence of the owner (left-hand side) by the target (right-
hand side) for all queries to a subdomain of the owner. For example, a query
to “a.www.target-ans.com.” would be rewritten to “a.intermediary.org.”
with the given rule.
Technically, the answer for a DNAME resource record does not only contain
the DNAME resource records. For backwards compatibility, ANSs will create a
synthetic CNAME resource record for the exact query domain. Resolvers can also
directly support DNAME resource records, providing a better user experience. How-
ever, resolvers that lack support for DNAME records fall back using the CNAME
records. An attacker can abuse those resolvers to query chains deﬁned with
DNAME entries, for simulating an arbitrary number of chains and avoid caching.
Those resolvers have to use the synthetic CNAME records to follow the chain.
Because the records are synthetically created for the exact query domain, they
are indistinguishable from “normal” CNAME records in a zone. This forces the
resolver to query the ANS for each newly observed subdomain.
Resolvers that support DNAMEs can use a cached entry to directly answer
queries for all subdomains, even if the exact subdomain has never been observed.
This improves the resolver’s performance, as only one cache entry has to be
stored (compared to many CNAMEs) and authoritative queries only need to be
issued, if the DNAME entry expires (compared to once for each new subdomain).
This eﬀectively limits the number of simulated chains to one, which falls back to
the same properties as the classic CNAME-based chain. Resolvers without DNAME
support can be queried as often as permitted by the resolver’s resources, without
paying attention to any macro- or micro-caching. Furthermore, handling DNAME
queries consumes more resources at the target ANS, as resolvers usually create
and send synthetic CNAME records in addition to DNAME records.
4 Evaluation
In the following we analyze the behavior of resolvers, with Internet-wide mea-
surements, and analyze four selected implementations in more detail. We will
use those measurements to determine the per-resolver query frequency, possible
ampliﬁcation factor, and overall impact, focusing only on the CNAME variant.
148
J. Bushart and C. Rossow
In our manual analysis we focus on the four resolvers Bind1 9.10.5,Unbound2
1.6.3, PowerDNS Recursor3 4.0.6, and Knot Resolver4 1.3.2, because they are
popular, open source, actively maintained, and backed by DNS operators. All
tests were performed in the default conﬁguration, as provided by Fedora 25. For
the measurements, we set up two virtual machines (VMs). The ﬁrst VM hosts the
four resolvers, while the second VM hosts an ANS. We conﬁgured the resolvers to
use the ANS for all queries, by setting corresponding root hints and conﬁguring
the ANS accordingly. Note that in this minimal setup the second VM hosts both
the target and intermediary ANS. We thus changed Bind’s conﬁguration such
that it does not follow CNAME chains5, to simulate two independent ANSs.
We scanned the Internet via Zmap [11] and a custom DNS module, following
their recommended scanning guidelines. Networks could opt-out from our scans.
We encoded the IP address of the scan target into each DNS query, which allows
us to correlate the scanned IP address with the traﬃc captured at our ANS.
We used PowerDNS with a custom back-end as the ANS authoritative for the
domains we scanned for. PowerDNS will never follow CNAME chains and only
return a single CNAME record, simulating the two zone setup.
4.1 Caching
So far we assumed that resolvers honor non-cachable DNS resource records (i.e.,
TTL = 0). We evaluate this assumption and study the micro-caching strategies
by diﬀerent DNS resolver implementations.
First, we want to get a general understanding how the diﬀerent implementa-
tions handle non-cacheable responses. We conﬁgured our ANS to serve a short
CNAME chain alternating between two zones. All RRs in the chain are served with
TTL=0. We repeatedly issued the same query to the resolver and observed the
responses. Bind, Unbound, and PowerDNS do not cache the response and served
it with a TTL of zero. Knot serves the record with a TTL of ﬁve, but also does
not cache the response.
To test the micro-caching behavior, we sent multiple queries to the resolvers
for the same domain with slight delays between them, and observed how frequent
resolvers queried the ANS. The delay was chosen such that the resolver has
forwarded the previous query to the ANS, but not yet received the response.
This happens if queries arrive faster than the RTT between resolver and target
(RT TRT ). We delayed DNS responses from the authoritative VM to the resolvers,
to simulate the eﬀect of diﬀerent values for RT TRT . We observed micro-caching
for identical incoming or outgoing queries for all tested resolvers. Eﬀectively,
this limits an attacker to start a chain once per RT TRT . The RTT is measured
between resolver and target ANS, because resource records of the intermediary
ANS can be cached by the resolver and thus do not limit the lookup speed.
1 https://www.isc.org/downloads/bind/.
2 https://www.unbound.net/.
3 https://www.powerdns.com/recursor.html.
4 https://www.knot-resolver.cz/.
5 Conﬁg option additional-from-auth with two zones.
DNS Unchained: Ampliﬁed Application-Layer DoS Attacks
149
Next, we observe the behavior for longer delays. We delayed the second query
until the resolver processed the response of the ﬁrst queried (and hence started
to resolve the second chain element). This simulates queries which arrive RT TRT
after the previous query arrived. PowerDNS and Knot fully honor the no-caching
TTL and perform a full lookup for all queries. Bind performs one full lookup per
second, then only issues one query to the ﬁrst element of the chain per additional
client query. Similarly, Unbound only performs one full lookup per second, but
then issues one query to the last element of the chain, which is not a CNAME RR.
Summarizing the result, the per-resolver query frequency for PowerDNS and
RT TRT . As each chain has distinct domains, micro-caching is irrelevant
Knot is #chains
across chains. Bind and Unbound can be queried at most for #chains
1s+RT TRT . Realis-
tically, the attacker does not know when the resolver’s internal clock ticks over
to the next second. Before starting the next query, the attacker has to ensure a
full second passes after the record was cached, which happens RT TRT after the
query is received by the resolver. Thus at 1s + RT TRT the record is guaranteed
to have expired. Querying more frequently reduces ampliﬁcation.
We analyzed the code of Bind and Unbound to understand why they only
issue one query per second. Both use a time value, which is rounded to seconds
for all cache operations, explaining the observed cache invalidation once per
second. Bind special cases the ﬁrst CNAME RR in a query and always perform
the authoritative lookup, even when it was fetched from cache. Unbound’s cache
inserts referral resource records, which CNAMEs are one variant of, regardless of
the TTL, but not the last chain element.
Internet Measurements. While all
locally tested resolvers honor non-
cacheable RRs, resolvers deployed on the Internet may behave diﬀerently. To
assess this, we performed a full Internet scan querying for a wildcard A RR with
a TTL=0 hosted by our ANS. The queried domain encodes the scan target’s IP
address, which allows us to (i) ensure that all records are fetched from our ANS
and are not cached and (ii) match the scan targets with the queries observed at
the ANS. All responses are recorded and ﬁltered to remove domains which do
not belong to our test. Figure 2 shows a (simpliﬁed) diagram of the connections
between our scanner, resolvers, and our ANS. The dashed gray lines mark the