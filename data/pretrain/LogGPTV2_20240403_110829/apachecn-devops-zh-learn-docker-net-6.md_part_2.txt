  filterChain *iptables.ChainInfo
  networks    map[string]*bridgeNetwork
  store       datastore.DataStore
  sync.Mutex
}
```
网桥驱动程序中执行的一些操作:
*   配置 IPTables
*   管理 IP 转发
*   管理端口映射
*   启用桥接网络过滤
*   在网桥上设置 IPv4 和 IPv6
下图显示了如何使用`docker0`和`veth`对将端点与`docker0`桥连接来表示网络:
![Bridge driver](img/00050.jpeg)
## 叠加网络驱动
libnetwork 中的覆盖网络使用 VXLan 和一个 Linux 桥来创建一个覆盖的地址空间。它支持多主机网络:
```
const (
  networkType  = "overlay"
  vethPrefix   = "veth"
  vethLen      = 7
  vxlanIDStart = 256
  vxlanIDEnd   = 1000
  vxlanPort    = 4789
  vxlanVethMTU = 1450
)
type driver struct {
  eventCh      chan serf.Event
  notifyCh     chan ovNotify
  exitCh       chan chan struct{}
  bindAddress  string
  neighIP      string
  config       map[string]interface{}
  peerDb       peerNetworkMap
  serfInstance *serf.Serf
  networks     networkTable
  store        datastore.DataStore
  ipAllocator  *idm.Idm
  vxlanIdm     *idm.Idm
  once         sync.Once
  joinOnce     sync.Once
  sync.Mutex
}
```
# 使用覆盖网络与游民
叠加网络是在两个容器之间创建的，VXLan 隧道通过桥梁连接容器。
## 覆盖网络部署漫游设置
这个设置已经使用 Docker 实验版本进行了部署，该版本会定期更新，可能不支持某些功能:
1.  克隆官方 libnetwork 存储库并切换到`docs`文件夹:
    ```
    $ git clone
    $ cd
     libnetwork/docs
    ```
2.  流浪脚本预先存在于存储库中；我们将使用以下命令为 Docker 覆盖网络驱动程序测试部署三节点设置:
    ```
    $ vagrant up
    Bringing machine 'consul-server' up with 'virtualbox' provider...
    Bringing machine 'net-1' up with 'virtualbox' provider...
    Bringing machine 'net-2' up with 'virtualbox' provider...
    ==> consul-server: Box 'ubuntu/trusty64' could not be found.
    Attempting to find and install...
     consul-server: Box Provider: virtualbox
     consul-server: Box Version: >= 0
    ==> consul-server: Loading metadata for box 'ubuntu/trusty64'
     consul-server: URL: https://atlas.hashicorp.com/ubuntu/trusty64
    ==> consul-server: Adding box 'ubuntu/trusty64' (v20151217.0.0) for
    provider: virtualbox
     consul-server: Downloading:
    https://atlas.hashicorp.com/ubuntu/boxes/trusty64/versions/20151217.0.0/providers/virtualbox.box
    ==> consul-server: Successfully added box 'ubuntu/trusty64'
    (v20151217.0.0) for 'virtualbox'!
    ==> consul-server: Importing base box 'ubuntu/trusty64'...
    ==> consul-server: Matching MAC address for NAT networking...
    ==> consul-server: Checking if box 'ubuntu/trusty64' is up to date...
    ==> consul-server: Setting the name of the VM:
    libnetwork_consul-server_1451244524836_56275
    ==> consul-server: Clearing any previously set forwarded ports...
    ==> consul-server: Clearing any previously set network interfaces...
    ==> consul-server: Preparing network interfaces based on
    configuration...
     consul-server: Adapter 1: nat
     consul-server: Adapter 2: hostonly
    ==> consul-server: Forwarding ports...
     consul-server: 22 => 2222 (adapter 1)
    ==> consul-server: Running 'pre-boot' VM customizations...
    ==> consul-server: Booting VM...
    ==> consul-server: Waiting for machine to boot. This may take a few minutes...
    consul-server:
    101aac79c475b84f6aff48352ead467d6b2b63ba6b64cc1b93c630489f7e3f4c
    ==> net-1: Box 'ubuntu/vivid64' could not be found. Attempting to find and install...
     net-1: Box Provider: virtualbox
     net-1: Box Version: >= 0
    ==> net-1: Loading metadata for box 'ubuntu/vivid64'
     net-1: URL: https://atlas.hashicorp.com/ubuntu/vivid64
    \==> net-1: Adding box 'ubuntu/vivid64' (v20151219.0.0) for provider: virtualbox
     net-1: Downloading:
    https://atlas.hashicorp.com/ubuntu/boxes/vivid64/versions/20151219.0.0/providers/virtualbox.box
    contd...
    ```
3.  我们可以将游民部署的机器列表如下:
    ```
    $ vagrant status
    Current machine states:
    consul-server           running (virtualbox)
    net-1                   running (virtualbox)
    net-2                   running (virtualbox)
    This environment represents multiple VMs. The VMs are all listed above with their current state. For more information about a specific VM, run `vagrant status NAME`.
    ```
4.  多亏了流浪脚本，设置才得以完成；现在，我们可以 SSH 到 Docker 主机并启动测试容器:
    ```
    $ vagrant ssh net-1
    Welcome to Ubuntu 15.04 (GNU/Linux 3.19.0-42-generic x86_64)
    * Documentation:https://help.ubuntu.com/
    System information as of Sun Dec 27 20:04:06 UTC 2015
    System load:  0.0               Users logged in:       0
    Usage of /:   4.5% of 38.80GB   IP address for eth0:   10.0.2.15
    Memory usage: 24%               IP address for eth1:    192.168.33.11
    Swap usage:   0%                IP address for docker0: 172.17.0.1
    Processes:    78
    Graph this data and manage this system at:  https://landscape.canonical.com/
    Get cloud support with Ubuntu Advantage Cloud Guest:  http://www.ubuntu.com/business/services/cloud
    ```
5.  我们可以创建一个新的 Docker 容器，在容器内部我们可以列出`/etc/hosts`文件的内容，以便验证它是否有之前部署的覆盖桥规范，并且它会在启动时自动连接到它:
    ```
    $ docker run -it --rm ubuntu:14.04 bash
    Unable to find image 'ubuntu:14.04' locally
    14.04: Pulling from library/ubuntu
    6edcc89ed412: Pull complete
    bdf37643ee24: Pull complete
    ea0211d47051: Pull complete
    a3ed95caeb02: Pull complete
    Digest: sha256:d3b59c1d15c3cfb58d9f2eaab8a232f21fc670c67c11f582bc48fb32df17f3b3
    Status: Downloaded newer image for ubuntu:14.04
    root@65db9144c65b:/# cat /etc/hosts
    172.21.0.4  2ac726b4ce60
    127.0.0.1   localhost
    ::1 localhost ip6-localhost ip6-loopback
    fe00::0 ip6-localnet
    ff00::0 ip6-mcastprefix
    ff02::1 ip6-allnodes
    ff02::2 ip6-allrouters
    172.21.0.3  distracted_bohr
    172.21.0.3  distracted_bohr.multihost
    172.21.0.4  modest_curie
    172.21.0.4  modest_curie.multihost
    ```
6.  类似地，我们也可以在另一个主机`net-2`中创建 Docker 容器，并且可以验证覆盖网络驱动程序的工作，因为这两个容器将能够相互 ping 通，尽管它们部署在不同的主机上。
在前面的例子中，我们用默认选项启动了 Docker 容器，它们被自动添加到类型覆盖的多主机网络中。
我们还可以创建一个单独的覆盖桥，并使用`--publish-service`选项手动向其中添加容器，这是 Docker 实验的一部分:
```
vagrant@net-1:~$ docker network create -d overlay tester
447e75fd19b236e72361c270b0af4402c80e1f170938fb22183758c444966427
vagrant@net-1:~$ docker network ls
NETWORK ID           NAME               DRIVE
447e75fd19b2         tester             overlay
b77a7d741b45         bridge             bridge
40fe7cfeee20         none               null
62072090b6ac         host               host
```
第二个主机也将看到这个网络，我们可以使用 Docker 命令中的以下选项在这两个主机中创建添加到覆盖网络的容器:
```
$ docker run -it --rm --publish-service=bar.tester.overlay ubuntu:14.04 bash
```
我们将能够验证覆盖驱动程序的工作，因为两个容器将能够相互 ping 通。此外，tcpdump、wireshark、smartsniff 等工具也可以用来捕获 vXLAN 包。
# Docker 机器和 Docker 群叠加网络
本节解释创建多主机网络的基础。Docker 引擎通过覆盖网络驱动支持多主机联网。叠加驱动程序需要以下先决条件才能工作:
*   3.16 Linux 内核或更高版本
*   访问键值存储
*   Docker 支持以下键值存储:Consul、etcd 和 ZooKeeper
*   连接到键值存储的主机集群
*   集群中每台主机上的 Docker 引擎守护程序
本示例使用 Docker Machine 和 Docker Swarm 创建多网络主机。
Docker Machine 用于创建键值存储服务器和集群。创建的集群是 Docker Swarm 集群。
下图说明了如何使用 Docker Machine 设置三个虚拟机:
![Overlay network with Docker Machine and Docker Swarm](img/00051.jpeg)
## 先决条件
*   无赖
*   Docker 发动机
*   Docker 机器
*   Docker 群
## 键值存储安装
覆盖网络需要键值存储。键值存储存储关于网络状态的信息，如发现、网络、端点、IP 地址等。Docker 支持各种键值存储，如 Consul、etcd 和 Zoo Keeper。本节已使用 Consul 实现。
以下是安装键值存储的步骤: