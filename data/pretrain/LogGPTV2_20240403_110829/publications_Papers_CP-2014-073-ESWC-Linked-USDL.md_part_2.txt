### Automated Reasoning and Linked USDL

Linked USDL takes a significant step forward in the adoption of web technologies by embracing the emerging standard approach for online data sharing, known as Linked Data [13]. By adopting these principles, Linked USDL can capture, share, and interlink data about services of highly heterogeneous nature and domains in an open, scalable, and uniform manner. The principles of Linked Data promote and support reuse, which in turn helps to reduce the overhead of data modeling (e.g., by reusing conceptual models and existing datasets) and maximizes compatibility with existing tools. These aspects address major challenges faced by earlier versions of USDL, which this work aims to alleviate.

### 4.2 Design Methodology

Following common Knowledge Engineering best practices [14], we aimed to create a modular solution based on well-designed, widely adopted vocabularies that do not introduce substantial ontological commitments away from the core topics of interest. Thus, considerable effort was devoted to identifying and evaluating reusable ontologies.

First, we identified the main topics to be covered given the original USDL specification and determined some core terms characterizing each of these topics. Informed by the topics and terms identified, we carried out both a manual and semi-automated search to determine potentially relevant reusable ontologies. On one hand, we performed a state-of-the-art analysis to identify ontologies relevant for the modeling of services, see [11] and Section 2. On the other hand, we used Swoogle [15], Watson [16], LOD Stats [17], and the Linked Open Vocabularies (LOV) engines to search for ontologies covering the main terms identified. For each query, we kept the top 10 results. The resulting list was eventually enriched with widely-used general-purpose vocabularies such as Dublin Core (DC) and Simple Knowledge Organization Scheme (SKOS).

Second, for each of the identified vocabularies, we used both LOD Stats and LOV to determine the number of datasets using these terms, the number of instances of the main concepts of interest present in datasets on the web, and the number of times the vocabulary is reused elsewhere. This search provided us with pointers to existing vocabularies of potential interest, along with indications regarding their use and popularity. Table 1 shows the results obtained for the vocabularies for which there was at least one instance found on the web. It is important to note that these statistics should not be taken as an exact value of the overall use of these vocabularies (e.g., GR is used more frequently than reflected by this analysis), but rather as a relative indication. We also took into account the properties defined by these vocabularies, which in some cases (e.g., DC Terms) are the main constructs reused.

**Table 1: Top Vocabularies per Topic**

| # Datasets | # Instances |
|------------|-------------|
| **Topic**  | **Vocabulary** | **LOV Reuse** | **LOD** | **LOV** | **LOD** | **LOV** |
| GR         | 6            | 45            | 146      | 0        | 6        |
| MSM        | 2            | 0             | 41,368   | 0        | 0        |
| Service    | OSLC         | 2             | 0        | 2        | 0        | 0        |
| COGS       | N/A          | 5             | N/A      | 0        | 3        |
| Offering   | GR           | 6             | 8        | 824      | 656      | 4        |
| vCard (v3 & v4) | 5         | 0+2           | 3,684    | 3,686+3  | 0+2      |
| WGS84      | 11           | 1             | 3,204    | 1,765    | 1        |
| Location   | AKTSignage   | 18            | 0        | 11,789   | 0        | 0        |
| DCTerms    | 1            | 9             | 39       | 39       | 6        |
| Schema.org | -            | 1             | -        | 5        | 1        |
| Schema.org | 2            | 4             | 1,570,778 | 1,570,778 | 3        |
| FOAF       | 60           | 135           | 14,613   | 14,557   | 29       |
| BusinessEntities | GR     | 1             | N/A      | 3,918    | N/A      | N/A      |
| W3COrg.    | 1,050        | 11            | 2        | 1,050    | 2        |
| Time       | W3CTime      | 9             | N/A      | 236,433  | N/A      | N/A      |

The design of Linked USDL was driven by these statistics, and a manual assessment of the quality, coverage, and potential alignments of the vocabularies.

### 4.3 Model

Informed by the aforementioned analysis, Linked USDL, which is publicly available together with further examples in GitHub [5], builds upon a family of complementary networked vocabularies that provide good coverage of necessary aspects and are widely used on the web for capturing their particular domains. Specifically, Linked USDL builds upon:

- **DCTerms** [6] to cover general-purpose metadata such as the creator of a certain description, its date of creation or modification, etc.
- **SKOS** providing low-cost support for capturing knowledge organization systems (e.g., classifications and thesauri) in RDF.
- **Time Ontology (Time)** [7] for covering basic temporal relations, allowing us to capture temporal relationships such as "before" and "during."
- **vCard Vocabulary** [8], a vCard 4 compatible vocabulary to support providing location and contact information for people and organizations.
- **Minimal Service Model (MSM)** [9] to provide coverage for automated service-based interactions including Remote Procedure Call solutions (e.g., WSDL services) and RESTful services.
- **GR** [10] to provide core coverage for services, business entities, offerings, and products.

**Figure 1: Linked USDL Core**

The vocabulary has been modeled mostly using RDF/RDFS constructs, and we have limited the inclusion of abstract foundational concepts to achieve a model that is simple enough for its adoption on the web. Readers are referred to [19] for indications on how this model could be mapped to a foundational ontology.

As the core and initial module of a set of vocabularies for supporting service trading online, Linked USDL Core, as shown in Figure 1, aims to cover four essential aspects: offerings, services, the business entities involved in the delivery chain, and the actual interaction points allowing consumers to contract or trigger the benefits of contracted services.

Linked USDL extends GR, which is now the de-facto standard vocabulary for publishing semantic descriptions for products. Although services are accommodated within GR, their coverage is rather basic at this stage. Extending GR enables linking services and product descriptions, which is particularly useful since many products are often sold in combination with a service (e.g., a repair or replace service). Additionally, it ensures that an initial alignment with the increasingly popular vocabulary Schema.org is in place, as GR is already largely aligned to it.

The most important concepts provided by Linked USDL include:

- **Service**: A refinement of `gr:ProductOrService` that subsumes all classes describing service types. Examples of subclasses of Service could be "internet provisioning service" and "insurance service." Instances of Service may define i) prototypical services part of a portfolio, e.g., "BT unlimited broadband service," as covered by `ServiceModel`, ii) one-of services custom-tailored for a potential customer, or iii) actually contracted services, e.g., "your concrete life insurance provided by AXA," as covered by `gr:ServiceIndividual`.
- **ServiceModel**: A refinement of `gr:ProductOrServiceModel` that specifies common characteristics (e.g., download speed) of a family of services. `ServiceModel` thus defines families of Services sharing common characteristics, e.g., "BT unlimited broadband services share the characteristic of supporting unlimited download." An actual service instance shares the properties of its service model. This feature requires non-standard reasoning, which specific implementations should take care of.
- **ServiceIndividual**: A subclass of `gr:Individual` and `Service`. Instances of `ServiceIndividual` are actual services that are creating value to a network of business entities. For example, "your concrete life insurance provided by AXA" is a `ServiceIndividual` that provides value to yourself and AXA.
- **ServiceOffering**: A subclass of `gr:Offering` that represents essentially offerings by a business entity, including at least one Service. `ServiceOffering` may have limited validity over geographical regions or time.
- **EntityInvolvement**: Introduced in Linked USDL to enable capturing service value networks. In a nutshell, `EntityInvolvement` allows capturing a ternary relationship expressing that a business entity, e.g., "AXA," is involved in a service, e.g., "basic life insurance," playing a business role, e.g., "provider." Linked USDL provides a reference SKOS taxonomy of basic business roles that covers the most typical ones encountered, such as regulator and intermediary.
- **InteractionPoint**: Links services to interactions that may be possible or required between the members of a service value network and the service during its lifecycle. This allows answering questions such as "what is the sequence of interactions I may expect if I want to make an insurance claim, and what communication channels are available to that end?"
- **CommunicationChannel**: The class of all different communication channels that business entities could use for communication. Linked USDL covers the most widely used channels by means of two vocabularies: vCard (e.g., email, phone) and MSM (e.g., Web services, and RESTful services). Communication channels are additionally characterized by their interaction type. Linked USDL provides two reference SKOS taxonomies covering the main modes (e.g., automated) and the interaction space (e.g., on-site).
- **EntityInteraction**: Links interaction points to business entities or types (e.g., provider) and the role they play within the interaction (e.g., initiator). `EntityInteraction` allows expressing things like "to make a claim, the consumer should first contact the insurance provider and provide the policy number."

**Classifications**: Classifications or taxonomies of entities are most often used when describing services to capture, for instance, service types, business entity roles (e.g., "provider"), and interaction-related issues (e.g., "manual vs. automated"). We also expect that classifications will be needed in forthcoming modules addressing strategic issues or the internals of delivery chains.

This could be approached directly using subclassing, which is directly supported by RDFS. However, the use of a hierarchy of classes establishes strict relationships that may not adequately match existing organization schemes. For this reason, in Linked USDL, we have accommodated the use of SKOS, which enables capturing classification schemes and taxonomies. This mechanism does not prevent users from providing their own domain-specific categorizations through subsumption if they wish to. This approach enriches Linked USDL with a powerful, yet flexible and extensible means for creating categorizations.

The current version of Linked USDL includes three SKOS schemes with reference categorizations for `BusinessRoles`, `InteractionRoles`, and `InteractionTypes`, as shown in Figure 1. These schemes have been kept as separate modules so that different schemes can be used if necessary.

### 5 Evaluation

We evaluated Linked USDL using three well-known and recommended techniques [20], including domain coverage, suitability for an application or task, and vocabulary adoption.

#### 5.1 Coverage Evaluation

Ontologies are often evaluated by comparing them to a gold standard ontology [20]. In our case, we conducted such an evaluation by comparing the resulting model to USDL, the most comprehensive model available for describing services. This allows us to get a clear indication of the overall coverage of the domain and to identify the main deviations from USDL.

A fundamental goal of this work is to provide a conceptual model that is easy to grasp, populate, process, and ultimately be adopted for web-scale use. Thus, out of the 9 modules of USDL, we have essentially deferred covering the following modules: `Service`, `Legal`, `ServiceLevel`, and `Pricing`. Nonetheless, for every module, we checked the coverage of the main concepts defined to get an indication of both module-specific and overall coverage of Linked USDL. The results of this analysis are summarized in Table 2.

**Table 2: Evaluation of Linked USDL Coverage of USDL (Version M5)**

| **USDL Module** | **Topic** | **Vocabulary** | **Comments** | **Classes Covered** | **Ratio** |
|-----------------|-----------|----------------|--------------|--------------------|-----------|
| Advanced Temporal Reasoning | Time | Provided | 46 | 35 | 76% |
| Contact Details | GR & vCard | Foundation Agents | GR & vCard | 46 | 35 | 76% |
| Conditions | Deferred to modules, e.g., Technical Resources | X | 10 | 8 | 80% |
| Higher Automation through Semantics | Interfaces | MSM | 10 | 8 | 80% |
| Protocols | HTTP & MSM | HTTP & SOAP/WSDL | AccessProfile | X | 6 | 3 | 50% |
| SimpleProtocols | Linked USDL | Interaction | Partial. Conditions at the operations level | 6 | 3 | 50% |
| ComplexProtocols | Linked USDL | Roles | Linked USDL | BusinessRoles SKOS | 7 | 6 | 86% |
| Participants | TargetConsumers | X | 7 | 6 | 86% |

This analysis shows that, thanks to integrating and reusing existing vocabularies, we have managed to cover the vast majority of USDL, providing a vocabulary consisting of 12 concepts and 3 complementary SKOS categorizations. From an original specification with 125 concepts, we cover 74% if we limit ourselves to the specific modules we targeted, and 60% overall, which should contribute towards reducing the overhead related to understanding and using the model.