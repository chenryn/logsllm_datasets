824
MUL32 12438
272
275
545
329
33744 1233
106761 2638
1
1
3
44
118
349
54
55
109
98
345
780
0.3
0.5
1
10
24
77
AES
SHA1
53
54
107
54
216
431
109
112
217
111
435
868
53
53
106
54
215
430
the CryptoKit library;9 and ii. a wrapper that handles parameter
passing (circuits, messages and input/output) and calls the extracted
SFE code. We fix the bound c on circuit sizes to be the largest OCaml
integer (2k-1- 1 on a k-bit machine) allowing us to represent cir-
cuits without having to use arbitrary precision arithmetic whilst
remaining large enough to encode all practical circuits. We use this
same value to instantiate n.
We conclude this section with microbenchmarking results focus-
ing only on the extracted OCaml implementation. Our results show
that, whilst being slower than (unverified) optimized implementa-
tions of SFE that use similar cryptographic techniques [11, 35, 40,
56], the performance of the extracted program is compatible with
real-world deployment, providing evidence that the (unavoidable)
overhead implied by our code extraction approach is not prohibi-
tive. The overhead of our solution is not intrinsic to the verification
and extraction methodology. Indeed, the more modern (unverified)
implementations showing significant improvements rely on either
cryptographic optimizations [35] or on new SFE protocols [56].
Moreover, although these changes have implications on the se-
curity proofs, these can be addressed using the same techniques
presented here to obtain a verified implementation that benefits
from these recent cryptographic advances.
In addition to the overall execution time of the SFE protocol
and the splitting of the processing load between the two involved
parties, we also measure various speed parameters that permit
determining the weight of the underlying components: the time
spent in executing the OT protocol, and the garbling and evaluation
speeds for the garbling scheme. Our measured execution times do
not include serialization and communication overheads nor do they
include the time to sample the randomness, all of which we account
for in Section 4.
Our measurements are conducted over circuits made publicly
available by the cryptography group at the University of Bristol,10
precisely for the purpose of enabling the testing and benchmarking
of multiparty-computation and homomorphic encryption imple-
mentations. A simple conversion of the circuit format is carried out
to ensure that the representation matches the conventions adopted
in the formalization. We run our experiments on an x86-64 Intel
Core i5 clocked at 2.4 GHz with 256KB L2 cache per core. The ex-
tracted code and parser are compiled with ocamlopt version 4.02.3.
The tests are run in isolation, using the OCamlSys.time operator
for time readings. We run tests in batches of 100 runs each, noting
the median of the times recorded in the runs.
9See http://forge.ocamlcore.org/projects/cryptokit/
10http://www.cs.bris.ac.uk/Research/CryptographySecurity/MPC/
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1994A subset of our results is presented in Table 1, for circuits COMP32
(32-bit signed number less-than comparison), ADD32 (32-bit num-
ber addition), ADD64 (64-bit number addition), MUL32 (32-bit num-
ber multiplication), AES (AES block cipher), SHA1 (SHA-1 hash al-
gorithm). The semantics of the evaluation of the arithmetic circuits
is that each party holds one of the operands. In the AES evaluation
we have that P1 holds the 128-bit input block, whereas P2 holds
the 128-bit secret key. Finally, in the SHA1 example we model the
(perhaps artificial) scenario where each party holds half of a 512-bit
input string. We present the number of gates for each circuit as well
as the execution times in milliseconds. A rough comparison with
results for unverified implementations of the same protocol such
as, say, that in [40] where an execution of the AES circuit takes
roughly 1.6 seconds (albeit including communications overhead and
randomness generation time), allows us to conclude that real-world
applications are within the reach of the implementations our ap-
proach generates. Furthermore, additional optimization effort can
lead to significant performance gains, e.g., by resorting to hardware
support for low-level cryptographic implementations as in [11, 56],
or implementing garbled-circuit optimizations such as those al-
lowed by XOR gates or component based garbled-circuits [35, 42].
Indeed, we do not aim or claim to produce the fastest implemen-
tation of Yao’s protocol, but simply to demonstrate that the new
formal verification techniques that we introduce open the way to
verifying a whole new class of provable security arguments, where
modularity, abstraction, and composition (e.g., hybrid arguments)
mechanisms are essential to dealing with scale and complexity.
3 CERTIFIED BOOLEAN CIRCUIT COMPILER
In this section we describe a new certified compiler called CircGen
that can convert (a large subset of) C programs into Boolean circuit
descriptions. This is a self-contained, standalone tool that can be
used in arbitrary contexts where computation needs to be specified
as Boolean circuits. By a certified compiler we mean a compiler that
is coupled with a formal proof asserting that the semantics of the
source program is preserved through the compilation process. In
other words, whenever the source program exhibits a well-defined
behavior on some input, the behavior of the target program will
match it. The tool is based on the CompCert certified compiler [43],
ensuring the adoption of a widely accepted formal semantics for
the C language.
Relevant CompCert features. CompCert is in fact a family of
compilers for implementations of the C programming language
for various architectures (PowerPC, ARM, x86). It is moderately
optimizing, sometimes compared to GCC at optimization level 1
or 2. It is formally verified: the semantics of the programming lan-
guages involved in the compiler (in particular C and the assembly
languages) are formally specified; and correctness theorems are
proved. The correctness of a compiler is stated as a behavior inclu-
sion property: each possible behavior of the target program is a
possible behavior of the source program. A behavior of a program is
a (maybe infinite) sequence of events that describe the interactions
of the program with its environment. For the current prototype we
have adapted the 2.5 distribution of CompCert.11
11http://compcert.inria.fr/
Figure 6: Architecture of the certified compiler CircGen
3.1 CircGen architecture
The meaning of a C program is normally specified as a set of traces
that captures the interactions with the execution environment trig-
gered by the execution of the program (I/O of data, calls to the
operating system, ...). In order to match it with the behavior of
evaluating a Boolean circuit, we need to be somewhat more strict
on the semantics of programs and, consequently, on the class of
programs deemed acceptable to be translated by the tool. The over-
arching assumption underlying CircGen is that the input C program
is coupled with a specification of two memory regions (an input
region and an output region) and that we are able to identify the
meaning of the C program with a Boolean function acting on those
memory regions. The tool should then generate a circuit imple-
menting that specific Boolean function, thus capturing the meaning
of the source program.
The CircGen architecture is shown in Figure 6. It is split in two
components: i. the front-end, whose task is to convert the source
program into an intermediate language that has been tailored to
already admit a Boolean circuit interpretation; and ii. the back-
end, that formalises the intended Boolean circuit interpretation of
programs, and carries out the (certified) transformations up to an
explicit Boolean circuit. In other words, the front-end will reject
programs for which it cannot determine that there exists a valid
Boolean circuit interpretation; whereas the back-end will make
explicit the Boolean circuit interpretation.
The front-end follows closely the first few compilation passes of
CompCert, adapting and extending it to meet the specific require-
ments imposed by our domain. We develop and verify the back-end
from scratch.
3.2 C features/usage restrictions
The driving goal in our design is to let the programmer use most of
the C language constructs (memory, functions, control structures
such as loops and conditional branches, ...) that are convenient to
program complex, large circuits. However, in our presentation we
will use a very simple running example. The circuit that compares
its two inputs to decide which is the largest can be described by
the C program shown in Figure 7 (function millionaires). In order
to be correctly handled by the compiler, the program specifying
the circuit must be wrapped in a main function that declares what
are the inputs and the outputs of the circuit. The declaration of
inputs and outputs also allows us to state the correctness of the
compiler; intuitively, the trace of this program will include the
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1995Table 2: CircGen features/restrictions
Features
Recursion
GOTO’s
Dynamic memory
Static memory
Loop unfolding
Integer computations
Non-integer computation
×
×
×
✓
✓
✓
×
incoming inputs and the outgoing outputs of the produced circuit.
The dedicated header file provides convenient macros. Note that
boolean circuits produced by our compiler are “party-agnostic”. In
the workflow, one specifies which input bits correspond to each
party only when providing the circuit to underlying frameworks.
#include "circgen.h"
int millionaires(int x, int y) {
if (x < y) return 1;
else return 0;
}
int main(void) {
static int a, b, result;
AddInput(a);
AddInput(b);
BeginCirc();
result = millionaires(a, b);
EndCirc();
AddOutput(result);
return 0;
}
Figure 7: Example C program
Assumptions on Input Programs. We start by enumerating natu-
ral high-level restrictions imposed on input programs: i. the pro-
gram must consist of a single compilation unit; ii. input and output
memory regions must be properly identified; iii. any feature that
produces observable events under CompCert’s semantics is disal-
lowed (e.g. volatile memory accesses; external calls; inline assembly;
etc); and iv. so far, only integral types are allowed. A summary of
the most relevant features and restrictions of CircGen can be found
in Table 2. The fragment of C that we support is aligned with
similar tools. Most of the limitations at this level are inherent to
the problem of describing programs as (relatively small) Boolean
circuits.
Functions. The source C program can be structured in different
functions, but the tool will force all function calls to be inlined
(independently of the presence of the inline keyword in function
headers). As a consequence, we exclude any form of recursion in
source programs (either direct or indirect). In practical terms, we
adapt the function inlining pass of CompCert, which refuses to
inline any kind of recursive function (each time it inlines a function
f, it removes f from the context). Therefore, this restriction amounts
to enforcing that, after inlining, the program entry point does not
include function calls.
Control structure and termination. In order to extract a
Boolean function from a C program we need to enforce termination
on all possible inputs. Since recursion has already been excluded,
possible non-terminating behavior can only be caused by C loop
statements or unstructured use of gotos. For loops, we consider a
main() {
x18 = volatile load int8u(&__circgen_io)
int8u[a] = x18
x18 = volatile load int8u(&__circgen_io)
int8u[a + 1] = x18
. . .
int8u[b + 3] = x335
x9 = __circgen_fence()
x7 = int32[a]
x8 = int32[b]
if (x7 <s x8) goto 14 else goto 13
x332 = 1; goto 12 13: x332 = 0
int32[result] = x332
x6 = __circgen_fence()
x329 = int8u[result]
_ = volatile store int8u(&__circgen_io, x329)
. . .
x323 = int8u[result + 3]
_ = volatile store int8u(&__circgen_io, x323)
x2 = 0
return x2
–:
14:
12:
}
Figure 8: Front-end RTL output
specific compiler pass that attempts to remove them by a suitable
number of unfoldings (detailed below). We choose not to support
gotos in the tool; in particular, any attempt to build a loop using
gotos will cause the program to be rejected.
Variables and memory. During the conversion of C programs
into Boolean circuits, variables need to be converted into wires
connecting gates. Specifically, each live range of a variable gives
rise to a set of wires (with the number of wires matching the number
of bits stored in the variable)—writing to a variable means that the
wires corresponding to that variable originate in the output ports of
some gate that produces the value to be stored; and reading from a
variable means that the associated wires are connected to the input
wires of some gate that is consuming the variable value to perform
an operation. Memory accesses to fixed locations behave (in this
respect) similarly to variables: a store and load to a fixed location
correspond to a write and read of a specific variable, respectively.
Memory accesses can, however, be subtler when the location of
the access (address) depends on additional data, as in the case of
indexed memory accesses (e.g., array operations). When reading
from such a composite address, one is led to a selection of specific
wires from a much larger pool of wires, which amounts to a multi-
plexing operation in Boolean circuit jargon. Conversely, storing to
an indexed address is akin to a demultiplexer gate. The problem lies
in the fact that these (meta-)gates are very expensive if built from
elementary logic operations, leading to exponential circuit sizes on
the number of selection bits. This clearly makes unrestricted (32-bit)
indices out of reach, leading to the necessity of adopting a strategy
to bound them to reasonable limits. We therefore exclude any form
of dynamic memory allocation (both in the heap and in the stack)
and consider only programs that i. allocate memory statically; and
ii. for which memory usage is determined at compile-time.
3.3 Front-end compiler passes
The front-end of CompCert, for the most part unchanged, is used
to parse, unroll loops, inline functions, and perform general opti-
mizations at the Register Transfer Language (RTL) level (constant
propagation, common subexpression elimination, and redundancy
elimination). The RTL intermediate representation produced by the
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1996front-end for the example input program of Figure 7 is given in
Figure 8. We can observe that, because of inlining, only the main
function is left. It starts with a sequence of volatile loads that take
the circuit inputs from the environment into the designated global
variables, one octet at a time. Then, following the code of the circuit
(between the lines marked ‘–’ and ‘12’, in red on the Figure), comes
a final sequence of volatile stores that sends the circuit outputs
to the environment, one octet at a time. These three sections of
the RTL program are delimited by dummy external calls (to __circ-
gen_fence); they block any optimization across these boundaries that
could prevent the correct recognition of inputs and outputs in the
next compilation pass.
Loop unroll. The loop-elimination pass is split into two elemen-
tary transformations: i. one that unrolls the loop by an arbitrary
number of iterations, but leaves the loop unchanged at the end; and
ii. one that establishes that the loop kept after all the unrollings
is indeed redundant (i.e., that it is unreachable). By doing this, we
simplify significantly the semantic preservation proof, since the
first transformation follows directly from the operational semantics
of loops and is always sound, independently of the number of un-
rolls. The second transformation can be seen as a specific instance
of dead-code elimination.
We implement the first transformation as a new compiler pass in
CompCert and prove its semantic preservation theorem. This pass
is performed at the Cminor intermediate language since it has a
unified treatment for all C loop constructors, but still retains enough