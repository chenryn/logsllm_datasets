10
1621FNs (Dynamo)Undecided21(11.5%)43(23.6%)118(64.8%)DiscrepantExtendedConﬁrmed6FPs (Arcade)We used DYNAMO to analyze 33 of the 88 APIs reported
by ARF. We chose those APIs because, according to their
vulnerability description, they have the highest impact on user
privacy and experience. We compared the observed runtime
behaviour with the vulnerability description, and we were
able to discover discrepancies in 5 APIs. Based on corre-
spondence with ARF’s authors and on manual code inspection
of those APIs, we uncovered two reasons that lead to mis-
takenly reporting those APIs as vulnerable. First, ARF was
not able to correctly resolve the identity used in permission
checks. Second, even manual analysis is limited and cannot
cover all aspects of access control. While the ﬁrst reason
is indeed an inherent limitation of static analysis, authors’
assumptions that were incorporated in the vulnerability anal-
ysis (i.e., how caller’s identity is resolved and propagated)
aggravated the problem and lead to this imprecise reporting.
For example, one API (whitelistAppTemporarily) that
acts as a deputy is mistakenly assumed to escalate caller’s
privileges to those of the system by overwriting the caller’s
UID with the system’s UID before invoking the target pro-
tected API (addPowerSaveTempWhitelistApp). However,
dynamic testing showed that both APIs enforce the same
permission and the caller’s identity was not overwritten.
The more complicated task was conﬁrming the remaining
vulnerabilities. Our strategy was as follows: we translated the
described vulnerability into different sets of parameters, which,
when tested, would trigger the vulnerability. For example, if
the API exposes information across different proﬁles without
protection, we craft inputs and fake the calling context to
mimic a call from the same and a different proﬁle. Using
DYNAMO, those different test settings were easily conﬁgured
and set up. We compared the results (i.e., returned values and
traces) of different testing iterations and considered the vul-
nerability conﬁrmed if both calls from the same and different
proﬁle would yield the same output. For APIs that do not
return values, we made a decision based on the collected traces
and GUI feedback. This simpliﬁed veriﬁcation strategy enabled
us to conﬁrm 10 vulnerabilities with minimal manual effort.
According to the authors, four of those vulnerabilities received
CVEs from Google. Unfortunately, we could not make a
decision on the remaining 16 APIs because the collected traces
and GUI feedback of those APIs were inadequate.
C. Inconsistency Analysis of APIs’ Access Control
Inspired by Kratos’s [47] approach, we used the permission
mappings, APIs’ traces, and contextual information produced
by DYNAMO for Android 6 and 10 to conduct a lightweight
inconsistency analysis. Our strategy is simple but effective as
it discovered 5 sensitive APIs that are unprotected and 65
APIs with permission misconﬁgurations. We used the traces
collected for all APIs of the same Android version to detect
execution paths from different APIs that lead to the same
sink but enforce different security checks. Since identifying
the exact sink is challenging and a problem in its own [12],
we heuristically created a list of sinks for each API. We then
search for different APIs that share sinks and compare their
permission information as reported by DYNAMO, including the
identity for which the permission is enforced. Unfortunately,
this simpliﬁed mechanism creates a lot of noise, which we
circumvent by creating a threshold of matching sinks to decide
if two APIs are sharing the same sinks. When the comparison
As
a
and
case
in
the
result, we
found
(ITM) APIs
isTrustUsuallyManaged
of permissions of two APIs produces a mismatch, we ﬂag the
APIs for manual code inspection to see if both mappings are
different but practically enforcing the same level of access
control (i.e., no vulnerability) or if one is less restrictive than
the other (i.e., possible vulnerability).
one
latest
Android release (Android 10) between the getBoolean
(GB)
of
TrustManagerService,
LockSettingsService
respectively. The ITM API queries an internal
storage
using a key to check if a speciﬁc proﬁle has enabled
is protected
and conﬁgured trust agents [25]. This API
by system-level permission. On the other hand,
the GB
API accepts an arbitrary string and uses it as a key to
retrieve the corresponding value from the same storage
used by ITM. When the GB API is used with the same key
from the ITM API,
to GB successfully retrieves
the protected value without enforcing any security checks.
This inconsistency was conﬁrmed and ﬁxed by Google. We
detected four more cases in Android 6; however, those cases
were already ﬁxed in later Android releases and apparently are
known to Google. Those APIs are getDeviceIdForPhone,
getLine1NumberForSubscriber,
getLine1Number,
the PhoneInterfaceManager.
and getDeviceId of
Additionally, we
from the
ActivityService in Android 6 where the permissions
are enforced against the identity of the app running on the
main proﬁle while the call can originate from a secondary
proﬁle. In other words, given that an app can exist in main and
a secondary proﬁle where each instance can have a different
set of permissions, the app from the second proﬁle—which
maybe unprivileged—can still call those affected APIs if the
app on the main proﬁle is granted those permissions. Those
cases illustrate the intricacies when multiple policies need to
be stacked (here, permissions and proﬁles).
65 APIs
and
the call
discovered
D. Evaluating Android’s Developer Documentation
Android’s developer documentation has been shown by
prior works [20], [51] to be imprecise and incomplete. Since
the documentation has evolved since these prior works, we
reassess the current documentation for the latest Android
release Android-10.0.0 r27 (API level 29). Our evaluation
shows that the permission mapping from the documentation
is incomplete for 66 APIs and contains errors for 9 APIs
out of 439 automatically tested APIs. On the other hand, we
found that the permission information extracted with DYNAMO
matches the documentation for 40.5% of those tested APIs.
To build our permission mapping for the targeted Android
version, we used special virtual devices from Google, called
Cuttleﬁsh [1], which allowed us to scale up the analysis by
creating 20 VM instances on Google’s Compute Engine with
one Cuttleﬁsh emulator per VM. Each instance is equipped
with 4 vCPUs and 15GB of RAM. The analysis took two
weeks and we were eventually able to analyze 3,579 different
APIs from 121 system services and produce permission map-
ping information for 2,537 APIs. Table II includes the mapping
results for this Android version (row Android-10.0.0 r27).
To collect
the permissions documented by Google, we
leverage the fact that the online documentation is automati-
cally derived from the source code and, therefore, extract the
11
mapping from the source code directly. We search for APIs
that are well annotated with required permissions through the
@RequiresPermission (@RP) tag. Those APIs can then be
automatically collected using static code analysis. This has
the beneﬁt of analyzing a structured target using very simple
static analysis techniques as opposed to text-analysis when
working directly on the developer documentation. However,
since the developer’s documentation only lists the APIs of
the manager classes (e.g., WifiManager) which then call
to remote services (e.g., WifiServiceImpl) but DYNAMO
builds the mapping for the service APIs, we need to map
the APIs from the manager classes to the APIs from the
services. We used Soot [50] to extract the methods with the
Java annotation @RP from manager classes. For each extracted
method, we ﬁrst collect the required permissions and their
relation. Then, we connect the IBinder calls from within
the manager class to matching remote APIs of the services,
which were extracted at runtime from all services. We were
able to collect 301 APIs and their annotated permissions and
map them to their remote service APIs. However, evaluating
the documentation also requires detecting cases where the
documentation is incomplete or missing a permission. In
contrast to collecting annotations, this would require sophisti-
cated text processing to automatically determine the absence
of permission documentation. Thus, for this evaluation, we
limit our assessment of missing documentation to three ran-
domly picked big services as case studies, for which we
manually analyze the documentation to detect the absence of
documented permissions. Those services are WifiService,
ConnectivityService, and AudioService. We manually
analyzed the corresponding manager classes and collected 138
methods that call remote services but were not annotated with
@RP nor have a description of required permissions.
Out of the 301 APIs that were automatically collected,
we found 178 APIs (59.1%) whose permission mapping by
DYNAMO matches the mapping from the source code annota-
tion. Those APIs collectively enforce 64 unique permissions.
It is worth noting that DYNAMO managed to extract more
permissions than those annotated in the source code for 9 of
those APIs. This is because the managers’ APIs are annotated
with a subset of permissions that are required for one chosen
execution path depending on the input (i.e, parameter-sensitive
enforcement), while DYNAMO extracted permission mappings
for other execution paths as it bypasses the managers’ APIs
and directly tests the corresponding service APIs. However,
we found that DYNAMO failed to construct the permission
mapping for 50 APIs due to either low code coverage or failing
to invoke the API because of a missing dependency. The re-
maining 44 APIs revealed three error patterns in the annotated
permissions in the source code: First, the source code deﬁnes
required permissions that are not actually enforced (9 APIs).
Second, the source code deﬁnes the permissions required for
only some execution paths, while the user-controlled input
can trigger all execution paths (29 APIs). Third, the source
code only partially describes the API’s required permissions
in the @RP, causing the matching process to fail. However, after
manually checking the source code, we ﬁnd complementary in-
formation about the needed permissions (6 APIs). Surprisingly,
after analyzing the 138 APIs from the three manager classes
that do not have any sort of information regarding the required
permissions, we found 31 APIs with missing information that,
in fact, require a permission from the caller. We reported all
of our ﬁndings to Google and they are in the process of
taking corrective actions for their developer documentation.
Appendix D details our results.
The root cause analysis on why those inconsistencies and
incomplete annotations exist in the documentation are three-
fold. First, the documentation is best human effort. Second,
while the services evolve to more or new required permissions,
the manager APIs fall behind and are overlooked, especially
for the APIs that are hidden from third-party app develop-
ers. Third, the annotations are too inﬂexible to convey the
parameter sensitivity. As a result, they are used to reﬂect the
permissions required for one execution path only and further
conditions are, sometimes, mentioned in natural language only.
VI. DISCUSSION
We discuss our evaluation and try to provide lessons
learned for analyzing Android’s application framework.
Security Impact. While DYNAMO’s improvements to the doc-
umentation (Section V-D) and the discovery of unprotected and
misconﬁgured interfaces (Section V-C) were acknowledged by
Google as direct results of this work, we see another long-
term security impact from the permission mapping that we
generate with DYNAMO. Accurate and complete permission
mappings are essential
in various security applications in
Android, such as detecting over-privileged apps [44], [40],
detecting malware [9], [18], [27], [36], [48], [57], ﬁnding
inconsistencies within the application framework [4], [6], [28],
[29], [47], [56], or others [13], [35], [43], [51]. For instance,
developers without complete and accurate mappings tend to
request more permissions than necessary for their apps. This
is not only a nuisance for developers, but has been shown to
frustrate the user [39], [49] and cause a feeling of erosion
of privacy [37], [31]. Google recently even started nudging
developers of over-privileged apps into rethinking their apps’
behavior [45], [44]. Moreover, malware detection depends
on accurate permission mappings to identify dangerous calls
in apps as part of the feature sets of their classiﬁers [9],
[27], [36], [57]. Without complete mappings, malicious apps
might be missed (e.g., by not detecting usage of sensitive
protected APIs) while imprecise mappings can lead to erro-
neously ﬂagging benign apps as malicious (e.g., confusion
about what would be the right set of permissions for a benign
app). Lastly, considering DYNAMO’s approach to dynamically
test the application framework API, we envision extending
DYNAMO into a tool for systematically testing the application
framework’s internals for inconsistencies (Section V-C) and for
veriﬁcation (Sections V-A and V-B) in the future.
Soundness and Completeness of DYNAMO’s Results. The
results of dynamic analysis are sound for the executed paths
but can be incomplete for some parameter-sensitive APIs. In
our results, we ﬁnd that some security checks were overlooked
because we only rely on our observations (e.g., outputs, traces,
and reported checks) that we encode as association rules to
automatically decide on the security exception. For example,
some APIs would throw a security exception that requires
a human interpretation to identify the check that causes the
exception and, therefore, cannot be automatically detected.
A more reliable approach would be looking at those traces
12
manually, which is not scalable, or to devise better automatic
classiﬁcation of traces (e.g., using learning techniques).
Beneﬁts of Combined Approaches. One thing that our results
show is that neither static nor dynamic analysis alone can
uncover the intricate details of the framework and that—in
alignment with other software testing domains—a combined
approach is needed. Take the problem of building permission
mapping as an example. The common assumption so far is
that the compromises made by static analysis—e.g., limiting
the analysis to cater for performance—can still yield better
results than dynamic testing that suffers from poor code
coverage. However, we have demonstrated that even simple
techniques for achieving high coverage in dynamic testing can
outperform static analysis for some cases. When considering
our comparison with Arcade, DYNAMO was able to comple-
ment the permission mapping for 444 APIs that are missing
or incompletely modeled by Arcade in comparison to 320
APIs that are missing or incompletely modeled by DYNAMO
(becomes 283 and 373 APIs, respectively, when comparing
with the updated permission mapping from Arcade).
The limitations and strengths of both approaches that
complement each other serve as an indication that moving for a
hybrid approach is the next natural step in improving analysis,
and we ﬁnd concrete evidence in our results: (1) Arcade limits
the scope of analysis to preserve their practicality by only con-
sidering checks before the identity is cleared (see Listing 3),
thus missing subsequent security checks. DYNAMO reports all
security checks for the selected execution path and helped to
ﬁnd this shortcoming, which now can be improved for future
static analyses. (2) Dynamic analysis fails in detecting complex
access control logic and inferring the relation between the input
and corresponding execution paths. This, on the other hand,
is possible via static analysis with minimal overhead. (3) By
design, existing static analysis works cannot analyze native
APIs because they rely on Java-only static analysis framework
(i.e., [3], [50]). In contrast, dynamic testing uses IPC primitives
that do not differentiate between the implementation language
of the target API. (4) Static analysis thrives on assumptions
based on observations that are mainly collected from manual