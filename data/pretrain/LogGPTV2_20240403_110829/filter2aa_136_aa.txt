# Somerset Recon: Supply Chain Security Analysis

## Authors
- **Zach Miller**
  - Specialties: Reverse Engineering, Penetration Testing
  - Twitter: [@bit_twidd1er](https://twitter.com/bit_twidd1er)
- **Alex Kissinger**
  - Barista and Security Analyst at Somerset Recon
  - Interests: Cappuccinos, Hardware Hacking, Reverse Engineering

## Introduction to Somerset Recon
- **Twitter**: [@SomersetRecon](https://twitter.com/SomersetRecon)
- **Contact**: [somersetrecon.com/contact](https://somersetrecon.com/contact)

## Previous Research
### Electronic Safe Lock Analysis
- **Project**: SecuRam Prologic B01 Bluetooth Electronic Safe Lock
- **Findings**:
  - Vulnerabilities in the mobile application and wire protocol
  - Ability to capture and decode PIN numbers transmitted wirelessly
  - Brute force attacks on PIN numbers over the wire

### Hello Barbie
- **Project**: Mattel Hello Barbie Doll
- **Findings**:
  - Identified multiple vulnerabilities affecting the device and associated web and mobile technologies

## Embedded Devices
- **Definition**: Devices with specialized hardware and software for specific functions.
- **Industries**: Automotive, Industrial, Medical, Communications, Digital Consumer, etc.

## Commonalities in Embedded Devices
- **Development Tools**: Utilize embedded debuggers for development and testing.

## Our Targets
### Segger J-Link Debug Probe
- **Features**:
  - Supports JTAG, SWD, SWO, and other protocols
  - In-Circuit Emulator (ICE) and In-Circuit System Programmer (ICSP)
  - Supports ARM/ARM Cortex, RISC-V, RX targets
  - USB and Ethernet connectivity
  - Cross-platform toolchain
  - Ultrafast download/upload to flash
  - Unlimited software breakpoints
- **Popularity**: "SEGGER J-Links are the most widely used line of debug probes available today" - [segger.com](https://www.segger.com)

### Segger Software
- **J-Link Software Package**:
  - J-Link Commander (Command line tool)
  - J-Link GDB Server
  - J-Link Remote Server
  - J-Mem Memory Viewer
  - J-Flash
  - And more...
- **Other Tools**:
  - J-Link GDB Server RTOS Plugin SDK
  - SystemView (Real-time Analysis and Visualization)
  - Ozone Graphical Debugger
  - J-Scope Data Analysis and Visualization Tool

## Segger J-Link Setup and Attack Surface
- **Hardware**:
  - How it works
  - Extracting firmware
  - Feature differences between devices
  - Security mechanisms
    - Is it open?
- **Software**:
  - USB Driver
  - User-mode applications
  - Full-blown IDE

## Segger J-Link - Hardware
- **J-Link EDU V9.3**
- **Tag-Connectâ„¢?**

### Debugging a J-Link with a J-Link
- **Security and Flash Bits**:
  - Set in flash
  - Refuses to connect and erase
  - Other potential workarounds
- **J-Link Mini EDU MCU Reference Manual**
- **Chips**: Interesting and complex

## J-Link Desktop Software
- **Vulnerability Research - Reverse Engineering**:
  - Cross-compiled code
  - Custom string manipulation
  - Use of dangerous functions
  - Basic applications, not overly complex

### Binary Protections
- **DEP/NX**: Enabled
- **ASLR**: Enabled
- **PIE**: Not enabled
- **Stack Canaries**:
  - Present in Windows binaries
  - Absent in *nix binaries
- **SafeSEH**: Used in Windows binaries
- **Symbols**: None

### Fuzzing
- **Setup**:
  - Fuzzers to test various input vectors (files, network interfaces, command line arguments)
  - Used Peach for generational fuzzing
  - Structured, text-based formats
  - Magic numbers required to reach certain code paths
- **Results**:
  - Tens of thousands of crashes
  - Many exploitable crashes
  - Duplicate crashes
  - Issues keeping J-Link devices attached to VMs
- **Crash Monitor**:
  - Triggered on any crash during fuzzing
  - Script to check if J-Link had fallen off the VM
  - Reattach J-Link using libvirt if necessary

## Local Exploits
### CVE-2018-9094 - Format String Vulnerability
- **Tool**: J-Flash
- **Custom String Formatting**:
  - Limited subset of format specifiers
  - Basic specifiers: %d, %x, %p, %u, etc.
  - No %n family of specifiers
  - Precision arguments: .number
- **Exploit**:
  - JFlashSPI_CL.exe -open xAAAA%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%s
- **Impact**:
  - Reduced severity due to lack of %n specifiers
  - Potential use in an exploit chain to read arbitrary memory

### CVE-2018-9095 - Stack Buffer Overflow
- **Tool**: J-Link Commander
- **Discovery**:
  - Found via fuzzing
  - Traditional stack buffer overflow
  - Reads each line of a file into a 512-byte stack buffer
- **Triage**:
  - GDB analysis
  - Control over return address
  - Calculation of offset using tools like GDB Peda, radare2, pwntools, patter_create.rb
- **Exploitation**:
  - Steps:
    1. Control over return address
    2. Get the address of Libc
    3. Use that to get the address of system()
    4. Call system() with arguments
    5. Achieve successful exploitation
- **ROP Gadgets**:
  - Tools: ROPGadget, Ropper, Z3
  - Manually searching and custom tools
  - Handling bad bytes

### Getting the Address of Libc
- **Tools**: pwntools
- **Process**:
  - Dump all got.plt symbols
  - Search through ROP gadgets for uses
  - ROP gymnastics to dereference it

```python
for x in elf.plt:
    print(x)
```

This document provides a comprehensive overview of our research and findings related to the security of embedded devices, specifically focusing on the Segger J-Link debug probe and its associated software.