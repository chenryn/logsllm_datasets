targeted machines represents a challenge.
We ﬁnd that malware generates its listening port in three
ways:
• Static. In this case, the malware always opens a ﬁxed
port number, which might be deﬁned in a conﬁgura-
tion ﬁle or is embedded in the binary. For example,
Nugache [50] always listens on TCP port 8.
• Algorithmically deterministic.
In this case, the mal-
ware uses some algorithm to generate a host-speciﬁc
port number. This algorithm can take various param-
eters, e.g., IP address and time. Conﬁcker.C belongs to
this type [2]. We envision that more future malware
might use this advanced feature because it removes
the need of some central servers or super peers to col-
lect port information and then coordinate/distribute
among other nodes for bootstraping peer discovery in
traditional P2P malware.
• Random. The malware listens on some randomly gen-
erated port. In this case, our probing scanner will have
to utilize existing network traﬃc monitoring or port
scanners to identify the opened ports on end hosts.
With the widely deployed network monitoring and scan-
ning tools already available to network administrators,
this should not be a signiﬁcant issue.
Thus, an eﬀective solution should tell us the portprint
type of a given malware program (static, random, or algo-
rithmically deterministic). Furthermore, it should provide
the port generation logic/algorithm P1 (particularly when
it is algorithmically deterministic) and the knowledge of the
environment it depends on (e.g., IP/Mac address, machine
name, or system time).
In this case, given a new target
machine i to scan, we can run the same portprint logic P1,
simulating environment ei on machine i as the input param-
eters to generate the target port.
The problem of determining the type of portprints and
the sources of portprints can be solved by using well-known
taint analysis techniques [13,51,56]. However, diﬀerent from
most traditional forward taint analysis work [13,56] to solve
known-sources-to-unknown-sinks problems, our problem is
essentially many-unknown-sources-to-one-known-sink. Thus,
we start from the port number and perform oﬄine backward
taint analysis to obtain the complete data dependence ﬂow
for the port generation. Based on the semantic meaning of
the sources, we can determine the portprint type, and the
necessary environment parameters that will contribute to
the port generation. Furthermore, to extract the portprint
583generation logic P1 as an independent program, we apply
classic backward program slicing techniques [40] in a similar
way to related work [16, 36, 37].
In short, since our tech-
niques on extracting portprint are mostly on top of existing
work [13, 16, 36, 37, 51, 56], we put some detailed description
in our extended technical report [55] and the rest of the
paper will mainly focus on the second challenge.
Challenge 2: Eﬃciently Exploring and Extracting
MCB Paths Inside P2. Regarding the packet parsing
logic P2 inside P , we aim to ﬁnd all possible execution paths
that start from packet receiving routines (e.g., recv()) to
packet transmitting routines (e.g, send()). This is a basic
requirement for candidate MCB paths, because as we men-
tioned before, we assume a well-constructed MCB probing
packet ρ can trigger a speciﬁc response η along a MCB path.
Thus, the problem becomes how to eﬃciently ﬁnd all pos-
sible MCB paths in P ? It seems that existing multipath ex-
ploration approaches [15,42] could be applied directly. How-
ever, these approaches typically follow a depth-ﬁrst search
scheme and randomly choose a path when reaching any
branch point. As a result, if they are used in our applica-
tion, they will blindly explore all possible (although mostly
unnecessary) paths to ﬁnd desired MCB paths. Compared
with these traditional trigger-to-unknown-behaviour explo-
ration model, our problem is better deﬁned as trigger-to-
one-response model. Essentially, the goal of traditional mul-
tipath exploration approaches is mainly to excavate dormant
behaviour, which is quite diﬀerent from our goal.
Our proposed solution, Informed enforCed Execution(ICE),
combines both forced execution [54] and concrete/symbolic
execution [15, 42, 51] techniques to improve the eﬀectiveness
and eﬃciency in ﬁnding MCB paths. During execution,
ICE ﬁrst takes a breadth-ﬁrst search approach to quickly
obtain an overview on the packet processing procedure be-
fore going into any depth (sub-functions). Furthermore, ICE
employs directed search when exploring paths at branch
points with the intuition that some paths containing cer-
tain functions/calls are more likely MCB paths. Examples
of these functions include those that directly call send(),
or indirectly call functions that wrap send() (several lay-
ers of wrapping is possible here). We speciﬁcally deﬁne
function containers (F C) to refer to such functions that
when called they will reach our desired network routines
such as send(). Code blocks leading to those F Cs that end
with valid network transmission such as send() are preferred
when exploring paths. Moreover, a special type of F Cs will
denote functions that lead to network/process termination
such as closesocket() and exitprocess() without send-
ing out network information. Code blocks leading to these
F Cs should be given lower priorities. Basically, ICE auto-
matically creates and maintains the list of diﬀerent F Cs and
uses them to make the best possible decision at any branch
point. When exploring new paths at a branch point, ICE
has a Foreseeing step to analyze the next k code blocks to
decide the priority of branches to take. Generally speaking,
ICE will prefer the branch containing high priority F Cs and
then force the execution towards that path. We discuss the
detailed exploration algorithm in Section 3.
3. MCB PROBING EXTRACTION
3.1 ICE: Efﬁcient Path Exploration
As stated earlier, the problem of ﬁnding candidate MCB
paths is diﬀerent from the problem of traditional multipath
exploration.
In particular, as discussed in previous work
[21], path exploration without any high-level semantic guid-
ance is ineﬃcient. In our context, we introduce three novel
exploration guidelines to eﬃciently identify MCB paths: (1)
Enlarge the sinkhole hit range using Function Containers;
(2) Make wise decision on branch points by Foreseeing; (3)
Complete the MCB path through Stitched Dynamic Sym-
bolic Execution.
Collecting Function Containers Inside Malware.
Blindly (randomly) exploring paths inside malware is not
eﬃcient in our context. Thus, we employ directed path ex-
ploration techniques for ﬁnding candidate MCB paths. Since
a MCB path has some desired patterns, e.g., typically con-
taining a sinkhole point of network transmission routines
such as a send library call, it makes sense to choose paths
that likely reach these sinkholing routines. In particular, to
expand such limited small number of sinkholing routines to
a larger hit surface, we introduce the concept of Function
Containers to assist directed exploration.
Deﬁnition A function container is a function satisfying
any of the following conditions:
(I) Any desired sinkholing system/library calls are automat-
ically function containers, i.e., SysCalldesired ∈ F C;
(II) The function directly or indirectly contains/wraps an ex-
isting function container. Furthermore, the call of this FC
will lead to the call of SysCalldesired.
In this deﬁnition, SysCalldesired refers to interesting, crit-
ical system/library calls that will be typical sinkhole points,
e.g., send() and closesocket(). Condition II implies that
one FC can be wrapped by another FC, i.e., FCs can have
multiple levels. One example of Conﬁcker’s send-out rou-
tine is shown in Figure 2(a), which illustrates four separate
FCs (at diﬀerent levels). Condition II also implies that the
call of a FC will invoke the desired system call. Although
this is very hard to verify without source code or full static
analysis, in this paper, we approximate this condition if it
holds in all our recorded dynamic traces.
Function containers can be analyzed with current static
analysis techniques but are harder to completely construct
based on dynamic analysis only. To initialize our FC ta-
ble, we take advantage of the malware execution traces that
our malware analysis environment generates. Often, we ﬁnd
that malware sends out packets to contact peers and initial-
ize its membership in the P2P network. This initial activ-
ity is valuable, because the networking code used for these
packets is typically the same that is used by the P2P service
logic. Thus, these initial traces typically allow us to deter-
mine which functions are used for network traﬃc. Conﬁcker
is one typical example. For each trace, we collect both con-
trol and data ﬂow information to conduct the automatic
oﬄine analysis. If we ﬁnd our desired system/library calls,
we trace back the call frames and extract a set of n level
containers and record them into our initial FC hashtable.
During the online path exploration, we follow a breadth-
ﬁrst principle and enforce the execution towards code blocks
containing high priority FCs (e.g., those will lead to network
584(a) Diﬀerent Levels of Functional Containers
(b) Path Foreseeing
Figure 2: ICE Illustration
transmission routines). At the same time, we also update
our FC hashtable if our initial FCs collection is not correct
or not complete. We use two policies to update the FC
hashtable: (1) If one trace shows that after entering a certain
FC the trace does not lead to the desired system/library call,
we delete it and its upper level FCs from the FC list (since
it violates condition II);2 (2) If we ﬁnd one critical system
call executed but not yet deﬁned in the FC hashtable, we
create a new set of level-n containers for this system call.
Foreseeing. As shown in Figure 2(b), our dynamic analy-
sis needs to make decisions at each branch point to determine
which path to take/prefer. We leverage Foreseeing for this
purpose.
In detail, we foresee (statically look forward) k code blocks
to search for the calls to any recorded function container.
As seen in Figure 2(b), if a high priority FC is contained
in a code block, ICE assigns a priority score of +1 for the
block. Similarly, it assigns −1 in the case of encountering a
low priority FC. Then, ICE simply sums up the total prior-
ity scores Λ among all code blocks in the Lef t and Right
branches and gives preference to the branch with the overall
higher priority score. We enforce the branch decision [54] at
such branches and repeat the foreseeing till we hit a target
FC. To prevent exploring the same path again, we set the
code block that we have explored as low priority. For the
case that priority score Λr = Λl, the exploration follows the
natural execution choice. However, ICE will remember the
decision point and go back to explore the other branch later.
When trying to ﬁnd a new MCB path (a path from a re-
ceive to a send function), ICE starts from the snapshot at
the recv() call and obtains the unexplored path information
from a decision queue, which saves all the explored and un-
explored branch information.
ICE continues until (1) the
queue is empty, (2) or a user-deﬁned threshold θ of maxi-
mum MCB candidate paths is reached.
Loops and Indirect Jumps. One challenging issue of
ICE is to handle control ﬂow constructs such as loops and
indirect jumps. For indirect jumps, our foreseeing operation
may fail to predict the possible target. For loops, the pri-
ority score may be inappropriately set, which might lead to
incorrect MCB paths. Thus, we need to detect such con-
2Note that the program execution after entering the FC is
nature (i.e., not enforced) because we need to update the FC
tables based on whether the natural execution of FC directs
to the target system call or not.
trol ﬂow logic and take special handling. Whenever our
online execution module detects that one possible branch
goes back to recorded addresses (loop) or jumps to certain
variable addresses, e.g., jmp eax, we stop foreseeing and let
the program execute naturally.
However, the basic execution may not work properly at
all if the target address of an indirect jump or the number
of loop iterations is incorrect (inconsistent) due to the pre-
vious forced execution. Thus, we have to perform special
handling for loops and indirect jumps in ICE. For indirect
jumps, we need to determine whether the probing packets
contribute to the generation of the jump target. To do that,
we perform concrete and symbolic execution. More speciﬁ-
cally, we treat each byte of the probing packets as a symbol
and track its propagation.
If these bytes are used in in-
direct jumps, e.g., propagating to eip, we deduce symbolic
equations at the point of indirect jumps. We will try to solve
the symbolic equation and enumerate the possible target ad-
dresses. Then, we switch back to our online execution mode,
analyze these possible target addresses, ﬁlter out impossible
branches (if disassembled instructions at these addresses are
invalid), and continue the execution to explore further paths.
Similarly, for loops, we try to ﬁgure out whether symbolic
input bytes are propagated to the loop counter. If so, we
adopt a similar idea introduced in [47] to perform symbolic
execution.
Stitched Dynamic Symbolic Execution. Because of
our breadth-ﬁrst exploration scheme, some MCB paths re-
turned by ICE are probably not complete, with some func-
tions not fully explored (in depth). Our next step is to com-
plete the full MCB path by adding (or stitching) back these
unexplored sub-paths. It turns out to be not a straightfor-
ward issue. This is because when entering these sub-paths,
there might be again multiple diﬀerent paths to explore (as
illustrated in Fig. 3), and it is likely that only one (or some)
execution path(s) can correctly (consistently) stitch back to
the main upper layer MCB path (others will lead to other
paths that deviate from the MCB one).
Another issue we need to handle is to ﬁlter invalid MCB
paths returned in the previous step. These paths will never
be actually executed by receiving probing packets but they
are generated as artifacts due to the enforced execution.
Thus, we need to ﬁlter them.
Both issues mentioned above are related to identifying cor-
rect MCB (sub-)paths and discarding irrelevant ones. We
solve both issues using a combination of concrete and sym-
585Safe MCB Probing. Among all MCB probing packets,
there is one type we refer to as Safe MCB Probing. Simple
examples of this kind of packets include error messages that
are mainly triggered when there are wrong commands/oper-
ations. A safe probing packet implies that the malware does
not execute any problematic (dangerous) operation along
this path but already exposes itself in a unique way. In our
implementation, we simply identify the length of the cor-
responding trace and system calls recorded in the trace. If
these traces contain no dangerous system calls and the trace
length is shorter than others, we consider this corresponding
packet as potential safe MCB probing.
Limitations.
ICE suﬀers from some of the problems in
existing multipath explorations approaches [15,42,44] due to
the dynamic analysis nature. For example, one issue lead-
ing to some undiscovered control ﬂow is shown in Fig. 4. If
malware has diﬀerent functions (A and B) to parse packets,
based on diﬀerent system conﬁgurations, e.g., configure_A
and configure_B, ICE may only generate one possible MCB
path that is observed during the execution and thus fail to
probe machines with the other conﬁguration. This prob-
lem could be solved by taking into account environment-
sensitive/implicit control ﬂows, which we leave for future
work.
1
2
3
4
I f
c o n f i g u r e A==TRUE:
p r o c e s s A ( r e c e i v e d p a c k e t b u f f e r )
I f
c o n f i g u r e B==TRUE:
p r o c e s s B ( r e c e i v e d p a c k e t b u f f e r )
Figure 4: Example of Undiscovered Control Flow
3.2 Veriﬁer: Filtering False Positive Cases