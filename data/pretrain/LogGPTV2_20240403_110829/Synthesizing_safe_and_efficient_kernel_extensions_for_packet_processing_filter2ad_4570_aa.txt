title:Synthesizing safe and efficient kernel extensions for packet processing
author:Qiongwen Xu and
Michael D. Wong and
Tanvi Wagle and
Srinivas Narayana and
Anirudh Sivaraman
Synthesizing Safe and Efficient Kernel Extensions
for Packet Processing
Qiongwen Xu1, Michael D. Wong2, Tanvi Wagle1, Srinivas Narayana1, Anirudh Sivaraman3
1Rutgers University
2Princeton University
PI:EMAIL
3New York University
1
2
0
2
l
u
J
4
1
]
I
N
.
s
c
[
2
v
2
2
0
0
0
.
3
0
1
2
:
v
i
X
r
a
ABSTRACT
Extended Berkeley Packet Filter (BPF) has emerged as a powerful
method to extend packet-processing functionality in the Linux
operating system. BPF allows users to write code in high-level
languages (like C or Rust) and execute them at specific hooks in the
kernel, such as the network device driver. To ensure safe execution
of a user-developed BPF program in kernel context, Linux uses an
in-kernel static checker. The checker allows a program to execute
only if it can prove that the program is crash-free, always accesses
memory within safe bounds, and avoids leaking kernel data.
BPF programming is not easy. One, even modest-sized BPF pro-
grams are deemed too large to analyze and rejected by the kernel
checker. Two, the kernel checker may incorrectly determine that a
BPF program exhibits unsafe behaviors. Three, even small perfor-
mance optimizations to BPF code (e.g., 5% gains) must be meticu-
lously hand-crafted by expert developers. Traditional optimizing
compilers for BPF are often inadequate since the kernel checker’s
safety constraints are incompatible with rule-based optimizations.
We present K2, a program-synthesis-based compiler that au-
tomatically optimizes BPF bytecode with formal correctness and
safety guarantees. K2 produces code with 6–26% reduced size,
1.36%–55.03% lower average packet-processing latency, and 0–4.75%
higher throughput (packets per second per core) relative to the best
clang-compiled program, across benchmarks drawn from Cilium,
Facebook, and the Linux kernel. K2 incorporates several domain-
specific techniques to make synthesis practical by accelerating
equivalence-checking of BPF programs by 6 orders of magnitude.
1 INTRODUCTION
The CPU efficiency of processing packets at servers is of paramount
importance, given the increasing volumes of data from large-scale
applications, the stagnation of Moore’s law, the monetization of
CPU cores in cloud computing, and the stringent throughput and
latency requirements of high-end applications. The networking
community has responded with several efforts, including inno-
vations in operating system packet-processing [53, 58, 81, 125],
user-space stacks [45, 47, 64, 87, 104, 116, 122], and programmable
NIC offloads [15, 22, 24, 25, 74, 76].
Recently, extended Berkeley Packet Filter (BPF) has emerged
as a popular method to achieve flexible and high-speed packet
processing on the Linux operating system. With roots in packet
filtering in the early 90s [106], BPF has since evolved into a general-
purpose in-kernel virtual machine [59, 83] with an expressive 64-bit
RISC instruction set. BPF code1 has been widely deployed in pro-
duction systems—implementing load balancing [56, 130], DDoS
1In this paper, we use the term BPF throughout to denote the extended version of BPF,
rather than “classic” BPF used to write packet filters.
1
protection [71], container policy enforcement [90], application-
level proxying [21], intrusion-detection [70], and low-level system
monitoring [42, 80]. Every packet sent to Facebook [130] and Cloud-
Flare [71] is processed by BPF software.
BPF enables users to extend the functionality of the operating
system without developing kernel software [79]. The user writes
code in a high-level language (e.g., C, Rust), and uses a standard
compiler toolchain (e.g., Clang-9) to produce BPF bytecode. The op-
erating system leverages an in-kernel static checker, which analyzes
the BPF bytecode to determine if it is safe to run in kernel context.
Specifically, the checker attempts to prove that the program termi-
nates, does not crash, does not access kernel memory beyond safe
permitted bounds, and does not leak privileged kernel data. If the
program is proved safe by the kernel checker, it is downloaded into
kernel memory and run without any additional run-time checks.
Otherwise, the program is rejected. BPF programs can be executed
within several performance-critical parts of the packet-processing
stack [103], like the network device driver [83], traffic control [54],
congestion control [92], and socket filters [106].
BPF is unique in the combination of flexibility, safety, and per-
formance it enables for packet processing. Unlike a kernel module
that may potentially crash the kernel or corrupt kernel memory, a
BPF program accepted by the kernel checker is guaranteed not to
misbehave, assuming that the checker and the BPF run-time are bug-
free. Unlike kernel-bypass stacks, BPF does not pin CPU cores, and
retains the user-kernel privilege separation and standard manage-
ment tools (e.g., tcpdump) available on operating systems [83, 123].
Despite the promises of BPF, it is not easy to develop high-quality
packet-processing code in BPF today. We outline three challenges.
Challenge 1: Performance. Optimizing the performance of BPF
code today is tantamount to optimizing assembly code. Userspace
profiling tools do not exist. Optimization support in compilers is
inadequate. For the benchmarks we tested, the standard compila-
tion toolchain (based on Clang-9) produced identical code under
optimization flags -O2 and -O3, missing opportunities available to
optimize the -O2 code (§8). Anecdotally, it is known that even expert
developers have to put in painstaking work to improve performance
of BPF code by small margins [49, 91, 121]. Yet, small improvements
are worthwhile: reducing even a few clock cycles per packet is cru-
cial to meeting the line rate at high speeds given the limited budget
of CPU clock cycles available to process each packet [23, 72, 83]. Fur-
ther, cutting the CPU usage of networking decreases interference
to workloads co-hosted on the same machine [37, 96].
Challenge 2: Size. Running BPF programs beyond a modest size
poses challenges. The kernel checker limits the complexity2 of
2Older kernels (prior to v5.2) rejected programs with more than 4096 BPF bytecode
instructions. On modern kernels, this limit is still applicable to non-privileged BPF
program types [34] such as socket filters and container-level packet filters [35]. Since
arXiv, July 14, 2021
Qiongwen Xu et al.
the programs that it deems acceptable [27, 88] to keep the time it
takes to load user programs small. In practice, programs with even
a few thousand instructions end up being rejected [29]. Further,
hardware platforms supporting BPF offload are very sensitive to
program size, given their limited amount of fast memory to hold the
program [121]. Compiler support for code compaction is deficient:
for most of our benchmarks, we found that clang -Os produces
code of the same size as clang -O2. The only recourse for developers
under size pressure is to refactor their program [3, 10, 28].
Challenge 3: Safety. It is difficult to get even small programs past
the kernel checker. The checker’s static analysis is incomplete
and imprecise: it rejects many programs which have semantically-
equivalent rewrites that can be accepted (§6). This makes it tricky
to develop compilers that produce runnable BPF bytecode. The
developers of Clang’s BPF backend work specifically towards pro-
ducing instruction sequences that the kernel checker will accept,
e.g., [14, 16–19]. Producing checker-acceptable code is a major chal-
lenge in designing a BPF backend to the gcc compiler [60, 67].
Fundamentally, generating optimized, compact, and safe BPF
code is challenging due to the incompatibility between checker-
enforced safety restrictions and rule-based optimizations (§2.2). We
call this the phase-ordering problem in BPF compilation: producing
safe, checker-acceptable code precludes many traditional rule-based
optimizations. Conversely, applying optimizations produces code
that the kernel checker rejects.
A synthesis-based compiler. We present K2, a compiler which uses
program synthesis to automatically generate safe, compact, and
performant BPF bytecode, starting from unoptimized bytecode. Pro-
gram synthesis is the task of searching for a program that meets a
given specification [38]. An example of a specification is that the
outputs of the synthesized program must match that of a source pro-
gram on all inputs. Synthesis works by searching through the space
of programs, typically guided by user-provided restrictions on the
structure of the synthesized program. For example, the synthesizer
may search for programs that fit a user-defined grammar [131, 132],
use smaller library components [82, 89], or use a low-level instruc-
tion set [41, 112, 117, 126].
While traditional compilers are designed to emit “reasonable”
code within a small time budget, synthesis-based compilers can
produce high-quality code by searching the space of programs
more extensively over a longer time period. We believe that the
longer compilation time is worthwhile for BPF programs, given their
prevalence in deployed systems, their sensitivity to performance,
the difficulty of achieving even small performance gains, and their
portability across machines and architectures [20, 113].
K2 makes three contributions.
Contribution 1: Stochastic synthesis for BPF (§3). K2 adapts sto-
chastic synthesis [55, 127, 129] to the domain of the BPF instruction
set. At a high level, the algorithm runs a Markov chain to search for
programs with smaller values of a cost function that incorporates
correctness, safety, and performance. A new candidate program
kernel v5.2, there is a limit of 1 million [13, 34] on the number of instructions examined
by the checker’s static analysis, which is a form of symbolic execution [57] with
pruning heuristics. Unfortunately, the number of examined instructions explodes
quickly with branching in the program, resulting in many programs even smaller than
4096 instructions long being rejected due to this limit [30–33, 36].
2
is synthesized probabilistically using one of several rewrite rules
that modify the current state (program) of the Markov chain. The
Markov chain transitions to the new state (synthesized program)
with a probability proportional to the reduction in the cost relative
to the current program. We show how we set up K2 to optimize
programs with diverse cost functions under safety constraints. We
have incorporated several domain-specific rewrites to accelerate
the search. At the end of the search, K2 produces multiple optimized
versions of the same input program.
Contribution 2: Techniques to equivalence-check BPF programs
(§4, §5). K2 synthesizes programs that are formally shown to be
equivalent to the original program. To perform equivalence-checking,
we formalize the input-output behavior of BPF programs in first-
order logic (§4). Our formalization includes the arithmetic and logic
instructions of BPF handled by earlier treatments of BPF [77, 114,
115, 137], and goes beyond prior work by incorporating aliased
memory access (using pointers) as well as BPF maps and helper
functions (§2). Equivalence-checking occurs within the inner loop
of synthesis, and it must be efficient for synthesis to remain practi-
cal. We present several domain-specific techniques that reduce the
time required to check the input-output equivalence of two BPF
programs by five orders of magnitude (§5). Consequently, K2 can
optimize real-world BPF code used in production systems.
Contribution 3: Techniques to check the safety of BPF programs
(§6). At each step of stochastic search, K2 evaluates the safety of
the candidate program. K2 incorporates safety checks over the
program’s control flow and memory accesses, as well as several
kernel-checker-specific constraints. To implement these checks,
K2 employs static analysis and discharges first-order-logic queries
written over the candidate program.
K2 resolves the phase-ordering problem of BPF compilation by
considering both performance and safety of candidate programs at
each step of the search. While K2’s safety checks have significant
overlap with those of the kernel checker, the two sets of checks
are distinct, as the kernel checker is a complex body of code that
is under active development [26]. It is possible, though unlikely,
that K2 deems a program safe but the kernel checker rejects it. To
guarantee that K2’s outputs are acceptable to the kernel checker,
K2 has a post-processing pass where it loads each of its best output
programs into the kernel and weeds out any that fail the kernel
checker. While the existence of this pass may appear to bring back
the phase-ordering problem, it is merely a fail-safe: as of this writing,
all of K2’s output programs resulting from the search already pass
the kernel checker.
K2 can consume BPF object files emitted by clang and produce
an optimized, drop-in replacement. We present an evaluation of
the compiler across 19 programs drawn from the Linux kernel,
Cilium, and Facebook. Relative to the best clang-compiled variant
(among -O2/-O3/-Os), K2 can reduce the size of BPF programs by
between 6–26%, reduce average latency by 1.36%–55.03%, and im-
prove throughput (measured in packets per second per core) by
0–4.75%. This is in comparison to a state of the art where signif-
icant effort is required from expert developers to produce 5–10%
performance gains [91, 130].
Synthesizing Safe and Efficient Kernel Extensions for Packet Processing
arXiv, July 14, 2021
K2 is an existence proof that domain-specific application of pro-
gram synthesis techniques is a viable approach to automatically op-
timizing performance-critical packet-processing code. We call upon
the community to explore such technology to alleviate the developer
burden of improving performance in other contexts like user-space
networking and programmable NICs. K2’s source code, including all
of our experimental scripts, is available at https://k2.cs.rutgers.edu/.
2 BACKGROUND AND MOTIVATION
2.1 Extended Berkeley Packet Filter (BPF)
BPF is a general-purpose in-kernel virtual machine and instruction
set [59] that enables users to write operating system extensions for
Linux [79]. A standard compiler (e.g., Clang-9) can be used to turn
C/Rust programs into BPF bytecode, whose format is independent
of the underlying hardware architecture.
BPF programs are event-driven. BPF bytecode can be attached to
specific events within the operating system, such as the arrival of a
packet at the network device driver [83], packet enqueue within
Linux traffic control [94], congestion control processing [92], and
socket system call invocations [103].
Stateful functionality is supported using BPF helper functions.
Helper functions are implemented as part of the kernel and can
be called by the BPF program with appropriate parameters. For
example, there are helper functions that provide access to persis-
tent key-value storage known as a map. The map-related helper
functions include lookup, update, and delete. The arguments to the
map helpers include pointers to memory and file descriptors that
uniquely identify the maps. The list and functionality of helpers in
the kernel are steadily increasing; there are over 100 helpers in the
latest kernel as of this writing [95].
The BPF instruction set follows a 64-bit RISC architecture. Each
program has access to eleven 64-bit registers, a program stack of size
512 bytes (referred to by the stack pointer register r10), and access to
the memory containing program inputs (such as packets) and some
kernel data structures (e.g., socket buffers). The BPF instruction set
includes 32 and 64-bit arithmetic and logic operations, signed and
unsigned operations, and pointer-based load and store instructions.
BPF programs can be executed efficiently by leveraging just-in-time
(JIT) compilation to popular architectures like x86_64 and ARM.
BPF is not intended to be a Turing-complete language; it does not
support executing unbounded loops. User-provided BPF programs
are run directly in kernel context. To ensure that it is safe to do so,
Linux leverages an in-kernel static checker.
2.2 Phase Ordering in BPF Compilers
We illustrate why it is challenging to optimize BPF bytecode while
simultaneously satisfying the safety constraints enforced by the
kernel checker. These examples emerged from our experimentation
with the checker in kernel v5.4. In the programs below, we use
r0 ... r9 for general-purpose BPF registers. r10 holds the stack
pointer.
Example 1. Invalid strength reduction. The sequence
bpf_mov rY 0
bpf_stx rX rY
// rY = 0
// *rX = rY
3
for some registers rX ≠ rY can usually be optimized to the simpler
single instruction
bpf_st_imm rX 0
// *rX = 0
However, the kernel checker mandates that a pointer into the pro-
gram’s “context memory” [9] cannot be used to store an immediate
value. If rX were such a pointer, the program would be rejected.
Example 2. Invalid coalescing of memory accesses. Consider the
instruction sequence
bpf_st_imm8 rX off1 0
bpf_st_imm8 rX off2 0
// *(u8*)(rX + off1) = 0
// *(u8*)(rX + off2) = 0
where rX is a safely-accessible memory address, and off1 and off2
are offsets such that off2 = off1 + 1. Usually, two such 1-byte writes
can be combined into one 2-byte write:
bpf_st_imm16 rX off1 0
// *(u16*)(rX + off1) = 0
However, the kernel checker mandates that a store into the stack
must be aligned to the corresponding write size [8]. If rX is r10, the
stack pointer, and off1 is not 2-byte aligned, the checker will reject
the rewritten program.
In general, applying optimizations that pass the checker’s con-
straints requires compilers to be aware of the specific restrictions
that impact each optimization. The checker has numerous restric-
tions [5, 6], making it tedious to consider the cross-product of
optimizations and safety conditions.
2.3 K2: A Program-Synthesis-Based Compiler
We present K2, a compiler that leverages program synthesis to con-
sider correctness, performance, and safety of programs together
rather than piecemeal, to resolve the phase-ordering problem be-
tween efficiency and safety in BPF optimization.
Program synthesis is the combinatorial search problem of finding
a program that satisfies a given specification. Appendix A overviews
program synthesis approaches in the literature. Given a sequence
of instructions in the BPF bytecode format, we are interested in syn-
thesizing an alternative sequence of BPF instructions that satisfies
the specification that: (i) the synthesized program is equivalent to
the source program in its input-output behavior, (ii) the synthesized
program is safe, and (iii) the synthesized program is more efficient
than the source program. The precise definitions of efficiency and
safety will be discussed in §3 and §6.
Fig. 1 presents an overview of K2, which synthesizes programs
satisfying the specification above. K2 consumes Clang-compiled