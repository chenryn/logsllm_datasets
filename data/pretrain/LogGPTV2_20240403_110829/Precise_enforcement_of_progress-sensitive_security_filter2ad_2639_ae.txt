### Establishing and Extending Techniques for Reasoning About Program Termination and Progress Channels

We have established that techniques for reasoning about program termination can be adapted to reason about progress channels. Additionally, we extended the Jif compiler [35] to track information flow via progress channels and analyzed a Jif application. Our findings indicate that it is feasible to enforce progress-sensitive security conditions for security-critical applications. Below, we provide the details of our evaluation.

### 7.1 Prototype Implementation

Our prototype termination oracle is based on the work by Chawdhary et al. [14], which employs a form of logical abstract interpretation over a specialized abstract domain for termination. A notable advantage of this analysis is its performance, which surpasses analyses based on binary reachability (e.g., Terminator [19]). The analysis is parameterized over an algorithm for discovering termination arguments. We use the linear rank synthesis algorithm by Podelski and Rybalchenko [38], as instantiated by Chawdhary et al. Our termination analysis leverages the z3 SMT solver [1] for linear rank synthesis and for eliminating spurious program paths.

To enhance our prototype, we incorporated a simple constant propagation analysis applied to low variables when casts are encountered at runtime. This allows us to find termination arguments that depend on the current runtime values of low variables. We used our implementation to validate the security of all examples in this paper. Analyzing a program like the one in Listing 4 resulted in 31 calls to z3, with an overall time of under 0.8 seconds on a machine with a 2.4 GHz CPU. For more complex programs, this overhead will likely increase. However, for subprograms that always terminate, such as the one in Listing 4, the analysis can be performed statically ahead of time. We discuss related work that could improve performance in Section 8.

Currently, our approach does not account for the output history of the program, which means we cannot achieve the tight bound on budget consumption for the example in the beginning of Section 5. Implementing a more precise oracle that considers the output history is deferred to future work.

### 7.2 Audit of Progress Channels in Civitas

Civitas [18] is a remote voting system that provides verifiable results while protecting voter confidentiality. The security of Civitas relies on two factors: strong properties of the underlying cryptographic protocols and information flow guarantees of the implementation. To address the latter, Civitas is implemented in Jif [35], a security-typed language that enforces a progress-insensitive security condition.

We hypothesized that, despite Jif providing only progress-insensitive guarantees, Civitas (and most other security-typed programs) satisfy a stronger, progress-sensitive security condition. To evaluate this claim, we extended Jif with our multi-level security type system to track progress channels within methods. We focused on intra-procedural progress channels and ignored inter-procedural ones. We identified 66 loops in the Jif standard library and 89 loops in Civitas that require casts to secure possible progress channels. Loops that did not require casts were either dependent on public information or had no low side-effects within the containing method. We manually categorized each cast by the termination analysis necessary to demonstrate its security. Figure 8 summarizes our findings.

#### Termination Analysis
We discovered three simple termination bugs in the Jif standard library. The `containsAll` method of the `AbstractCollection` class uses a loop to iterate over elements but lacks an increment statement, causing it to diverge unless called with an empty collection. Similarly, both linked list implementations in the library have a loop for computing the hash code, but the current element is not advanced between iterations, leading to divergence for non-empty lists. These issues can inadvertently leak information in Jif programs using these methods.

The remaining loops always terminate, regardless of input, aligning with our initial intuition that most programs are intended to terminate and thus likely satisfy a stronger, progress-sensitive security condition. Encouragingly, the analysis necessary to prove the absence of progress channels is minimal. In Civitas, all but one of the loops we needed to secure were simple loops where the loop counter was a low-security variable, the loop bounds were unchanged, and the stride was constant. Such loops are easily proven to terminate with existing tools. The remaining loop uses a collection iterator from the standard library, and its termination could be proved directly with a more powerful tool or by appealing to a model of the standard library.

In the standard library, a heap-based termination analysis, e.g., [8], would be necessary for 35 of the 66 casts. While more complex, this analysis can be applied once for the library, and subsequent uses can rely on models that express the termination-relevant properties of collections as arithmetic operations [19].

From this audit, we conclude that strengthening the guarantees provided by security-typed languages is feasible, and non-malicious programs are likely to require minimal modification. Thus, it is reasonable to require progress-sensitive guarantees from real-world security-critical applications.

### 8. Discussion and Related Work

#### Declassification
The budgeted semantics and type system allow the attacker to learn a limited amount of secret information, a form of declassification. Recent work on language-based information flow has considered weakening noninterference using declassification policies to specify what information may be released, when, where, and by whom (see Sabelfeld and Sands [46] for a survey). Casts for which the oracle cannot determine termination or divergence can be considered a form of information release, revealing the termination behavior of the cast.

Existing security-type systems that enforce declassification policies (e.g., [45, 16]) enforce a progress-insensitive security condition. Even if these type systems were strengthened to enforce a progress-sensitive security condition by rejecting high-security loops (as in, e.g., [32]), it is unclear how declassification annotations may enforce a requirement that secret information is leaked only via the progress channel.

Consider a program with a loop guard explicitly declassified at each iteration:
```java
guard := declassify(h > 0)
while guard do {
    h := h − 1;
    guard := declassify(h > 0);
}
```
This program is accepted by the type system of [3]. However, because the loop guard is low after declassification, the type system also accepts a program that contains a low output in the loop body:
```java
guard := declassify(h > 0)
while guard do {
    h := h − 1;
    guard := declassify(h > 0);
    outputL(1);
}
```
This program reveals more information than just the fact that the loop terminates; it reveals the initial value of `h` if `h` is positive, similar to the example in Listing 1. Type systems designed to prevent information laundering [44, 2, 7, 33] reject this program due to the update to `h`, making them unsuitable for straightforward adaptation to progress sensitivity.

#### Progress (In)sensitivity
Recent work on language-based information flow often relies on progress-insensitive noninterference [4] as the target security condition. Demange and Sands [24] observe that progress-insensitive noninterference may be too weak for small secrets. They distinguish between small and big secrets and propose a coarse-grained type system that guarantees progress-sensitive security for small secrets and progress-insensitive security for big secrets. Our work can easily benefit from their approach.

Secure multi-execution [25, 29] addresses the problem of termination channels by enforcing strict isolation between outputs at different security levels. However, this comes at a high performance overhead and requires non-trivial modification of the program's semantics. It is unclear whether secure multi-execution can be applied to policies beyond noninterference. In contrast, our approach is minimally invasive and does not change the intended semantics of the program, enabling straightforward composition with other work on language-based information flow.

Progress-sensitive enforcement appears in concurrent information flow literature. Boudol's enforcement mechanism [10] is parametrized over a class of terminating programs but does not consider runtime information, and non-terminating programs are ruled out. Type systems in [48, 11, 41] enforce progress-sensitivity by permitting high loops but disallowing public side effects, similar to what one achieves in our language without the cast command.

Recent work by Stefan et al. [53] addresses termination channels by spawning background threads for high computations. A thread can wait upon a spawned computation to inspect its result, revealing whether the computation terminated and raising the security level of the waiting thread. This technique complements ours and relies on lightweight concurrency for efficiency. It may be an adequate alternative to halting program execution when the termination oracle fails or when the progress leakage budget is exhausted.

#### Integrity
While our technical development focuses on confidentiality, our results apply to integrity as well. Clarkson and Schneider [17] introduce two characterizations of integrity: contamination and suppression. Contamination occurs when untrusted input propagates to trusted output, and suppression occurs when the program's output omits correct output. We believe progress integrity attacks can be viewed as a form of suppression.

#### Termination Analysis
Our work is inspired by recent progress on static analyses for proving termination of realistic imperative programs [19, 31, 52]. As outlined in Section 7, our current prototype implementation uses the logical abstract interpretation for termination analysis by Chawdhary et al. [14], supporting programs with linear termination arguments. Because our language semantics are parameterized on an oracle for termination analysis, improvements in automated termination analysis will increase the precision of our enforcement mechanism. Results on proving termination for recursive programs [21] and programs with polynomial [23], bit-vector [22], and heap-based [8] termination arguments offer possibilities for further improving the precision of the termination oracle.

Recent work on conditional termination [20] statically computes preconditions under which a program terminates. Incorporating these results may lead to more efficient ways to incorporate low-security information at runtime.

#### Quantitative Bounds
Our budgeted semantics enforces a simple quantitative bound on the amount of information that may be leaked via a progress channel. Our information-theoretic bound of \(\log_2(B + 1)\) bits of progress leakage is similar to the bounds presented by Zhang, Askarov, and Myers [5, 57]. A logarithmic bound is also given by Rafnsson and Sabelfeld [40]; they buffer outputs and give the bound in the number of buffered output batches.

Much recent work on quantitative information flow focuses on what the attacker may learn about the secrets based on a single observation [49, 30]. Incorporating these results provides an interesting avenue for future work.

Smith and Alpizar study non-termination of probabilistic programs [50]. They show that when the probability of non-termination in well-typed programs is small, non-termination does not skew the probability distribution of low outputs. A key technical element of their proof machinery is a program transformation that eliminates all high computations. These results are particularly relevant for understanding computational security guarantees of programs that use cryptographic primitives (which would otherwise be formulated "modulo termination").

#### Timing Channels
Timing channels are known to be a dangerous covert channel in computer systems. Exploiting timing channels requires a strong adversary with access to an external clock to measure the timing of individual outputs. In contrast, our attacker model assumes a weaker but more widespread adversary limited to counting the number of low outputs. This model is common in both traditional and cloud-based batch services, such as map/reduce. Because our attacker model considers only a specific aspect of low observations, a more precise characterization of security is possible. The information-theoretic bound on the progress channel that we obtain in this work is tighter than the one used in general mitigation of timing channels [5, 57].

#### Auditing for Information Flow
Work on auditing systems for information flow violations focuses on explicit flow violations (e.g., [36]) or audits of authority decisions for declassification [39, 9, 15]. Our work provides means for auditing progress channel violations. The semantics for low outputs can be augmented to record and analyze these violations.