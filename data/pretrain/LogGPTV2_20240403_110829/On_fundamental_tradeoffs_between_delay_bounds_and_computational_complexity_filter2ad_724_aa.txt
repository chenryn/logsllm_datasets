title:On fundamental tradeoffs between delay bounds and computational complexity
in packet scheduling algorithms
author:Jun (Jim) Xu and
Richard J. Lipton
On Fundamental Tradeoffs between Delay Bounds and
Computational Complexity in Packet Scheduling
Algorithms∗
Jun Xu and Richard J. Lipton
College of Computing
Georgia Institute of Technology
{jx,rjl}@cc.gatech.edu
ABSTRACT
In this work, we clarify, extend and solve an open problem
concerning the computational complexity for packet schedul-
ing algorithms to achieve tight end-to-end delay bounds. We
ﬁrst focus on the diﬀerence between the time a packet ﬁn-
ishes service in a scheduling algorithm and its virtual ﬁn-
ish time under a GPS (General Processor Sharing) sched-
uler, called GPS-relative delay. We prove that, under a
slightly restrictive but reasonable computational model, the
lower bound computational complexity of any scheduling al-
gorithm that guarantees O(1) GPS-relative delay bound is
Ω(log2n) (widely believed as a “folklore theorem” but never
proved). We also discover that, surprisingly, the complexity
lower bound remains the same even if the delay bound is
relaxed to O(na) for 0  0 is Ω(log2n), under
certain reasonable conditions.
r +
r +
Lmax,i
Lmax,i
ri
ri
Though it is widely believed as a “folklore theorem” that
scheduling algorithms which can provide tight end-to-end
delay bounds require Ω(log2n) complexity (typically used
for maintaining a priority queue), it has never been care-
280fully formulated and proved. To the best of our knowledge,
our work is the ﬁrst major and successful step in establish-
ing such complexity lower bounds. Our initial goal was to
show that the Ω(log2n) delay bounds hold under the deci-
sion tree model that allows linear comparisons. Though we
are not able to prove this result in full generality, our rigor-
ous formulation of the problem and techniques introduced in
proving slightly weaker results serve as the basis for further
exploration of this problem.
The rest of the paper is organized as follows. In Section
2, we introduce the computational models and assumptions
we will use in proving our results. The aforementioned three
major results are established in Section 3, 4, and 5 respec-
tively. Section 6 concludes the paper.
2. ASSUMPTIONS AND COMPUTATIONAL
MODELS
In general, complexity lower bounds of a computing prob-
lem are derived based on problem-speciﬁc assumptions and
conditions, and a computational model that speciﬁes what
operations are allowed in solving the problem and how they
are “charged” in terms of complexity.
In Section 2.1, we
describe a network load and resource allocation condition
called CBFS (continuously backlogged fair sharing) under
which all later lower bounds will be derived. In Section 2.2,
we introduce two computational models that will be used
in Section 3 and 4, respectively. Finally in Section 2.3, we
discuss why decision tree computational models are chosen
for studying complexity lower bounds.
2.1 CBFS condition
All lower bounds in this paper will be derived under a
network load and resource sharing condition called continu-
ously backlogged fair sharing (CBFS). Let n be the number
of sessions and r be the total bandwidth of the link.
In
CBFS,
• (Fair Sharing) Each session has equal weight, that is,
for any 1 ≤ i  0 and 1 ≤ i ≤ n,
Ai(t) ≥ r
n t. Here Ai(t) is the amount of session i
traﬃc that has arrived during the interval [0, t].
We call the second part of the condition “continuously
backlogged” because if these sessions are served by a GPS
scheduler, they will be continuously backlogged from time
0. This is proved in the next proposition.
Proposition 1. For any packet arrival instance that con-
forms to the CBFS condition, each and every session will be
continuously backlogged when served by a GPS scheduler.
Proof. The proof is by contradiction. Suppose some ses-
sions may become unbacklogged at certain points of time.