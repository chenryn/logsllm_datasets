sponse to the user’s request. Second, the AS proves that
messages encrypted to KAS or digitally signed by K −1
AS
can only be read or created by the AS. This is because a
correct AS keeps security-sensitive data like K −1
AS sealed
so that only the trusted RECAP software can access it.
The user can verify this, because they can verify the ex-
act code the AS is running. Last, the AS also conveys
that it has received the user’s key, KU .
After creating the attestation, the AS sends the attes-
tation, nonce, its public key and its trusted computing
device endorsement certiﬁcate (Line 7). The endorse-
ment certiﬁcate is issued by a trusted computing de-
vice’s manufacturer and usually indicates that the private
component of a keypair is known only to that device.
This lets a veriﬁer conﬁrm that an attestation came from
a legitimate trusted computing device. The user’s en-
dorsement certiﬁcate also doubles as her unique identity,
which is discussed further in Section 5. At this point, the
user veriﬁes that the attestation is correct; if it is not, she
aborts the protocol (Lines 8–9). Otherwise, she encrypts
and signs her random number, and expects the AS to
increment it in response to prove that it can decrypt and
sign using K −1
AS (Line 10). It is worth noting that the ran-
dom number is generated and handled in plaintext form
only by the trusted RECAP code. In contrast, the nonce
used earlier was not a secret. In response, the AS sends
RU + 1 and its own random number (Line 11). When
the user receives its incremented random number, it be-
lieves that KAS is bound to the trusted RECAP code,
and is willing to send its endorsement certiﬁcate en-
crypted under that key as part of an attestation, because
the RECAP code will only disclose the user’s endorse-
ment certiﬁcate (which is also her unique identity) if she
breaks her contract. The user generates an attestation
which provides similar properties to the AS, and sends
it with its own endorsement certiﬁcate, and the AS’s in-
cremented random number (Lines 12–13). Upon receiv-
ing the incremented random number, the AS veriﬁes the
user’s attestation (Lines 14–15), and both parties then
switch to more efﬁcient symmetric cryptography (Line
16). This can be done with standard techniques [24].
4.2 Protocol Phases
is split
The RECAP protocol
into three phases:
the registration, anonymous communication, and breach
phases. The registration phase is required before a user
interacts with the SP. The anonymous communication
phase serves to mark messages as originating from a user
that has a valid contract. The breach phase takes place
when the SP wants to know who created messages that
are in violation of the contract.
Registration Phase RECAP begins with the user
connecting to the SP (Line 1 in Figure 2). The user will
not have a contract since it is her ﬁrst time connecting,
and indicates this in her initial message. The SP replies
with a message indicating that a contract is required to
use the service (Line 2). Speciﬁcally, the user must ob-
tain a contract from the SP-speciﬁed AS and the con-
tract must have the SP-speciﬁed contract policy (CP),
which is the policy that the user must agree to. If the
user agrees to abide by the CP, she connects to the AS
and begins to create a contract. Otherwise, she aborts.
We allow the SP to choose the policy, since that maps
most closely to existing services. However, an alternate
version of RECAP might be more ﬂexible, i.e., allow a
user to choose one of several policies, negotiate policy
terms, etc.
To obtain a contract, the client connects to the AS and
begins the U-AS protocol (Line 3). As was described in
Section 4.1, the user and AS establish a secure channel
(Lines 3–16). Once the channel is established, the client
sends the contract policy that the SP requires (Line 17).
The AS maintains a list of users that have been black-
listed by the SP, and aborts if one of those users is at-
tempting to re-register (Line 18).
At this point in the protocol (Line 19), the AS con-
1. AS:
2. AS → SP:
3. SP:
4. AS ← SP:
5. AS:
6. AS → SP:
7. SP:
8. SP:
AS-SP key binding protocol
R
← {0, 1}α
NAS
{KAS , NAS }
R
SP
← {0, 1}α
, KSP , CSP }
NSP
{{NSP , NAS }K−1
a ← GEN ATTEST(KSP |NSP |KAS |NAS )
{a, CEndorse−AS }
a′ ← EXP ATTEST(Trusted RECAP Code,
KSP |NSP |KAS |NAS )
abort if a 6= a′
Figure 3. The key binding protocol.
nects directly to the SP and executes the key binding
protocol shown in Figure 3. The key binding proto-
col allows the SP to ensure that the AS is running the
RECAP software, and to verify that K −1
AS is bound to
that software. This veriﬁcation is proof to the SP that
a user’s identity will be revealed if that user breaks her
contract. This protocol only needs to be executed once
per (AS,SP) pair, since the result can be cached. Note
that the key-binding protocol is similar to establishing
a secure channel as described in Section 4.1. The cen-
tral difference is there is no need to switch to symmet-
ric cryptography since no messages are transmitted after
the AS’s key is shown to be bound to the trusted AS
software.
After the key binding, the AS proceeds to create a
contract. The contract consists of the contract policy the
user agrees to, the public key of the user’s group signa-
ture group, and the SP’s public key. The AS sends the
contract and a group private key to the user (Figure 2,
Line 20). Finally, the user sends the contract to the SP,
and she is ready to start endorsing messages (Line 21).
Anonymous Communication Phase To endorse a
message, the user simply signs the message m using her
group private key K −1
GSK [i], and sends the signed mes-
sage to the SP (Line 21). When the SP receives a signed
message, it ensures that it has received a valid contract
with the corresponding group public key. The SP also
veriﬁes that the message has a valid signature by execut-
ing the group signature veriﬁcation operation (Line 22).
Breach Phase When a user generates message(s) that
violate the SP’s policies, the SP delivers the offending
message(s) to the AS. This protocol is shown in Fig-
ure 4. After establishing a secure channel (Lines 1–11),
the AS veriﬁes that the received messages are signed
by a group that the AS manages (Lines 12–13). Then,
the AS veriﬁes that the messages violate the contract
Breach protocol
R
← {0, 1}α, RAS
NAS
{KAS , NAS }
R
← {0, 1}α
R
R
AS
}KSP }
← {0, 1}α
← {0, 1}α, RSP
NSP
{KSP , NSP }
a ← GEN ATTEST(KSP |NSP |KAS |NAS )
{a, CEndorse−AS , {{RAS }K−1
a′ ← EXP ATTEST(Trusted RECAP Code,
KSP |NSP |KAS |NAS )
abort if a 6= a′
{{RAS + 1, RSP }K−1
{{RSP + 1}K−1
}KSP
Setup symmetric encryption and MAC
{m = {message1, σ1, . . . , messagen, σn}}
∀mi ∈ m, abort if
}KAS
AS
SP
1. AS:
2. AS → SP:
3. SP:
4. AS ← SP:
5. AS:
6. AS → SP:
7. SP:
8. SP:
9. AS ← SP:
10. AS → SP:
11.
12. AS ← SP:
13. AS:
GS VERIFY(KGPK , mi, σi, BL) = INVALID
14. AS:
15. AS:
16. AS → SP:
abort if CP (m) 6= VIOLATION
gid ← GS OPEN(K−1
{gid, RT [gid], GidToEKcert[gid]}
GMSK , msg1, σ1)
Figure 4. The breach protocol. The service
provider (SP) submits any messages sus(cid:173)
pected to be in violation of the contract to
the accountability server (AS). The AS veri(cid:173)
ﬁes the messages, and returns the identity
of the users that violated their contracts, if
any. All messages after Line 11 are implic(cid:173)
itly encrypted and MACed using symmet(cid:173)
ric cryptography.
(Line 14). The AS obtains the group private key2 that
violated the contract, by using the GS OPEN operation
(Line 15). It then reveals 1) the user’s group signature
revocation token, and 2) the user’s real identity to the
SP (Line 16). With that information, the SP can add
the user’s current group key to the group signature re-
vocation list so that messages signed with her anony-
mous credential will no longer be accepted. The SP can
also add the user’s real identity to a blacklist on the AS
that prevents the user from obtaining a new contract and
anonymous credential.
4.3 Security Overview
4.3.1 Trusted Computing
RECAP builds some of the properties required for a
contractual anonymity system from the properties of
trusted computing:
2We assume for simplicity here that all messages in violation of the
contract policy are signed with the same private key, i.e., that there is
only a single malicious user.
Contract-based and Revocability These
properties
rely on the trusted computing properties of attes-
tation, isolation, and sealed storage. The contract
policies can be fairly enforced by running the
trusted RECAP software in isolation and keeping
sensitive information in sealed storage, and then
proving this using attestation. This allows the
user and SP to ensure that the AS is running a
known-good implementation in hardware-assisted
isolation, e.g., that the AS behaves as described
in this paper and is not a malicious or incorrect
implementation.
4.3.2 Group Signatures
RECAP also inherits properties from group signatures:
Unlinkability Unlinkability
For
comes
directly
instance,
from
if
group signature properties.
the O(1)
revocation scheme is being used,
unlinkability with ǫ = 1
k comes from partial
unlinkability. If the O(|BL|) revocation scheme is
used, unlinkability with negligible ǫ comes from
selﬂess-anonymity. We discuss this choice further
in Section 8.4.
Contract-based Users must obtain anonymous cre-
dentials from the AS, who can hold each user ac-
countable to the contract policy. This follows from
traceability, which ensures a user cannot forge a
signature without having anonymous credentials.
Revocability Again from traceability, any signature
produced can be traced back to the key used to pro-
duce it. Thus, any message submitted by a user that
violates her contract can be traced back to that user.
That user can then be revoked from the service.
Protocol Correctness Although a formal security
proof of the RECAP protocol is outside the scope of
the paper, we note the protocol is similar to well-known
secure protocols. The high-level semantics of the proto-
col (e.g., actions that take place after the secure channel
is established) are straight-forward and can be manually
veriﬁed. The setup of the secure channel can be more
easily understood if one considers the basic steps of each
party. Speciﬁcally, each party performs the following
steps:
1. Attests to the code she is running in an isolated en-
vironment (Figure 2, Lines 6, 8, 12, and 14)
2. Sends her public key and certiﬁcate (Lines 4, 7, and
13)
3. Issues and responds to a challenge (Lines 10, 11,
and 13)
4. Sets up symmetric cryptography (Line 16).
In other words, our secure channel protocol is similar to
standard secure channel protocols (such as SSL 3.0), but
does not negotiate which ciphers are used3, and includes
attestations. For instance, a model checking approach
to verifying SSL has shown that the high level seman-
tics of SSL can be reduced to similar simple steps [25].
We leave the augmentation of existing similar security
proofs with our additional attestation and TPM steps as
future work.
5 Features
Anti-discrimination RECAP prevents a SP and its
AS from discriminating against anonymous users based
on their past messages. Previous systems with TTPs
have not appropriately limited the power of the TTP to
blacklist [8, 12, 13], and so the TTP could potentially
blacklist well-behaved users. For example, someone
could compromise the TTP and blacklist users, or bribe
the TTP itself to misbehave. Thus, such systems can
discriminate.
Previous TTP-free systems allowed subjective judg-
ing [31, 32], i.e., users can be blacklisted for any reason.
The ability to subjectively judge means that a SP can
block all future authentications from a user based on her
past actions. For example, a user could post a message
the SP dislikes, and the SP would be free to block all
future authentication. Thus, the SP could discriminate
against a user without knowing her real identity in such
systems.
In RECAP, anyone can verify that the AS will only
de-anonymize a user if her contract is violated. Further,
the AS seals each user’s real identity, which results in
an encrypted blob that can only be decrypted when the
trusted RECAP code is running in a veriﬁable execu-
tion environment. Thus, even if the untrusted part of the
RECAP software, the operating system, or the BIOS is
compromised, a collusion between the AS and SP can-
not reveal a behaving user’s real identity. RECAP also
provides unlinkability of multiple authentications. Thus,
a SP cannot discriminate against users who have not bro-
ken their contract. The SP would have to deny service
to all behaving users in order to deny service to one.
Veriﬁable Blacklists Blacklists are commonly used in
network services to block known malicious identities.
Current blacklists, however, typically do not provide
much information as to why a particular identity is on
the list. RECAP can easily be extended to implement
veriﬁable blacklists. We say a blacklist is veriﬁable if
each identity on the blacklist is accompanied by a proof
of the malicious activity that led to its being blacklisted.
During registration, a user and SP agree to the con-
tract policy. The user will register her trusted computing
device endorsement certiﬁcate CEndorse−U with the AS
and receive her anonymous credential K −1
GSK [i]. Dur-
ing contract breach, the AS is provided with a set of
signed messages that violate the contract. When pro-
vided with evidence of a breach, the AS responds with
both K −1
GSK [i] (so that subsequent messages from the
user can be identiﬁed) and CEndorse−U (so that the
blacklisted user cannot obtain a new anonymous creden-
tial).
In RECAP,
GSK [i], GEN ATTEST(K −1
the AS can publish those mes-
sages as proof that a breach has occurred to en-
the
able veriﬁable blacklists. More speciﬁcally,
AS publishes the tuple ({CP, KGPK , KSP }K−1
, M, σ,
K −1
GSK [i] → CEndorse−U )),
such that {CP, KGPK , KSP }K−1
is the user’s contract,
M and σ are the offending message(s) and signature(s),
and the AS attests to the fact that the anonymous creden-
tial (group signature private key) was issued to the ref-
erenced real identity. No trusted maintainer is required
because the blacklist entries contain proof that the con-
tract was violated.
AS
AS
Practical Unique Identiﬁers
In the Sybil attack [18]
a user can subvert security by forging new identities.
In our system, users cannot create new identities them-
selves without breaking the traceability property of
group signatures. Thus, in our setting a Sybil attack cor-
responds to a user successfully obtaining access to a new
real identity, since a new identity allows her to obtain a
new contract even if her old identity is on the blacklist.
Our architecture mitigates the Sybil problem by
leveraging the unique identiﬁer found in each user’s
trusted computing device as the user’s real identity. A
user cannot practically obtain a new identiﬁer for her
computer without replacing the trusted computing de-
vice (since it is a physical device and there is no pro-
grammatic way to replace it).
We believe that our solution is more practical than
solutions in other systems. For instance, in PEREA [32],
a suggested method is for the user to register with the SP
by presenting her driver’s license in person4. However,