3. ALGORITHM
Our algorithm is made of two components, the sketch
data structure and the estimator. We ﬁrst describe the data
structure used to sketch ﬂow sizes based on each packet, then
we describe our estimator that summarizes the distribution
from the sketch.
3.1 Data structures
Our sketch data structure consists of three structures:
1. Sketch: This is the main structure that holds a sketch
of ﬂows and its sizes. Each packet is hashed into the
sketch to increment its ﬂow size count. There are M
b-bit counters labeled [cm], m = 1, . . . , M , plus one
ownership bit per counter (in our experiments b = 6).
2. Sketch histogram: g = (g0, . . . , g2b−1) is the normal-
ized histogram of the above counter values; it is up-
dated upon changes of the ownership bits.
3. Pseudo-random auxiliary counters: We use O(log W )
auxiliary counters to implement random sampling for
ﬂow counters in the sketch.
Here W is the maximum ﬂow size of interest and
b ≥ ⌈log2(log2 W + 1 + k)⌉.
In what follows we illustrate the role of each of these in our
algorithm.
3.1.1 Sketch
Our sketch is a virtual sketch with ZM counters, Z ∈
{2, 3, . . . }, occupying the physical space of a sketch with M
counters. We refer to this virtual sketch as a Z-fold virtual
sketch or just a virtual sketch if the value of Z is clear from
the context. Counters in the physical sketch are indexed
from 1 to M . A counter in the physical sketch is shared
by Z virtual sketch counters; each physical sketch counter
has ⌈log2 Z⌉ ownership bits. We call counters in the virtual
sketch virtual counters or just counters. We call counters
in the physical sketch physical counters. In what follows we
consider Z = 2 to simplify our exposition. Let’s follow the
example shown in Figure 1. Virtual counters with indices
c and M + c, c = 1, . . . , M , are mapped into the physical
counter with index c. A physical counter value represents
the value of a virtual counter with index ≤ M if its own-
ership bit is zero. Otherwise it represents a virtual counter
with index > M . Physical counters are initialized with value
zero and with ownership bits set to one. Packets of a ﬂow as-
signed to a virtual counter with index > M will not change
its corresponding physical counter if the physical counter
has ownership bit zero. These ﬂows are considered to be-
long to evicted virtual counters. Also, if a packet assigned
to counter index ≤ M arrives and ﬁnds its corresponding
virtual counter with ownership bit one, it sets the counter
to one and the ownership bit to zero. This means that the
previous virtual counter (of index > M ) that occupies the
same physical position is evicted from the virtual sketch.
Note that counters are evicted uniformly at random (be-
cause the hash function assigns ﬂows to counters randomly);
this is equivalent to randomly discarding ﬂows, also called
ﬂow thinning.
In the example of Figure 1 virtual counter
2M is evicted from the virtual sketch. In what follows we
assume that evicted counters are discarded.
Flow sampling (see [3]) in its simplest form can be seen as
a particular case of the above sketch where number of virtual
sketches, Z, goes to inﬁnity, ownership bits are unique ﬂow
IDs, and virtual counters can only evict zero-valued counters
in the physical sketch. Note that when Z goes to inﬁnity
there are no ﬂow collisions in the virtual sketch. However,
using a simple ﬂow multiplexing argument, one can show
that the amount of ﬂow thinning increases with Z. Thus
we want to keep Z as small as possible provided that ﬂow
size histogram estimates are accurate. We return to this
discussion when evaluating our approach in Section 4.
3.1.2 Sketch histogram
A histogram of the counter values of the virtual sketch is
kept in vector g = (g0, . . . , g2b−1). This vector is initialized
with zero except for g0 = 2 M . Whenever a counter with
value j has its ownership bit changed from one to zero, gj is
decremented by one. This simple operation reﬂects the re-
duction in the number of virtual counters due to contention.
The remaining histogram updates are quite trivial.
3.1.3 Pseudo-random auxiliary counters
Our sketch counters perform random (Bernoulli) sampling
with probabilities taken from {2−j | j = 1, . . . , 2b − k} for
counter values larger than k. In a high level our approach fol-
lows the same simple principle of Morris [7], which requires
us to perform pseudo-random sampling at line speed. Since
traditional pseudo-random number generators are compu-
tationally intensive, we instead propose an alternative that
is best-case deterministic and worst-case probabilistic. We
assume there are N i.i.d. (independent and identically dis-
tributed) ﬂows that increment their respective hash coun-
ters with probability 1/h. We start by creating an auxiliary
counter ch and initialize it with ch ← h − 1. Upon a packet
arrival (from any of these N ﬂows) ch is decremented by
one. If ch = −1 we sample the packet (i.e.
increment the
respective sketch counter) and reinitialize ch ← h − 1. Note
that for N = 1 this corresponds to deterministic sampling.
Since we only need to maintain one additional counter per
value h we need O(log W ) auxiliary counters for our sketch.
Appendix A shows that as N → ∞ packets are sampled
randomly (according to a Bernoulli process) at rate 1/h, as
if we were using a true random number generator.
In the next section we see how the algorithm estimates
the ﬂow size histogram from the sketch histogram described
above.
3.2 Flow size estimator
In this section we present a ﬂow size estimator that uses
the empirical sketch histogram g and outputs a ﬂow size
histogram in O(k3 + log W ) operations. Let the sketch load
deﬁne the number of measured ﬂows divided by the virtual
sketch size. Our estimator works as follows: As soon as
either the measurement epoch is reached or the load achieves
L = 1/2, we save g (which is always up-to-date), reinitialize
all variables and start another measurement epoch. We use
g to refer to the “saved g”. With g we can estimate the
size histogram using a two step estimator. Section 3.2.1
presents the ﬁrst step where we estimate ﬂows of size smaller
than k (k is the deterministic counting threshold deﬁned in
Section 2); Section 3.2.2 presents the second step where we
estimate the histogram bins for ﬂow sizes ≥ k. In this section
we also show that for our estimator there is no gain in having
sketch counters being able to count more than i packets if
we only seek to estimate ﬂows of size smaller than i.
We start with some deﬁnitions that are common to Sec-
tions 3.2.1 and 3.2.2. Let θ = [θi], i = 1, 2, . . . denote the
ﬂow size distribution. Note that θi L is the average num-
ber of ﬂows of size i associated to a counter at the end of
the measurement epoch. In this work we assume that the
total number of ﬂows of size i = 1, 2, . . . measured in an
epoch is Poisson distributed. This assumption holds true
for our traces and has been reported true for other Internet
traces [1]. This is also a fairly weak assumption.
As the total number of ﬂows of size i is Poisson distributed
and the hash function randomly assign ﬂows to counters, it
is easy to see that the number of ﬂows of size i hashed to a
counter are i.i.d. Poisson random variables with parameter
θi L. Let G be the sum of all elements in g, i.e. G =P∀j gj .
3.2.1 Estimates of ﬂows with size < k
Using the above we have the following rather trivial set
of equations that describe the relationship between the ﬂow
size distribution θ, the counter value histogram g, and the
counter load L: The average number of counters with value
zero is
E[g0] = G exp(−L
∞
Xi=1
θi) = G exp(−L),
(1)
where E[g0] is the expected value of g0. The next equation
derives the average number of counters with value one
E[g1] = θ1 L E[g0].
More generally, for 2 ≤ j < k, we have
E[gj] = θj L +
j
Xm=2
Lm hθ(j, m)! E[g0] ,
(2)
(3)
where function hθ gives the probability that, in a sketch with
load one and ﬂow size distribution θ, m ﬂows are hashed into
the same counter and their sizes sum up to j; a recursive
O(j3) time algorithm to compute h is given in Appendix C1.
The sketch load is estimated from equation (1), i.e. ˆL =
− ln(g0/G). Now θ1 can be easily estimated from equations
(1) and (2) as
ˆθ1 = (g1/g0)/ ˆL,
and the number of ﬂows of size one is estimated as G ˆθ1; with
ˆθ1 and g2 we can also estimate θ2. More generally, we can
estimate θj using equation (3), ˆL, and ˆθi for i = 1, . . . , j − 1
ˆθj = (gj/g0)/ ˆL −
j
Xm=2
ˆLm−1 hˆθ(j, m).
(4)
Thus, estimating all ﬂow sizes with size less than k takes
O(k3) operations if intermediate results are saved. These
estimates are quite precise as we will observe in the next
section. In what follows we see how small sketch loads can
help us design a fast estimator for ﬂows of size ≥ k.
1A simpliﬁed version of the non-recursive algorithm is in [5]
3.2.2 Estimates of larger ﬂows sizes (≥ k)
Estimating larger ﬂow sizes encounters a problem: sketch
counters are counted probabilistically for values ≥ k. We
can derive an equation similar to (3) that accounts for the
probabilistic nature of gj for j ≥ k
E[gj] =E[g0]L
∞
Xi=j “ f (i − k, j − k) θi+
f (i − k, j − k)
i
Xm=2
Lm−1 hθ(i, m)”,
(5)
where function f , described in Appendix B, is the probabil-
ity that i − k packets triggers j − k increments on a counter
with value k. From equation (5) we see that estimating θj is
not an easy task. In what follows we derive a rough approxi-
mation to equation (5) that lead to a very simple estimator.
Let
Bj = {k+2j−1 −1, . . . , k+2j −2}, j = k, . . . , (2b−1−k) (6)
be the bins of our histogram for j ≥ k and let
θi,
j = k, . . . , (2b − 1 − k)
Θj = X∀i∈Bj
be the fraction of all ﬂows with size i ∈ Bj. Assume that
j is large. In what follows we approximate the probabilistic
counting by deterministic counting, i.e. f (i − k, j − k) = 1
if i ∈ Bj and zero otherwise. We also assume that most of
the ﬂow size distribution probability rests in ﬂows with sizes
much smaller than 2j . In this case, collisions of ﬂows whose
ﬂow size sums are in Bj are either: (1) a large number of
small ﬂow collisions; or (2) few collisions between small and
large ﬂows. Let’s look at the ﬁrst case, a large number of
small ﬂow collisions. As observed in [5], the probability of
3 or more ﬂow hashing into the same counter is small when
L < 1. In our case this is particularly true as L = 1/2. Thus
the eﬀect of a large number of ﬂow collisions is negligible as
the summation over hθ in equation (5) becomes vanishingly
small as m increases. Now we consider the second case, a
small number of collisions between small and large ﬂows.
As j is large, most ﬂows of sizes i ∈ Bj are at least twice as
large as ﬂows of smaller sizes not in Bj . This means that two
or three collisions of ﬂows with sizes not in Bj are unlikely
to sum up to a size in Bj . Then, apart from degenerated
θi, most of the collisions
between small and large ﬂows that fall into Bj are between
small ﬂows and ﬂows whose sizes are in Bj . This motivates
us to propose the following approximation to equation (5)
cases like P∀i∈Bj
θi ≪ P∀i∈Bj−1
E[gj] ≈ E[g0]LΘj .
With the above equation we have the following estimate for
Θj:
ˆΘj ≈ (gj/g0)/L .
(7)
Our experiments show that equation (7) is a good approxi-
mation to Θj (specially for large values of j).
In what follows we evaluate our approach against Internet
traces and a synthetic hard-to-estimate distribution.
s
w
o
l
f