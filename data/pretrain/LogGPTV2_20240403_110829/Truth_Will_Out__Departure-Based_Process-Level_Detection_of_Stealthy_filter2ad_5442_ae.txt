In EXP. II, we apply pasad to the direct damage attack scenarios
DA1 and DA2 described in §3.1.2. These attacks aim to drive the
pressure in the reactor to dangerous levels in an attempt to cause
irreparable physical damage to the control system. The goal of this
experiment is to detect these attacks before such damage occurs. In
both attack scenarios, the process reaches its safety limits roughly 8
hours after the attack onset. The detection results of direct damage
attacks compromising the manipulated variables XMV(10) and the
sensor variable XMEAS(7) are displayed in Figures 6 and 7.
Figure 6: Direct damage attack DA1 compromising the con-
trol variable xmv(10) detected in sensor variable xmeas(15).
Figure 7: Direct damage attack DA1 compromising the sen-
sor variable xmeas(7) detected in sensor variable xmeas(5).
Direct damage attacks are trivial to detect. As Figures 6 and 7
reveal, the impact of direct damage attacks DA1 and DA2 on
the process is obvious. Here, the attackers are not trying to remain
unnoticed; rather their goal is to cause as much physical damage
as they can in as little time as possible by driving the process to an
unsafe state. The changes in the behavior of the process variables
caused by these attacks were trivially detected by pasad. The de-
parture score reached the threshold level long before the process
could reach the safety limits. The reason why it is fairly trivial to
detect this kind of attacks using pasad, as well as existing methods
that monitor residuals, is that they tend to cause significant trends
and mean shifts in an otherwise trendless time series. Note that
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada826Figure 8: Detection of various attacks on the ultra-filtration feed water tank level sensor signal LIT301 (left) and the water pH
analyzer sensor signal AIT202 (right) performed on the SWaT testbed.
after the DA2 attack has been detected, the departure score drops
at the same time that the sensor recovers the original behavior.
4.3 EXP. III: Detection of SWaT Attacks
In EXP. III, we run pasad on the SWaT dataset captured from a
scaled-down version of a waste-water treatment plant described
in §3.2. Figure 8 shows the evolution of two sensor signals, the
ultra-filtration feed water tank level (LIT301) and the water pH an-
alyzer (AIT202), and the corresponding departure scores computed
by pasad. The time intervals during which the testbed is being
actively attacked are highlighted in red.
Pasad is process-agnostic. The fact that pasad performs well
on data collected by a third party, where we had little to no insight
into the underlying process and the performed attacks, ascertains
the validity of our claim about the applicability of our method to
a wide range of processes. As shown in Figure 8, pasad is able
to detect attacks on ICS that were performed in a realistic setting
and had actual impact on a physical process. Initially, training
was performed on separately provided sensor readings that were
declared normal. The measurements used for testing were generated
while the testbed was subject to a series of attacks, the great majority
of which were detected by pasad including, curiously, attacks that
caused no apparent change in the behavior of the LIT301 sensor
(left). Note that the AIT202 signal (right) slowly drifts away from
its normal range after the attack onset and does not return to its
desired setpoint around 8.4 and, correspondingly, the departure
score remains consistently above the threshold.
4.4 EXP. IV: Comparison with the AR Method
We further evaluate pasad by comparing it with the popular Auto-
Regression method. An AR model of order p states that at a given
time k, the sensor value yk may be predicted by computing ˆyk as a
linear combination of the previous p values plus an error term [6].
As recommended in [51], we extend the stateless AR statistic rk
into a stateful one by computing an additional CUmulative SUM
(CUSUM) statistic, defined as S0 = 0, Sk +1 = (Sk + |rk| − δ )+, where
(x )+ means max(0, x ) and δ is a constant chosen such that the ex-
pected value of |rk| − δ < 0 under normal conditions. To estimate
Figure 9: Both pasad and the AR method successfully detect
the direct damage attack DA2.
Figure 10: Unlike pasad, the AR method fails to detect the
stealth attack SA2.
the coefficients and the order of the model, we leverage the open-
source implementation used in [22] to detect stream deviations in
the process variables of water treatment plants.8 The outcome of
the comparison is presented in Figures 9 and 10.
Pasad outperforms AR in both attack scenarios. The com-
parison conducted in EXP. IV indicates that pasad outperforms the
AR-based technique. Both methods were applied on the same time
series under the same attack scenario, and the same subseries was
8Available at: https://github.com/RhysU/ar
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada827Table 1: Pasad’s parameters for the experiments (see §2.9).
Description
SA1
SA2
SA3
DA1
DA2
N
10000
1700
10000
10000
10000
30000
30000
2000
2400
2000
1000
50
L
5000
850
5000
5000
5000
5000
5000
1000
1000
1000
500
15
r
26
3
16
16
43
10
10
12
14
16
13
9
EXP. I
EXP. II
EXP. III
EXP. IV
EXP. V
EXP. VI
SWaT LIT301
SWaT AIT202
PASAD vs AR (1)
PASAD vs AR (2)
False Alarms
Real case (1)
Real case (2)
a continuous register (left) and from an attribute register (right).
Pasad is applicable to real-world scenarios. We applied pasad
on network traffic extracted from a real ICS, where our aim was to
explore how well it would behave in a real-world setting. Therefore,
we focused more on how effectively pasad could handle irregulari-
ties in the data, and less on their actual causes. The results obtained
in this experiment seem to confirm our observation about low false
alarm rate. As can be seen in Figure 12, pasad was tested over a
period of roughly 106 days with data from a real system, which
is considerably longer than what has previously been used in re-
lated research papers (e.g., 14 days in [22]), during which only few
alarms were triggered. We argue that whether these alarms should
be considered true or false depends on whether the operators are
interested in knowing about such abrupt process changes as the
ones shown in the figures.
5 RELATED WORK
The anomaly-based intrusion detection problem in the context
of ICS has recently gained increasing attention. In a recent sur-
vey, Urbina et al. [51] presented a systematic literature review on
physics-based attack detection in control systems. Two popular
methods that were used by the papers they surveyed are the Linear
Dynamic State-space (LDS) and the Auto-Regressive (AR) models.
System identification techniques can be used to create an LDS
model of the physical process. In [51], an LDS model with a time
delay was used to detect attacks on the water’s pH level using the
SWaT testbed [36]. Shoukry et al. [46] used the model together
with a χ2 anomaly detection statistic to build an authentication
scheme (PyCRA) that they used to detect attacks on various kinds of
active sensing subsystems. The same model was also used to detect
spoofing attacks that can take control over an unmanned aircraft
in [27], and to detect false data-injection attacks on state estimation
in electric power grids in [35]. Cárdenas et al. [8] developed several
attacks (Surge, Bias, and Geometric) on the TE process, and then
used the LDS model together with a non-parametric CUSUM statis-
tic for detection. Hadžiosmanović et al. [22] used the AR model,
together with Shewhart control limits, to detect stream deviations
in the process variables of operational water treatment plants.
Figure 11: Pasad is applied on a one-month long normal
data and only a few false alarms were observed.
used for both training pasad and inferring the AR model order and
coefficients. In Figure 9, it is evident that although both methods
are able to successfully detect the direct damage attack, pasad’s
departure score behaves statistically better in detecting the attack
than the AR-based CUSUM statistic. More specifically, pasad ex-
hibits a more stable behavior in terms of low variance under normal
conditions, and then reacts more promptly to the changes in the
time series. More notably, Figure 10 succinctly shows how unlike
pasad, the AR method fails to detect the stealthy attack.
4.5 EXP. V: Validating the Choice of Threshold
Given that the TE process takes quite some time to reach an unsafe
state [29], we choose a threshold level as defined in §2.9, so that
an attack may be detected in reasonable time, while not raising
any false alarms. In EXP. V, pasad is applied on attack-free sensor
measurements from the TE process (Figure 11). The first 20 hours
were used for training and estimating the signal subspace. After-
wards, the threshold was chosen to be just above the maximum
value attained during the first 40 hours, and the behavior of the
departure score was examined over the remaining validation period.
Pasad maintains a low false positive rate. The purpose of
choosing the threshold level as defined in §2.9 is to minimize the
number of false alarms, which if intolerably high, may hinder the
deployment of pasad in practice, while achieving a reasonable
time to detection. The goal of this experiment is to rationalize this
choice by examining the behavior of the departure score over a
relatively long period (roughly one month). The behavior of the
departure score was monitored over a validation period spanning
approximately 28 days (in simulation time). Then, it was observed
that indeed there were but few false alarms as shown in Figure 11.
4.6 EXP. VI: Experimenting with Real Data
In the final experiment, we investigate the applicability and de-
ployability of pasad in a real-world setting. The data used in this
experiment was collected from an operational water distribution
plant. As described in §3.3, pasad was run on limited-resource
hardware along with packet-capturing, process-data extraction,
and buffering mechanisms. Figure 12 displays the detection results
of this experiment, where pasad was tested on data extracted from
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada828Figure 12: The behavior of pasad while performing on 106-day-long process data, corresponding to a continuous register (left)
and an attribute register (right), extracted from network traffic of an operational water distribution plant.
Approaches that use machine learning and data mining have
been considered as well. Feng et al. [15] propose a multi-level
anomaly-detection scheme where they combine a Bloom filter with
a Long Short-Term Memory (LSTM) network to detect malicious
traffic in a gas pipeline SCADA dataset. One-class classification
techniques are evaluated on the same dataset in [40] where the
authors consider Support Vector Data Description (SVDD) and ker-
nel Principal Component Analysis (kPCA) for detecting intrusions
in pipeline SCADA systems. Xiao et al. [54] use an LSTM neural
network to detect malicious code executions on PLCs through a
side-channel analysis of power consumption. Junejo and Goh [26]
apply nine state-of-the-art machine-leaning classifiers to detect
attacks on the SWaT testbed. Pan et al. [42] applied a so-called
common path data mining technique on power system measure-
ment data and audit logs that learns patterns and then classifies
the system behavior over time into different scenarios. Clustering
techniques are proposed in [28, 31] to detect attacks on the TE
process targeting sensor measurements. Kiss et al. [28] considered
the Gaussian mixture model to form sensor clusters and showed
that the Gaussian model outperforms the k-means clustering algo-
rithm for this particular problem. Krotofil et al. [31], on the other
hand, considered an information-theoretic approach to form clus-
ters of correlated sensors by discretizing sensor values to build
discrete probability distributions and then using Shannon’s entropy
to perform implausibility checks on the sensor readings.
While LDS model-based techniques may accurately detect pro-
cess misbehaviors, as stated in §1, they are difficult to build [15],
and require a highly detailed description of the process that is not
always available [28]. By contrast, pasad does not require prior
knowledge about the physical process as it learns the intrinsic dy-
namics of the system purely from historical sensor data. While
machine learning methods do not require a model of the physical
process, they involve a feature extraction and engineering phase,
where system-dependent features need to be selected for training.
Feature selection is tricky, hard to automate, and finding the best
(most representative) features require a great deal of tuning and
cross-validation. Moreover, the fact that features are constructed
by combining various process variables and then transformed into
high-dimensional feature spaces makes it difficult to identify the
whereabouts of the attack and affects the interpretability of the
detection results. By contrast, pasad is specification-agnostic and
uses easily available raw sensor data for training and monitoring.
Given that sensors in cyber-physical systems are intricately cor-
related and naturally fall into different clusters, we find that the
work on identifying spoofed sensors using clustering techniques