title:POSTER: Probing Tor Hidden Service with Dockers
author:Jonghyeon Park and
Youngseok Lee
Improving Tor Hidden Service Crawler Performance
Jonghyeon Park
Hyunsu Mun
Youngseok Lee
Dept. of Computer Engineering
Dept. of Computer Engineering
Dept. of Computer Engineering
Chungnam National University, Korea
Chungnam National University, Korea
Chungnam National University, Korea
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract‚ÄîTor is a popular anonymous network that provides
the dark web called the hidden service not accessible with
traditional web browsers. The number of hidden services using
Tor‚Äôs anonymous network has been steadily increasing every
year with the demand of user privacy concerns as well as
illegal services that abuse Tor‚Äôs anonymity. As a result, how to
collect and analyze the contents of Tor hidden service is not
yet in full swing. In addition, due to the slow access speed of
the Tor browser, it is difÔ¨Åcult to observe the dynamics of the
hidden services. In this work, we present an efÔ¨Åcient Tor hidden
service crawling method that can monitor the status of hidden
services for the analysis of authentic hidden service contents. We
have designed our Tor crawler with the virtualization software,
Docker, and parallel Tor browsers to improve the crawling
performance. In order to maximize the utilization, we analyzed
the collected Tor hidden services by a clustering technique and
reduced the crawling targets. Crawling time was 76% improved
with 5 Docker containers with 5 browsers. From clustering same
hidden services, we can also reduce 39% of crawling the Tor
hidden services. From January 1, 2018 to May 31, 2018, we
collected 25,261 onion addresses and found 2,527 unique hidden
services. We crawled this hidden services twice a day, collect
456,739 HTML pages. We classiÔ¨Åed 722 hidden services contents
and analyzed the Tor hidden service dynamics through collected
HTML pages and crawler‚Äôs log data. As a result, we found that
the percentage of illegal services is higher in hidden services,
which is actually in service.
I. INTRODUCTION
As the demand for the anonymous Internet service increases,
dark web services such as Tor, I2P, and Freenet have appeared
and their population is increasing. Tor is a representative
anonymous communication tool that uses a special commu-
nication method called Onion routing to ensure anonymity
to the user. The anonymous Tor communication mechanism
enables a dark web service called hidden service which has
helped people who need freedom and privacy on the Internet.
However, the illegal hidden services are also on the horizon
due to the anonymity feature of Tor. For instance, terrorists,
black market, and Ransomwares have recently used Tor hidden
services for their purposes.
In order to Ô¨Ånd Tor hidden services, we need to collect and
analyze their data. However, it is not easy to crawl many Tor
hidden services quickly because of three reasons. First, due
to encryption and decryption in Tor connections, the access
to the Tor hidden service is slow, which is also applied to the
Tor crawler. In Tor communication, the sender sends encrypted
packets along at least three relay nodes on the overlay end-
978-1-5386-5790-4/18/$31.00 c‚Éù2018 IEEE
to-end path toward the receiver. Each relay node on the path
decrypts and encrypts the packets toward the destination. The
relay nodes are distributed across the overlay Tor network
which will not follow out the shortest path.
Fig. 1. The page load time of surface web (Alexa 100) and Tor Hidden
Services
We performed a simple experiment to compare the speed
of surface web and Tor hidden service. Fig. 1 shows the
page loading time (PLT) for surface web (Alexa top 100) and
Tor hidden services. We measured the web page speed from
a Microsoft Azure instance with two CPU cores and 8GB
memory located at the eastern data center in U.S. The PLT
for 50% of Alexa top 100 is less than 2.5 seconds, whereas
that of the Tor hidden services is 6.3 seconds. When Alex top
100 are accessed with Tor, the PLT of 50% increases up to 10
seconds. The average PLT of Alex top 100 is 3.3 seconds and
it increases to 12.4 with Tor access. On the other hand, the
average PLT of Tor hidden services is 7.6 seconds. Thus, the
hidden services are slow more than 2.3 times and the surface
web over Tor can become slow by 3.8 times.
Second, hidden service providers often maintain their ser-
vices for a short
time to avoid monitoring and tracking.
The hidden services are occasionally open, and their onion
addresses are often changed [1]. Fig. 2 shows how often Tor
hidden services are opened and closed. We checked hidden
service servers operation twice a day for 1,296 hidden services
over a Ô¨Åve month from January 1, 2018 to May 31, 2018. If
we considered the service as a live state, the hidden service
was reachable. In Fig. 2, 40% of the hidden services are dead
for at least 10 of 151 days. The operation pattern of hidden
services seems to be irregular.
Fig. 2. The count of days for Hidden Services during the Ô¨Åve months
Third, the number of Tor onion addresses keeps increasing.
The population of Tor hidden services becomes larger every
year. Tor‚Äôs statistical data, TorMetrics [10], says that
the
number of unique onion addresses increases from January
2015 to May 2018, as shown in Fig. 3. The linear regression
equation of the graph is ùëì (ùë•) = 38.2ùë• + 26535, which
shows 38 new onion addresses per day. Between January 1
and May 31, 2018, when we watched hidden services, more
than 30,000 new onion addresses surged on April 26 and
more than 110,000 remain. This sudden increase refers to the
onion address generated by computers infected with botnet
or Ransomware, or an increase in the number of users of
Tor based anonymous chat programs called Ricochet [11].
However, the cause of this surge has not been clariÔ¨Åed yet.
In addition, the number of onion addresses for the same Tor
hidden services is increasing. For example, it is reported that
20% of 13,145 observed hidden services use more than two
onion address [2].
Because of the above feature, it is difÔ¨Åcult for researchers
to collect and analyze the hidden service contents quickly.
To overcome the slow Tor hidden service access speed, we
present a hidden service crawler based on the virtualization on
the distributed cloud and an efÔ¨Åcient hidden service address
clustering management method. Through the cloud data center,
we can effectively manage Tor crawling agents. That is, we can
increase or decrease the number of computing resources for
the given target Tor onion addresses according to the budget
or policy. On the cloud computing environment, we also
virtualize the computing resource to maximize the resource
utilization and automate the crawling job process. Due to the
popular virtualization software such as Docker, we can easily
deploy virtualized computing resources on the cloud.
We present a Docker-based Tor hidden service crawler to
collect and analyze the hidden services automatically and to
monitor them quickly. To maximize the computing resource,
Fig. 3. Number of unique onion addresses per day
we parallelized the crawling agents with multiple Tor browser
tabs. Though we enhance the Tor hidden service crawling
performance, there will be redundant onion addresses for the
same Tor hidden service. In order not to visit the same hidden
service multiple times, we devise an onion address clustering
algorithm to Ô¨Ånd the same Tor hidden services. Due to the
minimized the crawling onion address set, we can reduce the
crawling time.
II. RELATED WORK
Compared to the increase in the illegal hidden services,
previous research has concentrated on the technical aspects of
Tor. Tor‚Äôs classic work has focused on attacking at the network
and anonymity [4-6]. They studied attack methods using Tor‚Äôs
security defects and factors that can remove anonymity. A
research on the contents includes the discovery of the Tor
hidden service at the protocol level [5] and it observed the
usage of the Tor service through the port scan [6]. This
study examined how to discover unknown hidden services
using Tor‚Äôs network weakness or system defects, rather than
analyzing the contents of hidden services.
There is also a study on the anonymity attack of Tor hidden
service using website Ô¨Ånger printing attack [2], [12]. As Tor
is known to be especially vulnerable to website Ô¨Ångerprinting
attack, a study was conducted to test an anonymous attack
model using a website Ô¨Ångerprinting attack [2] and a study of
specifying a hidden service through a website Ô¨Ångerprint [12].
The recent Ransomware incident also uses Tor hidden ser-
vices for the Bitcoin transaction. A few Tor studies have begun
to concentrate on the content analysis and overall scale of hid-
den service[7-9]. A study [7] created a special crawler called
Dark Crawler. This Dark Crawler was used to analyze the
connections between illegal hidden services and the content
of extremists and terrorists operating under hidden services at
Tor. In [8], they analyzed the content of the hidden service
and found the connection point between the normal network
and the hidden service through the domain and the resource,
and discovered the appearance rate and characteristics of the
web tracking through the script used by the hidden service.
[9] conducted a two-month intensive analysis of Tor‚Äôs large
illegal marketplace, Agora. They investigated the illegal goods
sold in Agora and the country of the seller, and found out the
possibility of organized crime. Thus, the recent Tor research
is toward the analysis of the content of the large-scale hidden
service and the analysis of the ecosystem of the hidden service.
In our previous work[13], we crawled hidden services with
a Docker-based Tor crawler using a single Tor web browser. In
this paper, we improved the crawler by using multiple Tor web
browsers, which reduces the crawling time by up to 23%. We
used 3,335 additional seed onion addresses, and found 2,527
Tor hidden services. In addition, we apply the hidden service
clustering algorithm to select onion address, that decreases the
crawling time.
III. TOR HIDDEN SERVICE CRAWLER
of onion addresses. The other method is to use the out-of-
band discovery that searches the surface websites linked to
the onion addresses [2].
Many onion addresses expose their web-accessible domain
names through the tor2web service. The tor2web service is
a kind of proxy service for hidden services. It converts the
onion address so that the hidden service can be accessed
from the surface web. hidden services using tor2web can be
searched on the surface web search engines Google, Yahoo,
Bing, Baidu and Duckduckgo. These search engines support
domain searches that collectively search for sites with the same
TLD.
Converted onion address have the same 16 alphabets and
numbers as the onion address, and the sufÔ¨Åx .onion is
converted into the candidates in Table I. We can get original
onion address, to converting the TLD of Converted onion
address to .onion. Table I is a TLD used for hidden services
using the tor2web service and manually collected from the Tor
community of the surface web.
TOP LEVEL DOMAINS OF WEB SERVICES IN TOR2WEB
TABLE I
TLD
Onion.city
Onion.cab
Onion.lu
Onion.nu
Onion.qq
Onion.direct
tor2web.Ô¨Å
Onion.to
Onion.link
Onion.rip
Onion.lt
Onion.sh
tor2web.org
torstorm.org
Fig. 4. Docker-based Tor crawling and analysis system architecture
Our Tor hidden service crawler consists of Tor onion address
collector, Docker-based Tor crawler, Tor hidden service ana-
lyzer, and cloud manager. In Fig. 4, each module shares data
through Tor data storage. We store collected onion addresses
only protocol and domain of URL structure. Tor hidden service
data is a text data set consisting of Tor hidden service HTML
Ô¨Åle and HTTP response header.
A. Tor onion address collector
First, a Tor hidden service crawler needs a set of initial
onion addresses to collect the hidden service contents. The
Tor onion address collector searches the TLDs in the Table I
using the domain search and collects the converted addresses
of the hidden services. The collected addresses convert the
TLD(Top-level domain) to .onion and are stored in Tor data
storage. From June 1, 2017 to July 31, 2017 we have collected
16,683 onion addresses.
An onion address corresponding to the domain name of the
Tor hidden service uses a string comprising 16 alphabets and
numbers with the sufÔ¨Åx of .onion. As the onion address
is not usually known or registered in the public website, we
have to Ô¨Ånd the seed onion addresses for the Tor crawler. One
method for collecting Tor onion addresses is to install relay
nodes with a HSDir Ô¨Çag that can access to the hash tables
B. Docker-based Tor crawler
In order to use Tor hidden services, we need to conÔ¨Ågure
socket secure (SOCKS) on the default port of 9150. SOCKS
is a protocol that allows TCP or UDP communication between
a server and a client
to proceed through a proxy server,
and Tor communicates using SOCKS5. For the fast crawler,
we need parallel Tor crawling agents which require their
own SOCKS5 conÔ¨Åguration. We use a popular virtualization
software, Docker, to run the Tor crawler agent, which will
be easily deployed in the cloud service. Docker provides
a lightweight virtualization image by the resource isolation
feature. We also harness the computing machine from the
cloud service like Amazon Web Service (AWS), MS Azure or
Google Cloud. Therefore, we Ô¨Årst borrow compute machines
from the cloud service, and conÔ¨Ågure the Tor crawler agents
on the virtualized Docker container. From the cloud service
and the virtualization, we can efÔ¨Åciently control and manage
Tor crawlers.
After loading a Docker container on the cloud computing
instance, we run multiple Tor web browsers at
the same
time to maximize the resource utilization. With typical web
browsers, we can easily run multiple web browser processes
in tabs or separate windows. In Tor, however, we have to
set up the initial SOCKS5 conÔ¨Åguration to execute multiple
Tor browsers, because a Tor web browser requires proxy-
based communication on the Tor overlay network. We have
designed the Tor crawler that is automated with the Selenium
WebDriver, and we run multiple Tor browsers that access to
Tor hidden services at the same time.
Fig. 5. Docker-based Tor crawler
Fig. 5 summarizes the operation of the Doker-based Tor
crawler. Our crawler can run a Tor browser using the built-in
Tor as a Selenium driver, connecting to the Tor network with-
out starting a separate Tor program or port setting. However,
when the Tor browser is running, additional execution of the
new Tor browser is not possible due to a collision with Tor
running on the newly running Tor. Because of this problem, it
is common to run only one Tor browser in the OS. Our crawler
runs in a separate container using virtualization provided by
Docker. Independent containers enable crawling using multiple
Tor browsers on a single cloud instance. Each container
implements multiple Tor browsers using the Selenium driver‚Äôs
JavaScript function execution. The crawler can use multiple
Tor browsers without having to launch a new Tor browser by
using a Javascript function to open a page for input address in
a new tab. A new tab in the Tor browser does not execute the
new Tor because the currently running Tor is attached to the
speciÔ¨Åc port of a single Tor browser. Therefore, the execution
of a new Tor requires another Tor port preparation and Tor
conÔ¨Åguration. We have added an automatic conÔ¨Åguration for
new Tor browsers.
Cloud instances deployed through the cloud manager con-
trols Docker instances. The Docker manager is a script that
builds how many containers the cloud instance will run and
how often it will perform a crawling job. The Docker manager
runs the Docker-based Tor crawler repeatedly at predeÔ¨Åned
intervals. The Tor crawler agent running on the Docker uses
the Selenium Driver to launch Tor browser to launch Tor. The
Tor browser has a built-in Tor for standalone operation, and
the Tor runs on the 9150 port with the browser running.
The executed Tor is used to send an HTTP request of the
onion address from the Tor hidden service request module and
receive an HTTP response as a result. The crawler collects
hidden service data according to the value of status code of
HTTP response. In Table II, when the status code is 200,
since the hidden service HTML is collected, it is necessary to
connect to the page. Therefore, the onion address is added to
the onion address queue. The onion address queue stores a set
of onion addresses speciÔ¨Åed in the Docker manager. When the
onion address queue is full, the Selenium Tor browser connects
to the hidden service with the onion address stored in the queue
using multiple Tor browsers and stores the HTML. If the status
code is 401 or 403, it is possible to access the hidden service,
but the page can not be browsed. Therefore, only the HTTP
response header is stored. The hidden service data collected
from each container is stored in Tor data storage after one
crawling job is completed and waits for the next crawling to
start.
TOR HIDDEN SERVICE DATA BY HTTP STATUS CODE
TABLE II
HTTP status code
Server State Hidden Service Data
200
401 / 403
4XX / 5XX
RequestTimeOut / ConnectError
SeleniumTimeOut / ConnectError
Live
Live
Dead
Dead
Dead
Hidden Service HTML,