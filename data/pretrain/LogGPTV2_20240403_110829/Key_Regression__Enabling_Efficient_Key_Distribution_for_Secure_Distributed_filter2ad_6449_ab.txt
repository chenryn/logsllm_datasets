ϕ(N ) are such
ϕ(N ) and the decryption exponent d ∈ Z∗
Z∗
that ed ≡ 1 mod ϕ(N ), where ϕ(N ) = (p − 1)(q − 1).
Section 10 describes what it means for an RSA key gen-
erator to be one-way.
3 Problems with key rotation
A key rotation scheme [32] consists of three al-
gorithms:
setup, wndkey, and unwndkey. Figure 2
shows the original (RSA-based) Plutus key rotation
scheme [32]. Following Plutus, and as Naor, Shen-
hav, and Wool also observe [41], one familiar with hash
chains [34] and S/KEY [29] might design the key rota-
tion scheme in Figure 3. Such a scheme is more efﬁ-
cient than the scheme in Figure 2, but is limited because
it can only produce MW (“max wind”) keys, where MW
is a parameter chosen by the implementor or at con-
ﬁguration time. A content publisher runs the setup al-
gorithm to initialize a key rotation scheme; the result
is public information pk for all users and a secret sk1
for the content publisher. The content publisher in-
vokes wndkey(ski) to obtain the key Ki and a new secret
ski+1. Any user in possession of Ki, i > 1, and pk can
invoke unwndkey(Ki, pk) to obtain Ki−1. Informally,
the desired security property of a key rotation scheme is
that, given only Ki and pk, it should be computation-
ally infeasible for an evicted member (the adversary) to
compute Kl, for any l > i. The Plutus construction in
Figure 2 has this property under the RSA one-wayness
assumption (deﬁned in Section 10), and the construction
in Figure 3 has this property if one replaces SHA1 with
a random oracle [9].
The problem. In Section 1 we observed that the l-th key
output by a key rotation scheme cannot be pseudoran-
dom, i.e., will be distinguishable from a random string,
to an ex-member in possession of the key Ki for some
previous time period i  MW return (⊥, sk)
sk0 ← hi + 1, K1, . . . , KMWi
Return (Ki, sk0)
Alg. unwndkey(K, pk)
// ignore pk
K 0 ← SHA1(K)
Return K 0
Figure 3. A hash chain-based key rotation scheme.
encrypted during time periods l > i after being evicted.
Although the construction of KO and SE may seem
somewhat contrived (though we hope less contrived than
some other possible counter examples), this example
shows that combining a key rotation scheme and an
encryption scheme may have undesirable consequences
and, therefore, that it is not wise to use (even a secure)
key rotation scheme as a black box to directly key other
cryptographic objects.
4 Key Regression
The negative result in Section 3 motivates our quest
to ﬁnd a new cryptographic object, similar to key rota-
tion, but for which the keys generated at time periods
l > i are pseudorandom to any adversary evicted at
time i. Here we formalize such an object: a key regres-
sion scheme. Following the reduction-based practice-
oriented provable security approach [8, 27], our for-
malisms involve carefully deﬁning the syntax, correct-
ness requirements, and security goal of a key regression
scheme. These formalisms enable us to, in Sections 8–
10, prove that our preferred constructions are secure un-
der reasonable assumptions. We desire provable security
over solely ad hoc analyses since, under ad hoc meth-
ods alone, one can never be completely convinced that
a cryptographic construction is secure even if one as-
sumes that the underlying components (e.g., block ci-
phers, hash functions, RSA) are secure.
Overview of key regression. Figure 1 gives an abstract
overview of a key regression scheme. The content pub-
lisher has content publisher states stpi from which it
derives future publisher and member states. When us-
ing a key regression scheme, instead of giving a new
member the i-th key Ki, the content publisher would
give the member the i-th member state stmi. As the ar-
rows in Figure 1 suggest, given stmi, a member can efﬁ-
ciently compute all previous member states and the keys
K1, . . . , Ki. Although it would be possible for an ex-
member to distinguish future member states stml, l > i,
from random (the ex-member would extend our obser-
vation on the lack of pseudorandomness in key rotation
schemes), because there is no efﬁcient path between the
future keys Kl and the ex-member’s last member state
stmi, it is possible for a key regression scheme to pro-
duce future keys Kl that are pseudorandom (indistin-
guishable from random). We present some such con-
structions in Section 5.
On an alternative: Use key rotation carefully.
Figure 1 might suggest an alternative approach for ﬁx-
ing the problems with key rotation.
Instead of using
the keys Ki from a key rotation scheme to directly key
other cryptographic objects, use a function of Ki, like
SHA1(Ki), instead. If one models SHA1 as a random
oracle and if the key rotation scheme produces unpre-
dictable future keys Kl, then it might seem reasonable
to conclude that an ex-member given Ki should not be
able to distinguish future values SHA1(Kl), l > i, from
random. While this reasoning may be sound for some
speciﬁc key rotation schemes (this reasoning actually
serves as the basis for our derivative of the construc-
tion in Figure 2, KR-RSA in Construction 5.3) we dis-
like this approach for several reasons. First, we believe
that it is unreasonable to assume that every engineer will
know to or remember to use the hash function. Further,
even if the engineer knew to hash the keys, the engineer
might not realize that simply computing SHA1(Kl) may
not work with all key rotation schemes, which means
that the engineer cannot use a key rotation scheme as a
black box. For example, while SHA1(Kl) would work
for the scheme in Figure 2, it would cause problems for
the scheme in Figure 3. We choose to consider a new
cryptographic object, key regression, because we desire
a cryptographic object that is not as prone to acciden-
tal misuse. Additionally, by focusing attention on a new
cryptographic object, we allow ourselves greater ﬂexi-
bility in how we construct objects that meet our require-
ments. For example, one of our preferred constructions
(KR-AES, Construction 5.2) does not use a hash func-
tion and is therefore secure in the standard model in-
stead of the random oracle model; see also KR-FSPRG
(Construction 6.1) and KR-PRG (Construction 7.3).
4.1 Syntax and correctness requirements
$
Syntax. Here we formally deﬁne the syntax of a key re-
gression scheme KR = (setup, wind, unwind, keyder).
Let H be a random oracle; for notational consistency,
all four algorithms are given access to the random ora-
cle, though the algorithms for some constructions may
not use the random oracle in their computations. Via
$← setupH, the randomized setup algorithm returns
stp
← windH (stp), the
a publisher state. Via (stp0, stm)
randomized winding algorithm takes a publisher state
stp and returns a pair of publisher and member states
or the error code (⊥, ⊥). Via stm0 ← unwindH (stm)
the deterministic unwinding algorithm takes a member
state stm and returns a member state or the error code ⊥.
Via K ← keyderH (stm) the deterministic key deriva-
tion algorithm takes a member state stm and returns a
key K ∈ DK, where DK is the derived key space for
KR. Let MW ∈ {1, 2, . . .} ∪ {∞} denote the maximum
number of derived keys that KR is designed to produce.
We do not deﬁne the behavior of the algorithms when
input the error code ⊥.
Correctness. Our ﬁrst correctness criterion for a key re-
gression scheme is that the ﬁrst MW times that wind is
invoked, it always outputs valid member states, i.e., the
outputs are never ⊥. Our second correctness require-
ment ensures that if stmi is the i-th member state out-
put by wind, and if i > 1, then from stmi, one can
derive all previous member states stmj, 0  i, from randomly se-
lected keys. Deﬁnition 4.1 captures this goal as follows.
We allow the adversary to obtain as many member states
as it wishes (via a WindO oracle). The WindO oracle re-
turns only a member state rather than both a member and
publisher state. Once the adversary is evicted, its goal is
to break the pseudorandomness of subsequently derived
keys. To model this, we allow the adversary to query a
key derivation oracle KeyderO. The key derivation ora-
cle will either return real derived keys (via internal calls
to wind and keyder) or random keys. The adversary’s
goal is to guess whether the KeyderO oracle’s responses
are real derived keys or random keys.
Deﬁnition 4.1 [Security for key regression schemes.]
Let KR = (setup, wind, unwind, keyder) be a key re-
gression scheme. Let A be an adversary. Consider
the experiments Expkr-b
KR,A, b ∈ {0, 1}, and the oracles
WindO and KeyderOb below. The adversary runs in two
stages, member and non-member, and returns a bit.
Experiment Expkr-b
KR,A
Pick random oracle H
$← setupH
i ← 0 ; stp
st
b0 $← AKeyderOb,H (non-member, st)
Return b0
$← AWindO,H (member)
Oracle WindO
i ← i + 1 ; If i > MW then return ⊥
(stp, stm) $← windH (stp)
Return stm
Oracle KeyderOb
i ← i + 1 ; If i > MW then return ⊥
(stp, stm) $← windH (stp)
If b = 1 then K ← keyderH (stm)
If b = 0 then K
Return K
$← DK
The KR-advantage of A in breaking the security of KR
is deﬁned as
Advkr
KR,A
= Prh Expkr-1
KR,A = 1i − Prh Expkr-0
KR,A = 1i .
Under the concrete security approach [8], we say that
KR is KR-secure if for any adversary A attacking KR
with resources (running time, size of code, number of
oracle queries) limited to “practical” amounts, the KR-
advantage of A is “small.”
Remarks. Since the publisher is in charge of winding
and is not supposed to invoke the winding algorithm
more than the prescribed maximum number of times,
MW, the WindO and KeyderO oracles in our security
deﬁnition only respond to the ﬁrst MW queries from the
adversary. Alternatively, we could remove the condi-
tional check for i > MW in the pseudocode for WindO
and KeyderO and instead ask that the underlying wind
algorithm behave appropriately if invoked more than
MW times, e.g., by maintaining the counter internally.
Since a key regression scheme will have multiple recip-
ients of member keys, we must consider coalitions of
adversaries; i.e., can two or more adversaries collude to
obtain additional information? Because of the property
that given any member state one can derive all previ-
ous member states, multiple colluding adversaries can-
not obtain more information than a single adversary who
makes the most WindO and KeyderO oracle queries. In
addition to desiring that future derived keys be pseu-
dorandom to evicted members, we desire that all the
derived keys be pseudorandom to adversaries that are
never members. If a key regression scheme is secure un-
der Deﬁnition 4.1, then the key regression scheme also
satisﬁes this weaker security goal since one can view
adversaries that are never members as adversaries that
make zero WindO oracle queries. Unlike with key rota-
tion schemes (Section 3), the pseudorandomness of fu-
ture keys means that a content publisher can use the
keys output by a secure key regression scheme to key
other cryptographic objects like symmetric encryption
schemes [7] and MACs [8]; as [1, 10] do for rekeying
schemes and FSPRGs, [5] makes this reasoning formal
for key regression schemes.
5 Our preferred constructions
We are now in a position to describe our three pre-
ferred key regression schemes, KR-SHA1, KR-AES and
KR-RSA. Table 1 summarizes some of their main prop-
erties. KR-SHA1 is a derivative of the key rotation
scheme in Figure 3 and KR-RSA is a derivative of the
Plutus key rotation scheme in Figure 2. The primary
differences between the new key regression schemes
KR-SHA1 and KR-RSA and the original key rotation
schemes are the addition of the new, SHA1-based keyder
algorithms and the adjusting of terminology (e.g., mem-
ber states in these key regression schemes correspond to
keys in the original key rotation schemes). KR-AES is
new but is based on one of Bellare and Yee’s forward-
secure pseudorandom bit generators (FSPRGs) [10].
5.1 The KR-SHA1 construction
Construction 5.1 details our KR-SHA1 construction.