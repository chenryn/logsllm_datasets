### Algorithm 1: Locality-Based Searching and Masking

**Require:** T', Φ, A

1. for ϕ ∈ Φ do
2.   n ← context(ϕ)
3.   π ← search_policy(ϕ)
4.   r ← relation(π)
5.   p ← parent(n)
6.   Y ← {}
7.   x ← permission(A, n)
8.   t ← transformation(x)
9.   if r == sibling then
10.     // Sibling relation handling
11.     // Add specific logic here
12.   else
13.     κ ← hops(π)
14.     counter ← 0
15.     while counter < κ do
16.       // Traverse the tree based on the number of hops
17.       // Add specific logic here
18.     end while
19.   end if
20. end for

### Methodology and Robustness

The structure of the DOM tree changes with any node insertion or deletion. The fuzzy pruning algorithm, as shown in Algorithm 1, depends only on the context node for sensitive data searching and masking. During experiments, we observed that the pruning process brings context and sensitive values to the same depth, as illustrated in Figure 2b. The searching subroutine returns a set of tuples Φ = {⟨n1, π1⟩, ..., ⟨nk, πk⟩}, where ni is the i-th DOM path from the root to the value node.

A XPath-based approach would fail for any DOM modification in the node having the trait CONTEXT. In contrast, our proposed method utilizes context information for finding sensitive values in its locality. This locality-based searching helps differentiate between fields with similar value patterns, such as 'Card Expiry Date' and 'Expense Date' in Figure 1.

### Results and Conclusion

We adapted the rule creation from [4] with minor changes to capture context and relationship fields. Our proposed algorithm, which uses fuzzy pruning for locality-based searching and masking, is robust enough to handle AJAX and control flow-based structural changes in the DOM tree. This method also supports conditional masking of similar-looking fields, such as dates.

### Experimental Setup and Analysis

Figure 1 shows a sample screen with three sensitive contexts ('Account Number', 'Card Expiry Date', and 'Location ZIP') and six sensitive values. We implemented and tested pFilter on machines running 64-bit Windows 10 Enterprise Edition with Oracle Java 8. The machines had 500 GB HDD, 8 GB DDR3 RAM, and a dual-core i5 vPro processor. We compared our proposed method with the results presented in [4]. To mimic high transaction throughput, we configured JMeter to generate 16 requests per second, resulting in 1.38 million requests in a single day. We varied the number of sensitive contexts in the configured policy and the number of rows in the data table. The number of contexts ranged from 1 to 5, and the number of rows varied from 100 to 500 in steps of 100.

Figure 3a shows that there is not much change in performance between the fuzzy pruning and XPath-based approaches when the number of contexts in the privacy policy changes. DOM-based methods are more efficient than regular expression-based methods because they operate on a pruned intermediate representation (T' ⊂ T) of the original DOM tree, excluding nodes with the trait NONE.

### References

[1] Acquisti et al. 2016. The economics of privacy. Journal of Economic Literature 54, 2 (2016), 442–92.
[2] Barth et al. 2007. Privacy and utility in business processes. In Computer Security Foundations Symposium, 2007. CSF’07. 20th IEEE. IEEE, 279–294.
[3] Ganapathy et al. 2006. Retrofitting legacy code for authorization policy enforcement. In 2006 IEEE Symposium on Security and Privacy (S&P’06). IEEE, 15–pp.
[4] Goldsteen et al. 2015. Application-Screen Masking: A Hybrid Approach. IEEE Software 32, 4 (2015), 40–45.
[5] Hung et al. 2007. End-to-end privacy control in service outsourcing of human-intensive processes: A multi-layered Web service integration approach. Information Systems Frontiers 9, 1 (2007), 85–101.
[6] Hong et al. 2019. Drivers and Inhibitors of Internet Privacy Concern: A Multidimensional Development Theory Perspective. Journal of Business Ethics (2019).
[7] McCormac et al. 2013. Preventing and Profiling Malicious Insider Attacks. Technical Report. Department of Defence.
[8] Xiaowei Li and Yuan Xue. 2014. A survey on server-side approaches to securing web applications. ACM Computing Surveys (CSUR) 46, 4 (2014), 54.
[9] David Scott and Richard Sharp. 2002. Abstracting application-level web security. In Proceedings of the 11th WWW. ACM, 396–407.
[10] European Union. 2017. General Data Protection Regulation. https://goo.gl/T7a17a
[11] Edmond Woychowsky. 2007. AJAX: Creating web pages with asynchronous JavaScript and XML. Prentice Hall.