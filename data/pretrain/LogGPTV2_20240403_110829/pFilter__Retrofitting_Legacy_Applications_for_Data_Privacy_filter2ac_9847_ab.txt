n ← context (ϕ) , π ← search_policy (ϕ) , r ← r elation (π)
p ← par ent (n) , Y ← {}
x ← permission (A, n)
t ← tr ansf ormation (x)
if r == sibling then
Algorithm 1 Locality Based Searching and Masking
Require: T ′, Φ, A
1: for ϕ ∈ Φ do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
else
κ ← hops (π) , counter ← 0
while counter  containing static text ‘Account Number’ has CONTEXT trait,
Figure 3b shows the comparison between regular expression based
whereas, the  containing the value has VALUE trait. Using these
method with fuzzy pruning for JSON handling. We further present
the time breakup for different steps in the fuzzy pruning algorithm
node traits, we annotate the DOM tree of a page w and create an
intermediate representation (T ′ ⊂ T ) of the original DOM tree
in Figure 3c. Also, it can be observed that most of the time is spent
in DOM tree creation, which in turn depends on the HTML parser.
by excluding all nodes with the trait NONE. Further, each long
branch in T ′ is reduced by removing the parent nodes till a node
Robustness. The structure of the DOM tree structure changes
for any node insertion or deletion operation. It can be observed
is found with more than one children. This brings context and
from Algorithm 1 that fuzzy pruning depends only on the context
sensitive value in proximity of each other, but during experiments
node for sensitive data searching and masking. Thus, our proposed
we observed that pruning process brought them to the same depth,
as shown in Figure 2b. The searching subroutine returns a set
algorithm is affected only by deletion of the context node. However,
of tuples Φ = {⟨n1, π1⟩, . . . , ⟨nk , πk⟩}, where, ni is the ith DOM
a XPath based approach will fail for any DOM modification in the
path from root to value node.
node having the trait CONTEXT (Algorithm 1). As compared to the
approach mentioned in [4], we utilize the context information for
finding sensitive values in its locality. This locality based searching
of sensitive value helps us in differentiating between fields with
similar value patterns, for example, ‘Card Expiry Date’ and ‘Expense
Date’ in Figure 1. Algorithm 1 shows the locality based searching
and masking on a pruned intermediate representation T ′.
3 RESULTS & CONCLUSION
We adapted the rule creation of [4] with minor changes to capture
context and relationship fields.
Conclusion. In this work we have extended the existing lite-
rature on retrofitting of legacy web-applications for supporting
data privacy. The current usage of XPath based methods for iden-
tification and masking of sensitive values is fragile in a dynamic
environment. To address that, we present the fuzzy pruning appro-
ach for locality based searching and masking of sensitive values.
Our proposed algorithm helps in conditional masking of similar
looking fields, for example dates, and it is robust enough to handle
AJAX and control flow based structural changes in DOM tree.
REFERENCES
[1] Acquisti et al. 2016. The economics of privacy. Journal of Economic Literature 54,
Setup and Analysis. Figure 1 shows a sample screen with three
sensitive context (‘Account Number’, ‘Card Expiry Date’ and ‘Lo-
cation ZIP’) and six sensitive values. We implemented and tested
pFilter on machines running 64 bit Windows 10 enterprise edition
with Oracle Java 8. The machines had 500 GB HDD, 8 GB DDR3
RAM and dual core i5 vPro processor. We baseline our proposed
method with the results presented in [4]. To mimic the high tran-
saction throughput behavior we configured JMeter to generate 16
requests per second, which resulted in 1.38 million requests in a
single day. Further we changed the number of sensitive context
in the configured policy and the number of rows in the data ta-
ble. The number of contexts ranged from 1 to 5 and the number
of rows varied from 100 to 500 in steps of 100. It can be observed
in Figure 3a that there is not much change in fuzzy pruning and
XPath based approaches when number of context change in the
privacy policy. The DOM based methods are efficient than regu-
lar expression based method as they either operate on a pruned
2 (2016), 442–92.
[2] Barth et al. 2007. Privacy and utility in business processes. In Computer Security
Foundations Symposium, 2007. CSF’07. 20th IEEE. IEEE, 279–294.
[3] Ganapathy et al. 2006. Retrofitting legacy code for authorization policy enforce-
ment. In 2006 IEEE Symposium on Security and Privacy (S&P’06). IEEE, 15–pp.
[4] Goldsteen et al. 2015. Application-Screen Masking: A Hybrid Approach. IEEE
Software 32, 4 (2015), 40–45.
[5] Hung et al. 2007. End-to-end privacy control in service outsourcing of human in-
tensive processes: A multi-layered Web service integration approach. Information
Systems Frontiers 9, 1 (2007), 85–101.
[6] Hong et al. 2019. Drivers and Inhibitors of Internet Privacy Concern: A Multidi-
mensional Development Theory Perspective. Journal of Business Ethics (2019).
[7] McCormac et al. 2013. Preventing and Profiling Malicious Insider Attacks. Technical
Report. Department of Defence.
[8] Xiaowei Li and Yuan Xue. 2014. A survey on server-side approaches to securing
web applications. ACM Computing Surveys (CSUR) 46, 4 (2014), 54.
[9] David Scott and Richard Sharp. 2002. Abstracting application-level web security.
In Proceedings of the 11th WWW. ACM, 396–407.
[10] European Union. 2017. General Data Protection Regulation. https://goo.gl/T7a17a
[11] Edmond Woychowsky. 2007. AJAX: Creating web pages with asynchronous Ja-
vaScript and XML. Prentice Hall.
10020030040050002004006008001,000ResponseTime(inms)FuzzyPruningXPathRegex110020030040050002,0004,0006,000ResponseTime(inms)FuzzyPruningRegularExpression11002003004005000204060ResponseTime(inms)ParsingAnnotationPruningSearching1PosterCCS ’19, November 11–15, 2019, London, United Kingdom2575