Architecturally Leaking Data from the
Microarchitecture
Black Hat USA 2022
Pietro Borrello
Sapienza University of Rome
Andreas Kogler
Graz University of Technology
Martin Schwarzl
Graz University of Technology
Moritz Lipp
Amazon Web Services
Daniel Gruss
Graz University of Technology
Michael Schwarz
CISPA Helmholtz Center for Information Security
ÆPIC Leak: Architecturally Leaking
Uninitialized Data from the Microarchitecture
Black Hat USA 2022
Pietro Borrello
Sapienza University of Rome
Andreas Kogler
Graz University of Technology
Martin Schwarzl
Graz University of Technology
Moritz Lipp
Amazon Web Services
Daniel Gruss
Graz University of Technology
Michael Schwarz
CISPA Helmholtz Center for Information Security
ÆPIC Leak
• First architectural bug leaking data without a side channel
1
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
ÆPIC Leak
• First architectural bug leaking data without a side channel
• Not a transient execution attack
1
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
ÆPIC Leak
• First architectural bug leaking data without a side channel
• Not a transient execution attack
• Deterministically leak stale data from SGX enclaves
1
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
ÆPIC Leak
• First architectural bug leaking data without a side channel
• Not a transient execution attack
• Deterministically leak stale data from SGX enclaves
• No hyperthreading required
1
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
ÆPIC Leak
• First architectural bug leaking data without a side channel
• Not a transient execution attack
• Deterministically leak stale data from SGX enclaves
• No hyperthreading required
• 10th, 11th, and 12th gen Intel CPUs affected
1
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Outline
1. ÆPIC Leak
2. Understand what we leak
3. Control what we leak
4. Exploit ÆPIC Leak
5. Mitigations
2
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
What is ÆPIC Leak?
Advanced Programmable Interrupt Controller (APIC)
Generate, receive and forward interrupts in modern CPUs.
• Local APIC for each CPU
• I/O APIC towards external devices
• Exposes registers
3
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
APIC MMIO
• Memory-mapped APIC registers
0
4
8
12
0x00
Timer
0x10
Thermal
0x20
ICR bits
0-31
0x30
ICR bits 32-63
4
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
APIC MMIO
• Memory-mapped APIC registers
• Controlled by MSR IA32 APIC BASE (default 0xFEE00000)
0
4
8
12
0xFEE00000:
0x00
Timer
0x10
Thermal
0x20
ICR bits
0-31
0x30
ICR bits 32-63
4
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
APIC MMIO
• Memory-mapped APIC registers
• Controlled by MSR IA32 APIC BASE (default 0xFEE00000)
• Mapped as 32bit values, aligned to 16 bytes
0
4
8
12
0xFEE00000:
0x00
Timer
0x10
Thermal
0x20
ICR bits
0-31
0x30
ICR bits 32-63
4
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
APIC MMIO
• Memory-mapped APIC registers
• Controlled by MSR IA32 APIC BASE (default 0xFEE00000)
• Mapped as 32bit values, aligned to 16 bytes
• Should not be accessed at bytes 4 through 15.
0
4
8
12
0xFEE00000:
0x00
Timer
0x10
Thermal
0x20
ICR bits
0-31
0x30
ICR bits 32-63
4
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Intel Manual Vol. 3a
Any access that touches bytes 4 through 15 of an APIC register may
cause undefined behavior and must not be executed. This undefined
behavior could include hangs, incorrect results, or unexpected excep-
tions.
5
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Intel Manual Vol. 3a
Any access that touches bytes 4 through 15 of an APIC register may
cause undefined behavior and must not be executed. This undefined
behavior could include hangs, incorrect results, or unexpected excep-
tions.
Let’s try this!
5
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Tweetable PoC
u8 *apic_base = map_phys_addr(0xFEE00000);
dump(&apic_base[0]);
dump(&apic_base[4]);
dump(&apic_base[8]);
dump(&apic_base[12]);
/* ... */
output:
6
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Tweetable PoC
u8 *apic_base = map_phys_addr(0xFEE00000);
dump(&apic_base[0]);
// no leak
dump(&apic_base[4]);
dump(&apic_base[8]);
dump(&apic_base[12]);
/* ... */
output:
FEE00000:
00 00 00 00
....
6
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Tweetable PoC
u8 *apic_base = map_phys_addr(0xFEE00000);
dump(&apic_base[0]);
// no leak
dump(&apic_base[4]);
// LEAK!
dump(&apic_base[8]);
dump(&apic_base[12]);
/* ... */
output:
FEE00000:
00 00 00 00 57 41 52 4E
....WARN
6
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Tweetable PoC
u8 *apic_base = map_phys_addr(0xFEE00000);
dump(&apic_base[0]);
// no leak
dump(&apic_base[4]);
// LEAK!
dump(&apic_base[8]);
// LEAK!
dump(&apic_base[12]);
/* ... */
output:
FEE00000:
00 00 00 00 57 41 52 4E 5F 49 4E 54
....WARN_INT
6
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Tweetable PoC
u8 *apic_base = map_phys_addr(0xFEE00000);
dump(&apic_base[0]);
// no leak
dump(&apic_base[4]);
// LEAK!
dump(&apic_base[8]);
// LEAK!
dump(&apic_base[12]); // LEAK!
/* ... */
output:
FEE00000:
00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55
....WARN_INTERRU
6
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Tweetable PoC
u8 *apic_base = map_phys_addr(0xFEE00000);
dump(&apic_base[0]);
// no leak
dump(&apic_base[4]);
// LEAK!
dump(&apic_base[8]);
// LEAK!
dump(&apic_base[12]); // LEAK!
/* ... */
output:
FEE00000:
00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55
....WARN_INTERRU
FEE00010:
00 00 00 00 4F 55 52 43 45 5F 50 45 4E 44 49 4E
....OURCE_PENDIN
FEE00020:
00 00 00 00 46 49 5F 57 41 52 4E 5F 49 4E 54 45
....FI_WARN_INTE
FEE00030:
00 00 00 00 54 5F 53 4F 55 52 43 45 5F 51 55 49
....T_SOURCE_QUI
6
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
What are we leaking?
We architecturally read stale values!
7
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
What are we leaking?
We architecturally read stale values!
Data?
FEE00000:
00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55
....WARN_INTERRU
FEE00010:
00 00 00 00 4F 55 52 43 45 5F 50 45 4E 44 49 4E
....OURCE_PENDIN
7
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
What are we leaking?
We architecturally read stale values!
Data?
FEE00000:
00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55
....WARN_INTERRU
FEE00010:
00 00 00 00 4F 55 52 43 45 5F 50 45 4E 44 49 4E
....OURCE_PENDIN
FEE00000:
00 00 00 00 75 1A 85 C9 75 05 48 83 C8 FF C3 B8
.....u...u.H.....
7
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
What are we leaking?
We architecturally read stale values!
Data?
FEE00000:
00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55
....WARN_INTERRU
FEE00010:
00 00 00 00 4F 55 52 43 45 5F 50 45 4E 44 49 4E
....OURCE_PENDIN
Instructions?!
FEE00000:
00 00 00 00 75 1A 85 C9 75 05 48 83 C8 FF C3 B8
.....u...u.H.....
7
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
What are we leaking?
We architecturally read stale values!
Data?
FEE00000:
00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55
....WARN_INTERRU
FEE00010:
00 00 00 00 4F 55 52 43 45 5F 50 45 4E 44 49 4E
....OURCE_PENDIN
Instructions?!
FEE00000:
00 00 00 00 75 1A 85 C9 75 05 48 83 C8 FF C3 B8
.....u...u.H.....
0:
75 1a
jne
0x1c
2:
85 c9
test
ecx,
ecx
4:
75 05
jne
0xb
6:
48 83 c8 ff
or
rax,
0xffffffffffffffff
a:
c3
ret
7
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Reading Undefined Ranges
CPU
Read
Haswell
✗
Skylake
✗
Coffe Lake
✗
Comet Lake
✗
Tiger Lake
✓
Ice Lake
✓
Alder Lake
✓
On most CPUs:
• Read 0x00
• Read 0xFF
• CPU Hang
• Triple fault
Not on 10th, 11th and 12th gen CPUs!
8
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Where do we leak from?
Ruling out microarchitectural elements
Core
Thread
Registers
Thread
Registers
Execution Engine
L1
MOB
L2
TLB
Superqueue
LLC
Memory Controller
RAM
9
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Ruling out microarchitectural elements
Core
Thread
Registers
Thread
Registers
Execution Engine
L1
MOB
L2
TLB
Superqueue
LLC
Memory Controller
RAM
9
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Ruling out microarchitectural elements
Core
Thread
Registers
Thread
Registers
Execution Engine
L1
MOB
L2
TLB
Superqueue
LLC
Memory Controller
RAM
9
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Ruling out microarchitectural elements
Core
Thread
Registers
Thread
Registers
Execution Engine
L1
MOB
L2
TLB
Superqueue
LLC
Memory Controller
RAM
9
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Ruling out microarchitectural elements
Core
Thread
Registers
Thread
Registers
Execution Engine
L1
MOB
L2
TLB
Superqueue
LLC
Memory Controller
RAM
9
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
The Superqueue
• It’s the decoupling buffer between L2 and LLC
10
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
The Superqueue
• It’s the decoupling buffer between L2 and LLC
• Contains data passed between L2 and LLC
10
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
The Superqueue
• It’s the decoupling buffer between L2 and LLC
• Contains data passed between L2 and LLC
• Like Line Fill Buffers for L1 and L2
10
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Leakage Analysis
• We can leak only undefined APIC offsets: i.e., 3/4 of a cache line
0
4
8
12
0x00
0x10
0x20
0x30
0x40
0x50
0x60
0x70
Leaked Addresses
11
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Leakage Analysis
• We can leak only undefined APIC offsets: i.e., 3/4 of a cache line
• We only observe even cache lines
0
4
8
12
0x00
0x10
0x20
0x30
0x40
0x50
0x60
0x70
Leaked Addresses
11
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Threat Model
• We leak data from the Superqueue (SQ)
12
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Threat Model
• We leak data from the Superqueue (SQ)
• Like an uninitialized memory read, but in the CPU
12
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Threat Model
• We leak data from the Superqueue (SQ)
• Like an uninitialized memory read, but in the CPU
• We need access to APIC MMIO region
12
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Threat Model
• We leak data from the Superqueue (SQ)
• Like an uninitialized memory read, but in the CPU
• We need access to APIC MMIO region
→ Let’s leak data from SGX enclaves!
12
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Intel Software Guard eXtensions (SGX) 101
• SGX: isolates environments against priviledged attackers
13
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Intel Software Guard eXtensions (SGX) 101
• SGX: isolates environments against priviledged attackers
• Transparently encrypts pages in the Enclave Page Cache (EPC)
13
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Intel Software Guard eXtensions (SGX) 101
• SGX: isolates environments against priviledged attackers
• Transparently encrypts pages in the Enclave Page Cache (EPC)
• Pages can be moved between EPC and RAM
13
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Intel Software Guard eXtensions (SGX) 101
• SGX: isolates environments against priviledged attackers
• Transparently encrypts pages in the Enclave Page Cache (EPC)
• Pages can be moved between EPC and RAM
• Use State Save Area (SSA) for context swithces
13
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Intel Software Guard eXtensions (SGX) 101
• SGX: isolates environments against priviledged attackers
• Transparently encrypts pages in the Enclave Page Cache (EPC)
• Pages can be moved between EPC and RAM
• Use State Save Area (SSA) for context swithces
• Stores enclave state during switches
• Inlcuding register values
13
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Building Blocks
• We can already sample data from SGX enclaves!
• But, how to leak interesting data?
14
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Building Blocks
• We can already sample data from SGX enclaves!
• But, how to leak interesting data?
• Can we force data into the SQ?
14
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)
Building Blocks
• We can already sample data from SGX enclaves!
• But, how to leak interesting data?
• Can we force data into the SQ?
• Can we keep data in the SQ?
14
Pietro Borrello (@borrello pietro)
Andreas Kogler (@0xhilbert)