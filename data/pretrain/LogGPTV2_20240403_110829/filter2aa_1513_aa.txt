# ÆPIC Leak: Architecturally Leaking Uninitialized Data from the Microarchitecture

## Authors
- **Pietro Borrello** - Sapienza University of Rome
- **Andreas Kogler** - Graz University of Technology
- **Martin Schwarzl** - Graz University of Technology
- **Moritz Lipp** - Amazon Web Services
- **Daniel Gruss** - Graz University of Technology
- **Michael Schwarz** - CISPA Helmholtz Center for Information Security

## Overview
- **First architectural bug leaking data without a side channel**
- **Not a transient execution attack**
- **Deterministically leak stale data from SGX enclaves**
- **No hyperthreading required**
- **10th, 11th, and 12th gen Intel CPUs affected**

## Outline
1. Introduction to ÆPIC Leak
2. Understanding the Data Leakage
3. Controlling the Data Leakage
4. Exploiting ÆPIC Leak
5. Mitigations

### What is ÆPIC Leak?
**Advanced Programmable Interrupt Controller (APIC)**
- Generates, receives, and forwards interrupts in modern CPUs.
- **Local APIC** for each CPU
- **I/O APIC** towards external devices
- Exposes registers

### APIC Memory-Mapped I/O (MMIO)
- **Memory-mapped APIC registers**
- Controlled by MSR `IA32_APIC_BASE` (default `0xFEE00000`)
- Mapped as 32-bit values, aligned to 16 bytes
- Accesses to bytes 4 through 15 of an APIC register may cause undefined behavior.

### Intel Manual Vol. 3a
- Any access that touches bytes 4 through 15 of an APIC register may cause undefined behavior and must not be executed.
- Undefined behavior could include hangs, incorrect results, or unexpected exceptions.

### Proof of Concept (PoC)
```c
u8 *apic_base = map_phys_addr(0xFEE00000);
dump(&apic_base[0]); // no leak
dump(&apic_base[4]); // LEAK!
dump(&apic_base[8]); // LEAK!
dump(&apic_base[12]); // LEAK!

// Output:
FEE00000: 00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55
....WARN_INTERRU
FEE00010: 00 00 00 00 4F 55 52 43 45 5F 50 45 4E 44 49 4E
....OURCE_PENDIN
FEE00020: 00 00 00 00 46 49 5F 57 41 52 4E 5F 49 4E 54 45
....FI_WARN_INTE
FEE00030: 00 00 00 00 54 5F 53 4F 55 52 43 45 5F 51 55 49
....T_SOURCE_QUI
```

### What are we leaking?
- We architecturally read stale values.
- **Data?**
  - Example: `FEE00000: 00 00 00 00 57 41 52 4E 5F 49 4E 54 45 52 52 55` (....WARN_INTERRU)
- **Instructions?**
  - Example: `FEE00000: 00 00 00 00 75 1A 85 C9 75 05 48 83 C8 FF C3 B8` (.....u...u.H.....)

### Reading Undefined Ranges
- **CPU Read Behavior:**
  - Haswell, Skylake, Coffee Lake, Comet Lake: CPU Hangs
  - Tiger Lake, Ice Lake, Alder Lake: No Hang, Leaks Data

### Where do we leak from?
- **Ruling out microarchitectural elements:**
  - Core, Thread, Registers, Execution Engine, L1, MOB, L2, TLB, Superqueue, LLC, Memory Controller, RAM
- **The Superqueue:**
  - Decoupling buffer between L2 and LLC
  - Contains data passed between L2 and LLC
  - Similar to Line Fill Buffers for L1 and L2

### Leakage Analysis
- We can leak only undefined APIC offsets: i.e., 3/4 of a cache line.
- We only observe even cache lines.

### Threat Model
- **Leakage Source:**
  - Data from the Superqueue (SQ)
  - Like an uninitialized memory read, but in the CPU
- **Requirements:**
  - Access to APIC MMIO region
- **Target:**
  - Leak data from SGX enclaves

### Intel Software Guard eXtensions (SGX) 101
- **SGX:**
  - Isolates environments against privileged attackers
  - Transparently encrypts pages in the Enclave Page Cache (EPC)
  - Pages can be moved between EPC and RAM
  - Uses State Save Area (SSA) for context switches
  - Stores enclave state during switches, including register values

### Building Blocks
- **Sampling Data:**
  - We can already sample data from SGX enclaves.
- **Leaking Interesting Data:**
  - Can we force data into the SQ?
  - Can we keep data in the SQ?

This document provides a detailed overview of the ÆPIC Leak, its implications, and the steps involved in understanding and exploiting this vulnerability.