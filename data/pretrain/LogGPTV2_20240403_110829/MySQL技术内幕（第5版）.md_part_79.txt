320
初始化函数和清理函数负责生成文档框架，如下所示（请注意，为了在输出结果里获得反
在这个文档内，我们还需要指定一个字体表，用以表明各个条目所使用的字体。字体表信
文档以花括号“{”和“}”作为开始和结束。RTF 的关键字都以“\”作为开头，并且文
与生成用于年会议程的成员列表相比，生成RTF版本的成员名录则要复杂一些。原因之-
sub text_format_entry
有了format_name（）函数之后，实现用于输出条目的text_format_entry（）函数，就变
my $entry_ref = shift;
text_format_entry（）函数会负责把人名的各个部分按适当顺序组织在一起，函数中的代
plain
(\fonttbl (\f0 Times;})
{\rtfo
sub format_name
/~[IVX]+$/
printf"%s\n",format_name（$_[o]);
return (Sname);
Sname
Sname
#像I、II、III等这样的姓名后级前面没有逗号
第8章
\fO\fs24
=
用PerI DBI编写MySQL程序
unless
$entry_ref->(suffix)
{suffix} =~/^[Ivx]+$/;
$entry_ref->(last_name);
---
## Page 341
软件移到下一行-
format_name（）函数来格式化的。每一行的末尾都有一个段落标记（\par），用于告诉字处理
并以\b0作为结尾，表示粗体显示结束。这里的成员姓名是用8.3.1.1节所展示的那个
还必须处理各种数据值缺失的情况。下面是输出格式的一个样例：
如“Address:”行，是由多个列（street、city、state、zip）里的信息构成，因此这个脚本
略这一行。例如，某位成员没有电子邮件地址，则不需要输出“Email:”行。由于有些输出行，
条目输出成一系列的行，并给每一行加上一个标签。如果对应于某个输出行的信息缺失，则忽
斜线“\”，需要在代码里双写反斜线，即使用“\\")：
my $entry_ref = shift;
sub rtf_format_entry
如果想让“Name:”行以粗体显示，那么需要让它以\b加空格作为开头，表示粗体显示开始；
对于这个条目，其RTF表示形式如下所示：
Name:Mike Artel
那个条目格式化函数负责生成文档的内容。我们采取了一种非常简单的方法，即把每一个
Interests:Civil Rights,Education,Revolutionary War\par
Email: PI:EMAIL\par
Telephone:075-961-0712\par
Address:
\b Name:Mike Artel\bo\par
Interests: Civil Rights,Education,Revolutionary War
Email:PI:EMAIL
sub rtf_cleanup
sub rtf_init
print
print
print "Address: $address\\par\n"
$address
$address
$address
$address .= $entry_ref->(street)
printf "\\b Name: %s\\bo\\par\n",
print"}\n";
print
print"{\\rtfo\n";
"Interests:
"\\plain\\f0\\fs24\n";
一没有太复杂的内容。主要的难点在于，格式化地址串和确定哪些行需要输出：
if defined($entry_ref->(phone));
if $address
if defined ($entry_ref->(zip));
if defined(Sentry_ref->(state));
if defined ($entry_ref->(city));
Sentry_ref->(zip)
.$entry_ref->(state)
Miami, FL 12777\par
ne
,format_name （$entry_ref);
8.3DBI脚本实践
321
---
## Page 342
系这些成员。
知。如果某些成员没有电子邮件地址，那么脚本应该给出警告，以便让你可以采用其他方式联
表来完成对它的核对或编辑工作，然后把它用作下一步（即发送更新通知）的输入内容。
分两步来完成。
发送电子邮件，但是如果能在发送通知之前，先检查一下列表，则可能会更实用。为此，我们
员记录查询出来。如果想要知道哪些成员的资格已过期，只需把宽限期设置为0即可。
其中，cutoff表示宽限天数。这个查询将把那些应该在这个宽限期内续期（或者已过期）的成
这种查询涉及一个相对简单的日期计算：
再通过电子邮件给他们发送通知，以便我们不用通过电话或者信件去联系他们。
么便有可能实现自动发送成员资格更新通知。具体可以这样做，先标识需要更新的成员，然月
延长自己的成员资格，是项既费时、又易出错的工作。既然已把这些信息放到了数据库里，那
8.3.2
分利用这类语言的出色文本处理能力。
没有关系，因为你可以轻易地把MySQL的数据库处理能力，集成到像Perl那样的语言里，充
大大简化了我们格式化这些信息的工作。尽管MySQL没有提供花哨的格式化输出功能，但是
个支持RTF的程序一起使用，都只有一步之遥。
式或RTF格式的成员名录：
情就没那么容易处理了。
地更改rtf_format_entry（）即可。如果这个名录是以原始形式（即字处理文档）提供的，事
下所示：
322
任务第一步，need_renewal.pl脚本必须标识出哪些成员需要更新。此脚本的主要代码如
（1）运行need_renewal.pl脚本，生成一个需要更新的成员列表。你可以通过检查这个列
在标识那些需要发送通知的行之后，下一步该怎么办呢？一种方案是，直接用同一个脚本
我们需要做的是，确定哪些成员资格已过期，以及哪些成员资格需要在指定的日期内更新。
DBI使得从 MySQL 提取我们想要的信息变得简单易行，并且 Perl 语言的文本处理能力也
在使用原始形式（即字处理文档）维护美史联盟成员名录时，想要查出需要通知哪些成员
到此，gen_dir.pl脚本就算是大功告成了，你通过运行下面这些命令，生成普通文本格
#默认30天的宽限时间...
（2）运行renewal_notify.pl脚本，让它通过电子邮件向成员发送一个“请更新”的通
此时，无论是把那个普通文本姓名文件粘贴到年会议程文档里，还是把那个 RTF文件与某
warn "Using cutoff of $cutoff days\n";
#提醒用户，本脚本所设置的宽限期限是多少
WHERE expirationnames.txt
当然，你不用拘泥于这种特殊的格式化样式。如果要更改这个输出名录的样式，只需简单
$cutoff = shift（@ARGV) if @ARGV && $ARGV[O] =~/^\d+$/;
my$cutoff
..不过，如果在命令行给出了某个数字参数，则可以重置它
print"\\par\n";
发送成员资格更新通知
第8章用Perl DBI编写MySQL程序
if defined ($entry_ref->(interests));
后
员
---
## Page 343
确定出它是ID编号、电子邮件地址，还是文件名：
renewal_notify.pl将会生成一条警告信息，提醒你需要通过其他手段与这位成员进行联系。
应的条目，提取邮件地址，并向该地址发送邮件。如果这个条目没有包含邮件地址，那么
号或电子邮件地址。这种方法让你可以通过ID 编号或电子邮件地址来指定成员，并且可以在命
字符的参数用于表示电子邮件地址。其他情况将被当作文件名，通过这个文件可以读取到ID 编
令行参数：成员ID编号、电子邮件地址和文件名。数字参数用于表示成员ID值，而包含“@”
这些通知。为了让renewal_
我们就能找出之前漏掉的少许人。）
用手工方式维护成员记录时，常会出现这种情况；人们会钻漏洞。既然数据库里有这些信息，
据当前日期来确定的，你阅读本章时的日期与我撰写本章时的日期肯定不一样)：
下面是参数处理主循环。如果在命令行没有指定任何参数，那么此脚本将从标准输入设备
对于每一位需要收到通知的成员，renewal_notify·pl脚本将会在member 表里查找出相
成员更新通知任务的第二步是，调用renewal_notify.pl脚本，以电子邮件的方式发送
可以看到，有些成员资格的有效天数为负数。这意味着，他们的成员资格已过期！（当你采
need_renewal.pl脚本的输出如下所示（你看到的输出也许会有所不同，因为结果都是依
if（@ARGV==O）
while (my $entry_ref = $sth->fetchrow_hashref ())
my $sth = $dbh->prepare (qq(
else
$sth->execute
read_file (\*STDIN);
print join("\t",
#将undef 值转换为空串，以便于输出
foreach my $key(keys(%{$entry_ref}))
PI:EMAIL
PI:EMAIL
PI:EMAIL
$entry_ref->{$key) ="" if !defined ($entry_ref->($key));
"\n";
!（C
ORDER BY expiration,last_name,first_name
FROM member
SELECT
（Scutoff）；#传递宽限期限
$entry_ref->(days).
$entry_ref->{expiration),
Sentry_ref->(email),
Sentry_ref->(member_id)
#如果没指定参数，则从 STDIN读取各个值
notify.pl脚本的使用能更容易一点，我们可以让它接受三种命
Edwards John
York
Garner
last_name,
Mark
Steve
days"),
2012-08-03
first_name,
2012-09-12
2012-08-24
2days
-17 days
-38days
8.3DBI脚本实践
323
---
## Page 344
则不应该再去读取另一个文件。
从中读取输入数据。此处也必须多加小心，为避免陷入无限循环，如果我们已在读取某个文件，
信息，然后忽略它。
号存在。如果某个地址匹配到了多个ID编号，那么这会产生歧义，此时，我们会输出一条警告
免出现这种情况，我们需要根据电子邮件地址查找与之对应的ID编号，并确保恰好只有一个编
用同一个电子邮件地址的情况（如他们是一对夫妻），我们不想把更新通知发给无关的人。为
member（）。对于那些以电子邮件地址指定的成员，我们需要加以注意。有可能出现两位成员
还是文件名。对于ID编号或电子邮件地址，它会查出相应的成员条目，并将其传递给notify
有多个字段。但是我们只需要第一个字段，因为它就是成员ID编号。）
（如果我们把 need_renewal.pl的输出提供给renewal_notify·pl作为输入,那么每一行便会
324
如果某个参数既不像ID编号，也不像电子邮件地址，那么我们将把它视为文件名，并继续
my ($arg, $recurse)= @;
interpret_argument（）函数会对每一个参数加以区分，确定它是ID编号、电子邮件地址
read_file（）函数负责读取文件的内容（假设该文件已打开)，并查看每一行的第一个字段。
sub interpret_argument
my $fh = shift;
sub read_file
elsif ($arg =~ /@/)
if($arg =~/^\d+$/)
while(defined ($arg =))
while (my $arg = shift (@ARGV))
notify_member ($arg);
#对参数进行解释，同时递归处理文件名
第8章用Perl DBI编写MySQL程序
elsif (scalar (@{$ary_ref})>1)
#获得与地址相关联的member_id
interpret_argument($arg,O);
#对参数进行解释，同时不再递归处理文件名
$arg
#去除第1个列以外的所有内容，包括换行符
interpret_argument($arg,1);
warn "Email address $arg matches multiple entries: ignored\n";
(scalar (@($ary_ref)）== 0)
$ary_ref
（理论上应该只有一
s/\s.
*//S
#已打开文件的句柄
个
#电子邮件地址
#数字型的成员ID
谐
使
---
## Page 345
的描述请参考8.2.11节。）
看到成员的完整资料一
式去联系这位成员。利用这种信息中显示的成员ID 编号执行 show_member.pl脚本，便可以查
notify_member（）函数不会发送任何消息，而只会输出一条警告信息，提醒你需要采用其他方
notify_member（）函数负责实际发送更新通知。如果某位成员没有电子邮件地址，那么
contentsof
due to expire soon.
Greetings.
Subject:Your USHLmembership is in need of renewal
To:$entry_ref->{email)
my $member_id = shift;
subnotify_member
下面是notify_member(）的全部代码：
print OUT <<EOF;