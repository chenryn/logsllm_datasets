HOST = "localhost"
PORT = 1337
import os
import sys
from FLAG import FLAG
from pwn import *
import multiprocessing
r = None
remote_start_time = None
LED = 64
state = [[0 for i in range(4)] for j in range(4)]
MixColMatrix = [
	[4,  1, 2, 2],
	[8,  6, 5, 6],
	[11,14,10, 9],
	[2,  2,15,11],
]
sbox = [12, 5, 6, 11, 9, 0, 10, 13, 3, 14, 15, 8, 4, 7, 1, 2]
WORDFILTER = 0xF
def FieldMult(a,b):
  ReductionPoly = 0x3
  x = a
  ret = 0
  for i in range(0,4):
    if (b>>i)&1 == 1: ret ^= x
    if (x&0x8) != 0:
      x >4)&0xf
  state[1][0] ^= (LED>>4)&0xf
  state[2][0] ^= LED & 0xf
  state[3][0] ^= LED & 0xf
  tmp = (RC[r] >> 3) & 7
  state[0][1] ^= tmp
  state[2][1] ^= tmp
  tmp =  RC[r] & 7
  state[1][1] ^= tmp
  state[3][1] ^= tmp
def SubCell():
  global state
  for i in range(0,4):
    for j in range(0,4):
      state[i][j] = sbox[state[i][j]]
def ShiftRow(): 
  global state
  tmp = [0]*4
  for i in range(1,4):
    for j in range(0,4):tmp[j] = state[i][j]
    for j in range(0,4):state[i][j] = tmp[(j+i)%4]
def MixColumn():
  global state
  tmp = [0]*4
  for j in range(0,4):
    for i in range(0,4):
      sum = 0
      for k in range(0,4):
        sum ^= FieldMult(MixColMatrix[i][k], state[k][j]) 
      tmp[i] = sum
    for i in range(0,4):state[i][j] = tmp[i]
def host_encrypt_for_key(input,userkey,sbox_lazy,rounds):
  """
  input - list of integers from range 0x0 - 0xFF
  userkey - list of integers from range 0x0 - 0xFF
  rounds - lazy
  sbox_lazy - my chosen sbox_lazy
  returns: string
  """
  global state, LED
  ksbits = 16*8
  if rounds  10:
    print "Sorry I'm not in the mood. Bye!"
    exit(0)
  keyNibbles = [0]*32
  for i in range(0,16):
    if (i%2) == 1: state[i/4][i%4] = input[i>>1]&0xF
    else: state[i/4][i%4] = (input[i>>1]>>4)&0xF
  #state to input
  for i in range(0,ksbits/4):
    if (i%2) == 1: keyNibbles[i] = userkey[i>>1]&0xF
    else: keyNibbles[i] = (userkey[i>>1]>>4)&0xF
  #print "keyNibbles = "+str(keyNibbles) #len(_)=32
  LED = ksbits
  RN = 48
  if LED  10:
    print "Sorry I'm not in the mood. Bye!"
    exit(0)
  keyNibbles = [0]*32
  for i in range(0,16):
    if (i%2) == 1: state[i/4][i%4] = input[i>>1]&0xF
    else: state[i/4][i%4] = (input[i>>1]>>4)&0xF
  #state to input
  for i in range(0,ksbits/4):
    if (i%2) == 1: keyNibbles[i] = userkey[i>>1]&0xF
    else: keyNibbles[i] = (userkey[i>>1]>>4)&0xF
  LED = ksbits
  RN = 48
  if LED >1]&0xF
    else: keyNibbles[i] = (userkey[i>>1]>>4)&0xF
"""
def from_nibbles(nibbles):
	key = []
	for i in range(len(nibbles)/2):
		key.append(nibbles[i*2]*16+nibbles[i*2+1])
	return key
server_encrypt_for_nibbles_map = {}
def to_hex(i):
	e = hex(i)[2:] 
	if len(e) == 1:
		e = "0"+e
	return e
server_encrypt_cache = {}
def server_encrypt(password, lazy):
	"""
	password - list integers from range 0x0 - 0xFF
	"""
	global r
	global remote_start_time
	global server_encrypt_cache
	if (tuple(password), lazy) in server_encrypt_cache:
		return server_encrypt_cache[(tuple(password), lazy)]
	if r == None:
		r = remote(HOST,PORT)
		r.recvuntil("hex.")
		remote_start_time = time.time()
	#local:
	#return Lazy_LED_enc(password, k_data, 16*8, lazy)
	#remote:
	r.sendline( "".join(map(lambda x: to_hex(x), password ))+"lazy"+str(lazy) )
	data = r.recvuntil("hex.")
	print repr(data)
	print re.findall(r"ciphertext: \n([0-9a-f]{32})",data)
	cipher = re.findall(r"ciphertext: \n([0-9a-f]{32})",data)[0]
	ret = cipher.decode("hex")
	server_encrypt_cache[(tuple(password), lazy)] = ret
	return ret
def server_encrypt_for_nibbles(arg,nibbles):
	password = [0 for x in range(16)]
	password[nibbles[0]]=arg[0]
	password[nibbles[1]]=arg[1]
	password[nibbles[2]]=arg[2]
	password[nibbles[3]]=arg[3]