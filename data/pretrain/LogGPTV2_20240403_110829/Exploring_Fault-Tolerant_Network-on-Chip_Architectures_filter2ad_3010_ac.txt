resource  use,  preventing  the  system  to  work  at  full  throttle. 
For  example,  an  adaptive  routing  algorithm  can  use  escape 
Virtual  Channels  (VCs)  to  recover  from  deadlocks,  as 
described in [28]. The flits in these escape VCs, however, are 
managed  by  a  deadlock-free  deterministic  routing  algorithm, 
thereby limiting adaptivity.
Moreover,  many  of  these  techniques  cannot  guarantee 
deadlock freedom in a network with hard faults (router or link 
faults).  They  all  assume  a  fault-free  environment.  This 
assumption,  however,  no  longer  seems  reasonable  in  NoC 
environments  where  the  probability  of  failure  is  relatively 
high.  Several  techniques  have  been  proposed  to  address  this 
issue  in  macro  networks  [23,  30],  but  most  of  them  adopt 
complex  algorithms  which  are  not  suitable  in  resource-
constrained environments like on-chip interconnects. Thus, it 
is  imperative  to  provide  simple,  yet  effective  solutions  to 
minimize performance degradation. 
3.2.1 Proposed Deadlock Recovery Scheme 
To  address  these  issues,  we  propose  a  scheme,  which  (1), 
instead  of  using  additional  dedicated  resources,  utilizes  the 
existing  retransmission  buffers  to  break  deadlocks,  and  (2) 
provides  deadlock  recovery  in  both  fault-free  and  faulty 
environments  using  a  very  simple  retransmission-buffer 
management policy. Hence, through efficient resource sharing, 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSNâ€™06) 
0-7695-2607-1/06 $20.00 Â© 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:28:17 UTC from IEEE Xplore.  Restrictions apply. 
G
we  can 
multifaceted reliability component in our system. 
retransmission  buffers 
transform 
the 
into  a 
The retransmission buffers can serve a dual purpose, mainly 
because they are used only when packets are being transferred 
from one node to another. As network traffic increases, packet 
blocking increases and, as a result, the utilization of the HBH 
retransmission  buffers  will  decrease  due  to  decreased  flit 
transmissions.  Figure  8  and  Figure  9  show  the  utilization  of 
both transmission and retransmission buffers, respectively, for 
the adaptive (AD) and deterministic (DT) routing algorithms. 
In most cases, the utilization of the retransmission buffer does 
not 
instead, 
retransmission buffers are mostly underutilized. Furthermore, 
if  a  packet  is  permanently  blocked  due  to  a  deadlock,  the 
associated retransmission buffer will be empty, since there has 
been  no  data  transmission  for  an  extended  period  of  time. 
Based  on  these  observations,  we  propose  a  smart  HBH-
retransmission-buffer management scheme that exploits these 
idle buffers for deadlock recovery. 
transmission  buffer; 
that  of 
follow 
the 
When  a  deadlock  occurs,  if  any  of  the  packets  involved  in 
the deadlock configuration can proceed by one buffer slot, all 
the other packets also involved in the deadlock can proceed as 
well. This can be achieved with the presence of a single empty 
buffer slot; if all packets continue to proceed in this fashion, 
the  deadlock  will  eventually  be  broken,  since  some  packets 
will  ultimately  move  out  of  the  deadlock  configuration.  In 
other words, instead of providing a dedicated escape channel 
to  the  destination  node,  as  proposed  in  [28,  29],  our  scheme 
gradually shifts flits without breaking the cyclic dependency, 
until the deadlock is broken. 
For  example,  assuming  that  four  nodes  are  involved  in  a 
deadlock configuration, we have (4x3) retransmission buffers 
(12  in  total)  that  are  empty.  Therefore,  if  each  node 
temporarily  moves  3  flits  from  the  normal  transmission 
buffers  to  the  retransmission  buffers,  it  will  create  an 
additional available buffer space for the preceding node in the 
deadlock configuration. As soon as the buffer space becomes 
available, the flits in the retransmission buffer can be sent to 
the  next  router.  Thus,  flits  will  be  able  to  advance,  and  after 
several  iterations,  some  flits  will  move  out  of  the  deadlock 
configuration, thereby breaking the deadlock situation. 
Figure 10 shows an example of this scenario in detail, where 
a packet consists of 4 flits and the normal transmission buffer 
can  store  up  to  4  flits.  In  step  1,  a  deadlock  is  detected  and 
flits are moved to the retransmission buffer, as shown in step 2. 
The additional buffer space created by this  move allows flits 
in  the  retransmission  buffers  to  be  transmitted  to  the  next 
nodes.  Since  the  retransmission  buffers  in  our  proposed 
architecture  are  barrel  shifters,  transmitted  flits  also  move  to 
the back of the retransmission buffer (flits enclosed by a thick 
square), as shown in steps 3 to 5. Three clock cycles later, the 
retransmission buffer will be empty again, as shown in step 7. 
At this point, the buffer state is exactly the same as in step 1, 
except  that  every  flit  has  advanced  by  3  buffer  slots.  This 
procedure  will  be  repeated  until  at  least  one  of  the  packets 
breaks the deadlock by going out to a direction away from the 
deadlock  configuration.  Once  the  deadlock  configuration  is 
broken,  each  node  resumes  its  normal  operation.  In  the 
example of Figure 10, we assume that all three nodes involved 
1.0
0.8
n
o
i
t
a
z
i
l
i
t
U
0.6
0.4
0.2
0.0
0.18
0.16
0.14
0.12
0.10
0.08
0.06
0.04
0.02
0.00
n
o
i
t
a
z
i
l
i
t
U
AD
DT
AD
DT
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Injection Rate (flits/node/cycle)
Figure 8. Transmission 
Buffer utilization 
the  deadlock 
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Injection Rate (flits/node/cycle)
Figure 9. Retransmission 
Buffer utilization 
initiate  deadlock 
in 
action 
simultaneously  for  the  sake  of  clarity.  However,  deadlock 
recovery  need  not  be  synchronized,  as  long  as  all  nodes 
eventually  start  deadlock  recovery.  The  proposed  probing 
technique  described  below  will  handle  this  asynchronous 
behavior. 
recovery 
The proposed scheme places a lower limit on buffer size to 
ensure  correct  functionality.  The  technique  must  account  for 
the  worst-case  scenario,  where  partially  transferred  messages 
prevent other messages from entering the transmission buffers, 
and thus, absorption of these partially transferred messages is 
necessary during the deadlock recovery process, as illustrated 
in  Figure  11.  Note  that  no  new  packets  are  allowed  to  enter 
the  transmission  buffers  that  are  involved  in  the  deadlock 
recovery.   
To handle the worst-case scenario, the total buffer size (i.e. 
transmission and retransmission buffers) must be large enough 
to accommodate the remaining flits of a partial packet and still 
have at least one empty slot. 
Theorem: The proposed scheme ensures deadlock freedom if 
the  buffer  size  is  larger  than  the  lower  limit  specified  in 
Equation (1). 
/RZHU/LPLW 
/RZHU/LPLW 
/RZHU/LPLW 
/RZHU/LPLW 
B
=
B
1
=
T
âŽ§âŽª
âŽ¨
âŽªâŽ©
B
âˆ‘
Ã—
>
B M

âˆ‘
=
n
T
i
i 1
=
âˆ‘
=
n
i 1
=
n
i 1
=
N
i
,  where
, normal mode
Eq. (1)

2
=
T R
+
(T R )
i
+
i
, deadlock recovery mode
%
7 7
L
5 5 
L
Q
0
1
L
2
)
B
B



or
Total buffer size (either 
1

on buffer (at node  )
Total size of the Transmissi

 
Total size of the Retransmission buffer (at node )
L

Number of nodes involved in the deadlock

Number of flits per packet (message)

Maximum number of differ
  transmission buffer  at node
ent packets in a 
âŽ¤
L  
âŽ¡
iT / M
L
1
â‰¤
=
n
N=
i
i 1
Ã— âˆ‘
flits,  and 
Proof: When a deadlock is detected, the transmission buffers 
cannot  accommodate  any  more 
therefore, 
.  At  this  point,  the  nodes  switch  to  the 
B B M
deadlock  recovery  mode  and  if 
,  then  all 
the  messages  involved  in  the  deadlock  can  be  absorbed  into 
the buffers (trans. + retrans.) with at least one empty slot still 
available. Since only packets involved in the deadlock can use 
this  empty  buffer  slot(s),  they  can  now  proceed,  and 
eventually, the network can recover from the deadlock.  Ì°
n
N=
i
i 1
B B
âˆ‘
M
>
2
=
Ã—
Examples of the lower limit condition in deadlock recovery 
mode are shown below for the configurations of Figure 10 and 
Figure 11. Both examples show that they meet the minimum 
buffer requirement, and therefore, the deadlock can be broken. 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSNâ€™06) 
0-7695-2607-1/06 $20.00 Â© 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:28:17 UTC from IEEE Xplore.  Restrictions apply. 
Step 1:
a4
a3
a3
a2
a1
b4
b3
b2
b1
c4
c3
c2
c1
Step 5:
a3
c2
a2
c1
a1
a4
a3
b3
a2
b2
a1
b1
b4
b3
c3
b2
c2
b1
c1
c4
c3
a3
a2
a1
a3
a1
a4
a2
a4
a2
a1
c1
a3
a4
a1
a2
Step 2:
Step 3:
Step 4:
b3
b2
b1
b3
b1
b4
b2
b4
b2
b1
a1
b3
b4
b1
b2
c3
c2
c1
c3
c2
c1
b1
c1
c4
c2
c4
c3
c4
c1
c2
Step 6:
c3
c2
a3
c1
a2
a4