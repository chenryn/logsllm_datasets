is a pop):
& restore chunk1[2:3]
This loader requires a stack overﬂow, knowledge of
at least 4 mask bytes, and a system that supports self-
modifying code. Unlike the 7-bytes loader, it assumes reuse
of mask in two different pages, so it is only effective against
tiled-mode. Its success probability is
because it needs both pages to share a mask. For example,
with a mask of 8192 bytes, it works with 0.25 probability.
number of mask pages
(cid:17)2
(cid:16)
1
5.3. The 3-byte loader
The 3-byte loader does not require self-modifying code, and
therefore works against RISE. It requires an unbound (or
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006very large) stack overﬂow and works at a lower probabil-
ity of success than the previous loaders, but still of a low
polynomial order. It uses 2-bytes execution buffers in con-
secutive pages, and places a RET after each buffer (hence
the 3 bytes). The stack is responsible to direct the RETs
to the next page after each execution. The loader requires
at least sizeof(shellcode)
It sometimes requires more
pages because it skips pages for which the address contains
a zero (due to string-functions limitation when overwriting
the stack).
pages.
2
Because the probability of success of this loader is poly-
nomial on the number of instructions, we optimized the
shellcode used in the other two exploits, and reduced its
size to 12 sequences of 2 bytes each.
(cid:16)
probability
1
This loader requires a large (or unbound) stack overﬂow,
knowledge of at least 3 mask bytes. It does not require self-
modifying code. It assumes that several pages share a mask,
so it only works against tiled-mode.
success
is
. A typical execve()
shellcode uses 12 instructions, so the success probability
is
. For example, with a mask of
4096, which is still
8192 bytes, the probability of success is
feasible in real-world attacks. Empirical tests against RISE
show slightly better results:
(cid:17)number of instructions
(cid:17)12
number of mask pages
number of mask pages
for
this
attack
The
(cid:16)
1
1
4006 .
of
1
Appendixes D, E, and F in [20] present sample exploits
using the 7, 4, and 3-byte loaders respectively.
5.4. Analysis of key-guessing attacks using
loaders
With tiny loaders such as those described above, it becomes
feasible to launch brute-force key-guessing attacks against
ISR, even in situations where leaks (as described earlier in
this paper) are not available. We can set an upper limit on
the strength a software ISR can hope to achieve, and show
that increasing mask strength beyond a certain point would
have no effect on security.
In OTP mode, the 3-byte and 4-byte loaders will not
work, so a key-guesser will have to use the 7-byte loader
and launch an average of 27∗8 attacks, guessing a 56 bits
key. Crashing an application 256 times will probably take
too long and attract too much attention in most real-world
situations, so it can be considered reasonably secure. Un-
fortunately, OTP mode doubles the memory consumption of
the code and is not likely to be used in real-world situations.
In tiled-mode on a system that does not allow self-
modifying code, only the 3-byte loader can be used,
and it requires 12 pages for running a useful shellcode.
Its probability of success when key-guessing is 23∗8 ∗
(number of mask pages)12. With a minimal mask size of
8192, it means 224+12, so an average of 236 guess-attempts
are required. This is much less than the 56 bits of OTP
mode, and may be feasible in some real-world situations.
In tiled-mode on a system that allows self-modifying
code, the 4-bytes loader can be used, and will often per-
form better than the 3-bytes loader because it only needs
2 pages. The probability of success when key-guessing is
24∗8 ∗ (number of mask pages)2. With a mask size of 8192,
it means 232+2, so an average of 234 guess-attempts are re-
quired. This is probably feasible in real-world attacks when
attacking an unattended server over a weekend, or an em-
bedded device that does not send crash reports to a system
administrator.
While discussing these attacks, it has been suggested that
the security of a software ISR may be improved if the mask
is not uniformly-random and makes it harder to inject cer-
tain instructions. For example, if 0xC3 is made more com-
mon, it will be harder to include a RET in the code because
a scrambled RET is more likely to be an uninjectable zero.
However, non-uniform randomization will be easy to by-
pass and cause more harm than good (for a discussion on
this point, refer to Appendix G, in [20]).
Given these upper limits (34 or 36 bits in tiled-mode, 56
bits in OTP mode), one could argue that RISE is somewhat
limited when protecting IA-32. Note, however, that on a
RISC architecture these numbers will be somewhat larger.
Tiled-mode should probably be avoided where security
matters, since it is vulnerable to relatively fast key-guessing,
as well as leak attacks as demonstrated in the ﬁrst part of the
paper. OTP mode is a bit more immune to key-guessing as
well as to leaking attacks, but requires too much memory to
be feasible.
Therefore, a third mode is required, as suggested earlier
in this paper. This mode will use a secure address-sensitive
encryption function, such as LRW or some block cipher in
CTR-mode, for calculating the mask for each instruction.
6. Related Work
Diversifying, or randomizing approaches to improve sys-
tem security have been discussed for a long time [7]. Al-
though the original intention of these defenses was to pro-
vide a barrier against the rapid expansion of exploits over
identical systems, there seems to be interest in using them
as ﬁrst-order defenses, so in order to test their reliability the
analysis of several attacks against such systems have been
published.
In 2004, Shacham et al. [17] presented a brute-force
guessing attack against the PaX ASLR [13]. ASLR ran-
domizes the location of the libraries and some of the data
segments of a process. The success of the attack relied on
the fact that only 24 bits were using for the randomization,
and that PaX was not re-randomizing the position of the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006segments after each crash, so the attack could learn from its
failures.
Sovarel et al [18] introduced an attack against RISE that
successfully guessed 100 mask bytes in 8636 attempts and
implemented a 100 bytes virtual machine to execute a pay-
load of an arbitrary size. Unfortunately their attack required
that the key stay the same across crashes, which has never
been true for RISE, which regenerates the masks after each
crash. Therefore, their attack was tested against an artiﬁ-
cially crippled version of RISE that did not re-generate the
keys. This paper not only presents guessing attacks that do
not depend on the permanence of the key, but also perpen-
dicular attacks that rely on data capture, instead of guessing
to succeed.
7. Conclusions
Several methods of stealing mask bytes and injecting
code into a RISE-protected process were presented in this
paper. The paper explains why these methods would often
be feasible in real-life situations. An attack against the di-
versiﬁer itself was also demonstrated, effectively disabling
RISE. Minimal loaders were developed to derive an upper
limit on the strength of any ISR implementation that has
to honor the byte-per-byte interpretation required on a Cisc
architecture such as IA-32.We showed that on any such sys-
tem, the ISR would never be stronger than 56 bits. Solutions
to the demonstrated weaknesses were proposed and evalu-
ated.
ISR is a promising approach to application security, and
should be further researched to uncover and ﬁx vulnerabili-
ties. Any ISR implementation has to be carefully examined
because, as this paper shows, implementation details can
make or break the security of the system.
Acknowledgements
The authors would like to thank Hagai Bar-El and Rony
Shapiro for the helpful discussions, comments and reviews
that made this paper possible. In addition, the authors grate-
fully acknowledge the partial support of the Santa Fe Insti-
tute.
References
[1] E. G. Barrantes, D. Ackley, S. Forrest, T. Palmer, D. Ste-
fanovic, and D. D. Zovi. Randomized instruction set emula-
tion to disrupt binary code injection attacks. In Proceedings
of the 10th ACM Conference on Computer and Communi-
cations Security (CCS ’03), pages 281–289, New York, NY,
USA, October 27-31 2003. ACM Press.
[2] E. G. Barrantes, D. H. Ackley, S. Forrest, and D. Stefanovic.
Randomized instruction set emulation. ACM Transactions
on Information and System Security (TISSEC), 8(1):3–40,
February 2005.
[3] S. Bhatkar, R. Sekar, and D. DuVarney. Efﬁcient tech-
niques for comprehensive protection from memory error ex-
ploits. In Proceedings of the 14th Usenix Security Sympo-
sium, pages 271–286, August 2005.
[4] CERT Coordination Center. Cert advisory ca-2001-33. mul-
tiple vulnerabilities in WUFTPD, 2001.
[5] S. Chen, J. Xu, E. Sezer, P. Gauriar, and R. Iyer. Non-
control-data attacks are realistic threats. In Proceedings of
the Usenix Security Symposium, page 177192, 2005.
[6] T. Durden. Bypassing PaX ASLR protection. Phrack, 59(9),
June 2002.
[7] S. Forrest, A. Somayaji, and D. Ackley. Building Diverse
Computer Systems. In Proceedings of the Sixth Workshop
on Hot Topics in Operating Systems, pages 67–72, 1997.
[8] M. Kaempf. Vudo malloc tricks. Phrack, 57(8), 2001.
[9] P. A. Karger and R. R. Schell.
Multics
report,
evaluation:
rity
nical
http://csrc.nist.gov/publications/history/karg74.pdf,
1974.
Vulnerability
HQ Electronic
secu-
analysis.
Tech-
Systems Division,
June
[10] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering
code-injection attacks with instruction-set randomization. In
Proceedings of the 10th ACM Conference on Computer and
Communications Security, pages 272–280, New York, NY,
USA, October 27-31 2003. ACM Press.
[11] M. Liskov, R. Rivest, and D. Wagner.
Tweakable
Lecture Notes in Computer Science,
block ciphers.
2442(CRYPTO’02):3146, 2002.
[12] I. Molnar. Exec Shield - new linux security feature. News-
Forge, May 2003.
[13] PaX team.
Documentation for the PaX project.
http://pax.grsecurity.net/docs/index.html, 2006.
[14] C. Percival.
Cache missing for fun and proﬁt.
In
In
http://www.daemonology.net/papers/htt.pdf, 2005.
[15] Scut and Team Teso. Exploiting format string vulnera-
bilities. In http://http://www.team-teso.net/articles /format-
string/, September 1 2001.
[16] J. Seward and N. Nethercote. Valgrind, an open-source
memory debugger for x86-gnu/linux. In http://valgrind.org/,
2006.
[17] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu,
and D. Boneh. On the effectiveness of address-space ran-
domization. In CCS ’04: Proceedings of the 11th ACM con-
ference on Computer and communications security, pages
298–307, New York, NY, USA, 2004. ACM Press.
[18] A. Sovarel, D. Evans, and N. Paul. Where’s the FEEB?:
The effectiveness of instruction set randomization. In Pro-
ceedings of the Usenix Security Symposium, pages 145–160,
2005.
[19] Tool Interface Standards Committee. Executable and Link-
ing Format (ELF), May 1995.
[20] Y. Weiss and E. G. Barrantes. Known/chosen key attacks
against RISE: Attacking the immune system. Technical
Report TR-ECCI-01-2006, E.C.C.I., Universidad de Costa
Rica, http://www.ecci.ucr.ac.cr/, September 2006.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006