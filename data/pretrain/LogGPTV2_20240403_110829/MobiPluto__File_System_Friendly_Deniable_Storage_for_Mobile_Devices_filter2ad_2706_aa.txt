title:MobiPluto: File System Friendly Deniable Storage for Mobile Devices
author:Bing Chang and
Zhan Wang and
Bo Chen and
Fengwei Zhang
MobiPluto: File System Friendly Deniable Storage for
Mobile Devices
Bing Chang1,2,3, Zhan Wang1,2
, Bo Chen4, Fengwei Zhang5
1 State Key Laboratory of Information Security,
∗
Institute of Information Engineering, Chinese Academy of Sciences, China
2 Data Assurance and Communication Security Research Center,
Chinese Academy of Sciences, China
3 University of Chinese Academy of Sciences, China
4 College of Information Sciences and Technology, The Pennsylvania State University, USA
5 Department of Computer Science, Wayne State University, USA
{changbing,wangzhan}@iie.ac.cn, PI:EMAIL, PI:EMAIL
ABSTRACT
Mobile devices are prevalently used for processing personal
private data and sometimes collecting evidence of social in-
justice or political oppression. The device owners may al-
ways feel reluctant to expose this type of data to undesired
observers or inspectors. This usually can be achieved by
encryption. However, the traditional encryption may not
work when an adversary is able to coerce device owners into
revealing their encrypted content. Plausibly Deniable En-
cryption (PDE) is thus designed to protect sensitive data
against this type of powerful adversaries.
In this paper, we present MobiPluto, a ﬁle system friendly
PDE scheme for denying the existence of sensitive data stored
on mobile devices. MobiPluto achieves deniability feature as
nothing but a “side-eﬀect” of combining thin provisioning, a
well-established tool in Linux kernel, with encryption. This
feature makes MobiPluto more plausible for users to have
such software on their mobile devices. A salient diﬀerence
between MobiPluto and the existing PDE schemes is that
MobiPluto is “ﬁle system friendly”, i.e., any block-based ﬁle
systems can be deployed on top of it. Thus, it is possible
to deploy MobiPluto on most mobile devices. We provide
a proof-of-concept implementation for MobiPluto in an An-
droid phone to assess its feasibility and performance.
Keywords
Plausibly Deniable Encryption, Mobile, Thin Provisioning,
LVM
1.
INTRODUCTION
Mobile devices are frequently used for processing private
data and sometimes collecting evidence of social injustice
∗
This author is the corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07-11, 2015, Los Angeles, CA, USA
c(cid:2) 2015 ACM. ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818046
or political oppression. The owner of a mobile device may
be reluctant to expose this type of data to undesired ob-
servers or inspectors. With today’s fast-paced, multitasking
lifestyle, it is possible to leave our phones lying on table with
an unlocked screen incautiously [26]. In certain geopolitical
areas with tensions, the border inspector may compulsively
require the passengers to reveal the content on their mobile
devices. This could prove detrimental and may compromise
security of particular professionals such as human rights ac-
tivists, who may possess evidence of violence.
Plausibly Deniable Encryption (PDE) has been adopted
to protect sensitive data against powerful adversaries who
can coerce users into revealing their encrypted content. This
practice should not be confused with encryption, as regu-
lar encryption is overt, while PDE is covert. A variety of
PDE systems have been published for PC platform, includ-
ing Rubberhose [24], TrueCrypt [35], etc. StegFS [28] is
a PDE solution for Ext2 ﬁle system, but its drawbacks in-
clude: (1) it is space costly for resolving overwritten issue by
using multiple copies; (2) the existence of the modiﬁed Ext2
driver and the external block table may lead to compromise
of deniability. Ragnarsson et al. [31] was the ﬁrst to mention
taking advantage of thin provisioning to achieve deniability
on PC’s and inspired our work. However, their proposed
design requires signiﬁcant modiﬁcation of thin provisioning
and fails to hide the metadata, thus the deniability cannot
be fully realized.
As the ﬁrst PDE system implemented for mobile devices,
Mobiﬂage [33] requires a physical or emulated FAT32 SD
card which is not necessarily present in some mobile de-
vices. Recently, Mobiﬂage [15] is extended to support Ext4
ﬁle system by modifying the driver of Ext4. Although the
extended Mobiﬂage no longer requires a physical or emu-
lated FAT32 SD card, its modiﬁcations to the Ext4 driver
may indicate the use of PDE and lead to compromise of
deniability. MobiHydra [36] improves Mobiﬂage by adding
support to multiple levels of deniability and mode switching
without rebooting, but it also requires a physical or emu-
lated FAT32 SD card.
All the prior solutions [15, 24, 28, 31, 33, 35, 36] are not
suitable for mobile devices, due to their performance and
storage costs, getting inadequate support by the mobile op-
erating systems, or being forced to modify the associated
ﬁle systems as a last resort. In this work, we propose Mobi-
381
Pluto, a ﬁle system friendly PDE solution, which can make
the existence of sensitive data stored on mobile devices deni-
able. To achieve deniability, two types of volumes are used:
a public volume for storing regular data, and one or multiple
hidden volumes for storing sensitive data. The volumes are
protected by diﬀerent passwords and encrypted with associ-
ated master keys. The key features of MobiPluto include:
• File system friendly. As data hiding is achieved at
the block level, any block-based ﬁle systems can be de-
ployed on top of MobiPluto without modiﬁcations. To
the best of our knowledge, no prior work can provide
such a novel feature.
• Deniability as a side-eﬀect. MobiPluto achieves
deniability as nothing but a “side-eﬀect” of combin-
ing thin provisioning with encryption. Note that thin
provisioning has been a well-established tool in Linux
kernel.
• User-controlled deniability levels. A user is able
to control the number of deniability levels in the sys-
tem. This can be achieved by choosing the number of
hidden volumes during initialization.
• Less storage cost. Compared to the steganographic
based schemes [16, 28, 29], MobiPluto does not require
extra storage for solving the overwritten problem be-
tween public data and hidden data.
We provide a proof-of-concept implementation for An-
droid 4.2.2 on LG Nexus 4 to assess the feasibility and per-
formance of MobiPluto. We also discuss the best practices
users should follow to restrict other known issues that may
lead to compromise of deniability.
The rest of the paper is organized as follows: Section 2
presents the background.
In Section 3, we discuss mod-
els and assumptions, including system model and adversar-
ial model. In Section 4, we describe MobiPluto design. In
Section 5, we discuss the implementation for Android. We
present the evaluation results in Section 6, including security
analysis and performance evaluation. In Section 7, we dis-
cuss our design. Section 8 presents related work and Section
9 is the conclusion.
2. BACKGROUND
2.1 Deniable Encryption
Plausibly deniable encryption (PDE) was ﬁrst explored to
maintain the privacy of communicated data against a coer-
cive attacker, who can approach and coerce either the sender
or the receiver into revealing the decryption keys [19]. When
being applied to storage encryption, it allows a data owner
to decrypt a ciphertext to a plausible and benign decoy
plaintext when using a diﬀerent key, such that the owner is
able to deny the existence of the original sensitive data [33].
For achieving plausibility, it requires that [31], 1) the decoy
plaintext can be normally found on a computer; 2) all the ci-
phertexts should be “accounted for”, i.e., having a plausible
explanation.
2.2 Full Disk Encryption
To protect sensitive data, it can either encrypt individ-
ual ﬁles/directories (i.e., ﬁle system level encryption) or en-
crypt the entire disk (i.e., full disk encryption). Compared
382
to ﬁle system level encryption, full disk encryption (FDE)
has several beneﬁts: 1) it transparently encrypts almost ev-
erything including the swap space and temporary ﬁles, by
which the users do not need to bother about which ﬁles to be
encrypted; 2) it allows to immediately destruct data by sim-
ply destroying a small number of keys for FDE. Popular FDE
tools include BitLocker [4] (for Windows) and FileVault [12]
(for Mac OS). FDE on Android has been an option since
Android 3.0 [21] and it is implemented with dm-crypt [7].
To deny the existence of sensitive data protected by FDE,
the device owner can claim that he/she does not possess the
secret keys any more (e.g., he/she has not used the device
for a long time, and has forgotten the password), and is not
able to decrypt the disk. This however, only provides very
weak deniability as the device owner may not be able to
prove the aforementioned statement [31].
2.3 Steganographic File Systems vs. Hidden
Volumes
To build practical PDE systems, it typically relies on ei-
ther steganography or hidden volumes. Multiple stegano-
graphic ﬁle systems [16, 28, 29] have been designed in the
literature to hide data in regular ﬁle systems. However, all
of them seem to hide deniable data among regular ﬁle data.
This may result in data loss of hidden ﬁles as they may be
overwritten by the regular ﬁle data. To mitigate the risk
of data loss, they usually need to maintain a large amount
of redundant data which will lead to ineﬃcient use of disk
space. The hidden-volume mechanism (e.g., TrueCrypt [35])
can mitigate the risk of data loss by intelligently placing all
the deniable ﬁles toward the end of the disk. In this way, the
redundant data required for data loss can be signiﬁcantly re-
duced. Consequently, we choose to use hidden volumes to
build MobiPluto.
The hidden-volume mechanism works as follows. The disk
is initially ﬁlled with random data. Two volumes are cre-
ated on the disk, a public volume and a hidden volume. The
public volume is encrypted (i.e., FDE) by a decoy key and is
placed on the entire disk. The hidden volume is encrypted
by a hidden key and is placed towards the end of the disk,
starting from a secret oﬀset. Upon a coercive attack, the
device owner can disclose the decoy key to the attacker, to
deny the existence of the hidden volume, as the attacker
cannot diﬀerentiate the encrypted hidden volume data and
the initial randomness embedded on the disk. Note that
when using the hidden-volume mechanism to achieve denia-
bility, the data written to the public volume should be placed
sequentially (or approximately sequentially), to reduce the
risk of over-writing the sensitive data stored in the hidden
volume. This explains why the PDE systems [33, 36] based
on hidden volumes prefer to use FAT [11] ﬁle systems.
2.4 Thin Provisioning
To avoid any potential failures caused by inadequate stor-
age, storage administrators usually need to plan ahead and
install more storage capacity than required (i.e., “thick pro-
visioning”). This thick provisioning usually leads to signiﬁ-
cant waste, as a lot of storage capacity may remain unused
over time. Thin provisioning has been designed to optimize
storage utilization by eliminating the need for installing un-
necessary storage capacity. With thin provisioning, a stor-
age administrator only allocates logical storage space to an
application and the system will not release the physical stor-
age capacity until it is actually required. This “on-demand”
storage avoids pre-allocating physical storage capacity, elim-
inating the waste caused by unused capacity.
Thin provisioning has been implemented by the dm-thin-
pool module, which works with two devices, a data device
and a metadata device. The data device contains blocks
of the various volumes, allocated sequentially from the be-
ginning, while the metadata device contains the block map-
pings. The dm-thin module provides two device mapper
targets, thin-pool and thin. The thin-pool target maps the
data and the metadata device to a pool device, while the
thin target maps this pool device to multiple thin volume
devices.
Logical Volume Manager (LVM [1]) has gained popularity
on Android for being able to ﬂexibly handle internal and
external storage [2, 5]. Thin provisioning is added to LVM
and can provide much more ﬂexible storage management.
As mobile devices become more and more powerful and are
expected to be equipped with more and more storage capac-
ity, using thin provisioning to manage mobile storage will
become extremely helpful and popular.
In this work, we aim to adapt thin provisioning to build
“ﬁle system friendly” deniable storage for mobile devices,
for the following reasons: 1) The dm-thin-pool module has
been added to the kernel, and we can simply rely on the
existing kernel features to build PDE systems for mobile
devices; 2) A thin volume can be used to build any block-
based ﬁle systems, and thin provisioning can transform the
non-sequential allocation on the thin volume to sequential
allocation on the underlying storage. This makes it possible
to combine both thin provisioning and hidden volumes to
build “ﬁle system friendly” PDE systems.
3. MODELS AND ASSUMPTIONS
3.1 System Model
We mainly consider mobile devices equipped with stor-
age media that expose a block-based access interface. Such
block-based storage media are used extensively as the in-
ternal storage for mobile devices nowadays [33], including
eMMC [14], etc.
For mobile devices equipped with raw ﬂash, MobiPluto
cannot directly work, as raw ﬂash does not expose a block
interface due to its nature [23] (e.g., ﬂash memory has a
limited number of program-erase cycle, and cannot be over-
written before being erased, etc.).
3.2 Adversarial Model
We consider a computationally bounded adversary, who
can fully control a mobile device after having captured the
device’s owner. The adversary can get root privilege of the
device, and fully control over the device’s internal and ex-
ternal storage, etc. Additionally, the adversary can coerce
the device’s owner to surrender keys, in order to decrypt the
storage and obtain the sensitive data stored in the device.
As mobile devices usually communicate with the external
environment, the adversary may also collude with the wire-
less carrier or the ISP to collect the network activity logs of
suspected devices.
However, we do not consider an adversary who can con-
tinuously monitor a suspicious device, and can stealthily
take periodic snapshots of the device’s storage.
In other
words, our adversary can only have “one-time”, rather than
“multiple-time” storage snapshots. This would be practical
as the adversary usually can have access to a mobile device
only after seizing the user [33].
3.3 Assumptions
Our MobiPluto relies on multiple assumptions, as sum-
marized in the following:
• The adversary cannot capture a mobile device which is
working in the PDE mode. Otherwise, it can trivially
retrieve the sensitive data from the PDE mode.
• MobiPluto needs to be merged with Android code stream,
such that the PDE capability is widespread, and the
availability of PDE will not be a red ﬂag.
• The adversary will know the design of MobiPluto. How-
ever, it does not have any knowledge on the keys and
passwords for PDE mode as well as the oﬀset of the
hidden volume.
• The adversary will stop coercing the device’s owner
once it is convinced that the decryption keys have been
revealed.
• For a mobile device that uses MobiPluto, we assume
the mobile OS, the bootloader, as well as the ﬁrmware
and the baseband OS are all malware-free (i.e., trusted).
Especially in the PDE model, the user will not use the
malicious apps controlled by the adversary.
Compared to Mobiﬂage [33] and MobiHydra [36], Mobi-
Pluto does not require any assumptions on the ﬁle systems,
and is thus “ﬁle system friendly”. This will be advantageous
in practice, as it allows the deployment of any block-based
ﬁle systems in MobiPluto PDE systems.
4. MOBIPLUTO DESIGN
In this section, we present the design of MobiPluto. Our
MobiPluto provides a ﬁle system friendly PDE solution for
mobile devices by utilizing hidden volumes and thin pro-
visioning. MobiPluto is named after the Helmet of Pluto,
which according to classic mythology, is capable of turning
its wearer invisible [13].
4.1 Overview
MobiPluto is able to deny the existence of sensitive data
by hiding volumes (storing sensitive data) in the empty space
of the storage medium. For simplicity of presentation, we
consider a simple case which has only two volumes: a pub-
lic volume created for storing regular data, and a hidden
volume created for storing sensitive data. The data stored
in the hidden volume are those whose existence the owner
wants to deny. If multi-level deniability is required, the num-
ber of hidden volumes can be varied accordingly [36]. By
utilizing the interesting properties oﬀered by thin provision-
ing (Sec. 2.4), we build thin logical volumes (“thin volumes”
for short) to achieve a ﬁle system friendly deniable storage
solution for mobile devices.
In MobiPluto, the public volume is protected by a decoy
password and the hidden volume is protected by a hidden
password. Speciﬁcally, we use a randomly generated decoy
key to encrypt the public volume and use the decoy pass-
word to encrypt the decoy key, which will be stored in the