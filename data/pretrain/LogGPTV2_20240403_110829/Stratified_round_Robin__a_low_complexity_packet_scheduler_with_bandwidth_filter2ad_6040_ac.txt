2k−1
end
To summarize, Stratiﬁed Round Robin operates as a two-
step scheduler. The ﬁrst step uses the ﬂow class mechanism
to assign slots to each ﬂow fi in proportion to its approxi-
mate weight as deﬁned by the ﬂow class Fk to which it be-
longs. The second step uses the weight-proportional credit
mechanism to ensure that each ﬂow fi receives service in
proportion to its actual weight wi. The advantage of this
approach is that it considerably simpliﬁes the scheduling
decision to be made. A WFQ-type scheduler must choose
among a large number N of ﬂows to service next, whereas
Stratiﬁed Round Robin must choose among a small number
n of ﬂow classes to service next. For all practical values of
n, Stratiﬁed Round Robin can be implemented in a few bit
operations, as described in Section 4.
The remaining operations that must be implemented are
activating and deactivating a ﬂow. A ﬂow fi is activated
when it becomes backlogged due to the arrival of a new
packet. Flow fi is added to the appropriate class Fk and
if necessary, Fk is added to the set of active ﬂow classes A.
Note that when fi becomes backlogged, it is not pending
until the start of Fk’s next scheduling interval. A ﬂow fi is
deactivated when it is no longer backlogged as a result of all
its queued packets being sent over the output link. Flow fi
is removed from the appropriate class Fk and if necessary,
Fk is removed from the set of active ﬂow classes A. Pseudo-
code for scheduler operations is provided above.
4.
IMPLEMENTATION
This section describes how the Stratiﬁed Round Robin
scheduler can be implemented in O(1) complexity with mod-
est hardware support.
To realize Stratiﬁed Round Robin, both the inter-class
and intra-class scheduling operations must be implemented.
Scheduling within a ﬂow class is essentially round-robin and
therefore almost trivial. For each ﬂow class Fk, it is neces-
sary to maintain a list of all ﬂows belonging to Fk. Since
the number of ﬂow classes n is small, this does not signif-
icantly add to the complexity of maintaining a single list
of ﬂows that an O(1) scheme like DRR would have to do.
Scheduling among ﬂow classes is more involved and must be
implemented eﬃciently.
Inter-class scheduling in Stratiﬁed Round Robin is deadline-
based, and therefore could suﬀer from the same sorting bot-
tleneck faced by schedulers such as WFQ. The critical dif-
ference is that while WFQ-type schedulers much choose the
earliest deadline among N ﬂows, Stratiﬁed Round Robin
must choose the earliest deadline among only n ﬂow classes.
R
The number n of ﬂow classes is given by log2
r , where R
is the bandwidth of the output link, and r is the minimum
unit of bandwidth allocation. For practical values of R and
r, the number n is a small number. For example, for an
OC-768 link, R = 40 Gbps. Even if r = 1bps, i.e., ﬂows are
allocated bandwidth in units of 1 bps, the number of ﬂow
classes n is at most 36. It is entirely feasible to implement in
hardware a priority queue of 36 elements that runs in O(1)
complexity 4.
4The notion of asymptotic complexity arises when r → 0. In
this case, the complexity of implementing Stratiﬁed Round
Robin is the complexity of doing priority queue operations
over n elements, i.e., O(log n) = O(log log R
r ). With align-
ment of scheduling intervals, it further reduces to priority
8
7
6
5
4
3
2
1
1
0
1
0
0
1
0
0
Priority Encoder
F8
F7
F6
F5
F4
F3
F2
F1
X
serviced flow
pending flow
Figure 3: A priority encoder is used to select the
lowest-numbered pending ﬂow class. Within the
class, a pending ﬂow is scheduled, as indicated by
the cross.
While using a priority queue for small values of n is feasi-
ble, it is possible to exploit a degree of freedom that reduces
the complexity of implementation even further. Recall that,
for each ﬂow class Fk, a scheduling interval is a contiguous
interval of 2k. Scheduling intervals for each class are aligned,
i.e., scheduling intervals for Fk always start at clock times
corresponding to multiples of 2k. For example, the ﬁrst
scheduling interval for Fk is the range of slots 0 . . . 2k − 1,
the second scheduling interval for Fk is the range of slots
2k . . . 2 ∗ 2k − 1, and so on. Note that this is not essential
for implementing Stratiﬁed Robin. For example, one could
imagine a new scheduling interval for Fk starting at time t
when it ﬁrsts becomes active, with the next interval starting
at t + 2k, and so on. In this case, scheduling intervals for
diﬀerent ﬂow classes would cross each other, and a prior-
ity queue would be required to keep track of deadlines. It
turns out that aligning these intervals with each other ad-
mits a much simpler implementation by dispensing with the
priority queue.
Aligning the scheduling intervals for ﬂow class Fk along
multiples of 2k has the following advantage. The start (end)
of a scheduling interval for Fk is also the start (end) of a
scheduling interval for every ﬂow class Fk(cid:2) where k
 1).
We prove that every backlogged ﬂow f ∈ Fk is assigned one
slot in every scheduling interval of Fk. If Nk = 0, there is
nothing to prove. Consider any scheduling interval of Fk,
which is of length 2k. Due to the alignment of scheduling
intervals, for every j(1 ≤ j  k is assigned a slot until every pending ﬂow
f ∈ Fk is assigned a slot ﬁrst. Since there are at most Nk
ﬂows in Fk and there are at least Nk slots available, every
backlogged ﬂow in Fk is guaranteed to be assigned a slot.
After being assigned one slot, a ﬂow is no longer pending
and is not assigned another slot until the next scheduling
interval of Fk. Hence proved. ✷
It is clear that Stratiﬁed Round Robin idles only when
there is no packet to send, i.e., it is work conserving. The
following sections analyze the fairness and delay properties
of Stratiﬁed Round Robin.
5.1 Golestani fairness
The fairness measure of Golestani [17] essentially requires
that the diﬀerence between the normalized service received
by any two backlogged ﬂows fi and fj , over any time period
(t1, t2), be bounded by a small constant. This section an-
alyzes Stratiﬁed Round Robin with respect to the fairness
measure of Golestani.
Before considering Golestani fairness, the following lemma
is required. Lemma 2 shows that Stratiﬁed Round Robin
assigns a ﬂow fi ∈ Fk slots in proportion to its approximate
−k. Speciﬁcally, it shows that in any x contiguous
weight 2
slots, the number of slots assigned to fi deviates from its
”expected” value of 2
−kx by at most 2.
Lemma 2. Let fi ∈ Fk be a backlogged ﬂow. The number
of slots xi assigned to fi in any time period (t1, t2) is given
by
−k
2
x − 2 < xi < 2
−k
x + 2
where x is the number of contiguous slots that completely
contain (t1, t2).
Proof. See appendix ✷
Corollary 1 uses Lemma 2 to bound the amount of service
that a ﬂow fi can receive in some time period.
Corollary 1. Let fi ∈ Fk be a backlogged ﬂow. The
amount of service Si(t1, t2) received by fi in any time period
(t1, t2) is given by
x wiLM − 5LM < Si(t1, t2) < x wiLM + 5LM
where x is the number of contiguous slot that completely con-
tain (t1, t2).
Proof. See appendix. ✷
Finally, Theorem 2 gives a bound for Stratiﬁed Round
Robin with respect to the fairness measure of Golestani.
Theorem 2
(Golestani fairness). In any time period
(t1, t2) during which ﬂows fi and fj are backlogged,