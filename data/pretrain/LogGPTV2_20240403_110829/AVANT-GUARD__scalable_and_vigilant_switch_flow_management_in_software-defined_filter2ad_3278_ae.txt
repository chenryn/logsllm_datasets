network is subject to SYN ﬂood attacks at a rate of 1,000,000 per
second (1 packet per us), then this network will receive at least 460
packets before stopping the attack. However, with AVANT-GUARD,
only two additional packets would be received after the data plane
reacts to the attack.
6. RELATED WORK
Our work is inspired by several parallel studies that explore se-
curity threats in SDNs [1, 14, 28] and attempt to deliver innovative
security applications with SDN technology. Mehdi et al. developed
SDN applications for detecting network scan attacks [17]. Jafar-
ian et al. suggested a random host mutation approach to protecting
a network from scanning attacks[10]. Popa et al. designed a new
security application for a cloud network [22]. Braga et al. created
a DDoS detection application using SDN [3]. Shin et al. proposed
a new security-monitoring-as-a-service framework for a cloud net-
work [25]. Unlike our approach which fundamentally alters ﬂow
management at SDN switch level, these studies focus on creat-
ing speciﬁc high-level SDN applications to provide improved se-
curity services. We believe that all these applications can beneﬁt
Data PlaneControl PlaneSYNSYNSYN/ACKSYN/ACKACKACKTL 1PD 2FO 1PD 3FO 1PD 1TL 1PR 1ABData PlaneControl PlaneSYNSYNSYN/ACKSYN/ACKACKACKTL 1PD 2FO 1PD 3PD 1TR 1TR 2TL 1PR 1AB422Figure 22: CDF of measured component delays (part 1)
Figure 23: CDF of measured component delays (part 2)
from AVANT-GUARD. For example, the applications for detecting
scan attacks in [17, 10] no longer need to manage TCP session
by themselves because they can simply leverage AVANT-GUARD.
FRESCO [26] is a a new framework designed to help accelerate
the development of SDN security applications. We believe such
frameworks can beneﬁt from the resilience and trigger capabilities
provided by AVANT-GUARD.
AVANT-GUARD’s connection migration function is inspired by
the SYN cookie, and there are many commercial products employ-
ing the SYN cookie idea to defeat TCP SYN ﬂooding attacks (e.g.,
Cisco Guard [6] and Juniper Junos [12]). In addition, Mahimka
et al. proposed a middle-box solution that can defeat network ﬂood-
ing attacks [16]. To our knowledge, we are the ﬁrst to apply SYN
cookies and connection migration in an SDN network.
Researchers have also proposed new architectures to improve
SDN performance by reducing the communication between the switch
and controller. Onix [13], Maestro [30], and Hyperﬂow [27] at-
tempt to build more scalable SDN networks using distributed con-
trol planes. While we share a common goal in improving the scala-
bility of SDN networks, we differ in the speciﬁc techniques that we
propose to achieve this goal and in our emphasis on security. Mogul
et al. proposed a new data plane architecture to reduce memory
space by moving counters to the control plane [11]. Lu et al. [15]
devised a new SDN architecture that handles a part of packet pro-
cessing in the CPU. DIFANE [29] proposed a new solution that
seeks to reduce switch-to-controller trafﬁc by keeping all trafﬁc in
the data plane and selectively directing packets through intermedi-
ate switches that store the necessary rules. DevoFlow [7] seeks to
improve the visibility and statistics gathering capabilities of Open-
Flow and suggests a new data plane architecture to manage ﬂow
rules efﬁciently. However, the goals and approach of these studies
are very different from our work in that these systems are focused
on improving performance under normal network conditions while
AVANT-GUARD introduces new techniques to improve network re-
silience under attacks. The concept of actuating triggers is similar
to event-triggers described in DevoFlow, with the key difference
that our triggers result in the dynamic insertion of a ﬂow rule. In
contrast, DevoFlow event-triggers simply result in a call back to the
controller.
7. LIMITATIONS AND DISCUSSION
We now discuss some limitations in our work. First, the connec-
tion migration component of AVANT-GUARD primarily improves
resilience against TCP SYN ﬂood and network scanning attacks.
Thus, it might not help application developers who want to defend
against application layer DoS attacks or attacks based on UDP or
ICMP protocols. However, delayed connection migration and ac-
tuating triggers could be selectively used to mitigate the impact of
such attacks. Further, most well-known network services are based
on TCP and most common network attacks are against TCP-based
services. Thus, AVANT-GUARD would beneﬁt the majority of net-
work systems and applications. Extending AVANT-GUARD to bet-
ter support more sophisticated attacks and non-TCP ﬂows is future
work.
Second, the use of connection migration imposes a small but
measurable delay to normal network connections. This represents a
very reasonable trade-off between security and performance. To re-
duce unnecessary overhead, we envision that certain networks may
turn off connection migration by default and initiate it only under
duress. This policy could be expressed as an actuating trigger. In
addition, it could be combined with whitelists or dynamic reputa-
tion schemes to improve the quality of service to legitimate users
during attacks. In our future work, we hope to more thoroughly
investigate such trade-offs that occur when using connection mi-
gration and design better guidelines for different scenarios.
8. CONCLUSIONS AND FUTURE WORK
In this paper, we propose AVANT-GUARD, a new framework to
advance the security and resilience of OpenFlow networks with
greater involvement from the data-plane layer. The goal of AVANT-
GUARD is to make SDN security applications more scalable and
responsive to dynamic network threats. A key challenge, which we
address, is the inherent bottleneck introduced by the interface be-
tween the control plane and the data plane that knowledgeable ad-
versaries can exploit. Connection migration enables the data plane
to shield the control plane from such saturation attacks. The sec-
ond challenge is the issue of responsiveness. SDN security appli-
cations need expeditious access to network statistics from the data
plane as a method for quickly responding to network threats. To
address this, we introduce actuating triggers that automatically in-
sert ﬂow rules when the network is under duress. We present a
software implementation of AVANT-GUARD, and demonstrate that
the overhead imposed by the AVANT-GUARD security extensions
is minimal, with connection delay increases of much less than a
1% overhead, while providing resilience to an important adversar-
ial model that may hinder SDN adoption.
Acknowledgements. This material is based upon work supported
by the Defense Advanced Research Projects Agency (DARPA) and
the United States Air Force under Contract No. FA8750-11-C-0249
051015202530354000.10.20.30.40.50.60.70.80.91Time [us]F(x)time for TL1, TR1, TR2, and FO1  TL1TR1TR2FO120030040050060070080090000.10.20.30.40.50.60.70.80.91Time [us]F(x)time for PD1, PD2, and PD3  PD1PD2PD3423and by the National Science Foundation (NSF) under Grant no.
CNS-0954096. All opinions, ﬁndings and conclusions or recom-
mendations expressed herein are those of the author(s) and do not
necessarily reﬂect the views of DARPA, the United States Air Force
or NSF. It is approved for Public Release, Distribution Unlimited.
9. REFERENCES
[1] K. Benton, L. J. Camp, and C. Small. Openﬂow vulnerability
assessment. In Proceedings of the second ACM SIGCOMM
workshop on Hot topics in software deﬁned networking
(HotSDN), 2013.
[2] D. J. Bernstein. SYN Cookies.
http://cr.yp.to/syncookies.html.
[3] R. S. Braga, E. Mota, and A. Passito. Lightweight DDoS
Flooding Attack Detection Using NOX/OpenFlow. In
Proceedings of the 35th Annual IEEE Conference on Local
Computer Networks (LCN), 2010.
[4] M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown,
and S. Shenker. Ethane: Taking Control of the Enterprise. In
Proceedings of ACM SIGCOMM, 2007.
[5] M. Casado, T. Garﬁnkel, M. Freedman, A. Akella, D. Boneh,
N. McKeowon, and S. Shenker. SANE: A Protection
Architecture for Enterprise Networks. In Proceedings of the
Usenix Security Symposium, August 2006.
[6] Cisco. Cisco Guard Anomaly Detector.
http://www.cisco.com/en/US/prod/
collateral/modules/ps2706/ps6235/produc%
t_data_sheet0900aecd80220a7c.html.
[7] A. Curtis, J. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma,
and S. Banerjee. DevoFlow: Scaling Flow Management for
High-Performance Networks. In Proceedings of ACM
SIGCOMM, 2011.
[8] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers,
J. Rexford, G. Xie, H. Yan, J. Zhan, and H. Zhang. A Clean
Slate 4D Approach to Network Control and Management. In
Proceedings of ACM Computer Communications Review,
2005.
[9] G. Gu, Z. Chen, P. Porras, and W. Lee. Misleading and
Defeating Importance-Scanning Malware Propagation. In
Proceedings of International Conference on Security and
Privacy in Communication Networks (SecureComm), 2007.
[10] J. H. Jafarian, E. Al-Shaer, and Q. Duan. Openﬂow Random
Host Mutation: Transparent Moving Target Defense using
Software Deﬁned Networking. In Proceedings of the 1st
ACM Workshop on Hot Topics in Software Deﬁned Networks
(HotSDN), 2012.
[11] P. C. Jeffrey C. Mogul. Hey, You Darned Counters! Get Off
My ASIC! In Proceedings of the 1st ACM Workshop on Hot
Topics in Software Deﬁned Networks (HotSDN), 2012.
[12] Juniper. Junos Security Conﬁguration.
http://www.juniper.net/us/en/products-
services/nos/junos/.
[13] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski,
M. Zhu, R. Ramanathan, Y. Iwata, H. Inoue, T. Hama, and
S. Shenker. Onix: A Distributed Control Platform for
Large-scale Production Networks. In Proceedings of the
Symposium on Operating Systems Design and
Implementation (OSDI), 2010.
[14] D. Kreutz, F. M. Ramos, and P. Verissimo. Towards Secure
and Dependable Software-Deﬁned Networks. In Proceedings
of the second ACM SIGCOMM workshop on Hot Topics in
Software Deﬁned Networking (HotSDN), 2013.
[15] G. Lu, R. Miao, Y. Xiong, and C. Guo. Using CPU as a
Trafﬁc Co-processing Unit in Commodity Switches. In
Proceedings of the 1st ACM Workshop on Hot Topics in
Software Deﬁned Networks (HotSDN), 2012.
[16] A. Mahimka, J. Dange, V. Shmatikov, H. Vin, and Y. Zhang.
dFence: Transparent Network-based Denial of Service
Mitigation. In Proceedings of the Symposium on Networked
Systems Design and Implementation (NSDI), 2007.
[17] S. Mehdi, J. Khalid, and S. Khayam. Revisiting Trafﬁc
Anomaly Detection Using Software Deﬁned Networking. In
Recent Advances in Intrusion Detection (RAID), 2011.
[18] J. Naous, D. Erickson, G. A. Covington, G. Appenzeller, and
N. McKeown. Implementing an OpenFlow switch on the
NetFPGA Platform. In Proceedings of the 4th ACM/IEEE
Symposium on Architectures for Networking and
Communications Systems (ANCS), 2008.
[19] Open Networking Foundation. Software-Deﬁned
Networking: The New Norm for Networks. Technical report,
2012. https://www.opennetworking.org/
images/stories/downloads/white-
papers/wp%-sdn-newnorm.pdf.
[20] OpenFlow. OpenFlow Switch Speciﬁcation version 1.0.0.
Technical report, 2010. http://www.openflow.org/
documents/openflow-spec-v1.0.0.pdf.
[21] OpenFlow.org. OpenFlow Switching Reference System.
http://www.openflow.org/wp/downloads/.
[22] L. Popa, M. Yu, S. Y. Ko, I. Stoica, and S. Ratnasamy.
CloudPolice: Taking Access Control out of the Network. In
Proceedings of the 9th ACM Workshop on Hot Topics in
Networks (HotNets), 2010.
[23] POX. Python Network Controller.
http://www.noxrepo.org/pox/about-pox/.
[24] N. Security. http://nmap.org/.
[25] S. Shin and G. Gu. CloudWatcher: Network Security
Monitoring Using OpenFlow in Dynamic Cloud Networks
(or: How to Provide Security Monitoring as a Service in
Clouds?). In Proceedings of the 7th Workshop on NPSec,
2012.
[26] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and
M. Tyson. FRESCO: Modular Composable Security Services
for Software-Deﬁned Networks. In Proceedings of the 20th
Annual Network and Distributed System Security Symposium
(NDSS), 2013.
[27] A. Tootoonchian and Y. Ganjali. HyperFlow: A Distributed
Control Plane for OpenFlow. In Proceedings of the Internet
Network Management Workshop/Workshop on Research on
Enterprise Networking (INM/WREN), 2010.
[28] X. Wen, Y. Chen, C. Hu, C. Shi, and Y. Wang. Towards a
secure controller platform for openﬂow applications. In
Proceedings of the second ACM SIGCOMM workshop on
Hot topics in software deﬁned networking (HotSDN), 2013.
[29] M. Yu, J. Rexford, M. J. Freedman, and J. Wang. Scalable
Flow-based Networking with DIFANE. In Proceedings of
ACM SIGCOMM, 2010.
[30] T. S. E. N. Zheng Cai, Alan L. Cox. Maestro: Balancing
Fairness, Latency and Throughput in the OpenFlow Control
Plane. Rice University Technical Report TR11-07.
424