    ```
    NAME                CONTAINER           CPU %
    docker-stress       8946da6ffa90        599.44%
    ```
9.  通过使用`--cpus`选项并指定您希望允许映像使用的内核数量，管理您的`docker-stress`映像可以访问的内核数量。在下面的命令中，`2`被设置为我们的容器允许使用的核心数量:
    ```
    docker run --rm -it -e var="--cpu 8 --timeout 20" --cpus 2 --name docker-stress docker-stress
    ```
10.  Move back to the terminal running `docker stats`. You will see that the CPU percentage being used does not exceed much more than 200%, showing that Docker is restricting resource usage to only two of the cores available on our system:
    ```
    NAME                CONTAINER           CPU %
    docker-stress       79b32c67cbe3        208.91%
    ```
    到目前为止，您一次只能在我们的系统上运行一个容器。本练习的下一部分将允许您以分离模式运行两个容器。在这里，您将在一个运行的容器上使用`--cpu-shares`选项进行测试，以限制它可以使用的内核数量。
11.  如果您没有在终端窗口中运行`docker stats`，请按照您之前所做的那样启动它，以允许我们监控正在运行的进程:
    ```
    docker stats --format "table {{.Name}}\t{{.Container}}\t{{.CPUPerc}}"
    ```
12.  Access another terminal window and start up two `docker-stress` containers – `docker-stress1` and `docker-stress2`. The first will use a `--timeout` value of `60` to have the stress application running for 60 seconds, but here, limit the `--cpu-shares` value to `512`:
    ```
    docker run --rm -dit -e var="--cpu 8 --timeout 60" --cpu-shares 512 --name docker-stress1 docker-stress
    ```
    容器的标识将按如下方式返回:
    ```
    5f617e5abebabcbc4250380b2591c692a30b3daf481b6c8d7ab8a0d1840d395f
    ```
    第二个容器将不受限制，但其`--timeout`值仅为`30`，因此应首先完成:
    ```
    docker run --rm -dit -e var="--cpu 8 --timeout 30" --name docker-stress2 docker-stress2
    ```
    容器的标识将按如下方式返回:
    ```
    83712c28866dd289937a9c5fe4ea6c48a6863a7930ff663f3c251145e2fbb97a
    ```
13.  回到我们正在运行的终端`docker stats`。你会看到两个容器在运行。在下面的输出中，我们可以看到名为`docker-stress1`和`docker-stress2`的容器。当其他容器正在运行时，`docker-stress1`容器被设置为只有`512` CPU 份额。还可以观察到，它使用的 CPU 资源只有我们第二个名为`docker-stress2` :
    ```
    NAME                CONTAINER           CPU %
    docker-stress1      5f617e5abeba        190.25%
    docker-stress2      83712c28866d        401.49%
    ```
    的容器的一半
14.  当您的第二个容器完成`docker-stress1`容器的 CPU 百分比时，它将被允许使用运行系统上几乎所有可用的六个内核:
    ```
    NAME                CONTAINER           CPU %
    stoic_keldysh       5f617e5abeba        598.66%
    ```
CPU 资源在确保应用以最佳状态运行方面发挥着重要作用。本练习向您展示了在将容器部署到生产环境中之前，当容器仍在系统上时，监视和配置容器的处理能力是多么容易。下一节将继续对容器的内存执行类似的监控和配置更改。
# 管理容器内存资源
正如我们可以监视和控制容器在系统上使用的 CPU 资源一样，我们也可以对正在使用的内存执行同样的操作。与 CPU 一样，运行的容器能够使用 Docker 提供的默认设置来使用主机的所有内存，在某些情况下，如果不受限制，可能会导致系统变得不稳定。如果主机系统内核检测到没有足够的可用内存，它将显示一个**内存不足异常**，并开始关闭系统上的进程以帮助释放内存。
好消息是 Docker 守护程序在您的系统上具有很高的优先级，因此内核将在停止 Docker 守护程序运行之前首先杀死正在运行的容器。这意味着，如果高内存使用率是由容器应用引起的，您的系统应该能够恢复。
注意
如果您正在运行的容器被关闭，您还需要确保您已经测试了您的应用，以确保您正在限制它对您正在运行的进程的影响。
`docker stats`命令再次为我们提供了大量关于内存使用的信息。它将输出容器正在使用的内存百分比，以及当前正在使用的内存与它能够使用的内存总量的比较。如前所述，我们可以限制`--format`选项的输出。在下面的命令中，我们通过分别显示`.Name`、`.Container`、`.MemPerc`和`.MemUsage`属性来减少只显示容器名称和 ID 以及内存百分比和内存使用量的输出:
```
docker stats --format "table {{.Name}}\t{{.Container}}\t{{.MemPerc}}\t{{.MemUsage}}"
```
在没有容器运行的情况下，前面的命令将显示以下输出:
```
NAME         CONTAINER          MEM %         MEM USAGE / LIMIT
```
如果我们想限制或控制正在运行的容器使用的内存量，有几个选项可供我们选择。可用的选项之一是`--memory`或`-m`选项，它将为正在运行的容器可以使用的内存量设置一个限制。在下面的例子中，我们使用了`--memory 512MB`的语法将映像可用的内存量限制为`512MB`:
```
docker run --memory 512MB 
```
如果运行该容器的主机系统也使用交换空间作为其可用内存的一部分，您也可以从该容器分配内存作为交换运行。只需使用`--memory-swap`选项即可完成。这只能与`--memory`选项结合使用，如我们在以下示例中所演示的。我们已经将`--memory-swap`选项设置为`1024MB`，这是内存和交换内存容器可用的内存总量。因此，在我们的例子中，在交换中将有另一个`512MB`可用:
```
docker run --memory 512MB --memory-swap 1024MB 
```
但是，您需要记住，交换内存将被分配给磁盘，因此，它将比内存更慢，响应更慢。
注意
需要将`--memory-swap`选项设置为高于`--memory`选项的数值。如果它被设置为相同的数字，您将无法从运行的容器中分配任何内存进行交换。
另一个可用的选项是`--oom-kill-disable`选项，仅在需要确保运行容器始终可用时使用。如果主机系统内存不足，此选项会阻止内核终止正在运行的容器。这只能与`--memory`选项一起使用，以确保您设置了容器可用内存的限制。没有限制，`--oom-kill-disable`选项可以轻松使用主机系统上的所有内存:
```
docker run --memory 512MB --oom-kill-disable 
```
尽管您的应用设计得很好，但是前面的配置为您提供了一些选项来控制正在运行的容器使用的内存量。
下一部分将为您提供分析 Docker 映像上的内存资源的实践经验。
## 练习 12.02:分析 Docker 映像上的内存资源
本练习将帮助您分析活动容器在主机系统上运行时如何使用内存。再一次，您将使用先前创建的`docker-stress`映像，但这次带有仅使用运行容器内存的选项。此命令将允许我们实现一些可用的内存限制选项，以确保我们正在运行的容器不会关闭我们正在运行的主机系统:
1.  Run the `docker stats` command to display the relevant information you need for the percentage memory and memory usage values:
    ```
    docker stats --format "table {{.Name}}\t{{.Container}}\t{{.MemPerc}}\t{{.MemUsage}}"
    ```
    该命令将提供如下输出:
    ```
    NAME        CONTAINER       MEM %         MEM USAGE / LIMIT
    ```
2.  Open a new terminal window to run the `stress` command again. Your `docker-stress` image will only utilize CPU when you use the `--cpu` option. Use the `--vm` option in the following command to start up the number of workers you wish to spawn to consume memory. By default, each of them will consume `256MB`:
    ```
    docker run --rm -it -e var="--vm 2 --timeout 20" --name docker-stress docker-stress
    ```
    当您移回监视正在运行的容器时，使用的内存仅达到限制的 20%左右。不同的系统可能会有所不同。由于只有两个工作进程在运行，每个工作进程消耗 256 MB 的内存，您应该只能看到它达到大约 500 MB 的内存使用量:
    ```
    NAME            CONTAINER      MEM %      MEM USAGE / LIMIT
    docker-stress   b8af08e4d79d   20.89%     415.4MiB / 1.943GiB
    ```
3.  The stress application also has the `--vm-bytes` option to control the number of bytes that each worker being spawned up will consume. Enter the following command, which has set each worker to `128MB`. It should show a lower usage when you monitor it:
    ```
    docker run --rm -it -e var="--vm 2 --vm-bytes 128MB --timeout 20" --name stocker-stress docker-stress
    ```
    如您所见，压力应用努力将内存使用量推高很远。如果您想使用系统上所有的 8 GB 内存，您可以使用 1，024 MB 的`--vm 8 --vm-bytes`:
    ```
    NAME            CONTAINER      MEM %    MEM USAGE / LIMIT
    docker-stress   ad7630ed97b0   0.04%    904KiB / 1.943GiB
    ```
4.  使用`--memory`选项减少`docker-stress`映像可用的内存量。在下面的命令中，您将看到我们已经将运行容器的可用内存设置为限于`512MB` :
    ```