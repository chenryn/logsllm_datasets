from IP to RP, incrementing and decrementing entropy
counters appropriately by 8αr. It then immediately extracts
(cid:2)RP.ec/8(cid:3) bytes fromRP, decrements RP.ec appropriately,
and returns the extracted bits to the calling process. If on
the other hand αr < 8, then it blocks until αr ≥ 8.
Figure 3 summarizes the conditions required for trans-
ferring data from one pool
to the next. The design of
/dev/(u)random intimately relies on ad-hoc entropy esti-
mates, which may be poor. We will also see, looking ahead,
that the entropy counters cause trouble due to their use
in deciding when to add entropy to the secondary pools.
For example, we observe that there exists a simple entropy
starvation attack against /dev/urandom by a malicious user
process that continuously consumes from /dev/random (e.g.,
using the command dd if=/dev/random). In this case,
reads from /dev/urandom will never trigger a transfer from
IP.
get random int: the kernel-only RNG. GRI is a simple
RNG that provides 32-bit values exclusively to callers inside
the kernel. GRI is primarily used for Address Space Layout
Randomization (ASLR) and StackProtector “canary” values
used to thwart stack-smashing attacks. The GRI RNG is
designed to be very fast and does not consume entropy from
the pools in /dev/(u)random.
The GRI RNG uses two values stored in kernel memory:
a per-CPU 512-bit hash value HV and a global 512-bit
secret value S, which is initially set to all zeros. During
the late_init phase of boot, the kernel sets the secret
value S to 512-bits obtained from /dev/urandom is initially
set to all zeros. Late in the boot process, the kernel sets the
secret value S to 512-bits obtained from /dev/urandom.
Each time it is called, GRI adds the process ID (PID)
P of the current process, the current kernel timer value J
(called jifﬁes), and the lower-32 bits of the timestamp cycle
counter CC into the ﬁrst 32-bit word of the hash value HV ,
and then sets HV to the MD5 hash of HV and the secret
561
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
||
value S. That is, it computes HV = H( (HV [1 .. 32] +
P + J + CC) || HV [33 .. 512] || S) where “+” is integer
is concatenations, and H(·) is the
addition modulo 232,
MD5 hash. The ﬁrst 32 bits of HV are returned to the caller,
and the new HV value becomes the stored hash value for
the next call.
Use of hardware RNGs.
If available, the /dev/(u)random
RNG uses
architecture-speciﬁc hardware RNGs dur-
ing initialization and output generation. During boot,
/dev/(u)random reads enough bytes from the hardware RNG
to ﬁll each pool and uses the weak mixing function to mix
in these values. This is done for the input, nonblocking,
and blocking pools, but not for the interrupt pool. During
output generation, /dev/(u)random XORs values from the
hardware RNG into each word of the output value prior to
the “folding” of the output that produces a 10-byte chunk.
GRI returns a 32-bit value from the hardware RNG in place
of the software implementation described above.
B. Virtualization
In this work, we focus on the efﬁcacy of the Linux RNGs
when operating in virtualized environments without the aid
of a hardware RNG. In a virtualized environment, one or
more guest virtual machines (VMs) run on a single physical
host, and the hypervisor mediates access to some hardware
components (e.g., the network interface, disks, etc.). There
is a management component for starting, stopping, and
conﬁguring virtual machines. In Xen, this is called Dom0,
while in hosted virtual machines (e.g., VMware Workstation)
this is the host operating system.
A VM can be started in one of three ways. First, it can
execute like a normal physical system by booting from a
virtual disk. As it executes, it can update the state on the
disk, and its next boot reﬂects those changes. Second, a VM
can be repeatedly executed from a ﬁxed image, which is a
ﬁle that contains the persistent state of the guest OS. In this
case, changes made to the OS state are discarded when the
VM shuts down, so the OS always boots from the same state.
This is the default case, for example, in infrastructure-as-a-
service cloud computing systems including Amazon EC2.
Third, a VM can start from a snapshot, which is a ﬁle that
contains the entire state of a running VM at some point
in its execution. This includes not only the ﬁle system but
also memory contents and CPU registers. Both Xen and
VMware support pausing a running VM at an arbitrary point
in its execution and generating a snapshot. The VM can be
resumed from that snapshot, which means it will continue
executing at the next instruction after being paused. If a
VM continues running after the snapshot, restarting from a
snapshot effectively rolls back execution to the time when
the snapshot was taken.
It has long been the subject of folklore that RNGs,
and in particular, /dev/(u)random, may not perform as well
when run within a VM [14,16,27,28]. First, hypervisors
often coalesce interrupts into batches before forwarding
them to a given guest domain to improve performance.
Second, memory pages are typically zeroed (set to all zeroes
to erase any “dirty” data) by the hypervisor when new
physical memory pages are allocated to a guest VM. Zeroing
memory pages is required to ensure that dirty memory
does not leak information between different guests on the
same host machine. Third, several system events used for
entropy by /dev/(u)random are not relevant in popular uses
of virtualization, in particular keyboard and mouse events
do not occur in virtualized servers.
C. RNG Threat Models
The Linux RNGs are used by a variety of security-
critical applications, including cryptographic algorithms and
for system security mechanisms. Should RNG values be
predictable to an adversary or the same (unknown) value
repeatedly used, the RNG-using applications become vul-
nerable to attack. As just a few examples, /dev/urandom
is used to seed initial TCP/IP sequence numbers and by
cryptographic libraries such as OpenSSL to generate secret
keys, while GRI is used as mentioned above for ASLR and
stack canaries.
(2)
RNGs are therefore designed to face a variety of threats
from attackers both off-system and (unprivileged) local
attackers. We assume that the attacker always knows the
software and hardware stack in use (i.e., kernel versions,
distribution, and underlying hypervisor). The threats to RNG
systems are:
(1)
State predictability: Should the entropy sources used
by the RNG not be sufﬁciently unpredictable from the
point of view of the attacker, then the RNG state (and
so its output) may be predictable. For example, a low-
granularity time stamp (e.g., seconds since the epoch)
is a bad entropy source because it is easily guessed
[10].
State compromise: The attacker gets access to the inter-
nal state of the RNG at some point in time and uses it to
learn future states or prior states (forward-tracking and
back-tracking attacks respectively). Forward-tracking
attacks may use RNG outputs somehow obtained by
the attacker as checkpoints, which can help narrow
a search allowing the attacker to check if guessed
internal states of the RNG are correct. VM snapshots
available to an attacker, for example, represent a state
compromise.
State reuse: With full-memory VM snapshots, the same
RNG state may be reused multiple times and produce
identical RNG outputs. Since the security of a random
number is its unpredictability, this can eliminate the
security of the operation using a repeated RNG output.
(4) Denial-of-service: One process attempts to block an-
(3)
other process from using the RNG properly.
562
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Our focus will be on the design of the RNGs, and so we
will not attempt to exploit cryptanalytic weaknesses in the
underlying cryptographic primitives MD5 and SHA-1.
III. MEASUREMENT STUDY OVERVIEW
In the following sections we report on measurements in
order to answer several questions about the security of the
Linux RNGs when used on virtual platforms. In particular:
• When booting from a VM image, how quickly is the
• Does VM snapshot reuse lead to reset vulnerabilities?
RNG state rendered unpredictable? (Section IV)
(Section V)
Along the way we build a methodology for estimating
uncertainty about the RNG state, and, as a result, assessing
the suitability of various sources of entropy. Of course, one
cannot hope to fully characterize software entropy sources in
complex, modern systems, and instead we will use empirical
estimates as also done by prior RNG analyses [9,23]. When
estimating complexity of attacking an RNG, we will be
conservative whenever possible (letting the adversary know
more than realism would dictate). Where vulnerabilities
appear to arise, however, we will evidence the issues with
real attacks.
To accomplish this, we perform detailed measurements of
the Linux RNGs when rebooting a virtual machine and when
resuming from a snapshot. We produced an instrumented
version of the Linux kernel v3.2.35, which we refer to
as the instrumented kernel. The instrumentation records
all inputs submitted to the RNGs, all calls made to the
RNGs to produce outputs, changes to the entropy counts
for each of /dev/(u)random’s pools, and any transfers of bits
between entropy pools. To avoid signiﬁcant overheads, the
resulting logs are stored in a static buffer in memory, and
are written to disk at the end of an experiment. Our changes
are restricted to the ﬁle: /drivers/char/random.c.
There were surprisingly non-trivial engineering challenges
in instrumenting the RNGs, as the breadth of entropy
sources, inherent non-determinism (e.g., event races), and
the potential for instrumentation to modify timing (recall that
time stamps are used as entropy sources) make instrumenta-
tion delicate. For brevity we omit the details. However, we
did validate the correctness of our instrumentation by build-
ing a user-level simulator of the RNGs. It accepts as input
log ﬁles as produced by the instrumented kernel, and uses
these to step through the evolution of the state of the RNGs.
This allowed us to verify that we had correctly accounted
for all sources of non-determinism in the RNG system, and,
looking ahead, we use this simulator as a tool for mounting
attacks against the RNGs. For any computationally tractable
attacks, we also verify their efﬁcacy in an unmodiﬁed Linux
kernel.
We will publicly release open-source versions of the
instrumented kernel as well as simulator so others can
reproduce our results and/or perform their own analyses in
other settings. Links to open-source code for this project can
be found on the author’s website.
We use the following experimental platforms. For local
experiments, we use a 4-core Intel Xeon E5430 2.67 GHz
CPU (64-bit ISA) with 13 GB of main memory. We use
Ubuntu Linux v12.10 in the Native setup, and we use the
same OS for host and guest VMs. The Xen setup uses Xen
v4.2.1, and the single Xen guest (domU) is conﬁgured with a
single CPU and 1 GB of main memory. The cycle counter is
not virtualized on Xen experiments (the default setting). The
VMware setup uses VMware Workstation 9.0.0 with guest
given a single CPU and 2 GB of main memory. On VMware
the cycle counter is virtualized (the default). Although we
performed experiments with Ubuntu, our results should
apply when other Linux distributions are used in either
the host and/or guest. Finally in our EC2 setup, we built
an Amazon Machine Image (AMI) with our instrumented
kernel running on Ubuntu Linux v12.04 (64-bit ISA). All
experiments launched the same AMI on a fresh EBS-backed
m1.small instance in the US East region. In our experimental
setups, there exist no keyboard or mouse inputs, which is
consistent with most VM deployment settings.
IV. BOOT-TIME RNG SECURITY
We examine the behavior of the two Linux RNGs (GRI
and /dev/(u)random) during boot, in particular seeking to
understand the extent to which there exist boot-time entropy
holes (insufﬁcient entropy collection before the ﬁrst uses of
the RNGs). As mentioned, in the past concerns have been
raised that the Linux RNGs, when running on Amazon EC2,
are so entropy starved that cryptographic key generation
towards the end of boot could be compromised [28]. Our
results refute this, showing that uncertainty in the RNGs
is collected rather rapidly during boot across a variety of
settings. We do, however, expose a boot-time entropy hole
for the very ﬁrst uses of both GRI and /dev/(u)random. In
both cases the result is that stack canaries generated early
in the boot process do not provide the uncertainty targeted
(to 27 bits of uncertainty from 64 bits due to the weak RNG
output).
We examine the behavior of the two Linux RNGs (GRI
and /dev/(u)random) during boot, in particular seeking to
understand the extent to which there exist boot-time entropy
holes (insufﬁcient entropy collection before the ﬁrst uses of
the RNGs). As mentioned, in the past concerns have been
raised that the Linux RNGs, when running on Amazon EC2,
are so entropy starved that cryptographic key generation
towards the end of boot could be compromised [28]. Our
results suggest otherwise, showing that uncertainty in the
RNGs is collected rather rapidly during boot across a variety
of settings. We do, however, expose a boot-time entropy hole
for the very ﬁrst uses of both GRI and /dev/(u)random. In
both cases the result is that stack canaries generated early
563
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
s
t
n
e
v
E
104
103
102
101
100
Disk
Device
Network
Timer
50
100
150
200
250
300
Time since boot (seconds)
Figure 4. The number of inputs to /dev/(u)random RNG by type of event
during boot on VMware. The y-axis contains number of events (logscale)
bucketed into 3-second bins.
in the boot process do not provide the uncertainty targeted
(from 64 bits of uncertainty to about 27 due to the weak
RNG output).
We perform analyses using the instrumented kernel in the
Native, Xen, VMware, and Amazon EC2 setups (described
in Section III). We perform 200 boots in each environment,
and analyze the resulting log ﬁles to assess the security of
the RNGs. After boot, the VM is left idle. We break down
our discussion by RNG, starting with /dev/(u)random.
A. /dev/(u)random boot-time analysis
The graph in Figure 4 displays the quantity and types of
inputs to the RNG for a single boot in the VMware setup
(the other VMware traces are similar). The x-axis is divided
into 100 equal-sized buckets (3 seconds each) and the y-
axis represents the number of occurrences of each input to
the RNG state observed during a single time bucket (on a
logarithmic scale). The majority of RNG inputs during boot
are from disk events and other device interrupts while timer
events are rare. The other platforms (Native, Xen, and EC2)
were qualitatively similar.
Estimating attack complexity.
In order to estimate the
security of /dev/(u)random outputs, we seek a lower bound
on the complexity of predicting the state of the RNG
by examining its inputs. Given that we target only lower
bounds, we are conservative and assume the attacker has a
signiﬁcant amount of information about inputs and outputs
to the RNG. When these conservative estimates show a
possible vulnerability, we check for attacks by a more
realistic attacker.
To establish a lower bound, we deﬁne the following con-
servative attack model. The attacker is assumed to know the
initial state of the RNG (this is trivially true when booting
VM images, due to zeroed memory) and the absolute cycle
counter at boot time (the exact value is not typically known).
To estimate the security of output i of /dev/(u)random, we
assume the attacker has access to all preceding RNG outputs
and the exact cycle counter for each output generation,
including the ith output. This means we are assessing a kind
of checkpointing or tracking attack in which the attacker
can utilize knowledge of previous RNG outputs generated
by typical requests to reduce her search space.
We will additionally assume that the exact sequence of
RNG input types and the values of all event descriptions
except the cycle counter are known to the attacker. This
makes the cycle counter the only source of unpredictability