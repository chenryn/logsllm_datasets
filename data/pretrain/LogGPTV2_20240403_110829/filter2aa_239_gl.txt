        }
        else
        {
        WriteLine("not the same");
        }
        ShowState(context);
      }
    }
第一个LINQ查询得到一个带LIKE比较的SQL 
SELECT语句，来比较以Con开头的字
符串：
    SELECT TOP(1) [m].[MenuId], [m].[MenuCardId], [m].[Price], [m].[Text]
    FROM [mc].[Menus] AS [m]
    WHERE [m].[Text] LIKE 'Con' + '%'
在第二个LINQ查询中，也需要咨询数据库。其中LIKE用于比较文字中间的“（”：
    SELECT TOP(1) [m].[MenuId], [m].[MenuCardId], [m].[Price], [m].[Text]
    FROM [mc].[Menus] AS [m]
    WHERE [m].[Text] LIKE ('%' + '(') + '%'
运行应用程序时，同一对象写入控制台，只有一个对象用ChangeTracker保存。状态
是Unchanged：
    the same object
    type: Menu, state: Unchanged, Consommé Célestine (with shredded pancake)
为了不跟踪在数据库中运行查询的对象，可以通过DbSet调用AsNoTracking方法：
    var m1 = (from m in context.Menus.AsNoTracking()
              where m.Text.StartsWith("Con")
              select m).FirstOrDefault();
可以把ChangeTracker的默认跟踪行为配置为QueryTrackingBehavior.NoTracking：
    using (var context = new MenusContext())
    {
      context.ChangeTracker.QueryTrackingBehavior =
        QueryTrackingBehavior.NoTracking;
有了这样的配置，给数据库建立两个查询，物化两个对象，状态信息是空的。
  注意： 当上下文只用于读取记录时，可以使用NoTracking配置，但无法修
改。这减少了上下文的开销，因为不保存状态信息。
38.5.3 更新对象
跟踪对象时，对象可以轻松地更新，如下面的代码片段所示。首先，检索Menu对
象。使用这个被跟踪的对象，修改价格，再把变更写入数据库。在所有的变更之间，将状
态信息写入控制台（代码文件MenusSample / Program. cs）：
    private static async Task UpdateRecordsAsync()
    {
      using (var context = new MenusContext())
      {
        Menu menu = await context.Menus
      .Skip(1)
      .FirstOrDefaultAsync();
        ShowState(context);
        menu.Price += 0.2m;
        ShowState(context);
        int records = await context.SaveChangesAsync();
        WriteLine($"{records} updated");
        ShowState(context);
      }
    }
运行应用程序时，可以看到，加载记录后，对象的状态是Unchanged，修改属性值
后，对象的状态是Modified，保存完成后，对象的状态是Unchanged：
    type: Menu, state: Unchanged, Baked Potato Soup
    type: Menu, state: Modified, Baked Potato Soup
    1 updated
    type: Menu, state: Unchanged, Baked Potato Soup
访问更改跟踪器中的条目时，默认情况下会自动检测到变更。要配置这个，应设置
ChangeTracker的AutoDetectChangesEnabled属性。为了手动检查更改是否已经完成，调用
DetectChanges方法。调用SaveChangesAsync后，状态改回Unchanged。调用
AcceptAllChanges方法可以手动完成这个操作。
38.5.4 更新未跟踪的对象
对象上下文通常非常短寿。使用Entity Framework与ASP.NET MVC，通过一个HTTP
请求创建一个对象上下文，来检索对象。从客户端接收一个更新时，对象必须再在服务器
上创建。这个对象与对象的上下文相关联。为了在数据库中更新它，对象需要与数据上下
文相关联，修改状态，创建INSERT、UPDATE或DELETE语句。
这样的情景用下一个代码片段模拟。GetMenuAsync方法返回一个脱离上下文的Menu
对象；上下文在方法的最后销毁（代码文件MenusSample / Program.cs）：
    private static async Task GetMenuAsync()
    {
      using (var context = new MenusContext())
      {
        Menu menu = await context.Menus
                      .Skip(2)
                      .FirstOrDefaultAsync();
        return menu;
      }
    }
GetMenuAsync方法由ChangeUntrackedAsync方法调用。这个方法修改不与任何上下
文相关的Menu对象。改变后，Menu对象传递到方法UpdateUntrackedAsync，保存到数据
库中（代码文件MenusSample / Program.cs）：
    private static async Task ChangeUntrackedAsync()
    {
      Menu m = await GetMenuAsync();
      m.Price += 0.7m;
      await UpdateUntrackedAsync(m);
    }
UpdateUntrackedAsync方法接收已更新的对象，需要把它与上下文关联起来。对象与
上下文关联起来的一个方法是调用DbSet的Attach方法，并根据需要设置状态。Update方
法用一个调用完成这两个操作：关联对象，把状态设置为Modified 
（代码文件
MenusSample / Program. cs）：
    private static async Task UpdateUntrackedAsync(Menu m)
    {
      using (var context = new MenusContext())
      {
        ShowState(context);
        // EntityEntry entry = context.Menus.Attach(m);
        // entry.State = EntityState.Modified;
        context.Menus.Update(m);
        ShowState(context);
        await context.SaveChangesAsync();
      }
    }
通过ChangeUntrackedAsync方法运行应用程序时，可以看到状态的修改。对象起初没
有被跟踪，但是，因为显式地更新了状态，所以可以看到Modified状态：
    type: Menu, state: Modified, Cheddar Broccoli Soup
38.6 冲突的处理
如果多个用户修改同一个记录，然后保存状态，会发生什么？最后谁的变更会保存下
来？
如果访问同一个数据库的多个用户处理不同的记录，就没有冲突。所有用户都可以保
存他们的数据，而不干扰其他用户编辑的数据。但是，如果多个用户处理同一记录，就需
要考虑如何解决冲突。有不同的方法来处理冲突。最简单的一个方法是最后一个用户获
胜。最后保存数据的用户覆盖以前用户执行的变更。
Entity 
Framework还提供了一种方式，让第一个保存数据的用户获胜。采用这一选
项，保存记录时，需要验证最初读取的数据是否仍在数据库中。如果是，就继续保存数
据，因为读写操作之间没有发生变化。然而，如果数据发生了变化，就需要解决冲突。
下面看看这些不同的选项。
38.6.1 最后一个更改获胜
默认情况是，最后一个保存的更改获胜。为了查看对数据库的多个访问，扩展
BooksSample应用程序。
为了简单地模拟两个用户，方法ConflictHandlingAsync调用两次方法
PrepareUpdateAsync，对两个引用相同记录的Book对象进行不同的改变，并调用
UpdateAsync方法两次。最后，把书的ID传递给CheckUpdateAsync方法，它显示了数据库
中书的实际状态（代码文件BooksSample/Program.cs）：
      public static async Task ConflictHandlingAsync()
      {
        // user 1
        Tuple tuple1 = await PrepareUpdateAsync();
        tuple1.Item2.Title = "updated from user 1";
        // user 2
        Tuple tuple2 = await PrepareUpdateAsync();
        tuple2.Item2.Title = "updated from user 2";
        // user 1
        await UpdateAsync(tuple1.Item1, tuple1.Item2);
        // user 2
        await UpdateAsync(tuple2.Item1, tuple2.Item2);
        context1.Item1.Dispose();
        context2.Item1.Dispose();
        await CheckUpdateAsync(tuple1.Item2.BookId);
      }
PrepareUpdateAsync方法打开一个BookContext，并在Tuple对象中返回上下文和图
书。记住，该方法调用两次，返回与不同context对象相关的不同Book对象（代码文件
BooksSample/Program.cs）：
    private static async Task> PrepareUpdateAsync()
    {
      var context = new BooksContext();
      Book book = await context.Books
        .Where(b => b.Title == "Conflict Handling")
        .FirstOrDefaultAsync();
      return Tuple.Create(context, book);
    }
  注意： 元组在第7章解释。
UpdateAsync方法接收打开的BooksContext与更新的Book对象，把这本书保存到数据
库中。记住，该方法调用两次（代码文件BooksSample / Program. cs）：
    private static async Task UpdateAsync(BooksContext context, Book book)
    {
      await context.SaveChangesAsync();
      WriteLine($"successfully written to the database: id {book.BookId} " +
        $"with title {book.Title}");
    }
CheckUpdateAsync方法把指定id的图书写到控制台（代码文件BooksSample 
/
Program.cs）：
    private static async Task CheckUpdateAsync(int id)
    {
      using (var context = new BooksContext())
      {
        Book book = await context.Books
        .Where(b => b.BookId == id)
        .FirstOrDefaultAsync();
        WriteLine($"updated: {book.Title}");
      }
    }
运行应用程序时，会发生什么？第一个更新会成功，第二个更新也会成功。更新一条
记录时，不验证读取记录后是否发生变化，这个示例应用程序就是这样。第二个更新会覆
盖第一个更新的数据，如应用程序的输出所示：
    successfully written to the database: id 7038 with title updated from user 1
    successfully written to the database: id 7038 with title updated from user 2
    updated: updated from user 2
38.6.2 第一个更改获胜
如果需要不同的行为，如第一个用户的更改保存到记录中，就需要做一些改变。示例
项目ConflictHandlingSample像以前一样使用Book和BookContext对象，但它处理第一个更
改获胜的场景。
这个示例应用程序使用了以下依赖项和名称空间：
依赖项
    NETStandard.Library
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.SqlServer
名称空间
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.ChangeTracking
    System
    System.Linq
    System.Text
    System.Threading.Tasks
    static System.Console
对于解决冲突，需要指定属性，如果在读取和更新之间发生了变化，就应使用并发性
令牌验证该属性。基于指定的属性，修改SQL 
UPDATE语句，不仅验证主键，还验证使
用并发性令牌标记的所有属性。给实体类型添加许多并发性令牌，会在UPDATE语句中创
建一个巨大的WHERE子句，这不是非常有效。相反，可以添加一个属性，在SQL Server
中用每个UPDATE语句更新——这就是Book类完成的工作。属性TimeStamp在SQL Server
中定义为timeStamp（代码文件ConflictHandlingSample / Book.cs）：
    public class Book
    {
      public int BookId { get; set; }
      public string Title { get; set; }
      public string Publisher { get; set; }
      public byte[] TimeStamp { get; set; }
    }
在SQL Server中将TimeStamp属性定义为timestamp类型，要使用Fluent API。SQL数据
类型使用HasColumnType方法定义。方法ValueGeneratedOnAddOrUpdate通知上下文，在
每一个SQLINSERT或UPDATE语句中，可以改变TimeStamp属性，这些操作后，它需要用
上下文设置。IsConcurrencyToken方法将这个属性标记为必要，检查它在读取操作完成后
是否没有改变（代码文件ConflictHandlingSample / BooksContext.cs）：
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
      base.OnModelCreating(modelBuilder);
      var book = modelBuilder.Entity();
      book.HasKey(p => p.BookId);
      book.Property(p => p.Title).HasMaxLength(120).IsRequired();
      book.Property(p => p.Publisher).HasMaxLength(50);
      book.Property(p => p.TimeStamp)
        .HasColumnType("timestamp")
        .ValueGeneratedOnAddOrUpdate()
        .IsConcurrencyToken();
    }
  注意： 不使用IsConcurrencyToken方法与Fluent API，也可以给应检查并发性
的属性应用ConcurrencyCheck特性。
检查冲突处理的过程类似于之前的操作。用户1和用户2都调用PrepareUpdateAsync方
法，改变了书名，并调用UpdateAsync方法修改数据库（代码文件ConflictHandlingSample /
Program. cs）：
    public static async Task ConflictHandlingAsync()
    {
      // user 1
      Tuple tuple1 = await PrepareUpdateAsync();
      tuple1.Item2.Title = "user 1 wins";
      // user 2
      Tuple tuple2 = await PrepareUpdateAsync();
      tuple2.Item2.Title = "user 2 wins";
      // user 1
      await UpdateAsync(tuple1.Item1, tuple1.Item2);
      // user 2
      await UpdateAsync(tuple2.Item1, tuple2.Item2);
      context1.Item1.Dispose();
      context2.Item1.Dispose();
      await CheckUpdateAsync(context1.Item2.BookId);
    }
这里不重复PrepareUpdateAsync方法，因为该方法的实现方式与前面的示例相同。
UpdateAsync方法则截然不同。为了查看更新前和更新后不同的时间戳，实现字节数组的
自定义扩展方法StringOutput，将字节数组以可读的形式写到控制台。接着，调用
ShowChanges辅助方法，显示对Book对象的更改。调用SaveChangesAsync方法，把所有更
新写到数据库中。如果更新失败，并抛出DbUpdateConcurrencyException异常，就把失败
信息写入控制台（代码文件ConflictHandlingSample/Program. cs）：
      private static async Task UpdateAsync(BooksContext context, Book book,
        string user)
      {
        try
        {
          WriteLine($"{user}: updating id {book.BookId}, " +
          $"timestamp: {book.TimeStamp.StringOutput()}");
          ShowChanges(book.BookId, context.Entry(book));
          int records = await context.SaveChangesAsync();
          WriteLine($"{user}: updated {book.TimeStamp.StringOutput()}");
          WriteLine($"{user}: {records} record(s) updated while updating " +
          $"{book.Title}");
        }
        catch (DbUpdateConcurrencyException ex)
        {
          WriteLine($"{user}: update failed with {book.Title}");
          WriteLine($"error: {ex.Message}");
          foreach (var entry in ex.Entries)
          {
          Book b = entry.Entity as Book;
          WriteLine($"{b.Title} {b.TimeStamp.StringOutput()}");
          ShowChanges(book.BookId, context.Entry(book));
          }
        }
      }
对于与上下文相关的对象，使用PropertyEntry对象可以访问原始值和当前值。从数据
库中读取对象时获取的原始值，可以用OriginalValue属性访问，其当前值可以用
CurrentValue属性访问。在ShowChanges和ShowChange方法中，PropertyEntry对象可以用
EntityEntry的属性方法访问，如下所示（代码文件ConflictHandlingSample 