title:Retrofitting the IBM POWER Hypervisor to Support Mandatory Access
Control
author:Enriquillo Valdez and
Reiner Sailer and
Ronald Perez
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
Retrofitting the IBM POWER Hypervisor to Support Mandatory Access Control 
Enriquillo Valdez  Reiner Sailer  Ronald Perez 
IBM T. J. Watson Research Center, Hawthorne, NY 10532 
{rvaldez, sailer, ronpz}@us.ibm.com 
Abstract 
Server  virtualization  more  readily  enables  the 
collocation  of  disparate  workloads  on  a  shared 
physical platform. When employed on systems across a 
data center, the result can be a dramatic increase in 
server  utilization  and  a  decrease  in  overall  power, 
cooling and floor space requirements. However, in an 
environment  where  workloads  share  the  underlying 
platforms,  achieving  other  desirable  workload  goals, 
such as availability and security, becomes a challenge. 
In particular, enforcing isolation between workloads in 
a large, dynamic, and virtualized data center requires 
strong yet easily configurable controls on the sharing 
of  resources  at  the  virtualization  layer.  Commercial 
hypervisors  usually  offer  reasonable  isolation  of 
individual  virtual  machines  (VMs).  However,  on 
hypervisor-based  platforms,  one  cannot  currently 
define  a  single  policy  that  automatically  enforces 
restrictions  on  the  sharing  of  resources  between 
multiple  VMs  or  request  an  air  gap  between 
workloads.  
this  paper,  we  describe 
the  design  and 
implementation  of  a  Hypervisor-based  Mandatory 
Access  Control  (MAC)  that  achieves  policy-driven 
distributed  workload  isolation  for  the  IBM  Power 
Hypervisor  (PHYP).  We  discuss  our  experiences  and 
lessons  learned  and  examine  the  implications  and 
trade-offs involved in providing MAC on a production-
level, commercially-available  hypervisor.  Our  goal  is 
to  simplify  the  security  management  of  data  centers 
through  centralized  security  management  and  policy-
driven distributed access control and data protection. 
In 
1. Introduction 
A workload consisting of tasks and services can be 
distributed  among  a  set  of  virtual  machines  (VMs) 
executing on a single or across multiple platforms for 
reliability and efficiency reasons. In this environment, 
hypervisors  traditionally  isolate  individual  VMs  and 
enable  the  sharing  of  resources  on  the  platform.  The 
largely  on 
sharing  properties  between  VMs  in  this  environment 
rely 
the  discretionary  decisions  of 
administrators  to  correctly  configure  the  resource 
sharing among VMs (e.g., network, storage) according 
to the overall workload isolation goals.  
This environment, however, does not have a formal 
basis for expressing the controlled sharing of resources 
or platform to guarantee workload isolation. This lack 
of formality makes it hard to reason about the isolation 
provided  to  workloads.  Data  center  operators,  for 
example, want to ensure that the sharing of resources is 
based  on  the  type  of  the  workload  and  that  selected 
designated workloads are prevented from executing at 
the same time on the same platform. Consequently, in 
multi-tenant computing or data center environments, it 
becomes  difficult  to  keep  track  of  the  resources  and 
distributed  workloads  and  to  establish  proofs  of 
compliance of workload isolation through audit logs.  
(PHYP) 
[2]  with 
hypervisor 
In  this  paper,  we  investigate  retrofitting  the  IBM 
POWER  Hypervisor 
sHype 
mandatory  access  control  architecture  [24]  to  enable 
is  a 
policy-driven  workload  protection.  PHYP 
commercial-grade 
offers 
the 
functionality  and resources  that  modern  virtualization 
environments demand. It provides isolation guarantees 
[3]  to  virtual  machines  called  Logical  Partitions 
(LPAR).  PHYP  prevents  programs  running  in  an 
LPAR from affecting other programs running in other 
LPARs, 
isolates  LPAR  memories,  and  allows 
exclusive  physical  device  assignments  to  LPARs  by 
administrators 
stand-alone  Hardware 
Management Console (HMC). Throughout this paper, 
we use the terms “LPAR” and “VM” interchangeably. 
For  PHYP,  we  provide  a  workload  protection 
mechanism to mediate resource assignment (access) by 
mandatory  access  control  (MAC)  on  LPARs.  This 
MAC  enforcement  is  independent  of  the  LPARs  and 
does  not  require  their  co-operation.  Our  workload 
protection  mechanism  is  based  on  a  simple  security 
policy  that  can  be  applied  across  heterogeneous 
platforms to enforce consistent isolation properties for 
a  virtual  data  center.  Adding  MAC  to  PHYP  allows 
administrators  to  be  confined  to  managing  a  single 
that 
via 
a 
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.43
DOI 10.1109/ACSAC.2007.43
221
221
in 
the 
workload and its resources. This provides a safety net 
by  preventing  information  flow  violation  due  to 
improper  resource  configuration  by  administrators.  
Additional  benefits  of  MAC  enforcement  in  PHYP 
include  supporting 
least  privilege  by  confining 
workload types to a platform, establishing the basis for 
safe  object  re-use,  and  providing  easier  proofs  of 
isolation and anti-collocation guarantees. Our approach 
allows  for  security  policies  to  be  centrally  managed 
(i.e., authored) and enforced locally on the distributed 
platforms. This can simplify the security management 
of large scale computing environments considerably.  
Other  hypervisor  MAC  approaches,  such  as 
KVM/370  [9]1  or  VAX/VMM  [15],  aimed  for  high-
assurance and required implementing a new hypervisor 
or  large  intrusive  changes  to  the  existing  hypervisor. 
Our approach aims to minimize intrusive changes and 
depends  on  the  core  isolation  capabilities  and  their 
assurance 
the  underlying  hypervisor  (PHYP). 
Although  this  work  is  similar  to  the  sHype  MAC 
architecture  in  the  Xen  open  source  hypervisor  [26], 
the  challenge  of  this  work  was  to  retrofit  PHYP 
without 
existing 
infrastructure and software. We succeed in applying a 
new  approach  where  we  mediate  configuration 
commands  only  instead  of  runtime  commands.  This 
approach is non-intrusive to the critical path and yields 
no 
runtime  performance 
overhead,  since  access  control  is  enforced  during 
configuration time. There will be overhead induced by 
the way we can assign resources, configure networks, 
and  also  by  running  multiple  Virtual  I/O  Servers  to 
securely share resources among VMs of a workload. 
control-related 
considerably 
affecting 
access 
to 
the  virtual  machine  monitor 
Initially,  we  explored  implementing  multi-level 
security (MLS) for the IBM research hypervisor [10] in 
the sHype access control framework, but found that our 
simple  policy  model,  though  less  expressive,  maps 
better 
(VMM) 
abstraction and operations. The VMM’s coarse-grained 
operations, such as allocation of resources to VMs and 
enablement  of  communication  between  VMs,  are 
intrinsically  bi-directional.  We  find  that  our  simple 
sharing  policy  fits  better  onto 
the  virtualization 
abstraction  because  its  bi-directional  policies  do  not 
require  distinguishing  read  from  write  operations 
between  subjects  and  objects.  Consequently,  our 
simple  policy  yields  a  less-intrusive  implementation 
which makes the adoption of mandatory security in a 
commercial  environment  more  viable.  If  finer-grain 
controls are necessary, we propose a layering of access 
controls within Guard VMs as described in [21]. 
In this paper we discuss our practical experience in 
applying the  sHype  access  control  architecture  to  the 
1 Not to be confused with the new KVM [12]. 
PHYP environment. Section 2 provides an overview of 
the  PHYP  platform.  Section  3  presents  our  MAC 
design  and  supported  security  policies.  Section  4 
discusses  the  implementation  of  MAC  on  PHYP. 
Section  5  reviews  lessons  learned  in  applying  our 
approach.  Section  6  presents  future  work.  Section  7 
reviews  related  work.  Finally,  Section  8  summarizes 
our results. 
 2. PHYP Platform Overview 
PHYP  is  the  virtualization  engine  for  IBM’s 
PowerPC-based  System  i/p  platforms.  System  i/p 
platforms  are  targeted  for  corporate  and  data  center 
environments. Figure 1 shows the main components of 
a managed Power Hypervisor platform.  
Logical
Logical
Partition
Partition
(LPAR)
(LPAR)
LPAR
LPAR
Hosting
Hosting
LPAR
LPAR
(VIOS)
(VIOS)
Power
Power
Hypervisor
Hypervisor
Dispatchable
Dispatchable
Service
Service
Processor
Processor
(SP)
(SP)
VLAN
VLAN
VDISK
VDISK
VDISK
VDISK
Platform Licensed Internal Code (PLIC)
Platform Licensed Internal Code (PLIC)
Dedicated IO
Dedicated IO
Storage + Network
Storage + Network
Shared IO
Shared IO
Storage + Network
Storage + Network
Hardware
Hardware
Management
Management
Console 
Console 
(HMC)
(HMC)
Figure 1. Power Hypervisor Architecture 
The Hardware Management Console (HMC) [20] is 
a dedicated PC that runs the management application. 
It provides the interface for configuring and managing 
the  platform.  The  HMC  communicates  configuration 
information via the service processor to PHYP over a 
dedicated  management  network  using  the  Secure 
Sockets Layer (SSL) protocol and password protection. 
The service processor is an independent subsystem that 
performs  system  diagnostics  and  maintains  platform 
configuration information.  
PHYP  consists  of 
two  parts:  a  non-blocking 
interrupt  driven 
layer,  called  Platform  Licensed 
Internal Code (PLIC), and a multitasking kernel, called 
Dispatchable  PHYP.  PLIC  performs  time  critical 
operations  required  for  virtualization.  It  enforces,  for 
example, the partitioned environment. PLIC maintains 
the  hardware  page  tables  for  translating  an  LPAR 
memory address into a physical address. It validates an 
LPAR’s access to its hardware page table entry. This 
prevents  an  LPAR  from  accessing  the  memory  of 
another  LPAR.  Similarly,  it  maintains  a  Translation 
Control  Entry  (TCE)  table,  an  IO  memory  map  unit, 
which  is  used  to  translate  addresses  generated  by  IO 
devices  to  physical  memory  assigned  to  LPARs.  An 
222222
administrator at the HMC must first assign ownership 
of a physical IO device to an LPAR before the LPAR 
is permitted to map a portion of its memory to the TCE 
entry associated with the device. 
 Dispatchable  PHYP  executes  as  a  hidden  LPAR 
and provides non-critical platform services. One of its 
main duties is to process messages from the HMC and 
services  processor.  The  HMC  provides  Dispatchable 
PHYP  with  LPAR  configuration  data.  Dispatchable 
PHYP  is  responsible  for  processing  and  maintaining 
configuration  data  on  the  platform.  It  participates  in 
every  configuration  update  even  in  the  processing  of 
Dynamic LPAR operations where resources are added 
or removed on running LPARs. Dispatchable PHYP is 
also involved in directing the startup and terminations 
of  LPARs.  Additionally,  it  provides  virtual  service 
processors  to  the  LPAR.  These  mirror  real  services 
processors  and  are  used  to  maintain  LPAR  state 
information. 
PHYP  employs  the  para-virtualization  approach 
where  operating  systems  have  embedded  hypervisor 
calls  for  requesting  PLIC  virtualization  services. 
Accordingly,  PHYP  can  run  any  operating  system 
developed  using  the  PowerPC  Architecture  Platform 
Reference  Specification  [16]  for  interfacing  with  the 
PowerPC  platform.  Figure  1  also  shows  two  client 
LPARs  and  a  hosting  LPAR,  Virtual  IO  Server 
(VIOS). Dedicated IO can be assigned to any LPAR on 
the  platform.  Only  the  VIOS  can  be  assigned  shared 
IO.  Hence,  the  VIOS  can  be  configured  to  provide 
virtual  storage  or  Ethernet  to  LPARs  that  lack  the 
physical resources. Our workload protection focuses on 
mediating  the  sharing  of  the  platform  and  resources 
(physical  or  virtual)  and  relies  on  PHYP  to  ensure 
isolation of platform resources such as CPU, memory, 
and physical IO devices [2]. 
to  design,  PHYP  architects 
Because PHYP is closed-source software, there are 
limits on the information that can be publicly disclosed 
about  PHYP.  Internally  at  IBM,  there  has  been 
extensive  review  of  the  PHYP  source  code.  With 