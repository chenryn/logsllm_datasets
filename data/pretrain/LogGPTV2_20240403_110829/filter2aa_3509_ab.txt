● Uses a cellular 2G modem
● Yes
59
● Uses a cellular 2G modem
● Yes
● 2G
60
61
Connected to the rest of the car like this
Gathering Intel from the board
- Exploring the TCU - TOP
62
63
Gathering Intel from the board
- Exploring the TCU - Bottom
Exploring the TCU
Freescale 
chip   CAN
2G Cellular complex    
USB
Small 
connector 
(USB)
Big connector
(CAN)
ANT
64
UART 
CAN
Footprint
Gathering Intel from the board
● Freescale chip debug header, lets get firmware
65
Gathering Intel from the board
● Its USB right? lets mitm it!
66
Before:
After:
Gathering Intel from the board
● Its USB right? lets mitm it! 
67
68
Gathering Intel from the board
● Its USB right? lets mitm it! 
● This looks familiar...
69
Gathering Intel from the board
● Its USB right? lets mitm it! 
● This looks familiar...
Gathering Intel from the board
● Its USB right? lets mitm it!
● This looks familiar...
70
● Oh, look at that!
● I know this chip! Do you?
71
● Here are a few hints
72
73
Infineon PMB 8876 
Functional diagram
74
Gathering Intel from the board
● It’s a USB system.  We know this…
● Lets connect to it and explore
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
75
76
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
77
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
78
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
79
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities.
● confirmed local vector
○ AT+STKPROF
○ AT+XAPP
○ AT+XLOG
○ AT+FNS
80
Telematics vulnerabilities
● After confirming the local vulns, let’s check for remote ones…
● oh wait!
● Thanks to the amazing Dr. Ralf-Philipp Weinmann we know 
this baseband FW is vulnerable to an Over-The-Air TMSI 
buffer overflow.
81
Telematics vulnerabilities
● Confirming the TMSI vulnerability
○ The good book has PoC code in it, yay!
○ OpenBTS has moved on from testcall functionality 
(“security” reasons) 
○ this will take a while, better get a faraday cage
82
Telematics vulnerabilities
● Confirming the TMSI vulnerability using BladeRF
83
Telematics vulnerabilities
● Confirming the TMSI vulnerability
● After many many days of attempts and trying to get OpenBTS 
to work, Jesse confirms remote buffer overflow!
○ Thank you Jared Boone! 
84
Telematics vulnerabilities
● Exploiting
○ We don’t have a copy of the firmware, how do we fix this?
○ Getting the firmware out of the device requires semi-blind 
exploitation
○ It’s not quite that bad, we have some basic exception 
logging that includes:
■ Register state at time of crash
■ 178 dwords of stack values upwards from SP at time 
of crash
○ We can work with that
85
Telematics vulnerabilities
● Exploiting
○ No ASLR
86
Telematics vulnerabilities
● Exploiting
○ No ASLR
○ No DEP
87
Telematics vulnerabilities
● Exploiting
○ No ASLR
○ No DEP
○ No memory isolation
88
Telematics vulnerabilities
● Exploiting
○ No ASLR
○ No DEP
○ No memory isolation
89
Telematics vulnerabilities
● Exploiting
○ No ASLR
○ No DEP
○ No memory isolation
90
Telematics vulnerabilities
● Exploiting
○ We’ll just use AT command buffer overflow to inject 
payload to:
91
Telematics vulnerabilities
● Exploiting
○ We’ll just use AT command buffer overflow to inject 
payload to:
■ Write tag to signify start of data block
92
Telematics vulnerabilities
● Exploiting
○ We’ll just use AT command buffer overflow to inject 
payload to:
■ Write tag to signify start of data block
■ Copy 512 bytes from arbitrary location into stack 
frame
93
Telematics vulnerabilities
● Exploiting
○ We’ll just use AT command buffer overflow to inject 
payload to:
■ Write tag to signify start of data block
■ Copy 512 bytes from arbitrary location into stack 
frame
■ Write tag to signify completed copy of data block
94
Telematics vulnerabilities
● Exploiting
○ We’ll just use AT command buffer overflow to inject 
payload to:
■ Write tag to signify start of data block
■ Copy 512 bytes from arbitrary location into stack 
frame
■ Write tag to signify completed copy of data block
■ Jump to hardcoded invalid location to force a crash at 
specific location
95
Telematics vulnerabilities
● Exploiting
■ Wait for device to reboot
96
Telematics vulnerabilities
● Exploiting
■ Wait for device to reboot
■ Read exception log using AT+XLOG and extract data 
from between tags in stack dump
97
Telematics vulnerabilities
● Exploiting
98
Telematics vulnerabilities
● Exploiting
… and then do it again 13 thousand times …
99
Telematics vulnerabilities
● Once firmware is accessible we can work on reversing and 
jumping from the baseband to the CAN bus
100
Telematics vulnerabilities
101
Telematics vulnerabilities
102
103
104
Advisory
● https://ics-cert.us-cert.gov/advisories/ICSA-17-208-01
CVSS v3 8.8
ATTENTION: 
Remotely exploitable/low skill level to exploit. 
Public exploits are available.
Vendor: Continental AG
Equipment: Infineon S-Gold 2 (PMB 8876)
Vulnerabilities: 
Stack-Based Buffer Overflow, Improper Restriction of 
Operations within the Bounds of a Memory Buffer
105
Advisory
● https://ics-cert.us-cert.gov/advisories/ICSA-17-208-01
AFFECTED PRODUCTS
All telematics control modules (TCUs) built by Continental AG that contain the S-Gold 
2 (PMB 8876) cellular baseband chipset are affected. The S-Gold 2 (PMB 8876) is 
found in the following vehicles:
BMW several models produced between 2009-2010
Ford - program to update 2G modems has been active since 2016 and impact is 
restricted to the limited number of P-HEV vehicles equipped with this older technology 
that remain in service.
Infiniti 2013 JX35,Infiniti 2014-2016 QX60,Infiniti 2014-2016 QX60 Hybrid,Infiniti 
2014-2015 QX50,Infiniti 2014-2015 QX50 Hybrid,Infiniti 2013 M37/M56,Infiniti 
2014-2016 Q70,Infiniti 2014-2016 Q70L,Infiniti 2015-2016 Q70 Hybrid,Infiniti 2013 
QX56,Infiniti 2014-2016 QX 80
Nissan 2011-2015 Leaf
iPhone (PMB8876)
iPhone 3G (PMB8878)
Nissan Leaf (PMB8876)
Infiniti Q50 and others 
(PMB8876)
iPhone 4 (XMM6180)
External Researchers 
find exploitable 
vulnerabilities in 
baseband firmware
iPhone (PMB8876)
iPhone 3G (PMB8878)
Nissan Leaf (PMB8876)
Infiniti Q50 and others 
(PMB8876)
iPhone 4 (XMM6180)
External Researchers 
find exploitable 
vulnerabilities in 
baseband firmware
108
Things that are good to know
● Not an 0-Day but more like a 2441-Day.
● Different market segments:
○ Have different levels of security maturity
○ Can have very different product lifecycles
○ Share components
● Need to be aware of security issues found elsewhere
109
● For helping co-ordinating this, we would like to thank:
○ Nissan NA
○ ICS-CERT - specifically Jason Barkley 
○ Auto-ISAC
○ Intel PSIRT
● Advisory
○ https://ics-cert.us-cert.gov/advisories/ICSA-17-208-01
● Tools
○ Latest slides will be posted at
https://github.com/HackingThings/Publications
○ Our windows based arduino CAN bus tool:
https://github.com/HackingThings/CAN-Bus-Arduino-Tool
110