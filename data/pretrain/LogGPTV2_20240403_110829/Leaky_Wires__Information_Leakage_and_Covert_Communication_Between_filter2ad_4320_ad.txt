additional checksums for error detection and correction. In partic-
ular, line codes such as 8b/10b provide single-bit error-detection
capabilities, and aid in clock recovery, making them ideal for such
an application. The bandwidth of the channel is then reduced to
6.1 × 8/10 ≈ 4.9kbps.
10.2 Signal Exfiltration
If an adversary is merely eavesdropping on nearby signals, it is
unlikely that they will remain constant throughout the period of
measurement. However, as shown in Section 6.2 (Figure 6), the delay
of the long wire depends only on the proportion of time for which
the nearby wire is carrying a 1, and not its switching frequency.
This fact reveals the Hamming Weight of the transmission during
the measurement period. By repeating measurements with a slid-
ing window, an eavesdropping adversary can fully recover nearby
dynamic signals such as cryptographic keys with high probability.
Suppose the adversary wishes to recover an N -bit key K, and
assume that in one period of measurement, the long wire carries
w consecutive bits of the key. We assume initially that N = nw is
an integer multiple of the measuring window w, and explain how
to remove this assumption in Appendix A. By making repeated
measurements of different but overlapping windows, as shown in
Figure 14, the adversary can recover the key with high probability.
Specifically, assume the Hamming weight (measured by the RO
count) of the first w key bits K0 to Kw−1 (window W0) is c0, and
Figure 13: Effect of activity induced by adders and LFSRs at
different clock frequencies. The additional activity has very
little impact on channel quality.
a receiver would have to be in order to decode a message. We do
this by varying the distance d (depicted in Figure 11) between the
transmitter and the receiver. The results are shown in Figure 12.
We see that the phenomenon is still measurable when separating
the wires by a distance of d = 2, but the effect is 20 times weaker.
When the wires are farther apart (d ≥ 3), there is no correlation
between the transmitted and received values, i.e., the data comes
from the same distribution according to the Kolmogorov-Smirnov
test (p > 0.75). In other words, any defensive monitoring must be
routed within a distance of two to detect a transmission through
the channel, and occupy all 4 wires adjacent to a signal in order to
prevent a channel from operating successfully.
To test whether an active protection mechanism can disrupt
the channel through additional dynamic activity on the device,
we measure the strength of the channel in the presence of large,
competing circuits which are both in- and out-of-sync with respect
to the transmissions. We synthesize 2 large 4096-bit adders, adding
different parts of a bitstream produced by a Linear Feedback Shift
Register (LFSR). As a result, both the addends and the sums change
every time the LFSR produces a new bit. The bits of each sum
are then XORed together and drive 2 LEDs for additional current
draw. We run the experiment on two Artix 7 Nexys 4 boards, for a
transmitter and receiver using 10 longs each.
In order to test transmission and reception under surrounding
activity of different switching frequencies, we vary how often the
LFSR produces new values by dividing the clock driving it by 2m,
for m ∈ {1, 7, 15, 20, 24}, giving us frequencies of 5Hz – 50MHz.
The results for the two devices, including the base case of no adders
and LFSRs, are summarized in Figure 13, showing that additional
activity cannot disrupt the transmissions. However, we note some
correlation between the frequency of the activity and the corre-
sponding count difference. The resulting change is not sufficient
to hinder transmission, but can be used by the adversary to detect
the level of activity on the device, a technique already used by
Hardware Trojan detectors [12, 35].
Device3(Artix7)Device4(Artix7)0.00.51.01.52.0RelativeCountDiﬀerence∆RC×10−4LFSR/AdderClockFrequencyNone5Hz95Hz3kHz781kHz50MHzASIACCS’18, June 4–8, 2018, Songdo, Korea
Ilias Giechaskiel, Kasper B. Rasmussen, and Ken Eguro
Figure 14: A sliding window of width w can determine the
relationship between key bits Ki and Ki +w .
Figure 15: Probability of recovering all N bits of a key based
on the window size w. Smaller window sizes and longer keys
yield a better chance to fully recover the key.
that the Hamming weight of bits K1 through Kw (window W1) is
c1. Then, if c0 ≈ c1 (within some device-dependent tolerance), we
can conclude that K0 = Kw . If c0 > c1 then K0 = 1 and Kw = 0,
while if c0 < c1 then K0 = 0 and Kw = 1. By comparing the next
count c2 to c1, one can determine the values of K1 and Kw +1, and,
more generally, by repeating this process, one can determine the
relationship between Ki and Ki +w .
Assuming a randomly generated key, the probability that Ki =
Kj for i (cid:44) j is 1/2. The probability that all of Sr = (Kr , Kw +r , ...,
K(n−1)w +r) are equal is 1/2n−1, since there are n−1 such pairs. The
probability that at least one of the bits in Sr is different than the
rest is thus 1− 1/2n−1. If at least one is different, we can recover all
of these bits. Repeating this argument for all possible remainders
0 ≤ r < w, the probability of recovering the entire key is
(cid:18)
(cid:19)w ≥ 1 − w
2n−1
P =
1 − 1
2n−1
(2)
by Bernoulli’s inequality. Even if it might appear counter intuitive,
the expression shows that longer keys are easier to recover than
short keys. A larger window size w relative to the key length makes
recovering the key harder as there are fewer measurements over
the length of the key. For the same reason, a longer key will increase
the recovery probability. This means that asymmetric keys, e.g.,
those used for signature verification are relatively easy to recover,
as they are typically much longer than symmetric keys.
Figure 15 shows the probability of successfully recovering all N
bits of a key as a function of the window size w. A window of 10
bits can fully recover a key of size 64 with 78% probability, while
a 30-bit window can recover a 264-bit key with 87% probability.
Figure 15 only shows the probability for full recovery, i.e., if all
but one bit is recovered we still consider it a failure. However, the
above procedure can still reveal a lot about the key, even when it
does not recover it fully: in the worst case (if the entire key consists
of a repetition of its first w bits), our approach reduces the guessing
space from 2N to 2w possibilities.
Extending the procedure to use multiple window lengths, we
can recover any key pattern with probability 1, except for when all
key bits are the same (i.e., all ones or all zeroes). This full recovery
can be achieved using a total of just 2w + 1 full passes over the key.
Appendix A gives an expression for the exact probability of full key
recovery for both single and multiple window sizes.
11 DISCUSSION
We structure our discussion in three parts: the channel itself (Sec-
tion 11.1), the cause of the information leakage (Section 11.2), and
potential defenses (Section 11.3).
11.1 The Channel
The channel characterized in the previous sections does not require
any modifications to the device or special tooling, allowing an
adversary to distribute it as IP blocks. The only routing that needs
to be specified is the use of the long wires, and the only placement
constraint is that the receiver and transmitter longs are adjacent.
The channel requires very little logic: the entire setup including the
signal generation and measurement portions uses just 71 lookup
tables (LUTs) and 66 registers, excluding resources taken up by
ChipScope to transfer the measurements to a PC for analysis. As an
example, our channel would only use 0.2% of the 33,000 LUTs used
in the open-source N200/N210 Universal Software Radio Peripheral
(USRP) software-defined radio project [25].
The USRP source codebase [26] illustrates how IP from different
organizations makes it into a project: USRP uses code from Ettus
Research, Xilinx, Easics NV, and OpenCores (written by different
authors). Since third-party code is a necessity, and as modern IP
blocks can be quite large, the potential for unintended interaction
between different cores increases. An adversary can exploit the
routing algorithms, which are forced to route through otherwise
monolithic black-box IPs due to resource constraints, enabling his
blocks to communicate covertly or eavesdrop on nearby signals.
As ring oscillators have legitimate uses, from thermal and de-
vice health monitors [6, 36] to Hardware Trojan detectors [12, 35],
TRNGs [33], and PUFs [20], the adversary can make dual-use trans-
mitters and receivers. The channel we identify exists whether trans-
missions are intentional or not, and is a threat when an adversary
controls one or more IP cores. Unintentional transmissions pose
new risks for multi-user scenarios, including FPGA/CPU hybrids
and cloud infrastructures offering FPGA solutions. In these setups,
an adversarial receiver can be placed next to long wires used by
other third-party vendors and eavesdrop on the signals carried by
them. The same mechanism can also be used for legitimate purposes
such as watermarks and no-contact debugging taps.
11.2 Leakage Cause
So far, we have focused on the novelty and applicability of the
phenomenon presented, rather than its cause. In Section 6.3, we
showed that the phenomenon depends on the use of the long wires,
and not the switching activity of circuits, which decreases rather
than increases ring oscillator frequency. The only other work which
lllllllllllllllllllllllllllllllllllllllllllllllll0.000.250.500.751.0001020304050Window size (w)ProbabilityKey Size (N)lN64N128N264Leaky Wires: Information Leakage and Covert Communication Between FPGA Long Wires ASIACCS’18, June 4–8, 2018, Songdo, Korea
deals with long wires delays is [8], where a RO with a long wire was
placed next to other long wires carrying signals which where either
equal to the RO signal or opposing it. It was shown that when a
nearby long wire has the same value as the RO wire, the frequency
of the RO is higher compared to the RO frequency when the nearby
long wire has the opposite value (i.e., if the current value on the
RO long wire is a 1, the value on the nearby wire is 0 and vice
versa). The work in [8] necessitates that the signal of the RO and
the nearby wire be in sync, so the wires were directly connected,
and static patterns which are independent of the RO signal were not
tested. By contrast, in our work, we showed that nearby wires are
influenced even when there is no connection between the transmit-
ter and the receiver, and even when the transmitted value remains
constant during the measurement period. These two properties can
be exploited in constructing a communication channel.
Although [8] broadly categorized their observations as “capaci-
tive crosstalk”, it made no attempt to precisely determine the phys-
ical cause behind it. This would indeed be difficult without design
information such as physical layout and process-specific parame-
ters. This “lack of electrical detail” on FPGAs is, in fact, well-known
and has been identified by multiple authors [1, 2, 24, 30, 34].
As a result, whether the effect we have found exists due to drive-
strength issues, electromagnetic emissions, or some other property
of FPGAs remains an open question. It is even possible that the
wires themselves might not be the cause of the issue, but that the
buffers driving them share local connections to the power network.
However, without more specialized equipment to x-ray the chips
to further narrow down the potential causes, we cannot determine
the precise cause, or even whether ASICs would be affected.
Overall, the characterization of the channel is valuable even
without access to these details, since we have shown it to always be
present and easily measurable on off-the-shelf devices without spe-
cial modifications. FPGA users cannot alter the electrical behavior
of the device, but can only influence how circuits are mapped onto
the FPGA. As a result, FPGA circuit designers cannot change the ex-
istence of the channel, and need to be aware of the communication
and exfiltration capabilities that this channel introduces.
11.3 Defense Mechanisms
Section 9 showed that one cannot detect transmissions from a
distance d ≥ 2, and that spurious activity (in the form of adders
and additional current draw) does not eliminate the transmission
channel. Hence, defense mechanisms need to protect a design before
it is loaded onto the FPGA. Since long wires are an integral part
of the reconfigurable FPGA fabric, detecting the transmitter is not
easy: the long can be used as part of the connections within an
IP block, carrying sensitive information. Routing algorithms thus
need to be modified to account for this information leakage, by
introducing directives which mark signals, or even entire blocks
as sensitive. The tools then need to add “guard wires”, by either
leaving the four nearby long wires unoccupied, or by occupying
them with compiler-generated random signals. We note that even
though this approach will prevent the leakage from occurring, it is
particularly taxing for dense designs, and can make placement and
routing more time-consuming, or even lead to timing violations.
Designers using unpatched tools need to be aware of this source
of leakage, and must either manually look for long-wires post-
routing, explicitly add guard wires, or, more generally, specify place-
ment and routing constraints for both highly-sensitive signals, and
untrusted third-party blocks. Overall, better defense mechanisms
for future FPGA generations are needed at the architectural level,
and require a deeper understanding of the cause of this phenome-
non.
12 RELATED WORK
Research on side- and covert-channels on FPGAs and other embed-
ded devices has primarily focused on communications between the
device and the outside world. Techniques include varying the power
consumption of a device and measuring the impulse response [37],
changing how much Electromagnetic Interference is emitted by the
device [3], or, in the other direction of communication, measuring
voltage [27] and temperature changes [31]. These side-channels can
be employed in the context of creating Hardware Trojans (HTs) [19],
or as ways to watermark circuits and offer IP protection [5, 27].
Many of these circuits employ ring oscillators, exploiting their
dependence on Process, Voltage, and Temperature (PVT) varia-
tions [9]. ROs are primarily used on the receiving end, but they