title:Safe Virtual Execution Using Software Dynamic Translation
author:Kevin Scott and
Jack W. Davidson
Safe Virtual Execution Using Software Dynamic Translation
Kevin Scott and Jack Davidson
Department of Computer Science, University of Virginia
Charlottesville, VA 22904
{kscott, jwd}@cs.virginia.edu
Abstract
1. Introduction
Safe virtual execution (SVE) allows a host computer
system  to  reduce  the  risks  associated  with  running
untrusted programs. SVE prevents untrusted  programs
from  directly  accessing  system  resources,  thereby  giv-
ing  the  host  the  ability  to  control  how  individual
resources  may  be  used.  SVE  is  used  in  a  variety  of
safety-conscious  software  systems,  including  the  Java
Virtual Machine  (JVM), software  fault  isolation  (SFI),
system  call  interposition  layers,  and  execution  moni-
tors. While SVE is the conceptual foundation for these
systems, each uses a different implementation technol-
ogy. The lack of a unifying framework for building SVE
systems  results  in  a  variety  of  problems:  many  useful
SVE systems are not portable and therefore are usable
only  on  a  limited  number  of  platforms;  code  reuse
among different SVE systems is often difficult or impos-
sible;  and  building  SVE  systems  from  scratch  can  be
both time consuming and error prone.
To address these concerns, we have developed a por-
table,  extensible  framework  for  constructing  SVE  sys-
tems.  Our  framework,  called  Strata,  is  based  on
software  dynamic  translation  (SDT),  a  technique  for
modifying  binary  programs  as  they  execute.  Strata  is
designed  to  be    ported easily  to  new  platforms  and  to
date  has  been  targeted  to  SPARC/Solaris,  x86/Linux,
and  MIPS/IRIX.  This  portability  ensures  that  SVE
applications  implemented  in  Strata  are  available  to  a
wide  variety  of  host  systems.  Strata  also  affords  the
opportunity for code reuse among different SVE appli-
cations  by  establishing  a  common  implementation
framework. 
Strata  implements  a  basic  safe  virtual  execution
engine  using  SDT.  The  base  functionality  supplied  by
this engine is easily extended to implement specific SVE
systems.  In this  paper  we  describe the  organization  of
Strata  and  demonstrate  its  extension  by  building  two
SVE  systems:  system  call  interposition  and  stack-
smashing prevention. To illustrate the use of the system
call interposition extensions, the paper presents imple-
mentations of several useful security policies.
Today’s software environment is complex. End users
acquire  software  from  a  number  of  sources,  including
the network, and have very little on which to base their
trust  that  the  software  will  correctly  perform  its
intended function. Given the size of modern software—
operating  system  kernels  are  comprised  of  millions  of
lines of source code and application programs are often
an order of magnitude larger—it is difficult or impossi-
ble  for  developers  to  guarantee  that  their  software  is
worthy of the end user’s trust. Even if developers could
make  such  guarantees  about  the  software  they  distrib-
ute,  hostile  entities  actively  seek  to  modify  that  soft-
ware to perform unanticipated, often harmful functions
via viruses and Trojan horses. 
In recent years, researchers have developed a variety
of  techniques for managing the  execution of untrusted
code. These techniques can be divided into two orthog-
onal  categories:  static  and  dynamic.  Static  techniques
analyze  untrusted  binaries  before  execution  to  deter-
mine whether or not the program is safe  to  run. Proof
carrying  code  [17]  is  a  good  example  of  the  static
approach—before  a  program  can  execute,  the  runtime
system  must  successfully  validate  a  proof  that  the
untrusted  binary  will  adhere  to  a  given  safety  policy.
Many static approaches, including proof carrying code,
rely  on  source  code  analyses  to  produce  safe  binaries
[5,15,22].  Dynamic  techniques,  on  the  other  hand,  do
not  require  access  to  source  code.    Rather,  dynamic
techniques prevent violation of safety policies by moni-
toring and modifying the behavior of untrusted binaries
as they execute.  An example of a dynamic approach is
execution monitoring [9,18]. Execution monitors termi-
nate  the  execution  of  a  program  as  soon  as  an  imper-
missible sequence of events (corresponding to a safety
policy violation) is observed. System call interposition
layers [11, 12, 13, 14] are similar to execution monitors
with  the  additional  ability  to  alter  the  semantics  of
events,  specifically  system  calls.    Yet  another  similar
dynamic 
isolation  (also
technique,  software  fault 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
known as sandboxing) [23] limits the potential damage
an untrusted binary can do by preventing loads, stores,
or jumps outside of a restricted address range.
In  this  paper  we  make  the  following  observation:
many  dynamic  trust  management  systems,  including
the ones mentioned above, can be implemented using a
technique  called  safe  virtual  execution  (SVE).    SVE
mediates  application  execution,  virtualizing  access  to
sensitive  resources  in  order  to  prevent  untrusted  bina-
ries from causing harm.  Despite the fact that SVE pro-
vides  a  conceptual  framework  for  the  implementation
of  systems  such  as  execution  monitors,  interposition
layers,  and  sandboxing,  these  systems  are  frequently
based on widely differing implementation technologies.
These systems are often dependent on a specific target
architecture  or  on  special  operating  system  services,
hence impeding their widespread use in the modern het-
erogeneous  networked  computing  environment.  In
addition  to  non-portability,  the  use  of  different  imple-
mentation  technology  places  undue  engineering  bur-
dens  on  the  designers  of  SVE  systems.  They  cannot
share code and features with similar systems and must
often endure the time consuming and error-prone chore
of building their systems from scratch.
To address these concerns, we have developed a por-
table, extensible framework for constructing SVE sys-
tems.  Our  framework,  called  Strata,  is  based  on
software  dynamic  translation  (SDT),  a  technique  for
modifying binary programs as they execute [1, 2, 3, 6,
7, 20, 21, 24]. Using SDT, Strata offers a basic safe vir-
tual  execution  engine.  The  base  functionality  supplied
by  this  engine  can  be  extended  in  order  to  implement
specific SVE systems. Using this approach useful SVE
systems can often be implemented with very few lines
of  new  code.  Strata  is  designed  to  be  easily  ported  to
new platforms and to date has been targeted to SPARC/
Solaris,  x86/Linux,  and  MIPS/IRIX.  This  portability
ensures  that  SVE  applications  implemented  in  Strata
are  available  to  a  wide  variety  of  host  systems.  Strata
also affords the opportunity for code reuse among dif-
ferent  SVE  applications  by  establishing  a  common
implementation framework. 
The remainder of this paper is organized as follows.
Section  2  provides  an  overview  of  software  dynamic
translation and Section 3 describes Strata’s organization
and architecture. Section 4 then describes how Strata is
used to implement a system call interposition layer and
how this layer can be used to implement powerful secu-
rity policies. Section 5 discusses our results while Sec-
tion 6 discusses related work, and Section 7 provides a
summary.
2. Software Dynamic Translation
SDT  is  a  technique  for  dynamically  modifying  a
program  as  it  is  being  executed.  Software  dynamic
translation has been used in a variety of different areas:
binary translation for executing programs on non-native
CPUs  [6,  7,  21];  fast  machine  simulation  [3,  24];  and
recently,  dynamic  optimization  [1].  In  this  paper  we
describe how software dynamic translation can be used
to implement safe virtual execution. 
Most software dynamic translators are organized as
virtual  machines  (see  Figure  1a).  The  virtual  machine
fetches  instructions,  performs  an  application-specific
translation to native instructions, and then arranges for
the translated instructions to be executed.  Safe virtual
execution  systems  can  be  viewed  as  types  of  virtual
machines.  On  a  conceptual  level,  an  SVE  virtual
machine  prevents  untrusted  binaries  from  directly
manipulating system resources. The difference between
SVE  systems  is  in  how  this  virtual  machine  is  imple-
mented.  For  instance,  in  the  Java  Virtual  Machine  an
interpreter  is  used  to  isolate  Java  bytecode  programs
from  underlying  system  resources  [16].  Systems  such
as SASI [9] and SFI [23] merge the application program
with the SVE virtual machine, using binary rewriting at
load time; the virtual machine is in the form of instruc-
tions that check certain sequences of instructions before
they are allowed to execute. Systems such as Janus [13]
and Interposition Agents [14] use special operating sys-
tem facilities to virtualize the execution of a very spe-
cific aspect of execution, specifically, system calls. 
In  this  paper  we  propose  the  use  of  software
dynamic translation as the basis for implementing safe
virtual execution systems.  Implementing an SVE appli-
cation in a software dynamic translator is a simple mat-
ter  of  overriding  the  translator’s  default  behavior.  For
example,  an  SDT  implementation  of  a  software  fault
isolator  would 
into  a
sequence of instructions that performs an address check
before the load executes.
instructions 
translate 
load 
In order to illustrate our approach in brief, consider
the  task  of  preventing  stack-smashing  attacks  using
SDT. Stack-smashing attacks take advantage of unsafe
buffer manipulation functions (e.g., strcpy from the C
standard  library)  to  copy,  and  subsequently  execute,
malicious  code  from  the  application  stack.  The  mali-
cious  code  is  executed  with  the  privileges  of  the  user
running  the  program,  and  in  many  cases  can  lead  to
serious  security  compromises  on  affected  systems
[4,15].
A simple way to prevent stack-smashing attacks is to
make  the  application  stack  non-executable.    In  the
abscence  of  operating  system  support  for  non-execut-
able stacks, it is a trivial matter to prevent execution of
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
SDT Virtual Machine
Application
Context Management
Linker
l
Memory Management
Cache Management
Strata Virtual CPU
Target Interface
Target Specific Functions
a
u
t
r
i
V
a
t
a
r
t
i
e
n
h
c
a
M
S
Context
Capture
New
PC
Cached?
Yes
New
Fragment
Fetch
Decode
Translate
Next PC
No
Context
Switch
Finished?
Yes
Host CPU (Executing Translated Code from Cache)
(a)
Figure 1: Strata Architecture
Host CPU
(b)
code  on the  stack by  using  SDT.   This  task  is accom-
plished  by  replacing the  software dynamic translator’s
default fetch function with a custom fetch that prevents
execution of stack resident code.
The custom fetch function
custom_fetch (Address PC) {
if (is_on_stack(PC)) {
fail("Cannot execute code on the 
stack");
} else {
return default_fetch(PC);
}
}
checks the PC  against the stack boundaries and termi-
nates program execution if the instruction being fetched
is on the stack. If the instruction being fetched is not on
the  stack,  it  is  alright  to  execute  the  instruction,  and
consequently  the  fetch  is  completed  by  calling  the
default fetch function.
3. Strata
To  facilitate  SDT  research  and  the  development  of
innovative  SDT  applications,  we  have  constructed  a
portable, extensible SDT infrastructure called Strata. As
shown  in  Figure  1a,  Strata  is  organized  as  a  virtual
machine.  The  Strata  VM  mediates  application  execu-
tion  by  examining  and  translating  instructions  before
they  execute  on  the  host  CPU.  Translated  instructions
are held  in  a Strata-managed  cache.  The  Strata VM  is
entered by capturing and saving the application context
(e.g.,  PC,  condition  codes,  registers,  etc.).  Following
context capture, the VM processes the next application
instruction. If a translation for this instruction has been
cached, a context switch restores the application context
and begins executing cached translated instructions on
the host CPU. 
If there is no cached translation for the next applica-
tion  instruction,  the  Strata  VM  allocates  storage  for  a
new fragment of translated instructions. A fragment is a
sequence of code in which branches may appear only at
the end. The Strata VM then populates the fragment by
fetching, decoding, and translating application instruc-
tions one-by-one until an end-of-fragment condition is
met. The end-of-fragment condition is dependent on the
particular  software  dynamic  translator  being  imple-
mented. For many translators, the end-of-fragment con-
dition is met when an application branch instruction is
encountered. Other translators may form fragments that
emulate  only  a  single  application  instruction.  In  any
case, when the end-of-fragment condition is met, a con-
text  switch  restores  the  application  context  and  the
newly translated fragment is executed.
As  the  application  executes  under  Strata  control,
more  and  more  of  the  application’s  working  set  of
instructions  materialize  in  the  fragment  cache.  This,
along with certain other techniques—e.g., partial inlin-
ing  of  functions  and  indirect  branch  elimination—that
reduce the number and cost of context switches, permits
Strata to execute applications with little or no measur-
able overhead [19].
Figure 1b shows the components of the Strata VM.
Strata was designed with extensibility and portability in
mind. Extensibility allows Strata to be used for a vari-
ety of different purposes; researchers can use Strata to
build  dynamic  optimizers,  dynamic  binary  translators,
fast architecture emulators, as well as safe virtual exe-
cution systems. Portability allows Strata to be moved to
new machines easily. To date, Strata has been ported to