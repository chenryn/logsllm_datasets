## java编译篇
java编译过程：
**Java源代码** ——（编译）——> **Java字节码** ——（解释器）——> **机器码**
**Java源代码** ——（编译器 ）——> **jvm可执行的Java字节码** ——（jvm解释器） ——> **机器可执行的二进制机器码** ——>
**程序运行**
**采用字节码的好处：** 高效、可移植性高
以下示例为.java文件：
以下是.class文件：
## 反编译工具篇
  * fernflower
  * jad
  * jd-gui
  * idea自带插件
jar包本质上是将所有class文件、资源文件压缩打成一个包。
## Servlet与jsp篇
**Servlet：**
  * 类似小程序，处理较复杂的服务端业务逻辑
  * 含有HttpServlet类，可进行重写
  * servlet3.0后使用注解方式描述servlet，使用doGet和doPost为默认命名
  * servlet3.0版本之前必须在web.xml中配置
**jsp：**
会被编译成一个`java类文件`，如index.jsp在Tomcat中Jasper编译后会生成`index_jsp.java`和`index_jsp.class`两个文件。是特殊的servlet。
## 全局控制器篇
使用idea，全局搜索command+shift+f（或者a）
    find ~/cms/ -type f -name "*.class" |xargs grep -E "Controller|@RestController|RepositoryRestController"
    find ~/cms/ -type f -name "*.class" |xargs grep -E "RequestMapping|GetMapping|PostMapping|PutMapping|DeleteMapping|PatchMapping|RepositoryRestResource"
## 全局过滤器篇
审计时，得先看是否含有全局过滤器。切勿看到`Servlet`、`JSP`中的漏洞点就妄下定论，`Servlet`前面很有可能存在一个全局安全过滤的`Filter`。当然每种框架的写法也有差别。个人认为Filter主要是用在
  1. web.xml全局过滤
      YytSecurityUrlFilter
      com.yytcloud.core.spring.pub.filter.YytSecurityUrlFilter
      true
        sqlInjIgnoreUrls
        .*/itf/.*
        ignoreXSSUrls
        .*/itf/.*
      YytSecurityUrlFilter
      /*
  2. jar包
        首先添加一个 jar 包:commons-lang-2.5.jar ，然后在后台调用这些函数:
    StringEscapeUtils.escapeHtml(string); 
    StringEscapeUtils.escapeJavaScript(string); 
    StringEscapeUtils.escapeSql(string);
  3. 转义
        String string = HtmlUtils.htmlEscape(userinput); //转义
    String s2 = HtmlUtils.htmlUnescape(string); //转成原来的
## 常见漏洞篇
分为`业务安全`问题、`代码实现`和`服务架构`安全问题
**代码实现，查看对应代码与全局过滤器：**
  1. 任意`文件读写`(文件上传、文件下载)、`文件遍历`、`文件删除`、`文件重命名`等漏洞
  2. SQL注入漏洞
  3. XXE(XML实体注入攻击)
  4. 表达式执行(SpEL、OGNL、MVEL2、EL等)
  5. 系统命令执行漏洞(ProcessBuilder)
  6. 反序列化攻击(ObjectInputStream、JSON、XML等)
  7. Java反射攻击
  8. SSRF攻击
  9. XSS
**业务安全，主要理解该系统的逻辑：**
  1. 用户登陆、用户注册、找回密码等功能中密码信息未采用加密算法。
  2. 用户登陆、用户注册、找回密码等功能中`未采用验证码`或`验证码未做安全刷新`(未刷新Session中验证码的值)导致的撞库、密码爆破漏洞。
  3. 找回密码逻辑问题(如:可直接跳过验证逻辑直接发包修改)。
  4. 手机、邮箱验证、找回密码等涉及到动态验证码`未限制验证码失败次数`、`验证码有效期`、`验证码长度过短`导致的验证码爆破问题。
  5. 充值、付款等功能调用了第三方支付系统未正确校验接口(与第三方的交互、与客户的交互，主要查看逻辑问题)。
  6. 后端采用了`ORM框架`更新操作时因处理不当导致可以更新用户表任意字段(如:用户注册、用户个人资料修改时可以`直接创建管理员账号`或其他越权修改操作)。
  7. 后端采用了`ORM框架`查询数据时因处理不当导致可以接收任何参数导致的越权查询、敏感信息查询等安全问题。
  8. 用户中心转账、修改个人资料、密码、退出登陆等功能未采用验证码或`Token机制`导致存在`CSRF漏洞`。
  9. 后端服务过于信任前端，重要的参数和业务逻辑只做了前端验证(如:文件上传功能的文件类型只在JS中验证、后端不从Session中获取用户ID、用户名而是直接接收客户端请求的参数导致的`越权问题`)。
  10. 用户身份信息认证逻辑问题(如:后台系统自动登陆时直接读取Cookie中的用户名、用户权限不做验证)。
  11. 重要接口采用`ID自增、ID可预测并且云端未验证参数有效性`导致的越权访问、信息泄漏问题(如:任意用户订单越权访问)。
  12. `条件竞争问题`，某些关键业务(如:用户转账)不支持并发、分布式部署时不支持锁的操作等。
  13. 重要接口`未限制请求频率`，导致短信、邮件、电话、私信等信息轰炸。
  14. 敏感信息未保护，如`Cookie中直接存储用户密码等重要信息`，跟踪cookie中的变量最终到了哪。
  15. 弱加密算法、弱密钥，如勿把Base64当成数据加密方式、重要算法密钥采用弱口令如`123456`。
  16. 后端无异常处理机制、未自定义50X错误页面,服务器异常导致敏感信息泄漏(如:数据库信息、网站绝对路径等)。
  17. 使用`DWR框架`开发时前后端不分漏洞(如:DWR直接调用数据库信息把用户登陆逻辑直接放到了前端来做)。
## SQL注入篇
  1. **直接拼接，未进行过滤**
将`request.getParameter("")`直接放在SQL语句。
全局搜索查看：`String sql`等。
  2. **预编译使用有误**
    * 在使用占位符后未进行 **setObject** 或者 **setInt** 或者 **setString** 。
    * 有些会使用 **SQLparameter** 函数，参数化查询SQL，能有效避免SQL注入。
    * 使用 **setProperties** 函数。
`占位符`这种在渗透中出现的情况是：当输入1' or '1'='1，不会有什么回显。
因为这个引号已经无法起到闭合作用了，只相当于是一个字符，由于对特殊符号的转义。
如图所知，在setString那个函数那里对引号等一些特殊符号做了转义。
    // 执行查询
       System.out.println(" 实例化Statement对象...");
       PreparedStatement st=conn.prepareStatement("select * from " +
               "springmysql1 where name=?");
       st.setString(1,request.getParameter("name"));
       ResultSet rs=st.executeQuery();
  1. **%和_**
没有手动过滤%。预编译是不能处理这个符号的， 所以需要手动过滤，否则会造成慢查询，造成 dos。
  2. **Order by、from等无法预编译**
如以下示例，需要手动过滤，否则存在sql注入。
`String sql = "Select * from news where title =?" + "order by '" + time + "'
asc"`
  3. **Mybatis 框架**
使用注解或者xml将java对象与数据库sql操作对应。
在注解中或者 Mybatis 相关的配置文件中搜索 $ 。然后查看相关 sql 语句上下文环境。
**mybatis简单示例**
    * mybatis的maven配置
        org.mybatis
        mybatis
        3.5.2
    * 目录结构
java文件
​ 配置文件
    * 各文件功能(左下角是我的水印哈哈哈)
    * config.xml
    * UserMapper.xml
                select * from user where name=#{name}
    * UserMapper.java
                package org;
        public interface UserMapper{
            public User1 getUser(String name);
        }
    * MybatisUtil.java
                package org;
        import org.apache.ibatis.io.Resources;
        import org.apache.ibatis.session.SqlSession;
        import org.apache.ibatis.session.SqlSessionFactory;
        import org.apache.ibatis.session.SqlSessionFactoryBuilder;
        import java.io.Reader;
        public class MybatisUtil{
            public static SqlSessionFactory sessionFactory;
            static{
                try{
                    Reader reader = Resources.getResourceAsReader("config.xml");
                    sessionFactory = new SqlSessionFactoryBuilder().build(reader);
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
            public static SqlSession getSession(){
                return sessionFactory.openSession();
            }
        }
    * User1.java
                package org;
        import lombok.Data;
        @Data
        public class User1 {
            String name;
            int age;
        }
    * test.java
                package org;
        import org.apache.ibatis.session.SqlSession;
        import org.apache.ibatis.session.SqlSessionFactory;
        import org.apache.ibatis.session.SqlSessionFactoryBuilder;
        import java.io.InputStream;
        import org.junit.Test;
        public class test {
            @Test
            public void test1() {
                SqlSession session=MybatisUtil.getSession();
                UserMapper userMapper=session.getMapper(UserMapper.class);
                User1 user1=userMapper.getUser("wy");
                System.out.println(user1.getAge());
            }
        }
    * 在UserMapper.xml使用`#{}`的结果
    * 在UserMapper.xml使用`${}`的结果
使用该符号需要手动写上引号拼接，不然会报错，`User1 user1=userMapper.getUser("'"+"wy' or
'1'='1"+"'");`
    * 容易触发sql注入的条件与修复
      * 模糊查询，需要加入特殊符号，不单单加入引号的那种。如`like '%${xxx}%'`，修复自然是将xxx拎出来，比如使用concat函数。
      * 无需加引号处。比如`in(${xxx})`或者`order by ${xxx}`。修复是用户自行过滤。
  4. `:=`和和此处的`${ids}`可防止SQL注入
        @Arguments("id")
    @Sql("select count(1) from cgform_head where physice_id=:id ")
    public int getByphysiceId(String id);
    @Arguments("ids")
    @Sql("select count(1) as hasPeizhi,physice_id id from cgform_head where 1=1 and physice_id in (${ids}) group by physice_id")
    public List> getPeizhiCountByIds(String ids);
像字符型SQL语句的渗透利用在现实中无非三种，可能还需试一下时间盲注等等，视情况而定：
  * 1') or 1=1 or ('1（括号那里可能会有1至多个）
  * 1%' or '%'='
  * 1' or '1'='1
## SPel注入篇
**简单描述：**
使用el表达式且el表达式可控。如[CVE-2018-1260](https://github.com/Cryin/Paper/blob/master/CVE-2018-1260
spring-security-oauth2 RCE Analysis.md)就是spring-security-oauth2的一个SPel注入导致的RCE。
**示例：**
    String el="T(java.lang.Runtime).getRuntime().exec(\"open /tmp\")";
    ExpressionParser PARSER = new SpelExpressionParser();
    Expression exp = PARSER.parseExpression(el);
    System.out.println(exp.getValue());
在getValue那里执行命令，调用栈如下
**审计：**
查看使用SpelExpressionParser的地方有没有用户可控的。
## XSS篇
**示例**
    @RequestMapping("/xss")
    public ModelAndView xss(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{ 
        String name = request.getParameter("name"); 
        ModelAndView mav = new ModelAndView("mmc"); 
        mav.getModel().put("uname", name);
        return mav;
    }
如果想要返回json格式，将`mmc`替换为`new MappingJackson2JsonView()`。
## SSRF篇
代码中提供了从其他服务器应用获取数据的功能但没有对目标地址做过滤与限制。比如从指定URL链接获取图片、下载等。主要可能存在于在线文档编辑器之类。
**示例**
    String url = request.getParameter("picurl");
    StringBuffer response = new StringBuffer();
    URL pic = new URL(url);
    HttpURLConnection con = (HttpURLConnection) pic.openConnection();
    con.setRequestMethod("GET");
    con.setRequestProperty("User-Agent", "Mozilla/5.0");
    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
    String inputLine;
    while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
    }
    in.close();
    return response.toString();
**审计**
支持的协议
  * file