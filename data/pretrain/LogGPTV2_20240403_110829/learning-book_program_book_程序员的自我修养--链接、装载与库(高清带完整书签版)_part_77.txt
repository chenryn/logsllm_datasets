*mov1 83,#tedx
\n\t*
*int $0x80
\n\t*
*=m* (fd) : *m* (pathnane) , *m* (flags) , *m* (mode)) :
*movl $$eax, $0
\n\t*:
static int read( int fd, void* buffer, unsigned size)
asm(*mov] $3,$eax
int ret = 0;
*nov1 $1,#$ebx
\n\t*
\n\t*
程序员的自我修养一链接、装载与库
---
## Page 446
13.1C语言运行库
423
*mov1 83, $edx
*mov1 82,$$ecx
\n\t*
\n\t*
*int $0x80
“movl teax,0
\n\t*
\n\t* :
*=m* (ret) :*m* (fd) , *m* (buffer), *m* (size) ) ;
return ret;
static int write( int fd, const void* buffer, unsigned size)
asm (*mov1 $4,$$eax
int ret = 0;
\n\t*
\n\t*
*mov1 $1, 8tebx
*movl $2,e$ecx
\n\t*
*mov1 #3, #$edx
\n\t*
•int $0x80
*mov1 steax, 80
\n\t*
\n\t* :
return ret;
*=m* (ret) : *n*(fd), *m* (buffer), *m* (size)) ;
static int close (int fd)
asm(*mov1 $6,号eax
int ret = 0;
\n\t*
*nov1 1, ttebx
*int $0x80
\n\t*
\n\t *
nov1##eax,80
*=m*(ret) :*m* (fd)) 
\n\t * :
return ret:
static int seek(int fd, int offset, int node)
asm(*mov] S19,号$eax
int ret = 0;
\n\t*
*nov1 1, #tebx
*nov1 #2,$tecx
\n\t*
\n\t*
*int $0x80
*nov1 $3, $tedx
In\t*
*nov1 eax,0
\n\t*
*=n*(ret) :*m* (fd) , *m* (offset), *n* (mode)1 
\n\t*:
return ret}
FILE *fopen( const char *filename,const char *mode }
int fd = -1;
intaccess=00700;//创建文件的权限
int flags = 0;
//注意：以0开始的数字是八进制的
// θf/usr/include/bits/fcnt1.h
define O_RDONLY
#define O_WRONLY
01
00
#define O_RDWR
20
程序员的自我修养一—链接、装载与库
---
## Page 447
424
第13章运行库实现
edefine O_CREAT
0100
#define O_APPEND
define O_TRUNC
02000
01000
if (strcmp (mode,
f1ags 1- O_WRONLY 1 O_CREAT 1 O_TRUNC;
（，
== 01
if (stremp (mode,*v+*) == 0)
flags 1=
O_RDWR 1 O_CREAT 1 O_TRUNC;
if (strcnp(mode, *r*) == 0)
flags 1-
O_RDONLY:
if (strcnp(node, *r+*) s= 0)
f1ags |- O_RDWR 1 O_CREAT;
fd = open(filename, flags, access):
return (FILE*)fd;
int fread(void* bufEer, int size, int count, FILE* stream)
return read((intlstream, buffer, size * count) ;
int fwrite(const void* buffer, int size, int count, FILe* stream]
L
return write[{int)strean, buffer, size * count)
int fclose(FILE* fp)
return close((int) fp);
1
int fseek(FILE* fp, int offset, int set)
return seek((int)fp, offset, set):
#endif
另外还有一段与文件操作相关的声明须放在minicnt.h里面：
typedef int FILE;
#define EOF (-1)
#ifdef WIN32
fdefine stdin
fdefine
( (FILE*) (GetStdHand1e (STD_INPUT_HANDLE) ))
#define stderr
stdout
( (FILE*) (GetStdHand1e (STD_ERROR_HANDLE) ))
( (FILE*) (GetStdHand1e (STD_OUTPUT_HANDLE) ))
#else
#define
#define
stdin
( (FILE*)1)
( (PILS*)0)
#define
stdout
#endi f
stderr
((FILB*}2)
程序员的自我修养一链接、装载与库
---
## Page 448
13.1C语言运行库
425
在上面的Mini CRTIO与文件操作的实现中，我们省略了现实CRT中很多内容，包括
换行符转换、文件缓冲等。由于省略了这些内容，那么MiniCRT相当于仅仅是对系统调用
或Windows API的一个简单包装，而FILE结构也可以被省略，它在Mini CRT中是被忽略
的，FILE*这个类型在Windows下实际上是内核句柄，而在Linux下则是文件描述符，它并
不是指向FILE结构的地址。
值得一提的是，在Windows下，标准输入输出并不是文件描述符0、1和2，而是要通
过一个叫做GetStdHandle的 API 获得。
由于省略了诸多实现内容，所以CRTIO部分甚至可以不要做任何初始化，于是IO的
初始化函数mini_cn_init_io也形同虚设，仅仅是一个空函数而已。
13.1.4字符串相关操作
字符串相关的操作也是CRT的一部分，包括计算字符串长度、比较两个字符串、整数
与字符串之间的转换等。由于这部分功能无须涉及任何与内核交互，是纯粹的用户态的计算，
所以它们的实现相对比较简单。我们在MiniCRT中将实现与如清单13-4几个字符串相关的
操作。
清单13-4string.c
char* itoa(int n, char* str, int radix)
char digit [] = *0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ*;
ae = peq ,xe
char* pe= str;
if (tp 11 radix  36)
return p:
if (radix I= 10 && n  0 )
return( ret ):
ret = 1 :
char *strcpy (char *dest, const char *src)
char* ret = dest;
while (*src)
*dest++ = *src++1
*dest = '\0';
return ret;
unsigned strlen(const char *str)
int cnt = 0:
if (1str)
for (;*str 1=*\o′; *+str)
return 0;
++cnt ;
return cnt;
13.1.5
格式化字符串
现在的MiniCRT已经初具维形了，它拥有了堆管理、文件操作、基本字符申操作。接
下来将要实现的是CRT中一个如雷贯耳的函数，那就是printf。printf是一个典型的变长参
数函数，即参数数量不确定，如何使用和实现变长参数的函数在第10章中已介绍过。与前
面一样，我们将这一节要实现的相关内容列举如下。
printf实现仅支持%d、%s，且不支持格式控制（比如%08d）。
实现fprintf和vfprintf，实际上print是fprintf的特殊形式，即目标文件为标准输出的fprintf。
程序员的自我修养一—链接、装载与库
---
## Page 450
13.1C语言运行库
427
实现与文件字符串操作相关的几个函数，fputc和fputs。
printf相关的实现代码如清单13-5所示。
清单13-5
include *minicrt.h*
int fputc(int c,FILE *strean )
if (fwrite(&c, 1, 1, stream) != 1)
return BOF;
return C1
int fputs( const char *str, FILE *stream)
if (fwrite(str, 1, len, stream) = len)
int len = strlen(str);
else
return EOF:
return len;