For example, suppose the package of class a also contains
a class with the (non-obfuscated) name MainActivity. The
constraint a (cid:54)= MainActivity in Figure 1(b) speciﬁes that
the predicted name for node a must be distinct from the
name MainActivity. Indeed, if these two classes have iden-
tical names, then the resulting output APK would not be
syntactically well-formed.
In Section 5, we describe an algorithm that, for any APK,
generates all necessary syntactic and semantic constraints.
Probabilistic Prediction.
Using the derived dependency graph and constraints, De-
Guard infers the most likely names for all obfuscated ele-
ments. The predicted names for our example are depicted in
Figure 1(c). DeGuard predicts that the name of the obfus-
cated class a is DBUtils and that the name of the obfuscated
ﬁeld b is db. Below, we describe how DeGuard concludes
that these are the most likely names for this example.
To predict the names of the obfuscated elements, De-
Guard performs a joint prediction that considers all pro-
gram elements, known and unknown. To illustrate this in-
ference step, consider the graph in Figure 1(c). The tables
associated with the graph’s edges represent the likelihood,
of each (pairwise) assignment of names to program elements
(nodes). We remark that each table is derived from feature
functions associated with weights, which together represent
(log-)likelihoods. We formally deﬁne feature functions and
explain the derivation of the likelihood tables in Section 3.
Here, we illustrate how these likelihood tables are used to
choose the most likely names. Our goal is to ﬁnd an assign-
ment for all program elements that maximizes a score that
is the sum of the weights in each table.
For our example, according to the top-most table, the
weight of assigning the name DBUtils to the class is 0.3.
However, DeGuard does not select DBUtils as the name of
this class. This is because selecting the name DBUtils does
not result in the highest possible overall score. Suppose we
select the name DBUtils. Then, we have two possible names
for the obfuscated ﬁeld b, namely db and instance. Accord-
ing to the likelihood tables, both the former and the latter
choice result in a total score of 1.2. However, if we select the
name DBHelper and db, then the total score is 1.3, which
is the highest possible score for this example. DeGuard
therefore returns these names as most likely.
345Formally, DeGuard performs a Maximum a Posteriori
(MAP) inference query on the CRF model deﬁned by the de-
pendency graph and the feature functions. We deﬁne MAP
inference in Section 3.
2.3 Security Applications
DeGuard can be used to tackle several practical security
problems. In our evaluation, we show that DeGuard can
eﬀectively reverse ProGuard’s layout obfuscation for benign
Android APKs. Although ProGuard obfuscates 86.7% of the
program elements on average, DeGuard correctly predicts
the names for 79.1% of those elements.
Predicting libraries is another important problem, which
is particularly relevant for Android [14]. Mobile develop-
ers tend to rely on a large number of libraries which often
contain security vulnerabilities — from personal informa-
tion release [15, 11] to severe man-in-the-middle vulnerabil-
ities [1]. In our experiments, DeGuard reveals over 90% of
the third-party libraries concealed by ProGuard.
Further, numerous security analyses rely on descriptive
program identiﬁers. Examples include analyses that per-
form statistical ﬁltering of potential vulnerabilities [37] and
probabilistic systems for detecting privacy leaks [11]. These
systems assume that the application’s program elements are
non-obfuscated. DeGuard can be used to deobfuscate ap-
plications before they are analyzed by such systems.
2.4 Challenges
We discuss three key challenges when building a prediction
system for deobfuscating Android applications:
(i) Capturing the rich structure of Android applications:
precisely encoding the structure of Android applications us-
ing a concise, yet adequate set of program elements and
relationships is important to ensure the predictions made
by the system are accurate. This is diﬃcult as a large set
of relationships may hurt the scalability of the system while
missing important relationships, or deﬁning bad ones, can
reduce the prediction accuracy.
(ii) Semantic equivalence: the rich structure of Java poses
nontrivial constraints that must be captured to ensure the
resulting deobfuscated Android APK has equivalent seman-
tics to the input APK.
(iii) Scalable learning:
the expressive structure of An-
droid applications inevitably results in complex dependency
graphs and a large variety of features that cannot be han-
dled eﬃciently by oﬀ-the-shelf machine learning systems.
According to our experiments, the most scalable available
prediction system for programs [31] required an order of
magnitude longer than DeGuard to learn a probabilistic
model for Android.
2.5 Scope and Limitations
In this work, we focus on deobfuscating Android appli-
cations that have been transformed using layout obfusca-
tion mechanisms, which rename ﬁelds, methods, classes and
packages with semantically obscure names. Other obfusca-
tion techniques, such as data obfuscation mechanisms, which
alter data structures, control-ﬂow and cryptographic obfus-
cation mechanisms fall outside the scope of this work. We
remark that malicious Android applications often uses mul-
tiple obfuscation techniques to prevent reverse engineering.
Security experts must thus use a combination of deobfusca-
tion tools to eﬀectively deobfuscated Android malware.
3. BACKGROUND
In this section we provide the necessary background on
probabilistic models, queries, and learning which we leverage
in this work. These concepts are well known in the ﬁeld of
probabilistic graphical models [20]. The main purpose here
is to review these parts and to illustrate how they are used
by our approach.
Problem Statement.
We phrase the problem of predicting the most likely names
assigned to all obfuscated program elements as a problem in
structured prediction.
Intuitively, we model the elements
of a program as a tuple of random variables (V1, . . . , Vn)
ranging over a set of name labels Names. The set Names
in our case contains all possible names from which we can
choose to name program elements. Then, the joint distri-
bution P (V1, . . . , Vn) (discussed later in this section) over
these variables assigns a probability to each assignment of
names to variables.
Let (cid:126)O = (V1, . . . , V| (cid:126)O|) be the variables representing obfus-
cated program elements, i.e., the variables whose names we
would like to predict. The names of the remaining variables
(cid:126)K = (V| (cid:126)O|+1, . . . , Vn) are known and will not be aﬀected by
the renaming. Then, to predict the most likely names for the
obfuscated program elements, we compute the Maximum a
Posteriori (MAP) inference query:
(cid:126)o = argmax
(cid:126)o(cid:48)∈Ω
P ( (cid:126)O = (cid:126)o(cid:48) | (cid:126)K = (cid:126)k)
where Ω ⊆ Names| (cid:126)O| is the set of all possible assignments of
names to the obfuscated variables (cid:126)O, and (cid:126)k ∈ Names| (cid:126)K| de-
ﬁnes the names assigned to the known variables (cid:126)K. Next, we
describe how we actually represent and compute the condi-
tional probability P ( (cid:126)O = (cid:126)o | (cid:126)K = (cid:126)k) for a given assignment
of names (cid:126)k.
Dependency Graph.
A dependency graph for a given program is an undirected
multigraph G = (V, E), where V is a set of random variables
representing program elements and E ⊆ V ×V ×Rels is a set
of labeled edges. Here, Rels is a set of relationships between
program elements; we instantiate this set for Android appli-
cations in Section 4. An edge (Vi, Vj, rel ) says that elements
Vi and Vj are related via rel . An example of a dependency
graph is shown in Figure 1(b).
Features and Weights.
We deﬁne a pairwise feature function ϕ as follows:
ϕ : Names × Names × Rels → R
This function maps a pair of names and their relationship
to a real number. In Section 4, we deﬁne several kinds of
feature functions and based on these we obtain the entire set
of pairwise features {ϕ1, . . . , ϕm} automatically during the
learning phase (described at the end of this section). For
example, for each observed edge (Vi, Vj, rel ) in the training
set of dependency graphs where the names assigned to Vi
and Vj are ni and nj, respectively, we deﬁne a pairwise
feature ϕ(N, N(cid:48), Rel ) = 1 if N = ni, N(cid:48) = nj, and Rel =
rel ; otherwise, ϕi(N1, N2, rel ) = 0. Further, for any ϕi, we
associate a weight wi, also computed during the learning
phase.
346Given a dependency graph G = (V, E), a prediction (cid:126)o
for the obfuscated variables (cid:126)O, and an assignment (cid:126)k for the
ﬁxed, known variables (cid:126)K, we associate a feature function fi
to each pairwise feature ϕi deﬁned as follows:
(cid:88)
fi((cid:126)o, (cid:126)k) =
ϕi(((cid:126)o, (cid:126)k)j, ((cid:126)o, (cid:126)k)l, rel )
(Vj ,Vl,rel)∈E
Here, ((cid:126)o, (cid:126)k)j denotes the jth name in the vector ((cid:126)o, (cid:126)k). We
can think of fi as lifting ϕi to quantify ϕi’s eﬀect on all the
edges in the graph (i.e., adding up ϕi’s eﬀect on each edge).
The end result computed by fi is a real number capturing
the overall eﬀect of ϕi.
Conditional Random Fields.
A conditional random ﬁeld (CRF) is a probabilistic model
which deﬁnes a conditional probability distribution, that is,
P ( (cid:126)O = (cid:126)o | (cid:126)K = (cid:126)k) as follows:
P ( (cid:126)O = (cid:126)o | (cid:126)K = (cid:126)k) =
1
Z
exp(
wifi((cid:126)o, (cid:126)k)),
where each fi, 1 ≤ i ≤ m, is a feature function associated
with a weight wi, and Z is a normalization constant. We
do not deﬁne Z as it can be omitted for our speciﬁc type of
query.
It is then immediate that the dependency graph, together
with the feature functions f1, . . . , fm and their associated
weights w1, . . . , wm, deﬁne a CRF.
Prediction via MAP Inference.
To compute the most likely assignment (cid:126)o for the variables
(cid:126)O, we perform a MAP inference query:
(cid:126)o = argmax
(cid:126)o(cid:48)∈Ω
P ( (cid:126)O = (cid:126)o(cid:48) | (cid:126)K = (cid:126)k)
Using our CRF model, we can compute the probability of
an assignment (cid:126)o using the formula:
m(cid:88)
i=1
m(cid:88)
i=1
P ( (cid:126)O = (cid:126)o(cid:48) | (cid:126)K = (cid:126)k) =
1
Z
exp(
wifi((cid:126)o, (cid:126)k))
We omit the constant Z (as it does not aﬀect the result of
the MAP inference query), expand fi((cid:126)o, (cid:126)k), and rewrite the
formula as follows:
P ( (cid:126)O = (cid:126)o(cid:48) | (cid:126)K = (cid:126)k) ∼
m(cid:88)
(cid:88)
i=1
(cid:88)
m(cid:88)
∼ exp(
ϕi(((cid:126)o, (cid:126)k)j, ((cid:126)o, (cid:126)k)l, rel )) =
wi
(Vj ,Vl,rel)∈E
= exp(
(Vj ,Vl,rel)∈E
i=1
wi ϕi(((cid:126)o, (cid:126)k)j, ((cid:126)o, (cid:126)k)l, rel ))
We refer to the above as the total score of an assignment ((cid:126)o, (cid:126)k).
MAP Inference Example.
We now explain the above equation by referring to our ex-
ample from Section 2. The product wi ϕi(((cid:126)o, (cid:126)k)j, ((cid:126)o, (cid:126)k)l, rel )
scores a particular pairwise feature function ϕi.
In our
example, each row in the tables given in Figure 1(c) de-
ﬁnes a pairwise feature function and its weight. Consider
the ﬁrst row of the top-most table. This row denotes a
pairwise feature function which returns 1 if its inputs are
(SQLiteOpenHelper, DBUtils, extends) and 0 for all other
inputs. That feature function also has a weight of wi = 0.3,
which is determined during learning. We do not include the
type of relationship in the tables since in this example the
program elements are connected via a single relationship.
In our example, the MAP inference query will return the
assignment (cid:126)o highlighted in green (i.e., DBHelper and db)
as that assignment satisﬁes the constraints in Ω (in our ex-
ample we have a single inequality constraint) and the total
score of (cid:126)o is the highest: 0.2 + 0.4 + 0.7 = 1.3. To compute
this score, DeGuard implements a greedy MAP inference
algorithm which we describe in Section 6.1.
Learning from “Big Code”.
The input to the learning phase of DeGuard is a set
of p programs {(cid:104)(cid:126)o(j), (cid:126)k(j)(cid:105)}p
j=1 for which both vectors of
names (cid:126)o and (cid:126)k are given. That is, the training data con-
tains non-obfuscated applications, which can be downloaded
from repositories for open-source Android applications, such
as F-Droid [3]. From this input, the learning outputs weights
{wi}m
i=1 such that names in the training data programs are
correctly predicted. There are several variations of this
learning procedure [29, 20]. For our application we use learn-
ing with pseudo-likelihoods as described in [35, §5.4]. We
describe this algorithm in more detail in Section 6.1.
4. FEATURE FUNCTIONS
In this section, we present the pairwise feature functions
used for our Android deobfuscation task. As described ear-
lier in Section 3, these feature functions are used to build the
dependency graph. Recall that the construction of an appli-
cation’s dependency graph amounts to introducing a node
for each program element and then connecting the program
elements that are related. The signature of a dependency
graph is therefore deﬁned by the application’s program ele-
ments and the relationships between them.
4.1 Program Elements
A program’s dependency graph is deﬁned over nodes that
represent diﬀerent program elements. To capture the struc-
ture of an Android application, we introduce nodes for each
of the following program elements:
• Types. We introduce a node for each primitive type
(e.g., int, long, float etc.), reference type (e.g., Object,
ArrayList, etc.), and array type (e.g., int[], Object[],
etc.) that appears in the application. For example,
we introduce a node to represent the reference type
SQLiteDatabase in the example of Figure 1(a).
• Fields. We introduce a node for each ﬁeld declared in
the application’s classes. For example, we introduce a
node to represent the ﬁeld of type SQLiteDatabase in
the example of Figure 1(a).
• Packages. We introduce a node for each package in
the application. For example, given a package a.b, we
introduce two nodes: one to represent the package a,
and another to represent the package a.b.
• Methods. We introduce a node for each method de-
clared in the application’s classes. For the example of
Figure 1(a), we introduce two nodes: one node to rep-
resent the constructor () and another node for
347the method c(). If a class overrides a given method,
we use one node to represent both the method declared
in the superclass and the one declared in the subclass.
This guarantees that overriding methods are renamed
consistently, which is necessary for preserving the ap-
plication’s semantics.
• Expressions. We introduce a node to represent con-
stant values (e.g., integers, strings, etc.) and the value
null. For example, we add a node 5 to capture the
constant value 5. Nodes for other kinds of constant
values are introduced analogously.
• Access Modiﬁers. We introduce nodes to repre-
sent access modiﬁers, such as static, synchronized,
private, protected, public, and so forth.
• Operations. We introduce nodes to represent opera-
tions (e.g., +, -, etc.).
We remark that we ignore generic types because they are
removed by the compiler during the type erasure process [7].
Furthermore, we ignore the names of local variables and
method parameters since they are not part of the applica-
tion’s APK. For example, we do not introduce a node to rep-
resent the method parameter’s name str of the method c()
in Figure 1(b). We do however capture the types of local
variables and method parameters, e.g. we capture that the
method c() has a parameter of type String.
Known and Unknown Program Elements.
We capture whether a node’s name is obfuscated and is
to be predicted, or is known and should not be predicted,
using the following set of rules:
• Nodes that represent packages, classes, methods, and
ﬁelds that are part of the Android API are known. For