analysis and to recognize it as a false positive. As excessive
false positives could have a negative impact on the usability
of any tool, further research is needed to understand how
false positives in ASIDE impact developer behavior.
5.
INTERACTIVE CODE ANNOTATION
Interactive code annotation [37] is a mechanism that helps
developers to avoid more subtle security vulnerabilities where
code refactoring is not feasible, such as broken access con-
trol and CSRF. Instead, programmers are asked to indicate
where practices were performed, which is added as an an-
notation to the code. This serves as both a reminder to
perform good practices, and enables further analysis and
auditing. We ﬁrst discuss interactive code annotation using
an example of access control.
Consider an online banking application with three database
tables: user, account, account user, and transaction,
where the tables account and transaction are speciﬁed as
(cid:2)(cid:3)(cid:1)
requiring authentication in such a way that the subject must
be authenticated by the key of the user table, referred to as
an access control table.
Figure 7(b) shows a highlighted line of code in the doGet()
method of the accounts servlet, which contains a query to ta-
ble account. ASIDE requests the developer to identify the
authentication logic in the program, again by a red marker
and highlighted text in the editing window. In this case, the
developer highlights a test condition reques.getsession().
getAttribute(“USER”) == null as illustrated in Figure 7(b),
which ASIDE saves as an annotation to the query code. The
annotations can be reviewed and modiﬁed in an additional
view as shown in Figure 7(b) and Figure 7(c), on which
diﬀerent information corresponding to diﬀerent actions the
developer has taken is displayed. Thus, the annotation pro-
cess is seamlessly integrated into the IDE without requiring
the developer to learn any new annotation language syntax.
(a) Developer identiﬁes authentication logic (highlighted
text) upon request from the ASIDE (see marker and high-
lighted text of Figure 7(b)) and annotates it.
(b) ASIDE issues a question for proper access control check
that grants/denies the access to the highlighted data access
operation. The detail of such request is displayed on the
view called Annotation below the code editing window.
(c) The Annotation view adds the annotated information as
a response to the developer’s annotating of the access control
logic in above Figure 7(a).
Figure 7: An example showing how ASIDE interac-
tive code annotation works.
Several beneﬁts can be derived from this annotation mech-
anism. First, the developer is reminded of the need to per-
form authentication, and the annotation process may help
the developer to verify that authentication logic has been in-
cluded. The developer has an opportunity to add intended
access control logic should that be missing. Second, the
logged annotations provide valuable information for code
review. Third, heuristics-based static analysis can be per-
formed to provide more in-depth analysis of the authentica-
tion logic.
(cid:1)(cid:2)(cid:1)
We are still in the process of implementation interactive
code annotation in ASIDE. Thus, the screenshots in this
section are of our design, not a working prototype. We ﬁrst
discuss the issues in implementing code annotation, before
moving on to our analysis of its potential eﬀectiveness.
Our implementation of code annotation will take a knowledge-
based approach relying on the speciﬁc structure of the target
technology, initially Java servlet-based applications. We are
ﬁrst focusing on requesting programmers’ annotations on ac-
cess control logic The key implementation issues are (a) how
to identify the application context to prompt the developer
for annotation and (b) what are the forms of acceptable an-
notations.
If we know the names of database tables whose access re-
quires authentication, we can easily identify program state-
ments that access these tables. Thus, we will provide a
method for designers or a SSG to specify such tables as
part of conﬁguring ASIDE. However, such database access
statements may not convey important application context,
as they may be part of a utility library used by diﬀerent web
requests. For example, the account table may be accessed
by the same access routine in multiple web requests (e.g.
“customer account balance”, and “electronic fund transfer”).
Also, diﬀerent web requests may require diﬀerent access con-
trol logic (e.g. two-factor authentication for fund transfer).
Therefore, we need to identify locations where application
logic takes place by invoking database access operations.
For Java servlet-based web applications, access control an-
notations can be requested in the context of a web request:
as in “where is the authentication logic for accessing the ac-
count table in the customer account balance request?”, and
“where is the authorization logic for accessing the account
table in the electronic fund transfer request?” In this exam-
ple each web request is implemented as a servlet. Therefore,
we will start by tracking doGet() and doPost() methods
within each servlet class (and this can be easily extended
. They are referred to hereafter as
to include JSP pages)
entry methods. Through static analysis techniques, we will
detect cases where an entry method leads to a statement ac-
cessing a database table which requires access control. The
developer will then be requested to provide annotation of
authentication in the context of the entry method, as illus-
trated in Figure 7(b).
1
Our annotation design satisﬁes the following requirements:
(a) it consists of a set of logical tests (e.g. conditional tests
in if statement, cases in switch statements), as shown in
Figure 7(a), and (b) each test must be on at least one execu-
tion path, as determined by the control ﬂow, from the start
of the entry method to the identiﬁed table access statement.
Annotations may enable more in-depth static analysis.
We are speciﬁcally looking into one type of execution anal-
ysis. For example, a broken access control may be detected
if there is an execution path in the entry method leading
to the database access without any identiﬁed access control
checks along the path. We believe such an analysis can also
be used to help prevent CSRF vulnerabilities. Of course,
the accuracy of this analysis depends on the accuracy of the
annotation. We now move to our evaluation of code anno-
tation against real world cases.
1
Most popular Java frameworks also have structured entry
methods, such as controller in Spring MVC
6. EVALUATE INTERACTIVE CODE AN-
NOTATION
We have conceptually tested this approach on real world
open source projects. The security audit did not identify
any broken access control or CSRF issues in Roller. Thus,
we turned to bug tracking records to uncover previously dis-
covered issues. Since Apache Roller only has a small number
of fully documented security patches, we also included secu-
rity patch information from Moodle [25], a PHP-based open
source project for course management. A Google search
of “powered by Moodle” yielded over 4.3M sites including
many large universities. A total of 20 fully documented
security patches were found for the two projects. Four of
them are due to improper input validation and/or encoding
and can be addressed by ASIDE’s code refactoring support.
Out of the remaining 16 vulnerabilities, 3 (1 broken access
control and 2 CSRF) can be addressed by code annotation
and the path analysis heuristics outlined above.
The broken access control issue is from Roller [31]. The
authenticator, as illustrated in Figure 8, gets a web request
from the client side and checks to see whether the headers
of the request are valid.
If they are valid, it extracts the
credentials and veriﬁes the validity of them. If the creden-
tials are valid, the program goes on to access protected data
in the database. If the credentials are not valid, an excep-
tion will be thrown, thus preventing unauthenticated access.
However, there is another path from the web entry point to
the data access point when the headers do not conform to
the expected format, as shown in the control ﬂow diagram
in Figure 8.
Figure 8: Control ﬂow diagram of how an authenti-
cation request is processed.
Applying ASIDE’s code annotation approach, when the
application code accesses the protected database resource to
get all users’ information, ASIDE would prompt a request
for proper access control logic on the path from the web
request to the data access method call. Considering that
the question should be raised on a transaction level, line 52
in the Servlet processing the request would be highlighted,
as shown in Figure 10.
In this case, the developer could
easily identify the access logic as the logic tests which lie in
the method invocation verifyUser(username, password)
in BasicAuthenticator.java, highlighted in Figure 9.
In
this case, there are three tests to be annotated.
Based on the developer’s annotation, ASIDE would be
able to construct a control ﬂow graph, as illustrated in Fig-
ure 10, that has one path from a web entry point to a data
(cid:1)(cid:3)(cid:2)
Figure 9: Annotate access control logics.
access point with an annotated access control check on it,
while another path from the same entry point to the same
data access point has no access control check on it. There-
fore, ASIDE would be able to provide a warning to the de-
veloper of a potential broken access control vulnerability.
Figure 10: Java Servlet code for processing authenti-
cation request (left) and Access control check graph
that involves processing the request (right).
Two CSRF vulnerabilities were recorded in Moodle’s bug
tracking system. An eﬀective way to prevent CSRF is to
assign a random token to each instance of a web page that
changes the state of the application. The token will be ver-
iﬁed by the server before the application state is changed.
The Moodle project is clearly well aware of the CRSF prob-
lem and implemented this strategy as a set of standard util-
ity functions, simplifying developers’ tasks. However, devel-
opers still missed using this CSRF protection, introducing
serious vulnerabilities into the software.
Through code annotation, ASIDE can be designed to re-
mind developer of places where CSRF protection is needed,
such as web transactions that change application states.
Whenever a form submission/web request contains an oper-
ation to update (add, delete, modify) database entries, the
form submission needs to be checked for CSRF. We describe
one of the CSRF cases in Moodle, MSA-08-0013 [26], in de-
tail; the other example is similar. This CSRF vulnerability is
based on editing a user’s proﬁle page, edit.php. Since ASIDE
is currently being designed for the Java EE environment, we
recast this example in equivalent Java terms.
The edit function would have a web entry point such as
in a Servlet. Function update_record() is called, as high-
lighted in Figure 11, to update selected database tables
through database operations. ASIDE would prompt the de-
veloper to annotate a logic test that implements CSRF pro-
tection. The request for annotation would be made at the
line where update_record() is called. In this case, CSRF
protection was omitted, so the programmer would be re-
minded to add such protection. Once the CSRF protection
is added with appropriate annotation, ASIDE will apply the
path analysis heuristics to further check for possible logic er-
rors that may bypass the CSRF protection.
We have not yet conducted an analysis on false positives
Figure 11: A snippet of source code of the web trans-
action that changes user proﬁle.
for code annotation since we have not completed a prototype
of ASIDE’s code annotation functions, however, we would
like to point out a case where false positives may appear.
It is not uncommon for a web application to access diﬀer-
ent tables of a database to respond to one single request.
Without context, ASIDE would raise the same questions for
each and every function call that changes a table, and thus
may produce false positives. Further research is needed to
make ASIDE more contextual and intelligent about asking
questions in these cases.
7. DEVELOPER BEHAVIOR STUDY
The previous evaluations focused on the ability of ASIDE
to detect or ﬁx vulnerable code. However, ASIDE must be
designed in a way that ﬁts naturally into a developer’s work
environment in order to be successful. To gain an under-
standing of programmers’ reactions towards real-time secure
coding support, we conducted a pilot user study involving
9 graduate students from our college using our current im-
plementation of ASIDE in a controlled experimental setting.
All 9 participants were recruited from a Java based web ap-
plication development course in the Spring 2011 semester.
As part of the course, students were brieﬂy introduced to
basic secure web programming techniques such as input vali-
dation and encoding. However, project grades were assigned
only based on functional requirements, not on secure coding
practices.
Part of the students’ course work was to build an online
stock trading system incrementally over 4 projects through-
out the semester. Our study focused on the last increment
of this project where students were asked to implement func-
tionality including add a banking account, display stock de-
tails, make a buy/sell transaction, and display transaction
history. Students added these functions on top of their ex-
isting work artifacts, which included static web pages, login,
logout, and register functionalities.
We asked students to come to our lab and work on their
assignment for 3 hours, using Eclipse with ASIDE. ASIDE
was implemented as described in Section 3, generating in-
put validation and encoding warnings. Participants were
given a brief tutorial of ASIDE, then told to work on what-
ever aspects of their code they wanted, using ASIDE as
they wished. We recorded all their interactions with ASIDE
through screen recording software, and logged all interac-
tions with the ASIDE interface.
Immediately after the 3-
hour study, participants were interviewed about their expe-
riences of using ASIDE. Participation was voluntary and not
related to class grades; students were compensated with a
$30 gift card for his/her time.
Our goals with this study were to evaluate the usability of
ASIDE and determine: (a) do users pay attention to warn-
ings? (b) do they use code refactoring functions, and (c) do
warnings and code generation help developers produce more
secure code?
Figure 12 depicts the results of all 9 participants. Over all
9 participants, 101 distinctive ASIDE warnings were gener-
ated, resulting in 11.2 warnings per participant on average.
83 warnings were clicked by participants, 9.2 for each par-
ticipant on average.
Figure 12: Metrics and results from 9 participants.
Out of the 83 warnings clicked, 63 were addressed (7 per
participant on average) by clicking on one of the validation
rules provided by ASIDE, leading to validation/encoding
code being generated. The remaining warnings were dis-
missed by participants. All participants used ASIDE to