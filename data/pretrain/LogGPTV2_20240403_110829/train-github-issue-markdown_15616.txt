The documentation for `read()` in the `Reader` trait specifies:
> Read bytes, up to the length of `buf` and place them in `buf`.  
>  Returns the number of bytes read. The number of bytes read may  
>  be less than the number requested, even 0. Returns `Err` on EOF.
However, the `BufferedReader` type which implements `Reader` will only perform
a single read up to its internal buffer size of 64kB, regardless of the input
stream size or output buffer size.
The following test program creates a 200kB file and reads it into a similarly
sized buffer. Only the first 64kB is read:
    use std::io::{BufferedReader, BufferedWriter, File};
    fn main() {
        let buf_size = 200*1024;
        let filename = "/tmp/test.dat";
        println!("Generating buffer of {} bytes", buf_size);
        let source_data = Vec::from_elem(buf_size, 0xA5);
        let path = Path::new(filename);
        let mut file = BufferedWriter::new(File::create(&path));
        match file.write(source_data.as_slice()) {
            Ok(()) => (), // succeeded
            Err(e) => println!("failed in write: {}", e),
        }
        let path = Path::new(filename);
        let mut file = BufferedReader::new(File::open(&path));
        let mut read_data = Vec::from_elem(buf_size, 0);
        println!("Buffer capacity {} bytes", read_data.len());
        match file.read(read_data.as_mut_slice()) {
            Ok(bytes_read) => println!("Read {} bytes", bytes_read),
            Err(e) => println!("error reading: {}", e)
        }
    }
The output is:
    Generating buffer of 204800 bytes
    Buffer capacity 204800 bytes
    Read 65536 bytes
The expected output would obviously report "Read 204800 bytes". As per the
trait's documentation, the `read()` method should read up to the size of
either the input stream or the output buffer, whichever is smaller; reading in
chunks of 64kB in its internal buffer is an implementation detail.
If instead of using `read()` the `read_at_least()` method is called (with
`buf_size`), the full size is read.