title:CLAMP: Practical Prevention of Large-Scale Data Leaks
author:Bryan Parno and
Jonathan M. McCune and
Dan Wendlandt and
David G. Andersen and
Adrian Perrig
2009 30th IEEE Symposium on Security and Privacy
CLAMP: Practical Prevention of Large-Scale Data Leaks
Bryan Parno, Jonathan M. McCune, Dan Wendlandt, David G. Andersen, Adrian Perrig
CyLab, Carnegie Mellon University
Abstract
Providing online access to sensitive data makes web
servers lucrative targets for attackers. A compromise of any
of the web server’s scripts, applications, or operating sys-
tem can leak the sensitive data of millions of customers. Un-
fortunately, many systems for stopping data leaks require
considerable effort from application developers, hindering
their adoption.
In this work, we investigate how such leaks can be pre-
vented with minimal developer effort. We propose CLAMP,
an architecture for preventing data leaks even in the
presence of web server compromises or SQL injection
attacks. CLAMP protects sensitive data by enforcing strong
access control on user data and by isolating code running
on behalf of different users. By focusing on minimizing
developer effort, we arrive at an architecture that allows
developers to use familiar operating systems, servers, and
scripting languages, while making relatively few changes to
application code – less than 50 lines in our applications.
1. Introduction
To decrease costs and increase consumer convenience, busi-
nesses and governments make increasingly large amounts
of sensitive information available online [7,16]. While con-
venient, online services are attractive targets for attackers,
since a single ﬂaw in a service’s implementation can leak
the sensitive data of millions of users [9, 22, 27]. Indeed,
a recent study of over 500 data breaches found that 73%
were the result of external attacks [28].
The growth of web services is aided by the availabil-
ity of commodity web application stacks that simplify
development and deployment. For example,
the Linux,
Apache, MySQL, Perl/PHP (LAMP) stack provides a turn-
key system that allows even inexperienced programmers to
quickly and easily deploy a full-blown web service. As a
result, this model, ubiquitous in online services, tends to
promote features and ease of use at the cost of security.
While LAMP-style stacks simplify development, they
signiﬁcantly increase the size of an application’s Trusted
Computing Base (TCB), the collection of code that must
be correct to prevent a data leak. The TCB of a typical web
application includes not only the large operating system
and webserver codebases, but also a vast collection of
scripts and third-party libraries. These scripts parse input,
perform access control, and generate dynamic content, and
yet this code is often written by inexperienced program-
mers and seldom subject to peer review. Unfortunately,
the monolithic LAMP-style approach means that a single
vulnerability anywhere in a web application’s software
stack will often expose all user data.
In this work, we describe CLAMP, an architecture that
adds data Conﬁdentiality to the LAMP model while retain-
ing the ease of use that has made it so popular. CLAMP
prevents web server compromises from leaking sensitive
user data by (1) ensuring that a user’s sensitive data can
only be accessed by code running on behalf of that user,
and (2) isolating code running on behalf of different users.
While previous work has explored techniques to prevent
data leaks (Section 8), these approaches typically require
signiﬁcant programmer effort to port existing code to new
APIs. In this work, we explore the extent to which we
can reduce a developer’s burden for securing current web
applications. We ﬁnd that, by focussing on the speciﬁc
environment of web applications, we can greatly simplify
the adoption of data protection. In particular, instead of
dynamically tracking which pieces of code and data a user
has touched, we bundle everything the user might touch
into an isolated environment, making enforcement (and
adoption) much simpler. While this approach may not work
in all application domains, for web applications, CLAMP
allows web developers to continue using the operating
systems, applications, and coding platforms to which they
are accustomed, with minimal changes to application code;
we changed less than 50 lines of code in our applications.
We developed a prototype using platform virtualization
(based on the Xen hypervisor [1]) to isolate system com-
ponents on the web server. A trusted User Authentication
module veriﬁes user identities and instantiates a new virtual
web server instance for each user. The database queries
issued by a particular virtual web server are constrained by
a trusted Query Restrictor to access only the data for the
user assigned to that web server.
Our experience adapting three real-world LAMP appli-
cations to use CLAMP demonstrates the beneﬁts of an
architecture designed for compatibility with web appli-
cation stacks. It
took us less than two hours to adapt
osCommerce, a popular open-source e-commerce LAMP
application used by over 14,000 stores [19], to work on
CLAMP. MyPhpMoney [3], a personal ﬁnance manager,
required comparable effort. HotCRP [10], a web application
used to manage the paper review process for academic
conferences (including IEEE S&P 2009), offered us a
1081-6011/09 $25.00 © 2009 IEEE
DOI 10.1109/SP.2009.21
154
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
‘worst-case’ test of porting complexity, due to its highly
conﬁgurable policies that determine what data (e.g., author
names) should be considered private. Despite having no
previous exposure to the software, we fully ported HotCRP
to CLAMP; the port changed six lines of code, and devel-
oping the access control policy took less than two days.
Finally, our unoptimized prototype suggests that the user-
perceived slowdown due to CLAMP’s use of virtualization
is not prohibitive (typical request latency for osCommerce
is 5-10 ms slower than native). While platform virtual-
ization increases hardware resource requirements, ongoing
research has already demonstrated signiﬁcant efﬁciency
gains [5, 13, 15]. As Moore’s law continues to reduce the
price of CPU cores and memory, CLAMP will be increas-
ingly attractive in comparison to the costs of rewriting
applications or, worse yet, dealing with a large-scale data
leak. Just as e-commerce websites currently accept the
increased overhead of SSL as a good security trade-off, the
$5.4 million price-tag for a median-sized data leak [21, 28]
may justify CLAMP’s increased hardware requirements.
2. Problem Deﬁnition
2.1. Goals
Our primary goal is to prevent a web server compromise
from leaking sensitive user data. We achieve this goal
by ensuring that sensitive data in the database is only
released to code running on behalf of a user who has
authenticated successfully and has legitimate access to
that data. We then protect this code from code operating
on behalf of other users. We aim to enable these strong
data protection guarantees for commodity web applications
while minimizing the porting effort required.
2.2. Assumptions
Vulnerable Web Server. The adversary can exploit vul-
nerabilities in the web server such that she can run arbitrary
code with root privileges.
Sensitive Data Deﬁnition. A developer of the web ser-
vice can accurately identify the sensitive data contained
within the database and accurately map the data to the
user to whom it belongs. CLAMP will only protect data
that is explicitly identiﬁed as sensitive. As we show in
Sections 4 and 6, developers already implicity identify such
information in their database schemas and application code.
Thus, making the labels explicit for CLAMP is a relatively
simple process compared with previous approaches.
User Authentication. An uncompromised web server can
accurately identify the users of the web service. CLAMP’s
design is orthogonal to the problem of user authentication,
and hence does not address other attacks (such as phishing
or cross-site scripting) that compromise user authentication
without compromising the webserver.
No Insider Attacks. While code on the webserver may
contain vulnerabilities, we assume it does not already
contain malicious code. CLAMP is not designed to prevent
attacks by insiders who have legitimate access to change
the web server’s code.
For ease of exposition, we also assume that the site pro-
tected by CLAMP employs one or more webservers that
connect to a database executing on a dedicated machine.
However, CLAMP can also be applied to more complex,
multi-tiered architectures. At each tier, a trusted component
isolates code running on behalf of different users. Trusted
components coordinate to ensure that only processes work-
ing for the same user can communicate with each other.
2.3. The Problems with LAMP
LAMP typically refers to the combination of the Linux op-
erating system, an Apache web server, a MySQL database,
and a collection of PHP or Perl scripts. In this paper, we use
LAMP to refer more generally to the dynamic manipulation
and delivery of content generated from data stored in a
database. Our model encompasses web applications using
other languages (e.g., Python and Ruby), databases (e.g.,
PostgreSQL), web servers (e.g., Microsoft’s IIS), and OSes
(e.g., Windows and BSD).
In a LAMP application, the scripts on the web server
typically make all access control decisions. These scripts
are conﬁgured to access the database using a privileged
account. As a result, the database is powerless to defend
itself from a compromised web server. The web server’s
large TCB and the tendency to spread access control logic
throughout a web application’s scripts makes it particularly
difﬁcult to verify whether the intended access restrictions
are actually enforced, even when the webserver has not
been compromised.
3. Architecture
In this work, we aim to protect the database component of
a LAMP system from compromises of the web server or
applications running on it. To overcome the weaknesses
of LAMP described in Section 2.3, we identify three
interdependent principles necessary to provide information-
ﬂow control in web applications (see Figure 1). First, we
must accurately identify the code running on behalf of
each authenticated user. Such identiﬁcation can only be
meaningful if we enforce isolation between code acting
for different users. Finally, code acting on behalf of a user
should only be authorized to view data appropriate for that
user. Below, we provide an overview of how the CLAMP
architecture achieves these principles, followed by a more
detailed examination of CLAMP’s components.
155
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
Principle
Code Identity
Code Isolation
Data Access Control
Description
Binds executing server code to a user’s identity
Isolates code running on behalf of different users
Prevents one user from retrieving another user’s data
from the database
Provided By
User Authenticator (UA)
CLAMP Isolation Layer
Query Restrictor (QR)
Figure 1. Principles for preventing data leaks. The rightmost column indicates which CLAMP component satisﬁes each principle.
3.1. CLAMP Design Overview
The primary challenge in developing the CLAMP archi-
tecture is to provide the principles from Figure 1 while
requiring a minimal amount of developer effort. We meet
this challenge using two key insights.
First, existing web applications already contain the
access-control logic necessary to authenticate users and
authorize data access; however, a vulnerability anywhere
in the web server’s TCB can compromise this security-
critical code. With CLAMP, we extract the existing user
authentication logic and bundle it into an isolated User
Authenticator (UA). We also extract the data access control
logic and bundle it into an isolated Query Restrictor (QR)
that mediates all web server access to the database. This
approach allows us to recycle existing code and logic while
simultaneously improving the security and auditability of
these critical components.
Second, much of the complexity of applying general-
purpose information-ﬂow techniques (Section 8) to web
applications arises from the fact that such systems track
information ﬂow at a ﬁne granularity. However, for most
web applications, a coarse-grained approach sufﬁces. In-
deed, rather than try to identify which particular pieces of
memory, processes, or code segments a given user is using
at any particular moment, CLAMP transparently assigns
each user to an entire virtual web server that handles
all of her interaction with the website. Thus, the virtual
web server can be treated as a black box with a single
label (the user’s identity). All activity, including database
requests, from that web server can be attributed to that
user, and hence CLAMP ensures that it only operates on
data belonging to that user. By isolating the virtual web
servers from one another, CLAMP ensures that any damage
a user does to her web server will only impact that one
user; i.e., even if the user compromises her web server, she
can retrieve only her own sensitive data from the database.
Furthermore, a legitimate user cannot be affected by the
actions of any other user, preventing a compromised virtual
web server from extracting sensitive data from another
user’s virtual web server.
3.2. CLAMP Component Details
At a high level (Figure 2), clients contact the web appli-
cation using SSL, and the Dispatcher assigns each client
to a fresh virtual web server. When a user authenticates
SSL ID
0x123
0x456
WebStack
ws-00
ws-01
WebStack
User ID
ws-00
ws-01
u-42
u-76
Query Restrictor
Database
Client
Dispatcher
Web
Stack
User Authenticator
Figure 2. CLAMP Architecture. Clients connect to the
web application via the Dispatcher, which maps each SSL
connection to a fresh virtual web server (a WebStack). The
WebStack authenticates to the User Authenticator which up-
dates the mapping of WebStack identity to user identity. The
Query Restrictor limits a WebStack’s view of the database to
only include data belonging the WebStack’s user.
to her virtual web server,
the web server presents the
user’s authentication credentials (e.g., the user name and
password) to the User Authenticator (UA). The UA veriﬁes
the credentials and labels the web server with the user’s
identity, providing code identity. The Query Restrictor
(QR) mediates the virtual web servers’ access to the
database based on the label assigned to each authenticated
virtual web server, hence providing data access control.
Finally, CLAMP provides strong isolation between the
virtual web servers and strictly controls communication
between CLAMP components. CLAMP allows each virtual
web server to communicate with the UA and the QR
but prevents the virtual web servers from communicating
directly with the database or with each other. The database
is completely isolated, except from the QR, and both the
UA and QR are isolated from the Internet.
Below, we provide additional details on each component
from Figure 2, starting with a discussion of how each
component is isolated from the rest.
3.2.1. CLAMP Isolation Layer. The Isolation Layer
isolates code acting on behalf of different users by instan-
tiating a separate virtual web server (a WebStack) for each
user and enforcing isolation between the WebStacks. It also
restricts communication between the CLAMP components
as shown in Figure 2 (and in more detail in Figure 4). Sec-
tion 6.5 describes our implementation of these restrictions.
The code isolation required for CLAMP can be provided
by mechanisms such as user-level processes, a chroot
jail, or even threads within a Java virtual machine. For
our prototype, we use platform virtualization (e.g., Xen [1]
156
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
or VMware ESX Server [29]); each WebStack operates
inside its own virtual machine. Other isolation primitives
would present different tradeoffs with respect to isolation,
performance, and compatibility.
Compared with a higher-level isolation primitive, plat-
form virtualization has several beneﬁts. First,
it makes
our prototype instantly compatible with a wide range of
existing LAMP applications. For example, the WebStack
may run Apache on top of Linux, or it could equally run
Microsoft’s IIS on top of Windows. Developers can use
existing tools, such as VMware’s Converter1 or Parallels’
Transporter,2 to create a WebStack directly from an existing
physical web server. Second, leveraging the inherent iso-
lation between code running in different VMs eliminates
the need to rewrite server code not originally designed to
strictly isolate user data. Finally, platform virtualization im-
proves security, since an attacker seeking to break per-user
isolation must not only compromise root-privileged code
on the WebStack, but must also exploit the signiﬁcantly
more limited hypervisor interface to the virtualization layer.
While using a VMM introduces additional memory and
CPU load, our benchmarks (Section 7) indicate that an
efﬁcient hypervisor coupled with VM memory sharing can
make these overheads tolerable.
3.2.2. Dispatcher. The Dispatcher allocates a fresh Web-
Stack whenever a new client connects to the server and