Chapter 2. An Overview of Mac OS X Page 3 of 80
2.2. Bootloader
The bootloader on the PowerPC version of Mac OS X is called BootX, which resides as a single file on the
file system. Open Firmware loads it from a bootable device, which could be a locally attached storage
device or the network.[5] BootX contains code that runs in the Open Firmware runtime environment. It
performs a sequence of steps to arrange for the Mac OS X kernel to run, and it eventually launches the
kernel. We will look at the structure and operation of BootX in Section 4.10.
[5] In the context of network booting, we treat the network as a bootable device.
The x86 version of Mac OS X uses a bootloader called boot.efi, which is an executable that runs in the
EFI environment. Its purpose and operation are very similar to those of BootX.
2.3. Darwin
As we saw in Chapter 1, Darwin was released as a fork of a developer release of the Rhapsody operating
system, which was an immediate precursor to Mac OS X. An important component of Darwin is the Mac OS
X kernel environment, which, together with the Darwin user environment, makes Darwin a stand-alone
operating system. Until Apple announced the transition of Mac OS X to the x86 platform in mid-2005, Mac
OS X had been a strictly PowerPC-only operating system. In contrast, Darwin has always been supported on
both the PowerPC and the x86 platforms.
2.3.1. Darwin Packages
Darwin can be best understood as a collection of open source technologies that have been integrated by
Apple to form a fundamental part of Mac OS X. It contains source code both from Apple and from third
parties, including the Open Source and Free Software communities. Apple makes Darwin available as a set
of packages, where each package is an archive containing source code of some component of Mac OS X.
Darwin packages range from trivial ones such as Liby to gigantic ones such as GCC and X11. The exact
number of packages in Darwin varies from release to release. For example, Darwin 8.6 (PowerPC)which
corresponds to Mac OS X 10.4.6contains about 350 packages. Sources for Darwin components that
originated at Apple are usually provided under the Apple Public Source License (APSL), which is a free
software license.[6] The rest of the packages are provided under their respective licenses, such as the GNU
General Public License (GPL), the BSD License, the Carnegie Mellon University License, and so on.
[6] The Free Software Foundation (FSF) classifies versions 1.0, 1.1, and 1.2 of the APSL as
nonfree software licenses, whereas version 2.0 of the APSL is classified by the FSF as a free
software license.
2.3.2. The Benefits of Darwin
Darwin represents a substantial amount of software that Apple has leveraged from a variety of sources:
NEXTSTEP and OPENSTEP, Mach, various BSD flavors (largely FreeBSD), the GNU software suite, the
XFree86 project, and so on. More importantly, Apple has integrated such "external" software rather well,
making important modifications to optimize and adapt it to Mac OS X. Even though you can configure and
control most of this software as you normally would, say, on a traditional Unix system, Mac OS X provides
simplified and mostly consistent user interfaces that usually work well by hiding the underlying complexity.
Such efficiency in adopting technology from diverse sources, and integrating it to create a synergistic effect,
is one of the great strengths of Mac OS X.
2.3.3. Darwin and Mac OS X
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 4 of 80
It is important to note that Darwin is not Mac OS X. It can be thought of as a subset of Mac OS Xessentially
the low-level foundation upon which Mac OS X is built. Darwin does not include many proprietary
components that are integral parts of Mac OS X, such as the Aqua look-and-feel, Carbon, Cocoa, OpenGL,
Quartz, and QuickTime. Consequently, it also does not support key Apple software such as the iLife suite,
iChat AV, Safari, and the Xcode development environment.
Although Darwin lacks the visual technologies of Mac OS X, it is possible to run Darwin with the X
Window System providing the graphical user interface.
2.4. The xnu Kernel
The Mac OS X kernel is called xnu. In the simplest sense, xnu could be viewed as having a Mach-based
core, a BSD-based operating system personality, and an object-oriented runtime environment for drivers[7]
and other kernel extensions. The Mach component is based on Mach 3, whereas the BSD component is
based on FreeBSD 5. A running kernel contains numerous drivers that do not reside in the xnu code base but
have their own Darwin packages. In this sense, the Mac OS X kernel is "more than" xnu. However, we will
usually not make distinctions based on packagingwe will use the term "xnu" to refer to the combination of
the base kernel (as implemented in the xnu Darwin package) and all kernel extensions. With this
understanding, we can divide the Mac OS X kernel into the following components:
[7] A driver is a specific type of kernel extension.
Machthe services layer
BSDthe primary system programming interface provider
The I/O Kitthe runtime environment for drivers
libkernan in-kernel library
libsaan in-kernel library that is normally used only during early system startup
The Platform Expertthe hardware abstraction module[8]
[8] The Platform Expert consists of support code in the base kernel and a platform-
specific kernel extension.
Kernel extensionsvarious I/O Kit families, the majority of loadable device drivers, and some non-I/O
Kit extensions
The Darwin xnu package consists of roughly a million lines of code, of which about half could be
categorized under BSD and a third under Mach. The various kernel extensions, not all of which are needed
(or loaded) on a given system, together constitute another million lines of code.
The number of kernel extensions loaded at any time on a given system is significantly less than the total
number of kernel extensions present on the system. The kextstat command can be used to list the currently
loaded kernel extensions. The /System/Library/Extensions/ directory is the standard location of kernel
extensions.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 5 of 80
Chapter 6 discusses several details of xnu. Several other chapters discuss specific areas of kernel
functionality. Let us now briefly discuss the important kernel components.
2.4.1. Mach
If the xnu kernel is the core of Mac OS X, then Mach may be considered the core of xnu. Mach provides
critical low-level services that are transparent to applications. System aspects that Mach is responsible for
include the following:
Hardware abstraction to some extent
Processor management, including symmetric multiprocessing and scheduling
Preemptive multitasking, including support for tasks and threads
Virtual memory management, including low-level paging, memory protection, sharing, and
inheritance
Low-level IPC mechanisms that are the basis for all messaging in the kernel
Real-time support that allows time-sensitive applications (e.g., media applications such as
GarageBand and iTunes) to have latency-bounded access to processor resources
Kernel debugging support[9]
[9] xnu's built-in low-level kernel debugger is called KDB (or DDB). It is implemented in
the Mach portion of the kernel, and so is KDPa remote kernel debugging protocol used by
the GNU debugger (GDB).
Console I/O
Prior to Mac OS X 10.4, xnu already supported more than 4GB of physical memory on 64-bit hardware,
although process virtual address spaces were still 32-bit. Consequently, an individual process could not
address more than 4GB of virtual memory. With Mac OS X 10.4, xnu added support for 64-bit processes on
64-bit hardware, with an upper limit of 18 exabytes[10] on process virtual address spaces.
[10] 1018 bytes.
Mach is often unequivocally equated to a microkernel, but as we saw in Chapter 1, it was not until version 3
of Mach that it was used as a true microkernel. Earlier versionsincluding Mach 2.5, which was the basis for
the Open Software Foundation's OSF/1 operating systemhad monolithic implementations in which BSD and
Mach resided in the same "kernel" address space. Even though Apple uses a Mach implementation that
derives from Mach 3, xnu does not use Mach as a traditional microkernel. Various subsystems that would be
implemented as user-space servers in a true microkernel system are part of the kernel proper in Mac OS X.
In particular, the BSD portion of xnu, the I/O Kit, and Mach, all reside in the same address space. However,
they have well-defined responsibilities that separate them in terms of function and implementation.
2.4.2. BSD
The xnu kernel contains a substantial amount of BSD-derived code, which is what we collectively refer to as
BSD in the context of Mac OS X. However, it is not the case that a well-defined BSD kernel runs within
xnu, whether as a single Mach task or otherwise. Whereas some BSD-derived portions in xnu are similar to
their original forms, other portions are quite different, since they were made to coexist with non-BSD
entities such as the I/O Kit and Mach. Consequently, one can find several instances of code of different
origins intertwined in the xnu kernel. Some aspects that BSD (or BSD-style code) is responsible for include
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 6 of 80
the following:
BSD-style process model
Signals
User IDs, permissions, and basic security policies
POSIX APIs
Asynchronous I/O APIs (AIO)
BSD-style system calls
TCP/IP stack, BSD sockets, and firewalling
Network Kernel Extensions (NKEs), a type of kernel extension for making the BSD networking
architecture fit into xnu[11]
[11] Before Mac OS X 10.4, an NKE was a specially designated kernel extension.
Beginning with 10.4, NKE functionality is accessible to a regular kernel extension
through a set of kernel programming interfaces (KPIs).
The virtual file system (VFS) layer and numerous file systems, including a file-system-independent
VFS-level journaling mechanism
System V and POSIX interprocess communication mechanisms
In-kernel cryptographic framework
A system notification mechanism based on FreeBSD's kqueue/kevent mechanism, which is a system-
wide service enabling notifications between applications, and from the kernel to applications
The fsevents file system change notification mechanism that is used by the Spotlight search
technology
Access control lists (ACLs) and the kauth authorization framework[12]
[12] Beginning with Mac OS X 10.4, the kauth framework is used for the evaluation of
ACLs. It is a general-purpose, extensible authorization framework.
Various synchronization primitives
Certain kernel functionality has a lower-level implementation in one portion of the kernel with higher-level
abstraction layers in another portion. For example, the traditional process structure (struct proc), which is
the primary kernel data structure that represents a UNIX process, is contained in the BSD portion, as is the
u-area.[13] However, strictly speaking, in Mac OS X, a BSD process does not executeit corresponds to
exactly one Mach task, which contains one or more Mach threads, and it is these threads that execute.
Consider the example of the fork() system call, which, along with variants like vfork(), is the only way to
create a new process on a UNIX system. In Mac OS X, Mach tasks and threads are created and manipulated
using Mach calls, which user programs typically do not use directly. The BSD-style fork() implementation
in the kernel uses these Mach calls to create a task and a thread. Additionally, it allocates and initializes a
process structure that is associated with the task. From the standpoint of the caller of fork(), these
operations occur atomically, with the Mach and BSD-style data structures remaining in sync. Therefore, the
BSD process structure acts as Unix "glue"[14] in Mac OS X.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 7 of 80
[13] Historically, the user area (or u-area) is the name for a data structure containing per-process
or per-thread data that is swappable.
[14] It simplifies the incorporation of BSD code that depends upon the process structure.
Similarly, BSD's unified buffer cache (UBC) has a back-end that hooks into Mach's virtual memory
subsystem.
The UBC allows the file system and the virtual memory subsystem to share kernel memory buffers. Each
process's virtual memory typically contains mappings from both physical memory and on-disk files.
Unifying the buffer cache yields a single backing store for various entities, reducing disk accesses and the
amount of "wired" memory used.
Funnels
An important synchronization abstraction in Mac OS X prior to version 10.4 is the funnel,
which has the semantics of a mutex of large scope[15] that automatically drops when the
holding thread sleeps. Funnels are used to serialize access to the BSD portion of the kernel.
Beginning with version 10.4, xnu uses finer-grained locking. However, funnels still exist for
the benefit of old code or code that is not performance critical.
[15] Such a mutex is sometimes referred to as a giant mutex.
In addition to BSD system calls, which include sysctl() and ioctl() calls, Mac OS X uses Mach system
callsor Mach trapsas necessary. There are several ways to map memory, perform block-copy operations, and
otherwise exchange information between the Mac OS X user and kernel spaces.
2.4.3. The I/O Kit
xnu has an object-oriented device driver framework called the I/O Kit, which uses a restricted subset[16] of
C++ as its programming language. C++ features that are not allowed in this subset include exceptions,
multiple inheritance, templates, complicated constructors, initialization lists, and runtime type identification
(RTTI). However, the I/O Kit does implement its own minimal RTTI system.
[16] The subset is based on Embedded C++.
The I/O Kit's implementation consists of kernel-resident C++ libraries (libkern and IOKit) and a user-space
framework (IOKit.framework). The kernel-resident libraries are available to loadable drivers (and for that
matter, the kernel). Note that the Kernel framework (Kernel.framework) encapsulates the kernel-resident
libraries in order to export their header filesthe executable code for these libraries is contained in the kernel.
IOKit.framework is a conventional framework used for writing user-space programs that communicate
with the I/O Kit.
The I/O Kit's runtime architecture is modular and layered. It provides an infrastructure for capturing,
representing, and maintaining relationships between the various hardware and software components that are
involved in I/O connections. In this manner, the I/O Kit presents abstractions of the underlying hardware to
the rest of the system. For example, the abstraction of a disk partition involves dynamic relationships
between numerous I/O Kit classes: the physical disk, the disk controller, the bus that the controller is
attached to, and so on. The device driver model provided by the I/O Kit has several useful features, such as
the following:
Extensive programming interfaces, including interfaces for applications and user-space drivers to
communicate with the I/O Kit
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 8 of 80
Numerous device families such as ATA/ATAPI, FireWire, Graphics, HID, Network, PCI, and USB
Object-oriented abstractions of devices
Plug-and-play and dynamic device management ("hot-plugging")
Power management
Preemptive multitasking, threading, symmetric multiprocessing, memory protection, and data
management
Dynamic matching and loading of drivers for multiple bus types
A database for tracking and maintaining detailed information on instantiated objects (the I/O Registry)
A database of all I/O Kit classes available on a system (the I/O Catalog)
Interfaces for applications and user-space drivers to communicate with the I/O Kit
Driver stacking
The I/O Registry can be browsed either programmatically or by using a system utility such as ioreg,
IORegistryExplorer.app (part of Apple Developer Tools), and Mr. Registry.app (part of the FireWire
SDK).
Standard devices that conform to well-defined and well-supported specifications typically do not require
custom I/O Kit drivers. For example, devices such as mice and keyboards are likely to work out of the box.
Moreover, even if a device requires a custom driver, it may need only a user-space driver, provided it uses a
FireWire or USB connection to the computer.
2.4.4. The libkern Library
The libkern library implements the runtime system for the restricted subset of C++ used by the I/O Kit's
programming model. Besides providing commonly needed services to drivers, libkern also contains classes
that are generally useful for kernel software development. In particular, it defines the OSObject class, which
is the root base class for the Mac OS X kernel. OSObject implements dynamic typing and allocation features
for supporting loadable kernel modules. The following are examples of the functionality provided by
libkern:
Dynamic allocation, construction, and destruction objects, with support for a variety of built-in object
types such as Arrays, Booleans, and Dictionaries
 Atomic operations and miscellaneous functions such as bcmp(), memcmp(), and strlen()
Functions for byte-swapping
Provisions for tracking the number of current instances for each class
Mechanisms that help alleviate the C++ fragile base-class problem
The Fragile Base-Class Problem
The fragile base-class problem occurs when modifications to a nonleaf class "break" a derived
class. A nonleaf class is one that is a base class of at least one other class. The said breakage
may occur because the derived class is relyingexplicitly or implicitlyon the knowledge of
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 9 of 80
certain characteristics of the nonleaf class. Examples of such characteristics include the size of
the base class's virtual table (vtable), offsets in the vtable, offsets to class-protected data, and
offsets to public data.
libkern provides ways to create reserved slots for class data members and virtual functions to
absorb future addition of these entitiesup to a limit.
2.4.5. The libsa Library
libsa is an in-kernel support libraryessentially an in-kernel linkerused during early system startup for loading
kernel extensions. The "sa" in its name is a vestigial reference to its being a library that provides functions
for use by stand-alone applicationsin this case, the kernel.
Stand-alone libraries exist on other operating systemsoften with the name libstandto provide minimal
runtime environments.
Mac OS X kernel extensions are normally loaded on demand through the kexTD user-space daemon
(/usr/libexec/kextd). During early stages of bootstrapping, kextd is not yet available. libsa provides a
subset of kextd's capabilities to the kernel. Examples of specific functionality implemented by libsa for
loading, linking, and recording kernel extension object files include the following:
Simple memory allocation
Binary searching