# The Multi-Principal OS Construction of the Gazelle Web Browser

**Authors:**
- Helen J. Wang∗
- Chris Grier†
- Alexander Moshchuk‡
- Samuel T. King†
- Piali Choudhury∗
- Herman Venter∗

**Affiliations:**
- ∗Microsoft Research
- ‡University of Washington
- †University of Illinois at Urbana-Champaign

**Contact:**
- {helenw, pialic, hermanv}@microsoft.com
- {grier, kingst}@uiuc.edu
- PI:EMAIL

## Abstract

Web browsers have evolved from simple tools for viewing static web content to complex multi-principal operating environments where resources are shared among mutually distrusting web site principals. Despite this evolution, no existing browser, including recent architectures like Internet Explorer 8, Google Chrome, and Opera, has a true multi-principal operating system (OS) construction that gives the browser kernel exclusive control over managing the protection and sharing of all system resources.

In this paper, we introduce Gazelle, a secure web browser designed as a multi-principal OS. Gazelle's browser kernel is an OS that exclusively manages resource protection and sharing across web site principals. This construction exposes intricate design issues, such as cross-protection-domain display and event protection, which previous work has not identified. We elaborate on these issues and provide comprehensive solutions.

Our prototype implementation and evaluation indicate that it is feasible to transform an existing browser into a multi-principal OS, achieving significantly stronger security and robustness with acceptable performance.

## 1. Introduction

Web browsers have evolved into multi-principal operating environments where each principal is a web site [43]. Similar to a multi-principal OS, recent proposals [12, 13, 23, 43, 46] and browsers like Internet Explorer 8 [34] and Firefox 3 [16] support programmer abstractions for protection (e.g., `iframe` in addition to `sandbox`) and cross-principal communication (e.g., `PostMessage` [24, 43]). However, no existing browser, including new architectures like Internet Explorer 8 [25], Google Chrome [37], and Opera [21], has a multi-principal OS construction that gives the browser kernel exclusive control over managing the protection and fair sharing of all system resources among browser principals.

In this paper, we present Gazelle, a secure web browser constructed as a multi-principal OS. Gazelle's browser kernel provides exclusive cross-principal protection and fair sharing of all system resources. In this paper, we focus on resource protection in Gazelle.

Gazelle's browser kernel runs in a separate protection domain (an OS process in our implementation), interacts directly with the underlying OS, and exposes a set of system calls for web site principals. We use the same web site principal as defined by the same-origin policy (SOP), labeled by a web site's origin, which is the triple of `<protocol, host, port>`. In this paper, "principal" and "origin" are used interchangeably. Unlike previous browsers, Gazelle places web site principals into separate protection domains, completely segregating their access to all resources. Principals can communicate with one another only through the browser kernel using inter-process communication. Our browser kernel offers the same protection to plugin content as to standard web content, unlike most existing browsers except Opera.

This multi-principal OS construction brings significant security and reliability benefits: the compromise or failure of a principal affects only that principal, leaving other principals and the browser kernel unaffected.

Although our architecture may seem like a straightforward application of multi-principal OS principles to the browser setting, it exposes intricate problems, such as display protection and resource allocation in the face of cross-principal web service composition. We will detail our solutions to the former and leave the latter as future work.

We have built an Internet Explorer-based prototype that demonstrates Gazelle's multi-principal OS architecture while leveraging existing capabilities for parsing, DOM management, and JavaScript interpretation. Our prototype experience indicates that it is feasible to transform an existing browser into a multi-principal OS.

With our prototype, we successfully browsed 19 out of the top 20 Alexa-reported popular sites [5] that we tested. The performance of our prototype is acceptable, with a significant portion of the overhead coming from IE instrumentation, which can be eliminated in a production implementation.

We expect that the Gazelle architecture can be made fully backward compatible with today's web. Nevertheless, it is interesting to investigate the compatibility cost of eliminating insecure policies in today's browsers. We discuss this based on a preliminary analysis in Section 9.

For the rest of the paper, we first give an in-depth comparison with related browser architectures in Section 2. We then describe Gazelle's security model in Section 3. In Section 4, we present our architecture, its design rationale, and how we handle the subtle issue of legacy protection for cross-origin script sources. In Section 5, we elaborate on the problem statement and design for cross-principal, cross-process display protection. We provide a security analysis, including a vulnerability study, in Section 6. We describe our implementation in Section 7 and measure the performance of our prototype in Section 8. We discuss the trade-offs between compatibility and security for a few browser policies in Section 9. Finally, we conclude and address future work in Section 10.

## 2. Related Work

In this section, we discuss related browser architectures and compare them with Gazelle.

### 2.1 Google Chrome and Internet Explorer 8

Reis et al. [37] detailed the various process models supported by Google Chrome: monolithic process, process-per-browsing-instance, process-per-site-instance, and process-per-site. A browsing instance contains all interconnected windows, including tabs, frames, and subframes, regardless of their origin. A site instance is a group of same-site pages within a browsing instance. A site is defined as a set of SOP origins that share a registry-controlled domain name. For example, `attackerAd.socialnet.com`, `alice.profiles.socialnet.com`, and `socialnet.com` share the same registry-controlled domain name `socialnet.com` and are considered the same site or principal by Chrome. Chrome uses the process-per-site-instance model by default. Reis et al. [37] noted that Chrome's current implementation does not support strict site isolation in the process-per-site-instance and process-per-site models: embedded principals, such as a nested `iframe` sourced at a different origin from the parent page, are placed in the same process as the parent page.

The monolithic and process-per-browsing-instance models in Chrome do not provide memory or other resource protection across multiple principals in a single process or browser instance. The process-per-site model does not provide failure containment across site instances [37]. Chrome's process-per-site-instance model is closest to Gazelle's two processes-per-principal-instance model, but with several crucial differences:
1. Chrome's principal is a site, while Gazelle's principal is the same as the SOP principal.
2. A web site principal and its embedded principals co-exist in the same process in Chrome, whereas Gazelle places them into separate protection domains. This led us to new research challenges, including cross-principal display protection (Section 5).
3. Plugin content from different principals or sites shares a plugin process in Chrome but is placed into separate protection domains in Gazelle.
4. Chrome relies on its rendering processes to enforce the same-origin policy among principals that co-exist in the same process. These differences indicate that in Chrome, cross-principal (or -site) protection takes place in its rendering processes and plugin process, in addition to its browser kernel. In contrast, Gazelle's browser kernel functions as an OS, managing cross-principal protection on all resources, including display.

Internet Explorer 8 [25] uses OS processes to isolate tabs from one another. This granularity is insufficient since a user may browse multiple mutually distrusting sites in a single tab, and a web page may contain an `iframe` with content from an untrusted site (e.g., ads).

Fundamentally, Chrome and Internet Explorer 8 have different goals from Gazelle. Their use of multiple processes is for failure containment across the user's browsing sessions rather than for security. Their security goal is to protect the host machine from the browser and the web, achieved by process sandboxing [9]. Chrome and Internet Explorer 8 have achieved significant milestones in the evolution of browser architecture design. As more data and functionality migrate to the web, it is critical for browser designers to think of browsers as operating systems and protect web site principals from one another in addition to the host machine. This is Gazelle's goal.

### 2.2 Experimental Browsers

The Opera web browser [21] uses processes to isolate browser components (i.e., HTML engine, JavaScript interpreter, rendering engine) as well as pages of the same origin. In Opera, intimate interactions between browser components, such as the JavaScript interpreter and HTML engine, must use IPC and go through its browser kernel. The additional IPC cost does not add much benefit: isolating browser components within an instance of a web page provides no additional security protection. Furthermore, besides plugins, basic browser components are fate-shared in web page rendering: the failure of any one component results in most web pages not functioning properly. Therefore, process isolation across these components does not provide any failure containment benefits either. Lastly, Opera's browser kernel does not provide all the cross-principal protection needed as an OS because it delegates display protection to its processes.

Tahoma [11] uses virtual machines to completely isolate (its own definition of) web applications, disallowing any communications between the VMs. A web application is specified in a manifest file provided to the virtual machine manager and typically contains a suite of web sites of possibly different domains. Consequently, Tahoma does not provide protection to existing browser principals. In contrast, Gazelle's browser kernel protects browser principals first-hand.

The Building a Secure Web Browser project [27, 28] uses SubOS processes to isolate content downloading, display, and browser instances. SubOS processes are similar to Unix processes, except that each process has a SubOS ID with OS support for isolation between objects with different SubOS IDs. SubOS instantiates a browser instance with a different SubOS process ID for each URL. This means that the principal in SubOS is labeled with the URL of a page (protocol, host name plus path) rather than the SOP origin as in Gazelle. Nevertheless, SubOS does not handle embedded principals, unlike Gazelle. Therefore, they also do not encounter the cross-principal display-sharing issue, which we tackle in depth. SubOS's principal model would also require all cross-page interactions that are common within a SOP origin to go through IPC, incurring significant performance costs for many web sites.

## 3. Security Model

### 3.1 Background: Security Model in Existing Browsers

Today's browsers have inconsistent access and protection models for various resources, presenting significant hurdles for web programmers to build robust web services. In this section, we provide a brief background on the relevant security policies in existing browsers. Michal Zalewski [48] gives an excellent and perhaps the most complete description of existing browsers' security models to date.

#### Script
The same-origin policy (SOP) [39] is the central security policy in today's browsers. SOP governs how scripts access the HTML document tree and remote store. SOP defines the origin as the triple of `<protocol, host, port>`. SOP mandates that two documents from different origins cannot access each other's HTML documents using the Document Object Model (DOM), which is the platform- and language-neutral interface that allows scripts to dynamically access and update the content, structure, and style of a document [14]. A script can access its document origin's remote data store using the `XMLHttpRequest` object, which issues an asynchronous HTTP request to the remote server [45]. `XMLHttpRequest` is the cornerstone of AJAX programming. SOP allows a script to issue an `XMLHttpRequest` only to its enclosing page's origin. A script executes as the principal of its enclosing page, though its source code is not readable in a cross-origin fashion.

For example, an `iframe` with source `http://a.com` cannot access any HTML DOM elements from another `iframe` with source `http://b.com` and vice versa. Scripts hosted at `http://a.com` can issue `XMLHttpRequests` to only `a.com`. Furthermore, `http://a.com` and `https://a.com` are different origins due to the protocol difference.

#### Cookies
For cookie access, the principal is the host name and path, but without the protocol [19, 32]. For example, if the page `a.com/dir/1.html` creates a cookie, that cookie is accessible to `a.com/dir/2.html` and other pages from that directory and its subdirectories but not to `a.com/`. Additionally, `https://a.com/` and `http://a.com/` share the cookie store unless a cookie is marked with a "secure" flag. Non-HTTPS sites may still set secure cookies in some implementations, just not read them back [48]. A web programmer can make cookie access less restrictive by setting a cookie's domain attribute to a postfix domain or the path name to be a prefix path. The browser ensures that a site can only set its own cookie and that a cookie is attached only to HTTP requests to that site.

The path-based security policy for cookies does not play well with SOP for scripts: scripts can gain access to all cookies belonging to a domain despite path restrictions.

#### Plugins
Current major browsers do not enforce any security on plugins and grant plugins direct access to the local operating system. The plugin content is subject to the security policies implemented in the plugin software rather than the browser.

### 3.2 Gazelle's Security Model

Gazelle's architecture is centered around protecting principals from one another by separating their respective resources into OS-enforced protection domains. Any sharing between two different principals must be explicit using cross-principal communication (or IPC) mediated by the browser kernel.

We use the same principal as the SOP, namely, the triple of `<protocol, host, port>`. While it is tempting to have a more fine-grained principal, we need to be concerned with co-existing with current browsers [29, 43]: the protection boundary of a more fine-grained principal, such as a path-based principal, would break down in existing browsers. It is unlikely that web programmers would write very different versions of the same service to accommodate different browsers; instead, they would forego the more fine-grained principal and have a single code base.

The resources that need to be protected across principals [43] include memory (such as DOM objects and script objects), persistent state (such as cookies), display, and network communications.

We extend the same principal model to all content types except scripts and style sheets (Section 4): the elements created by `img`, `audio`, `video`, and certain types of `object` are treated the same as an `iframe`: the origin of the included content labels the principal of the content. This means that we enforce SOP on plugin content. This is consistent with the existing movement in popular plugins like Adobe Flash Player [20]. Starting with Flash 7, Adobe Flash Player uses the exact domain match (as in SOP) rather than the earlier "superdomain" match (where `www.adobe.com` and `store.adobe.com` have the same origin). Starting with Flash 9, the default ActionScript behavior only allows access to same-origin HTML content, unlike the earlier default that allowed full cross-origin interactions [1].

Gazelle's architecture naturally yields a security policy that partitions all system resources across the SOP principals, ensuring that each principal operates in a secure and isolated environment.