        '''
        res = '1c3de59d2f68788cc792e0eb7d604710'
        extend = '}'
        # print(reverse_hex('0x' + res))
        for i in range(45):
            hex_bit = hex(i*8)
            t = url_append(hex_bit)
            print('[%d]' % i,md5_lea(extend,res,i))
            # print('{}%80{}{}{}'.format('X'*i, (55-i)*'%00',t, extend) )
            print('%80{}{}{}'.format((55-i)*'%00',t, extend) )
            # print('{}{}'.format( hex(i), (18-len(hex(i)))*'0') )
        # from urllib.parse import unquote
        # print(md5_lea('kingkk','571580b26c65f306376d4f64e53cb5c7',10))
最终输出为
    [0] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00}
    [1] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%08%00%00%00%00%00%00%00}
    [2] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%10%00%00%00%00%00%00%00}
    [3] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%18%00%00%00%00%00%00%00}
    [4] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%20%00%00%00%00%00%00%00}
    [5] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%28%00%00%00%00%00%00%00}
    [6] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%30%00%00%00%00%00%00%00}
    [7] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%38%00%00%00%00%00%00%00}
    [8] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%40%00%00%00%00%00%00%00}
    [9] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%48%00%00%00%00%00%00%00}
    [10] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%50%00%00%00%00%00%00%00}
    [11] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%58%00%00%00%00%00%00%00}
    [12] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%60%00%00%00%00%00%00%00}
    [13] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%68%00%00%00%00%00%00%00}
    [14] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%70%00%00%00%00%00%00%00}
    [15] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%78%00%00%00%00%00%00%00}
    [16] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80%00%00%00%00%00%00%00}
    [17] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%88%00%00%00%00%00%00%00}
    [18] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%90%00%00%00%00%00%00%00}
    [19] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%98%00%00%00%00%00%00%00}
    [20] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%a0%00%00%00%00%00%00%00}
    [21] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%a8%00%00%00%00%00%00%00}
    [22] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%b0%00%00%00%00%00%00%00}
    [23] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%b8%00%00%00%00%00%00%00}
    [24] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c0%00%00%00%00%00%00%00}
    [25] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00}
    [26] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%d0%00%00%00%00%00%00%00}
    [27] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%d8%00%00%00%00%00%00%00}
    [28] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%e0%00%00%00%00%00%00%00}
    [29] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%e8%00%00%00%00%00%00%00}
    [30] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%f0%00%00%00%00%00%00%00}
    [31] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%f8%00%00%00%00%00%00%00}
    [32] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%01%00%00%00%00%00%00}
    [33] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%08%01%00%00%00%00%00%00}
    [34] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%10%01%00%00%00%00%00%00}
    [35] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%18%01%00%00%00%00%00%00}
    [36] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%20%01%00%00%00%00%00%00}
    [37] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%28%01%00%00%00%00%00%00}
    [38] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%30%01%00%00%00%00%00%00}
    [39] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%38%01%00%00%00%00%00%00}
    [40] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%40%01%00%00%00%00%00%00}
    [41] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%48%01%00%00%00%00%00%00}
    [42] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%00%50%01%00%00%00%00%00%00}
    [43] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%00%58%01%00%00%00%00%00%00}
    [44] 86f46813eda13928aaa468725598c464
    %80%00%00%00%00%00%00%00%00%00%00%00%60%01%00%00%00%00%00%00}
因为是secret+data为42位，所以最终payload为：
    ?md5=d9671633e3723203bc2a1479c8412307&i=-1&s=}yusa%80%00%00%00%00%00%00%00%00%00%00%00%00%00%50%01%00%00%00%00%00%00a
得到flag  
## 题外话
这个题目经过了修改之后直接输出了flag，原题不是这样的  
贴出来原题代码
    <?php
    error_reporting(0);
    $flag=getenv("DASFLAG");
    if(isset($_GET["md5"]) && isset($_GET["i"]) && isset($_GET["s"])){
        $fl4g = substr_replace($flag, $_GET["s"], $_GET["i"], 1);
        echo $_GET["md5"] === md5($fl4g);
    }else{
        highlight_file(__FILE__);
        echo md5($flag."yusa");
    }
这里只会提示正确还是错误，也就是需要去进行盲注出来，原题secret+data为44位，也就是说需要去爆44位的数据，手工工作量很大。本人脚本能力有限，这里暂不给出脚本了，之后写出来了再补。
## 使用工具进行攻击
这里推荐一款工具-[hashpump](https://www.cnblogs.com/pcat/p/5478509.html)  
速度很快，生成payload  
# 危害性
说了半天，具体有什么危害呢？  
比如说现在有一个登录的界面，进行的判断是加密后的密码和MD5(passwd+data)进行比较，很明显是在校验中加盐了，如果我们要绕过的话，就可以利用此攻击方式。  
但是在实际中，因为我们不知道secret长度，所以需要对其进行猜测，也就是说，对于长度不正确以及登录失败的信息是不一样的，那么就可以进行判断，利用脚本跑出来他的secret的长度，从而进一步去绕过这个检测机制，成功登录系统。所以说，该问题还是很严重的。  
实际上对以下算法都能实现hash长度扩展攻击，包括md4,md5,ripemd-160,sha-0,sha-1,sha-256,sha-512等
# 如何进行防御
既然这个问题危害很大，那么怎么进行防御呢？
  1. 增加hash算法的负责度，也就是说在MD5加密之后接着进行一次MD5加密
  2. 和上类似，加密方式采用HMAC方式，即hash(secret+hash(secret+data))，该方法最早在1996年发表，之后几乎被加到几乎每一种编程语言的标准函数库中
# 尾言
本次解释中，搜索了一些网上资料以及一些师傅的博客文章汇总了自己的理解才算是写了一篇水平不怎么样的文章，但总的来说还算满意，唯一不足的本人脚本能力实在有限，涉及的脚本暂时没法给出，只能日后补回来了。