against low-rate tcp attacks: Dynamic detection and
protection. In Proceedings of International Conference
on Network Protocols (2004), IEEE, pp. 196–205.
[59] UJCICH, B. E., THAKORE, U., AND SANDERS,
W. H. Attain: An attack injection framework for
software-deﬁned networking. In Proceedings of Inter-
national Conference on Dependable Systems and Net-
works (2017), IEEE, pp. 567–578.
[60] WANG, H., XU, L., AND GU, G. Floodguard: A dos
attack prevention extension in software-deﬁned net-
works.
In Proceedings of International Conference
on Dependable Systems and Networks (2015), IEEE,
pp. 239–250.
[61] WANG, J., WEN, R., LI, J., YAN, F., ZHAO, B., AND
YU, F. Detecting and mitigating target link-ﬂooding
attacks using sdn. IEEE Transactions on Dependable
and Secure Computing, 1 (2018), 1–1.
[62] WANG, L., LI, Q., JIANG, Y., JIA, X., AND WU,
J. Woodpecker: Detecting and mitigating link-ﬂooding
attacks via sdn. Computer Networks 147 (2018), 1–13.
34    28th USENIX Security Symposium
USENIX Association
[63] WEN, X., YANG, B., CHEN, Y., HU, C., WANG,
Y., LIU, B., AND CHEN, X. Sdnshield: Reconcili-
ating conﬁgurable application permissions for sdn app
markets.
In Proceedings of International Conference
on Dependable Systems and Networks (2016), IEEE,
pp. 121–132.
[64] XIANG, Y., LI, K., AND ZHOU, W. Low-rate ddos at-
tacks detection and traceback by using new information
metrics. IEEE Transactions on Information Forensics
and Security 6, 2 (2011), 426–437.
[65] XU, L., HUANG, J., HONG, S., ZHANG, J., AND GU,
G. Attacking the brain: Races in the sdn control plane.
In USENIX Security Symposium (2017), USENIX As-
sociation, pp. 451–468.
[66] ZHANG, Y., MAO, Z. M., AND WANG, J. Low-rate
tcp-targeted dos attack disrupts internet routing. In Pro-
ceedings of Network and Distributed System Security
Symposium (2007), Citeseer.
[67] ZHENG, J., LI, Q., GU, G., CAO, J., YAU, D. K.,
AND WU, J. Realtime ddos defense using cots sdn
switches via adaptive correlation analysis. IEEE Trans-
actions on Information Forensics and Security 13, 7
(2018), 1838–1853.
A The Algorithm of Adversarial Path Recon-
naissance
Algorithm 1 shows the pseudo-code of improved adversarial
path reconnaissance, which can be performed by any host in
the network. The input η is the number of repeated recon-
naissances for each data path and is also the number of data
in each group used in the t-test. The input twait is the wait-
ing time for rules to expire. The input tmax is the maximal
waiting time for each timing packet to get a response in the
target network, and α is the signiﬁcance level used in the t-
test. Here, twait must be larger than the timeouts of ﬂow rules
and tmax must be large enough so that most RTTs in the net-
work do not exceed it. Step 1 gets all hosts in the network
in order to explore the data paths between the compromised
host and them. Step 2 initializes the maximal number of data
paths that can be explored within two timeout values. The
main loop is from Step 4 to Step 29. In each loop iteration,
the algorithm tests kmax data paths. Step 5 to Step 20 collects
2η latencies of the crossed control paths for each of the kmax
data paths. The delay of crossed control paths when the test-
ing stream is not transmitted is obtained in Step 7 to Step 10.
Step 13 to Step 18 obtain the delay while transmitting the
testing stream. Step 11 and Step 19 both make the program
paused for enough time so that old rules can expire before
conducting the next reconnaissance. After obtaining all the
latencies of possible crossed control paths for the kmax data
Algorithm 1 Adversarial Path Reconnaissance
Input: η, twait , tmax, α
Output: h;
1: H ← ScanAllHosts()
2: kmax ← twait /(2·tmax)
3: i ← 0
4: while i < |H| do
for j = 0 → η − 1 do
tstart ← time()
for k = i → min(i + kmax,|H|) do
d1 ← sendTimingStreamTo(H[k])
δ1[k].add(d1)
end for
sleep(twait − (time()−tstart ))
tstart ← time()
for k = i → min(i + kmax,|H|) do
startSendTestingStreamTo(H[k])
d2 ← sendTimingStreamTo(H[k])
stopSendTestingStreamTo(H[k])
δ2[k].add(d2)
end for
sleep(twait − (time()−tstart ))
end for
for k = i → min(i + kmax,|H|) do
if
sum(δ2[k]) then
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
tTest(δ1[k],δ2[k]) < α and sum(δ1[k]) <
/* The data path from the compromised host to
H[k] crosses with control paths. */
out put(H[k])
exit()
24:
25:
26:
27:
28:
29: end while
end if
end for
i ← i + kmax
paths, the t-test is applied to determine whether a data path
crosses with control paths in Step 21 to Step 27. If the group
of latencies with testing stream is dramatically higher than
the other group, the algorithm outputs the destination host
of the data path and terminates. Otherwise, the algorithm
prepares for the next round of iteration in Step 28.
In our experiments on a real SDN testbed, twait is set as
30s which is larger than the default values of timeouts in the
Floodlight controller in order to leave enough time for rules
to be expired, and tmax is set to 1s for each timing packet to
get a response. The settings of η and α are varied.
B Defense Against the CrossPath Attack
We explore two defense schemes to mitigate the CrossPath
attack. The ﬁrst is delivering control trafﬁc with high pri-
ority. Hence, any malicious data trafﬁc cannot disturb the
delivery of control trafﬁc. Such a defense scheme can be en-
forced with Priority Queue (PQ) or Weighted Round Robin
USENIX Association
28th USENIX Security Symposium    35
Table 1: The Settings for Flow Rules to Enforce Defense Strategies.
Defense Strategy
Control trafﬁc delivery with high priority 1
Proactive bandwidth reservation for control trafﬁc 2
1 It requires SDN switches to support PQ or WRR queuing mechanism.
2 It is used when SDN switches fail to enable PQ or WRR mechanism.
Rule
#1
#2
#1
Match
Actions
control ﬂows OutPort(x), . . . , SetQueue(ID=highPriQueue)
data ﬂows
OutPort(x), . . . , SetQueue(ID=lowPriQueue)
data ﬂows
OutPort(x), . . . , SetMeter(ID=RateLimit)
)
s
p
p
(
t
u
p
h
g
u
o
r
h
T
 1200
 1000
 800
 600
 400
 200
 0
 0
PQ
WRR
Without Defense
 1
 0.8
F
D
C
 0.6
 0.4
PQ
WRR
Without Defense
 0.2
 0
 5
 10
Time (s)
 15
 20
 10
 100
 1000
Delay (ms)
 10000
(a) Throughput of Control Packets
with Queuing Policies.
(b) CDF of Delays of Control Pack-
ets with Queuing Policies.
Figure 18: Evaluation on the defense scheme of delivering
control trafﬁc with high priority via PQ or WRR mechanism.
)
s
p
p
(
t
u
p
h
g
u
o
r
h
T
 1200
 1000
 800
 600
 400
 200
 0
 0
 1
 0.8
F
D
C
 0.6
 0.4
 0.2
 0
 20
 10
BW 4 Mbps
BW 8 Mbps
BW 16 Mbps
BW 32 Mbps
Without Defense
 10
 15
Time (s)
 5
BW 4 Mbps
BW 8 Mbps
BW 16 Mbps
BW 32 Mbps
Without Defense
 10000
 100
 1000
Delay (ms)
(a) Throughput of Control Packets
with Bandwidth Reservation.
(b) CDF of Delays of Control Pack-
ets with Bandwidth Reservation.
Figure 19: Evaluation on protecting control trafﬁc with the
defense scheme of proactive bandwidth (BW) reservation.
(WRR) 3 scheduling mechanism in SDN switches. Specif-
ically, network administrators can inform controllers to add
SetQueue actions to ﬂow rules associated with switch ports
in the control paths. Packets matching a ﬂow rule with the
SetQueue action will be directed to a queue with an ID set
by the action. As shown in Table 1, we can set a ﬂow rule
matching control ﬂows with a high priority queue and set a
ﬂow rule matching data ﬂows with a low priority queue. In
this way, the control trafﬁc will always be forwarded in ad-
vance with no disturbances of other trafﬁc.
We note that some switches in the market do not support
PQ or WRR mechanisms. However, we can still mitigate
the CrossPath attack by proactive bandwidth reservation for
control trafﬁc with OpenFlow meter table. A meter entry be-
longing to a meter table associates with various ﬂow rules so
that it can measure the total rate of packets matching the ﬂow
rules and enforce rate limiting. We can assign each ﬂow rule
3By conﬁguring different weighted values to queues with WRR, similar
results like PQ can be achieved.
matched by the data trafﬁc a meter entry with the SetMeter
action (see Table 1). Therefore, by limiting the maximal rate
of the total data trafﬁc, we reserve proprietary bandwidth for
control trafﬁc.
We evaluate above two defense schemes with AS4610-
54T commercial hardware SDN switches in our testbed. For
simplicity, we trigger 1,000 new ﬂows per second to gener-
ate the control trafﬁc and generate the attack trafﬁc to dis-
rupt the transmission of control packets. Figure 18a and 18b
shows that defense schemes with PQ or WRR mechanism
effectively protect the control trafﬁc. The throughput always
reaches approximate 1,000 pps over time even with the at-
tack. The delays of more than 99% of the control packets
are less than 10 ms with either of the two queuing mecha-
nisms. Figure 19a and 19b show that proactive bandwidth
reservation with meter table can also protect control trafﬁc.
The larger the reserved bandwidth is, the higher the through-
put is, and also the better the delay is. In our experiments,
16 Mbps reserved bandwidth is enough to ensure forwarding
control trafﬁc. Note that compared with the queuing mecha-
nism, it requires proactively reserving enough bandwidth for
control trafﬁc. In a large network, it may require reserving
bandwidth in the order of several Gbps.
Table 2: SDN Switches with PQ or WRR Support.
Brand
Pica8
Cisco
Brocade
Model
All switches loaded with PicOS
Catalyst 4500 Series Switches
NetIron XMR Series, MLX
Series, CES 2000, and CER
2000 Series
Dell
S4810, S4820T, S6000, Z9000,
Huawei
Z9500, and MXL switches
CloudEngine 8800 Series
Queue Support
√
WRR
×
√
√
PQ
√
×
×
√
√
√
C SDN Switches with Queue Support
We investigate mainstream SDN switches and ﬁnd that many
switches support PQ or WRR mechanism. Table 2 shows the
switches with PQ or WRR support.
36    28th USENIX Security Symposium
USENIX Association