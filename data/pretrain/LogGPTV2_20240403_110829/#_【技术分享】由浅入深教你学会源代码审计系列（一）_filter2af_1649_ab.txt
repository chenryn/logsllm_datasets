        if(!file_exists("install/install_lock.txt")){
            header("Location:install/index.php");
            exit();
        }
        if(is_mobile_request()){
            header("Location:mobile.php");
        }
        require(BROPHP.'/brophp.php'); //加载框架的入口文件
        function is_mobile_request()  
        {  
            .......................
        }
    ?>
该文件开始包含了一个 temp.inc.php ，经分析，该文件内就是定义了一些变量，对我们而言并没有什么用，接下来又定义了一些常量，之后
require(BROPHP.'/brophp.php') 包含了一个文件，看注释可知这个文件应该就是一个比较关键的文件了，而且， index.php
文件后面已经没有什么内容了，所以调度整个程序的重担应该就在 brophp.php 文件内了，该文件内的一些关键代码：
    /包含框架中的函数库文件
        include BROPHP_PATH.'commons/functions.inc.php';
        //包含全局的函数库文件，用户可以自己定义函数在这个文件中
        $funfile=PROJECT_PATH."commons/functions.inc.php";
        if(file_exists($funfile))
            include $funfile;
        //设置包含目录（类所在的全部目录）,  PATH_SEPARATOR 分隔符号 Linux(:) Windows(;)
        $include_path=get_include_path(); //原基目录
        $include_path.=PATH_SEPARATOR.BROPHP_PATH."bases/";   //框架中基类所在的目录
        $include_path.=PATH_SEPARATOR.BROPHP_PATH."classes/" ;//框架中扩展类的目录
        $include_path.=PATH_SEPARATOR.BROPHP_PATH."libs/" ;   //模板Smarty所在的目录
        $include_path.=PATH_SEPARATOR.PROJECT_PATH."classes/";//项目中用的到的工具类
        $controlerpath=PROJECT_PATH."runtime/controls/".TMPPATH;  //生成控制器所在的路径
        $include_path.=PATH_SEPARATOR.$controlerpath; //当前应用的控制类所在的目录 
        //设置include包含文件所在的所有目录    
        set_include_path($include_path);
        //自动加载类     
        function __autoload($className){
            if($className=="memcache"){//如果是系统的Memcache类则不包含
                return;
            }else if($className=="Smarty"){//如果类名是Smarty类，则直接包含
                include "Smarty.class.php";
            }else{ //如果是其他类，将类名转为小写
                include strtolower($className).".class.php";    
            }
            Debug::addmsg(" $className 类", 1);  //在debug中显示自动包含的类
        }
这里首先包含了 functions.inc.php 文件，该文件内部是一些全局函数，之后设置了许多的目录，
使用set_include_path($include_path) ，将这些目录下的文件全部包含进来，逐个点进去看看，发现了定义路由的文件是
brophp/bases/prourl.class.php 看看文件内容：
    delete($_POST['id'])){
                        $this->clear_cache();
                        $this->success("删除成功!", 1, "acate/index");
                    } else {
                        $this->error("删除失败!", 1, "acate/index");
                    }
                } else {
                    if($acate->delete($_GET['id'])){
                        $this->clear_cache();
                        $this->success("删除成功!", 1, "acate/index");
                    } else {
                        $this->error("删除失败!", 1, "acate/index");
                    }
                }
            }
这里直接将 $_POST['id'] 传入了 delete 函数，我们来看看该函数的具体实现，
    function delete(){
                $where="";
                $data=array();
                $args=func_get_args(); //获取参数
                if(count($args)>0){
                    $where = $this->comWhere($args); //传参 构造 where 语句
                    $data=$where["data"];
                    $where= $where["where"];
                }else if($this->sql["where"] != ""){
                    $where=$this->comWhere($this->sql["where"]);
                    $data=$where["data"];
                    $where=$where["where"];
                }
                $order = $this->sql["order"] != "" ?  " ORDER BY {$this->sql["order"][0]}" : "";
                $limit = $this->sql["limit"] != "" ? $this->comLimit($this->sql["limit"]) : "";
                if($where=="" && $limit==""){
                    $where=" where {$this->fieldList["pri"]}=''";
                }
                $sql="DELETE FROM {$this->tabName}{$where}{$order}{$limit}";
                return $this->query($sql, __METHOD__,$data);
            }
在进入 comWhere 函数，漏洞关键代码如下：
    private function comWhere($args){
                $where=" WHERE ";
                $data=array();
                if(empty($args))
                    return array("where"=>"", "data"=>$data);
                foreach($args as $option) {
                    if(empty($option)){
                        $where = ''; //条件为空，返回空字符串；如'',0,false 返回： '' //5
                        continue;
                    }