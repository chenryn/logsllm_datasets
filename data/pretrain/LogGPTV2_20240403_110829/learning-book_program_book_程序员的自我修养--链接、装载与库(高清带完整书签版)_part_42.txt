的，从第四项开始才是真正存放导入函数地址的地方。而第四项刚好是0x000015c8+4*3=
0x000015d4，即“gmon_start_"，第五项是“printf"，第六项是“sleep”，第七项是
 - _  _x。
Address of .dynamic
Ow000015c8
Ox000015cc
.text
"d_runtime_resolve()
0x000015d0
"yes"uowo"
0x000015d4
printf
BPS10000X0
sleep
0x000150
0x000015dc
.dynamic
cxa_finalize
-got
-got.plt
.data
Lib.so
图 7-10 Lib.so S.got.plt 结构
当动态链接器需要进行重定位时，它先查找“printr的地址，“printr*位于libc-2.6.1.s0.
假设链接器在全局符号表里面找到“printr”的地址为0x08801234，那么链接器就会将这个
实现了动态链接最关键的一个步骤。
的重定位，它跟R_386_JUMP_SLOT模·样，在这里不再详细介绍了，有兴趣的读者可
程序员的自我修养一链接、装载与库
---
## Page 233
210
第7章动态链接
稍微麻烦一点的是R_386_RELATIVE类型的重定位入口，这种类型的重定位实际上就
是基址重置（Rebasing），我们在前面已经分析过，共享对象的数据段是没有办法做到地址
无关的，它可能会包含绝对地址的引用，对于这种绝对地址的引用，我们必须在装载时将其
重定位。比如前面例子中，有一个全局指针变量被初始化为一个静态变量的地址：
static int a;
static int* p = &a;
在编译时，共享对象的地址是从0开始的，我们假设该静态变量a相对于起始地址0
的偏移为B，即p的值为B.·口共享对象被装载到地址A.那么实际上该变量a的地址为
A+B，即p的值需要加.上一个装载地址A.R_386_RELATIVE类型的重定位入口就是专门
用来重定位指针变量p这种类型的，变量p在装载时需要加上一个装载地址值A，才是正确
的结果。
答案为否，如果某个ELF文件是以PIC模式编译的（动态链接的可执行文件一般是PIC的），
则bar将出现在“.rel.dyn”中。让我们来看看不使用PIC的方法来编译，重定位表的结果又
会有什么不一样呢？
$gcc-ghared Lib.c -o Lib.8o
$readelf -r Lib.80
Relocation section *,rel.dyn' at offset 0x2c8 contains 8 entries1
offset
00000008 R_386_RELATIVE
Info
0000042c
Type
Syn.Value Sym. Nane
000015c4
00000008 R_386_RELATIVE
80510000
00000008 R_386_RBLATIVE
00000431
00000302 R_386_PC32
00000402 R_386_PC32
00000000
0000043d
00000000
print f
000015a4
00000106 R_386_GL0B_DAT
00000000
8leep
000015a8
00000206 R_386_GLOB_DAT
00000000
gmon_start,
_Jv_RegisterClasses
000015ac
00000506 R_386_GLOB_DAT
00000000
_cxa_finalize
Relocation section ',rel.plt* at offset 0x308
Offset
Info
Sym. Va1ue
 contains 2 entries1
000015bc
00000107 R_386_JUMP_SLOT
adAL
00000000
Syn. Name
000015c000000507 R_386_JUMP_SL0T
00000000
gmon_start._
_cxa_finalize
upr，度ar，Y_su 是
且类型也从R_386_JUMP_SLOT变成了R_386_PC32。
而R_386_RELATIVE类型多出了个偏移为0x0000042c的入口，这个入口是什么呢？
通过对Lib.so的反汇编可以知道，这个入口是用米修正传给printf的第一个参数，即我们的
字符串常量“Printing fromLib.so %din”的地址。为什么这个字符串常量的地址在PIC时不
程序员的自我修养一链接、装载与库
---
## Page 234
7.5动态链接相关结构
211
需要重定位而在非PIC时需要重定位呢？很明显，PIC时，这个字符串可以看作是普通的全
局变量，它的地址是可以通过PIC中的相对当前指令的位置加上一个固定偏移计算出来的：
面在非PIC中，代码段不再使用这种相对于当前指令的PIC方法，面是采用绝对地址寻址，
所以它需要重定位。
7.5.5动态链接时进程堆栈初始化信息
站在动态链接器的角度看，当操作系统把控制权交给它的时候，它将开始做链接工作，
那么至少它需要知道关于可执行文件和本进程的一些信息，比如可执行文件有几个段
（“Segment"）、每个段的属性、程序的入口地址（因为动态链接器到时候需要把控制权交给
可执行文件）等。这些信息往往由操作系统传递给动态链接器，保存在进程的堆栈里面。我
们在前面提到过，进程初始化的时候，堆栈里面保存了关于进程执行环境和命令行参数等信
息。事实上，堆栈里面还保存了动态链接器所需要的一些辅助信息数组（AuxdiaryVector）。
辅助信息的格式也是一个结构数组，它的结构被定义在“elfh”：
typedef struct
radA"e 3"zcutn
union
1
1 a_un;
uint32_t a_val;
}Elf32_auxv_t;
先是一个32位的类型值，后面是一个32位的数值部分。你可能会很奇怪为什么要用一个
union 把后面的32位数值包装起米，事实上这个union没什么用，只是历史造留而已，可以
当作不存在。我们摘录几个比较重要的类型值，这几个类型值是比较常见的，而且是动态链
接器在启动时所需要的，如表7-3所示。
麦7-3
a.type定义
a_type值
a_val 的含义
AT_NULL
0
表示辅助信息数组结束
AT_EXEFD
表示可执行文件的文件句柄，正如前面提到的，动态连接器需
要知道一些关于可执行文件的信息，当进程开始执行可执行文
件时，操作系统会先得文件打开，这时候就会产生文件句辆，
部么操作系统可以将文件句辆传递给动态链接器，动态链接器
可以通过操作系统的文件读写操作来访问可执行文件
AT_PHDR
可执行文件中程序头表（Program Header）在进程中的地址。
（还记得ELF程序视图和链接视图吧？）
程序员的自我修养一链接、装载与库
---
## Page 235
212
第7章动态链接
续表
Ltype定义
atype值
a_val的含义
AT_PHDR
正如前面AT_EXEFD所提到的，动态健接器可以通过操作系统
的文件读写功能来访问可执行文件，但事实上，很多操作系统
会把可执行文件映射到进程的虚拟空闲里面，从而动态链接器
不需要通过读写文件，而是可以直接访问内存中的文件映像。
所以操作系统委么选择前面的文件句辆方式、要么选择这种映
像的方式，当选择映像的方式时，操作系统必须提供后面的
AT_PHENT、AT_PHNUM 和 AT_ENTRY 这儿个类型
AT_PHENT
4
可执行文件头申程序头表中每一个入口（Entry）的大小
AT_PHNUM
5
可执行文件头中程序头表申入口（Entry）的数量
AT_BASE
7
表示动态链接器本身的装载地址
AT_ENTRY
9
可执行文件入口地址，即启动地址
介绍了这么多关于辅助信息数组的结构，我们还没看到它到底位于进程堆栈的哪个位置
呢。事实上，它位于环境变量指针的后面，比如我们假没操作系统传给动态链接器的辅助信
息有4个，分别是：
AT_PHDR，值为0x08048034，程序表头位于0x08048034。
·AT_PHENT，值为20，程序表头中每个项的大小为20字节。
AT_PHNUM，值为7，程序表头共有7个项。
AT_ENTRY，0x08048320，程序入口地址为0x08048320.
那么进程的初始化堆栈就如图7-11所示。
我们可以写一个小程序来把堆栈中初始化的信息全部打印出来，程序源代码如下：
include 
#include 
int main(int argc, char* argv[])
int* p = (int*)argv;
xne ,"Axnez3
int i;
printf(*Argument count : &d\n*, *(p-1));
}{++ ([-d) >  f0 = )xo]
printf(*Argument &d :$e\n*, 1,*(p + i) 1;
p*+; // skip 0
p += i;
程序员的自我修养一—链接、装载与库
---
## Page 236
7.5动态链接相关结构
213
printf (*Environment :\n*) 
}(dleqx
printf (**s\n*, *p1:
p+ + ;
p++; // skip 0
printf(*Auxiliary Vectors:\n°) 
aux = (E1f32_auxv_t*)p:
while (aux=>a_type = AT_NULL)
printf(*Type: $02d Va1ue: $x\n*,
aux++}
aux- >a_cype, aux->a_un.a_val) :
return 0;
High Address
0xSF802000
OxBF801FFC
0xBF801FF0
0xBF801FE0
0xBF801FDC
V0
1
$0s108J9x0
p
2
AT_NULL
Dx0
08048320
AT_ENTRY
5
AT_PHNUM
20
4
AT_PHENT
3
AT_PHOR
0BF801FE1
0xBF801FDE
OxBF801FD8
3F801F94
Argument Count
Aegumeet Poirt
c. ds#
2
Low Address
Process Stack
图7-11进程初始化堆栈
程序员的自我修养——链接、装载与库
---
## Page 237