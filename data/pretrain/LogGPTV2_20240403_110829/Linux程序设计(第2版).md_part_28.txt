说明
LOG_PID
加上进程标识符，这是系统为每个进程在消息中分配的独一无二的数字标识
LOG_CONS
如果消息不能被记录到日志文件里，就把它们送到控制台去
LOG_ODELAY
在第一次调用syslog的时候打开日志功能
LOG_NDELAY
立刻打开日志功能，不等到第一次记日志时
openlog函数会分配并打开一个文件描述符，通过这个文件描述符来写日志。调用closelog函
数将关闭那个日志文件。注意，在调用syslog之前并不需要调用openlog，因为syslog会根据需要
自行打开日志功能。
通过setlogmask函数可以设置一个日志掩码，再通过这个掩码控制我们日志消息的优先级。
此后，优先级没有在日志掩码里置位的syslog调用都将被丢弃，举例来说，你可以用这个办法关
掉LOG_DEBUG消息而不影响程序的主体。
我们可以用LOG_MASK（priority）为日志消息创建一个掩码，它的作用是创建一个只包含一
个优先级别的掩码；还可以用LOG_UPTO（priority）创建一个由指定优先级之前所有优先级（包
括指定优先级）构成的掩码。
动手试试：logmask程序
我们来看看logmask程序的工作情况：
#include 
include 
#include 
int main()
int logmask;
cpenlog(*1ogmask*,LOG_PID|LOG_coNS,LOG_USER);
syalog(LoG_Inro,*informative message, pid = d*.getpid());
加入jaVa编程群：524621833
---
## Page 142
Linux程序设计
sys1og(LOG_DEBuG.*debug message.should appear′):
syslog(L0G_DEBUG,*debug message. should not appear”):
logmask s setlogmask (LOG_UPTO (LOG_NOTICE) ) ;
exit(0) :
这个logmask.c程序不产生任何输出，但在一个典型的Linux系统上，我们可以在系统日志文
件/var/log/messages的尾部看到下面这条消息：
Nov 21 18:19;43 tilde logmask[195]: informative nessage, pid = 195
文件/var/log/debug里将出现：
Nov 2 18:19:43 ti1de logmask[195]: debug message, should appear
操作注释：
程序用自己的名字对记日志功能进行了初始化，并要求在日志消息里加上进程标识符。信
息类消息将记人/var/log/messages文件，而调试信息将记入/var/log/debug文件。第二条调试信息
没有出现在日志文件里，因为在它之前我们已经调用seulogmask函数对日志功能重新进行了配置，
让它忽略所有优先级低于LOG_NOTICE的信息。需要注意的是，这种做法在早期的Linux内核上
行不通。
如果读者在安装操作系统的时候没有激活调试信息记日志功能，或者采用的是其他配置情
况，就可能看不到例子里给出的调试信息。要想记录一切调试信息，请把下面这一行加到文件
fetc/syslog.conf的末尾再重启动计算机（简单点的办法是向syslogd进程发送一个挂起信号）。无
论怎样做，最好先在你的系统文档里查出准确的配置细节。
*,debug/var/Log/debug
logmask.c程序里使用了getpid函数，它与getppid函数的关系很密切，这两个函数的定义如下
新示：
#1nclude 
include 
pid_t getppid(void);
pid_t getpid(void);
两个函数分别返回调用者的进程标识代码和它父进程的进程标识代码。关于PID的详细资料
请参考第10章内容。
4.8资源和限制
在UNIX系统上运行的程序在资源方面会受到一定的限制。它们可能是硬件方面的物理性限
制（比如内存）、系统策略方面的限制（比如分配到的CPU时间）.或者软件实现方面的限制
（比如整数的长度或文件名所允许的最多字符个数）。UNIX技术规范对其中的某些限制做了定义，
应用程序可以把它们检测出来。对限制及突破限制等方面的讨论请参考介绍数据管理知识的第？
章内容。
头文件limits.h里有许多一目了然的常数定义，它们是一些操作系统方面的限制值。包括内
加入jaVa编程群：524621833
---
## Page 143
第4章UNIX环境
125
容见表4-7：
表4-7
限制常数
它们的用途
文件名里允许使用的字符个数的最大值
CHAR_BIT
一个char类型的值里的二进制位数
CHAR_MAX
char类型的最大值
INT_MAX
t类型的最大值
能够用在应用程序里的限制常数还有很多，请读者查阅自已计算机里的头文件。需要注意
的是，不同文件系统上的NAME_MAX值是不一样的。在重视可移植性的代码里应该使用
pathconf函数。详细资料请参考pathconf的man命令使用手册页。
头文件sys/resource.h提供了资源操作方面的定义。其中包括对程序的最大长度、执行优先级、
文件资源等方面的限制进行核查和设置的函数。请看：
#include 
Int getpriorlty(int which,id_twbo);
Lnt
etprlority（int which,id.t who,int prlority)
Int
getxllmit（intresource,struct rlimit *x_limit))
int getrusage（int who,struct rusage *r_usage);
Lnt
setrlinit（int resouzce, const struct rlindt *r_linit))
id_t是一个用在用户标识符和分组标识符方面的整数类型。在sys/resource.h文件里定义的
rusage结构用来确定当前程序占用了多少CPU时间。它至少由表4-8几个数据元素组成：
表4-8
rusage数据元素
说明
struct timeval ru_utine
用户占用的时间
struct timeval ru_stine
系统占用的时间
在sys/time.h文件里定义的timeval结构里的ty_sec和tv_usec数据域分别代表着以秒和微秒计
算的程序占用时间。
程序消耗的CPU时间被分为用户时间（程序本身执行它自己的指令所消耗时间）和系统时
间（操作系统因为这个程序的缘故而消耗的CPU时间，即完成输人输出操作的系统调用以及执
行其他系统函数所花费的时间）。
getrusage函数的作用是把CPU时间信息写到由参数r_usage指向的rusage结构里去。它的who
参数是表4-9中两个常数之一：
表4-9
whe常数
说明
RUSAGE_SELF
只返国当院积序的CPU时间占用信息
RUSAGE_CHILDREN
还包括子进程的CPU时间占用信息
我们将在第10章遇到子进程和任务优先级，但为了让大家有一个比较完整的认识，我们在
加入jaVa编程群：524621833
---
## Page 144
126Linux程序设计
这里对系统资源的实现过程稍加说明。简单地说，每个运行中的程序都有-个关联着的优先级，
优先级比较高的程序分配到的CPU时间会多一点。普通用户只能降低自己程序的优先级，不能
增加它们。
应用程序可以通过getpriority和setpriority函数确定和改变自己（或其他程序）的优先级。被
优先级处理函数检查和修改的进程可以通过进程标识符、分组标识符或者用户标识符加以区分。
which参数规定了对待who参数的方式，它们如表4-10所示：
表4-10
which参数
说明
PRIO_PROCESS
who是一个进程标识符
PRIO_PGRP
who是一个进程分组标识符
PRIO_USER
who是一个用户标识符
因此，要想取得当前进程的优先级，我们可以调用：
priority = getpriority[ PRIO_PROCESS. getpidI1 );
setpriority函数允许设置一个新的优先级，如果能这样做的话。
缺省的优先级是0。正优先级用于后台任务，它们只有在没有更高优先级的任务准备运行
时才会运行。负优先级会使程序运行得更频繁，从CPU的可用时间里分出更大的一块。合法优
先级的范围是-20到+20。人们很容易在这方面犯涂，因为数值懿大，执行起来其优先级反面
越低。
getpriority函数在成功时返回一个合法的优先级，失败时返回“-1”并设置errno变量。因为
“-1”本身是一个合法的优先级数字，所以在调用getpriority函数之前应该把ermo变量设置为零，
在返回时检查它是否依然是零。setpriority函数在成功时返回0，如果失败则返回“-1”。
系统资源方面的限制可以通过getrlimit和setrlimit函数读出和设置。这两个函数都要用rlimit
结构来描述资源方面的限制。它在sys/resource.h文件里定义，由表4-11中元素组成：
表4-11
rlimit数据元素
说明
r1in_t rlim_cur
当前的软限制
rlim_t rlim_max
硬限制
定义类型rlim_t是一个用来描述资源容量的整数类型。一般来说，软限制是一个最好不
要超越的限制，超越了则会引起库函数返回错误。而如果超越了硬限制，就可能会使系统终
止程序的运行，办法是向程序发出一个信号：超越CPU时间限制时送出的是SIGXCPU信号，超
越某个数据容量限制时送出的是SIGSEGV信号。程序可以把自已的软限制设置为小于硬限
制的任意值。它可以减少自已的硬限制。只有以超级用户优先级运行的程序才能增加某项硬
限制。
能够加以限制的系统资源有很多种。它们由rlimit函数的resource参数制定，有关定义都在
sys/resource.h文件里。其内容见表4-12：
加入jaVa编程群：524621833
---
## Page 145
第4章UNIX环境
I27
表4-12
resource参数
说明
RLIMIT_CORE
以字节计算的核心转储（coredump）文件长度限制
RLIXIT_CPU
以秒计算的CPU时间限制
RLIMIT_DATA
以字节计算的数据段（malloc和sbrik操作）长度限制
以字节计算的文件长度限制
文件打开数量方面的限制
RLIMIT_STACK
以字节计算的堆栈长度限制
RLIMIT_AS
以字节计算的地址空间（堆栈和数据）长度限制
下面是模仿典型应用程序的limits.c程序。它还设置并突破了一个资源限制。
动手试试：资源限制
1)这个程序将要用到许多函数，先把对这些函数进行定义的头文件包括进来：
#include 
#include 
#include 
include 
lnclude 
include 
2)work函数向一个临时文件写一个字符串10000次，然后进行一些数学运算，目的是制造一
些CPU工作负荷：
void work()
FILE *f:
double x = 4.5;
int i;
for(i=0:i<10000;i++）{
f = tmpfile();
if(ferror(f)){
fprintf(stderr,*Error writing to terporary file\n*):
exit (1) :
for（i=0:i<1000000;i++)
x = 1og(x*x + 3.21);
3)main涵数先调用work，再调用getrusage函数查看它使用了多少CPU时间。它把这些资料
显示在屏幕上：
int main()
struct rusage r_usage:
int priority;
struct rlimit r_limit:
work() :
getrusage (RUSAGE_SBLF, kr_usage):
printf(*CPU usage:User = $1d.061d,System = 81d.#061d\n′,
r_usage.ru_utime.tv_sec,r_usage.ru_utine.tv_usec,
r_ussge.ru_stime.tv_sec,x_usage.ru_stime.tv_usec):
加入jaVa编程群：524621833
---
## Page 146
128Linux程序设计
4）接下来，它调用getpriority和getrlimit函数分别查出自已的当前优先级和文件长度限制值：
priority * getpriorityIPRIo_PROCEss, getpid(1;
printf(*Current priority = sd\n*, priority);
getrlimit(RLINIT_FSIZE, &r_limit);
printf(*Current FsIzE limit: soft = e1d, hard = s1d\n′,
r_linit.rlim_cur, r_linit.rlim_max):
5）最后，我们通过setrlimit函数设置了一个文件长度限制，然后再次调用work。work函数的
执行失败了，因为它尝试创建的文件尺寸过大：
r_limit.rlim_cur = 2048;
printf(*Setting a 2K file size 1imit\n*);
r_limit.r1im_max =4096
setrlimit(RLIMIT_FSIZE, &r_limit):
work();
exit(0) :
运行这个程序，我们将看到这个程序的CPU资源消耗情况以及这个程序运行时所处的缺省
优先级。在设置了文件长度限制之后，程序对临时文件的写操作将不能超过2048个字节。
Scc-o1imits 1imits.c -1m
CPU usage: User = 1.460000. System = 1.040000
S./limits
Current FSI2E linit: soft = 2147483647, hard s 2147483647
Current priority  0
Setting a 2K file size limit
File size limit exceeded