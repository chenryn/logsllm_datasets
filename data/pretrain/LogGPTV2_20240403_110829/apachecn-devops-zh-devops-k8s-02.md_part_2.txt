4.  安装 Docker CE 并启动它:
```
$ sudo yum install docker-ce
$ sudo systemctl start docker 
```
# 为 macOS 安装 Docker
Docker 用虚拟机管理程序框架包装了一个微型 Linux moby，在 macOS 上构建一个原生应用，这意味着我们不需要第三方虚拟化工具在 Mac 上开发 Docker。要从虚拟机管理程序框架中获益，您必须将您的 macOS 升级到 10.10.3 或更高版本。
下载 Docker 软件包并安装它:
[https://download . docker . com/MAC/stable/docker . dmg](https://download.docker.com/mac/stable/Docker.dmg)
Likewise, Docker for Windows requires no third-party tools. Check here for the installation guide: [https://docs.docker.com/docker-for-windows/install](https://docs.docker.com/docker-for-windows/install)
现在你在 Docker。尝试创建并运行您的第一个 Docker 容器；如果您在 Linux 上，请使用`sudo`运行它:
```
$ docker run alpine ls
bin dev etc home lib media mnt proc root run sbin srv sys tmp usr var
```
你会看到你在一个`root`目录下，而不是你当前的目录下。让我们再次检查流程列表:
```
$ docker run alpine ps aux
PID   USER     TIME   COMMAND
1 root       0:00 ps aux
```
正如所料，它是孤立的。你们都准备好使用容器了。
Alpine is a Linux distribution. Since it's really small in size, many people use it as their base image to build their application container.
# 容器生命周期
使用容器不如我们习惯使用的工具直观。在这一节中，我们将从最基本的思想到我们能够从容器中获益的程度来讨论 Docker 用法。
# Docker 基础知识
当`docker run alpine ls`被执行时，Docker 在幕后做的是:
1.  在本地找到映像`alpine`。如果没有找到，Docker 将尝试查找并将其从公共 Docker 注册表中拉入本地映像存储。
2.  提取映像并相应地创建一个容器。
3.  使用命令执行映像中定义的入口点，这些命令是映像名称后面的参数。在这个例子中，是`ls`。默认情况下，基于 Linux 的 Docker 上的入口点是`/bin/sh -c`。
4.  当入口点进程退出时，容器随后退出。
映像是一个不可变的代码、库、配置和运行应用所需的一切的捆绑包。容器是映像的一个实例，它实际上会在运行时执行。您可以使用`docker inspect IMAGE`和`docker inspect CONTAINER`命令来查看差异。
有时当我们需要进入一个容器检查映像或更新里面的东西时，我们会使用选项`-i`和`-t` ( `--interactive`和`--tty`)。此外，选项`-d` ( `--detach`)使您能够以分离模式运行容器。如果你想和一个分离的容器交互，`exec`和`attach`命令可以帮我们一个忙。`exec`命令允许我们在一个运行容器中运行一个进程，`attach`按照它的字面意思工作。下面的示例演示了如何使用它们:
```
$ docker run alpine /bin/sh -c "while :;do echo  
  'meow~';sleep 1;done"
meow~
meow~
...
```
你的终端现在应该被`meow~`淹没了。切换到另一个终端，运行`docker ps`，一个获取容器状态的命令，找出喵喵叫容器的名称和标识。这里的名称和标识都是由 Docker 生成的，您可以使用它们中的任何一个来访问容器。为了方便起见，可以在`create`或`run`上用`--name`旗来命名:
```
$ docker ps
CONTAINER ID    IMAGE    (omitted)     NAMES
d51972e5fc8c    alpine      ...        zen_kalam
$ docker exec -it d51972e5fc8c /bin/sh
/ # ps
PID   USER     TIME   COMMAND
  1 root       0:00 /bin/sh -c while :;do echo  
  'meow~';sleep 1;done
  27 root       0:00 /bin/sh
  34 root       0:00 sleep 1
  35 root       0:00 ps
  / # kill -s 2 1
  $ // container terminated
```
一旦我们进入容器并检查其过程，我们将看到两个壳:一个是喵喵叫，另一个是我们所在的地方。在容器内用`kill -s 2 1`杀死它，我们会看到整个容器在进入点退出时停止。最后，我们用`docker ps -a`列出停止的容器，用`docker rm CONTAINER_NAME`或`docker rm CONTAINER_ID`清理干净。从 Docker 1.13 开始，引入了`docker system prune`命令，帮助我们轻松清理停止的容器和占用的资源。
# 图层、映像、容器和体积
我们知道一个形象是不可改变的；容器是短暂的，我们知道如何将映像作为容器运行。尽管如此，包装一张图片还是少了一步。
映像是由一个或多个层组成的只读栈，层是文件系统中文件和目录的集合。为了提高磁盘大小的利用率，图层不会只锁定到一个映像，而是在映像之间共享；这意味着 Docker 只需在本地存储一个基本映像的副本，而不管有多少映像是从它导出的。您可以使用`docker history [image]`命令来理解映像是如何构建的。例如，如果您键入`docker history alpine`，阿尔卑斯 Linux 映像中只有一层。
每当创建容器时，它都会在基础映像的顶部添加一个可写层。Docker 在层上采用**写时复制** ( **COW** )策略。也就是说，容器读取存储目标文件的基础映像的层，如果文件被修改，则将文件复制到它自己的可写层。这种方法防止了由同一映像创建的容器相互干扰。`docker diff [CONTAINER]`命令显示了容器和它的基本映像在文件系统状态方面的区别。例如，如果基础映像中的`/etc/hosts`被修改，Docker 会将文件复制到可写层，并且它也将是`docker diff`输出中唯一的一个文件。
下图说明了 Docker 映像的层次结构:
![](img/00028.jpeg)
需要注意的是，可写层中的数据会随其容器一起被删除。要持久化数据，可以使用`docker commit [CONTAINER]`命令将容器层提交为新映像，或将数据卷装入容器。
数据卷允许容器的读写绕过 Docker 的文件系统，它可以在主机的目录或其他存储上，如 Ceph 或 GlusterFS。因此，针对该卷的任何磁盘输入/输出都可以以本机速度运行，具体取决于底层存储。因为数据在容器外部是持久的，所以它可以被多个容器重用和共享。通过在`docker run`或`docker create`指定`-v` ( `--volume`)标志来安装卷。以下示例在容器中的`/chest`下装入一个卷，并在那里留下一个文件。之后，我们使用`docker inspect`来定位数据量:
```
$ docker run --name demo -v /chest alpine touch /chest/coins
$ docker inspect demo
...
"Mounts": [
 {
    "Type": "volume",
     "Name":(hash-digits),
     "Source":"/var/lib/docker/volumes/(hash- 
      digits)/_data",
      "Destination": "/chest",
      "Driver": "local",
      "Mode": "",
       ...
$ ls /var/lib/docker/volumes/(hash-digits)/_data
      coins
```
The default `tty` path of moby Linux provided by Docker CE on macOS is under:
`~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty`.
You can attach to it with `screen`.
数据量的一个用例是在容器之间共享数据。为此，我们首先创建一个容器并在其上装入卷，然后装入一个或多个容器并用`--volumes-from`标志引用该卷。以下示例创建了一个包含数据卷`/share-vol`的容器。容器 A 可以放一个文件进去，容器 B 也可以读取:
```
$ docker create --name box -v /share-vol alpine nop
c53e3e498ab05b19a12d554fad4545310e6de6950240cf7a28f42780f382c649
$ docker run --name A --volumes-from box alpine touch /share-vol/wine
$ docker run --name B --volumes-from box alpine ls /share-vol
wine
```
此外，数据卷可以装载在给定的主机路径下，当然，其中的数据是持久的:
```
$ docker run --name hi -v $(pwd)/host/dir:/data alpine touch /data/hi
$ docker rm hi
$ ls $(pwd)/host/dir
hi
```
# 分发映像
注册表是一种存储、管理和分发映像的服务。公共服务，如 Docker Hub([https://hub.docker.com](https://hub.docker.com))和 Quay ( [https://quay.io](https://quay.io) )汇聚了各种流行工具的预建图片，如 Ubuntu 和 Nginx，以及其他开发者的定制图片。我们多次使用的 Alpine Linux 实际上是从 Docker Hub([https://hub.docker.com/_/alpine](https://hub.docker.com/_/alpine))拉出来的。当然，你可以将你的工具上传到这些服务中，并与所有人分享。
If you need a private registry, but for some reason you don't want to subscribe to paid plans of registry service providers, you can always set up one on your own with registry ([https://hub.docker.com/_/registry](https://hub.docker.com/_/registry)).
在提供容器之前，Docker 将尝试在映像名称中指示的规则中定位指定的映像。一个映像名称由三个部分组成`[registry/]name[:tag]`，通过以下规则解析:
*   如果省略了`registry`字段，则在 Docker Hub 上搜索该名称
*   如果`registry`字段是注册服务器，搜索其名称
*   名称中可以有多个斜杠
*   如果省略，标签默认为`latest`
例如，像`gcr.io/google-containers/guestbook:v3`这样的映像名称指示 Docker 从`gcr.io`下载`google-containers/guestbook`的`v3`。同样，如果您想要将映像推送到注册表，请以同样的方式标记您的映像并推它。要列出您当前在本地磁盘中拥有的映像，请使用`docker images`，并用`docker rmi [IMAGE]`删除一个映像。以下示例显示了如何在不同的注册表之间工作:从 Docker Hub 下载一个`nginx`映像，将其标记到私有注册表路径，并相应地推送。请注意，虽然默认标签是`latest`，但您必须显式标记和推送它。
```
$ docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
ff3d52d8f55f: Pull complete
...
Status: Downloaded newer image for nginx:latest
$ docker tag nginx localhost:5000/comps/prod/nginx:1.14
$ docker push localhost:5000/comps/prod/nginx:1.14
The push refers to a repository [localhost:5000/comps/prod/nginx]
...
8781ec54ba04: Pushed
1.14: digest: sha256:(64-digits-hash) size: 948
$ docker tag nginx localhost:5000/comps/prod/nginx
$ docker push localhost:5000/comps/prod/nginx
The push refers to a repository [localhost:5000/comps/prod/nginx]
...
8781ec54ba04: Layer already exists
latest: digest: sha256:(64-digits-hash) size: 948
```
如果您要推送映像，大多数注册表服务都会要求进行身份验证。`docker login`就是为此而设计的。有时，即使映像路径有效，您也可能会在尝试拉取映像时收到`image not found error`。很有可能您未经保存映像的注册表授权。要解决此问题，请先登录:
```
$ docker pull localhost:5000/comps/prod/nginx
Pulling repository localhost:5000/comps/prod/nginx
Error: image comps/prod/nginx:latest not found
$ docker login -u letme -p in localhost:5000
Login Succeeded
$ docker pull localhost:5000/comps/prod/nginx
Pulling repository localhost:5000/comps/prod/nginx
...
latest: digest: sha256:(64-digits-hash) size: 948