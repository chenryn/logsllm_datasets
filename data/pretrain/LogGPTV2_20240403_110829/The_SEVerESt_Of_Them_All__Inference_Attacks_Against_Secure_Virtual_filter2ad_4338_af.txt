tualization (SEV) platform can be undermined. Additionally, we
show that even when additional state is encrypted (e.g., as proposed
under the SEV-ES extension where the state of general purpose reg-
isters is also encrypted), an adversary may still mount application
fingerprinting attacks, rendering those protections less effective
than first thought. We provide suggestions for mitigating the threat
posed by some of these attacks in the short term.
8 ACKNOWLEDGMENTS
We thank Richard Strong and Caleb Loverro for fruitful discussions
and feedback on an earlier draft of this paper. We also thank David
Kaplan and Joe Greathouse for their feedback and insights regarding
IBS. We express our gratitude to Murray Anderegg for his assistance
with deploying the infrastructure used in this study. This work was
supported in part by the Department of Defense (DoD) under award
FA8750-17-C-0016, the Office of Naval Research (ONR) under award
N00014-17-1-2891, the National Science Foundation (NSF) under
award CNS-1749895, and the Defense Advanced Research Projects
Agency (DARPA) under award D18AP00045. Any opinions, findings,
Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand83bugs, 2017.
and conclusions expressed herein are those of the authors and do
not necessarily reflect the views of the DoD, ONR, NSF, or DARPA.
REFERENCES
[1] L. Abrams. Intel releases linux CPU microcodes to fix meltdown and spectre
2018.
[2] AMD. AMD64 architecture programmer’s manual volume 2: System program-
ming. http://support.amd.com/TechDocs/24593.pdf, 2017.
[3] AMD. AMD research instruction based sampling toolkit. https://github.com/
jlgreathouse/AMD_IBS_Toolkit, 2018.
[4] AMD. SEV-ES guest-hypervisor communication block standardization. https:
//developer.amd.com/wp-content/resources/56421.pdf, 2019.
[5] A. Baumann, M. Peinado, and G. Hunt. Shielding applications from an untrusted
In USENIX Symposium on Operating Systems Design and
cloud with haven.
Implementation, pages 267–283, 2014.
[6] A. K. Biswas, D. Ghosal, and S. Nagaraja. A survey of timing channels and
countermeasures. ACM Computer Surveys, 50(1):6:1–6:39, Mar. 2017.
[7] J. V. Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx. Telling your se-
crets without page faults: Stealthy page table-based attacks on enclaved execution.
In USENIX Security Symposium, pages 1041–1056, 2017.
[8] S. Checkoway and H. Shacham. Iago attacks: why the system call API is a bad
untrusted RPC interface. In Architectural Support for Programming Languages
and Operating Systems, pages 253–264, 2013.
[9] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh,
J. Dwoskin, and D. R. Ports. Overshadow: A virtualization-based approach to
retrofitting protection in commodity operating systems. SIGPLAN Not., 43(3):
2–13, Mar. 2008.
[10] V. Costan, I. Lebedev, and S. Devadas. Sanctum: Minimal hardware extensions
for strong software isolation. In USENIX Security Symposium, pages 857–874,
2016.
[11] J. Criswell, N. Dautenhahn, and V. Adve. Virtual ghost: Protecting applications
from hostile operating systems. In ACM Conference on Architectural Support for
Programming Languages and Operating Systems, pages 81–96, 2014.
[12] CTS-LABS. Severe security advisory on AMD processors. https://amdflaws.com,
[13] P. J. Drongowski.
Instruction-based sampling: A new performance analysis
technique for AMD family 10h processors. https://developer.amd.com/wordpress/
media/2012/10/AMD_IBS_paper_EN.pdf, 2007.
[14] Z.-H. Du, Z. Ying, Z. Ma, Y. Mai, P. Wang, J. Liu, and J. Fang. Secure Encrypted
Virtualization is Unsecure https://arxiv.org/pdf/1712.05090.pdf, 2017.
[15] R. Elbaz, D. Champagne, C. Gebotys, R. B. Lee, N. Potlapally, and L. Torres. Hard-
ware mechanisms for memory authentication: A survey of existing techniques
and engines. In Transactions on Computational Science IV, pages 1–22, 2009.
[16] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for
Unix processes. In IEEE Symposium on Security & Privacy, 1996.
[17] J. Greene. Intel Trusted Execution Technology. https://www.intel.com/content/
www/us/en/architecture-and-technology/trusted-execution-technology/
trusted-execution-technology-security-paper.html, 2012.
[18] S. Gueron. Memory encryption for general-purpose processors. IEEE Security
Privacy, 14(6):54–62, Nov 2016.
[19] S. Gueron. A memory encryption engine suitable for general purpose processors.
ePrint Archive, Report 2016/204, 2016. https://eprint.iacr.org/2016/204.
[20] D. Gullasch, E. Bangerter, and S. Krenn. Cache games – bringing access-based
cache attacks on AES to practice. In IEEE Symposium on Security & Privacy, pages
490–505, May 2011.
[21] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino,
A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest we remember: Cold boot
attacks on encryption keys. In USENIX Security Symposium, pages 45–60, 2009.
[22] Y. Hebbal, S. Laniepce, and J. M. Menaud. Virtual machine introspection: Tech-
niques and applications. In International Conference on Availability, Reliability
and Security, pages 676–685, Aug 2015.
[23] M. Henson and S. Taylor. Memory encryption: A survey of existing techniques.
ACM Computer Survey, 46(4):53:1–53:26, Mar. 2014.
[24] F. Hetzelt and R. Buhren. Security analysis of encrypted virtual machines. In
ACM International Conference on Virtual Execution Environments, pages 129–142,
2017.
[25] S. Jin, J. Ahn, S. Cha, and J. Huh. Architectural support for secure virtualization
under a vulnerable hypervisor. In International Symposium on Microarchitecture,
pages 272–283, Dec 2011.
[26] D. Kaplan. Protecting VM register state with SEV-ES. http://support.amd.com/
TechDocs/Protecting%20VM%20Register%20State%20with%20SEV-ES.pdf, 2017.
AMD memory encryption.
J. Powell, and T. Woller.
[27] D. Kaplan,
http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/12/AMD_
Memory_Encryption_Whitepaper_v7-Public.pdf, 2016.
[28] Y. Kim, R. Daly, J. Kim, C. Fallin, J. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu.
Rowhammer: Reliability analysis and security implications. CoRR, abs/1603.00747,
2016.
[29] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard,
T. Prescher, M. Schwarz, and Y. Yarom. Spectre attacks: Exploiting speculative
execution. https://arxiv.org/abs/1801.01203, 2018.
[30] J. Lee, J. Jang, Y. Jang, N. Kwak, Y. Choi, C. Choi, T. Kim, M. Peinado, and B. B. Kang.
Hacking in darkness: Return-oriented programming against secure enclaves. In
USENIX Security Symposium, pages 523–539, 2017.
[31] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado. Inferring fine-grained
control flow inside SGX enclaves with branch shadowing. In USENIX Security
Symposium, pages 557–574, 2017.
[32] T. Lendacky. [RFC PATCH v1 00/18] x86: Secure memory encryption (AMD).
https://www.mail-archive.com/PI:EMAIL/msg02713.html, 2016.
[33] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, S. Mangard, P. Kocher,
D. Genkin, Y. Yarom, and M. Hamburg. Meltdown. https://arxiv.org/abs/1801.
01207, 2018.
[34] Y. Lyu and P. Mishra. A survey of side-channel attacks on caches and counter-
measures. Journal of Hardware and Systems Security, Nov 2017.
[35] G. Maisuradze and C. Rossow. Speculose: Analyzing the security implications of
speculative execution in CPUs. https://arxiv.org/abs/1801.04084, 2018.
[36] M. Morbitzer, M. Huber, J. Horsch, and S. Wessel. Severed: Subverting amd’s
virtual machine encryption. In European Workshop on System Security, 2018.
[37] M. Morbitzer, M. Huber, and J. Horsch. Extracting secrets from encrypted virtual
machines. In ACM CODASPY, 2019.
[38] National Security Institute. Department of Defense Trusted Computer System
Evaluation Criteria. Department of Defense, 1985.
[39] E. PARSA. Cloudsuite. http://cloudsuite.ch/, 2018.
[40] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard. DRAMA: Exploiting
DRAM addressing for cross-cpu attacks. In USENIX Security Symposium, pages
565–581, 2016.
[41] J. V. B. F. Piessens and R. Strackx. Sgx-step: A practical attack framework for
precise enclave execution control. In Workshop on System Software for Trusted
Execution (SysTEX), 2017.
[42] N. A. Quynh. Operating system fingerprinting for virtual machines. Defcon,
2010.
2001.
USA, 2016.
[43] E. Rescorla. SSL and TLS: Designing and Building Secure Systems. Addison-Wesley,
[44] J. Sharkey. Breaking hardware-enforced security with hypervisors. Black Hat
[45] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena. Preventing page faults
from telling your secrets. In ACM Conference on Computer and Communications
Security, pages 317–328, 2016.
[46] R. Spreitzer, V. Moonsamy, T. Korak, and S. Mangard. SoK: systematic classifica-
tion of side-channel attacks on mobile devices. CoRR, 2016.
[47] J. Szefer and R. B. Lee. Architectural support for hypervisor-secure virtualization.
SIGPLAN Not., 47(4):437–450, Mar. 2012.
[48] B.-P. Tine and S. Yalamanchili. Pagevault: Securing off-chip memory using page-
based authentication. In Proceedings of the International Symposium on Memory
Systems, pages 293–304, 2017.
[49] Trusted Computing Group. TPM Main: Part 1 – Design Principles. https://
trustedcomputinggroup.org/resource/tpm-main-specification/, 2003.
[50] T. Unterluggauer, M. Werner, and S. Mangard. Securing memory encryption and
authentication against side-channel attacks using unprotected primitives. IACR
ePrint Archive, 2017:663, 2017.
[51] A. Vahldiek-Oberwagner, E. Elnikety, D. Garg, and P. Druschel. Erim: Secure and
efficient in-process isolation with memory protection keys. https://arxiv.org/abs/
1801.06822, 2018.
[52] VMware. Securing the cloud: A review of cloud computing, security implictions,
and best practices, 2009.
[53] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C. A.
Gunter. Leaky cauldron on the dark land: Understanding memory side-channel
hazards in SGX. In ACM Conference on Computer and Communications Security,
pages 2421–2434, 2017.
[54] C. Warrender, S. Forrest, and B. Pearlmutter. Detecting intrusions using system
calls: alternative data models. In IEEE Symposium on Security & Privacy, pages
133–145, 1999.
[55] M. Werner, T. Unterluggauer, R. Schilling, D. Schaffenrath, and S. Mangard.
In Field Programmable
Transparent memory encryption and authentication.
Logic and Applications (FPL), pages 1–6, 2017.
[56] Y. Xia, Y. Liu, and H. Chen. Architecture support for guest-transparent vm
protection from untrusted hypervisor and physical attacks.
In International
Symposium on High Performance Computer Architecture, pages 246–257, Feb 2013.
[57] Y. Xiao, X. Zhang, Y. Zhang, and R. Teodorescu. One bit flips, one cloud flops:
In USENIX Security
Cross-vm row hammer attacks and privilege escalation.
Symposium, pages 19–35, 2016.
[58] Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks: Deterministic side
channels for untrusted operating systems. In IEEE Symposium on Security &
Privacy, pages 640–656, 2015.
Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand84D IBS BASED FINGERPRINT
In the example presented in Figure 6, the reference consists of eight
distances for the nine functions in the application binary image.
A ETHICAL CONSIDERATIONS
As is common in the computer security landscape, there is an in-
tricate dance between defensive and offensive research. We have
shared our results with AMD regarding the power of inference
attacks, and have incorporated some of the feedback into the paper.
This new class of attacks is a direct outcome of not having the
ability to inspect main memory.
B INTROSPECTION ALGORITHM
The procedure we use to selectively hyper-step is presented in
Algorithm 3.
Algorithm 3 Introspection using Trigger Points
1: Off-line: identify critical code section, generate profile, set can-
Figure 6: Application reference and IBS based fingerprints
didate trigger ∆
repeat
2: loop Introspection
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
end if
14:
15: end loop
Identify target (§4.1) using profile
if trigger point ∆ reached then
Hyper-step (§4.2) the target
Unveil likely instructions (§4.2.1)
Locate fine-grained trigger ∆’
if ∆’ found then
Set ∆ = ∆’
end if
Exfiltrate data
until system call invocation
C NGINX PROCESS CONTROL
The procedure involved in spawning processes in Nginx is shown
in Figure 5. The sequence of system calls spanning init, master, and
workers processes (observable in the context of the SEV register
inference attack) uniquely identify the target.
Figure 5: Process control in Nginx.
InitProcessSocket 1 createdSocket 1 bound to addressSocket 1 in listening stateSocket 1 in listening stateWorkerProcesscreate new socketlistenbind addresscloneexitSocket 1 in listening stateMasterProcessclonewait for childSocket 1 in listening stateSocket 2:decrypt, disk read, compress, encryptacceptcloseEndreceive requestsend responsewait for connectionsSocket 1 in listening stateFunction 1Return instructions observed by IBSretretretFunction 2Layout of an application obtained via disassembly. Each vertical line represents a return instruction.r1r7d1d2urr8Function 9 r6r5r4r3r2Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand85