amount of security under both schemes. In both S-BGP and SPV,
the contiguous deploying preﬁx can be veriﬁed by any deploying
router. In S-BGP, any speaker can remove any AS that follows a
non-SBGP AS, but any subsequent S-BGP ASes must also be re-
moved. In addition, any speaker can add a non-deploying AS after
any other non-deploying AS, but any subsequent S-BGP ASes must
be removed. In SPV, only the ﬁrst SPV AS can add or remove an
AS following a non-SPV AS; subsequent ASes cannot modify the
ASPATH, except to the extent that an attacker can receive sufﬁcient
UPDATEs to compromise the security of the truncation prevention
scheme.
To provide even stronger incremental deployment properties
using asymmetric cryptography, we modify S-BGP such that each
time a speaker sends an UPDATE for its own preﬁx, it also gener-
ates a public-private key pair for that UPDATE. Figure 6 illustrates
this new protocol. For example, when AS A originates an UPDATE
for its own preﬁx to AS B, it generates a public-private key pair.
−
+
1 to denote the public key and k
1 to denote the private
We use k
key in this pair. It signs the UPDATE as in S-BGP, but also includes
+
1 in the signed ﬁelds. It also sends the private
the public value k
−
1 to the next router; in this case, AS B. Each AS propagating
key k
A → B :
B → C :
C → X :
X → D :
D → M :
(cid:9)
+
1
,
}
−
K
A
1
+
1
−
K
+
A
2
−
K
+
A
2
−
, k
1
}
(cid:8){ASPATH A, B; k+
(cid:8){ASPATH A, B; k
}
{{ASPATH A, B,C; k
}
(cid:8){ASPATH A, B; k
,
}
}
{{ASPATH A, B,C; k
−
K
}
{{ASPATH A, B,C, X; k
B
+
3
}
(cid:8){ASPATH A, B; k+
,
}
}
{{ASPATH A, B,C; k
−
K
}
{{ASPATH A, B,C, X; k
B
+
3
}
(cid:8){ASPATH A, B; k
,
}
}
{{ASPATH A, B,C; k
,
−
−
k
K
}
}
{{ASPATH A, B,C, X; k
+
B
1
−
k
K
3
{{ASPATH A, B,C, X, D, M; k
C
+
4
,
−
k
}
1
−
K
C
,
−
k
}
1
−
K
C
−
K
+
A
2
−
K
+
A
2
+
1
1
}
−
1
k
−
, k
2
(cid:9)
−
K
B
−
, k
3
(cid:9)
−
2
−
, k
3
(cid:9)
−
2
k
k
,
−
}
2
−
K
D
}
k
−
3
−
, k
4
(cid:9)
Figure 6: An example run of
the stronger asymmetric
protocol designed for incremental deployment described in
Section 5.1.3. ASes A, B,C, D are legitimate, deploying ASes,
AS X is a non-deploying AS, and AS M is a malicious AS. If
−
AS M wants to remove AS D from the ASPATH, it needs k
3
to sign the required certiﬁcate, in which case a non-deploying
path exists from X to M.
that preﬁx generates a new public-private key pair, signs the entire
UPDATE using both its private key and the private key it got from
the previous AS, and passes only the new private key to the next
AS (not the private key it got from the previous AS). For example,
−
+
when B propagates the UPDATE, it generates k
2 , and signs the
−
−
2
UPDATE and k
B and k
1 . This construct prevents an
attacker from removing an ASN once the UPDATE has traversed a
legitimate deploying router, unless the attacker receives the same
UPDATE over a different path that does not contain a legitimate
deploying router.
+
2 using both K
, k
5.2 Performance Evaluation
In this section, we discuss the performance of SPV and contrast
it with S-BGP. S-BGP can be used with any digital signature
algorithm, we chose to compare with RSA 1024-bit modulus be-
cause RSA is the fastest algorithm for sequentially generating and
verifying a signature. RSA veriﬁcation is by far the fastest for all
digital signature schemes, it is over 10 times faster than DSA for
example. Since a signature is generated once and veriﬁed several
times at each hop, RSA has a big advantage over other signature
algorithms. While S-BGP can also cache veriﬁed signatures, the
same trick can be applied to SPV and thus lower SPV overhead as
well.
The security of 1024-bit RSA signatures requires on the order
of 272 operations to break [33], so on a ﬁrst glance, the compari-
son appears unjust— why not compare with a version of RSA that
also has a lower security margin? The reason is because RSA with a
lower security margin requires a one-time effort to break, for exam-
ple a 512-bit RSA modulus requires approximately 250 operations
to break [13]. In contrast, as long as the attacker cannot invert the
hash function (which requires on the order of 280 operations), an
attacker can spoof an SPV update only with very low probability,
and it cannot spoof that update during a different epoch without
doing more computation.
Computational Overhead Figure 7 shows the cumulative distri-
bution function of CPU usage required in each second in both our
1
0.99
0.98
0.97
0.96
y
t
i
l
i
b
a
b
o
r
P
e
v
i
t
l
a
u
m
u
C
0.95
0.94
0.93
0.92
10−4
10−3
10−2
10−1
Fraction of CPU used
100
S−BGP Computation
SPV Computation
101
102
103
Figure 7: CPU Utilization
)
B
M
(
g
r
o
.
s
w
e
v
e
i
t
u
o
r
t
a
i
e
z