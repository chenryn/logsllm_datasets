### Problem Reduction and Complexity

The problem is reduced from the 3SAT problem, which is known to be NP-complete [7]. Due to space constraints, we omit the detailed proof.

**Theorem 3:** The problem of policy verification in the Flume system without declassification is in P.

**Label Change:**
Theorem 3 indirectly demonstrates that the subject's ability to delete secrecy tags or add integrity tags at its own levels is a key factor contributing to exponential-time complexity. In a system without declassification, the process is monotonic, meaning the process's secrecy level is non-decreasing, and the process's integrity label is non-increasing. This implies that processes will eventually be unable to write to other objects. In practice, to reduce complexity, we should be cautious in granting subjects declassification capabilities.

### Complexity of Asbestos/HiStar Policy Verification

In Asbestos, each process \( P \) has two labels: a send label \( S_P \) and a receive label \( R_P \). Sending a message from process \( P \) to process \( Q \) requires that \( S_P \subseteq S_Q \). Once communication occurs, \( Q \) is tainted by \( P \). Asbestos categories are named by handles, and handle privileges are represented by levels, which are members of the ordered set \(\{ \star, 0, 1, 2, 3 \}\), with \(\star\) being the minimum and 3 being the maximum. A label \( L \) is a mapping from handles to levels. Labels form a lattice under the partial order relation \(\subseteq\).

Operators \( U \) and \( I \) are defined as follows:
\[ L_1 U L_2 = \{ h \mapsto \max(L_1(h), L_2(h)) \} \]
\[ L_1 I L_2 = \{ h \mapsto \min(L_1(h), L_2(h)) \} \]

Asbestos decentralizes declassification using the special \(\star\) level. A process \( P \) with declassification privilege for handle \( h \) can decontaminate process \( Q \)'s labels with respect to \( h \) by lowering \( Q \)'s send labels and raising \( Q \)'s receive labels, provided \( P \) can send a message to \( Q \).

HiStar tracks and enforces information flow using Asbestos labels but uses explicit label adjustment instead of implicit label adjustment.

Based on the problem definition and the Flume model, we have the following conclusions:

**Theorem 4:** The problem of policy verification in the Asbestos/HiStar system is NP-hard.

**Theorem 5:** The problem of policy verification in the Asbestos/HiStar system without processes granting their declassification abilities to others is NP-complete.

We use reduction methods to prove these theorems, reducing the problem in Theorem 1 to the problem in Theorem 4, and the problem in Theorem 2 to the problem in Theorem 5.

**Theorem 6:** The problem of policy verification in the Flume system without declassification is in P. The proof of Theorem 6 is similar to that of Theorem 3.

### Model Checking Approach for DIFC Policy Verification

#### Modeling the Problem
We use the model checking approach to analyze instances of these problems. In this approach, a system property is expressed in temporal logic, and a state transition system is modeled as a Kripke structure [11]. The structure is a 4-tuple \((S, S_0, R, L)\), where \( S \) is a finite set of states, \( S_0 \) is a set of initial states, \( R \subseteq S \times S \) is a transition relation, and \( L: S \to 2^{AP} \) is a labeling of the states with subsets of a set of atomic propositions \( AP \). In the context of DIFC policy verification, each state involves the current labels and the capabilities of all processes. State transitions are triggered by information flows that satisfy DIFC rules and specified communication links.

For a problem instance of whether there exists a path from process \( p \) to process \( q \), we introduce a Boolean variable \( \text{ta\_int}_r \) for each process \( r \) to record whether \( r \) has been contaminated by the information flow originating from \( p \) in the current state. We can then use a property in CTL with the form "EF ta\_int_q" to express the decision problem, asserting that there exists no state where \( \text{ta\_int}_q \) becomes true, or in LTL with the form "G !ta\_int_q".

#### Preprocessing
Some processes may be irrelevant to the verification process. We use a preprocessing stage to remove these processes, thereby reducing the search space. For example, in Flume:
1. Remove processes with no abilities.
2. Identify processes with only the ability to add tags, grant all their capabilities to \( q \) if the information flow from them to \( q \) is legal, and then remove these processes.
3. Remove processes whose tag-removal abilities are irrelevant to the problem. We design an algorithm to find these processes.

#### Experimental Results
Using Flume as an example, we first create an automatic generator of instances and use a capability settings parameter to control the probability of processes owning declassification capabilities. Instances are divided into eight groups (G1, G2, ..., G8). We analyze three types of runtime:
- **Runtime-A:** Obtained when tested instances are normally executed.
- **Runtime-B:** Obtained when tested instances are preprocessed.
- **Runtime-C:** Obtained when no transferring privileges is permitted.

Experiments were performed using NuSMV 2.5.2 on a Windows XP machine with an Intel P4 2.8G CPU and 2GB of memory. The results are shown in Table 1, where N/A indicates that at least one instance in a group could not be solved within 30 minutes.

| Num of Processes | Num of Tags | Capability Settings Parameter | Num of Processes After Preprocessing | Runtime-A (s) | Runtime-B (s) | Runtime-C (s) |
|------------------|--------------|--------------------------------|---------------------------------------|---------------|---------------|---------------|
| 2                | 8            | 50                             | 33                                    | 280           | 1080          | N/A           |
| 2                | 6            | 42                             | 10                                    | 215           | 650           | 1565          |
| 1                | 3            | 18                             | 15                                    | 60            | 100           | 300           |
| 10               | 20           | 40                             | 40                                    | 80            | 120           | 6             |
| 15               | 34           | 13                             | 68                                    | 8             | 15            | 3             |
| 2                | 4            | 6                              | 1                                     | 1             | 30            | 2             |
| 20               | 2            | 91                             | 8                                     | 1             | 30            | 2             |

Table 1 shows that although the problem complexity is exponential, our program can effectively solve nontrivial-sized instances in reasonable amounts of time. The preprocessing step significantly improves efficiency. A slight change in the number of declassification privileges markedly influences computational time, and transferring privileges doubles the runtime.

### Conclusions
We have demonstrated that the problems of policy verification in Asbestos, HiStar, and Flume are generally NP-hard. We have proposed a model checking approach to solve these problems.

### References
[1] A. C. Myers and B. Liskov. Protecting privacy using the decentralized label model. ACM Transactions on Software Engineering and Methodology, 9(4):410-442, 2000.
[2] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazieres, F. Kaashoek, and M. Robert. Labels and event processes in the asbestos operating system. In Proceedings of the 20th ACM Symposium on Operating Systems Principles, pages 17-30. ACM, 2005.
[3] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazieres. “Making information flow explicit in HiStar,” in Proceedings of Usenix Association 7th Usenix Symposium on Operating Systems Design and Implementation, pages 263-278. USENIX Association, 2006.
[4] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, E. Kohler, and R. Morris, Information flow control for standard OS abstractions. In Proceedings of the 21st ACM Symposium on Operating Systems Principles, pages 321-334. ACM, 2007.
[5] S. Zdancewic and A. C. Myers. Robust declassification. In Proceedings of the 14th IEEE Computer Security Foundations Workshop, pages 15-23. IEEE Computer Society, 2001.
[6] A. Sabelfeld and D. Sands. Dimensions and Principles of Declassification. In Proceedings of the 18th IEEE Computer Security Foundations Workshop, pages 255-269. IEEE Computer Society, 2005.
[7] M. R. Garey and D. S. Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness. New York: W. H. Freeman & Co., 1979.
[8] A. Chaudhuri, P. Naldurg, S. K. Rajamani, G. Ramalingam, and L. Velaga. EON: Modeling and Analyzing Dynamic Access Control Systems with Logic Programs. In Proceedings of the 15th ACM conference on Computer and communications security, pages 381-390. ACM, 2008.
[9] W. R. Harris, N. A. Kidd, S. Chaki, S. Jha, and T. Reps. Verifying information flow control over unbounded processes. In Proceedings of 16th International Symposium on Formal Methods, pages 773-789. Springer, 2009.
[10] W. R. Harris, S. Jha, and T. Reps. DIFC Programs by Automatic Instrumentation. In Proceedings of the 17th ACM conference on Computer and communications security, pages 284-296. ACM, 2010.
[11] A. Biere, A. Cimatti, E. M. Clarke, M. Fujita, and Y. Zhu. Symbolic model checking using SAT procedures instead of BDDs. In Proceedings of the 36th Annual Conference on Design Automation, pages 317-320. IEEE Computer Society, 1999.