problem used to reduce from is 3SAT problem [7], and it is NP-
complete. We omit the proof due to space constraints. 
Theorem  3  The  problem  of  policy  verifications  of  Flume 
system without declassification is in P.  
label  change 
Theorem  3  indirectly  shows  that  the  subject’s  capabilities  for 
deleting secrecy tags or adding integrity tags from its own levels 
is  the  key  factor  that  causes  the  exponential-time  complexity.  
Such  system  without  declassification  is  monotonic,  where  the 
process’s  secrecy 
is  non-decreasing  and  the 
process’s  integrity  label  change  is  non-increasing,  which  means 
that  processes  will  soon  be  unable  to  write  other  objects.  In 
practice,  in  order  to  decrease  the  complexity,  we  should  be 
discreet in entitling subjects to declassification abilities. 
2.3  Complexity of the Problem of Asbestos/ 
HiStar Policy Verification  
In Asbestos, each process P has two labels, a send label
SP and 
RP . Sending a message from process P to process 
a receive label
Q  requires  that:
S Q
P ⊆
.Once  communication,  Q  is  tainted  by 
.  Asbestos  categories  are  named  by  handles. 
P
P:
U←
S
Handle  privileges  are  represented  by  levels,  which  are  members 
of the ordered set [⋆ , 0, 1, 2, 3], with minimum ⋆  and maximum 
3. A label L is a mapping from handles to levels. Labels form a 
lattice  under  the  partial  order  relation ⊆ . 
, 
hL
2L range over labels, h over handles. 
)(
1
Operators  U and I are defined as follows: 
L
L
hLhL
(
)(
)).
(
1
1
.    Asbestos  decentralizes  declassification  using  the  special  ⋆  
level.  Further,  a  process  P  with  declassification  privilege  for 
handle h can decontaminate a processes Q’s labels with respect to 
h by lowering Q’s send labels and raising Q’s receive labels, so 
long as P can send a message to Q.     
, where 1L and 
h
∀⇔⊆ 2
hLhL
(
1
hL
)(
2
max(
min(
L
1
)),
L
1
Q
Q
)(
),
),
L
L
≤
=
=
I
U
h
h
(
)
(
(
)
R
S
S
2
2
2
2
HiStar  tracks  and  enforces  information  flow  using  Asbestos 
labels,  while  it  uses  the  explicit  label  adjustment  to  replace  the 
implicit label adjustment used in Asbestos.   
According  to  the  problem  definition  and  the  Flume  model 
definition, we have the following conclusions. 
Theorem  4  The  problem  of  policy  verifications  of 
Asbestos/HiStar system is NP-hard.  
Theorem  5  The  problem  of  policy  verifications  of 
Asbestos/HiStar system without processes granting their abilities 
of declassification to others is NP-complete.     
We still use the reduction method to prove these two theorems. 
We respectively reduce the problem in Theorem 1 to the problem 
in  Theorem  4,  and  reduce  the  problem  in  Theorem  2  to  the 
problem in Theorem 5.  
Theorem  6  The  problem  of  policy  verifications  of  Flume 
system without declassification is in P.  
The proof of Theorem 6 is similar to that of Theorem 3. 
3.  MODEL CHECKING APPROACH FOR 
DIFC POLICY VERIFICATION 
Modeling  the  problem We use the model checking approach 
to analyze some instances of these problems. In this approach, a 
system  property  is  expressed  in  temporal  logic  and  a  state 
transition  system  is  modeled  as  a  Kripke  structure[11].  The 
 with a finite set of states 
structure is a 4-tuple 
S,  a  set  of  initial  states  S,  a  transition  relation
,  and  a 
labeling of the states
: → with subsets of a set of  atomic 
LRSSM =
×⊆
SS
SL
,(
R
2
AP
)
,
,
0
874propositions AP. In the context of DIFC policy verification, each 
state should involve the current labels, the capabilities of all the 
processes.  The  state  transitions  are  triggered  by  the  information 
flows that satisfy the DIFC rules and the specified communication 
links. For a problem instance of whether there exists a path from a 
processes  p  to  a  processes  q,  we  introduce  a  Boolean  variable 
for  each  processes  r  to  record  whether  r  has  been 
ta int
contaminated  by  the  information  flow  originated  from  p  in  the 
current state. Then, we can use a property in CTL with the form 
“
!
”to express 
the  decision  problem.  The  property  asserts  that  there  exists  no 
state where the variable
” or in the LTL with the form “
ta int becomes true.  
taEF int
taG int
!
q
q
r
q
Preprocessing:  Some  processes  may  be  irrelevant  to  the 
verification  process.  We  use  a  preprocessing  stage  to  remove 
these processes and thus can reduce the size of the search space. 
Take  Flume  for  example.  Firstly,  we  remove  processes  that 
haven’t any ability. Secondly, we pick out the processes that only 
have  the  abilities  of  adding  tags,  and  let  them  grant  all  their 
capabilities to q on condition that the information flow from them 
to  q  is  legal,  then  remove  these  processes.  Thirdly,  we  remove 
processes  whose  abilities  of  removing  tags  are  irrelevant  to  the 
problem. We design an algorithm to find these processes.   
G1 G2  G3  G4  G5  G6  G7  G8 
Experimental results: Take Flume for example again, we first 
create an automatic generator of instances, and use the capability 
settings parameter to control the probability of processes owning 
declassification  capabilities.  Instances  are  divided  into  eight 
groups,  i.e.,  G1,  G2…,  and  G8.  We  analyze  three  kinds  of 
runtime.  Runtime-A  is  obtained  when  the  tested  instances  are 
normally  executed.  Runtime-B  is  obtained  when  the  tested 
instances  are  preprocessed.  Runtime-C  is  obtained  when  no 
transferring privileges is permitted. Experiments were performed 
using NuSMV 2.5.2 on a Windows XP with an Intel P4 2.8G CPU 
and 2GB of memory. The experiment results are shown in Table 
4, where N/A indicates that at least one instance in a group cannot 
be solved within 30 minutes. 
Table  1  algorithm  performance  under  different  parameter 
values 
Num of 
processes 
Num of Tags 
Capability settings 
parameter 
Num of processes 
after preprocessing 
Runtime-A(s) 
Runtime-B(s) 
Runtime-C(s) 
Table  1  shows  that  although  the  problem  complexity  is 
exponential-time,  our  program  can  effectively  solve  nontrivial-
sized 
the 
preprocessing  step  plays  an  important  role  in  improving  the 
efficiency. Meanwhile, slightly change of num of declassification 
privileges  influences  the  computational  time  remarkably.  And 
transferring privileges results in the double runtime. 
2  8  50  33  280  1080  N/A  N/A
2  6  42  10  215  650  1565 N/A
1  3  18  15  60  100 
300  1200
in  reasonable  amounts  of 
10  20  40  40  80  120 
6  15  34  13  68 
8  15 
3 
2 
4  6 
1  1 
time,  and 
160  200 
132  167 
instances 
25 
2 
20 
2 
91 
8 
1 
30 
2 
4.  CONCLUSIONS 
We  have  shown  that  in  general  the  problems  of  policy 
verification of Asbestos, HiStar and Flume are NP-hard. We have 
proposed an approach of model checking to solve the problem.    
5.  REFERENCES 
[1]  A. C. Myers and B. Liskov. Protecting privacy using the 
decentralized label model. ACM Transactions on Software 
Engineering and Methodology, 9(4):410-442, 2000. 
[2]  P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. 
Ziegler, E. Kohler, D. Mazieres, F. Kaashoek, and M. 
Robert. Labels and event processes in the asbestos operating 
system. In Proceedings of the 20th ACM Symposium on 
Operating Systems Principles, pages 17-30. ACM, 2005. 
[3]  N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. 
Mazieres. “Making information flow explicit in HiStar,” in 
Proceedings of Usenix Association 7th Usenix Symposium on 
Operating Systems Design and Implementation), pages 263-
278. USENIX Association, 2006. 
[4]  M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, 
E. Kohler, and R. Morris, Information flow control for 
standard OS abstractions. In Proceedings of the 21st ACM 
Symposium on Operating Systems Principles, pages 321-334. 
ACM, 2007. 
[5]  S. Zdancewic and A. C. Myers. Robust declassification. In 
Proceedings of the 14th IEEE Computer Security 
Foundations Workshop, pages 15-23. IEEE Computer 
Society, 2001. 
[6]  A. Sabelfeld and D. Sands. Dimensions and Principles of 
Declassification. In Proceedings of the 18th IEEE Computer 
Security Foundations Workshop, pages 255-269. IEEE 
Computer Society, 2005.  
[7]  M. R. Garey and D. S. Johnson. Computers and 
Intractability: A Guide to the Theory of NP-Completeness. 
New York: W. H. Freeman & Co., 1979. 
[8]  A.  Chaudhuri, P. Naldurg, S. K. Rajamani, G. Ramalingam, 
and L Velaga. EON: Modeling and Analyzing Dynamic 
Access Control Systems with Logic Programs. In 
Proceedings of the 15th ACM conference on Computer and 
communications security, pages 381-390. ACM, 2008.  
[9]  W. R. Harris, N. A. Kidd, S. Chaki, S. Jha, and Reps T. 
Verifying information flow control over unbounded 
processes. In Proceedings of 16th International Symposium 
on Formal Methods, pages 773-789. Springer, 2009. 
[10] W. R. Harris, S. Jha, and T. Reps. DIFC Programs by 
Automatic Instrumentation. In Proceedings of the 17th ACM 
conference on Computer and communications security, 
pages 284-296.  ACM, 2010. 
[11] A. Biere, A. Cimtti, E. M. Clarke, M. Fujita, and Y. Zhu. 
Symbolic model checking using SAT procedures instead of 
BDDs. In Proceedings of the 36th Annual Conference on 
Design Automation. Pages 317-320. IEEE Computer Society, 
1999.
875