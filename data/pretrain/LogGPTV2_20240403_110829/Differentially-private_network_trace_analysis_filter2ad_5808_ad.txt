parts[candidate].Select(x => x.dstIP)
.Distinct()
.Count(epsilon)
A similar fragment yields the distinct sources for each pay-
load. The reported values for each payload are correct up
to the error PINQ introduces.
With a dispersion threshold of 50 for sources and destina-
tions, the noise-free computation yields 29 payloads. Search-
ing for preﬁxes privately with  values of 0.1, 1.0, and 10.0
reveals 7, 24, and 29 of these 29, respectively. That is, we
miss 75%, 17% and 0% of the payloads. The missing pay-
loads tend to correspond to payloads with low overall pres-
ence but above average dispersal.
Thus, unlike packet length and port analysis, the accu-
racy of worm ﬁngerprinting is low at high privacy levels and
high only at low privacy levels. Because the theoretical dis-
tribution of analysis error is known in advance, the analyst
can judge that the results have low accuracy at high privacy
levels.
The approach of [27] is extended in several ways in the
paper. The extensions include reducing false positives by
incorporating the destination port into the signature and
sliding a window over the payloads to look for invariant con-
tent. We are able to express both these extensions in PINQ.
But with them, we do not ﬁnd any high-dispersal signatures
in our trace, even in the absence of noise. Our monitored
environment likely observes little worm activity because it
is behind a single public IP address.
5.1.3 Summary
We showed results from two kinds of packet-level analyses
at the opposite ends of the spectrum. One was simple dis-
tributions over packet sizes and ports, and the other was a
more involved computation that considered payloads, ports,
and IP addresses. We found that the both could be faith-
fully reproduced and the output ﬁdelity was high at least at
low privacy levels. Based on these results, we surmise that
many other forms of packet-level analyses, such as various
classiﬁcation algorithms [10], can also be implemented in the
diﬀerentially private manner.
5.2 Flow-level Analyses
We now investigate the feasibility of conducting ﬂow-level
analyses in a diﬀerentially private manner. These analyses
diﬀer from packet-level analyses as they consider properties
across groups of packets. Rather than aggregate directly
across packets, we need to ﬁrst apply non-trivial compu-
tation across the packets to yield the derived statistics of
interest.
5.2.1 Common ﬂow statistics
A common operation for network analyses is to compute
ﬂow properties such as round trip time (RTT) and loss rate.
To compute these statistics, we use the techniques used by
Swing [30]. A ﬂow refers to the standard 5-tuple.
Swing measures RTT of a ﬂow by diﬀerencing the time
between the TCP SYN and the following SYN-ACK. Con-
sidering only the handshake means that the results are not
impacted by delayed acknowledgments. To reproduce these
RTT values in PINQ, we join SYNs with SYN-ACKs, seek-
ing pairs corresponding to common ﬂows, with the ACK
(a) RTT (ms)
(b) Loss rate
Figure 3: The CDF of RTT and loss rate com-
puted without noise and with diﬀerential privacy.
All curves (and error bars) are indistinguishable.
number of the second equal to the sequence number of the
ﬁrst, plus one.
syns = packets.Where(x => x.syn)
acks = packets.Where(x => x.syn && x.ack)
times = syns.Join(acks,
x => x.src + x.dst + (x.seqn + 1),
y => y.dst + y.src + y.ackn,
(x,y) => y.time - x.time);
Swing measures ﬂow loss rate downstream of the moni-
tored link using TCP retransmissions. When a packet is
lost downstream, the monitor will observe a corresponding
retransmission. We group packets by ﬂow, and compare dis-
tinct sequence numbers to total packets:
trace.GroupBy(pkt => pkt.flow)
.Select(grp => grp.Select(pkt => pkt.seq))
.Select(grp => grp.Distinct().Count/grp.Count())
.Select(x => 1.0 - x);
Once RTT and loss rates have been computed, we can
study their distributions using the CDF primitive. Figure 3
shows the results for these two properties with the three
privacy levels. RTT is computed only for ﬂows for which we
see both the SYN and its ACK. Loss rate is computed only
for ﬂows with more than 10 packets. We see that for both
properties the results are high-ﬁdelity even at the strongest
privacy level. At =0.1, the RMSE for RTT is 2.8% and for
loss rate is 0.2%.
We also considered other properties that Swing considers,
including loss rate upstream of the monitor (computed using
out-of-order packets) and path capacity (computed using the
time diﬀerence and sizes of in-order packets). For these, the
results are similar to those shown above.
There was one class of computations in Swing that we
could not immediately reproduce in PINQ. This class oper-
ates at the level of connections, e.g., computing the number
02004006000204060CDF (thousand)epsilon=0.1epsilon=1epsilon=10noise-free0.00.20.40.60.81.0050100150CDF (thousand)epsilon=0.1epsilon=1epsilon=10noise-free130of packets per connection. A (5-tuple) ﬂow may include mul-
tiple TCP connections, and we could not isolate the connec-
tions within a ﬂow using the currently available operations.
This issue is not fundamental, however. The data owner
could pre-process the traces to add a “connection id” ﬁeld,
or (as we are currently investigating) PINQ could be ex-
tended with more ﬂexible grouping transformations. Once
connections are identiﬁed, the connection-level analyses are
straightforward.
5.2.2 Detecting stepping stones
We now consider an analysis that operates across pack-
ets of diﬀerent ﬂows rather than working within individual
ﬂows. This analysis detects stepping stone relationships be-
tween ﬂows [33]. A stepping stone occurs when a computer
is accessed indirectly, through a chain of one or more other
computers. One scenario for such usage is to launch attack
in a way that makes it it harder to trace back to the source.
Stepping stone detection [33] leverages the intuition that,
for related interactive ﬂows, the states of the ﬂows are likely
to go from idle to active together, many times.
It estab-
lishes a time-out interval (Tidle=0.5 secs) after which a ﬂow
is considered idle, and a another time window (δ=40 ms)
within which idle-to-active transitions of two ﬂows are con-
sidered correlated. It then identiﬁes as stepping stones pairs
of ﬂows that exhibit a high ratio of correlated idle-to-active
transitions to all such transitions. To minimize false posi-
tives, it also constrains the correlated ﬂows to occur in the
same order multiple times and places a lower bound on the
ratio of the ordered occurrences to idle-to-active transitions.
Identifying the set of idle-to-active transitions is a sliding
window computation that we conduct in PINQ by bucketing
time in buckets of width 2Tidle. We group packets by a
combination of ﬂow and bucket. Each group can contain
at most one activation in it’s second half—the last—and we
have enough context to conﬁrm this packet as an activation
or not.
packets.GroupBy(x => new {x.flow,x.time/(2*T_idle)})
.Where(/* if last packet is an activation */)
.Select(x => x.Last())
This captures roughly half of the activations. To produce
the remaining we shift each time by Tidle and apply the
same operation, moving packets from the front half of each
bucket to the rear.
Next, we need to identify correlated activations across
ﬂows. While we could reproduce the sliding window in the
same manner as above, the double groupings required double
the noise we must suﬀer. We ﬁnd that a better option is to
bin the activations by time, and then run frequent itemset
mining to identify pairs of ﬂows that are frequently acti-
vated together. This trade-oﬀ between ﬁdelity to the source
algorithm and privacy eﬃciency is one we will see again. De-
signing analyses for privacy from the ground up is likely to
yield better results in settings where privacy is mandatory.
The pseudo code for binning ﬂows by time is:
activations.GroupBy(x => x.time / delta)
.Select(x => x.Select(y => y.flow)
.Distinct())
Finally, we need to evaluate if the pairs thus produced
are stepping stones by the original criteria. To evaluate a
given candidate pair, we simply count the number of bins
containing both. To evaluate many pairs, we ﬁrst Parti-
tion the activations by ﬂow, which reduces the privacy cost
dramatically.

0.1
1.0
10.0
noisy corr.
0.06 ± 0.07
0.72 ± 0.10
0.78 ± 0.03
noise-free corr
0.03 ± 0.01
0.76 ± 0.12
0.82 ± 0.05
false positives
18/20
1/20
2/20
Table 5: Evaluating private detection of stepping
stones.
In the Hotspot trace, we ﬁnd a surprising number of cor-
related ﬂows (even with non-private computations), likely
because of the couplings between ﬂows introduced by the
wireless channel. This likely suggests that the original step-
ping stone algorithm needs to be recalibrated for wireless
traﬃc. For us, however, this complicates the task of fre-
quent itemset mining as the data becomes too dense. We
could tweak Tidle and δ, but that makes validation harder.
Instead, to reduce density and being able to compare
against the original parameters, we focus on the set of ﬂows
with [1200, 1400] activations. We compare against a faith-
ful implementation (in Perl) that does not approximate the
task of identifying correlated ﬂows. Thus, the comparison
includes errors introduced by privacy constraints as well as
algorithmic approximation.
Table 5 shows the results. For each value of , it shows
the average and standard deviation of the approximate cor-
relation for the top-twenty ﬂows pairs, approximately com-
puted with bucketed correlations. For those ﬂow pairs, it
also shows the actual average correlation scores (computed
with the Perl script), and what fraction had no actual corre-
lation. We see that =0.1 has a very high false positive rate.
But higher values of  have good accuracy, suggesting that
stepping stones can be detected accurately with “medium”
privacy levels. That we see accurate results at these privacy
levels also indicates that the impact of algorithmic approx-
imation is low. The threshold for correlation used in the
original analysis was 0.3, and every non-false positive can-
didate for  at 1.0 and 10.0 was above this threshold.
Summary
5.2.3
We presented two kinds of ﬂow-level analyses. One com-
putes statistics within ﬂows and another that is based on
correlations among diﬀerent ﬂows. Though there are rough
edges (that are resolvable), in both cases, we are able to
capture the essence of the analysis and the output is high
ﬁdelity. Based on these, we believe that many other forms
of ﬂow-level analyses can be conducted in a diﬀerentially
private manner. For instance, we are able to reproduce the
association-rule mining based analysis of Kandula et al. [12]
with a high ﬁdelity; we omit results due to space constraints.
5.3 Graph-level Analyses
We now turn our attention to analyses that focus on network-
wide properties rather than those of individual packets or
ﬂows. As with the previous two sections, some statistical
properties are relatively easy to produce: distributions of
in and out degrees of nodes in the graph, restricted to vari-
ous ports or protocols, distributional properties of computed
quantities of edges (e.g., the distribution of loss rates across
edges in the graph). Some useful properties, such as the
diameter of the graph or the maximum degree, are diﬃcult
or impossible to compute because they rely on a handful of
131Figure 4: The norm of anomalous traﬃc computed
with and without privacy. All four lines are indis-
tinguishable.
Figure 5: Clustering error with and without privacy.
records. We consider two complex graph-level analyses that
lie between these two extremes.
5.3.1 Anomaly detection
The ﬁrst graph-level analysis that we consider is the detec-
tion of network-wide traﬃc anomalies by observing link-level
traﬃc volumes across time. We follow the analysis proposed
by Lakhina et al. [13]. They ﬁrst assemble a matrix indexed
by link and time bucket, where each entry corresponds to
load on the link at that time. They then apply principal
components analysis (PCA) to this matrix and use the ﬁrst
few factors to represent “normal” traﬃc. Entries not well
described by these factors represent substantial deviations
from the normal, and they are labeled as anomalies and
ﬂagged for inspection.
While the algorithm is mathematically sophisticated, we
will have little trouble adapting the approach to work within
PINQ. The ﬁrst step, computing the link×time load matrix
is an aggregation:
rows = trace.Partition(links, x => x.link)
foreach (var link in links)
vals = rows[link].Partition(times, x => x.time);
foreach (var time in times)
vals[time].Count(epsilon);
While the counts are noisy, the deﬁnition of a volume
anomaly is robust to small counting errors, and no signiﬁcant
anomaly should go unnoticed. This robustness can be seen
in Figure 4 even at the highest privacy level. The graph
shows, for the IspTraﬃc dataset, the volume of anomalous
traﬃc, i.e., bytes that are badly explained by the ﬁrst few
singular vectors of the traﬃc matrix. Despite the complexity
of the analysis, the relatively low volume of noise added
to each measurement and the robustness of the technique
lead to results that are indistinguishable from the noise-free
version. The anomalies in the network, e.g., at time unit of
270, clearly stand out. The RMSE at =0.1 with respect to
noise-free results is 0.17%.
5.3.2 Passive network discovery
Eriksson et al. propose a novel approach to map network
topology [9].
It takes as input a collection of hop count
measurements between a large number of IP addresses and
a few monitors. It infers network topology by clustering IP
addresses based on these measurements—two IP addresses
that have similar hop counts to most of the monitors are
likely topologically close. This work follows the clustering
with small number of active measurements to each of the
identiﬁed clusters.
We focus on whether we can reproduce the clustering anal-
ysis in a private manner; active measurement require non-
private information by necessity. This separation is not un-
common in privacy-preserving data analysis: a large volume