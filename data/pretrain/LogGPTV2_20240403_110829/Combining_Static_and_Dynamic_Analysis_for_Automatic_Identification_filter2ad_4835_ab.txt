public Socket createSocket(String host, int port)
throws Exception {
FileOutputStream f = (FileOutputStream)
AccessController.doPrivileged
(new PrivilegedExceptionAction() {
public Object run() throws Exception {
return new FileOutputStream(logFileName);
}
});
PrintStream ps = new PrintStream(f);
ps.print("Socket opened...");
return new Socket(host, port);
}
}
Figure 2. SecurityLibrary2.java
295295
ACE effectively models the run-time stack inspection
mechanism using a context-sensitive [30] static analyzer.
The context-sensitivity policy adopted by ACE disam-
biguates each method invocation based on the invocation
context—the receiver and parameters used in that invoca-
tion. Moreover, ACE disambiguates objects based on their
allocation sites, as in Andersen’s analysis [2]; each allo-
cation site represents an equivalence class of dynamically
allocated objects. Unlike other, less precise approaches
[16], these context- and object-sensitivity policies allow
distinguishing calls to checkPermission based on the
Permission object being checked. Given the bytecode of
a Java program and library, along with all the libraries upon
which the input program or library depends, the analysis en-
gine produces a call graph G = (N, E). Each node n ∈ N
represents the invocation of a method m along with the in-
vocation context. Each edge e = (n1, n2) ∈ E models the
invocation of the method m2 in the context represented by
n2, performed by the method m1 in the context represented
by n1.
Statically computing authorization and privilege-
assertion requirements can be done by appropriately
modeling the dynamic stack-inspection mechanism. The
static model of stack inspection is based on the observation
that each path in the call graph represents a potential
run-time call stack. Since stack inspection dynamically
propagates authorization requirements backwards across a
call stack starting from a checkPermission method,
the static model propagates authorization-requirement
abstractions backwards in the call graph starting from a
checkPermission node. Authorization requirements
are statically represented as Permission allocation sites.
If P is the set of the Permission allocation sites in a
given program, its powerset, 2P , is naturally endowed with
the structure of a lattice, L := (2P ,∪,∩), where ∪ and
∩ are the usual set-union and set-intersection operators
[15]. The static authorization analysis can then be cast
to a standard data-ﬂow problem [1], in which elements
of 2P are propagated backwards in G and set unions are
performed at the merge points.
More precisely, if n ∈ N is a checkPermission
node, then n represents a call to the checkPermission
method, which takes a Permission object as a parame-
ter. Due to its inherent conservativeness (primarily due to
path insensitivity and interprocedural ﬂow insensitivity, as
explained in Section 2.1), for each checkPermission
node n the static analysis performed by ACE may over-
approximate the Permission parameter for n as a set
Q(n) containing more than one Permission allocation
site. We initialize the static analysis by deﬁning function
Gen : N → 2P as follows: If n is a checkPermission
node, then Gen(n) := Q(n), else Gen(n) := ∅. The same
considerations can be applied to a CLR program by simply
replacing checkPermission with Demand.
To represent the stack-inspection mechanism precisely,
it is necessary to model the property that privilege-asserting
code, when encountered on a run-time stack, stops the stack
walk. This behavior can be statically represented by func-
If
tion Kill
n is a doPrivileged node, then Kill(n) := P , else
Kill(n) := ∅.
: N → 2P , which is deﬁned as follows:
In the CLR, as we observed, privilege-asserting code is
parameterized with permissions. Therefore, for the CLR,
Kill : N → 2P is deﬁned in a different way, as follows:
If n is an Assert node and A(n) ⊆ P is the set of
IPermission allocation sites that could ﬂow to the pa-
rameter of Assert in the context of n, then Kill(n) :=
A(n), else Kill(n) :=∅.
The data-ﬂow equations modeling the stack-inspection
mechanism in Java or the CLR are deﬁned as follows:
Out(n)
In(n)
:= (In(n) \ Kill(n)) ∪ Gen(n)
:=
Out(m)
(cid:1)
m∈Γ+(n)
(1)
(2)
for each n ∈ N, where Γ+ : N → 2N is the successor func-
tion in G, deﬁned by Γ+(n) := {n(cid:2) ∈ N | (n, n(cid:2)) ∈ E}.
Clearly, L has ﬁnite height, |P|, and the data-ﬂow functions
from L in L induced by Equations (1) and (2) on each node
n ∈ N are monotonic with respect to the partial order ⊇ of
L. Therefore, Tarski’s Theorem guarantees that the recur-
sive computation of the solutions of Equations (1) and (2)
converges to a ﬁx point in O(|E||P|) time [15].
According to the stack-inspection semantics, the code
performing a privilege-asserting call needs to be granted
the permissions it shields [28]. This behavior can be mod-
eled with a one-step, non-recursive backward propagation
296296
of permission requirements, to be performed upon conver-
gence of the recursive computation of the solutions of Equa-
tions (1) and (2), as described by Equation (3):
In(d)
(3)
In(n) := In(n) ∪ (cid:1)
d∈Γ+(n)∩D
for each n ∈ N, where D ⊆ N is the set of the call-graph
nodes representing calls to doPrivileged in Java and
Assert in the CLR. Solving Equation (3) has a time com-
plexity of O(|E|).
Upon convergence, In(n) overapproximates the access
rights necessary to perform the invocation represented by n
at run time. It should be observed that every single method
can be represented by multiple nodes in the call graph, de-
pending on the different calling contexts with which that
If method m is represented by
method can be invoked.
nodes n1, n2, . . . , nk ∈ N, then ACE overapproximates the
permissions necessary to invoke m at run time as the set
Π(m) :=
k(cid:1)
i=1
In(ni)
(4)
While statically modeling the stack-inspection mechanism,
ACE allows identifying, for each permission q, which code
is responsible for making the call to the security-sensitive
function requiring q. This allows a developer to identify
statically, without executing the program, the portions of the
program under analysis that are candidate for being made
privilege-asserting.
As observed in Section 1, static analysis, which is sup-
posed to be sound, can become unsound due to improper
modeling of callbacks, multi-threaded code, native meth-
ods, and reﬂection. The following sections explain how
ACE ensures static-analysis soundness.
3.1 Callbacks
When analyzing a library as an incomplete program,
ACE detects all the library entry points that take param-
eters of non-ﬁnal types or that have ﬁelds of non-ﬁnal
types. Every time a method is invoked on one of those pa-
rameters or ﬁelds, if that method is itself non-ﬁnal, ACE
ﬂags that invocation as potentially requiring the special
AllPermission authorization requirement since the im-
plementation of that method is unknown during the static
analysis.
3.2 Multi-threaded Code
To prevent the freshly created stack of a child thread
from having potentially more permissions than the stack
the parent
of
thread, SBAC systems attach the par-
ent
thread’s stack to the child thread’s stack. When
checkPermission traverses the stack, all the callers in
both the child and the parent threads will have to show pos-
session of the permission being checked. ACE models this
run-time behavior statically by adding an edge from ev-
ery constructor node instantiating a Thread t to the node
where t.start is invoked.
3.3 Native Methods
Without a sound model for native methods, any security
analysis performed by ACE would be unsound since several
security-sensitive functions trigger the invocation of native
methods, such as doPrivileged and the implementa-
tion of Thread.start. For this reason, ACE statically
represents 161 native methods (those that have been estab-
lished to affect authorization) with control- and data-ﬂow-
equivalent stubs. While in the past these stubs needed to
be manually constructed, the most interesting aspect is that
now the process of creating these stubs has been automated
with a tool [37] that converts C code into Java code that is
control- and data-ﬂow-equivalent to its C counterpart. The
Java bytecode representing the automatically translated na-
tive methods is then seamlessly integrated in the analysis
scope. The process of automatic translation prevents errors
in the stub creation and facilitates the creation of new stubs
when new versions of the Java libraries become available.
3.4 Reﬂection
ACE models reﬂection by identifying the type to which
the result of a call to newInstance is cast and by using
that type for disambiguation. When the type cannot be in-
ferred, java.lang.Object is conservatively assumed.
The dynamic analysis performed by ACE can be used to
reﬁne conservative results.
4 Dynamic Analyzer
A major novelty of ACE is its dynamic-analysis com-
ponent and the static- and dynamic-analysis synergy. For
every method m in the program under analysis, the static
analyzer of ACE reports not only the set Π(m), overap-
proximating the set of permissions required to invoke m,
as deﬁned by Equation (4), but also, for each permission in
Π(m), the execution path that may lead to that authoriza-
tion requirement at run time. This information is then used
to dynamically recreate the invocation of m in the context
reported by the static analysis.
The dynamic analyzer uses reﬂection to load classes,
create objects, and invoke methods on those classes and
objects. This way, the process of creating a test case is
completely automated. A major concern when perform-
ing dynamic analysis of untrusted code is the potential abil-
ity of that code to compromise the integrity of the under-
lying system. To prevent this, ACE acts as a layer be-
tween the program p under analysis and the underlying sys-
tem. Upon startup, ACE enforces a SecurityManager
and conﬁnes p into a sandbox in which p is initially
granted no access rights. Any attempt by p to escape from
its sandbox is intercepted by the SecurityManager,
which raises an AccessControlException. How-
ever, rather than letting the system stop working, ACE
catches the Exception and interactively prompts the
user to make a security decision about
In partic-
ular, ACE extracts the following information from the
AccessControlException:
1. Precise information about
sensitive operation (for
passwords.txt in read mode)
the attempted security-
opening ﬁle
example,
it.
2. The fully-qualiﬁed name of the Permission class
guarding the attempted security-sensitive action,
along with the explicit String parameters (tar-
get and modes),
if any, of the Permission ob-
ject (for example, java.io.FilePermission
"passwords.txt", "read")
3. All the callers currently on the stack at the time the
security-sensitive operation was attempted
4. The Java ARchive (JAR) ﬁle of the class attempting
to escape from the sandbox, along with the Uniform
Resource Locator (URL) of that JAR ﬁle and the cer-
tiﬁcates of the principals who digitally signed that JAR
ﬁle
5. Precise information (source ﬁle name, class name,
method signature, and line number) on the portion of
code requesting the privilege, which is also the portion
of code in p that should be made privilege-asserting to
prevent client code from requiring unnecessary autho-
rizations
6. The set of permissions already granted to the code, re-
trievable from the ProtectionDomain of the class
attempting the security-sensitive action [14]
The user can judge, based on this information whether p
should be granted the right to access the security-sensitive
resource.
In that case, the ACE layer automatically up-
dates and refreshes the security policy, without the need for
restarting the program or manually editing the policy. The
invocation of m is automatically repeated and, if no other
permission is required, it will now succeed; otherwise, the
user will be prompted with a new security decision.
4.1 Elimination of Static False Alarms
The process described is iterated for every method
m that, according to the static analysis, may attempt
It m does not cause any
a security-sensitive action.
AccessControlException when ACE executes it in
297297
the context reported by the static analysis, that means that
the static analysis had reported a false alarm, and that the
corresponding access right should not be granted to p. This
process enables ACE to eliminate statically-detected false
alarms and to build a policy just sufﬁcient to execute the
methods that were dynamically analyzed. Furthermore, the
dynamic analyzer of ACE allows ﬁltering out those static
false alarms caused by the inability of a static analyzer to
perform String computations, as observed in Section 1.
4.2 Conﬁgurable Security Subsystem
In the Java type system, any object implementing a class
that extends java.lang.SecurityManager can be
a valid SecurityManager. ACE enables the enforce-
ment of SecurityManager objects of different sub-
types. This is an important feature because while the stan-
dard SecurityManager enforces the stack inspection
mechanism by calling checkPermission, a different
implementation of the SecurityManager may enforce ac-
cess control in a different way [24, 9]. This feature is es-
pecially desirable since it has been proved that the stack in-
spection mechanism is unsound [25]. A static analyzer that
was built to model the stack inspection mechanism typically
does not have the ﬂexibility to automatically model a dif-
ferent access-control mechanism. Therefore, the dynamic
analysis component of ACE becomes a useful feature when
the behavior of the run-time SecurityManager deviates
from the standard one.
4.3 Security Side Eﬀects
Unlike other dynamic analyzers, ACE has a frame-
work for dynamically detecting the security side effects
of each method invocation, such as the side effect caused
by readLogFile2 on the permission requirements of
readLogFile1 in Figure 1, as explained in Section 2.
Speciﬁcally, for any policy change, ACE retests all the paths
of execution previously traversed, and detects whether new
authorizations are necessary. By dynamically analyzing
the results of the previously executed static analysis, ACE
achieves complete coverage of the methods requesting per-
missions and identiﬁes a policy compliant with the Principle
of Least Privilege.
4.4 Privilege-Asserting-Code Analysis
As highlighted in Point 5 above, the dynamic-analysis
component of ACE can be used to identify the portions of li-
brary code candidate to be made privileged to prevent client
code from requiring unnecessary access rights. The recom-
mended location is optimal in the sense that it is always the
closest to the authorization check.
4.5 Dynamic Policy Minimization
than
stronger
Another novel contribution of ACE is its ability
to minimize access-control policies. As an example,
java.io.FilePermission "dir/*", "write"
is
java.io.FilePermission
If a program p re-
"dir/log.txt", "write".
quires both these permissions,
it is sufﬁcient to list in
the policy for p only the stronger one, which makes the
policy easier to maintain. ACE performs minimization
automatically by instantiating all
the Permission
objects detected, and by then executing the implies
method of each Permission object against all the other
Permission objects.
If p and q are Permission
objects required by p, and p.implies(q) returns true,
then only p needs to be added to the policy for p. Unlike
previous, unsafe policy-minimization approaches [20],
ACE prevents potentially-malicious code embedded into
implies methods from harming the system by executing
implies only under the system SecurityManager.
5 Experimental Results
This section presents the experimental results on pro-
duction level code. The applications analyzed, listed in
both Tables 1 and 2, are all from SourceForge [32], except
Crypto, which is obtained by combining in one project all
the cryptography and Transport Layer Security (TLS) ex-
amples from two Java security books [28, 27].
Table 1 describes the general characteristics of the appli-
cations along with statistics from executing the static an-
alyzer of ACE for authorization- and privilege-assertion-
requirement detection. For each application, the size of the
application itself and the sum of the sizes of its supporting
libraries (including the Java core libraries) are displayed.
The time taken by the static analyzer is reported. These re-
sults were obtained on an IBM ThinkPad T23 with 1 GB
of RAM and a processor of 1.3 GHz. The operating sys-
tem was Microsoft Windows XP SP2. The static analyzer
was itself implemented as a Java program running on a Sun
Microsystems’ Java Runtime Environment (JRE) V1.4.2.
Name
Size (MB)
Aamfetch
Crypto
Ganymed
Gnu
JavaSign
JPassword
Applications
0.106
0.760
0.336
1.867
0.174
0.678
Libraries
36.921
37.724
36.921
52.408
38.441
36.921
Static Analysis
Time Memory
251 MB
324 MB
374 MB
622 MB
675 MB
397 MB
489 sec
321 sec
567 sec
872 sec
639 sec