title:Defending Against Malicious USB Firmware with GoodUSB
author:Jing (Dave) Tian and
Adam Bates and
Kevin R. B. Butler
Defending Against Malicious USB Firmware with GoodUSB
Dave (Jing) Tian
University of Florida
daveti@uﬂ.edu
Adam Bates
University of Florida
adammbates@uﬂ.edu
Kevin Butler
University of Florida
butler@uﬂ.edu
ABSTRACT
USB attacks are becoming more sophisticated. Rather than using
USB devices solely as a delivery mechanism for host-side exploits,
attackers are targeting the USB stack itself, embedding malicious
code in device ﬁrmware to covertly request additional USB inter-
faces, providing unacknowledged and malicious functionality that
lies outside the apparent purpose of the device. This allows for
attacks such as BadUSB, where a USB storage device with mali-
cious ﬁrmware is capable of covertly acting as a keyboard as well,
allowing it to inject malicious scripts into the host machine. We
observe that the root cause of such attacks is that the USB Stack ex-
poses a set of unrestricted device privileges and note that the most
reliable information about a device’s capabilities comes from the
end user’s expectation of the device’s functionality. We design and
implement GoodUSB, a mediation architecture for the Linux USB
Stack. We defend against BadUSB attacks by enforcing permis-
sions based on user expectations of device functionality. GoodUSB
includes a security image component to simplify use, and a honey-
pot mechanism for observing suspicious USB activities. GoodUSB
introduces only 5.2% performance overhead compared to the un-
modiﬁed Linux USB subsystem. It is an important step forward in
defending against USB attacks and towards allowing the safe de-
ployment of USB devices in the enterprise.
Keywords
USB, BadUSB, Linux Kernel
1.
INTRODUCTION
The USB interface is widely acknowledged as a dangerous vec-
tor for attack. In many organizations, use of USB ﬂash drives is
restricted or outright banned [1] due to their potential for propa-
gating malicious software. USB storage has served as a delivery
mechanism by the world’s most nefarious malware families [36,
38], and even in state-sponsored attacks [12]. In response, antivirus
software is becoming increasingly adept at scanning USB storage
for malware [26]. Recently an even more insidious form of USB-
based attack has emerged. In the BadUSB attack [7, 25], a mali-
cious USB device registers as multiple device types, allowing the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07-11, 2015, Los Angeles, CA, USA
© 2015 ACM. ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818040
device to take covert actions on the host. For example, a USB ﬂash
drive could register itself as both a storage device and a keyboard,
enabling the ability to inject malicious scripts. This functionality
is present in the Rubber Ducky penetration test tool [16], which is
now available for public sale. Unfortunately, because USB device
ﬁrmware cannot be scanned by the host, antivirus software is not
positioned to detect or defend against this attack. This problem is
not just limited to dubious ﬂash drives: any device that communi-
cates over USB is susceptible to this attack.
We observe that the root cause of the BadUSB attack is a lack of
access control within the enumeration phase of the USB protocol.
Devices are free to request that any number of device drivers be
loaded on their behalf. However, existing USB security solutions,
such as whitelisting individual devices by their serial number, are
not adequate when considering malicious ﬁrmware that can make
spurious claims about its identity during device enumeration. Stan-
dard USB devices are too simplistic to reliably authenticate, and
secure devices with signed ﬁrmware that could permit authentica-
tion are rare, leaving it unclear how to defend ourselves against this
new attack.
Our key insight in this work is that the most reliable source of
information about a device’s identity is the end user’s expectation
of the device’s functionality. For example, when a user plugs in a
ﬂash drive, they are aware that they have not plugged in a keyboard.
We use this insight to design and implement GoodUSB, a host-side
defense for operating systems against BadUSB attacks. GoodUSB
features a graphical interface that prompts users to describe their
devices, and a kernel enforcement mechanism that denies access
to features that fall outside of that description. Our system also
features a security image system to simplify device administration
using security pictures, and a novel USB Honeypot mechanism for
proﬁling BadUSB attacks. GoodUSB even provides an added layer
of protection for “secure” devices with signed ﬁrmware, ensuring
that BadUSB attacks will still fail even if the manufacturer’s sign-
ing key falls into the wrong hands.
Our contributions are summarized as follows:
• Enforce Permissions for USB Devices. We design and im-
plement a permission model and mediator for the enumera-
tion phase of the USB protocol. Our solution features an in-
tuitive graphical interface that simpliﬁes user participation,
a Linux kernel enforcement mechanism, and a virtualized
honeypot that automatically redirects and proﬁles potentially
malicious devices. To our knowledge, our USB Honeypot is
the ﬁrst to appear in the literature that is capable of observing
BadUSB attacks.
• Demonstrate Robustness Against BadUSB Attacks. We
test GoodUSB against Rubber Ducky [16] and Teensy [31],
USB devices are widely acknowledged as a dangerous vector for
attacks, particular with regards to storage devices. Flash drives not
only permit the exﬁltration of sensitive data, they also facilitate the
propagation of viruses and other malware. Due to the popularity of
auto-run features in operating systems, malicious payloads carried
on USB storage can at times be installed without user knowledge
or consent. This makes ﬂash drives particularly devastating when
used in social engineering attacks, where the compromise of a host
can be as simple as tricking the user into plugging in a USB key. As
a result of these threats, enterprises often restrict or ban the use of
USB storage devices, even going so far as to super glue USB ports
shut [1], depriving employees of the beneﬁts of portable storage
media.
Recently, a more insidious form of USB-based attack has emerged
– rather than placing malicious code within storage, malware is
embedded into the ﬁrmware itself. In a class of attacks broadly re-
ferred to as BadUSB, malicious devices covertly request additional
interfaces during enumeration, allowing them to attack the host.
An example of Nohl et al.’s BadUSB attack is denoted by the dot-
ted line in Figure 1, in which the ﬁrmware of a ﬂash storage device
is rewritten to register as both a storage and human interface device
(HID), allowing it to inject keystrokes that open a shell and down-
load malware from the Internet [7, 25]. Similar functionality is
provided by the Rubber Ducky penetration test tool and the Teensy
USB development board, which are sold online [16, 31]. Unlike
traditional USB attacks, in BadUSB, the host cannot use antivirus
software to detect the presence of a malicious payload within the
device. Moreover, with BadUSB, any device is a potential attack
vector, not just storage devices.
The use of signed ﬁrmware as a defense against BadUSB is noted
by both Nohl et al. [25] as well as Imation’s IronKey team [19].
Indeed, signed ﬁrmware dramatically increases the complexity of
performing a BadUSB attack. This is because sophisticated USB
devices, such as IronKey, are able to measure device ﬁrmware and
verify its signature before permitting it to load. However, signed
ﬁrmware is not a panacea against powerful state-sponsored adver-
saries, who through coercion or outright attack may be able to ob-
tain device manufacturers’ signing keys. In fact, obtaining legit-
imate signatures for malicious device drivers was an integral step
in the success of the Stuxnet attack [12]. Even when considering
“secure” USB devices, there is still a need for a defensive layer to
protect from BadUSB attacks.
3. DESIGN
In this section, we identify the key challenges to the design of a
security mechanism for USB enumeration. In considering BadUSB,
we observe that the root cause of this threat is that USB drivers
effectively represent a set of system privileges, and yet the USB
protocol does not provide a means of restricting devices’ access to
these privileges. Therefore, solving the BadUSB problem requires
the introduction of a security layer to the enumeration phase of the
USB protocol. We discover that a number of unique challenges ex-
ist due to the plug-and-play nature of USB that prevents traditional
access control mechanisms from being suitable in this environment,
and subsequently propose solutions to each of these obstacles. The
technical details of our solution can be found in Section 4.
3.1 Threat Model & Assumptions
The goal of our system is to provide a defense against BadUSB
attacks in a security-conscious enterprise environment where myr-
iad different USB devices are used each day. Due to the sensi-
tive nature of such organizations, they have already deployed ad-
vanced USB malware scanning kiosks that effectively detect mali-
Figure 1: During USB enumeration, the host discovers the device
and the drivers (interfaces) that need to be loaded in order for it to
operate. In the BadUSB attack, marked by a red dotted line, the
device requests additional, unexpected interfaces that allow it to
perform covert activities on the system.
two of the widely available penetration and development tools
that are capable of executing BadUSB attacks. We demon-
strate our system’s ability to block the actions of these de-
vices’ ﬁrmware. We also demonstrate GoodUSB’s compati-
bility with a variety of benign devices, including ﬂash drives,
headsets, and smart phones.
• Mitigate Performance Overhead. Our results show that
GoodUSB imposes only a 5.2% performance overhead (7
milliseconds) compared to enumeration in an unmodiﬁed Linux
USB subsystem, with our device class identiﬁer routine only
adding 9 microseconds to the enumeration process.
Section 2 of the paper provides background on the pertinent as-
pects of the USB speciﬁcation as well as on USB attacks. In Sec-
tion 3, we identify the key challenges in securing the USB proto-
col against BadUSB, and propose our solutions. In Section 4 we
present the full design and implementation of the GoodUSB archi-
tecture. Section 5 features our evaluation. We discuss common
questions about GoodUSB, and future work in Section 6. In Sec-
tion 7 we provide an overview of related work, and in Section 8 we
conclude.
2. BACKGROUND
The Universal Serial Bus (USB) speciﬁcation deﬁnes protocols
and hardware used in communication between a host and a device
across a serial bus [8]. In the enumeration phase of the USB pro-
tocol, a USB host controller residing within the host operating sys-
tem initiates a series of queries to discover information about the
device’s functionality. A simpliﬁed example of device enumera-
tion for a USB ﬂash drive is shown in Figure 1. After enumeration,
the host loads USB kernel drivers (Interfaces) that allow the de-
vice to operate; USB devices are often complex, serving multiple
functions, and therefore a single device can request one to many in-
terfaces from the host. While some of the more sophisticated USB
devices, notably smart phones, often require a custom interface,
there are also hundreds of single-purpose interfaces that are de-
ﬁned in the speciﬁcation [8]. For compatibility reasons, most USB
devices usually use these standard interfaces whenever possible.
2.1 When USB Goes Bad
HostDeviceSetAddress(n)ACKGetDescriptor(Device)MNF: Kingston, Product: Flash DriveGetDescriptor(Interface)StorageHuman InterfaceFigure 2: GoodUSB introduces a mediator in the USB stack of the
host. The mediator restricts USB devices (subjects) access to USB
drivers (objects) according to policy.
cious storage payloads [26, 28]; hence, traditional USB attacks are
not a concern. We assume the use of standard commodity devices
that lack advanced security features such as signed ﬁrmware. While
signed ﬁrmware can be employed to defeat BadUSB, such features
are costly, and to our knowledge are only available for USB storage
devices [18]. We assume that employees in our operating environ-
ment are required to participate in a security orientation.
We consider an Advanced Persistent Threat attack that is at-
tempting to further its presence in the enterprise through distribut-
ing USB devices with malicious ﬁrmware (i.e., BadUSB). The ma-
licious devices have entered the physical premises via supply-chain
compromise or social engineering. We conservatively assume that
these devices are subject to byzantine faults during participation
in the USB protocol. The device may make any claim about its
identity during enumeration, and can attempt to confuse or evade
the device identiﬁcation mechanism that our system introduces; for
example, the device can lie about its manufacturer and product ID.
The device may also alter its responses each time it enumerates.
Moreover, the adversary may have changed the physical casing of
the device so that its functionality is not apparent through visible
inspection.
Finally, we make the following assumptions about the state of the
host system on which our security mechanism is being deployed.
We assume the host is in a correct state prior to connecting to any
USB devices. We also assume that the host’s USB software stack is
correct, and does not contain any exploitable software ﬂaws. Con-
ceivably, a BadUSB device could send malformed messages that
could exploit a software vulnerability (e.g., buffer overﬂow) in the
host controller or driver. This is an important problem in itself, and
fuzzing techniques have been proposed elsewhere in the literature
to detect such faults [35]; however, it is orthogonal to our goal of
addressing a fundamental vulnerability in the USB protocol.
3.2 Mediating USB Interfaces & Drivers
The fundamental vulnerability in USB that gives rise to BadUSB
attacks is that arbitrary USB interfaces can be enumerated, com-
prising a set of unrestricted privileges provided to a USB device.
In response, we propose the introduction of a permission validation
mechanism that authorizes device’s access requests to individual
USB interfaces. The proposed mediator is shown at a high level
in Figure 2. During the USB enumeration phase, a Device Iden-
tiﬁer authenticates the connected device and provides an subject
ID. When the host queries the device for its interfaces, the device’s
response represents an access request. The subject ID and access
request are passed into a Policy Engine. Based on the Policy, the
engine then individually authorizes the requested interfaces prior to
loading the drivers on behalf of the device.
While restricting device activity at the driver granularity is a sig-
niﬁcant improvement over the status quo, it would also be desir-
able to restrict device actions at ﬁner granularities. For example, a
device that registers as a Human Interface Device (HID) but only
Figure 3: GoodUSB cannot trust what the device claims to be dur-
ing enumeration; however, the device’s claims can be veriﬁed by
checking them against the user’s expectation as to what the de-
vice is and how it should operate. If veriﬁcation fails, the device
is ﬂagged as potentially malicious, and is redirected to a honeypot
virtual machine.
makes use of the Volume Up and Volume Down keys is danger-
ously over-capable; while use of those two keys alone is harmless,
with the full HID driver the device can effectively take any action
on the host. Unfortunately, this requires instrumentation of indi-
vidual USB drivers, so it is not a general solution to the BadUSB
problem. However, our mediator must be extensible, supporting
security-enhanced USB drivers as they are made available. In Sec-
tion 4, we instrument the general USB HID driver to provide access
to volume controls only, preventing a USB headset from running in
an over-capable state, such as running as a keyboard.
3.3
Identifying USB devices
We now describe the Device Identiﬁer component of our USB
mediator. A fundamental requirement of any access control system
is authenticating the subject. The device descriptor passed by the
USB device during enumeration contains information such as the
manufacturer, product, and a unique serial number for the device.
However, the problem of identifying the device is actually much
more complicated. As we assume devices are subject to byzantine
faults, we cannot trust any message that we receive from the de-
vice during enumeration. If an adversary has rewritten a device’s
ﬁrmware, it can change its response during any message in the enu-
meration, including lying about its manufacturer and model num-
ber. When the device’s reported descriptor and even its physical