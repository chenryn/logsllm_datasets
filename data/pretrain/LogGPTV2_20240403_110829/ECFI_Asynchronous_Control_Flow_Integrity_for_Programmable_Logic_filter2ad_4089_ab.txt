needs to gain knowledge about the control system behav-
ior, and secondly, the attacker needs to recover semantics
of PLC memory locations that are mapped to physical I/O
to execute process manipulation. SABOT [29] can gener-
ate such payload and retrieve the mapping of the system
automatically assuming that attacker is fully aware of the
control system behavior. However, it needs time to process
and model the PLC behavior to be able to recover the map-
ping of the I/O interfaces and the PLC memory. Looking into
the Stuxnet case [17] again, the attackers were recording the
process control data for weeks after infection before they
start their actual process manipulation. A similar technique
(infect, wait, then manipulate) was used in Ukrainian power
grid blackout [8, 51].
2.4.2
IT Attacker Model: In this paper, we assume an attacker
who tries to hijack the control flow of a vulnerable hard real-time
PLC runtime using a ROP attack. We also assume that the PLC has
a modern RTOS with MMU support and is equipped with exploit
mitigation techniques such as ASLR, PIE, NX, and stack cookies, but
the attacker can bypass such defenses using an information-leak
primitive within the PLC runtime. Our CFI approach must be able
to detect any attempts of arbitrary code execution in a protected
application/service inside the PLC according to the defined scope
of the attack.
Figure 1: Overview of PLC runtime operation in a program
scan cycle and its interaction with the I/O.
runtime which executes bytecode is the Siemens S7 series PLC
runtime. In binary-based logic, the logic program gets converted to
a binary first and then gets uploaded to the PLC. The PLC runtime
then executes the binary inside the PLC. An example of PLC run-
time that executes executable is the 3S Codesys runtime, which is
currently used by more than 261 PLC vendors [14] including ABB,
Schneider-Electric, Beckhoff, Wago, Mitsubishi, and Bosch. In this
paper, we only focus on PLCs which are using binary logic in their
runtime. However, a similar approach employed in RockJIT [34]
can also be used to protect bytecode based PLC logic.
2.3 Existing Attacks and Defenses against PLCs
For an attacker, the ultimate objective when attacking an indus-
trial control network is to manipulate the physical process without
being detected by advanced intrusion detection systems (IDS) or
plant operators [3]. As described by Abbasi et. al. [2] there are
three family of attacks against PLCs named as Firmware mod-
ification attacks (FMA) [6, 37], Configuration manipulation at-
tacks (CMA) [29, 30] and Control-flow attacks (CFA) [22, 22]. For
FMA [5, 16] and CMA [6, 28] attacks in the PLC, at least one tailored
defensive solution exists. Although several techniques have been
proposed to detect or prevent control-flow attacks on general IT
systems or generic embedded systems [4], currently, no research
suggests a control-flow detection mechanism specifically designed
for real-time PLCs.
2.4 Attacker Model
Since a PLC is a computer device which is mostly being used in Op-
erational Technology (OT) domain of an Industrial Control System
(ICS), we can not just describe our attacker model in the traditional
Read Inputs Logic ProgramUpdate OutputsLogicVariable Table (VT)PLC RuntimeInputs from I/O Set PointsOutput to I/O (Pin 22 = 001)Read/Write VTVirtually Mapped I/OAddressValue0XBEFFFFFF001Write Output valueProgram ScanACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and Sandro Etalle
3 ECFI DESIGN
In the following, we present ECFI, our CFI enforcement system that
was designed and tested for PLCs.
3.1 Design Considerations for CFI in a PLC
Generally speaking, we can divide any protection mechanism into
active and passive forms. In the case of active protection mechanism,
the system will prevent the attack upon detection, while in the case
of a passive protection, the system raises an alert notifying about
the attack. In a CFI context for a PLC, active protection means that
the PLC runtime gets terminated upon a control-flow violation.
Passive detection in a PLC means that the CFI system raises an
alert upon a control-flow violation without any intervention. In the
following, we describe the parameters for designing a CFI solution
for PLCs:
Availability: to the best of our knowledge, all existing CFI im-
plementations for embedded systems act as an active protection
system and if deployed in a PLC, terminating the PLC runtime
process upon control-flow hijacking would violate the availability
requirement of the PLC. In case of a false positive, an active pro-
tection system could hence cause a dumb disruption in a critical
infrastructure. However, one can rightfully argue that this is an
engineering issue and existing CFI systems can get fixed to act as a
passive protection system. To maintain the availability of the PLC,
ECFI serves as a passive protection system. While one can use ECFI
as an active protection system (by activating a related flag in the
checker), we do not enable it by default except the process requires
such an intrusive approach in an industrial environment.
Timeliness: real-time properties of a PLC is measured by pre-
dicting its execution time. Any CFI implementation that uses con-
ditional branches, exception handlers, or loops can significantly
complicate the predictability of the execution time [41] in the PLC
program. To address this issue, a CFI approach must then per-
form a complex Worst-case Execution Time analysis. Otherwise,
the entire PLC software must be considered as unpredictable and
thus non-real-time, which is unacceptable. Unfortunately, no CFI
system provides such an analysis. Looking at the two existing well-
known CFI system for embedded systems named as MoCFI [12]
and CFR [38], shows that they use conditional branches [12, 38],
exception handler [12] and loops [38], which makes them unsuit-
able for a real-time PLC. ECFI does not use such instructions in its
instrumentation code.
Additionally, in existing CFI systems, the CFG verification mech-
anism is always part of the application and is not running in a
separate process. Due to the usage of conditional branches, excep-
tion handlers and conditional loops in the CFI, the PLC process
might also face the priority inversion problem [27] which is not
acceptable in real-time systems. The priority inversion is a problem
where a lower priority task in the software locks the resources or
execution of a higher priority task. As a result, the higher priority
task can experience an additional delay since the lower priority
has locked the resource up to the end of its execution. As a result,
a higher priority task will fail to execute its tasks in a predictable
manner. In real-time systems, a priority inversion should not hap-
pen. For a hard real-time PLC, the highest priority task is the actual
Figure 2: Simplified design of ECFI.
control program which executes the process (so-called program
scan cycle), while the lower priority task is the CFG verification.
With the traditional approaches, the PLC functions call/return must
wait until CFG verification system decide whether a control-flow
violation occurred or not. ECFI separates the CFG verification pro-
cess from the protected runtime to avoid the complex execution
time analysis and prevent the priority inversion problem.
As mentioned before, ECFI considers the availability and time-
liness requirement of the real-time PLC more important than the
security of it and thus makes compromises to address them.
3.2 General Principle of Operation
ECFI is a compiler-level CFI approach which injects instrumentation
instructions into the existing assembly code of the application
during the compilation phase. Figure 2 depicts a high-level overview
of the architecture of ECFI. The system consists of five modules:
(1) Instrumentation instructions to copy the real control-flow
data to the ring buffer.
(2) Code Parser-Injector (CPI), which parses the application’s
assembly code and adds instrumentation instructions to the
code.
(3) Ring buffer shadow stack that stores the runtime control-
(4) Control-flow graph that contains the correct execution path
(5) Checker that verifies the control-flow information with the
flow data.
of the application.
CFG.
3.3 Instrumentation Instructions
The instrumentation instructions are a set of instructions which
copy the control-flow values to the ring buffer shadow stack. Our
code does not contain any conditional branch, loop, function pointer,
direct and indirect recursion, or exception handler. Since a PLC
runtime must be real-time, it is essential to have instrumentation
instructions that have predictable worst execution time. Therefore,
we made the computation of Worst-Case Execution Time (WCET)
in our instrumentation instructions feasible by following the recom-
mendations made by Puschner et al. [41] for real-time applications
using CPU cycles.
Application Source CodeApplication Assembly CodeInjecting Instrumentation Instructions (CPI Module)Instrumented ApplicationCompileCFGCFI Checker and CPU Cycles MonitoringRing Buffer Shadow StackInstrumentation InstructionsGenerate CFG12345ECFI: Asynchronous Control Flow Integrity for Programmable Logic Controllers
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
a lower priority. The ring buffer shadow stack is a fixed-size shared
memory region that is accessible to the real-time application and
control-flow checker subsystem. Whenever the CPU executes an
instrumented BB, the BB writes the destination or return address,
combined with their respective identification number, to the ring
buffer. In this paper, we call the identification number HotsiteID.
Finally, the ring buffer acts as a shared memory which is accessible
to both checker application and the protected PLC runtime. The
ring buffer is created with group permission (via S_IWGRP and
S_IRGRP).
Checker Application. The checker application is a non-real-time
program running as a separate process with a lower priority (com-
pared to the protected PLC runtime application). Instead of invoking
the instrumentation instruction every time it writes to the shadow
stack, the checker will wait for the operating system to allocate
system resources. The checker then reads the data from the shadow
stack, and copies the data to its dynamic memory, and evaluates
the control-flow data using the CFG. By default, the checker ap-
plication will not terminate the PLC runtime upon the detection
of a control-flow hijacking attack (while we have a flag in ECFI to
kill the process). Instead, it generates a log regarding the attack,
which a plant operator can read. To securely store the log files, the
checker application runs under a different user (while being in the
same user group as the PLC runtime) and the log files are only
write/readable by that user and therefore, not accessible by the PLC
runtime user.
Lock-Free Design. There are two features in our shadow stack
which make our approach real-time friendly. First, during write
or read operations, no locking is enforced on the shadow stack.
Consequently, while the shadow stack is being written, the checker
application can read it at the same time. By not locking the shadow
stack, we avoid the common priority inversion problem in real-time
systems caused by resource/memory locking.
Second, our shadow stack allows memory overwrite. This means
that if there are no resources available for the checker to execute
and the shadow stack gets full, the real-time application is allowed
to overwrite previously written control-flow data. Therefore, at the
end of the ring buffer, there is no forced call of the checker to free
the shadow stack (by reading its values). However, this feature can
be used by the attacker to overwrite the ring buffer.
Ring Buffer Protection. An attacker may want to take advantage
of the ring buffer lock-free mechanism for attack concealment.
For that she can, for example, perform a Denial of Service (DoS)
attack against the PLC to increase its CPU usage. Once the CPU
usage increases, the checker application less frequently verifies
the control flow of the PLC runtime (or halts until resources are
available again). In the meantime, the attacker can exploit the ring
buffer by overwriting it with fake values. However, since PLC is a
hard real-time machine, the attacker’s capabilities can be limited
by monitoring the number of CPU cycles performed in every PLC
program scan cycle. Also for an attacker to remain stealth, the DoS
attack should not be prolonged, since DoS attacks would diminish
the PLC’s ability to update I/O values on time. Anomalous behavior
of PLC I/O might be detected by the PLC operator. Therefore, the
Figure 3: Ring buffer shadow stack design.
3.4 Instrumentation Injector
There are two locations in the execution flow of the ARM-based
application where an attacker can hijack the control flow. First, by
modifying the register value in the indirect function call (indirect
branches). Second, by modifying return address values right before
the return instruction (returns). Therefore, these two locations must
be instrumented, and the program execution flow information must
be passed to the ring buffer shadow stack before the actual call or
branch occurs.
The instrumentation injector will parse the assembly code of
the application and insert the instrumentation instructions to those
two locations:
Indirect Branches. In the ARM architecture, indirect function
calls are performed by the BLX instruction. The BLX instruction
calls a value in a register (e.g., BLX r3) where the register value is
dynamically calculated at runtime.
The indirect branch destination will be passed to our shadow
stack for verification (see Figure 3). We do not control the destina-
tion of direct branches since the direct branches have a hard-coded
destination in the application binary, and it would be impossible for
an attacker to hijack the control flow right before direct branches.
Note that we consider all instructions which directly modify the
Program Counter (PC) in ARM architecture as indirect branches
(e.g., LDR PC, RegX).
Returns. Another way to hijack control flow on the ARM archi-
tecture is when the function or the basic block (BB) returns. The
return address will be pushed onto the stack and will be recovered
at the end of function epilogue. If an attacker manages to overwrite
the stack value that holds the return address, she can obtain con-
trol over the execution flow of the PLC runtime. Therefore, ECFI
monitors all function returns in the PLC.
3.5 The Ring Buffer and Checker Design
To ensure the PLC runtime remains real-time, we need to design
a protection system that does not disrupt the real-time execution
of the PLC runtime. We designed our ring buffer shadow stack
which is a shared memory in a way which is lock-free and asyn-
chronous. This design makes it possible for the RTOS to halt the
ECFI system whenever another important PLC task such as I/O
operations needs resources, while the ECFI checker process runs on
Instrument  (ID=0x90)Hard Real-Time PLC RuntimeRing Buffer Shadow StackVerify  Control FlowWrite R3, 0x90to bufferRead Multiple  When Resource AvailableInstrument (ID=0x86)Non-Realtime CFI VerificationBLX R3                            (Indirect Function Call)BX R14/POP {R7,PC}          ( Function Return)CPU Registers    R3     LR 0x1053C (Func1)0x76beffaaWrite [LR], 0x86to bufferRead(0x1053C, 0x90, 0x104b8, 0x86)    0x76beffaa0x104b8 (main+0x48)........StackACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and Sandro Etalle