OOppeennrreessttyy中中文文编编程程网网
version 0.1
Last generated: November 08, 2016
© 2016 OpenResty中文编程网 http://www.openresty.com.cn
Openresty中文编程网 User Guide PDF last generated: November 08, 2016
Table of Contents
OOppeennRReessttyy中中文文编编程程
自动测试......................................................................................................................... 2
介绍................................................................................................................................ 3
Test::Nginx...................................................................................................................... 4
测试套件组织.................................................................................................................. 6
测试文件组织.................................................................................................................. 8
执行测试....................................................................................................................... 17
准备测试....................................................................................................................... 26
测试错误情况................................................................................................................ 36
PI:EMAIL i
自动化测试 PDF last generated: November 08, 2016
自动化测试
SSuummmmaarryy:: 自动化测试在软件开发和维护中起着重要的作用。
== 自动化测试
自动化测试在软件开发和维护中起着重要的作用。 OpenResty 提供了一个数据驱动
的测试框架，可以为 NGINX C 模块、Lua 库、甚至 OpenResty 应用，编写声明式测
试用例。 测试用例是以一种规范的格式写成的，既有直观的可读性和可维护性，也
易于机器的处理。 数据驱动的方法可以让同样的测试用例集，用各种完全不同的方
式运行。这样有利于在不同的场景下，或者配合外部的各种工具，暴露出问题。
这个章节介绍的 Test::Nginx 测试框架，在几乎所有的 OpenResty 组件中都广泛的用
于组织测试套件， 包括 ngx_http_lua 模块，大部分的 lua-resty-* Lua 库， 以及像
CloudFlare 的 Lua CDN 和 Lua SSL 这样成熟的商业应用。
关键字:测试（Testing）, 模拟（Mocking）
Openresty中文编程网 User Guide Page 2
介绍 PDF last generated: November 08, 2016
介绍
SSuummmmaarryy:: OpenResty 自身依托于自动化测试来维持高质量，已经有几
年了。作为 OpenResty 的核心开发者，我们一直是拥抱测试驱动
== 介绍
OpenResty 自身依托于自动化测试来维持高质量，已经有几年了。作为 OpenResty
的核心开发者，我们一直是拥抱测试驱动（test driven development - TDD）的。我
们这几年 TDD 的实践，很棒的一点是为 OpenResty 的所有组件积累了大量的测试用
例集。 整体的测试集非常的大，以至于无法在单机上面运行它们。所以我们通常是
在 Amazon EC2 集群（已经部署好测试环境）上运行完成所有测试。 所有这些测试
集所依赖的核心，通常都由 Test::Nginx 这个 OpenResty 团队开发的测试模块所支
撑。
Test::Nginx 提供了一个通用、简单、规范的语言，用来直观的表达和组织测试用
例。 它也提供各种强有力的测试模型或“引擎”，在不同配置环境中，运行各种测试
用例，希望发现不符合预期的错误。 它还支持扩展这个测试规范语言，通过添加自
定义抽象，来完成高级的测试需要，通常用在应用层回归测试。
=== Conceptual Roadmap
=== Overview
Openresty中文编程网 User Guide Page 3
Test::Nginx PDF last generated: November 08, 2016
Test::Nginx
SSuummmmaarryy:: 这种简单测试规范格式或称小语言，使得 `Test::Nginx` 的更
像是 Perl 世界里 link:https://metacpan.org/pod/distribution/Test-
Base/lib/Test/Base.pod[Test::Base] 测试模块提供的各种通用测试语
言中的一种方言。事实上，用面向对象的角度看，`Test::Nginx` 是
`Test::Base` 子类。这就意味着 `Test::Base` 提供的所有特性在
`Test::Nginx` 都是可用的，`Test::Nginx` 提供更易用的原语和符号，用
来简化 NGINX 和 OpenResty 环境的测试。 `Test::Base` 的核心理念，
是基于 `Test::Base` 的测试系统可以被广泛、有效的使用，甚至包括
Haskell 编程和 Linux 内核模块。`Test::Nginx` 只是我们为了 NGINX 和
OpenResty 测试创造的例子。有关 `Test::Base` 框架自身的详细讨论，
已经超过了这本书的范畴，但在后续章节中，我们还将介绍
`Test::Nginx` 继承下来有关 `Test::Base` 的重要特性。
== Test::Nginx
link:https://metacpan.org/pod/Test::Nginx[Test::Nginx] 是一个测试框架，可以驱动
运行 NGINX 上的任何测试用例代码，自然也可以是 NGINX 的内核代码。使用 Perl
语言编写，因为近数年时间的积累，有丰富的测试设备，以及完整的周边工具链。
更进一步，使用者都不需要知道这些测试用例框架是用 Perl 书写的， Test::Nginx 提
供了一些简单符号来表达当前测试用例，并把它们用一种规范格式组织起来。
这种简单测试规范格式或称小语言，使得 Test::Nginx 的更像是 Perl 世界里
link:https://metacpan.org/pod/distribution/Test-Base/lib/Test/
Base.pod[Test::Base] 测试模块提供的各种通用测试语言中的一种方言。事实上，用
面向对象的角度看，Test::Nginx 是 Test::Base 子类。这就意味着 Test::Base 提供
的所有特性在 Test::Nginx 都是可用的，Test::Nginx 提供更易用的原语和符号，用来
简化 NGINX 和 OpenResty 环境的测试。 Test::Base 的核心理念，是基于
Test::Base 的测试系统可以被广泛、有效的使用，甚至包括 Haskell 编程和 Linux 内
核模块。Test::Nginx 只是我们为了 NGINX 和 OpenResty 测试创造的例子。有关
Test::Base 框架自身的详细讨论，已经超过了这本书的范畴，但在后续章节中，我
们还将介绍 Test::Nginx 继承下来有关 Test::Base 的重要特性。
Test::Nginx 通过 link:http://www.cpan.org/[CPAN] （Comprehensive Perl Archive
Network）发行，与其他大多数 Perl 的库一致。如果在你的系统中已经安装了 perl
（大多数 Linux 版本已经默认包含了 perl ），这时你可以使用下面简单命令完成安
装：
Openresty中文编程网 User Guide Page 4
Test::Nginx PDF last generated: November 08, 2016
[source,bash]
cpan Test::Nginx —-
对于第一次运行 cpan 工具，可能它将提示你配置 cpan 工具，以此来适配你的环
境。如果你不确定这些选项，选择默认配置选项（如果有）或者接受所有默认选
项。
Test::Nginx 针对不同用户环境，提供了几个不同的测试类。最经常被使用的一个是
Test::Nginx::Socket 。本章的剩余部分焦点将集中在测试类以及它们的子类。从现在
开始没有特殊说明，我们将把 Test::Nginx 和 Test::Nginx::Socket 混合，使用
Test::Nginx::Socket 代表测试模块及其子类。
// Alas. GitBook does not support sidebar blocks in its AsciiDoc render. // .Another
Test::Nginx
注意: 这里实际上还有另外一个不同的测试框架也叫 Test::Nginx ，是由 Maxim
Dounin 创建并由 NGINX 官方团队保留。这个测试模块是通过
link:http://hg.nginx.org/nginx-tests/file/tip[official NGINX test suite] 对外发行，除
了这两者都是测试 NGINX 相关代码，它与我们的 Test::Nginx 没有任何联系。
NGINX 团队的 Test::Nginx 需要用户在 Perl 中直接写代码来表达测试用例，也就意
味着他们在 Test::Nginx 所写的测试用例不是数据驱动并需要适当的 Perl 编程知识。
Openresty中文编程网 User Guide Page 5
测试套件设计 PDF last generated: November 08, 2016
测试套件设计
SSuummmmaarryy:: 使用 `Test::Nginx` 驱动我们的测试套件，通常使用一个公共
的目录结构以及规范的测试文件名样式，用来组织我们的测试集合。
== 测试套件设计
// 翻译中。。。。（yuansheng）
使用 Test::Nginx 驱动我们的测试套件，通常使用一个公共的目录结构以及规范的测
试文件名样式，用来组织我们的测试集合。 这些会让用户更容易明白，这些测试用
例在项目源码中的目录关系，以及测试用例的使用情况。 它不是必须的，然而，按
照这种常见约定组织，还是非常推荐的。
Projects using Test::Nginx to drive their test suites usually have a common directory
layout and common test file name patterns to organize their tests. This makes the
user easy to reason about the location of the test suite in a project source tree and
the usage of the tests. It is not really required, however, to use this common
convention; it is just highly recommended.
按照约定，这些项目在当前源码的根目录下，有个 t/ 目录用来存放测试文件。 每
个测试文件包含一些具有关联度的测试用例，保存在扩展名为 .t 的文件中，可以很
容易表明这是 “测试文件”。 下面的目录树结构，是真实项目
link:https://github.com/openresty/headers-more-nginx-module[headers-more-nginx-
module] 的测试套件：
By convention, such projects have a t/ directory at the root of their source tree
where test files reside in. Each test file contains test cases that are closely related
in some way and has the file extension .t to easily identify themselves as “test
files”. Below is the directory tree structure of a real-world test suite inside the
link:https://github.com/openresty/headers-more-nginx-module[headers-more-nginx-
module] project:
…. └── t ├── bug.t ├── builtin.t ├── eval.t ├── input-conn.t
├── input-cookie.t ├── input-ua.t ├── input.t ├── phase.t
├── sanity.t ├── subrequest.t ├── unused.t └── vars.t ….
当你有很多测试文件，你可以对 t/ 使用子目录拆分完成更深的分组归类。例如，
link:https://github.com/openresty/lua-nginx-module[lua-nginx-module] 项目，我们
在 t/ 目录下就有 023-rewrite/ 和 024-access/ 两个子目录。
Openresty中文编程网 User Guide Page 6
测试套件设计 PDF last generated: November 08, 2016
When you have many test files, you can also group them further with sub-directories
under t/ . For example, in the link:https://github.com/openresty/lua-nginx-
module[lua-nginx-module] project, we have sub-directores like 023-rewrite/ and
024-access/ under its t/ directory.
本质上，每一个 .t 文件是一个 Perl 脚本文件，它的执行由 perl 或者 Perl 世界比
较普遍的工具名叫 link:http://perldoc.perl.org/prove.html[prove] 完成的。 我们通常
使用 prove 命令行工具来执行这些 .t 文件来获取测试结果。 尽管这些 .t 文件每
一个都是 Perl 脚本，但他们通常都不包含任何 Perl 脚本。 取而代之的，这里声明的
所有测试用例，仅仅是放在 .t 文件中统一格式的基本 “数据”。
In essence, each .t file is a Perl script file runnable by either perl or Perl’s
universal test harness tool named link:http://perldoc.perl.org/prove.html[prove].
We usually use the prove command-line utility to run such .t files to obtain test
results. Although .t files are Perl scripts per se, they usually do not have much Perl
code at all. Instead, all of the test cases are declared as cleanly formatted “data” in
these .t files.
注意：我们这里使用的测试套件设计约定，在 Perl 社区已经延用多年。 因为
Test::Nginx 使用 Perl 编写的，并且在 Perl 的测试工具链中被重用，我们只需要让
NGINX 和 OpenResty 世界简单的遵循这些约定就好。
NOTE: The test suite layout convention we use here are also used by the Perl
community for many years. Because Test::Nginx is written in Perl and reuses Perl’s
testing toolchain, it makes sense for us to simply follow that convention in the
NGINX and OpenResty world as well.
Openresty中文编程网 User Guide Page 7
Test File Layout PDF last generated: November 08, 2016
Test File Layout
SSuummmmaarryy:: 测试文件通常带 `.t` 后缀，以此跟源码树中的其他文件相区
分。每个测试文件本身是一个 Perl 脚本。
== Test File Layout
// 翻译中。。。。（luozexuan） :special_data_line: DDAATTAA
Test files usually have a common file extension, .t , to distinguish themselves from
other types of files in the source tree. Each test file is a Perl script per se.
Test::Nginx follows a special design that decomposes each test file into two main
parts: the first part is a very short prologue that consists of a few lines of Perl code
while the second part is a listing of the test cases in a special data format. These
two parts are separated by the following special line
测试文件通常带 .t 后缀，以此跟源码树中的其他文件相区分。每个测试文件本身是
一个 Perl 脚本。 Test::Nginx 遵循一套特别的设计，把每个测试文件分成两部分：
第一部分是非常短的序言（prologue），包括若干行 Perl 代码； 第二部分则是按特
定格式组织起来的测试用例列表。 这两部分由下面这一行分隔开来。
…. DDAATTAA….
The perl interpreter or the prove utility stop interpreting the file content as Perl
source code until they see this special line. Everything after this line is treated as
datain plain text that is reachable by the Perl code above this line. The most
interesting part of each .t test file is the stuff after this line, i.e., the data part.
perl 解释器或 prove 工具一旦遇到这一行，就会停止以 Perl 代码的形式解释文件
内容。 在这之后的文本，都会被当作前面的 Perl 代码所能操作的数据。 这部分，
即数据部分，是每个 .t 测试文件中最有趣的地方，
NOTE: The special {special_data_line} notation is a powerful feature of the Perl
programming language that allows embedding arbitrary free-text data in any Perl
script files that can be manipulated by the containing Perl scripts themselves.
Test::Nginx takes advantage of this feature to allow data-driven test case
specifications in a simple format or language that is easily understandable by
everyone, even those without any prior experiences in Perl programming.
NOTE: {special_data_line} 标记是 Perl 编程语言的一个强大特性， 它允许你添加任意
纯文本数据到 Perl 脚本文件中， 以供该脚本使用。 凭借这一特性， Test::Nginx 实
现了一套简单的测试格式，亦可说是语言。 用户无需学习 Perl， 即可上手编写简明
易懂的数据驱动的测试用例。
Openresty中文编程网 User Guide Page 8
Test File Layout PDF last generated: November 08, 2016
=== The Prologue Part 序言部分
The first part, i.e., the “prologue” above the {special_data_line} line is usually just a
few lines of Perl code. You do not have to know Perl programming to write them