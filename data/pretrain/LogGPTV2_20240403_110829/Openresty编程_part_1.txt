# OpenResty 中文编程网用户指南

版本 0.1  
最后生成日期：2016年11月8日  
版权所有 © 2016 OpenResty中文编程网 http://www.openresty.com.cn  

## 目录
- OpenResty 中文编程
- 自动测试
- 简介
- Test::Nginx
- 测试套件设计
- 测试文件布局

## 自动测试
### 概要
自动化测试在软件开发和维护中起着至关重要的作用。OpenResty 提供了一个数据驱动的测试框架，可以为 NGINX C 模块、Lua 库甚至 OpenResty 应用编写声明式测试用例。这些测试用例以一种规范格式书写，既具备直观的可读性和可维护性，也易于机器处理。数据驱动的方法允许同一组测试用例以多种完全不同的方式运行，从而有助于在不同场景下或与外部工具配合时暴露出问题。

本章节将介绍广泛用于几乎所有 OpenResty 组件中的 Test::Nginx 测试框架，包括 ngx_http_lua 模块、大多数 lua-resty-* Lua 库，以及像 CloudFlare 的 Lua CDN 和 Lua SSL 这样的成熟商业应用。

关键词：测试（Testing），模拟（Mocking）

## 简介
### 概要
OpenResty 自身依赖自动化测试来维持高质量已有多年。作为 OpenResty 的核心开发者，我们一直遵循测试驱动开发（TDD）的原则。多年来 TDD 实践的一大优点是积累了大量针对 OpenResty 各个组件的测试用例集。整个测试集非常庞大，以至于无法在单机上运行它们。因此，我们通常在已配置好测试环境的 Amazon EC2 集群上运行所有测试。这些测试集的核心通常由 OpenResty 团队开发的 Test::Nginx 测试模块支持。

Test::Nginx 提供了一种通用、简单且规范的语言来直观地表达和组织测试用例，并提供了强大的测试模型或“引擎”，以便在不同配置环境中运行各种测试用例，从而发现潜在错误。它还支持通过添加自定义抽象扩展测试规范语言，以满足高级测试需求，通常应用于应用层回归测试。

### 概念路线图
### 概览

## Test::Nginx
### 概要
这种简单的测试规范格式或称为小语言，使 `Test::Nginx` 更像是 Perl 世界中的一种方言，类似于 `Test::Base` 测试模块提供的各种通用测试语言。从面向对象的角度来看，`Test::Nginx` 是 `Test::Base` 的子类。这意味着 `Test::Base` 提供的所有特性都可以在 `Test::Nginx` 中使用，而 `Test::Nginx` 则提供更易用的原语和符号，以简化 NGINX 和 OpenResty 环境的测试。`Test::Base` 的核心理念是基于其的测试系统可以被广泛有效地使用，甚至包括 Haskell 编程和 Linux 内核模块。`Test::Nginx` 只是我们为了 NGINX 和 OpenResty 测试创建的一个实例。有关 `Test::Base` 框架本身的详细讨论已经超出了本书的范围，但在后续章节中，我们将介绍 `Test::Nginx` 继承自 `Test::Base` 的重要特性。

### Test::Nginx
`Test::Nginx` 是一个测试框架，可以驱动运行 NGINX 上的任何测试用例代码，当然也可以是 NGINX 的内核代码。由于多年的积累，该框架拥有丰富的测试设备和完整的周边工具链。尽管 `Test::Nginx` 是用 Perl 语言编写的，但用户不需要了解这一点；`Test::Nginx` 提供了一些简单的符号来表示当前的测试用例，并以一种规范的格式组织它们。

`Test::Nginx` 通过 CPAN（Comprehensive Perl Archive Network）发布，与其他大多数 Perl 库一致。如果您的系统中已经安装了 Perl（大多数 Linux 版本默认包含 Perl），您可以使用以下命令进行安装：

```bash
cpan Test::Nginx
```

首次运行 `cpan` 工具时，可能会提示您配置 `cpan` 以适应您的环境。如果您不确定这些选项，请选择默认配置选项（如果有）或接受所有默认选项。

`Test::Nginx` 为不同的用户环境提供了几个不同的测试类。最常用的是 `Test::Nginx::Socket`。本章剩余部分将重点放在这个测试类及其子类上。除非另有说明，我们将把 `Test::Nginx` 和 `Test::Nginx::Socket` 视为等同。

### 注意
实际上还有一个名为 `Test::Nginx` 的不同测试框架，由 Maxim Dounin 创建并由 NGINX 官方团队保留。该测试模块通过官方 NGINX 测试套件对外发行，除了都是测试 NGINX 相关代码外，与我们的 `Test::Nginx` 没有任何联系。NGINX 团队的 `Test::Nginx` 需要用户直接用 Perl 编写测试用例，这意味着他们的测试用例不是数据驱动的，并且需要一定的 Perl 编程知识。

## 测试套件设计
### 概要
使用 `Test::Nginx` 驱动我们的测试套件时，通常会采用一个公共的目录结构和规范的测试文件名样式来组织测试集合。这使得用户更容易理解项目源码中的测试用例位置及其使用情况。虽然这不是必须的，但按照这种常见约定组织还是非常推荐的。

通常，这样的项目在其源码根目录下有一个 `t/` 目录，用于存放测试文件。每个测试文件包含一些具有关联度的测试用例，并以 `.t` 为扩展名，以明确标识为“测试文件”。例如，`headers-more-nginx-module` 项目的测试套件目录结构如下：

```
└── t
    ├── bug.t
    ├── builtin.t
    ├── eval.t
    ├── input-conn.t
    ├── input-cookie.t
    ├── input-ua.t
    ├── input.t
    ├── phase.t
    ├── sanity.t
    ├── subrequest.t
    ├── unused.t
    └── vars.t
```

当有很多测试文件时，可以使用子目录进一步分组。例如，在 `lua-nginx-module` 项目中，我们在 `t/` 目录下有 `023-rewrite/` 和 `024-access/` 两个子目录。

本质上，每个 `.t` 文件是一个 Perl 脚本文件，可以通过 `perl` 或 Perl 社区常用的 `prove` 工具执行。我们通常使用 `prove` 命令行工具来运行这些 `.t` 文件以获取测试结果。尽管这些 `.t` 文件本质上是 Perl 脚本，但它们通常不包含太多的 Perl 代码。相反，所有测试用例都以统一格式的基本“数据”形式放在 `.t` 文件中。

注意：我们这里使用的测试套件设计约定已在 Perl 社区沿用多年。因为 `Test::Nginx` 是用 Perl 编写的，并且重用了 Perl 的测试工具链，所以我们只需让 NGINX 和 OpenResty 世界简单地遵循这些约定即可。

## 测试文件布局
### 概要
测试文件通常带有 `.t` 后缀，以此与其他源码树中的文件相区分。每个测试文件本身是一个 Perl 脚本。`Test::Nginx` 遵循一种特殊的设计，将每个测试文件分为两部分：第一部分是非常短的序言，包括几行 Perl 代码；第二部分则是按特定格式组织起来的测试用例列表。这两部分由以下特殊行分隔：

```
DATA
```

Perl 解释器或 `prove` 工具一旦遇到这一行，就会停止以 Perl 代码的形式解释文件内容。在这之后的文本都会被当作前面的 Perl 代码所能操作的数据。这部分，即数据部分，是每个 `.t` 测试文件中最有趣的地方。

注意：`DATA` 标记是 Perl 编程语言的一个强大特性，它允许在任何 Perl 脚本文件中嵌入任意纯文本数据，以供脚本自身操作。凭借这一特性，`Test::Nginx` 实现了一套简单的测试格式，亦可说是语言。用户无需学习 Perl，即可上手编写简明易懂的数据驱动的测试用例。

### 序言部分
第一部分，即 `{special_data_line}` 行上方的“序言”部分，通常只包含几行 Perl 代码。您不需要了解 Perl 编程即可编写它们。