title:Comprehensive view of a live network coding P2P system
author:Christos Gkantsidis and
John Miller and
Pablo Rodriguez
Comprehensive View of a Live
Network Coding P2P System
Christos Gkantsidis
PI:EMAIL
John Miller
PI:EMAIL
Pablo Rodriguez
PI:EMAIL
Microsoft Research
7 J J Thomson Avenue
Cambridge, CB3 0FB. UK
ABSTRACT
In this paper we present the ﬁrst implementation of a P2P content
distribution system that uses Network Coding. Using results from
live trials with several hundred nodes, we provide a detailed per-
formance analysis of such P2P system. In contrast to prior work,
which mainly relies on monitoring P2P systems at particular loca-
tions, we are able to provide performance results from a variety of
novel angles by monitoring all components in the P2P distribution.
In particular, we show that Network Coding is practical in a P2P
setting since it incurs little overhead, both in terms of CPU process-
ing and I/O activity, and it results in smooth, fast downloads, and
efﬁcient server utilization. We also study the importance of topol-
ogy construction algorithms in real scenarios and study the effect
of peers behind NATs and ﬁrewalls, showing that the system is sur-
prisingly robust to large number of unreachable peers. Finally, we
present performance results related to verifying network encoded
blocks on-the-ﬂy using special security primitives called Secure-
Random-Checksums.
Categories and Subject Descriptors: C.2.4 [Computer - Commu-
nication Networks]: Distributed Systems-Distributed applications
C.4 [Performance of Systems]: Measurement Techniques
General Terms: Measurement, Performance, Design, Security.
Keywords: peer-to-peer, content distribution, network coding, se-
cure random chesksums, NAT issues.
INTRODUCTION
1.
In recent years, a new trend has emerged with peer-to-peer (P2P)
systems providing a scalable alternative for distributing commer-
cial, legal content (e.g. [11, 19, 20]). Such systems use end-user’s
resources to provide a cost-effective distribution of bandwidth in-
tensive content to thousands of users.
This paper presents our experiences with a P2P system that uses
Network Coding. While our previous research showed through
simulations that Network Coding provides efﬁcient and robust dis-
tribution [11], it was believed that Network Coding is not practical
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
in real environments because of encoding and decoding overheads,
and because protecting against block corruption is difﬁcult.
We have implemented a prototype Network Coding P2P ﬁlecast-
ing system (described in §2), which to the best of our knowledge is
the ﬁrst system of its kind, and tested it in the distribution of large
ﬁles (e.g. several GBytes) over the Internet. Our implementation
also provides efﬁcient support against corruption attacks that try to
disrupt the download.
In this paper, we present our experiences
implementing and using such system.
In addition to presenting our ﬁeld experiences with network cod-
ing, we also present interesting results about general P2P systems.
Next, we summarize the main contributions of this paper:
a) We present the performance of a live P2P ﬁlecasting system from
a novel set of angles (§4). In contrast to prior work, which mainly
relied on monitoring P2P systems at particular locations, we were
able to monitor all components in the P2P distribution, and, as a
result, study a number of metrics that were not possible before.
For example, we are able to quantify the content provider’s savings
over time, the dynamics of the topology, the number of unreachable
nodes at any point in time, and the overall system efﬁciency.
b) We present our experiences with implementing and using Net-
work Coding. We quantify the system requirements and its beneﬁts
in terms of download times.
In particular, we show that coding
is feasible and incurs little processing overhead at the server and
the peers (§4.6). Moreover, coding is effective at eliminating the
ﬁrst/last-blocks problems (§4.8) and uses the server capacity very
efﬁciently.
e) We evaluate various P2P topology construction algorithms and
quantify their impact in the overall throughput of the system.
c) We study the inﬂuence of unreachable nodes (e.g. behind NATs,
ﬁrewalls) in the system’s efﬁciency (§6). We compare the percent-
age of unreachable nodes with the system’s efﬁciency over time,
and observe that surprisingly the system is highly resilient to large
number of unreachable peers (e.g. as high as 70%).
e) We study the performance of a novel set of security functions
to secure Network Coding systems, which we call Secure Random
Checksums [12], and show that they have a negligible computa-
tional overhead and, hence, on-the-ﬂy veriﬁcation is possible (§7).
1.1 Network Coding
Network coding is a novel mechanism that promises optimal uti-
lization of the resources of a network topology [1, 6, 18, 26]. With
network coding, every transmitted packet is a linear combination
of all or a subset of the packets available at the sender (similar to
XORing multiple packets). Observe that encoded packets can be
further recombined to generate new linear combinations, enabling
nodes to generate encoded packets without having the full ﬁle. The
original information can be reconstructed after receiving enough
linearly independent packets.
Network coding is of great use in large-scale distributed systems,
such as multicast and wireless networks [11, 22]. In this paper we
focus on the use of Network Coding for P2P networks.
In con-
trast to the multicast scenario where the beneﬁts of network coding
relate to speciﬁc network topologies, in P2P systems the beneﬁts
of network coding mostly stem from solving the block scheduling
problem at large scales. In particular, network coding improves per-
formance when the number of users in the system increases while
the information that each node has about others remains constant.
More speciﬁcally network coding provides the following beneﬁts:
I- The capacity of the seed server is fully utilized by constantly
serving innovative information:
This is a critical point; at time zero the seed server is the only
node holding a copy of the full ﬁle. Thus, the download time
achieved by the earliest ﬁnishing node is lower bounded by the
time that it takes to put a single copy of each block in the network.
Network coding ensures that this time is optimal since every block
served by the server is unique (refer to Section 4.7).
Note that in general this is hard to realize at large scales. To
guarantee that an individual node does not request a block from the
server that has already been requested by other nodes in the sys-
tem, that individual node needs to know what the other nodes have
downloaded and what they are currently downloading. However,
a particular node often only knows about the content in the nodes
in its neighborhood. As scale increases, the information that each
node has about others in the system decreases, thus, increasing the
probability of requesting overlapping blocks.
The best a node can do is to assume that other nodes in the system
have a similar set (or subset) of the blocks existing in its neighbor-
hood and request non-overlapping blocks accordingly. However (a)
newly arriving nodes, (b) heterogeneous capacities, and (c) churn,
can create swarms where different nodes are missing a very diverse
set of blocks. This makes it harder to estimate what blocks exist in
other parts of the network based on local observations.
For instance, in the extreme case where all nodes are missing
different sets of blocks and the visibility in the network is very
small, the amount of blocks served by the server before N different
blocks are placed in the swarm tends to N logN (see [27]), which
for N=10,000 blocks equals 80, 000.
II- Innovative information in a node propagates in optimal time
to those nodes needing it, regardless of the number of hops be-
tween the source and the sink:
Assuming that all nodes have the same capacity, then, the speed
at which information propagates over the P2P network is deter-
mined by the block selection policies and the distance between
nodes.
In the case that a given node (source) holds a particular
block which is required in other parts of the network (sinks), net-
work coding will ensure that such block will propagate in a num-
ber of rounds equal to the distance between the source and the
sinks. However, if no coding is used (or even if only source coding
is used), then, the nodes in the path may “waste” several rounds
downloading blocks that the sinks already has. For instance if the
nodes in the path are empty, they will likely request blocks that the
sinks already posses.
Compared to traditional approaches, network coding makes op-
timal use of the available resources in the network without the need
for sophisticated scheduling algorithms and provides a high degree
of robustness, even if nodes suddenly depart the system or if deci-
sions are based only on partial information [11]. An overview of
network coding and its applications is given in [10].
2. SYSTEM OVERVIEW
2.1 Prototype Implementation
We have implemented a network coding based P2P ﬁle distribution
system in C#. Our content distribution system consists of three
types of participants: one or more peers, a registrar, and a logger.
Peers are sources and sinks for content data. Peers exchange
encoded information with each other in units that we call blocks.
Content is seeded into the system by a special peer, which we call
server. Peers that ﬁnish the download, but remain in the system are
called seeds.
The registrar enables peer discovery. The active peers period-
ically report to the registrar and the registrar provides a random
subset of the active peers to nodes that have too few neighbors. The
logger is an aggregation point for peer and registrar trace messages.
Every peer in the system reports detailed statistics to the logger; us-
ing those statistics we are able to perform an in-depth evaluation of
the distribution.
The peer is the most complex of the three entities, and its func-
tionality is divided into two components: network transport and
content manager. The network transport maintains connections to
other peers for transferring blocks. We use two connections per
pair of nodes (one for each direction). Each peer maintains 4-8
connections to other peers. Peers periodically drop a neighbor at
random, encouraging cloud diversity and mitigating formation of
isolated peer islands.
The content manager encodes, decodes, validates, and persists
content data. In our experiments, the ﬁle is divided into 1000-2000
original blocks; all transfered blocks can be expressed as combina-
tions of the original blocks. To ensure low encoding and decoding
times, we have grouped blocks into so-called segments or genera-
tions [6], where only blocks of the same generation are combined.
This approach, which we call Group Network Coding, results in
more efﬁcient decoding while retaining the network coding advan-
tages. The encoding/decoding operations take place in a Galois
Field (GF(216)).
3. EVALUATING SWARMING SYSTEMS
P2P systems are quickly evolving into a mainstream mechanism for
general content distribution. As such, they are being considered for
a variety of applications ranging from small scale and large scale
ﬁle sharing, to software and patch distribution, sensor data distri-
bution, etc. Each of these applications pose different requirements
on the swarming protocol (e.g. in terms of the population size, ar-
rival patterns, content durability, available seeding resources, will-
ingness to cooperate, etc). Evaluating swarming systems under the
right context is critical to understand their beneﬁts and limitations.
We next highlight some of the key issues when evaluating swarm-
ing systems:
Swarm efﬁciency with scale: Nodes in swarming systems often
perform local interactions with the goal to optimize the overall ef-
ﬁciency of the swarm. Such local actions are more or less effective
depending on the visibility that a given node has on the complete
system. For instance, at small scales a node’s view of the system is
usually very good, and local heuristics such as the “Rarest First”
neighborhood policy often achieve efﬁciencies close to optimal.
However, in a large scale systems with several thousands or mil-
lions of on-line nodes, each node only knows about the behavior of
a very limited portion of the system (e.g. few tens of users), thus,
decisions tend be quasi-random. For instance, “Rarest First” algo-
rithm will not perform well when the nodes are clustered in such a
way that the perception of “rare” for a cluster is different than that
of other clusters. It is thus critical to quantify whether the swarm
efﬁciency remains high as the system scales.
Nevertheless, evaluating very large swarms (e.g. with more than
several thousand concurrent users ) is often a difﬁcult task (e.g.
computational requirements, lack of data, etc). An alternative ap-
proach is to test smaller swarms and reduce the visibility that each
node has on the overall swarm (e.g. by decreasing the neighbor-
hood size). This approach can be used to efﬁciently infer the impact
of large scale deployments with small scale systems.
In our prototype application we have limited the maximum node
degree to eight connections (as opposed to 40-80 used in other
swarming systems [8]). We will show that even with such small
number of connections, network coding can achieve very high efﬁ-
ciencies.
Using a small number of connections can also have interesting
side beneﬁts in different scenarios. For instance, commercial P2P
systems that need to keep privacy among users, rely on encrypted
SSL connections among peers. Due to the overhead of opening
such connections, nodes need to minimize the number of SSL con-
nections that they use. Similarly, modern P2P systems often use
special servers to relay connections for nodes behind NATs. Each
new node connection creates load on this server, which can eventu-
ally become the bottleneck of the system.
Partial observations are not enough: One common problem when
evaluating swarming systems is to monitor the performance of the
system from the point of view of a single or few nodes. This could
result in loss of critical information information related to peers in
parts of the network that are not being monitored. What happens to
nodes with different speeds? How about nodes entering the system