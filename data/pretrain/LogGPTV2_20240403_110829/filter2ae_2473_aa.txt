**作者：zoemurmure**  
**原文链接：**
## 0\. 前言
CVE-2023-21752 是 2023 年开年微软第一个有 exploit
的漏洞，原本以为有利用代码会很好分析，但是结果花费了很长时间，难点主要了两个：漏洞点定位和漏洞利用代码分析，因此在本文中花费了更多的篇幅介绍了这两部分内容，欢迎指正。
## 1\. 漏洞简介
根据官方信息，该漏洞是 Windows Backup Service 中的权限提升漏洞，经过身份认证的攻击者可利用此漏洞提升至 SYSTEM
权限。成功利用此漏洞需要攻击者赢得竞争条件。
EXP 代码位于 [Github](https://github.com/Wh04m1001/CVE-2023-21752)，提供了两个版本，版本 1
可以实现任意文件删除，可稳定复现；版本 2 尝试利用任意删除实现本地提权，但是复现不稳定。
## 2\. 漏洞点定位的曲折之路
这部分内容是一些失败的过程记录，以及我自己的碎碎念，防止自己之后犯同样的错误，只对漏洞分析感兴趣的可以略过 2.1 和 2.3 小节。
### 2.1 失败的过程
首先尝试复现，提权版本的利用程序在虚拟机上没有复现成功，任意文件删除版本的利用程序由于我没有使用完整路径，也没有复现成功（但是此时我还不知道原因）。
之后我尝试进行补丁对比，但是想要进行补丁对比首先要确定漏洞位于哪个文件中，根据漏洞利用程序的文件命名 `SDRsvcEop`，找到了文件
sdrsvc.dll，但是补丁对比后并没有发现差异。
> 这期间我还搜索了关于这个漏洞的信息，但是除了漏洞通告和 GitHub 的 exp
> 代码外，没有找到其他内容。这里吐槽一下某数字站的漏洞通告，竟然说这个漏洞是 Windows Server Backup (WSB) 上的……
这个时候我已经开始对漏洞利用代码进行分析了，一方面通过微软的文档，了解代码中一些函数和参数的使用，一方面开始在 Windbg 上进行调试，并由此找到了
rpcrt4.dll、combase.dll 这些和漏洞无关的文件。
在调试过程中，我花费了很多时间在 `DeviceIoControl` 这个函数上，因为之前看的很多漏洞最终定位的文件都是 sys
驱动文件，因此虽然我在心里仍旧为 dll 文件留了一些位置，但是在方法选择上，我仍旧趋向去寻找某个 sys 文件。所以我想要在利用程序执行到
`DeviceIoControl` 的时候，在用户态转内核态的入口位置设置一个断点，然后监控系统究竟执行到了哪里。当然，这个方法失败了，并且搞得我心烦意乱。
我在这个时候才想起来要把利用程序参数的相对路径改成绝对路径，并且成功复现了任意文件删除。虽然但是，这之后我又走了弯路……
> 之前学习病毒分析的时候，有一个算是标准的流程，就是要先执行病毒，看一下它的动态特征，以此方便后面的动态分析。之前看的很多漏洞分析文章，也都是要执行一下
> poc 或者 exp，进行进程监控，但是我完全忘记了，或者说我虽然想到了这个方法，但是并没有十分重视。
我在继续分析漏洞利用代码，在此期间看了一些关于 DCOM 的资料，确定 sdrsvc.dll 是依赖 rpcss.dll 文件功能的（明明可以通过
process hacker 直接确定的……），通过补丁对比发现函数 `CServerSet::RemoveObject` 被修改，我尝试在 Windbg
中在这个函数设置断点，但是利用程序没有执行到这里，所以漏洞点不在这个文件。
> 其中这个时候我的潜意识已经告诉我我的路走错了，因为微软的漏洞说明上明明白白的写着 Windows backup
> service，所以漏洞文件肯定是和这个功能直接相关的文件，要不然它就直接写 RPC 漏洞了。
### 2.2 转入正轨
此时我仍旧没有使用 procmon
对利用程序进行监控，我选择在安装补丁前后的系统上执行利用程序，并检查输出（输出内容做了一些修改），得到以下结果（因为只是测试功能，并没有选择对高权限文件进行删除）：
补丁修复前
    PS C:\Users\exp\Desktop> C:\Users\exp\Desktop\SDRsvcEop.exe C:\Users\exp\Desktop\test.txt
    [wmain] Directory: C:\users\exp\appdata\local\temp\23980418-9164-497e-8ce7-930949d1af55
    [Trigger] Path: \\127.0.0.1\c$\Users\exp\AppData\Local\Temp\23980418-9164-497e-8ce7-930949d1af55
    [FindFile] Catch FILE_ACTION_ADDED of C:\users\exp\appdata\local\temp\23980418-9164-497e-8ce7-930949d1af55\SDT2C35.tmp
    [FindFile] Start to CreateLock...
    [cb] Oplock!
    [CreateJunction] Junction \\?\C:\Users\exp\AppData\Local\Temp\23980418-9164-497e-8ce7-930949d1af55 -> \RPC Control created!
    [DosDeviceSymLink] Symlink Global\GLOBALROOT\RPC Control\SDT2C35.tmp -> \??\C:\Users\exp\Desktop\test.txt created!
    [Trigger] Finish sdc->proc7
    [wmain] Exploit successful!
    [DeleteJunction] Junction \\?\C:\Users\exp\AppData\Local\Temp\23980418-9164-497e-8ce7-930949d1af55 deleted!
    [DelDosDeviceSymLink] Symlink Global\GLOBALROOT\RPC Control\SDT2C35.tmp -> \??\C:\Users\exp\Desktop\test.txt deleted!
补丁修复后
    PS C:\Users\exp\Desktop> C:\Users\exp\Desktop\SDRsvcEop.exe C:\Users\exp\Desktop\test.txt
    [wmain] Directory: C:\users\exp\appdata\local\temp\183c772e-f444-4aec-a489-7d9f734ee719
    [Trigger] Path: \\127.0.0.1\c$\Users\exp\AppData\Local\Temp\183c772e-f444-4aec-a489-7d9f734ee719
    [FindFile] Catch FILE_ACTION_ADDED of C:\users\exp\appdata\local\temp\183c772e-f444-4aec-a489-7d9f734ee719\SDT1F8A.tmp
    [Trigger] Finish sdc->proc7
    _
由此可知修复后利用程序无法再获取一个 tmp 文件的句柄，我猜测应该是补丁修复之前，漏洞文件创建了这个 tmp
文件，并且创建的权限有问题（这个猜测不一定准确），但是这个猜测目前没什么用，还是没办法定位漏洞文件。
然后，几乎走投无路的我终于想起来要用 procmon 了，谢天谢地。
根据上面利用程序输出结果的对比，确定漏洞修复的位置和创建的 tmp 文件有关，因此格外注意 procmon 中该文件的创建操作：
并在 Stack 选项卡中，定位到 sdrsvc.dll 调用的功能位于 sdengin2.dll 中：
根据 `SdCheck + 0x490c2`，在 IDA 中定位到函数
`CSdCommonImpl::QueryStorageDevice`，该地址为这个函数调用 `QueryStorageDevice` 的位置。
经过补丁对比，发现了函数 `IsWritable`，这个函数进行了修改，并且被 `QueryStorageDevice` 所调用。
### 2.3 反思
这次漏洞分析遇到了几个障碍：
  1. 无法通过漏洞名称直接确认漏洞文件，导致无法使用常用的补丁对比的分析方法；
  2. exp 一开始未成功复现，这种情况对我来说很常见，但是由于不清楚原因，我以为是对备份服务的功能以及 exp 代码不熟悉导致；
  3. 由于不熟悉利用代码：
  4. 花费很多时间查找相关资料；
  5. 需要对辅助功能代码和直接漏洞利用代码进行区分。
除此之外，我之前极少分析带有 exp 且 exp 可以正常复现的漏洞，习惯从静态分析入手，再使用 windbg 动态辅助分析。一般遇到可以使用的
poc，我也是直接触发崩溃，然后使用 windbg 从崩溃开始进行调试分析，从没有使用过 procmon
进行动态监控，并且这样的方法也都成功对漏洞进行了分析，因此轻视了 procmon 动态监控方法的有效性。
不过 procmon 也不是万能的，目前看来，这个方法在漏洞点定位上十分有效，但是如果通过其他信息已经能够对漏洞点进行定位，那么 procmon
提供的帮助就不那么显著了，而且通过其他方法也能够完成漏洞分析。
## 3\. 漏洞原理
### 3.1 补丁对比
漏洞修复前：
    __int64 __fastcall IsWritable(unsigned __int16 *a1, int a2, int *a3)
    {
      ...
      v7 = -1;
      if ( a2 == 7 )
      {
        if ( !GetTempFileNameW(a1, L"SDT", 0, TempFileName) )// 如果获取 temp 文件名失败，进入 if 语句
        {
          rtnValue = v17;
    LABEL_28:
          *a3 = v6;
    toend2:
          if ( v7 != -1 )
          {
            CloseHandle(v7);
            rtnValue = v17;
          }
          goto end;
        }
        rtnValue = SxDeleteFile(TempFileName);      // 删除之前可能存在的 tmp 文件
        v17 = rtnValue;
        v8 = 0x148;
        if ( rtnValue >= 0 )                        // 删除成功
        {
          v18 = 0x148;
    LABEL_27:
          v6 = 1;
          goto LABEL_28;
        }
    toend:
        v19 = v8;
        goto end;
      }
      ...
    }
上述代码中的 a2 和传入的路径类型有关，由于利用程序传入的是 UNC 路径，因此最终程序执行流程到达此处。
根据 `GetTempFileNameW` 函数的文档说明，当其第三个参数为数值 0
时，该函数会尝试使用系统时间生成一个唯一数字文件名，如果该文件已存在，数字递增直至文件名唯一，在这种情况下，该函数会创建一个该文件名的空文件并释放其句柄。因此在漏洞修复之前，系统通过
`GetTempFileNameW` 创建临时文件是否成功的方式检查传入的 unc 路径是否可以写入，如果可以写入，再删除创建的这个临时文件。
漏洞修复后：
    __int64 __fastcall IsWritable(unsigned __int16 *a1, int a2, int *a3)
    {
      ...
      v7 = -1;
      if ( a2 == 7 )
      {
        if ( CheckDevicePathIsWritable(a1) < 0 )
        {
    LABEL_10: