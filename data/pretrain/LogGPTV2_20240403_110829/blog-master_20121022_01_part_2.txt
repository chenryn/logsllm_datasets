1\. pg_stat_plans 一般可以用来发现数据库中执行计划发生变化的SQL。  
第一,  从pg_stat_plans视图的query_valid字段值为false可以发现当前的SQL执行计划与执行这个SQL时用到的执行计划不一致.  
第二,  从PostgreSQL log中的WARNING也能发现这个不一致.  
```  
2012-10-22 17:08:12.118 CST,"postgres","postgres",6720,"[local]",50850932.1a40,2,"SELECT",2012-10-22 16:52:02 CST,2/426,0,WARNING,55000,"Existing pg_stat_plans entry planid (2758236521) differs from new plan for query (1252991393).",,,,,,,,,"psql"  
```  
2\. ```pg_stat_plans_explain(planid, userid, dbid)``` 函数将调用PostgreSQL中的explain得到执行计划(query tree). 调用pg_stat_plans_explain除了得到当前的执行计划外, 还需要对query tree的hash值与planid进行匹配, 如果不匹配则修改query_valid字段中存储的值为false. 所以不调用pg_stat_plans_explain()的话不会对query_valid的内容进行更改.  
3\. ```planId |= hash_any(jstate.jumble, jstate.jumble_len)``` , 不同的执行计划可能得到同样的hash值, 也就是planid. 尽管这种概率较小.  
【参考】  
1\. https://github.com/2ndQuadrant/pg_stat_plans  
2\. http://blog.163.com/digoal@126/blog/static/163877040201151534631313/  
3\. http://blog.163.com/digoal@126/blog/static/163877040201221382150858/  
4\. http://blog.ioguix.net/  
5\. src/backend/access/hash/hashfunc.c  
```  
00289 /*  
00290  * hash_any() -- hash a variable-length key into a 32-bit value  
00291  *      k       : the key (the unaligned variable-length array of bytes)  
00292  *      len     : the length of the key, counting by bytes  
00293  *  
00294  * Returns a uint32 value.  Every bit of the key affects every bit of  
00295  * the return value.  Every 1-bit and 2-bit delta achieves avalanche.  
00296  * About 6*len+35 instructions. The best hash table sizes are powers  
00297  * of 2.  There is no need to do mod a prime (mod is sooo slow!).  
00298  * If you need less than 32 bits, use a bitmask.  
00299  *  
00300  * Note: we could easily change this function to return a 64-bit hash value  
00301  * by using the final values of both b and c.  b is perhaps a little less  
00302  * well mixed than c, however.  
00303  */  
00304 Datum  
00305 hash_any(register const unsigned char *k, register int keylen)  
00306 {  
00307     register uint32 a,  
00308                 b,  
00309                 c,  
00310                 len;  
00311   
00312     /* Set up the internal state */  
00313     len = keylen;  
00314     a = b = c = 0x9e3779b9 + len + 3923095;  
00315   
00316     /* If the source pointer is word-aligned, we use word-wide fetches */  
00317     if (((intptr_t) k & UINT32_ALIGN_MASK) == 0)  
00318     {  
00319         /* Code path for aligned source data */  
00320         register const uint32 *ka = (const uint32 *) k;  
00321   
00322         /* handle most of the key */  
00323         while (len >= 12)  
00324         {  
00325             a += ka[0];  
00326             b += ka[1];  
00327             c += ka[2];  
00328             mix(a, b, c);  
00329             ka += 3;  
00330             len -= 12;  
00331         }  
00332   
00333         /* handle the last 11 bytes */  
00334         k = (const unsigned char *) ka;  
00335 #ifdef WORDS_BIGENDIAN  
00336         switch (len)  
00337         {  
00338             case 11:  
00339                 c += ((uint32) k[10] = 12)  
00421         {  
00422 #ifdef WORDS_BIGENDIAN  
00423             a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));  
00424             b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));  
00425             c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));  
00426 #else                           /* !WORDS_BIGENDIAN */  
00427             a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));  
00428             b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));  
00429             c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));  
00430 #endif   /* WORDS_BIGENDIAN */  
00431             mix(a, b, c);  
00432             k += 12;  
00433             len -= 12;  
00434         }  
00435   
00436         /* handle the last 11 bytes */  
00437 #ifdef WORDS_BIGENDIAN  
00438         switch (len)            /* all the case statements fall through */  
00439         {  
00440             case 11:  
00441                 c += ((uint32) k[10] << 8);  
00442             case 10:  
00443                 c += ((uint32) k[9] << 16);  
00444             case 9:  
00445                 c += ((uint32) k[8] << 24);  
00446                 /* the lowest byte of c is reserved for the length */  
00447             case 8:  
00448                 b += k[7];  
00449             case 7:  
00450                 b += ((uint32) k[6] << 8);  
00451             case 6:  
00452                 b += ((uint32) k[5] << 16);  
00453             case 5:  
00454                 b += ((uint32) k[4] << 24);  
00455             case 4:  
00456                 a += k[3];  
00457             case 3:  
00458                 a += ((uint32) k[2] << 8);  
00459             case 2:  
00460                 a += ((uint32) k[1] << 16);  
00461             case 1:  
00462                 a += ((uint32) k[0] << 24);  
00463                 /* case 0: nothing left to add */  
00464         }  
00465 #else                           /* !WORDS_BIGENDIAN */  
00466         switch (len)            /* all the case statements fall through */  
00467         {  
00468             case 11:  
00469                 c += ((uint32) k[10] << 24);  
00470             case 10:  
00471                 c += ((uint32) k[9] << 16);  
00472             case 9:  
00473                 c += ((uint32) k[8] << 8);  
00474                 /* the lowest byte of c is reserved for the length */  
00475             case 8:  
00476                 b += ((uint32) k[7] << 24);  
00477             case 7:  
00478                 b += ((uint32) k[6] << 16);  
00479             case 6:  
00480                 b += ((uint32) k[5] << 8);  
00481             case 5:  
00482                 b += k[4];  
00483             case 4:  
00484                 a += ((uint32) k[3] << 24);  
00485             case 3:  
00486                 a += ((uint32) k[2] << 16);  
00487             case 2:  
00488                 a += ((uint32) k[1] << 8);  
00489             case 1:  
00490                 a += k[0];  
00491                 /* case 0: nothing left to add */  
00492         }  
00493 #endif   /* WORDS_BIGENDIAN */  
00494     }  
00495   
00496     final(a, b, c);  
00497   
00498     /* report the result */  
00499     return UInt32GetDatum(c);  
00500 }  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")