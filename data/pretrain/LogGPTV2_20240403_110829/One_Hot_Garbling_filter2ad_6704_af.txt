gate to efficiently compute (𝑎·𝛼)−1·𝛼 = 𝑎−1. Due to a lack of space,
we defer a full formalization of our inverse module to Appendix B.
S-Boxes. The AES S-Box, which is the only non-linear component
of the AES block cipher, performs a single inversion in GF(28); all
other parts of the S-Box are linear. The state-of-the-art Boolean
circuit S-Box uses 32 AND gates [BP10]. Thus, with the half-gates
technique, this implementation consumes 64 ciphertexts.
Our full inverse gate consumes 58 ciphertexts: 22 to compute
(cid:74)𝑎 · 𝛼(cid:75), 22 to then compute the inverse, and 14 to handle the case
where 𝑎 = 0. This improves communication by ∼ 10%.
Figure 7: We used our implementation to compute the bit-
wise outer product of two 128 bit vectors. We instantiated our
approach with various “chunking factors” 𝑘 (see Section 7.2).
Increasing 𝑘 decreases communication but increases compu-
tation, due to the exponential computation scaling of our
one-hot gate. The standard method computes outer products
by simply ANDing pairs of values. At 𝑘 = 6, we improve over
standard by 6.2× (communication) and 4.1× (time).
result. We use the same idea to compute (𝑏 ⊕ 𝛽) ⊗ 𝛼. We defer
formal presentation of the module to Appendix B.
If the chosen chunk size 𝑘 is logarithmic in the size of input,
then the parties compute 𝑎 ⊗ 𝑏 in polynomial time. In terms of
communication, the parties use O(𝑛𝑚/𝑘) garbled rows: a factor
𝑘 improvement over the standard method. Formally, we improve
outer product communication by a logarithmic factor; in practice
we choose constants 𝑘 that yield good performance.
Figure 7 plots the practical efficiency we obtained when imple-
menting general outer products with different values of 𝑘. The
results show that our approach significantly improves outer prod-
ucts over prior state-of-the art.
7.3 Binary Matrix Multiplication
It is well known that outer products can be used to efficiently
multiply matrices. We implemented this approach – see Appendix B.
For chunking factor 𝑘 = 6, our approach improves 128× 128 square
matrix multiplication by 6.2× (communication) and 5× (time).
7.4 Integer Multiplication
Consider bit vectors 𝑎, 𝑏 ∈ {0, 1}𝑛 that each represent 𝑛-bit numbers.
The outer product of 𝑎 ⊗ 𝑏 can be used to help calculate the product
𝑎 · 𝑏. See Appendix B for further discussion.
We implemented 32-bit integer multiplication using our tech-
nique and the standard method (our standard circuit is inspired
by [WMK16]). Best performance was achieved with “chunking fac-
tor” (see Section 7.2) 𝑘 = 6:
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea585We implemented the [BP10] S-Box and our one-hot version:
Comm. (Bytes)
Time (𝜇s)
Standard Ours
929
105.8
1024
103.6
Improvement
1.10×
0.98×
On a WAN, our implementation is slightly slower than the standard
S-Box. This can likely be improved by low-level code optimization.
It may be possible to further apply our technique to block ciphers,
perhaps by codesigning with our new cost structure in mind. We
leave such fine-grained approaches to future work.
7.7 Modular Reduction
Let 𝑥 mod 𝑦 denote a function that computes the remainder of 𝑥
divided by 𝑦. Suppose the parties hold a sharing(cid:74)𝑎(cid:75) and wish to
compute(cid:74)𝑎 mod ℓ(cid:75) where ℓ is a public constant. Such computation
is potentially useful, e.g. to compute in an arithmetic field Z𝑝.
The Boolean circuit that computes (·) mod ℓ is an expensive
quadratic construction. One-hot gates can improve the cost.
Our module first subtracts a random mask 𝛼 from 𝑎 and then
reveals 𝑎 − 𝛼 to 𝐸. It then splits 𝑎 into small 𝑘-bit “chunks” and,
for each chunk, efficiently computes (·) mod ℓ using a one-hot
gate. The reduced chunks can then be recombined and the mask
stripped off using addition mod ℓ. (Addition modulo ℓ where both
arguments are already less than ℓ is a special case and can be
computed efficiently.) Crucially, the number of needed additions is
proportional only to the number of chunks. Due to lack of space,
we defer formal treatment of the module to Appendix B.
For our concrete experiment, we implemented modular reduction
for 32-bit numbers using the prime modulus 𝑝 = 65521 (the largest
16-bit prime). Our standard implementation conditionally subtracts
𝑝 · 2𝑘 for 𝑘 ∈ [16]; thus 16 conditional subtractions are needed.
Our optimized version uses chunking factor 𝑘 = 8. The technique
requires only 3 additions and 3 conditional subtractions and hence
substantially improves performance:
Comm. (KB)
Time (ms)
Standard Ours
10.5
1.08
35.1
3.75
Improvement
3.3×
3.5×
7.8 Exponentiation
Suppose the parties hold a sharing(cid:74)𝑎(cid:75) and wish to compute(cid:74)ℓ𝑎(cid:75)
ℓ = 2), there are fast circuits that compute(cid:74)ℓ𝑎(cid:75). However, for
where ℓ is a publicly agreed constant. For special cases of ℓ (e.g.,
arbitrary ℓ we need to repeatedly multiply inside GC, which is
expensive. We can use one-hot gates to greatly reduce the number
of needed multiplications.
Our module first subtracts a uniform additive mask 𝛼 from 𝑎
and then reveals 𝑎 − 𝛼 to 𝐸. Then, the module splits(cid:74)𝑎 − 𝛼(cid:75) into
small 𝑘-bit “chunks” and, for each chunk 𝑐, computes(cid:74)ℓ𝑐(cid:75) using a
one-hot gate. These intermediate values can be combined and the
mask stripped off using multiplication. We use our improved mul-
tiplication technique (Section 7.4) to further improve the module.
We defer formal treatment of the module to Appendix B.
We implemented exponents for 32-bit numbers using a standard
technique (which consumes 31 standard multiplications) and our
technique (with chunking factor 𝑘 = 8, which consumes only 4
improved multiplications):
Comm. (KB)
Time (ms)
Standard Ours
87
10.6
1024
101
Improvement
11.8×
9.52×
Acknowledgments. This work was supported in part by NSF
award #1909769, by a Facebook research award, a Cisco research
award, and by Georgia Tech’s IISP cybersecurity seed funding (CSF)
award.
REFERENCES
Danilo Sijacic, and Nigel Smart.
//homes.esat.kuleuven.be/~nsmart/MPC.
[AAL+] David Archer, Victor Arribas Abril, Steve Lu, Pieter Maene, Nele Mertens,
’bristol fashion’ mpc circuits. https:
[ADI+17] Benny Applebaum, Ivan Damgård, Yuval Ishai, Michael Nielsen, and Lior
Zichron. Secure arithmetic computation with constant computational
overhead. In Jonathan Katz and Hovav Shacham, editors, CRYPTO 2017,
Part I, volume 10401 of LNCS, pages 223–254. Springer, Heidelberg, August
2017.
[BCG+19] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, and
Peter Scholl. Efficient pseudorandom correlation generators: Silent OT
extension and more. In Alexandra Boldyreva and Daniele Micciancio,
editors, CRYPTO 2019, Part III, volume 11694 of LNCS, pages 489–518.
Springer, Heidelberg, August 2019.
[BDP+20] Joan Boyar, Morris Dworkin, Rene Peralta, Meltem Turan, Cagdas Calik,
and Luis Brandao. Circuit Minimization Work. http://cs-www.cs.yale.
edu/homes/peralta/CircuitStuff/CMT.html, 2020.
[BGI14] Elette Boyle, Shafi Goldwasser, and Ioana Ivan. Functional signatures and
pseudorandom functions. In Hugo Krawczyk, editor, PKC 2014, volume
8383 of LNCS, pages 501–519. Springer, Heidelberg, March 2014.
[BHKR13] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Phillip Rogaway.
Efficient garbling from a fixed-key blockcipher. In 2013 IEEE Symposium
on Security and Privacy, pages 478–492. IEEE Computer Society Press,
May 2013.
[BHR12] Mihir Bellare, Viet Tung Hoang, and Phillip Rogaway. Foundations of
garbled circuits. In Ting Yu, George Danezis, and Virgil D. Gligor, editors,
ACM CCS 2012, pages 784–796. ACM Press, October 2012.
[BIB89] Judit Bar-Ilan and Donald Beaver. Non-cryptographic fault-tolerant
computing in constant number of rounds of interaction. In Piotr Rudnicki,
editor, 8th ACM PODC, pages 201–209. ACM, August 1989.
[BMP13] Joan Boyar, Philip Matthews, and René Peralta. Logic minimization tech-
niques with applications to cryptology. Journal of Cryptology, 26(2):280–
312, April 2013.
[BMR90] Donald Beaver, Silvio Micali, and Phillip Rogaway. The round complexity
of secure protocols (extended abstract). In 22nd ACM STOC, pages 503–
513. ACM Press, May 1990.
[BMR16] Marshall Ball, Tal Malkin, and Mike Rosulek. Garbling gadgets for
In Edgar R. Weippl, Stefan Katzen-
Boolean and arithmetic circuits.
beisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors,
ACM CCS 2016, pages 565–577. ACM Press, October 2016.
[BP10] Joan Boyar and René Peralta. A new combinational logic minimization
technique with applications to cryptology. Experimental Algorithms
Lecture Notes in Computer Science, page 178–189, 2010.
[BW13] Dan Boneh and Brent Waters. Constrained pseudorandom functions
and their applications. In Kazue Sako and Palash Sarkar, editors, ASI-
ACRYPT 2013, Part II, volume 8270 of LNCS, pages 280–300. Springer,
Heidelberg, December 2013.
[CKKZ12] Seung Geol Choi, Jonathan Katz, Ranjit Kumaresan, and Hong-Sheng
Zhou. On the security of the “free-XOR” technique. In Ronald Cramer,
editor, TCC 2012, volume 7194 of LNCS, pages 39–53. Springer, Heidelberg,
March 2012.
[DKS+17] Ghada Dessouky, Farinaz Koushanfar, Ahmad-Reza Sadeghi, Thomas
Schneider, Shaza Zeitouni, and Michael Zohner. Pushing the communi-
cation barrier in secure computation using lookup tables. In NDSS 2017.
The Internet Society, February / March 2017.
[DNNR17] Ivan Damgård, Jesper Buus Nielsen, Michael Nielsen, and Samuel Ranel-
lucci. The TinyTable protocol for 2-party secure computation, or: Gate-
scrambling revisited.
In Jonathan Katz and Hovav Shacham, editors,
CRYPTO 2017, Part I, volume 10401 of LNCS, pages 167–187. Springer,
Heidelberg, August 2017.
[Ds17] Jack Doerner and abhi shelat. Scaling ORAM for secure computation. In
Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu,
editors, ACM CCS 2017, pages 523–535. ACM Press, October / November
2017.
[GGM84] Oded Goldreich, Shafi Goldwasser, and Silvio Micali. How to construct
random functions (extended abstract). In 25th FOCS, pages 464–479. IEEE
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea586[GKPP06] Jorge Guajardo, Sandeep S. Kumar, Christof Paar, and Jan Pelzl. Efficient
software-implementation of finite fields with applications to cryptogra-
phy. In Acta Applicandae Mathematica, 2006.
[GKWY20] Chun Guo, Jonathan Katz, Xiao Wang, and Yu Yu. Efficient and secure
multiparty computation from fixed-key block ciphers. In 2020 IEEE Sym-
posium on Security and Privacy, pages 825–841. IEEE Computer Society
Press, May 2020.
[GLMY16] Adam Groce, Alex Ledger, Alex J. Malozemoff, and Arkady Yerukhi-
movich. CompGC: Efficient offline/online semi-honest two-party com-
putation. Cryptology ePrint Archive, Report 2016/458, 2016. https:
//eprint.iacr.org/2016/458.
[GLNP18] Shay Gueron, Yehuda Lindell, Ariel Nof, and Benny Pinkas. Fast garbling
of circuits under standard assumptions. Journal of Cryptology, 31(3):798–
844, July 2018.
[HK20a] David Heath and Vladimir Kolesnikov. Stacked garbling - garbled cir-
cuit proportional to longest execution path. In Daniele Micciancio and
Thomas Ristenpart, editors, CRYPTO 2020, Part II, volume 12171 of LNCS,
pages 763–792. Springer, Heidelberg, August 2020.
[HK20b] David Heath and Vladimir Kolesnikov. Stacked garbling for disjunctive
zero-knowledge proofs. In Anne Canteaut and Yuval Ishai, editors, EU-
ROCRYPT 2020, Part III, volume 12107 of LNCS, pages 569–598. Springer,
Heidelberg, May 2020.
[HK21] David Heath and Vladimir Kolesnikov. Logstack: Stacked garbling with
o(b log b) computation. Cryptology ePrint Archive, Report 2021/531,
2021. https://eprint.iacr.org/2015/751.pdf.
Computer Society Press, October 1984.
[HKP20] David Heath, Vladimir Kolesnikov, and Stanislav Peceny. MOTIF: (al-
most) free branching in GMW - via vector-scalar multiplication. In ASI-
ACRYPT 2020, Part III, LNCS, pages 3–30. Springer, Heidelberg, December
2020.
[HKS+10] Wilko Henecka, Stefan Kögl, Ahmad-Reza Sadeghi, Thomas Schneider,
and Immo Wehrenberg. TASTY: tool for automating secure two-party
computations.
In Ehab Al-Shaer, Angelos D. Keromytis, and Vitaly
Shmatikov, editors, ACM CCS 2010, pages 451–462. ACM Press, October
2010.
[IKM+13] Yuval Ishai, Eyal Kushilevitz, Sigurd Meldgaard, Claudio Orlandi, and
Anat Paskin-Cherniavsky. On the power of correlated randomness in
secure computation. In Amit Sahai, editor, TCC 2013, volume 7785 of
LNCS, pages 600–620. Springer, Heidelberg, March 2013.
[JKO13] Marek Jawurek, Florian Kerschbaum, and Claudio Orlandi. Zero-
knowledge using garbled circuits: how to prove non-algebraic statements
efficiently.