### 发起请求

**清单 31-6：通过 IWbemLocator 接口的 ConnectServer 方法连接 WMI 服务的执行过程**

以下是 WbemClient 程序（WMI 应用程序，SDK 的一个示例，位于 Samples\SysMgmt\WMI\VC\SimpleClient）通过 IWbemLocator 接口的 ConnectServer 方法连接某个命名空间时的函数调用序列：

```
0012e32c 77ef3eac RPCRT4!NdrProxySendReceive
[省略三行 RPCRT4 内部的调用]
0012e79c 77520a71 ole32!CRpcResolver::CreateInstance+0x13d
0012e9e8 7752cddf ole32!CClientContextActivator::CreateInstance+0xfa
0012ea28 7752cc24 ole32!ActivationPropertiesIn::DelegateCreateInstance+0xf7
0012f1d8 774ffaba ole32!ICoCreateInstanceEx+0x3c9
0012f200 774ffa89 ole32!CComActivator::DoCreateInstance+0x28
0012f224 74ef18c1 ole32!CoCreateInstanceEx+0x1e
0012f258 74ef186e wbemprox!CDCOMTrans::DoActualCCI+0x3d
0012f29c 74ef15db wbemprox!CDCOMTrans::DoCCI+0x12d
0012f358 74ef17e4 wbemprox!CDCOMTrans::DoActualConnection+0x25c
0012f384 74ef1ee1 wbemprox!CDCOMTrans::DoConnection+0x25
0012f3c4 00415752 wbemprox!CLocator::ConnectServer+0x7c
0012f45c 782aca70 WbemClient!CWbemClientDlg::OnConnect+0xf2
```

从下而上，我们可以清楚地看到，当我们点击 WbemClient 程序的连接按钮后，其 OnConnect 方法创建并使用 WbemLocator 对象试图连接指定的命名空间。

```cpp
pIWbemLocator->ConnectServer(
    pNamespace, // 命名空间路径
    NULL,       // 使用当前账户
    NULL,       // 使用当前密码
    0L,         // 区域设置
    0L,         // 安全标志
    NULL,       // 权限（对于 NTLM 的域）
    NULL,       // 上下文
    &m_pIWbemServices); // 返回的服务指针
```

`wbemprox.dll` 中的 `CLocator` 类是对 `IWbemLocator` 接口的实现。接下来，`CLocator` 类调用另一个内部类 `CDCOMTrans` 开始实际的连接。`CoCreateInstanceEx` 是一个重要的 API，用于创建对象实例，支持本地和远程对象的创建。即使 WMI 应用程序在同一台机器上调用 WMI 服务，系统也会使用统一的 RPC 机制进行处理。最后，`RPCRT4!NdrProxySendReceive` 函数将数据消息发送给服务器并等待回复。NDR（Network Data Representation）是网络数据表示，DCOM 和 RPC 底层负责数据列集（marshaling）和网络通信的一系列函数和类通常被称为 NDR 引擎。

**小窍门**：因为 NDR 的收发函数是 RPC 和 DCOM 调用的必经之路，所以通过对这些函数设置断点可以截获 RPC 和 DCOM 调用。然后可以打印函数调用序列或者使用 WinDbg 的关于 RPC 扩展命令（输入 `!rpcexts.help` 显示帮助）显示 `MIDL_STUB_MESSAGE`（`!rpcstub`）、`RPC_MESSAGE`（`!rpcmsg`）等结构。

### 受理服务

**DCOM 和 RPC 机制** 会将 WMI 应用程序发起的服务调用转发给 WMI 服务器进程中的相应函数（组件的方法）。对于枚举和查询这样的请求，WMI 会将该请求放入一个队列，然后由现有的或新启动的工作线程来处理这个请求。

**清单 31-7：WMI 服务进程接收枚举实例请求并将其放入队列的执行过程**

```
ChildEBP RetAddr   
0158f418 762cec2f wbemcore!CCoreQueue::PlaceRequestInQueue+0xba 
0158f4a4 762f7463 wbemcore!CCoreQueue::Enqueue+0x1cf 
0158f4e4 762ee2a0 wbemcore!ConfigMgr::EnqueueRequest+0x77 
0158f518 762eabeb wbemcore!CWbemNamespace::_CreateInstanceEnumAsync+0x19f 
0158f560 77e79dc9 wbemcore!CWbemNamespace::CreateInstanceEnum+0xae 
[以下是 RPC 工作函数，省略]
```

对于连接命名空间这样的请求，WMI 会立即处理，前面的清单 31-5 显示了其内部过程。

**WMI 的工作线程** 会依次处理被放在队列中的请求任务。位于 `WBEMCORE.DLL` 中的 `CCoreQueue` 是专门用于管理和维护 WMI 请求队列的一个内部类，它提供了许多方法用于完成对队列的操作，包括加入请求（`Enqueue`、`ExecSubRequest`）、执行请求（`Execute`）、创建新工作线程（`DoesNeedNewThread` 和 `CreateNewThread`）。

**清单 31-8：WMI 工作线程执行队列中的查询请求的过程**

```
ChildEBP RetAddr   
011cfbdc 752146c9 repdrvfs!CNamespaceHandle::ExecQuery 
011cfc1c 762d11e0 repdrvfs!CSession::ExecQuery+0xb6 
011cfc7c 762d167e wbemcore!CRepository::ExecQuery+0xb5 
011cfcd8 762ddadc wbemcore!CRepository::GetRefClasses+0x8d 
011cfcf4 762e124d wbemcore!CAssocQuery::Db_GetRefClasses+0x20 
011cfd58 762e2328 wbemcore!CAssocQuery::BuildMasterAssocClassList+0x71 
011cfd9c 762e25a8 wbemcore!CAssocQuery::ExecNormalQuery+0x6b 
011cfdec 76303336 wbemcore!CAssocQuery::Execute+0x178 
011cfe8c 762fc769 wbemcore!CQueryEngine::ExecQuery+0x2a1 
011cfea8 762cef24 wbemcore!CAsyncReq_ExecQueryAsync::Execute+0x19 
011cfed4 762ced4e wbemcore!CCoreQueue::pExecute+0x3c 
011cff04 762f25cb wbemcore!CCoreQueue::Execute+0x18 
011cff4c 762cee89 wbemcore!CWbemQueue::Execute+0xf6 
011cff80 762cf0f9 wbemcore!CCoreQueue::ThreadMain+0x111 
011cffb4 7c80b50b wbemcore!CCoreQueue::_ThreadEntryRescue+0x56 
011cffec 00000000 kernel32!BaseThreadStart+0x37 
```

### WMI 提供器

从广义上讲，凡是为 WMI 应用程序（WMI 消耗器）提供管理数据或执行操作的 WMI 组件都属于 WMI 提供器，包括 CIM 中使用 MOF 编写的各个类及其实例。然而，很多时候，WMI 提供器特指通过 COM API 与 WMI 核心部件交互而提供管理服务（尤其是动态信息）的 WMI 组件。从 COM 接口的角度来看，WMI 提供器就是实现了 WMI 对象管理器所规定接口（例如 `IWbemServices` 和 `IWbemProviderInit`）的 COM 组件。

**WMI 提供器主要提供以下几类内容（功能）**：

- **类**：定义新的类，这样的提供器称为类提供器。
- **实例**：定义类的实例，这样的提供器称为实例提供器。
- **事件**：定义新的事件，这样的提供器称为事件提供器。
- **方法**：主要是实现 `IWbemServices` 接口的 `ExecMethodAsync` 方法，即执行类的方法。这样的提供器称为方法提供器。
- **属性**：实现 `IWbemPropertyProvider`，为某个 WMI 类提供和设置属性数据。这样的提供器称为属性提供器。
- **事件消耗器**：定义永久的事件接受器，这样的提供器称为事件消耗器提供器。

一个提供器通常至少提供以上六种功能中的一种，当然也可以同时提供多种功能。例如，纯粹的方法提供器很少，通常是与类和实例提供器实现在一起。

#### 31.4.1 Windows 系统的 WMI 提供器

为了提供简单一致的可管理性，Windows 操作系统本身和微软的很多产品都内嵌了对 WMI 的支持，配备了 WMI 提供器可以被管理程序通过 WMI 来访问和管理。表 31-8 列出了 Windows 系统中常见的 WMI 提供器和简要描述。

**表 31-8：Windows 系统中常用的 WMI 提供器**

| WMI 提供器 | 管理目标 | 类、实例或事件 |
| --- | --- | --- |
| 内核追踪提供器 | 内核追踪（kernel tracing）事件 | `Win32_ProcessTrace`, `Win32_ThreadTrace`, `Win32_ModuleLoadTrace` 等 |
| 活动目录提供器 | 活动目录（Active Directory）中的对象 | `[WMI\LDAP]`: `DS_LDAP_Class_Containment`, `RootDSE` |
| BizTalk 提供器 | BizTalk 服务器 | `Win32_PerfRawData` 及其派生类 |
| 性能计数器提供器 | 原始的性能计数器数据 | `Win32_PerfRawData` 及其派生类 |
| 加工后计数器提供器 | 计算好的（Cooked）计数器数据 | `Win32_PerfFormattedData` 及其派生类 |
| Perfmon 提供器 | 性能监视数据 | 实例提供器 |
| DFS 提供器 | 分布式文件系统 (DFS) | `Win32_DFSNode`, `Win32_DFSTarget`, `Win32_DFSNodeTarget` |
| DNS 提供器 | 域名系统 (DNS) 资源记录及服务 | 事件提供器 (`MS_Power_Management_Event_Provider`) |
| Disk Quota 提供器 | NTFS 文件系统中的最大数据量（数据配额） | `Win32_DiskQuota`, `Win32_QuotaSetting`, `Win32_VolumeQuotaSetting` |
| 事件日志提供器 | 事件日志数据 | `Win32_NTEventlogFile`, `Win32_NTLogEvent`, `Win32_NTLogEventLog` |
| IIS 提供器 | IIS 服务 | `IIsWebServerSetting` |
| IP Route 提供器 | 网络路由信息 | `Win32_IP4RouteTable`, `Win32_IP4PersistedRouteTable`, `Win32_ActiveRoute`, `Win32_IP4RouteTableEvent` |
| Job Object 提供器 | 命名的作业（Job）内核对象 | `Win32_NamedJobObjectStatistics`, `Win32_NamedJobObjectProcess`, `Win32_NamedJobObjectLimit`, `Win32_NamedJobObjectSecLimit` |
| Ping 提供器 | PING 命令得到的状态信息 | `Win32_PingStatus` |
| Policy 提供器 | 组策略 | `[\root\policy]`: `MSFT_Providers`, `MSFT_Rule`, `MSFT_SomFilter` |
| 电源管理事件提供器 | 电源管理事件 | 事件提供器 (`MS_Power_Management_Event_Provider`) |
| Security 提供器 | 安全设置 | `Win32_AccountSID`, `Win32_Ace`, `Win32_SID`, `Win32_LogicalFileAccess`, `Win32_LogicalFileAuditing`, `Win32_Trustee` 等 |
| Session 提供器 | 网络会话和连接 | `Win32_ServerSession` |

《软件调试》补编  
- 92 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved