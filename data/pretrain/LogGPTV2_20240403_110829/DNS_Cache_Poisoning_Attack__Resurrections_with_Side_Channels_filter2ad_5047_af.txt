20/20
20/20
5/6
20/20
5/5
20/20
10/10
10/10
failed if it still does not succeed after an hour. In both baseline (𝐵𝑎𝑠𝑒)
and packet loss (𝐿𝑜𝑠𝑠) experiments, the attack succeeds in around
80s, indicating the minimal impact of moderate packet losses. This is
expected as discussed in §6.4. In the 𝑅𝑇𝑇 experiments, we found the
delay and jitter do affect our attack. Under such unstable networks,
the attack may experience false positives as the verification packet
may be received before the probe. Fortunately, our attack can still
succeed because we have inserted time gaps to minimize reordering
(see §6.4).
For name server muting levels, we find they do have a significant
impact on our attack but are much smaller compared to the impact
on SADDNS [45]. Under the same muting level (50%), our attack
(𝑀𝐿) is 10x faster than SADDNS. This should be attributed to the
substantially faster scan speed and the fact that we do not need
to perform iterative probes to narrow down the search space. As
a result, this allows our attack to fare better under smaller attack
windows. Experiment 𝐵𝑎𝑡𝑐ℎ further confirms this. With N=1024,
the average success time increased by five times compared to the
baseline where N=1. Note in 𝑀𝐿, there is one attack attempt that
failed (after an hour) likely due to a link-layer issue that we are
unable to reproduce.
We also notice it would take ~4x the amount of time to poison a
domain with 3 name servers (𝑁 𝑆). This is due to the limit of 7k pps
packet sending rate, which forces us to scan for each name server
at 1/3 of the total rate. However, if an attacker scans with 3 times
the bandwidth, the result would have been close to the baseline.
In the real world scenario experiments (𝑅𝑒𝑎𝑙), we succeeded
in 410s on average, which is 2x the speed of SADDNS with the
same setting, despite the fact that our test is against BIND which
is known to have a much smaller attack window (about only 2s as
experienced in our experiments) than Unbound (more than 30s as
reported in SADDNS [45]).
Finally, for the background query traffic experiment 𝑅𝑒𝑎𝑙1, we
found random domain queries do not significantly impact the attack
performance. As expected, we do not find our scan being confused
by the additional open ephemeral ports because they are all private
ports and not visible to the name server which hosts the target
domain name (see §6.4). Instead, we find that the increase of time-
to-succeed is mostly attributed to the machine being slowed down
in processing these query packets. Compared to 𝑅𝑒𝑎𝑙1, 𝑅𝑒𝑎𝑙2 expe-
rienced worse results because the additional 10 queries per second
can generate ephemeral ports that are visible to the target name
server, therefore creating confusion to our scan. Looking into the
Session 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3410detailed logs, we see that 𝑅𝑒𝑎𝑙2 experiences 22 failed TxID brute
force attempts on average whereas 𝑅𝑒𝑎𝑙1 experiences only 11. The
majority of the additional failed brute force attempts are due to the
failure in inferring the correct port number.
In general, we make two additional general observations on the
results. First, the overall attack time is spent predominantly on
repeated port scans (starting from the smallest port to the largest),
accounting for 96% to 98% of the time. The remaining time is spent
on brute-forcing the TxIDs. Second, the time-to-succeed varies
significantly depending on how close the correct port is to the
beginning of the port scan. In many cases, we see the time-to-
succeed being a few seconds, whereas in the worse case (especially
when noise is introduced), it can take 30 minutes to find the port
and succeed in brute-forcing the TxIDs.
7.2 Other Attacks
Forwarder Attack. To evaluate the performance of the public-
facing port scan, we launched the attack against an ASUS AX6600
Wi-Fi router which has a built-in DNS forwarder. We used a simi-
lar setup as the 𝐵𝑎𝑠𝑒 experiment in the resolver attack where the
attacker is a LAN machine that can trigger DNS queries on the
forwarder. In this attack, we used the IPv4 network and set the up-
stream resolver as 8.8.8.8, which the attacker needs to spoof when
brute-forcing the TxIDs. Finally, the attack succeeded in 13s.
Redirect Attack. Similar to 𝐵𝑎𝑠𝑒, we launched the redirect-based
attack under the same settings, with the only change of replacing
IPv6 with IPv4, to demonstrate the private port scan under different
IP versions. Finally, the attack succeeded in ~150s.
Public Resolver Attack. We obtained authorization to test our
attack against an anonymized popular public resolver listed in
Table 2 and it took ~30s and ~180s to succeed in two attack attempts
respectively, with the NS mute level set to 75%.
8 DISCUSSION
8.1 Comparison with SADDNS
Ephemeral port inference method. As mentioned in §4, the first
and foremost difference is the use of ICMP probes in our attack. By
design, ICMP messages are considered errors that should not solicit
any responses [12]. This makes them an unlikely avenue to probe
any secret. Nevertheless, we demonstrate a superior understanding
of the nature of side channels, making ICMP probes a successful
entry point in UDP ephemeral port scans.
Side channel type. Our side channel leverages the space resource
limit (i.e., the space for storing the next hop exception cache is
limited) while SADDNS’ side channel leverages the time resource
limit (i.e., ICMP error generating rate is limited). Moreover, our side
channel arises when processing incoming ICMP packets (and this
is why we can still infer the ephemeral port despite no reply to the
ICMP probing packet is sent) while SADDNS’ side channel arises
when processing outgoing ICMP packets.
Port scan speed. Thanks to the novel space-constraint side chan-
nel arising in the packet receiving path, the ICMP-based ephemeral
port scan rate can be theoretically unlimited. In practice, the at-
tacker can also adjust the scan rate and strategy flexibly to achieve
a higher success rate according to different network conditions.
SADDNS, however, only allows the fixed 1000 pps slow port scan
due to the nature of the time-constraint side channel it uses. The
slow scan rate leads directly to a lower success rate when racing
against legitimate DNS responses.
Resistance to the noise. Unlike the global counter used in SADDNS,
which is shared across all remote IPs, the exception cache used in
our side channel is a hash-based structure and is only shared with
a smaller range of IPs, which reduces the noise level of our side
channel — it is less likely to be interfered with by background
traffic associated with random IPs. Besides, SADDNS requires a
strong 50-ms time block synchronization, which can be hard to
achieve with noise. In contrast, our attack does not have such a
strict synchronization requirement.
Preparation of the attack. Compared to SADDNS, our attack
requires an additional step of inferring colliding IPs that hash into
the same bucket. Nevertheless, as described in §4.6, it is only a
one-time effort for each resolver we target.
8.2 PMTUD and DNS
It has been a controversial decision to enable Path MTU Discov-
ery (PMTUD) on DNS packets. Historically, [10] indicates ICMPv6
packet too big messages could benefit the responsiveness of DNS
queries while [30] argues the opposites claiming that it could lead
to fragmentation-based DNS cache poisoning attacks. As a result,
we see DNS software (especially BIND) changing back and forth
regarding its socket options related to PMTUD.
Recently, there appears to be a convergence as both BIND and Un-
bound start to set the socket option of IP_PMTUDISC_OMIT, which
instructs the kernel to never reduce the MTU. This is mostly in
fear of the fragmentation-based DNS cache poisoning attacks that
rely on tricking the name server to fragment its responses [30].
Interestingly, this option is now enabled for the sockets on both the
name servers and resolvers (even though the concern was mostly
on name servers). In addition, both BIND and Unbound decide to
enable this option for IPv4 sockets only and leave IPv6 unchanged.
The reason for leaving IPv6 sockets unchanged is likely that
fragmentation can be avoided most of the time as the minimum
MTU is increased to 1280. This means that any link carrying IPv6
datagrams must be able to handle at least 1280 bytes of payload.
This is large enough to transmit most DNS packets and makes the
fragmentation-based attacks unlikely to succeed.
8.3 Existing Defenses
There are already a number of additional DNS security solutions in
addition to the randomization of ephemeral ports that can defend
against DNS cache poisoning attacks. However, they are not widely
deployed due to various reasons.
DNSSEC adds the data origin authentication and data integrity to
DNS [52] and therefore by design prevents any attacker without
holding the correct key to inject any records. However, only 1.85%
of Alexa Top 10k websites enable the DNSSEC, and only 12% of
open resolvers actually validate the record integrity if provided [18].
During our experiment, we found famous websites like Google,
Facebook, and Twitter do not even have DS records on the parent
zone, which is a necessary record for DNSSEC to function.
0x20 Encoding is proposed to randomize the upper and lower
case of the letters in the domain name (of both the query and
response), thus introducing additional entropy beyond the TxID
and ephemeral port [57]. The amount of entropy increases as the
Session 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3411length of the domain name increases. Unfortunately, it is found
recently [45] that the 0x20 encoding has compatibility issues (since
it requires support from the name server) and 12 out of 14 popular
public DNS resolvers tested do not use it (which we also confirm to
remain true at the time of writing). Famous resolvers like 8.8.8.8
only enable 0x20 encoding for whitelisted domains.
DNS Cookie is yet another secret exchanged between a resolver
and name server, designed to defeat any form of off-path response
injection [3]. Similar to DNSSEC, DNS cookie requires support from
both the resolver and name server to work properly. However, only
5% of open resolvers enable this by default and some may even
reject queries with DNS cookie, as reported in recent studies [21,
45], indicating compatibility is still a serious concern. Moreover,
DNS cookie is only a solution during the transitioning period into
DNSSEC (as it is strictly weaker than DNSSEC), which can be
another reason why it is not being widely deployed.
8.4 New Defenses Against Our Attack
In addition to the existing defenses, we also propose a set of or-
thogonal and near-term solutions to mitigate our attack. We will
further discuss the generalized defense against the network side
channels in Appendix D.
Set proper socket options. The most direct way is to use the
socket option IP_PMTUDISC_OMIT, which instructs the OS not to
accept the ICMP frag needed messages and therefore eliminates the
side-channel related processing in the kernel. However, legitimate
ICMP frag needed messages can be sent by a router which will be
ignored also. In such cases, we recommend that the application can
retransmit the query using TCP to avoid failing to transmit a UDP
query due to real problems with the MTU.
Randomize the caching structure. Similar to the solutions to
other network side channel attacks [14–16, 45, 51], sufficiently
randomizing the shared resource would make the side channel
practically unusable. With regard to the exception cache, we rec-
ommend a few places where randomization can take place: (1) the
max length of the linked list used for solving hash collisions, (2) the
eviction policy (currently the oldest will always be evicted), (3) the
secret of the hash function, i.e., we can re-key periodically (every
few seconds or tens of seconds).
Reject ICMP redirects. Redirects are originally designed for a
network with multiple gateways (similar to a router with multiple
next-hop options). If a DNS server has only one default gateway, the
administrator should consider ignoring ICMP redirect messages to
prevent redirect-based attacks, which can be configured via sysctl
(see Appendix A).
8.5 Ethical Concerns
We conduct our experiments with ethics as a top concern. During
the measurement of the vulnerable population in the wild, we
attempt to minimize the impact of our probes by (1) querying our
own domain and (2) at a mild speed for each resolver (under 1,000
packets per second). Also, we avoid sending suspicious-looking
packets, e.g., an excessive number of ICMP packets or packets with
spoofed IPs that can potentially trigger firewall alerts.
In the evaluation section, since it requires flooding fake DNS
responses to finish the end-to-end attack, we refrain from attacking
any real resolver and performed the attack in the local setup instead.
Responsible disclosure. We have reported our findings to the
key stakeholders in the DNS community, including BIND, Cloud-
flare, and Linux. Linux has applied two patches on both IPv4 and
IPv6 stacks to randomize the depth of the linked list storing the
exceptions. BIND also begins to set IP_PMTUDISC_OMIT on IPv6
sockets from 9.16.20 concurrent to our study.
9 RELATED WORK
DNS Cache Poisoning Attacks The off-path DNS cache poison-
ing attack was first popularized by Dan Kaminsky in 2008 [36].
After the ephemeral port number was randomized, fragmentation
attacks [13, 33] were invented to eliminate the need for guessing
the source port by replacing the second fragment of the original
DNS response. However, these attacks usually have some strong
assumptions like predicting the IPID of the packet or running a
puppet on the victim resolver. Port exhaustion attacks [9, 32] de-
randomize the ephemeral port number by exhausting all but one
available ephemeral port, leaving the DNS resolver only one fixed
port to use. These attacks also require the puppet to work. In 2020,
SADDNS [45] was invented as the first side-channel based DNS
cache poisoning attack. However, this attack is slow and usu-
ally takes tens of minutes to finish. At the same time, Zheng et
al. ports the fragmentation attacks to the forwarder and found
the attack much easier when using the attacker-controlled name
server to force the fragmentation [59]. Jeitner et al. present a novel
way to poison DNS caches by exploiting domain parsing ambigui-
ties [35]. Amit Klein uses the IPID value to predict the random UDP
ephemeral port number by exploiting the cryptographic properties
of the shared random number generator [37].
Overall, unlike other works, our attacks are based on another
unique side channel in ICMP and provide another way to poison
the DNS cache using the fast ICMP-based port scan.
Side Channel Attacks Side channels have been leveraged in net-
work attacks [7, 39, 43, 50]. Specifically, [23] leverages IPID global
counter to probe open ports. [49] utilizes the stateful firewall to
infer the TCP sequence number. [14] uses global challenge ACK
counter to infer the TCP sequence number and hijack the TCP con-
nection off-path. Besides, Cao et al. presents an automated tool for
finding side channels in the TCP stack using model checking and
found several other side channels inside the Linux TCP stack [16].
10 CONCLUSION
This paper presents novel side channels during the process of han-
dling ICMP errors, a previously overlooked attack surface. We find
that side channels can be exploited to perform high-speed off-path
UDP ephemeral port scans. By leveraging this, the attacker could
effectively poison the cache of a DNS server in minutes. We show
that side channels affect many open resolvers and thus have serious
impacts. Finally, we present mitigations against the discovered side
channels.
ACKNOWLEDGMENTS
We wish to thank the anonymous reviewers for their valuable com-
ments and suggestions. This work was supported by the National
Science Foundation under Grant No. 1652954.
Session 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3412REFERENCES