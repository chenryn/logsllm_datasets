### Computation Protocols and Frameworks

Several secure computation protocols have been developed, including:
- **TinyOT Protocol [48]**: An actively secure two-party computation based on Boolean circuits.
- **Actively Secure Multi-Party Computation Protocol [16]**: Based on arithmetic circuits.
- **SPDZ Protocol [28, 30]**: Provides both active and covert security for multi-party computation using arithmetic circuits.

#### Alternative MPC Frameworks

- **Fairplay**: Initially designed for two-party computation [46], it was later extended to multi-party computation as FairplayMP [15]. Fairplay implements a two-party computation protocol following Yao's suggestion, while FairplayMP is based on the Beaver-Micali-Rogaway protocol [10].
- **Sharemind [21]**: A secure service platform for data collection and analysis, employing a 3-party additive secret sharing scheme. It ensures provable security in the honest-but-curious model with no more than one passively corrupted party.
- **TASTY [37]**: A tool suite for secure two-party computation in the semi-honest model. TASTY supports the compilation and evaluation of functions using both garbled circuits and homomorphic encryption.

### Compilers and Tools

- **Holzer et al. [39]**: Developed a compiler that uses the bounded model-checker CBMC to translate ANSI C programs into Boolean circuits. These circuits can be used as inputs for the secure computation framework by Huang et al. [40]. The compiler, CBMC-GC, can also serve as a front-end for the verified implementation of Yao’s protocol. As demonstrated in Section 4, our approach not only provides higher assurance but also, with all optimizations activated, generates circuits that offer better performance for certain classes of circuits compared to the current version of CBMC-GC (v0.9.3).
- **Amy et al. [45]**: Built a compiler that translates Revs [49] programs into space-efficient reversible circuits, focusing on their use in large quantum computations. The work was fully developed and verified using F⋆.

### Conclusions and Future Work

We have presented a fast and efficient software stack for secure function evaluation. Potential future steps include adapting our approach to recent developments in multi-party and verifiable computation, such as [50], and achieving tighter integration between prototyping tools, verification tools, and verified compilers.

### Acknowledgments

This work is partially supported by:
- ONR Grants N000141210914 and N000141512750
- Cátedra PT-FLAD em Smart Cities & Smart Governance
- Fundação para a Ciência e a Tecnologia grant FCT-PD/BD/113967/2015
- ERDF – European Regional Development Fund through the Operational Programme for Competitiveness and Internationalisation - COMPETE 2020 Programme within project «POCI-01-0145-FEDER-006961»
- National Funds through the Portuguese funding agency, FCT - Fundação para a Ciência e a Tecnologia as part of project «UID/EEA/50014/2013»

The EasyCrypt definitions build on early work by Guillaume Davy. We thank Pierre-Yves Strub for his role in the development of EasyCrypt.

### References

[References are listed as provided, with no changes needed.]

### Security Definitions and Abstractions

**Top-Level Abstraction for Two-Party Protocols**

Figure 11 illustrates the top-level abstraction for two-party protocols. Two parties aim to compute a functionality \( f \) on their joint inputs, each obtaining their share of the output. This can be done interactively via a protocol \( \text{prot} \), which may use additional randomness (explicitly passed for each party) and produces a conversation trace \( \text{conv} \) describing the messages exchanged during the protocol execution. The input space can be restricted by a validity predicate \( \text{validInputs} \), which excludes trivial attacks not covered by the security definition.

**Simulation-Based Security**

Security for multi-party computation protocols is defined using simulation-based definitions, capturing honest-but-curious (semi-honest or passive) adversaries. Each party's view (including its randomness and the list of exchanged messages) and a notion of leakage (modeling how much of the party's input may be leaked) are considered. Informally, a protocol is secure if each party's view can be efficiently simulated using only its inputs, outputs, and precisely defined leakage about the other party's input.

Formally, this security notion is expressed using two games (one for each party). One of these games is shown in Figure 12, in the form of an EasyCrypt module. Modules are used to model games, experiments, schemes, oracles, and adversaries. Our formalization accommodates generic protocols, justifying the technicality of parametrizing randomness generation procedures with public information associated with the protocol inputs.

**Module Types and Procedures**

Modules consist of a memory (a set of global variables, here empty) and a set of procedures. Procedures in the same module can share state, so it is not necessary to explicitly add state to the module signature. Modules can be parameterized by other modules (functors) whose procedures they can query like oracles. Access to oracles is specified using module types. A module fulfills a module type if it implements all the declared procedures. Additional procedures not appearing in the module type are not accessible as oracles.

For example, an adversary impersonating Party \( i \) is defined by two procedures: \( \text{choose} \) (chooses a full input pair for the functionality) and \( \text{distinguish} \) (uses Party \( i \)'s view to produce a Boolean guess as to whether it was produced by the real system or the simulator).

```plaintext
Module type AdvProt_i
type leak1, leak2.
op ϕ1 : input1 → leak1.
op ϕ2 : input2 → leak2.
type view1 = rand1 ∗ conv.
type view2 = rand2 ∗ conv.
module type Sim = {
proc sim1(i1: input1, o1: output1, l2: leak2) : view1
proc sim2(i2: input2, o2: output2, l1: leak1) : view2
module type Simi = {
proc simi (ii : inputi , oi : outputi , l3−i : leak3−i ) : viewi
}.
}.
module type AdvProt_i = {
proc choose(): input1 ∗ input2
proc distinguish(v: viewi ) : bool
}.
module Sec1(R1: Rand1, R2: Rand2, S: Sim1, A1: AdvProt_1) = {
proc main() : bool = {
var real, adv, view1, o1, r1, r2, i1, i2;
(i1,i2) = A1.choose();
real ←$ {0,1};
if (!validInputs i1 i2)
adv ←$ {0,1};
else {
if (real) {
r1 = R1.gen(ϕ1 i1);
r2 = R2.gen(ϕ2 i2);
(conv,_) = prot i1 r1 i2 r2;
view1 = (r1, conv);
} else {
(o1,_) = f i1 i2;
view1 = S.sim1(i1, o1, ϕ2 i2);
}
adv = A1.distinguish(view1);
return (real == adv);
}
```

This structure ensures that the security properties are rigorously defined and verifiable.