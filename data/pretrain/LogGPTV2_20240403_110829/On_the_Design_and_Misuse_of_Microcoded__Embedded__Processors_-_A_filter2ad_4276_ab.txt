Furthermore, a stateless trigger can combine multiple val-
ues from the CPU state, such as the program counter value,
to identify an assembly instruction used in a speciﬁc part of
the software. However, stateless Trojans are limited to one
macroinstruction’s current execution and cannot directly share
information between different instructions.
Stateful Trigger
In contrast, we deﬁne a stateful trigger as
a mechanism that processes state across multiple instructions.
For example, the Trojan is not only triggered by the operand
value 0xf0f0 f0f0 of the ADD, but also checks if a speciﬁc
instruction sequence has been executed beforehand. This ap-
proach enables conclusions about high-level software (e.g.,
by matching speciﬁc instruction or data sequences over a cer-
tain period) with which complex, extremely targeted trigger
conditions can be realized. For instance, the Trojan can check
for a speciﬁc known instruction signature, e.g., a sequence of
assembly code of a cryptographic primitive used in a known
library. If desired, the operands used within these signature
sequences can also be evaluated, which allows the use of ad-
ditional magic trigger values. Even the implementation of an
entire on/off mechanism is possible, increasing the overall
stealthiness.
Payload Microcode Trojan payloads
are generally
application-speciﬁc but versatile since microcode enables
software-like ﬂexibility with access to low-level hardware
features.
Adding new (malicious) instructions Not only can exist-
ing instructions in the architecture be manipulated, but new
(hidden) instructions can be added. This option is of concern if
an attacker has access to the system and can execute arbitrary
code. Depending on the system, custom instructions could
change the privilege-level (e.g., from user-mode to system-
mode in RISC-V) or allow access to protected memory. Since
the insertion and execution of new instructions are controlled
by the attacker, the possibility of accidental triggering by le-
gitimate code is limited. Hidden instructions could contain
routines whose functionality is only limited by microcode stor-
age size. However, even small tasks require many microcode
steps, limiting potential use cases. To support custom instruc-
tion addition, the decode unit of the CPU must be modiﬁable,
otherwise the insertion of new instructions is not possible.
3.4 Microcode Trojan Building Blocks
To design microcode Trojans we make use of microcode
building blocks that perform speciﬁc operations including
(1) reads/writes with general-purpose registers (including
microcode scratch registers that hold temporary data), (2)
arithmetic and logic computation, (3) conditional branches
(and loop) operations, and (4) operations to hook microcode
execution via updates, since not every instruction might be
microcoded for performance reasons. Using these capabilities,
we show how an attacker is able to design powerful microcode
triggers and payloads. Koppe et al. showed the existence of
general building blocks to perform these operations in the
AMD K8/K10 [22]. The blocks provide Turing-complete
capabilities.
4 Microcoded Processor Evaluation Platform
To foster and enable research, we have developed our own
microcoded embedded processor evaluation platform. Our
platform allows for fast microcoded instruction prototyping.
Our supporting tools enable the straightforward generation of
microcoded instructions and serve as a basis for our security
analysis.
• Microcoded RISC-V CPU: The system is built to sup-
port the RISC-V base speciﬁcation RV32I. This enables
integration with existing RISC-V compiler toolchains
and rapid software development and reuse. The approach
proﬁts from the established RISC-V ecosystem.
• Microcode Language & Generation: We developed a
high-level descriptive microcode language that allows
270    30th USENIX Security Symposium
USENIX Association
for fast instruction prototyping and the automatic gen-
eration and deployment of microcode. The language
facilitates instruction modiﬁcation and the addition of
new instructions.
• Evaluation Platform: We integrated the CPU and mi-
crocode in a framework to conduct our security analy-
sis. The architecture is modeled as a simple embedded
system/micro-controller with all memory and peripherals
on-chip.
An alternative microcoded RISC-V CPU implemented in
the Chisel language [5] was previously developed. Instead of
using this core, we opted to develop a new custom implemen-
tation that includes the microcode building blocks found in
commercial systems (e.g., scratch registers, cf. Section 3.4).
Our new core allows for deep coupling with our microcode
generation framework used for rapid prototyping.
4.1 CPU Overview
An overview of the microcoded RISC-V architecture is de-
picted in Figure 1. The following discussion explains how the
microcode control unit interacts with the data path.
Microcode Control Unit The complete microprocessor in-
struction cycle is controlled by a microcode sequencer com-
parable to a modiﬁable ﬁnite state machine. A micropro-
cessor instruction (macroinstruction) is broken into a set of
microinstructions executed by the microcode sequencer. The
current location in the µCode ROM is determined by the Mi-
croprogram Counter (µPC). Each microinstruction contains
all control signals for the data path, which are stored in the
Microinstruction Register (µIR) register. The microcoded con-
trol signals manage the enables and operations of the data
path and determine the next step of the microcode sequencer.
The µPC Mux selects the next step. The sequencing options
are: increment the µPC, take a conditional branch, fetch the
next instruction, or jump to an instruction start address. The
conditional branch can jump to an arbitrary location in the
µCode ROM. The next instruction is decoded in the instr dec
block.
Data path The main CPU data path is designed to require
multiple cycles per macroinstruction using a von Neumann
architecture. Only one participant can internally transfer data
in a cycle using the single bus. This limitation results in mul-
tiple cycles for the execution of most macroinstructions but
allows for sequential modeling and low scheduling overhead.
Operations performed in the Arithmetic Logic Unit (ALU)
use the operand registers A and B. The Register File (RF)
holds the 32 internal registers per the RV32I speciﬁcation.
Additionally, four scratch registers can be used to store tem-
porary values for the macroinstructions. The implementation
of microcode accessible scratch registers is typical, even in a
modern desktop CPU [22]. All external memory and peripher-
als are accessed through the Random Access Memory (RAM)
interface.
Limitations To keep the system extensible as a proof of
concept for our attacks, the architecture does not implement
instruction-level parallelism. Since a system-on-chip architec-
ture with memory included is modeled, memory access does
not require caches or pre-fetch engines.
4.2 Microcode
In the following, the microcode features of our architecture
are described.
4.2.1 Microcode Language
A microcode language was developed and used to facilitate
fast instruction prototyping, manipulation, and generation of
microcode. Listing 1 shows the general structure of a CPU
instruction in our microcode language. A sequence of one or
multiple microinstructions is declared line by line. One line
translates exactly to one bus cycle. One microstep consists
of an identiﬁer and the microcode command. The microin-
struction identiﬁer can also be used to feature jumps to mi-
croinstructions in the microcode ROM, enabling conditional
branches in a microcode instruction.
1 def 
2
micro_step_0 : command_0 ;
micro_step_1 : ...;
3
Listing 1: Microcode Instruction Deﬁnition Prototype
The macroinstruction can contain a combination of dif-
ferent data path operations. In one cycle, a single data bus
transaction can occur, and the next microcode sequencing
step can be determined. Thus, in one command, data can be
moved, the ALU controlled, branches evaluated and executed,
and instructions sequenced.
Sequential Microcode Modeling
In the following, the im-
plementation of an instruction deﬁned in the RISC-V ISA
using our microcode language is illustrated. The ADD instruc-
tion adds the values from the register ﬁle locations speciﬁed
by rs1 and rs2 and stores the result at location rd. The follow-
ing text shows the mnemonic for the ADD instruction:
ADD rd, rs1, rs2
Our implementation of the ADD instruction in our mi-
crocode language is shown in Listing 2. Since all data trans-
fers must be mapped to different cycles, this instruction is
broken down into three microinstructions.
USENIX Association
30th USENIX Security Symposium    271
Figure 1: Overview of our microcoded RISC-V architecture
1 def add
2
add0 : a 
1 0 x230 : jal
2 0 x234 : addi a5 ,a0 ,0
3 0 x238 : beq
4 0 x23c : jal
5 0 x240 : jal
a5 , zero ,240 
ra ,7000 
zero ,240 
Listing 3: Example: signature veriﬁcation result handling in
vboot [14, 18] (Chrome OS veriﬁed boot system). Above C
code and below assembly code after compilation (gcc 9.2.0
with optimization level O0).
instruction that handles control ﬂow based on the veriﬁcation
result. Note that we can target a speciﬁc instruction based on
the unique address (by checking the program counter value)
1 in Figure 3. Moreover, we can change instruction seman-
tics ( 2 in Figure 3) in a way so that control transfer is always
redirected to the valid signature program path or conditionally
so that the valid signature program path is only taken on an
additional trigger condition.
5.1 Microcode Trojan Design
We now detail our microcode Trojan trigger and payload de-
sign that bypasses the vboot [18] secure boot implementation.
1 Trigger We identiﬁed the BEQ instruction at address
0x238 in Listing 3 as the relevant instruction for the Trojan
trigger since it handles veriﬁcation result processes. More
precisely, if the return value of the verify() function is zero
(veriﬁcation fails), a branch is made to the memory address
0x240 where the boot process is trapped (because the instruc-
tion at this address always jumps back to itself). Thus we
added a microcode check to the BEQ instruction semantics
that checks for the address 0x23c (since the program counter
value always points to the next address after instruction fetch).
We optimized our microcode Trojan trigger code, so it is only
executed in case the result comparison yields equal (so there
is no performance impact on the BEQ instruction when the
result is not equal, cf. beq2 in Listing 4).
The designed trigger performs the desired functionality
since the branch is only taken if the veriﬁcation failed (e.g., 0
is returned), and the address is not 0x23c. The branch is not
taken if the address is 0x23c, and thus the next instruction is
fetched. Note that the Trojan does not inﬂuence other BEQ
instructions, since it is only executed at one speciﬁc point
when the program counter (PC) is at address 0x23c.
USENIX Association
30th USENIX Security Symposium    273
LoadFirmwareLoadSignatureSignaturecorrect?ExecuteFirmwareHaltyesnoApplyMicrocodeUpdate2 Payload The payload in this case is the act of not taking
the branch. The payload enables the attacker to load tampered
ﬁrmware, resulting in further attack options.
1 def beq
2
beq0 : a <- rf [ rs1 ];