software. Nevertheless, they are suitable for debugging software
that is under development.
Secure allocators. Secure allocators [11, 13, 38, 40] provide drop-
in replacements for the standard memory allocator, with allocation
strategies that take into account security vulnerabilities. Custom
allocators can thwart use-after-free attacks, but, unfortunately, it
is common for industrial software to already employ and heavily
rely on an embedded allocator for better memory management. For
instance, Google Chrome employs tcmalloc [34], while Mozilla
Firefox uses jemalloc [22]. A secure allocator can protect Mozilla
Firefox or Google Chrome only if their embedded allocator(s) are
disabled (often infeasible in practice).
The type-safe memory reuse strategy of Cling [11] is the clos-
est, in terms of scope, to VTPin. Yet, unlike VTPin, Cling yields
important limitations in practice. First and foremost, Cling cannot
co-exist with custom allocators [11], while VTPin integrates nicely
with them.
In addition, Cling attempts to infer allocation wrap-
pers for identifying the type of a given object. However, accurate
type identiﬁcation is challenging at the binary level, especially on
C++ binaries with complex design patterns (e.g., the factory pat-
tern) [23], which yield not a single, but many levels of allocation
wrappers. This results in type over-approximation and ultimately
may allow sufﬁcient leeway for attacks.
Summary. Using any of the mitigations in Table 1 for protecting
against VTable hijacking attacks has one of the following limita-
tions: (a) source code is needed and the solution does not apply
to binaries [15, 32, 33, 38, 53, 57]; (b) the solution applies to bina-
ries [24, 43, 54, 55, 59–61], but it is ineffective [16, 21, 26, 35, 47];
(c) the solution applies to binaries but the memory allocator must be
replaced [11,13,14,40]; (d) the solution applies to binaries without
replacing the memory allocator, but the overhead is high [28, 39].
3. SYSTEM OVERVIEW
VTPin aims at protecting binary-only software against VTable
hijacking, through use-after-free vulnerabilities, by instrumenting
programs in the least intrusive way and with low overhead. Our
least intrusive requirement entails the following:
• No access to source code or debugging symbols.
• No binary analysis, disassembling, or patching.
• No changes to memory allocation strategies (e.g., via drop-in
allocator replacements).
The core idea behind VTPin is simple, but the mechanics for
realizing such a system can be complicated (see Section 4). For-
tunately, our techniques can be implemented in a highly portable
way, promoting VTPin to a generic solution for mitigating VTable
hijacking through use-after-free vulnerabilities.
VTPin is based on the observation that the majority of use-after-
free (ab)uses are capitalized by hijacking VTable pointers through
strategic re-allocation of memory. Therefore, instead of resolving
and protecting dangling pointers, VTPin ensures that all VTable
pointers are always valid, and thus cannot be maliciously (ab)used
via future re-allocations. Whenever a virtual object is freed, VT-
Pin handles the deallocation and ensures that the VTable pointer
is preserved in a new and safe form. Speciﬁcally, VTPin releases
the memory occupied by the virtual object, but preserves the space
taken by all VTable pointers, and overwrites them so that they point
to a (read-only) VTable provided by VTPin itself. Essentially, VT-
Pin pins all freed VTable pointers on a safe VTable. Dangling
pointers clearly survive, but they are effectively neutralized, and,
if triggered, they can be accurately detected—this also makes VT-
Pin a practical tool for identifying use-after-free vulnerabilities. If a
dangling pointer is triggered when VTPin is in place, the program
will not crash, but control will be transferred to a virtual method
that the system controls. Therefore, the dangling pointer access
can be logged, traced, and eventually patched.
We demonstrate VTPin works in Figure 3, using (as a reference)
the vulnerable program presented in Figure 1.
Initially, the two
pointers, p1 and p2, point to the VTable pointer of a Boy instance
(Figure 1, line 17), and the memory layout is the one depicted in
Figure 3(a). Once p1 is freed (Figure 1, line 22), as illustrated in
Figure 3(b), VTPin takes control. The system frees all space occu-
pied by the Boy instance, but preserves the vfPtr pointer. Next, it
replaces the value of vfPtr with the address of a safe object con-
trolled by VTPin itself. An adversary may further spray memory
with forged pointers, but vfPtr cannot be hijacked, as shown in
Figure 3(c). If a method is invoked through the dangling pointer
p2 (Figure 1, line 26), a safe method of the special VTPin virtual
object will be executed, and the call will be contained and logged.
The protection offered by VTPin is not provided without a cost.
Preserving all VTable pointers introduces memory overhead.
If
the protected program uses the system allocator, then for each de-
allocated virtual object only the VTable pointer (vfPtr; 8 bytes)
survives. Otherwise, if a custom, slab-like allocator is used (e.g.,
jemalloc, tcmalloc), virtual objects are preserved in whole. As
we demonstrate later in Section 5, where we precisely estimate the
memory overhead of VTPin, virtual objects account for a small
fraction of all memory objects, and even complicated benchmark
suites that heavily stress the capabilities of web browsers leak only
a few MBs of data. Moreover, many applications are based on
short-lived process models. For example, popular web servers fork
a new process, occasionally, for serving a new client, and shortly
afterwards the process terminates. In such cases, VTPin can of-
fer protection with practically no memory overhead. On the other
hand, for long-lived processes, VTPin employs a second garbage
collection (GC) step, where memory is periodically scanned for
potential dangling pointers. VTPin releases any preserved VTable
pointer that has no reference to it, and retains all other pointers that
are (possibly) still referenced from other memory locations.
451(cid:3)(cid:10)(cid:13)(cid:14)(cid:16)(cid:20)(cid:1)(cid:12)(cid:7)(cid:20)(cid:14)(cid:18)(cid:17)(cid:1)(cid:14)(cid:11)(cid:1)(cid:3)(cid:1)
(cid:3)(cid:1)
(cid:3)(cid:2)
(cid:19)(cid:11)(cid:4)(cid:17)(cid:16)
(cid:9)(cid:7)(cid:17)(cid:7)
(a)
(cid:6)(cid:5)(cid:7)(cid:8)(cid:12)(cid:10)(cid:1)(cid:14)(cid:11)(cid:1)(cid:2)(cid:14)(cid:20)
(cid:1)(cid:15)(cid:17)(cid:16)(cid:1)(cid:17)(cid:14)(cid:1)(cid:13)(cid:6)(cid:9)(cid:8)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:15)(cid:17)(cid:16)(cid:1)(cid:17)(cid:14)(cid:1)(cid:15)(cid:4)(cid:11)(cid:14)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:15)(cid:17)(cid:16)(cid:1)(cid:17)(cid:14)(cid:1)(cid:15)(cid:5)(cid:6)(cid:12)(cid:7)(cid:10)(cid:13)(cid:1)(cid:2)(cid:3)
(cid:4)(cid:2)
(cid:4)(cid:3)
(cid:4)(cid:2)(cid:1)(cid:12)(cid:19)(cid:1)(cid:8)(cid:9)(cid:13)(cid:9)(cid:20)(cid:9)(cid:8)
(cid:5)(cid:4)(cid:3)(cid:12)(cid:15)(cid:1)(cid:21)(cid:10)(cid:3)(cid:20)(cid:18)
(cid:8)(cid:6)(cid:20)(cid:6)
(cid:3)(cid:1)
(cid:3)(cid:2)
(cid:5)(cid:4)(cid:3)(cid:12)(cid:15)(cid:1)(cid:5)(cid:4)(cid:6)(cid:7)(cid:13)(cid:9)
(cid:17)(cid:16)(cid:12)(cid:15)(cid:20)(cid:9)(cid:18)(cid:19)(cid:1)(cid:20)(cid:16)(cid:1)(cid:19)(cid:6)(cid:10)(cid:9)(cid:1)
(cid:14)(cid:9)(cid:20)(cid:11)(cid:16)(cid:8)(cid:19)
(cid:15)(cid:12)(cid:8)(cid:22)(cid:1)(cid:24)(cid:22)(cid:23)(cid:8)(cid:28)
(cid:7)(cid:6)(cid:5)(cid:16)(cid:20)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:7)(cid:6)(cid:8)(cid:9)(cid:18)(cid:12)(cid:3)(cid:18)(cid:21)(cid:21)(cid:17)(cid:16)(cid:20)(cid:14)(cid:1)(cid:11)(cid:8)(cid:25)(cid:8)
(cid:22)(cid:21)(cid:16)(cid:20)(cid:25)(cid:12)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:8)(cid:25)(cid:25)(cid:8)(cid:10)(cid:17)(cid:12)(cid:23)(cid:2)(cid:24)(cid:1)(cid:10)(cid:21)(cid:11)(cid:12)
(cid:7)(cid:6)(cid:5)(cid:16)(cid:20)(cid:1)(cid:7)(cid:6)(cid:8)(cid:9)(cid:18)(cid:12)
(cid:22)(cid:21)(cid:16)(cid:20)(cid:25)(cid:12)(cid:23)(cid:24)(cid:1)(cid:25)(cid:21)(cid:1)(cid:24)(cid:8)(cid:13)(cid:12)(cid:1)
(cid:19)(cid:12)(cid:25)(cid:15)(cid:21)(cid:11)(cid:24)
(cid:5)(cid:4)(cid:6)(cid:7)(cid:13)(cid:9)(cid:1)(cid:16)(cid:10)(cid:1)(cid:2)(cid:16)(cid:22)
(cid:1)(cid:17)(cid:20)(cid:18)(cid:1)(cid:20)(cid:16)(cid:1)(cid:13)(cid:6)(cid:9)(cid:8)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:17)(cid:20)(cid:18)(cid:1)(cid:20)(cid:16)(cid:1)(cid:15)(cid:4)(cid:11)(cid:14)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:17)(cid:20)(cid:18)(cid:1)(cid:20)(cid:16)(cid:1)(cid:15)(cid:5)(cid:6)(cid:12)(cid:7)(cid:10)(cid:13)(cid:1)(cid:2)(cid:3)
(b)
(cid:7)(cid:6)(cid:8)(cid:9)(cid:18)(cid:12)(cid:1)(cid:21)(cid:13)(cid:1)(cid:4)(cid:21)(cid:28)
(cid:1)(cid:22)(cid:25)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:13)(cid:6)(cid:9)(cid:8)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:22)(cid:25)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:15)(cid:4)(cid:11)(cid:14)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:22)(cid:25)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:15)(cid:5)(cid:6)(cid:12)(cid:7)(cid:10)(cid:13)(cid:1)(cid:2)(cid:3)
(c)
Figure 3: VTable hijacking prevention when VTPin is in place. Initially, in (a), the two pointers, p1 and p2, point to a Boy instance
(Figure 1, line 17). Once p1 is freed (Figure 1, line 22), in (b), VTPin frees all space occupied by the Boy instance, but preserves
the vfPtr pointer. (If the memory allocator used does not allow re-allocating the object at the same address, then VTPin will fully
preserve the memory used by the object.) Additionally, the system replaces the old vfPtr with the address of a safe virtual object
controlled by VTPin itself. An adversary may further spray memory with forged pointers, as in (c), but the VTable pointer cannot
be hijacked. If a method is invoked through the dangling pointer p2 (Figure 1, line 26), a safe method of the special VTPin virtual
object will be executed, and the call will be contained and logged.
Notice, that VTPin can be extremely conservative at this stage,
since the majority of the preserved pointers will not be referenced
(i.e., we assume that protected programs do not intentionally con-
tain a vast amount of dangling pointers). This additional GC step is
a costly operation. However, we stress that, since it is only used
to reclaim dead VTable pointers (unlike traditional conservative
garbage collectors [14]), it can be carried out infrequently with very
low memory and performance impact on the running program. We
further elaborate on this aspect in Section 5.5, where we evaluate
the time needed to scan the memory of a process and free any re-
maining non-referenced VTable pointers.
3.1 Virtual Objects
VTPin protects software without requiring access to code (source
or binary), or modifying the memory allocator used. To this end, it
instruments all free calls issued by a program, and intervenes only
when a free operation is called on a virtual object. Hence, VTPin
has to infer if a pointer is allocated to a virtual object or not. In the
following, we discuss the basic algorithm for resolving pointers to
virtual objects, and in Section 4 we provide the technical details for
implementing the algorithm in the VTPin prototype.
Given a pointer, ptr, VTPin ﬁrst checks if ptr is valid (i.e., non-
null); if it is, then VTPin extracts the ﬁrst 8 bytes of the memory
block pointed by ptr, and treats them as a VTable pointer (vfPtr).
Next, it examines all the read-only memory regions of the running
process to check if the address vfPtr points to belongs to them. If
the address is not found, then it is certain that ptr is not associated
with a virtual object, since VTables are stored in read-only memory
regions. Examining every read-only memory range is easy and fast,
as all shared objects are linearly mapped and ASLR, or ﬁne-grained
randomization [25, 31, 41, 56], has no impact.
If vfPtr is not found in read-only memory, VTPin outsources
the deallocation operation to the underlying program allocator. Oth-
erwise, ptr is consider potentially associated with a virtual object.
To ultimately infer whether ptr is indeed associated with a vir-
tual object, VTPin uses the RTTI mechanism provided by C++ [4].
Speciﬁcally, it assumes the ptr is pointing to a virtual object, and
traverses memory to discover its class type.
If the class type is
successfully found during this traversal, then ptr is certainly asso-
ciated with a virtual object. Notice, that there is high probability,
during a memory traversal, for VTPin to touch unmapped mem-
ory and cause a fault. Such faults are handled by VTPin without
impacting the running program, as we further discuss in Section 4.
3.2 Multiple Inheritance
C++ supports multiple inheritance, and the ABI [4] suggests how
VTables of virtual objects that inherit from several classes should
be laid out in memory. In particular, two different layouts are pos-
sible. The ﬁrst layout applies to cases where the class of the object
instance inherits from none or a single class. Notice that whether
the base class also inherits from other classes does not affect the