### Inherent Value and Security Considerations

The web server itself, as well as its generic functionalities such as help pages and sign-up forms, can be vulnerable to attacks. These components have been known to fail under pressure. The authentication functionality, in particular, is a prime target for testers due to its critical role in security.

### The Seven Elements of Security

The seven elements of security—integrity, authentication, authorization, confidentiality, non-repudiation, logging, and information disclosure—are interrelated. For example, compromising the integrity of data on a web server, such as by deleting or altering a configuration file, can affect the system's ability to manage authentication and authorization. Similarly, failures in an authorization scheme can jeopardize confidentiality, information disclosure, and potentially logging and non-repudiation.

Among these elements, authentication is foundational. Without proper user identification, there can be no legitimate authorization scheme, no confidentiality, and no effective control over the application's security. Given its critical nature, the authentication interface is the most exposed and thus a primary target for attackers. Therefore, businesses should allocate significant resources to testing and securing their authentication design and implementation.

### Statelessness and Complexity

HTTP is stateless, meaning that web applications suffer from a form of "short-term memory loss," similar to the main character in the movie *Memento*. This characteristic imposes significant complexity on the application, which is a fundamental enemy of security. Each request to the web server arrives without any inherent connection to previous requests, forcing the server or application to devise an artificial scheme to remember users and their activities. This often involves constant re-authentication, as seen in basic and digest authentication methods. The penetration tester can exploit this structural requirement for incessant session management, making session management attacks and session theft a significant focus.

### Management Interface and Administrative Accounts

The third area of focus for penetration testers is the management interface or administrative account. These interfaces provide heightened privileges, making them highly attractive targets. Conquering an admin account yields substantial benefits for an attacker and requires special attention during testing. While developers may wish to incorporate account lockout policies, it is often impractical to lock out administrators, especially if they work remotely. As a result, administrative accounts are frequently susceptible to brute-force attacks. If lockout functionality is present, it can be easily triggered, leading to a Denial of Service (DoS) attack, which may give the attacker time to find other vulnerabilities.

### Timing of Penetration Testing

The question of when to conduct penetration testing seems straightforward, but the process is still evolving. Typically, applications are tested after Quality Assurance (QA) testing, either immediately before or after deployment, or both. This makes sense because the production application is the one at risk. However, the @stake Hoover project (http://www.sbq.com/sbq/rosi/index.html), which introduced the concept of Return on Security Investment (ROSI), highlights the inefficiency and illogical nature of relying solely on this approach.

During the Hoover project, @stake analyzed security vulnerabilities in 45 e-business applications over an 18-month period. They found that weak security design was responsible for 70% of the identified vulnerabilities. While implementation errors are generally easy to fix, design errors often require major overhauls, taking weeks or months to address. Most companies treat security as a "penetrate and patch" activity, typically performed post-deployment, rather than integrating secure software engineering practices throughout the development lifecycle. This approach is financially wasteful, as it allows significant errors to become embedded in the application, requiring extensive redesign and redevelopment.

### Importance of Secure Design

We are not suggesting that final application penetration testing be abandoned; it is both irresponsible and foolish to do so. To achieve the highest ROSI, however, applications must be designed securely from the beginning. This means conducting penetration testing during all phases of the application lifecycle and designing elements that facilitate clean testing. The problem statement should be critically examined in a cost/benefit framework that includes digital security. The requirements specification must include appropriate security requirements to ensure alignment with technical and business needs. 

Most importantly, the application design must be thoroughly assessed for vulnerabilities. Proposed designs should be deconstructed and examined for adherence to security principles, including segmentation, structural security, the principle of least privilege, and input validation. Critical process and privilege boundaries must be carefully examined to ensure the design incorporates sufficient tactics for authentication, authorization, confidentiality, integrity, non-repudiation, and logging, while also being mindful of information leakage and related risks.

### Benefits of Early Security Integration

Appropriate attention to security during the design phase will significantly enhance overall application security, reducing the penetration tester's ability to "fail to fail." Problems identified during testing will be easier and less expensive to fix and are less likely to represent critical vulnerabilities. While developers may initially resist adding steps early in the development lifecycle, this approach will actually abbreviate the development cycle by reducing redevelopment requirements and producing more detailed documentation. Transitioning to this process requires developer training and should incorporate outsourced Application Architecture Assessments focused on knowledge transfer. As post-development penetration testing becomes more commoditized, skilled professionals will increasingly engage earlier in the development lifecycle, and forward-thinking businesses will value their contributions.

### Coda

This duet, with the art critic observing from the mountaintop and the artist standing in the surf, encapsulates the current and future state of penetration testing—a blend of position and momentum. Knowing what we know and what we don't know is equally valuable. The key takeaways are:

- **Nobody likes surprises.**
- **Integrate security into your application from the start.**
- **Assess security during design, development, and prior to testing and deployment.**
- **Security consulting firms can provide focused expertise and create a roadmap for implementing solutions.**
- **Consulting firms are the only way to compare your security posture to others in your field, as they combine trust-based data acquisition with identity-protecting pooling of comparability data.**

By following these principles, organizations can better protect their applications and reduce the risk of security breaches.