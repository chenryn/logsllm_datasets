inherent  value  unless  the  web  server  itself  can  be 
attacked; generic  functionality 
including  help  pages and 
sign-up  forms,  which  have  been  known  to  yield  under 
pressure; and the authentication  functionality,  which  will 
likely  bear  the  brunt  of  the  tester’s focus  owing  to  its 
supreme security responsibilities. 
by 
or 
All 
of 
integrity, 
its  ability 
the  seven  elements  of  security, 
i.e., 
integrity, 
authentication,  authorization,  confidentiality, 
non-repudiation,  logging,  and information  disclosure  are 
inter-related.  Clearly,  violating  the integrity  of  data on  a 
web  server, e.g., by  deleting  or  altering  a configuration 
file,  may  affect 
to  properly  manage 
authentication  or  authorization.  Likewise,  failures  in  an 
authorization  scheme certainly  jeopardize  the  goals  of 
confidentiality, 
information  disclosure  and 
possibly  logging  and non-repudiation.  But of all the seven 
elements,  authentication 
foundation. 
Without  properly  identifying 
the  user, there  can  be  no 
legitimate  authorization  scheme,  there  can  be  no 
confidentiality, 
to 
controlling  the most critical  security-related  functionality 
of  an  application,  the  authentication  interface  is,  by  its 
very  nature, the most exposed interface  of  all  since it  is 
the interface by which  illegitimate  users are identified  and 
rejected.  Clearly  authentication  is  a  worthy  target  for 
attackers  and  it  is  where  businesses ought  to  spend  a 
significant  amount  of 
testing  their  design  and 
implementation. 
logging,  etc.  In  addition 
is  clearly 
integrity, 
As  HTTP  is stateless, web  applications  are constantly 
suffering 
from  rather  severe  short-term  memory  loss, 
much like  the main character in the movie Memento. This 
time 
the 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:30:14 UTC from IEEE Xplore.  Restrictions apply. 
fact  of 
life  enforces  significant  complexity  on  the 
application  and complexity  is the fundamental  enemy of 
security.  As  each and  every  request to  the  web  server 
arrives void of any and all inherent connection to previous 
requests, the web  server and/or  application  are forced to 
devise an artificial  scheme for  remember who  is who  and 
where  they  have  been.  This  essentially  amounts  to 
constantly  authenticating  the  user  which  is,  of  course, 
precisely  what  basic and digest authentication  represent. 
As  authentication  is the  foundation  of  all  other  security 
measures, the penetration tester has ample opportunity  to 
“break”  security  due  to  this  structural  requirement  for 
incessant session management. Guessing or  acquiring  by 
other  means  the  unique 
identifiers  of  another  user 
amounts  to  becoming  that  user  in  the  eyes  of 
the 
application,  and  so  session  management  attacks  and 
session theft  will 
focus  of  the 
penetration process. 
represent  a  significant 
The  third  and  final  area of  automatic  focus  for  the 
penetration  tester  is  the  management  interface  or  the 
administrative  account. Since the  management interface, 
or 
“admin”  account,  explicitly  provides  heightened 
privileges  relative to the other interfaces and accounts, its 
conquest  reaps  greater  pay-offs 
the  attacker  and 
warrants  particular  attention  for  the  test  professional. 
Additionally,  while  the application  developers may  wish 
to  incorporate account lock-out  policies  into their  general 
authentication scheme, it  is difficult  to justify  locking  out 
the  administrator  if,  to  wit,  that  administrator  primarily 
plies his/her trade remotely, as is implied  by the existence 
of  a  separate 
accessible 
administrative  account. Therefore, it is frequently  the case 
that the administrative account can be brute forced. Where 
there  is  lock-out 
functionality  on  the  administrative 
account, it  can easily be locked  out,  which  amounts to  a 
Denial  of  Service  (DOS)  attack  that  may  gain  the 
penetration  tester  or  attacker  some  time  to  pry  open 
another door somewhere else in the application. 
interface  or 
remotely 
for 
45 . 
When 
The  question of  when  to  penetration  test applications 
seems to  be moot,  but  only  because the  process is  still 
maturing.  Generally,  today’s  applications  are  tested  for 
penetration  after  QA  testing,  either  immediately  before 
deployment,  immediately  following  deployment,  or both. 
This makes a great deal of sense, since it is the production 
application  whose attack we are worried  about, so it  isn’t 
surprising that this is the near universal norm. The @stake 
Hoover 
(http:IIwww.sbq.com/sbq/rosi/- 
index.html),  which  pioneered the  concept  of  Return  On 
Security  Investment  (ROSI),  illustrates  precisely  why  an 
over-reliance  on this  approach is  inefficient  and contra- 
logical. 
Project 
rather 
than 
into 
it 
application 
for  70%  of 
business.  Among 
During  the Hoover project, @stake studied the security 
vulnerabilities  of  applications  encountered  during  our 
client 
assessments.  Using  @stake’s 
engagement  data  over  an  eighteen-month  period,  we 
created anonymized security profiles  for  forty-five  (45) e- 
business  applications  and  their  potential  risk 
to  our 
clients’ 
other  conclusions,  we 
determined that  errors due to  weak  security  design were 
responsible 
the  all  vulnerabilities  we 
identified.  While  implementation  errors, including  off-by- 
one  errors  or  improperly  called  routines,  are  generally 
easy  to  repair,  design  errors  frequently  require  major 
overhauls  of  the  application,  and  can  take  weeks  and 
months  to  implement  sincerely  and  effectively.  Most 
companies continue  to  treat  security  as a “penetrate  and 
patch”  activity  typically  performed  after an application  is 
deployed, 
integrating  secure  software 
engineering  practices 
the  entire  development 
lifecycle.  This  approach is financially  wasteful,  however, 
as it  means that  significant  errors can be integrated  into 
the structure  of the application,  such that their  mitigation 
redesign  and  redevelopment.  The 
requires  significant 
direct 
redevelopment  are 
compounded by  the  opportunity  costs of  the  developers’ 
inavailability.  Conceptually,  the  “penetrate  and  patch” 
approach  is  akin  to  first  constructing  a  skyscraper  and 
then testing it for  stability.  Security, like  stability,  must be 
built  in, it cannot be painted on or retrofitted. 
time  spent  on 
losses  in 
is  critical 
Certainly  we are not suggesting that developers forego 
penetration testing of  the final  application.  This would  be 
both  irresponsible  and  foolish.  To  gamer  the  highest 
ROSI,  however, 
to  design  applications 
securely from  the beginning  of  the development process. 
This  means penetration  testing  during  all  phases of  the 
application  lifecycle  and  design  elements that  facilitate 
clean testing.  The  application’s  problem  statement itself 
should be critically  examined in a cost/benefit framework 
that  incorporates  digital  security  as  a  component.  The 
requirements  specification  must  be  assessed for 
the 
inclusion  of  appropriate  security  requirements to  ensure 
that technical  and business needs are well  synchronized. 
Most  importantly  though,  the application  design must be 
thoroughly 
for  vulnerabilities. 
Proposed designs must be deconstructed and examined for 
adherence to  the  essential maxims  of  security,  including 
segmentation,  structural  security,  the  principle  of  least 
privilege  and attention to input validation.  Critical  process 
boundaries  and  privilege  boundaries  must  be  examined 
carefully  to  ensure that the design incorporates sufficient 
tactics 
authentication, 
authorization,  confidentiality, 
integrity,  non-repudiation, 
and logging,  and that proposed solutions are conscious of 
information  leakage and corollary  risks. 
“penetration 
appropriate 
Appropriate  attention  to  security  during  the  design 
phase will  significantly  hamper  the  penetration  tester’s 
ensuring 
tested” 
for 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:30:14 UTC from IEEE Xplore.  Restrictions apply. 
tend 
ability  to  “fail  to  fail”  by  dramatically  improving  overall 
application  security.  Problems  identified  during  testing 
will  traditionally  be easier and less expensive to  fix,  and 
are less likely  to  represent critical  vulnerabilities.  While 
rushed  and  overworked  developers  will  be  naturally 
reluctant  at  first  to  add  steps early  in  the  development 
lifecycle,  such  an  approach  will  actually 
to 
abbreviate the development cycle  as a whole,  initially  by 
reducing  redevelopment  requirements,  but  also  because 
“fat”  design phases produce more detailed documentation 
facilitate 
the 
and  more 
this  process 
implementation  phase.  Transitioning 
requires  developer 
incorporate 
outsourced Application  Architecture  Assessments with  a 
focus  on  knowledge 
transfer.  As  post-development 
penetration  testing  becomes more  of  a  commodity,  the 
artists  will  begin  to  ply 
the 
development  lifecycle,  and  cutting  edge businesses will 
covet their work. 
to 
training  and  should 
trade  earlier 
thoughtful 
designs 
their 
that 
in 
5 
Coda 
This  duet,  the  art  critic  staring  at  the  tide  from  the 
mountaintop  and the artist looking  at the mountain  while 
standing in the surf, circumscribes penetration testing as it 
is  and  will  become  -  one  part  position  and  one  part 
momentum.  As  with  any real  challenge,  knowing  what 
we know  and knowing  what  we  don’t  know  are of  near 
equal value. 
We  suggest that  the  takeaways,  the  thoughts  to  infect 
others with,  are these: 
l 
0  Nobody  likes surprises. 
0  Do  not  wait  until  your  application  goes live  - 
integrate security  into  your  application  from  the 
get-go. 
Assess security  during  design;  before,  during, 
and after  development;  and prior  to  testing  and 
deployment. 
roadmap 
a  Security  consulting  firms  can  deliver  focused 
expertise to quickly  identify  your  security needs, 
and  create  a 
implementing 
solutions. 
a  More  importantly,  security  consulting  firms  are 
the  only  way  you  have  to  know  how  you 
compare  to  others  in  your 
field  as  only  a 
consulting  firm  can  combine  trust-based  data 
acquisition  with 
identity-protecting  pooling  of 
that otherwise unobtainable comparability  data. 
for 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:30:14 UTC from IEEE Xplore.  Restrictions apply.