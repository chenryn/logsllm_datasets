slows down memcached 3.2×, and SCONE degrades Apache
throughput by 20 %. None of these works defend the secrets
against cold-boot attacks as Ginseng does.
One can reduce the overhead of protection by only running
the sensitive part of an application in the isolated execution
environment. Flicker [45], TrustVisor [44], and InkTag [31]
encapsulate sensitive functions and their data and run the
sensitive code in an isolated execution environment provided
by a hypervisor. The hypervisor’s roles is similar to that
of Overshadow and CloudVisor; however, this approach is
only available in x86 systems because the ARM architecture
disallows an application to directly use the hypervisor call as
is required by previous works. Importantly, for SGX-based
isolated execution environments, this approach can also incur
high overhead because communication between app partitions
is expensive due to enclave exits.
2) App Logic in Trusted Execution Environment: Related
to Intel SGX, ARM TrustZone technology also provides
a hardware-isolated environment; this environment is called
the trusted execution environment (TEE) because the rest of
the system is not only inaccessible to the environment but
trusts it. TrustShadow [29] runs an entire app in TrustZone’s
TEE, substantially increasing the latter’s attack surface. Liu
et al. [43], AdAttester [40], TrustTokenF [77], and TLR [60]
partition apps into sensitive and insensitive parts and only run
the sensitive parts in the TEE, which still increases the latter’s
attack surface. Ginseng does not require any app logic in the
TEE and provides a ﬁner protection granularity, sensitive data,
not all data in a sensitive function.
B. Protecting secrets against cold-boot attacks
When an attacker can physically access the hardware, the
memory image can be extracted and analyzed by cold-boot
attacks [30], [56], [57]. Countermeasures use alternative types
of memory. Sentry [15] uses on-chip SRAM (iRAM) for
inaccessibility and boot-time zero-ﬁlling by low-level device
ﬁrmware. Cache is also used as an alternative to iRAM [28],
[75], [76] or a combined way [15]. TRESOR [46], Amne-
sia [65], and ARMORED [27] use CPU registers. Sentry [15]
and all the prior works using registers trust the OS. CaSE [76]
does not trust the OS; it locks a sensitive application in the
cache. Not only is the application limited to the size of the
cache, the OS has to be stopped on all memory-coherent cores
when the application runs. Ginseng distrusts the OS and is
13
deployable to all ARM systems that support ARM TrustZone
and all x86 systems that support the hypervisor mode.
VIII. CONCLUDING REMARKS
In this work, we present Ginseng which protects sensi-
tive data on the untrusted OS. We identify its architectural
requirements and show that both ARM TrustZone and x86 hy-
pervisor mode meet the requirements. To reduce unnecessary
overheads, Ginseng keeps sensitive data in registers only when
they are being processed. When the data have to be saved to
the stack, Ginseng uses the secure stack which the OS cannot
decrypt. We build Ginseng prototype based on ARM TrustZone
and show Ginseng can be applied to practical applications with
reasonable efforts and overhead. For example, the Nginx web
server protects the TLS master key with modiﬁcation to only
0.2 % of the source code.
Although we prototype Ginseng in an ARM-based device,
we envision that adopting a different architecture could make
the implementation simpler and lead to less overhead. With
the hypervisor level of x86, for example, the secure APIs
(IV-A) can be implemented with hypercalls, instead of security
violation. Moreover, there is no need for forwarding the kernel
page table modiﬁcation trapped in the hypervisor to a higher
level, i.e., the Secure world (IV-B). Finally, dynamic exception
trapping (IV-C1) will not be necessary because the hypervisor
can directly intercept exceptions.
ACKNOWLEDGEMENTS
This work was supported in part by NSF Awards #1611295,
#1701374 and #1730574. Dr. Dan Wallach and Dr. Nathan
Dautenhahn provided useful pointers to related work, espe-
cially possible attacks. Sicong Liu pointed us to the decision-
tree classiﬁer used in the evaluation. The authors are grateful
to the anonymous reviewers and the paper shepherd Dr. Adam
Bates for constructive reviews that made the paper better.
REFERENCES
[1] W. A. Arbaugh, D. J. Farber, and J. M. Smith, “A secure and reliable
bootstrap architecture,” in Proc. IEEE Symp. Security and Privacy (SP),
1997.
[2] ARM, “ARM security technology: Building a secure system using
TrustZone technology,” http://infocenter.arm.com/help/topic/com.arm.
doc.prd29-genc-009492c/PRD29-GENC-009492C trustzone security
whitepaper.pdf, 2009.
[3] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe,
J. Lind, D. Muthukumaran, D. O’Keeffe, M. L. Stillwell et al.,
“SCONE: Secure Linux containers with Intel SGX,” in Proc. USENIX
Conf. Operating Systems Design and Implementation (OSDI), 2016.
[4] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh,
J. Ma, and W. Shen, “Hypervision across worlds: Real-time kernel
protection from the ARM TrustZone secure world,” in Proc. ACM
SIGSAC Conference on Computer and Communications Security (CCS),
2014.
[5] A. M. Azab, P. Ning, and X. Zhang, “SICE: a hardware-level strongly
isolated computing environment for x86 multi-core platforms,” in Proc.
ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2011.
[6] A. M. Azab, K. Swidowski, J. M. Bhutkar, W. Shen, R. Wang, and
P. Ning, “SKEE: A lightweight secure kernel-level execution environ-
ment for ARM,” in Proc. Network and Distributed System Security
Symposium (NDSS), 2016.
[7] A. Balasubramanian, M. S. Baranowski, A. Burtsev, A. Panda, Z. Raka-
mari´c, and L. Ryzhyk, “System programming in Rust: Beyond safety,”
in Proc. Wrkshp. Hot Topics in Operating Systems (HotOS). ACM,
2017.
[8] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an
untrusted cloud with Haven,” in Proc. USENIX Conf. Operating Systems
Design and Implementation (OSDI), 2014.
[9] B. Bond, C. Hawblitzel, M. Kapritsos, K. R. M. Leino, J. R. Lorch,
B. Parno, A. Rane, S. Setty, and L. Thompson, “Vale: Verifying high-
performance cryptographic assembly code,” in Proc. USENIX Security
Symp., 2017.
[10] F. Brasser, L. Davi, D. Gens, C. Liebchen, and A.-R. Sadeghi, “CAn’t
touch this: Software-only mitigation against rowhammer attacks target-
ing kernel memory,” in Proc. USENIX Security Symp., 2017.
[11] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and
B. Shastry, “Practical and lightweight domain isolation on Android,”
in Proc. ACM Workshop on Security and Privacy in Smartphones &
Mobile Devices (SPSM), 2011.
[12] Y. Cao and J. Yang, “Towards making systems forget with machine
unlearning,” in Proc. IEEE Symp. Security and Privacy (SP), 2015.
[13] S. Checkoway and H. Shacham, “Iago attacks: Why the system call API
is a bad untrusted RPC interface,” in Proc. ACM Int. Conf. Architectural
Support for Programming Languages & Operating Systems (ASPLOS),
2013.
[14] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam, C. A. Wald-
spurger, D. Boneh, J. Dwoskin, and D. R. Ports, “Overshadow: a
virtualization-based approach to retroﬁtting protection in commodity
operating systems,” in Proc. ACM Int. Conf. Architectural Support for
Programming Languages & Operating Systems (ASPLOS), 2008.
[15] P. Colp, J. Zhang, J. Gleeson, S. Suneja, E. de Lara, H. Raj, S. Saroiu,
and A. Wolman, “Protecting data on smartphones and tablets from
memory attacks,” in Proc. ACM Int. Conf. Architectural Support for
Programming Languages & Operating Systems (ASPLOS), 2015.
[16] CVE-2015-6639, https://nvd.nist.gov/vuln/detail/CVE-2015-6639.
[17] CVE-2015-8999, https://nvd.nist.gov/vuln/detail/CVE-2015-8999.
[18] CVE-2015-9007, https://nvd.nist.gov/vuln/detail/CVE-2015-9007.
[19] CVE-2016-1919, https://nvd.nist.gov/vuln/detail/CVE-2016-1919.
[20] CVE-2016-1920, https://nvd.nist.gov/vuln/detail/CVE-2016-1920.
[21] CVE-2016-2431, https://nvd.nist.gov/vuln/detail/CVE-2016-2431.
[22] CVE-2016-3996, https://nvd.nist.gov/vuln/detail/CVE-2016-3996.
[23] CVE-2016-5349, https://nvd.nist.gov/vuln/detail/CVE-2016-5349.
[24] H. Gao, Y. Chen, K. Lee, D. Palsetia, and A. N. Choudhary, “Towards
online spam ﬁltering in social networks.” in Proc. Network and Dis-
tributed System Security Symposium (NDSS), 2012.
[25] X. Ge, H. Vijayakumar, and T. Jaeger, “SPROBE: Enforcing kernel
code integrity on the TrustZone architecture,” in Proc. IEEE Mobile
Security Technologies (MoST), 2014.
[26] GNOME,
“GNOME network manager,”
https://wiki.gnome.org/
[27]
Projects/NetworkManager, 2017.
J. Gotzfried and T. Muller, “ARMORED: CPU-bound encryption for
Android-driven ARM devices,” in Proc. IEEE Int. Conf. on Availability,
Reliability and Security (ARES), 2013.
[28] L. Guan, J. Lin, B. Luo, and J. Jing, “Copker: Computing with private
keys without RAM.” in Proc. Network and Distributed System Security
Symposium (NDSS), 2014.
[29] L. Guan, P. Liu, X. Xing, X. Ge, S. Zhang, M. Yu, and T. Jaeger,
“TrustShadow: Secure execution of unmodiﬁed applications with ARM
TrustZone,” in Proc. ACM Int. Conf. Mobile Systems, Applications, &
Services (MobiSys), 2017.
J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul,
J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten, “Lest
we remember: cold-boot attacks on encryption keys,” in Proc. USENIX
Security Symp., 2008.
[30]
[31] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel,
“InkTag: Secure applications on an untrusted operating system,” in Proc.
ACM Int. Conf. Architectural Support for Programming Languages &
Operating Systems (ASPLOS), 2013.
14
app displays from memory images,” in Proc. USENIX Security Symp.,
2016.
J. H. Saltzer and M. D. Schroeder, “The protection of information in
computer systems,” in Proc. of the IEEE, 1975.
[58]
[59] V. Samar, “Uniﬁed login with pluggable authentication modules
(PAM),” in Proc. ACM SIGSAC Conference on Computer and Com-
munications Security (CCS), 1996.
[60] N. Santos, H. Raj, S. Saroiu, and A. Wolman, “Using ARM TrustZone
to build a trusted language runtime for mobile applications,” in Proc.
ACM Int. Conf. Architectural Support for Programming Languages &
Operating Systems (ASPLOS), 2014.
[61] S. C. Seow, Designing and engineering time: The psychology of time
perception in software. Addison-Wesley Professional, 2008, ch. 3.
[62] S. Shahar, S. Bergman, and M. Silberstein, “ActivePointers: a case for
software address translation on GPUs,” in Proc. Int. Symp. Computer
Architecture (ISCA), 2016.
[63] D. Shen, “Exploiting TrustZone on Android,” in Black Hat Conference
US, 2015.
[64] S. Shinde, D. Le Tien, S. Tople, and P. Saxena, “Panoply: Low-
TCB Linux applications with SGX enclaves.” in Proc. Network and
Distributed System Security Symposium (NDSS), 2017.
[65] P. Simmons, “Security through Amnesia: a software-based solution
to the cold boot attack on disk encryption,” in Proc. ACM Annual
Computer Security Applications Conference (ACSAC), 2011.
[66] L. Soares and M. Stumm, “FlexSC: Flexible system call scheduling
with exception-less system calls,” in Proc. USENIX Conf. Operating
Systems Design and Implementation (OSDI), 2010.
[67] W. Song, H. Choi, J. Kim, E. Kim, Y. Kim, and J. Kim, “Pikit: A new
kernel-independent processor-interconnect rootkit,” in Proc. USENIX
Security Symp., 2016.
[68] R. Strackx and F. Piessens, “Fides: Selectively hardening software
application components against kernel-level or process-level malware,”
in Proc. ACM SIGSAC Conference on Computer and Communications
Security (CCS), 2012.
[69] F. Tram`er, F. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Steal-
ing machine learning models via prediction APIs.” in Proc. USENIX
Security Symp., 2016.
[70] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham, “Efﬁcient
software-based fault isolation,” in Proc. ACM Symp. Operating Systems
Principles (SOSP), 1994.
[71] H. Xu, F. Xu, and B. Chen, “Internet protocol cameras with no password
protection: An empirical investigation,” in Proc. Int. Conf. Passive and
Active Measurement (PAM), 2018.
[72] K. Ying, A. Ahlawat, B. Alshariﬁ, Y. Jiang, P. Thavai, and W. Du,
“TruZ-Droid: Integrating TrustZone with mobile operating system,”
in Proc. ACM Int. Conf. Mobile Systems, Applications, & Services
(MobiSys), 2018.
[73] F. Zhang, J. Chen, H. Chen, and B. Zang, “CloudVisor: retroﬁtting
protection of virtual machines in multi-tenant cloud with nested virtu-
alization,” in Proc. ACM Symp. Operating Systems Principles (SOSP),
2011.
[74] H. Zhang, D. She, and Z. Qian, “Android root and its providers: A
double-edged sword,” in Proc. ACM SIGSAC Conference on Computer
and Communications Security (CCS), 2015.
[75] N. Zhang, H. Sun, K. Sun, W. Lou, and Y. T. Hou, “CacheKit:
Evading memory introspection using cache incoherence,” in Proc. IEEE
European Symposium on Security and Privacy (EuroS&P), 2016.
[76] N. Zhang, K. Sun, W. Lou, and Y. T. Hou, “CaSE: Cache-assisted
secure execution on ARM processors,” in Proc. IEEE Symp. Security
and Privacy (SP), 2016.
[77] Y. Zhang, S. Zhao, Y. Qin, B. Yang, and D. Feng, “TrustTokenF: A
generic security framework for mobile two-factor authentication using
TrustZone,” in Proc. IEEE Trustcom/BigDataSE/ISPA, 2015.
[32] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A distributed
sandbox for untrusted computation on secret data.” in Proc. USENIX
Conf. Operating Systems Design and Implementation (OSDI), 2016.
IETF, “TOTP: Time-based one-time password algorithm,” https://tools.
ietf.org/html/rfc6238, 2011.
Intel, Intel 64 and IA-32 Architectures Software Developers Manual,
2017, ch. 4.3.
[33]
[34]
[35] B. Japenga, Security for Web-Enabled Devices. Circuit Cellar, 2016.
[36] U. Kanonov and A. Wool, “Secure containers in Android: the Samsung
KNOX case study,” in Proc. ACM Workshop on Security and Privacy
in Smartphones & Mobile Devices (SPSM), 2016.
[37] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp,
S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre attacks:
Exploiting speculative execution,” in Proc. IEEE Symp. Security and
Privacy (SP), 2019.
[38] B. Lampson, M. Abadi, M. Burrows, and E. Wobber, “Authentication
in distributed systems: Theory and practice,” ACM Transactions on
Computer Systems, 1992.
J. Lee and D. S. Wallach, “Removing secrets from Android’s TLS,”
in Proc. Network and Distributed System Security Symposium (NDSS),
2018.
[39]
[40] W. Li, H. Li, H. Chen, and Y. Xia, “AdAttester: Secure online mobile
advertisement attestation using TrustZone,” in Proc. ACM Int. Conf.
Mobile Systems, Applications, & Services (MobiSys), 2015.
[41] W. Li, M. Ma, J. Han, Y. Xia, B. Zang, C.-K. Chu, and T. Li, “Building
trusted path on untrusted device drivers for mobile devices,” in Proc.
Asia-Paciﬁc Workshop on Systems (APSys), 2014.
[42] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn,
S. Mangard, P. Kocher, D. Genkin et al., “Meltdown: Reading kernel
memory from user space,” in Proc. USENIX Security Symp., 2018.
[44]
[43] H. Liu, S. Saroiu, A. Wolman, and H. Raj, “Software abstractions for
trusted sensors,” in Proc. ACM Int. Conf. Mobile Systems, Applications,
& Services (MobiSys), 2012.
J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig,
“TrustVisor: Efﬁcient TCB reduction and attestation,” in Proc. IEEE
Symp. Security and Privacy (SP), 2010.
J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for TCB minimization,” in Proc.
The European Conf. Computer Systems (EuroSys), 2008.
[45]
[46] T. M¨uller, F. C. Freiling, and A. Dewald, “TRESOR runs encryption
securely outside RAM,” in Proc. USENIX Security Symp., 2011.
[47] T. M¨uller and M. Spreitzenbarth, “FROST: Forensic recovery of scram-
bled telephones,” in Int. Conf. on Applied Cryptography and Network
Security (ACNS), 2013.
[48] OpenWrt Project, https://openwrt.org/.
[49] P. Oppermann, “linked list allocator,” https://crates.io/crates/linked
list allocator, 2018.
[50] M. Orenbach, P. Lifshits, M. Minkin, and M. Silberstein, “Eleos:
ExitLess OS services for SGX enclaves.” in Proc. The European Conf.
Computer Systems (EuroSys), 2017.
[51] R. Perdisci, D. Dagon, W. Lee, P. Fogla, and M. Sharif, “Misleading
worm signature generators using deliberate noise injection,” in Proc.
IEEE Symp. Security and Privacy (SP), 2006.
J. R. Quinlan, “Induction of decision trees,” Machine learning, pp. 81–
106, 1986.
[52]
[53] L. Ravindranath, J. Padhye, S. Agarwal, R. Mahajan, I. Obermiller,
and S. Shayandeh, “AppInsight: Mobile app performance monitoring
in the wild,” in Proc. USENIX Conf. Operating Systems Design and
Implementation (OSDI), 2012.
[54] RECG download page, http://download.recg.org.
[55] D. Rosenberg, “QSEE TrustZone kernel integer overﬂow vulnerability,”
in Black Hat Conference US, 2014.
[56] B. Saltaformaggio, R. Bhatia, Z. Gu, X. Zhang, and D. Xu, “GUITAR:
Piecing together Android app GUIs from memory images,” in Proc.
ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2015.
[57] B. Saltaformaggio, R. Bhatia, X. Zhang, D. Xu, and G. G. Richard III,
“Screen after previous screens: Spatial-temporal recreation of Android
15