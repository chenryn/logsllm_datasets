### Slows Down Memcached and Apache

Memcached 3.2Ã— performance is significantly reduced, and SCONE degrades Apache throughput by 20%. None of these solutions defend against cold-boot attacks as effectively as Ginseng.

### Reducing Overhead with Isolated Execution Environments

One approach to reduce the overhead of protection is to run only the sensitive parts of an application in an isolated execution environment. Flicker [45], TrustVisor [44], and InkTag [31] encapsulate sensitive functions and their data, executing the sensitive code in an isolated environment provided by a hypervisor. The hypervisor's role is similar to that of Overshadow and CloudVisor. However, this method is limited to x86 systems because the ARM architecture does not allow applications to directly use the hypervisor calls required by these solutions. For SGX-based isolated execution environments, this approach can also introduce high overhead due to expensive communication between app partitions, which incurs enclave exits.

### Application Logic in Trusted Execution Environments

Intel SGX and ARM TrustZone both provide hardware-isolated environments. TrustZone's trusted execution environment (TEE) is designed such that the rest of the system is inaccessible and trusts the TEE. TrustShadow [29] runs an entire application in the TEE, significantly increasing its attack surface. Liu et al. [43], AdAttester [40], TrustTokenF [77], and TLR [60] partition applications into sensitive and insensitive parts, running only the sensitive parts in the TEE, which still increases the TEE's attack surface. In contrast, Ginseng does not require any application logic in the TEE and provides finer-grained protection, securing only sensitive data rather than all data within a sensitive function.

### Protecting Secrets Against Cold-Boot Attacks

When an attacker has physical access to the hardware, they can extract and analyze memory images through cold-boot attacks [30], [56], [57]. Countermeasures often involve using alternative types of memory. Sentry [15] uses on-chip SRAM (iRAM) for inaccessibility and boot-time zero-filling by low-level device firmware. Cache is also used as an alternative to iRAM [28], [75], [76] or in combination [15]. TRESOR [46], Amnesia [65], and ARMORED [27] utilize CPU registers. While Sentry [15] and prior works using registers trust the OS, CaSE [76] does not. CaSE locks a sensitive application in the cache, limiting the application to the cache size and requiring the OS to be stopped on all memory-coherent cores during execution. Ginseng, however, distrusts the OS and is deployable on all ARM systems supporting ARM TrustZone and all x86 systems supporting hypervisor mode.

### Concluding Remarks

In this work, we present Ginseng, a solution for protecting sensitive data on untrusted operating systems. We identify its architectural requirements and show that both ARM TrustZone and x86 hypervisor mode meet these requirements. To minimize unnecessary overheads, Ginseng keeps sensitive data in registers only when they are being processed. When data must be saved to the stack, Ginseng uses a secure stack that the OS cannot decrypt. We have built a prototype of Ginseng based on ARM TrustZone and demonstrated that it can be applied to practical applications with reasonable effort and overhead. For example, the Nginx web server can protect the TLS master key with modifications to only 0.2% of the source code.

Although our prototype is based on an ARM-based device, we envision that adopting a different architecture could simplify implementation and reduce overhead. With x86 hypervisor level, for instance, secure APIs (IV-A) can be implemented with hypercalls instead of security violations. Additionally, there is no need to forward kernel page table modifications trapped in the hypervisor to a higher level, such as the Secure world (IV-B). Finally, dynamic exception trapping (IV-C1) will not be necessary because the hypervisor can directly intercept exceptions.

### Acknowledgements

This work was supported in part by NSF Awards #1611295, #1701374, and #1730574. Dr. Dan Wallach and Dr. Nathan Dautenhahn provided valuable pointers to related work, especially possible attacks. Sicong Liu pointed us to the decision-tree classifier used in the evaluation. The authors are grateful to the anonymous reviewers and the paper shepherd Dr. Adam Bates for their constructive reviews, which greatly improved the paper.

### References

[References listed here as in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.