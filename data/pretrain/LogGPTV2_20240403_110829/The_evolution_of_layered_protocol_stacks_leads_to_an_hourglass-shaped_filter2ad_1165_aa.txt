title:The evolution of layered protocol stacks leads to an hourglass-shaped
architecture
author:Saamer Akhshabi and
Constantine Dovrolis
The Evolution of Layered Protocol Stacks
Leads to an Hourglass-Shaped Architecture∗
Saamer Akhshabi
College of Computing
Georgia Institute of Technology
PI:EMAIL
Constantine Dovrolis
College of Computing
Georgia Institute of Technology
PI:EMAIL
ABSTRACT
The Internet protocol stack has a layered architecture that resem-
bles an hourglass. The lower and higher layers tend to see frequent
innovations, while the protocols at the waist of the hourglass appear
to be “ossiﬁed”. We propose EvoArch, an abstract model for study-
ing protocol stacks and their evolution. EvoArch is based on a few
principles about layered network architectures and their evolution
in a competitive environment where protocols acquire value based
on their higher layer applications and compete with other protocols
at the same layer. EvoArch produces an hourglass structure that is
similar to the Internet architecture from general initial conditions
and in a robust manner.
It also suggests a plausible explanation
why some protocols, such as TCP or IP, managed to survive much
longer than most other protocols at the same layers. Furthermore, it
suggests ways to design more competitive new protocols and more
evolvable future Internet architectures.
Categories and Subject Descriptors: C.2.5 [Computer Commu-
nication Networks]: Internet
General Terms: Theory
Keywords: Internet Architecture, Future Internet, Layering, Net-
work Science, Evolutionary Kernels, Evolution.
1.
INTRODUCTION
Why does the Internet protocol stack resemble an hourglass? Is
it a coincidence, intentional design, or the result of an evolutionary
process in which new protocols compete with existing protocols
that offer similar functionality and services? The protocol stack
was not always shaped in this way. For instance, until the early
nineties there were several other network-layer protocols compet-
ing with IPv4, including Novell’s IPX, the X.25 network protocol
used in Frame Relay, the ATM network layer signaling protocol,
and several others. It was through a long process that IPv4 eventu-
ally prevailed as practically the only surviving protocol at layer-3,
creating a very narrow waist at the Internet architecture hourglass
(see Figure 1).
∗This research was supported by the NSF award 0831848 (“To-
wards a Theory of Network Evolution”).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
Copyright 2011 ACM 978-1-4503-0797-0/11/08 ...$10.00.
Thunderbird
Silverlight
FireFox
Skype
Kazaa
MPlayer
SMTP
POP
HTTP
Skype/Kazaa
P2P Protocol
RTP
TCP
UDP
IPv4
PPP
Ethernet
802.11
DOCSIS
Coaxial Cable
Twisted Pair
Optical
Fiber
CDMA
TDMA
Figure 1: An (incomplete) illustration of the hourglass Internet
architecture.
Another important question is: why do we tend to see more fre-
quent innovations at the lower or higher layers of the protocol
hourglass, while the protocols at the waist of the hourglass appear
to be “ossiﬁed” and difﬁcult to replace? During the last 30–40
years we have seen many new physical and data link layer protocols
created and surviving. And of course the same can be said about
applications and application-layer protocols. On the other hand,
the protocols at the waist of the hourglass (mostly IPv4, TCP and
UDP) have been extremely stable and they have managed to out-
compete any protocols that offer the same or similar functionality.
How can a new protocol manage to survive the intense competition
with those core protocols at the waist of the Internet hourglass? In
fact, the ossiﬁcation of the hourglass waist has been a major moti-
vation for “clean-slate” efforts to design a novel future Internet ar-
chitecture [16]. There are two important questions in that context.
First, how can we make it more likely that a new (and potentially
better) protocol replaces an existing and widely used incumbent
protocol? And second, how can we make sure that a new archi-
tecture we design today will not be ossiﬁed 10–20 years later? In
other words, what makes a protocol stack or network architecture
evolvable? The previous questions have generated an interesting
debate [9, 10, 19].
In this paper, we attempt a ﬁrst effort to study protocol stacks
(and layered architectures, more generally) as well as their evolu-
tion in a rigorous and quantitative manner.
Instead of only con-
sidering a speciﬁc protocol stack, we propose an abstract model
in which protocols are represented by nodes, services are repre-
sented by directed links, and so a protocol stack becomes a layered
directed acyclic graph (or network). Further, the topology of this
graph changes with time as new nodes are created at different lay-
206ers, and existing nodes are removed as a result of competition with
other nodes at the same layer.
The proposed evolutionary model, referred to as EvoArch, is
based on few principles about layered network architectures in which
an “item” (or service) at layer-X is constructed (or composed) us-
ing items at layer-(X-1). These principles capture the following:
(a) the source of evolutionary value for an item,
(b) the generality of items as we move to higher layers,
(c) the condition under which two items compete,
(d) the condition under which one item causes the death or removal
of a competing item.
Perhaps surprisingly, these few principles are sufﬁcient to produce
hourglass-shaped layered networks in relatively short evolutionary
periods.
As with any other model, EvoArch is only an abstraction of re-
ality focusing on speciﬁc observed phenomena, in this case the
hourglass structure of the Internet protocol stack, and attempting
to identify a parsimonious set of principles or mechanisms that are
sufﬁcient to reproduce the observed phenomena. As such, EvoArch
is an explanatory model (as opposed to black-box models that aim
to only describe statistically some observations). EvoArch deliber-
ately ignores many aspects of protocol architectures, such as the
functionality of each layer, technological constraints, debates in
standardization committees, and others.1 The fact that these practi-
cal aspects are not considered by EvoArch does not mean that they
are insigniﬁcant; it means, however, that if the evolution of network
architectures follows the principles that EvoArch is based on, then
those aspects are neither necessary nor sufﬁcient for the emergence
of the hourglass structure.
EvoArch is certainly not going to be the only model, or “the cor-
rect model”, for the emergence of hourglass-shaped network archi-
tectures. It is likely that there are other models that can produce the
same hourglass structure, based on different principles and param-
eters. Additionally, EvoArch does not aim to capture every aspect
of the Internet architecture; it only focuses on the emergence of
the hourglass structure, and so it may be the wrong model to use
for other purposes (e.g., to study the economics of new protocol
deployment). G.Box wrote that “all models are wrong but some
models are useful” [3]. We believe that EvoArch is a useful model
for (at least) the following ten reasons:
1- It gives us a new way to think about protocol stacks and net-
work architectures and to study their evolutionary properties based
on few fundamental principles (§2).
2- EvoArch provides a plausible explanation (but certainly not the
only explanation) for the emergence of hourglass-like architectures
in a bottom-up manner (§3).
3- EvoArch shows how the location and width of the hourglass
waist can follow from certain key parameters of the underlying evo-
lutionary process (§5).
4- EvoArch can be parameterized to produce a structure that is sim-
ilar to the TCP/IP protocol stack, and it suggests an intriguing ex-
planation for the survival of these protocols in the early days of the
Internet (§5.4).
5- EvoArch suggests how to make a new protocol more likely to
survive in a competitive environment, when there is a strong in-
cumbent (§5.5).
6- EvoArch provides recommendations to designers of future Inter-
net architectures that aim to make the latter more evolvable (§5.5).
7- EvoArch predicts that few protocols at the waist (or close to it)
become ossiﬁed, surviving much longer than most other protocols
1The reader can see some of the criticism raised by anonymous
reviewers in Section 9.
at the same layer, and it shows how such ossiﬁed protocols can be
eventually replaced (§6).
8- When we extend EvoArch to capture the effect of different pro-
tocol qualities, we ﬁnd that the lower part of the hourglass is sig-
niﬁcantly smaller than the upper part (§7.1).
9- The most stable protocols at the waist of the architecture are of-
ten not those with the highest quality (§7.2).
10- Finally, EvoArch offers a new way to think about the compe-
tition between IPv4 and IPv6 and to understand why the latter has
not managed to replace the former (§7.3).
The rest of the paper is structured as follows. In Section 2, we
describe EvoArch and explain how the model relates to protocol
stacks and evolving network architectures. In Section 3, we present
basic results to illustrate the behavior of the model and introduce
some key metrics. Section 4 is a robustness study showing that the
model produces hourglass structures for a wide range of parameter
values. The effect of those parameters is studied in Section 5 fo-
cusing on the location and width of the waist. Section 6 examines
the evolutionary kernels of the architecture, i.e., those few nodes
at the waist that survive much longer than other nodes. Section 7
generalizes EvoArch in an important and realistic manner: what if
different protocols at the same layer have different qualities (such
as performance or extent of deployment)? We review related work
in Section 8, present some criticism in Section 9, and conclude in
Section 10.
2. MODEL DESCRIPTION
In EvoArch, a protocol stack is modeled as a directed and acyclic
network with L layers (see Figure 2). Protocols are represented
by nodes, and protocol dependencies are represented by directed
edges. If a protocol u at layer l uses the service provided by a pro-
tocol w at layer l−1, the network includes an “upwards” edge from
w to u.2 The layer of a node u is denoted by l(u). The incoming
edges to a node u originate at the substrates of u, represented by
the set of nodes S(u). Every node has at least one substrate, ex-
cept the nodes at the bottom layer. The outgoing edges of a node
u terminate at the products of u, represented by the set of nodes
P (u). Every node has at least one product, except the nodes at the
top layer.
The substrates of a node are determined probabilistically when
that node is created.3 Speciﬁcally, each layer l is associated with a
probability s(l): a node u at layer l + 1 selects independently each
node of layer l as substrate with probability s(l). We refer to s(l)
as the generality of layer l. s(l) decreases as we move to higher
layers, i.e., s(i) > s(j) for i < j. The decreasing generality prob-
abilities capture that protocols at lower layers are more general in
terms of their function or provided service than protocols at higher
layers. For instance, in the case of the Internet protocol stack, a
protocol at layer-1 offers a very general bit transfer service between
two directly connected points; this is a service or function that al-
most any higher layer protocol would need. On the other extreme,
an application-layer protocol, such as SMTP, offers a very special-
ized service and it is only used by applications that are related to
2In practice, the principle of strict layering is occasionally violated
through tunnels or other forms of virtual networks. For the most
part, however, layering is the norm in protocol architectures rather
than the exception. Considering architectures without strict layer-
ing is outside the scope of this paper and an interesting subject for
future research.
3Of course in practice substrates are never chosen randomly. The
use of randomness in the model implies that a realistic mechanism
of substrate selection is not necessary for the emergence of the
hourglass structure.
207Generality
s(4)=0
s(3)=0.3
1
1
1
2
1
2
1
1
s(2)=0.6
4 q
5
u
1
w
s(1)=0.9
9
10
10
10
Figure 2: A toy network with four layers. The value of each
node is shown inside the circle.
email exchanges. Note that if node u does not select any substrate
from layer l we connect it to one randomly chosen substrate from
that layer.
Each node u has an evolutionary value, or simply value v(u) that
is computed recursively based on the products of u,
v(u) =(cid:26) Pp∈P (u) v(p)
1
l(u) < L
l(u) = L
(1)
The value of the top-layer nodes is assumed to be ﬁxed; in the sim-
plest version of EvoArch it is equal to one. So, the model captures
that the value of a protocol u is driven by the values of the protocols
that depend on u. For instance, TCP has a high evolutionary value
because it is used by many higher layer protocols and applications,
some of them being highly valuable themselves. A brand new pro-
tocol on the other hand, may be great in terms of performance or
new features, but its value will be low if it is not used by important
or popular higher layer protocols.
The value of a node largely determines whether it will survive the
competition with other nodes at the same layer that offer similar
services. Consider a node u at layer l. Let C(u) be the set of
competitors of u: this is the set of nodes at layer l that share at least
a fraction c of node u’s products, i.e.,
w ∈ C(u) if l(w) = l(u) and
|P (u) ∩ P (w)|
|P (u)|
≥ c
(2)
The fraction c is referred to as the competition threshold. In other
words, a node w competes with a node u if w shares a signiﬁcant
fraction (at least c) of u’s products, meaning that the former offers
similar services or functions with the latter. Note that the compe-
tition relation is not symmetric: w may provide a generic service,
having many products, and thus competing with several protocols
at the same layer; the latter may not be competitors of w if they
provide more specialized functions and have only few products.
Given the set of competitors of a node u, we can examine whether
u would survive the competition or die. The basic idea is that u dies
if its value is signiﬁcantly less than the value of its strongest (i.e.,
maximum value) competitor. Speciﬁcally, let vc(u) be the maxi-
mum value among the competitors of u
vc(u) = max
w∈C(u)
v(w)
(3)
If u does not have competitors, vc(u) and the death probability for
u are set to zero. Otherwise, we introduce the death probability
ratio r = v(u)
vc(u) . The death probability pd(r) is then computed as
follows:
pd(r) =( e
0
−z r
1−r
0 < r < 1
r ≥ 1
(4)
y
t
i
l
i
b
a
b
o
r
P
h
a
e
D
t
z = 0.5
z = 1
z = 2
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2