CVE-2020-14825，CVE-2020-14841 使用 
oracle.eclipselink.coherence.integrated.internal.cache.LockVersionExtractor.LockVer
sionExtractor  进行绕过。
ExternalizableHelper
在分析 ExternalizableHelper  利用链架构的时候，我们依然可以把链分为四部分，一个是链头，一个
是危险的中间的节点（漏洞点），另一个是调用危险中间节点的地方（触发点），最后一个则是利用这
个节点去造成危害的链尾。
在 ExternalizableHelper  利用链架构中，这个危险的中间节点就是  
ExternalizableLite.readExternal   方法。
weblogic 对于反序列化类的过滤都是在加载类时进行的，因此在 
ExternalizableHelper.readExternalizableLite  中加载的 class 是不受黑名单限制的。
具体原因是：weblogic 黑名单是基于 jep 290 ，jep 290 是在 readObject  的时候，在得到类名后去检
查要反序列化的类是否是黑名单中的类。而这里直接使用的 loadClass  去加载类，所以这里不受 
weblogic 黑名单限制。（也可以这么理解： jep 290 是针对在反序列化的时候，通过对要加载类进行黑
名单检查。而这里直接通过 loadClass  加载，并没有通过反序列化，和反序列化是两码事，当然在后
续 readExternal  的时候还是受 weblogic 黑名单限制，因为走的是反序列化那一套）
weblogic 黑名单机制可以参考：https://cert.360.cn/report/detail?id=c8eed4b36fe8b19c585a1817b5
f10b9e，https://cert.360.cn/report/detail?id=0de94a3cd4c71debe397e2c1a036436f，https://ww
w.freebuf.com/vuls/270372.html
漏洞点
PartialResult
com.tangosol.util.aggregator.TopNAggregator.PartialResult  的 readExternal  会触发任意 
compartor.compare  方法。
大致原理：
具体分析见：https://mp.weixin.qq.com/s/E-4wjbKD-iSi0CEMegVmZQ
然后调用 comparator.compare  就可以接到  ExtractorComparator.compare   那里去了，从而实现 
rce 。
涉及 CVE
CVE-2020-14756 （1月）
ExternalizableHelper  的利用第一次出现是在 CVE-2020-14756 中。利用的正是 
ExternalizableHelper  的反序列化通过 loadClass  加载类，所以不受 weblogic 之前设置的黑名单
的限制。具体利用可以参考：https://mp.weixin.qq.com/s/E-4wjbKD-iSi0CEMegVmZQ
CVE-2020-14756 的修复方法则是对 readExternalizable  方法传入的 Datainput  检查，如果是 
ObjectInputStream  就调用 checkObjectInputFilter() 进行检查， checkObjectInputFilter  具体是
通过 jep290 来检查的。
在 149 行会把comparator 作为参数传入 TreeMap 的构造函数中。
然后 15 行，会调用 this.add ,this.add 会调用 this.m_map.put 方法，也就是说调用了 
TreeMap 的 put 方法，这就导致了 comparator.compare()的调用。
CVE-2021-2135 （4月）
上面补丁的修复方案 只是检查了 DataInput  为 ObjectInputStream  的情况, 却没有过滤其他 
DataInput  类型 。
那我们只需要找其他调用 readExternalizableit   函数的地方,并且传入的参数不是 
ObjectInputStream  就可以了。【 ObjectInputStream  一般是最常见的,通常来说是 readObject  
=> readObjectInternal  => readExternalizableite   这种链,也就是上游是常见的 readObject , 所
以补丁就可能只注意到ObjectInputStream 的情况。】
所以CVE-2021-2135 绕过的方法就是设置传入 readExternalizableite  函数的参数类型为 
BufferInput  来进行绕过。
ExternalizableHelper  中调用 readObjectInternal  的地方有两处,一处是 readObjectInternal  , 
另一处则是 deserializeInternal  。而 deserializeInternal  会先把 DataInput  转化为 
BufferInut  ：
所以只要找调用 ExternalizableHelper .deserializeInternal   的地方。
而 ExternalizableHelper.fromBinary  （和 ExternalizableHelper.readObject  平级的关系 ）
里就调用了 deserializeInternal  , 所以只需要找到一个地方用 来 
ExternalizableHelper.fromBinary  来反序列化就可以接上后面的（CVE-2020-14756）利用链了。
然后就是找 调用了 ExternalizableHelper.fromBinary  的方法的地方。 SimpleBinaryEntry  中的 
getKey  和 getValue 方法中存在 ExternalizableHelper.fromBinary  的调用，所以就只要找到调
用 getKey  和 getValue  的地方就可以了。
然后在 com.sun.org.apache.xpath.internal.objects.XString 重写的 equals 方法里调用了 
tostring  ，在 tostring  中调用了 getKey  方法。
ExternalizableHelper#readMap  中会调用 map.put  ， map.put  会调用 equals  方法。
com.tangosol.util.processor.ConditionalPutAll  的 readExteranl  中调用了 
ExternalizableHelper#readMap  方法。
然后再套上 AttributeHolder  链头就可以了。
具体可以参考：https://mp.weixin.qq.com/s/eyZfAPivCkMbNCfukngpzg
4月漏洞修复则是将  simpleBianry  添加到了黑名单。
filterExtractor
 filterExtractor.reaExternal  方法中的 readAttributeAccessor()  方法会直接 new  一个 
MethodAttributeAccessor  对象。
随后在 filterExtractor.extract  函数中会因为调用 
this.attributeAccessor.getAttributeValueFromObject  进而导致任意无参方法的调用。
涉及 CVE
CVE-2021-2394 （4月）
在4月的补丁中，对 ois 的 DataInput  流进行了过滤，所以直接通过 newInstance  实例化恶意类的方
式已经被阻止（CVE-2021-2135 通过 bufferinputStream  进行了绕过），所以需要重新寻找其他不在
黑名单中的 readExternal  方法。
CVE-2021-2394 中就是利用 filterExtractor.readExternal  来进行突破。
具体可以参考：https://blog.riskivy.com/weblogic-cve-2021-2394-rce%E6%BC%8F%E6%B4%9E%E
5%88%86%E6%9E%90/   和   https://www.cnblogs.com/potatsoSec/p/15062094.html 
触发点
 ExternalizableHelper.readExternal  的触发点有 ExternalizableHelper.readObject  和 
ExternalizableHelper.fromBinary  这两个。其中 CVE-2021-2135 则就是因为在 CVE-2020-14756 
的修复方法中，只注意到了 ExternalizableHelper.readObject  ，只在
ExternalizableHelper.readObject  里面做了限制，但是没有考虑到 
ExternalizableHelper.fromBinary   从而导致了绕过。
ExternalizableHelper.readObject 可以利用 
com.tangosol.coherence.servlet.AttributeHolder 来触发，
com.tangosol.coherence.servlet.AttributeHolder  实现了 java.io.Externalizabe  接口，并
且他的 readExternal  方法 调用了 ExternalizableHelper.readObject(in)  。
ExternalizableHelper.fromBinary  的触发则较为复杂一些，具体可以参考：https://mp.weixin.qq.
com/s/eyZfAPivCkMbNCfukngpzg
后记
weblogic Coherence 反序列化漏洞很多都是相关联的，对于某个漏洞，很可能就是用到了之前一些漏
洞的链子。其实不仅仅 weblogic ，java 其他反序列化链也是如此，很多情况都是一个链会用到其他链
的一部分。所以在学习中，把一个组件或者一个库的漏洞总结起来一起分析还是比较重要的，最后希望
这篇文章能帮助到其他一起学反序列化的朋友们。如果有错误的地方欢迎师傅们指正。
参考
https://nosec.org/home/detail/4524.html 
https://cloud.tencent.com/developer/article/1740557 
https://blog.riskivy.com/weblogic-cve-2021-2394-rce%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9
E%90/
https://www.cnblogs.com/potatsoSec/p/15062094.html 
https://cert.360.cn/report/detail?id=c8eed4b36fe8b19c585a1817b5f10b9e
https://cert.360.cn/report/detail?id=0de94a3cd4c71debe397e2c1a036436f
https://www.freebuf.com/vuls/270372.html
https://mp.weixin.qq.com/s/E-4wjbKD-iSi0CEMegVmZQ
https://mp.weixin.qq.com/s/eyZfAPivCkMbNCfukngpzg