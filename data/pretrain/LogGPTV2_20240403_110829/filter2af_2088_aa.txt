### 优化后的文本

**作者**: [Hcamael@知道创宇404实验室](http://0x48.pw)  
**发布时间**: 2017-07-25

尽管我一年前就学习了与fastbin相关的堆知识，但当时没有做详细的笔记。经过一段时间的疏离，现在需要重新拾起这些知识，因此本文将记录我对fastbin的理解。

#### 基础知识研究

当使用`malloc`函数首次向系统申请小于128KB的内存时，会通过`sys_brk`系统调用来分配一块大小为132KB的内存区域，这块内存被称为堆。为了更好地理解这一过程，下面提供了一个简单的测试代码，并对其进行了分析（基于64位系统）：

```c
// test.c
#include <stdio.h>
#include <stdlib.h>

int main(void) {
    char *q, *p;
    int x;
    char input[3];
    while (1) {
        read(0, input, 3);
        x = atoi(input);
        q = (char *)malloc(x);
        read(0, input, 3);
        x = atoi(input);
        p = (char *)malloc(x);
        free(q);
        free(p);
    }
    return 0;
}
```

使用GDB配合`peda`和`libheap`插件（均可在GitHub上找到）进行调试。第一次调用`malloc(0x10)`后，查看内存信息如下：

```gdb
gdb-peda$ vmmap
...
0x00602000         0x00623000         rw-p  [heap]
...
```

从这里可以看出堆的总大小为132KB。

接下来介绍一些基本概念：fast chunk表示正在使用的、长度介于32到160字节之间的堆块（对于32位系统则是16到80字节），而fastbin则指那些已释放且长度在32至180字节范围内的堆块。

根据源码中的定义：
```c
#define MAX_FAST_SIZE     (80 * SIZE_SZ / 4)
```
其中`SIZE_SZ`取决于操作系统架构，在32位系统中为4，在64位系统中为8。因此，实际的最大fastbin请求尺寸分别为64字节（32位）和160字节（64位）。

接着定义了一个长度为10的数组`fastbinsY`来存储fastbin：
```c
mfastbinptr fastbinsY[NFASTBINS];
```
该数组按chunk大小递增顺序存放地址，例如`fastbinsY[0]`指向最新释放的长度为32字节的fastbin头部地址。需要注意的是，由于默认设置下最大fastbin尺寸限制为128字节（或64字节对于32位系统），导致索引大于等于7的位置实际上不会被使用。

此外，还有一个称为top chunk的特殊堆块，它总是位于整个堆区的顶部。当一个fast chunk被分配或释放时，其操作逻辑如下：首先尝试从对应大小的fastbin列表中取出一个可用块；若不存在，则检查是否可从top chunk分割出所需空间。具体实现细节涉及对top chunk大小及位置的调整。

最后提一下关于`M_MXFAST`环境变量的作用，它可以用来调整允许进入fastbin的最大分配请求尺寸，默认值为64字节（针对32位系统）。用户可以通过修改此参数来改变程序的行为特性，如减少内存碎片产生等。

#### 结构解析

了解了基本原理之后，我们来看看具体的结构布局。借助`libheap`插件可以方便地查看当前堆的状态信息，包括各个bin以及top chunk的位置等。

通过进一步探索发现，每个arena（即独立管理的堆区域）都包含一系列关键字段，如`fastbinsY[]`数组、指向当前top chunk的指针等。这些信息均存储在一个名为`struct malloc_state`的数据结构中，其详细定义可以在glibc源码中找到。

而对于fast chunk本身而言，最重要的属性就是它的大小（`mchunk_size`），因为这决定了它会被放置于哪个特定的fastbin链表中。此外，还有其他几个标志位用于标记该chunk的状态，比如是否已被释放等。

#### 在Pwn题中的应用示例

考虑到fastbin机制的特点，在编写可能存在安全漏洞的应用程序时需格外小心。以下是一个简单的例子，展示了如何利用不当处理fastbin可能导致的安全问题：

```c
// mistake.c
#include <stdio.h>
#include <stdlib.h>

typedef struct chunk {
    char buffer[0x10];
    int len;
} chunk;

chunk* list[0x30];
int chunk_number;

void menu() {
    printf("1. create\n");
    printf("2. read\n");
    // ... 更多功能选项 ...
}
```

在这个例子中，如果开发者没有正确管理fastbin中的对象生命周期，攻击者可能通过精心构造输入数据触发UAF（Use After Free）漏洞，进而执行任意代码或泄露敏感信息。