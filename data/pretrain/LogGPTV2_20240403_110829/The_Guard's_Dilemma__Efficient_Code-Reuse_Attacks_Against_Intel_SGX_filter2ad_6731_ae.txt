### 8.2 SGX-Shield

Our attack against SGX-Shield exploits the lack of randomization in the tRTS (trusted Runtime System). We argue that randomizing the SDK is not a trivial task for several reasons. First, fine-grained randomization of the tRTS likely requires manual intervention. Parts of the tRTS code are written in assembly, which would require manual splitting of the randomization units. The SDK should be integrated into the guest enclave and randomized together with the other guest's code. The loader, being a proper SGX enclave, would have its own copy of the SDK. The tRTS in the SDK provides the entry point code from which the enclave starts executing when entered through `EENTER`.

Initially, the entry point would be from the loader’s tRTS. After the guest is loaded, the entry point must be switched to the guest’s tRTS. The entry point address is specified in the TCS (Thread Control Structure), which cannot be modified after the enclave has been initialized. Therefore, SGX-Shield would need to patch its own entry point to act as a pass-through for the guest’s entry point before wiping out the loader. Additionally, the guest’s SDK state would need to be properly initialized. The cost of these extensions would be a slightly longer startup time, as they are just additions to the loading phase. We expect the runtime overhead of the extra entry point indirection to be negligible.

Our attack also exploits backward-edge CFI (Control-Flow Integrity) issues in SGX-Shield to hijack the control flow. The arms race between CFI defenses and attacks is ongoing [9, 10, 11]. Hence, we believe that even with backward-edge CFI, a skilled attacker could still launch our exploit, although the reusable code base has been reduced.

Additionally, we argue that the current Software Fault Isolation (SFI) scheme deployed in SGX-Shield can be undermined by our attack. SGX-Shield enforces an execute-only policy on code by instrumenting memory accesses. To do this, it maintains an NRW (No Read/Write) boundary between execute-only code and read-write data. Every memory access is instrumented to ensure that code above the NRW boundary cannot be accessed. The boundary is stored in a fixed register (r15), which is initialized before launching the guest enclave. Since our attack can control this register, the NRW boundary can be shifted, thus disabling SFI.

### 8.3 Countermeasures

We propose two complementary mitigations to stop our attack. First, we suggest hardening measures for the SDK. Second, we discuss considerations for designing hardening schemes.

#### Hardening the SDK

A common strategy to make crafting fake structures harder is to integrate a secret value into the structures. The secret is then checked at runtime before performing any operation on the structure. Since the attacker does not know the secret, they cannot craft valid structures. However, this approach can be defeated if the attacker exploits an information leakage vulnerability to read the secret from a valid structure. Moreover, in our attack scenario, the developer must ensure that the check cannot be skipped by jumping over it. This method is therefore weak and error-prone.

A better method is to mangle the data within the structure. The contents are stored combined with the secret in a reversible way, e.g., via XOR. The attacker would need to know the secret to craft data that, when the mangling is reversed, produces a valid structure. Leaking the secret is also more difficult. For example, when using XOR, the attacker not only has to leak the mangled data but also know the unmangled data to recover the secret. This method is much stronger than just embedding a secret, and its overhead would be negligible in our case, as the structures we target are not accessed frequently.

#### Design Considerations for Hardening Schemes

The second mitigation avenue is to take the SDK codebase into serious consideration when designing hardening schemes. Specifically, we focus on the problems we raised with SGX-Shield. The first step would be to provide fine-grained randomization for the SDK and solve the backward-edge CFI issue (cf. Section 7.2). Additionally, the NRW boundary must be stored in a less accessible location. We propose using thread-local storage, which is accessed via a segment selector that cannot be altered by our attack. However, the performance implications of this choice must be evaluated, as it would cause an extra memory access for each instrumented access.

### 9 Conclusion and Summary

Intel Software Guard Extensions (SGX) is a promising processor technology providing hardware-based support to strongly isolate security-critical code inside a trusted execution environment called an enclave. Previous research has investigated side-channel attacks against SGX or proposed sophisticated SGX-enabled security services. However, to our surprise, memory corruption attacks such as return-oriented programming (ROP) are not yet well understood in the SGX threat model.

In fact, recently presented ROP attacks against SGX rely on a strong adversarial setting: possessing kernel privileges, frequently crashing enclaves, and assuming a constant memory layout. In this paper, we systematically explore the SGX attack surface for memory corruption attacks. In particular, we present the first user-space memory corruption attack against SGX. Our attack undermines existing randomization schemes such as SGX-Shield without requiring any enclave crashes. To do so, we propose two new exploitation primitives that exploit subtle intrinsics of SGX exception handling and the interaction of enclave code with its untrusted host application. Furthermore, given a memory corruption vulnerability, our attacks apply to any enclave developed with the Linux or Windows Intel SDK for SGX. As we argue, building randomization-based defenses for SGX enclaves is challenging as it requires careful support of SDK library code and additional protection of SGX context data.

### References

[1] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding applications from an untrusted cloud with Haven. In Proceedings of the 11th USENIX conference on Operating Systems Design and Implementation (2014), USENIX Association, pp. 267–283.
[2] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding applications from an untrusted cloud with Haven. ACM Transactions on Computer Systems (TOCS) 33, 3 (2015), 8.
[3] BITTAU, A., BELAY, A., MASHTIZADEH, A., MAZIÈRES, D., AND BONEH, D. Hacking blind. In Proceedings of the 35th IEEE Symposium on Security and Privacy (2014), SP’14.
[5] BRASSER, F., CAPKUN, S., DMITRIENKO, A., FRASSETTO, T., KOSTIAINEN, K., MÜLLER, U., AND SADEGHI, A. DR.SGX: Hardening SGX enclaves against cache attacks with data location randomization. CoRR abs/1709.09917 (2017).
[6] BRASSER, F., MÜLLER, U., DMITRIENKO, A., KOSTIAINEN, K., CAPKUN, S., AND SADEGHI, A.-R. Software grand exposure: SGX cache attacks are practical. In USENIX Workshop on Offensive Technologies (2017).
[7] CHEN, S., ZHANG, X., REITER, M. K., AND ZHANG, Y. Detecting privileged side-channel attacks in shielded execution with Déjà Vu. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security (2017), ACM, pp. 7–18.
IACR
[8] COSTAN, V., AND DEVADAS, S. Intel SGX explained. Cryptology ePrint Archive 2016 (2016), 86.
[9] DAVI, L., LEHMANN, D., SADEGHI, A.-R., AND MONROSE, F. Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection. In Proceedings of the 23rd USENIX Security Symposium (2014).
[10] EVANS, I., LONG, F., OTGONBAATAR, U., SHROBE, H., RINARD, M., OKHRAVI, H., AND SIDIROGLOU-DOUSKOS, S. Control jujutsu: On the weaknesses of fine-grained control flow integrity. In ACM CCS (2015).
[11] GÖKTAS, E., ATHANASOPOULOS, E., BOS, H., AND PORTOKALIDIS, G. Out of control: Overcoming control-flow integrity. In Proceedings of the 35th IEEE Symposium on Security and Privacy (2014), SP’14.
[12] GRUSS, D., LETTNER, J., SCHUSTER, F., OHRIMENKO, O., HALLER, I., AND COSTA, M. Strong and efficient cache side-channel protection using Hardware Transactional Memory. In 26th USENIX Security Symposium (2017).
[13] GRUSS, D., MAURICE, C., WAGNER, K., AND MANGARD, S. Flush+Flush: A fast and stealthy cache attack. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (2016), Springer, pp. 279–299.
[14] INTEL. Intel® Software Guard Extensions SDK. https://software.intel.com/en-us/sgx-sdk.
[15] INTEL. Intel® Software Guard Extensions SDK for Linux*. https://01.org/intel-software-guard-extensions.
[16] INTEL. Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3D: System Programming Guide, Part 4, December 2017. Order Number 332831-065US.
[17] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. S$A: A shared cache attack that works across cores and defies VM sandboxing—and its application to AES. In Security and Privacy (SP), 2015 IEEE Symposium on (2015), IEEE, pp. 591–604.
[18] KUVAISKII, D., OLEKSENKO, O., ARNAUTOV, S., TRACH, B., BHATOTIA, P., FELBER, P., AND FETZER, C. SGXBOUNDS: Memory safety for shielded execution. In Proceedings of the Twelfth European Conference on Computer Systems (2017), ACM, pp. 205–221.
[19] LEE, J., JANG, J., JANG, Y., KWAK, N., CHOI, Y., CHOI, C., KIM, T., PEINADO, M., AND KANG, B. B. Hacking in darkness: Return-oriented programming against secure enclaves. In USENIX Security (2017), pp. 523–539.
[20] LEE, S., SHIH, M.-W., GERA, P., KIM, T., KIM, H., AND PEINADO, M. Inferring fine-grained control flow inside SGX enclaves with branch shadowing. In 26th USENIX Security Symposium, USENIX Security (2017), pp. 16–18.
[4] BOSMAN, E., AND BOS, H. Framing signals - A return to portable shellcode. In Security and Privacy (SP), 2014 IEEE Symposium on (2014), IEEE, pp. 243–258.
[21] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B. Last-level cache side-channel attacks are practical. In Security and Privacy (SP), 2015 IEEE Symposium on (2015), IEEE, pp. 605–622.
[22] MCKEEN, F., ALEXANDROVICH, I., ANATI, I., CASPI, D., JOHNSON, S., LESLIE-HURD, R., AND ROZAS, C. Intel® Software Guard Extensions (Intel® SGX) support for dynamic memory management inside an enclave. In Proceedings of the Hardware and Architectural Support for Security and Privacy 2016 (New York, NY, USA, 2016), HASP 2016, ACM, pp. 10:1–10:9.
[23] MOGHIMI, A., IRAZOQUI, G., AND EISENBARTH, T. CacheZoom: How SGX amplifies the power of cache attacks. In International Conference on Cryptographic Hardware and Embedded Systems (2017), Springer, pp. 69–90.
[24] SCHUSTER, F., COSTA, M., FOURNET, C., GKANTSIDIS, C., PEINADO, M., MAINAR-RUIZ, G., AND RUSSINOVICH, M. VC3: Trustworthy data analytics in the cloud using SGX. In Security and Privacy (SP), 2015 IEEE Symposium on (2015), IEEE, pp. 38–54.
[25] SEO, J. SGX-Shield open source repository. https://github.com/jaebaek/SGX-Shield. Commit 04b09dd, 2017-09-27.
[26] SEO, J., LEE, B., KIM, S., SHIH, M.-W., SHIN, I., HAN, D., AND KIM, T. SGX-Shield: Enabling address space layout randomization for SGX programs. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA (2017).
[27] SHACHAM, H. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM conference on Computer and communications security (2007), ACM, pp. 552–561.
[28] SHIH, M.-W., LEE, S., KIM, T., AND PEINADO, M. T-SGX: Eradicating controlled-channel attacks against enclave programs. In Network and Distributed System Security Symposium (2017).
[29] VAN BULCK, J., WEICHBRODT, N., KAPITZA, R., PIESSENS, F., AND STRACKX, R. Telling Your Secrets without Page Faults: Stealthy Page Table-Based Attacks on Enclaved Execution. In 26th USENIX Security Symposium (USENIX Security) (2017).
[30] WEICHBRODT, N., KURMUS, A., PIETZUCH, P., AND KAPITZA, R. AsyncShock: Exploiting synchronization bugs in Intel SGX enclaves. In European Symposium on Research in Computer Security (2016), Springer, pp. 440–457.
[31] XU, Y., CUI, W., AND PEINADO, M. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In IEEE Symposium on Security and Privacy (2015).
[32] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A high resolution, low noise, L3 cache side-channel attack. In USENIX Security Symposium (2014), pp. 719–732.

### Appendix A: Shellcode

```assembly
; (total size of structures)
; area for temporary data
; TARGET_INFO + REPORT_DATA
; area to copy structures into

; Initial register state:
; rax = 0 (EREPORT leaf)
; rbx = EEXIT return address
; rcx = 512 + 512 + 64
; rdx = writable 512-byte aligned enclave
; rdi = writable 512-byte aligned enclave
; rsi = address of attacker’s KEYREQUEST +
; rbp = address of attacker’s key buffer
; rsp = writable area for shellcode stack

push rbx
push rdi

; Copy KEYREQUEST, TARGET_INFO, REPORT_DATA to enclave memory
rep movsb

; EREPORT
lea rcx, [rdi - 64]
lea rbx, [rcx - 512]
enclu

; Copy report’s ISVSVN to KEYREQUEST
pop rbx
mov ax, [rdx + 258]
mov [rbx + 4], ax

; Copy report’s CPUSVN to KEYREQUEST
vmovdqa xmm0, [rdx]
vmovdqu [rbx + 8], xmm0

; Copy report’s KEYID to KEYREQUEST
vmovdqa ymm0, [rdx + 384]
vmovdqu [rbx + 40], ymm0

; EGETKEY
push rdx
pop rcx
mov al, 1
enclu

; Copy key to attacker’s memory
movdqa xmm0, [rdx]
movdqu [rbp], xmm0

; EEXIT to attacker’s code
pop rbx
mov al, 4
enclu
```

**Listing 5: Shellcode for cryptographic key extraction (74 bytes)**

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.