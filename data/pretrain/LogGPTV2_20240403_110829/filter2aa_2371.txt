### How to Find 12 Kernel Information Disclosure Vulnerabilities in 3 Months
**Authors: Tanghui Chen, Long Li | Baidu Security Lab**
**Year: 2019**

---

#### Contents
1. **Introduction**
   - Who am I?
2. **Understanding Vulnerabilities**
   - What is a Kernel Information Disclosure Vulnerability?
   - Root Causes of the Vulnerability
3. **Vulnerability Analysis**
   - Heap and Stack Data Poisoning
   - Vulnerability Detection Techniques
   - CVE Analysis
4. **Results and Conclusion**
   - Final Thoughts

---

### 1. Introduction

#### Who am I?
- **Tanghui Chen**
  - Senior Security R&D Engineer at Baidu Security Lab
  - Years of experience in Windows Kernel Security Development
  - Expertise in Rootkit development
  - Accidentally entered the field of vulnerability research

- **Contact: PI:EMAIL**

---

### 2. Understanding Vulnerabilities

#### What is a Kernel Information Disclosure Vulnerability?
Kernel information disclosure vulnerabilities in Windows can lead to ASLR (Address Space Layout Randomization) bypass or the exposure of critical system information. Attackers can exploit these vulnerabilities to reveal confidential data such as:
- Encryption keys
- Kernel objects
- Key kernel module addresses
- Other sensitive information

#### Root Causes of the Vulnerability
**CVE-2018-8443 Example:**
1. **User Mode Call**: `ZwDeviceIoControlFile(..., 0x7d008004, Output,...)`
2. **Kernel Mode Switch**: `ZwDeviceIoControlFile` switches to kernel mode after the system call.
3. **Uninitialized Data Exposure**: The output buffer contains uninitialized data from the kernel stack when it returns to user mode.

---

### 3. Vulnerability Analysis

#### Existing Vulnerability Mining Techniques
- **BochsPwn**: CPU emulator
- **DigTool**: Heavyweight VT techniques
- **Instrumentation**: Dynamic analysis tools

#### Discovering Information Disclosure Vulnerabilities
1. **Heap and Stack Data Poisoning**: Fill memory with padding flag data.
2. **Data Detection**: Check for padding flag data at specific points.
3. **Vulnerability Analysis**: Confirm and analyze the detected vulnerabilities.

##### Step 1: Heap and Stack Data Poisoning Techniques
- **Kernel Stack Poisoning**: Hook `KiFastCallEntry` and use `IoGetStackLimits` to fill the stack with padding flag data.
  ```c
  IoGetStackLimits(&LowLimit, &HighLimit);
  __asm{
      xor eax, eax;
      mov al, g_cFlags; // e.g., 0xAA
      mov edi, LowLimit;
      mov ecx, Esp_Value;
      sub ecx, LowLimit;
      cld;
      rep stosb;
  }
  ```

- **Kernel Heap Poisoning**: Hook `ExAllocatePoolWithTag` and fill allocated memory with padding flag data.
  ```c
  PVOID NTAPI HOOK_ExAllocatePoolWithTag(...)
  {
      PVOID Buffer = pfn_ExAllocatePoolWithTag(PoolType, NumberOfBytes, Tag);
      if (Buffer){
          memset(Buffer, g_cFlags, NumberOfBytes); 
      }
      return Buffer;
  }
  ```

**Thoughts on Heap and Stack Data Poisoning:**
- Simple but effective techniques.
- False positives can occur if the memory already contains the same data.
- Using variable padding flag data can reduce false positives.

##### Step 2: Data Detection Techniques
- **Nirvana**: Lightweight dynamic translation framework by Microsoft.
  - Pros: Easy to implement, good compatibility.
  - Cons: Limited to stack data, difficult to analyze without real-time data.
  - Implementation: Set callback functions to detect stack data.
  ```c
  ZwSetInformationProcess(NtCurrentProcess(), ProcessInstrumentationCallback, &Info64, sizeof(Info64));
  typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION {
      ULONG_PTR Version;
      ULONG_PTR Reserved;
      ULONG_PTR Callback;
  } PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;
  ```

- **memcpy/memmove**: Detect data copied from kernel to user space.
  - Pros: Easy to implement, high performance, good compatibility.
  - Implementation: Hook `memcpy` and check for padding flag data.
  ```c
  void * __cdecl HOOK_memcpy(void * dst, void * src, size_t count)
  {
      if ((ULONG_PTR)dst < MmUserProbeAddress) {
          pOffset = (PUCHAR)src;
          while (pOffset <= (PUCHAR)src + count - sizeof(DWORD)) {
              if (*(DWORD *)pOffset == g_dwDwordFlags) {
                  // Detected
              }
          }
      }
      return memcpy(dst, src, count);
  }
  ```

- **movs**: Detect data using `movs` instructions.
  - Pros: Comprehensive data detection, easy to analyze.
  - Implementation: Replace `movs` with `int 20h` and handle the interrupt.
  ```c
  __declspec(naked) VOID HOOK_KiTrap20()
  {
      __asm {
          pushfd;
          pushad;
          call DetectMemory;
          popad;
          popfd;
          rep movs dword ptr es:[edi], dword ptr[esi];
          iretd;
      }
  }
  ```

##### Step 3: Vulnerability Analysis
- **Live Debugging**: Analyze and confirm the vulnerability.
- **User Mode Check**: If padding flag data exists in user mode memory, confirm the vulnerability.
- **PoC Development**: Based on callstack and reverse engineering of user mode code.

**Challenges:**
- Multiple memory copies can complicate PoC development.
- Memory tracking tools were implemented to assist in analysis.

**CVE-2018-8443 Analysis:**
- Verify user-mode memory for special tags.
- Identify the code that triggered the vulnerability.
- Complete the PoC.

---

### 4. Results and Conclusion

- **Discoveries**: 12 Windows kernel information disclosure vulnerabilities in three months.
- **Bounties**: 7 of the CVEs received the maximum bounty award of $5,000.

**Final Thoughts:**
- User mode memory read-only (remove PTE write bit).
- Reverse tracking.
- Further improvements and considerations.

**Thank you!**

**Tanghui Chen**
**PI:EMAIL**