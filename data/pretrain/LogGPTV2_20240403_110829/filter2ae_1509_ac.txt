        for i in range(624):
            tmp=random.getrandbits(32)
            ss.append(tmp)
        BOX=[]
        for i in range(32):
            BOX.append(random.getrandbits(1024))
        return ss,BOX
    import linecache
    import mt19937predictor
    lines=linecache.getlines("output")
    ss=lines[2:-1]
    #ss,BOX=generateBOX()
    predictor=mt19937predictor.MT19937Predictor()
    for x in ss:
        data=int(x.strip(),16)
        predictor.setrandbits(data,32)
    box=[]
    for i in range(32):
        box.append(predictor.getrandbits(1024))
    print(box)
第二次采用的是对称加密，现在已有加密密钥，可以解密得到明文
    import os
    import libnum
    import random
    from Crypto.Util.number import getPrime,long_to_bytes,bytes_to_long
    flag="a"*31
    print "++good good study, day day up++"
    def pad(m):
        tmp=m+os.urandom(16-len(m) % 16)
        if (len(tmp)/16) % 2 !=0:
            tmp+=os.urandom(16)
        return tmp
    m=pad(flag)
    def cipher1(m):
        tmp= bytes_to_long(os.urandom(172)+m)
        e=3
        p=getPrime(1024)
        q=getPrime(1024)
        n=p*q
        c=pow(tmp,e,n)
        d=libnum.invmod(e,(p-1)*(q-1)) % ((p-1)*(q-1))
        if pow(c,d,n)!=tmp:
            return cipher1(m)
        else:
            print(long_to_bytes(n).encode("hex") )
            print(long_to_bytes(c).encode("hex") )
            print len(long_to_bytes(d))
            return long_to_bytes(d)[-len(long_to_bytes(d))/2-1:]
    #t=cipher1(m)
    def pad2(m):
        assert len(m) = PolynomialRing(Zmod(n))
        nbits = n.nbits()
        f = 2^kbits*x + p0
        f = f.monic()
        roots = f.small_roots(X=2^(nbits//2-kbits), beta=0.3)  # find root = n^0.3
        if roots:
            x0 = roots[0]
            p = gcd(2^kbits*x0 + p0, n)
            return ZZ(p)
    def find_p(d0, kbits, e, n):
        X = var('X')
        for k in xrange(1, e+1):
            results = solve_mod([e*d0*X - k*X*(n-X+1) + k*n == X], 2^kbits)
            for x in results:
                p0 = ZZ(x[0])
                p = partial_p(p0, kbits, n)
                if p:
                    return p
    if __name__ == '__main__':
        n = 0xbac8178c6c942524e947f05b688d4f589b99428d4e932b6aa3cf9fc668436fe828271348451c43b52392dda7fca416d58ca39ddeafa012c4ca1b66b08c003296f1608e2e88184a23d400607be608fd2b75b3be14cedc678f27e1d5c601c4793ec599eff29e4ae568669fea83e917d584c6f45a99c81b50a235deb8094514b9dc6f8fc3746d2f9575b7d828c190f4eba1c719e13e9158c3874e19ad2aa886cbbe037a840ac277edc4ba4f9593331dd22575f13db757b5affc75325bec1310801712b3d6292700633dba4ccd1e3b842f749e29114de611204d40d4e032dd1d88e479c63a09ed6ec1c9fc68b757d84e6ddbeabce9f71a96cb0c5187875a527e81c3
        e = 3
        beta = 0.5
        epsilon = beta^2/7
        nbits = n.nbits()
        kbits = floor(nbits*(beta^2+epsilon))
        #d0 = d & (2^kbits-1)
        d0 = 41553968686912790458952954242993376120770631907046753685913743296462656479519115622338767486057957865327928162894905159713476559759372878811027305942550917690129221521319505264770463830494835755547904306581759923536797408961014041078383923539917501415413031359824770485620647758572837271668506768858761339247563
        print "lower %d bits (of %d bits) is given" % (kbits, nbits)
        p = find_p(d0, kbits, e, n)
        print "found p: %d" % p
        q = n//p
    print inverse_mod(e, (p-1)*(q-1))
得到d之后最后解密出flag
    d=15719329173101230775604925095713430429410017067730735720122774102026798292198854772582397931524981328066220201686253869681654538643216308659732679687068887144244339681292606585405634534782951769524179447943945928017418799051540509161882272727502124383771467244539059079789484131589823795198826681734443250466489631148083608378602690249331340288477433925901930416883386560607894108133072240151451713294504041574171909966081139950332854672625859935972900507941581759565393537375540648238054700355023950471918032942297781254286296194965889493933080236396888544403928268329653036490837233832639787140301937122334872345547
    >>> from libnum import *
    >>> n=0xbac8178c6c942524e947f05b688d4f589b99428d4e932b6aa3cf9fc668436fe828271348451c43b52392dda7fca416d58ca39ddeafa012c4ca1b66b08c003296f1608e2e88184a23d400607be608fd2b75b3be14cedc678f27e1d5c601c4793ec599eff29e4ae568669fea83e917d584c6f45a99c81b50a235deb8094514b9dc6f8fc3746d2f9575b7d828c190f4eba1c719e13e9158c3874e19ad2aa886cbbe037a840ac277edc4ba4f9593331dd22575f13db757b5affc75325bec1310801712b3d6292700633dba4ccd1e3b842f749e29114de611204d40d4e032dd1d88e479c63a09ed6ec1c9fc68b757d84e6ddbeabce9f71a96cb0c5187875a527e81c3
    >>> c=0xb50f6b8e6e29b869119eaedc9b235d8754c7ce06ff1a5c9465622d5662e5b36e7f6d525f3a64e126bad4e5c06c24408b81e66f00f7c7a464e4514544683d5d92c84394fc41fd1a626b910bf8e5f30b87c64a129ff694bddca441d01a9d49835d90123fee879935236de2e25ecc4adb2c0bc6a17a2209e1ed5a31c4209f3d11974d464a7fb127ddf2ab9d9975798b7b11a1f4389bef23dd60d2a062fd7e3245e891a0f13b4b9f702b4796874bb8302c40047ad13f8fc421c02953fddb012029508cc80eaa3a89f72663cd563a3336db2bd5d8ab3bdf36239d1cf9a98cee265beec9d2283bc6dffff49a7e23f48efe9eba337f0a9f52a1c2f167387905364af412
    >>> pow(c,d,n)
    3853527054032297151288551799276978491484011652387602856669343677153153672488264869789362258706672913380725805959339051647753660398715672758041611417359221862191910186302849642986117379051948384641790806003045938775165662607856847624153370073390528916685325331400617639430264710801836071918474422247871191092731077060317333951332306026450738567711361523165024993865644207231472725193840873995914535584736228295533006603469862575861095201104822715553969226942033977480766434171551353277650319968784074525097625278661991131857615700533149787373545375247337643949376505455L
    >> k=pow(c,d,n)
    >>> n2s(k)
    ',\x9d\x10$\x8ft\x08\x9c\xc1?\x93B\xc5W\xb8\xab6\x8f\xe4)\x11\x1fM\x99\xb1\xfd\xdd\xd3D\t\xf4\x11\x7f\xaf%\x98\xfeN$\x06\xac\x1a\xfel\x12\xd6tr\xfcO\x96\x9d\xa7u\xa9w\x18\xb4\xde\x9cC+W\xc6\x87Jf&\xbd\xb6\xa7+\x0f\xf0\xe8\xd8\xd6\xc6\x87\x8f\x16\x19~\xe5c]\xfc\xb1)\x87\x81\xb3\x8d\xb6}H\x14\xbb\xec\x9d|k\x8eW\x89\xa6\xfb\xe1\x7f\xc6\x0fbg\x9bs\xc1ek\xd0\x87\x01\xe1\xbd#i\x17x~I\xf5\xc3\xf0\xbdD\xa8\x88Pn\x8a\xfdx\x07\xe9.\x1egW\x8d\x04\xafh)~\x8b\xcd\xe5\x05)R\xcf\xec*\x9f\xe3\r\x10c\xf62ygcflag{m1x_flag_for_alot_of_challenges_rsa_block_stream_ctf}\xf2x6\x01\x86o'
# Web
## Shadow
首先flask写的，测试发现存在模板注入，于是fuzz一下  
/{{url_for. **globals** ['current_app'].config}}
得到配置文件，然后获取到了secret
'SECRET_KEY': 'as/ _d21as-+dhasod5a4s54: ><_()dfdsf'  
解密session 如下：
于是伪造admin：  
出现上传框，后来测了一下，貌似随便注册一下，也可以上传233333
随后开始fuzz，测试了很久，发现可以xxe ，，，
最后测试得到使用xinclude 读文件 然后在rq用户的 .bash_history 得到flag文件名
## Myblog
首先发现了index.php 这个时候发现了一个.index.php.swp 这里真是坑啊，与实际文件根本完全不一样。233333
下面说重点，  
首先index.php cookie提示？Flag 尝试filter读源码，发现并没有什么卵用。。。  
提示about也有后端，页面也说用了base64 于是猜测 about的base64 编码以后，存在文件，（这里猜了一年，服了）  
然后读源码：
    <?php
        $filename = 'flag.txt';
        $flag = 'flag.txt';