Global Dest Realm
+---------------+---------------+---------------+---------------+ optional
|
| global
+---------------+---------------+---------------+---------------+ header
|
|
+---------------+---------------+---------------+---------------+
|
|
+---------------+---------------+---------------+-------+-------+
|
|
+---------------+---------------+---------------+---------------+
Global Source Realm
Used Source MRIP
Source MRIP
Dest MRIP
Figure 3: IPNL Address Format
In addition to being able to route to zones behind their front-
doors, internal nl-routers also know how to route to each realm
using the 2-byte RN. This routing information is conveyed by the
same dynamic routing protocol used for zones. Such a routing pro-
tocol would have several parallels with BGP, and, in fact, a mod-
iﬁed BGP could be used. Whereas BGP calculates routes to Au-
tonomous System (AS) numbers and associates IP preﬁxes with
those ASs, IPNL’s routing algorithm would calculate routes to RNs,
and associate zones with those RNs.
In addition, whereas BGP
neighbors are reachable across ASs, nl-router neighbors are reach-
able across private realms.
Packets for realms behind different frontdoors are routed by de-
fault to the frontdoor. Frontdoors use the MRIP to forward pack-
ets across the middle realm. Once a packet reaches its destination
private realm, the attached nl-router uses the EHIP to forward the
packet across the private realm to the destination host. Note that the
realm-routing protocol may establish different forward and reverse
paths between a host and its frontdoor. Thus, we do not require any
routing path symmetry assumptions9.
	We, of course, assume that the destination uses the MRIP speci-
ﬁed in the source address as part of the destination IPNL address
for packets in the reverse direction.
+---------------+---------------+---------------+---------------+ optional
| FQDN
|
˜ header
˜
|
|
+---------------+---------------+---------------+---------------+
FQDN Header
Figure 4: IPNL Header Format
Figure 4 shows the IPNL Header. It consists of a 24-byte local
header, an optional 16-byte global header, and an optional variable
length FQDN header. The FQDN header contains, among other
things, the source and destination FQDNs of the packet. There is
no time-to-live (hop count) ﬁeld. Nl-routers increment and copy the
time-to-live ﬁeld of the incoming tunnel’s IP header to the outgoing
tunnel’s IP header. The IPNL header is designed so that the RN and
EHIP of the source host are in the ﬁrst 8 bytes of the packet. This
allows nl-routers to identify the source host in received ICMPv4
messages. This is important for making debugging tools like tracer-
oute and ping work across realms. Most of the other header ﬁelds
will be described in subsequent sections.
2.5 Administrative Domains
There is no correspondence between administrative domains and
IPNL topological entities. A large corporation may consume mul-
tiple frontdoors and all the realms behind those frontdoors (for in-
stance, the shaded area labeled “site A” in Figure 2). A small cor-
poration may consume only a single realm, sharing an ISP-owned
frontdoor with other corporations. A home network may consume
part of a realm (for instance a /16 or /24) and share the realm with
many other home networks. As such, an ISP could support over 17
million /16 home networks with a single global IP address (65536
RNs by 272 private /16’s), for example.
3. SITE ADDRESS ISOLATION
This section describes the aspects of IPNL that allow site isola-
tion. By site isolation, we mean that changes in any of the MRIPs
of the site’s frontdoors have no effect on internal packet exchanges
or routing exchanges. In other words, the MRIP never shows up
in any internal routing messages, host conﬁguration messages, or
headers of intra-site data packets.
A site’s frontdoor MRIPs do, of course, show up in packets be-
tween internal and external hosts (called global packets). But be-
cause these MRIPs are learned on a connection by connection basis,
there is no need to statically conﬁgure hosts and internal nl-routers
with their site’s MRIPs. This approach has two advantages:
1. There are no renumbering “events” where the addresses of
all of a site’s hosts must be simultaneously updated when-
ever the site’s preﬁx changes. While infrequent, this preﬁx
change entails massive changes to the entire site, and can be
highly disruptive because all support infrastructure must be
atomically updated.
2. Connections on a single host persist across multiple address
changes on its interfaces. This feature is useful for mobile
hosts that change realms or frontdoors. Given that private
realms are envisioned to be small, this address change may
be fairly frequent.
There are four primary mechanisms that provide site isolation:
1. Intra-site headers carry no MRIPs, and are not globally unique.
2. Realm number assignments are independently made, which
allows sites that share the same frontdoor to independently
number their realms.
3. IPNL addresses of packets are resolved in-ﬂight, using FQDNs
to route unresolved packets.
4. A 2-bit “Loc” ﬁeld in global header (Figure 4) is used to
indicate whether a global packet is behind the source or des-
tination frontdoor.
These four mechanisms are discussed in turn.
3.1 Separate Local and Global Headers
When a host transmits an IPNL packet that does not cross the
middle realm, it does not include the optional global header. Such
packets are called local packets.
Internal nl-routers receiving a
packet without the global header know that the packet is to be
routed locally. Therefore, there is no need for IPNL hosts to know
their site’s MRIPs. This also means that a site’s internal trafﬁc is
not effected even if its MRIP changes.
Because locally addressed packets carry no MRIPs, they are not
globally unique. Local packets behind other frontdoors can have
the same headers. This use of a local packet is similar in many re-
spects to the site-local address of IPv6 [14]. The IPv6 site-local ad-
dress is distinguished by a speciﬁc 48-bit preﬁx, and like the IPNL
local address is unique only within a site. The purpose of the site-
local address in IPv6 is to lessen the impact of site renumbering.
Thus, if an IPv6 site is renumbered, intra-site connections using
the site-local address will not be affected by the change. By al-
lowing hosts to dynamically learn MRIPs, IPNL takes this one step
further, allowing even global connections to survive renumbering.
The use of locally unique addresses in both IPNL and IPv6 raises
two problems:
1. How can the same local address from different sites be rec-
ognized as belonging to different sites, and
2. How does a host know that a given destination can be locally
addressed?
IPv6 has no explicit mechanism to address the ﬁrst question. It
is up to site administrators to ensure that the context of all IPv6
site-local addresses is maintained. IPNL, on the other hand, uses
FQDNs for this purpose. Because FQDNs carried in packet head-
ers are fully routable, they can be used in lieu of IPNL addresses
in conﬁguration ﬁles. IPNL addresses may still have to be used di-
rectly when debugging network problems, so IPNL doesn’t solve
the problem completely. But such instances are clearly constrained
and limited.
As for the second question, the primary mechanism by which
IPv6 hosts determine whether a destination host is within a site
or not is through the use of “two-faced” DNS. That is, DNS must
know whether a given query is from a host within the site or ex-
ternal to the site, and compose its answer accordingly. It should
be noted that the use of site-local addresses in IPv6 is entirely op-
tional, whereas in IPNL it is mandatory. Therefore IPv6 users can
get around the problems inherent in site-locals by simply not using
them.
The way an IPNL host learns that a destination is locally address-
able is through a technique whereby IPNL addresses are composed
“in-ﬂight” (Section 3.3).
3.2 Realm Number Independence
A problem comes up with realm number assignment when mul-
tiple sites share the same frontdoor. The purpose of site address
isolation is to eliminate dependencies on the addresses assigned
by ISPs, and by extension, from the addresses assigned to topo-
logically nearby sites. Because all realm numbers behind a given
MRIP must be unique, without some additional mechanism, all
realm number assignments within sites that share the same front-
door would have to be coordinated. This would defeat some of the
beneﬁts of site address isolation. For example, in Figure 2, the two
sites sharing frontdoor M3 would have to coordinate their realm
number assignments with each other. Without such coordination,
both sites may assign the same RN numbers, as is shown with both
sites having a realm numbered “R5”.
IPNL allows independent realm number assignment by allowing
different realm numbers to be used internal and external to a site.
This is possible because realms are identiﬁable by their DNS zones.
The neighbor nl-routers on either side of a site boundary know what
realm number the other is using to identify a given realm. When the
neighbors are internal nl-routers, this is scalably learned by the dy-
namic routing algorithm or by explicit conﬁguration. When pack-
ets are locally addressed, the realm numbers are translated as the
packet crosses site boundaries.
Because each frontdoor must have explicit routing information
for all realms behind it, each frontdoor assigns realm number val-
ues to all realms behind it independent of the realm numbers as-
signed by the site. For globally addressed packets, the realm num-
bers assigned by the frontdoor are carried in the Global Dest Realm
and Global Source Realm ﬁelds (Figure 4). These ﬁelds are tightly
coupled to the Dest MRIP and Source MRIP ﬁelds respectively. In
other words, the realm number in the Global Dest Realm ﬁeld is
always the realm number assigned by the frontdoor deﬁned by the
Dest MRIP ﬁeld. In the remainder of the paper, the Dest MRIP and
Global Dest Realm ﬁelds are treated a single unit, and written as
Dest MRIP+RN (and likewise for Source MRIP+RN).
For instance, in Figure 2, M3 recognizes that two realms have the
same realm number, and externally represents one of the realms as
having a different RN. As such, a host talking to a host on site B’s
R5 would see a different realm number, say R7. M3 would translate
between the two RNs.
Every frontdoor can assign its own values for the external rep-
resentation independent of other frontdoors. As such, it is a com-
pletely local and automatic function. For instance, M3 might rep-
resent site B’s R5 as R7, while M4 represents it by R8. Different
packets for a given connection may go through either frontdoor, for
instance if one of the frontdoors crashes. As described in Section 4,
IPNL has various mechanisms to maintain host identiﬁcation in the
face of such changes.
3.3 In-ﬂight IPNL Address Resolution
When a host initiates a connection, it only knows three addresses:
1. its own FQDN,
2. its own EHIP, and
3. the FQDN of the destination.
In particular, it does not know its own MRIP and RN. It learns the
destination host MRIPs by transmitting a message to a frontdoor
asking that frontdoor to do a middle realm DNS lookup for the
destination. But it does not know the destination’s RN and EHIP
when it transmits its ﬁrst packet. Instead, the source MRIP and RN,
as well as the destination RN and EHIP, are written into the packet
as the packet travels from source to destination.
This is best described by example. In Figure 2, assume that host
H1 is transmitting a packet to host H3. First, it requests a DNS
lookup for H3’s MRIPs from one of its own frontdoors. This is
done by transmitting a request message hop-by-hop to each nl-
router on the way to the frontdoor. The ﬁrst nl-router that can
answer the message does so.
If no nl-routers can answer it, the
frontdoor does a DNS lookup over the middle realm.
The initial packet from H1 to H3, then, contains both hosts’
FQDNs, H1’s EHIP, and one of H3’s MRIPs (say M4). All other
IPNL address ﬁelds are transmitted as values deﬁned as “unknown”.
When the packet reaches the R1-R2 internal nl-router, it knows that
the packet came from realm R1, and writes that RN into the Lo-
cal Source Realm ﬁeld. When the packet reaches frontdoor M1,
it writes its MRIP and its representation of the source RN into
the Used Source MRIP+RN ﬁelds (overwriting the Local Source
Realm value, which is no longer needed once the packet traverses
the frontdoor). When the packet reaches M4, it uses the FQDN
to determine the RN for the destination zone.
It writes its own
MRIP and its representation of the destination RN into the Dest
MRIP+RN ﬁelds. It also writes the local representation of the des-
tination RN into the Local Dest Realm ﬁeld. When the R5-R6 inter-
nal nl-router receives the packet, it looks up H3’s EHIP and writes
that into the destination EHIP ﬁeld.
When H3 receives the packet, both IPNL addresses are com-
plete. H3 stores the received values in a control block used only
for this connection. In the return packet, the received Used Source
MRIP+RN (M1+R1) are copied into the Dest MRIP+RN ﬁelds,
the received Dest MRIP+RN ﬁelds (M4+R6) are copied into the
Source MRIP+RN ﬁelds, and the FQDNs and EHIPs are reversed.
When this packet exits site B, the exiting frontdoor writes it’s MRIP+RN
into the Used Source MRIP+RN ﬁelds. If the exiting frontdoor was
M3, then H1 will receive a return packet with M1+R1 as the Dest
MRIP+RN, M4+R6 as the Source MRIP+RN, and M3+R6 as the
Used Source MRIP+RN.
H1 stores M4+R6 as a valid MRIP+RN for H3, but stores M3+R6
as the active MRIP+RN for H3. H1’s return packet does not require
the FQDNs. The Source MRIP+RN is copied from the received
Dest MRIP+RN (M1+R1). This allows H3 to identify the source
of the packet, even if, for instance, the packet exits site A through
M2. The Dest MRIP+RN is set as M3+R6, and the EHIPs are re-
versed. Subsequent packets do not require FQDNs. The Source
MRIP+RN is always used to identify the incoming packet. The
most recently received Used Source MRIP+RN is always used to
return packets.
Now consider the case of a packet from H1 to H2, a host in a
different realm but behind the same frontdoor. In this case, when
H1 transmits the DNS lookup request message, the ﬁrst internal nl-
router to receive the packet (say R1-R2) knows from the destination
FQDN that the destination realm is local. The internal nl-router
replies to this effect to H1. H1 then transmits a packet similar to
the one in the previous example, but with the Dest MRIP ﬁeld set to
a well-known value meaning “none”10. The source RN and desti-
nation RN and EHIP ﬁelds are ﬁlled in as described in the previous
example, but using the Local Source and Local Dest Realm ﬁelds.
Once H1 learns these ﬁelds from the return packets, subsequent
packets contain neither the FQDN nor global headers.
Consider a packet from H1 to z.a.com attached to the same realm.
In the case the nl-router receiving the DNS lookup request message
knows that the destination is in the same realm, and returns an an-
swer to that effect including the destination host’s EHIP. H1 then
transmits a packet directly to z.a.com with the source and destina-
tion EHIP ﬁelds set, and the source and destination RN ﬁelds set to
a well-known value meaning “this realm”.
Finally, consider a packet from H2 to H4. H4’s home realm is
R1, but it is visiting realm R6. In this case, H2’s initial packet will
be routed to one of R1’s nl-routers, say R1-R3. R1-R3 knows that
H4 is in realm R6 with zone c.com, based on a registration message
previously sent by H4 and distributed to nl-routers R1-R3 and R1-
R2. R1-R3 will return a “redirect” message to H2 telling it the vis-
ited realm of H4. (As will be described in Section 5, the redirect is
weakly authenticated by the Random ID (RID) ﬁeld which makes
spooﬁng hard, but is subject to man-in-the-middle attacks.) Sub-
sequently, H2 will transmit a packet containing two Dest FQDNs
in the FQDN header: y.a.com and c.com. FQDN c.com will get
the packet routed to an nl-router of R6. This router will know the
EHIP of y.a.com due to a previous registration from y.a.com, and
the packet will be delivered.
3.4 The Location Field