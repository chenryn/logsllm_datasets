$_FILES["file"]["name"]
））；
#
判断是否在被允许的扩展名里
if
（
in_array
（
$FilenameExt
，
$disallowed_types
））
{
      die
（
"disallowed type"
）；
}
else
{
      $filename = time
（）
.".".$FilenameExt
；
      //
移动文件
      move_uploaded_file
（
$_FILES["file"]["tmp_name"]
，
"upload/" . $FileName
）；
}
这段代码的问题在获取文件扩展名与验证扩展名，如果我们上传文件的时候文件名为“1.php”，注意后面有一个空格，则这里$FilenameExt的值为“php”，后面有一个空格，这时候in_array（$FilenameExt，$disallowed_types）是返回false的，最终成功上传文件。
另外一种情况是正确的黑名单方式验证了扩展名，但是文件名没有修改，导致可以在上传时使用“%00”来截断写入，如“1.php%00.jpg”，验证扩展名时拿到的扩展名是jpg，写入的时候被%00截断，最终写入文件1.php，这里不再给出案例。
3.文件头、content-type验证绕过
这两种方式也是早期出现得比较多的，早期搞过渗透的人可能遇到过，上传文件的时候，如果直接上传一个非图片文件会被提示不是图片文件，但是在文件头里面加上“GIF89a”后上传，则验证通过，这是因为程序用了一些不可靠的函数去判断是不是图片文件，比如getimagesize（）函数，只要文件头是“GIF89a”，它就会正常返回一个图片的尺寸数组，我们来验证一下，测试代码：
测试结果截图如图5-6所示。
图 5-6
content-type是在http request的请求头里面，所以这个值是可以由请求者自定义修改的，而早期的一些程序只是单纯验证了这个值，笔者在写这段文字的时候还专门去w3school等网站看了上面的PHP教程就存在这个问题。找了一段存在这个漏洞的代码如下：
4.phpcms任意文件上传分析
这里我们以PHPCMSv9在2014年公开的一个会员投稿处文件上传漏洞，漏洞作者felixk3y，漏洞乌云编号：wooyun-2014-062881，漏洞在文件/phpcms/libs/classes/attachment.class.php的upload（）函数，为了易于理解，这里省略部分代码，代码如下：
function upload
（
$field
，
$alowexts = ''
，
$maxsize = 0
，
$overwrite = 0
，
$thumb_setting = array
（），
$watermark_enable = 1
）
{
      /***
省略
***/
      $this->alowexts = $alowexts
；
  //
获取允许上传的类型
      /***
省略
***/
      foreach
（
$uploadfiles as $k=>$file
）
{  //
多文件上传，循环读取文件上传表单
        $fileext = fileext
（
$file['name']
）；
//
获取文件扩展名
        /***
省略
***/
        //
检查上传格式，不过
$alowexts
是从表单提交的，可绕过
      if
（！
preg_match
（
"/^
（
".$this->alowexts."
）
$/"
，
$fileext
））
{
          $this->error = '10'
；
          return false
；
       }
       /***
省略
***/
       $temp_filename = $this->getname
（
$fileext
）；
       $savefile = $this->savepath.$temp_filename
；
       $savefile = preg_replace
（
"/
（
php|phtml|php3|php4|jsp|exe|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl
）（
\.|$
）
/i"
，
"_\\1\\2"
，
$savefile
）；
  //
最需要绕过的地方在这里
       /***
保存文件
***/
       if
（
@$upload_func
（
$file['tmp_name']
，
$savefile
））
{
从上面的代码我们可以看出，这个漏洞最有意思的地方在：
$savefile = preg_replace
（
"/
（
php|phtml|php3|php4|jsp|exe|dll|asp|cer|asa| shtml|shtm |aspx|asax|cgi|fcgi|pl
）（
\.|$
）
/i"
，
"_\\1\\2"
，
$savefile
）；
而获取文件扩展名的函数内容为：
function fileext
（
$filename
）
{
      return strtolower
（
trim
（
substr
（
strrchr
（
$filename
，
'.'
），
1
，
10
）））；
}
这里用了trim（）函数去掉了空格，我们之前举例用空格绕过的方式在这里就不好使了，那有没有其他字符一样可以达到空格的效果呢，即“1.phpX”，X代表某个字符？仔细看正则会把如“1.php”替换为“1._php”，把“1.php.jpg”替换为“1._php.jpg”，作者利用fuzz的方式找到了%81-%99是可行的，仅在Windows下。利用时修改文件上传表单里的filename，在文件名后面利用十六进制修改原预留的空格20为81~99中的一个。
5.1.4 文件删除漏洞
文件删除漏洞出现在有文件管理功能的应用上比较多，这些应用一般也都有文件上传和读取等功能，它的漏洞原理跟文件读取漏洞是差不多的，不过是利用的函数不一样而已，一般也是因为删除的文件名可以用../跳转，或者没有限制当前用户只能删除他该有权限删除的文件。常出现这个漏洞的函数是unlink（），不过老版本下session_destroy（）函数也可以删除文件。
挖掘经验：
 挖掘文件删除漏洞可以先去找相应的功能点，直接黑盒测试一下看能不能删除某个文件，如果删除不了，再去从执行流程去追提交的文件名参数的传递过程，这样查找起来比较精准。如果纯白盒挖的话，也可以去搜索带有变量参数的unlink（），依然采用回溯变量的方式。关于session_destroy（）函数删除任意文件的漏洞这里就不再举例了，因为在比较早的PHP版本就已经修复掉了这个问题，限制了PHPSESSID只能由“字母+数字+横杆”符号组成。
Metinfo任意文件删除分析
这里的案例使用笔者之前发现的一个metinfo企业内容管理系统漏洞来说明，漏洞在recovery.php文件，代码如下：
if
（
$action=='delete'
）
{
   if
（
is_array
（
$filenames
））
{
       foreach
（
$filenames as $filename
）
{
         if
（
fileext
（
$filename
）
=='sql'
）
{
            @unlink
（
'../databack/'.$filename
）；
         }
      }
   }else{
       if
（
fileext
（
$filenames
）
=='sql'
）
{    $filenamearray=explode
（
".sql"
，
$filenames
）；
            @unlink
（
'../../databack/'.$filenames
）；
               @unlink
（
'../../databack/sql/metinfo_'.$filenamearray[0].".zip"
）；
       }else{
          //
如果不是
SQL
文件，直接删除
           @unlink
（
'../../databack/'.$fileon.'/'.$filenames
）；
          }
}
这段代码首先判断请求的action参数的值是不是delete，如果是则进入文件删除功能，在代码：
if
（
fileext
（
$filenames
）
=='sql'
）
{
判断如果不是sql文件后，就直接在databack目录删除提交的文件名，代码中$filenames函数从GET中提交，只要请求：
/recovery.php
？
&action=delete&filenames=../../index.php
即可删除index.php文件。
5.1.5 文件操作漏洞防范
文件操作漏洞在部分原理及利用方式上面都有一定相似性，所以下面我们分为通用防御手段和针对性防御手段来介绍怎么防御文件操作漏洞。
5.1.5.1 通用文件操作防御
文件操作漏洞利用有几个共同点如下：
1）由越权操作引起可以操作未授权操作的文件。
2）要操作更多文件需要跳转目录。
3）大多都是直接在请求中传入文件名。
我们需要这几个共同点来思考防御手段：
·对权限的管理要合理，比如用户A上传的文件其他平行权限的用户在未授权的情况下不能进行查看和删除等操作，特殊的文件操作行为限定特定用户才有权限，比如后台删除文件的操作，肯定是需要限制管理员才能操作。
·有的文件操作是不需要直接传入文件名的，比如下载文件的时候，下载的文件是已知的，则我们可以用更安全的方法来替代直接以文件名为参数下载操作，在上传文件时，只要把文件名、文件路径、文件ID（随机MD5形式）以及文件上传人存储在数据库中，下载的时候直接根据文件ID和当前用户名去判断当前用户有没有权限下载这个文件，如果有则读取路径指向的这个文件并返回下载即可。
·要避免目录跳转的问题，在满足业务需求的情况下，我们可以使用上面第二说的方法，但是有的情况下如后台进行文件编辑等操作时，需要传入文件路径的，可以在后台固定文件操作目录，然后禁止参数中有“..”两个点和反斜杠“/”以及斜杠“\”来跳转目录，怎么禁止呢？检查到传入的参数有这些字符，之间提示禁止操作并停止程序继续往下执行即可。
5.1.5.2 文件上传漏洞防范
文件上传漏洞相比下载、删除更复杂，所以这里单独拿出来讲一下怎么防范，文件上传漏洞虽然定位起来比较简单，但是修复起来要考虑的东西还是不少，主要是不同环境下的利用场景比较多，需要比较完善的策略去防止漏洞出现。修复和防止一种漏洞之前，要比较全的清楚这种漏洞在不同环境下的利用方式，这样才能防御的比较全，文件上传漏洞主要有两种利用方式，分为上传的文件类型验证不严谨和写入文件不规范。针对这两种利用方式，我给出的防范方案如下：
1）白名单方式过滤文件扩展名，使用in_array或者三等于（===）来对比扩展名。
2）保存上传的文件时重命名文件，文件名命名规则采用时间戳的拼接随机数的MD5值方式"md5（time（）+rand（1，10000））"。
我们对之前的代码稍微改动下，给出示例代码如下：
<
？
php
function getExt
（
$filename
）
{    
      return substr
（
$filename
，
strripos
（
$filename
，
'.'
）
+1
）；
}
$disallowed_types = array
（
'jpg'
，