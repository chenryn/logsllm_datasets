title:On traffic matrix completion in the internet
author:Gonca G&quot;ursun and
Mark Crovella
On Trafﬁc Matrix Completion in the Internet
Department of Computer Science
Gonca Gürsun
Boston University
PI:EMAIL
Department of Computer Science
Mark Crovella
Boston University
PI:EMAIL
ABSTRACT
The ability of an ISP to infer trafﬁc volumes that are not di-
rectly measurable can be useful for research, engineering, and
business intelligence. Previous work has shown that trafﬁc ma-
trix completion is possible, but there is as yet no clear under-
standing of which ASes are likely to be able to perform TM
completion, and which trafﬁc ﬂows can be inferred.
In this paper we investigate the relationship between the AS-
level topology of the Internet and the ability of an individual
AS to perform trafﬁc matrix completion. We take a three-stage
approach, starting from abstract analysis on idealized topolo-
gies, and then adding realistic routing and topologies, and ﬁ-
nally incorporating realistic trafﬁc on which we perform actual
TM completion.
Our ﬁrst set of results identiﬁes which ASes are best-
positioned to perform TM completion. We show, surprisingly,
that for TM completion it does not help for an AS to have
many peering links. Rather, the most important factor enabling
an AS to perform TM completion is the number of direct cus-
tomers it has. Our second set of results focuses on which ﬂows
can be inferred. We show that topologically close ﬂows are
easier to infer, and that ﬂows passing through customers are
particularly well suited for inference.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network monitoring; C.2.5 [Local
and Wide-Area Networks]: Internet — BGP
Keywords
Interdomain Routing, Matrix Completion
1.
Interdomain trafﬁc – the trafﬁc ﬂowing between autonomous
systems – is the fundamental workload of the Internet. It re-
ﬂects global economic activity and information ﬂow. Knowl-
INTRODUCTION
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.
edge of interdomain trafﬁc volumes is therefore of immense
engineering, scientiﬁc and societal interest.
On a more local scale, knowledge of interdomain trafﬁc vol-
umes has great value for business intelligence. Consider an
ISP that is pondering a bid for a competitor’s customer. That
ISP has a signiﬁcant advantage if it knows how much busi-
ness the competitor currently does with the customer (i.e., how
much trafﬁc they exchange), and how the customer’s trafﬁc
would impact the ISP’s network should the customer change
providers.
Unfortunately, broad knowledge of interdomain trafﬁc vol-
umes on the Internet is hard to come by. The inherently dis-
tributed architecture of the AS-level Internet means that there
is no single place where all Internet-wide trafﬁc can be mea-
sured, and the competitive relationship of the commercial In-
ternet means that sharing such information across organiza-
tional boundaries is unlikely. The authors in [10] review the
situation and note that an inter-AS trafﬁc matrix is an “elusive
object.”
Hence we are prompted to turn to statistical inference where
direct measurement is impossible. The problem can be cast
in terms of a trafﬁc matrix – measurements of trafﬁc volume
from sources (rows) to destinations (columns). Any given AS
can observe some of the elements of this matrix – namely, ex-
actly the trafﬁc that ﬂows through the AS. Can an AS ever
‘ﬁll in’ the missing entries (corresponding to trafﬁc not ﬂow-
ing through the AS) thereby ‘completing’ the matrix? Doing
so would give the AS a view of a much larger set of trafﬁc
volumes, or even of trafﬁc volumes across the entire Internet.
Surprisingly, recent work has suggested that in some cases,
a single AS can complete at least some of the missing portions
of its trafﬁc matrix [2, 27]. The general idea (described in de-
tail in Section 2) is as follows. The ﬁrst step is to note that traf-
ﬁc matrix elements show strong statistical regularities. There
are predictable relationships between elements, such that miss-
ing elements can often be cast in terms of linear functions of
observable elements. One way of describing this phenomenon
is to note that trafﬁc matrices often have low effective rank
(which we deﬁne in Section 2). The second step is to apply
methods of statistical inference that are recently emerging in
the signal processing community, termed matrix completion.
These methods are speciﬁcally designed to perform missing-
element inference on matrices that have low effective rank. A
wide variety of such methods have now been developed [3, 4,
5, 17, 25].
The key to matrix completion is the ability to observe a
sufﬁciently useful subset of the matrix entries. If enough en-
399tries, in the right positions, can be observed, the rest of the
entries can be ‘ﬁlled in.’ In the context of interdomain traf-
ﬁc matrices, this question relates to the network’s AS-level
connectivity and routing patterns. Some ASes, by virtue of
their topological position and commercial roles, may observe
enough trafﬁc passing through their networks to allow them to
infer trafﬁc volumes not passing through their networks. Ini-
tial studies have shown existence proofs that such inference
is possible [2, 27]. The question is – for whom? For which
ASes is trafﬁc matrix completion most likely to be successful?
And, for those ASes that can infer some TM elements, which
elements can they infer?
Those questions are the focus of this paper. We seek to un-
derstand which ASes are likely to be able to perform TM com-
pletion, which elements they can infer, and why. We seek to
answer these questions from two standpoints: from an analyt-
ical standpoint, we look for graph-theoretic properties of the
AS topology that lead to increased trafﬁc inference ability for
an AS. And from a practical standpoint, we look to answer to
these questions in terms of metrics that relate to an ISP’s busi-
ness and engineering relationships – e.g., how many customers
and peering links it has.
To do so, we provide a framework for analyzing the infer-
ence capability of a given AS based on its position in the AS
graph and the set of paths that pass through it. This is the ﬁrst
contribution of our paper, and is independently useful, for ex-
ample, when an individual AS seeks to evaluate its own infer-
ence capability. However, once having developed this frame-
work, our second contribution is to apply the framework to a
large AS graph to investigate actual ASes and their TMs.
The ﬁrst stage of our work explores the relationship between
TM completion ability and certain idealized graph models. We
develop an algorithm that allows us to prove a lower bound on
TM completion ability, and using it we gain insight into how
TM completion ability relates to local graph topology.
The second stage of our work brings realistic routing into
the picture. For this we rely on an extensive survey of the AS-
level Internet, comprising over 100 million AS paths, captured
at a single time. This rich dataset allows us to explore how
TM completion ability varies over the set of all ASes in the
Internet.
Finally, the third stage of our work applies actual matrix
completion to realistic TMs across ASes in the Internet. For
each AS we evaluate its accuracy when completing a TM com-
prising about 30 million elements, of which between 0.001%
and 0.3% are actually visible to the AS, depending on the set
of AS paths that ﬂow through it.
The three stages of our effort mutually support our primary
conclusions. We ﬁnd that the key to TM inference ability
lies in the set of customers of an AS. Our analysis and mea-
surements show that an AS’s customers provide the AS with
crucial knowledge of interdomain trafﬁc ﬂows needed for TM
completion. When asking which ﬂows are most readily es-
timated, we ﬁnd that the closer a ﬂow passes to an AS in the
BGP graph, the more readily it may be estimated; and when an
AS seeks to speciﬁcally recover the entries of ﬂows that pass
through another AS, it is most successful when the other AS
is a neighbor – especially, when the other AS is a customer.
2. BACKGROUND & RELATED WORK
2.1 Deﬁnitions
A trafﬁc matrix (TM) is an m ×n matrix T in which Tij is a
measure of the trafﬁc ﬂowing from a set of IP addresses Si to
a set of IP addresses Dj during a speciﬁc time interval. At any
moment, the view of a network P consists of all the source-
destination pairs (s,d) such that any trafﬁc ﬂowing from s to
d will at some point pass through P. A network’s view can
be captured in the form of an m ×n visibility matrix M, where
Mij = 1 if trafﬁc from Si to Dj passes through P, and zero
otherwise.
A key property for trafﬁc matrices in our work is low ef-
If an m × n matrix T can be factored into an
fective rank.
m ×d matrix X and a d ×n matrix Y, such that XY = T, then
T has rank (no greater than) d.
If d " min(m,n) then we
say T has low rank. When working with measurement data,
a matrix T may be strictly speaking full rank, but nonetheless
well-approximated by a low-rank matrix. That is, if there ex-
ists a rank d matrix T # such that T ≈ T #, we say that T has low
effective rank. For example, we may use a least-squares crite-
rion: T ≈ T # if ∑i,j(Tij −T #ij)2/∑i,j T2
ij is small enough. Low
rank is important because it means that elements of T are re-
lated; only a small amount of information (X and Y) is needed
to construct T, so some elements of T can be computed as
linear functions of other elements. Likewise, if a matrix has
low effective rank, then some elements can be approximated
as linear functions of other elements.
In this work, TMs will be organized as either node-to-node
TMs (in our idealized examples in Section 3) or AS-to-preﬁx
TMs (when using real topologies in Sections 4 and 5).
2.2 Properties of Trafﬁc Matrices
Our work deals with large-scale inference of trafﬁc matrices
that span ASes. While an interdomain TM remains an “elusive
object” [10], a few previous studies have built models of in-
terdomain trafﬁc. The work described in [13] estimates Web-
related interdomain trafﬁc, using server logs from a large CDN
provider. The work described in [8] brings more AS-speciﬁc
information to the table, including business relationship, pop-
ulation size, and AS role, and fuses this information to form
estimates of interdomain trafﬁc volume. These models and
methods inform our work, but the focus of our work is not ex-
plicitly on modeling TMs. Rather, we only assume that TMs
show low effective rank.
Indeed, there is considerable evidence that trafﬁc matrices
often show low effective rank. In [19], the authors document
low effective rank in measurements of temporal trafﬁc matri-
ces, in which each column is a time-series of the trafﬁc vol-
ume between a source-destination pair.
In [2], the authors
present a similar result for measurements of spatial trafﬁc ma-
trices, in which the rows represent the sources and the columns
represent the destinations (as do the matrices in this paper).
More generally, trafﬁc matrix modeling often assumes that
TMs have low effective rank. The often-used gravity models
are rank-1 models; such models have been used, for example,
in [9, 20, 22, 23, 26]. Likewise, the authors in [12] show that a
rank-2 model is a good ﬁt to measured TMs. Finally, a number
of papers have explicitly relied on the property of low effective
rank in TMs as the basis for their results [2, 18, 27].
In this paper we start from the assumption that TMs show
400low effective rank. However, we do not assume that TMs have
any particular effective rank; our analyses and experiments
treat matrix rank k as a parameter.
2.3 Trafﬁc Matrix Completion
Our paper applies ideas from matrix completion to trafﬁc at
the AS level. Matrix completion is a relatively new area in sta-
tistical inference with a number of recent results [5, 17]. The
matrix completion problem consists of recovering a low-rank
matrix from a subset of its entries. Let the m ×n matrix T hav-
ing rank k " min(m,n) be unknown, except for a subset of its
entries Ω which are known. If the set Ω contains enough infor-
mation, and T meets a condition called incoherence, then there
is a unique rank-k matrix that is consistent with the observed
entries.
Recently, a variety of algorithms have been proposed that
solve the matrix completion problem under various assump-
tions [3, 4, 5, 17, 25]. These algorithms are typically analyzed
under the assumption that the locations of the known entries of
T are distributed uniformly at random across the matrix. How-
ever, matrix completion can be possible when the location of
entries are not uniformly spread across the matrix. In partic-
ular, the algorithm in [21] does not assume uniformly spread
entries, and furthermore has a more general capability. Rather
than focusing exclusively on matrix completion, it can also be
used to identify which elements of a matrix can be recovered,
even when full completion is not possible. It is this property
of the algorithm that we make use of in our work. We review
this algorithm and our use of it in the next subsection.
Given the tendency for trafﬁc matrices to show low effec-
tive rank, a number of authors have applied matrix completion
to different types of TMs. In particular, the authors in [27]
develop algorithms for accurately recovering missing values
(due to measurement failures) in intra domain TMs in which
the sources and destinations are in the observer’s network.
And in the study mentioned previously, the authors in [2] de-
velop methods for inferring trafﬁc volumes for trafﬁc that does
not pass through the observer’s network, and hence cannot be
measured. In [2], the authors show that a network P can infer
the trafﬁc that does not ﬂow through P but ﬂows through its di-
rect customer network T. However [2] only demonstrates this
for one particular pair of networks and does not give insight
into when TM completion is possible in general. In contrast,
our paper asks the broader question - what relationship should
P and T have in order for TM completion to be successful.
2.4
To analyze the ability of an AS to perform matrix comple-
tion, we adopt a particular algorithm from the matrix com-
pletion literature called Information Cascading Matrix Com-
pletion (ICMC) [21]. ICMC can be applied to matrices that
are exactly low-rank, or approximately low-rank; for simplic-
ity in the description below we describe it as applied to an
exactly low-rank matrix. However extensions to deal with ap-
proximately low-rank matrices are not difﬁcult, as described
in [21].
We use ICMC as a tool for exploring the TM completion
ability of ASes. The advantage of using ICMC as compared to
other matrix completion algorithms is that it identiﬁes which
matrix elements can deﬁnitely be recovered in a given setting.
That is how we use it in this Section and Sections 4 and 5.
However, not all matrix completion algorithms work in this
ICMC and AICMC
elementwise, all-or-nothing fashion; other algorithms try to
form estimates of all missing elements. Hence we conﬁrm
our results by using a different matrix completion algorithm in
Section 6.
ICMC assumes that the m×n matrix T having rank k is non-
degenerate, meaning that T can be factored into the matrices
X ∈ Rm×k and Y ∈ Rk×n such that any k rows of X are linearly
independent, any k columns of Y are linearly independent, and
XY = T. The basic idea of ICMC is to progressively compute
rows of X and columns of Y so that (XY )ij = Tij, ∀(i, j) ∈ Ω.
In fact, our goal in this paper is not performing matrix com-
pletion per se, but rather identifying whether and when matrix
completion is possible. Hence we employ ICMC in a manner
we refer to as abstract ICMC, or AICMC.
AICMC may be expressed in terms of operations on a bipar-
tite graph, as shown in Figure 1. The graph consists of two sets
of vertices, U = {ui,i = 1, . . . ,m} and V = {vj, j = 1, . . .n}.
An edge exists between ui and vj if (i, j) ∈ Ω; otherwise no
edge exists. Thus there is a correspondence between vertex ui
and row i of X; and there is a correspondence between vertex
vj and column j of Y.
AICMC progresses by successively marking vertices as ‘in-
fected,’ which means that the corresponding row of X or col-
umn of Y can be recovered. The set L consists of infected u
vertices, and R consists of infected v vertices. Infection propa-
gates through the graph: vj can be infected if there are at least
k edges from vj to vertices in L. Analogously, infecting ui re-
quires at least k edges from ui to vertices in R. When no more
nodes can be infected, the set L identiﬁes the rows of X that
can be recovered, and R identiﬁes the recoverable columns of
Y. The authors in [21] prove the correctness of this process for
recovering X and Y.
Figure 1 shows an example visibility matrix and correspond-
ing bipartite graph. This process is shown in the ﬁgure for
k = 1. Starting with infected vertex u1, each step progres-
sively infects nodes on alternating sides of the bipartite graph.
While in this case the ﬁnal set of infected nodes corresponds to
the largest connected component, note that for k > 1 the ﬁnal
set of infected nodes is not necessarily the largest connected
component.
To start the algorithm, one notes that the solution X,Y is not
unique, and hence without loss of generality the algorithm can
be initiated by setting any k rows of X to the k × k identity
matrix, and marking the corresponding k vertices as infected
(forming the initial population of the set L). Beginning from
this initial set of infected nodes, the algorithm proceeds by
alternately adding to the sets R and L. When these sets contain
all vertices in the graph, the entire matrix is recovered at rank
k.
That said, one can set aside the graph interpretation and ex-
press AICMC simply in terms of an observer’s visibility ma-
trix M. Note that Mij = 1 iff (i, j) ∈ Ω. AICMC proceeds as
follows
1. Choose k rows of M and set L to those rows.
2. If L contains all rows of M and R contains all columns
of M, stop - the matrix T can be fully recovered. Other-
wise:
(a) For every column of M such that there are at least
k 1s in rows from set L, add the column to R. If
there are no such columns, stop.
401ϭ
ϭ