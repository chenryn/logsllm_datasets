0 0.43 2
t(s)
9.89
1.90
19.9
2.33
0.53
1.32
0.27
6.74
3.27
0.81
0.01
performs on other codebases, we consider PostgreSQL,
a popular database used by many applications. For this
database system, we treat the primary keys (identiﬁers for
records in a database) as sensitive, since they are commonly
account numbers, social security numbers, etc.
The entire PostgreSQL contains over 1 million lines
of code. We narrowed down the scope to a set of
functions that process likely sensitive data. In particular,
we investigated the binary tree implementation under the
/src/backend/nbtree directory. Under this directory,
there are 16 functions that use the primary key of a record.
Of those 16, 7 pass the key onto other functions without
processing it. Therefore, we evaluate on the remaining 9
functions which actually process the primary keys. The
functions are: advance arrays keys, binsrch, compare, ﬁnd
xtreme element, heap key test, is equal, mark array keys,
sort array keys, and start array keys.
A. Evaluation for access-based attackers
Recall that an access-based attacker observes only the
ﬁnal cache state of the victim program. Therefore, CaSym
performs the veriﬁcation-condition check only at the end of
each benchmark. We evaluated benchmarks based on the two
abstract cache models: the inﬁnite model and the age model
(we will compare the abstract cache models with concrete
cache models in Section IX-D).
Cryptography Benchmarks: Table I presents the results
on cryptography benchmarks. We note that we have removed
preloading that is present in the original AES and triple-DES
code; we will report separately the results when it is present.
UFC and DES in glibc do not use preloading.
From the table, we observe that CaSym can ﬁnish side-
channel checking rather quickly for most of the cases: all
checks under the inﬁnite cache model ﬁnish under 1 second;
those under the age mode are slower, but all ﬁnish in about 2
minutes. Moreover, we note that the optimistic inﬁnite cache
model gives exactly the same result as the more conservative
age model.
The side channels reported for the two AES, two triple-
DES and one DES implementations are due to key-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
dependent array accesses (we discuss examples in the
next section). Side channels are also reported for
the
three modular-exponentiation algorithms, since they contain
secret-dependent branches (examples in the next subsection).
These are previously known side channels and CaSym
conﬁrms their presence.
We note that DES-glibc contains a side channel
that
was newly found by CaSym; it results from key-dependent
memory accesses to a lookup table that was not preloaded
(key is the private key):
t=rˆkey[i + 1]; ...
lˆ= des_SPtrans[1][(t)&0x3f]| ...;
UFC-glibc is the only benchmark that is side channel free
with respect to the cache without extra security mechanisms.
This is because it does not use any precomputed table and
is virtually straight line code. It illustrates how different
techniques can avoid side channels.
Database Benchmarks: Table II presents the results on
the 9 functions we analyzed for an access based attacker.
Consistent with the results on cryptography benchmarks,
analysis based on the inﬁnite cache model is more efﬁcient:
on average, the age model takes over 100 times longer. Also,
most of the functions that we test are potentially vulnerable
to side channel attacks (examples in the next subsection).
Interestingly,
there are two functions (binsrch & ﬁnd
xtreme element) in which the inﬁnite cache model missed
two positives reported by the age model. The cause is a key
dependent branch which accesses different locations but they
were previously used, and thus already in the cache. This
example demonstrates the difference of those two abstract
models: the inﬁnite cache model is optimistic (that is, it
optimistically assumes that the loaded memory locations
were not evicted before the sensitive branch), while the
age model is pessimistic (that is, it pessimistically assumes
that the loaded memory locations were evicted before the
sensitive branch).
B. Evaluation for trace-based attackers
Recall that a trace-based attacker can observe the inter-
mediate cache states of the victim program. For each bench-
mark, we ran CaSym to perform a check on the symbolic
state after every statement (following a topological order
of the program’s control-ﬂow graph); CaSym then stopped
at the ﬁrst point where a side-channel was found. Since
CaSym’s error reporting includes the source line number
where the side channel is, we then went to that line and ﬁxed
the problematic statement, as described in Section VII-B.
Then we applied CaSym on the ﬁxed program to ﬁnd the
next side channel. Through this iterative process, we were
able to ﬁnd a set of independent side channels in each
benchmark.
Cryptography Benchmarks: Table I reports the number
of side channels identiﬁed on the cryptography benchmarks.
Similar to the results for access-based attacks, we found that
(cid:22)(cid:18)(cid:24)
the inﬁnite cache model is more efﬁcient than the age model,
while they provide very close results (we discuss the only
difference in sqr-alwys-mul shortly).
We inspected the error-reporting results and manually
conﬁrmed that for all cases, CaSym localized the side chan-
nels to the right lines and also conﬁrmed that all reported
side channels are true side channels. It was a surprising result
considering that CaSym’s symbolic execution approximates
a program’s behavior, for example, when the program reads
from arrays; also our loop transformation could also intro-
duce false positives.
Next, we take a closer look at the positives. The side
channels CaSym found in symmetric ciphers are due to
the sbox tables being indexed by key-dependent variables
in all AES/DES implementations. Below is a representative
example from the AES Libgcrypt benchmark where encT
is the encryption table and the array index sa[0] is derived
from the key.
sa[0] = sb[0] ˆ key[0][0];
... encT[sa[0] >> (0 * 8)] ...
The reason why the number of side channels for symmet-
ric ciphers are high is because they contain multiple lines of
code following the same sbox table access pattern as above.
For the three modular exponentiation algorithms imple-
mented in Libgcrypt, CaSym found multiple side channels.
The side channels are due to either array accesses indexed
by the exponent bits or branches whose outcome depends
on a key. A similar situation happens for the left-to-right
algorithm (LR-mod-expo gcry). A simpliﬁed code snippet
that depicts the issue can be found in Listing 1.
if (c >= W) // c is tainted by the key
c0 = 0;
else {
e0 = (e >> (BITS_PER_MPI_LIMB - c));
j += c - W; }
Listing 1: LR-mod-expo Example
Interestingly, we notice that CacheD [11] reports no
side channels in Libgcrypt 1.7.3. The reason is two fold.
First, two algorithms (sqr-alwys-mul gcry and sqr-mul gcry)
are not used in the default conﬁguration of Libgcrypt.
Since CacheD [11] only explores side channels exhibited
in an execution trace, side channels in those algorithms
are missed. Second, CacheD [11] does not detect side
channels due to secret-dependent branches (e.g., the side
channels in the code snippet above), since it detects cache
difference only for executions that follow the same control
ﬂow. The example in Listing 1 conﬁrms that CaSym avoids
the coverage issue of CacheD.
To assess false negatives, we treat the trace-based age
model result as the ground truth, since under this model,
no positive implies no cache-based side channel on most
realistic caches (Property 2). Based on the results, the only
case where the inﬁnite cache model had a false negative
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
was for the square and always multiply implementation. The
relevant code snippet can be found in Listing 2.
res = res * res; res = res % mod;
temp = res * base; temp = temp % mod;
if (((1 sk_subtype;
if (elemtype == InvalidOid) {
elemtype = rd_opcintype[skey->sk_attno - 1];
}· · ·
last_non_dup = 0;
for (i = 1; i sk_func,
scankey->sk_collation, datum,
scankey->sk_argument));
if (result != 0) // result is tainted
return false; // early exit
scankey++;}
Listing 4: A True Postive in PostgreSQL
Based on the inﬁnite cache model, our analysis was
able to detect 20 unique newly found locations in the
source code which could leak information to an attacker
about a database key. These 20 reported locations contain
both secret-dependent array accesses and secret-dependent
branches. The former usually happens when a variable is
tainted by the primary key and then used as an index in an
array. The code snippet shown in Listing 4 shows a common
(cid:22)(cid:18)(cid:25)
Preloading
Inﬁnite
Age
Pinning
Inﬁnite
Age
Benchmarks
TP FP t(s) TP FP t(s) TP FP t(s) TP FP t(s)
0
0 13.6
AES gcry
0 9.60
0
AES mbed
0 1.53
triple-DES gcry
0
0 1.70
triple-DES mbed 0
DES glibc
0
0 1.79
0 2.95 64 0 17.4
0 1.68 17 0 17.4
0 84.0 128 0 170
0 1.53 48 0 65.5
0 0.56 2
0 3.15
0 4.02 0
0 2.00 0
0 0.61 0
0 0.03 0
0 0.51 0
0
0
0
0
0
Table III: Evaluation results for symmetric ciphers with table
preloading and pinning for trace-based attackers.
pattern of a key-dependent branch in PostgreSQL.
The age model was able to detect even more positives
in the benchmarks, ﬁnding 5 new potential vulnerabilities.
This model found more locations since it considers temporal
differences of when memory locations can be placed into the
cache. Even though this model is more conservative, we see
that it does not introduce any new false positives in our
experiments.
C. Fixing side channels
We next discuss our experience of ﬁxing the side channels
that were discovered in the previous experiments. In sym-
metric ciphers, one common strategy to avoid side channels
resulting from key-dependent table lookups is to preload
their sbox tables. To support that, our LLVM implementation
supports a special PRELOAD attribute, which can be used
by programmers to annotate their source code to specify
what variables or arrays should be preloaded at the start
of execution. A preloaded variable/array means that it is
initially in the cache. We used this attribute to annotate our
symmetric-cipher benchmarks and reevaluated them using
CaSym. Table III presents the results of performing preload-
ing in symmetric ciphers for trace-based attackers. We
did not evaluate preloading/pinning for asymmetric cipher
benchmarks since other techniques (e.g. scatter/gather) are
used to secure them [13]. Also, we did not include the UFC
implementation since it is already side channel free.
As expected, Table III shows that preloading is sufﬁcient
to eliminate the side channels in the inﬁnite cache model:
after the sbox tables are preloaded, they always stay in the
cache and the following key-dependent table accesses will
not change the cache state. For the age model, side channels
still exist since the age model tracks the ordering of memory
accesses; the preloading at the beginning will not change the
ordering of memory accesses in the following execution.
As we have discussed, another strategy for ﬁxing side
channels is to pin some data in the cache. We also imple-
mented a special attribute for programmers to specify what
variables/arrays should be pinned into the cache. Table III
presents the results of performing pinning of tables in
symmetric ciphers for trace-based attackers. It shows that
all side channels disappear with this ﬁx, across all cache
models. When cache entries are pinned to the cache, they
are never evicted; therefore, CaSym does not update the ages
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
Benchmarks
w/o Preloading
AES gcry
AES mbed
triple-DES gcry
triple-DES mbed
DES glibc
UFC glibc
sqr-alwys-mul gcry
sqr-mul gcry
LR-mod-expo gcry
(cid:2)
Access
(cid:3)(cid:4)
LRU
timeout
timeout
1654
8531
1044
(cid:3) 0.09
2.64
2.19
23.45
(cid:5)
(cid:2)
Trace
(cid:3)(cid:4)
(cid:5)
LRU
t(s)
635
757
54.3
803
9.20
5.35