### Saving Changes and Configuring Client Scopes

The scopes utilized in the examples throughout this book include:
- `create_space`
- `post_message`
- `read_message`
- `list_messages`
- `delete_message`
- `add_member`

After creating the client, you will be directed to the advanced client properties page. This page contains numerous properties, but most of them are not critical. Ensure that the client is allowed to use all the authorization grant types covered in this book.

To configure the grant types, follow these steps:
1. Click on the **Advanced** tab at the top of the page.
2. Click inside the **Grant Types** field as shown in Figure A.5.
3. Add the following grant types to the field:
   - **Authorization Code**
   - **Resource Owner Password Credentials**
   - **Client Credentials**
   - **Refresh Token**
   - **JWT Bearer**
   - **Device Code**
4. Click **Save Changes**.

**Figure A.5: Configuring Grant Types for the Client**

### Verifying the Configuration

To verify that everything is working correctly, you can obtain an access token for the client by running the following `curl` command in a terminal:

```bash
curl -d 'grant_type=client_credentials&scope=openid' \
  -u test:password http://as.example.com:8080/oauth2/access_token
```

You should receive output similar to the following:

```json
{
  "access_token": "MmZl6jRhMoZn8ZNOXUAa9RPikL8",
  "scope": "openid",
  "id_token": "eyJ0eXAiOiJKV1QiLCJraWQiOiJ3VTNpZklJYUxPVUFSZVJCL0ZHNmVNMVAxUU09IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoiTXF2SDY1NngyU0wzc2dnT25yZmNkZyIsInN1YiI6InRlc3QiLCJhdWRpdFRyYWNraW5nSWQiOiIxNDViNjI2MC1lNzA2LTRkNDctYWVmYy1lMDIzMTQyZjBjNjMtMzg2MTkiLCJpc3MiOiJodHRwOi8vYXMuZXhhbXBsZS5jb206ODA4MC9vYXV0aDIiLCJ0b2tlbk5hbWUiOiJpZF90b2tlbiIsImF1ZCI6InRlc3QiLCJhenAiOiJ0ZXN0IiwiYXV0aF90aW1lIjoxNTgxMzc1MzI1LCJyZWFsbSI6Ii8iLCJleHAiOjE1ODEzNzg5MjYsInRva2VuVHlwZSI6IkpXVFRva2VuIiwiaWF0IjoxNTgxMzc1MzI2fQ.S5Ib5Acj5hZ7se9KvtlF2vpByG_0XAWKSg0-Zy_GZmpatrox0460u5HYvPdOVl7qqP-AtTV1ah_2aFzX1qN99ituo8fOBIpKDTyEgHZcxeZQDskss1QO8ZjdoE-JwHmzFzIXMU-5u9ndfX7-Wu_QiuzB45_NsMi72ps9EP8iOMGVAQyjFG5U6jO7jEWHUKI87wrv1iLjaFUcG0H8YhUIIPymk-CJUgwtCBzESQ1R7Sf-6mpVgAjHA-eQXGjH18tw1dRneq-kY-D1KU0wxMnw0GwBDK-LudtCBaETiH5T_CguDyRJJotAq65_MNCh0mhsw4VgsvAX5Rx30FQijXjNw",
  "token_type": "Bearer",
  "expires_in": 3599
}
```

### Installing an LDAP Directory Server

An LDAP directory server is required for some of the examples in Chapter 8.

**Tip:**
- **Apache Directory Studio** is a useful tool for browsing LDAP directories. It can be downloaded from [https://directory.apache.org/studio/](https://directory.apache.org/studio/).

#### ForgeRock Directory Services

If you have installed ForgeRock AM using the instructions in Section A.3.1, you already have an LDAP directory server running on port 50389. This is what AM uses as its internal database and user repository. You can connect to the directory using the following details:
- **URL:** `ldap://localhost:50389/`
- **Bind DN:** `cn=Directory Manager`
- **Bind password:** The admin password you specified when installing AM

### Setting Up Kubernetes

The example code in Chapters 10 and 11 requires a working Kubernetes installation. In this appendix, you will find instructions on setting up a Kubernetes development environment on your own laptop or desktop.

#### MacOS

Although Docker Desktop for Mac comes with a functioning Kubernetes environment, the examples in the book have only been tested with Minikube running on VirtualBox. Therefore, it is recommended to install these components to ensure compatibility.

**Note:**
- The instructions in this appendix assume you have installed Homebrew. Follow the instructions in Appendix A to configure Homebrew before proceeding.
- These instructions require MacOS 10.12 (Sierra) or later.

##### VirtualBox

Kubernetes uses Linux containers as the units of execution on a cluster. For other operating systems, you need to install a virtual machine to run a Linux guest environment. The examples have been tested with Oracle’s VirtualBox, which is a freely available virtual machine that runs on MacOS.

**Note:**
- Although the base VirtualBox package is open source under the terms of the GPL, the VirtualBox Extension Pack uses different licensing terms. See [https://www.virtualbox.org/wiki/Licensing_FAQ](https://www.virtualbox.org/wiki/Licensing_FAQ) for details.
- None of the examples in the book require the extension pack.

You can install VirtualBox either by downloading an installer from the VirtualBox website or by using Homebrew with the following command:

```bash
brew cask install virtualbox
```

**Note:**
- After installing VirtualBox, you may need to manually approve the installation of the kernel extension it requires to run. Follow the instructions on Apple’s website: [http://mng.bz/5pQz](http://mng.bz/5pQz).

##### Minikube

Once VirtualBox is installed, you can install a Kubernetes distribution. Minikube is a single-node Kubernetes cluster that you can run on a developer machine. You can install Minikube using Homebrew with the following command:

```bash
brew install minikube
```

Afterward, configure Minikube to use VirtualBox as its virtual machine by running:

```bash
minikube config set vm-driver virtualbox
```

Start Minikube by running:

```bash
minikube start --kubernetes-version=1.16.2 --memory=4096
```

**Tip:**
- A running Minikube cluster can use a lot of power and memory. Stop Minikube when you are not using it by running `minikube stop`.

Installing Minikube with Homebrew will also install the `kubectl` command-line application required to configure a Kubernetes cluster. You can check that it is installed correctly by running:

```bash
kubectl version --client --short
```

You should see output like the following:

```bash
Client Version: v1.16.3
```

If `kubectl` cannot be found, make sure that `/usr/local/bin` is in your PATH by running:

```bash
export PATH=$PATH:/usr/local/bin
```

You should then be able to use `kubectl`.

#### Linux

Although Linux is the native environment for Kubernetes, it is still recommended to install Minikube using a virtual machine for maximum compatibility. For testing, I have used VirtualBox on Linux, so that is the recommended option.

##### VirtualBox

VirtualBox for Linux can be installed by following the instructions for your Linux distribution at [https://www.virtualbox.org/wiki/Linux_Downloads](https://www.virtualbox.org/wiki/Linux_Downloads).

##### Minikube

Minikube can be installed by direct download with the following command:

```bash
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && sudo install minikube-linux-amd64 /usr/local/bin/minikube
```

Afterward, configure Minikube to use VirtualBox by running:

```bash
minikube config set vm-driver=virtualbox
```

Follow the instructions at the end of Section B.1.2 to ensure Minikube and `kubectl` are correctly installed.

**Tip:**
- If you want to install Minikube using your distribution’s package manager, see the instructions at [https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start) and click on the Linux tab for various distributions.

#### Windows

##### VirtualBox

VirtualBox for Windows can be installed using the installer file from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).

##### Minikube

A Windows installer for Minikube can be downloaded from [https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe](https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe). Follow the on-screen instructions after downloading and running the installer.

Once Minikube is installed, open a terminal window and run:

```bash
minikube config set vm-driver=virtualbox
```

to configure Minikube to use VirtualBox.