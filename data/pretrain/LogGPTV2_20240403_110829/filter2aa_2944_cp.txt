Save Changes. The scopes that are used in the examples in this book are
create_space, post_message, read_message, list_messages, delete_message,
and add_member.
After you’ve created the client, you’ll be taken to the advanced client properties page.
There are a lot of properties! You don’t need to worry about most of them, but you
should allow the client to use all the authorization grant types covered in this book.
Click on the Advanced tab at the top of the page, and then click inside the Grant
Types field on the page as shown in figure A.5. Add the following grant types to the
field and then click Save Changes:
■
Authorization Code
■
Resource Owner Password Credentials
■
Client Credentials
■
Refresh Token
■
JWT Bearer
■
Device Code
Figure A.5
Click on the Advanced tab and then in the Grant Types field to configure the allowed grant 
types for the client.
531
Installing an LDAP directory server
You can check that everything is working by getting an access token for the client by
running the following curl command in a terminal:
curl -d 'grant_type=client_credentials&scope=openid' \
  -u test:password http://as.example.com:8080/oauth2/access_token
You’ll see output like the following:
{"access_token":"MmZl6jRhMoZn8ZNOXUAa9RPikL8","scope":"openid","id_token":"ey
J0eXAiOiJKV1QiLCJraWQiOiJ3VTNpZklJYUxPVUFSZVJCL0ZHNmVNMVAxUU09IiwiYWxnIjoiUlM
yNTYifQ.eyJhdF9oYXNoIjoiTXF2SDY1NngyU0wzc2dnT25yZmNkZyIsInN1YiI6InRlc3QiLCJhd
WRpdFRyYWNraW5nSWQiOiIxNDViNjI2MC1lNzA2LTRkNDctYWVmYy1lMDIzMTQyZjBjNjMtMzg2MT
kiLCJpc3MiOiJodHRwOi8vYXMuZXhhbXBsZS5jb206ODA4MC9vYXV0aDIiLCJ0b2tlbk5hbWUiOiJ
pZF90b2tlbiIsImF1ZCI6InRlc3QiLCJhenAiOiJ0ZXN0IiwiYXV0aF90aW1lIjoxNTgxMzc1MzI1
LCJyZWFsbSI6Ii8iLCJleHAiOjE1ODEzNzg5MjYsInRva2VuVHlwZSI6IkpXVFRva2VuIiwiaWF0I
joxNTgxMzc1MzI2fQ.S5Ib5Acj5hZ7se9KvtlF2vpByG_0XAWKSg0-
Zy_GZmpatrox0460u5HYvPdOVl7qqP-
AtTV1ah_2aFzX1qN99ituo8fOBIpKDTyEgHZcxeZQDskss1QO8ZjdoE-JwHmzFzIXMU-5u9ndfX7-
-Wu_QiuzB45_NsMi72ps9EP8iOMGVAQyjFG5U6jO7jEWHUKI87wrv1iLjaFUcG0H8YhUIIPymk-
CJUgwtCBzESQ1R7Sf-6mpVgAjHA-eQXGjH18tw1dRneq-kY-D1KU0wxMnw0GwBDK-
LudtCBaETiH5T_CguDyRJJotAq65_MNCh0mhsw4VgsvAX5Rx30FQijXjNw","token_type":"Bea
rer","expires_in":3599}
A.4
Installing an LDAP directory server
An LDAP directory server is needed for some of the examples in chapter 8.
TIP
Apache Directory Studio is a useful tool for browsing LDAP directories.
It can be downloaded from https://directory.apache.org/studio/.
A.4.1
ForgeRock Directory Services
If you’ve installed ForgeRock AM using the instructions in section A.3.1, you already
have an LDAP directory server running on port 50389, because this is what AM uses as
its internal database and user repository. You can connect to the directory using the
following details:
■
URL: ldap:/ /localhost:50389/
■
Bind DN: cn=Directory Manager
■
Bind password: the admin password you specified when installing AM
532
appendix B
Setting up Kubernetes
The example code in chapters 10 and 11 requires a working Kubernetes installa-
tion. In this appendix, you’ll find instructions on installing a Kubernetes develop-
ment environment on your own laptop or desktop.
B.1
MacOS
Although Docker Desktop for Mac comes with a functioning Kubernetes environ-
ment, the examples in the book have only been tested with Minikube running on
VirtualBox, so I recommend you install these components to ensure compatibility.
NOTE
The instructions in this appendix assume you have installed Home-
brew. Follow the instructions in appendix A to configure Homebrew before
continuing.
The instructions require MacOS 10.12 (Sierra) or later.
B.1.1
VirtualBox
Kubernetes uses Linux containers as the units of execution on a cluster, so for other
operating systems, you’ll need to install a virtual machine that will be used to run a
Linux guest environment. The examples have been tested with Oracle’s VirtualBox
(https://www.virtualbox.org), which is a freely available virtual machine that runs
on MacOS.
NOTE
Although the base VirtualBox package is open source under the
terms of the GPL, the VirtualBox Extension Pack uses different licensing
terms. See https://www.virtualbox.org/wiki/Licensing_FAQ for details.
None of the examples in the book require the extension pack. 
533
Linux
You can install VirtualBox either by downloading an installer from the VirtualBox
website, or by using Homebrew by running:
brew cask install virtualbox
NOTE
After installing VirtualBox you may need to manually approve the
installation of the kernel extension it requires to run. Follow the instructions
on Apple’s website: http://mng.bz/5pQz.
B.1.2
Minikube
After VirtualBox is installed you can install a Kubernetes distribution. Minikube
(https://minikube.sigs.k8s.io/docs/) is a single-node Kubernetes cluster that you can
run on a developer machine. You can install Minikube using Homebrew by running:
brew install minikube
Afterward, you should configure Minikube to use VirtualBox as its virtual machine by
running the following command:
minikube config set vm-driver virtualbox
You can then start minikube by running
minikube start \
  --kubernetes-version=1.16.2 \    
  --memory=4096         
TIP
A running Minikube cluster can use a lot of power and memory. Stop
Minikube when you’re not using it by running minikube stop.
Installing Minikube with Homebrew will also install the kubectl command-line appli-
cation required to configure a Kubernetes cluster. You can check that it’s installed cor-
rectly by running:
kubectl version --client --short
You should see output like the following:
Client Version: v1.16.3
If kubectl can’t be found, then make sure that /usr/local/bin is in your PATH by
running:
export PATH=$PATH:/usr/local/bin
You should then be able to use kubectl.
B.2
Linux
Although Linux is the native environment for Kubernetes, it’s still recommended to
install Minikube using a virtual machine for maximum compatibility. For testing, I’ve
used VirtualBox on Linux too, so that is the recommended option.
The version of Kubernetes 
used in the book
Use 4GB of memory.
534
APPENDIX B
Setting up Kubernetes
B.2.1
VirtualBox
VirtualBox for Linux can be installed by following the instructions for your Linux dis-
tribution at https://www.virtualbox.org/wiki/Linux_Downloads.
B.2.2
Minikube
Minikube can be installed by direct download by running the following command:
curl \
  -LO https://storage.googleapis.com/minikube/releases/latest/
➥ minikube-linux-amd64 \
   && sudo install minikube-linux-amd64 /usr/local/bin/minikube
Afterward, you can configure Minikube to use VirtualBox by running:
minikube config set vm-driver=virtualbox
You can then follow the instructions at the end of section B.1.2 to ensure Minikube
and kubectl are correctly installed.
TIP
If you want to install Minikube using your distribution’s package man-
ager, see the instructions at https://minikube.sigs.k8s.io/docs/start and click
on the Linux tab for various distributions.
B.3
Windows
B.3.1
VirtualBox
VirtualBox for Windows can be installed using the installer file from https://www
.virtualbox.org/wiki/Downloads.
B.3.2
Minikube
A Windows installer for Minikube can be downloaded from https://storage.googleapis
.com/minikube/releases/latest/minikube-installer.exe. Follow the on-screen instruc-
tions after downloading and running the installer.
 Once Minikube is installed, open a terminal window, and run:
minikube config set vm-driver=virtualbox
to configure Minikube to use VirtualBox.
535
index
A
A128CBC-HS256 method 203
AAA (authentication, authorization, and audit 
logging) 22
ABAC (attribute-based access control) 282–293
best practices for 291–293
combining decisions 284
distributed policy enforcement and 
XACML 290–291
implementing decisions 285, 288
policy agents and API gateways 289–290
ABACAccessController class 286, 288
Accept header 57
acceptable inputs 50
access control 22–23, 87–97
adding new members to Natter space 94–95
avoiding privilege escalation attacks 95–97
enforcing 92–94
enforcing authentication 89
offline 520–521
sharing capability URIs 317–318
access log 87
Access Management (AM) product, 
ForgeRock 516
access tokens 239–258
JWTs 249–256
letting AS decrypt tokens 258
securing HTTPS client configuration 245–247
token introspection 239–244
token revocation 248
Access-Control-Allow-Credentials header 150, 166, 
180
Access-Control-Allow-Headers header 150
Access-Control-Allow-Methods header 150
Access-Control-Allow-Origin header 150, 154
Access-Control-Expose-Headers header 150
Access-Control-Max-Age header 150
Access-Control-Request-Headers 148
Access-Control-Request-Method header 148
access_denied status code 516
access_token parameter 301, 303, 306
accountability, audit logging for 82–87
ACE-OAuth (Authorization for Constrained Envi-
ronments using OAuth2) 511–517
ACLs (access control lists) 90–92, 267
acr claim 262
acr_values parameter 262
act claim 431, 433
active field 241
actor_token parameter 432
actor_token_type parameter 432
add_first_party_caveat method 326
addMember method 94–96, 278
add_third_party_caveat method 329
admin role 275
AEAD (authenticated encryption with associated 
data) algorithms 202
AES (Advanced Encryption Standard) 196
AES-CCM (Counter with CBC-MAC) 
constructor 456
after filter 37
afterAfter() method 37, 54, 59
alg attribute 189
alg header 188–189, 201
algorithm header 188–189
allow lists 50, 210
allowPrivilegeEscalation 347
AM (Access Management) product, 
ForgeRock 516
ambient authority 299
amr claim 262
INDEX
536
API gateways 10, 289–290
API keys 384–385
API security 3–26
analogy for 4–6
defined 6–8
elements of 12–18
assets 13–14
environments and threat models 16–18
security goals 14–16
injection attacks 39–47
mitigating SQL injection with 
permissions 45–47
preventing 43–45
input validation 47–51
Natter API 27–33
implementation 29
initializing database 32–33
overview 28–29
setting up project 30–31
producing safe output 53–61
exploiting XSS Attacks 54–57
implementing protections 58
preventing XSS 58
REST API 34–35
creating new space 34–35
wiring up endpoints 36–39
secure development 27–61
security areas 8–12
security mechanisms 19–26
access control and authorization 22–23
audit logging 23–24
encryption 20
identification and authentication
21–22
rate-limiting 24–26
styles 7–8
typical deployment 10–12
APIs
internet of things (IoT) 488–496, 522
authenticating devices 489–496
end-to-end authentication 510
OAuth2 for constrained environments
511–517
offline access control 518–521
passing ID tokens to 264–266
apiVersion attribute 345
App class 30
appData buffer 445
application data transmission phase 397
application server 10
application/json 37
Application-layer DoS attacks (layer-7) 65
AppSec (Application security) 8
AppTest class 30
ARP spoofing attack 369
AS (Authorization Server) 386–387, 512
decrypting tokens 258
installing 525–531
assertion parameter 395
assertions 391
assets 13–14
associated data 496
asymmetric cryptography 250
at rest encryption 20
at_hash claim 263
AtomicInteger class 508
attributes, sensitive
encrypting 195–205
protecting 177–180
aud claim 187, 191, 253, 394
audience parameter 432
audit logging 19, 23–24, 82–87
audit logs, defined 6
AuditController interface 114
auditRequestEnd method 84
auditRequestStart method 84
authenticate authenticate() method 404
authenticate() method 269
authenticated encryption 197
AuthenticatedTokenStore interface 207–208, 323
authentication 21–22
defined 19
enforcing 89
factors 21–22
internet of things (IoT) devices for APIs 489–496
device certificates 492
identifying devices 489–492
with TLS connection 492–496
offline user 518–520
to prevent spoofing 70–77
authenticating users 75–77
creating password database 72–74
HTTP Basic authentication 71
registering users in Natter API 74–75
secure password storage with Scrypt 72
token-based 109–115
implementing token-based login 112–115
modern 146–180
token store abstraction 111–112
authentication, authorization, and audit logging 
(AAA) 22
authorization 19, 22
authorization code grant 228–238
hardening code exchange with PKCE 236–237
redirect URIs for different types of client
235–236
refresh tokens 237–238
authorization endpoint 228, 529
Authorization for Constrained Environments 
using OAuth2 (ACE-OAuth) 511–517
INDEX
537
Authorization header 88, 163
authorization_pending 516
auth_time claim 262
auth-tls-pass-certificate-to-upstream 402
availability 14, 64–69
azp claim 262, 265
B
-b option 125
badRequest method 53
base image 341–342
batch attack 202
BcTlsCrypto 460, 462
Bearer authentication scheme 160–162
bearer token 160
before filter 89
before() method 58, 92, 124, 153, 288, 307
biometric factors 21
BLE (Bluetooth Low-Energy) 440, 520
block cipher 196
blocking URLs 363
blocklist 50, 210
boolean argument 116, 283
botnets 64
BREACH attack 205
brew cask install adoptopenjdk command 523
brew cask install adoptopenjdk11 command 524
brew cask install virtualbox command 533
brew install linkerd command 372
brew install maven command 524
brew install minikube command 533
brew tap adoptopenjdk/openjdk command 524
browser-based clients, capability URIs for 311–312