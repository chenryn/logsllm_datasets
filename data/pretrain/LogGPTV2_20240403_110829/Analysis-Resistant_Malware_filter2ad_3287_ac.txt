normal web browsing trafﬁc patterns were recorded in or-
der to set the alert thresholds on outbound trafﬁc. The re-
sults suggest thresholds of about 60 KB per user per day,
of which at most 20 KB may be directed to a single re-
ceiving server. Lower thresholds result in an unmanageable
amount of false positives. These thresholds provide the mal-
ware author with a very clear bound on the possible rate of
covert exﬁltration from a user workstation. Referring to Ta-
ble 1, we see that in all but one or two of the listed scenarios
malware attempting to exﬁltrate all data of a particular type
would result in a high risk of detection through bandwidth
monitoring techniques. An exception is keystroke logging
data (ﬁrst row); an entire day’s worth of logged keystrokes
could likely be exﬁltrated undetected. Exﬁltrating all out-
going user HTTP trafﬁc may also be possible (second row),
depending on the amount of activity and particular thresh-
old levels. In all other considered cases, a malware author
concerned with detection would need to employ either an
explicit search or a private search for the speciﬁc data of
interest if bandwidth monitoring may be present.
Query secrecy. We now evaluate the need for malware
authors and users to conceal the criteria used to conduct a
search. While this is a more subjective task, considering
each of the listed scenarios provides some insight. In each
case, by employing a private search, the malware author
would only reveal that the type of information it seeks is
that of the second column. In contrast, by searching explic-
itly, they would reveal which speciﬁc pieces of information
they wish to obtain.
The ﬁrst two rows correspond to general attempts to ob-
tain account credentials. In these cases, the malware author
is likely to have little need to conceal the speciﬁc accounts
they hope to access. The remaining scenarios correspond to
more insidious attempts to gather information that suggest
a program of focused espionage, as exempliﬁed by the real
life anecdotes in Section 3.1.
In these cases, a query for
speciﬁc information is likely to be highly sensitive to the
investigation. This is especially true of the scenarios of the
last two rows, which correspond to monitoring of personal
communications.
Solution.
In summary, it is clear than in many situations
– especially those motivated by attempts at targeted espi-
onage – the malware author has little bandwidth available
for exﬁltration of sensitive data, yet must not reveal the spe-
ciﬁc information they seek. PIR is key to achieving the
attacker’s goals in these situations. To gauge the imme-
diacy of the threat of malware employing PIR techniques,
we need to evaluate the communication and computational
overhead incurred and the logistical hurdles to using them
in practice. In the following sections, we give a description
of our full implementation of a recent scheme, our adapta-
tion of it to data exﬁltration, and the results of experiments
demonstrating that it can be used in malware today.
4
Implementation and Experiments
4.1
Implementation
We have built a complete toolkit (“privss”) imple-
menting a recent private stream searching scheme [5] and
made it available on the web under the GPL [4]. Of course,
our intention in making it publicly available is not to reduce
the work of malware authors; rather the toolkit is provided
in the hope that it will be useful for privacy preserving ap-
plications4 and to other security researchers. Those inter-
ested in additional information on the toolkit may ﬁnd more
technical details in Appendix B.
Adaptation to email exﬁltration. To evaluate the lo-
gistical hurdles a malware author may face in using pri-
vate streaming searching within malware, we adapted the
privss package to process and exﬁltrate email, as sug-
gested in the last row of Table 1. Although any kind of data
may be exﬁltrated, email is a typical example of a sensi-
tive document type, roughly similar in size and quantity to
productivity application documents, web pages, etc.
For each message, a set of associated keywords is ex-
tracted from the message headers and body. To allow case-
insensitive matching, all extracted words are converted to
lowercase. The keyword matching method of [5] results in
some (low) probability of each word appearing in a docu-
ment causing a “false positive” match, in which the docu-
ment is returned (consuming space in the ﬁxed length re-
sults buffer) despite not matching the actual query. This
probability depends on the size allocated for the encrypted
query, and may be reduced with larger queries. Since gram-
matical words and other generic English words are unlikely
to form useful queries, a list of the 1,500 most common En-
glish words (derived from the British National Corpus [1])
is used to ﬁlter the extracted keywords. This has the im-
portant effect of reducing these false positives. This also
reduces query secrecy in the sense that it reveals that the
query does not include any of those words, but a brief re-
view of the words present in the ﬁltering list makes it clear
that none are likely to be useful search terms in any case.
Finally, gzip compression is applied to reduce the length of
the message before processing it with the private search al-
gorithm.
4Notwithstanding processing time versus communication time argu-
ments [28], private stream searching may be useful in applications in which
bandwidth is limited by cost or other constraints.
A key task in any use of a system for private stream
searching is the selection of a bound on the number of doc-
uments to be retrieved. The ﬁxed length of the buffer that is
incrementally updated by the private search algorithm dur-
ing document processing allows the possibility of an “over-
ﬂow” of matches, resulting in the inability to later recon-
struct the matching documents. The need for a ﬁxed length
buffer is actually inherent in the problem of private stream
searching. Allowing the algorithm to grow the buffer as
necessary would require it to distinguish matching docu-
ments from non-matching documents, in violation of the
security deﬁnition for private stream searching. Thus any
secure scheme must ensure that this is not possible, only
allowing ﬁxed length buffers.
The malware author then needs some a priori informa-
tion about the number of documents that may match their
query and their total size. In some search and exﬁltration
applications (e.g., as in the third row of Table 1), this is eas-
ily obtained, but in most cases they will need to estimate
or limit the total number of documents searched and esti-
mate the portion likely to contain their keywords. For the
purposes of email search and exﬁltration, this may be aided
by a period of initial monitoring. The malware may be de-
signed to spend an initial period recording statistics on the
number of emails sent to and received by the user and their
average length, and compute a size for its buffers accord-
ingly. This is the strategy employed by our adaptation of
the privss package.
4.2 Experiments
Having put together a system for searching and exﬁltrat-
ing email, we ran a series of tests to evaluate the commu-
nication overhead incurred and other factors affecting the
practicality of these techniques for the malware author. The
experiments were conducted on a dataset of about 200,000
emails sent within the Enron corporation from 1999 through
2002 that was publicly released in 2003 as a part of the in-
vestigation by the US Federal Energy Regulatory Commis-
sion [18]. By using a dataset already publicly released, we
gain the advantage of a large volume of real documents (in-
cluding many on sensitive topics) without raising privacy
concerns.
Two basic scenarios were considered in this context. In
the ﬁrst case, we imagine that the workstation of a single
user has been compromised with malware that will monitor
all messages received by or sent by that individual. This
scenario allows us to consider the use of private stream
searching malware in a setting with relatively few docu-
ments and more strict requirements on acceptable exﬁltra-
tion bandwidth. At the other extreme, we also consider the
case of a compromised mail server that will spy on all mail
passing through its MTA. In this case, a large volume of
documents will be searched, and more bandwidth may be
used to surreptitiously exﬁltrate results.
Compromised workstation. To analyze the case of the
compromise of a single user’s workstation, we collected all
email from the Enron corpus to and from a single user over
a period of ten days. The private search and exﬁltration sys-
tem scanned previous email to determine the average num-
ber of messages seen per day and their average size, allow-
ing it to pick sizes for the buffers kept during the search.
While general statistics such as these may be used by the
malware to conﬁgure search parameters, the keywords used
in the query of course may not be considered without com-
promising secrecy. Buffer space was allocated to allow up
to ten total messages of average size to be retrieved over
the ten day period, or an average of one per day. Given
these parameters, we ran a search using the keyword “sen-
sitive”. This was repeated for various sizes of the encrypted
query hash table. Using a larger encrypted query has the
effect of reducing the false positive rate and results in the
malware accordingly selecting a somewhat smaller results
buffer. This procedure was further repeated for three differ-
ent users, namely, Richard Shapiro and James Steffes (VP’s
in Enron) and Jeff Dasovich (Director of Enron). These
were the three users most well represented in the corpus
and thus provided a volume of mail most similar to typical
usage.
Averaging the three trials for each query size produced
the results displayed in Figure 2(a). The black bar displays
the daily bandwidth required to directly transmit the (com-
pressed) messages which match the query, as when search-
ing explicitly. The gray bar gives the daily bandwidth used
by the private search, and the white bar gives the daily
bandwidth that would be necessary to return all mail ob-
served. The ﬁgure also displays per user exﬁltration de-
tection thresholds typical of software designed to detected
such activity. Speciﬁcally, the upper (60 KB) and lower
(20 KB) lines correspond to the detection thresholds deter-
mined by Web Tap [7] for the total daily bandwidth and the
total bandwidth leaving for any one site. Judging from the
ﬁgure, in this scenario, retrieving all mail observed on the
workstation in the presence of bandwidth monitoring is not
possible without detection. Using an encrypted query of 8
MB or more allows one to exﬁltrate the results of a private
search to a single external site, while using an encrypted
query of of 2 - 4 MB may require the data to be split among
sites. Nevertheless, in all cases the private search is feasible
relative to the total bandwidth threshold. It is also apparent
that the private search uses two to three times the bandwidth
necessary to retrieve the ﬁles with an explicit search. This
overhead is incurred in two ways: the a priori ﬁxed size of
the results buffer,5 and cryptographic overhead.
5Up to 30 matching messages were allowed between the three users
(a) Single user workstation.
(b) Mail server.
Figure 2. Results of email exﬁltration experiments.
Each email required about 200 - 300 milliseconds6 to be
processed. Each user sent and received an average of 51
messages per day, thus requiring only about 10 to 15 sec-
onds of processor time per day overall. This result strongly
suggests that computational overhead is not likely to give
away the presence of malware in this scenario.
A somewhat more important consideration for the mal-
ware author is pushing a 2 - 16 MB encrypted query to
the compromised host while avoiding detection. This is
not likely to pose much difﬁculty, however. Surreptitiously
inﬁltrating signiﬁcant amounts of data to a compromised
host is far easier than exﬁltrating data, due to the lopsided
bandwidth usage of users under normal circumstances. The
piece of malware which initially infects the system may re-
trieve an encrypted query with a series of HTTP requests
back to a machine controlled by the author. Each retrieved
piece may be disguised as a media ﬁle such as an image or
video. Given the current popularity of online video websites
such as YouTube, one such request may even sufﬁce. Al-
though encrypted queries larger than 16 MB could be used,
there is little to gain from doing so as a 16 MB query vir-
tually eliminates false positives for searches of this scale.
Conversely, the number of false positives resulting from
a query much smaller than 2 MB may be problematically
large, but inﬁltrating at least 2 MB should pose no difﬁculty.
Compromised mail server. Now we turn to the scenario
of a compromised mail server monitoring all mail passing
through it’s MTA. The private search and exﬁltration system
was invoked with the search keyword “sensitive” as before,
this time processing one day’s worth of mail in the corpus
tested, but a total of 19 messages matched.
6The processor in the workstation used was a 64-bit, 3.2 GHz Pentium
4. The workstation had 2GB of RAM, although memory capacity did not
play a signiﬁcant role in this experiment.
to and from all users (approximately 2,500 messages). The
buffer sizes were initialized to the same bounds as in the
previous case, scaled up in proportion to the volume of mail
processed. As before, the experiments were repeated for
several query sizes. The results are shown in Figure 2(b). In
this case, we do not have clear bounds on possible detection
thresholds, but some observations can be made. Naively
exﬁltrating all mail observed will (at least) double outbound
bandwidth, almost certainly causing an alert if the server’s
bandwidth is monitored. A malware author attempting to
retrieve speciﬁc messages passing through the server while
concealing which they are seeking would do well to employ
a private search. The cost incurred in this scenario is the
usage of approximately twice the bandwidth of an explicit
search.
While inﬁltrating the encrypted query will likely not
pose any more of a problem than in the previous scenario,
the computational costs may be troublesome to the mal-
ware author in this case. While the processing time (on the
same machine as in the last example) remains at about 200 -
300 milliseconds per message, the CPU usage patterns may
be somewhat more predictable on a server machine than a
workstation. Since the normal time required for the MTA to
process a message will be far less than 200 milliseconds, the
malware author will have to take some care to not dramati-
cally alter the load on the machine in a way that may alert
a host-based intrusion detection system or an observant ad-
ministrator. Of course, mail may be queued for processing
by the private searching code and processed whenever it is
convenient. One possible strategy for obscuring the source
of load would be to inject the relevant code into spam ﬁlter-
ing software, which in many cases requires over a second to
process each message. Instances of malware injecting code
into existing libraries and running processes to disguise the
Encrypted query size (MB)24816Data to be exfiltrated per day (KB)020406080100120matching emailsprivate stream searchall emailsdetectionthresholdsEncrypted query size (MB)481632Data to be exfiltrated per day (KB)0500100015002000250030003500matching emailsprivate stream searchall emailssource of load and for other reasons have been observed in
the wild. In the case of this experiment, the malware would
need to hide about 8 - 13 minutes of additional CPU usage
per day.
Summary.
In short, private stream searching appears to
be an entirely effective method for malware to surrepti-
tiously search and exﬁltrate email. Malware designed to
save and return messages on a speciﬁc sensitive topic will
be able to do so without revealing the topic of interest upon
analysis; all that will be determined is that it scans email in
general. Furthermore, as our implementation demonstrates,
there is nothing to prevent these techniques from being used
immediately. This example of PIR-based malware illus-
trates the more general possibility of malware employing
public key obfuscation techniques to hide its behavior, and
thus the intentions of its author.
5 Discussion
Evaluating the threats highlighted by this paper at a high
level, the primary concern is that, in the short term, PIR
techniques will encourage more bold use of malware in ob-
taining sensitive information. While these methods do not
allow malware authors to retrieve any data they otherwise
could not, they reduce the risk in doing so. The scandal
resulting from the “Trojangate” incident was devastating to
the Israeli telecom companies and private investigators re-
sponsible, and the possibility of this kind of fallout serves as
a useful deterrent to similar illicit activities. Private search-
ing and other private information retrieval techniques may
unfortunately reduce this deterrent. Looking farther into the
future, if and when more advanced schemes are developed
within the framework of public key obfuscation, they will
also enter the malware author’s toolbox.
While little can be done to directly address the possibil-
ity of the use of such techniques in malware, it is helpful
to at least be aware that it is not always possible to deter-
mine precisely what malware may be computing or exﬁl-
trating. Instead, when analyzing malware one must assume
that in principle it could be retrieving any data that could
be derived from anything it has read. As for more speciﬁc
methods for detecting and preventing this threat, there are
several directions worth further consideration. First, the sig-
niﬁcant computation required by methods for computing on
encrypted data may increase the vulnerability of this type of
malware to host based anomaly detection systems. This is
especially true in the case of servers, in which the CPU load
may be more predictable.
6 Conclusions
In summary, an evaluation of the goals of malware au-
thors and the risks they face in retrieval of sensitive infor-
mation reveals that PIR may prove to be an attractive tech-
nology for the next generation of malware. By minimizing
the bandwidth necessary to exﬁltrate the desired data while
hiding precisely what is sought, PIR techniques allow the
malware author or user to simultaneously reduce the risk
of detection and the risk of association with the malware
in case of its analysis. This new threat raises the challenge
of ﬁnding better methods for detecting and preventing these
techniques. Looking farther ahead, PIR techniques may be
the ﬁrst of a series of new methods for analysis-resistance
in malware.
Acknowledgements