statistics, which is more lightweight and practical.
QSYM [46] integrates the symbolic emulation with the
native execution using dynamic binary translation. It also
alleviates the strict soundness requirements of conventional
concolic executors to achieve better performance as well as to
make it scalable to real-world programs. The main focus for
QSYM is to improve the efﬁciency of concolic execution while
our approach tries to make better use of concolic execution by
selectively dispatching only the hardest work to it.
Another type of hybrid fuzzing system is to regard the
symbolic execution as a guider for input generation or path
selection. Pak [31] proposes a hybrid fuzzing system to apply
symbolic execution to collects path constraints, then the system
generates inputs that respect the path predicates and transits
to the fuzzer. DeepFuzz [5] applies probabilistic symbolic
execution to assign probabilities to program paths, and then
Fig. 10: Concolic executions by DigFuzz on N RF IN 00017.
post-processing step, T-Fuzz leverages a symbolic execution-
based approach to ﬁlter out false positives. CollAFL [16] is
a coverage sensitive fuzzing solution, which mitigates path
collisions by providing more accurate coverage information.
It also utilizes the coverage information to apply three new
fuzzing strategies. Veritesting [1] tackles the path explosion
problem by employing static symbolic execution to amplify the
effect of dynamic symbolic execution. Mayhem [10] proposes
to combine on-line and off-line symbolic execution to deal with
the problem of exhausted memory. The main contribution of
DigFuzz is to propose a more effective strategy to combine
fuzzing with concolic execution. Therefore, the advances of
fuzzing and concolic execution are out of our scope.
Hybrid fuzzing system. Most of hybrid fuzzing systems fol-
low the observation to augment fuzzing with selective symbolic
execution [29], [39], [41]. Both Driller and hybrid concolic
13
b20b10b21b11b180.08b17b15b17b13b14b18b160.003b16b13b14b15b9b16b13b15b7b15b17b8b16b13b14b15b14do_build()b15b7b17b8b9b13b9b16b13b15b7b14Ln.4 (check1)Ln.7(check2)b180.1add_breaker_to_load_center()Ln.12Ln.15 (check3)Ln.6get_new_breaker_by_model_idLn.9main()    2448111515022110022010203040122432636653670691Imported /Generated inputsTime stamp (second) 28121017169711139169913711911719599720040620000000000000000000016010203040Imported/Generated inputsTime stamp (second) Fig. 11: Concolic executions by Random on N RF IN 00017.
takes these probabilities to guide the path exploration in
fuzzing.
search-based test prioritization and other search-based software
engineering [23].
Path prioritization in symbolic execution. Path prioriti-
zation is promising for mitigating the path explosion prob-
lem in dynamic symbolic execution. Representative studies
include heuristics techniques and sound program analysis
techniques [9]. These heuristics include using the control-
ﬂow graph to guide the exploration, frequency-based and
random-based techniques [6]–[8]. Recently, path prioritization
is adopted to combine with evolutionary search, in which a
ﬁtness function is deﬁned to guide the symbolic execution [2].
Compared with these path exploration techniques, the path pri-
oritization in DigFuzz is to prioritize paths with probabilities
how difﬁcult for fuzzing to pass through. To the best of our
knowledge, we are the ﬁrst to investigate the path prioritization
problem in the hybrid fuzzing system.
Directed symbolic execution also employs path prioriti-
zation to reach a target. These techniques aim to search for
a feasible path for a target statement or branch [37], [45].
Compared with directed symbolic execution techniques, the
path prioritization in DigFuzz is to identify the targeted paths
for concolic execution, instead of searching for a feasible path
for a given target.
Seed scheduling in fuzzing. Seed selection plays an important
role in fuzzing, and several studies have been proposed to
improve the seed scheduler [4], [11], [44] by prioritizing
seed inputs. Woo et al. [44] model black-box fuzzing as a
multi-armed bandit problem where the energy of a seed is
computed based on whether or not it has exposed a crash
in any previous fuzzing iteration. AFLfast [4] improves the
seed selection strategy of AFL by assign more energy to
inputs that are less frequently taken by AFL. The basic insight
behind these seed scheduling technique is to search for a seed
on which the mutated execution is more likely to discover
new program states. In our future work, we plan to design
scheduling technique to ofﬂoad the fuzzer with paths that are
difﬁcult to explore.
Test case prioritization attempts to reorder test cases in a
way that increases the rate at which faults are detected [21],
[22], [24], [26], [28]. The path prioritization in this study is
to obtain the missed paths that are most likely to block the
fuzzer. The search algorithm is also closely related to the
VIII. CONCLUSION
In this paper, we perform a thorough investigation on some
state-of-the-art hybrid fuzzing systems and point out several
fundamental limitations in the “demand launch” and “optimal
switch” strategies deployed in these systems. We further pro-
pose a “discriminative dispatch” strategy to better utilize the
capability of concolic execution by designing a Monte Carlo
based probabilistic path prioritization model to quantify each
path’s difﬁculty. We implement a prototype system DigFuzz
based on the design and conduct comprehensive evaluation
using two popular datasets. The evaluation results show that the
concolic execution in DigFuzz contributes much more to the
increased code coverage and increased number of discovered
vulnerabilities compared with state-of-the-art hybrid fuzzing
systems.
ACKNOWLEDGMENT
We thank our shepherd Endadul Hoque and the anonymous
reviewers for their insightful comments on our work. This
work is partly supported by National Science Foundation
under Grant No. 1664315, Ofﬁce of Naval Research under
Award No. N00014-17-1-2893, and National Natural Science
Foundation of China under Grant No.61672394 and 61872273.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this paper are those of the authors and do not
necessarily reﬂect the views of the funding agencies.
REFERENCES
[1] T. Avgerinos, A. Rebert, S. K. Cha, and D. Brumley, “Enhancing
symbolic execution with veritesting,” in Proceedings of the 36th Inter-
national Conference on Software Engineering, 2014, pp. 1083–1094.
[2] A. Baars, M. Harman, Y. Hassoun, K. Lakhotia, P. McMinn, P. Tonella,
and T. Vos, “Symbolic search-based testing,” in the 26th International
Conference on Automated Software Engineering, 2011, pp. 53–62.
[3] M. Bohme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury, “Di-
rected greybox fuzzing,” in Proceedings of CCS’17, 2017, pp. 2329–
2344.
[4] M. B¨ohme, V.-T. Pham, and A. Roychoudhury, “Coverage-based Grey-
box Fuzzing as Markov Chain,” in Proceedings of CCS’16, 2016, pp.
1032–1043.
14
    2448111515022110022010203040122432636653670691Imported /Generated inputsTime stamp (second) 28121017169711139169913711911719599720040620000000000000000000016010203040Imported/Generated inputsTime stamp (second) 2017 11th Joint Meeting on Foundations of Software Engineering.
ACM, 2017, pp. 627–637.
[28] Y. Lu, Y. Lou, S. Cheng, L. Zhang, D. Hao, Y. Zhou, and L. Zhang,
“How does regression test prioritization perform in real-world software
evolution?” in Proceedings of the 38th International Conference on
Software Engineering. ACM, 2016, pp. 535–546.
[29] R. Majumdar and K. Sen, “Hybrid Concolic Testing,” in 29th Interna-
tional Conference on Software Engineering (ICSE’07), 2007, pp. 416–
426.
[30] B. P. Miller, L. Fredriksen, and B. So, “An empirical study of the
reliability of unix utilities,” Communications of the ACM, vol. 33,
no. 12, pp. 32–44, 1990.
[31] B. S. Pak, “Hybrid fuzz testing: Discovering software bugs via fuzzing
and symbolic execution,” Masters thesis, School of Computer Science
Carnegie Mellon University, 2012.
h. Peng, Y. Shoshitaishvili, and M. Payer, “T-fuzz: fuzzing by program
transformation,” in 39th IEEE Symposium on Security and Privacy.
IEEE, 2018.
[32]
[33] T. Petsios, J. Zhao, A. D. Keromytis, and S. Jana, “Slowfuzz: Au-
tomated domain-independent detection of algorithmic complexity vul-
nerabilities,” in Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2017, pp. 2155–2168.
[34] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos,
“VUzzer: Application-aware Evolutionary Fuzzing,” in 2017 Network
and Distributed System Security Symposium, 2017.
[35] C. P. Robert, Monte carlo methods. Wiley Online Library, 2004.
[36] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz,
“kaﬂ: Hardware-assisted feedback fuzzing for os kernels,” in USENIX
Security 17, 2017, pp. 167–182.
[37] H. Seo and S. Kim, “How we get
there: a context-guided search
strategy in concolic testing,” in Proceedings of the 22nd ACM SIGSOFT
International Symposium on Foundations of Software Engineering.
ACM, 2014, pp. 413–424.
[38] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel et al., “Sok:(state
of) the art of war: Offensive techniques in binary analysis,” in 2016
IEEE Symposium on Security and Privacy, 2016, pp. 138–157.
[39] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting
Fuzzing Through Selective Symbolic Execution,” in Proceedings 2016
Network and Distributed System Security Symposium, 2016.
J. Wang, B. Chen, L. Wei, and Y. Liu, “Skyﬁre: Data-driven seed
generation for fuzzing,” in 38th IEEE Symposium on Security and
Privacy (S&P 2017), 2017.
[40]
[41] T. Wang, T. Wei, G. Gu, and W. Zou, “TaintScope: A checksum-aware
directed fuzzing tool for automatic software vulnerability detection,” in
2010 IEEE Symposium on Security and Privacy, 2010, pp. 497–512.
[42] X. Wang, J. Sun, Z. Chen, P. Zhang, J. Wang, and Y. Lin, “Towards
optimal concolic testing,” in ICSE 2018.
three
“Rule
[43] Wikipedia,
of
(statistics),”
2017,
https://en.wikipedia.org/wiki/Rule of three %28statistics
[44] M. Woo, S. K. Cha, S. Gottlieb, and D. Brumley, “Scheduling black-
box mutational fuzzing,” in Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security, 2013, pp. 511–
522.
[45] T. Xie, N. Tillmann, J. de Halleux, and W. Schulte, “Fitness-guided path
exploration in dynamic symbolic execution,” in IEEE/IFIP International
Conference on Dependable Systems & Networks., 2009, pp. 359–368.
I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM: A Practical Con-
colic Execution Engine Tailored for Hybrid Fuzzing,” in Proceedings
of the 27th USENIX Security Symposium, 2018.
Fuzzy
“American
Zalewski,
[47] M.
2017,
Lop,”
[46]
http://lcamtuf.coredump.cx/aﬂ/.
[5] K. B¨ottinger and C. Eckert, “Deepfuzz: Triggering vulnerabilities
deeply hidden in binaries,” in Detection of Intrusions and Malware,
and Vulnerability Assessment. Springer, 2016, pp. 25–34.
J. Burnim and K. Sen, “Heuristics for scalable dynamic test generation,”
in the 23rd IEEE/ACM International Conference on Automated Software
Engineering.
IEEE, 2008, pp. 443–446.
[6]
[7] C. Cadar, D. Dunbar, and D. Engler, “KLEE: Unassisted and automatic
generation of high-coverage tests for complex systems programs,” in
Proceedings of the 8th USENIX conference on Operating systems design
and implementation. USENIX Association, 2008, pp. 209–224.
[8] C. Cadar, V. Ganesh, P. Pawlowski, D. Dill, and D. Engler, “EXE: auto-
matically generating inputs of death,” ACM Transactions on Information
and System Security (TISSEC), vol. 12, no. 2, pp. 1–38, 2008.
[9] C. Cadar and K. Sen, “Symbolic execution for software testing: three
decades later,” Communications of the ACM, vol. 56, no. 2, pp. 82–90,
2013.
[10] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing
Mayhem on Binary Code,” in 2012 IEEE Symposium on Security and
Privacy, 2012, pp. 380–394.
[11] S. K. Cha, M. Woo, and D. Brumley, “Program-Adaptive Mutational
IEEE,
Fuzzing,” in 2015 IEEE Symposium on Security and Privacy.
2015, pp. 725–741.
[12] P. Chen and C. Hao, “Angora: Efﬁcient fuzzing by principled search,”
in 39th IEEE Symposium on Security and Privacy.
IEEE, 2018.
[13] DARPA, “Cyber Grand Challenge Challenge Repository,” 2017,
http://www.lungetech.com/cgc-corpus/.
Bugs
Dolan-Gavitt,
“Of
[14] B.
and
Baselines,”
2018,
http://moyix.blogspot.com/2018/03/of-bugs-and-baselines.html.
[15] B. Dolan-Gavitt, P. Hulin, E. Kirda, T. Leek, A. Mambretti, W. Robert-
son, F. Ulrich, and R. Whelan, “LAVA: Large-Scale Automated Vulner-
ability Addition,” in 2016 IEEE Symposium on Security and Privacy,
2016, pp. 110–121.
[16] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen, “Collaﬂ:
Path sensitive fuzzing,” in 39th IEEE Symposium on Security and
Privacy.
IEEE, 2018.
[17] V. Ganesh, T. Leek, and M. Rinard, “Taint-based directed whitebox
the 31st International Conference on
fuzzing,” in Proceedings of
Software Engineering.
IEEE Computer Society, 2009, pp. 474–484.
J. Geldenhuys, M. B. Dwyer, and W. Visser, “Probabilistic symbolic
execution,” in Proceedings of the 2012 International Symposium on
Software Testing and Analysis. ACM, 2012, pp. 166–176.
[18]
[19] W. R. Gilks, “Markov chain monte carlo,” Encyclopedia of Biostatistics,
2005.
I. Haller, A. Slowinska, H. Bos, and M. M. Neugschwandtner, “Dowsing
for Overﬂows: A Guided Fuzzer to Find Buffer Boundary Violation,”
in the 22nd USENIX conference on Security, 2013, pp. 49–64.
[20]
[21] D. Hao, L. Zhang, L. Zhang, G. Rothermel, and H. Mei, “A uniﬁed
test case prioritization approach,” ACM Transactions on Software En-
gineering and Methodology (TOSEM), vol. 24, no. 2, p. 10, 2014.
[22] D. Hao, L. Zhang, L. Zang, Y. Wang, X. Wu, and T. Xie, “To
be optimal or not in test-case prioritization,” IEEE Transactions on
Software Engineering, vol. 42, no. 5, pp. 490–505, 2016.
[23] M. Harman, S. A. Mansouri, and Y. Zhang, “Search-based software
engineering: Trends, techniques and applications,” ACM Computing
Surveys (CSUR), vol. 45, no. 1, p. 11, 2012.
[24] C. Henard, M. Papadakis, M. Harman, Y. Jia, and Y. Le Traon,
“Comparing white-box and black-box test prioritization,” in the 38th
International Conference on Software Engineering, 2016, pp. 523–534.
[25] X. Jia, C. Zhang, P. Su, Y. Yang, H. Huang, and D. Feng, “Towards
efﬁcient heap overﬂow discovery,” in Proceedings of the 26th USENIX
Security Symposium. USENIX Association, 2017, pp. 989–1006.
[26] O. Legunsen, F. Hariri, A. Shi, Y. Lu, L. Zhang, and D. Marinov, “An
extensive study of static regression test selection in modern software
evolution,” in Proceedings of the 2016 24th ACM SIGSOFT Interna-
tional Symposium on Foundations of Software Engineering. ACM,
2016, pp. 583–594.
[27] Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu, and A. Tiu,
“Steelix: program-state based binary fuzzing,” in Proceedings of the
15