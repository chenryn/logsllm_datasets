Authenti-
cation (e.g.,
cookies)
Yes
No
Publicly known
(1) Leaky image
(4) Irrelevant
URL of image
Secret URL
shared among
users
(2) Leaky image
(5) Secure
Per-user
secret
URL
(3) Secure
(6) Secure
the same IP or the same browser version, and often insuf-
ﬁcient to identify a particular user with high conﬁdence.
Moreover, privacy-aware clients may further obfuscate their
traces, e.g., by using the Tor browser, which hides the IP and
other details about the client. Popular tracking services, such
as Google Analytics, also obtain partial knowledge about
which users are visiting which websites. However, the use of
this information is legally regulated, available to only a few
tracking services, and shared with website operators only in
anonymized form. In contrast, the attack considered here en-
ables an arbitrary operator of a website to determine whether
a speciﬁc person is visiting the website.
Leaky image attacks are possible whenever all of the fol-
lowing four conditions hold. First, we assume that the at-
tacker and the victim are both users of the same image shar-
ing service. Since many image sharing services provide pop-
ular services beyond image sharing, such as email or a social
network, their user bases often cover a signiﬁcant portion of
all web users. For example, Facebook announced that it has
more than 2 billion registered users3, while Google reported
to have more than 1 billion active Gmail users each month4.
Moreover, an attacker targeting a speciﬁc victim can simply
register at an image sharing service where the victim is reg-
istered. Second, we assume that the attacker can share an
image with the victim. For many image sharing services,
this step involves nothing more than knowing the email ad-
dress or user name of the victim, as we discuss in more de-
tail in Section 4. Third, we assume that the victim visits
the attacker-controlled website while the victim’s browser is
logged into the image sharing service. Given the popularity
of some image sharing services and the convenience of being
logged in at all times, we believe that many users fulﬁll this
condition for at least one image sharing service. In particular,
in Google Chrome and the Android operating system, users
are encouraged immediately after installation to login with
their Google account and to remain logged in at all times.
The fourth and ﬁnal condition for leaky images concerns
the way an image sharing service determines whether a re-
quest for an image is from a user supposed to view that im-
age. Table 2 shows a two-dimensional matrix of possible
3https://techcrunch.com/2017/06/27/
facebook-2-billion-users/
4https://www.businessinsider.de/
gmail-has-1-billion-monthly-active-users-2016-2
implementation strategies, based on the description of secret
URLs and authentication-based access control in Section 2.
In one dimension, a website can either rely on authentication
or not.
In the other dimension, the site can make an im-
age available through a publicly known URL, a secret URL
shared among the users allowed to access the image, or a
per-user secret URL. Out of the six cases created by these
two dimensions, ﬁve are relevant in practice. The sixth case,
sharing an image via a publicly known URL without any
authentication, would make the image available to all web
users, and therefore is out of the scope of this work. The
leaky image attack works in two of the ﬁve possible cases
in Table 2, cases 1 and 2. Speciﬁcally, leaky images are en-
abled by sites that protect shared images through authenti-
cation and that either do not use secret URLs at all or that
use a single secret URL per shared image. Section 4 shows
that these cases occur in practice, and that they affect some
of today’s most popular websites.
3.2 Targeting a Single User
After introducing the prerequisites for leaky images, we now
describe several privacy attacks based on them. We start with
a basic version of the attack, which targets a single victim
and determines whether the victim is visiting an attacker-
controlled website. To this end, the attacker uploads an im-
age i to the image sharing service and therefore becomes the
owner of the image, i.e., uattacker = ui
owner. Next, the attacker
conﬁgures the image sharing service to share i with the vic-
tim user uvictim. As a result, the set of users allowed to ac-
shared = {uattacker,uvictim}. Then, the at-
cess the image is U i
tacker embeds a request for i into the website s for which
the attacker wants to determine whether the victim is visit-
ing the site. Because images are exempted from the same-
origin policy (Section 2), the attacker-controlled parts of s
can determine whether the image gets loaded successfully
and report this information back to the attacker. Once the
victim visits s, the image request will succeed and the at-
tacker knows that the victim has visited s. If any other client
visits s, though, the image request fails because s cannot au-
thenticate the client as a user in U i
shared. We assume that the
attacker does not visit s, as this might mislead the attacker to
believe that the victim is visiting s.
Because the authentication mechanism of the image shar-
ing service ensures that only the attacker and the victim can
access the image, a leaky image attack can determine with
100% accuracy whether the targeted victim has visited the
site. At the same time, the victim may not notice that she
was tracked, because the image can be loaded in the back-
ground.
For example, Figure 1 shows a simple piece of HTML
code with embedded JavaScript. The code requests a leaky
image, checks whether the image is successfully loaded, and
sends this information back to the attacker-controlled web
926    28th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
7
8
9
10
11
12
13
Figure 1: Tracking code included in the attacker’s website.
server via another HTTP request. We assume httpReq is a
method that performs such a request using standard browser
features such as XMLHttpRequest or innerHTML to
send the value of the second argument to the domain passed
as ﬁrst argument. Alternatively to using onload to detect
whether the image has been loaded, there are several varia-
tions, which, e.g., checking the width or height of the loaded
image. As we show below (Section 3.5), the attack is also
possible within a purely HTML-based website, i.e., without
JavaScript.
The described attack works because the same-origin pol-
icy does not apply to images. That is, the attacker can in-
clude a leaky image through a cross-origin request into a
website and observe whether the image is accessible or not.
In contrast, requesting an HTML document does not cause a
similar privacy leak, since browsers implement a strict sep-
aration of HTML coming from different origins. A second
culprit for the attack’s success is that today’s browsers au-
tomatically include the victim’s cookie in third-party image
requests. As a result, the request passes the authentication
of the image sharing service, leaking the fact that the request
comes from the victim’s browser.
3.3 Targeting a Group of Users
The following describes a variant of the leaky images at-
tack that targets a group of users instead of a single user.
In this scenario, the attacker considers a group of n victims
and wants to determine which of these victims is visiting a
particular website.
As an example, consider a medium-scale spear phishing
campaign against the employees of a company. After prepar-
ing the actual phishing payload, e.g., personalized emails
or cloned websites, the attacker may include a set of leaky
images to better understand which victims interact with the
payload and in which way. In this scenario, leaky images
provide a user experience analysis tool for the attacker.
A naive approach would be to share one image ik (1 ≤
k ≤ n) with each of the n victims. However, this naive ap-
Request i1


Request i2


Request i2


Request i3


u2
u1
Request i3


u3
u4
Request i3


u6
u5
Request i3


u7 Other user
Figure 2: Binary search to identify individuals in a group of
users u1 to u7 through requests to leaky images i1 to i3.
proach does not scale well to larger sets of users: To track a
group of 10,000 users, the attacker needs 10,000 shared im-
ages and 10,000 image requests per visit of the website. In
other words, this naive attack has O(n) complexity, both in
the number of leaky images and in the number of requests.
For the above example, this naive way of performing the at-
tack might raise suspicion due to the degraded performance
of the phishing site and the increase in the number of net-
work requests.
To efﬁciently attack a group of users, an attacker can use
the fact that image sharing services allow sharing a single
image with multiple users. The basic idea is to encode each
victim with a bit vector and to associate each bit with one
shared image. By requesting the images associated with each
bit, the website can compute the bit vector of a user and de-
termine if the user is among the victims, and if yes, which
victim it is. This approach enables a binary search on the
group of users, as illustrated in Figure 2 for a group of seven
users. The website includes code that requests images i1, i2,
and i3, and then determines based on the availability of the
images which user among the targeted victims has visited
the website. If none of the images is available, then the user
is not among the targeted victims. In contrast to the naive
approach, the attack requires only O(log(n)) shared images
and only O(log(n)) image requests, enabling the attack on
larger groups of users.
In practice, launching a leaky image attack against a group
of users requires sharing a set of images with different sub-
sets of the targeted users. This process can be automated,
either through APIs provided by image sharing services or
through UI-level web automation scripts. However, this pro-
cess will most likely be website-speciﬁc which makes it ex-
pensive for attacking multiple websites at once.
3.4 Linking User Identities
The third attack based on leaky images aims at linking mul-
tiple identities that a single individual has at different image
sharing services. Let siteA and siteB be two image sharing
services, and let usiteA and usiteB be two user accounts, reg-
istered at the two image sharing services, respectively. The
USENIX Association
28th USENIX Security Symposium    927
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
Figure 3: HTML-only variant of the leaky image group at-
tack. All the object tags should have the type property
set to image/png.
attacker wants to determine whether usiteA and usiteB belong
to the same individual. For example, this attack might be
performed by law enforcement entities to check whether a
user account that is involved in criminal activities matches
another user account that is known to belong to a suspect.
To link two user identities, the attacker essentially per-
forms two leaky image attacks in parallel, one for each image
sharing service. Speciﬁcally, the attacker shares an image
isiteA with usiteA through one image sharing service and an
image isiteB with usiteB through the other image sharing ser-
vice. The attacker-controlled website requests both isiteA and
isiteB. Once the targeted individual visits this site, both re-
quests will succeed and establish the fact that the users usiteA
and usiteB correspond to the same individual. For any other
visitors of the site, at least one request will fail because the
two requests only succeed if the browser is logged into both
user accounts usiteA and usiteB.
The basic idea of linking user accounts generalizes to
more than two image sharing services and to user accounts of
more than a single individual. For example, by performing
two attacks on groups of users, as described in Section 3.3,
in parallel, an attacker can establish pairwise relationships
between the two groups of users.
3.5 HTML-only Attack
The leaky image attack is based on the ability of a client-