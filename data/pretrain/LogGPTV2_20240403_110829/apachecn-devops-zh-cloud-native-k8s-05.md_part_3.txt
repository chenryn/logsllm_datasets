### 入口规则和 YAML
现在我们已经启动并运行了入口控制器，我们可以开始配置入口规则了。
让我们从一个简单的例子开始。我们有两个服务`service-a`和`service-b`，我们希望通过入口在不同的路径上公开它们。一旦您的入口控制器和任何相关的弹性负载平衡器被创建(假设我们在 AWS 上运行)，让我们首先通过以下步骤创建我们的服务:
1.  First, let's look at how to create Service A in YAML. Let's call the file `service-a.yaml`:
    服务 a.yaml
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: service-a
    Spec:
      type: ClusterIP
      selector:
        app: application-a
      ports:
        - name: http
          protocol: TCP
          port: 80
          targetPort: 8080
    ```
2.  您可以通过运行以下命令来创建我们的服务 A:
    ```
    kubectl apply -f service-a.yaml
    ```
3.  接下来，让我们创建我们的服务 B，其 YAML 代码看起来非常相似:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: service-b
    Spec:
      type: ClusterIP
      selector:
        app: application-b
      ports:
        - name: http
          protocol: TCP
          port: 80
          targetPort: 8000
    ```
4.  通过运行以下命令创建我们的服务 B:
    ```
    kubectl apply -f service-b.yaml
    ```
5.  最后，我们可以为每个路径创建带有规则的入口。这是我们入口的 YAML 代码，它将根据基于路径的路由规则在必要时分割请求:
入口，yaml
```
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-first-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: my.application.com
    http:
      paths:
      - path: /a
        backend:
          serviceName: service-a
          servicePort: 80
      - path: /b
        backend:
          serviceName: service-b
          servicePort: 80
```
在前面的 YAML 中，入口有一个单数`host`值，它对应于通过入口的流量的主机请求头。然后，我们有两条路径，`/a`和`/b`，这就引出了我们之前创建的两条`ClusterIP`服务。为了以图形格式显示这种配置，让我们看一下下图:
![Figure 5.4 – Kubernetes Ingress example](img/B14790_05_004.jpg)
图 5.4-永久输入示例
如您所见，我们简单的基于路径的规则导致网络请求被直接路由到适当的 Pods。这是因为`nginx-ingress`使用服务选择器获取 Pod IPs 列表，但不直接使用服务与 Pod 通信。相反，随着新的 Pod IPs 上线，Nginx(在这种情况下)配置会自动更新。
实际上并不需要`host`值。如果您忽略它，任何通过入口的流量，无论主机头是什么(除非它匹配指定主机的不同规则)，都将根据该规则进行路由。下面的 YAML 展示了这一点:
入口-无主机. yaml
```
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-first-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
   - http:
      paths:
      - path: /a
        backend:
          serviceName: service-a
          servicePort: 80
      - path: /b
        backend:
          serviceName: service-b
          servicePort: 80
```
即使没有主机头值，这个先前的入口定义也会将流量流向基于路径的路由规则。
类似地，可以根据主机报头将流量分成多个独立的分支路径，如下所示:
入口分支. yaml
```
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: multiple-branches-ingress
spec:
  rules:
  - host: my.application.com
    http:
      paths:
      - backend:
          serviceName: service-a
          servicePort: 80
  - host: my.otherapplication.com
    http:
      paths:
      - backend:
          serviceName: service-b
          servicePort: 80
```
最后，在许多情况下，您还可以使用顶级域名来保护您的入口，尽管该功能因每个入口控制器而异。对于 Nginx，这可以通过使用 Kubernetes 机密来完成。我们将在下一章讨论这个功能，但是现在，检查一下入口端的配置:
入口安全. yaml
```
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: secured-ingress
spec:
  tls:
  - hosts:
    - my.application.com
    secretName: my-tls-secret
  rules:
    - host: my.application.com
      http:
        paths:
        - path: /
          backend:
            serviceName: service-a
            servicePort: 8080
```
该配置将在默认命名空间中寻找名为`my-tls-secret`的 Kubernetes 机密，以附加到 TLS 的入口。
我们关于入口的讨论到此结束。许多入口功能可以特定于您决定使用的入口控制器，因此请查看您选择的实现的文档。
# 总结
在这一章中，我们回顾了 Kubernetes 提供的各种方法，以便向外界公开运行在集群上的应用。主要的方法是服务和入口。在服务中，您可以使用集群 IP 服务进行集群内路由，使用节点端口通过节点上的端口直接访问服务。负载平衡器服务允许您使用现有的云负载平衡系统，外部名称服务允许您将请求从集群路由到外部资源。
最后，入口提供了一个强大的工具，可以通过路径在集群中路由请求。要实现入口，您需要在集群上安装第三方或开源入口控制器。
在下一章中，我们将讨论如何使用两种资源类型将配置信息注入到运行在 Kubernetes 上的应用中:ConfigMap 和 Secret。
# 问题
1.  对于仅在集群内部访问的应用，您会使用哪种类型的服务？
2.  如何判断节点端口服务在哪个端口上处于活动状态？
3.  为什么入口比纯粹的服务更具成本效益？
4.  除了支持传统应用，外部名称服务在云平台上还有什么用处？
# 进一步阅读
*   关于云提供商的信息，来自 Kubernetes 文档:[https://Kubernetes . io/docs/tasks/administrator-cluster/running-cloud-controller/](https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/)