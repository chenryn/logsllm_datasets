checkpoint c optimally in [0, ℓ], then place optimal checkpoints
in the subintervals [0, c] and [c, ℓ], and then place checkpoints in
the next set of subintervals, etc. The problem then reduces to the
problem of placing a single checkpoint in an interval [a, b], and the
optimal location x can be determined by solving the equation
F(x) − F(a)
p(x)
= b − x .
(5)
In practice, mobile second-factor devices are often not the best
environment for running numerical solvers. One solution would
be to precompute the expectation-optimal checkpoint positions
for some fixed length ℓ (e.g., the initial length of the chain) and
distribution F and then hardcode those values into the second-
factor application. However, as time progresses, these precomputed
positions will no longer be expectation-optimal for the the length
of the remaining part of the hash chain. Moreover, one might want
to adaptively reposition the checkpoints based on the past average
time between logins of the user.
8
Repositioning the checkpoints. Each time a password is generated,
we reposition the checkpoints by computing the optimal checkpoint
positions for the length of the remaining chain. We then compute
the hash values at these positions by traversing the hash chain from
the nearest existing checkpoint. This is done in the background
after presenting the user with the generated password.
5.1 User logins as a Poisson process
One choice for modeling the distribution F(t) between logins is the
exponential distribution
p(t) = λe
F(t) = 1 − e
−λt .
−λt
The exponential distribution is a distribution of the time between
events in a Poisson process, i.e. a process in which events occur
continuously and independently at a constant average rate. Previous
works state that this is a reasonable model for web login behavior [7,
52]. In our setting, the value of the average time between logins
could vary anywhere between hours and months depending on
the specific application and whether a second factor is required on
every login, once in a period, or once per device.
For the exponential distribution, Equation 5 gives:
−e−λx + e−λa
λe−λx
= b − x .
Figure 4: Performance of checkpointing schemes. Chain
length is 1.05×106 (one year when using 30-second time slots).
Login times are assumed to be a Poisson process with mean
of 20160 (one week when using 30-second time slots).
Conveniently, this equation admits the analytic solution
x = −W (eλ(x−a)+1)
+ b + 1/λ ,
λ
(6)
where W (·) is the Lambert-W function [14]. The recursive solution
in this case can then be easily implemented on the second-factor
device.
Figure 4 compares the expected performance of the following
checkpointing procedures: naïve, expectation-optimal (obtained by
numerically solving Equations 1-4) and recursive (obtained using
Equation 6). We also compare against the pebbling scheme of Cop-
persmith and Jakobsson [13], although as we’ve noted above, their
scheme optimizes a different metric than ours, so it is no surprise
that it does not perform as well as the recursive or expectation-
optimal approaches in our setting.
Balancing worst and expected performance. One disadvantage of
both the expectation-optimal and recursive checkpoints is that they
perform poorly in the worst-case. Specifically, if a user does not
log in for a long period of time, a subsequent login might result in
an unacceptably high latency. A simple solution is to place several
additional checkpoints in order to minimize the maximal distance
between checkpoints, which bounds the worst case number of hash
computations.
Figure 5 illustrates the placement of checkpoints given by the
different checkpointing schemes discussed in this section plotted
along the probability density function of the exponential distribu-
tion.
6 IMPLEMENTATION
We implemented our scheme by extending the Google Authentica-
tor Android App and the Google Authenticator Linux Pluggable
Authentication Module (PAM) [25].
Figure 5: Illustration of different checkpointing schemes
with logins modeled by the exponential distribution.
Scheme Details and Parameters. We use passwords of length
130 to obtain the level of security discussed in Section 4. As a
concrete instantiation of a family of independent hash functions,
for 0 ≤ i < 232, we take hi : {0, 1}130 → {0, 1}130 to be defined as
hi(x) = SHA-256(⟨i⟩32∥id∥x)|130, where ⟨i⟩32 is the index of the
function represented as a 32-bit binary string, and id is a randomly
chosen 80-bit salt. Our time-based counter uses time slots of length
30 seconds with 0 being the UNIX epoch. The length of the hash
chain has to be chosen to balance the resulting maximal authentica-
tion period and the setup time (which is dominated by the time to
serially evaluate the entire hash chain). We use 221 as our default
hash chain length, resulting in a maximum authentication period
9
Manual Entry. Since our usage of QR codes requires the sign-in
device to have a camera, we present an alternative method that
can be used for devices without cameras. In these instances, our
Android app also encodes one-time passwords using a public word
list. Using a word list of 2048 short words (1 to 4 letters), as used in
S/Key, results in 12-word passwords, and using a larger 4096 word
list (of words up to 6 letters long), results in 11-word passwords.
Additionally, more specialized word lists such as those in [9] can
be used if word lists that enable autofilling and error correction
are desired. These would be particularly useful if the sign-in device
was a mobile phone.
Alternatively, it would be possible to generate the one-time pass-
words as arbitrary strings that the user would then manually enter.
Assuming every character in the strings has 6 bits of entropy (which
is roughly the case for case-sensitive alphanumeric strings), the
resulting one-time passwords would be strings composed of 22 char-
acters. While typing these one-time passwords manually would be
cumbersome, they are at least somewhat practical, as opposed to
512 bit/86 character long digital signatures.
Hardware Authentication Devices. USB-based hardware authenti-
cation devices, such as Yubikey [69] are often used instead of mobile
phone apps for generating TOTP passwords. They offer two main
advantages: (i) after the initial setup, the TOTP secret never has
to leave the secure hardware, which makes it more secure against
client-side malware, and (ii) such authentication devices are capable
of emulating a keyboard and can “type” the generated one-time
passwords into the relevant password field when the user presses
a button on the device. However, hardware tokens do not protect
the TOTP secret on the server. Additionally, the registration phase
is still susceptible to malware since the TOTP secret needs to be
loaded into the hardware token. The newer FIDO U2F protocol [59]
addresses these problems, yet it requires specialized support by the
browser and two-way communication.
Hardware authentication devices and T/Key could therefore be
well-suited for each other: the hardware device would generate
the hash chain, store the secret, and provide the server with the
initial password. When the user needs to authenticate, the hardware
token would traverse the chain and generate the one-time password.
T/Key would provide the security against server-side hacks, and the
hardware token would provide the security against client-side hacks.
Moreover, the ability of the hardware token to automatically “type”
the password would address one of T/Key’s main disadvantages,
namely that the passwords are too long for manual entry.
7 EVALUATION
We evaluated the performance of our scheme to ensure the running
times of its different stages are acceptable for a standard authenti-
cation scenario. The client Android app was tested on a Samsung
Galaxy S7 phone (SM-G930F) with a 2.3 Ghz Quad-Core CPU and 4
GB of RAM. The server side Linux PAM module was tested on a
2.6 Ghz i7-6600 CPU with 4 GB RAM running Ubuntu 16.04.
Our evaluation uses 130-bit passwords and hash chains of length
one, two, and four million, corresponding to one-year, two-year, and
four-year authentication periods when a new password is generated
every 30 seconds. We evaluate the following times:
(a) 21x21 QR encoding of a
128-bit OTP
(b) 33x33 QR encoding of a 512-
bit signature
Figure 6: Password encoding using QR codes: T/Key vs.
ECDSA signatures
of approximately 2 years and a setup time of less than 15 seconds
on a modern mobile phone (see Section 7 for more details).
6.1 Password Encoding
Since the one-time passwords in our scheme are longer than those
in the HMAC-based TOTP scheme (130 bits vs. 20 bits), we cannot
encode the generated passwords as short numerical codes. Instead,
we provide two encodings, which we believe are better suited for
passwords of this length.
QR Codes. First, our Android app supports encoding the one-
time password as a QR code. Among their many other applications,
QR codes have been widely used for second factor authentication to
transmit information from the authenticating device to the mobile
device. For example, in Google Authenticator, a website presents
the user with a QR code containing the shared secret for the TOTP
scheme, which the user then scans with her mobile phone, thus
providing the authenticator app with the secret. QR codes have
also been used for transaction authentication as a communication
channel from the insecure device to the secure one [60].
In our scheme, QR codes are used in the authentication process
as a communication channel from the secure mobile device to the
authenticating device. Such a use case was previously considered
by [56] and was shown to be practical [54]. Specifically, our app
encodes the 130 bit password as a QR code of size 21 × 21 mod-
ules, which is then displayed to the user. To log in on a different
device, the user can then use that device’s camera to scan the QR
code from the mobile phone’s screen. This method is best suited
for use on laptops, tablets, and phones, where built-in cameras are
ubiquitous, yet it can also be used on desktops with webcams. The
QR code password encoding also provides a clear visualization of
the relatively short length of our passwords compared to schemes
using public key cryptography. For example, the standard ECDSA
digital signature scheme [34] with a comparable level of security
would result in 512-bit long one-time passwords, which would con-
sequently require larger 33× 33 QR codes [62] (a visual comparison
appears in Figures 6a and 6b). More recent digital signature con-
structions [5, 8] could be used to obtain shorter signatures, yet at
384 and 256 bits, respectively, those are still considerably longer
than the one-time passwords in our scheme.
10
Table 3: Scheme Performance.
130 bit long passwords, 30 second time slots, 20 mixed checkpoints.
Auth. Period
Mean Time
Between Logins
Setup Time
(seconds)
Password Generation Time Verification Time
(seconds)
(seconds)
1 year
2 years
4 years
1 week
2 weeks
1 month
7.5
14
28
0.3
0.5
0.8
0.6
0.9
1.6
0.4
0.8
1.6
average case worst case
• Client setup time: the time it takes for the mobile phone to
first generate the salt and the secret and then traverse the
entire hash chain to compute the initial password and create
the registration QR code.
• Client password generation time: the time to traverse the
chain from the closest checkpoint. We present both the worst-
case time, which corresponds to the maximal distance be-
tween two checkpoints, as well as the expected time, which
we simulate with respect to several typical exponential dis-
tributions.
• Server verification time: the time to traverse the entire chain
on the server. This captures the longest possible period be-
tween logins. In practice, this time will be much shorter if
the user logs in regularly.
Results appear in Table 3. In general, we view several seconds
as being an acceptable time for the initial setup and a sub-second
time as acceptable for both password generation and verification.
We attribute some of the differences between the hash chain
traversal time on the server and the traversal time on the phone to
the fact that the former was tested using native C code, whereas
the latter was run using a Java App on the mobile phone.
8 ATTACKS WITH PREPROCESSING
One limitation of the previously discussed security model is that
we do not allow the adversary’s algorithm to depend on the choice
of the random function h. In practice, however, the function h is not
a random function, but rather some fixed publicly known function,
such as SHA-256. This means that the adversary could perhaps
query the function prior to receiving a challenge and store some
information about it that could be leveraged later. In this section,
we bound the probability of success of such an attack by (ST/N)2/3,
where N = 2n is the size of the hash function domain. To mitigate
the risk of such attacks, we show that by salting all hash functions
with a random salt of length n, we can bound the probability of
success by (T/N)2/3 (assuming S ≤ N ).
More formally, an inverting attack with preprocessing proceeds
as follows:
• First, a pair of algorithms (A0, A1) are fixed.
• Second, the function h is sampled from some distribution
(e.g., the uniform distribution over all random functions over
some set).
• Third, given oracle access to h (which is now fixed), prepro-
cessing algorithm A0 creates an advice string sth.
• Finally, the online algorithm A1 is given the advice string
sth, oracle access to the same h, and its input y = h(x).
The complexity of an attack in this model is usually measured
by the maximal length in bits of the advice string sth, which is
referred to as the “space” of the attack and denoted by S, and the
maximal number of oracle queries of the algorithm A1, which is
often referred to as the “time” of the attack and is denoted by T .
Note that at least for lower bounds we: (i) allow the preprocessing
algorithm an unlimited number of queries to its oracle and (ii) only
measure the number of queries made by A1, ignoring all other
computation.
The power of preprocessing was first demonstrated in the sem-
inal work of Hellman [29], who showed that with preprocessing,
one-way permutations can be inverted much faster than by brute
force. Specifically, Hellman showed that for every one-way per-
mutation f : [N] → [N] and for every choice of parameters S,T
satisfying T · S ≥ N , there exists an attack with preprocessing
which uses space S and time T . Hellman also gave an argument for
inverting a random function with time-space tradeoff T · S2 ≥ N 2.
Subsequently, Fiat and Naor [20] gave an algorithm that works for
all functions. The inversion algorithm was further improved when
Oechslin [49] introduced rainbow tables and demonstrated how
they can be used to break Windows password hashes.
Yao [68] investigated the limits of such attacks and proved that
S · T ≥ Ω(N) is in fact necessary to invert a random function on
every point in its image. Yao’s lower bound was further extended
in [17, 23, 63], which showed that attacks that invert a random
function with probability ϵ must satisfy ST ≥ Ω(ϵN). Recently,
Dodis, Guo, and Katz [18] extended these results by proving that
the common defense of salting is effective in limiting the power
of preprocessing in attacks against several common cryptographic
primitives. Specifically, for one way functions, they show:
Theorem 8.1 ([18]). Let h : [M] × [N] → [N] be a random
function. Let (A0, A1) be a pair of algorithms that get oracle access to
h such that A0 outputs an advice string of length S bits, A1 makes at
most T oracle queries, and
= h(m, x)(cid:105)
= ϵ .
Pr
h, m∈[M] ,x ∈[N]
Then,
(cid:16)
(cid:104)
h
0 , m, h(m, x))(cid:17)
(cid:19)
≥ ˜Ω(ϵN) .
m, Ah
1(Ah
(cid:18)
T
1 + S
M
The above result can be interpreted as stating that by using a
large enough salt space M (e.g., taking M = N ), one can effectively
remove any advantage gained by having an advice string of length
11
S ≤ N . Here, we study the potential of using salts to defeat attacks
with preprocessing on hash chains.
Let ℱM, N denote the uniform distribution over the set of all
functions from [M] × [N] to [M] × [N] such that for all f ∈ ℱM, N
and all (s, x) ∈ [M] × [N], f (s, x) = (s, y).
Theorem 8.2. Let functions h1, . . . , hk ∈ ℱM, N be chosen inde-
pendently and uniformly at random, where k = o(√
N). Let (A0, A1)