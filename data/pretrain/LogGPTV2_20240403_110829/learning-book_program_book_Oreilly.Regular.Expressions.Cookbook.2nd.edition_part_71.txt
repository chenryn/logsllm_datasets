As with the (X)HTML regexes, the tag name is captured to backreference 1 or 2, de-
pending on whether an opening/singleton or closing tag is matched. And once again,
you can remove the capturing parentheses if you don’t need to refer back to the tag
names.
The rwo branches of the pattern are separated in the following modified regexes. As a
result, both regexes capture the tag name to backreference 1:
Opening and singleton tags only
 that appears just before the closing <># is what allows this regex to match
both opening and singleton tags. Remove it to match only opening tags. Remove
 just the question mark quantifier, and it will matrch only singleton tags.
Closing tags only
Regex options: Case insensitive
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
See the next section, *Skip Tricky (X)HTML and XML Sections", for a way to avoid
marching tags within comments, CDATA sections, and DOCTYPEs.
SkipTricky (X)HTMLand XMLSections
When trying to match XML-style tags within a source file or string, much of the batle
is avoiding content that looks like a tag, even though its placement or other context
precludes it from being interpreted as a tag. The (X)HTML- and XML-specific regexes
we've shown in this recipe avoid some problematic content by restricting the initial
character of an element’s name. Some went even further, requiring tags to fulfill the
(X)HTML or XML syntax rules. Still, a robust solution requires that we also avoid any
a  palapo  Sdus so m sde  
greater-than and less-than symbols for mathematical operations), XML CDATA sec-
tions, and various other constructs. We can solve this issue by first searching for these
problematic sections, and then searching for tags only in the content outside of those
matches.
Recipe 3.18 shows the code for searching between matches of another regex. It takes
rwo patterns: an inner regex and outer regex. Any of the tag-matching regexes in this
recipe can serve as the inner regex. The outer regex is shown next, with separate paterns
for (X)HTML and XML. This approach hides the problematic sections from the inner
regex's view, and thereby lets us keep things relatively simple.
Instead of searching beween matches of the outer regex, it might be
easier to simply remove all matches of the outer regex (i.e., replace
(X)HTML tags without worrying about skipping over tricky sections
like CDATA blocks and  tags, since they've already been
removed.
9.1 FindXML-Style Tags | 523
---
## Page 540
Outer regex for (X)HTML
The following regex matches comments, CDATA sections, and a number of special
elements. Of the special elements, , , , , and 6
tags are matched together with their entire contents and end tags. The 7
element is also matched, and when found, the match continues until the end of the
string:
|||
# CDATA section
# Special elesent and its content
.*？
# continues until the end of the string
 is a litle-knowm but widely supported clement similar to spre>. Like cpre>, it preserves all
whitespace and uses a fixed-width font by default, but it goes one step further and displays all of its
contents (including HTML ags) as plain text. xmp> was depecated in HTML 3.2, and removed entirely
from HTMI. 4.0.
7. plaintext> is like ompo except that it cannot be turmed off by an end tag and runs until the very end of
the document. Also like xmp>, it was obsoleted in HTML. 4.0 but remains widely supported.
524 I Chapter 9: Markup and Data Fermats
---
## Page 541
(dux||xexa|sxs)>|
b(？：[>*]1[*]**|[]*)*>[\sS]*²|**]1[*]**|[]*）*>[ss]*
Regex options: Case insensitive
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
These regexes present a bit of a dilemma: because they match , ,
, , , and  tags, those tags are never matched by the
second (inner) regex, even though we’re supposedly searching for all tags. However, it
should just be a matter of adding a bit of extra procedural code to handle those tags
specially, when they are matched by the outer regex.
Outer regex for XML
This regex matches comments, CDATA sections, and DOCTYPEs. Each of these cases
are matched using a discrete patern. The patterms are combined into one regex using
the |> altemation metacharacter:
||"*]1°[^*]**|
“[]*|"]1*[^]*"|′[]*]*>]*>
Regexoptions: Case insensitive, dot matches line breaks
Regexflarer: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Here it is again in free-spacing mode:
# Comment
# CDATA section
# Docunent type declaration
])
1{^j* Single-quoted value
# Double-quoted value
"*]|*[^*"|′[^′]*)*># Markup declaration
*(
Begexptions Case insensitive, dot matches line breaks, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
And here is a version that works in standard JavaScript (which lacks the *dot matches
line breaks” and “free-spacing”" options):
|]]>|"]1*[]*|
[]*|]1*[]*1[]*）*>]*>
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
9.1 Find XML-Style Tags | 525
---
## Page 542
The regexes just shown allow whitespace via \s+> between the closing
- and > of XML comments. This differs from the *Outer regex for
differ from XML on this point. See *Find valid HTML comm
ments* on page 557 for a discussion of the differences between valid
XML and HTML comments.
See Also
Matching any and all tags can be useful, but it’s also common to want to match a specific
one or a few out of the bunch; Recipe 9.2 shows how to pull off these tasks.
Recipe 9.3 describes how to match allexcept a select list of tags.
Recipe 9.4 details the characters that can be used in valid XML element and attribute
names.
Recipe 9.7 shows how to find tags that contain a specific attribute. Recipe 9.8 finds
tags that do not contain a specific attribute.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.3 explains
character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains altermation.
Recipe 2.9 explains grouping. Recipe 2.10 explains backreferences. Recipe 2.12 ex-
plains repetition. Recipe 2.13 explains how greedy and lazy quantifiers backtrack.
Recipe 2.14 explains possessive quantifiers and atomic groups. Recipe 2.16 explains
lookaround.
9.2ReplaceTagswith
Problem
Supuodsaaos qm Suus t ut s8t1  Susop pue Suquado 1e aoeqdau o1 suem no
 tags, while preserving any existing attributes.
Solution
This regex matches opening and closing  tags, with or without attributes:
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
In free-spacing mode:
(/?)
# Capture the optional leading slash to backreference 1
b \b
# Tag name, with word boundary
（
# Capture any attributes, etc. to backreference 2
526 I Chapter 9: Markup and Data Fermats
---
## Page 543
1o
Replatcement text flavors: .NET, Java, JavaScript, Perl, PHP
Replacement text flavors: Python, Ruby
If you want to discard any attributes in the same process, omit backreference 2 in the
replacement string:
Replatcement text flavors: .NET, Java, JavaScript, Perl, PHP
Replacement text flavors: Python, Ruby
Recipe 3.15 shows the code needed to implement these replacements.
Discussion
The previous recipe (9.1) included a detailed discussion of many ways to match ay
XML-style tag. That frees this recipe to focus on a straightforward approach to search
for a specific type of tag.  and its replacement  are offered as examples, but
you can substitute those tag names with any two others.
The regex starts by matching a literal . You could use any other tag name instead if
you wanted to. Use the case-insensitive option to make sure that you also match an
uppercase B.
The word boundary (b) that follows the tag name is easy to forget, but it’s one of the
most important pieces of this regex. The word boundary lers us match only  tags,
and not , , , or any other tags that merely start with the letter
"b." We could alternatively match a whitespace token (\ss) after the name as a safe-
guard against this same problem, but that wouldn’r work fortags that have no attributes
9.2 Replace  Tags with  | 527
---
## Page 544
and thus might not have any whitespace following their tag name. The word boundary
solves this problem simply and elegantly.
When working with XML and XHTM1., be aware that the colon used
for namespaces, as well as hyphens and some other characters allowed
 as part of XML nmes, create a word bxundary. For example,the regex
could end up matching something lilse . If you're worried
about this, you might want to use the lookahead (?=[]) instead
of a word boundary. It achieves the same result of ensuring that we do
not match partial tag names, and does so more reliably.
After the tag name, the pattern "* ]I*[^*J**I′[^′ J*′ )*)) is used to match any-
thing remaining within the tag up until the closing right angle bracket. W'rapping this
pattern in a capruring group as we've done here lets us easily bring back any attributes
and other characters (such as the trailing slash for singleton tags) in our replacement
string. Within the capturing parentheses, the pattern repeats a noncapturing group
with three alternatives. The first, [^>*′ J, matches any single character except >, ", or
'. The remaining rwo alternatives match an entire double- or single-quoted sring,
Suatq noqtm siaxoeq affue qlu ueu 1eq sanea ainque qpieu no sia qpium
the regex think it has found the end of the tag.
Variations
Replace a list of tags
all of the desired tag names within a group, and alternate berween them.
If you want to match any tag from a list of tag names, a simple change is needed. Place
The following regex matches opening and closing , , , and  tags. The
replacement text shown later replaces all of them with a corresponding  or
 tag, while preserving any attributes:
)([bi]|em|big)\b((?:[^>"']1"[^"]**|′[^′]*′)*)>
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Here's the same regex in free-spacing mode:
(/?)
# Capture the optional leading slash to backreference 1
([bi]|em|big) b # Capture the tag nane to backreference 2
# Capture any attributes, etc. to backreference 3
(？:[^>']
# Any character except >,", or
# Double-quoted attribute value
# Single-quoted attribute value
528  Chapter 9: Markup and Data Fermats
---
## Page 545
Regex options: Case insensitive, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
We've used the character class  and  tags, rather than sep-
arating them with the altermation metacharacter |> as we've done for  and .
Character classes are faster than altermation because they are implemented using bit
vectors (or other fast implementations) rather than backtracking. When the difference
between two options is a single character, use a character class.
We've also added a capruring group for the tag name, which shifted the group that
matches attributes, etc. to store its match as backreference 3. Although there's no need
to refer back to the tag name if you're just going to replace all matches with 
tags, storing the tag name in its own backreference can help you check what type of tag
was matched, when needed.
To preserve alattributes while replacing the tag name, use the following replacement
text:
Replarement text flavors: .NET, Java, JavaScript, Perl, PHP
Replacement text flavors: Python, Ruby
Omit backreference 3 in the replacement string if you want to discard attributes for
matched tags as part of the same process:
Replacement text flavors: .NET, Java, JavaScript, Perl, PHP
Replacement text flavors: Python, Ruby
See Also
Recipe 9.1 shows how to match all XML-syle tags while balancing trade-offs including
tolerance for invalid markup.
Recipe 9.3 is the opposite of this recipe, and shows how to match all except a select list
of tags.
Techniques used in the regular expressions and replacement text in this recipe are
discussed in Chapter 2. Recipe 2.3 explains character classes. Recipe 2.6 explains word
boundaries. Recipe 2.8 explains altermation. Recipe 2.9 explains grouping.
Recipe 2.12 explains repetition. Recipe 2.16 explains lookaround. Recipe 2.21 explains
how to insert text matched by capruring groups into the replacement text.
625 1 m sfe1 aejay 76
---
## Page 546
9.3RemoveAllXML-StyleTagsExceptand
Problem
You want to remove a tags in a string except .
In a separate case, you not only want to remove all tags other than  and ,
you also want to remove  tags that contain attributes.
Solution
This is a perfect setting to put negative lookahead (explained in Recipe 2.16) to use.
Applied to this problem, negative lookahead lets you match what looks like a tag,
except when certain words come immediately after the opening  and 
"*]I*[^"]*"I′[^′]*)*>
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
In free-spacing mode:
</？
# Pernit closing tags