22] could not deﬁne any atomic constructs.
Now we use policy connectives to construct compound
policies from their constituents. The syntax for construct-
ing them are speciﬁed by the BNF expression in Deﬁni-
tion 3 where patomic stands for an atomic policy and φ is
a sentence. patomic is the only non-terminal in the BNF ex-
pression and it stands for any atomic policy constructed in
accordance with Deﬁnition 2.
Definition 3
p := patomic|p (cid:15) p|p (cid:16) p|p (cid:1) p| (cid:2) p|(φ :: p)|(p (cid:2) φ)|p; p|p
(Compound Policies).
(cid:16)
p ∪ p|p ∩ p|p − p|¬p|(φ : p)|(p (cid:3) φ)
As stated, a policy (re)assigns permission sets to subjects
non deterministically. That is, a policy is a mapping from
one set of permissions to another, but there could be multi-
ple candidates for the target set. The external disjunction,
denoted by (cid:15) enlarges the range of that mapping by includ-
ing permission sets allowed under either of its components.
Similarly, the external conjunction, denoted by (cid:16) limits the
range of the same mapping by including only those per-
mission sets that are allowed under both components. The
external diﬀerence operator, denoted by (cid:1) admits those per-
mission sets allowed under the ﬁrst component, but not the
second. The external negation operator, denoted by (cid:2) takes
the relational complement of the mapping denoting the orig-
inal policy that it is negating. The external scoping opera-
tor, denoted by :: restricts the domain of the original map-
ping to those permission sets satisfying the given formula
representing the scope. The external provisioning operator
(cid:2) restricts the original mapping to those permission sets in
the range satisfying the formula representing the provision.
The sequential composition operator, denoted by ; permits
accesses that are allowed as a consequence of applying its
second component after the ﬁrst. The closure operator (cid:22)
allows accesses permitted under repeated application of its
constituent policy, and is an extension of the composition
operator.
In contrast to internal operators, external operators do
not alter permission sets used by their constituents. The in-
ternal disjunction operator, denoted by ∪ permits any union
of permission sets that are allowed under either of its com-
ponents, while the internal conjunction operator, denoted
by ∩ permits any intersection of permission sets that are al-
lowed under both of its components. The internal diﬀerence
operator, denoted by - permits set diﬀerences of permission
sets between its ﬁrst and second components. The internal
negation operator, denoted by ¬ changes all positive autho-
rizations to negative ones and vice versa. Internal scoping
and provisioning operators denoted by : and (cid:3) restricts the
range and the domain of the permission sets respectively.
4. SEMANTICS
This section introduces the formal semantics of policy
compositions. We interpret policies as non-deterministic
transformers of states constructed over a many-sorted uni-
verse. Although it is well known that many sorted ﬁrst
order logic does not add any expressive power to one-sorted
ﬁrst order logic [9], we use a many sorted language for two
reasons. First is to distinguish the diﬀerences between in-
volved individual sorts, and the second is to go beyond the
ﬁrst order framework and accurately model the set theoret-
ical constraints used in access control speciﬁcations such as
RCL2000. First we present the well known structures for
our many sorted language [9].
Definition 4
(Pre-structure). A pre-structure M for
our restricted second order logic consists of (1) four count-
able, disjoint sets Us, Uo,Ua and Ur, referred to as universes
of (individual) subjects, objects, actions and roles respec-
tively and (2) a countable collection of subsets SET o×a of
Uo × Ua.
We use a pre-structure to deﬁne states as follows.
Definition 5
(State). Let M be a pre-structure. A
state s over M is a 7-tuple (Ms,s,Ms,o,Ms,a, Ms,r, Ms,pred,
Ms,f un, Ms,set) where Ms,s, Ms,o, Ms,a, Ms,r, Ms,set
are mappings from Cs, Co, Ca and Cset to Us,Uo,Ua,Ur and
SET o×a respectively. Ms,pred maps every predicate symbol
to a subset of the appropriate sort. (For example, playsRole
is mapped to a subset of Ms ×Mr). Ms,f un maps subPerm
and rolePermto total functions respectively from Us and Ur
to SET o×a.
As stated in Deﬁnition 5, a state maps all constants, func-
tions and predicates to individuals, functions over and sub-
sets of a collection of universes.
Following customary practice, in order to deﬁne satisfac-
tion, we ﬁrst enlarge the language by adding names for indi-
viduals and sets from the pre-structure to the original lan-
guage and form formulas with this enlarged set of individual
and set constants. Then, satisfaction is deﬁned as follows:
Definition 6
(Satisfaction). 1. For every n-ary
atomic predicate A, M, s |= A(a1, . . . , an) if and only if
(Mx(a1), . . ., My(an)) ∈ Mpred(A), where x and y stands
for one of the sort symbols s, o, a, r and ai is a constant of
the appropriate sort.
2. M, s |= (oi, aj) ∈ C iﬀ (Mo(oi),Ma(aj)) ∈ Mset(C) for
any set name C.
3. The extension of the deﬁnition of satisfaction from φ and
ψ to φ∧ ψ, φ∨ ψ, φ → ψ, ¬φ, ∀xφ(x), ∃xφ(x) are the same
as they are in ﬁrst order logic, where x stands for an indi-
vidual variable of the appropriate sort.
4. M, s |= ∀Xiψ(Xi) iﬀ M, S |= ψ(C/Xi) for any name C,
where ψ(C/Xi) is obtained by replacing all free occurrences
of Xi by C.
5. M, s |= ∃Xiψ(Xi) iﬀ M, S |= ψ(C/Xi) for any set name C,
where ψ(C/Xi) is obtained by replacing all free occurrences
of Xi by C.
Satisfaction given in Deﬁnition 6 does vary from the stan-
dard deﬁnition of satisfaction in a second order structure
only by the fact that subject, object, action and set names
are treated as constants. Policies can be interpreted on
states over structures, that are pre-structures satisfying prop-
erties given in Deﬁnition 7, and are explained afterwards.
173Definition 7
(Structure). A pre-structure M is said
be a structure if it satisﬁes the following conditions:
1. The comprehension schema ∃Xi∀xoj, xak((xoj , xak) ∈
Xi ↔ ψ(xoj , xak)) holds in every state.
2. SET o×a is closed under union, intersection and set dif-
ference.
3. Ms, |= ∀xaiscopeA(+xai) ↔ scopeA(−xai)) where we
use A ↔ B as an abbreviation for (A ← B) ∧ (A → B).
4.Ms,a(+xai) (cid:22)= Ms,a(−xai) for each action constant xai.
5. All states map individuals to the same elements in re-
spective sorts. That is elements of Cs, Co, Ca and Cr to the
same element in Us,Uo,Ua and Ur.
As stated, Deﬁnition 7 places several restrictions on a
pre-structure. The ﬁrst is the comprehension schema nec-
essary to interpret atomic constructs. For example con-
sider applying the atomic policy assignP(si, xoj, xak) ←
ψ(si, xoj , xak) in a state s.
Intended semantics adds all
permissions (xoj , xak) satisfying ψ(si, xoj , xak) to the set of
permissions of subject si in s. As our sets are interpreted
(implying not all subsets of Uo ×Ua are in SET o×a) we need
to ensure that those elements that satisfy ψ(si, xoj , xak) do
form a set in SET o×a. The ﬁrst two properties of Deﬁnition 7
guarantees that we are able to form the new set of per-
missions, {(xoj, xak) : Ms,|= ψ(si, xoj , xak)} as a result of
applying assignP(si, xoj, xak) ← ψ(si, xoj , xak). The third
property is an axiom that ensures that both permission and
prohibition to execute the same action are in scope simul-
taneously. The fourth property stipulates that positive and
negative actions are mapped to diﬀerent elements of Ua. The
ﬁfth property states that we only consider states in which
the individual mapping is invariant. That is, in any two
states s, s’ the individual subject si is always mapped to
the same element of Us. That implies s and s’ diﬀer only in
the interpretation of functions subPerm, rolePerm and the
scoping predicates scopeS, scopeO, scopeR and scopeR.
We model policies as non-deterministic state transitions.
However, in order to interpret internal constructs, we need
some technical deﬁnitions of operations on states. They are
given in Deﬁnition 8.
Definition 8
(Set Operations on States). Suppose
s1 and s2 are states. Then we deﬁne the mappings s1 ∪ s2,
s1 ∩ s2, s1 − s2 and ¬s1 as follows.
1.Ms1∪s2,f un(subPerm(si)) = Ms1,f un(subPerm(si)) ∪
Ms2,f un(subPerm(si)) for every subject constant si
Ms1∪s2,f un(rolePerm(ri)) = Ms1,f un(rolePerm(ri)) ∪
Ms2,f un(rolePerm(ri)) for every role constant ri
Ms1∪s2,pred(P ) = Ms1pred(P )∪Ms1pred(P ) for every pred-
icate P .
2. Ms1∩s2,f un(subPerm(si)) = Ms1,f un(subPerm(si)) ∩
Ms2,f un(subPerm(si)) for every subject constant si
Ms1∩s2,f un(rolePerm(ri)) = Ms1,f un(rolePerm(ri)) ∩
Ms2,f un(rolePerm(ri)) for every role constant ri
Ms1∩s2,pred(P ) = Ms1pred(P )∩Ms1pred(P ) for every pred-
icate P .
3. Ms1−s2,f un(subPerm(si)) = Ms1,f un(si)\
Ms2,f un(subPerm(si)) for every subject constant si
Ms1∩s2,f un(rolePerm(ri)) = Ms1,f un(ri)\
Ms2,f un(rolePerm(ri)) for every role constant ri
Ms1−s2,pred(P ) = Ms1pred(P )\Ms1pred(P ) for every pred-
icate P .
4. M¬s1,f un(subPerm(si)) =
{(oi, aj ) : (oi,−aj ) ∈ Ms1,f un(subPerm((si))}
∪ {(oi,−aj) : (oi, +aj) ∈ Ms1,f un(subPerm((si))}
M¬s1,f un(rolePerm(ri)) =
{(oi, aj ) : (oi,−aj ) ∈ Ms1,f un(rolePerm((ri))}∪
{(oi,−aj ) : (oi, +aj) ∈ Ms1,f un(rolePerm((ri))}
The intent of Deﬁnition 8 can be seen by considering the
example policy p1 ∩ p2. Suppose under p1 the set of objects
O1 are in scope and under p2 the set of objects O2 are in
scope. Then it is reasonable to expect that under policy p1∩
p2 only objects O1 ∩ O2 are in scope. That is what Ms1∪s2
does. That is, it constructs the appropriate predicates and
functions for scopes and permission sets. Now we interpret
policies as non-deterministic transformers on states. First
we deﬁne state transitions for atomic policies.
Definition 9
(Transitions for Atomic Policies).
We deﬁne a state transition corresponding to every atomic
policy as a pair of states (s, s(cid:7)
). Given the state s in deﬁn-
we only state those mapping that change among Ms,o,
ing s(cid:7)
Ms,a, Ms,r, Ms,f un, Ms,pred and Ms,set.
Suppose ψ is a formula whose only free variables are among
those appearing in α, (α ← ψ) is an atomic policy and s is
a state. Then we deﬁne the state transition relation (s, s(cid:7)
)
corresponding to the atomic policy (α ← ψ) where α is given
as follows.
1. assignP(xsi, xoj, xak) :
Ms(cid:1),f un(subPerm)(si) = Ms,f un(subPerm)(si) ∪
{(xoj, xa) : M, s |= scopeO(xoj)scopeA(xak)∧ψ(si, xoj, xak)}
for every si satisfying
M, s |= ∃xoj , xakψ(si, xoj , xak)∧scopeO(xoj )∧scopeA(xak).
Ms(cid:1),f un(subPerm)(sj) = Ms,f un(subPerm)(sj)
for all other subjects stj. For assignP(si, xoj , xak) replace
only (subPerm)(si) as computed above.
2. revokeP(xsi, xoj, xak) :
Ms(cid:1),f un(subPerm)(si) = Ms,f un(subPerm)(si) \
{(xoj, xa) : M, s |= scopeO(xoj)scopeA(xak)∧ψ(si, xoj, xak)}
for every si satisfying
M, s |= ∃xoj , xakψ(si, xoj , xak)∧scopeO(xoj )∧scopeA(xak).
Ms(cid:1),f un(subPerm)(sj) = Ms,f un(subPerm)(sj)
for all other subjects sj. For revokeP(si, xoj , xak), replace
only (subPerm)(si) as shown above.
3. assignRP(xri, xoj , xak) :
Ms(cid:1),f un(subPerm)(ri) = Ms,f un(rolePerm)(ri) ∪
{(xoj, xa) : M, s |= scopeO(xoj)scopeA(xak)∧ψ(si, xoj, xak)}.
for every ri satisfying
M, s |= ∃xoj , xakψ(ri, xoj , xak)∧scopeO(xoj )∧scopeA(xak).
Ms(cid:1),f un(rolePerm)(sj) = Ms,f un(rolePerm)(rj ) for all other
sj . For assignRP(ri, xoj , xak), replace only (rolePerm)(ri)
as shown above.
4. revokeRP(xri, xoj , xak) :
Ms(cid:1),f un(rolePerm)(ri) = Ms,f un(rolePerm)(ri) \
{(xoj, xa) : M, s |= scopeO(xoj)scopeA(xak)∧ψ(si, xoj, xak)}.
for every si satisfying
M, s |= ∃xoj , xakψ(si, xoj , xak)∧scopeO(xoj )∧scopeA(xak).
Ms(cid:1),f un(rolePerm)(rj) = Ms,f un(rolePerm)(sj ) for all other
subjects sj . For revokeRP(ri, xoj, xak), replace only
(subPerm)(ri) as shown above.
5. assignR(xsi, xrj) :
Ms(cid:1),pred(playsRole) = Ms,pred(playsRole) ∪ {(xoi, xaj) :
M, s |= ψ(xoi, xaj )}
6. revokeR(xsi, xrj) :
Ms(cid:1),pred(playsRole) = Ms,pred(playsRole) \ {(xoi, xaj ) :
M, s |= ψ(xoi, xaj )}
7. addUsr(xsi) :