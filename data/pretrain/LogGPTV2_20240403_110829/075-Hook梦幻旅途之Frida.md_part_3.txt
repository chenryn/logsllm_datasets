这个时候Hook动态注册函数就能一把尖刀，直刺So中函数所在的位
置。为了理解上更通顺，我们不考虑一步到位，而是一步步去优化H
ook代码，希望对大家有所帮助。
var RevealNativeMethods = function() {
// 为了可移植性，选择使用Frida
提供的Process.pointerSize来计算指针所占用内存，也可以直接var pSize
= 4
var pSize = Process.pointerSize;
// 获取当前线程的JNIEnv
var env = Java.vm.getEnv();
//
我们所需要Hook的函数是在JNIEnv指针数组的第215位，因为我们这里只是Hook
单个函数，所以没有引入包含全体JNI函数的数组
var RegisterNatives = 215;
// 将通过位置计算函数地址这一步骤封装为函数
function getNativeAddress(idx) {
var nativrAddress = env.handle.readPointer().add(idx *
pSize).readPointer();
console.log("nativrAddress:"+nativrAddress);
return nativrAddress;
}
// 开始Hook
Interceptor.attach(getNativeAddress(RegisterNatives), {
onEnter: function(args) {
console.log("Already enter getNativeAddress
Function!");
//
遍历数组中每一个结构体，需要注意的是，参数4即代表了结构体数量，我们这里
使用了它
for (var i = 0, nMethods = parseInt(args[3]); i <
nMethods; i++) {
var methodsPtr = ptr(args[2]);
var structSize = pSize * 3;
var methodName = methodsPtr.add(i *
structSize).readPointer();
var signature = methodsPtr.add(i * structSize +
pSize).readPointer();
var fnPtr = methodsPtr.add(i * structSize + (pSize
* 2)).readPointer();
/*
typedef struct {
const char* name;
const char* signature;
void* fnPtr;
} JNINativeMethod;
*/
var ret = {
//
methodName与signature都是字符串，readCString和readUtf8String是Frid
a提供的两个字符串解析函数，
//
前者会先尝试用utf8的方式，不行再打印unicode编码，因此相比readUtf8Stri
ng是更保险和优雅的选择
methodName:methodName.readCString(),
signature:signature.readCString(),
address:fnPtr,
};
// 使用JSON.stringfy()打印内容通常是好的选择
console.log(JSON.stringify(ret))
}
}
});
};
Java.perform(RevealNativeMethods);
由于registerNatives发生的时机往往很早，建议采用Spawn方式
注入，否则可能毫无收获。
3.3.1 代码优化
似乎很不错的样子，但是自己看一下内容，却不大如人意。
Hook输出了Java方法名，但我们之前说过，Java层方法名并不携带
包的路径，包的信息由第二个参数，所以方法名提供不了什么信息
，第二个信息是参数签名，和我们预期一致，第三个信息是函数地
址，有一个很大的问题，输出的地址是内存中的真正地址，而我们
分 析 SO 时 需 要 用 到 IDA ， IDA 加 载 模 块 的 时 候 ， 会 以 基 址 0
加 载 分 析 so 模 块 ， 但 是 SO 运 行 在 Android
上的时候，每次的加载地址不是固定的，有没有办法解决这个问题
呢？
办法是很多的，我们查看Frida官方文档可以发现，Frida提供了两
个根据地址得到所在SO文件等信息的函数。
我们对照一下结果，修改代码输出如下：
var ret = {
//
methodName与signature都是字符串，readCString和readUtf8String是Frid
a提供的两个字符串解析函数，
//
前者会先尝试用utf8的方式，不行再打印unicode编码，因此相比readUtf8Stri
ng是更保险和优雅的选择
// 只需要新增如下两行代码
module1: DebugSymbol.fromAddress(fnPtr),
module2: Process.findModuleByAddress(fnPtr),
methodName:methodName.readCString(),
signature:signature.readCString(),
address:fnPtr,
};
查看任意一条输出结果，此Native方法名为tokenDecrypt
{"module1":{"address":"0x8a339267","name":"0x17267","moduleName"
:"libm4399.so","fileName":"","lineNumber":0},
"module2":{"name":"libm4399.so","base":"0x8a322000","size":13516
8,"path":"/data/app/com.m4399.gamecenter-
1/lib/arm/libm4399.so"},
"methodName":"tokenDecrypt",
"signature":"(Ljava/lang/String;)Ljava/lang/String;",
"address":"0x8a339267"}
可以发现，两个API侧重点不同，地址为0x8a339267，函数1返回
自身地址，符号名（0x17267）,所属SO名，具体文件名和行数（这
两个字段似乎无效）,符号名name可能有些不理解，我们待会儿再讲
。函数2返回所属SO，base字段，即为基址，表示此SO在内存中起
始的位置，size字段代表了SO的大小，path即为SO在手机中的真实
路径。
图中可以看出，如果想得到IDA中的虚拟地址，两个函数都可以做到
。使用函数一的name字段，或者address减去函数二提供给我们的S
o基址。我们先通过IDA来验证tokenDecrypt这个函数结果是否准
确 。 0x17266+1 即 0x17267,name 字 段 被 验 证 。 0x8a339267-
0x8a322000=0x17267,两种方法都OK。
通过Frida提供的Api，我们得到了地址对应的SO文件以及它在IDA
中的位置，这真是可喜的事儿。除此之外，我们补充另外一种方式
来定义地址，即修改IDA中SO的基址。
效果如下：
在 我 们 这 个 场 景 下 ， 这 样 处 理 并 不 方 便 ，
但 在 IDA 动 态 调 试 时 ， 通 过 Rebease 基 址 ， 让 其 与 运 行 时 so
的 基 址 相 同 ， 可 以 极 大 的 方 便 静 态 分 析 。
需要注意的是，我们使用此Hook脚本时，目的不是印证IDA中反编
译 的 地 址 和 Frida
hook得到的地址是否相同，而是为了定位。IDA中使用快捷键G可以
迅速进行地址跳转。
接下来我们需要进一步优化脚本，参数2是jclass对象，可以让我
们获得这个方法所在类的信息，它是JNI方法Findclass的结果，因
此 我 们 要 Hook
这个JNI方法。Findclass的结果需要和对应的RegisterNative函
数匹配，这涉及到JNIEnv线程的问题，我们使用集合的方式处理。
来看一下完整的代码吧。
var RevealNativeMethods = function() {
// 为了移植性，选择使用Frida
API来计算指针所占用内存，也可以直接var pSize = 4
var pSize = Process.pointerSize;
// 获取当前线程的JNIEnv
var env = Java.vm.getEnv();
// 我们所需要Hook的函数是在JNIEnv指针数组的第6和第215位
var RegisterNatives = 215;
var FindClassIndex = 6;
// 将通过位置计算函数地址这一步骤封装为函数
function getNativeAddress(idx) {
var nativrAddress = env.handle.readPointer().add(idx *
pSize).readPointer();
return nativrAddress;
}
// 初始化集合，用于处理两个JNI函数之间的同步关系
var jclassAddress2NameMap = {};
// Hook 两个JNI函数
Interceptor.attach(getNativeAddress(FindClassIndex), {
onEnter: function (args) {
// 设置一个集合，不同的JNIEnv线程对应不同的class
jclassAddress2NameMap[args[0]] =
args[1].readCString();
}
});
Interceptor.attach(getNativeAddress(RegisterNatives), {
onEnter: function(args) {
console.log("Already enter getNativeAddress
Function!");
//
遍历数组中每一个结构体，需要注意的是，参数4即代表了结构体数量，我们这里
使用了它
for (var i = 0, nMethods = parseInt(args[3]); i <
nMethods; i++) {
var methodsPtr = ptr(args[2]);
var structSize = pSize * 3;
var methodName = methodsPtr.add(i *
structSize).readPointer();
var signature = methodsPtr.add(i * structSize +
pSize).readPointer();
var fnPtr = methodsPtr.add(i * structSize +
(pSize * 2)).readPointer();
/*
typedef struct {
const char* name;
const char* signature;
void* fnPtr;
} JNINativeMethod;
*/
var ret = {
//
methodName与signature都是字符串，readCString和readUtf8String是Frid
a提供的两个字符串解析函数，
//
前者会先尝试用utf8的方式，不行再打印unicode编码，因此相比readUtf8Stri
ng是更保险和优雅的选择
moduleName:
DebugSymbol.fromAddress(fnPtr)["moduleName"],
jClass:jclassAddress2NameMap[args[0]],
methodName:methodName.readCString(),
signature:signature.readCString(),
address:fnPtr,
IdaAddress:
DebugSymbol.fromAddress(fnPtr)["name"],
};
// 使用JSON.stringfy()打印内容通常是好的选择
console.log(JSON.stringify(ret))
}
}
});
};
Java.perform(RevealNativeMethods);
精选留言
用户设置不下载评论