title:Exactly-once Delivery in a Content-based Publish-Subscribe System
author:Sumeer Bhola and
Robert E. Strom and
Saurabh Bagchi and
Yuanyuan Zhao and
Joshua S. Auerbach
Exactly-once Delivery in a Content-based Publish-Subscribe System
Sumeer Bhola
Robert Strom
Saurabh Bagchi
Yuanyuan Zhao
Joshua Auerbach
fsbhola, robstrom, sbagchi, yuanyuan, PI:EMAIL
IBM T.J. Watson Research Center
Abstract
This paper presents a general knowledge model for prop-
agating information in a content-based publish-subscribe
system. The model is used to derive an efﬁcient and scalable
protocol for exactly-once delivery to large numbers (tens of
thousands per broker) of content-based subscribers in ei-
ther publisher order or uniform total order. Our protocol
allows intermediate content ﬁltering at each hop, but re-
quires persistent storage only at the publishing site. It is
tolerant of message drops, message reorderings, node fail-
ures, and link failures, and maintains only “soft” state at
intermediate nodes. We evaluate the performance of our
implementation both under failure-free conditions and with
fault injection.
1 Introduction
This paper discusses the guaranteed delivery service of
the Gryphon system. Gryphon is a scalable, wide-area
content-based publish-subscribe system, employing a re-
dundant overlay network of brokers [2, 3].
A guaranteed delivery service provides exactly-once de-
livery of messages to subscribers. Each publisher is the
source of an ordered event stream. A subscriber who re-
mains connected to the system is guaranteed a gapless or-
dered ﬁltered subsequence of this stream. A ﬁltered subse-
quence is gapless if, for any two adjacent events in this sub-
sequence, no event occurring between these events in the
original stream matches the subscriber’s ﬁlter. The guaran-
tee is honored as long as the subscriber remains connected,
even in the presence of intermediate broker and link fail-
ures.
Motivations for guaranteed delivery include (1) service
agreements (e.g., it is unacceptable for some stock traders
not to see a trade event that others see), and (2) message
interdependencies. That is, the messages may be used by
the subscribing application to accumulate a view (e.g., a
snapshot of a sporting event), where missing or reordered
messages could cause an incorrect state to be displayed.
Existing solutions to this problem, such as store-and-
forward routing, DCP [11], or group multicast are either
less efﬁcient, or work with a different set of assumptions.
These differences are discussed in more detail in Section 5.
The main contributions of this paper are:
1. A knowledge graph abstraction that models propa-
gation of knowledge from publishers to subscribers
through ﬁlter and merge operations, and propagation
of demands for knowledge in the reverse direction.
2. A protocol based on this knowledge model that toler-
ates broker crashes and dropped and re-ordered mes-
sages, that does not require hop-by-hop reliability of
messages, and that requires stable storage only at the
publishing broker and only soft-state [10] everywhere
else.
3. Experimental results demonstrating: a low, constant
overhead of our protocol compared to best-effort deliv-
ery, localized effects of failures without “nack explo-
sions,” and rapid recovery using alternate paths, when
available, or after repair of the failures.
The rest of the paper is organized as follows: Section 2
describes the abstract knowledge model, and section 3 de-
scribes the algorithm and its implementation in the Gryphon
system. Section 4 presents the experimental results from
this implementation. Section 5 presents related work in the
area of reliable message delivery. Section 6 presents our
conclusions.
2 Abstract Model
We represent the Guaranteed Delivery service as an ab-
stract knowledge graph such as the one in Figure 1. The
knowledge graph is a directed acyclic hypergraph whose
nodes contain state called streams and whose hyperedges
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:11 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. Example: Knowledge Graph
are labelled with operations. Each operation is one of ﬁl-
ter (shown as an optional ﬁlter predicate) or merge. The
streams contain knowledge about which ticks of time con-
tain data messages and which do not, and curiosity about
how urgently the stream requires each tick’s knowledge.
The nodes of the hypergraph are partitioned into a col-
lection of virtual brokers. In the ﬁgure, these are shown by
the dotted rectangles labelled PHB1, PHB2, IB1, etc. (the
signiﬁcance of these acronyms is discussed in Section 3).
The edges connecting nodes in different virtual brokers can
be viewed as virtual links. The mapping of virtual brokers
and links to physical broker machines and physical network
connections is described in Section 3.
Knowledge is created at source nodes, called publisher
endpoints or pubends (shown with vertical hash-marks in
the ﬁgure), as a consequence of a client’s publishing mes-
sages to a broker hosting that pubend. Knowledge is con-
sumed at sink nodes, called subscriber endpoints or subends
(shown with diagonal hash-marks in the ﬁgure), and then
delivered to subscribing clients. Knowledge propagates
from pubends to subends (downstream), under the control
of each edge’s operation. Curiosity propagates along the
edges in the reverse direction (upstream), also under the
control of the edge’s operation.
The knowledge graph models: (1) the propagation of
knowledge and curiosity, (2) the sending of messages over
links, and (3) the loss of knowledge and curiosity due to fail-
ures. Failures include broker crashes, link outages, dropped
or reordered messages on links, but not Byzantine failures.
In this section, we assume that the abstract knowledge graph
does not change dynamically, although the mapping of ab-
stract nodes in the graph to physical brokers may change.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:11 UTC from IEEE Xplore.  Restrictions apply. 
failure or deliberate discarding. For example, each knowl-
edge tick can drop from its current value to Q. In the current
algorithm, any S or D* tick is automatically lowered to F.
Knowledge accumulates when an upstream node outputs
a value to a downstream node via some edge operation. The
node changes its state to the lattice least upper bound be-
tween its previous state and the new value.
Any stream except the pubend can “forget” information.
This models the fact that only the pubends store informa-
tion stably; all other state is “soft”. Of course, the pubend
remains as a single point of failure in this model, but that
can be addressed by employing orthogonal techniques such
as shared and replicated logging disks.
An output computed by a transformation at some edge
operation can be lost or delayed on the way to the down-
stream stream. This models the fact that links can either
fail, or can deliver values of ticks out of order. Our algo-
rithm assumes that there will eventually be a “long enough”
failure free period along the path between the source and
each sink. More precisely, if a tick is inﬁnitely often sent
through the graph, it will eventually arrive without failure.
2.1.1 Curiosity
Each curiosity value C can be one of the following:
(cid:15) C: curious, meaning that some downstream subscriber
has an increased need to know ,
(cid:15) A: anti-curious/ack, meaning that no downstream sub-
scriber needs to know , either because the data has
already been delivered to the subscriber ( is or was
D*), or because  is or was S,
(cid:15) N: neutral — in this algorithm, that implies that a
knowledge value of D may be sent but need not be re-
sent, and a knowledge value of S need not be sent.
The default curiosity is N.
Curiosity and knowledge are linked in that a tick whose
knowledge state becomes F is assigned a curiosity of A and
vice-versa.
Under normal (failure-free) operation, messages are not
lost, and gaps in the time-ordering (due to links reordering
messages) will be transient. In that case, subscribers will
never need to be curious. Subscribers will receive D mes-
sages in time order, and will ack the interval from tick zero
to the tick of their latest received D message. The ack will
be propagated upstream. When all child nodes of a stream
become anti-curious for a tick, then the parent stream can
also become anti-curious for that tick. Hence, ack infor-
mation is consolidated as it travels upstream. Eventually,
all messages will be delivered to all subscribers that need
the messages, and an ever-growing preﬁx of all streams will
become both F and A.
Figure 2. Knowledge State Lattice
This assumption has been weakened in our actual imple-
mentation in order to support dynamic subscription. These
modiﬁcations are beyond the scope of this paper.
2.1 Streams, Knowledge, and Curiosity
Each node corresponds to a stream consisting of a knowl-
edge stream and a curiosity stream. Both knowledge and
curiosity streams are keyed by time, which is discretized
into ticks. Each tick  is associated with a knowledge value,
, and a curiosity value, C.
Each  value can be one of the following, and the val-
ues/states are organized into a lattice shown in ﬁgure 2.
(cid:15) Q: meaning lack of knowledge.
(cid:15) D: meaning that a data message was published during
tick . The data in the message is part of the value.
(cid:15) D*: meaning that a data message was published dur-
ing tick , and additionally, that every downstream sub-
scriber who needed that data message has delivered it
and no longer needs it.
(cid:15) S: silence, meaning either no message was sent during
tick , or else a message was sent but was ﬁltered out
en route to this stream.
(cid:15) F: ﬁnal (or “don’t-care”): the greatest lower bound of
D* and S, meaning that no data message is needed
downstream, either because none was ever sent to this
stream (the tick was once S) or else because the data is
no longer needed (the tick was once D*).
(cid:15) E: error — this state should never be reached in a
proper implementation even under failure conditions.
States change values in two ways: (1) becoming mono-
tonically higher by knowledge accumulation, and (2) be-
coming monotonically lower by forgetting. Knowledge ac-
cumulation models what happens when messages are re-
ceived. Forgetting models the loss of information due to
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:11 UTC from IEEE Xplore.  Restrictions apply. 
If there are failures, either the fact that the message
stream is not advancing, or the fact that there is a persist-
ing gap of Q ticks between non-Q ticks will trigger certain
nodes to become curious about particular ticks. This curios-
ity will ﬂow upstream, and some upstream node will answer
the curiosity by indicating which Q ticks are D, and which F
(in this algorithm F and S are treated the same), eventually
ﬁlling the gaps and advancing the stream.
2.2 Pubends
Pubends are the source nodes in the knowledge graph.
An implementation of a pubend can represent either a single
publisher, or (more typically), a consolidation of multiple
publishers sharing a single pubend. The knowledge stream
at a pubend has the form F  [DjF ]  	 1 — that is, a
range of “past” ticks whose values are no longer needed
because they have all been delivered, a range of “present”
but unacknowledged ticks, and an unknown “future”.
The implementation of a pubend assigns a unique tick
number to each received message, assigns D to that tick,
assigns F to all older ticks since the previous D, and logs
the message to stable storage. Messages that are success-
fully logged are considered published and will be delivered,
while those that are not logged are considered not published
and will not be delivered.
A simple implementation leaves all future ticks in state
Q. When no new message has been published for long
enough, the pubend changes a range of Q ticks to F without
assigning any D tick. In a previous paper [1] we showed that
if a pubend is aware of its expected publication frequency
relative to other pubends, it can improve the performance of
downstream merge operations by pre-assigning F to some
number of future ticks after the latest D.
We assume that some mechanism is in place to assure
that no two pubend streams that will ever be merged place
different data messages on the same tick, e.g. by requiring
each pubend to assign its D messages to ticks whose low-
order bits correspond to its pubend number.
2.3 Subends
The knowledge stream of a subend is used to deliver
messages to subscribing clients. We allow for either pub-
lisher order or total order.
If the subscriber requires publisher order, it is accept-
able for the message streams of multiple publishers to be
interleaved arbitrarily. In practice, we consolidate multiple
publishers in a single pubend, so it is actually the pubend
streams that are interleaved. This is illustrated in Figure 1,
where client C1 has requested a subset of Topic 1 (satisfying
c =  Y ^  > 3) in publisher order, and hence receives
1* represents 0 or more occurences
an interleaving of the data messages associated with its two
subend streams. Obviously, any protocol that implements
pubend order a fortiori implements publisher order.
If, on the other hand, the subscriber requires total or-
der, then at some point, the interleaving must be performed
by merge hyperedges. These merges are deterministic, the
order being determined by the D tick times. For example,
clients C2 and C3 have requested a subset of Topic 2 (satis-
fying i = 1) in total order. Each client is associated with a
single subend receiving a single merged stream originating
from the two pubends. In this case C2 and C3 will receive
the same stream.
The service speciﬁcation for the subscriber is the follow-
ing:
1. Safety: If a D message is delivered, then (a) it meets
the subscription constituting the OR of each path pred-
icate, where each path predicate is the AND of the ﬁlter
predicates along the path; (b) its associated tick is later
than those of other D messages previously delivered to
this subscriber from the same subend.
2. Liveness: If a message is published (meaning that it
corresponds to a D tick of some pubend) and it satisﬁes
the subscription, it will eventually be delivered.
Because of lossy propagation, a subend’s knowledge
stream may contain gaps (ticks that are Q when subsequent
ticks are not Q), but all gaps are eventually resolved. We
associate with each subend a monotonic doubt horizon D,
deﬁned as the latest time such that all ticks  < D where
C 6= A satisfy  = D. If there are D-ticks with times
later than D, we delay delivering their data until the Q ticks
have been resolved either to D or F and D advances. This
guarantees that we never deliver a message out of its cor-
rect order in the subend’s stream. Whenever D advances,
we deliver all previously undelivered D-messages in order.
Besides delivering messages in tick order to the clients,
subends are responsible for initiating the upstream ﬂow of
curiosity, marking delivered message ticks as A, silences as
A, and (eventually) gaps as C.
2.4 Filter and Merge Operations
Whenever knowledge changes at a stream, the change
is propagated through the ﬁlter or merge edges towards the
stream or streams downstream of that stream.
The knowledge propagation rules are straightforward: a
ﬁlter passes a D tick unchanged if it matches the ﬁlter pred-
icate, otherwise it converts it to an F, and it passes an F tick
unchanged; a merge passes a D tick to its output, but passes
F only if all inputs are F. Recall that the output may be ar-
bitrarily delayed before arriving at and being accumulated
into the downstream knowledge stream. As discussed in the
next section, silence propagates more lazily than data.