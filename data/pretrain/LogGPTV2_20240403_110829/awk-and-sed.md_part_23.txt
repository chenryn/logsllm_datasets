到那个字符。
时，POSIX 保留这些字符为未定义。在大多数版本的 awk 中，你就会直接得
N
和ANSIC一样，
= "Hello"
任何需要字面表示的字符c（例如，
将字符表示为十六进制值‘
将字符表示为1到3位八进制
垂直制表符
水平制表符
回车
换行符
走纸符
 变量不必初始化。awk 自动将它们初始化为空字符串，如果作
QQ群：
当你在没有列在这个表中的任意字符当前放置一个反斜杠
数字和下划线组成。
定义变量只需要为它定义一个名字并将数据赋给它即
50192241
但它通常是可用的。
- 157 -
而且不能以数字开头。变量名的
“for”)
第七章
编写 awk 脚本
---
## Page 158
我们可以将这3个语句减少为两个：
那么y的值为 2。
打印y的值。如果下面的一系列语句将出现在脚本中：
即计算×的值，
达式表示将变量×的值和1 相加并将结果赋给变量y：
**
+
操作符
表7-2：算术操作符
一旦变量被赋予了一个值，
a.
%
?
多种操作符可以用在表达式中。表7-2中列出了算术操作符。
print y
因此，其使用是不可移植的。
w = $1
print x + 1
x=1
print y 
x
这是一个普通扩展式，
+
使它加1，并将结果赋给变量y。语句：
取幂
取摸
除
减
加
描
乘
QQ群：
，那么就可以用这个变量名来引用这个值。下面的表
50192241
不再 POSIX 标准中，在系统文档中也通常没有。
158
第七章
编写 awk 脚本
---
## Page 159
达式：x=x+1更简洁。但这两个都没有下面这个表达式简洁：
表达式可以表示为不同形式，有些和其他相比更简洁。表达式x+=1比等价的表
行数的一个连续值。
返回的值。因为我们在遇到每个空行时都执行print语句，所以我们得到了空
达
下面的例子用于计算一个文件中空行的目录。
**二
操作符
%
土
￥
++
表7-3：赋值操作符
达式中的赋值操作符。
合了两个操作符：它将1和×的值相加并将结果赋给x。表7-3列出了awk 表
实际上，如果我们想将×的值增加，
和1相加并打印结果。换句话说，
虽
注意，print 语句后面的×的值却仍为1。我们没有变量×的值，我们只是将它
式 x+=1 在每次遇到空行时进行求值并将×的值增加 1.print 语句打印表达式
然这里没有为变量×赋初值。但在遇到第一个空行之前它的值一直为0。表
和**一样，这是一个普通扩展式，
print x += 1
/^$/{
#统计空行数
将取幂的结果赋给变量.a
将取幂的结果赋给变量
将取模的结果赋给变量
将除的结果赋给变量
将乘的结果赋给变量
将减的结果赋给变量
将加的结果赋给变量
变量减 1
定义
QQ群：
50192241
如果第三个语句是print×，那么将输出 1。
- 159 -
我们可以用赋值操作符+=。
它也是不可移植的。
第七章
。这个操作符组
编写 awk 脚本
---
## Page 160
均值。下面是输入文件的具体数据：
让我们来看另一个例子，
计算学生的平均成绩
程序输出了空行的数目。
我们使用一个包含3个空行的样本文件来测试这个表达式。
的数值，
下面我们在上例中使用递增表达式。另外，在每次遇到空行时不要再打印空行
后，返回的值为“1”
当遇到第一个空行时，表达式返回的值为“0“，遇到第二个空行时返回值为
例如，如果将以上例子写为：
样。位置不同可以得到不同的计算结果。
“1”
“++”是递增操作符（“_”是递减操作符）。
andrea 89 90 75 90 86
2
$ awk -f awkscr test
#统计空行数
x++在返回结果后递增×的值（后缀)
++×在返回结果前递增x的值（前缀）
++x
john 85 92 78 94 88
print x
END
++x
/~$/ 
print x++
/^$/ {
，依此类推。如果将递增操作符放置与×的前面，当表达式第一次计算
而是计算所有空行的值后才打印空行的总数。在END 模式中放置
QQ群：
其中先对一系列学生的成绩进行相加，然后计算其平
50192241
- 160-
，表达式每计算一次变量的值就增
第七章
编写 awk 脚本
---
## Page 161
$O（字段）和NF被改变时将产生令人费解的相互作用，
awk 将变量NF 定义为当前输入记录的字段个数。改变 NF 的值会有副作用。
地重新定义OFS。
和FS等效的输出是OFS，它的默认值为一个空格。我们将看到一个例子来简单
将分隔符改变为逗号，为的是读取一个名字和地址的列表。
来分隔字段。FS可以被设置为任何单独的字符或一个正则表达式，前面，我们
有一组默认值会影响对记录和字段的输入和输出的识别。
数量等。这些可以由 awk自动更新，例如，当前记录的编号和输入文件名。
变量的值可用于报告或数据处理中。
义的变量默认值可以改变，例如默认的字段和记录分隔符。第二种类型定义的
awk 中有许多系统变量或内置变量。awk 有两种类型的系统变量。第一种类型定
系统变量
在样本数据上运行以上脚本，计算出学生的平均成绩如下:
这个程序使我们了解了在awk 中编写程序是如此简单。awk 将输入解析成字段
成绩。注意我们可以省略avg 赋值而将计算平均成绩作为 print 语句的一部
该脚本将第二到第六个字段相加得到5个成绩的总和。将total的值除以5并
在学生的姓名后面有5个成绩。下面的脚本将给出每个学生的平均成绩：
（注3）。增加NF值会创建新的（空的）字段，并重新建立$O，字段由OFS的
和
隔符。
口记录。
andrea 86
$ awk -f grades.awk grades
print $1, total / 5
print $1, avg ”
john 87.4
avg = total ／ 5
#求5个成绩的平均值
jasper 8
jasper 84 88 80 92 84 
{ total = $2 + $3 + $4 + $5 + $6
，它的默认值为一个空格，
，你不用去
65
9
QQ群：
读单独的字符和声日
50192241
，这将提示 awk 可以用若干个空格和/或制表符
- 161 -
例如当前记录中字段的数量，
明数据类型。awk 将自动替你做这些工
第七章
，尤其是当NF减小时
。系统变量FS 定义字段
编写 awk 脚本
当前记录的
乐
---
## Page 162
print 语句修改为：
现在我们来看一些例子，它们以变量NR开头。将前面计算平均成绩的脚本中的
OFMT的值是什么。
之前转换为一个字符串。CONVFMT 控制这种转换，
这里的数字表达式5.5+3.2（结果是8.7）的值，
注意：
注3：很不幸，POSIX标准在这一点上没有提供应有的帮助。
们的值，在POSIX awk 中为FS 赋值不影响当前的输入行，它仅影响下一个输入
所以可以在 BEGIN过程中定义它们。然而，也可以在脚本的任何位置重定义它
通常情况下，因为希望在读入第一个输入行之前设置字段和记录分隔符的值
文件相关的当前记录的代码。
前输入文件的名称。当应用多个输入文件时，
输入记录的编号。它可以用来给列表中的记录编号。变量FILENAME 中包含了当
记录“中，
和RS输出等价的是ORS，它的默认值也是一个换行符。在系一部分“处理多行
它的值的首字符的惟一变量。
awk 还定义了记录分隔符 RS 为一个换行符。RS 有一点例外，它是 awk 仅仅注意
的字段被设置为一个空字符。BellLabs awk 没有改变$O.
值来分隔。在NF 减小的情况下，gawk 和 mawk 重新建立记录，超过新的 NF 值
4
用 OFMT 来实现这个功能。OFMT 可以做相同的工作，但是控制执行 print 语
“%d”
例
最
立出来。注意，证书转换为字符串时总是作为整数看待，而不管CONVFMT和
进行数据的转换。POSIX委员会想将输出转换的任务从简单的字符串转换中
如：
后
print NR ".", $1, avg
str = (5.5 + 3.2) " is a nice value"
，POSIX增加了一个新的变量 CONVFMT，它用来控制数字到字符串的转换。
将使所有的数字作为整数转变为字符串。
awk 升级为新的版本。
的新值分隔字段，因此，你应该测试你的 awk 的性能，如果可能，将
在1996年6月以前的BellLabs awk版本中，UNIX的 awk 版本在这点
的字段，并将字段分隔符设置为不同的值，
上没有遵守 POSIX的标准，
，我们将解释如何改变记录分隔符的默认值。awk设置变量NF 为当前
QQ群：
50192241
在这些版本中，
- 162
变量FNR 被用来表示与当前输入
，它的默认值为“%.6g“，
，必须在它被用于字符串的连接
在 POSIX标准之前，awk 
那么当前输入行将使用FS
如果还没有引用一个单独
第七章
编写 awk 脚本
这
句
使
---
## Page 163
和NF可以实现该引用。如果有6个字段，那么“$NF”
的相同。也可以用NF 来引用每个记录的最后一个字段。使用“$”
序使用了一个正则表达式来表示NF的值。程序执行的输出结果如下：
一下名字列表：
另一个常用的系统变量是NF，它的值被设置为当前记录的字段个数。就像我们
用。OFS可以重定义为一系列字符，例如逗号后面跟一个空格。
如果输入字段由制表符分隔，
默认情况下，逗号将在输出中产生一个空格（OFS的默认值）。例如，你可以
这个程序修改了默认的字段分隔符，并使用NR打印记录的总数。注意，这个程
当读入最后一行后，NF 的值是读入的输入记录的个数。它可用于END 过程中来
运行修改过的脚本输出如下结果：
使
会
宗
立
在下一部分看到的那样，
使用 BEGIN 过程将 OFS 重定义为制表符。那么前面的 print 语句将产生如下输
对下面的表达式中逗号将起什么作用产生疑问：
在print语句中用逗号分隔参数时，将产生输出字段分隔符（OFS）。你或许
生总结报告。下面是 phonelist.awk 脚本修改过的版本。
print NR ".", $1, avg 
3
Phyllis Chapman, 879-0900
John Robinson, 696-0987
print NR, 
END { print 
BEGIN { FS = ",
#输入文件-
# phonelist.awk－打印名字和电话号码。
.7
I print $1 ",
3
7
 records processed.
 jasper 85.6
 andrea 86
 john 87.4
 jasper 85.6
andrea 86
john 87.4
"records processed. "}
QQ群：
一名字、公司、街道、城市、
 $6 1
*"
”#用逗号分隔字段
可以用NF 来测试一个记录的字段个数是否与所期望
50192241
并且希望产生相同的输出时，
-163
、州和邮编、电话
第七章 
与“$6”一样。假定有
这种方法特别有
编写 awk 脚本
字段操作符
---
## Page 164
我们可以使用下面的脚本来打印第一个和最后一个字段：
行符用“\n”
为了处理这种包括多行数据的记录，
这个记录有6个字段，记录之间用空行分隔。
一行放置公司名、一次类推。下面是一个记录样本：
前面我们了解了处理姓名和地址的文件的例子。让我们假设相同的数据保存在
分，我们将演示如何读入一个记录，而记录中的每个字段都由单独一行组成。
处理多行记录
以上介绍了基本的系统变量，也是最常用的系统变量，其他更多的系统变量列
我们所有的例子中用到的输入文件其记录都是由单独一行组成的。在这一部
的美国总统。
举
注4：这个方案被 Martin Van Buren 打破了；幸运的是，我们只列出了最近
可以看出每个人的姓在记录中的字段号是不同的。这时可以用“$NF”打印每个
在附录二中，
#block.awk－打印第一个和最后一个字段
BEGIN {FS = "\n"; RS = "" }
696-0987
MA 01760
978 CommonweaIth Ave.
John Robinson
Bill Clinton
Boston
Geor ge
Ronald Reagan
Koren Inc.
Jimmy Carter
Gerald R. Ford 
Richard Mi lhouse Nixon 
Lyndon B. Johnson 
John Kennedy 
Bush
来表示，
，下面我们将介绍在本章随后的内容中需要的新的系统变量。
QQ群：
并将记录分隔符设置为空字符串，它代表一个空行。
50192241
- 164 -
我们可以将字段分隔符定义为换行符，换