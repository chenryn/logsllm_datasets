@retry(stop_max_attempt_number=3)
def fun(i):
    res = requests.post("http://47.104.243.99:10000/show.php",data={'rp': 
str(i)+"a"}, timeout=1).text
    return int(re.search(r'value:(\d+)', res).groups()[0])
data = []
for i in trange(100):
    x = 1 0:
    Ideal = ideal(new_pol[:m-1])
    GB = Ideal.groebner_basis()
    function_variables = var([str('y%d' % i) for i in range(1, 1 + m)])
    res = solve([pol(function_variables) for pol in GB], function_variables)
    print('got %d basis' % len(GB))
    print('solved result:')
    print(res)
    for tmp_res in res:
        PRRR. = PolynomialRing(QQ)
        q = abs(PRRR(res[0][0](x, y)).coefficients()[0].denominator())
        p = N[-1] // q
        print(p)
        PR. = PolynomialRing(Zmod(gift[0]))
        f = x+p*p
        p0 = f.small_roots(X=2**377,beta=0.4)
        print(p0)
from Crypto.Util.number import *
p0 = 
6601476750357138521101717660776334971038819446760424810095851732566271947341582017
33782379772904619044847045528
a = 
1963937033556943247976305159158522101447367788955039599179048450888566743926955247
8707981442189040533366889400119271673542082318299388406297999036007147303
n = 
2772376005350706049827556875306835539682077370061918816746526621038297451700751410
3867564482087405507515959966706554934964205404881348351889044241193975234073773967
5418033690476806266797778555213533207465163779521569048913825026715069976056233598
1221373514517478952453441219575375079679006773747047617834173989102525937805892711
1048889523590743162829359382195037118102715764499906665356176982743026106087164205
3787731565500220222167796974981051905144068426717328395576209125468019359041975980
3792092522396866082127834689989814101778960335004653997186447696576325163069138468
91585595993084339666033107446181172277276433
c = 
2760636399814468041564108733495218226495016501844677506118238842533107398858038164
3453054081489645849425761993731544272820301226460981652556169928528701320395959879
7054534001096578805755681450160768405774996301474074393944462347973636169218081984
3301534319394485594681825351788447076248436135572045435686257869794750796703710663
6830632467813691802102182479509851934624551385526118228245729176141626489526643204
8606791787091254891511427061745992596141762728392285528185461068232009017910209684
8840021779550393079826539161616034777260151632827530282421179954007529046227468493
10289816035440196713284078934120783610828506
e = 65537
p = a*a+p0
print(n%p)
q = n//p
d = inverse(e,(p-1)*(q-1))
m = pow(c,d,n)
password = long_to_bytes(m)
print(password)
def ModSquareRoot(a, p):
    '''
    Solve x such that `x^2 ≡ a (mod p)` where p is a prime,
    returns all the solution(s), None if no solution.
    '''
    # assert(isPrime(p))
    l = Legendre(a, p)  # The Legendre symbol of a over p.
    if l == -1:
        return None
    elif l == 0:
        return [0]
    if p % 4 == 3:  # which is quite easy to compute.
        R = pow(a, (p + 1) // 4, p)
        return [R, p - R]
    else:
        return TonelliShanksAlgorithm(a, p)
def TonelliShanksAlgorithm(a, p):
    '''
    Solve the equation `x^2 ≡ a (mod p)` where `p ≡ 1 (mod 4)`.
    returns all the two solutions to the equation.
    '''
    # 1. Factor `p - 1` into `2^S * Q` where Q is odd.
    Q = p - 1
    S = 0
    while Q & 1 == 0:
        S += 1
        Q //= 2
    # 2. Find a NR(p).
    y = 2
    while Legendre(y, p) != -1:
        y += 1
    # 3. Calculate the four quantities.
    R = pow(a, (Q + 1) // 2, p)
    c = pow(y, Q, p)
    t = pow(a, Q, p)
    E = S
    # 4. Loop.
    while t != 1:
        for i in range(1, E):
            if pow(t, 2 ** i, p) == 1:
                break
        b = pow(c, 2 ** (E - i - 1), p)
        R = R * b % p
        c = pow(b, 2, p)
        t = c * t % p
        E = i
    return [R, p - R]
def Legendre(a, p):
    '''
    The Legendre Sybmol.
    returns 1 if a is QR(p), or -1 if NR(p), or 0 if a divides p.
    '''
    if a % p == 0:
        return 0
    # Euler's Criterion
    return 1 if pow(a, (p - 1) // 2, p) == 1 else -1
n = 
2117843261062449598004293938015161415459371371668170430315799079149546065057868475
7346042039830158587943317212798132485344732747170239886154644974255867824642713748
9119393011062932179176706222634850657137978152066894510229267994694592953689057828
553095582686088957079730979614261684887411889405151543286817647
e = 4096
c = 
7960543844055364868287148633795142716685959511835217693066704697905585857732368807
7196331968890720138280335861846478151906630528186617757141156284674894419533494114
0311645043379804007377469244456415418854362272807067665055157997507127914177329742
7759037954640552890794018051954991800531763827961828499701115
flags = [c]
for i in range(12):
    tmp = []
    for j in flags:
        s = ModSquareRoot(j, n)
        if s:
            for s0 in s:
                if(not(s0 in tmp)):
                    tmp.append(s0)
    flags = tmp
for flag in flags:
    print(long_to_bytes(flag))
ezl1near
按如下方式构造c即可每次求出secret的一项，可能存在多解，使用两次机会来验证。
from pwn import *
import re
import hashlib
HOST = "47.104.243.99"
POST = 31923