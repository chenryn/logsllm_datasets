# phpSAFE: A Security Analysis Tool for OOP Web Application Plugins

## Authors
- Paulo Jorge Costa Nunes
- Jos√© Fonseca
- Marco Vieira

## Conference
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
The rapid development of complex web applications has led to an increasing reliance on third-party server-side plugins. However, many plugin developers have limited programming skills, leading to a proliferation of security vulnerabilities. Best practices recommend systematic code review for ensuring security, but free tools often lack support for Object-Oriented Programming (OOP), which is prevalent in modern web applications. To address this issue, we introduce phpSAFE, a static code analyzer that identifies vulnerabilities in PHP plugins developed using OOP. We evaluated phpSAFE against two well-known tools using 35 plugins for a widely used Content Management System (CMS). Our results show that phpSAFE outperforms the other tools and reveals that a significant number of plugins are being distributed with multiple vulnerabilities, which tend to increase over time.

## Keywords
Static analysis, web application plugins, security, vulnerabilities

## I. Introduction
Web applications are becoming increasingly important as they are used by millions of people for both work and leisure, handling sensitive information such as financial and personal data. The demand for developing complex web applications under tight timelines is growing, leading to the widespread use of Content Management Systems (CMS) frameworks. These frameworks can be extended with third-party server-side plugins, which are often developed by individuals with varying levels of programming expertise. This leads to a high risk of security vulnerabilities, as core CMS providers do not typically perform quality assurance on these plugins. 

Source code review is essential for improving software security, but it is a resource-intensive task that requires automated tools. While there are several tools available, most free tools lack the ability to analyze OOP code, which is commonly used in CMS development. This limitation results in undetected vulnerabilities and false alarms.

In this paper, we present phpSAFE, a source code analyzer for PHP-based plugins that detects Cross-Site Scripting (XSS) and SQL Injection (SQLi) vulnerabilities. phpSAFE was developed with OOP and plugin security in mind, incorporating OOP concepts like objects, properties, and methods. We evaluated phpSAFE by comparing its performance with two well-known free tools, RIPS and Pixy, using 35 WordPress plugins from 2012 and 2014. Our results show that phpSAFE detects more vulnerabilities with fewer false alarms and that the number of vulnerabilities in plugins is increasing over time.

## II. Background and Related Work
XSS and SQLi are common web application vulnerabilities that allow attackers to access unauthorized data, impersonate users, and execute malicious code. Static code analysis is a technique used to detect defects in software, including security vulnerabilities. It involves inspecting the source code without executing it, achieving 100% code coverage and analyzing all possible execution paths. Static analysis uses taint data to track the flow of uncontrolled input from sources to sensitive sinks, where an attack can occur.

Several static analysis tools have been developed for PHP, including Pixy, RIPS, and WebSSARI. Pixy and RIPS are effective but do not support OOP, leading to missed vulnerabilities in modern web applications. Commercial tools like Fortify 360 offer comprehensive analysis but come with high licensing costs.

## III. The phpSAFE Tool
phpSAFE is a static code analyzer designed to detect XSS and SQLi vulnerabilities in PHP plugins, including those developed using OOP. It requires a local web server with the PHP interpreter and a web browser. The tool provides a web interface for specifying search and output options, and the results are presented in a web page, detailing vulnerable variables, entry points, and data flow.

phpSAFE is designed for easy integration into the software development process. It can be included in a PHP project as an API, and its functions are accessible through the instantiation of a single PHP class called `PHP-SAFE`. The source code analysis in phpSAFE consists of four stages: configuration, model construction, analysis, and results processing.

### A. Configuration Stage
During the configuration stage, phpSAFE loads the necessary data, including the list of vulnerabilities (currently XSS and SQLi) and the target CMS framework's specific functions and APIs. This setup ensures that the analysis is tailored to the specific environment and context of the plugin.

---

This optimized version of the text is more structured, coherent, and professional, making it easier to read and understand.