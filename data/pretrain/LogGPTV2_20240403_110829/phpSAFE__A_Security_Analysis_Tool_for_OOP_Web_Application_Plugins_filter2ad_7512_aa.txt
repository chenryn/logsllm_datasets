title:phpSAFE: A Security Analysis Tool for OOP Web Application Plugins
author:Paulo Jorge Costa Nunes and
Jos&apos;e Fonseca and
Marco Vieira
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
phpSAFE: A Security Analysis Tool for OOP Web Application Plugins 
Paulo Nunes, José Fonseca 
CISUC, University of Coimbra 
UDI, Polytechnic Institute of Guarda 
Portugal 
PI:EMAIL, PI:EMAIL 
Marco Vieira 
CISUC, University of Coimbra 
Portugal 
PI:EMAIL 
Abstract—There is nowadays an increasing pressure to develop 
complex web applications at a fast pace. The vast majority is built 
using frameworks  based  on third-party  server-side  plugins that 
allow  developers to  easily  add  new features. However,  as  many 
plugin  developers  have  limited  programming  skills,  there  is  a 
spread  of  security  vulnerabilities  related  to  their  use.  Best 
practices  advise  the  use  of  systematic  code  review  for  assure 
security, but free tools do not support OOP, which is how most 
web applications are currently developed. To address this problem 
we  propose  phpSAFE, a static  code  analyzer  that  identifies 
vulnerabilities in PHP plugins developed using OOP. We evaluate 
phpSAFE  against  two  well-known  tools  using  35  plugins  for  a 
widely  used  CMS. Results  show 
that  phpSAFE  clearly 
outperforms other tools, and that plugins are being shipped with 
a considerable number of vulnerabilities, which tends to increase 
over time.
Keywords—Static  analysis;  web  application  plugins;  security; 
vulnerabilities 
I.
INTRODUCTION
The number and importance of web applications is growing 
exponentially fast in a world where web browsers are ubiquitous 
and used by everyone. Nowadays, almost everything is availa-
ble, displayed, discussed, shared, processed or traded on the web 
and the demand for building new web applications is enormous. 
In fact, millions of people rely on web applications, either for 
work or leisure, accessing and managing sensitive information 
like financial and personal data. 
The demand for developing web applications with increased 
complexity in very tight time constraints is making a huge pres-
sure to build more at a lower cost. Many web applications are 
built  on  top  of  Content  Management  Systems  (CMS)  frame-
works that can be easily deployed and customized to meet the 
requirements of a myriad of different scenarios, like personal 
web  sites,  blogs,  social  networks,  webmail,  banking,  e-com-
merce, etc. To cope with this diversity, most CMS-based appli-
cations can be extended and configured with third-party server-
side plugins provided by multiple developers. 
The number of CMS applications is huge and there are thou-
sands of plugins provided by third-party developers. In practice, 
developers  with  unknown  agendas  and  uncontrolled  software 
programming skills implement these plugins, which ultimately 
leads  to  suspicious  trust  levels. The  problem  becomes  even 
worse as core CMS providers do not run quality assurance pro-
cedures on the third-party plugins they use, even for those made 
available directly on untrusted web sites. The only guarantee is 
related with the comments and ratings of the plugins by their end 
users and the number of downloads. This is clearly not enough 
and the reality is that no one can fully trust on the security of the 
plugins.  Not  surprisingly,  many  of  these  plugins  can  be  ex-
ploited by malicious minds, which is the case in many situations 
[1].  
Source code review is a key activity to improve the security 
of a software product. This can be confirmed by its relevance in 
the most important secure software development lifecycles, like 
Microsoft SDL, CLASP and Software Security Touchpoints [2].
However, source code review is a resource intensive task that is 
only feasible if supported by automated tools. There are several 
tools that can be used, but the vast majority of plugin developers 
cannot afford the expensive commercial source code analyzers.
Although they can use free tools, like RIPS or Pixy, a key limi-
tation of these tools is the absence of capabilities to analyze Ob-
ject  Oriented  Programming  (OOP)  code, which  is  nowadays 
largely  used  for  developing  CMS  applications  [3].  Another 
drawback is the lack of knowledge on the CMS framework for 
which the plugin is being developed. Indeed, when analyzing the 
plugin, such tools are not aware of input and output vectors and 
of filtering functions included in the API of the CMS  frame-
work. These limitations lead to vulnerabilities being left unde-
tected  and  at  the  same  time  to  the  generation  of  many  false 
alarms. 
In this paper we present phpSAFE, a source code analyzer 
for PHP based plugins able to detect Cross Site Scripting (XSS) 
and SQL Injection (SQLi) vulnerabilities. phpSAFE is a follow-
up of a project whose development was requested by Automat-
tic, the developer of WordPress [4], with the goal of improving 
the  security  of  a number  of  plugins.  The tool  was  developed 
from the ground up with OOP and plugin security in mind, thus 
including  OOP concepts like  objects, properties and methods. 
To evaluate phpSAFE we compared its ability to detect plugin 
vulnerabilities with two well-known free tools, RIPS and Pixy. 
As target CMS framework we selected WordPress because it ac-
counts for about 23% of the all the web sites [4] and has a market 
share of approximately 60% among all CMS [5]. From the vast 
collection  of  plugins  available  we  selected  35  with  different 
sizes and complexities. As we also wanted to study how the tools 
behave regarding the evolution of plugins over time, we consid-
ered two versions of each plugin: one from 2012 and another 
from 2014. 
Results show that phphSAFE is able to detect more vulnera-
bilities than the other tools, with fewer false alarms. We also ob-
served that both phpSAFE and RIPS deal well with the evolution 
of plugin code. A key observation is that plugins that are cur-
rently being used in thousands of WordPress installations have 
dangerous XSS and SQLi vulnerabilities and this number is in-
creasing over the years. In fact, we discovered more than 580 
vulnerabilities in the plugins analyzed, many of them very easy 
to detect and exploit. We also verified that developers did not 
fix many vulnerabilities even after knowing them for more than 
PEst-OE/EGE/UI4056/2014 – project financed by Science and Technology Foundation
Project ICIS - Intelligent Computing in the Internet of Services (CENTRO-07-ST24-FEDER-
002003), co-financed by QREN, in the scope of the Mais Centro Program and European Union's 
FEDER
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.16
DOI 10.1109/DSN.2015.16
299
299
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply. 
(cid:120)
(cid:120)
one year. 
The outline of this paper is as follows. The next section in-
troduces background concepts and relevant related work. Sec-
tion III presents the phpSAFE tool. Section IV details the meth-
odology used to evaluate phpSAFE and Section V discusses the 
results. Finally, Section VI concludes the paper.  
II. BACKGROUND AND RELATED WORK
XSS and SQLi are two of the most common vulnerabilities 
found in web applications and are also widely exploited by hack-
ers and the organized crime [6][7]. A XSS attack consists of the 
malicious injection of HTML and/or other scripting code (fre-
quently Javascript) in a vulnerable web page. SQLi attacks take 
advantage of unchecked input fields in the web application in-
terface to maliciously tweak the SQL query sent to the back-end 
database. Both XSS and SQLi open the door for attackers to ac-
cess unauthorized data (read, insert, change or delete), gain ac-
cess  to  privileged  database accounts,  impersonate  other users 
(such as the administrator), mimic web applications, deface web 
pages, view and manipulate remote files on the server, inject and 
execute server side programs, etc.   
Static code analysis is a technique that consists in inspecting 
the source code of software to detect defects. These defects may 
be flaws that prevent  fulfilling the software specification, but 
they may also be related to security problems. In fact, static anal-
ysis is considered by many as the most efficient way to automat-
ically locate vulnerabilities in software developed for the web 
[8][9][10][11]. However, static analysis has some limitations re-
garding  the  precision  of  the  results,  when  compared  to  other 
techniques,  like  dynamic analysis.  In  fact,  it  suffers  from the 
conceptual limitation of undecidability that does not affect dy-
namic analysis [12]. Besides, precise static techniques are com-
putationally expensive, which may be a drawback when analyz-
ing large applications or a large volume of files. Moreover, static 
analysis requires access to the source code while dynamic anal-
ysis assesses the software as a black box. On the other hand, dy-
namic analysis may leave a large percentage of the code untested 
due to the difficulty in viewing all possible decision flows and 
boundary  conditions. Static  code  analysis  uncovers  security 
problems by looking at the source code without executing it, so 
it may achieve 100% code coverage, being able to analyze all 
the possible execution paths. In practice, it is able to find prob-
lems in parts of the code that dynamic analysis may never reach. 
Static analysis uses the concept of taint data to locate vulner-
abilities [10][13]. Taint data starts with variables that come from 
an uncontrolled environment (the source), which can be mali-
ciously manipulated from the outside [13]. When a tainted vari-
able is used by the software in some sensitive way (the sink) an 
attack  becomes  possible.  The data  flow  between  sources and 
sinks is modeled and analyzed using several program analysis 
techniques, such as inter-procedural and context-sensitive data 
flow analysis [12]. During the process, tainted data may propa-
gate to other program variables, making them also tainted. Also,
tainted variables may become untainted using a variable valida-
tion process that is dependent on the variable type and on the 
vulnerability type being prevented.  
Performing static analysis requires building and analyzing a
Control  Flow  Graph  (CFG)  of  the  execution  of  the  program. 
This is achieved by applying techniques like: 
(cid:120) Context sensitive data flow analysis – the analysis takes into
account all possible paths of execution of the program by 
considering all conditional jumps.  
Inter-procedural or global analysis – tainted data can reach 
a  function  from  its  parameters,  user input  variables,  other 
functions, and from global variables, so it depends on the 
global state of the program. The analysis also verifies if the 
function is able to sanitize the tainted data. 
Intra-procedural or local analysis – this  follows the same 
procedure as the inter-procedural analysis, but it only pro-
cesses  the  inside  of  the  function,  without  considering  the 
context from which the function is called. 
(cid:120) Functions summaries – a function is parsed only once. The 
summary of this analysis is reused in subsequent calls to de-
termine the effects on the context of the calling code.  
(cid:120) Whole-program analysis – a function is parsed every time it 
is called. A way to perform this is to replace each function 
call by the function body (inline function), which results in a 
huge program. Consequently, this method requires a lot of 
memory and processing power. 
Several static analysis tools have been developed to detect 
vulnerabilities in PHP code. Jovanovic et all developed Pixy, a 
Java tool to detect XSS and SQLi vulnerabilities [10]. Pixy uses 
a  flow-sensitive,  inter-procedural  and  context-sensitive  data 
flow analysis to determinate if user data reaches sensitive sinks 
without being fully sanitized. It performs precise alias and literal 
analysis to refine the taint process and improve the precision of 
the detection, but it does not parse Object Oriented constructs. 
Pixy is a command line tool and provides a text-based report of 
the vulnerabilities offering several verbosity levels. 
Dahse and Holz developed RIPS, a tool based on the speci-
ficities  of  the  PHP  language  that  performs  a  comprehensive 
analysis and  simulation  of  built-in language  features,  such as 
PHP functions, taking into account only the called arguments 
that have to be traced [8]. It also includes information about user 
input variables, sensitive skins, sanitization functions, secure an 
unsecure PHP built-in functions, and other PHP features. Fur-
thermore,  RIPS  performs  a  context-sensitive  string  analysis 
based on the current markup context, source type, and PHP con-
figuration. RIPS is based on the abstract syntax tree of the PHP 
script and performs intra- and inter-procedural analysis to create 
the respective control flow graph, which consists of linked basic 
blocks  and  branches  according  to  conditional  program  flow 
analysis. RIPS is able to perform backward-directed taint analy-
sis for 20 different types of vulnerabilities, including XSS and 
SQLi. However,  the tool  does not  parse  PHP  objects,  conse-
quently  it misses  encapsulated  vulnerabilities in modern  OOP 
based web applications and plugins [15].
Huang e el., the pioneers of static analysis, developed a tool 
called WebSSARI [9]. It uses a lattice of security levels to track 
the taintedness of variables through the program. It was made 
unavailable in 2006 and further advances were implemented in 
the commercial tool CodeSecure. PHP-SAT is an open-source 
static analysis tool that uses intra-procedural data flow analysis, 
developed by Bouwers written in Stratego/XT, however there is 
no stable release and its development ceased in 2007 [16]. For-
tify 360 is a commercial tool that works by compiling program 
code  to  a  generalized  intermediate  language  and  building  a
model from that. It allows detecting more than 300 categories of 
vulnerabilities in 17 programming languages, but has a high li-
censing cost. 
300300
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply. 
III. THE PHPSAFE TOOL
 phpSAFE is a static code analyzer for detecting XSS and 
SQLi vulnerabilities in PHP plugins, including the ones devel-
oped using OOP [18]. The only requirement to run phpSAFE is 
a local web server with the PHP interpreter enabled and a web 
browser. phpSAFE has a web interface that allows the end-user 
to specify search and output options, and performs vulnerability 
scanning  in  PHP  applications  and  plugins. The  output  of  the 
analysis is presented in a web page that helps reviewing the re-
sults, including the vulnerable variables, the entry point of the 
vulnerability in the source code PHP file, the flow of the vulner-
able data from variable to variable, etc. 
phpSAFE is prepared to be easily integrated with the soft-
ware development process of other PHP projects. For example, 
the use of phpSAFE can be part of the software development 
lifecycle of a company, it can be used to automate the process of 
analyzing a large quantity of PHP scripts residing in different 
locations, it can be tuned to produce and store the results in other 
formats or distribute them over the network, etc. This integration 
ability is easily achieved by including phpSAFE in a PHP pro-
ject, like an API. Since phpSAFE is developed in OOP, its func-
tions  become  accessible  through  the  instantiation  of  a  single 
PHP class called PHP-SAFE, which receives as input the PHP 
file to be analyzed and delivers the results in the properties of 
the object instantiated from the PHP-SAFE class. 
phpSAFE source code analysis is based on four stages: 1) 
configuration, 2) model construction, 3) analysis, and 4) results 
processing, as illustrated in Fig. 1.
A. Configuration stage 
During  this  stage,  phpSAFE loads the  configuration  data, 
containing the list of vulnerabilities (currently XSS and SQLi) 
correlated with the PHP language functions, and the target CMS 