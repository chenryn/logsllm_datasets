66.7% 
0.0% 
100.0%  0.0% 
0.0% 
0.0% 
0.0% 
22.6%  25.8%  5.4%  33.3%  12.9%
22.1%  25.7%  8.0%  37.2% 6.7% 
3.3  Detailed  classification  and  fault  emulation 
discussion
For  practical  fault  injection  purposes,  the  fault  types 
provided by ODC are too broad, meaning that  many dif-
ferent  faults  are  encompassed  by  the  same  type.  Clearly, 
further  refining  is  needed,  not  in  the  sense  of  an  alter-
native classification but as an additional detail to ODC.  
We propose to implement this step by analyzing faults 
from the point of view of the (program) context in which 
they  occur  and  relate  the  faults  with  programming 
language constructs. From this perspective, a defect is one 
or  more  programming  language  construct  (statements, 
expressions,  etc)  that  is  either  missing, wrong  or  in 
excess.  According  to  this  idea,  we  classified  each  fault 
according  to  its  nature  which  can  be  one  of  these: 
Missing  construct, Wrong  construct,  or  Extraneous 
construct. This  classification  is  particularly  pertinent 
when  considering  fault  emulation,  since  emulating  an 
omission  (missing  construct)  is  substantially  different 
from emulating an extraneous construct.  
As  we  can  see  in  table  4,  faults  of  the  extraneous 
nature  are  clearly  less  frequent  than  the  other  two; 
missing  programming  constructs  is  clearly  the  dominant 
type of software bug. 
Table 4 – Fault distribution by fault nature.
Fault nature 
X
E
D
C
m
V
i
i
v
C
F
f
h
2
d
P
I
M
A
G
e
o
J
S
E
N
S
Z
h
s
a
B
l
e
n
r
e
K
L
l
a
t
o
T
Missing cons. 
Wrong cons. 
Extraneous cons
3  157 35 11  17  34  1 
6  41  2 
8  85 18
0 
0 
0 
0 
9 
0 
7 
3 
0  63 321
2  24 195
0 
6  16
Table 5 presents the total number of missing, wrong or 
extraneous  faults  for  each  of  the  five  ODC  fault  types 
addressed in this work. As we can see, for the assignment 
and  interface  types,  missing  program  construct  faults  are 
less frequent than the wrong construct faults. 
Sections  3.3.1  to  3.3.5  present  the  occurrences  of  all 
faults  that  have  been  collected  according  to  their  nature 
and  source  program.  Each  fault  type  is  assigned  a  code 
for easier reference.
3.3.1.  Assignment  faults.  Table  6  shows  the  results  for 
the assignment faults. Faults related to initialization were 
considered  as  different  faults  than  general  assignment 
faults;  Missing  parts  of 
logical  expression  were 
considered  different  faults  from  the  situations  where  a 
logical  expression  was  completely  wrong. We  used  the 
Checking 
Assignment  
ODC types  Nature 
Missing 
Wrong 
Extraneous 
Missing 
Wrong 
Extraneous 
Missing 
Wrong 
Extraneous 
Missing 
Wrong 
Extraneous 
Missing 
Wrong 
Extraneous 
Algorithm 
Function 
Interface
Table 5 - Fault nature totals across ODC types
Examples
A variable was not assigned a value, a variable was not initialized, etc 
A wrong value (or expression result, etc) was assigned to a variable 
A variable should not have been subject of an assignment (value, expression result etc) 
An "if" construct is missing, part of a logical condition is missing, etc 
Wrong "if" condition, wrong iteration condition, etc 
An "if" condition is superfluous and should not be present 
A parameter in a function call was missing; incomplete expression was used as param. 
Wrong information was passed to a function call (value, expression result etc) 
Surplus data is passed to a function (e.g. one parameter too many in function call) 
Some part of the algorithm is missing (e.g. function call, a iteration construct, etc) 
Algorithm is wrongly coded or ill-formed 
The algorithm has surplus steps; A function was being called  
New program modules were required  
The code structure has to be redefined to correct functionality 
Portions of code were completely superfluous 
# faults 
44 
64
10
90
47
0
11 
32 
0
155 
37 
6 
21
15 
0 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:06:30 UTC from IEEE Xplore.  Restrictions apply. 
Table 6 – Detailed analysis of assignment faults 
Specific fault types 
X
E
D
C
m
V
i
i
v
C
F
f
h
2
d
p
I
M
A
G
e
o
J
S
E
N
S
Z
h
s
a
B
Fault
nature 
Missing 
construct
Wrong 
construct 
Extraneous 
construct 
Total faults found
Missing variable initialization (MVI) 
Missing variable assignment using a value (MVAV) 
Missing variable assignment using an expression (MVAE) 
Missing variable auto-increment (MVAI) 
Missing variable auto-decrement (MVAD) 
Missing "OR EXPR" in larger expression in assignment (MLOA) 
Missing "AND EXPR" in larger expression in assignment (MLAA) 
Wrong parenthesis in logical expr. used in assignment (WPLA) 
Wrong logical expression used in assignment (WLEA) 
Wrong arithmetic expression used in assignment (WAEA) 
Wrong value used in variable initialization (WVIV) 
Wrong miss-by-one value used in variable initialization (WVIM)
Wrong value assigned to variable (WVAV) 
Miss by one value assigned to variable (WVAM) 
Wrong constant in initial data (WIDI) 
Wrong miss-by-one constant in initial data (WIDIM) 
Wrong string in initial data (WIDS) 
Wrong string in initial data - missing one char (WIDSL) 
Wrong initial data - array has values in wrong order (WIDM) 
Wrong data types or conversion used (WSUT) 
Extraneous variable assignment using a value (EVAL) 
Extraneous variable assignment using another variable (EVAV) 
7 
6 
1
1
7 
2 
1 
9 
4 
5 
5 
1 
3
3
2 53
2 
1 
1 
2 
4 
1 
6 
6  11
11 
2 
2 
4 
1 
1 
1 
1 
1  20  2 
2 
2 
l
e
n
r
e
K
L
1 
1 
4 
3 
1 
5
1 
5
21
l
a
t
o
T
12
12
16
3
1
0
0
0
0
8
5
1
13
0
5
0
11
7
2
12
2
8
118
following empirical criteria to consider a given fault type 
as  being  representative:  a)  the  number  of  occurrences  of 
faults  must  be  at  least  as  high  as  the  average,  and  b)
occurrence  of  faults  should  not  be  restricted  to  only  one 
or  two  of  the  programs.  The  following  fault  types  meet 
these  two  requirements:  MVI,  MVAV,  MVAE,  WVAV, 
WSUT  and  EVAV  and  represent  the  assignment  fault 
specific  types  that  should  be  addressed  in  the  first  place 
when emulating assignment software faults. 
It is worth noting that a small number of fault types are 
responsible  for  most  of  the  fault  occurrences.  Other 
interesting aspect is that the most frequent types of faults 
are in fact reasonably independent from the programming 
language. 
3.3.2.  Checking  faults.  The  occurrences  of  Checking 
faults  are  presented  in  table  7.  We  observed  once  more 
that a subset of fault types dominates the fault distribution 
(MIA,  MLAC,  WLEC).  Fault  types  MLOC  and  WPLC 
were  not  considered  as  representative  faults  because  the 
fault occurrences for these two types are concentrated on 
one or two programs.
3.3.3.  Interface  faults.  Table  8  shows  the  fault  distribu-
tion  for  Interface  faults.  We  have  observed  that  a  very 
small  set  of  faults  dominate  the  fault  occurrence:  types 
WAEP  and  WPFV.  Fault  type  MRS  was  not  considered 
as  representative  for  interface  faults  since  all  the  occur-
rences of its faults are concentrated in only one program. 
Fault Nature 
Specific fault types 
X
E
D
C
m
V
i
i
v
C
F
h
2
f
d
p
I
M
A
G
Table 7 - Detailed analysis of checking faults
Missing 
construct
Wrong 
construct
Missing "if (cond)" surrounding statement(s) (MIA) 
Missing "OR EXPR" in  expression used as branch condition (MLOC) 
Missing "AND EXPR" in expression used as branch condition (MLAC) 
Wrong parenthesis in logical expr. used as branch condition (WPLC) 
Wrong logical expression used as branch condition (WLEC) 
Wrong arithmetic expression in branch condition (WAEC) 
Total faults found 
1 
1
2 
14  3 
15 
23 1
4 
3 
1
5 
5 
2 
e
o
J
4 
31 
S
E
N
S
Z
h
s
a
B
l
e
n
r
e
K
L
l
a
t
o
T
23
10  25
42
7
31
7 
16
0
56  7 
1 
12  35  0 
0 
24  137
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:06:30 UTC from IEEE Xplore.  Restrictions apply. 
Table 8 - Detailed analysis of interface faults
Fault nature 
Fault specific types 
Missing 
construct