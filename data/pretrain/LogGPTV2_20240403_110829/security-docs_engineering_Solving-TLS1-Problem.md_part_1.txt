---
layout: Conceptual
title: Solving the TLS 1.0 Problem
description: This document provides guidance on identifying and removing Transport Layer Security (TLS) protocol version 1.0 dependencies in software built on Microsoft operating systems. It serves as a starting point for migrating to a TLS 1.2+ network environment.
ms.date: 11/02/2023
ms.service: security
ms.author: dansimp
author: dansimp
ms.topic: conceptual
---

# Solving the TLS 1.0 Problem, 2nd Edition

This document offers the latest guidance on identifying and removing Transport Layer Security (TLS) protocol version 1.0 dependencies in software built on Microsoft operating systems. It also details product changes and new features provided by Microsoft to protect your customers and online services. This document is intended to serve as a starting point for building a migration plan to a TLS 1.2+ network environment. While the solutions discussed here may be applicable to non-Microsoft operating systems or cryptographic libraries, they are not the primary focus.

## Introduction

TLS 1.0 is a security protocol first defined in 1999 for establishing encrypted channels over computer networks. Microsoft has supported this protocol since Windows XP/Server 2003. Although it is no longer the default security protocol in modern operating systems, TLS 1.0 is still supported for backward compatibility. Evolving regulatory requirements and new security vulnerabilities in TLS 1.0 provide incentives for corporations to disable TLS 1.0 entirely.

Microsoft recommends that customers remove TLS 1.0 dependencies in their environments and disable TLS 1.0 at the operating system level where possible. Given the long support period for TLS 1.0, any deprecation plan should include the following steps:

- **Code Analysis**: Identify and fix hardcoded instances of TLS 1.0 or older security protocols.
- **Network Scanning**: Scan network endpoints and analyze traffic to identify operating systems using TLS 1.0 or older protocols.
- **Regression Testing**: Conduct full regression testing across your entire application stack with TLS 1.0 disabled.
- **Migration**: Migrate legacy operating systems and development libraries/frameworks to versions that support TLS 1.2 by default.
- **Compatibility Testing**: Test compatibility across all operating systems used by your business to identify any TLS 1.2 support issues.
- **Coordination**: Notify business partners and customers about the move to deprecate TLS 1.0.
- **Client Impact Assessment**: Understand which clients may no longer be able to connect to your servers once TLS 1.0 is disabled.

The goal of this document is to provide recommendations to help remove technical blockers to disabling TLS 1.0 while increasing visibility into the impact of this change on your customers. Completing these investigations can help reduce the business impact of future security vulnerabilities in TLS 1.0. For the purposes of this document, references to the deprecation of TLS 1.0 also include TLS 1.1.

Enterprise software developers need to adopt more future-safe and agile solutions (also known as Crypto Agility) to address future security protocol compromises. While this document proposes agile solutions to eliminate TLS hardcoding, broader Crypto Agility solutions are beyond its scope.

## The Current State of Microsoft's TLS 1.0 Implementation

[Microsoft's TLS 1.0 implementation](https://support.microsoft.com/kb/3117336) is free of known security vulnerabilities. However, due to the potential for future protocol downgrade attacks and other TLS 1.0 vulnerabilities, it is recommended that dependencies on all security protocols older than TLS 1.2 be removed where possible (TLS 1.1, TLS 1.0, SSLv3, SSLv2).

In planning for this migration to TLS 1.2+, developers and system administrators should be aware of the potential for protocol version hardcoding in applications developed by their employees and partners. Hardcoding means that the TLS version is fixed to an outdated and less secure version, preventing the use of newer TLS versions without modifying the program. This issue cannot be addressed without source code changes and software updates. Protocol version hardcoding was common in the past for testing and supportability, as different browsers and operating systems had varying levels of TLS support.

## Supported Versions of TLS in Windows

Many operating systems have outdated TLS version defaults or support ceilings that need to be accounted for. The table below summarizes the security protocol support by OS version:

| Windows OS              | SSLv2  | SSLv3  | TLS 1.0  | TLS 1.1  | TLS 1.2  | TLS 1.3  |
|-------------------------|--------|--------|----------|----------|----------|----------|
| Windows Vista           | Enabled| Enabled| Enabled  | Not Supported | Not Supported | Not Supported |
| Windows Server 2008     | Enabled| Enabled| Enabled  | [Disabled*](https://cloudblogs.microsoft.com/microsoftsecure/2017/07/20/tls-1-2-support-added-to-windows-server-2008/) | [Disabled*](https://cloudblogs.microsoft.com/microsoftsecure/2017/07/20/tls-1-2-support-added-to-windows-server-2008/) | Not Supported |
| Windows 7 (WS2008 R2)   | Enabled| Enabled| Enabled  | [Disabled*](https://support.microsoft.com/help/3140245/update-to-enable-tls-1-1-and-tls-1-2-as-a-default-secure-protocols-in) | [Disabled*](https://support.microsoft.com/help/3140245/update-to-enable-tls-1-1-and-tls-1-2-as-a-default-secure-protocols-in) | Not Supported |
| Windows 8 (WS2012)      | Disabled| Enabled| Enabled  | Enabled  | Enabled  | Not Supported |
| Windows 8.1 (WS2012 R2) | Disabled| Enabled| Enabled  | Enabled  | Enabled  | Not Supported |
| Windows 10             | Disabled| Enabled| Enabled  | Enabled  | Enabled  | Not Supported |
| Windows 11             | Disabled| Enabled| Enabled  | Enabled  | Enabled  | Enabled  |
| Windows Server 2016    | Not Supported | Disabled | Enabled  | Enabled  | Enabled  | Not Supported |
| Windows Server 2019    | Not Supported | Disabled | Enabled  | Enabled  | Enabled  | Not Supported |
| Windows Server 2019 GS edition | Not Supported | Disabled | Disabled | Disabled | Enabled  | Not Supported |
| Windows Server 2022    | Not Supported | Disabled | Disabled | Disabled | Enabled  | Enabled  |

- **Windows Server 2019 GS edition** is Microsoft SDL compliant, supporting only TLS 1.2 with a restricted set of cipher suites.
- **Windows Server 2022** is Microsoft SDL compliant, supporting TLS 1.2 and TLS 1.3 with a restricted set of cipher suites.

TLS 1.1/1.2 can be enabled on Windows Server 2008 via [this optional Windows Update package](https://cloudblogs.microsoft.com/microsoftsecure/2017/07/20/tls-1-2-support-added-to-windows-server-2008/).

For more information on TLS 1.0/1.1 deprecation in IE/Edge, see:
- [Modernizing TLS connections in Microsoft Edge and Internet Explorer 11](https://blogs.windows.com/msedgedev/2018/10/15/modernizing-tls-edge-ie11/)
- [Site compatibility-impacting changes coming to Microsoft Edge](/microsoft-edge/web-platform/site-impacting-changes)
- [Disabling TLS/1.0 and TLS/1.1 in the new Edge Browser](https://textslashplain.com/2020/01/13/disabling-tls-1-0-and-tls-1-1-in-the-new-edge-browser/)

A quick way to determine the TLS version requested by various clients when connecting to your online services is by using the Handshake Simulation at [Qualys SSL Labs](https://www.ssllabs.com/). This simulation covers client OS/browser combinations across manufacturers. See [Appendix A: Handshake Simulation](#appendix-a-handshake-simulation) for a detailed example showing the TLS protocol versions negotiated by various simulated client OS/browser combinations when connecting to [www.microsoft.com](https://www.microsoft.com).

It is highly recommended to conduct an inventory of operating systems used by your enterprise, customers, and partners (the latter two via outreach/communication or HTTP User-Agent string collection). This inventory can be further supplemented by traffic analysis at your enterprise network edge. Traffic analysis will yield the TLS versions successfully negotiated by customers/partners connecting to your services, but the traffic itself will remain encrypted.

## Microsoft's Engineering Improvements to Eliminate TLS 1.0 Dependencies

Since the v1 release of this document, Microsoft has shipped several software updates and new features to support TLS 1.0 deprecation. These include:

- **IIS Custom Logging**: [New IIS functionality](https://cloudblogs.microsoft.com/microsoftsecure/2017/09/07/new-iis-functionality-to-help-identify-weak-tls-usage/) to correlate client IP/user agent string, service URI, TLS protocol version, and cipher suite. This logging allows administrators to quantify their customers' exposure to weak TLS.
- **SecureScore**: [To help Office 365 tenant admins](https://security.microsoft.com/securescore) identify weak TLS usage, the SecureScore portal provides valuable information as TLS 1.0 exited support in Office 365 in October 2018. This portal helps Office 365 tenant admins reach out to their own customers who may be unaware of their TLS 1.0 dependencies. Visit [https://securescore.microsoft.com/](https://security.microsoft.com/securescore) for more information.
- **.NET Framework Updates**: Updates to eliminate app-level hardcoding and prevent framework-inherited TLS 1.0 dependencies. Developer guidance and software updates have been released to help customers identify and eliminate .NET dependencies on weak TLS: [Transport Layer Security (TLS) best practices with the .NET Framework](/dotnet/framework/network-programming/tls). Note that all apps targeting .NET 4.5 or below are likely to need modifications to support TLS 1.2.
- **Backporting TLS 1.2**: TLS 1.2 has been backported to [Windows Server 2008 SP2](https://cloudblogs.microsoft.com/microsoftsecure/2017/07/20/tls-1-2-support-added-to-windows-server-2008/) and [XP POSReady 2009](https://cloudblogs.microsoft.com/microsoftsecure/2017/10/05/announcing-support-for-tls-1-1-and-tls-1-2-in-xp-posready-2009) to help customers with legacy obligations.
- **Future Announcements**: More announcements will be made in early 2019 and communicated in subsequent updates of this document.

## Finding and Fixing TLS 1.0 Dependencies in Code

For products using the Windows OS-provided cryptography libraries and security protocols, the following steps should help identify and fix any hardcoded TLS 1.0 usage in your applications:

1. **Identify Instances of `AcquireCredentialsHandle`**: Review all instances of [AcquireCredentialsHandle](https://msdn.microsoft.com/library/windows/desktop/aa374712(v=vs.85).aspx) to get closer to code blocks where TLS may be hardcoded.
2. **Review `SecPkgContext_SupportedProtocols` and `SecPkgContext_ConnectionInfo`**: Check for hardcoded TLS in [SecPkgContext_SupportedProtocols](https://msdn.microsoft.com/library/windows/desktop/aa380103(v=vs.85).aspx) and [SecPkgContext_ConnectionInfo](https://msdn.microsoft.com/library/windows/desktop/aa379819(v=vs.85).aspx) structures.
3. **Set `grbitEnabledProtocols` to Zero**: In native code, set any non-zero assignments of [grbitEnabledProtocols](https://msdn.microsoft.com/library/windows/desktop/aa379810(v=vs.85).aspx) to zero, allowing the operating system to use its default TLS version.
4. **Disable FIPS Mode**: If FIPS Mode is enabled, disable it due to potential conflicts with settings required for explicitly disabling TLS 1.0/1.1. See [Appendix B: Deprecating TLS 1.0/1.1 While Retaining FIPS Mode](#appendix-b-deprecating-tls-1.01.1-while-retaining-fips-mode) for more information.
5. **Update and Recompile Applications**:
   - **Managed Apps**: Rebuild and retarget against the latest .NET Framework version.
   - **WinHTTP Applications**: Add code to support TLS 1.2 via [WinHttpSetOption](https://msdn.microsoft.com/library/windows/desktop/aa384114(v=vs.85).aspx) for applications hosted on Server 2012 or older.
6. **Scan Source Code and Configuration Files**: Scan source code and online service configuration files for patterns corresponding to TLS 1.0 and older protocols.

By following these steps, you can effectively identify and remove TLS 1.0 dependencies in your applications, ensuring a smooth transition to a more secure TLS 1.2+ network environment.