base64- encoded HTTP basic authorization header. –i is used to include HTTP 
headers in the output, and –v is used to run cURL in verbose mode. –H is used 
to set HTTP headers in the outgoing request, and –d is used to post data to the 
endpoint.
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
406
 HTTP Digest Authentication
HTTP Digest authentication was initially proposed by the RFC 20695 as an extension 
to the HTTP/1.0 specification to overcome certain limitations in HTTP Basic 
authentication. Later this specification was made obsolete by the RFC 2617. The RFC 
2617 removed some optional elements specified by the RFC 2069 due to problems found 
since its publication and introduced a set of new elements for compatibility, and those 
new elements have been made optional. Digest authentication is an authentication 
scheme based on a challenge-response model, which never sends the user credentials 
over the wire. Because the credentials are never sent over the wire with the request, 
Transport Layer Security (TLS) isn’t a must. Anyone intercepting the traffic won’t be able 
to discover the password in cleartext.
To initiate Digest authentication, the client has to send a request to the protected 
resource with no authentication information, which results in a challenge (in the 
response). The following example shows how to initiate a Digest authentication 
handshake from cURL (this is just an example, don’t try it till we set up the cute-cupcake 
sample later in this appendix):
\> curl -k –-digest –u userName:password -v https://localhost:8443/recipe
Note To add HTTP digest authentication credentials to a request generated from 
a cURL client, use the option –-digest –u username: password.
Let’s look at the HTTP headers in the response. The first response is a 4016 with the 
HTTP header WWW-Authenticate, which in fact is the challenge:
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Digest realm="cute-cupcakes.com", qop="auth",
nonce="1390781967182:c2db4ebb26207f6ed38bb08eeffc7422",
opaque="F5288F4526B8EAFFC4AC79F04CA8A6ED"
5 An Extension to HTTP: Digest Access Authentication, www.ietf.org/rfc/rfc2069.txt
6 The 401 HTTP status code is returned back in the HTTP response when the request is not 
authenticated to access the corresponding resource. All HTTP/1.1 status codes are defined here: 
www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
407
Note You learn more about the Recipe API and how to deploy it locally as you 
proceed through this appendix. The “Securing the Recipe API with HTTP digest 
Authentication” exercise at the end of the appendix explains how to secure an API 
with digest authentication.
The challenge from the server consists of the following key elements. Each of these 
elements is defined in the RFC 2617:
• 
realm: A string to be displayed to users so they know which username 
and password to use. This string should contain at least the name of 
the host performing the authentication and may additionally indicate 
the collection of users who may have access.
• 
domain: This is an optional element, not present in the preceding 
response. It’s a comma-separated list of URIs. The intent is that the 
client could use this information to know the set of URIs for which 
the same authentication information should be sent. The URIs in this 
list may exist on different servers. If this keyword is omitted or empty, 
the client should assume that the domain consists of all URIs on the 
responding server.
• 
nonce: A server-specified data string, which should be uniquely 
generated each time a 401 response is made. The value of the nonce 
is implementation dependent and is opaque to the client. The client 
should not try to interpret the value of nonce.
• 
opaque: A string of data, specified by the server, that should be 
returned by the client unchanged in the Authorization header of 
subsequent requests with URIs in the same protection space (which 
is the realm). Because the client is returning back the value of the 
opaque element given to it by the server for the duration of a session, 
the opaque data can be used to transport authentication session state 
information or can be used as a session identifier.
• 
stale: A flag, indicating that the previous request from the client was 
rejected because the nonce value was stale. If stale is TRUE (case 
insensitive), the client may wish to simply retry the request with a 
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
408
new nonce value, without reprompting the user for a new username 
and password. The server should only set stale to TRUE if it receives 
a request for which the nonce is invalid but with a valid digest for 
that nonce (indicating that the client knows the correct username/
password). If stale is FALSE, or anything other than TRUE, or the stale 
directive is not present, the username and/or password are invalid, 
and new values must be obtained. This flag is not shown in the 
preceding response.
• 
algorithm: This is an optional element, not shown in the preceding 
response. The value of algorithm is a string indicating a pair of 
algorithms used to produce the digest and a checksum. If the client 
does not understand the algorithm, the challenge should be ignored, 
and if it is not present, it is assumed to be MD5.
• 
qop: The quality of protection options applied to the response by 
the server. The value auth indicates authentication; while the value 
auth-int indicates authentication with integrity protection. This is an 
optional element and introduced to be backward compatible with the 
RFC 2069.
Once the client gets the response from the server, it has to respond back. Here’s the 
HTTP request with the response to the challenge:
Authorization: Digest username="prabath", realm="cute-cupcakes.com",
nonce="1390781967182:c2db4ebb26207f6ed38bb08eeffc7422", uri="/recipe", 
cnonce="MTM5MDc4", nc=00000001, qop="auth",
response="f5bfb64ba8596d1b9ad1514702f5a062",
opaque="F5288F4526B8EAFFC4AC79F04CA8A6ED"
The following are the key elements in the response from the client:
• 
username: The unique identifier of the user who’s going to invoke the 
API.
• 
realm/qop/nonce/opaque: The same as in the initial challenge from 
the server. The value of qop indicates what quality of protection the 
client has applied to the message. If present, its value MUST be one 
of the alternatives the server indicated it supports in the WWW- 
Authenticate header.
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
409
• 
cnonce: This MUST be specified if a qop directive is sent and MUST 
NOT be specified if the server did not send a qop directive in the 
WWW-Authenticate header field. The value of cnonce is an opaque 
quoted string value provided by the client and used by both the client 
and the server to avoid chosen plaintext attacks,7 to provide mutual 
authentication, and to provide some message integrity protection. 
This is not shown in the preceding response.
• 
nc: This MUST be specified if a qop directive is sent and MUST NOT 
be specified if the server did not send a qop directive in the WWW- 
Authenticate header field. The value of nc is the hexadecimal count 
of the number of requests (including the current request) that the 
client has sent with the same nonce value. For example, in the first 
request sent in response to a given nonce value, the client sends 
"nc=00000001". The purpose of this directive is to allow the server to 
detect request replays by maintaining its own copy of this count—if 
the same nc value is seen twice for the same nonce value, then the 
request is a replay.
• 
digest-uri: The request URI from the request line. Duplicated 
here because proxies are allowed to change the Request-Line in 
transit. The value of the digest-uri is used to calculate the value of the 
response element, as explained later in the chapter.
• 
auth-param: This is an optional element not shown in the preceding 
response. It allows for future extensions. The server MUST ignore any 
unrecognized directive.
• 
response: The response to the challenge sent by the server, 
calculated by the client. The following section explains how the value 
of response is calculated.
7 Chosen plaintext attack is an attack model where the attacker has access to both the encrypted 
text and the corresponding plaintext. The attacker can specify his own plaintext and get 
it encrypted or signed by the server. Further he can carefully craft the plaintext to learn 
characteristics about the encryption/signing algorithm. For example, he can start with an empty 
text, a text with one letter, with two letters likewise, and get corresponding encrypted/signed text. 
This kind of an analysis on encrypted/signed text is known as cryptanalysis.
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
410
The value of response is calculated in the following manner. Digest authentication 
supports multiple algorithms. RFC 2617 recommends using MD5 or MD5-sess (MD5- 
session). If no algorithm is specified in the server challenge, MD5 is used. Digest 
calculation is done with two types of data: security-related data (A1) and message- 
related data (A2). If you use MD5 as the hashing algorithm or if it is not specified, then 
you define security-related data (A1) in the following manner:
A1 = username:realm:password
If you use MD5-sess as the hashing algorithm, then you define security-related data 
(A1) in the following manner. cnonce is an opaque quoted string value provided by 
the client and used by both the client and the server to avoid chosen plaintext attacks. 
The value of nonce is the same as in the server challenge. If the MD5-sess is picked as 
the hashing algorithm, then A1 is calculated only once on the first request by the client 
following receipt of a WWW-Authenticate challenge from the server:
A1 = MD5 (username:realm:password):nonce:cnonce
RFC 2617 defines message-related data (A2) in two ways, based on the value of qop 
in the server challenge. If the value is auth or undefined, then the message-related data 
(A2) is defined in the following manner. The value of the request-method element can 
be GET, POST, PUT, DELETE, or any HTTP verb, and the value of the uri-directive-value 
element is the request URI from the request line:
A2 = request-method:uri-directive-value
If the value of qop is auth-int, then you need to protect the integrity of the message, 
in addition to authenticating. A2 is derived in the following manner. When you have 
MD5 or MD5-sess as the hashing algorithm, the value of H is MD5:
A2 = request-method:uri-directive-value:H(request-entity-body)
The final value of the digest is calculated in the following way, based on the value of 
qop. If qop is set to auth or auth-int, then the final digest value is as shown next. The nc 
value is the hexadecimal count of the number of requests (including the current request) 
that the client has sent with the nonce value in this request. This directive helps the 
server detect replay attacks. The server maintains its own copy of nonce and the nonce 
count (nc); if any are seen twice, that indicates a possible replay attack:
MD5(MD5(A1):nonce:nc:cnonce:qop:MD5(A2))
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
411
If qop is undefined, then the final digest value is
MD5(MD5(A1)::MD5(A2))
This final digest value will be set as the value of the response element in the HTTP 
request from the client to the server. Once the client responds back to the server’s initial 
challenge, the subsequent requests from there onward do not need all the preceding 
three message flows (the initial unauthenticated request from the client, the challenge 
from the server, and the response to the challenge from the client). The server will send a 
challenge to the client only if there is no valid authorization header in the request. Once 
the client gets the initial challenge, for the subsequent requests, the same parameters 
from the challenge will be used. In other words, the response by the client to a WWW- 
Authenticate challenge from the server for a protection space starts an authentication 
session with that protection space. The authentication session lasts until the client 
receives another WWW-Authenticate challenge from any server in the protection space. 
The client should remember the username, password, nonce, nonce count, and opaque 
values associated with the authentication session to use to construct the authorization 
header in the subsequent requests within that protection space. For example, the 
authorization header from the client should have the nonce value in each request. This 
nonce value is picked from the initial challenge from the server, but the value of the nc 
element will be increased by one, for each request. Table F-1 provides a comparison 
between HTTP Basic authentication and Digest authentication.
Table F-1. HTTP Basic Authentication vs. HTTP Digest Authentication
HTTP Basic Authentication
HTTP Digest Authentication
Sends credentials in cleartext over the 
wire.
credentials are never sent in cleartext. A digest derived 
from the cleartext password is sent over the wire.
Should be used in conjunction with a 
secured transport channel, like HTTPS.
doesn’t depend on the security of the underneath 
transport channel.
only performs authentication.
can be used to protect the integrity of the message, in 
addition to authentication (with qop=auth-int).
User store can store passwords as a salted 
hash.
User store should store passwords in cleartext or 
should store the hash value of username:realm: 
password.
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
412
Note With HTTP digest authentication, a user store has to store passwords 
either in cleartext or as the hashed value of username:password:realm. This is 
required because the server has to validate the digest sent from the client, which is 
derived from the cleartext password (or the hash of username:realm:password).
CUTE-CUPCAKE FACTORY: DEPLOYING THE RECIPE API IN APACHE TOMCAT
In this example, you deploy a prebuilt web application with the Recipe API in Apache Tomcat. 
The Recipe API is hosted and maintained by the cute-cupcake factory. It’s a public API with 
which the customers of cute-cupcake factory can interact. The Recipe API supports the 
following five operations:
• 
GET /recipe: Returns all the recipes in the system
• 
GET /recipe/{$recipeNo}: Returns the recipe with the given recipe number
• 
POST /recipe: creates a new recipe in the system
• 
PUT /recipe: Updates the recipe in the system with the given details
• 
DELETE /recipe/{$recipeNo}: deletes the recipe from the system with 
the provided recipe number
You can download the latest version of Apache Tomcat from http://tomcat.apache.org. 
All the examples discussed in this book use Tomcat 9.0.20.
To deploy the API, download the recipe.war file from https://github.com/
apisecurity/samples/blob/master/appendix-f/recipe.war and copy it to 
[TOMCAT_HOME]\webapps. To start Tomcat, run the following from the [TOMCAT_HOME]\
bin directory:
[Linux] sh catalina.sh run
[Windows] catalina.bat run
once the server is started, use cURL to execute the following command. Here it’s assumed 
that Tomcat is running on its default HTTP port 8080:
\> curl  http://localhost:8080/recipe
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
413
This returns all the recipes in the system as a JSon payload:
{
   "recipes":[
      {
         "recipeId":"10001",
         "name":"Lemon Cupcake",
          "ingredients":"lemon zest, white sugar,unsalted butter, flour,salt, 
milk",
          "directions":"Preheat oven to 375 degrees F (190 degrees C). Line 30 
cupcake pan cups with paper liners...."
      },
      {
         "recipeId":"10002",
         "name":"Red Velvet Cupcake",
          "ingredients":"cocoa powder, eggs, white sugar,unsalted butter, 
flour,salt, milk",
          "directions":" Preheat oven to 350 degrees F. Mix flour, cocoa 
powder,
                                  baking soda and salt in medium bowl. Set 
aside...."
      }
   ]
}
To get the recipe of any given cupcake, use the following cURL command, where 10001 is the 
Id of the cupcake you just created:
\> curl  http://localhost:8080/recipe/10001
This returns the following JSon response:
{
         "recipeId":"10001",
         "name":"Lemon Cupcake",
          "ingredients":"lemon zest, white sugar,unsalted butter, flour,salt, 
milk",
          "directions":"Preheat oven to 375 degrees F (190 degrees C). Line 30 
cupcake pan cups with paper liners...."
}
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
414
To create a new recipe, use the following cURL command:
curl  -X POST -H 'Content-Type: application/json'
        -d '{"name":"Peanut Butter Cupcake",
              "ingredients":"peanut butter, eggs, sugar,unsalted butter, 