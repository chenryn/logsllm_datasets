Ck
1
1 H2 H2
Ck−1
2
...
...
...
1 Hk H2
C1
k
i = ((L·Hi)⊕EKi(N +1)⊕T )·H−2
...
2
k
i
where B(cid:48)
and where now L
is larger by one block. We can solve this special system of
equations in time O(k2) and space O(k) using off-the-shelf
polynomial interpolation algorithms, a factor of k improve-
ment. The resulting solution will have one extra ciphertext
block. While ideally an adversary wants multi-collision ci-
phertexts to be as compact as possible, one extra block will
not signiﬁcantly impact attacks. Detailed pseudocode for this
attack is provided in Figure 1. Let Agcm be the TMKCR adver-
sary that picks N,T arbitrarily and runs Multi-Collide-GCM.
The adversary is guaranteed to succeed assuming the sys-
tem of linear equations is solvable, which is equivalent to
the matrix having a non-zero determinant. A well-known
fact about Vandermonde matrices is that their determinant is
non-zero if and only if all the Hi values are pairwise dis-
tinct, i.e., Hi (cid:54)= Hj for 1 ≤ i  1).
(Right) Time in seconds to generate key multi-collisions for AES-
GCM and the resulting ciphertext size in bytes (including the tag).
For k = 218 the time is just for Magma’s polynomial interpolation.
algorithm, which we found to be faster than that of SageMath.
Timing experiments were performed on a desktop with an
Intel Core i9 processor and 128 GB RAM, running Linux
x86-64. We present the results in the table in Figure 2, which
shows both the time in seconds to generate a k-way key multi-
collision for AES-GCM and the size in bytes of the resulting
ciphertext, including the tag. There was little variance in
timing when generating multi-collisions, so we report the
times for just one execution for each k. Most of the multi-
collision ciphertexts could be computed relatively quickly.
Colliding ciphertexts for k = 216 keys, for instance, took less
than thirty minutes. For smaller k it is much faster. We note
that Sage’s interface with Magma returns a segmentation fault
when polynomial interpolation is used with value k = 218.
In Figure 2 for this k value, we therefore report the time to
perform polynomial interpolation for 218 randomly-generated
points using Magma itself; the timing for the actual attack
will be essentially the same.
To illustrate the power of key multi-collisions, we return
to the simple PW-based AEAD partitioning oracle scenario
described in Section 2. Assume a partitioning oracle that re-
turns fK(N,C,T ) = 1 if and only if AES-GCM decryption
AuthDecK(N,C(cid:107) T ) (cid:54)= ⊥ . We omit associated data for sim-
plicity. Then, consider an attacker attempting to discover a
key chosen uniformly from a set D of size d = 230 (i.e., the
approximate size of a large password dictionary). We simulate
the brute-force attack (k = 1) assuming the oracle works for
plaintexts as small as one byte. We also simulate our adaptive
partitioning oracle attack that constructs splitting ciphertexts
of size k iteratively for different sets of keys until the oracle
returns one. At this point the adversary performs a binary
search in logk queries to ﬁnd the secret. We perform these
simulations for k ∈ {210,212,214,216,218}.
200    30th USENIX Security Symposium
USENIX Association
The graph in Figure 2 shows the attacks’ success rates —
how often they succeed in uniquely identifying the key — as a
function of the number of queries made. In this context brute-
force attacks do poorly, achieving negligible performance
even for large numbers of queries. The partitioning oracle
attack can search the space much more efﬁciently, even for
moderate k.
We also measured total bandwidth cost (total number of
bytes sent to the oracle) used by each attack to achieve a
certain success rate. We omitted the nonces from the band-
width calculations, which can only make the brute-force attack
look more competitive with the partitioning oracle attacks.
For a 20% success rate, the brute force attack (k = 1) has a
bandwidth cost of 3.65 GB, while the other values of k re-
quire about 3.44 GB. For a 60% success rate, the difference is
greater, with the brute force attack accumulating a bandwidth
cost of about 11 GB, while the other values of k require only
about 10.3 GB.
Ultimately, we conclude that partitioning oracle attacks
provide a signiﬁcant speed up over brute-force search when
queries are the limiting factor.
3.2 Other AEAD Schemes
Schemes that use Poly1305. The XSalsa20/Poly1305 [13,
15] and ChaCha20/Poly1305 [14] are widely used AEAD
schemes due to their speed, ease of constant-time software im-
plementations, and security properties. Both schemes have a
high-level structure similar to AES-GCM, combining a stream
cipher (XSalsa20 or ChaCha20) with a Carter-Wegman style
MAC called Poly1305. Here we outline a key multi-collision
attack against it, and defer the details to the full version of
this work.
The core of the attack is against Poly1305 [13], which
is similar to GHASH except that it: (1) encodes an input
(a ciphertext in the context of its use within the AEAD
schemes here) as a sequence of blocks with 0x01 appended;
(2) performs the polynomial evaluation over Fp for prime
p = 2130 − 5 (hence the name); and (3) adds the result to a
pseudorandom pad modulo 2128 to provide a tag value. The
way Poly1305 encodes its inputs breaks the algebraic struc-
ture of the collision-ﬁnding problem, necessitating a more
complex and less scalable attack. Concretely, we were not
able to compute splitting ciphertexts with degree greater than
ten with our current techniques; this still gives a factor-of-ten
speedup in partitioning oracle attacks.
Misuse-resistant AEAD. Many schemes, including those
described above, leak information about plaintexts should
nonces (IVs) be accidentally reused. Misuse-resistant
AEAD [68] provides security even in the presence of nonce
reuse. This security goal fundamentally rules out online en-
cryption, meaning one must process the entire plaintext before
outputting any ciphertext bits. One popular suggested scheme
is AES-GCM-SIV [30], which instantiates the SIV mode of
operation [68] using primitives borrowed from AES-GCM
(speciﬁcally, AES counter mode and a variant of GHASH
called POLYVAL).
Nonce misuse-resistance is different than robustness, and
in the full version we show that AES-GCM-SIV is vulnerable
to key multi-collision attacks. (A variant of this attack, limited
to only two keys, was discovered by Schmieg in concurrent
work [71].) One interesting point is that our attack against
AES-GCM-SIV is not targeted, meaning we cannot precisely
control the set of keys that end up in a collision set. As men-
tioned previously untargeted key multi-collisions sufﬁce for
partitioning oracle attacks.
3.3 Passing Plaintext Format Checks
Our MKCR attacks so far ensure that decryption succeeds,
but the resulting plaintexts are random. In some cases this suf-
ﬁces, for example when a decryption implementation aborts
with an error message when decryption outputs ⊥. However
in some situations — including one of our attacks against
Shadowsocks — building partitioning oracles will require
MKCR attacks that result in plaintexts that satisfy some for-
mat checks.
MKCR with plaintext format checks. We formalize the
resulting cryptanalytic goal by extending the MKCR security
deﬁnition as follows. Let M be the set of possible plaintexts.
We generalize the MKCR game by parameterizing it with a
predicate pr : M ∪{⊥} → {0,1} that determines whether a
message M is valid (i.e., pr(M) = 1) or invalid (pr(M) = 0).
We assume pr(⊥) = 0 and that pr is fast to compute.
Then we change the MKCR game to be parameter-
ized by pr, written MKCRAEAD,κ,pr. The adversary wins
by producing a set K, associated data AD∗, and cipher-
text C∗ such that |K| ≥ κ and for all K ∈ K it holds that
pr(AuthDecK(AD∗,C∗)) = 1. This strictly generalizes the
prior deﬁnition, since we can set pr(M) = 1 for all M ∈ M
and thus arrive at the original same deﬁnition. We deﬁne the
advantage via
Advmk-cr
AEAD,κ,pr ⇒ true
(cid:104)
(cid:105)
AEAD,κ,pr(A) = Pr
MKCRA
AEAD,κ,pr ⇒ true” denotes the event that A
where “MKCRA
wins. The event is deﬁned over the coins used by A.
A rejection sampling approach. Consider a predicate pr
and let p1 = Pr [ pr(M) = 1 ] for message M sampled ran-
domly from M . When p1 is not very small, one simple ap-
proach is to use rejection sampling. Consider a target set of
keys K. We can choose a random nonce N and tag T and run
our MKCR algorithm using S ,N,T to obtain a solution cipher-
text N (cid:107)C(cid:107) T . We then check that pr(AuthDecK(C,T )) = 1
for all K ∈ S. If not, then repeat the attack using a fresh choice
of nonce. Each attempt will succeed with probability (negli-
1 for k = |S|, because changing the nonce
gibly far from) pk
USENIX Association
30th USENIX Security Symposium    201
Most format checks will make p1 too small for this basic
approach to work. For example, one of our attacks against
Shadowsocks will require the ﬁrst byte to be a ﬁxed value,
making p1 = 1/256. So unless k is small, rejection sampling
alone will be too inefﬁcient.
Exploiting structure. We can instead take advantage of
the fact that many format predicates will be structured, e.g.,
checking just the ﬁrst few bytes of a header. This allows us
to extend our AES-GCM attack (and others) in an efﬁcient
way. Intuitively we will set aside the ciphertext blocks whose
underlying plaintext must satisfy format checks, and leave the
rest as free variables to deﬁne a system of linear equations.
As a concrete example, assume a predicate pr that only
compares the ﬁrst byte of the plaintext M to some arbitrary
ﬁxed byte. We extend our AES-GCM MKCR attack as fol-
lows. Consider a potential set of multi-collision keys S. First,
choose a nonce N arbitrarily and compute for each K ∈ S
the ﬁrst byte of AES-GCM ciphertext. We then determine
the largest subset K ⊆ S that have the same ciphertext byte
value. Applying known results [65] on balls-and-bins prob-
lems gives us that E[|K|] ≈ |D|
256. Then run the tar-
geted TMKCR attack against AES-GCM using N, but ﬁxing
the ﬁrst block of ciphertext to a constant equal to the byte
value plus some arbitrary 15 bytes to get a full ﬁxed cipher-
text block C1. Then the system of equations is deﬁned by
taking the corresponding contribution to the GHASH equa-
tion, namely C1 · EKi(0128)k+1 as a constant and adding it to
the right hand side of each equation. One can generalize this
to n bits of plaintext, for which E[|K|] ≈ |D|
(cid:113) 2n|D|
(cid:113) |D|
256 + 8
2n +
.
2n
leads to fresh pseudorandom plaintexts for each key.
This extension is efﬁcient, running in time in O(S ). One
could also combine it with the rejection sampling approach
by having the ﬁrst phase try multiple random nonces to look
for fortuitous multi-collisions in the ﬁrst byte, but we did not
need to do this for practical attacks.
One can easily extend the approach to other kinds of format
checks, though if the check is too constrained it may become
inefﬁcient (e.g., if plaintexts must have many ﬁxed bytes). The
technique also extends to other stream-cipher based AEAD