$ cd radare2
$ ./sys/install.sh
更新
$ ./sys/install.sh
卸载
$ make uninstall
$ make purge
命令行使用方法
Radare2 在命令行下有一些小工具可供使用：
radare2：十六进制编辑器和调试器的核心，通常通过它进入交互式界面。
rabin2：从可执行二进制文件中提取信息。
rasm2：汇编和反汇编。
rahash2：基于块的哈希工具。
radiff2：二进制文件或代码差异比对。
rafind2：查找字节模式。
ragg2：r_egg 的前端，将高级语言编写的简单程序编译成x86、x86-64和ARM
的二进制文件。
214
2.2.1 radare2
rarun2：用于在不同环境中运行程序。
rax2：数据格式转换。
radare2/r2
$ r2 -h
Usage: r2 [-ACdfLMnNqStuvwzX] [-P patch] [-p prj] [-a arch] [-b
bits] [-i file]
[-s addr] [-B baddr] [-M maddr] [-c cmd] [-e k=v] file
|pid|-|--|=
-- run radare2 without opening any file
- same as 'r2 malloc://512'
= read file from stdin (use -i and -c to run cmds)
-= perform !=! command to run all commands remotely
-0 print \x00 after init and every command
-a [arch] set asm.arch
-A run 'aaa' command to analyze all referenced code
-b [bits] set asm.bits
-B [baddr] set base address for PIE binaries
-c 'cmd..' execute radare command
-C file is host:port (alias for -c+=http://%s/cmd/)
-d debug the executable 'file' or running process 'pi
d'
-D [backend] enable debug mode (e cfg.debug=true)
-e k=v evaluate config var
-f block size = file size
-F [binplug] force to use that rbin plugin
-h, -hh show help message, -hh for long
-H ([var]) display variable
-i [file] run script file
-I [file] run script file before the file is opened
-k [k=v] perform sdb query into core->sdb
-l [lib] load plugin file
-L list supported IO plugins
-m [addr] map file at given address (loadaddr)
-M do not demangle symbol names
-n, -nn do not load RBin info (-nn only load bin structure
s)
-N do not load user settings and scripts
215
2.2.1 radare2
-o [OS/kern] set asm.os (linux, macos, w32, netbsd, ...)
-q quiet mode (no prompt) and quit after -i
-p [prj] use project, list if no arg, load if no file
-P [file] apply rapatch file and quit
-R [rarun2] specify rarun2 profile to load (same as -e dbg.pro
file=X)
-s [addr] initial seek
-S start r2 in sandbox mode
-t load rabin2 info in thread
-u set bin.filter=false to get raw sym/sec/cls names
-v, -V show radare2 version (-V show lib versions)
-w open file in write mode
-X [rr2rule] specify custom rarun2 directive
-z, -zz do not load strings or load them even in raw
参数很多，这里最重要是 file 。如果你想 attach 到一个进程上，则使用
pid 。常用参数如下：
-A ：相当于在交互界面输入了 aaa 。
-c ：运行 radare 命令。（ r2 -A -q -c 'iI~pic' file ）
-d ：调试二进制文件或进程。
-a , -b , -o ：分别指定体系结构、位数和操作系统，通常是自动的，但也
可以手动指定。
-w ：使用可写模式打开。
rabin2
$ rabin2 -h
Usage: rabin2 [-AcdeEghHiIjlLMqrRsSvVxzZ] [-@ at] [-a arch] [-b
bits] [-B addr]
[-C F:C:D] [-f str] [-m addr] [-n str] [-N m:M] [-
P[-P] pdb]
[-o str] [-O str] [-k query] [-D lang symname] | f
ile
-@ [addr] show section, symbol or import at addr
-A list sub-binaries and their arch-bits pairs
-a [arch] set arch (x86, arm, .. or _)
-b [bits] set bits (32, 64 ...)
216
2.2.1 radare2
-B [addr] override base address (pie bins)
-c list classes
-C [fmt:C:D] create [elf,mach0,pe] with Code and Data hexpai
rs (see -a)
-d show debug/dwarf information
-D lang name demangle symbol name (-D all for bin.demangle=t
rue)
-e entrypoint
-E globally exportable symbols
-f [str] select sub-bin named str
-F [binfmt] force to use that bin plugin (ignore header che
ck)
-g same as -SMZIHVResizcld (show all info)
-G [addr] load address . offset to header
-h this help message
-H header fields
-i imports (symbols imported from libraries)
-I binary info
-j output in json
-k [sdb-query] run sdb query. for example: '*'
-K [algo] calculate checksums (md5, sha1, ..)
-l linked libraries
-L [plugin] list supported bin plugins or plugin details
-m [addr] show source line at addr
-M main (show address of main symbol)
-n [str] show section, symbol or import named str
-N [min:max] force min:max number of chars per string (see -
z and -zz)
-o [str] output file/folder for write operations (out by
default)
-O [str] write/extract operations (-O help)
-p show physical addresses
-P show debug/pdb information
-PP download pdb file for binary
-q be quiet, just show fewer data
-qq show less info (no offset/size for -z for ex.)
-Q show load address used by dlopen (non-aslr libs
)
-r radare output
-R relocations
217
2.2.1 radare2
-s symbols
-S sections
-u unfiltered (no rename duplicated symbols/sectio
ns)
-v display version and quit
-V Show binary version information
-x extract bins contained in file
-X [fmt] [f] .. package in fat or zip the given files and bins
contained in file
-z strings (from data section)
-zz strings (from raw bins [e bin.rawstr=1])
-zzz dump raw strings to stdout (for huge files)
-Z guess size of binary program
当我们拿到一个二进制文件时，第一步就是获取关于它的基本信息，这时候就可以
使用 rabin2。rabin2 可以获取包括 ELF、PE、Mach-O、Java CLASS 文件的区
段、头信息、导入导出表、数据段字符串、入口点等信息，并且支持多种格式的输
出。
下面介绍一些常见的用法：（我还会列出其他实现类似功能工具的用法，你可以对
比一下它们的输出）
-I ：最常用的参数，它可以打印出二进制文件信息，其中我们需要重点关注
其使用的安全防护技术，如 canary、pic、nx 等。（ file 、 chekcsec -
f ）
-e ：得到二进制文件的入口点。（｀readelf -h`）
-i ：获得导入符号表，RLT中的偏移等。（ readelf -r ）
-E ：获得全局导出符号表。
-s ：获得符号表。（ readelf -s ）
-l ：获得二进制文件使用到的动态链接库。（ ldd ）
-z ：从 ELF 文件的 .rodare 段或 PE 文件的 .text 中获得字符串。
（ strings -d ）
-S ：获得完整的段信息。（ readelf -S ）
-c ：列出所有类，在分析 Java 程序是很有用。
最后还要提到的一个参数 -r ，它可以将我们得到的信息以 radare2 可读的形式
输出，在后续的分析中可以将这样格式的信息输入 radare2，这是非常有用的。
218
2.2.1 radare2
rasm2
$ rasm2 -h
Usage: rasm2 [-ACdDehLBvw] [-a arch] [-b bits] [-o addr] [-s syn
tax]
[-f file] [-F fil:ter] [-i skip] [-l len] 'code'|he
x|-
-a [arch] Set architecture to assemble/disassemble (see -L)
-A Show Analysis information from given hexpairs
-b [bits] Set cpu register size (8, 16, 32, 64) (RASM2_BITS)
-c [cpu] Select specific CPU (depends on arch)
-C Output in C format
-d, -D Disassemble from hexpair bytes (-D show hexpairs)
-e Use big endian instead of little endian
-E Display ESIL expression (same input as in -d)
-f [file] Read data from file
-F [in:out] Specify input and/or output filters (att2intel, x8
6.pseudo, ...)
-h, -hh Show this help, -hh for long
-i [len] ignore/skip N bytes of the input buffer
-k [kernel] Select operating system (linux, windows, darwin, .
.)
-l [len] Input/Output length
-L List Asm plugins: (a=asm, d=disasm, A=analyze, e=E
SIL)
-o [offset] Set start address for code (default 0)
-O [file] Output file name (rasm2 -Bf a.asm -O a)
-p Run SPP over input for assembly
-s [syntax] Select syntax (intel, att)
-B Binary input/output (-l is mandatory for binary in
put)
-v Show version information
-w What's this instruction for? describe opcode
-q quiet mode
rasm2 是一个内联汇编、反汇编程序。它的主要功能是获取给定机器指令操作码对
应的字节。
下面是一些重要的参数：
219
2.2.1 radare2
-L ：列出目标体系结构所支持的插件，输出中的第一列说明了插件提供的功
能（a=asm, d=disasm, A=analyze, e=ESIL）。
-a ：知道插件的名字后，就可以使用 -a` 来进行设置。
-b ：设置CPU寄存器的位数。
-d ：反汇编十六进制对字符串。
-D ：反汇编并显示十六进制对和操作码。
-C ：汇编后以 C 语言风格输出。
-f ：从文件中读入汇编代码。
例子：
$ rasm2 -a x86 -b 32 'mov eax,30'
b81e000000
$ rasm2 -a x86 -b 32 'mov eax,30' -C
"\xb8\x1e\x00\x00\x00"
$ rasm2 -d b81e000000
mov eax, 0x1e
$ rasm2 -D b81e000000
0x00000000 5 b81e000000 mov eax, 0x1e
$ rasm2 -a x86 -b 32 -d 'b81e000000'
mov eax, 0x1e
$ cat a.asm
mov eax,30
$ rasm2 -f a.asm
b81e000000
rahash2
220
2.2.1 radare2
$ rahash2 -h
Usage: rahash2 [-rBhLkv] [-b S] [-a A] [-c H] [-E A] [-s S] [-f
O] [-t O] [file] ...
-a algo comma separated list of algorithms (default is 'sha
256')
-b bsize specify the size of the block (instead of full file
)
-B show per-block hash
-c hash compare with this hash
-e swap endian (use little endian)
-E algo encrypt. Use -S to set key and -I to set IV
-D algo decrypt. Use -S to set key and -I to set IV
-f from start hashing at given address
-i num repeat hash N iterations
-I iv use give initialization vector (IV) (hexa or s:stri
ng)
-S seed use given seed (hexa or s:string) use ^ to prefix (
key for -E)
(- will slurp the key from stdin, the @ prefix poin
ts to a file
-k show hash using the openssh's randomkey algorithm
-q run in quiet mode (-qq to show only the hash)
-L list all available algorithms (see -a)
-r output radare commands
-s string hash this string instead of files
-t to stop hashing at given address
-x hexstr hash this hexpair string instead of files
-v show version information
rahash2 用于计算检验和，支持字节流、文件、字符串等形式和多种算法。
重要参数：
-a ：指定算法。默认为 sha256，如果指定为 all，则使用所有算法。
-b ：指定块的大小（而不是整个文件）
-B ：打印处每个块的哈希
-s ：指定字符串（而不是文件）
-a entropy ：显示每个块的熵（ -B -b 512 -a entropy ）
221
2.2.1 radare2
radiff2
$ radiff2 -h
Usage: radiff2 [-abcCdjrspOxuUvV] [-A[A]] [-g sym] [-t %] [file]
[file]
-a [arch] specify architecture plugin to use (x86, arm, ..)
-A [-A] run aaa or aaaa after loading each binary (see -C)
-b [bits] specify register size for arch (16 (thumb), 32, 64,
..)
-c count of changes
-C graphdiff code (columns: off-A, match-ratio, off-B)
(see -A)
-d use delta diffing
-D show disasm instead of hexpairs
-e [k=v] set eval config var value for all RCore instances
-g [sym|off1,off2] graph diff of given symbol, or between tw
o offsets
-G [cmd] run an r2 command on every RCore instance created
-i diff imports of target files (see -u, -U and -z)
-j output in json format
-n print bare addresses only (diff.bare=1)
-O code diffing with opcode bytes only