authorization, after time t, A can redeem her deposit.
14
(cid:16)
G = A:! v @ x | A:secret a | B:! v @ y | B:secret b
C = reveal a . C
(cid:17)
(cid:16)
′ = reveal b. C
C
′′ = split
vB → withdraw A | vB → withdraw B
after t : withdraw B
′ : withdraw A
after t
′ +
′′ +
(cid:16)
C
(cid:17)
(cid:17)
Mutual timed commitment. We can also model mutual timed
commitment as follows, where t  d:
reveal b if 0 ≤ |b| ≤ 1.
(cid:16)
reveal a if |a| = |b|. withdraw A
+ reveal a if |a| (cid:44) |b|. withdraw B
+ after d′ : withdraw B
(cid:17)
+ after d : withdraw A
Here, B must reveal first. If B does not reveal his secret by the
deadline d, or the secret has not the expected length, then A can
redeem 2B. Otherwise, A in turn must reveal by the deadline d′,
or let B redeem 2B. If both A and B reveal, then the winner is
determined by comparing the lengths of their secrets. As before,
the rational strategy for each player is to choose a secret length 0
or 1, and reveal it. This makes the lottery fair, even in the absence
of a collateral.
Rock-Paper-Scissors. Using similar insights, we can craft con-
tracts for other games. For instance, consider Rock-Paper-Scissors, a
two players hand game where both players choose simultaneously
a hand-shape, and the winner is decided along with the following
rules: rock beats scissors, scissors beats paper, and paper beats rock.
We model the game for two players A and B who bet 1B each, and
represent their moves as secrets of length 0 (rock), 1 (paper), and 2
(scissors). We define the following boolean predicate to determine
the winner:
w (N , M ) = (N = 0∧M = 2) ∨ (N = 2∧M = 1) ∨ (N = 1∧M = 0)
The contract preconditions are:
while the contract is the following:
A:! 3B @ x | A:secret a | B:! 3B @ y | B:secret b
(cid:16)
+ after d : withdraw A
split
2B → reveal b if 0 ≤ |b| ≤ 2. withdraw B
| 2B → reveal a if 0 ≤ |a| ≤ 2. withdraw A
+ after d : withdraw B
| 2B → reveal ab if w (|a|, |b|). withdraw A
+ reveal ab if w (|b|, |a|). withdraw B
+ reveal ab if |a| = |b|. split(1B → withdraw A
| 1B → withdraw B )
(cid:17)
The contract is split in three parts, each with a balance of 2B: the
first two parts allow the players to redeem the collaterals by re-
vealing their secrets in time (similarly to the first version of the
15
lottery), while the third one computes the winner. The winner is
A if w (|a|, |b|), and B if w (|b|, |a|). If a and b have the same length
(i.e., they represent the same move), then there is a tie, so the bets
are given back to the two players. Notice that if a player chooses
a secret of unexpected length, then it may happen that the 2B in
the third part of the split remain frozen. However, in such case
the dishonest player will pay a 2B penalty to the other one. A zero-
collateral version of Rock-Paper-Scissors can be obtained similarly
to the second version of the lottery.
A.2 Supplementary material for Section 4
The semantics of BitML is organised in two layers: a bottom layer,
taking the form of an LTS between (untimed) configurations, and a
top layer, in the form of a timed LTS between timed configurations.
Definition 5 (Configurations). We define (untimed) configura-
tions Γ, ∆, . . . through the syntax in Figure 2, where we stipulate
that in a configuration there are no duplicate authorizations. We
assume that (|, 0) is a commutative monoid. Indexed parallel compo-
sitions are denoted with ∥ . We say that Γ is initial when it contains
only terms of the form ⟨A, v⟩x .
⋄
Definition 6 (LTS of untimed configurations). The LTS of con-
figurations is defined in Figure 3 (deposits) Figure 4 (advertise-
ments and stipulation), and Figure 5 (contracts). The function cv
from labels α to sets of names is defined as: cv (put (⃗x, ⃗a, y )) =
cv (withdraw(A, v, y )) = cv (split (y )) = {y}, otherwise cv (α ) is
empty. We further assume that a transition Γ −→ Γ | A[χ] is possible
⋄
only if A[χ] is not already present in Γ.
We now describe the rules of deposits, starting from the simplest
ones: those which deal with deposits, without directly affecting
contracts.
The rule [Dep-AuthJoin] allows A to authorize the merge of two
deposits x, y into a single one, creating the needed authorization.
The label of the form A : · · · records that only participant A can
perform this move. The rule [Dep-Join] uses this authorization to
create a single deposit z of A. The rules [Dep-AuthDivide] and [Dep-Divide]
act similarly, allowing a deposit of A to be divided in two parts.
The rules [Dep-AuthDonate] and [Dep-Donate] allow A to transfer one of
her deposits to another participant. The pair of rules [Dep-AuthDestroy]
and [Dep-Destroy] allow a set of participants to destroy a set of deposits
x1 · · · xn. To do that, first each participant Ai must provide the
needed authorization Ai[⃗x, i ▷ y] for their own deposit xi. When
all the authorizations have been collected, rule [Dep-destroy] eliminates
the deposits. The last pair of rules is needed to properly represent
the fact that computational participants can create (and put on
the ledger) transactions which do not have a counterpart in our
symbolic model. To achieve a meaningful correspondence between
the symbolic and the computational models, putting on the ledger
such transactions is rendered with the rule [Dep-destroy].
We discuss a few subtleties in the rules. First, [C-Advertise] requires
as a side condition that at least one of the participants involved
in each stipulation is honest (one of the weakest assumptions in
cryptographic protocols). The same effect of running contracts
among dishonest participants can still be obtained by redistributing
funds through the rules for deposits. Hence, this side condition
does not affect the power of the adversary. A further motivation
Γ ::=
0
| {G }C
| ⟨C , v⟩x
| ⟨A, v⟩x
| A[χ]
| {A : a#N }
| A : a#N
| Γ | Γ
′
untimed configuration
empty
contract advertisement
an active contract containing vB
a deposit of vB redeemable by A
authorization of A to perform χ
committed secret of A (N ∈ N ∪ {⊥})
revealed secret of A (N ∈ N)
parallel composition
Γ | t
χ ::=
# ▷ {G }C
| x ▷ {G }C
| x ▷ D
| x, y ▷ ⟨A, v⟩
| x ▷ ⟨A, v⟩, ⟨A, v′⟩
| x ▷ B
| ⃗x, i ▷ y
timed configuration (t ∈ N)
authorization to ...
commit secrets to stipulate {G }C
spend x to stipulate {G }C
take branch D
join deposit x with y into a deposit for A
divide a deposit x in two deposits for A
donate deposit x to B
destroy i-th deposits in ⃗x through y
Figure 2: Configurations and authorizations.
for the side condition is that the correctness of our compiler will
rely on this assumption.
Rule [C-AuthCommit] allows dishonest participants to choose an
“invalid” length ⊥ for their committed secrets. This reflects the
fact that, in the computational model, A commits to a secret by
broadcasting a bitstring, meant to be the hash of the secret. If A
is dishonest, she could instead broadcast an arbitrary bitstring w,
preventing herself later on to reveal a preimage of w. Similarly, the
length ⊥ prevents the reveal action in the symbolic model.
Note that the semantics of predicates is well-defined, provided
that there exists a unique A : a#N in Γ for each |a| in the predicate.
Our semantics of contracts ensures that is indeed the case.
Definition 7 (LTS of timed configurations). Timed configura-
tions are terms Γ | t, where t ∈ N is the global time. The LTS
between timed configurations is defined in Figure 6, where labels
α are either untimed labels, or delays δ ∈ N.
⋄
Example 1 (Timed commitment). We show two computations
of the timed commitment contract TC introduced in Section 2, using
G = A:! 1B @ x | A:secret a | B:! 0B @ y as precondition. Let
Γ = ⟨A, 1B⟩x | ⟨B, 0B⟩y. Assuming that A is honest, a possible
computation where A reveals her secret and then redeems the
deposit is the following (here time is immaterial):
′
Γ −→ Γ | {G}TC = Γ1
−→ Γ1 | {A : a#N} | A[# ▷ {G}TC] = Γ2
−→ Γ2 | B[# ▷ {G}TC] = Γ3
−→ Γ3 | A[x ▷ {G}TC] = Γ4
−→ Γ4 | B[y ▷ {G}TC]
−→ ⟨TC, 1B⟩x1 | {A : a#N} = Γ
−→ ⟨TC, 1B⟩x1 | A : a#N
−→ ⟨withdraw A , 1B⟩x2 | A : a#N
−→ ⟨A, 1B⟩x3 | A : a#N
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
Step (1) advertises {G}TC. This is possible because both deposits
x and y (required by G) are available in Γ. At step (2), A commits
to a secret: its length N is a natural, since A is honest. At step (3)
also B does his commitment (empty, since G does not require any
secrets from B). At steps (4)-(5), A and B give their authorization to
stipulate TC, by providing their authorizations to spend the deposits
x and y, respectively. At step (6) the contract TC becomes stipulated.
16
After this step, the bitcoins in the deposits x and y are transferred
to the contract. At step (7), A reveals her secret (and consequently,
also its length N ). After that, the action reveal a is performed at
step (8), reducing the contract to withdraw A, and discarding the
after branch. Finally, step (9) performs the withdraw A action,
producing a fresh deposit x3 with 1B redeemable by A.
We also show a computation where A does not reveal her secret,
and B waits until t′ > t to redeem A’s deposit. Starting from the
configuration Γ′ at time 0, we have the following steps:
′ −→ ⟨B, 1B⟩y | {A : a#N} | t
′
′ | 0 −→ Γ
Γ
′ | t
The first step lets the time pass, by rule [Delay]. In the second step, B
fires the prefix withdraw B within the after, and in this way he
collects 1B. This is obtained by using rule [C-Withdraw] in the premise
⋄
of [C-Timeout].
α−→ (Γ˙Rs , δ ˙Rs ).
A.3 Supplementary material for Section 5
If a symbolic run Rs is finite, we write ΓRs for its last untimed
configuration, and δRs for the last time. We write Rs α−→ ˙Rs when
˙Rs extends Rs with the transition (ΓRs , δRs )
Definition 8 (Stripping of symbolic runs). We denote with
strip(Rs ) the sequence obtained from Rs by replacing each com-
mitted secret {A : a#N} with {A : a#⊥}, and each label A : {G}C , ∆
with A : {G}C , 0. We accordingly define label stripping.
⋄
The strategy of A has access to an infinite sequence rA ∈ {0, 1}ω
of independent and uniformly random bits. Instead of modelling
the access to rA through an oracle, we simply pass rA as input to
the strategy.
Definition 9 (Randomness sources). A randomness source is a
function r from participants A ∈ Hon ∪ {Adv} to infinite bitstrings
r (A) ∈ {0, 1}ω. We usually write rA for r (A).
⋄
The following lemma states that stripping preserves the symbolic
transitions, except for those which reveal secrets.
Lemma 3. Let α (cid:44) A : a, for any A and a. (i) if Rs α−→ ˙Rs , then
α−→ strip( ˙Rs ); (ii) if strip(Rs )
α−→ Rs∗, then Rs α−→ ˙Rs , for
strip(Rs )
some ˙Rs such that strip( ˙Rs ) = strip(Rs∗ ).
Definition 10 (Symbolic participant strategies). The symbolic
strategy of a participant A ∈ Hon is a PPTIME algorithm Σs
A (Rs∗ , rA ),
⟨A, v⟩x | ⟨A, v′⟩y | Γ
A:x,y−−−−−→ ⟨A, v⟩x | ⟨A, v′⟩y | A[x, y ▷ ⟨A, v + v′⟩] | Γ
[Dep-AuthJoin]
Γ = A[x, y ▷ ⟨A, v + v′⟩] | A[y, x ▷ ⟨A, v + v′⟩] | Γ′
−−−−−−−→ ⟨A, v + v′⟩z | Γ′
⟨A, v⟩x | ⟨A, v′⟩y | Γ
join(x,y )
z fresh
[Dep-Join]
⟨A, v + v′⟩x | Γ
A:x,v,v′
−−−−−−−−→ ⟨A, v + v′⟩x | A[x ▷ ⟨A, v⟩, ⟨A, v′⟩] | Γ
[Dep-AuthDivide]
Γ = A[x ▷ ⟨A, v⟩, ⟨A, v′⟩] | Γ′ y, y′ fresh
divide(x,v,v′)
−−−−−−−−−−−−→ ⟨A, v⟩y | ⟨A, v′⟩y′
⟨A, v + v′⟩x | Γ
| Γ′
[Dep-Divide]
⟨A, v⟩x | Γ
A:x,B−−−−−→ ⟨A, v⟩x | A[x ▷ B] | Γ
[Dep-AuthDonate]
Γ = A[x ▷ B] | Γ′ y fresh
⟨A, v⟩x | Γ