# HDiff: A Semi-Automatic Framework for Discovering Semantic Gap Attacks in HTTP Implementations

## Authors
- Kaiwen Shen
- Jianyu Lu
- Yaru Yang
- Jianjun Chen
- Mingming Zhang
- Haixin Duan
- Jia Zhang
- Xiaofeng Zheng

### Delegated Presenter
- Shuai Hao

### Conference
- DSN 2022, June 28, 2022

---

## Abstract
HDiff is a semi-automatic framework designed to discover semantic gap attacks in HTTP implementations. This paper introduces the architecture and methodology of HDiff, along with its effectiveness in identifying vulnerabilities in popular HTTP servers.

---

## Introduction

### Middleboxes and Semantic Gaps
- **Middleboxes**: Intermediate devices deployed for security or performance benefits, such as firewalls, cache proxies, and CDNs.
- **Semantic Gaps**: Different middleboxes may interpret messages differently, leading to inconsistencies.

### Example: HTTP Request Smuggling
- **Attack Vector**: Inconsistent parsing of multiple `Content-Length` or `Transfer-Encoding` header fields.
- **Impact**: Bypass front-end security controls, exploit reflected XSS, and web cache poisoning.

### Threat Landscape
- **Semantic Gap Attacks**: Inconsistent interpretation of ambiguous HTTP requests, leading to serious threats.
- **Previous Studies**: Most relied on fully manual analysis, making automatic discovery challenging.

---

## The Root Causes of Semantic Gap Attacks
- **Non-compliance with RFCs**:
  - Intended relaxation for robustness (e.g., "be conservative in what you send, be liberal in what you accept").
  - Programming mistakes due to misunderstanding of RFCs.
- **Different Implementations of Optional Requirements**:
  - RFCs define optional requirements, allowing developers discretion in implementation.

---

## HDiff: A Semi-Automatic Testing Framework

### Overview
- **Objective**: Automatically discover semantic gaps using RFC-directed differential testing.
- **Components**:
  - **NLP**: Extract rules from RFCs.
  - **Differential Testing**: Identify inconsistencies in HTTP implementations.
  - **Documentation Analyzer**: Extract and convert specification requirements.
  - **Bugs Detection**: Define detection rules based on HMetrics to identify semantic gap attacks.

### Architecture
- **Documentation Analyzer**:
  - **ABNF Rule Extractor**: Extract ABNF rules from RFCs.
  - **SR Finder**: Identify strong sentiment sentences with potential SRs.
  - **Text2Rule Converter**: Convert SRs into testable rules.
- **Differential Testing**:
  - **ABNF Generator**: Generate test cases based on ABNF rules.
  - **SR Translator**: Translate SRs into test cases with assertions.
  - **Difference Analysis**: Use HMetrics to detect semantic gaps.

### Example: HTTP Request Smuggling
- **Scenario**: Inconsistent processing of `Expect` header leading to Cache-Poisoned Denial-of-Service (CPDoS) attacks.
- **Impact**: Malicious responses are cached, affecting legitimate users.

---

## Research Challenges and Solutions

### Documentation Analyzer
- **Challenges**:
  - Manual extraction of SRs is error-prone and time-consuming.
  - HTTP RFCs are lengthy and complex, making traditional methods ineffective.
- **Solutions**:
  - **Sentiment-based SR Finder**: Automatically identify strong sentiment sentences.
  - **Dependency Tree Analysis**: Break down SRs into message descriptions and role actions.
  - **Part-of-Speech Tagging**: Extract key field names.
  - **Textual Entailment Analysis**: Validate the extracted SRs.

### Differential Testing
- **Challenges**:
  - Generating efficient test cases is difficult.
  - Randomly generated test cases are often rejected by servers.
  - Semantic gap bugs are hard to detect due to no explicit errors.
- **Solutions**:
  - **SR Translator**: Convert SRs into test cases with assertions.
  - **Difference Analysis**: Use HMetrics to detect inconsistencies in server responses.

---

## Experiments and Findings

### Experiment Setup
- **Data Extraction**:
  - 117 specification requirements and 269 ABNF rules from HTTP core specifications (RFC 7230-7235).
- **Evaluation**:
  - Tested 10 popular HTTP implementations.
  - Focused on three representative semantic gap attacks:
    - Host of Troubles [CCS’16]
    - HTTP Request Smuggling [BHUSA’19]
    - Cache-Poisoned Denial-of-Service Attack [CCS’19]

### Results
- **Vulnerabilities Found**:
  - 14 vulnerabilities, including three new types of attack payloads.
- **Exploitable Server Pairs**:
  - 29 pairs of servers with inconsistent behavior.
- **New CVEs**:
  - 7 new CVEs obtained from IIS, Apache, Tomcat, and Weblogic.

---

## Summary

### Contributions
- **New Detecting Framework**:
  - HDiff, a novel framework for exploring semantic gap attacks in HTTP implementations.
- **New Findings**:
  - Identified 14 vulnerabilities and 29 vulnerable server pairs in 10 popular HTTP implementations.
- **Responsible Disclosure**:
  - Reported findings to relevant organizations, resulting in 7 new CVEs.

---

## Acknowledgments
- **Institutions**:
  - Old Dominion University
  - Tsinghua University
  - Qi An Xin Group Corp

---

## Q & A
Thank you for your attention. We welcome any questions or comments.

---

This optimized version of the text is more structured, clear, and professional, with a logical flow that makes it easier to understand the research and its implications.