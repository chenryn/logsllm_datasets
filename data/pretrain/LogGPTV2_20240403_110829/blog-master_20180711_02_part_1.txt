## PostgreSQL 空间类型统计信息(Statistics, Cardinality, Selectivity, Estimate)不准确导致SQL执行计划不准(包含、相交查询)的优化实践  
### 作者                                                             
digoal                                                             
### 日期                                                             
2018-07-11                                                           
### 标签                                                             
PostgreSQL , 空间类型 , 统计信息 , 包含查询 , 相交查询 , BOUND , index , x , y    
----                                                             
## 背景	   
PostgreSQL 通过几何类型以及PostGIS插件，支持丰富的空间类型，空间数据类型包括KNN检索，空间包含，空间相交，方位搜索，空间计算等操作。  
为了得到正确的执行计划，在数据库优化器中，评估满足某个操作符条件的行数，是一个重要的CBO依据。  
而评估选择性又依赖统计信息，同时依赖每种操作符的选择性算法。  
一些优化器相关文档：  
[《PostgreSQL 自定义函数表达式选择性评估算法 - Statistics, Cardinality, Selectivity, Estimate》](../201806/20180625_02.md)    
[《PostgreSQL 多值列的选择性 - Statistics, Cardinality, Selectivity, Estimate》](../201806/20180625_01.md)    
[《PostgreSQL 11 preview - 表达式索引柱状图buckets\STATISTICS\default_statistics_target可设置》](../201805/20180519_07.md)    
[《PostgreSQL 11 preview - 优化器 增强 汇总》](../201805/20180519_04.md)    
[《PostgreSQL 11 preview - 强制auto prepared statment开关(自动化plan cache)(类似Oracle cursor_sharing force)》](../201803/20180325_05.md)    
[《[未完待续] PostgreSQL PRO 特性 - AQO(机器学习执行计划优化器)》](../201803/20180322_04.md)    
[《PostgreSQL pg_stat_reset清除track_counts的隐患》](../201711/20171101_01.md)    
[《PostgreSQL 统计信息pg_statistic格式及导入导出dump_stat - 兼容Oracle》](../201710/20171030_02.md)    
[《优化器里的概率学 - 性能抖动原理分析》](../201706/20170614_02.md)    
[《懒人推动社会进步 - 多列聚合, gin与数据分布(选择性)》](../201706/20170612_04.md)    
[《数据库优化器原理(含动态规划、机器学习建模优化器aqo) - 如何治疗选择综合症》](../201705/20170507_01.md)    
[《PostgreSQL 10.0 preview 功能增强 - SQL执行剩余时间 - 垃圾回收过程可视pg_stat_progress_vacuum》](../201704/20170421_06.md)    
[《PostgreSQL 10.0 preview 性能增强 - hash,nestloop join优化(聪明的优化器是这样的)》](../201704/20170421_03.md)    
[《PostgreSQL 10.0 preview 功能增强 - 动态视图pg_stat_activity新增数据库管理进程信息》](../201703/20170331_01.md)    
[《PostgreSQL 10.0 preview 功能增强 - 流复制统计视图pg_stat_replication增强, 新增时间维度延迟评估》](../201703/20170329_01.md)    
[《PostgreSQL 10.0 preview 优化器改进 - 不完整索引支持复合排序》](../201703/20170312_10.md)    
[《聊一下PostgreSQL优化器 - in里面有重复值时PostgreSQL如何处理?》](../201612/20161223_01.md)    
[《官人要杯咖啡吗? - PostgreSQL实时监测PLAN tree的执行进度 - pg_query_state》](../201612/20161208_01.md)    
[《PostgreSQL pg_stat_ pg_statio_ 统计信息(scan,read,fetch,hit)源码解读》](../201610/20161018_03.md)    
[《PostgreSQL 9.6 并行计算 优化器算法浅析 - 以及如何强制并行度》](../201610/20161002_01.md)    
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)    
[《关键时刻HINT出彩 - PG优化器的参数优化、执行计划固化CASE》](../201607/20160723_02.md)    
[《Greenplum ORCA 优化器的编译安装与使用》](../201607/20160716_01.md)    
[《PostgreSQL prepared statement和simple query的profile及性能差异》](../201604/20160426_03.md)    
[《PostgreSQL 优化器逻辑推理能力 源码解析》](../201602/20160225_01.md)    
[《PostgreSQL 操作符与优化器详解 - 包含(选择性、JOIN方法、等效)等内容》](../201602/20160224_01.md)    
[《PostgreSQL pg_stat_replication sent_location, write_location, flush_location, replay_location的差别》](../201601/20160113_01.md)    
[《为什么PostgreSQL启动后有个UDP监听localhost - pgstat统计信息进程间通信》](../201601/20160107_01.md)    
[《pg_stat_statements fwrite not save》](../201509/20150924_04.md)    
[《PostgreSQL 9.5 new feature - use FSM fast evaluate bloat and other table level statics(pgstattuple_approx)》](../201505/20150515_02.md)    
[《PostgreSQL aggregate function 2 : Aggregate Functions for Statistics》](../201503/20150303_03.md)    
[《优化器成本因子校对(disk,ssd,memory IO开销精算) - PostgreSQL real seq_page_cost & random_page_cost in disks,ssd,memory》](../201404/20140423_01.md)    
[《优化器成本因子校对 - PostgreSQL explain cost constants alignment to timestamp》](../201311/20131126_03.md)    
[《PostgreSQL pg_stats used to estimate top N freps values and explain rows》](../201308/20130811_01.md)    
[《执行计划选择算法 与 绑定变量 - PostgreSQL prepared statement: SPI_prepare, prepare|execute COMMAND, PL/pgsql STYLE: custom & generic plan cache》](../201212/20121224_01.md)    
[《执行计划维度统计\判断执行计划翻转\统计每种执行计划的统计信息 use pg_stat_plans in PostgreSQL 9.0, 9.1 and 9.2》](../201210/20121022_01.md)    
[《PostgreSQL 9.2 improve prepared statements plan's selectivity》](../201205/20120521_01.md)    
[《PostgreSQL 9.2 add array elements statistics》](../201205/20120518_01.md)    
[《WHY prepared Statement running slower in some situation CASE》](../201102/20110216_01.md)    
[《PostgreSQL 优化器行评估算法》](../201005/20100511_04.md)   
那么，空间类型有合理的统计信息吗？  
“目前空间数据类型，还没有柱状图，高频词等内容”，所以给操作符提供的选择性依据非常有限。  
因此目前存在一个这样的问题，选择性函数内使用百分比硬编码，在代码中写死了选择性比例，那么空间包含查询（不管范围多大，评估出来的记录数是一样的），所以基本上都会选择空间索引扫描( 然而实际上当真实空间包含查询包含了大量记录时，全表扫描性能更好 )。  
## 例子  
1、建表（pos存储point数据），写入1000万记录数据，创建空间索引  
```  
create extension postgis;  
create table test (id int , info text, pos geometry);  
insert into test select generate_series(1,10000000), 'test', st_setsrid(st_makepoint(110+random()*20-10, 70+random()*10-5), 4326);  
create index idx_test_1 on test using gist(pos);  
```  
2、收集统计信息  
```  
vacuum analyze test;  
```  
你会发现空间类型的统计信息非常有限(没有高频词，柱状图，相关性等内容)：  
```  
postgres=# select * from pg_stats where tablename='test' and attname='pos';  
 schemaname | tablename | attname | inherited | null_frac | avg_width | n_distinct | most_common_vals | most_common_freqs | histogram_bounds | correlation | most_common_elems | most_common_elem_freqs | elem_count_histogram   
------------+-----------+---------+-----------+-----------+-----------+------------+------------------+-------------------+------------------+-------------+-------------------+------------------------+----------------------  
 public     | test      | pos     | f         |         0 |        32 |         -1 |                  |                   |                  |             |                   |                        |   
(1 row)  
```  
3、查看执行计划，查看评估出来的记录数。  
空间类型选择性使用如下硬编码0.001。   
```
src/backend/utils/adt/geo_selfuncs.c
/*
 *      contsel -- How likely is a box to contain (be contained by) a given box?
 *
 * This is a tighter constraint than "overlap", so produce a smaller
 * estimate than areasel does.
 */
Datum
contsel(PG_FUNCTION_ARGS)
{
        PG_RETURN_FLOAT8(0.001);
}
```
不管输入什么空间条件，评估得到的记录数都是千分之一：10000条   
```  
条件1：
postgres=# explain select * from test where st_contains(st_setsrid(st_makebox2d(st_makepoint(110,1), st_makepoint(112,2)), 4326) , pos);  
                                                  QUERY PLAN                                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on test  (cost=149.95..12834.93 rows=3333 width=41)  
   Recheck Cond: ('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000000400000000000005C4000000000000000400000000000005C40000000000000F03F0000000000805B40000000000000F03F'::geometry ~ pos)  
   Filter: _st_contains('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000000400000000000005C4000000000000000400000000000005C40000000000000F03F0000000000805B40000000000000F03F'::geometry, pos)  
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..149.12 rows=10000 width=0)  
         Index Cond: ('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000000400000000000005C4000000000000000400000000000005C40000000000000F03F0000000000805B40000000000000F03F'::geometry ~ pos)  
(5 rows)  
条件2：
postgres=# explain select * from test where st_contains(st_setsrid(st_makebox2d(st_makepoint(110,1), st_makepoint(120,100)), 4326) , pos);  
                                                 QUERY PLAN                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on test  (cost=149.95..12834.93 rows=3333 width=41)  
   Recheck Cond: ('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000059400000000000005E4000000000000059400000000000005E40000000000000F03F0000000000805B40000000000000F03F'::geometry ~ pos)  
   Filter: _st_contains('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000059400000000000005E4000000000000059400000000000005E40000000000000F03F0000000000805B40000000000000F03F'::geometry, pos)  
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..149.12 rows=10000 width=0)  
         Index Cond: ('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000059400000000000005E4000000000000059400000000000005E40000000000000F03F0000000000805B40000000000000F03F'::geometry ~ pos)  
(5 rows)  
```  
4、那么实际上的记录数是多少呢？  
条件1：0条。  
```  
postgres=# explain analyze select count(*) from test where st_contains(st_setsrid(st_makebox2d(st_makepoint(110,1), st_makepoint(112,2)), 4326) , pos);  
                               QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=12843.26..12843.27 rows=1 width=8) (actual time=0.015..0.015 rows=1 loops=1)  
   ->  Bitmap Heap Scan on test  (cost=149.95..12834.93 rows=3333 width=0) (actual time=0.012..0.012 rows=0 loops=1)  
         Recheck Cond: ('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000000400000000000005C4000000000000000400000000000005C40000000000000F03F0000000000805B40000000000000F03F'::geometry ~ pos)  
         Filter: _st_contains('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000000400000000000005C4000000000000000400000000000005C40000000000000F03F0000000000805B40000000000000F03F'::geometry, pos)  
         ->  Bitmap Index Scan on idx_test_1  (cost=0.00..149.12 rows=10000 width=0) (actual time=0.010..0.010 rows=0 loops=1)  
               Index Cond: ('0103000020E610000001000000050000000000000000805B40000000000000F03F0000000000805B4000000000000000400000000000005C4000000000000000400000000000005C40000000000000F03F0000000000805B40000000000000F03F'::geometry ~   
pos)  
 Planning time: 0.170 ms  
 Execution time: 0.061 ms  
(8 rows)  
```  