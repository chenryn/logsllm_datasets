execution or a memory read, the module’s cache activity does
not leak additional information to an attacker. We investigated
the cache activity on the cache sets used by the KeyDrown
kernel module in a Prime+Probe attack and found no leakage
from our module.
Second Layer. To make use of the same noise as in the ﬁrst
layer, the second layer listens to the /dev/input/event0
pseudo-ﬁle containing all keyboard events. This ﬁle is not
world-readable but only readable by members of the input
group. Thus, this layer runs as a separate keydrown user with
default limited privileges and additional access to this ﬁle.
As the second layer is a user space binary, an attacker
could theoretically mount a Flush+Reload attack against the
second layer. However, attacking the second layer does not
result in any additional information. The second layer does not
know whether an event is generated from a real or an injected
keystroke. For every event, a random printable character is sent
to the hidden window. Thus, the execution path for printable
characters is always active, and the attacker cannot learn any
additional information from attacking the second layer. The
same is also true for Prime+Probe, even a successful attack
does not provide additional information. We investigated the
cache activity of the KeyDrown shared library parts and the
KeyDrown user space binary using a template attack and did
not ﬁnd any leakage.
Third Layer. The third layer builds upon the second layer,
and thus the same argumentation as for the second layer holds.
An attacker cannot distinguish real and injected keystrokes in
the second layer as all events are merged within the kernel. As
the third layer relies on the same source as the second layer,
there is also no leakage from the third layer. Thus, any attack
on the third layer does not give an attacker any advantage
over any other attack. We investigated the cache activity of
the control ﬂow and data accesses up to the point where the
input is stored in the buffer in a Prime+Probe attack and found
no leakage.
Fig. 11. procfs-based attack. Injected keystrokes ((cid:78)) and real events (•)
are not distinguishable when KeyDrown is active (after dotted line).
Fig. 12. rdtsc-based attack. Injected keystrokes ((cid:78)) and real events (•) are
not distinguishable when KeyDrown is active (after dotted line).
B. Requirement R2
KeyDrown reduced the F-score of all state-of-the-art attacks
such that using the side channel gives an advantage over an
always-one oracle of ≤0.0 %. An attacker might still be able
to combine multiple traces from the same user and build a
binary classiﬁer, if the user predictably and repeatedly types
the same character sequence. Such a classiﬁer may achieve
a higher precision and a higher F-score, as long as there is
actually meaningful information in the corresponding traces.
However, there is a practical limit on the number of traces an
attacker can gather from the user, which R2 estimates to be
1825 traces.
In our attack scenario, we model a powerful attacker who
can take advantage of the following properties:
1) Noise-free side channel: The used side channel is noise-
free, i.e., only real and fake keystrokes are recorded, no
other system noise.
2) Perfect (re-)alignment: The attacker can detect when
a password input starts with a variance as low as the
variance of a single inter-keystroke interval. Additionally,
the attacker has an alignment-oracle providing perfect re-
alignment for the traces after each guessed keystroke. This
leads to the same variance for every key instead of an
accumulated variance.
3) Known length: The attacker knows the exact length of
the password and expects exactly as many keystrokes.
This attacker is far stronger than any practical attacker.
We generate simulated traces that fulﬁll
the properties
above and calculate the average of the perfectly (re-)aligned
traces. As our attacker knows the length n of the password, he
ﬁnds the n most likely positions where a Gaussian distribution
with the known inter-keystroke interval variance matches. If
the expected value µ of each Gaussian curve is within the
variance of the real keystroke, we assume that the number
of traces was sufﬁcient to extract the positions of the real
keystrokes.
11
00.20.40.60.81·1090102030Runtime[cycles]procfsIRQcount0.50.60.70.80.911.11.2·1090100k200k300kRuntime[cycles]Delta[cycles]D. Performance
On the x86 architecture, we evaluate the performance
impacts of running our KeyDrown implementation on standard
Ubuntu 16.10. We use lmbench [35], a set of micro benchmarks
for performance analysis of UNIX systems, and PARSEC
3.0 [5], a benchmark suite intended to simulate a realistic
workload on multicore systems.
The lmbench results for the latency benchmarks show a
performance overhead of 6.9 %. However, as the execution
time of the lmbench benchmarks is in the range of microsec-
onds to nanoseconds, the overhead does not allow for deﬁnite
conclusions about the overall system performance. Still, we
can see that the injected interrupts have only a small impact
on the kernel performance.
To measure the overall performance, we run the PARSEC
3.0 benchmark with different numbers of cores. The average
performance overhead over all measurements for any number
of cores is 2.5 %. For workloads that do not use all cores,
the performance impact is only 2.0 % for one core and 2.5 %
for two cores. Only if the CPU is under heavy load, we
observe a higher performance impact of 3.1 % when running
the benchmarks on all cores.
On ARM, we evaluate the battery consumption of
KeyDrown. We measure the power consumption in three differ-
ent scenarios, always over the timespan of 5 min. First, if the
screen is off, our fake interrupts are completely disabled, and
thus, KeyDrown does not increase the power consumption if
the mobile phone is not used. Second, if the screen is turned
on, but the keyboard is not shown, KeyDrown increases the
power consumption slightly by 3.9 %. Third, if the keyboard
is shown, the power consumption with KeyDrown increases
by 15.6 %. However, as most of the time, the keyboard is not
shown, KeyDrown does not have great impacts on the overall
power consumption. In total, KeyDrown reduces the battery
life time of an average user by 4.6 %.4
Note that all the performance measurements were done
using the proof-of-concept. We expect
the proof-of-
concept can be considerably improved in terms of performance
overhead and battery usage by not injecting the fake interrupts
all the time but only while the user is actually entering text.
that
E. Other Attacks
While we already demonstrated that the most powerful
side-channel attacks are mitigated, we discuss three other
attacks subsequently. The Prime+Probe side channel results
from the victim program evicting a cache line of the attacker.
As the last-level cache is inclusive, any eviction from the last-
level cache also evicts this line from the L1 cache. However,
if a cache line is evicted from the L1 cache it may still be
in the last-level cache. In this case, the attacker would miss
the eviction and thus the targeted event. In our evaluation, we
ﬁnd that the recall is very close to 1 in all cases. This means
that we do not miss any events. Hence, there is no additional
information that an attacker could gain from a Prime+Probe
attack on the L1 cache. Consequently, evaluating Prime+Probe
on the last-level cache is sufﬁcient to conclude that Prime+
Probe on the L1 cache does not leak additional information.
The DRAMA side-channel attack presented by Pessl et al.
[43] results from a massive number of secret-dependent mem-
ory accesses that lead to heavy cache thrashing, i.e., the victim
program accesses lots of memory locations that are mapped
to the same cache lines. It is therefore unclear whether or
not KeyDrown protects against DRAMA. In particular, it does
not protect against the speciﬁc attack against keystrokes in the
Firefox address bar (cf. Section VI). However, we observe that
KeyDrown adds signiﬁcant amounts of noise to the attack.
To our surprise, we found that KeyDrown also mitigates
the keystroke timing attack based on the event queue of the
Chrome browser by Vila et al. [53] (USENIX Sec’17). They
state that the leakage is due to the time it takes Chrome to
enqueue and dispatch every keystroke event. However, we
investigated their attack and were able to reproduce it on
MacOS systems reliably, but not on other operating systems,
indicating that this effect is not purely Chrome-speciﬁc, but
also has other inﬂuences. We believe that their attack exploits
multiple effects in combination:
the Chrome event queue
and the interruption by the hardware interrupts as in our
rdtsc-based attack, which is additionally ampliﬁed by the
signiﬁcantly higher I/O latency caused by the atypical MacOS
design for interrupt handling [1].5
A preliminary version of our rdtsc-based interrupt timing
attack was the basis for the same attack in JavaScript [29].
They were able to identify the user typed URL, and distinguish
different users based on this attack. As they report, KeyDrown
successfully mitigates their attack in JavaScript as well.
KeyDrown has a signiﬁcant effect on the attack by
Jana et al. [23], exploiting CPU utilization spikes. The fake
keystrokes introduce similar small CPU utilization spikes
making their attack impractical. Similarly, KeyDrown triggers
screen redraws through the hidden window (cf. Section IV).
Hence, KeyDrown also makes the screen-redraw-based attack
by Diao et al. [10] impractical.
VI. LIMITATIONS AND FUTURE WORK
KeyDrown mitigates software-based side-channel attacks
on keystrokes and keystroke timings in general. This includes
even the application layer without changing an existing appli-
cation if either:
• the input is processed only after the user ﬁnished entering
the text (e.g., pressing a button on a login form), and there
is no immediate action when a key is pressed (e.g., as with
password ﬁelds or simple text input ﬁelds),
• or the application is designed to remove side-channel
information.
4For an average user, with a screen-on-time of 145 minutes, 2617 touch
actions [56], and 1 charge per day (21.7 hours standby time) [26], an average
typing speed of 20 words per minute [4] and hence, 100 characters per
minute [39], we can assume a keyboard-shown time of 26 minutes per battery
charge. For modern devices, screen-on consumes approximately 33 times more
battery than standby [13].
5Interrupt handlers on MacOS only enqueue the task to handle an interrupt
in a queue, taking almost zero time. This queue is processed by an interrupt
service thread, doing the actual
interrupt handling. This additional step
increases the total computation time compared to traditional interrupt handling.
As the attack is not inﬂuenced by which thread does the actual interrupt
handling, this increased interruption time ampliﬁes the side channel.
12
Otherwise, the application layer might still leak timing infor-
mation when performing intense computations for every single
keystroke, e.g., autocomplete or live search features [43].
Song et al. [50] demonstrated keystroke timing attacks
performed by a malicious observer on the same network.
Zhang et al. [60] speculated that
this attack vector could
also be exploited through /proc/net, which might still
be available in Android O. However,
this is not a local
software-based attack but a side channel for a remote attacker.
Hence, dedicated countermeasures beyond KeyDrown should
be implemented to prevent this attack.
Some software-based side channel attacks may be unaf-
fected by KeyDrown, e.g., the sensor-based attacks exploiting
the accelerometer [7], but these attacks can be thwarted by
introducing noise [48].
KeyDrown protects against software-based attacks on
keystrokes as well as touch events. However, swipe movements
are not protected as their interrupt rate is too high. While this is
not a problem in the case of a password input — if a password
can be swiped and thus pasted from a dictionary, there is little
to protect — it is future work to investigate how to extend
KeyDrown to protect swipe movements.
Furthermore, our novel side channels emphasize the neces-
sity to deploy KeyDrown widely. Multi-Prime+Probe attacks
provide a signiﬁcantly higher accuracy than previous Prime+
Probe attacks on dynamic memory and kernel memory. It
is likely that Multi-Prime+Probe works similarly in cloud
systems and thus allows highly accurate attacks like keystroke
timing attacks across virtual machine boundaries.
Our current proof-of-concept is not optimized for usabil-
ity. For most of the system, the real and fake keystrokes
are indistinguishable, the keystrokes are just led to different
windows. Known limitations are that fake keystrokes interrupt
key repetition and may interfere with input methods in modern
computer games. However, these limitations can be overcome
by adapting how key repetition is implemented.
VII. CONCLUSION
Keystrokes are processed on many different layers of the
software stack and are thus not entirely covered by previ-
ously proposed defense mechanisms. In this article, we pre-
sented KeyDrown, a novel defense mechanism that mitigates
keystroke timing attacks. KeyDrown injects a large number of
fake keystrokes on the kernel level and propagates them —
through all layers of the software stack — up to the user
space application. A careful design and implementation of
this countermeasure ensures that all software routines involved
in the processing of a keystroke are loaded, irrespective of
whether a real or a fake keystroke is processed. Thereby,
KeyDrown mitigates interrupt-based attacks, Prime+Probe at-
tacks, and Flush+Reload attacks on the entire software stack.
With KeyDrown, an attacker cannot distinguish fake from
real keystrokes in practice anymore. Our evaluation shows
that KeyDrown eliminates any advantage an attacker can gain
from side channels, i.e., ≤0.0 % advantage over an always-one
oracle, thus, it successfully mitigates keystroke timing attacks.
ACKNOWLEDGMENT
We would like to thank our anonymous reviewers for
their valuable feedback and Johannes Winter for insights on
ARM interrupt handling. This work has been supported by
the Austrian Research Promotion Agency (FFG) via the K-
project DeSSnet, which is funded in the context of COMET –
Competence Centers for Excellent Technologies by BMVIT,
BMWFW, Styria and Carinthia. This project has received
funding from the European Research Council (ERC) under
the European Union’s Horizon 2020 research and innovation
programme (grant agreement No 681402). This project has
received funding from the European Union’s Horizon 2020
research and innovation programme under grant agreement No
644052 (HECTOR). This work was partially supported by the
TU Graz LEAD project ”Dependable Internet of Things in
Adverse Environments”.
REFERENCES
[1]
“Performance considerations,” Apple Inc., 2013. [Online]. Available:
https://developer.apple.com/library/content/documentation/Darwin/
Conceptual/KernelProgramming/performance/performance.html
[2] ARM,
“Application Note 176 – How a GIC works,” 2007.
http://infocenter.arm.com/help/index.jsp?topic=
[Online]. Available:
/com.arm.doc.dai0176c/ar01s03s02.html
[3] ——, “ARM Generic Interrupt Controller Architecture version 2.0,”
2013.
[4] P. Bao, J. Pierce, S. Whittaker, and S. Zhai, “Smart phone use by
non-mobile business users,” in Proceedings of the 13th International
Conference on Human Computer Interaction with Mobile Devices and
Services, 2011.
[5] C. Bienia, S. Kumar, J. P. Singh, and K. Li, “The parsec benchmark
suite: Characterization and architectural implications,” in Proceedings
of the 17th International Conference on Parallel Architectures and
Compilation Techniques, 2008.
[6] D. P. Bovet and M. Cesati, Understanding the Linux Kernel. O’Reilly