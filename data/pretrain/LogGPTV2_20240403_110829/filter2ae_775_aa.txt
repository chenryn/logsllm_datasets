## 前言
最近看到某平台上有一篇关于SSTI的文章，之前也没了解过SSTI的漏洞，因此决定写篇文章记录学习过程。
## 模板引擎
要了解SSTI漏洞，首先要对模板引擎有所了解。下面是模板引擎的几个相关概念。
>
> 模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的文档。
>
> 模板引擎的本质是将模板文件和数据通过模板引擎生成最终的HTML代码。
>
> 模板引擎不属于特定技术领域，它是跨领域跨平台的概念。
模板引擎的出现是为了解决前后端分离的问题，拿JSP的举个栗子，`JSP`本身也算是一种模板引擎，在`JSP`访问的过程中编译器会识别JSP的标签，如果是`JSP`的内容则动态的提取并将执行结果替换，如果是`HTML`的内容则原样输出。
**xxx.jsp**
    Insert title here
上面的代码经过`JSP`引擎编译后，`HTML`部分直接输出，而使用`JSP`标签部分则是经过了解析后的结果。
    out.write("\r\n");
          out.write("\r\n");
          out.write("\r\n");
          out.write("\r\n");
          out.write("Insert title here\r\n");
          out.write("\r\n");
          out.write("\r\n");
        //解析后的结果
          out.print(111*111);
          out.write("\r\n");
          out.write("\r\n");
          out.write("");
**既然JSP已经是一个模板引擎了为什么后面还要推出其他的模板引擎？**
  * 动态资源和静态资源全部耦合在一起，还是需要在`JSP`文件中写一些后端代码，这其实比较尴尬，所以导致很多JAVA开发不能专注于JAVA开发还需要写一些前端代码。
  * 第一次请求jsp，必须要在web服务器中编译成servlet，第一次运行会较慢。
  * 每次请求jsp都是访问servlet再用输出流输出的html页面，效率没有直接使用html高。
  * 如果jsp中的内容很多，页面响应会很慢，因为是同步加载。
  * jsp只能运行在web容器中，无法运行在nginx这样的高效的http服务上。  
**使用模板引擎的好处是什么？**  
模板设计好后可以直接填充数据使用，不需要重新设计页面，增强了代码的复用性
## Thymeleaf
`Thymeleaf`是众多模板引擎的一种和其他的模板引擎相比，它有如下优势：
  * Thymeleaf使用html通过一些特定标签语法代表其含义，但并未破坏html结构，即使无网络、不通过后端渲染也能在浏览器成功打开，大大方便界面的测试和修改。
  * Thymeleaf提供标准和Spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。
  * Springboot官方大力推荐和支持，Springboot官方做了很多默认配置，开发者只需编写对应html即可，大大减轻了上手难度和配置复杂度。
### 语法
既然`Thymeleaf`也使用的`html`，那么如何区分哪些是`Thymeleaf`的`html`？
在`Thymeleaf`的`html`中首先要加上下面的标识。
#### 标签
`Thymeleaf`提供了一些内置标签，通过标签来实现特定的功能。
标签 | 作用 | 示例  
---|---|---  
th:id | 替换id | ``  
th:text | 文本替换 | `bigsai`  
th:utext | 支持html的文本替换 | `content`  
th:object | 替换对象 | ``  
th:value | 替换值 | ``  
th:each | 迭代 | ``  
th:href | 替换超链接 | `超链接`  
th:src | 替换资源 | ``  
#### 链接表达式
在Thymeleaf  
中，如果想引入链接比如link，href，src，需要使用`@{资源地址}`引入资源。引入的地址可以在`static`目录下，也可以司互联网中的资源。
    超链接
#### 变量表达式
可以通过`${…}`在model中取值，如果在`Model`中存储字符串，则可以通过`${对象名}`直接取值。
    public String getindex(Model model)//对应函数
      {
         //数据添加到model中
         model.addAttribute("name","bigsai");//普通字符串
         return "index";//与templates中index.html对应
      }
取JavaBean对象使用`${对象名.对象属性}`或者`${对象名['对象属性']}`来取值。如果JavaBean写了get方法也可以通过`${对象.get方法名}`取值。
    public String getindex(Model model)//对应函数
      {
        user user1=new user("bigsai",22,"一个幽默且热爱java的社会青年");
        model.addAttribute("user",user1);//储存javabean
        return "index";//与templates中index.html对应
      }
取Map对象使用`${Map名['key']}`或`${Map名.key}`。
    @GetMapping("index")//页面的url地址
     public String getindex(Model model)//对应函数
      {
         Mapmap=new HashMap<>();
         map.put("place","博学谷");
         map.put("feeling","very well");
         //数据添加到model中
         model.addAttribute("map",map);//储存Map
         return "index";//与templates中index.html对应
      }
取List集合：List集合是一个有序列表，需要使用each遍历赋值，``
    @GetMapping("index")//页面的url地址
     public String getindex(Model model)//对应函数
      {
         ListuserList=new ArrayList<>();
         userList.add("zhang san 66");
         userList.add("li si 66");
         userList.add("wang wu 66");
         //数据添加到model中
         model.addAttribute("userlist",userList);//储存List
         return "index";//与templates中index.html对应
      }
#### 选择变量表达式
变量表达式也可以写为`*{...}`。星号语法对选定对象而不是整个上下文评估表达式。也就是说，只要没有选定的对象，美元(`${…}`)和星号(`*{...}`)的语法就完全一样。
        Name: 赛.
        Age: 18.
        Detail: 好好学习.
#### 消息表达式
文本外部化是从模板文件中提取模板代码的片段，以便可以将它们保存在单独的文件(通常是.properties文件)中,文本的外部化片段通常称为“消息”。通俗易懂的来说`#{…}`语法就是用来  
**读取配置文件中数据** 的。
#### 片段表达式
片段表达式`~{...}`可以用于引用公共的目标片段，比如可以在一个`template/footer.html`中定义下面的片段,并在另一个template中引用。
          © 2011 The Good Thymes Virtual Grocery
### Demo
为了能快速对`Thymeleaf`上手，我们可以先写一个Demo直观的看到`Thymeleaf`的使用效果。
首先创建一个`SpringBoot`项目，在模板处选择`Thymeleaf`。
创建好的目录结构如下，可以在`templates`中创建`html`模板文件。
编写`Controller`
    @Controller
    public class urlController {
        @GetMapping("index")//页面的url地址
        public String getindex(Model model)//对应函数
        {
            model.addAttribute("name","bigsai");
            return "index";//与templates中index.html对应
        }
    }
在`templates`下创建模板文件`index.html`
        title
    hello 第一个Thymeleaf程序
启动程序访问`/index`
## SpringMVC 视图解析过程分析
视图解析的过程是发生在Controller处理后，Controller处理结束后会将返回的结果封装为`ModelAndView`对象，再通过视图解析器`ViewResovler`得到对应的视图并返回。分析的栗子使用上面的Demo。
### 封装ModelAndView对象
在`ServletInvocableHandlerMethod#invokeAndHandle`中，做了如下操作：
  * `invokeForRequest`调用Controller后获取返回值到`returnValue`中
  * 判断`returnValue`是否为空，如果是则继续判断`0RequestHandled`是否为`True`，都满足的话设置`requestHandled`为`true`
  * 通过`handleReturnValue`根据返回值的类型和返回值将不同的属性设置到`ModelAndViewContainer`中。
    public void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {
            //调用Controller后获取返回值到returnValue中
            Object returnValue = this.invokeForRequest(webRequest, mavContainer, providedArgs);
            this.setResponseStatus(webRequest);
            //判断returnValue是否为空
            if (returnValue == null) {
                //判断RequestHandled是否为True
                if (this.isRequestNotModified(webRequest) || this.getResponseStatus() != null || mavContainer.isRequestHandled()) {
                    this.disableContentCachingIfNecessary(webRequest);
                    //设置RequestHandled属性
                    mavContainer.setRequestHandled(true);
                    return;
                }
            } else if (StringUtils.hasText(this.getResponseStatusReason())) {
                mavContainer.setRequestHandled(true);
                return;
            }
            mavContainer.setRequestHandled(false);
            Assert.state(this.returnValueHandlers != null, "No return value handlers");
            try {