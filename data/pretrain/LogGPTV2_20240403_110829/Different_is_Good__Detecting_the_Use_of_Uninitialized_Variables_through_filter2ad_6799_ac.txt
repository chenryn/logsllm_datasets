does not operate on the tainted memory or register, there is no
necessary to symbolically execute it and we can safely skip it.
Specifically, we first parse the generated trace and translate each
machine instruction into a VEX IR, if and only if the instruction
is operating on the tainted memory or register. Otherwise, the in-
struction is unchanged. All the translated VEX IR and the native
instructions are maintained inside a memory region, using a bit
for each instruction (instruction mode bit) to denote the execution
mode (symbolic or native). When we find a mode switch from the
symbolic execution to the native execution, we can safely skip all
the following native instructions and directly jump to the next
symbolic instruction that operates the tainted value. Since the con-
crete context information of the instruction has been saved, we can
restore the context and symbolically execute the following ones
from there.
Symbolic expression packing With the growth of the complex-
ity of symbolic expression, the time and space overhead to manipu-
late the new expression is also growing. Our system uses another
optimization, i.e., expression packing, for better performance.
Specifically, we evaluate the complexity of each symbolic expres-
sion before propagating it. If the expression is too complex, we will
split a new symbol as an alias to replace the old one. In our sys-
tem, the complexity of an expression is measured by its length and
depth. The length of the expression refers to the number of atomic
symbols in the expression, while the depth means the number of
steps to generate the expression. In practice, we set 1, 024 as the
threshold for the length and 6 as the threshold for the depth. These
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1890Table 2: The detected kernel information leaks in Windows operating systems. In total, our system detected 34 new issues, and
17 of them have been confirmed by Microsoft. We mask out part of the component name for the purpose of anonymity, since
some of these issues have not been fixed.
Component
nt!Iop***File win7/win10 32/64bit
nt!Nt***Error win7/win10 32/64bit
System
win7 32/64bit
win7 32/64bit
nt!Nt***File
nt!Nt***Memory
Ntfs!Nt***Journal win7/win10 32/64bit
win7/win10 32bit
nt!Nt***Memory#2 win7/win10 32/64bit
nt!Nt***Token
1
2
3
4
5
6
7
nt!Nt***Port
8
nt!Alpc***Port
9
nt!Alpc***Attributes
10
nt!Alpc***Message
11
nt!Nt***FileEx
12
win32k!xxx***MsgEx
13
nt!Nt***Control
14
nt!Nt***Information
15
win32kbase!RIM***Input
16
tcpip!Udp***Indication
17
win32k!xxx***Terminal
18
nt!Nt***Error#2
19
nt!Rtl***X86
20
nt!Ki***Apc
21
nt!Nt***Process
22
mrxsmb!MRx***Transports
23
24
Ntfs!Ntfs***Extend
25 win32kbase!Check***Pointer
nt!Etwp***Space
26
nt!Pop***CleanUp
27
nt!Pop***State
28
nt!Exp***Info
29
nt!Nt***Objects
30
nt!Etwp***Buffer
31
nt!Iop***Request
32
nt!Etwp***Item
33
34 mpsdrv!Send***Notification
win7 64bit
win7 64bit
win7/win10 64bit
win10 64bit
win7/win10 64bit
win7/win10 32bit
win7 32bit
win7 32bit
win10 64bit
win10 64bit
win7 32bit
win7 32bit
win7 32bit
win7 32bit
win10 64bit
win10 64bit
win10 64bit
stack/heap
Status
Discovery Date Brief description
stack
stack
stack
stack
heap
stack
stack
stack
stack
stack
stack
stack
heap
heap
heap
stack
heap
stack
stack
stack
stack
stack
stack
stack
stack
stack
heap
heap
heap
heap
heap
heap
heap
heap
CVE-2018-8408
CVE-2018-8477
CVE-2018-8621
CVE-2018-8622
CVE-2019-0569
CVE-2019-0621
CVE-2019-0767
CVE-2019-0775
CVE-2019-0782
CVE-2019-0702
CVE-2019-0840
CVE-2019-0844
CVE-2019-0628
CVE-2019-0661
CVE-2019-0663
CVE-2019-0776
CVE-2019-1039
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
Discussion
2018-07
2018-09
2018-08
2018-08
2018-09
2018-10
2018-11
2018-11
2018-11
2018-11
2018-12
2018-12
2018-10
2018-11
2018-11
2019-01
2019-02
2018-08
2018-09
2018-09
2018-10
2018-10
2018-11
2018-12
2018-12
2019-01
2018-10
2018-11
2018-11
2018-11
2018-11
2018-11
2018-11
2018-12
0x04 bytes disclosure with IoStatusBlock
0x04 bytes disclosure with Response
0x04 bytes disclosure with IoStatusBlock
0x04 bytes disclosure with OldProtect
0x01-0x03 bytes disclosure with USN_RECORD structure
0x04 bytes disclosure with ReturnLength
0x04 bytes disclosure with ReturnLength
0x04 bytes disclosure with REMOTE_PORT_VIEW
0x04 bytes disclosure with REMOTE_PORT_VIEW
0x10 bytes disclosure with ALPC message
0x04 bytes disclosure with ALPC message
0x04 bytes disclosure with IoStatusBlock
0x04 bytes disclosure with lpdwResult
0x2140 bytes disclosure with OutputBuffer argument
0x7f bytes disclosure with SystemInformation argument
0x04 bytes disclosure with input pointer
0x04 bytes disclosure with OutputBuffer argument
0x50 bytes disclosure
0x18 bytes disclosure
0x04 bytes disclosure
0x04 bytes disclosure
0x04 bytes disclosure
0x0a bytes disclosure
0x02 bytes disclosure
0x20 bytes disclosure
0x04 bytes disclosure
0x1c bytes disclosure
0x04 bytes disclosure
0x01 byte disclosure
0x02 bytes disclosure
0x04 bytes disclosure
0x01f0 bytes disclosure
0x04 bytes disclosure
0x0f85 bytes disclosure
win7/win10 32bit
win7/win10 32bit
win7/win10 32bit
win7/win10 32bit
win7 32bit
win7 32bit
win7/win10 32bit
win7 32bit
win7 32bit
win7 32/64bit
/* LocalResponse: uninitialized kernel stack
* Response: user space memory
*/
Status = ExpRaiseHardError (ErrorStatus, NumberOfParameters,
UnicodeStringParameterMask, CapturedParameters,
ValidResponseOptions, &LocalResponse);
try {
*Response = LocalResponse;
-> where the leak occurs
} except (EXCEPTION_EXECUTE_HANDLER) {
NOTHING;
}
Listing 1: The code snippet of the function NtRaiseHardError
multiple Windows kernel components. We reported our findings
to the Microsoft Security Response Center. Among them, 17 have
been confirmed as vulnerabilities with assigned CVE numbers. For
the rest ones, we are still in the process of communicating with
Microsoft to evaluate potential security consequences, at the time
of writing this paper (August 2019).
Case study: CVE-2018-8477 In the following, we will use one
case study to demonstrate how our system detects the new vul-
nerability in the latest Windows kernel. This vulnerability exists
Figure 7: The comparison of our system with Bochspwn to
detect known vulnerabilities. Our system can locate 85 vul-
nerabilities, while Bochspwn can detect 67 of them.
in the nt!NtRaiseHardError module of the Windows 10 kernel.
Part of the code snippet of the vulnerable module can be found in
WRK(Windows Research Kernel) v1.2 project (Listing 1). This vul-
nerability is triggered by setting the value ValidResponseOptions
to OptionShutdownSystem. In this case, the return value of the
function ExpRaiseHardError will be STATUS_PRIVILEGE_NOT_HELD
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1891Table 3: The result to detect vulnerabilities in old versions of Windows kernels. These vulnerabilities (67 in total) can be
detected by both our system and Bochspwn.
Component
System
stack/heap
Status
Brief description
nt!NtGdiGetTextMetricsW
win7 32/64bit
win32k!NtGdiDoBanding win7/win10 32/64bit
win10 32/64bit
win7 32/64bit
win10 32/64bit
win32kfull!SfnINLPUAHDRAWMENUITEM win7/win10 32/64bit
win32k!xxxClientLpkDrawTextEx
win7 32/64bit
nt!NtQueryInformationProcess#2
win32k!fnHkINLPMSLLHOOKSTRUCT
nt!RtlpCopyLegacyContextAmd64
nt!KiDispatchException#2 win7/win10 32/64bit
nt!NtWaitForDebugEvent win7/win10 32/64bit
nt!NtQueryVirtualMemory
win10 32/64bit
nt!NtQueryInformationWorkerFactory win7/win10 32/64bit
win32k!xxxSendMenuSelect win7/win10 32/64bit
nt!NtGdiExtGetObjectW win7/win10 32/64bit
win32k!NtGdiGetOutlineTextMetricsInternalW win7/win10 32/64bit
win32k!NtGdiGetRealizationInfo win7/win10 32/64bit
win32k!ClientPrinterThunk win7/win10 32/64bit
nt!NtQueryInformationProcess win7/win10 32/64bit
win32k!NtGdiMakeFontDir win7/win10 32/64bit
nt!NtQueryInformationJobObject win7/win10 32/64bit
nt!NtQueryInformationJobObject#2 win7/win10 32/64bit
nt!NtQueryInformationTransaction win7/win10 32/64bit
nt!NtQueryInformationResourceManager win7/win10 32/64bit
nt!KiDispatchException win7/win10 32/64bit
nt!NtQueryInformationJobObject#3 win7/win10 32/64bit
win32k!NtGdiGetPhysicalMonitorDescription win7/win10 32/64bit
win32k!NtGdiGetFontResourceInfoInternalW
win32k!NtGdiEngCreatePalette
win7 32/64bit
win7 32/64bit
nt!NtQueryAttributesFile win7/win10 32/64bit
nt!NtQuerySystemInformation win7/win10 32/64bit
nt!NtQueryVirtualMemory#2 win7/win10 32/64bit
nt!NtQueryFullAttributesFile win7/win10 32/64bit
nt!NtQueryInformationToken win7/win10 32/64bit
nt!NtTraceControl win7/win10 32/64bit
nt!NtNotifyChangeDirectoryFile win7/win10 32/64bit
nt!NtQueryObject win7/win10 32/64bit
nt!NtQueryDirectoryFile win7/win10 32/64bit