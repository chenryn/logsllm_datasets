### Issue Report

**Bug Report?**  
- No

**Feature Request?**  
- Yes

**BC Break Report?**  
- No

**RFC?**  
- No

**Symfony Version:**  
- 3.2.1

---

#### Description

I am using a form field with a `snake_case` name, while the corresponding property in my model is named in `camelCase`. The getter and setter methods for this property also follow the `camelCase` convention.

When the form is submitted, the data is correctly mapped to the model properties. Specifically, the `PropertyPathMapper` uses the `PropertyAccessor` to set the value, which internally calls the `camelize()` method to find the appropriate getters and setters for the property.

However, when a validation error occurs on such a property, the error is not mapped back to the form field. This happens because the `ViolationMapper` compares the `camelCased` `propertyPath` of the model property with the `snake_cased` `propertyPath` of the form field, and they do not match.

While it may be argued that this is not a bug, and that users should avoid using different names for the form field and the property (unless explicitly using the `property_path` option of the form field), I find this behavior confusing. The mapping used for updating the model based on the form data works as expected, but the reverse mapping for validation errors does not.

---

This inconsistency can lead to unexpected behavior and confusion, especially for developers who are new to Symfony or who are not fully aware of the `property_path` option. I propose that the `ViolationMapper` should be enhanced to handle this case more gracefully, ensuring that validation errors are correctly mapped back to the form fields, even if the naming conventions differ.