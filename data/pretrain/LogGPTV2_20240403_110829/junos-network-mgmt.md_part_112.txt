### Network Traffic Analysis and Troubleshooting

#### Queue and Forwarding Class Data
The following data shows the packets transmitted and queued on each queue of the link services interface and its constituent links. Table 7 provides a summary of these values.

- **Queue: 1, Forwarding Class: Expedited-Forwarding**
  - **Queued:**
    - Packets: 0 (0 pps)
    - Bytes: 0 (0 bps)
  - **Transmitted:**
    - Packets: 350 (0 pps)
    - Bytes: 24350 (0 bps)

- **Queue: 2, Forwarding Class: VOICE**
  - **Queued:**
    - Packets: 300 (0 pps)
    - Bytes: 45672 (0 bps)
  - **Transmitted:**
    - Packets: 300 (0 pps)
    - Bytes: 45672 (0 bps)

- **Queue: 3, Forwarding Class: NC**
  - **Queued:**
    - Packets: 18 (0 pps)
    - Bytes: 234 (0 bps)
  - **Transmitted:**
    - Packets: 18 (0 pps)
    - Bytes: 234 (0 bps)

**Note:** Since the number of transmitted packets equaled the number of queued packets on all links, only the queued packets are shown in the table.

#### Summary Table
| Queue | Constituent Link | Queued Packets | Transmitted Packets | Explanation |
|-------|------------------|----------------|---------------------|-------------|
| Q0    | lsq-0/0/0.0      | 600            | 350 + 350 = 700     | The total number of packets transiting the constituent links (700) exceeded the number of packets queued (600) on the multilink bundle. |
| Q2    | se-1/0/0         | 400            | 100 + 300 = 400     | The total number of packets transiting the constituent links equaled the number of packets on the bundle. |
| Q3    | se-1/0/1         | 0              | 19 + 18 = 37        | The packets transiting Q3 of the constituent links are for keepalive messages exchanged between constituent links. Thus, no packets were counted on Q3 of the bundle. |

#### Verification and Corrective Actions
- **On the Multilink Bundle:**
  - Verify that the number of packets queued matches the number transmitted. If the numbers match, no packets were dropped. If more packets were queued than transmitted, packets were dropped due to a small buffer size. Increase the buffer size on the constituent links to correct this.
  - Ensure the number of packets transiting Q0 (600) matches the number of large and small data packets received (100 + 500) on the multilink bundle.
  - Ensure the number of packets transiting Q2 on the multilink bundle (400) matches the number of voice packets received.

- **On the Constituent Links:**
  - Verify that the total number of packets transiting Q0 (350 + 350) matches the number of data packets and data fragments (500 + 200). This indicates that all data packets after fragmentation correctly transited Q0.
  - Verify that the total number of packets transiting Q2 (300 + 100) on the constituent links matches the number of voice packets received (400) on the multilink bundle.
  - LFI packets from source port 100 transited se-1/0/0, and LFI packets from source port 200 transited se-1/0/1. This indicates that all LFI (Q2) packets were hashed based on the source port and correctly transited both constituent links.

**Corrective Action:**
If packets transited only one link, follow these steps:
1. Determine if the physical link is operational or down. An unavailable link indicates a problem with the PIM, interface port, or physical connection.
2. Verify that the classifiers are correctly defined for non-LFI packets. Ensure non-LFI packets are not configured to be queued to Q2.
3. Verify that at least one of the following values is different in the LFI packets: source address, destination address, IP protocol, source port, or destination port.

#### Troubleshooting PVC Issues
**Problem:**
You are configuring a permanent virtual circuit (PVC) between T1, E1, T3, or E3 interfaces on a Juniper Networks device and a third-party device, and packets are being dropped, and ping fails.

**Solution:**
- If the third-party device does not have the same FRF.12 support as the Juniper Networks device or supports FRF.12 differently, the Juniper Networks device interface on the PVC might discard a fragmented packet containing FRF.12 headers and count it as a "Policed Discard."
- As a workaround, configure multilink bundles on both peers and set fragmentation thresholds on the multilink bundles.

#### Synchronizing Security Policies
**Problem:**
Security policies are stored in the routing engine and the packet forwarding engine. If the security policies on the routing engine are out of sync with the packet forwarding engine, the commit of a configuration fails. Core dump files may be generated if the commit is tried repeatedly.

**Solution:**
- Use the `show security policies checksum` command to display the security policy checksum value.
- Use the `request security policies resync` command to synchronize the configuration of security policies in the Routing Engine and Packet Forwarding Engine.

#### Checking Security Policy Commit Failures
**Problem:**
Most policy configuration failures occur during a commit or runtime. Commit failures are reported directly on the CLI when you execute the `commit-check` command in configuration mode.

**Solution:**
1. Review your configuration data.
2. Open the file `/var/log/nsd_chk_only` for detailed failure information.

#### Verifying a Security Policy Commit
**Problem:**
Upon performing a policy configuration commit, if you notice that the system behavior is incorrect, use the following steps to troubleshoot the problem.

**Solution:**
1. Execute the operational commands for security policies and verify that the information shown in the output is consistent with what you expected.
2. Set the `traceoptions` command in your policy configuration to capture trace logs. If you cannot determine which flag to use, the `all` option can be used to capture all trace logs.

#### Debugging Policy Lookup
**Problem:**
When you have the correct configuration but some traffic is incorrectly dropped or permitted, you can enable the lookup flag in the security policies `traceoptions`.

**Solution:**
- Enable the `lookup` flag in the security policies `traceoptions` to log the lookup-related traces in the trace file.

#### Log Error Messages for ISSU-Related Problems
**Chassisd Process Errors:**
- Use the error messages to understand issues related to `chassisd`.
- When ISSU starts, a request is sent to `chassisd` to check for any problems. If there is a problem, a log message is created.

**Common Error Handling for ISSU:**
- Any errors encountered during an ISSU result in the creation of log messages. ISSU continues to function without impacting traffic.
- If reverting to previous versions is required, the event is either logged, or the ISSU is halted to avoid mismatched versions on both nodes of the chassis cluster.

**ISSU-Related Errors and Solutions:**
- **Attempt to initiate an ISSU when a previous instance is already in progress:**
  - Abort the current ISSU process using the `request chassis cluster in-service-upgrade abort` command.
- **Reboot failure on the secondary node:**
  - No service downtime occurs as the primary node continues to provide required services. Follow the steps to manually clear existing ISSU states and restore the chassis cluster.
- **Secondary node failed to complete cold synchronization:**
  - The primary node times out if the secondary node fails to complete the cold synchronization. Follow the steps to manually clear existing ISSU states and restore the chassis cluster.
- **Failover of newly upgraded secondary failed:**
  - No service downtime occurs as the primary node continues to provide required services. Follow the steps to manually clear existing ISSU states and restore the chassis cluster.
- **Upgrade failure on primary:**
  - No service downtime occurs as the secondary node fails over as primary and continues to provide required services.
- **Reboot failure on primary:**
  - Before the reboot of the primary node, devices will be out of the ISSU setup, and no ISSU-related error messages will be displayed.

**Initial Validation Checks Failure:**
- The validation checks fail if the image is not present or if the image file is corrupt. Follow the steps to resolve the issue by ensuring the image file is present and not corrupted.