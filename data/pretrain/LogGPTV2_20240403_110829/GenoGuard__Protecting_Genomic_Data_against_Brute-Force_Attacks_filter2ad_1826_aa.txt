title:GenoGuard: Protecting Genomic Data against Brute-Force Attacks
author:Zhicong Huang and
Erman Ayday and
Jacques Fellay and
Jean-Pierre Hubaux and
Ari Juels
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
GenoGuard: Protecting Genomic Data against
Brute-Force Attacks
Zhicong Huang∗, Erman Ayday†, Jacques Fellay‡, Jean-Pierre Hubaux∗, Ari Juels§
∗ School of Computer and Communication Sciences, EPFL, Switzerland
† Bilkent University, Turkey
‡ School of Life Science, EPFL, Switzerland
§ Jacobs Institute, Cornell Tech, USA
Abstract—Secure storage of genomic data is of great and
increasing importance. The scientiﬁc community’s improving
ability to interpret individuals’ genetic materials and the growing
size of genetic database populations have been aggravating the
potential consequences of data breaches. The prevalent use of
passwords to generate encryption keys thus poses an especially
serious problem when applied to genetic data. Weak passwords
can jeopardize genetic data in the short term, but given the multi-
decade lifespan of genetic data, even the use of strong passwords
with conventional encryption can lead to compromise.
We present a tool, called GenoGuard, for providing strong
protection for genomic data both today and in the long
term. GenoGuard incorporates a new theoretical framework
for encryption called honey encryption (HE): it can provide
information-theoretic conﬁdentiality guarantees for encrypted
data. Previously proposed HE schemes, however, can be applied to
messages from, unfortunately, a very restricted set of probability
distributions. Therefore, GenoGuard addresses the open problem
of applying HE techniques to the highly non-uniform probability
distributions that characterize sequences of genetic data.
In GenoGuard, a potential adversary can attempt exhaus-
tively to guess keys or passwords and decrypt via a brute-
force attack. We prove that decryption under any key will
yield a plausible genome sequence, and that GenoGuard offers
an information-theoretic security guarantee against message-
recovery attacks. We also explore attacks that use side infor-
mation. Finally, we present an efﬁcient and parallelized software
implementation of GenoGuard.
I.
INTRODUCTION
Due to major advances in genomic research and to the
plummeting cost of high-throughput sequencing, the use of
human genomic data is rapidly expanding in several do-
mains, including healthcare (e.g., genomic-based personalized
medicine), research (e.g., genome-wide association studies),
direct-to-consumer (DTC) services (e.g., ancestry determina-
tion), legal cases (e.g., paternity tests), and forensics (e.g.,
criminal investigation). For example, it is now possible for
physicians to adjust the prescription of certain drugs based
on the genetic makeup of their patients, for individuals to
learn about their genetic predisposition to serious diseases,
and for couples to ﬁnd out if their potential offspring has an
increased likelihood of developing rare genetic diseases. Major
stakeholders are entering the game; for example, Google is
This research was undertaken while Erman Ayday was at Ecole Polytech-
nique F´ed´erale de Lausanne.
building a cloud platform for storing, processing and sharing
genomic data [1].
However, such a vast exploitation of genomic data comes
with critical privacy issues. Because genomic data includes
valuable and sensitive information about individuals, leakage
of such data can have serious consequences, including discrim-
ination (e.g., by a potential employer), denial of services due to
genetic predisposition (e.g., by an insurance company), or even
blackmail (e.g., using sensitive paternity information). Thus
it is crucial to store and manage genomic data in a privacy-
preserving and secure way.
Existing mechanisms for protecting the privacy of ge-
nomic data include (i) anonymization, which has proven to
be ineffective for genomic data [2], [3], (ii) adding noise to
published genomic data or statistics for medical research (e.g.,
to guarantee differential privacy [4], [5], [6]), (iii) computation
partitioning [7], and (iv) cryptography (e.g., homomorphic
encryption [8], [9], private set intersection [10], etc.). In this
work, we focus mainly on the personal use of genomic data,
such as healthcare or DTC services.
Appropriately designed cryptographic schemes can pre-
they provide security based
serve the utility of data, but
on assumptions about the computational limitations of ad-
versaries. Hence they are vulnerable to brute-force attacks
when these assumptions are incorrect or erode over time.
Given the longevity of genomic data, serious consequences can
result. Compared with other types of data, genomic data has
especially long-term sensitivity. A genome is (almost) stable
over time and thus needs protection over the lifetime of an
individual and even beyond, as genomic data is correlated
between the members of a single family. It has been shown that
the genome of an individual can be probabilistically inferred
from the genomes of his family members [11].
In many situations, though, particularly those involving
direct use of data by consumers, keys are weak and vulnerable
to brute-force cracking even today. This problem arises in
systems that employ password-based encryption (PBE), a
common approach to protection of user-owned data. Users’
tendency to choose weak passwords is widespread and well
documented [12].
Recently, Juels and Ristenpart introduced a new theoretical
framework for encryption called honey encryption (HE) [13].
Honey encryption has the property that when a ciphertext is
decrypted with an incorrect key (as guessed by an adversary),
© 2015, Zhicong Huang. Under license to IEEE.
© 2015, Zhicong Huang. Under license to IEEE.
DOI 10.1109/SP.2015.34
DOI 10.1109/SP.2015.34
447
447
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:07 UTC from IEEE Xplore.  Restrictions apply. 
the result is a plausible-looking yet incorrect plaintext. There-
fore, HE gives encrypted data an additional layer of protection
by serving up fake data in response to every incorrect guess
of a cryptographic key or password. Notably, HE provides a
hedge against brute-force decryption in the long term, giving
it a special value in the genomic setting.
is,
However, HE relies on a highly accurate distribution-
transforming encoder (DTE) (Section II-B) over the mes-
sage space. Unfortunately, this requirement jeopardizes the
practicality of HE. To use HE in any scenario, we have to
understand the corresponding message space quantitatively,
that
the precise probability of every possible message.
When messages are not uniformly distributed, characterizing
and quantifying the distribution is a highly non-trivial task.
Building an efﬁcient and precise DTE is the main challenge
when extending HE to a real use case, and it is what we do
in this paper. Hopefully, the techniques proposed in this paper
are not limited to genomic data; they are intended to inspire
those who want to apply HE to other scenarios, typically when
the data shares similar characteristics with genomic data.
In this paper, we propose to address the problem of
protecting genomic data by combining the idea of honey
encryption with the special characteristics of genomic data in
order to develop a secure genomic data storage (and retrieval)
technique that is (i) robust against potential data breaches,
(ii) robust against a computationally unbounded adversary, and
(iii) efﬁcient.
In the original HE paper [13], Juels and Ristenpart propose
speciﬁc HE constructions that rely on existing generation
algorithms (e.g. for RSA private keys), or operate over very
simple message distributions (e.g., credit card numbers). These
constructions, however, are inapplicable to plaintexts with con-
siderably more complicated structure, such as genomic data.
Thus substantially new techniques are needed in order to apply
HE to genomic data. Additional complications arise when the
correlation between the genetic variants (on the genome) and
phenotypic side information are taken into account. This paper
is devoted mainly to addressing these challenges.
A. GenoGuard
We propose a scheme called GenoGuard. In GenoGuard,
genomic data is encoded, encrypted under a patient’s pass-
word1, and stored at a centralized biobank. We propose a novel
tree-based technique to efﬁciently encode (and decode) the
genomic sequence to meet the special requirements of honey
encryption. Legitimate users of the system can retrieve the
stored genomic data by typing their passwords.
A computationally unbounded adversary can break into the
biobank protected by GenoGuard, or remotely try to retrieve
the genome of a victim. The adversary could exhaustively
try all
the potential passwords in the password space for
any genome in the biobank. However, for each password he
tries, the adversary will obtain a plausible-looking genome
without knowing whether it is the correct one. We also consider
the case when the adversary has side information about a
victim (or victims) in terms of his physical traits. In this
1A patient can choose a low-entropy password that is easier for him/her to
remember, which is a common case in the real world [12].
case, the adversary could use genotype-phenotype associations
to determine the real genome of the victim. GenoGuard is
designed to prevent such attacks, hence it provides protections
beyond the normal guarantees of HE.
GenoGuard is highly efﬁcient and can be used by the
service providers that offer DTC services (e.g., 23andMe) to
securely store the genomes of their customers. It can also be
used by medical units (e.g., hospitals) to securely store the
genomes of patients and to retrieve them later for clinical use.
B. Contributions
Our main contributions in GenoGuard are summarized as
follows:
genome sequences;
• We propose a novel technique to secure genomic data
against data breaches that involve a computationally
unbounded adversary (an essential requirement given
the longevity of genomic data);
• We design and analyze several distribution models for
• We propose and analyze techniques for preventing an
adversary from exploiting side information (physical
traits of victims) in order to decrypt genomes;
• We present a formal security analysis of our proposed
• We implement and show the efﬁciency of GenoGuard.
techniques;
Organization
The rest of the paper is organized as follows. In the next
section we provide a brief background on genomics and honey
encryption. In Section III, we introduce the system model for
GenoGuard. In Section IV, we describe in detail the techniques
underpinning GenoGuard and analyze their security in Sec-
tion V. In Section VI, we study the robustness of GenoGuard
against adversaries with side information (namely, physical
traits of victims). In Section VII, we consider performance,
use cases, and other details. In Section VIII, we review related
work. Section IX concludes the paper.
II. BACKGROUND
In this section, we brieﬂy introduce some basic concepts
of genomics, as well as the honey encryption scheme [13]. To
facilitate future references, frequently used notation is listed
in Table I.
A. Genomics
1) Genetic Locus, Allele, and Single Nucleotide Variant:
In this paper, we consider a genetic locus (plural loci) as a
position on a chromosome. One of a number of alternative
forms at a given locus is called an allele. Most of the genome
is conserved, in comparison to the reference human sequence,
in any given individual. The most abundant type of genetic
variants are single nucleotide variants (SNVs), in which dif-
ferent alleles are observed at the same chromosomal position.
Only about 4 million SNVs are observed per individual; they
represent the sensitive information that should be protected. In
most cases, there are two alleles at a locus, a major allele,
448448
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:07 UTC from IEEE Xplore.  Restrictions apply. 
M
M
n
S
K
C
pk
pm
pd
h
A
DTE,pm(A)
B
Advdte
Advmr
HE,pm,pk (B)
sequence (plaintext) space
a sequence (message), M ∈ M
number of SNVs in M
seed space
key space
ciphertext space
key (password) distribution
original message distribution
DTE message distribution
storage overhead parameter
the adversary against the DTE scheme
adversary A’s advantage of distin-
guishing pm from pd
the adversary against the HE scheme
adversary B’s advantage of recovering
the correct sequence
TABLE I: Notations and deﬁnitions.
which is observed with a high frequency in the population,
and a minor allele, which is observed with low frequency.
The frequency of an allele in a given population is denoted
as the allele frequency (AF). An allele takes a value from
the set {A, T, C, G}. We represent a major allele as 0, and a
minor allele as 1. Human chromosomes are inherited in pairs,
one from the father and the other from the mother, hence each
SNV position has a pair of alleles (nucleotides). For example,
the i-th SNV (on the DNA sequence) can be represented as
SNVi = xy, where x (and y) is an allele. As the ordering of
x and y does not matter, we represent the value of an SNVi
from the set {0, 1, 2}, based on the number of minor alleles
it has. For example, if locus i has major allele A and minor
allele G, we represent AA as 0, AG (or GA) as 1, GG as 2.
2) Diploid Genotype and Haploid Genotype: To be con-
sistent throughout the paper, given a sequence of loci, we
interpret an individual’s diploid genotype as a corresponding
sequence of SNVs, each of which takes values in {0, 1, 2}, and
a haploid genotype as a corresponding sequence of alleles,
each of which takes values in {0, 1}.
3) Linkage Disequilibrium and Recombination: Because
chromosomal segments are inherited as blocks, SNVs on a
sequence are usually correlated, especially when they are
physically close to each other. This correlation is measured
by linkage disequilibrium (LD) [14]. The strength of LD
between two SNVs is usually represented by r2, where r2 = 1
represents the strongest LD relationship. At meiosis, two DNA
sequences exchange genetic information, leading to a novel
combination of alleles that is passed on to the progeny. This
process is called recombination. The recombination rates vary
on the different regions of a chromosome.
B. Honey Encryption
Honey encryption [13] is a recently proposed encryption
scheme that has the advantage of providing security beyond
the brute-force bound over conventional ciphers. In our case,
this is a highly desirable property, considering the longevity of
genomic data. Suppose a message M is sampled from a dis-
tribution pm over the message space M and honey encrypted
under key K ∈ K to yield a ciphertext C ∈ C. Decryption
449449
(cid:3)= K yields a fake message
under an incorrect key K(cid:2)
M(cid:2) also from the distribution pm. In a conventional cipher,
when decrypting a ciphertext using a wrong key, the scheme
usually produces an invalid2 message (often denoted by special
symbol ⊥); thus the adversary can easily eliminate wrong keys
via a brute-force attack. However, in honey encryption, the
adversary does not have such an advantage because the output