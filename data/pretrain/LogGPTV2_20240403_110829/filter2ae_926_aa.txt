原文链接：
## 自动化SPIKE fuzz Vulnserver
为了满足实际fuzz工作的需要，我们得想出一个可以一个接一个地发送多个SPIKES的方法，同时记录足够的细节以便查看正在发送的内容，以及在fuzz过程中程序崩溃时，记录导致崩溃的输入。然后重新启动我们的程序并再次从中断位置开始fuzz测试。
幸运的是，通过对我们的fuzz测试过程进行一些修改就可以做到上述的要求。 以下是修改此fuzz测试的概述：
我们为每个要fuzz的消息创建.spk文件。
在这种情况下，我们将为每个支持的命令创建.spk文件，例如STATS，RTIME等。我们还将为这些SPIKE脚本提供连续的文件名，并在脚本中添加一些额外的命令，以便我们可以从终端获取更多得SPIKE信息。
然后，创建一个wrapper程序，使用generic_send_tcp解释器运行每个.spk文件。 理想情况下，wrapper
程序将允许我们从任何一个提供的SPIKE脚本文件开始，并且当generic_send_tcp送到数据给已关闭的套接字时（表示它正在向其发送数据失败），wrapper程序将停止并向我们提供一些有用的信息。
通过这个基本的框架设置，我们可以重复以下步骤，直到我们完成fuzz测试：
  * 在调试器中启动我们的程序，并在Wireshark中开始新的数据包捕获
  * 从我们中断的最后一个地方运行我们的wrapper程序，它将继续运行SPIKE脚本，直到它崩溃。
  * 当wrapper程序停止时，我们可以检查调试器中程序的状态，通过wrapper 程序的命令行输出以及Wireshark生成的数据包捕获，来确定导致崩溃的输入。
  * 一旦我们识别导致崩溃的数据，我们就可以将其插入到skeletion exploit中，再次利用这些崩溃数据运行目标程序，以查看崩溃是否可以轻松复制。
  * 重复，直到我们的fuzz测试过程完成。
让我们从创建适当的SPIKE脚本文件开始。 在Linux fuzzing系统上创建一个新目录，并将以下内容写入放入“00help.spk”。
    printf("HELP 00help.spk : "); //print to terminal command and filename
    s_readline(); //print received line from server
    s_string("HELP "); // send "HELP " to program
    s_string_variable("COMMAND"); //send fuzzed string
我们为此SPIKE文件添加了一些新的代码。 一开始的printf函数只是使用C语言的printf函数将一些文本打印到终端。
如果fuzz过程恰好在此脚本上停止，可以用该文本信息将标识当时正在fuzz的命令。 我们在括号内的文本中粘贴我们fuzz的命令和脚本文件的文件名。
下一个新命令s_string将一个静态字符串“HELP”添加到发送的SPIKE中（注意HELP后的空格 -这很重要，这样我们的fuzz字符串就会被一个空格与HELP命令分开）。
此脚本的总体目的是在Vulnserver中为HELP命令的参数插入fuzz数据，同时为我们提供足够的上下文数据以查看运行时发生的情况。
我们将使用此基本模板创建SPIKE脚本，因此我们可以对每个命令进行fuzz处理。
查阅我们在分析阶段获得的支持命令列表，获取要添加的命令，并使用连续编号作为每个文件名的开头，例如：
01stats.spk，02rtime.spk，03ltime.spk。
这样我们可以定义在创建wrapper程序时定义fuzz的顺序，并为我们提供一种简单的方法来查看fuzz过程停止时停止的位置。
Vulnserver所支持命令：
    HELP
    STATS [stat_value]
    RTIME [rtime_value]
    LTIME [ltime_value]
    SRUN [srun_value]
    TRUN [trun_value]
    GMON [gmon_value]
    GDOG [gdog_value]
    KSTET [kstet_value]
    GTER [gter_value]
    HTER [hter_value]
    LTER [lter_value]
    KSTAN [lstan_value]
    EXIT
另一个示例，这是STATS命令（01stats.spk）的SPIKE脚本：
    printf("STATS 01stats.spk : "); //print to terminal command and filename
    s_readline(); //print received line from server
    s_string("STATS "); // send "STATS " to program
    s_string_variable("COMMAND"); //send fuzzed string
现在为每个其他命令创建一个SPIKE脚本。 完成后，您的文件夹中应包含以下文件。
为了获得与本指南相符的最佳结果，请确保每个支持的命令的SPIKE文件按照与下面相同的顺序连续命名。
这并不是因为在这个特定的顺序中对命令进行fuzz测试有任何固有的好处，这只是为了让你得到与我相同的结果。
    root@bt4r1vm:~/fuzzing# ls *.spk
    00help.spk 03ltime.spk 06gmon.spk 09gter.spk 12kstan.spk
    01stats.spk 04srun.spk 07gdog.spk 10hter.spk 13exit.spk
    02rtime.spk 05trun.spk 08kstet.spk 11lter.spk
现在我们有了SPIKE脚本文件，接下来准备一个wrapper程序来运行它们。 像下面这样的东西就足够了。
    #!/usr/bin/perl
    # Simple wrapper to run multiple .spk files using generic_send_tcp
    $spikese = '/pentest/fuzzers/spike/generic_send_tcp';
    if ($ARGV[4] eq '') {
    die("Usage: $0 IP_ADDRESS PORT SKIPFILE SKIPVAR SKIPSTR\n\n");
    }
    $skipfiles = $ARGV[2];
    @files = ;
    foreach $file (@files) {
    if (! $skipfiles) {
    if (system("$spikese $ARGV[0] $ARGV[1] $file $ARGV[3] $ARGV[4]") ) {
    print "Stopped processing file $file\n";
    exit(0);
    }
    } else {
    $skipfiles--;
    }
    }
此wrapper程序将在当前工作目录中找到所有文件名以.spk结尾的文件，并将使用该文件作为输入脚本文件运行generic_send_tcp，并在命令行中提供IP地址，端口和SKIPVAR以及SKIPSTR的值变量。
此外，它还允许您为变量SKIPFILE提供一个值，该变量SKIPFILE对于此wrapper脚本是唯一的，它允许您跳过当前目录中的一定数量的.spk文件。
由于wrapper程序每次都会以相同的顺序读取.spk文件（假设它们的文件名保持不变），如果需要重新启动会话，这将允许您跳过已经fuzz测试过的命令/脚本文件。
如果您没有将BackTrack用于Linuxfuzz测试系统，则需要将包装程序中generic_send_tcp命令的路径更改为所在的相应文件路径。
您还需要确保遵循“要求和系统设置”部分中说明的有关修改SPIKE内容，以便程序可以在无法发送到套接字时以非零返回值终止。
如果没有这样做，generic_send_tcp将在会话关闭后继续尝试向该会话发送数据，直到它完成执行，由于此wrapper程序依赖于它在无法再发送时停止，因此请确保有进行上述操作。
将上面的内容写入Linux fuzzing系统上的fuzzer.pl并将该文件标记为可执行文件（chmod + x）。
在Wireshark（Capture menu->
Restart）中重新启动数据包捕获，使用“Delete”按钮清除Wireshark中的任何过滤器，并确保Vulnserver在我们的目标系统上的调试器中运行。
现在我们准备做更多的fuzz测试了。 如下运行fuzzer.pl：
    root@bt4r1vm:~/fuzzing# ./fuzzer.pl 192.168.56.101 9999 0 0 0
开始运行，将大量数据喷射到终端。 如果你让它运行的时间足够长，你最终将看到程序终止，结束输出如下所示。
通过最后一行得知，在处理SPIKE脚本文件05trun.spk时，wrapper 脚本已经停止。 如果仔细查看崩溃后输出的最后一行，还应注意到缺少的内容 -欢迎消息尚未打印到终端。
    Fuzzing Variable 0:200
    TRUN 05trun.spk : Variablesize= 10000
    Fuzzing Variable 0:201
    TRUN 05trun.spk : Variablesize= 5000
    Fuzzing Variable 0:202
    Couldn't tcp connect to target
    Stopped processing file 05trun.spk
在终端中向上滚动，直到看到最后一次打印出来的欢迎消息。 您应该看到它出现在终端看起来如下所示的位置。
    [...SNIP...]
    Total Number of Strings is 681
    Fuzzing
    Fuzzing Variable 0:0
    TRUN 05trun.spk : line read=Welcome to Vulnerable Server! Enter HELP for help.