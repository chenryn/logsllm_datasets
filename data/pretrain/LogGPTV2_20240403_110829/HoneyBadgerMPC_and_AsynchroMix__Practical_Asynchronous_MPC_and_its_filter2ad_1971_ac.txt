Purely asynchronous MPC protocols [28, 30, 31] further guar-
antee liveness as well as safety without assuming bounded syn-
chrony and broadcast channels. In this setting, even a replicated
state machine task ‚Äî without any secrecy properties at all ‚Äî re-
quires t  donej
Pass bi as input to an instance of CommonSubset
Wait to receive b from CommonSubset, where b is an n√ó|ùíû|
matrix, each row of b corresponds to the input from one
server, and at least n ‚àí t of the rows are non-default. Let
b¬∑, j denote the column corresponding to client Cj.
For each Cj,
(cid:40)
mj ‚àí(cid:74)rj(cid:75)  b¬∑, j ‚â• t + 1
otherwise
0
(cid:74)mj(cid:75) :=
Online Phase
Run the MPC Program switching-network on {(cid:74)mj,kj(cid:75)},
// Switch Network Option
resulting in œÄ(m1, ..., mk)
Requires k rounds,
Run the MPC Program power-mix on {(cid:74)mj,kj(cid:75)}, resulting
// Powermix Option
in œÄ(m1, ..., mk)
Set donej := donej + 1 for each client Cj whose input was
mixed this epoch
Figure 5: Protocol for asynchronous mixing of values.
The Switching-Network induces a random permutation, which is
sampled from a nearly uniform distribution.
For availability, we need to show that a) each honest client‚Äôs
input is eventually included in a mixing epoch, and that b) each
mixing epoch completes robustly. For a), notice that once a broad-
cast mj from client Cj is received by every honest server, then the
Session 4C: Secure Computing IIICCS ‚Äô19, November 11‚Äì15, 2019, London, United Kingdom893corresponding bits bi, j in the next epoch will be set for every hon-
est server. Therefore mj is guaranteed to be included in the next
mixing epoch. For b), notice that if at least t + 1 of the bits b¬∑, j are
set for Cj, then we know at least one honest server has received
the client‚Äôs broadcast, and hence by the agreement property of
ReliableBroadcast we can rely on this input to be available to every
honest server.
‚ñ°
4.6 Comparing AsynchroMix with Other
Strong Anonymity Solutions
We observe that most anonymous communication systems do not
focus on robustness and thus cannot achieve strong availability
guarantees in the presence of faults. For example, in protocols
following mix-nets strategies such as [59, 60, 62, 69, 77], nodes
encrypt/decrypt layers of encryptions of user/cover traffic or re-
encrypt batches of messages, and many failures has to result in
users resending their messages. Similarly, in protocols following
DC-net strategies such as [33, 70], nodes collaborate to randomly
permute a set of messages while decrypting those, and any partic-
ipating node may abort the execution and force re-execution. In
order for these protocols to handle failures, it is necessary to rely on
synchronous network assumptions to timeout a node, potentially
restarting a computation or requiring users to resend messages.
This introduces many potential issues. The first is that compromised
nodes may attempt to degrade performance, such as by stalling
until the last moment before being timed out. Attempting to opti-
mize the protocol for speed by reducing the timeouts would only
make it more likely that honest participants who experience a fault
would be removed, thus degrading security. More importantly, by
DoSing some honest nodes during re-running, it is also possible to
launch inference attacks leading to deanonymization [18, 70, 79].
On the other hand, most of these schemes can indeed maintain
anonymity/privacy against much larger collusion among the nodes,
while liveness requirements of AsynchroMix in the asynchronous
setting mandate us to restrict the adversarial collusions to t < n/3
nodes.
Our approach to MPC mixing is closely related to MCMix [3],
which implements an anonymous messaging system based on MPC.
Instead of a switching network, they associate each message with
a random tag and obliviously sort the tags using MPC comparison
operations.
5 MPC PROGRAMS FOR MESSAGE MIXING
Once the inputs are selected,(cid:74)m1(cid:75), . . . ,(cid:74)mk(cid:75), each asynchronous
mixing epoch consists of an online MPC phase, computing either
the Iterated Switching Network or PowerMix MPC programs.
The first approach is based on an iterated butterfly switching
network [34] which yields an almost-ideal random permutation
of inputs. Each switch uses a secret-shared random bit from the
offline phase and a single MPC multiplication. Overall this method
requires O(log2
k) asynchronous rounds. The communication and
computation cost per server are both O(n log2
As an alternative to the switching network, we present a constant-
round protocol called PowerMix, based on Newton‚Äôs sums. To mix
a batch of k messages(cid:74)m1(cid:75) through(cid:74)mk(cid:75), the servers first com-
pute the powers(cid:74)m
i(cid:75) where i, j range from 1 to k. We then locally
k) per input.
j
bility
‚Ä¢ Procedure:
MPC Program switch
‚Ä¢ Input :(cid:74)i1(cid:75),(cid:74)i2(cid:75)
‚Ä¢ Output:(cid:74)o1(cid:75),(cid:74)o2(cid:75) which are i1 and i2 swapped with 1/2 proba-
‚Ä¢ Preprocessing: random bit(cid:74)b(cid:75), b ‚àà {‚àí1, 1}
(cid:74)c(cid:75) :=(cid:74)b(cid:75) ¬∑ ((cid:74)i1(cid:75) ‚àí(cid:74)i2(cid:75))
(cid:74)o1(cid:75) := 2‚àí1((cid:74)i1(cid:75) +(cid:74)i2(cid:75) ‚àí(cid:74)c(cid:75))
(cid:74)o2(cid:75) := 2‚àí1((cid:74)i1(cid:75) +(cid:74)i2(cid:75) +(cid:74)c(cid:75))
‚Ä¢ Input :(cid:74)m1(cid:75), . . . ,(cid:74)mk(cid:75)
‚Ä¢ Output:œÄ(m1, . . . , mk) where œÄ ‚Üê ùíü
‚Ä¢ Procedure:
‚Äì for each of log2
k iterations, evaluate a switch layer, that uses
k calls to switch to randomly permute all k/2 pairs of inputs,
where the arrangement of pairs is laid out as log k iterations
of a butterfly permutation
MPC Program switching-network
‚Äì finally,
reconstruct
Open(œÄ((cid:74)m1(cid:75), . . . ,(cid:74)mk(cid:75)))
the output of
the final
layer,
Figure 6: Permutation based on a switching network
compute the sums of each power,(cid:74)Si(cid:75) =k
j=1(cid:74)mi
Newton sum methods. Ordinarily, computing(cid:74)m