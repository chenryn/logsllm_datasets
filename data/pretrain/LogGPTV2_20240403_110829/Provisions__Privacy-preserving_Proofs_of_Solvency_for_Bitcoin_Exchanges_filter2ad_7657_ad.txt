preserving proof of solvency is a probabilistic polynomial-time in-
teractive protocol ProveSolvency, with inputs/outputs as above,
such that the following properties hold:
1. Correctness. If A and L are a valid pair and LrIDs “ (cid:96),
then P rroutU “ ACCEPTs “ 1.
2. Soundness. If A and L are instead not a valid pair, or if
LrIDs ‰ (cid:96), then P rroutU “ REJECTs ě 1 ´ νpkq.
3. Ownership. For all valid pairs A and L, if P rroutU “
ACCEPTs “ 1, then the exchange must have ‘known’ the
private keys associated with the public keys in A; i.e., there
exists an extractor that, given A, L, and rewindable black-
box access to E, can produce x for all y P A.
4. Privacy. A potentially dishonest user interacting with an
honest exchange cannot learn anything about a valid pair A
and L beyond its validity and LrIDs (and possibly |A| and
|L|); i.e., even a cheating user cannot distinguish between
an interaction using the real pair A and L and any other
(equally sized) valid pair ˆA and ˆL such that ˆLrIDs “ LrIDs.
We prove the following theorem in the full paper [11]:
Theorem 3. Provisions, as speciﬁed in Protocol 3, is a privacy-
preserving proof of solvency.
9. SECURITY DISCUSSION
9.1 Anonymity sets
Although Theorem 3 is true, in the case that the protocol ex-
tension of Section 7 is used, the number of Bitcoin addresses ν
controlled by the exchange is revealed as well as the size of the
anonymity set n “ |PK| (which includes the ν addresses). For ef-
ﬁciency reasons, exchanges may opt to use smaller anonymity sets
than the set of all public keys on the blockchain; in particular, if the
number of keys grows unexpectedly in the future. In such a case,
the exchange must be aware that this might leak some meaningful
information about what E’s total assets are.
Speciﬁcally, the adversary can determine that E’s assets consist
subsets of the anonymity set PK. We remark
of one of the
`
˘
n
ν
727`
˘
n
ν
that E can easily control n and can also control ν (by splitting ac-
counts up or by padding ν with zero balance accounts). For prac-
grows quickly—e.g., ν “ 25 and µ “ 250
tical instances,
already yields « 2114 candidates. That said, we have no idea what
types of external information might be useful for eliminating un-
likely or impossible totals from this set (e.g., the adversary’s cor-
ruption of customers may provides them with a lower bound on
the total assets), or for whittling n down by eliminating addresses
known or suspected not to be controlled by the exchange. Research
on deanonymizing Bitcoin addresses, e.g., through clustering and
reidentiﬁcation [20], has demonstrated that Bitcoin’s anonymity is
limited (see [4] for a survey).
If an exchange conducts proofs of solvency on a regular basis (or
more than once), each anonymity set should be based closely on the
anonymity set used previously—choosing independent anonymity
sets could reveal the exchange’s addresses by intersecting the sets.
Exchanges can remove addresses from their anonymity set if the
criteria for doing so is independent of whether the exchange owns
the address or not. For example, it might remove addresses once
the balance is under a certain threshold. However, generally,
anonymity sets should grow over time with new addresses (some
owned by the exchange and some as cover) being added to the set.
We leave the process of developing and analyzing a heuristic for
forming an anonymity set (in terms of size of n and ν and the dis-
tribution of amounts across the ν accounts) as future work. For the
current state of Bitcoin at the time of writing, we show in Section 10
that it is reasonable for all exchanges to choose an anonymity set
equal to most available accounts, sieving out tiny “dust” accounts.
9.2 User Veriﬁcation
U
A
Although Theorem 3 is true, it may fall short of an ideal level of
user veriﬁcation. Speciﬁcally, a proof of solvency enables user ver-
iﬁcation, but it does not guarantee that users actually perform the
veriﬁcation. Consider a malicious E that does not correctly include
some set of users accounts—by either omitting them or zeroing
their balances. Assume the exchange has U users, F (for fraudu-
lent) entries, and that a random subset A Ă U of users choose to
audit the correctness of LiabList. In this case, the probability that
an adversary will go undetected is
, which is closely
bounded from above by minrp1 ´ A{UqF ,p1 ´ F{UqAs (cf. the
probability of a malicious election authority being caught modi-
fying ballot receipts in a cryptographic voting system [8]). This
probability decreases close-to-exponentially in F and A. Due to
the approximation, we conservatively conclude the probability of
being caught is high, instead of overwhelming.
`
{
U´F
A
`
˘
˘
Next, one might question the assumption that each customer is
equally likely to verify LiabList. However, it is reasonable that the
distribution skews in the direction of customers with high balances
(and thus more at stake) being more likely to check. This is ac-
tually beneﬁcial, because the probability of catching a malicious
exchange does not depend on the amount of bitcoin zeroed out. In
other words, zeroing out the largest account is equivalent to zero-
ing out the smallest in terms of being caught, yet the former action
better beneﬁts the adversary’s goal of lowering its liabilities.
We also note that Provisions as described does not provide dis-
pute resolution.
If a user ﬁnds their account missing or balance
incorrect, they do not have sufﬁcient cryptographic evidence that
this is the case [17]. The issue appears unsolvable cryptographi-
cally. Recall that the primary motivation for users keeping funds
with an exchange is to avoid needing to remember long-term cryp-
tographic secrets, therefore exchanges must be able to execute user
orders and change their balance without cryptographic authentica-
tion from the user (e.g., password authentication). Resolving this
will likely require legal regulation. Users who dislike an exchange
may also falsely claim that veriﬁcation of their accounts failed, and
it is not possible to judge if the user or the exchange is correct in
this case based on a Provisions transcript alone.
Lastly, we note that if a user does verify their account, they
should use a veriﬁcation tool other than one provided by the ex-
change itself; such a tool could be automated to increase partici-
pation. All of the issues discussed in this remark deserve followup
work to ensure that Provisions is implemented in practice in such a
way that users are likely to perform auditing and to do so correctly.
IMPLEMENTATION
10.
10.1 Asymptotic performance
Provisions scales linearly in proof size, construction and veri-
ﬁcation time with respect to its inputs: the proof of assets scales
with the size of the anonymity set and the proof of liabilities scales
with the number of customer accounts. The ﬁnal proof of solvency
given an encryption of the total assets and an encryption of the total
liabilities is constant and in practice is negligible. All of the linear
parts of the protocol can be run in parallel and require only asso-
ciative aggregations to compute homomorphic sums, meaning the
protocol is straightforward to parallelize.
Speciﬁcally the proof of assets is linear in n, the number of pub-
lic keys in the anonymity set, regardless of the size of S, the total
number of accounts actually owned by E, requiring 13n integers
from Zq in total. The proof of liabilities is linear with respect to
the number of customers c. It is dominated by m ` 1 elements
from Zq used to commit to each bit of each customer’s balance,
where m “ rlg2 MaxBTCs “ 51. If needed, an exchange could
slightly reduce proof sizes by capping the size of assets below or
reducing precision. For example, with m “ 32 the exchange could
still include accounts worth up to US$1 billion with precision to
the nearest penny. However, we’ll assume full precision is desired
in our implementation.
Full veriﬁcation of the protocol requires approximately equal
time to the construction of the proof. For customers opting to only
validate their own balance’s correct inclusion in the proof and trust
a third party to run the full veriﬁcation, veriﬁcation is much sim-
pler, the customer to check their CID value with a single hash and
check that yi is a correct commitment their balance which requires
only m ` 2 group operations.
10.2 Incremental updates
As described in Section 1 the protocol is intended to be run often
(e.g. daily) to give continued proof of solvency. A natural question
is whether it is possible to update the proof incrementally. We will
consider updates to the anonymity set, to the assets proof and to the
liabilities proof separately.
The full set of addresses (anonymity set + owned addresses) used
in the proof is public. As such any newly created addresses by
the exchange need to be published. To hide these new addresses
it is important to additionally add addresses to the anonymity set.
As with the anonymity set in general and discussed in Section 9.1
it is important to choose in such a way that the actual addresses
are indistinguishable from it. A proper implementation would for
example add addresses deterministically (e.g. all addresses with
balances over X bitcoin).
The asset proof is almost perfectly separable, in that there is a
separate and independent component for each address in the full
set of addresses. The components for new addresses and addresses
with changed balance need to be updated. However, it is not nec-
essary to update the components of all other addresses. This is
728especially useful for cold addresses, which do not have a private
key easily accessible. The set of addresses which are new or have
changed balances is public on the blockchain anyways and thus no
additional information is leaked.
The liabilities proof mainly consists of a commitment to each
customer’s balance and a proof that said balance is within a range.
For all new users and users whose balance changed the commit-
ment the proof needs to be redone. For the other users it is not
technically necessary to redo the proof. However, not changing the
proofs for customers whose balance remained unchanged will leak
how many users were actively using their account between the two
proofs. If the complete proof were redone then this information
would remain private. If an exchange were to accept this privacy
leak it could drastically reduce the size of the proof updates.
10.3 Practical parameter sizes
An exchange could achieve optimum anonymity by choosing the
anonymity set PK to be the entire set of unclaimed transaction out-
puts (called the UTXO set) which represents all potentially active
Bitcoin accounts. The size of the UTXO set has steadily increased
throughout Bitcoin’s history [4] and at the time of this writing con-
tains approximately 17M addresses. However, the vast majority
of these are “dust” addresses holding only a tiny value. There are
fewer than 500,000 addresses with a balance of more than 0.1 BTC,
which collectively control 99.8% of all bitcoin.11 Some of these
addresses are unusable for the protocol because they do not have
public keys available (i.e., they are pay-to-pub-key-hash addresses
with only a hash of the public key visible in the block chain), others
have questionable anonymity value as they have never been moved
since being mined and exchanges are not expected to be mining
their own bitcoin directly. Thus, we expect that fewer than a million
addresses are available to be used in the anonymity set in practice
We tested our implementation with anonymity sets up to 500,000.
On the proof of liabilities side, Coinbase is thought to be one
the largest exchanges and currently claims roughly 2 million cus-
tomers.12 We take as our goal supporting this number of users.
10.4 Implementation & performance tests
To test the performance of our protocol in practice we created a
prototype implementation of our protocol in Java 1.8. All crypto-
graphic operations are performed using BouncyCastle,13 a standard
cryptographic library for Java which is also used by the popular bit-
coinj implementation of Bitcoin in Java. We performed tests on a
commodity server with 2 E5-2680 v2 Xenon processors and 128GB
RAM. The max heap size of the JVM was set to the default 256MB.
Our implementation assumes a previously downloaded and veriﬁed
blockchain, to enable efﬁcient balance lookups and selection of an
appropriate anonymity set.
Our simulations conﬁrm that Provisions should be practical
even for large exchanges desiring strong anonymity and full pre-
cision to represent customer accounts. Figure 2 shows proof sizes
and computation times for Protocol 1, the proof of assets, varying
the anonymity set size n from 10 to 500,000. Figure 3 shows proof
sizes and computation times for Protocol 2, the proof of liabilities,
varying the number of customers c from 1,000 to 2,000,000. We
tested with m “ 51, supporting full precision of account balances.
Reducing m would lead to proportional reductions in proof sizes
and construction times. Note that, given realistic parameters today,
11https://bitinfocharts.com/
top-100-richest-bitcoin-addresses.html
12https://www.coinbase.com/about
13https://www.bouncycastle.org/
Figure 2: Performance for Protocol 1 (proof of assets).
Figure 3: Performance for Protocol 2 (proof of liabilities).
it appears that the proof of liabilities is the more expensive protocol
today for a large exchange.
We report numbers without the protocol extension from Sec-
tion 7 to ensure assets are not shared between colluding exchanges
executing the protocol contemporaneously. This extensions would
increase the size and construction time of the proof of assets by
13 « 30%. Because the proof of liabilities is likely much
about 4
larger, this extension makes only a minor impact on performance.
We omit performance ﬁgures for Protocol 3 as this protocol is
constant size and negligible compared to Protocols 1 and 2. Sim-
ilarly, veriﬁcation time for individual clients depends only m and
not the anonymity set or number of other customers. In our imple-
mentation it took fewer than 10 ms.
11. CONCLUDING REMARKS
Stu Feldman has outlined a roadmap for technical maturity (as
quoted in [14]):
1. You have a good idea;
2. You can make your idea work;
3. You can convince a (gullible) friend to try it;
4. People stop asking why you are doing it; and
5. Other people are asked why they are not doing it.
Given the shaky track record of Bitcoin exchanges, the onus
upon an exchange to perform some kind of audit is nearing level 5.
010020030040050060070080090010000 min10 min20 min30 min40 min50 min60 min0k100k200k300k400k500kSize in MBTime in MinutesAnonymity Set Size(in Thousands) Construction TimeVerification TimeProof Size024681012141618200 min30 min60 min90 min120 min150 min180 min210 min240 min270 min300 min0k250k500k750k1000k1250k1500k1750k2000kSize in GBTime in MinutesNumber of Customers (in Thousands), m=51Construction TimeVerification TimeProof Size729However, cryptographic solvency proofs, like the Maxwell proto-
col, are lagging behind around level 3. Our belief is that the privacy
implications of Maxwell are hindering it—there are good reasons
for an exchange not to reveal which addresses it controls, the scale
of its total holdings, or potentially leak information about large cus-
tomers’ account sizes. Provisions removes these barriers. While
cryptographic proofs of solvency still have inherent limits, namely
that control of an address’ key at present does not guarantee the fu-
ture ability to use that key to refund customers, we believe that with
Provisions there are no longer good reasons for an exchange not to
provide regular proofs of solvency to increase customer conﬁdence.
Acknowledgments
We thank the reviewers for their insights. We especially thank our
shepherd Sarah Meiklejohn for her constructive feedback and con-
tributions which improved the paper. J. Bonneau is supported by
a Secure Usability Fellowship from the Open Technology Fund
and Simply Secure as well and is also supported by DARPA. J.
Clark acknowledges funding from NSERC, FQRNT and Concordia
OVPRGS. D. Boneh acknowledges funding from NSF, DARPA,
and a grant from ONR. Opinions, ﬁndings and conclusions or rec-
ommendations expressed in this material are those of the authors
and do not necessarily reﬂect the views of DARPA.
References
[1] O. Baudron, P.-A. Fouque, D. Pointcheval, G. Poupard, and
J. Stern. Practical multi-candidate election system. In ACM
PODC, 2001.
[2] M. Belenkiy. E-Cash. In Handbook of Financial
Cryptography and Security. CRC, 2011.
[3] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and
M. Virza. Snarks for C: verifying program executions
succinctly and in zero knowledge. In CRYPTO, 2013.
[4] J. Bonneau, A. Miller, J. Clark, A. Narayanan, J. A. Kroll,
and E. W. Felten. Research Perspectives and Challenges for
Bitcoin and Cryptocurrencies. IEEE Symposium on Security
and Privacy, 2015.
[5] J. Camenisch, S. Hohenberger, and A. Lysyanskaya.
Compact e-cash. In EUROCRYPT, 2005.
[6] Certicom Research. SEC 2: Recommended Elliptic Curve
Domain Parameters, Version 1.0., 2000.
[7] D. Chaum. Blind signatures for untraceable payments. In
CRYPTO, 1982.
[8] D. Chaum, R. Carback, J. Clark, A. Essex, S. Popoveniuc,
R. L. Rivest, P. Y. A. Ryan, E. Shen, and A. T. Sherman.
Scantegrity II: end-to-end veriﬁability for optical scan
election systems using invisible ink conﬁrmation codes. In