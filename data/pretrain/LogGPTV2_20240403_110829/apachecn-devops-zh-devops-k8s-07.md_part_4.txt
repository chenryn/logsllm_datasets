starting server at 1503839211.025133
$ docker kill --signal TERM my-app
my-app
$ docker ps --filter name=my-app --format '{{.Names}}'
my-app
```
我们的容器还在。让我们看看容器内发生了什么:
```
$ docker exec my-app ps
PID   USER     TIME    COMMAND
1     root      0:00  /bin/sh -c python -u app.py
5     root      0:00  python -u app.py
6     root      0:00  ps  
```
`PID 1`进程就是外壳本身，它显然不会把我们的信号转发给子进程。在这个例子中，我们使用 Alpine 作为基础映像，它使用`ash`作为默认外壳。如果我们用`/bin/sh`执行任何事情，它实际上与`ash`相关联。同样，Debian 家族的默认外壳是`dash`，它也不转发信号。还有一个转发信号的外壳，比如`bash`。为了利用`bash`，我们可以安装一个额外的外壳，或者将基本映像切换到使用`bash`的发行版。但是两者都相当麻烦。
相反，仍然有不使用`bash`来解决信号问题的选项。一个是用 shell 形式的`exec`运行我们的程序:
```
CMD exec python -u app.py
```
我们的流程将取代外壳流程，从而成为`PID 1`流程。另一个选择也是推荐的选择是用 EXEC 形式写`Dockerfile`:
```
CMD [ "python", "-u", "app.py" ] 
```
让我们用 EXEC 形式的例子再次尝试这个例子:
```
---Dockerfile.exec-sh---
FROM python:3-alpine
EXPOSE 5000
ADD app.py .
CMD [ "python", "-u", "app.py" ]
---
$ docker run -d --rm --name my-app my-app:exec-sh
5114cabae9fcec530a2f68703d5bc910d988cb28acfede2689ae5eebdfd46441
$ docker exec my-app ps
PID   USER     TIME   COMMAND
1     root       0:00  python -u app.py
5     root       0:00  ps
$ docker kill --signal TERM my-app && docker logs -f my-app
my-app
starting server at 1503842040.339449
stopping server at 1503842134.455339 
```
执行表单的工作方式很有魅力。正如我们所看到的，容器中的进程是我们所预期的，我们的处理程序现在正确接收`SIGTERM`。
# SIGTERM 不调用终止处理程序
在某些情况下，进程的终止处理程序不是由`SIGTERM`触发的。例如，向 nginx 发送`SIGTERM`实际上会导致快速关机。为了优雅地关闭 nginx 控制器，我们必须用`nginx -s quit`代替`SIGQUIT`发送。
The full list of supported actions on the signal of nginx is listed here: [http://nginx.org/en/docs/control.html](http://nginx.org/en/docs/control.html).
现在又出现了另一个问题——在删除一个 pod 时，我们如何向容器发送除`SIGTERM`以外的信号？我们可以修改程序的行为来捕获 SIGTERM，但是对于像 nginx 这样的流行工具，我们无能为力。对于这种情况，生命周期挂钩能够解决问题。
# 容器生命周期挂钩
生命周期挂钩是针对容器执行的事件感知操作。它们像一个单独的 Kubernetes 探测动作一样工作，但是在容器的生命周期中，每个事件至少会触发一次。目前，支持两个事件:
*   `PostStart`:创建容器后立即执行。因为这个钩子和容器的入口点是异步触发的，所以不能保证钩子会在容器启动之前执行。因此，我们不太可能使用它来初始化容器的资源。
*   `PreStop`:在将`SIGTERM`发送到容器之前立即执行。与`PostStart`钩子的一个区别是`PreStop`钩子是同步调用，换句话说，`SIGTERM`只是在`PreStop`钩子退出后发送。
因此，我们的 nginx 停机问题可以通过`PreStop`挂钩轻松解决:
```
...
 containers:
 - name: main
 image: nginx
 lifecycle:
 preStop:
 exec:
 command: [ "nginx", "-s", "quit" ]
... 
```
此外，钩子的一个重要特性是它们可以在某些方面影响 Pod 的状态:Pod 不会运行，除非它的`PostStart`钩子成功退出；删除时 pod 被设置为立即终止，但是`SIGTERM`不会被发送，除非`PreStop`钩子成功退出。因此，对于我们前面提到的情况，容器在其 iptables 规则被移除之前退出，我们可以通过`PreStop`钩子解决它。下图说明了如何使用钩子消除不需要的间隙:
![](img/00115.jpeg)
实现只是添加了一个休眠几秒钟的钩子:
```
...
 containers:
 - name: main
 image: my-app
 lifecycle:
 preStop:
 exec:
 command: [ "/bin/sh", "-c", "sleep 5" ]
...
```
# 放置 PODS
大多数情况下，我们并不关心我们的 pods 在哪个节点上运行，因为调度 pods 是 Kubernetes 的一个基本特性。然而，在调度 pod 时，Kubernetes 并不知道节点的地理位置、可用性区域或机器类型等因素。此外，有时我们希望在一个独立的实例组中部署运行测试构建的 pods。因此，为了完成调度，Kubernetes 提供了不同级别的相似性，允许我们主动地将 Pod 分配给特定的节点。
pod 的节点选择器是手动放置 pod 的最简单方法。它类似于服务的 pod 选择器。pod 只能放在标签匹配的节点上。该字段设置为`.spec.nodeSelector`。例如，以下 pod 的片段`spec`将 pod 调度到带有标签`purpose=sandbox,disk=ssd`的节点。
```
...
 spec:
 containers:
 - name: main
 image: my-app
 nodeSelector:
 purpose: sandbox
 disk: ssd
...
```
检查节点上的标签与我们检查 Kubernetes 中其他资源的方式相同:
```
$ kubectl describe node gke-my-cluster-ins-49e8f52a-lz4l
Name:       gke-my-cluster-ins-49e8f52a-lz4l
Role:
Labels:   beta.kubernetes.io/arch=amd64
 beta.kubernetes.io/fluentd-ds-ready=true
 beta.kubernetes.io/instance-type=g1-small
 beta.kubernetes.io/os=linux
 cloud.google.com/gke-nodepool=ins
 failure-domain.beta.kubernetes.io/region=us-  
          central1
 failure-domain.beta.kubernetes.io/zone=us-
          central1-b
 kubernetes.io/hostname=gke-my-cluster-ins- 
          49e8f52a-lz4l
... 
```
如我们所见，我们的节点上已经有标签了。这些标签是默认设置的，默认标签如下:
*   `kubernetes.io/hostname`
*   `failure-domain.beta.kubernetes.io/zone`
*   `failure-domain.beta.kubernetes.io/region`
*   `beta.kubernetes.io/instance-type`
*   `beta.kubernetes.io/os`
*   `beta.kubernetes.io/arch`
如果我们想要标记一个节点来安排我们的示例 pods，我们可以更新该节点的清单或者使用快捷命令`kubectl label`:
```
$ kubectl label node gke-my-cluster-ins-49e8f52a-lz4l \
 purpose=sandbox disk=ssd
node "gke-my-cluster-ins-49e8f52a-lz4l" labeled
$ kubectl get node --selector purpose=sandbox,disk=ssd
NAME                               STATUS    AGE       VERSION
gke-my-cluster-ins-49e8f52a-lz4l   Ready     5d        v1.7.3
```
除了将 PODS 放在一个节点上，一个节点也可以拒绝 PODS，也就是*污染和容忍*，我们将在下一章学习。
# 摘要
在本章中，我们不仅讨论了构建连续交付管道的主题，还讨论了加强每个部署任务的技术。pods 的滚动更新是一个强大的工具，它以受控的方式执行更新。要触发滚动更新，我们需要做的是更新 pod 的规范。虽然更新是由 Kubernetes 管理的，但是我们还是可以用`kubectl rollout`来控制。
后来，我们通过`GitHub/DockerHub/Travis-CI`制造了一个可扩展的连续输送管道。接下来，我们移动我们的步骤，以了解更多关于 pod 的生命周期，以防止任何可能的故障，包括使用就绪和活性探针来保护 pod，用 Init 容器初始化 pod，通过在 exec 表单中写入`Dockerfile`来正确处理`SIGTERM`，利用生命周期挂钩来停止 pod 的就绪及其终止，以便在正确的时间移除 iptables 规则，以及使用节点选择器将 pod 分配给特定节点。
在下一章中，我们将学习如何用逻辑边界分割我们的集群，以便在 Kubernetes 中更稳定和安全地共享资源。