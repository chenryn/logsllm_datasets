query workload. Each query computes the shortest path be-
tween a given source and destination node when 65% of the
queries use the latency metric, while 5%, 10% and 20% of
the queries use three other link metrics (with randomly gen-
erated values). As expected the communication overhead of
the Pair-Share-Mix scenario lies between the Pair-NoShare
)
B
K
(
e
d
o
N
r
e
P
d
a
e
h
r
e
v
O
 350
 300
 250
 200
 150
 100
 50
 0
All Pairs
Pair-NoShare
Pair-Share
 0
 50
 100  150  200  250  300
Number of Source/Destination Queries
)
B
K
(
e
d
o
N
r
e
P
d
a
e
h
r
e
v
O
 700
 600
 500
 400
 300
 200
 100
 0
All Pairs
Pair-Share
Pair-Share (20% Dst)
Pair-Share (1% Dst)
 0
 5  10  15  20  25  30  35  40
Number of Source/Destination Queries (x1000)
)
B
K
(
e
d
o
N
r
e
P
d
a
e
h
r
e
v
O
 350
 300
 250
 200
 150
 100
 50
 0
Pair-NoShare
Pair-Share-Mix
Pair-Share-Mix2
Pair-Share
 0
 50
 100  150  200  250  300
Number of Source/Destination Queries
Figure 7: Average per-node commu-
nication costs for di(cid:11)erent query exe-
cution strategies ((cid:12)rst 300 queries)
Figure 8: Average per-node commu-
nication costs for di(cid:11)erent query exe-
cution strategies (39; 800 queries)
Figure 9: Average per-node commu-
nication costs for di(cid:11)erent query ex-
ecution strategies (mixed query work-
load)
and Pair-Share scenarios. This is because only queries that
compute the same metric are likely to bene(cid:12)t from sharing.
Pair-Share-Mix2 shows the same mixed query workload as
Pair-Share-Mix, with the exception that after 150 queries,
the workload changes to one where all queries are using the
latency metric. Once the workload changes, there are more
work-sharing opportunities. Consequently, the communica-
tion overhead of each additional query for Pair-Share-Mix2 is
reduced compared to Pair-Share-Mix.
9.2 PlanetLab Experiments
To study the performance of our system in more realistic
scenarios, we deploy our prototype on 72 PlanetLab nodes
across three continents. The number of sites chosen for each
experiment range from 30 to 35. These nodes form an overlay
network, where each node hosts a PIER process.
In our experiments, we use the same metrics as before: the
convergence latency, and per-node communication overhead.
In all experiments, we use a single query load: the Best-Path
query which is executed on all nodes and computes the short-
est round-trip-times (RTT) paths for all pairs. We choose the
RTT metric, instead of a more stable metric such as the hop-
count, in order to stress our system under dynamic scenarios.
We experiment with both one-time and continuous queries.
With continuous queries, the link RTTs are periodically up-
dated, and the query recomputes the path incrementally.
9.2.1 Preliminaries
In our experiments, we use three overlay topologies:
Sparse-Random: Each node randomly selects four other
nodes as neighbors. This topology is a good stress case for our
system. The links are usually much longer than in more re-
alistic topologies (where there are more links between nearby
nodes), which negatively a(cid:11)ects the query convergence time.
Dense-Random: Same as above with eight neighbors.
Dense-UUNET: This topology is intended to represent a
more realistic topology. Each node has an average degree of 8.
Links between nodes at the same site are selected (cid:12)rst. The
remaining links are assigned as follows. We (cid:12)rst divide the
nodes based on their location into (cid:12)ve coarse regions (North-
America west/central/east, Europe and East Asia), and then
select a mixture of intra-region and inter-region links that
approximates the UUNET topology [4].
All our experiments were conducted during two time peri-
ods. The (cid:12)rst set of experiments were conducted on the two
random topologies during 2(cid:0)5 January, 2005. The second
set of experiments were conducted on the Dense-Random and
Dense-UUNET topologies during 17(cid:0)19 January, 2005. The
load on PlanetLab during the second period was signi(cid:12)cantly
higher than during the (cid:12)rst period due to the approaching of
conference deadlines. To account for load (cid:13)uctuations, each
experiment was conducted at least three times, and our ex-
Topology
AvgLinkRTT AvgPathRTT
Sparse-Random
Dense-Random
88 ms
88 ms
185 ms
99 ms
Table 1: Average link RTTs (AvgLinkRTT) and
shortest path RTTs
random
topologies (experiments conducted on 2 (cid:0) 5 Jan.
(AvgPathRTT)
for
Topology
AvgLinkRTT AvgPathRTT
Dense-Random
Dense-UUNET
106 ms
51 ms
120 ms
89 ms
Table 2: Average link RTTs (AvgLinkRTT) and
shortest path RTTs (AvgPathRTT) for dense topolo-
gies (experiments conducted on 17 (cid:0) 19 Jan).
perimental results were averaged across the multiple runs.
Tables 1 and 2 show the average RTTs of links (AvgLinkRTT),
and the RTTs of computed paths (AvgPathRTT) when run-
ning the all-pairs shortest paths query. Since the links of
Sparse-Random and Dense-Random are randomly chosen, the
distribution of the link RTTs, and their average values are the
same. However, notice that the average link RTT increases
from 88 ms to 106 ms during the second set of experiments.
This is due to the heavier load on PlanetLab during the sec-
ond period. As expected, the link RTT values in the case
of Dense-UUNET are lower than Dense-Random, as Dense-
UUNET contains more links between nearby nodes.
We also make two observations regarding the RTTs of the
paths computed by our query. First, dense networks produce
shorter paths due to their higher degree; the AvgPathRTT
of Sparse-Random is twice as large as the AvgPathRTT of
Dense-Random. Second, the AvgPathRTT for Dense-UUNET
is lower compared to Dense-Random. This is because Dense-
UUNET has more links between nearby nodes.
Since Sparse-Random and Dense-Random have long links,
and since the RTTs of long links are more likely to (cid:13)uctuate,
these topologies will put a greater stress on our system than
the Dense-UUNET topology. As a result, we focus on the
two random topologies in our evaluation.
9.2.2 Query Execution
In this section, we evaluate the performance of a single query
that computes the all-pairs shortest RTT paths on the two
random topologies. The query uses the link RTTs as mea-
sured at the beginning of its execution.
Figure 10 shows the average path RTT (AvgPathRTT) ver-
sus time over the entire query execution period. AvgPathRTT
at a given time t represents the average over the RTT values of
all shortest paths computed by time t. A stable AvgPathRTT
indicates that all shortest paths have been generated. At
the start of query execution, AvgPathRTT increases steadily
as paths are gradually discovered. After 20(cid:0)30 sec, Avg-
PathRTT starts decreasing as shorter new discovered paths
improve upon previously computed paths. 95% of the short-
est paths are computed within 50 sec for Sparse-Random and
55 sec for Dense-Random. AvgPathRTT stabilizes after 73
sec and 82 sec, respectively.
Topology
Sparse-Random
Dense-Random
Sparse-Random (Smooth)
Dense-Random (Smooth)
% Stable Avg Change
33
22
62
42
3:8
4:4
1:2
1:6
Table 3: The computed path stability for random
topologies with and without using RTT smoothing.
)
s
m
(
T
T
R
h
a
P
g
v
A
t
 350
 300
 250
 200
 150
 100
 50
 0
Sparse-Random
Dense-Random
)
s
p
B
K
(
e
d
o
N
i
t
r
e
P
h
d
w
d
n
a
B
 0
 0.5
 1
 1.5
 2
Time (min)
 12
 10
 8
 6
 4
 2
 0
Dense-Random
Sparse-Random
 0
 0.5
 1
 1.5
 2
Time (min)
)
s
m
(
T
T
R