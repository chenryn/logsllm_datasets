event.srcElement. 
of 
body.onClick()  can  traverse  in  Frame1’s  DOM  tree  as 
long as the traversal does not reach the window proxy level. In 
other  words,  Frame1’s  document  subtree  is  merged  into 
Frame0’s  DOM  tree,  so  the  script  can  reference  to  the 
event. 
document 
srcElement.parentElement.parentElement”. 
In 
particular, the script doEvil can be executed in Frame1 by the 
assignment F1Doc.scripts(0).text = doEvil. 
5.  DESIGN/IMPLEMENTATION OF THE 
“F1Doc 
object 
using 
= 
SCRIPT ACCENTING MECHANISM 
FOR DEFENSE 
We  have  discussed  a  number  of  real  attacks  in  Section  4. 
The isolation failures are not because of any errors in the cross-
frame check discussed in Section 3, but because of two reasons: 
(1)  there  exist  unexpected  execution  scenarios  to  bypass  the 
check; (2) the current mechanism is a single-point check buried 
deep in the call stack – at the time of check, there are confusions 
about where to obtain the domain-IDs of the script and the object. 
It  is  challenging  for  developers  to  enumerate  and  test  all  these 
unexpected  scenarios  because  too  many  code  modules  are 
involved,  including  the  scripting  engine,  the  HTML  engine,  the 
navigation mechanism, the event handling mechanism, and even 
non-browser components. Each of them has a large source code 
base which has been actively developed for more than 10 years. It 
is  clearly  a  difficult  task  to  guarantee  that  the  checks  are 
performed exhaustively and correctly. 
We  propose  script  accenting  as  a  defense  technique.  The 
technique takes advantage of the fact that the browser executable 
has a clean interface between the component responsible for the 
DOM  (e.g.,  the  HTML  engine  mshtml.dll  in  IE)  and  the 
component  responsible  for  the  Javascript  execution  (e.g.,  the 
Javascript  engine  jscript.dll  in  IE).  Because  by  definition  the 
domain-isolation  attack  is  caused  by  the  script  of  one  domain 
accessing the DOM of another domain, if both components carry 
their  domain-specific  accents  in  the  communications  at  the 
interface, the communications can succeed only when the accents 
are identical. To achieve this, we assign each domain an accent 
key, which is only visible to the HTML engine and the Javascript 
engine, but not to the Javascript code. Accenting is the operation 
to  tightly  bind  the  accent  key  with  the  script.  This  section 
describes  our  design  and  implementation  of  the  accenting 
mechanism on IE. 
5.1  The Primitive Operation of Accenting 
A possible implementation of the accenting operation could 
be  to  attach  the  accent  key  with  the  script  when  the  script  is 
generated,  and  to  propagate  the  accent  key  with  the  script  in 
memory copies. This mechanism is often referred to as “tainting”. 
Usually, tainting is implemented as a system-wide infrastructure 
at the hardware architecture level or in the virtual machine. We, 
however, want to implement the accenting mechanism completely 
in  the  browser,  where  it  is  not  practical  to  track  all  memory 
operations  because  of  the  complexity  of  the  source  code. 
Furthermore, Attack 1 in Section 4.1 is an example to show that 
the  script  can  even  travel  to  a  non-browser  component,  so 
tainting-based implementation is not possible for us.  
 XOR-based randomizations are frequently used in security 
defenses.  Our  current  implementation  also  uses  XOR  as  the 
primitive  operation  for  accenting:  we  generate  a  32-bit  random 
number  (four-bytes)  as  the  accent  key  for  each  domain.  The 
primitive operation to accent a text string is to XOR every 32-bit 
word in the string with the accent key. When there are one, two or 
three bytes remaining in the tail of the string, we mask the accent 
key  to  the  same  length,  and  apply  the  XOR  operation.  This 
accenting  operation  has  two  clear  advantages:  (1)  it  guarantees 
that the accented script or any portion of the script is illegible to 
other  domains,  regardless  of  how  the  script  travels;  (2)  the 
operation does not increase the length of the script, so the existing 
browser code can correctly handle the accented script without the 
possibility  of  buffer  overflow.  This 
the 
transparency of our mechanism. 
5.2  Accent Key Generation and Assignments 
We keep a lookup table in the HTML engine (mshtml.dll) to 
map each domain name to an accent key. The keys are generated 
in  a  Just-In-Time  fashion:  immediately  after  the  document 
object is created for each frame, we look up the table to find the 
key associated with the domain of the frame (if not found, create 
a new key for the domain), and assign the key to the window 
object (i.e., the frame containing the document).  
When the scripts object is created, it copies the key from 
the window  object.  This  is  for  the  sake  of  runtime  efficiency 
when  the  script  runtime  references  the  key  later.  Otherwise,  it 
would  be  time-consuming  for  the  script  runtime  to  retrieve  the 
key  from  the  DOM  because  the  script  runtime  and  the  HTML 
engine are implemented in different DLLs.  
important  for 
is 
Virtual 
support 
example, 
operations 
redo 
when 
application 
its  domain 
feature,  we 
runs 
changes 
initially 
and 
isolation  mechanism 
The  browser  provides  support  for  a  frame  to  change  its 
domain during the page rendering and the execution of its scrip4. 
(at 
For 
http://map.live.com) 
domain 
http://map.live.com, 
to 
http://live.com in order to communicate with other http://live.com 
services.  To 
the  key 
generation/assignment 
the 
document.domain  attribute  is  changed.  Note  that  in  the 
domain 
1, 
http://map.live.com and http://live.com are two different domains 
once the domain changing operation is done, so each one has its 
own  accent  key.  In  other  words,  when  a  frame  is  from 
http://live.com 
its 
document.domain set to http://live.com, its accent key is the 
one  correspondent  to  http://live.com;  if  a  frame  is  from 
http://map.live.com  without its document.domain  being  set, 
its accent key is the one correspondent to http://map.live.com. 
5.3  Script Ownership and Object Ownership  
Section  4  shows  that  it  is  challenging  to  guarantee  the 
correctness  of  the  current  isolation  mechanism  because  the 
developers  need  to  reason  about  it  as  a  system-wide  property. 
Reasoning  about 
the  script  accenting 
mechanism  is  significantly  easier  because  we  only  need  to 
http://map.live.com  with 
the  correctness  of 
shown 
in 
Figure 
or 
from 
in 
the 
later 
this 
the 
Earth 
4 The detailed policy about domain changing is out of the scope 
of  this  paper.  An  article  about  this  subject  is  located  at 
http://msdn.microsoft.com/library/default.asp?url=/workshop/aut
hor/dhtml/reference/properties/domain.asp.  
guarantee  that  every  script  executes  and  travels  in  its  accented 
form. In particular, we conform to two simple rules. 
Rule  of  Script  Ownership:  One  of  the  difficulties  in  the 
current  window-proxy-based  check  is  that  at  the  time  when  the 
check is performed, it is hard to determine the origin of the script. 
Attack  2  and  Attack  3  exemplify 
this  difficulty.  Our 
implementation follows the rule that the script always carries its 
owner frame’s identity. The rule of script ownership states that a 
script is owned by the frame that supplies the source code of the 
script, and should be accented at the time when its source code is 
supplied.   The  rationale  is  that  the  source  code supplier  defines 
the behavior of the script, so we need to guarantee that the script 
is illegible to the frames from domains other than the source code 
supplier’s  domain.  We  will  discuss  in  Section  6.1  that  this 
principle  eliminates  the  attacker’s  possibility  of  using  wrong 
domain-IDs to fool the check. 
Rule  of  Object  Ownership:  The  rule  of  object  ownership 
states that every object is owned by the frame that hosts the DOM 
tree of the object, and is always known by its accented name. The 
rationale  of  this  principle  is  that  an  object  can  be  referenced  in 
many ways due to aliasing, so it is error-prone to determine the 
object’s  origin  based  on  its  syntactical  reference.  Instead,  an 
object’s origin should be only determined by the window object 
(i.e., the frame) of its DOM tree, because this ownership relation 
is established at the DOM creation time. 
5.4  Accenting the Script Source Code to 
window 
Defeat Script Merging Attacks 
Many cross-frame attacks are because of script merging, as 
we showed in Section 4. In the browser, a text string can be sent 
to another frame and compiled as a script by (1) calling certain 
methods 
including 
execScript(ScrSrc),  setTimeout(ScrSrc,…)  and 
setInterval(ScrSrc,…), where ScrSrc is the text string 
of  the  script  source  code,  or  (2)  navigating  the  frame  to  a 
Javascript-URL.  The 
is 
“javascript:ScrSrc”, where ScrSrc is the script source 
code in the plain text format. There are many ways to navigate to 
a  javascript-URL,  such  as  the  method  calls  “open(…)”, 
“location=…”,  “location.assign(…)”,  “location. 
replace(…)”,  and  HTML  hyperlinks  “”, 
“”, etc. Note that the Javascript function eval is 
to evaluate a text string in the current frame, so it is not a cross-
frame operation.  
the  Javascript  URL 
format  of 
object, 
the 
of 
l
l
d
.
t
p
i
r
c
s
j
l
l
d
.
l
t
m
h
s
m
Sender frame
setInterval(…)
location.replace(…)
location.assign(…)
setTimout(…)
execScript(…)
open(…)
location = …
Accenting, for setTimeout, 
setInterval or execScript
InvokeMemberFunc
Accenting, if the URL 
is a javascript URL
InvokeNavigation
Complicated logic of 
invocation and navigation
Receiver frame
mshtml.dll
De-accenting
compile
jscript.dll
Figure 6: Accenting/De-Accenting Script Source Code 
Merge into the “scripts” object
the 
that 
insert 
navigations 
internally  a  common 
For  each  invocation  or  navigation  scenario,  we  obtained  a 
call path. These paths form a call graph shown in Figure 6. We 
observed 
function  called  by 
and  setInterval 
execScript,  setTimeout 
is 
InvokeMemberFunc,  and  a  common  function  called  for  all 
is  InvokeNavigation. 
Javascript  URL 
Therefore,  we 
accenting  operation  before 
InvokeMemberFunc  and  InvokeNavigation.  At  these 
two  functions,  it  is  straightforward  to  conform  to  the  rule  of 
script ownership: since the caller script supplies the source code 
of the script to be sent to another frame, the accent key should be 
taken from the frame hosting the caller script.  
The  call  graph  in  the  receiver  frame  is  much  simpler. 
Because the scripts object in the DOM is in the “byte-code” 
format,  any  received  script  source  code  needs  to  be  compiled 
before  being  merged  into  the scripts  object  of  the  receiver 
frame.  Function  Compile 
the 
compilation,  which  is  an  ideal  location  to  perform  the  de-
accenting operation, i.e., removing the accent from the script by 