    7.服务器将数据输出给客户端。
在看完Struts2和SpringMVC的初始化方式之后不知道有没有对MVC架构更加清晰的了解。
#### **Struts2请求处理流程分析:**
    1、服务器启动的时候会自动去加载当前项目的web.xml
    2、在加载web.xml配置的时候会去自动初始化Struts2的Filter，然后把所有的请求先交于Struts的org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.java类去做过滤处理。
    3、而这个类只是一个普通的Filter方法通过调用Struts的各个配置去初始化。
    4、初始化完成后一旦有action请求都会经过StrutsPrepareAndExecuteFilter的doFilter过滤。
    5、doFilter中的ActionMapping去映射对应的Action。
    6、ExecuteOperations
源码、配置和访问截图：
### 0x02、Struts2中ActionContext、ValueStack、Ognl
* * *
在学习Struts命令执行之前必须得知道什么是OGNL、ActionContext、ValueStack。在前面已经强调过很多次容器的概念了。这地方不敢再扯远了，不然就再也扯回不来了。大概理解：tomcat之类的是个大箱子，里面装了很多小箱子，小箱子里面装了很多小东西。而Struts2其实就是在把很多东西进行包装，要取小东西的时候直接从struts2包装好的箱子里面去拿就行了。
#### **ActionContext对象：**
Struts1的Action必须依赖于web容器，他的extecute方法会自动获得HttpServletRequest、HttpServletResponse对象，从而可以跟web容器进行交互。
Struts2的Action不用依赖于web容器，本身只是一个普通的java类而已。但是在web开发中我们往往需要获得request、session、application等对象。这时候，可以通过ActionContext来处理。
ActionContext正如其名，是Action执行的上下文。他内部有个map属性，它存放了Action执行时需要用到的对象。
在每次执行Action之前都会创建新的ActionContext对象，
**通过ActionContext获取的session、request、application并不是真正的HttpServletRequest、HttpServletResponse、ServletContext对象，**
而是将这三个对象里面的值重新包装成了map对象。这样的封装，我们及获取了我们需要的值，同时避免了跟Web容器直接打交道，实现了完全的解耦。
测试代码：
    public class TestActionContextAction extends ActionSupport{
        private String uname;
        public String execute() throws Exception {
            ActionContext ac = ActionContext.getContext();
            System.out.println(ac);    //在此处定义断点
            return this.SUCCESS;
        }
        //get和set方法省略！
    }
我们设置断点，debug进去，跟踪ac对象的值。发现他有个table属性，该属性内部包含一个map属性，该map中又有多个map属性，他们分别是：
request、session、application、action、attr、parameters等。
同时，我们跟踪request进去，发现属性attribute又是一个table，再进去发现一个名字叫做”struts.valueStack”属性。内容如下：
OgnlValueStack可以简单看做List，里面还放了Action对象的引用，通过它可以得到该Action对象的引用。
下图说明了几个对象的关系：
1\.
ActionContext、Action本身和HttpServletRequest对象没有关系。但是为了能够使用EL表达式、JSTL直接操作他们的属性。会有
**一个拦截器**
将ActionContext、Action中的属性通过类似request.setAttribute()方法置入request中(webwork2.1之前的做法)。这样，我们也可以通过：${requestScope.uname}即可访问到ActionContext和Action中的属性。
##### 注：struts2后，使用装饰器模式来实现上述功能。
Action的实例，总是放到value
stack中。因为Action放在stack中，而stack是root(根对象)，所以对Action中的属性的访问就可以省略#标记。
#### **获取Web容器信息：**
在上面我 **GETSHELL或者是输出回显的时候就必须获取到容器中的请求和响应对象**
。而在Struts2中通过ActionContext可以获得session、request、application，但他们并不是真正的HttpServletRequest、HttpServletResponse、ServletContext对象，而是将这三个对象里面的值重新包装成了map对象。
Struts框架通过他们来和真正的web容器对象交互。
    获得session：ac.getSession().put("s", "ss");
    获得request：Map m = ac.get("request");
    获得application： ac.getApplication();
**获取HttpServletRequest、HttpServletResponse、ServletContext:**
有时，我们需要真正的HttpServletRequest、HttpServletResponse、ServletContext对象，怎么办?
我们可以通过ServletActionContext类来得到相关对象，代码如下：
    HttpServletRequest req = ServletActionContext.*getRequest*();
    ServletActionContext.*getRequest*().getSession();
    ServletActionContext.*getServletContext*();
#### **Struts2 OGNL:**
OGNL全称是Object-Graph Navigation
Language(对象图形导航语言)，Ognl同时也是Struts2默认的表达式语言。每一次Struts2的命令执行漏洞都是通过OGNL去执行的。在写这文档之前，乌云的drops已有可够参考的Ognl文章了。这里只是简单提下。
    1、能够访问对象的普通方法
    2、能够访问类的静态属性和静态方法
    3、强大的操作集合类对象的能力
    4、支持赋值操作和表达式串联
    5、访问OGNL上下文和ActionContext
Ognl并不是Struts专用，我们一样可以在普通的类里面一样可以使用Ognl，比如用Ognl去访问一个普通对象中的属性：
在上面已经列举出了Ognl可以调用静态方法，比如表达式使用表达式去调用runtime执行命令执行：
    @java.lang.Runtime@getRuntime().exec('net user selina 123 /add')
而在Java当中静态调用命令行的方式：
    java.lang.Runtime.*getRuntime*().exec("net user selina 123 /add");
### 0x03、Struts漏洞
* * *
Struts2究竟是个什么玩意，漏洞爆得跟来大姨妈紊乱似的，连续不断。前面已经提到了由于Struts2默认使用的是OGNL表达式，而OGNL表达式有着访问对象的普通方法和静态方法的能力。开发者无视安全问题大量的使用Ognl表达式这正是导致Struts2漏洞源源不断的根本原因。通过上面的DEMO应该差不多知道了Ognl执行方式，而Struts2的每一个命令执行后面都坚挺着一个或多个可以绕过补丁或是直接构造了一个可执行的Ognl表达式语句。
#### **Struts2漏洞病例：**
Struts2每次发版后都会release要么是安全问题，要么就是BUG修改。大的版本发布过一下几个。
[1.3.x/](http://struts.apache.org/release/1.3.x/) 2013-02-02 17:59 -[2.0.x/](http://struts.apache.org/release/2.0.x/) 2013-02-02 11:22 -[2.1.x/](http://struts.apache.org/release/2.1.x/) 2013-03-02 14:52 -[2.2.x/](http://struts.apache.org/release/2.2.x/) 2013-02-02 16:00 -[2.3.x/](http://struts.apache.org/release/2.3.x/) 2013-06-24 11:30 -
小版本发布了不计其数，具体的小版本下载地址：
#### **Struts公开的安全问题：**
1、Remote code exploit on form validation error:
2、Cross site scripting (XSS) vulnerability on and tags：
3、XWork ParameterInterceptors bypass allows OGNL statement
execution：
4、Directory traversal vulnerability while serving static content：
5、XWork ParameterInterceptors bypass allows remote command
execution：
6、Multiple Cross-Site Scripting (XSS) in XWork generated error pages：
7、User input is evaluated as an OGNL expression when there's a conversion
error：
8、Multiple critical vulnerabilities in Struts2：