title:Heterogeneous-PAKE: Bridging the Gap between PAKE Protocols and
Their Real-World Deployment
author:Rong Wei and
Fangyu Zheng and
Lili Gao and
Jiankuo Dong and
Guang Fan and
Lipeng Wan and
Jingqiang Lin and
Yuewu Wang
Heterogeneous-PAKE: Bridging the Gap between PAKE
Protocols and Their Real-World Deployment
Rong Wei∗
Lili Gao∗
Fangyu Zheng†
State Key Laboratory of Information
Security, Institute of Information
Engineering, Chinese Academy of
State Key Laboratory of Information
Security, Institute of Information
Engineering, Chinese Academy of
State Key Laboratory of Information
Security, Institute of Information
Engineering, Chinese Academy of
Sciences
PI:EMAIL
Guang Fan∗
Sciences
PI:EMAIL
Lipeng Wan∗
Sciences
PI:EMAIL
Jiankuo Dong
School of Computer Science,
Nanjing University of Posts and
Telecommunications
PI:EMAIL
State Key Laboratory of Information
Security, Institute of Information
Engineering, Chinese Academy of
State Key Laboratory of Information
Security, Institute of Information
Engineering, Chinese Academy of
Sciences
PI:EMAIL
Sciences
PI:EMAIL
Jingqiang Lin
School of Cyber Security, University
of Science and Technology of China
PI:EMAIL
Yuewu Wang∗
State Key Laboratory of Information
Security, Institute of Information
Engineering, Chinese Academy of
Sciences
PI:EMAIL
ABSTRACT
Two entities, who only share a password and communicate over
an insecure channel, authenticate each other and agree on a
large session key for protecting their subsequent communication.
This is called the password-authenticated key exchange (PAKE)
protocol. PAKE protocol has been considered a suitable substitute
for the prevailing hash-based authentication which is vulnerable
to various attacks. However, vendors are discouraged by both
its prohibitively computational overheads as well as integrating
costs, leading to its limited use since being proposed.
After carefully analyzing the general workflow of PAKE pro-
tocols, we present Heterogeneous-PAKE, an entire PAKE stack
with high-performance and compatibility for both client-side
and server-side for Web systems. Using SRP and SPAKE2+ as
case studies, we conduct a series of comprehensive experiments,
especially comparing with the conventional hash-based solutions
to evaluate the Heterogeneous-PAKE. The implementation har-
vests high throughput on the server-side with over 240k, 70k,
30k, and 1,650k operations per second for SRP-1024, SRP-1536,
SRP-2048, and SPAKE2+ respectively. Meanwhile, on most testing
platforms, the latency is well controlled within user-acceptable
bounds, especially the SPAKE2+ whose delay is less than 3x that
of a traditional authentication approach based on Bcrypt. The
∗ The authors are also with School of Cyber Security, University of Chinese Academy
of Sciences, Beijing, China
†Fangyu Zheng is the corresponding author.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for profit or commercial advantage and that copies bear this notice and
the full citation on the first page. Copyrights for components of this work owned
by others than ACM must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists, requires prior
specific permission and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485877
empirical results demonstrate that the Heterogeneous-PAKE is a
very economical (with only a GPU-ready server) and convenient
(with an easy-to-integrate software stack without user partici-
pation or database rebuilding) solution for upgrading existing
systems with high-performance PAKE services.
CCS CONCEPTS
• General and reference → Performance; • Applied com-
puting → Service-oriented architectures.
KEYWORDS
PAKE protocol, password authenticating, heterogeneous comput-
ing model, SRP, SPAKE2+
ACM Reference Format:
Rong Wei, Fangyu Zheng, Lili Gao, Jiankuo Dong, Guang Fan, Lipeng
Wan, Jingqiang Lin, and Yuewu Wang. 2021. Heterogeneous-PAKE: Bridg-
ing the Gap between PAKE Protocols and Their Real-World Deployment.
In Annual Computer Security Applications Conference (ACSAC ’21), Decem-
ber 6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3485832.3485877
1 INTRODUCTION
Passwords constitute the most ubiquitous means of authentica-
tion on the Internet, from the common to the most sensitive appli-
cations. A general password-based authentication practice relies
on SSL/TLS [37] and the slow hash functions (e.g., Bcrypt [35]
and Scrypt [33]): the user sends her (his) password to the server
under over an SSL/TLS-protected channel, and then the server
decrypts the password and verifies against a one-way image
typically computed via slow hash functions. The password im-
age of each user is stored on the server. There are two obvious
disadvantages of this approach:
• Although storing the password images on the server-side,
it is still vulnerable to dictionary attacks once the data-
base leaks. [43] summarized 56 biggest data breaches, in
76ACSAC ’21, December 6–10, 2021, Virtual Event, USA
R.Wei and F.Zheng, et al.
which Twitter, Facebook and Yahoo, as famous interna-
tional IT vendors in the world, were reported to be victims
of data breaches, leading to compromises of 300 million to
3 billion users’ private data, including plaintext passwords
or hashed passwords. Worse still, since password reuse
is rampant, any data breach would make those innocent,
heavily-guarded sites potentially vulnerable. With cre-
dential stuffing techniques, attackers could easily expand
damages to websites not compromised.
• The password (or its hashed image) in travel is exposed to
eavesdroppers and man-in-the-middle (MitM) attacks [5].
Although most websites are protected by SSL/TLS connec-
tions, security breaks if the SSL/TLS channel is established
with a compromised server’s private key (a widespread
concern given today’s too-common PKI failures [39]). Even
if the TLS channel was not corrupted, passwords would
still be decrypted after passing through the TLS offload
gateway, and then travel in plaintext through the internal
network.
1.1 PAKEs and the Challenges When Applied
Considering these problems, researchers proposed password au-
thenticated key exchange (PAKE) protocols [4], which are geared
to prevent the above-mentioned attacks. As the name suggests, a
PAKE protocol is intended to establish a strong session key for
participants based on a (weak) password.
According to the knowledge of the password hold by each
participant, a PAKE protocol can be labeled as symmetric (or
balanced) PAKE (bPAKE) or asymmetric (or augmented) PAKE
(aPAKE). While the password is shared by all of the participants,
bPAKE protocols do not apply to the client-server setting. In
contrast, an aPAKE protocol not only prevents passwords from
eavesdropping on channels but from data leakages on the server-
side. In this paper, we concentrate on aPAKE schemes, which
are more suitable for Web applications. Compared with tradi-
tional password-based login, instead of authenticating the user by
validating her (his) password with the hash stored on the server-
side, an aPAKE protocol is characterized with the following two
properties:
(1) Messages are randomized and thus, immune to insecure
communication channels like the Internet.
(2) The server side does not keep a password or its hash, in-
stead, it holds a much more complicated mapping (in other
words, a verifier) of the password. The security strength of
a verifier is based on mathematical hard problems, thus the
passwords are protected against dictionary attacks [29].
Over the past three decades, PAKEs have been heavily studied
but only been used in quite limited ranges compared with the
huge number of websites. As far as we know, Apple employed
SRP [47] for protecting iCloud security codes and recently used
SPAKE2+ [42] for car keys security [15]. 1Password used SRP
along with TLS/SSL to secure authentication between client and
server without storing plaintext user passwords [12]. Meanwhile,
other websites are barely reported for PAKE usage, Facebook [1]
and Google [2] are even reported to store passwords in plaintext.
The reasons for PAKE’s limited real-world usage are manifold,
among which performance issues and migration cost for the
existent systems are the main concerns. Technical challenges
include:
• Constructed over public-key cryptography, a PAKE pro-
tocol is characterized by far higher workloads than hash-
based authentications.
• Besides significant performance penalties, vendors have to
pay heavy taxes to upgrade their systems for PAKE service.
In contrast to simple cryptographic primitives, e.g., digital
signature and data encryption, a PAKE protocol consists
of multiple roundtrips requiring costly modifications to
the server-side.
• Compared with hash-based manners, an aPAKE protocol
requires rich clients to perform complex computations,
whereas diverse client-side environments bring more com-
patibility issues.
1.2 Contributions
In this paper, after carefully analyzing the general workflow
of aPAKE protocols, we present Heterogeneous-PAKE, an en-
tire PAKE stack for Web systems that offers high-performance
and compatibility for both client-side and server-side, including
cryptographic primitives, protocol implementations and network
scheduling.
The main goal of this work is to bridge the gap between PAKE
protocols and their real-world deployment at the lowest possible
cost. More specifically, our contributions are four-fold:
(1) Firstly, we put forward an easy-to-integrate PAKE service
framework for Web applications, minimizing the vendors’
costs for system upgrading.
(2) Secondly, on the server side, we provide a full PAKE im-
plementation in SIMD and SIMT computing fashions to
process highly concurrent user requests. The server-side
also integrates heterogeneous computing to the Web sys-
tems with minimal modifications by a finely scheduled
network processing architecture. While the framework
harvests low latency as well as high throughput, the extra-
ordinary performance mainly comes from COTS products,
including a desktop-class CPU and an NVIDIA graphics
card.
(3) Thirdly, on the client side, we implement a JavaScript-
based library including the fundamental cryptographic
primitives for both DL and EC-based PAKE, as well as the
high-level PAKE protocols.
(4) Finally, targeting two representative aPAKE protocols, SRP
and SPAKE2+, we build a high-performance aPAKE server
and corresponding components for Web applications. The
implementation harvests high throughput on the server-
side with over 240k, 70k, 30k and 1,650k operations per
second for SRP-1024, SRP-1536, SRP-2048 and SPAKE2+
respectively. In the meanwhile, the client-side’s latency is
well controlled within user-acceptable bounds, especially
the SPAKE2+ implementation whose delay is less than
3x that of a traditional authentication approach based on
Bcrypt and does not exceed 0.4s on most platforms even
facing the concurrency of over 1600k requests per second.
1.3 Outline
The next section begins with the background and requisite knowl-
edge. Section 3 illustrates the overall framework of the prototype
system. Section 4 details the design and optimizations we adopted
on different aspects. In Section 5 we conduct a series of experi-
ments and performance evaluations. Finally, we draw conclusions
in Section 6.
77Heterogeneous-PAKE: Bridging the Gap between PAKE Protocols and Their Real-World Deployment
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
2 BACKGROUND
This section introduces basic knowledge of PAKE protocols,
demonstrates two target protocols, and illustrates features of
involved parallel platforms.
2.1 PAKE Protocol
A PAKE scheme is an interactive protocol that allows its partici-
pants to authenticate each other and agree on a shared crypto-
graphic key with a (weak) password.
Augmented PAKE (aPAKE) protocols [17, 40, 42, 46] are further
designed to keep an individual user’s password secure against
server compromise in client-server scenarios which are quite
common in the real world.
Although PAKE protocol achieves strong security with weak
passwords, it has been hampered from widespread use by per-
formance issues. Besides expensive mathematical computations
and multiple interactions, some schemes introduce additional
complexity to circumvent existing patents. Table 1 lists the main
overheads of representative aPAKE protocols, including the num-
ber of modular exponentiation for discrete logarithm (DL) setting
or scalar multiplications for elliptic curve (EC) setting. Since the
concrete operations of a PAKE scheme vary in different pub-
lications, our data comes from IEEE P1363.2 [13] and Internet
drafts [42]. Particular attention is paid to fixed-base operations
which tend to be accelerated with pre-computations. In order
to solve this dilemma, we design an entire PAKE stack for Web
systems and implement SRP-3 [47] and SPAKE2+ [42] as two
case studies.
Table 1: Overhead of aPAKE Protocols
Protocol
Setting
Client
Fixed-base Total
Server
Fixed-base Total
AMP[21]
DL/EC
BSPEKE2[16] DL/EC
DL/EC
DL/EC
PAKZ[23]
SPAKE2+
SRP-3
SRP-5[45]
SRP-6[46]
DL
EC
DL
2
2
1
1
2
2
2
4
6
2
8/6
3
4
3
0
1
1
1
1
1
1
3
5
2/1
6/5
3
3
3
Client
Server
(lookup s, v)
K = H(S)
I D→
s←
A→
B,u←
S = (B − дx)a+ux
Input (ID, π)
x = H(s, π)
A = дa
1.
2.
3.
4.
5.
6.
7. M1 = H(A, B, K)
8.
H : hash function
π : the user’s password
x : private key derived from s and π
I D : the user’s identity v : verif ier derived from д and
x,computed as v = дx , stored on server side
a, b, u and v are one-time random numbers
M1→
M2← M2 = H(A, B, K)
s : the user’s salt stored on server side
B = v + дb
S = (Avu)b
K = H(S)
(verify M1)
д : a generator of GF(n)
(verify M2)
Figure 1: the Workflow of SRP3
EC point L computed as L = [w1]P, where w1 together with w0
are derived from the password π, and P is a generator of the EC
group G.
Client
Server
I D→
∗←
Input (ID, π)
(lookup w0, L)
(w0s , w1s) = PBKDF(π)
w0 = w0s mod p
w1 = w1s mod p
X = [x]P + [w0]M
Z = [hx](Y − [w0]N)
V = [hw1](Y − [w0]N)
Ka||Ke = H(TT)
KcA||KcB = KDF(Ka)
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
π : the user’s password
H : hash function
P : a generator of G h : the cofactor of G
M and N are fixed elements of G x and y are one-time random elements.
TT : concatenation of I D, Server , M, N , X , Y , Z , V , w0
X→
Y = [y]P + [w0]N
Y← Z = [hy](X − [w0]M)
Ka||Ke = H(TT)
(verify KcA)
L : the verifier of π , computed as L = [w1]P
I D : the user’s identity, such as username and Email
KcA→
Kc B← KcA||KcB = KDF(Ka)
V = [hy]L
(verify KcB)
Secure Remote Password (SRP) protocol, a verifier-based PAKE
scheme proposed by T Wu [47], is suitable for negotiating secure
connections using a user-supplied password while eliminating
the security problems traditionally associated with reusable pass-
words. Figure 1 presents steps of SRP-3 which take three round
trips to finish a key exchange and effectively conveys a zero-
knowledge password proof from the user to the server. As the
most representative one of industrialized aPAKE protocols, SRP
is used for account validation in keychain recovery and signing
into shared devices in iPhone [15]. Besides, SRP is integrated into
TLS [46].
SPAKE2+ is the augmented version of SPAKE2 [3] protocol
which is compatible with any prime order group and is proven
secure in the Universal Composable (UC) model [6]. While SRP
works on a ring and is hence uneasy for transplanting to an EC
group, SPAKE2+ is EC-compatible and does not require any full
domain hash function or ideal ciphers onto EC groups. When
implemented with EC, the protocol runs as Figure 2 shows. The
verifier of SPAKE2+ consists of an element w0 on GF(p) and an
Figure 2: the Workflow of SPAKE2+
2.2 Parallel Platforms
Facing up with the growing demand for greater computing pow-
ers across industry segments, vendors tend to equip their proces-
sors with vector instruction sets, such as AMD 3DNow [30], ARM
NEON [36], etc. Intel also announced its MMX/SSE/AVX [18, 32]
series. A vector instruction performs the same operation to mul-
tiple elements resided on a vector register in parallel, which is
also known as single instruction, multiple data (SIMD). As the
latest, also the most powerful version of the AVX series up to now,
AVX-512 [7] provides 8-way 64-bit (or 16-way 32-bit) instructions
which are of great importance for multi-precision arithmetic in
the public-key cryptosystem.
While vector instruction brings several-fold speedup to CPU
programs, this is far from dealing with highly concurrent tasks.
Consequently, researchers attempt to exploit the powerful com-
puting ability of graphic processing units (GPUs) to handle mas-
sive requests effectively.
78ACSAC ’21, December 6–10, 2021, Virtual Event, USA
R.Wei and F.Zheng, et al.
GPUs consist of a large number of cores, processing par-
allel tasks by broadcasting an instruction to every executing
unit, which is called single instruction, multiple threads (SIMT).
When used for computations other than graphics rendering,
GPUs act as a co-processor with built-in memory and process-
ing units. NVIDIA released Compute Unified Device Architec-
ture (CUDA) [38], a programming framework that enables de-
velopers to dramatically speed up computing applications by
harnessing the power of GPUs. Some excellent works for GPU-
accelerated computation have been delivered in recent years [8–
11, 31].
3 OVERVIEW
As we aim to provide efficient aPAKE services for Web applica-
tions, this section illustrates our solution and considerations.
Figure 3: Protocol Flow of aPAKE, where K means "Key",
KD means "Key Derivation", and KC means "Key Confir-
mation"
3.1 Design Goal
Since our goal is proposing a solution for integrating aPAKE
services to existing Web applications (which may be a large-scale
website with massive user data), instead of building a new website
with aPAKE functionality, some trivial issues should be taken
into account. The main requirements of our scheme include:
plications with minimal costs.
• easy-to-integrate. The vendors could upgrade their ap-
• extensible. It should be convenient to extend the system
to clustered Web servers, and it should not produce an
extra price when the cluster scale grows.
• high-performance. The system shall adapt to dynamic
workloads. Concretely, it achieves high throughput when