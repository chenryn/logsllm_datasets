# Heterogeneous-PAKE: Bridging the Gap between PAKE Protocols and Their Real-World Deployment

## Authors
- Rong Wei
- Fangyu Zheng
- Lili Gao
- Jiankuo Dong
- Guang Fan
- Lipeng Wan
- Jingqiang Lin
- Yuewu Wang

### Affiliations
- **State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences**
  - Rong Wei
  - Lili Gao
  - Fangyu Zheng
  - Guang Fan
  - Lipeng Wan
  - Yuewu Wang
- **School of Computer Science, Nanjing University of Posts and Telecommunications**
  - Jiankuo Dong
- **School of Cyber Security, University of Science and Technology of China**
  - Jingqiang Lin

**Corresponding Author: Fangyu Zheng**

**Emails:**
- Rong Wei: [PI:EMAIL]
- Lili Gao: [PI:EMAIL]
- Fangyu Zheng: [PI:EMAIL]
- Guang Fan: [PI:EMAIL]
- Lipeng Wan: [PI:EMAIL]
- Jiankuo Dong: [PI:EMAIL]
- Jingqiang Lin: [PI:EMAIL]
- Yuewu Wang: [PI:EMAIL]

---

## Abstract
Password-authenticated key exchange (PAKE) protocols enable two entities to authenticate each other and agree on a large session key for protecting subsequent communication, using only a shared password over an insecure channel. Despite their security benefits, PAKE protocols have seen limited adoption due to high computational overhead and integration costs. In this paper, we present Heterogeneous-PAKE, a high-performance and compatible PAKE stack for both client-side and server-side in Web systems. Using SRP and SPAKE2+ as case studies, we conduct comprehensive experiments comparing Heterogeneous-PAKE with conventional hash-based solutions. Our implementation achieves high throughput on the server-side, with over 240k, 70k, 30k, and 1,650k operations per second for SRP-1024, SRP-1536, SRP-2048, and SPAKE2+, respectively. The latency is well-controlled within user-acceptable bounds, especially for SPAKE2+, which has a delay less than 3x that of traditional Bcrypt-based authentication. These results demonstrate that Heterogeneous-PAKE is an economical and convenient solution for upgrading existing systems with high-performance PAKE services.

**Keywords:** PAKE protocol, password authentication, heterogeneous computing model, SRP, SPAKE2+

**ACM Reference Format:**
Rong Wei, Fangyu Zheng, Lili Gao, Jiankuo Dong, Guang Fan, Lipeng Wan, Jingqiang Lin, and Yuewu Wang. 2021. Heterogeneous-PAKE: Bridging the Gap between PAKE Protocols and Their Real-World Deployment. In Annual Computer Security Applications Conference (ACSAC '21), December 6â€“10, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3485832.3485877

---

## 1. Introduction

Passwords are the most common means of authentication on the Internet, from everyday applications to highly sensitive ones. Traditional password-based authentication relies on SSL/TLS and slow hash functions like Bcrypt and Scrypt. While this method is widely used, it has significant vulnerabilities:

- **Data Breaches:** Even if passwords are stored as one-way hashes, they are still vulnerable to dictionary attacks if the database is compromised. Major data breaches, such as those at Twitter, Facebook, and Yahoo, have exposed hundreds of millions of users' private data.
- **Man-in-the-Middle (MitM) Attacks:** Passwords can be intercepted during transmission, even if protected by SSL/TLS. If the SSL/TLS channel is compromised, the password can be decrypted after passing through the TLS offload gateway and travel in plaintext through the internal network.

### 1.1 PAKEs and the Challenges When Applied

To address these issues, researchers proposed PAKE protocols, which aim to establish a strong session key based on a weak password. PAKE protocols can be categorized into symmetric (bPAKE) and asymmetric (aPAKE) types. bPAKE protocols are not suitable for client-server settings, while aPAKE protocols prevent password eavesdropping and data leakage on the server side. This paper focuses on aPAKE schemes, which are more suitable for Web applications. aPAKE protocols offer two key properties:
1. **Randomized Messages:** Immune to insecure communication channels.
2. **Server-Side Verifiers:** Instead of storing passwords or their hashes, servers hold complex mappings (verifiers) based on mathematical hard problems, providing protection against dictionary attacks.

Despite their security advantages, PAKE protocols have seen limited real-world usage due to performance issues and high migration costs. Technical challenges include:
- **High Workloads:** PAKE protocols involve expensive public-key cryptography, leading to higher computational overhead compared to hash-based authentication.
- **System Upgrades:** Vendors must invest in significant system modifications to support PAKE, including multiple roundtrips and complex client-side computations.

### 1.2 Contributions

In this paper, we present Heterogeneous-PAKE, a complete PAKE stack for Web systems that offers high performance and compatibility for both client-side and server-side. Our contributions are:
1. **Easy Integration:** A framework that minimizes the cost of system upgrades for vendors.
2. **High-Performance Server-Side Implementation:** Full PAKE implementation in SIMD and SIMT computing fashions, leveraging heterogeneous computing with minimal modifications.
3. **Client-Side Library:** A JavaScript-based library for DL and EC-based PAKE, including high-level PAKE protocols.
4. **Empirical Results:** High throughput on the server-side and low latency on the client-side, demonstrating the practicality of Heterogeneous-PAKE.

### 1.3 Outline

- **Section 2:** Background and requisite knowledge.
- **Section 3:** Overview of the Heterogeneous-PAKE framework.
- **Section 4:** Detailed design and optimizations.
- **Section 5:** Experimental results and performance evaluations.
- **Section 6:** Conclusions.

---

## 2. Background

### 2.1 PAKE Protocol

A PAKE scheme is an interactive protocol that allows participants to authenticate each other and agree on a shared cryptographic key using a weak password. Augmented PAKE (aPAKE) protocols are designed to keep individual user passwords secure against server compromise in client-server scenarios.

#### Table 1: Overhead of aPAKE Protocols

| Protocol | Setting | Client (Fixed-base / Total) | Server (Fixed-base / Total) |
|----------|---------|-----------------------------|-----------------------------|
| AMP      | DL/EC   | 2 / 8                       | 2 / 6                       |
| BSPEKE2  | DL/EC   | 2 / 6                       | 2 / 4                       |
| PAKZ     | DL/EC   | 1 / 3                       | 1 / 3                       |
| SPAKE2+  | EC      | 1 / 3                       | 1 / 3                       |
| SRP-3    | DL      | 2 / 4                       | 1 / 1                       |
| SRP-5    | DL      | 2 / 6                       | 1 / 1                       |
| SRP-6    | DL      | 2 / 6                       | 1 / 1                       |

### 2.2 Parallel Platforms

To meet the growing demand for greater computing power, processors are increasingly equipped with vector instruction sets, such as Intel's AVX-512, which provides 8-way 64-bit (or 16-way 32-bit) instructions. GPUs, with their massive parallel processing capabilities, are also being leveraged for high-performance computing. NVIDIA's CUDA framework enables developers to harness the power of GPUs for non-graphics tasks.

---

## 3. Overview

### 3.1 Design Goal

Our goal is to provide efficient aPAKE services for Web applications with minimal integration costs. The main requirements of our scheme include:
- **Low Cost:** Minimal costs for integrating aPAKE services into existing applications.
- **Easy Integration:** Vendors can easily upgrade their applications without significant changes.
- **Extensibility:** The system should be scalable to clustered Web servers without additional costs.
- **High Performance:** The system should adapt to dynamic workloads, achieving high throughput under varying conditions.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the research.