文章分类：二进制漏洞利用分析
翻译来源：[Scraps of Notes on Exploiting Exim Vulnerabilities
(synacktiv.com)](https://www.synacktiv.com/publications/scraps-of-notes-on-exploiting-exim-vulnerabilities.html)
# 【二进制分析】利用邮件传输代理漏洞到RCE的攻击方法
> 最近，Qualys公司发布了一份关于EXIM
> MTA的严重漏洞：CVE-2019-15846。在他们的漏洞利用中，他们可以用PoC授权root权限。之后出现了类似危言耸听的文章，声称会有百万的EXIM邮件传输代理服务会遭受攻击。
Exim是基于GPL协议的开放源代码软件，由英国剑桥大学的Philip Hazel开发，目前最新版4.24。Exim是一个MTA（Message
Transfer Agent），即消息传输代理，负责邮件的路由、转发和投递。Exim被作者设计成可运行于绝大多数的类Unix系统上，包括
Solaris，AIX，Linux等。
Exim有许多功能，包括发送地址重写、IPV6支持、TLS/SSL支持、正则表达式（PCRE）、列表与匹配、系统级过滤器（system wide
filter），SMTP批处理。
在2018年，我们团队从[Exim Off-by-one RCE: Exploiting CVE-2018-6789 with Fully
Mitigations Bypassing | DEVCORE](https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/)学习了另一个关于EXIM的漏洞CVE2018-6789，开发了一个PoC，但并未发布公开。所以，我们决定再一次开发PoC，为此次漏洞。在这篇文章中，我们从攻击视角来呈现了Exim的全貌以及相关概述。我们将会展示这两个漏洞在PoC中的利用方法。
## 1、EXIM 如何执行的流程
在Exim邮件传输代理中有三个主要步骤：
  * 守护进程deamon坚挺入口的SMTP连接。然后守护进程会为每一个新的SMTP建立一个新的接收进程。守护进程通常可以使用 -q 选项来开启，在这种情况下，每个指定的时间然后运行一个队列中的进程。（比如 -q 30 表示每隔30分钟开启一个队列运行进程。）
  * 接收会接收一个入口消息，并存储在spool目录下（`/var/spool/exim/input`）。一个小溪由两个选项构成：-H （消息信封）和-D（消息体）。除非有其他要求，一般情况下接收进程会通过生成新进程来启动交付消息。如果选项 queue_only 是开启的，那么消息会被放在spool目录，而不会尝试自动发送传递它。
  * 队列运行进程开始遍历spool目录下的发送消息文件，然后为每个消息文件启动一个传递发送进程。
  * 传递发送进程一般执行远程或本地交付，这个过程中会以root的权限运行，这会使它成为一个有趣的攻击目标。
## 2、关于 EXIM 池的分配器
Exim保留了几个分配池。只要进程存在，POOL_PERM 就会被分配，包括存储了配置项和ACL控制。POOL_MAIN
属于动态分配，所以可以被释放。最后，还包含一个 POOL_SEARCH，专门用于查询存储内容。
一个Pool传输代理池就是一个链表（如下），它们可以被动态分配。最小的存储大小storeblock是0x2000。当Exim请求一定的内存需要时，它就会检查在当前block块中是否有足够的内存空间能够填充请求的大小。无论当前block块还剩下多少空间，即使不够也会分配新的
storeblock存储块。
Exim 传输池的管理是由 stroe_in.c 定义的：
  * `store_malloc` and `store_free`：malloc和free的包装库。
  * `store_get`：返回当前存储块 storeblock的指针，如何在分配空间中还有足够大小的话，那么一个新的存储空间会被分配到这个指针中。
  * `store_reset`：设置 yield 指针指向存储指针重置点，并且释放后续的存储空间。在后面我们可以看到，这个函数在攻击过程中是多么的有用。
  * `store_release`：该函数充当再分配函数功能。
  * `store_extend`：如果处于分配空间中的数据需要扩展，那么这个函数会起作用，可以避免再分配和复制等繁琐工作。
## 3、基于堆的EXIM溢出漏洞
假设，在EXIM中包含一个基于堆的溢出漏洞，可以根据 [@mehqq_'s
blogpost](https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/) 的文章中的技术来获得代码执行。
### ACLs访问控制列表
ACLs是一个在配置文件中定义的访问控制列表，通常被是用来控制Exim接受一些SMTP协议的行为。可以根据 acl_smtp_mail
选项来定义每次接收MAIL_FROM 命令的具体的过滤行为。当Exim收到`${run{cmd}}` 命令时，可以对选项进行扩展和定义。
ACLs控制列表是通过一个全局指针来定义的，指针的数据从POOL_PERM中加载到storelock中。覆盖ACls命令会导致代码执行漏洞。
### 从堆溢出漏洞到UAF
现在的目的是覆盖一个已经分配存储空间的下一个指针，然后指向包含ACL的存储空间中。如果之后 storeblock链可以被重置（通过发送一个新的
HELO命令），那么包含ACL的存储空间会被释放，然后我们可以发送新的命令获取它。
这个场景需要5个阶段：
1.整形heap堆，以便于我们可以获取两处连续的存储空间 storeblock，存储空间（从有漏洞的那个）到目标存储空间`storeblock`。
2.从新释放的数据块中溢出，并且打断已经分配存储空间storeblock
的下一个指针，以便于可以将指针指向包含ACL的存储空间storeblock。请记住，这需要合适的爆破操作，因为存储空间（劫持的storeblock块和ACL
存储空间块）都位于heap堆中。
3.通过发送HELO命令来释放包含ACLs的存储块storeblock：整个分配空间链都会被释放。
4.他哦难过发送多个AUTH命令获取返回的ACL分配空间storeblock，覆写`acl_smtp_mail`内容。
5.最后通过发送MAIL_FROM命令触发代码执行漏洞。
## 4、CVE-2018-6789漏洞利用
漏洞出现在base64.c文件的b64decode函数中。其中base64解码函数错误的计算了存储解码数据缓冲区的长度，导致一个基于堆的溢出漏洞。这里可以使用经典的技术来覆写这块数据块，并需要通过扩展大小（
[classic techniques](https://mtalbi.github.io/heap-based/overflow,/exploits/2017/09/16/the-macabre-dance-of-memory-chunks.html)损坏数据块chunk区域大小）。
在这一篇文章中详细的介绍了如何攻击的方法，通过在这篇文章中编写了PoC[@mehqq_](https://twitter.com/mehqq_)，所以我们不会详细的陈述所有的步骤。
我们会介绍关于Exim的特性，这影响到如何使用和塑造heap堆结构。我们的目标是在数据块size大小损坏之前，到达下面的堆形态。
  * 通过发送未定义命令和HELO命令两次来创建工作空间。此时，在错误报告的时候，为识别到的命令会触发存储空间分配，而HELO命令会重置之前分配的存储空间storeblock链。注意，Exim限制了未知命令的数量为3个。
  * 顶部的chunk块正在使用AUTH命令。
一旦上面的状态到达，我们就会通过发送`AUTH CRAM-MD5`
命令来扩大位于工作区域的空间chunk块的大小触发溢出漏洞。然后，我们强制中间的chunk块释放，方法是发送一个HELO命令，后面分一个无效的名称（`HELO
a+`），可以恢复整个存储区域storeblock。这样就允许提前终端HELO命令处理代码，避免调用`smtp_reset`。
最后，我们发送 AUTH命令，比先前释放的chunk数据块更大，顶部的chunk是重叠的。
从这里，可以按照上面的3-5的步骤来实施攻击，exp攻击代码放在[Github](https://github.com/synacktiv/Exim-CVE-2018-6789)。
## 5、CVE-2019-15846 漏洞利用
Exim 在4.92.1版本之前，容易受到基于堆的溢出漏洞攻击，在CVE-2019-15846种有Qualys分析，披露于2019-9-6。
漏洞代码位于调用string_unprinting
时的string_interpret_escape中，并且修复记录可以在[commit](https://git.exim.org/exim.git/commit/2600301ba6dbac5c9d640c87007a07ee6dcea1f4)中查看到详细信息。
    diff --git a/src/src/string.c b/src/src/string.c
    index 5e48b445c..c6549bf93 100644
    --- a/src/src/string.c
    +++ b/src/src/string.c
    @@ -224,6 +224,8 @@ interpreted in strings.
     Arguments:
       pp       points a pointer to the initiating "\" in the string;
                the pointer gets updated to point to the final character
    +           If the backslash is the last character in the string, it
    +           is not interpreted.
     Returns:   the value of the character escape
     */
    @@ -236,6 +238,7 @@ const uschar *hex_digits= CUS"0123456789abcdef";
     int ch;
     const uschar *p = *pp;
     ch = *(++p);
    +if (ch == '\0') return **pp;
     if (isdigit(ch) && ch != '8' && ch != '9')
       {
       ch -= '0';
顾名思义，`string_interpret_escape` 的目的是转义字符序列。例如，`\62`会被转义成`b`。
`string_unprinting` 使用了这个函数，目的是转义输入字符转换非转义字符。首先使用Exim内存空间分配器分配第一个输出字符。
    len = Ustrlen(s) + 1;
    ss = store_get(len);
漏洞存储在 `string_unprinting`
读取输入字符串时，直到读到了一个NULL字节。此时调用`string_interpret_escaped`时，它的指针也再次向前移动，随之
`string_unprinting` 也再次移动。然后，它会跳过反斜杠的字符，然后复制的结果会突破输出缓冲区的限制。
    while (*p)
      {
      if (*p == '\\')
        {
        *q++ = string_interpret_escape((const uschar **)&p);
        p++;
        }
     [...]
     }
这张图阐述了基于堆的溢出：
注意，此时NULL字节也会被复制到缓冲区中，计时她并没有停止处理输入缓冲区。
为了利用这个漏洞，这两个缓冲区（输入和输出区）的数据必须对齐，目的是确保除了输入缓冲区的NULL字节以外，中间没有其他NULL字节。跟准确的说，需要store_get中的数据对齐到1个storeblock存储空间中的8字节大小的边界上。
最后，需要两个缓冲区属于同一个存储块sotreblock，目的是溢出边界上的字节。根据调用
`string_unprinting`时堆的形状，输入缓冲区的大小可能非常有限。
然而结果是，可以被覆写的数据是没有限制的。read指针会读取写入的所有数据。为了避免在原来的NULL空字节的地方停止，可以在前面加入更多的反斜杠，结果可以达到输出到缓冲区的任何地址。
此外还可以通过 `\x00`编码空字节NULL来覆写他们。
### 漏洞利用
为了利用该漏洞，Qualys公司声称他们使用了后面地带有反斜杠的特制的SNI。SNI处于Exim假脱机文件中，这个文件是由Exim接收进程写入，由发送进程读取。当Exim发送进程读取到假脱机文件中的spool_read_header时，它会调用漏洞函数
`string_unprinting`。
每一个Exim 邮件代理传输的进程都包含一个ID属性，这个ID属性常常被用在假脱机文件的文件名，日志文件名中等等。
Qualys声称他们可以攻击基于堆的溢出漏洞，覆写用于创建日志文件名的message
ID。日志文件是由发送人的地址填充的。通过覆写消息的ID，类似使用`../../../../../../etc/passwd`，就可以实现添加一个新用户到目标系统中。
我们团队开始对漏洞函数的攻击路径进行更为深入的分析，像前面分析的，使用到了Exim中spool头文件解析。头文件存储在`/var/spool/exim4/input/`。每一个接收邮件都会生成两个假脱机文件，每一个都在message
Id之后进行命名，第一个消息体使用-D来添加。第二个使用-H来添加各种各样的SNI元数据。`spool_read_header`
spool_read_header 函数会多次调用。唯一存在漏洞的路径是当调用 `deliver_message`时。这个路径既可以在`exim