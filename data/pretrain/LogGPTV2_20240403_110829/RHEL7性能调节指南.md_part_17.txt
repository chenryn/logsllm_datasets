::: para
[**tuned-adm**]{.application}
对很多特定用例提供大量不同的配置文件以提高性能。以下配置文件有助于提高网络性能。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    延迟性能
    :::
-   ::: para
    网络延迟
    :::
-   ::: para
    网络吞吐量
    :::
:::
::: para
关于这些配置文件的更多信息，请见 ＜[第 A.6 节
"tuned-adm"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-tuned_adm){.xref}＞。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_the_hardware_buffer}6.3.2. 配置硬件缓冲区 {.title}
:::
::: para
如果硬件缓冲区弃置了大量的数据包，那么有很多可能的解决方法。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_the_hardware_buffer-Slow_the_input_traffic}[减缓输入流量]{.term}
:   ::: para
    筛选传入的流量，减少加入的多播组数量或减少广播流量，以降低队列填充率。筛选传入流量的方法，详情请见
    *Red Hat Enterprise Linux 7 Security
    Guide*。关于多播组详情，请见红帽企业版 Linux 7
    聚类分析文档。关于广播流量详情，请见 《*红帽企业版 Linux 7
    系统管理员参考指南*》，或用户想要配置的设备相关文档。所有红帽企业版
    Linux 7 的文档可从
    中获取。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_the_hardware_buffer-Resize_the_hardware_buffer_queue}[调整硬件缓冲队列]{.term}
:   ::: para
    通过增加队列的大小以减少传送的数据包数量，使其不易过剩。用户可以使用
    ethtool 指令来更改网络设备的 rx/tx 参数：
    :::
    ``` screen
    # ethtool --set-ring devname value
    ```
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_the_hardware_buffer-Change_the_drain_rate_of_the_queue}[改变队列的排出率]{.term}
:   ::: para
    设备重量是指设备一次可以接收的数据包数量（单个预定处理器访问）。用户可以通过提高设备重量以增加队列的排出比率，这由
    *`dev_weight`* 参数控制。此参数可以通过改变
    `/proc/sys/net/core/dev_weight`{.filename}
    文件的内容来做临时更改，或使用 [**sysctl**]{.application}
    进行永久更改，这由 [procps-ng]{.package} 数据包提供。
    :::
:::
::: para
改变队列排出率通常是缓解不良网络性能最简单的方法。但是，增加设备一次可以接收的数据包数量会消耗处理器额外的时间，在此期间不可调度其他进程，因此可能会导致其他性能问题。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_interrupt_queues}6.3.3. 配置中断队列 {.title}
:::
::: para
如果分析显示高延迟，系统可能受益于基于轮询的包接收，而不是基于中断的包接收。
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_interrupt_queues-Configuring_busy_polling}6.3.3.1. 配置繁忙轮询 {.title}
:::
::: para
繁忙轮询有助于减少网络接收路径中的延迟， 使 socket
层代码查询网络设备的接收队列并禁用网络中断，这可以消除由于中断和由此产生的环境切换所造成的延误。但是，它会增加
CPU 的使用率。繁忙轮询可以防止 CPU
进入睡眠状态，睡眠状态会造成额外的功耗。
:::
::: para
繁忙轮询是默认禁用的。要在特定 socket 中启用繁忙轮询，请按以下指示：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    将 *`sysctl.net.core.busy_poll`* 设置为除 `0`{.literal}
    以外的值。这一参数控制的是 socket
    轮询和选择位于等待设备队列中数据包的微秒数。红帽推荐值为
    `50`{.literal}。
    :::
-   ::: para
    添加 `SO_BUSY_POLL`{.option} socket 选项至 socket。
    :::
:::
::: para
要全局启用繁忙轮询， 须将 *`sysctl.net.core.busy_read`* 设置为除了
`0`{.literal} 以外的值。这一参数控制了socket
读取位于等待设备队列中数据包的微秒数，且设置了 `SO_BUSY_POLL`{.option}
选项的默认值。红帽推荐在 socket 数量少时将值设置为 `50`{.literal} ，
socket 数量多时将值设置为 `100`{.literal}。对于 socket
数量极大时（超过几百），请使用 `epoll`{.methodname}。
:::
::: para
繁忙轮询由以下驱动程序支持。红帽企业版 Linux 7 支持这些驱动程序。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    bnx2x
    :::
-   ::: para
    be2net
    :::
-   ::: para
    ixgbe
    :::
-   ::: para
    mlx4
    :::
-   ::: para
    myri10ge
    :::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_socket_receive_queues}6.3.4. 配置 socket 接收队列 {.title}
:::
::: para
如果分析数据显示，数据包由于 socket
队列排出率太慢而被弃置，有几种方法来解决由此产生的性能问题。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_socket_receive_queues-Decrease_the_speed_of_incoming_traffic}[减少传入流量的速度]{.term}
:   ::: para
    减少队列填充速率可以通过筛选或弃置进入队列前的数据包，或是减少设备重量。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_socket_receive_queues-Increase_the_depth_of_the_applications_socket_queue}[增加应用程序的 socket 队列深度]{.term}
:   ::: para
    如果一个 socket 队列接收数量有限的涌入流量，增加 socket
    的队列深度以便与涌入的流量大小相配，从而防止数据包被弃置。
    :::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_socket_receive_queues-Decrease_the_speed_of_incoming_traffic}6.3.4.1. 减少传入流量的速度 {.title}
:::
::: para
筛选传入流量或降低网络接口卡的设备重量来减少传入的流量。关于筛选传入流量的方法，详情请见
《*红帽企业版 Linux 7 安全指南*》，可从
中获取。
:::
::: para
设备重量是指设备一次可以接收的数据包数量（单个预定处理器访问）。设备重量由
*`dev_weight`* 参数控制。此参数可以通过改变
`/proc/sys/net/core/dev_weight`{.filename}
文件的内容来做临时更改，或是使用 [**sysctl**]{.application}
来做永久更改，这由 [procps-ng]{.package} 数据包提供。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_socket_receive_queues-Increasing_queue_depth}6.3.4.2. 增加队列深度 {.title}
:::
::: para
增加应用程序的 socket 队列深度往往是提高 socket
队列排出率最简单的方法，但不可能是一个长期的解决方法。
:::
::: para
要增加队列深度就要增加 socket 接收缓冲区的大小，可以做如下变化：
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Increasing_queue_depth-Increase_the_value_of_procsysnetcorermem_default}[增加 /proc/sys/net/core/rmem_default 值]{.term}
:   ::: para
    这一参数控制 socket 使用的接收缓冲区的默认大小，这个值必须小于
    `/proc/sys/net/core/rmem_max`{.filename} 的值。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Increasing_queue_depth-Use_setsockopt_to_configure_a_larger_SO_RCVBUF_value}[使用 setsockopt 配置较大的 SO_RCVBUF 值]{.term}
:   ::: para
    这一参数控制的是以字节为单位的 socket 接收缓冲区的最大值。使用
    `getsockopt`{.methodname}
    系统调用来确定当前缓冲区的值。此参数的更多信息，请见手册页：
    :::
    ``` screen
    $ man 7 socket
    ```
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_Receive_Side_Scaling_RSS}6.3.5. 配置 RSS {.title}
:::
::: para
RSS（接收端调整），也叫多队列接收，是通过一些基于硬件的接收队列来分配网络接收进程，从而使入站网络流量可以由多个
CPU 进行处理。RSS 可以用来缓解接收中断进程中由于单个 CPU
过载而出现的瓶颈，并减少网络延迟。
:::
::: para
要确定您的网络接口卡是否支持 RSS，须查看多个中断请求队列是否在
`/proc/interrupts`{.filename} 中有相关的接口。例如，如果用户对
`p1p1`{.systemitem} 接口有兴趣：
:::
``` screen
# egrep 'CPU|p1p1' /proc/interrupts
   CPU0    CPU1    CPU2    CPU3    CPU4    CPU5
89:   40187       0       0       0       0       0   IR-PCI-MSI-edge   p1p1-0
90:       0     790       0       0       0       0   IR-PCI-MSI-edge   p1p1-1
91:       0       0     959       0       0       0   IR-PCI-MSI-edge   p1p1-2
92:       0       0       0    3310       0       0   IR-PCI-MSI-edge   p1p1-3
93:       0       0       0       0     622       0   IR-PCI-MSI-edge   p1p1-4
94:       0       0       0       0       0    2475   IR-PCI-MSI-edge   p1p1-5
```
::: para
之前的输出显示 NIC 驱动程序为 `p1p1`{.systemitem} 接口创建了 6
个接收队列（`p1p1-0`{.literal} 至
`p1p1-5`{.literal}）。也显示出每个队列处理的中断数量以及处理中断的
CPU。在这种情况下，由于有 6 个默认队列，这一特殊的 NIC 驱动程序就为每个
CPU 创建一个队列，这个系统一共有 6 个 CPU。这是 NIC
驱动程序中很常见的模式。
:::
::: para
或者用户可以在网络驱动程序加载后查看
`ls -1 /sys/devices/*/*/device_pci_address/msi_irqs`{.command}