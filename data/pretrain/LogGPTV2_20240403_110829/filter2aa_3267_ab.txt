### Bitmap and GDI Object Exploitation

#### Bitmap Memory Layout
Depending on the type of bitmap, one of the pointers within the `SURFOBJ` structure will be used to reference the bitmap bits. These bits are typically located in memory immediately following the `SURFOBJ`.

#### Demystifying Kernel Exploitation by Abusing GDI Objects (2017-07-18)

---

**Page 17: Bitmap Allocation**

The `CreateBitmap` function is used to allocate bitmap objects. To illustrate, consider the following code snippet that allocates 2000 bitmap objects:

```c
for (int y = 0; y < 2000; y++) {
    CreateBitmap(1, 1, 1, 1, NULL);
}
```

---

**Page 30: Palette Manipulation with `GreSetPaletteEntries`**

The `GreSetPaletteEntries` function has a restriction on the `hdcHead` member. If this member is set, the function will follow a code path that results in an error or a Blue Screen of Death (BSOD), as highlighted in yellow below.

Before reaching this point, `GreSetPaletteEntries` calls `XEPALOBJ::ulSetEntries`, which checks the `pTransCurrent` and `pTransOld` members. If these members are set, the function will perform an AND operation with 0, as shown in orange. However, if these locations are properly allocated, this check should not result in a BSOD.

The only restriction when setting palettes using the `AnimatePalettes` user-mode function is that the most significant byte of the memory location pointed to by `*pFirstColor` must be an odd value. This can be challenging on x64 systems but is more manageable on x86 systems, as demonstrated in `XEPALOBJ::ulAnimatePalette`. If this condition is not met, the function will return an error without writing the new value to the memory location.

---

**Page 31: EPROCESS and SYSTEM Token Stealing**

Each running process on the system is represented by the `_EPROCESS` structure in the kernel. This structure contains several important members, such as `ImageName`, `SecurityToken`, `ActiveProcessLinks`, and `UniqueProcessId`. The offsets of these members vary between different versions of the operating system.

The address of the SYSTEM process's `_EPROCESS` structure in the kernel can be calculated using the following formula:

```c
KernelEPROCESSAddress = kernelNTBase + (PSInitialSystemProcess() - UserNTImageBase)
```

#### Interesting Members of the `_EPROCESS` Structure

- **SecurityToken**: Represents the security level of the current process. When a process requests access to a certain privilege, the `SecurityToken` is used to verify that the calling process has the necessary access.
- **ActiveProcessLinks**: A `LIST_ENTRY` object that contains pointers to the next and previous active processes' `_EPROCESS` entries in the kernel.

```c
typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY;
```

- **UniqueProcessId**: The Process ID (PID) of the process.

#### Game Plan for Token Stealing

1. **Get Initial SYSTEM Process EPROCESS Kernel Address**: Calculate the address of the SYSTEM process's `_EPROCESS` structure in the kernel.
2. **Read SecurityToken and ActiveProcessLinks**: Use an arbitrary read memory primitive to obtain the `SecurityToken` and `ActiveProcessLinks` from the SYSTEM process's `_EPROCESS` structure.
3. **Find Current Process EPROCESS Address**: Iterate over the `ActiveProcessLinks` entries until the `ActiveProcessLinks->Flink.UniqueProcessId` matches the current process's PID, obtained using `GetCurrentProcessId()`.
4. **Replace SecurityToken**: Use an arbitrary memory write primitive to replace the current process's `SecurityToken` with the SYSTEM process's `SecurityToken`.

---

**Demystifying Kernel Exploitation by Abusing GDI Objects (2017-07-18)**

This document provides a detailed overview of how to exploit GDI objects for kernel-level attacks, including bitmap allocation, palette manipulation, and token stealing techniques.