bits. Depending on the bitmap type, one of those pointers will be used. The bitmap bits are usually 
located in memory after the SURFOBJ. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!17!
!
Allocation 
CreateBitmap function is used to allocate Bitmap objects, as defined below. 
Allocate 2000 bitmap objects: 
for (int y = 0; y palNumEntries = 0x1E3; 
lPalette->palVersion = 0x0300; 
for (int k = 0; k GreSetPaletteEntries which has the first 
restriction on hdcHead member, if this member is set the code path taken will end with an error or 
BSOD highlighted in Yellow below. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!30!
!
Before the code reaches this point the GreSetPaletteEntries will call XEPALOBJ::ulSetEntries, which 
checks the pTransCurrent and pTransOld members and if they are set, a code path will be taken that 
will AND the values pointed by them with 0 blocks, in orange colours, although if these locations were 
allocated then this checks shouldn’t result in BSOD. 
The only restriction on setting Palette’s using the AnimatePalettes user-mode function, is that the 
most significant byte of the memory location pointed to by *pFirstColor has to be an ODD value, this 
proved challenging on x64 bit systems, but not so much on x86 ones, as shown in 
XEPALOBJ::ulAnimatePalette below. Although this will not result in BSOD but will error out without 
writing the new value to the memory location. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!31!
!
EPROCESS SYSTEM Token Stealing 
Each running process on the system is represented by the _EPROCESS structure in the kernel, this 
structure contains allot of interesting members, such as ImageName, SecurityToken, 
ActiveProcessLinks, and UniqueProcessId. The offset of these members changes from OS version to 
the other. The address of the SYSTEM process EPROCESS structure in kernel can be calculated by 
getting address by:   
KernelEPROCESSAddress = kernelNTBase + (PSInitialSystemProcess()-UserNTImageBase) 
EPROCESS structure interesting members’ offsets: 
Windows 8.1 x64 
Windows 7 SP1 x86 
SecurityToken 
SecurityToken represents the security level that the current process has access to, whenever the 
process requests access to a certain privilege the EPROCESS SecurityToken is used to verify that the 
calling process has access to the requested resource. 
ActiveProcessLinks  
ActiveProcessLinks is a LIST_ENTRY object, that contains pointers to the next/previous active 
processes EPROCESS entry in the kernel. 
typedef struct _LIST_ENTRY { 
struct _LIST_ENTRY  *Flink; 
struct _LIST_ENTRY  *Blink; 
} LIST_ENTRY, *PLIST_ENTRY; 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!32!
!
UniqueProcessId 
The UniqueProcessId as the name suggests is the Process PID. 
Game Plan 
1. Get Initial SYSTEM process EPROCESS kernel address. 
2. Use arbitrary read memory primitive to get the SecurityToken and ActiveProcessLinks. 
3. Get current process EPROCESS structure address, by iterating over the ActiveProcessLinks 
entries, till the ActiveProcessLinks->Flink.UniqueProcessId matches GetCurrentProcessId(). 
4. Use arbitrary memory write primitive to replace the current process SecurityToken with the 
SYSTEM process one. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!