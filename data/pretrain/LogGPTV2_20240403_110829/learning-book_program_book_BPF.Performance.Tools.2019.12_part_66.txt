### 10.3 BPF Tools

#### 10.3.28 skblife
The `skblife` tool measures the lifespan of `sk_buff` (socket buffer) objects in the Linux kernel. The following histogram shows that the majority of `sk_buff` lifespans are between 16 and 64 microseconds, with some outliers reaching up to 128 to 256 milliseconds.

```
[16, 32)
10 1
[32, 64)
12 1
[64, 128)
1 1
[128, 256)
1 |
```

This indicates that most `sk_buff` objects are short-lived, but there are a few instances where they persist for much longer. These outliers can be further investigated using other tools, such as queue latency analysis, to determine the source of the extended latency.

**How it Works:**
- The tool traces kernel slab cache allocations to track when `sk_buff` objects are allocated and freed.
- Allocations and deallocations are frequent, and this tool may introduce significant overhead on very busy systems. Therefore, it is best used for short-term analysis rather than long-term monitoring.

**Source Code:**
```bash
#!/usr/local/bin/bpftrace
kprobe:kmem_cache_alloc
{
    $cache = arg0;
    if ($cache == *kaddr("skbuff_fclone_cache") || $cache == *kaddr("skbuff_head_cache")) {
        @is_skb_alloc[tid] = 1;
    }
}

kretprobe:kmem_cache_alloc
/@is_skb_alloc[tid]/
{
    @skb_birth[retval] = nsecs;
    delete(@is_skb_alloc[tid]);
}

kprobe:kmem_cache_free
/@skb_birth[arg0]/
{
    @skb_residency_nsecs = hist(nsecs - @skb_birth[arg0]);
    delete(@skb_birth[arg0]);
}
END
{
    clear(@is_skb_alloc);
    clear(@skb_birth);
}
```

**Caveats:**
- `sk_buff` objects can be segmented into other `sk_buff` objects during GSO (Generic Segmentation Offload) or attached to others during GRO (Generic Receive Offload).
- TCP can coalesce `sk_buff` objects (e.g., `tcp_try_coalesce()`), which means the measured lifespan may not reflect the full packet's lifespan.
- The tool adds kprobe overhead to all kmem cache alloc and free calls, not just for `sk_buff` objects, which can be significant. In the future, adding an `alloc_skb` tracepoint could reduce this overhead.

#### 10.3.30 ieee80211scan
The `ieee80211scan` tool traces IEEE 802.11 (WiFi) SSID scans. The following example output shows a scan initiated by the `wpa_supplicant` process, stepping through various channels and frequencies. The scan took 3205 milliseconds.

```
13:55:07 scan started (on-CPU PID 1146, wpa_supplicant)
13:42:11 scanning channel 2GHz freq 2412: beacon_found 0
13:42:11 scanning channel 2GHz freq 2412: beacon_found 0
13:42:11 scanning channel 2GHz freq 2412: beacon_found 0
...
13:42:14 scanning channel 5GHz freq 5785: beacon_found 1
13:42:14 scanning channel 5GHz freq 5785: beacon_found 1
13:42:14 scanning channel 5GHz freq 5785: beacon_found 1
13:42:14 scanning channel 5GHz freq 5785: beacon_found 1
13:42:14 scan completed: 3205 ms
```

**How it Works:**
- The tool instruments the IEEE 802.11 scan routines, which should have negligible overhead as these routines are infrequent.
- It prints the start and completion times of the scan, along with the channels and frequencies being scanned and whether a beacon was found.

**Source Code:**
```bash
#!/usr/local/bin/bpftrace
#include <linux/nl80211.h>

BEGIN
{
    printf("Tracing IEEE80211 SSID scans. Hit Ctrl-C to end.\n");
}

kprobe:ieee80211_request_scan
{
    time("%T:");
    printf("scan started (on-CPU PID %d, %s)\n", pid, comm);
    @start = nsecs;
}

kretprobe:ieee80211_get_channel
/retval/
{
    $ch = (struct ieee80211_channel *) retval;
    $band = 0xff & *retval; // workaround for T76
    time("%T:");
    printf("scanning channel %s freq %d: beacon_found %d\n",
           band[$band], $ch->center_freq, $ch->beacon_found);
}

kretprobe:ieee80211_request_scan
/retval/
{
    time("%T:");
    printf("scan completed: %d ns\n", (nsecs - @start) / 1000000);
    delete(@start);
}

END
{
    clear(@start);
    clear(@band);
}
```

**Notes:**
- The tool currently assumes that only one scan will be active at a time.
- More information can be added to show different flags and settings used during the scan.

### 10.4 BPF One-Liners

#### 10.4.1 BCC
- **Count failed socket connect(2)s by error code:**
  ```bash
  stackcount -U t:syscalls:sys_enter_connect
  ```

- **TCP send bytes as a histogram:**
  ```bash
  funccount -H "x::tcp_sendmsg"
  ```

- **UDP send bytes as a histogram:**
  ```bash
  funccount -H "p::udp_sendmsg"
  ```

- **Count transmit stack traces:**
  ```bash
  stackcount t:net:net_dev_xmit
  ```

- **Count all ixgbevf device driver functions (adds high overhead to ixgbevf):**
  ```bash
  funccount "ixgbevf_*"
  ```

#### 10.4.2 bpftrace
- **Count socket accept(2)s by PID and process name:**
  ```bash
  bpftrace -e 'kprobe:sys_accept { @[pid, comm] = count(); }'
  ```

- **Count failed socket connect(2)s by process name and error code:**
  ```bash
  bpftrace -e 'kprobe:sys_connect { @["%s", comm, (int32) retval] = count(); }'
  ```

- **Count TCP sends/receives by on-CPU PID and process name:**
  ```bash
  bpftrace -e 'kprobe:tcp_sendmsg { @["%d %s", pid, comm] = count(); }'
  ```

- **Show receive CPU histogram for each device:**
  ```bash
  bpftrace -e 't:net:netif_receive_skb {@[args->name] = hist(cpu, 0, 128, 1);}'
  ```

- **Count all iwl device driver tracepoints (adds high overhead to iwl):**
  ```bash
  bpftrace -e 't:iwlwifi:* { @[probe] = count(); }'
  ```

### 10.5 Optional Exercises
- **Write an `solife(8)` tool to print per-session durations from `connect(2)` and `accept(2)` (and variants) to `close(2)` for that socket file descriptor.**
- **Write `tcpbind(8)`: a tool for per-event tracing of TCP bind events.**
- **Extend `tcpwin.bt` with a `retrans` event type, with the socket address and time as fields.**
- **Extend `tcpwin.bt` with a `new` event type, that has socket address, time, IP addresses, and TCP ports as fields. This should be printed when the TCP session reaches the established state.**
- **Modify `tcplife(8)` to emit connection details in DOT format, then plot using graphing software (e.g., GraphViz).**
- **Develop `udplife(8)` to show the lifespan of UDP connections, similar to `tcplife(8)`.**
- **Extend `ipecn.bt` to instrument outbound CE events, as well as IPv6.**

These exercises provide a good starting point for developing more advanced BPF tools and understanding the intricacies of network operations in the Linux kernel.