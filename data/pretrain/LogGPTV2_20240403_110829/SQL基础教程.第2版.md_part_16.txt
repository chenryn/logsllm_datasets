衣服 | 5000 | 3300 SUM (purchase_price) 的结果
办公用品 | 600 | 320
SUM (sale_price) 的结果
3.3 此前我们曾经使用SELECT语句选取出了Product（商品）表中的全部记
录。当时我们使用了ORDER BY子句来指定排列顺序，但现在已经无法记
起当时如何指定的了。请根据下列执行结果，思考ORDER BY子句的内容。
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
-----------+--------------+-------------+-------------+----------------+-----------
0003 | 运动T恤 | 衣服 | 4000 | 2800 |
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-11-11
0006 | 叉子 | 厨房用具 | 500 | | 2009-09-20
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-09-20
0004 | 菜刀 | 厨房用具 | 3000 | 2800 | 2009-09-20
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-09-11
0005 | 高压锅 | 厨房用具 | 6800 | 5000 | 2009-01-15
0007 | 擦菜板 | 厨房用具 | 880 | 790 | 2008-04-28
3-4 对查询结果进行排序 117 ●
第4章 数据更新
数据的插入（INSERT语句的使用方法）
数据的删除（DELETE语句的使用方法）
数据的更新（UPDATE语句的使用方法）
事务
本章重点
此前几章和大家一起学习了查询表中数据的几种方法，所使用的SQL语句
都是SELECT语句。SELECT语句并不会更改表中数据，也就是说，SELECT
语句是读取专用的指令。
本章将会给大家介绍DBMS中用来更新表中数据的方法。数据的更新处理
大体可以分为插入（INSERT）、删除（DELETE）和更新（UPDATE）三类。
本章将会对这三类更新方法进行详细介绍。此外，还会给大家介绍数据库中用
来管理数据更新的重要概念——事务。
4-1 数据的插入（INSERT语句的使用方法）
■什么是INSERT
■INSERT语句的基本语法
■列清单的省略
■插入NULL
■插入默认值
■从其他表中复制数据
4-2 数据的删除（DELETE语句的使用方法）
■DROP TABLE语句和DELETE语句
■DELETE语句的基本语法
■指定删除对象的DELETE语句（搜索型DELETE）
4-3 数据的更新（UPDATE语句的使用方法）
■UPDATE语句的基本语法
■指定条件的UPDATE语句（搜索型UPDATE）
■使用NULL进行更新
■多列更新
4-4 事务
■什么是事务
■创建事务
■ACID特性
4-1 数据的插入（INSERT语句的使用方法） 119 ●
第4章 数据更新
4-1
数据的插入（ 语句的使用方法）
INSERT
● 使用INSERT语句可以向表中插入数据（行）。原则上，INSERT语句每
学习重点
次执行一行数据的插入。
● 将列名和值用逗号隔开，分别括在（）内，这种形式称为清单。
● 对表中所有列进行INSERT操作时可以省略表名后的列清单。
● 插入NULL时需要在VALUES子句的值清单中写入NULL。
● 可以为表中的列设定默认值（初始值），默认值可以通过在CREATE TABLE
语句中为列设置DEFAULT约束来设定。
● 插入默认值可以通过两种方式实现，即在INSERT语句的VALUES子句
中指定DEFAULT关键字（显式方法），或省略列清单（隐式方法）。
● 使用INSERT …SELECT可以从其他表中复制数据。
什么是
INSERT
1-4节给大家介绍了用来创建表的CREATE TABLE语句。通过
CREATE TABLE语句创建出来的表，可以被认为是一个空空如也的箱子。
只有把数据装入到这个箱子后，它才能称为数据库。用来装入数据的SQL
KEYWORD 就是INSERT（插入）（图4-1）。
●INSERT语句
本节将会和大家一起学习INSERT语句。
图4-1 INSERT（插入）的流程
① CREATE TABLE语句只负责创建表，
但创建出的表中并没有数据
Product（商品）表
product_idproduct_nameproduct_typesale_pricepurchase_priceregist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
②通 过INSERT语句插入数据 执行INSERT操作
待插入数据的行
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
③向表中插入数据
Product（商品）表
product_idproduct_nameproduct_typesale_pricepurchase_priceregist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 5002009-09-20
0002 打孔器 办公用品 500 3202009-09-11
● 120 第4章 数据更新
要学习INSERT语句，我们得首先创建一个名为ProductIns
的表。请大家执行代码清单4-1中的CREATE TABLE语句。该表除了
为sale_price列（销售单价）设置了DEFAULT 0的约束之外，其
余内容与之前使用的Product（商品）表完全相同。DEFAULT 0的含
义将会在随后进行介绍，大家暂时可以忽略。
代码清单4-1 创建ProductIns表的CREATE TABLE语句
CREATE TABLE ProductIns
(product_id CHAR(4) NOT NULL,
product_name VARCHAR(100) NOT NULL,
product_type VARCHAR(32) NOT NULL,
sale_price INTEGER DEFAULT 0,
purchase_price INTEGER ,
regist_date DATE ,
PRIMARY KEY (product_id));
如前所述，这里仅仅是创建出了一个表，并没有插入数据。接下来，
我们就向ProductIns表中插入数据。
语句的基本语法
INSERT
1-5节中讲到向CREATE TABLE语句创建出的Product表中插
入数据的SQL语句时，曾介绍过INSERT语句的使用示例，但当时的目
的只是为学习SELECT语句准备所需的数据，并没有详细介绍其语法。
下面就让我们来介绍一下INSERT语句的语法结构。
INSERT语句的基本语法如下所示。
语法4-1 INSERT语句
INSERT INTO  (列1, 列2, 列3, ……) VALUES (值1, 值2, 值3, ……);
例如，我们要向ProductIns表中插入一行数据，各列的值如下所示。
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
4-1 数据的插入（INSERT语句的使用方法） 121 ●
此时使用的INSERT语句可参见代码清单4-2。
代码清单4-2 向表中插入一行数据
INSERT INTO ProductIns (product_id, product_name, product_type, 
sale_price, purchase_price, regist_date) VALUES ('0001', 'T恤衫', 
'衣服', 1000, 500, '2009-09-20');
表示下一行接续本行，只是由于版面所限而换行。
由于product_id列（商品编号）和product_name列（商品
名称）是字符型，所以插入的数据需要像'0001'这样用单引号括起来。
日期型的regist_date（登记日期）列也是如此A。
注A
有关日期型的介绍，请参考1-4节。 将列名和值用逗号隔开，分别括在（）内，这种形式称为清单。代码
清单4-2中的INSERT语句包含如下两个清单。
KEYWORD A 列清单→( product_id, product_name, product_type,
●清单 sale_price, purchase_price, regist_date)
●列清单
●值清单 B 值清单→( '0001', 'T恤衫', '衣服', 1000, 500,'2009-09-20')
当然，表名后面的列清单和VALUES子句中的值清单的列数必须保
持一致。如下所示，列数不一致时会出错，无法插入数据B。
注B
但是使用默认值时列数无需完
全一致。相关内容将会在随后的
“插入默认值”中进行介绍。 -- VALUES子句中的值清单缺少一列
INSERT INTO ProductIns (product_id, product_name, product_type, 
sale_price, purchase_price, regist_date) VALUES ('0001', 'T恤衫', 
'衣服', 1000, 500);
表示下一行接续本行，只是由于版面所限而换行。
注C 此外，原则上，执行一次INSERT语句会插入一行数据C。因此，
插入多行的情况，请参考专栏“多 插入多行时，通常需要循环执行相应次数的INSERT语句。
行INSERT”。
法则4-1
原则上，执行一次INSERT语句会插入一行数据。
● 122 第4章 数据更新
专 栏
多行
INSERT
法则4-1中介绍了“执行一次INSERT语句会插入一行数据”的原则。虽然在大
多数情况下该原则都是正确的，但它也仅仅是原则而已，其实很多RDBMS都支持一
次插入多行数据，这样的功能称为多行INSERT（multi row INSERT）。
KEYWORD 其语法请参见代码清单4-A，将多条VALUES子句通过逗号进行分隔排列。
●多行INSERT
代码清单4-A 通常的INSERT和多行INSERT
-- 通常的INSERT
INSERT INTO ProductIns VALUES ('0002', '打孔器', 
'办公用品', 500, 320, '2009-09-11');
INSERT INTO ProductIns VALUES ('0003', '运动T恤', 
'衣服', 4000, 2800, NULL);
INSERT INTO ProductIns VALUES ('0004', '菜刀', 
'厨房用具', 3000, 2800, '2009-09-20');
-- 多行INSERT （Oracle以外）
INSERT INTO ProductIns VALUES ('0002', '打孔器', 
'办公用品', 500, 320, '2009-09-11'),
('0003', '运动T恤', 
'衣服', 4000, 2800, NULL),
('0004', '菜刀', 
'厨房用具', 3000, 2800, '2009-09-20');
表示下一行接续本行，只是由于版面所限而换行。
该语法很容易理解，并且减少了书写语句的数量，非常方便。但是，使用该语
法时请注意以下几点。
首先，INSERT语句的书写内容及插入的数据是否正确。若不正确会发生
INSERT错误，但是由于是多行插入，和特定的单一行插入相比，想要找出到底是
哪行哪个地方出错了，就变得十分困难。
其次，多行INSERT的语法并不适用于所有的RDBMS。该语法适用于DB2、
SQL、SQL Server、PostgreSQL和MySQL，但不适用于Oracle。
特定的SQL
Oracle使用如下语法来巧妙地完成多行INSERT操作。
-- Oracle中的多行INSERT
INSERT ALL INTO ProductIns VALUES ('0002', '打孔器', 
'办公用品', 500, 320, '2009-09-11')
INTO ProductIns VALUES ('0003', '运动T恤', 
'衣服', 4000, 2800, NULL)
INTO ProductIns VALUES ('0004', '菜刀', 
'厨房用具', 3000, 2800, '2009-09-20')
SELECT * FROM DUAL;
注A
在书写没有参照表的SELECT语 表示下一行接续本行，只是由于版面所限而换行。
句时，写在FROM子句中的表。它 DUAL是Oracle特有（安装时的必选项）的一种临时表A 。因此“SELECT *
并没有实际意义，也不保存任何数
FROM DUAL”部分也只是临时性的，并没有实际意义。
据，同时也不能作为INSERT和
UPDATE的对象。
4-1 数据的插入（INSERT语句的使用方法） 123 ●
列清单的省略
对表进行全列INSERT时，可以省略表名后的列清单。这时VALUES
子句的值会默认按照从左到右的顺序赋给每一列。因此，代码清单4-3中
的两个INSERT语句会插入同样的数据。
代码清单4-3 省略列清单
-- 包含列清单
INSERT INTO ProductIns (product_id, product_name, product_type, 
sale_price, purchase_price, regist_date) VALUES ('0005', '高压锅', 
'厨房用具', 6800, 5000, '2009-01-15');
-- 省略列清单
INSERT INTO ProductIns VALUES ('0005', '高压锅', '厨房用具', 
6800, 5000, '2009-01-15');
表示下一行接续本行，只是由于版面所限而换行。
插入
NULL
INSERT语句中想给某一列赋予NULL值时，可以直接在VALUES
子句的值清单中写入NULL。例如，要向purchase_price列（进货
单价）中插入NULL，就可以使用代码清单4-4中的INSERT语句。
代码清单4-4 向purchase_price列中插入NULL
INSERT INTO ProductIns (product_id, product_name, product_type, 
sale_price, purchase_price, regist_date) VALUES ('0006', '叉子', 
'厨房用具', 500, NULL, '2009-09-20');
表示下一行接续本行，只是由于版面所限而换行。
但是，想要插入NULL的列一定不能设置NOT NULL约束。向设置
了NOT NULL约束的列中插入NULL时，INSERT语句会出错，导致
数据插入失败。
插入失败指的是希望通过INSERT语句插入的数据无法正常插入到
表中，但之前已经插入的数据并不会被破坏A。
注A
不仅是INSERT，DELETE和
UPDATE等更新语句也一样，SQL
语句执行失败时都不会对表中数
据造成影响。
● 124 第4章 数据更新
插入默认值
我们还可以向表中插入默认值（初始值）。可以通过在创建表的
KEYWORD CREATE TABLE语句中设置DEFAULT约束来设定默认值。
●默认值
本章开头创建的ProductIns表的定义部分请参见代码清单4-5。
●DEFAULT约束
其中DEFAULT 0就是设置DEFAULT约束的部分。像这样，我们可以
通过“DEFAULT ”的形式来设定默认值。
代码清单4-5 创建ProductIns表的CREATE TABLE语句（节选）
CREATE TABLE ProductIns
(product_id CHAR(4) NOT NULL,
（略）
sale_price INTEGER DEFAULT 0, -- 销售单价的默认值设定为0;
（略）
PRIMARY KEY (product_id));
如果在创建表的同时设定了默认值，就可以在INSERT语句中自动
为列赋值了。默认值的使用方法通常有显式和隐式两种。
■通过显式方法插入默认值
KEYWORD 在VALUES子句中指定DEFAULT关键字（代码清单4-6）。
●DEFAULT关键字
代码清单4-6 通过显式方法设定默认值