whether to check for the presence or absence of the pattern;
the action speciﬁes the action to be taken when the check
condition is satisﬁed. Our pattern deﬁnition language is derived
from Cypher [16], which is a widely-used query language
featuring expressive graph syntaxes. To make the graph pattern
deﬁnition more concise and expressive for IoT provenance con-
cepts, we introduce several extensions to the Cypher syntax.
For example, the WasOriginatedFrom keyword is a shortcut
to represent that there is a path from the ﬁrst node to the
second node in the provenance graph. The before, after
and within keywords are used to describe the time relation
between two nodes. We also deﬁne labels using the subtypes
deﬁned in the IoT provenance model to expressively specify a
type of node. Our shortcuts are translated to the Cypher syntax
by the Policy Engine at query execution.
pattern:{
MATCH (a:DEVICE_CMD {name:"setCode"}) WasOriginatedFrom
(b:INPUT_HTTP {name:"HTTP Request"}),
(c:DEVICE {name:"Front Door Lock"})
WHERE a.agentid = c.id
RETURN a
}
check: exist
action: notify
Fig. 6: An example IoT Provenance Policy.
Using this language, ProvThings enables real-time system
behavior monitoring (e.g., malicious behavior detection) and
response. The notify action can be used to alert users of
suspicious behavior. An example of such a policy can be
found in Figure 6, which speciﬁes to notify the user when
the setCode command of the Front Door Lock is triggered
by an HTTP request. The allow and deny actions can be
used to whitelist (or blacklist) chosen sequences of actions.
This is accomplished through a small extension to ProvThings
which instruments sink executions to require Policy Monitor
authorization. Before a sink is executed, the instrument code
queries the Policy Monitor with the metadata of the sink
function. The Policy Monitor checks if any policy covers this
sink execution activity and returns the deﬁned action to the
control code. If the action is allow, the control code executes
TABLE III: A comparison of existing IoT security solutions that
also use information tracking.
Information
Flow
3
3
3
App
Analysis
Cross
3
7
3
Consider
Devices
7
7
3
Name
FlowFence [45]
ContextIoT [54]
ProvThings
Platform
Modiﬁcation
No
7
3
3
Developer
Effort
No
7
3
3
Fig. 7: An overview of the deployment of ProvThings on the
SmartThings platform.
the sink function. Otherwise, the control code goes to the
next statement. In xVII-C, we demonstrate an end user app
that creates policies with allow and deny actions. When the
provenance of a command is suspicious (i.e., is not isomorphic
to the expected provenance), the platform can halt delivery of
the command until it has been authorized by the user.
Comparison to Other Information Flow Solutions. For clar-
ity, we now compare ProvThings to existing IoT information
ﬂow security solutions. The differences are summarized in
Table III. FlowFence protects data from IoT device sensors
by enforcing information ﬂow policies on IoT apps. It is able
to track data ﬂows through multiple apps, but assumes that
both platform and app developers will be willing to invest
signiﬁcant capital towards extending their software to support
information ﬂow control. ContextIoT avoids the requirement
of developer assistance by presenting a source code instrumen-
tation tool for IoT apps. While this general approach is similar
to ProvThings,
the capabilities of these systems are quite
different. ContextIoT analyzes apps in isolation, collecting
context internal to the IoT apps in order to distinguish between
benign and malicious contexts. It does not capture how data
ﬂows into apps, or trace relationships across different apps
and devices. ProvThings supports this capability, allowing it
to observe and explain complex interactions involving multiple
agents. An example of an attack that ContextIoT would not be
able to detect is explained in xVII-C involving the forgery of
fake device events. ContextIoT would not distinguish the real
and fake device events because, within the internal context of
the app, these events appear to be identical.
V.
IMPLEMENTATION
We implemented a prototype of ProvThings for the Sam-
sung SmartThings platform, which is a mature cloud-centric
IoT platform with a native support for a broad range of
device types and share key design principles with other plat-
forms. In our implementation, we collect provenance from
SmartApps and Device Handlers as SmartApp manage the
interactions between different devices and Device Handlers
manage the communication between SmartThings and the
physical devices. As shown in Figure 7, SmartApps and Device
Handlers are instrumented by ProvThings before they are
submitted for execution on the SmartThings backend. The
instrumented code collects provenance records and sends them
to our ProvThings backend server which runs the provenance
recorder and the policy engine. The provenance recorder is
implemented based on the SPADE system [47] and the policy
engine is implemented using Java to translate IoT provenance
policy queries into the Cypher language. The policy monitor
which runs on the Neo4j database is also implemented using
Java. Our implementation only needs to instrument the code
of SmartApps and Device Handlers without any change to the
SmartThings platform.
We implemented source code instrumentation as described
in xIV for both SmartApps and Device Handlers, which is
described below. As there are more than 450 IoT platforms
in the marketplace, we are not able to develop provenance
collectors for each platform. Thus, we envision community-
built and vetted provenance collectors for different platforms
to integrate into our framework implementation.
SmartApp Provenance Collector. We developed a static
source code instrumentation tool for Groovy using Java and
a Groovy library to collect provenance at runtime.
Static Source Code Instrumentation. Our tool generated the
Abstract Syntax Tree (AST) of a SmartApp using Groovy
AST transformation [15] at
the semantic analysis pass of
compilation. To implement Algorithm 1, we manually iden-
tiﬁed entry points, sources and sinks for SmartApps from
SmartThings’s developer API documentation. The entry points
of a SmartApp are lifecycle methods (installed, updated
and uninstalled), event handler methods and web service
endpoints3. We identiﬁed device states, device events and
inputs as sources since they may contain sensitive data. We
identiﬁed device control commands and 24 SmartThings-
provided API as sinks. These APIs can be potentially used
by adversaries to carry out malicious payload. For example,
the httpPost API can be used to leak sensitive data, and
the sendSms API can be used to send phishing messages
to the victims. As of April 2017, though SmartThings only
documents 72 capabilities4, we identiﬁed 85 device commands
protected by 89 capabilities are supported by SmartThings.
As shown in Algorithm 1, code that was not on any control-
ﬂow path from the entry points to the sinks was not instru-
mented as it did not affect the behavior of sinks. However, in
the case of SmartApps we did identify two exceptions. One
exception was dynamic method invocation. Since a dynamic
method invocation could invoke any method in the SmartApp
at runtime, we instrumented code to track this call. We further
discuss the implication of it in xVIII. The other exception
was assignment to global variables as they are shared among
executions. If a global variable has been assigned data that
could be derived from sources and the variable has been used
by sinks, the code in the control-ﬂow path from entry points
to the assignment statement also needs to be instrumented to
track the provenance of the data. As an example, in Figure 8,
we show the instrumented version of the example SmartApp
in Figure 2. We highlight the instrumented instructions in gray
background. The instrumented code tracks the provenance of
how the value of a lock event was used by a httpPost sink.
Note that we do not track the log.debug invocation (Line 13)
as it is not a sink. Even though the value of the name variable
3http://docs.smartthings.com/en/latest/smartapp-web-services-developers-guide/
4http://docs.smartthings.com/en/latest/capabilities-reference.html
7
InstrumentedSmartAppInstrumentedDevice HandlerSmartThings Cloud BackendSmartAppDevice HandlerProvThings CodeInstrumentorProv. RecorderPolicy  MonitorFrontendProvthings ServerProvenancedata1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
preferences {
input "lock", "capability.lock"
}
def installed() {
subscribe(lock, "lock", eventHandler)
}
def eventHandler(evt){
def scope = [:]
entryMethod(scope, "eventHandler", "evt", evt)
def name = evt.name
def value = evt.value
trackVarAssign(scope, "value", "evt")
log.debug "Lock event: $name, $value"
def msg = "Lock event data:" + value
trackVarAssign(scope, "msg", "value")
trackSink(scope,"httpPost","msg", ["http://www.domain.com
",msg])
httpPost("http://www.domain.com", msg)
}
//code snippets of our provenance collection Groovy library
def entryMethod(scope, name, argName, argValue){
scope[argName] = createEntity(argValue)
scope.id = createActivity(name)
createRelation(scope.id, scope[argName], "Used")
}
def trackVarAssign(scope, varName, usedVar){
def id = createEntity(varName, "VARIABLE")
createRelation(id, scope[usedVar], "WasDerivedFrom")
}
def trackSink(scope, name, usedVar, args){
def id = createActivity(name, usedVar, args)
createRelation(id, scope[usedVar], "Used")
createRelation(id, scope.id, "WasInformedBy")
}
Fig. 8: Instrumented version of the example SmartApp shown in
Figure 2. The instrumented code is highlighted in grey background.
is derived from a source (lock event evt), we do not track it
as it is not used by any sink (Line 10).
Runtime Provenance Collection. We implemented a set of
helper functions as a Groovy library to perform runtime
provenance collection. Figure 8 shows some of the helper
functions: entryMethod, trackVarAssign and trackSink,
which track provenance of program entry point invocation,
variable assignment and sink invocation respectively. Besides
the provenance records which are collected at runtime as
described in xIV, we represent dynamic method invocation as
a special type of activity which has a Used relation with the
value of each GString. The actual method being invoked has
a WasInformedBy relation to the dynamic method invocation
activity. Speciﬁcally, state and atomicState are two global
variables that allow developer to store data into different ﬁelds
and share the data across executions. Our data dependency
tracking is designed to be ﬁeld-sensitive to precisely track the
data dependency relationship of these two global objects.
Device Handler Provenance Collector. We use the same
instrumentation mechanism to implement Device Handler
provenance collectors. The entry points for a Device Handler
are lifecycle methods, device command methods, the parse
method and web service endpoints. For each command method
in a Device Handler, we track the message to be sent to
the physical device, and create a WasGeneratedBy relation
from the message to the command method. We instrument
the parse method to track the message from the device
and the events created by parsing the message. A Used
relation is created from the method to the message, and a
WasGeneratedBy relation is created from each event to the
parse method.
VI. EVALUATION
In this
section, we evaluate our
implementation of
ProvThings on SmartThings in ﬁve metrics (1) Effectiveness of
attack reconstruction (i.e., completeness); (2) Instrumentation
overhead; (3) Runtime overhead; (4) Storage overhead; (5)
Query performance. We conducted evaluation of (1) and (3)
using the SmartThings IDE cloud [26], and conducted other
evaluations locally on a machine with an Intel Core i7-2600
Quad-Core Processor (3.4 GHz) 16 GB RAM running Ubuntu
14.04. To measure overhead, we compare unmodiﬁed (Vanilla)
SmartApps and Device Handlers to the instrumented ones
using two versions of the ProvThings Provenance Collector:
ProvFull (PF), which instruments all instructions to collect
provenance records for the whole program; and ProvSave (PS),
which performs Selective Code Instrumentation (Algorithm
1) in order to only generate provenance records related to
sources and sinks.
A. Effectiveness
To evaluate the completeness of ProvThings, we con-
structed SmartApps for a corpus of 26 possible attacks on
IoT platforms through surveying relevant literature [44], [54],
[61], [69]. Each attack represents a unique class of malware or
a vulnerable app, with 12 based on reported IoT vulnerabilities
and 14 migrated from malware classes from smartphone plat-
forms. The resulting attack corpus covers all attacks in [44]
and covers 22 out of 25 attacks used in the evaluation of [54].
To establish a ground truth for describing the complexity of
each attack, two coders (authors of this paper) independently
inspected each attack implementation and applied our IoT
Provenance Model to generate a PROV description for the
code’s execution. One of the coders was responsible for writing
the attacks, while the other had not seen the source prior to
the beginning of coding. The coders then met to discuss their
results and resolve any inconsistencies.
We then instrumented the SmartApps and Device Handlers
for each attack using ProvSave and ProvFull, and triggered
the malicious behavior of the SmartApp in the SmartThings
IDE runtime. Following execution, we queried ProvThings to
reconstruct the provenance graph of the attack, which was
compared to the manual code review. For all
the attacks,
ProvFull produced more complex graphs than ProvSave as
extraneous nodes and edges were generated for operations
such as logging. However, we found that the ProvFull graphs
contained all nodes and edges in the ProvSave graphs, which
were necessary for attack reconstruction. In Table V, we
show the result of ProvSave for each attack in terms of
overall graph complexity. Note that we did not count the
agent nodes in the results as they are encoded as an agentid
property in entity and activity nodes as described in xIV. In all
cases, ProvSave and ProvFull achieve 100% coverage of the
attack when compared to manual coding. These results show
that provenance graphs generated by ProvThings are able to
accurately and reliably reconstruct IoT attacks, demonstrating
the completeness of our approach. Moreover, the fact that these
provenance graphs could also be generated by hand through
code review is a promising indicator of the intuitiveness and
usability of our IoT Provenance Model.
8
TABLE IV: Effectiveness of ProvThings in tracing the provenance
of different attack scenarios. Ground Truths were obtained through
manual source code inspection; Cov.: Coverage.
Attack
Backdoor Pin Code Injection [44]
Door Lock Pin Code Snooping [44]
Disabling Vacation Mode [44]
Fake Alarm [44]
Creating seizures [67], [54]
Surreptitious Surveillance [54]
Spyware [5]
Undesired unlocking [51], [54]
BLE relay unlocking [51], [54]
Lock Access Revocation [51], [54]
No Auth Local Command [69]
No Auth Remote Command [61]
Repackaging [54]
App Update [54]
Drive-by Download [54]
Remote Command [54]
User Events [54]
System Events [54]
Abusing Permission [54]
Shadow Payload [54]
Side Channel [54]
Remote Control [54]
Adware [54]
Ransomware [54]
Speciﬁc weakness [54]