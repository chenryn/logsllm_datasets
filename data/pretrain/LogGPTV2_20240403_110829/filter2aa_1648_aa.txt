Exploiting Qualcomm WLAN And Modem 
Over-The-Air
Xiling Gong, Peter Pi
Tencent Blade Team
About Us
Xiling Gong (@GXiling)
Senior security researcher at Tencent Blade Team. 
Focus on Android Security, Qualcomm Firmware Security. 
Speaker of BlackHat, CanSecWest.
Peter Pi(@tencent_blade)
Senior security researcher at Tencent Blade Team. 
Find many vulnerabilities of vendors like Google, Microsoft, Apple, Qualcomm, Adobe and Tesla. 
The #1 Researcher of Google Android VRP in year 2016.
Speaker of BlackHat, CanSecWest, HITB, GSEC and Hitcon.
About Tencent Blade Team
• Founded by Tencent Security Platform Department in 2017
• Focus on security research in the areas of AIoT, Mobile devices, Cloud 
virtualization, Blockchain, etc
• Report 200+ vulnerabilities to vendors such as Google, Apple, Microsoft, Amazon
• We talked about how to break Amazon Echo at DEFCON26
• Blog: https://blade.tencent.com
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
Introduction
• Broadcom WIFI Chip
• 2017, Gal Beniamini
• Over The Air: Exploiting Broadcom’s Wi-Fi Stack
• 2017, Nitay Artenstein, BlackHat USA 2017
• BROADPWN: REMOTELY COMPROMISING ANDROID AND IOS VIA A BUG IN 
BROADCOM'S WI-FI CHIPSETS
• Marvel WIFI Chip
• 2019, Denis Selyanin
• Zero Nights 2018 , Researching Marvell Avastar Wi-Fi: from zero knowledge to over-
the-air zero-touch RCE
• Blog 2019, Remotely compromise devices by using bugs in Marvell Avastar Wi-Fi: from 
zero knowledge to zero-click RCE
• How about Qualcomm WIFI?
Qualcomm WLAN (MSM8998)
WLAN Firmware
Baseband Subsystem
Linux Kernel
QCACLD2/3
Full MAC Layer
Application
Android Framework
Wifi Demon
Modem Firmware
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
MBA and Modem images
• Modem Boot Authenticator
• mba.mbn
• modem.mdt
• modem.b00 – modem.b20
• Image format
Modem Secure Boot
pil_boot
• The pil_boot function in Linux Kernel describes the boot flow of 
modem.
• Load mba.mbn, modem.mdt and modem.bxx to physical memory.
• Trigger MBA and modem images to be verified and run in 
Modem Processor.
• Linux Kernel can restart Modem Processor at any time, will hit 
pil_boot each time when restart.
pil_boot
pil_boot start
Load modem.mdt, use 
the info to setup modem 
pa region
Call pil_mss_mem_setup to register 
modem pa region to TZ
Call pil_msa_mss_reset_mba_load_auth_mdt
to load msa.mbn and auth modem.mdt
Call pil_assign_mem_to_subsys_and_linux
to make Linux Kernel and MBA both can 
access the pa region 
Call pil_load_seg to load 
modem.bxx to the pa region
Call pil_msa_mba_auth to auth 
modem.bxx and start modem
Call pil_reclaim_mem to make Linux 
Kernel can’t access the pa region 
any more
TOCTOU Vulnerability
modem.b
05
Linux 
Kernel
MBA
modem.b
06
modem.b
07
modem.b
20
Verified
Verifying
Modify the verified image
DDR
POC 
Debug Server Injection
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
Qualcomm WLAN
WLAN Firmware
Baseband Subsystem
Hexagon
Linux Kernel
QCACLD2/3
Full MAC Layer
Application
Android Framework
Wifi Demon
Modem Firmware
Qualcomm WLAN Architecture
WMI Handler
Non-Data Handler
Data Handler
Physical Layer OTA Packet
Offload MAC Layer
WLAN Firmware
Linux Kernel
QCACLD2/3
Full MAC Layer
Application
Android Framework
Wifi Demon
Example - Management Beacon 
Non-Data Handler
80211 Management Beacon
WLAN Firmware
Linux Kernel
QCACLD2/3
Full MAC Layer
Wifi Demon
Offload Table
Parse
Discard
SSID
Management Beacon
Forward
Firmware
• Modem load WLAN Firmware from 
/vendor/firmware/wlanmdsp.mbn
• IDA Disassembler
• https://github.com/programa-stic/hexag00n/tree/master/ida
• https://github.com/gsmk/hexagon
• Qualcomm SDK
• https://developer.qualcomm.com/software/hexagon-dsp-sdk/tools
• Instruction Reference
• https://developer.qualcomm.com/download/hexagon/hexagon-v5x-
programmers-reference-manual.pdf?referrer=node/6116
Reverse Engineering – Hint From Qualcomm
Import Function
WMI Handler
drivers/staging/fw-api-fw/wmi_unified.h
String Table
Reverse Engineering
• Targets To Reverse
• WMI Handlers
• Handle WMI commands from Linux Kernel
• Send back WMI indication to Linux Kernel
• Offload Handlers
• Handle OTA Packets
WMI Handler
Non-Data Handler
Data Handler
Offload MAC Layer
Physical Layer OTA Packet
WMI Handlers
drivers/staging/fw-api-fw/wmi_unified.h
0x03001
Offload Handlers
Sample Offload Handler
OTA Packet Data Pointer
= 
[0x5B | 0x5A | 0x59 | 0x58]
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
The Roadmap
Modem
WLAN
Linux 
Kernel
We are here!
Mitigation Table (WLAN & Modem)
Mitigation
Status
Heap ASLR
Y
Heap Cookie
Y
Stack Cookie
Y
W^X
Y
FRAMELIMIT*
Y
FRAMEKEY**
Y
Code & Global Data ASLR
N
CFI
N
*FRAMELIMIT Register - If SP  Overflow!
Data & Address of Overflow
Item 1 (0xB0 bytes)
Head (6 bytes)
Item 2 (0xB0 bytes)
…
Item 9 (0xB0 bytes)
Item 10 (0xB0 bytes)
Overflow (0x44 bytes)
Global Buffer
(0xB0 – 0x44 bytes)
Overflow (0x44 bytes)
(0xB0 – 0x44 bytes)
+0xB0 * 10
…
Smart Pointer Around Overflow Memory
Item 1 (0xB0 bytes)
Head (6 bytes)
Item 2 (0xB0 bytes)
…
Item 9 (0xB0 bytes)
Item 10 (0xB0 bytes)
Overflow (0x44 bytes)
(0xB0 – 0x44 bytes)
Overflow (0x44 bytes)
(0xB0 – 0x44 bytes)
…
0x00000000
+0
0x00000000
+4
0x00000000
+8
SmartPointer
+C
Global Buffer
+0xB0 * 10
Usage Of Smart Pointer
Char **AddressOfSmartPointer = GlobalBuffer + 6 + 0xB0 * 11 + 0xC;
char *SmartPointer = *AddressOfSmartPointer;
char *MacAddress = OTA_DataPtr + 0x10;
char *BYTE_C = OTA_ DataPtr + 0x10 + 0x20;
char *BYTE_D = OTA_ DataPtr + 0x10 + 0x21;
char *BYTE_14 = OTA_ DataPtr + 0x10 + 0x22;
if (TestBit(SmartPointer, 0) == 1) {
if (memcmp(SmartPointer + 6, MacAddress, 6) == 0) {
*(SmartPointer + 0xC) = *BYTE_C;
*(SmartPointer + 0xD) = *BYTE_D;  
*(SmartPointer + 0x14) = *BYTE_14;
}
}
* Translated and simplified the code flow
Usage Of Smart Pointer
Char **AddressOfSmartPointer = GlobalBuffer + 6 + 0xB0 * 11 + 0xC;
char *SmartPointer = *AddressOfSmartPointer;
//  Overwrite with vulnerability
char *MacAddress = OTA_DataPtr + 0x10;
char *BYTE_C = OTA_ DataPtr + 0x10 + 0x20;
char *BYTE_D = OTA_ DataPtr + 0x10 + 0x21;
char *BYTE_14 = OTA_ DataPtr + 0x10 + 0x22;
if (TestBit(SmartPointer, 0) == 1) {
//  The only constraint, Bit0 == 1
if (memcmp(SmartPointer + 6, MacAddress, 6) == 0) {
//  From OTA Data, could be bypass
*(SmartPointer + 0xC) = *BYTE_C; //  Overwrite 0xC
*(SmartPointer + 0xD) = *BYTE_D; //  Overwrite 0xD
*(SmartPointer + 0x14) = *BYTE_14;
}
}