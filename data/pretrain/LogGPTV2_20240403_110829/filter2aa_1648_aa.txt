# Exploiting Qualcomm WLAN and Modem Over-the-Air

## Authors
- **Xiling Gong** (@GXiling)
  - Senior Security Researcher at Tencent Blade Team
  - Focus on Android Security, Qualcomm Firmware Security
  - Speaker at BlackHat, CanSecWest
- **Peter Pi** (@tencent_blade)
  - Senior Security Researcher at Tencent Blade Team
  - Identified numerous vulnerabilities in Google, Microsoft, Apple, Qualcomm, Adobe, and Tesla
  - Top Researcher of Google Android VRP in 2016
  - Speaker at BlackHat, CanSecWest, HITB, GSEC, and Hitcon

## About Tencent Blade Team
- Founded by Tencent Security Platform Department in 2017
- Specializes in security research in AIoT, Mobile Devices, Cloud Virtualization, Blockchain, etc.
- Reported over 200 vulnerabilities to vendors such as Google, Apple, Microsoft, and Amazon
- Presented on breaking Amazon Echo at DEFCON26
- Blog: [https://blade.tencent.com](https://blade.tencent.com)

## Agenda
1. Introduction and Related Work
2. The Debugger
3. Reverse Engineering and Attack Surface
4. Vulnerability and Exploitation
5. Escaping into Modem
6. Escaping into Kernel
7. Stability of Exploitation
8. Conclusions

## Introduction
### Related Work
- **Broadcom Wi-Fi Chip**
  - 2017, Gal Beniamini: "Over The Air: Exploiting Broadcom’s Wi-Fi Stack"
  - 2017, Nitay Artenstein, BlackHat USA 2017: "BROADPWN: REMOTELY COMPROMISING ANDROID AND IOS VIA A BUG IN BROADCOM'S WI-FI CHIPSETS"
- **Marvell Wi-Fi Chip**
  - 2019, Denis Selyanin: 
    - Zero Nights 2018: "Researching Marvell Avastar Wi-Fi: from zero knowledge to over-the-air zero-touch RCE"
    - Blog 2019: "Remotely compromise devices by using bugs in Marvell Avastar Wi-Fi: from zero knowledge to zero-click RCE"

### Qualcomm WLAN (MSM8998)
- **WLAN Firmware**
- **Baseband Subsystem**
- **Linux Kernel**
- **QCACLD2/3**
- **Full MAC Layer**
- **Application**
- **Android Framework**
- **Wi-Fi Daemon**
- **Modem Firmware**

## MBA and Modem Images
- **Modem Boot Authenticator (MBA)**
  - `mba.mbn`
  - `modem.mdt`
  - `modem.b00` to `modem.b20`
- **Image Format**

### Modem Secure Boot
- **pil_boot Function in Linux Kernel**
  - Describes the boot flow of the modem
  - Loads `mba.mbn`, `modem.mdt`, and `modem.bxx` to physical memory
  - Triggers MBA and modem images for verification and execution in the Modem Processor
  - Allows the Linux Kernel to restart the Modem Processor at any time, invoking `pil_boot` each time

### pil_boot Process
1. Load `modem.mdt` and set up the modem PA region
2. Register the modem PA region to the TrustZone (TZ)
3. Load `msa.mbn` and authenticate `modem.mdt`
4. Make the Linux Kernel and MBA both accessible to the PA region
5. Load `modem.bxx` to the PA region
6. Authenticate `modem.bxx` and start the modem
7. Reclaim the PA region so the Linux Kernel can no longer access it

### TOCTOU Vulnerability
- Example: Modifying a verified image during the loading process
- DDR Memory Layout
- POC: Debug Server Injection

## Qualcomm WLAN Architecture
- **WMI Handler**
- **Non-Data Handler**
- **Data Handler**
- **Offload MAC Layer**
- **Physical Layer OTA Packet**
- **WLAN Firmware**
- **Linux Kernel**
- **QCACLD2/3**
- **Full MAC Layer**
- **Application**
- **Android Framework**
- **Wi-Fi Daemon**

### Example - Management Beacon
- **Non-Data Handler**
- **802.11 Management Beacon**
- **Offload Table**
- **Parse, Discard, Forward**

### Firmware
- **Modem loads WLAN Firmware from `/vendor/firmware/wlanmdsp.mbn`**
- **IDA Disassembler**
  - [Hexag00n IDA Plugins](https://github.com/programa-stic/hexag00n/tree/master/ida)
  - [GSMK Hexagon Tools](https://github.com/gsmk/hexagon)
- **Qualcomm SDK**
  - [Hexagon DSP SDK](https://developer.qualcomm.com/software/hexagon-dsp-sdk/tools)
- **Instruction Reference**
  - [Hexagon v5x Programmer's Reference Manual](https://developer.qualcomm.com/download/hexagon/hexagon-v5x-programmers-reference-manual.pdf)

### Reverse Engineering - Hint from Qualcomm
- **Import Function**: `drivers/staging/fw-api-fw/wmi_unified.h`
- **String Table**

### Targets to Reverse
- **WMI Handlers**
  - Handle WMI commands from the Linux Kernel
  - Send back WMI indications to the Linux Kernel
- **Offload Handlers**
  - Handle OTA Packets

### WMI Handlers
- **WMI Unified Header**: `drivers/staging/fw-api-fw/wmi_unified.h`
- **Sample Offload Handler**
- **OTA Packet Data Pointer**

## Roadmap
- **Modem**
- **WLAN**
- **Linux Kernel**

### Mitigation Table (WLAN & Modem)
| Mitigation | Status |
|------------|--------|
| Heap ASLR | Yes |
| Heap Cookie | Yes |
| Stack Cookie | Yes |
| W^X | Yes |
| FRAMELIMIT* | Yes |
| FRAMEKEY** | Yes |
| Code & Global Data ASLR | No |
| CFI | No |

*FRAMELIMIT Register: If SP Overflow!
- **Data & Address of Overflow**
  - Item 1 (0xB0 bytes)
  - Head (6 bytes)
  - Item 2 (0xB0 bytes)
  - ...
  - Item 9 (0xB0 bytes)
  - Item 10 (0xB0 bytes)
  - Overflow (0x44 bytes)
  - Global Buffer (0xB0 – 0x44 bytes)
  - Overflow (0x44 bytes)
  - (0xB0 – 0x44 bytes)
  - +0xB0 * 10
  - ...

### Smart Pointer Around Overflow Memory
- **Usage of Smart Pointer**
  - `char **AddressOfSmartPointer = GlobalBuffer + 6 + 0xB0 * 11 + 0xC;`
  - `char *SmartPointer = *AddressOfSmartPointer;`
  - `char *MacAddress = OTA_DataPtr + 0x10;`
  - `char *BYTE_C = OTA_ DataPtr + 0x10 + 0x20;`
  - `char *BYTE_D = OTA_ DataPtr + 0x10 + 0x21;`
  - `char *BYTE_14 = OTA_ DataPtr + 0x10 + 0x22;`
  - `if (TestBit(SmartPointer, 0) == 1) {`
    - `if (memcmp(SmartPointer + 6, MacAddress, 6) == 0) {`
      - `*(SmartPointer + 0xC) = *BYTE_C;`
      - `*(SmartPointer + 0xD) = *BYTE_D;`
      - `*(SmartPointer + 0x14) = *BYTE_14;`
    - `}`
  - `}`

- **Translated and Simplified Code Flow**
  - `char **AddressOfSmartPointer = GlobalBuffer + 6 + 0xB0 * 11 + 0xC;`
  - `char *SmartPointer = *AddressOfSmartPointer;`
  - `// Overwrite with vulnerability`
  - `char *MacAddress = OTA_DataPtr + 0x10;`
  - `char *BYTE_C = OTA_ DataPtr + 0x10 + 0x20;`
  - `char *BYTE_D = OTA_ DataPtr + 0x10 + 0x21;`
  - `char *BYTE_14 = OTA_ DataPtr + 0x10 + 0x22;`
  - `if (TestBit(SmartPointer, 0) == 1) {`
    - `// The only constraint, Bit0 == 1`
    - `if (memcmp(SmartPointer + 6, MacAddress, 6) == 0) {`
      - `// From OTA Data, could be bypassed`
      - `*(SmartPointer + 0xC) = *BYTE_C; // Overwrite 0xC`
      - `*(SmartPointer + 0xD) = *BYTE_D; // Overwrite 0xD`
      - `*(SmartPointer + 0x14) = *BYTE_14;`
    - `}`
  - `}`

This document provides a comprehensive overview of the exploitation of Qualcomm WLAN and Modem over-the-air, including related work, architecture, reverse engineering, and mitigation strategies.