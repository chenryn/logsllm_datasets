Instead it uses
software breakpoints because their performance
penalty is negligible and they can be deﬁned in
any quantity. Hardware breakpoints must explic-
itly be invoked by calling hbreak which fails on
TRESOR with “Couldn’t write debug register: De-
vice or resource busy.”
2. Watchpoints: Unlike breakpoints, watchpoints can-
not be implemented well in software and run about
a hundred times slower than normal execution [33].
Thus, GDB sets hardware watchpoints by default.
Calling watch fails on TRESOR with “Couldn’t
write debug register: Device or resource busy.”
as well.
To use software watchpoints instead,
set can-use-hw-watchpoints 0 must be
run before.
Admittedly, not being able to use hardware break-
points may be a reasonable drawback for malware ana-
lysts and software reverse engineers. Here we must limit
the target audience to end-users and “normal” develop-
ers.
3.2 Hardware compatibility
TRESOR is only compatible with real hardware. Run-
ning TRESOR as guest inside a virtual machine is gen-
erally insecure as the guest’s registers are stored in the
host’s main memory.
On hardware level, TRESOR’s compatibility is fur-
ther restricted to the x86 architecture. It is possible to
run AES entirely on the microprocessor, even without
an AES-NI instruction set (given that your CPU sup-
ports at least SSE2, which is the case for Pentium 4 and
later CPUs). But in order to run full AES efﬁciently,
processor compatibility is restricted to Intel’s Core-i se-
ries at present. More clearly, we recommend the usage
of 64-bit CPUs supporting the AES-NI instruction set.
More and more processors will fall into this category in
the future. Intel supports AES-NI since its mircoarchi-
tecture code-named Westmere. AMD announced to sup-
port AES-NI starting with its Bulldozer core; processors
based on this core are going to be released in 2011 [20].
All in all, many, if not most, upcoming x86 CPUs will
support AES-NI.
4 Performance
We present performance measurements running a 64-bit
Linux on an Intel Core i7-620M. The two performance
aspects we evaluated are encryption speed and system
reactivity. The latter may be affected because we halt the
scheduler and run AES atomically.
4.1 Encryption benchmarks
We expected a performance penalty of TRESOR because
of its recomputation of the key schedule for each input
block – a substantial computing overhead compared to
standard implementations which calculate the round keys
only once. As shown in Section 2.3, round key gener-
ation is a heavy operation compared to the rest of the
AES algorithm; and we are running through the entire
key schedule for each 128-bit chunk, even when encrypt-
ing megabytes of data.
To measure the throughput of TRESOR in practice,
we performed several disk encryption benchmarks. For
disk benchmarking we mounted four partitions, one en-
crypted with TRESOR, one encrypted with generic AES,
one encrypted with common AES-NI, and a plain one
that was not encrypted at all. We mounted all of them
with the sync option, meaning that I/O to the ﬁlesys-
tem is done synchronously. We did this to avoid unre-
alistically high speed measurements that arise from disk
caching. Caching would falsify our results because en-
cryption does not take place before the data is actually
going to disk.
8
Key Generic AES AES-NI TRESOR Plain
128
192
256
17.04
16.47
15.77
Table 1: dd throughput (in MB/s)
14.67
14.89
15.04
15.63
15.40
15.92
47.32
Table 1 lists average values over 24 dd runs, each writ-
ing a 400M ﬁle.4 TRESOR-128 is faster than TRESOR-
192 which again is faster than TRESOR-256, because
with an increasing key size, more rounds are performed
(10, 12 and 14, respectively) and thus, more round keys
must be calculated on-the-ﬂy.
The table also shows that TRESOR performs well in
comparison to conventional AES variants: TRESOR is
faster than the generic implementation of AES and even
slightly faster than common AES-NI implementations.
We were surprised by this ourselves and double-checked
the results – once with the AES-NI module shipped with
Linux 2.6.36 and additionally with a self-written vari-
ant. Currently, we have no good explanation for this ef-
fect. One possibility is that TRESOR gains advantage
over other threads due to its atomic sections. Another
possibility is that linear key generation on registers per-
forms generally better than fetching round keys one after
another from RAM.
Generic AES AES-NI TRESOR Plain
7.95
read
write
26.23
Table 2: Postmark benchmarks for AES-256 (in MB/s)
2.54
8.39
2.10
6.92
2.80
9.26
Besides measuring the throughput of dd, we uti-
lized the disk drive benchmarking utility Postmark [19].
Postmark creates, reads, changes, and deletes many
small ﬁles rather than just writing a single large ﬁle.
As shown in Table 2, TRESOR has an advantage over
generic AES and common AES-NI here as well.
Additionally, to measure the exact time needed to en-
crypt a single block, we wrote a kernel module named
tresor-test. Inserting this module, diverse perfor-
mance tests can be run for AES-128, AES-192, and
AES-256. Findings from this module conﬁrm our as-
sumption that TRESOR runs faster than standard AES.
For example, with TRESOR an AES-128 block is en-
crypted in about 440 nanoseconds (ns), while standard
AES needs about 538 ns (but these values ﬂuctuate heav-
ily in practice, by more than 100%, and thus, we consider
disk benchmarks as more reliable).
Overall, TRESOR involves no performance penalty
and the impact of an on-the-ﬂy round key generation is
negligible.
4.2
Interactivity benchmarks
Performing heavy TRESOR operations in background,
the OS reactivity to interactive events may be affected
because TRESOR disables interrupts in order to run en-
cryption atomically.
In a desktop environment, for in-
stance, mouse and keyboard events are raising interrupts
which are now delayed until the end of a TRESOR oper-
ation. Furthermore, automatic scheduling is disabled for
this period.
Hence, to preserve the reactivity of the system, we set
the scope of atomicity to the smallest reasonable unit,
namely to the encryption of a single 128-bit input block.
Between processing two 128-bit blocks, interrupt pro-
cessing and scheduling can take place as usual. Thereby
interactivity is hardly affected because – as mentioned in
the last section – it takes only 500 ns on average to en-
crypt a single block. Assuming it never takes more than
1000 ns, interrupt handling and scheduling can take place
each microsecond if needed. But only delays greater
than 150 milliseconds are perceptible by humans [10]
and Linux scheduling slices are commonly between 50
and 200 milliseconds as well.
Crypto
Generic
AES
Add. Load
None
X
Compile
TRESOR None
Plain
X
Compile
None
X
Compile
26.80
AVG MAX
1.40 34.2
6.73 43.0
64.7
0.93 37.3
6.65 44.3
79.2
0.14 26.2
0.40 23.8
0.74 32.4
26.40
STD
4.96
11.30
30.30
3.99
11.30
30.30
1.51
2.34
3.47
Table 3: Interbench (latencies in ms)
To prove that interactivity is indeed not affected in
practice, we draw upon measurements from the bench-
marking utility Interbench [9]. We used Interbench to
simulate a video player trying to get the CPU 60 times
per second, i.e., simulating 60 fps. Table 3 lists a se-
lection of interactivity benchmarks running on an Intel
Core i7-620M under different loads.5 We disabled all but
the ﬁrst CPU core to get a more convincing test set-up.
As shown by the table, latencies introduced by TRESOR
do not differ much from those introduced by generic
AES: Average latencies are slightly better for TRESOR,
4The underlying series of tests can be found in Appendix A.2.
5Full benchmarks are listed in Appendix A.3.
9
maximum latencies are slightly better for generic AES,
and standard deviations are almost the same.
Overall, the atomic sections introduced with TRESOR
are too short to have any measurable effect to the reac-
tivity of the Linux kernel.
5 Security
Although it performs quite well, the ultimately decisive
factor to employ TRESOR should not be its performance
but its security qualities. Therefore we prove TRESOR’s
resistance against attacks on debug registers and, above
all, attacks on main memory.
5.1 Memory attacks
We have implemented AES in a way that nothing but
the scrambled output block is actively written into main
memory. However, this alone does not guarantee the se-
curity of TRESOR, because sensitive data may be copied
passively into RAM by side effects of the OS or hard-
ware, such as interrupt handling, scheduling, swapping,
ACPI suspend modes, etc. For example, we cannot di-
rectly exclude the possibility that there is a piece of ker-
nel code reading from debug registers in assembly rather
than calling our patched native get debugreg in
C. To minimize this risk, we performed extensive tests
observing the main memory of a TRESOR system at run-
time.
The problem we faced was how to observe main
memory reliably and efﬁciently.
Just reading from
/proc/kcore or /dev/mem in a running Linux sys-
tem was not an option as the reading process itself in-
vokes kernel code which may falsify the result. On the
other hand, performing real attacks on main memory, like
cold boot attacks, to read out what is physically left in
RAM is very time consuming. Thus, we decided to run
TRESOR as guest inside a virtual machine and to exam-
ine its “physical” memory from the host.
As VM we chose Qemu/KVM [11, 2] because it is
lightweight, has a debug console and – last but not least
– is compatible with TRESOR (many other VMs are not;
VirtualBox [25], for instance, does not support AES-NI).
The debug console of Qemu allows to read CPU regis-
ters and to take physical memory dumps in a comfortable
way.
We started to browse the VM memory of an ac-
tive disk encryption system with key recovery tools like
AESKeyFind [15] and Interrogate [7]. As was expected,
these tools successfully reconstructed the key of standard
AES but not that of TRESOR. However, this alone is not
a meaningful result because AES key recovery is com-
monly based on the AES key schedule (since the secret
key itself has no structure; it is just a random bit se-
quence). As shown in Section 2.3, key schedules are not
persistently stored under TRESOR and thus, key recov-
ery must fail – it would even fail if the key actually leaks
to RAM.
Unlike real attackers, we are aware of the secret key.
We took advantage of this knowledge and searched for
the key bit pattern. Overall, we could ﬁnd a bit sequence
matching the key of generic AES but none matching that
of TRESOR. However, even these ﬁndings do not nec-
essarily imply that the key is not present in RAM, be-
cause it could be stored discontinuously. This is not even
unlikely, because inside the CPU it is stored discontinu-
ously as well (in four breakpoint registers, 64-bit each).
Context switching may store each register separately, for
example.
Consequently, we had to perform more meaningful
tests taking fractions of the key into account. And thus,
we sought after the longest match of the key pattern and
its reverse and any parts of those, in little and in big en-
dian. We did not observe any case under TRESOR where
the longest match exceeded three bytes. And matches
of no more than three bytes can be explained purely by
probabilities (as also attested by searching for random bit
sequences instead of real key fractions).
This further raised our conﬁdence that neither the se-
cret key nor any part of it was in RAM – at the time we
took the memory dump. This leads us to the immediately
next problem: How can we ensure that main memory
does not hold any part of the key at other times? In prin-
ciple, this question is impossible to answer fully because
of the intricacies of information leakage. In practice, it is
hardly feasible to put the Linux kernel into all its possible
states and to take a memory dump at the precise moment.
We tried to analyze at least the in our view most rele-
vant states concerning swapping and suspend. Both are
of special interest for TRESOR as they swap CPU reg-
isters into RAM or even further onto disk. We induced
swapping by creating large data structures in RAM. Once
Linux began to swap data onto disk we took a mem-
ory dump and a disk dump and analyzed both with
the methods mentioned before. Parts of the secret key
could neither be traced on disk nor in RAM. (Also for
generic AES, we never found sensitive information on
disk because kernel space memory is not swappable un-
der Linux.)
To examine TRESOR’s behavior for ACPI S3 (sus-
pend to RAM) we performed tests in Qemu and addi-
tionally on real hardware because Qemu fails to wake up
after S3. ACPI S4 (suspend to disk) on the other hand
works just ﬁne under Qemu. Our ﬁndings indicate that
knowledge about the secret key is lost during both sus-
pend modes, because again, neither in RAM nor on disk
we could trace the key. As the CPU is switched off dur-
10
Active AES Generic
normal
Kernel state
Key recovery (AESKeyFind)
Dummy key matches
Real key matches
Longest match of real key (bytes)
no
yes
no
3
normal
TRESOR
swapping
suspend
None
normal
yes
–
yes
32
no
yes*
no
3
*) found in RAM, not on disk
no
yes
no
3
no
–
no
3
Table 4: AES-256 key tracing, an overview
ing suspension, the key is irretrievably lost. We also ver-
iﬁed this by looking into the CPU registers before, dur-
ing, and after suspension. After suspension, the CPU
context is restored completely except for the debug reg-
isters. (Therefore, TRESOR prompts the user to re-enter
the password upon wakeup).
Table 4 summarizes our ﬁndings of
tracing an
AES-256 key in RAM and disk storage. Only using
Linux’ generic implementation of AES, the secret key
can be recovered by AESKeyFind and Interrogate. Us-
ing TRESOR, or no disk encryption system at all, no
key can be recovered. Indeed, we can trace the dummy
key of TRESOR as it is stored in RAM by the Crypto-
API, but the dummy key is of absolutely no importance.
AESKeyFind cannot even recover the dummy key be-
cause no key schedule of it is ever computed or stored
in RAM. The full 256-bit pattern of the real key can
only be traced running generic AES. Under TRESOR,
the longest sequence matching the real key has no more
than three bytes in all kernel states we tested.
Concluding, we searched for the secret AES key with
different methods in different situations and neither the
entire key, nor any parts of it, could ever be traced in
RAM. While this proves that we are successfully keep-
ing the key away from RAM in general, we have no per-
suasive argument that the key never enters RAM. Admit-
tedly, it is unlikely that a piece of code other than context