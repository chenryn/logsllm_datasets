Compromise vulnerable
database servers
B. Compromise vulnerable web and
    database services that allow remote
    operating system command execution.
C. Use weak credentials to access
    systems directly using remote
    management services native to the
    target operating system.
D. Take advantage of publicly available
    and reliable exploits for missing
    software patches to gain a 
    reverse shell.
A. Vulnerable services that 
    were identified during the 
    previous phase
Access remote management
services (SSH, RDP, WMI,
SMB... )
Exploit missing software
patches
Gain initial foothold into
restricted network areas
(Level 1)
Figure 5.1
Phase 2: focused-penetration workflow
87
Understanding phase 2: Focused penetration
means of gaining administrator access to the domain controller (which is usually
pretty well locked down). 
 With this end result in mind, it’s clear that the more systems we can compromise
during this phase, the greater the chances that we’ll find credentials or another way to
access additional systems containing credentials that allow us to access even more sys-
tems (this can go around and around for quite some time) until ultimately we reach
our goal. This is why the previous phase, information gathering, is so important. This
is also why I cautioned you against jumping down the first rabbit hole you find. Sure, it
might take you where you want to go, but it might not. In my experience, this is a
numbers game. You may have an extensive list of vulnerabilities, so attacking them
with a systematic approach will help you stay organized. Begin with web services, work
your way through the remote management interfaces, and finish by exploiting miss-
ing patches.
5.1.1
Deploying backdoor web shells
In this chapter, you’re going to attack two vulnerable web services discovered during
the previous phase. The first server will require you to build a simple web shell appli-
cation and deploy it to the vulnerable target using the native web interface. The sec-
ond server provides a script console that you will use to run OS commands. These two
web services illustrate a method that can be used to compromise many other web-
based applications that are often present on enterprise networks: you first gain access
to the web services management interface and then use built-in functionality to
deploy a backdoor web shell on your target. That backdoor web shell can then be used
to control the host OS.
5.1.2
Accessing remote management services
During the vulnerability-discovery portion of the information-gathering phase, you
often identify default, blank, or easily guessable credentials for OS users. These cre-
dentials can be the easiest route to compromising vulnerable targets because you can
Additional web services found on enterprise networks
The following are a few additional web services that you can search for on Google to
find lots of attack vectors:
 JBoss JMX Console
 JBoss Application Server
 Oracle GlassFish
 phpMyAdmin
 Hadoop HDFS Web UI
 Dell iDRAC
88
CHAPTER 5
Attacking vulnerable web services
use them to log directly into a system using whatever RMI the network administrators
use to manage that same host. Some examples include
 RDP
 SSH
 Windows Management Instrumentation (WMI)
 Server Message Block (SMB)
 Common Internet File System (CIFS)
 Intelligent Platform Management Interface (IPMI)
5.1.3
Exploiting missing software patches
Software exploitation is a favorite topic among newcomers to pentesting. Exploiting
software vulnerabilities is kind of like “magic,” especially when you don’t fully under-
stand the inner workings of an exploit. In chapter 7, I will demonstrate a single
exploit that is widely publicized and extremely accurate and reliable when used
against the correct targets. I’m talking about MS17-010, codenamed Eternal Blue. 
5.2
Gaining an initial foothold
Imagine for a moment that the Hollywood movie heist crew has managed to procure a
set of maintenance keys that grant access specifically to the admin panel of a service
elevator in the target facility. This elevator has many buttons that access different
floors of the building, but there is an electronic keycard reader, and the buttons
require authorization from the reader before taking the elevator car to the requested
floor. The electronic card reader operates independently of the elevator control
panel, and the maintenance keys don’t allow access to tamper with it.
 The heist crew does not have a keycard, but because they can open and manipu-
late the elevator control panel, it’s possible they could simply reroute the circuit to
bypass the keycard reader so the buttons all work when pressed. Or, with a bit of cre-
ativity and some movie magic, they could install a new button on the panel that goes
to whatever floor they choose and does not require keycard access. I like this option
because it leaves the other buttons in the elevator unmodified. Regular users of this
elevator could still access their usual floors, so the modifications to the access panel
could potentially go unnoticed for some time.
Wouldn’t it be better if they obtained a keycard?
Definitely. Modifying the elevator access panel is risky because someone paying
attention would most certainly notice a new button. That doesn’t mean they would
sound the proverbial alarm, but it’s possible nonetheless. 
However, our attackers were not able to obtain a keycard. This is all they had to work
with.
89
Compromising a vulnerable Tomcat server
On a pentest, just like in this scenario, you get what you get, and you make the best of
it. If it helps you sleep better, we could say our attackers modified the elevator access
panel, went to the floor they were after, obtained an elevator keycard, and then
reverted their modifications so future employees wouldn’t notice a change. But to ini-
tially gain access to their target floor, the modification was a necessary risk.
5.3
Compromising a vulnerable Tomcat server
From the perspective of your INPT, the elevator can be thought of as similar to an
Apache Tomcat server. Just as the elevator brings employees (users) to different floors
depending on their keycard authorization, the Tomcat server serves up multiple web
applications that are deployed to different URLs, some of which have their own set of
credentials independent of the Tomcat server. 
 The individual sets of credentials protecting the web applications deployed to the
Tomcat server are like the individual keycards held by employees, which grant access
only to floors that a particular employee is allowed to visit. During the previous phase,
we identified that the Tomcat web management interface could be accessed with
default credentials. 
 These default credentials are like the set of spare keys to the elevator admin panel.
Jeff, the elevator maintenance guy, uses a set of keys to perform his day-to-day tasks,
and he stores them safely in his pants pocket at all times. Unfortunately, he forgot
about the spare set dangling from a hook in the publicly accessible employee break-
room, where our movie villains were able to swipe them without detection. 
 The Tomcat web GUI is exactly like the elevator access panel (OK, maybe not
exactly, but you get the idea), which can be used to deploy a custom web application.
In this case, we’re going to deploy a simple Jakarta Server Pages (JSP) web shell, which
we can use to interact with the host OS on which the Tomcat server is listening. The
JSP shell needs to be packaged in a web application archive (WAR) file before it can
be deployed to the Tomcat server.
Disclaimer
I don’t actually know much about how elevators work. I’m assuming this attack vector
has multiple flaws that wouldn’t bear fruit in the real world. The point of this illustra-
tion is that it could pass for a semi-plausible scenario you might see in a movie, and
it contains concepts that we’ll use in this chapter. 
If you are an elevator technician, or if you’ve spent time hacking elevators and are
offended at the audacious suggestion that this scenario could ever actually work,
then I have written this statement specifically for you in hopes that you’ll accept my
sincere apologies and continue reading the chapter. 
I assure you, the INPT concepts covered here are valid and work in the real world.
90
CHAPTER 5
Attacking vulnerable web services
5.3.1
Creating a malicious WAR file
A WAR file is a single archived (zipped) document containing the entire structure of a
JSP application. To compromise the Tomcat server and deploy a web shell, you have to
write a little JSP code and package it in a WAR file. If this sounds intimidating, don’t
worry—it’s straightforward. Start by running the following command to create a new
directory and name it webshell: 
~$ mkdir webshell
Change into the new directory (cd webshell), and create a file called index.jsp using
your favorite text editor. Type or copy the code from listing 5.1 into the index.jsp file. 
NOTE
You’ll need a working Java Development Kit (JDK) to package your
JSP web shell into a proper WAR file. If you haven’t done so already, run sudo
apt install default-jdk from your terminal to install the latest JDK on
your Ubuntu VM. 
This code produces a simple web shell that can be accessed from a browser and used to
send OS commands to the host on which the Tomcat server is listening. The result of
the command is rendered in your browser. Because of how we interact with this shell,
it is considered a non-interactive shell. I’ll explain more about that in the next section.
 This simple JSP web shell takes in a GET parameter called cmd. The value of cmd is
passed into the Runtime.getRuntime().exec() method and then executed at the OS
level. Whatever the OS returns is then rendered in your browser. This is the most rudi-
mentary example of a non-interactive shell.
"; } 
      } catch(IOException e) { e.printStackTrace(); }
   } 
%>
Listing 5.1
Source code for index.jsp: a simple JSP web shell
Grabs the GET parameter
Passes the 
parameter to 
the runtime 
execution 
method
Command output 
rendered to the browser
91
Compromising a vulnerable Tomcat server
Once you’ve created the index.jsp file, you need to use the jar command to package
the entire webshell directory into a standalone WAR file. You can create the WAR file
with jar cvf ../webshell.war *.
~$ ls -lah
total 12K
drwxr-xr-x  2 royce royce 4.0K Aug 12 12:51 .
drwxr-xr-x 32 royce royce 4.0K Aug 13 12:56 ..
-rw-r--r--  1 royce royce    2 Aug 12 12:51 index.jsp 
~$ jar cvf ../webshell.war *    
added manifest
adding: index.jsp(in = 2) (out= 4)(deflated -100%)
5.3.2
Deploying the WAR file
Now you have a WAR file, which is analogous to the new elevator button from the
movie heist scenario. The next thing you need to do is install it or deploy it (using
Tomcat-speak) to the Tomcat server so you can use it to control the underlying OS
(the elevator). 
 Browse to the Tomcat server on port 8080 (figure 5.2), click the Manager App button,
and log in with the default credentials you previously identified during vulnerability-
discovery. The Capsulecorp Tomcat server is located at 10.0.10.203 on port 8080, and the
credentials are admin/admin.
The first thing to notice is the table displaying the various WAR files already deployed
on this Tomcat server. If you scroll your browser just past that table to the Deploy sec-
tion of the page, you’ll notice Browse and Deploy buttons located under the heading
WAR File to Deploy (figure 5.3). Click the Browse button, select the webshell.war file
from your Ubuntu VM, and click Deploy to deploy the WAR file to the Tomcat server.
Listing 5.2
Creating a WAR file named webshell.war containing index.jsp
This simple WAR file will 
contain only a single page, 
index.jsp.
../ tells the jar command 
to store the WAR up one 
directory.
Tomcat server available on port 8080
Click the Manager App button to log in.
Figure 5.2
An Apache Tomcat server listening on port 8080
92
CHAPTER 5
Attacking vulnerable web services
NOTE
Record this WAR file deployment in your engagement notes. This is a
backdoor that you have installed and that you will need to remove during the
post-engagement cleanup.
5.3.3
Accessing the web shell from a browser
Now that the WAR file is deployed, it appears at the bottom of the table and can be
accessed by either typing in the URL box of your browser or clicking the link in the
first column of the table (figure 5.4). Go ahead and click the link now.
Doing so directs your browser to the base page (in our case, the only page) of the
WAR file, index.jsp. You should see a single input box and a Run button. From here,
you can issue a single OS command, click Run, and see the result of the command
rendered to your browser. 
 For illustrative purposes, run the ipconfig /all command. This is a command
you would typically run in this scenario on an engagement. Yes, it’s true that you
already know the IP address of this target, but ipconfig /all shows additional infor-
mation about the active directory domain (figure 5.5). If this box were dual-homed,
you would also be able to detect that information with this command.
NOTE
On a real engagement, you might not know right away if this is a Win-
dows host, so you should typically run the whoami command first. This com-
mand is recognized on Windows, Linux, and Unix OSs, and the output of the
command can be used to clearly determine what OS your target is running.
In this case, the vulnerable Tomcat server is running Windows, so you’ll use
Windows-based attacks for this system.
Select WAR file, and click Deploy
Figure 5.3
The WAR file Deploy section of the Tomcat manager page
Click to access the web shell.
Figure 5.4
The webshell is deployed and is now accessible from the menu.
93
Compromising a vulnerable Tomcat server
TIP Always check every system you access to see if it’s dual-homed, meaning it
has two or more network cards configured, each with a separate IP address.
These types of systems are often a “bridge” into a new network subnet that
you might not have had access to previously, and now the host you’ve com-
promised can be used as a proxy into that subnet. In the case of the Capsule-
corp Pentest network, there are no dual-homed systems.
Operating system command. Output is 
displayed below.
Figure 5.5
Running OS commands with the web shell
Exercise 5.1: Deploying a malicious WAR file
Using the source code from listing 5.1, create a malicious WAR file and deploy it to
the Apache Tomcat server on the trunks.capsulecorp.local machine. Once it’s
deployed, you should be able to browse to the index.jsp page and run OS commands
like ipconfig /all, as demonstrated in figure 5.5. Issue the command to print the
contents of the C:\ directory.
The answer to this exercise can be found in appendix E.
94
CHAPTER 5
Attacking vulnerable web services
5.4
Interactive vs. non-interactive shells
At this point, the “bad guys” are inside. The job is far from over, though, so no time to
celebrate. They haven’t obtained—let alone escaped with—the crown jewels, but they
are in the target facility and can move freely in some restricted areas. In the case of a
pentest, the access you’ve obtained on the Tomcat server is called getting a shell. This
particular type of shell is considered to be non-interactive. It’s important to make this
distinction between an interactive shell and a non-interactive shell because a non-
interactive shell has a few limitations. 
 The primary limit is that you can’t use a non-interactive shell to execute multi-
staged commands that require you to interact with the program being run from your
command. An example would be running sudo apt install xyz, replacing xyz with
the name of a real package on an Ubuntu system. Running a command like that
would result in the apt program responding and prompting you to type yes or no
before installing the package.
 This type of behavior is not possible using a non-interactive web shell, which means
you need to structure the command in a way that doesn’t require user interaction. In
this example, if you change the command to sudo apt install xyz –y, it works fine.
It’s important to note that not all commands have a -y flag, so you often need to get
creative when using a non-interactive shell, depending on what you’re trying to do.
 Understanding how to structure commands so they don’t require interaction is
another reason why having solid command-line operation skills is essential if you want
to become a successful pentester. Table 5.1 lists a few commands that are safe to run
from a non-interactive shell.
5.5
Upgrading to an interactive shell
Even though you can do a lot with a non-interactive shell, it’s a priority to upgrade to
interactive as soon as you can. One of my favorite approaches, and also one of the
most reliable ways to do this on a Windows target, is to use a popular technique known
as the Sticky Keys backdoor.
Table 5.1
Operating system commands that are safe for non-interactive shells
Purpose
Windows
Linux/UNIX/Mac
IP address information