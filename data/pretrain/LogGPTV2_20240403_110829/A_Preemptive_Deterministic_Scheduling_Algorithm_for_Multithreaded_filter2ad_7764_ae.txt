### 优化后的文本

#### 错误统计
| 类别 | 数量 | 百分比 |
| --- | --- | --- |
| 总错误 | 659 | N/A |
| 已激活错误 | 394 | 7.5% |
| 断言失败 | 6 | 0.28% |
| 显示的错误 | 869 | 9.5% |
| 崩溃故障 | 528 | 10% |
| 挂起 | 5 | 0.23% |
| 验证错误 | 523 | 26% |
| 信号错误 | 429 | 8.3% |
| 挂起 | 5 | 0.23% |
| 灾难性故障 | 961 | 32% |

#### 显示的错误 (cid:1)
- **崩溃故障**
  - SIGNAL: 334 (85%)
  - ASSERT: 21 (5.3%)
  - HANG: 24 (6.1%)
  - VAL ERR: 14 (3.6%)
- **断言失败**: 5
- **挂起**: 24 (6.1%)
- **验证错误**: 14 (3.6%)
- **灾难性故障**: 1 (0.25%)

#### 静默失败违规
- **领导影响**: 2
- **跟随者影响**: N/A
- **灾难性故障**: 1 (0.25%)

注释：
- (cid:0) 错误显示比率（即显示的错误与注入的错误之比）在括号中显示。
- (cid:1) 特定类型错误显示的百分比在括号中显示。

### LSA领导者实验
- **三次灾难性故障** 由LSA领导者使用的Ensemble函数中的错误引起：
  1. 在领导者组内故障和视图模块（Intra）中注入的错误导致选民与其他副本的组成员视图不一致，违反了可靠组通信的属性。
  2. 在领导者连接管理模块（Conn）中注入的错误导致领导者挂起，两个跟随者在其可靠的FIFO广播模块（Mnak）中崩溃。
  3. 在领导者Unsigned模块中注入的错误导致两个跟随者在其Mnak模块中崩溃，选民在其Pt2pt模块中崩溃。

### LSA跟随者实验
- 在目标跟随者的Ensemble外部接收函数（extern rec）中注入的错误导致选民和其他两个副本因控制流数据包头损坏而引发异常。该函数处理Ensemble高层部分（如可靠通信算法）和低层部分（如套接字）之间的交互。

### Ensemble注入实验
- 为了进一步研究两种算法对灾难性故障的敏感性，针对Ensemble的一个特定函数（extern rec，代码大小为1.4K）进行了新的文本错误注入。结果表明，LSA的错误显示比率为43%，PDS为30%；LSA的已激活错误比率为87%，PDS为82%。在大多数灾难性故障中，注入副本引起的错误导致其他副本和/或选民因段错误而崩溃（PDS为25次，LSA为26次）。其余情况下（PDS为16次，LSA为14次），其他副本和/或选民因Ensemble生成的异常（如数据包头损坏）而终止。在大量灾难性故障（PDS为22次，LSA为30次）中，注入副本未崩溃。

### 结论
- **性能和故障分析** 表明：
  1. LSA策略提供了最佳性能（在响应客户端请求的吞吐量和延迟方面），但牺牲了可用性（以抵御错误的能力衡量）。由于LSA依赖于副本间通信通道进行高效的互斥锁调度，因此LSA对底层通信层的静默失败违规更为敏感，导致LSA比PDS有更多灾难性故障。如果最小化停机时间至关重要（例如对于高可用系统），PDS是比LSA更合适的选择。如果性能优先于最小化停机时间，则可以选择LSA而不是PDS。
  2. NPDS策略通过序列化提供正确的执行，消除了多线程的好处，导致其性能不如PDS和LSA策略。虽然我们没有明确评估NPDS的可靠性特征，但我们认为它们与PDS相似，特别是在灾难性故障方面。这是因为这两种算法都不使用副本间通信。

### 参考文献
- [1] M. Cukier et al. AQuA: An adaptive architecture that provides dependable distributed objects. In Proc. of Int’l Symp. on Reliable Distributed Systems, pages 245–253, 1998.
- [2] S. Pleisch and A. Schiper. FATOMAS: A fault-tolerant mobile agent system based on the agent-dependent approach. In Proc. of Int’l Conf. on Dependable Systems and Networks, pages 215–224, 2001.
- [3] G. D. Parrington et al. The design and implementation of Arjuna. Computing Systems, 8(2):255–308, 1995.
- [4] L. E. Moser, P. M. Melliar-Smith, and P. Narasimhan. Consistent object replication in the Eternal system. Theory and Practice of Object Systems, 4(2):81–92, 1998.
- [5] R. Jimenez-Peris, M. Patino-Martinez, and S. Arevalo. Deterministic scheduling for transactional multithreaded replicas. In Proc. of Int’l Symp. on Reliable Distributed Systems, 2000.
- [6] C. Basile et al. Loose synchronization of multithreaded replicas. In Proc. of Int’l Symp. on Reliable Distributed Systems, 2002.
- [7] A. Goldberg et al. Transparent recovery of Mach applications. In Usenix Mach Workshop, pages 169–183, 1990.
- [8] M. Hayden. The Ensemble System. PhD thesis, Dept. of Computer Science, Cornell University, USA, 1997.
- [9] A. Borg et al. Fault tolerance under UNIX. ACM Trans. on Computer Systems, 7(1):1–24, 1989.
- [10] T. C. Bressoud and F. B. Schneider. Hypervisor-based fault tolerance. ACM Trans. on Computer Systems, 14(1):80–107, 1996.
- [11] P. A. Barrett et al. The Delta-4 extra performance architecture (XPA). In FTCS-20, pages 481–488, 1990.
- [12] D. Powell et al. GUARDS: A generic upgradable architecture for real-time dependable systems. IEEE Trans. on Parallel and Distributed Systems, 10(6):580–599, 1999.
- [13] O. Babaoglu and K. Marzullo. Distributed Systems, pages 55–96. Addison-Wesley, 1993.
- [14] E. Elnozahy, D. Johnson, and Y. Wang. A survey of rollback-recovery protocols in message-passing systems. Technical report, Carnegie Mellon University, 1996.
- [15] C. Basile, Z. Kalbarczyk, and R. Iyer. A preemptive deterministic scheduling algorithm for multithreaded replicas. Technical report, University of Illinois at Urbana-Champaign, 2003. http://www.uiuc.edu/(cid:0)cbasile/papers.
- [16] G. Holzmann. The SPIN model checker. IEEE Trans. on Software Engineering, 23(5):279–295, 1997.
- [17] F. Cristian et al. Atomic broadcast: From simple message diffusion to byzantine agreement. Information and Computation, 118(1):158–179, 1995.
- [18] F. B. Schneider. Implementing fault-tolerant services using the state machine approach: A tutorial. ACM Computing Surveys, 22(4):299–319, 1990.
- [19] K. Whisnant et al. An experimental evaluation of the REE SIFT environment for spaceborne applications. In Proc. of Int’l Conf. on Dependable Systems and Networks, pages 585–595, 2002.
- [20] D. Stott et al. Dependability assessment in distributed systems with lightweight fault injectors in NFTAPE. In Proc. of Int’l Computer Performance and Dependability Symposium, 2000.
- [21] E. Fuchs. Validating the fail-silence assumption of the MARS architecture. In Proc. of 6th Dependable Computing for Critical Applications Conference, pages 225–247, 1998.
- [22] H. Madeira and J.G.Silva. Experimental evaluation of the fail-silent behavior in computers without error masking. In Proc. of Int’l Symp. on Fault-Tolerant Computing, pages 350–359, 1994.
- [23] M. Rimen, J. Ohlsson, and J. Torin. On microprocessor error behavior modeling. In Proc. of Int’l Symp. on Fault-Tolerant Computing, 1994.
- [24] F. V. Brasileiro et al. Implementing fail-silent nodes for distributed systems. IEEE Trans. on Computers, 45(11):1226–1238, 1996.
- [25] R. Guerraoui et al. System support for object groups. In ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, 1998.

---

希望这些修改能使文本更加清晰、连贯和专业。如果有任何进一步的需求，请告知我。