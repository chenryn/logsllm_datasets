content of friendship requests. However, observers always have
the (static) knowledge that some friendship request precedes
the establishment of a friendship between UID1 and UID2. This
is made explicit in the bound for friendship requests. We refer
to [12] for details.
We have proved that these conﬁdentiality properties of local
friendship information still hold in CoSMeDis as they are. This
is to be expected (and desired), since local friendship does
not involve communication between nodes. However, remote
friendship does. Hence, we prove an additional property for
CoSMeDis, summarized in Table II. We consider the remote
friends of an arbitrary, but ﬁxed user UID of node Auti, who
is not an observer. Since we assume communication trafﬁc to
be observable, we can’t keep secret that a remote friendship
action occurred and which node it targeted, but we assume
that the secret content is unobservable, namely the type of
remote friendship action (addition or deletion, formalized as
a Boolean ﬂag), as well as who was added or deleted as
a remote friend. Indeed, we verify that this information is
kept secret in CoSMeDis from observers who are not friends
of UID. However, from observing the occurrence of remote
friendship actions and combining it with the static knowledge
that addition and deletion of any given remote friend can only
occur alternatingly (ﬁrst addition, then deletion, then addition
again, and so on), an observer can deduce the existence of
remote friends of UID on any given node Aut j. The overall
property we verify is
(P) A coalition of n groups of users, UIDsk for each Autk,
can learn nothing about the remote friends of the user UID
of Auti beyond the existence of remote friends on any given
node Aut j unless one of UIDsi is friends with UID.
Formally, the bound given in Table II states that it must be
possible to replace the parameters of remote friendship actions
arbitrarily (modulo alternation of addition and deletion). The
bounds for issuer and receiver nodes are symmetric, because
secrets are only generated during communication. Finally, the
trigger makes explicit that the friend list of UID is legitimately
declassiﬁed to local friends of UID (we have only implemented
the listing of friends locally, not remotely, in CoSMeDis).
D. More Details on the Veriﬁcation Technology
Besides the internal automation (“auto” and friends), in
Isabelle there is the possibility to invoke external fully auto-
matic provers via the Sledgehammer tool [55], It differs from
internal automation in that it requires no instrumentation (of
what facts to invoke in the proof, to add to the simpliﬁer,
etc.). Instead, the tool applies a relevance ﬁlter to identify facts
that are likely to be useful for the stated goal; these facts are
translated to ﬁrst-order logic and handed over to the automatic
provers; a possible positive answer from any of the provers
(which also contains the much smaller set of actually used
facts) is translated back into Isabelle/HOL’s logic, where the
original goal is discharged [13, §7].
Sledgehammer’s hassle-free automation scheme was very
handy when porting and strengthening unwinding proofs from
CoSMed to CoSMeDis. We ended up with an average of 4
successful invocations of Sledgehammer per 100 LOC, which
is quite large given the Isar language verbosity. By contrast,
internal automation was sufﬁcient for the more regular pattern
needed for verifying the compositionality conditions.
E. Combining Independent Secret Sources
For simplicity, in this paper we have always considered
the conﬁdentiality of one secret source at a time, e.g., one
given (arbitrary but ﬁxed) post, or the friendship information
between two given users. A legitimate question is therefore
how to deal with multiple sources simultaneously.
E.g., consider the conﬁdentiality of two different posts,
PIDi in Auti and PID j in Aut j. We can instantiate the results
of the paper for each post separately and obtain two security
properties of the distributed system. We can easily combine
these two properties, relying on two key assumptions:
1) The secrets are independent of each other. Indeed, updates
to different posts are completely orthogonal in the system;
there is no interference between different posts.
2) The scheduling of the different secrets is not conﬁden-
tial; e.g., the contents of PIDi and PID j are considered
conﬁdential, but the relative timing of uploads is not.
The ﬁrst assumption guarantees the soundness of our
approach to ﬁrst consider the secrets in isolation, not having to
worry about possible inter-dependencies. The second assump-
tion is important, because it allows us to ignore the scheduling
of secrets—after composition. Before composing the system,
this would not be possible, because scheduling information is
still needed for the composition of traces.
We formalize these assumptions as follows. Let (Pi) and
(P j) be two security properties of the same system, where (Pi)
comprises the observation producing function Oi, the secret
producing function Si, the trigger Ti, and the bound Bi, and
analogously for (P j).
746
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
Table I: Post conﬁdentiality
iff
Sec = psec Post + osec Bool
isSec (σ, a, o, σ(cid:6))
(1) (o = outOK ∧ ∃uid, pst. a = (updatePost, uid, PID, pst)) ∨
(2) open(σ(cid:6)) (cid:10)= open(σ)
PID ∈ postIDs(σ) ∧ admin(σ) ∈ UIDsi ∨ owner(σ, PID) ∈ UIDsi ∨
UIDsi ∩ friendIDs(σ, owner(σ, PID)) (cid:10)= /0 ∨ vis(σ(cid:6), PID) = public
getObs (σ, a, o, σ(cid:6)) = (a, o)
where open(σ)
getSec (σ, a, o, σ(cid:6)) = (psec, pst) in case (1) and (osec, open σ) in case (2)
Obs = Act× Out
B is deﬁned as follows, mutually inductively with another predicate BO:
isObs (σ, a, o, σ(cid:6)) iff userOf(a) ∈ UIDs
iff
B(sl, sl
(cid:6))
pstl (cid:10)= [] → pstl
(cid:6) (cid:10)= []
(pstl), map psec
B (map psec
(cid:6)))
(pstl
BO (map psec
(pstl), map psec
(pstl))
BO(sl, sl
(cid:6))
B (map psec
BO (map psec
(pstl)· (osec, False)· sl, map psec
pstl (cid:10)= [] ←→ pstl
(pstl)· (osec, True)· sl, map psec
(cid:6) (cid:10)= []
(pstl)· (osec, False)· sl
(cid:6))
pstl (cid:10)= [] → last pstl = last pstl
(cid:6))· (osec, True)· sl
(cid:6))
(pstl
(cid:6)
T is vacuously False
Seci = upd (psec Post + osec Bool) + snd Post
isSeci(σ, a, o, σ(cid:6))
iff
For the original
CoSMed
AM
SP
For CoSMeDis
–secret issuer i–
AMi
SPi
AM j
SP j
AM
For CoSMeDis
–other components j–
For CoSMeDis
–entire system–
(1) (o = outOK ∧ ∃uid, pst. a = (updatePost, uid, PID, pst)) ∨
(2) open(σ(cid:6)) (cid:10)= open(σ) ∨
(3) (∃uid, pst, uid
(cid:6), v) ∧ a = (sendPost, uid, nid, PID))
(cid:6), v. o = (pst, uid
(o))
(cid:6))
Ti is vacuously False
(a), purgeOPID
(cid:6))) ∧ corr(sl
(cid:6)) iff B(ﬁlterupd(sl), ﬁlterupd(sl
getSeci(σ, a, o, σ(cid:6)) = upd (psec, pst) in case (1) and (osec, open σ) in case (2) and snd pst in case (3)
Obsi = Act× Out
isObsi (σ, a, o, σ(cid:6)) iff userOf(a) ∈ UIDsi ∨ ∃k. isComi,k(a)
getObsi (σ, a, o, σ(cid:6)) = ( purgeAPID
Bi(sl, sl
Sec j = Post
isSec j (σ, a, o, σ(cid:6)) iff o j = outOK ∧ ∃pst, uid, v. a = (receivePost, NIDi, PID, pst, uid, v)
getSec j (σ, a, o, σ(cid:6)) = pst
Obs j = Act× Out
isObs j (σ, a, o, σ(cid:6)) iff userOf(a) ∈ UIDs j ∨ ∃k. isCom j,k(a)
getObs j (σ, a, o, σ(cid:6)) = (purgeAPID
(cid:6)
(cid:6)) iff length sl = length sl
B j(sl, sl
T j (σ, a, o, σ(cid:6)) iff
(cid:7)
isSec = isSeci
isObsk(trnk)∧ isObsk(cid:6) (trnk(cid:6) )
(cid:7)
isObsk(trnk)
(k, getObsk(trnk), k(cid:6), getObsk(cid:6) (trnk(cid:6) ))
(cid:7)
(k, getObsk(trnk))
⎧⎪⎨
⎪⎩admin(σ(cid:6)) ∈ UIDs j ∨
UIDs j ∩ remoteFriendIDs(σ(cid:6), NIDi, remoteOwner(σ(cid:6), NIDi, PID)) (cid:10)= /0 ∨
remoteVis(σ(cid:6), NIDi, PID) = public
Sec = Seci
Obs = Obs = ∑k∈{1,. . .,n} Obsk + ∑k,k(cid:6)∈{1,. . .,n} Obsk × Obsk(cid:6)
isObs(trn) =
if trn = (k, trnk, k(cid:6), trnk(cid:6) )
if trn = (k, trnk)
if trn = (k, trnk, k(cid:6), trnk(cid:6) )
if trn = (k, trnk)
getSec = getSeci
(a), purgeOPID
getObs(trn) =
(o))
SP
B = Bi
T(trn) =
Tk(trnk)∨ Tk(cid:6) (trnk(cid:6) )
Tk(trnk)
if trn = (k, trnk, k(cid:6), trnk(cid:6) )
if trn = (k, trnk)
Table II: Remote friendship conﬁdentiality
For CoSMeDis
–secret issuer i–
For CoSMeDis
–other components j–
For CoSMeDis
–entire system–
AMi
SPi
AM j
SP j
AM
SP
Seci = NodeID× UserID× Bool
isSeci(σ, a, o, σ(cid:6)) = (o = outOK ∧ ∃uid, nid, st. a = (sendUpdateRFriend, UID, nid, uid, st)∧ uid /∈ UIDsnid)
getSeci(σ, (sendUpdateRFriend, UID, nid, uid, st), o, σ(cid:6)) = (nid, uid, st)
Obsi = Act× Out
isObsi (σ, a, o, σ(cid:6)) iff userOf(a) ∈ UIDsi ∨ ∃k. isComi,k(a)
Bi(sl, sl(cid:6)) iff BC(sl, sl(cid:6))∧ alter(sl(cid:6)), where
• alter(sl(cid:6))
• BC is deﬁned inductively by (1) BC([], []) and (2) BC((nid, uid, st)· sl, (nid, uid(cid:6), st(cid:6))· sl(cid:6)) iff uid(cid:6) /∈ UIDsnid ∧ BC(sl, sl(cid:6))
Ti(σ, a, o, σ(cid:6)) = (∃uid ∈ UIDsi. uid ∈ friendIDs(σ(cid:6), UID))
same as for the issuer, only replacing sendUpdateRFriend actions by receiveUpdateRFriend actions coming from the issuer i
B j = Bi
analogously to the attacker model for the network case of post conﬁdentiality in Table I
B = Bi
states that friendship creation and deletion occurs alternatingly in sl for each remote user, and
getObsi (σ, a, o, σ(cid:6)) = (purgeAUID
T j is vacuously False
(a), purgeOUID
T = Ti
(o))
747
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
We capture the ﬁrst assumption by assuming that the secret
of one security property is observable in the other attacker
model. Formally, the observation function of one property
is assumed to fully determine the secret and the trigger
information of the other, i.e., Oi(tr) = Oi(tr(cid:6)) implies that (1)
S j(tr) = S j(tr(cid:6)) and (2) the trigger T j holds in tr iff it holds in
tr(cid:6); and the same has to hold symmetrically for O j, Si, and Ti.
This means that the variation of the secret Si as required by
(Pi) is possible without interfering with the secret information
of (P j): the latter stays ﬁxed.
The second assumption is formalized by a combined secret
producing function S that does not have the familiar shape
of producing an interleaving of secrets, but
it produces a
pair of secret sequences. Namely, S(t) = (Si(t), S j(t)). This
combination captures the content of both secrets, but not their
scheduling. Consequently, the combined bound is deﬁned as
B((sli, sl j), (sl
(cid:6)
j)) = Bi(sli, sl
(cid:6)
i, sl
i)∧ B j(sl j, sl
(cid:6)
(cid:6)
j).
The combined observation function O is assumed to corre-
spond to an intersection of the observations of (Pi) and (P j),
i.e., either Oi(t) = Oi(t(cid:6)) or O j(t) = O j(t(cid:6)) implies O(t) = O(t).
The proof of the combined security property follows easily
from the assumptions: Given a trace tr with S(tr) = (sli, sl j)
(cid:6)
(cid:6)
j) within B, we ﬁrst
and an alternative secret pair (sl
i, sl
(cid:6)
invoke (Pi) to obtain tr(cid:6) with Si(tr(cid:6)) = sl
i, keeping sl j and T j
(cid:6)
constant, and then invoke (P j) to obtain tr(cid:6)(cid:6) with S j(tr(cid:6)(cid:6)) = sl
j,
(cid:6)
(cid:6)
keeping sli constant such that S(tr(cid:6)(cid:6)) = (sl
j). The combined
i, sl
observation O(tr) remains unchanged in every step.
This proof technique is applicable to arbitrary security
properties, as long as the above assumptions are satisﬁed (and
it is straightforward to lift it from pairs to tuples of multiple
security properties). We have instantiated it in our Isabelle
formalization for the above example in CoSMeDis: two posts
PIDi and PID j in arbitrary network nodes Auti and Aut j. In
order to satisfy the assumptions, we ﬁrst had to strengthen
the observation power of the security property discussed in
the paper. In addition to the actions of observing users, we
declare all actions that potentially contribute to other secret
posts to be observable. This includes updating actions of other
posts, but also trigger-relevant actions, such as the creation
of friends of observers. The proof in Isabelle was automatic:
after extending the observation function, there were hardly any
changes necessary to the existing proof scripts. The original
proof strategy still worked. In order to instantiate the above
combination technique, it was necessary to add the (generic)
infrastructure for the technique itself and a few helper lemmas
for the concrete system, but the proofs were straightforward.
748
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply.