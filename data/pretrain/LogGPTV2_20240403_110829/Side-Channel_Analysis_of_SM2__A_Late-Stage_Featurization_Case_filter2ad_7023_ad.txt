vulnerable to ECDSA-type SCA attacks. For that reason, we explore
and analyze the cryptosystem applying existing cache-timing at-
tack techniques to code paths known for leaking information, and
exploited successfully in the past for ECDSA [11, 65].
For our analysis, we use the Flush+Reload technique [75] paired
with a performance degradation attack [9, 65]. Listing 3 shows code
snippets used to implement both techniques. This combination
of techniques allows us to accurately probe relevant memory ad-
dresses with enough granularity to confirm bit leakage on both
scalar multiplication and modular inversion operations.
Figure 1: SM2DSA latency dependency on the nonce length
on amd64 architecture in OpenSSL 1.1.1-pre3. Top: K-283 bi-
nary curve. Bottom: Recommended SM2 prime curve.
targeting scalar multiplication; see Section 5.1 for our em-
pirical evaluation.
(3) The SM2DSA implementation uses BN_mod_inverse with-
out setting BN_FLG_CONSTTIME, suggesting an SM2DSA ana-
logue for cache timing attacks targeting inversion via BEEA;
see Section 5.2 for our empirical evaluation.
(4) For SM2PKE, in Listing 2 there are no SCA considerations,
suggesting (at least) DPA-style attacks on EC_POINT_mul
during decryption; see Section 6 for our empirical evaluation.
The remainder of this paper is dedicated to evaluating these SCA
leaks, proposing and implementing mitigations (Section 7), and
empirical SCA evaluation of the mitigations (Section 7.3).
4 SM2DSA: REMOTE TIMINGS
We note the lack of scalar padding before calling EC_POINT_mul,
suggesting an SM2DSA analogue of CVE-2011-1945. To evaluate
the impact of this vulnerability, we correlate nonce lengths and the
execution time of signature generations, adopting a process similar
to the one presented by Brumley and Tuveri [21].
We wrote an OpenSSL client application which repeatedly gen-
erates SM2DSA signatures for a given plaintext, under the same
private key. For each generated signature, the program measures
the execution time of the operation (in CPU cycles) and retrieves
the associated nonce by monitoring the PRNG. We repeated the
experiment using both the recommended SM2 prime curve and
the standardized K-283 binary (Koblitz) curve [3], as the library
executes two different code paths for EC_POINT_mul over prime
and binary curves. We then analyzed the captured data to correlate
the timings with the binary logarithm (bit-length) of the nonces.
We ran these experiments on a 4-cores/4-threads Intel Core
i5-6500 CPU (Skylake) running at 3.2GHz, with Enhanced Intel
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 11.4801.4901.5001.5101.5201.5301.5401.5501.560Cumulative probabilityTime (CPU cycles, millions)271 bits272 bits273 bits274 bits275 bits276 bits277 bits278 bits279 bits280 bits281 bits 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 11.0301.0401.0501.0601.0701.0801.0901.1001.110Cumulative probabilityTime (CPU cycles, millions)246 bits247 bits248 bits249 bits250 bits251 bits252 bits253 bits254 bits255 bits256 bits152Side-Channel Analysis of SM2: A Late-Stage Featurization Case Study
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
inputs and previous research exploits some of these variants [4, 8,
65].
During SM2DSA execution, none of the input values has the
flag BN_FLG_CONSTTIME set when entering to the BN_mod_inverse
function, therefore the function takes the default insecure path, cal-
culating the modular inverse of dA +1 through the Binary Extended
Euclidean Algorithm (BEEA). More importantly, this operation exe-
cutes every time a signature is generated with the exact same input
values, therefore an attacker has several opportunities to trace the
BEEA execution on the private key.
Similar to the scalar multiplication case, we identify the low
level operations leaking bits from the input values. In the BEEA
case, this means functions BN_rshift1 and BN_sub. By placing
probes in memory lines in these routines, we are able to trace the
sequence of shift and subtraction operations performed during
modular inversion, leading to partial bit recovery of dA + 1. Using
algebraic methods [7], it is possible to recover a variable amount of
private key LSDs from these sequences. Bottom trace in Figure 2
shows the end of a post-filtered cache-timing trace capturing the
execution of the BEEA during SM2DSA. The trace matches the
sequence 2 shifts, 1 subtract, 1 shift, 1 subtract, 2 shifts, 1 subtract, 1
shift, 1 subtract, 1 shift; obtained from a perfect trace computed by
executing BEEA on the inputs taken from the SM2DSA signature
test, demonstrating private key leakage.
6 SM2PKE: EM ANALYSIS
As discussed in Section 2.1, SM2PKE decryption computes the
shared secret using the receiver’s private key dB and the sender’s
ECDHE public key C1. The point multiplication [dB]C1 can leak
intermediate values which can be exploited using both vertical
attacks [31, 35, 62] and horizontal attacks [10, 34] for key recovery.
To evaluate the side-channel leakage for SM2PKE, we applied
Test Vector Leakage Analysis (TVLA) using Welch’s T-test [41, 67].
We took an approach similar to [28, 61] for ECC, with a reduced
set of test vectors. We divided the test vectors into three different
sets {Si} for i = 1, 2, 3. The sets S1, S2 and S3 contained traces for
fixed key dB and fixed cipher text C1, fixed dB and varying C1, fixed
C1 and varying dB respectively. We performed the tests in pairs,
such that {(S1, S2),(S1, S3)} would fail the T-test if the resulting
confidence threshold satisfies |Cτ| > 4.5. We selected the value Cτ
(a function of number of samples) based upon empirical evidence
from Jaffe et al. [47].
Experimental setup. We performed the experiments on an AM335x
Sitara SoC11 featuring a 32-bit ARM Cortex-A8 embedded on a
BeagleBone Black12 development board. We used the standard Bea-
gleBone Debian distribution (“Wheezy” 7.8) while keeping all the
default configurations intact. For capturing the EM traces, we used a
Langer LF-U5 near-field probe (500kHz to 50MHz) and 30dB Langer
PA-303 low noise amplifier. We positioned the probe head directly
on the SoC, seeking to strengthen the acquisition quality. We pro-
cured the traces using a PicoScope 5244B digital oscilloscope at a
sampling rate of 125 MSamples/sec with a 12-bit ADC resolution.
Figure 3 shows our setup for the EM analysis.
11http://www.ti.com/processors/sitara/arm-cortex-a8/am335x/overview.html
12https://beagleboard.org/black
Figure 2: Partial raw cache-timing traces during SM2DSA.
Top: Scalar multiplication. Bottom: Binary GCD modular in-
version. Both traces reveal partial information on the secret
scalar and the long-term private key, respectively.
5.1 Scalar Multiplication
SM2DSA in OpenSSL performs scalar multiplication operations by
calling the EC_POINT_mul function in SM2_sig_gen @ crypto/-
sm2/sm2_sign.c, which is only a wrapper to the underlying ec_-
wNAF_mul function. The ec_wNAF_mul function is a generic code
path performing scalar multiplication, i.e. [k]G in SM2DSA, by
executing a series of double and add operations based on the wNAF
representation of k. This code path is vulnerable to cache-timing
attacks due to its non constant-time execution, targeted previously
using cache-timing techniques [9, 20, 70, 75]. Generally, the strategy
is to trace the sequence of double and add operations, which leaks
LSDs of k, leading to private key recovery.
Unlike previous attacks, during our analysis we do not probe
memory lines directly used in functions EC_POINT_add and EC_-
POINT_dbl, but instead we focus in low level functions BN_rshift1
and BN_lshift. The BN_rshift1 function is one of several func-
tions called during EC_POINT_add execution and, unlike the rest
of the functions in the routine, BN_rshift1 is a representative
of the add operation. Similarly, BN_lshift is a representative of
the double operation, allowing to identify add and double opera-
tions respectively during scalar multiplication. Therefore, these low
level functions allow accurately detecting when add and double
operations execute. By tracing the sequence of BN_rshift1 and
BN_lshift operations, we are able to determine with high accuracy
the sequence of double and add operations, leaking LSDs of k. Top
trace in Figure 2 shows a post-filtered cache-timing trace of a scalar
multiplication with a random nonce k during SM2DSA. The probes
detect the sequence of curve operations from left to right as follows:
1 double, 1 add, 4 doubles, 1 add, 4 doubles, 1 add, 7 doubles, 1 add,
4 doubles, and 1 add; thus revealing partial information on k.
5.2 Modular Inversion
Modular inversion is a common operation during digital signatures
and in OpenSSL, SM2DSA uses the BN_mod_inverse function for
this purpose. This function executes one of several GCD algorithm
variants. Unfortunately, most of these variants are based on the
Euclidean algorithm which executes in a non constant-time fashion.
The Euclidean algorithm and variants are highly dependent on their
 0 50 100 150 200 250 61000 61500 62000 62500 63000Latency (cycles)Time (samples)double probeadd probe 0 50 100 150 200 250 0 10 20 30 40 50 60Latency (cycles)Time (samples)shift probesubtract probe153ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nicola Tuveri, Sohaib ul Hassan, Cesar Pereida García, and Billy Bob Brumley
Figure 3: Capturing EM traces from the BeagleBone Black
using a Langer probe positioned on the SoC and procured
using the Picoscope USB oscilloscope.
Figure 5: TVLA during SM2PKE decryption. Top: T-test re-
sults between sets S1 and S2 versus sample index; for fixed
vs random k the test fails since many peaks exceed the 4.5
threshold for both sets. Bottom: T-test results between ran-
dom sets R1 and R2 versus sample index; it shows no peaks
exceeding 4.5 since the means are similar due to balanced
and random selection of fixed and random k in both sets.
Figure 4: The filtered EM trace clearly reveals the sequence
of ECC double and add operations during SM2PKE decryp-
tion.
EM acquisition. For the purpose of this analysis, we captured
1500 EM traces for each set (S1, S2, S3) while performing the decryp-
tion operation. We fixed the clock frequency at 1GHz to avoid any
bias in the captured traces. To acquire traces, we initially utilized
the GPIO pin of the board to trigger the oscilloscope. However,
this trigger proved unreliable as it encountered random delays. To
improve this, we applied correlation based matching to locate the
beginning of the trace. As most of the EM signal energy was con-
centrated at much lower frequencies, we also applied a Low Pass
filter with a cut-off frequency at 15MHz.
Due to noise in the traces, we performed additional process-
ing steps. For the envelope detection, we applied a Digital Hilbert
Transform, followed by a Low Pass Filter to smooth out any high
frequency noise. From the sets, we dropped traces containing noise
due to preemptive interrupts and other unwanted signal features.
In the end, we retained a total of 1000 traces per set. Since the T-test
required averaging multiple traces, we aligned the traces at each
point of interest (i.e. ECC operations). Figure 4 shows part of an
actual processed EM trace, depicting a sequence of ECC double and
add operations.
T-test. To validate the results, we divided each set into subsets
{Sia} and {Sib} and performed an independent T-test between sets
{(S1a, Ska)} and {(S1b, Skb)} for k = 2, 3. We performed a further
test by combining an equal number of randomly selected traces
from both {S1} and {Sk} such that the two resulting subsets were
disjoint. A correct T-test for the random sets R1 = {(S1 ∪ Sk)}
and Rk = {(S1 ∪ Sk) − R1} should result in confidence threshold
|Cτ|  4.5
for both tests, roughly at the same points. This demonstrates there
is a strong leak at these points, since we performed both tests on dif-
ferent sets of traces. From the random sets {R1, R2} the confidence
threshold remains |Cτ| < 4.5 which further validates our hypothe-
sis. Similarly, Figure 6 shows the failed T-test for {(S1a, S3a)} and
{(S1b, S3b)}.
7 SCA MITIGATIONS
The attacker effort required to achieve full key recovery using the
previously described leaks is very low. Taking the cache-timing leak
in Section 5.1 as an example, SM2DSA lattice attacks discussed in
Section 2.5 analogous to ECDSA would require roughly a mere 500
signatures with traces, immediately discarding roughly 75% of those
that statistically will not reveal enough information about the LSDs
(i.e. three or more bits are needed in practice for lattice attacks). In
 0 5000 10000 15000 20000 25000 30000DDDADDTime (samples) 0 2 4 6 8 0 5000 10000 15000 20000 25000 30000(S1a, S2a)(S1b, S2b) 0 2 4 6 8 0 5000 10000 15000 20000 25000 30000 0 2 4 6 8 10 12 14 0 5000 10000 15000 20000 25000 30000(S1a, S3a)(S1b, S3b) 0 2 4 6 8 10 12 14 0 5000 10000 15000 20000 25000 30000154Side-Channel Analysis of SM2: A Late-Stage Featurization Case Study
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
this section, we describe our results on mitigating the discovered
leaks. We claim no novelty for the mitigations themselves, only
their application and implementation within the OpenSSL library;
they are standard techniques known since at least the 90s.
We stress that the focus of our mitigation effort is not on SM2 nor
any individual cryptosystem, but rather on the EC module itself, to
provide transparent secure-by-default behavior to cryptosystems at
the architecture level. That is, conceptually it should be completely
reasonable to drop in a cryptosystem implementation like it was
done with SM2DSA or SM2PKE and have it resist SCA, with ab-
solutely no esoteric knowledge of OpenSSL internals that control
SCA features such as constant-time flags.
7.1 Scalar Multiplication: SCA Mitigations
Ladder. While it is indeed feasible to reduce leakage in OpenSSL’s
wNAF scalar multiplication code path [18], tediously straightlining
conditions and making table lookups regular adds significant code