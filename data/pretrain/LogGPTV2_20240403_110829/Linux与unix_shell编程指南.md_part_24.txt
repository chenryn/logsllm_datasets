脚本将重设$ 1特殊变量为一更有意义的名字。即D I R E C TO RY。这里需测试目录是否为空，如
果目录为空，ls -A将返回空，然后对此返回一信息。
也可以使用下面的脚本替代上面的例子并产生同样的结果。
18.3.14 null：命令用法
到目前为止，条件测试已经讲完了t h e n和e l s e部分，有时也许使用者并不关心条件为真或
为假。
不幸的是i f语句各部分不能为空—一些语句已经可以这样做。为解决此问题， s h e l l提供
了：空命令。空命令永远为真（也正是预想的那样）。回到前面的例子，如果目录为空，可以
只在t h e n部分加入命令。
加入java编程群：524621833
168
第四部分 基础s h e l l编程
下载
18.3.15 测试目录创建结果
现在继续讨论目录，下面的脚本接受一个参数，并用之创建目录，然后参数被传入命令
行，重设给变量D I R E C TO RY，最后测试变量是否为空。
if ["$DIRECTORY"=""]
也可以用
if[$# -lt 1]
来进行更普遍的参数测试。
如果字符串为空，返回一可用信息，脚本退出。如果目录已经存在，脚本从头至尾走一
遍，什么也没做。
创建前加入提示信息，如果键入Y或y，则创建目录，否则使用空命令表示不采取任何动作。
使用最后命令状态测试创建是否成功执行，如果失败，返回相应信息。
加入java编程群：524621833
169
第18章 控制流结构
下载
执行上述脚本，显示：
18.3.16 另一个拷贝实例
在另一个拷贝实例中，脚本传入两个参数（应该包含文件名），系统命令c p将$ 1拷入$ 2，
输出至/ d e v / n u l l。如果命令成功，则仍使用空命令并且不采取任何动作。
另一方面，如果失败，在脚本退出前要获知此信息。
脚本运行，没有拷贝错误：
脚本运行带有拷贝错误：
下面的脚本用s o r t命令将文件a c c o u n t s . q t r分类，并输出至系统垃圾堆。没人愿意观察屏幕
上3 0 0行的分类页。成功之后不采取任何动作。如果失败，通知用户。
18.3.17 多个if语句
可能有时要嵌入i f语句。为此需注意i f和f i的相应匹配使用。
18.3.18 测试和设置环境变量
前面已经举例说明了如何测试环境变量E D I TO R是否被设置。现在如果未设置，则进一步
为其赋值，脚本如下：
加入java编程群：524621833
170
第四部分 基础s h e l l编程
下载
脚本工作方式如下：首先检查是否设置了该变量，如果已经赋值，输出信息提示使用 v i作
为缺省编辑器。v i被设置为编辑器，然后脚本退出。
如果未赋值，则提示用户，询问其是否要设置该值。检验用户输入是否为大写或小写 y，
输入为其他值时，脚本退出。
如果输入Y或y，再提示输入编辑类型。使用 $ E D I TO R =“”测试用户是否未赋值和未点
击r e t u r n键。一种更有效的方法是使用 -z $EDITO R方法，本文应用了这两种方法。如果测试
失败，返回信息到屏幕，即使用v i做缺省编辑器，因而E D I TO R赋值为v i。
如果用户输入了一个名字到变量E D I TO R，则使用它作为编辑器并马上让其起作用，即导
出变量E D I TO R。
18.3.19 检测最后命令状态
前面将目录名传入脚本创建了一个目录，脚本然后提示用户是否应创建目录。下面的例
子创建一个目录，并从当前目录将所有 * . t x t文件拷入新目录。但是这段脚本中用最后状态命
令检测了每一个脚本是否成功执行。如果命令失败则通知用户。
加入java编程群：524621833
171
第18章 控制流结构
下载
18.3.20 增加和检测整数值
下面的例子进行数值测试。脚本包含了一个计数集，用户将其赋予一个新值就可改变它。
脚本然后将当前值1 0 0加入一个新值。工作流程如下：
用户输入一个新值改变其值，如果键入回车键，则不改变它，打印当前值，脚本退出。
如果用户用y或Y响应新值，将提示用户输入增量。如果键入回车键，原值仍未变。键入
一个增量，首先测试是否为数字，如果是，加入计数 C O U N TO R中，最后显示新值。
加入java编程群：524621833
172
第四部分 基础s h e l l编程
下载
运行结果如下：
18.3.21 简单的安全登录脚本
以下是用户登录时启动应用前加入相应安全限制功能的基本框架。首先提示输入用户名
和密码，如果用户名和密码均匹配脚本中相应字符串，用户登录成功，否则用户退出。
脚本首先设置变量为假—总是假定用户输入错误， s t t y当前设置被保存，以便隐藏
p a s s w d域中字符，然后重新保存s t t y设置。
如果用户I D和密码正确（密码是m a y d a y），明亮I N VA L I D _ U S E R和I N VA L I D _ PA S S W D设
置为n o表示有效用户或密码，然后执行测试，如果两个变量其中之一为 y e s，缺省情况下，脚
本退出用户。
键入有效的I D和密码，用户将允许进入。这是一种登录脚本的基本框架。下面的例子中
有效用户I D为d a v e或p a u l i n e。
加入java编程群：524621833
173
第18章 控制流结构
下载
如果运行上述脚本并给一个无效用户：
现在给出正确的用户和密码：
18.3.22 elif用法
if then else语句的e l i f部分用于测试两个以上的条件。
18.3.23 使用elif进行多条件检测
使用一个简单的例子，测试输入脚本的用户名。脚本首先测试是否输入一个名字，如果
没有，则什么也不做。如果输入了，则用 e l i f测试是否匹配r o o t、l o u i s e或d a v e，如果不匹配其
中任何一个，则打印该名字，通知用户不是r o o t、l o u i s e或d a v e。
加入java编程群：524621833
174
第四部分 基础s h e l l编程
下载
运行上述脚本，给出不同信息，得结果如下：
18.3.24 多文件位置检测
假定要定位一个用户登录文件，已知此文件在/ u s r / o p t s / a u d i t / l o g s或/ u s r / l o c a l / a u d i t / l o g s中，
具体由其安装人决定。在定位此文件前，首先确保文件可读，此即脚本测试部分。如果未找
到文件或文件不可读，则返回错误信息。脚本如下：
加入java编程群：524621833
175
第18章 控制流结构
下载
运行上面脚本，如果文件在上述两个目录之一中并且可读，将可以找到它。如果不是，
返回错误并退出，下面结果失败，因为假想的文件并不存在。
18.4 case语句
c a s e语句为多选择语句。可以用c a s e语句匹配一个值与一个模式，如果匹配成功，执行相
匹配的命令。c a s e语句格式如下：
case 值 i n
模式1 }
命令1
. . .
; ;
模式2）
命令2
. . .
；；
e s a c
c a s e工作方式如上所示。取值后面必须为单词 i n，每一模式必须以右括号结束。取值可以
为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至；；。
取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续
其他模式。如果无一匹配模式，使用星号*捕获该值，再接受其他输入。
模式部分可能包括元字符，与在命令行文件扩展名例子中使用过的匹配模式类型相同，
即：
* 任意字符。
？ 任意单字符。
[..] 类或范围中任意字符。
下面举例说明。
18.4.1 简单的case语句
下面的脚本提示输入1到5，输入数字传入c a s e语句，变量A N S设置为c a s e取值测试变量
A N S，A N 将S与每一模式进行比较。
如果匹配成功，则执行模式里面的命令直至；;，这里只反馈非用户数字选择的信息，然
后c a s e退出，因为匹配已找到。
进程在c a s e语句后仍可继续执行。
如果匹配未找到，则使用*模式捕获此情况，这里执行错误信息输出。
加入java编程群：524621833
176
第四部分 基础s h e l l编程
下载
给出不同输入，运行此脚本。
使用模式*捕获范围之外的取值情况。
18.4.2 对匹配模式使用|
使用c a s e时，也可以指定“|”符号作为或命令，例如v t 1 0 0 | v t 1 0 2匹配模式v t 1 0 0或v t 1 0 2。
下面的例子中，要求用户输入终端类型。如果输入为v t 1 0 0或v t 1 0 2，将匹配模式‘v t 1 0 0 | v t 1 0 2’，
执行命令是设置T E R M变量为v t 1 。0 如0果用户输入与模式不匹配， *用来捕获输入，其中命
令为将T E R M设置为v t 1 0 0。最后在c a s e语句外，导出T E R M变量。由于使用*模式匹配，无论
用户输入什么，T E R M都将有一个有效的终端类型值。
加入java编程群：524621833
177
第18章 控制流结构
下载
运行脚本，输入一无效终端类型，
如果输入一正确的终端类型，
无论怎样，一个有效的终端类型被赋予用户。
18.4.3 提示键入y或n
c a s e的一个有效用法是提示用户响应以决定是否继续进程。这里提示输入 y以继续处理，n
退出。如果用户输入Y、y或y e s，处理继续执行c a s e语句后面部分。如果用户输入N、n或n o或
其他响应，用户退出脚本。
运行脚本，输入无效响应，得结果：
给出有效响应：
18.4.4 case与命令参数传递
可以使用c a s e控制到脚本的参数传递。
下面脚本中，测试特定变量$ #，它包含传递的参数个数，如果不等于 1，退出并显示可用
信息。
加入java编程群：524621833
178
第四部分 基础s h e l l编程
下载
然后c a s e语句捕获下列参数：p a s s w d、s t a r t、s t o p或h e l p，相对于每一种匹配模式执行进
一步处理脚本。如果均不匹配，显示可用信息到标准错误输出。
运行脚本，输入无效参数。
输入有效参数，结果为：
18.4.5 捕获输入并执行空命令
不一定要在匹配模式后加入命令，如果你原本不想做什么，只是在进一步处理前过滤出
意外响应，这样做是一种好办法。
如果要运行对应于一个会计部门的帐目报表，必须首先在决定运行报表的类型前确认用
户输入一个有效的部门号，匹配所有可能值，其他值无效。用 c a s e可以很容易实现上述功能。
下面的脚本中如果用户输入部门号不是2 3 4、4 5 3、6 5 5或4 5 4，用户退出并返回可用信息。
一旦响应了用户的有效部门号，脚本应用同样的技术取得报表类型，在 c a s e语句末尾显示有
效的部门号和报表类型。脚本如下：
加入java编程群：524621833