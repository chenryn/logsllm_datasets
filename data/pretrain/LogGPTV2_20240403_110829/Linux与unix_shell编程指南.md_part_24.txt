### 优化后的文本

#### 18.3.14 `null`：命令用法
到目前为止，我们已经讨论了条件测试中的`then`和`else`部分。有时用户可能并不关心条件是否为真或假。然而，`if`语句的各部分不能为空。为了解决这个问题，Shell提供了一个空命令`:`，该命令总是返回真（状态码0）。例如，在前面的例子中，如果目录为空，可以在`then`部分使用空命令。

#### 18.3.15 测试目录创建结果
接下来，我们将继续讨论目录操作。以下脚本接受一个参数，并尝试创建一个目录。然后，它将参数传递给变量`DIRECTORY`并测试该变量是否为空。

```bash
if [ -z "$DIRECTORY" ]; then
    echo "Directory is empty or not set."
    exit 1
fi
```

也可以使用以下方式来检查参数数量：

```bash
if [ $# -lt 1 ]; then
    echo "No directory specified."
    exit 1
fi
```

如果目录为空，脚本将输出一条信息并退出。如果目录已存在，脚本将继续执行但不会做任何事情。在创建目录之前，脚本会提示用户确认。如果用户输入`Y`或`y`，则创建目录；否则，使用空命令表示不采取任何动作。最后，脚本会检查创建操作是否成功，并在失败时返回相应的错误信息。

#### 18.3.16 另一个拷贝实例
在这个例子中，脚本接受两个参数（文件名），并使用系统命令`cp`将第一个参数的内容复制到第二个参数指定的位置。输出被重定向到`/dev/null`以隐藏输出。如果命令成功，则不采取任何动作；如果失败，则输出错误信息。

```bash
if cp "$1" "$2" > /dev/null; then
    :
else
    echo "Copy failed."
    exit 1
fi
```

另一个例子是使用`sort`命令对文件`accounts.qtr`进行排序，并将输出重定向到`/dev/null`。如果成功，不采取任何动作；如果失败，通知用户。

#### 18.3.17 多个`if`语句
有时需要嵌套`if`语句。在这种情况下，需要注意`if`和`fi`的匹配使用。

#### 18.3.18 测试和设置环境变量
前面已经介绍了如何测试环境变量`EDITOR`是否已设置。以下脚本进一步演示了如何在未设置时为其赋值。

```bash
if [ -z "$EDITOR" ]; then
    echo "Editor not set. Using vi as the default editor."
    EDITOR="vi"
    export EDITOR
else
    echo "Using $EDITOR as the default editor."
fi
```

如果未设置`EDITOR`，脚本会提示用户是否要设置该变量。如果用户输入`Y`或`y`，则提示输入编辑器类型。如果用户未输入任何内容，脚本将使用`vi`作为默认编辑器，并导出`EDITOR`变量。

#### 18.3.19 检测最后命令状态
前面的例子展示了如何将目录名传递给脚本以创建目录，并提示用户确认是否创建。以下示例创建一个目录，并从当前目录将所有`.txt`文件复制到新目录。每个命令的状态都会被检测，如果失败则通知用户。

```bash
mkdir new_directory
if [ $? -ne 0 ]; then
    echo "Failed to create directory."
    exit 1
fi

cp *.txt new_directory
if [ $? -ne 0 ]; then
    echo "Failed to copy files."
    exit 1
fi
```

#### 18.3.20 增加和检测整数值
以下示例演示了如何进行数值测试。脚本包含一个计数器`COUNTER`，用户可以输入一个新的值来改变它。脚本将当前值100与新值相加。

```bash
read -p "Enter a new value (or press Enter to keep 100): " new_value
if [ -z "$new_value" ]; then
    echo "Current value: 100"
    exit 0
fi

if [[ $new_value =~ ^-?[0-9]+$ ]]; then
    COUNTER=$((100 + new_value))
    echo "New value: $COUNTER"
else
    echo "Invalid input. Please enter a number."
    exit 1
fi
```

#### 18.3.21 简单的安全登录脚本
以下是一个基本的安全登录脚本框架。脚本提示用户输入用户名和密码，如果匹配成功，则允许用户登录；否则，用户退出。

```bash
read -p "Enter username: " username
read -s -p "Enter password: " password
echo

if [ "$username" = "dave" ] && [ "$password" = "mayday" ]; then
    echo "Login successful."
else
    echo "Invalid username or password."
    exit 1
fi
```

#### 18.3.22 `elif`用法
`if-then-else`语句中的`elif`部分用于测试多个条件。

#### 18.3.23 使用`elif`进行多条件检测
以下示例演示了如何使用`elif`来测试输入的用户名。脚本首先测试是否输入了名字，如果没有，则不采取任何动作。如果输入了名字，则使用`elif`测试是否匹配`root`、`louise`或`dave`。如果不匹配任何一个，则打印该名字并通知用户。

```bash
read -p "Enter a username: " username

if [ -z "$username" ]; then
    :
elif [ "$username" = "root" ] || [ "$username" = "louise" ] || [ "$username" = "dave" ]; then
    echo "Valid user: $username"
else
    echo "User $username is not root, louise, or dave."
fi
```

#### 18.3.24 多文件位置检测
假设需要定位一个用户登录文件，已知此文件可能位于`/usr/opt/audit/logs`或`/usr/local/audit/logs`中。以下脚本首先确保文件可读，如果未找到文件或文件不可读，则返回错误信息。

```bash
if [ -r /usr/opt/audit/logs/login.log ]; then
    LOGFILE="/usr/opt/audit/logs/login.log"
elif [ -r /usr/local/audit/logs/login.log ]; then
    LOGFILE="/usr/local/audit/logs/login.log"
else
    echo "Log file not found or not readable."
    exit 1
fi

echo "Log file found at: $LOGFILE"
```

#### 18.4 `case`语句
`case`语句是一种多选择语句，可以用来匹配一个值与一个模式。如果匹配成功，则执行相应的命令。`case`语句的格式如下：

```bash
case 值 in
    模式1)
        命令1
        ;;
    模式2)
        命令2
        ;;
    *)
        默认命令
        ;;
esac
```

#### 18.4.1 简单的`case`语句
以下示例提示用户输入1到5之间的数字，并根据输入执行相应的命令。

```bash
read -p "Enter a number between 1 and 5: " num

case $num in
    1|2|3|4|5)
        echo "You entered: $num"
        ;;
    *)
        echo "Invalid input. Please enter a number between 1 and 5."
        ;;
esac
```

#### 18.4.2 对匹配模式使用`|`
在`case`语句中，可以使用`|`符号作为“或”操作符。例如，`vt100 | vt102`可以匹配`vt100`或`vt102`。

```bash
read -p "Enter terminal type (vt100 or vt102): " term

case $term in
    vt100|vt102)
        TERM="vt100"
        ;;
    *)
        TERM="vt100"
        ;;
esac

export TERM
echo "TERM set to: $TERM"
```

#### 18.4.3 提示键入`y`或`n`
`case`语句的一个有效用法是提示用户响应以决定是否继续进程。以下示例提示用户输入`y`以继续处理，输入`n`退出。

```bash
read -p "Do you want to continue? (y/n): " response

case $response in
    y|Y|yes|YES)
        echo "Continuing..."
        ;;
    n|N|no|NO)
        echo "Exiting..."
        exit 0
        ;;
    *)
        echo "Invalid input. Exiting..."
        exit 1
        ;;
esac
```

#### 18.4.4 `case`与命令参数传递
可以使用`case`语句来控制传递给脚本的参数。以下示例测试特定变量`$#`，如果参数数量不等于1，则退出并显示帮助信息。

```bash
if [ $# -ne 1 ]; then
    echo "Usage: $0 <command>"
    exit 1
fi

case $1 in
    passwd)
        echo "Changing password..."
        ;;
    start)
        echo "Starting service..."
        ;;
    stop)
        echo "Stopping service..."
        ;;
    help)
        echo "Available commands: passwd, start, stop, help"
        ;;
    *)
        echo "Invalid command. Available commands: passwd, start, stop, help"
        ;;
esac
```

#### 18.4.5 捕获输入并执行空命令
在某些情况下，你可能不需要在匹配模式后执行任何命令，只是过滤掉意外的响应。例如，如果要运行会计部门的账目报表，必须首先确认用户输入了一个有效的部门号。以下示例展示了如何实现这一点。

```bash
read -p "Enter department number (234, 453, 655, 454): " dept

case $dept in
    234|453|655|454)
        ;;
    *)
        echo "Invalid department number. Exiting..."
        exit 1
        ;;
esac

read -p "Enter report type (summary, detail): " report_type

case $report_type in
    summary|detail)
        ;;
    *)
        echo "Invalid report type. Exiting..."
        exit 1
        ;;
esac

echo "Department: $dept, Report Type: $report_type"
```

希望这些优化后的文本能够更清晰、连贯和专业地传达所需的信息。如果有任何进一步的需求，请随时告知。