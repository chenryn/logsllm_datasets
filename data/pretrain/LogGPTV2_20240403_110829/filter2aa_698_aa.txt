Analyzing and Counter-Attacking  
Attacker-Implanted Devices  
Case Study:  
Pwn Plug 
Robert Wesley McGrew 
PI:EMAIL 
Introduction 
In order to bypass restrictions on inbound network traffic, an attacker might find it 
desirable to “implant” a hardware device in the target network that would allow that 
attacker to launch attacks from within the target network. Such devices can be fully 
functional computers, yet small enough to be hidden and disguised within a target 
environment. One device, popular with penetration testers (and with the same feature-
set as would be useful for a malicious attacker), is the Pwn Plug, from Pwnie Express. 
The Pwn Plug has the initial appearance of a printer or laptop power supply, but 
contains a functional computer running a small, but full-featured operating system 
designed for attacking systems, gathering information, and connecting back to the 
attacker to report its results. 
When an attacker-implanted device is discovered in an organization, that organization 
may wish to perform a forensic analysis of the device in order to determine what 
systems it has compromised, what information has been gathered, and any information 
that can help identify the attacker. When a device has been located on the network, it 
could also be the target of a counterattack, leveraging vulnerabilities in the device itself 
in order to compromise it and turn it into a system for monitoring the attacker. If the 
attacker were to retrieve the device for later use in another situation, the same 
monitoring software would follow. 
Vulnerabilities in attacker-implanted devices also have implications for penetration 
testers that are using the devices in authorized situations. If a third-party attacker is 
able to compromise the hardware and software tools being used by a penetration tester, 
then both the penetration tester and the tester’s client have been effectively 
compromised. An attacker’s actions may be disregarded by the client as part of the test, 
or the attacker may choose to simply monitor and manipulate the results of the tester’s 
activities in order to gather information about a client’s security posture (while 
simultaneously denying to the penetration tester). If a penetration tester using a 
compromised device does not sufficiently wipe it between engagements, then multiple 
clients may be compromised. 
In this research, we have used the most popular commercially/publicly-available 
implantable device, the Pwn Plug, as a case study for the above scenarios. We have 
documented an appropriate procedure for creating a forensic image of the Pwn Plug 
with a minimal impact on the device itself, as well as some information on where to 
focus an examination. We have also identified a number of vulnerabilities in the 
commercial Pwn Plug unit that, when combined, allow for remote compromise in a 
counter-attack or third-party attack.  
Finally, we present a piece of software developed for turning attacker-implanted 
devices into attacker-monitoring devices, essentially changing the devices into attacker-
owned honeypot systems. 
Basic Hardware Information 
An important step in being able to image and analyze the Pwn Plug at a low-level is to 
identify the steps needed to restore a Pwn Plug from scratch, the boot process, what 
storage devices are available, and how they are accessed. 
The Pwn Plug is SheevaPlug (also known as Plug Computer Basic) hardware with an 
operating system “flashed” to the storage that is suitable for offensive operations. 
Development and hardware information for the SheevaPlug hardware is available at 
the following location: 
http://www.plugcomputer.org/downloads/plug-basic/ 
The Pwn Plug has an ARM5 processor, 512 megabytes of RAM, 512 megabytes of 
internal NAND storage, an ethernet adaptor, a mini-USB serial/JTAG port, and an SD 
card slot. Information specific to the Pwn Plug where its OS varies from other 
SheevaPlugs can be found at: 
http://pwnieexpress.com 
Forensic Acquisition 
The primary storage used by the Pwn Plug OS is the internal NAND, which is the focus 
of this acquisition procedure. All other storage that might be attached to a seized Pwn 
Plug (SD or USB) should be trivial to acquire an image of, with current tools and 
procedures designed for removable media. 
The Pwn Plug documentation contains a procedure for backing up and restoring the 
filesystem using a recursive copy, however this requires access to the command-line 
interface of the Linux install contained on the Pwn Plug. Presumably, an attacker will 
have set this to something other than the default in most cases, so a procedure is 
required that does not require this level of access. The filesystem is not encrypted, so a 
procedure that involves booting an analyst-controlled copy of Linux from USB would 
be suitable for imaging the Pwn Plug Linux installation to USB storage, bypassing the 
attacker-controlled password or other controls. After copying the image to USB, it can 
be loaded onto an analyst’s workstation for convenient examination (compared to being 
limited to the set of tools available in an embedded Linux distribution). 
The following steps will be described in the next few sections, which will result in the 
Pwn Plug’s root filesystem being imaged to a file on a USB drive for further analysis. 
• Create bootable USB 
• Get U-Boot prompt 
• Save U-Boot configuration 
• Boot USB 
• Copying Filesystem to USB 
• Shutdown 
All of the following instructions were performed on a Macbook Pro 15” Retina, running 
OS X Version 10.8.2, with virtual machines running Microsoft Windows 7 and Ubuntu 
Linux 12.10.  
Creating Bootable USB 
Began by creating a USB drive with a Debian Linux installation on it, compatible with 
the Pwn Plug hardware. Instructions for preparing the drive were adapted from: 
http://www.cyrius.com/debian/kirkwood/sheevaplug/unpack.html 
The USB drive was partitioned using the gparted tool for Linux, with partitions to be 
formatted for boot, root, and swap partitions for the Debian installation. An additional 
partition was added and formatted as FAT32 to store acquired images of Pwn Plug 
devices. For the 4 gigabyte USB drive used in testing, the following partition scheme 
resulted: 
   Device Boot      Start         End      Blocks   Id  System 
/dev/sdb1            2048      110591       54272   83  Linux 
/dev/sdb2          110592     1683455      786432   83  Linux 
/dev/sdb3         1683456     2011135      163840   82  Linux swap / Solaris 
/dev/sdb4         2011136     7669759     2829312    b  W95 FAT32 
The Linux partitions were then formatted with the following commands 
sudo mkfs.ext2 -I 128 /dev/sdb1 
sudo mkfs.ext2 /dev/sdb2 
sudo mkswap /dev/sdb3 
Next, a mount-point was created for the Linux filesystems, and the Linux partitions of 
the USB drive were mounted into that mount-point: 
mkdir mnt 
sudo mount /dev/sdb2 mnt/ 
sudo mkdir mnt/boot 
sudo mount /dev/sdb1 mnt/boot/ 
The base installation of Debian for SheevaPlug devices was then acquired, and 
signatures checked: 
wget http://people.debian.org/~tbm/sheevaplug/lenny/base.tar.bz2 
wget http://people.debian.org/~tbm/sheevaplug/lenny/base.tar.bz2.asc 
gpg --keyserver subkeys.pgp.net --recv-key 68FD549F 
gpg --verify base.tar.bz2.asc base.tar.bz2 
Next, the base installtion was extracted onto the USB drive: 
cd mnt 
sudo tar -xjvf ../base.tar.bz2 
After the extraction was complete, the device was unmounted: 
cd .. 
sudo umount mnt/boot 
sudo umount mnt 
With the Pwn Plug-bootable USB drive created, an image of it was created to facilitate 
quicker and easier deployment of similar USB drives in the future. 
Getting to the U-Boot prompt 
To get access to the Pwn Plug’s boot-loader, in order to boot it from USB, the Linux VM 
was set up to connect to the Pwn Plug’s serial console (over mini-USB) with the 
following commands adapted from the Pwn Plug documentation (though modified to 
include minicom, as screen was found to be unreliable): 
sudo modprobe usbserial 
sudo modprobe ftdi_sio vendor=0x9e88 product=0x9e8f 
sudo apt-get install minicom 
The default settings for minicom were correct, apart from needing to change the serial 
port to /dev/ttyUSB0. With the mini-USB cable connected, power should be turned 
on to the Pwn Plug, and immediately afterwards, minicom should be launched with its 
saved configuration to attempt to connect. If you are able to hit the return key a few 
times and reliably get the Marvell>> prompt without corruption or additional 
commands showing on the screen, then you have connected successfully. Occasionally, 
it seems to take multiple launches of minicom, or even a reboot of the Pwn Plug to 
successfully connect. 
Dumping and Saving the Existing U-Boot Configuration 
The following command should print the current environment of U-Boot on the Pwn 
Plug: 
env print 
The output of this command should be saved in order to restore the original 
configuration, in case changes are made in the analysis process. The output for the Pwn 
Plug used in this testing is included as original_uboot_env.txt (with MAC 
address obscured). 
Booting the Pwn Plug from USB 
At this point the bootable Debian USB drive can be plugged into the Pwn Plug, and the 
following command will start the USB system and help you verify that a storage device 
can be found: 
usb start 
The bootargs variable should then be set appropriately for USB booting: 
setenv bootargs console=ttyS0,115200 'root=/dev/sda2 rootdelay=10' 
Next, the uImage and uInitrd of the bootable Debian should be loaded into RAM: 
ext2load usb 0:1 0x800000 /uImage 
ext2load usb 0:1 0x1100000 /uInitrd 
Finally, the booting process can begin by issuing the following command: 
bootm 0x800000 0x1100000 
If this is successfull, the Linux boot process should begin, finishing with a debian 
login prompt. 
Acquiring the NAND to USB 
Log into the Debian distribution with username root and password root. Next, 
mount the FAT32 partition to a directory: 
mkdir target 
mount /dev/sda4 target 
Then, look at available MTD devices with the cat /proc/mtd command. This is a list 
of what is contained in internal NAND memory.  The following is the output for the test 
Pwn Plug: 
dev:    size   erasesize  name 
mtd0: 00100000 00020000 "u-boot" 
mtd1: 00400000 00020000 "uImage" 
mtd2: 1fb00000 00020000 "root" 
Next, to acquire an image of the root filesystem: 
cd target 
dd if=/dev/mtdblock2 of=root.img 
Finally, unmount the target FAT32 partition and shutdown the bootable USB Debian: 
cd .. 
umount target 
shutdown -h now 
Once the message “System halted.” appears, you may remove the USB drive and 
unplug the Pwn Plug. Since no modifications to boot parameters were saved in U-Boot, 
the next time the Pwn Plug boots without the serial cable attached, it should boot 
normally into the Pwn Plug OS. 
Forensic Analysis 
Extracting the Filesystem 
The Pwn Plug root filesystem is a UBIFS image. Due to compression and large block 
sizes, it is difficult to recover previously deleted information from UBIFS images, and 
there currently exists no readily available forensic tools for analyzing UBIFS images. 
The current best practice for analyzing these images is to mount them into a Linux 
filesystem, and extract the files at the logical level using a recursive copy. 
The following instructions for extracting the directory structure from a Pwn Plug UBIFS 
image on Ubuntu Linux 12.10 were adapted from general instructions on UBIFS 
extraction located at: 
http://www.slatedroid.com/topic/3394-extract-and-rebuild-a-ubi-image/ 
This entire set of operations requires root privilege, so it may be convenient to switch to 
the root user for the duration of this section, rather than using sudo: 
sudo su 
First, the mtd-utils package must be installed: 
apt-get install mtd-utils 
To access this filesystem, the NAND memory must be simulated, requiring some kernel 
modules that must be loaded: 
modprobe mtdblock 
modprobe ubi 
When loading the NAND simulator module, identifier bytes must be set to select the 
type and capacity of memory to be simulated. The following command (from 
http://www.linux-mtd.infradead.org/faq/nand.html ), typed all in one line, works for 
creating simulated NAND that has the capacity to hold a Pwn Plug root image. 
modprobe nandsim first_id_byte=0x20 second_id_byte=0xac 
third_id_byte=0x00 fourth_id_byte=0x15 
Next, check the list of MTD devices, to see if the above commands were successful: 
cat /proc/mtd 
The output should look like the following: 
dev:    size   erasesize  name                                             
mtd0: 20000000 00020000 "NAND simulator partition 0" 
Next, image the root filesystem image acquired from the Pwn Plug to the MTD block 
device: 
dd if=root.img of=/dev/mtdblock0 
Then attach the UBI device and mount the filesystem to a directory: 
mkdir pwn_root 
ubiattach /dev/ubi_ctrl -m 0 
mount -t ubifs ubi0_0 pwn_root 
If successful, the root filesystem acquired from the Pwn Plug should be visible in the 
pwn_root directory. To copy the directory structure and files from this directory to the 
analysis machine’s filesystem for future analysis (without having to always repeat the 
above NAND simulation steps), issue the following commands: 
mkdir Pwn Plug_extracted 
cp -a pwn_root/* Pwn Plug_extracted/ 
The result should be a logical copy of the Pwn Plug root filesystem’s file and folder 
structure located in Pwn Plug_extracted for convenient analysis. The modules 
needed for NAND simulation can then be unloaded: 
ubidetach -m 0 
rmmod nandsim 
rmmod ubifs 
rmmod ubi 
rmmod mtdblock 
Examination 
From the root directory of the filesystem, the /etc/motd.tail file contains the 
version and release date of the installation of the Pwn Plug OS on the system. As of the 
time of writing, the latest available OS images from Pwnie Express are version 1.1, with 
a script available to patch systems up to version 1.1.2.  The 1.1.2 upgrade script reverts a 
change made in version 1.1.1 that moved some tools to an inserted SD card. Version 
1.1.2 also, for both 1.1 and 1.1.1, removes the existing version of the Metasploit 
framework and installs a custom version of Metasploit maintained by Pwnie Express 
that is designed to use less disk space (and thus, fit in the Pwn Plug’s internal NAND 
memory). 
Forensic analysis of an acquired Pwn Plug image can be quickly focused on interesting 
artifacts of the device’s usage by comparing the files in the acquired filesystem to those 
in the base image from Pwnie Express. Note that, for best results, a base image should 
be used that matches the version of the Pwn Plug OS in the acquired image. Version 
numbers that have a trailing “c” (“1.1c”, for example) are free “community” versions of 
the OS that Pwnie Express has available for free download (for those who wish to 
convert a stock SheevaPlug into a Pwn Plug on their own). Version numbers that 
exclude the “c” are commercial versions that ship with Pwn Plugs from Pwnie Express, 
and are available to download for registered customers. Commercial versions include a 
web-based UI and other scripts that are not available in the community version. While 
having a commercial image to compare against would be best for analyzing an 
acquisition of a commercial Pwn Plug, a comparison against the free community edition 
will help narrow down the analysis nearly as well.  
Base images for the Pwn Plug can be extracted for comparison using the technique 
described in the previous section. To compare two extractions, use a command in this 
form (all on one line): 
diff -rq   | grep -v 
“[file|fifo] while” >  