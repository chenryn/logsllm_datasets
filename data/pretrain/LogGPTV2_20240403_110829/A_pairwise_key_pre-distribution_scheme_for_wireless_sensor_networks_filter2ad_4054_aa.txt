title:A pairwise key pre-distribution scheme for wireless sensor networks
author:Wenliang Du and
Jing Deng and
Yunghsiang S. Han and
Pramod K. Varshney
A Pairwise Key Pre-distribution Scheme for
Wireless Sensor Networks∗
Wenliang Du
Systems Assurance Institute
Department of Electrical Engineering and
Computer Science
Syracuse University
Syracuse, NY 13244-1240, USA.
Jing Deng
Department of Electrical Engineering and
Computer Science
Syracuse University
Syracuse, NY 13244-1240, USA.
PI:EMAIL
PI:EMAIL
†
Yunghsiang S. Han
Information Engineering
National Chi Nan University
Taiwan, R.O.C.
Department of Computer Science and
Department of Electrical Engineering and
Pramod K. Varshney
Computer Science
Syracuse University
Syracuse, NY 13244-1240, USA.
PI:EMAIL
PI:EMAIL
ABSTRACT
To achieve security in wireless sensor networks, it is important to
be able to encrypt and authenticate messages sent among sensor
nodes. Keys for encryption and authentication purposes must be
agreed upon by communicating nodes. Due to resource constraints,
achieving such key agreement in wireless sensor networks is non-
trivial. Many key agreement schemes used in general networks,
such as Difﬁe-Hellman and public-key based schemes, are not suit-
able for wireless sensor networks. Pre-distribution of secret keys
for all pairs of nodes is not viable due to the large amount of mem-
ory used when the network size is large. To solve the key pre-
distribution problem, two elegant key pre-distribution approaches
have been proposed recently [11, 7].
In this paper, we propose a new key pre-distribution scheme,
which substantially improves the resilience of the network com-
pared to the existing schemes. Our scheme exhibits a nice thresh-
old property: when the number of compromised nodes is less than
the threshold, the probability that any nodes other than these com-
promised nodes is affected is close to zero. This desirable property
lowers the initial payoff of smaller scale network breaches to an
∗
This work was supported in part by Grant ISS-0219560 from
the National Science Foundation, by the SUPRIA program of the
CASE Center at Syracuse University, and by the National Science
Council of Taiwan, R.O.C., under grants NSC 90-2213-E-260-007
†
and NSC 91-2213-E-260-021.
Han’s work was completed during his visit to the CASE Center
and Department of Electrical Engineering and Computer Science
at Syracuse University, USA.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03,  October  27–31,  2003,  Washington,  DC,  USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
adversary, and makes it necessary for the adversary to attack a sig-
niﬁcant proportion of the network. We also present an in depth
analysis of our scheme in terms of network resilience and associ-
ated overhead.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and protection; C.2.1 [Computer-Communication Networks]:
Network Architecture and Design—Wireless communication
General Terms
Security, Design, Algorithms
Keywords
Wireless sensor networks, key pre-distribution, security
1.
INTRODUCTION
Recent advances in electronic and computer technologies have
paved the way for the proliferation of wireless sensor networks
(WSN). Sensor networks usually consist of a large number of ultra-
small autonomous devices. Each device, called a sensor node, is
battery powered and equipped with integrated sensors, data pro-
cessing capabilities, and short-range radio communications. In typ-
ical application scenarios, sensor nodes are spread randomly over
the terrain under scrutiny and collect sensor data. Examples of sen-
sor network projects include SmartDust [12] and WINS [1].
Sensor networks are being deployed for a wide variety of appli-
cations [2], including military sensing and tracking, environment
monitoring, patient monitoring and tracking, smart environments,
etc. When sensor networks are deployed in a hostile environment,
security becomes extremely important, as they are prone to dif-
ferent types of malicious attacks. For example, an adversary can
easily listen to the trafﬁc, impersonate one of the network nodes,
or intentionally provide misleading information to other nodes. To
42provide security, communication should be encrypted and authen-
ticated. The open problem is how to bootstrap secure communica-
tions between sensor nodes, i.e. how to set up secret keys between
communicating nodes?
This problem is known as the key agreement problem, which
has been widely studied in general network environments. There
are three types of general key agreement schemes: trusted-server
scheme, self-enforcing scheme, and key pre-distribution scheme.
The trusted-server scheme depends on a trusted server for key agree-
ment between nodes, e.g., Kerberos [15]. This type of scheme is
not suitable for sensor networks because there is no trusted infras-
tructure in sensor networks. The self-enforcing scheme depends on
asymmetric cryptography, such as key agreement using public key
certiﬁcates. However, limited computation and energy resources
of sensor nodes often make it undesirable to use public key algo-
rithms, such as Difﬁe-Hellman key agreement [8] or RSA [18], as
pointed out in [16]. The third type of key agreement scheme is
key pre-distribution, where key information is distributed among
all sensor nodes prior to deployment.
If we know which nodes
will be in the same neighborhood before deployment, keys can be
decided a priori. However, most sensor network deployments are
random; thus, such a priori knowledge does not exist.
There exist a number of key pre-distribution schemes which do
not rely on a priori deployment knowledge. A naive solution is
to let all the nodes carry a master secret key. Any pair of nodes
can use this global master secret key to achieve key agreement and
obtain a new pairwise key. This scheme does not exhibit desirable
network resilience: if one node is compromised, the security of the
entire sensor network will be compromised. Some existing studies
suggest storing the master key in tamper-resistant hardware to re-
duce the risk, but this increases the cost and energy consumption of
each sensor. Furthermore, tamper-resistant hardware might not al-
ways be safe [3]. Another key pre-distribution scheme is to let each
sensor carry N − 1 secret pairwise keys, each of which is known
only to this sensor and one of the other N − 1 sensors (assuming
N is the total number of sensors). The resilience of this scheme
is perfect because a compromised node does not affect the secu-
rity of other nodes; however, this scheme is impractical for sensors
with an extremely limited amount of memory because N could be
large. Moreover, adding new nodes to a pre-existing sensor net-
work is difﬁcult because the existing nodes do not have the new
nodes’ keys.
Very recently Eschenauer and Gligor proposed a random key
pre-distribution scheme: before deployment, each sensor node re-
ceives a random subset of keys from a large key pool; to agree on
a key for communication, two nodes ﬁnd one common key within
their subsets and use that key as their shared secret key [11]. Based
on this scheme, Chan, Perrig, and Song proposed a q-composite
random key pre-distribution scheme, which increases the security
of key setup such that an attacker has to compromise many more
nodes to achieve a high probability of compromising communica-
tion [7]. The difference between the q-composite scheme and the
scheme in [11] is that q common keys (q ≥ 1), instead of just a sin-
gle one, are needed to establish secure communication between a
pair of nodes. It is shown that by increasing the value of q network
resilience against node capture is improved [7].
1.1 Main Contributions of Our Scheme
In this paper, we propose a new key pre-distribution scheme. The
main contributions of this paper are as follows:
1. Substantially improved network resilience against node cap-
ture over existing schemes.
2. Pairwise keys that enable authentication.
3. Thorough theoretical analysis of security, and communica-
tion and computation overhead analysis.
Our scheme builds on Blom’s key pre-distribution scheme [4]
and combines the random key pre-distribution method with it. Our
results show that the resilience of our scheme is substantially better
than Blom’s scheme as well as other random key pre-distribution
schemes. In [4], Blom proposed a key pre-distribution scheme that
allows any pair of nodes to ﬁnd a secret pairwise key between them.
Compared to the (N − 1)-pairwise-key pre-distribution scheme,
Blom’s scheme only uses λ+1 memory spaces with λ much smaller
than N. The tradeoff is that, unlike the (N − 1)-pairwise-key
scheme, Blom’s scheme is not perfectly resilient against node cap-
ture. Instead it has the following λ-secure property: as long as an
adversary compromises less than or equal to λ nodes, uncompro-
mised nodes are perfectly secure; when an adversary compromises
more than λ nodes, all pairwise keys of the entire network are com-
promised.
The threshold λ can be treated as a security parameter in that se-
lection of a larger λ leads to a more secure network. This threshold
property of Blom’s scheme is a desirable feature because an adver-
sary needs to attack a signiﬁcant fraction of the network in order
to achieve high payoff. However, λ also determines the amount of
memory to store key information, as increasing λ leads to higher
memory usage. The goal of our scheme is to increase network’s
resilience against node capture without using more memory.
Blom’s scheme uses one key space for all nodes to make sure that
any pair can compute its pairwise key in this key space. Motivated
by the random key pre-distribution schemes presented in [11, 7], we
propose a new scheme using multiple key spaces: we ﬁrst construct
ω spaces using Blom’s scheme, and each sensor node carries key
information from τ (2 ≤ τ < ω) randomly selected key spaces.
According to Blom’s scheme, if two nodes carry key information
from a common space, they can compute their pairwise key from
the information; when two nodes do not carry key information from
a common space, they can conduct key agreement via other nodes
which share pairwise keys with them. Our analysis has shown that
using the same amount of memory, our new scheme is substantially
more resilient than Blom’s scheme and other key pre-distribution
schemes.
To further improve the resilience, we also develop a two-hop-
neighbor key pre-distribution scheme. The idea is to let the direct
neighbor forward the message from a sender, such that nodes that
are two hops away from the sender can also receive the message.
The nodes that are two hops away are known as two-hop neighbors.
Treating two-hop neighbors as “direct” neighbors, the number of
neighbors of each sender increases fourfold. The consequence is
that the resilience threshold can be improved as well. Our results
show that under certain conditions, the threshold can be improved
to four times as much as that of our ﬁrst scheme.
The rest of the paper is organized as follows. Section 2 describes
how our building block, the original Blom’s method, works. Then
we describe our key pre-distribution scheme in Section 3. Section
4 shows the resilience of our scheme against node capture. It also
compares our scheme with existing key pre-distribution schemes.
Section 5 presents the communication and computation overheads
of our scheme. Section 6 describes our two-hop-neighbor key pre-
distribution scheme. Finally, we provide some concluding remarks
in Section 7.
1.2 Other Related Work
The Eschenauer-Gligor scheme [11] and the Chan-Perrig-Song
scheme [7] have been reviewed earlier in this section. Detailed
comparisons with these two schemes will be given in Section 4.
Some other related work is discussed next.
Du et al. proposed a method to improve the Eschenauer-Gligor
scheme using a priori deployment knowledge [9]. This method can
also be used to further improve other random key pre-distribution
schemes, such as the Chan-Perrig-Song scheme and the scheme
presented in this paper.
Blundo et al. proposed several schemes which allow any group
of t parties to compute a common key while being secure against
collusion between some of them [5]. These schemes focus on sav-
ing communication costs while memory constraints are not placed
on group members. When t = 2, one of these schemes is actu-
ally a special case of Blom’s scheme [4]. A modiﬁed version of
Blom’s scheme will be reviewed in Section 2. Compared to Blom’s
scheme, our scheme is more resilient and more memory-efﬁcient.
Perrig et al. proposed SPINS, a security architecture speciﬁcally
designed for sensor networks [16].
In SPINS, each sensor node
shares a secret key with the base station. Two sensor nodes can-
not directly establish a secret key. However, they can use the base
station as a trusted third party to set up the secret key.
2. BACKGROUND: BLOM’S KEY
PRE-DISTRIBUTION SCHEME
Blom proposed a key pre-distribution method that allows any
pair of nodes in a network to be able to ﬁnd a pairwise secret
key [4]. As long as no more than λ nodes are compromised, the net-
work is perfectly secure (this is called the λ-secure property). We
brieﬂy describe how Blom’s λ-secure key pre-distribution system
works. Blom’s scheme is not developed for sensor networks, so in
the following description, we have made some slight modiﬁcations
to the original scheme to make it suitable for sensor networks.
During the pre-deployment phase, the base station ﬁrst constructs
a (λ + 1) × N matrix G over a ﬁnite ﬁeld GF (q), where N is the
size of the network. G is considered as public information; any sen-
sor can know the contents of G, and even adversaries are allowed to
know G. Then the base station creates a random (λ + 1)× (λ + 1)
symmetric matrix D over GF (q), and computes an N × (λ + 1)
matrix A = (D · G)T , where (D · G)T is the transpose of D · G.
Matrix D needs to be kept secret, and should not be disclosed to ad-
versaries or any sensor node (although, as will be discussed later,
one row of (D · G)T will be disclosed to each sensor node). Be-
cause D is symmetric, it is easy to see:
A · G = (D · G)T · G = GT · DT · G = GT · D · G
= (A · G)T .
This means that A·G is a symmetric matrix. If we let K = A·G,
we know that Kij = Kji, where Kij is the element in K located
in the ith row and jth column. We use Kij (or Kji) as the pairwise
key between node i and node j. Fig. 1 illustrates how the pairwise
key Kij = Kji is generated. To carry out the above computation,
nodes i and j should be able to compute Kij and Kji, respectively.
This can be easily achieved using the following key pre-distribution
scheme, for k = 1, . . . , N:
1. store the kth row of matrix A at node k, and
2. store the kth column of matrix G at node k.1
Therefore, when nodes i and j need to ﬁnd the pairwise key be-
tween them, they ﬁrst exchange their columns of G, and then they
1We will show later that each sensor does not need to store the
whole column, because each column can be generated from a seed.
can compute Kij and Kji, respectively, using their private rows of
A. Because G is public information, its columns can be transmit-
ted in plaintext. It has been proved in [4] that the above scheme is
λ-secure if any λ + 1 columns of G are linearly independent. This
λ-secure property guarantees that no nodes other than i and j can
compute Kij or Kji if no more than λ nodes are compromised.
An Example of Matrix G
We show an example of matrix G. Note that any λ + 1 columns
of G must be linearly independent in order to achieve the λ-secure
property. Since each pairwise key is represented by an element in
the ﬁnite ﬁeld GF (q), if the length of pairwise keys is 64 bits, then
we should choose q as the smallest prime number2 that is larger
than 264. Let s be a primitive element of GF (q) and N < q. That
is, each nonzero element in GF (q) can be represented by some
power of s, namely si for some 0 < i ≤ q − 1. A feasible G can
be designed as follows [13]:
G =
1
s
s2
1
s2
1
s3
(s2)2
(s3)2
sλ
(s2)λ
(s3)λ
···
···
···
...
···
1
sN
(sN )2
(sN )λ
(cid:4)= sj if i (cid:4)= j (this is a property of
It is well-known that si
primitive elements). Since G is a Vandermonde matrix, it can be
shown that any λ + 1 columns of G are linearly independent when
s, s2, s3, . . . , sN are all distinct [13]. In practice, G can be gen-
erated by the primitive element s of GF (q). Therefore, when we
store the kth column of G at node k, we only need to store the seed
sk at this node, and any node can regenerate the column given the
seed. The issue of memory usage and computational complexity
will be discussed later in the paper.
3. MULTIPLE-SPACE KEY
PRE-DISTRIBUTION SCHEME
To achieve better resilience against node capture, we propose
a new key pre-distribution scheme that uses Blom’s method as a
building block. Our idea is based on the following observations:
Blom’s method guarantees that any pair of nodes can ﬁnd a secret
key between themselves. To represent this we use concepts from
graph theory and draw an edge between two nodes if and only if
they can ﬁnd a secret key between themselves. We will get a com-
plete graph (i.e., an edge exists between all node pairs). Although
full connectivity is desirable, it is not necessary. To achieve our
goal of key agreement, all we need is a connected graph, rather than
a complete graph. Our hypothesis is that by requiring the graph to
be only connected, each sensor node needs to carry less key infor-
mation.
Before we describe our proposed scheme, we deﬁne a key space (or
space in short) as a tuple (D, G), where matrices D and G are as
deﬁned in Blom’s scheme. We say a node picks a key space (D, G)
if the node carries the secret information generated from (D, G)
using Blom’s scheme. Two nodes can calculate their pairwise key
if they have picked a common key space.
2When q is a prime, all elements in GF (q) can be represented by
the nonnegative integers less than q. The addition and multipli-
cation in GF (q) are ordinary integer additions and multiplication
modulo q. For example, if we want to multiply two elements in
GF (q), ﬁrst we multiply them as ordinary integers and then carry
out the modulo q operation.
A = (D · G)T
i
         

N
×
j
λ + 1
G
i
j
  

  

  

  

  

  

  

  

N
(D · G)T G
Kij
  
=
Kji
N
N
Figure 1: Generating Keys in Blom’s Scheme
3.1 Key Pre-distribution Phase
During the key pre-distribution phase, we need to assign key in-
formation to each node, such that after deployment, neighboring
sensor nodes can ﬁnd a secret key between them. Assume that
each sensor node has a unique identiﬁcation, whose range is from
1 to N. We also select the security parameters τ, ω, and λ, where
2 ≤ τ < ω. These parameters decide the security and performance
of our scheme, and will be discussed later in the paper. Our key
pre-distribution phase contains the following steps:
Step 1 (Generating G matrix): We ﬁrst select a primitive element
from a ﬁnite ﬁeld GF (q), where q is the smallest prime larger than
the key size, to create a generator matrix G of size (λ+1)×N. Let
G(j) represent the jth column of G. We provide G(j) to node j.
As we have already shown in Section 2, although G(j) consists of
(λ+1) elements, each sensor only needs to remember one seed (the
second element of the column), which can be used to regenerate
all the elements in G(j). Therefore the memory usage for storing
G(j) at a node is just a single element. Since the seed is unique for
each sensor node, it can also be used for node id.
Step 2 (Generating D matrix): We generate ω symmetric matri-
ces D1,. . ., Dω of size (λ + 1) × (λ + 1). We call each tuple
Si = (Di, G), i = 1, . . . , ω, a key space. We then compute the
matrix Ai = (Di · G)T . Let Ai(j) represent the jth row of Ai.
Step 3 (Selecting τ spaces): We randomly select τ distinct key
spaces from the ω key spaces for each node. For each space Si
selected by node j, we store the jth row of Ai (i.e. Ai(j)) at this
node. This information is secret and should stay within the node;
under no circumstance should a node send this secret information
to any other node. According to Blom’s scheme, two nodes can