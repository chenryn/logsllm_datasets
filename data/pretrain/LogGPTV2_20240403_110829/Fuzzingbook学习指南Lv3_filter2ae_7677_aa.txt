# Fuzzingbook学习指南Lv3
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
上篇文章中我们讲到了输入的“变异”以及选择“变异”模式的一些心得，这篇文章我们就来看看实现模式选择的一些技术细节。同时我们也要跳出单一路径的思想，让我们的fuzzing找到更多的路径。
## CFG
cfg是程序控制流图（control flow
graph）的简写，说大白话就是将程序按照if、else、while、函数调用等进行“分块”，然后根据调用顺序连线即可，就类似我们生活中用到的流程图。搞逆向的小伙伴应该不陌生，ida
pro就会对逆向的程序进行解析，并生成对应的cfg。对于程序来讲，我们经常通过构建cfg的方式来了解程序的执行过程并进行分析。可以想象，如果你可以绘制程序的cfg，那上一篇文章中提到的许多技术都可以轻松实现。
考虑到难度，我们还是以“白盒”测试为主，毕竟ida
pro那样能对“黑盒”程序还原cfg的技术距离我们还是很遥远的。fuzzingbook给出了自己的cfg生成class来对python程序进行流程分析，但是没有做解释说明，我们就以它的实现为例来一边复现一边学习，详细代码大家可以在[这里](fuzzingbook.org/html/ControlFlow.html)查看。
    import ast
    import inspect
    import astor
    src = inspect.getsource(cgi_decode)
    print(src)
    test = ast.parse(src)
    print(ast.dump(test))
inspect是python自带的module，它用于检查指定程序的相关信息，我们调用的getsource函数能够获得程序的源码，这里使用的cgi_decode就是我们上一篇文章中用到的函数。
ast是抽象语法树（Abstract Syntax
Trees）的简写，python的这个模块能将读取到的代码进行解析，根据语法生成树状结构，方便我们了解程序的执行流，我们只需要调用ast.parse就可以完成语法分析的工作。它主要分为两个部分：
  * 词法分析，它将程序的每一个字符串都会标记为对应的“身份”（比如变量、关键字），形成一条流状结构
  * 语法分析，将流作为输入，按照语法对其进行解析，形成树状结构
我们简单写一个if else的小程序来简单说明一下：
    def easy_if(a):
        if a>10:
            return False
        else:
            return True
对于这个程序来说：
  * def就是function define的关键字，后面的easy_if是对应的函数名字，后面括号，那么括号里面的a就是参数
  * 往下是if，是关键字，if后面就应该是一个比较的句子，那么对句子再进行分析： 
    * a是左值
    * 大于号是比较运算符
    * 10是右值
  * return返回语句
  * else，后面不用接东西
  * return返回语句
进行简单的“重装”（比如把def、函数名、参数扔到一块）程序很简单，一直是直线结构，直到ifelse出现了分叉，当然，我们也不用存储if的分叉，我们可以值存储if和if的条件作为一个块，而具体的分支作为块中的块。这样形成一种带有递归思想的结构。如果更进一步，我们还可以对于每个module，我们都把函数作为module块中的一部分，在我们解析时，调用module块，然后就可以找到函数块，函数块中代码块，代码块中有ifelse和循环块，这样就形成了套娃结构。这样说可能会让你听的有些迷糊，我们来看看图片就明白了
如下所示是树状结构，块与块分离：
如下所示，块与块有关系：
如果你学过编译原理，那么你对上面的过程一定不陌生，这实际上也是编译器在编译代码的时候要干的活，本质上都是理解程序的“意思”，我们这里使用的ast.parse就自动为我们干了。实践中我们直接调人家写好的工具即可。如果你只是想了解一下这部分内容，看懂fuzzingbook的实现，到这就可以过了，如果你想自己去写，那还是要去系统学习的。
我们打印一下，输出结果如下：
    Module(
            body=[FunctionDef(name='easy_if', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=None, type_comment=None)],
        vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), 
            body=[If(test=Compare(left=Name(id='a', ctx=Load()), ops=[Gt()], comparators=[Constant(value=10, kind=None)]),
        body=[Return(value=Constant(value=False, kind=None))], orelse=[Return(value=Constant(value=True, kind=None))])], decorator_list=[], returns=None, type_comment=None)], type_ignores=[]
        )
对照我们上面的分析，你应该很容易看懂module的结构，它记录的信息非常详细。与我们上面的套娃结构类似，我们可以通过循环的形式，不停的拿到中号套娃、小号套娃，进而实现程序结构的遍历。
接下来我们着手构建我们自己的节点类，把ast为我们解析到的内容拉到我们的树上来，为的是能够自定义我们的cfg输出的信息、增添接口等。
    class CFGNode(dict):
        def __init__(self, parents=[], ast=None):
            assert type(parents) is list
            register_node(self)
            self.parents = parents
            self.ast_node = ast
            self.update_children(parents) 
            self.children = []
            self.calls = []
我们先只看关键部分，节点定义parents来保存节点的父节点，children来保存子节点，update_children函数用来将自己添加到父节点的children中，实际上就是在模拟ast的node结构。
    class PyCFG:
        def __init__(self):
            self.founder = CFGNode(
                parents=[], ast=ast.parse('start').body[0]) 
            self.founder.ast_node.lineno = 0
            self.functions = {}
            self.functions_node = {}
我们的cfg类则是首先会创建一个founder的node节点，作为初始节点，然后我们的任务就是往上挂后续的节点。启动代码如下：
    cfg = PyCFG()
    cfg.gen_cfg(fnsrc)
    '''
        def gen_cfg(self, src):
            node = ast.parse(src)
            nodes = self.walk(node, [self.founder])
            self.last_node = CFGNode(parents=nodes, ast=ast.parse('stop').body[0])
            ast.copy_location(self.last_node.ast_node, self.founder.ast_node)
            self.update_children()
            self.update_functions()
            self.link_functions()
    '''
我们创建cfg对象后，就对源代码进行ast.parse操作，然后进行walk，即游走操作，在节点间游走，就相当于是遍历ast结构了，游走中会将node不断挂在树上，最后再挂上stop节点，就算是大功告成了。所以重点就是walk操作了，我们看看它的代码：
        def walk(self, node, myparents):