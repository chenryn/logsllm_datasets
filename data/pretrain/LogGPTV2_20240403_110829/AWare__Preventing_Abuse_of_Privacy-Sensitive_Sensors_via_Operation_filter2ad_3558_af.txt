[46] R. Schlegel, K. Zhang, X.-y. Zhou, M. Intwala, A. Kapadia, and
X. Wang. Soundcomber: A stealthy and context-aware sound
trojan for smartphones. In NDSS, volume 11, pages 17–33, 2011.
[31] B. McCarty. SElinux: NSA’s open source security enhanced linux.
O’Reilly Media, Inc., 2004.
[32] D. S. McCrickard and C. M. Chewar. Attuning notiﬁcation design
to user goals and attention costs. Commun. ACM, 46(3):67–72,
Mar. 2003.
[33] K. Onarlioglu, W. Robertson, and E. Kirda. Overhaul: Input-
driven access control for better privacy on traditional operating
systems. In 2016 46th Annual IEEE/IFIP International Confer-
ence on Dependable Systems and Networks (DSN), pages 443–454,
June 2016.
[34] G. Petracca, L. M. Marvel, A. Swami, and T. Jaeger. Agility
maneuvers to mitigate inference attacks on sensed location data.
In Military Communications Conference, MILCOM 2016-2016
IEEE, pages 259–264. IEEE, 2016.
[35] G. Petracca, Y. Sun, T. Jaeger, and A. Atamli. Audroid: Preventing
attacks on audio nels in mobile devices. In Proceedings of the
31st Annual Computer Security Applications Conference, pages
181–190. ACM, 2015.
[36] V. Prevelakis and D. Spinellis. Sandboxing applications.
In
USENIX Annual Technical Conference, FREENIX Track, pages
119–126, 2001.
[37] U. U. Rehman, W. A. Khan, N. A. Saqib, and M. Kaleem. On
detection and prevention of clickjacking attack for osns. In Fron-
tiers of Information Technology (FIT), 2013 11th International
Conference on, pages 160–165. IEEE, 2013.
[38] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. Towards discover-
ing and understanding task hijacking in android. In 24th USENIX
Security Symposium (USENIX Security 15), pages 945–959, Wash-
ington, D.C., Aug. 2015. USENIX Association.
[39] T. Ringer, D. Grossman, and F. Roesner. Audacious: User-driven
access control with unmodiﬁed operating systems. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Commu-
nications Security, CCS ’16, pages 204–216, New York, NY, USA,
2016. ACM.
[40] R. L. Rivest, A. Shamir, and L. Adleman. A method for obtaining
digital signatures and public-key cryptosystems. Communications
of the ACM, 21(2):120–126, 1978.
[41] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and
C. Cowan. User-driven access control: Rethinking permission
granting in modern operating systems. In Proceedings of the 2012
IEEE Symposium on Security and Privacy, SP ’12, pages 224–238,
Washington, DC, USA, 2012. IEEE Computer Society.
[42] J. Ruderman. The same origin policy, 2001.
[43] S. Schechter. Common pitfalls in writing about security and
privacy human subjects experiments, and how to avoid them. Mi-
crosoft Technical Report, January 2013.
[44] S. E. Schechter, R. Dhamija, A. Ozment, and I. Fischer. The
emperor’s new security indicators. In 2007 IEEE Symposium on
Security and Privacy (SP ’07), pages 51–65, May 2007.
[45] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia,
and X. Wang. Soundcomber: A stealthy and context-aware sound
trojan for smartphones. In NDSS. The Internet Society, 2011.
[47] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia.
Design of the eros trusted window system. In Proceedings of
the 13th conference on USENIX Security Symposium-Volume 13,
pages 12–12. USENIX Association, 2004.
[48] M. Sheppard. Smartphone apps, permissions and privacy. Ofﬁce
of the Privacy Commissioner of Canada, 2013.
[49] S. Smalley and R. Craig. Security enhanced (se) android: Bringing
ﬂexible mac to android. In NDSS, volume 310, pages 20–38, 2013.
[50] S. Smalley, C. Vance, and W. Salamon. Implementing selinux as
a linux security module. NAI Labs Report, 1(43):139, 2001.
[51] R. Templeman, Z. Rahman, D. Crandall, and A. Kapadia. Plac-
eRaider: Virtual theft in physical spaces with smartphones. In The
20th Annual Network and Distributed System Security Symposium
(NDSS), To appear, Feb 2013.
[52] G. S. Tuncay, S. Demetriou, and C. A. Gunter. Draco: A sys-
tem for uniform and ﬁne-grained access control for web code
on android. In Proceedings of the 2016 ACM SIGSAC Confer-
ence on Computer and Communications Security, CCS ’16, pages
104–115, New York, NY, USA, 2016. ACM.
[53] T. Whalen and K. M. Inkpen. Gathering evidence: Use of vi-
sual security cues in web browsers. In Proceedings of Graphics
Interface 2005, GI ’05, pages 137–144, School of Computer Sci-
ence, University of Waterloo, Waterloo, Ontario, Canada, 2005.
Canadian Human-Computer Communications Society.
[54] P. Wijesekera, A. Baokar, A. Hosseini, S. Egelman, D. Wagner,
and K. Beznosov. Android permissions remystiﬁed: A ﬁeld study
In 24th USENIX Security Symposium
on contextual integrity.
(USENIX Security 15), pages 499–514, 2015.
[55] Z. E. Ye, S. Smith, and D. Anthony. Trusted paths for browsers.
ACM Transactions on Information and System Security (TISSEC),
8(2):153–186, 2005.
[56] Z. Zhou, V. D. Gligor, J. Newsome, and J. M. McCune. Building
veriﬁable trusted path on commodity x86 computers. In 2012
IEEE Symposium on Security and Privacy, pages 616–630. IEEE,
2012.
Appendices
A Compatibility Discussion
Here, we discuss how AWare addresses special cases of
applications’ accesses to privacy-sensitive sensors.
Background Access: To enable background access,
AWare still uses the explicit authorization mechanism
via the creation of a binding request. However, as soon
as the application goes in the background, any on-screen
security message used to notify ongoing operations over
privacy-sensitive sensors is replaced with a periodic dis-
tinctive sound or a small icon on the system status bar
(Section 7.1), if the platform’s screen is on, or a hardware
sensor-use indicator LED when the platform’s screen goes
off. These periodic notiﬁcations will be active until the
user terminates the background activity explicitly. Our
USENIX Association
26th USENIX Security Symposium    395
notiﬁcation mechanism leverages the concept introduced
in previous work [23] and extends the mechanism used in
modern operating systems for location.
Remote Access: Remote commands are instantiated
by the user via an application’s user interface displayed
on the remote terminal, thus, the AWare mechanisms are
also applicable to the widgets displayed by such remote
user interfaces. Therefore, as long as remote commands
are coming from AWare-enabled remote platforms, AWare
may pair the AWare modules running on the two platforms
by creating a Secure Socket Layer (SSL) connection to
allow secure and remote control of the privacy-sensitive
sensors by the user.
Programmatic Access: There are very rare cases of
legitimate applications requiring programmatic access to
privacy-sensitive sensors, as shown by our large-scale
compatibility analysis reported in Section 8.2. Examples
are anti-theft applications that capture pictures with the
front camera in the attempt to identify the thief when
trying to unlock the screen by guessing the passcode. Or
even, an application that uses the camera to take a picture
when the user smiles. However, only trusted software
(as part of the operating system) should be allowed to
perform such operations to be inline with our research
objective of ensuring a secure use of privacy-sensitive
sensors.
Hardware Peripheral Access: An application may use
hardware peripherals (e.g., Bluetooth R(cid:13) remotes, selﬁe
sticks, headphone jacks or built-in hardware buttons) as
user interface. However, hardware peripherals are typ-
ically managed by a trusted software component, i.e.,
the Input Manager, and mandatory access control mech-
anisms (i.e., SELinux [31]) are adopted to ensure that
peripheral driver ﬁles are not accessible by untrusted ap-
plications. By monitoring input events received by the
Input Manger, AWare can identify user input events com-
ing from such hardware peripherals and bind them with
the corresponding operation requests from applications.
Access through Voice Commands: AWare enables per-
sonal assistant services that recognize voice commands,
such as Apple’s Siri, Google Now, and Windows’ Cor-
tana, by leveraging recent work that prevents untrusted
application from exploiting voice commands by control-
ling access over audio channels created by applications
and system services through the platform’s microphone
and speaker [35].
B UI Elements’ Features Analysis
We performed a large-scale analysis by using the 10,000
most popular application from the Google Play store,
Ubuntu Software Center and Chrome Extensions to eval-
uate how frequently the widgets’ and activity windows’
features used by AWare change among subsequent render-
ing events on the platform screen. We rendered a widget
and its activity window 50 times under different system
settings and conﬁgurations to cause the a widget or its
activity window to be rendered in different ways (i.e.,
screen orientation, concurrent activity windows, etc.).
ID
100%
100%
100%
Text
100%
100%
100%
Alignment
Width
99%
99%
99%
Default
Status
99%
99%
100%
Height
99%
99%
99%
X
Coord.
97%
97%
99%
Background
Color
96%
97%
100%
Background
Image
99%
99%
99%
Y
Coord.
97%
97%
99%
Border
Color
99%
98%
98%
Text
Label
100%
100%
100%
Border
Size
99%
99%
100%
Text
Size
100%
100%
100%
Text
Font
100%
100%
100%
Border
Padding Transp.
100%
98%
100%
99%
N/A
100%
Table 4: Study of ﬁxed features for GUI widget objects in X Window
Manager, Aura (Chrome Browser) Window Manager (in italic), and An-
droid Window Manager (in bold). The percentage values indicate how
many times the widget’s features did not change when the same widget
was rendered by the Window Manager. We used 1,000 applications for
each Window Manager system.
ID
Title
Text
99%
99%
100%
Title
Font
100%
100%
100%
100%
100%
100%
Width Height X
Coord.
96%
100%
100%
97%
100%
100%
100%
100%
99%
Shadow Border
Border
Color
Size
100%
100%
98%
100%
100%
99%
N/A
100%
100%
Title
Size
100%
100%
100%
Title
Color
99%
99%
100%
Y
Background
Coord.
96%
97%
99%
Border
Padding
99%
98%
100%
Color
99%
98%
99%
Set of
91%
98%
99%
Title
Align.
100%
100%
100%
Background
Image
99%
98%
98%
UI Elements
99%
98%
99%
Title
Background
99%
99%
100%
Transp.
99%
99%
100%
Window
89%
98%
99%
UI Elements
Position
Hierarch. Order
Table 5: Study of ﬁxed features for GUI activity window objects in
X Window Manager, Aura (Chrome Browser) Window Manager (in
italic), and Android Window Manager (in bold). The percentage values
indicate the times the features did not change when the same window
was rendered by the Window Manager.
C Discussion on Activity Windows
For the ease of presentation we used the general case
where a widget appears within an activity window. How-
ever, desktop and web operating system may allow more
sophisticated user interfaces, or GUI scaling for different
screen sizes. Thus, we recognize that an activity window
could be embedded inside another activity window and
such innermost activity window could be reused across
several activity windows even in a hierarchy. Therefore,
AWare does not limit the use of nested activity windows
or prohibit activity window reuse but rather ensures that
the context is deﬁned by the entire hierarchy of nested
activity windows. As a consequence, an application may
be authorized by the user to use a widget in a nested ac-
tivity window X in the outer activity window Y, but this
authorization does not extend for another outer activity
window Z.
396    26th USENIX Security Symposium
USENIX Association