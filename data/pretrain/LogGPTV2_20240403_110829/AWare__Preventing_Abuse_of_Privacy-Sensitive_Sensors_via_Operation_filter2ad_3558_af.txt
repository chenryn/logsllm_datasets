### References

1. R. Schlegel, K. Zhang, X.-y. Zhou, M. Intwala, A. Kapadia, and X. Wang. "Soundcomber: A Stealthy and Context-Aware Sound Trojan for Smartphones." In *NDSS*, vol. 11, pp. 17–33, 2011.
2. B. McCarty. "SElinux: NSA’s Open Source Security-Enhanced Linux." O’Reilly Media, Inc., 2004.
3. D. S. McCrickard and C. M. Chewar. "Attuning Notification Design to User Goals and Attention Costs." *Communications of the ACM*, 46(3):67–72, Mar. 2003.
4. K. Onarlioglu, W. Robertson, and E. Kirda. "Overhaul: Input-Driven Access Control for Better Privacy on Traditional Operating Systems." In *2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)*, pp. 443–454, June 2016.
5. G. Petracca, L. M. Marvel, A. Swami, and T. Jaeger. "Agility Maneuvers to Mitigate Inference Attacks on Sensed Location Data." In *Military Communications Conference, MILCOM 2016-2016 IEEE*, pp. 259–264, 2016.
6. G. Petracca, Y. Sun, T. Jaeger, and A. Atamli. "Audroid: Preventing Attacks on Audio Channels in Mobile Devices." In *Proceedings of the 31st Annual Computer Security Applications Conference*, pp. 181–190. ACM, 2015.
7. V. Prevelakis and D. Spinellis. "Sandboxing Applications." In *USENIX Annual Technical Conference, FREENIX Track*, pp. 119–126, 2001.
8. U. U. Rehman, W. A. Khan, N. A. Saqib, and M. Kaleem. "On Detection and Prevention of Clickjacking Attack for OSNs." In *Frontiers of Information Technology (FIT), 2013 11th International Conference on*, pp. 160–165. IEEE, 2013.
9. C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. "Towards Discovering and Understanding Task Hijacking in Android." In *24th USENIX Security Symposium (USENIX Security 15)*, pp. 945–959, Washington, D.C., Aug. 2015. USENIX Association.
10. T. Ringer, D. Grossman, and F. Roesner. "Audacious: User-Driven Access Control with Unmodified Operating Systems." In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS '16)*, pp. 204–216, New York, NY, USA, 2016. ACM.
11. R. L. Rivest, A. Shamir, and L. Adleman. "A Method for Obtaining Digital Signatures and Public-Key Cryptosystems." *Communications of the ACM*, 21(2):120–126, 1978.
12. F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and C. Cowan. "User-Driven Access Control: Rethinking Permission Granting in Modern Operating Systems." In *Proceedings of the 2012 IEEE Symposium on Security and Privacy (SP '12)*, pp. 224–238, Washington, DC, USA, 2012. IEEE Computer Society.
13. J. Ruderman. "The Same Origin Policy," 2001.
14. S. Schechter. "Common Pitfalls in Writing About Security and Privacy Human Subjects Experiments, and How to Avoid Them." Microsoft Technical Report, January 2013.
15. S. E. Schechter, R. Dhamija, A. Ozment, and I. Fischer. "The Emperor's New Security Indicators." In *2007 IEEE Symposium on Security and Privacy (SP '07)*, pp. 51–65, May 2007.
16. R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia, and X. Wang. "Soundcomber: A Stealthy and Context-Aware Sound Trojan for Smartphones." In *NDSS*. The Internet Society, 2011.
17. J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia. "Design of the EROS Trusted Window System." In *Proceedings of the 13th USENIX Security Symposium*, pp. 12–12. USENIX Association, 2004.
18. M. Sheppard. "Smartphone Apps, Permissions, and Privacy." Office of the Privacy Commissioner of Canada, 2013.
19. S. Smalley and R. Craig. "Security Enhanced (SE) Android: Bringing Flexible MAC to Android." In *NDSS*, vol. 310, pp. 20–38, 2013.
20. S. Smalley, C. Vance, and W. Salamon. "Implementing SELinux as a Linux Security Module." NAI Labs Report, 1(43):139, 2001.
21. R. Templeman, Z. Rahman, D. Crandall, and A. Kapadia. "PlaceRaider: Virtual Theft in Physical Spaces with Smartphones." In *The 20th Annual Network and Distributed System Security Symposium (NDSS)*, To appear, Feb 2013.
22. G. S. Tuncay, S. Demetriou, and C. A. Gunter. "Draco: A System for Uniform and Fine-Grained Access Control for Web Code on Android." In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS '16)*, pp. 104–115, New York, NY, USA, 2016. ACM.
23. T. Whalen and K. M. Inkpen. "Gathering Evidence: Use of Visual Security Cues in Web Browsers." In *Proceedings of Graphics Interface 2005 (GI '05)*, pp. 137–144, School of Computer Science, University of Waterloo, Waterloo, Ontario, Canada, 2005. Canadian Human-Computer Communications Society.
24. P. Wijesekera, A. Baokar, A. Hosseini, S. Egelman, D. Wagner, and K. Beznosov. "Android Permissions Remystified: A Field Study on Contextual Integrity." In *24th USENIX Security Symposium (USENIX Security 15)*, pp. 499–514, 2015.
25. Z. E. Ye, S. Smith, and D. Anthony. "Trusted Paths for Browsers." *ACM Transactions on Information and System Security (TISSEC)*, 8(2):153–186, 2005.
26. Z. Zhou, V. D. Gligor, J. Newsome, and J. M. McCune. "Building Verifiable Trusted Path on Commodity x86 Computers." In *2012 IEEE Symposium on Security and Privacy*, pp. 616–630. IEEE, 2012.

### Appendices

#### A. Compatibility Discussion

In this section, we discuss how AWare addresses special cases of applications' access to privacy-sensitive sensors.

**Background Access:**
To enable background access, AWare uses an explicit authorization mechanism via the creation of a binding request. When the application moves to the background, any on-screen security message notifying ongoing operations over privacy-sensitive sensors is replaced with a periodic distinctive sound or a small icon on the system status bar (Section 7.1), if the platform’s screen is on. If the screen is off, a hardware sensor-use indicator LED is used. These periodic notifications remain active until the user explicitly terminates the background activity. Our notification mechanism builds on previous work [23] and extends the mechanisms used in modern operating systems for location services.

**Remote Access:**
Remote commands are initiated by the user via the application's user interface displayed on the remote terminal. Therefore, AWare mechanisms apply to the widgets displayed by such remote user interfaces. As long as remote commands come from AWare-enabled remote platforms, AWare can pair the AWare modules running on both platforms by creating a Secure Socket Layer (SSL) connection, allowing secure and remote control of privacy-sensitive sensors by the user.

**Programmatic Access:**
Legitimate applications requiring programmatic access to privacy-sensitive sensors are rare, as shown by our large-scale compatibility analysis in Section 8.2. Examples include anti-theft applications that capture pictures with the front camera to identify a thief attempting to unlock the screen, or an application that takes a picture when the user smiles. However, only trusted software (as part of the operating system) should be allowed to perform such operations, aligning with our research objective of ensuring secure use of privacy-sensitive sensors.

**Hardware Peripheral Access:**
Applications may use hardware peripherals (e.g., Bluetooth remotes, selfie sticks, headphone jacks, or built-in hardware buttons) as a user interface. These peripherals are typically managed by a trusted software component, the Input Manager, and mandatory access control mechanisms (e.g., SELinux [31]) ensure that peripheral driver files are not accessible by untrusted applications. By monitoring input events received by the Input Manager, AWare can identify user input events from these peripherals and bind them with corresponding operation requests from applications.

**Access through Voice Commands:**
AWare enables personal assistant services that recognize voice commands, such as Apple’s Siri, Google Now, and Windows’ Cortana, by leveraging recent work that prevents untrusted applications from exploiting voice commands. This is achieved by controlling access over audio channels created by applications and system services through the platform’s microphone and speaker [35].

#### B. UI Elements' Features Analysis

We conducted a large-scale analysis using the 10,000 most popular applications from the Google Play store, Ubuntu Software Center, and Chrome Extensions to evaluate how frequently the features of widgets and activity windows change among subsequent rendering events on the platform screen. We rendered each widget and its activity window 50 times under different system settings and configurations to cause the widget or its activity window to be rendered in various ways (e.g., screen orientation, concurrent activity windows, etc.).

| Feature | X Window Manager | Aura (Chrome Browser) | Android |
|---------|------------------|-----------------------|---------|
| ID      | 100%             | 100%                  | 100%    |
| Text    | 100%             | 100%                  | 100%    |
| Alignment | 100%           | 100%                  | 100%    |
| Width   | 99%              | 99%                   | 99%     |
| Default Status | 99%        | 99%                   | 100%    |
| Height  | 99%              | 99%                   | 99%     |
| X Coord. | 97%             | 97%                   | 99%     |
| Background Color | 96%      | 97%                   | 100%    |
| Background Image | 99%      | 99%                   | 99%     |
| Y Coord. | 97%             | 97%                   | 99%     |
| Border Color | 99%          | 98%                   | 98%     |
| Text Label | 100%           | 100%                  | 100%    |
| Border Size | 99%           | 99%                   | 100%    |
| Text Size | 100%            | 100%                  | 100%    |
| Text Font | 100%            | 100%                  | 100%    |
| Border Padding | 100%       | 98%                   | 100%    |
| Transparency | 99%           | 99%                   | 100%    |

Table 4: Study of fixed features for GUI widget objects in X Window Manager, Aura (Chrome Browser) Window Manager (in italic), and Android Window Manager (in bold). The percentage values indicate how many times the widget’s features did not change when the same widget was rendered by the Window Manager. We used 1,000 applications for each Window Manager system.

| Feature | X Window Manager | Aura (Chrome Browser) | Android |
|---------|------------------|-----------------------|---------|
| ID      | 100%             | 100%                  | 100%    |
| Title Text | 99%            | 99%                   | 100%    |
| Title Font | 100%           | 100%                  | 100%    |
| Width   | 96%              | 100%                  | 100%    |
| Height  | 97%              | 100%                  | 99%     |
| X Coord. | 96%             | 100%                  | 100%    |
| Shadow  | 100%             | 100%                  | 98%     |
| Border Color | 100%         | 100%                  | 99%     |
| Border Size | 100%          | 100%                  | 99%     |
| Title Size | 100%           | 100%                  | 100%    |
| Title Color | 99%            | 99%                   | 100%    |
| Y Coord. | 96%             | 97%                   | 99%     |
| Background Color | 99%      | 98%                   | 99%     |
| Background Image | 99%      | 98%                   | 98%     |
| Set of UI Elements | 91%     | 98%                   | 99%     |
| Title Alignment | 100%       | 100%                  | 100%    |
| Background Transparency | 99% | 99%                   | 100%    |
| Window UI Elements Position | 89% | 98%                | 99%     |
| Hierarchical Order | 99%     | 98%                   | 99%     |

Table 5: Study of fixed features for GUI activity window objects in X Window Manager, Aura (Chrome Browser) Window Manager (in italic), and Android Window Manager (in bold). The percentage values indicate the times the features did not change when the same window was rendered by the Window Manager.

#### C. Discussion on Activity Windows

For clarity, we have used the general case where a widget appears within an activity window. However, desktop and web operating systems may allow more sophisticated user interfaces or GUI scaling for different screen sizes. Thus, we recognize that an activity window could be embedded inside another activity window, and such innermost activity windows could be reused across several activity windows, even in a hierarchy. AWare does not limit the use of nested activity windows or prohibit activity window reuse but ensures that the context is defined by the entire hierarchy of nested activity windows. Consequently, an application may be authorized by the user to use a widget in a nested activity window X within the outer activity window Y, but this authorization does not extend to another outer activity window Z.