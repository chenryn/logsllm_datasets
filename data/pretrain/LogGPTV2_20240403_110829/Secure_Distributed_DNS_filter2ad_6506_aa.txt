title:Secure Distributed DNS
author:Christian Cachin and
Asad Samar
Secure Distributed DNS
Christian Cachin
IBM Research
Asad Samar (cid:0)
Deptartment of ECE
Zurich Research Laboratory
CH-8803 R¨uschlikon, Switzerland
Carnegie Mellon University
Pittsburgh PA-15217, USA
Abstract
A correctly working Domain Name System (DNS) is essen-
tial for the Internet. Due to its signiﬁcance and because of
deﬁciencies in its current design, the DNS is vulnerable to
a wide range of attacks. This paper presents the design and
implementation of a secure distributed name service on the
level of a DNS zone. Our service is able to provide fault tol-
erance and security even in the presence of a fraction of
corrupted name servers, avoiding any single point of fail-
ure. It further solves the problem of storing zone secrets
online without leaking them to a corrupted server, while
still supporting secure dynamic updates. Our service uses
state-machine replication and threshold cryptography. We
present results from experiments performed using a proto-
type implementation on the Internet in realistic setups. The
results show that our design achieves the required assur-
ances while servicing the most frequent requests in reason-
able time.
1. Introduction
The Domain Name System (DNS) is one of the most
critical parts of the Internet infrastructure and maps sym-
bolic domain names to IP addresses. A name server that
fails may deliver incorrect name-to-address mappings to its
clients and can cause services to become unreachable or,
even worse, to be masqueraded by fraudulent replacements
operated by an attacker.
The domain name space has the structure of a tree in
which every node has a label. The domain name of a node
is the list of the labels on the path from the node to the root
of the tree. A domain is identiﬁed by a domain name, and
consists of that part of the domain name space that is at or
below the domain name which speciﬁes the domain. A do-
main is a subdomain of another domain if it is contained
within that domain [13]. The DNS tree is divided into zones.
(cid:0) Work done at IBM Zurich Research Laboratory.
A zone is a contiguous portion of the tree (possibly contain-
ing many domains) that is treated as a unit for administra-
tive purposes [10].
For every zone there are multiple authoritative name
servers which manage the corresponding part of the name
space. Only they know all data for the zone, including where
to ﬁnd the servers with the authority for the delegated sub-
domains. When a client wants to obtain data on a domain
name, it usually invokes a close-by name server who re-
trieves the data in a series of queries to authoritative servers
along the path from the root node to the target name.
The authoritative servers of every zone are replicated to
protect against failures. They are usually divided into a pri-
mary and one or more secondary servers. As the names im-
ply, the original zone data is kept at the primary server and
the secondary servers periodically obtain it from the pri-
mary (or from another secondary) using a master/slave ap-
proach. This means that an attacker may corrupt the data of
all servers by compromising the primary alone.
The DNS Security Extensions (DNSSEC) [2] [9] have
been introduced to protect the DNS; their most important
technique is zone signing, which adds digital signatures to
zone data, computed by the entity who owns the zone. How-
ever, zone signing has not been widely used so far. One rea-
son for this is that the private signature key of the zone must
be guarded very tightly and is, therefore, often stored ofﬂine
(and nobody has yet taken on the responsibility for the root
key!). At the same time, zone data is updated ever more fre-
quently using Dynamic DNS updates [17], requiring an on-
line signing process for signed zones.
This work presents a solution for the above problems by
using secure replication for authoritative servers and by dis-
tributing the signature keys so that they can be kept on-
line. Our solution addresses the security of zone replica-
tion and enables secure dynamic updates — two problems
which have recently been identiﬁed to be among the most
important open problems in DNS security [3]. In particu-
lar, our method prevents an attacker from spooﬁng an en-
tire zone by compromising its primary server and ensures
that no name server becomes a single point of failure.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:50 UTC from IEEE Xplore.  Restrictions apply. 
Our approach can tolerate one third of the authorita-
tive name servers for a zone to fail in arbitrary and mali-
cious ways, while maintaining the correct behavior of the
name service as a whole. This allows a client to obtain cor-
rect and consistent responses from the zone’s name service
even though some of the name servers have been compro-
mised by an attacker. We conﬁgure the authoritative name
servers of a zone as replicated state machines [15] and use a
fault-tolerant atomic broadcast protocol to disseminate the
state updates. The implementation of atomic broadcast is
provided by the SINTRA prototype [6]. It tolerates a frac-
tion of the servers to behave arbitrarily and exhibit so-called
“Byzantine faults.” SINTRA uses an asynchronous net-
work model, which is appropriate for the Internet.
We further address the issue of where to store the private
signature keys of a signed zone; we keep them online, as re-
quired for dynamic updates, but in a distributed way through
threshold cryptography [8]. Thus, even when a fraction of
the servers are corrupted, the secret is still not revealed. We
use the non-interactive RSA threshold signature scheme of
Shoup [16], which produces standard RSA/SHA-1 signa-
tures that can be veriﬁed by DNSSEC clients.
Our prototype service implements the existing interface
as deﬁned by DNSSEC and hence no current DNSSEC
client needs to be modiﬁed in order to communicate with
it. The system does affect the performance of the DNS op-
erations, however, and increases the latencies seen by the
clients.
We have carried out experiments with our system to
assess its performance. The setup used replicated name
servers in Europe and in North America connected by the
Internet, which is a typical DNS setup for a multinational
corporation. Our benchmarks show that retrieval and up-
date operations can still be serviced in a very reasonable
time, even when the servers are not in close proximity of
each other.
We review the background required to understand the es-
sentials of our system in Section 2. The design is presented
in Section 3. We give some implementation details in Sec-
tion 4 and discuss the performance results in Section 5. Sec-
tion 6 concludes the paper.
2. Background and Related Work
Vulnerabilities in the DNS have frequently been ex-
ploited for attacks on the Internet. One of the most com-
mon ways of “defacing” a web server is to redirect its do-
main name to the address of a host controlled by the attacker
through manipulation of the DNS. DNSSEC [9] eliminates
some of these problems by providing end-to-end authen-
ticity and data integrity through transaction signatures and
zone signing.
Transaction signatures are computed by clients and
servers over
requests and responses. DNSSEC al-
lows the two parties either to use a message authentication
code (MAC) with a shared secret key or public-key signa-
tures for authenticating and authorizing DNS messages be-
tween them. The usefulness of transaction signatures is
limited since they guarantee integrity only if a client en-
gages in a transaction with the server who is authoritative
for the returned data, but do not protect against a cor-
rupted server acting as a resolver.
For zone signing, a public-key for a digital signature
scheme, called a zone key, is associated with every zone.
Every resource record (it is the basic data unit in the DNS
database) is complemented with an additional SIG resource
record containing a digital signature, computed over the re-
source record.1 Zone signing also protects relayed data be-
cause the signature is created by the entity who owns the
zone.
We denote the private signature key of a zone by (cid:1)(cid:0)(cid:3)
and the corresponding public key by (cid:1)(cid:0)(cid:3). Clients are as-
sumed to know (cid:1)(cid:0)(cid:3) — either obtained from the DNS,
signed under the key of the parent zone, or statically con-
ﬁgured into the client — and can verify the SIG records on
all data retrieved from the server. This guarantees that re-
sponses are authentic. But unless further transport-level se-
curity methods are used, only transaction signatures guar-
antee the freshness of retrieved data.
During dynamic updates [17], the primary must modify
some resource records. With zone signing, the server has to
sign the modiﬁed resource records using (cid:1)(cid:0)(cid:3). This means
that the key must be kept online, which substantially in-
creases the risk that it is compromised.
Threshold cryptography [8] is a well-known technique
to eliminate the danger that the private key of a cryptosys-
tem is exposed at a single location. An (cid:4) -threshold sig-
nature scheme is a protocol that allows a set of  severs to
share the private key of a signature scheme and to issue sig-
natures collaboratively. Any set of   (cid:3) servers may gen-
erate a signature, but any set of  or fewer servers does not
obtain information about the private key. Threshold imple-
mentations are known for many digital signature schemes;
we use the the RSA scheme described by Shoup [16], which
is the ﬁrst practical and provably secure scheme of its kind
and, moreover, produces standard RSA signatures.
The idea of using a threshold signature scheme for
zone signing has previously been explored by Wang et
al. [18]. They provided benchmarks for signature opera-
tions on replicated servers. In another related work, Wu,
Malkin, and Boneh [19] realized an intrusion-tolerant se-
cure web server running SSL and a certiﬁcation author-
1 Actually, SIG records span a set of resource records, but we ignore
this distinction here.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:50 UTC from IEEE Xplore.  Restrictions apply. 
ity using threshold cryptography. However, in both of these
cases, all servers were connected to the same LAN and no
fault-tolerant broadcast protocols were used.
Threshold cryptography is only one half of our approach.
The other half is to use state-machine replication [15] with
atomic broadcast for disseminating the requests. An atomic
broadcast protocol [11] guarantees that every replicated
server receives and executes the same sequence of requests,
even though the servers only communicate over point-to-
point links and some of them may be faulty. Since the
DNS operations are deterministic, this ensures consistency
among the non-faulty replicated servers.
For our Internet setting, we use asynchronous atomic
broadcast with “Byzantine” faults, which can cope with ar-
bitrary message delays, needs no synchronized clocks, and
tolerates the corrupted servers to behave arbitrarily. Such
protocols have only recently been developed; examples are
the BFT system by Castro and Liskov [7], the protocols by
Cachin et al. [4] and by Kursawe and Shoup [12] imple-
mented in SINTRA [6], and the COCA system by Zhou,
Schneider, and van Renesse [20].2
In another related work, Ahmed [1] employs techniques
detailed in [7] to achieve fault tolerance for DNS. However,
the issue of storing zone keys online is not addressed in de-
tail. Furthermore, the underlying protocols of [7] are deter-
ministic and have to make certain timing assumptions to en-
sure liveness in the face of byzantine faults..
3. Design
3.1. System Model
A request in our system represents a DNS request that
can either be a query or an update. A query request, e.g., to
obtain the IP address corresponding to a domain name, is
called a read request. An update request, e.g, to add a new
name-address mapping to the zone data, is called a write re-
quest. We use server to denote a name server that services
a request (read or write) and client to denote a name server
or a resolver that issues a request.
Our replicated name service for a particular zone con-
sists of the static set of  authoritative servers (also called
replicas), who interact with multiple clients that send read
and write requests to the servers. Any  (cid:2) (cid:3)(cid:0) of the
servers may fail arbitrarily due to a conﬁguration error or
a malicious action of an adversary. The faulty servers are
called corrupted and may also collude with the adversary.
All other servers are called honest. We assume that initially
all honest servers are in the same state, i.e., they have the
same zone data.
2 Although COCA does not implement atomic broadcast, it would also
be suitable for zone signing.
For deﬁning our goals in a precise way, we introduce a
single abstract entity called a trusted server that always fol-
lows the speciﬁcation. The trusted server is initialized in the
same state as the honest servers of our service and interacts
with multiple clients. A write request from a client causes
the trusted server to update its state. We assume w.l.o.g. that
each write request is followed by a request that reads the
complete state of the server. We say a response from our
service is correct if it is the same as the response gener-
ated by the trusted server when it interacts with the same
clients as the service.
Furthermore, we assume every client that makes a re-
quest has a method to verify the response received from the
service (such a response may consist of multiple messages).
We say the response is acceptable if this veriﬁcation is suc-