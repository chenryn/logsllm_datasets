# Secure Distributed DNS

**Authors:**
- Christian Cachin, IBM Research, Zurich Research Laboratory, CH-8803 Rüschlikon, Switzerland
- Asad Samar, Department of ECE, Carnegie Mellon University, Pittsburgh, PA-15217, USA

## Abstract
A correctly functioning Domain Name System (DNS) is essential for the Internet. Due to its critical role and existing design deficiencies, the DNS is vulnerable to various attacks. This paper presents the design and implementation of a secure distributed name service at the level of a DNS zone. Our service ensures fault tolerance and security even when a fraction of the name servers are compromised, thereby eliminating any single point of failure. It also addresses the challenge of storing zone secrets online without leaking them to a corrupted server, while supporting secure dynamic updates. Our solution leverages state-machine replication and threshold cryptography. We present experimental results from a prototype implementation on the Internet in realistic setups, demonstrating that our design achieves the required assurances while servicing the most frequent requests within reasonable time.

## 1. Introduction
The Domain Name System (DNS) is a critical component of the Internet infrastructure, mapping symbolic domain names to IP addresses. A malfunctioning name server can provide incorrect mappings, rendering services unreachable or even masquerading them with fraudulent replacements operated by an attacker.

The domain name space is structured as a tree, where each node has a label. The domain name of a node is the list of labels from the node to the root. A domain is identified by a domain name and consists of the part of the domain name space at or below the domain name. A domain is a subdomain of another if it is contained within it. The DNS tree is divided into zones, which are contiguous portions of the tree managed as administrative units.

Each zone has multiple authoritative name servers that manage the corresponding part of the name space. These servers know all data for the zone, including the locations of servers with authority for delegated subdomains. When a client queries a domain name, it typically contacts a nearby name server, which retrieves the data through a series of queries to authoritative servers along the path from the root to the target name.

Authoritative servers are replicated to protect against failures, usually divided into primary and secondary servers. The primary server holds the original zone data, and secondary servers periodically obtain it using a master/slave approach. However, this means that compromising the primary server can corrupt the data of all servers.

The DNS Security Extensions (DNSSEC) have been introduced to enhance DNS security, primarily through zone signing, which adds digital signatures to zone data. However, zone signing has not been widely adopted, partly because the private signature key must be tightly guarded and often stored offline. Simultaneously, Dynamic DNS updates require online signing for signed zones.

This work addresses these issues by using secure replication for authoritative servers and distributing the signature keys to keep them online. Our solution ensures the security of zone replication and enables secure dynamic updates, preventing an attacker from spoofing an entire zone by compromising the primary server and ensuring no name server becomes a single point of failure.

## 2. Background and Related Work
DNS vulnerabilities have frequently been exploited for Internet attacks, such as redirecting domain names to attacker-controlled hosts. DNSSEC provides end-to-end authenticity and data integrity through transaction signatures and zone signing.

Transaction signatures, computed by clients and servers over requests and responses, use either a message authentication code (MAC) with a shared secret key or public-key signatures. While they ensure integrity, they do not protect against a corrupted server acting as a resolver.

Zone signing associates a public key with each zone, and every resource record is complemented with a SIG resource record containing a digital signature. This protects relayed data because the signature is created by the entity owning the zone.

During dynamic updates, the primary server must modify resource records and sign them using the private key, which must be kept online, increasing the risk of compromise.

Threshold cryptography allows a set of servers to share a private key and issue signatures collaboratively, ensuring that any subset of servers cannot reveal the key. We use the non-interactive RSA threshold signature scheme by Shoup, which produces standard RSA/SHA-1 signatures.

Previous work, such as Wang et al. and Wu, Malkin, and Boneh, explored threshold cryptography for zone signing and intrusion-tolerant secure web servers, but did not use fault-tolerant broadcast protocols. Our approach combines threshold cryptography with state-machine replication and atomic broadcast to ensure consistency among non-faulty servers.

## 3. Design

### 3.1. System Model
In our system, a request can be a query (read request) or an update (write request). A read request, such as obtaining an IP address, and a write request, such as adding a new name-address mapping, are handled by name servers (servers) and issued by resolvers or other name servers (clients).

Our replicated name service for a particular zone consists of a static set of \( n \) authoritative servers (replicas) that interact with multiple clients. Up to \( f < \frac{n}{3} \) servers may fail arbitrarily due to configuration errors or malicious actions. Faulty servers are called corrupted and may collude with the adversary. Honest servers are assumed to start in the same state with the same zone data.

We define a trusted server that always follows the specification. A write request causes the trusted server to update its state, followed by a read request for the complete state. A response from our service is correct if it matches the response generated by the trusted server under the same conditions.

Clients verify responses received from the service. A response is acceptable if the verification is successful.

## 4. Implementation Details
(Section to be added with specific implementation details)

## 5. Performance Results
(Section to be added with performance evaluation and benchmark results)

## 6. Conclusion
(Section to be added with concluding remarks and future work)

---

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)**
**0-7695-2052-9/04 $ 20.00 © 2004 IEEE**
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 11:49:50 UTC from IEEE Xplore. Restrictions apply.**