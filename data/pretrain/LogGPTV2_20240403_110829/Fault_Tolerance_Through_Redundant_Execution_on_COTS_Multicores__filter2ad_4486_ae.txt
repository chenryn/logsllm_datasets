### Optimized Text

#### Redundancy and Fault Tolerance in Software Systems

For each thread in the source code, a pair of threads is created; system calls are executed by only one of these threads. PLR [62] targets unmodified single-threaded binary applications by creating process-level replicas using Pin [63], transparently forking these replicas. Both approaches assume a reliable operating system (OS).

Romain [64] is an OS service based on the Fiasco.OC microkernel. It replicates user-level processes, assuming that the kernel, device drivers, and the replication framework function correctly. Ulbrich et al. [65] enhance critical user-mode code with CoRed (combined redundancy), which integrates triple modular redundancy (TMR), data encoding, and control-flow encoding to eliminate the single point of failure in software-based redundancy. These techniques complement our objectives.

Rex [66] proposes an execute-agree-follow model for efficient replication of multithreaded applications on multicore servers. This model allows a primary replica to handle requests concurrently, with non-deterministic decisions recorded in traces. After all replicas agree on the traces through a consensus protocol, secondary replicas replay the traces concurrently to achieve the same state as the primary.

Bressoud and Schneider [67] design protocols for coordinating non-deterministic event delivery in a hypervisor running on HP’s PA-RISC architecture. This enables the hypervisor to manage a primary-backup virtual machine (VM) pair for fault tolerance. The approach relies on the PA-RISC processor's ability to deliver interrupts deterministically and on the correct operation of the hypervisor.

Remus [68] aims for high availability by replicating protected and backup VMs on a pair of physical hosts using Xen's live-migration capability to support fine-grained checkpoints. It assumes the correct operation of Xen. VMware vSphere 4.0 [69] runs primary and backup VMs in virtual lockstep on different physical machines. The hypervisor, assumed to be reliable, ensures that the backup VM executes the same instructions as the primary VM. A logging channel transmits input data and non-deterministic events from the primary VM to the backup VM, which then applies the data and replays the events deterministically. These fault-tolerant systems based on VMs assume that the kernel or hypervisor is not affected by hardware faults.

FT-Linux [70] is the only other system in the literature (though predated by LC-RCoE [23]) that replicates virtually the entire software stack without hardware support. It implements a full-stack, primary-backup, fault-tolerant Linux system on a single machine by partitioning hardware resources, instantiating two Linux kernels, and replicating OS services and selected applications. Non-deterministic events are logged on the primary and replayed on the secondary. Failure detection is achieved by exchanging heartbeat messages between the Linux kernels and leveraging hardware error-detection features. The replicas managed by RCoE synchronize before observing non-deterministic events, reducing the latency of recording and replaying these events and thus extending the sphere of replication (SoR).

### Conclusions and Future Work

Our results demonstrate the feasibility of protecting against random hardware faults by redundantly executing a complete software stack on commodity multicore processors. Without non-standard hardware support, we can replicate everything except low-level device access. Specifically, replicating applications is transparent: we do not need to modify user-mode code other than drivers and for porting to seL4. This paper introduces CC-RCoE to overcome some limitations of LC-RCoE, significantly extending the range of supported applications.

Our evaluation shows that while performance costs are noticeable, we can trade them off against the latency of error detection by choosing the voting frequency and deciding how much state to accumulate into the state signatures used by kernel replicas for voting.

Compared to other software approaches that only protect selected applications and rely on the kernel not being affected by faults, we dramatically extend the scope of replication to include almost the entire system.

Current RCoE can only replicate a logical single-core system. With increasing core counts in commodity processors, it is now feasible and desirable to replicate multicore systems on a single processor. Furthermore, we found that a significant portion of errors is detected by barrier timeouts (Section V-C). Recovering from these would be beneficial. Finally, we aim to investigate how RCoE can provide real-time guarantees.

### Acknowledgements

The authors would like to thank the shepherd, Sameh Elnikety, and anonymous reviewers for their feedback and suggestions.

### Availability

Source code for our RCoE implementations, as well as evaluation rigs and complete raw data sets, are available for download from https://trustworthy.systems/projects/TS/cots.pml.

### References

[1] D. Bernick, B. Bruckert, P. Del Vigna, D. Garcia, R. Jardine, J. Klecka, and J. Smullen, “NonStop advanced architecture,” in Proceedings of the 35th International Conference on Dependable Systems and Networks (DSN), Washington, DC, US, 2005, pp. 12–21.
...
[70] G. Losa, A. Barbalace, Y. Wen, M. Sadini, H.-R. Chuang, and B. Ravindran, “Transparent fault-tolerance using intra-machine full-software-stack replication on commodity multicore hardware,” in Proceedings of the 37th IEEE International Conference on Distributed Computing Systems, Jun. 2017, pp. 1521–1531.

---

This optimized text is more structured, coherent, and professional, making it easier to read and understand.