# XSLT服务端注入攻击
XSLT漏洞对受影响的应用程序可能造成严重后果，通常的后果是导致远程执行代码。网络上公开exp的XSLT远程代码执行漏洞的例子有这么几个：CVE-2012-5357（影响.Net
Ektron CMS）、CVE-2012-1592（影响Apache Struts 2.0）、CVE-2005-3757（影响Google Search
Appliance）。
从上面的例子可以看出，XSLT漏洞已经存在了很长时间，尽管它们相对于其他类似的漏洞（如XML注入）不常见，但我们经常在安全性评估项目中能遇到它们。尽管如此，但该漏洞和利用技术并不为人所知。
本文中，我们将演示一系列XSLT攻击去展示以不安全的方式使用该技术的风险。*
接着会阐述如何执行远程代码、从远程系统窃取数据、网络扫描以及从受害者内网获取资源。
我们还可以提供一个存在漏洞的.Net应用程序，并提供有关如何降低这些攻击风险的建议。
## 什么是XSLT
XSL是一种将XML文档进行转换的语言，XSLT代表XSL转换，转换本身就是XML文档。
转换的结果可能是一个不同的XML文档或者其他类型的文档（比如HTML文档、CSV文件或者纯文本）。
XSLT常见用途是传输不同应用生成的文件数据和作为模版引擎。许多企业型应用程序广泛使用XSLT。比如，多租户开票应用程序可以允许客户端使用XSLT大量定制其发票。客户可以根据具体需要更改发票中显示的信息及其格式。
其他常见的应用：
  * 报表功能
  * 不同格式的数据导出
  * 打印
  * 邮件
在描述这类攻击前，让我们通过一个实际例子来看看转换是如何进行的。
首先是下面这样的XML文件，包含了水果名和相关描述的列表：
        Lemon
        Yellow and sour
        Watermelon
        Round, green outside, red inside
为了将XML文档转为纯文本，使用如下XSL转换：
        Fruits:
          - : 
使用上述转换规则对数据进行转换的结果是下面的纯文本文件：
    Fruits:
          - Lemon: Yellow and sour
          - Watermelon: Round, green outside, red inside
## 利用XSLT服务端注入
在本节中，我们提供一种方法来测试应用程序的XSLT漏洞，并讲述漏洞的发现到利用。在这些示例中，我们专注于使用Microsoft System.Xml
XSLT实现的易受攻击的应用程序。然而类似的技术也适用于其他常见的库，如Libxslt，Saxon和Xalan。
#### 发现存在漏洞的切入点
第一步是识别应用存在漏洞的部分。
最简单的情况是应用允许上传任意的XSLT文件。
如果不是那种情况，易受攻击的应用也可能因为使用了不受信任的用户输入去动态生成XSL转换的XMl文档。
比如应用可能生成下面的XSLT文档，字符串“Your Company Name Here”源于不受信任的用户输入。
        Your Company Name Here
        Fruits:
          - : 
为了判断应用是否易受攻击，通过注入导致错误XML语法的字符（比如双引号、单引号、尖括号）是有效的方法。如果服务器返回了错误，那么应用则可能易受攻击。总的来说，这种识别技术和XML注入漏洞识别技术是相同的。
后面要描述的攻击中存在一部分只适用注入点位于文档的特定位置。但不要担心，我们会演示一种通过import和include函数来绕过这种限制。
为了尽可能简单化，接下来的例子中都是假定我们能够向应用提交任意的XSLT文档。如有特殊情况会另有说明。
#### system-property()函数和指纹
攻击者一旦确认了易受攻击点，那么对他来说识别操作系统指纹和确定正在使用的XSLT实现是很有用的。除此之外，对于攻击者来说了解应用程序使用的XSLT库对于尝试构造攻击载荷是非常有帮助的。
由于不同的库实现了不同的XSLT特性，一个库中可用的特性在其他库中不一定能用，而且大多时候被实现的专用扩展在不同的库中是不兼容的。
除了刚才所提到的，库的默认设置会因实现变化而广泛的变化。通常是老版本库默认启用了危险的特性，而新库要求开发人员在需要时明确启用它们。
我们可以通过system-property()函数来获取库发布者的名字，该函数是XSLT v1.0d的标准，所以所有的库都实现了这一点。
正确有效的参数是：
  * xsl: vendor
  * xsl: vendor-url
  * xsl: version
下列转换可以用来判断库的发布者：
在本例中，我们测试的是Microsoft .Net System.xml实现的应用，所以system-property()函数返回值是"Microsoft":
    Microsoft
#### 数据窃取和使用XXE进行端口扫描
考虑到XSLT的文档格式是XML，那么常见的XML攻击（比如[ _Billion laughs_
attack](https://en.wikipedia.org/wiki/Billion_laughs_attack)、XML外部实体攻击）也能正常作用于XSLT，这就是很正常的一件事了。
_billion loughs_ attack是一种拒绝服务攻击，以耗尽服务器内存资源为目的。就本篇文章目的考虑，我们更倾向于XML外部实体攻击。
接下来的例子中，我们使用外部实体去获取“C:\secretfruit.txt”的内容。
    ]>
        Fruits &ext_file;:
          - : 
实体元素将文件内容放在了"ext_file"的引用中，然后通过"&ext_file"在主文档中打印显示出来。输出的结果揭示了文件的内容是"Golden
Apple"。
    Fruits Golden Apple:
          - Lemon: Yellow and sour
          - Watermelon: Round, green outside, red inside
通过该技术可以获取存储在web服务器上的文件和内部系统上的web页面（攻击者无法直接访问），也可能是包含身份认证的配置文件或者包含其他敏感信息的文件。
除此之外，攻击者亦可通过UNC路径（\\\servername\share\file）和URLs（
通过事先准备的清单上的IP地址和端口，可以根据应用程序响应来确定远程端口是打开还是关闭。比如，应用程序可能会显示不同的错误消息或在响应中引入时间延迟。
接下来的XSLT转换使用了URL： 而不是上个例子中的本地文件格式。
    ]>
        Fruits &ext_file;:
          - : 
下方的截图显示了应用程序尝试链接刚才的URL引起的错误返回，这表明了25号端口是关闭的。
接着将URL替换为 ，此时的错误信息截然不同，这暗示着1234端口是开放的。
攻击者可以使用这种技术对受害者的内部网络进行侦察扫描。
#### 数据窃取和使用document()进行端口扫描
document函数允许XSLT转换获取存储在除了主数据源以外的外部XML文档中的数据。
攻击者可以滥用document函数来读取远程系统的文件，通常是以转换结果的整个内容进行拷贝为手段。但这种攻击要求文件是格式工整的XML文档，但这并不总是个问题，因为大多数时候敏感信息总是存储在XML文件中。比如在一个asp.net
web应用中，web.config文件就是个很好的例子因为它包含了数据库认证信息。
让我们看下这种用法的例子。下面的转换可以用于窃取“C:\secrectfruit.xml”的内容：
        Fruits:
          - : 
转换的结果显示了上文提到的文件的内容:
        Golden Apple
        Round, made of Gold
        Fruits:
          - Lemon: Yellow and sour
          - Watermelon: Round, green outside, red inside
与XXE攻击相似，document()函数可以用于获取远程系统的文档并且能通过UNC路径或如下所示URL来进行基本的网络扫描：
        Fruits: