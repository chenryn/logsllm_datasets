path of delivering client messages to the server, as an inline
defense against client exploits without foreknowledge of server
vulnerabilities.
ACKNOWLEDGMENTS
We are grateful to our shepherd, Hamed Okhravi, and to
the anonymous reviewers for their constructive feedback. This
research was supported in part by grant N00014-17-1-2369
from the U.S. Ofﬁce of Naval Research.
REFERENCES
[1]
J. M. Allen,
niques,”
os-application-ﬁngerprinting-techniques-1891, Sep. 2007.
tech-
https://www.sans.org/reading-room/whitepapers/tools/
ﬁngerprinting
application
“OS
and
[2] S. Anand, P. Godefroid, and N. Tillmann, “Demand-driven composi-
tional symbolic execution,” in 14th International Conference on Tools
and Algorithms for the Construction and Analysis of Systems, ser.
LNCS, Mar. 2008, vol. 4963, pp. 367–381.
[23]
[24]
[3] Apple Corporation, “Enabling the malloc debugging features,” https:
//developer.apple.com/library/archive/documentation/Performance/
Conceptual/ManagingMemory/Articles/MallocDebug.html,
2013.
23 Apr.
[4] F. Bellard, “QEMU, a fast and portable dynamic translator,” in USENIX
Annual Technical Conference, FREENIX Track, Apr. 2005, pp. 41–46.
[5] D. Bethea, R. A. Cochran, and M. K. Reiter, “Server-side veriﬁcation
of client behavior in online games,” ACM Transactions on Information
and System Security, vol. 14, Dec. 4.
[6] E. Bosman, A. Slowinska, and H. Bos, “Minemu: The world’s fastest
taint tracker,” in Recent Advances in Intrusion Detection, 14th Interna-
tional Symposium, ser. LNCS, vol. 6961, Sep. 2011, pp. 1–20.
[7] R. S. Boyer, B. Elspas, and K. N. Levitt, “SELECT – a formal
system for testing and debugging programs by symbolic execution,”
in International Conference on Reliable Software, 1975, pp. 234–245.
[8] D. Bruening and Q. Zhao, “Practical memory checking with dr. mem-
ory,” in 9th IEEE/ACM International Symposium on Code Generation
and Optimization, Apr. 2011, pp. 213–223.
[9] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha, “Towards
automatic generation of vulnerability-based signatures,” in IEEE Sym-
posium on Security and Privacy, May 2006.
[10] C. Cadar, D. Dunbar, and D. Engler, “KLEE: Unassisted and automatic
generation of high-coverage tests for complex systems programs,” in 8th
USENIX Symposium on Operating Systems Design and Implementation,
Dec. 2008.
[11] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler,
“EXE: Automatically generating inputs of death,” in ACM Conference
on Computer and Communications Security, Oct. 2006.
[12] C. Cadar and K. Sen, “Symbolic execution for software testing: Three
decades later,” Communications of the ACM, vol. 56, no. 2, pp. 82–90,
Feb. 2013.
[13] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing
Mayhem on binary code,” in IEEE Symposium on Security and Privacy,
May 2012, pp. 380–394.
[14] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang, “Detecting privileged
side-channel attacks in shielded execution with D´ej`a Vu,” in 12th ACM
Asia Conference on Computer and Communications Security, Apr.
2017, pp. 7–18.
[15] W. Cheng, Q. Zhao, B. Yu, and S. Hiroshige, “TaintTrace: Efﬁcient
ﬂow tracing with dynamic binary rewriting,” in 11th IEEE Symposium
on Computers and Communications, Jun. 2006.
[16] A. Chi, R. A. Cochran, M. Nesﬁeld, M. K. Reiter, and C. Sturton, “A
system to verify network behavior of known cryptographic clients,” in
14th USENIX Symposium on Networked Systems Design and Implemen-
tation, Mar. 2017, p. 177–195.
[17] V. Chipounov, V. Kunetsov, and G. Candea, “The S2E platform: Design,
implementation, and applications,” ACM Transactions on Computer
Systems, vol. 30, no. 1, Feb. 2012.
[18] V. Chipounov, V. Kuznetsov, and G. Candea, “S2E: A platform for
in-vivo multi-path analysis of software systems,” in 16th International
Conference on Architectural Support for Programming Languages and
Operating Systems, 2011, pp. 265–278.
[19] R. A. Cochran and M. K. Reiter, “Toward online veriﬁcation of
client behavior in distributed applications,” in 20th ISOC Network and
Distributed System Security Symposium, Feb. 2013.
[20] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado, “Bouncer:
securing software by blocking bad input,” in 21st ACM Symposium on
Operating Systems Principles, Oct. 2007.
[21] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier,
P. Wagle, and Q. Zhang, “StackGuard: Automatic adaptive detection
and prevention of buffer-overﬂow attacks,” in 7th USENIX Security
Symposium, Jan. 1998.
[22] C. Disselkoen, D. Kohlbrenner, L. Porter,
and D. Tullsen,
“PRIME+ABORT: A timer-free high-precision L3 cache attack
using Intel TSX,” in 26th USENIX Security Symposium, 2007, pp.
51–67.
“D.U.M.A. – detect unintended memory access,” http://duma.
sourceforge.net, accessed: 25 Jul. 2020.
“fork(2),” in Linux Programmer’s Manual, 15 Sep. 2017, http://man7.
org/linux/man-pages/man2/fork.2.html.
[25] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed automated
random testing,” in ACM Conference on Programming Language De-
sign and Implementation, Jun. 2005, pp. 213–223.
[26] P. Godefroid, M. Leving, and D. Molnar, “SAGE: Whitebox fuzzing
for security testing,” Communications of the ACM, vol. 55, no. 3, pp.
40–44.
[28]
[27] M. Herlihy and J. Moss, “Transactional memory: Architectural support
for lock-free data structures,” in 20th International Symposium on
Computer Architecture, 1993, pp. 289–300.
Intel 64 and IA-32 Architectures Software Developer’s Manual, Intel,
Oct. 2019.
J. C. King, “Symbolic execution and program testing,” Communications
of the ACM, vol. 19, no. 7, pp. 385–394, 1976.
[29]
[30] A. Kleen, “TSX anti patterns in lock elision code,” https://software.
intel.com/en-us/articles/tsx-anti-patterns-in-lock-elision-code, 26 Mar.
2014.
[31] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna, “Au-
tomating mimicry attacks using static binary analysis,” in 14th USENIX
Security Symposium, Jul. 2005, pp. 161–176.
[32] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood, “Pin: Building customized
program analysis tools with dynamic instrumentation,” in 26th ACM
Conference on Programming Language Design and Implementation,
Jun. 2005.
[33] P. Maene, J. G¨otzfried, R. de Clercq, T. M¨uller, F. Freiling, and
I. Verbauwhede, “Hardware-based trusted computing architectures for
isolation and attestation,” IEEE Transactions on Computers, vol. 67,
no. 3, Mar. 2018.
[34] Microsoft Corporation, “GFlags and PageHeap,” https://docs.microsoft.
com/en-us/windows-hardware/drivers/debugger/gﬂags-and-pageheap,
23 May 2017.
[35] D. Milushev, W. Beck, and D. Clarke, “Noninterference via symbolic
execution,” in Formal Techniques for Distributed Systems, 2012.
[36] D. Monniaux, “A survey of satisﬁability modulo theory,” in 18th
International Workshop on Computer Algebra in Scientiﬁc Computing,
ser. LNCS, vol. 9890, 2016, pp. 401–425.
[37] N. Nethercote and J. Seward, “How to shadow every byte of memory
used by a program,” in 3rd International Conference on Virtual Execu-
tion Environments, Jun. 2007, pp. 65–74.
J. Newsome and D. Song, “Dynamic taint analysis for automatic
detection, analysis, and signature generation of exploits on commodity
software,” in ISOC Network and Distributed System Security Sympo-
sium, Feb. 2005.
[38]
14
[56] C. Zamﬁr and G. Candea, “Execution synthesis: A technique for auto-
mated software debugging,” in 5th European Conference on Computer
Systems, Apr. 2010, pp. 321–334.
[57] Z. Zhou, Z. Qian, M. K. Reiter, and Y. Zhang, “Static evaluation
of noninterference using approximate model counting,” in 39th IEEE
Symposium on Security and Privacy, May 2018, pp. 514–528.
APPENDIX
In this appendix, we proﬁle the process count and memory
usage of client behavioral veriﬁcation using TASE. Fig. 7
shows the process counts and memory usage involved in
verifying the 21 TLS sessions using the optimized conﬁg-
uration. The data reported in this ﬁgure was gathered by
running the top command on the veriﬁcation computer, with
3s snapshot intervals, while veriﬁcation was being performed.
Fig. 7a shows the “running” and “sleeping” processes on the
platform during the veriﬁcation, as a function of time. Most of
the processes on the computer were unrelated to veriﬁcation;
i.e., over 200 processes were sleeping on the computer before
veriﬁcation began. However, the growth in the process count
once veriﬁcation began was due to processes involved in
veriﬁcation. Most importantly, however, the number of these
processes stayed roughly ﬂat after an initial spike; i.e., the rate
of forking of new veriﬁcation processes was roughly matched
by the rate at which they exited, in this application.
(a) Running and sleeping pro-
cesses
(b) Memory usage
Fig. 7: Resource usage on veriﬁer computer during veriﬁcation
of 21 TLS connections (optimized conﬁguration) illustrated in
Fig. 4.
The memory usage on the computer grew very slowly
after an initial spike and never exceeded 3.6GB; see Fig. 7b.
This graph shows the beneﬁt of leveraging copy-on-write page
sharing and, in particular, sharing the binary representation of
LLVM instructions to use in interpretation across all of these
processes. Memory usage has not been a limiting factor for
us to date, and so has not drawn our focus; we thus expect
we can reduce this memory footprint further with a concerted
effort to do so.
[39] S. Poeplau and A. Francillon, “Symbolic execution with SymCC: Don’t
interpret, compile!” in 29th USENIX Security Symposium, Aug. 2020,
pp. 181–198.
[40] C. S. P˘as˘areanu, P. Mehlitz, D. Bushnell, K. Gundy-Burlet, M. Lowry,
S. Person, and M. Pape, “Combining unit-level symbolic execution
and system-level concrete execution for testing NASA software,” in
International Symposium on Software Testing and Analysis, Jul. 2008,
pp. 15–26.
[41] C. S. P˘as˘areanu, Q. S. Phan, and P. Malacaria, “Multi-run side-
channel analysis using symbolic execution and max-SMT,” in 29th IEEE
Computer Security Foundations Symposium, 2016, pp. 387–400.
[42] F. Qin, C. Wang, Z. Li, H. Kim, Y. Zhou, and Y. Wu, “LIFT: A
low-overhead practical information ﬂow tracking system for detecting
security attacks,” in 39th IEEE/ACM International Symposium on Mi-
croarchitecture, Dec. 2006.
[43] K. Sen, D. Marinov, and G. Agha, “CUTE: A concolic unit testing
engine for C,” in 13th International Symposium on the Foundations of
Software Engineering, Sep. 2005.
[44] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “Address-
Sanitizer: A fast address sanity checker,” in USENIX Annual Technical
Conference, Jun. 2012.
[45] M.-W. Shih, S. Lee, T. Kim, and M. Peinado, “T-SGX: Eradicating
controlled-channel attacks against enclave programs,” in ISOC Network
and Distributed System Security Symposium, Feb. 2017.
[46] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna,
“Firmalice – automatic detection of authentication bypass vulnerabilities
in binary ﬁrmware,” in ISOC Network and Distributed System Security
Symposium, Feb. 2015.
[47] S. Sidiroglou, G. Giovanidis, and A. D. Keromytis, “A dynamic mech-
anism for recovering from buffer overﬂow attacks,” in 8th International
Conference on Information Security, ser. LNCS, vol. 3650, Sep. 2005,
pp. 1–15.
[48] M. Soos, K. Nohl, and C. Castelluccia, “Extending SAT solvers to
cryptographic problems,” in 12th International Conference on Theory
and Applications of Satisﬁability Testing, ser. LNCS, vol. 5584, 2009,
pp. 244–257.
[49] N. Tillmann and J. D. Halleux, “Pex: White box test generation for
.NET,” in 2nd International Conference on Tests and Proofs, 2008, pp.
134–153.
[50] W. Visser, C. S. P˘as˘areanu, and S. Khurshid, “Test input generation
with Java PathFinder,” SIGSOFT Software Engineering Notes, vol. 29,
pp. 97–107, Jul. 2004.
[52]
[51] R. Wang, X. Wang, Z. Li, H. Tang, M. K. Reiter, and Z. Dong, “Privacy-
preserving genomic computation through program specialization,” in
16th ACM Conference on Computer and Communications Security, Nov.
2009.
J. Yang, C. Sar, P. Twohey, C. Cadar, and D. Engler, “Automatically
generating malicious disks using symbolic execution,” in IEEE Sympo-
sium on Security and Privacy, May 2006.
J. Yeongjin, S. Lee, and T. Kim, “Breaking kernel address space layout
randomization with Intel TSX,” in ACM Conference on Computer and
Communications Security, 2016, pp. 380–392.
[53]
[54] D. Yuan, H. Mai, W. Xiong, L. Tan, Y. Zhou, and S. Pasupathy, “Sher-
Log: Error diagnosis by connecting clues from run-time logs,” in 15th
International Conference on Architectural Support for Programming
Languages and Operating Systems, Mar. 2010, pp. 143–154.
I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM: A practical
concolic execution engine tailored for hybrid fuzzing,” in 27th USENIX
Security Symposium, Aug. 2018.
[55]
15
230240250260050100150200Time(s)Processes123050100150200Time(s)Memory(GB)