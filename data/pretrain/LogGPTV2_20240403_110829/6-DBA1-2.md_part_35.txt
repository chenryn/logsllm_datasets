Query OK, 1 row affected (0.11 sec)
mysql\> select \* from bbsdb.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
+\-\-\-\-\--+
2 rows in set (0.01 sec)
\[root@sql51 \~\]# mysql -uroot -p123456
mysql\> select \* from bbsdb.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
+\-\-\-\-\--+
2 rows in set (0.01 sec)
#### 2.4.3测试高可用:目前主库51故障
主库服务器51宕机后50访问VIP继续使用数据库
\[root@sql51 bin\]# systemctl stop mysqld.service
\[root@sql56 mha_manager\]# masterha_manager
\--conf=/etc/mha_manager/app1.cnf \--remove_dead_master_conf
\--igno_last_failover
Fri Feb 22 17:00:45 2019 - \[warning\] Global configuration file
/etc/masterha_default.cnf not found. Skipping.
Fri Feb 22 17:00:45 2019 - \[info\] Reading application default
configuration from /etc/mha_manager/app1.cnf..
Fri Feb 22 17:00:45 2019 - \[info\] Reading server configuration from
/etc/mha_manager/app1.cnf..
Creating /var/tmp if not exists.. Ok. #切换开始
Checking output directory is accessible or not..
ok.
Binlog found at /var/lib/mysql, up to 51log.000007
Fri Feb 22 17:03:01 2019 - \[warning\] Global configuration file
/etc/masterha_default.cnf not found. Skipping.
Fri Feb 22 17:03:01 2019 - \[info\] Reading application default
configuration from /etc/mha_manager/app1.cnf..
Fri Feb 22 17:03:01 2019 - \[info\] Reading server configuration from
/etc/mha_manager/app1.cnf..
\[root@sql56 mha_manager\]# #切换中以上状态会自动结束,到此处就切换完成
**检查1:**
50登录192.168.4.100成功,能插入数据
\[root@client-50 \~\]# mysql -h192.168.4.100 -uyaya -p123456;
mysql\> insert into bbsdb.t1 values(33);
Query OK, 1 row affected (0.08 sec)
mysql\> insert into bbsdb.t1 values(44);
Query OK, 1 row affected (0.66 sec)
**检查2:**
所有的主库配置自动由51变成52
mysql\> show slave status\\G;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Slave_IO_State: Waiting for master to send event
Master_Host: 192.168.4.52
Master_User: repluser
Master_Port: 3306
> \.....
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
**问题:**停止51:192.168.4.100未转移删除了app1.failover.error日志文件恢复
\[root@sql56 mha_manager\]# ls
app1.cnf app1.failover.error manager.log
\[root@sql56 mha_manager\]# vim app1.failover.error
\[root@sql56 mha_manager\]# rm app1.failover.error
查看manager.log日志得知EERO报错
![](media/image40.png){width="5.764583333333333in" height="1.45in"}
#### 2.4.4主机51恢复,将其加入集群,主库飘到了52,
**1恢复宕机期间的数据,从新主库52上备份数据库,放到51上恢复,**
\[root@sql51 bin\]# mysql -uroot -p123456
mysql\> select \* from bbsdb.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
+\-\-\-\-\--+
2 rows in set (0.01 sec)
\[root@sql52 \~\]# select \* form bbsdb.t1;
mysql\> select \* from bbsdb.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
\| 33 \|
\| 44 \|
+\-\-\-\-\--+
4 rows in set (0.00 sec)
\[root@sql52 bbsdb\]# mysqldump -uroot -p123456 bbsdb t1
\>/root/bbsdbt1.sql
mysqldump: \[Warning\] Using a password on the command line interface
can be insecure.
\[root@sql51 \~\]# mysql -uroot -p123456 bbsdb \ select \* from bbsdb.t1; #52上备份数据51还原之后查询数据两边一致
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
\| 33 \|
\| 44 \|
+\-\-\-\-\--+
**2配置51为从服务器,主服务配置为现有主服务器52**
mysql\> change master to
-\> master_host=\"192.168.4.52\",
-\> master_user=\"repluser\",
-\> master_password=\"123456\",
-\> master_log_file=\"52log.000002\",
-\> master_log_pos=654;
Query OK, 0 rows affected, 2 warnings (0.29 sec
mysql\> start slave;
Query OK, 0 rows affected (0.04 sec)
mysql\> show slave status \\G;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Slave_IO_State: Waiting for master to send event
Master_Host: 192.168.4.52
Master_User: repluser
Master_Port: 3306
Connect_Retry: 60
Master_Log_File: 52log.000002
Read_Master_Log_Pos: 654
Relay_Log_File: sql51-relay-bin.000002
Relay_Log_Pos: 316
Relay_Master_Log_File: 52log.000002
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
**3配置/etc/mha_manager/app1.cnf 文件添加重新添加server1的配置**
\[server1\]
candidate_master=1
hostname=192.168.4.51
**在56上重新验证数据节点的主从同步配置**
\[root@sql56 bin\]# masterha_check_repl
\--conf=/etc/mha_manager/app1.cnf
MySQL Replication Health is OK.
# NSD DBA2 DAY04
# 一:视图概述
## 什么是视图(view)
-   虚拟表(假表)
-   内容与真实的表相似,有字段有记录
-   视图并不在数据库中以存储的数据形式存在
-   行和列的数据来自定义视图时查询所引用的基表,并且在具体引用视图时动态生成
-   更新视图的数据,就是更新基表的数据
-   更新基表数据,视图的数据也会跟着改变
## 视图的优点:
简单:
用户不需关心视图中的数据如何查询获得
视图中的数据已经是过滤好的符合条件的结果集
安全:
用户只能看到视图中的数据
数据独立:
一旦视图结构确定,可以屏蔽表结构对用户的影响
# 二:视图使用
## 视图使用限制:
-   不能在视图上创建索引
-   在试图的from子句中不能使用子查询
-   以下情形中的视图是不可更新的,:
1包含以下关键字的sql语句:聚合函数(sum,min,max,count等),distinct,group
by,having,union或union all
2常量视图,join,from一个不能更新的视图
3 Where子句的子查询引用了from子句中的表
4 使用了临时表
## 创建视图:
语法格式:
create view 视图名 as SQL查询;
create view 视图名称(字段名列表) as SQL查询; #可重新命名字段名创建
在视图表中不重新定义命名字段名的话,默认使用基表的字段名,若定义字段名的话,视图表中的字段必须和基表的字段个数相同
## 使用视图:
![](media/image41.png){width="4.034722222222222in"
height="2.4368055555555554in"}
**练习:**
**创建视图v1** 结构及数据user表的字段、记录一样
mysql\> create view v1 as select \* from user;
Query OK, 0 rows affected (0.00 sec)
**创建视图v2** 只有user表shell是/bin/bash用户信息
mysql\> create view v2 as select shell from user;
Query OK, 0 rows affected (0.01 sec)
**分别对视图表和基表执行insert update delete 操作**
mysql\> insert into v1(username,uid) values(\"jarry\",9); //插入记录
Query OK, 1 row affected (0.00 sec)
mysql\> update v1 set uid=9 where username=\"adm\"; //更新记录
Query OK, 1 row affected (0.01 sec)
Rows matched: 1 Changed: 1 Warnings: 0
mysql\> delete from v1 where uid=9; //删除记录
Query OK, 2 rows affected (0.01 sec)
## 查看视图:
**查看当前库下所有表的状态信息**
Show table status;
Show table status where comment=\"view\"\\G; #查看视图类型的
**查看创建视图具体命令**
Show create view 视图名;
mysql\> show create view v6\\G;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
View: v6
Create View: CREATE ALGORITHM=UNDEFINED DEFINER=\`root\`@\`localhost\`
SQL SECURITY DEFINER VIEW \`v6\` AS select \`user\`.\`username\` AS
\`name\`,\`user2\`.\`username\` AS \`bname\` from (\`user\` join
\`user2\`) where (\`user\`.\`uid\` = \`user2\`.\`uid\`)
character_set_client: utf8
collation_connection: utf8_general_ci
1 row in set (0.00 sec)
ERROR:
No query specified
# 三:视图进阶
创建视图的完全格式
![](media/image42.png){width="4.928472222222222in"
height="2.704861111111111in"}
以下实验是建立在
mysql\> show tables;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Tables_in_db9 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| user \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
4 rows in set (0.00 sec)
User 是导入的/etc/passwd 文件的内容,详情请参阅数据导入导出
## 创建视图时覆盖原视图创建or replace
例如create or replace view v1 as select \* from user
mysql\> create view v1 as select username,uid from user;
Query OK, 0 rows affected (0.03 sec)
mysql\> create view v1 as select username,uid from user;
ERROR 1050 (42S01): Table \'v1\' already exists #已有视图V1无法创建
mysql\> create or replace view v1 as select username,uid from user;
Query OK, 0 rows affected (0.02 sec) #创建成功
## 创建视图时指定算法:algorithm
指定算法方式后,客户端访问视图时按指定算法处理
定义Algorithm=Undefined \| Merage \| temptables
Undefined :未定义(默认)
Merage:替换方式\--as后面的查询与查询视图t1表同时执行
Temptables:具体化方式\--对视图操作时,先执行创建视图时as后面的查询,结果放入内存中生成临时表,再操作视图的语句在临时表中执行.
mysql\> create algorithm=temptable view v2 as select username,uid from
user;
Query OK, 0 rows affected (0.04 sec)
mysql\> show create view v2\\G;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
View: v2
Create View: CREATE ALGORITHM=TEMPTABLE DEFINER=\`root\`@\`localhost\`
SQL SECURITY DEFINER VIEW \`v2\` AS select \`user\`.\`username\` AS
\`username\`,\`user\`.\`uid\` AS \`uid\` from \`user\`
character_set_client: utf8
collation_connection: utf8_general_ci
1 row in set (0.00 sec)
ERROR:
No query specified
## 创建视图时指定检查方式(local \| cascaded)
指定检查方式后,客户端访问视图做修改数据等操作时,按照指定检查进行操作限制
定义:with local \| cascaded check option
Local 和 cascaded 关键字决定检查的范围
Local\-\--仅检查当前视图的限制,只检查视图创建时定义的条件
Cascaded
(默认)\-\--同时要满足基表的限制条件,检查视图创建条件外还检查基表创建条件
例如:不指定为默认cascaded
Create view v1 as select \* from a where uid\<10 with check option;
解释:创建了视图v1
,创建时定义的条件为:uid\<10,定义了local检查方式后,用户修改数据时,只能修改uid\<10,同时还要检查基表a
创建时 where的条件范围