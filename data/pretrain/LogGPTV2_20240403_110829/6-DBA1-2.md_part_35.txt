### 2.4.3 测试高可用：主库51故障

在主库服务器51宕机后，通过VIP继续访问数据库。

#### 步骤
1. 停止主库51的MySQL服务：
   ```bash
   [root@sql51 bin]# systemctl stop mysqld.service
   ```

2. 在MHA管理节点上运行`masterha_manager`命令以触发故障切换：
   ```bash
   [root@sql56 mha_manager]# masterha_manager --conf=/etc/mha_manager/app1.cnf --remove_dead_master_conf --ignore_last_failover
   ```

3. 查看日志输出：
   ```plaintext
   Fri Feb 22 17:00:45 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
   Fri Feb 22 17:00:45 2019 - [info] Reading application default configuration from /etc/mha_manager/app1.cnf..
   Fri Feb 22 17:00:45 2019 - [info] Reading server configuration from /etc/mha_manager/app1.cnf..
   Creating /var/tmp if not exists.. Ok. #切换开始
   Checking output directory is accessible or not.. ok.
   Binlog found at /var/lib/mysql, up to 51log.000007
   ```

4. 故障切换完成后，检查新的主库配置：
   ```mysql
   mysql> show slave status\G;
   *************************** 1. row ***************************
   Slave_IO_State: Waiting for master to send event
   Master_Host: 192.168.4.52
   Master_User: repluser
   Master_Port: 3306
   ...
   Slave_IO_Running: Yes
   Slave_SQL_Running: Yes
   ```

#### 检查
1. **检查1**：从客户端50登录到新的主库并插入数据：
   ```mysql
   [root@client-50 ~]# mysql -h192.168.4.100 -uyaya -p123456
   mysql> insert into bbsdb.t1 values(33);
   Query OK, 1 row affected (0.08 sec)
   mysql> insert into bbsdb.t1 values(44);
   Query OK, 1 row affected (0.66 sec)
   ```

2. **检查2**：确认所有从库已自动将主库配置为52：
   ```mysql
   mysql> show slave status\G;
   *************************** 1. row ***************************
   Slave_IO_State: Waiting for master to send event
   Master_Host: 192.168.4.52
   Master_User: repluser
   Master_Port: 3306
   ...
   Slave_IO_Running: Yes
   Slave_SQL_Running: Yes
   ```

#### 问题
停止51后，发现192.168.4.100未转移。删除了`app1.failover.error`日志文件后恢复。
```bash
[root@sql56 mha_manager]# ls
app1.cnf app1.failover.error manager.log
[root@sql56 mha_manager]# vim app1.failover.error
[root@sql56 mha_manager]# rm app1.failover.error
```
查看`manager.log`日志，发现错误信息。

### 2.4.4 主库51恢复，将其加入集群

#### 步骤
1. **恢复宕机期间的数据**：从新主库52备份数据库，并在51上恢复：
   ```mysql
   [root@sql52 ~]# mysqldump -uroot -p123456 bbsdb t1 > /root/bbsdbt1.sql
   [root@sql51 ~]# mysql -uroot -p123456 bbsdb < /root/bbsdbt1.sql
   ```

2. **配置51为从服务器**，主服务器配置为现有主服务器52：
   ```mysql
   mysql> change master to
       -> master_host="192.168.4.52",
       -> master_user="repluser",
       -> master_password="123456",
       -> master_log_file="52log.000002",
       -> master_log_pos=654;
   Query OK, 0 rows affected, 2 warnings (0.29 sec)
   mysql> start slave;
   Query OK, 0 rows affected (0.04 sec)
   ```

3. **验证从库状态**：
   ```mysql
   mysql> show slave status \G;
   *************************** 1. row ***************************
   Slave_IO_State: Waiting for master to send event
   Master_Host: 192.168.4.52
   Master_User: repluser
   Master_Port: 3306
   Connect_Retry: 60
   Master_Log_File: 52log.000002
   Read_Master_Log_Pos: 654
   Relay_Log_File: sql51-relay-bin.000002
   Relay_Log_Pos: 316
   Relay_Master_Log_File: 52log.000002
   Slave_IO_Running: Yes
   Slave_SQL_Running: Yes
   ```

4. **更新MHA配置文件**，重新添加server1的配置：
   ```ini
   [server1]
   candidate_master=1
   hostname=192.168.4.51
   ```

5. **重新验证数据节点的主从同步配置**：
   ```bash
   [root@sql56 bin]# masterha_check_repl --conf=/etc/mha_manager/app1.cnf
   MySQL Replication Health is OK.
   ```

### 一: 视图概述

#### 什么是视图（view）
- 虚拟表（假表）
- 内容与真实的表相似，有字段和记录
- 视图并不在数据库中以存储的数据形式存在
- 行和列的数据来自定义视图时查询所引用的基表，并且在具体引用视图时动态生成
- 更新视图的数据，就是更新基表的数据
- 更新基表数据，视图的数据也会跟着改变

#### 视图的优点
- 简单：用户不需关心视图中的数据如何查询获得
- 安全：用户只能看到视图中的数据
- 数据独立：一旦视图结构确定，可以屏蔽表结构对用户的影响

### 二: 视图使用

#### 视图使用限制
- 不能在视图上创建索引
- 在视图的FROM子句中不能使用子查询
- 以下情形中的视图是不可更新的：
  1. 包含以下关键字的SQL语句：聚合函数（如SUM, MIN, MAX, COUNT等）、DISTINCT、GROUP BY、HAVING、UNION或UNION ALL
  2. 常量视图、JOIN、FROM一个不能更新的视图
  3. WHERE子句的子查询引用了FROM子句中的表
  4. 使用了临时表

#### 创建视图
语法格式：
```sql
CREATE VIEW 视图名 AS SQL查询;
CREATE VIEW 视图名称(字段名列表) AS SQL查询; -- 可重新命名字段名创建
```
- 在视图表中不重新定义命名字段名的话，默认使用基表的字段名
- 若定义字段名的话，视图表中的字段必须和基表的字段个数相同

#### 使用视图
- 练习：创建视图v1，结构及数据与user表的字段、记录一样
  ```sql
  mysql> create view v1 as select * from user;
  Query OK, 0 rows affected (0.00 sec)
  ```
- 创建视图v2，只有user表中shell为/bin/bash的用户信息
  ```sql
  mysql> create view v2 as select shell from user where shell = '/bin/bash';
  Query OK, 0 rows affected (0.01 sec)
  ```
- 分别对视图表和基表执行INSERT、UPDATE、DELETE操作
  ```sql
  mysql> insert into v1(username, uid) values("jarry", 9); -- 插入记录
  Query OK, 1 row affected (0.00 sec)
  mysql> update v1 set uid=9 where username="adm"; -- 更新记录
  Query OK, 1 row affected (0.01 sec)
  Rows matched: 1  Changed: 1  Warnings: 0
  mysql> delete from v1 where uid=9; -- 删除记录
  Query OK, 2 rows affected (0.01 sec)
  ```

#### 查看视图
- 查看当前库下所有表的状态信息
  ```sql
  SHOW TABLE STATUS;
  SHOW TABLE STATUS WHERE Comment='VIEW'\G; -- 查看视图类型的
  ```
- 查看创建视图的具体命令
  ```sql
  SHOW CREATE VIEW 视图名;
  mysql> show create view v6\G;
  *************************** 1. row ***************************
  View: v6
  Create View: CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v6` AS select `user`.`username` AS `name`, `user2`.`username` AS `bname` from (`user` join `user2`) where (`user`.`uid` = `user2`.`uid`)
  character_set_client: utf8
  collation_connection: utf8_general_ci
  1 row in set (0.00 sec)
  ```

### 三: 视图进阶

#### 创建视图的完全格式
- 以下实验是基于以下表结构：
  ```sql
  mysql> show tables;
  +------------------+
  | Tables_in_db9    |
  +------------------+
  | user             |
  +------------------+
  4 rows in set (0.00 sec)
  ```

- 创建视图时覆盖原视图
  ```sql
  mysql> create or replace view v1 as select username, uid from user;
  Query OK, 0 rows affected (0.02 sec)
  ```

- 创建视图时指定算法
  - 指定算法方式后，客户端访问视图时按指定算法处理
  - 定义Algorithm=Undefined | Merge | Temptables
  - Undefined: 未定义（默认）
  - Merge: 替换方式
  - Temptables: 具体化方式
  ```sql
  mysql> create algorithm=temptable view v2 as select username, uid from user;
  Query OK, 0 rows affected (0.04 sec)
  ```

- 创建视图时指定检查方式
  - 指定检查方式后，客户端访问视图做修改数据等操作时，按照指定检查进行操作限制
  - 定义: with local | cascaded check option
  - Local: 仅检查当前视图的限制
  - Cascaded (默认): 同时要满足基表的限制条件
  ```sql
  mysql> create view v1 as select * from a where uid<10 with check option;
  ```

希望这些优化后的文本更加清晰、连贯和专业。如果有进一步的问题或需要更多的帮助，请告诉我！