Intel PT. In International Conference on Computational Science and Its Applications.
Springer, 127–137.
[34] Hans Liljestrand, Thomas Nyman, Kui Wang, Carlos Chinea Perez, Jan-Erik Ek-
berg, and N Asokan. 2019. {PAC} it up: Towards Pointer Integrity using {ARM}
Pointer Authentication. In 28th {USENIX} Security Symposium ({USENIX} Secu-
rity 19). 177–194.
[35] MihaiBudiu MartnAbadi and Jay Ligatti ÚlfarErlingsson. 2005. Control flow
integrity: Principles, implementations, and applications. In Proceedings of the 12th
ACM Conference on Computer and Communications Security, Alexandria, Virginia.
340–353.
[36] Ali Jose Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières. 2015. CCFI:
Cryptographically enforced control flow integrity. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Security. ACM, 941–951.
[37] Vishwath Mohan, Per Larsen, Stefan Brunthaler, Kevin W Hamlen, and Michael
Franz. 2015. Opaque Control-Flow Integrity.. In NDSS, Vol. 26. 27–30.
[38] Marius Muench, Fabio Pagani, Yan Shoshitaishvili, Christopher Kruegel, Giovanni
Vigna, and Davide Balzarotti. 2016. Taming transactions: Towards hardware-
assisted control flow integrity using transactional memory. In International Sym-
posium on Research in Attacks, Intrusions, and Defenses. Springer, 24–48.
[39] Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags,
and Claudia Eckert. 2019. Analyzing Control Flow Integrity with LLVM-CFI.
arXiv preprint arXiv:1910.01485 (2019).
[40] Ben Niu and Gang Tan. 2014. Modular control-flow integrity. In ACM SIGPLAN
Notices, Vol. 49. ACM, 577–587.
[41] Ben Niu and Gang Tan. 2014. RockJIT: Securing just-in-time compilation using
modular control-flow integrity. In Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 1317–1328.
[42] Ben Niu and Gang Tan. 2015. Per-input control-flow integrity. In Proceedings
of the 22nd ACM SIGSAC Conference on Computer and Communications Security.
ACM, 914–926.
[43] Thomas Nyman, Jan-Erik Ekberg, Lucas Davi, and N Asokan. 2017. CFI CaRE:
Hardware-supported call and return enforcement for commercial microcon-
trollers. In International Symposium on Research in Attacks, Intrusions, and De-
fenses. Springer, 259–284.
[44] Vasilis Pappas. 2012. kBouncer: Efficient and transparent ROP mitigation. Apr 1
(2012), 1–2.
[45] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2013. Trans-
parent {ROP} Exploit Mitigation Using Indirect Branch Tracing. In Presented as
part of the 22nd {USENIX} Security Symposium ({USENIX} Security 13). 447–462.
[46] Mathias Payer, Antonio Barresi, and Thomas R Gross. 2015. Fine-grained control-
flow integrity through binary hardening. In International Conference on Detection
of Intrusions and Malware, and Vulnerability Assessment. Springer, 144–164.
[47] Jannik Pewny and Thorsten Holz. 2013. Control-flow restrictor: Compiler-based
CFI for iOS. In Proceedings of the 29th Annual Computer Security Applications
Conference. ACM, 309–318.
[48] Aravind Prakash, Xunchao Hu, and Heng Yin. 2015. vfGuard: Strict Protection
for Virtual Function Calls in COTS C++ Binaries.. In NDSS.
[49] Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage. 2012. Return-
oriented programming: Systems, languages, and applications. ACM Transactions
on Information and System Security (TISSEC) 15, 1 (2012), 2.
[50] Pawel Sarbinowski, Vasileios P Kemerlis, Cristiano Giuffrida, and Elias Athana-
sopoulos. 2016. VTPin: practical VTable hijacking protection for binaries. In
Session 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1833Proceedings of the 32nd Annual Conference on Computer Security Applications.
ACM, 448–459.
[51] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit object-oriented programming: On
the difficulty of preventing code reuse attacks in C++ applications. In 2015 IEEE
Symposium on Security and Privacy. IEEE, 745–762.
[52] Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David Melski. 2015.
Exploiting and Protecting Dynamic Code Generation.. In NDSS.
[53] Yulei Sui and Jingling Xue. 2016. On-demand strong update analysis via value-
flow refinement. In Proceedings of the 2016 24th ACM SIGSOFT international
symposium on foundations of software engineering. ACM, 460–473.
[54] Jack Tang and Trend Micro Threat Solution Team. 2015. Exploring control flow
guard in windows 10. Available at ht tp://blog. trendmicro. c om/trendlabssecurity-
intelligence/exploring-control-flow-guard-in-windows 10 (2015).
[55] PaX Team. 2015. Rap: Rip rop. In Hackers 2 Hackers Conference (H2HC).
[56] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity. In in GCC & LLVM. In 23rd USENIX Security Symposium (USENIX
Security 14)(Aug. 2014), USENIX Association. Citeseer.
[57] Victor Van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical context-
sensitive CFI. In Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security. ACM, 927–940.
[58] Victor Van Der Veen, Enes Göktas, Moritz Contag, Andre Pawoloski, Xi Chen,
Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano
Giuffrida. 2016. A tough call: Mitigating advanced code-reuse attacks at the
binary level. In 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 934–953.
[59] Robert J Walls, Nicholas F Brown, Thomas Le Baron, Craig A Shue, Hamed
Okhravi, and Bryan C Ward. 2019. Control-Flow Integrity for Real-Time Embed-
ded Systems. In 31st Euromicro Conference on Real-Time Systems (ECRTS 2019).
Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[60] Minghua Wang, Heng Yin, Abhishek Vasisht Bhaskar, Purui Su, and Dengguo
Feng. 2015. Binary code continent: Finer-grained control flow integrity for
stripped binaries. In Proceedings of the 31st Annual Computer Security Applications
Conference. ACM, 331–340.
[61] Wenhao Wang, Xiaoyang Xu, and Kevin W Hamlen. 2017. Object flow integrity. In
Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 1909–1924.
[62] Zhi Wang and Xuxian Jiang. 2010. Hypersafe: A lightweight approach to provide
lifetime hypervisor control-flow integrity. In 2010 IEEE Symposium on Security
and Privacy. IEEE, 380–395.
[63] Mario Werner, Thomas Unterluggauer, David Schaffenrath, and Stefan Mangard.
2018. Sponge-based control-flow protection for iot devices. In 2018 IEEE European
Symposium on Security and Privacy (EuroS&P). IEEE, 214–226.
[64] Mario Werner, Erich Wenger, and Stefan Mangard. 2015. Protecting the control
flow of embedded processors against fault attacks. In International Conference on
Smart Card Research and Advanced Applications. Springer, 161–176.
[65] John Wilander, Nick Nikiforakis, Yves Younan, Mariam Kamkar, and Wouter
Joosen. 2011. RIPE: Runtime Intrusion Prevention Evaluator. In In Proceedings of
the 27th Annual Computer Security Applications Conference, ACSAC. ACM.
[66] Yubin Xia, Yutao Liu, Haibo Chen, and Binyu Zang. 2012. CFIMon: Detecting
violation of control flow integrity using performance counters. In IEEE/IFIP
International Conference on Dependable Systems and Networks (DSN 2012). IEEE,
1–12.
[67] Jun Xu, Zbigniew Kalbarczyk, Sanjay Patel, and Ravishankar K Iyer. 2002. Ar-
chitecture support for defending against buffer overflow attacks. Coordinated
Science Laboratory Report no. UILU-ENG-02-2205, CRHC-02-05 (2002).
[68] Xiaoyang Xu, Masoud Ghaffarinia, Wenhao Wang, Kevin W Hamlen, and
Zhiqiang Lin. 2019. {CONFIRM}: Evaluating Compatibility and Relevance of
Control-flow Integrity Protections for Modern Software. In 28th {USENIX} Secu-
rity Symposium ({USENIX} Security 19). 1805–1821.
[69] Chao Zhang, Mehrdad Niknami, Kevin Zhijie Chen, Chengyu Song, Zhaofeng
Chen, and Dawn Song. 2015.
JITScope: Protecting web users from control-
flow hijacking attacks. In 2015 IEEE Conference on Computer Communications
(INFOCOM). IEEE, 567–575.
[70] Chao Zhang, Chengyu Song, Kevin Zhijie Chen, Zhaofeng Chen, and Dawn Song.
2015. VTint: Protecting Virtual Function Tables’ Integrity.. In NDSS.
Chengyu Song. 2016. VTrust: Regaining Trust on Virtual Calls.. In NDSS.
[72] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dawn Song, and Wei Zou. 2013. Practical control flow integrity and
randomization for binary executables. In 2013 IEEE Symposium on Security and
Privacy. IEEE, 559–573.
[73] Jun Zhang, Rui Hou, Junfeng Fan, Ke Liu, Lixin Zhang, and Sally A McKee.
2017. RAGuard: A hardware based mechanism for backward-edge control-flow
integrity. In Proceedings of the Computing Frontiers Conference. ACM, 27–34.
[74] Jiliang Zhang, Binhang Qi, Zheng Qin, and Gang Qu. 2018. HCIC: Hardware-
assisted control-flow integrity checking.
IEEE Internet of Things Journal 6, 1
(2018), 458–471.
[75] Mingwei Zhang and R Sekar. 2013. Control Flow Integrity for {COTS} Binaries.
In Presented as part of the 22nd {USENIX} Security Symposium ({USENIX} Security
13). 337–352.
[71] Chao Zhang, Dawn Song, Scott A Carr, Mathias Payer, Tongxin Li, Yu Ding, and
Session 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1834A Appendix
Category
Theoretical
Verification
Experimental
Verification
Quantitative
Analysis
Table A3: Existing security evaluation methods used in previous CFI studies.
method
Theoretical
Methods
Advanced Exploits,
Known CVE Vulnerabilities
RIPE test suite
Number of
code gadgets
Average Indirect-target
Reduction (AIR)
Number of theoretically
allowed targets
Paper
SafeDispatch [28], VM-CFI [33], HyperSafe [62], RAGuard [73], TSX-based CFI [38]
CFI CaRE [43], PARTS [34], SOFIA [18], [64], [6], [8], Control-flow restrictor [47], C-FLAT [4]
π CFI [42], CFIMon [66], CCFIR [72], CFIXX [10], [20], µCFI [27],
τ CFI [24], Lockdown [46], OSck [26], PT-CFI [25], kGUARD [29], vfGUARD [48],
VTPIN [50], Binary code continent [60], OFI [61], JITDefender [11], PITTYPAT [19],
kBouncer [44], ROPecker [12], TypeArmor [58], VTrust [71], VTint [70], [45], CFIBR [17],
HCFI [13], HAFIX [16], OS-CFI [31], CFI-LB [30], CFI CaRE [43], [20], [59] ECFI [3], MoCFI [15], SCFP [63]
GRIFFIN [21], CPI [32], BinCFI [75], CFI-LB [30]
CCFIR [72], [22], CCFI [36], BinCFI [75], Opaque CFI [37], MCFI [40],
RockJIT [41], PathArmor [57], KCoFI [14]
MCFI [40], LockDown [46], BinCFI [75], [22], τ CFI [24], vfGUARD [48],
GCC-VTV & Clang-CFI [56], Binary code continent [60], KCoFI [14], HCIC [74]
PathArmor [57], π CFI [42], TypeArmor [58], PITTYPAT [19], OS-CFI[31], CFI-LB[30], µCFI [27]
Table A4: Comparison between CFI evaluations.
Evaluation
Motivation
Type of Methods
Evaluation Targets
CFI survey [9]
ConFIRM [68]
LLVM-CFI [39]
Our Work
Accuracy, Security,
and Performance
Compatibility
Security
Security
Measurement
Measurement
Estimation
Measurement
Accuracy of CFG (Security),
Runtime Overhead (Performance)
Coding Features and Idioms
Accuracy of CFG
Targets of ICT
Evaluation methods
EC (Equivalence Classes)
/ LC (Largest Class)
Compatible or Not
Theoretical Result
Count of Feasible Targets and
Effectiveness Against Typical Attacks
Scalability
Scalable
Scalable
Static CFI only
Scalable
Table A5: CBench test suite details.
Indirect Call
Virtual Call
Indirect Jump
Classification
Code Pointer Overwrite
Code Pointer Reuse
VTable Injection
Exploitation Primitives
Overwrite specific code ptr
Reuse specific code ptr
Overwrite specific vptr
VTable Reuse
Tail Call Overwrite
Tail Call Reuse
setjmp/longjmp
Reuse specific vptr
COOP
Overwrite specific code ptr
Reuse specific code ptr
Overwrite specific code ptr
Return Address
Return Address Overwrite
Overwrite specific code ptr
Type Confusion
Type Confusion
Assembly Support
Function Type Confusion
Object Type Confusion
Indirect Call
Indirect Jump
Code Pointer Overwrite
Code Pointer Reuse
Cross DSO Support
Callback
Overwrite specific code ptr
Overwrite specific code ptr
Overwrite specific code ptr
Reuse specific code ptr
Overwrite specific vptr
Object Injection
Object Reuse
Code Pointer Overwrite Overwrite specific code ptr
Reuse specific vptr
Code Pointer Reuse
Object Injection
Object Reuse
Reuse specific code ptr
Overwrite specific vptr
COOP
Return Address Overwrite
Overwrite specific code ptr
vDSO Support
Code Pointer Overwrite
Overwrite specific code ptr
Targets of Control-flow Hijacking
Function entry of the same/different type , Non-function entry
Function entry of the same/different type
(virtual) Function entry of the same/different type, Non-function entry
Same virtual function of base class/subclass, the original
virtual function, Virtual function of the same/different type
Same virtual function of base class/subclass, the original
virtual function, Virtual function of the same/different type
Function entry of the same/different type, Non-function entry
Function entry of the same/different type
Other call site, Function entry, Non-function entry
Different call site for the same function with the same/different sp,
Different call site for the different function with the same sp,
Other call site, Function entry, code gadgets
Different type
Different type
Function entry of the same/different type, Non-function entry
Function entry (of same/different type), Non-function entry
Function entry of the same/different type, Non-function entry
Function entry of the same/different type
Function entry of the same/different type, Non-function entry
Same virtual function of base class/subclass, the original
virtual functions, Virtual function of the same/different type
Function entry of the same/different type, Non-function entry
Function entry of the same/different type
Function entry of the same/different type, Non-function entry
Same virtual function of base class/subclass, the original
virtual functions, Virtual function of the same/different type
Different call site for the same function with the same/different sp,
Different call site for the different function with the same sp,
Other call site, Function entry, code gadgets
other vDSO functions
Vulnerability Category
Stack-based Overflow
Out-of-bound Access
Heap-based Overflow
Use-after-free
Heap-based Overflow
Integer overflow caused Stack-based Overflow
Race condition caused Out-of-bound Access
Heap-based Overflow
Stack-based Overflow
Type Confusion
Type Confusion
Stack-based Overflow
Stack-based Overflow
Arbitrary-address-write
Out-of-bound Access
Heap-based Overflow
Use-after-free
Arbitrary-address-write
Out-of-bound Access
Heap-based Overflow
Heap-based Overflow
Stack-based Overflow
Global-buffer-based Overflow
Session 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1835