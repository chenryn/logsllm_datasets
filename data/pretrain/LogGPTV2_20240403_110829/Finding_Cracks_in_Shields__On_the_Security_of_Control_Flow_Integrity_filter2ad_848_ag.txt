以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

1. **Intel PT**。在《国际计算科学及其应用会议》上发表。Springer, 127–137。
2. **Hans Liljestrand, Thomas Nyman, Kui Wang, Carlos Chinea Perez, Jan-Erik Ekberg, and N Asokan**。2019年。PAC it up: 使用ARM指针认证实现指针完整性。在第28届USENIX安全研讨会（USENIX Security 19）上发表。177–194页。
3. **Mihai Budiu, Martín Abadi, Jay Ligatti, and Úlfar Erlingsson**。2005年。控制流完整性：原则、实现及应用。在第12届ACM计算机与通信安全会议上发表，地点为弗吉尼亚州亚历山大市。340–353页。
4. **Ali Jose Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières**。2015年。CCFI：基于密码学的控制流完整性。在第22届ACM SIGSAC计算机与通信安全会议上发表。ACM, 941–951页。
5. **Vishwath Mohan, Per Larsen, Stefan Brunthaler, Kevin W Hamlen, and Michael Franz**。2015年。不透明的控制流完整性。在NDSS会议上发表，第26卷。27–30页。
6. **Marius Muench, Fabio Pagani, Yan Shoshitaishvili, Christopher Kruegel, Giovanni Vigna, and Davide Balzarotti**。2016年。驯服事务：使用事务内存实现硬件辅助的控制流完整性。在《国际攻击、入侵和防御研究研讨会》上发表。Springer, 24–48页。
7. **Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags, and Claudia Eckert**。2019年。使用LLVM-CFI分析控制流完整性。arXiv预印本 arXiv:1910.01485 (2019)。
8. **Ben Niu and Gang Tan**。2014年。模块化控制流完整性。在《ACM SIGPLAN通知》，第49卷。ACM, 577–587页。
9. **Ben Niu and Gang Tan**。2014年。RockJIT：使用模块化控制流完整性保护即时编译。在第2014届ACM SIGSAC计算机与通信安全会议上发表。ACM, 1317–1328页。
10. **Ben Niu and Gang Tan**。2015年。每个输入的控制流完整性。在第22届ACM SIGSAC计算机与通信安全会议上发表。ACM, 914–926页。
11. **Thomas Nyman, Jan-Erik Ekberg, Lucas Davi, and N Asokan**。2017年。CFI CaRE：商业微控制器的硬件支持调用和返回强制执行。在《国际攻击、入侵和防御研究研讨会》上发表。Springer, 259–284页。
12. **Vasilis Pappas**。2012年。kBouncer：高效且透明的ROP缓解措施。2012年4月1日，1–2页。
13. **Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis**。2013年。使用间接分支跟踪进行透明ROP攻击缓解。在第22届USENIX安全研讨会（USENIX Security 13）上发表。447–462页。
14. **Mathias Payer, Antonio Barresi, and Thomas R Gross**。2015年。通过二进制强化实现细粒度控制流完整性。在《国际入侵检测、恶意软件和漏洞评估会议》上发表。Springer, 144–164页。
15. **Jannik Pewny and Thorsten Holz**。2013年。控制流限制器：iOS的编译器级CFI。在第29届年度计算机安全应用会议上发表。ACM, 309–318页。
16. **Aravind Prakash, Xunchao Hu, and Heng Yin**。2015年。vfGuard：COTS C++二进制文件中虚拟函数调用的严格保护。在NDSS会议上发表。
17. **Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage**。2012年。返回导向编程：系统、语言和应用。ACM信息与系统安全事务（TISSEC）15, 1 (2012), 2页。
18. **Pawel Sarbinowski, Vasileios P Kemerlis, Cristiano Giuffrida, and Elias Athanasopoulos**。2016年。VTPin：针对二进制文件的实际VTable劫持保护。在第32届年度计算机安全应用会议上发表。ACM, 448–459页。
19. **Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz**。2015年。假冒面向对象编程：关于防止C++应用程序中的代码重用攻击的难度。在2015 IEEE安全与隐私研讨会上发表。IEEE, 745–762页。
20. **Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David Melski**。2015年。利用和保护动态代码生成。在NDSS会议上发表。
21. **Yulei Sui and Jingling Xue**。2016年。按需强更新分析通过值流细化。在第24届ACM SIGSOFT国际软件工程基础研讨会上发表。ACM, 460–473页。
22. **Jack Tang and Trend Micro Threat Solution Team**。2015年。探索Windows 10中的控制流保护。可访问于：http://blog.trendmicro.com/trendlabs-security-intelligence/exploring-control-flow-guard-in-windows-10 (2015)。
23. **PaX Team**。2015年。Rap: Rip rop。在黑客对黑客会议（H2HC）上发表。
24. **Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike**。2014年。强制前向边控制流完整性。在GCC & LLVM会议上发表。在第23届USENIX安全研讨会（USENIX Security 14）上发表。Citeseer。
25. **Victor Van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida**。2015年。实用上下文敏感CFI。在第22届ACM SIGSAC计算机与通信安全会议上发表。ACM, 927–940页。
26. **Victor Van Der Veen, Enes Göktas, Moritz Contag, Andre Pawoloski, Xi Chen, Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano Giuffrida**。2016年。一个艰难的选择：在二进制级别缓解高级代码重用攻击。在2016 IEEE安全与隐私研讨会上发表。IEEE, 934–953页。
27. **Robert J Walls, Nicholas F Brown, Thomas Le Baron, Craig A Shue, Hamed Okhravi, and Bryan C Ward**。2019年。实时嵌入式系统的控制流完整性。在第31届Euromicro实时系统会议上发表。Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik。
28. **Minghua Wang, Heng Yin, Abhishek Vasisht Bhaskar, Purui Su, and Dengguo Feng**。2015年。二进制代码大陆：更细粒度的控制流完整性用于剥离二进制文件。在第31届年度计算机安全应用会议上发表。ACM, 331–340页。
29. **Wenhao Wang, Xiaoyang Xu, and Kevin W Hamlen**。2017年。对象流完整性。在第2017届ACM SIGSAC计算机与通信安全会议上发表。ACM, 1909–1924页。
30. **Zhi Wang and Xuxian Jiang**。2010年。Hypersafe：一种轻量级方法提供生命周期管理程序控制流完整性。在2010 IEEE安全与隐私研讨会上发表。IEEE, 380–395页。
31. **Mario Werner, Thomas Unterluggauer, David Schaffenrath, and Stefan Mangard**。2018年。基于海绵的物联网设备控制流保护。在2018 IEEE欧洲安全与隐私研讨会上发表。IEEE, 214–226页。
32. **Mario Werner, Erich Wenger, and Stefan Mangard**。2015年。保护嵌入式处理器免受故障攻击的控制流。在智能卡研究和高级应用国际会议上发表。Springer, 161–176页。
33. **John Wilander, Nick Nikiforakis, Yves Younan, Mariam Kamkar, and Wouter Joosen**。2011年。RIPE：运行时入侵预防评估器。在第27届年度计算机安全应用会议上发表。ACM。
34. **Yubin Xia, Yutao Liu, Haibo Chen, and Binyu Zang**。2012年。CFIMon：使用性能计数器检测控制流完整性的违反。在IEEE/IFIP国际依赖系统和网络会议上发表。IEEE, 1–12页。
35. **Jun Xu, Zbigniew Kalbarczyk, Sanjay Patel, and Ravishankar K Iyer**。2002年。架构支持以抵御缓冲区溢出攻击。协调科学实验室报告编号UILU-ENG-02-2205, CRHC-02-05 (2002)。
36. **Xiaoyang Xu, Masoud Ghaffarinia, Wenhao Wang, Kevin W Hamlen, and Zhiqiang Lin**。2019年。CONFIRM：评估现代软件的控制流完整性保护的兼容性和相关性。在第28届USENIX安全研讨会（USENIX Security 19）上发表。1805–1821页。
37. **Chao Zhang, Mehrdad Niknami, Kevin Zhijie Chen, Chengyu Song, Zhaofeng Chen, and Dawn Song**。2015年。JITScope：保护Web用户免受控制流劫持攻击。在2015 IEEE计算机通信会议上发表。IEEE, 567–575页。
38. **Chao Zhang, Chengyu Song, Kevin Zhijie Chen, Zhaofeng Chen, and Dawn Song**。2015年。VTint：保护虚拟函数表的完整性。在NDSS会议上发表。
39. **Chengyu Song**。2016年。VTrust：重新获得对虚拟调用的信任。在NDSS会议上发表。
40. **Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen McCamant, Dawn Song, and Wei Zou**。2013年。二进制可执行文件的实际控制流完整性和随机化。在2013 IEEE安全与隐私研讨会上发表。IEEE, 559–573页。
41. **Jun Zhang, Rui Hou, Junfeng Fan, Ke Liu, Lixin Zhang, and Sally A McKee**。2017年。RAGuard：基于硬件的后向边控制流完整性机制。在计算前沿会议上发表。ACM, 27–34页。
42. **Jiliang Zhang, Binhang Qi, Zheng Qin, and Gang Qu**。2018年。HCIC：硬件辅助控制流完整性检查。IEEE物联网期刊6, 1 (2018), 458–471页。
43. **Mingwei Zhang and R Sekar**。2013年。COTS二进制文件的控制流完整性。在第22届USENIX安全研讨会（USENIX Security 13）上发表。337–352页。

### 附录

#### 表A3：现有CFI研究中使用的安全评估方法
| 方法 | 理论方法 | 高级攻击 | 已知CVE漏洞 | RIPE测试套件 | 代码片段数量 | 平均间接目标减少（AIR） | 理论允许的目标数量 |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 论文 | SafeDispatch [28], VM-CFI [33], HyperSafe [62], RAGuard [73], TSX-based CFI [38] | CFI CaRE [43], PARTS [34], SOFIA [18], [64], [6], [8], Control-flow restrictor [47], C-FLAT [4] | π CFI [42], CFIMon [66], CCFIR [72], CFIXX [10], [20], µCFI [27], τ CFI [24], Lockdown [46], OSck [26], PT-CFI [25], kGUARD [29], vfGUARD [48], VTPIN [50], Binary code continent [60], OFI [61], JITDefender [11], PITTYPAT [19], kBouncer [44], ROPecker [12], TypeArmor [58], VTrust [71], VTint [70], [45], CFIBR [17], HCFI [13], HAFIX [16], OS-CFI [31], CFI-LB [30], CFI CaRE [43], [20], [59] ECFI [3], MoCFI [15], SCFP [63] | GRIFFIN [21], CPI [32], BinCFI [75], CFI-LB [30] | CCFIR [72], [22], CCFI [36], BinCFI [75], Opaque CFI [37], MCFI [40], RockJIT [41], PathArmor [57], KCoFI [14] | MCFI [40], LockDown [46], BinCFI [75], [22], τ CFI [24], vfGUARD [48], GCC-VTV & Clang-CFI [56], Binary code continent [60], KCoFI [14], HCIC [74] | PathArmor [57], π CFI [42], TypeArmor [58], PITTYPAT [19], OS-CFI[31], CFI-LB[30], µCFI [27] |

#### 表A4：CFI评估之间的比较
| 评估 | 动机 | 方法类型 | 评估目标 |
| --- | --- | --- | --- |
| CFI调查 [9] | 准确性、安全性和性能 | 测量 | 控制流图的准确性（安全性），运行时开销（性能） |
| ConFIRM [68] | 兼容性 | 测量 | 编码特性和习惯用法 |
| LLVM-CFI [39] | 安全性 | 测量 | 控制流图的准确性 |
| 我们的工作 | 安全性 | 估计 | ICT目标的数量和典型攻击的有效性 |
| 扩展性 | 可扩展 | 可扩展 | 仅静态CFI | 可扩展 |

#### 表A5：CBench测试套件详细信息
| 分类 | 间接调用 | 虚拟调用 | 间接跳转 | 代码指针覆盖 | 代码指针重用 | VTable注入 | 尾调用覆盖 | 尾调用重用 | setjmp/longjmp | VTable重用 | COOP | 返回地址 | 返回地址覆盖 | 类型混淆 | 汇编支持 | 函数类型混淆 | 对象类型混淆 | 交叉DSO支持 | 回调 | 对象注入 | 对象重用 | vDSO支持 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 目标 | 同类型/不同类型函数入口 | 同类型/不同类型函数入口 | 同类型/不同类型的（虚拟）函数入口，非函数入口 | 基类/子类相同虚拟函数，原始虚拟函数，同类型/不同类型虚拟函数 | 同类型/不同类型函数入口 | 同类型/不同类型函数入口 | 不同调用站点的相同函数，具有相同/不同的栈指针，不同调用站点的不同函数，具有相同的栈指针，其他调用站点，函数入口，代码片段 | 不同类型 | 同类型/不同类型函数入口 | 同类型/不同类型函数入口 | 同类型/不同类型函数入口 | 同类型/不同类型函数入口 | 基类/子类相同虚拟函数，原始虚拟函数，同类型/不同类型虚拟函数 | 同类型/不同类型函数入口 | 同类型/不同类型函数入口 | 同类型/不同类型函数入口 | 基类/子类相同虚拟函数，原始虚拟函数，同类型/不同类型虚拟函数 | 不同调用站点的相同函数，具有相同/不同的栈指针，不同调用站点的不同函数，具有相同的栈指针，其他调用站点，函数入口，代码片段 | 其他vDSO函数 |
| 漏洞类别 | 栈溢出 | 越界访问 | 堆溢出 | 使用后释放 | 整数溢出导致的栈溢出 | 竞态条件导致的越界访问 | 堆溢出 | 栈溢出 | 类型混淆 | 类型混淆 | 栈溢出 | 栈溢出 | 任意地址写 | 越界访问 | 堆溢出 | 使用后释放 | 任意地址写 | 越界访问 | 堆溢出 | 堆溢出 | 栈溢出 | 全局缓冲溢出 |

---