    8053f462 6aff            push    0FFFFFFFFh
    8053f464 ff7028          push    dword ptr [eax+28h]
    8053f467 ff702c          push    dword ptr [eax+2Ch]
    8053f46a ff7030          push    dword ptr [eax+30h]
    8053f46d ff7054          push    dword ptr [eax+54h]
    8053f470 ff7048          push    dword ptr [eax+48h]
    8053f473 ff705c          push    dword ptr [eax+5Ch]
    8053f476 6a00            push    0
    8053f478 6a00            push    0
    8053f47a 6a00            push    0
    8053f47c 6a00            push    0
    8053f47e 6a00            push    0
    8053f480 6a00            push    0
    8053f482 6a00            push    0
    8053f484 6a00            push    0
    8053f486 6a00            push    0
    8053f488 6a00            push    0
    8053f48a ff7020          push    dword ptr [eax+20h]
    8053f48d ff703c          push    dword ptr [eax+3Ch]
    8053f490 8bec            mov     ebp,esp
    8053f492 833ddcaf548000  cmp     dword ptr [nt!KiAbiosPresent+0x8 (8054afdc)],0
    8053f499 7502            jne     nt!KiTrap02+0xa1 (8053f49d)
    nt!KiTrap02+0x9f:
    8053f49b eb24            jmp     nt!KiTrap02+0xc5 (8053f4c1)
    nt!KiTrap02+0xa1:
    8053f49d 833ddcaf548008  cmp     dword ptr [nt!KiAbiosPresent+0x8 (8054afdc)],8
    8053f4a4 721b            jb      nt!KiTrap02+0xc5 (8053f4c1)
    nt!KiTrap02+0xaa:
    8053f4a6 7517            jne     nt!KiTrap02+0xc3 (8053f4bf)
    nt!KiTrap02+0xac:
    8053f4a8 803dc0d4548000  cmp     byte ptr [nt!KdDebuggerNotPresent (8054d4c0)],0
    8053f4af 750e            jne     nt!KiTrap02+0xc3 (8053f4bf)
    nt!KiTrap02+0xb5:
    8053f4b1 803dc1d4548000  cmp     byte ptr [nt!KdDebuggerEnabled (8054d4c1)],0
    8053f4b8 7405            je      nt!KiTrap02+0xc3 (8053f4bf)
    nt!KiTrap02+0xbe:
    8053f4ba e82999fbff      call    nt!KeEnterKernelDebugger (804f8de8)
    nt!KiTrap02+0xc3:
    8053f4bf ebfe            jmp     nt!KiTrap02+0xc3 (8053f4bf)
    nt!KiTrap02+0xc5:
    8053f4c1 ff05dcaf5480    inc     dword ptr [nt!KiAbiosPresent+0x8 (8054afdc)]
    8053f4c7 6a00            push    0
    8053f4c9 ff1580864d80    call    dword ptr [nt!_imp__HalHandleNMI (804d8680)]
    8053f4cf ff0ddcaf5480    dec     dword ptr [nt!KiAbiosPresent+0x8 (8054afdc)]
    8053f4d5 7533            jne     nt!KiTrap02+0x10e (8053f50a)
    nt!KiTrap02+0xdb:
    8053f4d7 a140f0dfff      mov     eax,dword ptr ds:[FFDFF040h]
    8053f4dc 66833858        cmp     word ptr [eax],58h
    8053f4e0 7428            je      nt!KiTrap02+0x10e (8053f50a)
    nt!KiTrap02+0xe6:
    8053f4e2 81c48c000000    add     esp,8Ch
    8053f4e8 8f0540f0dfff    pop     dword ptr ds:[0FFDFF040h]
    8053f4ee 8b0d3cf0dfff    mov     ecx,dword ptr ds:[0FFDFF03Ch]
    8053f4f4 8d4128          lea     eax,[ecx+28h]
    8053f4f7 c640058b        mov     byte ptr [eax+5],8Bh
    8053f4fb 9c              pushfd
    8053f4fc 810c2400400000  or      dword ptr [esp],4000h
    8053f503 9d              popfd
    8053f504 cf              iretd
    nt!KiTrap02+0x10e:
    8053f50a b802000000      mov     eax,2
    8053f50f e9dc280000      jmp     nt!KiSystemFatalException (80541df0)
    nt!KiSystemFatalException:
    80541df0 55              push    ebp
    80541df1 6a00            push    0
    80541df3 6a00            push    0
    80541df5 6a00            push    0
    80541df7 50              push    eax
    80541df8 6a7f            push    7Fh
    80541dfa e81774fbff      call    nt!KeBugCheck2 (804f9216)
    80541dff c3              ret
####  可屏蔽中断
>
> 在硬件级，可屏蔽中断是由一块专门的芯片来管理的，通常称为中断控制器。它负责分配中断资源和管理各个中断源发出的中断请求.为了便于标识各个中断请求。中断管理器通常用IRQ(Interrupt
> Request)后面加上数字来表示不同的中断。比如：在Windows中 时钟中断的IRQ编号为0
> 也就是：IRQ0（大多数操作系统时钟中断在10-100MS之间，Windows系列为10-20MS）。
1、如果自己的程序执行时不希望CPU去处理这些中断，可以用CLI指令清空EFLAG寄存器中的IF位，用STI指令设置EFLAG寄存器中的IF位。
2、硬件中断与IDT表中的对应关系并非固定不变的，参见：APIC（高级可编程中断控制器）,作用就是中断号和IDT表的映射关系。
###  异常
异常通常是CPU在执行指令时检测到的某些错误，比如除0、访问无效页面等。
中断与异常的区别：
1、中断来自于外部设备，是中断源（比如键盘）发起的，CPU是被动的。
2、异常来自于CPU本身，是CPU主动产生的。
3、INT N虽然被称为“软件中断”，但其本质是异常。EFLAG的IF位对INT N无效。
####  异常处理
无论是由硬件设备触发的中断请求还是由CPU产生的异常，处理程序都在IDT表。
常见的异常处理程序：
比如缺页异常，CPU会执行IDT表中的0xE号中断处理程序，由操作系统来接管。
缺页异常的产生：
1、当PDE/PTE的P=0时。
2、当PDE/PTE的属性为只读但程序试图写入的时。
3、当物理内存空间不足时，线性地址对应的物理页将被存储到文件中。
## 控制寄存器
控制寄存器用于控制和确定CPU的操作模式。
Cr0 Cr1 Cr2 Cr3 Cr4 。
Cr1 保留。
Cr3 页目录表基址。
Cr0 保留。
###  Cr0
1、PE位：CR0的位0是启用保护（Protection Enable）标志。
PE=1为保护模式 PE=0则为实地址模式， **这个标志仅开启段级保护，而并没有启用分页机制** 。
若要启用分页机制，那么PE和PG标志都要置位。
2、PG位：当设置该位时即开启了分页机制。在开启这个标志之前必须已经或者同时开启PE标志。
PG=0且PE=0 处理器工作在实地址模式下。
PG=0且PE=1 处理器工作在没有开启分页机制的保护模式下。
PG=1且PE=0 在PE没有开启的情况下 无法开启PG。
PG=1且PE=1 处理器工作在开启了分页机制的保护模式下 。
3、WP位：对于Intel 80486或以上的CPU，CR0的位16是写保护（Write Proctect）标志
当设置该位为1时，处理器会禁止超级用户程序（例如特权级0的程序）向用户级只读页面执行写操作。保护三环用户数据。
当CPL