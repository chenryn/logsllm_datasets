### 6.2.2 Results on IrisCode and FVC2004

To evaluate the performance of our BAKE protocols, we conducted experiments using two realistic datasets: IrisCode and FVC2004.

#### IrisCode
For the iris dataset, we transformed each IrisCode into four different vector sizes: 16-dimensional, 32-dimensional, 64-dimensional, and 128-dimensional vectors.

#### Fingerprint (FVC2004)
For the fingerprint dataset, we utilized four databases from the Third International Fingerprint Verification Competition (FVC2004) [36]. Specifically, DB1 and DB2 contain a similar number of fingerprint vectors, while DB3 and DB4 are more distorted and synthetic, leading to larger and noisier data sets. The fingerprint images were pre-processed using the OpenCV library to extract minutiae points, which were then used as coordinate values. For Algorithm 2, we set \(\mu = 4\), meaning each fingerprint vector consists of 50 4-bit values.

### 6.2.3 Performance Analysis

The computation cost of each algorithm in our BAKE protocols is summarized in Table 2. Our protocol on IrisCode is more efficient than that on FVC2004 because the AFEM construction for biometric vectors involves only one ElGamal-like operation, whereas the AFEM construction for biometric vector sets requires \(n\) ElGamal-like operations. However, both protocols are suitable for practical applications in terms of computational overhead.

The communication cost, which includes transmitting the public key \(pk\) during the KeyGen phase and the encapsulated message \(c\) during the AKE phase, is detailed in Table 3. Both protocols demonstrate efficiency in practice, even in resource-limited networks, with respect to communication overhead.

#### Further Results
We further investigated the computation cost of our BAKE protocols with varying sizes of biometric secret keys. The time consumption of algorithms in BAKE-1 is illustrated in Figures 6 and 7. The running time of PubGen is the smallest and increases slowly, while the curve for Enc remains smooth as the size of the biometric vector \(m\) grows, due to its reliance on a single ElGamal-like encryption operation. For Dec, the time consumption increases significantly as \(m\) increases, exceeding 0.5 seconds when \(m = 600\). This is consistent with general biometric authentication [53]. Figure 8 provides a detailed breakdown of the time consumption for Dec, showing that the decoding algorithm dominates when \(m \geq 200\).

For BAKE-2, the time consumption of algorithms is shown in Figures 9 and 10. The running time of PubGen, Enc, and Dec increases as the size of the biometric vector set \(n\) grows. The time consumption for Enc and Dec exceeds 1 second when \(n = 500\) and \(n = 200\), respectively, which is more efficient than existing two-factor authentication methods (which average at least 13 seconds) [41]. Figures 11 and 12 depict the time consumption of different operations in Enc and Dec. As \(n\) increases, polynomial interpolation becomes the most time-consuming operation in Enc, while secret reconstruction and polynomial evaluation are the most time-consuming in Dec when \(n\) is large.

### 6.3 Comparison

We compared the computation and communication costs of BAKE-1 and BAKE-2 with recent fuzzy aPAKE constructions [21], denoted as fuzzy aPAKE-1 and fuzzy aPAKE-2. For practical comparison, we set \(m = 64\) for irises in BAKE-1 and used the average size of the fingerprint vector set in DB1, i.e., \(n = 95\), in BAKE-2. Fuzzy aPAKE-1 and fuzzy aPAKE-2 use an iris as the "password." Since these constructions are based on oblivious transfer protocols and standard asymmetric PAKE, respectively, their performance varies. To ensure a fair comparison, as recommended in [21], we conducted the following analysis:

- **BAKE-1**: More efficient for smaller biometric vectors.
- **BAKE-2**: Efficient for larger biometric vector sets, outperforming traditional two-factor authentication methods.

This comparison highlights the efficiency and practicality of our BAKE protocols in various scenarios.