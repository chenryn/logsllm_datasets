This was very surprising to me, and took me a very long time to figure out:
    julia> using Random
    julia> rng = Random.GLOBAL_RNG
    _GLOBAL_RNG()
    julia> deepcopy(rng) === rng
    true
Even more surprising is
    julia> copy(rng) === rng
    false
There's similar behavior with `ENV` in place of `GLOBAL_RNG`.
There are a few issues here:
  1. The behavior of `deepcopy` on `GLOBAL_RNG` is very different than for other RNGs. It's not clear that the former should be "special" in this way.
  2. I had always understood `deepcopy` to be a stronger version of `copy`, in the sense that `copy` may still result in shared mutable sub-structures, but that `deepcopy` would replicate these, so the result of `deepcopy` would have no mutable substructures in common with the original.
I had some discussion about this on Zulip with @Seelengrab and @fredrikekre
here. Fredrik pointed out that
> `deepcopy` is really a very different function; it almost belongs in the
> Serialization package or something of that sort.  
>  (from #42796 (comment))
If this is really the intent, it seems it ought to be well-documented, with
guidance on when to use which one.
In any case, I can't imagine a use case for the current arrangement where
`deepcopy` can result in strictly more sharing than `copy`.