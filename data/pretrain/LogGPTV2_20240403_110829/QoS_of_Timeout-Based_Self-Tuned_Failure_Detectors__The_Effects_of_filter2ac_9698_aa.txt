title:QoS of Timeout-Based Self-Tuned Failure Detectors: The Effects of
the Communication Delay Predictor and the Safety Margin
author:Raul Ceretta Nunes and
Ingrid Jansch-Pôrto
QoS of Timeout-based Self-Tuned Failure Detectors: the Effects of the 
Communication Delay Predictor and the Safety Margin 
Raul Ceretta Nunes  
Ingrid Jansch-Pôrto  
Federal University of Santa Maria  
Federal University of Rio Grande do Sul  
Department of Electronic and Computation 
Institute of Computer Science, Cx.Postal 15064 
97105-900 - Santa Maria-RS - Brazil  
91501-970 - Porto Alegre-RS - Brazil  
PI:EMAIL
PI:EMAIL 
Abstract 
Unreliable failure detectors have been an important 
abstraction to build dependable distributed applications 
over asynchronous distributed systems subject to faults. 
Their implementations are commonly based on timeouts 
to ensure  algorithm  termination.  However,  for  systems 
built on the Internet, it is hard to estimate this time value 
due  to  traffic  variations.  Thus,  different  types  of 
predictors  have  been  used  to  model  this  behavior  and 
make  predictions  of  delays.  In  order  to  increase  the 
quality  of  service  (QoS),  self-tuned  failure  detectors 
dynamically adapt their timeouts to the communication 
delay behavior added of a safety margin. In this paper, 
we  evaluate  the  QoS  of  a  failure  detector  for  different 
combinations  of  communication  delay  predictors  and 
safety margins. As the results show, to improve the QoS, 
one  must  consider  the  relation  between  the  pair 
predictor/margin,  instead  of  each  one  separately. 
Furthermore,  performance  and  accuracy  requirements 
should be considered for a suitable relationship. 
1. Introduction 
tools 
that  assist  in 
Since defined by Chandra and Toueg [4], unreliable 
failure  detectors  have  been  accepted  as  an  important 
concept  for  building  up 
the 
development  of  dependable  distributed  applications 
(agreement-dependent 
for 
asynchronous distributed systems subject to faults. The 
main  issue  is  that  failure  detectors  encapsulate  the 
indeterminism  of  distinguishing  a  very  slow  process 
from  a  crashed  one,  leaving  agreement  protocols  free 
from timing issues. As a result, many group membership 
protocols are built on this assumption [8, 12, 15, 18].  
applications 
[1]) 
Failure detectors are used as basic building blocks of 
such  systems  and  provide  some  information  on  which 
processes  have  crashed.  Each  failure  detector  module 
monitors  a  subset  of  the  processes  in  the  system, 
maintains  a  list  of  those  that  it  currently  suspects  to 
have crashed and can make mistakes [4]. 
In the design of failure detectors, the indeterminism 
problem  is  circumvented  by  considering  a  partial 
synchronous distributed model [4]. In practice, it means 
that,  like  other  timing-based  distributed  protocols,  to 
ensure  termination  under  unbounded  communication 
delays, most failure detectors are based on timeouts (a 
maximum  waiting  time)  [6,  11,  20].  This  design 
approach makes the quality of service (QoS) of failure 
detectors dependent on the correct choice of the timeout. 
A  reduced  timeout  could  allow  a  process  to  detect 
failures  quickly,  increasing the  failure  detector  speed, 
but it also could improve the number of false suspicions 
(when it erroneously suspects some processes that are 
actually  up),  decreasing  its  accuracy.  However,  to  be 
useful, a failure detector has to be reasonably fast and 
accurate [5]. 
To  increase  the  QoS,  some  timeout  based  failure 
detectors work by dynamically adapting their timeouts 
according  to  the  communication  delay  behavior,  i.e., 
their timeouts change depending on a delay prediction 
corrected  with  a  safety  margin.  In  practice,  different 
hypotheses about communication delay behavior have 
been used, resulting in a diversity of predictors, which 
are currently used in failure detectors designs [5, 13, 14, 
19]. In a similar way, we can also find different safety 
margins  [2,  5,  19].  However,  a  question  then  arises: 
what  are  the  effects  of  both  communication  delay 
predictor  and  safety  margin  on 
timeout  based 
self-tuned failure detectors?  
To  answer  this  question,  this  paper  evaluates  the 
QoS of a failure detector for different combinations of 
communication  delay  predictors  and  safety  margins. 
Our results show that: first, to get a good QoS, one must 
consider 
instead  of 
considering  each  one  separately;  and  second,  the  best 
results concerning speed and accuracy are not achieved 
the  pair  predictor/margin, 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
simultaneously with one pair predictor/margin. We have 
to look for a suitable relation. 
The remaining of this paper is organized as follows. 
Section  2  describes  our  system  evaluation  model.  In 
Section  3,  we  discuss  the  features  of  predictors  and 
margins  found  in  related  works,  and  we  describe  the 
predictors and margins used in our evaluation. Section 4 
presents the used QoS metrics. In Section 5, we present 
and discuss our results. Finally, the complete conclusion 
is in Section 6. 
2. System Model 
We  suppose  a  distributed  system  model  with  Ω
processors  and  Ω  processes  (one  process  for  each 
processor)  distributed  over  an  unreliable  wide-area 
network (WAN). In other words, we assume unbounded 
communication delays and that the communication links 
can lose messages. In this distributed system, we define a 
failure detector FD as a set of n distributed modules, fd1
to fdn, where fdq is attached to a process q ∈ Ω. Our FD
implements a pull-style monitoring algorithm [9] that is 
based on requests and acknowledgement messages.  
Each failure detector module fdq maintains a list of 
processes Suspectq that are currently supposed of being 
crashed. Thus, we say that a process q ∈ Ω suspects a 
process p ∈ Ω at a local instant t if, at local time t, the 
process p is in the list of suspected processes maintained 
by  fdq.  A  failure  detector  module  makes  mistakes  by 
incorrectly  suspecting  a  process.  In  this  context,  the 
suspicion resolution (decision for including a process in 
the local list of suspects) is based only on a timeout for 
some event, i.e., the detector is a timeout based failure 
detector.  Additionally,  suspicions  are  not  necessarily 
stable: if q suspects p at a given instant, it can later learn 
that  the  suspicion  was  incorrect.  Process  p  is  then 
removed by fdq from its list of suspicious processes. 
3. Predictors and safety margins 
In  this  section,  we  discuss  prediction  and  safety 
margin  approaches  used  to  dynamically  adapt  the 
timeout  on  failure  detectors,  according  to  the  network 
behavior.  Section  3.1  summarizes  the  approaches  and 
Sections 3.2 and 3.3 specify, respectively, the predictors 
and safety margins used in our analysis.  
3.1. Adapting the timeouts 
Independently  on  the  communication  style  (push, 
pull or dual [9]) explored by a failure detector, at least 
two  approaches  are  employed  to  dynamically  set  the 
timeout value to be used in the network:  
1. To adjust the timeout according to the maximum 
observed  delay.  For  a  push-style  FD,  this 
approach  sets  the  timeout  to  the  maximum 
expected  interval  time  between  the  arrival  of 
two  consecutive  heartbeats  [10];  and  for  a 
pull-style FD, the waiting period is given by the 
addition of the maximum round-trip time (rtt) to 
the interrogation period;  
2. To  set  it  to  a  value  that  corresponds  to  the 
estimation of the next delay plus a safety margin.
In this approach, a push-style FD estimates the 
next communication delay [2, 5] or the expected 
arrival times of the heartbeats [19], whereas the 
pull-style  FD  estimates  the  next  round-trip 
communication delay [14, 16]. 
According 
to 
the  second  approach,  different 
strategies may be used to estimate the next delay: 
1. To repeat the last observed delay [14]; 
2. To calculate the average of previously observed 
delays [19];  
3. To calculate the average of the n last observed 
delays [2, 5]; or 
4. To  build  a 
time  series  from 
the  former 
performed delays [16].  
In other words, these strategies result from different 
assumptions  about 
the  probabilistic  behavior  of 
network  delays.  The  first  approach  assumes  that  the 
next  delay  imitates the  prior  one,  whereas  the  second 
one  supposes  that  variations  will  not  be  distant  from 
average.  The  third  strategy  restricts  the  period  of 
observation  used  in  the  second  approach  to  a  recent 
window  of  samples.  Note  that  all  these  strategies 
assume a stationary delay. The last one presumes that 
the next delay follows a time series [3] defined by an 
identified model.  
Examining  the  safety  margins,  we  also  observe  at 
least two different approaches: 
1. The use of a constant value determined from a 
previous  off-line  study  [18];  or  from  the 
application  of  the  QoS  requirements  (upper 
bound  of  detection  time)  combined  with  the 
interval  between  the  sending  times  of  two 
heartbeats  (computed  from  network  behavior 
but fixed on a configuration) [5]; 
2. The use of a variable safety margin, determined 
from the error produced by the last estimation [2, 
19]. 
In order to evaluate the effect of the safety margin, 
in this paper we have decided to explore the variable
strategy. Thus, to reason with additional parameters, we 
will  also  specify  a  new  variable  safety  margin 
determined  from 
the 
estimator. In  our approach,  this  margin is  intended to 
ensure that 99% of the samples are covered. In Section 
3.3, we specify both variable margins. 
the  confidence 
interval  of 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
3.2. Specifications for the predictors 
In view of the failure detector FD defined in Section 
2, in this section we specify three distinct predictors to 
estimate  the  round-trip  communication  delay  (here 
ahead  referred  as  rtt).  We  will  use  these  predictors  in 
Section 5 to evaluate their effects in the QoS of failure 
detectors.  Two  of  them,  referred  as  MEAN  and 
WINMEAN,  are  commonly  used  for  implementing 
failure detectors [2, 5, 19]; and the remaining one, named 
ARIMA  (from  Auto-Regressive  Integrated  Moving 
Average) 
time  series 
modeling. On the Internet, the rtt behavior corresponds 
to a non-stationary stochastic variable during most time 
of 
the  predictors  based  on 
non-stationary time series could increase the accuracy of 
rtt predictions [17].  
is  based  on  non-stationary 
[16]  and 
the  day 
t
i
i
i
t
1
t
(
=
=
/)
rtt
ˆ
ttr
+ =
1 ∑
Under  the  stationary  assumption:  the  predictor 
MEAN  computes  the  next  rtt  based  on  the  population 
);  and  the  predictor 
average  (
WINMEAN  supposes  that  the  next  rtt  follows  the 
average 
samples 
+ =
i
ˆ
ttr
1 ∑
). From the central limit theorem 
(
i
[3],  when  the  sample  size  is  reasonably  large  (usually 
n=30  or  above) 
random  variable  can  be 
approximately treated as a standard normal variable. 
the 
/)
n
of 
=
t
−=
nt
n=30 
last 
rtt
i
the 
(
t
identifies  an  autoregressive 
Under  the  hypothesis  that  the  delay  could  change 
from  a  stationary  and  a  non-stationary  behavior,  and 
vice-versa,  we  specified  the  predictor  ARIMA,  which 
dynamically 
integrated 
moving average model and makes predictions based on it. 
This predictor uses the lightweight interface defined in 
[17] to build a time series from time-variant rtt sampling. 
The predictor ARIMA allows the choice of the correct 
model among: a purely p-order autoregressive; a purely 
q-order  moving  average;  an  autoregressive  and  p-  and 
q-order  moving  average;  and  evidently  an  p-,  d-  and 
integrated  moving  average, 
q-order  autoregressive 
where  d 
represents 
the 
(or 
non-stationary  order)  of  the  stochastic  process.  The 
d-order corresponds to the number of differences needed 
to transform a non-stationary time series to a stationary 
one [3]. 
integration  order 
t