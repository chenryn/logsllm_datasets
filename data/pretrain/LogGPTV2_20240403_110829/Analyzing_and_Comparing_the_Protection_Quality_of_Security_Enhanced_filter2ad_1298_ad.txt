Public License (GPL)).
5 Comparing SELinux with AppArmor
We use three attack scenarios to evaluate our ap-
proach. The ﬁrst is for a remote attacker to install a
rootkit. We assume the rootkit is installed by loading
a kernel module. The second is for a remote attacker to
plant a Trojan horse. We use two deﬁnitions of trojan
attacks: (1) the attacker can create an executable in a
folder on the executable search path or user’s home di-
rectory (2) the attacker can create an executable in any
folder such that a normal user process (with a user’s uid
and runs under unconﬁned domain in SELinux or is not
conﬁned by any proﬁle in AppArmor) can execute. In
both cases, after the trojan program is executed the pro-
cess should be unconﬁned. We call (1) a strong trojan
case and (2) a weak trojan case. The third is for a local
attacker to install a rootkit.
We analyze the QoP under several conﬁgurations:
1. Ubuntu 8.04 (we use the Server Edition for all the
test cases) with SELinux and Ubuntu 8.04 with Ap-
pArmor. To understand what additional protec-
tion MAC offers on top of DAC, we also evalu-
ate Ubuntu 8.04 with DAC protection only (without
MAC protection).
2. Fedora 8 with SELinux and SUSE Linux Enterprise
Server 10 with AppArmor. We compare the results
with Ubuntu 8.04/SELinux and Ubuntu 8.04/Ap-
pArmor to show that different distributions with the
same mechanism provide different levels of protec-
tion.
3. Ubuntu 8.04 with SELinux. In the evaluation, we
only analyze the SELinux policy. We use the result
to show that only considering MAC policy without
DAC policy and system state is not sufﬁcient.
The active services include: sshd, vsftp, apache2,
samba, mysql-server, postﬁx, nfsd, named, etc. In Fe-
dora 8, the SELinux policy is the targeted policy that
shipped with the distribution.
the
SELinux policy is the reference policy that comes with
the selinux package. The AppArmor policy is the one
that comes with the apparmor-proﬁles package.
In Ubuntu 8.04,
5.1 SELinux vs. AppArmor vs. DAC only on
Ubuntu 8.04
Ubuntu 8.04 Server Edition supports both SELinux
and AppArmor. This offers an opportunity for us to
compare the QoP of SELinux and AppArmor head to
head. We also include the case in which only DAC is
used in the comparison.
A Remote Attacker to Install a Rootkit In this attack
scenario, the attacker has network access to the host, and
the objective is to install a rootkit via loading a kernel
module. The host attack graphs for DAC only, AppAr-
mor and SELinux are shown in Figure 10, Figure 11 and
Figure 12, respectively. The comparison of minimal at-
tack paths between SELinux and AppArmor is shown in
Figure 13.
Among the three cases, AppArmor has the small-
est vulnerability surface. SELinux has all the minimal
attack paths AppArmor has and some additional ones.
Figure 10. Host Attack Graph for a Remote Attacker to Install a Rootkit (Ubuntu 8.04 with DAC
only)
Figure 11. Host Attack Graph for a Remote Attacker to Install a Rootkit (Ubuntu 8.04 with
AppArmor)
initproc(0, 0)/usr/sbin/apache2/usr/sbin/cupsd/usr/sbin/nmbd/usr/sbin/rpc.mountd/usr/sbin/smbd/usr/sbin/sshd/usr/sbin/vsftpdproc(1, 1)/sbin/portmapproc(106, 0)/sbin/rpc.statdproc(108, 117)/usr/sbin/namedproc(110, 119)/usr/sbin/mysqldproc(101, 102)/sbin/dhclientproc(0, 1)/bin/mount/bin/ping/bin/ping6/bin/su/bin/umount/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chown/bin/mount/bin/ping/bin/ping6/bin/su/bin/umount/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 117)/bin/mount/bin/ping/bin/ping6/bin/su/bin/umount/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 119)/bin/mount/bin/ping/bin/ping6/bin/su/bin/umount/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 102)/bin/mount/bin/ping/bin/ping6/bin/su/bin/umount/lib/dhcp3-client/call-dhclient-script/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chowninitproc(0, 0, none)/usr/sbin/apache2/usr/sbin/rpc.mountdproc(0, 0, /usr/sbin/sshd)/usr/sbin/sshdproc(108, 117, none)/usr/sbin/mysqldproc(109, 118, none)/usr/sbin/named/bin/bashproc(0, 117, none)/bin/mount/bin/ping6/bin/su/bin/umount/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 118, none)/bin/mount/bin/ping6/bin/su/bin/umount/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownThe DAC only case has all the attack paths SELinux
has, and has one additional minimal attack path. More
speciﬁcally, AppArmor has 3 length-1 minimal attack
paths and 34 length-2 minimal attack paths. In addition
to these, SELinux has 3 more length-1 minimal attack
paths and 63 more length-2 minimal attack paths.
Attack paths common to all three cases are mainly
due to daemon programs that run in unconﬁned domain
under SELinux (meaning that the program is not con-
strained by SELinux) and are not conﬁned by proﬁles
under AppArmor. The length-1 paths are due to the
daemon programs apache2, rpc.mountd and sshd which
run as root. (Although sshd is running in sshd t under
SELinux and conﬁned by a proﬁle in AppArmor, the
domain and the proﬁle both allow the process to load a
kernel module directly or indirectly). The length-2 paths
are due to unprivileged daemon programs mysqld and
named. After compromising one of them, the attacker
needs to do another local privilege escalation.
The minimal attack paths that SELinux has but Ap-
pArmor doesn’t have are due to three reasons: (1) Some
programs are running in the unconﬁned t domain under
this version of SELinux policy, while AppArmor has
proﬁles for them; these include, e.g., nmbd, smbd, vs-
ftpd, portmap, and rpc.statd.
(2) Some programs are
conﬁned by SELinux domains, but the conﬁnements are
not as tight as corresponding AppArmor proﬁles. Two
programs, cupsd and dhclient, fall into this category.
For example, domain dhcpc t is allowed to load a ker-
nel module while the proﬁle /sbin/dhclient doesn’t allow
kernel module loading. (3) Some programs (named and
mysqld) are not conﬁned either in SELinux or AppAr-
mor. However, because they run with unprivileged ac-
counts (as opposed to the root) under DAC, compromis-
ing them do not enable the attacker to load a kernel mod-
ule. There are unique attack paths for SELinux because
of the conﬁnement of some setuid root programs. Ping
and passwd are unconﬁned in SELinux but conﬁned in
AppArmor, therefore they can be used to further esca-
late the attackers’ privileges after compromising named
or mysqld.
Somewhat surprisingly, the DAC only case has only
one additional (strong) length-1 minimal attack path
compared to SELinux. The path is /usr/sbin/cupsd. The
cupsd daemon runs as root and is conﬁned by the cups t
domain of SELinux. When the attacker exploits cupsd
with SELinux enabled, she has to additionally exploit
the setuid root program /bin/unix chkpwd to gain the
privilege to install a rootkit.
Our analysis shows that among the seven network-
facing programs running as root in Ubuntu 8.04 Server
Figure 12. Host Attack Graph for a Remote
Attacker to Install a Rootkit (Ubuntu 8.04
with SELinux)
initproc(0, 0, unconfined_t)/usr/sbin/apache2/usr/sbin/nmbd/usr/sbin/rpc.mountd/usr/sbin/smbd/usr/sbin/vsftpdproc(1, 1, unconfined_t)/sbin/portmapproc(106, 0, unconfined_t)/sbin/rpc.statdproc(108, 117, unconfined_t)/usr/sbin/namedproc(0, 0, cupsd_t)/usr/sbin/cupsdproc(0, 0, sshd_t)/usr/sbin/sshdproc(110, 119, unconfined_t)/usr/sbin/mysqldproc(101, 102, dhcpc_t)/sbin/dhclientproc(0, 1, unconfined_t)/bin/ping/bin/ping6/bin/su/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 1, unconfined_mount_t)/bin/mount/bin/umount/bin/ping/bin/ping6/bin/su/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 0, unconfined_mount_t)/bin/mount/bin/umountproc(0, 117, unconfined_t)/bin/ping/bin/ping6/bin/su/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 117, unconfined_mount_t)/bin/mount/bin/umountproc(0, 42, system_chkpwd_t)/sbin/unix_chkpwdproc(0, 119, unconfined_t)/bin/ping/bin/ping6/bin/su/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chownproc(0, 119, unconfined_mount_t)/bin/mount/bin/umountproc(0, 102, dhcpc_t)/bin/mount/bin/ping/bin/ping6/bin/su/bin/umount/lib/dhcp3-client/call-dhclient-script/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chowncommon
unique
SELinux compared to AppArmor
/usr/sbin/apache2
/usr/sbin/rpc.mountd
/usr/sbin/named SUID*
/usr/sbin/mysqld SUID*
/usr/sbin/sshd
/usr/sbin/nmbd
/usr/sbin/smbd
/usr/sbin/vsftpd
/sbin/portmap SUID**
/sbin/rpc.statd SUID**
/usr/sbin/cupsd /sbin/unix chkpwd
/sbin/dhclient SUID**
/sbin/dhclient
dhclient-script
/lib/dhcp3-client/call-
/usr/sbin/named /bin/ping
/usr/sbin/named /usr/bin/passwd
/usr/sbin/mysqld /bin/ping
/usr/sbin/mysqld /usr/bin/passwd
SUID* represents a set of setuid root programs:
/bin/ping6
/bin/su
/sbin/mount.nfs
/usr/bin/arping
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/gpasswd
/usr/bin/mtr
/usr/bin/newgrp
/usr/bin/sudo
/usr/bin/sudoedit
/usr/bin/traceroute6.iputils
/usr/lib/eject/dmcrypt-get-device
/usr/lib/openssh/ssh-keysign
/usr/lib/pt chown
/bin/mount
/bin/umount
SUID** includes all programs in SUID* and also
/bin/ping and /usr/bin/passwd
Figure 13. Minimal Attack Paths Comparison for a Remote Attacker to Install a Rootkit
Edition, namely apache2, cupsd, nmbd, rpc.mountd,
smbd, sshd, and vsftpd, only one of them is conﬁned in
any meaningful way by the SELinux policy. Hence one
can argue that the additional protection provided by the
SELinux reference policy in Ubuntu 8.04 is quite lim-
ited.
Remote Attacker to Leave a Trojan Horse
We consider a scenario in which the attacker is re-
mote and wants to leave a Trojan horse. We consider
both the strong Trojan horse case and the weak Trojan
horse case. We observe that performing a strong trojan
attack is always not more difﬁcult than installing a ker-
nel module.
For Ubuntu 8.04 with AppArmor, compared to load-
ing kernel module, there is one extra attack path in
strong trojan attack: /usr/sbin/smbd. For Ubuntu 8.04
with SELinux, the host attack graph is the same as the
graph for a remote attacker to install a rootkit.
It’s signiﬁcantly easier to perform weak trojan at-
tacks. Figure 14 shows the host attack graph to leave
a weak trojan in Ubuntu 8.04 with SELinux. Every net-
work faced program, if compromised, can be used di-
rectly to leave a weak Trojan horse. This is so due to
two reasons. First, both SELinux and AppArmor con-
ﬁne only a subset of the known programs and leave any
program not explicitly identiﬁed as conﬁned. Second,
as neither SELinux nor AppArmor performs informa-
tion ﬂow tracking, the system cannot tell a program left
by a remote attacker from one originally in the system.
A Local Attacker to Install a Rootkit
In the third attack scenario, the attacker has a local ac-
count. The objective is to install a rootkit (load a kernel
module). Figure 15 and Figure 16 shows the host attack
graphs for Ubuntu 8.04 with SELinux and AppArmor,
respectively.
Again, AppArmor has a smaller vulnerability
surface. All minimal exploit paths in AppArmor
also occur in SELinux, which has some additional
exploit paths. There are 19 common minimal attack
paths, they are all of length 1. They are due to 19
setuid root programs that have sufﬁcient privileges.
These programs
/bin/ping6,
/bin/su, /sbin/mount.nfs, /usr/bin/arping, /usr/bin/chfn,
/usr/bin/chsh,
/usr/bin/mtr,
/usr/bin/newgrp,
/usr/bin/sudoedit,
/usr/bin/traceroute6.iputils,
/usr/lib/eject/dmcrypt-get-
device, /usr/lib/openssh/ssh-keysign, /usr/lib/pt chown,
/usr/sbin/pppd, /bin/mount, /bin/umount.
/usr/bin/gpasswd,
/usr/bin/sudo,
are
/bin/fusermount,
The programs in the common paths are setuid root
programs. The result shows that the way for a local
user to load a kernel module is to exploit one of the se-
tuid root programs. SELinux has 2 unique minimal at-
Figure 14. Host Attack Graph for a Remote Attacker to Leave a Weak Trojan (Ubuntu 8.04 with
SELinux)
Figure 15. Host Attack Graph for a Local
Attacker to Install a Rootkit (Ubuntu 8.04
with SELinux)
Figure 16. Host Attack Graph for a Local
Attacker to Install a Rootkit (Ubuntu 8.04
with AppArmor)
tack paths for SELinux: /bin/ping and /usr/bin/passwd.
They are due to the same reason in the ﬁrst scenario,
that SELinux does not conﬁne ping and passwd while
AppArmor conﬁnes them.
5.2 Other Comparisons
In this subsection we compare the QoP offered by
different Linux distributions with a same MAC mech-
anism. We also discuss why considering MAC policy
alone is not enough.
Different Versions of SELinux
We have found that the SELinux policy in Fedora 8,
which is the SELinux targeted policy, offers signiﬁ-
cantly better protection than the SELinux in Ubuntu 8.04