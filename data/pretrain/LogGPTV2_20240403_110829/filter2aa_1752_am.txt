。 arg 的。的 execl() 
（variadic的的。
以 NULL 的。
的 /bin/vi 的程
int ret;
ret = execl (”/bin/vi”, ”vi”, NULL);
if (ret == -1)
perror (”execl”);
我们 Unix 的”vi” 作。 fork/exec
进程时 shell 的即”vi”新进程的
argv[0]。程以 argv[0]进映文件的
– 136 –
 5 
进程理
。工同的实上
同程的。以程的的
。
子 /home/kidd/hooks.txt以
int ret;
ret = execl (”/bin/vi”, ”vi”,
”/home/kidd/hooks.txt”, NULL);
if (ret == -1)
perror (”execl”);
 execl() 。的调以新的程的作
的存进程的空间的。
时 execl()  -1设 errno 的示出的。我们
的 errno 的能。
execl() 的调空间进程的映进程的
属性
• 何的。
• 的何原的处理方式处理存
空间。
• 何内存的（。
• 程的属性原。
• 进程的。
• 进程内存相的何映射的文件。
•  C 的性 ( atexit()) 存空间的
。
然进程的属性 pid、进程的 pid、、
属的。
的文件 exec 。新进程原进程
的文件的新的进程以原进程。然
理的处理方。以实操作 exec 调的文
件然以 fcntl( ) 内自。
– 137 –
 5 
进程理
5.2.1.1 其他 exec 系列系统调用
 execl() 调
#include 
int execlp (const char *file, const char *arg,
...);
int execle (const char *path, const char *arg,
..., char * const envp[]);
int execv (const char *path, char *const argv[]);
int execvp (const char *file, char *const argv[]);
int execve (const char *filename, char *const
argv[], char *const envp[]);
单的。 l  v 示以方式或
 () 方式提的。 p 的 PATH 文
件。出的 p 的 exec 以单的提文件。
 e 示提给新进程以新的。的上理
出 exec 同时以新的
。能 p 的 exec  shell 的 shell 的进
程 shell 。
作作
的 exec 上。作以时
的。以 NULL 。
我们的子的段 execvp()  vi
const char *args[] = { ”vi”,
”/home/kidd/hooks.txt”, NULL };
int ret;
ret = execvp (”vi”, args);
if (ret == -1)
perror (”execvp”);
设 /bin 的工作方式上子相。
– 138 –
 5 
进程理
 Linux 们真的调的 C 
的。处理的调实的
存空间以 execve() 的。的原时
的。
5.2.1.2 错误返回值
调时 exec 调时 -1 errno 设
E2BIG
（arg或（envp的。
EACCESS
 path 的的 path 的文件
文件文件的 path 或文件的文件
以 (noexec) 的方式。
EFAULT
给的效的。
EIO
 I/O （的。
EISDIR
 path 的或。
ELOOP
 path 时的。
EMFILE
调进程的文件。
ENFILE
文件时（system-wide的。
ENOENT
或文件存或的存。
ENOEXEC 文件效的进文件或上
的式。
ENOMEM 内的内存新的程。
ENOTDIR path 的。
EPERM
path 或文件的文件 nosuid root 
 path 或文件设 suid 或 sgid 。
ETXTBSY 文件进程以写方式。
5.2.2 fork() 系统调用
进程映的进程以 fork() 调
#include 
#include 
– 139 –
 5 
进程理
pid_t fork (void);
调 fork() 新的进程调 fork() 的进程
。进程调 fork() 的
。
新的进程原进程的子进程原进程自然进程。子进程
的 fork() 调 0。进程 fork() 子进程的 pid。
的方进程子进程间方相
• 然子进程的 pid 新的进程同的。
• 子进程的 ppid 设进程的 pid。
• 子进程的（Resource statistics零。
• 何的子进程（。
• 何文件子进程。
调出时子进程 fork()  -1。同时设相的 errno 的
。 errno 的们能的
EAGAIN
内        时     新 的 pid或    
RLIMIT NPROC 设的。
ENOMEM 的内内存满的操作。
pid_t pid;
pid = fork ();
if (pid > 0)
printf (”I am the parent of pid=%d!\n”, pid);
else if (!pid)
printf (”I am the baby!\n”);
else if (pid == -1)
perror (”fork”);
的 fork() 新的进程然进映
 shell 新进程或进程进程。
（fork新的进程子进程新的进文件
的映。的方式的单的。的
子新的进程 /bin/windlass:
– 140 –
 5 
进程理
pid_t pid;
pid = fork ();
if (pid == -1)
perror (”fork”);
/* the child ... */
if (!pid) {
const char *args[] = { ”windlass”, NULL };
int ret;
ret = execv (”/bin/windlass”, args);
if (ret == -1) {
perror (”execv”);
exit (EXIT_FAILURE);
}
}
子进程进程何的。 execv()
子进程 /bin/windlass。
5.2.2.1 写时复制
的 Unix 进程原。调 fork 时内
的内进程的页然进程的空间的
内页的子进程的空间。内页的方式
时的。
的 Unix 更的。的 Unix  Linux
写时的方对进程空间进。
写时性方式时的。的
提单进程读们自的的
的。进程存的以。
进程自的” ”存的进程
。的。进程自的
的提给进程。的
对进程的。进程以的同时的进
程然的。以的写时进
– 141 –
 5 
进程理
。
写时的处进程进
。性的处们的操作的时
。
内存的, 写时（Copy-on-write以页进
的。以进程的空间空
间。 fork() 调进程子进程相们自的空
间实上们进程的原页页以的进程
或子进程。
写时内的实单。内页相的以
读写时。进程页页。内
处理页处理的方式对页进。时页的
COW 属性示。
的内存理单（MMU提件的写
时以实的。
调 fork() 时写时的。的 fork 
 exec进程空间的内子进程的空间
时间子进程新的进文件的映
的空间出。写时以对进。
5.2.2.2 vfork
实写时 Unix 的设们 fork 
exec 的空间的。 BSD 的们 3.0 的 BSD 
vfork() 调。
#include 
#include 
pid_t vfork (void);
子进程对 exec 的调或调 exit() 
出（将的进对 vfork() 的调的 fork()
的。 vfork() 进程子进程或新的
文件的映。方式 vfork() 空间的页。程
– 142 –
 5 
进程理
进程子进程相同的空间页 (写时)。实上
vfork() 件内的内。子进程能
空间的何内存。
vfork()  Linux 实。的即
   写 时   vfork()   fork()    进  页  的 
。∗然写时的出对 fork() 。实上 2.2.0 内
 vfork() 的 fork()。对 vfork() 的小 fork()以
vfork() 的实方式的。的 vfork() 的实
的 exec 调时的子进程或
出进程将。
5.3 终止进程
POSIX  C89 进程的
#include 
void exit (int status);
对 exit() 的调的进程的步然内
进程。实上。
理 exit() 何的。
status 示进程出的。进程 shell 的
以。 status & 0377 给进程。我们
。
EXIT SUCCESS  EXIT FAILURE 示
的。 Linux  0 示零 1 或 -1示。
进程的出时单的写上
exit (EXIT_SUCCESS);
进程 C 以进程的工作
1. 以的调 atexit() 或 on exit() 的（我们
。
∗Linux Kernel Mailing List（lkml出页的写时的
 2.6 内。进内 vfork() 何处的。
– 143 –
 5 
进程理
2. 空的 I/O 。
3.  tmpfile() 的时文件。
步空间的 exit() 以调 exit(
) 内处理进程的工作
#include 
void _exit (int status);
进程出时内理进程的、的何。
（的内存、的文件 System V 的
。理内进程进程子进程的。
程以调 exit()的的程
出程的理工作空 stdout 。 vfork()
的进程时 exit() exit()。
相段时间 ISO C99  Exit() 
的能 exit() 的
#include 
void _Exit (int status);
5.3.1 其他终止进程的方式
进程的方式的调
程处的方式。 C  main() 时。然
方式然进调单的的
 exit()。 main() 时给出或调 exit()
的程。 shell 的。
时的 exit(0)或 main()  0。
进程对的处理进程进程
。的 SIGTERM  SIGKILL（。
进程内性的。内
段或内存的进程。
– 144 –
 5 
进程理
5.3.2 atexit()
 POSIX 1003.1-2001  Linux 实。 atexit() 
进程时调的
#include 
int atexit (void (*function)(void));
对 atexit() 的调的进程（进程
以调 exit() 或 main() 的方式自时调的。进程
调 exec的（存新进程的
空间。进程的的调。
的的。的原
void my_function (void);
调的的相的。存以
进出的方式调（LIFO。的能调 exit()的
调。提进程调 exit()。
的的调。
POSIX  atexit()  ATEXIT MAX 
 32。的以 sysconf( )  SC ATEXIT MAX
long atexit_max;
atexit_max = sysconf (_SC_ATEXIT_MAX);
printf (”atexit_max=%ld\n”, atexit_max);
时 atexit()  0。时 -1。
单的子
#include 
#include 
void out (void)
{
printf (”atexit( ) succeeded!\n”);
}
– 145 –
 5 
进程理
int main (void)
{
if (atexit (out))
fprintf(stderr, ”atexit( ) failed!\n”);
return 0;
}
5.3.3 on exit( )
SunOS 4 自的 atexit() 的 on exit() Linux 的 glibc 提
对的
#include 
int on_exit (void (*function)(int , void *), void
*arg);
的工作方式 atexit() 的原同
void my_function (int status, void *arg);
 status 给 exit() 的或 main() 的。 arg 给 on exit
() 的。小的调时 arg 的内存
效的。
新的 Solaris 的 atexit()。
5.3.4 SIGCHLD
进程子进程时内进程 SIGCHILD 。
进程何的作。进程 signal() 或
sigaction() 调的处理。调处理的
。
SIGCHILD 能何时何时给进
程。子进程的进程异步的。进程能
更的子进程的或式的子进程的。相
的调。
– 146 –
 5 
进程理
5.4 等待终止的子进程
进程以的的进程子进程的
更子进程的。
程子进程给进程何以
子进程的东。以 Unix 的设们出的子进
程进程内子进程设的。处
的进程（zombie进程。进程小的存
的内。的进程进程自的（
进程上。进程子进程的子进程
。
Linux 内提的子进程的。单的
 wait() POSIX 
#include 
#include 
pid_t wait (int *status);
wait() 子进程的 pid或 -1 示出。子进程
调子进程。子进程
的。相子进程的 wait() 调（ SIGCHILD 
以的方式。
时 errno 能的
ECHILD 调进程何子进程。
EINTR
子进程时 wait() 提。
 status  NULL子进程的。
POSIX 实时以 status 的 bit 示。 POSIX
提
#include 
int WIFEXITED (status);
int WIFSIGNALED (status);
int WIFSTOPPED (status);
– 147 –
 5 
进程理
int WIFCONTINUED (status);
int WEXITSTATUS (status);
int WTERMSIG (status);
int WSTOPSIG (status);
int WCOREDUMP (status);
子进程的能真（零。
进程进程调 exit( ) WIFEXITED 
真。 WEXITSTATUS 给 exit( ) 的。
    （     对   的    进 程 的   WIFSIG-
NALED 真。 WTERMSIG 进程的的
。进程时存 (dumped core) WCOREDUMP
 true。 WCOREDUMP  POSIX  Unix 
 Linux 。
子进程或 WIFSTOPPED  WIFCONTINUED 
真。 ptrace() 调的。实调时
。 waitpid()（的们以实
作业。 wait() 子进程的。 WIFSTOPPED 
真 WSTOPSIG 进程的的。然 POSIX 
 WIFCONTINUED新的 waitpid()。 2.6.10 内
Linux  wait() 提。
我们 wait() 子进程的
#include 
#include 
#include 
#include 
int main (void)
{
int status;
pid_t pid;
if (!fork ())
return 1;
– 148 –
 5 
进程理
pid = wait (&status);