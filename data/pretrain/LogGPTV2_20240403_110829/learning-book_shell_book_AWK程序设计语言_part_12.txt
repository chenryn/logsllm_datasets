-123456
123, 456.00
Exercise 3.7修复sumcomma（带退号的数字求和程序）：检查数字中的退号是否处于正确位置。
字段固定的输入
对于那些出现在宽度固定的字段里的信息，在直接使用它们之前，通常需要某种形式的预处理，有些
程序（例如电子表格）在固定的列上面放置序号，而不是给它们带上字段分隔符，如果序号太宽，这些列
就会邻接在一起.字段固定的数据最适合用substr处理，它可以将任意组合的列挑选出来，举例来说，
假设每行的前6个字符包含一个日期，日期的形式是mmddyy，如果我们想让它们按照日期排序，最简单
的办法是先把日期转换成yymmdd的形式：
#date convert - convert mmddyy into yymmdd in $1
{$1 = substr($1,5,2) substr($1,1,2) substr($1,3,2); print )
如果输入是按照月份排序的，就像这样
013042 mary's birthday
032772 mark's birthday
052470 anniversary
061209 mother's birthday
110175 elizabeth′s birthday
那么程序的输出是
420130 mary's birthday
720327 mark's birthday
700524 anniversary
090612 mother's birthday
751101 elizabeth's birthday
---
## Page 75
第三章数据处理
67
现在数据已经准备好，可以按照年，月，日来排序了，
Exercise 3.8将日期转换成某种形式，这种形式充许你对日期进行算术运算，例如计算某两个日期之间
的天数，
程序的交叉引用检查
Awk经常用于从其他程序的输出中提取信息，有时候这些输出仅仅是一些同种类的行的集合，在这
种情况下，使用字段分割操作或函数substr是非常方便且合适的，然而，有时候产生输出的程序本来
就打算将输出表示成人类可读的形式，对于这种情况，awk需要把精心格式化过的输出重新还原成机器
容易处理的形式，只有这样，才能从互不相关的数据中提取信息，下面是一个简单的例子，
大型程序通常由多个源文件组成，知道哪些文件定义了哪些函数，以及这些函数在哪里被使用到一
可以带来许多方便之处（有时候这是非常重要的）.为了完成这个任务，Unix提供了命令nm,nm从一个
目标文件集合中提取信息，并打印一张精心格式化过的列表，这张表包含了名字，定义，以及名字在哪里
被使用到，nm的典型输出是
file.0:
00000c80 T _addroot
00000b30 T _checkdev
00000a3c T _checkdupl
U_chown
U_client
U_close
funmount.o:
0000oooo T _funmount
U cerror
只有一个字段的行（比如file.o）是文件名，有两个字段的行（比如U_close）表示的是名字被使用到
的地方，有三个字段的行表示的是名字被定义的地方，T表示这个定义是一个文本符号（函数），U表示这
个名字是未定义的，
如果直接使用这些未加处理过的信息，来判断某个文件定义了哪些名字，又或者是某个符号都在哪
里被用到一将会非常得麻烦，因为每个符号都没有和它所在的文件名放在一起，对于稍微大型的C程
序来说，nm的输出将会非常得长—awk源代码由9个文件组成，它的nm输出超过了850行.一个仅
74
仅3行的awk程序就可以把文件名加到每个符号的前面，经过它的处理，后续的程序仅通过一行就可以
获取到有用的信息：
# nm.format - add filename to each nm output line
NF == 1 ( file = $1 }
NF == 2 ( print file, $1, $2 }
NF == 3 ( print file, $2, $3 }
把上面nm的输出作为nm.format的输入，结果是
---
## Page 76
第三章数据处理
89
file.o: T _addroot
file.o: T _checkdev
file.o: T _checkdupl
file.o: U _chown
file.o: U _client
file.o: U _close
funmount.o: T_funmount
funmount.o: U cerror
现在，如果有其他程序想要对输出作进一步的处理就容易多了。
上面的输出没有包括行号信息，也没有指出某个名字在文件中被用到了多少次，但是这些信息很容
易通过文本编辑器或另一个awk程序来获取，本小节的awk程序不依赖于目标文件的编程语言，所以
它比通常的交叉引用工具更加灵活，也更加简短。
格式化的输出
接下来我们要用awk赚点钱，或者是打印支票，输入数据由多行组成，每一行都包括支票编号，金
额，收款人，字段之间用制表符分开，输出是标准的支票格式：8行高，第2行与第3行是支票编号与日
期，都向右缩进45个空格，第4行是收款人，占用45个字符宽的区域，紧跟在它后面的是3个空格，再
后面是金额，第5行是金额的大写形式，其他行都是空白，支崇看起来就像这样：
1026
Aug 31, 2015
Pay to Mary R. Worth-----
$123.45
the sum of one hundred twenty three dollars and 45 cents exactly
这是打印支票的awk程序：
75
#prchecks - print formatted checks
input:number \t amount \t payee
#
output: eight 1ines of text for preprinted check forms
BEGIN{
FS = "\t"
dashes = sp45 = sprintf("$45s", " ")
gsub(/ /, "-", dashes)
to protect the payee
"date"|getline date
get today's date
split(date, d, "")
[9]p'[ε]p[z]p=aep
initnum()# set up tables for number conversion
---
## Page 77
第三章数据处理
69
NF 1= 3 11$2 >= 1000000{
 illegal data
printf("\n1ine &d i11egal:\n$s\n\nvoID\nVoID\n\n\n", NR, $0)
next
 no check printed
{
printf("\n")
nothing on line 1
printf("&s&s\n", sp45, $1)
 number, indented 45 spaces
printf("&s&s\n", sp45, date)  # date, indented 45 spaces
amt = sprintf("&.2f", $2)
formatted amount
printf("Pay to $45.45s  $&s\n", $3 dashes, amt) # 1ine 4
printf("the sum of $s\n", numtowords(amt))
#line 5
printf ("\n\n\n")
1ines 6, 7 and 8
function numtowords(n,(
cents, dols) ( # n has 2 decimal places
cents = substr (n, length(n)-1, 2)
dols = substr(n, 1, length(n)-3)
if (dols == 0)
function intowords(n) {
n = int(n)
if (n >= 1000)
if (n >= 100)
if (n >= 20)
return nums[n]
function initnum(){
split("one two three four five six seven eight nine "\
"ten eleven twelve thirteen fourteen fifteen "\
"sixteen seventeen eighteen nineteen", nums," ")
"seventy eighty ninety",tens,“ ")
---
## Page 78
第三章数据处理
70
程序中包含了几个比较有趣的部分.首先，要注意到我们在BEGIN中是如何利用sprintf来生成76
空格字符串的，并且通过替换将空格字符串转换成破折号，还要注意的是，在函数initnum中，我们如
何通过行的延续与字符串拼接来创建split的参数一这是很常见的编程技巧.
日期通过
"data"|getline data# get today's date
从系统获取，该行执行date，再把它的输出输送给getline.为了把
Wed Jun 17 13:39:36 EDT 1987
转换成
Jun 17,1987
我们需要自己做一些处理工作.（在不支持管道的非Unix平台上，该程序需要做些修改才能正确运行）
函数numtowords与intowords把数字转换成对应的单词，转换过程非常直接（虽然程序用了一
半的代码来做这件事）.intowords是一个逼归函数，它调用自身来处理一个规模较小的子问题，这是本
章出现过的第2个递归函数，在后面我们还会遇到更多这样的函数，在很多情况下，为了把一个大问题
分解成相对容易解决的小问题，递归都是一种非常有效的方法。
Exercise3.9利用前面提到过的程序addcomma，为金额加上适号，
Exercise3.10对于负的，或特别大的金额，程序prchecks处理得并不是很好.修改程序：拒绝金额
为负的打印请求，同时能将数额特别巨大的金额分成两行打印出来。
Exercise3.11函数numtowords有时会在一行中连看打印两个空格，还会打印出像“one dollars”这
样有错误的句子，你会如何消除这些瑕疵？
Exercise 3.12修改prchecks:在适当的地方，为金额的大写形式加上连字符，比如“twenty-one
dollars".
3.2数据验证
Awk的另一个常用功能是数据验证：确保数据是合法的，或至少合理的，本节包含了几个用于验证
输入有效性的小程序，例如，考虑上一节出现的列求和程序，有没有这样一种情况：在本应是数值的字段
上出现了非数值的量（或反之)？下面这个程序与列求和程序非常相似，但没有求和操作：
# colcheck - check consistency of columns
#input:rows of numbers and strings
#
output: lines whose format differs from first line
NR == 1{
nf1d = NF
for (i = 1; i <= NF; i++)
---
## Page 79
第三章数据处理
71
type[i] = isnum($i)
if (NF 1= nfld)
printf("line &d has &d fields instead of $d\n",
NR, NF, nfld)
for (i = 1; i <= NF; i++)
if (isnum($i) 1= type[i])
printf("field &d in line &d differs from line 1\n",
i, NR)
{/$+[6-0][-+]/uuxnax}（u）wnus uotoung
同样，我们把数值看成是仅由数字构成的序列，可能有前导符号，如果想让这个判断更加完整，请参考2.1
节关于正则表达式的讨论.
对称的分隔符
本书有一个机器可读的版本，在该版本中，每一个程序都由一种特殊行开始，这个特殊行以，P1打
头，同样，程序以一种特殊行结束，该行以，P2打头，这些特殊行叫作“文本格式化”命令，有了这些命令
的帮助，在排版书籍的时候，程序可以以一种客易识别的字体显示出来，因为程序之间不能互相嵌套，所
以这些文本格式化命令必须按照交替序列，轮流出现：
.P1.P2.P1.P2....P1.P2
这个小程序，它可以用于检查分隔符是否按照正确的顺序出现，程序虽小，但却是检查程序的典型代表：
# p12check - check input for alternating .P1/.P2 delimiters
/^\.P1/( if (p 1= 0)
print ".P1 after .P1, 1ine", NR
p = 1
}
/^\.P2/ ( if (p 1= 1)
print ".P2 with no preceding .P1, 1ine", NR
p = 0
END
( if (p 1= 0) print "missing .P2 at end" )
如果分隔符按照正确的顺序出现，那么变量p就会按照01010...10的规律变化，否则，一条
错误消息被打印出来，消息含有发生错误时，当前输入行所在的行号。
84
Exereise3.13如何修改这个程序，使得它可以处理具有多种分隔符的文本？
---
## Page 80
第三章数据处理
72
密码文件检查
Unix系统中的密码文件含有投权用户的用户名及其相关信息，密码文件的每一行都由7个字段组
成：
root:qyxRi2uhuVjrg:0:2::/ :
bwk: 1L. /v6iblzzNE:9:1:Brian Kernighan:/usr/bwk:
ava:otxs1oTVoyvMQ:15:1:A1 Aho: /usr/ava:
uucp:xutIBs2hKtcls:48:1:uucp daemon:/usr/1ib/uucp:uucico
pjw:xNqY//GDc8FFg:170:2:Peter Weinberger:/usr/pjw:
mark: j0z1fuQmqIvdE : 374 :1:Mark Kernighan: /usr/bwk/mark :
第1个字段是用户的登录名，只能由字母或数字组成，第2个字段是加密后的登录密码，如果密码是空
的，那么任何人都可以利用这个用户名来登录系统，如果这个字段非空，那么只有知道密码的用户才能成
功登录.第3与第4个字段是数字，第6个字段以/开始，下面这个程序打印的行不符合前面所描述的
结构，顺带打印它们的行号，及一条恰当的诊断消息，每个晚上都让这个程序运行一遍可以让系统更加键
康，远离攻击，
#passwd - check password file
BEGIN{
FS = ":" )
NF 1= 7{
printf("line &d, does not have 7 fields: &s\n", NR, $0) }
$1 -/[^A-Za-z0-9]/{
printf(*line &d, nonalphanumeric user id: &s\n", NR, $0) }
$2 == ""{
printf(“line &d, no password: &s\n", NR, $0) )
$3-/[0-9]/{
printf("line $&d, nonnumeric user id: &s\n", NR, $0) )
$4-/[~0-9]/{
printf("line &d, nonnumeric group id: &s\n", NR, $0) }
$61~/^\//{
printf("line $d, invalid login directory: &s\n", NR, $0) }
这是增量开发程序的好例子：每当有人认为需要添加新的检查条件时，只需要往程序中添加即可，其
他部分保持不动，于是程序会越来越完善.
自动生成数据验证程序
79
密码文件检查程序由我们手工编写而成，不过更有趣的方式是把条件与消息集合自动转化成检查程
序，下面这个集合含有几个错误条件及其对应的提示信息，这些错误条件取自上一个程序.如果某个输
入行满足错误条件，对应的提示信息就会被打印出来。
---
## Page 81
第三章数据处理
NF 1= 7
does not have 7 fields
$1 ~ /[^A-Za-20-9]/
nonalphanumeric user id
$2 == *
no password
下面这个程序把条件-消息对转化成检查程序：
#checkgen - generate data-checking program
#
input: expressions of the form: pattern tabs message
#
output: program to print message when pattern matches
BEGIN { FS = "\t+" }
{printf("&s {\n\tprintf(\"1ine $&d, s: &s\\n\",NR, $0) }\n",
$1, $2)
程序的输出是一系列的条件与打印消息的动作：
NF 1= 7{
printf("line &d, does not have 7 fields: $s\n",NR,$0) }
$1 ~/[~A-Za-20-9]/{
printf("line $d, nonalphanumeric user id: &s\n",NR,$0) )
$2 == ""{
printf("line $d, no password: &s\n",NR,S0) )
检查程序运行时，如果当前输入行使得条件为真，那么程序就会打印出一条消息，消息含有当前输入行的
行号，错误消息，及当前输入行的内客.需要注意的是，在程序checkgen中，printf格式字符串的某
些特殊字符需要用双引号括起来，只有这样才能生成有效的程序，举例来说，为了输出一个告，必须将它
写成&8；为了输出\n,必须写成\\n.
用一个awk程序来生成另一个awk程序是一个应用很广泛的技巧（不限于awk语言），在本书后面
的章节里我们还会看到更多这样的例子。
Exercise3.14增强checkgen的功能，使得我们可以原封不动地向程序传递一段代码，例如创建一个
BEGIN来设置字段分隔符.