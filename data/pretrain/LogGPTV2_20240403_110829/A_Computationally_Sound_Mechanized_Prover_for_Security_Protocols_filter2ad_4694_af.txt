### Assignment and Decryption

Consider the assignment that defines \( x_k \), and the decryption function such that:
\[ \text{dec}(\text{enc}(m, \text{kgen}(r), r), \text{kgen}(r)) = i_{\perp}(m) \]
by (enc). Consequently, we have:
\[ \text{dec}(x_m, x_k) = i_{\perp}(k_{2b}(x_k[u])) \]

By the injectivity of \( i_{\perp} \) and \( k_{2b} \), the assignment to \( x_k \) simplifies to \( x_k[u] \) using the equations:
\[ \forall x : \text{bitstring}, \quad i_{\perp}^{-1}(i_{\perp}(x)) = x \]
\[ \forall x : T_k, \quad k_{2b}^{-1}(k_{2b}(x)) = x \]

After applying RemoveAssign(\( x_k \)), the security of encryption ensures:
\[ \text{enc}(k_{2b}(x_k[u]), \text{kgen}(x_r), x_r) \]
becomes
\[ \text{enc}_2(Z(k_{2b}(x_k[u])), \text{kgen}(x_r), x_r) \]
which simplifies to:
\[ \text{enc}_2(Z_k, \text{kgen}(x_r), x_r) \]
using the fact that all keys have the same length, expressed as:
\[ \forall x : T_k, \quad Z(k_{2b}(x)) = Z_k \]

### Simplification with Lists

Using lists instead of arrays simplifies this transformation. We do not need to add instructions to insert values in the list, as all variables are implicitly treated as arrays. If there are multiple occurrences of \( \text{mac}(x_i, k) \) with the same key in the initial process, each check \( (\text{mj}, k, \text{maj}) \) is replaced with a find operation, with one branch for each occurrence of mac. This allows the prover to automatically distinguish cases based on the value of \( i \) such that \( \text{mj} = x_i \). This distinction is useful in the subsequent steps of the proof.

### Criteria for Proving Secrecy Properties

#### One-Session Secrecy

We define syntactic criteria to prove the secrecy properties of protocols. The notation \( \text{if defined} (M) \text{ then } P \) is syntactic sugar for:
\[ \text{find suchthat defined} (M) \land 1 \text{ then } P \text{ else yield} \]

**Definition 4 (One-Session Secrecy):** The process \( Q \) preserves the one-session secrecy of \( x \) when:
\[ Q | Q_x \approx Q | Q'_x \]
where:
\[ Q_x = c(u_1 : [1, n_1], \ldots, u_m : [1, n_m]); \text{ if defined} (x[u_1, \ldots, u_m]) \text{ then } c(x[u_1, \ldots, u_m]) \]
\[ Q'_x = c(u_1 : [1, n_1], \ldots, u_m : [1, n_m]); \text{ if defined} (x[u_1, \ldots, u_m]) \text{ then new } y : T; c(y) \]

Here, \( c \notin \text{fc}(Q) \), \( u_1, \ldots, u_m \notin \text{var}(Q) \), and \( E(x) = [1, n_1] \times \ldots \times [1, n_m] \to T \).

**Proposition 4 (One-Session Secrecy):** Consider a process \( Q \) such that there exists a set of variables \( S \) where:
1. Definitions of \( x \) are either restrictions \( \text{new } x[i] : T \) and \( x \in S \), or assignments \( \text{let } x[i] : T = z[M_1, \ldots, M_l] \) where \( z \) is defined by restrictions \( \text{new } z[i_l] : T \) and \( z \in S \).
2. All accesses to variables \( y \in S \) in \( Q \) are of the form \( \text{let } y'[i] : T' = y[M_1, \ldots, M_l] \) with \( y' \in S \).

Then \( Q | Q_x \approx_0 Q | Q'_x \), hence \( Q \) preserves the one-session secrecy of \( x \).

#### Secrecy

**Definition 5 (Secrecy):** The process \( Q \) preserves the secrecy of \( x \) when:
\[ Q | R_x \approx Q | R'_x \]
where:
\[ R_x = !i \leq n \, c(u_1 : [1, n_1], \ldots, u_m : [1, n_m]); \text{ if defined} (x[u_1, \ldots, u_m]) \text{ then } c(x[u_1, \ldots, u_m]) \]
\[ R'_x = !i \leq n \, c(u_1 : [1, n_1], \ldots, u_m : [1, n_m]); \text{ if defined} (x[u_1, \ldots, u_m]) \text{ then find } u' \leq n \text{ suchthat defined} (y[u'], u_1[u'], \ldots, u_m[u']) \land u_1[u'] = u_1 \land \ldots \land u_m[u'] = u_m \text{ then } c(y[u']) \text{ else new } y : T; c(y) \]

Here, \( c \notin \text{fc}(Q) \), \( u_1, \ldots, u_m, u' \notin \text{var}(Q) \), \( E(x) = [1, n_1] \times \ldots \times [1, n_m] \to T \), and \( I_{\eta}(n) \geq I_{\eta}(n_1) \times \ldots \times I_{\eta}(n_m) \).

**Proposition 5 (Secrecy):** Assume \( Q \) satisfies the hypothesis of Proposition 4. When \( T \) is a trace of \( C[Q] \) for some evaluation context \( C \), we define \( \text{defRestr}_T(x[a]) \), the defining restriction of \( x[a] \) in trace \( T \), as follows:
- If \( x[a] \) is defined by \( \text{new } x[a] : T \) in \( T \), then \( \text{defRestr}_T(x[a]) = x[a] \).
- If \( x[a] \) is defined by \( \text{let } x[a] : T = z[M_1, \ldots, M_l] \), then \( \text{defRestr}_T(x[a]) = z[a_l] \) for all \( k \leq l \) and \( E \) is the environment in \( T \) at the definition of \( x[a] \).

Assume that for all evaluation contexts \( C \) acceptable for \( Q \), the probability:
\[ \Pr[T \land a \neq a' \land \text{defRestr}_T(x[a]) = \text{defRestr}_T(x[a'])] \]
is negligible. Then \( Q \) preserves the secrecy of \( x \).

### Proof Strategy

The proof strategy involves the following steps:
1. At the beginning of the proof and after each successful cryptographic transformation, the prover executes Simplify and tests whether the desired security properties are proved.
2. If the properties are proved, the prover stops.
3. To perform cryptographic and syntactic transformations, the prover relies on advice. It tries each available cryptographic transformation and, if it fails, suggests syntactic transformations that could make the desired transformation work.
4. The prover determines advised transformations based on specific conditions, such as recognizing terms and handling variable definitions.

### Experimental Results

Our prover has been successfully tested on several protocols from the literature. In these examples, shared-key encryption is encoded using a stream cipher and a MAC, while public-key encryption is assumed to be IND-CCA2, and public-key signatures are secure against existential forgery.

- **Otway-Rees [40]:** We automatically prove the secrecy of the exchanged key.
- **Yahalom [18]:** For the original protocol, our prover cannot show one-session secrecy due to a confirmation round that may reveal information about the key. After removing this round, one-session secrecy is proved, but full secrecy is not, as the adversary can force multiple sessions to use the same key.
- **Needham-Schroeder [38]:** Our prover shows one-session secrecy of the exchanged key but not full secrecy, due to a known attack where the adversary forces multiple sessions to use the same key.