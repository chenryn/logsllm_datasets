} while (0)
int main(int argc, char *argv[])
{
unsigned long *buggy[50];
unsigned long *interesting[10];
int i;
for(i = 0; i  0; i -=2)
free(buggy[i]);
DebugBreak();
for(i = 0; i < 10; i++) {
interesting[i] = malloc(48);
memset(interesting[i], 0xaa, 48);
}
DebugBreak();
@autoreleasepool {
return UIApplicationMain(argc, argv, nil, NSStringFromClass
([bookAppDelegate class]));
}
}
You start by running the application:
GNU gdb 6.3.50-20050815 (Apple version gdb-1708) (Fri Aug 26 04:12:03 UTC 2011)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for details.
This GDB was confi gured as “--host=i386-apple-darwin
--target=arm-apple-darwin”.tty /dev/ttys002
target remote-mobile /tmp/.XcodeGDBRemote-1923-73
Switching to remote-macosx protocol
mem 0x1000 0x3fffffff cache
mem 0x40000000 0xffffffff none
cc0077..iinndddd 119966 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 197
mem 0x00000000 0x0fff none
[Switching to process 7171 thread 0x1c03]
[Switching to process 7171 thread 0x1c03]
sharedlibrary apply-load-rules all
Current language: auto; currently objective-c
(gdb) x/50x buggy
0x2fdffacc: 0x0017ca50 0x0017ca80 0x0017cab0 0x0017cae0
0x2fdffadc: 0x0017cb10 0x0017cb40 0x0017cb70 0x0017cba0
0x2fdffaec: 0x0017cbd0 0x0017cc00 0x0017cc30 0x0017cc60
0x2fdffafc: 0x0017cc90 0x0017ccc0 0x0017ccf0 0x0017cd20
0x2fdffb0c: 0x0017cd50 0x0017cd80 0x0017cdb0 0x0017cde0
0x2fdffb1c: 0x0017ce10 0x0017ce40 0x0017ce70 0x0017cea0
0x2fdffb2c: 0x0017ced0 0x0017cf00 0x0017cf30 0x0017cf60
0x2fdffb3c: 0x0017cf90 0x0017cfc0 0x0017cff0 0x0017d020
0x2fdffb4c: 0x0017d050 0x0017d080 0x0017d0b0 0x0017d0e0
0x2fdffb5c: 0x0017d110 0x0017d140 0x0017d170 0x0017d1a0
0x2fdffb6c: 0x0017d1d0 0x0017d200 0x0017d230 0x0017d260
0x2fdffb7c: 0x0017d290 0x0017d2c0 0x0017d2f0 0x0017d320
0x2fdffb8c: 0x0017d350 0x0017d380
(gdb) x/15x 0x0017ca80
0x17ca80: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc
0x17ca90: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc
0x17caa0: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc
0x17cab0: 0xcccccccc 0xcccccccc 0xcccccccc
(gdb) c
Continuing.
All of the 50 objects were allocated, and each one of them is fi lled with 0xcc,
as expected. Going on further you can see the status of the application after 25
objects are freed:
Program received signal SIGINT, Interrupt.
0x0000235a in main (argc=1, argv=0x2fdffbac) at
/Users/snagg/Documents/Book/booktest/booktest/main.m:34
34 DebugBreak();
(gdb) x/15x 0x0017cae0
0x17cae0: 0xa0000000 0xe0017cb4 0xcccc0003 0xcccccccc
0x17caf0: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc
0x17cb00: 0xcccccccc 0xcccccccc 0xcccccccc 0x0003cccc
0x17cb10: 0xcccccccc 0xcccccccc 0xcccccccc
(gdb) c
Continuing.
The fourth object is one of those that were freed, specifi cally; it is the last one
added to the freelist (in fact, the fi rst object is stored in the mag_last_free cache
instead). Its previous pointer is set to NULL and the next pointer is set to the sixth
object in the buggy array. Finally, you allocate the objects you are interested in:
Program received signal SIGINT, Interrupt.
0x000023fe in main (argc=1, argv=0x2fdffbac) at
/Users/snagg/Documents/Book/booktest/booktest/main.m:41
cc0077..iinndddd 119977 44//1166//22001122 55::4466::1111 PPMM
198 Chapter 7 n Exploitation
41 DebugBreak();
(gdb) x/10x interesting
0x2fdffaa4: 0x0017ca80 0x0017cae0 0x0017cb40 0x0017cba0
0x2fdffab4: 0x0017cc00 0x0017cc60 0x0017ccc0 0x0017cd20
0x2fdffac4: 0x0017cd80 0x0017cde0
(gdb) x/15x 0x0017ca80
0x17ca80: 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa
0x17ca90: 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa
0x17caa0: 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa
0x17cab0: 0xcccccccc 0xcccccccc 0xcccccccc
All the 10 replaced objects were previously freed and their content is fi lled
with 0xaa as expected. In the output, you see the content of the fi rst object of
buggy, whose content you have seen before.
In a real-life application, the same technique can be applied, although some
diffi culties arise. Specifi cally, the heap state at the beginning of the exploit will
be unknown and far from “ideal,” and the attacker might not have enough room
to allocate as many objects as she wishes. Nonetheless, often this technique
proves to be pretty useful and applicable. Later in this chapter when describing
TCMalloc, you learn how to apply it to MobileSafari.
Exploiting Object Lifetime Issues
When dealing with object lifetime issues it is very important to be able to replace
the vulnerable object in memory. This can become tricky when memory blocks
are coalesced; in fact, in that case, the object size can change in more or less
unpredictable ways. In general, you have three ways to overcome this problem:
n Replace the object right after the vulnerable one was freed.
n Place the object in between allocated objects.
n Place the object in between objects whose size you control.
With the fi rst strategy the object will be fetched directly from the mag_last_
free cache, and therefore no coalescence can take place. The second case makes
sure that the next and the previous objects are not freed, again ensuring coales-
cence is not possible. The last case allows you to predict the size of the fi nal
object that will be coalesced, and thus be able to allocate a proper replacement
object. To use the fi rst or the second technique, you can use the examples
previously shown in this chapter; you can try out the last technique with this
simple application:
#define DebugBreak() \
do { \
__asm__(“mov r0, #20\nmov ip, r0\nsvc 128\nmov r1, #37\nmov ip,
r1\nmov r1, #2\nmov r2, #1\n svc 128\n” \
: : : “memory”,”ip”,”r0”,”r1”,”r2”); \
cc0077..iinndddd 119988 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 199
} while (0)
int main(int argc, char *argv[])
{
unsigned long *ptr1, *ptr2, *ptr3, *ptr4;
unsigned long *replacement;
ptr1 = malloc(48);
ptr2 = malloc(64);
ptr3 = malloc(80);
ptr4 = malloc(24);
DebugBreak();
free(ptr1);
free(ptr2);
free(ptr3);
free(ptr4);
DebugBreak();
replacement = malloc(192);
DebugBreak();
@autoreleasepool {
return UIApplicationMain(argc, argv, nil, NSStringFromClass
([bookAppDelegate class]));
}
}
The application allocates four objects, each one of them a different size. The
goal is to replace ptr2. To do this you take into account blocks coalescence, and
therefore the replacement object will be 192 bytes instead of 64 bytes. Running
the application verifi es this:
GNU gdb 6.3.50-20050815 (Apple version gdb-1708) (Fri Aug 26 04:12:03 UTC 2011)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for details.
This GDB was confi gured as “--host=i386-apple-darwin --target=arm-apple-darwin”.
tty /dev/ttys002
target remote-mobile /tmp/.XcodeGDBRemote-1923-41
Switching to remote-macosx protocol
mem 0x1000 0x3fffffff cache
mem 0x40000000 0xffffffff none
mem 0x00000000 0x0fff none
[Switching to process 7171 thread 0x1c03]
[Switching to process 7171 thread 0x1c03]
sharedlibrary apply-load-rules all
cc0077..iinndddd 119999 44//1166//22001122 55::4466::1111 PPMM
200 Chapter 7 n Exploitation
Current language: auto; currently objective-c
(gdb) x/x ptr1
0x170760: 0x00000000
(gdb) c
Continuing.
ptr1 is allocated at 0x170760. Continuing the execution, you examine its
content after all the pointers are freed:
Program received signal SIGINT, Interrupt.
0x0000240e in main (argc=1, argv=0x2fdffbac) at
/Users/snagg/Documents/Book/booktest/booktest/main.m:34
34 DebugBreak();
(gdb) x/4x ptr1
0x170760: 0x20000000 0x20000000 0x0000000c 0x00000000
(gdb) c
Continuing.
ptr1 was assigned to quantum 0x000c, which corresponds to 192 bytes. It
appears you are on the right track. Finally, the application allocates the replace-
ment object:
Program received signal SIGINT, Interrupt.
0x00002432 in main (argc=1, argv=0x2fdffbac) at
/Users/snagg/Documents/Book/booktest/booktest/main.m:38
38 DebugBreak();
(gdb) x/x replacement
0x170760: 0x20000000
(gdb)
The replacement object is correctly placed where ptr1 used to be in memory.
ptr2 has been successfully replaced regardless of block coalescence.
The next section examines a different allocator used by a number of applications,
including MobileSafari.
Understanding TCMalloc
TCMalloc is an allocator originally conceived by Sanjay Ghemawat, and it is
meant to be as fast as possible in multi-threaded applications. As a matter of
fact, the whole structure of the allocator reduces thread interaction and locking
to a bare minimum.
TCMalloc is of great interest for us because it is the allocator of choice for
WebKit. In this section you delve into it to understand how it works and how
you can leverage it to your needs as attackers.
TCMalloc has two different mechanisms for dealing with large and small
allocations. The former are managed by the so-called Pageheap and are directly
cc0077..iinndddd 220000 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 201
relayed to the underlying OS allocator, which was already discussed, whereas
the latter are handled entirely by TCMalloc.
Large Object Allocation and Deallocation
Whenever an allocation for an object that is bigger than a user-defi ned threshold,
kMaxSize, is requested, the page-level allocator is used. The page-level allocator,
Pageheap, allocates spans, that is, a set of contiguous pages of memory.
The procedure starts by looking in the double-linked list of spans already
allocated to see whether any of the correct size are available to TCMalloc. In
the double-linked list are two types of spans: ones that are available for use
and ones that were deallocated by TCMalloc but have yet to be returned to the
underlying system heap.
If a deallocated span is available, it is fi rst reallocated and then returned. If,
instead, the span is available and not marked deallocated, it is simply returned.
If no spans of the correct size are available, the page-level allocator tries to
locate a bigger span that is “good enough” for the role; that is, a span that is as
close as possible to the requested size. Once it has found such a span, it splits
the span so that the rest of the memory can be used later and returns a span
of the correct size.
If no suitable spans are available, a new set of pages is requested to the under-
lying OS and split into two memory objects: one of the requested size and
another one of the allocated size minus the amount of memory needed by the
requested allocation.
When a span is not needed anymore, it is fi rst coalesced with either the preced-
ing span, the next span, or both, and then it is marked as free. Finally, the span
is returned to the system by the garbage collector depending on a number of
user-defi ned parameters, specifi cally, once the number of freed spans is greater
than targetPageCount.
Small Object Allocation
The mechanism used for allocating small objects is pretty convoluted. Each
running thread has its own dedicated object cache and freelist. A freelist is a
double-linked list that is divided into allocation classes. The class for objects
that are smaller than 1024 bytes is computed as follows: (object_size + 7)/8.
For objects that are bigger than that, they are 128 bytes aligned and the class
is computed this way: (object_size + 127 + (120<<7))/128.
In addition to the per-thread cache, a central cache exists. The central cache
is shared by all threads and has the same structure of the thread cache.
When a new allocation is requested, the allocator fi rst retrieves the thread
cache for the current thread and looks into the thread freelist to verify whether
any slots are available for the correct allocation class. If this fails, the allocator
cc0077..iinndddd 220011 44//1166//22001122 55::4466::1111 PPMM
202 Chapter 7 n Exploitation
looks inside the central cache and retrieves an object from there. For performance
purposes, if the thread cache is forced to ask the central cache for available
objects instead of just transferring one object in the thread-cache, a whole range
of objects is fetched.
In the scenario where both the thread cache and the central cache have no
objects of the correct allocation class, those objects are fetched directly from the
spans by following the procedure explained for large objects.
Small Object Deallocation
When a small object is deallocated, it is returned to the thread cache freelist.
If the freelist exceeds a user-defi ned parameter, a garbage collection occurs.
The garbage collector then returns the unused objects from the thread
cache freelist to the central cache freelist. Because all the objects in the central
cache come from spans, whenever a new set of objects is reassigned to the
central freelist, the allocator verifi es whether the span the object belongs to
is completely free or not. If it is, the span is marked as deallocated and will
eventually be returned to the system, as explained before for large object
allocation.
Taming TCMalloc
This section dissects TCMalloc techniques used to control the heap layout so
that it becomes as predictable as possible. Specifi cally, it explains what steps
are needed to exploit an object lifetime issue and talks about a technique called
Heap Feng Shui. The technique was discussed publically for the fi rst time by
Alex Sotirov, and in that case it was tailored to IE specifi cally to exploit heap
overfl ows in IE. Nonetheless, the same concepts can be applied to pretty much
every heap implementation available on the market.
Obtaining a Predictable Heap Layout
To obtain a predictable heap layout, the fi rst thing you need to do is fi nd an
effective way to trigger the garbage collector. This is particularly important in
the case of object lifetime issues because, most of the time, the objects aren’t
actually freed until a garbage collection occurs. The most obvious way of trig-
gering the garbage collector is to use JavaScript. This, however, means that the
techniques used are JavaScript-engine–dependent.
You can fi nd the MobileSafari JavaScript engine, codenamed Nitro, in the
JavascriptCore folder inside the WebKit distribution. Each object allocated