码看起来像这样：
spam = {'name': 'Pooka', 'age': 5}
if 'color' not in spam:
spam['color'] = 'black'
setdefault()方法提供了一种方式，在一行中完成这件事。传递给该方法的第一
个参数，是要检查的键。第二个参数，是如果该键不存在时要设置的值。如果该键
确实存在，方法就会返回键的值。在交互式环境中输入以下代码：
>>> spam = {'name': 'Pooka', 'age': 5}
>>> spam.setdefault('color', 'black')
'black'
>>> spam
{'color': 'black', 'age': 5, 'name': 'Pooka'}
>>> spam.setdefault('color', 'white')
'black'
>>> spam
{'color': 'black', 'age': 5, 'name': 'Pooka'}
第一次调用setdefault()时，spam变量中的字典变为{'color': 'black', 'age': 5, 'name':
'Pooka'}。该方法返回值'black'，因为现在该值被赋给键'color'。当spam.setdefault('color',
'white')接下来被调用时，该键的值“没有”被改变成'white'，因为spam变量已经有
名为'color'的键。
setdefault()方法是一个很好的快捷方式，可以确保一个键存在。下面有一个小
程序，计算一个字符串中每个字符出现的次数。打开一个文件编辑器窗口，输入以
下代码，保存为characterCount.py：
message = 'It was a bright cold day in April, and the clocks were striking thirteen.'
count = {}
第5章 字典和结构化数据 85
for character in message:
count.setdefault(character, 0)
count[character] = count[character] + 1
print(count)
程序循环迭代message字符串中的每个字符，计算每个字符出现的次数。setdefault()
方法调用确保了键存在于 count 字典中（默认值是 0），这样在执行 count[character] =
count[character] + 1时，就不会抛出KeyError错误。程序运行时，输出如下：
{' ': 13, ',': 1, '.': 1, 'A': 1, 'I': 1, 'a': 4, 'c': 3, 'b': 1, 'e': 5, 'd': 3, 'g': 2, 'i':
6, 'h': 3, 'k': 2, 'l': 3, 'o': 2, 'n': 4, 'p': 1, 's': 3, 'r': 5, 't': 6, 'w': 2, 'y': 1}
从输出可以看到，小写字母c出现了3次，空格字符出现了13次，大写字母A
出现了1次。无论message变量中包含什么样的字符串，这个程序都能工作，即使
该字符串有上百万的字符！
5.2 漂亮打印
如果程序中导入pprint模块，就可以使用pprint()和pformat()函数，它们将“漂亮
打印”一个字典的字。如果想要字典中表项的显示比print()的输出结果更干净，这就有
用了。修改前面的characterCount.py程序，将它保存为prettyCharacterCount.py。
import pprint
message = 'It was a bright cold day in April, and the clocks were striking
thirteen.'
count = {}
for character in message:
count.setdefault(character, 0)
count[character] = count[character] + 1
pprint.pprint(count)
这一次，当程序运行时，输出看起来更干净，键排过序。
{' ': 13,
',': 1,
'.': 1,
'A': 1,
'I': 1,
'a': 4,
'b': 1,
'c': 3,
'd': 3,
'e': 5,
'g': 2,
'h': 3,
'i': 6,
'k': 2,
'l': 3,
'n': 4,
'o': 2,
'p': 1,
86 Python编程快速上手——让繁琐工作自动化
'r': 5,
's': 3,
't': 6,
'w': 2,
'y': 1}
如果字典本身包含嵌套的列表或字典，pprint.pprint()函数就特别有用。
如果希望得到漂亮打印的文本作为字符串，而不是显示在屏幕上，那就调用
pprint.pformat()。下面两行代码是等价的：
pprint.pprint(someDictionaryValue)
print(pprint.pformat(someDictionaryValue))
5.3 使用数据结构对真实世界建模
甚至在因特网之前，人们也有办法与世界另一边的某人下一盘国际象棋。每个
棋手在自己家里放好一个棋盘，然后轮流向对方寄出明信片，描述每一着棋。要做
到这一点，棋手需要一种方法，无二义地描述棋盘的状态，以及他们的着法。
在“代数记谱法”中，棋盘空间由一个数字和字母坐标确定，如图5-1所示。
图5-1 代数记谱法中棋盘的坐标
棋子用字母表示：K表示王，Q表示后，R表示车，B表示象，N表示马。描述一
次移动，用棋子的字母和它的目的地坐标。一对这样的移动表示一个回合（白方先下），
例如，棋谱2. Nf3 Nc6表明在棋局的第二回合，白方将马移动到f3，黑方将马移动到c6。
代数记谱法还有更多内容，但要点是你可以用它无二义地描述象棋游戏，不需
要站在棋盘前。你的对手甚至可以在世界的另一边！实际上，如果你的记忆力很好，
甚至不需要物理的棋具：只需要阅读寄来的棋子移动，更新心里想的棋盘。
计算机有很好的记忆力。现在计算机上的程序，很容易存储几百万个像'2. Nf3
Nc6'这样的字符串。这就是为什么计算机不用物理棋盘就能下象棋。它们用数据建
模来表示棋盘，你可以编写代码来使用这个模型。
这里就可以用到列表和字典。可以用它们对真实世界建模，例如棋盘。作为第
第5章 字典和结构化数据 87
一个例子，我们将使用比国际象棋简单一点的游戏：井字棋。
5.3.1 井字棋盘
井字棋盘看起来像一个大的井字符号（#），有9个空格，可以包含X、O或空。
要用字典表示棋盘，可以为每个空格分配一个字符串键，如图5-2所示。
图5-2 井字棋盘的空格和它们对应的键
可以用字符串值来表示，棋盘上每个空格有什么：'X'、'O'或' '（空格字符）。因此，
需要存储9个字符串。可以用一个字典来做这事。带有键'top-R'的字符串表示右上角，
带有键'low-L'的字符串表示左下角，带有键'mid-M'的字符串表示中间，以此类推。
这个字典就是表示井字棋盘的数据结构。将这个字典表示的棋盘保存在名为
theBoard 的变量中。打开一个文件编辑器窗口，输入以下代码，并保存为
ticTacToe.py：
theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',
'mid-L': ' ', 'mid-M': ' ', 'mid-R': ' ',
'low-L': ' ', 'low-M': ' ', 'low-R': ' '}
保存在theBoard变量中的数据结构，表示了图5-3中的井字棋盘。
图5-3 一个空的井字棋盘
因为theBoard变量中每个键的值都是单个空格字符，所以这个字典表示一个完
全干净的棋盘。如果玩家X选择了中间的空格，就可以用下面这个字典来表示棋盘：
88 Python编程快速上手——让繁琐工作自动化
theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',
'mid-L': ' ', 'mid-M': 'X', 'mid-R': ' ',
'low-L': ' ', 'low-M': ' ', 'low-R': ' '}
theBoard变量中的数据结构现在表示图5-4中的井字棋盘。
图5-4 第一着
一个玩家O获胜的棋盘上，他将O横贯棋盘的顶部，看起来像这样：
theBoard = {'top-L': 'O', 'top-M': 'O', 'top-R': 'O',
'mid-L': 'X', 'mid-M': 'X', 'mid-R': ' ',
'low-L': ' ', 'low-M': ' ', 'low-R': 'X'}
theBoard变量中的数据结构现在表示图5-5中的井字棋盘。
图5-5 玩家O获胜
当然，玩家只看到打印在屏幕上的内容，而不是变量的内容。让我们创建一个
函数，将棋盘字典打印到屏幕上。将下面代码添加到ticTacToe.p（y 新代码是黑体的）：
theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',
'mid-L': ' ', 'mid-M': ' ', 'mid-R': ' ',
'low-L': ' ', 'low-M': ' ', 'low-R': ' '}
def printBoard(board):
print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])
print('-+-+-')
print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
print('-+-+-')
print(board['low-L'] + '|' + board['low-M'] + '|' + board['low-R'])
printBoard(theBoard)
运行这个程序时，printBoard()将打印出空白井字棋盘。
第5章 字典和结构化数据 89
| |
-+-+-
| |
-+-+-
| |
printBoard()函数可以处理传入的任何井字棋数据结构。尝试将代码改成以下的样子：
theBoard = {'top-L': 'O', 'top-M': 'O', 'top-R': 'O', 'mid-L': 'X', 'mid-M':
'X', 'mid-R': ' ', 'low-L': ' ', 'low-M': ' ', 'low-R': 'X'}
def printBoard(board):
print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])
print('-+-+-')
print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
print('-+-+-')
print(board['low-L'] + '|' + board['low-M'] + '|' + board['low-R'])
printBoard(theBoard)
现在运行该程序，新棋盘将打印在屏幕上。
O|O|O
-+-+-
X|X|
-+-+-
| |X
因为你创建了一个数据结构来表示井字棋盘，编写了printBoard()中的代码来解
释该数据结构，所以就有了一个程序，对井字棋盘进行了“建模”。也可以用不同
的方式组织数据结构（例如，使用'TOP-LEFT'这样的键来代替'top-L'），但只要代码
能处理你的数据结构，就有了正确工作的程序。
例如，printBoard()函数预期井字棋数据结构是一个字典，包含所有9个空格的
键。假如传入的字典缺少'mid-L'键，程序就不能工作了。
O|O|O
-+-+-
Traceback (most recent call last):
File "ticTacToe.py", line 10, in 
printBoard(theBoard)
File "ticTacToe.py", line 6, in printBoard
print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
KeyError: 'mid-L'
现在让我们添加代码，允许玩家输入他们的着法。修改ticTacToe.py程序如下所示：
theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ', 'mid-L': ' ', 'mid-M': '
', 'mid-R': ' ', 'low-L': ' ', 'low-M': ' ', 'low-R': ' '}
def printBoard(board):
print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])
print('-+-+-')
print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
print('-+-+-')
print(board['low-L'] + '|' + board['low-M'] + '|' + board['low-R'])
turn = 'X'
for i in range(9):
 printBoard(theBoard)
90 Python编程快速上手——让繁琐工作自动化
print('Turn for ' + turn + '. Move on which space?')
 move = input()
 theBoard[move] = turn
 if turn == 'X':
turn = 'O'
else:
turn = 'X'
p rintBoard(theBoard)
新的代码在每一步新的着法之前，打印出棋盘，获取当前棋手的着法，相
应地更新棋盘，然后改变当前棋手，进入到下一着。
运行该程序，它看起来像这样：
| |
-+-+-
| |
-+-+-
| |
Turn for X. Move on which space?
mid-M
| |
-+-+-
|X|
-+-+-