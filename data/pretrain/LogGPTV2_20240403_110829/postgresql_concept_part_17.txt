intotwotablesrelatedbyinheritance. Inthefigure,parent_testaccessesonlytheparent_testrows,
butparent_test*accessesboth parent_testandchild_testrows. Thatis, parent_test*accessesonly
columnscommontoalltables. Becausechild_test.col2isnotintheparenttable,itisnotdisplayed.
Figure13.7showsthatinheritedtablescanbelayeredontopofoneanother.
Consider a practical example that records information about employees and managers. The
tableemployee can hold information about nonmanagerialemployees; thetablemanager can hold
information about managers. The manager table can inherit all the columns from employee and
have additionalcolumns as well. You can then accessnonmanagerial employeesusing employee,
managersusingmanager,andallemployeesincludingmanagersusingemployee*.
POSTGRESQLrelease7.1andlaterautomaticallyaccessesanyinheritedtables. Anasteriskis
notneededafterthetablename. ThekeywordONLYisusedtopreventinheritedtableaccess.
146 CHAPTER13. TABLEMANAGEMENT
test=> CREATE TABLE parent_test (col1 INTEGER);
CREATE
test=> CREATE TABLE child_test (col2 INTEGER) INHERITS (parent_test);
CREATE
test=> \d parent_test
Table "parent_test"
Attribute | Type | Modifier
-----------+---------+----------
col1 | integer |
test=> \d child_test
Table "child_test"
Attribute | Type | Modifier
-----------+---------+----------
col1 | integer |
col2 | integer |
Figure13.5: Creationofinheritedtables
test=> INSERT INTO parent_test VALUES (1);
INSERT 18837 1
test=> INSERT INTO child_test VALUES (2,3);
INSERT 18838 1
test=> SELECT * FROM parent_test;
col1
------
1
(1 row)
test=> SELECT * FROM child_test;
col1 | col2
------+------
2 | 3
(1 row)
test=> SELECT * FROM parent_test*;
col1
------
1
2
(2 rows)
Figure13.6: Accessinginheritedtables
13.4. INHERITANCE 147
test=> CREATE TABLE grandchild_test (col3 INTEGER) INHERITS (child_test);
CREATE
test=> INSERT INTO grandchild_test VALUES (4, 5, 6);
INSERT 18853 1
test=> SELECT * FROM parent_test*;
col1
------
1
2
4
(3 rows)
test=> SELECT * FROM child_test*;
col1 | col2
------+------
2 | 3
4 | 5
(2 rows)
Figure13.7: Inheritanceinlayers
148 CHAPTER13. TABLEMANAGEMENT
test=> CREATE VIEW customer_ohio AS
test-> SELECT *
test-> FROM customer
test-> WHERE state = ’OH’;
CREATE 18908 1
test=>
test=> -- let sanders see only Ohio customers
test=> GRANT SELECT ON customer_ohio TO sanders;
CHANGE
test=>
test=> -- create view to show only certain columns
test=> CREATE VIEW customer_address AS
test-> SELECT customer_id, name, street, city, state, zipcode, country
test-> FROM customer;
CREATE 18909 1
test=>
test=> -- create view that combines fields from two tables
test=> CREATE VIEW customer_finance AS
test-> SELECT customer.customer_id, customer.name, finance.credit_limit
test-> FROM customer, finance
test-> WHERE customer.customer_id = finance.customer_id;
CREATE 18910 1
Figure13.8: Examplesofviews
13.5 Views
Views are pseudo-tables. That is, they are not real tables, but nevertheless appear as ordinary
tablestoSELECT. Aviewcanrepresentasubsetofarealtable,selectingcertaincolumnsorcertain
rowsfromanordinarytable. Aviewcanevenrepresentjoinedtables. Becauseviewsareassigned
separate permissions, you can use them to restrict table access so that users see only specific
rowsorcolumnsofatable.
ViewsarecreatedusingtheCREATEVIEWcommand. Figure13.8showsthecreationofseveral
views. The viewcustomer_ohio selectsonly customers from Ohio. SELECTson it will therefore
show only Ohio customers. The user sanders is then given SELECT access to the view. The
customer_address will show only address information. The customer_finance view is a join of
customerandfinance,showingcolumnsfrombothtables.
DROP VIEW removes a view. Because views are not ordinary tables, INSERTs, UPDATEs, and
DELETEsonviewshavenoeffect. Thenextsectionshowshowrulescancorrectthisproblem.
13.6. RULES 149
test=> CREATE TABLE ruletest (col INTEGER);
CREATE
test=> CREATE RULE ruletest_insert AS -- rule name
test-> ON INSERT TO ruletest -- INSERT rule
test-> DO INSTEAD -- DO INSTEAD-type rule
test-> NOTHING; -- ACTION is NOTHING
CREATE 18932 1
test=> INSERT INTO ruletest VALUES (1);
test=> SELECT * FROM ruletest;
col
-----
(0 rows)
Figure13.9: RuletopreventanINSERT
13.6 Rules
Rulesallowactionstotakeplacewhenatableisaccessed. Inthisway,theycanmodifytheeffects
of SELECT,INSERT,UPDATE,andDELETE.
Figure13.9showsarulethatpreventsINSERTsintoatable. TheINSERTruleisnamedruletest_-
insertandtheactionisNOTHING. NOTHINGisaspecialrulekeywordthatdoesnothing.
Twotypesofrulesexist. DOrulesperformSQLcommandsinadditiontothesubmittedquery.
DOINSTEADrulesreplacetheuserquerywiththeruleaction.
Figure 13.10 shows how rules can track table changes. In the figure, service_request holds
currentservicerequests,andservice_request_logrecordschangesintheservice_requesttable. The
figure also creates two DO rules on service_request. The rule service_request_update causes an
INSERT into service_request_log each time that service_request is updated. The special keyword
old is used to insert the pre-UPDATE column values into service_request_log; the keyword new
would refer to the new query values. The second rule, service_request_delete, tracks deletions
to service_request by inserting into service_request_log. To distinguish updates from deletes in
service_request_log,updatesareinsertedwithamod_typeof’U’anddeleteswithamod_typeof’D’.
Infigure13.10,DEFAULTwasusedfortheusernameandtimestampfields. Acolumn’sdefault
value is used when an INSERT does not supply a value for the column. In this example, defaults
allowauto-assignmentofthesevaluesonINSERTtoservice_request,andonruleINSERTstoservice_-
request_log.
Figure13.11demonstratestheuseoftheserules. Arowisinserted,updated,anddeletedfrom
service_request. ASELECTonservice_request_logshowstheUPDATErulerecordedthepre-UPDATE
values, a U in mod_type, and the user, date, and time of the UPDATE. The DELETErule follows a
similarpattern.
150 CHAPTER13. TABLEMANAGEMENT
test=> CREATE TABLE service_request (
test-> customer_id INTEGER,
test-> description text,
test-> cre_user text DEFAULT CURRENT_USER,
test-> cre_timestamp timestamp DEFAULT CURRENT_TIMESTAMP);
CREATE
test=> CREATE TABLE service_request_log (
test-> customer_id INTEGER,
test-> description text,
test-> mod_type char(1),
test-> mod_user text DEFAULT CURRENT_USER,
test-> mod_timestamp timestamp DEFAULT CURRENT_TIMESTAMP);
CREATE
test=> CREATE RULE service_request_update AS -- UPDATE rule
test-> ON UPDATE TO service_request
test-> DO
test-> INSERT INTO service_request_log (customer_id, description, mod_type)
test-> VALUES (old.customer_id, old.description, ’U’);
CREATE 19670 1
test=> CREATE RULE service_request_delete AS -- DELETE rule
test-> ON DELETE TO service_request
test-> DO
test-> INSERT INTO service_request_log (customer_id, description, mod_type)
test-> VALUES (old.customer_id, old.description, ’D’);
CREATE 19671 1
Figure13.10: Rulestologtablechanges
13.6. RULES 151
test=> INSERT INTO service_request (customer_id, description)
test-> VALUES (72321, ’Fix printing press’);
INSERT 18808 1
test=> UPDATE service_request
test-> SET description = ’Fix large printing press’
test-> WHERE customer_id = 72321;
UPDATE 1
test=> DELETE FROM service_request
test-> WHERE customer_id = 72321;
DELETE 1
test=> SELECT *
test-> FROM service_request_log
test-> WHERE customer_id = 72321;
customer_id | description | mod_type | mod_user | mod_timestamp
-------------+--------------------------+----------+----------+------------------------
72321 | Fix printing press | U | williams | 2000-04-09 07:13:07-04
72321 | Fix large printing press | D | matheson | 2000-04-10 12:47:20-04
(2 rows)
Figure13.11: Useofrulestologtablechanges
AlthoughviewsignoreINSERT,UPDATE,andDELETE,rulescanbeusedtoproperlyhandlethem.
Figure 13.12 shows the creation of a table and a viewon the table. In the figure, INSERTs into a
viewareignored,asareUPDATEsandDELETEs.
Figure 13.13 shows the creationof DO INSTEADrulesto properlyhandleINSERT, UPDATE,and
DELETE. This procedure involves changing INSERT, UPDATE, and DELETE queries on the view
to queries on realtable. Notice that the INSERT rule uses new to reference the new value to be
inserted. In contrast, UPDATE and DELETE use old to reference old values. Figure 13.14 shows
howtheviewproperlyhandlesmodifications. Itwouldbewisetoaddanindexoncolbecausethe
rulesdolookupsonthatcolumn.
You canalso createSELECTrules. Infact, viewsareimplementedinternallyasSELECTrules.
Rulescanevenbeappliedtoonlycertainrows. Toremovethem,useDROPRULEcommand. See
theCREATE_RULEandDROP_RULEmanualpagesformoreinformation.
Creatingarulewhoseactionperformsthesamecommandonthesametablecausesaninfinite
loop. Thatis,POSTGRESQLwillcalltheruleagainandagainfromtheruleaction. Forexample,if
anUPDATEruleonruletesthasaruleactionthatalsoperformsanUPDATEonruletest,itwillcause
aninfiniteloop. POSTGRESQLwilldetecttheinfiniteloopandreturnanerror.
Fortunately,POSTGRESQLalsosupportstriggers. Triggersallowactionstobeperformedwhen
atableismodified. Inthisway,theycanperformactionsthatcannotbeimplementedusingrules.
SeeSection18.4forinformationontheuseoftriggers.
152 CHAPTER13. TABLEMANAGEMENT
test=> CREATE TABLE realtable (col INTEGER);
CREATE
test=> CREATE VIEW view_realtable AS SELECT * FROM realtable;
CREATE 407890 1
test=> INSERT INTO realtable VALUES (1);
INSERT 407891 1
test=> INSERT INTO view_realtable VALUES (2);
INSERT 407893 1
test=> SELECT * FROM realtable;
col
-----
1
(1 row)
test=> SELECT * FROM view_realtable;
col
-----
1
(1 row)
Figure13.12: Viewsignoretablemodifications
test=> CREATE RULE view_realtable_insert AS -- INSERT rule
test-> ON INSERT TO view_realtable
test-> DO INSTEAD
test-> INSERT INTO realtable
test-> VALUES (new.col);
CREATE 407894 1
test=>
test=> CREATE RULE view_realtable_update AS -- UPDATE rule
test-> ON UPDATE TO view_realtable
test-> DO INSTEAD
test-> UPDATE realtable
test-> SET col = new.col
test-> WHERE col = old.col;
CREATE 407901 1
test=>
test=> CREATE RULE view_realtable_delete AS -- DELETE rule
test-> ON DELETE TO view_realtable
test-> DO INSTEAD
test-> DELETE FROM realtable
test-> WHERE col = old.col;
CREATE 407902 1
Figure13.13: Rulestohandleviewmodifications
13.6. RULES 153
test=> INSERT INTO view_realtable VALUES (3);
INSERT 407895 1
test=> SELECT * FROM view_realtable;
col
-----
1
3
(2 rows)
test=> UPDATE view_realtable
test-> SET col = 4;
UPDATE 2
test=> SELECT * FROM view_realtable;
col
-----
4
4
(2 rows)
test=> DELETE FROM view_realtable;
DELETE 2
test=> SELECT * FROM view_realtable;
col
-----
(0 rows)
Figure13.14: Exampleofrulesthathandleviewmodifications
154 CHAPTER13. TABLEMANAGEMENT
13.7 LISTEN and NOTIFY
POSTGRESQLallowsuserstosendsignalstooneanotherusingLISTENandNOTIFY. Forexample,
suppose a user wants to receive notification when a table is updated. He can register the table
nameusingtheLISTENcommand. IfsomeoneupdatesthetableandthenissuesaNOTIFYcommand,
allregisteredlistenerswillbeinformedofthechange. Formoreinformation, seetheLISTENand
NOTIFYmanualpages.
13.8 Summary
Thischapterhascoveredfeaturesthatgiveadministratorsandusersnewcapabilitiesinmanaging
databasetables. Chapter 14 turnstorestrictionsthatcanbeplacedon tablecolumnsto improve
datamanagement.
Chapter 14
Constraints
Constraintskeepuserdataconstrained,therebyhelpingtopreventinvaliddatafrombeingentered
intothedatabase. Definingadatatypeforacolumnisaconstraintinitself. Forexample,acolumn
oftypeDATEconstrainsthecolumntovaliddates.
Thischaptercoversavarietyofconstraints. WehavealreadyshownDEFAULTcanbespecified
attablecreation. Constraintsaredefinedattablecreationinasimilarway.
14.1 NOT NULL
TheconstraintNOTNULLpreventsNULLvaluesfromappearinginacolumn. Figure14.1showsthe
creationofatablewithaNOTNULLconstraint. InsertionofaNULLvalue,oranINSERTthatwould
setcol2toNULL,causestheINSERTtofail. Asshowninthefigure,anUPDATEofaNULLvaluealso
fails.
Figure14.2addsaDEFAULTvalueforcol2. ThisadditionpermitsINSERTsthatdonotspecifya
valueforcol2.
14.2 UNIQUE