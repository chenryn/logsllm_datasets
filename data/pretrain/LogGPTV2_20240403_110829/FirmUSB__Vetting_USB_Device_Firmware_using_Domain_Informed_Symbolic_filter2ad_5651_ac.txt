This would allows us to rebase FirmUSB specific modifications more
easily when a new version of angr is released.
The angr project is made up of three major subprojects – a
binary file loader CLE Loads Everything (CLE), a symbolic execution
engine SimuVEX,6 and an architecture definition repository, arch-
info. angr composes these and many other code bases and provides
6Our version of angr (07bb8cbe) is before SimuVEX and the core were merged.
int add() {  unsigned char i, a = 0;  for(i = 0; i < 100; i++)    a += 1;  return a;}Source CodeCompiler7f 64 7e 000e 8f 05 ed14 ff 70 f8ff 8e 82 8f83 22Binary Firmware00 | ------ IMark(0x66, 1, 0) ------05 | t24 = Get(R6)06 | t23 = Add8(t24,0x01)07 | Put(R6) = t2308 | ------ IMark(0x67, 2, 0) ------12 | t28 = i8051g_memory(0x00000005,0x00)13 | STle(t28) = Get(R7)14 | ------ IMark(0x69, 1, 0) ------17 | t30 = Get(R5)18 | ------ IMark(0x6a, 1, 0) ------19 | t31 = Sub8(t30,0x01)20 | PUT(A) = t3121 | ------ IMark(0x6b, 1, 0) ------22 | Put(R7) = t3123 | PUT(ip) = 0x0000006c24 | ------ IMark(0x6c, 2, 0) ------25 | t34 = CmpNE8(t31,0x00)26 | if (t34) { PUT(ip) = 0x66; Ijk_Boring }NEXT: PUT(ip) = 0x0000006e; Ijk_BoringVEX IR of basic block 0x66Lifter0x66: inc  R60x67: mov  (0x5), R70x69: mov  A, R50x6a: dec  A0x6b: mov  R7, A0x6c: jnz  $-80x6e: mov  R7, A0x6f: mov  (0x82), R60x71: mov  (0x83), R70x73: ret0x62: mov  R7, #0x640x64: mov  R6, #0x008051 Assembly CFGDisassembly and CFG recoverydevice descriptor, configuration descriptors, and interface descrip-
tors to match a device driver. Besides simple VID/PID matching,
there are another nine matching rules 8 to find the corresponding
drivers. With the help of USBDB, we may anticipate the behavior
or functionality of the device firmware precisely, without having it
interact with the actual OS.
4.3 Semantic Analysis
In this section we explain our developed algorithms that employ a
combination of static analysis and symbolic execution to compute
and check reachability of candidate target instructions for the se-
mantic queries. Static analysis algorithms presented in this section
refer to elements from the LLVM IR. Due to space restrictions, we
omit their adaptation to the VEX IR.
Query Type 1: "The Claimed Identity?". A USB device commu-
nicates with the host by responding to requests. Among those
requests, GetDescriptor requests have a special role as it is when
the device tells the operating system about itself. Depending on the
type of the descriptor, the device would respond with specific infor-
mation such as general device characteristics and configurations.
For HID devices, for example, additionally a report descriptor would
be requested so that the host knows how to interpret data from the
HID device. What is common among these information exchanges
is that the device communicates with the host through its endpoint
0 (EP0), which corresponds to one of the ports of the device. So it
is reasonable to assume that the firmware would be copying the
device descriptor, the configuration descriptor, and functionality
specific information, such as the HID report descriptor, to the same
buffer.
Algorithm 1 leverages this fact to identify candidate instructions
that may be copying functionality specific information, e.g., HID
report descriptor. The first step is to identify constant parts in all
these descriptor types and scan the data segment of the binary for
potential memory locations that may hold these descriptors (lines
2 - 15). Then, it runs Algorithm 2, which is an under-approximate
points-to analysis for the LLVM IR, to propagate constant memory
accesses. store instructions that copy from candidate configuration
descriptors or candidate device descriptors are used to compute the
set of potential memory locations that correspond to EP0 buffer
(lines 17 - 25). Finally, instructions that copy data from candidate
HID report descriptor buffers to the candidate EP0 buffers are iden-
tified as the target instructions (lines 26-32) and are returned as
output along with the candidate EP0 addresses.
Algorithm 2 tracks data flow among memory locations by keep-
ing track of the address values stored in or indirectly accessed via
memory mapped registers. To achieve this, it associates a tuple
with the source and destination of instructions, when applicable,
and stores in a map M (line 4). The first component of the tuple
represents a potential address value and the second component
represents a tracked address value, which represents the memory
location from which the data originates from. At the initialization
stage, every instructions’ source and destination are mapped to
(⊥,⊥) pairs (line 4). Then the algorithm locates store instructions
that copy constant values to memory mapped registers and stores in
8All matching rules are listed in Listing 2 in the Appendix.
7
Instruction
L1: mov dptr,#X276c NA
L2: movc a,@dptr
L3: mov r4,a
L4: mov dptr,#Xf1dc NA
L5: movx @dptr,a
Source
(⊥,X276c)
(⊥,X276c)
(⊥,X276c)
Destination
(X276c,⊥)
(⊥,X276c)
(⊥,X276c)
(Xf1dc,⊥)
(⊥,Xf1dc)
Table 1: Value and tracked address propagation using Algo-
rithm 2 for a sample 8051 assembly code block.
a work list (lines 5-11). The items in the work list are processed one
at a time until the work list becomes empty. For each instruction, it
finds uses of the destination value of instruction i and propagates
the tuple M(i.dst) based on the type of the dependent instruction.
Case 1) getelementptr instruction (lines 27-29): Since this instruc-
tion is used to compute a pointer using an index value, the first
component of the tuple M(i.dst) becomes a tracked address and,
hence, copied to the second component in the generated tuple9.
The first component of the generated tuple is a ⊥ as we do not try
to keep track of values stored in locations other than the memory
mapped registers. Case 2) Other instructions10 (lines 19-26): The
tuple is copied as is because of the fact that the instructions store,
zext, and load preserve the value as well as the tracked address. For
store instructions, the use dependence may be due to the source
or the destination and therefore, we update the appropriate item
whereas for all other instruction types we only propagate tuples to
the destination. A dependent instruction ui is added to the work
list as long as it is not a store instruction with a destination that
is not a memory mapped register. It is important to note that this
is not a fix-point computation algorithm as an instruction is visited
at most twice (lines 15-18) and, hence, it is an under-approximate
points-to analysis.
To demonstrate the value propagation, consider the sample 8051
code block (avoiding the rather lengthy translation to LLVM IR)
given in Table 1: Data is moved from address X276c to address
Xf1dc at line L5. In instruction movx @dptr,a, the source is a regis-
ter, a. We are interested in neither a’s address nor its value. However,
what we are interested is the address that it received its value from.
Similarly, we are interested in the address that dptr is pointing to.
The indirect addressing happens at L2 and at L5, which cause the
values, X276c and Xf1dc, to become tracked addresses, respectively.
In the context of Algorithm 1, L2 may represent reading from a
configuration descriptor as in line 19 or a device descriptor as in line
22. If so, if the tracked destination address in line L5 is a constant
then it is added to the set of candidate endpoint 0 addresses as in
line 20 or line 23.
Query Type 2: "Consistent Behavior?". A USB device that claims
to have certain functionality is one thing, but whether it actually
carries out that function is another. Therefore, it is important to
check firmware for behavior that is consistent with the claimed
functionality. As an example, a USB device that is claiming to have
9Since in our lifting of 8051 to LLVM IR getelementptr instructions use 0 as the base
address, we do not need to perform any address computation and use the index value
as the intended address.
10To simplify the algorithm, we did not consider the arithmetic operations which can
also help propagate constant values.
type : U SBprotocol)
Algorithm 1 An algorithm for finding candidate instructions that
copies functionality/protocol specific information to the EP0 buffer.
1: FindDevSpecInfoToEP0(F : Firmware, isAReд: Memory Mapping of Registers,
2: candDD ← ∅
3: candCD ← ∅
4: cand FuncSpec ← ∅
5: for each memory location m ∈ F .Addr essSpace do
6:
7:
8:
9:
10:
11:
candDD ← candDD ∪ {m}
candCD ← candCD ∪ {m}
if ((type = H I D AND m[0] == 0X 05010906) OR (type =
if m[0] = 0X 1201 then
else if m[0] == 0X 0902 then
else
MASS_ST ORAGE AND ...) OR ... then
end if
end if
cand FuncSpec ← cand FuncSpec ∪ {m}
12:
13:
14:
15: end for
16: M ←PropConstMemAccesses(F, isAReд)
17: EP01, EP02 ← ∅
18: for each store instruction si ∈ F .Instructions do
19:
20:
21:
22:
23:
24:
25: end for
26: tarдet Insts, ep0 ← ∅
27: for each store instruction si ∈ F .Instructions do
28:
if M(si, src).second ∈ candCD and M(si .dst).second (cid:44) ⊥ then
end if
if M(si, src).second ∈ candDD and M(si .dst).second (cid:44) ⊥ then
end if
EP01 ← EP01 ∪ {M(si .dst).second }
EP02 ← EP02 ∪ {M(si .dst).second }
if M(si, src).second ∈ cand FuncSpec and M(si .dst).second ∈
tarдet Insts ← tarдet Insts ∪ {si }
ep0 ← ep0 ∪ {M(si .dst).second }
(EP01 ∩ EP02) then
29:
30:
31:
32: end for
33: return (tarдet Insts,ep0)
end if
HID functionality and sending keys that are not actually pressed
and then loaded in from a I/O port is not behaving consistently. To
detect such inconsistent behavior, we need to define what would
be consistent first. Obviously, this requires considering specific
functionality as, for example, what is consistent for HID may not
be consistent with a Mass Storage device.
Since we target BadUSB attacks, we focus on defining and check-
ing for consistent behavior of HID devices. An HID device is ex-
pected to send to the host whatever it receives from the user. If,
as in the case of BadUSB, it is injecting keys that have not been
pressed then it could mean it is either sending data that it reads
from a buffer stored in memory or sending some constant values.
How can we differentiate between such crafted buffers and those
that may hold user-provided data? The key here is the interrupt
mechanism. When a user presses a key, an interrupt is generated
and the firmware handles the interrupt to store the specific key(s)
pressed. Memory locations that are read inside the interrupts are
the source of data provided by the external environment. By mark-
ing these addresses as symbolic, we distinguish addresses that are
filled by the environment (as opposed to appearing statically in the
binary image) and those that are not.
Finding Symbolic Locations. Algorithm 3 identifies memory loca-
tions that need to be represented symbolically. Since such locations
are processed in interrupt functions, the algorithm symbolically
end if
if isAConstant(si .src) and IsAReд(si .dst) then
Algorithm 2 Algorithm for propagating constant memory ad-
dresses.
1: PropConstMemAccesses(F : Firmware, isAReд: Memory Mapping of Registers)
2: Let isAReд : F .Addr essSpace → {true, f alse }
3: Output: M : F .Instructions × {src, dst } (cid:55)→ N ∪ {⊥} × N ∪ {⊥}
4: M ← λi, j .(⊥, ⊥)
5: worklist ← ∅
6: for each store instr. si in F .Instructions do
7:
8:
9:
10:
11: end for
12: while worklist not empty do
i ← worklist .r emove()
13:
for each intra-procedural use ui of i do
14:
15:
16:
17:
worklist ← worklist ∪ {si }
M ← M[(si .dst) (cid:55)→ (V alue(si .src), ⊥)]
srcdef ← M(ui, src).f irst (cid:44) ⊥or M(ui, src).second (cid:44) ⊥
dstdef ← M(ui, dst).f irst (cid:44) ⊥or M(ui, src).second (cid:44) ⊥
if (isAStor e(ui) and srcdef and dstdef ) or (!isAStor e(ui) and
end if
if isALoad(ui) or isZ ext(ui) then
M ← M[(ui, dst) (cid:55)→ M(i, dst)]
else if isAStor e(ui) then
if i .dst defines ui .dst then
else// i .dst defines ui .src
end if
M ← M[(ui, dst) (cid:55)→ (⊥, M(i, dst).f irst)]
M ← M[(ui, dst) (cid:55)→ M(i, dst)]
M ← M[(ui, src) (cid:55)→ M(i, dst)]
srcdef or dstdef ) then continue
else if isGet Element Ptr(ui) then
end if
if !isAStor e(ui) or isAReд(ui .dst) then
end if
worklist ← worklist ∪ {ui }
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
end for
33:
34: end while
Algorithm 3 An algorithm for finding memory locations that
should be represented symbolically.
1: FindSymbolicLocations(F : F irmwar e, τ : Maxiter ations)
2: Output: P(MemoryLoc)
3: W Set : ExecutionState → P(MemoryLoc)
4: symbolicLocs : P(MemoryLoc)
5: function checkLoads(i:Instr, s: Execution State)
6:
if isALoad(i) and i ∈ f .Instructions and i .src (cid:60) W Set(s) ∪
if isAStor e(i) and i ∈ f .Instructions and i .dst (cid:60) W Set(s) then
end if
W Set ← W Set[s (cid:55)→ W Set(s) ∪ {i .dst }]
symbolicLocs then
end if
symbolicLocs ← symbolicLocs ∪ {i .src }
terminate symbolic execution
7:
8:
9:
10: end function
11: function recordStores(i:Instr, s: Execution State)
12:
13:
14:
15: end function
16: symbolicLocs ← ∅
17: for each interrupt function f do
18:
19:
20:
21:
for i: 1 to τ do
W Set ← λx .∅
register checkLoads and recordStores as listeners for symbolic execution
run symbolic execution on F with f as the only interrupt function and
with symbolicLocs
end for
22:
23: end for
24: return symbolicLocs
executes the firmware for a single interrupt function at a time.11 As
11Nested interrupts are currently unsupported but otherwise the 8051 IE register is
respected when it comes to interrupt scheduling.
8
paths and the corresponding execution states get generated, loca-