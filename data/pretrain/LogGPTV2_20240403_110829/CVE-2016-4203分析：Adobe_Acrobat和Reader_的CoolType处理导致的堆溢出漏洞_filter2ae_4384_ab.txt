    2952cf90  18 fd 7d c4 c4 18 10 7d-d4 18 ed 5d 71 00 3f 2f  ..}....}...]q.?/
    2952cfa0  10 d6 ed 31 30 01 22 26-35 34 36 33 32 1f 00 ed  ...10."&54632...
    2952cfb0  02 03 14 16 00 ed 06 23-22 26 35 34 26 35 34 12  .......#"&54&54.
    2952cfc0  35 34 36 33 32 1f 00 ed-02 01 4a 30 46 46 30 30  54632.....J0FF00
    2952cfd0  45 45 03 07 36 2c 2b 37-07 14 37 2b 2b 37 14 04  EE..6,+7..7++7..
    2952cfe0  f2 44 30 30 44 44 30 30-44 fc d4 3c ef 3c 2c 38  .D00DD00D.. g
    (8de0.6bc4): C++ EH exception - code e06d7363 (first chance)
    hit:
    eax=097ef6e0 ebx=097ef6d0 ecx=097eeda0 edx=2911e6fc esi=097ef758 edi=097ef756
    eip=09598dac esp=2911e610 ebp=2911e674 iopl=0         nv up ei pl zr na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    CoolType!CTInit+0x44a61:
    09598dac e8f1110000      call    CoolType!CTInit+0x45c57 (09599fa2)
    0:022> dds esp
    2911e610  097eee00 CoolType!CTGetVersion+0x1dd1c8    -->param1
    2911e614  097ef510 CoolType!CTGetVersion+0x1dd8d8    -->param2
    2911e618  097ef3bc CoolType!CTGetVersion+0x1dd784    -->param3
    2911e61c  097ef6e0 CoolType!CTGetVersion+0x1ddaa8    -->param4
    2911e620  17e9cd98                                                                  -->param5
    2911e624  00000001                                                                -->param6
    2911e628  00000002                                                                  -->param7
    2911e62c  097eee58 CoolType!CTGetVersion+0x1dd220
    2911e630  097eee60 CoolType!CTGetVersion+0x1dd228
    2911e634  097ef756 CoolType!CTGetVersion+0x1ddb1e
    2911e638  097ef758 CoolType!CTGetVersion+0x1ddb20
    2911e63c  2911e6c4
    2911e640  2911e6c8
    2911e644  097ef6d0 CoolType!CTGetVersion+0x1dda98
    2911e648  17e9cdc4
    2911e64c  17e9cf84
    2911e650  00000015
    …
    0:022> dd 097ef6e0 L4
    097ef6e0  2952cf40 2952cf4a 2952d000 00000000
    0:022> db 2952cf40  lc0
    2952cf40  00 02 00 b3 ff fb 01 bf-05 da 00 0b 00 23 00 55  .............#.U
    2952cf50  40 36 06 38 00 1e 12 1e-06 20 25 30 25 50 25 c0  @6.8..... %0%P%.
    2952cf60  25 04 80 25 90 25 a0 25-03 09 38 03 18 15 1b 18  %..%.%.%..8.....
    2952cf70  38 0f 21 1f 25 2f 25 3f-25 7f 25 04 1f 0c bf 0c  8.!.%/%?%.%.....
    2952cf80  02 50 0c 7f 0c 02 0c 25-10 d6 5d 71 5d 7d c4 c4  .P.....%..]q]}..
    2952cf90  18 fd 7d c4 c4 18 10 7d-d4 18 ed 5d 71 00 3f 2f  ..}....}...]q.?/
    2952cfa0  10 d6 ed 31 30 01 22 26-35 34 36 33 32 1f 00 ed  ...10."&54632...
    2952cfb0  02 03 14 16 00 ed 06 23-22 26 35 34 26 35 34 12  .......#"&54&54.
    2952cfc0  35 34 36 33 32 1f 00 ed-02 01 4a 30 46 46 30 30  54632.....J0FF00
    2952cfd0  45 45 03 07 36 2c 2b 37-07 14 37 2b 2b 37 14 04  EE..6,+7..7++7..
    2952cfe0  f2 44 30 30 44 44 30 30-44 fc d4 3c ef 3c 2c 38  .D00DD00D.. !heap -p -a 2952cf40 
        address 2952cf40 found in
        _DPH_HEAP_ROOT @ 3d01000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                                           293c3924:         2952cf40               c0 -         2952c000             2000
        6a749abc verifier!AVrfDebugPageHeapAllocate+0x0000023c
        7749d836 ntdll!RtlDebugAllocateHeap+0x0000003c
        773ffb40 ntdll!RtlpAllocateHeap+0x000000f0
        773fdecb ntdll!RtlpAllocateHeapInternal+0x0000027b
        773fdc2e ntdll!RtlAllocateHeap+0x0000002e
        6854ed63 MSVCR120!malloc+0x00000049 [f:ddvctoolscrtcrtw32heapmalloc.c @ 92]
        095550fc CoolType!CTInit+0x00000db1
        095589db CoolType!CTInit+0x00004690
        ...
从上面的输出中可以看到,堆缓冲区的地址0x2952cf40处存储了大小为0xc0的简单字形。这与glyph_poc.dat中的数据相匹配。地址0x2952cf4a指向endPtsOfContours[2]，而地址0x2952d000指向简单字形的结尾。
以下是简单字形的一些字段的值：
    endPtsOfContours [0]:   00 0b  
    endPtsOfContours [1]:  00 23
    instructionLength: 00 55 
    instructions[n]:   40 36 06 38 00 1e 12 1e-06 20 25 30 25 50 25 c0 
                                  25 04 80 25 90 25 a0 25-03 09 38 03 18 15 1b 18
                                  38 0f 21 1f 25 2f 25 3f-25 7f 25 04 1f 0c bf 0c
                                 02 50 0c 7f 0c 02 0c 25-10 d6 5d 71 5d 7d c4 c4 
                                18 fd 7d c4 c4 18 10 7d-d4 18 ed 5d 71 00 3f 2f 
                                10 d6 ed 31 30
    Flags[]: ……
    xCoordinates[ ]: …….
    yCoordinates[ ]: …….
我们继续跟踪简单字形中的“Flags”字段是如何处理的。在IDA
Pro中,下面是处理“Flags”字段的代码分支。它的长度是0x24(endPtsOfContours[1]+ 1 = 0x23 + 0x1 = 0
x24)。  
图7.处理“Flags”字段的分支
在Windbg中,我们得到以下调试信息:
    0:022> bu 0959a132
    0:022> g
    Breakpoint 1 hit
    eax=0000004d ebx=097eee00 ecx=00000000 edx=00000024 esi=2952cfa5 edi=00000000
    eip=0959a132 esp=2911e5f8 ebp=2911e608 iopl=0         nv up ei ng nz ac pe cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000297
    CoolType!CTInit+0x45de7:
    0959a132 8bca            mov     ecx,edx
    0:022> db esi
    2952cfa5  01 22 26 35 34 36 33 32-1f 00 ed 02 03 14 16 00  ."&54632........
    2952cfb5  ed 06 23 22 26 35 34 26-35 34 12 35 34 36 33 32  ..#"&54&54.54632
    2952cfc5  1f 00 ed 02 01 4a 30 46-46 30 30 45 45 03 07 36  .....J0FF00EE..6
    2952cfd5  2c 2b 37 07 14 37 2b 2b-37 14 04 f2 44 30 30 44  ,+7..7++7...D00D
    2952cfe5  44 30 30 44 fc d4 3c ef-3c 2c 38 38 2c 3c ef 3c  D00D.. db ebx