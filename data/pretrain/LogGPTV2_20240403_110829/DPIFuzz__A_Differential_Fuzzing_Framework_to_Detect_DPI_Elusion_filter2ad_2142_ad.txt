QUICLY
NEQO
Error Description
Null Pointer Dereference
Heap use after free
Null Pointer Dereference
Assertion Failed
Table 5: Summary of IUT Crashes
that implementations might handle receiving data at overlap-
ping offsets in different ways. We consider the second entry
of Table 1 for this section. An analysis of the packets sent to
three servers (QUICHE, QUICLY and MVFST), as shown in
Table 2, reveals the reason for diverging data reassembly.
Looking at Packets 3, 7 and 8, we can see that when the
QUICHE server receives a payload at an offset that it has
already received data for, it simply ignores the new data. The
QUICLY server on the other hand replaces the payload with
the new payload. The analysis of the MVFST implementa-
tion is more involved than these cases. Packet 3 contains the
first stream frame with data overlapping with the already
reassembled data. Here, the MVFST server replaces the ex-
isting data with the new data that it receives. Packet 7 is the
next packet that carries overlapping data. In this case, how-
ever, the MVFST implementation does not replace the data.
Further analysis reveals that MVFST does not replace the
existing data if the starting offset of the payload in a stream
frame already has existing data. Any unoccupied positions
that lie within the range of this new frame payload will be
filled with characters from the new payload for those loca-
tions. However, if the starting offset of the frame payload is
not already occupied, the contents of this frame will replace
all the existing characters that it overlaps with.
According to Draft 27 of IETF QUIC protocol, data at a given
offset must not change if it is sent multiple times and an end-
point MAY treat receipt of different data at the same offset
within a stream as a connection error [6]. The behaviour of
QUICHE seems to be consistent with the specification as it
does not change the data at an offset once received. QUICLY
seems to completely ignore the case of repeating offsets and
the MVFST implementation seems to be partially consistent
with the specification but does not consider all possible cases
of overlapping offsets.
We can generalize this fuzzing sequence to elude the DPI
system in missing any blocked keyword(s). Let’s assume that
the text "BLOCKED" is supposed to be denylisted by the DPI
system. We demonstrate two DPI elusion cases:
– If QUICLY is used for DPI and QUICHE used for receiving
data, Table 3 depicts the packets we send and the data
reassembled by them which consequently allows eluding
the DPI system.
– Similarly, if QUICLY is used for DPI and MVFST used for
receiving data, Table 4 depicts the packets we send and
the data reassembled by them which consequently allows
eluding the DPI system.
5.3.2 QUIC Implementation Bugs and Vulnerabilites:
In addition to strategies that lead to different data being reassem-
bled by semantically equivalent QUIC implementation servers, our
fuzzer revealed several security-critical vulnerabilities in the tested
QUIC implementations. In this section, we discuss the results in
which a sequence of packets lead to a crash on one implementation
but not on another.
We detect the errors by observing the status code values in the
trace generated for each execution of the fuzzer. These errors can
be trivially leveraged in order to evade a DPI system using the
buggy QUIC implementation. If a server crashes, the execution at
the client will timeout at the client and the fuzzer will assign the
value “ServerTimeOut” to the status code.
These sequences of packets could effectively be used to flush
the buffers storing the reassembled data in the DPI system mid
way through data transfer, thereby allowing blocked content to
go undetected. On top of this, and possibly more important, these
340ACSAC 2020, December 7–11, 2020, Austin, USA
Reen and Rossow
application crashes illustrate that our fuzzing framework can also
be readily applied to finding security vulnerabilities in QUIC im-
plementations. In the following, supported by Table 5, we describe
the bugs that our fuzzer revealed in detail.
• QUANT: The QUANT server runs into a heap use after free
error4. Using address sanitizer [24] reveals that the imple-
mentation tries to access the state of a stream, i.e., check
whether a stream is closed or not by calling "q_is_stream_closed
()" after the memory allocated to the stream has already been
freed.
• NEQO: The NEQO server runs into an Assertion failed error5.
A Connection is already in the "Closed" state and the NEQO
server calls close () function on this connection to try close
it again.
• QUICLY: The QUICLY server runs into a Segmentation Fault6.
The reason for the Segmentation Fault is a null pointer deref-
erence [3]. When the server receives a stream frame from
a client with a stream id not permitted by the QUIC specifi-
cation, the "QUICLY_get_ingress_max_streams ()" function
tries to access the value stored in a NULL pointer causing
the server to run into a segmentation fault.
• MVFST: The MVFST server tries to dereference a null pointer.
This causes the server to run into a Segmentation Fault7 and
crash. When we send a stream frame to the server such that
the Offset field has a non-zero value but value of the OFF bit
is set to 0 (which indicates that the Offset field is absent), the
FIN bit is set to true and the Payload field empty, the MVFST
implementation is unable to handle such a packet and runs
into a Segmentation fault.
Coordinated Disclosure: We disclosed these security-critical
vulnerabilities to the developers of the implementations and pro-
vided them with as much information as possible to assist them in
fixing the root causes for these problems.
6 DISCUSSION
Man-in-the-middle interception techniques are widely used in en-
terprise controlled [27, 39] networks. With the development of an
encrypted by default protocol like QUIC which has less informa-
tion visible to the network than TCP [4], interception techniques
will become even more important for monitoring purposes. These
are the situations where a framework like DPIFuzz can be used to
identify the potential limitations of the DPI system. Leveraging our
results, we can conclude that:
• Programmers implementing a protocol specification often
fail to account for all the possible types of inputs that an
implementation might encounter [32].
• Programmers often fail to handle properly all the possible
state transitions that the state machine of an implementation
might encounter.
• All protocol specifications have some degree of ambiguity
and have parts that are deliberately left unspecified and the
programmers are free to handle these cases as they see fit.
4https://github.com/NTAP/quant/issues/61
5https://github.com/mozilla/neqo/issues/571
6https://github.com/h2o/quicly/issues/347
7https://github.com/facebookincubator/mvfst/issues/135
These are potential points of divergence in the behaviours
of the implementations.
Implications of DPIFuzz for DPI systems: Our main finding
is that DPI systems that parse and reassemble QUIC packets in
a different manner than the actual recipient are prone to elusion
and differential fuzzing is an effective technique to uncover elusion
strategies for such systems. As of writing this paper, we are not
aware of any actual DPI systems for QUIC. Designing performant
DPI systems for QUIC will be a challenge owing to the fact that
QUIC uses TLS 1.3 for providing security. TLS 1.3 makes selective
MITM proxy interventions for DPI harder because of the encrypted
Server Hello messages (which contain the server certificates used
to verfiy server identity). Additionally, the ability of end points
to change connection IDs as well as migrate connections would
make monitoring of connections more challenging for DPI systems.
Having said this, given the expected rapid deployment of QUIC,
DPI systems will have to be developed for QUIC based traffic in the
near future. To test the validity and effectiveness of our approach,
we used open source QUIC implementations as a DPI system. Given
that actual DPI systems are usually limited in functionality and
resources, our findings likely just represent the lower bound of elu-
sion sequences that DPIFuzz will be able to find for any upcoming
full-fledged QUIC DPI system.
Limitations and Future Work: DPIFuzz uses a smart logic-
based fuzzer. However, as it is not coverage guided, it does not
attempt to maximize the code coverage of the implementations
being tested and different sequences of fuzzed packets likely repeat-
edly end up testing the same code parts. Also, we currently do not
track how much of the implementation code we cover owing to
the variance in the languages used to code the implementations.
Extending the functionality of the fuzzer to make it coverage con-
scious would definitely improve the efficiency and effectiveness of
DPIFuzz.
Additionally, while analysing the results we encountered se-
quences which registered crashes according to their trace files.
However, when replaying these sequences individually to the IUTs
for analysis, we noticed that not all crashes were reproducible. The
reason for this is that since DPIFuzz executes multiple fuzzer in-
stances in parallel, if an IUT has multiple active connections and
one of them causes it to crash, the remaining open connections
also register a crash. Also, once an IUT crashes, there is a certain
amount of delay before it is automatically restarted. If our fuzzer
sends a sequence to the IUT within this delay window, it registers
a “TLSHandshakeFail” value for the status code even though the
handshake does not fail when the sequence is replayed to the IUT.
This can be avoided by replaying the according candidates in a non-
parallel version of DPIFuzz, at the cost of a temporal performance
slowdown.
7 RELATED WORK
Fuzzing: Most related fuzzing works so far have focused on dis-
covering software vulnerabilities, which is not our prime focus.
Instead, we aim to discover ambiguities in network protocol im-
plementations. We are aware of just a few related works that have
designed fuzzers for secure network protocols, as described next.
341DPIFuzz: A Differential Fuzzing Framework to Detect DPI Elusion Strategies for QUIC
ACSAC 2020, December 7–11, 2020, Austin, USA
In 2012, Tsankov et al. [32] designed a fuzzer for the IKE (Inter-
net Key Exchange) protocol. They used fuzz operators to fuzz the
payloads, messages and fields in the IKE protocol. The design of
their fuzzer differs significantly from ours, though, as their fuzzer
is not a client in itself but instead sits between the client and the
server. Additionally, they do not use the Sequence level mutators
and do not allow embedding logic into their fuzzer.
A fuzzing-based differential black-box testing approach was used
by Walz and Sikora [14] in 2015 to test the handshake phase of TLS
implementations. The fact that they only fuzz the initial ClientHello
message which is not encrypted makes their approach significantly
different and less detailed than our fuzzing methodology.
A concurrent work by Pham et al. [40] uses a mutational approach
coupled with server state feedback to create a coverage-guided,
greybox fuzzer for protocol implementations. Instead of generating
packets, they replay variations of previously captured packets and
use the server response codes to identify the states exercised by a
message sequence. They explore FTP and RTSP implementations
using their work. However, they do not demonstrate the applicabil-
ity of their work to protocols like QUIC where previously captured
traffic cannot be directly used to establish a connection with, or
test, a server. Additionally, the server state machine-learning algo-
rithm used relies on server response codes and does not work for
implementations that do not generate response codes.
Deep Packet Inspection Elusion: All the way back in 1998,
Ptacek et al. [33] proposed the idea of insertion and evasion attacks
on Network Intrusion Detection Systems (NIDS) and highlighted
several implementation level differences in TCP and IP Protocols.
In 2013, Khattak et al. [35] used the same approach to uncover
several vulnerabilities in GFW.
We do levearage similar principles of insertion and evasion packets
but, we (i) are the first to explore them for the QUIC protocol, and
(ii) find such packets in an automated way.
A genetic algorithm based automated approach to detect packet
manipulation based evasion strategies was used by Bock et al. [23]
in 2019. They used genetic algorithms to generate packet manip-
ulation strategies based on basic packet manipulation primitives
(drop, tamper headers, duplicate and fragment), and then apply
these strategies to user input. This is in contrast to our work where
our fuzzer actually generates input sequences (instead of strategies)
and mutates those in a randomised manner. The primary aim of
their work was to automate "censorship evasion" which differs sig-
nificantly from the purpose of our work of allowing DPI users to
test the robustness of ther DPI systems by uncovering DPI elusion
strategies that attackers might leverage to get restricted or mali-
cious content in and out of protected networks.
Another approach to detect automated DPI evasion strategies was
developed by Wang et al. [41] in 2020. They used Selective Symbolic
Execution to explore TCP implementations and discover insertion
and evasion packets which could effectively "de-synchronise" the
state machines of the DPI middlebox and the implementation be-
ing tested. Their approach, however, is limited by path explosion
(even though they use just three symbolic packets) and they make
pruning decisions based on their domain knowledge to tackle path
explosion. For a protocol like QUIC which has a large variety of
frames and packets, the number of symbolic packets needed to
explore an implementation would be much more as compared to
TCP and consequently, the path explosion much worse.
These approaches by Wang et al. [41] and Bock et al. [23] detect elu-
sion strategies in an automated way, but they do not demonstrate
applicability to the QUIC protocol. To the best of our knowledge,
we are the first (i) to use the concept of Differential Fuzzing to auto-
mate detection of DPI elusion strategies, (ii) to explore DPI elusion
strategies for the QUIC protocol, and (iii) to design a modular and
structure-aware fuzzer for QUIC.
8 CONCLUSION
In this paper, we have presented a differential fuzzing framework
which allows detecting DPI elusion strategies for the QUIC protocol,
when being inspected by an stateful DPI system, in an automated
way. We test the framework against multiple open source implemen-
tations of the QUIC protocol and demonstrate techniques which
can allow DPI elusion, thereby proving the effectiveness of our
approach. DPIFuzz would enable organisations to test their QUIC
traffic monitoring systems and uncover possible elusion strategies
that attackers might use. As a consequence, it will help improve
the security of enterprise networks.
9 AVAILABILITY
The code for our differential fuzzer is open source8 and can be freely
used and extended by (i) organisations to test the robustness of
their DPI implementations, and (ii) DPI users to identify potential
shortcomings in their methodology.
REFERENCES
[1] 2015. A collection of vulnerabilities discovered by the AFL fuzzer (afl-fuzz). https:
//github.com/mrash/afl-cve
[2] 2017. Fuzzing Basics. Retrieved May 11, 2020 from https://docs.microsoft.com/en-
us/security-risk-detection/concepts/fuzzing-basics
[3] 2019. CWE VIEW: Weaknesses in the 2019 CWE Top 25 Most Dangerous Software
Errors. Retrieved May 19, 2020 from https://cwe.mitre.org/data/definitions/1200.
html
[4] 2019. Manageability of the QUIC Transport Protocol. Retrieved May 22, 2020 from
https://quicwg.org/ops-drafts/draft-ietf-quic-manageability.html
[5] 2020. Hongfuzz Found Bugs. Retrieved May 7, 2020 from https://github.com/
google/honggfuzz#trophies
[6] 2020. Overlapping Offsets. Retrieved June 06, 2020 from https://quicwg.org/base-
drafts/draft-ietf-quic-transport#section-2.2-4
[7] 2020. QUIC, a multiplexed stream transport over UDP. Retrieved May 11, 2020
from https://www.chromium.org/quic
[8] 2020. QUIC: A UDP-Based Multiplexed and Secure Transport. Retrieved May 11,
2020 from https://quicwg.org/base-drafts/draft-ietf-quic-transport
[9] 2020. QUIC: Packets and Frames. Retrieved June 06, 2020 from https://quicwg.
org/base-drafts/draft-ietf-quic-transport#name-packets-and-frames
[10] 2020. Syzkaller Found Bugs. Retrieved May 7, 2020 from https://github.com/
google/syzkaller/blob/master/docs/linux/found_bugs.md
[11] 2020. Using TLS to Secure QUIC. Retrieved May 11, 2020 from https://datatracker.
ietf.org/doc/draft-ietf-quic-tls/
[12] Alyssa Wilk et al. Adam Langley, Alistair Riddoch. 2017. The QUIC Transport
Protocol: Design and Internet-Scale Deployment. In SIGCOMM ’17: Proceedings
of the Conference of the ACM Special Interest Group on Data Communication.
https://dl.acm.org/doi/10.1145/3098822.3098842
[13] Nour-Eddine Lakhdari Mourad Debbabi Amine Boukhtouta, Serguei A. Mokhov
and Joey Paquet. May 2016. Network malware classification comparison using
DPI and flow packet headers. In Journal of Computer Virology and Hacking
Techniques, vol. 12, no. 2. Springer, 69–100. https://link.springer.com/article/10.
1007%2Fs11416-015-0247-x
8https://github.com/piano-man/DPIFuzz
342ACSAC 2020, December 7–11, 2020, Austin, USA
Reen and Rossow
[14] Axel Sikora Andreas Walz. March-April 1, 2020. Exploiting Dissent: Towards
Fuzzing-based Differential Black-Box Testing of TLS Implementations. In IEEE
Transactions on Dependable and Secure Computing. IEEE.
[15] Cloudflare. 2018. Quiche: Savoury implementation of the QUIC transport protocol
and HTTP/3. https://github.com/cloudflare/quiche
[16] Facebook. 2018. MVFST: A client and server implementation of IETF QUIC protocol
in C++ by Facebook. https://github.com/facebookincubator/mvfst
[17] Arash Molavi Kakhki Arian Akhavan Niaki David Choffnes Phillipa Gill Alan Mis-