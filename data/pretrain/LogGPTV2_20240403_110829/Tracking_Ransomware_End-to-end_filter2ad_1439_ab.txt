CryptXXX
CryptoDefense
CryptoLocker
CryptoWall
Dharma
Locky
Spora
WannaCry
Cluster ID
1
1
1
1
2
1
2
1
2
3
4
5
6
1
2
1
1
2
1
2
3
4
Tmin
Tmax Naddr Nseed
2016-02-25
2012-11-03
2016-05-11
2014-03-18
2014-02-28
2013-09-07
2016-03-07
2015-11-24
2014-05-06
2015-01-14
2015-11-03
2014-04-29
2014-05-25
2016-05-13
2017-01-23
2016-01-14
2017-01-05
2017-01-18
2017-05-12
2017-03-31
2017-05-12
2017-05-12
2017-08-31
2017-07-10
2016-10-06
2014-08-15
2014-08-15
2017-07-10
2016-10-06
2016-03-08
2014-09-13
2015-04-30
2015-12-04
2014-10-09
2014-08-05
2017-06-29
2017-02-20
2017-06-02
2017-08-26
2017-03-01
2017-07-24
2017-07-03
2017-06-20
2017-08-09
8,526
1,404
1,742
1
1
968
3,489
216
10
101
42
7
1
274
4
7,093
2,126
24
1
3
1
1
32S
1R
4R
1R∗
1R∗
1R
1R
1R
2R
1R
1R
1R
1R
1R
1R
1R 28S
1R
1R
1R∗
2R∗
1R∗
1R∗
case, if we had only made any one of the 32 micropayments to
Cerber, we would also have arrived at the same Cerber cluster.
As the ransom address and the corresponding aggregation
address are never co-spent for each of the 32 micropayments,
we cannot use the co-spending heuristic to cluster both types
addresses. However, for each of our synthetic victims, the
ransom address and the aggregation address were used exclu-
sively to receive and send ransom payments. It is reasonable
to assume that the ransomware operator is in control of both
addresses. As such, we decide to expand the original cluster to
also include the ransom addresses. We show an illustration of
Cerber’s transaction graph in Figure 1(ii), where aggregation
Addresses 8 and 9 are clustered with Addresses 10 and 11
(i.e., original cluster). Since Addresses 5 and 6 appear to be
exclusively used as an intermediary to receive and send ransom
payments to the aggregation addresses, they are potentially
under Cerber’s control. As a result, we expand the cluster to
include both addresses. In the rest of the paper, we always use
Cerber’s expanded cluster for analysis.
C. Clusters Identiﬁed
Using the seed ransom addresses that we obtained earlier,
we construct clusters of wallet addresses for the 8 families
in Section III-A and the 2 families in Section III-B. We
present the result in Table I, where each row corresponds
to a single cluster that we construct from one or multiple
seed ransom addresses. We show the ﬁrst date a cluster ﬁrst
received bitcoins as Tmin and the last date as Tmax, according
to our observation on August 31, 2017. The number of seed
ransom addresses is shown in the Nseed column; “R” denotes
addresses from real victims, and “S” denotes synthetic victims.
For example, Cluster 1 of Locky is constructed from one
ransom address from a real victim and 28 ransom addresses
from synthetic victims. By contrast, the two seed ransom
addresses from CryptoLocker victims each belong to Clusters
Fig. 1: A schematic illustration for transactions involving the
Locky and Cerber clusters.
In order to observe co-spending, we develop a novel method
— making 0.001 bitcoins worth of micropayments to the ran-
som addresses of synthetic victims and observe the subsequent
ﬂow of the bitcoins. We make micropayments only to seed
addresses of Locky and Cerber, because at the time we started
the analysis, we were unaware of any real victims of either
ransomware families.
Locky: We generated 28 synthetic victims. We made a
to each of the 28 seed ransom addresses.5
micropayment
What appears to be the ransomware operator later co-spent
the ransom addresses with other wallet addresses, presumably
in an attempt to aggregate ransom payments. All these 28
ransom addresses lead to the construction of a single Locky
cluster with 7,093 addresses. In fact, if we had only made
one of the 28 micropayments, we would have discovered the
same cluster. In addition to the synthetic victims, we also
discover a ransom address that belongs to a real Locky victim
who paid 0.5 bitcoins of ransom, according to data we obtain
from proprietary sources. This ransom address belongs to the
same Locky cluster above, which validates our micropayment
approach. We show an illustration of Locky’s transaction graph
in Figure 1(i), where we discover Addresses 3 and 4 in
Locky’s cluster by making micropayments to Addresses 1 and
2.
Cerber: We generated 32 synthetic victims. Again, we made
a micropayment to each of the 32 ransom addresses. In each
case, after the ransom address received our micropayment,
what appears to be the ransomware operator moved our micro-
payment from the ransom address into a unique aggregation
address. The ransom address was subsequently not used in
any transactions. Also, it is never co-spent with any other
wallet addresses. The aggregation address is used in exactly
two transactions: (i) ﬁrst receiving the micropayment from the
ransom address, and (ii) sending the micropayment somewhere
else by co-spending with other addresses, presumably to
aggregate the ransom payments collected. We cluster the ag-
gregation address to form Cerber’s cluster. Similar to Locky’s
5The timings of our micropayments, both for Locky and Cerber, do not
follow any ﬁxed schedule.
621
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:14 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: Ransomware binaries in VirusTotal.
Family
Cerber
CryptoLocker
CryptoDefense
WannaCry
Locky
Cryptowall
CryptXXX
Spora
CoinVault
Dharma
Total
Seed
77,131
46,645
6,682
9,230
6,115
51
802
1,154
22
5
147,837
Expansion
119,508
4,581
17,247
0
9
4,344
81
587
0
0
146,357
Total
196,639
51,226
23,929
9,230
6,124
4,395
883
1,741
22
5
294,194
1 and 2 respectively. We manually merge both clusters and
construct a single CryptoLocker cluster for later analysis.
The size of each cluster, in terms of the number of con-
stituent addresses is shown in the Naddr column. For some
families, such as Locky and Cerber (where we know each
victim is assigned a unique ransom address), a small number of
seed ransom addresses leads to the construction of clusters of
thousands of addresses. For other families, each seed ransom
address belongs to a cluster of size one. Examples include
WannaCry and CryptoDefense, in which the same ransom
addresses are known to be reused across victims and never co-
spent with any other addresses. These reused ransom addresses
are annotated with asterisks (*) in the table. As expected,
families that generate individual addresses for each victim,
such as Locky and Cerber, result
in a larger number of
additional addresses being discovered by our clustering than
families that reused ransom addresses.
D. Limitations of Micropayments and Co-spending Heuristics
Not all micropayments resulted in subsequent bitcoin move-
ments. For the Sage ransomware (which is not included in
this study), we discovered two ransom addresses that real
victims reported, but to which they did not make ransom
payments. Similar to the case with synthetic victim, unpaid
ransom addresses, even from real victims, cannot help us
ﬁnd the ransomware’s cluster, because they have not been
co-spent yet. To this end, we made micropayments to both
of the Sage ransom addresses. However, the bitcoins have
since remained in the addresses without being transferred to
other wallet addresses. As a result, we are unable to ﬁnd
Sage’s cluster. In general, ransomware operators may ignore
micropayments, especially when the payment amount is below
some minimum threshold. In addition, micropayments may
even cause suspicion to the operators, although in our case
Cerber and Locky continued to process our micropayments (as
well as potential victim payments) throughout our analysis.
Furthermore, regardless of whether real victims made pay-
ments or we made micropayments, our clustering technique
only discovers addresses that co-spent with the seed ransom
addresses. It is possible that a ransomware operator may decide
to switch to a completely different wallet cluster after our
known victims, whether real or synthetic, have paid. Our
technique will thus miss the new cluster. Additionally, it is
also possible that a ransomware family may operate in the
afﬁliate model [11], where each afﬁliate may choose to receive
ransom payments in its own cluster that is disjoint from other
afﬁliates’ clusters. If the known payments are made to only a
subset of the afﬁliates, our technique will again miss clusters
of the other afﬁliates.
E. Coverage of Clusters
It is possible that we may not have discovered all clusters
of addresses used by a particular ransomware family. For
instance, a ransomware operator may have switched to a
different cluster of wallet addresses, or there exists multiple
operators for the same family, yet each operator uses a disjoint
cluster of addresses. To determine if we have potentially
missed clusters, we corroborate the timing of payment events
on the blockchain against the timing of two external indicators
of ransomware activity: relative number of searches according
to Google Trends [27], and discovery of new binaries on
VirusTotal [28]. Our assumption is that if, during some period,
we discover new binaries for a ransomware family and/or
observe relevant Google searches while we do not observing
any incoming bitcoins into the ransomware’s cluster, then we
may have missed payment clusters. To this end, we measure
the timing of the following three events:
Bitcoin inﬂow: We compute the total bitcoin amount in
inﬂows to a ransomware cluster per day. An inﬂow to a
ransomware cluster is a transaction that sends bitcoins from
addresses outside the cluster to addresses inside the cluster.
An inﬂow can come from multiple sources: e.g., real victims
and synthetic victims (both from us and potentially from
other researchers); or afﬁliates that pay for ransomware-as-
a-service [11]. Presumably, the presence of any inﬂows to the
cluster implies that the ransomware is actively in operation.
Google searches: Google Trends can produce an estimate for
the relative number of searches per week for any user-speciﬁed
search terms. For each ransomware family, we construct a
search query by concatenating the name of the family along
with the term “ransomware” and extract the relative number of
searches from Google Trends. We assume that if a ransomware
family is actively causing harm during some period, there
would be some number of related searches — for instance,
when victims look for help online.
Number of binaries on VirusTotal: The discovery of new
binaries for a given ransomware family suggests a likely active
ransomware operation, as new versions of the binary may be
released, or the binary may undergo repacking. However, it
is difﬁcult to obtain binaries for a given ransomware family
using VirusTotal. Even though VirusTotal provides a tag for
each family, some of the tags are generic (e.g., W32/Ransom)
and have little indication if a binary is related to a particular
ransomware family.
To this end, we label a large dataset of ransomware binaries
with its family (e.g., Cerber), its variant (e.g., Cerber’s v2),
and the date of its ﬁrst upload to VirusTotal. We can use
the dataset as a proxy to establish the timeline in which
each ransomware family is active, thereby corroborating with
622
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:14 UTC from IEEE Xplore.  Restrictions apply. 
Cerber
CoinVault
CryptXXX
CryptoDefense
CryptoLocker
CryptoWall
Dharma
Locky
Spora
WannaCry
Relative number of Google searches
Binaries seen on VirusTotal
Payment from real/synthetic victim
$0 - $10
$10 - $100
$100 - $1,000
$1,000 - $10,000
$10,000 or above
Fig. 2: A comparison of bitcoin inﬂows, binary discovery on VirusTotal, and Google searches for each ransomware family.
2016-01
2016-07
2017-01
2017-07
2013-01
2013-07
2014-01
2014-07
2015-01
2015-07
the timing of the ransom payments. (This labelled dataset
also allows us to download and execute binaries of speciﬁc
ransomware families, as we did in Section III.)
To build our dataset, we ﬁrst sieve through all malware
samples collected by VirusTotal [28] with 38 high-conﬁdence
YARA rules, which are Perl-based regular expressions often
used to identify malware samples belonging to a speciﬁc
family of malware. These rules have been crafted both by
us and third-party researchers [29]. We call this our seed
dataset: a high-conﬁdence low-recall collection of binaries
belonging to ransomware families. Using these YARA rules
we identiﬁed 147,837 unique ransomware samples for ten
ransomware families as shown in Table II.
To improve our recall and capture additional ransomware
variants, we also collect a low-conﬁdence dataset of malware
that has been tagged by anti-virus engines as ransomware,
either by generic tags (e.g., W32/Ransom), or family-speciﬁc
tags. We then use the VxClass [30] to compute code-structure
similarity scores based on BinDiff [31] across the binaries
of the seed and low-conﬁdence datasets. Finally, we leverage
these similarity scores to cluster binaries into families. Specif-
ically, we represent the binaries from both datasets as nodes in
a graph, where two nodes are connected through an edge if the
binary similarity of the two is high (over a manually-selected
similarity of 0.9). We then identify the connected components
in the graph, and we discard all clusters that do not contain
seed binaries. After this expansion, the dataset was expanded
to over 294k binaries, as shown in Table II. The expansion