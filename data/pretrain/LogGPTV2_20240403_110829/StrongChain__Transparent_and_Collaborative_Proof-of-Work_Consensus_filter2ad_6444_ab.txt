particular, the block validation time, its size, and over-
heads of SPV clients should be at least similar as to-
day. Moreover, the protocol should not introduce any
assumptions that would be misaligned with Bitcoin’s
spirit and perceived as unacceptable by the commu-
nity. In particular, the scheme should not introduce any
trusted parties and should not assume strong synchro-
nization of nodes (like global and reliable timestamps).
3 High-level Overview
3.1 Design Rationale
Our ﬁrst observation is that Bitcoin mining is not transpar-
ent. It is difﬁcult to quickly estimate the computing power
of the different participants, because the only indicator is the
found blocks. After all, blocks arrive with a low frequency,
and each block is equal in terms of its implied computational
power. Consequently, the only way of resolving forks is to
wait for a stronger chain to emerge, which can be a time-
consuming process. A related issue is block-withholding-
like attacks (e.g., selﬁsh mining) which are based on the ob-
servation that sometimes it is proﬁtable for an attacker to
deviate from the protocol by postponing the announcement
of new solutions. We see transparency as a helpful prop-
erty also in this context.
Ideally, non-visible (hidden) so-
lutions should be penalized, however, in practice it is chal-
lenging to detect and prove that a solution was hidden. We
observe that an alternative way of mitigating these attacks
would be to promote visible solutions, such that with more
computing power aggregated around them they get stronger.
This would incentivize miners to publish their solutions im-
mediately, since keeping it secret may be too risky as other
miners could strengthen a competing potential (future) so-
lution over time. Finally, supported by recent research re-
sults [4, 11, 27, 39, 47], we envision that redesigning the Bit-
coin reward scheme is unavoidable to keep the system sus-
tainable and more secure. Beside the deﬂation issues (see
Section 2.2), the reward scheme in Bitcoin is a zero-sum
game rewarding only lucky miners and ignoring all effort of
other participants. That causes ﬁerce competition between
miners and a high reward variance, which stimulates min-
ers to collaborate, but within mining pools, introducing more
risk to the system. We aim to design a system where miners
can beneﬁt from collaboration but without introducing cen-
tralization risks.
3.2 Overview
Motivated by these observations, we see weak puzzle so-
lutions, currently invisible and “wasted” in Bitcoin, as a
promising direction. Miners exchanging them could make
the protocol more transparent as announcing them could re-
ﬂect the current distribution of computational efforts on the
network. Furthermore, if included in consensus rules, they
could give blocks a better granularity in terms of PoW, and
incentivize miners to collaborate.
In our scheme, miners
solve a puzzle as today but in addition to publishing solu-
tions, they exchange weak solutions too (i.e., almost-solved
puzzles). The lucky miner publishes her solution that em-
beds gathered weak solutions (pointing to the same previous
block) of other miners. Such a published block better reﬂects
the aggregated PoW of a block, which in the case of a fork
can indicate that more mining power is focused on a given
branch (i.e., actually it proves that more computing power
“believes” that the given branch is correct). Another crucial
change is to redesign the Bitcoin reward system, such that
the ﬁnders of weak solutions are also rewarded. Following
lessons learned from mining pool attacks, instead of sharing
rewards among miners, our scheme rewards weak solutions
proportionally to their PoW contributed to a given block and
all rewards are independent of other solutions of the block.
(Note, that this change requires a Bitcoin hard fork.)
There are a few intuitions behind these design choices.
First, a selﬁsh miner ﬁnding a new block takes a high risk
by keeping this block secret. This is because blocks have
a better granularity due to honest miners exchanging partial
solutions and strengthening their prospective block, which in
the case of a fork would be stronger than the older block kept
secret (i.e., the block of the selﬁsh miner). Secondly, min-
ers are actually incentivized to collaborate by a) exchang-
ing their weak solutions, and b) by appending weak solu-
tions submitted by other miners. For the former case, miners
are rewarded whenever their solutions are appended, hence
keeping them secret can be unproﬁtable for them. For the
latter case, a miner appending weak solutions of others only
increases the strength of her potential block, and moreover,
appending these solutions does not negatively inﬂuence the
miner’s potential reward. Finally, our approach comes with
another beneﬁt. Proportional rewarding of weak solutions
822    28th USENIX Security Symposium
USENIX Association
decreases the reward variance, thus miners do not have to
join large mining pools in order to stabilize their revenue.
This could lead to a higher decentralization of mining power
on the network.
In the following sections, we describe details of our sys-
tem, show its analysis, and report on its implementation.
4 StrongChain Details
4.1 Mining
As in Bitcoin, in StrongChain miners authenticate transac-
tions by collecting them into blocks whose headers are pro-
tected by a certain amount of PoW. A simpliﬁed description
of a block mining procedure in StrongChain is presented as
the mineBlock() function in Algorithm 1. Namely, every
miner tries to solve a PoW puzzle by computing the hash
function over a newly created header. The header is con-
stantly being changed by modifying its nonce ﬁeld,4 until a
valid hash value is found. Whenever a miner ﬁnds a header
hdr whose hash value h = H(hdr) is smaller than the strong
target Ts, i.e., a h that satisﬁes the following:
h  Ts and Tw is called the weak target.
Whenever a miner ﬁnds such a block header, she adds it
to her local list of weak headers (i.e., weakHdrsTmp) and
she propagates the header among all miners. Then every
miner that receives this information ﬁrst validates it (see on-
RecvWeakHdr()) by checking whether
• the header points to the last strong header,
• its other ﬁelds are correct (see Section 4.2),
• and Equation 2 is satisﬁed.
Afterward, miners append the header to their lists of weak
headers. We do not limit the number of weak headers ap-
pended, although this number is correlated with the Tw/Ts
ratio (see Section 5).
Finally, miners continue the mining process in order to
ﬁnd a strong header. In this process, a miner keeps creat-
ing candidate headers by computing hash values and check-
ing whether the strong target is met. Every candidate header
Algorithm 1: Pseudocode of StrongChain functions.
function mineBlock()
weakHdrsTmp ← /0;
for nonce ∈ {0,1,2, ...} do
hdr ← createHeader(nonce);
/* check if the header meets the strong target */
htmp ← H(hdr);
if htmp < Ts then
B ← createBlock(hdr,weakHdrsTmp,Txs);
broadcast(B);
return; /* signal to mine with the new block */
/* check if the header meets the weak target */
if htmp < Tw then
weakHdrsTmp.add(hdr);
broadcast(hdr);
function onRecvWeakHdr(hdr)
hw ← H(hdr);
assert(Ts ≤ hw < Tw and validHeader(hdr));
assert(hdr.PrevHash == H(lastBlock.hdr)) ;
weakHdrsTmp.add(hdr);
function rewardBlock(B)
/* reward block ﬁnder with R */
reward(B.hdr.Coinbase,R + B.T xFees);
w ← γ ∗ Ts/Tw; /* reward weak headers proportionally */
for hdr ∈ B.weakHdrSet do
reward(hdr.Coinbase,w∗ c∗ R);
function validateBlock(B)
assert(H(B.hdr) < Ts and validHeader(B.hdr));
assert(B.hdr.PrevHash == H(lastBlock.hdr)) ;
assert(validTransactions(B));
for hdr ∈ B.weakHdrSet do
assert(Ts ≤ H(hdr) < Tw and validHeader(hdr));
assert(hdr.PrevHash == H(lastBlock.hdr));
function chainPoW(chain)
sum ← 0;
for B ∈ chain do
/* for each block compute its aggregated PoW */
Ts ← B.hdr.Target;
sum ← sum + Tmax/Ts;
for hdr ∈ B.weakHdrSet do
sum ← sum + Tmax/Tw;
return sum;
function getTimestamp(B)
sumT ← B.hdr.Timestamp;
sumW ← 1.0;
/* average timestamp by the aggregated PoW */
w ← Ts/Tw;
for hdr ∈ B.weakHdrSet do
sumT ← sumT + w∗ hdr.Timestamp;
sumW ← sumW + w;
return sumT /sumW ;
4In fact, other ﬁelds can be modiﬁed too if needed.
USENIX Association
28th USENIX Security Symposium    823
“protects” all collected weak headers (note that all of these
weak headers point to the same previous strong header).
In order to keep the number of found weak headers close
to a constant value, StrongChain adjusts the difﬁculty Tw of
weak headers every 2016 blocks immediately following the
adjustment of the difﬁculty Ts of the strong headers accord-
ing to Equation 1, such that the ratio Tw/Ts is kept at a con-
stant (we discuss its value in Section 5).
4.2 Block Layout and Validation
A block in our scheme consists of transactions, a list of weak
headers, and a strong header that authenticates these transac-
tions and weak headers. Strong and weak headers in our
system inherit the ﬁelds from Bitcoin headers and addition-
ally enrich it by a new ﬁeld. A block header consists of the
following ﬁelds:
PrevHash: is a hash of the previous block header,
Target: is the value encoding the current target deﬁning the
difﬁculty of ﬁnding new blocks,
Nonce: is a nonce, used to generate PoW,
Timestamp: is a Unix timestamp,
TxRoot: is the root of the Merkle tree [24] aggregating all
transactions of the block, and
Coinbase: represents an address of the miner that will re-
ceive a reward.
As our protocol rewards ﬁnders of weak headers (see details
in Section 4.4), every weak header has to be accompanied
with the information necessary to identify its ﬁnder. Oth-
erwise, a ﬁnder of a strong block could maliciously claim
that some (or all) weak headers were found by her and get
rewards for them. For this purpose and for efﬁciency, we in-
troduced a new 20B-long header ﬁeld named Coinbase. With
the introduction of this ﬁeld, StrongChain headers are 100B
long. But on the other hand, there is no longer any need
for Bitcoin coinbase transactions (see Section 2.1), as all re-
wards are determined from headers.
In our scheme, weak headers are exchanged among nodes
as part of a block, hence it is necessary to protect the in-
tegrity of all weak headers associated with the block. To re-
alize it, we introduce a special transaction, called a binding
transaction, which contains a hash value computed over the
weak headers. This transaction is the ﬁrst transaction of each
block and it protects the collected weak headers. Whenever
a strong header is found, it is announced together with all its
transactions and collected weak headers, therefore, this ﬁeld
protects all associated weak headers. To encode this ﬁeld we
utilize the OP RETURN operation as follows:
Figure 1: An example of a blockchain fragment with strong head-
ers, weak headers, and binding and regular transactions.
the strong header), we propose to save bandwidth and stor-
age by not including these ﬁelds into the data of a block. This
modiﬁcation reduces the size of a weak header from 100B to
60B only, which is especially important for SPV clients who
keep downloading new block headers.
With our approach, a newly mined and announced block
can encompass multiple weak headers. Weak headers, in
contrast to strong headers, are not used to authenticate trans-
actions, and they are even stored and exchanged without their
corresponding transactions.
Instead, the main purpose of
including weak headers it to contribute and reﬂect the ag-
gregated mining power concentrated on a given branch of
the blockchain. We present a fragment of a blockchain of
StrongChain in Figure 1. As depicted in the ﬁgure, each
block contains a single strong header, transactions, and a set
of weak headers aggregated via a binding transaction.
On receiving a new block, miners validate the block by
checking the following (see validateBlock() in Algorithm 1):
1. The strong header is protected by the PoW and points
to the previous strong header.
2. Header ﬁelds have correct values (i.e., the version, tar-
get, and timestamp are set correctly).
3. All included transactions are correct and protected by
the strong header. This check also includes checking
that all weak headers collected are protected by a bind-
ing transaction included in the block.
4. All included weak headers are correct: a) they meet the
targets as speciﬁed in Equation 2, b) their PrevHash
ﬁelds point to the previous strong header, and c) their
version, targets, and timestamps have correct values.
If the validation is successful, the block is accepted as part
of the blockchain.
OP RETURN H(hdr0(cid:107)hdr1(cid:107)...(cid:107)hdrn),
(3)
4.3 Forks
where hdri is a weak header pointing to the previous strong
header.
Since weak headers have redundant ﬁelds (the
PrevHash, Target, and Version ﬁelds have the same values as
One of the main advantages of our approach is that blocks
reﬂect their aggregated mining power more precisely. Each
block beside its strong header contains multiple weak head-
824    28th USENIX Security Symposium
USENIX Association
NoncePrevHashTimestampTxRootTargetNoncePrevHashTimestampTxRootTargetNoncePrevHashTimestampTxRootTargetNoncePrevH..Times..TxRootTargetstrong headersweak headersCoinbaseCoinbaseCoinbaseCoinb..bt2tx6tx7tx8NoncePrevH..Times..TxRootTargetCoinb..NoncePrevH..Times..TxRootTargetCoinb..NoncePrevH..Times..TxRootTargetCoinb..bt1tx4tx5NoncePrevH..Times..TxRootTargetCoinb..NoncePrevH..Times..TxRootTargetCoinb..bt0tx1tx2tx3NoncePrevH..Times..TxRootTargetCoinb..NoncePrevH..Times..TxRootTargetCoinb..NoncePrevH..Times..TxRootTargetCoinb..4.4 Rewarding Scheme
The rewards distribution is another crucial aspect of
StrongChain and it is presented by the rewardBlock() pro-
cedure from Algorithm 1. The miner that found the strong
header receives the full reward R. Moreover, in contrast to
Bitcoin, where only the “lucky” miner is paid the full reward,
in our scheme all miners that have contributed to the block’s
PoW (i.e., whose weak headers are included) are paid by
commensurate rewards to the provided PoW. A weak header
ﬁnder receive a fraction of R, i.e., γ ∗ c∗ R∗ Ts/Tw, as a re-
ward for its corresponding solution contributing to the total
PoW of a particular branch, where the γ parameter inﬂuences
the relative impact of weak header rewards and c is just a
scaling constant (we discuss their potential values and im-
plications in Section 5). Moreover, we do not limit weak
header rewards and miners can get multiple rewards for their
weak headers within a single block. Similar reward mech-
anisms are present in today’s mining pools (see Section 8),
but unlike them, weak header rewards in StrongChain are in-
dependent of each other. Therefore, the reward scheme is
not a zero-sum game and miners cannot increase their own
rewards by dropping weak headers of others (actually, as
we discuss in Section 5, they can only lose since their po-
tential solutions would have less PoW without others’ weak
headers). Furthermore, weak header rewards decrease signif-
icantly the mining variance as miners can get steady revenue,
making the system more decentralized and collaborative.
As mentioned before, the number of weak headers of a
block is unlimited, they are rewarded independently (i.e., do
not share any reward), and all block rewards in our system
are proportional to the PoW contributed. In such a setting,
a mechanism incentivizing miners to terminate a block cre-
ation is needed (without such a mechanism, miners could
keep creating huge blocks with weak headers only). In order
to achieve this, StrongChain always attributes block transac-
tion fees (B.T xFees) to the ﬁnder of the strong header (who
also receives the full reward R).
Note that in our rewarding scheme, the amount of newly
minted coins is always at least R, and consequently, unlike
Bitcoin or Ethereum [48], the total supply of the currency
in our protocol is not upper-bounded. This design decision