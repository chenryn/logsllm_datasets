### 4.1 Binder Interface Recognition
We determine whether a function is a member function of a Binder interface. If it is, we record the member function and its parameter information for the Binder interface.

### 4.2 Reachability Analysis
For each Binder interface, we check whether its proxy can be acquired by an application. This can happen either directly through the ServiceManager or via other reachable Binder interfaces that send sub-interfaces to the application.

### 4.3 Screening for TBIs and CBIs
For each reachable Binder interface, we check whether it can receive `IBinder` objects by recursively decomposing the parameters in its member functions. A Binder Interface is classified as a TBI (Transactable Binder Interface) if it is reachable and at least one of its interface functions accepts `IBinder` objects. The same process also identifies CBIs (Customizable Binder Interfaces), which are `IBinder` objects that can be transmitted to TBIs.

### 4.4 Binder Interface Recognition
#### Our Method
Previous studies [3, 32] recognized Binder interfaces and extracted their functions during the (un)marshalling process of a Binder server (steps 6 or 7 in Fig. 2). However, this method has become less effective with the adoption of SafeInterface [5], which hides (un)marshalling details from both developers and analyzers. We recognize Binder interfaces by analyzing inheritance relationships, ensuring an accurate list of Binder interfaces. This approach also provides the function parameters and types, facilitating vulnerability confirmation and further exploitation. The preserved function names and argument types ensure that the PoRs (Proofs of Reachability) we generate are syntactically correct and human-readable, enhancing the success rate and facilitating subsequent privilege escalation attacks.

#### Fingerprinting Binder Interfaces
As shown in Fig. 1, there are five classes associated with a Binder interface:
1. A general interface `IInterface` deriving all C++ Binder interfaces.
2. An interface definition class extending `IInterface`.
3. A Binder proxy class with the prefix `Bp`.
4. A Binder native class with the prefix `Bn`.
5. The actual implementation class extending the `Bn` class.

We use the Binder proxy class with the prefix `Bp` as a fingerprint to identify Binder interfaces and their member functions. For example, all functions defined in the `IAudioFlinger` interface are implemented in its `Bp` classes. By verifying whether a function is a member of a `Bp` class, we can accurately determine the set of Binder interface functions.

#### Verifying Binder Interface Functions
Our recognition process involves demangling the function's original namespace and class name, which is available if it is a class member function. We cross-check the recovered class name with the type name extracted from the function's `this` pointer. If they match, the function is a class member function. We then check if the class member function is a Binder proxy function by verifying:
1. Its class indirectly inherits `IInterface`.
2. Its class does not implement the `onTransact` function, which is a symbol of `Bn` classes.

When both conditions are met, we get the Binder interface name (the parent class of the `Bp` class) and all associated interface functions. After enumerating all Android functions, we have a complete list of Binder interfaces and their functions.

### 4.5 Reachability Analysis
A Binder interface serves as a TBI only if its proxy can be acquired by an application. The attacker may obtain the Binder proxy by querying the ServiceManager or by interacting with a reachable Binder server, which returns a sub-interface. There are three caveats:
1. Sub-interfaces can be nested.
2. Not all sub-interfaces are transmitted as return values; some are passed as out parameters.
3. The received sub-interface may be encapsulated in a sub-field, either in a Parcelable object or a pointer whose type is opaque and cannot be extracted by LLVM.

With these considerations, our reachability analysis includes the following steps:

#### Step 1: Querying ServiceManager
We execute the `service list` command on a running device to get all Binder interfaces registered in the ServiceManager. These interfaces are added to a set called `Reachables`.

#### Step 2: Listing Return Values and Out Parameters
Using the results from Section 4.2, we list all member functions of the newly added elements in `Reachables`. We then compile a list of these functions' return values and out parameters, named `Values`. Return values are extracted using the `sret` attribute via an LLVM API. We manually inspect these functions to list the out parameters. We observe that out parameters are passed by pointer, while in parameters are passed by value or reference.

#### Step 3: Decomposing Return Values and Out Parameters
We screen the list `Values` for `IBinder` objects. All primitive types are dropped, and `IBinder` objects are added to `Reachables`. Non-`IBinder` synthetic types are further decomposed, and their member elements are added to the end of the list for screening.

Handling pointers to opaque types is challenging, as their definitions may be in another file. To address this, we introduce two rounds of pre-processing:
1. The first round records all opaque type names in all Binder interface functions' arguments and return values.
2. The second round records the definitions of these opaque types.

When encountering an opaque type in `Values`, we look up its definition in our pre-processing results. The decomposition process continues until `Values` is empty. Steps 2 and 3 are repeated until all elements in `Reachables` are processed and `Values` is empty.

### 4.6 Screening for TBIs and CBIs
After identifying the reachable Binder interfaces, we traverse them to get the lists of TBIs and CBIs. We start by listing all member functions of Binder interfaces in `Reachables`. For each member function, we decompose all input parameters to look for attacker-customizable `IBinder` objects. The decomposition process is similar to Step 3 in our reachability analysis. For each customizable `IBinder` object, we mark the member function as a TBIF (Transactable Binder Interface Function), its corresponding Binder interface as a TBI, and the `IBinder` object's corresponding Binder interface as a CBI. The TBIF-CBI connections are recorded in a call graph database.

### 4.7 Enumeration Results
In Android 11, we count 1,465 Binder interface functions in 176 Binder interfaces, identifying 57 TBIs and 84 CBIs. Among these TBIs, 203 member functions accept customizable `IBinder` objects, which we call CTBIFs (Corresponding Transactable Binder Interface Functions). These CTBIFs are crucial for attacks as they serve as the attacker's entry points.

### 5. Attack Capability Analysis
CBIs interact directly with the target system service and are key components in launching subsequent attacks. The data sent from and received by CBIs translate into the number of attack strategies. Specifically, data received from the system service may contain private information or memory addresses, allowing the attacker to bypass Address Space Layout Randomization (ASLR) and pinpoint attack locations and gadgets. Sending data to the system service can trigger undefined behaviors, such as affecting the service's control flow or causing memory corruption.

Given the importance of CBIs' input and output capabilities, we measure these capabilities using a new metric called Interface Complexity. This metric ranks all CBIs, providing valuable guidance for vulnerability discovery.

#### 5.1 Interface Complexity: Definition
Our Interface Complexity metric generalizes the attack surface metric [34] by decomposing functions into inputs and outputs and assigning weights based on their data types. To compute the Interface Complexity (`𝐶IO`) of a CBI `𝑏`, we decompose its member functions' inputs and outputs into four data types:
- **Pr**: Primitive types with fixed lengths (e.g., integer, bool, char, float).
- **Ar**: Arrays with a known number of fixed-size elements.
- **Co**: Containers with a flexible number of fixed-size elements (e.g., vectors, maps, sets).
- **B**: Transactable elements referring to another Binder Interface.

We denote the numbers of primitive, array, and container items after `𝑏`'s input decomposition as `𝑛Pr_I(𝑏)`, `𝑛Ar_I(𝑏)`, and `𝑛Co_I(𝑏)`, respectively. The corresponding counts in `𝑏`'s output decomposition are `𝑛Pr_O(𝑏)`, `𝑛Ar_O(𝑏)`, and `𝑛Co_O(𝑏)`. The set of Binder interfaces in the inputs and outputs are represented by `𝐵I(𝑏)` and `𝐵O(𝑏)`.

We assign weight values to each decomposed item based on its data type and whether it is an input or output. The intermediate result `𝐶Pr,Ar,Co_IO(𝑏)` is calculated as the total weight of the first three types:
\[ 𝐶Pr,Ar,Co_IO(𝑏) = 𝑤Pr \cdot 𝑛Pr_I(𝑏) + 𝑤Ar \cdot 𝑛Ar_I(𝑏) + 𝑤Co \cdot 𝑛Co_I(𝑏) + 𝑤Pr \cdot 𝑛Pr_O(𝑏) + 𝑤Ar \cdot 𝑛Ar_O(𝑏) + 𝑤Co \cdot 𝑛Co_O(𝑏) \]

The actual Interface Complexity is calculated by adding `𝐶Pr,Ar,Co_IO(𝑏)` with the discounted sum of all decomposed Binder items in its inputs and outputs:
\[ 𝐶IO(𝑏) = 𝐶Pr,Ar,Co_IO(𝑏) + 𝛼I \sum_{𝑏′∈𝐵I(𝑏)} 𝐶Pr,Ar,Co_IO(𝑏′) + 𝛼O \sum_{𝑏′∈𝐵O(𝑏)} 𝐶Pr,Ar,Co_IO(𝑏′) \]
where `𝛼I` and `𝛼O` are discount factors. As an initial attempt, we assign weights 1, 2, and 2 to the first three data types and choose `𝛼I = 𝛼O = 1`.

#### 5.2 Interface Complexity: Results
CBIs with high `𝐶IO(𝑏)` and Type I Attacks. We calculated the Interface Complexity of all CBIs in Android 11 and selectively listed some results in Table 2. Most vulnerabilities we discovered—20 out of 26—reside in CBIs with the highest Interface Complexity, proving a strong correlation between Interface Complexity and attack capability. These 20 vulnerabilities cover all Type I attacks in Section 6.2, including four CVEs out of the ten CVEs corresponding to this study. We release the complete Interface Complexity results to help Android developers and security researchers prioritize their efforts.

CBIs with non-empty `𝐵O(·)` & `𝐵I(·)` and Type II & III Attacks. By decomposing a CBI `𝑏`, we get the set of CBIs that `𝑏` can send to TBIs (`𝐵O(𝑏)`) and the set of TBIs `𝑏` can receive (`𝐵I(𝑏)`). We call members of `𝐵O(𝑏)` sub-CBIs and members of `𝐵I(𝑏)` sub-TBIs. We pay special attention to these sets in our vulnerability discovery, as attack portals involving multiple CBIs or TBIs are stealthier. We use Type II attacks to denote vulnerabilities involving sub-CBIs and Type III for sub-TBIs. Of these two types, we found six vulnerabilities leading to six CVEs (cf. Section 6.2).

### 6. Confirming the BiTRe Attacks
A complete BiTRe attack involves two phases: preparation and attacking. During the preparation phase, the attacker process transacts with the TBI and induces it to call a CBIF as a Binder client. In the attacking phase, the CBI launches various attacks. We explore these two phases separately.

#### 6.1 Preparation Phase: PoR Generation
Our PoRs do not trigger or exploit vulnerabilities; we consider a PoR successful if a role-reversal transaction involving a new TBI-CBIF pair is initiated. Our system consists of a PoR generator and a PoR executor. The generator creates executable PoR programs targeting each TBI-CBIF pair and feeds them to the executor, which runs the PoR on an Android device. The process repeats until the CBIF is invoked, at which point the PoR is recorded. Each PoR is a combination of a plausible TBIF calling sequence and a set of plausible inputs to these TBIFs.

**Calling Sequence Generation**: To trigger a CBIF, we first locate its CTBIF (TBIF that calls the CBIF) by searching the call graph database established in Section 4.4. If a direct invocation of the CTBIF completes the job, we are done. Otherwise, invoking the CBIF often requires the TBI server to be in a specific state, which requires the application to invoke the correct sequence of TBIFs. We adopt a strategy inspired by fuzz testing, randomly calling some TBIFs before invoking the CTBIF, hoping to set the TBI server in the correct state.

**Input Generation**: Our Binder interface recognition (Section 4.2) provides the syntax information of the TBIF inputs. We use this information to generate all primitive type inputs and mutate them during fuzzing. The remaining challenge is generating semantically correct synthetic-type inputs, usually class or structure objects. We search for existing TBIFs that output the object, use the object's constructor, or construct the object from scratch. We developed a Clang plugin to extract type information and decompose the object one layer at a time.

**Executing the Prototype System**: We execute our PoR generator on a Ubuntu 20.04 system with an Intel Core i7-6700 @ 3.40GHz processor and 32G RAM. The PoR executor runs on a Google Pixel 3 device with the build tag `android-11.0.0_r1`. During the process, we discover another method to affect the TBI's control flow from a CBI. Some TBIs create a death recipient for their corresponding CBIs, allowing garbage collection once the CBI dies. In 24 hours, our system triggers 57 CBIFs and 24 death recipients, involving 28 CBIs and 12 TBIs. Selected results are in Appendix B. The attack portals corresponding to seven CVEs are reachable from our PoRs, including three Type I and four Type II attacks.

#### 6.2 Attacking Phase: Triggering Vulnerabilities
We find and report to Google 26 vulnerabilities, each with distinct root causes and crash points. Ten of them are assigned CVEs, and most of the others are marked as duplicates. We do not claim to exhaust the attack family but cover TBIs and CBIs with high Interface Complexity and those involving sub-CBIs and sub-TBIs. All 26 are fixed in subsequent Android releases based on our reports. These vulnerabilities involve four "TBI ⇒ CBI" pairs:
- `ISurfaceComposer ⇒ IGraphicBufferProducer` with 11 cases.
- `IOMX ⇒ IGraphicBufferConsumer` with nine cases.
- `IMediaExtractor ⇒ IDataSource` with four cases.
- `IStatsd ⇒ IPullAtomCallback` with two cases.

We split these vulnerabilities into four types based on the number of CBIs and TBIs involved:
- **Type I**: Direct Attack. The attacker constructs evil CBI servers and sends malformed data to the TBI, triggering insecure data- and control-flow vulnerabilities in the TBI.
- **Type II**: One TBI, Multiple CBIs. The CBI to launch the attack (sub-CBI) is sent to the TBI by the upper CBI.
- **Type III**: One CBI, Multiple TBIs. The TBI under attack (sub-TBI) is sent to the CBI by the upper TBI.
- **Type IV**: Multiple CBIs and TBIs. Multiple CBIs and TBIs are involved, with sub-CBIs utilized to attack certain sub-TBIs.

**Type I Example**: CVE-2017-0665, where the attacker customizes the CBI `IGraphicBufferProducer` to interact with the TBI `ISurfaceComposer`. We successfully exploit this vulnerability to hijack the control flow of SurfaceFlinger, the actual implementation of the TBI Server. When an application calls `BpSurfaceComposer::captureScreen()` with an evilly customized CBI Server `IGraphicBufferProducer`, SurfaceFlinger does not sanitize the return values of the `dequeueBuffer()` implemented in `IGraphicBufferProducer`. The replied position is used to access an array named `mSlot`, leading to out-of-bounds access. The out-of-bounds memory is then converted to an `ANativeWindowBuffer` object containing two function pointers. In the `eglCreateImageKHR` function, there is a `blx r2` instruction. The `r2` register is read from the buffer after being dequeued. By carefully spraying the heap, we can overwrite the register and eventually hijack the control flow of the SurfaceFlinger context.

**Type II Example**: Many Binder interfaces have functions that return another Binder object. Whenever these Binder interfaces act as CBIs, we can construct a malicious sub-CBI server and send it to the TBI via these functions. We extend `TService` to illustrate Type II attacks. In the code, the `setSubCBI` function requests another CBI called `mSubCBI` from the CBI. The attacker implements two Binder servers: `EvilCBIServer` for providing the sub-CBI and `EvilSubCBIServer` for returning the malformed index. The four vulnerabilities involving the TBI `IMediaExtractorService` are of this type, with four CVEs assigned. In these cases, `IMediaExtractorService` requests an `IMemory` proxy from our CBI `IDataSource`. The actual attack is launched from the sub-CBI `IMemory`, causing a heap-based buffer overflow.

**Type III Example**: When a CBIF has a Binder object among its input parameters, the corresponding TBI must construct and send the Binder object to invoke the CBIF. The newly constructed Binder object has the same privileges as its constructor TBI, making it an equally rewarding attack target. We modify `TService` to illustrate these attacks. The TBI declares a `sendSubTBI` function that initializes another Binder server and sends it to the CBI as a parameter of the CBIF callback. The buffer overflow bug is in the `bofBug` function of `SubTBI`.

This structured and detailed approach ensures a clear, coherent, and professional presentation of the text.