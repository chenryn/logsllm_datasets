are not only respectively accurate,
the page loading time
difference between http2 and pipeline is nearly identical
between simulation and reality. This shows the value of our
simulator as one of our main ﬁndings, “HTTP/2 is slightly
slower than HTTP/1.1 with pipelining on Tor Browser”, could
have been obtained through the BLAST simulator.
We show a scatter plot of real versus simulated page
load times in Figure 5 for http2. The correlation is strong
at r = 0.63, and the simulator produces an accurate mean
page loading time; however, the simulator is not necessarily
accurate at the page instance level, in particular because it is
not possible to simulate random round-trip times, delays, and
congestion.
8
We decided that we would base our changes on HTTP/2
rather than pipelining. Due to the signiﬁcant error rate under
pipelining and the fact that Firefox and Tor are no longer
willing to support pipelining code, improving HTTP/2 perfor-
mance is a more realistic priority.
Our proposed new infrastructure (additional databases for
client use) would not require cooperation from web servers
or any third-party entity. We propose that
they should be
distributed by Tor directory servers, which already distribute
Tor relay information, to Tor clients on startup. We describe
each of these proposals in the following.
TCP Fast Open. TCP Fast Open is a feature of TCP that
eliminates a round trip in the establishment of TCP connections
if the client has previously established another TCP connection
to the server. By sending a cryptographic cookie in the initial
SYN packet, the client validates her identity to the server. The
client would send application data — speciﬁcally, a GET/PUT
request — alongside the initial SYN packet and the server can
immediately respond to that request. TCP Fast Open has been
experimentally implemented in the latest version of Firefox,
though it is not currently enabled in Tor Browser.
Optimistic data. In 2010, Goldberg proposed the use of
optimistic data to reduce round-trip times on Tor [10]. We
saw in Figure 1 that it takes two or three round trips to
load a resource from a server without a prior connection.
With optimistic data on an unencrypted connection, the client
would send the resource request along with the connection
establishment request; the Tor exit node holds the resource
request until the connection is established, and then sends
the resource request. This reduces the two round-trip times
between client and server to one round-trip time between client
and server, plus one (much smaller) round-trip time between
the Tor exit node and the server. On an encrypted connection,
the client would instead send the ﬁrst TLS negotiation packet
 0 10 20 30 40 50 60 0 10 20 30 40 50 60r = 0.63Simulated load time (s)Real load time (s)(Client Hello) along with the connection establishment request,
which saves about one round trip as well.
browser would simply default to using HTTP/1.1 after failing
to establish a HTTP/2 connection.
Optimistic data was implemented in 2013 with changes to
Tor and by hacking a shortcut into the browser SOCKS state
machine, but this hack was removed recently because it was
not compatible with newer browser code. We could not re-
implement optimistic data using the previous hack, but we can
test whether a full implementation is useful with simulation.
0-RTT TLS. Normally, TLS negotiation takes one extra
round trip after connection establishment, during which the
connection cannot be used to send resource requests. TLS
1.3 introduces 0-RTT session resumption: it allows clients
to remember negotiated keys with servers and send them
back with session resumption tickets. While there are security
concerns with 0-RTT regarding forward secrecy and replay
attacks, researchers have proposed ﬁxes to resolve these issues
and some browsers and servers have enabled it [17]. We do
not implement 0-RTT TLS, but we want to evaluate its effect
on resource load times and page load times to understand how
much it might help Tor Browser. HTTP/3 (HTTP over QUIC)
also promises a reduction in round-trip times by allowing a
single QUIC handshake to establish connection and negotiate
encryption.
Combining the above, we can reduce the number of round
trips incurred to load a resource to a single round trip over Tor,
plus a (much smaller) round trip between the Tor exit node
and the server. Theoretically, we thus approach the minimum
number of round trips without changing the resource tree of
the web page.
Redirection database. Many pages in our data set redi-
rect
the client upon initial page navigation. For example,
youtube.com redirects to https://youtube.com, which then redi-
rects to https://www.youtube.com. Each redirection incurs mul-
tiple unnecessary round trips. Due to our high latency, redirects
are quite detrimental to page load times.
HTTPS Everywhere, included in Tor Browser, does partly
reduce the number of redirects: it relies on a user-maintained
database to replace clicked or user-typed URLs with their
encrypted versions, browser-side. In the above, HTTPS Every-
where would eliminate the ﬁrst redirect, but not the second one.
Further, HTTPS Everywhere does not deal with localization.
We propose that Tor Browser should reduce redirects with
an extensive redirection database that also takes care of local-
ization redirects.6 We generate this database automatically by
parsing redirection responses from web servers. The browser
UI should inform the client when it skips redirects using the
database, so that the client can revert or disable rules that are
inconvenient.
HTTP/2 database. We investigate the use of a list of HTTP/2
servers for Tor clients to eliminate the extra round trip to
negotiate ALPN (discussed in Section IV-B). Even if there
are erroneous entries in the database, which should be rare as
servers that start supporting HTTP/2 would not abandon it, the
6As localization is based on the Tor exit relay’s location, not the user’s
preference, it usually redirects Tor users to a wrong page.
Prefetching database. If the client knew which resources
were associated with a page before parsing resource responses,
she could request these resources as soon as page loading
begins. This ﬂattens the resource tree structure and eliminates
the otherwise necessary round trips between resources and
their children resources. Some resources cannot be effectively
prefetched because they are based on randomized or dynamic
activity (e.g. advertisements). We automatically generate a
resource prefetching database from BLAST logs and attempt
to prefetch any resource that occurs in almost all instances of
a web page.7
D. Evaluation of proposed changes
We evaluate all the browser improvements we proposed
above using our simulator here. We evaluate each change
both cumulatively and separately. In the cumulative evaluation,
a latter improvement in the following list contains all the
improvements before it:
1) Original Tor Browser with HTTP/2
2) TCP Fast Open
3) Optimistic data
4) 0-RTT TLS
5) Redirection database
6) HTTP/2 database
7) Prefetching database
In Figure 6, we show the mean page load time and
resource load time according to the BLAST simulator. With the
exception of the HTTP/2 database, each added feature clearly
reduces both load times. Resource prefetching using a database
produces the largest improvement, alone able to reduce mean
page load time by 35%; all features combined produce a 61%
decrease in mean page load time, from 18 s to 7.1 s. We give
details on each of the improvements in the following.
TCP Fast Open. TCP Fast Open provides an advantage only
if the client has already established a connection to the server
and needs to establish another. We found that 18% of our
established connections beneﬁted from TCP Fast Open, cutting
down one round trip with each connection.
Optimistic data. Optimistic data effectively shortens the round
trip for HTTP request right after connection establishment to
the much shorter round trip between the exit node and the web
server. To simulate this, we reduce the round-trip time in that
case to 0.1 s. Optimistic data speeds up page loading greatly
while requiring no extra infrastructure.
0-RTT TLS. 0-RTT TLS has been prototyped for session
resumption and there is currently a proposal to implement it
in HTTP/3 without session resumption. If we discard HTTP/3
(true) 0-RTT TLS because its implementation is not expected
to come soon, mean page load time with all other improve-
ments increases from 7.1 s to 9.2 s.
7 For clarity, our technique is unrelated to HTML5 link prefetching, a
technique for websites to use an HTML prompt to instruct clients to load
resources.
9
(a)
(b)
(c)
(d)
Fig. 6: Mean page load time (a, b) and mean resource load time (c, d) for our suggested improvements as predicted by the
BLAST simulator on resource trees parsed from http2. (a) and (c) show cumulative improvement (each improvement is applied
on top of previous ones), while (b) and (d) show individual improvement.
Redirection database. We automatically built a redirection
data set using BLAST logs for our pages and modelled the
use of such a data set. The top 200 pages had a mean of
1.17 redirects, allowing us to save two or three round trips for
each redirect. This approach is however too optimistic since
we know all the pages we want to load. We could have created
a data set with more pages — top 10,000 pages, for example
— but users will still visit pages outside of this set. On the
other hand, it is usually only the top sites that use one or more
initial redirects, as less popular websites are less likely to have
multiple servers, localization, or URL canonicalization.
To simulate a failure rate, we only used redirection for
the top 200 pages, simulating a 60% hit rate where only hits
produce a beneﬁt and misses do not affect page loading.
HTTP/2 database. The use of an HTTP/2 database — to
allow clients to beneﬁt from HTTP/2 without waiting for
an extra round trip during which she has limited resource
loading capacity — produced almost no discernible beneﬁt
for page load times. This conﬁrms that further increasing
resource loading capacity is not a concern for page loading
on anonymity networks.
Prefetching database. We only attempted to prefetch a re-
source if it occurred in 90% or more of the page’s instances.
For the top 10th to 200th pages, since we have no more than 5
instances each, this means that all instances of the page must
contain that resource. Since we loaded instances of every page
over two months, the resources we chose to prefetch certainly
have a long lifespan. Similar to the redirection database, we
only apply prefetching to the top 200 pages so that the hit rate
is 60%.
Despite our conservative strategy, we prefetched a mean
of 55.7 resources per page among our top 200 pages, and
58% of resources were prefetched. Only 1% of the resources
prefetched using our database were false positives, i.e. not
needed for that page, so the additional bandwidth cost is quite
low. As a database to contain top 10,000 pages would still
be less than a megabyte in size, there is almost no storage
or communication cost to regularly update such a database,
which we propose Tor directory servers should distribute. A
more aggressive database could cause more false positives to
further reduce load times; on the other hand, the beneﬁt could
be reduced if resource loads were forced by scripts and cache
policies regardless, which we could not simulate.
E. Extensibility of improvement
We checked to see if load time decreases were spread
evenly across most pages or restricted to select pages. Over
our data set, we observed at least a 25% decrease in load time
in 89% of page instances, and at least a 50% decrease in load
time in 68% of page instances. This suggests that most web
pages beneﬁted signiﬁcantly to varying degrees. This is despite
the fact that we intentionally constructed our data set so that
a third of page instances were not in the databases and thus
did not beneﬁt from those methods.
We also wanted to evaluate whether or not load times
decreased disproportionately in certain types of pages, such
as smaller pages, or pages with fewer resources. To do so,
we measured the performance improvement (as a percentage)
against three features: total page size, height of resource tree,
and number of resources. The respective r correlation values
were 0.20, 0.03, and 0.08; these low correlation values are a
positive result suggesting that our improvements were equally
felt by all types of pages. Further examining total page size,
we divided the data set into two equal halves (above or below
total page size of 1.36 MB), and observed a 62% ± 24%
improvement on the lower half and a 51% ± 31% improvement
on the upper half. The small difference between these two sets
suggests that even the largest pages beneﬁt signiﬁcantly from
our features.
It makes sense that our improvements would be generally
felt across all pages: they reduce round trip times and ﬂatten
resource tree structures, which affect all pages. We can there-
fore anticipate that these improvements would extend beyond
Alexa’s top 1000 pages.
F. Evaluation of implementation
We implemented a prototype of two features as Firefox
add-ons for the top 200 pages: (1) redirection database, where
10
 0 5 10 15 20 25HTTP/2+TFO+Optdata+0RTT-TLS+Redirect-DB+HTTP2-DB+Prefetch-DBPage load time (s)Transfer timeServer wait timeTLS wait timeQueue wait time 0 5 10 15 20 25HTTP/2TFOOptdata0RTT-TLSRedirect-DBHTTP2-DBPrefetch-DBPage load time (s)Transfer timeServer wait timeTLS wait timeQueue wait time 0 0.5 1 1.5 2 2.5 3HTTP/2+TFO+Optdata+0RTT-TLS+Redirect-DB+HTTP2-DB+Prefetch-DBResource load time (s)Transfer timeServer wait timeTLS wait timeQueue wait time 0 0.5 1 1.5 2 2.5 3HTTP/2TFOOptdata0RTT-TLSRedirect-DBHTTP2-DBPrefetch-DBResource load time (s)Transfer timeServer wait timeTLS wait timeQueue wait timeimplementations suggest that the large load time decreases
predicted by the simulator are indeed achievable, and in fact
we see a slightly larger improvement due to the redirection
database than predicted.
VI. DISCUSSION
A. Implementation and maintenance
Our proposed features require changes to Tor Browser to
support. We anticipate that those changes would largely be
focused on the browser’s HTTP connection manager, which
governs how connections are created and how resources are
dispatched onto them:
• TCP Fast Open is already available on Firefox, although
currently disabled; TLS session resumption is also avail-
able but used by limited servers due to potential risks.
True 0-RTT TLS (without resumption) is anticipated in
HTTP-over-QUIC.
• Since the optimistic data hack no longer works (as earlier
described), implementing it would likely require a re-
writing of the connection manager’s state machine so that
it would recognize that resource requests should be sent
earlier.
• We can implement
the redirection and prefetching