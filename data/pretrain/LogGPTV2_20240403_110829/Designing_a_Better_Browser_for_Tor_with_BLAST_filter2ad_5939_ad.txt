### Accuracy and Correlation of Page Loading Times

The page loading times for both HTTP/2 and pipelining are nearly identical between the simulation and real-world scenarios. This finding underscores the value of our simulator, as it accurately predicted that "HTTP/2 is slightly slower than HTTP/1.1 with pipelining on Tor Browser." This result could have been obtained using the BLAST simulator.

In Figure 5, we present a scatter plot comparing the real and simulated page loading times for HTTP/2. The correlation is strong, with a coefficient of \( r = 0.63 \). The simulator accurately predicts the mean page loading time but may not be as precise at the individual page level, particularly due to the inability to simulate random round-trip times, delays, and congestion.

### Basis for Improvements

Given the significant error rate under pipelining and the fact that Firefox and Tor no longer support pipelining, we decided to focus our improvements on HTTP/2. Enhancing HTTP/2 performance is a more realistic and feasible priority.

### Proposed Infrastructure

Our proposed new infrastructure, which includes additional databases for client use, does not require cooperation from web servers or any third-party entities. We suggest that these databases be distributed by Tor directory servers, which already distribute Tor relay information, to Tor clients upon startup. The following sections detail each of these proposals.

#### TCP Fast Open

TCP Fast Open (TFO) is a feature of TCP that eliminates one round trip in the establishment of TCP connections if the client has previously connected to the server. By sending a cryptographic cookie in the initial SYN packet, the client validates its identity to the server. The client can then send application data, such as a GET/PUT request, alongside the initial SYN packet, allowing the server to respond immediately. TFO has been experimentally implemented in the latest version of Firefox but is not currently enabled in Tor Browser.

#### Optimistic Data

In 2010, Goldberg proposed the use of optimistic data to reduce round-trip times on Tor. As shown in Figure 1, it typically takes two or three round trips to load a resource from a server without a prior connection. With optimistic data, the client sends the resource request along with the connection establishment request. The Tor exit node holds the resource request until the connection is established and then forwards it. This reduces the round-trip time between the client and server to one, plus a much smaller round-trip time between the Tor exit node and the server. On an encrypted connection, the client would send the first TLS negotiation packet (Client Hello) along with the connection establishment request, saving about one round trip.

Optimistic data was implemented in 2013 with changes to Tor and a hack into the browser SOCKS state machine. However, this hack was removed recently due to incompatibility with newer browser code. While we cannot re-implement the previous hack, we can test the utility of a full implementation through simulation.

#### 0-RTT TLS

TLS negotiation typically requires an extra round trip after connection establishment, during which the connection cannot be used to send resource requests. TLS 1.3 introduces 0-RTT session resumption, allowing clients to remember negotiated keys and send them back with session resumption tickets. Although there are security concerns regarding forward secrecy and replay attacks, researchers have proposed fixes, and some browsers and servers have enabled 0-RTT. We do not implement 0-RTT TLS but aim to evaluate its effect on resource and page loading times to understand its potential benefits for Tor Browser.

#### Redirection Database

Many pages in our dataset redirect the client upon initial navigation. For example, `youtube.com` redirects to `https://youtube.com`, which then redirects to `https://www.youtube.com`. Each redirection incurs multiple unnecessary round trips, significantly impacting page load times due to high latency. HTTPS Everywhere, included in Tor Browser, partly reduces the number of redirects by replacing URLs with their encrypted versions. However, it does not handle all redirects, especially those related to localization.

We propose that Tor Browser should use an extensive redirection database to reduce redirects, including handling localization. This database can be generated automatically by parsing redirection responses from web servers. The browser UI should inform the client when it skips redirects using the database, allowing the client to revert or disable inconvenient rules.

#### HTTP/2 Database

We investigate the use of a list of HTTP/2 servers for Tor clients to eliminate the extra round trip required for ALPN negotiation. Even if there are erroneous entries in the database, which should be rare, the impact on page load times is minimal. Our simulations confirm that further increasing resource loading capacity is not a concern for page loading on anonymity networks.

#### Prefetching Database

If the client knew which resources were associated with a page before parsing resource responses, it could request these resources as soon as page loading begins. This flattens the resource tree structure and eliminates the necessary round trips between resources and their children. Some resources, such as advertisements, cannot be effectively prefetched due to their dynamic nature. We generate a resource prefetching database from BLAST logs and attempt to prefetch any resource that occurs in almost all instances of a web page.

### Evaluation of Proposed Changes

We evaluate the proposed browser improvements using our simulator, both cumulatively and separately. The cumulative evaluation shows that each added feature, except the HTTP/2 database, clearly reduces both page and resource load times. Resource prefetching using a database produces the largest improvement, reducing mean page load time by 35%. All features combined produce a 61% decrease in mean page load time, from 18 seconds to 7.1 seconds.

#### TCP Fast Open

TCP Fast Open provides an advantage only if the client has already established a connection to the server and needs to establish another. We found that 18% of established connections benefited from TCP Fast Open, cutting down one round trip per connection.

#### Optimistic Data

Optimistic data effectively shortens the round trip for HTTP requests right after connection establishment to the much shorter round trip between the exit node and the web server. In our simulations, we reduced the round-trip time in this case to 0.1 seconds. Optimistic data significantly speeds up page loading without requiring additional infrastructure.

#### 0-RTT TLS

0-RTT TLS has been prototyped for session resumption, and there is a proposal to implement it in HTTP/3 without session resumption. If we discard HTTP/3 (true) 0-RTT TLS, the mean page load time with all other improvements increases from 7.1 seconds to 9.2 seconds.

#### Redirection Database

We built a redirection dataset using BLAST logs and modeled its use. The top 200 pages had a mean of 1.17 redirects, allowing us to save two or three round trips for each redirect. To simulate a failure rate, we only used redirection for the top 200 pages, simulating a 60% hit rate where only hits produce a benefit and misses do not affect page loading.

#### HTTP/2 Database

Using an HTTP/2 database to allow clients to benefit from HTTP/2 without waiting for an extra round trip produced almost no discernible benefit for page load times. This confirms that further increasing resource loading capacity is not a concern for page loading on anonymity networks.

#### Prefetching Database

We attempted to prefetch a resource if it occurred in 90% or more of the page's instances. For the top 10th to 200th pages, this means that all instances of the page must contain that resource. We only applied prefetching to the top 200 pages, achieving a 60% hit rate. Despite our conservative strategy, we prefetched a mean of 55.7 resources per page among our top 200 pages, with 58% of resources being prefetched. Only 1% of the resources prefetched using our database were false positives, so the additional bandwidth cost is quite low.

### Extensibility of Improvements

We checked if load time decreases were evenly spread across most pages or restricted to select pages. Over our dataset, we observed at least a 25% decrease in load time in 89% of page instances and at least a 50% decrease in load time in 68% of page instances. This suggests that most web pages benefited significantly to varying degrees, despite the fact that a third of page instances were not in the databases and thus did not benefit from those methods.

We also evaluated whether load times decreased disproportionately in certain types of pages, such as smaller pages or pages with fewer resources. The respective \( r \) correlation values for total page size, height of resource tree, and number of resources were 0.20, 0.03, and 0.08, respectively. These low correlation values suggest that our improvements were equally felt by all types of pages. Further examining total page size, we divided the dataset into two equal halves (above or below a total page size of 1.36 MB) and observed a 62% ± 24% improvement on the lower half and a 51% ± 31% improvement on the upper half. The small difference between these two sets suggests that even the largest pages benefit significantly from our features.

### Implementation and Maintenance

Our proposed features require changes to Tor Browser, primarily focused on the browser’s HTTP connection manager, which governs how connections are created and how resources are dispatched:

- **TCP Fast Open** is already available in Firefox but is currently disabled.
- **TLS session resumption** is available but used by limited servers due to potential risks. True 0-RTT TLS (without resumption) is anticipated in HTTP-over-QUIC.
- **Optimistic data** would likely require rewriting the connection manager’s state machine to recognize that resource requests should be sent earlier.
- **Redirection and prefetching databases** can be implemented and regularly updated by Tor directory servers.

### Conclusion

Our improvements, which reduce round-trip times and flatten resource tree structures, are generally felt across all pages. We anticipate that these improvements will extend beyond Alexa’s top 1000 pages, providing significant benefits to users of the Tor Browser.