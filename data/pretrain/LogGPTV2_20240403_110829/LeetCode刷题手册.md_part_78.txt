 return i + j
 tmp[i] = posY[i+l] - posY[i]
L000oo0o01 % ((t-( O { 
sat.tree[rightTreeIndex].count == 0 { 
sat.tree[rightTreeIndex].val] 
sat.tree[rightTreeIndex].count), 0
int){
(   a (a  s
 ( ( ‘o ado ' sua (eaax as) o
// Init define 
 } else if sat.tree[leftTreeIndex] .count == 0 &&
 } else if sat.tree[leftTreeIndex].count > O &&
 if sat.tree[leftTreeIndex].count > O && sat.tree[rightTreeIndex].count > 0 {
sat.tree[treeIndex] = SegmentItem{count: newCount, val: newValue}
 newCount, newValue := sat.merge(sat.tree[leftTreeIndex].count,
sat.pushUp(treeIndex, leftTreeIndex,
sat.buildSegmentTree(rightTreeIndex, midTreeIndex, right)
midTreeIndex,
if len(nums)>0{
sat.data, sat.tree = data, tree
data, tree := make([]int, len(nums)), make([]segmentItem, 4*len(nums))
for i := O; i  queryRight Il right >l,
su  uss // 3 a = 4aa j
if len(sat.data) > 0 { 
 return 2*index + 2 
 return 2*index + 1 
// merge query results
if queryLeft > midTreeIndex { 
return 0
 sat.queryInTree(rightTreeIndex, midTreeIndex, right, midTreeIndex,
 return sat.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft,
 return sat.queryInTree(rightTreeIndex, midTreeIndex, right, queryLeft,
 return 0 // represents a null node 
 return sat.queryInTree(0, O, len(sat.data)-l, left, right)
return 0
if sat.tree[treeIndex].count > O {
 return sat.tree[treeIndex].val 
---
## Page 812
For convenience, we'll call the person with label α, simply "person α".
money, and different levels of quietness.
题目
851. Loud and Rich
updateRight, val)
val）
updateRight, val)
updateRight, val)
update range 
点的区间不在是1eft ==right 所以这里判断需要增加等号的判断
sat.leftchild(treeIndex), sat.rightchild(treeIndex)
updateRight，val int） {
func (sat *SegmentAreaTree) updateInTree(treeIndex, left, right, updateLeft,
func (sat *SegmentAreaTree) Update(updateLeft, updateRight, val int) {
 sat.updateInTree(rightTreeIndex, midTreeIndex, right, updateLeft,
 if updateLeft right 丨lleft >= updateRight llright >1,
sat.pushup(treeIndex, 
// merge updates
sat.updateInTree(leftTreeIndex, left, midTreeIndex, updateLeft, updateRight,
 if left == right-l {
 return // out of range. escape.
 sat.updateInTree(O, O, len(sat.data)-1, updateLeft, updateRight, val)
return
sat.pushup(treeIndex, leftTreeIndex, rightTreeIndex) 
 sat.updateInTree(rightTreeIndex, midTreeIndex, right, updateLeft 
 sat.updateInTree(leftTreeIndex, left, midTreeIndex, updateLeft,
 sat.tree[treeIndex] .count = sat.merge(sat.tree[treeIndex] .count, val)
, leftTreeIndex, rightTreeIndex)
---
## Page 813
提示：
quiet[y] 最小的人）。
y的前提是，在所有拥有的钱不少于 person×的人中，person y是最安静的人（也就是安静值
如果 person ×的安静程度为 q，我们会说 quiet[x]=q。现在，返回答案 answer，其中 answer[x] 
person y 更有钱的话，我们会说 richeri] =[x, y] 。注意 richer 可能只是有效观察的一个子集。另外,
在一组N个人（编号为0,1,2,.,N-1）中，每个人都有不同数目的钱，
题目大意
Note:
Example 1:
money than person x.
with the smallest value of quiet [y] ), among all people who definitely have equal to or more
Now, return answer, where answer = y if y is the least quiet person (that is, the person 
Also, wellsay quiet = q if person x has quietness @.
that richer may only be a subset of valid observations.
We'llsay that richer[i] = [x, y] if person × definitely has more money than person Y. Note 
（quietness）。为了方便起见，我们将编号为×的人简称为"person×"。如果能够肯定 person×比
7. The observations in richer are all logically consistent.
9
S
2
1. 1  0 {
queue := []int{}
res := make([]int, len(quiet))
for -, edge := range richer {
indegrees := make([]int, len(quiet))
for i := range edges 
edges := make([][]int,len(quiet)) 
这一题还可以用拓扑排序来解答。将 richer 中描述的关系看做边，如果 ×> y，则α 指向 
不少于×的人中，y是最安静的人（也就是安静值 quiet[y] 最小的人）
对 richer 的观察在逻辑上是一致的。
0 quiet[ans[u]] ，则 ans[v] 的答案为
。将 quiet 看成权值。用一个数组记录答案，初始时 ans[i]=i。然后对原图做拓扑排序,
节点即可。
富有的所有的人。然后使用广度优先层次遍历，不断的使用富有的人，但是安静值更小的人更新子
richer[i] 都是不同的。
 res[i] =i 
 edges[i]= []int{}
richer[ij[o] != richer[i][1] 
for -, nl := range queue { 
nexts := []int{} 
if v == 0{ 
indegrees[n2]++ 
edges[nl] = append(edges[n1], n2)
nl,n2 := edge[0]，edge[1] 
 queue = append(queue, i)
---
## Page 815
我们把符合下列属性的数组A称作山脉：
题目大意
Note:
Example 2: 
 Example 1: 
 A[i+1] > ... > A[A.length - 1] .
Given an array that is definitely a mountain, return any i such that A[0] = 3
return res
queue = nexts
for .
 indegrees[n2]-- 
if indegrees[n2] == 0 { 
if quiet[res[n2]] > quiet[res[ni]] {
 nexts = append(nexts, n2)
 res[n2] = res[n1]
-, n2 := range edges[n1] {
---
## Page 816
代码
解题思路
提示：
func peakIndexInMountainArrayl(A []int) int {
·给出一个数组，
package leetcode
●3[-">>[ -yr>!>0 ·
//解法二二分
func peakIndexInMountainArray(A []int) int {
//解法一二分
●A.length >= 3 
for low A[i+1] >..>A[A.length
 mid := low + (high-low)>>1
if A[mid]A[mid-1]{
if A[mid]>A[mid+1] &A[mid] A[mid+1] && A[mid] > A[mid-1] {
mid := low + (high-low)>>1
，如果当前的数比左右两个数都大，即找到了山峰。其他的情况都在山坡上。这一题有两种写
low = mid + 1 
high = mid - 1
return mid 
0
，数组里面存在有且仅有一个"山峰"，(山峰的定义是，
下标i比i-1、i+1位置
---
## Page 817
Note:
Example 1:
How many car fleets will arrive at the destination?
If a car catches up to a car fleet right at the destination point, it will still be considered as one car
a single car is also a car fleet.
 A car fleet is some non-empty set of cars driving at the same position and same speed. Note that 
fleet.
The distance between these two cars is ignored - they are assumed to have the same position.
bumper at the same speed.
A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to 
miles towards the target along the road.
Each car i has a constant speed speed[i] (in miles per hour), and initial position position[i]
away.
N cars are going to the same destination along a one lane road. The destination is target miles
题目
853. Car Fleet
1. 0 A[mid+1]
//如果 mid 较大，则左侧存在峰值，high = m，如果 mid ＋1 较大，则右侧存在峰值，low 
 high = mid 
low = mid + 1
else {
 meeting each other at 12.
---
## Page 818
代码
解题思路
置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。即便一辆车在目的地才赶上
一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车以相同的速度紧接着行驶。此时，我
小时），从初始位置position[i（英里）沿车道驶向目的地。
问最后会有多少车队到达目的地？
们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。车队是一些由行驶在相同位 
题目大意
·从头往后扫描排序以后的数组，时间一旦大于前一个 car 的时间，就会生成一个新的 car fleet，最
·根据每辆车距离终点和速度，
7一个车队，它们仍然会被视作是同一个车队。
 5. All initial positions are different.
type car struct {
4. 0 <= position[i] < target
3. 0 < speed[i] <= 10 ^ 6
2. 0 < target <= 10 ^ 6
func carFleet(target int, position []int, speed []int) int {
Func
func (a ByPosition) Len() int
type ByPosition []car
// ByPosition define
import （
package leetcode
Func
position int
time 
"sort"
终计数加一即可。
大代表距离终点越近)