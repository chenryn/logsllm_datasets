8 Different versions of ps invokes different system calls to list ﬁles under a directory. In our
evaluation, the 3.2.7 version of ps uses the sys getdents system call while the version 3.2.3
uses another system call – sys getdents64. Both system calls work the same way except one
has a kernel hook sys call table[141] while another has sys call table[220].
34
Z. Wang et al
we consider them not related to the normal functionality of the chosen program and
thus simply ignore them. Further, we assume that the chosen security program as well
as those dependent libraries are not compromised. Tables 1, 2, and 3 contain our results,
including those speciﬁc execution contexts of related system calls. Encouragingly, for
each encountered HAP instruction, we can always locate the corresponding kernel
hook and our manual analysis on Linux kernel source code further conﬁrms that each
identiﬁed kernel hook is indeed from a meaningful kernel object or data structure.
More speciﬁcally, these three tables show that most identiﬁed kernel hooks are part
of jump tables deﬁned in various kernel objects. In particular, there are three main kernel
objects containing a large collection of function pointers that can be hooked for hiding
purposes: the system call table sys call table, the SELinux-related security operations
table selinux ops, as well as the capability-based operations table capability ops. There
are other kernel hooks that belong to a particular dynamic kernel object. One exam-
ple is the function pointer get unmapped area (in the sys mmap2 execution path of
Table 2) inside the mm kernel object that manages the process memory layout. Note
that this particular kernel hook cannot be determined by static analysis.
More in-depth analysis also reveals that an HAP instruction executed in different
execution contexts can be associated with different kernel hooks. One example is the
HAP instruction located in the system call dispatcher (Figure 1(a)) where around 300
system call service routines are called by the same HAP instruction. A kernel hook can
also be associated with multiple HAP instructions. This is possible because a function
pointer (contained in a kernel hook) can be invoked at multiple locations in a function.
One such example is selinux ops[47], a kernel hook that is invoked a number of times
in the sys open execution context of the ps command. In addition, we observed many
one-to-one mappings between an HAP instruction and its associated kernel hook. Un-
derstanding the relationship between HAP instructions and kernel hooks is valuable for
real-time accurate enforcement of kernel control-ﬂow integrity [14].
5.2 Case Studies
To empirically evaluate those identiﬁed kernel rootkits, we manually analyzed the
source code of eight real-world Linux rootkits (Table 4). For each rootkit, we ﬁrst
identiﬁed what kernel hooks are hijacked to implement a certain hiding feature and
then checked whether they are a part of the results shown in Tables 1, 2, and 3. It is
encouraging that for every identiﬁed kernel hook9, there always exists an exact match
in our results. In the following, we explain two rootkit experiments in detail:
The Adore Rootkit.
This rootkit is distributed in the form of a loadable kernel
module. If activated, the rootkit will implant 15 kernel hooks in the system call table
by replacing them with its own implementations. Among these 15 hooks, only three of
them are responsible for hiding purposes10. More speciﬁcally, two system call table en-
9 Our evaluation focuses on those kernel data hooks. As mentioned earlier, for kernel code
hooks, they can be scattered over every kernel instruction in the corresponding system call
execution path.
10 The other 12 hooks are mainly used to provide hidden backdoor accesses. One example is the
sys call table[6] (sys close), which is hooked to allow the attacker to escalate the privilege to
root without going through the normal authorization process.
Countering Persistent Kernel Rootkits through Systematic Hook Discovery
35
Table 4. Kernel hooks used by real-world rootkits (
‡
means a code hook)
kernel hooks based on the hiding features
rootkit
adore
adore-ng
hideme.vfs
override
ﬁle-hiding
process-hiding
sys call table[141]
sys call table[220]
sys call table[141]
sys call table[220]
ext3 dir operations[6] proc root operations[6]
proc root operations[6]
‡
sys getdents64
sys call table[220]
Synapsys-0.4 sys call table[141]
sys call table[141]
Rial
sys call table[220]
sys call table[141]
sys call table[141]
knark
kis-0.9
sys call table[141]
sys call table[220]
sys call table[141]
sys call table[141]
sys call table[220]
sys call table[141]
network-hiding
sys call table[4]
tcp4 seq fops[12]
N/A
sys call table[3]
sys call table[4]
sys call table[3], sys call table[5]
sys call table[6]
sys call table[3]
tcp4 seq fops[12]
tries – sys getdents (sys call table[141]) and sys getdents64 (sys call table[220]) – are
hijacked for hiding ﬁles and processes while another one – sys write (sys call table[4])
– is replaced to hide network activities related to backdoor processes protected by
the rootkit. A customized user-space program called ava is provided to send hiding
instructions to the malicious LKM so that certain ﬁles or processes of attackers’ choices
can be hidden. All these three kernel hooks are uncovered by our system, as shown in
Tables 1, 2, and 3, respectively.
The Adore-ng Rootkit. As the name indicates, this rootkit is a more advanced suc-
cessor from the previous adore rootkit. Instead of directly manipulating the system call
table, the adore-ng rootkit subverts the jump table of the virtual ﬁle system by replacing
the directory listing handler routines with its own ones. Such replacement allows it
to manipulate the information about the root ﬁle system as well as the /proc pseudo-
ﬁle system to achieve the ﬁle-hiding or process-hiding purposes. More speciﬁcally, the
readdir function pointer (ext3 dir operations[6]) in the root ﬁle system operations table
is hooked for hiding attack ﬁles, while the similar function (proc root operations[6])
in the /proc ﬁle system operations table is hijacked for hiding attack processes. The
fact that the kernel hook ext3 dir operations[6] is located in the loadable module space
(ext3.ko) indicates that this rootkit is more stealthier and these types of kernel hooks are
much more difﬁcult to uncover than those kernel hooks at static memory locations (e.g.,
the system call table). Once again, our system successfully identiﬁed these stealth kernel
hooks, conﬁrming our observation in Section 1. Further, the comparisons between those
hooks used by rootkits (Table 4) and the list of hooks from our system (Tables 1, 2,
and 3) indicate that only a small subset of them have been used.
6 Discussion
Our system leverages the nature of persistent kernel rootkits to systematically discover
those kernel hooks that can potentially be exploited for hiding purposes. However, as
36
Z. Wang et al
a rootkit may implant other kernel hooks for other non-hiding features as its payload,
our current prototype is ineffective in identifying them. However, the prototype can
be readily re-targeted to those non-hiding features and apply the same techniques to
identify those kernel hooks. Also, our system by design only works for persistent kernel
rootkits but could be potentially extended for other types of rootkits as well (e.g,.
persistent user-level rootkits).
Our current prototype is developed to identify those kernel hooks related to the
execution of a chosen security program, either an anti-rootkit software or a system
utility program. However, with different programs as the input, it is likely that different
running instances will result in different sets of kernel hooks. Fortunately, for the rootkit
author, he faces the challenge in hiding itself from all security programs. As a result, our
defense has a unique advantage in only analyzing a single instantiated execution path
of a rootkit-detection program. In other words, a persistent kernel rootkit cannot evade
its detection if the hijacked kernel hooks are not a part of the corresponding kernel-side
execution path. There may exist some “in-the-wild” rootkits that take chances in only
evading selected security software. However, in response, we can monitor only those
kernel hooks related to an installed security software. As mentioned earlier, to hide
from it, persistent kernel rootkits will hijack at least one of these kernel hooks.
Meanwhile, it may be argued that our results from monitoring a running instance
of a security program could lead to false positives. However, the fact that these kernel
hooks exist in the kernel-side execution path suggest that each one could be equally
exploited for hooking purposes. From another perspective, we point out that the scale
of our results is manageable since it contains tens, not hundreds, of kernel hooks.
Finally, we point out that our current prototype only considers those kernel objects
or variables that may contain kernel hooks of interest to rootkits. However, there also
exist other types of kernel data such as non-control data [9] (e.g., the uid ﬁeld in
the process control block data structure or the doubly-linked process list), which can
be manipulated to contaminate kernel execution. Though they may not be used to
implement a persistent kernel rootkit for control-ﬂow modiﬁcations, how to extend the
current system to effectively address them (e.g., by real-time enforcing kernel control
ﬂow integrity [10]) remains as an interesting topic for future work.
7 Related Work
Hook Identiﬁcation. The ﬁrst area of related work is the identiﬁcation of kernel hooks
exploitable by rootkits for hiding purposes. Particularly, HookFinder [23] analyzes a
given rootkit example and reports a list of kernel hooks that are being used by the mal-
ware. However, by design, it does not lead to the identiﬁcation of other kernel hooks that
are not being used but could still be potentially exploited for the same hiding purposes.
From another perspective, SBCFI [14] performs static analysis of Linux kernel source
code and aims to build a kernel control-ﬂow graph that will be followed by a legitimate
kernel at run-time. However, the graph is not explicitly associated with those kernel
hooks for rootkit hiding purposes. Furthermore, the lack of run-time information could
greatly limit its accuracy. In comparison, our system complements them with the unique
capability of exhaustively deriving those kernel hooks for a given security program,
which could be potentially hijacked by a persistent rootkit to hide from it.
Countering Persistent Kernel Rootkits through Systematic Hook Discovery
37
Hook-based Rootkit Detection. The second area of related work is the detection
of rootkits based on the knowledge of those speciﬁc hooking points that may be used
by rootkits. For example, existing anti-rootkit tools such as VICE [8], IceSword [16],
System Virginity Veriﬁer [17] examine known memory regions occupied by these spe-
ciﬁc hooking points to detect any illegitimate modiﬁcation. Our system is designed
with a unique focus in uncovering those speciﬁc kernel hooks. As a result, they can be
naturally combined together to build an integrated rootkit-defense system.
Other Rootkit Defenses. There also exist a number of recent efforts [12,13,15,20,21]
[22] that defend against rootkits by detecting certain anomalous symptoms likely caused
by rootkit infection. For example, The Strider GhostBuster system [21] and VMwatcher
[12] apply the notion of cross-view detection to expose any discrepancy caused by
stealth rootkits. CoPilot [15] as well as the follow-up work [13] identify rootkits by
detecting possible violations in kernel code integrity or semantic constraints among
multiple kernel objects. SecVisor [20] aims to prevent unauthorized kernel code from
execution in the kernel space. Limbo [22] characterizes a number of run-time features
that can best distinguish between legitimate and malicious kernel drivers and then
utilizes them to prevent a malicious one from being loaded into the kernel. Our system
is complementary to these systems by pinpointing speciﬁc kernel hooks that are likely
to be chosen by stealth rootkits for manipulation.
8 Conclusion
To effectively counter persistent kernel rootkits, we have presented a systematic ap-
proach to uncover those kernel hooks that can be potentially hijacked by them. Our
approach is based on the insight that those rootkits by their nature will tamper with
the execution of deployed rootkit-detection software. By instrumenting and recording
possible control-ﬂow transfer instructions in the kernel-side execution paths related to
the deployed security software, we can reliably derive all related kernel hooks. Our
experience in building a prototype system as well as the experimental results with real-
world rootkits demonstrate the effectiveness of the proposed approach.
Acknowledgments
The authors would like to thank the anonymous reviewers for their insightful comments
that helped to improve the presentation of this paper. This work was supported in part
by NSF Grants CNS-0716376, CNS-0524286, and CCF-0728771.
References
1. The adore Rootkit, http://lwn.net/Articles/75990/
2. The Hideme Rootkit,
http://www.sophos.com/security/analyses/
viruses-and-spyware/trojhidemea.html
38
Z. Wang et al
3. The Strange Decline of Computer Worms,
http://www.theregister.co.uk/2005/03/17/f-secure websec/
print.html
4. VMware, http://www.vmware.com/
5. Agrawal, H., Horgan, J.R.: Dynamic Program Slicing. In: Proceedings of ACM SIGPLAN
1990 Conference on Programming Language Design and Implementation (1990)
6. Bellard, F.: QEMU, a Fast and Portable Dynamic Translator. In: Proc. of USENIX Annual
Technical Conference 2005 (FREENIX Track) (July 2005)
7. Butler, J.: Rˆ2: The Exponential Growth of Rootkit Techniques,
http://www.blackhat.com/presentations/bh-usa-06/
BH-US-06-Butler.pdf
8. Butler, J.: VICE 2.0,
http://www.infosecinstitute.com/blog/README VICE.txt
9. Chen, S., Xu, J., Sezer, E.C., Gauriar, P., Iyer, R.: Non-Control-Data Attacks Are Realistic
Threats. In: Proc. USENIX Security Symposium (August 2005)
10. Grizzard, J.B.: Towards Self-Healing Systems: Re-Establishing Trust in Compromised
Systems. Ph.D. thesis, Georgia Institute of Technology (May 2006)
11. Jiang, X., Wang, X.: “Out-of-the-Box” Monitoring of VM-Based High-Interaction Honey-
pots. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp.
198–218. Springer, Heidelberg (2007)
12. Jiang, X., Wang, X., Xu, D.: “Out-of-the-Box” Semantic View Reconstruction. In: Proceed-
ings of the 14th ACM Conference on Computer and Communications Security (CCS 2007)
(October 2007)
13. Petroni, N., Fraser, T., Walters, A., Arbaugh, W.: An Architecture for Speciﬁcation-Based
Detection of Semantic Integrity Violations in Kernel Dynamic Data. In: Proc. of the 15th
USENIX Security Symposium (August 2006)
14. Petroni, N., Hicks, M.: Automated Detection of Persistent Kernel Control-Flow Attacks. In:
Proc. of ACM CCS 2007 (October 2007)
15. Petroni, N.L., Fraser, T., Molina, J., Arbaugh, W.A.: Copilot - a Coprocessor-based Kernel
Runtime Integrity Monitor. In: Proc. of the 13th USENIX Security Symposium (August 2004)
IceSword, http://www.antirootkit.com/software/IceSword.htm,
16. PJF.
http://pjf.blogcn.com/
17. Rutkowska, J.: System Virginity Veriﬁer,
http://invisiblethings.org/papers/hitb05 virginity verifier.
ppt
18. Rutkowska, J.: Rootkits vs. Stealth by Design Malware,
http://invisiblethings.org/papers/rutkowska bheurope2006.ppt
19. sd.: Linux on-the-ﬂy kernel patching without LKM. Phrack 11(58), article 7 of 15 (2001)
20. Seshadri, A., Luk, M., Qu, N., Perrig, A.: SecVisor: A Tiny Hypervisor to Guarantee Lifetime
Kernel Code Integrity for Commodity OSes. In: Proc. of the ACM SOSP 2007 (October 2007)
21. Wang, Y., Beck, D., Vo, B., Roussev, R., Verbowski, C.: Detecting Stealth Software with
Strider GhostBuster. In: Proc. of the 2005 International Conference on Dependable Systems
and Networks (June 2005)
22. Wilhelm, J., Chiueh, T.-c.: A Forced Sampled Execution Approach to Kernel Rootkit
Identiﬁcation. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637,
pp. 219–235. Springer, Heidelberg (2007)
23. Yin, H., Liang, Z., Song, D.: HookFinder: Identifying and Understanding Malware Hooking
Behaviors. In: Proc. of ISOC NDSS 2008 (February 2008)
24. Zhang, X., Gupta, R., Zhang, Y.: Precise Dynamic Slicing Algorithms. In: Proc. of the
IEEE/ACM International Conference on Software Engineering (May 2003)