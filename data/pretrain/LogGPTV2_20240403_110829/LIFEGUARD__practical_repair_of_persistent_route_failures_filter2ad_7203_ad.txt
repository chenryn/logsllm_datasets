Georgia Tech’s main provider. In §5.2 and §7.1, we evaluate tech-
niques to poison even these large ASes. For each of the remaining
harvested ASes,3 we ﬁrst went from a baseline of O to a poisoned
announcement O-A-O, then repeated the experiment starting from
a baseline of O-O-O. We kept each announcement in place for 90
minutes to allow convergence and to avoid ﬂap dampening effects.
For the duration of the experiments, we also announced an unpoi-
soned preﬁx to use for comparisons.
5.1 Efﬁcacy
Do ASes ﬁnd new routes that avoid a poisoned AS? We monitored
BGP updates from public BGP route collectors to determine how
many ASes found an alternate path after we poisoned an AS on
their preferred path. There were 132 cases in which an AS peering
with a route collector was using a path through one of the ASes
we poisoned. In 102 of the 132 cases (77%), the route collector
peer found a new path that avoided the poisoned AS. Two-thirds of
the cases in which the peer could not ﬁnd a path were instances in
which we had poisoned the only provider of a stub AS.
Do alternate policy-compliant routes exist in general? We ana-
lyzed a large AS topology to show that, in the common case, al-
ternate paths exist around poisoned ASes. The topology, along
3We announced our experiments on the NANOG mailing list and
allowed operators to opt out their ASes. None did. A handful opted
out of an earlier Georgia Tech study, and we honored their list.
Figure 5: For our EC2 dataset, residual duration after outages have
persisted for X minutes. The graph shows that, once a problem has
persisted for a few minutes, it will most likely persist for at least a few
more minutes unless we take corrective action.
the pruning. Since Internet paths are generally stable [37], the fail-
ing path will often have been used historically, and there will often
be few historical paths between the source and destination.
Because both historical reverse paths from unresponsive forward
hops traversed Rostelecom, it seems highly likely this is the point
of failure. This conclusion is further supported by the fact that
all unreachable hops except Rostelecom responded to pings from
other vantage points, indicating that their other outgoing paths still
worked. We provide details on this and other examples at http:
//lifeguard.cs.washington.edu, and we provide details
on LIFEGUARD’s failure isolation in a tech report [32].
4.2 Deciding to Start and Stop Poisoning
Deciding whether to poison: As seen in Fig. 1, most outages re-
solve quickly. For the system to work effectively, it would be help-
ful to differentiate between outages that will clear up quickly and
those that will persist.
If routing protocols will quickly resolve
a problem, then it would be better to wait, to avoid causing fur-
ther routing changes. If the protocols will not restore connectivity
quickly on their own, then poisoning may be a better approach.
The following analysis of our EC2 study (§2.1) shows that it is
possible to differentiate between these cases with high likelihood.
Fig. 5 shows the residual duration of these outages, given that they
have already lasted for X minutes. The median duration of an out-
age in the study was only 90 seconds (the minimum possible given
the methodology). However, of the 12% of problems that persisted
for at least 5 minutes, 51% lasted at least another 5 minutes. Fur-
ther, of the problems that lasted 10 minutes, 68% persisted for at
least 5 minutes past that. LIFEGUARD triggers isolation after mul-
tiple rounds of failed pings, and it takes an average of 140 seconds
to isolate a reverse path outage. If a problem persists through both
those stages, then the results suggest that the problem is likely to
persist long enough to justify using poisoning to ﬁx it. We will
show in §5.2 that poisoned routes converge within a few minutes
in almost all cases, with little loss during the convergence period.
So, if there are alternative paths that avoid the problem LIFEGUARD
locates, our system should quickly restore connectivity.
Long-lasting problems account for much of the total unavailabil-
ity. As a result, even if LIFEGUARD takes ﬁve minutes to identify
and locate a failure before poisoning, and it then takes two minutes
for routes to converge, we can still potentially avoid 80% of the
total unavailability in our EC2 study. In §5.1, we will show that
it is possible to determine (with high likelihood) whether alternate
policy compliant paths will exist before deciding to poison an AS.
If no paths exist, LIFEGUARD does not attempt to poison the AS.
 0.1 1 10 100 1000 0 5 10 15 20 25 30Residual durationper failure (minutes)Minutes elapsed since start of failuresMeanMedian25thCriteria
Effectiveness (§5.1)
Disruptiveness (§5.2)
Accuracy (§5.3)
Scalability (§5.4)
Summary
Most edge networks have routes that avoid poisoned
ASes, and we can calculate which do a priori
Working routes that already avoid the problem AS
reconverge quickly after poisoning
Minimal loss occurs during convergence
Locates failures as if it had traceroutes from both ends Consistent results for 93% of inter-PlanetLab failures
Isolates problems that traceroute alone misdiagnoses
Quickly isolates problems with reasonable overhead
Reasonably small additional update load for
addressing most of observed unavailability
40% of cases differ from traceroute
140 s for poisoning candidates, 280 probes per failure
< 1% if 1% of ISPs use LIFEGUARD
< 10% if 50% of ISPs use LIFEGUARD
Experimental Result
77% of poisons from BGP-Mux
90% of poisons in large-scale simulation
95% of paths converge instantly
Less than 2% packet loss in 98% of cases
Table 1: Key results of our LIFEGUARD evaluation, demonstrating its viability for addressing long-duration outages.
with AS relationships, is from a dataset combining public BGP
feeds with more than 5 million AS paths between BitTorrent (BT)
peers [9]. To simulate poisoning an AS A on a path from a source
S to an origin O, we remove all of A’s links from the topology. We
then check if S can restore connectivity while avoiding A (i.e., a
path exists between S and O that obeys export policies).
We check policies using the three-tuple test [25], as in §2.2. This
approach may miss alternate paths if the valley-free assumption is
too strict,4 and rarely used backup paths may not be in our topology.
Conversely, it may identify valley-free paths not used in practice.
To establish the validity of this methodology, we simulated the
Georgia Tech poisonings. In 92.5% of cases, the simulation found
an alternate path if and only if the AS found such a path following
our actual poisoning. In the remaining 7.5% of cases, the simula-
tion found an alternate path, but in practice the AS failed to ﬁnd
one. In these cases, the source was an academic network connected
to both a commercial provider and an academic provider (which
only provides routes to academic destinations). These connections
made the AS multi-homed in our simulation. In practice, however,
the AS seems to reject routes from its commercial provider if the
route contained an academic AS, and we had poisoned one.
Having established that our simulation closely predicts the re-
sults of actual poisonings, we simulated poisoning ASes on the BT
and BGP feed paths. For each AS path with length greater than 3
(i.e., traversing at least one transit AS in addition to the destina-
tion’s provider), we iterated over all the transit ASes in the path
except the destination’s immediate provider and simulated poison-
ing them one at a time.5 An alternate path existed in 90% of the
10M cases. We then simulated poisoning the failures isolated by
LIFEGUARD in June 2011. Alternate paths existed in 94% of them.
5.2 Disruptiveness
How quickly do paths converge after poisoning? We used updates
from the BGP collectors to measure convergence delay after poi-
soning. We will show that, in most cases, if an AS was not routing
through the AS we poisoned, it re-converges essentially instantly
to its original path, requiring only a single update to pass on the
poison. Global convergence usually takes at most a few minutes.
First, we assess how quickly ASes that were using the poisoned
AS settle on a new route that avoids it. We also assess how quickly
routes converge for ASes that were not using the poisoned AS. As
explained above, we poisoned each harvested AS twice each using
different pre-poisoning baseline paths. After each announcement,
for each AS that peers with a route collector, we measured the delay
from when the AS ﬁrst announced an update to the route collector
4It is well known that not all paths are valley-free in practice, and
we observed violations in the BitTorrent traceroutes.
5A multi-homed destination can use selective advertising to avoid
a particular provider. A single-homed destination can never avoid
having paths traverse its provider.
Figure 6: Convergence time for route collector peer ASes after poi-
soned announcements. A data point captures the convergence for one
peer AS after one poisoned announcement. Change vs. no change in-
dicates if the peer had to change its path because it had been routing
through the poisoned AS. For Prepend, the baseline announcement be-
fore poisoning was O-O-O, whereas for No prepend it was O. The poi-
soned announcement was always O-A-O. Prepending reduces path ex-
ploration by keeping announcement length consistent.
to when it announced its stable post-poisoning route. We leave out
(route collector peer, poisoned AS) pairs if the peer AS did not have
a path to the LIFEGUARD preﬁx following the poisoning.
As seen in Fig. 6, a baseline announcement of O-O-O greatly
speeds convergence. More than 95% of the time, ASes that were
not using the poisoned AS converged essentially instantly upon re-
ceiving the poisoned update, as they did not need to change their
path, and 99% of them converged within 50 seconds (Prepend, No
Change line).
In comparison, if we simply announce O as the
baseline before poisoning, less than 70% of the unaffected ASes
converged instantly, and 94% converged within 50 seconds (No
Prepend, No Change line). Similarly, using O-O-O as the baseline
helps ASes that had been routing via A settle on a new route faster:
96% converged within 50 seconds, compared to only 86% if we
use O as the baseline. Prepending keeps the announcements a con-
sistent length, which reduces path exploration for ASes not routing
through A. In fact, with prepending, 97% of unaffected ASes made
only a single update, informing neighbors only of the insertion of
the poisoned AS A into the route. Without prepending, only 64%
of these ASes made only one update. The other 36% explored al-
ternatives before reverting back to their original path.
These graphs capture per-AS convergence. Because announce-
ments need to propagate across the Internet and are subject to pro-
tocol timers as they do so, different ASes receive a poisoned an-
nouncement at different times.
We also assessed how long global convergence took, from the
time the ﬁrst router collector receives an update for our preﬁx until
all route collector peer ASes had converged to stable routes. With
prepending, global convergence took at most 91 seconds in the me-
dian case, at most two minutes for 75% of poisonings, and at most
200s in 90% of poisonings. In contrast, without prepending, the
0.99990.9990.990.9 0 50 100 150 200 250 300 350 400 450 500Cumulative Fraction ofConvergences (CDF)Peer Convergence Time (s)Prepend, no changeNo prepend, no changePrepend, changeNo prepend, change50th, 75th, and 90th percentiles are 133s, 189s, and 226s. Com-
pared to the delay following a poisoning, it generally takes slightly
less time for routes to converge globally when we remove the poi-
son and revert to the baseline announcement. Because most ASes
that were not using the poisoned AS reconverge to their original
path without exploring other options, we would not expect them to
experience transient loss during the global convergence period.
How much loss accompanies convergence? Our results indicate the
packet loss during convergence is minimal. We calculated loss rate
during convergence following our poisonings that used a baseline
of O-O-O. Every ten seconds for the duration of the experiment,
we issued pings from the poisoned LIFEGUARD preﬁxes to all 308
working PlanetLab sites. In general, many of the sites were not
routing via any particular poisoned AS, and so this experiment lets
us evaluate how much we disrupt working paths. We ﬁltered out
cases in which loss was clearly due to problems unrelated to poi-
soning, and we excluded a PlanetLab site if it was completely cut
off by a particular poisoning. Following 60% of poisonings, the
overall loss rate during the convergence period was less than 1%,
and 98% of poisonings had loss rates under 2%. Some convergence
periods experienced brief spikes in loss, but only 2% of poisonings
had any 10 second round with a loss rate above 10%.
Can poisoning shift routes off an AS link without completely dis-
abling either AS? We demonstrate selective poisoning using two
BGP-Mux sites, University of Washington (UWash) and University
of Wisconsin (UWisc). Paths from most PlanetLab nodes to UWash
pass through the Internet2 (I2) Seattle PoP, then to Paciﬁc North-
west Gigapop, and to UWash. Most PlanetLab paths to UWisc pass
through I2’s Chicago PoP, then through WiscNet, before reaching
UWisc. So, the BGP-Mux AS has UWash and UWisc as providers,
and they connect via disjoint paths to different I2 PoPs.
We tested if we could shift trafﬁc away from the I2 Chicago PoP,
supposing the link to WiscNet experienced a silent failure. We ad-
vertised the same two preﬁxes from UWash and UWisc. We an-
nounced the ﬁrst preﬁx unpoisoned from both. We poisoned I2 in
UWisc’s announcements of the second preﬁx, but had UWash an-
nounce it unpoisoned.
First, we show that paths that were not using I2 would not be
disrupted. We looked at paths to the two preﬁxes from 36 RIPE
RIS BGP peers. For 33 of them, the paths to the two preﬁxes were
identical and did not use I2. The other three ASes routed to the
unpoisoned preﬁx via I2 and WiscNet. For the selectively poisoned
preﬁx, they instead routed via I2 and PNW Gigapop, as expected.
We then compare traceroutes from PlanetLab hosts to the two
preﬁxes, to show that paths through I2 avoid the “problem.” For the
unpoisoned preﬁx, over 100 PlanetLab sites routed through I2 to
WiscNet. Focusing on just these PlanetLab sites, we assessed how
they routed towards the other preﬁx, which we selectively poisoned
for I2 from UWisc. For that preﬁx, all the sites avoided the link
from I2 to WiscNet. All but three of the sites routed via PNW
Gigapop and UWash, as we intended. The remaining three – two
sites in Poland and one in Brazil – used Hurricane Electric to reach
UWisc. Excepting these three sites, selective poisoning allowed
us to shift paths within a targeted network without changing how
networks other than the target routed.