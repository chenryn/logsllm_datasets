feature two-way SSL validation. Note also that all products can be synced
according to a Sync Plan (essentially a schedule)—however, for this example, we
will simply perform a manual sync. The screen should look something like the
following screenshot when completed:
[ 245 ]
Patching with Katello Chapter 9
5. With the high-level product definition completed, we can now create our CentOS
7 repository under it by clicking on the New Repository button:
[ 246 ]
Patching with Katello Chapter 9
6. Complete the repository details on the screen provided. Set the Type field
as yum and enter the URL of the upstream repository in the appropriate field (this
is the same as the --feed parameter when using Pulp from the command line):
[ 247 ]
Patching with Katello Chapter 9
7. Scrolling down the same screen, ensure that Publish via HTTP is ticked and
associate the GPG uploaded previously, as shown in the following screenshot:
[ 248 ]
Patching with Katello Chapter 9
8. For our example, we'll immediately kick off a sync of this repository by putting a
tick against it in the table of repositories, and then clicking on the Sync
Now button, as shown in the following screenshot:
9. The synchronization begins in the background immediately—you can always
check on its progress (and kick off further manual synchronizations) by
navigating to the Content | Sync Status page:
[ 249 ]
Patching with Katello Chapter 9
10. While the sync process completes, let's go and create some lifecycle
environments.
Note that while you can have discrete products and separate repositories
within them, lifecycle environments are global and apply to everything. In
an enterprise context, this makes sense, as you would most likely still have
a Development, Test, and Production environment regardless of which
underlying technologies you use.
From the menu bar, navigate to Content | Lifecycle Environments Paths, and
then click the Create Environment Path button:
11. Create an initial environment called Development by following the instructions
onscreen. You should be presented with a screen such as the one shown in the
following screenshot:
[ 250 ]
Patching with Katello Chapter 9
12. Now, we'll add Testing and Production environments so that our example
enterprise has a logical flow through these three environments. Click the Add
New Environment button, and then add each in turn, ensuring they have the
correct Prior Environment set to maintain the correct sequence. The following
screenshot shows an example of creating the Production environment as the
next step from the Testing one:
[ 251 ]
Patching with Katello Chapter 9
13. The final configuration should look like the following example screenshot:
Once our sync process has completed and we have created our environments, we can
proceed to the final part of our RPM repository setup—Content Views. In Katello,
a content view is a user-defined amalgamation of the various content forms that can be
ingested, version-controlled, and distributed to a given environment. This is best explained
through a practical example.
When we used Pulp alone, we created a repository called centos7-07aug19. When we
wanted to test out an update released a day later, we then created a second repository
called centos7-08aug19. Although this works, and we demonstrated how Pulp
deduplicates packages and saves on disk space while neatly publishing apparently separate
repositories, you can quickly see how this mechanism for content management could
become unwieldy, especially at enterprise scale, with numerous environments and some
months (or years) worth of snapshots to manage.
This is where Content Views come to the rescue. Although we have mirrored the CentOS
7 OS repository here, suppose we had mirrored the updates one. With Content Views, we
don't need to create a new product or repository to test out updates. Instead, the workflow
is, at a high level, as follows:
1. Create a product and a corresponding repository and perform sync (for example,
on August 7, 2019).
2. Create a content view containing the repository created in the previous step.
3. Publish the content view on August 7, 2019—this creates a version-numbered
snapshot of this repository on this date (for example, version 1.0).
[ 252 ]
Patching with Katello Chapter 9
4. Promote the content view to the Development environment. Perform testing,
and when validated, promote it to testing. Repeat the cycle to reach Production.
This can all happen asynchronously to the next steps.
5. On August 8, perform another sync of the repository created in step 1 (if you have
an overnight sync happening automatically through Sync Plan, this will
already be done for you on the morning of the 8th).
6. Publish the content view on August 8, 2019, following the sync. This creates a +1
version of the repository for this date (for example, version 2.0).
7. Now, at this stage, you have snapshots of the CentOS 7 channel on both August 7
and 8. However, all servers will still receive updates from the August 7 channel.
8. Promote the Development environment to version 2.0. The machines in
the Development environment now receive (with no additional configuration
required on them) the repository snapshot of August 8.
9. The Testing and Production environments, which were not promoted to this
version, still receive packages from the August 7 snapshot.
In this way, Katello makes managing numerous versions (snapshots) of repositories easy
across differing environments, with the added bonus that the repository configuration on
each host always remains the same, removing the need to push new repository information
through Ansible as we did with Pulp.
Let's step through an example of the preceding process in our demo Katello environment:
1. First of all, create a new content view for the preceding process.
2. Navigate to Content | Content Views and click on the Create New View button:
[ 253 ]
Patching with Katello Chapter 9
3. For our purposes, the new content view only requires a Name and a Label, such
as those shown in the following screenshot:
[ 254 ]
Patching with Katello Chapter 9
4. Once you have clicked on the Save button, navigate to the Yum Content tab
within the new content view, and ensure the Add sub-tab is selected. Tick the
repositories you want to add to the content view (in our simple demo, we only
have one CentOS 7 repository, so select that), and click on the Add
Repositories button:
[ 255 ]
Patching with Katello Chapter 9
5. Now, navigate back to the Versions tab and click the Publish New
Version button. This creates the hypothetical August 7 version we discussed
earlier. Note that Publish and Promote operations take an enormous amount of
disk I/O and will be very slow, especially on slow mechanically-backed storage
arrays. Although there are no published requirements for I/O performance for
either Katello or Red Hat Satellite 6, they perform best on flashbacked storage, or
if this is not available, fast mechanical storage that is not shared with other
devices. The following screenshot shows the Publish New Version button being
clicked for the CentOS7-CV content view:
[ 256 ]
Patching with Katello Chapter 9
6. The Publish operation is asynchronous and you can see it complete on this
screen, although if you navigate away, it will still complete. You can see that it is
automatically numbered Version 1.0—this numbering is, at the time of
writing, automatic and you cannot choose your own version numbering. You
can, however, add notes to each published version, which can be incredibly
useful to track which version is which and why they were created. This is highly
recommended. The following screenshot shows the promotion in progress on our
Version 1.0 environment:
7. Once the Publish operation is completed, the Promote button (shown grayed
out in the preceding screenshot) will become active. You will note that this
version is automatically published to the Library environment—the latest
version of any content view is always automatically promoted to this
environment.
[ 257 ]
Patching with Katello Chapter 9
8. To simulate the August 8 snapshot we discussed earlier, let's perform a
second publish of this content view. This will produce a Version
2.0 environment, which can then be promoted to
the Development environment by clicking on the Promote button and selecting
the required environment. The following screenshot shows our two versions,
with Version 1.0 available to only the Production environment and Version
2.0 available to the Development environment (and the built-in Library one).
Note that as we have not promoted the Testing environment to either version
and that no packages are available to machines in the Testing environment. You
must promote it to all environments that require packages—the following
screenshot shows the two versions we have published and which environments
are associated with which versions:
[ 258 ]
Patching with Katello Chapter 9
9. In the following screenshot, the promotion process is shown for reference—this is
how you would promote the Production environment to Version 2.0:
The one remaining piece of the puzzle here is to configure the clients to receive packages
from the Katello server. Here, we will perform a simple manual integration, as this method
is common to both DEB- and RPM-based packages and hence supports a common
approach across the enterprise. The process for distributing RPM packages from Katello
using the subscription-manager tool and the Katello agent is well documented and is
left as an exercise for you.
The official Katello documentation for Activation Keys is a good place to
start: https:/​/​theforeman.​org/​plugins/​katello/​3.​12/​user_​guide/
activation_​keys/​index.​html
[ 259 ]
Patching with Katello Chapter 9
To make use of the content we have published in this example, machines in the
Development environment would have a repository file with content such as this:
[centos-os]
name=CentOS-os
baseurl=http://katello.example.com/pulp/repos/HandsOn/Development/CentOS7-C
V/custom/CentOS7/CentOS7-os/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
Your base URL will surely vary—at the very least, your Katello hostname will be different.
RPM-based repositories published and promoted in Katello are generally available at the
following path:
http://KATELLOHOSTNAME/pulp/repos/ORGNAME/LIFECYCLENAME/CONTENTVIEWNAME/cus
tom/PRODUCT/REPO
Here, we have the following:
KATELLOHOSTNAME: The hostname of your Katello server (or nearest
Capsule/Proxy if you are using them)
ORGNAME: The name of the Katello organization in which your Content
View lives—we defined ours as HandsOn during the installation process
LIFECYCLENAME: The name of the Lifecycle Environment, for
example, Development
CONTENTVIEWNAME: The name you gave your Content View
PRODUCT: The name you gave your Product
REPO: The name you gave to your repository within the Product
This makes the URLs entirely predictable and easy to deploy to target machines using
Ansible, just as we did in the previous chapter regarding Pulp. Note that accessing the
repositories over HTTPS from Katello requires the installation of SSL certificates for trust
validation, which is beyond the scope of this chapter—instead, we will simply make use of
plain HTTP.
[ 260 ]
Patching with Katello Chapter 9
As the lifecycle environment name remains constant, no matter whether we sync, publish,
or promote an environment, the repository URL, as shown previously, remains constant
and hence we never have to perform client configuration work even when a new package
repository snapshot is published. This is a significant advantage over Pulp, where we
would have to push a new configuration using Ansible every time a new version is created.
Once the repository configuration has been built as shown previously, you can patch your
systems in the normal manner. This can be done as follows:
Manually, using a command such as yum update on each machine
Centrally, using an Ansible playbook
From the Katello user interface, if the katello-agent package is installed on
your target machines
Given the varied nature of the tools available, we won't go into any greater depth in this
chapter but will instead leave this as an exercise for you. Experience has shown that central
deployment using Ansible is the most robust method, but you are welcome to experiment
and find the path that best suits you.
That concludes our brief tour of RPM-based patching with Katello, though it is hoped that
it has shown you enough to give you a taste of how it might prove valuable in your
enterprise. In the next section, we will look at the process of patching DEB-based systems
with Katello.
Patching DEB-based systems with Katello
The patching of DEB-based systems such as Ubuntu through Katello is broadly similar to
the RPM-based process, save for a few changes in the GUI, and the limitations around
package signing discussed earlier in this chapter, in the section entitled Patching with
Katello. Let's briefly walk through an example now for Ubuntu Server 18.04:
1. First, create a new product for our Ubuntu package repositories:
[ 261 ]
Patching with Katello Chapter 9
It is important to state here that importing the Ubuntu signing public key makes
no impact on the published repository and so can be specified or ignored as you
prefer. The resulting repository will not have a signed Release file and so must
be treated as implicitly trusted.
[ 262 ]
Patching with Katello Chapter 9
2. Once the product is saved, create a new repository within it to contain the
packages—the package mirror creation requires the same parameters we used on
the command line with Pulp, as shown in the following screenshot:
Sync the newly created repository as before, and ensure this has completed
successfully before proceeding to the content view creation.
[ 263 ]
Patching with Katello Chapter 9
3. Once it has, create a separate content view for our Ubuntu content—the
following screenshot shows the content view creation in progress:
[ 264 ]
Patching with Katello Chapter 9
4. This time, navigate to the Apt Repositories tab and select the appropriate
Ubuntu repositories—again, in our simple example here, we only have one, and
the following screenshot shows the process of our lone Ubuntu 18.04 base
repository being added to the Ubuntu1804-CV content view:
5. From here, our new content view is published and promoted just as we did for
the RPM-based one. The resulting repository is accessible again at a predictable
URL, this time being of the following pattern:
http://KATELLOHOSTNAME/pulp/deb/ORGNAME/LIFECYCLENAME/CONTENTVIEWNA
ME/custom/PRODUCT/REPO
As can be seen, this is almost identical to the RPM-based example, save for the initial path.
An appropriate entry for /etc/apt/sources.list to match the content view we just
created in this example might look like this:
deb [trusted=yes]
http://katello.example.com/pulp/deb/HandsOn/Development/Ubuntu1804-CV/custo
m/Ubuntu_18_04_Server/Ubuntu_18_04_base/ bionic main
[ 265 ]
Patching with Katello Chapter 9
As before, this URL remains constant regardless of when we might sync, publish, or
promote this content view and so it need only be deployed once to target systems to ensure
they can receive packages from the Katello server. Again, you can perform this patching
manually through the apt update and apt upgrade commands on the end systems, or
centrally through Ansible.
Note that there is no katello-agent package for Debian/Ubuntu-based
systems at the time of writing.
In this chapter, we have barely scratched the surface of all that Katello can do, yet this
example alone demonstrates how effective a tool it is for enterprise patch management. It is
highly recommended that you explore this further to establish whether it meets your wider
infrastructure needs.
It must be stressed that, in this chapter, we have really only scratched the surface of what
Katello can do—however, it is hoped that the work we have done so far gives you enough
to make an informed decision on whether to proceed with this incredibly powerful and
versatile platform as part of your Linux architecture.
Summary
Katello is actually an amalgamation of several incredibly powerful open source
infrastructure management tools, including Pulp, which we have already explored. It is
incredibly adept at patch management in an infrastructure setting, offering numerous
advantages over a standalone Pulp installation and can handle most build and maintenance
tasks from a single pane of glass—more than we have had space to cover!
In this chapter, you gained an understanding of what the Katello project actually is and the
components that it is comprised of. You then learned how to perform a standalone
installation of Katello for patching purposes and then how to build out repositories suitable
for patching both RPM- and DEB-based Linux distributions and the basics of integrating
these two operating systems with Katello content views.
In the next chapter, we will explore how Ansible can be effectively employed in an
enterprise for user management.
[ 266 ]
Patching with Katello Chapter 9
Questions
1. Why would you want to use Katello over a product such as Pulp?
2. What is a Product in Katello terms?
3. What is a content view in Katello?
4. Can Foreman (which underpins Katello) assist with the PXE booting of bare-
metal servers?
5. How would you use lifecycle environments in Katello?
6. What is the difference between the Publish and Promote operations on a
content view?
7. When would you want to perform a Promote operation on a previously