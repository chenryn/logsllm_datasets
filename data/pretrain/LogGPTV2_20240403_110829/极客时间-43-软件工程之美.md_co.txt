## 总结今天我带你一起学习了如何从软件工程的角度分析失败的软件项目。通过借鉴航空业对飞机坠毁原因的调查，也可以从四个方面去分析软件项目失败的原因，那就是外部环境、技术管理、项目管理和组织文化。如果细化一下，还可以总结出一些具体的常见的失败原因：-   不切实际或者不明确的项目目标；-   对项目所需要的资源估算不准确；-   需求不明确或者频繁变更；-   没有对风险进行有效管理；-   和客户之间沟通不畅；-   无法解决项目的复杂性；-   没有好的开发实践；-   糟糕的项目管理；-   上层的政治斗争；-   商业压力。其实软件项目失败并不可怕，最重要的还是在失败后，总结原因，吸取教训。就像微软在Vista 项目失败后，总结经验，改进了开发流程，加快了发布周期，在 Windows 7项目上重新取得了巨大的成功。还有像暴雪，在泰坦项目失败后，基于泰坦项目开发出了大受欢迎的守望先锋游戏。
## 课后思考你有经历过或者听说过印象深刻的失败的软件项目吗？你觉得原因是什么？有哪些经验教训？欢迎在留言区与我分享讨论。感谢阅读，如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。![](Images/da183fec69b316d65c37d6f003a9f298.png){savepage-src="https://static001.geekbang.org/resource/image/31/af/315c3c753591fbaf480f39cdc9e0f3af.jpg"}
# 43 \| 以VS Code为例，看大型开源项目是如何应用软件工程的？你好，我是宝玉。如果你所在的团队在日常的软件项目开发中，能科学地应用软件工程的知识，让你的项目能持续取得进展，最终交付的产品也有很好的质量，那么是一件非常幸运的事情。然而现实中，很多人并没有机会去参与或观察一个好的项目是什么样子的，也没机会去分析一个好的项目是如何科学应用软件工程的。好在现在有很多优秀的开源项目，不仅代码是公开的，它们整个项目的开发过程都是公开的。通过研究这些开源项目的开发，你能从中学习到一个优秀项目对软件工程的应用，加深你对软件工程知识的理解，进而应用到你自己的项目实践中。我想你对 VS Code应该不陌生，它是一个非常优秀的编辑器，很多程序员包括我非常喜欢它。VSCode也是一个大型的开源项目，整个开发过程非常透明，所以今天我将带你一起看一下VS Code 是如何应用软件工程的，为什么它能构建出这么高质量的软件。
## 如何从 VS Code 的开发中学习软件工程？也许你会很好奇，平时也去看过 VS Code 的网站，但并没有提到软件工程的呀？是的，VS Code的网站并没有特别突出这些信息，但是如果你有心，可以找到很多有价值的信息，它的整个开发过程都是公开透明的。比如通过它项目的[WIKI](http://github.com/microsoft/vscode/wiki)和[博客栏目](http://code.visualstudio.com/blogs)，可以看到项目的计划、项目开发流程、测试流程、发布流程等信息。通过它的[GitHub](http://github.com/microsoft/vscode)网站，你可以看到团队是如何基于分支开发，开发完成后提交PullRequest，团队成员如何对代码进行审核，合并代码后如何通过持续集成运行自动化测试。``{=html}除此之外，团队成员在网上也有一些对于 VS Code 开发的分享，比如说 VS Code主要负责人 Erich Gamma 2016 年在 GOTO 技术大会上有一个专门关于 VS Code的[主题演讲](http://passport.weibo.com/visitor/visitor?entry=miniblog&a=enter&url=https%3A%2F%2Fweibo.com%2F1727858283%2FHy6b647zm&domain=.weibo.com&sudaref=https%3A%2F%2Fshimo.im%2Fdocs%2FCTa8mSsYEcc8KgOg&ua=php-sso_sdk_client-0.6.28&_rand=1560153401.1655)。也许你还会想问：这些信息我也知道，也能从网上看到，但怎么通过这些信息去观察和学习它跟软件工程相关的部分呢？不知道你是否还记得，在我们专栏的第一篇文章《[01 \|到底应该怎样理解软件工程？](http://time.geekbang.org/column/article/82848)》中提到了：**软件工程的核心，就是围绕软件项目开发，对开发过程的组织，对方法的运用，对工具的使用。**所以当我们去观察一个软件项目，我们就可以去看它的开发过程是怎么被组织的？运用了哪些软件工程的方法？使用了哪些工具？接下来，我就带你一起从以下几个方面分析 VS Code 对软件工程的应用：-   VS Code 的开发过程；-   团队的分工角色；-   各个阶段如何进行；-   使用了哪些工具。
## VS Code 的开发迭代过程如果你是 VS Code 的用户，你会发现 VS Code每个月都会有新版本的更新，每次更新都会有很多新酷的功能。这是因为 VS Code每个版本的开发周期是 4 周，每四周都会发布一个新的版本。从开发模式来说，VS Code采用的是快速迭代的开发模式，每四周一个迭代。那么这四周的迭代的工作都是如何进行的呢？-   第一周每个版本的第一周，通常是起着承上启下的作用，一方面要准备新版本，一方面还要对上一个版本的工作进行收尾。在这一周里，开发团队要去做一些偿还技术债务的事情，比如说重构代码，优化性能。所以如果你的团队抱怨说没有时间做偿还技术债务的事情，不妨也去学习VS Code 团队，定期留出专门的时间，做偿还技术债务的事情。另一个主要工作就是一起讨论下一个迭代要做的功能。其实这有点类似于敏捷开发中，每个Sprint 开始之前的项目计划会议。如果上一个版本开发完成的功能，发现了严重 Bug，第一周还要去修复这些紧急Bug。-   第二周和第三周第二周和第三周主要工作就是按照计划去开发，一部分是开发新功能，一部分是修复Bug，所有的 Bug 都是通过 GitHub 的 Issue 来分配和跟踪的。团队成员每天还要先检查一下分配给自己的 Issue，如果遇到线上版本紧急的Bug，要优先修复。-   第四周VS Code 团队把最后一周叫 Endgame，你可以理解为测试周，因为这一周只做测试和修复 Bug。这一周要测试所有新的 Feature 和验证已经修复的Bug，确保被修复。同时还要更新文档和写 Release Notes。测试完成后就发布预发布版本，这个预发布版本会先邀请一部分人使用，比如说微软内部员工、热心网友。-   下一个迭代第一周每个迭代开发测试完成的版本，会放在下一个迭代的第一周发布。如果在预发布版本中发现严重Bug，需要在第一周中修复。如果没有发现影响发布的Bug，那么第一周的周三左右就会正式发布上一个迭代完成的版本。前面我在专栏文章《[40 \|最佳实践：小团队如何应用软件工程？](http://time.geekbang.org/column/article/98985)》中，建议小团队可以缩短迭代周期到2-4 周，有同学担心不可行，但你看 VS Code 这样稳定的 4周迭代，不但可行，而且还是 VS Code 能保持每月发布一个新版本的关键所在。
## VS Code 团队的角色和分工VS Code 的开发团队现在大约 20人左右，一半在苏黎世，一半在西雅图。整个团队基本上都是开发人员，结构很扁平。从分工上来说，在开发新功能和修复 Bug的时候，会有一些侧重，比如有人侧重做 Git相关的功能，有人侧重做编辑器部分功能。这样有侧重的分工对于提升开发效率是有好处的。从角色上来说，除了开发，还有主要有两种角色：[InboxTracker](http://github.com/microsoft/vscode/wiki/Issue-Tracking#inbox-tracking)和[EndgameMaster](http://github.com/microsoft/vscode/wiki/Running-the-Endgame#duties-of-the-endgame-master)。这两种角色在每个迭代的时候是轮值的，每个人都有机会去担任这两个角色。-   Inbox TrackerInbox Tracker 的主要任务就是收集、验证、跟踪 Bug。但这个工作对于 VS Code团队来说可不轻松，现在 Issue 的总量已经超过了 5000，每天提交的新的 Issue的量大概有 100 左右。所以 VS Code团队写了一个机器人叫[VSCodeBot](http://github.com/apps/vscodebot)，可以帮助对Issue 先自动处理，打标签或回复，然后 Inbox Tracker 再对剩下的 Issue进行人工处理。Inbox Tracker 要检查新提交的 Issue 是不是一个真正的Bug，如果是提问，建议到 StackOverflow 去问，如果是 Bug，打上 Bug的标签，并指派给相应模块的负责人。-   Endgame MasterVS Code团队是没有专职的测试人员的，所有的测试工作都是开发人员自己完成。在每一个迭代中。EndgameMaster 在这里就很重要，要组织管理整个迭代的测试和发布工作。Endgame Master在每个迭代测试之前，根据迭代的开发计划制定相应的测试计划，生成 CheckList，确保每一个新的功能都有在 Check List 中列出来。因为 VS Code团队没有专职测试，为了避免开发人员自己测试自己的代码会存在盲区，所以自己写的功能都是让其他人帮忙测试。EndgameMaster 一个主要工作就是要将这些测试项分配给团队成员。最后整个测试计划会作为一条 GitHub Issue发出来给大家审查。比如说这是某一个月的[Endgame计划](http://github.com/microsoft/vscode/issues/74412)。团队的日常沟通是通过 Slack，在测试期间，Endgame Master需要每天把当前测试进展同步给所有人，比如说总共有多少需要测试的项，哪些已经验证通过，哪些还没验证。