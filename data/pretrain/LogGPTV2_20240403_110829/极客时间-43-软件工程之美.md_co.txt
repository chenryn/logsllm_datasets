## 今日学习总结

在今天的课程中，我们探讨了如何从软件工程的角度分析失败的软件项目。借鉴航空业对飞机事故原因调查的方法，我们可以从四个方面来剖析软件项目失败的原因：外部环境、技术管理、项目管理和组织文化。进一步细化后，可以归纳出以下常见的具体失败因素：

- 不切实际或不明确的项目目标；
- 对所需资源的估算不准；
- 需求模糊不清或频繁变动；
- 缺乏有效的风险管理；
- 与客户沟通不良；
- 无法妥善处理项目的复杂性；
- 缺少良好的开发实践；
- 项目管理不当；
- 内部政治斗争；
- 商业压力。

重要的是，在面对失败时能够从中汲取教训并改进未来的工作方式。例如，微软在Vista项目遭遇挫折后，通过对经验教训的学习调整了其开发流程，并加快了发布周期，在随后推出的Windows 7上取得了巨大成功；同样地，暴雪娱乐在取消《泰坦》项目之后，基于该项目的经验推出了广受欢迎的《守望先锋》游戏。

## 课后思考题

你是否经历过或者听说过令人印象深刻的软件项目失败案例？请分享一下你的看法以及从中得到的启示。欢迎在评论区留言交流！

---

感谢您的阅读！如果您觉得这篇文章有所启发，请不要吝啬将其转发给身边的朋友哦。

![](https://static001.geekbang.org/resource/image/31/af/315c3c753591fbaf480f39cdc9e0f3af.jpg)

# 第43讲 | 以VS Code为例，探索大型开源项目中的软件工程应用

大家好，我是宝玉。当一个团队能够在日常软件项目开发过程中科学地运用软件工程知识，使项目持续进步且最终交付高质量的产品时，这无疑是非常幸运的事情。然而，在现实世界里，许多人可能并没有机会参与到优秀项目的实践中去，也很难有机会深入了解这些项目是如何科学实施软件工程原则的。幸运的是，如今有许多杰出的开源项目不仅开放了源代码，还公开了整个项目的开发过程，为我们提供了宝贵的学习资源。

想必大家都对VS Code这款编辑器并不陌生吧？它深受众多开发者喜爱，包括我自己也是它的忠实用户之一。作为一个大型开源项目，VS Code的开发流程非常透明，因此今天我将带领大家一起探究它是如何应用软件工程理念打造出如此高品质软件产品的。

## 如何从VS Code开发中学到软件工程的知识？

或许你会感到疑惑：“平时我也访问过VS Code官网，但似乎并没有特别强调软件工程方面的内容啊？”确实如此，虽然官方网站没有直接提及这一点，但如果仔细挖掘，你会发现很多有价值的信息。比如通过浏览其[维基页面](http://github.com/microsoft/vscode/wiki)和[博客专栏](http://code.visualstudio.com/blogs)，你可以了解到关于项目规划、开发流程、测试及发布等各个环节的具体细节。此外，借助于[GitHub仓库](http://github.com/microsoft/vscode)，还可以观察到团队如何基于分支模式进行协作开发，提交Pull Request后又是怎样经过Code Review直至最终合并进主干并自动触发CI流水线执行单元测试等一系列操作。

除此之外，还有不少团队成员在线上分享过关于VS Code背后的故事。例如，该项目负责人Erich Gamma曾在2016年的GOTO大会上发表了一次关于VS Code的主题演讲（链接见下方）。那么问题来了：既然上述信息都是公开可获取的，我们应该怎样利用它们来学习其中蕴含的软件工程思想呢？

回想一下，在本系列文章开篇之作《[01 | 究竟该如何理解软件工程？](http://time.geekbang.org/column/article/82848)》中提到过这样一个观点——“**软件工程的核心在于围绕软件项目开发而展开的过程组织、方法论选择以及工具使用**”。因此当我们试图剖析某个特定软件项目时，可以从以下几个维度入手：

- 该软件项目的整体开发流程；
- 团队内部的角色划分及其职责分配；
- 各个阶段具体是如何推进实施的；
- 在此过程中采用了哪些辅助工具和技术手段。

接下来就让我们逐一展开讨论吧！

### VS Code 的迭代开发模式

如果你是一名长期关注VS Code更新动态的用户，那么一定注意到这款编辑器几乎每个月都会推出新版本，并且每次更新都伴随着大量新颖实用的功能加入。这是因为VS Code采取了快速迭代式的开发策略，每个迭代周期为四周时间，每隔四个星期就会有一个新的稳定版面世。

那么在这短短一个月内，整个开发团队究竟是如何高效运作从而保证按时按质完成任务的呢？以下是大致的时间安排：

- **第一周**：作为承前启后的过渡期，一方面需要对即将启动的新一轮开发做好准备，另一方面还需处理完上一版本遗留下来的任务。在此期间，工程师们会集中精力偿还一些“技术债务”，如重构代码结构、优化运行效率等。同时也会召开会议共同商讨下一轮迭代的目标功能列表。如果遇到紧急bug，则需优先解决。
  
- **第二至第三周**：这段时间主要用于按照既定计划推进各项任务，既包括新增特性也涵盖了缺陷修复。所有待办事项均通过GitHub Issues系统进行跟踪管理。每位成员每天上班后首先查看自己的任务清单，对于那些涉及到线上生产环境的高优先级问题要给予足够重视及时响应。

- **第四周**：被称为“终局之战”的一周，主要工作重心转移到全面测试上面来。不仅要验证所有新增功能点是否符合预期，还要确认之前标记过的bug已经被彻底根治。与此同时，还需同步更新相关文档资料，并撰写版本说明。一旦完成上述步骤便可以生成预览版供内部人员试用反馈。

- **下一个迭代的第一周**：正式对外发布的日子通常选在这个时候。若预览版中发现严重问题，则需要立即着手解决；反之如果没有阻碍因素存在的话，则会在周三左右推送正式版。

正如我在早先的文章《[40 | 最佳实践：小规模团队如何有效运用软件工程？](http://time.geekbang.org/column/article/98985)》中所建议那样，即使是小型团队也可以尝试缩短迭代周期至两周甚至更短。尽管有人对此表示怀疑，但从VS Code的实际表现来看，这种紧凑高效的四周一循环模式完全可行并且成为了保持高频次更新节奏的关键所在。

### VS Code 开发团队的角色分工

目前VS Code核心开发小组大约由二十名成员组成，分别位于瑞士苏黎世和美国西雅图两地。整个团队架构相当扁平化，基本上全员皆为程序员出身。在具体承担任务时会有一定的侧重领域，比如有的专注于Git集成部分，有的则专攻编辑器核心模块。这样做的好处是可以提高工作效率减少不必要的重复劳动。

除了常规意义上的开发者之外，还有两种特殊角色在整个迭代周期内轮流担任：

- **Inbox Tracker**：负责收集、审核以及追踪所有的Issue报告。考虑到当前总共有超过五千条活跃状态的问题记录，并且每天平均新增约一百份左右，为了减轻人工负担，VS Code专门开发了一个名为[VSCodeBot](http://github.com/apps/vscodebot)的自动化助手来协助初步筛选分类。真正的Bug会被打上相应标签并指派给对应领域的专家跟进处理。
  
- **Endgame Master**：鉴于VS Code并未设置专职QA岗位，所有质量保证活动均由研发人员自行完成。因此每轮迭代开始前都需要选出一位“终局大师”来统筹协调整个测试与发布流程。他会根据本轮开发内容制定详细的检查清单确保无遗漏之处，并将各项测试任务合理分配给各位同事执行。此外还需要每日汇总进度情况并通过Slack渠道向全体通报最新进展。

以上就是关于VS Code项目的一些基本情况介绍，希望能对你有所启发。如果有任何疑问或者想要了解更多细节，欢迎随时留言交流！