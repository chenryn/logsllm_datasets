one of the ACCESS_COARSE_ or ACCESS_FINE_LOCATION per-
missions; and 3 mappings are associated with the WAKE_LOCK
or the ACCESS_NETWORK_STATE permission where the permis-
sion requirement depends on the value of an internal state
ﬁeld. From this, we establish that out of the 292 mappings
exercised by our corpus of applications, an upper bound of
20 (7%) may actually be incorrect mappings.
5. PERMISSION SYSTEM ANALYSIS
We run PScout on four versions of Android and summa-
rize the results of the extracted permission speciﬁcations in
Table 1. We chose these versions because these are the An-
droid versions that are predominantly deployed on phones
and tablets in the market. We then analyze the extracted
speciﬁcations to try and answer the four main questions we
posed in Section 1.
Is the large number of permissions offered by Android
useful? Are any permissions redundant?
As can be seen from Table 1, Android has had at times,
anywhere from 75-79 diﬀerent permissions available to third
party application developers. To answer whether the per-
missions are redundant, we compute the conditional prob-
ability of all pairs of Android permissions across their API
mappings. We deﬁne two types of correlations between per-
missions: an implicative relationship (i.e. all APIs that
check for permission X also check for the permission Y) or
a reciprocative relationship (i.e. the checking of either per-
mission by an API means that the other permission will also
be checked with a probability higher than 90%).
Out of the 6162 permission pairs in Android 4.0, we found
only 14 implicative permission pairs and only 1 reciprocative
pair, which we list in Table 2. Only one of the permission
pairs, KILL_BACKGROUND_PROCESSES and RESTART_PACKAGES,
is truly redundant – both permissions are checked by the
same set of APIs. The Android documentation indicates
that the API requiring RESTART_PACKAGES has been depre-
cated and replaced with an API that requires KILL_BACK-
GROUND_PROCESS2. Our analysis shows that the new API
works with the old deprecated permission, likely for back-
ward compatibility. We also found that the READ_ and WR-
ITE_SOCIAL_STREAM permissions frequently imply one or both
of the READ_ and WRITE_CONTACT permissions. This is not
a surprise as the Android documentation explains that per-
mission to access contacts is required to access a user’s so-
cial stream3. Several “write” permissions imply their cor-
responding “read” permission meaning that the APIs al-
ways read and modify the corresponding objects. How-
ever, since all these permissions enforce access controls for
content providers, separate read and write permissions are
still required because applications may access the data di-
rectly via content provider URIs. We analyzed the source
code for the 3 remaining implicative permission pairs to
2http://developer.android.com/reference/android/
Manifest.permission.html
3http://developer.android.com/reference/
android/provider/ContactsContract.StreamItems.
StreamItemPhotos.html
223# LOC in Android framework
# of classes
# of methods (including inherited methods)
# of call graph edges
# of permission mappings for all APIs
# of permission mappings for documented APIs only
# of explicit permission checks
# of intent action strings requiring permissions
# of intents ops. w/ permissions
# of content provider URI strings requiring permissions
# of content provider ops. /w permissions
KLOC/Permission checks
# of permissions
# of permissions required only by undocumented APIs
% of total permissions required only by undocumented APIs
Android Version
2.2
2.3
3.2
4.0
2.4M
8,845
316,719
1,074,365
17,218
467
229
53
42
50
916
2.1
76
20
26%
2.5M
9,430
339,769
1,088,698
17,586
438
217
60
49
66
973
2.0
77
20
26%
2.7M
12,015
519,462
1,693,298
22,901
468
239
60
44
59
990
2.1
75
17
23%
3.4M
14,383
673,706
2,242,526
29,208
723
286
72
50
74
1417
1.9
79
17
22%
Table 1: Summary of Android Framework statistics and permission mappings extracted by PScout. LOC
data is generated using SLOCCount by David A. Wheeler.
2.2→2.3
2.3→3.2
3.2→4.0
Existing New API undoc→doc
0
2
212
40(6%)
25(6%)
56(19%)
9
31
48
Table 3: Changes to the permission speciﬁcation
over time. We give the number of existing APIs that
acquired a permission requirement and the number
of new APIs that require permissions. The percent-
age in brackets gives the number of new APIs re-
quiring permissions as a fraction of all new APIs
introduced between versions. The ﬁnal column lists
the number of undocumented APIs requiring per-
missions in the previous version that became docu-
mented APIs in the new version.
determine the cause of the correlation. USE_CREDENTIALS
and MANAGE_ACCOUNTS are very related, the former allowing
the application to use authentication tokens from registered
accounts and the latter to manage those accounts. Both
WRITE_HISTORY_BOOKMARKS / GET_ACCOUNTS and ADD_VOICE-
MAIL / READ_CONTACTS are also pairs of related permissions,
which are checked when accessing the browser and call_log
content providers respectively. ACCESS_COARSE_ and ACC-
ESS_FINE_LOCATION is the only reciprocative pair. While in
most cases FINE permission is a superset of COARSE permis-
sion, getting location changes from the PhoneStateListener
is only allowed if the COARSE permission is held.
Summary: While there are small amounts of redundancy
illustrated in these 15 pairs, the vast number of Android
permissions have very little correlation with any other per-
mission. As a result, we believe there is little redundancy in
the Android permission speciﬁcation.
How many undocumented APIs require permissions and
how common is it for applications to use undocumented
APIs?
Table 1 gives the total number of APIs that require per-
missions as well as the number of documented APIs that
require permissions. From this, we can see that there are
anywhere from 16K-28K undocumented APIs that require
permissions across diﬀerent versions of Android. In addition,
22-26% of the declared permissions may only be checked
if an application uses undocumented APIs. For example:
CLEAR_APP_CACHE, SET_DEBUG_APP and MOUNT_UNMOUNT_FILE-
SYSTEMS cannot be required if only documented APIs are
used. These permissions are generally related to specialized
system functionality, which seems to justify why such func-
tionality is not exposed to average application developers.
This suggests that if the intent is for developers to only use
documented APIs, then Android could export a signiﬁcantly
smaller list of permissions.
From our study of 1,260 Android 2.2 applications in Sec-
tion 4, we ﬁnd that only 53(3.7%) applications use undoc-
umented APIs. Out of the 13,811 APIs that those applica-
tions use, only 158(1.1%) are undocumented. In contrast,
the same applications use 292 API calls that require per-
missions, out of which 22(7.5%) are undocumented. Thus,
applications make very little use of undocumented APIs,
but for the undocumented APIs they do use, a signiﬁcantly
larger fraction of those require permissions than for the doc-
umented APIs they use. We also have noticed that across
versions, a number of APIs requiring permissions that were
undocumented have become documented in later versions.
The third column of Table 3 shows the number of undocu-
mented APIs that require permissions became documented
in the next major version we examined. As can be seen,
initially not many undocumented APIs were made docu-
mented, but this changed in Android 4.0, which made many
previously undocumented APIs documented, possibly in ac-
knowledgment that some undocumented APIs are useful and
that the wider Android developer community should be made
aware of them. This also helps explain the lower percentage
224permission X
permission Y
KILL_BACKGROUND_PROCESS
WRITE_SOCIAL_STREAM
READ_SOCIAL_STREAM
USE_CREDENTIALS
WRITE_SOCIAL_STREAM
WRITE_SOCIAL_STREAM
WRITE_CONTACTS
WRITE_SOCIAL_STREAM
WRITE_HISTORY_BOOKMARKS
WRITE_HISTORY_BOOKMARKS
WRITE_CALENDAR
ACCESS_LOCATION_EXTRA_COMMANDS
ACCESS_LOCATION_EXTRA_COMMANDS
ADD_VOICEMAIL
ACCESS_COARSE_LOCATION
RESTART_PACKAGES
WRITE_CONTACTS
READ_CONTACTS
MANAGE_ACCOUNTS
READ_SYNC_SETTINGS
READ_SOCIAL_STREAM
READ_CONTACTS
READ_CONTACTS
READ_HISTORY_BOOKMARKS
GET_ACCOUNTS
READ_CALENDAR
ACCESS_COARSE_LOCATION
ACCESS_FINE_LOCATION
READ_CONTACTS
ACCESS_FINE_LOCATION
P(Y|X) P(X|Y)
1.00
0.93
0.92
0.73
0.62
0.59
0.58
0.54
0.39
0.30
0.17
0.05
0.05
0.04
0.90
1.00
1.00
1.00
1.00
1.00
1.00
1.00
1.00
1.00
1.00
1.00
1.00
1.00
1.00
0.95
Table 2: Highly correlated permissions in Android. P(Y|X) denotes the conditional probability computed by
taking the percentage of APIs that check for permission X that also check for permission Y.
Figure 5: Number of documented APIs that map to
a permission in Android 4.0. Each bar represents
the number of documented APIs that require a par-
ticular permission.
Figure 6: Number of permissions required by a doc-
umented API. Each bar represents the number of
documented APIs that require that number of per-
missions.
of permissions that are only used by undocumented APIs in
Android 4.0.
Summary: There are many undocumented APIs that re-
quire permissions and even some permissions that are only
needed if an application is using undocumented APIs. Cur-
rently, applications do not commonly make use of undocu-
mented APIs.
How complex and interconnected is the relationship
between Android APIs and permissions?
Figure 5 and Figure 6 show histograms of the number of doc-
umented APIs that map to a permission and the number of
permissions required by an API respectively. Together both
of these graphs show that while the permission speciﬁcation
is very broad in size, it is not very interconnected – over 80%
of APIs only require at most 1 permission, and very few re-
quire more than 2 or 3. Similarly, 75% of permissions have
fewer than 20 API calls that require them. We also compute
the length of the path in the call graph between API call and
the permission check for each mapping. We ﬁnd that over
60% of the mappings have a path length of less than 5 edges
indicating that the permission check happens fairly early on
in the processing of most API calls.
Table 4 gives the 5 permissions in Android 4.0 with the
highest number of API mappings and the 5 permissions
with the highest number of checks. Having a lot of APIs
mapping to a permission does not necessarily translate to a
widespread functionality for that permission. The top two
permissions, SET_WALLPAPER and BROADCAST_STICKY, are bo-
th required for methods in the Context class which has 394
subclasses. Most of the documented API mappings for these
two permissions are inherited methods from documented
subclasses of Context. As a result, the number of mappings
can sometimes be a function of the object hierarchy rather
than functionality. High numbers of API mappings also
does not translate into large numbers of permission checks.
For example, all APIs using the SET_WALLPAPER permission
020406080100120PermissionNumber of Documented API Mappings12345678910050100150200250300350400450500Number of Required PermissionsDocumented API Count225# of mappings # of checks
Highest # of mappings
97
SET_WALLPAPER
97
BROADCAST_STICKY
54
WAKE_LOCK
53
BLUETOOTH
24
READ_CONTACTS
Highest # of checks
BLUETOOTH
READ_CONTACTS
READ_SOCIAL_STREAM
BLUETOOTH_ADMIN
READ_SYNC_SETTINGS
53
24
22
22
21
1,466
2,472
3,874
1,878
1,244
1,878
1,244
1,145