end if
if lenдth(point_list) is 1 then
Return backup alдorithm
Return point_list[n − 1]
Return point_list[0]
Return backup alдorithm
end if
end if
else
end if
end if
if point_list[0] is sblock and point_list = (1 sblock , 2 sblock , ..., n sblock) then
else
▷ label_list = (0, 0...0, 1, 1...1)
▷ label_list = (1, 1...1, 0, 0...0, 1, 1...1)
▷ label_list contains 0 only
▷ return last point in the point_list
▷ point_list is empty
to simulate the process of visiting one website after another, we
picked two websites randomly from the testing set 200 times and
concatenated their network traffic trace to form the test set. Since
each website for the testing set has 20 instances, there are 4, 000
traces in total in the testing dataset.
We removed the packets with size of Maximum Transmission
Unit (MTU) to improve the accuracy. We also consider another
threshold in addition to pf inal , that is, if the highest probability
of a packet belonging to every class is lower than the threshold
toriдinal , where toriдinal is set to 0.8 in the experiment, then that
packet will be ignored. A few other thresholds were chosen and it
was found that 0.8 gave the best result. Thus we only consider the
predictions with high probability. We found that by removing MTU
and adding this new threshold value, the accuracy is increased.
We analyze the accuracy of the split point from two metrics:
1) the related deviance of the predicted split point from the real
split point and 2) the accuracy of the split point. The related de-
viance is calculated by abs(predicted_point − real_point)/ltr ace.
The lowest average related deviance we obtained when testing on
10 and 100 websites are 0.154 and 0.16 respectively, which means
the performance of the algorithm is stable when increasing the
number of websites. If the predicted split point is before the real
split point, the first website loses partial data at the end, and the
second website receives extra data at the beginning. Figure 7 shows
the decrease in prediction accuracy under a closed world setting.
The test dataset is composed of 12 parts; each part contains 100
websites and 20 instances of each website. The first 6 parts consist
of cutting 30%/20%/10% traces at the beginning or end of each trace,
The second 6 parts are composed of adding 30%/20%/10% traces at
the beginning or end of each trace. It shows the effect on prediction
accuracy for the first and second website in a continuous trace
when the predicted split point is before or after the the real split
point. For two continuous websites, the error on the split point has a
bigger effect on the second website. A 0.16 related deviation means
the average split point is between 0.84 to 1.16 on the x-axis in Fig 7.
In this area, it can detect the first website with a decreased accuracy
of 15%. Since the original accuracy in detecting one website with
website fingerprinting using the k-NN algorithm is about 90% (from
figure 5), the accuracy to predict the first website is thus around
90% − 15% = 75%. However, for the second website, the accuracy
is lower. To calculate the accuracy of the split point, we consider
that the prediction is correct if the block/point prediction is clos-
est to the real split point. The number of points/blocks is decided
by ltr ace/sblock, where sblock is selected as 200. For example, if
the length of the continuous traces is 3, 000 with the split point at
packet number 425, and point_list = {200, 400, 600, 800, ..., 2800},
we consider the prediction is correct if the predicted split point is
400. Among 4, 000 test traces, 3, 200 of them are predicted with the
correct split point. The split point accuracy is thus 80%.
3.3 Results for Website Prediction
The ultimate goal of WF attack is to predict visited websites. The
advantage of this algorithm is that it can detect the website directly
after finding the split point. We still use toriдinal to filter packets
first and assume the packet belongs to website A if A has the high-
est probability among all websites (known from pf inal ). Then we
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand333Revisiting Assumptions for Website Fingerprinting Attacks
ASIACCS’19 , July, Auckland, New Zealand
In fact, visiting a webpage at the same time as another webpage
can be used as a defense to mitigate website fingerprinting attacks
because it generates “noise”. We, thus, propose a new “sectioning”
algorithm that can still accurately perform website fingerprinting
attack on overlapped website visits.
Figure 7: Decrease on prediction accuracy of the first and sec-
ond website when the predicted split point is not accurate.
calculate the percentage of each website before and after the split
point. The website with the highest percentage is the predicted
website. We trained on 100 websites and tested on 4, 000 instances.
When considering websites with the top three highest probabilities,
the accuracy for the first website is 70.2% and the accuracy for the
second website is 69.2%.
3.4 Summary
In summary, our “splitting” algorithm has three distinct advantages
over [24]. First, it doesn’t require new training data, only based on
original website traces. Second, it has a higher accuracy of 80% in
detecting split point compared to 63%. Third, [24] didn’t predict
websites for real after finding the split point. From their description,
they will reuse previous WF attack approach on two split sections.
However, in our algorithm, websites can be predicted directly after
finding the split point from the probability matrix and predicted
split point.
4 ANALYSIS OF OVERLAPPING TRACES
4.1 Motivation
This section provides an overview of the design of our experiments
and a description of our website fingerprinting attack when consid-
ering the situations of two overlapping traces (webpages that are
negative-time separated). This means that a victim visits a second
webpage while the first webpage is still loading. It’s not realistic
to assume that a user visits only one webpage at a time. However,
only one previous paper [24] has looked at overlapping website
visits. Figure 8 illustrates two overlapping traces. Trace A belongs
to website A and Trace B is from website B. The size of the overlap
can vary. We focus on predicting both website A and website B.
In previous work, the prediction accuracy of classifying websites
based on features like packet sizes and number of packets is high
at around 90%. Figure 9 shows the accuracy of the k-NN algorithm
when predicting traces with overlapped packets. It can be seen that
the accuracy decreases significantly from 89.89% to 22.80% with
5% overlapped packets and to 19.29% with 10% overlapped packets.
Thus, overlapping traces have a big impact on prediction accuracy.
Figure 8: Two website traces A and B overlap.
4.2 Sectioning Algorithm
We now present the design of our proposed “sectioning” algorithm.
Instead of treating a traffic trace as a whole, we split the trace
into a certain number of sections and perform website prediction
on each section. The intuition behind why sectioning will help
improve accuracy is that the overlapped parts will only appear in
some sections of the trace and other sections will not be disturbed.
We also hypothesize that most sections of the trace will not be
disturbed. This allows us to perform a majority voting on all the
sections to decide which website is being visited.
Figure 10 shows the key parts of our sectioning algorithm: parti-
tioning and majority voting.
1) Partitioning an instance into n sections: Partitioning each
instance into sections is the most important part of our algorithm.
Each trace, whether for training set or testing set, will be partitioned
into n sections. If n = 1 section, this means there is one section and
this is what previous work has looked at; this is the base case. Each
Figure 9: Prediction accuracy as more packets overlap in the
two traces.
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand334ASIACCS’19 , July, Auckland, New Zealand
W. Cui et al.
5) A majority vote will be performed for the predictions from the
different sections (Figure 11(d)); 6) Repeat to do 10-fold cross vali-
dation.
We detail each step next.
1) Dataset: As mentioned before, we randomly chose n = 100
websites and k = 40 instances per website from the RND-WWW
dataset and CUMUL features from [16]. Our first step is to split
instances of each website into training and testing set under a 10-
fold cross validation. 10% of instances are in testing set, the rest are
in the training set. This means that 36 of 40 instances will be treated
as training set data for each website. We repeat each experiment 10
times, each time choosing a random 36 instances for training.
2) Overlapped traces simulation: An overlapping visit means
visiting one website while visiting another website, so that it is
hard to tell which website the packet trace belongs to. As Figure 8
shows, website B has an overlap at the beginning with website A
and website A has an overlap at the end with website B. We attempt
to predict both websites using the sectioning algorithm. Wang’s
work [24] showed that it’s possible to find the split point which is
the end of website A and the start of website B in overlapped traces.
We will outline our improved algorithm in Section 4.5. Figure 12
shows that for our simulation, we insert-merge packets to the begin-
ning of a website trace when predicting website B, and insert-merge
packets to the end of a website trace when predicting website A. To
simulate overlapped traffic traces, we add packets from one traffic
trace (instance) of another website A to the beginning of website B
or vice versa. This is not a prepend method, but instead a merging
is performed. Each instance contains packets’ sizes along with the
time stamp for each packet. We take the last few packets of website
A and reset the timestamp of that first packet to be zero so that
the last few packets of website A are merged into the beginning of
website B. We also simulated different overlapping fractions from
5% to 20%; this means we obtained the last 5% of packets from
website A’s network trace and merged with the beginning of the
trace for website B. Also, we do the same procedure to the end of
the trace for website A.
As an example of inserting A to the beginning of B, all packets
are of the format :. Let’s say the last two
packets of website A are 2045 : 1040 and 2100 : 500 and the first
two packets of website B are 50 : 412 and 70 : 250. Resetting the
timestamp of the first packet from website A to zero, the packets
are then 0 : 1040 and 55 : 500. Merging both set of packets together
produces a new network trace with packets 0 : 1040, 50 : 412,
55 : 500, and 70 : 250.
3) Sectioning: We emphasize that the training sets are the orig-
inal traces. Only the testing datasets are “overlapped”. We cross-
validated the training set to obtain a reasonable model. Every trace,
in both training and testing sets, will be partitioned into n sec-
tions, where n = 1, 4, 5, 8, 10. Each section is then parsed using the
CUMUL features, similar to [16].
4) Run training/testing: After we have each trace split into n
sections, 90% of instances with same section number will be used as
the training set. We test the trained classifier on the remaining 10%
of instances with the same section number. For classifier algorithm,
we use the k-nearest neighbor (k-NN) algorithm. Since each section
is trained and tested independently of other sections, the result is n
predictions for the n sections. The n predictions can be the same
Figure 10: Outline of sectioning algorithm.
section will be evenly split by two methods: a) number of packets;
b) time duration of a trace.
1a) sectioning by number of packets: If a trace has 1, 000
packets and will be partitioned into 10 sections, then each section
will contain 100 packets.
1b) sectioning by time duration: If the duration of a trace is
10 seconds, when partitioning it into 10 sections, then interval of
each section will be 1 second. The sections with overlapping traces
will clearly have more packets, but the number of sections stays
the same with regards to the training set.
2) Perform majority voting: As Figure 10 shows, the last step
of our algorithm is to perform majority voting. The purpose of
sectioning is to reduce the interference in prediction caused by
the overlapped packets, that is, any incorrect predictions made
due to overlapped packets will be ignored if the majority of the
trace (or sections) is not affected (overlapped). We already have the
predictions for each section of each trace. To predict the website for
a trace, majority voting is performed on the n sections of that trace
to determine the predicted website. If there is no clear majority,
any of the highest number of predictions is chosen. For example,
like the overlapped trace B in Figure 8, a trace of website B is
partitioned into 5 sections. Suppose first 2 out of these 5 sections
contain overlapped packets from another trace of website A. The
prediction for the first section is website A while the prediction for
the second section is website B. Since the remaining 3 sections are
unaffected, the predictions are website B. In this case, website B
received 4 predictions while website A received 1 prediction. Using
majority voting, this trace will be classified as website B.
4.3 Experiment Setup
Figure 11 shows our sectioning algorithm. The steps are as follows:
1) split dataset into training and testing sets (Figure 11(a)); 2) Insert
certain amount of packets randomly from another website into the
trace of each instance of testing sets – this forms the overlapped
traces (Figure 11(a)); 3) Partition into n sections for both training
and testing sets accordingly (Figure 11(b)); 4) Apply machine learn-
ing classifier (for example, k-NN) to each section ((Figure 11(c));
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand335Revisiting Assumptions for Website Fingerprinting Attacks
ASIACCS’19 , July, Auckland, New Zealand
Figure 11: Overview of the sectioning algorithm.
Figure 12: Simulate overlapping: add packets to the begin-
ning of trace.
website or different websites. Figure 10 shows this procedure; in the
figure, n = 5 sections, thus there are 5 prediction sets accordingly.
5) Perform majority voting: Finally, we perform a majority
voting on predictions obtained from different sections, to get a final
prediction of which website the trace belongs to.
4.4 Results
a) Sectioning by number of packets: Figure 13 and Figure 14
show the accuracy result in correctly predicting websites A and B,
when using sectioning by number of packets. The % of overlapping
packets and the number of sections are also varied in the figures.
Figure 13 shows the prediction accuracy for website A. With the
base case (1 section), the accuracy is comparable with the no overlap
case (89%). Sectioning by number of packets has a slightly decrease
from 87.61% to 77.13% when the number of sections is 4 and 5%
overlap. From Figure 14, it can be seen that even with 5% overlap-
ping packets, the prediction accuracy for website B with 1 section
is 22.80%. When the number of sections increases to 4, the accuracy
also increases to 64.95%. This indicates that sectioning helps in mit-
igating the impact of the overlap. Increasing the number of sections
further from 4 to 10 slightly increases the prediction accuracy and
peaks at 67.92% with 8 sections. As the % of overlap increases from
5% to 20%, the accuracy decreases as expected. When there is 20%
overlapping packets, the accuracy for 1 section decreases further to
15.85%. As the number of sections is increased to 4, the accuracy is
39.06%. With 10 sections, the accuracy is 48.47%. This is expected
as the overlapping part becomes bigger, it affects more sections,
which makes prediction of the whole website harder. As shown
in [9] and later in Section 5, the difference in prediction accuracy
in predicting websites A and B is because the beginning of a trace
is more important than the end when predicting a website.
b) Sectioning by time duration: Figure 15 and Figure 16 show