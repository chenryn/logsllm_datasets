lunchltems[3]
我们使用数组下
标来速历项。
这是一个Menutem数组。
7
你现在的位置》
323
---
## Page 360
封装遍历
③现在我们创建一个对象，将它称为迭代器（Iterator），利用它来
封装“遍历集合内的每个对象的过程”。先让我们在ArrayList上
我们从6reakiastMenu中取得一个
试试：
莱单项选代器。
Iterator iterator=breakfastMenu.createIterator();
当还有其他项时
while（iterator.hasNext())(
MenuItem menuItem=(MenuItem)iterator.next();
7
next()
取得下一项。
get(2)
get(3)
get(1)
Arraylist
get(o)
客户只需要调用hasNext（）和next（）
而选代器会略中调用Arraylist的set(）。
4
）将它也在数组上试试：
Iterator iterator =lunchMenu.createIterator();
while(iterator.hasNext()){
MenuItemmenuItem =(MenuItem)iterator.next();
数组
next()
lunchltems[0]
哇塞！这个代碍和上面的
breaktastMena代码究全一样。
lunchltems[1]
lunchltems[2]
这里的情况也是一样的：客户只需调用
Tterato
lunchltems[3]
hasNext(）和next（）即可：而选代器会结中使
用数组的下标。
324
第9章
---
## Page 361
选代器与组合模式
会见送代器模式
看起来我们对遍历的封装已经奏效了；你大概也已经猜到，这正是
一个设计模式，称为选代器模式（IteratorPattern）。
关于选代器模式，你所需要知道的第一件事情，就是它依赖于一个
名为选代器的接口。这是一个可能的选代器的接口：
hasNext(方法告诉我们，
是否在这个聚合中还有
更多的元素。
Iterator
hasNext()
next()
next(）方法返图这个聚
合中的下一个对象。
现在，一且我们有了这个接口，就可以为各种对象集合实现
选代器：数组、列表、散列表如果我们想要为数组实现
选代器，以便使用在DinerMenu中，看起来就像这样：
当我们说“集合”（eollection）的
时候，我们指的是一群对象。其存储方
>
式可以是各式各样的数据结构，例如：列
Iterator
hasNext()
表、数组、散列表，无论用什么方式存储，
next()
一律可以报为是集合，有时候也被称为聚
合（aggregate）。
DinerMenaJterator实现了送代器，知
送如何进历数组莱单项。
DinerMenulterator
hasNext)
next)
让我们继续实现这个选代器，并将它挂钩到DinerMenu中，看
它是如何工作的
你现在的位置
325
---
## Page 362
制造一个迭代器
在餐厅菜单中加入一个送代器
想要在餐厅菜单中加入一个选代器，我们需要先定义选代器接口：
这是我们的两个方法：
其中，hasNext(）方法金返回一个布尔
public interface Iterator
值，让我们知道是否还有更多的元
boolean hasNext() ;
Object next () ;
….而next（）方法返回下一个
元素。
现在我们需要实现一个具体的选代器，为餐厅菜单服务：
实现选代器接口。
public class DinerMenuIterator implements Iterator {
position记录当前激组遍历的
MenuItem[] items;
int position = 0;
位置。
public DinerMenuIterator(MenuItem[] items) (
this.items =items;
构造器需要被传入一个菜
单项的数组当做参数。
public object next(){
MenuItem menuItem = items[position];
next(）方法返回数组内的下
position - position + 1;
return menuItem;
项，并递增其位置。
public boolean hasNext() (
if (position >= items.length 1l items[position]
=null)
return false;
A
}else{
return true;
hasNext(）方法金检叠我们是否已
因为使用的是固定长度的数组，所以
经取得数组内所有的元素。如果
我们不但要检童是否超出了数组长度，
还有元素待进历，则返回te。
也必须检查是否下一项是null，如果是
null，就表示没有其他项了。
326
第9章
---
## Page 363
选代器与组合模式
用选代器改写餐厅菜单
好了，我们已经有了选代器。现在就利用它来改写餐厅菜单：我们只需加入一个
方法创建一个DinerMenulterator，并将它返回给客户：
public class DinerMenu (
static final int MAX_ITEMS = 6;
int numberOfItems =0;
MenuItem[] menuItems;
我们不再需要setMenaJtems（）方法，
//构造器在这里
而且事实上，我们根本不想要这个方
//addItem在这里
法，因为它全暴露我们内部的实现。
publicMenuItem(]getMenuftems()t
returnmenuItemo
+
public Iterator createIterator(）{
这是czeateJtezatoz（）方法，用
return new DinerMenuIterator(menuItems);
来从莱单项数组创建一个
DinerMenaJterator，并将它返回
//菜单的其他方法在这里
给客户。
返回选代器接口。客户不需要知道餐厅莱单是如何
维护莱单项的，也不需要知道选代器是如何实现的。
客户只需直接使用这个选代器遍历莱单项即可。
请继续完成PancakeHouseIterator的实现，并对PancakeHouseMenu类作出必要的修改。
你现在的位置
327
---
## Page 364
女招待遍历
修正女招待的代码
我们需要将选代器代码整合进女招待中。我们
应该摆脱原本余的部分。整合的做法相当直
接：首先创建一个printMenuO方法，传入一个
选代器当做此方法的参数，然后对每一个菜单
都使用createIterator(方法来检索选代器，并
经选代器改良成
将选代器传入新方法。
新版的我。
public class Waitress {
在构造器中，女招待照顾两个莱
PancakeHouseMenu pancakeHouseMenu;
DinerMenu dinerMenu;
public Waitress (PancakeHouseMenu pancakeHouseMenu, DinerMenu dinerMenu) (
this.pancakeHouseMenu = pancakeHouseMenu;
this.dinerMenu = dinerMenu;
这个ptintMenx（）方法为每
一个菜单各自创建一个进
public void printMenu (){
代器。
Iterator pancakeIterator = pancakeHouseMenu.createIterator();
Iterator dinerIterator = dinerMenu.createIterator();
System.out.println ("MENU\n-=
-\nBREAKFAST") ;
然后对每个选代器调用重载的
printMenu (pancakeIterator);
System.out.println("\nLUNCH");
(overlouded）ptintMens).将选
printMenu(dinerIterator);
代器传入
测试是否还有其他
项。
这个重载的
private void printMenu(Iterator iterator) {
while (iterator.hasNext()){
取得下
printMena(）方法，使用
MenuItem menuItem = (MenuItem) iterator.next () ;
一项
选代器，来进历莱单
System.out.print(menuItem.getName() + ",");
System.out.print(menuItem.getPrice () + " --
"）;
项并打印出来。
System.out.print1n (menuItem.getDescription());
现在我们只需
使用该项来取得名
//
其他的方法
要一个结环就可
称、价格和叙述
以了。
并打印出来。
328
真6
---
## Page 365
选代器与组合模式
测试我们的代码
快来测试吧！让我们写一些测试程序，然后看看女
招待如何工作.
首先我们创建了新的莱单。
public class MenuTestDrive {
public static void main (String args [l)(
PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu () ;
DinerMenu dinerMenu = new DinerMenu () ;
个女招待，并将莱
waitress.printMenu () ;
单传送给始。
然后我们把莱单打印出
来。
执行结果.
java DinerMenuTestDrive
首先我们遍历煎饼
MENU
屋莱单
BREAKFAST
然后是午餐菜
Blueberry
Pancakes,3.49 -- Pancakes made with fresh blueberries
单，所用的遍
历代码相同
LUNCH
Vegetarian BLT，2.99--（Fakin')Bacon with lettuce & tomato on whole wheat
BLT，2.99--Bacon with lettuce &tomatoon wholewheat
Soup of the day,3.29--Soup of the day,witha sideofpotato salad
Hotdog，3.05 --A hot dog，with saurkraut,relish,onions,topped with cheese
Steamed Veggies and Brown Rice,3.99 -- Steamed vegetables over brown rice
Pasta,3.89-- Spaghetti with Marinara Sauce,and a slice of sourdough bread
你现在的位置
329
---
## Page 366
选代器的优点
太好了！不需要改变
到目前为止，我们做了些
代码，只需要加入一个
什么？
createlterator(）方法就可
&了。
D
首先，我们让对象村的厨师们非常快乐。他们可以
保持他们自己的实现又可以摆平差别。只要我们给
他们这两个选代器（PancakeHouseMenuIterator和
DinerMenuIterator），他们只需要加入一个create-
Iterator(方法，一切就大功告成了。
这个过程中，我们也帮了我们自己。女招待将会更容
易维护和扩展。让我们来彻底检查一下到底我们做了
素舍汉堡
哪些事，以及后果如何：
难以维护的女招待实现
由送代器支持的新女招待
菜单封装得不好：餐厅使用的是
菜单的实现已经被封装起来了。女招
ArrayList，而煎饼屋使用的是数组。
待不知道菜单是如何存储菜单项集合
的。
需要两个循环来遍历菜单项。
只要实现选代器，我们只需要一个循
环，就可以多态地处理任何项的集合。
女招待捆绑于具体类（MenultemU和
女招待现在只使用一个接口（选代
ArrayList)。
器）。
女招待捆绑于两个不同的具体菜单类，
现在菜单的接口完全一样，但是，哎
尽管这两个类的接口大致上是一样的。
呀！我们还是没有一个共同的接口，也
就是说女招待仍然捆绑于两个具体的菜
单类。这一点我们最好再修改一下。
330
第9章
---
## Page 367
选代器与组合模式
到目前为止，我们有些什么····
在清理一切之前，让我们从整体上来看看目前的设计。
这两个莱单都实现一样的方
这个选代器让女招待能够从具体类的实
法，但是并没有实现相同的
现中解耦。她不需要知道莱单是使用数
我们现在使用一
接口，我们将修改这一点
组、Arraylist，还是便利贴来实瑞。她只
个共同的选代器
好让女招待不全依赖于具体
关心姑能够取得选代器。
接口.实现了两
的莱单。
个具体类。
Waitress
>
printMenu(
lterator
hasNext)
next)
DinerMenu
terator()
Din
hasNex0
hasNext(
next(
exd0
请注意，进代器让我们能够进历警合中的每个元
整拼屋莱单和餐厅莱单都实现了新的
素，而不全去强迎聚合必须提供方法，让我们在
cteateJterator（）方法，它们负责为各自
它的元素中游走。我们也可以在聚合的外面实现
的莱单项实现创建选代器。
进代器：捕句话说，我们封装了遍历。
你现在的位置
331
---
## Page 368
改进选代器
做一些改良····
好了，我们已经知道这两份菜单的接口完全一样，但没有为它们设计一个共同的接口。所以，
接下来就要这么做，让女招待更干净一些。
你可能会奇怪，为什么我们不使用Java的Iterator接口呢一我们之所以这么做，是为了要让你了
解如何从头创建一个选代器。现在我们的目的已经达到了，所以就要改变做法，开始使用Java的
Iterator接口了。而这也会带来更多的好处。什么好处呢？很快你就会知道了。
首先，让我们看看java.util.Iterator接口：
>
这看起来就和我们之前的定义一样。
lterator
hasNert)
除了有一个附如的方法，元许我们从聚
nexti
remove()