[62] Kinsta Inc., “WordPress Market Share Statistics (2011-2019),” 05-Feb-2019. [Online]. Available: https:
//kinsta.com/wordpress-market-share/. [Accessed: 27-Jun-2020]
[63] S. Balkhi, “How to Use the WordPress Desktop App for Your Self-Hosted Blog,” WPBeginner,
12-Mar-2018. [Online]. Available: https://www.wpbeginner.com/beginners-guide/how-to-use-
the-wordpress-desktop-app-for-your-self-hosted-blog/. [Accessed: 27-Jun-2020]
[64] M. Austin, “Remote Code Execution in Wordpress Desktop,” HackerOne, 31-Dec-2017. [Online]. Avail-
able: https://hackerone.com/reports/301458. [Accessed: 27-Jun-2020]
[65] codecolorist, “Electron’s bug, ShellExecute to blame?” Medium, 09-Feb-2018. [Online]. Available: https:
//medium.com/0xcc/electrons-bug-shellexecute-to-blame-cacb433d0d62. [Accessed: 28-Jun-
2020]
[66] A. Al-Qabandi, “Microsoft Edge RCE - (CVE-2018-8495),” 10-Oct-2018. [Online]. Available: https:
//leucosite.com/Microsoft-Edge-RCE/. [Accessed: 28-Jun-2020]
[67] thewhiteh4t, “Ubisoft UPlay RCE Exploit,” 16-Nov-2018. [Online]. Available: https://thewhiteh4t.
github.io/2018/11/16/ubisoft-uplay-rce-exploit.html. [Accessed: 28-Jun-2020]
[68] D. Penner, “Fun With Custom URI Schemes,” 22-May-2019. [Online]. Available: https://zero.lol/
2019-05-22-fun-with-uri-handlers/. [Accessed: 28-Jun-2020]
[69] C. Plett, E. Ross, T. Petersen, M. Jacobs, L. Poggemeyer, and B. Mammen, “msdt,” Microsoft
Docs, 03-Jun-2020. [Online]. Available: https://docs.microsoft.com/en-us/windows-server/
administration/windows-commands/msdt. [Accessed: 28-Jun-2020]
[70] M. Satran, D. Batchelor, and A. Wilson, “Getting Started with Parameter-Value Arguments,” Windows
Dev Center, 27-Nov-2019. [Online]. Available: https://docs.microsoft.com/en-us/windows/
win32/search/getting-started-with-parameter-value-arguments. [Accessed: 28-Jun-2020]
[71] Rocket.Chat Technologies Corp., “RocketChat/Rocket.Chat,” GitHub, 28-Jun-2020. [Online]. Available:
https://github.com/RocketChat/Rocket.Chat. [Accessed: 28-Jun-2020]
[72] M. Austin, “Remote Code Execution in Rocket.Chat Desktop,” HackerOne, 10-Oct-2017. [Online].
Available: https://hackerone.com/reports/276031. [Accessed: 28-Jun-2020]
[73] R. Nascimento, “Pull Request #8451: Improve markdown parser code,” RocketChat/Rocket.Chat on
GitHub, 10-Oct-2017. [Online]. Available: https://github.com/RocketChat/Rocket.Chat/pull/
8451. [Accessed: 28-Jun-2020]
[74] L. Carettoni and L. Stella, “Introduction,” Electronegativity Wiki, 14-Apr-2020. [Online]. Available:
https://github.com/doyensec/electronegativity/wiki. [Accessed: 13-Jun-2020]
[75] L. Masinter, T. Berners-Lee, and R. T. Fielding, “RFC 3986: Uniform Resource Identifier (URI): Generic
Syntax,” IETF, Jan-2005. [Online]. Available: https://tools.ietf.org/html/rfc3986#section-
3.1. [Accessed: 22-Jul-2020]
[76] C. Kerr et al., “Supported Versions,” Electron Documentation, 06-Jul-2020. [Online]. Available: https:
//www.electronjs.org/docs/tutorial/support#supported-versions. [Accessed: 09-Jul-2020]
[77] Snyk Ltd., “Electron vulnerabilities,” Snyk, 07-Jul-2020. [Online]. Available: https://snyk.io/vuln/
npm:electron. [Accessed: 09-Jul-2020]
[78] GitHub Inc., “electron/releases README,” GitHub, 09-Jul-2020. [Online]. Available: https://github.
10. Bibliography
57
com/electron/releases. [Accessed: 09-Jul-2020]
[79] The Jitsi contributors, “jitsi/jitsi-meet,” GitHub, 29-Jun-2020. [Online]. Available: https://github.
com/jitsi/jitsi-meet. [Accessed: 10-Jul-2020]
[80] C. Hamerling, “Pull Request #389: Add protocol to open conference links with the app - Replaces
#263,” jitsi/jitsi-meet-electron Issue Tracker on GitHub, 09-Jun-2020. [Online]. Available: https:
//github.com/jitsi/jitsi-meet-electron/pull/389. [Accessed: 10-Jul-2020]
[81] A. Ojamaa and K. Düüna, “Security Assessment of Node.js Platform,” in Information Systems Security,
Berlin, Heidelberg, 2012, pp. 35–43, doi: 10.1007/978-3-642-35130-3_3.
[82] C.-A. Staicu, M. Pradel, and B. Livshits, “Synode: Understanding and Automatically Preventing In-
jection Attacks on Node.js,” in Proceedings 2018 Network and Distributed System Security Sym-
posium, San Diego, CA, 2018, doi: 10.14722/ndss.2018.23071 [Online]. Available: https://www.
ndss-symposium.org/wp-content/uploads/2018/02/ndss2018_07A-2_Staicu_paper.pdf.
[Ac-
cessed: 18-Jul-2020]
[83] M. Samuel et al., “A Roadmap for Node.js Security,” 03-May-2018. [Online]. Available: https://
nodesecroadmap.fyi/. [Accessed: 18-Jul-2020]
[84] A. Miller and S. Zitzman, “The State of Open Source Security 2020,” Snyk Ltd., Jun. 2020 [Online].
Available: https://snyk.io/open-source-security-report/. [Accessed: 18-Jul-2020]
[85] L. Tal and J. Picado, “10 npm Security Best Practices,” Snyk Blog, 19-Feb-2019. [Online]. Available:
https://snyk.io/blog/ten-npm-security-best-practices/. [Accessed: 18-Jul-2020]
[86] L. Carettoni, “Electronegativity: A Study of Electron Security,” Black Hat USA 2017, 27-Jul-
2017 [Online]. Available: https://www.blackhat.com/docs/us-17/thursday/us-17-Carettoni-
Electronegativity-A-Study-Of-Electron-Security.pdf. [Accessed: 18-Jul-2020]
[87] M. Austin, “MarkDoom: How I Hacked Every Major IDE in 2 Weeks,” LevelUp 2017, 17-Jul-2017
[Online]. Available: https://www.youtube.com/watch?v=nnEnwJbiO-A. [Accessed: 18-Jul-2020]
[88] S. Väli, “Analysis of Electron-Based Applications to Identify XSS Flaws Escalating to Code Execution
in Open-Source Applications,” Dec. 2017 [Online]. Available: https://digikogu.taltech.ee/en/
Download/01ec8ff7-fff8-4a83-86a4-4048178a3ed5. [Accessed: 18-Jul-2020]
[89] A. Rapley, X. Bellekens, L. A. Shepherd, and C. McLean, “Mayall: A Framework for Desktop JavaScript
Auditing and Post-Exploitation Analysis,” Informatics, vol. 5, no. 4, p. 46, Dec. 2018, doi: 10.3390/in-
formatics5040046. [Online]. Available: https://www.mdpi.com/2227-9709/5/4/46. [Accessed: 18-
Jul-2020]
[90] Doyensec LLC, “Doyensec’s Blog.” [Online]. Available: https://blog.doyensec.com/. [Accessed: 19-
Jul-2020]
[91] F. Rieseberg, M. Lee, and C. Kerr, “Technical Differences Between Electron and NW.js,” Electron Doc-
umentation, 08-Apr-2020. [Online]. Available: https://www.electronjs.org/docs/development/
electron-vs-nwjs. [Accessed: 23-Jul-2020]
[92] A. Benoit, NW.js Essentials. Packt Publishing Ltd, 2015.
[93] R. Wang, C. Liu, O. Aleynik, and Y. Fan, “Security in NW.js,” NW.js Documentation, 09-Jun-2016.
[Online]. Available: https://docs.nwjs.io/en/latest/For%20Users/Advanced/Security%20in%
20NW.js/. [Accessed: 18-Jul-2020]
10. Bibliography
58
[94] The Tauri contributors, “Tauri Studio,” 12-Jul-2020. [Online]. Available: https://tauri.studio/.
[Accessed: 18-Jul-2020]
[95] The Tauri contributors, “Security,” Tauri Documentation, 25-May-2020. [Online]. Available: https:
//tauri.studio/docs/about/security. [Accessed: 18-Jul-2020]
[96] The Neutralino contributors, “NeutralinoJs,” 16-Jul-2020. [Online]. Available: https://neutralino.
js.org/. [Accessed: 18-Jul-2020]
[97] The Neutralino contributors, “Why Neutralinojs is better for lightweight apps? — proof,” GitHub,
16-May-2020. [Online]. Available: https://github.com/neutralinojs/evaluation. [Accessed: 18-
Jul-2020]
[98] S. Suranga, “Neutralinojs Internals,” 99X Technology Blog, 01-Mar-2019. [Online]. Available: https:
//www.99xtechnology.com/blog/research/neutralinojs-internals/. [Accessed: 23-Jul-2020]
[99] L. Stella, “Signature Validation Bypass Leading to RCE In Electron-Updater,” Doyensec’s Blog, 24-Feb-
2020. [Online]. Available: https://blog.doyensec.com/2020/02/24/electron-updater-update-
signature-bypass.html. [Accessed: 20-Jul-2020]
A. Appendix
A.1. Vulnerabilities That Were Considered
For a full list of the vulnerabilities that were considered for chapter 4, see Table A.1.
A.2. Exposé
The following exposé was submitted as the proposal for this bachelor’s thesis. It served as the task definition.
Introduction and Motivation
Electron is a framework for building cross-platform applications using regular web technologies like Java-
Script, HTML and CSS. It combines the Chromium browser engine with the Node.js native APIs. Electron
apps are getting more and more popular, often replacing previous native ones. There are already hundreds of
applications built on Electron, including popular messaging apps like Slack Desktop, Skype and WhatsApp
Desktop, IDEs like Atom and Visual Studio Code or even disk image writing utilities like Balena Etcher.1
When looking at the security aspects of these applications, one has to consider that they are a combination
of desktop and web apps and adjust the threat model accordingly. While many of the well-known attack
vectors of the web still apply, they may be more or less severe or lead to different problems in the context
of Electron. These considerations will vary between apps shipping their own internal (local) “websites” and
those merely wrapping an existing (remote) website.
For example, an XSS vulnerability on a website is already a critical problem. In an Electron app, it may
however—in addition—even lead to an RCE if the JavaScript code has access to native Node.js APIs. On
the other hand, a CSRF vulnerability in an internal website may not be as critical if the surrounding
“browser” doesn’t hold any session data.
Goal
The first part of this bachelor’s thesis will focus on the theoretical background and explore known attacks,
comparing their impact when affecting a web application and an Electron application. It will explain the
reasons for the differences in severity and effects.
Furthermore, it will describe the steps already being taken to avoid vulnerabilites and minimize the risks,
including for example recommendations given by the Electron developers2 and the default values of security-
relevant settings. Finally, it will look at documented existing vulnerabilities in Electron apps to get a first
insight into the state of Electron security in the wild.
The second part of the thesis will then try to give a broader picture of this situation in the form of
an empirical analysis of open and closed-source applications using Electron. Statistics on security-related
practices of a large number of Electron apps will be collected. These statistics will include static parameters
like the Electron version used (which allows determining the underlying Chromium and Node.js versions
to check for known vulnerabilities in those). In addition, they will also query whether the apps follow best
1GitHub Inc.: “Electron Apps”. https://www.electronjs.org/apps
2GitHub Inc.: “Security, Native Capabilities, and Your Responsibility: Electron Security Warnings”. https://www.electronjs.
org/docs/tutorial/security#electron-security-warnings
A.2. Exposé
60
Table A.1.: Documented vulnerabilities that were considered for chapter 4. The bold vulnerabilities were selected for further discussion.
A group of 1 means XSS due to use of dangerous functions, 2 means RCE due to use of shell.openExternal(), 3 means XSS escalation to RCE due to
Node integration and 4 means XSS escalation to RCE due to insecure preload or no context isolation.
Application
Groups
Cause
Report URL
Atom
1, 3
allowing  with file:// URLs
https://statuscode.ch/2017/11/from-markdown-to-
rce-in-atom
Bitwarden Desktop
2
login URLs passed to shell.openExternal()
https://cdn.bitwarden.net/misc/Bitwarden%
20Security%20Assessment%20Report.pdf (p. 5)
Discord Desktop
4
insecure preload script allowing IPC message
abuse
https://blog.doyensec.com/2019/04/03/subverting-
electron-apps-via-insecure-preload.html
GitHub Desktop
2
value from protocol handler passed to
shell.openExternal() (insecure filtering due
to macOS oddities)
https://pwning.re/2018/12/04/github-desktop-
rce/
Joplin Desktop
3, 4
lack of context isolation, allowing to override
Function.prototype.call()
https://blog.devsecurity.eu/en/blog/joplin-
electron-rce
Leanote
1, 3
rendering note titles as HTML
https://github.com/leanote/desktop-
app/issues/284
Mattermost
Desktop
2
images passed to shell.openExternal()
https://dev.to/nlowe/rce-in-mattermost-desktop-
earlier-than-420-5aef
Rocket.Chat
Desktop
1, 4
insecure Markdown parsing, no context
isolation allowing to override
RegExp.prototype.test()
https://hackerone.com/reports/276031
Signal Desktop
1
Rendering messages as HTML
https://web.archive.org/web/20200427095259/
https://ivan.barreraoro.com.ar/signal-desktop-
html-tag-injection/ (archived)
Signal Desktop
1
Rendering reply quotes as HTML
https://web.archive.org/web/20190517134857/
https://ivan.barreraoro.com.ar/signal-desktop-
html-tag-injection-variant-2/ (archived)
Signal Desktop
1
Using React’s dangerouslySetInnerHTML for
quote replies
https://thehackerblog.com/i-too-like-to-live-
dangerously-accidentally-finding-rce-in-signal-
desktop-via-html-injection-in-quoted-replies/
A.2. Exposé
61
Application
Groups
Cause
Report URL
Shiba
1, 3
insecure Markdown rendering
https://github.com/rhysd/Shiba/issues/42
Typora
1, 3
rendering HTML in Mermaid graphs
https://github.com/typora/typora-
issues/issues/3124
WhatsApp Desktop
1
javascript: URLs not filtered correctly
https://www.perimeterx.com/tech-
blog/2020/whatsapp-fs-read-vuln-disclosure/
Wire Desktop
4
insecure logger exposed in preload script
https://blog.doyensec.com/2019/04/03/subverting-
electron-apps-via-insecure-preload.html
WordPress.com for
Desktop
2
window.open() redirected to
shell.openExternal()
https://hackerone.com/reports/301458
A.2. Exposé
62
practices like not disabling security features or only loading remote content through HTTPS.
The evaluation of these statistics will then give an insight into how security-conscious Electron app devel-
opers are and may lead to recommendations for better defaults for example.
Research Tasks
Investigate known web vulnerabilites and attacks in the context of Electron apps.
Collect Electron apps from the Electron apps list [1] and GitHub.
(for closed-source apps:) Extract the (potentially obfuscated) source code for analysis.
Develop a program for automatically scanning Electron apps, potentially extending an existing one
aimed at checking individual apps3, and run that on the collected apps.
Evaluate the results of the statistics.
3Doyensec LLC: “Electronegativity”. https://github.com/doyensec/electronegativity