Explanation: s is already balanced.
Output: 0
Input: S = "QwER"
func checkstraightLine(coordinates [][]int) bool
package leetcode
return true
dyo := coordinates[1][1] - coordinates[O][1]
dx0 := coordinates[1][o] - coordinates[o][o]
乘法。 例如 a/b = c/d 换成乘法是 a*d = c*d。
for i := l; i kll count['w'］ >k ll count['e'］>k ll count['r'］>k{
 count[int(v)]++
} else{
if right+l >1 
high = mid 
 low = mid + 1 
---
## Page 1079
提示：
单元格”的数目。
行和列上的所有单元格的值加 1。请你在执行完所有 indices 指定的增量操作后，返回矩阵中“奇数值
indices[i] =[ri, ci] 中的 ri 和 ci 分别表示指定的行和列（从 O开始编号）。你需要将每对[ri, ci] 指定的
给你一个 n行 m 列的矩阵，
题目大意
Constraints:
Example 2: 
Example 1:
indices.
Return the number of cells with odd values in the matrix after applying the increment to all 
matrix.
Explanation: Final matrix = [[2,2],[2,2]]. There is no odd number in the fina]
Output:0
Input: n = 2， m = 2, indices = [[1,1],[0,0]]
The final matrix will be [[1,3,1],[1,3,1]] which contains 6 odd numbers.
After applying first increment it becomes [[1,2,1],[0,1,0]].
Explanation: Initial matrix = [[0,0,0],[0,0,0]].
Output: 6 
Input: n = 2, m = 3, indices = [[0,1],[1,1]]
0 <= indices[i] [1]< m
0 <= indices[i][o]  < n]
1 <= indices.length <= 100
1<= m <= 50
1<= n<= 50
0
最开始的时候，每个单元格中的值都是0。另有一个索引数组 indices,
I
7
7
CG•
CC
7
7
---
## Page 1080
代码
解题思路
·暴力方法按照题意模拟即可。
·给出一个n＊m 的矩阵，和一个数组，数组里面包含一些行列坐标，并在指定坐标上+1，问最后
func oddcellsl(n int, m int, indices [][]int) int {
/／解法二暴力法
func oddcells(n int, m int, indices [][]int) int 
//解法一暴力法
package leetcode
 n *m 的矩阵中奇数的总数。
for i:= O; i< n; i++ {
for -, pair := range indices {
rows,cols,count := make([]int, n),make([]int, m)，0
return res
for i := range matrix {
matrix, res := make([][]int, n)，0 
 0 <= indices[i][1] < m
0 <= indices[i][0]<n 
1 <= indices.length <= 100 
1<=m<=50 
1 <=n<= 50
1
for
for -, v := range m { 
 matrix[i] = make([]int, m) 
cols[pair[1]]++
rows[pair[0]]++
for j := O; j< n; j++ {
for i := O; i < m; i++ {
if v&l == 1 { 
 matrix[j][indice[1]]++
 matrix[indice[O]][i]++
 res++ 
, indice := range indices {
了
---
## Page 1081
 Example 2:
 Example 1:
Return the number of closed islands.
surrounded by 1s.
connected group of Os and a closed island is an island totally (all left, top, right, bottom)
Given a 2D grid consists of Os (land) and 1s (water). An island is a maximal 4-directionally
题目
1254. Number of Closed Islands
(group of 1s).
Islands in gray are closed because they are completely surrounded by water
Explanation:
Output:2
[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]] 
Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],
return count
for j:= O; j< m; j++ {
if (rows[i]+cols[j])%2 == 1 {
 count++
0
0
0
0
0
0
0
0
0
---
## Page 1082
代码
解题思路
为“封闭岛屿”。请返回封闭岛屿的数目。
屿”。
出发，每次可以往上下左右4个方向相邻区域走，能走到的所有陆地区域，我们将其称为一座“岛
有一个二维矩阵grid，每个位置要么是陆地（记号为0）要么是水域（记号为1）。我们从一块陆地
题目大意
Constraints:
 Example 3:
提示：
·给出一个地图，1代表海水，〇代表陆地。要求找出四周都是海水的陆地的总个数。
●0<= grid[ijj]<=1 
● 1 <= grid.length, grid[0].length <= 100 
●0<= grid[i][j] <=1 
●1 <= grid.length, grid[0].length <= 100
Output:2
Input: grid = [[1,1,1,1,1,1,1],
Output:1
Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
以是靠着地图边缘的。在此题中，靠着地图边缘的陆地不能最终计数到结果中。
这一题和第 200 题解题思路完全一致。只不过这一题要求必须四周都是海水，第 200 题的陆地可
，如果一座岛屿完全由水域包围，即陆地边缘上下左右所有相邻区域都是水域，那么我们将其称
[1,1,1,1,1,1,1]]
[1,0,0,0,0,0,1],
[1,0,1,1,1,0,1],
[1,0,1,0,1,0,1],
[1,0,1,1,1,0,1],
[1,0,0,0,0,0,1],
0
0
0
---
## Page 1083
func isIntInBoard(board [][]int, x, y int) bool {
[y] == 0 { 
func checkIslands(grid [][]int, visited *[][]bool, 
func closedIsland(grid [][]int) int 
package leetcode
[x]pL6  (t-([o]pu6)ual == < 1l 0 == < Il I-(pu6)uaL == x Il 0 == x) ! 
(*visited) [x] [y] = true
if n == 0 {
n := len(grid[0])
if m == 0 {
m := len(grid) 
*isEdge = *isEdge ll false
return res
for i := 0; i < m; i++ {
for i := O; i < m; i++ { 
res, visited := O, make([][]bool, m) 
*isEdge = true
 visited[i] = make([]bool，n)
ny := y + dir[i][1]
nx := x + dir[i][0]
for j := O; j < n; j++ {
 return 0
 return 0
 checkIslands(grid, visited, nx, ny, isEdge)
if grid[i][j] == O && !visited[i][j] {
isEdge := false 
if!isEdge {
checkIslands(grid, &visited, i, j, &isEdge)
 res++
，X,y int,isEdge *bool） {
---
## Page 1084
Example 2:
Example 1: