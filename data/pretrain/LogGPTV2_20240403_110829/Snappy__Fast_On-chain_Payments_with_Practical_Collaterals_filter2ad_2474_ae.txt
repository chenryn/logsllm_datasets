Proposition 1. For any two majority subsets M1 ⊆ S and
M2 ⊆ S, where S is the set of all the statekeepers, it holds
that M1 ∩ M2 (cid:54)= ∅.
Proof: The proof of this proposition follows directly from
the Pidgeonhole principle (or Dirichlet’s box principle) which
states that if n items are put in m containers for n > m then
at least one container contains multiple items.
No penalization of honest statekeepers. Above we showed
that an honest merchant who accepts a Snappy payment will
always receive his funds. Additionally, Snappy ensures that an
honest statekeeper cannot be penalized due to benign failures
such as network errors or crashes. As outlined in Section IV,
a merchant is penalized only if it approves two conﬂicting
transactions (same index, same customer). This simple policy
is sufﬁcient to protect all honest merchants in the case of
benign failures.
Privacy Payment privacy is largely orthogonal to our solution
and inherited from the underlying blockchain. For example, if
Snappy is built on Ethereum, for most parts Snappy customers
and merchants receive the level of privacy protection that
Ethereum transactions provide. In Section VII, we discuss
privacy in more detail.
B. Liveness
Next, we explain the liveness property of Snappy. Payment
processing is guaranteed when at least (cid:100)(k + 1)/2(cid:101) of the
statekeepers are reachable and responsive. If we assume that
all the statekeeping nodes are equally reliable then each one of
them should have an availability of only (cid:100)(k + 1)/2(cid:101). We note
that Snappy ensures safety and liveness under slightly different
conditions. In that regard Snappy is similar to many other
payment systems where liveness requires that the payment
processor is reachable but the same is not needed for payment
safety.
VI. SNAPPY EVALUATION
In this section we evaluate Snappy and compare it with
previous solutions.
the payment approval
A. Latency
In Snappy,
latency depends on two
factors: (a) the number of approving statekeepers and (b) the
speed/bandwidth of the network links between the merchants
and the statekeepers. The number of customers and merchants
has no effect on the approval latency and its impact on the
collateral size is discussed in Section VI-B.
To evaluate our Requirement R1 (fast payments), we sim-
ulated a setup with several globally-distributed statekeepers
and merchants running on Amazon EC2 instances. Both the
statekeepers and the merchants were implemented as multi-
threaded socket servers/clients in Python 3.7 and used low-end
machines with 2 vCPUs and 2 GB of RAM. We distributed
our nodes in 10 geographic regions (4 different locations in
the US, 3 cities in the EU, and 3 cities in the Asia Paciﬁc
region).
As seen in Figure 4, we tested the payment approval latency
for different numbers of statekeepers and various rates of
incoming requests. In our ﬁrst experiment, we initialized 100
merchants who collectively generate 1,000 approval requests
per second. We observe that for smaller consortia of up to
40 statekeepers (i.e., at least 21 approvals needed), Snappy
approves the requests within 300ms, while larger consortia
require up to 550ms on average. This shows that the approval
latency increases sub-linearly to the number of statekeepers
and experimentally validates the low communication com-
plexity of Snappy. In particular, the latency doubles for a
5-fold increase in the consortium’s size i.e., 40 statekeepers
require ∼300ms to collectively approve a request while 200
statekeepers require ∼550ms. We also tested our deployment
for higher loads: 2,500 and 5,000 requests per second respec-
tively. Our measurements show a slightly increased latency due
to the higher resource utilization at the statekeeping nodes.
However, the relationship between the number of statekeepers
and the approval latency remains sub-linear. We observe, in
Figure 4, that the variance increases both with the number
of statekeepers and the throughput. However, in all cases the
payment approvals were completed in less than a second.
These results demonstrate the practicality of Snappy as it
remains under the 2-second approval latency mark that we
consider a reliable user experience benchmark [4]–[6]. The
measured latencies are consistent with past studies measuring
the round-trip times (RTT) worldwide [39] and within the
Bitcoin network [40], [41]. In particular, the majority of the
bitcoin nodes have an RTT equal or less to 500ms, while only
a tiny fraction of the network exhibit an RTT larger than 1,5
seconds.
An optimized Snappy deployment that uses more capable
machines will likely achieve better timings for the aforemen-
tioned loads and even larger statekeeping consortia. We did not
perform such performance optimizations, as Snappy is best
suited to deployments where the number of statekeepers is
moderate (e.g., k = 100). For larger consortia, the statekeeper
collaterals grow large (Section VI-D) and a centralized-but-
trustless deployment is preferable (Appendix B).
B. Scalability
We now evaluate how many customers and merchants
Snappy can handle (Requirement R2–large deployments).
Regarding the number of customers, the only scalability
issue is that the recent transactions of each customer (e.g., past
24 hours) need to be recorded to the Arbiter’s state. Thus,
its storage needs grow linearly to the number of customers.
Since Ethereum contracts do not have a storage limit, our
implementation can facilitate hundreds of thousands or even
millions of customers. In blockchain systems that allow smart
Fig. 4: Payment approval latency. Payment approval latency for
varying rates of incoming approval requests that each corresponds to
one purchase.
contracts to examine past transactions, there is no need for
the Arbiter to log transactions into the contract’s state and the
required storage is reduced signiﬁcantly.
As shown in the previous section, Snappy can easily
support 100-200 statekeeping merchants which is the intended
usage scale of our solution. Moreover, due to the low commu-
nication complexity of our protocol, an optimized deployment
could also support a few thousand statekeeping merchants with
approval latency of less than 4 seconds. However, in cases
of very large deployments with several thousands merchants,
it is preferable to allow merchants to decide if they want to
deposit a collateral and perform statekeeping tasks or simply be
able to receive Snappy payments. Such a deployment remains
trustless towards the statekeeping merchants and decentralized
(but not fully), while it can support a much larger number of
non-statekeeping merchants. This design is further discussed
in Appendix B.
C. Processing Cost
To evaluate our Requirement R3 (cheap payments), we im-
plemented the Arbiter smart contract in Solidity for Ethereum,
and measured the Ethereum gas cost of all Snappy operations.
Our cost evaluation corresponds to a case where merchants run
a Snappy instance non-proﬁt. Joining a non-proﬁt consortium
allows merchants to accept fast and safe payments without
having to pay fees to external entities such as card payment
processors. Additional fees may be charged in for-proﬁt se-
tups. Table III summarizes our results and provides the USD
equivalents using the current conversion rate and a Gas price
(Gwei) of 7.8.
Registration cost. The one-time registration cost for mer-
chants and customers is very low (67, 000 Gas that equals to
$0.06), while statekeepers have to pay a slightly increased cost
($0.48), due to veriﬁcation of the proof of knowledge for the
statekeeper’s BLS private key to prevent rogue key attacks [38].
The cost of the collateral clearance and withdrawal operations
for both customers and statekeepers are also inexpensive,
requiring $0.04 and $0.02.
Payment cost. The cost of a payment, in the absence of an
attack, is 169, 000 Gas ($0.16), mostly due to the cost of
11
TABLE III: Cost of Snappy operations.
Function
Client/Merchant Registration
Statekeeper Registration
Clear Collateral
Withdraw Collateral
Process Payment
Gas
USD
67, 000
510, 000
42, 000
23, 000
169, 000
0.06
0.48
0.04
0.02
0.16
TABLE IV: Worst-case claim settlement cost in Gas and USD.
Minimum
Majority
50
100
150
200
250
Pending Transactions per Customer
0
1.9M ($1.79)
3.1M ($2.92)
4.2M ($3.96)
5.4M ($5.09)
6.6M ($6.22)
1
2.7M ($2.54)
4.3M ($4.05)
5.8M ($5.47)
7.4M ($6.984)
9.0M ($8.494)
2
3.5M ($3.30)
5.5M ($5.19)
7.4M ($6.98)
9.4M ($8.87)
11.3M ($10.66)
3
4.3M ($4.05)
6.6M ($6.22)
9.0M ($8.49)
11.4M ($10.75)
13.7M ($12.93)
storing information about the transaction. This is roughly eight
times as expensive as a normal Ethereum transaction that does
not invoke a smart contract. In comparison, Mastercard service
fees are ∼1.5% of the transaction value [42]. For example, a
payment of $15 will cost to the merchant $0.22, while in a
payment of $100 the fees will rise to $1.5. Snappy compares
favorably to these charges. BLS signatures [33] enabled us to
aggregate the approval signatures, signiﬁcantly reducing both
the transaction size and the processing costs.
Claim settlement cost. While our solution enables merchants
to accept payments from customers with arbitrarily many
pending transactions (constrained only by the customer’s own
collateral), the Ethereum VM and the block gas limits constrain
the computations that can be performed during the settlement
process. To examine these constraints, we consider the gas
costs for different numbers of pending transactions, and state-
keeper quorum sizes. While the number of the statekeepers
is seemingly unrelated, it affects the cost of the settlement
due to the aggregation of the public keys. In Appendix B, we
discuss a special case, where each customer is allowed to have
only one transaction pending which simpliﬁes settlement and
reduces its cost signiﬁcantly.
Table IV shows the worst-case gas costs of settlement
which is few dollars for a typical case (e.g., $1.79 when k =
100 and there is no pending transactions).4 Given Ethreum’s
gas limit of approximately 8M gas units per block, Snappy
claim settlement can either scale up to k = 499 statekeepers
(250 approvals) with no pending transactions (6.6M Gas), or to
3 pending transactions per customer (6.6M Gas) with k = 199
statekeepers (100 approvals).
D. Collateral Comparison
To evaluate our Requirement R2 (practical collaterals), we
compare our deposits to known Layer-2 solutions, as shown
in Table V. For our comparisons, we use example parameter
values that are derived from real-life retail business cases.
4These costs were calculated by assuming that the adversary speciﬁcally
crafts previous transactions to maximize the computational load of the settle-
ment. To prevent an adversary from increasing the claim processing costs, the
Arbiter contract could reject any transactions that have more approvals than
the minimum necessary.
Customer
e · k
$1,000
$25,000
Solution
Channels [8], [9]
(cid:44)→ Small Shops
(cid:44)→ Large Retailers
Hubs [12], [13]
(cid:44)→ Small Shops
(cid:44)→ Large Retailers
Snappy
(cid:44)→ Small Shops
(cid:44)→ Large Retailers
TABLE V: Collateral comparison.
Individual
Operator
Combined
e
$10
$250
max(et) (cid:80)
$5
$100
k max(et)·pt
$3,000
$150,000
(cid:80)
n e
$1M
$250M
(cid:80)
k max(et)·pt · k
$300,000
$15M
Our “small shops” scenario is based on sales numbers
from [43]–[45]. The system has n = 100, 000 customers
and k = 100 merchants. The daily average expenditure of
a customer per merchant is e = $10 and the expenditure of
a customer within t = 3 minutes blockchain latency period is
et = $5. The number payments received by a merchant within
the same time-period is pt = 6 (i.e., one customer payment
every 30 seconds).
Our “large retailers” example corresponds to the annual
sales of a large retailer in the UK [21], [22]. In this case, we
have n = 1 million customers, k = 100 merchants, e = $250,
et = $100 and pt = 15 (i.e., one payment every 12 seconds).
Customer collateral. In payment channels,
the customer
collateral grows linearly with the number of merchants. This
leads to large customer collaterals ($1, 000 and $25, 000) in our
example cases. Payment hubs alleviate this problem, but they
still require customers to deposit their anticipated expenditure
for a speciﬁc duration (e.g., e = $250), and replenish it
frequently. Snappy requires that customers deposit a collateral
that is never spent (unless there is an attack) and equals the
maximum value of payments they may conduct within the
blockchain latency period (e.g., et = $100).
Merchant collateral. In payment hubs, the operator’s deposit
grows linearly with the number of customers in the system,
since the operator must deposit funds equal to the sum of the
customers’ deposits [12]–[14]. That is, the operator collateral
must account for all registered customers, including the cur-
rently inactive ones. Given our examples, this amounts to $1M
and $250M for the “small shops” and the “larger retailers”
cases, respectively.
In Snappy, each merchant that operates as a statekeeper
deposits enough funds to cover the total value of sales that
the merchants conduct within the latency period t. Once a
transaction gets successfully ﬁnalized on the blockchain (i.e.,
after t), the statekeeper can reuse that collateral in approvals
of other payments. Thus, the total size of this collateral is
independent of the number of registered customers, and is
proportional to the volume of sales that merchants handle. In
other words, the statekeeper collateral accounts only for the
customers that are active within the 3-minute latency period.
Given our examples, this amounts to $3,000 and $150,000
which are three orders of magnitude less than in payment hubs.
The combined deposit by all statekeepers (merchants) is shown