# 一步步学习Webassembly逆向分析方法
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在强网杯2019线上赛的题目中，有一道名为Webassembly的wasm类型题，作为CTF新人，完全没有接触过wasm汇编语言，对该类型无从下手，查阅相关资料后才算入门，现将Webassembly的静态分析和动态调试的方法及过程整理如下，希望能够对于CTF萌新带来帮助，同时如有大佬光顾发现错误，欢迎拍砖予以斧正。
## 1.WebAssembly基本概念
在开始Webassembly逆向分析之前，需要了解其基本概念和基础知识，由于自己也是初学者，防止对大家的学习产生误导，在此将学习资料链接给出。
  * [`图解WebAssembly`](https://www.w3ctech.com/topic/2011)
  * [`理解 WebAssembly JS API`](https://www.w3ctech.com/topic/2014)
  * [`理解WebAssembly文本格式`](https://developer.mozilla.org/zh-CN/docs/WebAssembly/Understanding_the_text_format)
总体来说，wasm可以理解为一种可以由JavaScript调用，并与html交互的二进制指令格式文件。
## 2.处理wasm文件
在逆向wasm的过程中，由于其执行的是以栈式机器定义的虚拟机的二进制指令格式，因此直接进行逆向分析难度较大，需要对wasm文件进行处理，增强可操作性，提高逆向的效率。在此参考了[`《一种Wasm逆向静态分析方法》`](https://xz.aliyun.com/t/5170)一文，主要利用了[`WABT（The
WebAssembly Binary Toolkit）`](https://github.com/WebAssembly/wabt)工具箱实现。
###  2.1反汇编
安装WABT工具后，在/wabt/build文件中会有各种小工具。利用wasm2wat工具可以生成wasm汇编文本格式的.wat文件。
    ./wasm2wat ../webassembly.wasm -o webassembly.wat
输入上述语句可以得到webassembly.wat文件。
###  2.2反编译
利用wasm2c工具可以生成c语言文本格式的`*.c`和`*.h`代码文件。
    ./wasm2c ../webassembly.wasm -o webassembly.c
输入上述语句可以得到webassembly.h和webassembly.c文件。
###  2.3重新编译
得到webassembly.h和webassembly.c文件后就可以使用gcc编译得到常见的`*.o`目标文件了，这里需要将/wabt/wasm2c中的wasm-rt.h，wasm-rt-impl.c，wasm-rt-impl.h文件复制出来。
    gcc -c webassembly.c -o webassembly.o
输入上述语句可以得到webassembly.o文件。
## 3.静态分析
经过了wasm处理之后，对wasm的分析就可以利用webassembly.o文件在IDA中进行了。
###  3.1寻找main函数
IDA自动分析之后可以直接找到`main`函数。
###  3.2寻找关键函数
在`main`函数中只调用了`f54`和`f15`两个函数，进入函数就会发现`f54`函数比较复杂，进入`f15`函数可以看到疑似加密过程的函数。
可以搜索魔数`0x61C88647`寻找加密算法。
其实从汇编语言中可以看到，魔数`0x61C88647`应该是`0x9E3779B9`，即可知这里是进行了四次`XTEA`加密算法。
继续观察`f15`函数可以看到如下代码。
注意到`'x65x36x38x62x62x7d'`的二进制数据为字符串`'e68bb}'`，刚好符合flag的尾部格式，应该是未加密部分的数据，可以看出，该程序是对输入的数据进行XTEA加密，如果等于给出的密文，则输入即为flag。
到此，就可以写出exp得到flag了。
## 4.动态分析
上述静态分析过程已经可以得到flag，这里通过动态跟踪该程序整理一下动态调试分析的方法。这里采用chrome浏览器进行动态调试分析，用到了[`chrome-wasm-debugger`](https://github.com/itszn/chrome-wasm-debugger)工具观察内存信息。
###  4.1环境搭建
利用python3自带的http服务，输入以下命令，在8888端口开启一个简单的服务器用于动态调试。
    python -m http.server 8888
打开chrome浏览器，输入地址`http://127.0.0.1:8888/webassembly.html`即可正常加载运行，此时点击`WASM
debuger`插件工具，即可attach到当前浏览器，会显示“‘WASM
debugger’正在调试此浏览器”的字样，然后按下`Control+Shift+J` 打开开发人员工具并转到控制台。
###  4.2寻找关键断点
一般程序动态分析的关键就在于断点的寻找，找到合适的断点，便于分析程序的执行流程和数据处理情况。在动态分析Webassembly程序的时候，可以同时在JS脚本和wasm文件下断点，就能更加有效地达成上述目的。
该程序在运行后弹出了一个窗口，并伴有`input:`的字样，那么就可以在JS脚本中搜索该文字，找到弹出窗口的程序语句，并在此处点击设置断点。
设置断点之后刷新页面重新运行程序，就可以看到程序断在了此处，找到了关键断点，下面就可以对程序进行调试分析了。
###  4.3调试分析
找到关键断点后，观察右边的函数调用栈，可以看到程序运行到此处的函数调用过程如下。
    f16 --> f54 --> f32 --> f34 --> f28 --> __syscall145 --> doReadv --> read --> read --> get_char
结合IDA静态分析过程，`f16`即为`main`函数，可以看到`main`函数调用了静态分析过程中忽略的`f54`函数，那么可以猜测该函数功能应该是获得输入内容。
####  4.3.1JS代码初始化过程
为了搞清楚Webassembly程序的整个运行过程，以及JS与Wasm的交互过程，我们从头开始分析。在Webassembly.js文件的第一行设置断点，按下F11单步跟进。
#####  1.创建线性内存实例
运行到582行的时候，通过调用[`WebAssembly.Memory()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)接口创建WebAssembly线性内存实例，并且能够通过相关的实例方法获取已经存在的内存实例（当前每一个模块实例只能有一个内存实例）。内存实例拥有一个[`buffer`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer)获取器，它返回一个指向整个线性内存的ArrayBuffer。
#####  2.初始化内存
运行到591行的时候，调用了`updateGlobalBufferViews()`函数，该函数的实现中申请了一些内存，在之后的数据处理过程中会被用到。
#####  3.创建Webassembly实例
运行到783行的时候，通过调用`createWasm()`函数后间接调用到`getBinaryPromise()`函数，通过`fetch()`函数[`编译和实例化Webassembly代码`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)。
#####  4.JS导入wasm的导出函数
运行到4413行的时候，JS代码将wasm中的导出函数导入进来，`main`函数就是在这个过程中被导入到了`_main`变量当中的。
这些导出函数可以在Webassembly.wat文件的最后位置找到。
      (export "___errno_location" (func 26))
      (export "_free" (func 18))
      (export "_main" (func 16))
      (export "_malloc" (func 17))
      (export "_memcpy" (func 69))
      (export "_memset" (func 70))
      (export "_sbrk" (func 71))
      (export "dynCall_ii" (func 72))
      (export "dynCall_iiii" (func 73))
      (export "establishStackSpace" (func 14))
      (export "stackAlloc" (func 11))
      (export "stackRestore" (func 13))
      (export "stackSave" (func 12))
#####  5.执行wasm的main函数
运行到4594行的时候，JS代码几乎快要执行结束了，这个时候进入`run()`函数之后，程序最终会调用wasm的`main`函数，此时程序执行到wasm的代码空间中。
####  4.3.2数据处理过程
#####  1.Wasm代码调用用户输入
Wasm代码的断点可以在左边视图中wasm的结点中设置，通过上文的函数调用栈，中间函数不需要一步步跟进了，我们可以看到运行到了`f28`函数后，紧接着调用了`__syscall145`函数。
在`f28`函数中看到了`f3`函数，并没有`__syscall145`函数，但是如果去IDA中观察的话，是能够看到该函数的。
其实这个是wasm导入的JS的导出函数，可以在Webassembly.wat文件的最开始位置找到。
      (import "env" "abort" (func (;0;) (type 2)))
      (import "env" "___setErrNo" (func (;1;) (type 2)))
      (import "env" "___syscall140" (func (;2;) (type 3)))
      (import "env" "___syscall145" (func (;3;) (type 3)))
      (import "env" "___syscall146" (func (;4;) (type 3)))
      (import "env" "___syscall54" (func (;5;) (type 3)))
      (import "env" "___syscall6" (func (;6;) (type 3)))
      (import "env" "_emscripten_get_heap_size" (func (;7;) (type 4)))
      (import "env" "_emscripten_memcpy_big" (func (;8;) (type 0)))
      (import "env" "_emscripten_resize_heap" (func (;9;) (type 1)))
      (import "env" "abortOnCannotGrowMemory" (func (;10;) (type 1)))