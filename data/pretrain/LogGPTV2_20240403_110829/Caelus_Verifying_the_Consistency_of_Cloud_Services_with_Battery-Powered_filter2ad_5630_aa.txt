**Title: Caelus: Verifying the Consistency of Cloud Services with Battery-Powered Devices**

**Authors: Beom Heyn Kim and David Lie**

**2015 IEEE Symposium on Security and Privacy**

**Abstract:**
Cloud storage services, such as Amazon S3, Dropbox, Google Drive, and Microsoft OneDrive, have gained widespread popularity. However, users often hesitate to fully trust these cloud services. Existing proposals in the literature for protecting the confidentiality, integrity, and consistency of data stored in the cloud have limitations when used on battery-powered devices. These limitations include requiring devices to be active for longer periods to communicate directly, relying on a trusted service to relay messages, or failing to provide timely detection of attacks.

We introduce Caelus, a system that addresses these shortcomings. The key insight behind Caelus is that the cloud service should declare the timing and order of operations. This relieves Caelus devices from recording and sending this information to each other. Instead, they only need to ensure that the timing and order of operations conform to the cloud's promised consistency model and are perceived identically across all devices. Additionally, Caelus supports popular consistency models, including strong, eventual, and causal consistency. Our experiments demonstrate that Caelus can detect consistency violations in Amazon’s S3 service when the desired consistency requirements set by the user are stricter than what S3 provides. Caelus achieves this with a 12.6% increase in CPU utilization on clients, 1.3% network bandwidth overhead, and negligible impact on the battery life of devices.

**I. Introduction**
Cloud storage services, such as Microsoft Azure Storage, Amazon S3, Dropbox, Google Drive, and Microsoft OneDrive, offer persistent and highly available storage over the Internet. These services are popular due to their features, including data backup and versioning, automatic scaling and failure recovery, replication, and the ability to share data across devices and collaborate with other users. For example, Google Drive has over 10 million users [1].

However, using cloud services also introduces security risks. While it is unlikely that a cloud service provider would deliberately attack its customers, vulnerabilities in the shared infrastructure may allow malicious users to compromise parts of the service and attack other users. Additionally, cloud service employees may have privileged access to the infrastructure, and there have been instances where insiders have been used to attack cloud users [2]. Therefore, even if the cloud service as a whole is not malicious, the component storing and serving user data can be compromised, threatening the confidentiality and integrity of the data. For simplicity, we refer to a cloud service whose data storage component has been compromised as a "malicious cloud service."

Cloud storage services are implemented as globally distributed systems, providing consistent access to data according to a specific consistency model. A consistency model defines acceptable delays and the order in which operations become visible to other devices. Applications rely on this consistency model, and any violation can cause them to misbehave. Malicious attackers can exploit this by omitting, reordering, replaying, or truncating operations, leading to subtle consistency attacks. Such attacks can severely damage applications, such as source code repositories (e.g., Git) and authorization services, by causing inconsistencies in the order and timing of operations.

While several recent proposals aim to protect users from such attacks, they suffer from deficiencies in security, battery-friendliness, or timely detection. Some approaches use external services like email or instant messaging, but these require trusting the external service. Other approaches involve direct peer-to-peer communication or rely on a highly available device, but these are not battery-friendly. Finally, some approaches, like CloudProof [9], use infrequent log collection, which precludes timely detection. Moreover, existing proposals typically check only a single consistency model, while cloud services offer various models.

In this paper, we present Caelus, which overcomes these limitations. Caelus leverages the cloud service's declaration of the timing and order of operations, allowing devices to verify consistency without extensive communication. To achieve this securely, efficiently, and in a timely manner, Caelus employs several novel mechanisms:

1. **Real-time Inconsistency Detection:** Caelus uses an attestor to sign the order and timing of operations declared by the cloud service. These signed attestations are written back to the cloud storage service every few seconds. Other devices can read these attestations to verify consistency without direct communication, reducing network usage and battery drain. Timely detection is ensured as attestations are available within seconds.

2. **Attestor-Partitioning:** To reduce the impact on battery life, Caelus partitions the attestor into a root attestor that can sleep most of the time and an active attestor that is already in use. This ensures that the attestor role does not significantly drain the battery of any single device.

3. **Modular Consistency Verification:** Caelus modularizes the task of verifying responses from the cloud service, allowing it to check different consistency models. This enables Caelus to verify cloud storage systems that provide strong, causal, and eventual consistency models.

Our contributions in this paper include:
- **Design of Caelus:** We present the design of Caelus, which uses scheduled attestations to verify the consistency of a cloud service. We describe our prototype running on Amazon’s S3 storage service and demonstrate its ability to detect consistency violations.
- **Battery Efficiency:** We show that attestor-partitioning reduces the battery drain on the attestor by about 40 times without compromising security. Caelus increases CPU utilization by 12.6% and imposes a 1.3% network bandwidth overhead, with no perceptible overhead under normal conditions.
- **Consistency Verification Procedures:** We provide three procedures for verifying strong, eventual, and causal consistency using a series of logical checks over a signed log of operations.

**II. Motivating Scenarios**
To illustrate the seriousness of consistency attacks, we present two common scenarios where a malicious cloud service can subvert victim software systems:

1. **Git Repository:** Consider a user or group of users using an online Git repository hosted in the cloud, such as GitHub. Git repositories should be strongly consistent, with commits forming a total order. However, a malicious Git server can corrupt the repository by subverting the timing requirement, making some commits invisible. This effectively partitions the group of clients, preventing them from detecting the malicious behavior.

2. **Authentication Service:** In federated identity and authorization services like OAuth, credential revocation is a security-sensitive operation. If an OAuth implementation uses a cloud storage service, it relies on the cloud service to consistently update revocation requests. A malicious cloud service can replicate operations in an inconsistent order, leading to revoked parties accessing sensitive information, contrary to the user’s expectations.

**III. Security Model and Guarantees**
Caelus is designed for users who own multiple internet devices, some of which are battery-powered, such as tablets, smartphones, or laptops. While Caelus can support non-battery-powered devices with reliable network connections, it includes special mechanisms to mitigate power consumption and network failures. We envision that future devices, such as smart-home devices, smart-cars, and IoT devices, will also be battery-powered and have wireless network connections.

**A. Security Model**
- **Clients:** Clients are devices under the user’s control, used to access data stored on the cloud service. These can be laptops, tablets, or other battery-powered devices.
- **Network:** The network can experience failures, and Caelus is designed to handle such scenarios.
- **Cloud Service:** The cloud service may be compromised, and Caelus assumes that the cloud service can be malicious.

**B. Security Guarantees**
Caelus provides the following security guarantees:
- **Consistency Verification:** Caelus ensures that the timing and order of operations conform to the cloud's promised consistency model.
- **Timely Detection:** Caelus detects inconsistencies in near real-time, ensuring that devices can quickly identify and respond to attacks.
- **Battery-Friendly Operation:** Caelus minimizes the impact on battery life through attestor-partitioning and efficient communication mechanisms.
- **Modularity:** Caelus supports different consistency models, making it versatile and adaptable to various cloud storage systems.

In the following sections, we discuss the design aspects of Caelus, analyze its security properties, and present the results of our prototype evaluation. We also review related work and conclude with a summary of our findings.