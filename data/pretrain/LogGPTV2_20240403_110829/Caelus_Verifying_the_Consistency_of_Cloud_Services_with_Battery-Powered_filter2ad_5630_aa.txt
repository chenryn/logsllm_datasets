title:Caelus: Verifying the Consistency of Cloud Services with Battery-Powered
Devices
author:Beom Heyn Kim and
David Lie
2015 IEEE Symposium on Security and Privacy
Caelus: Verifying the Consistency of Cloud
Services with Battery-Powered Devices
Beom Heyn Kim∗ and David Lie†
∗Department of Computer Science
†Department of Electrical and Computer Engineering
University of Toronto
Abstract—Cloud storage services such as Amazon S3, Drop-
Box, Google Drive and Microsoft OneDrive have become increas-
ingly popular. However, users may be reluctant to completely
trust a cloud service. Current proposals in the literature to
protect the conﬁdentiality, integrity and consistency of data stored
in the cloud all have shortcomings when used on battery-powered
devices – they either require devices to be on longer so they can
communicate directly with each other, rely on a trusted service
to relay messages, or cannot provide timely detection of attacks.
We propose Caelus, which addresses these shortcoming. The
key insight that enables Caelus to do this is having the cloud
service declare the timing and order of operations on the cloud
service. This relieves Caelus devices from having to record and
send the timing and order of operations to each other – instead,
they need to only ensure that the timing and order of operations
both conforms to the cloud’s promised consistency model and that
it is perceived identically on all devices. In addition, we show that
Caelus is general enough to support popular consistency models
such as strong, eventual and causal consistency. Our experiments
show that Caelus can detect consistency violations on Amazon’s
S3 service when the desired consistency requirements set by the
user are stricter than what S3 provides. Caelus achieves this
with a roughly 12.6% increase in CPU utilization on clients,
1.3% of network bandwidth overhead and negligible impact on
the battery life of devices.
I. INTRODUCTION
A commonly available type of cloud computing service is
a cloud storage service, which offers persistent and highly-
available storage over the Internet. Such services include basic
object storage services such as Microsoft Azure Storage or
Amazon S3, personal storage services as DropBox, Google
Drive or Microsoft OneDrive, and database services such as
Amazon RDS and DynamoDB and Microsoft Azure SQL
Database. These services are popular because they offer users
many useful attributes, such as backup and versioning for
data, automatic scaling and failure recovery, replication and
access to data across devices and the ability to collaboratively
share data with other users. Industry ﬁgures indicate that there
has been rapid increase in the use of such cloud services.
For instance, Google Drive currently boasts over 10 million
users [1].
However, cloud services can be a threat to the security
of their users. While we believe it is unlikely that a cloud
service provider would deliberately attack its customers, using
a cloud service still exposes users to new threat. Cloud services
provide service to multiple, often mutually distrustful, users
on a shared infrastructure. Vulnerabilities in the infrastructure
may allow a malicious user to compromise parts of the cloud
service and attack another user. In addition, cloud services’
employees, as part of their duties, may have privileged access
to parts of the infrastructure or the software that implements
the infrastructure. While good industry practice often means
that no particular employee will have access to the entire
infrastructure, there has been evidence that strategically placed
insiders have been used by certain organizations to attack
cloud users [2]. Thus, while a cloud service on as a whole
might not be malicious, the component that stores and serves
user data can be compromised by both external and internal
attackers, which can threaten the conﬁdentiality and integrity
of the data stored on the cloud service by the user. For brevity,
we will henceforth refer to a cloud service whose data storage
component has been compromised as simply a “malicious
cloud service” even though there could be components of the
service that are not compromised.
Since cloud storage services are implemented as globally
distributed systems designed to provide different devices or
users access (even concurrent access) to the same data, there is
an implicit or explicit assurance of consistent access according
to some consistency model. A consistency model deﬁnes
acceptable delays between when the results of an operation
by one device become visible to other devices, as well as
the order in which those operations should become visible.
Applications using the cloud storage service are implemented
based on the consistency model. Therefore, applications will
misbehave when the assumption on the consistency model is
violated. By omitting, reordering, replaying and truncating op-
erations, the malicious attacker can mount subtle consistency
attacks to cause violation of delay and ordering constraints
of the consistency model. Such attacks can seriously damage
applications composed of distributed processes collaboratively
interacting with each other across devices via the cloud storage
service, because the application’s behavior depends on the
ordering and timing of the previous operations. For example,
source code repository such as Git repository may suffer from
truncated operations (fork attack [3]–[5]) which cannot be
resolved by the built-in hash chain mechanism. In addition,
an authorization service may inadvertently reveal sensitive
information to unauthorized users when a revocation request
is maliciously delayed or dropped after the read and update
operations. Such an attack would allow revoked users to access
data they should not have permission to access.
© 2015, Beom Heyn Kim. Under license to IEEE.
DOI 10.1109/SP.2015.59
880
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
While there have been several recent proposals for pro-
tecting users from such attacks, they suffer from deﬁciencies
in terms of security, battery-friendliness or timely detection.
For example, a number of approaches use an external service
such as email or instant messaging to enable devices to
exchange messages about data they have stored on the cloud
service [5], [6]. Unfortunately, while this defends against a
malicious cloud service, it relies on the external service being
trusted to reliably deliver messages. Other approaches eschew
an external service in favor of having clients communicate
directly with each other in a peer-to-peer fashion [4], [7] or
they rely on a highly-available device to broadcast information
to all devices [3], [8]. However, such an approach is not
battery-friendly as such devices must be awake all the time
to communicate and a peer-to-peer approach causes devices
to consume more energy due to increased network trafﬁc.
An increasingly large percentage of user devices are battery-
powered, so negative impact on battery life is a serious
drawback. Finally, some approaches such as CloudProof [9]
advocate infrequent intervals where logs of operations will be
collected from all devices at an auditing service. Naturally,
such infrequent intervals preclude timely detection.
Furthermore, all existing proposals can each only check a
single consistency model, but cloud services offer a variety of
consistency models. For example, some proposals only check
strong consistency [3], [7]–[9] or while others only check
causal consistency [4]–[6]. None have been demonstrated to
be general enough to be used to check several consistency
models.
In this paper, we present Caelus, which overcomes these
shortcomings. The key insight that enables Caelus to do this
is having the cloud service declare the timing and order of
operations on the cloud service. This relieves Caelus devices
from having to record and send the timing and order of
operations to each other – instead, they need to only ensure
that the timing and order of operations both conform to the
cloud’s promised consistency model and that it is perceived
identically by all devices. To do this in a secure, battery-
friendly and timely manner, Caelus employs several novel
mechanisms.
First, Caelus detects inconsistencies in near real-time by
having an attestor sign (i.e. attest) the order and timing of
operations declared by the cloud service. These scheduled
attestations are written back to the cloud storage service
every few seconds according to a pre-determined schedule that
is known to all devices. Other devices can then read these
attestations from the cloud service and use them to verify
the consistency of the operations they have performed without
having to directly communicate with each other or the attestor,
thus reducing network usage and battery drain. In addition,
because an attestation for an operation is available within
seconds, devices can perform timely detection of consistency
violations. Moreover, Caelus’ protocol guarantees a malicious
cloud service cannot subvert Caelus by dropping or delaying
attestations and as a result, the storage and distribution of
attestations need not be performed by a trusted service.
Second, in its most basic instantiation, the attestor is a single
device that is actively signing attestations every few seconds,
but this would not be battery-friendly for the attestor. To
reduce the impact on battery life, Caelus introduces attestor-
partitioning which partitions the attestor into a single root
attestor device that must be periodically accessible but can
otherwise sleep to conserve battery and an active attestor that
must be active but whose role should be assigned to a device
already active for other reasons (i.e. it is writing data or the
user is already using it). Caelus ensures that even though the
attestor role may be distributed across several devices who
only communicate via the cloud service, a malicious cloud
service cannot partition the devices into groups that are out of
sync with each other.
Finally, to enable the detection of violations for different
consistency models, Caelus modularizes the task of verifying
that responses from the cloud service into a consistency
veriﬁcation procedure that can be performed independently by
each device. This allows the same Caelus system to be used to
check different consistency models and therefore Caelus can
verify cloud storage systems that provide strong, causal and
eventual consistency models. In addition, the distribution of
these checks across devices means that no single device will
become a bottleneck as the number of devices increases.
We make the following contributions in this paper:
• We present the design of Caelus, which uses scheduled
attestations for verifying the consistency of a cloud
service. We describe our Caelus prototype that runs on
Amazon’s S3 storage service, and demonstrate that we
can detect consistency violations when we ask Caelus to
bound inconsistency to a period shorter than what S3 can
provide.
• We show that attestor-partitioning can reduce the battery
drain of Caelus on the attestor by about 40× without
reducing the security of the system. Our measurements
show that Caelus increases CPU utilization on clients by
about 12.6% and imposes network bandwidth overhead of
about 1.3%. Under normal, failure-free scenarios with an
honest server, the user should experience no perceptible
overhead or loss of availability as a result of Caelus.
• We provide three consistency veriﬁcation procedures that
enable individual devices to use Caelus to verify strong,
eventual and causal consistency using a series of logical
checks over a signed log of operations.
We start with a couple of potential but realistic consistency
problems in Section II. Then, we discuss Caelus’ security
model and assumptions as well as the guarantees it provides in
Section III. The various design aspects of Caelus are discussed
in Section IV. Then, we present an analysis of Caelus’ security
properties in Section V. Section VI describes implementation
details of our prototype and the following Section VII gives
evaluation results of our Caelus prototype. We then discuss
related work in the Section VIII and ﬁnally conclude in the
Section IX.
881
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
II. MOTIVATING SCENARIOS
To motivate the seriousness of consistency attacks, we
describe two common scenarios where a malicious cloud
service can subvert the victim software systems.
Git Repository. In the ﬁrst example, consider a user or group
of users that use an online Git repository hosted in the cloud
such as Github1. Git repositories should be strongly consistent
– individual commits need not be totally ordered but set of
commits pushed to the Git service should be visible to every
client as soon as the push is completed thus forming a total
order of pushes and enabling consistent conﬂict resolution.
Git uses hashes to verify the integrity of the commit history.
The hash of each commit depends on the parent commit thus
forming a hash chain. Also, each Git client keeps a complete
history of all commits by all others. Thus, it might initially
appear that Git’s hash chain generated by the Git service and
local copies of the commit history stored by each client prevent
the misbehavior by the Git service.
However, by subverting the timing requirement
that all
operations should be made visible to all other requirements
as soon as the operation completes so that some commits
are never made visible, a malicious Git server can corrupt
the source code repository in a way that is not detectable by
individual clients. As a result, a malicious service can hide a
particular push and all future pushes by one or more clients
from a different set of one or more clients. This effectively
partitions or forks the group of clients into two or more sets
that are unaware of each other’s pushes, but are also unable
to tell whether the other group has not committed anything or
whether the server is maliciously dropping commits without
directly communicating or using a trusted service to commu-
nicate.
Authentication Service. A security sensitive operation in
federated identity and authorization services such as OAuth
is credential revocation. OAuth is used in a variety of online
services such as Google and Facebook to authorize untrusted
parties (relying parties in OAuth parlance) to access informa-
tion belonging to the user. In OAuth 2.0, revocation requests
should be processed and propagated to all servers immediately
so that the revocation takes effect as soon as possible [10].
If an OAuth implementation uses a cloud storage service,
it will depend on the cloud service providing consistent
update of revocation requests to all application servers. For
example, consider a user that revokes access to a document
to an untrusted party before adding sensitive information to it.
Since the revocation happens before the addition of sensitive
information, a cloud service that promises strong or causal
consistency should ensure that all servers see the revocation
request before the addition of the sensitive information, i.e., in
the same order. However, a malicious cloud service may break
this promise and replicate the operations in an inconsistent
order. As a result, some nodes may receive the revocation
request after the addition of the sensitive information and
1https://github.com/
reveal the sensitive information to the revoked parties, even
though this contradicts the user’s expectations.
III. SECURITY MODEL AND GUARANTEES
Caelus is designed for any user who owns multiple Internet
devices, some of which are battery-powered devices, such as
tablets, smartphones or laptops, and which may have wireless
network connections that can fail. While Caelus can support
non-battery powered devices that have reliable network con-
nections, Caelus uses special mechanisms to mitigate power
consumption and network failures. We envision that many
devices of the future, such as smart-home devices, smart-cars
and Internet-of-things devices will also have wireless network
connections and be battery-powered. We begin by stating our
security model which describes our assumptions regarding the
behavior and capabilities of clients, the network and the cloud
service. We then state the security guarantees that Caelus
provides.
A. Security model
Clients. Clients are devices that are under the user’s control
and are used to access data stored on the cloud service. For
example, a client can be the individual user’s laptop, tablet,
or other battery-powered device. A client can also be a device