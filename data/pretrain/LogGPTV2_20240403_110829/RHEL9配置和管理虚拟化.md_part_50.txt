:::
您可以修改 libvirt
守护进程的运行时设置，以启用调试日志并将其保存到输出文件中。
这在无法重启 libvirt
守护进程时非常有用，因为重启解决了这个问题，或者因为有另一个进程（如迁移或备份）同时运行。如果您要在不编辑配置文件或重启守护进程的情况下尝试命令，修改运行时设置也很有用。
::: itemizedlist
**先决条件**
-   确保已安装了 `libvirt-admin`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  [**可选：**]{.strong}备份活跃的日志过滤器集合。
    ``` literallayout
    # virt-admin -c virtqemud:///system daemon-log-filters >> virt-filters-backup
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    建议您备份活跃的过滤器集合，以便在生成日志后恢复它们。如果您没有恢复过滤器，信息将继续记录可能会影响系统性能。
    :::
2.  使用 `virt-admin`{.literal}
    实用程序根据您的要求启用调试和设置过滤器。
    ::: table
    []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#idm139624737902928}
    **表 21.2. 调试过滤器值**
    ::: table-contents
      ------------------ --------------------------------------
      [**1**]{.strong}   记录 libvirt 生成的所有消息。
      [**2**]{.strong}   记录所有非调试的信息。
      [**3**]{.strong}   记录所有警告和错误消息。这是默认值。
      [**4**]{.strong}   仅记录错误消息。
      ------------------ --------------------------------------
    :::
    :::
    ::: example
    []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#idm139624740707664}
    **例 21.2. 日志记录过滤器的 virt-admin 设置示例**
    ::: example-contents
    以下命令：
    ::: itemizedlist
    -   记录 `来自远程`{.literal}、`util.json`{.literal} 和
        `rpc`{.literal} 层的所有错误和警告信息
    -   仅记录 `事件`{.literal} 层的错误消息。
    :::
    ``` literallayout
    # virt-admin -c virtqemud:///system daemon-log-filters "3:remote 4:event 3:util.json 3:rpc"
    ```
    :::
    :::
3.  使用 `virt-admin`{.literal} 实用程序将日志保存到特定文件或目录中。
    例如，以下命令将日志输出保存到 `/var/log/libvirt/`{.literal}
    目录中的 `libvirt.log`{.literal} 文件中。
    ``` literallayout
    # virt-admin -c virtqemud:///system daemon-log-outputs "1:file:/var/log/libvirt/libvirt.log"
    ```
4.  [**可选：**]{.strong}您还可以删除过滤器来生成包含所有与虚拟机相关的信息的日志文件。但不建议您这样做，因为这个文件可能包含由
    libvirt 模块生成的大量冗余信息。
    ::: itemizedlist
    -   使用 `virt-admin`{.literal} 实用程序指定一组空的过滤器。
        ``` literallayout
        # virt-admin -c virtqemud:///system daemon-log-filters
          Logging filters:
        ```
    :::
5.  [**可选：**]{.strong}使用备份文件将过滤器恢复到其原始状态。\
    使用保存的值执行第二步，以恢复过滤器。
:::
:::
::: section
::: titlepage
## []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#attaching-virtual-machine-debug-logs_generating-virtual-machine-debug-logs}附加 libvirt debug 日志来支持请求 {.title}
:::
您可能需要请求额外的支持来诊断和解决虚拟机(VM)问题。强烈建议您将调试日志附加到支持请求，以确保支持团队能够访问所需的全部信息，以快速解决问题。
::: itemizedlist
**流程**
-   要报告问题并请求支持，[创建一个支持问题单](https://access.redhat.com/support/cases/#/case/new?intcmp=hp%7Ca%7Ca3%7Ccase&){.link}。
-   根据遇到的问题，将以下日志与您的报告一起附加：
    ::: itemizedlist
    -   对于 libvirt 服务的问题，请从主机附加
        `/var/log/libvirt/libvirt.log`{.literal} 文件。
    -   对于特定虚拟机的问题，请附加对应的日志文件。
        例如，对于 [*testguest1*]{.emphasis} 虚拟机，附加
        `testguest1.log`{.literal} 文件，该文件可在
        `/var/log/libvirt/qemu/testguest1.log`{.literal} 中找到。
    :::
:::
::: itemizedlist
**其它资源**
-   [如何为红帽支持提供日志文件？](https://access.redhat.com/solutions/2112){.link}
:::
:::
:::
::: section
::: titlepage
# []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#dumping-a-virtual-machine-core_diagnosing-virtual-machine-problems}转储虚拟机内核 {.title}
:::
要分析虚拟机(VM)崩溃或出现故障的原因，您可以将虚拟机内核转储到磁盘上的文件，以便稍后分析和诊断。
这部分提供了
[内核转储的简介，](#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#how-virtual-machine-core-dumping-works_dumping-a-virtual-machine-core "虚拟机内核转储的工作原理"){.link}
并解释了如何
[将虚拟机内核转储](#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#creating-a-virtual-machine-core-dump-file_dumping-a-virtual-machine-core "创建虚拟机内核转储文件"){.link}
到特定文件。
::: section
::: titlepage
## []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#how-virtual-machine-core-dumping-works_dumping-a-virtual-machine-core}虚拟机内核转储的工作原理 {.title}
:::
虚拟机(VM)需要多个运行的进程来准确高效地工作。在某些情况下，运行的虚拟机在您在使用时可能会意外终止或出现故障。重启虚拟机可能会导致数据重置或丢失，从而很难诊断导致虚拟机崩溃的确切问题。
在这种情况下，您可以在重启虚拟机前使用 `virsh dump`{.literal}
实用程序将虚拟机的核心保存到文件中。核心转储文件包含虚拟机的原始物理内存镜像，其中包含有关虚拟机的详细信息。这些信息可用于手动诊断虚拟机问题，也可以使用
`crash`{.literal} 实用程序等工具进行诊断。
::: itemizedlist
**其它资源**
-   `crash`{.literal} man page
-   [`崩溃`{.literal} Github
    存储库](https://github.com/crash-utility/crash){.link}
:::
:::
::: section
::: titlepage
## []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#creating-a-virtual-machine-core-dump-file_dumping-a-virtual-machine-core}创建虚拟机内核转储文件 {.title}
:::
虚拟机(VM)内核转储在任何给定时间包含有关虚拟机状态的详细信息。这些信息类似于虚拟机快照，这有助于在
VM 出现故障或突然关闭时检测到问题。
::: itemizedlist
**先决条件**
-   请确定您有足够的磁盘空间保存该文件。请注意，虚拟机消耗的空间取决于分配给虚拟机的
    RAM 量。
:::
::: itemizedlist
**流程**
-   使用 `virsh dump`{.literal} 程序。
    例如，以下命令将 `lander1`{.literal} 虚拟机的内核、其内存和 CPU
    通用注册文件转储到 `/core/file`{.literal} 目录中的
    `gargantua.file`{.literal}。
    ``` literallayout
    # virsh dump lander1 /core/file/gargantua.file --memory-only
    Domain 'lander1' dumped to /core/file/gargantua.file
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`crash`{.literal} 工具不再支持 virsh dump 命令的默认文件格式。要使用
`crash`{.literal} 分析内核转储文件，您必须使用 `--memory-only`{.literal}
选项创建该文件。
另外，在创建内核转储文件时，必须使用 `--memory-only`{.literal}
选项附加到红帽支持问题单中。
:::
::: title
**故障排除**
:::
如果 `virsh dump`{.literal} 命令失败并显示系统在
`内存错误时死锁`{.literal}，请确保为内核转储文件分配足够的内存。要做到这一点，请使用以下
`crashkernel`{.literal} 选项值。或者，请勿使用
`crashkernel`{.literal}，它会自动分配内核转储内存。
``` screen
crashkernel=1G-4G:192M,4G-64G:256M,64G-:512M
```
::: itemizedlist
**其它资源**
-   `virsh dump --help`{.literal} 命令
-   `virsh`{.literal} man page
-   [打开支持问题单](https://access.redhat.com/support/cases/#/case/new?intcmp=hp%7Ca%7Ca3%7Ccase&){.link}
:::
:::
:::
::: section
::: titlepage
# []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#backtracing-virtual-machine-processes_diagnosing-virtual-machine-problems}回溯虚拟机进程 {.title}
:::
当与虚拟机(VM)出现故障相关的进程时，您可以使用 `gstack`{.literal}
命令和进程标识符(PID)生成故障功能进程的执行堆栈跟踪。如果该进程是线程组的一部分，那么也会跟踪所有线程。
::: itemizedlist
**先决条件**
-   确定安装了 `GDB`{.literal} 软件包。
    有关安装 `GDB`{.literal} 和可用组件的详情，[请参阅安装 GNU
    Debugger](https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/10/html/user_guide/chap-gdb#sect-GDB-Install){.link}。
-   请确定您知道要追踪进程的 PID。
    您可以使用 `pgrep`{.literal} 命令（后跟进程的名称）找到 PID。例如：
    ``` literallayout
    # pgrep libvirt
    22014
    22025
    ```
:::
::: itemizedlist
**流程**
-   使用 `gstack`{.literal} 实用程序以及您想要备份的进程的 PID。
    例如：以下命令追踪 PID 为 22014 的 libvirt 进程。
    ``` literallayout
    # gstack 22014
    Thread 3 (Thread 0x7f33edaf7700 (LWP 22017)):
    #0  0x00007f33f81aef21 in poll () from /lib64/libc.so.6
    #1  0x00007f33f89059b6 in g_main_context_iterate.isra () from /lib64/libglib-2.0.so.0
    #2  0x00007f33f8905d72 in g_main_loop_run () from /lib64/libglib-2.0.so.0
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   `gstack`{.literal} man page
-   [GNU
    Debugger(GDB)](https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/10/html/user_guide/chap-gdb){.link}
:::
[]{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#additional-resources-for-reporting-virtual-machine-problems-and-providing-logs_diagnosing-virtual-machine-problems}
::: title
**用于报告虚拟机问题并提供日志的其他资源**
:::
要请求额外的帮助和支持，您可以：
::: itemizedlist
-   使用 [**redhat-support-tool**]{.strong} 命令行选项、Red Hat Portal
    UI 或使用 FTP 的不同方法，引发服务请求。
    ::: itemizedlist
    -   要报告问题并请求支持,请参阅创建[支持问题单](https://access.redhat.com/support/cases/#/case/new?intcmp=hp%7Ca%7Ca3%7Ccase&){.link}。
    :::
-   提交服务请求时上传 SOS 报告以及日志文件。
    这样可保证红帽支持工程师具有参考所需的全部诊断信息。
    ::: itemizedlist
    -   如需有关 SOS 报告的更多信息，[请参阅什么是 SOS 报告以及如何在
        Red Hat Enterprise Linux
        中创建？](https://access.redhat.com/solutions/3592#command){.link}
    -   有关附加日志文件的详情，请参考
        [如何为红帽支持提供文件？](https://access.redhat.com/solutions/2112){.link}
    :::
:::
:::
:::