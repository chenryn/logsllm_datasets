 this.st.Update(i, val)
return NumArray{st: &st}
st.Init(nums,func(i,j int) int {
st := template.SegmentTree{}
"github.com/halfrost/LeetCode-Go/template"
可以AC，
更改一个值，最坏情况就是所有的 prefixSum 都要更新一次。prefixSum 的方法在这道题上面也
如果此题还用 prefixSum 的思路解答呢？那每次 update 操作的时间复杂度都是 O(n)，因为每次
元素和的时间复杂度是 O(log n)，更新元素值的时间复杂度是 O(log n)。
建一颗线段树，父结点内存的是两个子结点的和，初始化建树的时间复杂度是 O(log n)，查询区间
对比第 303题，这一题由于数组里面的元素都是可变的，所以第一个想到的解法就是线段树，构
元素的和。
 return i + j
只不过时间排名在5%，非常差。
---
## Page 418
题目
309. Best Time to Buy and Sell Stock with Cooldown
//} 
二
// func (this *NumArray307) SumRange(i int, j int) int {
// // SumRange define 
二
//
二
二
// // Update define
// // constructor307 define
* Your NumArray object will be instantiated and called as such:
**
//}
二
// type NumArray307 struct {
// // NumArray define
//解法二 prefixsum，sumRange 时间复杂度 o(1)
* param_2 := obj.SumRange(i,j);
 obj.Update(i,val); 
 obj := Constructor(nums);
func (this *NumArray307) Update(i int, val int)
 func Constructor307(nums []int) NumArray307 {
ifｉ> 
 data
 prefixSum []int 
return this.prefixsum[j]
for i := l; i = O; i-- {
st.Init(numsArray, func(i,j int) int {
//初始化线段树，节点内的值都赋值为0，即计数为0
for -, v := range numsMap {
for i := O; i 111 
ac 5->101
ab 3->11
c 4->100
b 2->10
a 1->1
---
## Page 424
You may assume that you have an infinite number of each kind of coin.
Note:
Example 2:
Example 1: 
'1- uunan 'suion aun jo uoeuiqwon Kue 
 maxProduct = len(words[i]) * len(words[j])
j++{
'a')
---
## Page 425
Example 1: 
Given an unsorted array nums, reorder it such that nums[0]  nums[2]  amount { 
组会比较浪费空间。例如[1,1000000000,500000]有这样的硬币种类，要求组成
这一题是经典的硬币问题，利用 DP 求解。不过这一题的测试用例有一个很大的值，这样开 DP 数
for i := l; i  nums[2]  5,所以可以把 6 放在第 1 个奇数位的位置。left 和i 同时右
Array:
Mapped idx:
Original idx: 0
step 4:
Array:
Mapped idx: 
Original idx: 0
Step 3:
Array:
Mapped idx: 
Original idx: 0
Step 2:
Array:
Mapped idx: 
Original idx: 0
step 1:
Left
3
L
3
L
3
L
3
Left
Left 
9
Left
9
3
3
3
L
5
５
2
5
５
2