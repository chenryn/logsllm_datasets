(cid:4)
(cid:4)
h
l)(cid:5) = Lt(cid:4)SYS/(p
(cid:4)
l)(cid:5)
and by transitivity:
Lt(cid:4)SYS/(p
(cid:4)
(cid:4)
l
h)(cid:5) = Lt(cid:4)SYS/(p
(cid:4)
l)(cid:5)
SYS:
∪
• l ∈ Ri for some i
that outputs the number of low and mid events in a trace. It
immediately follows that λ(tr) = λ(tr(cid:2)
). We ﬁrst show the theorem
holds for all traces tr and tr(cid:2) such that λ(tr) = λ(tr(cid:2)
) = 0. We then
which proves the claim for this case.
Note two special events here: ﬁrst, a return from create tag
in which i receives the special tag t; and second, a return from
74
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
− from another process.
recv in which i receives the capability t
After either system call return, i:KS,I,O transitions to some new
state i:KS,I,O∪{t−}. From this point forward, the failures of i:K
lie outside of LOt − MIDt, and need not be considered by our
extended deﬁnition of noninterference.
• l = i.s.(S, I, O, create tag, w) for some i ∈ P, and some
(cid:2)
) for some tag t
w ∈ {Add, Remove, None}
After accepting this event,
the process i:K can no longer
accept system calls; it can only accept a response in the form
(cid:2). Since l ∈ LOt, it follows
i.s.(S, I, O, t
that t /∈ S for both the system call and its eventual reply.
The high events in h could affect
the return value to this
system call (and therefore SF(cid:4)S/tr(cid:5)) if the space of t’s re-
turned somehow depends on h, because h changed the state
of the shared tag manager. An inspection of the tag manager
shows that
to
, create tag, w) for some process j, and
e = j.g.(S
(cid:2). Such a call would result in a tag such
(cid:2), I
labels S
, x) being allocated, for some arbitrary x.
as t
= g(S
Because e ∈ h is a high event, t ∈ S(cid:2). Because l is a low event,
(cid:2) (cid:8)= S, and assuming g is injective, it follows that
t /∈ S. Thus, S
(cid:2) (cid:8)= t, for all x. Therefore, events in h cannot inﬂuence which
t
(cid:2) might be allocated as a result of a call to create tag.
tags t
We apply the same argument as above, that h and l can happen
either before or after one another without changing the failures
of the system.
its state only changes as a result of a call
(cid:2)
, I
, O
(cid:2) and O
, I
, O
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
• l = i.s.(S, I, O, change label, w, L) for some i ∈ P, w ∈
l
(cid:4)
(cid:4)
{Add, Remove, None} and L ⊆ T .
Consider all traces of the form tr = p
h, where l is as
above. As usual, we consider all elements of h that might affect
process i:K after it has accepted event l. After l, the process
i:K can only accept an event of the form i.s.(S, I, O, r) for
r ∈ {Ok, Error}, to indicate whether the label change succeeded
or failed.
The only way an event in h can inﬂuence the outcome r is to
alter the composition of ˆO, which the tag manager checks on i’s
behalf by answering i.g.(check+) and i.g.(check-) within the
CHECK subprocess. That is, some high process j must request
, create tag, w),
a new tag with system call e = j.s.(S
where t ∈ S(cid:2), and e ∈ h. Moreover, the kernel must return as a
(cid:2) ∈ L, where L is the label that
result some new tag t
low process i desires to change to. If both of these conditions
hold, then the tag manager might have switched to a new state
in which t(cid:2)+ ∈ ˆO or t(cid:2)− ∈ ˆO, meaning the kernel’s response
to event l could have changed based on h.
Such an h is extremely unlikely. Since l happened before h
in trace tr, t(cid:2) can only be a member of L if Ui “predicted”
the output of the tag manager, which it can do with negligible
−). With high probability, h does not contain any
probability (2
elements that can affect r or future states of i:K after event l.
Thus, Lt(cid:4)p
l(cid:5), which proves the case.
(cid:2) such that t
h(cid:5) = Lt(cid:4)p
, O
, I
(cid:4)
(cid:4)
(cid:4)
l
(cid:2)
(cid:2)
(cid:2)
• l = i.s.(S, I, O, get label, w) for some w.
This call only outputs information about what state a kernel
process is in; this state only updates as a result of low events
i.s.(S, I, O, change label).
• l = i.s.(S, I, O, get caps).
There are three state transitions that can alter
the reply
to the get caps system call:
i.s.(S, I, O, create tag, w),
i.s.(S, I, O, drop caps, L) or i.s.(S, I, O, recv, j). None of
these calls are equal to an event in h, since they are low events
and h contains only high events.
• l = i.s.(S, I, fork)
(cid:2)
(cid:2)
(cid:2)
), s(I
), s(O
(cid:2) such that t ∈ S
The only event i:K will accept after l is i.s.(S, I, O, k) where
k is the process ID of the newly-forked child. By deﬁni-
tion of CHOOSE above, there exists some x such that k =
g(s(S), s(I), s(O), x). If an event e ∈ h causes a process ID to
), y),
be chosen, it would be of the form p = g(s(S
(cid:2). That l is a low symbol
for some y, and some S
implies that t /∈ S and S (cid:8)= S(cid:2). If g is injective then k (cid:8)= p.
Therefore, event e will never change the value k that this kernel
process might output next as its reply to the system call l.
The other result of the fork system call is that now, a new process
k is running. That is, k : K has moved out of the “birth state”
and is now willing to accept incoming system calls in state
(k : KS,I,O). The same arguments as above apply here. Because
k was forked by a low process, it too is a low process, expecting
only low symbols before it transitions to a new state. Therefore,
the events in h cannot affect its state machine.
• l = i.s.(S, I, send, j, X, m) for some j, X, m.
The outcome of the send operation depends only on whether
X ⊆ O or not. It therefore does not depend on h.
• l = i.s.(S, I, O, recv, j)
(cid:2)
(cid:2)
(cid:2)
, I
, O
, send, i, {t
The event after l that i:K accepts is i.s.(S, I, O, m) for some
message m. It might also change to a different state if the
process j sent capabilities. The relevant possibility for e ∈ h
(cid:2)+}, (cid:10)(cid:11)), for some
to consider is e = j.s.(S
high process j with t ∈ S(cid:2). The claim is that this message
will never be enqueued at i and therefore will not affect i’s
(cid:2) and
next visible event. Say that process j has ownership O
(cid:2). That t is an export-protection tags implies
dual privileges D
t− /∈ ˆO; that all events in h are not in MIDt implies t− /∈ O(cid:2);
(cid:2). Also, because
that l /∈ MIDt implies t
(cid:2) and t /∈ S ∪ D,
i is a low process t /∈ S. Therefore, t ∈ S
which implies that S(cid:2) − D(cid:2) (cid:8)⊆ S ∪ D, and the kernel will not
enqueue or deliver j’s message to i. Again, we have that h does
not affect i’s possibilities for the next message it receives.
/∈ O. Thus, t /∈ D ∪D
(cid:2) − D
−
The remaining events (e.g., drop caps, exit, etc.) follow similarly
and are elided for brevity.
l
(cid:4)
(cid:4)
c) Inductive Step, l ∈ MIDt: The previous section considered
h where l /∈ MIDt; it remains
all traces of the form tr = p
to cover the case of l ∈ MIDt. When l consists of any system call
aside from send or drop caps, we claim that Lt(cid:4)SYS/p
l(cid:5) =
Lt(cid:4)SYS/p(cid:5). That is, on either side of such an event, all processes
in a MIDt state stay in that state, and don’t communicate with any
low processes. If such processes allocate new tags or process IDs
(via fork), CHOOSE’s partitioning of the identiﬁer space prevents
declassiﬁers from taking tag or process IDs from low processes.
(cid:4)
If l is an event of the form i.s.(S, I, O, send, j, X, m) where j
corresponds to a “low” process, then l can affect the failures of a
low process. However, we can apply the same argument as above to
conclude that the elements of h do not interfere with j’s receipt of i’s
message, or its subsequent states. If t− ∈ X, then process j becomes
a declassiﬁer upon receipt of i’s message, its traces no longer in the
set LOt − MIDt. High events (like those in h) can then inﬂuence i,
but the deﬁnition no longer considers j’s failures.
If l is an event of the form i.s.(S, I, O, drop caps, X), and t− ∈
X, then l represents process i’s rescinding its status as a declassiﬁer;
it becomes a low process like any other. No high event can interfere
with the drop caps operation, since its success depends only on O
and X. Once the capability is dropped, i can be analyzed under the
ﬁrst set of cases (pertaining to events in LOt but not in MIDt).
75
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
We have covered all of the relevant cases, and the theorem follows
by induction.
E. select and Timing
Consider a new system call, select,
that
involves an explicit
timeout:
• Y ← select(t, X)
Given a set of process indices X, return a set Y ⊆ X such that
all j ∈ Y , calling recv(j) will yield immediate results. This call
will block until Y is non-empty, or until t clock ticks expire.
A new kernel subprocess SELECT handles the new system call; it
allows a user program to wait for the ﬁrst available receive channel
to become readable:
SELECTS,I,O =
(cid:2)
(select, t, A) →
s ?
(cid:2)
κ
μX • (q!(select, A) → q?B →
if B = {}
then INTRECV*S,I,O ; X
else s !
κ
B → KS,I,O)
(cid:3)(cid:3)
(cid:2)
{} → KS,I,O
s !
κ
(cid:20)t
There are three new CSP operators here. The ﬁrst is μX • F (X),
which (following Hoare’s original syntax) is the recursion operator:
the process X such that X = F (X). The syntax P ; Q denotes the
process P followed by Q upon P ’s successful termination. Successful
termination is denoted by the special CSP process SKIP. Lastly, the
“timed interrupt operator” (cid:20)t [20] interrupts the selection process
after t clicks of the clock and outputs an empty result set.
In this
formulation,
subprocess
INTRECV*, which behaves mostly like INTRECV, except it keeps
receiving until an admissible message arrives:
the process SELECT calls
INTRECV*S,I,O = c?(Sin, Iin, j, X, m) →
g!(dual privs, O) → g?D →
if (Sin ⊆ S ∪ D) ∧ (I − D ⊆ Iin)
then q!(enqueue, (X, m)) → SKIP
else INTRECV*S,I,O
With the inclusion of the select operation, the Flume CSP model
now explicitly models time. We must update our deﬁnitions and proof
accordingly. Schneider develops a full notion of process equivalence
in timed CSP [20], but the mechanics are complex. Instead, we
suggest a technique introduced by Ouaknine [41] and also covered by
Schneider [20]: convert a timed model into an untimed model with
the introduction of the event tock, which represents a discrete unit
of time’s passage. In particular, Schneider provides the Ψ function
for mapping processes from timed CSP to discrete-event CSP with
a tock event representing the passage of time. In the proof of
noninterference, consider tock a low event, that is not hidden by any
concealment operator. Then apply the Ψ translation to all states of
the Flume model.
76
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply.