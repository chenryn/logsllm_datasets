       52  
       88  
       22  
       59  
       96  
       23  
       75  
       61  
       78  
       20  
       72  
       89  
        2  
(20 rows)  
```  
```  
create or replace function gen_ints(int) returns setof int as $$  
declare  
  r record;  
begin  
  return query select (random()*100)::int from generate_series(1,$1);  
  for r in select (random()*100)::int from generate_series(1,$1)  
  loop  
    return next r;  
  end loop;  
  return;  
end;  
$$ language plpgsql strict;  
db1=> select * from gen_ints(10);  
 gen_ints   
----------  
       78  
       93  
       51  
       10  
       16  
       84  
        6  
       31  
       16  
       83  
       55  
        8  
       94  
       27  
       99  
       45  
       64  
       68  
       32  
       31  
(20 rows)  
```  
##### 60.8 函数稳定性 volatile, stable, immutable  
- volatile, 不稳定, 任何时候调用结果可能都会发生变化, 所以需要每次都需要执行, 用在SQL中如果有10条满足条件的记录要经过该函数计算, 该函数需要执行10次.   
- stable, 稳定, 只要输入参数恒定, 在同一个事务内执行多次结果不变. 作为SQL的变量时, 允许走索引优化(作为索引字段|表达式的判断条件, 例如`col>now()`).    
- immutable, 超级稳定, 只要输入参数恒定, 任何时候执行多次结果不变. 允许创建表达式索引. 在产生执行计划前被执行.   
```  
drop table t ;  
create table t (id int primary key, info text, ts timestamp);  
insert into t select generate_series(1,10000), random()::text, clock_timestamp();  
create or replace function gen_id(int) returns int as $$  
  select (random()*$1)::int;  
$$ language sql strict volatile;  
```  
```  
db1=> analyze t;  
ANALYZE  
db1=> explain select * from t where id=gen_id(10000);  
                             QUERY PLAN                               
--------------------------------------------------------------------  
 Seq Scan on t  (cost=0.00..275.00 rows=1 width=31)  
   Filter: (id = ((random() * '10000'::double precision))::integer)  
(2 rows)  
```  
```  
db1=> create index on t (gen_id(id));  
ERROR:  functions in index expression must be marked IMMUTABLE  
db1=> alter function gen_id stable;  
ALTER FUNCTION  
db1=> explain select * from t where id=gen_id(10000);  
                           QUERY PLAN                              
-----------------------------------------------------------------  
 Index Scan using t_pkey on t  (cost=0.54..2.75 rows=1 width=31)  
   Index Cond: (id = gen_id(10000))  
(2 rows)  
```  
##### 60.9 表达式索引  
```  
db1=*> alter function gen_id immutable;  
ALTER FUNCTION  
db1=> select gen_id(10) from generate_series(1,10);  
 gen_id   
--------  
      9  
      9  
      9  
      9  
      9  
      9  
      9  
      9  
      9  
      9  
(10 rows)  
db1=> select gen_id(10) from generate_series(1,10);  
 gen_id   
--------  
      5  
      5  
      5  
      5  
      5  
      5  
      5  
      5  
      5  
      5  
(10 rows)  
```  
```  
db1=> create index on t (gen_id(id));  
CREATE INDEX  
db1=> explain select * from t where gen_id(id)=1;  
                               QUERY PLAN                                  
-------------------------------------------------------------------------  
 Index Scan using t_gen_id_idx on t  (cost=0.29..44.06 rows=50 width=31)  
   Index Cond: (gen_id(id) = 1)  
(2 rows)  
```  
注意, immutable的稳定性(当参数相同时, 任何时候调用, 不管调用多少次, 返回结果都一致)是研发人员需要保障的, 随意设置可能出逻辑问题:  
```  
db1=>  select gen_id(id),* from t where gen_id(id)=1;  
 gen_id |  id  |        info         |             ts               
--------+------+---------------------+----------------------------  
      0 |    2 | 0.6508617273491843  | 2023-11-10 15:09:06.514731  
     14 |   16 | 0.03160873011931287 | 2023-11-10 15:09:06.514767  
     28 |   30 | 0.26564382574619927 | 2023-11-10 15:09:06.514835  
      5 |   38 | 0.4047480894944364  | 2023-11-10 15:09:06.514854  
     84 |  677 | 0.04014598029316829 | 2023-11-10 15:09:06.516459  
   2607 | 3513 | 0.27533104465852176 | 2023-11-10 15:09:06.524044  
   2651 | 4654 | 0.6204572451448804  | 2023-11-10 15:09:06.527038  
    891 | 5604 | 0.5832462922027695  | 2023-11-10 15:09:06.529556  
(8 rows)  
db1=>  select gen_id(id),* from t where gen_id(id)=1;  
 gen_id |  id  |        info         |             ts               
--------+------+---------------------+----------------------------  
      2 |    2 | 0.6508617273491843  | 2023-11-10 15:09:06.514731  
     12 |   16 | 0.03160873011931287 | 2023-11-10 15:09:06.514767  
     17 |   30 | 0.26564382574619927 | 2023-11-10 15:09:06.514835  
     12 |   38 | 0.4047480894944364  | 2023-11-10 15:09:06.514854  
    128 |  677 | 0.04014598029316829 | 2023-11-10 15:09:06.516459  
   2398 | 3513 | 0.27533104465852176 | 2023-11-10 15:09:06.524044  
    635 | 4654 | 0.6204572451448804  | 2023-11-10 15:09:06.527038  
   2345 | 5604 | 0.5832462922027695  | 2023-11-10 15:09:06.529556  
(8 rows)  
```  
##### 60.10 窗口函数  
```  
drop table t;  
create table t (  
  id int,  -- 学号  
  n name,  -- 姓名  
  class text,  -- 科目  
  score float  -- 成绩  
);  
insert into t values (1, '德哥', '数学', '100'), (1, '德哥', '语文', '80'), (1, '德哥', '英语', '90');  
insert into t values (1, '刘德华', '数学', '90'), (1, '刘德华', '语文', '70'), (1, '刘德华', '英语', '60');  
insert into t values (1, '张学友', '数学', '95'), (1, '张学友', '语文', '89'), (1, '张学友', '英语', '90');  
insert into t values (1, '卡洛斯', '数学', '60'), (1, '卡洛斯', '语文', '81'), (1, '卡洛斯', '英语', '91');  
select *, row_number() over w as "本科名次", first_value(score) over w - score as "与第一名差距" from t window w as (partition by class order by score desc);  
 id |   n    | class | score | 本科名次 | 与第一名差距   
----+--------+-------+-------+----------+--------------  
  1 | 德哥   | 数学  |   100 |        1 |            0  
  1 | 张学友 | 数学  |    95 |        2 |            5  
  1 | 刘德华 | 数学  |    90 |        3 |           10  
  1 | 卡洛斯 | 数学  |    60 |        4 |           40  
  1 | 卡洛斯 | 英语  |    91 |        1 |            0  
  1 | 德哥   | 英语  |    90 |        2 |            1  
  1 | 张学友 | 英语  |    90 |        3 |            1  
  1 | 刘德华 | 英语  |    60 |        4 |           31  
  1 | 张学友 | 语文  |    89 |        1 |            0  
  1 | 卡洛斯 | 语文  |    81 |        2 |            8  
  1 | 德哥   | 语文  |    80 |        3 |            9  
  1 | 刘德华 | 语文  |    70 |        4 |           19  
(12 rows)  
```  
##### 60.11 聚合查询  
```  
db1=> select class,avg(score) from t group by class;  
 class |  avg    
-------+-------  
 语文  |    80  
 英语  | 82.75  
 数学  | 86.25  
(3 rows)  
db1=> select class,avg(score) filter (where n <> '刘德华') from t group by class;  
 class |        avg          
-------+-------------------  
 语文  | 83.33333333333333  
 英语  | 90.33333333333333  
 数学  |                85  
(3 rows)  
db1=> select class, array_agg(n order by score desc) as "名字", array_agg(score order by score desc) as "分数" from t group by class;  
 class |            名字             |      分数        
-------+-----------------------------+----------------  
 数学  | {德哥,张学友,刘德华,卡洛斯} | {100,95,90,60}  
 英语  | {卡洛斯,张学友,德哥,刘德华} | {91,90,90,60}  
 语文  | {张学友,卡洛斯,德哥,刘德华} | {89,81,80,70}  
(3 rows)  
db1=> explain analyze select class, array_agg(n order by score desc) as "名字", array_agg(score order by score desc) as "分数" from t group by class;  
                                                 QUERY PLAN                                                    
-------------------------------------------------------------------------------------------------------------  
 GroupAggregate  (cost=43.69..52.69 rows=200 width=96) (actual time=0.046..0.060 rows=3 loops=1)  
   Group Key: class  
   ->  Sort  (cost=43.69..45.19 rows=600 width=104) (actual time=0.027..0.028 rows=12 loops=1)  
         Sort Key: class  
         Sort Method: quicksort  Memory: 26kB  
         ->  Seq Scan on t  (cost=0.00..16.00 rows=600 width=104) (actual time=0.011..0.014 rows=12 loops=1)  
 Planning Time: 0.063 ms  
 Execution Time: 0.090 ms  
(8 rows)  
```  
##### 60.12 select for update | share   
`select for update` 锁住记录, (`for update`准备修改) (`for share`不准备修改), 防止被其他事务修改.    
```
create table t_forupdate (id int primary key, info text, ts timestamp);   
insert into t_forupdate select generate_series(1,100), md5(random()::text)  
```
session 1  
```  
db1=> begin;  
BEGIN  
Time: 0.344 ms  
db1=> select * from t_forupdate where id=1 for update;  
 id |               info               | ts   
----+----------------------------------+----  
  1 | 9293542d40201828542d8d6c0949268d |   
(1 row)  
```  
session 2  
```  
db1=> begin;  
BEGIN  
Time: 0.344 ms  
db1=> select * from t_forupdate where id=1 for update;  -- 等待  
```  
`select for update nowait` 遇到锁冲突时不等待, 报错.  
session 1  
```  
db1=> begin;  
BEGIN  
Time: 0.344 ms  
db1=> select * from t_forupdate where id=1 for update;  
 id |               info               | ts   
----+----------------------------------+----  
  1 | 9293542d40201828542d8d6c0949268d |   
(1 row)  
```  
session 2  
```  
db1=> begin;  
BEGIN  
Time: 0.344 ms  
db1=> select * from t_forupdate where id=1 for update nowait;  -- 不等待  
ERROR:  could not obtain lock on row in relation "t_forupdate"  
Time: 1.272 ms  
```  
##### 60.13 select for update skip locked  
遇到锁冲突时不等待, 跳过冲突记录, 锁未冲突记录, 并且不报错. 经常用于批量并行处理记录, 或者秒杀场景.  
[《高并发队列处理业务的数据库性能优化 - IO扫描|CPU计算浪费 , 锁冲突 , 垃圾索引扫描浪费》](../202308/20230805_01.md)    