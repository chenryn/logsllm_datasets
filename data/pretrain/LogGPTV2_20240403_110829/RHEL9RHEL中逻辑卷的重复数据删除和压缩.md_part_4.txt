解决 VDO
卷中高物理空间使用的最佳方法是删除未使用的文件，并使用在线丢弃这些未使用文件的块或
`fstrim`{.literal} 程序。VDO 卷的物理空间只能增加到 8192
slab，对于一个默认 slab 大小为 2 GB 的 VDO 卷为 16 TB，或对于一个具有 32
GB 的 VDO 卷为 256 TB 。
:::
在以下步骤中，将 [*myvg*]{.emphasis} 和 [*myvdo*]{.emphasis}
分别替换为卷组和逻辑卷名称。
::: orderedlist
**先决条件**
1.  已安装 `lvm2`{.literal}、`vdo`{.literal} d 和 `kmod-kvdo`{.literal}
    软件包。
2.  在您的系统中有一个有可用存储容量的 LVM 卷组。
3.  使用
    `lvcreate --type vdo --name myvdo myvg -L logical-size-of-pool --virtualsize virtual-size-of-vdo`{.literal}
    命令的精简配置 VDO 卷。如需更多信息，请参阅[创建 LVM-VDO
    卷](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/deduplicating_and_compressing_logical_volumes_on_rhel/creating-a-deduplicated-and-compressed-logical-volume_deduplicating-and-compressing-logical-volumes-on-rhel#creating-an-lvm-vdo-volume_creating-a-deduplicated-and-compressed-logical-volume){.link}。
:::
::: orderedlist
**步骤**
1.  确定精简置备 VDO 卷的最佳逻辑大小
    ``` literallayout
    # vdostats myvg-vpool0-vpool
    Device               1K-blocks Used     Available  Use% Space saving%
    myvg-vpool0-vpool   104856576  29664088 75192488   28%   69%
    ```
    要计算空间节省率，请使用以下公式：
    ``` screen
    Savings ratio = 1 / (1 - Space saving%)
    ```
    在本例中，
    ::: itemizedlist
    -   大约有 `3.22:1`{.literal} 个空间节省率（大约 80 GB）。
    -   如果对使用相同空间节省的数据写入 VDO
        卷，则按比例增加数据集大小乘以 256 GB。
    -   将这个数字调整到 200 GB
        时，如果出现相同的空间节省率，则会产生一个具有安全可用磁盘空间的逻辑大小。
    :::
2.  监控 VDO 卷中的空闲物理空间：
    ``` literallayout
    # vdostats myvg-vpool0-vpool
    ```
    可定期执行这个命令，以提供对 VDO 卷使用的和空闲物理空间的监控。
3.  可选：使用可用的
    `/usr/share/doc/vdo/examples/monitor/monitor_check_vdostats_physicalSpace.pl`{.literal}
    脚本，查看 VDO 卷上的物理空间使用量警告：
    ``` literallayout
    # /usr/share/doc/vdo/examples/monitor/monitor_check_vdostats_physicalSpace.pl myvg-vpool0-vpool
    ```
4.  在创建 VDO 卷时，`dmeventd`{.literal} 监控服务监控 VDO
    卷中物理空间的使用情况。当 VDO 卷被创建或启动时，这会被默认启用。
    在监控 VDO 卷时，使用 `journalctl`{.literal} 命令查看日志中的
    `dmeventd`{.literal} 的输出：
    ``` literallayout
    lvm[8331]: Monitoring VDO pool myvg-vpool0-vpool.
    ...
    lvm[8331]: WARNING: VDO pool myvg-vpool0-vpool is now 84.63% full.
    lvm[8331]: WARNING: VDO pool myvg-vpool0-vpool is now 91.01% full.
    lvm[8331]: WARNING: VDO pool myvg-vpool0-vpool is now 97.34% full.
    ```
5.  修复快要没有可用物理空间的 VDO 卷。当可以在 VDO
    卷中添加物理空间时，但卷空间在可以增大前已满时，可能需要临时将 I/O
    返回到卷。
    要临时停止 I/O 到卷，请执行以下步骤，其中 VDO 卷
    [*myvdo*]{.emphasis} 包含挂载在 [*/users/homeDir*]{.emphasis}
    路径中的文件系统：
    ::: orderedlist
    1.  冻结文件系统：
        ``` literallayout
        # xfs_freeze -f /users/homeDir
        # vgextend myvg /dev/vdc2
        # lvextend -l new_size myvg/vpool0-name
        # xfs_freeze -u /users/homeDir
        ```
    2.  卸载文件系统：
        ``` literallayout
        # umount /users/homeDir
        # vgextend myvg /dev/vdc2
        # lvextend -l new_size myvg/vpool0-name
        # mount -o discard /dev/myvg/myvdo /users/homeDir
        ```
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        卸载或释放缓存数据的文件系统将产生缓存数据的写入，这可能会填满
        VDO 卷的物理空间。当为 VDO
        卷上的空闲物理空间设置监控阈值时，请考虑缓存的最大缓存文件系统数据量。
        :::
    :::
6.  可以使用 `fstrim`{.literal} 程序清理文件系统不再使用的块。对 VDO
    卷上的挂载的文件系统执行 `fstrim`{.literal}
    可能会导致该卷的可用空间增加。`fstrim`{.literal} 工具将丢弃到 VDO
    卷，然后用于删除对之前使用的块的引用。如果这些块中有单一引用，则使用物理空间。
    ::: orderedlist
    1.  检查 VDO stats 以查看当前可用空间量：
        ``` literallayout
        # vdostats --human-readable myvg-vpool0-vpool
         Device             Size  Used  Available Use%  Space saving%
        myvg-vpool0-vpool  100.0G 95.0G 5.0G      95%   73%
        ```
    2.  丢弃未使用块：
        ``` literallayout
        # fstrim /users/homeDir
        ```
    3.  查看 VDO 卷的空闲物理空间：
        ``` literallayout
        # vdostats --human-readable myvg-vpool0-vpool
         Device             Size    Used   Available Use%  Space saving%
        myvg-vpool0-vpool  100.0G   30.0G  70.0G     30%    43%
        ```
        在这个示例中，在文件系统上执行 `fstrim`{.literal}
        后，丢弃可以返回 65G 物理空间以便在 VDO 卷中使用。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        丢弃较低级别的重复数据删除和压缩卷时，可能会回收物理空间，而不是丢弃更高水平的重复数据删除和压缩卷。具有高水平的重复数据删除和压缩卷可能需要进行更广泛的清理来回收物理空间，而不是只是丢弃尚未使用的块。
        :::
    :::
:::
:::
:::
[]{#trim-options-on-an-lvm-vdo-volume_deduplicating-and-compressing-logical-volumes-on-rhel.html}
::: chapter
::: titlepage
# []{#trim-options-on-an-lvm-vdo-volume_deduplicating-and-compressing-logical-volumes-on-rhel.html#trim-options-on-an-lvm-vdo-volume_deduplicating-and-compressing-logical-volumes-on-rhel}第 4 章 在 LVM-VDO 卷中修剪选项 {.title}
:::
您可以使用 `discard`{.literal} 选项挂载文件系统，它会告知 VDO
卷未使用的空间。另一种选择是使用 `fstrim`{.literal}
应用，它是一个按需丢弃的，或 `mount -o discard`{.literal}
命令用于立即丢弃。
在使用 `fstrim`{.literal} 应用时，管理员需要调度和监控额外的进程，而使用
`mount -o discard`{.literal} 命令则可尽可能立即恢复空间。
请注意，目前建议使用 `fstrim`{.literal} 应用程序丢弃未使用的块，而不是
`discard`{.literal}
挂载选项，因为此选项的性能影响可能非常严重。因此，`nodiscard`{.literal}
是默认值。
::: section
::: titlepage
# []{#trim-options-on-an-lvm-vdo-volume_deduplicating-and-compressing-logical-volumes-on-rhel.html#enabling-discard-mount-option-on-vdo_trim-options-on-an-lvm-vdo-volume}在 VDO 中启用丢弃挂载选项 {.title}
:::
此流程在 VDO 卷中启用 `discard`{.literal} 选项。
::: itemizedlist
**先决条件**
-   您的系统中有 LVM-VDO 卷。
:::
::: itemizedlist
**步骤**
-   在卷中启用 `discard`{.literal} ：
    ``` screen
    # mount -o discard /dev/vg-name/vdo-name mount-point
    ```
:::
::: itemizedlist
**其他资源**
-   `XFS(5)`{.literal}、`mount(8)`{.literal} 和 `lvmvdo(7)`{.literal}
    man page
:::
:::
::: section
::: titlepage
# []{#trim-options-on-an-lvm-vdo-volume_deduplicating-and-compressing-logical-volumes-on-rhel.html#setting-up-periodic-trim-operation_trim-options-on-an-lvm-vdo-volume}设置定期 TRIM 操作 {.title}
:::
这个过程在您的系统中启用调度的 TRIM 操作。
::: itemizedlist
**先决条件**
-   您的系统中有 LVM-VDO 卷。
:::
::: itemizedlist
**步骤**
-   启用并启动计时器：
    ``` screen
    # systemctl enable --now fstrim.timer
    ```
:::
::: itemizedlist
**验证**
-   验证计时器是否已启用：
    ``` screen
    # systemctl list-timers fstrim.timer
    ```
    ::: example
    []{#trim-options-on-an-lvm-vdo-volume_deduplicating-and-compressing-logical-volumes-on-rhel.html#idm140107008295536}
    **例 4.1. 验证过程的可能输出**
    ::: example-contents
    ``` screen
    # systemctl list-timers fstrim.timer
    NEXT                         LEFT         LAST  PASSED  UNIT         ACTIVATES
    Mon 2021-05-10 00:00:00 EDT  5 days left  n/a   n/a     fstrim.timer fstrim.service
    ```
    :::
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您没有对 VDO 卷的引用，因为 `fstrim.timer`{.literal}
在所有挂载的文件系统中运行。
:::
::: itemizedlist
**其他资源**
-   `fstrim(8)`{.literal} man page
:::
:::
:::