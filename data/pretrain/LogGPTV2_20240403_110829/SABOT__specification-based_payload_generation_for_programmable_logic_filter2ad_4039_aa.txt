title:SABOT: specification-based payload generation for programmable logic
controllers
author:Stephen E. McLaughlin and
Patrick D. McDaniel
SABOT: Speciﬁcation-based Payload Generation for
Programmable Logic Controllers∗
Stephen McLaughlin Patrick McDaniel
Systems and Internet Infrastructure Security
Laboratory
Pennsylvania State University
{smclaugh,mcdaniel}@cse.psu.edu
ABSTRACT
Programmable Logic Controllers (PLCs) drive the behavior of in-
dustrial control systems according to uploaded programs. It is now
known that PLCs are vulnerable to the uploading of malicious code
that can have severe physical consequences. What is not under-
stood is whether an adversary with no knowledge of the PLC’s
interface to the control system can execute a damaging, targeted,
or stealthy attack against a control system using the PLC. In this
paper, we present SABOT, a tool that automatically maps the con-
trol instructions in a PLC to an adversary-provided speciﬁcation of
the target control system’s behavior. This mapping recovers sufﬁ-
cient semantics of the PLC’s internal layout to instantiate arbitrary
malicious controller code. This lowers the prerequisite knowledge
needed to tailor an attack to a control system. SABOT uses an in-
cremental model checking algorithm to map a few plant devices at
a time, until a mapping is found for all adversary-speciﬁed devices.
At this point, a malicious payload can be compiled and uploaded
to the PLC. Our evaluation shows that SABOT correctly compiles
payloads for all tested control systems when the adversary cor-
rectly speciﬁes full system behavior, and for 4 out of 5 systems in
most cases where there where unspeciﬁed features. Furthermore,
SABOT completed all analyses in under 2 minutes.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Invasive soft-
ware; J.7 [Computers in Other Systems]: Process control
General Terms
Security
Keywords
Programmable Logic Controller, Attack, Critical Infrastructure
∗This material is based upon work partially supported by the Na-
tional Science Foundation under Grants CCF 0937944 and CNS
0643907, and by a grant from the Security and Software Engineer-
ing Research Center (S2ERC).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
Process control systems are vulnerable to software-based exploits
with physical consequences [16, 33, 27, 35, 37, 3]. The increased
network connectivity and standardization of Supervisory Control
and Data Acquisition (SCADA) have raised concerns of attacks on
control system-managed infrastructure [5, 20, 6, 44]. Control sys-
tems use Programmable Logic Controllers (PLCs) to drive physical
machinery according to software control logic. For ease of modiﬁ-
cation, control logic is uploaded to the PLC from the local network,
the Internet, or serial port [41, 11]. For example, hundreds of Inter-
net accessible PLCs and SCADA devices can be found through the
Shodan search engine [1, 12]. An adversary with PLC access can
upload malicious control logic, called the payload, thereby gaining
full control of the devices under the PLC. Nevertheless, an addi-
tional challenge still remains: Even with knowledge of the target
control system’s behavior, an adversary cannot construct a payload
for speciﬁc devices without knowing how the PLC interfaces with
those devices. However, there is often no direct way of determining
which PLC memory locations regulate which devices.
This paper presents SABOT (Speciﬁcation-based Attacks against
Boolean Operations and Timers)1, a proof-of-concept tool for gen-
erating PLC payloads based on an adversary-provided speciﬁca-
tion of device behavior in the target control system. SABOT’s main
purpose is to recover semantics of PLC memory locations that are
mapped to physical devices. Speciﬁcally, SABOT determines which
PLC memory locations map to the devices in a behavioral speciﬁ-
cation of the target plant. This enables an adversary with a goal to
attack speciﬁc devices to automatically instantiate that attack for a
speciﬁc PLC in the victim control system. Unlike previous attacks,
such as Stuxnet [16], a precompiled payload is not necessary.
An attack using SABOT proceeds as follows:
1. The adversary encodes his understanding of the plant’s be-
havior into a speciﬁcation. The speciﬁcation contains a dec-
laration of plant devices and a list of temporal logic proper-
ties deﬁning their behavior.
2. SABOT downloads the existing control logic bytecode from
the victim PLC, and decompiles it into a logical model. SABOT
then uses model checking to ﬁnd a mapping between the
speciﬁed devices and variables within the control logic.
3. SABOT uses the mapping to instantiate a generic malicious
payload into one that can be run on the victim PLC. The
generic payload can contain arbitrary manipulation of the
speciﬁed devices, which SABOT substitutes with PLC ad-
dresses.
1Sabots were wooden shoes thrown into the gears of machinery by
Luddites in the Industrial Revolution.
439Figure 1: An example plant and process speciﬁcation for a chemical mixing control process.
SABOT is not for adversaries that do not understand the behavior of
the victim plant. In such cases, an adversary can erase the PLC’s
memory, upload random instructions, or attempt to bypass safety
properties of the control logic [29]. None of these attacks, however,
are guaranteed to be effective or stealthy. Instead, SABOT is most
useful to adversaries with accurate knowledge of the target plant
and process, but that are unaware of a critical piece of information:
how to manipulate speciﬁc plant devices from the PLC. This infor-
mation is not obvious to the adversary because it is unknown which
PLC variables are mapped to plant devices.
There are several implications stemming from the existence of a
tool like SABOT:
1. Reduced adversary requirements. In most cases, the only way
to know which PLC memory addresses map to which devices is to
physically inspect the labels on wires connecting the PLC to de-
vices. Only the most powerful adversaries e.g., insiders or nation
states, will have this information [38]. Furthermore, SABOT en-
ables attacks by adversaries that are unfamiliar with PLC instruc-
tion set architectures and communication protocols. Because the
variable mapping is done on an intermediate representation, code
from arbitrary PLCs can be decompiled for analysis by SABOT. We
give an example implementation of one such decompiler in Sec-
tion 3.2.
2. Improved target identiﬁcation. In the Stuxnet attack, PLC ver-
sion strings and device metadata were used to verify that the correct
target had been identiﬁed [16]. If this metadata was not found in
the PLC, then it was silently ignored by the virus. Using SABOT, a
target is identiﬁed by whether or not its control logic behaves in the
way speciﬁed by the adversary. Thus, the adversary need not know
any version strings or vendor metadata a priori. This may also re-
duce false positives in cases where an unintended PLC contains the
expected version strings and metadata. We evaluate SABOT’s abil-
ity to correctly identify a target control logic out of a number of
candidates in Section 4.4.
3. Room for error. Using a precompiled payload, an adversary’s
understanding of the plant’s behavior must be exactly correct or
the payload will likely fail. Using a dynamically generated pay-
load, there is some room for error. For example in Section 4.5 we
describe a method for writing behavioral speciﬁcations that will
correctly map to a control logic regardless of whether or not it im-
plements an emergency stop button, a common feature in many
control systems. While this is a ﬁrst step towards making a truly
adaptable attack mechanism, our results show that it works well
when an adversary correctly speciﬁes the behavior of a majority of
plant devices, as shown in Section 4.1.
It is also, to the best of
our knowledge, the ﬁrst analysis of its kind directed at PLC-based
control systems.
Our evaluations of SABOT show that it performs accurately and
efﬁciently against control logics of equal or greater complexity than
the target of the Stuxnet attack [16]. We begin our discussion of
SABOT in the next section by providing a brief overview of se-
quential control systems and detail an illustrative example.
2. CONTROL SYSTEMS
Control systems are used to monitor and control physical pro-
cesses. These systems can drive processes as simple as motion ac-
tivated light switches or as complex as wastewater treatment. Re-
gardless of their purpose and complexity, control systems are gen-
erally structured the same.
The physical apparatus in which the control system resides is
called the plant. Within the plant, control systems can be decom-
posed into three distinct elements: control inputs, control outputs,
and control logic. Control inputs are used to communicate the state
of the plant. For example, temperature, motion, or light sensors
are used to detect and communicate physical states. Other inputs
are human driven, such as switches, dials, and buttons. The control
system sends output signals to external devices to effect changes in
the physical world. For example, such signals may turn on indi-
cator lights, open and close valves, or drive bi-directional motors.
The control logic is the PLC software that computes new outputs
based on sensor inputs. The PLC repeatedly executes the control
logic in a scan cycle consisting of: i. read new inputs, ii. execute
control logic, and iii. write outputs to devices.
An example control system for a simpliﬁed chemical mixer is
shown in Figure 1. The plant (Figure 1(a)) is a single mixer with
valves to dispense two ingredients, A and B, a mixing element,
and a valve for draining the tank. The valves are controlled by
the output variables y1 and y2 respectively, the mixer by y3, and
the drain by y4. A device is ON when its corresponding output
variable is set to (cid:62) (true) and OFF when it is ⊥ (false). Three level
sensors are used to detect when the tank is at three levels–low, half
full, and full (corresponding to inputs x1, x2, and x3, respectively).
A level switch xi = (cid:62) if the contents of the tank are at or above its
level. A start signal is sent to the PLC via x4.
The mixer follows a simple process in which ingredient A is
added until the tank is half full, ingredient B is mixed with A until
the tank is full, and the result is drained. The speciﬁcation, shown
in Figure 1(b), details the control system implementation:
y1(a)Plantx1x2x3y2y3y4...PLCx1x2x3y1y2y3y4=X{}=Y{}ABProductX∪Y=VMx4x4(c)Control Logic (High Level)FillA:y1←(x4∨y1)∧¬x2AddB:y2←x2∧¬y4Mix:y3←(x2∨y3)∧x1Drain:y4←(x3∨y4)∧x1(b)x1:LowLevelSwitchx2:MidLevelSwitchx3:HighLevelSwitchx4:StartButtony1:IngredientAValvey2:IngredientBValvey3:Mixery4:DrainValveFill AMix BDrainStartProcess4401. Initially, all inputs and outputs are off until the Start button
is pressed (x4 = (cid:62)).
2. At this point the process enters state Fill A (y1 = (cid:62)), and the
tank is ﬁlled with ingredient A until the tank is ﬁlled midway
(x2 = (cid:62)), at which point the valve for A is closed (y1 = ⊥).
3. Next, the system transitions to the state Mix B, in which in-
gredient B is added (valve B is opened) until x3 = (cid:62). The
mixer y3 is also started in this state.
4. At this point, the system closes the value for B and enters the
Drain state (y4 = (cid:62)) until the tank is empty (detected by the
“low” sensor x1 = ⊥). At this point, the mixer is stopped.
The mixing process is an example of a common class of control sys-
tems, called sequential control systems. Sequential control systems
drive a physical plant through a process consisting of a sequence
of discrete steps. Sequential control is used in industrial manu-
facturing (automotive assembly, QA testing), building automation
(elevators, lighting), chemical processing (process control), energy
delivery (power management), and transportation automation (rail-
way switching, trafﬁc lights), among others.
Not shown in the example, a timer is a special control system
primitive that introduces a preset time delay between when an input
becomes true, and when a subsequent output becomes true. A timer
only sets the speciﬁed output to (cid:62) when the input has been set to
(cid:62) for the duration of its preset delay value. Timers can be used to
replace other sensors. For example, the level sensors above could
be replaced with timers, presuming the ﬂow and drain rates of the
apparatus were known and ﬁxed.
2.1 PLC Logic and ISA
The control logic for a sequential process is codiﬁed into a set of
Boolean circuits that are evaluated in order with dependencies. The
circuits are then compiled into the PLC’s native instruction set.
The control logic implementation of the chemical mixing pro-
cess is shown in Figure 1(c). The PLC executes each of the four
statements starting with Fill A and ending with Drain once each
scan cycle. At the plant start up state, y1 = ⊥. After the button x4
is pressed, y1 = (cid:62) until x2 = (cid:62). Notice that the clause (x4∨y1) is
necessary as x4 is a button that may only be depressed temporarily,
thus once y1 is activated, it should remain so until the terminating
condition x2 = (cid:62). Here, the value of y1 on the right hand side of
the statement is the value for y1 from the previous scan cycle.
The control output for valve B (y2) is activated immediately
when y1 = ⊥ on the condition x2 = (cid:62). y2 then remains ON
until the draining process begins with y4. The mixer (y3) is on as
long as the level in the tank has reached midway, and has not sub-
sequently been emptied. Finally, the drain (y4) is activated when
the tank is full, and remains ON until the tank is empty.
A logic program must be compiled to a PLC’s native instruction
set architecture (ISA) before being uploaded to the PLC. While
ISAs vary between PLC vendors, many are equivalent to the IEC
61131-3 standard for the Instruction List (IL) programming lan-
guage [21]. We implement an IL decompiler in Section 3.2.
2.2 Attacking PLCs
Control systems have shown to be vulnerable to attacks through
sensors [27], human machine interfaces [2], and PLCs [16, 4]. In
this work we focus on the last of these due to the complete control
offered to an adversary by PLCs, and the vulnerability of PLCs rel-
ative to the other two. For example, hundreds of Internet address-
able PLCs can be found on the Shodan computer search engine [1,
12], and new web-enabled, PLCs are being released into the mar-
ket place with the aims of making remote management more con-
Figure 2: SABOT: Steps to generate a malicious payload.
venient [41, 11]. An even more common arrangement is to have
the control system network connected to a corporate network for
economic reasons [44, 34]. Given this requirement, it is indeed the
case that all but the most critical PLCs will be at least reachable
from public networks.
In this work, we consider an adversary that has sufﬁcient knowl-
edge about the behavior of the target control system to design a tar-
geted and perhaps stealthy payload for that control system. While
this may sound like a strong requirement, it is important to note
that there are several methods through which one can obtain such
information. Many control systems, including railway switching,
and electrical substations exhibit some or all of their machinery
and behavior in plain view. Furthermore, details about plant struc-
ture can be gleaned from vulnerable human machine interfaces [2],
and scanning of industrial network protocols [29]. Vendors also re-
lease device data sheets and sample control logic, precisely deﬁn-
ing device behavior, for example [22]. Of course such information
is available to low ranking insiders [24]. Finally, we mention that
while it is unlikely that unskilled or “script kiddie” adversaries will
mount attacks targeted at speciﬁc devices, there is existing work
describing such naive attacks and their limitations [29].
3. SABOT
SABOT instantiates malicious payloads for targeted control sys-
tems. Depicted in Figure 2, the SABOT initially extracts a logi-
cal model of the process from the PLC code (see Section 3.2, De-
compilation). Next, the model and process speciﬁcation are used
to create a mapping of physical devices to input and output vari-
ables (called the variable-to-device mapping), or VTDM, (see Sec-
tion 3.3, VTDM Recovery). Last, a generic attack is projected onto
to the existing model and VTDM to create a malicious payload
called the PLC Malcode (see Section 3.4, Payload Construction).
This malcode is delivered to the victim interface.
3.1 Problem Formulation
Consider a scenario in which an adversary may wish to cause
ingredient A to be omitted from the chemical mixing process de-
scribed above. A PLC payload for this might look like:
Valve A ← ⊥
Valve B ← (Start Button ∨ Valve B) ∧ ¬Drain Valve