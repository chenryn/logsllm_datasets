the original distribution f(cid:48), the vector ˜f is a set of independent
random variables, where each component ˜fv follows Gaussian
distribution with mean f(cid:48)
v . The likelihood
of ˜f given f(cid:48) is thus
v and variance σ(cid:48)2
(cid:104)˜f|f(cid:48)(cid:105)
Pr
(cid:104)˜f|f(cid:48)(cid:105)
(cid:89)
≈(cid:89)
1(cid:112)2πσ(cid:48)2
=
v
· e
v
v
(cid:104) ˜fv|f(cid:48)
v
(cid:105)
Pr
− (f(cid:48)
v− ˜fv )2
2σ(cid:48)2
v =
1(cid:112)2π(cid:81)
v σ(cid:48)2
v
−(cid:80)
v
· e
(f(cid:48)
v− ˜fv )2
2σ(cid:48)2
v
.
(9)
To differentiate from [19], we call it MLE-Apx.
• MLE-Apx: First use standard FO, then compute the MLE
with constraints (summing-to-one and non-negativity) to
recover the values.
In Appendix B, we use the KKT condition [21], [20] to obtain
an efﬁcient solution. In particular, we partition the domain D
into D0 and D1, where D0 ∩ D1 = ∅ and D0 ∪ D1 = D. For
v ∈ D0, f(cid:48)
v = 0; for v ∈ D1,
f(cid:48)
v =
q(1 − q)xv + ˜fv(p − q)
p − q − (p − q)(1 − p − q)xv
(10)
where
xv =
(cid:80)
˜fv(p − q) − (p − q)
x∈D1
(p − q)(1 − p − q) − |D1|q(1 − q)
We can rewrite Equation (10) as
f(cid:48)
v = ˜fv · γ + δ,
where
γ =
δ =
p − q
p − q + (p − q)(1 − p − q)xv
p − q + (p − q)(1 − p − q)xv
q(1 − q)xv
Hence MLE-Apx appears to represent some hybrid of Norm-
Sub and Norm-Mul. In evaluation, we observe that Norm-Sub
and MLE-Apx give very close results, as γ ∼ 1. Furthermore,
6
Method
Base-Pos
Post-Pos
Base-Cut
Norm
Norm-Mul
Norm-Cut
Norm-Sub
MLE-Apx
Power
PowerNS
Description
Convert negative est. to 0
Convert negative query result to 0
Convert est. below threshold T to 0
Add δ to est.
Convert negative est. to 0, then multiply γ to positive est.
Convert negative and small positive est. below θ to 0.
Convert negative est. to 0 while adding δ to positive est.
Convert negative est. to 0, then add δ to positive est.
Fit Power-Law dist., then minimize expected squared error
Apply Norm-Sub after Power
TABLE I
SUMMARY OF METHODS.
Non-neg
Yes
Yes
Yes
No
Yes
Yes
Yes
Yes
Yes
Yes
Sum to 1
Complexity
No
No
No
Yes
Yes
Yes
Yes
No
Yes
Almost
O(d)
N/A
O(d)
O(d)
O(d)
O(d)
O(d)
√
O(d)
√
n · d)
n · d)
O(
O(
in variance is dominated by the
when the fv component
other component (as in Equation (5)), the CLS formulation
is equivalent to our MLE formulation.
E. Least Expected Square Error
Jia et al. [17] proposed a method in which one ﬁrst
assumes that the data follows some type of distribution (but
the parameters are unknown), then uses the estimates to ﬁt the
parameters of the distribution, and ﬁnally updates the estimates
that achieve expected least square.
• Power: Fit a distribution, and then minimize the expected
squared error.
(cid:105)
E(cid:104)
Formally, for each value v, the estimate ˜fv given by FO
is regarded as the addition of two parts: the true frequency
fv and noise following the normal distribution (as shown
in Equation (6)). The method then ﬁnds f(cid:48)
v that minimizes
. To solve this problem, the authors esti-
mate the true distribution fv from the estimates ˜f (where ˜f is
the vector of the ˜fv’s).
(fv − f(cid:48)
v)2| ˜fv
In particular, it is assume in [17] that the distribution follows
Power-Law or Gaussian. The distributions can be determined
by one or two parameters, which can be ﬁtted from the
estimation ˜f. Given Pr [x] as the probability fv = x from
the ﬁtted distribution, and Pr [x ∼ N (0, σ)] as the pdf of x
drawn from the Normal distribution with 0 mean and standard
deviation σ (as in Equation (6)), one can then minimize the
objective. Speciﬁcally, for each value v ∈ D, output
(cid:105) · Pr [x] · x
(cid:105) · Pr [y] dy
dx.
(11)
(cid:104)
(cid:104)
(cid:90) 1
Pr
(cid:82) 1
0
0 Pr
f(cid:48)
v =
( ˜fv − x) ∼ N (0, σ)
( ˜fv − y) ∼ N (0, σ)
We ﬁt Pr [x] with the Power-Law distribution and call the
method Power. Using this method requires knowledge and/or
assumption of the distribution to be estimated. If there are
too much noise, or the underlying distribution is different,
forcing the observations to ﬁt a distribution could lead to
poor accuracy. Moreover, this method does not ensure the
frequencies sum up to 1, as Equation (11) only considers the
frequency of each value v independently. To make the result
consistent, we use Norm-Sub to post-process results of Power,
since Power is close to CLS, and Norm-Sub is the solution to
CLS. We call it PowerNS.
• PowerNS: First use standard FO, then use Power to recover
the values, ﬁnally use Norm-Sub to further process the
results.
F. Summary of Methods
In summary, Norm-Sub is the solution to the Constraint
Least Square (CLS) formulation to the problem. Furthermore,
when the fv component
in variance is dominated by the
other component (as in Equation (5)), the CLS formulation
is equivalent to our MLE formulation. In that case, Norm-Sub
is equivalent to MLE-Apx.
v1
≤ f(cid:48)
Table I gives a summary of the methods. First of all, all
of the methods preserve the frequency order of the value,
v2 iff ˜fv1 ≤ ˜fv2. The methods can be classiﬁes
i.e., f(cid:48)
into three classes: First, enforcing non-negativity only. Base-
Pos, Post-Pos, Base-Cut, and Power fall
in this category.
Second, enforcing summing-to-one only. Only Norm is in this
class. Third, enforcing the two requirement simultaneously.
Norm-Mul, Norm-Cut, Norm-Sub, and PowerNS satisfy both
requirements.
V. EVALUATION
As we are optimizing multiple utility metrics together, it
is hard to theoretically compare different methods. In this
section, we run experiments to empirically evaluate these
methods.
At the high level, our evaluations show that different meth-
ods perform differently in different settings, and to achieve
the best utility, it may or may not be necessary to exploit all
the consistency constraints. As a result, we conclude that for
full-domain query, Base-Cut performs the best; for set-value
query, PowerNS performs the best; and for high-frequency-
value query, Norm performs the best.
A. Experimental Setup
Datasets. We run experiments on two datasets (one synthetic
and one real).
• Synthetic Zipf’s distribution with 1024 values and 1
million reports. We use s = 1.5 in this distribution.
• Emoji: The daily emoji usage data. We use the average
emoji usage of an emoji keyboard 1, which gives the total
count of n = 884427 with d = 1573 different emojis.
Setup. The FO protocols and post-processing algorithms
are implemented in Python 3.6.6 using Numpy 1.15; and
all the experiments are conducted on a PC with Intel Core
i7-4790 3.60GHz and 16GB memory. Although the post-
processing methods can be applied to any FO protocol, we
1http://www.emojistats.org/, accessed 12/15/2019 10pm ET
7
(a) Base (Post-Pos)
(b) Base-Pos
(c) Base-Cut
(d) Norm
(e) Norm-Mul
(f) Norm-Cut
(g) Norm-Sub
(h) Power
(i) PowerNS
Fig. 1. Log-scale distribution of the Zipf’s dataset ﬁxing  = 1, the x-axes indicates the sorted value index and the y-axes is its count. The blue line is the
ground truth; the green dots are estimations by different methods.
focus on simulating OLH as it provides near-optimal utility
with reasonable communication bandwidth.
Metrics. We evaluate three scenarios 1) estimate the fre-
quency of every value in the domain (full-domain), 2) estimate
the aggregate frequencies of a subset of values (set-value),
and 3) estimate the frequencies of the most frequent values
(frequent-value).
We use the metrics of Mean of Squared Error (MSE). MSE
measures the mean of squared difference between the estimate
and the ground truth for each (set of) value. For full-domain,
we compute
(cid:88)
v∈D
MSE =
1
d
(fv − f(cid:48)
v)2.
For frequent-value, we consider the top k values with highest
fv instead of the whole domain D; and for set-value, instead
of measuring errors for singletons, we measure errors for sets,
that is, we ﬁrst sum the frequencies for a set of values, and
then measure the difference.
Plotting Convention. Unless otherwise speciﬁed, for each
dataset and each method, we repeat the experiment 30 times,
with result mean and standard deviation reported. The standard
deviation is typically very small, and barely noticeable in the
ﬁgures.
Because there are 11 algorithms (10 post-processing meth-
ods plus Base), and for any single metric there are often
multiple methods that perform very similarly, resulting their
lines overlapping. To make Figures 4–8 readable, we plot
8
results on two separate ﬁgures on the same row. On the left,
we plot 6 methods, Base, Base-Pos, Post-Pos, Norm, Norm-
Mul, and Norm-Sub. On the right, we plot Norm-Sub with the
remaining 5 methods, MLE-Apx, Base-Cut, Norm-Cut, Power
and PowerNS. We mainly want to compare the methods in the
right column.
B. Bias-variance Evaluation
Figure 1 shows the true distribution of the synthetic Zipf’s
dataset and the mean of the estimations. As we plot the count
estimations (instead of frequency estimations), the variance is
larger (a n2 = 1012 multiplicative factor than the frequency
estimations). We thus estimate 5000 times in order to make the
mean stabilize. In Figure 2, we subtract the estimation mean by
the ground truth and plot the difference, which representing
the empirical bias. It can be seen that Base and Norm are
unbiased. Base-Pos introduces systematic positive bias. Base-
Cut gives unbiased estimations for the ﬁrst few most frequent
values, as their true frequencies are much greater than the
threshold T used to cut off estimation below it to 0. As the
noise is close to normal distribution, the possibility that a high-
frequency value is estimated to be below T is exponentially
small. The similar analysis also holds for the low-frequency
values, whose estimates are unlikely to be above T . On the
other hand, for values in between, the two biases compete with
each other. At some point, the two effects cancel out with
each other, leading to unbiased estimations. But this point is
dependent on the whole distribution, and thus is hard to be
found analytically. For Norm-Cut, the similar reasoning also











































