        ``` literallayout
        # xdp-filter port 22
        ```
        这个命令添加一个匹配 TCP 和 UDP
        流量的规则。要只匹配特定的协议，使用 `-p protocol`{.literal}
        选项。
    -   要丢弃来自 `192.0.2.1`{.literal} 的数据包，输入：
        ``` literallayout
        # xdp-filter ip 192.0.2.1 -m src
        ```
        请注意，`xdp-filter`{.literal} 不支持 IP 范围。
    -   要丢弃来自 MAC 地址 `00:53:00:AA:07:BE`{.literal}
        的数据包，请输入：
        ``` literallayout
        # xdp-filter ether 00:53:00:AA:07:BE -m src
        ```
    :::
:::
::: itemizedlist
**验证步骤**
-   使用以下命令显示丢弃和允许的数据包统计信息：
    ``` literallayout
    # xdp-filter status
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `xdp-filter`{.literal}的详情，请查看 `xdp-filter(8)`{.literal}
    man page。
-   如果您是开发人员并且对 `xdp-filter`{.literal}
    代码感兴趣，请从红帽客户门户网站下载并安装相应的源 RPM(SRPM)。
:::
:::
::: section
::: titlepage
# []{#using-xdp-filter-for-high-performance-traffic-filtering-to-prevent-ddos-attacks_configuring-and-managing-networking.html#dropping-all-network-packets-except-the-ones-that-match-an-xdp-filter-rule_using-xdp-filter-for-high-performance-traffic-filtering-to-prevent-ddos-attacks}丢弃所有与 xdp-filter 规则匹配的网络数据包 {.title}
:::
这部分论述了如何使用 `xdp-filter`{.literal} 来只允许网络伪装：
::: itemizedlist
-   来自和到一个特定目的地端口
-   来自和到一个特定 IP 地址
-   来自和到特定的 MAC 地址
:::
要做到这一点，使用 `xdp-filter`{.literal} 的 `deny`{.literal}
策略来定义该过滤器丢弃所有的网络数据包，但与特定规则匹配的除外。例如，如果您不知道要丢弃的数据包的源
IP 地址，请使用这个方法。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
如果您在一个接口上加载 `xdp-filter`{.literal} 时将默认策略设置为
`deny`{.literal}，则内核会立即从这个接口丢弃所有数据包，直到您创建允许某些流量的规则。要避免从系统中锁定，在本地输入命令或者通过不同的网络接口连接到主机。
:::
::: itemizedlist
**先决条件**
-   已安装 `xdp-tools`{.literal} 软件包。
-   您登录到本地主机，或使用您不计划过滤流量的网络接口。
-   支持 XDP 程序的网络驱动程序。
:::
::: orderedlist
**流程**
1.  加载 `xdp-filter`{.literal} 来处理特定接口上的数据包，如
    `enp1s0`{.literal}：
    ``` literallayout
    # xdp-filter load enp1s0 -p deny
    ```
    另外，使用 `-f feature`{.literal} 选项只启用特定功能，如
    `tcp`{.literal}、`ipv4`{.literal} 或
    `ethernet`{.literal}。仅加载所需的功能（而不是全部）可提高软件包处理的速度。要启用多个功能，使用逗号分隔它们。
    如果该命令出错，则网络驱动程序不支持 XDP 程序。
2.  添加规则以允许匹配它们的数据包。例如：
    ::: itemizedlist
    -   要允许来自和端口 `22`{.literal} 的数据包，请输入：
        ``` literallayout
        # xdp-filter port 22
        ```
        这个命令添加一个匹配 TCP 和 UDP
        流量的规则。要只匹配特定的协议，将 `-p protocol`{.literal}
        选项传递给命令。
    -   要允许来自和 `192.0.2.1`{.literal} 的数据包，请输入：
        ``` literallayout
        # xdp-filter ip 192.0.2.1
        ```
        请注意，`xdp-filter`{.literal} 不支持 IP 范围。
    -   要允许来自和到 MAC 地址 `00:53:00:AA:07:BE`{.literal}
        的数据包，请输入：
        ``` literallayout
        # xdp-filter ether 00:53:00:AA:07:BE
        ```
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    `xdp-filter`{.literal}
    实用程序不支持有状态数据包检查。这要求您不使用 `-m mode`{.literal}
    选项设置模式，或者您添加显式规则以允许机器接收的接收流量响应。
    :::
:::
::: itemizedlist
**验证步骤**
-   使用以下命令显示丢弃和允许的数据包统计信息：
    ``` literallayout
    # xdp-filter status
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `xdp-filter`{.literal}的详情，请查看 `xdp-filter(8)`{.literal}
    man page。
-   如果您是开发人员，并且您对
    `xdp-filter`{.literal}代码有兴趣，请从红帽客户门户网站下载并安装相应的源
    RPM（SRPM）。
:::
:::
:::
[]{#getting-started-with-dpdk_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#getting-started-with-dpdk_configuring-and-managing-networking.html#getting-started-with-dpdk_configuring-and-managing-networking}第 49 章 DPDK 入门 {.title}
:::
数据平面开发套件(DPDK)提供库和网络驱动程序来加快用户空间中的软件包处理。
管理员使用 DPDK，例如，在虚拟机中使用单一根 I/O
虚拟化（SR-IOV）来减少延迟并增加 I/O 吞吐量。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
红帽不支持实验性的 DPDK API。
:::
::: section
::: titlepage
# []{#getting-started-with-dpdk_configuring-and-managing-networking.html#installing-the-dpdk-package_getting-started-with-dpdk}安装 dpdk 软件包 {.title}
:::
这部分论述了如何安装 `dpdk`{.literal} 软件包。
::: itemizedlist
**先决条件**
-   安装了红帽企业版 Linux。
-   为主机分配了有效的订阅。
:::
::: itemizedlist
**流程**
-   使用 `yum`{.literal} 实用程序安装 `dpdk`{.literal} 软件包：
    ``` literallayout
    # yum install dpdk
    ```
:::
:::
::: section
::: titlepage
# []{#getting-started-with-dpdk_configuring-and-managing-networking.html#additional_resources_7}其它资源 {.title}
:::
::: itemizedlist
-   有关在 Red Hat Enterprise Linux 上支持 SR-IOV
    的网络适配器列表，请参阅 [Network Adapter Fast Datapath
    功能支持列表](https://access.redhat.com/articles/3538141){.link}。
:::
:::
:::
[]{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking}第 50 章 了解 RHEL 中的 eBPF 网络功能 {.title}
:::
扩展的 Berkeley Packet
过滤器（eBPF）是一个内核中的虚拟机，允许在内核空间中执行代码。此代码运行在一个受限的沙箱环境中，仅可访问有限功能集。
在网络中，您可以使用 eBPF 来补充或替换内核数据包处理。根据您使用的
hook，eBPF 程序有：
::: itemizedlist
-   对元数据的读和写的访问权限
-   可以查找套接字和路由
-   可以设置套接字选项
-   可以重定向数据包
:::
::: section
::: titlepage
# []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#ref_overview-of-networking-ebpf-features-in-rhel_assembly_understanding-the-ebpf-features-in-rhel}RHEL 中网络 eBPF 功能概述 {.title}
:::
您可以将扩展的 Berkeley Paket Filter（eBPF）联网程序附加到 RHEL 中的以下
hook:
::: itemizedlist
-   Express Data
    Path(XDP)：在内核网络堆栈处理之前，提供对接收的数据包的早期访问权限。
-   `tc`{.literal} 带有 direct-action 标志的 eBPF
    分类器：在入口和出口上提供强大的数据包处理。
-   控制组版本 2(cgroup
    v2)：启用过滤和覆盖控制组中程序执行的基于套接字的操作。
-   套接字过滤：启用对从套接字接收的数据包进行过滤。这个功能也可用于经典
    Berkeley Packet Filter（cBPF），但已扩展为支持 eBPF 程序。
-   流解析器：启用将流分成单独的消息、过滤并将其重定向到套接字。
-   `SO_REUSEPORT`{.literal} 套接字选择：提供从 `reuseport`{.literal}
    套接字组接收套接字的可编程选择。
-   流程 Unsector：启用覆盖内核在某些情况下解析数据包标头的方式。
-   TCP 拥塞控制回调：启用自定义 TCP 拥塞控制算法。
-   带有封装的路由： 允许创建自定义隧道封装。
:::
请注意，红帽并不支持 RHEL 中的所有 eBPF
功能，如下所述。如需了解更多与每个 hook 相关的信息，请参阅 [RHEL 8
发行注记](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/){.link}和以下概述。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#xdp}XDP
您可以将 `BPF_PROG_TYPE_XDP`{.literal}
类型的程序附加到网络接口。然后，在内核网络堆栈开始处理之前，内核会在接收的数据包上执行该程序。这在某些情况下允许快速数据包转发，如快速数据包丢弃以防止分布式拒绝服务(DDoS)攻击，并为负载平衡场景快速数据包重定向。
您还可以使用 XDP 进行不同类型的数据包监控和抽样。内核允许 XDP
程序修改数据包，并将其传送到内核网络堆栈进行进一步处理。
以下的 XDP 模式可用：
::: itemizedlist
-   原生（驱动程序）XDP：内核在数据包接收期间从较早可能的点执行程序。目前，内核无法解析数据包，因此无法使用内核提供的元数据。这个模式要求网络接口驱动程序支持
    XDP，但并非所有驱动程序都支持这种原生模式。
-   通用 XDP：内核网络栈在进程早期执行 XDP
    程序。此时内核数据结构已被分配，数据包已被预先处理。如果数据包被丢弃或重定向，与原生模式相比，这需要大量开销。但是，通用模式不需要支持网络接口驱动，它可适用于所有网络接口。
-   Offloaded XDP：内核在网络接口而不是主机 CPU 上执行 XDP
    程序。请注意，这需要特定的硬件，这个模式中只有某些 eBPF 功能可用。
:::
在 RHEL 上，使用 `libxdp`{.literal} 库载入所有 XDP
程序。这个程序库启用系统控制的 XDP 使用。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
目前，XDP
程序有一些系统配置限制。例如：您必须禁用接收接口中某些硬件卸载功能。另外，并非所有功能都可用于支持原生模式的所有驱动程序。
:::
在 RHEL 8.4 中，红帽仅在满足以下条件时支持 XDP 功能：
::: itemizedlist
-   您可以在 AMD 或者 Intel 64 位构架中载入 XDP 程序。
-   您可以使用 `libxdp`{.literal} 库将程序加载到内核中。
-   XDP 程序不使用 XDP 硬件卸载。
:::
另外，红帽还提供以下使用 XDP 功能作为不受支持的技术预览：
::: itemizedlist
-   在 AMD 和 Intel 64 位以外的构架中载入 XDP
    程序。请注意，`libxdp`{.literal} 库不适用于 AMD 和 Intel 64
    位以外的构架。
-   XDP 硬件卸载。
:::
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#af_xdp}AF_XDP
使用过滤并将数据包重定向到给定 `AF_XDP`{.literal} 套接字的 XDP
程序，您可以使用 `AF_XDP`{.literal}
协议系列中的一个或者多个套接字快速从内核复制到用户空间。
在 RHEL 8.4 中，红帽将这个功能作为不受支持的技术预览提供。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#traffic_control}流量控制
流量控制（`tc`{.literal}）子系统提供以下 eBPF 程序类型：
::: itemizedlist
-   `BPF_PROG_TYPE_SCHED_CLS`{.literal}
-   `BPF_PROG_TYPE_SCHED_ACT`{.literal}
:::
这些类型允许您在 eBPF 中编写自定义 `tc`{.literal} 分类器和
`tc`{.literal} 操作。这与 `tc`{.literal}
生态系统的部分一起，提供了强大的数据包处理能力，也是一些容器联网编配解决方案的核心部分。
在大多数情况下，只有类符被使用，与 direct-action 标记一样，eBPF
分类器可以直接从同一 eBPF 程序执行操作。`clsact`{.literal} Queueing
Discipline（`qdisc`{.literal}）已设计在入口端启用此功能。
请注意，使用一个流 Unsector eBPF 程序可能会影响其他 `qdiscs`{.literal}
和 `tc`{.literal} 类器（如 `flower`{.literal}）的操作。
RHEL 8.2 及更新的版本完全支持 `tc`{.literal} 功能的 eBPF。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#socket_filter}套接字过滤器
一些实用程序会使用或在过去使用了 classic Berkeley Packet
Filter（cBPF）过滤套接字上接收到的数据包。例如，`tcpdump`{.literal}
实用程序允许用户指定表达式，`tcpdump`{.literal} 然后会把它转换为 cBPF
代码。
作为 cBPF 的替代方案，内核允许 `BPF_PROG_TYPE_SOCKET_FILTER`{.literal}
类型的 eBPF 程序达到同样目的。
在 RHEL 8.4 中，红帽将这个功能作为不受支持的技术预览提供。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#control_groups}控制组群
在 RHEL 中，您可以使用多种 eBPF 程序，供您附加到 cgroup。当给定 cgroup
中的某个程序执行某个操作时，内核会执行这些程序。请注意，您只能使用
cgroups 版本 2。
RHEL 中提供以下与网络相关的 cgroup eBPF 程序：