        ULONG_PTR __fnINDEVICECHANGE;
        ULONG_PTR __fnPOWERBROADCAST;
        ULONG_PTR __fnINLPUAHDRAWMENU;
        ULONG_PTR __fnOPTOUTLPDWORDOPTOUTLPDWORD;
        ULONG_PTR __fnOPTOUTLPDWORDOPTOUTLPDWORD_;
        ULONG_PTR __fnOUTDWORDINDWORD;
        ULONG_PTR __fnOUTLPRECT;
        ULONG_PTR __fnOUTSTRING;
        ULONG_PTR __fnPOPTINLPUINT3;
        ULONG_PTR __fnPOUTLPINT2;
        ULONG_PTR __fnSENTDDEMSG;
        ULONG_PTR __fnINOUTSTYLECHANGE;
        ULONG_PTR __fnHkINDWORD;
        ULONG_PTR __fnHkINLPCBTACTIVATESTRUCT;
        ULONG_PTR __fnHkINLPCBTCREATESTRUCT;
        ULONG_PTR __fnHkINLPDEBUGHOOKSTRUCT;
        ULONG_PTR __fnHkINLPMOUSEHOOKSTRUCTEX;
        ULONG_PTR __fnHkINLPKBDLLHOOKSTRUCT;
        ULONG_PTR __fnHkINLPMSLLHOOKSTRUCT;
        ULONG_PTR __fnHkINLPMSG;
        ULONG_PTR __fnHkINLPRECT;
        ULONG_PTR __fnHkOPTINLPEVENTMSG;
        ULONG_PTR __xxxClientCallDelegateThread;
        ULONG_PTR __ClientCallDummyCallback;
        ULONG_PTR __fnKEYBOARDCORRECTIONCALLOUT;
        ULONG_PTR __fnOUTLPCOMBOBOXINFO;
        ULONG_PTR __fnINLPCOMPAREITEMSTRUCT2;
        ULONG_PTR __xxxClientCallDevCallbackCapture;
        ULONG_PTR __xxxClientCallDitThread;
        ULONG_PTR __xxxClientEnableMMCSS;
        ULONG_PTR __xxxClientUpdateDpi;
        ULONG_PTR __xxxClientExpandStringW;
        ULONG_PTR __ClientCopyDDEIn1;
        ULONG_PTR __ClientCopyDDEIn2;
        ULONG_PTR __ClientCopyDDEOut1;
        ULONG_PTR __ClientCopyDDEOut2;
        ULONG_PTR __ClientCopyImage;
        ULONG_PTR __ClientEventCallback;
        ULONG_PTR __ClientFindMnemChar;
        ULONG_PTR __ClientFreeDDEHandle;
        ULONG_PTR __ClientFreeLibrary;
        ULONG_PTR __ClientGetCharsetInfo;
        ULONG_PTR __ClientGetDDEFlags;
        ULONG_PTR __ClientGetDDEHookData;
        ULONG_PTR __ClientGetListboxString;
        ULONG_PTR __ClientGetMessageMPH;
        ULONG_PTR __ClientLoadImage;
        ULONG_PTR __ClientLoadLibrary;
        ULONG_PTR __ClientLoadMenu;
        ULONG_PTR __ClientLoadLocalT1Fonts;
        ULONG_PTR __ClientPSMTextOut;
        ULONG_PTR __ClientLpkDrawTextEx;
        ULONG_PTR __ClientExtTextOutW;
        ULONG_PTR __ClientGetTextExtentPointW;
        ULONG_PTR __ClientCharToWchar;
        ULONG_PTR __ClientAddFontResourceW;
        ULONG_PTR __ClientThreadSetup;
        ULONG_PTR __ClientDeliverUserApc;
        ULONG_PTR __ClientNoMemoryPopup;
        ULONG_PTR __ClientMonitorEnumProc;
        ULONG_PTR __ClientCallWinEventProc;
        ULONG_PTR __ClientWaitMessageExMPH;
        ULONG_PTR __ClientWOWGetProcModule;
        ULONG_PTR __ClientWOWTask16SchedNotify;
        ULONG_PTR __ClientImmLoadLayout;
        ULONG_PTR __ClientImmProcessKey;
        ULONG_PTR __fnIMECONTROL;
        ULONG_PTR __fnINWPARAMDBCSCHAR;
        ULONG_PTR __fnGETTEXTLENGTHS2;
        ULONG_PTR __fnINLPKDRAWSWITCHWND;
        ULONG_PTR __ClientLoadStringW;
        ULONG_PTR __ClientLoadOLE;
        ULONG_PTR __ClientRegisterDragDrop;
        ULONG_PTR __ClientRevokeDragDrop;
        ULONG_PTR __fnINOUTMENUGETOBJECT;
        ULONG_PTR __ClientPrinterThunk;
        ULONG_PTR __fnOUTLPCOMBOBOXINFO2;
        ULONG_PTR __fnOUTLPSCROLLBARINFO;
        ULONG_PTR __fnINLPUAHDRAWMENU2;
        ULONG_PTR __fnINLPUAHDRAWMENUITEM;
        ULONG_PTR __fnINLPUAHDRAWMENU3;
        ULONG_PTR __fnINOUTLPUAHMEASUREMENUITEM;
        ULONG_PTR __fnINLPUAHDRAWMENU4;
        ULONG_PTR __fnOUTLPTITLEBARINFOEX;
        ULONG_PTR __fnTOUCH;
        ULONG_PTR __fnGESTURE;
        ULONG_PTR __fnPOPTINLPUINT4;
        ULONG_PTR __fnPOPTINLPUINT5;
        ULONG_PTR __xxxClientCallDefaultInputHandler;
        ULONG_PTR __fnEMPTY;
        ULONG_PTR __ClientRimDevCallback;
        ULONG_PTR __xxxClientCallMinTouchHitTestingCallback;
        ULONG_PTR __ClientCallLocalMouseHooks;
        ULONG_PTR __xxxClientBroadcastThemeChange;
        ULONG_PTR __xxxClientCallDevCallbackSimple;
        ULONG_PTR __xxxClientAllocWindowClassExtraBytes;
        ULONG_PTR __xxxClientFreeWindowClassExtraBytes;
        ULONG_PTR __fnGETWINDOWDATA;
        ULONG_PTR __fnINOUTSTYLECHANGE2;
        ULONG_PTR __fnHkINLPMOUSEHOOKSTRUCTEX2;
    } KERNELCALLBACKTABLE;
步骤：  
● 生成payload并且存放payload  
●
检索窗口的句柄，通过窗口的类名称和窗口名称和字符串匹配（此函数不检索子窗口），然后返回指定类名和窗口名称的窗口的句柄//FindWindow(L"Shell_TrayWnd",
NULL);  
●
检索创建指定窗口的线程的标识符，以及可选的创建窗口的进程的标识符。返回创建窗口的线程的标识符//GetWindowThreadProcessId(hWindow,
&pid)  
● 读取PEB和KernelCallBackTable的地址  
● 将新表写入远程进程  
● 更新PEB和触发payload  
● 恢复原来的KernelCallbackTable  
● 释放内存  
● 关闭句柄  
完成上述步骤 实现代码后你发现，并没有完成运行因为没有弹出计算器  
上述的poc目标进程是explorer.exe ，结果失败了  
那么我们可以换一个目标进程试试 比如 Notepad.exe?
换一个进程就可以了，所以测试的时候拿记事本进程真的是一个好选择  
为什么explorer.exe系统上还有其他进程在运行呢？  
因为PEB中找到的仅是在GUI进程使用的，当加载到进程的内存中KernelCallbackTable时候才会被初始化  
代码中出现的问题：explorer.exe在更新目标进程的PEB时候立刻崩溃了，崩溃后又重启explorer.exe这将导致获取的窗口句柄就无效了，最后导致SendMessage函数调用失败。所以我们注入explorer.exe的时候会发现直接闪了一下就恢复了。就是因为崩溃之后又重新启动，导致注入的代码失败被清理。  
为什么会出现问题呢？  
因为我们必须先枚举系统上可用的窗口类（这是可行的EnumWindows()功能。）  
这样就会导致目标进程都会崩溃（崩溃对用户可见）  
那怎么解决这个问题呢  
可以通过不定位explorer.exe和加载user32.dll到内存中解决，但是加载user32.dll到当前内存的话，payload就会在本地执行了。但是不能注入到另一个进程中（也就不能remote
process injection）  
那么既然进程崩溃是不可避免的，那可以产生一个用户不可见的进程，这样即使崩溃也没有影响
    CreateProcess(L"C:\\Windows\\System32\\notepad.exe", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi);
    将进程创建标志设置dwFlags为CREATE_SUSPENDED“隐藏”
可以看到这一行代码跟我们上述介绍APC 注入的时候使用的是一样的。所以实现进程注入的时候将进程挂起状态进行隐藏是一个非常好的选择  
但是
这个方法创建的进程是挂起的没有任何窗口，也就是没有窗口我们就不能获取到句柄了。这样就无法完成后续的注入和payload执行了。因为我们APC注入是不需要获取句柄（只需要获取进程pid，和枚举线程即可）就可以完成注入的  
那么我们需要想办法获取到句柄  
我们可以使用 STARTUPINFOA 结构体它可以帮助我们在创建时指定进程主窗口的窗口站、桌面、标准句柄等
    typedef struct _STARTUPINFOA {
      DWORD  cb;
      LPSTR  lpReserved;
      LPSTR  lpDesktop;
      LPSTR  lpTitle;
      DWORD  dwX;
      DWORD  dwY;
      DWORD  dwXSize;
      DWORD  dwYSize;
      DWORD  dwXCountChars;
      DWORD  dwYCountChars;
      DWORD  dwFillAttribute;
      DWORD  dwFlags;
      WORD   wShowWindow;
      WORD   cbReserved2;
      LPBYTE lpReserved2;
      HANDLE hStdInput;
      HANDLE hStdOutput;
      HANDLE hStdError;
    } STARTUPINFOA, *LPSTARTUPINFOA;
（STARTF_USESHOWWINDOW //The wShowWindow member contains additional
information.）  
（）  
设置 dwFlags，wShowWindow成员  
首先设置dwFlags 为 STARTF_USESHOWWINDOW 这样就可以获取wShowWindow信息
然后设置wShowWindow 为 SW_HIDE 它是取决于窗口的可见性  
然后再把把CREATE_SUSPENDED改为CREATE_NEW_CONSOLE
这样该过程对用户不可见，并且有一个窗口了。但是，跑代码还是没有获得任何句柄  
调试失败的原因是创建的进程还没有来得及初始化它的输入，也确实因为我们创建了一个不可见的窗口来展示，且新进程是具有新控制台的。于是用需要等待进程初始化完成之后，执行后续代码即可。  
WaitForInputIdle(Process, 1000)完美搞定了，该函数它会等到进程完成初始化就会继续执行。
当执行的时候，用户界面是看不见任何东西的完成注入。  
其实我们可以发现上述代码中用到的小细节以及克服的一些问题，都是通过CreteProcess中一些其他参数的用法而完成的。可以多看看Flags的参数都有哪些用处，说不定有些更好的实现方法。