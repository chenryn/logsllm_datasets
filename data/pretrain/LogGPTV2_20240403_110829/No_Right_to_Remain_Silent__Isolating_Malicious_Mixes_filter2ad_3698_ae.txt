for it. The reason is that the dropping mix cannot be sure that
the previous mix did delay the message. Instead, this can be
the result of an adversary that crafts a packet with the same
round number in two successive layers.
Claim 3. An adversary cannot craft a loop message that
causes a link loss between two honest mixes.
Argument. Any loop message has to be well-formed in or-
der for directory authorities to accept it. An adversary can
craft a message with invalid round numbers in the packet’s
routing information, which would cause the honest mix to
drop the packet. However, although the honest mix drops
the packet, it still sends back a receipt for that packet. Other-
wise, the preceding mix, which has no way of knowing that
the next layer is intentionally malformed, would disconnect
from the subsequent mix. While the adversary can obtain a
proof showing that a loop message was dropped, it cannot
prove that the loop message was well-formed.
Aggressive active attacks.
In order to de-anonymize the
network users, the adversary can choose a more aggressive
approach and drop a signiﬁcant number of packets. For ex-
ample, in the (n− 1) attack [45] applied to the full network,
the adversary tracks a target packet from Alice by blocking
other packets from arriving to an honest mix, and instead
injecting their own packets. Another example is the intersec-
tion attack [8], where the adversary tries disconnecting target
clients. If the adversary cannot directly disconnect a client
with a targeted attack, it can disconnect a client by drop-
ping an entire batch of packets where one of them belongs
to the client (the adversary simply does not know which).
However, it is important to note, that if an adversary can
engineer a scenario where a single target packet is injected
and mixed with only messages that the adversary controls,
any mix-based system is vulnerable. Nevertheless, we argue
that Miranda inﬂicts serious penalty on the adversary who
attempts to perform an aggressive dropping of packets.
Claim 4. Miranda deters aggressive active attacks.
Argument. Aggressive active attacks require the ability to
drop many packets. In Miranda, a malicious mix that drops
any packet from another mix without sending back a receipt,
loses a link (see Section 4 and Figure 2c). Alternatively,
if the malicious mix drops packets but does send receipts
for these dropped packets, clients can prove that the mali-
cious mix received their (loop) packets and did not forward
them, which results in the exclusion of the malicious mix
(see Figure 2b). A malicious entry mix may drop packets
from clients, since losing a link to a client is not a serious
‘penalty’; but in Miranda, clients then use a witness mix (see
Section 4.4) – forcing the mix to either relay their packets, or
- lose a link to a mix or risk discovery, as discussed above.
Miranda enforces a minimum number of ω packets for
mixing by the entry mix. This is designed to protect the
rare cases where a client sends via an entry mix which is
used only by few (or no) other clients, which could allow
an eavesdropper attack; we now explain why this cannot be
abused to facilitate an active attack (by the ﬁrst mix).
Recall,
that in this case, as in our entire analysis of
corrupt-mix attacks, we assume that at least 2ω honest
clients send packets to the (possibly corrupt) entry mix; and,
as mentioned above, the mix cannot simply ‘drop’ these
(since clients will use witness and then the corrupt mix will
lose - at least - a link).
Instead, the corrupt mix could send to these clients, or
most of them, the special ‘under-ω receipt’, claiming (incor-
rectly) that it didn’t receive ω messages during this round.
1852    28th USENIX Security Symposium
USENIX Association
Figure 6: The maximum probability of picking a fully
malicious cascade as a function of the cascade length and
the power of the adversary.
Figure 7: The probability of picking particular classes of
cascades after each link loss. The parameters of the
simulated mix network are l = 3, n = 100 and nm = 30.
However, senders report these (rare) under-ω receipts to the
directories, who would quickly detect that this mix is cor-
rupt.
7.2 Fully Malicious Cascades Attacks
If the packets are relayed via a fully malicious cascade, an
adversary can trivially track them. Consequently, adversaries
would like to divert as much trafﬁc as possible to the fully
malicious cascades. Attackers can try to maximize their
chances by: (1) increasing the probability that fully mali-
cious cascades are included in the set C produced by the di-
rectory authorities during the inter-epoch process, and/or (2)
increasing the probability that clients pick a fully malicious
cascade from C during an epoch.
Because cascades are chosen uniformly over all valid cas-
cades, the only way the adversary can inﬂuence the cascades
generation process is by excluding semi-honest cascades.
However, they can only exclude cascades by dropping links
they are a part of, therefore, the adversary cannot exclude any
honest links or honest mixes6, meaning they cannot exclude
any fully honest cascades. However, adversaries are able
to disconnect semi-honest cascades by disconnecting semi-
honest links and thereby increase the probability of picking
a fully malicious cascade. Interestingly, we found that such
an attack only slightly increases the chance of selecting a
fully malicious cascade – while signiﬁcantly increasing the
chance of selecting a fully honest cascade (see Claim 5). Fur-
ther, this strategy makes it easier to detect and eliminate sets
of connected adversarial domains (see section 6).
Claim 5. Let CAdv denote a set of fully malicious cascades.
The maximum probability to pick a fully malicious cascade
during cascades generation process, after the semi-honest
cascades were excluded by the adversary is
Pr(c ∈ CAdv) ≤
nm
nh − l + 1
(cid:32)
(cid:33)l
.
Argument. See [34].
Figure 6 and Figure 7 present the probability of picking
a fully malicious cascade depending on the number of mixes
colluding with the adversary and the percentage of lost links.
Once nc cascades are generated, the adversary could try
to bias the probability of clients choosing a fully malicious
cascade. To do so, the adversary can sabotage semi-honest
cascades [9] through dropping messages, and in an extreme
case, exclude them all. We illustrate in Figure 8 the attack
cost, expressed as the number of links the adversary must
affect in order to achieve a certain probability of success in
shifting clients to a fully malicious cascade. Note, that the
larger the number of cascades nc, the more expensive the
attack, and the lower the probability of success.
7.3 Security of Loop Messages
Since loop messages are generated and processed in the same
way as genuine messages, the binary pattern does not leak
any information. However, adversaries can still seek ways
to predict when loop messages are sent; for example, by ob-
serving the timing pattern and the rate of sent messages.
Detecting loop messages. Adversaries can try to guess
whether a particular message is a loop message or not. A
successful guess allows the adversary to drop non-loop mes-
sages without being detected, while still sending receipts for
them to the previous mix. We formulate the following claim:
Claim 6. Assume that an adversary that does not control the
last mix in the cascade, drops a packet. The probability of
this message being a loop message sent by a non-malicious
client is at least α.
6Even if all adversarial mixes disconnect from an honest mix, it is still
not enough for exclusion, since thresh > nm.
Argument.
It sufﬁces to consider packets sent by non-
malicious clients. When a non-last mix receives such pack-
USENIX Association
28th USENIX Security Symposium    1853
10152025303540Percent of malicious mixes (%)051015202530Maximum probability to pick  a fully-malicious cascade (%)  Tight boundcascade length3456  Loose boundcascade length3456020406080100Percent of link losses (%)020406080100Percent of cascades (%)Fully-honestSemi-honestFully-maliciousFigure 8: The costs (red, right axis) and success probability
(blue, left axis) of performing DoS [9] attacks based on the
fraction of cascades active in every epoch. Cost is measured
in links the adversary must sacriﬁce; as Figure 9 shows,
even the minimal ‘cost’ essentially implies detection of all
active corrupt mixes. Furthermore, using just 1% of the
possible cascades sufﬁces to reduce success probability to
about 10% or less.
ets, it does not know the destination. Furthermore, as de-
scribed in section 4.3, loop packets are sent by non-malicious
clients according to the rate deﬁned by α of genuine traf-
ﬁc and are bitwise indistinguishable from genuine packets.
Hence, even if the mix would know the identity of the sender,
e.g., by being the ﬁrst mix, the packet can still be a loop mes-
sage with probability at least α.
Note that a malicious non-last mix that drops a loop mes-
sage, yet sends a receipt for it and remains connected to the
next mix, would be proven malicious and excluded from the
network. On the other hand, if such mix does not send a
receipt, then it loses a link.
Malicious last mix. Claim 6 does not address the last mix.
There are two reasons for that: ﬁrst, in contrast to mixes,
clients do not send receipts back to mixes. Therefore, a last
mix cannot prove it actually delivered the packets. Secondly,
the last mix may, in fact, identify non-loop messages in some
situations. For example, if a client did not send packets in
round r, then all the packets it is about to receive in round
r + x (where x is the number of rounds it takes to complete
a loop) are genuine trafﬁc sent by other clients. Therefore,
these messages can be dropped without detection.
However, dropping of messages by the last mix can also
be done against the ideal mix (see Section 2.4), e.g., by a
man-in-the-middle attacker. In fact, similar correlation at-
tacks can be performed even without dropping packets, if
clients have speciﬁc sending patterns. Therefore, mitigating
this attack is beyond Miranda goals, and should be handled
by the applications adopting Miranda 7.
Figure 9: The effect of using community detection against
malicious mixes.
7.4 Evaluation of Community Detection
The discussion in Section 6 presented several community de-
tection techniques to leverage Miranda’s reported links in-
formation into a detection tool that removes malicious mixes
from the system. We now argue that the contribution of these
mechanisms is both important and secure.
7.4.1 Empirical Results
We implemented the Threshold Detection and Community
Detection algorithms described in Section 6, and evaluated
them as follows. We generated a complete graph of n = 100
mixes where nm = 33 of them are malicious. We modeled
a random adversary by randomly dropping a fraction of the
semi-honest links, making sure that any mix does not drop
more than or equal to thresh = nm + 1 links.
Figure 9 demonstrates the effectiveness of the algorithms.
The Threshold Detection algorithm starts to become effec-
tive when roughly 10% of the semi-honest links are reported
and improves as the number of reports increases. In com-
parison, the Community Detection algorithm presents signif-
icantly better results, starting when 4% of the semi-honest
links are dropped and after 8% the algorithm is able to ex-
pose all possible malicious mixes. Considering that the Com-
munity Detection algorithm can only operate on malicious
mixes that dropped more than one link, these results show
that the algorithm effectively mitigates the non-strategic ad-
versary.
In [34], we discuss and compare another possi-
ble community detection algorithm, which potentially yields
even better results.
7.4.2 Security Analysis
7For example, [24, 44] use ﬁxed sending rate (thus, foiling the attack).
A concerned client can simply make sure to send additional loop packets in
every round where no genuine trafﬁc is relayed.
In essence, both the Threshold Detection algorithm and the
Community Detection algorithm do the same thing:
they
both remove malicious mixes from the system. Therefore,
1854    28th USENIX Security Symposium
USENIX Association
0.010.050.10.20.30.40.51.02.03.05.010.0Fraction ξ of cascades in an epoch, as percent from total possible cascades20406080100Probability of choosing a fully-malicious cascadeafter the attack (%)probability0100200300400500Number of links to drop to achieve attackcost0123456789101112131415Percent of ranodmly dropped semi-honest links out of the total number of semi-honest links (%)020406080100Percent of malicious mixes detected (%)Threshold detectionCommunity detectionthe only way for a strategic adversary to abuse these al-
gorithms is to strategically drop links in a way that causes
these algorithms to wrongfully remove honest mixes from
the system, due to misclassiﬁcation of honest mixes as ma-
licious. We now argue that the T hresholdDetection and
CommunityDetection algorithms are secured against such at-
tack.
Claim 7. An honest mix Mi ∈ G never satisﬁes DegG(Mi) ≥
thresh.
Proof. Assume to the contrary that there exists an honest
mix Mi ∈ G that satisﬁes Deg(Mi) ≥ thresh. However, if
this is the case, then DegG(Mi) ≥ thresh, which implies
DegG(Mi) ≤ n− thresh ≤ nh − 1, which means that at least
one honest mix disconnected from Mi, contradicting the as-
sumption that honest links never fail.
Claim 8. The T hresholdDetection algorithm never removes
honest mixes.
Proof. According to the implementation of Threshold De-
tection, the algorithm only removes mix Mi ∈ G that satisﬁes
Deg(Mi) ≥ thresh. However, following Claim 7, this cannot
happen for honest mixes.
Claim 9. The CommunityDetection algorithm never re-
moves honest mixes.
Proof. According to the implementation of Community De-
tection, the algorithm only removes mix Mi ∈ G that satisﬁes
Deg(Mi) > nm − µi, which according to Claim 1 never hap-
pens for honest mixes.
8 Related Work
In this section, we place our system in the context of existing
approaches and compare Miranda with related works. First,
we focus on works that present a similar design to Miranda.
Next, we discuss how Miranda improves upon previous mix
network designs. Finally, we brieﬂy outline other techniques
used to support reliable mixing.
Receipts. The idea of using digitally signed receipts to im-
prove the reliability of the mix network was already used in
many designs. In Chaum’s original mix network design [12]
each participant obtains a signed receipt for packets they
submit to the entry mix. Each mix signs the output batch
as a whole, therefore the absence of a single packet can be
detected. The detection that a particular mix failed to cor-
rectly process a packet relies on the fact that the neighbour-
ing mixes can compare their signed inputs and outputs. Ad-
ditionally, [12] uses the untraceable return addresses to pro-
vide end-to-end receipts for the sender.
Receipts were also used in reputation-based proposals.
In [20], receipts are used to verify a mix failure and rank
their reputation in order to identify the reliable mixes and
use them for building cascades. The proposed design uses a
set of trusted global witnesses to prove the misbehavior of a
mix. If a mix fails to provide a receipt for any packet, the pre-
vious mix enlists the witnesses, which try to send the packet
and obtain a receipt. Witnesses are the key part of the de-
sign and have to be engaged in every veriﬁcation of a failure
claim, which leads to a trust and performance bottleneck. In
comparison, Miranda does not depend on the witnesses, and
a single one is just used to enhance the design. Moreover,
in [20] a failure is attributed to a single mix in a cascade,
which allows the adversary to easily obtain high reputation
and misuse it to de-anonymize clients. Miranda rather than
focusing on a single mix, looks at the link between the mixes.
In the extended reputation system proposed in [22] the
reputation score is quantiﬁed by decrementing the reputa-
tion of all nodes in the failed cascade and incrementing of
all nodes in the successful one. In order to detect misbehav-
iors of malicious nodes, the nodes send test messages and
verify later via a snapshot from the last mix, whether it was
successfully delivered. Since the test messages are indistin-
guishable, dishonest mixes risk being caught if they drop any
message. However, the penalty for dropping is very strong
– if a single mix drops any message, the whole cascade is
failed. Therefore, because a single mix’s behavior affects the
reputation of all mixes in the cascade, the malicious nodes
can intentionally fail a cascade to incriminate honest mixes.
This design also proposed the delivery receipts, which the re-
cipient returns to the last mix in the cascade in order to prove
that the message exited the network correctly. If the last mix
is not able to present the receipt, then the sender contacts a
random node from the cascade, which then asks the last mix
to pass the message and attempts to deliver the message.
Trap messages and detecting active attacks. The idea of
using trap messages to test the reliability of the network
was discussed in many works. The original DC-network
paper [11] suggested using trap messages, which include a
safety contestable bit, to detect message disruption. In con-
trast, the ﬂash mixing [28] technique, which was later proved
to be broken [38], introduces two dummy messages that are
included in the input, and are later de-anonymized after all
mixes have committed to their outputs. This allows the par-
ticipants to verify whether the mix operation was performed
correctly and detect tampering. However, both of those types
of trap messages are limited to these particular designs.