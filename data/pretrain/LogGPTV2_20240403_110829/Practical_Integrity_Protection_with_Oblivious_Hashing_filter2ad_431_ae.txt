1342
5419
6855
6882
5615
7184
1358.2
129
2376.6
%
B
H
O
5.9
5.3
5.3
41.2
41.2
1.6
1.6
67.7
12
61
3.6
1.4
1.1
0.8
10.9
10.9
5.4
0.7
0.8
1.4
0.5
0.1
0
0.1
0.5
0
0
0.3
0
9.7
1.4
18.1
B
L
5
5
4
7
7
5
5
12
19
20
8
9
24
12
6
6
19
18
16
32
159
104
501
128
135
170
187
138
280
70.4
18
108.8
%
B
H
O
R
S
11.8
26.3
31.6
35.3
35.3
44.4
38.1
0
53.7
0
67.9
15.9
52.9
72.6
2
2
73.6
46.3
48.8
68
67.1
77.2
74.4
74.5
12.9
30.1
29.8
11.8
31.7
39.2
35.3
25.1
%
B
H
O
R
S
+
%
B
H
O
17.7
31.6
36.9
76.5
76.5
46
39.7
67.7
65.7
61
71.5
17.3
54
73.4
12.9
12.9
79
47
49.6
69.4
67.6
77.3
74.4
74.6
13.4
30.1
29.8
12.1
31.7
48.9
49.6
23.5
Program
qsort_small
qsort_large
crc
dijkstra_small
dijkstra_large
rawcaudio
rawdaudio
basicmath_small
tetris
basicmath_large
sha
bitcnts
fft
2048_game
search_large
search_small
snake
patricia
bf
rijndael
say
susan
ispell
toast
djpeg
tiffdither
tiff2bw
cjpeg
tiffmedian
Mean µ
Median
Std.Dev. σ
Table 1: Block and instruction coverage reports of OH and SROH protections. The III column describes the percentage of
instructions effectively protected by OH; the DII column describes the percentage of instructions in principle protectable by
SROH. Median increase in instruction coverage from OH to OH+SROH is by factor 6.1%/0.3%≈20; increase in median block
coverage is by factor 49.6%/1.4%≈35.
Figure 2: Performance measurements using OH+SROH+SC for four (10%, 25%, 50%, and 100%) coverage levels. OH/SROH run-
time overhead is depicted by black-margined bars, additional SC runtime overhead is shown with stacked bars with gray
margins. Bars with no black margins indicate protected programs with negligible OH/SROH overheads.
2048bm-lbm-sbfbitcntscjpegcrcdkstra-ldkstra-sdjpegfftpatriciaqsrt-lqsrt-scaudiodaudiorijndaelsaysrch-lsrch-sshasnakesusantetristoast22212427210Overhead in percentage10%25%50%100%48ACSAC’18, December 2018, San Juan, Puerto Rico, USA
M. Ahmadvand et al.
Figure 3: An attack-tree-based security analysis of the proposed protection scheme.
with the protection, e.g., the execution flow can depend on the
computed hash values, similar to the technique presented in [11].
5.5.2 Disable SC guards. Adversaries may opt to defeat SC
guards if the sensitive code of interest resides in an SC-protected
segment. Three sub-attacks can materialize here - 2.a. Disabling
intertwined OH guards, 2.b. Defeating SC and 2.c. Patching SC guards.
2.a. Disabling intertwined OH guards. As all the SC guards are
additionally protected by OH/SROH protection. Disabling the inter-
twined protection boils down to attacking OH/SROH guards (see
Section 5.5.1).
2.b. Defeating SC. There are two known attacks on self-check-
summing based techniques: b.i. memory split [47] and b.ii. taint
analysis [40]. The former requires a modification of the OS kernel,
which potentially prohibits the massive deployment of tampered
programs. However, the latter can potentially defeat our entire
protection if SC hashes taint our OH/SROH hashes. The reason is
that the taint-based attack can in theory identify all the branching
conditions that are tainted by the parts of the process memory
that contains the program’s code. This not only includes SC guards
but also OH/SROH guards. To mitigate this attack, we can ensure
that SC’s computed hashes (over process memory) are never incor-
porated into OH/SROH hashes, and instead OH/SROH covers the
routine that computes such hashes. Also, we must place OH/SROH
guards spatially distant from SC guards, otherwise a scan near de-
tected SC guards may reveal the overlapping OH/SROH guard(s).
This adds resilience against tampering attacks targeting SC guard
arguments, hash and response routines. However, even with these
measures, the taint-based attack can still detect SC’s branching
condition. Given that the taint tracking process of the attack is
computationally very expensive [5], carefully crafting programs to
increase the cost of such taint analyses could potentially render the
attack impractical. For instance, one could introduce a large number
of (side-effect-free) read/write operations from/to SC variables.
2.c. Patch SC guards. In order to disable SC guards attackers could
use c.i. pattern matching (already addressed in 1.a.i), c.ii. patch and
preserve hashes, c.iii. modify hash functions to always return the
expected values and c.iv. just in-time patch & repair attacks.
c.ii. Patch and preserve hashes. Since the hash function that is
used by SC is not collision-free, it is possible that attackers manage
to patch some instructions in a way that hashes remain unchanged.
To mitigate this threat, we can utilize a multitude of overlapping
hash functions similar to those proposed in [5]. Another option
on the x86 architecture is to interleave program blocks such that
tampering with protected blocks affects other blocks [28].
c.iii. Modify hash functions to always return the expected values.
Attackers can make hash functions to always return the correct
value, if they manage to relate a guard’s branching condition (con-
taining an expected hash) to the underlying hash function that
computes hashes. To tackle this attack, we shall utilize diversifica-
tion obfuscation on instructions that evaluate hash results [8, 15].
c.iv. Just-in-time patch and repair. Another possibility for attack-
ers is to patch a protected segment and fix it before it is checked.
Increasing the connectivity level raises the bar against this attack.
5.5.3 Disable response. Finally, attackers can target the response
mechanism itself, for instance, by using pattern matching or taint
analysis. For example, an immediate termination after tamper detec-
tion could be traced back to the protection guards. For this purpose,
covert responses like those discussed in [11, 16, 18] could be utilized.
It is worthwhile to note that the resilience of our protection
guards (both SC and OH/SROH) as well as their response routines
heavily relies on obfuscation. Therefore, we believe further empir-
ical studies need to be conducted to measure the effectiveness of
the applied obfuscation techniques on our protection scheme.
6 DISCUSSION
6.1 Coverage
The potential coverage of OH is limited by the number of instruc-
tions that deterministically process—constant—data for all program
inputs (III). Our programs contain a median of only 0.5% IIIs (µ=6.6%,
σ =13.1%), which severely limits the application of OH. In fact,
we observed a median instruction coverage of only 0.3% (µ=4.5%,
σ=9.2%) for OH. Given that instructions with no data dependency
on nondeterministic data constitute a median of 14.3% (µ=21%,
σ =13.6%) (see DII% column in Table 1) in our dataset, SROH has
the potential to improve coverage of protected instructions. This is,
however, limited by factors such as hashable instructions, incom-
plete analysis results and argument reachable variables. Our SROH
added a median instruction coverage of 3.1% (µ=4.4%, σ=3.8%). This
is an increase w.r.t. pure OH protection by a median factor of 20. It is
worth noting that our prototypical input dependency analyzer relies
on conservative pointer as well as reachability analyses provided
by the dg tool. More advanced pointer analysis techniques (such
as those presented in [44]) can potentially enhance the coverage.
Tamper with sensitive code5.5.1. Disable OH/SROH protecting sensitive code5.5.2. Disable SC guards protecting sensitive code5.5.3. Disable response1.a. Find hash calls & patch them with the expected values1.b. Remove assert calls2.a. Disable intertwined OH guards2.b. Defeat SCb.i. Split attackb.ii. Taint analysis attack2.c. Patch SC guardsc.ii. Patch & preserve hashesc.iv. Just-in-time patch and repairc.iii. Modify hash functions to always return the correct valuesc.i. Pattern matching a.i. Pattern matchinga.ii. Taint hash variablesa.iii. Use debugger to obtain correct hashesb.ii. Taint hash variablesb.iii. Remove branches depending on hashesb.i. Pattern matchingDiversification obfuscationOpaque predicatesAnti-debuggingBlend protection with the logicIncrease the cost of taint analyses Requiring kernel patching prohibits a mass deploymentUtilize multiple hash functionsDiversification obfuscationIncrease connectivity levelDefense nodeAttack nodeDisjunctive refinementCorresponding defense49Practical Integrity Protection with Oblivious Hashing
ACSAC’18, December 2018, San Juan, Puerto Rico, USA
Despite the immediate benefits, we see the extension of the analysis
tool beyond the scope of this work, given that all the presented
protection techniques remain unchanged.
Regarding block coverage, SROH yields even more encouraging
results. Our experiments show that SROH yields a median addi-
tional block coverage of 35.3%. When contrasted with the median
block coverage of 1.4% for OH alone, this corresponds to an increase
of the number of protected block by a factor of 35.
Of course, the external validity of our results is limited by the
programs in our dataset.
6.2 Implicit protection with OH/SROH
Apart from the protection coverage that SROH offers, it has an-
other major benefit on the security of the system. SROH enables
us to cover all the SC guards regardless of the branches in which
they reside. This coverage makes it harder to tamper with such
guards and thus turns our scheme into a more resilient measure
(see Section 5.5.2). Whether taint-based attacks can help identify,
and subsequently disable, OH/SROH guards for SC guards, depends
on the efficiency of this attack in practice (see Section 5.5.2 and
[5]). Our experiments confirm that all the SC-protected segments
benefit from the implicit protection of SROH/OH.
6.3 Performance
For the bf, bm (both large and small), cjpeg, patricia, qsrt (both large
and small) programs, a significant portion of the overhead stems
from SC protection, as shown in Figure 2. This can be mitigated if
resilience of the protection is less important than performance, by
simply not applying SC to those parts of the code that are deemed
less critical. In case of programs like dijkstra (large and small), djpeg,
rijndael, say, search (large and small) and sha, we observe a higher
overhead being imposed by OH/SROH. We believe that SROH hash
verifications (asserts) in the loop body of such programs are the
main reason behind the slowdowns. Employing the composed pro-
tection (SC+OH/SROH) on CPU-intensive programs (particularly
with a high number of instructions located in loops) inevitably
imposes high overheads. Therefore, to better analyze overheads, we
shall make a distinction between computationally expensive and
computationally cheap programs. It is fair to mention that most of
(if not all) MiBench programs are rather computationally expensive
and hence our results tend to capture a worst case scenario.
We consider bf, dijkstra (both), patricia, rawaudio (both), basic-
math (both), search (both), bitcnts, fft, rijndael, say, sha, and toast
as computationally expensive programs, and consider the rest as
computationally less expensive. For the computationally less ex-
pensive programs, our experiments indicate acceptable overheads
(median of 17.6% (µ=25%, σ=23%) and 29.7% (µ=35%, σ=21%)) for a
partial protection of 10% and 25%, respectively. The 50% protection
induces higher slowdowns of 37.1% (µ=39%, σ=22%). A full protec-
tion imposes an overhead of 52% (µ=62%, σ=49%). Note that the