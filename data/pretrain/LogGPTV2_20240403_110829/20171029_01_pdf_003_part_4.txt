### Replication Considerations

- **ALTER TABLE and TRUNCATE Statements**: These statements do not propagate to the SUBSCRIPTION side. DDL statements can be executed on either side.
- **Character Encoding**: Replication can occur between databases with different character encodings, which are automatically converted.
- **Auditing**: Data updates processed by the SUBSCRIPTION are not recorded, even if the `log_statement` parameter is set to 'all'.
- **Partition Table Replication**: The partition parent table cannot be added to a PUBLICATION. To replicate a partitioned table, add the child tables to the PUBLICATION.

  **Example 43: Partition Tables and Replication**
  ```sql
  postgres=> ALTER PUBLICATION pub1 ADD TABLE range1;
  ERROR: "range1" is a partitioned table
  DETAIL: Adding partitioned tables to publications is not supported.
  HINT: You can add the table partitions individually.
  ```

- **In-Instance Replication**: When creating a SUBSCRIPTION, specifying the same instance as the PUBLICATION object in the CONNECTION clause will cause the CREATE SUBSCRIPTION statement to hang. By creating a Replication Slot in advance and using the `WITH (create_slot = false)` clause, an in-instance replication environment can be created.

- **Mutual Replication**: It is not possible to create a mutually updated table structure (multimaster replication) using PUBLICATION and SUBSCRIPTION. Although the CREATE PUBLICATION and CREATE SUBSCRIPTION statements may succeed, applying WAL to the slave side will result in a WAL application error when it returns to the master side.

- **Trigger Execution**: Triggers on the SUBSCRIPTION side table are not executed during update processing by Logical Replication.

### Enhancements in Parallel Query (PostgreSQL 10)

#### 3.4.1 PREPARE / EXECUTE Statement
Parallel queries can now be executed in search processing using PREPARE and EXECUTE statements, which was not possible in PostgreSQL 9.6.

  **Example 44: Parallel Query with PREPARE and EXECUTE Statements**
  ```sql
  postgres=> EXPLAIN SELECT COUNT(*) FROM large1;
  QUERY PLAN
  ----------------------------------------------------------------------------
  Finalize Aggregate (cost=11614.55..11614.56 rows=1 width=8)
  -> Gather (cost=11614.33..11614.54 rows=2 width=8)
  Workers Planned: 2
  -> Partial Aggregate (cost=10614.33..10614.34 rows=1 width=8)
  -> Parallel Seq Scan on large1 (cost=0.00..9572.67 rows=416667 width=0)
  (5 rows)

  postgres=> PREPARE p1 AS SELECT COUNT(*) FROM large1;
  PREPARE
  postgres=> EXPLAIN EXECUTE p1;
  QUERY PLAN
  ----------------------------------------------------------------------------
  Finalize Aggregate (cost=11614.55..11614.56 rows=1 width=8)
  -> Gather (cost=11614.33..11614.54 rows=2 width=8)
  Workers Planned: 2
  -> Partial Aggregate (cost=10614.33..10614.34 rows=1 width=8)
  -> Parallel Seq Scan on large1 (cost=0.00..9572.67 rows=416667 width=0)
  (5 rows)
  ```

#### 3.4.2 Parallel Index Scan
Parallel queries are now also used for Index Scan and Index Only Scan.

  **Example 45: Parallel Index Scan**
  ```sql
  postgres=> EXPLAIN SELECT * FROM large1 WHERE c1 BETWEEN 10000 AND 20000000;
  QUERY PLAN
  ----------------------------------------------------------------------------
  Gather (cost=0.43..369912.83 rows=7917410 width=12)
  Workers Planned: 2
  -> Parallel Index Scan using idx1_large1 on large1
  (cost=0.43..369912.83 rows=3298921 width=12)
  Index Cond: ((c1 >= '10000'::numeric) AND (c1 < '20000000'::numeric))
  (5 rows)
  ```

#### 3.4.3 Parallel Index Only Scan
Parallel queries are now also used for Index Only Scan.

  **Example 46: Parallel Index Only Scan**
  ```sql
  postgres=> EXPLAIN SELECT COUNT(c1) FROM large1 WHERE c1 BETWEEN 1000 AND 10000000;
  QUERY PLAN
  ----------------------------------------------------------------------------
  Finalize Aggregate (cost=316802.38..316802.39 rows=1 width=8)
  -> Gather (cost=316802.17..316802.38 rows=2 width=8)
  Workers Planned: 2
  -> Partial Aggregate (cost=315802.17..315802.18 rows=1 width=8)
  -> Parallel Index Only Scan using idx1_large1 on large1
  (cost=0.43..305386.50 rows=4166267 width=6)
  Index Cond: ((c1 >= '1000'::numeric) AND (c1 < '10000000'::numeric))
  (7 rows)
  ```

#### 3.4.4 Parallel Merge Join / Gather Merge
Parallel queries are now available even when Merge Join is chosen. Gather Merge, which gathers results while performing Merge by parallel processing, is now available.

  **Example 48: Parallel Merge Join**
  ```sql
  postgres=> EXPLAIN SELECT COUNT(*) FROM large1 INNER JOIN large2 ON large1.c1 = large2.c1;
  QUERY PLAN
  ----------------------------------------------------------------------------
  Finalize Aggregate (cost=447792.07..447792.08 rows=1 width=8)
  -> Gather (cost=447791.86..447792.07 rows=2 width=8)
  Workers Planned: 2
  -> Partial Aggregate (cost=446791.86..446791.87 rows=1 width=8)
  -> Merge Join (cost=407305.94..442727.96 rows=1625561 width=0)
  Merge Cond: (large2.c1 = large1.c1)
  -> Sort (cost=112492.52..114575.86 rows=833333 width=6)
  Sort Key: large2.c1
  -> Parallel Seq Scan on large2 (cost=0.00..19144.33 rows=833333 width=6)
  -> Materialize (cost=294813.42..304813.25 rows=1999965 width=6)
  (8 rows)
  ```

#### 3.4.5 Parallel Bitmap Heap Scan
Bitmap Heap Scan now supports parallel queries.

  **Example 49: Parallel Bitmap Heap Scan**
  ```sql
  postgres=> EXPLAIN SELECT COUNT(c1) FROM large1 WHERE c1 BETWEEN 100000 AND 200000;
  QUERY PLAN
  ----------------------------------------------------------------------------
  Finalize Aggregate (cost=18500.74..18500.75 rows=1 width=8)
  -> Gather (cost=18500.52..18500.73 rows=2 width=8)
  Workers Planned: 2
  -> Partial Aggregate (cost=17500.52..17500.53 rows=1 width=8)
  -> Parallel Bitmap Heap Scan on large1
  Recheck Cond: ((c1 >= '100000'::numeric) AND (c1 < '200000'::numeric))
  -> Bitmap Index Scan on idx1_large1
  Index Cond: ((c1 >= '100000'::numeric) AND (c1 < '200000'::numeric))
  (8 rows)
  ```

### System Catalogs

#### 3.5.1 Added Catalogs
With the additional features, the following system catalogs have been added:

| Catalog Name | Description |
|--------------|-------------|
| `pg_hba_file_rules` | References the `pg_hba.conf` file. |
| `pg_partitioned_table` | Stores information on the parent table of a partitioning table. |
| `pg_publication` | Stores information on PUBLICATION objects for Logical Replication. |
| `pg_publication_rel` | Lists target tables for Logical Replication. |
| `pg_publication_tables` | Lists target tables for Logical Replication. |
| `pg_sequence` | Lists SEQUENCE objects. |
| `pg_sequences` | Lists SEQUENCE objects. |
| `pg_stat_subscription` | Stores status information for Logical Replication. |
| `pg_statistic_ext` | Extended statistics view. |
| `pg_subscription` | Stores information on SUBSCRIPTION objects for Logical Replication. |
| `pg_subscription_rel` | Lists target tables for Logical Replication. |

**pg_hba_file_rules Catalog**
- **Description**: The `pg_hba_file_rules` catalog can refer to the contents of the `pg_hba.conf` file. Changes to the file are immediately reflected in the view, but comment-only lines are not included.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `line_number` | integer | Line number in the file. |
| `type` | text | Connection type (e.g., local, host). |
| `database` | text[] | Target database or all, replication. |
| `user_name` | text[] | Username or all. |
| `address` | text | TCP/IP address. |
| `netmask` | text | Net mask. |
| `auth_method` | text | Authentication method. |
| `options` | text[] | Options. |
| `error` | text | Error messages. |

**pg_partitioned_table Catalog**
- **Description**: The `pg_partitioned_table` catalog stores information on the parent table of a partitioning table.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `partrelid` | oid | OID for the table. |
| `partstrat` | char | Partitioning method (list = 'l', range = 'r'). |
| `partnatts` | smallint | Number of attached partitions. |
| `partattrs` | int2vector | Array of partition column values. |
| `partclass` | oidvector | Data type of the partition key. |
| `partcollation` | oidvector | Collation information of partition-key columns. |
| `partexprs` | pg_node_tree | Information on partitioning columns. |

**pg_publication Catalog**
- **Description**: The `pg_publication` catalog stores information on PUBLICATION objects used in Logical Replication.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `pubname` | name | Name of the PUBLICATION. |
| `pubowner` | oid | Owner of the PUBLICATION object. |
| `puballtables` | boolean | If true, this publication automatically includes all tables in the database. |
| `pubinsert` | boolean | If true, INSERT operations are replicated for tables. |
| `pubupdate` | boolean | If true, UPDATE operations are replicated for tables. |
| `pubdelete` | boolean | If true, DELETE operations are replicated for tables. |

**pg_publication_rel Catalog**
- **Description**: The `pg_publication_rel` catalog stores information on the replication target table contained in the PUBLICATION object.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `prpubid` | oid | OID of the PUBLICATION object. |
| `prrelid` | oid | OID of the target table. |

**pg_publication_tables Catalog**
- **Description**: The `pg_publication_tables` catalog stores information on the replication target table contained in the PUBLICATION object.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `pubname` | name | Name of the PUBLICATION object. |
| `schemaname` | name | Name of the schema. |
| `tablename` | name | Name of the target table. |

**pg_sequence Catalog**
- **Description**: The `pg_sequence` catalog provides a list of SEQUENCE objects and can be searched by general users.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `seqrelid` | oid | OID of the object. |
| `seqtypid` | oid | Data type of the SEQUENCE. |
| `seqstart` | bigint | Start value. |
| `seqincrement` | bigint | Incremental value. |
| `seqmax` | bigint | Maximum sequence value. |
| `seqmin` | bigint | Minimum sequence value. |
| `seqcache` | bigint | Number of caches. |
| `seqcycle` | boolean | Indicates whether the sequence is cyclic. |

**pg_sequences Catalog**
- **Description**: The `pg_sequences` catalog provides a list of SEQUENCE objects. This catalog can be searched by general users, but the `last_value` column is NULL if the `nextval` function has not been executed yet or if the search user does not have USAGE or SELECT privilege on that SEQUENCE.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `schemaname` | name | Name of the schema. |
| `sequencename` | name | Name of the SEQUENCE object. |
| `sequenceowner` | name | Name of the owner. |
| `data_type` | regtype | Data type of the SEQUENCE. |
| `start_value` | bigint | Start value. |
| `min_value` | bigint | Minimum value. |
| `max_value` | bigint | Maximum value. |
| `increment_by` | bigint | Incremental value. |
| `cycle` | boolean | Indicates whether the sequence is cyclic. |
| `cache_size` | bigint | Number of caches. |
| `last_value` | bigint | Last sequence value or NULL. |

**Example 50: Reference `pg_sequences` Catalog**
```sql
postgres=> \x
Expanded display is on.
postgres=> SELECT * FROM pg_sequences;
-[ RECORD 1 ]-+--------------------
schemaname | public
sequencename | seq1
sequenceowner | postgres
data_type | bigint
start_value | 1
min_value | 1
max_value | 9223372036854775807
increment_by | 1
cycle | f
cache_size | 1
last_value | 
```

**Example 51: Search for a Sequence (PostgreSQL 9.6)**
```sql
postgres=> CREATE SEQUENCE seq1;
CREATE SEQUENCE
postgres=> SELECT * FROM seq1;
-[ RECORD 1 ]-+--------------------
sequence_name | seq1
last_value | 1
start_value | 1
increment_by | 1
max_value | 9223372036854775807
min_value | 1
cache_value | 1
log_cnt | 0
is_cycled | f
is_called | f
```

**Example 52: Search for a Sequence (PostgreSQL 10)**
```sql
postgres=> CREATE SEQUENCE seq1;
CREATE SEQUENCE
postgres=> SELECT * FROM seq1;
-[ RECORD 1 ]-----
last_value | 1
log_cnt | 0
is_called | f
```

**pg_stat_subscription Catalog**
- **Description**: The `pg_stat_subscription` catalog stores WAL information received by the SUBSCRIPTION object. This catalog can only be referenced while the replication process is running.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `subid` | oid | OID of the SUBSCRIPTION. |
| `subname` | name | Name of the SUBSCRIPTION. |
| `pid` | integer | Process ID of the logical replication worker. |
| `relid` | oid | OID of the table. |
| `received_lsn` | pg_lsn | Received LSN. |
| `last_msg_send_time` | timestamp with time zone | Message send time. |
| `last_msg_receipt_time` | timestamp with time zone | Message receive time. |
| `latest_end_lsn` | pg_lsn | Latest end LSN. |
| `latest_end_time` | timestamp with time zone | Latest end timestamp. |

**pg_statistic_ext Catalog**
- **Description**: The `pg_statistic_ext` catalog stores information on extended statistics created with the `CREATE STATISTICS` statement.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `stxrelid` | oid | OID of the statistics acquisition table. |
| `stxname` | name | Name of the extended statistics. |
| `stxnamespace` | oid | OID of the namespace. |
| `stxowner` | oid | Owner of the extended statistics. |
| `stxkeys` | int2vector | Array of column numbers from which extended statistics were obtained. |
| `stxkind` | "char"[] | Types of the statistics activated. |
| `stxndistinct` | pg_ndistinct | Serialized N-distinct value. |
| `stxdependencies` | pg_dependencies | Column dependencies. |

**pg_subscription Catalog**
- **Description**: The `pg_subscription` catalog stores information on the SUBSCRIPTION object used by Logical Replication. This catalog can only be viewed by users with SUPERUSER privilege.

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `subid` | oid | OID of the SUBSCRIPTION. |
| `subdbid` | oid | OID of the database. |
| `subname` | name | Name of the SUBSCRIPTION. |
| `subowner` | oid | Owner of the SUBSCRIPTION. |
| `subenabled` | boolean | Indicates whether the SUBSCRIPTION is enabled. |
| `subconninfo` | text | Connection information. |
| `subslotname` | name | Name of the replication slot. |
| `subsynccommit` | char | Synchronization commit mode. |
| `subpublications` | text[] | List of PUBLICATIONs. |

© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd.