The ALTER TABLE and TRUNCATE statements do not propagate to the SUBSCRIPTION side. The
DDL statement can be executed the table of either side.
□ Character encoding
Replication can be executed between databases with different character encoding. Character
encoding are converted automatically.
□ Auditing
Data update processed by SUBSCRIPTION is not recorded even if parameter log_statement
parameter is set to 'all'.
□ Combination with partition table
Partition parent table cannot be added to PUBLICATION. To replicate partitioned table, it is
necessary to add child tables to the PUBLICATION.
Example 43 Partition tables and replication
postgres=> ALTER PUBLICATION pub1 ADD TABLE range1 ;
ERROR: "range1" is a partitioned table
DETAIL: Adding partitioned tables to publications is not supported.
HINT: You can add the table partitions individually.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 38
□ In-Instance Replication
When executing the CREATE SUBSCRIPTION statement, the CREATE SUBSCRIPTION
statement hangs by specifying the same instance as the PUBLICATION object in the CONNECTION
clause. By creating a Replication Slot in advance and specifying the WITH ( create_slot = false )
clause in the CREATE SUBSCRIPTION statement, it is possible to create an in-instance replication
environment.
□ Mutual replication
It is not possible to create mutually updated table structure(multimaster replication) using
PUBLICATION and SUBSCRIPTION. Although the CREATE PUBLICATION / CREATE
SUBSCRIPTION statements succeed, when executed the replication, the WAL applied to the slave
side will return to the master side, so that WAL application error will occur.
□ Trigger execution
Triggers on the SUBSCRIPTION side table are not executed by update processing of Logical
Replication.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 39
3.4 Enhancement of Parallel Query
In PostgreSQL 10, the processing that can use parallel queries has been expanded.
3.4.1 PREPARE / EXECUTE statement
Parallel queries can now be executed even in search processing using PREPARE and EXECUTE
statements. Parallel processing was not executed in that process in PostgreSQL 9.6.
Example 44 Parallel query with PREPARE and EXECUTE statements
postgres=> EXPLAIN SELECT COUNT(*) FROM large1 ;
QUERY PLAN
------------------------------------------------------------------------------
Finalize Aggregate (cost=11614.55..11614.56 rows=1 width=8)
-> Gather (cost=11614.33..11614.54 rows=2 width=8)
Workers Planned: 2
-> Partial Aggregate (cost=10614.33..10614.34 rows=1 width=8)
-> Parallel Seq Scan on large1 (cost=0.00..9572.67 rows=416667
width=0)
(5 rows)
postgres=> PREPARE p1 AS SELECT COUNT(*) FROM large1 ;
PREPARE
postgres=> EXPLAIN EXECUTE p1 ;
QUERY PLAN
------------------------------------------------------------------------------
Finalize Aggregate (cost=11614.55..11614.56 rows=1 width=8)
-> Gather (cost=11614.33..11614.54 rows=2 width=8)
Workers Planned: 2
-> Partial Aggregate (cost=10614.33..10614.34 rows=1 width=8)
-> Parallel Seq Scan on large1 (cost=0.00..9572.67 rows=416667
width=0)
(5 rows)
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 40
3.4.2 Parallel Index Scan
Parallel queries are now also used for Index Scan and Index Only Scan.
Example 45 Parallel Index Scan
postgres=> EXPLAIN SELECT * FROM large1 WHERE c1 BETWEEN 10000 AND 20000000 ;
QUERY PLAN
-------------------------------------------------------------------------------
Gather (cost=0.43..369912.83 rows=7917410 width=12)
Workers Planned: 2
-> Parallel Index Scan using idx1_large1 on large1
(cost=0.43..369912.83 rows=3298921 width=12)
Index Cond: ((c1 >= '10000'::numeric) AND (c1  EXPLAIN SELECT COUNT(c1) FROM large1 WHERE c1 BETWEEN 1000 AND
10000000 ;
QUERY PLAN
-------------------------------------------------------------------------------
Finalize Aggregate (cost=316802.38..316802.39 rows=1 width=8)
-> Gather (cost=316802.17..316802.38 rows=2 width=8)
Workers Planned: 2
-> Partial Aggregate (cost=315802.17..315802.18 rows=1 width=8)
-> Parallel Index Only Scan using idx1_large1 on
large1 (cost=0.43..305386.50 rows=4166267 width=6)
Index Cond: ((c1 >= '1000'::numeric) AND (c1  EXPLAIN SELECT * FROM large1 l1 WHERE l1.c1 NOT IN (SELECT l2.c1
FROM large2 l2 WHERE l2.c1 in (1000,2000,3000)) ;
QUERY PLAN
-------------------------------------------------------------------------------
Seq Scan on large1 l1 (cost=23269.95..59080.95 rows=1000000 width=11)
Filter: (NOT (hashed SubPlan 1))
SubPlan 1
-> Gather (cost=1000.00..23269.93 rows=6 width=6)
Workers Planned: 2
-> Parallel Seq Scan on large2 l2 (cost=0.00..22269.33 rows=2
width=6)
Filter: (c1 = ANY ('{1000,2000,3000}'::numeric[]))
(7 rows)
3.4.4 Parallel Merge Join / Gather Merge
Parallel queries are now available even when Merge Join is chosen. Gather Merge which gathers
results while Merge by parallel processing is now available.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 42
Example 48 Parallel Merge Join
postgres=> EXPLAIN SELECT COUNT(*) FROM large1 INNER JOIN large2 ON large1.c1 =
large2.c1 ;
QUERY PLAN
-------------------------------------------------------------------------------
Finalize Aggregate (cost=447792.07..447792.08 rows=1 width=8)
-> Gather (cost=447791.86..447792.07 rows=2 width=8)
Workers Planned: 2
-> Partial Aggregate (cost=446791.86..446791.87 rows=1 width=8)
-> Merge Join (cost=407305.94..442727.96 rows=1625561 width=0)
Merge Cond: (large2.c1 = large1.c1)
-> Sort (cost=112492.52..114575.86 rows=833333 width=6)
Sort Key: large2.c1
-> Parallel Seq Scan on large2 (cost=0.00..19144.33
rows=833333 width=6)
-> Materialize (cost=294813.42..304813.25 rows=1999965 wi
…
3.4.5 Parallel bitmap heap scan
Bitmap Heap Scan has supported parallel query.
Example 49 Parallel Bitmap Heap Scan
postgres=> EXPLAIN SELECT COUNT(c1) FROM large1 WHERE c1 BETWEEN 100000 AND 200000 ;
QUERY PLAN
-------------------------------------------------------------------------------
Finalize Aggregate (cost=18 500.74..18500.75 rows=1 width=8)
-> Gather (cost=18500.52..18500.73 rows=2 width=8)
Workers Planned: 2
-> Partial Aggregate (cost=17500.52..17500.53 rows=1 width=8)
-> Parallel Bitmap Heap Scan on large1 …
Recheck Cond: ((c1 >= '100000'::numeric) …
-> Bitmap Index Scan on idx1_large1 …
Index Cond: ((c1 >= '100000'::numeric) …
(8 rows)
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 43
3.5 Architecture
3.5.1 Added Catalogs
With the additional features, the following system catalogs have been added.
Table 8 Added system catalog list
Catalog name Description
pg_hba_file_rules Referencing pg_hba.conf file
pg_partitioned_table Partitioning table information
pg_publication PUBLICATION object for Logical Replication
pg_publication_rel Target table list for Logical Replication
pg_publication_tables Target table list for Logical Replication
pg_sequence SEQUENCE object list
pg_sequences SEQUENCE object list
pg_stat_subscription Status for Logical Replication
pg_statistic_ext Extended statistics view
pg_subscription SUBSCRIPTION object for Logical Replication
pg_subscription_rel Target table list for Logical Replication
□ pg_hba_file_rules catalog
The pg_hba_file_rules catalog can refer to the contents of the pg_hba.conf file. When changing the
file, the contents of the view are reflected immediately. Comment only lines are not included.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 44
Table 9 pg_hba_file_rules catalog
Column name Data type Description
line_number integer Line number in the file
type text Connection type of local, host, etc
database text[] Target database or all, replication
user_name text[] Username or all
address text TCP/IP address
netmask text Net mask
auth_method text Authentication method
options text[] Options
error text Error messages
□ pg_partitioned_table catalog
The pg_partitioned_table catalog stores information on the parent table on partitioning table.
Table 10 pg_partitioned_table catalog
Column name Data type Description
partrelid oid OID for the table
partstrat char Partitioning method (list = 'l', range = 'r')
partnatts smallint Number of attached partitions
partattrs int2vector Array of partition column values
partclass oidvector The data type of the partition key.
partcollation oidvector Collation information of partition-key columns
partexprs pg_node_tree Information on partitioning columns
□ pg_publication catalog
The pg_publication catalog stores information on PUBLICATION objects used in Logical
Replication.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 45
Table 11 pg_publication catalog
Column name Data type Description
pubname name Name of the PUBLICATION
pubowner oid Owner of the PUBLICATION object
puballtables boolean If true, this publication automatically includes all tables in the
database
pubinsert boolean If true, INSERT operations are replicated for tables
pubupdate boolean If true, UPDATE operations are replicated for tables
pubdelete boolean If true, UPDATE operations are replicated for tables
□ pg_publication_rel catalog
The pg_publication_rel catalog stores the information of the replication target table contained in the
PUBLICATION object.
Table 12 pg_publication_rel catalog
Column name Data type Description
prpubid oid OID of the PUBLICATION object
prrelid oid OID of the target table
□ pg_publication_tables catalog
The pg_publication_tables catalog stores the information of the replication target table contained in
the PUBLICATION object.
Table 13 pg_publication_tables catalog
Column name Data type Description
pubname name Name of the PUBLICATION object
schemaname name Name of the schema
tablename name Name of the target table
□ pg_sequence catalog
The pg_sequence catalog that provides a list of SEQUENCE objects has been added. This catalog
can be searched by general users.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 46
Table 14 pg_sequence catalog
Column name Data type Description
seqrelid oid OID of the object
seqtypid oid Data type of the SEQUENCE
seqstart bigint Start value
seqincrement bigint Incremental value
seqmax bigint Maximum sequence value
seqmin bigint Minimum sequence value
seqcache bigint Number of caches
seqcycle boolean Indicate whether to cyclic
□ pg_sequences catalog
The pg_sequences catalog that provides a list of SEQUENCE object has been added. Although this
catalog can be searched by general users, the last_value column is NULL if the nextval function has
not been executed yet or if the search user does not have USAGE or SELECT privilege on that
SEQUENCE.
Table 15 pg_sequences catalog
Column name Data type Description
schemaname name Name of the schema
sequencename name Name of the SEQUENCE object
sequenceowner name Name of the owner
data_type regtype Data type of the SEQUENCE
start_value bigint Start value
min_value bigint Minimum value
max_value bigint Maximum value
increment_by bigint Incremental value
cycle boolean Indicate whether to cyclic
cache_size bigint Number of caches
last_value bigint Last sequence value or NULL
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 47
Example 50 Reference pg_sequences catalog
postgres=> \x
Expanded display is on.
postgres=> SELECT * FROM pg_sequences ;
-[ RECORD 1 ]-+--------------------
schemaname | public
sequencename | seq1
sequenceowner | postgres
data_type | bigint
start_value | 1
min_value | 1
max_value | 9223372036854775807
increment_by | 1
cycle | f
cache_size | 1
last_value |
The result of the SELECT statement for the sequence has changed due to the addition of the
pg_sequences catalog.
Example 51 Search for a sequence (PostgreSQL 9.6)
postgres=> CREATE SEQUENCE seq1 ;
CREATE SEQUENCE
postgres=> SELECT * FROM seq1 ;
-[ RECORD 1 ]-+--------------------
sequence_name | seq1
last_value | 1
start_value | 1
increment_by | 1
max_value | 9223372036854775807
min_value | 1
cache_value | 1
log_cnt | 0
is_cycled | f
is_called | f
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 48
Example 52 Search for a sequence (PostgreSQL 10)
postgres=> CREATE SEQUENCE seq1 ;
CREATE SEQUENCE
postgres=> SELECT * FROM seq1 ;
-[ RECORD 1 ]-----
last_value | 1
log_cnt | 0
is_called | f
□ pg_stat_subscription catalog
The pg_stat_subscription catalog stores WAL information received by the SUBSCRIPTION object.
This catalog can refer to data only while the replication process is running.
Table 16 pg_stat_subscription catalog
Column name Data type Description
subid oid OID of the SUBSCRIPTION
subname name Name of the SUBSCRIPTION
pid integer Process id of the logical replication
worker
relid oid OID of the table
received_lsn pg_lsn Received LSN
last_msg_send_time timestamp with time zone Message send time
last_msg_receipt_time timestamp with time zone Message receive time
latest_end_lsn pg_lsn Latest end LSN
latest_end_time timestamp with time zone Latest end timestamp
□ pg_statistic_ext catalog
The pg_statistic_ext catalog stores information on extended statistics created with the CREATE
STATISTICS statement.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 49
Table 17 pg_statistic_ext catalog
Column name Data type Description
stxrelid oid OID of the statistics acquisition table
stxname name Name of the extended statistics
stxnamespace oid OID of the namespace
stxowner oid Owner of extended statistics
stxkeys int2vector Array of column numbers from which extended statistics
were obtained
stxkind "char"[] Types of the statistics activated
stxndistinct pg_ndistinct Serialized N-distinct value
stxdependencies pg_dependencies Column dependencies
□ pg_subscription catalog
The pg_subscription catalog stores information on the SUBSCRIPTION object used by Logical
Replication. This catalog can only be viewed by users with SUPERUSER privilege.
Table 18 pg_subscription catalog
Column name Data type Description