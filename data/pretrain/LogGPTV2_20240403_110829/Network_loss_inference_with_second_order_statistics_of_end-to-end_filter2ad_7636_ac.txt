(i) From (6) the columns representing links in BB are lin-
early dependent. However, from Lemmas 2 and 3, any subset
of columns representing links in the tree rooted at B are lin-
early independent. Therefore, (6) can occur only if all links
in BB are alias links in the tree rooted at B. As a result,
there is a path Pi ∈ PB that traverses all links in BB.
Let eb1 , eb2 , . . . , ebn be all the links of BB, with n = |BB| ≥
2. As they are all on the same path Pi ∈ PB, we can order
them in increasing distance from the beacon B, with eb1
being the closest link to B and ebn the farthest away.
(ii) Any path Pi′ /∈ PB that traverses a link ebk ∈ BB must
also traverse at least one of the two links ebk−1 , ebk+1 ∈ BB.
Indeed, as Pi and Pi′ both traverse ebk , Ri,bk = Ri′ ,bk = 1
and thus A((i−1)np+(i−i′)+1),bk = Ri,bk Ri′ ,bk = 1. More-
over, Ri,j = 0 for all ej ∈ F \ BB.
If Pi′ did not tra-
verse any other link of BB but ebk , then Ri′,bl = 0 for all
ebl ∈ BB \{ebk }, hence A((i−1)np+(i−i′)+1),bj = Ri,jRi′ ,j = 0
for all links ej ∈ F \{ebk }. But then (5) implies that αbk = 0,
a contradiction. Therefore Pi′ must traverse another link of
BB \{ebk } located just before or after link ebk (see Figure 4),
because otherwise Pi and Pi′ would form a route “ﬂuttering”
as they would meet at ebk , diverge at ebk+1 (respectively,
ebk−1 ) and meet again at some link ebj with k + 2 ≤ j ≤ n
(resp., 1 ≤ j ≤ k − 2). This is contradiction to Assump-
tion T.2. Consequently, any path Pi′ that traverses a link
ebk ∈ BB must also traverse at least one of the two links
ebk−1 , ebk+1 ∈ BB.
(iii) Now, all columns of the routing matrix R are dis-
tinct, hence the columns R∗b1 and R∗b2 corresponding re-
spectively to eb1 and eb2 are distinct. Therefore, there is a
path Pi1 that traverses only one of the links eb1 and eb2 , and
not the other (Clearly, Pi1 /∈ PB). Because of the argument
in (ii), Pi1 must traverse eb2 and eb3 , and must not traverse
eb1 .
(iv) Columns R∗b2 and R∗b3 corresponding respectively to
eb2 and eb3 are also distinct. Again, there is a path Pi2 that
traverses only one of the links eb2 and eb3 , and not the other.
If it traverses eb2 but not eb3 , then it must also traverse eb1 .
However in this case Pi1 and Pi2 share link eb2 , but cannot
share any other link of BB. Therefore Ri1 ,b2 = Ri2 ,b2 = 1
and thus A((i1−1)np +(i1−i2)+1),b2 = Ri1 ,b2 Ri2 ,b2 = 1, and
A((i1−1)np +(i1−i2)+1),bj = Ri1 ,bj Ri2,bj = 0 for all other link
B
eb1
ebk−1
ebk
B.(ii)
Pi′
ebk+1
Pi2
B
eb1
eb2
eb3
eb4
Route Fluttering
B.(iv)
ebn
Pi′
Pi1
ebn
Pi
Pi
Figure 4: Illustration for the proof of the theorem.
Solid links are links in BB. Dashed links are links
not in BB.
ebj ∈ BB \{eb2 }. Because of (5), as αb2 6= 0, there must be a
link in F \BB that is traversed by both Pi1 and Pi2 . However
such a link would necessarily cause again route ﬂuttering,
because Pi1 and Pi2 would meet at this link and at link eb2 ,
but they would need to separate between themselves because
they do not share eb1 nor eb3 (see Figure 4). Consequently,
Pi2 traverses eb3 , as well as eb4 , because of (ii).
(v) We apply the same argument in (iv) recursively for
every pair of consecutive links ebk , ebk+1 ∈ BB, starting with
k = 3 until k = n − 1. However, for k = n, we reach
a contradiction, as there must be a path Pin−1 traversing
ebn but not ebn−1 . This, in turn, would imply that there is
another link ebn+1 ∈ BB traversed by Pin−1 because of (ii),
but this link does not exist. This contradiction shows that
|BB|  0, the error factor [6] is then
deﬁned to be
fδ(q, q∗) = max q(δ)
q∗(δ)
,
q∗(δ)
q(δ) ﬀ ,
(10)
where q(δ) = max{δ, q} and q∗(δ) = max{δ, q∗}. Thus,
q and q∗ are treated as being not less than δ, and having
done this, the error factor is the maximum ratio, upwards or
downwards, by which they diﬀer. Unless otherwise stated,
we used the default value δ = 10−3 in this paper. This
choice of metric is used to estimate the relative magnitude
of loss ratios on diﬀerent links in order to distinguish those
that suﬀer higher losses.
6.1 Results on Tree Topologies
We ﬁrst perform our simulations on tree topologies of 1000
unique nodes, with the maximum branching ratio of 10. The
beacon is located at the root and the probing destinations
D are the leaves. We ﬁx the percentage of congested links
p = 10%. We repeat each simulation conﬁguration 10 times.
The rank of the augmented routing matrix A is always equal
the number of links nc as we have seen in Section 5, hence
we can estimate the link variances v very accurately in all
of our simulations.
Figure 5 shows the accuracy of the LIA in locating the
congested links. The errors in our results come from sam-
pling errors and they have two sources: (i) the sampling er-
rors in estimating end-to-end loss rates and (ii) the sampling
errors in estimating their covariances. Even under these er-
rors, our method is highly accurate with large DR and small
FPR. We also compare our results with the Smallest Con-
sistent Failure Set (SCFS) algorithm of [14] that uses only a
single snapshot (i.e., the current snapshot) of network mea-
surements. As shown in the ﬁgure, our algorithm is much
more accurate even with small numbers of snapshots m. The
reason for the better performance of LIA is obvious: we ex-
tract more information from the measurements, namely the
second order statistics. Note also that the LIA algorithm is
more accurate when m is large, as in this case the errors in
estimating covariances of end-to-end loss rates are small.
)
R
D
(
e
t
a
R
n
o
i
t
c
e
t
e
D
1
0.9
0.8
0.7
0.6
0.5
0.1
Our Algorithm (LIA)
SCFS
10
20
30
40
50
60
70
80
90
100
0.08
0.06
0.04
0.02
0
10
20
30
SCFS
Our Algorithm (LIA)
50
40
Number of Snapshots (m)
60