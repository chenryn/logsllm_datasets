title:Inferring Protocol State Machine from Real-World Trace
author:Yipeng Wang and
Zhibin Zhang and
Li Guo
Inferring Protocol State Machine from Network
Traces: A Probabilistic Approach(cid:2)
Yipeng Wang1,3, Zhibin Zhang1, Danfeng (Daphne) Yao2,
Buyun Qu1,3, and Li Guo1
1 Institute of Computing Technology, Chinese Academy of Sciences, Beijing, China
2 Department of Computer Science, Virginia Tech, Blacksburg, VA, USA
3 Graduate University, Chinese Academy of Sciences, Beijing, China
PI:EMAIL, {zhangzhibin,guoli}@ict.ac.cn,
PI:EMAIL, PI:EMAIL
Abstract. Application-level protocol speciﬁcations (i.e., how a protocol
should behave) are helpful for network security management, including
intrusion detection and intrusion prevention. The knowledge of proto-
col speciﬁcations is also an eﬀective way of detecting malicious code.
However, current methods for obtaining unknown protocol speciﬁcations
highly rely on manual operations, such as reverse engineering which is
a major instrument for extracting application-level speciﬁcations but is
time-consuming and laborious. Several works have focus their attentions
on extracting protocol messages from real-world trace automatically, and
leave protocol state machine unsolved.
In this paper, we propose Veritas, a system that can automatically
infer protocol state machine from real-world network traces. The main
feature of Veritas is that it has no prior knowledge of protocol speciﬁca-
tions, and our technique is based on the statistical analysis on the proto-
col formats. We also formally deﬁne a new model – probabilistic protocol
state machine (P-PSM), which is a probabilistic generalization of proto-
col state machine. In our experiments, we evaluate a text-based protocol
and two binary-based protocols to test the performance of Veritas. Our
results show that the protocol state machines that Veritas infers can
accurately represent 92% of the protocol ﬂows on average. Our system
is general and suitable for both text-based and binary-based protocols.
Veritas can also be employed as an auxiliary tool for analyzing unknown
behaviors in real-world applications.
Keywords: Protocol Model Inference and Analysis; Probabilistic Pro-
tocol State Machine; Network Security.
1 Introduction
Detailed knowledge of protocol speciﬁcations is helpful in many network secu-
rity applications, such as intrusion detection systems [16], vulnerability discov-
ery [14], and protocol analyzers for Internet traﬃc monitoring [17]. Furthermore,
(cid:2) This work is supported by the National Basic Research Program “973” of China
(Grant No. 2007CB311100).
J. Lopez and G. Tsudik (Eds.): ACNS 2011, LNCS 6715, pp. 1–18, 2011.
c(cid:2) Springer-Verlag Berlin Heidelberg 2011
2
Y. Wang et al.
given a protocol speciﬁcation, it is important for application ﬁngerprinting [15]
and mapping traﬃc to applications [7]. However, many network protocols, such
as private and non-standard protocols, have no public protocol speciﬁcations
available. Therefore, it is a crucial network security problem for Internet Ser-
vice Providers (ISP) to ﬁnd out these unknown protocol speciﬁcations. In the
context of obtaining protocol speciﬁcations, inferring protocol state machines
plays a more important role in practice. Generally, the target of protocol spec-
iﬁcation discovery concerns not only protocol message formats (i.e., the packet
encapsulation mechanism), but also the protocol state machine. The protocol
state machine is a ﬁnite state automaton illustrating the states in the protocol
and their transitions (i.e., the state transition manner). Discovering message for-
mat is useful in identifying protocols in monitored network traﬃc and building
intrusion detection systems; and discovering protocol state machine can depict
the behavior of an application. Much previous work [5,6,7,8,9] was focused on
extracting the protocol format information, without resolving any protocol state
machine. However, there are a few exceptions [3,4]. For example, Prospex [3]
is an elegant solution for both protocol format and state machine inferencing,
which is useful for malware analysis. Prospex’s analysis is based on observing
the dynamic execution of the program and thus requires the binary code.
Our paper provides a novel technique for inferring protocol state machine
solely based on the real-world network trace of an application. There are several
advantages associated with our approach. First, analyzing network traﬃc can be
easily automated and requires less manual eﬀort. The analysis does not require
the distinction between client and server applications. Second, up to 40% of In-
ternet traﬃc belongs to unknown applications [19], many of them ran by botnets.
The binary code of these applications may not be available for reverse engineer-
ing. Inferring the state machine of unknown protocol from its real world trace
can help ISPs have a better understanding to the behaviors of traﬃc passing
through their networks.
We propose Veritas, a system that automatically extracts protocol state ma-
chine for stateful network protocols from Internet traﬃc. The input to Veritas
is the network trace of a speciﬁc application. Our output is a probabilistic de-
scription of the protocol state machine. This probabilistic protocol state machine
(P-PSM) is a new and powerful model that we deﬁne for capturing and represent-
ing any protocols with incomplete knowledge. In order to test and verify Veritas,
we apply our system to several real-world applications, including a client-server
protocol SMTP, two peer-to-peer protocols PPLIVE [21] and XUNLEI [20]. The
experiment results show that our system is capable of correctly recognize and
classify 86% SMTP ﬂows, 100% PPLIVE and 90% XUNLEI ﬂows. Our tool has
the following features: (a) requiring no knowledge of protocol speciﬁcations, (b)
based on the statistics of protocol formats, and (c) eﬀective for both text and
binary protocols. Our contributions are summarized as follows.
– We introduce and formalize a new model – probabilistic protocol state ma-
chine (P-PSM) – for describing the protocol state machine in a probabilis-
tic fashion when there is incomplete knowledge about the protocol. P-PSM
Inferring Protocol State Machine from Network Traces
3
model is general and can be used for representing any stateful protocol with
uncertain information.
– We design a system called Veritas, which can automatically infer the protocol
state machine of a speciﬁc protocol from its real-world trace with no prior
knowledge about the protocol speciﬁcation. We propose a new technique to
extract protocol messages formats that is independent of the type of the
target protocol.
– We apply our system to verify real world applications. The applications con-
tain both text-based and binary-based protocols, which are quite complex.
Our results demonstrate that Veritas is capable of inferring protocol state
machine of good quality in practice.
The rest of the paper is organized as follows. Section 2 is dedicated to the related
work. In Section 3, we introduce the architecture of Veritas and present each
portion of the system. In Section 4, we make use of Veritas for protocol inference
and evaluate the whole system with diﬀerent protocols. Finally, we conclude our
work with future research directions in Section 5.
2 Related Work
We divide our discussion of related work into three areas, namely automatic
protocol reverse engineering, protocol message format extraction, and inferring
protocol state machine.
Automatic protocol reverse engineering. Accurately reversing protocols typi-
cally involves manual eﬀorts, such as in the cases of Gaim [23] and [22]. There are
several proposals on automating this process. Lim et al. [1] proposed a method,
which automatically extracted the format from ﬁles and application data output.
Their works depend on some parameters, such as the output functions, which
may not be available. Polyglot [5] proposed a new approach for reverse engineer-
ing a protocol by using dynamic analysis of program binaries. In our work, we
assume that the program binary is not available; thus our work is orthogonal to
the above.
Protocol message format extraction. Much work in the current literature is
focused on protocol message format extraction. Kannan et al. [8] presented al-
gorithms on extracting the structure of application sessions embedded in the
connections. Haﬀner [7] automated the construction of protocol signatures on
traﬃc that contains the known instance of each protocol. Ma [9] proposed an
unexpected means of protocol inference without relying on the port numbers. His
method classify the network data belonging to the same protocol automatically.
Cui et al. [6] introduced a tool, which is for automatically reverse engineering
the protocol message format from its network trace. His method divided protocol
formats into diﬀerent tokens by some experiential delimiters. In those studies,
inferencing protocol state machine was not investigated.
Inferring protocol state machine. Inferring protocol state machine plays an
important role in protocol speciﬁcations. The works that are closest to ours in-
clude ScriptGen and Prospex. ScriptGen [4] aims to infer protocol state machine
4
Y. Wang et al.
(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:3)(cid:3)(cid:36)(cid:81)(cid:68)(cid:79)(cid:92)(cid:86)(cid:76)(cid:86)
(cid:56)(cid:81)(cid:76)(cid:87)(cid:86)(cid:3)(cid:38)(cid:82)(cid:80)(cid:69)(cid:76)(cid:81)(cid:72)(cid:85)
(cid:88)
(cid:81)
(cid:76)
(cid:87)
(cid:86)
(cid:38)
(cid:68)
(cid:81)
(cid:71)
(cid:71)
(cid:68)
(cid:87)
(cid:72)
(cid:3)
(cid:3)
(cid:76)
(cid:46)(cid:16)(cid:54)(cid:3)(cid:55)(cid:72)(cid:86)(cid:87)(cid:3)(cid:41)(cid:76)(cid:79)(cid:87)(cid:72)(cid:85)
(cid:80)(cid:72)(cid:86)(cid:86)(cid:68)(cid:74)(cid:72)(cid:3)
(cid:88)(cid:81)(cid:76)(cid:87)(cid:86)(cid:3)(cid:36)
(cid:80)(cid:72)(cid:86)(cid:86)(cid:68)(cid:74)(cid:72)(cid:3)
(cid:88)(cid:81)(cid:76)(cid:87)(cid:86)(cid:3)(cid:37)
(cid:48)(cid:72)(cid:86)(cid:86)(cid:68)(cid:74)(cid:72)(cid:3)(cid:56)(cid:81)(cid:76)(cid:87)(cid:86)(cid:3)
(cid:40)(cid:91)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:55)(cid:85)(cid:68)(cid:73)(cid:73)(cid:76)(cid:70)(cid:3)(cid:38)(cid:82)(cid:79)(cid:79)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:36)(cid:83)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:41)(cid:76)(cid:79)(cid:87)(cid:72)(cid:85)
(cid:54)(cid:87)(cid:68)(cid:87)(cid:72)(cid:3)(cid:44)(cid:81)(cid:73)(cid:72)(cid:85)(cid:72)(cid:81)(cid:70)(cid:72)
(cid:41)(cid:72)(cid:68)(cid:87)(cid:88)(cid:85)(cid:72)(cid:3)
(cid:40)(cid:91)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:73)
(cid:72)
(cid:68)
(cid:87)
(cid:88)
(cid:85)
(cid:72)
(cid:57)
(cid:72)
(cid:70)
(cid:87)
(cid:82)
(cid:85)
(cid:76)
(cid:93)
(cid:68)
(cid:87)
(cid:76)
(cid:82)
(cid:81)
(cid:48)(cid:72)(cid:86)(cid:86)(cid:68)(cid:74)(cid:72)(cid:3)
(cid:70)(cid:79)(cid:88)(cid:86)(cid:87)(cid:72)(cid:85)(cid:76)(cid:81)(cid:74)
(cid:38)(cid:79)(cid:88)(cid:86)(cid:87)(cid:72)(cid:85)
(cid:38)(cid:72)(cid:81)(cid:87)(cid:72)(cid:85)(cid:86)
(cid:54)(cid:87)(cid:68)(cid:87)(cid:72)(cid:3)(cid:48)(cid:68)(cid:70)(cid:75)(cid:76)(cid:81)(cid:72)(cid:3)(cid:44)(cid:81)(cid:73)(cid:72)(cid:85)(cid:72)(cid:81)(cid:70)(cid:72)
(cid:37)(cid:88)(cid:76)(cid:79)(cid:71)(cid:76)(cid:81)(cid:74)(cid:3)
(cid:41)(cid:79)(cid:82)(cid:90)(cid:86)
(cid:54)(cid:87)(cid:68)(cid:87)(cid:72)(cid:3)
(cid:47)(cid:68)(cid:69)(cid:72)(cid:79)(cid:76)(cid:81)(cid:74)
(cid:51)(cid:85)(cid:82)(cid:69)(cid:68)(cid:79)(cid:76)(cid:79)(cid:76)(cid:86)(cid:87)(cid:76)(cid:70)(cid:3)
(cid:51)(cid:85)(cid:82)(cid:87)(cid:82)(cid:70)(cid:82)(cid:79)(cid:3)
(cid:54)(cid:87)(cid:68)(cid:87)(cid:72)(cid:3)
(cid:48)(cid:68)(cid:70)(cid:75)(cid:76)(cid:81)(cid:72)
(cid:53)(cid:72)(cid:68)(cid:79)(cid:16)(cid:90)(cid:82)(cid:85)(cid:79)(cid:71)(cid:3)
(cid:83)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:86)