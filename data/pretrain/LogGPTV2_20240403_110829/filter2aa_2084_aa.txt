# The Token Menace: SSO Wars

## Licensing Information
This Photo by Unknown Author is licensed under CC BY.

## Presenters
- **Alvaro Mu√±oz**
  - Security Researcher with Micro Focus Fortify team
  - @Pwntester

- **Oleksandr Mirosh**
  - Security Researcher with Micro Focus Fortify team
  - @OlekMirosh

## Agenda
- Introduction
- Delegated Authentication
- Authentication Tokens
- Arbitrary Constructor Invocation
- Potential Attack Vectors
- Dupe Key Confusion
- Windows Communication Foundation (WCF)
- Windows Identity Foundation (WIF)
- SharePoint
- Conclusions

## Introduction
[Insert relevant image here]

## Delegated Authentication
### Flow Diagram
1. User Agent accesses a protected resource.
2. Service Provider redirects the User Agent to the SSO service.
3. User Agent logs into the SSO service.
4. Identity Provider responds with an authentication token.
5. User Agent forwards the authentication token to the Service Provider.
6. Service Provider redirects the User Agent back to the protected resource.
7. User Agent accesses the protected resource using the authentication token.
8. Resource grants access based on the authentication token.

### Components
- **Service Provider**: The application or service that requires authentication.
- **Identity Provider**: The entity that authenticates the user and issues the token.
- **User Agent**: The client (e.g., web browser) used by the user.
- **Resource**: The protected content or service.

### Authentication Token Structure
- **Issuer**: The identity provider that issued the token.
- **Audience**: The intended recipient of the token.
- **Expire Date**: The time after which the token is no longer valid.
- **Claims**: Statements about the user, such as their roles or permissions.
- **Signature**: A cryptographic signature to ensure the token's integrity.

## Potential Attack Vectors
### Token Parsing Vulnerabilities
- **Timing**: These vulnerabilities often occur before signature verification.
- **Example**: CVE-2019-1083, where the token parsing process can be attacked.

### Signature Verification Bypasses
- **Impact**: Enables attackers to tamper with claims in the token.
- **Example**: CVE-2019-1006, where signature verification can be bypassed.

### Arbitrary Constructor Invocation
- **CVE-2019-1083**: This vulnerability allows for the invocation of arbitrary constructors.
- **JWT Token Example**:
  - **System.IdentityModel.Tokens.Jwt Library**:
    ```csharp
    public override HashAlgorithm GetHashAlgorithmForSignature(string algorithm) {
        object algorithmFromConfig = CryptoHelper.GetAlgorithmFromConfig(algorithm);
        // ...
    }
    internal static object GetAlgorithmFromConfig(string algorithm) {
        obj = CryptoConfig.CreateFromName(algorithm);
        // ...
    }
    public static object CreateFromName(string name, params object[] args) {
        if (type == null) {
            type = Type.GetType(name, false, false);
            if (type != null && !type.IsVisible) type = null;
        }
        // ...
        MethodBase[] array = runtimeType.GetConstructors(BindingFlags.Instance | BindingFlags.Public | BindingFlags.CreateInstance);
        // ...
        object result = runtimeConstructorInfo.Invoke(BindingFlags.Instance | BindingFlags.Public | BindingFlags.CreateInstance, Type.DefaultBinder, args, null);
    }
    ```

- **SAML Token Example**:
  - **System.IdentityModel.SignedXml**:
    ```csharp
    public void StartSignatureVerification(SecurityKey verificationKey) {
        string signatureMethod = this.Signature.SignedInfo.SignatureMethod;
        using (HashAlgorithm hash = asymmetricKey.GetHashAlgorithmForSignature(signatureMethod)) {
            // ...
        }
    }
    ```

- **Attack Vectors**:
  - **Information Leakage**: Different responses from the server can reveal information about available libraries and products.
  - **Denial of Service**: Unhandled exceptions can make the server unresponsive.
  - **Arbitrary Code Execution**: By installing an insecure assembly resolver, an attacker can load and instantiate malicious types.

### Simplified SAML Token
- **Data to be Integrity-Checked**: The core data in the token.
- **Signature Verification Information**: Details on how to verify the signature.
- **Signature**: The cryptographic signature.
- **Keys**: Used for signature calculation.

### Previous Vulnerabilities in SAML
- **XML Signature Wrapping (XSW)**:
  - **Discovery**: 2012 by Juraj Somorovsky, Andreas Mayer, and others.
  - **Impact**: Many implementations in different languages were affected.
  - **Attack Vector**: Modifies the contents of the token without invalidating the signature.

- **Attacks with XML Comments**:
  - **Discovery**: 2018 by Kelby Ludwig.
  - **Attack Vector**: Uses XML comments to modify values without invalidating the signature.

### SAML Signature Verification in .NET
1. **Resolve the Signing Key**:
   - Obtain key from `<ds:KeyInfo>` or create it from embedded data.
2. **Verify the Signature**:
   - Use the key to verify the signature.
3. **Identify the Signing Party**:
   - Derive `SecurityToken` from `<ds:KeyInfo>`.
4. **Authenticate the Signing Party**:
   - Verify trust on the `SecurityToken`.

### SecurityTokenResolver
- **Premise**: If different methods return different keys, validation can be bypassed.
- **A Tale of Two Resolvers**:
  - **Key Identifier Clause**: Different methods may resolve to different keys, leading to potential bypasses.

## Conclusions
[Insert conclusions here]

---

This document provides a structured and professional overview of the topic, ensuring clarity and coherence throughout.