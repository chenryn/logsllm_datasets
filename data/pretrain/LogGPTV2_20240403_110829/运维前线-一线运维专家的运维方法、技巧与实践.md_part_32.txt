环境1名称技术组排期表
发布到美术组排期表[全部发布】
svn更新
发布到ol内战分组[全部发布]
执行的操作
美术组排期表
rsync端口：
sync模块：
sync密码：
rsync长号：webapps
图7-17发布系统－任务列表
873
P113VDRND
svn版本号：187851
dw_ca02015-12-0109:15:15
Svn版本号：187851
dw_cza02015-12-0109:16:46
sv版本号：187852
最后发布
ao2015-12-0109:1439
若配置为空则忽略此环域
展开配置
若配置为空则忽略此环境
若配置为空则忽略此环境
多个ip换行隔开
收起配置
预发布
一键发布日志修改
预发布
一键发布
预发布
一键发布
操作
日志修改
日志修改
---
## Page 185
static正式环境
任务名称
Checked out revision 206105.
从SVN导出代码
atic正式环境
hprof_html/
ati正式环境
刷新CDN是否
同步方式全部同步指定忽略指定文件或目录
发布目录
前置命令
SVN密码
VN用户名
VN根地址
使用SVN
app_id
任务权限
任务名称
项目名称
请输入拥有权限名单
子目录也会设置为读写权限，目录剪后都不需要斜杠"，回车换行分隔
是否
不修改无需填写
请输入SVN用户名
是否
项目app_id
cw
发布者
protected/data
发布到测试环境
5
RSYNC同步代码
com:9999/sv
图7-19创建发布任务详情
ngze
图7-20发布过程及结果
2
图7-21发布历史
1619:32
2016-06-27
6:2227
016-06-27
发布时间
使用
用于调试和性能分析
206050
206052
206103
消息通遵改造
svn日志
com的项目无震填
pom的项目无需填写
第7章PHP运维实践
4.6
成功
结果
169
---
## Page 186
如下：
参数-n表示总请求次数，-c 表示同时发起的并发请求数。例如要测试某网站的性能，命令
通常用ab（Apache Bench）工具来分析，ab可以模拟用户对网站发起请求，常用参数为-n、-c,
速解决问题的基础。接下来我们分析下 PHP 的性能问题。
错误。错误率上升了一定是出现了故障。
馈给业务研发。错误是直接影响用户使用的错误结果，用户看到的可能是502、500、503等
1.5s），超过阈值则可用性指标会下降，吞吐率下降到多少是异常的，要触发预警和告警，反
行统计分析。从业务请求来看，我们要判断一个请求的响应时间少于多少是合理的（比如
请求从开始到完成所用的时间，有时也会认为与响应时间是同一概念。
率，即所谓的 latency 和 throughput。吞吐率是指在单位时间里完成的工作量，延迟是指一个
员必备的非常重要的能力。
PHP 运维人员面对的是生产环境，因此掌握PHP 的性能分析和解决性能问题是PHP 运维人
一时间就能找到性能瓶颈点，没有经验的人甚至无从下手去收集全面的信息加以分析。由于
于测试不完备、代码随意、对性能不够重视等原因导致上线后出现各种问题，且不容易在第
优化在这里就显得特别重要。PHP 具有入门简单、容错性强、性能较高的特点，也很容易由
7.4.1性能问题概述
7.4.
170运维前线：一线运维专家的运维方法、技巧与实践
如何才能知道网站和PHP能承载多大的访问量呢？正常的情况下延时是多少呢。我们
造成性能问题的原因多种多样，深人了解PHP 的性能问题是我们快速定位问题点、快
，随着网站用户的持续增长，如何以有限的资源尽可能地服务于更多的用户呢，PHP性能
Requests per second:
影响PHP性能的点有很多，我们先来了解“性能”这一概念。性能的本质是延时和吞吐
ab
延迟和吞吐可以体现出PHP应用的性能，我们可以将它们作为运维质量的指标来进
口错误率／失败率：PHP处理缓慢会导致超时或触发错误、异常，性能问题也体现在请
口吞吐率（对 PHP-FPM来说是 RPM：Request Per Minute）：吞吐率跟响应时间成反比,
口延时／响应时间：一个PHP 的请求（request）需要花费多长时间来处理，PHP 执行需
求的错误率升高。
PHP性能分析
响应时间越短，单位时间内可处理的请求次数越多，即吞吐率越大。
一
-n 300-c20 http://www.test.com/index.html
网络 IO、SQL 请求等。
要多长时间。影响响应时间的因素包括 PHP 代码的执行时间、CPU、内存、磁盘IO、
1053.502[ms] (mean)
285.54 [#/sec](mean)
---
## Page 187
图7-23展示了逐级细化后的PHP性能组成部分。
瓶颈点，也可能在某些条件下引发性能问题，从而导致整个服务，甚至整个业务出现故障。
分布式分散压力都是使得本层的性能不会成为整个站点的瓶颈。本节的重点是讲解其中的应
性能问题，MySQL主从、分库分表等措施都是为了通过集群来解决数据存储层的性能问题
节的性能瓶颈问题而设计的，比如Nginx集群解决Web 层性能问题，PHP 集群解决应用层
求，MySQL支持多少个并发查询，磁盘支持多少IOPS 等。分布式架构正是为了解决某个环
环节都可以用吞吐和延迟两个指标来衡量性能。例如我们常说的Nginx 能支持每秒多少个请
响应时间就是站点的整体性能。7.1节中讲整个请求流程时讲到请求要经过很多环节，每个
景部分）。
狭义的 PHP 性能是单指 PHP 自身（包括 PHP进程和 PHP 脚本）的性能（图 7-22 中的灰色背
构，包括硬件、操作系统、Web 服务器、PHP、到后端的缓存、存储及调用的外部接口性能等。
7.4.2PHP性能问题
息，有兴趣的读者可以查阅相关资料。
储、本地IO，也包括PHP 本身执行过程中内存和CPU 的消耗。每一个函数都可能是性能
务调用的API。每个服务又由一系列的类或函数调用所组成，函数要访问外部接口、外部存
用服务这一层，也就是PHP-FPM这一层的性能问题。
网站整体输出的性能也就是整个网站架构的性能，从外部来看，URL每秒的请求数和
一个 PHP 网站可能包括多个服务（如登录、首页、列表、上传服务等），也有给其他服
广义的PHP性能是指PHP站点的整体性能（如图7-22所示），是指整个站点软硬件架
可以发现平均响应时间大概在1s左右，并发数在285左右。结果中还有很多有用的信
我们可以以不同的视角来看待整个网站和PHP的性能问题，从宏观定位出问题的是
存储/缓存服务
图7-22PHP广义和狭义性能
服务器硬件及OS性能
PHP-FPM处理能力
Web服务器性能
PHP代码性能
外部接口
代码性能
本地1O
外部存储
函数1
外部接口
服务1
函数n
图7-23PHP应用性能-逐级细化
PHP应用性能-逐级细化
第7章PHP运维实践171
代码性能
本地10
外部存储
外部接口
服务2
函数n
函数1
代码性能
外部存储
外部接口
函数n
函数1
本地10
apil
---
## Page 188
是20MB左右)。下面来看内存的使用情况，如图7-25所示：
间，且多个PHP同时都占这么高；单进程占内存30MB左右，所占内存也偏多（正常情况下
PHP-FPM进程占CPU13%左右，可以理解为PHP进程占用了这个CPU线程13%的执行时
和PHP进程的资源消耗情况，如图7-24所示：
资源占用的分析方法。
了太多的资源，那么肯定会导致PHP发生性能问题，所以本节先讲解系统负载和PHP进程
瓶颈。
是PHP 运行情况的表现，然后通过PHP 内部的运行细节，发现PHP运行过程中的性能
的层级来看看系统的负载，再看看PHP自身输出的运行状态，比如各种日志，这些日志
本节将讲解通用的 PHP 性能分析方法。首先我们分几个层级来进行分析，先从操作系统
性能问题，一定是有某个地方达到了瓶颈，我们要做的就是找到这个点，然后消除它。
再加上与系统中的其他软件互相依赖互相影响，所以定位起来不太容易。当PHP发生了
7.4.3性能分析方法
资源。
哪一层级和哪一个服务，然后再到微观层面看是哪个服务的哪个函数或接口，消耗了什么
172 
（1）系统负载分析：top命令是最基本的Linux命令，可通过 top命令查看机器整体负载
系统整体负载（5分钟load avg）在5左右，表示CPU任务队列的平均长度为5，每个
，性能问题牵涉到的技术点很多，且发生在生产环境中，没办法离线进行慢慢检查，
硬件和操作系统是PHP进程正常运行的基础，如果系统本身资源不够或其他进程抢占
1.系统/进程级分析
运维前线：一线运维专家的运维方法、技巧与实践
aata
图7-24top命令查看系统及进程负载
t5t72
total,1
图7-25服务器内存使用情况
5:29,
776
SHRS%CPU%ME
1use
load
0:0
bouffers
TIME+-COMMAND
0.0%hi
0.0%s
---
## Page 189
MySQL返回的字节数都有1000多字节，说明 SQL返回的结果较大，但每次调用耗时还是
等操作及其耗时，从而进一步分析进程的资源消耗，进而有针对性地改进代码，优化程序。
用户进程调用的那些系统调用（如图7-27），比如磁盘读写、网络连接、网络读写、内存分配
行的，而系统调用是操作系统内核提供给用户态进程的接口方法。strace工具可以帮助查看
的很多信息，限于篇幅不能逐一展开。总之这台服务器目前负载较低，有一定的业务访问，
器1O使用情况，如图7-26所示：
是被用在了缓存上，实际只使用了6643MB，所以内存实际上还是比较充裕的。下面来看服务
系统负载问题并不突出。
（2）系统调用分析：所有软件对磁盘、内存、网络等硬件的操作都是通过操作系统来执
从图7-27可以看出大部分系统调用都在执行读取文件和从MySQL获取数据，且
其中 PID 是 PHP-FPM 工作进程的进程 ID。
命令格式：strace-p-T
从图7-26分析的服务器IO使用情况可知，IO利用率在2.76%，也是很低的。还有其他
Limiot2.0-3-
从图7-25所示的内存使用情况来看，本机有16GB的内存，已基本被用完，但有8466MB
图7-27通过 strace 观察进程的系统调用
美
图7-26服务器IO使用情况
1471
1012
x86.64
ource temporarily unavailable)
(Lifd=
NULL.
(24CFU)
NULL,
1012,MSG
MSG
NULL)
第7章PHP运维实践173
ULL
644>
NULL, NULL) = 236
NULL)=1012
4>
=1012
---
## Page 190
IO时间和等待SQL 的时间)，内存3KB左右，CPU在60～85%之间。取最繁忙的1分钟
个性能时间只包括PHP脚本本身的执行时间，也就是PHP字节码执行时间的总和，不包括
PHP文件及参数、返回码等，也有CPU、内存、时间消耗等。
等。接下来讲解如何根据各种日志和状态分析PHP性能问题。
日志（access log）慢日志（slow log）、PHP错误日志（error log）、内部状态接口（php status）
让研发人员和运维人员得以了解PHP 的运行状态。主要方式有 PHP-FPM 的错误日志、访问
更好的方式。
件时，用了相对路径也会由于路径遍历造成多次读取文件，将 include文件改为绝对路径是
少对PHP代码文件的读写也许是最好的解决办法。另外在PHP代码中include其他PHP文