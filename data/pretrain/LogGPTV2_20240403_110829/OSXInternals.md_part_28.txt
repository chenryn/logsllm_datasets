lwz r0,120(r30)
; Compare n with 0, placing result in cr7 (corresponds to the C line).
; "if (n > 0)")
cmpwi cr7,r0,0
; n is less than or equal to 0: we are done. Branch to factorial0.
ble cr7,factorial0
; Copy n to r2 (this is Darwin, so r2 is available).
lwz r2,120(r30)
; Decrement n by 1, and place the result in r0.
addi r0,r2,-1
; Copy r0 (that is, n - 1) to r3.
; r3 is the first argument to the function that we will call: ourselves.
mr r3,r0
; Recurse.
bl _factorial
; r3 contains the return value.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 70 of 83
; Copy r3 to r2
mr r2,r3
; Retrieve n (the original value, before we decremented it by 1), placing
; it in r0.
lwz r0,120(r30)
; Multiply n and the return value (factorial(n - 1)), placing the result
; in r0.
mullw r0,r2,r0
; Store the result in a temporary variable on the stack.
stw r0,64(r30)
; We are all done: get out of here.
b done
factorial0:
; We need to return 1 for factorial(n), if n 
#include 
#include 
#include 
#include 
#include 
#include 
// Constant on the PowerPC
#define BYTES_PER_INSTRUCTION 4
// Branch instruction's major opcode
#define BRANCH_MOPCODE 0x12
// Large enough size for a function stub
#define DEFAULT_STUBSZ 128
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 76 of 83
// Atomic update function
//
int hw_compare_and_store(u_int32_t old,
u_int32_t new,
u_int32_t *address,
u_int32_t *dummy_address);
// Structure corresponding to a branch instruction
//
typedef struct branch_s {
u_int32_t OP: 6; // bits 0 - 5, primary opcode
u_int32_t LI: 24; // bits 6 - 29, LI
u_int32_t AA: 1; // bit 30, absolute address
u_int32_t LK: 1; // bit 31, link or not
} branch_t;
// Each instance of rerouting has the following data structure associated with
// it. A pointer to a frr_data_t is returned by the "install" function. The
// "remove" function takes the same pointer as argument.
//
typedef struct frr_data_s {
void *f_orig; // "original" function
void *f_new; // user-provided "new" function
void *f_stub; // stub to call "original" inside "new"
char f_bytes[BYTES_PER_INSTRUCTION]; // bytes from f_orig
} frr_data_t;
// Given an "original" function and a "new" function, frr_install() reroutes
// so that anybody calling "original" will actually be calling "new". Inside
// "new", it is possible to call "original" through a stub.
//
frr_data_t *
frr_install(void *original, void *new)
{
int ret = -1;
branch_t branch;
frr_data_t *FRR = (frr_data_t *)0;
u_int32_t target_address, dummy_address;
// Check new's address
if ((u_int32_t)new >> 25) {
fprintf(stderr, "This demo is out of luck. \"new\" too far.\n");
goto ERROR;
} else
printf(" FRR: \"new\" is at address %#x.\n", (u_int32_t)new);
// Allocate space for FRR metadata
FRR = (frr_data_t *)malloc(sizeof(frr_data_t));
if (!FRR)
return FRR;
FRR->f_orig = original;
FRR->f_new = new;
// Allocate space for the stub to call the original function
FRR->f_stub = (char *)malloc(DEFAULT_STUBSZ);
if (!FRR->f_stub) {
free(FRR);
FRR = (frr_data_t *)0;
return FRR;