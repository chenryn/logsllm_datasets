## 找对业务G点, 体验酸爽 - PostgreSQL内核扩展指南
### 作者                                   
digoal                                    
### 日期                                    
2016-06-26                                                            
### 标签                                                                                                                                                    
PostgreSQL , 数据库内核扩展  
----                                    
## 背景       
通用数据库就像带装修的房子一样，如果按数据库的功能划分，可以分为豪华装修、精装、简装。  
PostgreSQL从SQL兼容性、功能、性能、稳定性等方面综合评价的话，绝对算得上豪华装修级别的，用户拎包入住就可以。  
不过通用的毕竟是通用的，如果G点不对的话，再豪华的装修你也爽不起来，这是很多通用数据库的弊病，但是今天PostgreSQL数据库会彻底颠覆你对通用数据库的看法。  
# 基于PostgreSQL打造最好用的私人订制数据库  
花了2个通宵，写了一份PostgreSQL内核扩展指南，时间有限，内容以入门为主。    
希望更多人对PostgreSQL内核扩展有个初步的了解，内核扩展并不需要对数据库内核有非常深的了解，用户只要把重点放在业务上，利用PostgreSQL开放的API实现对数据库内核能力的扩展，打造属于自己的数据库。    
## 为什么要扩展数据库功能  
在回答这个问题前，我们先回答这个问题。    
数据库是不是存数据就可以了？所有的运算都交给应用程序来？      
在数据大集中、硬件成本高的年代。在较为general的硬件条件下，为了避免数据库的计算成为瓶颈你可能会这样做，把数据库用得尽量简单，几乎不做任何的运算，只做简单的增删改查。      
随着数据库技术的发展，水平分库被越来越多的得到应用。同时硬件也在不断的发展，CPU核数、内存带宽、块设备的带宽和IOPS的发展都很迅猛。甚至GPU辅助运算也开始逐渐成为加速的焦点。    
数据库的所依托的硬件运算能力已经非常强大，这种情况下只把数据库用作简单的数据存取会带来什么问题呢？      
我之前写过一篇《论云数据库编程能力的重要性》，可以读一下，也许能找到以上问题的灵感。    
https://yq.aliyun.com/articles/38377  
伴随硬件的飞速发展，叠加数据库的分片技术的发展，现如今使用general硬件的数据库也不再是瓶颈。    
![1](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/5ae320d22e4e48a7e2464e2f5ab8738d9134e9d5.png)  
对于OLTP的query，数据库往往可以做到us级响应，而在网络层可能要花上毫秒级的时间。业务逻辑越复杂，与数据库交互的次数越多，网络RT会成倍的放大，影响用户的体验。    
逻辑更复杂一些的场景，需要将数据取到应用端，在应用端处理，这会涉及到move data，也会较大程度的放大网络RT。move data的模式正在逐渐成为影响用户体验、效率，浪费成本的罪魁祸首。    
![2](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/62dfdae72172a450199e8101efc7c28f8fba0e16.png)  
如果能把数据库打造成为同时具备数据存储、管理与处理能力为一体的产品。在数据库硬件资源充足的情况下，把一些数据库能处理的逻辑交给数据库处理，将极大的降低延迟，在高并发低延迟的应用场景非常有效。    
这考验的就是数据库的扩展能力。    
## 为什么PostgreSQL特别适合做内核扩展  
我提炼了3点适合做内核扩展的理由，有遗漏的话尽量来补充啊，谢谢。  
**.1. 接口丰富**  
PostgreSQL有哪些开放接口？      
UDF（可以扩展 聚合、窗口以及普通 的函数）    
https://www.postgresql.org/docs/9.5/static/xfunc-c.html   
GiST, SP-GiST, GIN, BRIN 通用索引接口，允许针对任意类型自定义索引    
https://www.postgresql.org/docs/9.5/static/gist.html       
... ...    
允许自定义扩展索引接口 (bloom例子)  
https://www.postgresql.org/docs/9.6/static/bloom.html  
https://www.postgresql.org/docs/9.6/static/xindex.html   
操作符，允许针对类型，创建对应的操作符  
https://www.postgresql.org/docs/9.5/static/sql-createoperator.html   
自定义数据类型  
https://www.postgresql.org/docs/9.5/static/sql-createtype.html   
FDW，外部数据源接口，可以把外部数据源当成本地表使用  
https://www.postgresql.org/docs/9.5/static/fdwhandler.html   
函数语言 handler，可以集成任意高级语言，作为数据库服务端的函数语言（例如java, python, swift, lua, ......）  
https://www.postgresql.org/docs/9.5/static/plhandler.html   
动态fork 进程，动态创建共享内存段.    
https://www.postgresql.org/docs/9.5/static/bgworker.html   
table sampling method, 可以自定义数据采样方法，例如创建测试环境，根据用户的需求定义采样方法。  
https://www.postgresql.org/docs/9.5/static/tablesample-method.html   
custom scan provider，允许自定义扫描方法，扩展原有的全表扫描，索引扫描等。（例如GPU计算单元可以通过DMA直接访问块设备，绕过USER SPACE，极大的提高传输吞吐率）  
https://www.postgresql.org/docs/9.5/static/custom-scan.html   
自定义REDO日志encode,decode接口，例如可以用它打造黑洞数据库  
https://www.postgresql.org/docs/9.6/static/generic-wal.html   
用户可以利用这些接口，打造适合业务的私人订制的数据库。来适配各种特殊场景的需求。    
关键是你不需要了解数据库内部的实现，只需要使用这些扩展接口就可以了。    
全球使用最广泛的地理位置信息管理系统PostGIS就是通过这种接口扩展的PostgreSQL插件。    
（集自定义的数据类型，自定义的操作符，以及在GIN、GiST、SP-GiST、B-tree上开发的索引与一身的插件）    
**.2. PostgreSQL是进程模式**  
进程模式也是优势？  必须的。     
相比线程模式，多进程相对来讲稳定性较好，一个进程挂掉，重新拉起来就好，但是一个线程crash会导致整个进程都crash。    
你肯定不希望给数据库加个功能就把数据库搞挂吧，如果是线程模式，扩展数据库的功能就需要非常谨慎。      
而PostgreSQL提供的接口已经有非常多年的历史，通过这些接口开发的插件也是不计其数，接口非常稳定，再加上进程模式，你可以大胆的扩展PostgreSQL的功能。 后面我会给大家看看有哪些不计其数的插件。    
**.3. BSD许可**  
擦，BSD许可也是优势？  必须的。    
如果你要把你加过功能的PostgreSQL包装成产品售卖，你就会发现BSD的好。  它允许你任意形式分发。    
## 内核扩展指南    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/50a9eb406503b02663bb123f183938a77a00110e.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/113b44fbd56364d6d6d84d68e6dfaaf61429bdb2.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/3617e3c83caa1640de6d7c547419d5f4f19566c1.png)  
### PostgreSQL内核概貌    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/f3c2f26a60f1808e565febef1d9a48139cb7e58e.png)  
### 如何分析数据库代码的瓶颈  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/144fcd5253af48340080f54140314c6410008d1b.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/60f83c629e5eec529f4d6b1e55a688d285e57be9.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/4282623fc205538f82fa077d7332df115f52feb1.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/781b20fb3e6db2a4855a5caad923775446fe8399.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/03487b392d00f1c86eb1d7b4aa5321e1fc13ea4b.png)  
### 如何自定义UDF  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/5e4d86ac241fe8fc73edaf3f1668af6997d9ce97.png)  
4. C类型和SQL类型的对应关系  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/e4b68d7e0a2ef78570e019abebee5cb3518ea97a.png)  
### 用户获取SQL参数的宏
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/303e59c550c76621bd0ebb59576ad1c48a22b117.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/b2802edb47f8d9784c353fed5e97281ed4016742.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/1e776f1beecab8e4d95babdee566cbb835e8f687.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/04c88ed1f9e40723bbaa8d53a67c629c3838c612.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/16aec6ad8a755e1f0012b5a3526a2be85da0bbc8.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/92e885368f86bd3f9f59242699f8bdd8900412b5.png)  
### 用户返回结果给SQL函数的宏     
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/1ca3d131a86d324a98e09bcdfd31e2bc1945274d.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/afd8abf6bbdefd6c5d82e2a35d31d35381f210d1.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/56236c9776139b861540edcf33e6efb70e0c2208.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/8ef1d9204f807b616fb85b43bd2bbf3f33b7cfbc.png)  
### C UDF例子，SQL输入为composite类型    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/cb8a2e220cb357318ecbd5c9d7585948bac5f5f8.png)  
### C UDF例子，返回record类型的例子  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/17ad1a2bee664f0d24f6d00dabe314643bd06560.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/e88676b243cab46035e25cc1c436894a8af5623e.png)  
### C UDF例子，返回表(SRF)的例子    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/3b8b7abb22f53b819cada8dec66ae0257553fec8.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/b2cb8c246404db732489013de2389520fdc749be.png)  
### C UDF例子，反转字符串的例子    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/aff2e50a9de3ee1850aade00c0934428fd00b4fb.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/ff8a5f48ea836aa21b08b962b93d05ecd5559c45.png)  