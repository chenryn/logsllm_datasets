:::
::: section
::: titlepage
# []{#creating-uprobes-with-perf_monitoring-and-managing-system-status-and-performance.html#proc_creating-uprobes-at-the-fucntion-level-with-perf_assembly_creating-uprobes-with-perf}使用 perf 在函数级别创建 uprobe {.title}
:::
您可以使用 `perf`{.literal}
工具在进程或应用的任意点上创建动态追踪点。然后，可以将这些追踪点与其他
`perf 工具（如 perf`{.literal} `stat 和 perf`{.literal}
record）``{=html} 结合使用，以更好地理解进程或应用行为。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: orderedlist
**流程**
1.  在您希望在进程或应用程序内感兴趣的位置进行监控的进程或应用程序中创建
    uprobe：
    ``` literallayout
    # perf probe -x /path/to/executable -a function
    Added new event:
      probe_executable:function   (on function in /path/to/executable)
    You can now use it in all perf tools, such as:
            perf record -e probe_executable:function -aR sleep 1
    ```
:::
::: itemizedlist
**其它资源**
-   `perf-probe`{.literal} man page
-   [使用 perf
    记录和分析性能配置集](#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html "第 21 章 使用 perf 记录和分析性能配置集"){.link}
-   [使用 perf stat
    在进程执行期间计数事件](#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html "第 20 章 使用 perf stat 计算进程执行期间的事件"){.link}
:::
:::
::: section
::: titlepage
# []{#creating-uprobes-with-perf_monitoring-and-managing-system-status-and-performance.html#proc_creating-uprobes-on-lines-within-a-function-with-perf_assembly_creating-uprobes-with-perf}使用 perf 在函数的行上创建 uprobes {.title}
:::
然后，可以将这些追踪点与其他 `perf 工具（如 perf`{.literal}
`stat 和 perf`{.literal} record）``{=html}
结合使用，以更好地理解进程或应用行为。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
-   您已获得您的可执行文件的调试符号：
    ``` literallayout
    # objdump -t ./your_executable | head
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    为此，必须安装可执行文件的 `debuginfo`{.literal}
    软件包；如果可执行文件是本地开发的应用程序，则必须使用调试信息（GCC
    中的 `-g 选项）`{.literal} 编译应用程序。
    :::
:::
::: orderedlist
**流程**
1.  查看您可以放置 uprobe 的函数行：
    ``` literallayout
    $ perf probe -x ./your_executable -L main
    ```
    这个命令的输出结果类似：
    ``` literallayout
                  0  int main(int argc, const char **argv)
                  1  {
                            int err;
                            const char *cmd;
                            char sbuf[STRERR_BUFSIZE];
                            /* libsubcmd init */
                  7         exec_cmd_init("perf", PREFIX, PERF_EXEC_PATH, EXEC_PATH_ENVIRONMENT);
                  8         pager_init(PERF_PAGER_ENVIRONMENT);
    ```
2.  为所需的功能行创建 uprobe：
    ``` literallayout
    # perf probe -x ./my_executable main:8
    Added new event:
              probe_my_executable:main_L8   (on main:8 in /home/user/my_executable)
            You can now use it in all perf tools, such as:
                    perf record -e probe_my_executable:main_L8 -aR sleep 1
    ```
:::
:::
::: section
::: titlepage
# []{#creating-uprobes-with-perf_monitoring-and-managing-system-status-and-performance.html#ref_perf-script-output-of-a-perf-data-file-generated-over-uprobes_assembly_creating-uprobes-with-perf}perf 脚本输出通过 uprobe 记录的数据 {.title}
:::
通过 uprobe 分析数据的常用方法是使用 `perf script`{.literal} 命令读取
`perf.data`{.literal} 文件，并显示所记录工作负载的详细踪迹。
在 perf 脚本示例输出中：\* A uprobe 添加到程序名为
[**my_prog**]{.strong} \* 的函数 [**isprime（）**]{.strong} 中
[**，**]{.strong} 是一个添加到 uprobe
的函数参数。或者，[**可以是**]{.strong} 您在添加 uprobe
所在的代码范围内可见的任意变量：
``` literallayout
# perf script
    my_prog  1367 [007] 10802159.906593: probe_my_prog:isprime: (400551) a=2
    my_prog  1367 [007] 10802159.906623: probe_my_prog:isprime: (400551) a=3
    my_prog  1367 [007] 10802159.906625: probe_my_prog:isprime: (400551) a=4
    my_prog  1367 [007] 10802159.906627: probe_my_prog:isprime: (400551) a=5
    my_prog  1367 [007] 10802159.906629: probe_my_prog:isprime: (400551) a=6
    my_prog  1367 [007] 10802159.906631: probe_my_prog:isprime: (400551) a=7
    my_prog  1367 [007] 10802159.906633: probe_my_prog:isprime: (400551) a=13
    my_prog  1367 [007] 10802159.906635: probe_my_prog:isprime: (400551) a=17
    my_prog  1367 [007] 10802159.906637: probe_my_prog:isprime: (400551) a=19
```
:::
:::
[]{#profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance.html#profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance}第 25 章 使用 perf mem 分析内存访问 {.title}
:::
您可以使用 `perf mem`{.literal} 命令对系统上的内存访问进行示例。
::: section
::: titlepage
# []{#profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance.html#the-purpose-of-perf-mem_profiling-memory-accesses-with-perf-mem}perf mem 的目的 {.title}
:::
`perf`{.literal} 工具的 `mem`{.literal}
子命令可以抽样内存访问（负载和存储）。`perf mem`{.literal}
命令提供有关内存延迟、内存访问类型、造成缓存命中和未命中的功能的信息，并通过记录数据符号，以及发生这些点击和丢失的内存位置而提供。
:::
::: section
::: titlepage
# []{#profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance.html#sampling-memory-access-with-perf-mem_profiling-memory-accesses-with-perf-mem}使用 perf mem 对内存进行抽样访问 {.title}
:::
这个步骤描述了如何使用 `perf mem`{.literal}
命令对系统中内存访问进行示例。命令采用与 `perf 记录和`{.literal}
`perf 报告`{.literal} 相同的选项，以及一些专用于 `mem`{.literal}
子命令的选项。记录的数据存储在当前目录中的 `perf.data`{.literal}
文件中，以便稍后进行分析。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
:::
::: orderedlist
**流程**
1.  内存访问示例：
    ``` screen
    # perf mem record -a sleep seconds
    ```
    这个示例按照 `sleep`{.literal} 命令规定的时间跨所有 CPU
    的内存访问样例，持续 [*秒*]{.emphasis}
    数。您可以为要示例内存访问数据的任何命令替换 `sleep`{.literal}
    命令。默认情况下，perf `mem 样本会`{.literal}
    同时执行内存负载和存储。您只能通过使用 `-t`{.literal} 选项并在
    `perf mem`{.literal} 和 `记录`{.literal}
    之间指定\"load\"或\"存储\"来选择一个内存操作。对于负载，捕获内存层次结构级别的信息、TLB
    内存访问、总线侦听和内存锁定。
2.  打开 `perf.data`{.literal} 文件进行分析：
    ``` screen
    # perf mem report
    ```
    如果您使用了示例命令，输出为：
    ``` screen
    Available samples
    35k cpu/mem-loads,ldlat=30/P
    54k cpu/mem-stores/P
    ```
    `cpu/mem-loads,ldlat=30/P`{.literal}
    行表示通过内存负载收集的数据，而 `cpu/mem-stores/P`{.literal}
    行表示通过内存存储收集的数据。突出显示相关类别并按
    [**Enter**]{.keycap} 查看数据：
    ``` literallayout
    Samples: 35K of event 'cpu/mem-loads,ldlat=30/P', Event count (approx.): 4067062
    Overhead       Samples  Local Weight  Memory access             Symbol                                                                 Shared Object                 Data Symbol                                                     Data Object                            Snoop         TLB access              Locked
       0.07%            29  98            L1 or L1 hit              [.] 0x000000000000a255                                                 libspeexdsp.so.1.5.0          [.] 0x00007f697a3cd0f0                                          anon                                   None          L1 or L2 hit            No
       0.06%            26  97            L1 or L1 hit              [.] 0x000000000000a255                                                 libspeexdsp.so.1.5.0          [.] 0x00007f697a3cd0f0                                          anon                                   None          L1 or L2 hit            No
       0.06%            25  96            L1 or L1 hit              [.] 0x000000000000a255                                                 libspeexdsp.so.1.5.0          [.] 0x00007f697a3cd0f0                                          anon                                   None          L1 or L2 hit            No
       0.06%             1  2325          Uncached or N/A hit       [k] pci_azx_readl                                                      [kernel.kallsyms]             [k] 0xffffb092c06e9084                                          [kernel.kallsyms]                      None          L1 or L2 hit            No
       0.06%             1  2247          Uncached or N/A hit       [k] pci_azx_readl                                                      [kernel.kallsyms]             [k] 0xffffb092c06e8164                                          [kernel.kallsyms]                      None          L1 or L2 hit            No
       0.05%             1  2166          L1 or L1 hit              [.] 0x00000000038140d6                                                 libxul.so                     [.] 0x00007ffd7b84b4a8                                          [stack]                                None          L1 or L2 hit            No
       0.05%             1  2117          Uncached or N/A hit       [k] check_for_unclaimed_mmio                                           [kernel.kallsyms]             [k] 0xffffb092c1842300                                          [kernel.kallsyms]                      None          L1 or L2 hit            No
       0.05%            22  95            L1 or L1 hit              [.] 0x000000000000a255                                                 libspeexdsp.so.1.5.0          [.] 0x00007f697a3cd0f0                                          anon                                   None          L1 or L2 hit            No
       0.05%             1  1898          L1 or L1 hit              [.] 0x0000000002a30e07                                                 libxul.so                     [.] 0x00007f610422e0e0                                          anon                                   None          L1 or L2 hit            No
       0.05%             1  1878          Uncached or N/A hit       [k] pci_azx_readl                                                      [kernel.kallsyms]             [k] 0xffffb092c06e8164                                          [kernel.kallsyms]                      None          L2 miss                 No
       0.04%            18  94            L1 or L1 hit              [.] 0x000000000000a255                                                 libspeexdsp.so.1.5.0          [.] 0x00007f697a3cd0f0                                          anon                                   None          L1 or L2 hit            No
       0.04%             1  1593          Local RAM or RAM hit      [.] 0x00000000026f907d                                                 libxul.so                     [.] 0x00007f3336d50a80                                          anon                                   Hit           L2 miss                 No
       0.03%             1  1399          L1 or L1 hit              [.] 0x00000000037cb5f1                                                 libxul.so                     [.] 0x00007fbe81ef5d78                                          libxul.so                              None          L1 or L2 hit            No
       0.03%             1  1229          LFB or LFB hit            [.] 0x0000000002962aad                                                 libxul.so                     [.] 0x00007fb6f1be2b28                                          anon                                   None          L2 miss                 No
       0.03%             1  1202          LFB or LFB hit            [.] __pthread_mutex_lock                                               libpthread-2.29.so            [.] 0x00007fb75583ef20                                          anon                                   None          L1 or L2 hit            No
       0.03%             1  1193          Uncached or N/A hit       [k] pci_azx_readl                                                      [kernel.kallsyms]             [k] 0xffffb092c06e9164                                          [kernel.kallsyms]                      None          L2 miss                 No
       0.03%             1  1191          L1 or L1 hit              [k] azx_get_delay_from_lpib                                            [kernel.kallsyms]             [k] 0xffffb092ca7efcf0                                          [kernel.kallsyms]                      None          L1 or L2 hit            No
    ```
    或者，您可以对结果进行排序，以调查显示数据时感兴趣的不同方面。例如，要按抽样期间发生的内存访问类型对内存负载进行排序，请按它们所考虑的开销降序排列：
    ``` screen
    # perf mem -t load report --sort=mem
    ```
    例如，输出可以是：
    ``` screen
    Samples: 35K of event 'cpu/mem-loads,ldlat=30/P', Event count (approx.): 40670
    Overhead       Samples  Memory access
      31.53%          9725  LFB or LFB hit
      29.70%         12201  L1 or L1 hit
      23.03%          9725  L3 or L3 hit
      12.91%          2316  Local RAM or RAM hit
       2.37%           743  L2 or L2 hit
       0.34%             9  Uncached or N/A hit
       0.10%            69  I/O or N/A hit
       0.02%           825  L3 miss
    ```
:::
::: itemizedlist
**其它资源**
-   `perf-mem(1)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance.html#interpretation-of-perf-mem-report-output_profiling-memory-accesses-with-perf-mem}perf mem 报告输出的解读 {.title}
:::
运行 `perf mem report`{.literal}
命令且没有任何修饰符显示的表，可将数据分为几个列：
::: variablelist
[\'Overhead\' 列]{.term}
:   表示特定功能中收集的整体样本的百分比。
[\'Samples\' 列]{.term}
:   显示按该行划分的示例数量。
[\'Local Weight\' 列]{.term}
:   显示处理器核心周期的访问延迟。
[\'Memory Access\' 列]{.term}
:   显示发生的内存访问类型。
[\'Symbol\' 列]{.term}
:   显示函数名称或符号。
[\"共享对象\"列]{.term}
:   显示样本来自的 ELF 镜像的名称（样本来自内核时使用名称
    \[kernel.kallsyms\]）。
[\"Data Symbol\"列]{.term}
:   显示所在行所针对的内存位置的地址。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通常，由于被访问的内存或堆栈内存的动态分配，\"数据
Symbol\"列将显示原始地址。