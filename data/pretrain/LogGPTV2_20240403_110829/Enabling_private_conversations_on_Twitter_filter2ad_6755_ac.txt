mation either to the server or to undesired users (those not involved
in private conversations).
In light of this, we seek to ensure that the following security
properties hold:
• An undesired user should not be able to infer which of his/her
• The server should not infer the memberships in ongoing conver-
friends are involved in ongoing private conversations.
sations, or determine the size of a private group.
We wish to point out here that if the supporting server has no ac-
cess to user information (which if made available can compromise
the privacy of a user by revealing information such as the number
of private conversations that the user is involved in), it cannot au-
thenticate the veracity of whisper postings. We recognize that this
exposes the Twitsper server to a possible DoS attack wherein
fraudulent information could be sent to the server. We defer the
exploration of defenses against such attacks on the server for future
work, and focus here on protecting user privacy from the server.
Use of certiﬁcates to avoid over the channel modiﬁcations:
The Twitsper server has an SSL certiﬁcate which validates the
authenticity of the server. Thus, a secure HTTPS channel can be
established with the server, precluding the possibility of over the
channel modiﬁcations (as with man in the middle attacks).
Protection from undesired users: A curious user who is not
privy to a private conversation may wish to trick the Twitsper
server into disclosing if one of his friends has initiated a private
conversation. To do so, the user may try to guess the message IDs
associated with whispers posted by the friend, e.g., based on recent
tweets posted by that friend. Note that a whisper results in a set
of Direct Messages being posted to Twitter, each of which has an
associated message ID.
First, we seek to understand if it is easy for a user to carry out
such an attack. Towards this, we perform the following experiments
wherein we use three accounts (say) Alice, Bob and Charlie. In our
ﬁrst experiment, Alice sends 50 Direct Messages to Charlie. In our
second experiment, Alice sends a Direct Message to Charlie, and
immediately thereafter Bob follows by sending a Direct Message to
Charlie; we repeat this sequence 50 times. In our ﬁnal experiment,
Alice sends a Direct Message to Charlie and follows that message
with a tweet, whereupon Bob does the same. Again, we repeat this
sequence 50 times. We observe that while the ID space of tweets
and Direct Messages grows monotonically (across both), the gap
between the IDs in any pair of posts (sent in quick succession) was
at least 107. We observe no visible pattern using which a user can
guess the ID for a Direct Message posted by a friend based on either
a recent tweet or Direct Message posted by that friend. While this
experiment does indicate that it is hard for an undesired user to
query the Twitsper server and obtain information with regards
to speciﬁc private conversations, it does not completely rule out the
possibility. Thus, we incorporate the following into our design.
Recall that an initiator of a private conversation sends Direct
Messages to a private group, and then seeks to create a mapping
on the supporting server between the identiﬁers for those messages
User Device
Twitsper App
1. Forward
User
Input
Middleware
0. User 
Input
4. Relay 
Mappings
Twitsper
Server
Twitter 
Server
2. Post
3. Ack
Figure 3: Steps for posting a whisper
Figure 4: Twitsper on Android OS
(a) List selection
(b) A user’s timeline
and the recipient list. Instead of storing this message ID to list ID
mapping on the Twitsper server simply as (whisperID, listID)
tuples, where whisperID is the message identiﬁer assigned by
Twitter, we replace the ﬁrst component in this tuple with the SHA-
512 hash value of (whisperID|userID|text). Here, userID
corresponds to a receiver of the whisper and text corresponds to
the actual content in the message. This way of storing the map-
pings on the server has two beneﬁts. First, since the hash function
is non-invertible, the server cannot infer the identity of the user in-
volved (the text input to the hash function is only known to the
group members and thus, not available to the server). Second, even
if an undesired user guesses the IDs of the posted messages, he can-
not retrieve the desired mapping, again because he does not know
the text provided as input to the hash.
Hiding the entries in a list: The list identiﬁers included in the
mappings stored at the Twitsper server can however reveal the
participants of private conversations to the server. To hide this in-
formation, we encrypt the list ID stored in any tuple with a group
key. Clearly, the group key should be available to all of the partic-
ipants themselves but not to the server. Thus, we have all recipi-
ents derive a group key Kg from the content of the received Direct
Message, which is not exposed to the Twitsper server. Since a
user may be involved in multiple groups, the private conversation
with which a particular received Direct Message is associated may
not always be apparent. Therefore, we associate a new group key
Kg with every whisper rather than with every conversation. The
key Kg for a particular whisper is a function of the associated text
and the sender of the whisper encrypts the list ID with Kg before
posting the associated mappings to the Twitsper server. Finally,
though this can impact the availability of metadata, to keep stor-
age costs at the Twitsper server low, we purge entries after a
pre-speciﬁed time interval (days).
Alternatively, we could use a one-to-many or many-to-many state-
less broadcast encryption scheme [32, 38, 27, 25], which ensures
that re-keying is infrequent and that many possible subsets can be
generated with little computational effort. At this point, we did
not see any direct advantage of using such approaches over simply
deriving the group key for a conversation from the content of the
initial Direct Message in that conversation.
Note that, in the rare case where a user has a single list on Twitter,
anyone who knows that the user is using Twitsper can infer the
set of users with whom the user is having private conversations.
In practice, we expect that users will conduct private conversations
with different groups at different times, and thus maintain multiple
lists on Twitter.
Preventing the inference of group sizes: Even though list IDs
are now encrypted, the Twitsper server can infer the sizes of pri-
vate groups simply by counting the number of tuples with the same
encrypted list identiﬁer. Recall that the list ID is associated with a
hash value that is unique to each intended group participant; thus,
if there are K participants, there would be K entries corresponding
to the same list. Alternatively, it can simply count the number of
tuples written by a single client (the initiator) via its HTTPS con-
nection within a short time frame.
To ensure that the listID in its encrypted form cannot be di-
rectly used (via counting) to infer the group size, we store en-
tries of the form encKg (listID|hash(listID)|whisperID). The
whisperID corresponds to the Direct Message sent to a speciﬁc
receiver, and thus, each entry now has a unique encrypted list ID
associated with it; the Twitsper server cannot infer group sizes
simply by counting tuples with the same second component. It is
easy to see that when the entries are sent to users, the client pro-
gram can decrypt the content and extract the listID.
To preclude the server from inferring the group size by counting
the number of tuples written by a client within a short time span, we
take the following approach. First, note that simply having clients
write dummy tuples to the server does not sufﬁce. The server can
infer which tuples are spurious by noting the tuples that are never
queried. Thus, we associate each entry with a counter value n
which can vary from 1 to M, where M is a random value cho-
sen uniquely for each recipient (note that in many cases M = 1).
We then modify the ﬁrst and second components of every tuple to
be hash(n|whisperID|userID|text) and encKg (n|M|listID|
hash(listID)|whisperID). For each recipient (say Bob), Al-
ice creates M entries, M being speciﬁc to Bob. Of these, as may
be evident, M − 1 entries correspond to dummy entries. When
Bob queries the server for the ﬁrst time (with hash(1|whisperID|
userID|text)), he retrieves the value of M and now knows how
many spurious entries are stored for him. His client software then
sends M − 1 additional requests to retrieve the spurious entries.
Our design has several other desirable security properties, that
we discuss brieﬂy here.
• Preventing leakage of the browsing habits of users: Since the
user ID is never directly revealed to the supporting server, the
browsing habits or Twitter access patterns of users are held con-
ﬁdential from the server.
• CCA security: Our encryption scheme is based on AES (Ad-
vanced encryption standard) [5] which ensures CCA (chosen ci-
pher text attack) security. Thus, even with the rather predictable
and simple counters used, the list IDs cannot be reverted.
• Forward and backward secrecy: Since a new group key is gen-
erated per whisper message, even if someone guesses or uncov-
ers the key for the metadata for a speciﬁc message, it does not
uncover past or future messages both in the same, or in different
conversations. This ensures both forward and backward secrecy.
414
Entrya ← SHA-512(1|msgID|U|msg)
Entryb ← encryptKg (1|M|listID|hash(listID)|msgID)
EntryList ← add (Entrya, Entryb)
for i ∈ [2, M ] do
API Call 1 PrivSend(msg,listID)
1: SALT ← First 8 bytes of SHA-512(msg)
2: PASS ← msg concatenated with sender’s ID
3: Kg ← PBKDF2(PASS, SALT)
4: for each User U in group listID do
5: msgID ← messageID returned by Twitter on successful post
6: M ← select a random number
7:
8:
9:
10:
11:
12:
13:
14:
15: end for
16: for each (a,b) in EntryList do
17:
18: end for
Dummyi
a
Dummyi
b
EntryList ← add (Dummyi
send (a,b) to Twitsper server
← SHA-512(i|msgID|U|msg)
← encryptKg (i|M|listID|hash(listID)|msgID)
a,Dummyi
b)
end for
Collision of hash entries: Lastly, since things are indexed by the
results of a hash function, the collisions of the hash values might
seem to be an issue. The secure hash standard [15] states that for
a 512 bit hash function (as in our implementation) we need a work
factor of approximately 2256 entries to produce a collision which
we believe leads to a minuscule probability of experiencing colli-
sions. Thus, we ignore hash collisions for now.
7.
IMPLEMENTATION
In this section, we describe our implementation of the Twitsper
client and server. Given the popularity of mobile Twitter clients, we
implement our client on the Android OS [1, 2].
Generic implementation details. Normal tweets (public) and
Direct Messages are sent with the Twitsper client as with any
other Twitter client today. We implement whispers using Direct
Messages as described before. Recall that direct messaging is a
one-to-one messaging primitive provided by Twitter. Mappings
from Direct Messages to whispers are maintained on our Twitsper
server. Instead of describing each API call separately, our descrip-
tion captures their inter-dependencies.
Twitsper’s whisper messages are always sent to a group of se-
lected users. The client handles group creation by creating a list of
users on Twitter. This list can either be public (its group members
are viewable by any user of Twitter) or private for viewing only by
its creator.
Instantiation of Twitsper API: Figure 3 shows the ﬂow of
information involved in posting a whisper. The Twitsper client
at the sender ﬁrst creates a 256 bit AES key from the content to
be shared (msg) using the password-based key derivation func-
tion (PBKDF2) from PKCS#5 [10]. The input to PBKDF2 is the
message text (msg) concatenated with the user ID of the sender.
SALT is a random number generated from the content string; in
our implementation we simply use the ﬁrst 8 bytes of the hash value
SHA-512(msg). At the end of these steps, the sender has generated
the group key (Kg) for the communication (API Call 1; Lines 1–3).
The client then sends a Direct Message via Twitter to each group
member, whereupon Twitter returns the message IDs for each re-
cipient (API Call 1; Line 5).
The Twitsper client then creates metadata tuples that will en-
able recipients of the whisper to map Direct Messages to the corre-
sponding list ID (API Call 1; Lines 6–9). Note here that the client
also picks a random number M for every recipient and creates
M − 1 dummy metadata entries on the Twitsper server (API
Call 1; Lines 10–14) as discussed before. All of these metadata
SALT ← First 8 bytes of SHA-512(msg)
PASS ← msg concatenated with sender’s ID
API Call 2 isPriv?(msg)
1: msgID ← Twitter ID for msg
2: Entrya ← SHA-512(1|msgID| self’s ID |msg)
3: response ← query Twitsper server for Entrya
4: if response (cid:6)= null then
5:
6:
7: Kg ← PBKDF2(PASS, SALT)
8:
9:
10:
11:
12:
13:
14:
15: else
16:
17: end if
end for
return TRUE
return FALSE
Decrypt response using Kg and cache embedded listID with msgID
for future replies
M ← extracted number for spurious queries
for i ∈ [2, M ] do
← SHA-512(i|msgID| self’s ID |msg)
Dummyi
response ← query Twitsper server for Dummyi
a
a
Reply with a direct message
return
API Call 3 PrivReply(msg,orig_msg)
1: if ID for orig_msg is not in cache then
2:
3:
4: end if
5: listID ← mapping for orig_msg’s ID in cache
6: group ← group speciﬁed by the list ∩ user’s followers
7: PrivSend(msg,group)
tuples are ﬁnally transmitted to the Twitsper server (API Call 1;
Lines 16–18). As discussed earlier, in order to associate a whis-
per with the correct list, new metadata is created for every Direct
Message sent and Kg is newly generated for every posted whisper.
When the Twitsper client program at a recipient receives a
Direct Message, it queries the Twitsper server to check whether
the message is a whisper or a standard Direct Message (API Call 2).
To do so, it ﬁrst computes the SHA-512 hash from the content in
the Direct message and its own user ID (API Call 2; Line 2). If
the server ﬁnds a match for the query string, it returns the corre-
sponding tuple to the recipient client program; else it sends a null
response. If an appropriate (non-null) response is received from
the server, the Twitsper client of the recipient extracts the list
ID embedded in the tuple. To decrypt the metadata entry, the client
generates the group key Kg using the text in the received Direct
Message (msg) and the sender’s ID (API Call 2; Lines 5–8). The
client also extracts the embedded value of M and sends M − 1
additional requests for the spurious entries added for this particular
recipient (API Call 2; Lines 9–13).
A key feature of our system is that since whispers are sent as Di-
rect Messages, whispers can still be received and viewed by legacy
users of Twitter who have not adopted Twitsper; such users can-
not however reply to whispers (API Call 3). Twitsper allows a
whisper recipient to reply not only to the sender, but also to a sub-
set of the original group (speciﬁed by the retrieved list) receiving
the whisper. This subset is simply the intersection of the original
group and the followers of the responding user (API Call 3; Line