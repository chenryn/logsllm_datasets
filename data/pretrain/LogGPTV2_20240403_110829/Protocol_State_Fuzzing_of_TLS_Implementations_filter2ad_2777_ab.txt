stance to keep track of the information used in the key
exchange and the actual keys that result from this. Apart
from this, the test harness also has to remember whether
a ChangeCipherSpec was received or sent, as we have to
encrypt and MAC all corresponding data after this mes-
sage. Note that we only need a single test harness for
TLS to then be able to analyse any implementation. Our
test harness can be considered a ‘stateless’ TLS imple-
mentation.
When testing a server, the test harness is initialised by
sending a ClientHello message to the SUT to retrieve the
server’s public key and preferred ciphersuite. When a re-
set command is received we set the internal variables to
these values. This is done to prevent null pointer excep-
tions that could otherwise occur when messages are sent
in the wrong order.
After sending a message the test harness waits to re-
ceive responses from the SUT. As the SUT will not al-
ways send a response, for example because it may be
waiting for a next message, the test harness will gener-
ate a timeout after a ﬁxed period. Some implementations
require longer timeouts as they can be slower in respond-
ing. As the timeout has a signiﬁcant impact on the total
running time we varied this per implementation.
To test client implementations we need to launch a
client for every test sequence. This is done automati-
cally by the test harness upon receiving the reset com-
mand. The test harness then waits to receive the Client-
Hello message, after which the client is ready to receive
a query. Because the ﬁrst ClientHello is received before
any query is issued, this message does not appear explic-
itly in the learned models.
4 Results
We analysed the nine different implementations listed
in Table 1. We used demo client and server applica-
tions that came with the different implementations ex-
cept with the Java Secure Socket Extension (JSSE). For
JSSE we wrote simple server and client applications. For
the implementations listed the models of the server-side
were learned using our modiﬁed W-method for the fol-
lowing alphabet: ClientHello (RSA), Certiﬁcate (empty),
ClientKeyExchange, ChangeCipherSpec, Finished, Ap-
plicationData (regular and empty), HeartbeatRequest.
For completeness we learned models for both TLS ver-
sion 1.0 and 1.2, when available, but this always resulted
in the same model.
Due to space limitations we cannot include the models
for all nine implementations in this paper, but we do in-
clude the models in which we found security issues (for
GnuTLS, Java Secure Socket Extension, and OpenSSL),
and the model of RSA BSAFE for Java to illustrate how
much simpler the state machine can be. The other mod-
els can be found in [15] as well as online, together with
the code of our test harness.4 We wrote a Python ap-
plication to automatically simplify the models by com-
bining transitions with the same responses and replacing
the abstract input and output symbols with more readable
names. Table 2 shows the times needed to obtain these
state machines, which ranged from about 9 minutes to
over 8 hours.
A comparison between our modiﬁed equivalence algo-
rithm and the original W-method can be found in Table 3.
This comparison is based on the analysis of GnuTLS
3.3.12 running a TLS server. It is clear that by taking
advantage of the state of the socket our algorithm per-
forms much better than the original W-method: the num-
ber of equivalence queries is over 15 times smaller for
our method when learning a model for the server.
When analysing a model, we ﬁrst manually look if
there are more paths than expected that lead to a suc-
cessful exchange of application data. Next we determine
whether the model contains more states than necessary
and identify unexpected or superﬂuous transitions. We
also check for transitions that can indicate interesting be-
haviour such as, for example, a ’Bad record MAC’ alert
or a Decryption failed message. If we come across any
4Available at http://www.cs.bham.ac.uk/~deruitej/
196  24th USENIX Security Symposium 
USENIX Association
4
Name
GnuTLS
Java Secure Socket Extension (JSSE)
mbed TLS (previously PolarSSL)
miTLS
RSA BSAFE for C
RSA BSAFE for Java
Network Security Services (NSS)
OpenSSL
nqsb-TLS
Version
3.3.8
3.3.12
1.8.0_25
1.8.0_31
1.3.10
0.1.3
4.0.4
6.1.1
3.17.4
1.0.1g
1.0.1j
1.0.1l
1.0.2
0.4.0
URL
http://www.gnutls.org/
http://www.oracle.com/java/
https://polarssl.org/
http://www.mitls.org/
http://www.emc.com/security/rsa-bsafe.htm
http://www.emc.com/security/rsa-bsafe.htm
https://developer.mozilla.org/en-US/docs/
Mozilla/Projects/NSS
https://www.openssl.org/
https://github.com/mirleft/ocaml-tls
Table 1: Tested implementations
unexpected behaviour, we perform a more in-depth anal-
ysis to determine the cause and severity.
An obvious ﬁrst observation is that all the models
of server-side implementations are very different. For
example, note the huge difference between the mod-
els learned for RSA BSAFE for Java in Fig. 6 and for
OpenSSL in Fig. 7. Because all the models are different,
they provide a unique ﬁngerprint of each implementa-
tion, which could be used to remotely identify the imple-
mentation that a particular server is using.
Most demo applications close the connection after
their ﬁrst response to application data.
In the models
there is then only one ApplicationData transition where
application data is exchanged instead of the expected cy-
cle consisting of an ApplicationData transition that al-
lows server and client to continue exchanging application
data after a successful handshake.
In the subsections below we discuss the peculiarities
of models we learned, and the ﬂaws they revealed. Cor-
rect paths leading to an exchange of application data are
indicated by thick green transitions in the models.
If
there is any additional path leading to the exchange of
application data this is a security ﬂaw and indicated by a
dashed red transition.
4.1 GnuTLS
Fig. 2 shows the model that was learned for GnuTLS
3.3.8.
In this model there are two paths leading to a
successful exchange of application data: the regular one
without client authentication and one where an empty
client certiﬁcate is sent during the handshake. As we
did not require client authentication, both are accept-
able paths. What is immediately clear is that there are
more states than expected. Closer inspection reveals that
there is a ‘shadow’ path, which is entered by sending
a HeartbeatRequest message during the handshake pro-
tocol. The handshake protocol then does proceed, but
eventually results in a fatal alert (‘Internal error’) in re-
sponse to the Finished message (from state 8). From ev-
ery state in the handshake protocol it is possible to go to
a corresponding state in the ‘shadow’ path by sending the
HeartbeatRequest message. This behaviour is introduced
by a security bug, which we will discuss below. Addi-
tionally there is a redundant state 5, which is reached
from states 3 and 9 when a ClientHello message is sent.
From state 5 a fatal alert is given to all subsequent mes-
sages that are sent. One would expect to already receive
an error message in response to the ClientHello message
itself.
Forgetting the buffer in a heartbeat As mentioned
above, HeartbeatRequest messages are not just ignored
in the handshake protocol but cause some side effect:
sending a HeartbeatRequest during the handshake proto-
col will cause the implementation to return an alert mes-
sage in response to the Finished message that terminates
the handshake. Further inspection of the code revealed
the cause:
the implementation uses a buffer to collect
all handshake messages in order to compute a hash over
these messages when the handshake is completed, but
this buffer is reset upon receiving the heartbeat message.
The alert is then sent because the hashes computed by
server and client no longer match.
USENIX Association  
24th USENIX Security Symposium  197
5
Figure 2: Learned state machine model for GnuTLS 3.3.8
Figure 3: Learned state machine model for GnuTLS 3.3.12. A comparison with the model for GnuTLS 3.3.8 in Fig. 2
shows that the superﬂous states (8, 9, 10, and 11) are now gone, conﬁrming that the code has been improved.
198  24th USENIX Security Symposium 
USENIX Association
6
s
e
t
a
t
s
#
i
t
u
o
e
m
T
100ms
100ms
100ms
100ms
100ms
100ms
100ms
200ms
200ms
1500ms
500ms
500ms
200ms
100ms
12
7
8
16
11
10
7
9
9
6
8
6
9
8
)
m
m
:
h
(
e
m
T
i
0:45
0:09
0:39
0:31
0:16
0:14
0:06
0:41
0:39
0:53
3:16
0:18
8:16
0:15
s
e
i
r
e
u
q
p
i
h
s
r
e
b
m
e
m
#
s
e
i
r
e
u
q
e
c
n
e
l
a
v
i
u
q
e
#
1370
456
520
1016
680
624
350
584
584
392
520
392
584
399
5613
1347
2939
4171
2348
2249
902
2458
2176
517
5329
517