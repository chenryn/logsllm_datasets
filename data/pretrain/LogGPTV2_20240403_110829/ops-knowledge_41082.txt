To diagnose application performance bottlenecks, there are several categories of diagnostic tools that can be utilized:

1. **Performance Monitoring Tools**: These tools provide a real-time overview of system and application performance metrics. For instance, Windows Task Manager, Linux Top, and Mac OS X Activity Monitor display key information such as CPU utilization, memory usage, disk I/O speed, and network bandwidth. This data is crucial for identifying areas where an application may be experiencing performance issues.

2. **Code Profiling Tools**: For developers looking to pinpoint performance problems within their code, programming performance analysis tools are indispensable. Examples include Intel VTune, Google Performance Tools (gperftools), Valgrind, and gprof. These tools offer detailed insights into how the program executes, enabling optimization at the source level.

3. **Web Application Performance Analysis Tools**: Specifically designed for web applications, these tools assess various aspects of website performance, from load times to resource usage. Notable options in this category are Google PageSpeed Insights, GTmetrix, and WebPagetest. They not only highlight potential improvements but also suggest best practices for enhancing web page loading efficiency.

4. **Database Performance Analysis Tools**: When dealing with database-related performance issues, specialized tools like MySQLTuner, Oracle SQL Tuning Advisor, or PostgreSQL's pgBadger come into play. These utilities analyze query execution plans, index usage, and other relevant factors to identify and resolve database performance bottlenecks.

5. **Network Performance Analysis Tools**: To diagnose network-related performance issues, packet analyzers such as Wireshark and tcpdump are widely used. These tools capture and analyze network traffic, providing deep visibility into data flow, latency, and other critical network parameters that could impact application performance.

6. **Load Testing Tools**: Lastly, stress testing or load testing tools simulate high-traffic conditions to evaluate how well an application performs under pressure. Popular choices here include Apache JMeter, Micro Focus LoadRunner, and Gatling. By mimicking real-world user scenarios, these tools help uncover scalability limits and other performance constraints before they become actual problems in production environments.

By leveraging the right combination of these diagnostic tools, one can effectively identify, analyze, and address performance bottlenecks across different layers of an application stack.