# Windows内网协议学习LDAP篇之组和OU介绍
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者: daiker@360RedTeam
## 0x00 前言
这篇文章主要介绍AD里面的组和组织单位(OU)。
## 0x01 一些LDAP高级搜索语法
### 1\. LDAP 查找中的位操作
在LDAP
里面，有些字段是位字段，这里以userAccountControl举例，关于这个字段的详细意义，后面会详细介绍，这里先把他当做一个普通的位字段，不去考虑他的具体含义，这里先看下他的内容。
他的属性类位于架构分区的CN=User-Account-Control,CN=Schema,CN=Configuration,DC=test,DC=local
attributeSyntax是2.5.5.9,oMSyntax是2。
查表可知是32位的Integer类型。
之所以我们说他是位字段，是因为他是由一个个位构成。
比如说一个账户，他的LOCKOUT，以及NOT_DELEGATED，其他的位都没有，那这个用户的属性userAccountControl的值就为0x100000+0x0010。是个32
位 int 类型。
那现在的难题就变成。如果我要搜索域内所有设置了NOT_DELEGATED的所有对象。那在上一篇文章里面我们学到的LDAP语法就显得力不从心。因为上一篇文章的语法只能对某个属性进行过滤，还不能对属性里面的某个具体位进行过滤，这也是我们这一节要讲的内容。LDAP的语法支持按位搜索。
执行过滤器以搜索位字段，必须遵循以下语法：
       ： := 
其中的，内容如下。
我们最常的是AND ，也就是1.2.840.113556.1.4.803
我们举几个例子。
我们想查询哪些对象设置了TRUSTED_FOR_DELEGATION
TRUSTED_FOR_DELEGATION对应的十进制比较值位524288
根据语法，我们就可以构造以下过滤规则
    (userAccountControl:1.2.840.113556.1.4.803:=524288)
但是这种我们还得去记BitFilterRule，于是adfind提供了一个更为快捷的方式。
### 2\. LDAP 查找中的objectCategory和objectClass
#### （1） objectClass
在前面一节里面说过,在对象的objectClass
属性里面，可以看到这个对象是哪个类的实例，以及这个类的所有父类，比如说CN=jane,CN=Users,DC=test,DC=local的objectClass是top,person,organizationalPerson,user。那我们通过过滤语句(objectClass=user),(objectClass=organizationalPerson)都能找到这个对象。
所有的类都是top类的子类。因此当我们过滤(objectClass=top)可以找到域内的所有对象。
#### （2） objectCategory
在Windows Server 2008之前默认不对objectClass 属性进行索引。最初认为对多值属性(例如object
Class)进行索引会导致性能下降。如此一来，Windows 2000 附带了未索引的objectClass
属性和另一个已建立索引的单值属性，称为objectCategory。
接下来介绍下objectCategory这个属性。对象类的每个实例还具有一个objectCategory属性，该属性是一个单值属性。并且建立了索引。其中包含对象是其实例的类或其父类之一的专有名称。
比如说CN=jane,CN=Users,DC=test,DC=local.他的objectCategory是CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local
创建对象时，系统会将其objectCategory属性设置为由其对象类的defaultObjectCategory属性指定的值。无法更改对象的objectCategory属性。
如果我们想过滤所有objectCategory的属性为CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local的对象，这个很简单。
    (objectCategory="CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local")
但是这样，又有点不方便，需要记住记住类的DN，所以LDAP在实现上实现了个小技巧。对象类有个属性lDAPDisplayName，指定他的显示名。事实上，我们看objectClass属性里面的类以及父类(比如top.person)，他的名字都是这个类的lDAPDisplayName
CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local的lDAPDisplayName是person.所以LDAP在实现上，支持用类的lDAPDisplayName作为搜索条件。所以如果我们想找所有CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local的实例，可以我简化为以下过滤规则。
    (objectCategory=person)
#### (3) objectClass 与objectCategory的结合使用
如果想确保查询在所有版本的Active Directory上都能正常运行，建议使用 objectClass
和objectCategory结合。如果在目录中已经索引了ObjectClass ，或者所有域控制器都在运行Windows Server
2008或更高版本，则可以随意使用 objectClass，而不必担心会对性能产生影响。
这里我们介绍下objectClass 和objectCategory的集合使用。前面我们分别介绍了objectClass
以及objectCategory，但是没讲怎么把他们结合在一起使用。
我们这里再来理一理思路。
CN=jane,CN=Users,DC=test,DC=local这个对象。
他的objectClass是top,person,organizationalPerson,user。
他的objectCategory是person。
一个对象的objectClass 是一个类的对象类，以及这个对象类的所有父类。
一个对象的objectCategory 是一个类的对象类或者这个对象类的所有父类。
所以说一个对象的objectCategory 必定是objectClass 中的其中一个。
user，person，organizationalPerson类将其defaultObjectCategory设置为person。这允许像（objectCategory=
person）这样的搜索过滤器通过单个查询定位所有这些类的实例。
比如说，我们要定位所有的user 类的实例。(CN=jane,CN=Users,DC=test,DC=local就是user类的一个对象)
user 类的继承关系如下。
    top => person => organizationalPerson => user
那person,organizationalPerson,user都将其defaultObjectCategory设置为person。因此我们可以先过滤。
    (objectCategory=person)
但是这样的结果并不精准。我们使用objectClass进一步在过滤后的结果进行过滤
    (&(objectCategory=person)(objectClass=user))
这样就能精准匹配到了。其实说通俗点就是，objectCategory建立索引，所以查询时间比较快。我们通过objectCategory划分一个大的范围，然后通过objectClass进行精准匹配。
当然如果在目录中已经索引了ObjectClass ，或者所有域控制器都在运行Windows Server 2008或更高版本，我们直接使用
objectClass((objectClass=user))也能很精准地匹配并且不用考虑效率问题。
## 0x01 组
### 1\. 组介绍
在域内，我们无时无刻不在跟组打交道，比如我们熟悉的域管，就是一个组。按照用途来分，组分为通讯组和安全组。对于通讯组，我们接触的比较多的就是邮件组，将若干个人划分到一个通讯组，给这个通讯组发件，那组内用户都能收到。但是通讯组不能控制对资源的访问，我们并不是很在意。这篇文章侧重介绍安全组。
安全组是权限的集合。举个例子，运维需要对公司的网络进行管理，需要一些特殊的管理权限，我们就可以设置个组，对组配置权限。然后将运维拉近组里面，组里面的运维就拥有了该权限。安全组可以根据作用范围划分为。
  * 全局组 (Global group)
  * 通用组(Universal group)
  * 域本地组(Domain Local group)
### 2\. 查询组
所有的组都是group类的实例，
我们可以用(objectClass=group)或者(objectCategory=group)来过滤组。
如果需要考虑效率建议使用,正如前面所说objectCategory有建立索引。而objectClass在08之前并没有建立索引。
那为啥不需要objectClass 和objectCategory配合使用。
我们之前说了，一般配合使用的场景都是通过objectCategory匹配划分一个大的范围，然后通过objectClass进行精准匹配。这里面通过objectCategory匹配到的已经是很精准了，就不需要再精准匹配了。
组的类型由属性groupType决定，属性groupType是一个位字段
现在我们搜索一下
  * 查询域内的所有组
  * 域内的所有全局组
  * 域内的所有通用组
  * 域内的所有域本地组
  * 域内的所有安全组，包括全局组，通用组，域本地组
  * 域内的所有通讯组，不属于安全组的组都是通讯组
  * 域内系统创建的群组
### 3\. 组范围
之前说过安全组可以根据作用范围划分为。
  * 全局组 (Global group)
  * 通用组(Universal group)
  * 域本地组(Domain Local group)下面来详细介绍下
先看个表格，比较下三个组。