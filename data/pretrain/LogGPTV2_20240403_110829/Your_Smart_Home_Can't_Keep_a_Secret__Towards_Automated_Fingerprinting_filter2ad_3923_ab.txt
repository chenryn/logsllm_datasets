LAN. The communication with service provider is through
WAN interface.
• A user takes control of all smart devices in his/her home.
There are usually two ways to interact with IoT devices,
through mobile applications or human interactions (e.g.,
walking, talking, and touching).
Device identifier. IoT devices within the smart home network
can be distinguished by device identifiers determined by specific
network protocols. Each Wi-Fi device has a unique source IP address
and MAC address. Though IoT kits might not get IP addresses
in smart home if they are not using WiFi, they can still obtain
identifiers from IoT hub through other protocols (e.g., NwkAddr for
Zigbee devices and Resolvable Private Address for BLE devices).
2.3 NAPT and VPN
When the network traffic is observed between the gateway and the
service provider, the original device identifiers may be obscured.
Firstly, the gateway could strip off the source MAC address from
the packets [3]. Even the port information can be changed under
NAPT (Network Address and Port Translation) or VPN (Virtual
Private Network). Below, we describe how changes are made by
NAPT and VPN.
NAPT. To conserve the limited global IPv4 space, NAPT is devel-
oped to enable the sharing of one IP address among different devices.
In particular, NAPT modifies the network-layer and transport-layer
Figure 2: VPN-enabled gateway.
identifiers like destination IP address and destination port numbers
of inbound packets[39]. For outbound packets, the source IP address
and the source port are translated. In both cases, the IP address of a
local device is replaced with the gateway’s IP address. The gateway
using NAPT holds a translation table which records the mapping
of addresses and ports so that packets will be routed to the right
destination.
VPN. VPNs are often used to interconnect different networks to
form a new network with a larger capacity [19]. Based on the IP
tunneling mechanism, hosts in different subnets can communicate
with each other and the delivered information can be kept secret
with authentication and encryption. Figure 2 shows the network
structure after deploying a VPN-enabled gateway. Different from
normal routers, a VPN-enabled gateway owns three network in-
terfaces – wlan0, eth0 and tun0. Among them, wlan0 works as
the entrance of LAN, collecting and delivering packets from local
devices. The Ethernet interface eth0 holds the connection between
the gateway and WAN. tun0 is created by VPN client process. For
every packet from wlan0 to eth0, the VPN client first encrypts the
original packet into a payload and constructs a new packet. The new
packet is then delivered to a VPN server and gets decrypted. The
VPN server then forwards restored packets to their original destina-
tions. From the viewpoint of destination remote server, the original
metadata like source IP and source port are completely hidden,
which protects user’s privacy against on-path eavesdroppers.
2.4 Adversary Model
The goal of our adversary is to identify the active IoT devices in
the targeted smart home. Such inference can leak sensitive infor-
mation in a smart home. For example, an ISP can infer the device
information and sell them to advertisers who like to do targeted
advertising. Or a theft can pick the time when the user is not at
home by sniffing the outbound traffic and inferring the status of the
installed surveillance camera. To this end, in this paper we consider
passive eavesdroppers who can observe the encrypted network
traffic flowing between the gateway and the remote service. More
importantly, there are two realistic settings that are not considered
by prior works. On one hand, we assume that NAPTs or VPNs are
enabled in the gateway so that the original device identifiers are
replaced by the gateway’s and the traffic belonging to different de-
vices are merged, even the contacted remote server becomes opaque
to the adversary. On the other hand, we assume multiple devices
(including IoT devices and non-IoT devices such as mobile phones
and tablets) may work simultaneously such that their packets are
Local UserRemote UserGatewayRemote ServerIoT DeviceIoT HubSmart HomeIoT KitsWLAN/LANOther Wireless Protocol (BLE, Zigbee, etc.)WANVPNAdversaryAdversaryConference’17, July 2017, Washington, DC, USA
Shuaike Dong, Zhou Li, Di Tang, Jiongyi Chen, Menghan Sun, and Kehuan Zhang
2.6 Adversary Model
The goal of our adversary is to identify the active IoT devices in
the targeted smart home. Such inference can leak sensitive infor-
mation in a smart home. For example, an ISP can infer the device
information and sell them to advertisers who like to do targeted
advertising. Or a theft can pick the time when the user is not at
home by sniffing the outbound traffic and inferring the status of the
installed surveillance camera. To this end, in this paper we consider
passive eavesdroppers who can observe the encrypted network
traffic flowing between the gateway and the remote service. More
importantly, there are two realistic settings that are not considered
by prior works. On one hand, we assume that NAPTs or VPNs are
enabled in the gateway so that the original device identifiers are
replaced by the gateway’s and the traffic belonging to different de-
vices are merged, even the contacted remote server becomes opaque
to the adversary. On the other hand, we assume multiple devices
(including IoT devices and non-IoT devices such as mobile phones
and tablets) may work simultaneously such that their packets are
interleaving. As shown in [37], non-IoT devices usually have a
higher rate in generating packets and their volume is larger than
that of IoT devices, which means the existence of non-IoT devices
can significantly distort the original statistical features learned on
IoT devices.
Previous works [9, 12, 42] assumed that the adversary can sniff
traffic within the smart home network (i.e., local adversary) or
traffic fusion is not performed by the gateway. In their scenarios,
the flows from different devices are clearly separated based on
device identifiers. Unlike previous works, the remote adversary in
our study is more realistic and the traffic analysis is much more
challenging to perform.
3 SYSTEM DESIGN
In this section, we elaborate the design and implementation of our
system, named HomeMole, for fingerprinting IoT traffic. The goal
is to identify the active IoT devices in a smart-home environment
based on their network traffic. Different from those doing finger-
printing at flow level[15, 42], HomeMole works at packet level, which
means all the packets will be given a label after processed by our
models. As such, HomeMole is able to work in online mode and give
prompt results. In addition to device identification, HomeMole can
also be used for other scenarios like QoS (Quantity of Service) and
IDS (Intrusion Detection System), as shown in [18, 32].
Below, we first describe our insights into IoT traffic analysis in
Section 3.1. Next, we elaborate how we set up the environment to
collect data in Section 3.2. After that, we explain how we prepare
datasets from raw collected packets in Section 3.3. Finally, we show
the detailed structure of our models and why they are adequate for
smart-home environment in Section 3.4.
3.1 Insights into IoT traffic
We carried out exploratory analysis on the realworld IoT devices
and public dataset to characterize their network communication
patterns. We identify several insights which highlight the unique-
ness of IoT traffic comparing to the desktop and mobile traffic.
1) The devices belong to the same category have similar traffic patterns.
As one example, we show the traffic patterns of Amazon Echo Dot
Figure 3: Structure of a basic LSTM used in our work (FC
means fully-connected layer).
interleaving. As shown in [37], non-IoT devices usually have a
higher rate in generating packets and their volume is larger than
that of IoT devices, which means the existence of non-IoT devices
can significantly distort the original statistical features learned on
IoT devices.
Previous works [9, 12, 42] assumed that the adversary can sniff
traffic within the smart home network (i.e., local adversary) or
traffic fusion is not performed by the gateway. In their scenarios,
the flows from different devices are clearly separated based on
device identifiers. Unlike previous works, the remote adversary in
our study is more realistic and the traffic analysis is much more
challenging to perform.
2.5 LSTM-RNN
Recently, deep neural network (DNN) has been gaining traction
in the security domain and shown many promising results, given
its capability of feature representation learning. For example, the
research of Rimmer et al. demonstrated that websites visited by Tor
users can be fingerprinted automatically with DNN [34].
Recurrent Neural Network (RNN) is one type of DNN that is
good at handling temporal-related sequences. With multiple recur-
rent cells connected, the output of a previous cell can be passed
to the current one. In this way, historical information is kept and
forwarded. Among different implementations of RNN, LSTM(Long
Short-Term Memory)-RNN has become a popular choice as it is
able to address weakness of other RNNs like exploding and vanish-
ing gradient. It provides a novel memory cell consisting of three
different gates: input gate, forget gate and output gate. These gates
are used to process the data transferred from previous memory
cell and manipulate the current cell state. LSTM-RNN has achieved
many successes in different areas, such as speech recognition [21],
medical diagnose [28] and system log analysis [16]. Figure 3 shows
the structure of a basic LSTM-RNN.
Inspired by the recent research, we find our problem is a natural
fit for LSTM-RNN models. Similar to system logs, traffic generated
by IoT devices can be organized in chronological order. There exists
contextual dependency between packets based on the running states
of the device and such dependency can be modeled by LSTM-RMM
models. In Section 3, we describe our LSTM-RNN models in details.
LSTM Block…....LSTM BlockcLSTM Block…....LSTM Block c ccInput LayerhhhhFCSoftmax FCSoftmax FCSoftmax FCSoftmax Your Smart Home Can’t Keep a Secret:
Towards Automated Fingerprinting of IoT Traffic with Neural Networks
Conference’17, July 2017, Washington, DC, USA
IPv4 UDP
100.0
1.5
∼0
100.0
0
99.6
99.7
78.6
TCP
98.1
∼100.0
99.6
21.1
Device (%)
Google Home
Echo Dot
Tmall Assist
360 Cam
(LAN mode)
360 Cam
(WAN mode)
O
0.4
∼0
0.4
0.4
0
∼0
5.5
0
TLS HTTP DNS
0.6
26.6
∼0
14.6
∼0
21.0
0.4
0
∼0
∼0
0
50.9
0
4.5
0.6
0
0
0
0
0
1.7
0.1
0
0
0
0
0
2.2
0.1
Orvibo
Broadlink
Tplink
0
0.4
0.3
0.6
0.5
Xiaomi Hub
12.4
Noise - mobile
Noise - tablet
13.0
Table 1: Protocol distribution (O means other protocols).
100.0
99.6
99.7
99.4
99.5
87.6
87.0
99.9
0.2
99.7
0.1
99.5
5.5
0.5
0.1
99.4
0
99.3
0
80.1
86.4
and Google Voice Assistant (both are voice assistants) when they
are waken up (see Figure 11 and Figure 12 in Appendix A). As can be
seen, when the voice command is recognized, both of them generate
a traffic burst, followed by a period of continuous communication
with the remote server.
2) Heartbeat communication is prevalent. The service provider relies
on the heartbeat messages sent by the IoT device to acquire liveness
of the device. The heartbeat packets usually have constant size
and interval, and different devices tend to use different modes for
heartbeat. For example, Amazon Echo Dot sends a 95-byte heartbeat
packet in TLSv1.2 format every 30 seconds, and Google Home
sends two consecutive heartbeat packets in TLSv1.2 format every
60 seconds with the size of 135 bytes and 104 bytes. In addition,