# An Internet Voting System Supporting User Privacy

**Authors:**
- Aggelos Kiayias, University of Connecticut, PI:EMAIL
- Michael Korman, University of Connecticut, PI:EMAIL
- David Walluck, University of Connecticut, PI:EMAIL

## Abstract
This paper introduces the A system, a free and open-source, Internet-based electronic voting system that leverages strong cryptography. Our system is a fully functional e-voting platform with robust security properties, including robustness, trust distribution, ballot privacy, auditability, and verifiability. It can efficiently manage various voting procedures in parallel, suitable for both small-scale (e.g., boardroom/department-wide) and large-scale elections. Additionally, the A system supports flexible voting schemes, enabling it to conduct surveys and other data collection activities. This system provides a unique opportunity to study cryptographic voting protocols from a systems perspective and to explore the security and usability of electronic voting systems.

## 1. Introduction
Electronic voting is a highly debated topic in Information Technology. Public distrust has led to demands for mandatory paper audit trails, which have become law in many states. In 2004, the Department of Defense canceled the Internet-based voting system SERVE, developed by Accenture for $22 million, due to justified security concerns raised by the academic community. Concurrently, the source code of existing electronic voting systems was scrutinized, revealing numerous flaws. These events undermined the credibility of e-voting and raised questions about its feasibility with current infrastructure. Should electronic voting be abandoned, or is it possible to build trustworthy electronic voting systems?

While no system can solve all the problems facing electronic voting, we propose developing free and open-source electronic voting systems as the most promising approach. Despite the existence of many e-voting systems worldwide, none are currently available for free use that are both fully functional and reasonably secure. The lack of transparency in proprietary systems, where source code is often concealed to protect commercial interests or hide security flaws, hinders independent verification. For truly democratic elections, voting software must be auditable and verifiable by any third party. To our knowledge, the A system is the only free and open-source e-voting system based on state-of-the-art cryptographic design.

In the remainder of this introduction, we will review the design goals, summarize the operation and architecture of the A system, provide an overview of existing e-voting systems, and discuss how the A system advances the state of the art. Section 2 will present an overview of an A election procedure, while Section 3 will detail how our implementation captures desired security properties. We will conclude with a discussion of vulnerabilities and future directions in Section 4.

### 1.1. Voting over the Internet
The term "Internet voting" typically refers to remote Internet voting, where client software communicates with server software over the Internet, often from a voter's PC. However, there are two other methods: kiosk voting and poll-site voting. Each method has distinct security requirements:

- **Remote:** In this scenario, a third party or the voter controls the voting client and operating environment.
- **Kiosk:** The voting client is installed by election officials, but the voting environment is out of their control.
- **Poll-site:** Election officials control both the voting client and the operating environment.

Although the A system is designed for remote Internet voting, it can also be deployed for poll-site or kiosk voting, depending on the security requirements. The A system is versatile, capable of handling both small-scale and large-scale election procedures, as well as surveys where strong security may be less critical.

Remote Internet voting should be as secure as voting by mail. While it is vulnerable to a wide range of attacks, it reduces the threat of insider attacks and allows for less trust in election officials. Voting machines arriving at polling places days or weeks early pose a significant on-site attack risk.

### 1.2. System Overview
An A election procedure begins with an interface allowing the administrator to input the candidate list and specify eligible users, who are voters and authorities. The process proceeds as follows:

1. Authorities log into the system and participate in a protocol to create a public encryption key for the system and a unique private decryption key for each authority.
2. Voters log in, download the public key, and use it to encrypt their ballots, which are stored in a publicly accessible area reserved for each voter.
3. After the election, the server tallies the votes using special encryption properties and posts the encrypted result.
4. Authorities then provide decoding information based on the encrypted result and their private keys.
5. When sufficient decoding information is collected, the server combines the pieces to form the final election result, which is published.

The A system does not involve direct user-to-user communication; instead, users, particularly the authorities, communicate indirectly through a public bulletin board maintained by the system. Voters are active in only one round unless they also serve as authorities, which is possible in our architecture.

The A system consists of a bulletin board server, an authentication server (the gatekeeper), and client software (either a Java applet or a standalone program). Figure 1 illustrates the system architecture.

### 1.3. Design and Security Goals
In creating the A system, we adhered to the following design goals:

1. **Transparency:** All data on the bulletin board, including encrypted votes, public encryption keys, and final tallies, should be accessible to the public. The bulletin board does not store secrets.
2. **Universal Verifiability:** Any election result obtained by the system should be verifiable by any third party. By inspecting the election transcript, a complete audit of any procedure should be possible.
3. **Privacy:** All voters should be confident that their individual choices will remain hidden. Only the total result is made public.
4. **Distributed Trust:** Each procedure is supervised by multiple authorities, and the final sum cannot be revealed without the cooperation of a specified number of authorities. Corrupting the procedure requires the corruption of a large number of authorities. Authorities and voters may overlap, allowing voters to play an active role in ensuring trustworthiness.

### 1.4. Related Work
There are three general design approaches for building e-voting systems based on strong cryptographic primitives:

1. **Mixnet-based:** Introduced by D. Chaum [13], these systems use a mixnet, a collection of servers that shuffle ciphertexts to ensure anonymity. Mixnets require proofs of correct operation, which can be cumbersome. However, recent advances have made robust mixnets more practical [12, 20, 22, 31].
   - **Known Implementations:**
     - **VoteHere VHTi [8, 30]:** A commercial implementation focusing on voter-verifiability. The source code is available for public scrutiny but is proprietary and uses patented methods.
     - **Scytl Pnyx [33]:** Another commercial implementation used in some government and private/public sector applications in Europe. The source code is not publicly available.
     - **SureVote [14]:** A commercial, special-hardware enhancement of the mixnet approach by D. Chaum, incorporating a "visual crypto" voter-verifiable component. No publicly available implementation exists yet, though one is in development [38].

2. **Homomorphic Encryption-based:** Introduced by J. Benaloh [11], these systems add votes while encrypted, ensuring individual votes remain hidden. A threshold encryption scheme distributes the private decryption key among several authorities.
3. **Blind-Signature-based:** Introduced by Fujioka et al. [19], these systems use blind signatures to ensure voter privacy and verifiability.

Some implementations do not fall into these categories as they do not employ voting-oriented strong cryptographic primitives. We will briefly discuss these schemes as well.

---

For more details, please visit the A system website, which includes the source code: [http://cryptodrm.engr.uconn.edu/adder/](http://cryptodrm.engr.uconn.edu/adder/)