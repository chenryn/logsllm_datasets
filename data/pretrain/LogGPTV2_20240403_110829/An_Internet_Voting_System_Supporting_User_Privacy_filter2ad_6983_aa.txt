title:An Internet Voting System Supporting User Privacy
author:Aggelos Kiayias and
Michael Korman and
David Walluck
An Internet Voting System Supporting User Privacy
Aggelos Kiayias
University of Connecticut
PI:EMAIL
Michael Korman
University of Connecticut
PI:EMAIL
David Walluck
University of Connecticut
PI:EMAIL
Abstract
This work introduces the A system1 , an Internet-
based, free and open source electronic voting system
which employs strong cryptography. Our system is a
fully functional e-voting platform and enjoys a number
of security properties, such as robustness, trust distri-
bution, ballot privacy, auditability and veriﬁability. It
can readily implement and carry out various voting pro-
cedures in parallel and can be used for small scale
boardroom/department-wide voting as well as large-
scale elections. In addition, A employs a ﬂexible
voting scheme which allows the system to carry out pro-
cedures such as surveys or other data collection activi-
ties. A oﬀers a unique opportunity to study crypto-
graphic voting protocols from a systems perspective and
to explore the security and usability of electronic voting
systems.
1. Introduction
Electronic voting is currently one of the most in-
tensely debated subjects in Information Technology.
Public distrust of electronic voting has led to demands
for mandatory paper audit trails, and indeed this require-
ment has recently become law in many states. In 2004,
the Department of Defense canceled the Internet-based
voting system SERVE that was developed by Accenture
on a $22 million contract [36] because of justiﬁed se-
curity concerns raised by the academic community [24].
At the same time, the source code of currently used elec-
tronic voting systems was put under scrutiny and a mul-
titude of ﬂaws was unearthed [29]. These events threat-
ened the credibility of e-voting and raised many ques-
tions. Should electronic voting be abandoned altogether
as impossible with the current infrastructure? If not,
would it be possible to build electronic voting systems
that are trustworthy?
1The Web site of the system, which includes source code, is at:
http://cryptodrm.engr.uconn.edu/adder/.
Although no system can claim to solve every problem
facing electronic voting today, we suggest that the most
obvious course of action is to develop free and open
source electronic voting systems. While many e-voting
systems exist or are under development world-wide, no
fully functional and reasonably secure system is cur-
rently publicly available for free use. When the machin-
ery used to manage an election runs inside a “black box,”
there is no way to verify the validity of the election.
In order to protect commercial interests, most current
e-voting systems do not have publicly available source
code. In some cases, code is concealed to avoid the dis-
covery of embarrassing security ﬂaws. Even proprietary
systems that reveal source code often leave several crit-
ical components hidden. In order to ensure true demo-
cratic elections, voting software must be independently
auditable and veriﬁable by any interested third party. For
this reason, free and open source e-voting systems can
be a catalyst for positive developments in the area. To
the best of our knowledge, A is the only free and
open source e-voting system based on state-of-the-art
cryptographic design.
In the remainder of the introduction, we will review
the design goals, brieﬂy summarize the operation and ar-
chitecture of the A system, we will provide a thor-
ough review of the existing body of work in e-voting
systems, and discuss how A advances the state of
the art. In section 2, we will present an overview of an
A election procedure. In section 3, we will discuss
how our implementation captures various desired secu-
rity properties. We will conclude with vulnerabilities
and future directions in section 4.
1.1. Voting over the Internet
When the term Internet voting is used, it generally
refers to remote Internet voting, where the client soft-
ware communicates over the Internet to the server soft-
ware, say, from a voter’s PC. However, there are at least
two other ways to implement voting over the Internet:
kiosk voting and poll-site voting. Each of these three
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006ways has its own particular security requirements.
Remote. In this scenario, a third party, or the voter him-
self (rather than election oﬃcials) has control over the
voting client and operating environment.
Kiosk.
In this scenario, the voting client may be in-
stalled by election oﬃcials, but the voting environment
is out of election oﬃcials’ control.
Poll-site. In this scenario, election oﬃcials have control
over the voting client and the operating environment.
Although the A system was designed especially
for remote Internet voting, nothing prevents it from be-
ing deployed for poll-site or kiosk voting, depending on
the security requirements. A also has the ability
to carry out small-scale and large-scale election proce-
dures, or even surveys where strong security may be less
of a concern.
It is not unreasonable to ask that remote Internet vot-
ing be as secure as voting by mail. We note that although
remote Internet voting opens itself up to a wide range of
attacks that may not be applicable to poll-site or kiosk
Internet voting (cf. §3), it at least reduces the threat of
insider attacks and allows less trust to be placed in the
election oﬃcials. In many cases, voting machines arrive
at polling places days or weeks early, making the threat
of an on-site attack a real concern.
1.2. System overview
An A election procedure is initiated through an
interface which allows the administrator to provide the
candidate list and specify the eligible users. Such users
are voters and authorities. An A election procedure
progresses in the following manner. The authorities log
into the system and participate in a protocol that results
in the creation of a public encryption key for the system,
and a unique private decryption key for each authority.
Next, each voter logs on, downloads the public key of
the system, and uses that to encrypt the ballot, which is
placed in an area of public storage speciﬁcally reserved
for that voter. When the election is over, the server tallies
the votes (using special encryption properties) and posts
the encrypted result. Subsequently, the authorities pro-
vide some decoding information based on the encrypted
result and their private keys. When enough such decod-
ing information has been collected, the server combines
the individual pieces to form the election result, which
is then published. We note that A does not employ
any user-to-user communication; instead, users of the
system (in particular, the authorities) communicate in-
directly through the public bulletin board that is main-
tained by the system. Voters are only active in one round
throughout the system’s operation (unless they are also
playing the role of the authorities, which is possible in
our architecture).
The A system is implemented as a bulletin board
server, an authentication server (the gatekeeper), and
client software (either a Java applet or a stand-alone pro-
gram). Figure 1 shows a diagram of the entire system.
Figure 1. System diagram.
1.3. Design & security goals
In creating the A system, we adhered to the fol-
lowing design goals.
1. Transparency. All of the data on the bulletin board
should be accessible to the public. This includes
the encrypted votes, public encryption keys, and ﬁ-
nal tallies. The bulletin board does not store se-
crets.
2. Universal Veriﬁability. Any election result ob-
tained by the system should be veriﬁable by any
third party. By inspecting the election transcript, it
should be possible to perform a complete audit of
any procedure.
3. Privacy. All voters in an election should be conﬁ-
dent that their individual choices will remain hid-
den. Only the total is made available to the public.
4. Distributed Trust. Each procedure is “supervised”
by multiple authorities, and the ﬁnal sum cannot be
revealed without the cooperation of a given number
of authorities. Any attempt to undermine the proce-
dure will require the corruption of a large number
of authorities. Authorities and voters may overlap
arbitrarily. Thus, it is possible for the voters them-
selves to ensure trustworthiness (or have an active
role in it).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:28 UTC from IEEE Xplore.  Restrictions apply. 
INTERNETvoterauthoritygatekeeperadderAuthenticateVoter: cookieServer: certificateObtain appletParticipateweb-serverweb-servermysqldatabasevoteProceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20061.4. Related work
There exist three general design approaches for build-
ing e-voting systems based on strong cryptographic
primitives: mixnet-based, introduced by D. Chaum [13];
homomorphic encryption-based, introduced by J. Be-
naloh [11]; and blind-signature-based, introduced by
Fujioka et al. [19]. These approaches rely on diﬀerent
cryptographic primitives and, from an implementation
point of view, have diﬀerent advantages and disadvan-
tages.
It should be noted that some implementations do not
fall into these categories as they do not employ one of
these voting-oriented strong cryptographic primitives.
We will brieﬂy discuss these schemes as well.
Mixnet-based schemes.
In a mixnet-based scheme
[13], the election system is built around a basic cryp-
tographic primitive called a mixnet. A mixnet is com-
prised of a collection of servers whose task is to shuﬄe
a given input sequence of ciphertexts (encrypted votes).
This serves as an implementation of a robust anonymous
channel. To ensure that mix-servers do not drop or sub-
stitute ciphertexts, it is necessary that the servers pro-
vide proofs of correct operation. A general criticism
of mixnet-based schemes is that these proofs are cum-
bersome. We note, though, that signiﬁcant advances
have been made towards making robust mixnets prac-
tical [12, 20, 22, 31].
Known mixnet based implementations: (i) VoteHere
VHTi [8, 30] is a commercial implementation which
focuses on voter-veriﬁability. VoteHere has published
their source code for public scrutiny, but it is propri-
etary and uses patented methods. (ii) Scytl Pnyx [33] is
another recent commercial implementation. The source
code is not publicly available, but the system appears to
have been used in some government systems and small
private and public sector applications in Europe.
(iii)
SureVote [14] is a commercial, special-hardware en-
hancement of the mixnet approach by D. Chaum which
incorporates a “visual crypto” voter-veriﬁable compo-
nent. The suggested system uses proprietary printing
equipment and currently no publicly available imple-
mentation exists (although we are aware that an imple-
mentation is underway [38]).
Homomorphic-based schemes.
In a homomorphic
encryption-based voting scheme [11], votes are added
while encrypted, so no individual vote ever needs to be
revealed. In order to ensure that the private decryption
key of the election is not used to decrypt an individ-
ual vote, a threshold encryption scheme must be applied
to distribute the key among several authorities in such