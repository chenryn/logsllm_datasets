• Inappropriate modeling. Even when security arguments are
correct, attacks can lie outside the model in which they are
established. This is a known and common pitfall: To make
(pen-and-paper) security analysis tractable, models are often
heavily simpliﬁed into a cryptographic core that elides many
details about cryptographic designs and attacker capabilities.
Unfortunately, attacks are often found outside of this core.
How are these failures being addressed outside CAC?
To minimize erroneous arguments, cryptographers have de-
vised a number of methodological frameworks for security
analysis (e.g., the code-based game playing [8] and universal
composability [9] frameworks). The high-level goal of these
frameworks is to decompose security arguments into simpler
arguments that are easier to get right and then smoothly
combine the results. Still, pen-and-paper proofs based on these
methodologies remain complex and error-prone, which has led
to suggestions of using computer-aided tools [10].
To reduce the risks of inappropriate modeling, real-world
provable security [11]–[13] advocates making security ar-
guments in more accurate models of cryptographic designs
and adversarial capabilities. Unfortunately, the added realism
comes with greater complexity, complicating security analysis.
How can computer-aided cryptography help? Computer-
aided cryptography tools are effective for detecting ﬂaws
in cryptographic designs and for managing the complexity
of security proofs. They crystallize the beneﬁts of on-paper
methodologies and of real-world provable security. They also
deliver trustworthy analyses for complex designs that are
beyond reach of pen-and-paper analysis.
What are the ﬁne-print caveats? Computer-aided security
proofs are only as good as the statements being proven.
However, understanding these statements can be challenging.
Most security proofs rely on implicit assumptions; without
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:25 UTC from IEEE Xplore.  Restrictions apply. 
778
proper guidance, reconstructing top-level statements can be
challenging, even for experts. (As an analogy, it is hard even
for a talented mathematician to track all dependencies in a
textbook.) Finally, as with any software, tools may have bugs.
What background do I need to know about symbolic secu-
rity? The symbolic model is an abstract model for representing
and analyzing cryptographic protocols. Messages (e.g., keys,
nonces) are represented symbolically as terms (in the parlance
of formal logic). Typically, terms are atomic data, meaning
that
into, say, component bitstrings.
Cryptographic primitives are modeled as black-box functions
over terms related by a set of mathematical identities called
an equational theory. For example, symmetric encryption can
be modeled by the black-box functions Enc and Dec related
by the following equational theory: Dec(Enc(m, k), k) = m.
This says that decrypting the ciphertext Enc(m, k) using the
key k recovers the original plaintext m.
they cannot be split
An adversary is restricted to compute (i.e., derive new terms
contributing to its knowledge set) using only the speciﬁed
primitives and equational theory. Equational theories are thus
important for broadening the scope of analysis—ignoring
valid equations implicitly weakens the class of adversaries
considered. In the example above, m and k are atomic terms,
and so equipped with only the given identity, an adversary
can decrypt a ciphertext only if it has knowledge of the entire
secret key. Such simpliﬁcations enable modeling and verifying
protocols using symbolic logic. Symbolic tools are thus well-
suited to automatically searching for and unveiling logical
ﬂaws in complex cryptographic protocols and systems.
Symbolic security properties come in two main ﬂavors:
trace properties and equivalence properties. Trace properties
state that a bad event never occurs on any execution trace.
For example, a protocol preserves trace-based secrecy if, for
any execution trace, secret data is not
in the adversarial
knowledge set. On the other hand, equivalence properties
state that an adversary is unable to distinguish between two
protocols, often with one being the security speciﬁcation.
Equivalence properties typically cannot be (naturally or pre-
cisely) expressed as trace properties. For example, a protocol
preserves indistinguishability-based secrecy if the adversary
cannot differentiate between a trace with the real secret and a
trace with the real secret replaced by a random value.
What background do I need to know about computational
security? In the computational model, messages are bitstrings,
cryptographic primitives are probabilistic algorithms on bit-
strings, and adversaries are probabilistic Turing machines.
For example, symmetric encryption can be modeled by a
triple of algorithms (Gen, Enc, Dec). The probabilistic key
generation algorithm Gen outputs a bitstring k. The encryption
(decryption) algorithm Enc (Dec) takes as input a key k and a
plaintext m (ciphertext c), and outputs a ciphertext c (plaintext
m). The basic correctness property that must hold for every
key k output by Gen and every message m in the message
space is Dec(Enc(m, k), k) = m. Because keys are bitstrings
in this model, knowing bits of an encryption key reduces the
computational resources required to decrypt a ciphertext.
Computational security properties are also probabilistic
and can be characterized along two axes: game-based or
simulation-based, and concrete or asymptotic.
Game-based properties specify a probabilistic experiment
called a “game” between a challenger and an adversary, and
an explicit goal condition that the adversary must achieve to
break a scheme. Informally, security statements say: For all
adversaries, the probability of achieving the goal condition
does not exceed some threshold. The speciﬁc details, e.g., the
adversary’s computational resources and the threshold, depend
on the choice of concrete or asymptotic security.
A core proof methodology for game-based security is game
hopping. In the originally speciﬁed game,
the adversary’s
success probability may be unknown. Thus, we proceed by
step-wise transforming the game until reaching one in which
the success probability can be computed. We also bound the
increases in the success probability from the game transforma-
tions, often by reducing to an assumed hard problem (e.g., the
discrete log or RSA problems). We can then deduce a bound
on the adversary’s success probability in the original game.
The interested reader can see the tutorials on game hopping
by Shoup [14] and Bellare and Rogaway [8].
Simulation-based properties specify two probabilistic ex-
periments: The “real” game runs the scheme under analysis.
The “ideal” game runs an idealized scheme that does not
involve any cryptography, but instead runs a trusted third-
party called an ideal functionality, which serves as the se-
curity speciﬁcation. Informally, security statements say: For
all adversaries in the real game, there exists a simulator in the
ideal game that can translate any attack on the real scheme
into an attack on the ideal functionality. Because the ideal
functionality is secure by deﬁnition, the real scheme must also
be secure. In general, simulation-based proofs tend to be more
complicated than game-based proofs, but
importantly they
support composition theorems that allow analyzing complex
constructions in a modular way from simpler building blocks.
The interested reader can see the tutorial on simulation-based
proofs by Lindell [15].
Concrete security quantiﬁes the security of a scheme by
bounding the maximum success probability of an adversary
given some upper bound on running time. A scheme is (t, )-
secure if every adversary running for time at most t succeeds
in breaking the scheme with probability at most . In contrast,
asymptotic security views the running time of the adversary
and its success probability as functions of some security
parameter (e.g., key length), rather than as concrete numbers.
A scheme is secure if every probabilistic polynomial time
adversary succeeds in breaking the scheme with negligible
probability (i.e., with probability asymptotically less than all
inverse polynomials in the security parameter).
Of
these different
security properties, we note that
computer-aided security proofs have primarily focused
on game-based, concrete security. Work on mechanizing
simulation-based proofs is relatively nascent; asymptotic secu-
rity is the prevailing paradigm in cryptography, but by proving
concrete security, asymptotic security follows a fortiori.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:25 UTC from IEEE Xplore.  Restrictions apply. 
779
Tool
CPSA(cid:46)
[16]
F7(cid:5)
[17]
(cid:30)F5(cid:5)
[18]
Maude-NPA(cid:46)
[19]
ProVerif(cid:63)†
[20]
(cid:30)fs2pv(cid:5)†
[21]
(cid:30)GSVerif(cid:63)†
[22]
(cid:30)ProVerif-ATP(cid:63)† [23]
(cid:30)StatVerif(cid:63)†
[24]
Scyther(cid:46)
[25]
scyther-proof(cid:46)‡§
[26]
Tamarin∗‡
[27]
[28]
(cid:30)SAPIC(cid:63)
CI-AtSe(cid:46)
[29]
OFMC(cid:46)†
[30]
SATMC(cid:46)
[31]
AKISS(cid:63)
[32]
APTE(cid:63)
[33]
DEEPSEC(cid:63)
[34]
SAT-Equiv(cid:63)
[35]
SPEC(cid:63),§
[36]
Unbound Trace
Equiv
Eq-thy
State
Link
d
d
d
d
t
t
t
t
o
Speciﬁcation language
(cid:46) – security protocol notation
(cid:63) – process calculus
∗ – multiset rewriting
(cid:5) – general programming language
Miscellaneous symbols
(cid:30) – previous tool extension
† – abstractions
‡ – interactive mode
§ – independent veriﬁability
Equational theories (Eq-thy)
– with AC axioms
– without AC axioms
– ﬁxed
Equivalence properties (Equiv)
t – trace equivalence
o – open bisimilarity
d – diff equivalence
OVERVIEW OF TOOLS FOR SYMBOLIC SECURITY ANALYSIS. SEE
SECTION II-B FOR MORE DETAILS ON COMPARISON CRITERIA.
TABLE I
B. Symbolic Tools: State of the Art
Table I presents a taxonomy of modern, general-purpose
symbolic tools. Tools are listed in three groups (demarcated
by dashed lines): unbounded trace-based tools, bounded trace-
based tools, and equivalence-based tools; within each group,
top-level tools are listed alphabetically. Tools are categorized
as follows, annotated with the relevant criteria (A, S, T, U )
described in the introduction. Note that the capabilities of
symbolic tools are more nuanced than what is reﬂected in the
table—the set of examples that tools can handle varies even
if they support the same features according to the table.
Unbounded number of sessions (A). Can the tool analyze
an unbounded number of protocol sessions? There exist proto-
cols that are secure when at most N sessions are considered,
but become insecure with more than N sessions [37]. Bounded
tools ( ) explicitly limit the analyzed number of sessions and
do not consider attacks beyond the cut-off. Unbounded tools
( ) can prove the absence of attacks within the model, but at
the cost of undecidability [38].
In practice, modern unbounded tools typically substantially
outperform bounded tools even for a small number of sessions,
and therefore enable the analysis of more complex models.
This is because bounded tools are a bit naive in their ex-
ploration of the state space, basically enumerating options
(but exploiting some symmetry). They therefore typically grow
exponentially in the number of sessions. The unbounded tools
inherently need to be “more clever” to even achieve unbounded
analysis. While their algorithms are more complex, when
trace properties?
Equivalence properties (S). Does the tool support veriﬁ-
cation of equivalence properties? There are several different
equivalence notions used in current tools. Here, we provide
some high-level intuition, but for a more formal treatment,
see the survey by Delaune and Hirschi [39].
Trace equivalence (t) means that, for each trace of one
there exists a corresponding trace of the other
protocol,
protocol, such that
the messages exchanged in these two
traces are indistinguishable. This is the weakest equivalence
notion, roughly meaning that it can express the most security
properties. (The other stronger notions are often intermediate
steps towards proving trace equivalence.) It is also arguably
the most natural for formalizing privacy properties.
they work (i.e., terminate), the analysis is independent of the
number of sessions.
Trace properties (S). Does the tool support veriﬁcation of
Open bisimilarity (o) is a strictly stronger notion that
captures the knowledge of the adversary by pairs of symbolic
traces, called bi-traces. A bi-trace is consistent when the
messages in the two symbolic traces are indistinguishable by
the adversary. Informally, two protocols are open bisimilar
when each action in one protocol can be simulated in the
other using a consistent bi-trace.
Diff-equivalence (d) is another strictly stronger notion that
is deﬁned for protocols that have the same structure and differ
only by the messages they exchange. It means that, during
execution, all communications and tests, including those that
the adversary can make, either succeed for both protocols
or fail for both protocols. This property implies that both
protocols still have the same structure during execution.
Equational theories (S). What is the support for equational
theories? At a high-level, extra support for certain axioms
enables detecting a larger class of attacks (see, e.g., [40], [41]).
We provide a coarse classiﬁcation as follows: tools that support
a ﬁxed set of equational theories or no equational theories at
all ( ); tools that support user-deﬁned equational theories, but
without associative-commutative (AC) axioms ( ); tools that
support user-deﬁned equational theories with AC axioms ( ).