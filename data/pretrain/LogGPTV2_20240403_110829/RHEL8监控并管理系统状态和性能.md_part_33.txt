[\'Symbol\' 列]{.term}
:   显示函数名称或符号。
:::
在默认模式中，函数按照降序排列，其开销最先显示。
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#generating-a-perf-data-file-that-is-readable-on-a-different-device_recording-and-analyzing-performance-profiles-with-perf}生成可在不同设备中读取的 perf.data 文件 {.title}
:::
您可以使用 `perf`{.literal} 工具将性能数据记录到要在不同设备上分析的
`perf.data`{.literal} 文件中。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
-   已安装内核 `调试`{.literal} 信息软件包。如需更多信息，[请参阅使用
    GDB 为应用程序或库获取 debuginfo
    软件包。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/enabling-debugging-with-debugging-information_debugging-applications#getting-debuginfo-packages-for-an-application-or-library-using-gdb_enabling-debugging-with-debugging-information){.link}
:::
::: orderedlist
**流程**
1.  捕获您有兴趣进一步调查的性能数据：
    ``` screen
    # perf record -a --call-graph fp sleep seconds
    ```
    此示例将在整个系统中生成 `perf.data`{.literal}，时间为
    `秒`{.literal}，由 `sleep`{.literal}
    命令指定。它还将使用帧指针方法捕获调用图形数据。
2.  生成包含记录数据的调试符号的归档文件：
    ``` screen
    # perf archive
    ```
:::
::: itemizedlist
**验证步骤**
-   验证归档文件是否已在当前活跃目录中生成：
    ``` screen
    # ls perf.data*
    ```
    输出将显示当前目录中以 `perf.data`{.literal}
    开头的每个文件。归档文件将命名为：
    ``` screen
    perf.data.tar.gz
    ```
    或者
    ``` screen
    perf data.tar.bz2
    ```
:::
::: itemizedlist
**其它资源**
-   [使用 perf
    记录和分析性能配置集](#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html "第 21 章 使用 perf 记录和分析性能配置集"){.link}
-   [使用 perf
    记录捕获调用图形数据](#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#capturing-call-graph-data-with-perf-record_recording-and-analyzing-performance-profiles-with-perf "使用 perf 记录捕获调用图形数据"){.link}
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#analyzing-a-perf-data-file-that-was-created-on-a-different-device_recording-and-analyzing-performance-profiles-with-perf}分析在不同设备中创建的 perf.data 文件 {.title}
:::
您可以使用 `perf`{.literal} 工具来分析不同设备上生成的
`perf.data`{.literal} 文件。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
-   使用的当前设备上会显示 `perf.data`{.literal}
    文件以及不同设备上生成的关联存档文件。
:::
::: orderedlist
**流程**
1.  将 `perf.data`{.literal} 文件复制到当前活动目录中。
2.  将归档文件提取到 `~/.debug`{.literal} 中：
    ``` screen
    # mkdir -p ~/.debug
    # tar xf perf.data.tar.bz2 -C ~/.debug
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    归档文件还可以命名为 `perf.data.tar.gz`{.literal}。
    :::
3.  打开 `perf.data`{.literal} 文件进行进一步分析：
    ``` screen
    # perf report
    ```
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#why-perf-displays-some-function-names-as-raw-function-addresses_recording-and-analyzing-performance-profiles-with-perf}为什么 perf 显示一些功能名称作为原始函数地址 {.title}
:::
对于内核函数，`perf 使用`{.literal} `/proc/kallsyms`{.literal}
文件中的信息将样本映射到对应的功能名称或符号。但是，对于在用户空间中执行的功能，您可能会看到原始功能地址，因为二进制已被剥离。
必须安装可执行文件的 `debuginfo`{.literal}
软件包；如果可执行文件是本地开发的应用程序，则必须使用打开调试信息（GCC
中的 `-g`{.literal}
选项）编译应用程序，以显示在这种情况下的功能名称或符号。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
安装与可执行文件关联的 `debuginfo`{.literal} 后，不需要重新运行
`perf 记录`{.literal} 命令。只需重新运行 `perf 报告`{.literal} 命令。
:::
::: itemizedlist
**其它资源**
-   [使用调试信息启用调试](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/enabling-debugging-with-debugging-information_debugging-applications){.link}
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#enabling-debug-and-source-repositories_recording-and-analyzing-performance-profiles-with-perf}启用 debug 和源存储库 {.title}
:::
Red Hat Enterprise Linux 的标准安装不会启用 debug
和源存储库。这些存储库包含调试系统组件和衡量其性能所需的信息。
::: itemizedlist
**流程**
-   启用源和调试信息软件包频道：
    ``` screen
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-baseos-debug-rpms
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-baseos-source-rpms
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-appstream-debug-rpms
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-appstream-source-rpms
    ```
    `$(uname -i)`{.literal} 部分会自动替换为您的系统构架的匹配值：
    ::: informaltable
      架构名称             值
      -------------------- ---------
      64 位 Intel 和 AMD   x86_64
      64-bit ARM           aarch64
      IBM POWER            ppc64le
      64-bit IBM Z         s390x
    :::
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#getting-debuginfo-packages-for-an-application-or-library-using-gdb_recording-and-analyzing-performance-profiles-with-perf}使用 GDB 为应用程序或库获取 debuginfo 软件包 {.title}
:::
调试信息需要调试信息。对于从软件包安装的代码，GNU
Debugger(GDB)会自动识别缺少的调试信息，解决软件包名称并提供了有关如何获取软件包的具体建议。
::: itemizedlist
**先决条件**
-   您要调试的应用程序或库必须安装在系统上。
-   在系统中必须安装 GDB 和 `debuginfo-install`{.literal}
    工具。详情请查看
    [设置调试应用程序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/setting-up-a-development-workstation_developing-applications#setting-up-to-debug-applications_setting-up-a-development-workstation){.link}。
-   在系统上必须配置并启用提供 ` debuginfo`{.literal} 和
    debugsource``{=html} 软件包的频道。
:::
::: orderedlist
**流程**
1.  启动附加到您要调试的应用程序或库的 GDB。GDB
    自动识别缺少的调试信息，并建议运行 命令。
    ``` screen
    $ gdb -q /bin/ls
    Reading symbols from /bin/ls...Reading symbols from .gnu_debugdata for /usr/bin/ls...(no debugging symbols found)...done.
    (no debugging symbols found)...done.
    Missing separate debuginfos, use: dnf debuginfo-install coreutils-8.30-6.el8.x86_64
    (gdb)
    ```
2.  退出 GDB: 键入 [**q**]{.keycap}，然后使用 [**Enter
    进行确认**]{.keycap}。
    ``` screen
    (gdb) q
    ```
3.  运行 GDB 建议的命令以安装所需的 `debuginfo`{.literal} 软件包：
    ``` screen
    # dnf debuginfo-install coreutils-8.30-6.el8.x86_64
    ```
    `dnf`{.literal}
    软件包管理工具提供更改摘要，要求确认，下载并安装所有必要的文件。
4.  如果 GDB 无法推荐 `debuginfo`{.literal} 软件包，请按照
    [手动为应用程序或库获取 debuginfo
    软件包](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/enabling-debugging-with-debugging-information_debugging-applications#getting-debuginfo-packages-for-an-application-or-library-manually_enabling-debugging-with-debugging-information){.link}
    的步骤进行操作。
:::
::: itemizedlist
**其它资源**
-   [Red Hat Developer Toolset
    用户指南，安装调试信息一节](https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/10/html-single/user_guide/index#sect-Red_Hat_Developer_Toolset-Install-Debugging){.link}
-   [如何下载或安装适用于 RHEL 系统的 debuginfo
    软件包？](https://access.redhat.com/solutions/9907){.link} -
    红帽知识库解决方案
:::
:::
:::
[]{#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance.html#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance}第 22 章 使用 perf 调查忙碌 CPU {.title}
:::
在调查系统上的性能问题时，您可以使用 `perf`{.literal}
工具来识别和监控最繁忙的 CPU，以专注于您的工作。
::: section
::: titlepage
# []{#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance.html#displaying-which-cpu-events-were-counted-on-with-perf-stat_investigating-busy-cpus-with-perf}使用 perf stat 显示在哪些 CPU 事件计数 {.title}
:::
您可以通过禁用 CPU 数聚合，使用 `perf stat`{.literal} 显示哪些 CPU
事件计数。您必须使用 `-a`{.literal}
标志来计算系统范围模式中的事件，才能使用此功能。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: itemizedlist
**流程**
-   计数禁用 CPU 数量聚合的事件：
    ``` screen
    # perf stat -a -A sleep seconds
    ```
    前面的示例显示一组默认通用硬件和软件事件的计数，这以秒数
    `秒`{.literal} 为单位记录，具体如使用 `sleep`{.literal}
    命令以升序表示，从 `CPU0`{.literal}
    开始。因此，指定周期等事件可能会很有用：
    ``` screen
    # perf stat -a -A -e cycles sleep seconds
    ```
:::
:::
::: section
::: titlepage
# []{#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance.html#displaying-which-cpu-samples-were-taken-on-with-perf-report_investigating-busy-cpus-with-perf}显示使用 perf 报告进行的 CPU 样本 {.title}
:::