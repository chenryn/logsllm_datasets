enabling, PE Image loading, boot application starting, hashing, launching,
exiting, and BitLocker unlocking. Each callback decides which kind of data
to hash and to extend into the TPM PCR registers. For instance, every time
the Boot Manager or the Windows Loader starts an external executable
image, it generates three measured boot events that correspond to different
phases of the Image loading: LoadStarting, ApplicationHashed, and
ApplicationLaunched. In this case, the measured entities, which are sent to
the PCR registers (11 and 12) of the TPM, are the following: hash of the
image, hash of the digital signature of the image, image base, and size.
All the measurements will be employed later in Windows when the system
is completely started, for a procedure called attestation. Because of the
uniqueness property of cryptographic hashes, you can use PCR values and
their logs to identify exactly what version of software is executing, as well as
its environment. At this stage, Windows uses the TPM to provide a TPM
quote, where the TPM signs the PCR values to assure that values are not
maliciously or inadvertently modified in transit. This guarantees the
authenticity of the measurements. The quoted measurements are sent to an
attestation authority, which is a trusted third-party entity that is able to
authenticate the PCR values and translate those values by comparing them
with a database of known good values. Describing all the models used for
attestation is outside the scope of this book. The final goal is that the remote
server confirms whether the client is a trusted entity or could be altered by
some malicious component.
Earlier we explained how the Boot Manager is able to automatically
unlock the BitLocker-encrypted startup volume. In this case, the system takes
advantage of another important service provided by the TPM: secure
nonvolatile storage. The TPM nonvolatile random access memory (NVRAM)
is persistent across power cycles and has more security features than system
memory. While allocating TPM NVRAM, the system should specify the
following:
■    Read access rights Specify which TPM privilege level, called
locality, can read the data. More importantly, specify whether any
PCRs must contain specific values in order to read the data.
■    Write access rights The same as above but for write access.
■    Attributes/permissions Provide optional authorizations values for
reading or writing (like a password) and temporal or persistent locks
(that is, the memory can be locked for write access).
The first time the user encrypts the boot volume, BitLocker encrypts its
volume master key (VMK) with another random symmetric key and then
“seals” that key using the extended TPM PCR values (in particular, PCR 7
and 11, which measure the BIOS and the Windows Boot sequence) as the
sealing condition. Sealing is the act of having the TPM encrypt a block of
data so that it can be decrypted only by the same TPM that has encrypted it,
only if the specified PCRs have the correct values. In subsequent boots, if the
“unsealing” is requested by a compromised boot sequence or by a different
BIOS configuration, TPM refuses the request to unseal and reveal the VMK
encryption key.
EXPERIMENT: Invalidate TPM measurements
In this experiment, you explore a quick way to invalidate the TPM
measurements by invalidating the BIOS configuration. Before
measuring the startup sequence, drivers, and data, Measured Boot
starts with a static measurement of the BIOS configuration (stored
in PCR1). The measured BIOS configuration data strictly depends
on the hardware manufacturer and sometimes even includes the
UEFI boot order list. Before starting the experiment, verify that
your system includes a valid TPM. Type tpm.msc in the Start
menu search box and execute the snap-in. The Trusted Platform
Module (TPM) Management console should appear. Verify that a
TPM is present and enabled in your system by checking that the
Status box is set to The TPM Is Ready For Use.
Start the BitLocker encryption of the system volume. If your
system volume is already encrypted, you can skip this step. You
must be sure to save the recovery key, though. (You can check the
recovery key by selecting Back Up Your Recovery Key, which is
located in the Bitlocker drive encryption applet of the Control
Panel.) Open File Explorer by clicking its taskbar icon, and
navigate to This PC. Right-click the system volume (the volume
that contains all the Windows files, usually C:) and select Turn On
BitLocker. After the initial verifications are made, select Let
Bitlocker Automatically Unlock My Drive when prompted on the
Choose How to Unlock Your Drive at Startup page. In this way,
the VMK will be sealed by the TPM using the boot measurements
as the “unsealing” key. Be careful to save or print the recovery key;
you’ll need it in the next stage. Otherwise, you won’t be able to
access your files anymore. Leave the default value for all the other
options.
After the encryption is complete, switch off your computer and
start it by entering the UEFI BIOS configuration. (This procedure
is different for each PC manufacturer; check the hardware user
manual for directions for entering the UEFI BIOS settings.) In the
BIOS configuration pages, simply change the boot order and then
restart your computer. (You can change the startup boot order by
using the UefiTool utility, which is in the downloadable files of the
book.) If your hardware manufacturer includes the boot order in the
TPM measurements, you should get the BitLocker recovery
message before Windows boots. Otherwise, to invalidate the TPM
measurements, simply insert the Windows Setup DVD or flash
drive before switching on the workstation. If the boot order is
correctly configured, the Windows Setup bootstrap code starts,
which prints the Press Any Key For Boot From CD Or DVD
message. If you don’t press any key, the system proceeds to boot
the next Boot entry. In this case, the startup sequence has changed,
and the TPM measurements are different. As a result, the TPM
won’t be able to unseal the VMK.
You can invalidate the TPM measurements (and produce the
same effects) if you have Secure Boot enabled and you try to
disable it. This experiment demonstrates that Measured Boot is tied
to the BIOS configuration.
Trusted execution
Although Measured Boot provides a way for a remote entity to confirm the
integrity of the boot process, it does not resolve an important issue: Boot
Manager still trusts the machine’s firmware code and uses its services to
effectively communicate with the TPM and start the entire platform. At the
time of this writing, attacks against the UEFI core firmware have been
demonstrated multiple times. The Trusted Execution Technology (TXT) has
been improved to support another important feature, called Secure Launch.
Secure Launch (also known as Trusted Boot in the Intel nomenclature)
provides secure authenticated code modules (ACM), which are signed by the
CPU manufacturer and executed by the chipset (and not by the firmware).
Secure Launch provides the support of dynamic measurements made to PCRs
that can be reset without resetting the platform. In this scenario, the OS
provides a special Trusted Boot (TBOOT) module used to initialize the
platform for secure mode operation and initiate the Secure Launch process.
An authenticated code module (ACM) is a piece of code provided by the
chipset manufacturer. The ACM is signed by the manufacturer, and its code
runs in one of the highest privilege levels within a special secure memory
that is internal to the processor. ACMs are invoked using a special GETSEC
instruction. There are two types of ACMs: BIOS and SINIT. While BIOS
ACM measures the BIOS and performs some BIOS security functions, the
SINIT ACM is used to perform the measurement and launch of the Operating
System TCB (TBOOT) module. Both BIOS and SINIT ACM are usually
contained inside the System BIOS image (this is not a strict requirement), but
they can be updated and replaced by the OS if needed (refer to the “Secure
Launch” section later in this chapter for more details).
The ACM is the core root of trusted measurements. As such, it operates at
the highest security level and must be protected against all types of attacks.
The processor microcode copies the ACM module in the secure memory and
performs different checks before allowing the execution. The processor
verifies that the ACM has been designed to work with the target chipset.
Furthermore, it verifies the ACM integrity, version, and digital signature,
which is matched against the public key hardcoded in the chipset fuses. The
GETSEC instruction doesn’t execute the ACM if one of the previous checks
fails.
Another key feature of Secure Launch is the support of Dynamic Root of
Trust Measurement (DRTM) by the TPM. As introduced in the previous
section, “Measured Boot,” 16 different TPM PCR registers (0 through 15)
provide storage for boot measurements. The Boot Manager could extend
these PCRs, but it’s not possible to clear their contents until the next platform
reset (or power up). This explains why these kinds of measurements are
called static measurements. Dynamic measurements are measurements made
to PCRs that can be reset without resetting the platform. There are six
dynamic PCRs (actually there are eight, but two are reserved and not usable
by the OS) used by Secure Launch and the trusted operating system.
In a typical TXT Boot sequence, the boot processor, after having validated
the ACM integrity, executes the ACM startup code, which measures critical
BIOS components, exits ACM secure mode, and jumps to the UEFI BIOS
startup code. The BIOS then measures all of its remaining code, configures
the platform, and verifies the measurements, executing the GETSEC
instruction. This TXT instruction loads the BIOS ACM module, which
performs the security checks and locks the BIOS configuration. At this stage
the UEFI BIOS could measure each option ROM code (for each device) and
the Initial Program Load (IPL). The platform has been brought to a state
where it’s ready to boot the operating system (specifically through the IPL
code).
The TXT Boot sequence is part of the Static Root of Trust Measurement
(SRTM) because the trusted BIOS code (and the Boot Manager) has been
already verified, and it’s in a good known state that will never change until
the next platform reset. Typically, for a TXT-enabled OS, a special TCB
(TBOOT) module is used instead of the first kernel module being loaded.
The purpose of the TBOOT module is to initialize the platform for secure
mode operation and initiate the Secure Launch. The Windows TBOOT
module is named TcbLaunch.exe. Before starting the Secure Launch, the
TBOOT module must be verified by the SINIT ACM module. So, there
should be some components that execute the GETSEC instructions and start
the DRTM. In the Windows Secure Launch model, this component is the
boot library.
Before the system can enter the secure mode, it must put the platform in a
known state. (In this state, all the processors, except the bootstrap one, are in
a special idle state, so no other code could ever be executed.) The boot
library executes the GETSEC instruction, specifying the SENTER operation.
This causes the processor to do the following:
1. 
Validate the SINIT ACM module and load it into the processor’s
secure memory.
2. 
Start the DRTM by clearing all the relative dynamic PCRs and then
measuring the SINIT ACM.
3. 
Execute the SINIT ACM code, which measures the trusted OS code
and executes the Launch Control Policy. The policy determines
whether the current measurements (which reside in some dynamic
PCR registers) allow the OS to be considered “trusted.”
When one of these checks fails, the machine is considered to be under
attack, and the ACM issues a TXT reset, which prevents any kind of software
from being executed until the platform has been hard reset. Otherwise, the
ACM enables the Secure Launch by exiting the ACM mode and jumping to
the trusted OS entry point (which, in Windows is the TcbMain function of the
TcbLaunch.exe module). The trusted OS then takes control. It can extend and
reset the dynamic PCRs for every measurement that it needs (or by using
another mechanism that assures the chain of trust).
Describing the entire Secure Launch architecture is outside the scope of
this book. Please refer to the Intel manuals for the TXT specifications. Refer
to the “Secure Launch” section, later in this chapter, for a description of how
Trusted Execution is implemented in Windows. Figure 12-7 shows all the
components involved in the Intel TXT technology.
Figure 12-7 Intel TXT (Trusted Execution Technology) components.
The Windows OS Loader
The Windows OS Loader (Winload) is the boot application launched by the
Boot Manager with the goal of loading and correctly executing the Windows
kernel. This process includes multiple primary tasks:
■    Create the execution environment of the kernel. This involves
initializing, and using, the kernel’s page tables and developing a
memory map. The EFI OS Loader also sets up and initializes the
kernel’s stacks, shared user page, GDT, IDT, TSS, and segment
selectors.
■    Load into memory all modules that need to be executed or accessed
before the disk stack is initialized. These include the kernel and the
HAL because they handle the early initialization of basic services
once control is handed off from the OS Loader. Boot-critical drivers
and the registry system hive are also loaded into memory.
■    Determine whether Hyper-V and the Secure Kernel (VSM) should be
executed, and, if so, correctly load and start them.
■    Draw the first background animation using the new high-resolution
boot graphics library (BGFX, which replaces the old Bootvid.dll
driver).
■    Orchestrate the Secure Launch boot sequence in systems that support
Intel TXT. (For a complete description of Measured Boot, Secure
Launch, and Intel TXT, see the respective sections earlier in this
chapter). This task was originally implemented in the hypervisor
loader, but it has moved starting from Windows 10 October Update
(RS5).
The Windows loader has been improved and modified multiple times
during each Windows release. OslMain is the main loader function (called by
the Boot Manager) that (re)initializes the boot library and calls the internal
OslpMain. The boot library, at the time of this writing, supports two different
execution contexts:
■    Firmware context means that the paging is disabled. Actually, it’s not
disabled but it’s provided by the firmware that performs the one-to-
one mapping of physical addresses, and only firmware services are
used for memory management. Windows uses this execution context
in the Boot Manager.
■    Application context means that the paging is enabled and provided by
the OS. This is the context used by the Windows Loader.
The Boot Manager, just before transferring the execution to the OS loader,
creates and initializes the four-level x64 page table hierarchy that will be
used by the Windows kernel, creating only the self-map and the identity
mapping entries. OslMain switches to the Application execution context, just
before starting. The OslPrepareTarget routine captures the boot/shutdown
status of the last boot, reading from the bootstat.dat file located in the system
root directory.
When the last boot has failed more than twice, it returns to the Boot
Manager for starting the Recovery environment. Otherwise, it reads in the
SYSTEM registry hive, \Windows\System32\Config\System, so that it can
determine which device drivers need to be loaded to accomplish the boot. (A
hive is a file that contains a registry subtree. More details about the registry
were provided in Chapter 10.) Then it initializes the BGFX display library
(drawing the first background image) and shows the Advanced Options menu
if needed (refer to the section “The boot menu” earlier in this chapter). One
of the most important data structures needed for the NT kernel boot, the
Loader Block, is allocated and filled with basic information, like the system
hive base address and size, a random entropy value (queried from the TPM if
possible), and so on.
OslInitializeLoaderBlock contains code that queries the system’s ACPI
BIOS to retrieve basic device and configuration information (including event
time and date information stored in the system’s CMOS). This information is
gathered into internal data structures that will be stored under the
HKLM\HARDWARE\DESCRIPTION registry key later in the boot. This is
mostly a legacy key that exists only for compatibility reasons. Today, it’s the
Plug and Play manager database that stores the true information on hardware.
Next, Winload begins loading the files from the boot volume needed to
start the kernel initialization. The boot volume is the volume that corresponds
to the partition on which the system directory (usually \Windows) of the
installation being booted is located. Winload follows these steps:
1. 
Determines whether the hypervisor or the Secure Kernel needs to be
loaded (through the hypervisorlaunchtype BCD option and the VSM
policy); if so, it starts phase 0 of the hypervisor setup. Phase 0 pre-
loads the HV loader module (Hvloader.dll) into RAM memory and
executes its HvlLoadHypervisor initialization routine. The latter loads
and maps the hypervisor image (Hvix64.exe, Hvax64.exe, or
Hvaa64.exe, depending on the architecture) and all its dependencies
in memory.
2. 
Enumerates all the firmware-enumerable disks and attaches the list in
the Loader Parameter Block. Furthermore, loads the Synthetic Initial
Machine Configuration hive (Imc.hiv) if specified by the
configuration data and attaches it to the loader block.
3. 
Initializes the kernel Code Integrity module (CI.dll) and builds the CI
Loader block. The Code Integrity module will be then shared between
the NT kernel and Secure Kernel.
4. 
Processes any pending firmware updates. (Windows 10 supports
firmware updates distributed through Windows Update.)
5. 
Loads the appropriate kernel and HAL images (Ntoskrnl.exe and
Hal.dll by default). If Winload fails to load either of these files, it
prints an error message. Before properly loading the two modules’
dependencies, Winload validates their contents against their digital
certificates and loads the API Set Schema system file. In this way, it
can process the API Set imports.
6. 
Initializes the debugger, loading the correct debugger transport.
7. 
Loads the CPU microcode update module (Mcupdate.dll), if
applicable.
8. 
OslpLoadAllModules finally loads the modules on which the NT
kernel and HAL depend, ELAM drivers, core extensions, TPM
drivers, and all the remaining boot drivers (respecting the load order
—the file system drivers are loaded first). Boot device drivers are
drivers necessary to boot the system. The configuration of these
drivers is stored in the SYSTEM registry hive. Every device driver
has a registry subkey under
HKLM\SYSTEM\CurrentControlSet\Services. For example, Services
has a subkey named rdyboost for the ReadyBoost driver, which you
can see in Figure 12-8 (for a detailed description of the Services
registry entries, see the section “Services” in Chapter 10). All the boot
drivers have a start value of SERVICE_BOOT_START (0).
9. 
At this stage, to properly allocate physical memory, Winload is still
using services provided by the EFI Firmware (the AllocatePages boot
service routine). The virtual address translation is instead managed by
the boot library, running in the Application execution context.
Figure 12-8 ReadyBoost driver service settings.
10. 
Reads in the NLS (National Language System) files used for
internationalization. By default, these are l_intl.nls, C_1252.nls, and
C_437.nls.
11. 
If the evaluated policies require the startup of the VSM, executes
phase 0 of the Secure Kernel setup, which resolves the locations of
the VSM Loader support routines (exported by the Hvloader.dll
module), and loads the Secure Kernel module (Securekernel.exe) and
all of its dependencies.
12. 
For the S edition of Windows, determines the minimum user-mode
configurable code integrity signing level for the Windows
applications.
13. 
Calls the OslArchpKernelSetupPhase0 routine, which performs the
memory steps required for kernel transition, like allocating a GDT,
IDT, and TSS; mapping the HAL virtual address space; and allocating
the kernel stacks, shared user page, and USB legacy handoff. Winload
uses the UEFI GetMemoryMap facility to obtain a complete system
physical memory map and maps each physical page that belongs to
EFI Runtime Code/Data into virtual memory space. The complete
physical map will be passed to the OS kernel.
14. 
Executes phase 1 of VSM setup, copying all the needed ACPI tables
from VTL0 to VTL1 memory. (This step also builds the VTL1 page
tables.)
15. 
The virtual memory translation module is completely functional, so
Winload calls the ExitBootServices UEFI function to get rid of the
firmware boot services and remaps all the remaining Runtime UEFI
services into the created virtual address space, using the
SetVirtualAddressMap UEFI runtime function.
16. 
If needed, launches the hypervisor and the Secure Kernel (exactly in
this order). If successful, the execution control returns to Winload in
the context of the Hyper-V Root Partition. (Refer to Chapter 9,
“Virtualization technologies,” for details about Hyper-V.)
17. 
Transfers the execution to the kernel through the
OslArchTransferToKernel routine.
Booting from iSCSI
Internet SCSI (iSCSI) devices are a kind of network-attached storage in that
remote physical disks are connected to an iSCSI Host Bus Adapter (HBA) or
through Ethernet. These devices, however, are different from traditional
network-attached storage (NAS) because they provide block-level access to
disks, unlike the logical-based access over a network file system that NAS