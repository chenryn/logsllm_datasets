）
VALUES
（
$insertvaluesql
）
"
，
$silent
？
'SILENT'
：
''
）；
if
（
$returnid &&
！
$replace
）
{return $db->insert_id
（）；
}else {return $state
；
}
}
再往下走则是wheresql（）函数，是SQL语句查询的Where条件拼接的地方，我们可以看到参数都使用了单引号进行包裹，代码如下：
function wheresql
（
$wherearr=''
）
{
      $wheresql=""
；
      if
（
is_array
（
$wherearr
））
      {
      $where_set=' WHERE '
；
            foreach
（
$wherearr as $key => $value
）
            {
            $wheresql .=$where_set. $comma.$key.'="'.$value.'"'
；
            $comma = ' AND '
；
            $where_set=' '
；
            }
      }
      return $wheresql
；
}
还有一个访问令牌生成的函数asyn_userkey（），拼接用户名、密码salt以及密码进行一次md5，访问的时候只要在GET参数key的值里面加上生成的这个key即可验证是否有权限，被用在注册、找回密码等验证过程中，也就是我们能看到的找回密码链接里面的key，代码如下：
function asyn_userkey
（
$uid
）
{
      global $db
；
      $sql = "select * from ".table
（
'members'
）
." where uid = '".intval
（
$uid
）
."' LIMIT 1"
；
      $user=$db->getone
（
$sql
）；
      return md5
（
$user['username'].$user['pwd_hash'].$user['password']
）；
}
同目录下的文件如图3-10所示。
图 3-10
图中是具体功能的实现代码，我们这时候还不需要看，先了解下程序的其他结构。
3.2.1.3 查看配置文件
接下来我们找找配置文件，上面我们介绍到配置文件的文件名通常都带有“config”这样的关键字，我们只要搜索带有这个关键字的文件名即可，如图3-11所示。
在搜索结果中我们可以看到搜索出来多个文件，结合文件所在目录这个经验可以判断出data目录下面的config.php以及cache_config.php才是真正的配置文件，打开/data/config.php查看代码，如下所示：
图 3-11
很明显看到，很有可能存在我们之前说过的双引号解析代码执行的问题，通常这个配置是在安装系统的时候设置的，或者后台也有设置的地方。另外我们还应该记住的一个点是QISHI_DBCHARSET常量，这里配置的数据库编码是GBK，也就可能存在宽字节注入，不过需要看数据库连接时设置的编码，不妨找找看，找到骑士cms连接MySQL的代码在include\mysql.class.php文件的connect（）函数，代码如下：
function connect
（
$dbhost
，
$dbuser
，
$dbpw
，
$dbname = ''
，
$dbcharset = 'gbk'
，
$connect=1
）
{
      $func = empty
（
$connect
）
？
'mysql_pconnect'
：
'mysql_connect'
；
      if
（！
$this->linkid = @$func
（
$dbhost
，
$dbuser
，
$dbpw
，
true
））
{
         $this->dbshow
（
'Can not connect to Mysql
！
'
）；
      } else {
         if
（
$this->dbversion
（）
> '4.1'
）
{
            mysql_query
（
"SET NAMES gbk"
）；
            if
（
$this->dbversion
（）
> '5.0.1'
）
{
               mysql_query
（
"SET sql_mode = ''"
，
$this->linkid
）；
               mysql_query
（
"SET character_set_connection=".$dbcharset."
，
character_set_results=".$dbcharset."
，
character_set_client=binary"
，
$this-> linkid
）；
             }
         }
      }
      if
（
$dbname
）
{
         if
（
mysql_select_db
（
$dbname
，
$this->linkid
）
===false
）
{
            $this->dbshow
（
"Can't select MySQL database
（
$dbname
）！
"
）；
         }
      }
}
这段代码里面有个关键的地方，见加粗代码，这里存在安全隐患。
代码首先判断MySQL版本是否大于4.1，如果是则执行如下代码：
mysql_query
（
"SET NAMES gbk"
）；
执行这个语句之后再判断，如果大于5则执行如下代码：
mysql_query
（
"SET character_set_connection=".$dbcharset."
，
    haracter_set_results=".$dbcharset."
，
character_set_client=binary"
，
    $this->linkid
）；
也就是说在MySQL版本小于5的情况下是不会执行这行代码的，但是执行了“set names gbk”，我们在之前介绍过“set names gbk”其实干了三件事，等同于：
SET character_set_connection=
’
gbk
’，
haracter_set_results=
’
gbk
’，
    character_set_client=
’
gbk
’
因此在MySQL版本大于4.1小于5的情况下，基本所有跟数据库有关的操作都存在宽字节注入。
3.2.1.4 跟读首页文件
通过对系统文件大概的了解，我们对这套程序的整体架构已经有了一定的了解，但是还不够，所以我们得跟读一下index.php文件，看看程序运行的时候会调用哪些文件和函数。
打开首页文件index.php可以看到如下代码：
if
（！
file_exists
（
dirname
（
__FILE__
）
.'/data/install.lock'
））
    header
（
"Location
：
install/index.php"
）；
define
（
'IN_QISHI'
，
true
）；
$alias="QS_index"
；
require_once
（
dirname
（
__FILE__
）
.'/include/common.inc.php'
）；
首先判断安装锁文件是否存在，如果不存在则跳转到install/index.php，接下来是包含/include/common.inc.php文件，跟进该文件查看：
require_once
（
QISHI_ROOT_PATH.'data/config.php'
）；
header
（
"Content-Type
：
text/html
；
charset=".QISHI_CHARSET
）；
require_once
（
QISHI_ROOT_PATH.'include/common.fun.php'
）；
require_once
（
QISHI_ROOT_PATH.'include/74cms_version.php'
）；
/include/common.inc.php文件在开头包含了三个文件，data/config.php为数据库配置文件，include/common.fun.php文件为基础函数库文件，include/74cms_version.php为应用版本文件。接着往下看：
if
（！
empty
（
$_GET
））
{
$_GET  = addslashes_deep
（
$_GET
）；
}
if
（！
empty
（
$_POST
））
{
$_POST = addslashes_deep
（
$_POST
）；
}
$_COOKIE   = addslashes_deep
（
$_COOKIE
）；
$_REQUEST  = addslashes_deep
（
$_REQUEST
）；
这段代码调用了include/common.fun.php文件里面的addslashes_deep（）函数对GET/POST/COOKIE参数进行了过滤，再往下走可以看到又有一个包含文件的操作：