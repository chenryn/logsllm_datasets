title:Post-quantum WireGuard
author:Andreas H&quot;ulsing and
Kai-Chun Ning and
Peter Schwabe and
Florian Weber and
Philip R. Zimmermann
0
3
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Post-quantum WireGuard
Andreas Hülsing
Eindhoven University of Technology
The Netherlands
PI:EMAIL
Kai-Chun Ning
KPN B.V.
The Netherlands
PI:EMAIL
Peter Schwabe
Max Planck Institute for Security and Privacy, Germany &
Radboud University, The Netherlands
PI:EMAIL
Florian Weber
Philip R. Zimmermann
Eindhoven University of Technology
Delft University of Technology & KPN B.V.
The Netherlands
mail@ﬂorianjw.de
The Netherlands
PI:EMAIL
Abstract—In this paper we present PQ-WireGuard, a post-
quantum variant of the handshake in the WireGuard VPN
protocol (NDSS 2017). Unlike most previous work on post-
quantum security for real-world protocols, this variant does not
only consider post-quantum conﬁdentiality (or forward secrecy)
but also post-quantum authentication. To achieve this, we replace
the Difﬁe-Hellman-based handshake by a more generic approach
only using key-encapsulation mechanisms (KEMs). We establish
security of PQ-WireGuard, adapting the security proofs for
WireGuard in the symbolic model and in the standard model to
our construction. We then instantiate this generic construction
with concrete post-quantum secure KEMs, which we carefully
select
to achieve high security and speed. We demonstrate
competitiveness of PQ-WireGuard presenting extensive bench-
marking results comparing to widely deployed VPN solutions.
I. INTRODUCTION
WireGuard is a VPN protocol presented by Donenfeld
in [1]. It combines modern cryptographic primitives with a
simple design derived from the Noise framework [2], a very
small codebase, and very high performance.
These properties are achieved partially because WireGuard
is “cryptographically opinionated” [1]: instead of supporting
multiple cipher suites, WireGuard ﬁxes X25519 [3]1 for
elliptic-curve Difﬁe-Hellman key exchange, Blake2 [4] for
hashing, and ChaCha20-Poly1305 [5], [6], [7] for authenti-
cated encryption. Not only are those primitives known for
their outstanding software performance, ﬁxing those primitives
eliminates the need for an algorithm-negotiation phase, which
keeps the protocol simple and its codebase small, and avoids
any potential negotiation attacks. Also, high performance is
achieved by implementing the protocol in the Linux kernel
space, which eliminates the need for moving data between
user and kernel space.
In addition to its superior performance and small codebase,
WireGuard was designed to provide security properties that are
not supported by other VPN software, e.g., identity hiding, and
DoS-attack mitigation. The security considerations that lead to
Author
list
in alphabetical order; see https://www.ams.org/profession/
leaders/culture/CultureStatement04.pdf.
1For naming of X25519, see https://mailarchive.ietf.org/arch/msg/cfrg/
-9LEdnzVrE5RORux3Oo_oDDRksU.
the design of WireGuard are laid out in [1]. Donenfeld and
Milner give a computer-veriﬁed proof of the protocol in the
symbolic model in [8]. In [9] Dowling and Paterson present
a computational proof of the WireGuard handshake with an
additional key-conﬁrmation message.
Given its properties it is thus not surprising to see that
WireGuard is becoming increasingly popular. For example,
CloudFlare is working on “BoringTun”, a WireGuard-based
userspace VPN solution written in Rust [10]. Torvalds called
WireGuard’s codebase a “work of art” compared to OpenVPN
and IPsec and advocated for its inclusion in Linux [11].
WireGuard is scheduled to become part of the next mainline
Linux kernel (version 5.6).
As WireGuard aims to be the next-generation VPN protocol,
it is natural to see that security against quantum attackers
played a role in its design as well, albeit a small one.
Speciﬁcally, it allows users to include a symmetric shared
key into the handshake, which protects against an attacker
who records handshake transcripts now and attacks them in
the future with a quantum computer [1, Sec. V.B]. Post-
quantum asymmetric schemes are explicitly declared as “not
practical for use here” by Donenfeld and are thus not included
in the handshake. Recently, Appelbaum, Martindale, and Wu
took another look at post-quantum security of WireGuard and
proposed a small tweak to the protocol that aims at protecting
against pretty much the same future quantum attacker with
recorded transcripts [12], but without requiring a long-term
secure pre-shared key. The tweak assumes that public keys
are typically not actually known to the attacker. If this is the
case, then transmitting the hash of the public key instead of
the public key itself prevents a future quantum attacker from
ever learning the public key and thus from computing the
corresponding secret key.
A. Contributions of this paper.
In this paper we present PQ-WireGuard, a post-quantum
variant of the WireGuard handshake protocol. Unlike the
mitigation techniques described above and unlike various
earlier works aiming at transitioning protocols to post-quantum
security, we do not only aim for conﬁdentiality against quan-
tum attackers, but target full post-quantum security including
© 2021, Andreas Hülsing. Under license to IEEE.
DOI 10.1109/SP40001.2021.00030
304
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
authentication. The main design goal of PQ-WireGuard is to
stay as close as possible to the original WireGuard protocol
in terms of security and performance characteristics,
i.e.,
PQ-WireGuard should
• achieve all the security properties of WireGuard, but now
also resist attacks using a large-scale quantum computer;
• make a concrete choice of high-security, efﬁcient cryp-
tographic primitives instead of including an algorithm
negotiation phase;
• ﬁnish the handshake in just one round trip;
• ﬁt each of the two handshake messages into just one
unfragmented IPv6 packet of at most 1280 bytes; and
• achieve much higher computational performance than
other VPN solutions such as IPsec or OpenVPN.
PQ-WireGuard manages to tick all these boxes and thus shows
that the assessment from the original WireGuard paper stating
that post-quantum security is “not practical for use here” is no
longer correct.
From Difﬁe-Hellman to KEMs. The original WireGuard pro-
tocol is heavily based on (non-interactive) Difﬁe-Hellman key
exchange, which is not easy to replace straight-forwardly
with post-quantum primitives. The only somewhat practical
post-quantum non-interactive key exchange is CSIDH [13],
which is both very young and rather inefﬁcient. Furthermore,
the security of concrete CSIDH parameters is still heavily
debated [14], [15], [16], [17]. We therefore take a different ap-
proach and ﬁrst transform the WireGuard protocol to a version
using only interactive key-encapsulation mechanisms (KEMs).
This approach is based on the KEM-based authenticated key
exchange described in [18].
Security. Security of WireGuard is supported by the symbolic
proof of Donenfeld and Milner [8] and the computational
proof by Dowling and Paterson [9]. The symbolic proof covers
more security properties than the computational proof and is
computer veriﬁed. However, a correct computational proof
gives stronger security guarantees as the proof makes less
idealizing assumptions. We adapt both proofs to the case of
PQ-WireGuard and thereby establish the same level of security
guarantees as WireGuard. On the way, we point out (and ﬁx)
a few small mistakes in the computational proof. In order
to allow for a standalone proof of the handshake we add
an explicit key conﬁrmation message to the PQ-WireGuard
handshake as suggested in [9].
A concrete instantiation. The generic KEM-based approach
allows us in principle to use any post-quantum KEM submitted
to the NIST post-quantum project as a proposal for future
standardization2. Now the main challenge becomes one of
public-key and ciphertext sizes: WireGuard operates over UDP
and the existing codebase assumes that all handshake messages
ﬁt into one unfragmented IPv6 packet. The reason for this
requirement is that increasing the number of packets in a
handshake would make the state machine of the protocol more
complex and contradict WireGuard’s aim for simplicity in both
protocol design and codebase. Fragmenting and reassembling
IPv6 packets comes with various issues. For example a denial-
of-service (DoS) attack can ﬁll up the reassembly buffer with
fragments of packets that are never completed. This is just
one example of IP fragmentation attacks [19]. To prevent
such attacks, some ﬁrewalls drop fragmented IPv6 packets,
so avoiding fragmentation ensures that the protocol remains
robust against such ﬁrewall conﬁgurations.
IPv6 packets are guaranteed not to be fragmented as long as
they do not exceed 1280 bytes [20]. With the IPv6 header oc-
cupying 40 bytes and the UDP header occupying 8 bytes, there
are 1232 bytes left for the content of handshake messages.
In both, initiation message and response, those 1232 bytes
need to ﬁt several MACs and protocol-speciﬁc ﬁelds alongside
a public key and a ciphertext (for the initiator’s packet)
respectively two ciphertexts (for the responder’s packet). For
some of the schemes proposed to NIST, this is not much of a