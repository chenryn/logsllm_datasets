### pg_rewind: A Tool for Efficiently Reverting PostgreSQL Masters

#### Author: Heikki Linnakangas

**Overview:**
pg_rewind is a powerful utility in PostgreSQL that allows you to efficiently revert a failed master to a standby role. This document provides a detailed explanation of how pg_rewind works, its use cases, and best practices.

#### Typical Setup
- **Master:** The primary database server.
- **Standby:** A replica of the master, used for high availability and read scaling.
- **Streaming Replication:** Continuous data replication from the master to the standby.

#### Catastrophic Scenario
- **Master Failure:** The master server fails, and the standby takes over as the new master.
- **Old Master Recovery:** The old master recovers but needs to be synchronized with the new master.

#### How to Turn the Old Master into a Standby
- **Initial Attempt:** Simply creating a `recovery.conf` file on the old master pointing to the new master will not work. This can lead to corruption because the old master's timeline history does not match the new master's.
- **Correct Approach:** Use `pg_rewind` to synchronize the old master with the new master.

#### WAL Timelines
- **TLI 1 (Timeline 1):** Initial timeline where both master and standby were in sync.
- **TLI 2 (Timeline 2):** New timeline created after the failover.
- **Lost Transactions:** Transactions committed on the old master but not replicated to the standby before the failover.

#### Synchronous Replication Considerations
- **Commit Synchronization:** Only commits are synchronized, and records may hit the disk on the master before being replicated.
- **Challenges:** Verifying that the standby has all the WAL and resynchronizing after a controlled failover can be tricky.

#### Solutions for Resynchronization
1. **Rebuild from Scratch:**
   - **Steps:**
     - Erase the old master.
     - Take a new base backup from the new master.
     - Copy the backup to the old master.
   - **Drawbacks:**
     - Slow process.
     - Involves reading, sending, and writing all data.

2. **rsync:**
   - **Steps:**
     - Call `pg_start_backup()` on the new master.
     - Use rsync to resynchronize the data directory.
     - Be cautious with rsync options.
   - **Drawbacks:**
     - Still slow.
     - Reads all data from disk.

3. **pg_rewind:**
   - **Advantages:**
     - Fast.
     - Only reads and copies data that was changed.
   - **Terminology:**
     - **Source:** New master (not modified).
     - **Target:** Old master (overwritten with data from the source).

#### How pg_rewind Works
1. **Determine Point of Divergence:**
   - Compares the `pg_control` file on both systems to find the point where they diverged.
2. **Scan the Old WAL:**
   - Builds a list of blocks that were changed on TLI 1 (lost transactions).
3. **Copy Changed Blocks:**
   - Copies everything except blocks of relation files that were not modified.
   - Includes configuration files, FSM, VM files, etc.
4. **Reset the Control File:**
   - Starts recovery from the point of divergence, not from a later checkpoint.
5. **Replay New WAL:**
   - On first startup, replays the new WAL to bring the target up to date.

#### Usage
- **Command:**
  ```sh
  pg_rewind [OPTION]...
  ```
- **Options:**
  - `-D, --target-pgdata=DIRECTORY`: Existing data directory to modify.
  - `--source-pgdata=DIRECTORY`: Source data directory to sync with.
  - `--source-server=CONNSTR`: Source server to sync with.
  - `-P, --progress`: Write progress messages.
  - `-n, --dry-run`: Stop before modifying anything.
  - `--debug`: Write a lot of debug messages.
  - `-V, --version`: Output version information, then exit.
  - `-?, --help`: Show help, then exit.

#### Example
```sh
$ pg_rewind --source-server="host=localhost port=5433 dbname=postgres" --target-pgdata=data-master
The servers diverged at WAL position 0/3000060 on timeline 1.
Rewinding from last common checkpoint at 0/2000060 on timeline 1.
Done!
```

#### Example with Progress
```sh
$ pg_rewind --progress --source-server="host=localhost port=5433 dbname=postgres" --target-pgdata=data-master
connected to remote server
The servers diverged at WAL position 0/3000060 on timeline 1.
Rewinding from last common checkpoint at 0/2000060 on timeline 1.
reading source file list
reading target file list
reading WAL in target
Need to copy 51 MB (total source directory size is 67 MB)
53071/53071 kB (100%) copied
creating backup label and updating control file
Done!
```

#### Clean Failover Example
```sh
$ pg_rewind --source-server="host=localhost port=5433 dbname=postgres" --target-pgdata=data-master
The servers diverged at WAL position 0/4000098 on timeline 1.
No rewind required.
```

#### Caveats
- **wal_log_hints=on**: Must be set in `postgresql.conf` before the failure or use checksums (`initdb -k`).
- **WAL Availability**: All WAL needs to be available in the `pg_xlog` directories.

#### More Use Cases
- **Synchronize New Master to Old Master:** Reverse synchronization.
- **Synchronize a Second Standby:** After a failover.
- **Rewind to an Earlier Base Backup:** (Not fully tested yet).

#### Design Goals
- **Safety:**
  - Gracefully exits without modifying the target if rewind is not possible.
  - Dry-run mode.
  - Unrecognized files are copied in full.
- **Ease of Use:**
  - Simple and intuitive command-line interface.
- **Speed:**
  - Faster than reading through all data.

#### In PostgreSQL 9.5
- **Included in PostgreSQL 9.5.**
- **Location:** `src/bin/pg_rewind`.
- **WAL Record Format Changes:** To support pg_rewind and other features.

#### Stand-alone Versions
- **For 9.3 and 9.4:**
  - Available at: [https://github.com/vmware/pg_rewind](https://github.com/vmware/pg_rewind)
  - PostgreSQL-licensed.

#### Future Development
- **Smarter Copying:**
  - Use Free Space Maps, Visibility Maps, and other metadata to optimize copying.
- **Checksums:**
  - Use checksums to skip unchanged parts when copying whole files.
- **Timeline Switches:**
  - Support for using pg_rewind when there have been timeline switches in the target.

#### Acknowledgments
- Thanks to Michael Paquier and everyone else involved!

#### Questions?
- Feel free to ask any questions.

Thank you!