### Optimized Text

#### Server’s Finished Message
The server's Finished message consists of a Message Authentication Code (MAC) over the entire handshake, using a handshake key derived from the Diffie-Hellman (DH) key shares. If the client receives a request for authentication, it either sends its own certificate (Certificate) and a signature on the entire handshake up to that point (CertificateVerify), or a blank certificate indicating no authentication. Similar to the server, the client's Finished message is also a MAC over the entire handshake, using a handshake key derived from the DH key shares. The purpose of the Finished messages is to ensure the integrity of the handshake and confirm the keys.

#### Client Key Share and HelloRetryRequest
If the client does not provide an appropriate key share in its first flight (e.g., suggesting groups that are unacceptable to the server), the server sends a HelloRetryRequest message to prompt the client to generate a new key share. Upon receiving this message, the client should send a newly generated key share. These messages are indicated by dashed arrows in Figure 2. If no common parameters can be agreed upon, the server will send a `handshake_failure` or `insufficient_security` alert, and the session will be terminated.

#### 0-RTT Handshake
Following the initial handshake, where the server provides the client with a semi-static (EC)DH share, the client can use this share to encrypt early data. Figure 3 illustrates the 0-RTT handshake. The client's EarlyDataIndication value signals a 0-RTT handshake, which the server can choose to ignore (in which case the server will not process the early data, and a 1-RTT handshake will follow). Braces of the type ( ) indicate encryption under the early traffic keys derived from the server’s semi-static key share and the client’s ephemeral key share.

#### Key Computation Hierarchy
Another input to the HKDF (HMAC-based Key Derivation Function) is the `handshake_hash`, which is a hash of all the handshake messages up to the present time, excluding the Finished messages. The final value of the `handshake_hash` is called the `session_hash`. This ensures that the session keys established are cryptographically bound to both of the shared secrets negotiated and rely on both parties having a matching view of the handshake transcript.

#### New Handshake Modes in TLS 1.3
Some of the most significant changes in TLS 1.3 are due to the newly introduced handshake mechanisms. Here is a brief overview of these different modes, starting with the regular, initial handshake.

**Initial (EC)DHE Handshake:**
- The solid message flows in Figure 2 represent this handshake.
- Every protocol message followed by an asterisk can be omitted if only unilateral (server) authentication is required.
- Braces of the type { } indicate encryption under the handshake traffic keys, whereas braces of the type [ ] indicate encryption under the application traffic keys.

**Handshake Process:**
- The client sends a server an offer of cryptographic parameters, including a client nonce, and freshly generated Diffie-Hellman (DH) key shares along with the associated set of groups (ClientHello, ClientKeyShare).
- The server responds with its choice of cryptographic parameters, including a server nonce and a selected group from those offered by the client (ServerHello).
- The server also sends its own freshly generated DH key share (ServerKeyShare), extensions not used for key establishment (EncryptedExtensions), and an optional semi-static (EC)DH key share for future handshakes (ServerConfiguration).
- Additionally, the server includes its public key certificate for authentication purposes (Certificate) and an optional request for the client’s certificate if mutual authentication is required (CertificateRequest).

**PSKs and Session Resumption:**
- TLS 1.3 merges the PSK and session resumption functionalities of TLS 1.2 into a single handshake mode.
- There are two possible sources of PSKs: session tickets and out-of-band mechanisms.
- Figure 4 depicts a PSK handshake following an initial handshake, where a new session ticket is sent by the server directly after receiving the client’s Finished message in the initial handshake.

**Security Properties:**
- The TLS record protocol provides confidentiality and integrity of application data.
- The TLS handshake protocol allows unilateral or, optionally, mutual entity authentication, and establishes a shared secret unavailable to eavesdroppers and adversaries.
- The security properties include:
  - Unilateral authentication of the server (mandatory),
  - Mutual authentication (optional),
  - Confidentiality and perfect forward secrecy of session keys,
  - Integrity of handshake messages.

**Caveats:**
- 0-RTT application data and possible client authentication come with warnings. In the 0-RTT handshake, the client is the only party to have provided freshness, so early data messages may be replayed.
- The security of early data depends on the semi-static (EC)DH share, which may have a considerable validity period, making it less forward secure.

#### Formal Modeling of the Protocol Behavior
We build a formal model of the handshake and record protocols of draft-10 in the Tamarin prover framework. Tamarin is well-suited for this analysis due to its multiset-rewriting semantics, support for Diffie-Hellman key exchange, and property specification language.

**Tamarin Fundamentals:**
- **Rules:** Tamarin rules encode the behavior of participants and adversarial capabilities. Each rule has premises, actions, and conclusions.
- **Cryptographic Primitives:** Tamarin models cryptographic primitives using built-in definitions for symmetric encryption, asymmetric encryption, digital signatures, and hashing.
- **Security Properties as Lemmas:** Tamarin formulas are specified in a fragment of first-order logic, allowing for the definition of security properties.

**Constructing a Protocol Abstraction:**
- We construct an abstraction of the handshake and record protocols, balancing accuracy and simplicity.
- **Perfect Cryptography:** We assume perfect cryptography, where encryption reveals nothing about the plaintext, signatures are unforgeable, hash functions act as random oracles, MACs are unforgeable, and all parties generate truly random values.
- **Configuration Parameters:** We simplify the model by treating certain parameters as abstract quantities.

This optimized text aims to provide a clear, coherent, and professional explanation of the TLS 1.3 handshake and related concepts.