### 4) Execution Cost
The combination of the factors discussed can generate a large set of inputs. For some systems, executing all these inputs may be prohibitively expensive. The trade-off between running time and coverage is a well-known issue. In this paper, the inputs for all experiments were generated by generalizing the example interaction scripts provided with each system's documentation. Based on the available scripts and documentation, we identified the main degrees of freedom and aimed to sweep through each dimension as uniformly as possible, while ensuring that the total execution time of the Cartesian product remained within our resource constraints.

The size of our input suites varies across applications, as some applications take up to two orders of magnitude longer to execute each interaction compared to others. Additionally, the number of parameters differs among applications due to varying orthogonal degrees of freedom. When multiple applications were executed for the same secret, we used the same input suite for all applications.

### Trace Alignment Parameters
When aligning biological sequences, MSA (Multiple Sequence Alignment) tools are sensitive to parameter tuning. Our data often contains arbitrarily long unalignable regions, so we configured MAFFT with the following settings: `–genafpair –maxiter 1000 –op 1.5 –ep 0.0`, as recommended by its developers for such cases. All other parameters were left at their default values.

### Phase Detection Parameters
We used the following parameters for phase detection:
- ω = 3 (minimum stable phase width)
- ψ = 0.25 (maximum stable column diversity)
- A maximum of 1000 traces for the subset sent to MAFFT for alignment

For input suites with fewer than 1000 traces (see Table IV), external alignment was sufficient. For larger input suites, the traces that did not parse due to anomalies (see Section IV-B) were always less than 1%.

### Comparison with Leakiest
We used the leakage quantification tool, Leakiest [14], to compare with our methods. Leakiest computes mutual information between an observable feature and a secret from a set of samples. We provided Leakiest with the same feature-secret pairs as in our methods. We used Leakiest in its discrete probability estimation mode for space features [10] and continuous probability estimation for time features [13] to calculate \( p(y|x) \) and information leakage estimates.

### Histogram-based Leakage Parameters
For space-based side-channel analyses, we used a bin size of 5, and for time-based side-channel analyses, a bin size of 0.001.

### Implementation Details
Proﬁt consists of approximately 3,000 lines of Python code and 400 lines of Mathematica code. It uses Scapy [6] for capturing network packets, Scipy [31] and Scikit-learn [39] for computing information leakage, Matplotlib [29] for plotting probability densities, and MAFFT [32] for trace alignment. We used Mathematica to prototype the trace alignment module and generate trace alignment visualizations.

### C. Experimental Results
In this section, we discuss our results and findings on the DARPA STAC benchmark.

#### Comparison of Different Leakage Estimation Approaches
Figure 10 shows the leakage results for three AIRPLAN applications using both Gaussian and histogram-based estimation with various bin sizes. Gaussian estimation yields 100%, 25%, and 79% for the three AIRPLAN applications. The histogram-based estimation results vary with different bin sizes, with overfitting occurring at the smallest bin size and underfitting at the largest bin size. If the feature is assumed to follow a Gaussian distribution, fixing the bin size based on one application either overestimates or underestimates the leakage for other applications. Changing the bin size produces different leakage values, making the results meaningless unless the most accurate bin size is known in advance.

Table VI presents the leakage results for all applications using Gaussian, histogram-based estimation with specific bin sizes, and estimation using Leakiest on the best manually found feature. For AIRPLAN 2, AIRPLAN 3, and their variants, the calculated leakage for all three approaches is over 95% for vulnerable variants and under 91% for non-vulnerable variants. For SNAPBUDDY, both Gaussian and histogram-based approaches reported leakage, but Leakiest reported 0% for the best feature. For another feature, it reported 18% leakage, which is the best result it could find. This result is attributed to Leakiest requiring a high number of samples per secret to be confident of the leakage. With a low number of samples, it underestimates the leakage.

For BIDPAL and POWERBROKER, in the presence of a vulnerability, Gaussian-based estimation underestimates the leakage, while the histogram-based method reports high leakage. In the absence of a vulnerability, the histogram-based method overestimates the leakage, reporting over 90% leakage. We attribute the lower-than-expected leakage reported by Gaussian to the low number of samples, where the estimated mean and variance are not fully accurate. Leakiest reported that it could not run due to a low number of samples per secret. For all GABFEED variants and TOURPLANNER, all three approaches report similar leakages.

#### Example of Proﬁt Output
Table VIII shows a ranking returned by Proﬁt, listing the top-leaking features and ranking them according to the amount of information they leak.

#### Comparison of Best Feature and Top Feature Reported by Proﬁt
Table VII summarizes the results returned by Proﬁt for each group of applications associated with a particular side-channel vulnerability. Each group begins with the vulnerable application, followed by other applications where the vulnerability has been mitigated or eliminated. For each application, we show the secret leaked by the known vulnerability, the type of vulnerability (in space or time), and whether the vulnerability is present. On the right side, we show the results returned by Proﬁt. The "Best feature" column shows the manually found best feature, and the "LeakG" column shows the percentage of information leakage computed by Proﬁt using Gaussian-based probability estimation for that feature. We chose Gaussian-based estimation for the reasons described in Section VI-C. Finally, the "Top feature" column shows the feature that appears at the top of Proﬁt’s ranking (or the most specific one in the event of a tie).

#### Results for Vulnerable Applications
In 6 out of 7 cases, the best feature that most closely leads to the vulnerability appeared at the very top of Proﬁt’s ranking. In all cases, it appeared within the top-five. For vulnerabilities that fully leak the secret, Proﬁt computed a leakage of 95% or more, except for BIDPAL, POWERBROKER 1, and TOURPLANNER. For BIDPAL and POWERBROKER 1, a larger number of samples per input would be needed to compensate for noise, but this was difficult to obtain due to the long execution times. For TOURPLANNER, Proﬁt identified all four relevant time-deltas, which appeared within the top-ten with leakages of about 14% to 16% each. As mentioned in Section VI-A, higher leakage (above 50%) can be achieved by considering all four deltas together as a multi-dimensional feature, but this is beyond the current version of Proﬁt. Notably, Proﬁt correctly inferred that the sum of the four deltas (i.e., the total duration of the phase that isolated them) yielded greater leakage than any individual delta and reported this feature at the top of the ranking.

#### Results for Groups of Vulnerable and Non-Vulnerable Applications
For all application groups, as the vulnerability is mitigated or removed, the leakage computed by Proﬁt decreases significantly and in the correct relative proportion. While we cannot guarantee exact leakages (as they depend on the input suite), the computed leakages are consistent with the known facts about the different DARPA STAC applications and their present and absent vulnerabilities. In 8 out of 13 cases, the top feature reported by Proﬁt is indeed the best feature, and in all other cases, the top feature reported was not significantly higher (in rank or leakage) than the best one.

### VII. Limitations
#### Quality of the Profiling-Input Suite
The most important limitation of our approach is the quality of the leakage quantifications, which depends on the input suite. Users should keep this in mind when interpreting the results.