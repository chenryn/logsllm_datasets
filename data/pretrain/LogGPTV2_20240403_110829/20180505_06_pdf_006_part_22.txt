table to the role:
CREATE ROLE hr_role;
GRANT SELECT, INSERT,DELETE on hr.employees to hr_role;
Typically, a role being used as a group of permissions would not have the attribute, as with the
LOGIN
example above.
Comparing Oracle to PostgreSQL database roles
Description Oracle PostgreSQL
List all roles SELECT * FROM dba_roles; SELECT * FROM pg_roles;
Create a new role CREATE ROLE c##common_role; CREATE ROLE test_role;
Or
CREATE ROLE local_role1;
Grant one role privilege GRANT local_role1 TO grant myrole1 to myrole2;
to another database role local_role2;
Grant privileges on a GRANT CREATE TABLE TO GRANT create ON DATABASE
database object to a local_role; postgresdb to test_user;
database role
Grant DML permissions GRANT INSERT, DELETE ON GRANT INSERT, DELETE ON
on a database object to a hr.employees to myrole1; hr.employees to myrole1;
role
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createrole.html
270
Migrating from: Oracle V$ Views and the Data Dictionary
[Back to TOC]
Overview
Oracle provides several built-in views that are used to monitor the database and query its operational state.
These views can be used to track the status of the database, view information about database schema objects
and more.
The data dictionary is a collection of internal tables and views that supply information about the state and
operations of the Oracle database including: database status, database schema objects (tables, views,
sequences, etc.), users and security, physical database structure (datafiles), and more. The contents of the
data dictionary are persistent to disk.
Examples for data dictionary views include:
• DBA_TABLES – information about all of the tables in the current database.
• DBA_USERES – information about all the database users.
• DBA_DATA_FILES – information about all of the physical datafiles in the database.
• DBA_TABLESPACES – information about all tablespaces in the database.
• DBA_TABLES – information about all tables in the database.
• DBA_TAB_COLS – information about all columns, for all tables, in the database.
Note: data dictionary view names can start with depending on the level and
DBA_*, ALL_*, USER_* ,
scope of information presented (user-level versus database-level).
For the complete list of dba_* data dictionary views:
https://docs.oracle.com/database/121/nav/catalog_views-dba.htm
Dynamic performance views (V$ Views) are a collection of views that provide real-time monitoring
information about the current state of the database instance configuration, runtime statistics and operations.
These views are continuously updated while the database is running.
Information provided by the dynamic performance views includes session information, memory usage,
progress of jobs and tasks, SQL execution state and statistics and various other metrics.
Common dynamic performance views include:
• V$SESSION – information about all current connected sessions in the instance.
• V$LOCKED_OBJECT – information about all objects in the instance on which active “locks” exist.
• V$INSTANCE – dynamic instance properties.
• V$SESSION_LONG_OPS – information about certain “long running” operations in the database
such as queries currently executing.
• V$MEMORY_TARGET_ADVICE – advisory view on how to size the instance memory, based on
instance activity and past workloads.
For additional details:
https://docs.oracle.com/database/121/nav/catalog_views.htm
271
Migration to: PostgreSQL System Catalog & The Statistics Collector
[Back to TOC]
Overview
PostgreSQL provides three different sets of metadata tables that are used to retrieve information about the
state of the database and current activities. These tables are similar in nature to the Oracle data dictionary
tables and V$ performance views. In addition, Amazon Aurora PostgreSQL provides a “Performance Insights”
console for monitoring and analyzing database workloads and troubleshooting performance issues.
Category Description
Statistic collection views Subsystem that collects runtime dynamic information about certain
server activities such as statistical performance information.
Some of these tables could be thought as comparable to Oracle V$
views.
System catalog tables Static metadata regarding the PostgreSQL database and static
information about schema objects.
Some of these tables could be thought as comparable to Oracle DBA_*
Data Dictionary tables.
Information schema tables Set of views that contain information about the objects defined in the
current database. The information schema is specified by the SQL
standard and as such, supported by PostgreSQL.
Some of these tables could be thought as comparable to Oracle USER_*
Data Dictionary tables.
Advance performance Use the Performance Insights Console
monitoring
2. System Catalog Tables
These are a set of tables used to store dynamic and static metadata for the PostgreSQL database and can
be thought of as the “data dictionary” for the database. These tables are used for internal “bookkeeping”-
type activities. All System catalog tables start with the prefix and can be found in the
pg_* pg_catalog
schema. Both system catalog tables and statistics collector views can be found on the
pg_catalog
schema
Example
Display all tables in the schema:
pg_catalog
select * from pg tables where schemaname='pg catalog';
Some of the common system catalog tables include:
Table name Purpose
Contains information and properties about each database in the PostgreSQL
pg_database
cluster, such as the database encoding settings as well as others.
Information about all tables in the database, such as indexes and the
pg_tables
tablespace for each database table.
Contains information about all indexes in the database
pg_index
List of currently available/open cursors
pg_cursors
272
For additional details:
https://docs.oracle.com/database/121/nav/catalog_views.htm
https://www.postgresql.org/docs/current/static/catalogs.html
3. Statistics Collector
Special subsystem which collects runtime dynamic information about the current activities in the database
instance. For example, statistics collector views are useful to determine how frequently a particular table is
accessed and if the table is scanned or accessed using an index.
SELECT * FROM pg_stat_activity WHERE STATE = 'active';
Common statistics collector views include:
Table name Purpose
Statistics of currently sessions in the database. Useful for identifying
pg_stat_activity
long running queries
Performance statistics on all tables in the database, such as
pg_stat_all_tables
identifying table size, write activity, full scans vs. index access, etc.
Performance statistics and I/O metrics on all database tables
pg_statio_all_tables
One row for each database showing database-wide statistics such as
pg_stat_database
blocks read from the buffer cache vs. blocks read from disk (buffer
cache hit ratio).
Important performance information on PostgreSQL checkpoints and
pg_stat_bgwriter
background writes
Performance and usage statistics on indexes, for example, useful for
pg_stat_all_indexes
identifying unused indexes
For additional details:
https://docs.oracle.com/database/121/nav/catalog_views.htm
https://www.postgresql.org/docs/9.6/static/monitoring-stats.html#MONITORING-STATS-DYNAMIC-VIEWS-
TABLE
4. Information Schema Tables
The information schema consists of views which contain information about objects that were created
in the current database.
• The information schema is specified by the SQL standard and as such, supported by PostgreSQL.
• The owner of this schema is the initial database user.
• Since the information schema is defined as part of the SQL standard, it can be expected to
remain stable across PostgreSQL versions. This is unlike the system catalog tables, which are
specific to PostgreSQL, and subject to changes across different PostgreSQL versions.
• The information schema views do not display information about PostgreSQL-specific features.
select * from information_schema.tables;
273
For additional details:
https://www.postgresql.org/docs/9.6/static/information-schema.html
Note
By default, all database users (public) can query both the system catalog tables, the statistics collector views
and the information schema.
Common Oracle vs. PostgreSQL system metadata tables
Information Oracle PostgreSQL
Database properties V$DATABASE PG DATABASE
Database sessions V$SESSION PG_STAT_ACTIVITY
Database users DBA_USERS PG_USER
Database tables DBA_TABLES PG_TABLES
Database roles DBA_ROLES PG_ROLES
Table columns DBA_TAB_COLS PG_ATTRIBUTE
Database locks V$LOCKED_OBJECT PG_LOCKS
Currently configured runtime V$PARAMETER PG_SETTINGS
parameters
All system statistics V$SYSSTAT PG_STAT_DATABASE
Privileges on tables DBA_TAB_PRIVS TABLE_PRIVILEGES
Information about IO operations V$SEGSTAT PG_STATIO_ALL_TABLES
5. Amazon RDS performance Insights
In addition to monitoring database status and activity using queries on metadata tables, Aurora PostgreSQL
provides a visual performance monitoring and status information via the “Performance Insights” feature
accessible as part of the Amazon RDS Management Console.
Performance insights monitors your Amazon RDS/Aurora databases and captures workloads so that you can
analyze and troubleshoot database performance. Performance insights visualizes the database load and
provides advanced filtering using various attributes such as: waits, SQL statements, hosts, or users.
Example
Accessing the Amazon Aurora Performance Insights Console
1. Navigate to the RDS section of the AWS Console.
274
• Select Performance Insights.
• Once you have accessed the Performance insights console, you will be presented with a visualized
dashboard of your current and past database performance metrics. You can choose the period of time of
the displayed performance data (5m, 1h, 6h or 24h) as well as different criteria to filter and slice the
information presented such as waits, SQL, Hosts or Users, etc.
Enabling Performance Insights
Performance Insights is enabled by default for Amazon Aurora clusters. If you have more than one database
created in your Aurora cluster, performance data for all of the databases is aggregated. Database performance
data is kept for 24 hours.
For additional details:
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html
275
Migrating from: Oracle Flashback Database
[Back to TOC]
Overview
Oracle flashback database is a special mechanism built into the Oracle database that can help protect against human
errors by providing the capabilities to revert the entire database back to a previous point in time using SQL commands.
Flashback database implements a self-logging mechanism that captures all the changes applied to the database and to
data, essentially storing previous versions of database modifications in the configured database “fast recovery area”
destination.
When using Oracle flashback database, you can choose to restore your entire database to either a user-created restore
point, a timestamp value or to a specific Oracle System Change Number (SCN).
Examples
• Create a database restore point to which you can flashback your database to:
CREATE RESTORE POINT before_update GUARANTEE FLASHBACK DATABASE;
• Flashback your database to a previously created restore point:
SQL> shutdown immediate;
SQL> startup mount;
SQL> flashback database to restore point before_update;
• Flashback your database to a specific time:
SQL> shutdown immediate;
SQL> startup mount;
SQL> FLASHBACK DATABASE TO TIME "TO_DATE('01/01/2017','MM/DD/YY')";
For additional details:
https://docs.oracle.com/database/121/RCMRF/rcmsynta023.htm#RCMRF194
276
Migration to: Amazon Aurora Snapshots
[Back to TOC]
Overview
The primary backup mechanism for Amazon Aurora are snapshots. Taking a database snapshot is an extremely
fast and non-intrusive operation for your database. Database snapshots can be used in a similar way to
flashback database in Oracle.
Amazon Aurora provides two types of snapshots:
• Automated - enabled by default.
• Manual – User-initiated backup of the database which can be done at any given time.
Restoring a snapshot will result in creating a new database instance. Up to 100 manual snapshots are
supported for each Amazon Aurora database.
Similarly, to Oracle flashback, Amazon Aurora snapshots support two options for specifying how to restore
your database:
1. Restore your database to a specific snapshot, similar to Oracle flashback database “restore points”.
2. Restore your database to a previous point in time, similar to Oracle Flashback database “restore to
timestamp”.
Example
Enable automatic snapshots for your Amazon Aurora database and set the backup retention window during
database creation (equivalent to setting the parameter in Oracle).
DB_FLASHBACK_RETENTION_TARGET
1. Navigate to the Amazon RDS page in your AWS console:
2. Select Instances.
277
3. Click on Launch DB Instance.
4. Select the Amazon Aurora with the PostgreSQL database engine.
5. Configure your database settings and parameters.
278
6. Configure your Amazon Aurora cluster backup retention policy as the number of days (“retention
period”) to automatically to store your snapshots:
Example
Perform a manual snapshot backup of your database, equivalent to creating a “guaranteed flashback database
restore point” in Oracle ( .
CREATE RESTORE POINT xxxx GUARANTEE FLASHBACK DATABASE;)
1. Navigate to the Amazon RDS page in your AWS Console:
2. Select Instances.
279
3. Select your Amazon Aurora PostgreSQL instance.
4. Click Instance actions.
5. Select Take Snaphot in the context menu.
Example
Restore an Amazon Aurora database backup from an existing snapshot, similar to using “
flashback
” in Oracle.
database to restore point xxx;
1. Navigate to the Amazon RDS page in your AWS Console:
280
2. Choose Snapshots on the left-hand menu to see the list of snapshots available for your database
instances:
3. Select the snapshot to restore. Choose the snapshot, click on Snapshot Actions and select Restore
snapshot in the context menu.
Note: The restore process will create a new instance.
4. You will be presented with a wizard for creating your new Amazon Aurora instance from the
snapshot you selected. Complete all the required properties for creating your newly restored
database instance.
5. Click Restore DB Instance.
281
Example
Restore an Amazon Aurora database to a specific (previous) point in time, similar to the “
FLASHBACK
“ command in Oracle.
DATABASE TO TIME "TO_DATE('xxxx')
1. Navigate to the Amazon RDS page in your AWS Console.
282
2. Click Instances.
4. Select your Amazon Aurora instance and click on Instance Actions. Select Restore to Point in Time
on the context menu.
5. This process will launch a new instance. Select the date and time to which you want to restore your new
instance. The selected time must be within the configured backup retention for this instance.
283
Example
Modify the backup retention policy for an Amazon Aurora database, after a database was created. This
process is similar to setting the parameter in Oracle.
DB_FLASHBACK_RETENTION_TARGET
This process allows you to control for how long your Aurora database snapshots will be retained. When
restoring an Amazon Aurora database to a previous point in time, the specified date/time must be within the
configured backup retention window.
1. Navigate to the Amazon RDS page in your AWS Console.
2. Click Instances.
3. Select your Aurora instance, click Instance Actions.
284
4. Select Modify in the context menu.
5. Configure the desired backup retention period. Maximum supported retention is 35 days.
285
AWS CLI commands for Aurora database backup and database restore
In addition to using the AWS management console to restore your Amazon Aurora database to a previous point in time
or to a specific snapshot, you can also use the AWS CLI to perform the same actions. Some examples include:
1. Use to view all current Amazon Aurora snapshots.
describe-db-cluster-snapshots
2. Use to create a new snapshot (“restore point”).
create-db-cluster-snapshot
3. Use to restore a new cluster from an existing snapshot.
restore-db-cluster-from-snapshot
4. Use to add new instances to the newly restored Amazon Aurora cluster.
create-db-instance
aws rds describe-db-cluster-snapshots
aws rds create-db-cluster-snapshot --db-cluster-snapshot-iden
tifier Snapshot_name --db-cluster-identifier Cluster_Name
aws rds restore-db-cluster-from-snapshot --db-cluster-identifier
NewCluster --snapshot-identifier SnapshotToRestore --engine aurora-
postgresql
aws rds create-db-instance --region us-east-1 --db-subnet-group default -
-engine aurora-postgresql --db-cluster-identifier NewCluster --db-
instance-identifier newinstance-nodeA --db-instance-class db.r4.large
5. Use to perform point-in-time recovery.
restore-db-instance-to-point-in-time
aws rds restore-db-cluster-to-point-in-time --db-cluster-identifier
clustername-restore clustername
--source-db-cluster-identifier --restore-
to-time 2017-09-19T23:45:00.000Z
aws rds create-db-instance --region us-east-1 --db-subnet-group default -
-engine aurora-postgresql --db-cluster-identifier clustername-restore --
db-instance-identifier newinstance-nodeA --db-instance-class db.r4.large
Oracle Flashback database vs. Amazon Aurora Snapshots
Oracle Amazon Aurora
Create a “restore CREATE RESTORE POINT aws rds create-db-cluster-
point” before_update GUARANTEE snapshot --db-cluster-
FLASHBACK DATABASE; snapshot-identifier
Snapshot_name --db-cluster-
identifier Cluster_Name
Configure flashback ALTER SYSTEM SET Configure the “Backup retention
“retention period” db_flashback_retention_ta window” setting using the AWS
rget=2880; management console or using the AWS
CLI.
Flashback database shutdown immediate; 1. Create new cluster from a snapshot:
to a previous
“restore point” startup mount; aws rds restore-db-cluster-
from-snapshot --db-cluster-
flashback database to identifier NewCluster --
restore point snapshot-identifier
before_update;
286
Oracle Amazon Aurora
SnapshotToRestore --engine
aurora-postgresql
2. Add new instance to the cluster:
aws rds create-db-instance
--region us-east-1 --db-
subnet-group default --
engine aurora-postgresql --
db-cluster-identifier
clustername-restore --db-
instance-identifier
newinstance-nodeA --db-
instance-class db.r4.large
Flashback database shutdown immediate; 1. Create a new cluster from a snapshot
to a previous point and provide a specific point in time:
in time startup mount;
aws rds restore-db-cluster-
FLASHBACK DATABASE TO to-point-in-time --db-
TIME cluster-identifier
"TO_DATE('01/01/2017','MM clustername-restore --
/DD/YY')"; source-db-cluster-
identifier clustername --
restore-to-time 2017-09-
19T23:45:00.000Z
2. Add a new instance to the cluster:
aws rds create-db-instance
--region us-east-1 --db-
subnet-group default --
engine aurora-postgresql --
db-cluster-identifier
clustername-restore --db-
instance-identifier
newinstance-nodeA --db-
instance-class db.r4.large
For additional details:
http://docs.aws.amazon.com/cli/latest/reference/rds/index.html#cli-aws-rds
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RestoreFromSnapshot.html
287
Migrating from: Oracle Log Miner
[Back to TOC]
Overview
Oracle Log Miner is a tool that enables you to query the database Redo Logs and the Archived Redo Logs using
a SQL interface. Using Log Miner, you can analyze the content of database “transaction logs” (online and
archived redo logs) and provide historical insight on past database activity, such as reviewing individual DML
statements which have modified data in the database.
Examples
Use Log Miner to view DML statements executed on the table:
employees
1. Find current redo log file to analyze:
SQL> SELECT V$LOG.STATUS, MEMBER
FROM V$LOG, V$LOGFILE
WHERE V$LOG.GROUP# = V$LOGFILE.GROUP#
AND V$LOG.STATUS = 'CURRENT';
STATUS MEMBER
---------------- --------------------------------------------------
CURRENT /u01/app/oracle/oradata/orcl/redo02.log
2. Use the procedure, pass the file path as a parameter to the Log Miner
DBMS_LOGMNR.ADD_LOGFILE
API: