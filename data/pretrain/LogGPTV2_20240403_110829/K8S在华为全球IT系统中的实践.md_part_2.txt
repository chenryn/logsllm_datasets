1.watchcluster变化，虎
刷新本地cache，
包括集群容量、负载
等信息，供调度时使用
k8sAPI在各个目
群中创建应用
2.watch RS变化，过滤出destClusters=[](未调度)的RC，记
录本地cache，待调度
3.worker从本地cache逐个读取并处理RS，按调度策略选择集
群、计算出在该集群中创建的RS的replica值
4.worker回写调度结果-
-update RS
destClusters=[{cluster: "foo", replica: 6}, ..]
ArchSummit全球架构师峰会
PoweredbyInfoQ
---
## Page 11
联邦集群控制器、副本集控制器
①
RS
Ins:5
创建应用
保存对象
KubeCtl
Ubernetes APl Server
ETCD
④监视应用的创建，
5监视子应用的创建
watch cluster
watch RS
subRS
选择目标集群，
Ins:2
Ins:5
Cluster:/
拆分出多个子应用
Ubernete
Cluster Controller
Replication Controller
1.watch cluster变化，夕
处理集群接入
watch ReplicaSet变化，在各个集群
和集群删除
同步 (创建、更新、删除)
ReplicaSet
2.周期性检查集群状态，收集集群
healthy及metrics，刷新到api-
Kubernetes Cluster B
server
RS:ReplicaSet多实例无状态应用
subRS:子应用
Ins:实例数
ArchSummit全球架构师峰会
PoweredbyInfoQ
---
## Page 12
多集群联邦下的服务发现
①创建服务
②保存对象
KubeCtl
Ubernetes APl Server
ETCD
③Watch服务创建
创建外部服务
Ubernetes Service
全球分布式路由
④
并设置Endpoint
Controller
 Watch所有Pods并获取Pod
IP
负载均衡
Kubernetes Cluster A
负载均衡
Kubernetes Cluster B
Watch Service Endpoints
?
刷新iptables
Node
Node
Node
Node
Node
Node
Kube-proxy
Node
Node
Node
Node
Node
Node
管理控制请求
业务流量
ArchSummit全球架构师峰会
Powered by
InfoQ
---
## Page 13
联邦服务控制器
跨集群服务发现
①创建服务
②保存对象
KubeCtl
Ubernetes APl Server
ETCD
Watch 服务创建
创建外部服务
Ubernetes Service
全球分布式路由
4
并设置Endpoini
Controller
关键机制：
新增服务时：
1.watchcluster变化，刷新本地cluster set,
1.在各集群创建service，服务的endpoint包含
供操作集群使用
所有集群的LB
2.watch服务变化，入本地任务队列，待处理
2.watch所有服务映射的pod，分集群收集
3.服务控制器共有3个worker处理任务队列：
endpoint(ip,port)，并写入各自的LB
clusterServiceWorker处理新增服务任务
3.在全球分布式路由增加规则，包含所有服务
clusterEndpointWorker处理服务Endpoint
的LBendpoint信息
刷新任务
4.测试服务的连通性，刷新服务状态
clusterSyncLoop处理新集群接入的服务
同步任务
ArchSummit全球架构师峰会
Powered byInfoQ
---
## Page 14
应用间的亲和/反亲和调度
A
B
亲和性
反亲和性
传统应用进行容器化，拆分微服务之
高可靠性考虑，同个应用的多个实例
后的部署约束，需要按实例逐一配对
反亲和部署，减少宕机影响
就近部署，容器间通信就近路由，减
互相干扰的应用反亲和部署，避免干
少网络消耗。
扰。
ArchSummit全球架构师峰会
Powered by
InfoQ
---
## Page 15
应用间的亲和/反亲和调度
为应用A创建RS，所有Pod
在AZ级别互相亲和，
在node级别互相反亲和
Z1N1
Z1N2
Z1N3
支持不同级别的亲和性
Kube-Api-server
 Kube-scheduler
根据node按labels键值对
“动态分组”
Zone 1
Zone 2
Z1N1
Z1N2
Z2N1
Z2N2
在这个例子中：计算亲和性时，
所有az=zone1的node为一组,
Z1N3
Z2N3
az=zone2的node为另一组。
应用A的Pod
计算反亲和性时，所有node各为
独立的组。
ArchSummit全球架构师峰会
Powered by
InfoQ
---
## Page 16
应用间的亲和/反亲和调度
为应用B创建RS，在node级别
亲和应用A的Pod
反亲和自身的Pod
支持硬性亲和/反亲和
Z1N1
Z1N2
Z1N3
Kube-scheduler
口口
Kube-Api-server
调度时过滤，符合的node保留，不
符合的node直接排除
Zone 1
Zone 2
Z1N1
Z1N2
Z2N1
Z2N2
支持软性亲和/反亲和
Z1N3
Z2N3
应用A的Pod
调度时评分，符合的node高分，不
口应用B的Pod
符合的node低分
ArchSummit全球架构师峰会
Powered by
InfoQ
---
## Page 17
鸡生蛋蛋生鸡一亲和性调度的对称性考虑
应用B亲和A，应用A后于B创建怎么办？
对称性设计，调度B时会检查B是否被别人亲和/反亲和
被亲和的应用跑了（比如挂了异地重建）怎么办？
Pod挂掉通常kubelet会直接重新拉起。只有node挂掉时，node上
所有的pod被终结，RC/RS重新创建Pod，才会有跑掉的情况。
ArchSummit全球架构师峰会
Powered by
InfoQ
---
## Page 18
鸡生蛋蛋生鸡一亲和性调度的对称性考虑
应用间亲和性（podaffinity）的对称性－不完全对称
检查待部署的pod亲和哪些已存在pod，同时检查该pod被哪些已存在pod亲和
hard pod affinity：不对称
正向的亲和为hard
反向的亲和为sof (不能因为没有被其他pod硬亲和就阻塞调度)
soft pod affinity：对称
正向反向都为soft
应用间反亲和性（podanti-affinity）的对称性－完全对称
检查待部署的pod反亲和哪些已存在pod，同时检查该pod被哪些已存在pod
反亲和。
ArchSummit全球架构师峰会
Powered by
InfoQ
---
## Page 19
对称性之后一未来可用的措施
限制异地重启（forgiveness）
Node挂掉时，pod不被终结，等待node恢复时由kubelet
原地重启pod
运行时迁移
(rescheduling)
Rescheduler周期性检查集群中pod的亲和/反亲和性规则，并
迁移调整
ArchSummit全球架构师峰会
Powered byInfoQ
---
## Page 20
后续考虑投入方向
调度与重调度
规模&性能
Dedicated Node
Forgiveness（限制异地重启）
前期的规模性能分析主要在控制
Rescheduling（运行时重调度）
面，后面将投入数据面分析。
网络规模和性能优化，以支撑10
集群联邦
万容器的需求。
当前社区仅贡献了phase 1，尚不完整,
，需
要持续投入。
ArchSummit全球架构师峰会
PoweredbyInfoQ
---
## Page 21
Kubernetes开源社区贡献
commits 400+，全球排名第四，国内第一
·CentOSk8s集群管理
Google
·k8s运维系统对接kafka
*independent
Red Hat
·k8s运维系统对接elastic search
FathomDB
Huawei
·Heapster重构及sink扩展
CoreOs
Zhejiang University
·主导设计Ubernetes集群联邦
NetEase
Amadeus
· Node Affinity
Canonical
·Pod Affinity/Anti-Affinity
· Taints-tolerations
·其他Bug和修复.....
ArchSummit全球架构师峰会
Powered byInfoQ
---
## Page 22
Docker开源社区贡献
commits 800+，全球排名第四，国内第一
·增加关闭容器oom功能
·容器重启策略增强
·日志格式优化，更便于解析
*independent
·环境依赖检测功能增强
Docker
·增加容器cpu带宽限制
Red Hat
·增加容器IO带宽限制
Huawei
·增加内存节点限制
IBM
·增加内核内存限制
Microsoft
docCloud
·增加内存预留机制
Google
·增加swap内存限制
Kickstarter
·Docker exec增强，增加指定用户和
特权用户执行exec
·Docker build资源限制增强
·增加ARM64支持
·安全加固，增加seccomp支持
·增加在容器内获取cgroup信息功能
ArchSummit全球架构师峰会
Powered byInfoQ
---
## Page 23
云容器引擎即将公测一邀您体验
平台共建·市场合作·产品咨询
ArchSummit全球架构师峰会
Powered by
InfoQ
---
## Page 24
Thanks!
---