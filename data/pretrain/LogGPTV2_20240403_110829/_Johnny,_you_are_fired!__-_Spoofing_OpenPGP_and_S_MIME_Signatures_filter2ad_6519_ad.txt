### 1020 - 28th USENIX Security Symposium
**USENIX Association**

#### Spoofing Signatures
Spoofing signatures was particularly straightforward for clients where the PGP or S/MIME plugin injects HTML code directly into the email body. By simply copying the original HTML snippet of a valid signature and resending it within the body of a spoofed email, we were able to achieve perfect forgery.

Additionally, seven PGP clients and nine S/MIME clients display the results of signature verification in or near the email body, making them vulnerable to limited attacks (resulting in weak forgeries). Some of these clients provide additional indicators in other parts of the user interface (UI) to show that the email is signed. However, these indicators are often missing in cases of UI redressing-based spoofed signatures (see Figure 15). In some instances, the spoofed signature was not 100% visually indistinguishable from a genuine one.

### 6 Countermeasures
Both S/MIME [10] and OpenPGP [6] standards include sections on security considerations, which primarily focus on cryptographic best practices such as key sizes and cryptographic algorithms. However, they do not address the design of secure validation routines and interfaces. In this section, we discuss several potential countermeasures against the presented attacks to guide the implementation of secure email clients.

#### 6.1 CMS Attack Class

**eContent Confusion (C1)**
Both S/MIME signing variants are commonly used, and standard-compliant clients are expected to support them. Therefore, it is crucial to ensure that only the content subject to verification is displayed. The relevant standards, RFC 5652 (CMS) and RFC 5751 (S/MIME), do not provide guidance on handling cases where both variants are present. We recommend displaying an error message instead of either variant. For example, Claws Mail reports a "conflicting use" in such scenarios.

**Disallow Multiple Signers (C2)**
Providing clear advice on presenting multiple signers is challenging due to varying UI concepts across different clients. Introducing new UI elements can degrade usability or introduce security issues (e.g., UI redressing). A simple solution is to disallow multiple signer support entirely. Many modern clients, such as Thunderbird and Outlook 2016, do not support multiple signers, and no known client can produce messages with multiple signers. Thus, it seems reasonable to omit this feature.

**Error Out If No Signers (C3)**
Messages with no signers should be treated as erroneous or unsigned. There should be no UI element indicating a signed message. We recommend not showing the message and instead displaying an error. This mitigates the risk of signature stripping attacks, as demonstrated by [11] and [9].

**Redesign Trust Management and Workflow (C4)**
Clients must validate the complete certification path and fail the signature verification if there are trust issues. Certificates should be checked automatically, and self-signed certificates should not be accepted. If necessary, a separate trust chain should be configured on the device or in the application.

#### 6.2 GPG API Attack Class

**GnuPG Improvements**
GnuPG developers can enhance documentation and the API while maintaining backwards compatibility and extensibility. GnuPG must track attacker-controlled data and always escape newlines and special characters in all outputs. It should also validate the structure of OpenPGP messages and provide clear guidelines for common tasks like certificate pinning.

**Frontend Hardening**
Frontend developers can strengthen the backend invocation (e.g., using dedicated channels for log and status lines or adding `--no-verbose` to disable logging), improve status line parsers (e.g., by anchoring all regular expressions), and refine the state machine aggregating results (e.g., by tracking multiple signatures indicated by `NEWSIG`). However, overly strict applications risk incompatibilities with future backend upgrades or unconventional user configurations.

**OpenPGP Standard Updates**
The OpenPGP standard should be updated to provide a strict grammar for valid message composition. The current flexibility, such as arbitrary nesting of encrypted, signed, and compressed messages, is unjustified in practice and places an undue burden on implementations to define reasonable limits. Specifically, the standard should allow only one optional encryption layer, one optional compression layer, and one possibly signed literal data packet. More complex message compositions (e.g., sign+encrypt+sign) should be restricted.

### Table 2: Vulnerability Summary
Out of 20 tested email clients, 14 were vulnerable to our OpenPGP signature spoofing attacks (perfect or partial forgery).

| Client | Version | Plugin | Weaknesses |
|--------|---------|--------|------------|
| Thunderbird | 52.5.2 | Enigmail 1.9.8 | G1, G2, M2, M3, U1 |
| Outlook | 16.0.4266 | GpgOL 2.0.1 | I2, U1 |
| Windows 10 Mail | 17.8730.21865 | native | M1, I1 |
| ... | ... | ... | ... |

- **Perfect Forgery**: Indistinguishable signature on all UI levels.
- **Partial Forgery**: Indistinguishable signature on the first UI level.
- **Weak Forgery**: Signature can be spoofed with limitations.
- **No Vulnerabilities Found**: No vulnerabilities detected.

**USENIX Association**
**28th USENIX Security Symposium**