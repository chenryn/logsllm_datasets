1020    28th USENIX Security Symposium
USENIX Association
sulting in perfect forgery. Spooﬁng signatures was especially
easy for clients where the PGP or S/MIME plugin simply in-
jects HTML code into the email body. We could just copy
the original HTML snippet of a valid signature and re-send
it within the body of our spoofed email.
Another seven PGP clients and nine S/MIME clients show
the results of signature veriﬁcation in, or very close to, the
email body and could be attacked with limitations (causing
weak forgeries). Some of these clients have additional indi-
cators in other parts of the UI pointing out that the email is
actually signed, but those indicators are missing in the case
of spoofed signatures based on UI redressing (see Figure 15).
Furthermore, in some of these clients the spoofed signature
was not 100% visually indistinguishable.
6 Countermeasures
Similarly to other RFC documents, S/MIME [10] and
OpenPGP [6] contain a section on security considerations.
While these sections discuss cryptographic best practices
(e.g., key sizes and cryptographic algorithms), they do not
discuss how to design secure validation routines and inter-
faces. In this section, we discuss several possible counter-
measures against the presented attacks in order to give guid-
ance for implementing secure email clients.
6.1 CMS Attack Class
eContent Confusion (C1) Both S/MIME signing variants
are commonly used13 and standard compliant clients are ex-
pected to support them. Thus, special care must be taken to
only display the content which was subject to veriﬁcation.
The relevant standards, RFC 5652 (CMS) and RFC 5751
(S/MIME), do not give any advice on how to handle the case
were both variants are present. We recommend to display
neither of them and show an error instead. In fact, Claws
reports a “conﬂicting use”.
13Outlook 2016 sends opaque signed messages by default and Thunder-
bird sends detached messages by default.
Figure 15: “Weak” forgery in KMail. The check mark UI indicatior
in the upper right cannot be spoofed using simple UI redressing.
Figure 14: Partial forgery in the Windows 10 mail app. The email is
actually signed by Eve which is only visible in the signature details.
intentionally breaks the signature because the forwarding en-
tity should re-sign the message.
ID Class
5.4
Eleven PGP email clients and twelve S/MIME clients explic-
itly show the signer’s identity (i.e., PGP user ID or Internet
mail address in the signer’s S/MIME certiﬁcate) when re-
ceiving a signed email. This can be considered safe because
a user gets direct feedback regarding the signed by whom?
question. The other clients do not show the signer’s iden-
tity on the ﬁrst level of the UI. Of those, two PGP email and
three S/MIME mail clients, such as the Windows 10 mail app
(see Figure 14), do not perform any correlation between the
sender address and the signer’s identity at all. They only
show “signed” with no further information, making them
easy targets for ID attacks (resulting in partial forgeries).
The other seven PGP email clients and eight S/MIME clients
compare the sender’s address to the email address found in
the public key or certiﬁcate matching the signature. This
process is error-prone. For four PGP email clients, including
GpgOL for Outlook, and eight S/MIME email clients, the
correlation could be fully bypassed using the various tech-
niques described in subsection 4.4. If Bob does not manu-
ally view the signature details, there is no indicator that the
email was signed by Eve instead of Alice (resulting in par-
tial forgery). For two of these clients (GpgOL for Outlook
and Airmail) no signature details were available, resulting in
perfect forgery.
5.5 UI Attack Class
Five tested PGP email clients and four S/MIME clients dis-
play the status of signatures within the email body, which is
a UI component controlled by the attacker. This allowed us
to create fake text or graphics implying a valid signature us-
ing HTML, CSS and inline images visually indistinguishable
from a real signed message. Only further investigation of the
email, such as viewing signature details, could reveal the at-
tack (resulting in partial forgery). Three of these clients do
not not even have an option for further signature details, re-
USENIX Association
28th USENIX Security Symposium    1021
OS Client
s
w
o
d
n
i
W
x
u
n
i
L
Thunderbird (52.5.2)
Outlook (16.0.4266)
The Bat! (8.2.0)
eM Client (7.1.31849)
Postbox (5.0.20)
KMail (5.2.3)
Evolution (3.22.6)
Trojitá (0.7-278)
Claws (3.14.1)
Mutt (1.7.2)
S Apple Mail (11.2)
O
c
a
m
MailMate (1.10)
Airmail (3.5.3)
i
o
r
d
n
A
d K-9 Mail (5.403)
R2Mail2 (2.30)
MailDroid (4.81)
Roundcube (1.3.4)
Horde/IMP (7.7.9)
Mailpile (1.0.0rc2)
Mailfence (2.6.007)
b
e
W
Plugin
Enigmail (1.9.8)
GpgOL (2.0.1)
GnuPG (2.1.18)
native
Enigmail 1.2.3
GPGME (1.2.0)
GnuPG (2.1.18)
GPGME (1.2.0)
GPG plugin (3.14.1)
GPGME (1.2.0)
GPG Suite (2018.1)
GPG Suite (2018.1)
GPG-PGP (1.0-4)
OpenKeychain (5.2)
native
Flipdog (1.07)
Enigma (git:48417c5)
GnuPG (2.1.18)
GnuPG (2.1.18)
OpenPGP.js (2.5.3)
Weaknesses
G1, G2, M2, M3, U1
I2, U1
M1, I1
U1
G1, G2
U1
M4, U1
I2, I3, U1
M1
U1
G1, M1, M2, M3, U1
M1, M2, M3, I2, U1
M3, I2
I2
I1, U1
M1, U1
U1
–
G1, I1
–
–
–
–
–
–
–
(cid:32)
–
–
–
(cid:32)
(cid:35)
(cid:32)
(cid:35)
GPG MIME ID UI
(cid:35)
(cid:32)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
–
–
–
–
–
–
–
–
–
–
–
–
(cid:71)(cid:35)
(cid:32)
–
–
–
(cid:35)
(cid:71)(cid:35)
(cid:32)
–
–
–
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
–
–
–
(cid:71)(cid:35)
–
–
–
–
–
–
–
–
(cid:32)
–
–
–
–
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
–
–
(cid:35)
–
–
–
–
(cid:35)
–
Indistinguishable signature on all UI levels (perfect forgery)
Indistinguishable signature on ﬁrst UI level (partial forgery)
Signature can be spoofed with limitations (weak forgery)
No vulnerabilities found
(cid:32)
(cid:71)(cid:35)
Table 2: Out of 20 tested email clients 14 were vulnerable to our OpenPGP signature spooﬁng attacks (perfect or partial forgery).
Disallow Multiple Signers (C2)
It is difﬁcult to give good
advice on the presentation of multiple signers, as different
clients may implement different UI concepts. Furthermore,
introducing UI elements might worsen the usability or intro-
duce security problems on its own (e.g., UI redressing).
However, a simple solution is to not implement multiple
signer support at all. Many up-to-date clients do not support
multiple signers, e.g., Thunderbird and Outlook 2016. Ad-
ditionally, we know of no client which is able to produce a
message with multiple signers. Thus, it seems reasonable to
us to not support this feature.
Error Out If No Signers (C3) Messages with no signer
should be treated as errorneous or as not signed. In either
case there should be no UI element indicating a signed mes-
sage. We recommend to not show the message and show
an error instead. This is due to the possible application of
signature stripping attacks as demonstrated by [11] and [9].
Redesign Trust Management and Workﬂow (C4) Clients
must validate the complete certiﬁcation path and fail the sig-
nature veriﬁcation on trust issues. Furthermore, certiﬁcates
should be checked automatically. Clients must not accept
self-signed certiﬁcates.
If needed, a separate trust chain
should be conﬁgured on the device or in the application.
6.2 GPG API Attack Class
GnuPG developers can improve the documentation and the
API, but they have to consider backwards compatibility and
extensibility. GnuPG must track attacker controlled data
and always escape newlines and other special characters in
all outputs. GnuPG should also validate the structure of
OpenPGP messages and provide clear guidelines on how to
achieve common tasks such as certiﬁcate pinning.
Frontend developers can harden the invocation of the
backend (e.g. by using dedicated channels for log and status
lines or adding --no-verbose to disable logging), their sta-
tus line parsers (e.g., by anchoring all regular expressions),
and the state machine aggregating the results (e.g., by keep-
ing track of multiple signatures, as indicated by NEWSIG).
However, applications that are too strict risk incompatibil-
ities with future backend upgrades or unconventional user
conﬁgurations.
The OpenPGP standard should be updated to provide a
strict grammar for valid message composition, as the present
ﬂexibility (such as arbitrary nesting of encrypted, signed,
and compressed messages) is unjustiﬁed in practice and puts
the burden on implementations to deﬁne reasonable limits.
Speciﬁcally, the OpenPGP standard should only allow one
optional encryption layer, one optional compression layer,
and one possibly signed literal data packet. More complex
message composition (e.g., sign+encrypt+sign to allow for
1022    28th USENIX Security Symposium
USENIX Association
OS
s
w
o
d
n
i
W
x
u
n
i
L
Client
Thunderbird (52.5.2)
Outlook (16.0.4266)
Win. 10 Mail (17.8730.21865)
Win. Live Mail (16.4.3528)
The Bat! (8.2.0)
eM Client (7.1.31849)
Postbox (5.0.20)
KMail (5.2.3)
Evolution (3.22.6)
Trojitá (0.7-278)
Claws (3.14.1)
Mutt (1.7.2)
S Apple Mail (11.2)
O
c
a
m
MailMate (1.10)
Airmail (3.5.3)
d R2Mail2 (2.30)
Plugin
native
native
native
native
native
native
native
native
native