title:Diane: Identifying Fuzzing Triggers in Apps to Generate Under-constrained
Inputs for IoT Devices
author:Nilo Redini and
Andrea Continella and
Dipanjan Das and
Giulio De Pasquale and
Noah Spahn and
Aravind Machiry and
Antonio Bianchi and
Christopher Kruegel and
Giovanni Vigna
6
6
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
DIANE: Identifying Fuzzing Triggers in Apps to
Generate Under-constrained Inputs for IoT Devices
Nilo Redini∗, Andrea Continella†, Dipanjan Das∗, Giulio De Pasquale∗, Noah Spahn∗, Aravind Machiry‡,
Antonio Bianchi‡, Christopher Kruegel∗, and Giovanni Vigna∗
∗UC Santa Barbara †University of Twente ‡Purdue University
{nredini, dipanjan, peperunas, ncs, chris, vigna}@cs.ucsb.edu
PI:EMAIL, {amachiry, antoniob}@purdue.edu
Abstract—Internet of Things (IoT) devices have rooted themselves
in the everyday life of billions of people. Thus, researchers have
applied automated bug finding techniques to improve their overall
security. However, due to the difficulties in extracting and emulating
custom firmware, black-box fuzzing is often the only viable analysis
option. Unfortunately, this solution mostly produces invalid inputs,
which are quickly discarded by the targeted IoT device and do not
penetrate its code. Another proposed approach is to leverage the
companion app (i.e., the mobile app typically used to control an IoT
device) to generate well-structured fuzzing inputs. Unfortunately,
the existing solutions produce fuzzing inputs that are constrained
by app-side validation code, thus significantly limiting the range of
discovered vulnerabilities.
In this paper, we propose a novel approach that overcomes these
limitations. Our key observation is that there exist functions inside
the companion app that can be used to generate optimal (i.e., valid
yet under-constrained) fuzzing inputs. Such functions, which we
call fuzzing triggers, are executed before any data-transforming
functions (e.g., network serialization), but after the input validation
code. Consequently, they generate inputs that are not constrained by
app-side sanitization code, and, at the same time, are not discarded
by the analyzed IoT device due to their invalid format. We design
and develop DIANE, a tool that combines static and dynamic analysis
to find fuzzing triggers in Android companion apps, and then uses
them to fuzz IoT devices automatically. We use DIANE to analyze 11
popular IoT devices, and identify 11 bugs, 9 of which are zero days.
Our results also show that without using fuzzing triggers, it is not
possible to generate bug-triggering inputs for many devices.
I. INTRODUCTION
Internet of Things (IoT) devices have become part of the
everyday life of billions of people [53], [64]. Unfortunately, very
much like their popularity, the number of vulnerabilities found in
these devices has increased as well. In both 2019 and 2018, security
researchers published more than 150 vulnerabilities affecting
IoT devices [5], [6], [7]. This represented an increment of 15%
compared to 2017, and an increase of 115% compared to 2016.
These vulnerabilities reside in the software (or firmware)
running on these IoT devices. As several studies have shown, this
software often contains implementation flaws, which attackers can
exploit to gain control of a device, and cause significant disruption
for end-users [17], [18], [27], [48], [59]. One prominent example
is the Mirai botnet [51], which infected hundreds of thousands of
IoT devices using a collection of vulnerabilities.
In recent years, researchers have developed novel techniques
to automatically find vulnerabilities in IoT devices by analyzing
their firmware [24], [31], [32], [70], [71], [84]. These approaches,
however, present several limitations. First, obtaining the firmware
running on an IoT device is difficult: Extracting the firmware from
a device typically requires ad hoc solutions, and vendors hardly
make their software publicly available [70]. Second, unpacking
and analyzing a firmware sample is a challenging task: Firmware
samples may be available in a variety of formats, and may run on
several different architectures, often undocumented. Furthermore,
most IoT devices are shipped with disabled hardware debugging
capabilities [25], [55], [61], ruling out analyses based on dynamic
instrumentation.
For these reasons, security researchers typically have to use
black-box approaches when vetting the security of IoT devices.
However, the existing black-box approaches [2], [12], [14] require
knowledge about the data format accepted by the device under
analysis. Consequently, given the heterogeneity and lack of
documentation of the protocols adopted by IoT devices, these
approaches are not readily applicable.
However, most IoT devices have companion apps [82], [88]
(i.e., mobile apps used to interact with the device), which
contain the necessary mechanism to generate valid inputs for
the corresponding device. Based on this observation, Chen et
al. [25] proposed a tool, IoTFuzzer, which fuzzes IoT devices
by leveraging their companion apps. IoTFuzzer analyzes the
companion app and retrieves all the paths connecting the app’s
User Interface (UI) to either a network-related method or a
data-encoding method. Then, IoTFuzzer fuzzes the parameters
of the first function that handles user input along these paths, thus
generating valid fuzzing inputs for the IoT device.
While this approach yields better results than randomly fuzzing
the data directly sent to the IoT device over the network, in
practice, it consists in mutating variables immediately after they
are fetched from the UI, before the app performs any input
validation or data processing. Consequently, the effectiveness
of IoTFuzzer suffers substantially when the app sanitizes the
provided input—our experiments (Section IV-E) demonstrate that
51% of IoT companion apps perform app-side input validation.
Indeed, recent research showed that mobile apps often perform
input validation to trigger different behaviors [86]. For these
reasons, IoTFuzzer’s approach cannot produce under-constrained
(i.e., not affected by app-side sanitization) yet well-structured
(i.e., accepted by the IoT device) fuzzing inputs, which can reach
deeper code locations, uncovering more vulnerabilities.
© 2021, Nilo Redini. Under license to IEEE.
DOI 10.1109/SP40001.2021.00066
484
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
Our Approach. In this paper, we propose and implement an
approach that leverages the companion app to generate inputs for
the analyzed device. To overcome IoTFuzzer’s limitations, we
precisely determine (and fuzz) optimal code locations within the
companion app, which produce valid yet under-constrained inputs
for the IoT device.
Our approach considers the app’s execution as a sequence of
functions that transform the data introduced by the user (e.g.,
through the app’s UI) into network data. Our intuition is that the
first functions within this sequence typically convert the user inputs
into internal data structures, generating data that is constrained by
app-side validation. In contrast, the last functions in this sequence
adequately encode the user data, serializing it on the network.
The novelty of our approach is to fuzz an IoT device by
invoking specific functions within its companion app. We call these
functions fuzzing triggers. When invoked, fuzzing triggers generate
inputs that are not constrained by app-side validation, and, at the
same time, are well-structured, so that they are not immediately
discarded by the fuzzed IoT device.
Our approach uses a novel combination of static and dynamic
analysis and performs two main steps: i) fuzzing triggers identi-
fication, and ii) fuzzing. To do this, first, we automatically retrieve
those functions within an app that send data to the IoT device.
Then, for each of these functions, we build an inter-procedural
backward slice, which we dynamically analyze to ultimately
identify fuzzing triggers. Finally, we use dynamic instrumentation
to repeatedly invoke these fuzzing triggers using different
arguments. This generates a stream of network data that fuzzes the
functionality of the IoT device, to ultimately spot vulnerabilities.
We implemented our approach in a tool, called DIANE, and
ran it against a representative set of 11 popular IoT devices of
different types and from different manufacturers. DIANE correctly
identified fuzzing triggers, and successfully identified 11 bugs, 9
of which are previously unknown vulnerabilities. Additionally, we
compared DIANE with IoTFuzzer, showing that the identification
of fuzzing triggers is essential to generate under-constrained,
crash-inducing inputs.
In summary, we make the following contributions:
• We propose an approach to identify fuzzing triggers, which
are functions that, in the app’s control flow, are located
between the app-side validation logic and the data-encoding
functions. When executed, the identified fuzzing triggers
produce valid yet under-constrained inputs, enabling effective
fuzzing of IoT devices.
• We leverage our approach to implement DIANE, an
automated black-box fuzzer for IoT devices.
• We evaluate our tool against 11 popular, real-world IoT
devices. In our experiments, we show that by identifying
fuzzing triggers and using them to generate inputs for the
analyzed devices, we can effectively discover vulnerabilities.
Specifically, we found 11 vulnerabilities in 5 different
devices, 9 of which were previously unknown.
• We show that, for a majority of IoT devices and companion
apps, identifying and leveraging fuzzing triggers is essential
to generate bug-triggering inputs.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
// Android Java Code
public
int PTZ(String adminPwd, int x, int y, int z){
byte data[] = MsgPtzControlReq(x, y, z);
if (!adminPwd.contains("&") && // Input
!adminPwd.contains("'")){ // validation
SendMsg(adminPwd, camId, data);
//..
}
}
public static native int SendMsg(String
adminPwd, String camId, byte[] data);
// Java Native Interface
int
Java_SendMsg(char* pwd, char* cam_id, Msg* msg){
prepare_msg(pwd, cam_id, msg);
notify_msg(msg);
}
// JNI - Different thread
void sender() {
Msg* msg = get_message()
send_to_device(msg);
}
Fig. 1. Snippet of code that implements a sanity check on the admin
password, and uses the Java Native Interface to send messages to the
device. The example is based on the Wansview app in our dataset.
In the spirit of open science, we make the datasets and
the
this work publicly available:
https://github.com/ucsb-seclab/diane.
code developed for
II. MOTIVATION
To motivate our approach and exemplify the challenges that
it addresses, consider the snippet of code in Figure 1. The app
utilizes the method PTZ (Line 2) to send position commands (i.e.,
spatial coordinates) to an IoT camera. To do this, PTZ invokes
the native function SendMsg (Line 7), which prepares the data
to be sent (Line 15), and stores it into a shared buffer (Line 16). In
parallel, another thread reads the data from the same buffer (Line
20), and sends commands to the device (Line 21). Notice that the
IoT camera requires a password to authenticate commands, and
the app performs a sanity check on the password string (Lines 5
and 6). This example shows two crucial challenges that have to
be faced when generating IoT inputs from the companion apps.
First, apps communicate with IoT devices using structured
data, encoded in either known protocols (e.g., HTTP), or custom
protocols defined by the vendor. Messages that do not respect
the expected format are immediately discarded by the device, and,
consequently, cannot trigger deep bugs in its code. In the example,
the app uses the function prepare_msg (Line 15) to create a
correctly structured message.
Second, while it is crucial to generate correctly structured
inputs, an effective approach has to avoid generating inputs that
are constrained by app-side validation code. In the example,
the function PTZ (Line 2) forbids the password to contain the
characters & and '. However, the presence of these characters
may be crucial in generating crash-triggering fuzzing inputs.
The insight from the authors of IoTFuzzer is to leverage the
companion app to generate fuzzing inputs in a format that the
device can process. This means that the input values need to be
mutated before the app “packages” and sends them to the device.
While this is true, our crucial insight is that the mutation indeed
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
485
has to occur before the app packages the inputs, but also after the
app performs any input validation. Note that, with the expression