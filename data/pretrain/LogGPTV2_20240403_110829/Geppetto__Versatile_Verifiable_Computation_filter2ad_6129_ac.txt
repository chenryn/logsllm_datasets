verifying the execution of Verifyσ(cid:3). For example, suppose an
authority the client trusts (e.g., the US FDA) cryptographically
◦
signs the veriﬁcation keys for Verifyσ(cid:3), and we deﬁne Verify
σ(cid:3)
to ﬁrst verify the signature on the keys before using them to
run Verifyσ(cid:3). If we use Geppetto’s option to make digests and
proofs perfectly hiding, then the veriﬁer checks a constant-sized
proof and learns that a trusted algorithm (for example, a medical
diagnosis) ran correctly over her data, but she learns nothing
about the algorithm. Thus, a client can efﬁciently and veriﬁably
outsource computations with proprietary algorithms.
We further observe that Verify
Although the general
idea of bootstrapping is well-
known [11, 53], its practicality relies on careful cryptographic
choices to support an efﬁcient embedding. Recent work [9] in-
stantiated and implemented an embedding that supports boot-
strapping an unbounded number of proofs but this generality
comes at a cost (§5).
In §5, we explore a pragmatic alternative that supports only
bounded-length schedules but can achieve better performance.
Intuitively, the construction is based on the observation that the
◦
algorithm Verify
σ(cid:3) described above, can itself be scheduled and
bootstrapped. In other words, given an initial CP scheme P ,
we deﬁne a second CP scheme P (cid:7) that veriﬁes a schedule for
P of length at most L. If our application requires a schedule
longer than L, we can deﬁne a third CP scheme P (cid:7)(cid:7) that con-
denses digests and proofs from P (cid:7). With enough levels, we can
ensure that the veriﬁer only receives a constant-sized digest and
proof, and hence only performs work linear in the overall com-
putation’s IO, regardless of how the prover decomposes F into
smaller functions. The overall protocol can be thought of as
a tree of proof schedules, where the arity of each node is L,
and as we move towards the root of the tree, each level con-
denses the digests and proofs from the nodes above it. Our full
paper [23] formalizes this process, adapting the usual proof-of-
a-proof bootstrapping techniques [11, 53].
Using multiple levels reduces both the key sizes and the
prover’s work. For example, suppose the application produces
N proofs for P . The na¨ıve approach of using a single recursive
level P (cid:7) would require a key capable of consuming all N proofs.
√
Instead, with multiple levels, we can design P (cid:7) to consume
N
proofs from P and design P (cid:7)(cid:7) to consume
N proofs from P (cid:7).
√
257257
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
cond
inputs
1-cond
cond
inputs
1-cond
if
circuit
×
else
circuit
×
+
++
+
outputs
×
if
circuit
×
else
circuit
+
++
+
outputs
Figure 3: Energy-Saving Circuits. Moving the multiplex step can
nullify expensive crypto operations, since at runtime, in one of the two
circuit blocks, every wire inside takes on the value zero.
√
N), instead of size N for a single
The resulting keys will be O(
recursive layer.
Our CP deﬁnitions and theorems (§3), as well as our compiler
(§6.4), support multiple-levels of bootstrapping through such
recursion. For example, our compiler (§6.4) rewrites source
programs to replace outsourced function calls by proof veriﬁ-
cation and can be called on its own output.
2.3 Energy-Saving Circuits
Existing veriﬁable computation systems represent a computa-
tion as a quadratic program (informally, a circuit), which results
in a program whose size reﬂects the worst-case computational
resources necessary over all possible inputs. For instance, when
branching on a runtime-value, Pinocchio’s prover interprets and
proves both branches and only then joins their results. Con-
cretely, the command if(b) {x = y} else {x=2*z} is ef-
fectively compiled as x = 2z + b*(y-2z), as shown generi-
cally in the left side of Figure 3. Similarly, if a loop has a static
bound of N iterations, the prover must perform work for all N,
even if the loop typically exits early.
Ideally, we would like to “turn off” parts of the circuit that
are not needed for a given input, much the same way hardware
circuits can power down parts not currently in use. Geppetto
achieves this by observing that in our cryptographic protocol,
there is no cryptographic cost for QAP variables that evalu-
ate to zero (however these variables still increase the degree of
the QAP, and hence the cost of the polynomial operations the
prover performs). Thus, if at compile-time we ensure that all
intermediate variables for the branch evaluate to 0 in branches
that are not taken, then at run-time there is no need to evalu-
ate those branches at all. The right side of Figure 3 shows an
example of how we achieve this for branches by applying the
condition variable to the inputs of each subcircuit, rather than
to the outputs. Thus, in contrast with Pinocchio, the prover only
does cryptographic work proportional to the path actually taken
through the program.
Prior compilers [49] use a related technique that applies the
condition variable to the equations in each branch, rather than to
the inputs. This avoids the need to interpret untaken branches,
but produces more constraints than Geppetto in the common
case when the branch contains more equations than inputs.
§6.5 explains how our compiler produces energy-saving cir-
cuits, while §7.4 quantiﬁes the signiﬁcant savings we recoup via
this technique.
3 Deﬁning Proof Composition
We now give formal cryptographic deﬁnitions for the concepts
introduced in §2, deferring our concrete protocol to §4.
3.1 Commit-and-Prove Schemes
As discussed in §2.1.1, Geppetto employs three types of digest,
one for F’s IO, one for the local variables for each Fi, and one
for each bus. Each digest, D, may hide the values it represents
via randomness o. Without hiding, we use a trivial opening
o = 0 (and may omit it). We require that all digests of bus values
be binding, as otherwise the prover could, say, use one set of
values for the bus when proving that F0 correctly wrote to the
bus, while using a different set of values when proving that F1
correctly read from the bus. In contrast, digests used only in a
single proof, e.g., for intermediate local variables, need not be
binding, since the veriﬁer only needs to know that there exists
an assignment of values to those variables corresponding to a
single correct execution. Finally, digests of IO naturally need
not be binding since the veriﬁer computes them herself.
As a side note, while Geppetto uses commit-and-prove
schemes to prove function executions, such schemes also en-
able interactive protocols where values are committed, used in
proofs, and opened dynamically. For instance, they easily inte-
grate with existing Σ-protocols as employed in anonymous cre-
dential systems [5, 17].
Since we are interested in succinct proofs, we modify earlier
deﬁnitions of commit-and-prove schemes [18, 26, 37] to only
consider computationally bounded adversaries. As a succinct
digest implies that more than one plaintext maps to a given di-
gest value, an unbounded adversary can always “escape” the
digest’s binding property.
Each MultiQAP Q(cid:3) in our construction deﬁnes a relation R
from the family R of all MultiQAPs over a ﬁxed ﬁeld F. As
our security deﬁnition has a security parameter λ ∈ N (which
intuitively determines the size of the ﬁeld F), we actually talk
about a sequence of families of polynomial-time veriﬁable rela-
tions {R λ}λ∈N.
Deﬁnition 2 (Succinct Commit-and-Prove) Consider (cid:2)-ary
polynomial-time veriﬁable relations {R λ}λ∈N on tuples χχχ of
a ﬁxed length (cid:2).
A succinct commit-and-prove scheme P = (KeyGen =
(KeyGen1, KeyGen2), Digest, Prove, Verify) for {R λ}λ∈N con-
sists of ﬁve polynomial-time algorithms as follows:
• Key generation is split into two probabilistic algorithms:
τ ← KeyGen1(1λ) takes the security parameter λ as input
and produces a trapdoor τ = (τS ,τE ) (independent of R
and consisting of a simulation and extraction component).
(EK,VK) ← KeyGen2(τ,R) takes the trapdoor and a rela-
tion R ∈ R λ as input and produces a public evaluation key
258258
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
b
,o(t)
b
← Digest(EKb,χ(t)
EK and a public veriﬁcation key VK. To simplify notation,
we assume that EK includes a copy of VK, and that EK
and VK include digest keys EKb and VKb for b ∈ [(cid:2)].
• D(t)
): Given an evaluation key for
b
b, message instance t for b (χ(t)
b ), and corresponding ran-
domness o(t)
b , the deterministic digest algorithm produces
b of χ(t)
a digest D(t)
b .
• π ← Prove(EK,χχχ,o): Given an evaluation key, messages
χχχ ∈ R, and openings o, the deterministic prove algorithm
returns a succinct proof π; i.e., |π| is poly(λ).
• {0,1} ← Verify(VKb,D(t)
): Given a veriﬁcation key for b,
the deterministic digest-veriﬁcation algorithm either re-
jects (0) or accepts (1) the digest D(t)
b .
• {0,1} ← Verify(VK,D,π): Given a veriﬁcation key and (cid:2)
digests D, the deterministic veriﬁcation algorithm either
rejects (0) or accepts (1) the proof π.
b
Proof-veriﬁcation guarantees apply only when each digest D(t)
b
in D either passes the digest-veriﬁcation algorithm or was com-
puted directly by the veriﬁer.
We deﬁne two security requirements below. Standard deﬁ-
nitions for correctness and zero-knowledge are in the full pa-
per [23]. First, we require that digests shared across multiple
proofs (i.e., those representing bus values) be binding, meaning
the prover cannot claim the digest represents one set of values in
the ﬁrst proof and a different set of values in the second proof.
We collect the indexes of their keys in what we call the binding
digest subset S ⊂ [(cid:2)].
Deﬁnition 3 (Binding) The commit-and-prove scheme P is
binding for (cid:2)-ary relations {R λ}λ∈N and binding digest sub-
set S ⊂ [(cid:2)], if for all efﬁcient A and any R ∈ R λ,
Pr[
τ ← KeyGen1(1λ);τ = (τS ,τE );
(EK,VK) ← KeyGen2(τ,R);
(cid:7)(cid:3) ← A(EK,R,τE ) :
(cid:2)
b,χ,o,χ(cid:7),o
χ (cid:5)= χ(cid:7) ∧ b ∈ S ∧
Digest(EKb,χ,o) = Digest(EKb,χ(cid:7),o
(cid:7))
] = negl(λ).
Second, we require that if an adversary creates a set of digests
and a proof that Verify accepts, then the adversary must “know”
a valid witness, in the sense that this witness can be successfully
extracted by “watching” the adversary’s execution. Note that
the trapdoor the extractor receives from KeyGen1 is generated
independently of relation R and hence cannot make it easier for
the extractor to produce its own witnesses.
Pr[
τ ← KeyGen1(1λ);τ = (τS ,τE );
(EK,VK) ← KeyGen2(τ,R);
(D,π;χχχ,o) ← (A(EK,R) (cid:12) E(EK,R,τE )) :
(cid:2)∃b ∈ [(cid:2)]. Verify(VKb,D(t)
(cid:2)∀b ∈ [(cid:2)]. Verify(VKb,D(t)
] = negl(λ).
b
b
(cid:5)= Digest(EKb,χ(t)
)∧ D(t)
,o(t)
(cid:3)
b
)∧ Verify(VK,D,π)∧ χχχ /∈ R
b
b
))∨
3.2 Composition by Scheduling
As discussed in §2, intuitively, we can verify the correct execu-
tion of a complex F by verifying simpler functions and using
digests to share state between them. We now formalize this in-
tuition by extending knowledge soundness to multiple related
proofs that share digests according to a proof schedule.
Deﬁnition 5 (Scheduled Knowledge Soundness) The commit
and-prove scheme P is scheduled knowledge sound for (cid:2)-ary
relations {R λ}λ∈N and binding digest subset S ⊂ [(cid:2)], if for all
efﬁcient A there is an efﬁcient extractor E taking the random
tape of A such that, for any R ∈ R λ,
Pr[ τ ← KeyGen1(1λ);
(EK,VK) ← KeyGen2(τ,R);
(σ,D,Π;χχχ,o) ← (A(EK,R) (cid:12) E(EK,R,τ)) :
∀D(t)
) ⇒ D(t)
(cid:2)∀D(t)
) ∧
(cid:3)
∀(i,t) ∈ σ. Verify(VK,D(t),πi)
⇒ ∀(i,t) ∈ σ. χχχ(t) ∈ R
] = 1− negl(λ),
where D(t) indicates a digest instance t for each bank b used in
a given proof (and default digests of 0 values for any bank not
used), and χχχ(t) represents the digested values.
Theorem 1 (Scheduled Knowledge Soundness) If a CP P is
knowledge sound and binding for (cid:2)-ary relations and binding
digest subset, then it is scheduled knowledge sound for the same
relations and subset.
∈ D. (Verify(VKb,D(t)
∈ D. Verify(VKb,D(t)