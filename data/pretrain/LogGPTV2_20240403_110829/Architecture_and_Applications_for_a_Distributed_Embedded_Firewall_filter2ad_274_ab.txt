3CR990 NICs take steps in that direction by combining
more functions onto fewer chips. The remaining assump-
tions for Claim 3 also apply for Claim 4. That is not a coin-
cidence. While we typically imagine the EFW NIC as being
managed remotely, the EFW policy server can protect itself
with an EFW NIC, which it will manage locally. The pro-
tection mechanisms implemented on the EFW NIC do not
distinguish whether the policy server is local or remote, and
the host enjoys no privileged access to the EFW NIC.
Similarly, the next two claims have identical supporting
assumptions.
(cid:1) All policy server/NIC communications is authenticated
by 3DES [Claim 9]
(cid:1) Only the EFW policy server and the EFW NIC possess
the cryptographic key [Claim 10]
The remaining assumption from Claims 3 and 4 is vali-
dated by the same controls.
Claim 8 Attackers cannot masquerade as the EFW policy
server, which assumes
(cid:1) All policy server/NIC communication is authenticated
by 3DES [Claim 9]
(cid:1) Only the EFW policy server and the EFW NIC possess
the cryptographic key [Claim 10]
The next claim deﬁnes the technology controls.
Claim 9 All policy server/NIC communication is authenti-
cated by 3DES, which assumes
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:01 UTC from IEEE Xplore.  Restrictions apply. 
(cid:1) The work factor to break 3DES is too high
3. Implementing EFW
The last claim deﬁnes the procedural and physical secu-
rity controls.
Claim 10 Only the EFW policy server and the EFW NIC
possess the cryptographic key, which assumes
(cid:1) Only authorized users can access the EFW policy
The high-level architecture for EFW is illustrated in Fig-
ure 2. The protected host may be a client workstation, a
server, or any other device that supports the NIC. The policy
server should be installed on a dedicated host and protected
by its own EFW NIC. The following sections describe the
components on each platform in greater detail.
server
(cid:1) EFW crypto keys are protected from compromise
2.2. Other Objectives
While most of the research behind EFW was funded
by the US Department of Defense (DoD), the DoD relies
increasingly on commercial-off-the-shelf solutions, so the
needs of DoD and the commercial marketplace are not dis-
similar. As a result, we also considered commercial via-
bility and commercial acceptance throughout this effort. In
addition to being secure, we determined that EFW needed
to be cost-effective, scalable and friendly to manage.
Cost-effective. The constraints of implementing on a NIC
prompted the motto: “fast, simple and cheap”. For perfor-
mance, a NIC has a tight processing loop, and our solution
had to ﬁt within those bounds. A NIC also has limited mem-
ory, so complex processing is performed elsewhere (e.g., on
the EFW policy server). Lastly, the 3CR990 NIC is rela-
tively inexpensive, and we did not want to alter that fact.
These NICs are already widely deployed, so modiﬁcations
to the existing hardware and its drivers were avoided at all
costs. We conﬁned our modiﬁcations to the NIC’s ﬁrmware.
Scalable. To facilitate commercial acceptance, it must be
possible for administrators to introduce EFW as little or as
much as they like. Initially, some administrators may prefer
to protect only a few critical servers; others may immedi-
ately deploy EFW to every client desktop along with a pol-
icy that enforces “good network hygiene”. The differences
between a large deployment (thousands of NICs) versus a
small one are minimized in the eyes of the administrator
through the use of management abstractions (explained in
Section 4). We also adopted a master/slave architecture be-
tween the policy server and its NICs.
Friendly to manage. To make EFW friendly to manage,
we created several administration tools, including a policy
editor, a EFW device (NIC) manager, and an audit logger
and event viewer. These tools rely on several abstractions
to reduce their complexity. Our objective was to make EFW
invisible to the end user and to incorporate familiar manage-
ment paradigms for the administrator.
EFW Policy Server
Management
Frontend
& SMNP MIB
Audit
Database
Policy
Database
Daemon
Daemon
&
&
EFW
(cid:1)
(cid:1)
NIC
Protected Host
EFW Helper Agent
Host OS
NIC Driver &
EFW Runtime Image
EFW NIC
(cid:1)
Audit Events
Policy Management Trafﬁc
Figure 2. EFW Architecture
3.1. EFW Components on the Protected Host
Three components reside on each protected host:
the
EFW-enhanced NIC, the NIC’s driver and runtime image,
and a non-security-critical helper agent.
EFW-enhanced NIC. The most important component
on the protected host is the NIC and its EFW-enhanced
ﬁrmware. EFW is based on the 3Com 3CR990 family of
NICs. We selected these NICs for several reasons. First,
they have an on-board processor and memory, which allows
the NIC to operate independently of the host operating sys-
tem. Second, they contain an on-board cryptographic en-
gine. This feature was included to support Windows 2000
IPSEC ofﬂoads, but EFW also leverages the crypto engine
to provide secure communications with the policy server.
Finally, these NICs are relatively inexpensive and widely
available.
Flashed onto the NIC during the EFW install, the EFW-
enhanced ﬁrmware contains the packet ﬁltering engine and
the management interface for the EFW policy server. The
packet ﬁlter can accept or reject packets according to the
standard parameters (source and destination address, source
and destination port range, IP protocol, packet direction,
etc.) as well as the value of the TCP SYN ﬂag (used for
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:01 UTC from IEEE Xplore.  Restrictions apply. 
connection initiation) and the presence of IP options. It can
also accept or reject fragmented packets and non-IP pack-
ets. Each ﬁlter rule can be conﬁgured to generate an audit
event. The management interface handles policy downloads
from the policy server and transmits audit events to the au-
dit server.
It is also responsible for managing the secure
channel with the policy server.
Driver and runtime image. The driver installed for a
EFW NIC is the unmodiﬁed commercial driver. Like sim-
ilar products, this NIC relies on its driver upon each host
reboot to download its runtime image into the ﬁrmware. To
ensure that a host remains protected, the EFW NIC stores
enough information in non-volatile memory to verify the
integrity of its runtime image. Once a NIC is conﬁgured for
EFW, it cannot be disabled except by performing the appro-
priate action on the policy server. In other words, the EFW
NIC will become inoperable if its runtime image fails the
integrity check.
Helper agent. The NIC must know its IP address in order
to enforce policy. In a DHCP environment, it will need the
host’s assistance to determine that address. A small helper
agent in user space performs this function. The helper agent
also sends regular heartbeats to the policy server to help the
policy server detect NICs that may not be functioning. Like
all other communications with the policy server, the heart-
beat is encrypted by the EFW NIC. If a malicious user were
to replace the EFW NIC with a vanilla NIC, the heartbeats
for that EFW NIC would effectively stop, raising the sus-
picions of the EFW administrator. The EFW NIC does not
rely on the helper agent for continued operation and will
continue to enforce policy even if the helper agent crashes
or is removed.
3.2. EFW Policy Server Components
The EFW policy server is composed of three main com-
ponents:
1. the management component, including the graphical
user interface (GUI), the SNMP management informa-
tion base (MIB) and the controller frontend,
2. the policy component, including the policy daemon
and the policy database, and
3. the audit component, including the audit daemon and
the audit database.
Management component. The management component
is described more fully in Section 4. Its main purpose is
to provide the administrator with the tools to create, view
and distribute policies to each EFW NIC. It also includes an
audit browser to review event logs. The MIB will support
future network management applications.
Policy component. The policy component takes the poli-
cies deﬁned using the management component and com-
piles them into ﬁlter rules for each NIC. This component
ensures that NICs enforce the policy to which they are as-
signed. When a NIC’s host is rebooted, the NIC requests
the current policy from the policy server. If the policy server
does not respond, the NIC “falls back” to enforce a simpler
policy. Currently the choices are: allow all trafﬁc, allow
all trafﬁc but prevent network snifﬁng, or deny all trafﬁc.
If a policy is modiﬁed, the policy component automatically
pushes the updated policy to the affected NICs. NICs that
are off-line during the policy push receive the policy once
they return on-line. The heartbeat generated by the host’s
helper agent informs the policy component of the policy that
the NIC is enforcing.
Audit component. The audit component receives audit
events from each NIC and stores them in a database for
browsing and searching by the management component.
Audit logs can also be exported to third-party tools for ad-
ditional analysis. As the arrows in Figure 2 imply, policy
updates from the policy component to the NIC are acknowl-
edged by the NIC; however, the audit component does not
acknowledge audit events generated by the NIC.
4. Managing EFW
EFW provides many useful abstractions to help the ad-
ministrator deﬁne and manage policies. This section de-
scribes those abstractions and discusses the challenges and
opportunities of managing distributed ﬁrewalls.
Abstractions. EFW divides protected hosts into policy
domains. A policy server can manage only one policy do-
main, although there may be multiple policy servers for
each domain. A policy domain might encompass an entire
organization or perhaps just one or two divisions within that
organization.
Within each policy domain, NICs are grouped by func-
tion into device sets. There might be one device set for man-
agers, another for the ﬁnance staff, etc. Device sets reduce
complexity by grouping together the NICs that are likely
to be assigned the same policy. So while there might be
thousands of NICs in a policy domain, there may only be a
dozen or so device sets. Each device set is assigned a sin-
gle policy, although a particular policy may be assigned to
multiple device sets.
Policies are composed of policy attributes and rules.
Policy attributes represent facts that apply across all rules
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:01 UTC from IEEE Xplore.  Restrictions apply. 
of the policy. For example, “the host is not allowed to spoof
its IP address”, or “fragmented packets are not permitted”.
EFW rules are similar to the packet ﬁlter rules found on
other ﬁrewalls. For convenience, rules can be grouped into
rule sets. If any rule in the rule set is modiﬁed, the changes
propagate to all policies that include the rule set.
EFW also supports audit and test mode. Audit can be set
for an entire policy or just for an individual rule. Test mode
works with audit to help the administrator understand the
effects of a policy or a single rule before it is actually en-
forced. For example, a rule that is in test mode will generate