[
]
to B. These values are all random according to the function of SSF
protocol, therefore, in the case of a corrupted A, the simulator S1
just chooses two integers α1, α2 from Z
2(cid:2) uniformly at random to
(cid:4) B
(cid:3)
simulate
, and in the case of a corrupted
(cid:3)
xπ (π (cid:9)(1))
B, the simulator S2 just do the same as S1 to simulate
,
xπ (π (cid:9)(2))
uniformly at random. A and B call TP to run the
(cid:4) A
function of SSF protocol with input [(cid:4)y1(cid:5) , (cid:4)y2(cid:5)] for outputting the
(cid:3)
(cid:3)
(cid:4) B
random permutation result [
] to A and
] to B. Clearly, S1 and S2 can do the
yπ (π (cid:9)(2))
yπ (π (cid:9)(1))
[
(cid:3)
same as above for simulation. A and B call TP to run the function
for outputting θ
xπ (π (cid:9)(1))
of ADD-CMP with input
to A and B. The case in which θ is assigned to 0 or 1 is randomly
given, as π (π (cid:9)(·)) is randomly selected. Thus, in the case of a cor-
rupted A or a corrupted B, the simulator just chooses a random
integer from {0, 1} to simulate θ . According to the composition
theory [15], combining the above analysis and the security of SSF
protocol and ADD-CMP, we can claim that SBC protocol is secure
(cid:2)
under the semi-honest adversaries model.
(cid:4) A ,
(cid:3)
xπ (π (cid:9)(2))
(cid:3)
yπ (π (cid:9)(1))
(cid:4)
(cid:3)
yπ (π (cid:9)(2))
(cid:4)
,
(cid:4) B ,
Theorem B.4. If SSF protocol and ADD-CMP are secure under the
semi-honest adversaries model, then SMS protocol is secure under the
semi-honest adversaries model.
Proof. The proof of Theorem B.4 is similar to that of Theorem
B.3. Due to space limitation, we only describe the outline of our
(cid:4) A
(cid:3)
xπ (π (cid:9)(i ))
proof. We assume A and B have access to a trusted party (TP)
which can realize the function of SSF protocol and ADD-CMP. The
(1 ≤ i ≤ n) can be simulated
exchanged messages
by randomly choosing the values αi (1 ≤ i ≤ n) at random from
2(cid:2) and θ can be simulated by choosing a random integer from
Z
{0, 1}. So we can claim that SMS protocol is secure under the semi-
honest adversaries model. Please see the technical report [8] for
(cid:2)
the detailed proof.
Theorem B.5. If SBC and SMS protocols are secure under the semi-
honest adversaries model, then SEED protocol is secure under the
semi-honest adversaries model.
Proof. The correctness is easy to see by recover dE D from the
output (cid:4)dE D (cid:5) and then inspecting it is actually equal to the edit dis-
tance between x and y. As for security, we present the security proof
in a hybrid model where A and B have access to a trusted party (TP)
which can realize the function of SBC and SMS protocols. A and B
call TP to run the function of SBC with input (cid:4)t1(cid:5) , (cid:4)xi (cid:5) , (cid:4)z0(cid:5) , (cid:4)z1(cid:5)
for outputting (cid:4)t3(cid:5) A
are
both random according to the function of SBC protocol (the output
is in the secret sharing form), therefore, in the case of a corrupted
A, the simulator S1 just chooses a integers α from Z
2l uniformly
at random to simulate (cid:4)t3(cid:5) A
. In the case of a corrupted B, the
simulator S2 do the same as S1 to simulate (cid:4)t3(cid:5) B
. A and B call TP
to run the function of SBC with input (cid:4)xi (cid:5) , (cid:4)t2(cid:5) , (cid:4)t3(cid:5) , (cid:4)z1(cid:5). Clearly,
(cid:4) A
S1 and S2 can do the same as above for simulation. A and B call
TP to run the function of SMS, the outputs of this function
to A and (cid:4)t3(cid:5) B
to B. (cid:4)t3(cid:5) A
and (cid:4)t3(cid:5) B
(cid:3)
di, j
and
are both random according to the function of SMS
protocol (the output is in the secret-sharing form), therefore, in
the case of a corrupted A or a corrupted B, S1 or S2 can do the
same as above for simulation. According to the composition theory,
combining the above analysis and the security of SBC and SMS
protocols, we can claim that SEED protocol is secure under the
(cid:2)
semi-honest adversaries model.
(cid:4) B
(cid:3)
di, j
Theorem B.6. If EQ-ADD is secure under the semi-honest adver-
saries model, then SAGSC protocol is secure under the semi-honest
adversaries model.
Proof. The proof of Theorem B.6 is similar to that of Theorem
B.3. Due to space limitation, we only describe the outline of our
proof. We assume A and B have access to a trusted party (TP) which
can realize the function of EQ-ADD. The messages (cid:4)χ (cid:5) B
can be
simulated by choosing a random integer from Z
2(cid:2) . So we can claim
that SAGSC protocol is secure under the semi-honest adversaries
model. Please see the technical report [8] for the detailed proof. (cid:2)
B.2 Security Analysis of SSQ-I and SSQ-II
Now, we prove Theorem 6.1 and Theorem 6.2 based on the above
theorems.
(cid:3)
(cid:4)
Ij
Proof. (Theorem 6.1) The correctness is easy to see by recover
Ij from the output
and then inspecting it does actually belong
to the index set of top-k results closed to query. As for security,
we present the security proof in a hybrid model where A and B
have access to a trusted party (TP) which can realize the function
of SSF, SEED protocols and ADD-CMP. A and B call TP to run the
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
and (cid:4)di (cid:5) B
and (cid:4)L2(cid:5) B
to B. (cid:4)di (cid:5) A
to A and (cid:4)L2(cid:5) B
to B. The values in (cid:4)L2(cid:5) A
function of SEED with input (cid:4)Q(cid:5) and (cid:4)Si (cid:5) for outputting (cid:4)di (cid:5) A
to
A and (cid:4)di (cid:5) B
are both random according to
the function of SEED protocol (the output is in the secret sharing
form), therefore, in the case of a corrupted A, the simulator S1 just
chooses a integers α from Z
2(cid:2) uniformly at random to simulate
(cid:4)di (cid:5) A
. In the case of a corrupted B, the simulator S2 do the same
as S1 to simulate (cid:4)di (cid:5) B
. A and B call TP to run the function of
SSF with input L1 for outputting the random permutation result
(cid:4)L2(cid:5) A
are
all random according to the function of SSF protocol, therefore,
in the case of a corrupted A, the simulator S1 just chooses the
values αi (1 ≤ i ≤ 2m) at random from Z
2(cid:2) to simulate the values
in (cid:4)L2(cid:5) A
, and in the case of a corrupted B, the simulator S2 just
(cid:3)
(cid:3)
(cid:4)
do the same as S1 to simulate the values in (cid:4)L2(cid:5) B
. A and B call
δj−1,1
δj,1
TP to run the function of ADD-CMP with input
for outputting the result public to A and B. The case in which the
result is assigned to 0 or 1 is randomly given, as π (π (cid:9)(·)) is randomly
selected. Thus, in the case of a corrupted A or a corrupted B, the
simulator just chooses a random integer from {0, 1} to simulate this
result. According to the composition theory, combining the above
analysis and the security of SSF, SEED protocols and ADD-CMP,
we can claim that secure query protocol in SSQ-I is secure under
(cid:2)
the semi-honest adversaries model.
(cid:4)
,
Proof. (Theorem 6.2) Similar to secure query protocol in SSQ-
II, the correctness is easy to see. As for security, we present the
security proof in a hybrid model where A and B have access to a
trusted party (TP) which can realize the function of SSF, SAGSC
protocols and ADD-CMP. A and B call TP to run the function of
(cid:3)
SAGSC with input (cid:4)Ql (cid:5) ,
to A and
χl, j
to B. The two values are both random according to the
function of SAGSC protocol, therefore, in the case of a corrupted A
(cid:3)
or B, the simulator just chooses a value α at random from Z
2(cid:2) to
. The remaining security proof is same
simulate
(cid:2)
as that in SSQ-I shown in the proof the Theorem 6.1.
for outputting to
(cid:3)
ul, j
(cid:4) A
(cid:4) A
(cid:4) B
(cid:4) B
χl, j
χl, j
(cid:4)
(cid:3)
(cid:3)
χl, j
or
Next, we demonstrate that SSQ-I can meet the desired privacy
requirements, which is trivially guaranteed by the security of our
protocols. (1) Data privacy: First of all, we recall that data owners
divide the data Si into two shares by additional secret sharing locally
before outsourcing them to the cloud servers. Since the secure query
protocol in SSQ-I is secure under semi-honest adversaries model, no
information is revealed to A and B, data privacy can be preserved.
(2) Query privacy: The query Q is the secret shared by the user
before sending to the cloud servers, and the secure query protocol is
secure under the semi-honest model. Therefore, A and B obtain no
information about Q expect the sequence length, the query privacy
is preserved. (3) Hiding data access patterns: In the stage of top-k
result return, the key-value pairs [(cid:4)i(cid:5) , (cid:4)di (cid:5)] are in secret sharing
form and permuted by SSF protocol, no one knows
’ position
in the original database. Therefore, A and B do not know which
data record belongs to the result. Thus, data access patterns are
protected from both A and B. In a similar fashion, we can prove
that the desired privacy properties can be achieved in SSQ-II.
(cid:3)
(cid:4)
Ij
C PERFORMANCE ANALYSIS
We first analyze the computational complexity of our five sub-
protocols and compare them with existing solutions [26], in which
the protocols are same as part of our protocols with a similar secu-
rity level, and then present the computation complexity of secure
query protocol in SSQ-I and SSQ-II. Refer to performance analysis
in [26], we only consider the expensive cryptographic primitives
including non-XOR gates computation, encryption, decryption, and
multiplication in Paillier cryptosystem. The detailed analysis is as
following:
SSF Protocol: In Algorithm 1, considering the encryptions per-
formed in line 4 and line 10, the decryptions performed in line 16
and line 20 and the multiplications performed in line 10, SSF_offline
totally requires 2n encryptions, 2n decryptions and n multiplica-
tions. In the online phase of SSF protocol, there is no expensive
cryptographic primitive.
SBC Protocol: In Algorithm 3, SSF is used twice to permute
a sequence with two elements in line 2 and line 3, which incurs
8 encryptions, 8 decryptions, and 4 multiplications. In line 4, an
ADD-CMP circuit is used to compare two values. It is important
to note that we apply free-XOR [24] technique for garbled circuits
optimization. Consequently, one ADD circuit contains (cid:2) non-XOR
gates, one CMP circuit contains (cid:2) non-XOR gates, so 3(cid:2) non-XOR
gates computation is required in our approach.
SMS Protocol: Based on the permuted sequence generated by
calling SSF protocol one time, an ADD-CMP circuit executed n −
1 times to get the minimum. Therefore, SMS totally requires 2n
encryptions, 2n decryptions n multiplications, and 3(cid:2)(n − 1) non-
XOR gates.
SEED Protocol: As shown in Algorithm 5, SBC is used twice to
select the branch and SMS is used once to compute minimum at
each iteration and the number of iterations is n1n2. Therefore, SEED
totally requires 22n1n2 encryptions, 22n1n2 decryptions 11n1n2
multiplications, and 12(cid:2)n1n2 non-XOR gates computation.
SAGSC Protocol: As we can see from Algorithm 6, the expen-
sive cryptographic primitive in SAGSC protocol is just an execution
of EQ-ADD circuit. As one EQ circuit contains (cid:2) − 1 non-XOR gates,
only 2(cid:2) − 1 non-XOR gates computation is required in SAGSC
protocol.
Secure Query Protocol in SSQ-I and SSQ-II: The computa-
tion complexity of secure query protocol in SSQ-I is bounded by
O(m) instantiations of SEED, O(1) instantiations of SSF and O(km)
instantiations of ADD-CMP. Therefore, the total computation com-
plexity is bounded by O(mn2) encryptions, decryptions, multiplica-
tions, and O(m(cid:2)(n2 + k)) non-XOR gates computation. The compu-
tation complexity of Secure Query Protocol in SSQ-II is bounded
by O(mtv) instantiations of SAGSC, O(1) instantiations of SSF, and
O(km) instantiations of ADD-CMP. Therefore, the total compu-
tation complexity is bounded by O(n) encryptions, decryptions,
multiplications, and O(m(cid:2)(tv + k)) non-XOR gates computation.