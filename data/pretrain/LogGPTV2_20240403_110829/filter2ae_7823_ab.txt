        print("send packet for testing Full-Cone NAT")
        array = data.decode("utf-8").split(":")
        caconn = (array[0], int(array[1]))
        sock.sendto("TEST FOR FULL-CONE NAT".encode("utf-8"), caconn)
        # send data to client through (server get) export ip and with different port
        sock.recvfrom(1024) # NEXT flag
        print("send packet for testing Restricted NAT")
        cdconn = (cconn[0], cconn[1] - 1)
        sock.sendto("TEST FOR Restricted NAT".encode("utf-8"), cdconn)
        # send data to client through (server get) export ip
        sock.recvfrom(1024) # NEXT flag
        print("send packet for testing Restricted-Port NAT")
        sock.sendto("TEST FOR Restricted-Port NAT".encode("utf-8"), cconn)
    # server()
    def assist(addr, serv):
        print("[NAT CHECK launch as assist on %s && server=%s]" %
                                                        (str(addr), str(serv)))
        # listen UDP service
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.bind(addr)
        # [1. check "Open Internet" and "Symmetric NAT"]
        # recevie client request and forward to server
        data, conn = sock.recvfrom(1024)
        print("assist get client info: %s" % str(conn))
        data = "%s:%d" % (conn[0], conn[1])
        sock.sendto(data.encode("utf-8"), serv)
        # [2. check "Full-Cone NAT", "Restricted NAT" and "Restricted-Port NAT"]
        # recevie client request and forward to server
        data, conn = sock.recvfrom(1024)
        print("assist get client info: %s" % str(conn))
        data = "%s:%d" % (conn[0], conn[1])
        sock.sendto(data.encode("utf-8"), serv)
    # assist()
    def client(serv, ast):
        print("[NAT CHECK launch as client to server=%s && assist=%s]" %
                                                        (str(serv), str(ast)))
        # [1. check "Open Internet" and "Symmetric NAT"]
        print("send data to server and assist")
        # get local address
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.connect(serv)
        localaddr = sock.getsockname()
        # send data to server and assist with same socket
        # and register so that the server can obtain the export ip
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.sendto("register".encode("utf-8"), serv)
        sock.sendto("register".encode("utf-8"), ast)
        # receive export ip from server
        data, conn = sock.recvfrom(1024)
        exportaddr = data.decode("utf-8")
        print("get export ip: %s, localaddr: %s" % (exportaddr, str(localaddr)))
        # check it is "Open Internet"
        if exportaddr.split(":")[0] == localaddr[0]:
            print("[Open Internet]")
            return
        # end if
        # receive another export ip (assist) from server
        data, conn = sock.recvfrom(1024)
        anotheraddr = data.decode("utf-8")
        print("get export ip(assist): %s, export ip(server): %s" % (anotheraddr, exportaddr))
        # check it is "Symmetric NAT"
        if exportaddr != anotheraddr:
            print("[Symmetric NAT]")
            return
        # end if
        # [2. check "Full-Cone NAT", "Restricted NAT" and "Restricted-Port NAT"]
        # send data to server and assist with different socket
        # receive the data sent back by the server through the export ip(assist) mapping
        ssock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        ssock.sendto("register".encode("utf-8"), serv)
        asock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        asock.sendto("register".encode("utf-8"), ast)
        asock.settimeout(5)
        try:
            data, conn = asock.recvfrom(1024)
            print("[Full-Cone NAT]")
            return
        except:
            pass
        # receive the data sent back by the server with different port
        ssock.sendto("NEXT".encode("utf-8"), serv)
        ssock.settimeout(5)
        try:
            data, conn = ssock.recvfrom(1024)
            print("[Restricted NAT]")
            return
        except:
            pass
        # receive the data sent back by the server
        ssock.sendto("NEXT".encode("utf-8"), serv)
        ssock.settimeout(5)
        try:
            data, conn = ssock.recvfrom(1024)
            print("[Restricted-Port NAT]")
        except:
            print("[Unknown, something error]")
    # client()
    def usage():
        print("Usage:")
        print("  python3 nat_check.py server [ip:port]")
        print("  python3 nat_check.py assist [ip:port] [server]")
        print("  python3 nat_check.py client [server] [assist]")
    # end usage()
    if __name__ == "__main__":
        if len(sys.argv)  3:
                array = sys.argv[3].split(":")
                address2 = (array[0], int(array[1]))
            else:
                usage()
                exit(0)
        # end if
        # server/client launch
        if role == "server":
            server(address1)
        elif role == "assist":
            assist(address1, address2)
        elif role == "client":
            client(address1, address2)
        else:
            usage()
    # end main()
> 实际网络往往都更加复杂，比如：防火墙、多层 NAT 等原因，会导致无法准确的探测 NAT 类型。
### 0x05 UDP穿透
在 NAT 的网络环境下，p2p 网络通信需要穿透 NAT 才能够实现。在熟悉 NAT 原理过后，我们就可以很好的理解如何来进行 NAT 穿透了。NAT
穿透的思想在于：如何复用 NAT 中的映射关系？
在 锥型NAT 中，同一个内网地址端口访问不同的目标只会建立一条映射关系，所以可以复用，而 对称型NAT 不行。同时，由于 TCP 工作比较复杂，在 NAT
穿透中存在一些局限性，所以在实际场景中 UDP 穿透使用得更广泛一些，这里我们详细看看 UDP 穿透的原理和流程。
> 我们以 `Restricted-Port NAT` 类型作为例子，因为其使用得最为广泛，同时权限也是最为严格的，在理解 `Restricted-Port
> NAT` 类型穿透后，`Full-Cone NAT` 和 `Restricted NAT` 就触类旁通了；  