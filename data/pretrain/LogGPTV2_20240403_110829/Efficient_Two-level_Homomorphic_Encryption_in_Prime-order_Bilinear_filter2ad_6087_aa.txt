title:Efficient Two-level Homomorphic Encryption in Prime-order Bilinear
Groups and A Fast Implementation in WebAssembly
author:Nuttapong Attrapadung and
Goichiro Hanaoka and
Shigeo Mitsunari and
Yusuke Sakai and
Kana Shimizu and
Tadanori Teruya
E(cid:27)icient Two-level Homomorphic Encryption in Prime-order
Bilinear Groups and A Fast Implementation in WebAssembly
Nuttapong Attrapadung
AIST
Tokyo, Japan
Goichiro Hanaoka
AIST
Tokyo, Japan
PI:EMAIL
PI:EMAIL
Yusuke Sakai
AIST
Tokyo, Japan
PI:EMAIL
Kana Shimizu
Waseda University
Tokyo, Japan
PI:EMAIL
Shigeo Mitsunari
Cybozu Labs, Inc.
Tokyo, Japan
PI:EMAIL
Tadanori Teruya
AIST
Tokyo, Japan
PI:EMAIL
ABSTRACT
We construct an e(cid:28)cient two-level homomorphic public-key en-
cryption in prime-order bilinear groups. Such a scheme supports
polynomially many homomorphic additions and one multiplica-
tion over encrypted data, similar to the cryptosystem of Boneh,
Goh, and Nissim (BGN, presented at TCC 2005), which was con-
structed in composite-order bilinear groups. Prior to our work, the
state-of-the-art for two-level homomorphic public-key encryption
is the Freeman scheme (presented at Eurocrypt 2010), which is in-
deed the prime-order realization of the BGN scheme. Our proposed
scheme signi(cid:27)cantly improves e(cid:28)ciency for almost all the aspects
of the Freeman scheme, while retains the same ciphertext sizes. Our
scheme is surprisingly simple as it is indeed (a concatenation of
two copies of) the ElGamal encryption “in the exponent” resided
in an asymmetric bilinear groups.
We provide a software implementation of our scheme in the x86
architecture. Besides this usual implementation, we also implement
our scheme in WebAssembly (wasm), which is a portable low-level
bytecode format; this allows our scheme to be run (very fast) on
any popular web browser, without any plugins required.
CCS CONCEPTS
• Security and privacy → Public key encryption;
KEYWORDS
Degree-2 homomorphic encryption, Prime-order pairing.
ACM Reference Format:
Nuttapong Attrapadung, Goichiro Hanaoka, Shigeo Mitsunari, Yusuke Sakai,
Kana Shimizu, and Tadanori Teruya. 2018. E(cid:28)cient Two-level Homomor-
phic Encryption in Prime-order Bilinear Groups and A Fast Implementation
in WebAssembly . In Proceedings of ACM Asia Conference on Computer and
Communications Security (ASIACCS’18). ACM, New York, NY, USA, 13 pages.
https://doi.org/10.1145/3196494.3196552
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:27)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:27)rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speci(cid:27)c permission and/or a
fee. Request permissions from permissions@acm.org.
ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196552
1 INTRODUCTION
1.1 Background
Homomorphic encryption is a versatile primitive, which is notably
useful for constructing various cryptographic protocols, e.g., [14–
16, 20, 40, 47]. It allows us not only to encrypt a message, but also to
compute over encrypted data, in such a way that given ciphertext,
one can compute another ciphertext that encrypts a function of the
messages encrypted in the given ciphertext.
There are several types of homomorphic encryption which in-
clude additively homomorphic encryption [18, 46, 48] and multiplica-
tively homomorphic encryption [51]. They respectively allow us to
the sum or the product of encrypted values that are encrypted in
given ciphertexts. However, a strong restriction of the above types
of schemes is that they only provide either addition or multiplica-
tion operation. Due to this restriction, it is di(cid:28)cult to implement
complicated functions only by using these types of homomorphic
encryption schemes. An alternative for the above two types of ho-
momorphic encryption is fully homomorphic encryption [13, 25, 27].
A fully homomorphic encryption scheme allows us in theory to
compute any function over an encrypted form. However, its e(cid:28)-
ciency is still not su(cid:28)ciently practical, and furthermore, a secure
parameter choice is considered in a state of on-going work.
For balancing functionality and e(cid:28)ciency, another type of homo-
morphic encryption, called leveled homomorphic encryption, is also
intensively studied [10, 11]. In particular, those based on bilinear
groups [9, 21] can be a plausible mitigation for the above dilemma.
A leveled homomorphic encryption scheme allows us to compute
many, say, an unbounded number of, addition over an encrypted
form, together with to compute a bounded number of multiplication.
Boneh, Goh, and Nissim (BGN) presented a leveled homomorphic
encryption scheme that allows a single multiplication over an en-
crypted form, using composite-order bilinear groups [9]. This type
is also called two-level homomorphic encryption, since it allows to
evaluate degree-2 polynomial over encrypted data. Freeman pre-
sented a prime-order variant of the BGN scheme [21]. Currently, to
the best of our knowledge, Freeman’s scheme can be considered as
one of the most practical homomorphic encryption schemes due to
the blend of its su(cid:28)ciently expressive functionality (of evaluating
degree-2 polynomial over encrypted data) and its e(cid:28)ciency (as
prime-order bilinear groups o(cid:29)er much better performances than
composite-order ones). Applications of two-level homomorphic
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea685Table 1: Improvement by our scheme over the Freeman
scheme (Fre10).
71%
25%
same
of Fre10
of Fre10
as Fre10
274%
400%
533%
faster than Fre10
faster than Fre10
as Fre10
Size∗
Public key
Secret key
Ciphertext
Time†
628%
Key generation
Encryption
103%
Hom. addition on level-1 CT same
Hom. addition on level-2 CT 1806% faster than Fre10
faster than Fre10
Hom. multiplication
Decryption on level-1 CT‡
faster than Fre10
Decryption on level-2 CT‡
faster than Fre10
Other Advantage
Discrete log type
∗ For size, “X% of Fre10” means sizeours = X100 · sizeFre10.
† For time, “Y% faster than Fre10” means timeours = 100
Y ·timeFre10.
‡ The decryption time comparison shown here shows only the
overhead that excludes the discrete logarithm part, which each
of both schemes performs once for each decryption.
§ All comparisons are measured on our experimental implemen-
tation (see Section 6).
Ours: (cid:27)xed vs Fre10: varied
encryption include evaluating DNF formula over ciphertexts [9],
two-server delegation of computation on encrypted data [12], and
server-aided secure function evaluation [12, 36].
Although the Freeman scheme is fairly practical, it is still sig-
ni(cid:27)cantly less e(cid:28)cient than standard public key encryption. For
example, its computational cost for decryption is more expensive
than that for ElGamal encryption (over elliptic curves). Thus, it is
desired to further improve e(cid:28)ciency of the Freeman scheme for
constructing practical systems.
1.2 Our Contribution
New E(cid:28)cient Scheme. In this paper, we propose a new two-level
homomorphic encryption scheme over prime-order bilinear groups
which is signi(cid:27)cantly more e(cid:28)cient than the Freeman scheme [21].
The improvements are summarized in Table 1. Speci(cid:27)cally, com-
paring our scheme to the Freeman scheme, encryption is around
103% faster, and decryption to level-1 and 2 ciphertexts (considering
the overhead that excludes discrete logarithm part, which is the
same) are around 400% and 533% faster, respectively. The public
key size and secrete key size of our proposed scheme is about 71%
and 25% of that of the Freeman scheme, respectively. Homomor-
phic addition (level-2), and multiplication is about 18 and 2.7 times
faster, respectively. See Section 6 for more detailed quantitative
comparison.1
1We note that the e(cid:28)ciency of the Freeman scheme [21] compared here is to the best
of our knowledge and it might be possible to have an optimized version of his scheme.
We do not pursue to optimize his scheme though.
We note a small advantage of our scheme over Freeman’s in an
engineering point of view. On one hand, in both schemes, decryp-
tion requires computing discrete logarithm over small exponent
spaces. On the other hand, our scheme only requires to compute the
discrete logarithm on a (cid:27)xed base ❕, which is a system-wide group
generator that can be reused among any users, while in the Free-
man scheme, discrete logarithm will be on a varied base vpk, which
is tied to each public key pk (for each user). This has an advan-
tage since e(cid:28)cient computations of discrete logarithm mostly use
“table look-up” approaches, and for the case of (cid:27)xed-base discrete
logarithm, this table can just be generated once and for all.
Implementations in x86 and WebAssembly. We provided a
software implementation of our scheme in the x86 architecture
and showed that it is very fast. For example, a multiplication over
ciphertexts can be done in about 1.35 milli-seconds (see Table 4).
Beside the x86 implementation, we also implemented our scheme
using WebAssembly (wasm) [31] and made a demo publicly avail-
able (see Section 6.3). Wasm is a portable size&load-time-e(cid:28)cient
low-level bytecode format. Hence, this can be run on popular web
browsers on computers or mobile phones without any plugins re-
quired. Our wasm implementation is also quite fast; for example,
a multiplication over ciphertexts can be done in about 18.3 milli-
seconds on the Safari web browser on an iPhone 7 (see Table 5).
1.3 Intuition and Our Scheme in a Nutshell
Our study starts from the following observation. Since the Free-
man scheme is constructed by transforming the BGN scheme via
Freeman’s generic method for converting a composite-order con-
struction into a prime-order construction, there may be a possibility
to directly transform the BGN scheme in a more customized man-
ner, or even more so, to directly construct a prime-order scheme
without even relying the structure of the BGN scheme. We follow
the latter idea, which we describe as follows.
Our scheme is very simple. In a nutshell, our basic scheme is
exactly the so-called Lifted ElGamal encryption scheme, which is
a variant of the ElGamal encryption [19] scheme where the mes-
sage is lifted to the exponent2. This is with one exception that our
scheme is de(cid:27)ned in an asymmetric pairing group, rather than an
ordinary group. A basic intuition in using pairing is for enabling
homomorphic multiplication. This very intuition is indeed similar
to the BGN scheme and the Freeman scheme; however, how we
use pairing to enable such multiplication is quite di(cid:29)erent. Intu-
itively, the BGN scheme essentially relies on a projection property
of composite-order pairing group: the purpose is to project “un-
wanted terms” (that is, random elements left after pairing) to zero,
and hence to leave only the multiplication of messages as a result.
Its prime-order version by Freeman also relies on such a prop-
erty, albeit via a generic functionality that mimics projection in
prime-order groups.3 In contrast, our approach does not rely on
such projection: we nullify unwanted terms directly in an algebraic
manner.4
2One of the (cid:27)rst appearances in the literature for this variant can be found in [17].
3A projection property had been available only in composite-order groups, and Free-
man [21] devised a tool to mimic it in prime-order groups.
4It might turn out that, in the end, our scheme may theoretically contain an implicit
use of projecting pairing; however, we do not pursue to formalize such theory but
rather proceed to focus on constructing an e(cid:28)cient homomorphic encryption scheme.
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea686More precisely, our basic scheme is as follows. Let (G1, G2, GT)
be an asymmetric pairing group with bilinear map e : G1 × G2 →
GT. Let ❕1 and ❕2 be a generator in G1 and G2, respectively. A
lifted-ElGamal ciphertext in G1 is C1 = (❕
) where m1 is
a message and s1 is a secret key, while r1 is the randomness of this
ciphertext. A ciphertext in G2 is C2 = (❕
) with similar
notations. To homomorphically multiply them, we simply apply
the pairing to the four possible pairs and obtain a new ciphertext
C = (c1, c2, c3, c4) as
2 ),
C =
m1+r1s1
r1
1 , ❕
1
m2+r2s2
r2
2 , ❕
2
m2+r2s2
r1
1 , ❕
2
r1
1 , ❕
e(❕
e(❕
r2