# Efficient Two-Level Homomorphic Encryption in Prime-Order Bilinear Groups and a Fast Implementation in WebAssembly

**Authors:**
- Nuttapong Attrapadung, AIST, Tokyo, Japan
- Goichiro Hanaoka, AIST, Tokyo, Japan
- Shigeo Mitsunari, Cybozu Labs, Inc., Tokyo, Japan
- Yusuke Sakai, AIST, Tokyo, Japan
- Kana Shimizu, Waseda University, Tokyo, Japan
- Tadanori Teruya, AIST, Tokyo, Japan

## Abstract
We present an efficient two-level homomorphic public-key encryption scheme in prime-order bilinear groups. This scheme supports polynomially many homomorphic additions and one multiplication over encrypted data, similar to the cryptosystem of Boneh, Goh, and Nissim (BGN) presented at TCC 2005, which was constructed in composite-order bilinear groups. Prior to our work, the state-of-the-art for two-level homomorphic public-key encryption was the Freeman scheme (presented at Eurocrypt 2010), which is the prime-order realization of the BGN scheme. Our proposed scheme significantly improves efficiency in almost all aspects of the Freeman scheme while maintaining the same ciphertext sizes. Our scheme is surprisingly simple, as it is essentially a concatenation of two copies of the ElGamal encryption "in the exponent" within an asymmetric bilinear group.

We provide a software implementation of our scheme on the x86 architecture. Additionally, we implement our scheme in WebAssembly (wasm), a portable low-level bytecode format, allowing it to run very fast on any popular web browser without requiring any plugins.

## CCS Concepts
- Security and privacy â†’ Public key encryption

## Keywords
- Degree-2 homomorphic encryption
- Prime-order pairing

## ACM Reference Format
Nuttapong Attrapadung, Goichiro Hanaoka, Shigeo Mitsunari, Yusuke Sakai, Kana Shimizu, and Tadanori Teruya. 2018. Efficient Two-Level Homomorphic Encryption in Prime-Order Bilinear Groups and a Fast Implementation in WebAssembly. In Proceedings of ACM Asia Conference on Computer and Communications Security (ASIACCS'18). ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3196494.3196552

## 1 Introduction

### 1.1 Background
Homomorphic encryption is a versatile primitive, notably useful for constructing various cryptographic protocols. It allows not only the encryption of a message but also the computation over encrypted data, such that given a ciphertext, one can compute another ciphertext that encrypts a function of the messages in the given ciphertext.

There are several types of homomorphic encryption, including additively homomorphic encryption and multiplicatively homomorphic encryption. These schemes allow the sum or product of encrypted values, respectively. However, they are limited to either addition or multiplication, making it difficult to implement complex functions. Fully homomorphic encryption (FHE) allows the computation of any function over encrypted data, but its efficiency is still impractical, and secure parameter choices are an ongoing area of research.

To balance functionality and efficiency, leveled homomorphic encryption has been studied, particularly those based on bilinear groups. A leveled homomorphic encryption scheme allows an unbounded number of additions and a bounded number of multiplications over encrypted data. The Boneh, Goh, and Nissim (BGN) scheme, using composite-order bilinear groups, allows a single multiplication over encrypted data. Freeman's scheme, a prime-order variant of BGN, is currently one of the most practical homomorphic encryption schemes due to its expressive functionality and efficiency.

Applications of two-level homomorphic encryption include evaluating DNF formulas over ciphertexts, two-server delegation of computation on encrypted data, and server-aided secure function evaluation. Although the Freeman scheme is practical, it is still less efficient than standard public key encryption, making further improvements desirable.

### 1.2 Our Contribution
**New Efficient Scheme:** We propose a new two-level homomorphic encryption scheme over prime-order bilinear groups, which is significantly more efficient than the Freeman scheme. The improvements are summarized in Table 1. Specifically, our scheme is around 103% faster for encryption, and decryption for level-1 and level-2 ciphertexts is around 400% and 533% faster, respectively. The public key and secret key sizes are about 71% and 25% of the Freeman scheme, respectively. Homomorphic addition (level-2) and multiplication are about 18 and 2.7 times faster, respectively.

**Engineering Advantage:** Our scheme requires computing the discrete logarithm on a fixed base, which can be reused among users, whereas the Freeman scheme requires a varied base tied to each public key. This allows for more efficient table look-up approaches in discrete logarithm computations.

**Implementations in x86 and WebAssembly:** We provide a software implementation of our scheme in the x86 architecture, demonstrating its speed. For example, a multiplication over ciphertexts takes about 1.35 milliseconds. We also implemented our scheme in WebAssembly (wasm), making a demo publicly available. Wasm is a portable, size- and load-time-efficient low-level bytecode format, allowing our scheme to run on popular web browsers without plugins. Our wasm implementation is also fast; for example, a multiplication over ciphertexts takes about 18.3 milliseconds on Safari on an iPhone 7.

### 1.3 Intuition and Our Scheme in a Nutshell
Our study starts with the observation that the Freeman scheme, constructed by transforming the BGN scheme via Freeman's generic method, might be improved by directly transforming the BGN scheme or constructing a prime-order scheme without relying on the BGN structure. We follow the latter idea.

Our scheme is simple: it is essentially the Lifted ElGamal encryption scheme, a variant of ElGamal encryption where the message is lifted to the exponent, defined in an asymmetric pairing group. Pairing is used to enable homomorphic multiplication. Unlike the BGN and Freeman schemes, which rely on a projection property to nullify unwanted terms, our approach nullifies these terms algebraically.

More precisely, let \((G_1, G_2, G_T)\) be an asymmetric pairing group with bilinear map \(e : G_1 \times G_2 \to G_T\). Let \(\alpha_1\) and \(\alpha_2\) be generators in \(G_1\) and \(G_2\), respectively. A lifted-ElGamal ciphertext in \(G_1\) is \(C_1 = (\alpha_1^{m_1 + r_1 s_1}, \alpha_1^{r_1})\), where \(m_1\) is the message, \(s_1\) is the secret key, and \(r_1\) is the randomness. A ciphertext in \(G_2\) is \(C_2 = (\alpha_2^{m_2 + r_2 s_2}, \alpha_2^{r_2})\) with similar notations. To homomorphically multiply them, we apply the pairing to the four possible pairs and obtain a new ciphertext \(C = (c_1, c_2, c_3, c_4)\) as:
\[ C = \left( e(\alpha_1^{m_1 + r_1 s_1}, \alpha_2^{m_2 + r_2 s_2}), e(\alpha_1^{m_1 + r_1 s_1}, \alpha_2^{r_2}), e(\alpha_1^{r_1}, \alpha_2^{m_2 + r_2 s_2}), e(\alpha_1^{r_1}, \alpha_2^{r_2}) \right) \]

This approach avoids the need for projection and simplifies the scheme, leading to significant efficiency gains.