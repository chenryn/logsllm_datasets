*/
8185
ta->ifta_lifr_name[LIFNAMSIZ-1]='\o';
8186
8187
connp=Q_TO_CONN(q);
8188
isv6 = connp->conn_af_isv6;
---
## Page 43
3.1发现漏洞29
8189
ipst =connp->conn_netstack->netstack_ip;
8190
8191
/*Disallows implicit create */
8192
ipif=ipif_lookup_on_name(ta->ifta_lifr_name,
8193
mi_strlen(ta->ifta_lifr_name),B_FALSE,&exists,isv6,
8194
connp->conn_zoneid,coNNP_To_wQ(connp)，mp，func，&error，ipst);
[..]
第8178行引I用了一个链接的STREAMS消息块，到了第8179行，用户控制
的IOCTL数据填充结构体ta。之后，调用函数ipif_lookup_on_name（）（见第8192
行）。函数ipif_lookup_on_name()的前两个参数来自结构体ta中的用户控制数据。
源代码文件uts/common/inet/ip/ip_if.c
函数ipif_lookup_on_name()
[..]
19116/*
19117
*Find an IPIF based on the name passed in.
Names can be of the
19118
*form（e.g.,1eo)，:（e.g.，leo:1)，
19119
*Thestringcan have forms like（e.g.,leo)，
19120
.(e.g.le0.foo)，or.(e.g.ip.tun3).
19121
*When there is no colon，the implied unit id is zero.must
19122
*correspond to the name of an IiL.(May be called as writer.)
19123
*/
19124 static ipif_t *
19125 ipif_lookup_on_name(char *name, size_t namelen,boolean_t do_alloc,
19126
booleant*exists，boolean_tisv6，zoneid_tzoneid,queue_t *q，
19127
mblk_t*mp，ipsq_func_t func，int *error，ip_stack_t*ipst)
19128{
[..]
19138
if (error != NULL)
19139
*error=0；
19154
/*Look for a colon in the name.*/
19155
endp = &name[namelen];
19156
fox（cp=endp;--cp>name;）{
19157
if（*cp ==IPIF_SEPARATOR_CHAR)
19158
break;
19159
{
19160
19161
if（*Cp == IPIF_SEPARATOR_CHAR）{
19162
/*
19163
*Reject any non-decimal aliases for logical
19164
*interfaces.Aliases with leading zeroes
19165
*are also rejected as they introduce ambiguity
19166
*in the naming of the interfaces.
19167
*In order to confirm with existing semantics，
19168
*and tonot break any programs/script relying
19169
*on thatbehaviour，if:oisconsideredtobe
19170
*a valid interface.
19171
*If alias has two or more digits and the first
19172
---
## Page 44
30第3章突破区域限制
19173
* is zero, fail.
19174
*/
19175
if（&cp[2]ifta_lifr_name,
8193
mi_strlen(ta->ifta_lifr_name),B_FALSE，&exists,isv6,
8194
connp->conn_zoneid,coNNP_To_wQ(connp)，mp，func，&error，ipst);
8195
if (ipif == NULL)
8196
return (error);
[..]
再看函数ip_extract_tunreq()，如果ipif_lookup_on_name()返回NULL，指
针ipif设为NULL（见第8192行）。因为ipif是NULL，第8195行的if语句返回
TRUE，执行第8196行。函数ip_extract_tunreq()返回至ip_process_ioctl()，返
回值error仍为0。
源代码文件uts/common/inet/ip/ip.c
函数
ip_process_ioctl()
[..]
26717
ci.ci_ipif = NULL;
[..]
26735
case TUN_CMD:
26736
/*
26737
*SIOC[GS]TUNPARAM appear here.ip_extract_tunreq returns
26738
*arefheldipif inci.ci_ipif
26739
*/
26740
exr =ip_extract_tunreq(q,mp，&ci.ci_ipif，ip_process_ioctl);
26741
if（err I=o）{
26742
ip_ioctl_finish(q, mp,err,IPI2MODE(ipip),NULL);
---
## Page 45
3.1发现漏洞31
26743
return;
26744
[..]
26788
err=（*ipip->ipi_func)(ci.ci_ipif，ci.ci_sin，q，mp,ipip，
26789
ci.ci_lifr);
[..]
看函数ip_process_ioctl()，因为ip_extract_tunreq()返回值是0（见第26740
行），变量err的值设为0。又因为err等于0，第26741行的if语句返回FALSE，
第26742和26743行没有执行。第26788行，ipip->ipi_func指向的函数（这里
是函数ip_sioctl_tunparam（））被调用，第一个参数ci.ci_ipif仍设置为NULL（见
第26717行）。
源代码文件uts/common/inet/ip/ip_if.c
函数ip_sioctl_tunparam()
[..]
9401int
9402 ip_sioctl_tunparam（ipif_t *ipif， sin_t *dummy_sin，queue_t *q，mblk_t *mp,
9403
ip_ioctl_cmd_t *ipip,void *dummy_ifreq)
9404{
[..]
9432
ill =ipif->ipif_ill;
[..]
因为函数ip_sioctl_tunparam（)的第一个参数是NULL，第9432行的引l用
ipif->ipif_ill可表示为NULL->ipif_ill，这是一个典型的空指针解引l用。如果
这个空指针解引用触发，整个系统将会因一个内核错误（kermelpanic）而崩溃。
（更多关于空指针解引用的信息见A.2节。）
到目前为止，结果总结如下。
口一个Solaris系统的非特权用户（unprivilegeduser）可以调用SIOCGTUNPARAM
IOCTL（见图3-3中的(1)）。
口如果这个传给内核的IOCTL数据被精心加工过（其中必须有一个接口名包
含冒号并紧跟字符0和一个任意数字），就可能触发空指针解引用（见图
3-3的（2)），从而导致系统崩溃（见图3-3中的（3)）
但是为什么这就会触发空指针解引用呢？到底是哪里的编程错误导致了这个
bug?
问题出在ipif_lookup_on_name()没有设置适当的错误状态就被迫返回它的调
用函数。
---
## Page 46
32第3章突破区域限制
它的调用者返回错误状态：通过函数的返回值（return（null））以及通过变量error
（*error！=o）。每次调用这个函数时，内核代码的作者必须确保这两个错误状态
都正确设置并且在调用函数里正确求值（evaluate）。这样编程容易出错，因此不
推荐这么做。本章所描述的漏洞就是从这样的代码中产生此类问题的极好例子。
内核
Interfacename
SIOCGTUNPARAM
IOCTL请求
(2)
nO1
3
(2)
NULL->ipif_ill
图3-3到目前为止的结果总结。在Solaris内核中，一个非特权用户
可触发空指针解引用而导致系统崩溃
源代码文件uts/common/inet/ip/ip_if.c
函数ipif_lookup_on_name(）
[..]
19124 staticipif_t *
19125ipif_lookup_on_name(char *name，size_t namelen,boolean_t do_alloc,
19126
boolean_t*exists，boolean_tisv6,zoneid_tzoneid,queue_t*q，
19127
mblk_t*mp，ipsq_func_t func，int *error,ip_stack_t*ipst)
19128{
[..]
19138
if (error I= NULL)
19139
*error=0;
[..]
19161
if （*cp
==IPIF_SEPARATOR_CHAR){
19162
/*
19163
*Reject any non-decimal aliases for logical
19164
*interfaces.Aliases with leading zeroes
19165
*are also rejected as theyintroduce ambiguity
19166
*in the naming of theinterfaces.
19167
*In order to confirm with existing semantics,
19168
*andtonotbreakanyprograms/scriptrelying
19169
*on that behaviour，if:o is considered to be
19170
*a valid interface.
---
## Page 47
3.1发现漏洞33
19171
19172
*If alias has two or more digits and the first
19173
*is zero, fail.
19174
*/
19175
if(&cp[2]ifta_lifr_name,
8193
mi_strlen(ta->ifta_lifr_name),B FALSE，&exists,isv6，
8194
connp->conn_zoneid，coNNP_TO_wQ(connp)，mp,func，&error，ipst);
8195
if（ipif==NULL)
8196
return (error);
[..]
回到函数ip_extract_tunreq()，错误状态返回至它的调用函数ip_process_
ioctl(）（见第8196行）。
源代码文件uts/common/inet/ip/ip.c
函数ip_process_ioctl()
[..]
26735
case TUN_CMD:
26736
/*
26737
*9
SIOC[GS]TuNPARAM appear here.ip_extract_tunreq returns
26738
*a refheid ipif in ci.ci_ipif
26739
*/
26740
err=ip_extract_tunreq(q,mp,&ci.ci_ipif，ip_process_ioctl);
26741
if（err!=o）{
26742
ip_ioctl_finish(q，mp，err，IPI2MODE(ipip)，NULL);
26743
return;
26744
[..]
26788
err=（*ipip->ipi_func)(ci.ci_ipif，ci.ci_sin，q， mp，ipip，
26789
ci.ci_lifr);
[..]
---
## Page 48
34第3章突破区域限制
然后在ip_process_ioctl()函数中，错误状态仍然为0。因此，第26741行的
if语句返回FALSE，内核继续执行函数的剩余部分，导致ip_sioctl_tunparam（）
函数中的空指针解引用。
多有意思的一个bug啊！
图3-4总结了这个空指针解引用bug涉及的函数调用关系。
(1)
(2)
ip_extract_tunreq)
ipiflookup_on_nameC)
(s)
(4)
(E)
ip_sioctLtunparam)
( (6)
个
空指针解引用