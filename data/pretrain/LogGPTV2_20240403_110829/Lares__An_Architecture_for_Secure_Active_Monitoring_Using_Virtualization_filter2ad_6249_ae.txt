we expect these to occur only during hardware fatal errors.
By assuming the use of a single CPU core per VM in our
prototype, we avoid the scenario in which an attacker could
use a second core to explicitly send an NMI to the one run-
ning trampoline code and interrupt the execution ﬂow. This
assumption also prevents the occurrence of other race con-
ditions involving multi-core architectures.
We acknowledge that some of the anti-circumvention
techniques mentioned above are very speciﬁc to the type
of hooking implemented. In particular, the kernel code and
data structures that link the actual system call event to the
SSDT hook itself, are relatively few and easy to protect, en-
abling us to create a protected chain. But in a more general
scenario, where hooks can be placed in code or arbitrary
data structures, creating an equivalent protection chain can
be more complicated. By patching kernel code whose exe-
cution precedes the execution of a code hook, for instance,
an attacker could jump around it. Existing solutions, such
as SecVisor [32], could be integrated with our architecture
to guarantee the kernel’s code integrity and avoid this type
of circumvention. Data hooks in arbitrary kernel data struc-
tures present a more interesting challenge because of data’s
volatile nature. But existing approaches like passive mon-
itoring of kernel control data structures [25], mediation of
changes to kernel data structures [38] and semantic integrity
checking [24] could be used to raise the bar for an attacker.
Although these techniques certainly help mitigate the more
generic circumvention problem, their kernel-pervasive na-
ture would add a signiﬁcant performance impact to the over-
all architecture. In this case, a compromise between secu-
rity and performance exists, which permits each application
to make an appropriate tradeoff given its needs.
7 Related Work
Partitioning and Isolation The isolation properties
provided by virtualization and their applications to security
were ﬁrst studied and formalized by Madnick and Dono-
van [19], Rushby [28], and Kelem [16]. More recently,
Garﬁnkel et al. [8] have shown how such properties can be
used to make OSes with different security requirements co-
exist in a single environment, by using a special-purpose
hypervisor. Ta-Min et al. [36] went further by partitioning
the OS system calls into an untrusted and a trusted domain
and routing them according to a policy. Our work is based
on a similar concept, except that we partition a single appli-
cation between domains and protect the components placed
in the untrusted one. Attention has also been given to isola-
tion enforcement by controlling inter-VM communication.
Sailer et al. [31] have integrated Mandatory Access Control
inside the Xen hypervisor for such purpose. The ongoing
XSM project [5] aims to create an access control framework
inside Xen which can be used to deploy similar solutions.
Passive Monitoring The exposure of traditional se-
curity monitors to attackers has motivated the creation of
isolated environments from where such monitoring can be
done safely. Petroni et al. ﬁrst proposed CoPilot, a co-
processor based kernel integrity monitor that runs in a PCI
card [23] and monitors kernel memory using DMA. This
work was later enhanced to include consistency checks at
higher semantic levels [24]. Others use virtualization to ac-
complish similar goals without the need for special hard-
ware. Garﬁnkel et al. proposed the technique of access-
ing and monitoring a system’s memory state, which be-
came known as virtual machine introspection [9]. This tech-
nique was later incorporated and further developed by other
projects related to attack replaying [15], passive control-
ﬂow integrity checking [25], and intrusion detection [18].
Payne et al. establish security requirements for secure VM
monitoring and describe the detailed mechanics of intro-
spection [22]. Despite its clear usefulness and widespread
adoption, introspection-based techniques are limited to pas-
sive system checks, which makes event-based monitoring
extremely difﬁcult. Our architecture uses memory intro-
spection to complement our protected hooking architecture.
Memory Protection Introspection’s passive nature im-
plies that it can only detect, not actually prevent integrity vi-
olations. Although the former certainly has value, in certain
situations the increased functionality provided by the later
may be desirable. Microsoft’s PatchGuard [20] attempts to
protect certain key kernel data structures from modiﬁcations
but fails to do so effectively. Their protection mechanism
is based in the same domain as the attacker, and therefore
prone to tampering. Seshadri et al. proposed a thin hyper-
visor which leverages the virtualization of memory to ef-
fectively protect kernel code and certain control ﬂow tran-
sitions [32]. Xu et al. use a similar technique to implement
245
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
an intra-kernel access control framework with which access
to kernel data structures can be controlled [38]. In Lares we
also use hypervisor-based memory protection, but with dif-
ferent goals. Whereas the projects above aim to protect the
entire kernel against certain classes of attacks, our protec-
tion infrastructure was built to protect the speciﬁc guest OS
kernel components necessary for active monitoring. More-
over, we manage to provide ﬁne-grained memory protection
for the guest OS without the need for special hardware, un-
like other approaches such as Mondrix [37].
Secure Code Execution Whereas memory protection
focuses on the prevention of integrity violations to mem-
ory state, code attestation ensures the correct execution of
code. Pioneer [33] implements veriﬁable code execution by
carefully constructing a self-checking piece of code which
is executed atomically inside an untrusted kernel. Our ap-
proach performs a similar task with the trampoline code by
disabling interrupts system-wide while the hook notiﬁca-
tion is processed and sent. Our task is easier than Pioneer’s,
however, since the memory protections that we use prevent
an intruder from modifying the code prior to its execution.
Hardware support for trusted code execution has been re-
cently introduced by the Intel Trusted Execution Technol-
ogy (TxT) [11] and AMD Secure Virtual Machine (SVM)
extensions [2], which provide stronger assurance for secure
code execution as well as reduce the complexity of systems.
Active monitoring Active monitoring has always
played an important role in systems security, due to its
event-driven nature and potential for real-time attack pre-
vention. Systems like anti-virus tools [35] and host-based
intrusion detection systems [7] commonly hook the OS
code/data and user applications to monitor events for sus-
picious behavior. Techniques such as system call interpo-
sition [26] and control ﬂow integrity [1] can be used by
such tools. Nevertheless, their fundamental limitation is
exposure to attackers, which makes them prone to tam-
pering. More recently, active monitors started leveraging
the isolation provided by virtualization. These include sys-
tems like VMScope [12], which provides system call trac-
ing ability. Dunlap et al.
actively logs all I/O activity
of a VM to enable VM backtracking and replay function-
ality, which can be used to analyze attacks [6]. Payne
et al.
intercept low-level guest disk activity at domain 0
to detect suspicious modiﬁcations to the ﬁle system [22].
Malware analysis tools [21, 39, 40] commonly make use
of instruction-level active monitoring by running VMs on
full-emulators like QEMU [4]. Taint-based malware anal-
ysis systems, such as Panorama [40], require the monitor-
ing of individual instructions to be able to trace memory
reads and writes. These techniques, nevertheless, are lim-
ited to low-level event monitoring, making them unsuitable
for tools that require access to a higher abstraction level.
Xenprobes [27] addresses this issue by providing a frame-
work through which hooks can be placed in arbitrary loca-
tions inside a VM. But as their focus is systems manage-
ment, they do not worry about protecting their hooks.
This analysis shows that none of the existing active
monitoring solutions provide both a protected and ﬂexi-
ble hooking infrastructure with acceptable performance. As
event-driven security tools migrate into virtualized environ-
ments [34], the need for such solutions will grow.
8 Conclusions
Active monitoring is needed to support state-of-the-art
host-based security applications such as intrusion detection
and anti-virus tools. However, as recent research has fo-
cused on moving security applications into an isolated VM,
the resulting architectures do not support active monitoring.
Lares addresses this problem by giving security tools the
ability to do active monitoring while still beneﬁting from
the increased security of an isolated virtual machine. Our
security analysis shows that Lares provides security suit-
able for deployment on production systems. And our per-
formance evaluation shows that Lares’ overall impact on
system performance is small. The Lares architecture is gen-
erally applicable to any application that requires secure ac-
tive monitoring.
Acknowledgments
This material is based upon work supported in part by
the National Science Foundation under Grant No. CNS-
0627430. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the
author(s) and do not necessarily reﬂect the views of the Na-
tional Science Foundation.
References
[1] M. Abadi, M. Budiu, and ´U. E. J. Ligatti. Control-Flow In-
tegrity. In Proceedings of the ACM Conference on Computer
and Communications Security, 2005.
[2] Advanced Micro Devices. Amd64 architecture program-
mer’s manual volume 2: System programming, 2007.
[3] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A secure and
reliable bootstrap architecture. In Proceedings of the IEEE
Symposium on Computer Security and Privacy, 1997.
[4] F. Bellard. QEMU, a Fast and Portable Dynamic Transla-
tor. In Proceedings of the 2005 USENIX Annual Technical
Conference, 2005.
[5] G. Coker. Xen security modules (XSM). Presented at the
2007 Xen Summit.
[6] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M.
Chen. Revirt: Enabling intrusion analysis through virtual-
machine logging and replay.
In Proceedings of the Sym-
posium on Operating Systems Design and Implementation,
2002.
[7] S. Forrest, A. S. Perelson, L. Allen, and R. Cherukuri. Self-
nonself discrimination in a computer. In Proceedings of the
246
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
IEEE Symposium on Research in Security and Privacy, Los
Alamitos, CA, USA, 1994.
[8] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A virtual machine-based platform for
trusted computing. In Proceedings of ACM Symposium on
Operating Systems Principles, 2003.
[9] T. Garﬁnkel and M. Rosenblum. A virtual machine intro-
spection based architecture for intrusion detection. In Pro-
ceedings of the Network and Distributed Systems Security
Symposium, 2003.
[10] G. Hoglund. Rootkits: Subverting the Windows Kernel. Ad-
dison Wesley, 2005.
[11] Intel Corporation. Intel trusted execution technology, 2007.
“Out-of-the-Box” monitoring of
[12] X. Jiang and X. Wang.
In Proceedings of
VM-based high-interaction honeypots.
the International Symposium on Recent Advances in Intru-
sion Detection, 2007.
[13] X. Jiang, D. Xu, and X. Wang. Stealthy malware detec-
tion through VMM-based “Out-of-the-Box” semantic view
reconstruction. In Proceedings of the ACM Conference on
Computer and Communications Security, 2007.
[14] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-
Dusseau. Antfarm: Tracking processes in a virtual machine
environment. In Proceedings of the USENIX Annual Tech-
nical Conference, June 2006.
[15] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detect-
ing past and present intrusions through vulnerability-speciﬁc
predicates. In Proceedings of ACM Symposium on Operat-
ing Systems Principles (SOSP), 2005.
[16] N. L. Kelem and R. J. Feiertag. A separation model for vir-
tual machine monitors. In Proceedings of the IEEE Sympo-
sium on Research in Security and Privacy, 1991.
[17] S. T. King, P. M. Chen, Y.-M. Wang, C. Verbowski, H. J.
Wang, and J. R. Lorch. SubVirt: Implementing malware
with virtual machines. In IEEE Symposium on Security and
Privacy, 2006.
[18] K. Kourai and S. Chiba. Hyperspector: Virtual distributed
monitoring environments for secure intrusion detection. In
Proceedings of the ACM/USENIX International Conference
on Virtual Execution Environments, 2005.
[19] S. E. Madnick and J. J. Donovan. Application and analysis
of the virtual machine approach to information system secu-
rity and isolation. In Proceedings of the Workshop on Virtual
Computer Systems, 1973.
[20] Microsoft Corporation. Kernel patch protection: Frequently
http://www.microsoft.com/
asked questions.
whdc/driver/kernel/64bitpatch FAQ.mspx.
[21] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple
execution paths for malware analysis. In Proceedings of the
IEEE Symposium of Security and Privacy, 2007.
[22] B. D. Payne, M. Carbone, and W. Lee. Secure and ﬂexi-
ble monitoring of virtual machines. In Proceedings of the
Annual Computer Security Applications Conference, 2007.
[23] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh.
Copilot - a coprocessor-based kernel runtime integrity mon-
itor. In Proceedings of the 13th USENIX Security Sympo-
sium, August 2004.
[24] N. L. Petroni, Jr., T. Fraser, A. Walters, and W. A. Arbaugh.
An architecture for speciﬁcation-based detection of seman-
tic integrity violations in kernel dynamic data. In Proceed-
ings of the USENIX Security Symposium, 2006.
[25] N. L. Petroni, Jr. and M. Hicks. Automated detection of
persistent kernel control-ﬂow attacks. In Proceedings of the
ACM Conference on Computer and Communications Secu-
rity, 2007.
[26] N. Provos. Improving host security with system call poli-
cies. In Proceedings of the 12th USENIX Security Sympo-
sium, 2003.
[27] N. A. Quynh and K. Suzaki. Xenprobe: A lightweight
user-space probing framework for xen virtual machine. In
Proceedings of the USENIX Annual Technical Conference,
2007.
[28] J. M. Rushby. Proof of separability: A veriﬁcation technique
for a class of security kernels. Lecture Notes in Computer
Science, 137:352 – 357, April 1982.
[29] J. Rutkowska. Rootkit hunting vs. compromise detection. In
Proceedings of Black Hat Federal, 2006.
[30] J. Rutkowska. Subverting vista kernel for fun and proﬁt. In
Proceedings of Black Hat USA, 2006.
[31] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez,
S. Berger, J. Grifﬁn, and L. van Doorn. Building a mac-
based security architecture for the xen opensource hypervi-
sor. In Proceedings of the 21st Annual Computer Security
Applications Conference (ACSAC), December 2005.
[32] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A
tiny hypervisor to provide lifetime kernel code integrity for
commodity OSes. In Proceedings of the ACM Symposium
on Operating System Principles, 2007.
[33] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and
P. Khosla. Pioneer: Verifying integrity and guaranteeing ex-
ecution of code on legacy platforms. In Proceedings of ACM
Symposium on Operating Systems Principles, 2005.
[34] Symantec Corporation. Symantec Virtual Security Solution
and PCs with Intel vPro Technology, 2007.
[35] P. Szor. The Art of Computer Virus Research and Defense.
Symantec Press, 2005.
[36] R. Ta-Min, L. Litty, and D. Lie. Splitting Interfaces: Making
Trust Between Applications and Operating Systems Conﬁg-
urable. In Proceedings of the Symposium on Operating Sys-
tems Design and Implementation, 2006.
[37] E. Witchel, J. Rhee, and K. Asanovic. Mondrix: Memory
Isolation for Linux using Mondriaan Memory Protection. In
Proceedings of the ACM Symposium on Operating Systems
Principles, 2005.
[38] M. Xu, X. Jiang, R. Sandhu, and X. Zhang. Towards a vmm-
based usage control framework for os kernel integrity pro-
tection. In Proceedings of the Symposium on Access control
Models and Technologies, 2007.
[39] H. Yin, Z. Liang, and D. Song. HookFinder: Identifying and
understanding malware hooking behaviors. In Proceedings
of the Network and Distributed Systems Security Symposium
(NDSS), February 2008.
[40] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Cap-
turing system-wide information ﬂow for malware detection
and analysis.
In Proceedings of the ACM Conference of
Computer and Communication Security, 2007.
247
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply.