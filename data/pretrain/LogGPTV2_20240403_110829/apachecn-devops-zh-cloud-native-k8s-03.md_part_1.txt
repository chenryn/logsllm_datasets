# 三、在 Kubernetes 上运行应用容器
本章全面概述了 Kubernetes 提供的最小乐高积木 Pod。包括对 podbspec YAML 格式和可能的配置的解释，以及对 Kubernetes 如何处理和调度 Pods 的快速讨论。Pod 是在 Kubernetes 上运行应用的最基本方式，用于所有高阶应用控制器。
在本章中，我们将涵盖以下主题:
*   什么是 PODS？
*   命名空间
*   PODS 的生命周期
*   Pod 资源规格
*   Pod 调度
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机，以及一个工作正常的 Kubernetes 集群。参见 [*第一章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，了解几种快速与 Kubernetes 一起起床跑步的方法，以及如何安装`kubectl`工具的说明。
本章中使用的代码可以在本书的 GitHub 存储库中找到，链接如下:
[https://github . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 3](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter3)
# 什么是 PODS？
Pod 是 Kubernetes 中最简单的计算资源。它指定一个或多个容器由一个节点上的 Kubernetes 调度程序启动和运行。Pods 有许多潜在的配置和扩展，但仍然是在 Kubernetes 上运行应用的最基本方式。
重要说明
Pod 本身并不是在 Kubernetes 上运行应用的好方法。为了利用像 Kubernetes 这样的容器编排者的真正能力，Pods 应该像 fdisposable 一样对待。这意味着要像对待牛一样对待容器(也就是 PODS)，而不是宠物。为了真正利用容器和 Kubernetes，应用应该在自我修复、可扩展的组中运行。Pod 是这些组的构建模块，我们将在后面的章节中讨论如何以这种方式配置应用。
# 实现 Pods
Pods 是使用 Linux 隔离原则(如组和名称空间)实现的，通常可以将视为逻辑主机。Pods 运行一个或多个容器(可以基于 Docker、CRI-O 或其他运行时)，这些容器可以以虚拟机上不同进程可以通信的相同方式相互通信。
为了让两个不同的 Pod 中的容器进行通信，它们需要通过另一个 Pod 的 IP 访问另一个 Pod(和容器)。默认情况下，只有在同一个 Pod 上运行的容器才能使用较低级别的通信方法，尽管可以将不同的 Pod 配置为通过主机 IPC 相互通信。
## Pod 范例
在最基本的层面，有两种类型的 Pods:
*   单容器 PODS
*   多容器 Pod 
通常，最佳做法是每个 Pod 包含一个容器。这种方法允许您分别扩展应用的不同部分，并且在创建一个启动和运行都没有问题的 Pod 时，通常会使事情变得简单。
另一方面，多容器 Pods 更复杂，但在各种情况下都很有用:
*   如果应用的多个部分运行在不同的容器中，但又紧密耦合，您可以在同一个 Pod 中运行它们，以实现无缝通信和文件系统访问。
*   当实现 *sidecar* 模式时，在主应用旁边注入实用程序容器来处理日志记录、度量、网络或高级功能，如服务网格(更多信息请参见 [*第 14 章*](14.html#_idTextAnchor307)*服务网格和无服务器*)。
下图显示了一个常见的边车实现:
![Figure 3.1 – Common sidebar implementation](img/B14790_03_001.jpg)
图 3.1–常见侧边栏实现
在这个例子中，我们有一个带有两个容器的 Pod:运行 web 服务器的应用容器，以及从我们的服务器 Pod 提取日志并将它们转发到我们的日志记录基础设施的日志记录应用。这是 sidecar 模式的一个非常适用的用法，尽管许多日志收集器是在节点级别工作的，而不是在 Pod 级别，所以这不是一种在 Kubernetes 中从我们的应用容器收集日志的通用方式。
## Pod 网络
正如我们刚刚提到的，pod 有自己的 IP 地址，可以用于 pod 间的通信。每个容器都有一个 IP 地址和端口，如果有多个容器，则在一个容器中运行的容器之间共享。
正如我们之前提到的，在 Pod 中，容器可以在不调用包装 Pod 的 IP 的情况下进行通信——相反，它们可以简单地使用 localhost。这是因为 Pod 中的容器共享一个网络名称空间——本质上，它们通过相同的*桥*进行通信，该桥使用虚拟网络接口实现。
## 荚果贮藏
Kubernetes 中的存储本身就是一个很大的话题，我们将在 [*第 7 章*](07.html#_idTextAnchor166)*Kubernetes 上的存储*中对其进行深入的回顾–但目前，您可以将 Pod 存储视为连接到 Pod 的持久或非持久卷。非持久卷可以由 Pod 用来存储数据或文件，具体取决于类型，但是当 Pod 关闭时，它们会被删除。持久类型的卷在 Pod 关闭后仍将保留，甚至可以用于在多个 Pod 或应用之间共享数据。
在我们继续讨论 Pods 之前，我们将花一点时间来讨论名称空间。由于我们将在使用 Pods 的过程中使用`kubectl`命令，所以了解名称空间如何与 Kubernetes 和`kubectl`联系在一起非常重要，因为这可能是一个很大的“陷阱”
## 命名空间
我们在*第 1 章*、*与 Kubernetes* 交流中关于授权的章节中简要讨论了名称空间，但是我们将在这里重申并扩展它们的目的。名称空间是在集群中逻辑上分隔不同区域的一种方式。一个常见的用例是每个环境有一个命名空间——一个用于开发，一个用于暂存，一个用于生产——所有这些都位于同一个集群中。
正如我们在*授权*一节中提到的，可以按名称空间指定用户权限，例如，允许用户将新的应用和资源部署到`dev`名称空间，但不部署到生产中。
在您正在运行的集群中，您可以通过运行`kubectl get namespaces`或`kubectl get ns`来查看存在哪些名称空间，这将导致以下输出:
```
NAME          STATUS    AGE
default       Active    1d
kube-system   Active    1d
kube-public   Active    1d
```
要强制创建名称空间，您可以简单地运行`kubectl create namespace staging`，或者使用以下 YAML 资源规范运行`kubectl apply -f /path/to/file.yaml`:
Staging-ns.yaml
```
apiVersion: v1
kind: Namespace
metadata:
  name: staging
```
正如你所看到的，一个`Namespace`规格非常简单。让我们继续讨论一些更复杂的东西 PodSpec 本身。
## PODS 的生命周期
要快速查看集群中正在运行哪些 Pods，您可以运行`kubectl get pods`或`kubectl get pods --all-namespaces`分别获取当前命名空间(由您的`kubectl`上下文定义，或者默认命名空间(如果未指定)或所有命名空间中的 Pods。
`kubectl get pods`的输出是这样的:
```
NAME     READY   STATUS    RESTARTS   AGE
my-pod   1/1     Running   0          9s
```
如您所见，Pod 有一个`STATUS`值，它告诉我们 Pod 当前处于哪种状态。
Pod 状态的值如下:
*   **运行**:在`Running`状态下，一个 Pod 已经成功地旋转了它的容器，没有出现任何问题。如果 Pod 只有一个容器，并且处于`Running`状态，则该容器尚未完成或退出其流程。它也可能正在重新启动，你可以通过查看`READY`栏来了解。例如，如果`READY`值为`0/1`，这意味着 Pod 中的容器当前没有通过健康检查。这可能有多种原因:容器可能仍在旋转，数据库连接可能不起作用，或者一些重要的配置可能会阻止应用进程启动。
*   **成功**:如果你的 Pod 容器被设置为运行一个可以完成或退出的命令(不是一个长时间运行的命令，比如启动一个网络服务器)，如果那些容器已经完成了它们的进程命令，Pod 将显示`Succeeded`状态。
*   **待定** : `Pending`状态表示 Pod 中至少有一个容器正在等待的映像。这可能是因为容器映像仍在从外部存储库中获取，或者因为 Pod 本身正在等待`kube-scheduler`的调度。
*   **未知**:状态`Unknown`意味着 Kubernetes 无法判断 Pod 实际处于什么状态。这通常意味着 Pod 所在的节点正在经历某种形式的错误。它可能磁盘空间不足，与群集的其他部分断开连接，或者遇到问题。
*   **故障**:在`Failed`状态下，Pod 中的一个或多个容器以故障状态终止。此外，Pod 中的其他容器必须在成功或失败时终止。由于集群移除 Pods 或容器应用内部的某些东西破坏了进程，这可能会由于各种原因而发生。
## 了解 Pod 资源规格
由于 Pod 资源规范是我们真正挖掘的第一个规范，我们将花时间详细描述 YAML 文件的各个部分以及它们是如何结合在一起的。
让我们从一个完全符合规格的 Pod 文件开始，然后我们可以挑选出来并查看:
单引擎舱 yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
  namespace: dev
  labels:
    environment: dev
  annotations:
    customid1: 998123hjhsad 
spec:
  containers:
  - name: my-app-container
    image: busybox
```
这个 Pod YAML 文件比我们在第一章中看到的文件稍微复杂一些。它展示了一些新的 Pod 功能，我们将很快回顾。
### API 版本
让我们从第 1 行开始:`apiVersion`。正如我们在 [*第 1 章*](01.html#_idTextAnchor016)*中提到的，与 Kubernetes* 通信，`apiVersion`告诉 Kubernetes 在创建和配置您的资源时应该查看哪个版本的 API。Pods 在 Kubernetes 已经存在很长时间了，所以 PodSpec 被固化为 API 版本`v1`。除了版本名之外，其他资源类型可能还包含组名，例如，Kubernetes 中的 CronJob 资源使用`batch/v1beta1` `apiVersion`，而 Job 资源使用`batch/v1` `apiVersion`。在这两种情况下，`batch`对应于 API 组名。
### 种类
`kind`值对应于 Kubernetes 中资源类型的实际名称。在这种情况下，我们是试图规范出一个 PODS，所以这就是我们所放的。`kind`值总是在骆驼的情况下，比如`Pod`、`ConfigMap`、`CronJob`等等。
重要说明
关于`kind`值的完整列表，请查看位于[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)的官方 Kubernetes 文档。新版本中增加了新的 Kubernetes `kind`值，因此本书中回顾的可能不是一个详尽的列表。
### [计]元数据
元数据是一个顶级键，其下面可以有几个不同的值。首先，`name`是资源名称，这是资源将通过`kubectl`显示的内容，以及它在`etcd`中存储的内容。`namespace`对应于应该在其中创建资源的命名空间。如果在 YAML 规范中没有指定名称空间，资源将在`default`名称空间中创建，除非在`apply`或`create`命令中指定了名称空间。
接下来，`labels`是用于向资源添加元数据的键值对。`labels`与其他元数据相比很特殊，因为默认情况下，它们在 Kubernetes 原生`selectors`中用于过滤和选择资源，但它们也可以用于自定义功能。
最后，`metadata`模块可以作为多个`annotations`的主机，像`labels`一样，控制器和定制的 Kubernetes 功能可以使用这些模块来提供额外的配置和特定于功能的数据。在这个 PodSpec 中，我们在元数据中指定了几个注释:
带有注释的 pod . YAML
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
  namespace: dev
  labels:
    environment: dev
  annotations:
    customid1: 998123hjhsad
    customid2: 1239808908sd 
spec: