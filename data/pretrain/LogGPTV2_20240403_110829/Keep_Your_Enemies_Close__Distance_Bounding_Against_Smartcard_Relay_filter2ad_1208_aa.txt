title:Keep Your Enemies Close: Distance Bounding Against Smartcard Relay
Attacks
author:Saar Drimer and
Steven J. Murdoch
Keep Your Enemies Close:
Distance Bounding Against Smartcard Relay Attacks
Saar Drimer and Steven J. Murdoch
Computer Laboratory, University of Cambridge
http://www.cl.cam.ac.uk/users/{sd410, sjm217}
Abstract
Modern smartcards, capable of sophisticated cryptogra-
phy, provide a high assurance of tamper resistance and
are thus commonly used in payment applications. Al-
though extracting secrets out of smartcards requires re-
sources beyond the means of many would-be thieves,
the manner in which they are used can be exploited for
fraud. Cardholders authorize ﬁnancial transactions by
presenting the card and disclosing a PIN to a terminal
without any assurance as to the amount being charged
or who is to be paid, and have no means of discerning
whether the terminal is authentic or not. Even the most
advanced smartcards cannot protect customers from be-
ing defrauded by the simple relaying of data from one
location to another. We describe the development of
such an attack, and show results from live experiments
on the UK’s EMV implementation, Chip & PIN. We dis-
cuss previously proposed defences, and show that these
cannot provide the required security assurances. A new
defence based on a distance bounding protocol is de-
scribed and implemented, which requires only modest
alterations to current hardware and software. As far as
we are aware, this is the ﬁrst complete design and imple-
mentation of a secure distance bounding protocol. Fu-
ture smartcard generations could use this design to pro-
vide cost-effective resistance to relay attacks, which are a
genuine threat to deployed applications. We also discuss
the security-economics impact to customers of enhanced
authentication mechanisms.
1
Introduction
Authentication provides identity assurance for, and of,
communicating parties. Relay, or wormhole attacks al-
low an adversary to impersonate a participant during an
authentication protocol by effectively extending the in-
tended transmission range for which the system was de-
signed. Relay attacks have been described since at least
1976 [13, p75] and are simple to execute as the adver-
sary does not need to know the details of the protocol
or break the underlying cryptography. A good example
is a relay attack on proximity door-access cards demon-
strated by Hancke [16]. To gain access to a locked door,
the adversary simply relays the challenges from the door
to an authorized card, possibly some distance away, and
sends the responses back. The only restriction on the at-
tacker is that the signals arrive at the door and remote
card within the allotted time, which Hancke showed to
be sufﬁciently liberal. Another example is wormhole at-
tacks on wireless networks by Hu et al. [18]. Despite the
existence of such attacks, systems susceptible to them are
regularly being deployed. One signiﬁcant reason is that
designers consider relay attacks to be too difﬁcult and
costly for attackers to deploy. Section 3 aims to show
that relay attacks are indeed practical, using as an exam-
ple the UK’s EMV payment system, Chip & PIN. These
ﬂaws are demonstrated by an implementation of the relay
attack that has been tested on live systems.
Once designers appreciate the risk, the next step in
building a secure system is to develop defences. Sec-
tion 4 describes potential countermeasures to the relay
attack and compares their cost and effectiveness. While
some, which depend on procedural changes, could be de-
ployed quickly and act as an interim measure, none of the
conventional technologies meet our requirements of ade-
quate security at low cost. We thus propose an extension
to the smartcard standard, based on a distance bounding
protocol, which provides adequate resistance to the relay
attack and requires minimal changes to smartcards.
Section 5 describes this countermeasure and its rela-
tionship with prior work, describes a circuit design, and
evaluates its performance and security properties. We
have implemented the protocol on an FPGA and shown
it to be an effective defence against very capable ad-
versaries. In addition, the experience of both users and
merchants is unchanged, a signiﬁcant advantage over the
other proposals we discuss. The impact of this protocol
USENIX Association
16th USENIX Security Symposium
87
on the fraud liability landscape is discussed in Section 6.
Our contributions include the description of the prac-
ticalities of relay attacks and our conﬁrmation that de-
ployed systems are vulnerable to them. By designing and
testing a prototype system for demonstrating this vulner-
ability, we show that the attack is feasible and an eco-
nomically viable threat. Also, we detail the design of a
distance bounding protocol for smartcards, discuss im-
plementation issues and present results from both nor-
mal operation and under simulated attacks. While papers
have previously discussed distance bounding protocols,
to the best of our knowledge, this is the ﬁrst time it has
been implemented in practice.
2 Background
Contact smartcards, also known as integrated circuit
cards (ICC), as discussed in this paper, are deﬁned by
ISO 7816 [19] (for brevity, our description of the spec-
iﬁcation will be only to the detail sufﬁcient to illustrate
our implementation). The smartcard consists of a sheet
of plastic with an integrated circuit, normally a special-
ized microcontroller, mounted on the reverse of a group
of eight contact pads. Current smartcards use only ﬁve
of these: ground, power, reset, clock are inputs supplied
by the card reader, and an additional bi-directional asyn-
chronous serial I/O signal over which the card receives
commands and returns its response. Smartcards are de-
signed to operate at clock frequencies between 1 and
5 MHz, with the data rate, unless speciﬁed otherwise, of
1/372 of that frequency.
Upon insertion of a smartcard, the terminal ﬁrst sup-
plies the power and clock followed by de-assertion of re-
set. The card responds with an Answer-to-Reset (ATR),
selecting which protocol options it supports, including
endianness and polarity, ﬂow control, error correction
and data rate. All subsequent communications are ini-
tiated by the terminal and consist of a four byte header
command with an optional variable-length payload.
2.1 Payment environment
There are four parties in the basic payment model: the
cardholder purchasing the goods or service; the mer-
chant supplying the goods or service and who controls
the payment terminal; the issuer bank is in a contractual
relationship with the cardholder and issues their card,
and; the acquirer bank that is in a contractual relation-
ship with the merchant.
To initiate a transaction, the cardholder presents the
merchant with his card and agrees to make the payment
in exchange for goods or services. The merchant vali-
dates that the card is authentic and that the cardholder is
authorized to use it, and sends the transaction details to
the acquirer. The acquirer requests transaction authoriza-
tion from the issuer over a payment system network (e.g.
Mastercard or Visa). If the issuer accepts the transaction,
this response is sent back to the merchant via the acquirer
and the cardholder is given the good or service. Later, the
payment is transferred from the cardholder’s account at
the issuer to the merchant’s account at the acquirer.
In reality, payment systems slightly differ from this
simpliﬁed description. For this paper’s purpose, one no-
table difference is that the merchant may skip the step
of contacting the acquirer to verify the transaction. For
smaller retailers, this communication is ordinarily done
via a telephone connection, so each authorization request
incurs a cost. Thus, for low-risk transactions it may not
be necessary to go online. Also, if the merchant’s ter-
minal cannot make contact with the acquirer, due to the
phone line being busy or other technical failure, the mer-
chant may still decide to avoid losing the sale and never-
theless accept the transaction.
2.2 Smartcard applications
State-of-the-art smartcards are capable of both symmet-
ric and asymmetric cryptography, have several hundreds
of KB of non-volatile tamper-resistant memory, and
through secure operating systems may support multiple,
mutually un-trusting, applications [3]. Although the po-
tential applications are many, they are most commonly
used for authentication of the holder, and more speciﬁ-
cally for debit and credit card payment systems, where
less sophisticated smartcards are used.
Smartcards have advantages in all three authorization
processes discussed above, namely:
Card authentication: the card was issued by an accept-
able bank, is still valid and the account details have
not been modiﬁed.
Cardholder veriﬁcation: the customer presenting the
card is authorized to use it.
Transaction authorization: the customer’s account has
adequate funds for the transaction.
EMV [15], named after its creators, Europay, Master-
card and Visa, is the primary protocol for debit and credit
card payments in Europe, and is known by a variety of
different names in the countries where it is deployed (e.g.
“Chip & PIN” in the UK). While the following section
will introduce the EMV protocol, other payment systems
are similar.
In its non-volatile memory, the smartcard may hold ac-
count details, cryptographic keys, a personal identiﬁca-
tion number (PIN) and a count of how many consecutive
times the PIN has been incorrectly entered.
88
16th USENIX Security Symposium
USENIX Association
Cards capable of asymmetric cryptography can cryp-
tographically sign account details under the card’s pri-
vate key to perform card authentication. The merchant’s
terminal can verify the signature with a public key which
is stored on the card along with a certiﬁcate signed by
the issuer whose key is, in turn, signed by the operator of
the payment system network. This method is known as
dynamic data authentication (DDA) or the variant, com-
bined data authentication (CDA).
As the merchants are not trusted with the symmetric
keys held by the card, which would enable them to pro-
duce forgeries, cards that are only capable of symmet-
ric cryptography cannot be reliably authenticated ofﬂine.
However, the card can still hold a static signature of ac-
count details and corresponding certiﬁcate chain. The
terminal can authenticate the card by checking this sig-
nature, known as static data authentication (SDA), but
the lack of freshness allows replay attacks to occur.
Cardholder veriﬁcation is commonly performed by re-
quiring that the cardholder enter their PIN into the mer-
chant’s terminal. The PIN is sent to the card which then
checks if there have been too many consecutive incor-
rect guessing attempts; if not, it checks if the PIN was
entered correctly. If the terminal or card does not sup-
port PIN veriﬁcation, or the cardholder declines to enter
it, the merchant may allow signature veriﬁcation, or in
unattended terminal scenarios, no authentication at all.
The card may hold a history of transactions since it has
last communicated with the issuer, and evaluate the risk
of authorizing further transactions ofﬂine; otherwise, the
card can request online authorization. In both cases, the
card’s symmetric keys are used to produce a transaction
certiﬁcate that is veriﬁed by the issuer. Merchants may
also force a transaction to be online.
2.3 Security goals and threat model
The full threat model of EMV incorporates risk man-
agement protocols where the card and terminal negotiate
different methods of authenticating cardholders and the
conditions for online or ofﬂine veriﬁcation. This decision
is reached by considering the transaction value and type
(cash-back or goods), the card’s record of recent ofﬂine
transactions and both the card issuer’s and merchant’s
risk perception. This complexity and other features of
EMV exist to manage the reality of all parties mistrust-
ing all others (to varying extents). These details are out-
side the scope of the paper and are further discussed in
the EMV speciﬁcation [15, book 2].
Instead, we assume that the merchant, the banks and
customers are honest. We also exclude physical attacks,
exploits of software vulnerabilities on both the smart-
card and terminal, as well as attacks on the underlying
cryptography. Other weaknesses of the EMV system are
known, such as replay attacks on SDA cards as discussed
above, and fallback attacks which force use of the mag-
netic stripe, still present on smartcards for backwards
compatibility. These weaknesses have been covered else-
where [1, 4] and are anticipated to be resolved by even-
tually disabling these legacy features.
In our scenario, the goal of the attacker is to obtain
goods or services by charging an unwitting victim who
thinks she is paying for something different, at an at-
tacker controlled terminal.
3 Relay attacks
Relay attacks were ﬁrst described by Conway [13, p75],
explaining how someone who does not know the rules of
chess could beat a Grandmaster. This is possible by chal-
lenging two Grandmasters at postal chess and relaying
moves between them. While appearing to play a good
game, the attacker will either win against one, or draw
against both. Desmedt et al. [14] showed how such re-
lay attacks could be applied against a challenge-response
payment protocol, in the so called “maﬁa fraud”.
We use the maﬁa-fraud scenario, illustrated in Fig-
ure 1, where an unsuspecting restaurant patron, Alice,
inserts her smartcard into a terminal in order to pay a
$20 charge, which is presented to her on the display.
The terminal looks just like any one of the numerous
types of terminals she has used in the past. This par-
ticular terminal, however, has had its original circuitry
replaced by the waiter, Bob, and instead of being con-
nected to the bank, it is connected to a laptop placed be-
hind the counter. As Alice inserts her card into the coun-
terfeit terminal, Bob sends a message to his accomplice,
Carol, who is about to pay $2 000 for a diamond ring
at Dave’s jewellery shop. Carol inserts a counterfeit card
into Dave’s terminal, which looks legitimate to Dave, but
conceals a wire connected to a laptop in her backpack.
Bob and Carol’s laptops are communicating wirelessly
using mobile-phones or some other network. The data to
and from Dave’s terminal is relayed to the restaurant’s
counterfeit terminal such that the diamond purchasing
transaction is placed on Alice’s card. The PIN entered
by Alice is recorded by the counterfeit terminal and is
sent, via a laptop and wireless headset, to Carol who en-
ters it into the genuine terminal when asked. When the
transaction is over, the crooks have paid for a diamond
ring using Alice’s money, who got her meal for free, but
will be surprised when her bank statement arrives.
Despite the theoretical risk being documented, EMV
is vulnerable to the relay attack, as suggested by Ander-
son et al. [4]. Some believed that engineering difﬁculties
in deployment would make the attack too expensive, or
even impossible. The following section will show that
USENIX Association
16th USENIX Security Symposium
89
Bob
$
2
0
PIN
£
Dave
$2,000
Attacker controlled
Alice
Carol
PIN
Attacker controlled
Figure 1: The EMV relay attack. Innocent customer, Alice, pays for lunch by entering her smartcard and PIN into a
modiﬁed terminal operated by Bob. At approximately the same time, Carol enters her fake card into honest Dave’s
terminal to purchase a diamond. The transaction from Dave’s terminal is relayed wirelessly to Alice’s card with the
result of Alice unknowingly paying for Carol’s diamond.
equipment to implement the attack is readily available,
and costs are within the expected returns of fraud.
uine one to the customer even though it lacks the ability
to communicate with the bank.
Implementation
3.1
This section describes the equipment we used for imple-