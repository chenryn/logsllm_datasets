tree with a Merkle tree, as proposed in [37] for Path ORAM; how-
ever, we encrypt the buckets with an AEAD scheme to avoid an
unkeyed hash computation for the digest of each bucket.
Lemma 1. When the client algorithms of our DORAMs are run
inside an SGX enclave, any malicious adversary, with full control over
the untrusted machine hosting the enclave and able to observe through
SGX side channels the pattern on code and data memory accesses of
algorithms run inside the enclave, learns no more than the public
parameters of the DORAMs (e.g., B, Z) and the size of the dataset
stored in the DORAMs. Furthermore, the clients of our DORAMs can
detect any tampering on code and data performed by a malicious
adversary.
These security guarantees stem from the obliviousness of the
client algorithms of our DORAMs: indeed, as formally proven in
Appendix A.1, both their control flow and their memory access
pattern are independent from the block accessed by the DORAM.
4 OBLIVIOUS SUBSTRING SEARCH
We first present two algorithms to obliviously compute the Rank
procedure required by Alg. 1, and then we employ them to build two
oblivious backwards search algorithms that derive the positions of
occurrences oq of a substring q∈Σm over a string s∈Σn.
Augmented BWT. This algorithm obliviously computes the Rank
procedure by employing the Augmented BWT (ABWT) as the full-
text index ˜L constructed from the BWT L of s. Given an integer
parameter P, called sample period, the ABWT AP is an array with
⌈ n+1
P ⌉ entries, each containing a pair of elements (rank, l); for the
i-th entry of AP , AP[i].rank is a dictionary of |Σ|+1 entries that
binds to a character c∈Σ the value Rank(c, i·P−1), while AP[i].l is
a string of P characters, namely the substring L[i·P, . . . ,(i+1)·P−1]
of the BWT L. The value Rank(c, i), c∈Σ, i∈{0, . . . , n}, is computed
from the j=⌊ i
P ⌋-th entry of AP as the sum of AP[j].rank[c] and the
number of occurrences of character c in AP[j].l[0, . . . , i mod P].
In the oblivious implementation of Rank procedure, reported
in Alg. 6, the ABWT is stored inside a DORAM; the algorithm first
fetches the block storing the h=⌊ i
P ⌋-th entry of AP (line 1); then,
ctr is set to AP[h].rank[c] through a linear sweep over the entries
of AP[h].rank (lines 2-3); lastly, the algorithm sweeps over the
string AP[h].l, obliviously increasing by 1 ctr whenever a character
among the first i mod P + 1 ones equals c (lines 4-5). Each access
to an entry of AP costs O(C·log2(n)·Z·B) if the ABWT is stored in
2·B) in case
Circuit DORAM, while the cost becomes O(C·log3(n)·Z
of Path or Ring DORAMs, as each Eviction costs O(log2(n)·Z
2·B)
Algorithm 7: Non-oblivious Rank procedure with bal-
anced BST for a string s ∈ Σn with BWT L
Input: c: character of the alphabet Σ
i: integer in {0, . . . , n+1}
Output: Rank(c, i): number of occurrences of c in L[0, . . . , i]
Data: BST: balanced BST constructed from the string s
Enum: enumeration of characters in Σ
Occ: dictionary binding a char c∈Σ to RankL(c, n)
1 node ← BST.root, k ← Enum(c)·(n + 1)+i
2 while node (cid:44) ⊥ do
3
4
5
6
7
if node.key = k then
go_left ← 0, parent ← node, node ← node.right
if node.key < k then
go_left ← 1, node ← node.left
return node.value
8 if parent.key<Enum(c)·(n+1)∨parent.key≥(Enum(c)+1)·(n+1) then
9
10 return parent.value − go_left
return Occ(c)·go_left
instead of O(log(n)·Z·B). Given that B = O(log(n)+|Σ|+P) and Z,
C, |Σ| and P are small constants, our ABWT based oblivious Rank
procedure has O(log3(n)) computational cost.
Oblivious Data Structure BWT. In the Oblivious Data Structure
BWT (ODSBWT) method, instead of an array, we employ a balanced
Binary Search Tree (BST) as a full-text index constructed from the
BWT L. To build this index, we employ an enumeration Enum of char-
acters c∈Σ. For each j∈{0, . . . , n}, we create a node in the BST as a
key-value pair(Enum(s[j])·(n+1)+posL(s[j]), Rank(s[j], posL(s[j]))),
where posL(s[j]) denotes the position in the BWT L of the charac-
ter s[j]. Once the BST is built, Rank(c, i), c∈Σ, i∈{0, . . . , n} can be
computed by looking-up the node with key k=Enum(c)·(n + 1)+i in
the balanced BST, as outlined in Alg. 7. If the node is found (line 4),
then Rank(c, i) equals the value stored in this node by construction
of the BST. Otherwise, the last node explored is either the prede-
cessor (if go_left=0) or the successor (if go_left=1) of the node
with key k. Since Enum(c)·(n+1) is added to the key of each node,
then all the nodes referring to occurrences of the same character
c have consecutive keys. As a consequence, the predecessor node
corresponds to the last occurrence of c in L[0, . . . , i], while the suc-
cessor node corresponds to first occurrence of c in L[i+1, . . . , n].
In the former case, Rank(c, i) equals the value of the predecessor
node, while in the latter case the value of the successor node must
be decremented by 1 (line 10). In case there is no occurrence of c
in L[0, . . . , i] (resp. L[i+1, . . . , n]), the predecessor (resp. successor)
node refers to an occurrence of a character c′(cid:44)c, as checked in
line 8; thus, Rank(c, i) equals 0 (resp. the number of occurrences of
c in L), as returned in line 9.
To make this algorithm oblivious, each of the O(log(n)) nodes vis-
ited in the search path of the tree should be accessed with a DORAM.
In particular, we rely on the Oblivious Data Structure (ODS) [50]
framework to obliviously access nodes in the BST. Indeed, ODS
relies on the fact that each node of a BST can be reached only from
another node, i.e., its parent in the tree, to store the position map
entries inside ORAM blocks. Specifically, each node of the BST
stores the ids of the paths of the ORAM tree containing the blocks
that store the children of the node at hand. Therefore, to access
any node of the BST, the client only needs to store the root node:
from this one, the client chooses to fetch one of its two children,
employing the corresponding leaf id stored in the root node. This
Efficient Oblivious Substring Search via Architectural Support
ACSAC 2020, December 7–11, 2020, Austin, USA
(a) Response time of accesses for our DORAMs and the Path DORAM of Zero-
Trace [40]
(b) Ratio between response times of DORAMs and SORAMs accesses
Figure 2: DORAM Benchmarks
procedure is repeated to visit the entire path of the BST. In this
way, the look-up of a node in a BST with n nodes stored inside
an ODS requires log(n) direct (i.e., with no recursive position map)
accesses, one for each level of the BST, to the DORAM. In our ODS,
we roughly halve the look-up cost by applying a trick proposed by
Gentry [17]: instead of storing all the nodes of the BST in the same
DORAM, a distinct DORAM is employed for each level of the BST.
Employing distinct Circuit DORAMs (resp. Path or Ring DORAMs)
to store each level of the BST allows to obliviously compute the
Rank procedure with O(log2(n)·Z·B) (resp. O(log3(n)·Z
2·B)) cost.
Since B=O(log(n)) and Z =O(1), the ODSBWT based oblivious Rank
procedure has the same O(log3(n)) computational cost of the ABWT
one; nonetheless, the ODSBWT method accesses log2(n) DORAMs
with small blocks instead of logC(n) DORAMs with large blocks,
in turn allowing different implementation tradeoffs.
Oblivious Backward Search and ObSQRE Security Analysys.
To make Alg. 1 oblivious, both the dictionary C and the SA Suf
must be obliviously accessed: indeed, the entries fetched from the
dictionary C would leak the characters of q, while the entries re-
trieved from the SA would leak the values α and β, which are related
to both the string s and the substring q. To prevent such informa-
tion leakages, Suf is stored inside a DORAM, while C (with its |Σ|
entries) is stored inside the enclave and each search over it is (obliv-
iously) performed through a linear sweep. These implementation
choices together with each of the proposed oblivious Rank proce-
dures yield two substring search algorithms with computational
cost O((m+oq) log3(n)) and the following security guarantees.
Lemma 2. Consider a document collection D with z≥1 documents
and d≥1 substrings q1, . . . , qd with m1, . . . , md characters, respec-
tively. Consider a malicious adversary with full control of the machine
hosting the SGX enclave, which learns the access pattern of algorithms
run inside the enclave through side channel attacks. ObSQRE, when
endowed with a DORAM secure as per Lemma 1, exhibits a leakage
L={n, z, m1, oq1 , . . . , md , oqd } to such adversary and allows the data
owner to detect any computation or data tampering.
We formally define and prove in Appendix A.2 the security guar-
antees stated in Lemma 2. These security guarantees derive from
three factors: the confidentiality and integrity guarantees of SGX;
the control flow of our substring search algorithms being indepen-
dent from any other information than the leakage L; access pattern
privacy guarantees on data structures given by our DORAMs.
5 EXPERIMENTAL RESULTS
We realized a publicly available C++ implementation [39] of ObSQRE
employing the Intel SGX SDK 2.5 [12]. To encrypt blocks in the
DORAM, we employed the AES implementation of WolfSSL [45].
We performed all our tests on an Ubuntu 16.04 LTS server equipped
with 64 GiB of RAM memory and an Intel Xeon E3-1220 v6 CPU
clocked at 3 GHz, where SGX is available. To evaluate our sub-
string search algorithms with different alphabets, we considered
three datasets: the 21-st human chromosome [3] (Chr in short),
which encodes DNA sequences employing 7 symbols of the FASTA
format [11]; the SwissProt database [47], (Prot in short), which
contains 550k human proteins, encoded with 25 symbols as a se-
quence of aminoacids; the Enron dataset [24], (Enron in short),
which contains real emails of a financial firm over an alphabet of
96 ASCII characters.
DORAM Benchmarking. First of all, we compared the response
time of the Access procedure for our three DORAMs, excluding
accesses to the position map in order to make these tests mean-
ingful also for ODS. We instantiated each of these DORAMs with
parameters chosen according to the configurations provided by the
authors of corresponding ORAM, except for Path DORAM where
we employed the same configurations of Ring DORAM. For Path
and Ring DORAMs, we considered two possible configurations to
explore the trade-off between the size of a bucket and the eviction
period A: indeed, while smaller buckets reduce the computational
cost of DORAM procedures, evictions, which are the most expen-
sive operations, are performed more frequently. The configurations
employed for our tests are reported in Table 3; we empirically veri-
fied that no stash overflow occurs after 230 round robin accesses
with the chosen parameters. For all the configurations, we mea-
sured the response time to access one block, averaged over 1024
accesses, for DORAMs with 2i, i∈{5, . . . , 25}, real blocks storing 8
bytes of data each. In all the tests, we fully initialized all the blocks
in the DORAM before measuring the response time.
Figure 2a reports the results of our benchmark, showing that
Path DORAM is the fastest one among our DORAMs. This outcome
EfficientObliviousSubstringSearchviaArchitecturalSupportACSAC2020,December7–11,2020,Austin,USA2428212216220224020406080NumberofblocksAccessresponsetime(µs)ZTPathRing(Z=4)Ring(Z=8)CircuitPath(Z=8)Path(Z=4)(a)ResponsetimeofaccessesforourDORAMsandthePathDORAMofZero-Trace[40]242821221622022411.522.5NumberofblocksSlowdownPathRing(Z=4)Ring(Z=8)Circuit(b)RatiobetweenresponsetimesofDORAMsandSORAMsaccessesFigure2:DORAMBenchmarksInthisway,thelook-upofanodeinaBSTwithnnodesstoredinsideanODSrequireslog(n)direct(i.e.,withnorecursivepositionmap)accesses,oneforeachleveloftheBST,totheDORAM.InourODS,weroughlyhalvethelook-upcostbyapplyingatrickproposedbyGentry[17]:insteadofstoringallthenodesoftheBSTinthesameDORAM,adistinctDORAMisemployedforeachleveloftheBST.EmployingdistinctCircuitDORAMs(resp.PathorRingDO-RAMs)tostoreeachleveloftheBSTallowstoobliviouslycomputetheRankprocedurewithO(log2(n)·Z·B)(resp.O(log3(n)·Z2·B))cost.SinceB=O(log(n))andZ=O(1),theODSBWTbasedobliviousRankprocedurehasthesameO(log3(n))computationalcostoftheABWTone;nonetheless,theODSBWTmethodaccesseslog2(n)DORAMswithsmallblocksinsteadoflogC(n)DORAMswithlargeblocks,inturnallowingdifferentimplementationtradeoffs.ObliviousBackwardSearchandObSQRESecurityAnalysys.TomakeAlg.1oblivious,boththedictionaryCandtheSASufmustbeobliviouslyaccessed:indeed,theentriesfetchedfromthedictionaryCwouldleakthecharactersofq,whiletheentriesre-trievedfromtheSAwouldleakthevaluesαandβ,whicharerelatedtoboththestringsandthesubstringq.Topreventsuchinforma-tionleakages,SufisstoredinsideaDORAM,whileC(withits|Σ|entries)isstoredinsidetheenclaveandeachsearchoveritis(obliv-iously)performedthroughalinearsweep.TheseimplementationchoicestogetherwitheachoftheproposedobliviousRankproce-duresyieldtwosubstringsearchalgorithmswithcomputationalcostO((m+oq)log3(n))andthefollowingsecurityguarantees.Lemma2.ConsideradocumentcollectionDwithz≥1documentsandd≥1substringsq1,...,qdwithm1,...,mdcharacters,respec-tively.ConsideramaliciousadversarywithfullcontrolofthemachinehostingtheSGXenclave,whichlearnstheaccesspatternofalgorithmsruninsidetheenclavethroughsidechannelattacks.ObSQRE,whenendowedwithaDORAMsecureasperLemma1,exhibitsaleakageL={n,z,m1,oq1,...,md,oqd}tosuchadversaryandallowsthedataownertodetectanycomputationordatatampering.WeformallydefineandproveinAppendixA.2thesecurityguar-anteesstatedinLemma2.Thesesecurityguaranteesderivefromthreefactors:theconfidentialityandintegrityguaranteesofSGX;thecontrolflowofoursubstringsearchalgorithmsbeingindepen-dentfromanyotherinformationthantheleakageL;accesspatternprivacyguaranteesondatastructuresgivenbyourDORAMs.5EXPERIMENTALRESULTSWerealizedapubliclyavailableC++implementation[39]ofOb-SQREemployingtheIntelSGXSDK2.5[12].ToencryptblocksintheDORAM,weemployedtheAESimplementationofWolf-SSL[45].WeperformedallourtestsonanUbuntu16.04LTSserverequippedwith64GiBofRAMmemoryandanIntelXeonE3-1220v6CPUclockedat3GHz,whereSGXisavailable.Toevaluateoursubstringsearchalgorithmswithdifferentalphabets,wecon-sideredthreedatasets:the21-sthumanchromosome[3](Chrinshort),whichencodesDNAsequencesemploying7symbolsoftheFASTAformat[11];theSwissProtdatabase[47],(Protinshort),whichcontains550khumanproteins,encodedwith25symbolsasasequenceofaminoacids;theEnrondataset[24],(Enroninshort),whichcontainsrealemailsofafinancialfirmoveranalphabetof96ASCIIcharacters.DORAMBenchmarking.Firstofall,wecomparedtheresponsetimeoftheAccessprocedureforourthreeDORAMs,excludingaccessestothepositionmapinordertomakethesetestsmean-ingfulalsoforODS.WeinstantiatedeachoftheseDORAMswithparameterschosenaccordingtotheconfigurationsprovidedbytheauthorsofcorrespondingORAM,exceptforPathDORAMwhereweemployedthesameconfigurationsofRingDORAM.ForPathandRingDORAMs,weconsideredtwopossibleconfigurationstoexplorethetrade-offbetweenthesizeofabucketandtheevictionperiodA:indeed,whilesmallerbucketsreducethecomputationalcostofDORAMprocedures,evictions,whicharethemostexpen-siveoperations,areperformedmorefrequently.TheconfigurationsemployedforourtestsarereportedinTable3;weempiricallyveri-fiedthatnostashoverflowoccursafter230roundrobinaccesseswiththechosenparameters.Foralltheconfigurations,wemea-suredtheresponsetimetoaccessoneblock,averagedover1024accesses,forDORAMswith2i,i∈{5,...,25},realblocksstoring8bytesofdataeach.Inallthetests,wefullyinitializedalltheblocksintheDORAMbeforemeasuringtheresponsetime.Figure2areportstheresultsofourbenchmark,showingthatPathDORAMisthefastestoneamongourDORAMs.ThisoutcomeEfficientObliviousSubstringSearchviaArchitecturalSupportACSAC2020,December7–11,2020,Austin,USA2428212216220224020406080NumberofblocksAccessresponsetime(µs)ZTPathRing(Z=4)Ring(Z=8)CircuitPath(Z=8)Path(Z=4)(a)ResponsetimeofaccessesforourDORAMsandthePathDORAMofZero-Trace[40]242821221622022411.522.5NumberofblocksSlowdownPathRing(Z=4)Ring(Z=8)Circuit(b)RatiobetweenresponsetimesofDORAMsandSORAMsaccessesFigure2:DORAMBenchmarksInthisway,thelook-upofanodeinaBSTwithnnodesstoredinsideanODSrequireslog(n)direct(i.e.,withnorecursivepositionmap)accesses,oneforeachleveloftheBST,totheDORAM.InourODS,weroughlyhalvethelook-upcostbyapplyingatrickproposedbyGentry[17]:insteadofstoringallthenodesoftheBSTinthesameDORAM,adistinctDORAMisemployedforeachleveloftheBST.EmployingdistinctCircuitDORAMs(resp.PathorRingDO-RAMs)tostoreeachleveloftheBSTallowstoobliviouslycomputetheRankprocedurewithO(log2(n)·Z·B)(resp.O(log3(n)·Z2·B))cost.SinceB=O(log(n))andZ=O(1),theODSBWTbasedobliviousRankprocedurehasthesameO(log3(n))computationalcostoftheABWTone;nonetheless,theODSBWTmethodaccesseslog2(n)DORAMswithsmallblocksinsteadoflogC(n)DORAMswithlargeblocks,inturnallowingdifferentimplementationtradeoffs.ObliviousBackwardSearchandObSQRESecurityAnalysys.TomakeAlg.1oblivious,boththedictionaryCandtheSASufmustbeobliviouslyaccessed:indeed,theentriesfetchedfromthedictionaryCwouldleakthecharactersofq,whiletheentriesre-trievedfromtheSAwouldleakthevaluesαandβ,whicharerelatedtoboththestringsandthesubstringq.Topreventsuchinforma-tionleakages,SufisstoredinsideaDORAM,whileC(withits|Σ|entries)isstoredinsidetheenclaveandeachsearchoveritis(obliv-iously)performedthroughalinearsweep.TheseimplementationchoicestogetherwitheachoftheproposedobliviousRankproce-duresyieldtwosubstringsearchalgorithmswithcomputationalcostO((m+oq)log3(n))andthefollowingsecurityguarantees.Lemma2.ConsideradocumentcollectionDwithz≥1documentsandd≥1substringsq1,...,qdwithm1,...,mdcharacters,respec-tively.ConsideramaliciousadversarywithfullcontrolofthemachinehostingtheSGXenclave,whichlearnstheaccesspatternofalgorithmsruninsidetheenclavethroughsidechannelattacks.ObSQRE,whenendowedwithaDORAMsecureasperLemma1,exhibitsaleakageL={n,z,m1,oq1,...,md,oqd}tosuchadversaryandallowsthedataownertodetectanycomputationordatatampering.WeformallydefineandproveinAppendixA.2thesecurityguar-anteesstatedinLemma2.Thesesecurityguaranteesderivefromthreefactors:theconfidentialityandintegrityguaranteesofSGX;thecontrolflowofoursubstringsearchalgorithmsbeingindepen-dentfromanyotherinformationthantheleakageL;accesspatternprivacyguaranteesondatastructuresgivenbyourDORAMs.5EXPERIMENTALRESULTSWerealizedapubliclyavailableC++implementation[39]ofOb-SQREemployingtheIntelSGXSDK2.5[12].ToencryptblocksintheDORAM,weemployedtheAESimplementationofWolf-SSL[45].WeperformedallourtestsonanUbuntu16.04LTSserverequippedwith64GiBofRAMmemoryandanIntelXeonE3-1220v6CPUclockedat3GHz,whereSGXisavailable.Toevaluateoursubstringsearchalgorithmswithdifferentalphabets,wecon-sideredthreedatasets:the21-sthumanchromosome[3](Chrinshort),whichencodesDNAsequencesemploying7symbolsoftheFASTAformat[11];theSwissProtdatabase[47],(Protinshort),whichcontains550khumanproteins,encodedwith25symbolsasasequenceofaminoacids;theEnrondataset[24],(Enroninshort),whichcontainsrealemailsofafinancialfirmoveranalphabetof96ASCIIcharacters.DORAMBenchmarking.Firstofall,wecomparedtheresponsetimeoftheAccessprocedureforourthreeDORAMs,excludingaccessestothepositionmapinordertomakethesetestsmean-ingfulalsoforODS.WeinstantiatedeachoftheseDORAMswithparameterschosenaccordingtotheconfigurationsprovidedbytheauthorsofcorrespondingORAM,exceptforPathDORAMwhereweemployedthesameconfigurationsofRingDORAM.ForPathandRingDORAMs,weconsideredtwopossibleconfigurationstoexplorethetrade-offbetweenthesizeofabucketandtheevictionperiodA:indeed,whilesmallerbucketsreducethecomputationalcostofDORAMprocedures,evictions,whicharethemostexpen-siveoperations,areperformedmorefrequently.TheconfigurationsemployedforourtestsarereportedinTable3;weempiricallyveri-fiedthatnostashoverflowoccursafter230roundrobinaccesseswiththechosenparameters.Foralltheconfigurations,wemea-suredtheresponsetimetoaccessoneblock,averagedover1024accesses,forDORAMswith2i,i∈{5,...,25},realblocksstoring8bytesofdataeach.Inallthetests,wefullyinitializedalltheblocksintheDORAMbeforemeasuringtheresponsetime.Figure2areportstheresultsofourbenchmark,showingthatPathDORAMisthefastestoneamongourDORAMs.ThisoutcomeACSAC 2020, December 7–11, 2020, Austin, USA
N. Mainardi, D. Sampietro, A. Barenghi, G. Pelosi
Figure 3: Comparison of ObSQRE oblivious substring search algorithms for Chr, Prot and Enron datasets.
Table 3: Parameters chosen for DORAMs. S is the stash size,
A the eviction period, Z (resp. D) the max. (resp. min.) num-
ber of real (resp. dummy) blocks per bucket
DORAM
Path [44]
Circuit [49]
Ring [36]
Z
4
8
3
4
8
S
32
41
8
32
41