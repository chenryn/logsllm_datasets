sockaddr_in是常用的数据结构，定义如下，
    struct sockaddr_in
    {
        short sin_family;
        /*Address family一般来说AF_INET（地址族）PF_INET（协议族）*/
        unsigned short sin_port;
        /*Port number(必须要采用网络数据格式,普通数字可以用htons()函数转换成网络数据格式的数字)*/
        struct in_addr sin_addr;
        /*IP address in network byte order（Internet address）*/
        unsigned char sin_zero[8];
        /*Same size as struct sockaddr没有实际意义,只是为了 跟SOCKADDR结构在内存中对齐*/
    };
socket()函数是一种可用于根据指定的地址族、数据类型和协议来分配一个套接口的描述字及其所用的资源的函数，如果函数调用成功，会返回一个标识这个套接字的文件描述符，失败的时候返回-1。
函数原型：
int socket(int domain, int type, int protocol);
其中，参数domain用于设置网络通信的域，函数socket()根据这个参数选择通信协议的族。通信协议族在文件sys/socket.h中定义。
domain的值及含义
**名称** | **含义** | **名称** | **含义**  
---|---|---|---  
PF_UNIX,PF_LOCAL | 本地通信 | PF_X25 | ITU-T X25 / ISO-8208协议  
AF_INET,PF_INET | IPv4 Internet协议 | PF_AX25 | Amateur radio AX.25  
PF_INET6 | IPv6 Internet协议 | PF_ATMPVC | 原始ATM PVC访问  
PF_IPX | IPX-Novell协议 | PF_APPLETALK | Appletalk  
PF_NETLINK | 内核用户界面设备 | PF_PACKET | 底层包访问  
函数socket()的参数type用于设置套接字通信的类型，主要有SOCKET_STREAM（流式套接字）、SOCK——DGRAM（数据包套接字）等。
关于type的值及含义
**名称** | **含义**  
---|---  
SOCK_STREAM | Tcp连接，提供序列化的、可靠的、双向连接的字节流。支持带外数据传输  
SOCK_DGRAM | 支持UDP连接（无连接状态的消息）  
SOCK_SEQPACKET | 序列化包，提供一个序列化的、可靠的、双向的基本连接的数据传输通道，数据长度定常。每次调用读系统调用时数据需要将全部数据读出  
SOCK_RAW | RAW类型，提供原始网络协议访问  
SOCK_RDM | 提供可靠的数据报文，不过可能数据会有乱序  
SOCK_PACKET | 这是一个专用类型，不能呢过在通用程序中使用  
并不是所有的协议族都实现了这些协议类型，例如，AF_INET协议族就没有实现SOCK_SEQPACKET协议类型。
函数socket()的第3个参数protocol用于制定某个协议的特定类型，即type类型中的某个类型。通常某协议中只有一种特定类型，这样protocol参数仅能设置为0；但是有些协议有多种特定的类型，就需要设置这个参数来选择特定的类型。
类型为SOCK_STREAM的套接字表示一个双向的字节流，与管道类似。流式的套接字在进行数据收发之前必须已经连接，连接使用connect()函数进行。一旦连接，可以使用read()或者write()函数进行数据的传输。流式通信方式保证数据不会丢失或者重复接收，当数据在一段时间内任然没有接受完毕，可以将这个连接人为已经死掉。
SOCK_DGRAM和SOCK_RAW
这个两种套接字可以使用函数sendto()来发送数据，使用recvfrom()函数接受数据，recvfrom()接受来自制定IP地址的发送方的数据。
SOCK_PACKET是一种专用的数据包，它直接从设备驱动接受数据。
往下的部分是check_rc_ports函数的主体，
其中的server就是上面提到的sockaddr_in类型，再介绍一下bind函数，
函数原型，
int bind( int sockfd , const struct sockaddr * my_addr, socklen_t addrlen);
sockfd表示socket文件的文件描述符，一般为socket函数的返回值；
addr表示服务器的通信地址，本质为struct sockaddr 结构体类型指针，struct sockaddr结构体定义如下
    struct sockaddr{
        sa_family_t sa_family;
        char        sa_data[14];
    };
结构体中的成员，sa_data[]表示进程地址；
bind函数中的第三个参数addrlen表示参数addr的长度；addr参数可以接受多种类型的结构体，而这些结构体的长度各不相同，因此需要使用addrlen参数额外指定结构体长度，
bind函数调用成功返回0，否则返回-1，并设置erro；
对于使用IPv6的系统，代码基本一致，不再赘述，
**4）test_ports()函数**
这个函数中调用了前两个函数，个人认为出现的意义只是它为了主体函数check_rc_ports更规范，
遍历每一个端口，使用bind（）检查系统上的每个tcp和udp端口。如果我们无法绑定到端口，且netstat可以显示该端口的情况，说明系统正在使用该端口，可以直接continue，检测下一个端口，
如果情况不对，bind不上（端口被占用），且netstat没有显示该端口，则可能是安装了rootkit，此处会记录错误，并且发出警告，
下面还有一部分，是异常端口过多时发出更严重的警告，
**5）check_rc_ports()函数**
这个函数分别针对TCP协议和UDP协议调用了我们上面讲的test_ports函数，由这个函数调用完成功能的函数，
**6）同样，这个功能也是只针对Linux系统的**
**(7) 网卡检查模块——check_rc_if.c**
一般计算机网卡都工作在非混杂模式下，此时网卡只接受来自网络端口的目的地址指向自己的数据。当网卡工作在混杂模式下时，网卡将来自接口的所有数据都捕获并交给相应的驱动程序。网卡的混杂模式一般在网络管理员分析网络数据作为网络故障诊断手段时用到，同时这个模式也被网络黑客利用来作为网络数据窃听的入口。
先看一下这个模块的架构，
可以看到，此处只有两个函数，而且实际代码量也不大，但是其为了执行命令和使用一些数据结构，调用了大量的头文件，下面会介绍到，
**1）宏定义**
为了方便后面执行命令而定义的宏字符串，
**2）run_ifconfig()函数**
这个函数的内容非常明了，执行命令，如果网卡处于混杂模式，返回1，
介绍一下ifconfig命令，
①命令格式：
ifconfig [网络设备] [参数]
②命令功能：
ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。
③命令参数：
up 启动指定网络设备/网卡。
down
关闭指定网络设备/网卡。该参数可以有效地阻止通过指定接口的IP信息流，如果想永久地关闭一个接口，我们还需要从核心路由表中将该接口的路由信息全部删除。
arp 设置指定网卡是否支持ARP协议。
-promisc 设置是否支持网卡的promiscuous模式，如果选择此参数，网卡将接收网络中发给它所有的数据包
-allmulti 设置是否支持多播模式，如果选择此参数，网卡将接收网络中所有的多播数据包
-a 显示全部接口信息
-s 显示摘要信息（类似于 netstat -i）
add 给指定网卡配置IPv6地址
del 删除指定网卡的IPv6地址
 配置网卡最大的传输单元
mtu 设置网卡的最大传输单元 (bytes)
netmask
设置网卡的子网掩码。掩码可以是有前缀0x的32位十六进制数，也可以是用点分开的4个十进制数。如果不打算将网络分成子网，可以不管这一选项；如果要使用子网，那么请记住，网络中每一个系统必须有相同子网掩码。
tunel 建立隧道
dstaddr 设定一个远端地址，建立点对点通信
-broadcast 为指定网卡设置广播协议
-pointtopoint 为网卡设置点对点通讯协议
multicast 为网卡设置组播标志
address 为网卡设置IPv4地址
txqueuelen 为网卡设置传输列队的长度
**3）check_rc_if()函数**
先讲一点先验知识，ifreq是一种数据结构，常用来配置ip地址，激活接口，配置MTU。在Linux系统中获取IP地址通常都是通过ifconfig命令来实现的，然而ifconfig命令实际是通过ioctl接口与内核通信，ifconfig命令首先打开一个socket，然后调用ioctl将request传递到内核，从而获取request请求数据。处理网络接口的许多程序沿用的初始步骤之一就是从内核获取配置在系统中的所有接口。
我们看一下函数中关于初始化工作的部分，
这一部分我在源码里没怎么做注释，主要是这部分看起来复杂，其实只是完成了网卡检查的初始化工作，而且涉及到一些具体的数据结构和先验知识，在注释里不便展开，我们在上面介绍过先验知识，下面介绍数据结构。
对于ifconf中ifc_buf，其实就是N个ifc_req,从上面的结构体中可以看出来，通过下面两幅图可以更加明显，
通过我们的解释，我们知道，ifconf通常是用来保存所有接口信息的，ifreq用来保存某个接口的信息，数据结构具体定义如下，
    struct ifconf结构体
    struct ifconf{
    lint ifc_len;
    union{
      caddr_t  ifcu_buf
      Struct  ifreq *ifcu_req;
    }ifc_ifcu
    }
    Struct ifreq{
    Char ifr_name[IFNAMSIZ];
    Union{
      Struct  sockaddr  ifru_addr;
      Struct  sockaddr  ifru_dstaddr;
      Struct  sockaddr  ifru_broadaddr;
      Struct  sockaddr  ifru_netmask;
      Struct  sockaddr  ifru_hwaddr;
      Short  ifru_flags;
      Int   ifru_metric;
      Caddr_t ifru_data;
    }ifr_ifru;
    };
接下来是对端口状态的检查，逻辑非常清晰，
前面介绍过了，ioctl是网卡通信所用，如果连信息都获取不到信息则不再考虑，前半部分只是为了确定网卡是否可用，
关于后半部分，由于Linux下一切皆文件，如果某网卡处于混杂模式，则一定会在对应的文件中有体现，而如果ifconfig检测不到这种体现，则说明可能被攻击，
**4）收尾工作**
如果记录的错误大于0，则产生告警。
另外，这个模块也只适用于Linux下。
## 四、总结
OSSEC作为一个功能比较完善的安全防护系统，虽然看起来高深莫测，但如果我们细心、专心、耐心地去分析其原理，结合审计代码加深理解，其实其中内在的思想我们还是可以理解的。拿我审计的rootkit
check这一部分来说，一开始的时候也没有想到怎么才能做到针对rootkit的检测，后来看到OSSEC中将对rootkit的检测为了7个方面，每一个方面都相对独立，将这样一个大问题划分成几个小问题，自然就好解决了些。
针对每个小方面，OSSEC又根据实际情况将其向下划分，将每一部分的任务与目标明确下来，再利用系统调用去编程，最终完成任务。其实每一部分的思想都是很明确的，下面我根据自己的感受讲一下。
（1）首先，比较容易想到的就是和安全卫士一样，扫描全盘之类。这是因为现存的已公开的rootkit必然会伴随着一些特征文件，我们可以将其全部记录下来（rootkit_files.txt包含rootkit及其常用文件的数据库），我们为了安全，应该打开每个指定文件进行检查，也要检查系统调用文件中有没有rootkit的特征。
（2）多数流行的rootkit的大多数版本都普遍采用这种用木马修改二进制文件的技术，我们也可以记录下已被公开的rootkits木马感染的文件签名（rootkit_trojans.txt包含这样的数据库）。当然这两种检测方法主要是针对已知的rootkit，但是如果连已知的问题都解决不了，更不要谈未知的了。
（3）接下来就需要去发散一下思维了，正常情况下，/ dev应该只具有设备文件和Makedev脚本，而许多rootkit使用/
dev隐藏文件，所以我们应该扫描/
dev目录以查找异常，如果发现异常，必是rootkit在作祟。相比于前两个基于已有rootkit的数据库，这个技术是可以检测到非公开的rootkit。这一部分的思想也是非常的简单直接，颇有些大巧不工的意思。
（4）其实说是发散，不如说是对安全的一种感觉，一种经验的积累与内化。比如这里提到的，有些rootkit会找到root拥有的且对他人可写的文件并进行修改。我们可以想到，即使这样的文件暂没有被利用，也是非常危险的，这个问题不一定会涉及到rootkit，但我们未雨绸缪，理应检测这种文件。
（5）从另一种角度讲，即使系统中有rootkit文件还不一定有危险，危险最终一定还要落实到进程上的，这样一来，我们必须要寻找有没有隐藏进程。出于这个目的，我们使用getsid（）和kill（）来检查正在使用的所有pid，并根据不同的结果进行区分。
（6）如果说前面的部分是针对文件的，下面就是针对设备的（Linux下一切都是文件，这里所指只是狭义的文件）。还有一种可能是连接了正向shell，为了检查我们的系统是不是将shell连到了哪个端口上，我们检查系统上的每个tcp和udp端口。这里要用到的就是bind()和netstat命令，并根据不同的结果进行区分。
（7）一般计算机网卡都工作在非混杂模式下，此时网卡只接受来自网络端口的目的地址指向自己的数据。当网卡工作在混杂模式下时，网卡将来自接口的所有数据都捕获并交给相应的驱动程序。网卡的混杂模式一般在网络管理员分析网络数据作为网络故障诊断手段时用到，同时这个模式也被网络黑客利用来作为网络数据窃听的入口。考虑到这些，我们应该扫描系统上的所有网卡，并查找启用了“
promisc”模式的网卡。如果网卡处于混杂模式，则“ ifconfig”的输出应显示该信息。如果没有，我们可能已经安装了rootkit。