How Many Bytes Can Be Overwritten? 
You need to take into account how many bytes the buffer overflows and how much 
control users have over the size of the overflow. Overflows of too few or too many 
bytes can make the exploit a lot harder. Obviously, the ideal situation for an attacker 
is to choose an arbitrary length of data to overflow. 
Sometimes an attacker can overflow a buffer by a fixed amount, which provides fewer 
options, but successful exploitation is still likely. If only a small number of bytes can 
be overflowed, exploitability depends on what data is corrupted. If the attacker is able 
to corrupt only an adjacent variable in memory that's never used again, the bug is 
probably unexploitable. Obviously, the less memory the attacker can corrupt, the less 
likely it is that the bug is exploitable. 
Conversely, if attackers can overflow by a fixed amount that happens to be very large, 
the bug invariably results in corrupting a huge part of the program's memory and will 
almost certainly crash the process. In some cases, when a signal handler or exception 
handler can be corrupted, attackers can exploit this situation and gain control of the 
process after an exception has occurred. The most prevalent example is large 
stack-based overflows in Windows, as attackers can overwrite SEH structures 
containing function pointers that are accessed when an exception occurs. 
Additionally, some bugs can result in multiple writes to arbitrary locations in memory. 
Although often only one overwrite is possible, if multiple overwrites can be performed, 
an attacker has more leverage in choosing how to exploit the vulnerable program. For 
example, with format string vulnerabilities, attackers can often write to as many 
arbitrary locations as they choose, increasing the likelihood of successful exploitation. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
212 
Note 
Sometimes a 1- or 2-byte overwrite is easier to exploit than a 4-byte overwrite. For 
example, say you overwrite a pointer to an object composed of several pointers 
followed by a buffer with data you control. In this case, the least significant byte of the 
pointer value could be overwritten so that the data buffer in the object is pointed to 
rather than the object itself. You could arbitrarily change the state of any object 
property and probably exploit the bug quite reliably. 
What Data Can Be Used to Corrupt Memory? 
Some memory corruption vulnerabilities don't allow direct control of the data used to 
overwrite memory. The data might be restricted based on how it's used, as with 
character restrictions, single-byte overwrites, or attacker-malleable calls to memset(). 
Listing 5-5 shows an example of a vulnerability in which memory is overwritten with 
data the attacker doesn't control. 
Listing 5-5. Indirect Memory Corruption 
int process_string(char *string) 
{ 
    char **tokens, *ptr; 
    int tokencount; 
    tokens = (char **)calloc(64, sizeof(char *)); 
    if(!tokens) 
        return -1; 
    for(ptr = string; *ptr;){ 
        int c; 
        for(end = ptr; *end && !isspace(end); end++); 
        c = *end; 
        *end = '\0'; 
       tokens[tokencount++] = ptr; 
        ptr = (c == 0 ? end : end + 1); 
    } 
    ... 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
213 
This code has a buffer overflow in the bolded line manipulating the tokens array. The 
data used to overwrite memory can't be controlled directly by attackers, but the 
overwritten memory includes pointers to attacker-controllable data. This could make 
exploitation even easier than using a standard technique. If a function pointer is 
overwritten, for example, attackers require no memory layout information because 
the function pointer can be replaced with a pointer to attacker-controlled data. 
However, exploitation could be more complicated if, for example, a heap block header 
or other complex structure is overwritten. 
Off-by-one vulnerabilities are one of the most common vulnerabilities involving 
overwritten data that an attacker doesn't control. Listing 5-6 shows an example of an 
off-by-one vulnerability. 
Listing 5-6. Off-by-One Overwrite 
struct session { 
    int sequence; 
    int mac[MAX_MAC]; 
    char *key; 
}; 
int delete_session(struct session *session) 
{ 
    memset(session->key, 0, KEY_SIZE); 
    free(session->key); 
    free(session); 
} 
int get_mac(int fd, struct session *session) 
{ 
    unsigned int i, n; 
    n = read_network_integer(fd); 
    if(n > MAX_MAC) 
        return 1; 
    for(i = 0; i mac[i] = read_network_integer(fd); 
    return 0; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
214 
If attackers specify the length of mac to be exactly MAX_MAC, the get_mac() function 
reads one more element than it has allocated space for (as shown in the bolded line). 
In this case, the last integer read in overwrites the key variable. During the 
delete_session() function, the key variable is passed to memset before it's deleted, 
which allows attackers to overwrite an arbitrary location in memory, but only with 
NUL bytes. Exploiting this vulnerability is complicated because attackers can't choose 
what data the memory is overwritten with. In addition, the attacker-supplied memory 
location is subsequently freed, which means that attack would most likely be directed 
at the memory-management routines. Performing this attack successfully could be 
extremely difficult, especially in multithreaded applications. 
Listings 5-5 and 5-6 show how attackers might have difficulty exploiting a 
vulnerability when the overwritten data can't be controlled. When examining similar 
issues, you need to determine what's included in the overwritten data and whether it 
can be controlled by attackers. Usually, attackers have fairly direct control over the 
data being written or can manipulate the resulting corruption to access 
attacker-controlled data. 
Are Memory Blocks Shared? 
Occasionally, bugs surface in applications in which a memory manager erroneously 
hands out the same block of memory more than once, even though it's still in use. 
When this happens, two or more independent parts of the application use the memory 
block with the expectation that they have exclusive access to it, when in fact they 
don't. These vulnerabilities are usually caused by one of two errors: 
A bug in the memory-management code 
The memory-management API being used incorrectly 
These types of vulnerabilities can also lead to remote execution; however, 
determining whether memory-block-sharing vulnerabilities are exploitable is usually 
complicated and application specific. One reason is that attackers might not be able to 
accurately predict what other part of the application gets the same memory block and 
won't know what data to supply to perform an attack. In addition, there might be 
timing issues with the application, particularly multithreaded software servicing a 
large number of clients whenever they happen to connect. Accepting the difficulties, 
there are procedures for exploiting these vulnerabilities, so they shouldn't be 
regarded as low priority without justification. 
A similar memory corruption can occur in which a memory block is allocated only once 
(the correct behavior), but then that memory block is handed off to two concurrently 
running threads with the assumption of mutually exclusive access. This type of 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
215 
vulnerability is largely caused by synchronization issues and is covered extensively in 
Chapter 13(? [????.]), "Synchronization and State." 
What Protections Are in Place? 
After you know the details of a potentially exploitable memory corruption 
vulnerability, you need to consider any mitigating factors that might prevent 
exploitation. For example, if a piece of software is going to run only on Windows XP 
SP2+, you know that stack cookies and SafeSEH are present, so a typical stack 
overflow might not be exploitable. Of course, you can't discount memory corruption 
just because protective measures are in place. It's quite possible that an attacker 
could find a way to subvert SafeSEH by using an unsafe loaded module or overwriting 
a function parameter to subvert stack cookies. However, you need to account for 
these protective measures and try to gauge the likelihood of an attacker 
circumventing them and reliably exploiting the system. 
7.1.6 Summary 
This chapter has explained how memory corruption occurs and how it can affect the 
state of an application. In particular, you've seen how attackers can leverage memory 
corruption bugs to seize control of applications and perform malicious activities. This 
knowledge is essential as you assess application security vulnerabilities because it 
allows you to accurately determine the likelihood of an attacker exploiting a particular 
memory corruption issue. However, memory corruption exploits are an entire field of 
study on their own, and the state of the art is constantly changing to find new ways to 
exploit the previously unexploitable. As a reviewer, you should regard all memory 
corruption issues as potentially serious vulnerabilities until you can prove otherwise. 
7.2 Chapter 6.  C Language Issues 
Chapter 6. C Language Issues 
"One day you will understand." 
Neel Mehta, Senior Researcher, Internet Security Systems X-Force 
7.2.1 Introduction 
When you're reviewing software to uncover potential security holes, it's important to 
understand the underlying details of how the programming language implements 
data types and operations, and how those details can affect execution flow. A code 
reviewer examining an application binary at the assembly level can see explicitly how 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
216 
data is stored and manipulated as well as the exact implications of an operation on a 
piece of data. However, when you're reviewing an application at the source code level, 
some details are abstracted and less obvious. This abstraction can lead to the 
introduction of subtle vulnerabilities in software that remain unnoticed and 
uncorrected for long periods of time. A thorough auditor should be familiar with the 
source language's underlying implementation and how these details can lead to 
security-relevant conditions in border cases or exceptional situations. 
This chapter explores subtle details of the C programming language that could 
adversely affect an application's security and robustness. Specifically, it covers the 
storage details of primitive types, arithmetic overflow and underflow conditions, type 
conversion issues, such as the default type promotions, signed/unsigned conversions 
and comparisons, sign extension, and truncation. You also look at some interesting 
nuances of C involving unexpected results from certain operators and other 
commonly unappreciated behaviors. Although this chapter focuses on C, many 
principles can be applied to other languages. 
7.2.2 C Language Background 
This chapter deals extensively with specifics of the C language and uses terminology 
from the C standards. You shouldn't have to reference the standards to follow this 
material, but this chapter makes extensive use of the public final draft of the C99 
standard (ISO/IEC 9899:1999), which you can find at 
www.open-std.org/jtc1/sc22/wg14/www/standards. 
The C Rationale document that accompanies the draft standard is also useful. 
Interested readers should check out Peter Van der Linden's excellent book Expert C 
Programming (Prentice Hall, 1994(? [????.])) and the second edition of Kernighan 
and Ritchie's The C Programming Language (Prentice Hall, 1988(? [????.])). You 
might also be interested in purchasing the final version of the ISO standard or the 
older ANSI standard; both are sold through the ANSI organization's Web site 
(www.ansi.org). 
Although this chapter incorporates a recent standard, the content is targeted toward 
the current mainstream use of C, specifically the ANSI C89/ISO 90 standards. 
Because low-level security details are being discussed, notes on any situations in 
which changes across versions of C are relevant have been added. 
Occasionally, the terms "undefined behavior" and "implementation-defined behavior" 
are used when discussing the standards. Undefined behavior is erroneous behavior: 
conditions that aren't required to be handled by the compiler and, therefore, have 
unspecified results. Implementation-defined behavior is behavior that's up to the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
217 
underlying implementation. It should be handled in a consistent and logical manner, 
and the method for handling it should be documented. 
7.2.3 Data Storage Overview 
Before you delve into C's subtleties, you should review the basics of C 
typesspecifically, their storage sizes, value ranges, and representations. This section 
explains the types from a general perspective, explores details such as binary 
encoding, twos complement arithmetic, and byte order conventions, and winds up 
with some pragmatic observations on common and future implementations. 
The C standards define an object as a region of data storage in the execution 
environment; its contents can represent values. Each object has an associated type: 
a way to interpret and give meaning to the value stored in that object. Dozens of 
types are defined in the C standards, but this chapter focuses on the following: 
Character types There are three character types: char, signed char, and 
unsigned char. All three types are guaranteed to take up 1 byte of storage. 
Whether the char type is signed is implementation defined. Most current 
systems default to char being signed, although compiler flags are usually 
available to change this behavior. 
Integer types There are four standard signed integer types, excluding the 
character types: short int, int, long int, and long long int. Each standard 
type has a corresponding unsigned type that takes the same amount of 
storage. (Note: The long long int type is new to C99.) 
Floating types There are three real floating types and three complex types. 
The real floating types are float, double, and long double. The three 
complex types are float _Complex, double_Complex, and long double 
_Complex. (Note: The complex types are new to C99.) 
Bit fields A bit field is a specific number of bits in an object. Bit fields can be 
signed or unsigned, depending on their declaration. If no sign type specifier is 
given, the sign of the bit field is implementation dependent. 
Note 
Bit fields might be unfamiliar to some programmers, as they usually aren't present 
outside network code or low-level code. Here's a brief example of a bit field: 
struct controller 
{ 
    unsigned int id:4; 
    unsigned int tflag:1; 
    unsigned int rflag:1; 
    unsigned int ack:2; 
    unsigned int seqnum:8; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
218 
    unsigned int code:16; 
}; 
The controller structure has several small members. id refers to a 4-bit unsigned 
variable, and tflag and rflag refer to single bits. ack is a 2-bit variable, seqnum is an 
8-bit variable, and code is a 16-bit variable. The members of this structure are likely 
to be laid out so that they're contiguous bits in memory that fit within one 32-bit 
region. 
From an abstract perspective, each integer type (including character types) 
represents a different integer size that the compiler can map to an appropriate 
underlying architecture-dependent data type. A character is guaranteed to consume 
1 byte of storage (although a byte might not necessarily be 8 bits). sizeof(char) is 
always one, and you can always use an unsigned character pointer, sizeof, and 
memcpy() to examine and manipulate the actual contents of other types. The other 
integer types have certain ranges of values they are required to be able to represent, 
and they must maintain certain relationships with each other (long can't be smaller 
than short, for example), but otherwise, their implementation largely depends on 
their architecture and compiler. 
Signed integer types can represent both positive and negative values, whereas 
unsigned types can represent only positive values. Each signed integer type has a 
corresponding unsigned integer type that takes up the same amount of storage. 
Unsigned integer types have two possible types of bits: value bits, which contain the 
actual base-two representation of the object's value, and padding bits, which are 
optional and otherwise unspecified by the standard. Signed integer types have value 
bits and padding bits as well as one additional bit: the sign bit. If the sign bit is clear 
in a signed integer type, its representation for a value is identical to that value's 
representation in the corresponding unsigned integer type. In other words, the 
underlying bit pattern for the positive value 42 should look the same whether it's 
stored in an int or unsigned int. 
An integer type has a precision and a width. The precision is the number of value bits 
the integer type uses. The width is the number of bits the type uses to represent its 
value, including the value and sign bits, but not the padding bits. For unsigned integer 
types, the precision and width are the same. For signed integer types, the width is 
one greater than the precision. 
Programmers can invoke the various types in several ways. For a given integer type, 
such as short int, a programmer can generally omit the int keyword. So the keywords 
signed short int, signed short, short int, and short refer to the same data type. In 
general, if the signed and unsigned type specifiers are omitted, the type is assumed 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
219 
to be signed. However, this assumption isn't true for the char type, as whether it's 
signed depends on the implementation. (Usually, chars are signed. If you need a 
signed character with 100% certainty, you can specifically declare a signed char.) 
C also has a rich type-aliasing system supported via typedef, so programmers usually 
have preferred conventions for specifying a variable of a known size and 
representation. For example, types such as int8_t, uint8_t, int32_t, and u_int32_t 
are popular with UNIX and network programmers. They represent an 8-bit signed 
integer, an 8-bit unsigned integer, a 32-bit signed integer, and a 32-bit unsigned 
integer, respectively. Windows programmers tend to use types such as BYTE, CHAR, 
and DWORD, which respectively map to an 8-bit unsigned integer, an 8-bit signed 
integer, and a 32-bit unsigned integer. 
Binary Encoding 
Unsigned integer values are encoded in pure binary form, which is a base-two 
numbering system. Each bit is a 1 or 0, indicating whether the power of two that the 
bit's position represents is contributing to the number's total value. To convert a 
positive number from binary notation to decimal, the value of each bit position n is 
multiplied by 2n-1. A few examples of these conversions are shown in the following 
lines: 
0001 1011 = 24 + 23 + 21 + 20 = 27 
0000 1111 = 23 + 22 + 21 + 20 = 15 
0010 1010 = 25 + 23 + 21 = 42 
Similarly, to convert a positive decimal integer to binary, you repeatedly subtract 
powers of two, starting from the highest power of two that can be subtracted from the 
integer leaving a positive result (or zero). The following lines show a few sample 
conversions: 
55 = 32 + 16 + 4 + 2 + 1 
= (25) + (24) + (22) + (21) + (20) 
= 0011 0111 
37 = 32 + 4 + 1 
= (25) + (22) + (20) 
= 0010 0101 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
220 
Signed integers make use of a sign bit as well as value and padding bits. The C 
standards give three possible arithmetic schemes for integers and, therefore, three 
possible interpretations for the sign bit: 
Sign and magnitude The sign of the number is stored in the sign bit. It's 1 if the 
number is negative and 0 if the number is positive. The magnitude of the 
number is stored in the value bits. This scheme is easy for humans to read and 