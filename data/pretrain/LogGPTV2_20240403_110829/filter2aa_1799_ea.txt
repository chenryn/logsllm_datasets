### Caching and File Systems

Windows utilizes the Common Internet File System (CIFS) protocol to format messages exchanged between the redirector and the server. CIFS is a version of Microsoftâ€™s Server Message Block (SMB) protocol. For more information on SMB, refer to [Microsoft's documentation](https://docs.microsoft.com/en-us/windows/win32/fileio/microsoft-smb-protocol-and-cifs-protocol-overview).

#### Cache Manager Services and Distributed Locking

Similar to local file system drivers (FSDs), client-side remote FSDs typically use cache manager services to locally cache data from remote files and directories. In such cases, both the client and the server must implement a distributed locking mechanism. SMB client-side remote FSDs use a distributed cache coherency protocol called opportunistic locking (oplock). This ensures that the data seen by an application accessing a remote file is consistent with the data seen by applications running on other computers accessing the same file. Third-party file systems can choose to use the oplock protocol or implement their own.

Server-side remote FSDs participate in maintaining cache coherency across their clients but do not cache data from local FSDs, as local FSDs manage their own caching.

#### Serialization Mechanisms for Shared Resources

When a resource can be shared among multiple simultaneous accessors, a serialization mechanism must be in place to ensure that only one accessor writes to the resource at any given time. Without this, the resource may become corrupted. The locking mechanisms used by file servers implementing the SMB protocol include oplocks and leases. The choice of mechanism depends on the capabilities of both the server and the client, with leases being the preferred method.

#### Oplocks

Oplocks are implemented in the file system run-time library (FsRtlXxx functions) and can be used by any file system driver. When a client of a remote file server attempts to open a file, it requests an oplock. If granted, the client can cache the file, reducing network traffic. For example, a client could open a file for exclusive access, allowing it to cache all reads and writes, and then copy the updates to the server when the file is closed. If the server does not grant an oplock, all reads and writes must be sent to the server.

Once an oplock is granted, the client can start caching the file, with the type of oplock determining the type of caching allowed. An oplock can be broken if the server receives an operation incompatible with the existing locks, requiring the client to dynamically adjust its caching strategy.

Prior to SMB 2.1, there were four types of oplocks:

- **Level 1, Exclusive Access**: Allows a client to open a file for exclusive access, supporting read-ahead buffering and read or write caching.
- **Level 2, Shared Access**: Allows multiple simultaneous readers and no writers, supporting read-ahead buffering and read caching. A write to the file breaks the lock.
- **Batch, Exclusive Access**: Named after the locking used for batch (.bat) files, this lock allows the client to keep a file open on the server even if the application has closed it, supporting read, write, and handle caching.
- **Filter, Exclusive Access**: Provides a mechanism for applications and file system filters to give up the lock when other clients try to access the same file, supporting read and write caching but not delete access.

#### Example of Oplock Operation

Consider the following scenario: The server grants a Level 1 oplock to the first client to open a server file. The client caches the file data. If a second client opens the same file, it also requests a Level 1 oplock. Since two clients are now accessing the file, the server revokes the oplock and neither client is granted an oplock. The first client flushes any cached data back to the server. If the first client had not written to the file, both clients would be granted a Level 2 oplock, allowing them to cache reads but not writes.

#### Viewing Registered File Systems

To view the registered file systems on a system, you can use tools like WinObj (from Sysinternals) to see the file systems in the \FileSystem directory. Another method is to use the System Information viewer (Msinfo32) and sort the list of drivers by the Type column, grouping those with a Type attribute of SERVICE_FILE_SYSTEM_DRIVER.

Note that a driver registering as a file system driver type does not necessarily mean it is a local or remote FSD. For example, Npfs (Named Pipe File System) implements named pipes through a file system-like private namespace.

#### Leases

Introduced in SMB 2.1, leases provide a more flexible and performant client caching mechanism compared to oplocks. Leases support the following types:

- **Read (R), Shared Access**: Allows multiple simultaneous readers and no writers, supporting read-ahead buffering and read caching.
- **Read-Handle (RH), Shared Access**: Similar to a Level 2 oplock, but allows the client to keep a file open on the server even if the accessor on the client has closed the file, providing better performance for I/O-intensive applications.
- **Read-Write (RW), Exclusive Access**: Allows a client to open a file for exclusive access, supporting read-ahead buffering and read or write caching.
- **Read-Write-Handle (RWH), Exclusive Access**: Supports read, write, and handle caching, similar to the Read-Handle lease.

Leases can be converted, for example, from a Read lease to a Read-Write lease, reducing network traffic by avoiding the need to invalidate and refill the cache. Leases also allow caching by file rather than by handle, which was not possible with oplocks.

#### Comparison of Oplocks and Leases

- **Oplocks**: Can only be granted or broken.
- **Leases**: Can be converted, providing greater flexibility and better performance.

Figures 11-20 and 11-21 illustrate the behavior of oplocks and leases, respectively, showing how leases reduce network traffic and improve performance in scenarios with multiple handles to the same file.