} else {
movewait = movewait0;
if (ix + idir > 14 || ix + idir  0) {
if (ly  0) {
putstr(win, winbuf, lx, ly, 3, "h");
} else {
point -= 10; 7
if (point  0; invline--) {
for (p = invstr + (invline - 1) * 32; *p != 0; p++) {
if (*p != ' ') { 29
goto alive;
}
}
15
}
/*全部消灭*/
movewait0 -= movewait0 / 3;
goto next_group; 16
alive:
图灵社区会员 metorm 专享 尊重版权
656 …… 第29天：压缩与简单的应用程序
ly = 0;
}
}
}
}
/* GAME OVER */
putstr(win, winbuf, 15, 6, 1, "GAME OVER");
wait(0, timer, keyflag);
for (i = 1; i  0) {
/*等待一段时间*/
api_settimer(timer, i); 20
i = 128;
} else {
i = 0x0a; /* Enter */
21
}
for (;;) {
j = api_getkey(1);
if (i == j) { 22
break;
}
7
if (j == '4') {
keyflag[0 /* left */] = 1;
}
if (j == '6') { 8
keyflag[1 /* right */] = 1;
}
if (j == ' ') {
9
keyflag[2 /* space */] = 1;
}
}
return; 26
}
27
由于这不是操作系统，而只是一个应用程序。这本书也不是讲如何编写外星人游戏的，而是
讲如何编写操作系统的（笑），因此对于程序的讲解我们就速战速决吧。
28
putstr函数用来显示字符串，不过a～h的字符不是直接显示，而是用charset的字库来显示的，
为提高显示速度，使用了api_refreshwin。
29
wait函数用来延时并等待按键输入。当i指定为0时等待回车键的输入，否则按照“指定的时
间×0.01秒”为基准进行延时等待，在等待期间如果有按键输入则反映到keyflag[0～2]中。
29
HariMain则是处理游戏的主体，里面有很多变量，这里介绍一些比较难懂的。
fx：自机的x坐标（fighter_x）
lx, ly：等离子炮弹的坐标（laser_x, laser_y）① 15
——————————
① 一开始本来管自机发射的炮弹叫“激光”，不过激光居然飞得这么慢实在太诡异了（笑），于是在编故事的时候改 16
成等离子炮弹了。
图灵社区会员 metorm 专享 尊重版权
658 …… 第29天：压缩与简单的应用程序
ix, iy：外星人群的坐标（invaders_x, invaders_y）
idir：外星人群的移动方向（invaders_direction）
laserwait：等离子炮弹的剩余充电时间
movewait：当这个变量变为0时外星人群前进一步
movewait0：movewait的初始值（消灭30只敌人后减少）
invline：外星人群的行数（invaders_line）
score：当前得分
high：最高得分
point：得分的增加量（奖金的单价？）
invstr：将外星人群的状态显示为字符串的变量
对了，在这个游戏中，当外星人到达最底下一行时就Game Over了，这时按下回车键可以重
新开始。对于这个程序我们没有设定正常的结束方法，大家可以按Shift+F1或者点击“×”按钮
强制结束。
■■■■■
好了，我们来“make run”。静下心来，为了保卫地球的明天，加油！
战斗开始 呜哇！
漫长的战斗之后（话说也就是几分钟吧）……终于挂了！
地球完蛋了！……这样可不行，要是人生能重新来过就好了（太夸张了）。其实按下回车键
就可以了哦，胜败乃兵家常事，大侠请重新来过（笑）。
我们再来重新看看程序吧。make之后生成的invader.hrb大小为2335字节，也就是说，“纸娃
娃系统”所具备的API使得这样一个游戏仅用2.28KB就可以写出来。和其他操作系统相比，这并
不能算是非常好，不过笔者还是感到挺自豪的。
今天就到这里吧，明天我们继续来编写应用程序哦！
图灵社区会员 metorm 专享 尊重版权
第 30 天
高级的应用程序
 命令行计算器（harib27a）
 文本阅览器（harib27b）
 MML播放器（harib27c）
 图片阅览器（harib27d）
 IPL的改良（harib27e）
 光盘启动（harib27f）
11 命令行计算器（harib27a）
这一章我们要编写一些“高级的应用程序”，不过其实也没那么高级，说不定还是昨天那个
invader.hrb比较高级呢，因此大家可别抱太大的期望哦（笑）。
那到底做点什么样的应用程序好呢？现在我们的系统中已经有noodle.hrb可以帮我们做泡
面，还有invader.hrb可以用来玩游戏，应该再找一些其他能派上用场的功能……于是笔者想到了
计算器。
Windows中附带了一个计算器软件，不过做那样一个好看的计算器太麻烦了，我们就做一个
在命令行中输入算式来进行计算的应用程序吧。
■■■■■
我们来看程序。
calc.c
#include "apilib.h"
#include  /* sprintf */
#define INVALID -0x7fffffff
int strtol(char *s, char **endp, int base); /*标准函数(stdlib.h) */
图灵社区会员 metorm 专享 尊重版权
660 …… 第30天：高级的应用程序
char *skipspace(char *p);
int getnum(char **pp, int priority);
void HariMain(void)
{
int i;
char s[30], *p;
api_cmdline(s, 30);
for (p = s; *p > ' '; p++) { } /*一直读到空格为止*/
i = getnum(&p, 9);
if (i == INVALID) {
api_putstr0("error!\n");
} else {
sprintf(s, "= %d = 0x%x\n", i, i);
api_putstr0(s);
}
api_end();
}
char *skipspace(char *p)
{
for (; *p == ' '; p++) { } /*将空格跳过去*/