2.8.2
算符）还支持另外几种语法格式。
换句话说，对于左表查询出的每一行，不管它在右表里是否有匹配，LEFTJOIN都会强制
LEFT JOIN 的工作方式是：先指定用于对两个表里的行进行匹配的列；接着，当左表的某行
仍以刚才的那两个表t1和t2为例：
内连接只会显示在两个表里都匹配上的行。外连接除了显示同样的匹配结果，还可以把其
SELECT语句里的每一个表列的引用，都必须毫无歧义地只对应FROM子句里的一个表。
口有一种语法是用ON子句代替WHERE子句。下面示例使用INNER JOIN展示了这一点：
SELECT mytbl.col1, m.col2 FROM mytbl INNER JOIN mytbl AS m
有时，用表的名字进行限定仍不足以解决列的歧义问题。例如，你正在进行一个自连接操
口
在指定如何对表里的列进行匹配方面，INNERJOIN、CROSSJOIN和JOIN（未包括逗号运
对被连接表里的列引用进行限定
另一种语法是使用USING（）子句。它在概念上类似于ON子句，但要求被连接的列必须
不管被连接的列是否同名，都可以使用ON。
SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ON t1.i1 = t2.i2;
同名。例如，下面这条查询语句可以将mytbl1.b 连接到 mytbl2.b：“
左（外）连接和右（外）连接
2.8使用连接实现多表检索
如
97
---
## Page 118
里存在，在另一个表里无匹配）行筛选出来：
功能，只需增加一条WHERE子句，让它把右表列值为NULL的（也就是说，这些行只在一个表
色调换一下即可。
语句是等价的：
NULL值与标识未匹配行的那些NULL值区别开来。
的，结果集里的行才会没什么问题。例如，右表里包含值为NULL的列，那么你就无法将这些
需要列出这两个表，并在它们之间放置INNERJOIN来代替LEFTJOIN：
的输出，因为只有它们才是这两个表里都拥有的值：
8
当只想将左表里的那些在右表里无匹配的行找出来时，LEFTJOIN非常有用。要实现这个
之前提到过，RIGHT JOIN与LEFT JOIN 很相似，只是表的角色需要对换一下。下面两条
通常情况下，在编写这样的查询命令时，真正让人感兴趣的内容是左表里未被匹配到的值。
mySql> SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.i1= t2.i2
在使用LEFTJOIN时需要注意这样一个问题，即只有将右表里的列全部定义成NOTNULL
这一行里与t2的列相对应的所有列，其值都为NULL。
左连接会为t1表里每一行生成一个输出，不管它在t2里是否有匹配。为了编写左连接，
mySql> SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ON t1.i1 = t2.i2;
如果我们使用内连接，并根据t1.i1和t2.i2来匹配这两个表，那么只能得到值为2和3
下面的讨论将围绕LEFT JOIN展开。如果要调整成使用RIGHTJOIN的，则只须将表的角
SELECT t1.*, t2.* FROM t2 RIGHT JOIN t1 ON t1.i1 = t2.i2;
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.i1= t2.i2;
现在，结果集里对于t1.i1取值为1的情况也有了一个输出行，而它在t2里并无任何匹
Table t1:
i1lc1丨i2
i11cl1i2
i1|c11i21c21
i1|c1
---+--
第2章使用SQL管理数据
1
2
1b
C
a
C
INULLINULL
21
Table t2:
i21c2
c2
1c2
3
2
b
C
b
---
## Page 119
后考试的顺序和按先考试后学生的顺序。这里选择的是第一种：
以这样做，但因为我们正在查找缺失的考试分数行，所以对score列进行测试是顺理成章的事：
我们可以通过在WHERE子句里增加一个条件，把这些行找出来。来自 score 表的所有列都可
缺少分数行的结果行可以根据这样一个事实标识出来，即来自 score 表的列将全部为 NULL。
表通过连接而得到的每一个行，强制生成一个行，即使在 score表里没有对应的行也没关系。
进行连接。这是解决此问题的关键。这个LEFT JOIN 操作会针对student表和grade_event
到“学生ID/考试ID”对的所有匹配：
grade_event表，来产生这些组合：
两个组合列的那些值。我们想要的组合是所有的“学生+事件”。可以通过连接 student表和
面那几个示例那么简单。我们不只是要查找那些在某个列里不存在的值，而且要查找不存在于
“哪些值未出现过”的说法即是需要执行LEFTJOIN操作的一种提示。这种连接操作可不像前
事件执行一遍。也就是说，我们需要找出哪些学生和事件的组合没在score表里出现过。这种
生该次事件的成绩。因故误考的学生需要参加补考，可是要怎样才能把这些缺失的行找出来呢？
score表。不过，如果某个学生在某次考试或测验的当天生病了，那么score表里就不会有该学
已发生考试或测验事件的grade_event表，还有一个记录每位学生的每次考试或测验成绩的
这个原则应用到sampodb数据库上，并一起来看一个比早先使用t1和t2的那些示例更为复杂的示例。
同名的列进行匹配。
USING()子句要求被连接的列必须有相同的名字。
与 INNERJOIN的情况一样，不管被连接的列是否拥有相同的名字，都可以使用ON子句；但
把来自右表值为NULL的列显示出来毫无意义，因此可以把它们从输出列的列表里省略掉：
我们还可以用一个ORDER BY子句对结果进行排序。最符合逻辑的两种顺序是：按先学生
要解决的问题是
之前提到过，LEFT JOIN非常适合用于解决像“缺失了哪些值”这样的问题。接下来，我们将把
NATURAL LEFT JOIN类似于LEFT JOIN。它会按照LEFT JOIN 规则对左右两个表里所有
现在，所有需要做的事情就是列出想要在输出里看到的那些列的名字。下面是最终的语句：
SELECT
ORDER BY student.student_id,grade_event.event_id
WHERE sCore.SCore IS NULL
请注意，
FROM student INNER JOIN grade_event
接下来，我们需要利用这个连接结果，与 sCOre表一起执行一个LEFT JOIN操作，以便找
FROM student INNER JOIN grade_event
LEFT JOIN与INNERJOIN 相类似，也可以通过ON子句或USING（)子句来指定匹配条件。
+----+----1
grade_event.date, grade_event.event_id, grade_event.category
i1|cl
student.name,
1la
LEFT JOIN score ON student.student_id = score.student.id
WHERE t2.i2 IS NULL;
是：确定哪些学生在给定考试事件里没有成绩。为此，需要针对每一个考试
（因此，它不需要指定任何ON或USING子句。）
student.student_id,
AND grade_event.event_id= score.event_id
2.8使用连接实现多表检索
6
---
## Page 120
现的是找出与考试类别（‘T"）相对应的所有考试事件行的ID，然后利用它们来查找那些考试的成绩：
2.9
但因为 score.event_id值总是为 NULL,所以这条查询命令选择了 grade_event.event_id列。
表的 event_id 列时，也需要考虑相同的原则。它在 grade_event 表和 score 表里都有出现,
score.student_id，那么在输出结果里只会产生一个全部值都为 NULL的列。在决定要显示哪个
那是因为对于 sCore 表里的全部列，LEFT JOIN 返回的都是 NULL 值。如果选择
student.student_id或 score.student_id。但事实并非如此，之所以能找到我们感兴趣的行，
student表和 score 表里都有，因此你或许会认为在输出结果里也应该列出名字
100
子查询可以返回各种不同类型的信息。
SELECT * FROM Score
子查询指的是用括号括起来，并嵌入另一条语句里的那条 SELECT语句。下面有一个示例，它实
WHERE event_id IN (SELECT event_id FROM grade_event WHERE category ='T');
这里有个小细节需要解释一下。输出结果里显示了学生 ID和事件 ID。由于 student_id 列在
口
D
D
口
口
口
下面是运行这条查询语句所得到的结果：
ORDERBY
WHERE
FROM
可以用运算符EXISTS和 NOT EXISTS 来测试子查询的结果是否为空。
可以用运算符ALL、ANY和 SOME把某给定值与子查询的结果集进行比较。
可以用运算符IN和 NOT IN来测试某给定值是否包含在子查询的结果集里。
查询结果的测试方法各不相同。
列子查询返回一个由一个值或多个值构成的列
使用子查询实现多表检索
Gabrielle
Carter
Carter
Sarah
Gregory
Avery
will
Devri
Devri
Megan
name
student.student_id,grade_event.event_id;
score.score IS NULL
student INNER JOIN grade_event
表子查询返回一个由一个行或多个行构成的表，
行子查询返回一个由一个值或多个值构成的行。
标量子查询返回一个值。
Grace
第2章使用SQL管理数据
student_idI date
乙
3
L
112012-09-16
2012-09-23
2012-09-16
2012-09-16
2012-10-01
2012-09-23
2012-09-23
2012-09-06
2012-09-16
2012-10-01
2012-09-03
2012-09-23
，而行则由一个或多个列构成。
O
QOOHOOTOOO
---
## Page 121
果的比较。下面这条语句会返回多行与JohnAdams总统出生于同一个州和城市的那些总统的行：
考试中高于平均分数的分数：
这样用一个子查询来产生一个最小的出生日期：
是确定应该选取哪些行，但MIN（)的值只有在选取行之后才能确定下来。）不过，你可以像下面
能会试着编写出下面这条语句：
系比较运算符的标量子查询。例如，想要知道在 president 表里的哪位总统出生得最早，则可
失败告终。有时，为了满足只返回一个值的要求，也可以使用LIMIT1来限制子查询的结果。
是只产生一个值。也就是说，它一定是个标量子查询；如果它返回了多个值，那么整条语句将以
再在外层的SELECT里，针对那个ID与score表的所有行进行匹配：
时，它们会将外层查询里所有与子查询的返回值有着特定关系的行找出来。例如，想要查看
2012-09-23·那天的测验成绩，则可以先用一个标量子查询来确定该次测验的事件ID，然后
2.9.1
以及如何把子查询改写为连接。
可以看出MySQL优化器在使用连接的情况下，是否比使用等价的子查询表现得更好。
行限制这个子查询，不允许它查询正被修改的那个表。
表内容的语句里（如 DELETE、INSERT、REPLACE、UPDATE、LOAD DATA)，那么 MySQL会强
不这样做。
因此不能用在要求必须使用单个值的环境里。
式里、作为函数参数或者放置在输出列的列表里。列、行和表这3类子查询会返回更多的信息，
大。从理论上讲，标量子查询可以出现在任何允许使用标量操作数的地方，如出现在某个表达
如果遇到的问题可以通过在WHERE子句里使用某个聚合函数来解决，那么可以考虑用带关
除了SELECT 语句，子查询还可以用在其他语句里。不过，如果把子查询用在一条会改变
如果子查询返回的是一个行，那么可以用一个行构造器来实现一组值（即元组）与子查询结
也可以用其他的聚合函数来解决类似的问题。下面这条语句使用了一个子查询来选取某次
可这个办法是行不通的，因为你不能在WHERE子句里使用聚合函数。（WHERE子句的用途
SELECT * FROM president WHERE birth = MIN(birth);
接下来的几节讨论的内容是：多种可用来测试子查询结果的操作、如何编写相关子查询，
有些子查询可以改写为连接操作。你会发现掌握子查询的改写技术很有用，通过这门技术
子查询要不要相关都可以。也就是说，子查询既可以引用和依赖外层查询里的值，也可以
mysql> sELEcT last_name, first_name, city,
SELECT *FROM score WHERE event_id=
WHERE birth =(SELECT MIN(birth)FROM president);
在这种形式的语句里，子查询的前面有一个值和一个关系比较运算符，因此这个子查询一定
WHERE event_id=
标量子查询是最严格的，因为它只会产生一个值。正因如此，标量子查询的适用范围也最
(SELECT event_id FROM grade_event
WHERE date=
->WHERE（city,state)=
带关系比较运算符的子查询
(SELECT city,state FROM president
2012-09-23AND category='Q）;
<和<=可用来对值之间的关系进行比较。当与标量子查询配合使用
5
state FROM president
2.9使用子查询实现多表检索
101
后
---
## Page 122
起使用。此时，需要使用一个行构造器来指定与各列进行测试的比较值。
缺勤记录的学生和没有缺勤记录（也就是全勤）的学生：
么 NOT IN 的结果即为真。下面两条语句分别使用 IN 和 NOT IN 来查找那些在 absence 表里有
个行相匹配，那么IN的结果即为真。如果外层查询里的行与子查询返回的所有行都不匹配，那
们会测试某个给定的比较值是否存在于某一组值里。如果外层查询里的行与子查询返回的某一
2.9.2
造器。