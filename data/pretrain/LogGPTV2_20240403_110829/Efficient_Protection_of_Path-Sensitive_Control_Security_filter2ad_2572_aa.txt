title:Efficient Protection of Path-Sensitive Control Security
author:Ren Ding and
Chenxiong Qian and
Chengyu Song and
William Harris and
Taesoo Kim and
Wenke Lee
Efficient Protection of Path-Sensitive  
Control Security
Ren Ding and Chenxiong Qian, Georgia Tech; Chengyu Song, UC Riverside;  
Bill Harris, Taesoo Kim, and Wenke Lee, Georgia Tech
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/ding
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXEfficient Protection of Path-Sensitive Control Security
Ren Ding*
Georgia Tech
Chenxiong Qian*
Georgia Tech
William Harris
Georgia Tech
Taesoo Kim
Georgia Tech
Chengyu Song
UC Riverside
Wenke Lee
Georgia Tech
* Equal contribution joint first authors
Abstract
Control-Flow Integrity (CFI), as a means to prevent
control-flow hijacking attacks, enforces that each instruc-
tion transfers control to an address in a set of valid targets.
The security guarantee of CFI thus depends on the defi-
nition of valid targets, which conventionally are defined
as the result of a static analysis. Unfortunately, previous
research has demonstrated that such a definition, and thus
any implementation that enforces it, still allows practical
control-flow attacks.
In this work, we present a path-sensitive variation of
CFI that utilizes runtime path-sensitive point-to analysis
to compute the legitimate control transfer targets. We
have designed and implemented a runtime environment,
PITTYPAT, that enforces path-sensitive CFI efficiently by
combining commodity, low-overhead hardware monitor-
ing and a novel runtime points-to analysis. Our formal
analysis and empirical evaluation demonstrate that, com-
pared to CFI based on static analysis, PITTYPAT ensures
that applications satisfy stronger security guarantees, with
acceptable overhead for security-critical contexts.
1
Introduction
Attacks that compromise the control-flow of a program,
such as return-oriented programming [33], have criti-
cal consequences for the security of a computer system.
Control-Flow Integrity (CFI) [1] has been proposed as a
restriction on the control-flow transfers that a program
should be allowed to take at runtime, with the goals of
both ruling out control-flow hijacking attacks and being
enforced efficiently.
A CFI implementation can be modeled as program
rewriter that (1) before a target program P is executed, de-
termines feasible targets for each indirect control transfer
location in P, typically done by performing an analysis
that computes a sound over-approximation of the set of
all memory cells that may be stored in each code pointer
(i.e., a static points-to analysis [2, 34]). The rewriter then
(2) rewrites P to check at runtime before performing each
indirect control transfer that the target is allowed by the
static analysis performed in step (1).
A significant body of work [1, 21, 41] has introduced
approaches to implement step (2) for a variety of exe-
cution platforms and perform it more efficiently. Unfor-
tunately, the end-to-end security guarantees of such ap-
proaches are founded on the assumption that if an attacker
can only cause a program to execute control branches
determined to be feasible by step (1), then critical appli-
cation security will be preserved. However, recent work
has introduced new attacks that demonstrate that such an
assumption does not hold in practice [5, 12, 32]. The lim-
itations of existing CFI solutions in blocking such attacks
are inherent to any defense that uses static points-to infor-
mation computed per control location in a program. Cur-
rently, if a developer wants to ensure that a program only
chooses valid control targets, they must resort to ensure
that the program satisfies data integrity, a significantly
stronger property whose enforcement typically incurs pro-
hibitively large overhead and/or has deployment issues,
such as requiring the protected program being recompiled
together with all dependent libraries and cannot be ap-
plied to programs that perform particular combinations of
memory operations [17, 22–24].
In this work, we propose a novel, path-sensitive vari-
ation of CFI that is stronger than conventional CFI (i.e.,
CFI that relies on static points-to analysis). A program
satisfies path-sensitive CFI if each control transfer taken
by the program is consistent with the program’s entire
executed control path. Path-sensitive CFI is a stronger
security property than conventional CFI, both in principle
and in practice. However, because it does not place any
requirements on the correctness of data operations, which
happen much more frequently, it can be enforced much
more efficiently than data integrity. To demonstrate this,
we present a runtime environment, named PITTYPAT, that
enforces path-sensitive efficiently using a combination of
USENIX Association
26th USENIX Security Symposium    131
commodity, low-overhead hardware-based monitoring
and a new runtime points-to analysis.
PITTYPAT addressed two key challenges in building an
efficient path-sensitive CFI solution. The first challenge
is how to efficiently collect the path information about a
program’s execution so as to perform the analysis and de-
termine if the program has taken only valid control targets.
Collecting such information is not straightforward for dy-
namic analysis. An approach that maintains information
inside the same process address space of the monitored
program (e.g., [17]) must carefully protect the informa-
tion; otherwise it would be vulnerable to attacks [11]. On
the other hand, an approach that maintains information in
a separate process address space must efficiently replicate
genuine and sufficient data from the monitored program.
The second key challenge is how to use collected infor-
mation to precisely and efficiently compute the points-to
relationship. Niu et al. [26] have proposed leveraging
execution history to dynamically activate control transfer
targets. However, since the activation is still performed
over the statically computed control-flow graph, its accu-
racy can degrade to the same as pure static-analysis-based
approach. We compare PITTYPAT to such approaches in
detail in §6.
PITTYPAT applies two key techniques in addressing
these two challenges. First, PITTYPAT uses an event-
driven kernel module that collects all chosen control-
transfer targets from the Processor Tracing (PT) feature
available on recent Intel processors [31]. PT is a hardware
feature that efficiently records conditional and indirect
branches taken by a program. While PT was originally in-
troduced to enable detailed debugging through complete
tracing, our work demonstrates that it can also be ap-
plied as an effective tool for performing precise, efficient
program analysis for security.
The second technique is an abstract-interpretation-
based incremental points-to analysis. Our analysis embod-
ies two key innovations. First, raw PT trace is highly com-
pressed (see §3 for details). As a result, reconstructing the
control-flow (i.e., source address to destination address)
itself is time consuming and previous work has utilized
multiple threads to reduce the decoding latency [13]. Our
insight to solve this problem is to sync up our analysis
with the execution, so that our analysis only needs to
know what basic blocks being executed, not the control
transfer history. Therefore, we can directly map the PT
trace to basic blocks using the control-flow graph (CFG).
The second optimization is based on the observation that
static points-to analyses collect and solve a system of
constraints over all pairs of pointer variables in the pro-
gram [2, 15]. While this approach has good throughput,
it introduces unacceptable latency for online analysis. At
the same time, to enforce CFI, we only need to know the
points-to information of code pointers. Based on this ob-
servation, our analysis eagerly evaluates control relevant
points-to constraints as they are generated.
We implemented PITTYPAT as an instrumenting com-
piler for the LLVM compiler [20] and a tool for Linux;
the instrumenting compiler is an artifact of the current
version of our prototype: PITTYPAT does not fundamen-
tally rely on the ability to compile and instrument a target
program. To evaluate PITTYPAT, we used it to enforce
path-sensitive CFI for a set of security benchmarks devel-
oped in independent work. The results demonstrate that
PITTYPAT can detect recent attacks on the control flow
of benign benchmarks [5], as well as subversion of con-
trol flow in programs explicitly crafted to contain control
vulnerabilities that are difficult to detect [12, 32]. In com-
mon cases where CFI allows a program to choose from
tens of control transfer targets, PITTYPAT typically deter-
mines that only a single target is valid, based on the pro-
gram’s executed control path. On even compute-intensive
benchmarks, PITTYPAT incurs reasonable performance
overhead: a geometric mean of 12.73% over all SPEC
CPU2006 benchmarks, whereas techniques that enforce
data integrity incur 122.60%.
The rest of this paper is organized as follows. In §2,
we illustrate PITTYPAT by example. In §3, we review
previous work on which PITTYPAT is based. In §4, we
present the security guarantees that PITTYPAT establishes,
and describe the design of PITTYPAT. In §5, we describe
the implementation of PITTYPAT in detail. In §6, we
present an empirical evaluation of PITTYPAT. In §7, we
compare PITTYPAT to related work. In §8, we conclude
our work.
2 Overview
In this section, we present PITTYPAT by introducing a
running example. In §2.1, we present a program dispatch
that contains a control-flow vulnerability. In §2.2, we
use dispatch to illustrate that any defense that enforces
conventional CFI allows effective attacks on control-flow.
In §2.3, we illustrate that path-sensitive CFI enforced by
PITTYPAT does not allow the attack introduced in §2.2. In
§2.4, we illustrate how PITTYPAT enforces path-sensitive
CFI.
2.1 Subverting control flow
Figure 1 contains a C program, named dispatch, that
we will use to illustrate PITTYPAT. dispatch declares a
pointer handler (line L7) to a function that takes an argu-
ment of a struct request (defined at line L1–L4), which
has two fields: auth_user represents a user’s identity, and
args stores the arguments. dispatch contains a loop (line
L10–L23) that continuously accepts requests from users,
132    26th USENIX Security Symposium
USENIX Association
void (*handler)(struct request *) = 0;
struct request req;
// parse the next request
parse_request(&req);
if (req.auth_user == ADMIN) {
handler = priv;
while(1) {
1 struct request {
int auth_user;
2
char args[100];
3
4 };
5
6 void dispatch() {
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24 }
} else {
}
handler = unpriv;
// NOTE. buffer overflow, which can overwrite
//
strip_args(req.args);
the handler variable
}
// invoke the hanlder
handler(&req);
Figure 1: A motivating example that illustrates the advan-
tages of control-path validity.
and calls parse_request (line 12) to parse the next re-
quest. If the request is an administrator (line L13), the
function pointer handler will be assigned with priv. Oth-
erwise, handler is assigned to unpriv (line L16), and
dispatch will call strip_args (line L19) to strip the re-
quest’s arguments. At last, dispatch calls handler to
perform relevant behaviors.
However, the procedure strip_args contains a buffer-
overflow vulnerability, which allows an attacker with con-
trol over input to strip_args to potentially subvert the
control flow of a run of dispatch by using well-known
techniques [28]. In particular, the attacker can provide
inputs that overwrite memory outside of the fixed-size
buffer pointed to by req.args in order to overwrite the
address stored in handler to be the address of a function
of their choosing, such as execve.
2.2 Limitations of existing CFI
Protecting dispatch so that it satisfies conventional
control-flow integrity (CFI) [1] does not provide strong
end-to-end security guarantees. An implementation of
CFI attempts to protect a given program P in two steps. In
the first step, the CFI implementation computes possible
targets of each indirect control transfer in P by running
a flow-sensitive points-to analysis1 [2, 15, 34]. Such an
approach, when protecting dispatch, would determine
that when the execution reaches each of the following
control locations L, the variable handler may store the
1Some implementations of CFI [25, 41, 42] use a type-based alias
analysis to compute valid targets, but such approaches are even less
precise.
following addresses p(L):
p(L7) ={0}
p(L16) ={unpriv}
p(L14) ={priv}
p(L22) ={priv, unpriv}
While flow-sensitive points-to analysis may implement
various algorithms, the key property of each such analy-
sis is that it computes points-to information per control
location. If there is any run of the program that may reach
control location L with a pointer variable p storing a par-
ticular address a, then the result of the points-to analysis
must reflect that p may point to a at L. In the case of
dispatch, any flow-sensitive points-to analysis can only
determine that at line L22, handler may point to either
priv or unpriv.
After computing points-to sets p for program P, the
second step of a CFI implementation rewrites P so that at
each indirect control-transfer instruction in each run, the
rewritten P can only transfer control to a control location
that is a points-to target in the target register according
to p. Various implementations have been proposed for
encoding points-to sets and validating control transfers
efficiently [1, 9, 41].
However, all such schemes are fundamentally limited
by the fact that they can only validate if a transfer target
is allowed by checking its membership in a flow-sensitive
points-to set, computed per control location. dispatch
and the points-to sets p illustrate a case in which any
such scheme must allow an attacker to subvert control
flow. In particular, an attacker can send a request with
the identity of anonymous user. When dispatch accepts
such a request, it will store unpriv in handler, and then
strip the arguments. The attacker can provide arguments
crafted to overwrite handler to store priv, and allow
execution to continue. When dispatch calls the function
stored in handler (line L22), it will attempt to transfer
control to priv, a member of the points-to set for L22.
Thus, dispatch rewritten to enforce CFI must allow the
call. Let the sequence of key control locations visited in
the above attack be denoted p0 = [L7, L16, L22].
Although PathArmor [37] enforces context-sensitive
CFI by inspecting the history of branches taken at run-
time before allowing the monitored execution to perform a
security-sensitive operation, it decides to allow execution
to continue if the path contains a sequence of control trans-
fers that are feasible according to a static, flow-sensitive
points-to analysis computed before the program is run.
As a result, PathArmor is susceptible to a similar attack.
Per-input CFI (denoted π-CFI) [26] avoids some of the
vulnerabilities in CFI inherent to its use of flow-sensitive
points-to sets, such as the vulnerability described above
for dispatch. π-CFI updates the set of valid targets of
control transfers of each instruction dynamically, based
on operations performed during the current program ex-
ecution. For example, π-CFI only allows a program to
USENIX Association