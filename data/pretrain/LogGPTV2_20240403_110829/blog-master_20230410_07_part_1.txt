## PostgreSQL 16 preview - standby 支持 logical decoding    
### 作者                                                                                                
digoal                                                                                                
### 日期                                                                                                
2023-04-10                                                                                            
### 标签                                                                                                
PostgreSQL , PolarDB , standby , 物理从库 , logical decoding   
----                                                                                                
## 背景     
PostgreSQL 16 preview - standby 支持 logical decoding     
也就是说, PG 16 可以在物理流复制从库上开启logical decoding.  那么问题来了:  
1、在哪里创建逻辑复制slot?   
不知道, 猜测可以直接在standby上创建.  因为每个节点的slot信息都是文件形式存储的, 不需要修改catalog信息.   
2、如何避免冲突问题: 例如 上游wal_level改成小于logical   
如果上游primary节点的wal level改成了minimal或者replica, 那么standby 的logical slot将被设置为invalid, 因为上游产生的wal不足以解析逻辑数据.    
3、如何避免冲突问题: 例如 如果 decoding wal pages 需要的catalog被primary节点清掉了怎么办?   
standby 的logical slot将被设置为invalid, 因为catalog老的用于decoding wal page的tuple version可能不存在了, 因此不能正确的解析老的wal page.    
4、standby 的logical slot的位点信息会不会同步给primary    
这个问题不存在, 因为每个节点的slot信息都是文件形式存储的, 没有存储在catalog里面, 所以并不需要把slot位点同步给primary, primary也查不到standby的slot信息.    
5、cascading replication的场景: 当物理从库仅仅完成wal receive and flush后, 如果就立即decoding对应的wal, 逻辑上可能存在问题, 怎么解决?    
在cascading replication的场景, 物理流复制从库(standby)启动wal sender的时机做了区分: 当wal flush完成后即可启动physical wal sender, 只有当apply完成后才启动logical wal sender.   
Physical walsenders can't send data until it's been flushed;   
logical walsenders can't decode and send data until it's been applied.   
On the standby, the WAL is flushed first, which will only wake up physical walsenders;   
and then applied, which will only wake up logical walsenders.  
## 相关patch  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=0fdab27ad68a059a1663fa5ce48d76333f1bd74c  
```  
Allow logical decoding on standbys  
author	Andres Freund 	  
Sat, 8 Apr 2023 09:20:01 +0000 (02:20 -0700)  
committer	Andres Freund 	  
Sat, 8 Apr 2023 09:20:05 +0000 (02:20 -0700)  
commit	0fdab27ad68a059a1663fa5ce48d76333f1bd74c  
tree	3d29650901130428712f71cbb8b57cb19f738f1a	tree  
parent	e101dfac3a53c20bfbf1ca85d30a368c2954facf	commit | diff  
Allow logical decoding on standbys  
Unsurprisingly, this requires wal_level = logical to be set on the primary and  
standby. The infrastructure added in 26669757b6a ensures that slots are  
invalidated if the primary's wal_level is lowered.  
Creating a slot on a standby waits for a xl_running_xact record to be  
processed. If the primary is idle (and thus not emitting xl_running_xact  
records), that can take a while.  To make that faster, this commit also  
introduces the pg_log_standby_snapshot() function. By executing it on the  
primary, completion of slot creation on the standby can be accelerated.  
Note that logical decoding on a standby does not itself enforce that required  
catalog rows are not removed. The user has to use physical replication slots +  
hot_standby_feedback or other measures to prevent that. If catalog rows  
required for a slot are removed, the slot is invalidated.  
See 6af1793954e for an overall design of logical decoding on a standby.  
Bumps catversion, for the addition of the pg_log_standby_snapshot() function.  
Author: "Drouvot, Bertrand"   
Author: Andres Freund  (in an older version)  
Author: Amit Khandekar  (in an older version)  
Reviewed-by: Andres Freund   
Reviewed-by: FabrÌzio de Royes Mello   
Reviewed-by: Amit Kapila   
Reviewed-By: Robert Haas   
```  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=e101dfac3a53c20bfbf1ca85d30a368c2954facf  
```  
For cascading replication, wake physical and logical walsenders separately  
author	Andres Freund 	  
Sat, 8 Apr 2023 07:24:24 +0000 (00:24 -0700)  
committer	Andres Freund 	  
Sat, 8 Apr 2023 08:06:00 +0000 (01:06 -0700)  
commit	e101dfac3a53c20bfbf1ca85d30a368c2954facf  
tree	1a5c755d9eb0a2f6f1d6251d9dd9f185654534cb	tree  
parent	26669757b6a7665c1069e77e6472bd8550193ca6	commit | diff  
For cascading replication, wake physical and logical walsenders separately  
Physical walsenders can't send data until it's been flushed; logical  
walsenders can't decode and send data until it's been applied. On the  
standby, the WAL is flushed first, which will only wake up physical  
walsenders; and then applied, which will only wake up logical  
walsenders.  
Previously, all walsenders were awakened when the WAL was flushed. That  
was fine for logical walsenders on the primary; but on the standby the  
flushed WAL would have been not applied yet, so logical walsenders were  
awakened too early.  
Per idea from Jeff Davis and Amit Kapila.  
Author: "Drouvot, Bertrand"   
Reviewed-By: Jeff Davis   
Reviewed-By: Robert Haas   
Reviewed-by: Amit Kapila   
Reviewed-by: Masahiko Sawada   
Discussion: https://postgr.es/m/CAA4eK1+PI:EMAIL  
```  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=6af1793954e  
```  
Add info in WAL records in preparation for logical slot conflict handling  
author	Andres Freund 	  
Sun, 2 Apr 2023 19:32:19 +0000 (12:32 -0700)  
committer	Andres Freund 	  
Sun, 2 Apr 2023 19:32:19 +0000 (12:32 -0700)  
commit	6af1793954e8c5e753af83c3edb37ed3267dd179  
tree	f3f3f39f3d46a6ed6f21b9b9473fcfc93657ff05	tree  
parent	ab73291d263049f00a394b37940ed197616fc3f8	commit | diff  
Add info in WAL records in preparation for logical slot conflict handling  
This commit only implements one prerequisite part for allowing logical  
decoding. The commit message contains an explanation of the overall design,  
which later commits will refer back to.  
Overall design:  
1. We want to enable logical decoding on standbys, but replay of WAL  
from the primary might remove data that is needed by logical decoding,  
causing error(s) on the standby. To prevent those errors, a new replication  
conflict scenario needs to be addressed (as much as hot standby does).  
2. Our chosen strategy for dealing with this type of replication slot  
is to invalidate logical slots for which needed data has been removed.  
3. To do this we need the latestRemovedXid for each change, just as we  
do for physical replication conflicts, but we also need to know  
whether any particular change was to data that logical replication  
might access. That way, during WAL replay, we know when there is a risk of  
conflict and, if so, if there is a conflict.  
4. We can't rely on the standby's relcache entries for this purpose in  
any way, because the startup process can't access catalog contents.  
5. Therefore every WAL record that potentially removes data from the  
index or heap must carry a flag indicating whether or not it is one  
that might be accessed during logical decoding.  
Why do we need this for logical decoding on standby?  
First, let's forget about logical decoding on standby and recall that  
on a primary database, any catalog rows that may be needed by a logical  
decoding replication slot are not removed.  
This is done thanks to the catalog_xmin associated with the logical  
replication slot.  