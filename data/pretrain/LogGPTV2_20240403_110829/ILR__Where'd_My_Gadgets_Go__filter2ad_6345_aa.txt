title:ILR: Where'd My Gadgets Go?
author:Jason Hiser and
Anh Nguyen-Tuong and
Michele Co and
Matthew Hall and
Jack W. Davidson
2012 IEEE Symposium on Security and Privacy
ILR: Where’d My Gadgets Go?
Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, Jack W. Davidson
University of Virginia, Department of Computer Science
Charlottesville, VA
{hiser,an7s,mc2zk,mh,jwd}@virginia.edu
Abstract—Through randomization of the memory space and
the conﬁnement of code to non-data pages, computer security
researchers have made a wide range of attacks against program
binaries more difﬁcult. However, attacks have evolved to exploit
weaknesses in these defenses.
To thwart these attacks, we introduce a novel technique
called Instruction Location Randomization (ILR). Conceptu-
ally, ILR randomizes the location of every instruction in a
program, thwarting an attacker’s ability to re-use program
functionality (e.g., arc-injection attacks and return-oriented
programming attacks).
ILR operates on arbitrary executable programs, requires
no compiler support, and requires no user interaction. Thus,
it can be automatically applied post-deployment, allowing easy
and frequent re-randomization.
Our preliminary prototype, working on 32-bit x86 Linux
ELF binaries, provides a high degree of entropy. Individual
instructions are randomly placed within a 31-bit address
space. Thus, attacks that rely on a priori knowledge of the
location of code or derandomization are not feasible. We
demonstrated ILR’s defensive capabilities by defeating attacks
against programs with vulnerabilities, including Adobe’s PDF
viewer, acroread, which had an in-the-wild vulnerability.
Additionally, using an industry-standard CPU performance
benchmark suite, we compared the run time of prototype
ILR-protected executables to that of native executables. The
average run-time overhead of ILR was 13% with more than
half the programs having effectively no overhead (15 out of 29),
indicating that ILR is a realistic and cost-effective mitigation
technique.
Keywords-Randomization; Exploit prevention; Diversity;
ASLR; Return-oriented-programming, arc-injection;
I. INTRODUCTION
Computer software controls many major aspects of mod-
ern life, including air travel, power distribution, banking,
medical treatment, trafﬁc control, and a myriad of other
essential infrastructures. Unfortunately, weaknesses in soft-
ware code (such as memory corruption, ﬁxed-width integer
computation errors, input validation oversights, and format
string vulnerabilities) remain common. Via these weak-
nesses, attackers are able to hijack an application’s intended
control ﬂow to violate security policies (exﬁltrating secret
data, allowing remote access, bypassing authentication, or
eliminating services) [1–4].
Unfortunately, modern deployed defenses fail
to thor-
oughly mitigate these threats, even when composed. Perhaps
the most commonly deployed defenses are Address Space
© 2012, Jason Hiser. Under license to IEEE.
DOI 10.1109/SP.2012.39
571
Layout Randomization (ASLR) [5] and W⊕X [5, 6]. In
theory, ASLR randomizes the addresses used in a pro-
gram. Unfortunately, only some addresses are randomized
in modern implementations. For example, the main program
text
is not randomized on Linux implementations since
programs do not have enough information to safely relocate
this portion of code. Further, ASLR only randomizes the
base address of loaded modules, not each address within
the module. Thus, ASLR is vulnerable to information-
leakage and entropy-exhausting attacks [7, 8]. W⊕X seeks
to delineate code from data to prevent code-injection attacks.
However, arc-injection attacks and various forms of return-
oriented programming (ROP) attacks bypass W⊕X through
reuse of code already embedded in the program [2, 8–10].
In this paper we describe a novel technique, called In-
struction Location Randomization (ILR), that conceptually
randomizes the location of every instruction in a program.
ILR can use the full address space of the process (e.g.,
32-bits on 32-bit processors such as the x86). Information
leakage attacks that discover information about the location
of a code block (e.g.,
the randomized base address of
a dynamically loaded module or the start of a function)
are infeasible for two reasons: 1) the randomized code
addresses are protected from leakage and 2) a leak provides
no information about the location of other code blocks.
ILR changes a fundamental characteristic typically used
by attackers—predictable code layout. For example, pro-
grams are arranged sequentially in memory starting at a base
address, as shown in the left of Figure 1.1
In this example, the address used to return from function
foo (7003) might be leaked if there is a vulnerability
in the function. An attacker that learns this information
can easily determine the location of all other instructions.
Attackers routinely rely on the fundamental assumption of
predictable code layout to craft attacks such as arc-injection
and the various forms of return-oriented programming. In
the example, an attacker might use the address of the
add instruction to mount an ROP attack using add eax,
#1;ret as an ROP gadget.2 For a detailed explanation of
1For simplicity, the ﬁgure and discussion assume all instructions are
one byte. Our general approach, prototype implementation, and security
discussion do not rely on this fact.
2ROP gadgets are short sequences of code, typically ending in a return
instruction, that perform some small portion of the attack.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:42 UTC from IEEE Xplore.  Restrictions apply. 
7UDGLWLRQDO3URJUDP&UHDWLRQ
,/5SURWHFWHG3URJUDP
&RPSLOHU¶V&)*
FPSHD[
MHT/
FDOOIRR
PRY>[@
DGGHD[
UHW






FPSHD[
MHT
FDOO
PRY>[@
DGGHD[
UHW
)DOOWKURXJK0DS
EG!GH
GI!FE
FE!I
I!D
E!DE
D
DGGHD[
EF
FPSHD[
I
PRY>[@
DE
UHW
FE
FDOOI
GH
MHTDE
Figure 1. Traditional program creation versus an ILR-protected program.
In a traditional program, instructions are arranged sequentially and pre-
dictably, allowing an attack. With an ILR-protected program, instructions
are distributed across memory randomly, preventing attack.
ROP gadgets and how they are combined to form an attack,
please see Shacham’s prior work [2].
ILR adopts an execution model where each instruction
has an explicitly speciﬁed successor. Thus, each instruc-
tion’s successor is independent of its location. This model
of execution allows instructions to be randomly scattered
throughout the memory space. Hiding the explicit successor
information prevents an attacker from predicting the location
of an instruction based on the location of another instruction.
is provided
through the use of a process-level virtual machine (PVM)
based on highly efﬁcient software dynamic translation tech-
nology [11–13]. The PVM handles executing the non-
sequential, randomized code on the host machine.
ILR’s “non-sequential” execution model
We have implemented a prototype ILR implementation
for Linux on the x86 and Section III provides complete
implementation details. In short, ILR operates on arbitrary
executables, requires no compiler support, and no user
interaction. Using a set of vulnerable programs (including a
binary distributed by Adobe to read PDF ﬁles) and ASLR-
and W⊕X-defeating exploits, we demonstrate that ILR de-
tects and thwarts these attacks. An important consideration
of any mitigation technique is the run-time overhead. Many
proposed mitigation techniques incur high overheads—as
much as 90% to 2000% [14, 15]. Using a large industry-
standard CPU performance benchmark suite [16], we com-
pared the run time of ILR-protected executables to that of
native executables. The average run-time overhead of ILR
was 13% with over half of all programs having effectively
no overhead (less than 3%) indicating that ILR is a realistic
and cost-effective mitigation technique.
This paper makes several contributions. It:
• presents Instruction Location Randomization (ILR), a
technique that provides high-entropy diversity for relo-
cating instructions with low run-time overhead,
• demonstrates that ILR defeats arc-injection and ROP
attacks on arbitrary binaries without need for compiler,
linker, operating system or hypervisor support,
• provides a complete description of how ILR can achieve
its goals despite inherent uncertainty about a program’s
structure, such as where code and data reside, and
• thoroughly analyzes the security, effectiveness, and
performance of ILR in a prototype system on large,
real-world benchmarks.
The remainder of the paper is organized as follows:
Section II ﬁrst discusses the threat model within which ILR
operates. Section III describes the details of ILR. Sections IV
and V provide an evaluation and security discussion of
the proposed techniques. Section VI compares our work to
related work in the ﬁeld. Finally, Section VII summarizes
our ﬁndings.
II. THREAT MODEL
We assume that the unprotected program is created and
distributed to an end user (and possibly the attacker) in
binary form. The program has been tested, but not guaran-
teed to be free from programmatic errors that might allow
malicious exploit, such as memory errors. The program is
assumed to be free from intentionally planted back doors,
trojans, etc. Furthermore, the program is to be protected
and deployed in a setting where the other software on the
system is believed to be operating correctly, and the system
administrator is trusted. An attacker does not have direct
access to the system or the protected program. However,
the attacker understands the protection methodology and
may have access to tools for applying ILR protections. The
attacker also has access to the unprotected version of the
program, and can specify malicious input to the protected
program.
In particular, ILR focuses on preventing attacks which
rely on code being located predictably. This threat model
includes a large range of possible attacks against a program.
For example, many attacks against client and server soft-
ware ﬁt this model. Document viewers/editors (Adobe PDF
viewer, Microsoft Word), e-mail clients (Microsoft Outlook,
Mozilla Thunderbird), and web browsers (Mozilla Firefox,
Microsoft Internet Explorer, Google Chrome) need to be
protected from these types of threats anytime a user requests
the program to examine data from an untrusted source.
III. INSTRUCTION LOCATION RANDOMIZATION
ILR’s goals are to achieve high randomization and low
run-time overhead. Figure 1 conceptually illustrates the
effect of ILR and how it mitigates malicious attacks. The top
left of the ﬁgure shows the control-ﬂow graph of a particular
program segment. The compiler and the linker collaborate
to produce an executable ﬁle where instructions are laid out
so they can be loaded into memory when the program is
executed. A typical layout of code is shown at the bottom
left of the ﬁgure.
572
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:42 UTC from IEEE Xplore.  Restrictions apply. 
Offline 
Analysis
ILR 
Execution
Arbitrary 
Binary
ILR Static 
Analysis
ILR Rewrite 
Rules
ILR VM
Figure 2. High-level overview of ILR architecture.
39bc ** cmp eax, #24
39bd -> d27e
d27e ** jeq a96b
d27f -> cb20
cb20 ** call 5f32
cb21 -> 67f3
67f3 ** mov [0x8000], 0
67f4 -> a96b
224a ** add eax, #1
224b -> 67f3
a96b ** ret
An attacker,
through knowledge of the instruction-set
architecture and the executable format, can easily locate
portions of code that may be useful in crafting an attack. For
example, the attacker may identify the instruction sequence
at locations 7004 and 7005 as being a gadget useful in
crafting an ROP attack. This particular gadget adds one to
register eax. By identifying a set of gadgets and exploiting
a vulnerability, an attacker can cause a set of gadgets to be
executed that effect the attack.
The right side of the ﬁgure shows the layout of the code
when ILR is applied. The program instructions are randomly
scattered through memory. With an address space of 32 bits,
it is infeasible for an attacker to locate a set of gadgets that
could be used to craft an attack.
To execute the randomized program, we employ a highly
efﬁcient PVM that fetches and executes the instructions
in the proper order even though they are randomly scat-
tered throughout memory. This process is accomplished via
a speciﬁcation that describes the execution successor of
each instruction in the program. This speciﬁcation, called
a fallthrough map, is shown at the top right of Figure 1.
The PVM interprets the fallthrough map to fetch and execute
instructions on the host hardware. The following subsections
describe the process of automatically producing an ILR-
protected executable and its execution.
A. ILR Architecture
Figure 2 shows the high-level architecture of the ILR
process. ILR has an ofﬂine analysis phase to relocate instruc-
tions in the binary and generate a set of rewriting rules that
describe how and where the newly located instructions are
to be executed, and how control should ﬂow between them,
(shown as the fallthrough map in Figure 1). The randomized
program is executed on the native hardware by a PVM that
uses the fallthrough map to guide execution.
The rewriting rules come in two forms. The ﬁrst form,
the instruction deﬁnition form, indicates that there is an
instruction at a particular location. The ﬁrst line of Figure 3
gives an example. In this example, address 0x39bc has the
instruction cmp eax, #24. Note that the rule indicates
that an instruction fetched from address 0x39bc should be
the cmp instruction. However, data fetches from address
0x39bc are unaffected. This distinction allows ILR to relo-
cate instructions even if instructions and data are overlapped.
Figure 3.
ILR rewrite rules corresponding to the example in Figure 1.
ILR Static Analysis
Disassembly 
Engine
IDA Pro
Functions
Call Site 
Analysis
Arbitrary 
Binary
objdump
Disassembly 
Validator
Instructions
Engine
Reassembly 
ILR 
Rewrite 
Rules
Indirect Branch 
Target Analysis
Targets
Figure 4. High-level overview of the static analysis engine used in ILR.
An example of the second form of an ILR rewrite rule,
the redirect form, is shown in the second line of Figure 3.
This line speciﬁes the fallthrough instruction for the cmp
at location 0x39bc. A normal processor would immediately
fetch from the location 0x39bd after fetching the cmp
instruction. Instead, ILR execution checks for a redirection
of the fallthrough. In this case, the fallthrough instruction is
at 0xd27e. The remaining lines show the full set of rewrite
rules for the example in Figure 1.
The ILR architecture fetches, decodes and executes in-
structions in the traditional style, but checks for rewriting
rules before fetching an instruction or calculating an instruc-
tion’s fallthrough address.
B. Ofﬂine Analysis
The static analysis phase creates an ILR-protected pro-
gram with random placement of every instruction in the
program. For such randomization, the static analysis locates
instructions, indirect branch targets, and identiﬁes call sites
for additional analysis. Figure 4 shows the organization of
the static analysis used for ILR.
1) Disassembly Engine: The goal of the ILR disassembly
engine is to locate any byte that might be the start of an
instruction. We use a recursive descent disassembler (IDA
Pro) and a linear scan disassembler (objdump) [17]. To
ensure that all
instructions are identiﬁed, we added the
disassembly validator module. The disassembly validator
iterates over every instruction found by either IDA Pro and
objdump, and veriﬁes that both the fallthrough and (direct)
target instructions are inserted into the instruction database.
573
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:42 UTC from IEEE Xplore.  Restrictions apply. 
Since exact instruction start locations in the executable
segment are not known, some of the instructions in the
instruction database may not represent instructions that were
intended by the program’s original assembly code. We make
no attempt to determine which are the intended instructions,
and which are not. We simply choose to relocate all of them.
Any data address that is mis-identiﬁed as a code address will
not be executed, therefore the corresponding rewrite rules
will simply never be accessed.
One last responsibility of the Disassembly Engine is to
record the functions that IDA Pro detects. We record each
function as a set of instructions.
2) Indirect Branch Target Analysis: The goal of the
indirect branch target analysis phase is to detect any location
in the program that might be the target of an Indirect Branch
(IB). IBs create a distinct problem for ILR. Indirect Branch
Targets (IBTs) may be encoded in the instructions or data of
a program, and it is challenging to determine which program
bytes represent an IBT and which do not. Since we wish to
randomize any arbitrary binary, our technique must tolerate
imprecision in detecting which constants are an IBT in the
program and which are not. Our solution is to perform a
byte-by-byte scan of the program’s data, and further scan the
disassembled code to determine any pointer-sized constant
which could feasibly be an indirect branch target.
We ﬁnd that in most programs, this simple heuristic is suf-
ﬁcient (see Section IV-D3 for details). However, when C++
programs use exception handling (try/catch blocks), the
compiler uses location-relative addressing to encode IBTs
for properly unwinding the stack, and invoking exception
handlers. Our technique parses the portions of the ELF ﬁle
that contain the tables used to drive the unwinding and
exception throwing process, and records IBTs appropriately.
Rewriting the bytes in the program that encode an IBT
might induce an error in the program if those bytes are used
for something besides jumping to an instruction. To avoid
breaking the program when the analysis is wrong, we choose
to leave those program bytes unmodiﬁed. Unfortunately, not
rewriting the IBTs encoded in the program means that the
program might jump to the address of an original program
(and hence unrandomized) instruction.
To accommodate indirect branches jumping to unrandom-
ized addresses, each instruction that might be an IBT gen-
erates an additional ILR rule in the program. The additional
rule uses the redirect form to map the unrandomized address
to the new, randomized address. Thus, any indirect branch
that targets an unrandomized address, correctly continues
execution at the randomized address.
Unfortunately, attackers may know the unrandomized ad-
dresses in a program, and if they can inject a control transfer
to one of these addresses, they might be able to successfully
perform an attack. The evaluation in Section IV-D3 shows
the number of IBTs detected in most programs is very lim-
ited, and restricting attacks to only these targets signiﬁcantly
reduces the attack surface.
3) Call Site Analysis: Since unrandomized instructions
may allow attacks, we wish to randomize the return address
for function calls. The call site analysis phase analyzes the
call instructions in a program to determine if the return
address can be randomized. Typically, a call instruction
stores a return address, and when execution of the function
completes, a ret instruction jumps to the address that
was stored. Most functions obey these semantics. Unfortu-
nately, call instructions can be used for other purposes, such
as obtaining the current program counter when position-
independent code or data is found in a library. Such a call
instruction is often called a thunk. Numerous other uses of
return addresses are possible.
The analysis proceeds as follows. If the call instruction is
to a known location that starts a function, we analyze the
function further. If the function can be analyzed as having
only standard function exits (using the return instruction),
having only entrances via the function’s entry instruction,
and having no direct accesses to the return value (such
as with a mov eax, [ebp+4] instruction),
then ILR
declares that it is safe to rewrite the call instruction to store
a randomized return address.
Our heuristic makes the assumption that indirect memory
accesses should not access the return address. While not
strictly true for all programs, we ﬁnd that the heuristic gener-
ally holds for programs compiled from high-level languages.
One exception to our heuristic is again the C++ exception
handling routines that “walk the stack.” The routines use the
return address to locate the appropriate unwinding, cleanup,
and exception handling codes to invoke. Like with the
IBT analysis, we adjust the call site analysis to take into
account the exception handling tables, so that call sites with
exception handling cannot push a randomized return address.
Once the analysis is complete, the ILR rules for calls
are emitted. If the call site analysis determines that the call
can randomize the return address, no additional rules are
required, and the call instruction’s location is randomized by
simply emitting the standard rewrite rules. If, however, the
non-randomized return address must be stored, we have two
choices: 1) we could choose to pin the call instruction to its
original location, so that the nonrandomized return address
is stored, or 2) rewrite the call (using ILR rewrite rules)
into a sequence of instructions that stores the unrandomized
return address and transfers control appropriately. Since
pinning instructions leads to a decrease in randomization,
we choose the second option. Most machines can efﬁciently
store the return address and perform the control transfer
necessary to mimic a call instruction, typically using only
2-3 instructions. For example, on the IA32 instruction set
architecture, a call foo instruction can be replaced with
two instructions, push ;
jmp foo, resulting in only one extra instruction. This
transformation is exactly what is performed by our call site
574
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:42 UTC from IEEE Xplore.  Restrictions apply. 
Context 
Capture
New 
PC
ILR Virtual Machine
Cached?
New Fragment
Yes
No
Fetch
Decode
Translate
Context 
Switch
Yes
Done?
Next PC
ILR Rewrite 
Rules
Figure 5. Details of the ILR Virtual Machine.
analysis when we detect that a call instruction cannot push a
randomized return address. Furthermore, the unrandomized
return address is marked as a possible indirect branch target,
since we are not sure how the return address will be used.
4) Reassembly Engine: After completely analyzing the
program’s instructions, IBTs, and call sites, the reassembly
engine gets invoked. The reassembly engine’s purpose is to
create the rewrite rules necessary to create the randomized
program. For each instruction in the database, the engine
emits a set of rewrite rules. First, it emits the rules necessary
to relocate the instruction. Note that if the instruction has a
direct branch target encoded in it (such as a jmp L1), that
branch target is rewritten to the randomized address of the
branch target. Then, the reassembly engine emits the rule to
map the instruction’s fallthrough address to the randomized
location for the fallthrough instruction.
As a post-processing step, each byte of the original
executable text gets an additional rule. If the address of the
program text is marked as a possible IBT, the reassembly
engine adds a rule to redirect that address to the randomized
address for that instruction, effectively pinning the instruc-
tion. Any other byte of the executable code segment gets
a rule to map its address to a handler that prints an error
message and exits in a controlled manner. Thus, any possible