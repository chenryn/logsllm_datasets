to the system, such as drivers, function-hooking DLLs, and minifilters, 
which we’ll discuss in later chapters.
Filesystem write
Suspicious function
Process creation
Network connection
Figure 1-1: Visualizing security events as radar blips
Evading EDR (Early Access) © 2023 by Matt Hand
4   Chapter 1
Those of us on the offensive side of things mostly care about prevent-
ing, limiting, or normalizing (as in blending in with) the flow of telemetry 
collected by the sensor. The goal of this tactic is to reduce the number of 
datapoints that the product could use to create high-fidelity alerts or pre-
vent our operation from executing. Essentially, we’re trying to generate a 
false negative. By understanding each of an EDR’s sensor components and 
the telemetry it can collect, we can make informed decisions about the 
tradecraft to use in certain situations and develop robust evasion strategies 
backed by data rather than anecdotal evidence.
What Are Detections?
Simply put, detections are the logic that correlates discrete pieces of telem-
etry with some behavior performed on the system. A detection can check 
for a singular condition (for example, the presence of a file whose hash 
matches that of known malware) or a complex sequence of events coming 
from many different sources (for example, that a child process of chrome.exe 
was spawned and then communicated over TCP port 88 with the domain 
controller).
Typically, a detection engineer writes these rules based on the avail-
able sensors. Some detection engineers work for the EDR vendor and so 
must carefully consider scale, as the detection will likely affect a substantial 
number of organizations. On the other hand, detection engineers working 
within an organization can build rules that extend the EDR’s capabilities 
beyond those that the vendor provides to tailor their detection to the needs 
of their environment.
An EDR’s detection logic usually exists in the agent and its subordinate 
sensors or in the backend collection system (the system to which all agents 
in the enterprise report). Sometimes it is found in some combination of the 
two. There are pros and cons to each approach. A detection implemented 
in the agent or its sensors may allow the EDR to take immediate preventive 
action but won’t provide it with the ability to analyze a complex situation. 
By contrast, a detection implemented at the backend collection system can 
support a huge set of detection rules but introduces delays to any preventive 
action taken.
The Challenges of EDR Evasion
Many adversaries rely on bypasses described anecdotally or in public proofs 
of concept to avoid detection on a target’s systems. This approach can be 
problematic for a number of reasons.
First, those public bypasses only work if an EDR’s capabilities stay the 
same over time and across different organizations. This isn’t a huge issue 
for internal red teams, which likely encounter the same product deployed 
across their entire environment. For consultants and malicious threat 
actors, however, the evolution of EDR products poses a significant head-
ache, as each environment’s software has its own configuration, heuristics, 
Evading EDR (Early Access) © 2023 by Matt Hand
EDR-Chitecture   5
and alert logic. For example, an EDR might not scrutinize the execution of 
PsExec, a Windows remote-administration tool, in one organization if its 
use there is commonplace. But another organization might rarely use the 
tool, so its execution might indicate malicious activity.
Second, these public evasion tools, blog posts, and papers often use 
the term bypass loosely. In many cases, their authors haven’t determined 
whether the EDR merely allowed some action to occur or didn’t detect it 
at all. Sometimes, rather than automatically blocking an action, an EDR 
triggers alerts that require human interaction, introducing a delay to the 
response. (Imagine that the alert fired at 3 am on a Saturday, allowing the 
attacker to continue moving through the environment.) Most attackers 
hope to completely evade detection, as a mature security operations cen-
ter (SOC) can efficiently hunt down the source of any malicious activity 
once an EDR detects it. This can be catastrophic to an attacker’s mission.
Third, researchers who disclose new techniques typically don’t name 
the products they tested, for a number of reasons. For instance, they might 
have signed a nondisclosure agreement with a client or worry that the 
affected vendor will threaten legal action. Consequentially, those research-
ers may think that some technique can bypass all EDRs instead of only a 
certain product and configuration. For example, a technique might evade 
user-mode function hooking in one product because the product happens 
not to monitor the targeted function, but another product might imple-
ment a hook that would detect the malicious API call.
Finally, researchers might not clarify which component of the EDR 
their technique evades. Modern EDRs are complex pieces of software 
with many sensor components, each of which can be bypassed in its own 
way. For example, an EDR might track suspicious parent–child process 
relationships by obtaining data from a kernel-mode driver, Event Tracing 
for Windows (ETW), function hooks, and a number of other sources. If 
an evasion technique targets an EDR agent that relies on ETW to collect 
its data, it may not work against a product that leverages its driver for the 
same purpose.
To effectively evade EDR, then, adversaries need a detailed understand-
ing of how these tools work. The rest of this chapter dives into their compo-
nents and structure.
Identifying Malicious Activity
To build successful detections, an engineer must understand more than 
the latest attacker tactics; they must also know how a business operates and 
what an attacker’s objectives might be. Then they must take the distinct and 
potentially unrelated datapoints gleaned from an EDR’s sensors and iden-
tify clusters of activity that could indicate something malicious happening 
on the system. This is much easier said than done.
For example, does the creation of a new service indicate that an adver-
sary has installed malware persistently on the system? Potentially, but it’s 
more likely that the user installed new software for legitimate reasons. What 
Evading EDR (Early Access) © 2023 by Matt Hand
6   Chapter 1
if the service was installed at 3 am? Suspicious, but maybe the user is burn-
ing the midnight oil on a big project. How about if rundll32.exe, the native 
Windows application for executing DLLs, is the process responsible for 
installing the service? Your gut reaction may be to say, “Aha! We’ve got you 
now!” Still, the functionality could be part of a legitimate but poorly imple-
mented installer. Deriving intent from actions can be extremely difficult.
Considering Context
The best way to make informed decisions is to consider the context of the 
actions in question. Compare them with user and environmental norms, 
known adversary tradecraft and artifacts, and other actions that the 
affected user performed in some timeframe. Table 1-1 provides an example 
of how this may work.
Table 1-1: Evaluating a Series of Events on the System
Event
Context
Determination
2:55 AM: The application 
chatapp.exe spawns under 
the context CONTOSO\jdoe.
The user JDOE frequently travels inter-
nationally and works off-hours to meet 
with business partners in other regions.
Benign
2:55 AM: The applica-
tion chatapp.exe loads an 
unsigned DLL, usp10.dll, from 
the %APPDATA% directory.
This chat application isn’t known to 
load unsigned code in its default con-
figuration, but users at the organiza-
tion are permitted to install third-party 
plug-ins that may change the applica-
tion’s behavior at startup.
Mildly 
suspicious
2:56 AM: The application 
chatapp.exe makes a con-
nection to the internet over 
TCP port 443.
This chat application’s server is hosted 
by a cloud provider, so it regularly 
polls the server for information.
Benign
2:59 AM: The application 
chatapp.exe queries the 
registry value HKLM:\System\
CurrentControlSet\Control\
LSA\LsaCfgFlags.
This chat application regularly pulls 
system- and application-configuration 
information from the registry but isn’t 
known to access registry keys associ-
ated with Credential Guard.
Highly 
suspicious
3 AM: The application  
chatapp.exe opens a handle 
to lsass.exe with PROCESS 
_VM_READ access.
This chat application doesn’t access 
the address spaces of other processes, 
but the user JDOE does have the 
required permissions.
Malicious
This contrived example shows the ambiguity involved in determining 
intent based on the actions taken on a system. Remember that the over-
whelming majority of activities on a system are benign, assuming that some-
thing horrible hasn’t happened. Engineers must determine how sensitive 
an EDR’s detections should be (in other words, how much they should skew 
toward saying something is malicious) based on how many false negatives 
the customer can tolerate.
One way that a product can meet its customers’ needs is by using a com-
bination of so-called brittle and robust detections.
Evading EDR (Early Access) © 2023 by Matt Hand
EDR-Chitecture   7
Applying Brittle vs. Robust Detections
Brittle detections are those designed to detect a specific artifact, such as a 
simple string or hash-based signature commonly associated with known 
malware. Robust detections aim to detect behaviors and could be backed 
by machine-learning models trained for the environment. Both detection 
types have a place in modern scanning engines, as they help balance false 
positives and false negatives.
For example, a detection built around the hash of a malicious file will 
very effectively detect a specific version of that one file, but any slight varia-
tion to the file will change its hash, causing the detection rule to fail. This is 
why we call such rules “brittle.” They are extremely specific, often targeting 
a single artifact. This means that the likelihood of a false positive is almost 
nonexistent while the likelihood of a false negative is very high.
Despite their flaws, these detections offer distinct benefits to security 
teams. They are easy to develop and maintain, so engineers can change 
them rapidly as the organization’s needs evolve. They can also effectively 
detect some common attacks. For example, a single rule for detecting an 
unmodified version of the exploitation tool Mimikatz brings tremendous 
value, as its false-positive rate is nearly zero and the likelihood of the tool 
being used maliciously is high.
Even so, the detection engineer must carefully consider what data to 
use when creating their brittle detections. If an attacker can trivially modify 
the indicator, the detection becomes much easier to evade. For example, 
say that a detection checks for the filename mimikatz.exe; an adversary could 
simply change the filename to mimidogz.exe and bypass the detection logic. 
For this reason, the best brittle detections target attributes that are either 
immutable or at least difficult to modify.
On the other end of the spectrum, a robust ruleset backed by a 
machine-learning model might flag the modified file as suspicious because 
it is unique to the environment or contains some attribute that the clas-
sification algorithm weighted highly. Most robust detections are simply 
rules that more broadly try to target a technique. These types of detections 
exchange their specificity for the ability to detect an attack more generally, 
reducing the likelihood of false negatives by increasing the likelihood of 
false positives.
While the industry tends to favor robust detections, they have their own 
drawbacks. Compared to brittle signatures, these rules can be much harder 
to develop due to their complexity. Additionally, the detection engineer 
must consider an organization’s false-positive tolerance. If their detection 
has a very low false-negative rate but a high false-positive rate, the EDR 
will behave like the boy who cried wolf. If they go too far in their attempts 
to reduce false positives, they may also increase the rate of false negatives, 
allowing an attack to go unnoticed.
Because of this, most EDRs employ a hybrid approach, using brittle 
signatures to catch obvious threats and robust detections to detect attacker 
techniques more generally.
Evading EDR (Early Access) © 2023 by Matt Hand
8   Chapter 1
Exploring Elastic Detection Rules
One of the only EDR vendors to publicly release its detection rules is 
Elastic, which publishes its SIEM rules in a GitHub repository. Let’s take 
a peek behind the curtain, as these rules contain great examples of both 
brittle and robust detections.
For example, consider Elastic’s rule for detecting Kerberoasting 
attempts that use Bifrost, a macOS tool for interacting with Kerberos, 
shown in Listing 1-1. Kerberoasting is the technique of retrieving Kerberos 
tickets and cracking them to uncover service account credentials.
query = '''
event.category:process and event.type:start and
 process.args:("-action" and ("-kerberoast" or askhash or asktgs or asktgt or s4u or ("-ticket"
and ptt) or (dump and (tickets or keytab))))
'''
Listing 1-1: Elastic’s rule for detecting Kerberoasting based on command line arguments
This rule checks for the presence of certain command line arguments 
that Bifrost supports. An attacker could trivially bypass this detection 
by renaming the arguments in the source code (for example, changing 
-action to -dothis) and then recompiling the tool. Additionally, a false 
positive could occur if an unrelated tool supports the arguments listed in 
the rule.
For these reasons, the rule might seem like a bad detection. But remem-
ber that not all adversaries operate at the same level. Many threat groups 
continue to use off-the-shelf tooling. This detection serves to catch those 
who are using the basic version of Bifrost and nothing more.
Because of the rule’s narrow focus, Elastic should supplement it with a 
more robust detection that covers these gaps. Thankfully, the vendor pub-
lished a complementary rule, shown in Listing 1-2.
query = '''
network where event.type == "start" and network.direction == "outgoing" and
 destination.port == 88 and source.port >= 49152 and
 process.executable != "C:\\Windows\\System32\\lsass.exe" and destination.address !="127.0.0.1"
and destination.address !="::1" and
 /* insert False Positives here */
 not process.name in ("swi_fc.exe", "fsIPcam.exe", "IPCamera.exe", "MicrosoftEdgeCP.exe",
"MicrosoftEdge.exe", "iexplore.exe", "chrome.exe", "msedge.exe", "opera.exe", "firefox.exe")
'''
Listing 1-2: Elastic’s rule for detecting atypical processes communicating over TCP port 88
This rule targets atypical processes that make outbound connections 
to TCP port 88, the standard Kerberos port. While this rule contains some 
gaps to address false positives, it’s generally more robust than the brittle 
detection for Bifrost. Even if the adversary were to rename parameters and 
recompile the tool, the network behavior inherent to Kerberoasting would 
cause this rule to fire.
Evading EDR (Early Access) © 2023 by Matt Hand
EDR-Chitecture   9
To evade detection, the adversary could take advantage of the exemp-
tion list included at the bottom of the rule, perhaps changing Bifrost’s 
name to match one of those files, such as opera.exe. If the adversary also 
modified the tool’s command line arguments, they would evade both the 
brittle and robust detections covered here.
Most EDR agents strive for a balance between brittle and robust detec-
tions but do so in an opaque way, so an organization might find it very 
difficult to ensure coverage, especially in agents that don’t support the intro-
duction of custom rules. For this reason, a team’s detection engineers should 
test and validate detections using tooling such as Red Canary’s Atomic Test 
Harnesses.
Agent Design
As attackers, we should pay close attention to the EDR agent deployed on 
the endpoints we’re targeting because this is the component responsible 
for detecting the activities we’ll use to complete our operation. In this sec-
tion, we’ll review the parts of an agent and the various design choices they 
might make.
Basic
Agents are composed of distinct parts, each of which has its own objective 
and type of telemetry it is able to collect. Most commonly, agents include 
the following components:
The Static Scanner  An application, or component of the agent itself, 
that performs static analysis of images, such as Portable Executable 
(PE) files or arbitrary ranges of virtual memory, to determine whether 
the content is malicious. Static scanners commonly form the backbone 
of antivirus services.
The Hooking DLL  A DLL that is responsible for intercepting calls to 
specific application programming interface (API) functions. Chapter 2 
covers function hooking in detail.
The Kernel Driver  A kernel-mode driver responsible for injecting the 
hooking DLL into target processes and collecting kernel-specific telem-
etry. Chapters 3 through 7 cover its various detection techniques.
The Agent Service  An application responsible for aggregating telem-
etry created by the preceding two components. It sometimes correlates 
data or generates alerts. Then it relays the collected data to a central-
ized EDR server.
Figure 1-2 shows the most basic agent architecture that commercial 
products use today.
As we can see here, this basic design doesn’t have many sources of 
telemetry. Its three sensors (a scanner, a driver, and a function-hooking 
DLL) provide the agent with data about process-creation events, the invo-
cation of functions deemed sensitive (such as kernel32!CreateRemoteThread), 
Evading EDR (Early Access) © 2023 by Matt Hand
10   Chapter 1
the signatures of files, and potentially the virtual memory belonging to a 
process. This may be sufficient coverage for some use cases, but most com-
mercial EDR products today go far beyond these capabilities. For instance, 
this basic EDR would be incapable of detecting files being created, deleted, 
or encrypted on the host.
Intermediate
While a basic agent can collect a large amount of valuable data with which 
to create detections, this data may not form a complete picture of the 
activities performed on the host. Usually, the endpoint security products 
deployed in enterprise environments today have substantially expanded 
their capabilities to collect additional telemetry.
Most of the agents that attackers encounter fall into the intermediate 
level of sophistication. These agents not only introduce new sensors but also 
use telemetry sources native to the operating system. Additions commonly 
made at this level may include the following:
Network filter drivers  Drivers that perform network traffic analysis to 
identify indicators of malicious activity, such as beaconing. These will 
be covered in Chapter 7.
Filesystem filter drivers  A special type of driver that can monitor 
for operations on the host filesystem. They are discussed extensively in 
Chapter 6.
ETW consumers  Components of the agent that can subscribe to 
events created by the host operating system or third-party applications. 
ETW is covered in Chapter 8.
Agent service
Process
Kernel-mode 
driver
Hook DLL
KAPC injection
Kernel 
telemetry
Hooked API 
telemetry