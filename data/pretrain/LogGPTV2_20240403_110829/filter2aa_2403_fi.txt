line #2: 
01005380  10 0F 0F 0F 0F 0F 0F 0F 0F 0F 10 0F 0F 0F 0F 0F 
01005390  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
line #3: 
010053A0  10 0F 0F 0F 0F 0F 0F 0F[8F]0F 10 0F 0F 0F 0F 0F 
010053B0  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
line #4: 
010053C0  10 0F 0F 0F 0F 0F 0F 0F 0F 0F 10 0F 0F 0F 0F 0F 
010053D0  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
line #5: 
010053E0  10 0F 0F 0F 0F 0F 0F 0F 0F 0F 10 0F 0F 0F 0F 0F 
010053F0  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
line #6: 
01005400  10 0F 0F[8F]0F 0F[8F]0F 0F 0F 10 0F 0F 0F 0F 0F  
01005410  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  
line #7: 
01005420  10[8F]0F 0F[8F]0F 0F 0F 0F 0F 10 0F 0F 0F 0F 0F  
01005430  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
line #8: 
01005440  10[8F]0F 0F 0F 0F[8F]0F 0F[8F]10 0F 0F 0F 0F 0F  
01005450  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
line #9: 
01005460  10 0F 0F 0F 0F[8F]0F 0F 0F[8F]10 0F 0F 0F 0F 0F 
01005470  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
border: 
01005480  10 10 10 10 10 10 10 10 10 10 10 0F 0F 0F 0F 0F 
01005490  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
把所有的边界数据（0x10）去除，即可得到地雷的确切位置： 
 0F 0F 0F 0F 0F 0F 0F 0F 0F 
 0F 0F 0F 0F 0F 0F 0F 0F 0F 
 0F 0F 0F 0F 0F 0F 0F[8F]0F 
 0F 0F 0F 0F 0F 0F 0F 0F 0F 
 0F 0F 0F 0F 0F 0F 0F 0F 0F 
 0F 0F[8F]0F 0F[8F]0F 0F 0F 
[8F]0F 0F[8F]0F 0F 0F 0F 0F 
[8F]0F 0F 0F 0F[8F]0F 0F[8F] 
 0F 0F 0F 0F[8F]0F 0F 0F[8F] 
上述数据的行和列与棋盘的相应信息一一对应。 
在推导出数据结构之后，在 OllyDbg 里修改数据的尝试更为有趣。如果把所有的 0x8F 都替换成 0x0F，
那么扫雷游戏就可以如图 76.2 所示这样玩。 
我们还可以把地雷都安置在第一行里，如图 76.3 所示。 
                     图 76.2  没有地雷的扫雷游戏                  图 76.3  用 debugger 设置地雷 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
720 
逆向工程权威指南（下册） 
不过，在玩游戏之前，用 OllyDbg 之类的 debugger 查看地雷分布毕竟不够方便。我们不妨写一个专用
程序，专门导出棋盘上的地雷分布情况： 
// Windows XP MineSweeper cheater 
// written by dennis(a)yurichev.com for http://beginners.re/ book 
#include  
#include  
#include  
int main (int argc, char * argv[]) 
{ 
        int i, j; 
        HANDLE h; 
        DWORD PID, address, rd; 
        BYTE board[27][32]; 
        if (argc!=3) 
        { 
                printf ("Usage: %s \n", argv[0]); 
                return 0;  
        }; 
        assert (argv[1]!=NULL); 
        assert (argv[2]!=NULL); 
        assert (sscanf (argv[1], "%d", &PID)==1); 
        assert (sscanf (argv[2], "%x", &address)==1); 
        h=OpenProcess (PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, PID); 
        if (h==NULL) 
        { 
                DWORD e=GetLastError(); 
                printf ("OpenProcess error: %08X\n", e); 
                return 0; 
        }; 
        if (ReadProcessMemory (h, (LPVOID)address, board, sizeof(board), &rd)!=TRUE) 
        { 
                printf ("ReadProcessMemory() failed\n"); 
                return 0; 
        }; 
        for (i=1; i>5; 
        rax=rdx; 
        rcx=r8+rdx*4; 
        rax=rax>5; 
        // RDX here is division result! 
        rax=rdx; 
        rcx=r8+rdx*4; 
        rax=rax>5; 
        // RDX here is division result! 
        rax=rdx; 
        rcx=(r8+rdx*4)-(rax 