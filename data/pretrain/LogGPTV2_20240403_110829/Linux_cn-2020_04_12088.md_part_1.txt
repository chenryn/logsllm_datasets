---
author: Seth Kenlon
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4646
date: '2020-04-08 22:57:54'
editorchoice: false
excerpt: 使用循环和查找命令批量自动对多个文件进行一系列的操作。
fromurl: https://opensource.com/article/19/6/how-write-loop-bash
id: 12088
islctt: true
largepic: /data/attachment/album/202004/08/225655by8i8k7uyppp18ph.jpg
permalink: /article-12088-1.html
pic: /data/attachment/album/202004/08/225655by8i8k7uyppp18ph.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 使用循环和查找命令批量自动对多个文件进行一系列的操作。
tags:
- 循环
- Bash
thumb: false
title: 如何在 Bash 中使用循环
titlepic: true
translator: chunibyo-wly
updated: '2020-04-08 22:57:54'
---
> 
> 使用循环和查找命令批量自动对多个文件进行一系列的操作。
> 
> 
> 
![](/data/attachment/album/202004/08/225655by8i8k7uyppp18ph.jpg)
人们希望学习批处理命令的一个普遍原因是要得到批处理强大的功能。如果你希望批量的对文件执行一些指令，构造一个可以重复运行在那些文件上的命令就是一种方法。在编程术语中，这被称作*执行控制*，`for` 循环就是其中最常见的一种。
`for` 循环可以详细描述你希望计算机对你指定的每个数据对象（比如说文件）所进行的操作。
### 一般的循环
使用循环的一个简单例子是对一组文件进行分析。这个循环可能没什么用，但是这是一个安全的证明自己有能力独立处理文件夹里每一个文件的方法。首先，创建一个文件夹然后拷贝一些文件（例如 JPEG、PNG 等类似的文件）至文件夹中生成一个测试环境。你可以通过文件管理器或者终端来完成创建文件夹和拷贝文件的操作：
```
$ mkdir example
$ cp ~/Pictures/vacation/*.{png,jpg} example
```
切换到你刚创建的那个新文件夹，然后列出文件并确认这个测试环境是你需要的：
```
$ cd example
$ ls -1
cat.jpg
design_maori.png
otago.jpg
waterfall.png
```
在循环中逐一遍历文件的语法是：首先声明一个变量（例如使用 `f` 代表文件），然后定义一个你希望用变量循环的数据集。在这种情况下，使用 `*` 通配符来遍历当前文件夹下的所有文件（通配符 `*` 匹配*所有文件*）。然后使用一个分号（`;`）来结束这个语句。
```
$ for f in * ;
```
取决于你个人的喜好，你可以选择在这里按下回车键。在语法完成前，shell 是不会尝试执行这个循环的。
接下来，定义你想在每次循环中进行的操作。简单起见，使用 `file` 命令来得到 `f` 变量（使用 `$` 告诉 shell 使用这个变量的值，无论这个变量现在存储着什么）所存储着的文件的各种信息：
```
do file $f ;
```
使用另一个分号结束这一行，然后关闭这个循环：
```
done
```
按下回车键启动 shell 对当前文件夹下*所有东西*的遍历。`for` 循环将会一个一个的将文件分配给变量 `f` 并且执行你的命令：
```
$ for f in * ; do
> file $f ;
> done
cat.jpg: JPEG image data, EXIF standard 2.2
design_maori.png: PNG image data, 4608 x 2592, 8-bit/color RGB, non-interlaced
otago.jpg: JPEG image data, EXIF standard 2.2
waterfall.png: PNG image data, 4608 x 2592, 8-bit/color RGB, non-interlaced
```
你也可以用这种形式书写命令：
```
$ for f in *; do file $f; done
cat.jpg: JPEG image data, EXIF standard 2.2
design_maori.png: PNG image data, 4608 x 2592, 8-bit/color RGB, non-interlaced
otago.jpg: JPEG image data, EXIF standard 2.2
waterfall.png: PNG image data, 4608 x 2592, 8-bit/color RGB, non-interlaced
```
对你的 shell 来说，多行和单行的格式没有什么区别，并且会输出完全一样的结果。
### 一个实用的例子
下面是一个循环在日常使用中的实用案例。假如你拥有一堆假期拍的照片想要发给你的朋友。但你的照片太大了，无法通过电子邮件发送，上传到[图片分享服务](http://nextcloud.com)也不方便。因此你想为你的照片创建小型的 web 版本，但是你不希望花费太多时间在一个一个的压缩图片体积上。
首先，在你的 Linux、BSD 或者 Mac 上使用包管理器安装 ImageMagick 命令。例如，在 Fedora 和 RHEL 上：
```
$ sudo dnf install ImageMagick
```
在 Ubuntu 和 Debian 上：
```
$ sudo apt install ImageMagick
```
在 BSD 上，使用 `ports` 或者 [pkgsrc](http://pkgsrc.org) 安装。在 Mac 上，使用 [Homebrew](http://brew.sh) 或者 [MacPorts](https://www.macports.org) 安装。
在你安装了 ImageMagick 之后，你就拥有一系列可以用来操作图片的新命令了。
为你将要创建的文件建立一个目标文件夹：
```
$ mkdir tmp
```
使用下面的循环可以将每张图片减小至原来大小的 33%。
```
$ for f in * ; do convert $f -scale 33% tmp/$f ; done
```