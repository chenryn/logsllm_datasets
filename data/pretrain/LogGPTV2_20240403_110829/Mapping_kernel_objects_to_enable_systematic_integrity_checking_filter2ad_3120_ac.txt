or a TXT_DATA object. KOP must determine the type of the ob-
ject referenced by WRAP_DATA.PData in memory. Additionally, the
BIN_DATA.BinData and TXT_DATA.TxtData could be pointers to dy-
namic arrays. Finally, KOP needs to tolerate identiﬁcation errors to
a certain degree.
In summary, to correctly identify kernel objects, KOP faces three
challenges: resolving type ambiguities, recognizing dynamic ar-
rays, and controlling identiﬁcation errors. In the rest of this section,
we describe in detail how we address each of these challenges. We
use examples from the Windows operating system but our tech-
niques are applicable to other operating systems (e.g., Linux) since
they rely on common implementation paradigms used in modern
operating systems.
4.1 Resolving Type Ambiguities
Type ambiguities come from two sources: unions and generic
pointers that have multiple candidate target types. We will refer to
the range of possible choices in both cases as candidate types or
candidates. KOP is the ﬁrst system that can resolve type ambigui-
ties in memory traversal.
KOP considers two constraints when determining the correct can-
didate type. The ﬁrst is a size constraint. Speciﬁcally, operating
system kernels (e.g., Windows) store dynamic kernel data in a set
of memory allocation units called pool blocks. Each pool block
is created by a call to a memory allocation function (e.g., ExAl-
locatePool() in Windows). Each kernel object must lie completely
within a single pool block. We consider this as a hard constraint.
When resolving type ambiguities, KOP rejects any candidate that
violates the size constraint.
The second constraint is based on the observation that the data
stored by certain data types must have speciﬁc properties. Cur-
rently, we apply this constraint only to pointer ﬁelds. With certain
exceptions, pointer ﬁelds in kernel objects are either null or assume
values in the kernel virtual address range (e.g., [0x80000000,
0xFFFFFFFF] for 32-bit Windows). Drivers that directly access
user mode memory, for instance, do not meet this condition. Thus,
we treat it as a soft constraint. We accept candidates that violate
this constraint as long as the number of violating pointers is suf-
ﬁciently small. More precisely, given several candidate types, we
compute for each candidate the fraction of pointer ﬁelds that vio-
late the constraint and choose the one with the lowest fraction. We
discard the candidate if the fraction of invalid pointer values for it
is too high (e.g., >10%).
These two constraints are not only evaluated on the candidates
themselves, but also recursively for their “child” objects (i.e., the
objects pointed by the candidates) up to a certain depth level (e.g.,
three). By doing so, we improve the accuracy of type ambiguity
resolution since we have more data to rely upon when making the
decision.
4.2 Recognizing Dynamic Arrays
Dynamic arrays are widely used in OS kernels and drivers. KOP
is the ﬁrst system with the capability to automatically recognize
dynamic arrays in memory traversal. The key idea is to leverage
the kernel memory pool boundaries, i.e., a dynamic array must ﬁt
into a single pool block. Moreover, we note that a dynamic array
is usually allocated in two possible ways: it may take up a whole
pool block, or it may extend an object whose last ﬁeld is deﬁned
as an array of size 0 or 1. Based on these two observations, KOP
checks each allocated pool block to recognize dynamic arrays after
the object traversal (without dynamic arrays) is completed.
If a single object is identiﬁed at the start of a pool block, KOP
559analyzes the block further to determine if it contains a dynamic
array of the ﬁrst kind. The intuition is that arrays are typically
accessed via a pointer to their ﬁrst element. KOP then tests if the
array candidate meets a new size constraint: the size of a pool block
must be a multiple of the size of the ﬁrst object plus some number
between 0 and A − 1, where A is the pool block alignment. This is
a hard constraint. Finally, KOP checks the pointer value constraint
for each array element. KOP accepts the dynamic array candidate
if a sufﬁciently large fraction of array elements (e.g., >80%) have a
low fraction of invalid pointer values.
KOP checks a pool block for a dynamic array of the second kind
if there is an empty space (i.e., no objects were found) trailing an
object and the object’s last element is an array of size 0 or 1. For
such objects, KOP checks the size and pointer value constraints as
described above.
After identifying dynamic arrays, KOP uses them as roots and
reruns the traversal algorithm. This process is repeated until no
more dynamic arrays can be found.
4.3 Controlling Object Identiﬁcation Errors
During the memory traversal, KOP may incorrectly identify an
object for three main reasons: (1) choosing the wrong candidate
when resolving type ambiguities, (2) mistaking a dynamic array,
and (3) program bugs (e.g., dangling pointers). Given the recursive
nature of KOP’s memory traversal, an incorrect object may cause
more errors during the rest of the traversal. Therefore, it is critical
to reduce identiﬁcation errors and prevent them from propagating.
To do so, we employ the following two techniques.
First, instead of performing a single complete traversal, KOP tra-
verses the kernel memory in multiple rounds. The key idea is to
identify unambiguous kernel objects and use them to constrain the
solution space.. Speciﬁcally, KOP performs the memory traver-
sal in three distinct rounds. In the ﬁrst round, KOP identiﬁes all
the global objects and those objects referenced by global pointers.
These are the roots used in the traversal and are likely to be correct.
In the second round, starting from the objects found in the ﬁrst
round, KOP traverses the kernel memory but only follows pointer
ﬁelds that do not have type ambiguities. We do not infer dynamic
arrays in this round either. This way we avoid the identiﬁcation er-
rors that may be caused by either resolving type ambiguities or in-
ferring dynamic arrays. In the third round, starting from the objects
found in the previous rounds, KOP traverses the kernel memory and
resolve type ambiguities when necessary. KOP also identiﬁes and
traverses dynamic arrays in this round (after the traversal without
dynamic arrays is ﬁnished). Note that, if two objects identiﬁed in
the same round conﬂict with each other, we keep both of them.
Currently, we perform a depth-ﬁrst traversal in each round.
Second, to limit the damage caused by an earlier identiﬁcation
error, KOP uses a safe-guard mechanism. Whenever following a
typed pointer during the traversal, KOP ﬁrst checks if the object
implied by the pointer type meets the constraints used to resolve
type ambiguities (see Section 4.1). This can be treated as a special
case in which only a single candidate is considered. If the object
violates either constraint, KOP discards it and stops that branch of
the traversal.
5. KERNEL INTEGRITY CHECKING
We implemented two integrity checking applications on top of
KOP: function pointer checking and hidden object discovery. We
chose these applications because they address two of the most com-
mon techniques used by kernel-mode malware, especially rootkits.
5.1 Function Pointer Checking
Function pointers are commonly used throughout the kernel to
perform indirect calls. A popular technique used by malware is to
change their values to point to malicious code, an action also known
as hooking. By doing so, malware can hijack the OS control ﬂow
whenever an indirect call of these function pointers occurs. This
allows it to intercept and control certain types of system activity.
A common task in detecting unknown or analyzing known kernel-
mode malware is to identify all the function pointers manipulated
by the malware. The ideal way to do this is to inspect the values of
all function pointers in the kernel and determine if they point to le-
gitimate targets. There are several difﬁculties with this. First, many
function pointers reside in dynamic kernel objects, and therefore do
not have a ﬁxed location in memory. Second, inside a single object,
not all function pointers can be unequivocally identiﬁed. This can
happen in the following two scenarios: (1) a ﬁeld is not declared
as a function pointer type (e.g., unsigned int) but effectively used
as a function pointer, and (2) a function pointer is deﬁned inside a
union. We refer to these as implicit function pointers and all the
others as explicit function pointers. Thus, the task of complete and
accurate function pointer identiﬁcation is a challenge in modern
OSes.
To address these problems we built SFPD, the Subverted Func-
tion Pointer Detector. SFPD relies on KOP to perform a systematic
analysis of function pointers in a kernel memory snapshot. Par-
ticularly, it leverages KOP’s nearly complete memory traversal to
identify kernel objects. Due to KOP’s greater coverage of the ker-
nel memory, SFPD is able to verify the function pointers of a much
larger set of objects than previous approaches such as SBCFI [22].
SFPD also leverages KOP’s points-to analysis to recognize implicit
function pointers. SFPD is the ﬁrst system that can identify mali-
cious implicit function pointers in kernel memory.
SFPD is given a white list of trusted modules. This includes
the kernel and trusted drivers. Given a memory snapshot, SFPD
ﬁrst checks if the code of these modules was modiﬁed. If so, any
modiﬁed parts of the code are marked as untrusted. The rest of
the code is treated as trusted. SFPD then checks every function
pointer in the kernel objects found by KOP based on the following
policy: An explicit function pointer must point to trusted code; an
implicit function pointer must point to either trusted code or a data
object found by KOP; otherwise, the function pointer is marked as
malicious.
This policy is simple but powerful. For example, SFPD can de-
tect any function pointer that targets untrusted code placed in un-
used blocks of memory. At the same time, by leveraging KOP’s
high coverage, it effectively avoids the false alarms that would
otherwise be caused in two cases: (1) Our ﬂow-insensitive points-
to analysis mistakenly identiﬁes data pointers as implicit function
pointers, due to imprecision; and (2) data pointers share the same
offset as a function pointer in a union.
Additionally, we leverage the traversal information generated
by KOP to retrieve the traversal path to objects whose function
pointers were found to be malicious. Such information is impor-
tant because this path often reveals the purpose of the function
pointer. For instance, simply knowing about a function pointer in
an EX_CALLBACK_ROUTINE_BLOCK object [4] does not tell us
what it is for. We will, however, know that it is used to intercept
process creation events when SFPD shows that it is referenced from
a global pointer array in PspCreateProcessNotifyRoutine [4, 27].
5.2 Hidden Object Discovery
A technique often employed by kernel-mode malware is to hide
itself by either hijacking control ﬂow or directly manipulating ker-
560nel objects. For instance, to hide a process in the Task Manager,
an attacker can either hijack the system call to NtQuerySystemInfor-
mation or unlink the corresponding process object from the active
process list. Previous efforts have focused on detecting speciﬁc
types of hidden objects by hardcoding expert knowledge of the re-
lated data structures [21,28]. Such approaches are time-consuming,
and require a human expert with deep knowledge of the system to
create the rules.
Given KOP’s ability to map kernel objects, we developed a tool
called General Hidden Object Scanning Tool (GHOST) that can
systematically uncover hidden objects of arbitrary type with little
human effort. Speciﬁcally, given an object type, GHOST compares
the list of all the objects of that type found by KOP in a memory
snapshot with the list of objects returned by a program such as Task
Manager. One may need to repeat this comparison multiple times to
avoid false alarms caused by state variations from the time that the
internal program is executed to the time that the memory snapshot
is taken. Currently, GHOST uses the information reported by Task
Manager and WinObj [26] and compares it with the data returned
by KOP to uncover hidden processes and drivers.
Compared with previous approaches, GHOST has two key ad-
vantages. First, the amount of manual effort is small since the deep
knowledge of data structures resides inside KOP. For instance, to
get the list of loaded drivers using KOP, one just needs to know
that a speciﬁc pointer in each driver object refers to the driver’s
name. Second, KOP’s exhaustive traversal of all the pointer paths
allows GHOST to identify a hidden kernel object as long as there
exists at least one pointer path to it.
6.
IMPLEMENTATION AND EVALUATION
We developed a prototype of KOP on Windows. The static analy-
sis component was built using the Phoenix compiler framework [16].
The runtime component is a standalone program. Both components
were implemented in C# with a total of 16,000 lines of code. KOP
operates in an ofﬂine manner on a snapshot of the kernel memory,
captured in Windows as a complete memory dump [15]. KOP re-
lies on the Windows Debugger API [14] to resolve symbols, access
virtual addresses, and extract information about the pool blocks al-
located in the snapshot.
We used the Windows Vista SP1 operating system as our anal-
ysis subject. Its kernel and drivers are mostly written in C, with
parts in C++ and assembly. Our experiments were performed on
a system loaded with 63 kernel drivers shipped with the OS. We
ran this system in a VMware virtual machine with 1GB RAM. In
our prototype, we used the following parameters for the memory
analysis: tolerance of at most 10% for invalid pointer values in an
object, requirement of at least 80% of the dynamic array elements
to meet the pointer constraint, and the use of three levels of child
objects when evaluating the pointer constraint for a candidate.
Several implementation techniques in the Vista kernel and drivers
presented difﬁculties for KOP. We were able to identify the follow-
ing cases: (1) the lower bits in some pointers are used to store a
reference counter (assuming that the target is 8-byte aligned) (2) in
some cases relative memory offsets are used for object referencing,
and (3) several cases of implicit type polymorphism in C (e.g., a
single object can be used as if it belonged to more than one type).
In developing our prototype, we manually adjusted our implemen-
tation to handle these cases.
We also implemented prototype systems for SFPD and GHOST.
Our SFPD prototype itself has a total of 1,000 lines of C# code,
and our GHOST prototype has 200 lines of C# code. The relatively
small size of our SFPD and GHOST prototypes shows that, given
the infrastructure provided by KOP, it requires only a small amount
of extra effort to implement an integrity checking application. In
the rest of this section, we present the evaluations of KOP, SFPD,
and GHOST.
6.1 KOP
KOP’s main goal is to completely and accurately map the ker-
nel objects in a memory snapshot. Since we can trivially identify
all static kernel objects by mapping global variables, we will only
evaluate KOP’s coverage of dynamic kernel objects. We also eval-
uated KOP’s performance to demonstrate that it can perform its
ofﬂine memory analysis in a reasonable amount of time. Before
presenting our experimental results on coverage and performance,
we will ﬁrst summarize the results of our static analysis.
6.1.1 Static Analysis
We applied KOP’s static analysis to the source code of the Vista
SP1 kernel and the 63 drivers, with a total of 5 million lines of code.
This codebase contains 24423 data types and 9629 global variable
deﬁnitions. KOP derived the candidate target types for 3228 void*
pointers, 1560 doubly linked lists, 118 singly linked lists, and 8
triply linked lists (i.e., balanced trees). KOP also identiﬁed 3412
implicit function pointers. In our experiments, KOP needed less
than 48 hours to complete its static analysis on a 2.2GHz Quad-
Core AMD Opteron machine with 32GB RAM. Since KOP only
needs to run its static analysis once for an OS kernel and its drivers,
we consider this running time acceptable.
6.1.2 Coverage
We measured KOP’s coverage by the fraction of the total allo-
cated dynamic kernel memory for which KOP was able to identify
the correct object type. Ideally, we would use a ground truth that
speciﬁes the exact object layout in kernel memory. However, ob-
taining such a ground truth is extremely difﬁcult and time-consuming.
For instance, the value of a certain ﬁeld in an object may implic-
itly determine the existence and layout of other objects in the same
pool block. Thus, we would need to understand the semantics of
each object ﬁeld to obtain the exact object layout.
Instead, we obtained a ground truth with a slightly coarser granu-
larity. Speciﬁcally, we instrumented the kernel to log every pool al-
location and deallocation during runtime, along with the call stack,
address and size.
We manually inspected the source code for each location on the
call stack. This allowed us to identify a call stack location at which
the types of the allocated objects could be readily identiﬁed in the
source code. This was often not the stack location at which the
generic allocation function (ExAllocatePool()) was called, but some
other location higher in the call stack. We manually analyzed 367