的特定用例。您还应衡量目标服务器和存储系统上特定应用的性能，以确保您选择了合适的文件系统类型。
::: table
[]{#assembly_overview-of-available-file-systems_managing-file-systems.html#idm139895549813584}
**表 1.2. 本地文件系统建议概述**
::: table-contents
  场景                               推荐的文件系统
  ---------------------------------- ----------------
  没有特殊用例                       XFS
  大服务器                           XFS
  大存储设备                         XFS
  大文件                             XFS
  多线程 I/O                         XFS
  单线程 I/O                         ext4
  有限 I/O 功能（在 1000 IOPS 下）   ext4
  有限带宽（在 200MB/s 下）          ext4
  CPU 绑定工作负载                   ext4
  支持离线缩小                       ext4
:::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#network-file-systems_assembly_overview-of-available-file-systems}网络文件系统 {.title}
:::
网络文件系统也称为客户端/服务器文件系统，使客户端系统能够访问存储在共享服务器上的文件。这使得多个系统上的多个用户可以共享文件和存储资源。
此类文件系统构建自一个或多个服务器，它们将一组文件系统导出到一个或多个客户端。客户端节点无法访问底层的块存储，而是使用允许更好的访问控制的协议来与存储进行交互。
::: variablelist
[可用网络文件系统]{.term}
:   ::: itemizedlist
    -   RHEL 客户最常用的客户端/服务器文件系统是 NFS 文件系统。RHEL
        提供了一个 NFS 服务器组件，来通过网络导出本地文件系统，并提供
        NFS 客户端来导入这些文件系统。
    -   RHEL 还包括 CIFS 客户端，其支持流行的 Microsoft SMB
        文件服务器来实现 Windows 互操作性。用户空间 Samba 服务器为
        Windows 客户端提供 RHEL 服务器的 Microsoft SMB 服务。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#shared-storage-file-systems_assembly_overview-of-available-file-systems}共享存储文件系统 {.title}
:::
共享存储文件系统有时称为集群文件系统，允许集群中的每台服务器通过本地存储区域网络(SAN)直接访问共享块设备。
::: variablelist
[和网络文件系统的比较]{.term}
:   与客户端/服务器文件系统一样，共享存储文件系统在一组服务器上工作，这些服务器都是群集的成员。但与
    NFS
    不同，没有一个服务器向其他成员提供对数据或元数据的访问：群集的每个成员都可以直接访问同一存储设备（
    [*共享存储*]{.emphasis}），并且所有群集节点都可以访问同一组文件。
[并发]{.term}
:   缓存一致性是集群文件系统中确保数据一致性和完整性的关键。集群中所有文件的单个版本都必须对群集内的所有节点可见。文件系统必须阻止群集成员同时更新同一存储块，以防止数据损坏。为此，共享存储文件系统使用集群范围的锁机制作为并发控制机制来仲裁对存储的访问。例如，在创建新文件或写入在多个服务器上打开的文件之前，服务器上的文件系统组件必须获得正确的锁。
    群集文件系统的要求是提供一种像 Apache Web
    服务器那样高可用的服务。群集的任何成员都将看到存储在共享磁盘文件系统中的数据的完全一致的视图，并且所有更新都会通过锁机制正确仲裁。
[性能特性]{.term}
:   由于锁开销的计算成本，共享磁盘文件系统并不总像运行在同一系统上的本地文件系统那样表现良好。如果每个节点几乎以独占方式写入一组不与其他节点共享的特定文件，或者一组文件在一组节点上以几乎独占的只读方式被共享，那么共享磁盘文件系统可以很好地执行这种工作负载。这将导致最小的跨节点缓存失效，并可最大限度地提高性能。
    设置共享磁盘文件系统非常复杂，调优应用以在共享磁盘文件系统上表现良好非常有挑战性。
[可用的共享存储文件系统]{.term}
:   ::: itemizedlist
    -   Red Hat Enterprise Linux 提供 GFS2 文件系统。GFS2 与 Red Hat
        Enterprise Linux High Availability Add-On 和 Resilient Storage
        附加组件紧密整合。
    :::
    Red Hat Enterprise Linux 支持集群中大小为 2 到 16 个节点的 GFS2。
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#choosing-between-network-and-shared-storage-file-systems_assembly_overview-of-available-file-systems}在网络和共享存储文件系统间进行选择 {.title}
:::
在网络和共享存储文件系统间选择时，请考虑以下几点：
::: itemizedlist
-   对于提供 NFS 服务器的环境，基于 NFS
    的网络文件系统是非常常见和流行的选择。
-   网络文件系统可以使用非常高性能的网络技术（如 Infiniband 或 10 GB
    以太网卡）进行部署。这意味着您不应该仅仅为了获得存储的原始带宽而转向共享存储文件系统。如果访问速度至关重要，则使用
    NFS 导出类似 XFS 的本地文件系统。
-   共享存储文件系统的设置或维护并非易事，因此您应仅在无法用本地或网络文件系统提供所需的可用性时才部署它们。
-   集群环境中的共享存储文件系统通过消除在涉及重新分配高可用性服务的典型故障切换情景中需要执行的卸载和挂载所需的步骤，来帮助减少停机时间。
:::
红帽建议您使用网络文件系统，除非您有共享存储文件系统的特定用例。共享存储文件系统主要用于需要以最少的停机时间提供高可用性服务且具有严格的服务等级要求的部署。
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#volume-managing-file-systems_assembly_overview-of-available-file-systems}卷管理文件系统 {.title}
:::
卷管理文件系统集成整个存储堆栈，以实现简洁和堆栈内优化。
::: variablelist
[可用卷管理文件系统]{.term}
:   ::: itemizedlist
    -   Red Hat Enterprise Linux 9 作为技术预览提供 Stratis
        卷管理器。Stratis 对文件系统层使用 XFS，并将其与
        LVM、设备映射器和其他组件集成。
    :::
    Stratis 首次在 Red Hat Enterprise Linux 8.0
    中发布。它被设计为填补红帽弃用 Btrfs 时出现的空白。Stratis 1.0
    是一个直观的、基于命令行的卷管理器，可以在隐藏用户复杂性的同时执行重要的存储管理操作：
    ::: itemizedlist
    -   卷管理
    -   创建池
    -   精简存储池
    -   快照
    -   自动读取缓存
    :::
    Stratis 提供强大的功能，但目前缺乏其他产品（如 Btrfs 或
    ZFS）的某些功能。最值得注意的是，它不支持带自我修复的 CRC。
:::
:::
:::
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html}
::: chapter
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#managing-local-storage-using-rhel-system-roles_managing-file-systems}第 2 章 使用 RHEL 系统角色管理本地存储 {.title}
:::
要使用 Ansible 管理 LVM 和本地文件系统(FS)，您可以使用 Storage
角色，这是 RHEL 9 中可用的 RHEL 系统角色之一。
使用 Storage
角色可让您在多台计算机上的磁盘和逻辑卷上自动管理文件系统，并在从 RHEL
7.7 开始的所有 RHEL 版本间自动管理文件系统。
有关 RHEL 系统角色以及如何应用它们的更多信息，请参阅 [RHEL
系统角色简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/getting-started-with-rhel-system-roles_configuring-basic-system-settings#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}。
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#storage-role-intro_managing-local-storage-using-rhel-system-roles}存储角色简介 {.title}
:::
Storage 角色可以管理：
::: itemizedlist
-   磁盘上未被分区的文件系统
-   完整的 LVM 卷组，包括其逻辑卷和文件系统
:::
使用 Storage 角色，您可以执行以下任务：
::: itemizedlist
-   创建文件系统
-   删除文件系统
-   挂载文件系统
-   卸载文件系统
-   创建 LVM 卷组
-   删除 LVM 卷组
-   创建逻辑卷
-   删除逻辑卷
-   创建 RAID 卷
-   删除 RAID 卷
-   创建带有 RAID 的 LVM 池
-   删除带有 RAID 的 LVM 池
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#parameters-that-identify-a-storage-device-in-the-storage-system-role_managing-local-storage-using-rhel-system-roles}在存储系统角色中识别存储设备的参数 {.title}
:::
您的存储角色配置仅影响您在以下变量中列出的文件系统、卷和池。
::: variablelist
[`storage_volumes`{.literal}]{.term}
:   在所有要管理的未分区磁盘中的文件系统列表。
    当前不支持的分区。
[`storage_pools`{.literal}]{.term}
:   要管理的池列表。
    目前唯一支持的池类型是 LVM。使用 LVM
    时，池代表卷组（VG）。每个池中都有一个要由角色管理的卷列表。对于
    LVM，每个卷对应一个带文件系统的逻辑卷（LV）。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#an-example-ansible-playbook-to-create-an-xfs-file-system_managing-local-storage-using-rhel-system-roles}在块设备中创建 XFS 文件系统的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook
应用存储角色，以使用默认参数在块设备中创建 XFS 文件系统。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
存储角色只能在未分区、整个磁盘或者逻辑卷(LV)上创建文件系统。它不能在分区中创建文件系统。
:::
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139895595030864}
**例 2.1. 在 /dev/sdb 上创建 XFS 的 playbook**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   卷名称（示例中为 `barefs`{.literal} ）目前是任意的。Storage 角色根据
    disk: 属性中列出的磁盘设备标识卷。``{.literal}
-   您可以省略 `fs_type: xfs`{.literal} 行，因为 XFS 是 RHEL 9
    中的默认文件系统。
-   要在 LV 上创建文件系统，请在 `disks:`{.literal} 属性下提供 LVM
    设置，包括括起的卷组。
    不要提供到 LV 设备的路径。
:::
:::
:::
::: itemizedlist
**其他资源**
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#an-example-ansible-playbook-to-persistently-mount-a-file-system_managing-local-storage-using-rhel-system-roles}永久挂载文件系统的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook
应用存储角色，以立即和永久挂载 XFS 文件系统。
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139895596267008}
**例 2.2. 将 /dev/sdb 上的文件系统挂载到 /mnt/data 的 playbook**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
        mount_point: /mnt/data
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   此 playbook 将文件系统添加到 `/etc/fstab`{.literal}
    文件中，并立即挂载文件系统。
-   如果 `/dev/sdb`{.literal} 设备上的文件系统或挂载点目录不存在，则
    playbook 会创建它们。
:::
:::
:::
::: itemizedlist
**其他资源**
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#an-example-playbook-to-manage-logical-volumes_managing-local-storage-using-rhel-system-roles}管理逻辑卷的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook
应用存储角色在卷组中创建 LVM 逻辑卷。
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139895583520992}
**例 2.3. 在 myvg 卷组中创建 mylv 逻辑卷的 playbook**
::: example-contents
``` screen
- hosts: all
  vars:
    storage_pools:
      - name: myvg
        disks:
          - sda
          - sdb
          - sdc
        volumes: