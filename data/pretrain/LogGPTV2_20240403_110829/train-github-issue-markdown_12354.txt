# What
This is related to this issue about Upper Case/Lower Case environment
variables and npm script.
I understand that due to node case folding and other constraints, npm script
tend to ignore upper case `NPM_CONFIG_*` environment variables and end up
adding its own lower case `npm_config_*` variables to `process.env` within a
npm script execution. The problem is that the way this is done can lead to a
really unexpected scenario and behavior when running on Windows. In Windows
Environment Variables are **Case Insensitive** and there isn't even a way to
set up duplicate environment variables, differing only the upper/lower case of
their names, using Windows standard tooling (cmd/powershell/regedit). But
somehow `npm script` manage to do it which leads to unexpected behavior when
running Powershell or dotnet processes from within a npm script.
### Steps to Reproduce
On a Windows create the following `package.json`:
    {
        "scripts" : {
            "test" : "npm run env && @powershell Get-Item Env:"
        }
    }
Then, in powershell, run
    $Env:NPM_CONFIG_CACHE='c:\temp';npm run test
It will list the output of `npm run env` including the following environment
variables:
    NPM_CONFIG_CACHE=C:\temp
    npm_config_cache=C:\temp
And then powershell returns an error trying to read the environment variables:
    Get-Item : An item with the same key has already been added.
    At line:1 char:1
    + Get-Item Env:
    + ~~~~~~~~~~~~~
        + CategoryInfo          : NotSpecified: (:) [Get-Item], ArgumentException
        + FullyQualifiedErrorId : System.ArgumentException,Microsoft.PowerShell.Commands.GetItemCommand
### Expected Behavior
On Windows, if it's not going to use them, `npm script` should remove the
Upper Case `NPM_CONFIG_*` environment variables that might've previously been
set so that it avoids generating duplicate Environment Variables as that is
unexpected behavior on Windows.
## References
  * Related to #14528