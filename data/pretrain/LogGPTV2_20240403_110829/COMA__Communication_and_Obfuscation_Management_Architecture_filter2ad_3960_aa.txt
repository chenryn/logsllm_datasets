title:COMA: Communication and Obfuscation Management Architecture
author:Kimia Zamiri Azar and
Farnoud Farahmand and
Hadi Mardani Kamali and
Shervin Roshanisefat and
Houman Homayoun and
William Diehl and
Kris Gaj and
Avesta Sasan
COMA: Communication and Obfuscation Management Architecture
Kimia Zamiri Azar∗, Farnoud Farahmand∗, Hadi Mardani Kamali∗, Shervin Roshanisefat∗,
Houman Homayoun‡, William Diehl†, Kris Gaj∗, Avesta Sasan∗
∗ Department of ECE, George Mason University, VA, USA.
{kzamiria, ffarahma, hmardani, sroshani, kgaj, asasan}@gmu.edu
‡ Department of ECE, University of California, Davis, CA, USA. {hhomayoun}@ucdavis.edu
† Department of ECE, Virginia Tech, VA, USA. {wdiehl}@vt.edu
Abstract
In this paper, we introduce a novel Communication and Obfus-
cation Management Architecture (COMA) to handle the stor-
age of the obfuscation key and to secure the communication
to/from untrusted yet obfuscated circuits. COMA addresses
three challenges related to the obfuscated circuits: First, it
removes the need for the storage of the obfuscation unlock key
at the untrusted chip. Second, it implements a mechanism by
which the key sent for unlocking an obfuscated circuit changes
after each activation (even for the same device), transforming
the key into a dynamically changing license. Third, it pro-
tects the communication to/from the COMA protected device
and additionally introduces two novel mechanisms for the
exchange of data to/from COMA protected architectures: (1)
a highly secure but slow double encryption, which is used for
exchange of key and sensitive data (2) a high-performance
and low-energy yet leaky encryption, secured by means of
frequent key renewal. We demonstrate that compared to state-
of-the-art key management architectures, COMA reduces the
area overhead by 14%, while allowing additional features in-
cluding unique chip authentication, enabling activation as a
service (for IoT devices), reducing the side channel threats on
key management architecture, and providing two new means
of secure communication to/from an untrusted chip.
Introduction
1
The increasing cost of IC manufacturing has pushed several
stages of the semiconductor device’s manufacturing supply
chain to the third-party facilities, which are identiﬁed as un-
trusted entities [4]. Fabrication of ICs in an untrusted supply
chain has introduced multiple forms of security threats such
as the possibility of overproduction, Trojan insertion, Reverse
Engineering (RE), Intellectual Property (IP) theft, and counter-
feiting [33, 34]. The stage that poses the utmost vulnerability
is the fabrication stage, in which an untrusted foundry has
the ultimate knowledge about a to-be-fabricated IC, and with
minimal effort could reverse engineer the GDSII to its gate-
level netlist, analyze, copy, and/or alter the design, creating
trust and security challenges for the original design house.
Considering that a foundry has the ultimate knowledge
about the design, passive protection techniques such as wa-
termarking, IC metering, or camouﬂaging [1, 28, 43, 52] are
not well suited to protect against attacks initiated at this stage
of supply chain, although they can be used to either iden-
tify counterfeits, or prevent reverse engineering of the man-
ufactured ICs post fabrication. To protect the IP from being
reverse engineered, overproduced, or stolen in the manufac-
turing supply chain, researchers have studied various means
of hardware obfuscation [17, 18, 20, 21, 28, 35–37, 47, 53],
which is the process of hiding the true functionality of an
IC when no key, or an incorrect key, is present. Only once
the correct key is provided, the IC behaves correctly. The
requirement for obfuscated solutions is to resist various forms
of attacks against such circuits including brute force, sensiti-
zation, Boolean satisﬁability (SAT) or satisﬁability modulo
theories (SMT), removal, approximate-based, signal probabil-
ity skew, functional analysis, etc. [11,26,29,30,38,40,41,46].
To remain hidden, in addition to resisting the attacks against
its obfuscated circuit(s), the IC should also resist passive, ac-
tive, or destructive attacks that could be deployed to read
the key values. Hence, neither the activation of such devices
nor the storage of key values in them should expose or leak
the key information. Activation of an obfuscated IC requires
storing the activation key in a secure and tamper-proof mem-
ory. [25, 42]. However, there exist a group of applications
that could use an alternative key storage. This alternative
solution is to store the key outside the IC, where the IC is ac-
tivated every time it is needed. This option requires constant
connectivity to the key management source and a secure com-
munication for key exchange to prevent any leakage of the key.
This solution allows an IC designer to store the chip unlock
key outside of an untrusted chip. So, no secure and tamper-
proof memory is needed. Since the key is stored outside the
untrusted chip, a constant connectivity to an obfuscation key-
management solution is an indispensable requirement for this
category of devices. This requirement could be easily met for
two prevalent groups of architectures: (1) 2.5D package-stack
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 181devices where a single trusted chip is used for key manage-
ment and activation of multiple obfuscated ICs manufactured
in untrusted foundries, and (2) IoT devices with constant con-
nectivity to the cloud/internet.
In 2.5D package-integrated ICs, similar to DARPA SPADE
architecture [10], a chip which is fabricated in a trusted
foundry, but in a larger technology node, is packaged with an
untrusted chip fabricated in an untrusted foundry in a smaller
technology node. The resulting solution beneﬁts from the best
features of both technologies: The untrusted chip may be used
as an accelerator, providing the resulting hybrid solution with
the much-needed scalability (higher speed and lower power),
while the trusted chip provides the means of trust and security.
The untrusted chip is isolated from the outside world and
any exchange of information to/from untrusted chip passes
through the trusted chip.
The second group of devices in this category are IoT de-
vices, where constant connectivity is their characterizing fea-
tures. In these solutions the obfuscation key could be stored
in the cloud, and activation of an IoT device could be done
remotely. This model allows custom, monitored, and service
oriented activation (Activation As A Service). An additional
advantage is removing the possibility of extracting an unlock
key from a non-volatile memory that otherwise would have
to be used for storing the obfuscation unlock key. Examples
of which are IoT devices used for providing various services,
military drones activated for a speciﬁc mission, video decryp-
tion services for paid pay-per-view transactions, etc., where a
device has to operate in an unsafe environment and is at risk
of capture and reverse engineering. In these applications, the
IC fabricated in an untrusted foundry is activated either every
time it is powered up, or for certain time intervals. The key
vanishes after the service is performed, or when the device is
powered down. The activation of such devices is performed
using a remote key management service (in the cloud or at
a trusted base-station), and the key exchange to/from these
devices should be secured.
In both 2.5D system solutions and IoT devices, the need
for implementation of a tamper-proof memory, for storage of
IC activation key, in an untrusted process is removed. Some
reasons why implementing a secure memory in an untrusted
foundry may be undesired, or practically unfeasible include:
Availability: The targeted foundry may not offer the re-
quired process for implementing a secure memory with the
desired features. An example could be the requirement for
storing sensitive information in magnetic tunnel junction
(MTJ) memories to prevent probing and attacks that could
be deployed against ﬂash-based NVMs. Fabricating such ICs
requires a hybrid process that supports both CMOS and MTJ
devices, which may be unsupported by the targeted foundry.
Veriﬁed Security: The secure memory may be available
in the targeted technology, however not be fully tested and
veriﬁed in terms of its resistance against different attacks.
Cost: Implementing secure memory requires additional
fabrication layers and processing steps, increasing the cost
of manufacturing. Increasing the silicon area is a far cheaper
solution than increasing the number of fabrication layers.
Reusability: In 2.5D system solutions, a trusted chip could
be shared by multiple untrusted chips, manufactured in dif-
ferent foundries. Moving the secure memory to the trusted
chip removes the need for implementing the secure memory
in all utilized processes. The trusted chip could be designed
once with utmost security for protection and integrity of data.
This also reduce the cost of manufacturing untrusted chips by
removing the need for additional processing steps for imple-
menting secure memory.
Ease of Design: Implementing secure memory requires
pushing the design through non-standard physical design ﬂow
to implement the tamper-proof layers in silicon and package.
In addition, the non-volatile nature of tamper-proof memory
requires read and write at elevated voltages, increasing the bur-
den on the power-delivery network design. Reuse of a trusted
chip with a tamper proof memory that could manage activa-
tion of other obfuscated ICs, relaxes the design requirement
of ICs to standard physical design and fabrication process.
In this paper, we propose the COMA key-management and
communication architecture for secure activation of obfus-
cated circuits that are manufactured in untrusted foundries
and meet the constant connectivity requirement, namely ICs
that belong to a) 2.5 package-integrated and b) IoT solutions.
We describe two variants of our proposed solutions: The ﬁrst
variant of COMA is used for secure activation of IPs within
2.5D package-integrated devices (similar to DARPA SPADE).
The second variant of COMA is used for secure activation of
connected IoT devices. The proposed COMA allows us to (1)
push the obfuscation key and obfuscation unlock mechanism
off of an untrusted chip, (2) make the key a moving target by
changing it for each unlock attempt, (3) uniquely identify each
IC, (4) remove the need to implementing a secure memory in
an untrusted foundry, and (5) utilize two novel mechanisms
for ultra-secure or ultra-fast encrypted communication.
The rest of this paper is organized as follows: Section 2
presents the background and related work to secure key-
exchange and obfuscation schemes. Section 3 demonstrates
how the proposed method has signiﬁcant advantages in terms
of security and performance. Both variants of the proposed
architecture are evaluated in this Section. The security of
the proposed architecture against various attacks is discussed
in Section 4. The experimental results, as well as compari-
son with prior-art methods, is presented in Sections 5 and 6.
Finally, Section 7 concludes the paper.
2 Background
Active metering, Secure Split-Test, logic obfuscation, and
solutions such as Ending Piracy of Integrated Circuits (EPIC)
have been proposed to protect ICs from supply chain-related
security threats by initializing the HW control to a locked state
182          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationat power-up and hiding the design intent [2,15,16,23,27,28,44,
52]. Some of these techniques support single activation, while
others support active metering mechanisms. Active metering
techniques [15, 27, 44, 52] provide a mechanism for the IP
owner to lock or unlock the IC remotely. In these solutions,
the locking mechanism is a function of a unique ID generated
for each IC, possibly and preferably by a Physical Unclonable
Function (PUF) [42]. Only the IP owner knows the transition
table and can unlock the IC. Active metering, combined with
a PUF, makes the key a moving target from chip to chip.
However, there exist a few issues with previous metering
techniques: ﬁrst, the key(s) to unlock each IC remains static.
Second, these techniques unlock the chips before they are
tested by the foundry. Hence, the IP owner can control how
many ICs enter the supply chain, but not how many properly
tested ICs exit the supply chain. Finally, these techniques do
not respond well to the threat of the foundry requesting more
IDs by falsifying the yield to be lower during the test process.
Such shortcomings can potentially allow the foundry to ship
more out-of-spec or defective ICs to the supply chain.
Many of these shortcoming were addressed in FORTIS
[49] shown in Fig. 1. In FORTIS the registers that hold the
obfuscation key are made a part of the scan chain, allowing
the foundry to carry structural test by assigning test values to
these registers prior to the activation of the IC. Authors of [49]
argue that placing a DFT compression logic, not only reduces
the test size, but also prevents the readout of the individual
register values. After testing the IC, the obfuscation key is
transferred and applied to unlock the circuit using two types
of cryptographic modules: a public-key crypto engine, and a
One Time Pad (OTP) crypto engine.
In FORTIS, the public and private keys are hardwired in
the design. A TRNG is used to generate a random number
(m) that is treated as a message. This message is encrypted
using the private key of the chip to generate a signature sig(m).
The actual message and its signature are concatenated and
later used as a mean for the authentication of the chip. At
the same time, the TRNG generates another random number
KS. This random number is used as the key for OTP, and
at the same time is encrypted using the public key of the
designer to generate KDpub(KS). OTP uses KS for encrypting
the (m,sig(m)), and the output of OTP is concatenated with
the KDpub(KS). The resulting string of bits is transmitted to
the SoC designer. The SoC designer uses a OTP to obtain m
and sig(m) for the purpose of authentication. She then uses
the private key of the designer to recover KS. Finally, KS is
used by OTP to encrypt the chip unlock key (CUK). The
encrypted CUK is transmitted to the chip, decrypted using
OTP, and applied to the obfuscation unlock key registers to
unlock the circuit.
FORTIS, however, suffers from several security issues in-
cluding 1) using identical public and private keys in all manu-
factured chips, and thus its inability for unique device authen-
tication, 2) being vulnerable to modeling attack in which the
Figure 1: FORTIS: Overall Architecture.
FORTIS structure is modeled in software for requesting the
CUK from SoC designer 3) being vulnerable to side channel
attacks on public-key encryption engine aimed at recover-
ing the private key of the chip, 4) being vulnerable to fault
attacks in which the value of KS is ﬁxated, 5) requiring a
secure memory for storage of the obfuscation unlock key,
and 6) not addressing the mechanism for generating a unique
and truly random seed to initialize PRNG. After describing
our proposed solution, in section 6, we explain how these
vulnerabilities are addressed in our proposed solution.
Our proposed solution ﬁts the category of active metering
techniques. The key is neither static nor stored in the untrusted
chip. A key that is used to activate the IC at the test time