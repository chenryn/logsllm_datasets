303
2,222
2,230
2,039
2,050
143,735
137,589
118,786
119,606
89.02
98.84
95.86
80.79
80.67
100.00
99.15
98.18
91.86
87.83
93.44
93.78
85.74
86.21
92.93
88.96
76.80
77.33
398
444
291
277
277
11
32
32
207
29
935
935
935
935
20,723
20,723
20,723
20,723
1,229
439
291
203
203
4
21
21
189
21
908
908
908
908
20,385
20,385
20,385
20,385
321
442
266
199
197
11
32
31
200
22
934
927
882
882
20,657
20,199
18,077
18,041
%
80.65
99.55
91.41
71.84
71.12
100.00
100.00
96.88
96.62
75.86
99.89
99.14
94.33
94.33
99.68
97.47
87.23
87.06
Table V: Result of Our String Value Analysis for the Parameters of Our Interest.
The Root Cause
Account Key Misuse
Full Access Key Misuse
Root key Misuse
“Open” S3 Storage
“Open” Database
No Permission Check
5,166
6,855
Non-Obfuscated
#Apps
% #Apps
Obfuscated
85
101
477
916
9.37
11.14
7.97
15.30
6.45
8.56
18
12
92
195
1,214
2,168
%
8.33
5.56
11.53
24.44
5.70
10.18
Azure
AWS
Firebase
Table VI: App Statistics with the Detected Vulnerabilities
recommends that developers retrieve keys from the remote
servers [3]. Without dynamic analysis of the apps, we could
not infer their values. The second reason is that some apps are
using cryptographic functions to protect the string, which we
cannot resolve with static analysis.
then detects
3) Vulnerability Identiﬁcation: With the identiﬁed keys
and strings of our interest, our 3rd component, Vulnerability
Identiﬁcation,
the vulnerabilities based on
our zero-data-leakage policies described in §V-C and has
identiﬁed 17, 299 vulnerabilities in total. Note that one app
may have multiple data leakage vulnerabilities, and we count
the vulnerabilities based on the vulnerable services.
• Key Misuse Vulnerabilities. As discussed in §III-A,
these vulnerabilities mainly exist in the Azure and AWS
clouds. Based on the app key value, and the format of
the keys, we directly detect vulnerabilities in Azure if
we notice that the app key is either an account key or
full access key. The statistics of the vulnerable apps in
Azure is presented in Table VI (the ﬁrst two rows). We
can see that among the 907 non-obfuscated Azure apps,
186 of them (20.51%) have misused the keys; for the
216 obfuscated apps, 30 of them (13.89%) contain a
data leakage vulnerability. For the AWS root key misuse,
we detect 477 vulnerable apps out of 5, 988 (7.97%)
non-obfuscated AWS apps, and 92 out of 798 (11.53%)
obfuscated apps, as presented in the 3rd row of Table VI.
• Permission Misconﬁguration Vulnerabilities. This
type of vulnerability mainly exists in the AWS and
Firebase cloud servers. As reported in the 4th row
of Table VI, we detect 916 vulnerable apps out of
5, 988 (15.30%) non-obfuscated apps, and 195 out of
798 (24.44%) obfuscated apps. For the “Open” database
in Firebase, we detect 5, 166 vulnerable apps out of
80, 087 (6.45%) non-obfuscated apps, and 1, 214 out of
21, 293 (5.70%) obfuscated apps. For the No Permission
Check vulnerabilities in Firebase, we detect 6, 855 out
of 80, 087 (8.56%) non-obfuscated apps, and 2, 168 out
of 21, 293 (10.18%) obfuscated apps.
We can notice from Table VI that the most vulnerable
category (in terms of percentage) is from permission mis-
conﬁguration of the “Open” S3 Storage of AWS: 15.30%
for non-obfuscated apps and 24.44% for obfuscated apps. It
can be observed for Azure that obfuscated apps tend to be
less vulnerable (13.89% vs. 20.51%). However, in AWS and
Firebase, obfuscated apps are even more vulnerable (except
the “Open” Database for Firebase). This is likely because
the misconﬁguration errors are product-speciﬁc and have less
connection with the user’s security expertise.
C. Vulnerability Analysis
Severity Analysis. Next, we would like to study the severity
of the vulnerabilities among the mobile apps we discovered.
We use the number of the downloads of the vulnerable apps to
characterize the severity: the higher number of downloads, the
more severe the vulnerability. To this end, we count the number
of downloads of the vulnerable apps in each download category
(e.g., between one billion to ﬁve billion). This result is reported
in the last four columns of Table VII. For the very popular apps
(we deﬁne an app is very popular if its total number of down-
loads exceeds one million) that have used cloud APIs, 569
of them are subject to the data leakage attack. Among these
apps, 10 of them have downloads between 100 million and 500
million, 14 with 50 million to 100 million, and 80 with 10 mil-
lion to 50 million. Clearly, the data leakage vulnerabilities we
studied are quite concerning. If an attacker has exploited them,
then billions of sensitive data records could have been leaked.
Obfuscation vs. Non-Obfuscation. Since we are able to
differentiate non-obfuscated and obfuscated apps, we also
would like to understand the effect of obfuscation with respect
to app security. It is interesting to observe that obfuscation
is typically applied to top downloaded apps. As shown in Ta-
ble VII: the higher number of downloads an app has, the more
1305
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
#Downloads
1, 000, 000, 000 − 5, 000, 000, 000
500, 000, 000 − 1, 000, 000, 000
100, 000, 000 − 500, 000, 000
50, 000, 000 − 100, 000, 000
10, 000, 000 − 50, 000, 000
5, 000, 000 − 10, 000, 000
1, 000, 000 − 5, 000, 000
500, 000 − 1, 000, 000
100, 000 − 500, 000
50, 000 − 100, 000
10, 000 − 50, 000
5, 000 − 10, 000
1, 000 − 5, 000
0 − 1, 000
Azure
0
0
0
0
2
3
16
10
65
42
167
82
272
464
# Non-Vulnerable Apps
AWS
Firebase
Obfuscated% Azure
# Vulnerable Apps
AWS
Firebase
Obfuscated%
0
0
1
4
35
32
136
105
356
249
679
369
976
3,844
1
3
35
67
480
467
2,405
1,823
6,987
4,608
12,868
6,090
15,920
49,626
100.00
66.67
58.33
45.07
47.78
37.85
32.15
29.36
26.01
25.52
24.85
24.05
21.42
15.92
0
0
0
0
1
1
2
1
14
11
21
11
40
111
0
0
1
2
4
6
21
29
66
50
174
100
248
754
0
0
9
12
75
66
369
260
1,026
695
1,862
770
1,977
6,402
0.00
0.00
50.00
71.43
50.00
38.36
30.10
28.28
26.13
25.13
21.88
23.61
20.66
20.30
Table VII: The Number of Apps that Have Used the Cloud APIs in Each of The Accumulated Download Category.
App Name
App Description and Functionality
Obfuscated?
Data in Database/Storage
Privacy Sensitive?
S
W
A
e
r
u
z
A
e
s
a
b
e