# Runtime Process Insemination

## Presenter
- **Shawn “lattera” Webb**
- **Affiliation**: SoldierX
- **Website**: [SoldierX](https://www.soldierx.com/)

## About the Presenter
- Blogger
- Professional Security Analyst
- Twelve-year C89 programmer
- Member of SoldierX, BinRev, and Hack3r

## Disclaimers
- The opinions and views expressed here are personal and do not reflect those of my employer.
- The presentation is semi-random but will be tied together at the end.
- Almost nothing new will be explained; the focus is on theory and a new technique.
- The presentation and tools are for educational purposes only.

## Assumptions
- Basic understanding of Linux (though concepts carry over to Windows and macOS).
- Familiarity with C and 32-bit Linux memory management.
- Ability and desire to think abstractly.
- Non-modified memory layout (no grsec/pax).

## Historical Context
- CGI/Web App vulnerabilities often required connect-back shellcode.
- Reliable, random access was needed, but firewall holes posed a problem.
- A method was needed to reuse existing connections to the web server and covertly sniff traffic.
- This led to the development of Libhijack, which will be discussed later.

## Setting the Stage
- Exploited a CGI/Web App to gain a shell.
- Needed a reliable way to regain access.
- Apache was a good candidate as it is always listening for connections.
- The goal was to modify the Apache process to run a shell when a special string (e.g., `GET /shell HTTP/1.1`) is sent.
- Required hooking certain functions in runtime.

## Current Techniques
- **Stack Shellcode**: Stack is non-executable.
- **$eip Shellcode**: Mucks up original code.
- **Heap Shellcode**: Heap is non-executable.
- **LD_PRELOAD**: Not applicable as the process has already started.

## Process Loading
- `execve` is called.
- Kernel checks file existence, permissions, etc.
- Kernel loads the RTLD (Runtime Linker, e.g., `ld.elf.so`).
- Kernel loads process metadata and initializes the stack.
- Metadata is loaded at `0x08048000` on 32-bit Intel Linux.

## Runtime Linker
- Loads the process into memory.
- Loads dependencies (shared objects) from `DT_NEEDED` entries in the `.dynamic` section.
- Patches PLT/GOT for dynamic functions.
- Calls initialization routines.
- Finally calls `main()`.

## ELF Format
- **Executable and Linkable Format** (ELF): Based on PE-COFF.
- **Metadata**: Instructs the RTLD on what and how to load.
- **Process Header (PHDR)**: Contains virtual address locations, access rights, and alignment.
- **Section Header (SHDR)**: Describes PHDRs, contains string tables, debugging entries, and compiler comments.
- **Dynamic Headers**: Contains relocation entries, stubs, and PLT/GOT (the "jackpot").

## Process Tracing
- **Ptrace**: Debugging facility for Linux.
- **Kernel syscall**: Used by GDB.
- **Functions**: Read/write from/to memory, get/set registers.
- **Destructive**: Original ptrace engineers were aware of potential abuse.

## Allocating Memory
- Need to store arbitrary code.
- Allocate memory in the child process (unlike Windows and macOS, where allocation can be done from the parent).
- Find the `int 0x80` opcode.
- Main code won't call the kernel directly but through library functions like `libc`.
- Parse ELF headers, find a function that calls the kernel, and set `$eip` to the `int 0x80` opcode.
- Set up the stack to call `mmap` and continue execution until `mmap` finishes.

## Injecting Shellcode
- After calling `mmap`, `$eax` contains the address of the newly-allocated mapping.
- Write shellcode to this mapping, even if it is marked non-writable.
- Restore backed-up registers, decrement `$esp` by `sizeof(unsigned long)`, and simulate pushing `$eip` onto the stack for the return address.
- Detach from the process and enjoy the results.

## Hijacking Functions
- **GOT/PLT**: Array of function addresses.
- All referenced functions are in GOT/PLT.
- **PLT/GOT Redirection**: Redirect shellcode to a function.
- Can hijack but cannot reliably remove the hijack.

## Injecting Shared Objects
- Why? To avoid writing a lot of shellcode.
- Two methods:
  - **The Cheating Way**: Use a stub shellcode that calls `dlopen()`.
  - **The Real Way**: Reimplement `dlopen()`.

### The Cheating Way
- Allocate a new memory mapping.
- Store auxiliary data (`.so` path, function name, stub shellcode).
- Stub shellcode calls `dlopen` and `dlsym`, replaces GOT entry with the entry found via `dlsym`.

#### Advantages
- Easy and fast.
- Extendable.

#### Disadvantages
- Entry in `/proc/pid/maps`.
- Relies on stub shellcode.

### The Real Way
- Reimplement `dlopen`.
- Load dependencies, create memory maps, write `.so` data, patch into the RTLD, run init routines, and hijack GOT.

#### Advantages
- Completely anonymous.
- Extensible.

#### Disadvantages
- Requires significant research and implementation time.

## Shared Objects
- Can have dependencies and their own PLT/GOT.
- Loop through Dynamic structures in the linkmap.
- Use the same PLT/GOT technique against shared objects, even those loaded via `dlopen`.

## Libhijack
- Makes injection of arbitrary code and hijacking of dynamically-loaded functions easy.
- Supports shared objects via the cheating method.
- Inject shellcode in as little as eight lines of C code.
- Full 32-bit and 64-bit support.
- Other OSs coming soon.
- Open for contributions: [GitHub](https://github.com/lattera/libhijack).

## Libhijack Release 0.5
- Uncached function searching.
- Hijack within shared objects.
- Breaks existing (0.3, 0.4) API.
- Various bug fixes.

## Libhijack TODO
- **Version 0.6**:
  - Resolve why certain functions don’t show up in GOT.
  - Inject shared objects via "The Real Way".
  - Possible FreeBSD port.
- Always looking for help.

## Prevention
- Ensure PLT/GOT entries point to the correct library.
- Use `dtrace` and disable `ptrace`.
- Limit `ptrace` usage (e.g., Apache user shouldn't use it).
- Consider hypervisors or security modules like Grsec/PAX, though they offer limited protection.

## Demo
- Assembly loading `.so`
- `exit(0);`

## Comments/Questions
- Thank you for your attention.