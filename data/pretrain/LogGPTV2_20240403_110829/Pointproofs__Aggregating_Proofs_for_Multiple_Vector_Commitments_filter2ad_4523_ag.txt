### 优化后的文本

#### 引言
在本节中，我们将讨论一种较弱的绑定概念，其中承诺 \( C \) 必须通过 `Commit` 函数诚实生成（基于某些可能由对手选择的消息），而不是由对手任意选择。这种绑定概念在区块链应用中通常已经足够。接着，我们将概述我们的方案如何实现这一概念，并且不限于代数对手。

#### 弱绑定
**定义：** 对于每一个 \( N \) 和运行时间为多项式时间 \( \lambda \) 的对手，找到以下组合的概率是可忽略的：
- \( C = \text{Commit}(m; r) \)
- \( \text{Verify}(C, S, m^*[S], \hat{\pi}) = 1 \)
- \( m[S] \neq m^*[S] \)

假设参数是由 `Setup(1^\lambda, 1^N)` 生成的。

**实现弱绑定：** 为了证明弱绑定，我们只需要展示任何有效对手以可忽略的概率赢得以下游戏：

1. 挑战者发送 \( g^\alpha, \ldots, g^{\alpha N} \in G \)。
2. 对手发送 \( C \in G, S, \{m_i^*\}_{i \in S} \)。
3. 挑战者发送 \( t_1, \ldots, t_N \leftarrow \mathbb{Z}_p \)。
4. 对手发送 \( m_1, \ldots, m_N \)。

对手获胜条件：
\[ C = g^{\sum_{i=1}^N \alpha m_i} \]
并且存在某个 \( i^* \in S \) 使得 \( m_{i^*} \neq m_{i^*}^* \)，同时满足
\[ \sum_{i \in S} (m_i - m_i^*) t_i = 0 \]

如果对手以概率 \( \epsilon \) 赢得该游戏，则其打破强 DH 问题的概率为 \( \frac{\epsilon^2}{4} - \frac{1}{p} \)。

**证明概要：** 通过平均论证，步骤 1 和 2 后，对手以概率 \( \frac{\epsilon}{2} \) 在步骤 3 和 4 中获胜。我们运行对手完成步骤 1 到 4 得到一些胜利的 \( t_i, m_i \)，然后重置步骤 3 和 4 得到另一组胜利的 \( t_i', m_i' \)。接下来进行案例分析：

- 如果 \( (m_1', \ldots, m_N') = (m_1, \ldots, m_N) \)，则有
  \[ \Pr\left(\sum_{i=1}^N m_i t_i' = 0\right) \leq \frac{1}{p} \]
  这里使用了 \( t_1', \ldots, t_N' \) 独立于 \( m_1, \ldots, m_N \) 的事实。

- 如果 \( (m_1', \ldots, m_N') \neq (m_1, \ldots, m_N) \)，则有
  \[ g^{\sum_{i=1}^N \alpha (m_i' - m_i)} = 1 \]
  这给出了一个关于 \( \alpha \) 的非平凡单变量多项式方程，我们可以用它来解出 \( \alpha \)。

#### 基于多项式承诺的跨承诺聚合
我们简要说明 Boneh、Drake、Fisch 和 Gabizon [BDFG20] 最近独立工作的多项式承诺（基于 [KZG10, MBKM19]）也支持跨承诺聚合。我们呈现的方案与 [BDFG20, Section 3] 中的方案相同，但应用了 Fiat-Shamir 变换和以下额外更改。

首先，对一个次数为 \( N-1 \) 的多项式 \( P \) 的承诺可以看作是对向量 \( (P(1), \ldots, P(N)) \) 的承诺。其次，我们明确展示了同承诺和跨承诺聚合机制；即，我们展示了如何将 [BDFG20] 中的批量打开算法分解为单个打开后进行聚合。第三，我们在跨承诺情况下修改验证方程，使用独立的随机值 \( t_j \) 而不是单个随机值 \( \gamma \) 的幂次，以便与我们的方案保持一致（注意，我们也可以在我们的方案中使用单个随机值的幂次，只需对证明和精确安全边界稍作调整；参见 [GWC19, footnote 5]）。

尽管多项式承诺最初并不是为高效更新设计的，但如 Gabizon [Gab20] 所指出的，通过一些预计算，更新可以像我们的方案一样高效（参见下面的 `Setup` 和 `UpdateCommit` 算法）。其他效率参数在常数因子内是可比较的，除了 `VerifyAcross`，这取决于具体聚合的子集，最多可能需要 \( \Theta(\ell N) \) 次指数运算。

不幸的是，[BDFG20, Section 4] 中提出的更高效的方案似乎不支持跨承诺聚合，因为第二个证明元素（在 [BDFG20] 中表示为 \( W' \)）依赖于一个随机值，而该随机值又依赖于聚合证明的第一个元素（在 [BDFG20] 中表示为 \( \pi \) 和 \( W \)）。

**概述：** 给定 \( m = (m_1, \ldots, m_N) \) 和子集 \( S \subseteq [N] \)，设 \( \varphi_S \) 是次数不超过 \( |S| - 1 \) 的唯一多项式，使得 \( \varphi_S(i) = m_i \) 对所有 \( i \in S \) 成立。设 \( \varphi = \varphi_{[N]} \)。观察到多项式
\[ \varphi(X) - \varphi_S(X) \]
在所有 \( i \in S \) 处取值为 0，因此可以被 \( z_S(X) := \prod_{j \in S} (X - j) \) 整除。我们将 \( \varphi(\alpha) \)（在指数上）作为承诺，分数
\[ \frac{\varphi(\alpha) - \varphi_S(\alpha)}{z_S(\alpha)} \]
（也在指数上）作为 \( S \) 的证明。

**同承诺聚合：**

- **Setup(1^\lambda, 1^N)**: 采样 \( \alpha \leftarrow \{N + 1, \ldots, p\} \) 并输出
  \[
  (g_1, g_1^\alpha, \ldots, g_1^{\alpha N-1}), (g_2, g_2^\alpha, \ldots, g_2^{\alpha N-1})
  \]
  如果需要启用快速 `UpdateCommit`，预先计算并输出值 \( u_i = g^{\varphi_i(\alpha)} \) 对于 \( i \in [N] \)，其中 \( \varphi_i \) 是唯一的次数为 \( N-1 \) 的多项式，使得 \( \varphi_i(i) = 1 \) 且 \( \varphi_i(j) = 0 \) 对所有 \( j \in [N] - \{i\} \) 成立。这个一次性预计算可以在 \( O(N^2) \) 时间内轻松完成；也可以使用快速傅里叶变换 (FFT) 在 \( O(N \log N) \) 时间内完成。如果有 \( \alpha \) 可用，会更快，但仅凭 \( pp \) 也可以完成。

- **Commit(m)**: 输出
  \[
  C := g_1^{\varphi(\alpha)}
  \]
  其中 \( \varphi \) 是唯一的次数为 \( N-1 \) 的多项式，使得 \( \varphi(i) = m_i \) 对所有 \( i \in [N] \) 成立。

- **UpdateCommit(C, S, m[S], m'[S])**: 输出
  \[
  C' := C \cdot \prod_{i \in S} u_{m'_i - m_i}
  \]

- **Prove(i, m)**: 输出
  \[
  \pi_i := g_1^{\frac{\varphi(\alpha) - m_i}{\alpha - i}}
  \]
  其中 \( \varphi \) 与 `Commit` 中相同。

- **Aggregate(C, S, m[S], {π_i : i ∈ S})**: 输出
  \[
  \hat{\pi} := \prod_{i \in S} \pi_i^{\lambda_i}
  \]
  其中
  \[
  \lambda_i := \prod_{j \in S \setminus \{i\}} \frac{1}{i - j}
  \]
  是 Lagrange 系数（详见正确性证明中的解释）。

- **Verify(C, S, m[S], \hat{\pi})**: 检查
  \[
  e\left(C \cdot g_1^{-\varphi_S(\alpha)}, g_2\right) \stackrel{?}{=} e\left(\hat{\pi}, g_2\right)
  \]

**跨承诺聚合：** 我们描述以下附加算法：

- **AggregateAcross({ Cj, Sj, mj[Sj], πj }j∈[ℓ])**: 输出
  \[
  \pi := \prod_{j=1}^\ell \pi_j^{t_j}
  \]
  其中
  \[
  t_j = H(j, \{C_j, S_j, m_j[S_j]\}_{j \in [\ell]})
  \]

- **VerifyAcross({ Cj, Sj, mj[Sj]}j∈[ℓ], π)**: 检查
  \[
  e\left(C_j \cdot g_1^{-\varphi_{j, S_j}(\alpha)}, g_2\right)^{t_j \cdot z_T \setminus S_j(\alpha)} \stackrel{?}{=} e\left(\pi, g_2^{z_T(\alpha)}\right)
  \]
  其中 \( T = \cup_j S_j \) 且 \( \varphi_{j, S} \) 是次数为 \( |S| - 1 \) 的唯一多项式，使得 \( \varphi_{j, S}(i) = m_{j, i} \) 对所有 \( i \in S \) 成立。

**正确性证明：** 回忆 \( z_S(X) := \prod_{j \in S} (X - j) \) 的定义，并观察到 \( \lambda_i = \frac{1}{z_S \setminus \{i\}(i)} \)。我们声称 `Aggregate` 输出的 \( \hat{\pi} \) 等于
\[
\hat{\pi} = g_1^{\frac{\varphi(\alpha) - \varphi_S(\alpha)}{z_S(\alpha)}}
\]

这个声明立即显示了 `Verify` 的正确性，因为根据双线性性质，两边都等于
\[
g_1^{\varphi(\alpha) - \varphi_S(\alpha)}
\]

该声明可以通过以下关系得出：
\[
\sum_{i \in S} \lambda_i \cdot \frac{\varphi(X) - m_i}{X - i} = \frac{\varphi(X) - \varphi_S(X)}{z_S(X)}
\]

这个关系可以通过以下两步证明：

1. 
\[
\sum_{i \in S} \lambda_i \cdot \frac{1}{X - i} = \frac{1}{z_S(X)}
\]
这是因为当我们把分数化为共同分母时，得到
\[
\sum_{i \in S} \lambda_i \cdot z_S \setminus \{i\}(X) = z_S(X)
\]
右边的分子是一个次数最多为 \( |S| - 1 \) 的多项式，在所有 \( i \in S \) 处取值为 1，因此必须是常数 1。

2. 
\[
\sum_{i \in S} \lambda_i \cdot \frac{m_i}{X - i} = \frac{\varphi_S(X)}{z_S(X)}
\]
这是因为
\[
\sum_{i \in S} \lambda_i \cdot m_i \cdot z_S \setminus \{i\}(X) = \varphi_S(X)
\]
右边的分子是一个次数最多为 \( |S| - 1 \) 的多项式，在所有 \( i \in S \) 处取值为 \( m_i \)，因此必须是常数 \( \varphi_S(X) \)。

对于 `VerifyAcross` 的正确性，观察到我们可以通过以下步骤获得验证方程：
1. 将第 \( j \) 个承诺验证方程的 \( G_2 \) 元素两边同时提升到 \( z_T \setminus S_j(\alpha) \) 的幂。
2. 将每个结果方程的左边 \( G_2 \) 元素和右边 \( G_1 \) 元素分别提升到 \( t_j \) 的幂。
3. 将所有 \( \ell \) 个结果方程相乘。

**绑定证明：** 在 AGM+ROM 模型下，绑定在 q 型假设下成立，如 [BDFG20, Section 3] 所示。

希望这些优化使您的文本更加清晰、连贯和专业。如有进一步需求，请随时告知。