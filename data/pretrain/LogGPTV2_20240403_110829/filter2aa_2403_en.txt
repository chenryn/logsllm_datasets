        { 
                if (i100) 
                        System.out.print(">100"); 
                if (i==0) 
                        System.out.print("==0"); 
        } 
}   
  public static void f(int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
         0: iload_0 
         1: bipush  
100 
         3: if_icmpge  
14 
         6: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
         9: ldc   
#3   
// String 100 
        39: invokevirtual #4   
// Method java/io/PrintStream.print:(Ljava/lang/String;)V 
        42: iload_0 
        43: ifne  
54 
        46: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        49: ldc #7 // String ==0 
        51: invokevirtual #4   
// Method java/io/PrintStream.print:(Ljava/lang/String;)V 
        54: return 
这段代码用以实现两个功能。首先，它可以判断输入的数与 100 的大小关系，如果是小于 100 的话，
显示“100”
的字样。另外一个功能是一个特例，就是如果输入的数为 0 的话，则显示“==0”字样。 
我们这里还是用到了前面提到的指令 ifXX。还记得其功能吧？ 
指令 if_icmpge 从栈中提取（pop）出两个值，然后对它们进行比较。如果第二个数大于第一个数的话，
那么就跳转到偏移量为 14 的位置；其实指令 if_icmpne 和指令 if_icmple 的运行机理基本相同，只是其转移
的条件不相同而已。 
在偏移量为 43 的位置，我们还可以看到一个指令 ifne。我们认为这是一个措辞不当的助记符，如果
把它的助记符换位 ifnz 似乎更加贴切一些（意思是当栈顶的值不是 0 时跳转），而实际的执行过程也是
这样的—当输入的值不是 0 时，程序会跳转到偏移量为 54 的地方。而如果输入值为 0，程序的执行流则
不会发生跳转、继续执行偏移量为 46 的指令、显示“==0”这个字符串。 
必须注意的是：JVM 没有无符号数的数据类型。因此我们只会遇到比较有符号数的比较指令。 
54.9  传递参数 
我们来将前面讲到的两个取较大值和较小值的函数混合在一起使用，也就是函数 min()和函数 max()。 
public class minmax 
{ 
        public static int min (int a, int b) 
        { 
                if (a>b) 
                        return b; 
                return a; 
        } 
        public static int max (int a, int b) 
        { 
                if (a>b) 
                        return a; 
                return b; 
        } 
        public static void main(String[] args) 
        { 
                int a=123, b=456; 
                int max_value=max(a, b); 
                int min_value=min(a, b); 
                System.out.println(min_value); 
                System.out.println(max_value); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
595 
        } 
}  
下面是主函数 main()的代码： 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=5, args_size=1 
         0: bipush  
     123 
         2: istore_1 
         3: sipush  
     456 
         6: istore_2 
         7: iload_1 
         8: iload_2 
         9: invokestatic  #2  
// Method max:(II)I 
        12: istore_3 
        13: iload_1 
        14: iload_2 
        15: invokestatic  #3  
// Method min:(II)I 
        18: istore 4 
        20: getstatic      #4  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        23: iload 4 
        25: invokevirtual  #5  
// Method java/io/PrintStream.println:(I)V 
        28: getstatic      #4  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        31: iload_3 
        32: invokevirtual  #5  
// Method java/io/PrintStream.println:(I)V 
        35: return 
调用方函数通过栈向被调用方函数传递参数，而被调用方函数通过 TOS()/栈顶向调用方函数传递返回值。 
54.10  位操作 
JVM 的位操作指令和其他指令集的工作原理基本相同。 
        public static int set (int a, int b) 
        { 
                return a | 1<<b; 
        } 
        public static int clear (int a, int b) 
        { 
                return a & (~(1<<b)); 
        } 
  public static int set(int, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=2, args_size=2 
         0: iload_0 
         1: iconst_1 
         2: iload_1 
         3: ishl 
         4: ior 
         5: ireturn 
  public static int clear(int, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=2, args_size=2 
         0: iload_0 
         1: iconst_1 
         2: iload_1 
         3: ishl 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
596 
逆向工程权威指南（下册） 
         4: iconst_m1 
         5: ixor 
         6: iand 
         7: ireturn 
指令 iconst_m1 将−1 这个数调入栈中，其实这个值就是 0Xffffffff。将任意数与−1 进行异或 XOR 运算，
其实就是对原操作数的所有位逐位取反（这一点可以参见本书的附录 A.6.2）。 
而当我们将所有的数据类型扩展为 64 位的 long 类型时： 
        public static long lset (long a, int b) 
        { 
                return a | 1<<b; 
        } 
        public static long lclear (long a, int b) 
        { 
                return a & (~(1<<b)); 
        } 
  public static long lset(long, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=4, locals=3, args_size=2 
         0: lload_0 
         1: iconst_1 
         2: iload_2 
         3: ishl 
         4: i2l 
         5: lor 
         6: lreturn 
  public static long lclear(long, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=4, locals=3, args_size=2 
         0: lload_0 
         1: iconst_1 
         2: iload_2 
         3: ishl 
         4: iconst_m1 
         5: ixor 
         6: i2l 
         7: land 
         8: lreturn 
除了操作指令都具有一个表示操作数是 64 位值的“L”前缀之外，这个程序的字节码和上一个程序几
乎相同。此外，第二个函数的参数还有一个整型数据。假如需要把 int 型的 32 位数据扩展为 64 位 long 型
数据，那么编译器就会分配 i2l 完成这项任务。  
54.11  循环 
public class Loop 
{ 
        public static void main(String[] args) 
        { 
                for (int i = 1; i <= 10; i++) 
                { 
                        System.out.println(i); 
                } 
        } 
}  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
597 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=2, args_size=1 
         0: iconst_1 
         1: istore_1 
         2: iload_1 
         3: bipush  
10 
         5: if_icmpgt  
21 
         8: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        11: iload_1 
        12: invokevirtual  #3   
// Method java/io/PrintStream.println:(I)V 
        15: iinc  
1, 1 
        18: goto  
2 
        21: return 
这里举一个例子，显示从 1～10 一共 10 个整型数。采用循环指令的方式。 
指令 iconst_1 将数值 1 调入栈顶 TOS，而 istore_1 指令则将局部变量阵列 LVA 中的这项数值存储在第
一个参数槽里。为什么把它存储在 1 号参数槽而不是第 0 个参数槽呢？这是因为主函数 main()有一个参数
是 String 数组，这个字符串的引用指针会占用第 0 号参数槽。 
因此，局部变量 i 必须存放于第 1 个参数槽。 
在偏移量为 3 和 5 的地方的指令，分别将变量 i 与循环控制变量的上限（这里是 10）比较。如果
此时的变量 i 比 10 大，那么指令流就会转向偏移量为 21 的地方，直接退出函数；否则，程序就会调
用 println()函数显示当前的数值。显示完后，在偏移量为 11 的地方，局部变量 i 会重新装入新的值，
继续为显示方法做准备。另外，在调用 println 方法的时候，我们提供的参数时 integer 型参数。注释中
的“(I)V”分别表示数据类型为 integer，函数类型为 void。 
当显示函数 println 结束时，i 的数值在偏移量为 15 的地方递增，也就是加 1。这条指令有两个操作数。
第一个操作数，第一个操作数表示实际运算数存储于第一号参数槽，第二个操作数表示递增的增量是 1。 
goto 指令的功能就是跳转/GOTO。它跳转到循环体中偏移量为 2 的地方。 
让我们来看一个稍微复杂一些的例子：斐波那契数列，简称为 Fibonacci，其实前面已经提到过了。但
是这里我们来看看如何用程序来实现它。 
public class Fibonacci 
{ 
        public static void main(String[] args) 
        { 
                int limit = 20, f = 0, g = 1; 
                for (int i = 1; i <= limit; i++) 
                { 
                        f = f + g; 
                        g = f - g; 
                        System.out.println(f); 
                } 
        } 
} 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=5, args_size=1 
         0: bipush  
20 
         2: istore_1 
         3: iconst_0 
         4: istore_2 
         5: iconst_1 
         6: istore_3 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
598 
逆向工程权威指南（下册） 
         7: iconst_1 
         8: istore  
4 
        10: iload  
4 
        12: iload_1 
        13: if_icmpgt  
37 
        16: iload_2 
        17: iload_3 
        18: iadd 
        19: istore_2 
        20: iload_2 
        21: iload_3 
        22: isub 
        23: istore_3 
        24: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        27: iload_2 
        28: invokevirtual  #3   
// Method java/io/PrintStream.println:(I)V 
        31: iinc  
4, 1 
        34: goto  
10 
        37: return 
我们来看看本地存储数组（Local Varible Array，LVA）与各参数槽的存储关系： 