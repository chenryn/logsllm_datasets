机的大杂烩，所以他们所需要的操作系统软件和文件格式也是一个“大杂烩”。信息的范围
涉及到从个人的研究笔记到组织机构的电话列表等方面。建造一个这样的系统所面对的挑战
是：为这些结构化的信息提供统一的、一致的接口；这些信息可以在尽可能多的平台上获得；
当新的人和新的组织加入到这个项目（译者注：即Web）时可进行增量的部署。
4.1.1 低门槛
参与创建和构造信息是自愿的，因此采用“低门槛”策略是十分必要的。这种策略被应
用于Web架构的所有使用者：阅读者、创作者和应用的开发者。
超媒体被选择作为用户接口是因为它的简单性和通用性：能够使用相同的接口而无须考
虑信息的来源，超媒体关系（链接）的灵活性使得能够对其进行无限的构造，对于链接的直
接操作允许在信息内部建立复杂的关系，来引导阅读者浏览整个应用。因为通过一个搜索接
口访问大型数据库中的信息，常常要比通过浏览方式来访问更加容易，所以Web也结合了
这种能力：通过将用户输入的数据提供给服务，然后呈现超媒体形式的结果，来执行简单的
查询。
对于创作者而言，首要的需求是整个系统的部分可用性（partial availability）必须不至
于妨碍对于内容的创作。超文本的创作语言（hypertext authoring language）必须是简单的，
能够使用现有的编辑工具来创建。无论是否是直接连接到Internet，都期待创作者能以这种
格式将其创作内容保存为个人的研究笔记，因此一些被引用的信息尚不可用（无论是暂时性
的还是永久性的）这一事实不能妨碍对可用信息的阅读和创作。因为类似的原因，必须能够
在所引用的目标信息可用之前创建对于该信息的引用。因为创作者被鼓励在对信息源的开发
中进行合作，因此无论引用的形式是e-mail地址还是在会议中写在餐巾纸的背面，这些引用
都必须是容易沟通的。
出于应用开发者的利益，简单性也是一个目标。由于所有的协议都被定义为文本，所以
通信能够被观察，并且能够使用现有的网络工具来对通信进行交互式的测试。这使得尽管缺
少标准，但是协议还是能够尽早地得到应用。
4.1.2 可扩展性
简单性使得部署一个分布式系统的最初实现成为了可能，可扩展性使得我们避免了永远
第4章 设计Web架构：问题与洞察力 38
陷入已部署系统的局限之中。即使有可能建造一个完美地匹配用户需求的软件系统，那些需
求也会随时间发生变化，就像社会的变化一样。如果一个系统想要像Web那样“长命”，
它就必须做好应对变化的准备。
4.1.3 分布式超媒体
超媒体（hypermedia）是由应用控制信息（application control information）来定义的，
这些控制信息内嵌在信息的表述之中，或者作为信息的表述之上的一层。分布式超媒体允许
在远程地点存储表述和控制信息。由于它的这个特性，一个分布式超媒体系统中的用户动作
需要将大量的数据从其存储地转移到其使用地。这样，Web架构必须被设计为支持大粒度的
数据转移。
用户可觉察的延迟（在选择一个链接和呈现可用的结果之间的时间）对于超媒体交互的
可用性而言是高度敏感的。因为Web的信息源是跨越整个Internet分布的，这种架构必须使
网络交互（在数据转移协议中的往返时间）最小化。
4.1.4 Internet规模
Web是旨在成为一个Internet规模的分布式超媒体系统，这意味着它的内涵远远不只仅
仅是地理上的分布。Internet是跨越组织边界互相连接的信息网络。信息服务的提供商必需
能够应对无法控制的可伸缩性和软件组件的独立部署两方面的需求。
4.1.4.1 无法控制的可伸缩性
大多数软件系统创建时都有一个隐含的假设：整个系统处在一个实体的控制之下，或者
至少参与到系统中的所有实体都是向着一个共同的目标行动，而不是有着各自不同的目标。
这样的假设当系统在Internet上开放地运行时，无法安全地满足。无法控制的可伸缩性是指，
因为架构元素可能会与在它们的组织的控制范围之外的元素进行通信，它们需要在遭遇到以
下情况时仍然能够继续正常运行：无法预测的负载量、特殊的不良格式或恶意构造的数据。
该架构必须要服从于加强可见性和可伸缩性的机制。
无法控制的可伸缩性需求被应用于所有的架构元素。不能期待客户端保持所有服务器的
信息，也不能期待服务器跨多个请求保持状态的信息。超媒体数据元素不能保持 “回退指
针”（back-pointers，即引用每个数据元素的标识符），因为对一个资源的引用的数量与对
此信息感兴趣的人数是成正比的（译者注：即，不可能为每一个人都保持一个回退指针）。
特别是有报道价值的信息能够导致“闪电式拥塞”：当可获得此信息的消息传遍世界时，网
站的访问量会出现突发的尖峰。
架构元素的安全性和它们的运行平台也成为了一个重大的关注点。多个组织边界意味着
在任何通信中都可能会存在的多个信任边界。中间应用（intermediary applications，例如防
火墙）应该能够检查应用的交互，并且阻止交互去做那些超越本组织的安全策略之外的事情。
应用的交互的参与者应该要么假设接收到的任何信息都是不可信的，要么在确认信息可信之
前要求一些额外的认证。这要求该架构有能力沟通与认证数据和授权控制有关的信息。然而，
因为认证降低了可伸缩性，架构的默认操作应该被限制在不需要可信数据（trusted data）的
动作上：即一组具有良好定义的语义的安全操作。
4.1.4.2 独立部署
多个组织边界也意味着系统必须准备好应对逐渐的和片段的修改，一些旧的组件实现将
会与一些新的组件实现共存，而不会妨碍新的组件实现使用它们的扩展功能。现有的架构元
第4章 设计Web架构：问题与洞察力 39
素需要被设计为考虑到以后将会添加新的架构功能。同样地，旧的实现需要易于识别，这样
遗留的行为能够被封装起来，而不会对新的架构元素带来不利的影响。架构作为一个整体，
必须被设计为易于以一种部分的、迭代的方式来部署架构元素，因为强制以一种整齐划一的
方式来部署是不可能的。
4.2 问题
到了1993年末，很明显已经不仅仅是研究者对Web感兴趣了。Web首先被小型研究团
体所采用，然后被传播到校区宿舍、俱乐部、个人主页、以及发布校园信息的各个科系。当
个人开始对那些令他们着迷的话题发布个人信息时，这种社会化的网络效应使得网站以指数
的速度增长，一直持续至今。虽然对于Web在商业上的兴趣才刚刚开始，但是很明显在国
际性的范围发布信息的能力对于商业来说具有无法抵挡的诱惑力。
尽管为Web的成功而欢欣鼓舞，但Internet开发者社区开始担心Web使用的快速增长率，
伴随早期HTTP的一些糟糕的网络特性，将会很快超越Internet基础设施的容量，并且导致
全面的崩溃。Web应用的交互性质的变化更加恶化了这种情况。尽管最初的协议是为单个的
请求响应对（request-response pairs）而设计的，新的站点使用了越来越多的内嵌图片（in-
line images）作为网页内容的一部分，这导致了不同的浏览交互模式（interaction profile）。
已部署的架构在对可扩展性、共享缓存、中间组件的支持等方面存在着严重的局限，这使得
开发解决增长率问题的特别解决方案非常困难。同时，软件市场中的商业竞争导致了新的提
议和一些有时候与Web协议相矛盾的提议层出不穷。
在Internet工程工作组（IETF）中形成了三个工作组，为Web的三个主要的标准而工作：
URI、HTTP和HTML。这些工作组的主要任务是定义在现有的早期Web架构中被公共地、
一致地实现的架构通信的子集，并且识别出在这个架构中存在的问题，然后指定一组标准来
解决那些问题。这给我们带来了一个挑战：我们如何将一组新的功能引入到一个已经被广泛
部署的架构中，以及如何确保新功能的引入不会对那些使Web成功的架构属性带来不利的
甚至是毁灭性的影响。
4.3 推导方法（Approach）
早期的Web架构基于一些可靠的原则：分离关注点、简单性、通用性，但是缺乏对于
架构的描述和基本原理。其设计基于一组非形式化的超文本笔记[14]、两份早期的面向用户
社区的论文[12, 13]、以及已归档的Web开发者社区邮件列表（PI:EMAIL）中的
讨论。然而，事实上，对于早期Web架构的真正描述，出现在libwww（用于客户端和服务
端的CERN协议库）和Mosic（NCSA开发的浏览器客户端）的实现中，以及与它们互操作
的一些其他的实现中。
一种架构风格能够被用来定义Web架构背后的原则，这样这些原则对于未来的架构就
是可见的了。如同在第1章中所讨论的那样，一种风格是一组已命名的架构元素之上的约束，
它导致了一组架构想要得到的属性。因此，我的推导方法的第一步，就是识别出那些负责导
致想要得到的属性的一组存在于早期Web架构中的约束。
假设一：在WWW架构背后的设计基本原理能够通过一种由应用于Web架构中的
元素之上的约束组成的架构风格来描述。
为了扩展在架构实例上所导致的属性，可以在一种架构风格上应用额外的约束。我的推
导方法的下一步是识别出在一个Internet规模的分布式超媒体系统中想要得到的属性，然后
第4章 设计Web架构：问题与洞察力 40
选择额外的会导致那些属性的架构风格，将它们与早期的Web约束相结合，形成一种新的、
混合的现代Web架构的架构风格。
假设二：能够为WWW架构风格添加约束，从而获得更好地反映一个现代Web
架构想要得到的属性的新的混合风格。
使用新的架构风格作为指导，我们能够对被提议的扩展与针对风格中的约束对Web架
构所做的修改进行比较。存在冲突表明这个提议会违反一个或多个在Web背后的设计原则。
在一些情况下，一旦新的功能被使用时，通过要求提供一个特定的指示，能够去除存在的冲
突。对于影响一个响应的默认可缓存能力（cacheability）的HTTP扩展而言，这样做是有效
的。对于严重的冲突，例如改变交互风格，要么使用更加有益于Web风格的设计来替代相
同的功能，要么告知提议人将此功能实现为与Web并行运行的单独的架构。
假设三：修改Web架构的提议能够与更新后的WWW架构风格进行比较和分析，
以便在部署之前识别出存在的冲突。
修订后的协议标准是根据新的架构风格的指导来编写的。最后，如同修订后的协议标准
中定义的那样，更新后的Web架构通过参与到基础设施（infrastructure）和中间件软件
（middleware software）的开发过程中来进行部署，它们组成了大多数的Web应用。这包括
了我直接参与Apache HTTP服务器项目和libwww-perl客户端库的软件开发而得到的直接经
验，以及通过为W3C的libwww和jigsaw项目、Netscape Navigator、Lynx、MSIE这三种浏
览器、还有一大堆其他实现的开发者提供建议而得到的间接经验，这些建议是IETF演讲的
一部分。
尽管我是以单一的顺序来描述这个推导方法的，但是它实际上是以一种无顺序的、迭代
的方式来应用的。在过去的六年中，我一直在构建模型、为架构风格添加约束、通过客户端
和服务端软件的实验性扩展来测试这些约束对于Web协议标准的影响。同样地，其他人也
曾建议为架构添加某些功能，这些功能超出了我的当前模型风格的范围，但是并不与该风格
相冲突，这导致我回过头去修订架构的约束，以便更好地反映改进后的架构。我的目标就是
总是维持一个一致的、正确的、反映出我所希望的Web架构应该如何运转的模型，这样就
能够使用它来指导定义适当行为的协议标准，而不是创建一种仅仅局限于当工作开始之初所
设想到的那些约束的人造模型。
4.4 小结