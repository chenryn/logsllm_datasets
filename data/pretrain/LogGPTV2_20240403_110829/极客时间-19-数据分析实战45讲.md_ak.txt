## 总结我今天给你介绍了数据可视化的视图，然后带你讲解了当前主流的数据可视化工具。Tableau和 PowerBI 是 BI商业智能行业的领导者，是很多大公司里商业数据分析工作必备的工具。如果你使用Python 作为数据分析的语言，那么也需要对 Python 数据可视化有所掌握。![](Images/9c789fa034756b30cce49732d6d1b55e.png){savepage-src="https://static001.geekbang.org/resource/image/bd/5b/bd49dbaffdc170ecc4d56d946afd5c5b.jpg"}\最后给你留两道思考题吧。你平时的工作是怎样的，是否需要用到数据可视化技术呢？在数据可视化技术中，你都用过哪些工具，你觉得哪个工具使用起来比较顺手？欢迎和我在评论区进行讨论，也欢迎你把这篇文章分享给你的朋友或者同事。![](Images/8b75105190797b2e4f7be2536b6543db.png){savepage-src="https://static001.geekbang.org/resource/image/48/96/48cb89aa8c4858bbc18df3b3ac414496.jpg"}
# 15丨一次学会Python数据可视化的10种技能今天我来给你讲讲 Python 的可视化技术。如果你想要用 Python进行数据分析，就需要在项目初期开始进行探索性的数据分析，这样方便你对数据有一定的了解。其中最直观的就是采用数据可视化技术，这样，数据不仅一目了然，而且更容易被解读。同样在数据分析得到结果之后，我们还需要用到可视化技术，把最终的结果呈现出来。
## 可视化视图都有哪些？按照数据之间的关系，我们可以把可视化视图划分为 4类，它们分别是比较、联系、构成和分布。我来简单介绍下这四种关系的特点：1.  比较：比较数据间各类别的关系，或者是它们随着时间的变化趋势，比如折线图；2.  联系：查看两个或两个以上变量之间的关系，比如散点图；3.  构成：每个部分占整体的百分比，或者是随着时间的百分比变化，比如饼图；4.  分布：关注单个变量，或者多个变量的分布情况，比如直方图。同样，按照变量的个数，我们可以把可视化视图划分为单变量分析和多变量分析。单变量分析指的是一次只关注一个变量。比如我们只关注"身高"这个变量，来看身高的取值分布，而暂时忽略其他变量。多变量分析可以让你在一张图上可以查看两个以上变量的关系。比如"身高"和"年龄"，你可以理解是同一个人的两个参数，这样在同一张图中可以看到每个人的"身高"和"年龄"的取值，从而分析出来这两个变量之间是否存在某种联系。``{=html}可视化的视图可以说是分门别类，多种多样，今天我主要介绍常用的 10种视图，这些视图包括了散点图、折线图、直方图、条形图、箱线图、饼图、热力图、蜘蛛图、二元变量分布和成对关系。![](Images/b5c99f55883dbb8a2acfc96b7ae28fd6.png){savepage-src="https://static001.geekbang.org/resource/image/46/75/4673a17085302cfe9177f8ee687ac675.png"}下面我给你一一进行介绍。**散点图**散点图的英文叫做 scatterplot，它将两个变量的值显示在二维坐标中，非常适合展示两个变量之间的关系。当然，除了二维的散点图，我们还有三维的散点图。我在上一讲中给你简单介绍了下 Matplotlib 这个工具，在 Matplotlib中，我们经常会用到 pyplot 这个工具包，它包括了很多绘图函数，类似 Matlab的绘图框架。在使用前你需要进行引用：    import matplotlib.pyplot as plt在工具包引用后，画散点图，需要使用 plt.scatter(x, y, marker=None)函数。x、y 是坐标，marker代表了标记的符号。比如"x"、"\>"或者"o"。选择不同的marker，呈现出来的符号样式也会不同，你可以自己试一下。下面三张图分别对应"x""\>"和"o"。![](Images/336a84098352417d70f0aba9b29bff75.png){savepage-src="https://static001.geekbang.org/resource/image/7a/f9/7a3e19e006a354eacc230fe87f623cf9.png"}\除了 Matplotlib 外，你也可以使用 Seaborn 进行散点图的绘制。在使用Seaborn 前，也需要进行包引用：    import seaborn as sns在引用 seaborn 工具包之后，就可以使用 seaborn工具包的函数了。如果想要做散点图，可以直接使用 sns.jointplot(x, y,data=None, kind='scatter') 函数。其中 x、y 是 data 中的下标。data就是我们要传入的数据，一般是 DataFrame 类型。kind 这类我们取scatter，代表散点的意思。当然 kind还可以取其他值，这个我在后面的视图中会讲到，不同的 kind代表不同的视图绘制方式。好了，让我们来模拟下，假设我们的数据是随机的 1000 个点。    import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns
# 数据准备N = 1000x = np.random.randn(N)y = np.random.randn(N)
# 用 Matplotlib 画散点图plt.scatter(x, y,marker='x')plt.show()
# 用 Seaborn 画散点图df = pd.DataFrame({'x': x, 'y': y})sns.jointplot(x="x", y="y", data=df, kind='scatter');plt.show()我们运行一下这个代码，就可以看到下面的视图（第一张图为 Matplotlib绘制的，第二张图为 Seaborn 绘制的）。其实你能看到 Matplotlib 和 Seaborn的视图呈现还是有差别的。Matplotlib 默认情况下呈现出来的是个长方形。而Seaborn呈现的是个正方形，而且不仅显示出了散点图，还给了这两个变量的分布情况。Matplotlib 绘制：![](Images/807e260c74d044af23a4162376d56a6d.png){savepage-src="https://static001.geekbang.org/resource/image/28/03/2823ea9c7c2d988c1fdb3e7c8fb1e603.png"}Seaborn 绘制：![](Images/d94b5194a9223bfa60879283dd4db253.png){savepage-src="https://static001.geekbang.org/resource/image/5f/b9/5f06e23188cb31bc549cfd60696e75b9.png"}**折线图**折线图可以用来表示数据随着时间变化的趋势。在 Matplotlib 中，我们可以直接使用 plt.plot()函数，当然需要提前把数据按照 x轴的大小进行排序，要不画出来的折线图就无法按照 x 轴递增的顺序展示。在 Seaborn 中，我们使用 sns.lineplot (x, y, data=None) 函数。其中 x、y是 data 中的下标。data 就是我们要传入的数据，一般是 DataFrame 类型。这里我们设置了 x、y 的数组。x 数组代表时间（年），y数组我们随便设置几个取值。下面是详细的代码。    import pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns
# 数据准备x = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]y = [5, 3, 6, 20, 17, 16, 19, 30, 32, 35]
# 使用 Matplotlib 画折线图plt.plot(x, y)plt.show()
# 使用 Seaborn 画折线图df = pd.DataFrame({'x': x, 'y': y})sns.lineplot(x="x", y="y", data=df)plt.show()然后我们分别用 Matplotlib 和 Seaborn进行画图，可以得到下面的图示。你可以看出这两个图示的结果是完全一样的，只是在seaborn 中标记了 x 和 y 轴的含义。![](Images/db7fa2680376910c84a1173f089437f1.png){savepage-src="https://static001.geekbang.org/resource/image/25/88/258c6a2fbd7786ed7bd86a5f50c49b88.png"}![](Images/64aa5f2230f908e5afd95eb90f457b67.png){savepage-src="https://static001.geekbang.org/resource/image/77/60/77d619cc2a4131e97478df490cc43d60.png"}**直方图**直方图是比较常见的视图，它是把横坐标等分成了一定数量的小区间，这个小区间也叫作"箱子"，然后在每个"箱子"内用矩形条（bars）展示该箱子的箱子数（也就是y 值），这样就完成了对数据集的直方图分布的可视化。在 Matplotlib 中，我们使用 plt.hist(x, bins=10) 函数，其中参数 x是一维数组，bins 代表直方图中的箱子数量，默认是 10。在 Seaborn 中，我们使用 sns.distplot(x, bins=10, kde=True)函数。其中参数 x 是一维数组，bins 代表直方图中的箱子数量，kde代表显示核密度估计，默认是 True，我们也可以把 kde 设置为False，不进行显示。核密度估计是通过核函数帮我们来估计概率密度的方法。这是一段绘制直方图的代码。    import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns
# 数据准备a = np.random.randn(100)s = pd.Series(a) 
# 用 Matplotlib 画直方图plt.hist(s)plt.show()