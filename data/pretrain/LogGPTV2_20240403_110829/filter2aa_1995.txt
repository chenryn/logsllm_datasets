### 议题：WebLogic XMLDecoder 反序列化漏洞分析

#### 演讲人：
- **姓名**：谢小强
- **ID**：Badcode
- **部门/职位**：404实验室/安全研究员
- **研究方向**：Web 安全
- **标签**：Java
- **Blog**：[https://badcode.cc/](https://badcode.cc/)

### 1. 什么是 XMLDecoder？

**XMLDecoder** 是 Java 中的一个类，用于从 XML 文档中恢复 Java 对象。它是 `XMLEncoder` 的互补类，后者将 Java 对象转换为 XML 格式。

#### 常用标签
- **基本类型标签**：int, char, byte, 等
- **java**
- **string**
- **null**
- **array**
- **object**
- **void**
- **class**

**XMLEncoder** 将 Java 对象转换为 XML 格式，而 **XMLDecoder** 则从 XML 文件中恢复这些对象。

### 2. XMLDecoder 解析流程

#### JDK 6
1. **解析开始标签**：生成 `MutableExpression` 对象。
2. **设置属性**：通过 `setTarget`, `setMethodName`, `setProperty`, `setValue`, `addArg` 等方法设置属性。
3. **解析结束标签**：调用 `getValue` 方法。
4. **反射调用**：通过 `Statement.invoke()` 和 `Statement.invokeInternal()` 进行反射调用。

#### JDK 7+
- **支持的标签**：基本类型, java, string, null, array, object, void, class, new, var, true, false, field, method, property
- **解析流程**：与 JDK 6 类似，但增加了对更多标签的支持。

### 3. XMLDecoder 反序列化安全风险

- **《Resting on Your Laurels will get you Pwned: Effectively Code Reviewing REST Applications to avoid getting powned》** (Abraham Kang, Dinis Cruz, Alvaro Munoz, 2013/8)
- **《Java Unmarshaller Security》** (Moritz Bechler, 2017/5)

### 4. WebLogic 中的 XMLDecoder 漏洞

#### CVE-2017-3506
- **发布时间**：2017年4月
- **受影响组件**：wls-wsat.war
- **触发流程**：
  - `WLSServletAdapter.handle()`
  - `WorkContextServerTube.processRequest()`
  - `WorkContextTube.readHeaderOld()`
  - `WorkContextXmlInputAdapter.readUTF()`
  - `XMLDecoder.readObject()`
  - `new java.lang.ProcessBuilder("calc").start();`
- **补丁**：在 `WorkContextXmlInputAdapter` 类中增加 `validate` 方法，过滤 `object` 标签。

#### CVE-2017-10271/CVE-2017-10352
- **绕过补丁**：基于 CVE-2017-3506 补丁的绕过
- **补丁**：2017年10月发布，过滤 `new` 和 `method` 标签，限制 `void` 标签和 `array` 标签的使用。

#### CVE-2019-2725
- **发布时间**：2019年4月17日
- **受影响组件**：wls9_async_response.war
- **触发流程**：与 CVE-2017-3506 类似，但新增入口点。
- **真假 PoC**：使用 `class` 标签绕过 `validate` 方法的校验。
- **补丁**：在原有黑名单基础上增加对 `class` 标签的过滤。

#### CVE-2019-2729
- **发布时间**：2019年4月26日
- **绕过**：2019年5月，补丁被再次绕过。
- **JDK 6 下的绕过**：利用设计偏差和容错机制，允许 `method` 属性的使用。
- **补丁**：建议不要使用 XMLDecoder 解析不可控的数据，从根本上解决漏洞问题。

### 结论
- **XMLDecoder 功能过于危险**，对于不可控的数据，应避免使用。
- **厂商修补策略**：指哪补哪的方式容易被绕过。
- **深入理解漏洞原理**：有助于更好地防范和修复漏洞。
- **平时积累**：多了解相关漏洞的利用方式，提高安全意识。