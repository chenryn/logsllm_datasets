议题：
WebLogic XMLDecoder 反序
列化之殇
演
讲人：
谢
小强
ID：
Badcode
部
门/职
位：
404实验室/安全研究员
研究方向：
Web 安全
标签
：
Java
Blog：
https://badcode.cc/
帅 
什么是 XMLDecoder ？
01
02
03
XMLDecoder 解析
流
程
XMLDecoder 反序
列化安全风
险
04
WebLogic 中的 XMLDecoder 漏
洞 
01
什么是 XMLDecoder ？
XMLEncoder
• 是 ObjectOutputStream 的互补替换
• 将 Java 对象转换成 XML
Test.xml
void标签通过method属性调用方法
常用标签
• 基本类型标签
• 
• 
• 
• 
• 
• 
• 
• 
• 标签来定义一个数组
• 标签，表示从序列化形式重建对象所需的一组方法调用
• 标记来表示Class的一个实例
•     ……
XMLDecoder
• 用于读取使用 XMLEncoder 创建的 XML 文档
• 从 XML 文件中恢复 Java 对象
Java 对象
XML 文档
XMLDecoder
XMLEncoder
02
XMLDecoder 解析
流
程
解析流程(JDK 6)
startElement
endElement
MutableExpression
解析开始标签
生成MutableExpression对象
(value的初始值为unbound)
setTarget
setMethodName
setProperty
setValue
addArg
解析结束标签
getValue
Statement.invoke() -> Statement.invokeInternal()
反射调用
getTarget
getMethodName
MutableExpression 对象属性中的target和methodName 指定反射调
用的类和方法
com.sun.beans.ObjectHandler  
JDK 7+
com.sun.beans.decoder.
DocumentHandler
解析流程(JDK 7+)
支持的标签
• 基本类型(int/char/byte…)
• java
• string
• null
• array
• object
• void
• class
JDK 6
JDK 7+
• 基本类型(int/char/byte…)
• java
• string
• null
• array
• object
• void
• class
• new
• var
• true
• false
• field
• method
• property
03
XMLDecoder 反序
列化安全风
险
• 《Resting on Your Laurels will get you Pwned: Effectively 
Code Reviewing REST Applications to avoid getting 
powned》
By Abraham Kang, Dinis Cruz, and Alvaro Munoz 
2013/8
 Process Builder - Start a Calc.xml
《Java Unmarshaller Security》
By Moritz Bechler   2017/5 
04
WebLogic 中的 XMLDecoder 漏
洞 
• CVE-2017-3506
• CVE-2017-10271/CVE-2017-10352
• CVE-2019-2725
• CVE-2019-2729
CVE-2017-3506
• 2017年4月发布补丁修复
• wls-wsat.war
• Web Services
• 基于 http 协议
• 挖坑主力
触发流程
WLSServletAdapter.handle()
WorkContextServerTube.processRequest()
WorkContextTube.readHeaderOld()
WorkContextXmlInputAdapter.readUTF()
XMLDecoder.readObject()
new java.lang.ProcessBuilder("calc").start();
补丁
2017年04月补丁
p25388747_1036_Generic 
在 WorkContextXmlInputAdapter 类
中 增加 validate 方法验证将传入
XMLDecoder 中的数据
过滤 object 标签
CVE-2017-10271/CVE-2017-10352
• 基于 CVE-2017-3506 补丁的绕过
补丁绕过
CVE-2017-10271/CVE-2017-10352
补丁
• 2017年10月补丁
• p26519424_1036_Generic 
过滤 new method 标签
void标签后面只能跟index属性
array标签后面可以跟class属性，但是类
型只能是byte类型的。
CVE-2019-2725
• 2019年4月17日，CNVD 发布《关于Oracle WebLogic wls9-
async组件存在反序列化远程命令执行漏洞的安全公告》
• wls9_async_response.war
触发流程
• 进入 WorkContextXmlInputAdapter
之后和 CVE-2017-3506 的流程一样
• wls9_async_response.war 只是一个新入口
• 同样会经过 validate 方法
AsyncResponseService
HandlerIterator
WorkAreaServerHandler
WorkContextXmlInputAdapter
validate
XMLDecoder.readObject()
真假 PoC
使用 class 标签 绕过 validate 方法的校验
仍然使用  或者
无法绕过 validate 方法的校验
class 标签
class 标签可以表示一个类的实例
基于UnitOfWorkChangeSet
• 仅限 10.3 系列
• Jdk 7u21
• CVE-2018-3191
基于 org.slf4j.ext.EventData
• 仅限 12.1 系列
• 无 JDK 版本限制
• 无外连，直接回显
基于 JdbcRowSetImpl
• 无 WebLogic 版本限制
• 需 JDK7 +
基于 FileSystemXmlApplicationContext
• 无 WebLogic 版本限制
• 无 JDK 版本限制
• 需外连
• 构造方式参考 CVE-2017-17485
补丁
在原有黑名单的基础上增
加对 class 标签的过滤
2019年04月26日
p29694149_10360190416
_Generic
CVE-2019-2729
• 2019年4月26日，Oracle 发布补丁修复CVE-2019-2725
• 2019年5月，补丁被再次绕过
• 2019年6月，绕过exp（JDK 6）开始流传
JDK 6 下的绕过（偏离设计+容错）
startElement
endElement
MutableExpression
解析开始标签
生成MutableExpression对象
setTarget
setMethodName
setProperty
setValue
addArg
解析结束标签
getValue
Statement.invoke() -> Statement.invokeInternal()
反射调用
getTarget
getMethodName
MutableExpression 对象属性中的target和methodName 指定反射调
用的类和方法
设计偏差导致
 合法
此时 methodName=xxxx，
target=Ljava.lang.Object
容错导致可以获取到获取Class.class
类中的指定方法
若指定方法为 forName，相当于调用
了Class.forName()
返回指定的对象
 和  等同
为什么 array 标签在 JDK 7+ 下不行？
不支持 method 属性
那还有什么行？
FieldElementHandler
返回一个 JdbcRowSetImpl 的实例
PropertyElementHandler
根据 name 属性的值调用对应的
getter/setter方法。
需要什么样的类？
字段特征
•
public
•
static
•   字段里面创建了实例
•   实例对应的类通过setter/getter能够创建外部指定的对象
简单 Fuzz
补丁
• XMLDecoder 功能过于危险，基本没限制。对于不可控的数据，
不要使用 XMLDecoder解析
• 漏洞多次被绕过最根本的原因是厂商指哪补哪
• 对于漏洞的原理，最好深究到底(才好捡漏)
• 平时多积累，多了解一些相关漏洞的利用方式