(S&P’05). IEEE, 32–46.
[18] Paolo Milani Comparetti, Guido Salvaneschi, Engin Kirda, Clemens Kolbitsch,
Christopher Kruegel, and Stefano Zanero. 2010. Identifying dormant functionality
in malware programs. In 2010 IEEE Symposium on Security and Privacy. IEEE,
61–76.
[19] Igino Corona, Davide Maiorca, Davide Ariu, and Giorgio Giacinto. 2014. Lux0R:
Detection of Malicious PDF-embedded JavaScript Code Through Discriminant
Analysis of API References. In Proceedings of the 2014 Workshop on Artificial
Intelligent and Security Workshop (AISec ’14). ACM, New York, NY, USA, 47–57.
[20] Christine Council and Sammi Seaman. 2016. ClamAV. https://www.clamav.net/.
(2016).
[21] cys3c. 2016. BackdoorMan. https://github.com/cys3c/BackdoorMan. (2016).
[22] Johannes Dahse and Thorsten Holz. 2014. Simulation of Built-in PHP Features
for Precise Static Code Analysis. NDSS 2014 (2014).
[23] Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley. 2014. Blanket
execution: Dynamic similarity testing for program binaries and components. In
23rd USENIX Security Symposium (USENIX Security 14). 303–317.
[24] Mariano Graziano, Davide Canali, Leyla Bilge, Andrea Lanzi, and Davide
Balzarotti. 2015. Needles in a Haystack - Mining Information from Public Dy-
namic Analysis Sandboxes for Malware Intelligence. USENIX Security Symposium
(2015).
[25] Mark Hills. 2015. Evolution of dynamic feature usage in PHP. In 22nd IEEE Inter-
national Conference on Software Analysis, Evolution, and Reengineering, SANER
2015, Montreal, QC, Canada, March 2-6, 2015. 525–529. https://doi.org/10.1109/
SANER.2015.7081870
[26] Xin Hu and Kang G Shin. 2013. DUET - integration of dynamic and static analyses
for malware clustering with cluster ensembles. ACSAC (2013), 79–88.
2017 Data Breach Investigations Report.
//www.ictsecuritymagazine.com/wp-content/uploads/2017-Data-Breach-
Investigations-Report.pdf. (2017).
[28] Inscapsula. 2017. How Backdoors Bypass Security Solutions with Advanced
Camouflage Techniques. https://www.incapsula.com/blog/backdoor-malware-
analysis-obfuscation-techniques.html. (2017).
[29] Luca Invernizzi and Paolo Milani Comparetti. 2012. EvilSeed - A Guided Approach
to Finding Malicious Web Pages. IEEE Symposium on Security and Privacy (2012).
[27] Inscapsula. 2017.
https:
[30] ionCube Ltd. 2019. ionCube. https://www.ioncube.com/phpencoder.php. (2019).
[31] Roberto Jordaney, Kumar Sharad, Santanu K Dash, Zhi Wang, Davide Papini,
Ilia Nouretdinov, and Lorenzo Cavallaro. 2017. Transcend: Detecting concept
drift in malware classification models. In PROCEEDINGS OF THE 26TH USENIX
SECURITY SYMPOSIUM (USENIX SECURITY’17). USENIX Association, 625–642.
[32] Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Pixy: a static
analysis tool for detecting Web application vulnerabilities. Security and Privacy
(2006), 6 pp.–263.
[33] Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Precise alias
analysis for static detection of web application vulnerabilities. PLAS (2006).
[34] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, Christopher Kruegel,
and Giovanni Vigna. 2013. Revolver - An Automated Approach to the Detection
of Evasive Web-based Malware. USENIX Security Symposium (2013).
[35] Amin Kharraz, Sajjad Arshad, Collin Mulliner, William K Robertson, and En-
gin Kirda. 2016. UNVEIL - A Large-Scale, Automated Approach to Detecting
Ransomware. USENIX Security Symposium (2016).
[36] Kyungtae Kim, I Luk Kim, Chung Hwan Kim, Yonghwi Kwon, Yunhui Zheng,
Xiangyu Zhang, and Dongyan Xu. 2017. J-force: Forced execution on javascript. In
Proceedings of the 26th international conference on World Wide Web. International
World Wide Web Conferences Steering Committee, 897–906.
[37] Clemens Kolbitsch, Benjamin Livshits, Benjamin Zorn, and Christian Seifert.
2012. Rozzle: De-cloaking internet malware. In 2012 IEEE Symposium on Security
and Privacy. IEEE, 443–457.
[38] C Kruegel. 2014. Full system emulation: Achieving successful automated dynamic
analysis of evasive malware. Proc BlackHat USA Security Conference (2014).
[39] Larry Masters. 2016. CakePHP. https://cakephp.org/. (2016).
[40] Nektarios Leontiadis, Tyler Moore, and Nicolas Christin. 2011. Measuring and
Analyzing Search-Redirection Attacks in the Illicit Online Prescription Drug
Trade. USENIX Security Symposium (2011).
[41] Charles Lim and Kalamullah Ramli. 2014. Mal-ONE: A unified framework for
fast and efficient malware detection. In 2014 IEEE 2nd International Conference
on Technology, Informatics, Management, Engineering & Environment (TIME-E).
IEEE, 1–6.
[42] Zend Technologies Ltd. 2015. zendguard. http://www.zend.com/en/products/
[43] MarketWired. 2014.
Joomla! CMS Passes 50 Million Downloads.
http://www.marketwired.com/press-release/joomla-cms-passes-50-million-
downloads-1882565.htm. (2014).
[44] Mattias Geniar. 2019. PHP Exploit Scripts. https://github.com/mattiasgeniar/php-
exploit-scripts/. (2019).
[45] memcached.org. 2019. Memcached: Free and open source, high-performance,
distributed memory object caching system. https://memcached.org/. (2019).
Accessed: 2019-08-25.
zend-guard. (2015).
[46] Michal Cihar. 2016. phpMyAdmin. https://www.phpmyadmin.net/. (2016).
[47] Andreas Moser, Christopher Kruegel, and Engin Kirda. 2007. Exploring Multiple
Execution Paths for Malware Analysis. In 2007 IEEE Symposium on Security and
Privacy (SP ’07). IEEE, 231–245.
[48] NBS Systems. 2016. PHP Malware Finder. https://github.com/nbs-system/php-
malware-finder. (2016).
[49] Nimbusec GmbH. 2016. shellray - a php webshell detector. https://shellray.com/.
[50] Oracle Corporation. 2019. MySQL: The world’s most popular open source data-
(2016). Accessed: 2016-09-30.
base. https://mysql.com/. (2019). Accessed: 2019-08-25.
[51] Pastebin. 2019. Pastebin. https://pastebin.com/. (2019).
[52] Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu, Zhiqiang Lin, and Zhendong
Su. 2014. X-Force - Force-Executing Binary Programs for Security Applications.
USENIX Security Symposium (2014).
[53] Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu, Zhiqiang Lin, and Zhendong
Su. 2014. X-force: force-executing binary programs for security applications. In
23rd USENIX Security Symposium (USENIX Security 14). 829–844.
autoload. (2019).
[54] php.net. 2019. PHP: Autoloading Classes - Manual. https://www.php.net/
[55] Michalis Polychronakis and Niels Provos. 2008. Ghost Turns Zombie - Exploring
the Life Cycle of Web-based Malware. LEET (2008).
[56] Niels Provos, Dean McNamee, Panayiotis Mavrommatis, Ke Wang, Nagendra
Modadugu, et al. 2007. The Ghost in the Browser: Analysis of Web-based Malware.
HotBots 7 (2007), 4–4.
linux-malware-detect/. (2016).
[57] R-fx Networks. 2016. Linux Malware Detect. https://www.rfxn.com/projects/
[58] r57. 2016. r57c99 Official Website. http://www.r57c99.com/. (2016). Accessed:
[59] RedisLabs. 2019. Redis: An open source, in-memory data structure store. https:
[60] Max Schäfer, Manu Sridharan, Julian Dolby, and Frank Tip. 2013. Dynamic
//redis.io/. (2019). Accessed: 2019-08-25.
determinacy analysis. In ACM SIGPLAN Notices, Vol. 48. ACM, 165–174.
[61] Monirul Sharif, Vinod Yegneswaran, Hassen Saidi, Phillip Porras, and Wenke Lee.
2008. Eureka: A Framework for Enabling Static Malware Analysis. In Computer
Security - ESORICS 2008: 13th European Symposium on Research in Computer
2016-09-30.
Security, Málaga, Spain, October 6-8, 2008. Proceedings, Sushil Jajodia and Javier
Lopez (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 481–500.
[62] Monirul I Sharif, Andrea Lanzi, Jonathon T Giffin, and Wenke Lee. Impeding
Malware Analysis Using Conditional Code Obfuscation.
[63] Kyle Soska and Nicolas Christin. 2014. Automatically Detecting Vulnerable
Websites Before They Turn Malicious. USENIX Security Symposium (2014).
[64] Cristian-Alexandru Staicu and Michael Pradel. 2018. Freezing the web: A study
of redos vulnerabilities in javascript-based web servers. In 27th USENIX Security
Symposium (USENIX Security 18). 361–376.
[65] Oleksii Starov, Johannes Dahse, Syed Sharique Ahmad, Thorsten Holz, and Nick
Nikiforakis. 2016. No honor among thieves: A large-scale analysis of malicious
web shells. In Proceedings of the 25th International Conference on World Wide Web.
International World Wide Web Conferences Steering Committee, 1021–1032.
[66] Sucuri. 2017. Hacked Website Report 2017. https://www.fortinet.com/content/
dam/fortinet/assets/threat-reports/Fortinet-Threat-Report-Q2-2017.pdf. (2017).
[67] Bo Sun, Akinori Fujino, and Tatsuya Mori. 2016. POSTER: Toward Automating
the Generation of Malware Analysis Reports Using the Sandbox Logs. ACM, New
York, New York, USA.
http://php.net/manual/en/
[69] UnPHP. 2016. UnPHP - The Online PHP Decoder. http://unphp.net/. (2016).
[70] VirusTotal. 2016. yara: The pattern matching swiss knife for malware researchers
[68] The PHP Group. 2016.
book.runkit.php. (2016).
Accessed: 2016-09-30.
PHP runkit book.
(and everyone else). http://virustotal.github.io/yara/. (2016).
[71] W3Techs. 2018. Usage statistics and market share of PHP for websites. https:
//w3techs.com/technologies/details/pl-php/all/all. (2018). Accessed: 2018-12-5.
[72] Gérard Wagener, Radu State, and Alexandre Dulaunoy. 2008. Malware behaviour
analysis. Journal in Computer Virology 4, 4 (2008), 279–287.
[73] Jeffrey Wilhelm and Tzi-cker Chiueh. 2007. A forced sampled execution approach
to kernel rootkit identification. In International Workshop on Recent Advances in
Intrusion Detection. Springer, 219–235.
[74] Michelle Y Wong and David Lie. 2018. Tackling runtime-based obfuscation in
Android with TIRO. In 27th USENIX Security Symposium (USENIX Security 18).
1247–1262.
[75] Wordpress. 2016. Wordpress Pluggable Functions. https://codex.wordpress.org/
PluggableFunctions. (2016). Accessed: 2019-08-25.
[76] Peter M Wrench and Barry V W Irwin. 2014. Towards a sandbox for the deob-
fuscation and dissection of PHP malware. In 2014 Information Security for South
Africa (ISSA). IEEE, 1–8.
[77] Peter M Wrench and Barry V W Irwin. 2015. Towards a PHP webshell taxonomy
using deobfuscation-assisted similarity analysis. ISSA (2015).
[78] Zhaoyan Xu, Jialong Zhang, Guofei Gu, and Zhiqiang Lin. 2014. Goldeneye: Effi-
ciently and effectively unveiling malware’s targeted environment. In International
Workshop on Recent Advances in Intrusion Detection. Springer, 22–45.
[79] Tianlong Yu, Vyas Sekar, Srinivasan Seshan, Yuvraj Agarwal, and Chenren Xu.
2015. Handling a trillion (unfixable) flaws on a billion devices: Rethinking network
security for the internet-of-things. In Proceedings of the 14th ACM Workshop on
Hot Topics in Networks. ACM, 5.
APPENDIX
A BEHAVIORAL ANALYSIS
Table 5 lists the most common potentially malicious functions
called by the malware samples, and their prevalence among the
malware samples. As apparent from the table, deobfuscation func-
tions (e.g., base64_decode, unpack, gzinflate), system and in-
terpreter inspection and modification functions (e.g., ini_set,
php_uname, set_time_limit), program execution functions (e.g.,
shell_exec, exec, system) and file system functions (e.g., file_
get_contents, fopen, mkdir, unlink) form the majority of these
functions. Two outliers are dl, which is used to load a dynamic
library, and mail, which can be used to send email, are also among
the top 20 frequently used potentially malicious functions.
Table 5: Most frequently used potentially malicious func-
tions and their prevalence in the Dataset A.
Function
ini_set
file_get_contents
base64_decode
php_uname
dl
fopen
mkdir
set_time_limit
mail
unlink
Count Function
3888
3788
1892
511
470
231
134
127
110
96
fopen-write
gethostbyaddr
system
getcwd
curl_init
curl_exec
shell_exec
gzinflate
unpack
exec
Count
84
82
82
76
70
70
40
24
23
22
A.1 File Extensions in the Dataset A (1 TB of
Real-world Websites)
In Section 4.2, we use a large corpus of 87 real-world infected
websites consisting of 3,225,403 files (approximately 1 TB). The
dataset includes various malware in the wild which show how
MalMax can perform against realistic advanced malware. We fur-
ther analyze file types in the dataset and their distributions by file
extensions.
Figure 11: Dataset Breakdown: File Extensions
Fig. 11 shows the composition of file extensions in the dataset.
The top 10 file extensions are php, json, png, bin, js, jpg, css,
svg, html, and gif.
A.2 PhpMalScan Analysis Result Details (MS
and PMFR values)
Fig. 12 shows PMFR and MS values for the 53 malware samples
and 10 synthesized samples. To make it easier to interpret, the
figure has multiplied the PMFR values by 4. Note that PhpMalScan
detects a sample as malware if PMFR value is higher than 5%. As it
is multiplied by 4 in the graph, PhpMalScan detects a sample as
malware if its PMFR or MS value in Fig. 12 is higher than 20. Note
that there is only one malware sample, m36, that PhpMalScan was
unable to detect. Both MS and PMFR are 0 in this case, implying
that our tool has been unable to uncover any malicious behavior.
Observations. First, a benign program may have a non-zero ma-
liciousness score (e.g., sb1 to sb5 in Fig. 12) because they emit
suspicious behavior such as sending an email. If a benign program
employs suspicious behavior in its majority and pervasively, the
maliciousness score can go beyond the threshold and cause a false
positive. However, it essentially means that the program does not
do any particular other tasks except for suspicious tasks, which is
rare in practice. Second, we find the combination of PMFR and MS
is effective in detecting malware because one has a better capability
in finding small, malicious programs while the other has a better
capability in finding large malware that has a specific malicious
segment. Specifically, for the malicious synthetic examples (sm1
to sm5), they either have a high PMFR score (sm1, sm3, sm4), or a
high MS value (sm2, sm5). In the case of sm1, which is a bruteforcer
attempting to extract the database server’s root password, the ma-
jority of activity is suspicious (i.e., looping over a dictionary of
passwords, trying each one in connecting to the database), and thus
it is marked as malicious. Attempting to connect to the database can
be benign on its own, but persisting on such attempts, especially
when it is accompanied by failure, can be deemed malicious. Also,
in the case of sm5 which is a spammer that uses a loop to send
hundreds of spam emails, there are no malicious functions (note
that mail() is benign but its repetition can be malicious, thus we
increase maliciousness score by 1 for each invocation). Since most
executed statements are the mail(), it is marked as malicious due
to the high MS value (i.e., 101).
B MULTI-ASPECT EXECUTION DETAILS
Counterfactual execution, multi-path execution [14], and forced
execution [23, 36, 53] share the same idea of forcibly exploring pos-
sible execution paths to cover as much code as possible. MalMax
is closer to forced execution techniques than multi-path execution
techniques as it forcibly drives execution into a branch even if the
branch condition is not satisfied. However, MalMax is different
from multi-path execution and forced execution in that MalMax
shares global artifacts (e.g., global variables, function/class/constant
definitions, etc.) between the isolated execution environments to
discover new dynamically generated code, particularly those cre-
ated via constructs such as eval and include that are commonly
used in PHP applications.
Algorithm. Alg. 1 provides a high-level algorithm of MalMax’s
analysis including counterfactual execution (Section 3.1, Lines 3-6)
and global resource sharing in cooperative isolated execution (Sec-
tion 3.2, Lines 7-14). Exercise is the core of MalMax that explores
and discovers program code and execution states. It has two inputs:
php25.59%json23.21%png12.22%bin6.34%js5.85%jpg5.34%css2.94%svg2.66%html1.74%gif1.53%Others12.58%Figure 12: PMFR and MS values from the Dataset A. We scale PMFR values by multiplying the values by 4 (5% threshold is at
20% in this graph). The red line essentially shows the threshold for both PMFR and MS.
Algorithm 1: High-level Algorithm of MalMax
1 procedure Exercise( IsolatedExec CurIE, BasicBlock BB )
for each instruction i ∈ BB do
if i is a Branch Instruction then
Exercise( CurIE, i.Taken-Branch )
NewIE ← CreateIsolatedExecution( i.Not-Taken-Branch )
Exercise( NewIE, i.Not-Taken-Branch )
for each unresolved artifact ua ∈ UA do
if i contains unresolved artifacts UA then
RA ← RA SearchGlobalArtifact( IE, ua )
for each isolated execution IE ∈ all isolated executions do
for each resolved artifact ra ∈ RA do
NewIE ← CreateIsolatedExecution( BB )
UpdateIsolatedExecution( NewIE, ra )
Exercise( NewIE, BB )
2
3
4
5
6