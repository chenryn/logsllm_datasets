𝑧,𝑗 𝑧(1)
𝜌(1)
1
𝑦 𝑗
𝜓𝑚∗,𝑖,𝑗
𝑗 ∈[𝑞]
𝑗 ∈[𝑞]
𝑗 ∈[𝑞]
1
𝑦 𝑗
𝜓𝑦,𝑗
𝜓𝑧,𝑗
𝑗
𝑗
𝑗 ∈[𝑞]
𝑗 ∈[𝑞]
𝑗 ∈[𝑞]
(4)
)
Now, by expanding the RHS and comparing coefficients it follows
that 𝜋𝑧𝜋𝑦 = 0, 𝜋𝑧𝜓𝑦,𝑗 = 0, 𝜋𝑦𝜓𝑧,𝑗 = 0, 𝜋𝑦𝜌(𝑏)
𝑧,𝑗 = 0 for all 𝑗 ∈ [𝑞],
𝑏 ∈ [2] and 𝜓𝑧,𝑗𝜓𝑦,𝑘 = 0 for all 𝑗, 𝑘 ∈ [𝑞]. This simplifies the RHS
𝜌(1)
𝑧,𝑗 𝜓𝑦,𝑘𝑧(1)
𝑗
1
𝑦𝑘
𝜌(2)
𝑧,𝑗 𝜓𝑦,𝑘𝑧(2)
𝑗
1
𝑦𝑘
(5)
𝑗
𝑧,𝑗 𝜓𝑦,𝑘 = 0 and 𝜌(2)
Now, we take a closer look at Equation (5) and Claim 1 tells us that
every 𝑧(𝑏)
, 𝑏 ∈ [2], has an equal number of 𝑦’s and 𝑥’s (respec-
tively 𝑢’s) in the numerator and consequently for all monomials
on the LHS there is one 𝑦 less than 𝑥’s (or 𝑢’s respectively). Con-
sequently, following the same argumentation as in [45] we obtain
that 𝜌(1)
𝑧,𝑗 𝜓𝑦,𝑘 = 0 for all 𝑗 ≠ 𝑘 (note that it may
be the case that either of 𝑧(1) or 𝑧(2) may not be present at all,
but one needs to be non-zero to represent a valid forgery. We will
consider the case where both are present subsequently, the other
cases are analogous). Furthermore, following the FHS15 argumen-
tation it follows that there is exactly one 𝑛 ∈ [𝑞] s.t. 𝜌(𝑏)
𝑧,𝑛 𝜓𝑦,𝑛 ≠ 0.
Consequently, we obtain a simplified version of Equation (5) as
𝑛
𝜌(1)
𝑧,𝑛𝜓𝑦,𝑛𝑧(1)
and substituting 𝑧(𝑏)
𝜌(1)
𝑧,𝑛𝜓𝑦,𝑛
𝜓𝑦,𝑛(𝜌(1)
∑︁
𝑛
1
𝑦𝑛
+ 𝜌(2)
𝑧,𝑛𝜓𝑦,𝑛𝑧(2)
𝑛
1
𝑦𝑛
∑︁
𝑖∈[ℓ]
𝑚𝑛,𝑖(𝑥𝑖 + 𝑢𝑖)
by its definition and simplification we obtain
𝑚𝑛,𝑖𝑥𝑖 + 𝜌(2)
𝑧,𝑛𝜓𝑦,𝑛
𝑚𝑛,𝑖𝑢𝑖 =
Now, plugging in 𝑚𝑛,𝑖 and setting 𝛼 = 𝜓𝑦,𝑛(𝜌(1)
𝑧,𝑛 + 𝜌(2)
𝑧,𝑛) we obtain:
𝑖∈[ℓ]
𝑧,𝑛 + 𝜌(2)
𝑧,𝑛) ∑︁
𝜋𝑚,𝑛,𝑖+ ∑︁
𝑖∈[ℓ]
𝜌(2)
𝑚,𝑛,𝑖,𝑘
𝑚,𝑛,𝑖,𝑘
𝜌(1)
𝑘 + ∑︁
𝑘∈[ 𝑗−1]
𝑧(2)
𝑘∈[ 𝑗−1]
𝑚∗,𝑖,𝑗 = 𝛼𝜌(1)
𝛼(cid:0) ∑︁
∑︁
𝑖∈[ℓ]
𝑘∈[ 𝑗−1]
𝑧(1)
𝑘 +
𝜓𝑚,𝑛,𝑖,𝑘
(cid:1)(𝑥𝑖 + 𝑢𝑖)
1
𝑦𝑘
and by equating coefficients with the LHS of Equation (4) we obtain
that 𝜋𝑚∗,𝑖 = 𝛼𝜋𝑚,𝑛,𝑖, 𝜌(1)
and
𝜓𝑚∗,𝑖,𝑗 = 𝛼𝜓𝑚,𝑛,𝑖,𝑘, whereas the forgery just represents a previously
queried message. Finally, the simulation error of the generic group
is identical to FHS15.
, 𝜌(2)
𝑚∗,𝑖,𝑗 = 𝛼𝜌(2)
𝑚,𝑛,𝑖,𝑘
𝑚,𝑛,𝑖,𝑘
C PROOFS FOR SECTION 4
C.1 Proof of Theorem 4.2
We will prove this theorem using a series of hybrid arguments. Let
asig∗ = (pk∗
, 𝜎∗
Attr) and Attr∗ be the values returned
by the adversary and nonce∗ be the value given to the adversary.
, Sig∗
SFPK
SFPK
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2022, Sig′
C.2 Proof of Theorem 4.3
We will prove this theorem using a series of hybrid arguments.
Let 𝑞HD denote the maximum number of queries made to the HD
oracle by the adversary. Let asig = (pk′
, 𝜎′
Attr) be the
SFPK
challenge signature given to the adversary.
H0 : This is the anonymity experiment.
H1 : We change the way the value 𝜎′
Attr
is computed inside oracle
OHShow, i.e. instead of randomizing the AAEQ signature
using ChgRep, we use the secret key isk∗ to generate a fresh
signature on pk′
H2 : We choose two distinct indexes 𝑘0, 𝑘1 ∈ [𝑞HD] and abort
the experiment if 𝑖0 ≠ 𝑘0 and 𝑖1 ≠ 𝑘1 where 𝑖0 ←$ I2D[ 𝑗0],
𝑖1 ←$ I2D[ 𝑗1] and 𝑗0, 𝑗1 were returned by the adversary.
SFPK
Lemma C.6. Hybrids H0 and H1 are indistinguishable assuming
.
SFPK
the AAEQ scheme perfectly adapts signatures.
Lemma C.7. The experiment is not aborted in H2 with probability
(1/𝑞HD)2.
Lemma C.8. An adversary that has non-negligible advantage against
the anonymity experiment in H2 can be used to break the class-hiding
property of SFPK signatures.
Proof. We will show this by constructing a reduction R which
is given ((sk0, pk0), (sk1, pk1), pk′) by the challenger and access to
an oracle that output valid SFPK signatures for public key pk′. The
reduction uses (sk0, pk0) and (sk1, pk1) to respectively simulate
the devices 𝑘0 and 𝑘1.
Finally, it receives ( 𝑗0, 𝑗1, Attr∗, nonce∗, isk∗, ipk∗, st) from the
adversary. Because we are in H2 we know that 𝑗0, 𝑗1 correspond
SFPK = pk′, uses
to devices 𝑘0, 𝑘1. The reduction now sets pk′
on message aid∗ =
it’s oracle to generate the signature Sig′
AIDGen(Attr∗, nonce∗) and creates 𝜎′
as per H2. The adversary
SFPK
ends the experiment by outputting 𝑏∗ which is also returned by
reduction. It is easy to see that in this case pk′ = pk𝑏 and the adver-
sary can be used this way to break the class-hiding property.
□
Attr
C.3 Proof of Theorem 4.4
The proof follows using a simple reduction. The key point to no-
tice is that there is only one honest device created in this ex-
periment and the reduction can use it’s own signing oracle to
get a SFPK signature and answer queries to the OCShow oracle.
What is more, since we require that aid∗ ∉ SN it follows that
for asig∗ = (pk∗
SFPK)
can be used by the reduction as a valid forgery. Note that in case
there exists a tuple (Attr, nonce) ≠ (Attr∗, nonce∗) for which aid∗ =
AIDGen(Attr, nonce) the reduction can return both pairs as a colli-
sion for AIDGen.
Attr) the tuple (aid∗, pk∗
, 𝜎∗
, Sig∗
, pk∗
SFPK
SFPK
SFPK
Moreover, let 𝑞HD denote the maximum number of queries made to
the HD oracle by the adversary and aid∗ = AIDGen(Attr∗, nonce∗).
H0 : This is the anonymity experiment.
H1 : We change the way we generate the keys inside the OHD(𝑖)
oracle. Instead of SFPK.KeyGen we use trapdoor generation
SFPK.TKGen and retain the trapdoor 𝛿𝑖.
H2 : We abort the experiment if there is a collision for aid∗, i.e. if
there was a query for a tuple (Attr, nonce) ≠ (Attr∗, nonce∗)
for which aid∗ = AIDGen(Attr, nonce).
SFPK) = 0 for
all 𝑗 ∈ [𝑞HD] and 𝑗 ∈ HD, i.e. we do not abort if the SFPK
public key is in a relation with an honest device public key.
H4 : We choose an index 𝑗 ∈ [𝑞HD] and we abort the experiment
if SFPK.ChkRep(𝛿 𝑗 , pk∗
SFPK) = 0, i.e. we chose a specific
honest device.
H3 : We abort the experiment if SFPK.ChkRep(𝛿 𝑗 , pk∗
SFPK.TKGen produce key pairs with identical distribution.
Lemma C.1. Hybrids H0 and H1 are indistinguishable.
Proof. For the SFPK scheme we have that SFPK.KeyGen and
□
Lemma C.2. The changes made in hybridH2 lowers the adversaries
advantage in the unforgeability experiment only by a negligible frac-
tion which is at most the advantage of breaking collision-resistance
of AIDGen.
Lemma C.3. The changes made in hybrid H3 lowers the adver-
saries advantage in the unforgeability experiment only by a negligible
fraction which is at most the advantage of an adversary breaking the
unforgeability of the AAEQ scheme.
Proof. We will show this proof via a simple reduction. The
idea for the reduction is to instead of using the AKGen and Sign
algorithm inside Issue to generate credentials cred for devices the
reduction will use its AAEQ signing query. In the end, the adversary
returns (Attr∗, asig∗ = (pk∗
, 𝜎∗
Attr)) which contains a
AAEQ forgery for message (pk∗
, Attr∗).
Note that because we only abort if the SFPK public key pkSFPK
is not in a relation with any of the honest device and by definition
this excludes the usage of all corrupted attribute. Thus, we know
that Attr∗ was never queried together with an element from the
class [pk∗
□
SFPK]R to the AAEQ signing oracle.
, Sig∗
SFPK
SFPK
SFPK
Lemma C.4. Hybrid H4 does not abort with prob. 1/𝑞HD.
Lemma C.5. An adversary that has non-negligible advantage against
the unforgeability experiment in H4 can be used to break the unforge-
ability of the SFPK scheme.
Proof. We will show this proof via a simple reduction. The
idea is for the reduction to simulate the 𝑗-the device using the
SFPK signing oracle. In other words, instead of running algorithm
CObtain, CShow for the secret device key DSK[ 𝑗], the reduction
asks the oracle for the corresponding signature.
Finally the adversary output asig∗ for which we know that
SFPK.ChkRep(𝛿 𝑗 , pk∗
cor-
responds to the device that the reduction simulated using the SFPK
challenges. Thus by returning (pk∗
SFPK) the reduction
outputs a valid forgery against the SFPK unforgeability experi-
ment.
□
SFPK) = 1, i.e. that the signature Sig∗
, aid∗, Sig∗
SFPK
SFPK
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2023