(cid:4)
(cid:4)
(cid:4)C, O(cid:5)
(cid:4)C, O(cid:5)
(cid:4)C, O(cid:5)
Y 0
p =
Y 1
p =
Yp =
but dropping the right-
(cid:4)
(cid:4)
(cid:4)
p
p
in place of YS , YS (cid:2) , and YS∪S (cid:2) , respectively, to perform
the calculations (9)–(10). And, of course, the optimization in
Sec. IV-A1 can be used in conjunction with this approach,
e.g., computing
(cid:16)
(cid:17)
Z 0
p, ˆp =
(cid:4)C, O(cid:5)
p ∧ ˆH ˆb
((cid:4)C, O(cid:5)) = ˆp
(13)
for a different, random hash function ˆH ˆb
ˆp ∈ {0, 1}ˆb
Sec. IV-A1 to estimate
and random preﬁx
. We then use the algorithm summarized in
.
p
Two more points about this algorithm warrant emphasis:
p, ˆp and Z 1
• Because our algorithm explicitly enumerates the contents of
each Z 0
p, ˆp, when leakage is detected (i.e., Jn > 0
for some n) these sets can be used to identify (cid:4)C, O(cid:5) pairs
that are in Y 0
p . These examples can guide
developers in understanding the reason for the leakage and
in mitigating the problem.
p or Y 1
p \ Y 1
p \ Y 0
• Because the number of secrets with a random length-b hash
, for the rest of
preﬁx p is only of expected size n = |S| /2b
(cid:3)(cid:3)(cid:3) (cid:4)C, O(cid:5) ∈ Y 0
(cid:3)(cid:3)Y 0
(cid:3)(cid:3)
519
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:23 UTC from IEEE Xplore.  Restrictions apply. 
the paper we use a deﬁnition of Jn as in (2) but weakened
so that |S| and |S(cid:2)| equal n in expectation.
B. Hash-based model counting for ˆJn
The calculations of the previous section require some mod-
iﬁcations when we are instead computing ˆJn for n = |S| /2b
.
Similar to the previous section, we can use Xp for p ∈
{0, 1}b−1 in place of XS ∪ XS (cid:2) = XS∪S (cid:2) . However, to
, we need a different
estimate
(cid:3)(cid:3)(cid:3) ˆXS,S (cid:2)
⎧⎪⎪⎨
⎪⎪⎩(cid:4)C, O, I(cid:5)
(cid:3)(cid:3)(cid:3) for a random S and S(cid:2)
(cid:3)(cid:3)(cid:3) ˆXS,S (cid:2)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
∃S, S(cid:2), I(cid:2) : Πproc(C, O, I, S) ∧
Πproc(C, O, I(cid:2), S(cid:2)) ∧
H b(S) = p||0 ∧
H b(S(cid:2)) = p||1
(cid:3)(cid:3)(cid:3) by estimating the
⎫⎪⎪⎬
⎪⎪⎭
approach. Speciﬁcally, we calculate
size of
ˆXp =
since (cid:4)C, O, I(cid:5) ∈ ˆXp iff (cid:4)C, O, I(cid:5) ∈ X 0
p ∩Y 1
p .
This method does come at considerably greater computational
cost, however, due to the duplication of the constraints Πproc
in the speciﬁcation of this set. We will demonstrate this in our
case studies in Sec. VI.
p and (cid:4)C, O(cid:5) ∈ Y 0
C. Parameter settings for computing Jn and ˆJn
In the hash-based model counting described above, we
use the 3-wise independent hash functions suggested by
Chakraborty et al. [4], and due to the large number of
XOR clauses in the resulting hash constraints, we use
CryptoMiniSAT 5.0 [46] to enumerate the elements of
each Zp, ˆp. To reduce the complexity of the hash constraints,
we concretize their constant bits to minimize the independent
support [47] before generating XOR clauses. Multiple esti-
mates of the form in (11), for various values of b (in (11),
or respectively ˆb in (13)), as prescribed by Chakraborty et al.,
are used to estimate |Yp|. We parameterized this algorithm
with error  = 0.45 and conﬁdence either δ = 0.99 in Sec. V
or δ = 0.92 in Sec. VI,5 for which 50 or 5 (cid:4)b, p, ˆp(cid:5) triples
satisfying (12) sufﬁced, respectively.
We estimate Jn as the sample mean of J(S, S(cid:2)) for sampled
pairs S, S(cid:2)
of expected size n (i.e., deﬁned by a p ∈ {0, 1}b−1
for n = |S| /2b
). For each n we computed Jn using a number
of sampled pairs S, S(cid:2)
equal to the larger of 100 and the
minimum needed so that the standard error was within 5% of
the sample mean. In addition, since Jn is only an estimate
and so is subject to error and since that error is inﬂuential
in the calculation of ηmax or ηmin especially when n is small,
we round any Jn ≤ 0.025 down to zero when calculating the
measures. ˆJn is computed similarly.
D. Logical Postconditions for Multiple Procedure Executions
In some scenarios it is insightful to observe the behavior of
Jn for a procedure proc when it is executed multiple times.
That is, consider a scenario in which proc is executed r times,
5The error bound of Chakroborty et al. is conservative; e.g., the results
for 95 benchmarks showed less than 5% error in practice even when using
 = 0.75 [4].
possibly with relationships among the outputs of one execution
and the inputs of another, or simply among the inputs to
different executions. Suppose these executions are denoted
O1 ← proc(C1, I1, S1)
O2 ← proc(C2, I2, S2)
· · ·
Or ← proc(Cr, Ir, Sr)
proc (i.e., Πj
and that the postcondition of the j-th invocation in isolation is
denoted Πj
proc is simply Πproc over the variables
represented in Cj , Ij , Sj , and Oj ). Then the relationships
among inputs and outputs can be described using additional,
manually constructed constraints Γ1...r
proc. For example, if the
secret
then
Γ1...r
proc would include the statement that ‘secret’ has the same
value in each execution (i.e., S1(‘secret’) = S2(‘secret’) =
. . . = Sr(‘secret’)). Repeating our analysis for the “procedure”
represented by the postcondition
input to each execution of proc is the same,
⎛
⎝ r(cid:27)
⎞
⎠ ∧ Γ1...r
proc
j
Π
proc
j=1
can reveal leakage that increases as the procedure is executed
multiple times. We will see an example in Sec. VI.
V. MICROBENCHMARK EVALUATION
In this section we evaluate our methodology on artiﬁcially
small examples to illustrate its features.
A. Leaking more about secret values vs. leaking about more
secret values
In Sec. III-A, we showed through an idealized example how
a small n is more useful for evaluating the number of secrets
about which information leaks, whereas a large n is more
useful for evaluating the amount of information leaked about
these secrets. Now we will use two simple procedures with
a controllable constant M to quantitatively demonstrate the
necessity of varying n and the correct usage of ηmin and ηmax.
The ﬁrst procedure, shown in Fig. 4(a), returns the secret
value if it is divisible by a constant M and returns zero
otherwise, where both S(‘secret’) and M are 32-bit integers.
This procedure leaks the same amount of information (the
whole secret) about a larger number of secret values if M is
decreased. The behavior of Jn shown in Fig. 4(b) is consistent
with this observation. Speciﬁcally, different values of M
induce curves for Jn that differ primarily in the minimum
value of n where Jn is large. This behavior is also seen in the
value of ηmin in Fig. 4(c), where ηmin ranges from ηmin ≈ 0 at
M = 231 to ηmin = 1 at M = 1.
Contrast this case with the procedure shown in Fig. 5(a),
which returns the residue class of the secret value modulo
a constant value M . As such, as M is increased, more
information about each secret is leaked. This is demonstrated
in Fig. 5(b), where the curves for different values of M
differ in primarily in the maximum value n at which Jn is
520
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:23 UTC from IEEE Xplore.  Restrictions apply. 
proc (C, I, S)
if (S(‘secret’) mod M = 0)
O(‘result’) ← S(‘secret’)
else
O(‘result’) ← 0
return O
n
J
1
0.8
0.6
0.4
0.2
0
0
M =1
M =4
M =64
M =210
M =216
M =231
4
8
12
16
log2 n
20
24
28
32
M log2 ηmin
log2 ηmax
1
4
64
210
216
231
0
−0.74
−4.8
−8.8
−15
−30
0
0
0
0
0
−0.67
(a) Procedure
(c) ηmin and ηmax for different M
Fig. 4: A procedure that leaks the same amount of information about more secrets as M is decreased (see Sec. V-A)
(b) Jn for different n and M
proc (C, I, S)
O(‘result’) ← S(‘secret’) mod M
return O
n
J
1
0.8
0.6
0.4
0.2
0
0
M =1
M =4
M =64
M =210
M =216
M =231
M log2 ηmin
log2 ηmax
4
8
12
16
log2 n
20
24
28
32
nan
−0.6
−0.0
−0.0
−0.0
0.0
1
4
64
210
216
231
“nan” denotes “not a number,” i.e., ηmin = 0
or ηmax = 0
nan
−30.1
−25.5
−21.8
−15.6
−0.8
(a) Procedure
(b) Jn for different n and M
(c) ηmin and ηmax for different M
Fig. 5: A procedure that leaks more information about the same secret values as M is increased (see Sec. V-A)
proc (C, I, S)
if (S(‘secret’) mod M
= C(‘test’))
O(‘result’) ← 1
else
O(‘result’) ← 0
return O
M =2
M =4
M =8
M =64
M =210
M =229
M =231
0.4
n
J
0.2
0
0
4
8
12
16
log2 n
20
24
28
32
M
log2 ηmin
log2 ηmax
r = 1 r = 2 r = 4 r = 6 r = 1 r = 2 r = 4 r = 6
2 −1.2 −1.1 −1.2 −1.1 −31.4 −31.3 −31.2 −31.3
4 −1.7 −0.9 −0.6 −0.4 −31.0 −30.2 −29.4 −29.0
8 −2.8 −1.7 −0.9 −0.6 −30.6 −29.3 −28.8 −28.3
64 −7.1 −5.4 −3.9 −2.9 −27.1 −25.9 −25.2 −25.1
210 −11.1 −9.5 −8.2 −7.5 −22.8 −22.0 −21.5 −21.1
229 −29.9 −28.9 −27.1 −26.5 −3.4 −2.7 −2.1 −1.9
231 −31.0 −30.2 −28.8 −28.2 −1.2 −0.7 −0.4 −0.2
(a) Procedure
(b) Jn for different n
(c) ηmin and ηmax for different M
Fig. 6: Leakage of procedure that checks a guess of secret’s residue class modulo M (see Sec. V-A–V-B)
large. Similarly, ηmax ranges from ηmax = 0 at M = 1 to
ηmax ≈ 2−0.8 ≈ 0.57 at M = 231.
An example that blends these the previous two examples
is show in in Fig. 6(a); here the procedure returns 1 if
S(‘secret’) mod M = C(‘test’) and 0 otherwise, where M is a
32-bit constant. As such, this procedure leaks a lot about a few
secret values when M is large, and a little about many secret
values when M is small. As shown in the r = 1 columns of
Fig. 6(c), ηmin and ηmax monotonically decreases and increase,
respectively, as M grows.
B. Leaking more over multiple rounds
A second way to view the example in Fig. 6 is to con-