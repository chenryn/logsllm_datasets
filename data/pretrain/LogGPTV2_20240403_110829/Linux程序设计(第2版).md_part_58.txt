Continuing.
Breakpoint 1, 8ort [a=0x8049684,n=31 at Gebug4.c:20
1:array[0]5（{data=*5ohn.000，key -2).{
20
for(: i ,key =4).{
, key = 1).
data = *neil*,
'\000
data = *rick'.
\000,key=5))
Breakpoint 1, sort
（a=0x8049684,n=2} at debug4.c:20
1:array[0]5{{data*john,\000,key 1}.{
times>,key=2).{
data =*neil·'
'.1tq. ep
\000
.000\,
, key = 3).
data = *rick',
\000,key=5)}
,key=4).(
array[0]-{john,
array[1]={alex,
2}
array[2]
-(bill
array[3]
={neil,
3
array14) - (rick.
4)
51
Progran exited xith code 025.
(gdb)
加入java编程群：524621833
---
## Page 305
第9章调试与纠错
287
gdb报告这个程序在退出时有一个不常见的退出码。这是因为程序本身没有调用exit，没有
从main函数返回一个有意义的值。这个例子里的退出码没有什么实际意义，而要想提供--个有
意义的退出码，就应该调用exit。
程序执行外层循环的次数少子我们的预期值：我们看到循环终止条件中使用的参数n的值在
每次到达断点的时候都有所减少。这就意味着循环没有执行到足够的次数。问题出在第30行对
变量n做的减法操作上：
/30*/n--;
这是一个优化程序的措施，它是这样考虑的：在每一次外层循环的末尾，数组array中最大
的元素将被放到最底部，还需要排序的元素也就相应地减少了。但是，正如我们看到的，这个
优化措施影响到了外层循环，并引起了问题。最简单的修补办法（当然还有其他办法）是删掉
引起问题的这一行。我们用调试器打上这个“补丁”、然后再看看这个改动能否解决问题。
9.3.7用调试器打补丁
我们已经看到我们能够通过调试器设置断点和查看变量的取值。把断点和程序动作结合起
来就能检查程序漏洞的某个“补丁”是否有效，面这样做并没有对源代码做实际修改，也不必
重新编译。在我们的例子里，我们需要在程序的第30行中断程序，对变量n做加法。这样，当程
序执行到第30行的时候，n的值其实并没有发生变化。
我们重新开始执行这个程序。首先，我们要删除刚才设置的断点和display命令。我们可以
用info命令查看自己曾经设置过哪些断点和display命令。如下所示：
(gdb)info diwplay
Auto-display expressions now in effect:
Nun Rnb Expression
(gdb)info break
Yarray[o] θ5
Num Type
Disp Enb Address
1
breakpoint
keep y0x080483t1 in sort at debug4.c:20
What
breakpoint already hit 4 tines
cont
我们可以禁止这些设置，也可以直接删除掉它们。如果禁止它们，我们就能在今后必要的
时候重新激活这些设置，如下所示：
(gdb） disable brak 1
(gdb)disable display 1
Breakpoint 2 at 0x8048570: file debug4.c, 1ine 30.
[gdb) break 30
Type comands for when bzeakpoint 2 is hit. one per line.
(gdo）cond2
>set varlablo n=n+1
>cont
>end
(gdb)run
Starting program: /home/nei1/debug4
Breakpoint 2. sort (a=0x8049684, n=5+ at debug4.c:3G
30
30/
n-;
Breakpoint 2. sort (a=0x8049684, n=5) at debug4.c:30
加入java编程群：524621833
---
## Page 306
288Linux程序设计
30
30*/
n-- :
Bzeakpoint 2. sort (a=0x8049684, n=51 at debug4.c:30
30
30
n--;
Breakpoint 2. sort [a=0x8049684, n=5) at debug4.:30
0
/.o5
n=-;
Breakpoint 2. sort (a=0x8049684, n=5) at debug4.c:30
array[c] = {aiex. 1)
SG
30
I-=;
array[2] -[bi11.
array[1]• (john,
z
array(s]•[neil.4)
array(4] = [rick, 5)
Progrem exited with code 025,
(gDB
程序一直执行到结束并给出了正确的结果。我们现在可以对源代码进行修改并转移到用更
多数据对它进行测试的阶段去了。
9.3.8深入学习gdb
GNU调试器的功能是非常强大的，它可以向我们提供许多与执行中的程序的内部状态有关
的信息。在支持硬件断点功能的系统上，你可以通过gdb实时监控变量的变化情况。硬件断点是
某些CPU提供的功能，这些处理器能够在特定事件发生时自动停止运行，这些事件通常是对某
个给定内存区间的一个访问动作。gdb也有类似的表达式“监视”功能：即不管计算发生在程序
的什么地方，只要表达式取了一个特定的值，gdb就会自动停止程序的运行；但这个功能会增加
系统性能方面的负担。
设置断点的时候还可以给它加上计数和条件，经过预定计数之后或条件满足时才触发它们。
gdb还能把自已附着到己经运行着的程序上。这对调试客户/服务器系统很有帮助，因为你能
够在异常服务器进程正在运行的时候对它进行调试，不必让它停下来，过后再启动它。编译程
程序代码的先后联序进行调整；因此，在对代码做单步调试的时候，原来连贯的源代码就不免
要跳来转去的了。
gdb遵守GNU公共许可证的条款规定，大多数UNIX系统都能够支持它。我们强烈建议读者
掌掘这一工具。
9.4其他调试工具
除了gdb等层出不穷的调试器，UNIX系统一般还提供了大量能够用来帮助完成调试工作的
其他工具。其中有的提供的是关于程序的静态信息，另外一些则能够提供动态分析。
静态分析只能从源代码人手提供关于程序本身的资料。ctags、cxref和cflow等就是一些源文
件的静态分析程序，它们能够提供函数调用和函数所在位置等方面的有用信息。
动态分析提供的是与程序运行过程中的行为有关的信息。prof个gprof等就是一些这样的程
序，它们提供的信息包括已经执行了哪些函数，执行时间有多长等。
加入jaVa编程群：524621833
---
## Page 307
第9章调试与纠错
289
我们下面将对几个这类工具及其输出进行介绍。虽然这些工具都有可以免费获得的版本，
但并不是在每个系统都能找到它们。
9.4.1lint：清理程序中的“垃圾”
早期的UNIX系统提供了有关名为int的工具。从本质上看，它只是C语言编译器的一个前端，
但增加了一些“常识”性的测试功能，能够报告出一些异常的情况。它能检测出来的异常情况
包括：使用了未经赋值的变量、函数的参数不够或类型不对等。
比较先进的C语言编译器也能产生类似的警告信息，这是以编译过程的性能为代价换来的。
lint本身已经落后于C语言的标准化工作了。因为这个工具是在一个早期C语言编译器的基础上开
发出来的，所以与ANSI语法的配合不是很理想。Iint有许多种适用于UNIX的商业版本，并且在
因特网上至少有一种是专为Linux开发的，它就是Larch。Larch是MIT（麻省理工学院）为早期
技术规范开发工具软件这一项目的组成部分。与lint类似的工具还有lclint，它能够提供有用的代
码审查注释。
Iclint呵v在网址http:/www.sds.1cs.mit.edu/Larch,上我到。
我们以刚才调试过的示例程序的一个前期版本为例来说明lclint的语法。下面是lclint运行时
给出的输出：
Slclint debugo.c
LCLint 1.4c - Fri Oct 13 10:28:08 MET 1995
debug0.e:14.2: 01d style function dec1arar 1nn.
debug0.c:20.24:Unrecognized identifier:n
lebug0 .c:15.17 :
*Processing Paraas
debug0.c:20.35:Variable s used before set
debug0.c:32.14:Path with ne r
debug0.c:36,14:Return value （type int) ignored: sort（array， 5)
return in function declared to return int
debug0.c:37,14:Path with no return in function declared to return int
Finisbed LcLint checking - 8 code errors found
专
lclint工具报告有程序里有老式的（非ANSI标准）函数定义、函数返回类型和真正返回的值
（或者没有返回值）不一致。这些其实并不会影响到程序的操作，但应该引起程序员的注意。
它还找出了两个真正的漏洞，这两个漏洞出现下面这段代码里：
/*18
int 8;
*/
for(: i < n & s != C; i++) 1
S =0:
lclint发现第20行使用的变量s没有经过初始化，井且它认为操作符“&”应该是一个更常见
的“&&”操作符。在上面这段代码里，“&”操作符改变了测试的含义，确实是这个程序存在的
个问题。
目的故意放在那里的，但在程序设计实践里，这样的错误可以说是屡见不鲜。
加入jaVa编程群：524621833
---
## Page 308
290
Linux程序设计
9.4.2函数调用工具
ctags、cxref和xflow这三个工具构成了X/Open技术规范的一部分内容，因此，只要是具备软
件开发能力的UNIX系统，就会有这三个工具。
这些工具，包括本章介绍的其他一些工具可能没有被包括在你Linux发行版本里。
如果是这样，你可能会去因特网上查找它们。一个比较好的（用来查找支持RPM软件
包格式的Linux发行版本）出发点是http:/rufus.w3.org/linux/RPM。
1.ctags程序
clags程序的作用是为程序中的各种函数创建一个索引。每个函数对应一个清单，清单里列
出了它在程序中的调用位置，就象书本的索引。下面是它的语法定义：
ctags [-a][-f filename ]sourcefile sourcefile...
ctags-x sourcefile sourcefile...
在缺省的情况下，ctags将在当前子目录里创建出一个名为tags的文件来，在任一源文件里声
明过的每一个函数都会出现在这个文件里，文件的格式是下面这样的文本行：
announce
app_ui.c
/^static void announce(void) /
文件中每一行的构成是这样的：一个函数名、声明该函数的文件、一个可以用来在文件
里查找该函数定义的规则表达式。Emacs等编辑器可以利用这类文件帮助程序员对源代码进
行巡查。
类似格式的清单来：
find_cat
403 app_ui.c
static cde_entry find_cat
用“-ffilename”选项可以把这些输出重定向到另一个不同的文件去；而“-a”选项可以把
它追加到一个现有文件的末尾。
2.cxref程序
cxref程序对C语言源代码进行分析，最终将生成一个交叉引用表。它能够查到每个记号（变
量、“#define”常数定义、函数）都在程序里的哪些地方出过。它生成的是一个经过排序的清
单，记号的定义地点用一个星号（*）做标记，如下所示：
SYMBOL
FILE
LINE
BASENID
BINSIZE
prog.c
：1 1
*12
*96
'boxd
124
126
6T
198
199
146
206
156166
BUFMAX
BUFSI2
/usr/include/stdio.h