τ for P|Fcrypto is a polynomial-time computable, partial function
that maps every sequence α of conﬁgurations of an instance of a
machine Mr in P to an SID (which is an arbitrary bit string) or
⊥. For every environment E, (partial) run ρ of E|P|Fcrypto, and
every user (p, lsid, r), we deﬁne τ(p,lsid,r)(ρ) := τ(α) where α is the
projection of ρ to the sequence of conﬁgurations of the machine Mr
with PID p and LSID lsid. We say that (p, lsid, r) and (p(cid:48), lsid(cid:48)
, r(cid:48))
are partners (or belong to the same session) in a (partial) run ρ if
τ(p,lsid,r)(ρ) = τ(p(cid:48),lsid(cid:48),r(cid:48))(ρ) (cid:44) ⊥.
We say that τ is valid for P if, for every environment E for
P|Fcrypto, the following holds with overwhelming probability (the
probability is taken over runs ρ of E|P|Fcrypto): For every user
(p, lsid, r) in ρ, the following conditions are satisﬁed. i) Once an
SID is assigned, it is ﬁxed, i.e., if τ(p,lsid,r)(ρ(cid:48)(cid:48)) (cid:44) ⊥, then it holds
τ(p,lsid,r)(ρ(cid:48)) = τ(p,lsid,r)(ρ(cid:48)(cid:48)) for every preﬁx ρ(cid:48) of ρ and every pre-
ﬁx ρ(cid:48)(cid:48) of ρ(cid:48).
ii) Corrupted users do not belong to sessions, i.e.,
if (p, lsid, r) is corrupted in ρ (i.e., the ﬂag corrupted is set to
true in the corresponding instances of Mr), then τ(p,lsid,r)(ρ) = ⊥.
iii) Every session contains at most one user per role, i.e., for ev-
ery partner (p(cid:48), lsid(cid:48)
, r(cid:48)) of (p, lsid, r) in ρ, it holds that r (cid:44) r(cid:48) or
(p(cid:48), lsid(cid:48)
, r(cid:48)) = (p, lsid, r).
In practice, partnering functions are typically very simple. In our
case studies (Section 5), we use conceptually the same partnering
function for all protocols; basically partners are determined based
on the exchanged nonces.
Construction and Destruction Requests. We call an encryption,
MAC, and sign request (for Fcrypto by an instance Mr of P, i.e., a
user) a construction request and a decryption, MAC veriﬁcation,
and signature veriﬁcation request a destruction request.
Now, roughly speaking, implicit disjointness says that whenever
some user sends a destruction request, then the user who sent the
“corresponding” construction request belongs to the same session
according to τ. This formulation is, however, too strong. For
example, an adversary could send a ciphertext coming from one
session to a diﬀerent session where it is successfully decrypted.
But further inspection of the plaintext might lead to the rejection
of the message (e.g., because excepted nonces did not appear or
MAC/signature veriﬁcation failed). We therefore need to introduce
the notion of a successful destruction request. For this purpose, we
also introduce what we call tests.
Tests and Successful Destruction Requests. We imagine that a
user (p, lsid, r) (more precisely, the corresponding instance of Mr)
after every destruction request runs some deterministic algorithm
test which outputs accept or reject, where, besides the response
received, the run of test may depend on and may even modify the
state of (p, lsid, r). We require that test satisﬁes the following con-
ditions: If the destruction request is a MAC/signature veriﬁcation
2The concept of partnering functions has been used to deﬁne se-
curity in game-based deﬁnitions, which led to discussions whether
the obtained security notions are reasonable [4, 5, 3, 9, 13, 17].
Here, we use partnering functions as part of our criterion (implicit
disjointness) but not as part of the security deﬁnition itself; security
means realizing an ideal functionality (see Theorem 4).
request, then test simply outputs the result of the veriﬁcation. If
the destruction request is a decryption request, but decryption failed
(i.e., Fcrypto returned an error message), then test returns reject.
Otherwise, if decryption did not fail, and hence, a plaintext was re-
turned, test is free to output accept or reject. In the latter case—
reject—, we require the state of (p, lsid, r) to be the same as if de-
cryption had failed (i.e., as if Fcrypto had returned an error message)
in the ﬁrst place; this ensures that the state of (p, lsid, r) does not
depend on the plaintext that was returned. The algorithm test may
itself make destruction requests (but no construction requests), e.g.,
decrypt nested ciphertexts or verify embedded MACs/signatures,
which are subject to the same constraints. Also, key generation and
key derivation are allowed within a test. The requirements on test
reﬂect what protocols typically do (see Section 5.2 for an example).
Now, we say that a destruction request is accepted if the test
performed after the request returns accept. We say that it is ideal if
the key used in the destruction request is marked unknown in Fcrypto
or is an uncorrupted public/private key in Fcrypto and, in case of a
decryption request, the ciphertext in that request is stored in Fcrypto
(and hence, it was produced by Fcrypto and the corresponding stored
plaintext is returned).
Correspondence Between Construction and Destruction Requests.
We now deﬁne when a construction request corresponds to a de-
struction request. Let ρ be a run of the system E|P|Fcrypto and
let mc and md be construction and destruction request, respectively,
such that mc was sent by some instance to Fcrypto before md was
sent by some (possibly other) instance to Fcrypto in ρ. Then, we
say that mc corresponds to md in ρ if i) mc is an encryption and md
a decryption request under the same key (for public-key encryp-
tion/decryption, under corresponding public/private keys) such that
the ciphertext in the response to mc from Fcrypto coincides with the
ciphertext in md, ii) mc is a MAC/signature and md a MAC/sig-
nature veriﬁcation request under the same key/corresponding keys
such that the message in mc coincides with the message in md (the
MACs/signatures do not need to coincide).
Explicitly Shared (Symmetric) Keys. For implicit disjointness, we
only impose restrictions on what we call explicitly shared (symmet-
ric) keys. These are pre-shared symmetric keys or keys (directly or
indirectly) derived from such keys in diﬀerent sessions with the
same seed. We note that in most protocols pre-shared keys are the
only explicitly shared keys since derived keys are typically derived
from seeds that are unique to the session.
Definition 2
(implicit disjointness). Let P be a multi-session
protocol that uses Fcrypto and τ be a valid partnering function for
P|Fcrypto. Then, P satisﬁes implicit (session) disjointness w.r.t. τ
if for every environment E for P|Fcrypto the following holds with
overwhelming probability for runs ρ of E|P|Fcrypto:
(a) Every explicitly shared key is either always marked unknown
or always marked known in Fcrypto.
(b) Whenever some user (p, lsid, r) (i.e., an instance of Mr) per-
formed an accepted and ideal destruction request with an ex-
plicitly shared key or a public/private key at some point in ρ, say
after the partial run ρ(cid:48), then there exists some user (p(cid:48), lsid(cid:48)
, r(cid:48))
that has sent a corresponding construction request such that
both users are partners or both users are corrupted in ρ(cid:48).
Most protocols can easily be seen to satisfy (a) because explicitly
shared keys are typically not sent around (i.e., encrypted by other
keys), and hence, since they can be corrupted upon generation only,
they are either corrupted (i.e., always known) or always unknown.
As already mentioned, our case studies (Section 5) demonstrate that
47(b) too is typically satisﬁed by real-world protocols and can easily
be checked. We note that (b) can be interpreted as a speciﬁc cor-
respondence assertion, and it might be possible to check (b) using
automated techniques, such as CryptoVerif [6].
4.3 The Joint State Composition Theorem
Without Pre-Established SIDs
In this section, we present our joint state composition theorem.
To be able to prove this theorem, we need to restrict the class of
simulators used to prove that P|Fcrypto realizes F in the single-
session case. For this purpose, similarly to Section 3.3, we de-
ﬁne the following simulation relation, where τ is a valid partnering
function for P|Fcrypto and F is a multi-session local-SID function-
ality: We say that P|Fcrypto single-session realizes F w.r.t. τ (de-
noted by Fsingle |P|Fcrypto ≤τ Fsingle |F ) if i) Fsingle |P|Fcrypto ≤
Fsingle |F , i.e., according to Deﬁnition 1, there exists a simula-
tor Simτ such that for all E it holds that E| Fsingle |P| Fcrypto ≡
E| Simτ | Fsingle |F , and ii) Simτ is a machine which operators in
two stages: Analogously to the simulators deﬁned in Section 3.3,
in the ﬁrst stage Simτ emulates the system P|Fcrypto. Just as in Sec-
tion 3.3, Simτ enters its second stage, in which Simτ is unrestricted,
if an emulated instance of Mr in P set its corrupted ﬂag to true. In
Section 3.3, simulators also entered the second stage if a session-
create message (addressed to F (cid:48)) was received. Such messages
Instead, whenever activated, Simτ computes
do not occur here.
τ(αr) for all r ≤ n, where αr is the current sequence of conﬁgu-
rations of the emulated instance of Mr. If τ signals a session, i.e.,
τ(α1) = ··· = τ(αn) (cid:44) ⊥, then Simτ enters its second stage, in
which it is unrestricted.
Analogously to Section 3.3, we can observe that the only restric-
tion we put on Simτ is that it emulates the real protocol in its ﬁrst
stage. As already argued in Section 3.3, this appears to be unavoid-
able and does not seem to be a restriction in practice.
We are now ready to present our joint state composition theorem,
with Fcrypto serving as the joint state. Since our theorem does not as-
sume pre-established SIDs, protocols analyzed using this theorem
do not need to be modify/idealize by preﬁxing SIDs to messages.
The usage of our theorem is discussed in more detail in Section 5.
Theorem 4. Let F be a multi-session local-SID functionality
and let P be a multi-session protocol that uses Fcrypto and satisﬁes
implicit disjointness w.r.t. τ.
If Fsingle |P|Fcrypto ≤τ Fsingle |F , then P|Fcrypto ≤ F .
Proof sketch. We ﬁrst construct a machine Qτ which simulates
P|Fcrypto except that it uses a diﬀerent copy of Fcrypto for every
session (according to τ). Using implicit disjointness, we can show
that E|P|Fcrypto ≡ E|Qτ for every environment E. We then show
that Qτ realizes F , using Fsingle |P|Fcrypto ≤τ Fsingle |F .
5. APPLICATIONS
In this section, we discuss, using key exchange and secure chan-
nels as an example, how Theorems 3 and 4 can be used to analyze
protocols in a modular and faithful way. While our discussion fo-
cuses on the analysis of properties of real-world security protocols,
our theorems should be useful beyond this domain.
5.1 Proving Security of Key Exchange and Se-
cure Channel Protocols
We consider a standard secure channel ideal functionality Fsc
and an ideal functionality Fkey-use for key usability. The latter func-
tionality, which is inspired by the notion of key usability proposed
in [14], is new and of independent interest. It is very similar to
a standard key exchange functionality. However, parties do not
obtain the actual exchanged key but only a pointer to this key.
They can then use this key to perform ideal cryptographic oper-
ations, e.g., encryption, MACing, key derivation, etc., similarly
to Fcrypto. Compared to the standard key exchange functionality,
Fkey-use has two big advantages: i) One can reason about the ses-
sion key (and keys derived from it) still in an ideal way, which
greatly simpliﬁes the analysis when used in higher level protocols.
ii) Fkey-use can be realized by protocols which use the session key
in the key exchange, e.g., for key conﬁrmation. In what follows,
let Fsc = F [Fsc] and Fkey-use = F [Fkey-use] denote the multi-session
local-SID functionalities of Fsc and Fkey-use, respectively.
To illustrate the use of Theorems 3 and 4, consider, for example,
the task of proving that a multi-session protocol Q which is based
on a multi-session key exchange protocol P realizes Fsc, where
both Q and P could be real-world security protocols.
While a proof from scratch would, similarly to proofs in a game-
based setting, require involved reduction arguments and would be
quite complex, using our framework the proof is very modular, with
every proof step being relatively small and simple: First, instead of
using the actual cryptographic schemes, P can use Fcrypto (at least
for the operations supported by Fcrypto). As a result, for the rest of
the proof merely information-theoretic reasoning is needed, often
not even probabilistic reasoning, in particular no reduction proofs
(at least as far as the operations supported by Fcrypto are concerned).
The remaining proof steps are to show: i) P|Fcrypto satisﬁes im-
plicit disjointness, ii) P|Fcrypto single-session realizes Fkey-use, and
iii) Q|Fkey-use single-session realizes Fsc. (Since, the session key
established by Fkey-use can be used for ideal cryptographic opera-
tions, the argument for Step iii) is still information-theoretic.) We
note that only Step i) needs some (information-theoretic) reasoning
on multiple sessions, but only to show implicit disjointness. This
is easy, as illustrated by our case studies (see below); the proof
often merely needs to consider the security properties of a small
fraction of the primitives used in the protocol. Now, by i), ii), and
Theorem 4, we obtain P|Fcrypto ≤ Fkey-use. Theorem 3 and iii) im-
ply Q|Fkey-use ≤ Fsc. By Theorem 1 and since Q ≤ Q, we have
Q|P|Fcrypto ≤ Q|Fkey-use, and hence, Q|P|Fcrypto ≤ Fsc by transi-
tivity of ≤.
5.2 Case Studies
In our case studies (see [22] for details), we consider real-world
key exchange protocols, namely IEEE 802.11i, SSH, SSL/TLS,
IPsec, and EAP-PSK. We show that these protocols, for which we
model the cryptographic core, satisfy implicit disjointness (see be-
low); we also give an example of a (secure) protocol, namely the
Needham-Schroeder-Lowe Public-Key Protocol, that does not sat-
isfy implicit disjointness. Step iii) (see above), and hence, with
Theorem 3, also Q|Fkey-use ≤ Fsc, is proved for a generic secure
channel protocol Q of which many real-world protocols are in-
stances (see [22]). Providing full proofs for Step ii) for the key
exchange protocols of our case studies is beyond the scope of this
paper. However, ii) partly follows from existing work, from [23]
for IEEE 802.11i and from [16] for SSL/TLS. For example, in [16]
Gajek et al. showed single-session security of TLS; they use the
joint state composition theorem by Canetti and Rabin to obtain se-
curity in the multi-session setting, which, however, as discussed
only proves security of a modiﬁed/idealized version of TLS (see the
remarks on TLS at the beginning of Section 4 and Figure 2). Using
our theorems and the fact that TLS satisﬁes implicit disjointness,
the result by Gajek et al. now also implies security of the (original)
version of TLS in the multi-session setting, without pre-established
SIDs preﬁxed to all plaintexts and signed messages.
48c1, NC
S , kS , c2, NS ,
1. C → S :
S → C:
2.
3. C → S : C, kC,{|PMS|}kS , sigkC (handshake),
{F(MS, c4(cid:107)handshake)}IKSC,EKSC
4.