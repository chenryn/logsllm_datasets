i ]), and returns {ctj
i}i∈[n],j∈[Qi] to A.
-Simulation of OKeygen(y := y1k···kyn):
B1 uses its own secret key generation oracle to get dk′
computes dkyi ← IP.KeyGen(gpk, IP.mski, yi). It returns (dk′
y ← OKeygen′(y), and for all i ∈ [n],
y,{dkyi}i∈[n]) to A.
-Simulation of OCorrupt(i):
B1 uses its own oracle to get ek′
β ∈ {0, 1}, when B1 interacts with one-AD-INDMCFE ′
i ← OCorrupt′(i), which it returns to A.
Finally, B1 forwards the output α of A to its own experiment.
β
It is clear that for all
, it simulates the game Gβ to A.
128
Therefore,
Chapter 6. Multi-Client Inner Product Functional Encryption
Advone-AD-IND
MCFE ′,B1
(λ) =
(cid:12)(cid:12)(cid:12)Prhone-AD-INDMCFE ′
|AdvG0(A) − AdvG1(A)|.
0
(1λ,B1) = 1i − Prhone-AD-INDMCFE ′
1
(1λ,B1) = 1i(cid:12)(cid:12)(cid:12) =
Lemma 41: Game G1 to G2
There exists a PPT adversary B2 such that
|AdvG1(A) − AdvG2(A)| ≤ Advmany-AD-IND
IPFE,B2,n (λ).
Proof of Lemma 41. In Game G2, we replace Enc(pk, eki, x1,1
eki, x1,1
of IPFE for n instances, which we can use since for each key query y1k . . .kyn, we have
) , ℓ) with Enc(pk,
) , ℓ) for all i ∈ [n], j ∈ [Qi]. This follows from the many-AD-IND security
i − x1,1
i − x1,0
i + (xj,0
i + (xj,1
i
i
[c⊤
i + xj,0
i + xj,1
0,iyi] = [x1,1
= [x1,1
= [c1,i]⊤yi,
i − x1,0
i − x1,1
i
i
]⊤yi + [Siuℓ]⊤yi
]⊤yi + [Siuℓ]⊤yi
i − x1,b
where for all b ∈ {0, 1}, [cb,i] := Enc′(pk′, ek′
, ℓ).
i − x1,1
, yii = hxj,1
The second equality is equivalent to hxj,0
the restriction imposed by the security game (see Remark 7).
We build a PPT adversary B2 such that:
i, x1,1
i − x1,0
i + xj,b
i
i
i
, yii, which follows from
|AdvG1(A) − AdvG2(A)| ≤ Advmany-AD-IND
IPFE,B2,n (λ).
Adversary B2 proceeds as follows.
-Simulation of pk:
Adversary B2 receives (gpk,{IP.eki}i∈[n]) from its experiment. Then, it samples (pk′, msk′,
{ek′
), and sends pk := (pk′, gpk,{IP.eki}i∈[n]), to A.
i}i∈[n]) ← Setup′(1λ, F m,X,Y
n
i
i ), ℓ):
-Simulation of OEnc(i, (xj,0
, xj,1
For all b ∈ {0, 1}, B1 computes [cj,b
i
encryption oracle on input (i, ([cj,0
to A, where β ∈ {0, 1}, depending on the experiment B2 is interacting with.
])), to get IP.Enc(gpk, IP.eki, [cj,β
] ← Enc′(pk′, ek′
], [cj,1
i − x1,b
i + xj,b
i, x1,1
i
i
i
, ℓ), and queries its own
]), which it forwards
i
-Simulation of OKeygen(y := y1k···kyn):
For all i ∈ [n], B1 uses its own decryption key generation oracle on input yi to get dkyi :=
IP.KeyGen(gpk, IP.mski, yi). It computes dky := KeyGen′(pk′, msk′, y), which it can do since it
knows msk′. It returns (dk′
y,{dkyi}i∈[n]) to A.
6.3 Secret Sharing Encapsulation
-Simulation of OCorrupt(i):
129
, xji,1
i to A.
B2 returns ek′
Finally, B2 checks whether condition 1 and extra condition from Deﬁnition 25 are satis-
ﬁed. Note that involves checking an exponential number of equation for general functionalities.
But in the case of inner-product, B2 just has to look at spanned vector sub-spaces. Namely, all
queries (i, xji,0
, ℓ)i∈[n],ji∈[Qi] to OEnc and all queries y := (y1k···kyn) to OKeygen must
satisfy: Pihxji,0
, yii = Pihxji,1
, yii. This is an exponential number of linear equations, but,
as noted in the beginning of Chapter 4, it suﬃces to verify the linearly independent equations,
of which there can be at most n · m. This can be done eﬃciently given the queries.
If these conditions are satisﬁed, then B2 forwards A’s output α to its own experiment,
otherwise it sends 0 to its own experiment. It is clear that for all β ∈ {0, 1}, when B2 interacts
with many-AD-INDIPFE
(1λ, 1n,B2), it simulates the game G1+β to A. Therefore,
β
i
i
i
i
Advmany-AD-IND
IPFE,B2,n (λ) =
(cid:12)(cid:12)(cid:12)Prhmany-AD-INDIPFE
|AdvG1(A) − AdvG2(A)|.
0
(1λ, 1n,B2) = 1i − Prhmany-AD-INDIPFE
1
(1λ, 1n,B2) = 1i(cid:12)(cid:12)(cid:12) =
Secret Sharing Encapsulation
As explained in the introduction of this chapter, in the xx-AD-IND-weak security notion,
incomplete ciphertexts were considered illegitimate. This was with the intuition that no ad-
versary should use it since this leaks no information. But actually, an adversary could exploit
that in the real-life. We wish to obtain xx-AD-IND security, where the adversary can use in-
complete ciphertexts. We upgrade the scheme from the previous section so that no information
is leaked in such a case.
Namely, we present a generic layer, called the Secret Sharing Encapsulation (SSE), that
we will use to encapsulate ciphertexts. It allows a user to recover the ciphertexts from the n
senders only when he gets the contributions of all the servers. That is, if one sender did not
send anything, the user cannot get any information from any of the ciphertexts of the other
senders. More concretely, a share of a key Sℓ,i is generated for each user i ∈ [n] and each label
ℓ. Unless all the shares Si,ℓ have been generated, the encapsulation keys are random and mask
all the ciphertexts.
After giving the deﬁnition of SSE, we provide a construction whose security is based on
the DBDH assumption in asymmetric pairing groups.
Deﬁnitions
130
Chapter 6. Multi-Client Inner Product Functional Encryption
Deﬁnition 28: Secret Sharing Encapsulation (SSE)
A secret sharing encapsulation on K over a set of n senders is deﬁned by four algorithms:
• SSE.Setup(1λ): Takes as input a security parameter 1λ and generates the public
parameters pksse and the personal encryption keys are eksse,i for all i ∈ [n];
• SSE.Encaps(pksse, ℓ): Takes as input the public parameters pksse and the label ℓ and
outputs a ciphertext Cℓ and an encapsulation key Kℓ ∈ K;
• SSE.Share(eksse,i, ℓ): Takes as input a personal encryption eksse,i and the label ℓ,
outputs the share Sℓ,i;
6.3 Secret Sharing Encapsulation
131
• SSE.Decaps(pksse, (Sℓ,i)i∈[n], ℓ, Cℓ): Takes as input all the shares Sℓ,i for all i ∈ [n],
a label ℓ, and a ciphertext Cℓ, and outputs the encapsulation key Kℓ.
Correctness. For any label ℓ, we have: Pr[SSE.Decaps(pksse, (Sℓ,i)i∈[n], ℓ, Cℓ) = Kℓ] =
1, where the probability is taken over (cid:0)pksse, (eksse,i)i∈[n](cid:1) ← SSE.Setup(λ), (Cℓ, Kℓ) ←
SSE.Encaps(pksse, ℓ), and Sℓ,i ← SSE.Share(eksse,i, ℓ) for all i ∈ [n].
Security. We want to show that the encapsulated keys are indistinguishable from random
if not all the shares are known to the adversary. We could deﬁne a Real-or-Random security
game [BDJR97a] for all the masks. Instead, we limit the Real-or-Random queries to one label
only (whose index is chosen in advance), and for all the other labels, the adversary can do
the encapsulation by itself, since it just uses a public key. This is well-known that a hybrid
proof among the label indices (the order they appear in the game) shows that the One-Label
security is equivalent to the Many-Label security. The One-Label deﬁnition will be enough for
our applications.
Deﬁnition 29: 1-label-IND security for SSE
An SSE scheme SSE := (SSE.Setup, SSE.Encaps, SSE.Share, SSE.Decaps) over n users is
1-label-IND secure if for every stateful PPT adversary A, we have:
(1λ,A) = 1i − Prh1-label-INDSSE
1
(1λ,A) = 1i(cid:12)(cid:12)(cid:12)
Adv1-label-IND
SSE,A
(λ) =(cid:12)(cid:12)(cid:12)Prh1-label-INDSSE
= negl(λ),
0
where the experiments are deﬁned for β ∈ {0, 1} as follows:
(1λ,A):
β
Experiment 1-label-INDSSE
i⋆ ← A(1λ, 1n)
(pksse, (eksse,i)i∈[n]) ← Setup(1λ)
α ← AOEncaps(·),OShare(·,·),OCorrupt(·)(pk)
Output: α
On input a label ℓ, the oracle OEncaps(ℓ) computes (Cℓ, Kℓ) ← SSE.Encaps(pksse, ℓ),
K0 := Kℓ, K1 ←R K, and returns (Cℓ, Kβ). On input i ∈ [n], and a label ℓ, the oracle
OShare(i, ℓ) returns Si,ℓ ← SSE.Share(eksse,i, ℓ). On input i ∈ [n], the oracle OCorrupt(i)
returns eksse,i.
We require that the oracle OEncaps is only called on one label ℓ⋆, OShare is never called
on input (i⋆, ℓ⋆), and OCorrupt is never called on i⋆. If this condition is not satisﬁed, the
experiment outputs 0 instead of α.
Construction of the Secret Sharing Encapsulation
We build an SSE from the DBDH assumption in asymmetric pairing groups, in the random
oracle model, in Figure 6.7.
We stress here that Kℓ is not unique for each label ℓ: whereas Sℓ,i deterministically depends
on ℓ and the slot i, Kℓ is randomized by the random coins r. Hence, with all the shares, using
a speciﬁc Cℓ one can recover the associated Kℓ. Correctness follows from the fact that the
above decapsulated key Kℓ is equal to
eXi∈[n]
ti · H(ℓ), [r]2 = eH(ℓ), [r · Xi∈[n]
ti]2 ,
132
Chapter 6. Multi-Client Inner Product Functional Encryption
SSE.Setup(1λ):
PG := (G1, G2, p, P1, P2) ← PGGen(1λ), H : {0, 1}∗ → G1 be a full domain hash function modeled
as a random oracle.
For all i ∈ [n], ti ←R Zp, eksse,i := ti, pksse = (PG, H, [Pi∈[n] ti]2).
Return (pksse, (eksse,i)i∈[n]).
SSE.Share(pksse, eksse,i, ℓ):
Return Sℓ,i := ti · H(ℓ) ∈ G1.
SSE.Encaps(pksse, ℓ):
r ←R Zp, Cℓ := [r]2, Kℓ := e(H(ℓ), r ·Pi∈[n] ti). Return (Cℓ, Kℓ).
Return Kℓ := e(Pi∈[n] Sℓ,i, Cℓ).
SSE.Decaps(pksse, (Si,ℓ)i∈[n], ℓ, Cℓ):
Figure 6.7: SSE based on DBDH in asymmetric pairing groups.
where the pair (Cℓ, Kℓ) has been generated by the same SSE.Encaps call, with the same random
r. The intuition for the security is that given all the Sℓ,i = ti· H(ℓ) for a label ℓ, one can recover
the masks Kℓ = e(H(ℓ), [r ·Pi∈[n] ti]2) using Cℓ = [r]2. However if Sℓ,i is missing for one slot
i, then all the encapsulation keys Kℓ are pseudo-random, from the DBDH assumption.
Our construction is reminiscent from the Identity-Based Encryption from [BF01], where
a ciphertext for an identity ℓ is of the form e(H(ℓ), [msk · r]2) for a random r ←R Zp, and a
functional decryption key for identity ℓ is of the form H(ℓ)msk. In our construction, we share
the master secret msk into the {ti}i∈[n], and each Sℓ,i represents a share of the functional
decryption key for identity ℓ.
Security proof.
Theorem 17: 1-label-IND security of SSE
The SSE scheme presented in Figure 6.7 is 1-label-IND secure under the DBDH assump-
tion, in the random oracle model.
Proof of Theorem 17. We build a PPT adversary B such that
Adv1-label-IND
SSE,A
(λ) ≤ (1 + qH) · AdvqEnc-DBDH
PG,B
(λ),
where qH denotes the number of calls to the random oracle prior to any query to OEncaps,
either direct calls, or indirect via OShare. The integer qEnc denotes the number of calls to
the oracle OEncaps. We will then conclude using the random self reducibility of the DBDH
assumption (see Lemma 4).
The adversary B receives a qEnc-fold DBDH challenge(cid:16)PG, [a]1, [b]1, [b]2,{[ci]2, [si]T}i∈[qEnc](cid:17),
where qEnc denotes the number of queries of A to its oracle OEncaps, and receives i⋆ ∈ [n] from
A.
Then, B guesses ρ ←R {0, . . . , qH}. Intuitively, ρ is a guess on when the random oracle is
going to be queried on ℓ⋆, the ﬁrst label used as input to OEncaps (without loss of generality, we
can assume OEncaps is queried at least once by A, otherwise the security is trivially satisﬁed),
with ρ = 0 indicating that the adversary never queries H on ℓ⋆ before querying OEncaps.
Then, B samples ti ←R Zp and sets eksse,i := ti for all i ∈ [n], i 6= i⋆, and sets [ti⋆]2 := [b]2.
It returns pksse := (PG, [Pi∈[n] ti]2) to A.
if i 6= i⋆, B returns eksse,i, otherwise B stops simulating the
For any query OCorrupt(i):
experiment for A and returns 0 to its own experiment.
6.4 Strengthening the Security of MCFE Using SSE
133
For any query to the random oracle H, if this the ρ’th new query, then B sets H(ℓρ) := [a]1.
For others queries, B outputs [h]1 for a random h ←R Zp. B keeps track of the queries and
outputs to the random oracle H, so that it answers two identical queries with the same output.
For any query to OEncaps(ℓ): if ℓ has never been queried to the random oracle H before
(directly, or indirectly via OShare) and ρ = 0, then B sets H(ℓ) := [a]1; if ℓ was queried to
random oracle as the ρ’th new query (again, we consider direct and indirect queries to H, the
latter coming from OShare), then we already have H(ℓ) = [a]1. In both cases, B sets Cℓ ← [cj]2,
for the next index j in the qEnc-fold DBDH instance, computes Kℓ ← [sj]T + e([a]1, (Pi6=i⋆ ti)·
[cj]2), and returns (Cℓ, Kℓ) to A. Otherwise, the guess ρ was incorrect: B stops simulating
the experiment for A, and returns 0 to its own experiment. Moreover, if A ever calls OEncaps
on diﬀerent labels ℓ, then B stops simulating this experiment for A and returns 0 to its own
experiment.
For any query to OShare(i, ℓ): if the random oracle has been called on ℓ, then B uses the
already computed input H(ℓ); otherwise, it computes H(ℓ) for the ﬁrst time as explained above.
If i = i⋆ and ℓ = ℓρ, then B stops simulating the experiment for A and returns 0 to its own
experiment. Otherwise, that means either i 6= i⋆, in which case B knows ti ∈ Zp, or ℓ 6= ℓρ, in
which case B the discrete logarithm of H(ℓ). In both cases, B can compute Sℓ,i := ti·H(ℓ) ∈ G1,
which it returns to A.
At the end of the experiment, B receives the output α from A. If its guess ρ was correct,
B outputs α to its own experiment, otherwise, it ignores α and returns 0.
When B’s guess is incorrect, it returns 0 to its experiment. Otherwise, when it is given
as input a real qEnc-fold DBDH challenge, that is sj = abcj for all indices j ∈ [qEnc], then B
simulates the 1-label-IND security game with b = 0. Indeed, since b = ti⋆, for the j-th query