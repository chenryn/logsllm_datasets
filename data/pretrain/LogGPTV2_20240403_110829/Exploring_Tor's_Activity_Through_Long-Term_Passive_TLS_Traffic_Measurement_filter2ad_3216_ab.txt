d
r
e
p
s
P
I
5000
0
a
c
b
d
e
2015−06−01
2015−12−01
2014−12−01
2014−06−01
2013−12−01
2012−12−01
2013−06−01
2012−06−01
2011−12−01
2011−06−01
2010−12−01
2009−12−01
2010−06−01
2009−06−01
2007−12−01
2008−12−01
2008−06−01
Fig. 1. Relay types derived from CollecTor data.
Figure 1 shows a plot of the consensus information showing all relays as well
as speciﬁc subclasses of relays having the exit, guard, stable and fast status ﬂags
set. A single relay can hold several ﬂags simultaneously to represent, e.g., both
a guard and an exit node.
As the graph shows, the Tor network size has been rising slowly over the
recent years. However, this is not true for all node types. While the average
number of relays per day increased from 3,984 in 2011 to 7,524 in 2014 (i.e., 89 %
more), and the number of guard nodes increased from 793 to 1,911 (141 %), the
number of exit relays indeed decreased by 37 % from 1,965 to 1,243 per day. We
assume this corresponds to an increasing awareness that Tor exit node maintain-
ers may ﬁnd themselves facing legal challenges.13 However, this also means that
in 2014, each exit node routed a larger fraction of the traﬃc than in 2011—which
12 https://collector.torproject.org/.
13 https://www.torproject.org/eﬀ/tor-legal-faq.html.en.
Exploring Tor’s Activity
9
makes operating an exit node more interesting to malicious participants aiming
to examine outgoing traﬃc.
The stable ﬂag signals that a node has remained reliable over time; it con-
stitutes a requirement for becoming a guard node. Tor considers a relay stable
when either its mean time between failures (MTBF) is at least the median of
all known active relays or its weighted MTBF (deﬁnition in [22]) is more than
7 days [22]. The number of stable Tor relays has increased by 183 % from 2011
to 2014, from an average of 1,466 relays to 4,171. This might correlate with
permanent Internet connections becoming more available to end-users.
5.2 Connection Classiﬁcation
Generally, in any large end-user network, we would expect most Tor nodes to
act as clients. Hence, most outgoing connections should connect to guard relays.
To check this, we match all outgoing connections to the Tor network consensus
information of CollecTor.
Server Types (top to bottom)
a: All Servers
b: Guard Relays
c: Exit Relays
6000
4000
2000
y
a
d
r
e
p
s
P
I
0
a
b
c
2012−04−01
2012−07−01
2012−10−01
2013−01−01
2013−04−01
2013−07−01
2013−10−01
2014−01−01
2014−04−01
2014−07−01
2014−10−01
2015−01−01
2015−04−01
2015−07−01
2015−10−01
Fig. 2. Connections to diﬀering node types at N1.
Figure 2 shows the total number of external relay IP addresses seen each day
at site N1, also indicating which of them act as guard and exit relays. Over the
time period of the measurement, 50 % of all connections (5,318,445 of 10,612,263)
terminated at guard nodes. Considering that the average number of guard nodes
in the Tor network is just 20 % (all-time; 25 % in 2014), this indicates that there
is a sizeable fraction of clients running at this institution.
The graph also contains several distinct peaks during which the ratio of guard
nodes per day is much lower. During these times, most connections terminate
at “normal” relay nodes on the Tor network that are neither exit nor guard
relays. We suspect that the peak between August and November of 2013 can
be attributed to the Mevade Botnet, which caused a massive global rise in the
number of active Tor users, going from approximately 1 million daily users to
nearly 6 million [10]. We are not aware of speciﬁc reasons for the other spikes,
the most notable spanning October to December 2014. However, as we do not see
10
J. Amann and R. Sommer
similar artifacts at our other sites, and taking into account that most connections
do not target guard servers, we speculate that a local user was running a Tor
relay during these times, oﬀering the university’s excellent bandwidth to the
Tor network. To verify that hypothesis, we analyze the TLS ﬁngerprints of the
connections from this site to the Tor network. In particular, we focus on two bits
of information that each client sends in its TLS client hello message: the lists
of cipher suites and TLS extensions that it supports, which both depend on the
interplay between the versions of Tor and OpenSSL. This analysis reveals that
the spikes in December 2014, the Mevade spike between August and November
2013, the spike in February 2014, and the spike in March 2013 all map to speciﬁc
TLS ﬁngerprints, indicating a single software responsible for each.
Looking at our other sites, site N3 and site X1 exhibit a generally low level
of Tor connections (1,286 and 418 connections per day on average, respectively)
in comparison to site N1 (9,366/day). Connections there mostly terminate at
guard nodes in the Tor network (80 % and 75 % of connections respectively),
suggesting client activity. Site N2 has the largest number of connections into the
Tor network among all of our sites (21,675/day on average), with connections
steadily increasing from 2,818/day in February 2013 to 88,666 in February 2015.
The distribution of connections changes starting in mid-2014, going from 72 %
terminating at guard nodes in January 2014 to just 38 % in January 2015. We
again assume this to be a case of having well-established Tor servers inside the
network of this university.
5.3 Connection Durations
Another piece of information available to a passive observer of the Tor network
is the duration of connections going to Tor relays. Table 3 gives an overview of
the connection durations to guard nodes that we encountered at our 4 sites. At
each of our sites, we see a few very long connections, with at least one connection
having a duration of more than 6.8 days in each case. However, the distribution
of durations is highly skewed towards very short connections. Depending on the
site, the median connection duration across the data set is between 3.0 and
6.3 min, with the mean being a bit higher at 7.3 to 19.5 min. Figure 3 shows a
comparison of the daily mean and medium durations at site N1, illustrating that
the mean remains stable over time while the median ﬂuctuates more, potentially
due to local user activity.
Table 3. Summary of guard relay connection durations for each site in minutes.
Qu. = Quantile.
Site 1st Qu. Median Mean 3rd Qu. Max
N1 3.0
N2 3.0
N3 1.5
X1 3.0
3.0
6.3
3.0
3.0
9.6 10.1
19.5 16.8
3.2
3.3
7.3
8.3
9,839
22,280
16,370
10,120
Exploring Tor’s Activity
11
We ﬁnd a partial explanation for this behavior by examining how Tor relays
establish connections between each other. When two Tor relays set up a circuit,
they keep the TLS session alive for up to three minutes to potentially reuse for
followup requests; only if there are no further circuits going over this connec-
tion during that time, they will tear it down [2]. However, from the literature
we could not identify an explanation for the even shorter duration that we see
frequently as well. Their high number (17 %, 6.9 %, 34 % and 13 % of all connec-
tions for N1, N2, N3, and X1, respectively) points towards a systematic reason.
Possible explanations include Tor clients using short-lived connections for inter-
nal house-keeping, independent of user activity (e.g. to update their relay lists);
and implementation artifacts.
/
y
a
d
s
n
o
i
t
a
r
u
d
n
n
o
c
i
]
n
a
d
e
M
n
a
e
M
/
100
50
20
10
3
Connection durations
a: Mean
b: Median
a
b
[
2012−12−01
2013−03−01
2013−06−01
2013−09−01
2013−12−01
2014−03−01
2014−06−01
2014−09−01
2014−12−01
2015−03−01
2015−06−01
2015−09−01
Fig. 3. Median and mean guard relay connection durations at site N1 in minutes. y-axis
log-scale.
6 Server Characteristics
In this section, we take a look at the server side of the Tor, beginning with an
examination of the server version changes in Sect. 6.1, followed by a look at the
server-chosen cipher suites in Sect. 6.2.
6.1 Tor Server Versions
The Tor network consensus introduced in Sect. 5.1 provides the software versions
for all running Tor relays. We extracted these and show their distribution over
time in Fig. 4. While generally the uptake of new server versions is rather fast,
we see a long tail of servers that remain on older releases for a signiﬁcant period
of time. From a deployment perspective, this makes sense; unlike for the Tor
client software which, when used in form of the Tor Browser bundle, comes
with an autoupdate functionality, administrators install Tor relay servers either
manually or via the package management system of their operating system.
12
J. Amann and R. Sommer
0.8
0.6
0.4
h
t
n
o
m
r
e
p
n
o
i
s
r
e
v
h
t
i
w
s