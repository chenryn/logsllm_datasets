                sl(r)
                result = rl()
                if "Invalid padding" not in result:
                    c_final = chr(y ^ x) + c_final
                    print "[+]Get: " + urllib.quote(c_final)
                    break
                if y == 255:
                    print "[!]Error!"
                    exit(1)
        print "[+]Result: " + c_final
        for x in xrange(16):
            m += chr(ord(c_final[x]) ^ ord(last2[x]))
        return m,c_final
    p = remote(HOST, PORT) 
    ru = lambda x : p.recvuntil(x)
    rl = lambda  : p.recvline()
    rv = lambda x : p.recv(x)
    sn = lambda x : p.send(x)
    sl = lambda x : p.sendline(x)
    sa = lambda a,b : p.sendafter(a,b)
    sla = lambda a,b : p.sendlineafter(a,b)
    rv(4096)
    sl('aaaaa')
    rv(4096)
    sl('aaaaa')
    rl()
    cookie = rl().strip('\n')
    print cookie
    cookie_len=len(cookie)
    hash_len = 40
    iv_len=32
    iv = cookie[:iv_len]
    enc_cookie = cookie[iv_len:-hash_len]
    hash = cookie[-hash_len:]
    print iv
    print enc_cookie
    print hash
    append_data = ";admin:1"
    # 37 -> 48 -> 96
    old_plain = "admin:0;username:aaaaa;password:aaaaa"
    # 56 -> 64 -> 128
    data = hashpumpy.hashpump(hash,old_plain,append_data,16)
    new_hash = data[0]
    new_data = data[1]
    new_data = pad(new_data)
    print new_data.encode('hex').decode('hex')
    print len(new_data)
    # pad enc_cookie to 128
    enc_cookie = enc_cookie + enc_cookie[32:64]
    assert(len(enc_cookie)==128)
    last_enc_block = enc_cookie[-32:]
    last2_enc_block = enc_cookie[-64:-32]
    rest_enc_block = enc_cookie[:-64]
    last_plain ,c_final = Padding_Oracle_Attack(last_enc_block,last2_enc_block,iv+rest_enc_block)
    #print last_plain
    #print c_final
    assert(len(last_plain)==16)
    assert(len(c_final)==16)
    last_need_plain = new_data[-16:]
    temp_block = ""
    for i in range(16):
        temp_block += chr(ord(last_plain[i])^ord(last_need_plain[i]))
    last2_enc_block = last2_enc_block.decode('hex')
    new_last2_enc_block = ""
    for i in range(16):
        new_last2_enc_block += chr(ord(last2_enc_block[i])^ord(temp_block[i]))
    res = ''
    for i in range(16):
        res += chr(ord(new_last2_enc_block[i])^ord(c_final[i]))
    print "[+]Round 4 Complete!"
    print res
    print res.encode('hex')
    new_last2_enc_block = new_last2_enc_block.encode('hex')
    if len(new_last2_enc_block)%2==1:
        new_last2_enc_block = '0'+new_last2_enc_block
    payload =  last_enc_block
    print "[+]Round 4 payload:"
    print payload
    print len(payload)
    # chunk 4 is complete
    # start Round 3
    enc_cookie = rest_enc_block + new_last2_enc_block
    assert(len(enc_cookie)==96)
    last_enc_block = enc_cookie[-32:]
    last2_enc_block = enc_cookie[-64:-32]
    rest_enc_block = enc_cookie[:-64]
    last_plain ,c_final = Padding_Oracle_Attack(last_enc_block,last2_enc_block,iv+rest_enc_block)
    #print last_plain
    #print c_final
    assert(len(last_plain)==16)
    assert(len(c_final)==16)
    last_need_plain = new_data[-32:-16]
    temp_block = ""
    for i in range(16):
        temp_block += chr(ord(last_plain[i])^ord(last_need_plain[i]))
    last2_enc_block = last2_enc_block.decode('hex')
    new_last2_enc_block = ""
    for i in range(16):
        new_last2_enc_block += chr(ord(last2_enc_block[i])^ord(temp_block[i]))
    res = ''
    for i in range(16):
        res += chr(ord(new_last2_enc_block[i])^ord(c_final[i]))
    print "[+]Round 3 Complete!"
    print res
    print res.encode('hex')
    new_last2_enc_block = new_last2_enc_block.encode('hex')
    if len(new_last2_enc_block)%2==1:
        new_last2_enc_block = '0'+new_last2_enc_block
    payload = last_enc_block + payload
    print "[+]Round 3 payload:"
    print payload
    print len(payload)
    # chunk 3 is complete
    # start Round 2
    enc_cookie = rest_enc_block + new_last2_enc_block
    assert(len(enc_cookie)==64)
    last_enc_block = enc_cookie[-32:]
    last2_enc_block = enc_cookie[-64:-32]
    rest_enc_block = ""
    last_plain ,c_final = Padding_Oracle_Attack(last_enc_block,last2_enc_block,iv+rest_enc_block)
    #print last_plain
    #print c_final
    assert(len(last_plain)==16)
    assert(len(c_final)==16)
    last_need_plain = new_data[-48:-32]
    temp_block = ""
    for i in range(16):
        temp_block += chr(ord(last_plain[i])^ord(last_need_plain[i]))
    last2_enc_block = last2_enc_block.decode('hex')
    new_last2_enc_block = ""
    for i in range(16):
        new_last2_enc_block += chr(ord(last2_enc_block[i])^ord(temp_block[i]))
    res = ''
    for i in range(16):
        res += chr(ord(new_last2_enc_block[i])^ord(c_final[i]))
    print "[+]Round 2 Complete!"
    print res
    print res.encode('hex')
    new_last2_enc_block = new_last2_enc_block.encode('hex')
    if len(new_last2_enc_block)%2==1:
        new_last2_enc_block = '0'+new_last2_enc_block
    payload = last_enc_block + payload
    print "[+]Round 2 payload:"
    print payload
    print len(payload)
    # chunk 2 is complete
    # start Round 1
    enc_cookie = rest_enc_block + new_last2_enc_block
    assert(len(enc_cookie)==32)
    last_enc_block = enc_cookie[-32:]
    last2_enc_block = iv
    rest_enc_block = ""
    last_plain ,c_final = Padding_Oracle_Attack(last_enc_block,last2_enc_block,rest_enc_block)
    #print last_plain
    #print c_final
    assert(len(last_plain)==16)
    assert(len(c_final)==16)
    last_need_plain = new_data[-64:-48]
    temp_block = ""
    for i in range(16):
        temp_block += chr(ord(last_plain[i])^ord(last_need_plain[i]))
    last2_enc_block = last2_enc_block.decode('hex')
    new_last2_enc_block = ""
    for i in range(16):
        new_last2_enc_block += chr(ord(last2_enc_block[i])^ord(temp_block[i]))
    res = ''
    for i in range(16):
        res += chr(ord(new_last2_enc_block[i])^ord(c_final[i]))
    print "[+]Round 1 Complete!"
    print res
    print res.encode('hex')
    new_last2_enc_block = new_last2_enc_block.encode('hex')
    if len(new_last2_enc_block)%2==1:
        new_last2_enc_block = '0'+new_last2_enc_block
    payload =  last_enc_block + payload
    print "[+]Round 1 payload:"
    print payload
    print len(payload)
    payload = new_last2_enc_block + payload
    print "[+]Round 0 payload:"
    print payload
    print len(payload)
    payload += new_hash
    print "[+]ALL DONE!"
    print "payload:"
    print payload
    print len(payload)
    rv(4096)
    sl(payload)
    result = rl()
    print "[+]Get Flag:"
    print result
    p.close()
## Re
### babyre1
首先校验flag长度为16，然后进行16进制编码
然后我们看看sub_555555555180
这个函数将input视为4个dword的数，然后xxtea
decrypt，且解密后的字符串最后一字节要
可以发现是xxtea解密  
后面再经过一个check后要输出Bingo!可以发现的是，最后一轮check并不会改变输入的值，且我们只有密文的最后两位是未知的，然后hint又给了md5，那么最后一轮就没有逆的必要了，直接爆破一下
    import xxtea
    import hashlib;
    def decrypt(text,key):
        return xxtea.decrypt(text, key,padding=False);
    def encrypt(text,key):
        return xxtea.encrypt(text, key,padding=False);
    key = [0xc7,0xe0,0xc7,0xe0,0xd7,0xd3,0xf1,0xc6,0xd3,0xc6,0xd3,0xc6,0xce,0xd2,0xd0,0xc4]
    key = ''.join( [ chr(i) for i in key ] );
    cipher = [0x55,0x7e,0x79,0x70,0x78,0x36,0,0];
    for i in range(0xff):
        print i;
        for j in range(4):
            cipher[6]=i;
            cipher[7]=j;
            t = encrypt( ''.join( [ chr(k) for k in cipher ] ) , key);
            t = t.encode('hex');
            t = "rctf{" + t + "}"
            # print i,j,t;
            # print hashlib.md5(t).hexdigest()
            if (  hashlib.md5(t).hexdigest()=="5f8243a662cf71bf31d2b2602638dc1d" ):
                print 'get!!!!!!!!!!!!!!!!!!!';
                print t;
    # rctf{05e8a376e4e0446e}
### babyre2
和第一题同样用了xxtea，程序的大致逻辑为：  
用account作为xxtea的密钥来加密一串常量，得到s1  
用password进行一些变换后来索引data的值来构造一个字符串s2  
将s2每位^0xcc后解密s1，如果解密的结果最后一位<4就get flag  
且可以发现的是第一次加密的常量最后一位<4，那么构造account==s2^0xcc就完事了
    from pwn import *
    from LibcSearcher import *
    s = lambda data : p.send(data);