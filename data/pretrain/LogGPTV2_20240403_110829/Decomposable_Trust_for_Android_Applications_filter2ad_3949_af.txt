Library OSes such as DrawBridge for Windows [39]
provide userspace linkable OSes that execute an app in an
isolated environment with a separate kernel. An open research
problem with such systems is providing high performance
graphics. Android, natively provides several mechanisms that
maintain maintain smooth UI performance. Anception’s design
leverages this existing code base to provide high performance
graphics.
ExpressOS [35] is focused on running apps on a small
veriﬁed kernel. However, ExpressOS requires that apps fully
trust the data received from the UI stack that is not veriﬁed.
Additionally, all privileged system services (UI/Input stack
included) execute in the same VM, thus exposing sensitive
user interactions to malware.
The basic mechanism of servicing system calls in different
kernels has been used in Pods [32], VirtuOS [38], and ProxOS
[43] for other purposes than in this paper, e.g., to improve
server reliability, isolating services, and improving tolerance
against driver bugs. Anception incorporates lessons on system
call interposition tools, and pitfalls in doing that, as described
in [21], [20].
Flicker [36] reduces the trusted base of apps drastically
using AMD-speciﬁc processor support and requires developers
to construct Pieces of Application Logic (PALs) that are
secured using hardware primitives. While ﬂicker does promote
better modularity in apps, it requires that apps be modiﬁed to
be protected. Anception works with unmodiﬁed apps.
Microkernels for smartphones. L4Android is a microker-
nel based OS framework for Android built on the L4 microker-
nel [33]. While microkernels reduce the trusted base of the core
kernel, there are other privileged userspace processes running
that could be leveraged to attack trusted apps. Anception pro-
vides an architecture to further reduce this trusted base using
the lightweight Anception container where even privileged
system processes can be sandboxed away from trusted apps.
App Sandboxing. Providing isolation on Android is cur-
rently focused on policy based approaches. TrustDroid [11]
creates trust domains through framework modiﬁcations and
IPC monitoring, AppFence [26] presents fake data to untrusted
apps and Aurasium [46] performs bytecode rewriting to embed
isolation policies in app code. Janus [23] was an early tool
implementing policy based on system call interception, and
seccomp [1] is a more recent version based on similar prin-
ciples. These systems are vulnerable to privileged userspace
bugs and kernel exploits. Additionally, they do not enable a
framework for the design of secure apps. PREC [24] is targeted
at foiling exploits by exponentially slowing down the execution
of system calls from suspicious contexts and relies on building
a proﬁle of normal and abnormal behavior but does not protect
against kernel level exploits and does not reduce the amount
of system-code the app must trust.
File System Isolation. Android recently incorporated a
multiuser feature that helps in setting up multiple user ac-
counts and sharing of a single device. Each user is as-
signed a unique user ID and corresponding directory on the
ﬁlesystem (/data/users/ID). When the device switches
to a user, symbolic links are set up from an app’s direc-
tory (/data/data/APP.PKG) to the private user directory.
However, this design is not aimed at isolating malware that
use privilege escalation attacks and does not provide memory
isolation in the event of an OS compromise.
IX. CONCLUSION
Modern operating systems such as Android provide mal-
ware a large attack surface running into hundreds of thousands
of lines of code, consisting of both privileged services and
the operating system kernel. This paper presents a system
architecture called Anception for deprivileging both portions
of the kernel services as well as several system services for
Android with the goal of protecting UI input and virtual
memory of high assurance apps from malware. To achieve that,
we kept security-relevant portions of apps (in particular, UI-
related services, virtual memory, code, and security-relevant
keys) on the host and segregate rest of the app’s functionality
as well as many system services to a guest virtual machine
container. Analysis showed that the Anception architecture
moves signiﬁcant chunks of privileged code to an unprivi-
leged container and it would have blocked 23 out of 25 of
the previously reported privilege-escalation vulnerabilities on
Android. The penalty for deprivileging code with Anception is
modest. While, as expected, I/O and cross-container IPCs take
a performance hit on microbenchmarks, on macrobenchmarks
and on real applications, the impact is minimal.
X. ACKNOWLEDGMENTS
We thank the reviewers for their thoughtful feedback. This
material is based upon work supported by the National Sci-
ence Foundation under Grant Numbers 093629 and 1318722.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the author(s) and
do not necessarily reﬂect the views of the National Science
Foundation.
REFERENCES
[1] Google chrome security team. seccomp-sandbox. accessed 18 july 2013.
http://code.google.com/p/seccompsandbox/.
[2] Kaspersky Labs. Targeted Trojan Attack stealing personal informa-
http://www.securelist.com/en/blog/208194186/Android Trojan
tion.
Found in Targeted Attack.
[3] McAfee Labs. Phishing Attack replaces Banking app with mal-
http://blogs.mcafee.com/mcafee-labs/phishing-attack-replaces-
ware.
android-banking-apps-with-malware.
[4] AMIRI SANI, A., BOOS, K., YUN, M. H., AND ZHONG, L. Rio: A
system solution for sharing i/o between mobile systems. In Proc. of the
12th Annual Int. Conf. on Mobile Systems, Applications, and Services
(New York, NY, USA, 2014), MobiSys ’14, ACM, pp. 259–272.
[5] ANDRUS, J., DALL, C., HOF, A. V., LAADAN, O., AND NIEH, J. Cells:
a virtual mobile smartphone architecture.
In Proc. of the 23rd ACM
Symp. on Operating Systems Principles (New York, NY, USA, 2011),
SOSP ’11, ACM, pp. 173–187.
[6] Antutu Benchmark for android. Accessed 18 July 2013. https://play.
google.com/store/apps/details?id=com.antutu.ABenchMark.
[7] ARTENSTEIN, N., AND REVIVO, I. Man-in-the-Binder: He who con-
trols IPC, controls the Droid. In Europe BlackHat Conf. (Amsterdam,
The Netherlands, 2014).
353353
[8] BARR, K., BUNGALE, P., DEASY, S., GYURIS, V., HUNG, P.,
NEWELL, C., TUCH, H., AND ZOPPIS, B.
The vmware mobile
virtualization platform: is that a hypervisor in your pocket? SIGOPS
Oper. Syst. Rev. 44, 4 (Dec. 2010), 124–135.
[9] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding applications
from an untrusted cloud with haven. In Proc. of the 11th USENIX Conf.
on Operating Systems Design and Implementation (Berkeley, CA, USA,
2014), OSDI’14, USENIX Association, pp. 267–283.
[10] BERNASCHI, M., GABRIELLI, E., AND MANCINI, L. V. Remus: a
security-enhanced operating system. ACM Trans. Inf. Syst. Secur. 5, 1
(Feb. 2002), 36–61.
[11] BUGIEL, S., DAVI, L., DMITRIENKO, A., HEUSER, S., SADEGHI, A.-
R., AND SHASTRY, B. Practical and lightweight domain isolation on
Android. In Proc. of the 1st ACM workshop on Security and privacy in
smartphones and mobile devices (New York, NY, USA, 2011), SPSM
’11, ACM, pp. 51–62.
[12] CHECKOWAY, S., AND SHACHAM, H. Iago attacks: why the system call
API is a bad untrusted RPC interface. In Proc. of the 18th Int. Conf.
on Architectural Support for Programming Languages and Operating
Systems (New York, NY, USA, 2013), ASPLOS ’13, ACM, pp. 253–
264.
[13] CHEN, X., GARFINKEL, T., LEWIS, E. C., SUBRAHMANYAM, P.,
WALDSPURGER, C. A., BONEH, D., DWOSKIN, J., AND PORTS, D. R.
Overshadow: a virtualization-based approach to retroﬁtting protection
in commodity operating systems.
the 13th Int. Conf.
on Architectural Support for Programming Languages and Operating
Systems (New York, NY, USA, 2008), ASPLOS XIII, ACM, pp. 2–13.
[14] Linux Kernel vulnerabilities: CVE Database. http://www.cvedetails.
In Proc. of
com/vulnerability-list/vendor id-33/product id-47/cvssscoremin-
7/cvssscoremax-7.99/Linux-Linux-Kernel.html.
[15] DALL, C., AND NIEH, J. KVM for ARM. In Proc. of the 12th Annual
Linux Symp. (2010), OLS’10.
[16] DIKE, J. User-mode Linux. In ALS ’01: Proc. of the 5th Annual Linux
Showcase & Conf. (Berkeley, CA, USA, 2001), USENIX Association,
p. 2.
[17] Dual Android using Xen. Efﬁcient GPU virtualization. Samsung
R&D UK. http://ftp.osuosl.org/pub/fosdem//2014/UD2120 Chavanne/
Saturday/DualAndroid on Nexus 10 using XEN.webm.
[18] EncFS. http://www.arg0.net/encfs.
[19] Filesystem in Userspace. http://fuse.sourceforge.net/.
[20] GARFINKEL, T. Traps and pitfalls: Practical problems in system call
interposition based security tools. In In Proc. Network and Distributed
Systems Security Symp. (2003), pp. 163–176.
[21] GARFINKEL, T., PFAFF, B., AND ROSENBLUM, M. Ostia: A delegating
architecture for secure system call interposition. In IN NDSS (2003).
http://web.nvd.nist.gov/view/vuln/
[22] CVE-2011-1823. Gingerbreak.
detail?vulnId=CVE-2011-1823.
[23] GOLDBERG, I., WAGNER, D., THOMAS, R., AND BREWER, E. A.
A secure environment for untrusted helper applications conﬁning the
wily hacker.
In Proc. of the 6th Conf. on USENIX Security Symp.,
Focusing on Applications of Cryptography - Volume 6 (Berkeley, CA,
USA, 1996), SSYM’96, USENIX Association, pp. 1–1.
[24] HO, T.-H., DEAN, D., GU, X., AND ENCK, W. PREC: Practical Root
Exploit Containment for Android Devices. In 4th ACM Conf. on Data
and Application Security and Privacy (San Antonio, TX, March 2014).
[25] HOFMANN, O. S., KIM, S., DUNN, A. M., LEE, M. Z., AND
InkTag: secure applications on an untrusted operating
WITCHEL, E.
system.
In Proc. of the 18th Int. Conf. on Architectural Support for
Programming Languages and Operating Systems (New York, NY, USA,
2013), ASPLOS ’13, ACM, pp. 265–278.
[26] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND WETHER-
ALL, D. These aren’t the droids you’re looking for: retroﬁtting Android
to protect data from imperious applications. In Proc. of the 18th ACM
Conf. on Computer and communications security (New York, NY, USA,
2011), CCS ’11, ACM, pp. 639–652.
[27] HWANG, J. Y., SUH, S. B., HEO, S. K., PARK, C. J., RYU, J. M.,
PARK, S. Y., AND KIM, C. R. Xen on ARM: System virtualization
using Xen hypervisor for ARM-based secure mobile phones. pp. 257–
261.
354354
[28]
[29]
JEONG, S., LEE, K., LEE, S., SON, S., AND WON, Y.
I/o stack
optimization for smartphones.
In Proceedings of the 2013 USENIX
Conference on Annual Technical Conference (Berkeley, CA, USA,
2013), USENIX ATC’13, USENIX Association, pp. 309–320.
JIANG, X. GingerMaster malware on Android. http://www.csc.ncsu.
edu/faculty/jiang/GingerMaster/.
[30] Kaspersky Security Bulletin for 2013.
https://www.securelist.com/
en/analysis/204792318/Kaspersky Security Bulletin 2013 Overall
statistics for 2013.
[31] Kernelchopper/Motochopper exploit. http://forum.xda-developers.com/
showthread.php?t=2255491.
[32] LAADAN, O., AND NIEH, J. Operating system virtualization: practice
and experience. In Proc. of the 3rd Annual Haifa Experimental Systems
Conf. (New York, NY, USA, 2010), SYSTOR ’10, ACM, pp. 17:1–
17:12.
[33] LANGE, M., LIEBERGELD, S., LACKORZYNSKI, A., WARG, A., AND
PETER, M. L4android: A generic operating system framework for
secure smartphones.
In Proceedings of the 1st ACM Workshop on
Security and Privacy in Smartphones and Mobile Devices (New York,
NY, USA, 2011), SPSM ’11, ACM, pp. 39–50.
levitator. Jon Larimer and Jon Oberheide. http://cve.mitre.org/cgi-bin/
cvename.cgi?name=CVE-2011-1352.
[34]
[35] MAI, H., PEK, E., XUE, H., KING, S. T., AND MADHUSUDAN, P.
Verifying security invariants in ExpressOS.
the 18th
Int. Conf. on Architectural Support for Programming Languages and
Operating Systems (New York, NY, USA, 2013), ASPLOS ’13, ACM,
pp. 293–304.
In Proc. of
[36] MCCUNE, J. M., PARNO, B. J., PERRIG, A., REITER, M. K., AND
ISOZAKI, H. Flicker: An execution infrastructure for tcb minimization.
In Proc. of the 3rd ACM SIGOPS/EuroSys European Conf. on Computer
Systems 2008 (New York, NY, USA, 2008), Eurosys ’08, ACM,
pp. 315–328.
[37] mempdroid exploit.
CVE-2012-0056.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
[38] NIKOLAEV, R., AND BACK, G. VirtuOS: an operating system with
kernel virtualization.
In Proc. of the 24th ACM Symp. on Operating
Systems Principles (New York, NY, USA, 2013), SOSP ’13, ACM,
pp. 116–132.
[39] PORTER, D. E., BOYD-WICKIZER, S., HOWELL, J., OLINSKY, R.,
AND HUNT, G. C. Rethinking the library os from the top down.
In
Proc. of the 16th Int. Conf. on Architectural Support for Programming
Languages and Operating Systems (New York, NY, USA, 2011),
ASPLOS XVI, ACM, pp. 291–304.
[40] RUSSEL, R. lguest: Implementing the little Linux hypervisor. In OLS
’07: Proc. of the Linux Symp. (June 2007), vol. 2, pp. 173–178.
[41] RUSSELL, R. virtio: towards a de-facto standard for virtual i/o devices.
SIGOPS Oper. Syst. Rev. 42, 5 (July 2008), 95–103.
[42] SunSpider Benchmark for android. Accessed 18 July 2013. https://
www.webkit.org/perf/sunspider/sunspider.html.
[43] TA-MIN, R., LITTY, L., AND LIE, D. Splitting interfaces: making trust
between applications and operating systems conﬁgurable. In Proc. of the
7th Symp. on Operating Systems Design and Implementation (Berkeley,
CA, USA, 2006), OSDI ’06, USENIX Association, pp. 279–292.
[44] WEI, X., GOMEZ, L., NEAMTIU, I., AND FALOUTSOS, M. Proﬁle-
Droid: multi-layer proﬁling of Android applications.
In Proc. of the
18th Annual Int. Conf. on Mobile Computing and Networking (New
York, NY, USA, 2012), Mobicom ’12, ACM, pp. 137–148.
[45] WU, C., ZHOU, Y., PATEL, K., LIANG, Z., AND JIANG, X. AirBag:
Boosting Smartphone Resistance to Malware Infection. In Proc. of the
Network and Distributed System Security Symp. (NDSS) (San Diego,
CA, February 2014).
[46] XU, R., SA¨IDI, H., AND ANDERSON, R. Aurasium: Practical Policy
Enforcement for Android Applications. In Proc. of the 21st USENIX
Conf. on Security Symp. (Berkeley, CA, USA, 2012), Security’12,
USENIX Association, pp. 27–27.
[47] YANG, J., AND SHIN, K. G. Using hypervisor to provide data secrecy
In Proc. of the 4th ACM
for user applications on a per-page basis.
SIGPLAN/SIGOPS Int. Conf. on Virtual Execution Environments (New
York, NY, USA, 2008), VEE ’08, ACM, pp. 71–80.