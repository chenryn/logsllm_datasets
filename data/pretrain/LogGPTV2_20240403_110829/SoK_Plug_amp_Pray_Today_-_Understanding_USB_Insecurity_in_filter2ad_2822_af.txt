### Steps to Address TCA Vulnerabilities

The TCA (Type-C Authentication) introduces certificates and a CA (Certificate Authority) model, providing a mechanism to establish trust for USB products. It also embeds private keys into USB devices to serve as trust anchors. However, as detailed in the TCA weakness analysis, design flaws and limitations make TCA a vulnerable and incomplete solution for USB security.

### Future Directions

Through our systematic analysis, we have demonstrated that a comprehensive solution requires a system that integrates multiple defensive measures across different communication layers. Although TCA has its flaws, it represents a promising start, as authentication is a fundamental prerequisite for enhancing security. Below, we outline several future research directions that can help address the USB security problem:

#### Solution Integration
Most existing USB defense solutions focus on a single layer. Therefore, it is essential to explore how to combine different solutions to cover multiple layers. For example, integrating ProvUSB, GoodUSB, and FirmUSB can provide a comprehensive defense from the Human Interface Device (HID) to the Transport Layer, effectively countering most software-based attacks. Similarly, combining USBFirewall with USBFILTER can create a robust USB packet firewall, controlling device behavior while defending against exploits from malformed packets. These integrated approaches will simultaneously address findings F2 and F4.

#### Evaluation of Type-C Authentication Products
While we have identified design flaws in TCA, it is unlikely that a new version of the specification will be released soon, given that the current one was recently finalized. There is an urgent need to evaluate the security of new products, as real-world attacks may prompt updates to the specification. It is also possible that vendor-specific implementations have addressed some of the pitfalls in the specification and provided mitigations. Once verified, these mitigations could enhance the overall security. This will address findings F1 and F5.

#### Bi-directional and Mutual Authentication
TCA lacks a trust anchor for USB hosts. A short-term fix could involve leveraging trusted hardware available on the host, such as a Trusted Platform Module (TPM), and implementing a host authentication protocol like Kells or ProvUSB. The possibility of bi-directional authentication opens the door to mutual authentication, where both the USB host and peripheral authenticate each other. Combined with clear key protection and revocation requirements, this approach may provide a comprehensive solution to finding F3.

#### Legacy Device Authentication
To authenticate legacy devices, two techniques show promise:
- **USB Host Fingerprinting:** Machine learning algorithms can fingerprint host machines via the USB interface. This concept can be extended to USB device fingerprinting, although building a robust machine learning system in an adversarial environment presents challenges.
- **Firmware Verification:** FirmUSB can understand and verify the behavior of USB device firmware, providing stronger security guarantees when the firmware is available. Combining fingerprinting and firmware verification can potentially mitigate most attacks from legacy devices. Together with TCA, this will provide a reasonable solution addressing finding F1.

#### Policy Instantiation
Although security policies have been designed and used in existing solutions like USBFILTER and Cinch, a new policy design is needed that is general enough to be adopted by most vendors and expressive enough to facilitate the creation of rich rules. The new design should:
- Enumerate a set of subjects, objects, and access primitives to provide an intuitive mediation abstraction.
- Define a common data marshaling format (e.g., XML, JSON) for sharing policies between deployments.
- Describe best practices for policy design, including how policies can maintain security in the presence of legacy devices.

This will not only concretize TCA with respect to findings F2 and F4 but also promote USB security as part of broader systems security solutions, such as SELinux.

### Conclusion
Despite three generations and a recent connector change, USB remains problematic. In this work, we present a structured methodology for analyzing USB attacks and defenses. We discover that these vulnerabilities stem from the core "trust-by-default" principle of the USB specification and identify design trade-offs and principles that inform proposed defensive solutions. We formally verify the new USB Type-C Authentication specification and uncover design flaws and implementation pitfalls. Our future research directions aim to guide efforts to improve the security of the USB ecosystem.

### Acknowledgement
This work is supported in part by the US National Science Foundation under grant numbers CNS-1540217, CNS-1564140, CNS-1657534, CNS-1505790, and CNS-1518741, and by the Department of Energy under award DE-OE0000780.

### References
[References listed here]