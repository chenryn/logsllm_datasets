any code running outside the enclave, including the host OS,
system software, or hypervisor.
Trusted components. Civet trusts the CPU and any other
hardware in the CPU package, as well as any binaries run-
ning inside the enclave. The enclave will include the trusted
Java classes, the in-enclave JVM, the remaining trusted JNIs,
Graphene-SGX, GNU libc, and Civet’s in-enclave framework.
We assume attackers have the source code of the applica-
tion and Civet, and may attempt Iago-type attacks [21] by
manipulating inputs to enclave interfaces, including class-
level, JNI-level, and system-level APIs. For system-level
APIs, Civet inherits shielding code from Graphene; inasmuch
as a Civet partition extends the enclave attack surface with
class-level interfaces, Civet adds additional, language-based
defenses on the data ingress and egress of the enclave.
Out-of-scope attacks. Civet assumes a correctly imple-
mented CPU. Civet does not protect against known limitations
of current enclave implementations like Intel SGX, which
include rollback attacks [42], micro-architectural vulnerabili-
ties [43, 43, 44, 44–49], cache timing attacks [45, 50, 51], and
denial-of-service from the host. Solving these problems is
orthogonal to the contributions of Civet.
Balancing TCB and Attack Surface. Compared to run-
ning an entire application in an end-to-end shielded frame-
work [12,13,15,16], partitioning an application has the advan-
tage of reducing the TCB that directly interacts with sensitive
code and data, as well as minimizing enclave footprint (impor-
tant for performance on current enclave hardware). However,
partitioning introduces new attack surface between the appli-
cation code inside and outside the enclave. In a framework
that shields a POSIX-style interface, one can simply use an
existing shield that protects against many issues, such as Iago
attacks [21]. When one designs a custom enclave interface af-
ter partitioning a large code base, one has to design shielding
code between code that was originally mutually trusted.
A key goal of Civet is to help developers harden this new
enclave interface. For application-level vulnerabilities, Civet
requires the developers to design defenses for the interac-
tion between the trusted classes inside the enclave and the
untrusted classes outside the enclave, but provides language
tools to help developers reason about these defenses, such as
injection of shield classes and taint-tracking. Civet hardens
the partitioned JVM for developers, and inherits shielding of
OS-level interfaces from Graphene-SGX.
We note that partitioning an application can also potentially
introduce new side-channel vulnerabilities. Side channels and
their defenses are out of the scope of this paper.
Security properties. Civet is designed to enforce the fol-
lowing security properties:
• I–Code integrity and remote attestation: Civet checks the
integrity of all code running inside the enclave, includ-
ing the Java classes, Java virtual machine, imported Java
Native Interface (JNI) libraries, system libraries, and the
Graphene-SGX library OS. A remote entity can use the re-
mote attestation feature of hardware enclaves to check the
measurement of a Civet application. This property is funda-
mental to hardware enclaves and is necessary for defending
against code modiﬁcation or code injection attacks.
• II–Type integrity on enclave interfaces: Polymorphism at
the enclave interface causes confusion for developers when
writing shielding code. Civet ensures that the inputs to a
method exported as an enclave interface cannot be arbitrar-
ily subtyped as classes that are impossible in the original
application. With type integrity on enclave inputs, develop-
ers can safely use object-oriented APIs for semantic checks
or cryptographic protections. This property is necessary
for preventing the type confusion attacks described in §5.1.
• III–Explicit data declassiﬁcation: Data provisioned from a
secure channel or derived from this provisioned data inside
the enclave cannot be copied outside the enclave unless
explicitly declassiﬁed by the developer. Civet tracks both
the explicit ﬂows from operating on tainted objects and, op-
tionally, the implicit ﬂows from branching based on tainted
values. Developers need to either encrypt or sanitize a
tainted object for declassiﬁcation, or the object cannot re-
turn to untrusted code. This property is to prevent semantic
bugs in application or defense code from accidentally leak-
ing the secrets from the enclaves. Side channels and other
implicit ﬂows are out of scope.
4 Partitioning Class Libraries
In this section, we explain how to partition an application
with Civet; and how Civet creates a concise, robust partition
with little input from the developer.
4.1 The Partitioning Workﬂow
Step 1: Identifying enclave interfaces. To create a parti-
tion, Civet requires developers to identify one or more entry
classes within the application, to serve as the interface be-
tween enclave code and non-enclave code. Figure 2 illustrates
partitioning a Hadoop mapper with an entry class.
508    29th USENIX Security Symposium
USENIX Association
RegexMapper
Grep
RegexMapperShield
com.sun.crypto.provider.AESCipher
com.sun.crypto.provider.PCBC
AESCipher.encrypt
class RegexMapperShield extends RegexMapper {
Cipher cipher; // Initialized in the constructor
public void map(K k, Text v, Context context) {
cipher.init(Cipher.DECRYPT_MODE,
Enclave.getSealKey(), new IvParameterSpec(k));
v = new Text(cipher.doFinal(v.getBytes()));
super.map(k, v, context); // Call the actual mapper
// Further encrypt the context if necessary
}
}
Figure 3: The conﬁguration (in XML) and shielding class for
partitioning a hadoop mapper (RegexMapper).
Figure 4: Components of the Civet framework. Civet maps en-
try classes to a trusted domain inside enclaves. The untrusted
code accesses the trusted objects through RPCs by invoking
proxy classes. Each enclave also contains a partitioned JVM
(§8.2) and a library OS (LibOS).
and as a beneﬁt, the deﬁnition is transparent to the entry class
as well as the call sites in the non-enclave code.
Civet also synthesizes extra protections, including type-
checking inputs and dynamic taint-tracking. Civet deﬁnes
a sensitive object to be an object instantiated inside the
trusted code or provisioned from a secure channel. A
 rule can specify a method to declassify the
outputs to the untrusted domain. If an output is not declas-
siﬁed, Civet uses dynamic taint-tracking (§6.2) to block any
object from leaving the enclave if the object contains infor-
mation derived from a sensitive object.
Step 3: Connecting trusted and untrusted domains. For
each entry class, Civet synthesizes a proxy class that marshals
inputs to the enclave and invokes an RPC to code running
in the enclave. Figure 4 shows the components of the Civet
framework, including a proxy class. An untrusted application,
such as the Hadoop framework, can create an enclave by
instantiating the proxy classes. A proxy class includes JNI to
invoke the hardware level operations to enter an enclave. The
code of the entry class runs inside the enclave.
Figure 2: Partitioning model of Civet. The entry classes
deﬁne a trusted domain inside an application, with all the
trusted classes collect into a JAR ﬁle.
We note that many other partitioning systems involve spec-
ifying sensitive data rather than deﬁning a code interface;
we selected the code option in part because one use case for
SGX is protecting sensitive algorithms, and in part because
we believe that this approach better matches programmers’
intuition. We leave a more careful study of this design choice
for future work.
A set of entry classes deﬁne a trusted domain, in which
all of the classes that implement the enclave functionality are
mutually trusted. Every call from an untrusted class to an
entry class transitions execution into the enclave.
At build time, Civet packs all of the trusted classes into a
single JAR ﬁle, named as enclave.jar, which contains all of
the Java code that can be loaded into the enclave. The input
to this tool is a conﬁguration written in XML (illustrated in
Figure 3), with each entry class listed as an 
rule. The resulting JAR ﬁle can be audited and signed by
developers. For a class loaded by reﬂection, Civet relies
on the developer explicitly white-list the class, by adding
an  rule to the conﬁguration. Users can add
 rules gradually when encountering resolution
errors during testing, or search for dynamically-loaded classes
in the enclave code. The use of reﬂection is extremely com-
mon in commercial Java applications [52]. Parallel to this
work, many papers [52–54] have shown that the usage of
reﬂection calls can be estimated by static analysis. For iden-
tifying trusted classes (§4.2), Civet also requires the user to
specify the main class of the whole, untrusted program, using
an  rule.
Step 2: Specifying enclave protections. After deﬁning the
entry classes, the developers can specify extra shield classes
that leverage object orientation to wrap the entry classes.
Shield classes are primarily used for tasks such as sanitiz-
ing or decrypting inputs, or encrypting outputs. Developers
can write a shield class without changing the source code
of the original application. Figure 3 shows an example of a
shield class for the Hadoop mapper partitioned in Figure 2.
RegexMapperShield is a wrapper to RegexMapper for de-
crypting the inputs and encrypting the outputs. A shield class
is deﬁned in the conﬁguration using a  rule,
USENIX Association
29th USENIX Security Symposium    509
RegexMapperMethod Invocation Application (Hadoop)Kmap(K,V,Context)Entry Class VUntrustedinputsKVTrusted DomainTrusted classesEnclave.JARContextContextMove into     the trusted domainPartitioned JVMEntryClass XTrusted ClassesABCLibOSUntrusted ClassesNative JVMEnclave Transition JNIUntrusted OSTrusted Domain EnclaveProxyClass XLibOS Untrusted Layernew X()App-levelRPCOS-level RPCUser ProcessRuntime-levelRPCSGX DriverShieldThe underlying JVM or library OS may exit the enclave
only to 1) return from an application-level call into an entry
class, and 2) to implement runtime-level or OS-level func-
tionality. Developers need only concern themselves with the
ﬁrst case. For the second case, the JVM and the library OS
include their own shielding code.
Speciﬁcally, Civet disallows enclave Java code to call out
to non-enclave Java code, which we call a nested exit, for two
reasons: (1) Designing shielding strategies for nested exits
can be challenging; (2) A nested exit exports intermediate
states outside the enclave and increases the risk of data leak-
age, corruption, and side channels. The downside is that the
enclave may include more supporting trusted classes and/or
export more entry classes for the untrusted code to access
results inside the enclave. All of our application examples
(§9) were easily partitioned without nested exits.
Identifying Trusted Code
4.2
A key service Civet provides for developers is creating a
single JAR ﬁle with all of the code that should be reachable
from the entry classes or that is white-listed with an include
directive, but no other code.
In the presence of polymorphism, this analysis is best done
with an automated static analysis. For example, Hadoop uses
an interface called Writable to represent 52 different types
of data. Polymorphism multiplies the complexity of the se-
curity analysis, and obscures the implications of bringing a
class into an enclave. In a source-code-level audit, developers
cannot easily predict the target of every method call or ﬁeld
access. Our analysis helps by generating an unambiguous
collection of classes and methods as the transitive closure of
control and data ﬂows from entry classes.
Civet determines the classes and methods to be included in
the trusted domain via static bytecode analysis:
• Call graph analysis [55,56]: For each method, identifying
the classes and methods referenced.
• Points-to analysis [57–59]: For each ﬁeld or local variable,
identifying the heap objects that are assigned, to determine
all the possible subtypes allocated for the ﬁeld or local
variable if it is polymorphic.
We implement the static analysis described in Algorithm 1
using SOOT [60], the de facto bytecode analysis framework
for Java. We use the ﬂow-insensitive, context-insensitive,
whole program analysis implemented in Spark [61], the
points-to analysis framework of Soot, with on-the-ﬂy call
graph analysis (see the conﬁguration in §9.4). The points-to
analysis is based on the main class speciﬁed by the user. We
use the points-to analysis to identify the possible argument
types to an entry method, or the possible targets of a polymor-
phic method. For classes that are not included in the whole
program analysis of Spark, such as classes explicitly loaded
by the JVM during initialization, we conservatively estimate
the points-to targets by considering all subclasses.
Algorithm 1: Static analysis for identifying trusted code
/* Extending the entry classes with input types */
Data: A set of entry classes E and included classes I
for c ∈ E do
1 while E is different from the last iteration do
2
3
4
5
for m ∈ public methods of c do
E ← E ∪ classes(points-to(o))
for o ∈ non-primitive arguments of m do
for c ∈ Classes do
for m ∈ methods of c do
/* Collecting required classes for the enclave */
6 Classes ← E ∪ I; CG ← /0;
7 while Classes is different from the last iteration do
8
9
10
11
12
13
14
for o. f ∈ ﬁeld accesses in m do
if o is a class then OC ← {o}
else OC ← classes(points-to(o))
FC ← classes(points-to( f ))
Classes ← Classes∪ OC∪ FC
for o.m(cid:48) ∈ method calls in m do
if o is a class then OC ← {o}
else OC ← classes(points-to(o))
Classes ← Classes∪ OC
CG ← CG∪{(c,m,c(cid:48),m(cid:48))|c(cid:48) ∈ OC}
15
16
17
18
19
/* Shredding unreachable methods */
20 Methods ← {(c,m)|c ∈ E ∪ I,m∈ public methods of c}
21 while Methods is different from the last iteration do
22
23
24
Methods ← Methods∪ (c(cid:48),m(cid:48))
for (c,m,c(cid:48),m(cid:48)) ∈ CG do
for (c,m) ∈ Methods do
25 return (Classes,Methods)
Shredding unreachable methods. We incorporate a new
technique called Shredding to eliminate code that is unreach-
able at compile time. Shredding is different from partitioning
or program slicing because it does not change the control ﬂow
of the enclave, and is more similar to dead code analysis [62].
We shred both classes and methods within the class to
reduce the footprint of enclave code. By shredding methods,
we can subsequently remove classes and methods which are
only used inside the unreachable methods. As described in
Algorithm 1, the analysis starts with entry classes and classes
listed by the  rules, and then recursively includes
methods that are reachable inside the enclave. With points-
to analysis, we can conservatively identify methods that are
possible callees of a polymorphic invocation to a generic class
or an interface.
Static ﬁelds. The one exception to strict enclave isolation
is that enclave code in Civet may access static ﬁelds and
methods outside of an enclave. If a trusted class access a
static ﬁeld or calls a static method inside the enclave, Civet
510    29th USENIX Security Symposium
USENIX Association
includes the target class inside the enclave. If a static ﬁeld
is directly updated by another trusted class, Civet allows this