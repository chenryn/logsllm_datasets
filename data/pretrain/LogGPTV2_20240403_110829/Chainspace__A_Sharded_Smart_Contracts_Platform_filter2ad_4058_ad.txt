and references (see Figure 6). Furthermore, those inputs must
be managed by different nodes within the system to ensure
that load of accepting transactions is distributed across them.
V. SECURITY AND CORRECTNESS
A. Security & Correctness of S-BAC
The S-BAC protocol guarantees a number of key properties,
on which rest the security of Chainspace, namely liveness
consistency, and validity. Before proceeding with stating those
properties in details, and proving them we note three key
invariants, that nodes may decide:
•
LOCALPREPARED(commit / abort, T): A node con-
siders that LOCALPREPARED(commit / abort, T) for
a shard holds, if it receives at least f + 1 distinct
signed messages from nodes in the shard, stating ‘pre-
pared(commit, T)’ or ‘prepared(abort, T)’ respectively.
As a special case a node automatically concludes
LOCALPREPARED(commit / abort, T) for a shard it
is a member of, if all the preconditions necessary to
provide that answer are present when an ‘prepare(T)’
is sequenced.
• ALLPREPARED(commit, T): A node considers that
‘ALLPREPARED(commit, T)’ holds if it believes that
‘LOCALPREPARED(commit, T)’ holds for all shards
with concerned nodes for T . Note this may only
be decided after reaching a conclusion (e.g. through
receiving signed messages) about all shards.
SOMEPREPARED(abort, T): A node considers that
‘SOMEPREPARED(abort, T)’ holds if it believes that
‘LOCALPREPARED(abort, T)’ holds for at least one
shard with concerned nodes for T . This may be
concluded after only reaching a conclusion for a single
shard, including the shard the node may be part of.
•
Liveness ensures that transactions make progress once
proposed by a user, and no locks are held indeﬁnitely on
objects, preventing other transactions from making progress.
8
S-BAC Theorem 1. Liveness: Under the ‘honest shards’ threat
model, a transaction T that is proposed to at least one honest
concerned node, will eventually result in either being committed
or aborted, namely all parties deciding accept(commit, T) or
accept(abort, T).
Proof: We rely on the liveness properties of the byzantine
agreement (shards with only f nodes will reach a consensus on a
sequence), and the broadcast from nodes of shards to all other nodes of
shards, including the shards that manage transaction outputs. Assuming
prepare(T) has been given to an honest node, it will be sequenced
withing an honest shard BFT sequence, and thus a prepared(commit,
T) or prepared(abort, T) will be sent from the 2f + 1 honest nodes of
this shard, to the 2f + 1 nodes of the other concerned shards. Upon
receiving these messages the honest nodes from other shards will
schedule a prepare(T) message within their shards, and the BFT will
eventually sequence it. Thus the user and all other honest concerned
nodes will receive enough ‘prepared’ messages to decide whether to
proceed with ‘ALLPREPARED(commit, T)’ or ‘SOMEPREPARED(abort,
T)’ and proceed with sequencing them through BFT. Eventually, each
shard will sequence those, and decide on the appropriate ‘accept’.
The second key property ensures that the execution of all
transactions could be serialized, and thus is correct.
S-BAC Theorem 2. Consistency: Under the ‘honest shards’
threat model, no two conﬂicting transactions, namely transac-
tions sharing the same input will be committed. Furthermore,
a sequential executions for all transactions exists.
Proof: A transaction is committed only if some nodes conclude
that ‘ALLPREPARED(commit, T)’, which presupposes all shards have
provided enough evidence to conclude ‘LOCALPREPARED(commit,
T)’ for each of them. Two conﬂicting transaction, sharing an input
or reference, must share a shard of at least 3f + 1 concerned nodes
for the common object—with at most f of them being malicious.
Without loss of generality upon receiving the prepare(T) message
for the ﬁrst transaction, this shard will sequence it, and the honest
nodes will emit messages for all to conclude ‘ALLPREPARED(commit,
T)’—and will lock this object until the two phase protocol concludes.
Any subsequent attempt to prepare(T’) for a conﬂicting T’ will result
in a LOCALPREPARED(abort, T’) and cannot yield a commit, if all
other shards are honest majority too. After completion of the ﬁrst
‘accept(commit, T)’ the shard removes the object from the active set,
and thus subsequent T’ would also lead to SOMEPREPARED(abort,
T’). Thus there is no path in the chain of possible interleavings of
the executions of two conﬂicting transactions that leads to them both
being committed.
S-BAC Theorem 3. Validity: Under the ‘honest shards’ threat
model, a transaction may only be committed if it is valid
according to the smart contract checkers matching the traces
of the procedures it executes.
Proof: A transaction is committed only if some nodes conclude
that ‘ALLPREPARED(commit, T)’, which presupposes all shards have
provided enough evidence to conclude ‘LOCALPREPARED(commit,
T)’ for each of them. The concerned nodes include at least one shard
per input or reference object for the transaction; for any contract c
represented in the transaction, at least one of those shards will be
managing object from that contract. Each shard checks the validity
rules for the objects they manage (ensuring they are active, and not
locked) and the contracts those objects are part of (ensuring the
calls to c pass its checker) in order to LOCALPREPARED(accept, T).
Thus if all shards say LOCALPREPARED(accept, T) to conclude that
‘ALLPREPARED(commit, T)’, all object have been checked as active,
and all the contract calls within the transaction have been checked by
at least one shard—whose decision is honest due to at most f faulty
nodes. If even a single object is inactive or locked, or a single trace
for a contract fails to check, then the honest nodes in the shard will
emit ‘prepared(abort, T)’ upon sequencing ‘prepare(T)’, and the ﬁnal
decision will be ‘SOMEPREPARED(abort, T)’.
B. Auditability
In the previous sections we show that if each shard contains
at most f faulty nodes (honest shard model), the S-BAC
protocol guarantees consistency and validity. In this section
we argue that if this assumption is violated, i.e. one or more
shards contain more than f byzantine nodes each, then honest
shards can detect faulty shards. Namely, enough auditing
information is maintained by honest nodes in Chainspace to
detect inconsistencies and attribute them to speciﬁc shards (or
nodes within them).
The rules for transaction validity are summarized in Figure 2.
Those rules are checked in a distributed manner: each shard
keeps and checks the active or inactive state of objects assigned
to it; and also only the contract checkers corresponding to the
type of those objects. An honest shard emits a proposed(T,
commit) for a transaction T only if those checks pass, and
proposed(T, abort) otherwise or if there is a lock on a relevant
object. A dishonest shard may emit proposed(T, *) messages
arbitrarily without checking the validity rules. By deﬁnition,
an invalid transaction is one that does not pass one or more of
the checks deﬁned in Figure 2 at a shared, for which the shard
has erroneously emitted a proposed(T, commit) message.
Security Theorem 3. Auditability: A malicious shard (with
more than f faulty nodes) that attempts to introduce an invalid
transaction or object into the state of one or more honest
shards, can be detected by an auditor performing a full audit
of the Chainspace system.
Proof: We consider two hash-chains from two distinct shards.
We deﬁne the pair of them as being valid if (1) they are each valid
under full audit, meaning that a re-execution of all their transactions
under the messages received yields the same decisions to commit
or abort all transactions; and (2) if all prepared(T,*) messages in
one chain are compatible with all messages seen in the other chain.
In this context ‘compatible’ means that all prepared(T,*) statements
received in one shard from the other represent the ‘correct’ decision
to commit or abort the transaction T in the other shard. An example
of incompatible message would result in observing a proposed(T,
commit) message being emitted from the ﬁrst shard to the second,
when in fact the ﬁrst shard should have aborted the transaction, due
to the checker showing it is invalid or an input being inactive.
Due to the property of digital signatures (unforgeability and non-
repudiation), if two hash-chains are found to be ‘incompatible’, one
belonging to an honest shard and one belonging to a dishonest shard,
it is possible for everyone to determine which shard is the dishonest
one. To do so it sufﬁces to isolate all statements that are signed by
each shard (or a peer in the shard)—all of which should be self-
consistent. It is then possible to show that within those statements
there is an inconsistency—unambiguously implicating one of the two
shards in the cheating. Thus, given two hash-chains it is possible
to either establish their consistency, under a full audit, or determine
which belongs to a malicious shard.
Note that the mechanism underlying tracing dishonest shards
is an instance of the age-old double-entry book keeping1: shards
1The ﬁrst reported use is 1340AD [LW94].
9
keep records of their operations as a non-repudiable signed hash-
chain of checkpoints—with a view to prove the correctness of
their operations. They also provide non-repudiable statements
about their decisions in the form of signed proposed(T,*)
statements to other shards. The two forms of evidence must
be both correct and consistent—otherwise their misbehaviour
is detected.
VI. SYSTEM AND APPLICATIONS SMART CONTRACTS
A. System Contracts
The operation of a Chainspace distributed ledger itself
requires the maintenance of a number of high-integrity high-
availability data structures. Instead of employing an ad-hoc
mechanism, Chainspace employs a number of system smart
contracts to implement
instantiation of
Chainspace is the combination of nodes running the basic
S-BAC protocol, as well as a set of system smart contracts
providing ﬂexible policies about managing shards, smart
contract creation, auditing and accounting. This section provides
an overview of system smart contracts.
those. Effectively,
Shard management. The discussion of Chainspace so far,
has assumed a function φ(o) mapping an object o to nodes
forming a shard. However, how those shards are constituted
has been abstracted. A smart contract ManageShards is
responsible for mapping nodes to shards. ManageShards
initializes a singleton object of type MS.Token and provides
three procedures: MS.create takes as input a singleton object,
and a list of node descriptors (names, network addresses and
public veriﬁcation keys), and creates a new singleton object
and a MS.Shard object representing a new shard; MS.update
takes an existing shard object, a new list of nodes, and 2f + 1
signatures from nodes in the shard, and creates a new shard
object representing the updated shard. Finally, the MS.object
procedure takes a shard object, and a non-repudiable record of
malpractice from one of the nodes in the shard, and creates
a new shard object omitting the malicious shard node—after
validating the misbehaviour. Note that Chainspace is ‘open’ in
the sense that any nodes may form a shard; and anyone may
object to a malicious node and exclude it from a shard.
Smart-contract management. Chainspace is also ‘open’ in
the sense that anyone may create a new smart contract, and this
process is implemented using the ManageContracts smart con-
tract. ManageContracts implements three types: MC.Token,
MC.Mapping and MC.Contract. It also implements at least
one procedure, MC.create that takes a binary representing a
checker for the contract, an initialization procedure name that
creates initial objects for the contract, and the singleton token
object. It then creates a number of outputs: one object of type
MC.Token for use to create further contracts; an object of
type MC.Contract representing the contract, and containing
the checker code, and a mapping object MC.mapping encoding
the mapping between objects of the contract and shards within
the system. Furthermore, the procedure MC.create calls the
initialization function of the contract, with the contract itself
as reference, and the singleton token, and creates the initial
objects for the contract.
Note that this simple implementation for ManageContracts
does not allow for updating contracts. The semantics of such
an update are delicate, particularly in relation to governance
and backwards compatibility with existing objects. We leave
the deﬁnitions of more complex, but correct, contracts for
managing contracts as future work. In our ﬁrst implementation
we have hardcoded ManageShards and ManageContracts.
Payments for processing transactions. Chainspace is an open
system, and requires protection againt abuse resulting from
overuse. To achieve this we implement a method for tracking
value through a contract called CSCoin.
The CSCoin contract creates a ﬁxed initial supply of coins—
a set of objects of type The CSCoin.Account that may only be
accessed by a user producing a signature veriﬁed by a public
key denoted in the object. A CSCoin.transfer procedure allows
a user to input a number of accounts, and transfer value between
them, by producing the appropriate signature from incoming
accounts. It produces a new version of each account object
with updated balances. This contract has been implemented in
Python with approximately 200 lines of code.
The CSCoin contract is designed to be composed with other
procedures, to enable payments for processing transactions.
The transfer procedure outputs a number of local returns
with information about the value ﬂows, that may be used in
calling contracts to perform actions conditionally on those ﬂows.
Shards may advertise that they will only consider actions valid
if some value of CSCoin is transferred to their constituent
nodes. This may apply to system contracts and application
contracts.
B. Application level smart contracts
This section describes some examples of privacy-friendly
smart contracts and showcases how smart contract creators may
use Chainspace to implement advanced privacy mechanisms.
Smart-Meter Private Billing.
We implement a basic private smart-meter billing mecha-
nism [JJK11, RD12] using the contract SMet: it implements
three types SMet.Token, SMet.Meter and SMet.Bill; and
three procedures, SMet.createMeter, SMet.AddReading, and
SMet.computeBill. The procedure SMet.createMeter takes
as input the singletone token and a public key and signature as
local parameters, and it outputs a SMet.Meter object tied to this
meter public key if the signature matches. SMet.Meter objects
represent a collection of readings and some meta-data about the
meter. Subsequently, the meter may invoke SMet.addReading
on a SMet.Meter with a set of cryptographic commitments
readings and a period identiﬁer as local parameters, and a valid
signature on them. A signature is also included and checked to
ensure authenticity from the meter. A new object SMet.Meter
is output appending the list of new readings to the previous
ones. Finally, a procedure SMet.computeBill is invoked with
a SMet.Meter and local parameters a period identiﬁer, a set
of tariffs for each reading in the period, and a zero-knowledge
proof of correctness of the bill computation. The procedure
outputs a SMet.Bill object, representing the ﬁnal bill in plain
text and the meter and period information.
This proof of correctness is provided to the checker—
rather than the secret readings—which proves that the readings
matching the available commitments and the tariffs provided
10
yield the bill object. The role of the checker, which checks
public data, in both those cases is very different from the role of
the procedure that is passed secrets not available to the checkers
to protect privacy. This contracts has been implemented in about
200 lines of Python code and is evaluated in section Section VII.
A Platform for Decision Making. An additional example of
Chainspace’s privacy-friendly application is a smart voting
system. We implement the contract SVote with three types,
SVote.Token, SVote.Vote and SVote.Tally; and three proce-
dures.
SVote.createElection, consumes a singleton token and
takes as local parameters the options, a list of all voter’s public
key, the tally’s public key, and a signature on them from the tally.
It outputs a fresh SVote.Vote object, representing the initial
stage of the election (all candidates having a score of zero)
along with a zero-knowledge proof asserting the correctness
of the initial stage.
SVote.addVote, is called on a SVote.Vote object and
takes as local parameters a new vote to add, homomorphically
encrypted and signed by the voter. In addition, the voter
provides a zero-knowledge proof certifying that her vote is a
binary value and that she voted for exactly one option. The
voter’s public key is then removed from the list of participants
to ensure that she cannot vote more than once. If all proofs are