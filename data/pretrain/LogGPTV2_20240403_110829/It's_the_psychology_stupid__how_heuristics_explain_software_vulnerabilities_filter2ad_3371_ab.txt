15.
16.
17.
18.
19. }
20. // rest of the script
21. ?>
}
else {
}
if ($userinfo[$_POST[’username’]] ==
md5($_POST[’password’])) {
// Successful authentication
echo "Welcome to Bank ABC."
// Invalid login
echo "Login failed."
Figure 1: Brute force password exhaustion vulnerability scenario.
4. THE VULNERABILITY SCENARIOS
Each developer session exercised six vulnerabilities, where ﬁve
are well-known and studied by the security community for years
and one is relatively new, initially reported in vulnerability databases
in 2013. In this section, we describe our IRB-approved study with
these vulnerabilities, our psychological manipulation through dif-
ferent information conditions, and how the results are measured.
The ﬁve well-know vulnerabilities are buffer overﬂow [15], cross-
site scripting (XSS) [16], SQL injection [17], time-to-check-to-
time-to-use (TOCTTOU) [19], and ﬁnally an authentication vul-
nerability which can lead to brute-force password or dictionary at-
tacks [20].
Figure 1 illustrates the brute force authentication vulnerability
scenario. Developers were asked to consider a hypothetical bank-
ing application that requires users to authenticate themselves. A
user is prompted to provide a user name and a password, which
are veriﬁed before any access is granted. Developers were told that
knowledge of PHP was not required, and the snippet of PHP code
represented a simpliﬁed version of this authentication process. The
scenario also mentioned that method isset determines whether a
variable is set and is not NULL.
The code is vulnerable because different messages are given for
valid and invalid user login, as shown in line 6, 13 and 17 in Fig-
ure 1. This helps an adversary to discover valid user names. In the
controlled condition, developers were asked the following warm-
up questions: What is the user input to this program? What hap-
pens when this code executes? These warm-up questions were
present in all the scenarios in the controlled condition. Then the
developer was asked to modify this code to allow a user to log in
as guest if she enters a user name of guest. In this situation, the
user will have restricted access to the system resources. The de-
veloper was told to consider places that might be improved while
the developer was modifying the code. The goal was to give devel-
opers who were aware of any security concerns an opportunity to
address them. This way, we also verify the developer’s willingness
or motivations to improve the code.
The last vulnerability is about the Python SSL API, which makes
web applications vulnerable to man-in-the-middle attacks [18]. An
example is given in Figure 2. In the ﬁgure, function wrap_socket
is used by a client to open an SSL connection with a server. Nor-
mally when an application (SSL client) checks the server’s SSL cer-
tiﬁcates, it ensures that there is a chain-of-trust from a root certiﬁ-
cate (preloaded onto the system) to the provided certiﬁcate. While
the end-to-end encryption of SSL provides integrity and conﬁden-
tiality, certiﬁcate checking validates the authenticity of the server
site. However, function wrap_socket in Python does not vali-
date certiﬁcates received from the server. As a result of this vulner-
ability, any malicious party can provide a certiﬁcate claiming to be
an ofﬁcial website, and the fake certiﬁcate will be trusted.
(cid:21)(cid:28)(cid:27)
import socket, ssl
1.
2.
3.
4.
5.
6.
7.
8.
sock = socket.socket()
sock.connect((HOSTNAME, PORTNUMBER))
# wrap socket to add SSL support
ssl_sock = ssl.wrap_socket(sock,
cert_reqs = ssl.CERT_REQUIRED,
ca_certs =
"/etc/ssl/certs/ca-certificates.crt")
9.
10. ...
11. print("Successful SSL connection")
12. # transfer data between client and server
13. ...
14. ssl_sock.close()
Figure 2: The Python SSL vulnerability scenario.
Figure 2 shows the Python SSL scenario in the survey. Devel-
opers ﬁrst received basic information about how SSL works, and
then were asked to consider an SSL client written in Python. In
the priming condition, developers were asked the following ques-
tions: Could a developer experience unexpected results when run-
ning such code? What could be examples of these unexpected re-
sults and where do they appear in the code?
In the explicit condition for all scenarios, subjects were asked
the following questions: This code has a vulnerability (security
ﬂaw) that allows attackers to violate certain security policies of the
[web application/program]. Can you pinpoint the problem? Please
describe the vulnerability and where it occurs. Why do you think
that developers have problems pinpointing this particular problem?
Following the explicit conditions, subjects responded to open-
ended questions that addressed the manipulation of information:
(i) Were all the programming scenarios and associated questions
clear? If not, what confused you? (ii) When you were asked to
modify the code, were you suspecting to ﬁnd vulnerabilities? If
not, why do you think you missed it? (iii) Did asking you about
unexpected results cue you to think about potential vulnerabilities
in the code? (iv) Did explicitly asking you to ﬁnd the vulnerability
force you to change your approach while examining the code and
answering the subsequent questions? If so, explain.
The participants were also asked about their personal experience
with computer security (have you taken computer security classes?
If so did these classes help you pinpoint vulnerabilities in the snip-
pets of code?), their familiarity with each of the tested vulnerabil-
ities (Are you familiar with [the exempliﬁed] vulnerabilities? If so
please explain how your knowledge about these common vulner-
abilities inﬂuenced or did not inﬂuence how you approached the
scenarios?), and whether they will be more aware of these vulner-
abilities when developing new projects (Now that you are aware
of the different vulnerabilities, do you think you will think about
vulnerabilities in future programming tasks?). To leverage the edu-
cational purposes of the study, subjects were thoroughly debriefed
on each of the security vulnerabilities and subsequently debriefed
on the true purpose of the study. Due to space limitations, only two
scenarios are shown in Figures 1 and 2.
In order to ensure a consistent measure for the accuracy of sub-
jects’ responses, each response was graded by at least two experi-
menters. Accuracy was measured for each response on a scale from
zero (i.e., completely incorrect) to two (i.e., completely correct). A
score of one signiﬁed an incomplete but correct response to the
question, whereas a score of two indicated that the subject had cor-
rectly pinpointed the speciﬁc vulnerability. A separate score was
included for each question signifying whether or not participants
modiﬁed the code in a way that addressed the particular security
vulnerability.
5. RESULTS AND ANALYSIS
A total of 84 developers agreed to take the survey. From this
set, 47 surveys were considered in this section as the respondents
worked through all six scenarios and answered all the debrief open-
ended questions. Table 1 shows the distribution of the participants
Occupation
Percentage
(senior undergraduates and
Developers from the industry
Students
graduate students)
CS Faculty
Other occupations related to software
development (e.g., managers and testers)
60%
23%
6%
11%
Table 1: Participant’s occupations.
Educational background
Percentage
Doctoral degree
Master’s degree
4-year college degree
Not completed 4-year college degree
22%
34%
38%
6%
Table 2: Participant’s educational background.
according to their occupation, and Table 2 describes their educa-
tional backgrounds. Participants ranged from 20-52 years of age
(M = 31) and approximately 81% of participants were male and
19% were female. The majority of the participants (86%) have
a degree in computer science or related majors. All participants
who reported not having a degree are senior undergraduate students
working towards a degree. Approximately 66% of the participants
have never taken a security class in college or any type of security
training in the course of their careers.
5.1 Statistical Results
This subsection presents the statistical results of our study. The
results described in this section use analysis of variance (ANOVA)
to analyze the differences between group means and their associ-
ated procedures (such as "variation" among and between groups)
[23]. ANOVA is a generalization of t-tests to more than two groups.
A two-sample t-test is a statistical test that examines whether two
samples are different.
It is commonly used when the variances
of two normal distributions are unknown and when an experiment
uses a small sample size. Both ANOVA and t-tests compute the
ratio between the obtained difference between the means and the
mean difference expected by chance. The goal is to determine
whether the obtained difference between means are larger than ex-
pected by chance, which yields a larger F value.
In ANOVA, the denominator of the F-ratio is the error variance
or mean squared error (MSe), and measures how much variance is
expected if there are no systematic treatment effects and no indi-
vidual differences contributing to the variability of scores. A value
of p < 0.05 means that the variation seen due to the manipulation
of the variables has a probability of at least 95% certainty. The
Pearson correlation (r) measures the degree of linear relationship
between two variables.
5.1.1 Variables Used in Analysis
Table 4 summarizes the frequencies and mean for the variables
used in this analysis. Total score is the maximum score that a par-
ticipant could have obtained on a session. The Missing line repre-
sents particular questions within a scenario that were not answered
by the participants. The Explicit variable indicates whether the re-
Gender
Age
Occupation
Level of Education
Total Score
Explicit
Degree
Security Classes
N Min Max Mean
47
1.19
30.96
47
1.68
47
4.68
47
27.63
40
44
1.11
1.14
44
44
1.66
1
20
1
1
16
1
1
1
2
52
4
8
36
2
2
2
Std. Dev.
0.398
7.049
1.002
1.200
4.301
0.321
0.347
0.479
Table 3: Descriptive statistics for the variables used in analysis.
(cid:21)(cid:28)(cid:28)
N
Valid
Missing
Mean
Gender
47
0
1.19
Age Occupation Level of Education Total Score Explicit Degree
47
0
47
0
47
0
40
7
44
3
44
3
30.96
1.68
4.68
27.63
1.11
1.14
Table 4: Frequencies for the variables used in the analysis.
Occupation
Pearson Correlation
Sig. (2-tailed)
N
Pearson Correlation
Level of Education
Sig. (2-tailed)
Total Score
Degree
N
Pearson Correlation
Sig. (2-tailed)
N
Pearson Correlation
Sig. (2-tailed)
N
Pearson Correlation
Security Classes
Sig. (2-tailed)
N
Occupation Level of Education Total Score Degree
0.320
0.034
-0.262
0.102
0.058
0.698
1
47
0.058
0.698
47
-0.262
0.102
40
0.320
0.034
44
0.058
0.709
44
47
1
47
0.168
0.301
40
-0.168
0.277
44
-0.070
0.653
44
40
0.168
0.301
40
1
40
-0.305
0.056
40
-0.313
0.050
40
44
-0.168