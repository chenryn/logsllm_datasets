前几天在社区投稿了[GOAD靶场](https://github.com/Orange-Cyberdefense/GOAD)的writeup：
**[域渗透GOAD(Game Of Active Directory) v2（一）](https://xz.aliyun.com/t/12137)**
**[域渗透GOAD(Game Of Active Directory) v2（二）](https://xz.aliyun.com/t/12138)**
**[域渗透GOAD(Game Of Active Directory) v2（三）](https://xz.aliyun.com/t/12139)**
**[域渗透GOAD(Game Of Active Directory) v2（四）](https://xz.aliyun.com/t/12140)**
应师傅们的留言要求，在这里把靶场的搭建过程详细写一下
按照README中的说法，整个搭建过程分两步：
  1. providing : it is made with vagrant, it download and run empty windows box.
  2. provisioning : it is made with ansible, it will install all the stuff to make the lab running like an active directory network
翻译一下就是，使用`vagrant`来创建各个虚拟机(虚拟化平台可以选择VirtualBox和VMware)，使用`ansible`自动化配置各虚拟机内的环境
`vagrant`阶段比较简单，创建虚拟机就行了，而`ansible`阶段需要与windows虚拟机进行大量的交互，很容易失败
官方是推荐在Linux搭建的，考虑到很多师傅只有Windows的物理机，我把在两个平台搭建的方法都写详细一些
如果准备在Windows上搭建的师傅，建议也看一下Linux的部分，有些对步骤和命令的说明
## 在Linux上搭建
我的环境：
  * Ubuntu 16.04
  * Intel Xeon Silver 4210R CPU @ 2.40GHz
  * 64G 内存
在Linux上没有安装VMware的经验，所以这里的虚拟化平台我就选择VirtualBox。
架构如下，需要在宿主机安装virtualbox+vagrant(管理靶机)和docker(安装ansible):
### 1.安装virtualbox
官方文档：
    sudo apt install virtualbox virtualbox-ext-pack
### 2.安装vagrant
官方文档：
不要直接`sudo apt install vagrant` 因为ubuntu默认源里的vagrant是1.8.1版本 太旧了 最新版已经是2.3.4了
可以添加vagrant的源然后安装
    wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
    sudo apt update && sudo apt install vagrant
也可以直接下载安装包
    wget https://releases.hashicorp.com/vagrant/2.3.4/vagrant_2.3.4-1_amd64.deb
    sudo dpkg -i vagrant_2.3.4-1_amd64.deb
这里顺便说几个vagrant的常用命令
  * vagrant box 查看/管理下载的各个虚拟机镜像
  * vagrant up/halt/reload/destroy 按照vagrantfile 启动/关闭/重启/删除 虚拟机环境
  * vagrant snapshot 查看/管理各个虚拟机的快照
### 3.克隆GOAD仓库
    git clone https://github.com/Orange-Cyberdefense/GOAD.git
    # 嫌慢的话可以用加速地址，这个加速地址也支持IPV6，还是很爽的
    git clone https://proxy.zyun.vip/https://github.com/Orange-Cyberdefense/GOAD.git
### 4.修改Vagrantfile配置文件
切换到GOAD目录下，有一个Vagrantfile文件，下边是最新版的默认配置内容：
    Vagrant.configure("2") do |config|
    # Uncomment this depending on the provider you want to use
    ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'
    # ENV['VAGRANT_DEFAULT_PROVIDER'] = 'vmware_desktop'
    boxes = [
      # windows server 2022 : don't work for now
      #{ :name => "DC01",  :ip => "192.168.56.10", :box => "StefanScherer/windows_2022", :box_version => "2021.08.23", :os => "windows"},
      # windows server 2019
      { :name => "DC01",  :ip => "192.168.56.10", :box => "StefanScherer/windows_2019", :box_version => "2021.05.15", :os => "windows"},
      # windows server 2019
      { :name => "DC02",  :ip => "192.168.56.11", :box => "StefanScherer/windows_2019", :box_version => "2021.05.15", :os => "windows"},
      # windows server 2016
      { :name => "DC03",  :ip => "192.168.56.12", :box => "StefanScherer/windows_2016", :box_version => "2017.12.14", :os => "windows"},
      # windows server 2019
      #{ :name => "SRV01", :ip => "192.168.56.21", :box => "StefanScherer/windows_2019", :box_version => "2020.07.17", :os => "windows"},
      # windows server 2019
      { :name => "SRV02", :ip => "192.168.56.22", :box => "StefanScherer/windows_2019", :box_version => "2020.07.17", :os => "windows"},
      # windows server 2016
      { :name => "SRV03", :ip => "192.168.56.23", :box => "StefanScherer/windows_2016", :box_version => "2019.02.14", :os => "windows"}
      # ELK
    # { :name => "elk", :ip => "192.168.56.50", :box => "bento/ubuntu-18.04", :os => "linux",
    #   :forwarded_port => [
    #     {:guest => 22, :host => 2210, :id => "ssh"}
    #   ]
    # }
    ]
    # BUILD with a full up to date vm if you don't want version with old vulns
    # ansible versions boxes : https://app.vagrantup.com/jborean93
    # boxes = [
    #   # windows server 2019
    #   { :name => "DC01",  :ip => "192.168.56.10", :box => "jborean93/WindowsServer2019", :os => "windows"},
    #   # windows server 2019
    #   { :name => "DC02",  :ip => "192.168.56.11", :box => "jborean93/WindowsServer2019", :os => "windows"},
    #   # windows server 2016
    #   { :name => "DC03",  :ip => "192.168.56.12", :box => "jborean93/WindowsServer2016", :os => "windows"},
    #   # windows server 2019
    #   { :name => "SRV02", :ip => "192.168.56.22", :box => "jborean93/WindowsServer2019", :os => "windows"},
    #   # windows server 2016
    #   { :name => "SRV03", :ip => "192.168.56.23", :box => "jborean93/WindowsServer2016", :os => "windows"}
    # ]
      config.vm.provider "virtualbox" do |v|
        v.memory = 4000
        v.cpus = 2
      end
      config.vm.provider "vmware_desktop" do |v|
        v.vmx["memsize"] = "4000"
        v.vmx["numvcpus"] = "2"
      end
      # disable rdp forwarded port inherited from StefanScherer box
      config.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true, disabled: true
      # no autoupdate if vagrant-vbguest is installed
      if Vagrant.has_plugin?("vagrant-vbguest") then
        config.vbguest.auto_update = false
      end
      config.vm.boot_timeout = 600
      config.vm.graceful_halt_timeout = 600
      config.winrm.retry_limit = 30
      config.winrm.retry_delay = 10
      boxes.each do |box|
        config.vm.define box[:name] do |target|
          # BOX
          target.vm.provider "virtualbox" do |v|
            v.name = box[:name]
          end
          target.vm.box_download_insecure = box[:box]
          target.vm.box = box[:box]
          if box.has_key?(:box_version)
            target.vm.box_version = box[:box_version]
          end
          # issues/49
          target.vm.synced_folder '.', '/vagrant', disabled: true
          # IP
          target.vm.network :private_network, ip: box[:ip]
          # OS specific
          if box[:os] == "windows"
            target.vm.guest = :windows
            target.vm.communicator = "winrm"
            target.vm.provision :shell, :path => "vagrant/Install-WMF3Hotfix.ps1", privileged: false
            target.vm.provision :shell, :path => "vagrant/ConfigureRemotingForAnsible.ps1", privileged: false
            # fix ip for vmware
            if ENV['VAGRANT_DEFAULT_PROVIDER'] == "vmware_desktop"
              target.vm.provision :shell, :path => "vagrant/fix_ip.ps1", privileged: false, args: box[:ip]
            end
          else
            target.vm.communicator = "ssh"
          end
          if box.has_key?(:forwarded_port)
            # forwarded port explicit
            box[:forwarded_port] do |forwarded_port|
              target.vm.network :forwarded_port, guest: forwarded_port[:guest], host: forwarded_port[:host], host_ip: "127.0.0.1", id: forwarded_port[:id]
            end
          end
        end
      end
    end
  * 如果需要开启ELK虚拟机看一下采集的日志的话，需要将23-27行取消注释（别忘了再21行最后加逗号）
  * 重点是改一下46、47行的配置，如果你的宿主机硬件条件一般的话，每个虚拟机1C2G就可以了
  * 其他的不用修改
### 5.创建虚拟机
切换到GOAD目录下，执行该命令即可。
    vagrant up
如果是第一次搭建的话，会自动下载镜像文件，如果网速比较慢，建议挂screen/tmux来执行。
最终如下，五个虚拟机已经创建完成：
可以通过如下命令查看下载的 **镜像** ，当然你想修改的话把list换成remove等，具体看帮助手册
    vagrant box list
这里我安装过多次，可能有旧版本的，跟我不一样也没关系，缺的镜像会自动下载的。
### 6.构建ansible的docker镜像
这一步可能也比较慢，可以跟上一步同时弄。
前边说过了，ansible是用于自动化配置各虚拟机内的环境的，这里我推荐用docker的形式来搭建ansible
直接build即可：
    # 没有docker的话先安装：https://developer.aliyun.com/article/110806
    docker build -t goadansible .
如果嫌慢的话提前修改Dockerfile，换成清华或者其他的源
    RUN sed -i 's/http:\/\/archive\.ubuntu\.com\/ubuntu\//http:\/\/mirrors\.tuna\.tsinghua\.edu\.cn\/ubuntu\//g' /etc/apt/sources.list
    RUN sed -i 's/http:\/\/security\.ubuntu\.com\/ubuntu\//http:\/\/mirrors\.tuna\.tsinghua\.edu\.cn\/ubuntu\//g' /etc/apt/sources.list
    RUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
当然也可以直接拉取我的镜像：
    docker pull registry.cn-hangzhou.aliyuncs.com/u21h2/goadansible
    docker tag registry.cn-hangzhou.aliyuncs.com/u21h2/goadansible ansible
### 7.使用ansible配置虚拟机内环境
  * 首先尝试执行ansible-playbook main.yml
  * 错误较少的话重复执行ansible-playbook main.yml