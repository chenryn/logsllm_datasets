(e.g., turns on an LED), then there must have happened a sequence
of physical input events such that that sequence, when processed by
the application (as specified in the high-level source code), produces
that output event,” which is roughly equivalent to the concept of
robust safety in later literature [1]. This guarantee relies on standard
TEE security properties – i.e., strong software isolation and software
attestation – but also on a notion of secure I/O where physical I/O
channels can be connected to an enclave such that the application
enclaves maintain exclusive access over I/O peripherals.
Initially, our approach did not consider confidentiality and avail-
ability. Yet, our TEE-design [6] and a series of case studies in applica-
tion domains such as smart electricity metering, smart agriculture
and secure vehicular communications [4, 7, 8] did consider and
provide confidentiality. Most recently, in [2], we address the avail-
ability aspect and extend light-weight embedded TEE architectures
so as to provide strong temporal isolation guarantees to multiple,
mutually distrusting applications. To discuss the interplay of these
different concepts, we introduce an irrigation system as a use case.
2.1 Use Case: Automated Irrigation
Smart farming applications are an essential part of modern critical
infrastructure. An automated irrigation system, as illustrated in
Figure 1, would involve a series of light-weight sensors and ac-
tuators in the field that monitor soil moisture and control water
supply . The system can be connected to edge infrastructure or
cloud services for centralized configuration and maintenance, to
integrate reporting and billing, and to minimize water consumption
based on weather predictions. Naturally, smart farming systems are
security critical since malicious interactions can potentially lead to
huge costs and may destroy a crop; they also demand a high level
of dependability where events must be guaranteed to be processed
in a timely manner. With our approach to building such applica-
tions as event-driven systems, we intend to support developers
with an intuitive programming paradigm and automated enclave
deployment to achieve the security objectives highlighted below.
AppASancus - FieldEvManAppBDrv1Drv2OSTrustZone -DroneEvManAppBDrv1OSAppASancus - FieldEvManAppBDrv1Drv2OSTrustZone -GWEvManAppBOSTrustZone -GWEvManAppBOSSGX - CentralEvManAppBOSApplication enclaves &secure communication.Trust is established through(remote) attestation ofinteracting components.Local communication(between enclaves onthe same processor) issecured butnot depictedin this illustration. Toprovide availabilityguarantees (e.g. for AppA),a protected schedulerenclave needs to be addedto the Sancus nodes.Untrusted componentsMalicious interactionsor bugs in untrustedcode do not harmsecurity but may, onsome platforms, harmavailability or lead toresource exhaustion.Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea23942.2 Security Objective
We consider an open system as the basis for our framework. In this
open system, software is deployed dynamically and multiple stake-
holders may run applications on the same infrastructure, including
on the light-weight IoT and Edge hardware. Thus, we consider sce-
narios where arbitrary new code can be loaded at at run time and
we consider powerful attackers that can manipulate all the software
on the infrastructure (unless that software is isolated in enclaves),
can manipulate network traffic, but cannot break crypto. Attacks
against the hardware are out of scope.
Under this attacker model, isolation and mutual attestation of all
application components, including peripheral driver, results in the
initial authenticity and integrity guarantees, where all observed
outputs can be explained in terms of a trace of (authentic) inputs
and the (integrity protected) source code of the application. Using
the sealing capabilities of TEEs, this guarantee can be extended to
also provide confidentiality of application events and state. Our
availability extensions allow individual enclaves to execute with
strong guarantees for responsiveness and progress, which allows
for these enclaves to timely detect and react upon availability issues
across the application. We currently do not consider protection from
side-channel leakage as part of the framework but as part of the
developer’s task to address.
2.3 Secure I/O
Several TEEs such as ARM TrustZone and Sancus allow for I/O
peripherals to be exclusively controlled by the secure world or by
an enclave. In the case of Sancus, e.g., peripherals are controlled
through Memory-Mapped I/O. By mapping enclave memory over a
peripheral’s memory addresses, a driver enclave can gain exclusive
control and manage access to the peripheral. In our framework,
these driver enclaves effectively translate physical input and output
channels into application events and vice versa. Secure I/O is es-
sential for our security guarantee as it prevents application inputs
or outputs to be spoofed by software that is not part of the attested
application TCB. Our framework provides a notion of end-to-end
security by seamlessly integrating application enclaves on TEEs
that provide secure I/O with TEEs that do not.
2.4 Availability Guarantees
In [2], we extend Sancus towards a configurable security architec-
ture that provides a notion of guaranteed real-time execution for
dynamically loaded enclaves. We implement preemptive multitask-
ing and restricted atomicity on top of strong software isolation and
software attestation. Our approach enables the hardware to enforce
confidentiality and integrity protections while a decoupled small
software component can enforce availability and guarantee strict
deadlines of a bounded number of protected applications, with-
out introducing a notion of priorities amongst these applications.
This allows us to develop enclaves that can handle interrupts and
make progress with deterministic activation latencies, even in the
presence of a strong adversary with arbitrary code execution capa-
bilities. In the context of our authentic execution framework, these
enclaves can serve as a means to implement dependable sensing
and control loops, but also to provide a reliable notion of time and
progress across a distributed application, and to detect the lack of
progress in such applications.
2.5 Software Architecture & Deployment
Application code is developed using macros and annotations to de-
fine the name and scope of enclaves, and to label input and output
channels of each application component. A deployment descriptor
specifies which component is to be loaded on which target ma-
chine, and how the respective input and output channels are to
be linked together, and what communications interfaces are being
used. Component loading and communication are facilitated by
infrastructure software, which is untrusted regarding our security
properties but needs to be trusted regarding availability. Our frame-
work provides an enclave that facilitates the initial attestation and
key management steps during the automated deployment phase.
We build upon established software development tool chains for
the respective source languages and target architectures.
3 SUMMARY
We presented an open-source framework for developing heteroge-
neous distributed enclave applications with an event-driven pro-
gramming model. Our approach is distinguished by enabling an
open-system approach where distrusting stakeholders can share
processing resources, by supporting a range of TEEs, from the cloud
to edge and IoT devices, and by providing a unique set of security
and availability guarantees that enable advanced use cases, e.g., in
safety-critical sensing and actuation.
ACKNOWLEDGMENTS
This research is partially funded by the Research Fund KU Leuven,
the Flemish Research Programme Cybersecurity, and the SAFETEE
project at KU Leuven. This research has received funding under EU
H2020 MSCA-ITN action 5GhOSTS, grant agreement no. 814035.
Fritz Alder is supported by the Research Foundation Flanders.
REFERENCES
[1] Carmine Abate, Roberto Blanco, Deepak Garg, Catalin Hritcu, Marco Patrignani,
and Jérémy Thibault. 2019. Journey beyond full abstraction: Exploring robust
property preservation for secure compilation. In 2019 IEEE 32nd Computer Security
Foundations Symposium (CSF). IEEE, 256–25615.
[2] Fritz Alder, Jo Van Bulck, Frank Piessens, and Jan Tobias Mühlberg. 2021. Aion:
Enabling Open Systems through Strong Availability Guarantees for Enclaves. In
CCS ’21. ACM, Seoul, South Korea.
[3] P. Maene, J. Götzfried, R. de Clercq, T. Müller, F. Freiling, and I. Verbauwhede. 2017.
Hardware-Based Trusted Computing Architectures for Isolation and Attestation.
IEEE Trans. Comput. 99 (2017).
[4] Jan Tobias Mühlberg, Sara Cleemput, A. Mustafa Mustafa, Jo Van Bulck, Bart
Preneel, and Frank Piessens. 2016. An Implementation of a High Assurance
Smart Meter using Protected Module Architectures. In WISTP ’16 (LNCS, Vol. 9895).
Springer, Heidelberg, 53–69.
[5] Job Noorman, Jan Tobias Mühlberg, and Frank Piessens. 2017. Authentic Execution
of Distributed Event-Driven Applications with a Small TCB. In STM ’17 (LNCS).
Springer, Heidelberg.
[6] Job Noorman, Jo Van Bulck, Jan Tobias Mühlberg, Frank Piessens, Pieter Maene,
Bart Preneel, Ingrid Verbauwhede, Johannes Götzfried, Tilo Müller, and Felix
Freiling. 2017. Sancus 2.0: A Low-Cost Security Architecture for IoT Devices.
ACM Transactions on Privacy and Security (TOPS) 20 (2017), 7:1–7:33. Issue 3.
[7] Gianluca Scopelliti. 2020. Securing Smart Environments with Authentic Execution.
Master’s thesis. Politecnico Di Torino. https://distrinet.cs.kuleuven.be/software/
sancus/publications/scopelliti2020.pdf.
[8] Jo Van Bulck, Jan Tobias Mühlberg, and Frank Piessens. 2017. VulCAN: Effi-
cient Component Authentication and Software Isolation for Automotive Control
Networks. In ACSAC ’17. ACM, New York, NY, USA, 225–237.
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2395