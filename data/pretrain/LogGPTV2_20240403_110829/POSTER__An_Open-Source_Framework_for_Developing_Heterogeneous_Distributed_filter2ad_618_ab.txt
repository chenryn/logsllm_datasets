### Introduction

In the context of trusted execution environments (TEEs), ensuring that an output event (e.g., turning on an LED) is a result of a specific sequence of physical input events, as processed by the application according to its high-level source code, is a fundamental security requirement. This concept is closely related to robust safety in later literature [1]. The guarantee relies on standard TEE security properties, such as strong software isolation and software attestation, as well as secure I/O, where physical I/O channels are exclusively controlled by enclaves, ensuring exclusive access to I/O peripherals.

Initially, our approach did not consider confidentiality and availability. However, our TEE design [6] and subsequent case studies in domains like smart electricity metering, smart agriculture, and secure vehicular communications [4, 7, 8] addressed and provided confidentiality. Most recently, in [2], we extended lightweight embedded TEE architectures to provide strong temporal isolation guarantees, thereby addressing the availability aspect for multiple, mutually distrusting applications. To illustrate the interplay of these concepts, we use an automated irrigation system as a use case.

### 2.1 Use Case: Automated Irrigation

Smart farming applications are a critical part of modern infrastructure. An automated irrigation system, as shown in Figure 1, involves lightweight sensors and actuators in the field to monitor soil moisture and control water supply. The system can be connected to edge infrastructure or cloud services for centralized configuration, maintenance, reporting, billing, and weather-based water consumption optimization. Security is paramount in such systems, as malicious interactions can lead to significant costs and crop damage. Additionally, high dependability is required to ensure that events are processed in a timely manner. Our approach to building such applications as event-driven systems aims to support developers with an intuitive programming paradigm and automated enclave deployment, achieving the security objectives outlined below.

### 2.2 Security Objective

Our framework is designed for open systems where software is dynamically deployed, and multiple stakeholders may run applications on the same infrastructure, including lightweight IoT and Edge hardware. We consider scenarios where arbitrary new code can be loaded at runtime and assume powerful attackers who can manipulate all software on the infrastructure (except for isolated enclaves) and network traffic, but cannot break cryptography. Hardware attacks are out of scope.

Under this threat model, isolation and mutual attestation of all application components, including peripheral drivers, ensure initial authenticity and integrity. All observed outputs can be traced back to authentic inputs and integrity-protected source code. Using TEE sealing capabilities, this guarantee can be extended to provide confidentiality of application events and state. Our availability extensions allow individual enclaves to execute with strong responsiveness and progress guarantees, enabling timely detection and reaction to availability issues. Side-channel leakage protection is currently considered a developer's responsibility.

### 2.3 Secure I/O

Several TEEs, such as ARM TrustZone and Sancus, allow I/O peripherals to be exclusively controlled by the secure world or enclaves. In Sancus, for example, peripherals are controlled through Memory-Mapped I/O. By mapping enclave memory over a peripheral’s memory addresses, a driver enclave gains exclusive control and manages access. In our framework, these driver enclaves translate physical input and output channels into application events and vice versa. Secure I/O is essential for preventing spoofing of application inputs or outputs by untrusted software. Our framework ensures end-to-end security by integrating application enclaves on TEEs with secure I/O and those without.

### 2.4 Availability Guarantees

In [2], we extended Sancus to provide a configurable security architecture with guaranteed real-time execution for dynamically loaded enclaves. We implemented preemptive multitasking and restricted atomicity on top of strong software isolation and attestation. This approach allows the hardware to enforce confidentiality and integrity while a small, decoupled software component enforces availability and strict deadlines for a bounded number of protected applications, without introducing priorities. This enables enclaves to handle interrupts and make progress with deterministic activation latencies, even in the presence of a strong adversary. In our authentic execution framework, these enclaves support dependable sensing and control loops, reliable time and progress tracking, and detection of lack of progress in distributed applications.

### 2.5 Software Architecture & Deployment

Application code is developed using macros and annotations to define enclaves' names and scopes, and to label input and output channels of each component. A deployment descriptor specifies which components are loaded on which target machines, how their channels are linked, and what communication interfaces are used. Component loading and communication are facilitated by untrusted infrastructure software, which must be trusted for availability. Our framework provides an enclave for initial attestation and key management during the deployment phase. We build upon established software development toolchains for the respective source languages and target architectures.

### 3. Summary

We presented an open-source framework for developing heterogeneous distributed enclave applications with an event-driven programming model. Our approach supports an open-system model where distrusting stakeholders can share processing resources, supports a range of TEEs from cloud to edge and IoT devices, and provides unique security and availability guarantees. This enables advanced use cases, such as in safety-critical sensing and actuation.

### Acknowledgments

This research is partially funded by the Research Fund KU Leuven, the Flemish Research Programme Cybersecurity, and the SAFETEE project at KU Leuven. It has also received funding under EU H2020 MSCA-ITN action 5GhOSTS, grant agreement no. 814035. Fritz Alder is supported by the Research Foundation Flanders.

### References

[1] Carmine Abate, Roberto Blanco, Deepak Garg, Catalin Hritcu, Marco Patrignani, and Jérémy Thibault. 2019. Journey beyond full abstraction: Exploring robust property preservation for secure compilation. In 2019 IEEE 32nd Computer Security Foundations Symposium (CSF). IEEE, 256–25615.

[2] Fritz Alder, Jo Van Bulck, Frank Piessens, and Jan Tobias Mühlberg. 2021. Aion: Enabling Open Systems through Strong Availability Guarantees for Enclaves. In CCS ’21. ACM, Seoul, South Korea.

[3] P. Maene, J. Götzfried, R. de Clercq, T. Müller, F. Freiling, and I. Verbauwhede. 2017. Hardware-Based Trusted Computing Architectures for Isolation and Attestation. IEEE Trans. Comput. 99 (2017).

[4] Jan Tobias Mühlberg, Sara Cleemput, A. Mustafa Mustafa, Jo Van Bulck, Bart Preneel, and Frank Piessens. 2016. An Implementation of a High Assurance Smart Meter using Protected Module Architectures. In WISTP ’16 (LNCS, Vol. 9895). Springer, Heidelberg, 53–69.

[5] Job Noorman, Jan Tobias Mühlberg, and Frank Piessens. 2017. Authentic Execution of Distributed Event-Driven Applications with a Small TCB. In STM ’17 (LNCS). Springer, Heidelberg.

[6] Job Noorman, Jo Van Bulck, Jan Tobias Mühlberg, Frank Piessens, Pieter Maene, Bart Preneel, Ingrid Verbauwhede, Johannes Götzfried, Tilo Müller, and Felix Freiling. 2017. Sancus 2.0: A Low-Cost Security Architecture for IoT Devices. ACM Transactions on Privacy and Security (TOPS) 20 (2017), 7:1–7:33. Issue 3.

[7] Gianluca Scopelliti. 2020. Securing Smart Environments with Authentic Execution. Master’s thesis. Politecnico Di Torino. https://distrinet.cs.kuleuven.be/software/sancus/publications/scopelliti2020.pdf.

[8] Jo Van Bulck, Jan Tobias Mühlberg, and Frank Piessens. 2017. VulCAN: Efficient Component Authentication and Software Isolation for Automotive Control Networks. In ACSAC ’17. ACM, New York, NY, USA, 225–237.