Context sensitivity. To support context sensitivity, function call
statements need to be correctly handled for inter-procedure taint
propagation. According to our design, the taint modiﬁcations after
calling a callee function can also be described in a function taint
environment γf (.), by merging the return statement taint environ-
ments in the callee function using ∪l operation.
Before being applied, γf (.) needs to be transformed to the caller
function context since γf (.) is computed in the callee context. This
transformation is done in an instantiate function Inst : vcallee →
vcaller, which replaces the formal parameter variables in callee
function with the caller actual parameter variables in the call site of
caller function. Inst(.) also handles the side effect in the process
for the callee function variables, i.e., caused by changing the val-
ues of de-referenced pointer formal or global parameter variables,
using a context-sensitive pointer analysis explained later.
Field sensitivity. As shown in the example in §3, the header ﬁelds
related to protocol states in a network protocol are usually imple-
mented as a few ﬁelds of a composite type variable. Thus, it will
cause large numbers of FPs if we don’t distinguish same variable
with different ﬁelds and taint the whole variable like in some pre-
vious tools [2, 17]. We support ﬁeld sensitivity with the standard
technique of expanding each variable with an offset element in the
variable tuple. After adding this feature, both the intra- and inter-
procedure taint propagation logic need to be updated accordingly.
Adding offset element in variable tuple can also cause γf (.) to
keep increasing with same variable having different offset due to
recursive ﬁelds (e.g., next in linked list data structure) in a loop.
To solve this problem, we add an iteration limit of loops, which is
a common practice in ﬁeld-sensitive data ﬂow analysis.
Taint with pointer analysis. As shown in §3, network proto-
col implementations use pointer extensively, and in our example,
the leakage sink is changed with de-referencing a pointer, making
pointer analysis a must. In our design, we choose pointer analy-
sis to support referencing and de-referencing pointers when needed
during taint propagation. To better work with our taint analysis, our
pointer analysis is also ﬂow-, ﬁeld-, and context-sensitive based on
the traditional ﬂow-sensitive pointer analysis framework [23].
With this feature, our analysis has another environment, pointer
environment, P tr : v → {vi|i = 1, ..., k}, meaning that v points
to a set of variables {vi|i = 1, ..., k}. Like taint environment,
we associate each statement stmti with a pointer environment for
ﬂow-sensitive analysis. In inter-procedure case, the pointer rela-
tionship in a callee function is summarized to a a function pointer
environment P trcallee, and Inst(.) is also needed to transform the
variables to caller function context accordingly.
Note that parameter aliasing is a classic problem in summarizing
points-to relationship, which is typically solved by partial transfer
functions (PTF) [51]. In network protocol implementations, pointer
parameters typically are used for semantically different purposes,
e.g., tp for socket status and skb for the incoming packet in the
illustrative example (§3), thus we assume no parameter aliasing in
the current implementation. This may introduce inaccuracies, and
we plan to implement PTF for improvement in future work.
5.2 Function Summary
After taint analysis, the function summary are generated with 4
parts : taint summary, pointer summary, taint tracking summary,
and path summary.
392Statement/expression
Const, Sizeof (typ/str)
v
Sizeof (exp1)
Cast(exp1)
unop(exp1)
Taint operation
Texp = ∅
Texp = Ld(γ(v))
Texp = Ld(Texp1 )
Texp = Ld(Texp1 )
Texp = Ld(Texp1 )
biop(exp1, exp2)
exp : exp1?exp2 : exp3
v = exp
Asm({expini |i},
{voutj |j})
Texp = Ld(Texp1 ) ∪l Ld(Texp2 )
Texp = Lc(Texp1 ) ∪l Ld(Texp2 ) ∪l Ld(Texp3 )
γ(v) = Ld(Texp) ∪l Lc(∪l{Tctk |ctk ∈ CT })
γ(voutj ) = Ld(∪l{Texpini
|i)
∪lLc(∪l{Tctk |ctk ∈ CT })
A path from
path summary
End with sink?
Yes
No
Path property
Invalid
check
Not important
Important
Layered?
No
Yes
Output
Keep DFS
Discard
Table 2: Taint value calculation and propagation logic for intra-procedure propagation.
CT includes the constraints that the current statement is control dependent on.
Figure 4: Path analysis process in DFS path con-
struction and analysis framework.
Taint and pointer summaries. Taint and pointer summaries are
the function taint environment γf (.) and function pointer environ-
ment P trf (.) respectively (detailed in §5.1). After generated, they
are fed back into the taint analysis engine for subsequent analysis
to support inter-procedure taint and pointer analysis.
Taint tracking summary. As mentioned in §4.2, since we choose
summary-based approach over IFDS/IDE for scalability, tracking
taint propagation becomes unnatural. However, we do need this
tracking since it beneﬁts our vulnerability analysis by making the
taint result explainable. Thus, we design taint tracking summary
to fulﬁll this goal in PacketGuardian. Note that this summary has
another important beneﬁt for our analysis as it can help us locate
the indirect constraints of implicit ﬂow taint to obtain a complete
accept path and leakage path (detailed later in §6).
Like function taint and pointer environments, this summary is
speciﬁed by a tracking environment T rack : hv, ti → T R,
where t = γf (v) and T R is the set of track values. Each track
value describes one source for a taint value, which can come from
intra-procedure explicit ﬂow, intra-procedure implicit ﬂow, or inter-
procedure explicit or implicit ﬂow from a callee function. Since
explicit ﬂow is relatively easy to understand, to lower the tracking
overhead we only record the source ﬁle line numbers of the pro-
gram point passing the taint. For implicit ﬂows, we create a track
value for each ct in CT to make it precise.
For inter-procedure taint tracking, we don’t let the track value
propagate from callee to caller function like in taint and pointer
summaries. Otherwise, the track value set will increase accumula-
tively at each time of inter-procedure propagation, making the anal-
ysis hard to scale. More importantly, in that case each taint track-
ing summary will have complete taint history for each variable and
taint value pair, which is unnecessary since only a few important
variables need tracking. Thus, in our design, during function call
we only store a “function pointer” in the T R, and delay the actual
inter-procedure tracking computation till the vulnerability analysis
phase when needed. This “function pointer” is designed to have
complete context information to load the callee taint tracking sum-
mary and reconstruct the inter-procedure tainting path later.
Path summary. To meet the goal of outputting the accept and leak-
age paths for explaining the packet injection vulnerability, during
the taint analysis we also summarize the important paths. Like taint
tracking summary, recording the inter-procedure program paths is
not necessary, and we only record the intra-procedure program
paths, and keep a “function pointer”.
To satisfy the analysis requirements, the path we record has 2
parts, a constraint path and a path end point. The constraint path is
the same as CT mentioned earlier, and here the list of ct is those
ones that the path end point is control dependent on. To help ex-
plain the path and also enable further tracking of the expression
taint, we expand ct = {exp, Texp} with 3 elements: variable taint
value set {hvi, ti, T rack(hvi, tii)i|i = 1...k}, branch br, and line
number, where vi is a variable used in exp. Variable taint value
set gives ﬁne-grained information about the taint values and track
values for each variables used in ct, which helps the path pruning
and prioritizing detailed later in §6. Branch br records whether this
path takes the true branch of ct or the false branch of it.
The path end point can be in two forms: a function, or a sink-
related statement. The path end point of a function is designed to
serve for the role of “function pointer” mentioned earlier, and it
can also serve for the vulnerability analysis with a function sink,
e.g., accept_payload() in Fig. 2. The path end point of a
sink-related statement is designed to mainly serve for protocol state
leakage analysis when this statement is related to a channel acces-
sible to an off-path attacker. For example, this statement can be
modifying a public value in storage channels [10, 37], or related
to a special instruction in data timing channels (e.g., SSE instruc-
tions discussed by Andrysco et. al. [3]), etc. In our current imple-
mentation, we focus on storage channels and record the statement
changing a global variable, or the de-referenced value of a formal
or global parameters since they may point to a global variable de-
pending on the caller context.
6. PATH CONSTRUCTION AND VULNER-
ABILITY ANALYSIS
In this section, we ﬁrst introduce a path construction and analysis
framework, and then detail accept path analysis and protocol state
leakage analysis.
6.1 DFS Path Construction and Analysis
Framework
The difference between an accept path and a leakage path merely
lies in the analysis sink deﬁnition and the constraint analyzing and
ﬁltering rules that can be applied to reduce FPs. Thus, both anal-
ysis can be supported by a general path construction framework
following a DFS (depth-ﬁrst search) paradigm based on the path
summary. As mentioned in §5.2, each path in a path summary has
a constraint path part and a path end point part. Starting from an en-
try function, the DFS path construction process analyzes the paths
in the summary, passes the paths to the callee functions if the path
end point is a “function pointer” and continues the DFS process.
The process ends when it reaches the analysis sink deﬁned by an
analysis task, and output concatenated inter-procedure paths. Like
the inter-procedure propagation in taint analysis engine, here we
need to use the calling context stored in the “function pointer” and
Inst(.) to change the variable context.
Path analysis with implicit ﬂow tracking. In the path construc-
tion process, we analyze each path in the path summary following
393the procedure shown in Fig. 4. We ﬁrst check whether the path end
point is the analysis sink or whether it is a “function pointer” that
can call into the analysis sink. If not, this path is unrelated to the
analysis task and we discard this path. After that, the property of
the path is checked according to the purpose of the analysis task.
If its property is considered valid for the analysis, it will be further
judged on its importance; otherwise it is discarded. If its property is
considered important and the layered analysis mode is on, the path
result will be output. Otherwise, the DFS process continues to its
callee function. The layered analysis mode will be described later
in this section. When reaching the analysis sink, we only output the
path if it is considered important.
in Fig. 2,
For example,
The path property is determined by analyzing the variables and
variable taints of the constraints in the constraint path. These
constraints are directly related to the analysis, which we call di-
rect constraints. However, besides direct constraints there are
also other important constraints that the analysis sink depends
on.
the sequence number check on
line 2 in tcp_validate_incoming() is one of the most
important checks preventing off-path packet injection, but it is
not the constraint that accept_payload() is control depen-
dent on. This dependence is passed through the return value of
tcp_validate_incoming() to the direct constraint on line 3
in tcp_rcv_established(). In order to ﬁnd these indirect
constraints, we use T rack(hv, ti) in variable taint value set stored
in the path summary, and if t includes implicit ﬂow taints, we track
its taint path to the indirect constraint that passes these taint values.
Based on our taint tracking design, these indirect constraints can be
found in an inter-procedure fashion.
Layered path construction. To ensure minimum FNs, the path
pruning rules in our accept path and leakage path analysis prefer
to be conservative. However, this conservativeness may lead to
more FPs, causing heavy analysis overhead. This problem can be
quite serious for us since our output is program paths and nested
constraint can exponentially increase the path number. To mitigate
this problem, PacketGuardian supports a layered analysis mode,
which is included at the bottom of Fig. 4. In this mode, when the
path is important, we stop the DFS process and output the partial
results. With these partial results, tool users can ﬁlter out the paths
that are not of interest as early as possible, and feed the rest back to
the tool to continue the DFS. As shown in our evaluation later in §7,
this can largely reduce both the number of unimportant output paths
and the analysis time. To reduce manual effort, PacketGuardian
only stops when the path is considered important as this indicates
that some constraints on the path are tightly related to the analysis
but it is hard to automatically tell whether they are of interest.
6.2 Accept Path Analysis
In accept path analysis, the path is constructed and analyzed with
attacker-controlled data and accept functions as input. Attacker-
controlled data is usually the function parameters related the in-
coming packet (e.g., skb in Fig. 2), and accept functions are func-
tions that indicate the acceptance of the incoming packet, for exam-
ple copying data to upper layers, or terminating the channel. If it
is hard to ﬁnd such functions, PacketGuardian also supports adding
pseudo accept functions to label the analysis sink of interest.
Analysis sink check. In this analysis the analysis sink is a function,
so we only consider the paths with end points of functions in path
summary. Also, we only care about end point functions that are or
may call into the accept functions. Thus, before the analysis, we
ﬁrst create a list of such functions by a DFS crawling process, and
then in the analysis sink check discard the paths without an end
point function in the list.
Constraint path property check. In the path analysis, each con-
straint is determined with a property of protocol state check, weak
check, and strong check. For a constraint ct, we ﬁrst check whether
it is tainted by attacker-controlled data by looking at Texp, and if
not, it is a comparison related to a protocol state and thus labeled as
channel state check. If it is tainted through explicit ﬂows, we ﬁnd
out which variable v is attacker-controlled using the variable taint
set in ct, and use exp to understand the comparison this constraint
does for v.
If it is tainted through implicit ﬂows, the important
comparison is done in a indirect constraint and we use the tracking
described in §6.1 to ﬁnd it out. We only consider this constraint
to be weak check if (1) except v, all other variables are constants,
or (2) this constraint requires v to be non-equal to non-constant
variables. For the former, an attacker can easily spoof the corre-
sponding packet ﬁelds to pass the check, and for the latter, it is very
likely that a random value can pass the check. For all other cases,
we conservatively label the constraint as strong check to avoid FNs.
In the path construction framework, if the path has a strong check
constraint, it is considered important, and otherwise unimportant.
A path is considered invalid if it has conﬂict constraints, e.g., one
constraint requires v to be larger than a value while another one
requires it to be smaller. In our tool, we use a simple approach to
detect this conﬂict by checking whether two constraints are exactly
the same but one has br = true and another has br = f alse.
Weak path candidate output. After the DFS path construction, all
the output paths are valid accept paths. To reduce analysis effort,
by default the path output consists of only protocol state check and
strong check constraints. We include protocol state checks as it can
help understand the channel conditions for an accept path. Note
that we ﬁlter out the weak check constraints only in the last step so
that the user can also conﬁgure the tool to show all constraints.
Since the goal is to identify the weakest accept path, we also ap-
ply path ﬁltering to ﬁlter out stronger paths before the ﬁnal output.
If the constraints of one path is a subset of that of another path, the
latter is stronger and will be ﬁltered out.
6.3 Leakage Path Analysis
In this analysis, the information sources are the protocol states
the strong accept path checks depend on, and the sinks are the chan-
nels accessible to an off-path attacker. Based on our path summary
design, our sinks can be a function, a statement, or the paths reach-
ing an important program point. This can support storage channels
related to a statement that changes a global value [10, 24, 37], tim-
ing channels related to a statement or program path lengths [3, 29],
or public events related to a function such as sending a packet [18].
Leakage detection. The taint summary for the entry function is a
summarized variable tainting relationship, and we can directly tell
whether there is possible storage channel leakage by checking if
the storage channel sink variables are tainted through explicit or
implicit ﬂows. This is a convenient way to quickly tell the leakage