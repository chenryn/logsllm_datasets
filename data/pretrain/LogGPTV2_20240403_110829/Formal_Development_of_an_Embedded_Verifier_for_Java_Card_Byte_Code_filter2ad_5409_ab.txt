The 
relies on properties 
The proof process included 
3.1.2. The type verifier implementation. 
formal implementation 
and services 
defined in the formal specification. It allows to refine 
the final implementation. 
in the development  method 
is implemented 
proof is complete, 
that the implementation  corresponds 
tion. The implementation 
of the B language. It can then be translated 
into C 
code as explained 
helps ensuring that what 
Once the 
one can have the mathematical 
proof 
to the specifica­
in BO, a subset 
is what has been specified. 
in a next section. 
is expressed 
com­
When constructing 
are necessary. 
the type verifier 
First it is necessary 
model, several 
to access 
services 
into Class, Method and Descriptor 
data contained 
ponents [IO}. As we are using the pce technique, 
it 
is also necessary to access data of an additional 
com­
ponent, i.e. the Proof component, that contains pre­
computed typing information. 
accesses 
management. These services 
directly 
to the type verifier. 
to low-level 
An interface 
requirements 
ifier relies. 
the structural 
data access or to the CAP file description. 
has been defined in order to collect the 
and the properties 
on which the type ver­
do not need to be related 
In fact, they correspond 
memory and has to rely on a model of memory 
serves as  a basis to construct 
in the next subsection. 
verifier described 
This interface 
the type verifier 
Finally, 
3.2. The structural 
verifier Model 
The structural 
verifier implements the interface 
of 
It also 
includes 
tests correspond 
produced by the type verifier. 
and external tests. Internal 
services 
internal 
to tests related to each component of a CAP file, i.e. 
Applet, Class, etc ... We refer to tests between compo­
nents as external tests. External tests correspond 
to 
interdependencies 
formation or references 
AU the tests aim to ensure the correctness 
file and consistency 
between components, 
of data contained 
from  a com ponent to another. 
like shared in­
in the CAP file. 
of the CAP 
verifier as  a syntactical 
each components 
all the components speCified in [to]. At these 
3.2.1. Modeling each CAP file component. We 
have modelled the structural 
analyzer for CAP file. Therefore, 
constituting a CAP file is independently 
includes 
standards 
ponent, i.e. the Proof Component that is relative 
additional information 
on the PCC principles. 
ated model that contains 
content and services allowing to access their content. 
At the very abstract level, it is not necessary 
to rep-
components we add a specific custom com­
to 
used by the type verifier based 
Each component has an associ­
properties 
modeled. It 
on their respective 
by several components are  consis­
in ensuring that information 
3.2.2. Modeling test between component. The 
second part of the structural 
verifier performs the ex­
ternal tests. It consists 
shared or referenced 
tent. External tests are built on top of each component 
and relies on their correctness. 
resenting 
external tests contain properties 
hold between components. To demonstrate 
sistency 
points: the properties 
by the test and their services to access to data in or­
der to compare them. All external tests are modeled, 
in B. Formal specification 
refined and implemented 
lows to detect inconsistency 
ferent component and a. possible 
Abstract machines rep­
that must 
the con­
the model relies on two 
al­
between properties 
in dif­
of each component concerned 
between components, 
lack of description. 
services. The structural 
in the CAP file. Therefore, 
3.2.3. Building interfaces 
verifier is built in order to implements structural tests 
but also to provides services and properties 
on data 
the type verifier 
contained 
and can use these services 
can rely on these properties 
and the ser­
to access to the data. AU the properties 
vices required by the type verifier are collected 
into an 
dedicated 
is then re­
This latter interface 
fined and the services 
and properties are split among 
the different models of the CAP file components. 
interface. 
4. Integrating 
formal development into a 
smart card 
This section 
discuss 
the integration 
of the formally 
developed 
code into a  smart card operating 
system. 
54 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:52 UTC from IEEE Xplore.  Restrictions apply. 
4.1. BO to C code translator 
One of the main  advantages 
of using B method is 
One of the main question 
automatic code generation. 
when starting this formal development 
We have chosen 
efficient code generation. 
The idea is to use it as  a 
a simple code translator. 
prototype to figure out what kind of improvements 
can 
be implemented and what kind of improvements 
are 
necessary. 
was about an 
to develop 
The translator 
that we used was developed within 
taking into ac­
in BO of the formal model. 
. It is a basic translator 
BO into C code. For an easier translation, 
our laboratory
count only implementation 
It translates 
we add types as assertion into the BO code. It helps 
the translator 
being translated. 
the variable memory space. For instance, 
requires 
by a single byte. 
choosing the best C type for the variable 
to restrict 
an integer 
4 bytes whereas a boolean can be represented 
This allows, in particular, 
Therefore, 
To integrate 
there is not a great need to optimise 
C code into a smart card chip, one can 
on the C code trans­
focus on the chip 
think about strong optimisation 
lator. In fact"most of optimisations 
itself. 
the BO code as it can produce standard code. Then, 
depending on the chip target, one can use a translator 
especially 
is to provide a BO code that can be translated 
eral  chip 
code for each chip.  Once, 
specific chip,  it 
optimised for that chip. The advantage here 
.to sev­
targets without the needs to re-develop 
the 
can be used intensively. 
a translator 
is designed for a 
4.2. Implementing into 
the ATMEL AT 90 platform 
The implementation 
we provide is on an ATMEL 
AT90 6464 C with 64 kB for software, 
a'nd 3 kB of RAM. On this platform, 
the complete verifier. With no specific optimization, 
the size of this prototype is to 45 kB .. That includes the 
structural 
and the type verifier as well as  the memory 
and the communication 
64 kB for data 
one aims to embed 
management. 
The compilation 
chain provided by ATMEL, which 
has some very efficient tools such as the compiler, 
al­
lows to gain a lot of space (in code size). Our goal is 
to demonstrate 
of embedding a formal 
byte code verifier into a smart card. Now that we have 
a prototype, 
we can focus on optimisation. 
the feasibility 
4.3. Formal and informal development 
together into 
the smart card 
The entire smart card is not modeled. Only a part of 
it, in our case the byte code verifier is modeled,  which 
to this pre-existent 
more than 90% of the code embedded into 
represents 
the smart card. A major question could be how far Can 
we trust this development 
developed. 
velop complex parts of a system. It helps improving 
quality of products and increasing 
Formal development 
as not everything 
has to be used to de­
is formally 
trust. 
With new applications, 
like the verifier, 
comes new 
correctly 
and others tools 
an abstraction, 
The help of mathematics 
which needs information 
compLexity. 
is necessary to keep the same level of quality. The 
development of the verifier relies on basic blocks such 
as the memory management, the loading of the code. 
Thus, the formal code is integrated 
and trusted part of the smart card. In order to be able 
to interact 
with these basic blocks is provided. It helps the formal 
development 
about this blocks. It also helps defining accurately 
and 
with no ambiguity services 
required by the formal de­
velopment and that have to  be implemented 
blocks. Therefore, 
quality and of re-usability, 
ist. The former benefit is obvious since re-usability 
gain of time in a development. 
sequence of the modeling. If a developer spends time 
in designing 
then he can reason easily about it. F inally, errors can 
be discovered 
as well as lack of specification. 
leads to more confidence into the implementa!io
one has a gain both in terms of 
as basic blocks already ex­
is a 
The latter one is a con­
a formal abstraction 
for his basic blocks, 
by these· 
All this 
n. 
and properties 
a kind of interface, 
5. Metrics on the byte code vefifier and 
its  development 
that require 
In this section, 
The reason is that the structural  ver­
verifier is bigger than 
a lot of tests,  very 
we provide metrics about the formal 
of the byte code verifier. Table 1 synthe­
different, 
and an implementation 
development 
sizes metrics related to the development. In particular, 
one can note that the structural 
the type verifier. 
ifier  contains 
a specification 
Meanwhile, the type verifier can be seen as a single 
machinery including 
Card. Moreover, the structural 
vices on which the type verifier relies. There is another 
important result. It concerns the number of generated 
Proof Obligations 
type verifier generate 
tural verifier. 
properties 
verifier. 
(POs). The results shows that the 
much more POs than the struc­
The reason is that there are much more 
in the type verifier than in' the structural 
the typing rules enforced. 
verifier contains  ser­
for each one. 
by Java 
Table 2 represents 
results on the execut'ion 
of the 
byte code verifier on several example applets. The first 
three applets are example appiets from Sun whereas the 
next two ones are more  concrete 
ones and correspond 
55 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:52 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Metrics on the formal development 
the byte code verifier 
of 
on-card verifier, 
as the card ensures its own security. 
the deployment infrastructure 
is light 
In this article, we bring the answer on two chal­
8 
4 
12 
References 
Verifiers 
Lines of B 
Generated POs 
Automatic proofs 
Lines of C code 
Men months 
Structural 
35000 
11700 
81  % 
7540 
Type 
20000 
18600 
72 % 
4250 
Total 
55000 
30300 
75 % 
11790 
Table 2. Metrics on the execution of the byte 
code verifier 
on some example applets 
Applet  Size Structural Type 
(kb) Verifier Verifier 
NullApp  4,2  50 ms 
HeIloWorld 4,4  50 ms 
Wallet  3,6  100 ms  320 ms 
Applet 1  5,2  150 ms  800 rns 
Applet 2 
640 ms  38000 rns 
50 rns 
90 ms 
8 
to industrial 
We  provide 
and the time needed 
typing verification. 
applets already deployed in smart cards. 
information 
about the size of the  applet 
to perform the structural 
and the 
The first com ment one can  extract from these results 
of the type verifier is much more 
is that the execution 
time consuming than the execution of the structural 
verifier. In fact, the structural 
verifier is a succession 
of tests. Some are easy to perform. Others are more 
tricky, but the code is only checked once. At the con­
trary, the type verifier needs to access data and even if 
the verification 
much 
more time to check that the typing rules are correctly 
enforced. 
is linear in complexity, 
it requires 
The main result is that the time required for the 
are not so foolish. The verifier that we 
verification 
propose is a prototype on which we can make several 
optimization concerning 
memory foot print. 
either the efficiency and the 
6. Conclusion 
Adding an embedded byte code verifier to a Java 
It is 
Card allows the card to ensure its own security. 
im portan t when one thinks about deployment 
ture.  Today, 
loading new code when the card is already on the field, 
requires 
tographic 
which implies cryp­
center. With an 
protocols and certification 
an  heavy infrastructure 
on smart card, Le. down­
post-issuance 
architec­
is that, few years ago it was 
as unfeasible to embed a byte code verifier 
lenges: The first challenge 
considered 
into a smart card. The second challenge 
methodological 
oped software has never been done before. 
concerns more 
issues as a real on-card formally devel­
[1) J. Abrial. The B Book, Assigning Programs to Mean­
ings. Cambridge University 
Press, 1996. 
!2] Y. Bertot. A Coq Formaliza.tion 
of a Type Checker 
for Object Initialization 
Technical report, INRIA Sophia Antipolis, 
in the Java Virtual Machine. 
2000. 
[3) L. Casset. Formal Implementation 
of a Verification 
gorithm Using the B Method. In AFADL '2001, Nancy, 
France, June 2001. 
[4] L. Casset and J.-L. Lanet. A Formal Specication 
of 
the Java Bytecode Semantics using the B Method. In 
1 st ECOOP Workshop on Fonnal Techniques 
for Java 
Programs, June 1999. 
Al­
[5J A. Coglio, A. Goldberg, and Z. Qian. Towards a 
of the JVM Byte­
Implementation 
Provably-Correct 
code Verifier. 
In DISCEX'OO. IEEE, January 2000. 
[6] G. Klein and T. Nipkow. Verified Lightweight 
Byte­
In ECOOP 2000 Workshop on For­
code Verification. 
mal Techniques 
for Java Programs, Cannes, 2000. 
[7] X. Leroy. On-Card Bytecode Verification 
for Java 
C<ud.  In E-smart, Cannes,  2001. 
[8] T.  Lindholm 
Specification. 
and F. Yellin. The Jal)a Virtual Machine 
Adison  Wesley, 
1996. 
[9] S. MicIosystems. 
Connected  Limited Device Configu­
ration, Specification 
LOa, J2ME, 2000. 
[10] S. Microsystems. 
Java Card 2.1.1 Virtual Machine 
Specification, 
2000. 
[llJ G. Necula and P. Lee. Proof-Carrying 
Code. In POPL 
'97, Paris, January 1997. 
[12] T. Nipkow. Verified bytecode verifiers. 
In FOSSACS 
01, LNCS 2030. Springer,  2001. 
[13J T. Nipkow,  D. von Oheimb, and C. Pusch. /JJava: 
Embedding a Programming Language in a Theorem 
Prover. In Foundations 
lOS 
of Secure Computation. 
Press, 2000. 
[14] C. Pusch. Proving the soundness of a Java bytecode 
In OOPSLA98 Workshop 
verifier in Isabelle/HOL. 
Formal Underpinnings of Java, 1998. 
[15] Z. Qian. A Formal Specification 
of Java Virtual Ma­
chine Instructions 
tines. In Formal Syntax and Semantics of Java, LNCS 
1523. Springer, 
for Objects, Methods and Subrou­
1999. 
[16] A. Requet, L, Casset, and G. Grimaud. Application 
of the B Formal Method to the Proof of a Type Veri­
In HASE 2000, November 2000. 
fication Algorithm. 
Bytecode Veri­
[17] E. Rose and K. H. Rose. Lightweight 
fication. In ODPSLA '98 Workshop on Formal Under 
pinnings of Java, 1998. 
56 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:52 UTC from IEEE Xplore.  Restrictions apply.