To make this ﬁrst message PKCS #1 v1.5 conforming,
the attacker has to apply a blinding step [11]. Since this
step requires many oracle requests, creating a signature
is much more time consuming and is only practical if a
strong oracle is available.
4 Scanning methodology
The challenge of our research was to perform an ef-
fective scan using as few requests as possible, but al-
lowing us to trigger all known vulnerabilities and po-
tentially ﬁnd new ones. For this purpose we closely
modeled our ﬁrst scanner after the techniques in Ble-
ichenbacher’s original publication [11] and the follow-
ing research results [26, 7, 28]. This scanner performed
a basic TLS-RSA handshake (see Figure 1) containing
differently formatted PKCS #1 v1.5 messages located
in ClientKeyExchange. With this approach, we were
able to identify our ﬁrst vulnerable TLS implementa-
tions. Further analysis was conducted to identify pos-
sible false positives before reporting the behavior to ven-
dors and site operators. This manual analysis allowed us
to ﬁnd new issues and extend further TLS scans which
we applied to the Alexa Top 1 Million list.
In the following sections we give an overview of our ﬁ-
nal scanning methodology. If possible we highlight gen-
eral recommendations, which are of importance for per-
forming related vulnerability scans.
4.1 Differently formatted PKCS #1 v1.5
messages
trigger
different
behaviors,
contained
our
server
To
ClientKeyExchange messages
differ-
ently formatted PKCS #1 v1.5 messages. For their
description, consider the following notation. (cid:107) denotes
byte concatenation, version represents two TLS ver-
sion bytes, rnd[x] denotes a non-zero random string of
length x, and pad() denotes a function which generates
a non-zero padding string whose inclusion ﬁlls the
message to achieve the RSA key length.
Given the performance prerequisites for our scan, we
carefully selected ﬁve PKCS #1 v1.5 vectors based on
the previous research on Bleichenbacher attacks [11, 7,
28, 36]. Every message should trigger a different vulner-
ability:
1. Correctly formatted TLS message.
This mes-
sage contains a correctly formatted PKCS #1 v1.5
820    27th USENIX Security Symposium
USENIX Association
padding with 0x00 at a correct position and correct
TLS version located in the premaster secret:
M1 = 0x0002 (cid:107) pad() (cid:107) 0x00 (cid:107)
version (cid:107) rnd[46]
M1 should simulate an attacker who correctly
guessed the PKCS #1 v1.5 padding as well as TLS
version. Even though this case is hard to trigger
(because of a low probability of constructing such a
message), it is needed to evaluate the server correct-
ness.
2. Incorrect PKCS #1 v1.5 padding. This message
starts with incorrect PKCS #1 v1.5 padding bytes:
M2 = 0x4117 (cid:107) pad()
The invalid ﬁrst byte in the PKCS #1 v1.5 padding
should trigger an invalid server behavior as de-
scribed, for example, in the original paper [11].
3. 0x00 at wrong position. This message contains a
correct PKCS #1 v1.5 format, but has 0x00 at a
wrong position so that the unpadded premaster se-
cret will have an invalid length:
M3 = 0x0002 (cid:107) pad() (cid:107) 0x0011
Many implementations assume that the unpadded
value has a correct length. If the unpadded is shorter
or longer, it could trigger a buffer overﬂow or spe-
ciﬁc internal exceptions, and lead to a different
server behavior. For example, Meyer et al. showed
that such a message resulted in different TLS alerts
in JSSE (Java Secure Socket Extension) [28].
4. Missing 0x00. This message starts with 0x0002 but
misses the 0x00 byte:
M4 = 0x0002 (cid:107) pad()
The PKCS #1 v1.5 standard prescribes that the de-
crypted message always contains a 0x00 byte.
If
this byte is missing, the PKCS #1 v1.5 implemen-
tation cannot unpad the encrypted value, which can
again result in a different server behavior.
5. Wrong TLS version. This message contains an in-
valid TLS version in the premaster secret:
M5 = 0x0002 (cid:107) pad() (cid:107) 0x00 (cid:107)
0x0202 (cid:107) rnd[46]
M5 should trigger an invalid behavior as described
by Kl´ıma, Pokorn´y and Rosa [26]. A practical ex-
ample of such behavior was recently found in Ma-
trixSSL [36]. The vulnerable MatrixSSL version re-
sponded these types of messages with an illegal pa-
rameter alert. Other messages were responded with
a decryption error.
A server behaves correctly if it responds with the same
alert message to any of the above messages. Otherwise, it
is vulnerable to Bleichenbacher’s attack. As described in
Section 3.4, we say that the oracle is weak if the attacker
can only identify valid messages starting with 0x0002
with a validly padded PKCS #1 v1.5 message with the
0x00 byte at the correct position (i.e., message M1 or M5).
This is because of a low probability of triggering such a
case during the attack. Otherwise, if the server allows
the attacker to identify messages with, for example, mes-
sage M3 or M4, the server provides a strong oracle and the
attack can be practically exploited.
4.2 Different TLS protocol ﬂows
We observed that several implementations responded dif-
ferently based on the constructed TLS protocol ﬂow.
More speciﬁcally, we observed differences on some
servers when processing a ClientKeyExchange mes-
sage sent by itself versus when it was sent in conjunction
with ChangeCipherSpec and Finished. We will re-
fer to sending ClientKeyExchange alone as ”shortened
message ﬂow” in the rest of the paper.
The primary example of this is F5 BIG-IP. Under cer-
tain conﬁgurations, when this device received an invalid
ClientKeyExchange without further messages, it im-
mediately aborted the handshake and closed the connec-
tion. Otherwise, when processing properly formatted
ClientKeyExchange, the device waited for subsequent
ChangeCipherSpec and Finished messages.
Our scans also conﬁrmed that it is insufﬁcient to con-
sider only TLS alert numbers or timing as a suitable side-
channel. It is also necessary to monitor connection state
and timeout issues.
4.3 Cipher suites
Our initial tool implementation was trying to connect
with a single AES-CBC cipher suite. During our scans
we observed some servers with a limited set of cipher
suites which, for example, only supported AES-GCM ci-
pher suites. We therefore changed our tool to offer addi-
tional cipher suites by default. This increased the number
of detected vulnerable servers.
In some cases,
In addition to new vulnerable servers, additional ci-
pher suites allowed us to observe an interesting be-
havior.
the responses to various
ClientKeyExchange messages varied depending on the
used symmetric ciphers. For example, one of our target
servers reset the TCP connection after accepting a valid
PKCS #1 v1.5 formatted message when using AES-CBC
cipher suites. When using AES-GCM cipher suites, the
server responded with a TLS alert 51 (decrypt error).
USENIX Association
27th USENIX Security Symposium    821
Invalid PKCS #1 v1.5 messages always led to a connec-
tion timeout, independently of the used cipher suite.
4.4 Monitoring different server responses
According to the TLS standard [34], servers receiving
invalid ClientKeyExchange messages should continue
the TLS handshake and always respond with an identical
TLS alert. In our analyses, we observed several servers
which always responded with identical TLS alerts. Some
however returned an extra TLS alert when processing an
invalid ClientKeyExchange.
In a server scan it is therefore important to not only
monitor the last received TLS alert but also the content
and count of received messages and socket behavior.
4.5 More variations
During our research we discovered that with slight vari-
ations like changing the cipher suite or using the short-
ened TLS message ﬂow we were able to discover more
vulnerable servers. A more exhaustive scan may reveal
more vulnerable implementations. However, there is a
very large number of potential variations to try. For ex-
ample, one could try to connect with exotic cipher suites
(like Camellia), extensions or new variations of message
ﬂows.
With our scan tool we attempted to ﬁnd all vulnera-
bilities we are aware of while at the same time avoiding
excessively long scans.
4.6 Performing a server scan
In summary, our server evaluation is primarily differen-
tiated from other published techniques we are familiar
with [11, 28, 36] in that we consider connection state as
a side-channel signal and that we test with a non-standard
message ﬂow. Furthermore, we can detect duplicated
alert messages and we enforce usage of different cipher
suites to trigger invalid behavior. See Figure 3.
The oracle detection of our scanner works by
ﬁrst downloading a target server’s certiﬁcate and us-
ing it to encrypt ﬁve ClientKeyExchange messages
(M1,...M5). Each value is then sent as part of a stan-
dard handshake with a hardcoded Finished value.
If
the response was not the same for each test case, the
target is presumed to be vulnerable.
If the responses
are identical,
the server is retested using the same
ClientKeyExchange but with an abbreviated message
ﬂow that omits ChangeCipherSpec and Finished. The
responses are again compared and if any differences are
spotted, the target is presumed to be vulnerable. In order
to minimize false positive results due to network con-
ditions or unreliable servers, all servers presumed to be
Figure 3: Our ﬁnal scan considered different cipher
suites, connection state, TLS alerts, and shortened pro-
tocol ﬂow. The PKCS #1 v1.5 messages were selected
precisely based on previous research [11, 7, 36].
vulnerable are retested to conﬁrm the oracle prior to re-
porting the target as vulnerable. This is especially impor-
tant when detecting timeout based oracles.
When testing with the shortened message ﬂow, we
found it necessary to set an appropriate socket timeout
for the network path between scanner and target. Tests
can be performed faster with shorter timeouts but it can
come at the cost of inconsistent behavior when deal-
ing with slower hosts or network latency.
In our test-
ing, 5 seconds proved to be a reliable socket timeout for
scanning over the Internet without exceeding handshake
timeouts. In some environments, it may also be desirable
to increase the socket timeout but setting it too high will
lead to unreliable results.
5 Vulnerable implementations
The following sections present our ﬁndings and detailed
behaviors of vulnerable implementations. The results
are summarized in Table 1. For each vulnerable im-
plementation the table provides information about dif-
ferent server responses triggered by valid and invalid
ClientKeyExchange messages, the TLS protocol ﬂow
(full / shortened), the oracle type (strong / weak), and a
CVE ID.
5.1 Facebook
During our ﬁrst scans, we discovered that the main Face-
book host – www.facebook.com – was vulnerable. The
server responded with a TLS alert 20 (bad record mac)
to an error in the padded premaster secret. An error in
the PKCS #1 v1.5 preﬁx or in the padding resulted in an
immediate TCP reset. We could observe a similar behav-
ior on multiple other hosts belonging to Facebook like
instagram.com and fbcdn.com.
822    27th USENIX Security Symposium
USENIX Association
Optional messages removed in a shortened protocol flowPrecisly selectedRSA test vectorsbased on previousresearch Support for TLS-RSA GCM and CBC cipher suitesAttackerAttackerTLSServerTLSServerClientHello ServerHelloCertificateServerHelloDoneClientKeyExchangeChangeCipherSpec(Client-) FinishedAlert/AlertAlert/...Monitoring TCP connectionState and differences in TLS alerts Implementation
Server response
TLS ﬂow Oracle
Reference / ID
Facebook
1st vulnerability
2nd vulnerability
F5
Variant 1
Variant 2
Variant 3
Variant 4
Variant 5
Citrix Netscaler
with CBC cipher suites
with GCM cipher suites
Radware
Radware Alteon
Cisco
Cisco ACE
Cisco ASA
Erlang
Erlang version 19 and 20
Erlang version 18
Palo Alto Networks
PAN-OS
IBM
IBM Domino
IBM WebSphere MQ
WolfSSL
WolfSSL prior to 3.12.2
Bouncy Castle
Bouncy Castle 1.58
Valid message
Invalid message
20
20
47
full
TCP FIN
shortened
40
shortened
Two alerts (40)
full
40
shortened
TCP timeout
One alert (40)
TCP timeout
One alert (40)
20
Connection reset
51
51
20
TCP timeout
10
20
Two alerts (40)
80
TCP timeout
TCP timeout
TCP reset
47
TCP reset
51
51
One alert (40)
Two Alerts (40)
20
?
47
?
strong
strong
strong
strong
weak
weak
strong