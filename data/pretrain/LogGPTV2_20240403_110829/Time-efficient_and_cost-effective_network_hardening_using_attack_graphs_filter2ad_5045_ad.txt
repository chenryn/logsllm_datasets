Figure 9. Processing time vs. d for n = 2 and different values of k
Figure 10 shows how processing time increases when the
parameter k increases and for a ﬁxed value of n (n = 4) and
different values of d. From this chart, it is clear that large
graphs can be processed in a few seconds for values of k
up to 5. As we will show shortly, relatively small values of
k provide a good balance between approximation ratio and
processing time, therefore this result is extremely valuable.
Similarly, Figure 11 shows how processing time increases
when k increases and for a ﬁxed value of d (d = 8) and
different values of n. This chart conﬁrms that large graphs
can be processed in a few seconds for relatively small values
of k.
We also observed the relationship between processing
time and size of the graphs (in terms of number of nodes).
Figure 12 shows a scatter plot of average processing times
for given pairs of d and n vs. the corresponding graph size.
This chart suggests that, in practice, processing time is linear
in the size of the graph for small values of k.
Finally, we evaluated the approximation ratio achieved
by the algorithm. Figure 13 shows how the ratio changes
when k increases and for a ﬁxed value of n (n = 2) and
different values of d. It is clear that the approximation ratio
improves when k increases, and, in all cases, the ratio is
clearly below the theoretical bound. Additionally, relatively
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:08 UTC from IEEE Xplore.  Restrictions apply. 
d = 2
d = 4
d = 6
d = 8
d = 10
n = 4 
d = 10, n = 4 
1,398,101 nodes 
– for a ﬁxed value of d (d = 4) and different values of
n – improves as k increases. Similar conclusions can be
drawn from this chart. In particular, the approximation ratio
is always below the theoretical bound.
0
2
4
6
k 
8
10
12
Figure 10. Processing time vs. k for n = 4 and different values of d
d = 4
d = 6
d = 8
n = 2 
o
i
t
a
r
n
o
i
t
a
m
i
x
o
r
p
p
A
1.6
1.5
1.4
1.3
1.2
1.1
1
0.9
)
s
(
e
m
i
t
g
n
i
s
s
e
c
o
r
P
30
25
20
15
10
5
0
)
s
(
e
m
i
t
g
n
i
s
s
e
c
o
r
P
60
50
40
30
20
10
0
n = 2
n = 3
n = 4
n = 5
0
2
4
6
k 
8
10
12
d = 8 
d = 8, n = 5 
488,281 nodes 
Figure 13. Approximation ratio vs. k for n = 2 and different values of d
0
2
4
6
k 
8
10
12
Figure 11. Processing time vs. k for d = 8 and different values of n
k = 1
k = 2
Linear regression line (k = 1)
Linear regression line (k = 2)
)
s
(
e
m
i
t
g
n
i
s
s
e
c
o
r
P
4.0
3.5
3.0
2.5
2.0
1.5
1.0
0.5
0.0
R² = 0.999 
R² = 0.9924 
0
200,000
400,000
600,000
800,000 1,000,000 1,200,000 1,400,000 1,600,000
Graph size (# nodes) 
Figure 12. Processing time vs. graph size for different values of k
low values of k (between 2 and 6) are sufﬁcient to achieve
a reasonably good approximation ratio in a time-efﬁcient
manner. Additionally, as observed earlier, processing time is
practically linear in the size of the graph for lower values of
k. Similarly, Figure 14 shows how the approximation ratio
n = 2
n = 3
n = 4
d = 4 
o
i
t
a
r
n
o
i
t
a
m
i
x
o
r
p
p
A
1.35
1.3
1.25
1.2
1.15
1.1
1.05
1
0.95
0.9
0
2
4
6
k 
8
10
12
Figure 14. Approximation ratio vs. k for d = 4 and different values of n
VIII. CONCLUSIONS
In this paper, we started by highlighting the limitations
of previous work in minimum-cost network hardening using
attack graphs. In particular, we showed – both theoretically
and experimentally – that ﬁnding the exact solution to this
problem is feasible only for very small graphs. We pro-
posed an approximation algorithm to ﬁnd reasonably good
solutions in a time-efﬁcient manner. We proved that, under
certain reasonable assumptions, the approximation ratio of
this algorithm is bounded by n
2 , where n is the maximum
in-degree of nodes in the graph and d is the depth of the
graph. We also showed that, in practice, the approximation
ratio is much smaller than its theoretical bound. Finally, we
reported experimental results that conﬁrm the validity of our
approach, and motivate further research in this direction.
d
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:08 UTC from IEEE Xplore.  Restrictions apply. 
[9] R. W. Ritchey and P. Ammann, “Using model checking to
analyze network vulnerabilities,” in Proceedings of the 2000
IEEE Symposium on Research on Security and Privacy (S&P
2000), Berkeley, CA, USA, May 2000, pp. 156–165.
[10] R. Ritchey, B. O’Berry, and S. Noel, “Representing TCP/IP
connectivity for topological analysis of network security,” in
Proceedings of the 18th Annual Computer Security Appli-
cations Conference (ACSAC 2002), Las Vegas, NV, USA,
December 2002, pp. 25–34.
[11] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing,
“Automated generation and analysis of attack graphs,” in
Proceedings of the 2002 IEEE Symposium on Security and
Privacy (S&P 2002), Berkeley, CA, USA, May 2002, pp.
273–284.
[12] L. P. Swiler, C. Phillips, D. Ellis, and S. Chakerian,
“Computer-attack graph generation tool,” in Proceedings of
the DARPA Information Survivability Conference & Exposi-
tion II (DISCEX 2001), vol. 2, Anaheim, CA, USA, June
2001, pp. 307–321.
[13] D. Zerkle and K. Levitt, “NetKuang - A multi-host conﬁgura-
tion vulnerability checker,” in Proceedings of the 6th USENIX
Security Symposium, San Jose, CA, USA, July 1996.
[14] C. R. Ramakrishnan and R. Sekar, “Model-based analysis of
conﬁguration vulnerabilities,” Journal of Computer Security,
vol. 10, no. 1/2, pp. 189–209, 2002.
[15] S. Jha, O. Sheyner, and J. Wing, “Two formal analyses
of attack graphs,” in Proceedings of 15th IEEE Computer
Security Foundations Workshop (CSFW 2002), Cape Breton,
Canada, June 2002.
[16] S. Noel, E. Robertson, and S. Jajodia, “Correlating intrusion
events and building attack scenarios through attack graph
distances,” in Proceedings of
the 20th Annual Computer
Security Applications Conference (ACSAC 2004), Tucson,
AZ, USA, December 2004, pp. 350–359.
[17] L. Wang, A. Liu, and S. Jajodia, “Using attack graphs for
correlating, hypothesizing, and predicting intrusion alerts,”
Computer Communications, vol. 29, no. 15, pp. 2917–2933,
September 2006.
[18] S. Jajodia, S. Noel, P. Kalapa, M. Albanese, and J. Williams,
“Cauldron: Mission-centric cyber situational awareness with
defense in depth,” in Proceedings of the Military Communi-
cations Conference (MILCOM 2011), Baltimore, MD, USA,
November 2011.
The experiments described in this paper were conducted
on mostly synthetic – yet realistic – attack graphs. Our
future plans include evaluating the proposed approach on
real data as well as deepening our understanding of cost
functions. Although additional work is required, the theoret-
ical and experimental results obtained so far are extremely
promising, and the proposed algorithm could be easily
adopted to augment
the hardening capabilities currently
offered by available commercial tools such as Cauldron [18],
a vulnerability analysis framework originally developed by
members of our research group. Cauldron’s current approach
to optimal network hardening is based on disabling the
smallest possible set of edges in the attack graph, in order
to prevent the attacker from reaching certain target condi-
tions. However, this approach has the same limitations of
selectively removing exploits. As we discussed earlier in the
paper, it is not always possible to remove arbitrary exploits
(or attack paths) without removing their causes. In practice,
removing sets of initial conditions – which administrators
are likely to have control on – will help existing tools with
generating hardening recommendations that can be actually
enforced.
REFERENCES
[1] S. Noel and S. Jajodia, “Managing attack graph complexity
through visual hierarchical aggregation,” in Proceedings of
the ACM CCS Workshop on Visualization and Data Mining
for Computer Security (VizSEC/DMSEC 2004). Fairfax, VA,
USA: ACM, October 2004, pp. 109–118.
[2] L. Wang, S. Noel, and S. Jajodia, “Minimum-cost network
hardening using attack graphs,” Computer Communications,
vol. 29, no. 18, pp. 3812–3824, November 2006.
[3] Tenable Network Security R(cid:2)
, “The Nessus R(cid:2)
scanner,” http://www.tenable.com/products/nessus.
vulnerability
[4] P. Ammann, D. Wijesekera, and S. Kaushik, “Scalable, graph-
based network vulnerability analysis,” in Proceedings of the
9th ACM Conference on Computer and Communications Se-
curity (CCS 2002), Washington, DC, USA, November 2002,
pp. 217–224.
[5] M. Dacier, “Towards quantitative evaluation of computer
security,” Ph.D. dissertation, Institut National Polytechnique
de Toulouse, 1994.
[6] S. Jajodia, S. Noel, and B. O’Berry, Managing Cyber Threats:
Issues, Approaches, and Challenges, ser. Massive Computing.
Springer, 2005, vol. 5, ch. Topological Analysis of Network
Attack Vulnerability, pp. 247–266.
[7] R. Ortalo, Y. Deswarte, and M. Kaˆaniche, “Experiment-
ing with quantitative evaluation tools for monitoring opera-
tional security,” IEEE Transactions on Software Engineering,
vol. 25, no. 5, pp. 633–650, September/October 1999.
[8] C. Phillips and L. P. Swiler, “A graph-based system for
network-vulnerability analysis,” in Proceedings of the New
Security Paradigms Workshop (NSPW 1998), Charlottesville,
VA, USA, September 1998, pp. 71–79.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:08 UTC from IEEE Xplore.  Restrictions apply.