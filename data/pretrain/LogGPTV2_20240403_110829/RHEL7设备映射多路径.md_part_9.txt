|                      | 的值，`multipathd`{.command}                  |
|                      | 守护进程将监视最                              |
|                      | 近有效的路径，并执行指定数量的检查。如果在监  |
|                      | 视期间这些路径再次变为无法使用，则不会在这些  |
|                      | 路径下一次可用时就使用它们，直到连续检查使用  |
|                      | `delay_wait_checks`{.literal}                 |
|                      | 指定的次数后它们都可用为止。                  |
|                      | 这样可防止将                                  |
|                      | 那些可能不太可靠的路径在上线后立即投入使用。  |
+----------------------+-----------------------------------------------+
| ` delay_wai          | （从 Red Hat Enterprise Linux 7.2             |
| t_checks `{.literal} | 开始）如果将其设定为大于 0                    |
|                      | 的值，则最近重新上线的设备在由                |
|                      | `delay_watch_checks`{.literal}                |
|                      | 指定的检查次数内再次无法使用后，那么它        |
|                      | 下一次上线后就不会被标记并延迟，并在经过使用  |
|                      | `delay_watch_checks`{.literal}                |
|                      | 指定的检查次数后方可使用。                    |
+----------------------+-----------------------------------------------+
| `deferr              | 如果设定为                                    |
| ed_remove`{.literal} | `yes`{.lit                                    |
|                      | eral}，则在删除最后一个路径设备时，multipathd |
|                      | 将会执行延期删                                |
|                      | 除，而不是常规删除。这样就会保证如果执行常规  |
|                      | 删除且操作失败时某个多路径设备正在使用中，该  |
|                      | 设备会在最后一个用户关闭该设备时自动被删除。  |
+----------------------+-----------------------------------------------+
| `sk                  | 如果设定为                                    |
| ip_kpartx`{.literal} | `yes`{.literal}，`kpartx`{.literal}           |
|                      | 不会在该设备中                                |
|                      | 自动创建分区。这样即使该设备有分区表，也可以  |
|                      | 允许用户在不创建分区的情况下创建多路径设备。  |
+----------------------+-----------------------------------------------+
:::
:::
::: para
以下示例显示了多路径配置文件的 `device`{.literal} 条目。
:::
``` screen
#	}
#	device {
#		vendor			"COMPAQ  "
#		product			"MSA1000         "
#		path_grouping_policy	multibus
#		path_checker		tur
#		rr_weight		priorities
#	}
#}
```
:::
:::
[]{#MPIO_admin-troubleshoot.html}
::: chapter
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#MPIO_admin-troubleshoot}第 5 章 DM Multipath 管理及故障排除 {.title}
:::
::: para
本章提供了在运行的系统中管理 DM Multipath 的相关信息。
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#automatic_config}5.1. 使用多路径帮助程序（Multipath Helper）自动生成配置文件 {.title}
:::
[]{#MPIO_admin-troubleshoot.html#idm140613832820000 .indexterm}
::: para
可在 Red Hat Enterprise Linux 中使用 Multipath Helper
应用程序为多路径设备生成基本配置。该应用程序可使用自定义别名、设备黑名单和各个多路径设备的特别设定创建多路径配置。完成后，该应用程序可生成安装脚本，该脚本包含所选配置参数，并提供
`multipath.conf`{.filename} 配置文件供检查。
:::
::: para
可以在  找到
Multipath Helper 应用程序。
:::
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#online_device_resize}5.2. 重新定义在线多路径设备大小 {.title}
:::
[]{#MPIO_admin-troubleshoot.html#idm140613847608448 .indexterm}
::: para
如果要重新定义在线多路径设备，请按以下步骤操作。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    重新定义物理设备大小。
    :::
2.  ::: para
    使用以下命令查找 LUN 路径：
    :::
    ``` screen
    # multipath -l
    ```
3.  ::: para
    重新定义路径大小。对于 SCSI 设备，在 `rescan`{.filename} 文件中写入
    1，以便让 SCSI 驱动器重新扫描，如以下命令：
    :::
    ``` screen
    # echo 1 > /sys/block/device_name/device/rescan 
    ```
4.  ::: para
    如需重新定义多路径设备的大小，请执行 `multipathd resize`{.command}
    命令：
    :::
    ``` screen
    # multipathd -k'resize map mpatha'
    ```
5.  ::: para
    重新定义文件系统大小（假设没有使用 LVM 或者 DOS 分区）：
    :::
    ``` screen
    # resize2fs /dev/mapper/mpatha
    ```
:::
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#move_root_to_multipath}5.3. 将 root 文件系统从单路径设备移动到多路径设备中 {.title}
:::
[]{#MPIO_admin-troubleshoot.html#idm140613848270032
.indexterm}[]{#MPIO_admin-troubleshoot.html#idm140613848269104
.indexterm}
::: para
如果在单路径设备中安装系统，并稍后在 root
文件系统中添加了另一个路径，则需要将 root
文件系统移动到多路径设备中。本小节记录了从单路径移动到多路径设备的过程。
:::
::: para
安装 `device-mapper-multipath`{.literal} 软件包后执行以下步骤：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    执行以下命令创建 `/etc/multipath.conf`{.filename}
    配置文件，载入多路径模块并将 `multipathd`{.command} 的
    `chkconfig`{.command} 设定为 `on`{.literal}：
    :::
    ``` screen
    # mpathconf --enable
    ```
    ::: para
    有关 `mpathconf`{.command} 命令输出的详情请参考 [第 3.1 节 "设置 DM
    Multipath"](#mpio_setup.html#setup_procedure){.xref}。
    :::
2.  ::: para
    如果没有将 `find_multipaths`{.literal} 参数配置为
    `yes`{.literal}，请编辑 `/etc/multipath.conf`{.filename} 文件的
    `blacklist`{.literal} 和 `blacklist_exceptions`{.literal} 部分，如
    [第 4.2 节
    "配置文件黑名单"](#mpio_configfile.html#config_file_blacklist){.xref}
    所述。
    :::
3.  ::: para
    要让 multipath 在 root
    设备顶层发现多路径后尽快创建多路径设备，请输入以下命令。该命令还会确保
    `find_multipaths`{.literal} 会允许该设备，即使该设备只有一个路径。
    :::
    ``` screen
    # multipath -a root_devname
    ```
    ::: para
    例如：如果 root 设备是 `/dev/sdb`{.filename}，则请输入以下命令。
    :::
    ``` screen
    # multipath -a /dev/sdb
    wwid '3600d02300069c9ce09d41c4ac9c53200' added
    ```
4.  ::: para
    为确定已正确设置配置文件，请输入 `multipath`{.command}
    命令，并在输出结果中搜索使用以下格式的行。这表示该命令无法创建这个多路径设备。
    :::
    ``` screen
    date  wwid: ignoring map
    ```
    ::: para
    例如，如果设备的 WWID 为
    3600d02300069c9ce09d41c4ac9c53200，则会看到以下输出行：
    :::
    ``` screen
    # multipath
    Oct 21 09:37:19 | 3600d02300069c9ce09d41c4ac9c53200: ignoring map
    ```
5.  ::: para
    要使用 `multipath`{.literal} 重建 `initramfs`{.literal}
    文件系统，请执行附带以下选项的 `dracut`{.command} 命令：
    :::
    ``` screen
    # dracut --force -H --add multipath
    ```
6.  ::: para
    关闭机器。
    :::
7.  ::: para
    配置 FC 开关以便可在该机器中看到其他路径。
    :::
8.  ::: para
    引导机器。
    :::
9.  ::: para
    查看 root 文件系统（\'/\'）是否在多路径设备中。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#move_swap_to_multipath}5.4. 将 swap 文件系统从单路径设备移动到多路径设备中 {.title}
:::
[]{#MPIO_admin-troubleshoot.html#idm140613835143680
.indexterm}[]{#MPIO_admin-troubleshoot.html#idm140613835142752
.indexterm}
::: para
默认情况下会将 swap 设备设定为逻辑卷。将其配置
为多路径设备不需要特殊的操作，只要在由逻辑卷组构成的物理卷中设定多路径即可。如果
swap 设备不是 LVM 卷，却使用设备名称挂载，就可能需要编辑
`/etc/fstab`{.filename} 文件将其转换为正确的多路径设备名称。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    运行 `/sbin/multipath`{.command} 命令使用 `-v3`{.option} 选项确定
    swap 设备的 WWID 号。该命令的输出应该在路径列表中显示该 swap 设备。
    :::
    ::: para
    可以在该命令输出中看到有以下格式的行，它代表 swap 设备：
    :::
    ``` screen
    WWID  H:B:T:L devname MAJOR:MINOR
    ```
    ::: para
    例如：如果在 `sda`{.literal} 或其分区之一中设置 swap
    文件系统，则会在输出中看到类似如下的行：
    :::
    ``` screen
    ===== paths list =====
    ...
    1ATA     WDC WD800JD-75MSA3                           WD-WMAM9F 1:0:0:0 sda 8:0
    ...
    ```
2.  ::: para
    在 `/etc/multipath.conf`{.filename} 文件中为 swap 设备配置别名。
    :::
    ``` screen
    multipaths {
        multipath {
            wwid WWID_of_swap_device
            alias swapdev
        }
    }
    ```
3.  ::: para
    编辑 `/etc/fstab`{.filename} 文件，并使用附带多路径设备的 root
    设备替换旧的设备路径。
    :::
    ::: para
    例如：如果在 `/etc/fstab`{.filename} 文件中有以下条目：
    :::
    ``` screen
    /dev/sda2 swap                    swap    defaults        0 0
    ```
    ::: para
    可将该条目更改如下：
    :::
    ``` screen
    /dev/mapper/swapdev swap          swap    defaults        0 0
    ```
:::
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#multipath_daemon}5.5. 多路径守护进程 {.title}
:::
[]{#MPIO_admin-troubleshoot.html#idm140613837092704 .indexterm}
::: para
如果在进行多路径配置时遇到问题，则应该确定多路径守护进程正在运行，如
[第 3 章 *设置 DM Multipath*](#mpio_setup.html){.xref} 所述。必须运行
`multipathd`{.command} 守护进程方可使用多路径设备。
:::
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#many_luns}5.6. 大量 LUN 造成的问题 {.title}
:::
::: para
在某个节点中添加大量 LUN 时，使用多路径设备可明显延长 `udev`{.literal}
设备管理器为其生成设备节点所消耗的时间。如果遇到这个问题，请在
`/etc/udev/rules.d/40-multipath.rules`{.filename}