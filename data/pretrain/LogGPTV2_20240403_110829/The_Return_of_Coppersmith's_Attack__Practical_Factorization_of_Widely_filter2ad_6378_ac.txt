❕(x ) and f (x ) share the same roots (with some additional roots)
modulo p as well. (cid:140)e main idea of Coppersmith’s algorithm is to
(cid:128)nd ❕(x ) ∈ Z[x] such that |❕(x0)| < p, which means that the equiv-
alence ❕(x0) ≡ 0 mod p also holds over the integers, i.e., ❕(x0) = 0.
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1634Key size
M
512 b
1024 b
2048 b
3072 b
4096 b
P39# = 167#
P71# = 353#
P126# = 701#
P126# = 701#
P225# = 1427#
(ordM (65537)/2)
(ordM(cid:48) (65537)/2)
Size of M Size of M(cid:48) Na¨ıve BF # attempts Our BF # attempts Time per
attempt
11.6 ms
219.19 b
15.2 ms
474.92 b
970.96 b
212 ms
1159 sec
970.96 b
1962.19 b
1086 ms
140.77 b
285.19 b
552.50 b
783.62 b
1098.42 b
261.09
2133.73
2254.78
2254.78
2433.69
219.20
229.04
234.29
299.29
255.05
Worst case
1.93 CPU hours
97.1 CPU days
140.8 CPU years
2.84 ∗ 1025 years
1.28 ∗ 109 years
Table 1: Overview of the used parameters (original M and optimized M(cid:48)) and performance of our factorization algorithms for
commonly used key lengths. Time measurements for multiple attempts were taken on one core of an Intel Xeon E5-2650 v3
CPU clocked at 3.00 GHz, and the worst case time estimates are extrapolated from the orders and the average times required
per attempt. (cid:135)e expected factorization time is half of the worst case time.
Figure 1: (cid:135)e complexity of the factorization of keys produced by the studied RSALib with di(cid:130)erent key lengths starting from
512 to 4096 bits in 32-bit steps (horizontal axis). (cid:135)e blue crosses show the worst case estimate for the time to factorize a
key with the given length, with the vertical axis scale on the right side showing the estimated CPU e(cid:130)ort on one core of an
Intel Xeon E5-2650 v3 CPU clocked at 3.00 GHz. (cid:135)e red lines show the full order of the group. (cid:135)e green dots show the
reduced order as achieved by our method. (cid:135)e yellow areas indicate the key lengths for which our method, which is based
on Coppersmith’s attack, is not applicable due to an insu(cid:129)cient number of known bits. (cid:135)e orange areas indicate the key
lengths where the attack should be possible in practice; however, we were not successful in (cid:128)nding suitable parameters. (cid:135)e
gray area shows the key lengths where only public keys were available to us; hence, we simulated the private keys for the
computations backing the creation of the graph (since the structure of the keys can be recovered from either private or public
keys, the simulation should be su(cid:129)cient).
5127681024128015361792204823042560281630723328358438404096Key size [bits]022024026028021002120214021602180220022202240226022802300232023402360238024002420Order of 65537 (Number of Coppersmith attack attempts)Full order of 65537: number of attempts with naïve application of Coppersmith's attackOrder of 65537 for optimized M': number of attempts for optimized order of 65537Worst case factorization time estimate No practical attack (theoretically possible - but lattice up to 71*71 insufficient)Attack not possible based on Coppersmith's attack (not enough known bits)Simulated private keys based on knowledge of real public keys10−68.75 hours1 year103106109101210151018102110241027103010331036103910421045104810511054105710601063106610691072Worst case factorization time estimate [years]Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA16350,· · · , b(cid:48)
0,· · · , b(cid:48)
(cid:140)e polynomial ❕(x ) is found by the LLL algorithm [51] using the
fact that the root x0 is small.
(cid:140)e LLL algorithm reduces a la(cid:138)ice basis b0,· · · , bn−1. (cid:140)e algo-
rithm computes an alternative basis b(cid:48)
n−1 of the la(cid:138)ice such
that the vectors b(cid:48)
n−1 are smaller than the vectors in the
original basis. (cid:140)e LLL algorithm is typically used to (cid:128)nd one su(cid:129)-
ciently short vector of the la(cid:138)ice. (cid:140)e algorithm is applied to the
matrix B, which consists of row vectors bi. (cid:140)e result of the reduc-
tion is the matrix B(cid:48) of short vectors b(cid:48)
, which are all constructed as
j
linear (but with integer coe(cid:129)cients) combinations of basis vectors
bi . Coppersmith’s algorithm utilizes the LLL algorithm in order to
(cid:128)nd the desired polynomial ❕(x ) with a small function value ❕(x0).
(cid:140)e LLL is used to (cid:128)nd an “equivalent” polynomial ❕(xX ) (x – a
variable, X – a known constant) rather than ❕(x ). (cid:140)e LLL is used
here to (cid:128)nd the polynomial ❕(xX ) as a linear combination of poly-
nomials fi (xX ). (cid:140)e LLL algorithm is applied to the matrix B that
consists of coe(cid:129)cient vectors of polynomials fi (xX ) for |x0| < X.
(cid:140)e polynomial ❕(x ) is de(cid:128)ned by the smallest vector b(cid:48)
0 of the re-
0,1,· · · , b(cid:48)
0,n−1].
0 implies small
0,i xi0| [57, Proof of (cid:140)eorem 2].
2.5 Application of Coppersmith’s algorithm
Our factorization is based on the SageMath implementation [75]
of the Howgrave-Graham method [40] – a revisited version of
Coppersmith’s algorithm.
duced basis as ❕(x ) =(cid:80)n−1
(cid:113)(cid:80)n−1
i =0 b(cid:48)
0,i xi for b(cid:48)
function value |❕(x0)| = |(cid:80)n−1
i =0 (b(cid:48)
0,i X i )
i =0 b(cid:48)
0,0, b(cid:48)
2 of the vector b(cid:48)
A small norm |b(cid:48)
0 = [b(cid:48)
0| =
2.5.1 Howgrave-Graham method. In general, Coppersmith’s al-
gorithm and the Howgrave-Graham method use pm instead of p,
i.e., x0 is root of polynomials fi (x ) modulo pm, and we are looking
for ❕(x ) such that |❕(x0)| < pm . (cid:140)e method uses the following set
of polynomials fi (x ) generated as:
j = 0,· · · , δ − 1,
fi (x ) =x j N i f m−i (x ) i = 0,· · · , m − 1,
i = 0,· · · , t − 1,
(4)
(5)
fi +m (x ) =xi f m (x )
and parametrized by the degree δ of the original polynomial f (x )
(δ = 1 in our case). (cid:140)e Coppersmith-Howgrave-Graham method
is further parametrized by three parameters m, t, X (apart from
f (x ), N ), de(cid:128)ning the matrix B and in(cid:131)uencing the running time.
(cid:140)e parameters m, t de(cid:128)ne the number of polynomials n = δ ∗m + t
and the dimension of the square matrix B. (cid:140)e third parameter X
– the upper bound for the solutions we are looking for (x0 < X) –
determines the bit size of the entries of the matrix B. (cid:140)e running
time of Coppersmith’s algorithm is dominated by the time needed
for the LLL reduction. (cid:140)e running time of the LLL reduction is
given by the matrix B (the row dimension and the size of its entries)
and is mostly determined by the matrix size n.
2.5.2 Application to (p mod M(cid:48)) known. (cid:140)e Howgrave-Graham
method is able to (cid:128)nd a su(cid:129)ciently small solution x0 of the equa-
tion f (x ) = 0 mod p. In our case, the primes p, q are of the form
p = k(cid:48) ∗ M(cid:48) + (65537a(cid:48) mod M(cid:48)), with the small k(cid:48) being the only
unknown variable of the equation. Hence, the polynomial f (x )
can be constructed as f (x ) = x ∗ M(cid:48) + (65537a(cid:48) mod M(cid:48)), since
f (x0) = 0 mod p has a small root x0 = k(cid:48). (cid:140)e method requires
f (x ) to be monic (the leading coe(cid:129)cient is 1), but the form can be
easily obtained [57] as:
(cid:48)
)
0.5
2.5.3
/M(cid:48).
(mod N ).
f (x ) = x + (M
(cid:48)−1 mod N ) ∗ (65537a(cid:48) mod M
(6)
Se(cid:130)ing the parameters X and β. (cid:140)e parameter β repre-
sents the upper bound for the ratio of the bit size of the factor p and
the modulus N , i.e., p < N β . Since the bit size of both primes p, q
is half of the bit size of N , the value β is set to 0.5. (cid:140)e parameter
X represents the upper bound for the solution x0 of the modular
polynomial equation. In our case, X represents an upper bound
for the value of k(cid:48) from the equation (1); hence, its value can be
computed as X = 2 ∗ N
2.6 Computing the order of a generator in Z∗
M(cid:48)
(cid:140)e order of the generator 65537 is used in our Algorithm 1 and
also for the optimization of parameters (see the next section). (cid:140)e
multiplicative order ord(cid:48) = ordM(cid:48) (65537) is the smallest non-zero
integer such that 65537ord(cid:48) ≡ 1 mod M(cid:48), which is equivalent to
65537ord(cid:48) ≡ 1 mod Pi for all prime divisors Pi of M(cid:48). Since M(cid:48) is
the product of di(cid:130)erent primes, the ord(cid:48) can be computed as the
= ordPi (65537)
least common multiple of the partial orders ordPi
for primes divisors Pi of M(cid:48):
(cid:48) = lcm(ordP1 , ordP2 ,· · · ) for Pi|M
(cid:48)
(7)
ord
.
2.7 Optimization of the parameters M(cid:48), m, t
(cid:140)e optimization of parameters is performed only once for all RSA
keys of a given size. (cid:140)e parameters M(cid:48), m, t a(cid:130)ect the success rate
and the running time of our method. We are looking for parameters
M(cid:48), m, t such that the success rate is 100% (k(cid:48) is certainly found for
a correct guess of a(cid:48)) and the overall time is minimal. (cid:140)e running
time (the worst case)
Time = ordM(cid:48) (65537) ∗ T (M
(cid:48)
, m, t )
of our method is determined by the number of guesses (ordM(cid:48) (65537)
for the parameter a(cid:48)) and the computation average running time T
for one a(cid:138)empt (computation of k(cid:48) using Coppersmith’s algorithm).
(cid:140)e running time of Coppersmith’s algorithm is dominated by the
LLL reduction so it is a(cid:130)ected mostly by the size n = m + t of the
square matrix B and partially by the size of matrix elements given
by the size of M(cid:48). (cid:140)e value M(cid:48) a(cid:130)ects both the number of a(cid:138)empts
(ordM(cid:48) (65537)) and the time for one a(cid:138)empt (T (M(cid:48), m, t )); hence,
we optimize all parameters M(cid:48), m, t together. During the optimiza-
tion, we focus on decreasing the value ord(cid:48) = ordM(cid:48) (65537). (cid:140)e
optimization process can be described as follows:
(1) Compute a set of candidates for M(cid:48), each candidate with
su(cid:129)ciently small corresponding ord(cid:48);
(2) For each candidate, (cid:128)nd the optimal (100% success rate,
minimal time per a(cid:138)empt) parameters m, t – only reason-
ably small parameters m, t are brute-forced (t = m + 1 and
m = 1,· · · , 35). For a given m, t, the Howgrave-Graham
method is applied to the polynomial (6) for correct guess of
a(cid:48) (to compute success rate) and also for incorrect guesses
of a(cid:48) (to compute the average time per a(cid:138)empt);
(3) Return the best combination M(cid:48), m, t with the minimal
corresponding Time.
(cid:140)e best combination M(cid:48), m, t was obtained with respect to the
implementation [75] of the Howgrave-Graham method applied to
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1636Figure 2: (cid:135)e trade-o(cid:130) between the number of attempts (green circles) and the time per attempt (orange crosses) as the function
of the number of known bits (size of the optimized M(cid:48)). We select the parameters corresponding to the minimal overall time
of the factorization (blue stars). Values with the same lattice size perform an attempt in an approximately same time. (cid:135)e best
number of attempts for each considered lattice size (m + t) is plotted. (cid:135)ere can exist more than one local minimum for the
total time (as seen for 544-bit RSA keys). Please notice the logarithmic scale of the vertical axis.
:primorial M, ord(cid:48) – divisor of ordM (65537)
Input
Output: M(cid:48) of maximal size with ordM(cid:48) (65537)|ord(cid:48)
M(cid:48) ← M;
forall primes Pi|M do
ordPi ← ordPi (65537);
(cid:45) ord(cid:48) then
if ordPi
end
M(cid:48) ← M(cid:48)/Pi;
end
return M(cid:48)
Algorithm 2: (cid:140)e computation of the maximal divisor M(cid:48) of the
primorial M with ordM(cid:48) (65537)|ord(cid:48) for a given ord(cid:48) (divisor of
ordM (65537)).
keys of a given size. We used a dataset of RSA keys of given sizes
(512 to 4096 bits, by 32-bit increments) with known factorizations
and having our special form (2). (cid:140)e approximate size of the opti-