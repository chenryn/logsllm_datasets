hidden information ﬂows (to rule them out), DroidDisintegrator need only detect the information
ﬂow during nominal operation (to preserve app functionality).
1.5 Related Work
On-device enforcement. TISSA [ZZJF11] and Apex [NKZ10] oﬀer ﬁne-grained control over permis-
sions, e.g., per-app user conﬁguration (which can be tweaked at any time), or a “privacy mode”
(when at a certain location or time). Android temporarily adopted a similar approach with AppOps,
a feature allowing users to dynamically block app permissions, but removed it in 4.4.2 [Ros, XD].
AdSplit [SDW12], AdDroid [PFNW] and Compac [WHZ+] introduced conﬁnement mechanisms to
separate advertisement library permissions from those of the hosting app. ASM [HNES14] exposes
a callback interface for handling and monitoring system events. Aurasium [XSA12] repackages apps
to add policy enforcement code. Both ASM and Aurasium are generic policy enforcement tools that
expose ﬂexible interfaces for policy deﬁnition.
SEAndroid [SC13, SFE10] enforces mandatory access controls using SELinux at the kernel level,
and is now partially integrated into Android mainline. Aquifer [NE13] and Joshi et al. [KNK+12]
are mechanisms for inter-app IFC.
Quire [DSP+], IPC Inspection [FWM+11], and XManDroid [BDD+12, BDD+] address the “con-
fused deputy” [Har88] (permission redelegation) attacks. Quire [DSP+] provides authentication code
and metadata for data ﬂowing through apps and RPCs, so that the provenance of the data and
IPC Inspection [FWM+11] revokes per-
origin of requests can be veriﬁed by the receiving end.
missions of apps upon interaction with less-privileged code. XManDroid [BDD+, BDD+12] also
monitors inter-app communication and uses a centralized policy to mitigate collusion attacks and
confused deputy attacks. These confused deputy mitigation methods can ensure the integrity of
data and requests that ﬂow through apps, and prevent these apps from unintentionally fulﬁlling an
untrusted request. The beneﬁts of this partially overlap with those of IFC, e.g., blocking confused
deputy attacks that cause a data leak. However, the above do not protect against intentional or
unintentional information leaks by apps themselves. Also, in IPC Inspection, permission revocation
is at app level, which is coarser grained than component-level and may be over-restrictive.
6
Static analyzers like Stowaway [FCH+11] and permission-protected API speciﬁcations like PScout
[AZHL12] and SuSi [ARB13] can be used to learn which permissions are requested by the app and
not used at all (they protect APIs not accessed by the app). Removing these from the app’s permis-
sions list is a degenerate case of IFC; it prevents information ﬂows from these sources into any sink.
We focus on enforcing IFC between information sources and sinks which are legitimately accessed
by some part of the app.
Intra-application IFC. SEDalvik [BBC+13] provides mandatory access control for Java objects in
Android. The virtual machine itself monitors the interaction between the objects. This granularity
is very ﬁne, resulting in extremely complex policies. No methodology for intra-application IFC
policy construction is oﬀered. Moreover, the Java virtual machine in Android (Dalvik ) is not a
sandbox. Malicious apps can run native code and evade SEDalvik altogether. AppFence [HHJ+11]
enforces IFC using taint tracking. Taint tracking does not capture implicit ﬂows and can be eas-
ily bypassed by an aware malicious developer (DroidDisintegrator also uses taint tracking using
TaintDroid [EGC+14], but only for policy generation, and not for enforcement). Jia et al. [JAF+]
proposed using component granularity for specifying a DIFC policy, and devised a suitable process
calculus. However their proposed intra-application IFC enforcement is “best eﬀort” rather than
sound: when the app deviates from conventional Android programming patterns, and even when
the app uses some recommended programming patterns [Doca, Docb], there will be undetected and
erroneously permitted information ﬂow. Moreover, Jia et al. do not handle callbacks registered by
components (see Section 4.2), so a vast amount of code in typical Android apps will go unmonitored.
2 Android Background
2.1 Components in Android
Android apps are composed of components. Each component is of one of the following types:
Activity, Broadcast Receiver, Service or Content Provider. Each component is declared in the app
“manifest” ﬁle, along with some of its attributes1. The manifest is an XML ﬁle with explicit
declarative speciﬁcation of some of the app requirements and behaviors. Each component has
a speciﬁc role to play in the app’s functionality. Activities correspond to app “windows” (UI
behaviors). Broadcast Receivers are a “mailbox” (each receiver receives and responds to certain
messages or broadcast events). Services (not to be confused with system services, see Appendix A.3)
represent background operations or “living” objects. Content Providers export content (e.g., table
based databases). The behavior of the app is deﬁned as the joint behavior of its components.
According to Android Developer documentation, “each one [component] exists as its own entity
and plays a speciﬁc role — each one is a unique building block that helps deﬁne your app’s overall
behavior”. We thus view app components as standalone building blocks. The developer customizes
component behavior by extending base classes (e.g., “class Activity”) and overriding their methods.
These methods serve as callbacks into app code, invoked upon phases in the component life cycle2.
App component code typically runs within a single process. Components are provided as Dalvik
1Some components are not declared in the manifest but are registered by the app at runtime, using designated
APIs.
2It is possible to deﬁne entry points to app code that are not a part of a component’s life cycle. Examples include
class static constructors, and adding app instrumentation code (e.g., for runtime proﬁling). These and other types of
entry points can be modeled as additional (synthetic) components.
7
Executable (DEX) bytecode, and the app process runs an instance of the Dalvik Virtual Machine
(DVM) to execute the bytecode.
2.2 ICC and Binder in Android
The Android API supports and encourages communication between components utilizing a series of
framework interfaces called Inter-Component Communication (ICC ). For example, an Activity (or
any other component) can start a new activity or service, send a broadcast message to broadcast
receivers, and query content providers.
In these cases an Android process (the System Server )
mediates, and is able to monitor, this interaction. However, it would not be correct to assume that
all interaction between components takes place through these interfaces. See Appendix A.5 for more
details about ICC.
Android supports RPCs with an elaborate architecture called Binder. The Binder architecture
consists of in-kernel code, along with native and Java middleware, which implement Binder objects.
They can be thought of as system-global objects. To obtain a reference to a Binder object, a process
must get its token from the kernel. Instance methods of Binder objects are executed in the process
that instantiated the Binder object. Appendix A.3 elaborates on the Binder architecture. We refer
to a Binder object instantiated in a process as a local Binder object in this process; otherwise, it is
a remote Binder object.
The ICC API is exposed by the Activity Manager (AM), a globally-available Binder object
(its token obtainable by any process) which is local in the system server. ICC always crosses app
boundaries: to perform an intended action, a component sends an Intent to the AM, which resolves
the intent’s target component (which can handle the action) and sends it the intent3.
3 Our Approach
3.1 DroidDisintegrator Workﬂow
We designed and implemented a full workﬂow for realizing component-level IFC. It consists of
dynamic analysis of an app, generation of an IFC policy based on the analysis, repackaging to
embed the policy, and ﬁnally, enforcing the policy at runtime. In this section we provide a concise
overview of the workﬂow, which is depicted in Figure 2. Section 4 describes DroidDisintegrator, our
implementation of this workﬂow.
Dynamic Analysis. We ﬁrst collect information about app component interaction in order to con-
struct a policy. The dynamic analysis framework is a device emulator running an Android OS
variant designed to monitor three types of events when running apps: app component communica-
tion through the process memory, app component communication through other channels, and use
of permissions by individual components. An event fuzzer drives the app’s behavior in the dynamic
analysis framework. Figure 3 depicts the detected events in an actual app.
Policy Generation. An app decomposition (see Section 1.3) conﬁguration, as well as an IFC policy,
are generated using the information captured during dynamic analysis. The decomposition conﬁg-
uration is a mapping of components into subsets (processes): an equivalence relation is generated
3We use the term ICC also when referring to Content Provider APIs, which operate similarly to intents.
8
Figure 2: DroidDisintegrator workﬂow
Figure 3: Inter-component communication and component permission use in “GreyThinker”, a call
blocking utility (“com.greythinker.punchback”). Green nodes denote permissions used (sources
and sinks). Red edges denote communication through process memory. Black edges denote other
communication.
9
instruction.step_06_anonyvminstruction.step_07_unknowncallandroid.permission.WRITE_SETTINGSandroid.permission.INTERNETinstruction.step_02_startnotifyinstruction.step_04_erasecallloginstruction.step_05_anonymousinstruction.step_01_bootupinstruction.AboutWndinstruction.step_03_blocknotifyandroid.permission.RECEIVE_SMSblockingops.SmsReceiverblockingops.PunchBackServiceblockingops.PunchBackSetupInstructionStartReceiverMainWndandroid.permission.READ_PHONE_STATEin which two components are equivalent (mapped to the same process) iﬀ it is not possible to as-
sume that some information ﬂows into, or from, one of them and not the other (this is detailed
in Section 3.3). A policy contains: (1) Permissions assigned to each component subset (process).
(2) Allowed communication directions between component subsets. Such a policy allows us to infer
statically which information ﬂows will be possible at runtime (this is detailed in Section 3.4).
The output of the policy generation stage can assist developers in making simple changes that
would make the policy more information-ﬂow preventive.
Optional program adaptation. Awareness of the eventual IFC policy allows developers to alter app
code to make it conductive to the component-level IFC analysis and enforcement, guided by the
output of the policy generation stage.
Repackaging. We change the app’s manifest to declare a process for each component, process
permissions, and the allowed inter-process communication directions.
Runtime Enforcement. At app installation and runtime on end users’ devices, a modiﬁed version
of the Android OS enforces the IFC policy embedded within the app package. This is done by
leveraging process compartmentalization, and adding a lightweight reference monitor. No expensive
analysis, such as taint tracking, is done at this stage.
3.2 Discussion: Static vs. Dynamic Analysis
It is natural to consider using static (rather than dynamic) analysis for Inter-Component Commu-
nication. Static analysis is less sensitive to platform updates, and does not require driving the app
UI, for example manually or by fuzzing. However, state-of-the-art Android static analysis[GKP+,
LBB+15, ARF+14] methods explore control ﬂow paths that are unreachable in actual app opera-
tion. For example, they consider all sequences of UI event callbacks, including those which cannot
occur in the given UI state (the user can only interact with visible Activities). There are also
Android-speciﬁc diﬃculties of static app analysis (partially addressed by IccTA[LBB+15]): the
asynchronous, user-centric nature of Android apps, and accurately tracking Intent targets. In our
workﬂow, when the above issues result in analysis false positives, it could cause the generated policy
to be overly permissive (see Section 4.10). Moreover, static analysis cannot be easily plugged into
existing product acceptance tests or unit tests to leverage their app-tailored code exploration, as we
would expect developers to do with DroidDisintegrator. For these reasons we chose to use dynamic
analysis for our initial implementation.
3.3 App Decomposition Conﬁguration
We wish to map components into processes so that each component resides in one process as
described in Section 3.1. The mapping has two goals: not to break app behavior and to reduce the
overall number of processes (to reduce unnecessary performance overhead). For the second purpose,
we will join components with the same expected privileges into the same process.
Let the relation Rcomm be all app component pairs (A, B) s.t. A sends information to B via ICC
(sends intent/reads content provider/etc.) or via an IAC channel (Android Properties, ﬁle system
inode representing a ﬁle, pipe, etc.). Let the relation Rmem be all app component pairs (A, B) s.t.
information ﬂows from A to B through process memory. We say information ﬂows fromA to B
through process memory iﬀ A writes data that B reads (for example, A sends B a value using a
static class member).
Let R be a relation. We use R+to denote its closure and R−1to denote its inverse.
10
Note that if (A, B) , (B, A) ∈ (Rcomm)+, then A and B communicate back and forth. We
cannot enforce that one of them has access to less information than the other without breaking app
functionality. By segregating them into diﬀerent processes, we gain nothing.
(cid:1)+ (one is reachable from the other by traversing
Note, moreover, that if (A, B) ∈(cid:0)Rmem ∪ R−1
mem
Let Rproc ≡ Rcomm ∪ Rmem ∪ R−1
Rmem), then A and B need to share a memory address space for them to function correctly, and we
cannot separate them.
mem, Rscc ≡ SCC (Rproc) (the Strongly Connected Components
DAG of Rproc). Each node in Rscc corresponds to a subset of the components in the app. Because
are no process-memory ﬂows between the subsets, they can be segregated to diﬀerent processes,
and these can be privileged diﬀerentially.
The dynamic analysis stage is designed to ﬁnd Rmem,Rcomm and Rproc as well as the permissions
that each component (and process) requires. Rscc can be computed from Rproc. The mapping of
component nodes in Rproc to nodes in Rscc corresponds to our desired mapping of components to
processes.
3.4 Policies
We wish to construct an IFC policy for inter-component communication and resource use, as deﬁned
in Section 3.1.s
Let Psource,Psink be permissions which protect some APIs. Psource protects an information source
and Psink protects an information sink. Components, or subsets of components, can access these
APIs, in which case we say that they use Psource or Psink respectively. We then say that Psink is
reachable from Psource in the relation R if there is a path on the graph spanned by R (where nodes
are components or subsets of components) from a node which uses Psource to a node which uses
Psink. We say that there is a ﬂow in an app from Psource to Psink if information is transferred from
one to the other by the app. We observe that an information ﬂow from Psource to Psink exists in the
app, as measured by our dynamic analysis, only if Psink is reachable from Psource in Rscc. If such a
path does not exist, we wish to enforce the absence of such information ﬂow in future executions of
the app on the user’s device.
DroidDisintegrator thus constructs the following policy: (1) A permission is granted to a process
if it is requested by the app and one of the components in the process uses it during the dynamic
analysis. (2) Communication between app processes should only be allowed in the direction of edges
in the graph spanning Rscc (where each node corresponds to a process).
4 DroidDisintegrator
We developed DroidDisintegrator, a set of tools for performing app decomposition as described in
Section 3. DroidDisintegrator analyzes and transforms apps to IFC constrained versions of these
apps, to be run in an enforcing Android OS. It is an implementation, and automation, of the
app decomposition workﬂow presented in Section 3.1: dynamic analysis (Sections 4.1 through 4.6),
policy and app decomposition conﬁguration generation (Section 4.7), repackaging of the application
(Section 4.8), and enforcement (Section 4.9).
11
4.1 Dynamic Analysis Overview
DroidDisintegrator performs dual-faceted tracking of inter-component information ﬂow and tracking
of component resource use in apps. Tracking is performed in a modiﬁed version of the Android OS,
which preserves all Android functionality and augments it with monitoring of app runtime behavior.
DroidDisintegrator employs three designated subsystems. The ﬁrst, CommTrack , tracks Android
ICC events that cross process boundaries (i.e., events that correspond to Rcomm edges). The second,
MemTrack, is based on a dynamic taint analysis infrastructure (TaintDroid [EGC+14]) and tracks
cross-component information ﬂows that occur by direct access to the same memory address by
multiple components (i.e., events that correspond to Rmem edges). The third, PermTrack, tracks
the use of permissions by individual components. DroidDisintegrator runs the app and logs the
events captured by these subsystems.
All three information tracking subsystems assume runtime knowledge of the currently running
component. To this end we add a Component Identity (CI) register to the Dalvik Virtual Machine
(DVM) thread state struct. This register holds a unique identiﬁer of the currently-running compo-
nent. This requires instrumenting component entry and exit points with register updates, and also
tracking callbacks registered by components.
DroidDisintegrator is also integrated with Appsplayground, which contributes automatic app
functionality exploration techniques and disguising of the emulator. This allows automatic dynamic
analysis of a given app, and makes analysis scalable and parallelizable.
Section 4.2 describes CI register maintenance. Sections 4.3, 4.4 and 4.5 describe the tracking
subsystems. Section 4.6 discusses the integration with Appsplayground. Section 4.1.1 discusses an
important observation guiding some choices behind the design of CommTrack and MemTrack.