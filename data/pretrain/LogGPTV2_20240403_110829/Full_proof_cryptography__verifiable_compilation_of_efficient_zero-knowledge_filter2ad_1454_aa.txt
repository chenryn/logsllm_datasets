title:Full proof cryptography: verifiable compilation of efficient zero-knowledge
protocols
author:Jos&apos;e Bacelar Almeida and
Manuel Barbosa and
Endre Bangerter and
Gilles Barthe and
Stephan Krenn and
Santiago Zanella B&apos;eguelin
Full Proof Cryptography: Veriﬁable Compilation of
Efﬁcient Zero-Knowledge Protocols∗
José Bacelar Almeida
HASLab - INESC TEC
Univ. do Minho, Portugal
PI:EMAIL
Gilles Barthe
IMDEA Software Institute
Madrid, Spain
Manuel Barbosa
HASLab - INESC TEC
Univ. do Minho, Portugal
PI:EMAIL
Stephan Krenn†
IST Austria
Klosterneuburg, Austria
Endre Bangerter
Bern Univ. of Appl. Sciences
Bern, Switzerland
PI:EMAIL
Santiago Zanella Béguelin
Microsoft Research
Cambridge, UK
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
Developers building cryptography into security-sensitive applica-
tions face a daunting task. Not only must they understand the se-
curity guarantees delivered by the constructions they choose, they
must also implement and combine them correctly and efﬁciently.
Cryptographic compilers free developers from this task by turn-
ing high-level speciﬁcations of security goals into efﬁcient imple-
mentations. Yet, trusting such tools is hard as they rely on com-
plex mathematical machinery and claim security properties that are
subtle and difﬁcult to verify. In this paper we present ZKCrypt,
an optimizing cryptographic compiler achieving an unprecedented
level of assurance without sacriﬁcing practicality for a comprehen-
sive class of cryptographic protocols, known as Zero-Knowledge
Proofs of Knowledge. The pipeline of ZKCrypt integrates purpose-
built veriﬁed compilers and verifying compilers producing formal
proofs in the CertiCrypt framework. By combining the guarantees
delivered by each stage, ZKCrypt provides assurance that the out-
put implementation securely realizes the abstract proof goal given
as input. We report on the main characteristics of ZKCrypt, high-
light new deﬁnitions and concepts at its foundations, and illustrate
its applicability through a representative example of an anonymous
credential system.
∗This work was partially funded by National Funds through
the FCT - Fundação para a Ciência e a Tecnologia (Portuguese
Foundation for Science and Technology) within project ENI-
AC/2224/2009, by ENIAC Joint Undertaking under grant agree-
ment number 120224, European Projects FP7-256980 NESSoS
and FP7-229599 AMAROUT, Spanish National project TIN2009-
14599 DESAFIOS 10, and Madrid Regional project S2009TIC-
1465 PROMETIDOS.
†Most of this work was done while the author was at Bern Univer-
sity of Applied Sciences and University of Fribourg.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
Categories and Subject Descriptors
D.2 [Software Engineering]: Software/Program Veriﬁcation; D.3
[Programming Languages]: Processors—Compilers
Keywords
Zero-knowledge, verifying compilation, cryptographic compiler
1.
INTRODUCTION
Zero-Knowledge Proofs of Knowledge (ZK-PoKs) [33, 34] are
two-party protocols in which a prover convinces a veriﬁer that it
knows a secret piece of information satisfying some property with-
out revealing anything except the correctness of this claim. ZK-
PoKs allow obtaining assurance on a prover’s honest behavior with-
out compromising privacy, and are used in a number of practical
systems, including Direct Anonymous Attestation (DAA) [15], a
privacy-enhancing mechanism for remote authentication of com-
puting platforms, the identity mixer [17], an anonymous credential
system for user-centric identity management, Off-the-Record mes-
saging [13,31], a protocol enabling deniability in instant messaging
protocols, and privacy-friendly smart metering [47], an emerging
technology for smart meters. However, more than 25 years after
their inception [32], the potential of ZK-PoKs has not yet been fully
realized, and many interesting applications of ZK-PoKs still only
exist at the speciﬁcation level. In our experience, one main hurdle
towards a larger use of ZK-PoKs is the difﬁculty of designing and
correctly implementing these protocols for custom proof goals.
Zero-knowledge compilers [6, 43] are domain-speciﬁc compil-
ers that automatically generate ZK-PoKs for a large class of proof
goals. They are a promising enabling technology for ZK-PoKs, be-
cause they allow developers to build cryptographic protocols that
use them, without deep expertise in cryptography, and without the
risk of introducing security ﬂaws in their implementations. Zero-
knowledge compilers embed a sophisticated mathematical machin-
ery, and as a consequence implementing them correctly can be
difﬁcult—arguably more difﬁcult than implementing optimizing
compilers. Moreover, such compilers cannot be tested and de-
bugged because their purported correctness properties are formu-
lated in the style of provable security, and testing such properties is
out of reach of current methods. This leaves practitioners with no
other option than blindly trusting that the compiler is correct.
Contributions. We present ZKCrypt, a high-assurance zero-know-
ledge compiler that outputs formally veriﬁed and optimized imple-
mentations of ZK-PoKs for a comprehensive set of proof goals.
488.zk File
.psl File
Templates
Proof goal G
Resolution
Resolved goal 
Implementation
Gres
.pil File
Optimized 
implementation 
Iopt
Generation
.c or .java Files
C or Java 
implementation
CACE Compiler
CertiCrypt
Proof goal G
Automatic
Veriﬁcation
Translate, 
Recover and
correctness of
Gres wrt G
Resolved goal 
Gres
Veriﬁed
Compilation
Reference 
implementation Iref
Completeness, 
Proof of Knowledge 
and
Zero Knowledge of 
Iopt wrt Gres
Optimized 
implementation 
Iopt
Automatic
Veriﬁcation
Observational 
equivalence 
of Iopt vs Iref
Completeness, Proof of Knowledge and 
Zero Knowledge of Iopt wrt goal G
Figure 1: ZKCrypt architecture, depicting a verifying compiler that takes high-level proof goals G to optimized implementations
(top), relying on a veriﬁed compiler implemented in Coq/CertiCrypt (center). Full lines denote compilation steps and translation
over formalization boundary (i.e. the generation of code that can be fed into formal veriﬁcation tools), dashed lines denote formal
veriﬁcation guarantees. Rectangular boxes denote code in various (intermediate) languages either stored in ﬁles or as data structures
in memory. Rounded rectangles represent the main theorems that are generated and formally veriﬁed by ZKCrypt and which jointly
yield the desired formal correctness and security guarantees.
We consider in particular Σ-protocols [24] for proving knowl-
edge of pre-images under group homomorphisms, which underly
essentially all practically relevant applications of ZK-PoKs, in-
cluding those mentioned above and the identiﬁcation schemes by
Schnorr [49] and Guillou-Quisquater [36].
ZKCrypt achieves an unprecedented level of conﬁdence among
cryptographic compilers by leveraging and transposing to the realm
of cryptography two recent breakthroughs: veriﬁed compilation
[39], in which the correctness of a compiler is proved once and
for all, and verifying compilation [45, 52], in which the correctness
of the output of a compiler is proved for each run. Speciﬁcally,
ZKCrypt implements a veriﬁed compiler that generates a reference
implementation, and a verifying compiler that outputs an optimized
implementation provably equivalent to the reference implementa-
tion. Taken together, the proofs output by the compilers establish
that the reference and optimized implementations satisfy the fol-
lowing properties1 (see §3 for formal deﬁnitions):
• Completeness: an honest prover can always convince an hon-
est veriﬁer;
• Proof of knowledge: a malicious prover not knowing the
secret cannot convince the veriﬁer, except with some small
probability;
• Zero-knowledge: a veriﬁer following the protocol cannot
learn additional information about the secret.
The architecture of the compiler is shown in Figure 1. At the top
level, ZKCrypt is composed of a chain of compilation components
that generates C and Java implementations of ZK-PoKs; these im-
plementations can be turned into executable binaries using general-
purpose compilers. These top-level components are an extension
of the CACE compiler [2] with support for user-deﬁned templates
and high-level proof goals. At the bottom level, ZKCrypt generates
formal proofs in the CertiCrypt framework [8]. The compilation
component is independent of the veriﬁcation component.
The main compilation phases in ZKCrypt are the following:
1In the remainder of this paper, we refer to these three properties
as the (relevant) security properties of ZK-PoKs.
Resolution takes a user-friendly description of proof goal G and
outputs an equivalent goal Gres, where high-level range
restrictions are converted, using standard techniques, into
proofs of knowledge of pre-images under homomorphisms;
such pre-image proofs are atomic building blocks that cor-
respond to well known concrete instances of ZK-PoK pro-
tocols, which can be handled by subsequent compilation
phases. The correctness of resolution is captured by a trans-
formation that provably converts ZK-PoK protocols for Gres
into ZK-PoK protocols for G. The compiler implements both
the decomposition and the transformation, and we prove a set
of sufﬁcient conditions for correctness and security;
Veriﬁed compilation takes a resolved goal Gres and outputs a ref-
erence implementation Iref in the embedded language of Cer-
tiCrypt. A once-and-for-all proof of correctness guarantees
that this component only produces reference implementa-
tions that satisfy the relevant security properties, for all sup-
ported input goals. This result hinges on two contributions
of independent interest: a uniﬁed treatment of the proof of
knowledge property, and a formalization of statistical zero-
knowledge;
Implementation takes a resolved goal Gres and outputs an opti-
mized implementation Iopt. The correctness of this step is
established, in the style of verifying compilation, using an
equivalence checker proving semantic equivalence between
the reference and optimized implementations Iref and Iopt.
Generation takes the optimized implementation Iopt and produces
implementations of the protocol
in general-purpose lan-
guages. This component in the compiler is the same as that
presented in [2], and is not veriﬁed.
Combining the correctness results for each phase yields a proof that
the optimized implementation Iopt satisﬁes the security properties
of the original high-level goal G. This approach is the same as
veriﬁed compilers such as CompCert [39]. As in CompCert, it is
convenient to combine certiﬁed and certifying compilation, instead
of certifying the whole compiler chain. Our results show that these
techniques are also beneﬁcial for cryptographic compilers.
489New additions to the compiler. There are main two aspects in
which this work extends the CACE compiler [2]. Firstly, the ver-
iﬁcation back-end of ZKCrypt supports more proof goals: by ad-
dressing ΣGSP-protocols and high-level goal resolution, we can ver-
ify implementations satisfying the needs of many practical appli-
cations. Secondly, in addition to soundness, ZKCrypt also for-
mally veriﬁes the completeness and HVZK properties, covering
all properties relevant to practical applications. Achieving these
extensions posed signiﬁcant challenges. The theoretical aspects
surrounding ΣGSP-protocols are knottier compared to Σφ-protocols
addressed in [2, 11]. For example, reasoning about statistical dis-
tance and dealing with computational assumptions required to de-
velop a backend from scratch based on cryptography-speciﬁc ver-
iﬁcation tools. Indeed, using formal tools such as CertiCrypt as
backends for verifying the compilation of cryptographic protocols
is unprecedented.
Limitations. Although the veriﬁcation component of our compiler
is comprehensive, it currently has two limitations. First, ZKCrypt
delivers formal guarantees about the correctness of the optimized
implementation Iopt, but not for the last step in the compilation
chain, namely the generation of Java or C code. Although we con-
sider the veriﬁcation of this last compilation step as an important
direction for future development, we see this as an independent
line of work because the veriﬁcation goals involved at this level are
of a different nature to those presented in this paper. Speciﬁcally,
the natural path to achieve correctness guarantees about binaries is
to extend ZKCrypt with formal veriﬁcation at the code generation
level, and then to use a high-assurance compiler from C or Java to
binaries. Given the characteristics of the programming language
used for the optimized implementations Iopt, the key step to adding
a formal veriﬁcation back-end for code generation is to build a cer-
tiﬁed number theory library that matches the one provided with
the CACE compiler. Compilation from C to binaries can then be
certiﬁed directly using state-of-the-art veriﬁed compilers, such as
CompCert [39]. Second, we do not prove completeness of veriﬁ-
cation, i.e., that all CACE compiler programs can be veriﬁed by our
component. A reason for this is that there are some known sources
of incompleteness, as some of the proof goals that can be handled
by the CACE compiler are not yet supported. A more fundamental
reason is that certifying compilation techniques, as used by part of
the formal veriﬁcation back-end, are seldom proved complete; in-
stead, one validates the effectiveness of a technique by its ability to
cover a wide range of examples. As we will show, ZKCrypt sat-
isfactorily complies with this more practical view, as the class of
goals for which veriﬁcation is available is already broad enough to
cover most practical applications.
Paper organization. The applicability of ZKCrypt is illustrated in
§2 through a use case from the identity mixer anonymous creden-
tial system [17]; §3 provides some necessary background material;
§4–§6 explain the resolution, veriﬁed compilation and implementa-
tion phases, respectively; §7 brieﬂy reports on further experimental
results. We conclude with a discussion of related work in §8 and
future research directions in §9.
2. USE CASE
Anonymous credential systems [22,23] are among the most prac-
tically relevant applications of ZK-PoKs; examples of prominent
realizations include the IBM identity mixer library (Idemix) [21],
the Microsoft U-Prove toolkit [44], as well as Trusted Platform
Modules (TPMs), which implement the Direct Anonymous Attes-
tation (DAA) protocol [15], and are widely built into consumer lap-
tops and PCs. In a further and coordinated effort to bring anony-
mous credential systems to practice, the ABC4Trust project [1] is
working to deliver open reference implementations of attribute-
based credential systems, and to integrate them into real-world
identity-management systems.
An anonymous credential system consists of a collection of pro-