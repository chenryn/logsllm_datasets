title:Security Analysis of Unified Payments Interface and Payment Apps in
India
author:Renuka Kumar and
Sreesh Kishore and
Hao Lu and
Atul Prakash
Security Analysis of Unified Payments Interface 
and Payment Apps in India
Renuka Kumar, University of Michigan; Sreesh Kishore; Hao Lu and 
Atul Prakash, University of Michigan
https://www.usenix.org/conference/usenixsecurity20/presentation/kumar
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Security Analysis of Uniﬁed Payments Interface and Payment Apps in India
Renuka Kumar1, Sreesh Kishore , Hao Lu1, and Atul Prakash1
1University of Michigan
Abstract
Since 2016, with a strong push from the Government of India,
smartphone-based payment apps have become mainstream,
with over $50 billion transacted through these apps in 2018.
Many of these apps use a common infrastructure introduced
by the Indian government, called the Uniﬁed Payments In-
terface (UPI), but there has been no security analysis of this
critical piece of infrastructure that supports money transfers.
This paper uses a principled methodology to do a detailed
security analysis of the UPI protocol by reverse-engineering
the design of this protocol through seven popular UPI apps.
We discover previously-unreported multi-factor authentica-
tion design-level ﬂaws in the UPI 1.0 speciﬁcation that can
lead to signiﬁcant attacks when combined with an installed
attacker-controlled application. In an extreme version of the
attack, the ﬂaws could allow a victim’s bank account to be
linked and emptied, even if a victim had never used a UPI
app. The potential attacks were scalable and could be done
remotely. We discuss our methodology and detail how we
overcame challenges in reverse-engineering this unpublished
application layer protocol, including that all UPI apps undergo
a rigorous security review in India and are designed to resist
analysis. The work resulted in several CVEs, and a key attack
vector that we reported was later addressed in UPI 2.0.
1 Introduction
Payment apps have become a mainstream payment instrument
in India, with the Indian Government actively encouraging its
citizens to use electronic payment methods after a demonetiza-
tion of large currency notes in 2016 [29]. To facilitate digital
micro-payments at scale, the National Payments Corporation
of India (NPCI), a consortium of Indian banks, introduced the
Uniﬁed Payment Interface (UPI) to enable free and instant
money transfers between bank accounts of different users. As
of July 2019, the value of UPI transactions has reached about
$21 billion [45]. UPI’s open backend architecture that enables
easy integration and interoperability of new payment apps is a
signiﬁcant enabler. Currently, there are about 88 UPI payment
apps and over 140 banks that enable transactions with those
apps via UPI [40, 41]. This paper focuses on vulnerabilities
in the design of UPI and UPI’s usage by payment apps.
We note that hackers are highly motivated when it comes to
money, so uncovering any design vulnerabilities in payment
systems and addressing them is crucial. For instance, a recent
survey states a 37% increase in ﬁnancial fraud and identity
theft in 2019 in India [12]. Social engineering attacks to
extract sensitive information such as one-time passcodes and
bank account numbers are common [17, 23, 34, 57, 58].
Payment apps, including Indian payment apps, have been
analyzed before, with vulnerabilities discovered [9, 48], and
an Indian mobile banking service was found to have PIN
recovery ﬂaws [47]. However, in these studies, mobile apps
did not share a common payment interface. As far as we are
aware, an analysis of a common interface used by multiple
payment apps has not been done before. Such an analysis
is important because security ﬂaws in them can impact cus-
tomers of multiple banks and multiple apps, regardless of
other stronger security features used. We focus on the security
analysis of the uniﬁed payment interface used by many Indian
payment apps and its design choices.
In this work, we use a principled approach to analyze UPI
1.0, overcoming signiﬁcant challenges. A key challenge is
that the protocol details are not available, though millions of
users in India use it. We also did not have access to the UPI
servers. We thus had to reverse-engineer the UPI protocol
through the UPI apps that used it and had to bypass various
security defenses of each app, including code obfuscation and
anti-emulation techniques. Though we build on techniques
used in the past for security analysis of apps [9, 21, 46, 48],
our approach to extract the protocol details varies based on the
defenses the apps use. We carefully examine each stage of the
UPI protocol to uncover the credentials required to progress
in each stage, ﬁnd alternate workﬂows for authentication, and
discover leakage of user-speciﬁc attributes that could be useful
at a later stage.
We present results from the analysis of the UPI protocol,
USENIX Association
29th USENIX Security Symposium    1499
App Name
Launched
Versions
Installs
Rating
UPI
BHIM
Ola Money
Phonepe
SamsungPay
Paytm
Google Pay (Tez)
Amazon Pay1
1Amazon Pay is not available on Google Play store
1.3, 1.4, 1.5
1.8.1, 1.8.2, 1.9.0
3.0.6, 3.3.23
2.8.49, 2.9.3
8.2.12
39.0.001
18.15.2
Dec, 2016
Nov, 2015
Dec, 2015
Aug, 2016
Aug, 2010
Sept, 2017
Feb 2019
10M+
1M+
100M+
50M+
100M+
100M+
4.1
3.8
4.5
4.7
4.4
4.4
1.0
1.0
1.0
1.0
2.0
2.0
2.0
Table 1: List of apps analyzed and their Google Play ratings
as seen by seven of the most popular UPI apps in India listed
in Table 1. Of the seven apps we analyze, four UPI apps—
Google Pay (Tez), PhonePe, Paytm, and BHIM—have a com-
bined market share of 88% [27] and are widely accepted at
many shopping sites. From a total of 88 UPI apps, many are
minor variations of BHIM, the ﬂagship app released by NPCI
(also the designers of UPI). Close to 48 banks today issue a
bank-branded version of the BHIM app. Since Android owns
over 90% of the Indian mobile market share [13], we focused
on the Android versions of these apps.
Our threat model assumes that the user is careful to use
an authorized payment app on a non-rooted Android phone,
but has installed an attacker-controlled app with commonly
used permissions. We also do not rely on the success of social
engineering attacks, though they could simplify exploiting
some of the vulnerabilities we uncovered. We uncovered
several design choices in the UPI 1.0 protocol that lead to the
possibility of the following types of attacks:
• Attack #1: Unauthorized registration, given a user’s cell
number: This attack leaks private data such as the set
of banks where a user has bank accounts and the bank
account numbers.
• Attack #2: Unauthorized transactions on bank accounts
given a user’s cell number and partial debit card number:
Purchases using a debit card in India, whether in-store or
online, requires a user to authorize the payment by enter-
ing a secret PIN. In this attack, an attacker, by knowing
a user’s cell number and debit card information printed
on the card (last six digits and expiry date, without the
PIN), can do transactions on a bank account of a user
who has never used a UPI app for payments.
• Attack #3: Unauthorized transactions without debit card
numbers: This attack shows how an attacker that starts
out with no knowledge of a user’s authentication factors
can learn all the factors to do unauthorized transactions
on that user’s bank account.
Our work started over two years ago when NPCI released
UPI 1.0 and BHIM, which are the focus of our analysis. Given
the potential risks with releasing our ﬁndings, we waited to
publish until NPCI addressed a critical attack vector in the re-
cently released UPI 2.0. Our key contributions are as follows.
• We conduct the ﬁrst in-depth security analysis of the
unpublished UPI 1.0 protocol that provides a common
payment interface to many popular mobile payment apps
in India and allows bank-to-bank transfers between users
of different apps.
• We show how to systematically reverse-engineer this
complex application layer protocol from the point-of-
view of an adversary with no access to UPI servers. We
use BHIM, the reference implementation for UPI apps re-
leased by the Indian government, for our initial analysis
and then conﬁrm our ﬁndings on other UPI apps.
• We found subtle design ﬂaws in the UPI protocol, which
can be exploited by an adversary using an attacker-
controlled app that leverages known ﬂaws in Android’s
design, to construct scalable remote attacks. We show
how an adversary can carry out the attacks starting with
no knowledge of a user.
• As responsible disclosure, we reported the ﬂaws to app
developers, CERT India, and CERT US, resulting in sev-
eral CVEs. A key attack vector we reported to NPCI and
CERT India was addressed in UPI 2.0.
• We present early ﬁndings from an ongoing analysis of
UPI 2.0, using BHIM, Google Pay, Amazon Pay, and
PayTM—four top-rated UPI 2.0 apps in India. Findings
indicate that some vulnerabilities remain.
• We discuss lessons learned and potential mitigation
strategies to consider when designing such protocols.
2 Background
Early mobile payment apps in India were wallet-only apps.
They could withdraw money from a user’s bank account by
asking a user to enter a debit card number, but not deposit
money back into the bank account. Post demonetization (in
2016), to encourage cashless transactions, a consortium of
Indian banks called the National Payments Corporation of In-
dia (NPCI), backed by the Indian government, introduced the
Uniﬁed Payments Interface (UPI) that allows NPCI-certiﬁed
mobile apps to do free instant money transfers between bank
accounts of different users. UPI apps can inter-operate with
each other since they all share the same payment interface. A
user of BHIM, for instance, can transfer money instantly for
a small purchase from her bank account to the bank account
of a shopkeeper who uses Google Pay. Because of this, most
stores in India accept mobile payments through UPI apps.
Depending on the app, a user can do unlimited transactions
up to $1500 per transaction. Figure 1b shows the UPI money
transfer system when compared with the traditional Internet
banking system in Figure 1a.
2.1 User Registration on a UPI App
The UPI payment system requires Alice to register her pri-
mary cellphone (or cell) number with her bank account(s)
1500    29th USENIX Security Symposium
USENIX Association
(a) Internet
(b) UPI-based
Figure 1: Internet vs. UPI-based Money Transfer
out-of-band to send or receive money. UPI uses the cell num-
ber (i) as a proxy for a user’s digital identity with the bank to
look up a bank account given a cell number; (ii) as a factor in
authentication via SMS one-time passcodes (OTP); and (iii)
to alert users on transactions. The Government of India re-
quires cellphone providers to get copies of government-issued
IDs, manually verify the IDs, and do biometric veriﬁcation
before issuing a cell number 1.
To register for UPI services, Alice must set up her UPI user
proﬁle, add a bank account, and enable transactions on that
bank account, as follows:
1. Set up a UPI user proﬁle: Alice must ﬁrst create a proﬁle
with UPI via a UPI app installed on her bank-registered
cell phone. Alice must ﬁrst give her cell number to UPI
through the UPI app for veriﬁcation. How UPI collects
this information from a user may change with each app.
For instance, some apps read the cell number from the
device, while others ask the user to key-in the cell num-
ber. For instance, Figure 2, screenshot #3, shows how
BHIM reads Alice’s cell number(s) from her phone for
Alice to choose from. The UPI app then sends Alice’s
cell number to the UPI server for veriﬁcation. Once ver-
iﬁed, the UPI server issues a UPI ID for Alice on that
app. Figure 2, screenshot #4 shows how BHIM notiﬁes
Alice when she is veriﬁed. If Alice uses multiple apps,
the UPI server issues a different UPI ID for each app.
The app then prompts Alice to set a passcode. The nature
of the passcode is again speciﬁc to the app. BHIM, for
instance, asks the user to set a 4-digit passcode, as shown
in Figure 2, screenshot #5.
2. Add a bank account: Once Alice’s proﬁle is set up, she
must add the bank account that she wants to use for
withdrawals and deposits. Alice is given a list of bank
names that support UPI (Figure 2, screenshot #6), from
which she can now choose her bank. Alice may repeat
this step to add multiple bank accounts.
1A recent Indian Supreme Court ruling forbids Aadhar’s biometric veriﬁ-
cation for issuing cell numbers. The impact of that ruling on UPI-based apps
and banks is yet to be seen, as it may make it easier for an attacker to do an
unauthorized transfer of a cell number and then take over an account. We do
not discuss this attack vector in this paper.
3. Enable transactions: For Alice to be able to transact on
an added bank account, she has to set up a UPI PIN for
that account before the ﬁrst transaction. The UPI PIN is
Alice’s secret to authorize any future transactions. To set
the UPI PIN, Alice must furnish information printed on
the debit card— the last six digits of her bank’s ATM or
debit card number and expiration date. Alice must also
enter an OTP she receives from the UPI server. The UPI
PIN is a highly sensitive factor since the UPI server uses
it to prevent unauthorized transactions on Alice’s bank
account.
To transfer money to Bob, Alice ﬁrst logs into a UPI app
using the passcode she set during user registration. Then, out-
of-band, Alice requests Bob to provide his UPI ID, which
is often Bob’s cell number. Alice chooses one of the bank
accounts she previously added to the app (Figure 2, screen-
shot #7), initiates the transaction to Bob, and authorizes it by