The BotProbe architecture is shown in Figure 4. The key
elements that we developed are WatchList, IRCMatcher, and
ActiveProbe. WatchList is a Click “information” element
that keeps track of live TCP ﬂows and IRC records. The
IRCMatcher uses a WatchList
to maintain ﬂow records
and examines incoming packets to identify IRC ﬂows. The
ActiveProbe element monitors all IRC ﬂows, performs active
probing if the IRC channel is deemed suspicious, and mod-
iﬁes TCP sequence/acknowledge numbers and checksums
when necessary.
To simplify black-box testing on existing bot binaries, we
also implemented the following elements: (i) an IRCServer
element, which plays the role of a simple IRC server, (ii) a
SimpleResponder that handles all non-IRC connections by
acknowledging every packet it receives, and (iii) a DNSRe-
sponder that answers DNS queries with a local address. If
BotProbe is deployed in-line as a middlebox into a real
network, we can simply remove these three elements.
B. In Situ Experimental Evaluation
We evaluate the detection performance in a virtual net-
work environment with several malicious IRC bots including
Sdbot, Phatbot, Rbot, RxBot, Agobot, Wargbot, and IRCBot
that we obtained from our bot source code repository and
honeynet capture in the wild. The purpose is to test the
false negative rate, i.e., how many bot C&Cs are missed by
BotProbe? We answer this question using in situ VMware
testing of real-world bot binaries described below. For
false positive evaluation, we will report our user study in
Section IV-C.
1) Detection Performance and Analysis: We begin our
analysis by conducting a series of in situ experiments to
evaluate the false negative rate. We proceed by execut-
ing the bot in a Windows XP (VMware guest) instance
and monitoring with BotProbe running on the Linux host
machine. Initially, BotProbe essentially acts as a faithful
NAT middlebox interposing all communications between the
infected host and the Internet. If the IRCMatcher element
identiﬁes an IRC session, the ﬂow will be forwarded to
the IRCServer element that handles and responds to all
IRC requests. The ActiveProbe element resides between the
bot client and the IRCServer element, monitoring chatter
and introducing active probes at appropriate times (e.g.,
when the channel is idle on a suspicious session). While
the IRCServer element has the actual botnet commands,
we do not assume that the ActiveProbe element knows the
commands, as BotProbe runs in the realistic scenario.
Note, in real-world IRC based botnets, we observe that
most of the commands are in IRC TOPIC messages, because
the botmasters are not online all the time. To instruct bots
even when they are not online, botmasters usually put the
commands in the TOPIC of the channel. Thus, whenever a
bot joins the channel, it will understand the commands in
TOPIC and execute (without authentication). In such cases
where there is no PRIVMSG message from the server but
client responses are still produced, we can presume that
the TOPIC is the command and play the probing game by
manipulating observed TOPIC messages (332). We use this
trick in our experiments, in order to faithfully replicate real-
world scenario. In addition, as discussed in Section III-C,
BotProbe performs a Single-Binary-Response-Hypothesis or
Interleaved-Binary-Response-Hypothesis algorithm in our
experiments depending on what kind of (combination of)
response(s) it observes.
We evaluate BotProbe on several real-world IRC bots that
can be grouped into three classes.
1. Open-source bots with obfuscated communica-
tion.: Our ﬁrst case study is an “open source” (as described
in the bot documentation) IRC bot called Spybot, which
was released in 2003. Being open source, many variants
of this bot are on the Internet, making it one of the more
popular botnet families [3], [7]. Spybot is also equipped
with a command encryption option that obfuscates C&C
communication. The encryption method implemented is a
simple byte shift scheme. We recompiled the Spybot source
with the encrypt option enabled and tested the binary using
BotProbe.
In evaluation, we conﬁgured the IRCServer to issue a
set of commonly used commands listed in Table I (one
command in each test). We set
the parameters of the
hypothesis testing algorithm to be θ1 = 0.99, θ0 = 0.15
giving expected false positive (FP) and false negative (FN)
= 0.01,
rates of 0.001 and 0.01, respectively.8 We set θscan
because the probability that a normal chatting client has
scan response is low (much lower than an IRC message
response). Similarly, for a third-party access response, we set
3rd−party−access
= 0.02. We used this parameter setting
θ
0
across all experiments. In the test on Spybot, BotProbe
0
8This θ0 is for the case of Interleaved-Binary-Response-Hypothesis on
message response only.
took two probes when the command was “scan” (Single-
Binary-Response-Hypothesis algorithm was automatically
performed), two probes when the command was “download”
(Interleaved-Binary-Response-Hypothesis algorithm was au-
tomatically performed because we do not use any PE signa-
ture to identify access response), and four probes when using
commands such as “info” and “passwords” (Interleaved-
Binary-Response-Hypothesis algorithm was automatically
performed).
2. Bot binaries with cleartext communication.: We
tested a few other bots, e.g., Phatbot, Rbot, Rxbot, Sdbot [3],
in our controlled network. In these experiments, C&C ex-
changes are in cleartext by default. However, we noticed
that the source code for these bots includes encryption and
decryption functions, shell code encodings, and support for
polymorphism. It is straightforward to enable the use of
these encryption routines for command obfuscation. The
performance of BotProbe on these bots was identical to
Spybot, i.e., it took two or four rounds of probes, depending
on the command.
3. Bot binaries with obfuscated communication.:
Next, we tested on a recent bot binary (W32.Wargbot as
labeled by Symantec) captured in the wild. The botmaster
put an encrypted command (shown below) in the IRC
TOPIC message for bots to execute upon joining the chan-
nel. Subsequently, BotProbe automatically performed the
Single-Binary-Response-Hypothesis algorithm, and it took
only one extra probe to declare the bot because the bot had
background scanning behavior.
!Q ;\\|!Q ;P;E;E=:477<4<&79?&7
ju}trugj&nzzv@55oxi...
-
-
-
IRC response
Version:... cpu:...
Error operation failed
Portscanner startip:...
download http:...
[MAIN]: Bot ID: rx01.
[SYSINFO]: [CPU]: ...
[SCAN]: Port scan started...
Activity response
No. rounds
-
-
scan
3rd-party access
-
-
scan
4
4
2
2
4
4
2
" F |" e http://img2.freeimagehosting.net/uploads/03bd27490b.jpg
Here the original obfuscated !Q (" ) is likely to be a
command preﬁx and | is a separator between commands.
We are unsure about the meaning of the translated “F”
command, but suspect that “e” is a download command
followed by a URL. Breaking the encoding/decoding scheme
is interesting because it enables us to decode other com-
mands we observe for different variants of this botnet. In
our honeynet, we have observed at least two other commands
issued by the same botnet (with different bot binaries).9 The
changes in commands reﬂected relocation of binary hosting
websites and ﬁle names. Apparently, the original hosting
site (media.pixpond.com) was no longer available, so the
botmaster switched to two other websites (imgplace.com and
img2.freeimagehosting.net).
Although we successfully launched a chosen-ciphertext
attack to break the encryption scheme of some botnets with
the assistance of BotProbe, there are still some cases where
we could not break the scheme. However, these instances
were all successfully detected as botnet C&C by BotProbe.
We captured a contemporary bot in our honeynet, which
is labeled as Trojan.Dropper.Sramler.C by several AV tools.
This bot uses C&C obfuscation and it makes several DNS
requests, which all translated to the same IP address, demon-
strating multiple degrees of stealthiness. The command we
observed (shown below)10 is apparently an update/download
command because BotProbe successfully identiﬁed a third-
party access response (using Interleaved-Binary-Response-
Hypothesis algorithm and probing only two rounds), i.e., a
download from http://220.196.X.107/packed 7711.exe.
=xAgVMf81RvN+xBBhG+xXwttpTsaSBfWeekvMkmkVNcbo20jZvmkCo7CUUbRsdRPzz6wiS1O
Y8pcXg3d9ucVufq2bgQ1mvh+9OBJDwIuw1kOamPaw+2jw/CTaWVQRjrX8Xl2Iph
After a few months, we captured a new variant of this bot,
which is labeled as Backdoor.Win32.IRCBot.aby by several
AV tools. We veriﬁed that this is essentially the same botnet
as the aforementioned botnet, as they both contacted the
same IRC server 220.196.X.226, The bot observed in June
contacted port 3938 while the later bot contacted the server
9We know that it is the same botnet because the binaries use the same
C&C channel.
10At ﬁrst glance, this looks like a BASE64 encoded string. However, we
veriﬁed that this is not the case, at least not a pure BASE64 scheme.
on port 2234 with the following command:11
=YXCdm8MDxhmOoBo3aSrxyp83pM5yZRnQVt8O+mVxm9bwLd77Ahc6KWKVn/DWu+ACn4mrpT
j6U5+yXie37WfPaymQmLtbkxPUVB2JaMwddAVokDxqsbjxmPlqpjeQIh
It turns out that this is actually an access to 220.196.X.
107/kk.exe, and BotProbe took only two rounds to ﬂag this
as a botnet C&C communication. To conclude, BotProbe
has a 100% detection rate in recognizing IRC-based botnet
C&Cs, despite the presence of obfuscated communication.
C. User Study on Normal Chat Probing
Now we need to test the false positive rate, i.e., how
frequently could normal chatting sessions be mislabeled as
botnet C&C using BotProbe techniques. We explore this
issue through a user study on about one hundred users.
Study design and ethical guidelines: Since we are not
allowed to directly alter live network ﬂows on campus,
we recruited human users to go online and chat with real
users at diverse channels on multiple networks. During the
chat sessions, our human users periodically sent crafted
messages that simulate the effect of botnet probing. Our
goal was to conﬁrm our hypothesis about human response
to tampered messages and evaluate the degree to which
simulated BotProbe techniques affect normal users, e.g., how
many actual rounds would we need on average to detect
a normal user? While our current study is limited to two
different chat platforms, IRC and meebo.com (a website
providing instant messaging and chat room capabilities), we
believe that our results hold across chat platforms because
they simply capture basic human responses.
Our study protocol was reviewed and approved by the
institutional review board (IRB). To alleviate any privacy
concerns, we anonymized usernames and IP addresses and
recorded only the following necessary information: mes-
sages exchanged and timestamps. Furthermore, although
we introduced additional network ﬂows, our methodology
caused no interference to existing IRC network ﬂows.
Participant selection: We logged into different IRC/meebo
sites/channels and randomly selected active chat users who
were exchanging chat messages in the channel when we
logged in. We started engaging them in conversations just
like normal users. The users we contacted were not aware
11The fact that the same IP address remained as the C&C server for
over 3 months suggests that obfuscated botnets might be more resilient to
detection.
of the study or the active probing techniques/algorithms that
we employed. This was necessary to ensure the fairness of
our testing procedure.
Study procedure: We designed six different question sets
to test on 123 different users. Our question set includes
simple messages like “what’s up,” “nice weather,” “you like
red?” “how may I help you?” “English only! I play nice
fun” and Turing test messages such as “what’s 3+6=?” As
we conversed with a user on a chatting channel/room using
a random question set, we deliberately introduced probing
at certain predeﬁned points. We then measured the user’s
responses to these tampered messages. The conversations
we recorded could be broken down into two classes.
First, although we randomly chose a user who seemed to
be active in the chat room/channel, there is always a chance
that the user does not respond to our overtures. Such cases
occurred 26 times (no active replies to our messages). We
discount these cases from subsequent analysis. Second, if
the user was willing to pursue a conversation, by responding
to our ﬁrst question, we followed by sending two or three
rounds of repeated questions that interleave original and
slightly tampered messages (by introducing a typo in the
ﬁrst few bytes of the message). Some examples of tampered
messages include “waat’s up,” “noce weather,” “aou like
red?” “Bow may I help you?” “Eaglish only! I play nice
fun.” This simulates the behavior of BotProbe performing
P1/P2 probing. We recorded the exchanged messages for
evaluating the Interleaved-Binary-Response-Hypothesis al-
gorithm. In addition to P1/P2 probing, we subjected the user
to P0 probing using the Turing-Test-Hypothesis algorithm
described above.
USER STUDY OF PERFORMING P1 AND P2 PROBING, USING THE
Table II
INTERLEAVED-BINARY-RESPONSE-HYPOTHESIS ALGORITHM. MOST
USERS ARE DETECTED AS NORMAL IN TWO OR THREE ROUNDS.
Detected in 2 rounds
Detected in 3 rounds
Pending after 3 rounds
Total
meebo chats
63 (75%)
8 (9.5%)
13 (15.5%)
84
IRC chats
10 (77%)
1 (7.7%)
2 (15.3%)
13
Total
73 (75.3%)
9 (9.3%)
15 (15.4%)
97
User
study
of
the normal users (75.3%) in just
Interleaved-Binary-Response-
Hypothesis: In total, we tested 97 different users, 84
on meebo and 13 on IRC. A simulated BotProbe can
detect most of
two
rounds and 9.3% in three rounds. The rest (about 15%)
are marked still pending. We provide a summary of our
results with respective to breakdowns for meebo and IRC
in Table II. We set our probing to be three rounds to limit
annoyance/interference to chat users. We further believe
that most of the pending sessions can be easily declared as
normal users by sending additional probes (we selectively
veriﬁed this on a few cases). Finally, we did not encounter
any false positives (misclassifying a normal user as a bot)
in our limited testing.
User study of Turing-Test-Hypothesis: In addition to
P1 and P2 probing, we tested P0, i.e., injecting Turing test
messages (but without user education). We performed tests
on 30 different users in meebo. The basic question/puzzle
we sent is “what’s 3+6=?” Although all users provided the
correct answer upon repeated interrogation, we found it
difﬁcult to get a direct answer the ﬁrst time the question
is posed. These users tend not to answer this in a correct
way, possibly because they thought it might be unnatural
to receive such Turing questions in the chatting channels
(they perceive this to be some sort of a joke). We conclude
that