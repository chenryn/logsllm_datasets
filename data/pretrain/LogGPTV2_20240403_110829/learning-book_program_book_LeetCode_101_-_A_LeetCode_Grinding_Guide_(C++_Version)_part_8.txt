7.6背包问题
52/143 -
我们可以用动态规划来解决背包问题。以0-1背包问题为例。我们可以定义一个二维数组dp
存储最大价值，其中dp[ij]表示前i件物品体积不超过j的情况下能达到的最大价值。在我们遍
历到第i件物品时，在当前背包总容量为j的情况下，如果我们不将物品i放人背包，那么dp[可[]
=dp[i-1]U]，即前i个物品的最大价值等于只取前i-1个物品时的最大价值：如果我们将物品i放
入背包，假设第i件物品体积为w，价值为v，那么我们得到dp[i]u]=dp[i-1]Uj-w]+v。我们只需
在遍历过程中对这两种情况取最大值即可，总时间复杂度和空间复杂度都为O（NW)。
int knapsack(vector weights, vector values, int N, int W) {
vector> dp(N + 1, vector(W + 1, 0));
for (int i = 1; i = v) {
dp[] [j] = max(dp[i1] [j] , dp[i1] [j-v]  + v) ;
}else {
dp[] [j] = dp[i1] [j];
return dp[N] [W] ;
dp]
j = 1
j = 2
j = 3
j= 4
j = 5
i = 0
i = 1
i = 2
i = 3
i = 4
图7.2：0-1背包间题-状态转移矩阵样例
我们可以进一步对0-1背包进行空间优化，将空间复杂度降低为O（W），如图所示，假设我
们目前考虑物品i=2，且其体积为w=2，价值为v=3；对于背包容量j.我们可以得到dp[2]]
=max（dp[1]Li],dp[1]i-2]+3)，这里可以发现我们永远只依赖于上一排i=1的信息，之前算过的
其他物品都不需要再使用。因此我们可以去掉dp矩阵的第一个维度，在考虑物品i时变成dp[i]
上一行物品i-1时dplj-w]的值；若按照从左往右的顺序进行正向遍历，则dpi-w]的值在遍历到
”之前就已经被更新成物品1的值了。
int knapsack(vector weights, vector values, int N, int W) {
vector dp(M + 1, 0);
for (int i = 1; i = v; --j) {
dp [j] = max(dp [j] ,dp[{-v]  +  v) ;
return dp[w];
---
## Page 58
7.6背包问题
53/143 -
{
j = 1
j = 2
j = 3
j = 4
j = 5
i = 0
i = 1
 = 2
i = 3
i = 4
dpij]
j = 1
j = 2
j = 3
 j = 4
j= 5
I = 0
j = 1
1 = 2
i = 3
i = 4
图7.3：完全背包间题-状态转移矩阵样例
在完全背包问题中，一个物品可以拿多次。如图上半部分所示，假设我们遍历到物品1=2，
且其体积为w=2，价值为v=3；对于背包容量j=5，最多只能装下2个该物品。那么我们的状
态转移方程就变成了dp[2][5]=max(dp[1][5],dp[1][3]+3,dp[1][1]+6)。如果采用这种方法，假设
背包容量无穷大而物体的体积无穷小，我们这里的比较次数也会趋近于无穷大，远超O（NW）的
时间复杂度。
[[[]
的情况，面在时dp[2][1]也已经考虑了dp[1][1]的情况。因此，如图下半部分所示，对于拿多个
物品的情况，我们只需考虑 dp[2][3]即可，即dp[2][5]=max（dp[1][5],dp[2][3]+3）。这样，我们
就得到了完全背包问题的状态转移方程：dp[i]U]=max（dp[i-1]U],dp[i]-w]+v)，其与0-1背包问
题的差别仅仅是把状态转移方程中的第二个i-1变成了i。
int knapsack(vector weights, vector values, int N, int W) {
vector> dp(N + 1, vector(W + 1, 0));
for (int i = 1; i = v) {
dp[1] [j] = max(dp[i1] [j] , dp[i][jv]+v) ;
}else {
dp[] [j] = dp[i-1] [j];
上
return dp[N] [w] ;
同样的，我们也可以利用空间压缩将时间复杂度降低为O（W)。这里要注意我们在遍历每一
行的时候必须正向遍历，因为我们需要利用当前物品在第j-w列的信息。
---
## Page 59
7.6背包问题
54/143-
int knapsack(vector weights, vector values, int N, int W) {
vector dp(M + 1, 0);
for (int i = 1; i  &nums) {
int sun = accumulate(nums.begin(), nums.end(), 0);
if (sum % 2) return false;
int target = gum / 2, n = nums.size();
vector> dp(n + 1, vector(target + 1, false));
for (int i = 0; i  &nums) {
int sun = accumulate(nums.begin() , nums.end() , O);
if (sum % 2) return false;
int target = gum / 2, n = nums.size();
vector dp(target + 1, false);
dp[0] - true;
for (int i = 1; i = nums[i-1]; --j) {
dp[j] - dp[j] 11 dp[{nums [i-1]];
return dp[target];
474. Ones and Zeroes (Medium)
题目描述
给定m个数字0和n个数字1，以及一些由0-1构成的字符中，求利用这些数字最多可以构
成多少个给定的字符中，字符中只可以构成一次，
输人输出样例
输入两个整数m和n，表示0和1的数量，以及一个一维字符中数组，表示待构成的字符中；
输出是一个整数，表示最多可以生成的字符中个数。
Input: Array -{"10","0001*，"111001"，"1"，"0"}，m
Output: 4
在这个样例中，我们可以用5个0和3个1构成[“10”，“0001”，“1"，“0”]。
题解
这是一个多维费用的0-1背包问题，有两个背包大小，0的数量和1的数量。我们在这里直
接展示三维空间压缩到二维后的写法。
//主函数
int finiMaxForm(vector& strs, int m, int n) {
vector> dp(n + 1, vector(n + 1, 0));
for (const string & str: strs） {
auto [counto, count1] = count(str);
for (int i = m; i >= counto; --i) {
for （int j=n; j >= count1; --j）{
dp[] [j] = max(dp[i] [j] , 1 + dp[icount0] [jcount1]) ;
---
## Page 61
7.6背包问题
56/143 -
return dp[m][n];
//辅函数
pair count(const string & s){
int count0 = s.length(), count1 = 0;
for (const char & c:s){
if (c == 1²） {
++count1;
-count0;
return make_pair(counto, count1);
322. Coin Change (Medium)
题目描述
给定一些硬币的面额，求最少可以用多少颗硬币组成给定的金额。
输人输出样例
输人一个一维整数数组，表示硬币的面额：以及一个整数，表示给定的金额。输出一个整数，
表示满足条件的最少的硬币数量。若不存在解，则返回-1。
Input: coins - [1, 2, 5], amount = 11
Output: 3
在这个样例中，最少的组合方法是11=5+5+1。
题解
因为每个硬币可以用无限多次，这道题本质上是完全背包。我们直接展示二维空间压缩为一
维的写法。
这里注意，我们把dp数组初始化为amount+2面不是-1的原因是，在动态规划过程中有求
最小值的操作，如果初始化成-1则会导致结果始终为-1。至于为什么取这个值，是因为i最大可
方式，取最小值时一定不会是它。在动态规划完成后，若结果仍然是此值，则说明不存在满足条
件的组合方法，返回-1。
int coinChange(vector& coins, int amount){
if (coins.empty()) return -1;
vector dp(amount + 1, anount + 2);
dp[0] = 0;
for (int i = 1; i = coin) {
dp[i] = min(dp[i], dp[i-coin]   1);
F
---
## Page 62
7.7字符串编辑
57/143-
return dp[amount]
anount + 2? -1: dp[amount];
7.7字符串编辑
72.Edit Distance (Hard)
题目描述
给定两个字符中，已知你可以制除、替换和插入任意字符申的任意字符，求最少编辑几步可
以将两个字符中变成相同。
输人输出样例
输入是两个字符中，输出是一个整数，表示最少的步骤。
Input: word1 - "horse", word2 = "ros”
Output: 3
在这个样例中.一种最优编辑方法是（1）horse->rorse（2）rorse-> rose（3）rose->ros。
题解
类似于题目1143，我们使用一个二维数组dp[目U]，表示将第一个字符中到位置i为止，和第
二个字符中到位置]为止，最多需要几步编辑。当第：位和第j位对应的字符相同时，dp[iU]等
于dp[i-1]U-1]；当二者对应的字符不同时，修改的消耗是dp[i-1]U-1]+1，插人i位置/删除j位置
的消耗是dp[i]-1]+1，插入j位置/删除i位置的消耗是dp[i-1]U] +1。
int minDistance(string uord1, string word2) {
int m = word1.1ength(), n = uord2.1ength() ;
vector> dp(n + 1, vector(n + 1, 0));
for (int i = 0; i  dp(n + 1);
int h = sqrt(n);
for （int i - 2; i > dp(m + 1, vector(n + 1, false));
dp[0] [o] = true;
for (int i = 1; i < n + 1; ++i) {
if (p[i-1] == ) {
dp[o] [] = dp [o] [i2];
for (int i = 1; i < m + 1; ++i) {
for （int j - 1;J <n + 1;++j） {
if (p[j-1] -=,） {
dp[i] [j] = dp[i-1] [j-1];
} else if (p[j-1] != ) {
dp[] [j] = dp[i-1] [j1]&&p[j1] == s[i1] ;
} else if (p[j-2]!= s[i-1]&＆ p[j2]!= ,) {
dp[][j] - dp[] [-2];