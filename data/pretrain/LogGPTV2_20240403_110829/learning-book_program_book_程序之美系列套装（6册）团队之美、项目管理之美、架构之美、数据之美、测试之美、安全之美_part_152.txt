匙。拿起它，您将会开启这扇大门！
推荐序四美丽架构之道
《构建高性能Web站点》作者
Web架构实践者
郭欣
我无法给架构下一个简单的定义，因为任何定义都会束缚你对架构
的无限想象。不可否认，架构师早已出现在人类几千年前的各项生
产活动中，比如建筑、音乐。而在计算机软件及Web领域，架构的
设计直接影响看系统的生产，比如开发过程和效率、代码和组件复
用性等，同时也影响着系统的可用性、可伸缩性、性能、容量可预
测性等。
本书更加关注架构之美。美丽的架构同样无法定义，可它却一定是
自然的、简单的、可复用的、人文的，甚至是外行人也可以细细品
味其思想的。当我看到超市的多个收银台排满长队时，便想到服务
器并发处理性能和容量；当我看到十字路口的车辆等待转弯时，便
想到它通过缓存思想来提高交通吞吐率。
那么如何设计出美丽的架构呢？从代码逻辑到物理网络，从单机到
分布式，无数的技术可供架构师选择，如分层、组件化、服务化、
标准化、缓存、分离、队列、复制、冗余、代理等，不过它们仍然
只是“术”的范畴，而何时何处如何恰到好处地使用它们才是“道”的
范畴，比如顿悟变化的道理，在博弈中寻找平衡，以系统化的角度
来分析问题，寻找相对与绝对的奥秘、开放的心态..…
然而，这个领域实在是太年轻了，我们需要更多的例子和经验，本
书将让你大并眼界！
译者序架构与美
853
---
## Page 855
王海鹏
人们在生活和工作中发现美并创造美，软件开发和架构设计也不例
外。
架构之美体现了关注点的分离与结合。在软件设计中，设计师需要
考虑多方面的关注点。漂亮的架构设计让这些关注点尽可能分离，
然后以最简单的机制结合在一起，从而得到高内聚、低耦合的系
统。例如在Darkstar项目中，架构师们考虑的重点就是如何将多人
在线游戏的游戏逻辑与系统的可伸缩性分离开来，让游戏的开发者
只要遵守少量的规则，就能够像编写单机游戏一样编写大规模多人
在线游戏。又如REST架构风格，体现了对资源命名、请求处理和
资源物理表现形式的关注点分离。资源的名称与请求资源时服务器
的处理方式无关，请求者无需知道服务器端采取的技术，并且请求
者本来就不关心服务器端的处理技术。资源的物理表示形式可以通
过内容协商来决定，使系统可以支持多种物理表示形式，并可以方
便地扩展。
架构之美注重表达的简洁性。“Don'tRepeatYourself”，好的架构致
力于消除各种类型的信息重复。从结构化程序设计中的子程序和函
数，到面向对象程序设计中的继承，无不体现了对表达简洁性的特
殊偏爱。在敏捷方法学中，消除重复则是重构的主要目的之一。爱
因斯坦说：“让它尽可能简单，但不要过于简单。"我们需要考虑所
有必须考虑的关注点，然后用简洁漂亮的架构体现我们的关注。同
时，简洁的架构之美也降低了软件的总体成本，从这个意义上说，
“简洁性”又可以称为“经济性”。
架构之美需要解决实际问题，它既是艺术，也是生活。软件像建筑
一样，它的美不能脱离它的实用价值。BjarneStroustrup说，人类文
明运行于软件之上。每一个软件都有自己的架构，这些架构有的很
美，有的不太美。从艺术的角度来说，美是创造矛盾并解决矛盾。
架构的多关注点和表达简洁性就是一种矛盾，美丽的架构提供了这
一矛盾的解决方法，让我们的内心产生一种愉快的感觉。
架构之美需要经过专业的学习才能更好地欣赏和创造。和所有的艺
术之美一样，不是说不经过专业学习就不能欣赏，但是经过了专业
的学习，就能更好地欣赏这种美的种种精妙之处。如果想要创造出
这种美，那就必然要经过长期的专业学习。
854
---
## Page 856
架构之美经过时间打磨。像Facebook面向数据的Web服务、FQL和
FML架构，是在对应不同实际需求的过程中逐渐发展起来。在应用
程序架构形成的过程中，设计者不断面对新的关注点需求，不断对
已有的架构进行修改，并发展出新的架构组件。这就是所谓的“演
进式架构”。只有变化是永恒不变的。在架构设计初期，设计者会
将一些关注点有意推迟到将来考虑，例如持久和并发。对于这些暂
不考虑的关注点，设计者对它们的实现方式尽可能不做任何假定，
从而保留更多的可能性，让不同关注点之间的耦合尽可能小。
架构之美没有定法。虽然有一些法则可供我们参考，却没有非如此
不可的。《金刚经》云：“一切贤圣，皆以无为法而有差别。”
参加本书翻译工作的人员还有蔡黄辉、徐锋、王海燕、李国安、周
建鸣、范俊、张海洲、谢伟奇、林冀、钱立强、甘莉萍。
在这本书的翻译过程中，我受益良多，因此郑重地向大家推荐它。
作译者简介
作者简介
TillAdam在年轻时学习了哲学、比较文学、美国研究和音乐学，职
业是音乐人。由于没有发财和出名，他转而攻读科学硕士，学习了
数学、计算机科学和商业。多年从事自由软件的经历（特别是对
KDE的贡献）教会了他编程，也为他带来了在Klaralvdalens
DatakonsultAB工作的机会，目前他在该公司负责协调KDE的开发和
其他与自由软件相关的活动。他和他的妻子、女儿住在德国柏林。
JimBlandy在1990年至1993年间为自由软件基金会维护GNUEmacs，
和Richard Stallman一起发布了Emacs的第19个版本。他是Subversion
版本控制系统的最初设计者之一。他也是CVS版本控制系统、GNU
调试器（GDB）、Guile扩展语言库和一个编辑基因序列的Emacs程
序的贡献者。他现在为Mozilla公司工作，工作内容是
SpiderMonkey，即Mozilla的Javascript编程语言的实现。Jim和他的妻
子、两个女儿住在俄勒冈州的波特兰。
MirkoBoehm从1997开始就是KDE的开发者，在1996年至2006年间
是KDEe.V委员会的成员。他毕业于德国汉堡HelmutSchmidt大学的
商业专业。在他的闲暇时间里，他阅读纸版书籍、与家人在一起，
855
---
## Page 857
试图远离计算机。他目前在德国柏林为KlaralvdalensDatakonsultAB
工作，负责跨平台软件和嵌入式软件并发。
ChristopherDennis自2005年JCP项目开始时就是项目的主要开发者。
Chris在牛津大学读博士时开始使用Java。此前，他使用过各种编程
语言，从十六进制小键盘上编写的Z80机器码到PHP和JavaScript。
他对特殊情况、编码技巧和偶尔有点丑陋的临时编码很有兴趣，喜
欢用各种语言编写紧凑的、优雅的代码。
DaveFetterman是Facebook的工程经理，他在那里创建了Facebook平
台项目。在2006年加入Facebook之前，他是一名软件工程师，参加
Microsof开发者部门的项目，包括.NET的通用语言运行环境
（CLR）。他喜欢为其他开发者创建软件，也喜欢对愿意听的人发
表长篇大论。他拥有应用数学的学士学位，并在2003年获得了哈佛
大学的计算机科学硕士学位。
KeirFraser是XenSource的创始人之一，XenSource现在是Citrix
Systems公司的一部分。他也是Xen系统管理程序的首席架构师。
Keir在2002实现了Xen的第一个版本，作为他在剑桥计算机实验室
攻读博士学位时的一项娱乐。在该项目成为大规模的社区合作的过
程中，他继续作为主要的开发者。他因在无锁并发控制方面的工作
于2004年获得了博士学位，并在同年成为一名教师。
PeteGoodlife是一名程序员、专栏作家、演说家和作家，从来不在
同一软件领域做过多的停留。Pete的热门书籍《CodeCraft》（No
StarchPress）是对整个编程追求的实际而有趣的调查一大约600
页，真是了不起！他对制革很有热情，而且不穿鞋。
GeorgiosGousios是一名职业研究者，接受的教育和软件工程有关，
热衷于软件开发。目前，他正在希腊的雅典经济与商业大学完成他
的博士论文。他的研究兴趣包括软件工程、软件质量、虚拟机和操
作系统，他拥有英国曼彻斯特大学的科学硕士学位。Gousios为多个
开源软件项目贡献过代码，并参与了各种学术项目和商业项目的研
究与开发。他是SQO-OSS项目的项目经理、设计权威和主要开发成
员，为评估软件质量探索一些创新的方法。在他的学术生涯中，
Gousios在会议和杂志上发表了10篇技术论文。Gousios是ACM、
IEEE、Usenix Association和Technical Chamber ofGreece的成员。
856
---
## Page 858
DaveGrove是IBM的T.J.Watson研究中心动态优化组的一名研究员。
他的主要研究兴趣包括分析和优化面向对象语言、虚拟机设计和实
现、JIT编译、在线反馈导向的优化和垃圾收集。他在1998年参加了
Jalapenio项目，是这个优化编译器和适应式优化系统首个实现的主
要贡献者。自Jalapenio在2001年作为JikesRVM开放源码以来，他一
直是JikesRVM核心团队和指导委员会的活跃成员。
JohnKlein是软件工程研究所（SEI）的高级技术人员，他的研究方
向是“众系统之系统"的架构方法，并帮助个人、团队和组织机构改
进他们的软件架构能力。在加入SEI之前，John是Avaya公司的首席
架构师。在Avaya，他负责开发多模式的代理、通信分析的架构，
以及为各种客户交互产品创建并改进架构。在此之前，John是
Quintus的一名软件架构师，在那里他设计了第一款获得商业成功的
多渠道集成联系中心产品，并导致了Quintus兼并了另外两家公司，
实现了产品组合的技术集成。在加入Quintus之前，John曾为多家视
频会议和视频网络业的公司服务。他的职业生涯开始于Raytheon，
在那里他为雷达信号处理、多光谱图像处理、并行处理架构和算法
提供硬件和软件解决方案。John拥有Stevens技术学院的学士学位和
Northeastern大学的硕士学位。他是ACM和IEEE计算机学会的成员。
GregLehey的漫长职业生涯在德国和澳大利业度过，他曾为德国空
间研究所工作，也曾为Univac、Tandem、Siemens-Nixdorf和IBM等
计算机制造商工作，也曾作为一些没名气的软件公司的大客户，还
曾做过独立的咨询顾问。他的活动范围很广，包括从内核并发到产
品管理，从系统编程到系统管理，从处理卫星数据到为油泵编程，
从生产CD-ROM到把自由软件移植到DSP指令集上。他是FreeBSD
核心团队的成员，也是澳大利业UNIX用户协会的主席。他是
FreeBSD和NetBSD项目的开发者，世是《PortingUNIXSoftware》和
《The CompleteFreeBSD,Fourth Edition》（O'Reilly）的作者。他还
以编写商业应用软件而闻名。Greg在2007年退休，将多出来的时间
用于品味生活。现在，休闲活动占据了他的大多数时间，但这还不
够，他还听古典木纹唱片、烹饪、酿啤酒（他开发了一个计算机控
制的发酵系统）、做园艺、骑马和摄影。他也对一些历史题材感兴
趣，包括古代的难解的欧洲语言。他的主页是：
http://www.lemis.com/grop/
PanagiotisLouridas在20世纪80年代通过一台SinclairZXSpectrum开
始涉足计算机。从那时起，他就并始用机器语言进行编程，而且非
常喜欢编程。他在雅典大学信息系获得了计算机科学学士学位，在
857
---
## Page 859
曼彻斯特大学获得了计算机硕士和博士学位。这些年来，他一直为
私人机构开发软件，现在，他在希腊研究和教育网络（GRNET）工
作。他也是雅典经济与商业大学（AUEB）软件工程和安全
（SENSE）研究组的成员。他发表的文章范围很广，从人类学到加
密，从仪表展示到软件工程。他特别喜欢寻找计算机世界和其他领
域的联系。
StephenJ.Mellor在为软件开发创建有效的工程方法方面，是国际公
认的先行者。在1985年，他出版了广为阅读的Ward-Mellor三卷本
《Structured Development for Real-Time Systems》(Prentice Hall）;
在1998年，他的书首次定义了面向对象分析。Stephen还在2002年出
版了《Executable UML：AFoundation for Model-Driven
Architecture》（Addison-WesleyProfessional）。他最近的一本书
《MDA Distilled:Principles ofModel-DrivenArchitecture
（Addison-WesleyProfessional）在2004年出版。他在对象管理组织
（OMG）中活动积极，是为UML添加可执行动作的协会的主席，他
最近完成了可执行UMIL的标准。他是敏捷宣言的签名者之一。他是