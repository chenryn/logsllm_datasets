be used to detect infection. A few of them will be discussed
here.
Oftentimes, once a worm has been captured on the In-
ternet, antivirus products are quickly updated to detect it.
Thus, if a particular ﬁle is suspected of being a worm, an
up-to-date antivirus product may be able to detect it.
If a worm modiﬁes important system ﬁles, such as re-
placing utilities with trojan horses or adding services in
/etc/inetd.conf, a ﬁle integrity program such as
Tripwire [9] can be used to detect these changes. Every
worm in Table 1 makes a ﬁlesystem change of some kind.
If monitored system ﬁles are changed, a tool like Tripwire
can easily detect it.
If a worm starts a server on particular port, perhaps to
open a backdoor into the system, combining the use of a
network scanner [7] and system utilities such as netstat
can detect it. For example, these tools could detect the root-
shell servers set up by both the Sadmind and Lion worms.
Because of the number of different actions a worm can
take, there is no single answer to detection in this stage.
Instead, a number of different techniques may be of use that
depend upon the particular worm. At the same time, it is
easy to envision a worm with little noticeable footprint on
the host system. For example, the worm could load itself
into memory, and then remove any trace of its presence on
the ﬁlesystem. In this case, detection in this stage becomes
difﬁcult.
Using the detection techniques from the ﬁrst three stages
of the life-cycle, administrators have a variety of tools that
can protect their networks. However, if a worm were re-
leased that carefully targeted its victims, exploited a new
vulnerability, and left a small footprint on the system, more
would need to be done to detect its presence. That detection
can take place in the fourth stage of the life-cycle.
4 Detecting Propagation
As described, a new, properly designed worm may evade
detection in the ﬁrst three stages. However, it can still be
possible to detect its presence when it attempts to propa-
gate. As much of the focus in the security community is in
protecting the network from attack, a motivation for the im-
portance of tools that can be used after a successful attack
will also be discussed.
All the worms analyzed in this paper have one charac-
teristic in common: they rapidly scan randomly selected IP
addresses to ﬁnd new victims. Thus, with this type of worm,
detection reduces to a type of outbound scan detection.
4.1 Prior Work In Detecting Scans
GrIDS [16] is an intrusion detection system designed to
detect large scale attacks on a network. It does so by build-
ing activity graphs of network trafﬁc and analyzing them
in relation to graphs that model different attacks. GrIDS
has been used to detect the spread of a worm by looking
for a tree-like connection graph resulting from the worm as
it branches out to newly infected hosts. It can also detect
sweeps, which occur when a host connects to many other
hosts in succession.
Other intrusion detection systems can have outbound
scan detection built in by using modules or the rule descrip-
tion language. The Bro IDS’s policy scripting language can
be used to detect scans. Essentially, it can be told to watch
for the number of connections to cross a particular threshold
[12], where a connection consists of a single source address
and either a destination address or port. No timing mecha-
nism is used.
A Snort Portscan preprocessor1 [15] has also been de-
veloped. The preprocessor allows the speciﬁcation of the
network to monitor for portscans, the threshold number of
ports that are accessed, the period of time the threshold must
be exceeded in, and a log ﬁle for the results. A limitation
of this preprocessor is that only the scan’s destination net-
work can be speciﬁed, thus it cannot be conﬁgured to only
watch outbound scans. That is, one cannot specify a range
of addresses to watch for originating scans.
While the tools and techniques exist to detect scan activ-
ity, the main focus has been on detecting inbound scans. At
the same time, the goal has been to detect general port scan
activity, as opposed to focusing solely on the more special-
ized type of scanning used by worms. While existing IDSs
allow outbound scan detection to be built in, the prevalence
of worms in the past few years suggests that this is not be-
ing done. Thus, the next section will narrow the classic X
events in Y period of time technique to detect the outbound
scans that are frequently used by worms.
1Written by Patrick Mullen
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
4.2 Revisiting the X Events in Y Period of Time
Technique
Outbound scan detection has advantages over its coun-
terpart – inbound scan detection. One such advantage is the
ability to see all of the scans leaving the scanning host. As
discussed in Section 3.1, the most widely used technique to
detect a scan is to look for a certain number of events that
occur within a set period of time. This technique is limited
when watching inbound trafﬁc, as a scan may only probe
one host on any given network, and thus consist of only
one event. However, watching outbound trafﬁc may trigger
enough events to detect the worm, even if it probes several
different networks.
Many types of scans exist [6], and any detection mech-
anism would have to take this into account. Instead of fo-
cusing on particular scan types, the TCP SYN scan with a
horizontal scan footprint [17] will be examined.
A horizontal scan occurs when a worm is only probing
a particular port on a set of different hosts. The Lion worm
uses a horizontal scan to probe port 53 on randomly selected
IP addresses. In this case, the source IP address (src ip)
and the destination port (dst prt) are the same across ev-
ery probe, while the destination IP address (dst ip) and
the (src prt) will change.
The worms in Table 1 represent a class of worms that use
a horizontal scan to ﬁnd potential victims. Thus, a technique
that can detect a horizontal scan would also detect all of the
worms in this table.
It will be assumed that detection is not performed on the
infected host, but rather at a network sensor that can see
all of the trafﬁc generated by the infected host. At the same
time, it should be noted that where a sensor should be placed
on the network has been widely debated in the security com-
munity and is not always as straight-forward as it might ﬁrst
appear.
To detect this type of scan, the following C-like pseu-
docode can be used:
typedef (src_ip, dst_prt) conn;
/* Called for every outbound packet */
process_conn(conn) {
if( conn.exists ) { /* We have seen */
conn.counter++;
if( conn.counter > THRESHOLD) {
generate_alert();
}
}
else if(src_ip in specified range) {
/* Create a new pair */
add(conn);
conn.counter = 1;
/* Period of time to count events */
conn.timer
= QUANTUM;
}
}
/* Called every second */
timer() {
foreach( conn ) {
conn.timer--;
if( conn.timer == 0 )
remove(conn);
}
}
A key to this approach is determining the appropri-
ate QUANTUM and THRESHOLD values. Or, deter-
mining what window should be used such that if we ob-
serve THRESHOLD repeated (src ip, dst prt) pairs,
an alert is generated. These numbers will vary based on
the characteristics of a particular network’s trafﬁc, and will
need to be experimented with to ﬁnd effective values.
While this technique is similar to what has been used in
the past, the fundamental difference is that it is designed to
watch outbound trafﬁc for horizontal scans. It does this by
making sure the source IP address originates from within
the local network (the speciﬁed range). This technique is
a viable one for worms that are designed to spread rapidly,
such as the worms in Table 1 and Warhol worms [18].
This type of monitoring – watching outbound trafﬁc to
detect a worm after it has already infected the network – has
additional advantages over standard inbound trafﬁc moni-
toring, several of which are enumerated in [8]. A few of
these advantages will be discussed next.
4.3 Increased Conﬁdence in Alerts
Portscans in general are highly prevalent on the Inter-
net, and though often used as a ﬁrst step in an attack, by
themselves they pose little threat. They are so common that
administrators often do not have time to follow up on them,
and thus consider them part of the background noise of the
Internet.
While detection of an inbound portscan may be accept-
able, a local host scanning out to the Internet is likely to
violate a network’s usage policy. In addition, detected out-
bound portscans should be much less frequent.
Pulling this together, an alert generated by an outbound
portscan should carry more importance than an inbound
scan. Thus, an administrator will have more incentive to in-
vestigate such alerts, and may discover a misbehaving user
or a worm.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
4.4 Containing the Damage
5 Limitations
A potentially devastating characteristic of a worm is its
ability to spread quickly across the Internet. Once a worm
has been designed to automatically compromise a machine
and then spread, authors can incorporate any other behavior
they desire. Thus, the ability to contain a worm is important.
One tool that has been written to slow down worms and
portscans is LaBrea [10]. Essentially, LaBrea allows a TCP
connection to be opened to a nonexistent host, and then sim-
ply sits on the connection. Thus, when a worm attempts to
connect to nonexistent IP addresses on one’s network, it is
tricked into believing that a machine is indeed there.
By watching outbound trafﬁc, an administrator should be
alerted when it appears that a worm is attempting to propa-
gate from an infected local host. This gives an administrator
the opportunity to go to the host, investigate, and take cor-
rective action. Furthermore, as many worms target the local
network in addition to remote machines, by detecting the
worm’s presence, the machines on the local network may
be protected.
By containing the damage a worm does, and limiting its
ability to spread, there is also the beneﬁt of protecting one’s
public relations.
4.5 Public Relations
The widespread discovery that one has been infected
with a worm can be a public relations nightmare. The reluc-
tance to admit to suffering a security breach is well known.
A recent study in [13] shows that in 2001, only 36% of those
who were seriously attacked reported it to law enforcement.
This number is actually up from a low of 17% in 1998.
While there are a number of reasons for this low number,
one reason is the potential damage to one’s reputation. This
is supported by the web pages that were set up listing net-
works that were infected during the height of the Code Red
worm’s spread. A number of these networks pulled them-
selves off-line to contain the worm and protect their image.
Once a worm’s scanning behavior or exploit signature
has been determined, administrators can easily tell when
their network is being scanned by a worm and where the
worm is coming from. Furthermore, once the scanning host
is identiﬁed, it is easy to determine the entity (company,
University, etc.) that is infected by a particular worm.
If the public ﬁnds out that an Internet security company,
ﬁnancial institution, or retail company has been infected by
a worm, public conﬁdence may be shaken. It can lead to
questions such as: “If this security company cannot defend
itself against a worm, how can it defend me?” or “If this
bank has been infected by a worm, are my personal ﬁles
and accounts safe?” Thus, it makes sense to do everything
possible to contain a worm once it has infected the network.
The technique described in this paper is a step in the right
direction, but it does have limitations.
Just as one can envision a worm that evades detection in
the ﬁrst three stages, it is easy to envision one that evades
detection in the fourth stage as well. For example, if the
worm is content to spread slowly, an outbound scan will
not be detected. Despite this, attempted detection in this
stage succeeds in raising the bar in some way. Furthermore,
a slow moving worm may work against its ultimate goals,
as administrators will have more time to detect and remove
it while notifying the general public. To date, the worms
discovered in the wild have attempted to spread as quickly
as possible, but there is no guarantee that future evolutions
will do the same.
While the described technique attempts to detect out-
bound scans, worms may evolve to employ other techniques
to spread in the future. Such examples may include em-
bedding themselves into standard client/server HTTP trafﬁc
or taking advantage of the prevalent peer-to-peer networks
[18].
6 Current Implementation and Future Work
Thus far, experimentation is still in the early stages. A
prototype is in the development stage as a Snort preproces-
sor [15], based on the pseudo code in Section 4.2. Develop-
ing it as a preprocessor allows it run anywhere that Snort can
run. It is currently designed to watch for TCP SYN scans,
but will be augmented to handle other scans as described in
[6].
While preliminary tests on an isolated network can de-
tect rapid horizontal scans, the next step is to deploy it on
a production network. This will allow it to be ﬁne-tuned to
determine if THRESHOLD and QUANTUM values can be
found that are capable of detecting the propagation stage of
a worm, while not generating excessive false positives.
Techniques to detect other types of outbound scans are
also going to be investigated. One such scan is the verti-
cal scan. This occurs when a scanning host probes several
ports on the same target. For example, the default setting in
Nmap can be used to determine the services a host is run-
ning between ports 1 and 1024.
Another area of investigation will be in coordinating dif-
ferent detection mechanisms in the four stages of the life-
cycle. For example, it may be possible to correlate inbound
trafﬁc that may be indicative of a worm with outbound traf-