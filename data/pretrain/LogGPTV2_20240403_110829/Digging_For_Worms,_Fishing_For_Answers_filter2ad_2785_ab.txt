### Detecting Worm Infections: Techniques and Tools

#### Introduction
Various methods can be used to detect worm infections. This document will discuss a few of these methods, focusing on their effectiveness and limitations.

#### Antivirus Products
Once a worm is identified on the internet, antivirus products are typically updated to detect it. Therefore, an up-to-date antivirus product can often identify suspected worm-infected files. 

#### File Integrity Monitoring
If a worm modifies important system files, such as replacing utilities with trojan horses or adding services in `/etc/inetd.conf`, a file integrity monitoring tool like Tripwire [9] can detect these changes. Every worm listed in Table 1 makes some kind of filesystem change, and tools like Tripwire can easily identify these modifications.

#### Network Scanning
If a worm starts a server on a particular port, perhaps to open a backdoor into the system, a combination of a network scanner [7] and system utilities like `netstat` can help detect it. For example, these tools can identify the root-shell servers set up by both the Sadmind and Lion worms.

#### Challenges in Detection
Given the variety of actions a worm can take, there is no single solution for detection. A worm could load itself into memory and remove any trace of its presence on the filesystem, making detection difficult. However, using a combination of techniques from the first three stages of the worm's lifecycle can provide a robust defense.

### Detecting Propagation

#### Overview
A well-designed worm may evade detection in the first three stages, but it can still be detected during propagation. The security community focuses on protecting networks from attacks, but tools that can be used after a successful attack are also crucial.

#### Common Characteristics
All the worms analyzed in this paper share a common characteristic: they rapidly scan randomly selected IP addresses to find new victims. This type of behavior can be detected through outbound scan detection.

#### Prior Work in Scan Detection
- **GrIDS [16]**: An intrusion detection system (IDS) that builds activity graphs of network traffic and analyzes them to detect large-scale attacks. GrIDS can detect the spread of a worm by identifying tree-like connection graphs and sweeps.
- **Bro IDS**: Uses a policy scripting language to detect scans by watching for the number of connections crossing a specific threshold.
- **Snort Portscan Preprocessor [15]**: Allows specification of the network to monitor for portscans, the threshold number of ports accessed, and the time period for the threshold. However, it cannot be configured to watch only outbound scans.

### Revisiting the X Events in Y Period of Time Technique

#### Outbound Scan Detection
Outbound scan detection has advantages over inbound scan detection, including the ability to see all scans leaving the host. The most widely used technique is to look for a certain number of events within a set period. This approach is more effective for outbound traffic, even if the worm probes several different networks.

#### Horizontal Scans
A horizontal scan occurs when a worm probes a particular port on multiple hosts. The Lion worm, for example, uses a horizontal scan to probe port 53 on randomly selected IP addresses. The following pseudocode can be used to detect this type of scan:

```c
typedef (src_ip, dst_prt) conn;

/* Called for every outbound packet */
process_conn(conn) {
    if (conn.exists) { /* We have seen */
        conn.counter++;
        if (conn.counter > THRESHOLD) {
            generate_alert();
        }
    } else if (src_ip in specified range) {
        /* Create a new pair */
        add(conn);
        conn.counter = 1;
        /* Period of time to count events */
        conn.timer = QUANTUM;
    }
}

/* Called every second */
timer() {
    foreach (conn) {
        conn.timer--;
        if (conn.timer == 0)
            remove(conn);
    }
}
```

#### Determining Parameters
The appropriate values for `QUANTUM` and `THRESHOLD` depend on the characteristics of the network's traffic. These values need to be experimented with to find effective settings.

### Advantages of Outbound Scan Detection

#### Increased Confidence in Alerts
While inbound portscans are common and often considered background noise, outbound portscans are less frequent and likely to violate network usage policies. Therefore, alerts generated by outbound portscans should be taken more seriously.

#### Containing the Damage
Worms can spread quickly across the internet, making containment crucial. Tools like LaBrea [10] can slow down worms and portscans by opening TCP connections to nonexistent hosts. By detecting and containing a worm, administrators can protect both the local and remote networks.

#### Public Relations
The discovery of a worm infection can damage an organization's reputation. Once a worm's scanning behavior is determined, administrators can identify the infected entity. It is essential to contain the worm to maintain public confidence, especially for organizations like internet security companies, financial institutions, and retail companies.

### Limitations

#### Slow-Spreading Worms
A worm that spreads slowly may evade detection. However, slow-moving worms may work against their goals, as administrators will have more time to detect and remove them.

#### Future Evolutions
Worms may evolve to use other techniques, such as embedding themselves in standard client/server HTTP traffic or leveraging peer-to-peer networks [18].

### Current Implementation and Future Work

#### Prototype Development
A prototype is being developed as a Snort preprocessor [15] based on the pseudocode in Section 4.2. It is currently designed to detect TCP SYN scans and will be augmented to handle other scan types.

#### Testing and Deployment
Preliminary tests on an isolated network have shown the prototype can detect rapid horizontal scans. The next step is to deploy it on a production network to fine-tune the `THRESHOLD` and `QUANTUM` values and minimize false positives.

#### Further Research
Future work will focus on detecting other types of outbound scans, such as vertical scans, and coordinating different detection mechanisms across the four stages of the worm's lifecycle.

By integrating these techniques, administrators can better protect their networks and respond effectively to worm infections.