Alternative Relay Networks.
As outlined in Section 5.1, miners (and users) can rely on
additional relay networks to receive up-to-date information
from the network. These networks allow miners to directly
exchange information, which would eﬀectively prevent an
adversary from denying/delaying object delivery.
Matt Corallo’s relay network is one of the most promi-
nent instantiations of an alternative relay network, currently
operating 5 relay nodes—each serving between 20 and 40
clients. Corallo’s network performs partial object valida-
tion and does not follow the request management system of
Bitcoin to ensure a faster spread of information in those net-
works. This allows any entity to ﬂood the network with ill-
formed objects—which might explain the reason why Corallo’s
network is still not widely used [4].
Notice, however, that alternative relay networks can be
built with diﬀerent trust models, and can incorporate arbi-
trary policies to counter DoS; for instance, one can construct
a small and trusted relay network only comprising one rep-
resentative node from each centralized mining pool.
Dynamic Timeouts.
As described in Measure 3, Bitcoin relies on static time-
outs in order to tolerate network delays. This implicitly
assumes that all nodes and resources in the network are
homogeneous—which is clearly not the case. As we show in
Figure 3, slow nodes require considerable time to download
blocks, while fast nodes can secure the download of blocks
in few seconds.
We believe that dynamic timeouts would suit better the
heterogeneity of resources in the Bitcoin network. For this
purpose, we suggest the inclusion of the size of the mes-
sage at advertisement time, which would allow each node
to dynamically estimate the timeout value according to its
resources, and the object size. For instance, when sending
block advertisements, we suggest that the miner includes
the block size into the block header17—which would allow
receiving nodes to know the total block size and to appro-
priately estimate a dynamic timeout for any given block.
By doing so, we argue that the advantage of an adversary
in abusing timeouts to delay block delivery can be consider-
ably reduced.
We observe that the current timeouts employed by Bitcoin
only capture the time starting from the getdata advertise-
ment until the full data reception. Here, a timeout between
the data request and the beginning of the data transfer could
additionally be considered. We argue that such an approach
would increase the costs of the adversary in delaying the de-
livery of information.
Updating Block Advertisements.
Based on our observations, we recommend updating the
current block request system as follows:
No inv messages: We suggest to drop the advertisement
of inv messages for blocks, and solely advertise the
block headers before transmitting the blocks. By doing
17Block headers contain an unused ﬁeld which was intended
for the number of transactions conﬁrmed in the block.
so, every receiver can immediately verify the correct-
ness of the PoW, and learn about any new discovered
blocks in the network. As mentioned in Section 4, this
will ensure that an honest node will always learn about
new blocks in the network even if the adversary ﬁlls
all of its remaining connections to deny the delivery of
such information. Notice that each block header is 80
bytes, while a block’s inv message occupies 36 bytes.
Therefore, we do not expect a considerable increase in
the communication overhead due to this modiﬁcation.
Keep track of block advertisers: Similar to transaction
advertisements, we suggest that Bitcoin nodes keep
track of the block headers’ advertisers. This recom-
mendation goes hand in hand with the advertisement
based on block headers since it allows the node to re-
quest the blocks from the peers announcing the longest
chain. Additionally, this allows the node to request
the block from (a randomly chosen) advertising peer
in case the chosen relay delays the delivery of the block.
Handling Transaction Advertisements.
As mentioned in Measure 4, a transaction is currently re-
quested from the peers that advertised it ﬁrst.
If a given
peer does not respond within an appropriate timeout, the
transaction will be requested from the next peer stored in
the FIFO queue. As mentioned in Section 3.2, this gives con-
siderable advantage for the adversary to prolong the timeout
before the receiver requests the transaction from any other
peer. To remedy this, we suggest the following hardening
measures:
Filtering by IP address: One way to deter against such
an adversary would be to accept only one inv of the
same transaction per IP address. Notice that this can-
not entirely prevent the adversary from advertising the
same transaction using diﬀerent IP addresses.
Randomly choosing sender: Another complementary ap-
proach would be to randomly choose an incrementing
number of peers to contact from the list of advertising
peers if the ﬁrst peer did not answer to the getdata
request. Here, a transaction is ﬁrst queried from the
ﬁrst advertising peer.
If this peer however does not
transmit the transaction within the speciﬁed timeout,
the transaction is requested from two randomly cho-
sen peers simultaneously, then from three peers, until
the transaction is ﬁnally received. This will limit the
advantage of an adversary which tries to advertise ﬁrst
the same transaction several times.
Given these suggestions, the probability to receive a trans-
action after the n’s timeout, when the ﬁrst advertising peer
is controlled by A, given ia inv messages sent by A and a
total of it inv messages is computed as follows:
Pt(n) =
n
i
Xi=0
[
Yj=1
2
j+1
((cid:0)ia− j(j+1)
(cid:0)it− j(j+1)
2
j+1
(cid:1)
(cid:1)
Equation 2 allows one to compute the probability Pt(n)
that a fast payment in Bitcoin is secure after a waiting time
of nt, where t is the timeout set by the node when handling
transactions. Figure 13 depicts Pt(n) with respect to the
2
i+2
) · (1 − (cid:0)ia− (i+1)(i+2)
(cid:0)it− (i+1)(i+2)
2
i+2
(cid:1)
(cid:1)
)]
(2)
703)
n
(
t
P
1.0
0.8
0.6
0.4
0.2
0.0
ia
it
ia
it
ia
it
= 0.50
= 0.75
= 0.95
30
60
90 120 150 180 210 240 270 300
Waiting time
Figure 13: Waiting time vs ia
it
and it = 125.
. Here, t = 30 seconds
waiting time. Here, we assume that it = 125,18 t = 30
seconds and that the adversary controls a fraction ia
of
it
the advertised inv messages. Our results show, that after
5 minutes waiting time, the node would be almost certain
to receive a transaction, even if the adversary controls 95%
of the advertised inv messages (in return about 6 out of
125 inv messages originate from honest peers). Notice that
the receiving peer can be alerted if a sudden increase in inv
advertisements occurs.
We conclude, that fast payments should only be accepted
after a waiting time nt to ensure with probability Pt(n) that
the transaction cannot be double-spent—even if the double-
spend ﬁrst-relay protection is implemented in the network.
For a transaction request timeout of t = 30 seconds, this
waiting time amounts to almost 5 minutes— which is half
the duration of the block generation time.
Operating Several Bitcoin Nodes.
Another eﬀective alternative to harden the realization of
our attack consists of the installation of several Bitcoin nodes
(operated by the same entity) in the oﬃcial Bitcoin network.
By doing so, an adversary would have to prevent the delivery
of objects to all these nodes in order to deny the entity from
receiving an object of interest. As shown in Section 3.2, the
more connections a Bitcoin entity exhibits, the less likely an
adversary can delay the propagation of blocks and transac-
tions. As shown in [20], this countermeasure can also eﬀec-
tively harden double-spending attacks on zero-conﬁrmation
payments in Bitcoin.
Penalizing Non-responding Nodes.
We also suggest extending the penalty system employed
by Bitcoin (cf. Measure 1) to penalize non-responding peers.
Namely, nodes which constantly delay information delivery
after a getdata message should be penalized, and when ap-
propriate disconnected from. Here, a careful design of the
appropriate penalty is needed in order not to penalize slow
nodes in the network.
7. RELATED WORK
The security and privacy of Bitcoin has received consid-
erable attention from the research community. Bonneau
et al. [11] provide a comprehensive exposition of the sec-
ond generation crypto-currencies, including Bitcoin and the
18The default maximum of neighbors per node is 125.
many alternatives that have been implemented as alternate
protocols.
In [13], Decker and Wattenhofer investigate transaction
and block propagation time in Bitcoin. Gervais et al. an-
alyze in [17] the limits of decentralization in Bitcoin, and
show that the vital operations and decisions that Bitcoin is
undertaking are not decentralized.
Finney [16] describe a double-spending attack in Bitcoin
where the attacker includes in her generated blocks transac-
tions that transfer some coins between her own addresses;
these blocks are only released in the network after the at-
tacker double-spends the same coins using fast payments and
acquires a given service. Barber et al. [10] analyze possible
ways to enhance the resilience of Bitcoin against a number
of security threats. Eyal and Sirer [15] show that Bitcoin
is not safe against attacks by selﬁsh miners that command
more than 33% of the total computing power of the network.
Similarly, Courtois and Bahack [12] study subversive min-
ing strategies where miners withhold their recently mined
blocks in order to increase their advantage in the network.
Karame et al. [20, 21] investigate double-spending attacks
in Bitcoin and show that double-spending fast payments in
Bitcoin can be performed in spite of the measures recom-
mended by Bitcoin developers. The authors also proposed
a countermeasure which is currently integrated in Bitcoin.
All these studies, however, assume that the information
disseminated in the Bitcoin network is directly received by
nodes. Recently, the Bitcoin developers discussed the possi-
bility that a transaction transmission can be delayed [2], and
hinted at the possibility to delay the delivery of blocks [3].
Miller et al. [22] exploited this observation and made use
of the 2-minute transaction timeout in order to try to dis-
cover Bitcoin’s topology.
In this paper, we extend these
studies and show that an adversary can eﬀectively prevent
the delivery of transaction and block information from the
network peers for a considerable amount of time. Our work
share similarities with Heilman’s et al. eclipse attacks on
Bitcoin [19]. Here, the authors showed that by monopoliz-
ing the connections of nodes in the system, an adversary can
perform selﬁsh mining, and abuse Bitcoin’s consensus pro-
tocol. Unlike [19], our work however shows that a resource-
constrained attacker can achieve considerable damage in the
network using only a handful of connections. By doing so,
our results suggest that the attacks outlined in [12,15,19,20]
can be even more aggravated (cf. Section 5).
8. CONCLUDING REMARKS
In this paper, we showed that the current scalability mea-
sures adopted by Bitcoin come at odds with the security of
the system. More speciﬁcally, we showed that an adversary
can exploit these measures in order to eﬀectively delay the
propagation of transactions and blocks to speciﬁc nodes—
without causing a network partitioning in the system.
We analyzed the implication of our ﬁndings and showed
that these threats enable an adversary to easily mount Denial-
of-Service attacks on the entire network by preventing the
delivery of blocks in the system. Moreover, mining pools
can exploit this vulnerability to claim a higher mining ad-
vantage in the network. When combined with the results of
Eyer and Sirer [15], our ﬁndings therefore suggest that selﬁsh
mining pools which command less than 33% of the comput-
ing power can considerably increase their mining advantage.
Finally, our ﬁndings show that the countermeasure adopted
704in Bitcoin XT to prevent the double-spending of fast pay-
ments can be easily circumvented by a resource-constrained
adversary.
Based on our ﬁndings, we explored a number of counter-
measures in order to enhance the security of Bitcoin without
deteriorating its scalability. Notice that our ﬁndings are not
particular to Bitcoin and also apply to P2P networks and
crypto-currencies which use a similar request management
system such as Litecoin, and Dogecoin. We therefore hope
that our ﬁndings solicit more research towards the re-design
of the request management system of Bitcoin.
Acknowledgements
This work was partially supported by the Zurich Information
Security Center. It represents the views of the authors. The
authors would like to thank the anonymous reviewers, as well
as Grgur Petric Maretic, Ognjen Maric and Erwin Fang for
their valuable feedback and comments.
9. REFERENCES
[1] Bitcoin Wiki, Available from https://en.bitcoin.
it/wiki/.
[2] Bitcoin dev commit 4547: prevent peer ﬂooding
request queue for an inv, 2015. Available from:
https://github.com/bitcoin/bitcoin/pull/4547.
[3] Bitcoin dev commit 4831: net: Better askfor request
management, 2015. Available from: https://github.
com/bitcoin/bitcoin/pull/4831.
[4] Bitcoin Mailing List - Peter Todd about how many
pools use an additional relay network, 2015. Available
from: http://sourceforge.net/p/bitcoin/mailman/
message/34152876/.
[5] Bitcoin market cap, 2015. Available from: https://
blockchain.info/charts/market-cap.
[6] Bitcoin Relay Network, 2015. Available from: http://
bitcoinrelaynetwork.org/.
[7] Bitcoin XT, 2015. Available from: https://github.
com/bitcoinxt/bitcoinxt.
[8] Double spending in Bitcoin, 2015. Available from:
https://medium.com/@octskyward/double-
spending-in-bitcoin-be0f1d1e8008.
[9] Stress Test Prepares VisaNet for the Most Wonderful
Time of the Year, 2015. Available from: http://goo.
gl/hba0oh.
[10] S. Barber, X. Boyen, E. Shi, and E. Uzun. Bitter to
Better - How to Make Bitcoin a Better Currency. In
Proceedings of Financial Cryptography and Data
Security, 2012.
[11] Joseph Bonneau, Andrew Miller, Jeremy Clark,
Arvind Narayanan, Joshua A. Kroll, and Edward W.
Felten. Research Perspectives and Challenges for
Bitcoin and Cryptocurrencies. In 2015 IEEE
Symposium on Security and Privacy, May 2015.
[12] Nicolas T. Courtois and Lear Bahack. On subversive
miner strategies and block withholding attack in
bitcoin digital currency. CoRR, abs/1402.1718, 2014.
[13] C. Decker and R. Wattenhofer. Information
Propagation in the Bitcoin Network. In 13-th IEEE
International Conference on Peer-to-Peer Computing,
2013.
[14] Bitcoin exchanges, 2013. Available from: https://en.
bitcoin.it/wiki/Exchanges.
[15] Ittay Eyal and Emin G¨un Sirer. Majority is not
enough: Bitcoin mining is vulnerable. In Financial
Cryptography and Data Security, pages 436–454.
Springer, 2014.
[16] The Finney Attack, 2013. Available from: https://
en.bitcoin.it/wiki/Weaknesses#The_.22Finney.
22_attack.
[17] Arthur Gervais, Ghassan Karame, Srdjan Capkun,
and Vedran Capkun. Is bitcoin a decentralized
currency? In IEEE Security and Privacy, 2014.
[18] Arthur Gervais, Ghassan O. Karame, Damian Gruber,
and Srdjan Capkun. On the privacy provisions of
bloom ﬁlters in lightweight bitcoin clients. In
Proceedings of the 30th Annual Computer Security
Applications Conference, ACSAC 2014, New Orleans,
LA, USA, December 8-12, 2014, 2014.
[19] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg.
Eclipse attacks on bitcoin’s peer-to-peer network.
2015.
[20] Ghassan O. Karame, Elli Androulaki, and Srdjan
Capkun. Double-spending fast payments in bitcoin. In
Proceedings of the 2012 ACM conference on Computer
and communications security, CCS ’12, New York,
NY, USA, 2012. ACM.
[21] Ghassan O. Karame, Elli Androulaki, Marc Roeschlin,
Arthur Gervais, and Srdjan ˇCapkun. Misbehavior in
bitcoin: A study of double-spending and
accountability. ACM Trans. Inf. Syst. Secur.,
18(1):2:1–2:32, May 2015.
[22] Andrew Miller, James Litton, Andrew Pachulski, Neal
Gupta, Dave Levin, Neil Spring, and Bobby
Bhattacharjee. Discovering bitcoin’s public topology
and inﬂuential nodes, 2015.
APPENDIX
A. REVENUE FOR SELFISH MINING
In what follows, we detail Eyal and Sirer’s revenue scheme.
1. Current state: Any state, except 2 branches of length 1.
Event: The pool ﬁnds a block, adds it to its secret chain.
Reward: Block reward is determined later.
2. Current state: Two branches of length 1.
Event: Pool ﬁnds a block.
Reward: Pool publishes two blocks, revenue of two blocks.
3. Current state: Two branches of length 1.
Event: Other ﬁnd block on previous pool block.
Reward: Pool and other obtain revenue of one block each.
4. Current state: Two branches of length 1.
Event: Other ﬁnd block on previous other block.
Reward: Other obtain revenue of two blocks.
5. Current state: No secret block.
Event: Other ﬁnd block.
Reward: Other obtain revenue of one block.
6. Current state: One secret block.
Event: Other ﬁnd block. Pool publishes secret block.
Reward: Block reward is determined later, depends on γ.
7. Current state: Leading two secret blocks.
Event: Other ﬁnd block, only 1 secret left.
Reward: Pool publishes secret blocks, two blocks revenue.
8. Current state: Leading more than two secret blocks.
Event: Other ﬁnd block, only 1 secret left.
Reward: Pool publishes one block, revenue of one block.
705