### Alternative Relay Networks
As discussed in Section 5.1, miners and users can rely on additional relay networks to receive up-to-date information from the Bitcoin network. These networks facilitate direct information exchange, which effectively prevents adversaries from delaying or denying object delivery.

One of the most prominent alternative relay networks is Matt Corallo’s, which currently operates five relay nodes, each serving between 20 and 40 clients. Corallo’s network performs partial object validation and does not follow Bitcoin's request management system, ensuring faster information dissemination. However, this approach allows any entity to flood the network with malformed objects, which may explain why Corallo’s network is not widely adopted [4].

It is important to note that alternative relay networks can be designed with different trust models and can incorporate various policies to counter DoS attacks. For example, a small, trusted relay network could be constructed, consisting of one representative node from each centralized mining pool.

### Dynamic Timeouts
As described in Measure 3, Bitcoin uses static timeouts to tolerate network delays. This assumes that all nodes and resources are homogeneous, which is not the case. As shown in Figure 3, slow nodes require significant time to download blocks, while fast nodes can complete the download in seconds.

We propose that dynamic timeouts would better accommodate the heterogeneity of resources in the Bitcoin network. To achieve this, we suggest including the message size at advertisement time, allowing each node to dynamically estimate the timeout value based on its resources and the object size. For instance, when sending block advertisements, miners should include the block size in the block header, enabling receiving nodes to know the total block size and estimate an appropriate dynamic timeout for any given block. This approach would significantly reduce the advantage an adversary has in abusing timeouts to delay block delivery.

Currently, Bitcoin's timeouts only account for the time from the `getdata` advertisement until full data reception. We recommend considering an additional timeout between the data request and the start of data transfer, which would increase the cost for an adversary trying to delay information delivery.

### Updating Block Advertisements
Based on our observations, we recommend the following updates to the current block request system:

- **No `inv` messages for blocks:** We suggest dropping `inv` messages for blocks and instead advertise only the block headers before transmitting the blocks. This allows every receiver to immediately verify the correctness of the Proof-of-Work (PoW) and learn about new discovered blocks in the network. As mentioned in Section 4, this ensures that an honest node will always learn about new blocks, even if the adversary fills all remaining connections to deny such information. Each block header is 80 bytes, while a block’s `inv` message occupies 36 bytes, so this modification should not significantly increase communication overhead.

- **Keep track of block advertisers:** Similar to transaction advertisements, we recommend that Bitcoin nodes keep track of block header advertisers. This recommendation complements the block header-based advertisement, as it allows nodes to request blocks from peers announcing the longest chain. Additionally, it enables nodes to request the block from a randomly chosen advertising peer if the selected relay delays the block delivery.

### Handling Transaction Advertisements
As mentioned in Measure 4, transactions are currently requested from the first peer that advertised them. If the peer does not respond within an appropriate timeout, the transaction is requested from the next peer in the FIFO queue. This gives adversaries a significant advantage in prolonging the timeout before the receiver requests the transaction from another peer. To mitigate this, we suggest the following hardening measures:

- **Filtering by IP address:** One way to deter such adversaries is to accept only one `inv` message per IP address for the same transaction. However, this cannot entirely prevent an adversary from using different IP addresses to advertise the same transaction.

- **Randomly choosing senders:** Another complementary approach is to randomly select an increasing number of peers to contact from the list of advertising peers if the first peer does not respond. For example, the transaction is first queried from the first advertising peer. If this peer does not transmit the transaction within the specified timeout, the transaction is requested simultaneously from two randomly chosen peers, then from three peers, and so on, until the transaction is received. This limits the advantage of an adversary who tries to repeatedly advertise the same transaction.

Given these suggestions, the probability of receiving a transaction after the nth timeout, when the first advertising peer is controlled by an adversary, can be computed as follows:

\[ P_t(n) = \sum_{i=0}^{n} \left[ \prod_{j=1}^{i} \frac{1}{2^{j+1}} \left( \binom{i_a - \frac{j(j+1)}{2}}{i_t - \frac{j(j+1)}{2}} \right) \right] \]

Equation 2 allows the computation of the probability \( P_t(n) \) that a fast payment in Bitcoin is secure after a waiting time of \( n \times t \), where \( t \) is the timeout set by the node. Figure 13 depicts \( P_t(n) \) with respect to the waiting time. Our results show that after 5 minutes, the node would be almost certain to receive a transaction, even if the adversary controls 95% of the advertised `inv` messages. The receiving peer can be alerted if there is a sudden increase in `inv` advertisements.

### Operating Several Bitcoin Nodes
Another effective method to harden the system against our attack is to install multiple Bitcoin nodes (operated by the same entity) in the official Bitcoin network. An adversary would need to prevent the delivery of objects to all these nodes to deny the entity from receiving an object of interest. As shown in Section 3.2, the more connections a Bitcoin entity has, the less likely an adversary can delay the propagation of blocks and transactions. This countermeasure can also effectively harden double-spending attacks on zero-confirmation payments in Bitcoin [20].

### Penalizing Non-Responding Nodes
We suggest extending Bitcoin's penalty system to penalize non-responding peers. Nodes that consistently delay information delivery after a `getdata` message should be penalized and, when appropriate, disconnected. A careful design of the penalty system is needed to avoid penalizing slow nodes in the network.

### Related Work
The security and privacy of Bitcoin have received considerable attention from the research community. Bonneau et al. [11] provide a comprehensive overview of second-generation cryptocurrencies, including Bitcoin and its alternatives. Decker and Wattenhofer [13] investigate transaction and block propagation times in Bitcoin. Gervais et al. [17] analyze the limits of decentralization in Bitcoin and show that vital operations and decisions are not fully decentralized.

Finney [16] describes a double-spending attack in Bitcoin where the attacker includes transactions transferring coins between their own addresses in generated blocks, which are released only after the attacker double-spends the same coins using fast payments. Barber et al. [10] analyze ways to enhance Bitcoin's resilience against various security threats. Eyal and Sirer [15] show that Bitcoin is vulnerable to attacks by selfish miners commanding more than 33% of the total computing power. Courtois and Bahack [12] study subversive mining strategies where miners withhold recently mined blocks to gain an advantage.

Karame et al. [20, 21] investigate double-spending attacks in Bitcoin and show that fast payments can be double-spent despite recommended measures. They also proposed a countermeasure now integrated into Bitcoin. These studies assume that information disseminated in the Bitcoin network is directly received by nodes. Recently, Bitcoin developers have discussed the possibility of delayed transaction and block delivery [2, 3]. Miller et al. [22] exploited this observation and used the 2-minute transaction timeout to discover Bitcoin's topology.

Our work extends these studies by showing that an adversary can effectively prevent the delivery of transaction and block information for a considerable amount of time. Our findings share similarities with Heilman et al.'s eclipse attacks on Bitcoin [19], but we demonstrate that a resource-constrained attacker can cause significant damage with only a few connections. This suggests that the attacks outlined in [12, 15, 19, 20] can be further aggravated (cf. Section 5).

### Concluding Remarks
In this paper, we showed that the current scalability measures adopted by Bitcoin conflict with the system's security. Specifically, we demonstrated that an adversary can exploit these measures to delay the propagation of transactions and blocks to specific nodes without causing network partitioning.

We analyzed the implications of our findings and showed that these threats enable an adversary to mount Denial-of-Service (DoS) attacks on the entire network by preventing block delivery. Mining pools can exploit this vulnerability to claim a higher mining advantage. Combined with the results of Eyal and Sirer [15], our findings suggest that selfish mining pools with less than 33% of the computing power can significantly increase their mining advantage. Additionally, our findings indicate that the countermeasure adopted in Bitcoin XT to prevent double-spending of fast payments can be easily circumvented by a resource-constrained adversary.

Based on our findings, we explored several countermeasures to enhance Bitcoin's security without compromising its scalability. Our findings are not specific to Bitcoin and also apply to other P2P networks and cryptocurrencies that use similar request management systems, such as Litecoin and Dogecoin. We hope our findings will stimulate further research into redesigning Bitcoin's request management system.

### Acknowledgements
This work was partially supported by the Zurich Information Security Center. It represents the views of the authors. We thank the anonymous reviewers, as well as Grgur Petric Maretic, Ognjen Maric, and Erwin Fang for their valuable feedback and comments.

### References
[1] Bitcoin Wiki, Available from https://en.bitcoin.it/wiki/.

[2] Bitcoin dev commit 4547: prevent peer flooding request queue for an inv, 2015. Available from: https://github.com/bitcoin/bitcoin/pull/4547.

[3] Bitcoin dev commit 4831: net: Better askfor request management, 2015. Available from: https://github.com/bitcoin/bitcoin/pull/4831.

[4] Bitcoin Mailing List - Peter Todd about how many pools use an additional relay network, 2015. Available from: http://sourceforge.net/p/bitcoin/mailman/message/34152876/.

[5] Bitcoin market cap, 2015. Available from: https://blockchain.info/charts/market-cap.

[6] Bitcoin Relay Network, 2015. Available from: http://bitcoinrelaynetwork.org/.

[7] Bitcoin XT, 2015. Available from: https://github.com/bitcoinxt/bitcoinxt.

[8] Double spending in Bitcoin, 2015. Available from: https://medium.com/@octskyward/double-spending-in-bitcoin-be0f1d1e8008.

[9] Stress Test Prepares VisaNet for the Most Wonderful Time of the Year, 2015. Available from: http://goo.gl/hba0oh.

[10] S. Barber, X. Boyen, E. Shi, and E. Uzun. Bitter to Better - How to Make Bitcoin a Better Currency. In Proceedings of Financial Cryptography and Data Security, 2012.

[11] Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A. Kroll, and Edward W. Felten. Research Perspectives and Challenges for Bitcoin and Cryptocurrencies. In 2015 IEEE Symposium on Security and Privacy, May 2015.

[12] Nicolas T. Courtois and Lear Bahack. On subversive miner strategies and block withholding attack in bitcoin digital currency. CoRR, abs/1402.1718, 2014.

[13] C. Decker and R. Wattenhofer. Information Propagation in the Bitcoin Network. In 13-th IEEE International Conference on Peer-to-Peer Computing, 2013.

[14] Bitcoin exchanges, 2013. Available from: https://en.bitcoin.it/wiki/Exchanges.

[15] Ittay Eyal and Emin Gün Sirer. Majority is not enough: Bitcoin mining is vulnerable. In Financial Cryptography and Data Security, pages 436–454. Springer, 2014.

[16] The Finney Attack, 2013. Available from: https://en.bitcoin.it/wiki/Weaknesses#The_.22Finney.22_attack.

[17] Arthur Gervais, Ghassan Karame, Srdjan Capkun, and Vedran Capkun. Is bitcoin a decentralized currency? In IEEE Security and Privacy, 2014.

[18] Arthur Gervais, Ghassan O. Karame, Damian Gruber, and Srdjan Capkun. On the privacy provisions of bloom filters in lightweight bitcoin clients. In Proceedings of the 30th Annual Computer Security Applications Conference, ACSAC 2014, New Orleans, LA, USA, December 8-12, 2014, 2014.

[19] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg. Eclipse attacks on bitcoin’s peer-to-peer network. 2015.

[20] Ghassan O. Karame, Elli Androulaki, and Srdjan Capkun. Double-spending fast payments in bitcoin. In Proceedings of the 2012 ACM conference on Computer and communications security, CCS '12, New York, NY, USA, 2012. ACM.

[21] Ghassan O. Karame, Elli Androulaki, Marc Roeschlin, Arthur Gervais, and Srdjan Čapkun. Misbehavior in bitcoin: A study of double-spending and accountability. ACM Trans. Inf. Syst. Secur., 18(1):2:1–2:32, May 2015.

[22] Andrew Miller, James Litton, Andrew Pachulski, Neal Gupta, Dave Levin, Neil Spring, and Bobby Bhattacharjee. Discovering bitcoin’s public topology and influential nodes, 2015.

### Appendix
#### Revenue for Selfish Mining
We detail Eyal and Sirer’s revenue scheme for selfish mining as follows:

1. **Current state:** Any state, except two branches of length 1.
   - **Event:** The pool finds a block and adds it to its secret chain.
   - **Reward:** Block reward is determined later.

2. **Current state:** Two branches of length 1.
   - **Event:** Pool finds a block.
   - **Reward:** Pool publishes two blocks, earning the revenue of two blocks.

3. **Current state:** Two branches of length 1.
   - **Event:** Another miner finds a block on the previous pool block.
   - **Reward:** Pool and the other miner each earn the revenue of one block.

4. **Current state:** Two branches of length 1.
   - **Event:** Another miner finds a block on the previous block found by another miner.
   - **Reward:** The other miner earns the revenue of two blocks.

5. **Current state:** No secret block.
   - **Event:** Another miner finds a block.
   - **Reward:** The other miner earns the revenue of one block.

6. **Current state:** One secret block.
   - **Event:** Another miner finds a block. Pool publishes the secret block.
   - **Reward:** Block reward is determined later, depending on γ.

7. **Current state:** Leading two secret blocks.
   - **Event:** Another miner finds a block, leaving only one secret block.
   - **Reward:** Pool publishes the secret blocks, earning the revenue of two blocks.

8. **Current state:** Leading more than two secret blocks.
   - **Event:** Another miner finds a block, leaving only one secret block.
   - **Reward:** Pool publishes one block, earning the revenue of one block.