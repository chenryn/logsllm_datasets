    &exfiltrate;
This payload is meant to exfiltrate the */etc/shadow* file on the server
by making a request to the attacker's server with the file's contents in
a URL parameter. The payload first defines an external entity
`      file     ` that contains the contents of the local */etc/shadow*
file. Then it makes a request to the attacker's server with the contents
of that file in the request's URL parameter.
该有效载荷旨在通过在请求的URL参数中使用文件内容向攻击者的服务器请求服务器上的/etc/shadow文件。有效载荷首先定义一个包含本地/etc/shadow文件内容的外部实体文件，然后使用该文件的内容向攻击者的服务器发送请求。
However, this attack probably wouldn't work, because most parsers do not
allow external entities to be included in other external entities. And
parsers would stop processing the DTD once they encounter this line:
`           `
. So exfiltrating data by using a blind XXE is a bit more complicated
than in a classic XXE.
然而，这种攻击很可能不起作用，因为大多数解析器不允许在其他外部实体中包含外部实体。一旦遇到这行代码：\，解析器就会停止处理DTD。因此，使用盲XXE泄露数据比传统XXE要复杂一些。
Fortunately, XML DTDs have a feature called *parameter entities* that we
can use instead. Parameter entities are XML entities that can be
referenced only elsewhere within the DTD. They are declared and
referenced with a percent ( `      %     ` ) character. For example, the
blind XXE payload I introduced earlier can be rewritten as follows:
幸运的是，XML
DTD具有参数实体的功能，我们可以使用它来替代。参数实体是只能在DTD内的其他地方引用的XML实体。它们是通过百分号(%)字符声明和引用的。例如，我之前介绍的盲目XXE负载可以重写为下面的形式：
     1
      "> 2
      %ent;
      %exfiltrate;
    ]>
This DTD first declares a parameter entity called `      file     ` that
contains the file contents of */etc/shadow* [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . Then it declares a parameter entity named
`      ent     ` that contains a dynamic declaration of another
parameter entity called `      exfiltrate     ` [ 2 ]{.CodeAnnotation
aria-label="annotation2"} . `      &#x25;     ` is the hex-encoded
version of the percent sign ( `      %     ` ). Depending on your
target, hex encoding is sometimes needed for special characters within
dynamic declarations. The `      exfiltrate     ` entity points to the
attacker's server with the contents of */etc/shadow* in the URL
parameter. [ ]{#c15.xhtml#Page_257 .pagebreak title="257"} Finally, the
DTD references `      ent     ` to declare the `      exfiltrate     `
entity and then references `      exfiltrate     ` to trigger the
outbound request.
此DTD首先声明一个名为file的参数实体，其中包含/etc/shadow的文件内容1。然后声明一个名为ent的参数实体，其中包含对另一个名为exfiltrate的参数实体的动态声明2。&#x25;是百分号（％）的十六进制编码版本。根据您的目标，动态声明中的特殊字符有时需要进行十六进制编码。exfiltrate实体使用URL参数将内容指向攻击者服务器上的/etc/shadow。最后，DTD引用ent声明exfiltrate实体，然后引用exfiltrate触发出站请求。
But if you try to upload this payload to a target, you might notice that
it does not work. This is because, according to XML specifications,
parameter entities are treated differently in inline DTDs (DTDs within
the XML document specified within the `      DOCTYPE     ` tag) and
external DTDs (a separate DTD hosted elsewhere). Within inline DTDs,
parameter entities cannot be referenced within markups, so this line
wouldn't work:
`           `
, whereas in external DTDs, no such restriction exists.
但是，如果您尝试将此有效载荷上传到目标，您可能会注意到它无法工作。这是因为根据XML规范，在内联DTD（在DOCTYPE标记指定的XML文档内的DTD）和外部DTD（另一个托管在其他地方的DTD）中，参数实体的处理方式不同。在内联DTD中，标记内部无法引用参数实体，因此此行不起作用：\，而在外部DTD中，不存在这样的限制。
To exfiltrate data via a blind XXE, you have to overcome this
restriction by hosting an external DTD on your server. Try hosting a
file named *xxe.dtd* on your server:
通过盲XXE渗透数据，您需要通过在服务器上托管外部DTD来克服此限制。请尝试在您的服务器上托管名为xxe.dtd的文件。
    ">
    %ent;
    %exfiltrate;
Then make the target parser interpret your DTD by specifying it within a
parameter entity and referencing that entity:
然后通过在参数实体内指定它并引用该实体来使目标分析器解释您的DTD：
      %xxe;
    ]>
This way, the target server will parse the submitted XML file and notice
that a parameter entity is referencing an external file. Then the target
server will retrieve and parse that external DTD, so your payload will
execute, and the target will send the exfiltrated data back to your
server. Here, we are exfiltrating the contents of the file */etc/shadow*
as a URL parameter in a request to the attacker's server.
这样，目标服务器将会解析提交的XML文件并注意到参数实体正在引用外部文件。然后目标服务器将检索和解析该外部DTD，因此您的有效负载将执行并将结果发送回您的服务器。在这里，我们将文件/
etc / shadow的内容作为URL参数从攻击者的服务器请求中渗透出来。
Notice that in this attack, we used only parameter entities and did not
use external entities at all! If the parser blocks external entities or
limits the referencing of entities to protect against XXE, you can use
this technique as well. However, this strategy can exfiltrate only a
single line of the target file, because the newline character (
`      \n     ` ) within target files will interrupt the outbound URL
and may even cause the HTTP request to fail.
请注意，在这种攻击中，我们仅使用参数实体，没有使用任何外部实体！如果分析器阻止外部实体或限制参考实体以保护免受XXE的影响，则也可以使用此技术。然而，这种策略仅能窃取目标文件的单行文本，因为目标文件中的换行符（\\n）将打断出站URL，甚至可能导致HTTP请求失效。
An easier way to exfiltrate data via a blind XXE is by forcing the
parser to return a descriptive error message. For example, you can
induce a File Not Found error by referencing a nonexistent file as the
value of an external entity. Your external DTD can be rewritten as
follows:
通过强制解析器返回详细的错误消息，可以更轻松地通过盲XXE泄露数据。例如，您可以通过将不存在的文件引用为外部实体的值来引起\"文件未找到\"错误。您的外部DTD可以重写为以下方式：
    ">
    %ent;
    %error;
[ ]{#c15.xhtml#Page_258 .pagebreak title="258"} Notice that I included
the contents of */etc/shadow* in the URL parameter of the nonexistent
filepath. Then you can submit the same payload to the target to trigger
the attack:
请注意，我在不存在的文件路径的URL参数中包含了/etc/shadow的内容。然后你可以将相同的Payload提交到目标上触发攻击：
      %xxe;
    ]>
This malicious DTD will cause the parser to deliver the desired file
contents as a File Not Found error:
这个恶意的DTD会导致解析器将所需的文件内容作为"找不到文件"的错误发送：
    java.io.FileNotFoundException: file:///nonexistent/FILE CONTENTS OF /etc/shadow
### Performing Denial-of-Service Attacks {#c15.xhtml#h2-123456c15-0009}
Another potential way that attackers can exploit XML vulnerabilities is
to launch denial-of-service attacks, which disrupt the machine so that
legitimate users cannot access its services. Note that you should never
try this on a live target! Testing for DoS on a live target can cause
the organization financial loss and is usually against companies' bug
bounty policies:
攻击者利用XML漏洞的另一种潜在方式是发动拒绝服务攻击，使机器瘫痪，以致合法用户无法访问其服务。请注意，你绝不应该在现场目标上尝试此类攻击！对现场目标进行DoS测试可能会导致组织财务损失，并且通常违反公司的漏洞赏金政策：
    ]>
    &lol9;
This payload embeds entities within entities, causing the XML parser to
recursively dereference entities to get to the root entity value
`      lol     ` . Each `      lol9     ` entity would be expanded into
10 `      lol8     ` values, and each of those would become 10
`      lol7     ` s, and so on. Eventually, a single `      lol9     `
will be expanded into one billion `      lol     ` s. This will overload
the memory of the XML parser, potentially causing it to crash.
此有效负载将实体嵌入到实体中，导致 XML
解析器递归引用实体以获取根实体值。每个 lol9 实体将扩展为 10 个 lol8
值，每个值都将变成 10 个 lol7，依此类推。最终，一个单独的 lol9
将会扩展为十亿个 lol。这将使 XML 解析器的内存超载，可能导致崩溃。
This attack method is also called a *billion laughs attack* or an *XML
bomb* . The example here is taken from Wikipedia, where you can read
more about the attack:
[https://en.wikipedia.org/wiki/Billion_laughs_attack](https://en.wikipedia.org/wiki/Billion_laughs_attack){.LinkURL}
. Interestingly, although this attack is often classified as an XXE
attack, it does not involve the use of any external entities!
这种攻击方法也被称为"十亿笑声攻击"或"XML炸弹"。这里的示例取自维基百科，您可以在此阅读更多关于该攻击的信息：https://en.wikipedia.org/wiki/Billion_laughs_attack。有趣的是，虽然这种攻击通常被归类为XXE攻击，但它并不涉及使用任何外部实体！
## [ ]{#c15.xhtml#Page_259 .pagebreak title="259"} More About Data Exfiltration Using XXEs {#c15.xhtml#h1-123456c15-0005}
XXE data exfiltration becomes more complicated if the parser is hardened
against XXE attacks, and if you are trying to read files of specific
formats. But there are always more ways to bypass restrictions!
如果解析器具有硬化对抗XXE攻击的特性，并且你尝试读取特定格式的文件，则XXE数据泄露将变得更加复杂。但总有更多的方法来绕过限制！
Sometimes you'll want to exfiltrate files that contain XML special
characters, such as angle brackets ( `      <>     ` ), quotes (
`      "     ` or `      '     ` ), and the ampersand ( `      &     `
). Accessing these files directly via an XXE would break the syntax of
your DTD and interfere with the exfiltration. Thankfully, XML already
has a feature that deals with this issue. In an XML file, characters
wrapped within `      CDATA     ` (character data) tags are not seen as
special characters. So, for instance, if you're exfiltrating an XML
file, you can rewrite your malicious external DTD as follows:
有时候，您会想窃取包含XML特殊字符的文件，比如尖括号（\），引号（"或者\'），和字符&（和）。直接通过XXE访问这些文件会破坏DTD语法，并干扰窃取。幸运的是，XML已经有一个可以解决这个问题的功能。在XML文件中，被CDATA（字符数据）标签装起来的字符不被视为特殊字符。因此，如果您要窃取一个XML文件，您可以将恶意的外部DTD按以下方式重写：
    1 
    2 
    3 ">
    4 ">
    %ent;
    %exfiltrate;
This DTD first declares a parameter entity that points to the file you
want to read [ 1 ]{.CodeAnnotation aria-label="annotation1"} . It also
declares two parameter entities containing the strings
`      ""     ` [ 2 ]{.CodeAnnotation
aria-label="annotation2"} [ 3 ]{.CodeAnnotation
aria-label="annotation3"} . Then it constructs an exfiltration URL that
will not break the DTD's syntax by wrapping the file's contents in a
`      CDATA     ` tag [ 4 ]{.CodeAnnotation aria-label="annotation4"} .
The concatenated `      exfiltrate     ` entity declaration will become
the following:
该DTD首先声明了一个参数实体，该实体指向您想要读取的文件1。它还声明了两个参数实体，包含字符串"\"2
3。然后，它构建了一个外泄URL，通过将文件内容包装在一个CDATA标记中，不会破坏DTD的语法4。连接的外渗实体声明将成为以下内容：
    '>
You can see that our payloads are quickly getting complicated. To
prevent accidentally introducing syntax errors to the payload, you can
use a tool such as XmlLint (
[https://xmllint.com/](https://xmllint.com/){.LinkURL} ) to ensure that
your XML syntax is valid.
你可以看到我们的有效载荷正在迅速变得复杂。为了防止无意间引入语法错误到有效负载中，你可以使用工具如XmlLint(https://xmllint.com/)
来确保你的XML语法是有效的。
Finally, send your usual XML payload to the target to execute the
attack:
最后，向目标发送常规的 XML 负载以执行攻击：
      %xxe;
    ]>
Another way of exfiltrating files with special characters is to use a
PHP URL wrapper. If the target is a PHP-based app, PHP wrappers let you
convert the desired data into base64 format so you can use it to read
XML files or even binary files:
使用PHP
URL包装器是另一种具有特殊字符的文件外泄方式。如果目标是基于PHP的应用程序，则可以使用PHP包装器将所需数据转换为base64格式，以便读取XML文件甚至二进制文件。