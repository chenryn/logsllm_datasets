When using `withStyles()` hoc in typescript, I am getting the following error
when trying to use the returned component:
    Type '{}' is not assignable to type 'IntrinsicAttributes & IntrinsicClassAttributes & Readonly & Reado...'.
      Type '{}' is not assignable to type 'Readonly>'.
        Property 'classes' is missing in type '{}'.
  * I have searched the issues of this repository and believe that this is not a duplicate.
It appears this change to the type definition might be related to this issue.
## Expected Behavior
Given the `App` component code below, I should be able to use the component
`` without the type error as I did in 1.0.0-beta.10.
## Current Behavior
Given the `App` component code below, trying to use `` results in the
aforementioned error.
## The Code
    import * as React from 'react';
    import { withStyles } from 'material-ui/styles';
    const styles = {
        main: {
            marginTop: 48,
            padding: 10,
        },
        foo: {
            margin: 0,
        },
    };
    interface Props {
        message: string;
    };
    type ClassNames = { classes: { [className in keyof typeof styles]: string } };
    class App extends React.Component {
        render() {
            const { classes, message } = this.props;
            return (
                        Hello World! {message}
            );
        }
    }
    export default withStyles(styles)(App);
## Context
The code worked fine in 1.0.0-beta.10, when I upgraded to 1.0.0-beta.12 I got
the type error.
In the code snippet provided I used the `keyof typeof styles` trick so that I
would not need to define a list of class names twice (I strongly dislike the
repetitiveness). I have also tried other variations:
    type ClassNames = WithStyles;
and doing it the more common way (as seen in styles.spec.tsx):
    type ComponentClassNames = 'main' | 'foo';
    type ClassNames = WithStyles;
I still get the same error.
It seems the previous type definition would return a component whose props
type would be `StyledComponentProps` which has an optional `classes` property.
The new definition...
    >>(
        component: C
      ): C;
...returns the same type `C` as the component, this means that passing
`ClassNames` which is not marked optional propagates to the returned
component. I see mentioned here the use of `Partial<>` which I think it an
unsightly hack.
## Your Environment
Tech | Version  
---|---  
Material-UI | 1.0.0-beta.12  
React | 15.6.1  
browser | Chrome 61.0.3163.100