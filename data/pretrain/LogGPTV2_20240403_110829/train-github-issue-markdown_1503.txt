I'm trying to implement some automatic MPI  NumPy datatype conversion for
to enhance mpi4py. Users usually struggle to get it right from complex types,
mostly because NumPy defaults to packed structs, while MPI defaults to aligned
structs. I'm stuck with an minor issue. I guess it is related Python 2 legacy
from the time we had to use an `L` suffix to write long integers. Minimal
reproducer and proposed fix in the following.
### Reproducing code example:
    import numpy as np
    np.dtype("3L")
### Error message:
    Traceback (most recent call last):
      File "", line 1, in 
      File "/usr/lib64/python3.7/site-packages/numpy/core/_internal.py", line 199, in _commastring
        newitem = (dtype, eval(repeats))
      File "", line 1
        3L
         ^
    SyntaxError: unexpected EOF while parsing
### Numpy/Python version information:
    1.16.3 3.7.3 (default, May 11 2019, 00:38:04) 
    [GCC 9.1.1 20190503 (Red Hat 9.1.1-1)]
### Proposed trivial fix (tested)
    diff --git a/numpy/core/_internal.py b/numpy/core/_internal.py
    index ab5a64a1a..c70718cb6 100644
    --- a/numpy/core/_internal.py
    +++ b/numpy/core/_internal.py
    @@ -146,7 +146,7 @@ def _reconstruct(subtype, shape, dtype):
     # format_re was originally from numarray by J. Todd Miller
     format_re = re.compile(br'(?P[<>|=]?)'
    -                       br'(?P *[(]?[ ,0-9L]*[)]? *)'
    +                       br'(?P *[(]?[ ,0-9]*[)]? *)'
                            br'(?P[<>|=]?)'
                            br'(?P[A-Za-z0-9.?]*(?:\[[a-zA-Z0-9,.]+\])?)')
     sep_re = re.compile(br'\s*,\s*')