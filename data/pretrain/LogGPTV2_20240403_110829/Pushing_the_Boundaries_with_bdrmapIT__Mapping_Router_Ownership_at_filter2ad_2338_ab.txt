AS annotation: AS of inferred operator of IR or interface
ately previous to the link in a traceroute
paths crossing IR
Table 2: Glossary of terms
3 OVERVIEW
bdrmapIT has three phases, illustrated in Fig. 1. The first phase
builds a directed graph from the traceroutes and alias resolution
(§4). The second phase infers the operators of routers that appear
only at the end of traceroutes (§5). These mappings are not subject
to refinement, and provide topological context for mappings in the
final phase. The final phase maps routers observed in the middle of
at least one traceroute path to ASes (§6). The last phase is iterative,
visiting routers and interfaces multiple times to make accurate
inferences.
3.1 Constructing Interface Graph (§4)
bdrmapIT creates an inferred router (IR) graph by combining pre-
viously collected traceroutes with inferred IP router aliases data.
Many datasets have few (or no) aliases resolved, and bdrmapIT will
map AS borders without it, but aliases can improve mapping accu-
racy by providing additional router operator constraints and ensur-
ing a consistent inference for interfaces used on the same router.
Links connect IRs to interfaces seen subsequently in a traceroute
(Figure 2). bdrmapIT works with existing datasets, which dictate
the graph, without the opportunity for additional probing. To aid
our analysis, we store significant graph metadata, e.g., for each
interface we store its origin AS, which is the AS announcing the
longest matching prefix for the IP address of that interface. We label
links according to our confidence in their ability to inform accurate
router ownership inference (§4). We also store the origin AS set for
each link, which contains the origin ASes of all IR interfaces seen
prior to the connected interface. We label IRs with their destination
AS set (§5.2), which contains the destination ASes of the traceroutes
in which any IR interface appears.
In addition to static metadata labels, we include dynamic annota-
tions for every IR and interface, which bdrmapIT continually refines
throughout the algorithm. bdrmapIT assigns annotations when in-
ferring the operators of last hop IRs (§5), as well as during the graph
refinement loop (§6). IR annotations indicate the AS operating the
IR, while interface annotations represent the AS connected to the
interface, i.e., the other side of the link (Fig. 3). When annotating
IRs and interfaces we make two assumptions that are generally but
not always true: that routers (IRs) are operated by a single AS; and
Figure 1: bdrmapIT’s three phases: Constructing the Graph,
Annotating Last Hops, and Annotating IRs and Interfaces.
traceroute due to firewalls, and does not use router alias inferences.
To create bdrmapIT, we adapted bdrmap heuristics to the MAP-IT
graph refinement framework with localized reasoning, yielding a
technique capable of inferring the owner of routers visible from
any number of VPs, in any number of networks. When restricted
to the input for bdrmap or MAP-IT, bdrmapIT is at least as accurate
as the prior techniques. Table 1 gives an overview of bdrmapIT and
the genesis of each heuristic.
We faced technical challenges adapting heuristics into bdrmapIT.
Adapting bdrmap heuristics required removing assumptions made
when mapping a single VP network’s routers to accommodate
MAP-IT’s local reasoning. First, router ownership inferences become
harder with more AS-level diversity around the router, meaning
that mapping router IP interface addresses to the AS who owns
the router requires more sophisticated heuristics. To overcome this
difficulty, bdrmapIT constructs sets of candidate origin ASes (§4.3)
and iteratively narrows the set. Similarly, bdrmap detects third-party
addresses when it sees an unexpected AS in between the VP AS
and an adjacent network. Other traceroute datasets may expose
third party addresses several AS hops removed from the VP. Our
adapted third-party heuristic uses origin AS sets, destination AS
sets (§4.4), and router operator inferences (§6.1); this technique to
identify third-party addresses improves with the graph refinement
(§6) process adapted from MAP-IT. Finally, adapting MAP-IT’s graph
refinement heuristics to router graphs instead of interface graphs
was a significant challenge. Accommodating alias resolution input
data motivated our strategy laid out in §4.2 and §6.1, where we infer
router operators at the router granularity, without first selecting
an AS for each alias.
58
AliasResolutionAS OriginPrefixesIXPPrefixesTraceroutesConstructGraph §4DestinationASesHybridGraphLast HopHeuristic§5Last HopAnnotationsAnnotateRouters§6.1AnnotateInterfaces§6.2Loop Until Repeated StateOutputRepeated StateASRelationshipsIMC ’18, October 31-November 2, 2018, Boston, MA, USA
A. Marder et al.
path 1:
path 2:
...
...
hops
a1
a2
b1
b2
dst
b3
d
path 3:
...
hops
c
b2
dst
e
Figure 2: Using paths 1-3, we build IR1,2,3 (boxes) and the
links between IRs and interfaces (circles).
Figure 3: IR1 (box) is annotated with ASB representing its in-
ferred operator, while its interface (circle), with IP address a,
is annotated with ASA representing that it is inferred to be
connect to a router operated by ASA.
that interdomain links are point-to-point, except public peering
links at IXPs.
3.2 Annotating Last Hops with Ownership (§5)
When the last interface in a traceroute is not the destination, it could
be on the border router of the network containing the destination.
This occurs when an AS configures its firewall to prevent traceroute
responses to probes from other networks. In this phase we infer
the operator of an IR with no outgoing links to be the destination
AS of the paths on which the IR’s interfaces were observed.
This technique is surprisingly effective, and enables us to accu-
rately infer links to networks that do not respond to traceroute
probes from internal routers. These ASes are especially tricky, since
we often do not see any addresses from their address space in the
traceroutes. Some of the AS-links inferred in this step do not ap-
pear in our BGP paths, thus complementing our BGP-observed AS
connectivity. bdrmapIT also relies on these ownership mappings in
the graph refinement step (§6.1).
3.3 Annotating IRs and Interfaces (§6)
In order to deal with traceroute, routing, and IP space artifacts,
the final phase is an iterative process that first annotates the IRs
(§6.1), then annotates the interfaces (§6.2), and then repeats this
process until completion, indicated by a repeated state. Annota-
tions assigned in each iteration help refine the graph, enabling more
accurate annotations in subsequent iterations. Each iteration recon-
siders every annotation assigned based on the current annotations
of neighboring IRs and interfaces. We do not revise the annotations
assigned in the second phase, since those annotations are based
entirely on static metadata.
4 PHASE 1: CONSTRUCT THE GRAPH
The first step is to construct an annotated IR graph from the tracer-
outes, alias resolution data, and external data sources. All subse-
quent refinement on the IR occurs locally, using only the static
metadata labels (from the first phase) or the annotations (which
may change during iterations) of its immediate neighbors. We do
not directly consider remote IRs, but their annotations propagate
across the graph in each iteration. We also extract static graph meta-
data — interface origin ASes and IXP prefixes (§4.1), link confidence
labels (§4.2), origin AS sets (§4.3), and IR destination AS sets (§4.4).
4.1 Label AS-level Metadata
This phase labels the initial graph with additional metadata to
enable subsequent inferences: origin ASes, IXP prefixes, and AS
relationships.
Determining Origin ASes: We assume that one AS among the
origin ASes for interface IP addresses on an IR is more likely than
the others to be the operator of the IR. We derive interface origin
ASes using BGP announcements collected by Routeviews [13] and
RIPE RIS [12]. For each prefix we determine the origin AS as the
last AS in the AS path. To determine the origin AS for an interface,
we use the longest matching prefix from the route announcements.
We then initialize the graph by annotating each interface with the
origin AS of the corresponding IP address and create the IR origin
AS set as the union of the IR’s interface AS mappings.
Not every prefix is visible in BGP announcements, so we sup-
plement this data with RIR delegations [2–4,7,11], using the AS
identifiers in the extended delegation files to match IP prefixes with
ASes. RIR delegations can be stale, since ASes can reassign prefixes,
so we only use the prefixes from RIR delegations not already cov-
ered by a BGP prefix. Of the addresses seen in our experiments,
99.95% have a matching prefix in either BGP announcements, RIR
delegations, or IXP prefixes.
Collecting IXP Addresses: bdrmapIT considers IXP prefixes spe-
cially, since some ASes originate IXP prefixes in BGP, which could
cause unrelated ASes to be included in an origin AS set for an IR. We
therefore compile a list of IXP prefixes using data volunteered by
ISPs and IXPs to PeeringDB [10], Packet Clearing House (PCH) [9],
and EuroIX [5], and do not consider BGP origin ASes for addresses
covered by these prefixes when building origin AS sets.
Inferring AS Relationships: AS relationships constrain the set
of possible paths, so we use them to constrain the set of ASes
used for IR labeling. We rely on Luckie et al.’s technique [28] to
determine whether two adjacent ASes in BGP paths are in a transit
relationship. This technique also infers the customer cone for an
AS, i.e., ASes reachable by customer links [28].
4.2 Assign Link Confidence Labels
The likelihood that an interface-to-interface link is a point-to-point
link depends on the type of ICMP response used to infer the link. We
59
            IR1              a1  c       IR2       b1       IR3        b2  a2  (IR1,b2)(IR1,b1)ASBIR1 ASBa ASA ASAPushing the Boundaries with bdrmapIT
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Label
N←→ j
IRi
E←→ j
IRi
M←→ j
IRi
Priority Description
1
2
3
Same origin AS or hop-distance of 1,
where j does not respond with ICMP Echo
Reply.
Hop-distance of 1. j responds with ICMP
Echo Reply.
Hop-distance > 1. i and j have different
origin ASes.
Table 3: Link type confidence labels: Nexthop (N), Echo (E),
and Multihop (M).
The highest confidence links, IRi
use this dependence to label links with indicators of confidence in
their existence, as follows. For each traceroute, we create a link from
each IR to the first interface seen subsequently in that traceroute.
When we encounter adjacent hops i and j, possibly separated by
private addresses or unresponsive hops, we create a link between
i’s IR (IRi) and j. We label the link with one of three labels in Tab. 3,
determined by the distance between the hops, and the ICMP type of
j’s reply. If a link receives multiple labels, bdrmapIT uses the highest
confidence one.
N←→ j, provide the most reli-
able information; they also account for 96.4% of links seen in our
traceroute datasets. A link receives this label in two cases. Both
require that j responds with ICMP Time Exceeded or Destination
Unreachable, which typically indicates that the traceroute probe
arrived at interface j on the responding router, or that the router
responded using j. In the first case, i and j have the same origin AS.
We are not concerned with the hop-distance between them since
that same origin AS likely operates them. In the second case, they
have different origin ASes, but i and j have a hop-distance of one.
We consider links derived from adjacent traceroute hops as reliable
as hops with the same origin AS, since ASj indicates that j’s router
is operated by ASj, IRi is operated by ASj, or both.
When j responds with ICMP Echo Reply, we label the link IRi
E←→
j. Unlike other response types, Echo Replies do not indicate that j
was the ingress or egress interface, but rather that j was an interface
on the responding router. As long as i and j are adjacent, we indicate
E←→ j. Of the IRs in our datasets
this distinction with the label IRi
with links to at least one subsequent interface, 2.8% have E←→ links
but no N←→ links.
Lastly, we use label i
M←→ j when i and j are separated by unre-
sponsive hops or private addresses, and ASi (cid:44) ASj. In such cases
we cannot assume that i and j are on routers operated by the same
AS, and there could be one or more AS-hops between Ri and Rj.
We use M←→ links only when no other link types are available.
Fig. 4 illustrates the process of assigning labels to links. We label
the first link IR1 N←→ b since the hops are adjacent and IR2 responds
with Time Exceeded. The next two links are labeled IR2 M←→ c1 and
IR4 N←→ c2 respectively. In the third link c1 and c2 have the same
origin ASes, leading us to presume the missing hops are operated
by ASc, while we are unable to draw the same inference in the
Hop:
IPs:
2
b
Origin AS: ASA ASB
1
a
*
4
c1
ASC
*
*
8
7
d
c2
ASC ASD
Figure 4: Deriving link labels from a traceroute: Nexthop,
Echo, and Multihop.
Figure 5: Using the paths from figure 2, path segment a1 −
b1 crosses link (IR1, b1), so the AS set L(I R1,b1) contains ASA,
while segments a2 − b2 and c − b2 both cross link (IR1, b2), so