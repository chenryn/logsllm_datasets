title:The Honey Badger of BFT Protocols
author:Andrew Miller and
Yu Xia and
Kyle Croman and
Elaine Shi and
Dawn Song
The Honey Badger of BFT Protocols
Andrew Miller
University of Illinois, Urbana-Champaign
Yu Xia
Tsinghua University
Kyle Croman
Cornell University
Elaine Shi
Cornell University
Dawn Song
University of California, Berkeley
ABSTRACT
The surprising success of cryptocurrencies has led to a surge of inter-
est in deploying large scale, highly robust, Byzantine fault tolerant
(BFT) protocols for mission-critical applications, such as ﬁnancial
transactions. Although the conventional wisdom is to build atop a
(weakly) synchronous protocol such as PBFT (or a variation thereof),
such protocols rely critically on network timing assumptions, and
only guarantee liveness when the network behaves as expected. We
argue these protocols are ill-suited for this deployment scenario.
We present an alternative, HoneyBadgerBFT, the ﬁrst practical
asynchronous BFT protocol, which guarantees liveness without mak-
ing any timing assumptions. We base our solution on a novel atomic
broadcast protocol that achieves optimal asymptotic efﬁciency. We
present an implementation and experimental results to show our
system can achieve throughput of tens of thousands of transactions
per second, and scales to over a hundred nodes on a wide area net-
work. We even conduct BFT experiments over Tor, without needing
to tune any parameters. Unlike the alternatives, HoneyBadgerBFT
simply does not care about the underlying network.
1.
INTRODUCTION
Distributed fault tolerant protocols are promising solutions for
mission-critical infrastructure, such as ﬁnancial transaction data-
bases. Traditionally, they have been deployed at relatively small
scale, and typically in a single administrative domain where ad-
versarial attacks might not be a primary concern. As a representa-
tive example, a deployment of Google’s fault tolerant lock service,
Chubby [14], consists of ﬁve nodes, and tolerates up to two crash
faults.
In recent years, a new embodiment of distributed systems called
“cryptocurrencies” or “blockchains” have emerged, beginning with
Bitcoin’s phenomenal success [44]. Such cryptocurrency systems
represent a surprising and effective breakthrough [12], and open a
new chapter in our understanding of distributed systems.
Cryptocurrency systems challenge our traditional belief about the
deployment environment for fault tolerance protocols. Unlike the
classic “5 Chubby nodes within Google” environment, cryptocur-
rencies have revealed and stimulated a new demand for consensus
protocols over a wide area network, among a large number of nodes
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
© 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978399
that are mutually distrustful, and moreover, network connections
can be much more unpredictable than the classical LAN setting, or
even adversarial. This new setting poses interesting new challenges,
and calls upon us to rethink the design of fault tolerant protocols.
Robustness is a ﬁrst-class citizen. Cryptocurrencies demonstrate
the demand for and viability of an unusual operating point that prior-
itizes robustness above all else, even at the expense of performance.
In fact, Bitcoin provides terrible performance by distributed systems
standards: a transaction takes on average 10 minutes to be commit-
ted, and the system as a whole achieves throughput on the order
of 10 transactions per second. However, in comparison with tradi-
tional fault tolerant deployment scenarios, cryptocurrencies thrive
in a highly adversarial environment, where well-motivated and mali-
cious attacks are expected (if not commonplace). For this reason,
many of Bitcoin’s enthusiastic supporters refer to it as the “Honey
Badger of Money” [41]. We note that the demand for robustness
is often closely related to the demand for decentralization — since
decentralization would typically require the participation of a large
number of diverse participants in a wide-area network.
Favor throughput over latency. Most existing works on scalable
fault tolerance protocols [6, 49] focus on optimizing scalability in
a LAN environment controlled by a single administrative domain.
Since bandwidth provisioning is ample, these works often focus on
reducing (cryptographic) computations and minimizing response
time while under contention (i.e., requests competing for the same
object).
In contrast, blockchains have stirred interest in a class of ﬁnan-
cial applications where response time and contention are not the
most critical factors, e.g., payment and settlement networks [1]. In
fact, some ﬁnancial applications intentionally introduce delays in
committing transactions to allow for possible rollback/chargeback
operations.
Although these applications are not latency critical, banks and
ﬁnancial institutions have expressed interest in a high-throughput
alternative of the blockchain technology, to be able to sustain high
volumes of requests. For example, the Visa processes 2,000 tx/sec
on average, with a peak of 59,000 tx/sec [1].
1.1 Our Contributions
Timing assumptions considered harmful. Most existing Byzan-
tine fault tolerant (BFT) systems, even those called “robust,” assume
some variation of weak synchrony, where, roughly speaking, mes-
sages are guaranteed to be delivered after a certain bound ∆, but
∆ may be time-varying or unknown to the protocol designer. We
argue that protocols based on timing assumptions are unsuitable for
decentralized, cryptocurrency settings, where network links can be
31unreliable, network speeds change rapidly, and network delays may
even be adversarially induced.
First, the liveness properties of weakly synchronous protocols can
fail completely when the expected timing assumptions are violated
(e.g., due to a malicious network adversary). To demonstrate this,
we explicitly construct an adversarial “intermittently synchronous”
network that violates the assumptions, such that existing weakly
synchronous protocols such as PBFT [20] would grind to a halt
(Section 3).
Second, even when the weak synchrony assumptions are satis-
ﬁed in practice, weakly synchronous protocols degrade signiﬁcantly
in throughput when the underlying network is unpredictable. Ide-
ally, we would like a protocol whose throughput closely tracks
the network’s performance even under rapidly changing network
conditions. Unfortunately, weakly asynchronous protocols require
timeout parameters that are ﬁnicky to tune, especially in crypto-
currency application settings; and when the chosen timeout values
are either too long or too short, throughput can be hampered. As
a concrete example, we show that even when the weak synchrony
assumptions are satisﬁed, such protocols are slow to recover from
transient network partitions (Section 3).
Practical asynchronous BFT. We propose HoneyBadgerBFT, the
ﬁrst BFT atomic broadcast protocol to provide optimal asymptotic
efﬁciency in the asynchronous setting. We therefore directly refute
the prevailing wisdom that such protocols a re necessarily impracti-
cal.
We make signiﬁcant efﬁciency improvements on the best prior-
known asynchronous atomic broadcast protocol, due to Cachin et
al. [15], which requires each node to transmit O(N2) bits for each
committed transaction, substantially limiting its throughput for all
but the smallest networks. This inefﬁciency has two root causes.
The ﬁrst cause is redundant work among the parties. However, a
naïve attempt to eliminate the redundancy compromises the fairness
property, and allows for targeted censorship attacks. We invent a
novel solution to overcome this problem by using threshold public-
key encryption to prevent these attacks. The second cause is the use
of a suboptimal instantiation of the Asynchronous Common Subset
(ACS) subcomponent. We show how to efﬁciently instantiate ACS
by combining existing but overlooked techniques: efﬁcient reliable
broadcast using erasure codes [18], and a reduction from ACS to
reliable broadcast from the multi-party computation literature [9].
HoneyBadgerBFT’s design is optimized for a cryptocurrency-
like deployment scenario where network bandwidth is the scarce
resource, but computation is relatively ample. This allows us to take
advantage of cryptographic building blocks (in particular, threshold
public-key encryption) that would be considered too expensive in a
classical fault-tolerant database setting where the primary goal is to
minimize response time even under contention.
In an asynchronous network, messages are eventually delivered
but no other timing assumption is made. Unlike existing weakly
synchronous protocols where parameter tuning can be ﬁnicky, Hon-
eyBadgerBFT does not care. Regardless of how network conditions
ﬂuctuate, HoneyBadgerBFT’s throughput always closely tracks the
network’s available bandwidth. Imprecisely speaking, HoneyBad-
gerBFT eventually makes progress as long as messages eventually
get delivered; moreover, it makes progress as soon as messages are
delivered.
We formally prove the security and liveness of our HoneyBad-
gerBFT protocol, and show experimentally that it provides better
throughput than the classical PBFT protocol [20] even in the opti-
mistic case.
Implementation and large-scale experiments. We provide a full-
ﬂedged implementation of HoneyBadgerBFT, which will we release
as free open source software in the near future.1 We demonstrate
experimental results from an Amazon AWS deployment with more
than 100 nodes distributed across 5 continents. To demonstrate its
versatility and robustness, we also deployed HoneyBadgerBFT over
the Tor anonymous relay network without changing any parameters,
and present throughput and latency results.
1.2 Suggested Deployment Scenarios
Among numerous conceivable applications, we highlight two
likely deployment scenarios that are sought after by banks, ﬁnancial
institutions, and advocates for fully decentralized cryptocurrencies.
Confederation cryptocurrencies. The success of decentralized
cryptocurrencies such as Bitcoin has inspired banks and ﬁnancial
institutions to inspect their transaction processing and settlement
infrastructure with a new light. “Confederation cryptocurrency” is
an oft-cited vision [24, 25, 48], where a conglomerate of ﬁnancial
institutions jointly contribute to a Byzantine agreement protocol
to allow fast and robust settlement of transactions. Passions are
running high that this approach will streamline today’s slow and
clunky infrastructure for inter-bank settlement. As a result, several
new open source projects aim to build a suitable BFT protocol for
this setting, such as IBM’s Open Blockchain and the Hyperledger
project [40].
A confederation cryptocurrency would require a BFT protocol
deployed over the wide-area network, possibly involving hundreds
to thousands of consensus nodes. In this setting, enrollment can eas-
ily be controlled, such that the set of consensus nodes are known a
priori — often referred to as the “permissioned” blockchain. Clearly
HoneyBadgerBFT is a natural candidate for use in such confedera-
tion cryptocurrencies.
Applicability to permissionless blockchains. By contrast, decen-
tralized cryptocurrencies such as Bitcoin and Ethereum opt for a
“permissionless” blockchain, where enrollment is open to anyone,
and nodes may join and leave dynamically and frequently. To
achieve security in this setting, known consensus protocols rely on
proofs-of-work to defeat Sybil attacks, and pay an enormous price
in terms of throughput and latency, e.g., Bitcoin commits transac-
tions every ∼ 10 min, and its throughput limited by 7 tx/sec even
when the current block size is maximized. Several recent works
have suggested the promising idea of leveraging either a slower,
external blockchain such as Bitcoin or economic “proof-of-stake”
assumptions involving the underlying currency itself [32, 32, 35, 37]
to bootstrap faster BFT protocols, by selecting a random committee
to perform BFT in every different epoch. These approaches promise
to achieve the best of both worlds, security in an open enrollment,
decentralized network, and the throughput and response time match-
ing classical BFT protocols. Here too HoneyBadgerBFT is a natural
choice since the randomly selected committee can be geographically
heterogeneous.
2. BACKGROUND AND RELATED WORK
Our overall goal is to build a replicated state machine, where
clients generate and submit transactions and a network of nodes
receives and processes them. Abstracting away from application
speciﬁc details (such as how to represent state and compute tran-
sitions), it sufﬁces to build a totally globally-consistent, totally-
ordered, append-only transaction log. Traditionally, such a primitive
is called total order or atomic broadcast [23]; in Bitcoin parlance,
we would call it a blockchain.
1https://github.com/amiller/HoneyBadgerBFT
32Fault tolerant state machine replication protocols provide strong
safety and liveness guarantees, allowing a distributed system to
provide correct service in spite of network latency and the failure
of some nodes. A vast body of work has studied such protocols,
offering different performance tradeoffs, tolerating different forms
of failures and attacks, and making varying assumptions about the
underlying network. We explain below the most closely related
efforts to ours.
2.1 Robust BFT Protocols
While Paxos [36], Raft [46], and many other well-known proto-
cols tolerate crash faults, Byzantine fault tolerant protocols (BFT),
beginning with PBFT [20], tolerate even arbitrary (e.g., maliciously)
corrupted nodes. Many subsequent protocols offer improved perfor-
mance, often through optimistic execution that provides excellent
performance when there are no faults, clients do not contend much,
and the network is well-behaved, and at least some progress other-
wise [2, 5, 33, 39, 51].
In general, BFT systems are evaluated in deployment scenarios
where latency and CPU are the bottleneck [49], thus the most effec-
tive protocols reduce the number of rounds and minimize expensive
cryptographic operations.
Clement et al. [22] initiated a recent line of work [4, 6, 10, 21,
22, 50] by advocating improvement of the worst-case performance,
providing service quality guarantees even when the system is under
attack — even if this comes at the expense of performance in the
optimistic case. However, although the “Robust BFT” protocols in
this vein gracefully tolerate compromised nodes, they still rely on
timing assumptions about the underlying network. Our work takes
this approach further, guaranteeing good throughput even in a fully
asynchronous network.
2.2 Randomized Agreement
Deterministic asynchronous protocols are impossible for most
tasks [27]. While the vast majority of practical BFT protocols steer
clear of this impossibility result by making timing assumptions, ran-
domness (and, in particular, cryptography) provides an alternative
route. Indeed we know of asynchronous BFT protocols for a variety
of tasks such as binary agreement (ABA), reliable broadcast (RBC),
and more [13, 15, 16].
Our work is most closely related to SINTRA [17], a system im-
plementation based on the asynchronous atomic broadcast protocol
from Cachin et al. (CKPS01) [15]. This protocol consists of a re-
duction from atomic broadcast (ABC) to common subset agreement
(ACS), as well as a reduction from ACS to multi-value validated
agreement (MVBA).
The key invention we contribute is a novel reduction from ABC
to ACS that provides better efﬁciency (by an O(N) factor) through