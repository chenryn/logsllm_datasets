3. P proves that the committed values at all multiplication
gates are correct by running a consistency-check procedure
with V . The known sVOLE-based ZK proofs [7,27,52,54]
use different consistency-check procedures. The state-of-
the-art consistency check [27, 54] works as follows:
(a) Consider the i-th multiplication gate with authenti-
cated values ([x], [y], [z]). If it is computed correctly
(i.e., z = x· y), then:
(cid:122)
(cid:125)(cid:124)
known to V
(cid:123)
(cid:124)
(cid:124) (cid:123)(cid:122) (cid:125)
known to P
Bi = Kx · Ky + Kz · ∆
= (Mx − x· ∆)· (My − y· ∆) + (Mz − z· ∆)· ∆
= Mx · My + (Mz − y· Mx − x· My)· ∆ + (x· y− z)· ∆2
= Mx · My
+ (Mz − y· Mx − x· My)
·
.
∆(cid:124)(cid:123)(cid:122)(cid:125)
known to P
denoted by A0,i
known to V
global key
If z (cid:54)= x· y, then the above holds with probability at
most 2/qk over choice of ∆.
denoted by A1,i
(cid:123)(cid:122)
(cid:125)
(b) The parties can check all N of the above equations
at once by taking a random linear combination. In
particular, V samples and sends a uniform χ ∈ Fqk
to P . Then P sends U0 := ∑i∈[1,N] A0,i · χi + A∗
0 and
USENIX Association
30th USENIX Security Symposium    503
U1 := ∑i∈[1,N] A1,i · χi + A∗
1 to V , who checks that
∑i∈[1,N] Bi · χi + B∗ = U0 +U1 · ∆. This can be made
non-interactive using the Fiat-Shamir transform (i.e.,
computing χ by hashing the protocol transcript), and
can be further optimized when q is large [52, 54].
The ideal functionality for ZK proofs in this setting is summa-
rized in Figure 2, where both arithmetic and Boolean circuits
are considered. (Prior work [7, 27, 52, 54] efﬁciently realizes
either arithmetic or Boolean circuits, but not mixed-mode
computations.) For convenience, we also include in the ideal
functionality the other conversions we support in our work
(see Figure 3).
3 Technical Overview
As mentioned in Section 1.1, we propose new protocols for
arithmetic-Boolean and commitment-authentication conver-
sions that are highly useful in real-world applications. We
summarize in Figure 3 for the functionality deﬁnition of the
two types of conversions. At a high level, our arithmetic-
Boolean conversion allows authenticated values to be con-
verted between arithmetic and Boolean circuits, while at the
same time ensuring that the consistent values are converted.
The commitment-authentication conversion allows us to con-
vert from publicly committed values to privately authenticated
values: the former provides a uniﬁed view of data across mul-
tiple veriﬁers, while the later can be efﬁciently processed by
the sVOLE-based ZK protocols.
For ML applications, we also present the conversion be-
tween ﬁxed-point and ﬂoating-point numbers, and an im-
proved ZK proof for matrix multiplication. Below we provide
an overview of our techniques and leave the detailed protocol
description as well as proofs of security in later sections.
3.1 Arithmetic-Boolean Conversion
Enabling ZK proofs to support both arithmetic and Boolean
circuits have been an important topic and studied in prior
work. Particularly, in zk-SNARKs, it is often referred to as
bit-decomposition [11, 12, 24, 44, 49]. Suppose that a prover
has a witness x and the statement needs to compute on the bit
representation of x. The prover can provide a bit decomposi-
tion of x, namely {xi}i∈[0,m), with m as the bit-length of x. The
prover can then prove in zero-knowledge that xi · (xi − 1) = 0
for all i ∈ [0,m) and ∑i∈[0,m) xi · 2i = x. Essentially, this is
a way to simulate bit computation on an arithmetic circuit,
which does not improve the underlying ZK proof.
Another solution [36] is to combine garbled-circuit zero-
knowledge proofs [30, 37, 39] (GCZK) with arithmetic gar-
bling [6]. However, it only supports multiplication by public
constants, and thus proving multiplication of two values over
ﬁeld Fp still needs to take communication of λlog p bits.
Functionality FauthZK
This functionality is parameterized by a prime p > 2 and
an integer k such that pk ≥ 2ρ, and can invoke a macro
Auth() deﬁned in Figure 4. Let m = (cid:100)log p(cid:101).
Initialize: On input (init) from a prover P and veriﬁer V ,
sample ∆ ← F
2λ and Γ ← Fpk if V is honest, and receive
∆ ∈ F
2λ and Γ ∈ Fpk from the adversary otherwise. Store
(∆,Γ) and send them to V , and ignore all subsequent
(init) commands.
Input: On input (input, id,w,q) from P and (input, id,q)
from V , where id is a fresh identiﬁer, w ∈ Fq and q ∈
{2, p}, execute Auth(w,q) so that the parties obtain [w],
and store (id,q, [w]).
Output: On input (output, id) from two parties where
id is present in memory, retrieve (id,q, [z]) and output
z ∈ Fq to V .
Circuit-based commands
Random: On input (random, id,q) from P and V with
id a fresh identiﬁer and q ∈ {2, p}, sample w ← Fq if P
is honest; otherwise receive w ∈ Fq from the adversary.
Execute Auth(w,q) so that the parties obtain [w], and
store (id,q, [w]).
Linear combination: On input (lincomb, id,{idi}i∈[1,(cid:96)],
{ci}i∈[0,(cid:96)],q) from two parties, where (idi,q) is present
in memory for i ∈ [1, (cid:96)] and ci ∈ Fq for i ∈ [0, (cid:96)], re-
trieve (idi,q, [xi]) for all i ∈ [1, (cid:96)], and then compute
[y] := c0 + ∑i∈[1,(cid:96)] ci · [xi], store (id,q, [y]) and output [y]
to the parties.
Multiply: On input (mult, id, id1, id2,q) from both par-
ties, where (id1,q) and (id2,q) are present in mem-
ory, retrieve (id1,q, [x]) and (id2,q, [y]). Then compute
z := x·y ∈ Fq, run Auth(z,q) so that the parties obtain [z],
and store (id,q, [z]).
Figure 2: Zero-knowledge functionality with authenti-
cated values.
Our approach. Some recent works on sVOLE-based ZK pro-
tocols achieve high concrete efﬁciency [7, 27, 52, 54]. They
support either arithmetic or Boolean circuits, and compute
a circuit with authenticated wire values. The conversion be-
tween two types of circuits boils down to converting between
authenticated arithmetic values and authenticated Boolean
values. These cases are similar to some secure multi-party
computation (MPC) protocols, which only support operations
over either arithmetic or Boolean circuits, and use IT-MACs
to authenticate secretly-sharing values.
In the MPC setting, converting authenticated shares be-
tween arithmetic and Boolean circuits can be accomplished
504    30th USENIX Security Symposium
USENIX Association
Functionality FauthZK, continued
Conversion between arithmetic and Boolean values
From arithmetic to Boolean: On input (convertA2B,
id, id0, . . . , idm−1) from P and V where (id, p) is present
in memory, retrieve (id, p, [x]p) and decompose x ∈ Fp
as (x0, . . . ,xm−1) ∈ {0,1}m such that x = ∑m−1
i=0 xi · 2i
mod p. Then, for i ∈ [0,m), execute Auth(xi,2) so that
the parties obtain [xi]2 and store (idi,2, [xi]2).
From Boolean to arithmetic: On input (convertB2A,
id0, . . . , idm−1, id) from two parties, where (idi,2) is
present in memory for i ∈ [0,m), retrieve (idi,2, [xi]2) for
each i ∈ [0,m). Then, compute x := ∑m−1
i=0 xi · 2i mod p,
execute Auth(x, p) so that the parties obtain [x]p, and
store (id, p, [x]p).
Conversion from publicly committed values to
privately authenticated values
Commit: On input (commit, cid,x,q) from P with cid
a fresh identiﬁer, x ∈ Fq and q ∈ {2, p}, store (cid,q,x)
and send (cid,q) to multiple potential veriﬁers.
From committed to authenticated values: On input
(convertC2A, cid, id) from P and a veriﬁer V , where cid
is present in memory and id is a fresh identiﬁer, retrieve
(cid,q,x), and then execute Auth(x,q) so that the two
parties obtain [x] and store (id,q, [x]).
Figure 3: Zero-knowledge functionality with authenti-
cated values, continued.
Macro Auth(x,q)
On input x ∈ Fq and q ∈ {2, p}, this subroutine interacts
with two parties P and V , and generates an authenticated
value [x] for the parties. Let k = λ and Φ = ∆ if q = 2.
Let k ∈ N such that qk ≥ 2ρ and Φ = Γ if q = p.
1. If V is honest, sample K ← Fqk. Otherwise, receive
K ∈ Fqk from the adversary.
2. If P is honest, compute M := K + Φ· x ∈ Fqk. Other-
wise, receive M ∈ Fqk from the adversary and recom-
pute K := M− Φ· x ∈ Fqk.
3. Output [x] to the parties, i.e., send (x, M) to P and K
to V .
Figure 4: Macro used by functionalities FauthZK and
Fzk-edaBits to generate authenticated values.
by so-called doubly authenticated bits (daBits) [3,25,45]. The
key idea of daBits is to prepare for secretly-shared random
bits that are authenticated in both ﬁelds F2 and Fp with a large
prime p (meaning that p ≥ 2ρ), so that one set of MAC tags
support Boolean operations (i.e., AND and XOR), while the
other set of MAC tags are arithmetic-operation (i.e., MULT
and ADD) homomorphic. To perform a conversion, we need
m = (cid:100)log p(cid:101) such daBits, which are used to convert the shares
of x0, . . . ,xm−1 ∈ F2 to that of x = ∑m−1
h=0 xh · 2h ∈ Fp, where
the related MAC tags are also converted accordingly. In the
ZK setting, we can use a similar method. Unfortunately, al-
though we can authenticate a ﬁeld element over Fp efﬁciently
in communication of O(log p) bits, authenticating a bit with
the MAC tag in Fp still takes O(log p) bits (instead of one bit)
for communication. As a result, the conversion requires a total
communication of O(log2 p) bits for generating m daBits, not
even counting the cost to perform conversion using daBits.
To overcome this, we instead follow the more recent ex-
tended daBits (edaBits) [28], which can be viewed as a more
compact representation of daBits. An edaBit consists of a
set of m random secretly-shared bits ([r0]2, . . . , [rm−1]2) with
the MAC tags in F
2λ and a secretly-shared ﬁeld element [r]p
with the MAC tag in Fp, such that (r0, . . . ,rm−1) ∈ Fm
2 is
equal to the bit-decomposition of r ∈ Fp. Such an edaBit
is sufﬁcient to perform conversion between arithmetic and
Boolean circuits. Now, generating an edaBit requires only
O(log p) bits of communication. Inspired by the edaBits
approach for MPC, we ﬁrst construct ZK-friendly edaBits
(zk-edaBits) to keep compatible with the recent sVOLE-based
ZK proofs [7, 27, 52, 54], and then construct two conversion
protocols using our random zk-edaBits, where one can con-
vert authenticated values from arithmetic to Boolean circuits
and the other converts in another direction.
Constructing zk-edaBits. Similar to edaBit in the MPC set-
ting, a zk-edaBit consists of a random authenticated value
[r]p and m authenticated bits [r0]2, . . . , [rm−1]2, such that r =
∑m−1
h=0 rh · 2h mod p. In the ZK setting, the prover is allowed
to know (r0, . . . ,rm−1,r) as it knows all wire values in the
circuit, and thus the secret sharing of these values is unnec-
essary. Here, we do not assume that p is a large prime, and
instead allow any prime p > 2, as we consider authentication
is done in an extension ﬁeld Fpk with pk ≥ 2ρ.
Using two sVOLE-based ZK proofs where one for F2
and the other for Fp, we can construct authenticated values
([r0]2, . . . , [rm−1]2) and [r]p with communication of O(log p)
bits in total. Nevertheless, if the prover is malicious, then there
may be an inconsistency (i.e, r (cid:54)= ∑m−1
h=0 rh · 2h mod p). Now,
our task is to check the consistency of N faulty zk-edaBits
computed as above, where N is the number of zk-edaBits
needed. This could be done using the “cut-and-bucketing”
technique similar to prior work [5, 32, 52]. Speciﬁcally, we
let a prover P and a veriﬁer V generate extra N(B− 1) + c
faulty zk-edaBits, where B,c are two parameters. Then two
parties use a random permutation to shufﬂe NB + c faulty
zk-edaBits. The last c faulty zk-edaBits are opened, and their
correctness is checked by V . Next, the remaining NB faulty
USENIX Association
30th USENIX Security Symposium    505
zk-edaBits are partitioned into N buckets with each of size
B. Finally, for each bucket, the parties perform the “combine-
and-open” check B− 1 times of between the ﬁrst zk-edaBit
in the bucket and the other B− 1 zk-edaBits. See Section 4.1
for more details and optimization.
Arithmetic-Boolean conversions using zk-edaBits. In Fig-
ure 3, we deﬁne the functionality for converting authenticated
wire values between arithmetic and Boolean circuits. We will
use random zk-edaBits to realize the conversion of authenti-
cated values between arithmetic and Boolean wires.
Given a random zk-edaBit ([r0]2, . . . , [rm−1]2, [r]p) and an
authenticated value [x]p to be converted, P and V can open a
masked value [z]p = [x]p − [r]p, and call functionality FauthZK
with only circuit-based commands to compute a modular-
addition circuit on a public input (z0, . . . ,zm−1) and a secret in-
put ([r0]2, . . . , [rm−1]2) so that they obtain ([x0]2, . . . , [xm−1]2),
where (z0, . . . ,zm−1) is the bit-decomposition of z. From
z = x− r mod p and ∑m−1
h=0 zh · 2h = z mod p, one can easily
verify that (x0, . . . ,xm−1) is the bit-decomposition of x. The
other direction can be constructed in a similar way.
In general, we need to convert multiple authenticated val-
ues between arithmetic and Boolean wires, and thus can open
multiple authenticated values in a batch to reduce the com-
munication cost. In Section 4.2, we will provide the full de-
scription of our protocols and formal proofs of security.
3.2 Conversion from Publicly Committed Val-
ues to Privately Authenticated Values
Our second task is to convert from non-interactive commit-
ments (publicly available to all parties) to authenticated values
(privately available between two parties). The former is suit-
able for committing values in a public repository, while the