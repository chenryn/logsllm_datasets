.Ve
.Sp
first to get the correct constant definitions.  If \s-1CMD\s0 is \f(CW\*(C`IPC_STAT\*(C'\fR,
then \s-1ARG\s0 must be a variable which will hold the returned \f(CW\*(C`shmid_ds\*(C'\fR
structure.  Returns like ioctl: the undefined value for error, "\f(CW0\fR but
true" for zero, or the actual return value otherwise.
See also \*(L"SysV \s-1IPC\s0\*(R" in perlipc and \f(CW\*(C`IPC::SysV\*(C'\fR documentation.
.IP "shmget \s-1KEY\s0,SIZE,FLAGS" 8
.IX Item "shmget KEY,SIZE,FLAGS"
Calls the System V \s-1IPC\s0 function shmget.  Returns the shared memory
segment id, or the undefined value if there is an error.
See also \*(L"SysV \s-1IPC\s0\*(R" in perlipc and \f(CW\*(C`IPC::SysV\*(C'\fR documentation.
.IP "shmread \s-1ID\s0,VAR,POS,SIZE" 8
.IX Item "shmread ID,VAR,POS,SIZE"
.PD 0
.IP "shmwrite \s-1ID\s0,STRING,POS,SIZE" 8
.IX Item "shmwrite ID,STRING,POS,SIZE"
.PD
Reads or writes the System V shared memory segment \s-1ID\s0 starting at
position \s-1POS\s0 for size \s-1SIZE\s0 by attaching to it, copying in/out, and
detaching from it.  When reading, \s-1VAR\s0 must be a variable that will
hold the data read.  When writing, if \s-1STRING\s0 is too long, only \s-1SIZE\s0
bytes are used; if \s-1STRING\s0 is too short, nulls are written to fill out
\&\s-1SIZE\s0 bytes.  Return true if successful, or false if there is an error.
\&\fIshmread()\fR taints the variable. See also \*(L"SysV \s-1IPC\s0\*(R" in perlipc,
\&\f(CW\*(C`IPC::SysV\*(C'\fR documentation, and the \f(CW\*(C`IPC::Shareable\*(C'\fR module from \s-1CPAN\s0.
.IP "shutdown \s-1SOCKET\s0,HOW" 8
.IX Item "shutdown SOCKET,HOW"
Shuts down a socket connection in the manner indicated by \s-1HOW\s0, which
has the same interpretation as in the system call of the same name.
.Sp
.Vb 3
\&    shutdown(SOCKET, 0);    # I/we have stopped reading data
\&    shutdown(SOCKET, 1);    # I/we have stopped writing data
\&    shutdown(SOCKET, 2);    # I/we have stopped using this socket
.Ve
.Sp
This is useful with sockets when you want to tell the other
side you're done writing but not done reading, or vice versa.
It's also a more insistent form of close because it also
disables the file descriptor in any forked copies in other
processes.
.IP "sin \s-1EXPR\s0" 8
.IX Item "sin EXPR"
.PD 0
.IP "sin" 8
.IX Item "sin"
.PD
Returns the sine of \s-1EXPR\s0 (expressed in radians).  If \s-1EXPR\s0 is omitted,
returns sine of \f(CW$_\fR.
.Sp
For the inverse sine operation, you may use the \f(CW\*(C`Math::Trig::asin\*(C'\fR
function, or use this relation:
.Sp
.Vb 1
\&    sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }
.Ve
.IP "sleep \s-1EXPR\s0" 8
.IX Item "sleep EXPR"
.PD 0
.IP "sleep" 8
.IX Item "sleep"
.PD
Causes the script to sleep for \s-1EXPR\s0 seconds, or forever if no \s-1EXPR\s0.
May be interrupted if the process receives a signal such as \f(CW\*(C`SIGALRM\*(C'\fR.
Returns the number of seconds actually slept.  You probably cannot
mix \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`sleep\*(C'\fR calls, because \f(CW\*(C`sleep\*(C'\fR is often implemented
using \f(CW\*(C`alarm\*(C'\fR.
.Sp
On some older systems, it may sleep up to a full second less than what
you requested, depending on how it counts seconds.  Most modern systems
always sleep the full amount.  They may appear to sleep longer than that,
however, because your process might not be scheduled right away in a
busy multitasking system.
.Sp
For delays of finer granularity than one second, you may use Perl's
\&\f(CW\*(C`syscall\*(C'\fR interface to access \fIsetitimer\fR\|(2) if your system supports
it, or else see \*(L"select\*(R" above.  The Time::HiRes module (from \s-1CPAN\s0,
and starting from Perl 5.8 part of the standard distribution) may also
help.
.Sp
See also the \s-1POSIX\s0 module's \f(CW\*(C`pause\*(C'\fR function.
.IP "socket \s-1SOCKET\s0,DOMAIN,TYPE,PROTOCOL" 8
.IX Item "socket SOCKET,DOMAIN,TYPE,PROTOCOL"
Opens a socket of the specified kind and attaches it to filehandle
\&\s-1SOCKET\s0.  \s-1DOMAIN\s0, \s-1TYPE\s0, and \s-1PROTOCOL\s0 are specified the same as for
the system call of the same name.  You should \f(CW\*(C`use Socket\*(C'\fR first
to get the proper definitions imported.  See the examples in
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc.
.Sp
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of $^F.  See \*(L"$^F\*(R" in perlvar.
.IP "socketpair \s-1SOCKET1\s0,SOCKET2,DOMAIN,TYPE,PROTOCOL" 8
.IX Item "socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL"
Creates an unnamed pair of sockets in the specified domain, of the
specified type.  \s-1DOMAIN\s0, \s-1TYPE\s0, and \s-1PROTOCOL\s0 are specified the same as
for the system call of the same name.  If unimplemented, yields a fatal
error.  Returns true if successful.
.Sp
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptors, as determined by the value
of $^F.  See \*(L"$^F\*(R" in perlvar.
.Sp
Some systems defined \f(CW\*(C`pipe\*(C'\fR in terms of \f(CW\*(C`socketpair\*(C'\fR, in which a call
to \f(CW\*(C`pipe(Rdr, Wtr)\*(C'\fR is essentially:
.Sp
.Vb 4
\&    use Socket;
\&    socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
\&    shutdown(Rdr, 1);        # no more writing for reader
\&    shutdown(Wtr, 0);        # no more reading for writer
.Ve
.Sp
See perlipc for an example of socketpair use.  Perl 5.8 and later will
emulate socketpair using \s-1IP\s0 sockets to localhost if your system implements
sockets but not socketpair.
.IP "sort \s-1SUBNAME\s0 \s-1LIST\s0" 8
.IX Item "sort SUBNAME LIST"
.PD 0
.IP "sort \s-1BLOCK\s0 \s-1LIST\s0" 8
.IX Item "sort BLOCK LIST"
.IP "sort \s-1LIST\s0" 8
.IX Item "sort LIST"
.PD
In list context, this sorts the \s-1LIST\s0 and returns the sorted list value.
In scalar context, the behaviour of \f(CW\*(C`sort()\*(C'\fR is undefined.
.Sp
If \s-1SUBNAME\s0 or \s-1BLOCK\s0 is omitted, \f(CW\*(C`sort\*(C'\fRs in standard string comparison
order.  If \s-1SUBNAME\s0 is specified, it gives the name of a subroutine
that returns an integer less than, equal to, or greater than \f(CW0\fR,
depending on how the elements of the list are to be ordered.  (The \f(CW\*(C`\*(C'\fR and \f(CW\*(C`cmp\*(C'\fR operators are extremely useful in such routines.)
\&\s-1SUBNAME\s0 may be a scalar variable name (unsubscripted), in which case
the value provides the name of (or a reference to) the actual
subroutine to use.  In place of a \s-1SUBNAME\s0, you can provide a \s-1BLOCK\s0 as
an anonymous, in-line sort subroutine.
.Sp
If the subroutine's prototype is \f(CW\*(C`($$)\*(C'\fR, the elements to be compared
are passed by reference in \f(CW@_\fR, as for a normal subroutine.  This is
slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine
as the package global variables \f(CW$a\fR and \f(CW$b\fR (see example below).  Note that
in the latter case, it is usually counter-productive to declare \f(CW$a\fR and
\&\f(CW$b\fR as lexicals.
.Sp
In either case, the subroutine may not be recursive.  The values to be
compared are always passed by reference, so don't modify them.
.Sp
You also cannot exit out of the sort block or subroutine using any of the
loop control operators described in perlsyn or with \f(CW\*(C`goto\*(C'\fR.
.Sp
When \f(CW\*(C`use locale\*(C'\fR is in effect, \f(CW\*(C`sort LIST\*(C'\fR sorts \s-1LIST\s0 according to the
current collation locale.  See perllocale.
.Sp
Perl 5.6 and earlier used a quicksort algorithm to implement sort.
That algorithm was not stable, and \fIcould\fR go quadratic.  (A \fIstable\fR sort
preserves the input order of elements that compare equal.  Although
quicksort's run time is O(NlogN) when averaged over all arrays of
length N, the time can be O(N**2), \fIquadratic\fR behavior, for some
inputs.)  In 5.7, the quicksort implementation was replaced with
a stable mergesort algorithm whose worst case behavior is O(NlogN).
But benchmarks indicated that for some inputs, on some platforms,
the original quicksort was faster.  5.8 has a sort pragma for
limited control of the sort.  Its rather blunt control of the
underlying algorithm may not persist into future perls, but the
ability to characterize the input or output in implementation
independent ways quite probably will.  See sort.
.Sp
Examples:
.Sp
.Vb 2
\&    # sort lexically
\&    @articles = sort @files;
.Ve
.Sp
.Vb 2
\&    # same thing, but with explicit sort routine
\&    @articles = sort {$a cmp $b} @files;
.Ve
.Sp
.Vb 2
\&    # now case-insensitively
\&    @articles = sort {uc($a) cmp uc($b)} @files;
.Ve
.Sp
.Vb 2
\&    # same thing in reversed order
\&    @articles = sort {$b cmp $a} @files;
.Ve
.Sp
.Vb 2
\&    # sort numerically ascending
\&    @articles = sort {$a  $b} @files;
.Ve
.Sp
.Vb 2
\&    # sort numerically descending
\&    @articles = sort {$b  $a} @files;
.Ve
.Sp
.Vb 3
\&    # this sorts the %age hash by value instead of key
\&    # using an in-line function
\&    @eldest = sort { $age{$b}  $age{$a} } keys %age;
.Ve
.Sp
.Vb 5
\&    # sort using explicit subroutine name
\&    sub byage {
\&        $age{$a}  $age{$b};  # presuming numeric
\&    }
\&    @sortedclass = sort byage @class;
.Ve
.Sp
.Vb 9
\&    sub backwards { $b cmp $a }
\&    @harry  = qw(dog cat x Cain Abel);
\&    @george = qw(gone chased yz Punished Axed);
\&    print sort @harry;
\&            # prints AbelCaincatdogx
\&    print sort backwards @harry;
\&            # prints xdogcatCainAbel
\&    print sort @george, 'to', @harry;
\&            # prints AbelAxedCainPunishedcatchaseddoggonetoxyz
.Ve
.Sp
.Vb 3
\&    # inefficiently sort by descending numeric compare using
\&    # the first integer after the first = sign, or the
\&    # whole record case-insensitively otherwise
.Ve
.Sp
.Vb 5
\&    @new = sort {
\&        ($b =~ /=(\ed+)/)[0]  ($a =~ /=(\ed+)/)[0]
\&                            ||
\&                    uc($a)  cmp  uc($b)
\&    } @old;
.Ve
.Sp
.Vb 8
\&    # same thing, but much more efficiently;
\&    # we'll build auxiliary indices instead
\&    # for speed
\&    @nums = @caps = ();
\&    for (@old) {
\&        push @nums, /=(\ed+)/;
\&        push @caps, uc($_);
\&    }
.Ve
.Sp
.Vb 6
\&    @new = @old[ sort {
\&                        $nums[$b]  $nums[$a]
\&                                 ||
\&                        $caps[$a] cmp $caps[$b]
\&                       } 0..$#old
\&               ];
.Ve
.Sp
.Vb 6
\&    # same thing, but without any temps
\&    @new = map { $_->[0] }
\&           sort { $b->[1]  $a->[1]
\&                           ||
\&                  $a->[2] cmp $b->[2]