Γi, j =
1
Cmin(i (cid:57)(cid:57)(cid:75) j) ∃i (cid:57)(cid:57)(cid:75) j | Cmin(i (cid:57)(cid:57)(cid:75) j) ≤ Cthr
otherwise
(1)
In Equation (1), Cmin(i (cid:57)(cid:57)(cid:75) j) represents the minimum number
of distinct, independent compromises an attacker has to conduct to
be able to generate the flow i (cid:57)(cid:57)(cid:75) j. This value captures the extent
of the attacker’s control over the flow and is calculated based on the
minimum number of common ancestors of the processes present
in the flow. For instance, if there is a flow from a node i to a node
j, and all the processes involved in that flow have one common
ancestor in the process tree, an attacker needs to compromise only
that common ancestor process to initiate such flow, and therefore
Cmin(i (cid:57)(cid:57)(cid:75) j) is equal to 1. Note that if a node i represents a
process and node j a child process of i, then Cmin(i (cid:57)(cid:57)(cid:75) j) will be
equal to 1 as i is parent of j. If the number of common ancestors
is larger than one (e.g., there are two ancestors in the path firefox2
→ tmp.doc → word1 → %registry%\firefox), an attacker has to
compromise at least as many (unrelated) processes independently;
therefore it is harder for the attacker to construct such flow. For
instance, for the attacker to control the flow firefox2 → tmp.doc →
word_1→ %registry%\firefox), (s)he needs to control both launcher1
and launcher2; therefore Cmin is equal to 2.
We also reasonably assume that it is not practical for an attacker
to compromise more than a small number of processes with distinct
exploits. In a vast majority of documented APTs, there is usually
a single entry point or a very small number of entry points into a
system for an attacker, e.g., a spear phishing email, or a drive-by
download attack on the browser. We have confirmed that this is
true also based on a review of a large number of white papers on
APTs [72]. Once an attacker has an initial compromise, it is highly
unlikely that they will invest additional resources in discovering
and exploiting extra entry points. Therefore, we can place a limit
Cthr on the Cmin(i (cid:57)(cid:57)(cid:75) j) values and reasonably assume that any
flow between two nodes that has a Cmin(i (cid:57)(cid:57)(cid:75) j) greater than
Cthr can not have been initiated by an attacker.
While the value of Cmin(i (cid:57)(cid:57)(cid:75) j) expresses how hard it is for an
attacker to control a specific path, the influence score expresses how
easy it is for an attacker to control that path, and it is defined as
a value that is inversely proportional to Cmin(i (cid:57)(cid:57)(cid:75) j). If there is
more than one flow between two nodes i and j, the influence score
will be the maximum
Cmin(i (cid:57)(cid:57)(cid:75) j) over all those flows. Based on
this equation, the value of Γi, j is maximal (equal to 1) when there
is a flow whose Cmin(i (cid:57)(cid:57)(cid:75) j) equals 1 and is minimal (equal to 0)
when there is no flow with a Cmin(i (cid:57)(cid:57)(cid:75) j) greater than Cthr .
4.1.2 Alignment Score. We are now ready to define a metric that
specifies the score of a graph alignment Gq :: Gp. Based on the
notion of influence score, we define the scoring function S(Gq :: Gp),
representing the score for an alignment Gq :: Gp as follows:
1
S(Gq :: Gp) =
1
Γk,l | i : k & j : l
|F(Gq)|
(i(cid:57)(cid:57)(cid:75)j)∈F(Gq)
(2)
In Equation (2), nodes i and j are members of V(Gq), and nodes k
and l are members of V(Gp). The flow i (cid:57)(cid:57)(cid:75) j is a flow defined
over Gq. In particular, the formula starts by computing the sum
of the influence scores among all the pairs of nodes (k, l) with at
least one path from k to l in the graph Gp such that k is aligned

ﬁrefox2240.2.1.1%registry%\ﬁrefoxlauncher1ﬁrefox1240.1.1.1240.1.1.2240.1.1.3word1Word.exespoolsv1cmd.exetmp.exe%registry%\accessspoolsv3%registry%\Runword2spoolsv2Gp:%browser%spoolsvExternal IP*.exe%registry%Gq:launcher21112334455677889tmp.doc3launcher3java1java2229ﬁrefox2240.1.1.1Word.exe%registry%\ﬁrefox12345(Gq::Gp)1ﬁrefox1tmp.exe%registry%\Runspoolsv36789(Gq::Gp)2240.2.1.1Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1800with i and l is aligned with j. This sum is next normalized by
dividing it with the maximal value possible for that sum. In fact,
|F(Gq)| is the number of flows in Gq. Since the maximal value of
the influence score between two nodes is equal to 1, then the number
of flows automatically represents the maximal value of the sum of
the influence scores.
From Equation (2), intuitively, the larger the value of S(Gq ::
Gp), the larger the number of node alignments and the larger the
similarity between flows in Gq and flows in Gp, which are likely
to be under the influence of a potential attacker. In particular, the
value of S(Gq :: Gp) is between 0 and 1. When S(Gq :: Gp) = 0,
either no proper alignment is found for nodes in V(Gq), or no
similar flows to those of Gq appear between the aligned nodes in
Gp. On the contrary, when S(Gq :: Gp) = 1, all the nodes in Gq
are aligned to the nodes in Gp, and all the flows existing in Gq
also appear between the aligned nodes in Gp, and they all have an
influence score equal to 1, i.e., it is highly likely that they are under
the attacker’s control.
Finally, when the alignment score S(Gq :: Gp) bypasses a prede-
termined threshold value (τ), we raise the alarm. To determine the
optimal value of this threshold, recall that Cthr is the maximum
number of distinct entry point processes we are assuming an at-
tacker is willing to exploit independently. Therefore, an attacker is
assumed to be able to influence any information flow with influ-
or higher. On the other hand, S(Gq :: Gp) is the
ence score of
average of all influence scores. Therefore, we define the threshold τ
as follows:
1
Cthr
(3)
S(Gq :: Gp) ≥ τ
τ = 1
Cthr
(4)
If S(Gq :: Gp) bypasses τ, we declare a match and raise the alarm.
4.2 Best-Effort Similarity Search
After defining the alignment score, we describe our procedure to
search for an alignment that maximizes that score. In particular,
given a query graph Gq, we need to search a very large provenance
graph Gp to find an alignment Gq :: Gp with the highest alignment
score based on Equation (2).
The first challenge in doing this is the size of Gp, which can
reach millions of nodes and edges. Therefore, it is not practical to
store influence scores between all pairs of nodes of Gp. We need
to perform graph traversals on demand to find the influence scores
between nodes or even to find out whether there is a path between
two nodes. Besides, we are assuming that all analytics are being
done on a stationary snapshot of Gp, and no changes happen to its
nodes or edges from the moment when a search is initiated until it
terminates.
Our search algorithm consists of the following four steps, where
steps 2-4 are repeated until finding alignment with a score higher
than the threshold value τ (Equation (4)).
Step 1. Find all Candidate Node Alignments: We start by
searching among nodes of Gp to find candidate alignments for
each node in Gq. These candidate alignments are chosen based
on the name, type, and annotations on the nodes of the query
graph. For instance, nodes of the same type (e.g., two process nodes)
with the same label (e.g., Firefox) appearing in Gq and Gp may
form candidate alignments, nodes whose labels match a regular
expression (e.g., a file system path and file name), and so on. A user
may also manually annotate a node in the provenance graph and
explicitly specify an alignment with a node in the query graph. In
general, a node in Gq may have any number of possible alignments
in Gp, including 0. Note that in this first step, we do not have
enough information about paths and flows and are looking at nodes
in isolation. In Fig. 3, the candidate node alignments are represented
by the pairs of nodes having the same color.
Step 2. Selecting Seed Nodes: To find a good-enough align-
ment Gq :: Gp, we need to explore connections between candidate
alignments found in Step 1, by performing graph traversals on Gp.
However, due to the structure and large size of Gp, starting a set of
graph traversals from randomly aligned nodes in Gp might lead to
costly and unfruitful searches. To determine a good starting point,
a key observation is that the attack activities usually comprise a
tiny portion of Gp, while benign activities are usually repeated
multiple times. Therefore, it is more likely for artifacts that are spe-
cific to an attack to have fewer alignments than artifacts of benign
activities. Based on this observation, we sort the nodes of Gq by an
increasing order in the number of candidate alignments related to
each node. We select the seed nodes with fewest alignments first.
For instance, with respect to the example in Fig. 3, the seed node
will be %browser%, since it has the smallest number of candidate
node alignments. If there are seed nodes with the same number of
candidate alignments, we choose one of them randomly.
Step 3. Expanding the Search: In this step, starting from the
seed node chosen at Step 2, we iterate over all the nodes in Gp
aligned to it and initiate a set of graph traversals, going forward or
backward, to find out whether we can reach other aligned nodes
among those found in Step 1. For instance, after choosing node
%browser% as a seed node, we start a series of forward and backward
graph traversals from the nodes in Gp aligned to %browser%, that is
firefox1 and firefox2. In theory, these graph traversals can be very
costly both because of the size of the graph and also the number
of candidate aligned nodes, which can be located anywhere in the
graph. In practice, however, we can stop expanding the search along
a path once the influence score between the seed node and the last
node in that path reaches 0. For instance, suppose we decide that
Cthr is equal to 2 in Fig. 3. Then, the search along the path (firefox2
→ tmp.doc → word1 → %registry%\firefox→ word2) will not
expand past the node word2, since the Cmin between firefox2 and
any node along that path becomes greater than 2 at word2, and thus
the influence score becomes 0. Note that there is an additional path
from firefox2 to word2 via %registry%\firefox and along this path,
the Cmin between firefox2 and word2 is still 2. Therefore, because of
this path, the search will continue past word2. Using the influence
score as an upper bound in the graph traversals dramatically reduces
the search complexity and enables a fast exploration of the graph
Gp.
Based on the shape of the query graph Gq, multiple forward/back-
ward tracking cycles might be required to visit all nodes (for in-
stance, if we choose %browser% as a seed node in our example,
then node 240.2.1.1 in Gp is unreachable with only one forward or
backward traversal starting at firefox1 or firefox2). In this case, we
repeat the backward and forward traversals starting from nodes
that are adjacent to the unvisited nodes but that have been visited
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1801i
in a previous traversal (for instance, node spoolsv3 in our example).
We iterate this process until we cover all the nodes of the query
graph Gq.
Step 4. Graph Alignment Selection: This step is responsible
for producing the final result or for starting another iteration of
the search from step 2, in case a result is not found. In particular,
after performing backward/forward traversals, we identify a subset
of candidate nodes in Gp for each node in Gq. For instance, with
respect to our example, we find that node%browser% has candidates
firefox1 and firefox2, node External IP has candidate alignments
240.1.1.1, 240.1.1.2, 240.1.1.3, and 240.2.1.1, and so on. However, the
number of possible candidate graph alignments that these candi-
date nodes can form can be quite large. If each node i in Gq has
ni candidate alignments, then the number of possible graph align-
ni. For instance, in our example, we can have
216 possible graph alignments (2 × 3 × 3 × 3 × 4). In this step, we
search for the graph alignment that maximizes the alignment score
(Equation (2)).
ments is equal to
A naive method for doing this is a brute-force approach that
calculates the alignment score for all possible graph alignments.
However, this method is very inefficient and does not fully take
advantage of domain knowledge. To perform this search efficiently,
we devise a procedure that iteratively chooses the best candidate for
each node in Gq based on an approximation function that measures
the maximal contribution of each alignment to the final alignment
score.
In particular, starting from a seed node in Gq, we select the node
in Gp that maximizes the contribution to the alignment score and
fix this node alignment (we discuss the selection function in the
next paragraph). For instance, starting from seed node %Browser%
in our example, we fix the alignment with node firefox1. From this
fixed node alignment, we follow the edges in Gq to fix the alignment
of additional nodes connected to the seed node. The specific node
alignment selected for each of these nodes is the one that maximizes
the contribution to the alignment score. For instance, from node
%Browser% (aligned to firefox1), we can proceed to node ∗.exe and
fix the alignment of that with one node among cmd.exe, tmp.exe,
and Word.exe, such that the contribution to the alignment score is
maximized.
Selection Function. The key intuition behind the selection func-
tion, which selects and fixes one among many node alignments,
is to approximate how much each alignment would contribute to
the final alignment score and to choose the one with the high-
est contribution. For a given candidate aligned node k in Gp, this
contribution is calculated as the sum of the maximum influence
scores between that node and all the other candidate nodes l in
Gp that: 1) are reachable from k or that have a path to k, and 2)
whose corresponding aligned node j in Gq has a flow from/to the
node in Gq that corresponds to node k. For instance, consider node
%Browser% and the two candidate alignment nodes firefox1 and
firefox2 in our example. To determine the contribution of firefox1,
we measure for every flow (%Browser% (cid:57)(cid:57)(cid:75) ∗.exe, %Browser% (cid:57)(cid:57)(cid:75)
spoolsv, %Browser% (cid:57)(cid:57)(cid:75) %registry%) from/to %Browser% in Gq, the
maximum influence score between firefox1 and the candidate nodes
aligned with ∗.exe, spoolsv, and %registry%, respectively. In other
words, we compute the maximum influence score between firefox1
and each of the node alignment candidates of ∗.exe, the maximum
influence score between firefox1 and each of the node alignment can-
didates of spoolsv, and the maximum influence score between firefox1
and each of the node alignment candidates of %registry%. Each of
these three maximums provides the maximal contribution to the
alignment score of each of the possible future alignments (which
are not fixed yet) for ∗.exe, spoolsv, and %registry%, respectively.
Next, we sum these three maximum values to obtain the maximal
contribution that firefox1 would provide to the alignment score.
We repeat the same procedure for firefox2 and, finally select the
alignment with the highest contribution value. This contribution is
formally computed by the following equation, which approximates
A(i : k) the contribution of a node alignment i : k.
A(i : k)
= 
+ 
j:(i(cid:57)(cid:57)(cid:75)j)∈F(Gq)
(cid:16)
(cid:16)
1{j:l} × Γk,l + (1 − 1{j:l}) ×
max
m∈candidat es(j)
(Γk,m)(cid:17)
(Γm,k)(cid:17)
(5)
1{j:l} × Γl,k + (1 − 1{j:l}) ×
max
m∈candidat es(j)
j:(j(cid:57)(cid:57)(cid:75)i)∈F(Gq)
where 1A is an indicator function, which is 1 if the alignment
expressed in A is fixed, and is 0 otherwise. In other words, if the
alignment between node j and l, has been fixed, l{j:l } equals to 1,
and otherwise, if node j is not aligned to any node yet, 1{j:l } equals
to 0. Note that 1{j:l } and (1 − 1{j:l }) are mutually exclusive, and at
any moment, only one of them equals 1, and the other one equals
to 0.
We note that the first summation is performed on outgoing flows
from node i, while the second summation is performed on flows
that are incoming to node i. Inside each summation, the first term
represents a fixed alignment while the second term represents the
maximum among potential alignments that have not been fixed yet,
as discussed above.