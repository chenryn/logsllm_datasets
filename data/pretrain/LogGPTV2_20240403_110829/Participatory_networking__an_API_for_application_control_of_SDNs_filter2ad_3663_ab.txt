oversubscription, and allows several shares to express policies for
overlapping ﬂowgroups. A key novelty of PANE is a principled and
intuitive conﬂict-resolution algorithm for hierarchical policies.
We use Hierarchical Flow Tables (HFTs) to materialize PANE’s
policy tree. HFTs provide a model for resolving conﬂicts in a hier-
archy of policies, and a formally-veriﬁed compiler from such hier-
archies to ﬂow tables suitable for OpenFlow switches. In particular,
HFTs use conﬂict resolution operators within and between each
node in the hierarchy to ﬂexibly resolve conﬂicts. We describe the
design of PANE’s operators and its use of the HFT compiler in §5.
Having summarized PANE’s key ideas, we now describe at a
high level the processing of a single request, as depicted in Fig-
ure 1. When an authenticated principal sends the controller a mes-
sage, perhaps requesting a resource for a ﬂowgroup in a particu-
lar share, PANE ﬁrst checks that the request is admissible per the
share’s ﬂowgroup and privileges – Diamond 1 in the ﬁgure.
If this ﬁrst check passes, PANE then checks to see if it is compat-
ible with the state of the network – Diamond 2. This check involves
all accepted requests (i.e., policy atoms) in the policy tree, and
the physical capabilities of the network. For example, a bandwidth
reservation requires a circuit between two endpoints with sufﬁcient
bandwidth and switch queues. This check requires compiling the
current policy tree, augmented with the request itself. If this check
passes (i.e., if the request is feasible), the request is incorporated
into the tree, and the controller can install the policy onto the net-
work. This process also has a variation which only partially fulﬁlls
requests; §5.2 describes both variations in more detail.
A ﬁnal key feature, which we detail in subsequent sections, is
that PANE allows principals to request resources for future inter-
vals. To support this, PANE maintains a time-indexed sequence of
policy trees. The above checks may thus be made against future,
planned network state as appropriate.
3.
INTERACTING WITH PANE
We now expand upon the three message types introduced in the
overview: requests, queries, and hints. Table 1 has a concise speci-
ﬁcation of these messages, and their relation to other key concepts
in PANE’s API.
3.1 Requests
A request affects the state of the network for some interval of
time. By default, requests take effect immediately and do not ex-
pire; this allows critical network invariants to be expressed easily.
Speciﬁc start and end times may optionally be provided. Verifying
if a request can be granted may require walking the tree’s hierarchy,
depending on the type of request. This design allows resources to
be oversubscribed; overallocation is prevented when requests are
granted, and not when shares are created.
Figure 2: Example user request for reserved bandwidth; PANE
determines that it cannot be fulﬁlled until time t.
Participatory networks may support requests for a variety of net-
work resources and services, which we detail next.
Access Control The simplest type of network service exposed by
PANE is access control – the ability to allow and deny trafﬁc, using
the Allow and Deny requests. Like all requests, they specify a ﬂow-
group describing the affected trafﬁc, and the share which the princi-
pal is using to invoke the privilege. Each access control privilege is
optionally constrained by a speciﬁed number of seconds, n. To ex-
ceed this limit, principals must periodically renew requests. Shares
lacking the ability to allow or deny trafﬁc have n = 0. When cre-
ating a sub-share, a principal cannot exceed these constraints. For
example, if a share carries the privilege to Deny trafﬁc for up to 300
seconds, a sub-share cannot be created with the privilege to Deny
trafﬁc for up to 301 seconds.
The handling of a given packet is ultimately decided by the com-
position of every matching access control request. This composi-
tion makes use of the share tree’s hierarchy to resolve conﬂicts –
for example, an access control request made on a child share over-
rides those in parent shares. We defer further discussion of PANE’s
general approach to conﬂict resolution until §5.
With each request, the principal can specify a fulﬁllment mode,
either strict or partial. These are provided for atomicity and conve-
nience. In strict mode, PANE rejects a request if it would be (par-
tially) overridden by any previous request. For example, if a user
wants to allow connections to TCP ports 1000-2000, but there ex-
ists a request in a sub-share that denies port 1024, PANE rejects the
request, explaining why. In partial mode, PANE implements the re-
quest, and informs the user that it was only partially satisﬁed; in
the same example, PANE would inform the user that it has allowed
ports 1000-1023, and 1025-2000.
These modes exist for two reasons: ﬁrst, to avoid race condi-
tions in request allocations, and second, to avoid complicated, ﬁne-
grained speciﬁcations that depend on PANE’s current state. We de-
fer a more complete discussion of the strict and partial fulﬁllment
modes until §5.2.
Guaranteed Minimum Bandwidth PANE also provides a Re-
serve privilege which provides guaranteed minimum bandwidth
(GMB) between two hosts. Shares which contain the privilege to
reserve bandwidth are limited by a modiﬁed token bucket: it has
the usual attributes of ﬁll rate F , capacity C, and maximum drain
rate M, and an additional minimum drain rate m. This lower bound
prevents reservations with very low drain rates that could last indef-
initely. A simple reservation with maximum bandwidth B is a spe-
cial case with F = M = B; C = m = 0. GMB reservations are
ultimately implemented by PANE’s runtime as a sequence of for-
warding actions and switch queues, as we describe in §6. Requests
which cannot be implemented are rejected.
Figure 2 shows a simple example in which a principal has re-
quested an immediate bandwidth reservation. PANE determines that
granting the request will exceed the share’s available bandwidth.
The principal then examines the share’s schedule of available band-
TimeBandwidthReservation Limit✔✘tS
P
F
∈ {P} × {F} × {Priv}
::= (user, host, app)
::= (cid:104)srcIP=n1, dstIP=n2,
::= CanDeny n | CanAllow n
proto=n3, srcPort=n4, dstPort=n5(cid:105)
A share gives principals some privileges to affect a set of ﬂows.
A triple consisting of an application, running on a host by a user.
A set of packets with shared properties: source and destination IP address,
transport protocol, and source and destination transport ports.
Share
Principal
Flow
Privilege
Message
Time Spec
Request
Priv
| CanReserve n | CanRateLimit n
| CanWaypoint {IP} | CanAvoid {IP}
The privileges to allow or deny trafﬁc for up to n seconds (optional).
The privileges to reserve bandwidth or set rate-limits, up to n MB.
The privileges to direct trafﬁc through or around particular IP addresses.
Msg ::= P : {F} : S → (Req Tspec | Hint Tspec | Query) A message from a principal with a request, hint, or query using a share.
Tspec ::= from t1 until t2
Req
::= Allow | Deny
An optional speciﬁcation from time t1 until t2.
Request to allow/deny trafﬁc.
Request to reserve n MB or rate-limit to n MB.
Waypoint/avoid trafﬁc through a middlebox with the given IP address.
Query the total trafﬁc between two hosts.
Hint that the ﬂow’s duration is t.
A requested modiﬁcation of network state.
A realized hint; it may be removed if it conﬂicts with a future request.
| Reserve n | RateLimit n
| Waypoint IP | Avoid IP
Query
Hint
Policy Atom Atom ::= P : {F} → Req Tspec
Query ::= TrafﬁcBetween srcIP dstIP | ...
Hint
::= Duration t | ...
| Hint P : {F} → Req Tspec
Table 1: Main concepts in PANE
width and sends a new request for a reservation to start at t; PANE
accepts the request and later implements it.
When creating sub-shares of shares with GMB privileges, the
sub-share’s token bucket must “ﬁt inside” the parent’s token bucket;
parents cannot provide more tokens to their children than they re-
ceive. However, a share’s tokens can be over-subscribed by its sub-
shares. Over-subscription with sub-shares allows a principal to del-
egate access to all available bandwidth in a share more ﬂexibly
than by delegating access directly. By creating sub-shares, PANE’s
extensible conﬂict resolution (§5) can mediate between the child
shares’ requests. To prevent over-allocation, PANE draws tokens
from all of its parent shares, up to the root of the tree when a re-
quest is granted.
Path Control A third request type directs ﬂows through or around
middleboxes using Waypoint and Avoid. For example, a univer-
sity’s network administrators can route students’ trafﬁc through a
packet shaper during business hours, and security researchers can
avoid intrusion detection systems for trafﬁc to be collected by hon-
eypots. Shares contain sets of IP addresses listing the middleboxes
which they can route through or avoid, and, as with ﬂowgroups,
sub-shares may only contain subsets of their parents’ sets. PANE
implements Waypoint and Avoid by installing ﬂow-speciﬁc for-
warding rules along a path determined by ﬁxing or deleting nodes
as appropriate when routing over the network graph (§6.1). Re-
quests to create unrealizable paths are rejected.
Rate-limits PANE can support rate-limit requests which result in
matching trafﬁc being routed through ports with established rate-
limiters, as available in current switches. While basic, such requests
can be used to mitigate DoS attacks or enforce trafﬁc contracts be-
tween tenants in a shared datacenter. PANE’s global view of the
network enables it to make best use of the switches’ features and
place rate-limiters close to the trafﬁc’s source, as we describe in
§6.1. Like PANE’s bandwidth reservations, rate-limits are currently
restricted to circuits; a network with distributed rate-limiters, such
as those proposed by Raghavan, et al. [39], could support more
general limits, and their use could be integrated into PANE as well.
3.2 Queries
PANE also supports messages to query the state of the network.
These queries may be for general information about the network,
such as the type of a link (e.g., copper or optical), the set of hosts
located downstream of a particular port, or other properties. Each
share may contain a list of properties which it is privileged to read.
This list is similar to a “view” on a database; when sub-shares are
created, this view may be further occluded. While these restrictions
provide basic privacy protection when exposing the network’s state,
they are not complete. For example, if a switch has three links, and
a principal has the privilege to read the sending and receiving rates
on two of the links, but not the third, it can infer the rate on the third
link. We leave a more complete development of privacy protections
as future work.
The current OpenFlow speciﬁcations and design make a number
of properties available which principals in PANE may query in-
cluding: the number (or list) of hosts behind a particular port, port-
speciﬁc diagnostic data such as the number of packets dropped, the
number of CRC errors, etc., the physical and topological location of
switches, and the access medium of links. In the future, we would
like to support additional details we believe would beneﬁt applica-
tions such as the current signal-to-noise ratio or broadcasting power
of wireless access points.
PANE also supports a “network weather service” which provides
coarse information about current trafﬁc conditions. For example,
statistics about the total trafﬁc over inter-switch links are available,
but not statistics about individual ﬂows. Support for collecting such
detailed statistics requires a more robust OpenFlow compiler (e.g.,
Frenetic’s [19]) than the one in PANE’s current implementation.
Applications can issue queries to the PANE controller to improve
the user experience. For example, Hadoop could use the weather
service to place reducers away from currently-congested parts of
the network, and streaming video players can determine that a wire-
less access point is attached to a cellular modem or similarly con-
strained backhaul as Shieh, et al. proposed [42].
3.3 Hints
The ﬁnal type of message in PANE is a hint. Hints are used
to provide the network with information which may improve the
application’s or network’s performance, without creating an addi-
tional requirement. Providing hints across abstraction boundaries is
a natural feature in other systems.
Three hints which are useful for networked applications include:
a ﬂow’s size in bytes, a desired ﬂow-completion deadline, and the
predictability of future trafﬁc. PANE can use ﬂow size informa-
tion to spread large ﬂows across multiple paths of equal-cost, as
in Mahout [12] or Hedera [1]. Deadlines can be communicated to
supporting routers such as those proposed in D3 [48]. Hints about
trafﬁc predictability can be used by optimizers such MicroTE [5].