using 8 pt Consolas font I was able to get about 3.6kB of data on a single page.  But, no matter 
how finely I scan the hex code, there are always errors in the OCR.  Some of these errors are 
simple transcription errors, such as "1" (one) being converted to "l" (lowercase L) or "5" being 
read as an "S".  This type of error is easy to filter out since a lowercase L and an S are not valid 
hexadecimal characters and can simply be considered a 1 or a 5 respectively when reading the 
hex data.  Other errors are a little more insidious, such as a "B" (the letter B) being read as an 
"8" (the number 8).  Both B and 8 are valid hex numbers so it isn't clear which one it should be 
at any given location in scanned hex text.  This error is also quite common, so I needed to find 
an easy way to filter it out.  In the end I replaced "B" with "#" and "D" with "?" in the printed 
text.  This eliminated a large number of transcription errors.  There are other errors such as 
added periods and added spaces that also needed to be addressed.  I also investigated using 
other encoding such as Base-64, but that encoding uses almost the entire range of printable 
characters as valid symbols.  Because of this it is impossible to identify a transcription error and 
the file cannot be recreated. 
But, no matter how much automatic correction I put in, something is bound to go wrong.  With 
the corrections discussed above--and some other ones visible in the Hex Magic code--I only 
had 1 error in 1210 lines of printed, scanned, and OCR'd hex text.  That was pretty good, but it 
was an error nonetheless.  To help detect these errors, Hex Magic generates a simple 2-byte 
XOR checksum for each line, and a 2-byte XOR checksum for the whole file.  I chose this as my 
checksum because I needed something compact that I could include with each line that wouldn't 
take up much space.  Also, the XOR function is built into VBA.   
As Hex Magic decodes scanned and converted hex text, it will highlight all rows where the XOR 
checksum fails.  For example: 
Figure 5: Checksum errors in Hex Magic 
At that point, the attacker has to locate the line of hex code in his original document, compare it 
to the converted hex text and correct the error manually.  This may seem daunting but by using 
"Ctrl-F" to find the offending XOR checksum in Adobe it's actually a straightforward and efficient 
solution.  When using this technique to deliver a 65K payload, I was able to get the file 
successfully decoded in under 10 minutes. 
An example of a full hex-encoded page of data can be seen at attachment 1.  
Hex Magic proved to be very reliable.  In fact it could be used to deliver payloads without the 
need for a scanner.  It may be very, very tedious to type in line after line of hex code, but it 
would work perfectly and leave almost no trace on the network.  However, it doesn't put enough 
data on each page.  3.6K per page is not very efficient.  A payload like PowerSploit would need 
232 pages of closely printed and scanned text to be delivered.  Mimikatz would need 150 
pages.  But my main goal was never to deliver a final payload with this method; I intended to 
use HexMagic to deliver an executable capable of encoding and decoding printable data at the 
pixel level.  I called this executable Sideload. 
Stage 3: The Big Bar Code and the Sideload DLL 
I wanted to pack as much data on to a single page of paper as possible and to do that I needed 
every scanned pixel to mean something useful.  After considering this problem for a little bit it 
didn't take me long to realize this is exactly what QR codes, data matrices, and other well-
known 2-D barcodes already do.  I played around with these for a little while to see just how 
much data I could squeeze on a single page using traditional 2-D barcodes and ended up with a 
number around 25 kB.  But, as I studied these bar codes, it was clear they were designed with a 
different problem set in mind. 
QR codes and their kin are designed to be read by cell phone cameras, or machine vision 
systems.  They are designed to be scanned at strange orientations, in poor lighting, with 
possible physical defacement.  Because they are designed for these circumstances, there is a 
lot of data area lost to error correction and orientation features.  I was in more control of how my 
bar codes would be read.  I was going to carefully put my bar codes on a high-quality scanner.  I 
could control the settings of this scanner to get the best possible image.  In short, I could expect 
far less error than a free-range 2-D bar code would expect.  So, I decided to design my own, full 
page bar code.   
I kept three main features of 2-D bar codes: bit-level encoding, timing lines, and Reed-Solomon 
forward error correction.  Bit-level encoding simply means that each pixel in the bar code 
represents a bit state.  A white pixel represents an "on" bit and a black pixel represents an "off" 
bit.  I laid my bytes out horizontally across the page, 8 pixels per byte, about 88 bytes per pixel 
line.  These pixel lines represent the "meat" of the bar code, the information the bar code is 
trying to get across.  Timing lines are extra lines in a known pattern built into a specific location 
of a 2-D bar code to help locate the "meat".  After some experimentation, I used lines of 
alternating light and dark pixels on all four sides of the "meat" of the bar code.  An example of 
what a completed, full-page Big Bar Code looks like can be seen at attachment 2.  Using the 
timing marks, I was able to locate and decode the meat in a scanned bar code with a very high 
level of success.  Typically I was able to decode the bar code with less than 1% error over about 
84 kB of encoded data on a scanned page.  You can see a heat map of a typical decode trial 
below. 
Figure 6: Big Bar Code error heat map 
Each black pixel represents a successfully decoded bit and the red pixels are missed bits.  The 
pattern shown is pretty typical. My main takeaway from all of my tests was that there will be 
errors and I need to be able to handle them. 
That's where Reed-Solomon Forward Error Correction (R-S FEC) comes in.  Almost all of the 
popular 2-D bar codes out there use R-S FEC to handle this exact situation.  Despite their 
widespread use, I struggled to find a working, open source R-S FEC C++ library.  The vast 
majority of the open source R-S libraries out there actually do Forward Erasure Correction and 
not Forward Error Correction.  Forward Erasure Correction is excellent if some of the data is lost 
during transmission but will not help if the data is present and mangled at the bit level, which is 
exactly what occurs when reading the Big Bar Code.  In the end I wrote my own R-S FEC C++ 
library with significant help from an excellent python-based tutorial located at: 
https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders 
 After I got all the pieces working, I put them together into a library called Sideload.  The 
Sideload library will take a file, encode it with R-S FEC, split it into one-page Big Bar Code 
chunks, and generate a bitmap for each page.  These bitmaps can be printed at 72 DPI to just 
about fill a 8.5 by 11 inch page from corner to corner.  Along the way the Sideload library will 
provide the exact file length and calculate the MD5 sum of the original source file. 
On the target system, the attacker scans the Big Bar Codes, points the Sideload library at the 
resulting image files, and provides the original file length and MD5 sum.  Sideload will pull the 
data from the images, decode the R-S FEC encoding, and test the resulting binary against the 
original MD5 sum.  If all goes well, you will have then transferred that arbitrary binary data from 
your source machine to your target machine without using magnetic media.  For my proof-of-
concept, I bundled the Sideload library into a DLL I could execute from VBA. 
The Out-of-Band Proof of Concept 
For my POC I wanted to deliver a portion of the PowerSploit tool set to a system without using 
magnetic media or downloading it from the network.  Here are the steps I took: 
1: Create PowerSploit payload zip file 
2: Encode payload with Sideload resulting in 3 Big Bar Code sheets to print 
3: Print out Hex Magic VBA code 
4: Create zip file from Sideload DLL and associated VBA use code 
5: Encode the DLL zip file with Hex Magic and print (made about 16 pages) 
6: Move to scanner on target system 
7: Scan the Hex Magic VBA code 
8: Scan the Hex Magic-encoded DLL zip file 
9: Scan the 3 Big Bar Codes 
10: Move to target computer 
11: Put Excel into "attack" mode 
12: Convert the Hex Magic VBA scan to text with Adobe OCR 
13: Paste the VBA script into Excel, fix as necessary 
14: Convert the encoded DLL zip file scan to text with Adobe OCR 
15: Load into Excel and decode with Hex Magic script, repairing text as required 
16: Unzip the DLL zip file, load the VBA use code into Excel 
17: Convert each BBC scan into a PNG using Adobe 
18: Set up Sideload VBA script with file names, original file length, and MD5 sum 
19: Run script to decode the Big Bar Codes and recover the payload 
20: Celebrate! 
In practice I was able to complete all of the steps of this POC to deliver about 162 kB of 
PowerSploit tools to my target machine in about 15 minutes.   
Preventing this Attack 
This file transfer vector is a bit difficult to stop since it is using standard office tools in a fairly 
standard manner, but it isn't impossible.  The most obvious indicator to look for is the Sideload 
DLL.  As a set code file, it will definitely have a signature that can be detected by anti-virus and 
other tools, assuming the attacker doesn't attempt to obfuscate the code or use other AV defeat 
methods.  You do have to be careful to not limit your scanning to just ".DLL" files.  As I stated 