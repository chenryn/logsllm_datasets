RQ1 Can PayBreak protect users from the threat of real-
world ransomware (i.e., can PayBreak restore (cid:12)les
encrypted by the malware)?
RQ2 Are malware family speci(cid:12)c modi(cid:12)cations necessary
to revert the encryption employed by diﬀerent ran-
somware families?
RQ3 What are the performance impacts caused by run-
ning PayBreak as a proactive online protection mech-
anism?
These questions are geared toward answering practicality
concerns of the proposed technique. RQ1 addresses whether
the technique is eﬀective. Clearly, a system that cannot
answer RQ1 in the aﬃrmative, would be of limited help
in the (cid:12)ght against ransomware. RQ2 explores the versa-
tility of the proposed system. Here a versatile approach
is preferable over a technique that requires continuous re-
(cid:12)nement to address the challenges of previously unknown
ransomware families. Finally, RQ3 addresses a practical de-
ployment question. Similar to popular anti-virus solutions,
we designed PayBreak as an online protection mechanism.
Thus, high performance impacts on common use-cases and
workloads would pose signi(cid:12)cant hurdles to the adoption of
such a mechanism in the (cid:12)eld.
5.1 Dataset
To test the functionality and eﬀectiveness of PayBreak,
we needed access to actively encrypting ransomware sam-
ples. To collect these samples, we developed the Real-time
Automation to Discover, Detect and Alert of Ransomware
(RADDAR) system. This project will be made open source
to help further research in ransomware. RADDAR crawls
various locations for malware samples. More precisely, we
obtained samples from VirusTotal Intelligence4 which pro-
vides advanced search features and download functionality
for malware samples. We searched for newly submitted sam-
ples (i.e. submitted within a week of analysis) that were also
(cid:13)agged by at least two anti-virus vendors, and whose labels
contained known ransomware de(cid:12)ned in [10]. Beyond these
popular ransomware family names, we also download sam-
ples for the generic search terms: ransom, crypt, or lock. In
addition to VirusTotal, we crawl various malware reposito-
ries including Malc0de5, and VXVault6 similar to the eﬀorts
presented in [33].
Once RADDAR discovers a malware sample, it detects
whether or not the malware sample is crypto-based ran-
somware and whether it is actively performing its malicious
duties. To this end, we leverage the Cuckoo Sandbox7 dy-
namic analysis framework where each sample is run for 20
4VirusTotal, https://www:virustotal:com
5Malc0de, http://malc0de:com/rss
6VXVault, http://vxvault:siri-urz:net/URL List:php
7Cuckoo Sandbox, https://cuckoosandbox:org/
minutes. We use Cuckoo to analyze and output a behav-
ior report of each sample by executing it in a monitored
Windows 7 virtual machine (VM) running in KVM8. Fur-
thermore, in addition to the default (cid:12)les found on a clean
Windows 7 installation, we placed typically ransomed (cid:12)le
types (PDFs, images, source code, and Word documents)
across various directories on the machine. Finally, we added
PayBreak to the VM which allowed us to perform the mea-
surements presented in this evaluation. We took a snapshot
of the (cid:12)le system, and refer to these (cid:12)les found on the system
prior to an infection as \honey (cid:12)les."
After a malware sample is analyzed by Cuckoo, RADDAR
performs an analysis on the Cuckoo results to generate a
report containing a variety of metrics including if the sample
is active, and if PayBreak extracted the keys used during
encryption. We consider a ransomware sample active if it:
(1) overwrites, or deletes and recreates at least one honey
(cid:12)le, and (2) the new (cid:12)le is identi(cid:12)ed as data by libmagic.
Note that libmagic successfully identi(cid:12)es the true content of
the honey (cid:12)les in their original state, thus if the type changes
to data the sample must have modi(cid:12)ed it.
To determine the ransomware’s family, we perform major-
ity voting of AV labels (i.e., following the same approach as
Kharraz, et al. [34]).
We let RADDAR run for 4 months to collect and generate
reports for 1,691 malware samples, 713 of which match ran-
somware labels used by AV companies. Figure 2 presents a
detailed breakdown of this analysis.
Consistent with previous malware research, many of the
samples in our dataset did not show any malicious function-
ality (i.e., they were inactive) for a variety of reasons. Thus,
we performed the following two step analysis. First, iden-
tify active samples, and second try to infer the reason why
inactive samples did not show any malicious behavior. As
previously discussed in x2, ransomware that uses hybrid en-
cryption securely must retrieve the public key pk from the
command and control infrastructure (C&C). Therefore, if
the malware does not produce any network traﬃc, it cannot
apply hybrid encryption securely. We classify a sample as
\No Network" if all observed TCP and UDP traﬃc exclu-
sively targets Windows aﬃliated domains, such as ones for
time keeping and updating.
Furthermore, we classify a sample as \Disabled C&C" if
either (1) all DNS queries (beyond those for the Microsoft
domains) return negative, or (2) all HTTP requests result
in a 404 status code. Of the inactive samples analyzed,
those reported as having a disabled C&C are all due to DNS
queries returning negative. However, we did not introspect
into HTTPS protected network traﬃc generated by the mal-
ware.
Finally, even if the C&C is operational and reachable, en-
vironment sensitive malware will refrain from executing if it
detects that it is run in a sandboxed environment. \Envi-
ronment" indicates that the malware may be analyzing its
environment to detect if it is running in a virtual environ-
ment such as KVM or VirtualBox. A sample is labelled
\Environment" if Cuckoo’s built-in detection identi(cid:12)es it as
such.
The reason for the inactivity of the remaining samples
could not be determined. Previous experience suggests, this
could be due to advanced environment (cid:12)ngerprinting, depen-
8KVM, http://www:linux-kvm:org/page/Main Page
Figure 2: Summary of analysis results. Sample count for
each category is in parentheses.
dency on user activity, or the use of logic (time) bombs that
delay execution beyond our 20 minute evaluation threshold.
In the end, we evaluated our system against 20 active ran-
somware families, the largest study of ransomware we are
aware of.
5.2 PayBreak Effectiveness
In this section we answer RQ1, can PayBreak revert
the encryption performed by real-world ransomware? And
RQ2, are malware family speci(cid:12)c modi(cid:12)cations necessary
to revert the encryption employed by diﬀerent ransomware
families?
PayBreak is able to recover ransomed (cid:12)les from all ran-
somware families with known encryption signatures. Our
results con(cid:12)rm that we are able to successfully hook into
the encryption functions of real-world ransomware samples
and extract session keys, and all materials necessary to be
used for (cid:12)le recovery.
More speci(cid:12)cally, PayBreak defeated 12 of the 20 active
ransomware families, 9 of which, according to our knowl-
edge, have not been previously defeated. We de(cid:12)ne a ran-
somware family as defeated if there exists a method or tech-
nique for which the ransomed (cid:12)les can be fully recovered.
PayBreak successfully recovers (cid:12)les encrypted by Cryp-
toWall, and Locky, two of the three economically most suc-
cessful ransomware families of 2016 [2]. CryptoWall alone
has netted more than $325 million in revenue [3].
A summary of the active ransomware families is shown in
Table 1. The number of active samples for a given family is
speci(cid:12)ed in the Samples column. For ransomware samples
that have previously been defeated, a corresponding refer-
ence is included in the column. We do not consider leaked
cryptographic keys (e.g., obtained from a con(cid:12)scated com-
mand and control server) as defeated due to this being spe-
ci(cid:12)c to a ransomware campaign, and does not imply a weak
implementation of the ransomware family. PayBreak has
demonstrated the ability to defeat ransomware using mul-
tiple cryptographic libraries including Microsoft CryptoAPI
and Crypto++. The cryptographic algorithms used for en-
cryption were extracted at runtime by PayBreak for sam-
ples that PayBreak defeats and are listed in the Algorithm
9Razy cryptographic information identi(cid:12)ed by Jakub
Kroustek, malware analyst at Avast.
Sheet2Page 1 No Network       (241)Disabled C&C          (75)Environment        (17)Other  (272)          Active (107) 20 FamiliesInactive   (606)Unknown     (978)    Ransomware (713) 52 Families1691SamplesFamilies
# Samples Previously Defeated by Defeated
Library
Algorithm
Almalocker
Cerber
Chimera
CryptoFortress
CryptoLocker
CryptoWall
CrypWall
GPcode
Locky
SamSam
Thor Locky
Tox
DXXD
MarsJokes
PokemonGo
Troldesh
VirLock
Androm
Razy
TeslaCrypt
1
14
1
2
33
7
4
2
7
4
1
9
2
1
1
5
4
2
3
4
Total
20
107
defeated
✓ [1]
✓ [4]
7
7
7
7
7
✓ [38]
7
7
7
7
✓ [5]
✓ [12]
✓ [9]
✓ [13]
✓ [15]
7
7
7
8
PayBreak
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
7
7
7
7
7
7
7
7
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
7
7
7
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
CryptoAPI
Crypto++
Unknown
Unknown
RSA+AES-128-CBC
RSA+RC4-256
RSA+AES-256-ECB
RSA+AES-256-ECB
RSA+AES-256-CBC
RSA+AES-256-CBC
RSA+AES-256-CBC
RSA+AES-256-ECB
RSA+AES-128-CTR
RSA+AES-128-CBC
RSA+AES-128-CTR
RSA+3DES-128-CBC
XOR with Constant Key [5]
ECC+AES-256-ECB [12]
.NET Crypto
AES with Constant Key [9]
Unknown
Unknown
Unknown
RSA+AES-256-CBC [13]
XOR with Constant Key [15]
RSA+AES-256-CBC [11]
.NET Crypto
AES-1289
Unknown
ECC+AES-256-CBC [16]
12
17
Table 1: Active Ransomware Samples
column. For undefeated samples, the column contains infor-
mation reported by other researchers, gathered to the best