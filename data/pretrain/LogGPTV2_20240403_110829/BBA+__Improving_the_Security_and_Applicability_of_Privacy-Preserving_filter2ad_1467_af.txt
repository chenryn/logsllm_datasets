, s′′
z := (t, u2)
dstag := (s, z )
x := (c′
if P2.Vfy(CRSpok, x, π ) = 0
, (дs1 , t, u2), hid)
return (⊥, ⊥, 0)
s′′ ← Zp
, d′′
(c′′
(s′′
) := C.Com(CRScom,
, v, 0, 0))
c∗ := c′ · c′′
σ ∗ = S.Sgn(sksig, c∗
)
s∗ := s′ + s′′ mod p
d∗ := d′ · d′′
w∗ := w + v
u∗
1 := u′
1
τ ∗ := (c∗
, u∗
1 )
if UVer(pkI, pkU, skU, τ ∗
, σ ∗
, d∗
, s∗
return (⊥, 0)
, 1)
else return(τ ∗
, w∗
) = 0
return (dstag, hid, 1)
Figure 11: Accumulation protocol
L(2)
pkI
defined by
(c′, (S, t, u2 ), hid)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
1, D′ ∈ G1;
∃ c, σ ∈ G2;
W , pkU , U1, D, S′, U ′
skU , u1, r ∈ Zp :
E.Enc(pkT , pkU ; r ) = hid
C.Open(CRScom, (S, W , pkU , U1 ), c, D ) = 1
C.Open(CRScom, (S′, W , pkU , U ′
1 ), c′, D′) = 1
S.Vfy(pksig, σ, c ) = 1
pkU = дskU
, U1 = дu1
1 , t = skU u2 + u1
1
(8)
Upon receiving c′, s, t, π, and hid, AC checks the proof π and
updates c′ by adding s′′ to s′ and v to w resulting in commitment
c∗. The commitment is signed and c∗ along with the accumulator’s
half of the decommitment value d′′ and the corresponding signature
σ∗ are sent to the user who verifies them.
10Note that proving a statement ∃skU ∈ Zp : pkU = дskU
as we can only extract дskU
from the proof.
1
1
instead would not help
Claiming a balance and redeeming points. The Vfy protocol
works the same way as the Accum protocol except that the balance
w is not treated as a secret anymore. That means the balance (or
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1936more precisely W := дw1 ) is not a witness but part of the statement
x in the language L(3)
pkI
defined by
1, D′ ∈ G1;
(c′, (S, t, u2 ), hid, W )
∃ c, σ ∈ G2;
pkU , U1, D, S′, U ′
skU , u1, r ∈ Zp :
E.Enc(pkT , pkU ; r ) = hid
C.Open(CRScom, (S, W , pkU , U1 ), c, D ) = 1
C.Open(CRScom, (S′, W , pkU , U ′
1 ), c′, D′) = 1
S.Vfy(pksig, σ, c ) = 1
pkU = дskU
, U1 = дu1
for which U generates a proof using P3.
1 , t = skU u2 + u1
1
(9)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Double-spending detection. The IdentDS and VerifyGuilt al-
gorithms are given in Fig. 10. To see why IdentDS is working,
observe the following: Firstly, to use a specific token τ in an Accum
or Vfy protocol run, a (potentially malicious) user is forced to reveal
the fixed token version number s, because s is bound to τ by being
contained in the signed commitment c. The proof π asserts that
this is indeed the case even if c and σ are not revealed explicitly.
Secondly, for a specific token τ the commitment c and the proof
π also enforce that the fixed user secret key skU and the fixed
randomness u1 of the double-spending tag as well as a freshly cho-
sen challenge value u2 are always used in a Accum or Vfy protocol
run to calculate t = skUu2 + u1. Hence, double-spending a token
reveals the same token version number s1 = s2 and involve different
challenges u2 (cid:44) u′
2 with overwhelming probability. In this case, we
can easily extract skU given t = skUu2 + u1 and t′ = skUu′
2 + u1.
The proof of guilt Π is simply set to be skU, which is assumed to
be hard to compute given pkU only.11
5 SECURITY AND PRIVACY THEOREMS
The following theorems state that the instantiation described in
the previous section fulfills the security and privacy definitions
given in Sections 3.3 and 3.4, provided that all the building blocks
are secure. For a formal definition of our building blocks and their
properties as well as complete proofs of Theorems 5.1 to 5.7, we
refer the reader to the full version of our paper [22]. In the following
we only formally state the theorems and point out the main proof
ideas.
5.1 System Security
Theorem 5.1 (Trapdoor-Linkability). If BBAP and E are cor-
rect, and P2 and P3 are perfectly sound, then BBAP is trapdoor-
linkable.
Recall that trapdoor-linkability demands completeness and ex-
tractability. The completeness property is satisfied since the sound-
ness of P2 (P3) ensures that any hid which is the output of AC (V)
is a proper encryption of some valid public key pkU. As BBAP is
correct, an honest user holding pkU could have created a token
and afterwards used this token which resulted in the hidden user ID
hid (assuming appropriate encryption randomness). Extractability
is satisfied, provided that E is correct, since for an honest user, hid
will always be the encryption of his public key pkU.
11Of course, we need to show that honest protocol runs do not reveal significant
information about skU .
Theorem 5.2 (Owner-Binding wrt. Issue). If the Co-CDH as-
gp -extractable, then BBAP is
sumption holds and P1 is perfectly F (1)
owner-binding with respect to Issue.
skU
The extractability property of P1 asserts that д
2
can be ex-
tracted from the proof given during the protocol. This value is a
skU
solution to the Co-CDH instance д1, д2, д
1
= pkU.
Theorem 5.3 (Owner-Binding wrt. Accum and Vfy). If P1, P2,
P3 are perfectly F (1)
gp -extractable, respectively, C is
F ′
gp-binding, S is EUF-CMA secure, and E is correct, then BBAP is
owner-binding with respect to Accum and Vfy.
gp -, and F (3)
gp -, F (2)
Consider the first call to MalAcc or MalVer that fulfills the win-
ning condition of the experiment. The soundness of the NIZKs, the
F ′
gp-binding of C and the correctness of E ensure that the public
key pkU extracted from the corresponding NIZK proof and the key
pk′
U extracted by ExtractUID from the corresponding hid token
are well-defined and identical. Now, distinguish two cases with
respect to the commitment c (which fixes pkU) extracted from
the proof: a) either c is a fresh commitment or b) it is a replayed
commitment from a previous protocol invocation. Case a) is an im-
mediate violation of the EUF-CMA security of the signature scheme,
as only signed commitments can lead to acceptable protocol exe-
cutions. Case b) implies that the adversary was able to equivocate
F ′
gp-binding property of the commitment (after exploitation of the
soundness of the NIZKs).
an old commitment from some(cid:76)pkU to pkU. This contradicts the
Theorem 5.4 (Double-Spending Detection). If P1, P2, P3 are
gp -extractable, respectively, C is additively
gp-binding, S is EUF-CMA secure, and E is correct,
perfectly F (1)
gp -, F (2)
homomorphic and F ′
then BBAP ensures double-spending detection.
gp -, and F (3)
The proof considers each of the three possible winning condi-
tions separately. The last winning condition can be immediately
ruled out by our protocol definition.
If the first winning condition holds, there are two double-spen-
ding tags with the same token version number s but different user
public keys pk(1)U and pk(2)U . Consider the commitments c1 and c2
that can be extracted from the proofs sent by the adversary in
each of the corresponding protocol executions. If c1 = c2 holds,
this violates the F ′
gp-binding property of C as the adversary is able
to equivoke the same commitment to two different user IDs. If
c1 (cid:44) c2 holds, two sub-cases needs to be considered. If at least
one of the commitments is a fresh commitment, this immediately
contradicts the EUF-CMA security of S by the same argument as in
Theorem 5.3. If both commitments are replayed commitments of
former protocol invocations, they are already associated to some
version numbers s1 and s2, respectively. As version numbers are
uniformly drawn from Zp in each protocol invocation, si = s only
holds with negligible probability. (Here, the Blum-like coin tossing
requires the homomorphism of C.) Hence, the adversary is able to
equivoke the commitments to the winning version number s which
again contradicts the F ′
If the second winning condition holds, ExtractUID extracts pk(1)U
= pk(2)U from the protocol invocations but IdentDS returns a differ-
ent value (or ⊥) given dstag1 = (s, (t, u2)) and dstag2 = (s, (t′, u′
2)).
gp-binding property.
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1937From the extractability of the NIZKs and the correctness of E, it fol-
lows that t and t′ have been computed using the same skU. Hence,
considering IdentDS, either u2 = u′
1. The first case only
occurs with negligible probability. The second case implies that
that either both corresponding commitments (fixing u1 and u′
1) are
equal or not. Thus, again either the F ′
gp-binding property of C is
violated or the EUF-CMA security of S.
2 or u1 (cid:44) u′
Theorem 5.5 (Balance-Binding). If P1, P2, P3 are perfectly
gp -, F (2)
F (1)
gp-binding, S is
EUF-CMA secure, and E is correct, then BBAP is balance-binding.
gp -extractable, respectively, C is F ′
gp -, and F (3)
The proof proceeds in a sequence of game hops from the real
game to a modified game where the adversary always loses by
definition of the game. We show that if any two consecutive games
would significantly differ, this results in adversaries against the
security of the building blocks. The high-level idea is to augment
each game by additional sanity checks between the adversary’s in-
dividual oracle calls to MalIssue, MalAcc or MalVer. These checks
transform the original game into one which asserts that (1) an
adversary cannot make the experiment miscount the balance as-
sociated with user ID pkU and (2) an adversary cannot overclaim
or underclaim this computed balance. The technical challenge is
to properly formalize these sanity checks. To this end, a directed
graph is introduced, where a path links the individual protocol
executions that belong to the same user. The checks assert that the
adversary cannot deviate from the correct balance along each path.
5.2 User Security and Privacy
Theorem 5.6. If P1, P2, P3 are composable zero-knowledge, C is
equivocable and E is IND-CPA secure, then BBAP is privacy-preserving.
This proof proceeds in a sequence of game hops that gradually
transform the real game into the ideal game in which no privacy
infringement can occur as all message are independent of user-
specific data. The game hops are as follows: a) replace the honest
CRS by a CRS that allows simulation of NIZK proofs and equivoca-
tion of commitments, b) replace all proofs by simulated proofs, c)
replace commitments by fake commitments, d) choose a random
value instead of an honest double-spending tag, e) replace the hid
0
by an encryption of д
1. The complete proof has to deal with two
technical subtleties: a) The subroutine UVer needs to be re-defined
properly. If the commitments are replaced by fake commitments the
unmodified version always fails and thus an honest party playing
the user aborts. However, the check cannot just be skipped entirely
as otherwise the adversary could just send garbage, check if the
user aborts and thus easily distinguish between real and ideal. b)
The experiment needs to keep track of all interactions such that it
can come up with a correct balance upon corruption. To this end,
the oracles need some sort of shared state.
Theorem 5.7. If BBAP is privacy-preserving and the calculation
of discrete logarithms in G1 is a computationally hard problem, then
BBAP ensures false accusation protection.
The oracles which the adversary is allowed to use are a subset
of the oracles of the privacy game. Assume there is an efficient
adversary that wins the false-accusation game with non-negligible
probability. Replace all oracles by their ideal counterparts using the
Table 1: User execution times for our instantiation
Algorithm Execution Time Data Sent Data Received
[Bytes]
320