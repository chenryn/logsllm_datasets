### Optimized Text

#### 1. Introduction to Transitions and Web Services
Transitions are directed arcs that express dependencies between web services. The predicate `transition/3` is used to represent these transitions, where:
- The first argument indicates the probability \( p \) of the transition being fired at runtime.
- The second argument indicates the source web service.
- The third argument represents the target web service.

For example:
- `transition(1, start_service, fill_loan_request).`
- `transition(0.4, check_loan_type, check_home_loan).`
- `transition(0.3, check_loan_type, check_car_loan).`

The QoS (Quality of Service) of web services \( t_a \) and \( t_b \) remains unchanged. To compute the QoS of the reduction, the formulae in Table I are applied.

#### 2. QoS Model and Process Elements
The QoS model addresses non-functional issues of processes and can be characterized along three dimensions: time, cost, and reliability. The elements used to capture the execution logic in processes include XOR-splits, AND-splits, XOR-joins, and AND-joins. These elements are represented with the predicates `xorsplit/1`, `xorjoin/1`, `andsplit/1`, and `andjoin/1`, respectively.

From our example, the following facts hold:
- `xorsplit(check_loan_type).`
- `xorjoin(archive_application).`

**Table I: Reduction Formulae to Compute QoS**
- \( T(t_{1n}) = \max_{i \in \{1..n\}} \{T(t_i)\} \)
- \( C(t_{1n}) = \sum_{i=1}^{n} C(t_i) \)
- \( R(t_{1n}) = \prod_{i=1}^{n} R(t_i) \)

**Table II: Example of QoS Specification for a Web Service "Fill Form"**
- **Time**: Min value = 192, Avg value = 196, Max value = 199
- **Cost**: Min value = 576, Avg value = 576, Max value = 576
- **Reliability**: Min value = 0%, Avg value = 100%, Max value = 0%

The QoS model for the "Fill Form" web service is translated into the following first-order logic statement:
```prolog
qos(fill_form, time(192, 196, 199), cost(576, 576, 576), reliability(0, 1, 0)).
```

#### 3. SWR Algorithm: The Adaptive Version
One of the major requirements for the development of an adaptive algorithm is its ability to dynamically accept new patterns and compute the QoS of processes with previously unseen control flow structures. Predicate logic is chosen to achieve five major goals:
- Formally describe the structure of a process.
- Define reduction rules.
- Identify patterns.
- Compute the QoS model.
- Reduce patterns.

Each of these goals is discussed and illustrated in the following sections.

##### 3.1 Process Structure Specification
To represent a web process, each component of the process schema needs to be translated into a suitable presentation in predicate logic. The basic components of a process include:
- Web services: `webservice/1`
- Start service: `start/1`
- End service: `end/1`
- Transitions: `transition/3`
- XOR-splits: `xorsplit/1`
- XOR-joins: `xorjoin/1`
- AND-splits: `andsplit/1`
- AND-joins: `andjoin/1`

Examples from the web process in Fig. 1:
- `webservice(fill_loan_request).`
- `webservice(check_loan_type).`
- `webservice(check_home_loan).`

##### 3.2 Rule Definition
The following code illustrates the main steps involved when applying any reduction rule. Each rule consists of three main segments:
- Pattern identification.
- QoS computation.
- Pattern reduction.

For a sequential reduction rule, the segments are as follows:
```prolog
applySequentialRule(SrcWebservice) :-
    isaSequentialStructure(SrcWebservice, DstWebservice),
    computeQoSSequentialSystem(SrcWebservice, DstWebservice, QoSModel),
    reduceSequentialSystem(SrcWebservice, DstWebservice, QoSModel).
```

##### 3.3 Pattern Identification
All patterns that compose a process language must be translated into first-order logic form. For the SWR algorithm, six patterns have been translated. Due to space limitations, we will only describe the sequential pattern reduction rule. The first step is to identify if a particular process pattern exists in a process.

Example of sequential pattern identification:
```prolog
isaSequentialStructure(SrcWebservice, DstWebservice) :-
    \+ network(SrcWebservice),
    \+ network(DstWebservice),
    \+ xorsplit(SrcWebservice),
    \+ xorjoin(SrcWebservice),
    \+ andsplit(SrcWebservice),
    \+ andjoin(SrcWebservice),
    \+ xorsplit(DstWebservice),
    \+ xorjoin(DstWebservice),
    \+ andsplit(DstWebservice),
    \+ andjoin(DstWebservice),
    \+ start(SrcWebservice),
    \+ end(DstWebservice),
    getNextWebservices(SrcWebservice, NextWebservices),
    length(NextWebservices, 1),
    member(DstWebservice, NextWebservices),
    getPrevWebservices(DstWebservice, PrevWebservices),
    length(PrevWebservices, 1),
    member(SrcWebservice, PrevWebservices).
```

##### 3.4 QoS Model Computation
When it has been determined that a set of web services form a specific pattern, the QoS of the pattern can be computed. For example, if two web services constitute a sequential system, the QoS of the sequential system is computed as follows:
```prolog
computeQoSSequentialSystem(SrcWebservice, DstWebservice, NewQoSModel) :-
    qos(SrcWebservice, _Ts, _Cs, _Rs),
    qos(DstWebservice, _Td, _Cd, _Rd),
    addQoSmodels(qos(SrcWebservice, _Ts, _Cs, _Rs), qos(DstWebservice, _Td, _Cd, _Rd), NewQoSModel).
```

##### 3.5 Pattern Reduction
Once the QoS of a pattern has been computed, the pattern needs to be replaced with an equivalent pattern from the QoS point of view. This replacement is illustrated in Fig. II, where pattern (a) can be replaced with pattern (b) after calculating the QoS [2].

In our running example, the reduction of such a system involves:
- Removing existing transitions (a).
- Removing web services (c, d).
- Removing QoS models (e, f).
- Updating transitions (h).
- Adding a new web service and its QoS model (g, i).

These actions are illustrated in the following segment of code:
```prolog
reduceSequentialSystem(SrcWebservice, DstWebservice, QoSModel) :-
    retract(transition(_p, SrcWebservice, DstWebservice)),
    QoSModel = qos(NewWebservice, _, _, _),
    retract(webservice(SrcWebservice)),
    retract(webservice(DstWebservice)),
    retract(qos(SrcWebservice, _, _, _)),
    retract(qos(DstWebservice, _, _, _)),
    assert(webservice(NewWebservice)),
    updateTransitions(SrcWebservice, DstWebservice, NewWebservice),
    assert(QoSModel).
```

#### 4. Adding and Removing Patterns
To add new rule definitions to compute the QoS of previously unknown workflow patterns, it is only necessary to implement the five main elements described in the previous sections. Once these elements have been implemented, they can be dynamically introduced into the algorithm without requiring any other changes. To remove a pattern that is no longer supported by a process language, it is only necessary to retract the rules definition of the pattern.

#### 5. Conclusions
Developing a suitable algorithm to compute the Quality of Service (QoS) of web processes designed using several process languages is a challenging task. This is because some patterns are specific to particular languages, and a few patterns may have been introduced after implementing the algorithm. In this paper, we present an adaptive algorithm implemented using a first-order logic programming language. The algorithm can cope with various known process patterns and new ones as they are deployed. The algorithm is called adaptive since it can be dynamically changed as the patterns of a process language also change.

#### References
[1] Sheth, A.P., W.v.d. Aalst, and I.B. Arpinar, Processes Driving the Networked Economy. IEEE Concurrency, 1999. 7(3): p. 18-31.
[2] Cardoso, J., et al., Quality of service for workflows and web service processes. Web Semantics: Science, Services and Agents on the World Wide Web Journal, 2004. 1(3): p. 281-308.
[3] Aalst, W.M.P.v.d., et al. Advanced Workflow Patterns. 7th IFCIS International Conference on Cooperative Information Systems. 2000.
[4] Miller, J.A., J.S. Cardoso, and G. Silver. Using Simulation to Facilitate Effective Workflow Adaptation. in Proceedings of the 35th Annual Simulation Symposium (ANSS'02). 2002. San Diego, California.
[5] Cardoso, J., Stochastic Workflow Reduction Algorithm. 2002, LSDIS Lab, Department of Computer Science, University of Georgia.
[6] Kochut, K.J., METEOR Model version 3. 1999, Large Scale Distributed Information Systems Lab, Department of Computer Science, University of Georgia: Athens, GA.
[7] Aalst, W.M.P.v.d., et al., Workflow Patterns. 2000, Eindhoven University of Technology: Eindhoven.
[8] Cardoso, J., A. Sheth, and J. Miller. Workflow Quality of Service. in International Conference on Enterprise Integration and Modeling Technology and International Enterprise Modeling Conference (ICEIMT/IEMCâ€™02). 2002. Valencia, Spain: Kluwer Publishers.