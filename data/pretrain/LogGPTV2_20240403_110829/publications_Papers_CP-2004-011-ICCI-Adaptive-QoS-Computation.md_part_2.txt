a 1n b
incoming transitions of t and the outgoing transition of Web
a start(start_service).
services t b remain the same. The only outgoing transitions end(end_service).
from Web service t and the only incoming transitions from
a
Transitions. Transitions are directed arcs that express
Web service t are the ones shown in the figure below.
b
dependencies between Web services. For transitions the
predicate is . The first argument indicated the
transition/3
t1
probability p of the transition being fired at runtime, the
second argument indicates the Web service source and the last
* *
ta t2 tb ta t1n tb
argument represents the Web service target. For example,
tn transition( 1, startservice, fill_loan_request).
transition(0.4, check_loan_type, check_home_loan).
(a) (b)
transition(0.3, check_loan_type, check_car_loan).
FIGURE II. Parallel system reduction
XOR-splits, AND-splits, XOR-joins, AND-joins. These
The QoS of Web services t and t remain unchanged. To
a b elements are used to capture the execution logic in processes
compute the QoS of the reduction the formulae in Table I are
and are represented with the predicates ,
xorsplit/1
applied.
, , and , respectively.
xorjoin/1 andsplit/1 andjoin/1
From our example the following facts hold,
TABLE I
REDUCTION FORMULAE TO COMPUTE QOS
xorsplit(check_loan_type).
T(t 1n)=Max i∈{1..n}{T(t i)} C(t 1n)= 1≤∑ i≤.nC(t i) R(t 1n)= 1∏ ≤i≤.nR(t i) x orjoin(archive_application).
QoS model. Process QoS addresses the non-functional
issues of processes and can be characterized along various
The SWR algorithm has been coded in Java and can be
dimensions. The QoS model employed in this paper is
found in [5].
composed of three dimensions: time, cost, and reliability. A
B. SWR algorithm: The adaptive version complete description of the model can be found in [2].
One of the major requirements for the development of an
adaptive algorithm is its ability to dynamically accept new TABLE II
patterns and compute the QoS of processes with previously EXAMPLE OF QOS SPECIFICATION FOR A WEB SERVICE FILL FORM [2]
Min value Avg value Max value
unseen control flow structures.
Time 192 196 199
One solution to develop such an algorithm is to use Cost 576 576 576
predicate logic. We choose predicate logic to achieve five Reliability - 100% -
major goals: a) formally describe the structure of a process, b)
reduction rules definition, c) pattern identification, d) QoS The basic class of the QoS model of the Fill Form Web
model computation, and e) pattern reduction. Each of these service from Table II is translated to the following first order
goal are discussed and illustrated in the following sections. logic statement:
1) Process structure specification qos(fillform, time(192,196,199), cost(576,576,576),
reliability(0,1,0)).
To represent a Web process, such as the one in Fig. 1, each
of the components of the process schema need to be translated 2) Rule Definition
to a suitable presentation in predicate logic. We give details The following section of code illustrates the main steps
about the facts that describe a process schema and the QoS involved when applying any reduction rule. Each rule is
model associated with each Web service. We represent in composed of three main segments: a) pattern identification, b)
predicate logic the following basic components of a process: QoS computation and c) pattern reduction. For a sequential
Web services, start service, end service, transitions, XOR- reduction rule the segments are the following:
splits, XOR-joins, AND-splits, and AND-join.
Web service. We use the predicate to applySequentialRule(SrcWebservice) :-
webservice/1 a) isaSequentialStructure(SrcWebservice,
represent a Web service. The following examples are extracted
DstWebservice),
from the Web process illustrated in Fig. 1. b) computeQoSSequentialSystem(SrcWebservice,
DstWebservice, QoSModel),
c) reduceSequentialSystem(SrcWebservice,
webservice( fill_loan_request ). DstWebservice, QoSModel).
webservice( check_loan_type ).
webservice( check_home_loan ). Each segment is discussed individually in the next sections.
3
Cardoso, J. Adaptive Algorithm to Predict the QoS of Web Processes and Workflows. In International Conference on
Computational Intelligence (ICCI 2004), pages 490-493, Istanbul, Turkey, ISBN: 975-98458-1-4, 2004.
3) Pattern Identification reduceSequentialSystem(SrcWebservice, DstWebservice,
All the patterns that compose a process language must be QoSModel) :-
a) retract(transition( _p, SrcWebservice,
translated into a first order logic form. We have translated the DstWebservice)),
six patterns for which a reduction rule has been developed for b) QoSModel = qos(NewWebservice,_,_,_),
c) retract(webservice(SrcWebservice)),
the SWR algorithm.
d) retract(webservice(DstWebservice)),
Due to space limitation, we will only describe the sequential e) retract(qos(SrcWebservice, _,_,_)),
f) retract(qos(DstWebservice, _,_,_)),
pattern reduction rule. The first step is to identify if a
g) assert(webservice(NewWebservice)),
particular process pattern exists in a process. Each individual h) updateTransitions(SrcWebservice,
DstWebservice, NewWebservice),
pattern is recognized based on the intrinsic characteristic of the
i) assert(QoSModel).
patterns themselves.
C. Adding and removing pattern
isaSequentialStructure(SrcWebservice, DstWebservice) :- In order to add new rule definitions to compute of the QoS
\+ network(SrcWebservice),
\+ network(DstWebservice), of previously unknown workflow patterns, it is only necessary
\+ xorsplit(SrcWebservice),
\+ xorjoin(SrcWebservice), Check if the Web to implement the five main elements described in the previous
\+ andsplit(SrcWebservice), services involved
\+ andjoin(SrcWebservice), are not networks, sections. Once these elements have been implemented they can
\+ xorsplit(DstWebservice), splits or joins, and
\+ xorjoin(DstWebservice), start or end services. be dynamically introduced into the algorithm without requiring
\+ andsplit(DstWebservice),
\+ andjoin(DstWebservice), any other changes. To remove a pattern that is no longer
\+ start(SrcWebservice),
supported by a process language is simple since it is only
\+ end(DstWebservice),
Check if the Web necessary to retract the rules definition of the pattern.
getNextWebservices(SrcWebservice, NextWebservices), service source has
length(NextWebservices, 1), only one outgoing
member(DstWebservice, NextWebservices), transition
IV. CONCLUSIONS
getPrevWebservices(DstWebservice, PrevWebservice), Check if the next
length(PrevWebservices, 1), Web service has Developing a suitable algorithm to compute the Quality of
member(SrcWebservice, PrevWebservices). only one incoming
transition Service of Web processes designed using several process
languages is a difficult task. This is because some patterns are
4) QoS Model Computation specific to particular languages and a few patterns may have
When it has been determined that a set of Web services been introduced after implementing the algorithm.
form a specific pattern, the computation of its QoS can be In this paper we show an adaptive algorithm implemented
evaluated. For example, if two Web services constitute a using a first order logic programming language. The algorithm
sequential system, then the QoS of the sequential system is is able to cope with various known process patterns and new
computed the following way. ones as they are deployed. The algorithm is called adaptive
since it can be dynamically changed as the patterns of a
computeQoSSequentialSystem(SrcWebservice, process language also change.
DstWebservice, NewQoSModel) :-
a)qos(SrcWebservice, _Ts, _Cs, _Rs),
b)qos(DstWebservice, _Td, _Cd, _Rd), REFERENCES
c)addQoSmodels(qos(SrcWebservice, _Ts, _Cs, _Rs),
qos(DstWebservice, _Td, _Cd, _Rd), NewQoSModel). [1] Sheth, A.P., W.v.d. Aalst, and I.B. Arpinar, Processes Driving the
Networked Economy. IEEE Concurrency, 1999. 7(3): p. 18-31.
In line a) and b) the QoS model of each Web services is [2] Cardoso, J., et al., Quality of service for workflows and web service
processes. Web Semantics: Science, Services and Agents on the World
obtained and in line c) the two QoS models are added resulting
Wide Web Journal, 2004. 1(3): p. 281-308.
a new QoS model. While we do not give specific details on the [3] Aalst, W.M.P.v.d., et al. Advanced Workflow Patterns. 7th IFCIS
computation of QoS models, the reader may refer to [2] to find International Conference on Cooperative Information Systems. 2000.
[4] Miller, J.A., J.S. Cardoso, and G. Silver. Using Simulation to Facilitate
additional information.
Effective Workflow Adaptation. in Proceedings of the 35th Annual
Simulation Symposium (ANSS'02). 2002. San Diego, California.
5) Pattern Reduction [5] Cardoso, J., Stochastic Workflow Reduction Algorithm. 2002, LSDIS
Lab, Department of Computer Science, University of Georgia.
Once the QoS of a pattern has been computed, the pattern
[6] Kochut, K.J., METEOR Model version 3. 1999, Large Scale Distributed
needs to be replaced with an equivalent pattern from the QoS
Information Systems Lab, Department of Computer Science, University
point of view. This replacement is illustrated in Fig. II, where of Georgia: Athens, GA.
the pattern a) can be replaced with pattern b) after calculating [7] Aalst, W.M.P.v.d., et al., Workflow Patterns. 2000, Eindhoven
University of Technology: Eindhoven.
the QoS [2].
[8] Cardoso, J., A. Sheth, and J. Miller. Workflow Quality of Service. in
In our running example, the reduction of such a system International Conference on Enterprise Integration and Modeling
involves removing existing transitions (a), Web services (c,d), Technology and International Enterprise Modeling Conference
(ICEIMT/IEMC’02). 2002. Valencia, Spain: Kluwer Publishers.
and QoS models (e,f). The reduction also involves, updating
transitions (h) and adding a new Web service and its QoS
model (g,i). These actions are illustrated in the following
segment of code.
4