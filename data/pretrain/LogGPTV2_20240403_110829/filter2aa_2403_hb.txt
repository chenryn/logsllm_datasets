安装 MSVS 之后，你可以在库文件里找到上述函数的源代码。确切的文件位置是 VC/crt/src/intel/*.asm。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附
附录
录 FF    速
速    查
查    表
表  
F.1  IDA 
常用的 IDA 的快捷键如下表所示。 
按    键 
作    用 
空格 
切换显示方式 
C 
转换为代码 
D 
转换为数据 
A 
转换为字符 
* 
转换为数组 
U 
未定义 
O 
提取操作数的偏移量 
H 
把立即数转换为 10 进制数 
R 
把立即数转换为字符 
B 
把立即数转换为 2 进制数 
Q 
把立即数转换为 16 进制数 
N 
为标签重命名 
？ 
计算器 
G 
跳转到地址 
: 
添加注释 
Ctrl-X 
查看当前函数、标签、变量的参考（显示栈） 
X 
查看当前函数、标签、变量的参考 
Alt-I 
搜索常量 constant 
Ctrl-I 
再次搜索常量 
Alt-B 
搜索 byte 序列 
Ctrl-B 
再次搜索 byte 序列 
Alt-T 
搜索文本（包括指令中的文本） 
Ctrl-T 
再次搜索该文本 
Alt-P 
编辑当前函数 
Enter 
跳转到函数、变量等对象 
Esc 
返回 
Num − 
收缩（函数代码或区域代码） 
Num + 
展开 
如果您明白函数的具体作用，就可以使用 IDA 的“收缩”功能把函数的代码隐藏起来。笔者编写的 IDA
脚本程序（https://github.com/yurichev/IDA_scripts）可自动隐藏经常使用的内联代码。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 F  速  查  表 
939 
F.2  OllyDbg 
OllyDbg 常用的快捷键如下表所示。 
快  捷  键 
作    用 
F7 
单步步入/单步调试 
F8 
单步步过 
F9 
执行至断点处 
Ctrl－F2 
重新启动程序 
F.3  MSVC 选项 
本书常用的 MSVC 选项如下表所示。 
选    项 
作    用 
/O1 
创建尺寸最小的文件 
/Ob0 
禁止内联展开 
/Ox 
启用最大优化 
/GS- 
禁用安全检查（缓冲区溢出） 
/Fa(file) 
创建汇编文件（设置文件名） 
/Zi 
生成完整的调试信息 
/Zp(n) 
使封装结构体向 n 字节边界对齐 
/MD 
令可执行程序使用 MSVCR*.DLL 
有关 MSVC 的详细介绍，请参见本书的 55.1 节。 
F.4  GCC 
本书用到的 GCC 选项如下表所示。 
选    项 
作    用 
-Os 
优化目标文件大小 
-O3 
打开所有-O2 的优化选项 
-regparm= 
设定传递参数的寄存器的数量 
-o file 
指定输出的文件名 
-g 
产生带有调试信息的目标代码 
-S 
仅编译到汇编指令，不进行汇编和链接 
-masm=intel 
汇编指令采用 intel 语体 
-fno-inline 
禁止内联函数 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
940 
逆向工程权威指南（下册） 
F.5  GDB 
本书用到的 GDB 指令如下表所示。 
选    项 
作    用 
break filename.c:number  
在源程序第 n 行处设置断点 
break function 
在函数入口处设置断点 
break *address 
在某地址设置断点 
b 
同 break 
p variable 
显示变量的值 
run 
运行 
r 
同 run 
cont 
继续运行 
c 
（同上） 
bt 
打印当前栈的所有信息 
set disassembly-flavor intel 
设置为 intel 语体 
disas 
查看当前函数程序的汇编指令 
disas function 
查看函数的汇编指令 
disas function,+50 
disas $eip,+0x10 
查看函数的部分汇编指令 
disas/r 
查看接下来的几条指令 
info registers 
查看 opcode 
info float 
显示 CPU 各寄存器的值 
info locals 
显示 FPU 各寄存器的值 
x/w ... 
列出全部的局部变量（如果能识别出来） 
x/w $rdi 
读取内存，并显示为 word 型数据 
x/10w ... 
从 RDI 指定的地址读取数据，显示为 word 
x/s ... 
读取并显示 10 个 word 型数据 
x/i ... 
读取内存并显示为字符串 
x/10c ... 
读取内存并显示为汇编代码 
x/b ... 
读取内存，并显示 10 个字符 
x/h ... 
读取内存，并显示为 byte 
x/g ... 
读取并显示 16 位 halfword 型数据 
finish 
读取并显示 giant words（64 位） 
next 
执行到函数退出位置 
step 
单条语句执行指令，（不步入函数） 
set step-mode on 
单步步入的跟踪调试指令 
frame n 
打开 step-mode 模式 
info break 
切换栈帧 
del n 
查看断点 
set args ... 
删除断点 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附
附录
录 G
G    练
练习
习题
题答
答案
案  
G.1  各章练习 
第 3 章 
题目 1 
对应章节：3.7.1 节 
MessageBeep (0xFFFFFFFF);  // A simple beep. If the sound card is not available, the sound is  
     generated using the speaker. 
题目 2 
对应章节：3.7.2 节 
#include  
int main() 
{ 
        sleep(2); 
}; 
第 5 章 
题目 1 
对应章节：5.5.1 节 
如果未启用 MSVC 的优化编译功能，程序显示的数字分别是 EBP 的值、RA 和 argc。在命令行中执行
相应的程序即可进行验证。 
如果启用了 MSVC 的优化编译功能，程序显示的数字分别来自：返回地址 RA、argc 和数组 argv［］。 
GCC 会给 main() 函数的入口分配 16 字节的地址空间，所以输出内容会有不同。 
题目 2 
对应章节：5.5.2 节 
这些都是打印 UNIX 时间的程序，其源代码如下所示： 
#include  
int main() 
{ 
         sleep(2);  
}; 
第 7 章 
题目 1 
对应章节：7.4.1 节 
Linux 下的 GCC 将所有文本字符串信息放置到.rodata 数据段，它是显式只读的（“只读的数据”）： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
942 
逆向工程权威指南（下册） 
$ objdump –s 1 
... 
Contents of section .rodata: 
 400600 01000200 52657375 6c743a20 25730a00  ....Result: %s.. 
 400610 48656c6c 6f2c2077 6f726c64 210a00     Hello, world!.. 
第 13 章 
题目 1 
对应章节：13.5.1 节 
提示：函数 printf() 只会被调用 1 次。 
第 14 章 
题目 3 
对应章节：14.4.3 节 
#include  
int main() 
{ 
         printf ("%d\n", i); 
}; 
题目 4 
对应章节：14.4.4 节 
#include  
int main() 
{ 
         int i; 
         for (i=1; i 
int main() 
{ 
         int i; 
         for (i=100; i>0; i--) 
                  printf ("%d\n", i); 
}; 
第 16 章 
题目 1 
对应章节：16.3.1 节 
#include  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 G  练习题答案 
943 
int main() 
{ 
         int i; 
         for (i=1; i<100; i=i+3) 
                   printf ("%d\n", i); 
}; 
第 17 章 
题目 2 
对应章节：17.10.2 节 
计算 5 个双精度浮点数的平均值，源代码如下： 
int f(char *s) 
{ 
          int rt=0; 
          for (;*s;s++) 
          { 
                   if (*s==' ') 
                             rt++; 
          }; 
          return rt; 
}; 
第 18 章 
题目 1 
对应章节：18.9.1 节 
两个 100x200 矩阵的双精度加法运算程序，其源代码如下： 
#define M    100 
#define N    200 