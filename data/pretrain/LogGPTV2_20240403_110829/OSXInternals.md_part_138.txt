// look up the IOService object (must already be registered)
service = IOServiceGetMatchingService(kIOMasterPortDefault, classToMatch);
if (!service)
return KERN_FAILURE;
// create a connection to the IOService object
kr = IOServiceOpen(service, // the IOService object
mach_task_self(), // the task requesting the connection
0, // type of connection
&dataPort); // connection handle
IOObjectRelease(service);
return kr;
}
Note that for this section's technique to work on a particular model of an SMS-equipped Apple computer,
the I/O Service class name, the user client method index, and the sizes of the input/output parameters must
be appropriate for the SMS driver being used on that computer.
Given a connection handle to the IOService instance, we can invoke the getOrientationUC() method as
shown in Figure 1029.
Figure 1029. Invoking a user client method given an IOService connection handle
static const int getOrientationUC_methodID = 21;
kern_return_t
sms_getOrientation(MotionSensorData_t *data)
{
kern_return_t kr;
IOByteCount size = 60;
MotionSensorData_t unused_struct_in = { 0 };
kr = IOConnectMethodStructureIStructureO(dataPort,
getOrientationUC_methodID,
size,
&size,
&unused_struct_in,
data);
return kr;
}
Note that the orientation data received from the SMS driver can be used to map the physical tilting of the
computer to mouse or keyboard input events. Such mapping can be readily used for purposes such as human
input for games, multidirectional scrolling, and panning across large maps.
10.7.6. Listing PCI Devices
Since the I/O Registry maintains information about all devices in the system, it is rather straightforward to
look up specific devices and their properties based on a variety of search criteria. Figure 1030 shows a
program that lists all PCI devices in the system, along with the path of each device in the Service plane.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 50 of 79
Figure 1030. Listing PCI devices in the system
// lspci.c
#include 
#include 
int
main(void)
{
kern_return_t kr;
io_iterator_t pciDeviceList;
io_service_t pciDevice;
io_name_t deviceName;
io_string_t devicePath;
// get an iterator for all PCI devices
if (IOServiceGetMatchingServices(kIOMasterPortDefault,
IOServiceMatching("IOPCIDevice"),
&pciDeviceList) != KERN_SUCCESS)
return 1;
while ((pciDevice = IOIteratorNext(pciDeviceList))) {
kr = IORegistryEntryGetName(pciDevice, deviceName);
if (kr != KERN_SUCCESS)
goto next;
kr = IORegistryEntryGetPath(pciDevice, kIOServicePlane, devicePath);
if (kr != KERN_SUCCESS)
goto next;
// don't print the plane name prefix in the device path
printf("%s (%s)\n", &devicePath[9], deviceName);
next:
IOObjectRelease(pciDevice);
}
return kr;
}
$ gcc -Wall -o lspci lspci.c -framework IOKit -framework CoreFoundation
$ ./lspci # PowerPC
:/MacRISC4PE/pci@0,f0000000/AppleMacRiscAGP/ATY,WhelkParent@10 (ATY,WhelkParent)
:/MacRISC4PE/ht@0,f2000000/AppleMacRiscHT/pci@1 (pci)
...
:/MacRISC4PE/ht@0,f2000000/AppleMacRiscHT/pci@4/IOPCI2PCIBridge/usb@B,2 (usb)
:/MacRISC4PE/ht@0,f2000000/AppleMacRiscHT/pci@5 (pci)
:/MacRISC4PE/ht@0,f2000000/AppleMacRiscHT/pci@5/IOPCI2PCIBridge/ata-6@D (ata-6)
...
$ ./lspci # x86
:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/GFX0@2 (GFX0)
:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/HDEF@1B (HDEF)
...
10.7.7. Retrieving the Computer's Serial Number and Model Information
The program shown in Figure 1031 communicates with the I/O Registry to retrieve the computer's serial
number and model information, both of which are maintained as properties of the I/O Registry entry
corresponding to the Platform Expert.
Figure 1031. Retrieving the computer's serial number and model information
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 51 of 79
// lsunitinfo.c
#include 
#include 
int
main(void)
{
kern_return_t kr;
io_service_t pexpert;
CFStringRef serial, model;
// get the Platform Expert object
pexpert = IOServiceGetMatchingService(kIOMasterPortDefault,
IOServiceMatching("IOPlatformExpertDevice"));
if (!pexpert)
return KERN_FAILURE;
serial = IORegistryEntryCreateCFProperty(
pexpert, CFSTR(kIOPlatformSerialNumberKey),
kCFAllocatorDefault,kNilOptions);
if (serial) {
// note that this will go to stderr
CFShow(serial);
CFRelease(serial);
}
model = IORegistryEntryCreateCFProperty(
pexpert, CFSTR("model"), kCFAllocatorDefault, kNilOptions);
if (model) {
printf("%s\n", CFDataGetBytePtr((CFDataRef)model));
CFRelease(model);
}
if (pexpert)
IOObjectRelease(pexpert);
return kr;
}
$ gcc -Wall -o lsunitinfo lsunitinfo.c -framework IOKit -framework CoreFoundation
$ ./lsunitinfo
G84XXXXXXPS
PowerMac7,3
10.7.8. Retrieving Temperature Sensor Readings
As power and thermal management have become integral parts of computer system design, it is common to
find several types of hardware sensors in a modern computer system. Depending on the model, an Apple
computer may contain temperature sensors, voltage and current sensors, fan speed sensors, and so on. In
certain types of systems, such as MacRISC4-based systems, the concept of a platform plug-in is used along
with the Platform Expert. Whereas the Platform Expert is specific to system architecture, a platform plug-in
is specific to a particular platform, which depends on the motherboard and usually changes more frequently
than system architecture. In particular, the plug-in usually performs thermal management, which includes
monitoring the various sensors and, based on their values, controlling processor and fan speeds. The
available platform plug-ins reside within the AppleMacRISC4PE kernel extension bundle.
$ cd /System/Library/Extensions/AppleMacRISC4PE.kext/Contents/PlugIns
$ ls
IOPlatformPluginFamily.kext PowerMac12_1_ThermalProfile.kext
MacRISC4_PlatformPlugin.kext PowerMac7_2_PlatformPlugin.kext
PBG4_PlatformPlugin.kext PowerMac8_1_ThermalProfile.kext
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 52 of 79
PBG4_ThermalProfile.kext PowerMac9_1_ThermalProfile.kext
PowerMac11_2_PlatformPlugin.kext RackMac3_1_PlatformPlugin.kext
PowerMac11_2_ThermalProfile.kext SMU_Neo2_PlatformPlugin.kext
PowerMac12_1_PlatformPlugin.kext
If a system uses a platform plug-in, the properties (including current values) of all hardware sensors in the
system are available in the I/O Registry as the IOHWSensors property of the system-specific platform plug-
in class, which inherits from IOPlatformPlugin. A sensor is abstracted in the platform plug-in by an
instance of the IOPlatformSensor class. Each hardware sensor's driver is an IOHWSensor object.
We can retrieve the readings of temperature sensors in a system either by looking up the IOHWSensors
property of the platform plug-in (if there is one) or by looking up each IOHWSensor object whose type is
temperature. The latter approach is more generic because it will work even if a system has no platform
plug-in. Figure 1032 shows a program that uses this approach to display the locations and values of
temperature sensors in a system.
Figure 1032. Retrieving temperature sensor readings
// lstemperature.c
#include 
#include 
#include 
#define kIOPPluginCurrentValueKey "current-value" // current measured value
#define kIOPPluginLocationKey "location" // readable description
#define kIOPPluginTypeKey "type" // sensor/control type
#define kIOPPluginTypeTempSensor "temperature" // desired type value
// macro to convert sensor temperature format (16.16) to integer (Celsius)
#define SENSOR_TEMP_FMT_C(x)(double)((x) >> 16)
// macro to convert sensor temperature format (16.16) to integer (Fahrenheit)
#define SENSOR_TEMP_FMT_F(x) \
(double)((((double)((x) >> 16) * (double)9) / (double)5) + (double)32)
void
printTemperatureSensor(const void *sensorDict, CFStringEncoding encoding)
{
SInt32 currentValue;
CFNumberRef sensorValue;
CFStringRef sensorType, sensorLocation;
if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)sensorDict,
CFSTR(kIOPPluginTypeKey),
(void *)&sensorType))
return;
if (CFStringCompare(sensorType, CFSTR(kIOPPluginTypeTempSensor), 0) !=
kCFCompareEqualTo) // we handle only temperature sensors
return;
sensorLocation = CFDictionaryGetValue((CFDictionaryRef)sensorDict,
CFSTR(kIOPPluginLocationKey));
sensorValue = CFDictionaryGetValue((CFDictionaryRef)sensorDict,
CFSTR(kIOPPluginCurrentValueKey));
(void)CFNumberGetValue(sensorValue, kCFNumberSInt32Type,
(void *)&currentValue);
printf("%24s %7.1f C %9.1f F\n",
// see documentation for CFStringGetCStringPtr() caveat
CFStringGetCStringPtr(sensorLocation, encoding),
SENSOR_TEMP_FMT_C(currentValue),
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 53 of 79
SENSOR_TEMP_FMT_F(currentValue));
}
int
main(void)
{
kern_return_t kr;
io_iterator_t io_hw_sensors;
io_service_t io_hw_sensor;
CFMutableDictionaryRef sensor_properties;
CFStringEncoding systemEncoding = CFStringGetSystemEncoding();
kr = IOServiceGetMatchingServices(kIOMasterPortDefault,
IOServiceNameMatching("IOHWSensor"), &io_hw_sensors);
while ((io_hw_sensor = IOIteratorNext(io_hw_sensors))) {
kr = IORegistryEntryCreateCFProperties(io_hw_sensor, &sensor_properties,
kCFAllocatorDefault, kNilOptions);
if (kr == KERN_SUCCESS)
printTemperatureSensor(sensor_properties, systemEncoding);
CFRelease(sensor_properties);
IOObjectRelease(io_hw_sensor);
}
IOObjectRelease(io_hw_sensors);
exit(kr);
}
$ gcc -Wall -o lstemperature -framework IOKit \
-framework CoreFoundation
$ sudo hwprefs machine_type # Power Mac G5 Dual 2.5 GHz
PowerMac7,3
$ ./lstemperature
DRIVE BAY 25.0 C 77.0 F
BACKSIDE 44.0 C 111.2 F
U3 HEATSINK 68.0 C 154.4 F
CPU A AD7417 AMB 49.0 C 120.2 F
CPU B AD7417 AMB 47.0 C 116.6 F
$ sudo hwprefs machine_type # Xserve G5 Dual 2.0 GHz
RackMac3,1
$ ./lstemperature
SYS CTRLR AMBIENT 35.0 C 95.0 F
SYS CTRLR INTERNAL 47.0 C 116.6 F
CPU A AD7417 AMB 28.0 C 82.4 F
CPU B AD7417 AMB 27.0 C 80.6 F
PCI SLOTS 26.0 C 78.8 F
CPU A INLET 19.0 C 66.2 F
CPU B INLET 20.0 C 68.0 F
The IOHWControls property of the platform plug-in contains, among other things, the current RPM readings
of the fans in the system. The same information can also be obtained from the control-info property of the
AppleFCU class instance, which represents a fan control unit. The fan control unit driver publishes control-
info as an array containing data on all controls it is responsible for.
10.7.9. Retrieving MAC Addresses of Ethernet Interfaces
Figure 1033 shows a program that retrieves the MAC addresses of all Ethernet interfaces in the system. It
iterates over the list of all instances of the IOEthernetInterface class, whose parent classan instance of
IOEthernetControllercontains the MAC address as one of its properties (kIOMACAddress, which is
defined as IOMACAddress). Note that an IOEthernetInterface instance contains various other interesting
aspects of the network interface, such as its BSD name, information about active packet filters, and several
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 54 of 79
types of statistics.
Figure 1033. Retrieving the MAC addresses of Ethernet interfaces in the system
// lsmacaddr.c
#include 
#include 
#include 
#include 
typedef UInt8 MACAddress_t[kIOEthernetAddressSize];
void
printMACAddress(MACAddress_t MACAddress)
{
int i;
for (i = 0; i < kIOEthernetAddressSize - 1; i++)
printf("%02x:", MACAddress[i]);
printf("%x\n", MACAddress[i]);
}
int
main(void)
{
kern_return_t kr;
CFMutableDictionaryRef classToMatch;
io_iterator_t ethernet_interfaces;
io_object_t ethernet_interface, ethernet_controller;
CFTypeRef MACAddressAsCFData;
classToMatch = IOServiceMatching(kIOEthernetInterfaceClass);
kr = IOServiceGetMatchingServices(kIOMasterPortDefault, classToMatch,
&ethernet_interfaces);
if (kr != KERN_SUCCESS)
return kr;
while ((ethernet_interface = IOIteratorNext(ethernet_interfaces))) {
kr = IORegistryEntryGetParentEntry(ethernet_interface, kIOServicePlane,
&ethernet_controller);
if (kr != KERN_SUCCESS)
goto next;
MACAddressAsCFData = IORegistryEntryCreateCFProperty(
ethernet_controller,
CFSTR(kIOMACAddress),
kCFAllocatorDefault, 0);
if (MACAddressAsCFData) {
MACAddress_t address;
CFDataGetBytes(MACAddressAsCFData,
CFRangeMake(0, kIOEthernetAddressSize), address);
CFRelease(MACAddressAsCFData);
printMACAddress(address);
}
IOObjectRelease(ethernet_controller);
next:
IOObjectRelease(ethernet_interface);
}
IOObjectRelease(ethernet_interfaces);