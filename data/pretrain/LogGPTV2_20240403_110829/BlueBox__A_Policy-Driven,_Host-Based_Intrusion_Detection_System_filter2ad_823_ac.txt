eight threads generating requests for the server. These were
so chosen such that the resulting load does not saturate the
server with or without BlueBox. The load generated by
the clients is entirely static content. Testing under dynamic
content would result in a larger penalty due to the overhead
of loading rules for each script that is invoked. Both the
Initial
Root
State
Initial
Root
State
user authentication
Nonzero
user id
reroot for bind
after bind
Reroot
State
Figure 4. State diagram of the wu–ftp daemon
user authentication
Nonzero
user id
reroot for bind
after bind
Reroot
State
.
Link to libraries
Open sockets
Read /etc/passwd
Setuid to user
etc.
Access user files
setuid to root
etc.
Only system calls
- Bind
- Socket
- Setuid(back to
    user).
Figure 5. Subset of the state–dependent rules for the ftp daemon.
webstone client and the Apache server were put on a gi-
gabit ethernet to ensure that no effect due to large network
latencies were observed in the results.
6.2 Test Results
Figure 6 shows the performance of the Apache 2.0 web-
server performing with and without BlueBox under vari-
% perfor-
ous server load factors. We anticipate a
mance penalty for the Apache 2.0 server running on the
Linux 2.2.14 kernel.
6.3 Bottlenecks
The main performance bottlenecks in enforcing the sys-
tem call checks for the Apache server is pathname resolu-
tion. For each request, the Apache server opens a ﬁle and
then uses sendﬁle to send it over the socket. For each re-
quest, we performa full name resolutionoperationto match
the right ﬁle name with a node on the tree of ﬁle system
object rules to eliminate security holes. This can be addi-
tionally optimized by caching and marking certain names
as fully resolved. Another way to reduce this overhead of
name resolution is to have mandatory access control type
labels [DoD85, SEL] on ﬁle system objects and move the
check entirely to the ﬁle system i.e.
the ﬁle system will
check the labels for permission before it opens the ﬁle.
The results shown in Figure 6 were generated entirely
using static content. Dynamic content requires the server
to load another process and thus load the rules for this new
process which adds to the performance penalty. This can
be somewhat mitigated by caching the data structures rep-
resenting rules for frequently used cgi–bin scripts. We are
in the process of implementing this in the BlueBox imple-
mentation on Linux.
Using these optimizations, we expect that the perfor-
mance penalty for the Apache daemon will be close to 5%.
We believe that this penalty is not excessive given the se-
curity guarantees one can obtain using this system.
7 Conclusion
We have presented Blue Box, a simple system for sand-
boxing applications which can substantially mitigate secu-
rity exposures of processes. We believe that our system is
a simple and comprehensive way to incorporate checks on
the execution of programs at the time of invocation of sys-
tem calls. We have described rules for important servers
such as the Apache daemon, and a number of popular cgi–
bin scripts; these rules can be used as templates across in-
stallations with new rules written for the individual scripts.
Our rule syntax and semantics are simple and yet quite ef-
fective in catching a large number of known attacks. Since
Performance comparison under WebStone 2.5 load
Apache2.0 on Linux 2.2
Apaceh2.0 on Linux 2.2 + IDS
1000
c
e
s
/
s
n
o
i
t
c
e
n
o
o
C
950
900
850
800
750
700
55
60
65
75
70
CPU utilization
80
85
90
95
Figure 6. Performance of the Apache 2.0 with and without system call checks
performance has been a motivating factor in our design, we
have achieved our security guarantees with minimal impact
on the performance.
On a much larger scale, we believe that much more ef-
fective security can be achieved by integrating the attack
signature based systems, statistical proﬁle based systems
and the sandboxing systems such as the one described in
this paper. Depicted in Figure 7, the signature based ap-
proach detects attacks from the outside, the statistical pro-
ﬁle approach detects anomaly inside, and the sandboxing
approach stops attacks on the boundary.
8 Acknowledgements
This work has beneﬁted substantially from discussions
with a large number of people.
In particular, we would
like to acknowledge the contributions of Pankaj Rohatgi,
Josyula R. Rao, David Saffordand Douglas Schales of IBM
Research, and Herv´e Debar who was at IBM Zurich Re-
search Lab.
References
[ALJ 93] Debra Anderson, Teresa F. Lunt, Harold
Javitz, Ann Tamaru, and Alfonso Valdes.
SAFEGUARD FINAL REPORT: Detecting
Unusual Program Behavior Using the NIDES
Statistical Component.
Technical report,
Computer Science Laboratory, SRI Interna-
tional, Menlo Park, California, USA, Decem-
ber 1993.
[Atk95]
Randall Atkinson. Security Architecture for
the Internet Protocol. Internet RFC 1825, Au-
gust 1995.
[BGM00] M. Bernaschi, E. Gabrielli, and L. Mancini.
for
Enhancements
Blocking Buffer Overﬂow Based Attacks,
http://www.iac.rm.cnr.it/
newweb/tecno/papers/bufoverp,
August 2000.
to the Linux Kenel
[CDE 96] Mark Crosbie, Bryn Dole, Todd Ellis, Ivan
Krsul, and Eugene Spafford.
IDIOT Users
Guide. Technical Report CSD-TR-96-050,
COAST Laboratory, Dept. of Computer Sci-
ences, Purdue University, September 1996.
Tim Dierks and Christopher Allen. The TLS
draft-ietf-tls-
Protocol Version 1.0.
protocol-02.txt
IETF
, March 1997.
[DA97]
[DDNW98] Herv´e Debar, Marc Dacier, Mehdi Nassehi,
and Andreas Wespi.
Fixed vs. Variable–
Length Patterns for Detecting Suspicious Pro-
cess Behavior, Research Report, No. RZ3012,
IBM Research Division, Zurich Research
Lab, April 1998.
[DDW99] Herv´e Debar, Marc Dacier, and Andreas We-
spi. Towars a taxonomy of intrusion detection
systems. Computer Networks, 31, 1999.
US
Trusted
tion
Defense
Evalua-
5200.28-STD,
Department
Computer
Criteria,
[DoD85]
System
of
DOD
Integrated Defense System
attack signature detection
sandboxing
anomaly detection
Figure 7. Integrated Defense
[FBF99]
[FHSL96]
[FKK96]
[Jac99]
[JS00]
http://www.radium.ncsc.mil/
tpep/library/rainbow/
index.html, December 1985.
Timothy Fraser, Lee Badger, and Mark Feld-
man. Hardening COTS software with generic
software wrappers.
In Proceedings of the
IEEE Symposium on Security and Privacy,
1999.
Stephanie Forrest, Steven A. Hofmeyr, Anil
Somayaji, and Thomas A. Longstaff. A Sense
of Self for UNIX Processes. In IEEE Sympo-
sium on Security and Privacy, 1996.
Alan O. Freier, Philip Karlton, and Paul C.
Kocher. The SSL Protocol Version 3.0. IETF
draft-ietf-tls-ssl-version3-00.txt
, Novem-
ber 1996.
Kathleen A. Jackson.
INTRUSION DE-
TECTION SYSTEM (IDS) Product Review,
IBM internal conﬁdential document,IBM Re-
search Division, Zurich Research Lab, April
1999.
K. Jain and R. Sekar. User-Level Infrastruc-
ture for System Call Interposition: A Platform
for Intrusion Detection and Conﬁnement. In
Proceedings of the Network and Distributed
Systems Security Symposium, February 2000.
[JV94]
[JVM01]
Hal Javitz and Alfonso Valdes. The NIDES
statistical component description and justiﬁ-
cation. Technical report, Computer Science
Laboratory, SRI International, Menlo Park,
California, USA, March 1994.
The
Virtual
http://www.javasoft.com, 2001.
Machine,
Java
[KFBK00] Calvin Ko, Timothy Fraser, Lee Badger, and
Douglas Kilpatrick. Detecting and Counter-
ing System Intrusions Using Software Wrap-
pers. In Proceedings of the 9th USENIX Se-
curity Symposium, August 2000.
[MBKQ96] Marshall Kirk McKusick, Keith Bostic,
Michael J. Karles, and John S. Quarterman.
The Design and Implementation of the 4.4
BSD Operating System, pages 67, 540. Addi-
son Wesley, New York City, New York, USA,
1996.
Van Paxson. Bro: A System for Detecting
Network Intruders in Real–Time. In the 7th
USENIX Security Symposium, 1998.
Thomas H. Ptacek and Timothy N. New-
sham. Insertion, Evasion, and Denial of Ser-
vices: Eluding Network Intrusion Detection,
http://www.nai.com, January 1998.
[Pax98]
[PN98]
[SEL]
[SU99]
[RLS 97] Marcus J. Ranum, Kent Landﬁeld, Mike Sto-
larchuk, Mark Sienkiewicz, Andrew Lameth,
and Eric Wall.
Implementing a Generalized
Tool for Network Monitoring.
In the 11th
USENIX Systems Administrator Conference,
1997.
Security–EnhancedLinux.Available online at
http://www.nsa.gov/selinux/.
R. Sekar and P. Uppuluri. Synthesizing Fast
Intrusion Detection Systems from High-Level
Speciﬁcations.
In the 8th USENIX Security
Symposium, pages 63–78, August 1999.
´Ulfar Erlingsson and Fred B. Schneider. IRM
enforcementof Java stack inspection. In IEEE
Symposium on Security and Privacy, 2000.
David A. Wagner. Janus: an approachfor con-
ﬁnement of untrusted applications. Technical
Report CSD–99–1056, University of Califor-
nia at Berkeley, August 1999.
[UES00]
[Wag99]
[WEB01] WebSphere
V4.0
Handbook.
Edition
http://www.redbooks.ibm.com/
redpieces/pdfs/sg246176.pdf,
November 2001.
Online
Advanced
at
[WUF]
[WSB 96] Kenneth M. Walker, Daniel F. Sterne, M. Lee
Badger, Michael J. Petkac, David L. Sher-
mann, and Karen A. Oostendrop. Conﬁning
Root Programs with Domain and Type En-
forcement. In the 6th USENIX Security Sym-
posium, July 1996.
the
to
Source
overﬂow
Online
wu–ftpd.
http://oliver.efri.hr/ crv/
security/bugs/mUNIXes/
wuftpd15.html.
Huagang Xie
Biondi.
Philippe
The Linux Intrusion Detection Project,
http://www.lids.org, 2001.
code
in
heap
at
[XB01]
exploit
and
Appendix
A Harmless System Calls
Each of these system calls either has no security impli-
cations or is not supported by the Linux 2.2.14 kernel.
afs syscall
alarm
break
brk
capget
chdir
fchdir
fdatasync
fstat
fstat64
fstatfs
fsync
ftime
get kernel syms
getcwd
getdents
getegid
geteuid
getgid
getgroups
getitimer
getpgid
getpgrp
getpid
getppid
getpriority
getresgid
getresuid
getrlimit
getrusage
getsid
gettimeofday
getuid
gtty
lock
lstat
lstat64
mpx
msync
nanosleep
newselect
oldfstat
oldlstat
oldolduname
olduname
poll
prof
query module
readlink
sched get priority max
sched get priority min
sched getparam
sched getscheduler
sched rr get interval
sched yield
setitimer
sgetmask
stat
stat64
statfs
stty
sysfs
sysinfo
syslog
time
times
uname
ustat
vfork
vhangup
vm86
wait4
Table 2. Harmless System Calls