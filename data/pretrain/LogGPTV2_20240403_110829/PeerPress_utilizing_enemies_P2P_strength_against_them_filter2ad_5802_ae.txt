### Exploration of MCB Paths

Both exploration schemes still rely on random choice, as they cannot accurately define the target function they aim to explore. Our objective is to explore the Most Critical Behavior (MCB) paths, thereby accelerating the exploration process and significantly reducing overhead. Additionally, our approach, called ICE, addresses the challenge of exploring sub-paths along an already explored MCB main path, which differs from the problems tackled by previous work.

### Protocol Reverse Engineering

Automatic protocol reverse engineering (PRE) research [17, 20, 23, 24] aims to uncover the semantic meanings of network protocols. However, these studies have primarily focused on legitimate network protocols, where eliciting a response from the application is straightforward using a valid client request. In contrast, we do not know the format of a valid request, and a key aspect of our work is to efficiently locate MCB execution paths that determine the format of probe packets needed to elicit responses. 

Moreover, PRE systems attempt to reverse engineer entire packet formats and state machines, which is suitable for legitimate applications but may be too fragile when applied to malicious binary code. Our technique, on the other hand, focuses specifically on extracting inputs that trigger responses, making it more robust. We also introduce the concept of dynamic portprints, which is not considered in PRE systems. Better protocol knowledge can indeed help in crafting better MCB packets and verifying or filtering false positives, making PRE techniques complementary to our work.

### Network-based (P2P) Malware Detection

Network-based detection approaches [22, 29, 31, 33, 34, 41, 43] aim to inspect network traffic to detect anomalous activities, patterns, or structures. For example, Gu et al. [30] introduced BotProbe, which actively sends probing packets through IRC channels to differentiate botnet Command and Control (C&C) dialogs from human conversations. PeerPress, however, accurately extracts MCBs from malware binaries to probe them, offering a more precise and effective solution.

### Code Reuse

Previous work [16, 36, 37] has used forward taint analysis and backward program slicing to extract relevant instructions as standalone programs. Our portprint extraction employs similar techniques but is tailored to solve a specific problem. Unlike [16], PeerPress extracts virtual functions at the whole program level rather than the single function level, and the method of reusing or replaying the code differs. Compared to [36, 37], PeerPress uses backward taint analysis because, in our context, the sinkholing point (the port binding event) is clear, but the source points are unknown.

### Limitations and Discussion

PeerPress has several limitations. It cannot craft correct MCB probing packets in cases involving advanced encryption or certificate-based authentication, even though it can identify and bypass these routines. This is a common challenge for malware analysis tools that need to provide meaningful network input to malware samples [18]. Malware could use this to verify or authenticate incorrect probing packets and refuse to respond. However, even in such worst-case scenarios, the "no response" can be a recognizable, suspicious response useful for MCB probing. Additionally, our technique can still successfully extract portprints, which often suffice to detect or confirm the presence of malware without sending MCB probing content.

Malware authors might delay port binding until certain conditions are met, such as a specific date, to evade portprint extraction. This reduces the utility of the malware but prevents immediate discovery. This issue can be mitigated by skipping sleep-related functions during monitoring and analysis.

To slow down the analysis of ICE, malware authors might include many bogus branches after packet reception. Even then, ICE remains faster than random path explorations.

Another evasion tactic is to mimic benign protocol behavior. While this increases the workload for malware authors, subtle differences from normal protocols can still be detected if not implemented faithfully [14, 19]. If malware authors copy code from existing open-source software to avoid implementation differences, code replication can become another detection point [52].

Within its detection scope, PeerPress is fast, reliable, robust, and scalable. It complements existing passive detection techniques, even if it is not perfect, like any intrusion or malware detection technique.

### Conclusion

P2P malware represents an important future direction for malware. Current P2P malware detection methods are insufficient. In this paper, we propose a novel, two-phase detection framework that integrates host-level dynamic binary analysis and network-level informed active probing. This framework can detect P2P malware and other types of malware with MCBs. We developed new techniques like ICE to address our research challenges and implemented a prototype system, PeerPress, to demonstrate real-world utility. Initial results are encouraging, and PeerPress represents a significant step toward proactive malware detection and defense, a direction that warrants more attention from the security research community.

### Acknowledgments

This work was supported in part by the National Science Foundation under Grant CNS-0954096 and the Texas Higher Education Coordinating Board under NHARP Grant no. 01909. The opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation and the Texas Higher Education Coordinating Board.

### References

[References listed as provided, with minor formatting adjustments for clarity]

---

This revised text aims to be more coherent, professional, and easier to understand while maintaining the original content and intent.