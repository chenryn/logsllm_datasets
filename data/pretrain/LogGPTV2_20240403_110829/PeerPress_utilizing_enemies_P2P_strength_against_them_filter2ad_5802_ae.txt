tion paths. However, both exploration schemes still depend
on random choice because they cannot correctly deﬁne what
is the target function they want to explore. Our goal is to
explore the MCB paths, so the exploration can be eﬀectively
accelerated and the overhead is signiﬁcantly reduced. Mean-
while, ICE solves the problem of exploring the sub-paths
along one explored MCB main path, which is diﬀerent from
the problem solved by previous work.
Protocol Reverse Engineering. Automatic protocol re-
verse engineering (PRE) research [17,20,23,24] discovers the
semantic meanings of network protocols. However, these
studies were mostly focused on analyzing legitimate net-
work protocols. In such cases, it is easy to elicit a response
from the application, simply by using a legitimate client that
sends a valid request. We do not know how a valid request
looks like; in fact, one key aspect of our work is to eﬃciently
locate MCB execution paths, which determine the format of
probe packets that can be used to obtain responses. More-
over, PRE systems are broader in the sense that they at-
tempt to reverse engineer entire packet formats and state
machines. This is ﬁne for legitimate applications, but might
be too brittle when applied to malicious binary code. Our
technique, on the other hand, focuses on a speciﬁc problem
(the extraction of inputs that trigger responses), and hence,
can be more robust. In addition, we introduce the idea of
dynamic portprints, a concept that is not considered by PRE
systems. Finally, we note that better protocol knowledge is
certainly helpful in both crafting better MCB packets and
verifying/ﬁltering false positive cases, as mentioned before.
Thus, we consider these PRE techniques to be complemen-
tary to our work.
Network-based (P2P) malware detection. Network-
590based detection approaches [22, 29, 31, 33, 34, 41, 43] attempt
to inspect network traﬃc to detect some anomalous activi-
ties, patterns, or structures. Their weaknesses were already
discussed earlier. In [30], Gu et al. present BotProbe that
actively sends probing packs through IRC channels to sepa-
rate botnet C&C dialogs from human-human conversations
to detect IRC bots. PeerPress diﬀers in that we accurately
extract MCBs from malware binaries to probe them.
Code Reuse. Previous work [16, 36, 37] applies forward
taint analysis and backward program slicing to extract in-
teresting, relevant instructions as a stand-alone program.
Our portprint extraction uses similar techniques to solve a
speciﬁc problem. Diﬀerent from [16], PeerPress extracts a
virtual function from the whole program level instead of
single function level, and the way of reusing/replaying of
the code is diﬀerent. Diﬀerent from [36, 37], PeerPress uses
backward taint analysis instead of forward analysis because
in our context, we have a clear sinkholing point (the port
binding event) but many unknown source points.
ment to existing passive detection techniques even though
it is not perfect (just as any intrusion/malware detection
technique).
8. CONCLUSION
P2P malware is an important direction for future malware.
Current P2P malware detection remains insuﬃcient. In this
paper, we propose a novel, two-phase detection framework
that seamlessly bridges host-level dynamic binary analysis
and network-level informed active probing techniques. It can
detect P2P malware and beyond, as long as the malware
has MCBs. We developed new techniques such as ICE to
tackle our research challenges, and we implemented a proto-
type system, PeerPress, to demonstrate the real-world util-
ity. Our initial results are very encouraging. Although not
perfect, PeerPress demonstrates an important step toward
proactive malware detection and defense (instead of passive
monitoring), a direction worth more attention from the se-
curity research community.
7. LIMITATIONS AND DISCUSSION
9. ACKNOWLEDGMENTS
In this section, we discuss the limitations and implications
of our solution.
A notable limitation of PeerPress is that it cannot craft
correct MCB probing packets in the case of advanced en-
cryption or certiﬁcate-based authentication, even though it
could identify/bypass these routines. However, this is a com-
mon problem for all malware analysis tools that aim to pro-
vide meaningful (network) input to malware samples [18].
Malware could use this to verify/authenticate our incorrect
probing packets and refuse providing any future response.
However, even in this worst case, we argue that this kind
of “no response” is indeed a special, suspicious, recognizable
response that could be used in MCB probing. Furthermore,
we note that our technique can still successfully extract port-
prints, and in many cases, the portprint itself is enough to
detect/conﬁrm the malware (without actually sending MCB
probing content).
To evade portprint extraction, malware authors may in-
tentionally delay the port binding until some conditions are
satisﬁed, e.g., the time reaches some speciﬁc date. Indeed,
it prevents PeerPress from discovering the port binding at
ﬁrst sight with the cost of decreasing the utility (in terms of
accessibility) of the malware. This issue could be solved if
we skip all the sleep() related functions in the monitoring
and analysis.
To slow down the analysis of ICE, malware authors may
intentionally include many (bogus) branches directly after
the packet receiving. Even in such case, ICE is still faster
than random path explorations.
Another possible evasion is to faithfully mimic a benign
normal protocol behavior. First, this will increase the work-
load of malware authors. Second, if not implemented faith-
fully, the malware still could be ﬁngerprinted due to the
subtle diﬀerences from normal protocols, as studies in this
domain have shown [14, 19]. If the malware authors choose
to copy code from existing open source software in order to
avoid diﬀerences in implementation, the code replication/-
copy [52] could become another possible point of detection.
Finally, we note that within its detection scope (when
MCBs can be successfully extracted), PeerPress is fast, re-
liable, robust, and scalable. We believe it is a great comple-
This material is based upon work supported in part by
the National Science Foundation under Grant CNS-0954096
and the Texas Higher Education Coordinating Board under
NHARP Grant no. 01909. Any opinions, ﬁndings, and con-
clusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reﬂect the views
of the National Science Foundation and the Texas Higher
Education Coordinating Board.
10. REFERENCES
[1] Anubis: Analyzing Unknown Binaries.
https://anubis.iseclab.org.
[2] Conﬁcker C Analysis Report .
http://mtc.sri.com/Conficker/.
[3] DynamoRIO . http://dynamorio.org/.
[4] LibVex . http://http://valgrind.org/.
[5] OﬀensiveComputing.
http://www.offensivecomputing.net/.
[6] Phabot. http://www.secureworks.com/research/threats/
phatbot/?threat=phatbot.
[7] Sulley. http://code.google.com/p/sulley/.
[8] Symantec Internet Security Threat Report.
http://www.symantec.com/business/theme.jsp?themeid=
threatreport.
[9] Temu . http://bitblaze.cs.berkeley.edu/temu.html.
[10] Virustotal. https://www.virustotal.com/.
[11] Z3 EMT Solver . http://research.microsoft.com/en-us/
um/redmond/projects/z3/.
[12] Cybercriminals Making Sality Virus More Complex.
http://www.spamfighter.com/Cybercriminals-Making\
\-Sality-Virus-More-Complex-16068-News.htm, 2011.
[13] Thanassis Avgerinos, Edward Schwartz, and David
Brumley. All you ever wanted to know about dynamic taint
analysis and forward symbolic execution (but might have
been afraid to ask). In Proc. of IEEE S&P’10, 2010.
[14] David Brumley, Juan Caballero, Zhenkai Liang, James
Newsome, and Dawn Song. Towards automatic discovery of
deviations in binary implementations with applications to
error detection and ﬁngerprint generation. In Proc. of
USENIX Security’07, 2007.
[15] David Brumley, Cody Hartwig, Zhenkai Liang, James
Newsome, Pongsin Poosankam, Dawn Song, and Heng Yin.
Automatically identifying trigger-based behavior in
malware. In Wenke Lee, Cliﬀ Wang, and David Dagon,
591editors, Botnet Analysis and Defense, volume 36, pages
65–88. Springer, 2008.
R. Kemmerer. Behavior-based spyware detection. In Proc.
of USENIX Security’06, 2006.
[16] Juan Caballero, Noah M. Johnson, Stephen McCamant,
[36] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher
and Dawn Song. Binary code extraction and interface
identiﬁcation for security applications. In Proc. of
NDSS’10, 2010.
Kruegel, Engin Kirda, Xiaoyong Zhou, and Xiaofeng Wang.
Eﬀective and eﬃcient malware detection at the end host. In
Proc. of USENIX Security’09, 2009.
[17] Juan Caballero, Pongsin Poosankam, Christian Kreibich,
[37] Clemens Kolbitsch, Thorsten Holz, Christopher Kruegel,
and Dawn Song. Dispatcher: Enabling active botnet
inﬁltration using automatic protocol reverse-engineering. In
Proc. of ACM CCS’09, 2009.
[18] Juan Caballero, Pongsin Poosankam, Stephen McCamant,
Domagoj Babi´c, and Dawn Song. Input generation via
decomposition and re-stitching: Finding bugs in malware.
In Proc. of ACM CCS’10, September 2010.
[19] Juan Caballero, Shobha Venkataraman, Pongsin
Poosankam, Min Gyung Kang, Dawn Song, and Avrim
Blum. FiG: Automatic ﬁngerprint generation. In Proc. of
NDSS’07, 2007.
[20] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song.
Polyglot: Automatic extraction of protocol message format
using dynamic binary analysis. In Proc. of ACM CCS’07,
2007.
[21] Chia Yuan Cho, Domagoj Babic, Pongsin Poosankam,
Kevin Zhijie Chen, Edward XueJun Wu, and Dawn Song.
Mace: Model-inference-assisted concolic exploration for
protocol and vulnerability discovery. In Proc. of USENIX
Security’11, 2011.
[22] Baris Coskun, Sven Dietrich, and Nasir Memon. Friends of
an enemy: Identifying local members of peer-to-peer
botnets using mutual contacts. In Proc. of ACSAC’10,
2010.
[23] W. Cui, J. Kannan, and H. J. Wang. Discoverer:
Automatic protocol description generation from network
traces. In Proceedings of USENIX Security Symposium,
Boston, MA, August 2007.
[24] W. Cui, M. Peinado, K. Chen, H. J. Wang, and
L. Irun-Briz. Tupni: Automatic reverse engineering of input
formats. In Proc. of ACM CCS’08, 2008.
[25] Nicolas Falliere. Sality: Story of a peer-to-peer viral
network. Technical report, 2011.
[26] Alexander Gostev. 2010: The year of the vulnerability .
http://www.net-security.org/article.php?id=1543,
2010.
[27] Julian B. Grizzard, Vikram Sharma, Chris Nunnery, Brent
Kang, and David Dagon. Peer-to-peer botnets: Overview
and case study. In Proc. of USENIX HotBots’07, 2007.
[28] Flix Grobert. Automatic identiﬁcation of cryptographic
primitives in software. Master’s thesis, Ruhr-University
Bochum,Germany, 2010.
[29] Guofei Gu, Roberto Perdisci, Junjie Zhang, and Wenke
Lee. BotMiner: Clustering Analysis of Network Traﬃc for
Protocol- and Structure-Independent Botnet Detection. In
Proc. of USENIX Security’08, 2008.
[30] Guofei Gu, Vinod Yegneswaran, Phillip Porras, Jennifer
Stoll, and Wenke Lee. Active botnet probing to identify
obscure command and control channels. In Proc. of
ACSAC’09, 2009.
[31] Guofei Gu, Junjie Zhang, and Wenke Lee. BotHunter:
Detecting Malware Infection Through IDS-Driven Dialog
Correlation. In Proceedings of USENIX Security’07, 2007.
[32] Guofei Gu, Junjie Zhang, and Wenke Lee. BotSniﬀer:
Detecting Botnet Command and Control Channels in
Network Traﬃc. In Proc. of NDSS’08, 2008.
[33] Duc T. Ha, Guanhua Yan, Stephan Eidenbenz, and
Hung Q. Ngo. On the eﬀectiveness of structural detection
and defense against p2p-based botnets. In Proc. of DSN’09,
2009.
[34] M´ark Jelasity and Vilmos Bilicki. Towards automated
detection of peer-to-peer botnets: on the limits of local
approaches. In Proc. of LEET’09, 2009.
[35] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and
and Engin Kirda. Inspector gadget: Automated extraction
of proprietary gadgets from malware binaries. In 31st IEEE
Symposium on Security and Privacy, May 2010.
[38] Andrea Lanzi, Davide Balzarotti, Christopher Kruegel,
Mihai Christodorescu, and Engin Kirda. AccessMiner:
using system-centric models for malware protection. In
Proc. of ACM CCS’10, 2010.
[39] Felix Leder and Peter Martini. Ngbpa: Next generation
botnet protocol analysis. In SEC, pages 307–317, 2009.
[40] Andrea De Lucia. Program slicing: Methods and
applications. In 1st IEEE International Workshop on
Source Code Analysis and Manipulation, 2001.
[41] Reiter M. and Yen T. Traﬃc aggregation for malware
detection. In Proc. of DIMVA’08, 2008.
[42] Andreas Moser, Christopher Kruegel, and Engin Kirda.
Exploring Multiple Execution Paths for Malware Analysis.
In IEEE Symposium on Security and Privacy, 2007.
[43] Shishir Nagaraja, Prateek Mittal, Chi-Yao Hong, Matthew
Caesar, and Nikita Borisov. Botgrep: ﬁnding p2p bots with
structured graph analysis. In Proc. of USENIX Security’10,
2010.
[44] P.M.Comparetti, G.Salvaneschi, E.Kirda, C. Kolbitsch,
C.Krugel, and S.Zanero. Identifying dormant functionality
in malware programs. In 31st IEEE Symposium on
Security and Privacy, May 2010.
[45] Phillip Porras, Hassen Saidi, and Vinod Yegneswaran. An
Analysis of Conﬁcker’s Logic and Rendezvous Points.
http://mtc.sri.com/Conficker/, 2009.
[46] Paul Royal, Mitch Halpin, David Dagon, Robert Edmonds,
and Wenke Lee. Polyunpack: Automating the hidden-code
extraction of unpack-executing malware. In Proc. of
ACSAC’06, 2006.
[47] Prateek Saxena, Pongsin Poosankam, Stephen McCamant,
and Dawn Song. Loop-extended symbolic execution on
binary programs. In Proc. of ISSTA’08, 2008.
[48] Joe Stewart. Inside the Storm.
http://www.blackhat.com/presentations/bh-usa-08/
Stewart/BH_US_08_Stewart_Protocols_of_the_Storm.pdf.
[49] Elizabeth Stinson and John C. Mitchell. Towards
systematic evaluation of the evadability of bot/botnet
detection methods. In WOOT’08, 2008.
[50] S. Stover, D. Dittrich, J. Hernandez, and S. Dietrich.
Analysis of the storm and nugache trojans: P2P is here. In
;login, 2007.
[51] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou.
Taintscope: A checksum-aware directed fuzzing tool for
automatic software vulnerability detection. In Proc. of
IEEE S&P’10, 2010.
[52] Xinran Wang, Yoon-Chan Jhi, Sencun Zhu, and Peng Liu.
Behavior based software theft detection. In Proc. ACM
CCS’09, 2009.
[53] Zhi Wang, Xuxian Jiang, Weidong Cui, Xinyuan Wang,
and Mike Grace. Reformat: Automatic reverse engineering
of encrypted messages. In Proc. of ESORICS’09, 2009.
[54] J. Wilhelm and Tcker Chiueh. A forced sampled execution
approach to kernel rootkit identiﬁcation. In Proc. of
RAID’07, 2007.
[55] Zhaoyan Xu, Lingfeng Chen, and Guofei Gu. PeerPress:
Fast and reliable detection of p2p malware (and beyond).
Technical report, Texas A&M University, 2012.
[56] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: Capturing system-wide information ﬂow
formalware detection and analysis. In In ACM Conference
on Computer and Communication Security (CCS), 2007.
592