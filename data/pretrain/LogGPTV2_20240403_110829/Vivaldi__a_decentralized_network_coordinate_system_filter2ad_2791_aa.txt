title:Vivaldi: a decentralized network coordinate system
author:Frank Dabek and
Russ Cox and
M. Frans Kaashoek and
Robert Tappan Morris
Vivaldi: A Decentralized Network Coordinate System
Frank Dabek, Russ Cox, Frans Kaashoek, Robert Morris
MIT CSAIL
Cambridge, MA
fdabek,rsc,kaashoek,PI:EMAIL
ABSTRACT
Large-scale Internet applications can beneﬁt from an ability to pre-
dict round-trip times to other hosts without having to contact them
ﬁrst. Explicit measurements are often unattractive because the cost
of measurement can outweigh the beneﬁts of exploiting proximity
information. Vivaldi is a simple, light-weight algorithm that as-
signs synthetic coordinates to hosts such that the distance between
the coordinates of two hosts accurately predicts the communication
latency between the hosts.
Vivaldi is fully distributed, requiring no ﬁxed network infrastruc-
ture and no distinguished hosts. It is also e(cid:14)cient: a new host can
compute good coordinates for itself after collecting latency infor-
mation from only a few other hosts. Because it requires little com-
munication, Vivaldi can piggy-back on the communication patterns
of the application using it and scale to a large number of hosts.
An evaluation of Vivaldi using a simulated network whose laten-
cies are based on measurements among 1740 Internet hosts shows
that a 2-dimensional Euclidean model with height vectors embeds
these hosts with low error (the median relative error in round-trip
time prediction is 11 percent).
Categories and Subject Descriptors
C.2.1 [Computer Communication Networks]: Network Archi-
tecture and Design—Network topology; C.2.5 [Computer Com-
munication Networks]: Local and Wide-Area Networks—Inter-
net
General Terms
Algorithms, Measurement, Performance, Design, Experimentation
Keywords
Vivaldi, network coordinates, Internet topology
1.
INTRODUCTION
Synthetic coordinate systems [3,17,19,26] allow an Internet host
to predict the round-trip latencies to other hosts. Hosts compute
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’04, Aug. 30–Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1-58113-862-8/04/0008 ...$5.00.
synthetic coordinates in some coordinate space such that distance
between two hosts’ synthetic coordinates predicts the RTT between
them in the Internet. Thus, if a host x learns the coordinates of a
host y, x doesn’t have to perform an explicit measurement to de-
termine the RTT to y; instead, the distance between x and y in the
coordinate space is an accurate predictor of the RTT.
The Internet’s properties determine whether synthetic coordi-
nates are likely to work well. For example, if Internet latency is
dominated by speed-of-light delay over links, and the Internet is
well-enough connected that there is a roughly direct physical path
between every pair of hosts, and the Internet routing system ﬁnds
these direct paths, then synthetic coordinates that mimic latitude
and longitude are likely to predict latency well.
Unfortunately, these properties are only approximate. Packets
often deviate from great-circle routes because few site pairs are di-
rectly connected, because di(cid:11)erent ISPs peer at a limited number of
locations, and because transmission time and router electronics de-
lay packets. The resulting distorted latencies make it impossible to
choose two-dimensional host coordinates that predict latency per-
fectly, so a synthetic coordinate system must have a strategy for
choosing coordinates that minimize prediction errors. In addition,
coordinates need not be limited to two dimensions; Vivaldi is able
to eliminate certain errors by augmenting coordinates with a height.
The ability to predict RTT without prior communication allows
systems to use proximity information for better performance with
less measurement overhead than probing. A coordinate system can
be used to select which of a number of replicated servers to fetch a
data item from; coordinates are particularly helpful when the num-
ber of potential servers is large or the amount of data is small. In ei-
ther case it would not be practical to ﬁrst probe all the servers to ﬁnd
the closest, since the cost of the probes would outweigh the beneﬁt
of an intelligent choice. Content distribution and ﬁle-sharing sys-
tems such as KaZaA [12], BitTorrent [1], and CoDeeN [31] are
examples of systems that o(cid:11)er a large number of replica servers.
CFS [6] and DNS [13] are examples of systems that o(cid:11)er modest
numbers of replicas, but each piece of data is small. All of these
applications could beneﬁt from network coordinates.
Designing a synthetic coordinate system for use in large-scale
distributed Internet applications involves the following challenges:
(cid:15) Finding a metric space that embeds the Internet with little
error. A suitable space must cope with the di(cid:14)culties intro-
duced by Internet routing, transmission time, and queuing.
(cid:15) Scaling to a large number of hosts. Synthetic coordinate sys-
tems are of most value in large-scale applications; if only few
hosts are involved, direct measurement of RTT is practical.
(cid:15) Decentralizing the implementation. Many emerging applica-
tions, such as peer-to-peer applications, are distributed and
Session 1: Network Geometry and Design symmetric in nature and do not inherently have special, reli-
able hosts that are candidates for landmarks.
(cid:15) Minimizing probe tra(cid:14)c. An ideal synthetic coordinate sys-
tem would not introduce any additional network tra(cid:14)c, but
would be able to gather whatever information it needed from
the application’s existing communication.
(cid:15) Adapting to changing network conditions. The relative loca-
tion of a host in a network may change due to congestion or
even reconﬁguration of the network. The system should be
able to adjust the coordinates of hosts periodically to respond
to these changes.
A number of existing synthetic coordinate systems address some
of these challenges, but none addresses them all, as Section 6 dis-
cusses.
The primary contribution of this paper is a decentralized, low-
overhead, adaptive synthetic coordinate system, Vivaldi, that com-
putes coordinates which predict Internet latencies with low error.
Vivaldi was developed for and is used by the Chord peer-to-peer
lookup system which uses coordinates to avoid contacting distant
hosts when performing a lookup [7].
This paper extends earlier descriptions of Vivaldi [4, 5] and con-
siders new variations, particularly a coordinate space that includes
the notion of a directionless height that improves the prediction ac-
curacy of the system on data sets derived from measurements of
the Internet. Height is included to capture transmission delays on
the access links of single-homed hosts. A detailed evaluation using
a simulator driven with actual Internet latencies between 1740 In-
ternet hosts shows that Vivaldi achieves errors as low as GNP [17],
a landmark-based coordinate system, even though Vivaldi has no
notion of landmarks.
A further contribution of this paper is that coordinates drawn
from a two-dimensional Euclidean model with a height can accu-
rately predict latency between the 1740 Internet hosts. Simulations
show that this model is better than 2- or 3-dimensional Euclidean
models or a spherical model. These ﬁndings suggest that the fol-
lowing properties hold in the data set: inter-host RTT is dominated
by geographic distance, the Internet core does not “wrap around”
the Earth to any signiﬁcant extent, and the time required to traverse
an access-link is often a signiﬁcant fraction of total RTT.
The rest of this paper is organized as follows. Section 2 presents
the Vivaldi algorithm. Section 3 describes the methodology for
evaluating Vivaldi. Section 4 presents the results from evaluating
Vivaldi. Section 5 investigates di(cid:11)erent models to embed the In-
ternet. Section 6 discusses the related work that led us to Vivaldi.
Finally, section 7 summarizes our conclusions.
2. ALGORITHM
Vivaldi assigns each host synthetic coordinates in a coordinate
space, attempting to assign coordinates such that the distance in the
coordinate space between two hosts accurately predicts the packet
transmission RTT between the hosts. No low-dimensional coordi-
nate space would allow Vivaldi to predict RTTs between Internet
hosts exactly, because, for example, Internet latencies violate the
triangle inequality. The algorithm instead attempts to ﬁnd coordi-
nates that minimize the error of predictions.
We ﬁrst describe this prediction error in more detail and brieﬂy
discuss possible coordinate systems. Then, we show a simple cen-
tralized algorithm that ﬁnds coordinates that minimize a squared
error function given complete knowledge of RTTs in the network.
Then we present a simple distributed algorithm that computes co-
ordinates based on measurements from each node to a few other
nodes. Finally, we reﬁne this distributed algorithm to converge
quickly to accurate coordinates.
2.1 Prediction error
Let Li j be the actual RTT between nodes i and j, and xi be the
coordinates assigned to node i. We can characterize the errors in
the coordinates using a squared-error function:
E = X
i
X
j
(cid:16)Li j (cid:0) (cid:13)(cid:13)(cid:13)
xi (cid:0) x j(cid:13)(cid:13)(cid:13)(cid:17)2
(1)
xi (cid:0) x j(cid:13)(cid:13)(cid:13)
where (cid:13)(cid:13)(cid:13)
is the distance between the coordinates of nodes i
and j in the chosen coordinate space. Other systems choose to min-
imize a di(cid:11)erent quantity; PIC [3], for instance, minimizes squared
relative error. We chose the squared error function because it has
an analogue to the displacement in a physical mass-spring system:
minimizing the energy in a spring network is equivalent to mini-
mizing the squared-error function.
2.2 Synthetic coordinate structure
Algorithms can choose the structure of coordinates and the dis-
tance function that determines the predicted latency given two co-
ordinates. Coordinates should be compact and it should be easy to
compute an RTT prediction given two coordinates. The simplest
choice is to use n-dimensional coordinates with the standard Eu-
clidean distance function. Spherical, toroidal, hyperbolic and other
coordinate structures have also been proposed (e.g., [27]). These
coordinate systems use alternative distance functions in the hope
that they predict latency better. Section 5 will present the height-
vector coordinates that we propose. In the remainder of this section,
however, we will present algorithms that work with any coordinate
system that supports the magnitude, addition, and subtraction oper-
ations.
2.3 Centralized algorithm
We ﬁrst describe a simple, centralized algorithm than can mini-
mize Equation 1. Vivaldi is a distributed version of this algorithm.
Given our choice of E, simulating of a network of physical springs
produces coordinates that minimize E.
Conceptually, this minimization places a spring between each
pair of nodes (i, j) with a rest length set to the known RTT (Li j).
The current length of the spring is considered to be the distance
between the nodes in the coordinate space. The potential energy of
such a spring is proportional to the square of the displacement from
its rest length: the sum of these energies over all springs is exactly
the error function we want to minimize.
Since the squared-error function is equivalent to spring energy,
we can minimize it by simulating the movements of nodes under
the spring forces. While the minimum energy conﬁguration of the
spring system corresponds to the minimum error coordinate assign-
ment, it is not guaranteed that the simulation will ﬁnd this global
minimum: the system may come to rest in a local minimum.
This approach to minimization mirrors work on model recon-
struction [11] and a similar recent coordinate approach using force
ﬁelds [26].
We will now describe the centralized algorithm more precisely.
Deﬁne Fi j to be the force vector that the spring between nodes i
and j exerts on node i. From Hooke’s law we can show that F is:
Fi j = (cid:16)Li j (cid:0) (cid:13)(cid:13)(cid:13)
The scalar quantity (cid:16)Li j (cid:0) (cid:13)(cid:13)(cid:13)
xi (cid:0) x j(cid:13)(cid:13)(cid:13)(cid:17) (cid:2) u(xi (cid:0) x j):
xi (cid:0) x j(cid:13)(cid:13)(cid:13)(cid:17) is the displacement of the
spring from rest. This quantity gives the magnitude of the force ex-
// Input: latency matrix and initial coordinates
// Output: more accurate coordinates in x
compute coordinates(L, x)
while (error (L, x) > tolerance)
foreach i
F = 0
foreach j
// Compute error/force of this spring. (1)
e = Li j (cid:0) kxi (cid:0) x jk
// Add the force vector of this spring to the total force. (2)
F = F + e (cid:2) u(xi (cid:0) x j)
// Move a small step in the direction of the force. (3)
xi = xi + t (cid:2) F
Figure 1: The centralized algorithm.
erted by the spring on i and j (we will ignore the spring constant).
The unit vector u(xi (cid:0) x j) gives the direction of the force on i. Scal-
ing this vector by the force magnitude calculated above gives the
force vector that the spring exerts on node i.
The net force on i (Fi) is the sum of the forces from other nodes:
Fi = X
j,i
Fi j:
To simulate the spring network’s evolution the algorithm consid-
ers small intervals of time. At each interval, the algorithm moves
each node (xi) a small distance in the coordinate space in the direc-
tion of Fi and then recomputes all the forces. The coordinates at
the end of a time interval are:
xi = xi + Fi (cid:2) t;
where t is the length of the time interval. The size of t determines
how far a node moves at each time interval. Finding an appropriate
t is important in the design of Vivaldi.
Figure 1 presents the pseudocode for the centralized algorithm.
For each node i in the system, compute coordinates computes the
force on each spring connected to i (line 1) and adds that force
to the total force on i (line 2). After all of the forces have been
added together, i moves a small distance in the direction of the
force (line 3). This process is repeated until the system converges
to coordinates that predict error well.
This centralized algorithm (and the algorithms that will build on
it) ﬁnds coordinates that minimize squared error because the force
function we chose (Hooke’s law) deﬁnes a force that is proportional
to displacement. If we chose a di(cid:11)erent force function, a di(cid:11)erent
error function would be minimized. For instance, if spring force
were a constant regardless of displacement, this algorithm would
minimize the sum of (unsquared) errors.
2.4 The simple Vivaldi algorithm
The centralized algorithm described in Section 2.3 computes co-
ordinates for all nodes given all RTTs. Here we extend the algo-
rithm so that each node computes and continuously adjusts its co-
ordinates based only on measured RTTs from the node to a handful
of other nodes and the current coordinates of those nodes.
Each node participating in Vivaldi simulates its own movement
in the spring system. Each node maintains its own current coor-
dinates, starting with coordinates at the origin. Whenever a node
communicates with another node, it measures the RTT to that node
and also learns that node’s current coordinates.
The input to the distributed Vivaldi algorithm is a sequence of
// Node i has measured node j to be rtt ms away,
// and node j says it has coordinates x j.
simple vivaldi(rtt, x j)
// Compute error of this sample. (1)
e = rtt (cid:0) kxi (cid:0) x jk
// Find the direction of the force the error is causing. (2)
dir = u(xi (cid:0) x j)
// The force vector is proportional to the error (3)
f = dir (cid:2) e
// Move a a small step in the direction of the force. (4)
xi = xi + (cid:14) (cid:2) dir
Figure 2: The simple Vivaldi algorithm, with a constant
timestep (cid:14).
such samples. In response to a sample, a node allows itself to be
pushed for a short time step by the corresponding spring; each of
these movements reduce the node’s error with respect to one other
node in the system. As nodes continually communicate with other
nodes, they converge to coordinates that predict RTT well.
When node i with coordinates xi learns about node j with coor-
dinates x j and measured RTT rtt, it updates its coordinates using
the update rule:
xi = xi + (cid:14) (cid:2) (cid:16)rtt (cid:0) kxi (cid:0) x jk(cid:17) (cid:2) u(xi (cid:0) x j):
This rule is identical to the individual forces calculated in the
inner loop of the centralized algorithm.
Because all nodes start at the same location, Vivaldi must sep-
arate them somehow. Vivaldi does this by deﬁning u(0) to be a
unit-length vector in a randomly chosen direction. Two nodes oc-
cupying the same location will have a spring pushing them away
from each other in some arbitrary direction.
Figure 2 shows the pseudocode for this distributed algorithm.
The simple vivaldi procedure is called whenever a new RTT mea-
surement is available. simple vivaldi is passed an RTT measure-
ment to the remote node and the remote node’s coordinates. The
procedure ﬁrst calculates the error in its current prediction to the
target node (line 1). The node will move towards or away from the
target node based on the magnitude of this error; lines 2 and 3 ﬁnd
the direction (the force vector created by the algorithm’s imagined
spring) the node should move. Finally, the node moves a fraction
of the distance to the target node in line 4, using a constant timestep
((cid:14)).
This algorithm e(cid:11)ectively implements a weighted moving aver-
age that is biased toward more recent samples. To avoid this bias,
each node could maintain a list of every sample it has ever received,
but since all nodes in the system are constantly updating their co-
ordinates, old samples eventually become outdated. Further, main-
taining such a list would not scale to systems with large numbers
of nodes.
2.5 An adaptive timestep
The main di(cid:14)culty in implementing Vivaldi is ensuring that it
converges to coordinates that predict RTT well. The rate of conver-
gence is governed by the (cid:14) timestep: large (cid:14) values cause Vivaldi to
adjust coordinates in large steps. However, if all Vivaldi nodes use
large (cid:14) values, the result is typically oscillation and failure to con-
verge to useful coordinates. Intuitively, a large (cid:14) causes nodes to
jump back and forth across low energy valleys that a smaller delta
would explore.
An additional challenge is handling nodes that have a high error
in their coordinates.
If a node n communicates with some node
that has coordinates that predict RTTs badly, any update that n
makes based on those coordinates is likely to increase prediction
error rather than decrease it.
We would like to obtain both fast convergence and avoidance of
oscillation. Vivaldi does this by varying (cid:14) depending on how certain
the node is about its coordinates (we will discuss how a node main-
tains an estimate of the accuracy of its coordinates in Section 2.6).
When a node is still learning its rough place in the network (as hap-
pens, for example, when the node ﬁrst joins), larger values of (cid:14) will
help it move quickly to an approximately correct position. Once
there, smaller values of (cid:14) will help it reﬁne its position.