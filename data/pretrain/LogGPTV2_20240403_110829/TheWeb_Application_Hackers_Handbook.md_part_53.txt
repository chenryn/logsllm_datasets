/pub/user/marcus
and transforms them into back-end requests for the view functionality contained
within the user management page user_mgr.php. It moves the marcus parameter
into the query string and adds the mode=view parameter:
/inc/user_mgr.php?mode=view&name=marcus
In this situation, it may be possible to use an HPI attack to inject a second mode
parameter into the rewritten URL. For example, if the attacker requests this:
/pub/user/marcus%26mode=edit
the URL-decoded value is embedded in the rewritten URL as follows:
/inc/user_mgr.php?mode=view&name=marcus&mode=edit
As was described for HPP attacks, the success of this exploit depends on
how the server handles the now-duplicated parameter. On the PHP platform,
the mode parameter is treated as having the value edit, so the attack succeeds.
cc1100..iinndddd 339966 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 397
Chapter 10 n Attacking Back-End Components 397
HACK STEPS
1. Target each request parameter in turn, and try to append a new injected
parameter using various syntax:
n %26foo%3dbar — URL-encoded &foo=bar
n %3bfoo%3dbar — URL-encoded ;foo=bar
n %2526foo%253dbar — Double URL-encoded &foo=bar
2. Identify any instances where the application behaves as if the original
parameter were unmodified. (This applies only to parameters that usually
cause some difference in the application’s response when modified.)
3. Each instance identified in the previous step has a chance of parameter
injection. Attempt to inject a known parameter at various points in the
request to see if it can override or modify an existing parameter. For
example:
FromAccount=18281008%26Amount%3d4444&Amount=1430&ToAcco
unt=08447656
4. If this causes the new value to override the existing one, determine
whether you can bypass any front-end validation by injecting a value that
is read by a back-end server.
5. Replace the injected known parameter with additional parameter names
as described for application mapping and content discovery in Chapter 4.
6. Test the application’s tolerance of multiple submissions of the same
parameter within a request. Submit redundant values before and after
other parameters, and at different locations within the request (within the
query string, cookies, and the message body).
Injecting into Mail Services
Many applications contain a facility for users to submit messages via the appli-
cation, such as to report a problem to support personnel or provide feedback
about the website. This facility is usually implemented by interfacing with a
mail (or SMTP) server. Typically, user-supplied input is inserted into the SMTP
cc1100..iinndddd 339977 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 398
398 Chapter 10 n Attacking Back-End Components
conversation that the application server conducts with the mail server. If an
attacker can submit suitable crafted input that is not fi ltered or sanitized, he
may be able to inject arbitrary STMP commands into this conversation.
In most cases, the application enables you to specify the contents of the mes-
sage and your own e-mail address (which is inserted into the From fi eld of the
resulting e-mail). You may also be able to specify the subject of the message and
other details. Any relevant fi eld that you control may be vulnerable to SMTP
injection.
SMTP injection vulnerabilities are often exploited by spammers who scan
the Internet for vulnerable mail forms and use these to generate large volumes
of nuisance e-mail.
E-mail Header Manipulation
Consider the form shown in Figure 10-6, which allows users to send feedback
about the application.
Figure 10-6: A typical site feedback form
Here, users can specify a From address and the contents of the message. The
application passes this input to the PHP mail() command, which constructs
the e-mail and performs the necessary SMTP conversation with its confi gured
mail server. The mail generated is as follows:
To: PI:EMAIL
From: PI:EMAIL
Subject: Site problem
Confirm Order page doesn’t load
The PHP mail() command uses an additional_headers parameter to set the
message’s From address. This parameter is also used to specify other headers,
including Cc and Bcc, by separating each required header with a newline char-
acter. Hence, an attacker can cause the message to be sent to arbitrary recipients
by injecting one of these headers into the From fi eld, as illustrated in Figure 10-7.
cc1100..iinndddd 339988 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 399
Chapter 10 n Attacking Back-End Components 399
Figure 10-7: An e-mail header injection attack
This causes the mail() command to generate the following message:
To: PI:EMAIL
From: PI:EMAIL
Bcc: PI:EMAIL
Subject: Site problem
Confirm Order page doesn’t load
SMTP Command Injection
In other cases, the application may perform the SMTP conversation itself, or it
may pass user-supplied input to a different component to do this. In this situ-
ation, it may be possible to inject arbitrary SMTP commands directly into this
conversation, potentially taking full control of the messages being generated
by the application.
For example, consider an application that uses requests of the following form
to submit site feedback:
POST feedback.php HTTP/1.1
Host: wahh-app.com
Content-Length: 56
From=PI:EMAIL&Subject=Site+feedback&Message=foo
This causes the web application to perform an SMTP conversation with the
following commands:
MAIL FROM: PI:EMAIL
RCPT TO: PI:EMAIL
DATA
From: PI:EMAIL
To: PI:EMAIL
Subject: Site feedback
foo
.
cc1100..iinndddd 339999 88//1199//22001111 1122::1100::5500 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 400
400 Chapter 10 n Attacking Back-End Components
NOTE After the SMTP client issues the DATA command, it sends the contents
of the e-mail message, comprising the message headers and body. Then it
sends a single dot character on its own line. This tells the server that the mes-
sage is complete, and the client can then issue further SMTP commands to
send further messages.
In this situation, you may be able to inject arbitrary SMTP commands into
any of the e-mail fi elds you control. For example, you can attempt to inject into
the Subject fi eld as follows:
POST feedback.php HTTP/1.1
Host: wahh-app.com
Content-Length: 266
From=PI:EMAIL&Subject=Site+feedback%0d%0afoo%0d%0a%2e%0d
%0aMAIL+FROM:+PI:EMAIL%0d%0aRCPT+TO:+john@wahh-mail
.com%0d%0aDATA%0d%0aFrom:+PI:EMAIL%0d%0aTo:+john@wahh-mail
.com%0d%0aSubject:+Cheap+V1AGR4%0d%0aBlah%0d%0a%2e%0d%0a&Message=foo
If the application is vulnerable, this results in the following SMTP conversa-
tion, which generates two different e-mail messages. The second is entirely
within your control:
MAIL FROM: PI:EMAIL
RCPT TO: PI:EMAIL
DATA
From: PI:EMAIL
To: PI:EMAIL
Subject: Site+feedback
foo
.
MAIL FROM: PI:EMAIL
RCPT TO: PI:EMAIL
DATA
From: PI:EMAIL
To: PI:EMAIL
Subject: Cheap V1AGR4
Blah
.
foo
.
Finding SMTP Injection Flaws
To probe an application’s mail functionality effectively, you need to target every
parameter that is submitted to an e-mail-related function, even those that may
initially appear to be unrelated to the content of the generated message. You
cc1100..iinndddd 440000 88//1199//22001111 1122::1100::5500 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 401
Chapter 10 n Attacking Back-End Components 401
should also test for each kind of attack, and you should perform each test case
using both Windows- and UNIX-style newline characters.
HACK STEPS
1. You should submit each of the following test strings as each parameter in
turn, inserting your own e-mail address at the relevant position:
%0aCc:
%0d%0aCc:
%0aBcc:
%0d%0aBcc:
%0aDATA%0afoo%0a%2e%0aMAIL+FROM:+%0aRCPT+TO:+%0aDATA%0aFrom:+%0aTo:+%0aS
ubject:+test%0afoo%0a%2e%0a
%0d%0aDATA%0d%0afoo%0d%0a%2e%0d%0aMAIL+FROM:+%0
d%0aRCPT+TO:+%0d%0aDATA%0d%0aFrom:+%
0d%0aTo:+%0d%0aSubject:+test%0d%0
afoo%0d%0a%2e%0d%0a
2. Note any error messages the application returns. If these appear to relate
to any problem in the e-mail function, investigate whether you need to
fine-tune your input to exploit a vulnerability.
3. The application’s responses may not indicate in any way whether a vul-
nerability exists or was successfully exploited. You should monitor the
e-mail address you specified to see if any mail is received.
4. Review closely the HTML form that generates the relevant request. This
may contain clues about the server-side software being used. It may also
contain a hidden or disabled field that specifies the e-mail’s To address,
which you can modify directly.
TIP Functions to send e-mails to application support personnel are fre-
quently regarded as peripheral and may not be subject to the same security
standards or testing as the main application functionality. Also, because they
involve interfacing to an unusual back-end component, they are often imple-
mented via a direct call to the relevant operating system command. Hence,
in addition to probing for SMTP injection, you should also closely review all
e-mail-related functionality for OS command injection fl aws.
cc1100..iinndddd 440011 88//1199//22001111 1122::1100::5500 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 402
402 Chapter 10 n Attacking Back-End Components
Preventing SMTP Injection
SMTP injection vulnerabilities usually can be prevented by implementing rig-
orous validation of any user-supplied data that is passed to an e-mail function
or used in an SMTP conversation. Each item should be validated as strictly as
possible given the purpose for which it is being used:
n E-mail addresses should be checked against a suitable regular expression
(which should, of course, reject any newline characters).
n The message subject should not contain any newline characters, and it
may be limited to a suitable length.
n If the contents of a message are being used directly in an SMTP conversa-
tion, lines containing just a single dot should be disallowed.
Summary
We have examined a wide range of attacks targeting back-end application
components and the practical steps you can take to identify and exploit each
one. Many real-world vulnerabilities can be discovered within the fi rst few
seconds of interacting with an application. For example, you could enter some
unexpected syntax into a search box. In other cases, these vulnerabilities may
be highly subtle, manifesting themselves in scarcely detectable differences in
the application’s behavior, or reachable only through a multistage process of
submitting and manipulating crafted input.
To be confi dent that you have uncovered the back-end injection fl aws that
exist within an application, you need to be both thorough and patient. Practically
every type of vulnerability can manifest itself in the processing of practically
any item of user-supplied data, including the names and values of query string
parameters, POST data and cookies, and other HTTP headers. In many cases, a
defect emerges only after extensive probing of the relevant parameter as you
learn exactly what type of processing is being performed on your input and
scrutinize the obstacles that stand in your way.
Faced with the huge potential attack surface presented by potential attacks
against back-end application components, you may feel that any serious assault
on an application must entail a titanic effort. However, part of learning the art
of attacking software is to acquire a sixth sense for where the treasure is hid-
den and how your target is likely to open up so that you can steal it. The only
way to gain this sense is through practice. You should rehearse the techniques
we have described against the real-life applications you encounter and see how
they stand up.
cc1100..iinndddd 440022 88//1199//22001111 1122::1100::5500 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 403
Chapter 10 n Attacking Back-End Components 403
Questions
Answers can be found at http://mdsec.net/wahh.
1. A network device provides a web-based interface for performing device
confi guration. Why is this kind of functionality often vulnerable to OS
command injection attacks?
2. You are testing the following URL:
http://wahh-app.com/home/statsmgr.aspx?country=US
Changing the value of the country parameter to foo results in this error
message:
Could not open file: D:\app\default\home\logs\foo.log (invalid file).
What steps could you take to attack the application?
3. You are testing an AJAX application that sends data in XML format within
POST requests. What kind of vulnerability might enable you to read
arbitrary fi les from the server’s fi lesystem? What prerequisites must be
in place for your attack to succeed?
4. You make the following request to an application that is running on the
ASP.NET platform:
POST /home.aspx?p=urlparam1&p=urlparam2 HTTP/1.1
Host: wahh-app.com
Cookie: p=cookieparam
Content-Type: application/x-www-form-urlencoded
Content-Length: 15
p=bodyparam
The application executes the following code:
String param = Request.Params[“p”];
What value does the param variable have?
5. Is HPP a prerequisite for HPI, or vice versa?
6. An application contains a function that proxies requests to external domains
and returns the responses from those requests. To prevent server-side
redirection attacks from retrieving protected resources on the application’s
own web server, the application blocks requests targeting localhost or
cc1100..iinndddd 440033 88//1199//22001111 1122::1100::5500 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 404
404 Chapter 10 n Attacking Back-End Components
127.0.0.1. How might you circumvent this defense to access resources
on the server?
7. An application contains a function for user feedback. This allows the user
to supply their e-mail address, a message subject, and detailed comments.
The application sends an email to PI:EMAIL, addressed
from the user’s email address, with the user-supplied subject line and
comments in the message body. Which of the following is a valid defense
against mail injection attacks?
(a) Disable mail relaying on the mail server.
(b) Hardcode the RCPT TO fi eld with feedback@wahh-app.com.
(c) Validate that the user-supplied inputs do not contain any newlines or
other SMTP metacharacters.
cc1100..iinndddd 440044 88//1199//22001111 1122::1100::5500 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 405
CHAPTER
11
Attacking Application Logic
All web applications employ logic to deliver their functionality. Writing code
in a programming language involves at its root nothing more than breaking
a complex process into simple and discrete logical steps. Translating a piece
of functionality that is meaningful to human beings into a sequence of small
operations that can be executed by a computer involves a great deal of skill and
discretion. Doing so in an elegant and secure fashion is harder still. When large
numbers of different designers and programmers work in parallel on the same
application, there is ample opportunity for mistakes to occur.
In all but the simplest of web applications, a vast amount of logic is performed
at every stage. This logic presents an intricate attack surface that is always
present but often overlooked. Many code reviews and penetration tests focus
exclusively on common “headline” vulnerabilities such as SQL injection and
cross-site scripting, because these have an easily recognizable signature and
well-researched exploitation vector. By contrast, fl aws in an application’s logic
are harder to characterize: each instance may appear to be a unique one-off
occurrence, and they usually are not identifi ed by any automated vulnerability