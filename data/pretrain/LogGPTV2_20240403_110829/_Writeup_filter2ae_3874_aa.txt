# 鹤城杯 Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Mobile
###  AreYouRich
JEB分析可知用户名需要10位，密码是用户名异或一个常数+[@001](https://github.com/001 "@001")
后续分析发现flag是根据用户名和密码生成的，在另一个类里找到提示，发现RC4加密，提取密文密钥解密。
    密文：0x51,0xf3,0x54,0x92,0x48,0x4d,0xa0,0x4d,0x20,0x8d,0xb5,0xda,0x9f,0x45,0xc0,0x31,0x8e,0x53,0x87,0x2b,0xca,0xe4,0xc9,0x6d,0x0e
    key:5FQ5AaBGbqLGfYwjaRAuWGdDvyjbX5nH
得到异或key`vvvvipuser_TTTTKRWQGP[@001](https://github.com/001 "@001")`
密文`0f460329013023403a32006564630b7b34083c773e73491110`
异或得到flag
> y0u _h[@V3](https://github.com/V3
> "@V3")_[@_107_0f_m0n3y](https://github.com/_107_0f_m0n3y "@_107_0f_m0n3y")!!
###  DesignEachStep
直接使用JEB动态调试，每次比对时断下可以找到key
key1:DE5_c0mp
key2:r355_m[@y](https://github.com/y "@y")
key3:_c0nfu53
> DE5_c0mpr355_m[@y_c0nfu53](https://github.com/y_c0nfu53 "@y_c0nfu53")
## RE
###  petition
栈上的异或加密，IDAPython脚本提取即可。
    from idaapi import *
    from idc import *
    def getflag(func_addr): 
     end_addr = ida_funcs.get_func(func_addr).end_ea 
     addr = func_addr + 8
     key = []
     while(addr ROT13 -> AES -> RC4 -> SHA1 -> Base58 -> sha256 -> md2 -> des ->
md5。
都需要爆破，经过实验可知字符集为`asdfghjkl`。
Blowfish
    import blowfish
    a = 0xD79FD778F60C9E9F
    t = "asdfghjkl"
    a = int.to_bytes(a,8,byteorder='little')
    for e1 in range(0,len(t)):
        print("yes1")
        for e2 in range(0,len(t)):
            for e3 in range(0,len(t)):
                for e4 in range(0,len(t)):
                    x = b"MeowMeow"
                    tmp = (t[e1] + t[e2] + t[e3] + t[e4]).encode()
                    tmp += int.to_bytes(0x72668754,4,byteorder='little')
                    cipher = blowfish.Cipher(tmp)
                    if cipher.encrypt_block(x) == a:
                        print((t[e1] + t[e2] + t[e3] + t[e4]).encode())
                        exit(0)
    # gagf
ROT13
    khgs
AES
    from Crypto.Cipher import AES
    mode = AES.MODE_ECB
    key = b"YouNeedaPassword"
    l1 = [0x44, 0x32, 0x66, 0xCB, 0xAB, 0xE9, 0x2F, 0x97, 0xED, 0x34, 0x92, 0xA7, 0x3C, 0x94, 0xB0, 0xEE]
    t = "asdfghjkl"
    for e1 in range(0,len(t)):
        print("ok")
        for e2 in range(0,len(t)):
            for e3 in range(0,len(t)):
                for e4 in range(0,len(t)):
                    tmp = (t[e1] + t[e2] + t[e3] + t[e4]).encode()
                    a = tmp + int.to_bytes(0xF889D441683FBCEFECE468CD,12,byteorder='little') + bytes([0x29,0x2E,0x29,0x60,0xF6,0xDE,0x84,0x1A,0x50,0xE7,0x3E,0xEC,0x4D,0x5A,0x2A,0x7C])
                    c = AES.new(a,mode)
                    m = c.encrypt(key)
                    if b"\x44\x32\x66" in m:
                        print(a)
                        print(m)
    # gdgf
-> RC4
    // ConsoleApplication4.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
    //
    #include 
    using namespace std;
    void rc4_init(unsigned char *s, unsigned char *key, unsigned long Len)
    {
            int i = 0, j = 0;
            char k[256] = { 0 };
            unsigned char tmp = 0;
            for (i = 0; i >>>";
            for (int e1 = 0; e1 >>>";
                                            key[0] = table[e1];
                                            key[1] = table[e2];
                                            key[2] = table[e3];
                                            key[3] = table[e4];
                                            //printf("%s\n", key);
                                            memset(s, 0, 256);
                                            rc4_init(s, (unsigned char*)key, 4); //已经完成了初始化
                                            rc4_crypt(s, (unsigned char*)pData, 30);//加密
                                            if (pData[0] = 0x3F && pData[1] == 0x9F && pData[2] == 0x30)
                                            {
                                                    printf("====%s\n", key);
                                                    for (int i = 0; i  flag{verY_g00d_YoU_f0und_th1s}
###  流量分析
直接正则匹配
    import re
    s = r"from%20t\),([0-9]*),1\)\)=([0-9]*)"
    pat = re.compile(s)
    f = open("timu.pcapng","rb")
    st = f.read().decode("utf-8","ignore")
    lis = pat.findall(st)