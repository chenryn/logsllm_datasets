### 第二部分 实战案例

#### 2.1 WordPress 和 MySQL 容器配置
在设置 WordPress 和 MySQL 容器时，`MYSQL_ROOT_PASSWORD` 环境变量的值可以设置为随机字符串，默认情况下使用随机生成的 SHA1 值。同时，还需要设置多个加密盐环境变量以增强安全性：
- `WORDPRESS_LOGGED_IN_SALT=...`
- `WORDPRESS_NONCE_SALT=...`
- `WORDPRESS_AUTH_SALT=...`
- `WORDPRESS_SECURE_AUTH_SALT=...`
- `WORDPRESS_LOGGED_IN_KEY=...`
- `WORDPRESS_NONCE_KEY=...`

WordPress 的数据库用户名默认为“root”，其密码默认与 MySQL 容器的连接密码相同。

#### 2.2 Docker 容器性能和管理
Docker 容器在开发环境中非常方便，但在生产环境中需要考虑性能和其他因素。建议将数据目录映射到宿主机上，以便于备份和持久化。此外，在运行中的容器中无法修改某些配置，例如网络端口映射等。因此，在创建镜像时需提前规划好容器的用途及所需资源。

#### 2.3 中间件服务器
中间件服务器是 Docker 容器应用的理想选择，主要因为它们结构清晰、易于集群，并且迁移和批量部署方便。常见的 Java 中间件如 Tomcat 和 WebLogic 在 Docker 中的应用十分广泛。

#### 2.4 数据库应用
本章节介绍了基于 Docker 的 MySQL、Oracle 和 MongoDB 镜像的创建及使用方法。这些数据库各有特点，适用于不同场景下的需求。
- **MySQL**：开源关系型数据库，以其高性能和可靠性著称。
- **Oracle XE**：适合入门级用户的小型数据库，免费且易于管理。
- **MongoDB**：非关系型数据库，支持复杂的数据类型和查询语言，适合大规模并行处理。

##### 2.4.1 MySQL 镜像构建
1. 从 GitHub 下载 MySQL 镜像项目：
   ```bash
   $ git clone https://github.com/DockerPool/mysql.git
   ```
2. 构建 Docker 镜像：
   ```bash
   $ sudo docker build -t mysql:latest .
   ```
3. 启动容器：
   ```bash
   $ sudo docker run -d -P --name mysql mysql
   ```

##### 2.4.2 Oracle XE 镜像使用
1. 搜索并下载 Oracle XE 镜像：
   ```bash
   $ sudo docker search wnameless/oracle-xe-11g
   $ sudo docker pull wnameless/oracle-xe-11g
   ```
2. 启动主从模式的 Oracle XE 容器：
   ```bash
   $ sudo docker run -d -e REPLICATION_MASTER=true --name mysql wnameless/oracle-xe-11g
   $ sudo docker run -d -e REPLICATION_SLAVE=true --link mysql:mysql wnameless/oracle-xe-11g
   ```

##### 2.4.3 MongoDB 镜像
MongoDB 由于其高性能、易部署和易使用的特点，在许多领域得到了广泛应用。它支持复杂的数据类型和强大的查询语言，提供了关系数据库的大部分功能。

通过以上步骤，读者可以掌握如何在 Docker 中构建和使用各种数据库镜像，满足不同的应用场景需求。