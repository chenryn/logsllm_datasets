(13,0.5,1)
0.15
0.8494
0.8493
0.8500
0.8500
0.8500
0.8500
0.8500
0.8500
0.2
0.7961
0.7956
0.7997
0.7997
0.7997
0.7997
0.7997
0.7997
0.25
0.7356
0.7337
0.7472
0.7470
0.7472
0.7470
0.7472
0.7470
0.3
0.6614
0.6557
0.6864
0.6854
0.6866
0.6856
0.6864
0.6853
0.35
0.5658
0.5532
0.6068
0.6036
0.6072
0.6040
0.6065
0.6033
(To, γ) \ α
0.3
0.6921
(3,0)
(3,0.5)
(3,1)
(6,0)
(6,0.5)
(6,1)
(9,0)
(9,0.5)
(9,1)
0.35
0.6084
0.5997
0.5771
0.6397
0.4
0.4842
0.4534
0.4292
0.5283
0.5056
0.4899
0.5566
0.5388
0.5269
0.45
0.3097
0.2575
0.2406
0.3454
0.2945
0.2816
0.3690
0.3210
0.3098
PT
0.3022
0.3021
0.2918
0.3549
0.3509
0.3428
0.3752
0.3702
0.3647
Fig. 4. Selﬁsh mining in Fruitchains, To = 3. Attacker fruits mined before
the To-th attacker block are embedded in both chains, whereas honest fruits
are only embedded in honest blocks. The attacker loses only the strawberry
if losing the block race; however, if the attacker wins the race with ≥ To
attacker blocks, all honest fruits are invalidated.
Result 5: In terms of I(α), Fruitchains performs worse than
that of NC for various parameter choices when γ = 0.
In NC, when γ = 0, a weak attacker publishes the blocks
immediately after they are mined, giving up the temporary lead
to avoid losing the block rewards. In contrast, in Fruitchains,
as blocks receive no reward, the attacker has no incentive
to publish any blocks when neither chain reaches length To.
This property encourages more audacious block-withholding
behaviors aiming to orphan all honest fruits with a long
attacker chain. Moreover, this property decreases the proﬁtable
threshold to zero: the attacker can withhold blocks as long as
the attacker chain is in the lead, regardless of how small α is.
An examination of the optimal strategies veriﬁes our inference.
Fruitchains performs better than NC when γ = 1. This is
because in Fruitchains—unlike in NC—winning a block race
with a short chain does not increase the attacker’s relative
revenue.
Result 6: In Fruitchains, I(α) increases along with To, at
the price of longer transaction conﬁrmation delay.
As To increases, the chance that the attacker chain reaches
To before the public chain decreases, limiting the attacker’s
unfair relative revenue. According to the authors, I(α) gets
arbitrarily close to the ideal value 1−α with a large enough To.
Unfortunately, as To ≤ σ + 1, σ must increase along with To,
resulting in longer transaction conﬁrmation time. Fruitchains’s
authors have not speciﬁed the value of To.
Next we study the inﬂuence of Ratiof2b on I(α). Two other
Ratiof2b values, 2 and 0.5, are chosen for To = 13. The results
can be found in the last four lines of Table III.
Result 7: In Fruitchains, I(α) increases along with Ratiof2b,
at the price of more repeating transactions in different fruits.
This result is similar to that of the Newton-Pepys prob-
lem [54]: a higher Ratiof2b lowers the execution’s variance,
thus favors the compliant miners with majority mining power.
However, the gain comes with a trade-off: more parallel fruits
contain more repeating transactions, which demands better
network optimization to avoid wasting bandwidth.
2) RS: Three different To values are chosen: 3, 6 and 9.
To = 6 here is roughly equivalent to To = 7 in Fruitchains:
in both cases, the ﬁrst honest unit’s reward is removed when
the sixth attacker chain block is accepted by all miners. The
proﬁtable thresholds are also calculated. We set lmax = 30 and
all data points converge. The results are shown in Table IV.
Result 8: In RS, I(α) increases along with To.
RS with To = 3 outperforms Fruitchains with To = 7
for all inputs. I(α) is further improved when To increases.
For any α < 0.5, RS is able to achieve the ideal I(α) with
a large enough To, rather than getting asymptotically close
to the ideal value as in Fruitchains. This is because unlike
Fruitchains where block withholding has no risk, in RS half of
the secret blocks’ rewards are at risk even if the attacker wins
the block race. Therefore, when the potential risk outweighs
the relative revenue gain in selﬁsh mining, the attacker follows
the compliant strategy and I(α) = 1 − α.
3) Subchains: The maximum numbers of blocks in both
chains are set to 20. The length difference of the chains diffu
is set in range [−5, 20]. The attacker is forced to end the
block race once the border numbers are reached. Two different
Ratiow2b values, 2 and 3 are selected to verify whether a larger
weak-block-to-block ratio results in a higher I(α). The results
are selectively displayed in Table V.
Result 9: In Subchains, P T = 0 for all parameter combi-
nations. In other words, Subchains is not incentive compatible
regardless of how weak the attacker is.
We examine the optimal strategies and discover a series
of attacks. For example, when the ﬁrst several units in a
block race are attacker weak blocks, the attacker will not
publish them regardless of how small α is, as weak blocks
183
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
timehonest blockattacker blockpointer blockparent blockI(α) OF SUBCHAINS, UPPER BOUNDS, SELECTIVELY SHOWN. ENTRIES
PERFORM WORSE THAN NC ARE IN RED ITALIC.
TABLE V
(Ratiow2b, γ) \ α
(2,0)
(2,0.5)
(2,1)
(3,0)
(3,0.5)
(3,1)
0.1
0.8990
0.8970
0.8889
0.8987
0.8960
0.8889
0.15
0.8467
0.8426
0.8235
0.8456
0.8401
0.8235
0.2
0.7922
0.7853
0.7500
0.7895
0.7804
0.7500
0.25
0.7342
0.7241
0.6667
0.7288
0.7156
0.6667
0.3
0.6712
0.6570
0.5714
0.6613
0.6432
0.5714
Fig. 5. A typical selﬁsh mining strategy for a weak attacker in Subchains.
The attacker withholds only weak blocks to invalidate honest blocks. In this
example, honest block B is invalidated by attacker weak blocks v and w.
receive no reward. These weak blocks are used to invalidate
honest blocks, thus increasing the attacker’s relative revenue.
Consequently, Subchains is never incentive compatible.
Subchains always performs worse than NC with γ < 1.
Two protocols are equally bad when γ = 1, because in
both protocols, every attacker unit can orphan an honest unit
without any risk.
Result 10: In Subchains, I(α) decreases as Ratiow2b in-
creases.
Unfortunately, a larger Ratiow2b does not help I(α). This
is because more weak blocks give the attacker more windows
to orphan honest blocks with attacker weak blocks.
VI. SUBVERSION GAIN ANALYSIS
A. Modeling Subversion Gain
Similar to previous works [26], [31], [32], all subversion
gain MDPs output average reward per step, rather than the
relative revenue, as the latter value has no practical meaning.
1) NC and RS: Our NC subversion gain MDP extends
previous works [26], [31], [32] by allowing the merchant
to delay delivery if the conﬂicting transaction is broadcast
before the ﬁrst payment transaction in a block race receives
σ conﬁrmations. In order to carry this “early publication”
information to reward allocation, we introduce an extra ﬁeld
matched in the state representation, which is a binary value
encoding whether the earliest attacker block in this block race
is published to cause a tie before σ conﬁrmations. When
all miners accept some attacker blocks into the blockchain
and matched = false, the attacker receives double-spending
rewards Rds in addition to the block rewards, which is deﬁned
according to Eqn. (1) in Sect. III-A3. RS’s subversion gain
MDP follows the same modiﬁcations.
2) Fruitchains: Fruitchains’s subversion gain MDP issues
Rds according to Eqn. (1) when the attacker wins a block
race. There is no need to introduce a matched ﬁeld, as our
Fig. 6. Subversion gain S(α, σ, Vds) of four protocols when γ = 1, σ =
6, Rds = 3, lmax = 24. Larger number indicates worse performance.
Fig. 7. Subversion bounty Rsb(α, σ) of NC and RS, γ = 0.95.
Fruitchains MDP does not allow publishing part of the attacker
chain. Note that k and σ in the equation only count the
number of blocks, as fruits do not contribute to the transaction
ordering. The outputs are normalized to average reward per
conﬁrmation, namely per block, rather than per unit, in line
with other protocols in comparison.
3) Subchains: As our Subchains MDP does not encode the
public chain’s length, we assume the service or goods are
delivered when the transaction is conﬁrmed by σ(cid:48) blocks,
so that σ(cid:48) × Ratiow2b is roughly equivalent to σ in other
protocols. In line with other protocols’ “one unit of block
reward per conﬁrmation” rule, each main chain block receives
Ratiow2b reward units. The double-spending reward Rds is
also multiplied by Ratiow2b to incorporate the transactions
embedded in weak blocks and later reverted. A matched ﬁeld
is added to the state encoding, similar to that of NC and RS.
B. Evaluation Results
1) Subversion gain: We display results from one set of
parameters and inputs that cover all new insights in Fig. 6. The
attacker has the strongest propagation advantage, i.e., γ = 1.
We set σ = 6 following Bitcoin’s convention. Rds is set to 3,
which is of the same order of magnitude as the block reward,
forcing the attacker to balance two kinds of rewards. The
timeout thresholds To are set to 7 and 6 in Fruitchains and
RS, respectively. Ratiof2b and Ratiow2b are set to 1 and 2 in
Fruitchains and Subchains. We set the maximum number of
blocks in a block race in Subchains bmax = 12, and lmax = 24
in the three other protocols to ensure a fair comparison.
Result 11: The subversion gain S(α, σ, Vds) of Fruitchains
and Subchains is larger than that of NC in our setting, while
184
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
timehonest blockhonest weak blockpublishing timeBnetworkvattacker weak blockattacker blockw00.10.20.30.40.50.60.70.10.150.20.250.30.350.40.45 niag noisrebuSS(α, 6, Vds)The attacker's mining power share αSubchains (lower bounds)Fruitchains (lower bounds)NCRS0.010.111010010000.10.20.30.4 ytnuob noisrevbuSRsb(α, σ)The attacker's mining power share αNC, σ=3NC, σ=6RS, σ=3RS, σ=6that of RS is smaller.
Fruitchains and Subchains perform worse than NC for
most α values. Fruitchains appears to achieve better perfor-
mance when α = 0.45 due to its MDP’s limited action
set. Indeed,
if we truncate NC’s and RS’s action sets to
the same as Fruitchains’s, they outperform Fruitchains when
α = 0.45. The reasons of Subchains’s and Fruitchains’s
unsatisfactory performance are similar to those of their I(α).
As blocks in Fruitchains and weak blocks in Subchains have
no reward, withholding them is risk-free. More audacious
block-withholding behaviors result in higher expected double-
spending reward regardless of how small Rds is.
RS achieves better double-spending resistance than NC, and
sometimes even achieves the ideal value 0, because the attacker
has to balance the potential gain of double-spending and the
potential loss in block rewards. When the risk outweighs the
beneﬁt, the attacker follows the compliant strategy.
2) Subversion bounty: To further evaluate a protocol’s
double-spending resistance, we deﬁne the subversion bounty
Rsb(α, σ) as the minimum Rds that causes a rational attacker
to deviate from the compliant strategy. We only compute
Rsb(α, σ) for NC and RS as Rsb(α, σ) ≡ 0 in the two other
protocols. We choose γ = 0.95 rather than 1, because in the
latter case, the attacker never follows the compliant strategy