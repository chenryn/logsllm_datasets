# An Integrated Framework for Security Protocol Analysis

## Authors
- Marcin Olszewski, Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, USA
- Lukasz Cyra, Gdansk University of Technology, 11/12 Gabriela Narutowicza Street, 80-952 Gdansk-Wrzeszcz, Poland

## Abstract
Ensuring the security of protocols is critical, as flaws can compromise the security of applications that depend on them. Analyzing these protocols is challenging, and it is recommended to use formal methods to achieve higher assurance levels. However, formal methods alone may not cover the entire scope of the problem. It is essential that the formal models accurately represent the protocol and its application context. This paper introduces an analytical framework that integrates object-oriented and formal modeling approaches. Object models are used to capture relevant aspects of the protocol and its security context, facilitating communication with protocol designers. Formal models are then applied to verify the security properties of the protocol. The applicability of this framework has been demonstrated through several industrial case studies.

## Categories and Subject Descriptors
- [Computer-Communication Networks]: Network Protocols - C.2.2 (Protocol Verification)
- [Mathematical Logic and Formal Languages]: F.4.3 (Formal Languages)

## General Terms
- Documentation, Design, Security, Verification

## Keywords
- Analytical framework, object orientation, security protocols, formal methods

## 1. Introduction
Security protocols are prone to subtle design errors that are difficult to analyze. Ensuring the security of such protocols often requires advanced analytical methods, and formal methods are particularly well-suited for this task. In recent years, there have been numerous attempts to apply formal methods to the analysis of security protocols [1].

However, the successful application of formal methods in security protocol analysis faces several limitations. Verifying protocol properties involves complex computations that can easily exceed available resources. Additionally, many practically significant protocols are too complex to be efficiently analyzed. Abstraction and decomposition principles can sometimes manage this complexity.

A formal model is always a simplification of the real protocol and is based on numerous assumptions [2]. To ensure the traceability of modeling decisions and assumptions, and to relate the results of formal analysis to the original designs, the analysis should be conducted within a proper framework. Such a framework should support the informal-to-formal transformation of the protocol specification, identify and document underlying assumptions, and present the results of the analyses clearly and comprehensively. It should also facilitate considering the protocol in its operational environment and monitoring the validity of the underlying assumptions. The framework should be flexible enough to accommodate different formal techniques and benefit from their diversity.

We propose an integrated framework for security protocol analysis that combines formal modeling techniques for cryptographic protocol verification with object-oriented analysis in a well-defined engineering process. This framework ensures that the user documents the results of the analyses and identifies and documents all underlying assumptions. Semi-formal object-oriented modeling, combined with formal modeling and analysis, leverages the strengths of both: the comprehensibility and versatility of object models, and the precision, unambiguity, and rigor of formalism.

In the following sections, we first overview related works, then briefly describe the proposed framework, and demonstrate its applicability through two case studies. Finally, we summarize our contribution and outline plans for future research.

## 2. Related Work
Numerous formal approaches to security protocol analysis have been proposed [1, 3]. The main differences lie in the general modeling approach and the methods of performing the analyses. The latter distinguishes between theorem proving and model checking. Theorem proving includes techniques based on specialized logics, such as BAN [4], and methods like Paulsonâ€™s inductive approach [5] or those relying on abstract algebras and morphisms [3]. Model checking approaches include methods created specifically for the security domain, like AVISPA [6] or strand-spaces of Athena [7], as well as approaches derived or adapted from established formal frameworks, such as CSP process algebra [8], FOCUS [9], or spi-calculus [10].

In our work, we focus on model checking techniques and use them as 'building blocks' of the proposed framework. These blocks are embedded in a UML-based context, which supports the modeling task before the actual formalization of the protocol. In practice, such modeling is often performed very informally, supported by textual descriptions and some diagrams, or the so-called "standard notation" with Alice and Bob exchanging messages [11]. Our contribution is to propose UML as the primary mechanism to support this pre-formalization modeling task.

UML models of a protocol must eventually be transformed into formal models. The problem of refining UML models into more precise notations and languages, or even executable code, is complex [12, 13] and remains an active area of research in software engineering. Some recent results are based on the concept of viewpoints and unification [14]. A viewpoint is a partial model of a system prepared in an object-oriented notation like UML. Unification is the process of combining partial models into a complete formal specification, which can be further refined towards executable code.

Modeling security-critical systems and protocols in UML is not a new idea. Jurjens [15] proposes UMLsec, a UML dialect for modeling heterogeneous systems and their security properties, including communication activities. UMLsec is a powerful modeling tool with a wide scope, designed for formalization and analysis, including code generation. Our modeling approach is more focused than UMLsec, using simpler and fewer modeling constructs. Our approach is pattern-oriented, making UML modeling more streamlined by clearly defining the focus of analysis. While UMLsec addresses many issues outside security protocol analysis, our framework is more specific, covering areas such as modeling assumptions and constraints resulting from formalization.

The integration of UML and formal methods for cryptographic protocol specification, design, and analysis was studied in the CASENET project [16]. CASENET delivered an integrated approach encompassing the entire lifecycle of a protocol, from gathering functional requirements through protocol specification and design to implementation, validation, and testing. UML diagrams are used to capture requirements and model the dynamics of protocols, assisted by a SRL formal language. A suite of advanced applications, including a powerful commercial validation tool SAFIRE, supports the CASENET methodology. Our framework is more lightweight than the CASENET approach, focusing on protocol modeling and analysis, and the traceability of the analysis process. Protocol design and implementation fall outside the scope of our framework. Protocol modeling and specification in CASENET are tightly integrated with supporting tools, which can be an advantage in terms of automation and scalability. Our framework assumes a loose coupling with formal methods and supporting tools, providing more flexibility and allowing the exploitation of additional potential from their diversity. We report on our experience with using different formalisms: CSP/Casper, FOCUS, and AVISPA.

## 3. Framework Description

### 3.1 Framework Architecture
The framework integrates various methods and tools to support the user throughout the different phases of protocol analysis, starting from an informal, technical formulation of the protocol and its environment, through modeling the protocol and its context using semi-formal, graphical notations and tools, and ending with a formal model and its precise, mathematically founded analyses.

The main components of the framework are illustrated in Figure 1.

**Figure 1. Components of the Integrated Framework for Protocol Analysis**

The core of the framework is the analytical procedure, which defines a workflow to be followed when applying the framework. Here is an overview of the procedure steps:

- **Analysis of Input Material**: Elicitation of facts relevant to protocol modeling and analysis based on documentation such as protocol specifications, design documents, technical reports, and interviews with designers.
- **Identification of Assumptions and Simplifications**: Identification and documentation of assumptions related to the protocol and its environment, including all necessary simplifications for feasible modeling and formal analysis.
- **Identification of Security Goals**: Identification and specification of the security objectives of the protocol and its subprotocols, which are verified during formal analysis.
- **Validation of Analysis Scope**: Validation of the results of the previous steps with the help of domain experts and protocol designers.
- **Semi-Formal Modeling and Analysis**: Development of UML object models representing protocol participants and their interactions, the threat model, and documenting all security objectives and underlying assumptions.
- **Formal Modeling and Analysis**: Development of a formal model of the protocol and verification of the formal model against the security objectives of the protocol. Formal modeling and analysis can be carried out using one of the following methods and tools: Casper/CSP, FOCUS, and AVISPA.
- **Documenting the Results**: The results of the analysis are documented using a predefined template.

### 3.2 UML Modeling
The object modeling component of the framework is based on UML [17]. The language is extended by stereotypes proposed for common elements of protocol models, such as `<<Participant>>`, `<<State>>`, and `<<Interaction>>`, derived respectively from UML actor, object state, and object interaction. The next step is a complete domain-specific UML profile [18], which aligns with the OMG recommendation for UML users who want unambiguity and support for tool automation [19]. UML 2.0 offers a revised profiling mechanism, where stereotypes are introduced through inheritance from a standard UML metaclass, and domain-specific features of the new stereotypes are expressed formally using the Object Constraint Language (OCL).

To assist users in using the proposed UML extension, we provide a set of patterns. Each pattern defines a scheme for constructing a particular aspect of the protocol model from a specific perspective. The patterns were defined with the needs of protocol formalization in mind. For example, all three formal techniques we have experimented withâ€”Casper/CSP, AVISPA, and FOCUSâ€”required the inclusion of certain aspects in the specification.

**Figure 2. Security Protocol Modeling Perspectives**

Patterns are defined according to the following template:
- **Pattern Name**: A descriptive name of the pattern
- **Intent**: The modeling issues addressed by the pattern
- **Definition**: A UML diagram defining the pattern and a description of the pattern and its elements
- **How It Works**: An explanation of how the pattern works in practice, supported by a real example from one of the case studies
- **Reference to Other Patterns**: How patterns are used together to address the overall modeling task

By using these patterns, analysts can better understand the way each concept is used, not just by studying OCL constraints but by observing how the concept behaves in relation to other concepts.