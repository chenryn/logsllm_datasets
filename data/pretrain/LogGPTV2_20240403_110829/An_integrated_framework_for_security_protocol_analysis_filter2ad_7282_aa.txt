title:An integrated framework for security protocol analysis
author:Marcin Olszewski and
Lukasz Cyra
An Integrated Framework for Security Protocol Analysis 
Marcin Olszewski 
Microsoft Corporation 
One Microsoft Way 
Redmond, WA 98052, USA 
PI:EMAIL 
Lukasz Cyra 
Gdansk University of Technology 
11/12 Gabriela Narutowicza Street 
80-952 Gdansk-Wrzeszcz, Poland 
PI:EMAIL 
ABSTRACT 
Assurance  of  security  protocols  needs  particular  attention.  Flaws 
in a protocol can devastate security of the applications that rely on 
it. Analysis of the protocols is difficult and it is recommended that 
formal  methods  are  employed  to  provide  for  higher  levels  of 
assurance. However, the formal methods can cover only a part of 
the  scope  of  the  problem.  It  is  important  that  the  formal  models 
are  valid  representations  of  the  protocol  and  that  the  application 
context  is  adequately  represented.  In  the  paper  we  present  an 
analytical  framework  that  integrates  the  object-oriented  and 
formal  modeling  approaches.  Object  models  are  used  to  capture 
the relevant aspects of the protocol and its security context and to 
communicate  with  the  protocol  designers.  Formal  models  are 
applied to verify the protocol security properties. Applicability of 
the  framework  was  demonstrated  by  several  industrial  case 
studies. 
Categories and Subject Descriptors 
[Computer-Communication  Networks]:  Network 
C.2.2 
protocols - protocol verification; F.4.3 [Mathematical Logic and 
Formal Languages]: Formal Languages 
General Terms 
Documentation, Design, Security, Verification. 
Keywords 
analytical framework, object orientation 
1.  INTRODUCTION 
Security  protocols  are  subjected  to  subtle  design  errors  that  are 
difficult  to  analyze.  Assuring  such  protocols  requires  application 
of  advanced  analytical  methods  and  is  commonly  perceived  as  a 
niche where formal methods can be successfully applied. In recent 
years  there  were  numerous  attempts  to  apply  formal  methods  to 
security protocols analysis [1]. 
Successful  application  of  formal  methods  in  the  analysis  of 
security  protocols  faces  several  limitations.  Verification  of 
protocol  properties  implies  complex  computations  which  can 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ASIACCS'08, March 18-20, Tokyo, Japan 
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00. 
77
easily  exceed  the  available  resources.  In  many  cases  the 
practically  significant  protocols  are  too  complex  to  be  efficiently 
analyzed.  This  complexity  can  be  sometimes  managed  by 
applying abstraction and decomposition principles. 
A formal model is always a simplification of the real protocol and 
is based on numerous assumptions [2]. To achieve the traceability 
of modeling decisions and assumptions and to be able to relate the 
results  of  formal  analysis  to  original  designs,  the  analysis  should 
be  carried  out  within  a  proper  framework.  Such  a  framework 
should  support  the  informal-to-formal  transformation  of  the 
protocol  specification,  identification  and  documentation  of  the 
underlying  assumptions  and  clear  and  complete  presentation  of 
the results of the analyses. It should also facilitate considering the 
protocol  in  its  operational  environment  and  monitoring  the 
validity of the underlying assumptions. The framework should be 
flexible  enough  to  accommodate  different  formal  techniques  and 
benefit from their diversity. 
We  propose  an  integrated  framework  for  security  protocol 
analysis  which  combines  formal  modeling 
techniques  for 
cryptographic  protocol  verification  with  object-oriented  analysis 
in a well-defined engineering process. The framework ‘forces’ its 
user  to  document  the  results  of  the  analyses  and  to  identify  and 
document  all  the  underlying  assumptions.  Semiformal  object-
oriented  modeling  combined  with  formal  modeling  and  analysis 
complement  each  other  making  use  of 
their  strengths: 
comprehensibility  and  versatility  of  object  models  and  precision, 
unambiguity and rigor of the formalism. 
In  the  subsequent  sections  we  first  overview  the  related  works, 
then briefly describe the proposed framework and demonstrate its 
applicability in the context of two case studies. In conclusions we 
summarize our contribution and present plans for future research. 
2.  RELATED WORK 
To date, numerous formal approaches to security protocol analysis 
have  been  proposed  [1,  3].  Main  differences  are  in  the  general 
modeling  approach  taken  by  a  method  and  in  the  ways  of 
performing the analyses. The latter distinguishes between theorem 
proving  and  model  checking.  Theorem  proving 
includes 
techniques based on specialized logics, such as BAN [4], but also 
methods like Paulson’s inductive approach [5] or those relying on 
abstract algebras and morphisms [3]. Model checking approaches 
include methods created specifically for the security domain, like 
AVISPA  [6]  or  strand-spaces  of  Athena [7], but also approaches 
derived  or  adapted  from  already  established  formal  frameworks, 
like CSP process algebra [8], FOCUS [9] or spi-calculus [10]. 
In  our  work  we  concentrate  on  model  checking  techniques  use 
them  a  ‘building  blocks’  of  the  proposed  framework.  Those 
blocks  are  embedded  in  the  UML  based  context  which  provides 
support to the modeling task before the actual formalization of the 
protocol. In practice, such modeling is performed most times very 
informally.  It  is  supported  by  textual  descriptions  and  some 
diagrams,  or  the  so-called  „standard  notation”  –  with  Alice  and 
Bob exchanging messages [11]. Our contribution is by proposing 
UML as a main mechanism to support this ‘before formalization’ 
modeling task. 
UML models of a protocol have to be eventually transformed into 
formal  models.  In  general,  the  problem  of  refinement  of  UML 
models  into  more  precise  notations  and  languages  or  even 
executable code is a complex [12, 13] and still a subject of active 
research in the field of software engineering. Some recent results 
are  based  on  the  concept  of  viewpoints  and  unification  [14].  A 
viewpoint  is  a  partial  model  of  a  system,  prepared  in  an  object-
oriented  notation,  such  as  UML.  Unification  is  a  process  of 
combining  partial  models  into  a  complete  formal  specification 
which may become further refined towards executable code. 
Modeling security-critical systems and protocols in UML is not a 
new  idea. In [15] Jurjens proposes UMLsec – a UML dialect for 
modeling  heterogonous  systems  and  their  security  properties 
including  communication  activities.  UMLsec  has  a  wide  scope 
and  is  a  powerful  modeling  tool.  Models  are  prepared  with  the 
purpose of formalization and analysis, including code generation. 
Our  modeling  approach  is  more  focused  than  UMLsec.  It  uses 
simpler  and  fewer  modeling  constructs.  Our  approach  is  pattern-
oriented.  By  using  patterns  we  make  the  UML  modeling  more 
streamlined by clearly defining the focus of analysis. UMLsec has 
a  far  larger  scope  and  addresses  many issues outside the security 
protocol  analysis.  By  focusing  our  framework  on  security 
protocols we managed to obtain a tool which is simpler but at the 
same  time  covers  some  areas  specific  to  protocols  which  were 
neglected  in  [15],  such  as  modeling  assumptions  or  constraints 
resulting from formalization. 
Integration  of  UML  and  formal  methods  for  the  purpose  of 
cryptographic  protocols  specification,  design  and  analysis  was 
studied  in  the  CASENET  project  [16].  CASENET  delivered  an 
integrated  approach  encompassing  the  entire  lifecycle  of  a 
protocol  –  from  gathering  of  functional  requirements  through 
protocol  specification  and  design  to  implementation  (or  rather, 
construction  from  modular  components),  validation  and  testing. 
UML  diagrams  are  used  to  capture  requirements  and  model  the 
dynamics  of  protocols,  the  notation  is  assisted  by  a  SRL  formal 
language. A suit of advanced applications support the CASENET 
methodology,  including  a  powerful  commercial  validation  tool 
SAFIRE. Our framework is more light weight than the CASENET 
approach.  It  focuses  on  protocol  modeling  and  analysis  and  on 
traceability of the analysis process and communicating the results 
to 
In  particular,  protocol  design  and 
implementation fall outside the scope of our framework. Protocol 
modeling  and  specification  in  CASENET  are  very  tightly 
integrated  with  the  supporting  tools  which  can  be  considered  an 
advantage in terms of automation and scalability. Our framework 
assumes  a  loose  coupling  with  formal  methods  and  supporting 
tools,  which  gives  more  flexibility  and  helps  in  exploiting  an 
additional potential resulting from their diversity. In the sequel we 
report  on  our  experience  with  using  different  formalisms: 
CSP/Casper, FOCUS and AVISPA. 
the  stakeholders. 
3.  FRAMEWORK DESCRIPTION 
3.1  Framework architecture 
The  framework  integrates  various  methods  and  tools  with  the 
intention of supporting the user while carrying different phases of 
protocol  analysis,  starting 
‘technical’ 
formulation  of 
through 
modeling the protocol and its context using semiformal, graphical 
notations and tools and ending at a formal model and its precise, 
mathematically founded analyses.  
the  protocol  and 
its  environment, 
from  an 
informal, 
The main components of the framework are illustrated in Figure 1. 
Figure  1.  Components  of  the  integrated  framework  for 
protocol analysis 
The  heart  of  the  framework  is  the  analytical  procedure  which 
defines a workflow to be followed while applying the framework. 
Here is an overview of the procedure steps: 
Analysis  of  input  material  –  Elicitation  of  facts  relevant  to 
protocol  modeling  and  analysis  based  on  documentation  such  as 
protocol  specifications,  design  documents,  technical  reports  but 
also  taking  into  account  interviews  with  designers,  meeting 
reports etc. 
of 
assumptions 
Identification 
– 
Identification  and  documentation  of  assumptions  related  to  the 
protocol  and  its  environment.  It  also  includes  identification  and 
documentation  of  all  simplifications  necessary  for  making  the 
modeling and formal analysis feasible.  
simplifications 
and 
Identification of security goals – Identification and specification 
of the security objectives of the protocol (and all its subprotocols) 
–  verifying  whether  the  protocol  actually  satisfies  these  goals  is 
the purpose of formal analysis. 
Validation  of  analysis  scope  –  Validation  of  the  results  of  the 
previous  steps  (with  the  help  of  domain  experts  and  protocol 
designers). 
Semiformal  modeling  and  analysis  –  Developing  UML  object 
models  that  represent  protocol  participants  and  their  interactions 
(protocol  dynamics),  the  threat  model,  and  documenting  in  the 
models all the security objectives and underlying assumptions. 
Formal modeling and analysis – Developing formal model of the 
protocol;  verification  of  the  formal  model  against  the  security 
objectives  of  the  protocol.  Formal  modeling  and  analysis  can  be 
carried  out  using  one  of  the  following  methods  and  tools: 
Casper/CSP, FOCUS and AVISPA. 
Documenting  the  results  –  The  results  of  the  analysis  are 
documented using the predefined template. 
78
3.2  UML modeling 
The  object  modeling  component  of  the  framework  is  based  on 
UML  [17].  The  language  was  extended  by  stereotypes  proposed 
for  common  elements  of  protocols  models,  for  example 
>,  >  and  > 
which were derived respectively from UML actor, object state and 
object  interaction.  The  next  step  towards  this  direction  is  a 
complete domain-specific UML profile [18] which is in line with 
the  OMG  recommendation  for  those  UML  users  who  want 
unambiguity  and  support  for  tool  automation  [19].  UML  2.0 
offers  a  revised  profiling  mechanism.  Stereotypes  are  introduced 
by  means  of  inheritance  from  a  standard  UML  metaclass,  and 
domain-specific  features  of  the  new  stereotypes  are  expressed 
formally using the Object Constraint Language (OCL). 
Secondly, they help the analyst to better understand the way each 
concept  is  used  not  by  studying  the  OCL  constraints  but  by 
observing how this concept behaves in relation to other concepts. 
The  patterns  are  defined  in  accordance  with  the  following 
template:  
Pattern name – a descriptive name of the pattern 
Intent – which modeling issues are addressed by the pattern 
Definition - UML diagram defining the pattern; description of the 
pattern and its elements 
How it works – explanation of how the pattern works in practice; 
supported by a real example from one of the Case Studies 
Reference  to  other  patterns  –  as  patterns  are  used  together  to 
Figure 2. Security protocol modeling perspectives 
To  help  the  users  in  using  the  proposed  UML  extension  we 
provide  a  set  of  patterns.  Each  pattern  defines  a  scheme  for 
constructing  a  particular  aspect  of  the  protocol  model  from  a 
specific perspective. While defining the patterns took into account 
the needs of formalization of the protocols. For instance, all three 
formal  techniques  we  have  experimented  with:  CSP/Casper, 
AVISPA  and  FOCUS  required  the  following  aspects  to  be 
included in the specification: 