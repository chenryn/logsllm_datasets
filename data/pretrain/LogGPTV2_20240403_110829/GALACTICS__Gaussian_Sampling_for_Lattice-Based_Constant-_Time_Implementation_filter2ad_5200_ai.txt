[23] Tim Güneysu, Vadim Lyubashevsky, and Thomas Pöppelmann. 2012. Practical Lattice-Based Cryptography: A Signature
Scheme for Embedded Systems. In CHES 2012 (LNCS), Emmanuel Prouff and Patrick Schaumont (Eds.), Vol. 7428.
Springer, Heidelberg, 530–547. https://doi.org/10.1007/978-3-642-33027-8_31
[24] Nicholas J. Higham. 2002. Accuracy and Stability of Numerical Algorithms (second ed.). SIAM.
[25] Nick Howgrave-Graham. 2007. A Hybrid Lattice-Reduction and Meet-in-the-Middle Attack Against NTRU. In
CRYPTO 2007 (LNCS), Alfred Menezes (Ed.), Vol. 4622. Springer, Heidelberg, 150–169. https://doi.org/10.1007/978-3-
540-74143-5_9
[26] Andreas Hülsing, Tanja Lange, and Kit Smeets. 2018. Rounded Gaussians - Fast and Secure Constant-Time Sampling
for Lattice-Based Crypto. In PKC 2018, Part II (LNCS), Michel Abdalla and Ricardo Dahab (Eds.), Vol. 10770. Springer,
Heidelberg, 728–757. https://doi.org/10.1007/978-3-319-76581-5_25
[27] Yuval Ishai, Amit Sahai, and David Wagner. 2003. Private Circuits: Securing Hardware against Probing Attacks. In
CRYPTO 2003 (LNCS), Dan Boneh (Ed.), Vol. 2729. Springer, Heidelberg, 463–481. https://doi.org/10.1007/978-3-540-
45146-4_27
[28] Angshuman Karmakar, Sujoy Sinha Roy, Oscar Reparaz, Frederik Vercauteren, and Ingrid Verbauwhede. 2018. Constant-
Time Discrete Gaussian Sampling. IEEE Trans. Computers 67, 11 (2018), 1561–1571.
[29] Wangyu Luo, Wael Alghamdi, and Yue M. Lu. 2019. Optimal Spectral Initialization for Signal Recovery With Applications
to Phase Retrieval. IEEE Trans. Signal Processing 67, 9 (2019), 2347–2356.
[30] Vadim Lyubashevsky. 2009. Fiat-Shamir with Aborts: Applications to Lattice and Factoring-Based Signatures. In
ASIACRYPT 2009 (LNCS), Mitsuru Matsui (Ed.), Vol. 5912. Springer, Heidelberg, 598–616. https://doi.org/10.1007/978-
35
3-642-10366-7_35
[31] Vadim Lyubashevsky. 2012. Lattice Signatures without Trapdoors. In EUROCRYPT 2012 (LNCS), David Pointcheval and
Thomas Johansson (Eds.), Vol. 7237. Springer, Heidelberg, 738–755. https://doi.org/10.1007/978-3-642-29011-4_43
[32] Daniele Micciancio and Michael Walter. 2017. Gaussian Sampling over the Integers: Efficient, Generic, Constant-Time.
In CRYPTO 2017, Part II (LNCS), Jonathan Katz and Hovav Shacham (Eds.), Vol. 10402. Springer, Heidelberg, 455–485.
https://doi.org/10.1007/978-3-319-63715-0_16
[33] Peter Pessl, Leon Groot Bruinderink, and Yuval Yarom. 2017. To BLISS-B or not to be: Attacking strongSwan’s
Implementation of Post-Quantum Signatures. In ACM CCS 2017, Bhavani M. Thuraisingham, David Evans, Tal Malkin,
and Dongyan Xu (Eds.). ACM Press, 1843–1855. https://doi.org/10.1145/3133956.3134023
[34] Thomas Pöppelmann, Léo Ducas, and Tim Güneysu. 2014. Enhanced Lattice-Based Signatures on Reconfigurable
Hardware. In CHES 2014 (LNCS), Lejla Batina and Matthew Robshaw (Eds.), Vol. 8731. Springer, Heidelberg, 353–370.
https://doi.org/10.1007/978-3-662-44709-3_20
[35] Thomas Prest. 2017. Sharper Bounds in Lattice-Based Cryptography Using the Rényi Divergence. In ASIACRYPT 2017,
Part I (LNCS), Tsuyoshi Takagi and Thomas Peyrin (Eds.), Vol. 10624. Springer, Heidelberg, 347–374. https://doi.org/
10.1007/978-3-319-70694-8_13
[36] Thomas Prest, Pierre-Alain Fouque, Jeffrey Hoffstein, Paul Kirchner, Vadim Lyubashevsky, Thomas Pornin, Thomas
Ricosset, Gregor Seiler, William Whyte, and Zhenfei Zhang. 2017. FALCON: Fast-Fourier Lattice-based Compact
Signatures over NTRU. https://falcon-sign.info.
[37] Oscar Reparaz, Josep Balasch, and Ingrid Verbauwhede. 2017. Dude, is my code constant time?. In DATE, David Atienza
and Giorgio Di Natale (Eds.). IEEE, 1697–1702.
[38] Matthieu Rivain and Emmanuel Prouff. 2010. Provably Secure Higher-Order Masking of AES. In CHES 2010 (LNCS),
Stefan Mangard and François-Xavier Standaert (Eds.), Vol. 6225. Springer, Heidelberg, 413–427. https://doi.org/10.
1007/978-3-642-15031-9_28
[39] S.L Sobolev. 1963. On a theorem of functional analysis. Transl. Amer. Math. Soc. 34 (1963), 39–68.
[40] Mehdi Tibouchi and Alexandre Wallet. 2019. One bit is all it takes: a devastating timing attack on BLISS’s non-constant
time sign flips. Cryptology ePrint Archive, Report 2019/898. https://eprint.iacr.org/2019/898.
[41] Michael Walter. 2019. Sampling the Integers with Low Relative Error. In AFRICACRYPT 19 (LNCS), Johannes Buchmann,
Abderrahmane Nitaj, and Tajje eddine Rachidi (Eds.), Vol. 11627. Springer, Heidelberg, 157–180. https://doi.org/10.
1007/978-3-030-23696-0_9
[42] Thomas Wunderer. 2019. A detailed analysis of the hybrid lattice-reduction and meet-in-the-middle attack. J.
Mathematical Cryptology 13, 1 (2019), 1–26.
[43] Raymond K. Zhao, Ron Steinfeld, and Amin Sakzad. 2018. FACCT: FAst, Compact, and Constant-Time Discrete
Gaussian Sampler over Integers. Cryptology ePrint Archive, Report 2018/1234. https://eprint.iacr.org/2018/1234.
36
Appendices
A MASKING
A.1 Proof of Theorem 5.1
Proof. From Table 4, all the sub-gadgets involved in the computation of the key derivation are
either d-NI secure, d-NIo secure, or they do not manipulate sensitive data. In all cases, this means
that no probing attack can be performed on only one of these gadgets. We prove here the d-probing
security with outputs of their composition. In the d-probing model, we assume that an attacker
has access to δ ≤ d exact variables in the whole execution of the key derivation. Then, we want to
prove that all these δ observations can be perfectly simulated with at most δ shares of each secret
and the public variables. We consider the following distribution of the attacker’s δ observations: δ1
(resp. δ2) on the instance of PolyGen which produces f (resp. д), δ3 on SkGen, δ4 on RSKG, δ5 on
PkGen, δ6 on FailTest, δ7 on Lin, δ8 on Unmask, and δ9 on GenA, such that9
i =1 δi = δ.
As first demonstrated in [2], we build the proof from right to left. GenA only manipulates non-
sensitive data, so any of the δ9 observations are non-sensitive as well and can be revealed. Unmask
is d-NIo secure with public output the public key part a1 and does not return any sensitive variable.
Then all its observations can be perfectly simulated with at most δ8 shares of (a1)0≤i ≤d and the
knowledge of the output a1. Lin is also d-NI secure with δ7 internal observations and at most δ8
output observations. As δ7 +δ8 ≤ δ, all further observations can be perfectly simulated with at most
δ7 + δ8 shares of aq. FailTest is d-NI secure with δ6 observations. Thus, the latter can be perfectly
simulated with at most δ6 shares of si and the knowledge of its non-sensitive Boolean inputs.
PkGen is d-NIo secure with δ5 observations on its internal data and at most δ7 + δ8 observations
on its outputs. δ5 + δ7 + δ8 ≤ δ so all further observations can be perfectly simulated with at
most δ5 + δ7 + δ8 shares of fi and δ5 + δ7 + δ8 shares of дi and the knowledge of the non-sensitive
value RejSp and of its output. RSKG is d-NIo secure with public output the Boolean value RejSp. It
comes with δ4 ≤ δ observations on its internal data and its only output is non-sensitive. All its
observations can be perfectly simulated with at most δ4 shares of si. SkGen is d-NI secure with δ3
observations on its internal data and at most δ4 + δ6 observations on its outputs. As δ3 + δ4 + δ6 ≤ δ,
all these observations can be perfectly simulated with at most δ3 +δ4 +δ6 shares of fi and δ3 +δ4 +δ6
shares of дi. At the end, PolyGen is d-NI secure with no inputs. We thus need to check, for each of
its two instances, that the sum of all its observations does not exceed δ. The instance involving fi
gathers δ1 internal observations and δ5 + δ7 + δ8 + δ3 + δ4 + δ6 output observations. The instance
involving дi gathers δ2 internal observations and δ5 + δ7 + δ8 + δ3 + δ4 + δ6 output observations.
The number of observations remains less than δ, which concludes the proof.
□
A.2 Proof of Theorem 5.2
Proof. From Table 4, all the sub-gadgets involved in the computation of the signature are either
d-NI secure, d-NIo secure, d-SNI secure, or they do not manipulate sensitive data. In all cases, this
means that no probing attack can be performed on only one of these gadgets. We prove here the
d-probing security with outputs of their composition. In the d-probing model, we assume that an
attacker has access to δ ≤ d exact variables in the whole execution of the key derivation. Then, we
want to prove that all these δ observations can be perfectly simulated with at most δ shares of each
secret among y1, y2, s1, and s2, and the public variables. We consider the following distribution of
the attacker’s δ observations: δ1 (resp. δ2) on the instance of GaussGen which produces y1 (resp. y2),
δ3 on Comm, δ4 on the instance of Unmask following Comm, δ5 on Hash, δ6 on BitGen, δ7 (resp. δ8) on
the instance of Sign involving y1 (resp. y2), δ9 (resp. δ10) on the instance of Refresh which outputs
37
z2), and δ15 (resp. δ16) on the instance of Unmask involving z1 (resp. z2), such that16
z1 (resp. z2), δ11 on RS, δ12 (resp. δ13 and δ14) on the instance of FailTest involving c (resp. z1 and
i =1 δi = δ.
We build the proof from right to left. Unmask is d-NIo secure with public output both part of
the signature z1 and z2. As a consequence, all the observations from its call involving z1 (resp z2)
can be perfectly simulated with at most δ15 ≤ δ shares of z1 (resp. at most δ16 ≤ δ shares of z2)
and the knowledge of the signature part z1 (resp z2). The algorithm referred to as FailTest is
also d-NI secure. Thus, all the observations from its call involving z1 (resp z2) can be perfectly
simulated with at most δ13 + δ15 ≤ δ shares of z1 (resp. at most δ14 + δ16 ≤ δ shares of z2) and
the bit RejSp which is public information indicating whether or not the rejection sampling failed.
The third instance of FailTest involving c does not manipulate any sensitive data and can be
safely left unmasked. Then, RS is d-NIo secure with public output RejSp and does not return any
sensitive element. All the observations performed in this gadget and its output can be perfectly
simulated with at most δ11 shares of each input among s1, s2, z1, z2, the knowledge of c, which is
here public, and the knowledge of RejSp. Continuing from right to left, we consider both instances
of Refresh. From its d-SNI security property and since the output and local observations are still
less than δ, all observations from its call can be perfectly simulated with at most δ9 ≤ δ (resp.
δ10 ≤ δ) input shares. Both instances of Sign outputs variables that are immediately refreshed.
Sign is additionally d-NI secure and has δ9 (resp. δ10) output observations and δ7 (resp. δ8) internal
ones. In both cases the addition of the internal and output observations remains below δ and the
d-NI property makes it possible to simulate all further observations with δ7 + δ9 ≤ δ shares of
y1,i, s1,i, bi, and the knowledge of c (resp. δ8 + δ10 ≤ δ shares of y2,i, s2,i, bi, and the knowledge
of c). BitGen is d-NI secure and since it has no inputs, the fact that the δ7 + δ9 + δ8 + δ10 ≤ δ
output observations and δ6 internal observations are less than δ is enough to guarantee the global
security from its location. Hash only manipulates public data. Unmask is d-NIo secure and does not
return any sensitive variable. Then all the observations performed from this gadget can be perfectly
simulated with at most δ4 shares of ui. Comm is d-NI secure. δ3 observations are performed on its
intermediate variables, and at most δ4 observations are performed on its outputs. As δ3 + δ4 ≤ δ, all
further observations can be perfectly simulated with at most δ3 + δ4 shares of y1, δ3 + δ4 shares of y2
and the knowledge of the public value A. The last step of the proof is to verify that all the internal
and output observations on each instance of GaussGen are less than δ. Internal observations are
respectively δ1 and δ2 while output observations are bounded by δ3 +δ4 +δ7 +δ9 and δ3 +δ4 +δ8 +δ10
which are both less than δ. The d-NIo property of GaussGen concludes the proof.
□
B PROOFS
B.1 Proof of Corollary 4.2
Proof. Let us suppose that(cid:12)(cid:12)(cid:12) D−D′
(cid:12)(cid:12)(cid:12) ≤ 2−45 is verified. Then, 1 − 2−45 ≤ D′
D
D ≤ 1 + 2−45. Since
Supp(D′) = Supp(D), we apply the relative error Lemma (Lemma 3 of [35]), and get
R2·λ(D||D′) ≤ 1 + 2·λ·2−2·45
2
≤ 1 + 256 · 2−2·45
≤ 1 + 2−82
= 1 + 1
4qD .
This corresponds to Equation 2 and completes the proof.
□
38
B.2 Proof of Lemma 4.5
Proof. Let x0 ∈ I be such that |u(x)| ≥ |u(x0)| for all x ∈ I. We then write
∫ x
x0
u(x) = u(x0) +
′
u
Hence,
Using Cauchy-Schwarz, we have(cid:0)∫
|u(x)| ≤ |u(x0)| +
|u
x0
∫ x
I |u|(cid:1)2 ≤ |I|∫
(cid:115)
∫
′|
|u
|u| +
′| ≤ 1
|I|
∫
∫
I |u|2 and(cid:0)∫
I |u′|(cid:1)2 ≤ |I|∫
(cid:115)
∫
I
I
|I|
|u|2 +
|I|
|u′|2
I
|u(x)| ≤ 1
|I|
I
I |u′|2. Then,
Using the equality x + y ≤ √2(cid:112)x
|u(x)| ≤ √
2
2 + y
2 for x, y ≥ 0, we have
(cid:115) 1
|I|2 · |I|
∫
I
∫
I
|u′|2
|u|2 + |I|
Then,
||u||∞ ≤ √
2 · |u|S
which concludes the proof.
□
B.3 Proof of Lemma 4.6
Proof. By hypothesis,
∀t ∈ I3
|P I3exp(t) − exp(cid:16) t
(cid:17) |
| exp(cid:16) t
2σ 2
2σ 2
(cid:17) |
(cid:17)
≤(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) P I3exp − exp(cid:16) .2σ 2
(cid:17)
exp(cid:16) .2σ 2
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)∞ ≤ 2−K
39
Then, let us compute the relative error for P I2
cosh. For x ∈ I2,
|P I2
2σ 2
(cid:17)
2σ 2
2σ 2
2σ 2
=
=
=
≤
≤
exp(−t(x))
c ⌋ ·P I3
exp(t(x))+2⌊ −x
c ⌋ ·P I3
2σ 2
c ⌋ ·P I3
c ⌋ ·P I3
2σ 2
c ⌋ ·P I3
2σ 2
2σ 2
2σ 2
c ⌋ ·P I3
2σ 2
c ⌋ ·P I3
2σ 2
cosh(x)
2σ 2
c ⌋ ·P I3
exp(t(x))+2⌊ −x
cosh(x)−cosh(cid:16) x
(cid:17) |
| cosh(cid:16) x
(cid:17) |
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) P I2
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:17) − 1
cosh(cid:16) x
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 2⌊ x
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)