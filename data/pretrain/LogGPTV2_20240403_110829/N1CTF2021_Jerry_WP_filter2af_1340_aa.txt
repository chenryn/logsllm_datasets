# N1CTF2021 Jerry WP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
上周我和队友们打了场N1CTF，最终取得第二名的成绩。这里是我解决的一个challenge，很可惜这题调远程的时候二血变成了三血。
## 环境准备
###  Bindiff
####  安装
在
[https://www.zynamics.com/software.html找到自己IDA对应的版本，比如我是7.6的IDA](https://www.zynamics.com/software.html%E6%89%BE%E5%88%B0%E8%87%AA%E5%B7%B1IDA%E5%AF%B9%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E6%AF%94%E5%A6%82%E6%88%91%E6%98%AF7.6%E7%9A%84IDA)
，我就下Bindiff7 而不是最上面那个lastest版本的，7.5也可以用7，以下就用6就行。
## 前置知识
###  DataView Object
    #if JERRY_BUILTIN_DATAVIEW
    /**
     * Description of DataView objects.
     */
    typedef struct
    {
      ecma_extended_object_t header; /** 0 ? arguments_list_p[0] : ECMA_VALUE_UNDEFINED;
      switch (builtin_routine_id)
      {
        case ECMA_DATAVIEW_PROTOTYPE_BUFFER_GETTER:
        case ECMA_DATAVIEW_PROTOTYPE_BYTE_LENGTH_GETTER:
        case ECMA_DATAVIEW_PROTOTYPE_BYTE_OFFSET_GETTER:
        {
          return ecma_builtin_dataview_prototype_object_getters (this_arg, builtin_routine_id);
        }
        case ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT32:
    #if JERRY_NUMBER_TYPE_FLOAT64
        case ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT64:
    #endif /* JERRY_NUMBER_TYPE_FLOAT64 */
        case ECMA_DATAVIEW_PROTOTYPE_GET_INT16:
        case ECMA_DATAVIEW_PROTOTYPE_GET_INT32:
        case ECMA_DATAVIEW_PROTOTYPE_GET_UINT16:
        case ECMA_DATAVIEW_PROTOTYPE_GET_UINT32:
    #if JERRY_BUILTIN_BIGINT
        case ECMA_DATAVIEW_PROTOTYPE_GET_BIGINT64:
        case ECMA_DATAVIEW_PROTOTYPE_GET_BIGUINT64:
    #endif /* JERRY_BUILTIN_BIGINT */
        {
          ecma_value_t little_endian = arguments_number > 1 ? arguments_list_p[1] : ECMA_VALUE_FALSE;
          ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_GET_INT8);
          return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, little_endian, ECMA_VALUE_EMPTY, id);
        }
        case ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT32:
    #if JERRY_NUMBER_TYPE_FLOAT64
        case ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT64:
    #endif /* JERRY_NUMBER_TYPE_FLOAT64 */
        case ECMA_DATAVIEW_PROTOTYPE_SET_INT16:
        case ECMA_DATAVIEW_PROTOTYPE_SET_INT32:
        case ECMA_DATAVIEW_PROTOTYPE_SET_UINT16:
        case ECMA_DATAVIEW_PROTOTYPE_SET_UINT32:
    #if JERRY_BUILTIN_BIGINT
        case ECMA_DATAVIEW_PROTOTYPE_SET_BIGINT64:
        case ECMA_DATAVIEW_PROTOTYPE_SET_BIGUINT64:
    #endif /* JERRY_BUILTIN_BIGINT */
        {
          ecma_value_t value_to_set = arguments_number > 1 ? arguments_list_p[1] : ECMA_VALUE_UNDEFINED;
          ecma_value_t little_endian = arguments_number > 2 ? arguments_list_p[2] : ECMA_VALUE_FALSE;
          ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_SET_INT8);
          return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, little_endian, value_to_set, id);
        }
        case ECMA_DATAVIEW_PROTOTYPE_GET_INT8:
        case ECMA_DATAVIEW_PROTOTYPE_GET_UINT8:
        {
          ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_GET_INT8);
          return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, ECMA_VALUE_FALSE, ECMA_VALUE_EMPTY, id);
        }
        default:
        {
          JERRY_ASSERT (builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_SET_INT8
                        || builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_SET_UINT8);
          ecma_value_t value_to_set = arguments_number > 1 ? arguments_list_p[1] : ECMA_VALUE_UNDEFINED;
          ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_SET_INT8);
          return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, ECMA_VALUE_FALSE, value_to_set, id);
        }
      }
    } /* ecma_builtin_dataview_prototype_dispatch_routine */
然后来看看这一函数。
    ecma_value_t
    ecma_op_dataview_get_set_view_value (ecma_value_t view, /**buffer_p;//获取object属性里的buffer 
      JERRY_ASSERT (ecma_object_class_is (buffer_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
                    || ecma_object_class_is (buffer_p, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER));
      /* 3. */
      ecma_number_t get_index;
      ecma_value_t number_index_value = ecma_op_to_index (request_index, &get_index);
      if (ECMA_IS_VALUE_ERROR (number_index_value))
      {
        return number_index_value;
      }
      /* SetViewValue 4 - 5. */
      if (!ecma_is_value_empty (value_to_set))
      {
    #if JERRY_BUILTIN_BIGINT
        if (ECMA_TYPEDARRAY_IS_BIGINT_TYPE (id))
        {
          value_to_set = ecma_bigint_to_bigint (value_to_set, true);
          if (ECMA_IS_VALUE_ERROR (value_to_set))
          {
            return value_to_set;
          }
        }
        else
    #endif /* JERRY_BUILTIN_BIGINT */
        {
          ecma_number_t value_to_set_number;
          ecma_value_t value = ecma_op_to_number (value_to_set, &value_to_set_number);
          if (ECMA_IS_VALUE_ERROR (value))
          {
            return value;
          }
          value_to_set = ecma_make_number_value (value_to_set_number);
        }
      }
      /* GetViewValue 4., SetViewValue 6. */
      bool is_little_endian = ecma_op_to_boolean (is_little_endian_value);
      if (ecma_arraybuffer_is_detached (buffer_p))
      {
        ecma_free_value (value_to_set);
        return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_arraybuffer_is_detached));
      }
      /* GetViewValue 7., SetViewValue 9. */
      uint32_t view_offset = view_p->byte_offset;
      /* GetViewValue 8., SetViewValue 10. */
      uint32_t view_size = view_p->header.u.cls.u3.length;//获取object里的length
      /* GetViewValue 9., SetViewValue 11. */
      uint8_t element_size = (uint8_t) (1  (ecma_number_t) view_size)//判断是否越界
      {
        ecma_free_value (value_to_set);
        return ecma_raise_range_error (ECMA_ERR_MSG ("Start offset is outside the bounds of the buffer"));
      }
      /* GetViewValue 11., SetViewValue 13. */
      //然后下面就是利用buffer_p取计算然后get值和设置值的操作。
      uint32_t buffer_index = (uint32_t) get_index + view_offset;
      lit_utf8_byte_t *block_p = ecma_arraybuffer_get_buffer (buffer_p) + buffer_index;
      bool system_is_little_endian = ecma_dataview_check_little_endian ();
      ecma_typedarray_info_t info;
      info.id = id;
      info.length = view_size;
      info.shift = ecma_typedarray_helper_get_shift_size (id);
      info.element_size = element_size;
      info.offset = view_p->byte_offset;
      info.array_buffer_p = buffer_p;
      /* GetViewValue 12. */
      if (ecma_is_value_empty (value_to_set))
      {
        JERRY_VLA (lit_utf8_byte_t, swap_block_p, element_size);
        memcpy (swap_block_p, block_p, element_size * sizeof (lit_utf8_byte_t));
        ecma_dataview_swap_order (system_is_little_endian, is_little_endian, element_size, swap_block_p);
        info.buffer_p = swap_block_p;
        return ecma_get_typedarray_element (&info, 0);
      }
      if (!ecma_number_is_nan (get_index) && get_index <= 0)
      {
        get_index = 0;
      }
      /* SetViewValue 14. */
      info.buffer_p = block_p;
      ecma_value_t set_element = ecma_set_typedarray_element (&info, value_to_set, 0);
      ecma_free_value (value_to_set);
      if (ECMA_IS_VALUE_ERROR (set_element))
      {
        return set_element;
      }
      ecma_dataview_swap_order (system_is_little_endian, is_little_endian, element_size, block_p);
      return ECMA_VALUE_UNDEFINED;
    } /* ecma_op_dataview_get_set_view_value */
在ecma_create_object 里面调用jmem_heap_alloc 去分配地址，也就是说Jerry 有自己的一套内存管理机制，如下
    static void * JERRY_ATTR_HOT
    jmem_heap_alloc (const size_t size) /**< size of requested block */
    {
    #if !JERRY_SYSTEM_ALLOCATOR
      /* Align size. */
      const size_t required_size = ((size + JMEM_ALIGNMENT - 1) / JMEM_ALIGNMENT) * JMEM_ALIGNMENT;
      jmem_heap_free_t *data_space_p = NULL;
      JMEM_VALGRIND_DEFINED_SPACE (&JERRY_HEAP_CONTEXT (first), sizeof (jmem_heap_free_t));
      /* Fast path for 8 byte chunks, first region is guaranteed to be sufficient. */
      if (required_size == JMEM_ALIGNMENT
          && JERRY_LIKELY (JERRY_HEAP_CONTEXT (first).next_offset != JMEM_HEAP_END_OF_LIST))
      {
        data_space_p = JMEM_HEAP_GET_ADDR_FROM_OFFSET (JERRY_HEAP_CONTEXT (first).next_offset);
        JERRY_ASSERT (jmem_is_heap_pointer (data_space_p));
        JMEM_VALGRIND_DEFINED_SPACE (data_space_p, sizeof (jmem_heap_free_t));