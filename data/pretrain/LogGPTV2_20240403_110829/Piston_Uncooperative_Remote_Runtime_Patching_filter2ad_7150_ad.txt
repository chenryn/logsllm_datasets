are guaranteed to have at least one vulnerability as well as a Proof
Of Vulnerability (POV) which causes it to crash. As such, these tar-
gets are used to test Piston’s recovery capabilities in a wide range of
binaries. We took the 126 single-binary applications from the CQE
and discarded any which did not crash with the provided POV in our
testing environment leaving us with 102 binaries. Of those 102, we
found that 24 crashed due to an inter-frame stack overflow. We use
all 24 for testing Piston’s recovery capabilities.
To test the end-to-end patching and recovery from an exploit, we
chose five binaries from the above set. For each of these binaries we
had to write an exploit which would give us arbitrary code execution.
This was required because the provided POVs only lead to crashes,
many of which do not crash with control of the instruction pointer.
Along with the CGC binaries, we chose NGINX 1.4.0, which is
vulnerable to CVE-2013-2028, to test Piston on a real-world applica-
tion. NGINX is proves to be an interesting candidate due to its unique
architecture among webservers: it initializes a fixed number of worker
processes that persist throughout the entirety of the server’s uptime.
This allows us to patch the individual workers of the NGINX server
by repeatedly connecting to the server.
6.2 Recovery Results
To test Piston’s recovery capabilities we used the 24 CQE binaries
containing an inter-frame stack overflow. We constructed two patch-
ing stubs, one that relies on the absence of NX (shellcode stub), and
one that bypasses NX using return oriented programming (ROP stub).
The shellcode stub is 23 bytes in length whereas the ROP stub is 40
bytes. We trace each of those binaries with their accompanying POVs
and use Piston’s built-in functionality to identify the exploitation
point and the hijacked function in which the overflow occurs. Then
we set the overflow amount to that which is needed for each of the
patching stubs and check if piston can recover the state.
148Piston was able to correctly identify the corruption point in all
cases, and was thus able to identify the corrupted data. For the shell-
code stub, Piston was able to completely recover the corrupted data
for 22 out of 24 binaries. For the ROP stub, which clobbers more bytes
of the stack, Piston was able to completely recover the corrupted data
for 20 out of 24.
6.3 End-To-End Results
Piston was able to patch all five binaries from our CGC end-to-end
dataset as well as patch NGINX, with only two of these six bina-
ries requiring input from the analyst. Only one of these binaries,
CROMU_00038, required the analyst to write code. In the other one
that required input, NGINX, Piston was unable to generate a roll-
back function, but the analyst was able to quickly determine that no
rollback function was actually necessary.
In the one CGC binary that required the analyst to write code, Pis-
ton’s patch testing step reported a possible problem. Upon inspection,
we discovered that the patched binary sanitizes the input before con-
trol reaches the hijacked function, but the runtime patch was restarting
the hijacked function with the unsanitized input. By providing a repair
function that sanitized the input in memory, the patching was able to
proceed as expected.
As part of our experiments we evaluated how much stack space in
the caller function could be overwritten before Piston would need to
undo and restart the caller function as well. We iteratively increased
the amount of overflow until Piston reported that the caller function’s
frame could not be recovered. These results are shown in Table 1. We
found that there was a large variation in the number of bytes in the
caller’s frame that were recoverable; the results ranged from only four
bytes to over three hundred.
6.4 NGINX Patching
In July of 2013, both NGINX version 1.3.9 and 1.4.0 were found to
be vulnerable to a stack-based buffer overflow which results from
improper handling of HTTP chunked transfer-encoding (this vulner-
ability was given the label CVE-2013-2028). NGINX is not a simple
binary; the source code alone for this version approaches 180,000
lines of code. By successfully patching NGINX through this CVE,
we demonstrate Piston’s effectiveness and applicability.
We began our evaluation by compiling two versions of NGINX;
one version represents the original binary, and the other is the re-
placement binary. We obtained the original binary by downloading
the NGINX 1.4.0 source code and compiling it. For the replacement
binary we took the same source code and applied the CVE-2013-2028
patch file provided by nginx.com [3]. Next we developed an exploit
specification targeting the vulnerability. Our exploit specification
is simply an exploit script which gets to shellcode execution on an
NGINX worker process; many exploits for this particular CVE can
be found online [2, 29].
While Piston was analyzing the hijacked function, it determined
that the function was interrupted and would need to be repeated. Upon
determining that the hijacked function must be repeated, Piston iden-
tified small changes which would be made to the global state of the
process on a repeated call of the function. Piston was unable to gen-
erate a rollback routine for these particular changes, so deferred the
creation of a rollback routine to the analyst, highlighting the changes
made during the repeat. In a matter of seconds, we, as analysts, can
see that the effects of a repeat call are inconsequential, and inform
Piston to carry on without rollback.
Next, Piston was able to successfully determine that four bytes
of the caller’s state were destroyed, as a result Piston then generated
a repair routine which recovered these four bytes. However, for the
sake of evaluation, we show that 28 bytes of the caller’s state could
have been corrupted without hindering Piston’s ability to generate a
repair routine automatically.
After these steps, the brunt of the analysis is complete. Piston now
executes the patcher using the exploit specification provided to first
get shellcode execution. With shellcode execution Piston then reads
in and executes the repair routine generated earlier. Then, Piston’s
shellcode performs the patching process and soon reports that the
patching is complete.
We verify that the NGINX web server is still running by manually
making a request with a browser. Next, we verify that the server has
successfully been patched by attempting again to exploit the server,
but this time attempting to redirect control flow to an invalid address.
After this exploit attempt, we again make a request to the web server
with a browser and verify that NGINX has withstood crashing (we
configured NGINX to use a single worker, so a crash in a single worker
would have resulted in the entire server being inoperable).
7 LIMITATIONS
One primary limitation of Piston is that the fully automated recovery
steps only succeed on stack-based buffer overflows. For other types of
corruption, an analyst typically needs to examine the data which was
identified as corrupted, and then decide how it can be recovered. The
reason for this limitation is that although the Data Filtering and Data
Recovery in Section 4.3 can be thought of in generalized steps, they do
not produce adequate results when applied to data outside of the stack.
Data Filtering. On the stack frame, we have the advantage of detect-
ing which instructions access stack variables, whereas for data in
the heap, due to limitations in the current state of static analysis,
it is rare to know which instructions will read or write from a spe-
cific object. Some thorough type analyses [26, 36] may be able to
identify accesses to objects of the same type, but cannot identify
if those accesses are to the same object which was corrupted. Data
filtering of heap corruption might require a semantic understanding
of the program. Such understanding is outside the reach of current
techniques.
Data Recovery. Data recovery requires data redundancy. That is, we
must be able to automatically deduce the value of data from other
values in memory or registers. In the case of stack data, we showed
how other values can provide this redundancy in Section 4.3. How-
ever, if we consider corruption to heap or globals, one problem
is that the data is typically created at an earlier point in program
execution, often in a stack frame which has since been discarded.
Unless we still have the stack frame in which a heap object was ini-
tialized, we are unlikely to have data which provides the necessary
redundancy to recover the object.
However, there are cases when Piston can be applied to vulnera-
bilities other than stack overflows.
Here, we describe one such case, in which Piston was able to au-
tomatically patch a binary using a heap overflow vulnerability. The
149Binary Name
CROMU_00017
CROMU_00020
CROMU_00037
CROMU_00038
CROMU_00039
NGINX
Function
Interrupted?
Yes
Yes
No
Yes
Yes
Yes
Fully Automated
Rollback?
Fully Automated
Repair?
Caller Stack
Bytes Recoverable
Yes
Yes
N/A
Yes
Yes
No
Yes
Yes
Yes
No
Yes
Yes
144
52
4
4
303
28
Table 1: Breakdown of patches from Piston
CGC binary NRFIN_00004, which was not included in our testing
dataset because it does not have a stack-based buffer overflow, con-
tains an intra-object heap overflow. The heap object contains a string
followed by several function pointers. When the string overflows, the
function pointers are overwritten, and another command handler will
call an overwritten pointer.
We began by designing a custom heuristic to Piston to detect the
corruption point. The heuristic was that for heap objects, any pointer
to a function cannot be changed to point at an address that is not the
beginning of a function. With this heuristic, Piston correctly identifies
that the two function pointers in the heap object were corrupted. From
there, Piston follows its normal mode of operation: it injects the patch-
ing stub into the binary, executes it, replaces all functions in the patch
set, then restarts the execution of the hijacked function, which previ-
ously contained the heap overflow. Piston’s underconstrained sym-
bolic execution can detect that the corrupted pointers will be overwrit-
ten by the restarted (and patched) hijacked function, so no data needs
to be recovered, avoiding the problem of the lack of data redundancy.
This is not a general application of Piston to heap overflows, so we
include it here as opposed to the core approach discussion. However,
it demonstrates that, with minor manual work, Piston can be adapted
to a wider range of vulnerabilities. In this case, it only required a
different corruption point detection heuristic.
8 RELATED WORK
Piston leverages many binary analysis techniques to analyze an ex-
ecutable, determine how to remotely apply the patch, exploit, and
repair the remote process. In this section, we will detail work that
proposed the program analysis techniques that we use in our system,
and frame Piston in relation to other hot-patching techniques.
8.1 Hot-patching
Piston’s core contribution is in extending the concept of hot patch-
ing to remote systems. This can include, like in our evaluation, re-
mote user-space processes but, additionally, could include internet-
connected embedded devices that may otherwise not have an update
functionality.
Before Piston, hot patching techniques, or dynamic software up-
dating approaches have been constrained to patching local processes,
often with explicit support from the host system. Originally designed
to patch small C programs, they have scaled up to the ability to patch
the Linux kernel [5, 34, 35, 45, 46]. However, aside from being reliant
on source code, these approaches require administrative access to the
host machine, which is often unavailable.
To reduce the difficulty of and level of access required by hot-
patching systems, techniques have been developed to include hot-
patching support in the applications themselves. These systems,
which are available for both user-space software [23, 24] and embed-
ded device firmware [21, 27, 28], ease the administrative requirement,
but still require pre-planning to include this functionality.
One hot-patching system, ClearView [38], is worth mentioning
as it works by monitoring binary code, detecting when it is being ex-
ploited, and automatically generating and applying defensive patches.
In the latter step, ClearView attempts to repair the state of the ex-
ploited process state by enforcing invariants. The concept of repairing
the process state after exploitation is similar between ClearView and
Piston. However, unlike ClearView, Piston does not require admin-
istrative access or, in fact, any presence on the device on which the
process that needs patching is running. Piston patches, repairs, and
resumes remotely, leveraging an exploit to achieve access.
Like most hot-patching systems, Piston relies on the analyst to
provide a state transition routine when a patch that it is applying
would modify data structures in the program. Recently, some work
has been done in automatically recovering such a state transition
routine [14, 20]. Though current work requires access to source code
(which Piston does not have), a future extension of these techniques
to binary code would increase the range of patches that Piston can
automatically apply.
Exploit writers targeting operating system kernels have also found
themselves repairing state of various parts of memory to allow the
kernel to continue running after their exploit payload has been run.
This is similar to the recovery and rollback routines used by Piston,
but kernel exploiters have done this in a manual, ad hoc manner [39].
8.2 Code Injection
Piston patches binaries by injecting new code into the running process.
The concept of injecting code at runtime with an exploit has been
explored before, albeit not for patching purposes.
Windows malware often achieves code injection by inserting a
DLL into the memory of the victim process [51]. This is done to
add malicious functionality to a local process. However, this is done
locally, as opposed to Piston’s remote code injection, and cannot be
done through an exploit. To our knowledge, Piston is the first approach
that can inject its code remotely, via an exploit, and repair the damage
caused by that exploit so that the application can continue.
8.3 Analysis Techniques
We utilize many existing binary analysis techniques to build Piston.
However, we claim no advancement in the base of binary analysis:
150Piston’s contribution is in the application of binary analyses to remote
hot-patching, in composing known analysis techniques in a novel way.
First, we use binary diffing techniques to identify what needs to be
updated between the original and the replacement binary. This field
has been extensively researched, and many approaches exist for iden-
tifying differences in executables, both statically [7, 8, 17, 19] and dy-
namically [18]. While we leverage diffing to determine what patches
to apply to the remote process, diffing has also been used for every-
thing from bug searching [40] to automatic exploit generation [9].
Once it determines the patches to apply, Piston uses program analy-
sis techniques to create its repair plan. This includes a type of symbolic
execution called under-constrained symbolic execution [41], which
extends classical dynamic symbolic execution techniques [10, 12, 15]
to work on isolated functions in a program. Additionally, we use
static analysis techniques to recover the control flow graph of individ-
ual functions and to reason about data dependencies between stack
variables. We leverage an open-source binary analysis framework,
angr2 [44] for this, which, in turn, uses several static analyses to re-
cover control flow [16, 25, 42, 48, 52], identify variables [26], and
determine data dependencies [6, 33, 47].
9 CONCLUSION
In this paper, we presented Piston, the first proposed approach for
remote hot-patching of uncooperative processes. Piston patches pro-
cesses through exploitation, allowing us to patch software which