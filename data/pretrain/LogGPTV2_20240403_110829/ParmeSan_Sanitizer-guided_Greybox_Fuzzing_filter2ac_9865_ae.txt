Certainly! Here is the optimized version of your text, with a focus on clarity, coherence, and professionalism:

---

### 9. Related Work

In the software engineering community, search-based test data generation has been common for several years [24, 30, 31]. In a security context, this approach is known as fuzzing.

#### Greybox Fuzzing

Greybox fuzzing has been successfully applied to a large number of programs [17, 47]. FairFuzz [26] enhances AFL by prioritizing seeds that exercise uncommon branches to improve branch coverage. Steelix [28] uses instrumentation to record comparison progress, allowing it to solve so-called "magic bytes" that need to be fixed to prevent the program from exiting prematurely.

VUzzer [36] was the first to suggest using dynamic data-flow analysis (DFA) in a greybox fuzzing strategy, enabling input mutation to focus on the bytes that affect branches. ParmeSan demonstrates that DFA can also be used to accurately augment the control-flow graph (CFG) for direct fuzzing purposes.

REDQUEEN [3] employs a lightweight input-to-state correspondence mechanism as an alternative to data-flow analysis. Angora [9] uses a gradient descent-based strategy to efficiently solve branch constraints. NEUZZ [40] utilizes neural networks to approximate the discrete branching behavior of a target application, implementing a similar gradient-guided optimization as Angora.

Similar to Matryoshka [10], ParmeSan relies on control-flow and data-flow analysis to enhance the fuzzing process. However, ParmeSan uses such information to augment the CFG and fix indirect calls, rather than to solve constraints.

#### Directed Greybox Fuzzing

Böhme et al. introduced directed greybox fuzzing with AFLGo [4]. AFLGo takes a set of predetermined targets and guides the fuzzing process towards them. Unlike ParmeSan, AFLGo cannot serve as a drop-in replacement for coverage-guided fuzzing because it lacks generic target acquisition analysis. Hawkeye [8] improves upon AFLGo by supporting indirect calls using static alias analysis. While Hawkeye supports reaching targets via indirect calls, its static call-target analysis incurs overapproximations and does not consider the input seed for distance calculation, unlike ParmeSan's dynamic CFG distance calculation.

Driller [43] introduces hybrid fuzzing by selectively using symbolic execution for smaller program compartments, avoiding path explosion common in prior symbolic execution approaches. KATCH [29] uses static analysis and symbolic execution to generate inputs for increasing patch test coverage. QSYM [46] presents a new symbolic execution engine tailored for hybrid fuzzing, scaling to larger programs than previous attempts at symbolic execution. TaintScope [45] uses tainting and symbolic execution to prevent the target program from exiting prematurely due to invalid checksums in the input. T-Fuzz [34] transforms the target program by removing hard-to-solve checks to more easily reach potential bugs. After identifying a possible bug, T-Fuzz reconstructs the input using symbolic execution to pass the checks and trigger the deep bug.

Another use case for sanitizers in fuzzing, similar to ParmeSan, is presented by Chen et al. in SAVIOR [11], which suggests using the UBSan sanitizer to improve hybrid fuzzing. This approach solves constraints for UBSan checks to direct the fuzzing process towards actual bugs, avoiding costly concolic execution for many branches that are less prone to bugs. Note that this approach is not directly applicable to sanitizers like ASAN, which use internal data structures (e.g., shadow memory). In contrast, ParmeSan's generic dynamic taint tracking strategy makes it sanitizer-agnostic, allowing it to use all available LLVM sanitizers for more fine-grained targeting of bug classes, as shown in Section 8.3.

Hercules [35] uses dynamic CFG reconstruction techniques to reach bugs, focusing on bug reproducibility (i.e., generating a crashing input given a target application and a crash report). ParmeSan, on the other hand, focuses on finding bugs without prior knowledge of their existence (i.e., generating a crash given a target application). Hercules augments the CFG with indirect calls and tainting information to satisfy conditions for reaching a target crash site. ParmeSan uses similar information to improve distance calculations with better estimation of indirect call targets, given the input bytes the fuzzer is mutating.

### 10. Conclusion

We presented ParmeSan, a sanitizer-guided greybox fuzzing pipeline. ParmeSan leverages off-the-shelf sanitizers not only for detecting vulnerabilities, as commonly done by prior fuzzers, but also to actively guide the fuzzing process towards triggering sanitizer checks. We identified several challenges in sanitizer-guided fuzzing and discussed how ParmeSan addresses them. ParmeSan demonstrates that off-the-shelf sanitizers are useful not only for bug detection but also for finding interesting fuzzing targets that match real-world bugs. ParmeSan can trivially retarget the fuzzing strategy to different classes of bugs by switching to a different sanitizer, all in an automated and blackbox fashion. Our experimental results show that ParmeSan finds many classes of bugs with significantly lower time-to-exposure (TTE) than state-of-the-art fuzzers. Specifically, ParmeSan is 37% faster than existing state-of-the-art coverage-based fuzzers (Angora) and 288% faster than directed fuzzers (AFLGo) when covering the same set of bugs. Techniques used by ParmeSan, such as taint-enhanced input mutation and dynamic CFG construction, can further benefit other fuzzers. To foster further research and encourage reproducibility, we will open-source ParmeSan upon acceptance of the paper.

### 11. Acknowledgments

We thank our shepherd, Aurélien Francillon, and the anonymous reviewers for their feedback. This work was supported by the EU’s Horizon 2020 research and innovation programme under grant agreement No. 786669 (ReAct), by the Netherlands Organisation for Scientific Research through grants 639.023.309 VICI “Dowsing” and 639.021.753 VENI “PantaRhei”, by the United States Office of Naval Research (ONR) under contract N00014-17-1-2782, and by Cisco Systems, Inc. through grant #1138109. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of any of the sponsors or any of their affiliates.

### References

[References are listed here as in the original document.]

### A. Additional Results

In this appendix, we include additional results from our evaluation of different components of ParmeSan, as well as an evaluation of our target pruning strategy.

#### A.1 Impact of Different Components

In Table 7, we present the results on the Google fuzzer-test-suite, where we individually disable each of the three core components: lazy sanitizer optimization (lazysan), target pruning, and the dynamic CFG (dyncfg). Overall, our results show that each component has a significant impact on fuzzing performance. Note that the lazysan optimization requires the dyncfg component.

When disabling the lazysan component, we observe a degradation in TTE in almost every case. The outliers are the bugs in libssh and the memory leak in openssl, where performance improves when disabling lazysan. As discussed previously, this degradation in performance is due to the fact that the sanitizer is disabled when triggering the bug. Note that ParmeSan will still catch the bug, but triggering the sanitizer might be delayed until the exploitation phase.

Overall, we see that the different individual components each contribute significantly to the total performance of ParmeSan. For example, disabling the lazysan optimization increases the TTE by 25%. Likewise, our target pruning accounts for 28% of the improvement. Without target pruning, the performance would be notably worse.

| Type | Runs | ParmeSan |
|------|------|----------|
| UAF  | 10   | 1850     |
| BO   | 10   | 200      |
| IO   | 10   | 49320    |
| UAF  | 10   | 8761     |
| BO   | 10   | 540      |
| BO   | 10   | 4123     |
| ML   | 10   | 123      |
| BO   | 10   | 2701     |

---

This version should be clearer, more coherent, and more professional.