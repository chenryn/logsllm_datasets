For the aforementioned reasons, we focus on considering the attack
surface exposed by System Services. This section discusses the inner
workings of system services and the known security-related pitfalls.
III. THREAT MODEL
A. Android System Services
We consider a threat model in which an attacker controls a
malicious app on the victim’s phone. We also assume that such app
can ask (and obtain) those permissions that are usually available
to non-system third-party apps. Some of these permissions are
automatically granted, while others require user interaction.
System Services are the key mechanisms for apps to interact with
low-level, security-sensitive operating system and hardware compo-
nents. The technical details of these mechanisms, and how third-party
apps can rely on them (by means of invoking Android APIs) are not
trivial, and it involves several sub-components, discussed next.
3
works and were a direct cause of false negatives (see Section VI-F
and VII-E for a direct comparison with SCAnDroid [27]).
Enumerating the attack surface. The first key challenge is to
determine the effective attack surface available to a potential
attacker. Past works analyzed client- and server-side APIs and they
highlighted security-relevant differences [37], [25], [14]. However,
we show that there are server-side APIs (available to an attacker) that
do not have their associated client-side API. There is thus a “hidden”
layer of APIs that has not been considered by previous works. This
makes previous approaches that enumerate the attack surface by
only checking the client-side API significantly incomplete. In fact,
in an attempt to quantify how much attack surface is “missed” we
performed static code analysis on the Android framework itself and
found that, in the best case, only about 44% of the attack surface
is considered (see Section VII-E for the details).
Argument creation and validation. When directly invoking
server-side APIs, one has to determine how to create “valid”
arguments, otherwise the API may just return an error. We also note
that, by interacting with the server-side API, one has even more
flexibility in terms of argument creation since the client-side-only
sanitization routines (if any) are bypassed. However, creating a
successful object automatically is not so immediate and hides many
challenges. For example, even a single field of a complex object,
if not initialized correctly, can lead to the generation of exceptions
with the risk of completely blocking the automatic analysis process.
System stimulation. Another important challenge consists in
properly stimulating the system to induce the information leak. It
is important to give, or create, the chance to the vulnerable APIs
to actually leak sensitive data.
Systematic inspection of return values. One last overlooked
challenge relates to how properly inspect values returned by an API.
Previous works have relied on invoking every public (and private)
method of the returned object, hoping to access fields that could
be interesting for an attacker. However, this approach has several
problems. First, the proper order of the invocations is unknown
and may make a difference: for example, invoking a setter method
before a getter method may cause the field value to be overwritten
and permanently lost. Second, a client-side API may have access
to some security-sensitive information, but it may “sanitize” the
information before returning it to the caller. Even if the sanitization
is not present, there can be private fields that are not accessible via the
object’s methods — not even the private ones. We found that, if not
handled properly, this is yet another direct cause for false negatives.
VI. ANALYSIS FRAMEWORK
This section introduces our new analysis framework. We start by
presenting an overview, we then discuss the various analysis steps
and how we addressed various challenges, and we then offer a direct
comparison with the most recent related work, SCAnDroid [27].
A. Overview
Our analysis framework is constituted of several steps, each of
which tries to solve one of the challenges listed above. The first step
enumerates the attack surface and its APIs (see Section VI-B). Then,
we analyze each API to determine if it leaks sensitive information
about other apps. The framework starts invoking it several times
while keeping the system “at rest” (i.e., without performing any
Fig. 2: Interaction with ActivityManagerService, showing the
client-server structure of Android System Services.
Figure 2 gives an overview of how system services work. In
the example, the goal of an app is to interact with the ActivityMan-
agerService: to do so, it needs to first request a “client” — named
Manager ( 1 ) — to the SystemServiceRegistry class
to interact with the service. Once obtained, it can start invoking
the methods exposed by the Manager. Each method invocation
is then wrapped and forwarded to another component, named
Proxy ( 2 ), in charge of sending the data from the application
to the Binder component ( 3 ). This component “forwards”
the request to its associated Stub ( 4 ), which can be seen as
the counterpart of the Proxy, residing in the Service. Finally, Stub
forwards the request to the actual implementation of the Service
( 5 ). The response follows the same, but reversed, flow. Another
important technical aspect is represented by the Interface ( 6 ),
written in AIDL (Android Interface Definition Language). AIDL
is an Android-specific language used to define the methods exposed
in the Stub that can be reached from the Proxy.
B. Known Potential Pitfalls
The complexity of system services opens to many potential
vulnerabilities. One specific aspect that has been explored by
previous works relates to inconsistencies in the placement of security
checks like permission enforcing or identity control [37], [25], [14].
The common root cause is that the checks were performed only
in the Manager and not also in the Service counterpart. Thus, a
malicious app could use a lower-level Proxy to communicate directly
with the Service, bypassing the security checks. All these existing
vulnerabilities have been fixed by Google and do not pose a threat
in recent versions of Android. However, we show that this “layered”
architecture still leads to new challenges and that they play a key role
when looking for APIs vulnerable to state inference attacks. While
the layered architecture is known to create problems in terms of
placement of security checks, we believe we are the first ones to show
how this complex architecture affects other security aspects as well.
V. TECHNICAL CHALLENGES
One key contribution of this paper consists in the design and
implementation of an automatic framework to identify vulnerable
APIs leading to state inference attacks. This section discusses an
overview of the several technical challenges we faced while design-
ing this system, most of which have been overlooked by previous
4
ApplicationSystemServiceRegistry/dev/binderIActivityManagerStubActivityManagerService123456System ServicePreviously Fuzzed SurfaceHidden SurfaceIActivityManagerProxyActivityManager       IActivityManagerThe parsing process is handled by the Extractor module
and it is built on top of JavaParser [30]. We parse the source code
and extract all the services that are statically included in the system
by looking at the methods listed above. To avoid missing any refer-
ence to a service, we extract the services running on our test device
using the “service” command-line utility. The two lists are then
merged together. Other works used the same approach to enumerate
and list the services available in the Android OS [25], [37], [14].
Note that a non-system app cannot interact with all services. Our
threat model assumes the attacker has control over a non-system
app that can request any non-system permissions: however, some
privileged services are protected by strict SELinux policies or by
some permissions that only system apps can request and any attempts
to access them cause a SecurityException to be thrown.
To enumerate the services that are accessible by an attacker,
we perform a dynamic analysis step: first, we grant all non-system
permissions to our test app, then communicate with a given service
while in the background we monitor for security exceptions and
violations like SELinux runtime violation or security exceptions
raised by missing permissions. For those services that we can interact
with, we enumerate the methods accessible to an attacker. To this end,
previous works [27] relied on the AOSP documentation. However,
this documentation only exposes public client-side methods: this
approach entirely miss the “hidden layer” of server-side methods
that do not have their respective client-side one. In our work, we
do consider client-side methods, but we extend this enumeration by
considering server-side methods as well. Server-side methods are im-
plemented starting from AIDL specifications. AIDL is an extension
of Java and introduces some meaningful keywords that are adding
information about the behavior of a given method. Since JavaParser
is not handling AIDL as language, we wrote our own parser.
We note that, for certain aspects, AIDL is more expressive than
Java. In fact, in AIDL, each method and arguments can be prefixed
by so-called keywords. Among the many AIDL keywords, two of
them are particularly important for our work. The first one is the
out keyword, which specifies that an input argument “can be
modified by the callee.” This helps us recognize this argument as
a potential output value. The second relevant keyword is oneway:
it indicates that the method returns immediately after having sent
the data, without “returning” a meaningful result. Thus, our analysis
proceeds in discarding a method if 1) its return value is void and
none of its arguments are marked with the keyword out, or 2)
its signature shows that the method is defined with the keyword
oneway. We note that previous works did not consider these
possibilities, leading to yet another venue for false negatives.
As an additional filtering step, we also discard methods that
have at least one argument of type IBinder since it is not
possible, to the best of our knowledge, to obtain a reference to a
valid IBinder token without relying on a permission granted
only to system applications.
For each of the potential candidate methods, we repeated the
dynamic analysis monitoring for security exceptions, and keeping
for further analysis only the ones not throwing any security violation.
C. Stimulation Strategies
Once we collect the candidate methods, we then proceed to
invoke them and analyze their returned values.
Fig. 3: This figure represents the framework and how the different
components interact with each other.
other operations). Then, it starts a victim app (the actual app used for
this part of the experiment is not relevant), while it keeps repeatedly
invoking the API under analysis — and logging every invocation
and every returned object. To conclude, we post-process these logs
to identify potential correlations between the returned value of a
given API and changes in the surrounding environment (e.g., the
moment in which the victim app has been started). The output of
the analysis system is the list of APIs that could be potentially used
to mount state inference attacks.
Analysis framework organization. The framework is composed
of six different modules. Figure 3 provides a detailed overview.
First, it enumerates the attack surface: this process involves three
modules: the Extractor ( 1 ), which extracts Android services;
the SecurityChecker ( 2 ), which removes “candidates”
(i.e., Services or Methods) that are causing any kind of Security
Violation when invoked; and the ClassFinder ( 3 ), which,
for each service, extracts from the device the name of the
classes implementing it (both Managers and Interface). Once the
services and classes have been enumerated, the Extractor
and SecurityChecker modules extract and analyze all
the methods implemented by these classes. All methods whose
invocations do not cause SecurityException are then
automatically invoked by the Stimulator module ( 4 ),
while, in the background, the UI-Interaction Automator
module ( 5 ) injects different types of UI events to simulate a user
starting a potentially sensitive app and her interaction. Finally, the
collected results are processed by the Data Analysis module
( 6 ). Note that this last analysis step is performed off-line, while
all the previous modules run on the device itself.
B. Enumerating the Attack Surface
The enumeration of the attack surface is perhaps the fundamental
component of our system. Its correct identification, however, is not as
easy as one might think and many challenges lie behind this complex
process. To begin with, Android offers multiple ways to register
and expose a service to applications. Moreover, there is not a single
central location to locate all the services inside the source code tree.
However, we note that all Android services should be exposed to
the system by using one of the following methods: addService,
publishBinderService, or registerService.
5
AOSPSourceCodeServicesSecurityCheckerClassFinderClassesMethodsStimulatorData Analysis123456Semantics-aware arguments generation. Understanding the
“semantics” of an argument can be very helpful to improve the
effectiveness of this step. This analysis step considers information
taken from source code type information and the argument names.
Our analysis extracts the following arguments’ semantics: 1) App
identifiers: this category contains all the arguments identifying a
specific app installed on the device, such as uid or packageName; 2)
Process identifiers: arguments identifying a specific process running
on the device, such as pid; 3) Filesystem locations: every storage
volume in the filesystem can be identified by a specific UUID such
as storageUuid or volumeUuid; 4) Time values: arguments related
to time and time-ranges, such as beginTime, startTime and endTime.
Identifying (and properly supporting) these values allows us to
maximize the likelihood that the target method will return something
relevant since we passed an expected value. During our analysis,
these arguments are initialized with specific values defined both
statically or dynamically. For example, for arguments like uid or
packageName we can statically define a value — such as the uid of
the application we want to target. Instead, for arguments like pid, we
need to retrieve them at runtime. Moreover, for time-related values,
we enforce a “logical-constraint” such that beginTime will always
be lower than endTime. For the rest of the arguments for which we
do not have a semantic, we automatically instantiate objects with
random content, as discussed next.
Generic argument creation. Even knowing the types of objects,
it is not always trivial to create valid instances. In fact, the objects
in the Android Framework can be very complex, and can contain
many references to other objects, each of which must be correctly
solved in order to correctly create the final object. To invoke a given
method, all the objects necessary to perform its invocation must be
properly created and instantiated: this is, of course, a process that,
if done manually, would be time-consuming. We decide to adopt an
automatic approach and instantiate all the objects using a recursive
algorithm that tries to instantiate an object by iterating through
all the available constructors and recursively tries to create a valid
sequence of object to match at least one of them. We repeat the
process for each nested object and for all objects belonging to the
method’s signature. All the primitive types and their corresponding
wrapper classes are filled with random values.
Since a recursive approach may incur in circular dependencies
and crashes due to the increasing size of the call-stack, we configure
our system with a maximum threshold of five recursive calls. In
cases of failure, we resorted to custom handlers. This was needed
for 105 objects (2.4% of a total of 4,390). We note that this is a
one-off effort (that does not need to be repeated for each version
of Android). To the benefit of the community and future works, we
will release all these custom handlers.
Argument generation strategies. The analysis runs in two con-
figurations. In the first one, a method is invoked multiple times
without changing the arguments. This means that, for every method,
the arguments are created only once. In the second one, instead,
arguments mutate at each invocation of the method. Having multiple
configurations is important since this allows us to analyze different
behavior. We identified situations where APIs were leaking sensitive
information over time only with some particular arguments. For
example, we found a vulnerable API leaking information only when
one of its arguments (related to “time”) was changing from the pre-
vious invocation to the new one. Testing this API without mutating
the arguments would end up in wrongly marking it as “safe.”
User-Interface interaction. Interesting APIs for an attacker are the
ones leaking the current “state” of a target app. An app can be in
background, in foreground, or transitioning from these states. In this
work, we analyze the following subsequent states: when the app
is not started yet, when the user opens it and interacts with it, when
she stops it, and when she resumes it. The goal of this module is
to inject multiple “events” while, in the background, the Stimulator
repeatedly invokes the API currently under test. The automatic
interaction with the UI tries to mimic the behavior of a real user. This
module is built on top of AndroidViewClient [9], a library
which helps the creation of “Android test automation” scripts [9].
D. Data Serialization
If the automatic creation of complex objects posed a challenge
to solve, so it is creating a generic serialization method that can
be applied to all objects returned the invoked APIs. To solve this
problem, we implemented a custom serialization algorithm to store
both arguments and return value collected by the Stimulator. The
serialization algorithm follows the process we used to instantiate
the different objects, but in a reverse order, following a depth-first
exploration strategy. For each object, we start by defining a “child
node” — represented by the actual object we want to serialize —
we recursively dump all its fields and store both their name and
value in a key-value format. For fields with “primitive” types,
we store their textual representation, otherwise, we recursively apply
the same algorithm to all its fields until we reach the “root” class,
java.lang.Object. This allows us to unfold complex object
in a flattened format — like HashMap. If we detect circularity,
we only store the reference of the object without recursively
analyzing it a second time — none of the known JSON serialization
libraries support it. This technique allows us to have a very detailed
representation of a given object, including all (possibly private)
objects that it encapsulates, no matter its complexity.
E. Data Analysis
The last component of our framework is in charge of results
analysis. Its main goal is to find which APIs can be used to mount
state inference attacks. More in general, we want to automatically
identify APIs whose return value is somehow influenced by the