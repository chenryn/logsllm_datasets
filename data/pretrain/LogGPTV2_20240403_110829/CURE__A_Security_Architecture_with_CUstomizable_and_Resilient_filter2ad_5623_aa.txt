title:CURE: A Security Architecture with CUstomizable and Resilient
Enclaves
author:Raad Bahmani and
Ferdinand Brasser and
Ghada Dessouky and
Patrick Jauernig and
Matthias Klimmek and
Ahmad-Reza Sadeghi and
Emmanuel Stapf
Cure: A Security Architecture with CUstomizable 
and Resilient Enclaves
Raad Bahmani, Ferdinand Brasser, Ghada Dessouky, Patrick Jauernig, 
Matthias Klimmek, Ahmad-Reza Sadeghi, and Emmanuel Stapf, 
Technische Universität Darmstadt
https://www.usenix.org/conference/usenixsecurity21/presentation/bahmani
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.CURE: A Security Architecture with CUstomizable and Resilient Enclaves
Raad Bahmani, Ferdinand Brasser, Ghada Dessouky,
Patrick Jauernig, Matthias Klimmek, Ahmad-Reza Sadeghi, Emmanuel Stapf
Technische Universität Darmstadt, Germany
{raad.bahmani, ferdinand.brasser, ghada.dessouky, patrick.jauernig,}
{matthias.klimmek, ahmad.sadeghi, emmanuel.stapf}@trust.tu-darmstadt.de
Abstract
Security architectures providing Trusted Execution Envi-
ronments (TEEs) have been an appealing research subject
for a wide range of computer systems, from low-end embed-
ded devices to powerful cloud servers. The goal of these
architectures is to protect sensitive services in isolated ex-
ecution contexts, called enclaves. Unfortunately, existing
TEE solutions suffer from signiﬁcant design shortcomings.
First, they follow a one-size-ﬁts-all approach offering only
a single enclave type, however, different services need ﬂexi-
ble enclaves that can adjust to their demands. Second, they
cannot efﬁciently support emerging applications (e.g., Ma-
chine Learning as a Service), which require secure channels
to peripherals (e.g., accelerators), or the computational power
of multiple cores. Third, their protection against cache side-
channel attacks is either an afterthought or impractical, i.e., no
ﬁne-grained mapping between cache resources and individual
enclaves is provided.
In this work, we propose CURE, the ﬁrst security architecture,
which tackles these design challenges by providing different
types of enclaves: (i) sub-space enclaves provide vertical iso-
lation at all execution privilege levels, (ii) user-space enclaves
provide isolated execution to unprivileged applications, and
(iii) self-contained enclaves allow isolated execution environ-
ments that span multiple privilege levels. Moreover, CURE
enables the exclusive assignment of system resources, e.g.,
peripherals, CPU cores, or cache resources to single enclaves.
CURE requires minimal hardware changes while signiﬁcantly
improving the state of the art of hardware-assisted security ar-
chitectures. We implemented CURE on a RISC-V-based SoC
and thoroughly evaluated our prototype in terms of hardware
and performance overhead. CURE imposes a geometric mean
performance overhead of 15.33% on standard benchmarks.
1 Introduction
race between attacks and defenses. The ongoing discovery
of exploitable bugs in the large code bases of commodity
operating systems have proven them unsuitable for reliable
protection of sensitive services [104, 105]. This motivated
various hardware-assisted security architectures integrating
hardware security primitives tightly into the System-on-Chip
(SoC). Capability-based systems, such as CHERI [100],
CODOMs [95], IMIX [30], or HDFI [82], offer ﬁne-grained
protection through (in-process) sandboxing, however, they
cannot protect against privileged software adversaries (e.g.,
a malicious OS). In contrast, security architectures provid-
ing Trusted Execution Environments (TEE) enable isolated
containers, also called enclaves. Enclaves allow for a coarse-
grained but strong protection against adversaries in privileged
software layers. TEE architectures have been proposed for
a variety of computing platforms1, in particular for modern
high-performance computer systems, e.g., industry solutions
like Intel SGX [35], AMD SEV [38], ARM TrustZone [3],
or academic solutions such as Sanctum [22], Sanctuary [10],
Keystone [48], or Komodo [27] to name some.
In this paper, we focus on TEE architectures for modern
high-performance computer systems. We investigate the
shortcomings of existing TEE architectures and propose an en-
hanced and signiﬁcantly more ﬂexible TEE architecture with
a prototype implementation for the open RISC-V architecture.
Deﬁciencies of existing TEE architectures. So far, existing
TEE architectures have adopted a one-size-ﬁts-all enclave
approach. They provide only one type of enclave requiring
applications and services to be adapted to these enclaves’ fea-
tures and limitations, e.g., Intel SGX restricts system calls
of its enclaves and thus, applications need to be modiﬁed
when being ported to SGX which produces additional costs.
Additional efforts like Microsoft’s Haven framework [5] or
Graphene [87] are needed to deploy unmodiﬁed applications
to SGX enclaves. Moreover, today, we are using diverse
For decades, software attacks on modern computer systems
have been a persisting challenge leading to a continuous arms
1TEE architectures for resource-constrained embedded systems (e.g.,
Sancus [66], TyTAN [8], TrustLite [47] or TIMBER-V [98]) are not the
subject of this paper.
USENIX Association
30th USENIX Security Symposium    1073
services that process sensitive data, e.g., payment, biometric
authentication, smart contracts, speech processing, Machine
Learning as a Service (MLaaS), and many more. Each ser-
vice imposes a different set of requirements on the underlying
TEE architecture. One important requirement concerns the
ability to securely connect to devices. For example on mobile
devices, privacy-sensitive data is constantly collected over var-
ious sensors, e.g., audio [9], video [83], or biometric data [19].
On cloud servers, massive amounts of sensitive data are aggre-
gated and used to train proprietary machine learning models,
often outside of the CPU, ofﬂoaded to hardware accelera-
tors [84]. However, TEE architectures such as SGX [35],
SEV [38] and Sanctum [22], do not consider secure I/O at
all, solutions such as Keystone [48] would require additional
hardware to support DMA-capable peripherals, solutions like
Graviton [96] require hardware changes at the peripheral side.
TrustZone [3], Sanctuary [10] and Komodo [27] cannot bind
peripherals directly to individual enclaves.
Another important requirement imposed on TEE architec-
tures is an adequate and practical protection against side-
channel attacks, e.g., cache [11,50] or controlled side-channel
attacks [65, 92, 101]. Current TEE architectures either do not
include cache side-channel attacks in their threat model, like
SGX [35], or TrustZone [3], only provide impractical solu-
tions which heavily inﬂuence the OS, like Sanctum [22], or do
not consider controlled side-channel attacks, e.g., SEV [38].
We will elaborate on the related work and the problems of
existing TEE architectures in detail in Section 9.
This work. In this paper, we present a TEE architecture,
coined CURE, that tackles the problems of existing solutions
with a cost-effective and architecture-agnostic design.
CURE offers multiple types of enclaves:
(i) sub-space
enclaves that isolate only parts of an execution context,
(ii) user-space enclaves, which are tightly integrated into
the operating system, and (iii) self-sustained enclaves,
which can span multiple CPU-cores and privilege levels.
Thus, CURE is the ﬁrst TEE architecture offering a high
degree of freedom in adjusting enclave boundaries to fulﬁll
the individual functionality and security requirements of
modern sensitive services such as MLaaS. CURE can bind
peripherals, with and without DMA support, exclusively to
individual enclaves. Further, it provides side-channel pro-
tection via ﬂexible and ﬁne-grained cache resource allocation.
Challenges. Building a TEE architecture with the de-
scribed properties comes with a number of challenges.
(i) New hardware security primitives must be developed
to different functionality
that allow enclaves to adapt
and security requirements.
(ii) Even though the security
primitives should allow ﬂexible enclaves, they must not
require invasive hardware modiﬁcation, which would impede
cross-platform adoption. (iii) While the changes in hardware
should remain small, performance overhead for managing
enclaves in software must be minimized. (iv) Protections
against the emerging threat of microarchitectural attacks
in form of side-channel and transient-execution attacks
must be considered in the design for all types of enclaves.
Contributions. Our design of CURE and its implementation
on the RISC-V platform tackles all these challenges. To
summarize, our main contributions are as follows:
• We present CURE, our novel architecture-agnostic de-
sign for a ﬂexible TEE architecture which can protect
unmodiﬁed sensitive services in multiple enclave types,
ranging from enclaves in user space, over sub-space en-
claves, to self-contained (multi-core) enclaves which
include privileged software levels and support enclave-
to-peripheral binding.
• We introduce novel hardware security primitives for the
CPU cores, system bus and shared cache, requiring min-
imal and non-invasive hardware modiﬁcations.
• We prototype CURE for the open RISC-V platform using
the open-source Rocket Chip generator [4].
• We evaluate CURE’s hardware and software components
in terms of added logic and lines of code, and CURE’s
performance overhead on an FPGA and cycle-accurate
simulator setup using micro- and macrobenchmarks.
2 System Assumptions
CURE targets a modern high-performance multi-core sys-
tem, with common performance optimizations like data and
instruction caches, a Translation Lookaside Buffer (TLB),
shared caches, branch predictors, respective instructions to
ﬂush the core-exclusive resources, and a central system bus
that connects the CPU with the main memory (over a dedi-
cated memory controller) and various peripherals.
System bus and peripherals. The system bus connects the
CPU to a plethora of system peripherals over a ﬁxed set of
hardwired peripheral controllers. The peripherals range from
storage, communication, and input devices to specialized com-
pute units, e.g., hardware accelerators [37]. The CPU interacts
with peripherals using parts of the internal peripheral memory
which are mapped to the address space of the CPU, called
Memory-Mapped I/O (MMIO). We assume that the CPU can
nullify the internal memory of a peripheral to sanitize its state.
Every access from the CPU to a peripheral is decoded in the
system bus and delegated to the corresponding peripheral.
The CPU acts as a parent on the system bus, whereas the
peripherals (and main memory) act as childs that respond to
requests from a parent. However, MMIO is not sufﬁcient
for some peripherals where large amounts of data need to be
shared with the CPU since the CPU needs to copy the data
from the main memory to the peripheral memory. Therefore,
these peripherals are often connected to the system bus as par-
ents over Direct Memory Access (DMA) controllers, allowing
them to directly access the main memory. To cope with re-
source contention in these complex interconnects, system
buses also incorporate arbitration mechanisms to schedule the
1074    30th USENIX Security Symposium
USENIX Association
App
App
App
App
PL3
Operating System
Operating System
PL2
Hypervisor
Firmware
PL1
PL0
Figure 1: Software privilege levels (PL): user space, kernel
space & dedicated levels for hypervisor & ﬁrmware.
establishment of parent-child connections when multiple bus
requests occur simultaneously.
Software privilege levels. We assume the CPU supports the
privilege levels (PLs) as shown in Figure 1. In line with
modern processors (Intel [21], AMD [34] or ARM [55]), we
assume a separation between a user-space layer (PL3) and a
more privileged kernel-space layer (PL2), which is performed
by the MMU (conﬁgured by PL2 software) through virtual
address spaces. The CPU may support a distinct layer for
hypervisor software (PL1) to run virtualized OS in Virtual
Machines (VMs), where the separation to PL2 is performed
by a second level of hardware-assisted address translation [73].
Lastly, we assume a highly-privileged layer (PL0) which
contains ﬁrmware that performs speciﬁc tasks, e.g., hardware
emulation or power management.
We assume that the system performs secure boot on re-
set, whereas the ﬁrst bootloader stored in CPU Ready-Only
Memory (ROM), veriﬁes the ﬁrmware through a chain of
trust [53]. After veriﬁcation, the ﬁrmware starts execution
from a predeﬁned address in the ﬁrmware code and loads
the current ﬁrmware state from non-volatile memory (NVM)
where it is stored encrypted, integrity- and rollback-protected.
The cryptographic keys to decrypt and verify the ﬁrmware
state are passed by the bootloader which loads the ﬁrmware
into Random-access Memory (RAM). Rollback protection
can be achieved, e.g., by making use of non-volatile memory
with Replay Protected Memory Block (RPMB) partitions or
by using eFuses as secure monotonic counters [56]. When a
system shutdown is performed, the ﬁrmware stores its state
in the NVM, encrypted and integrity- and rollback-protected.
3 Adversary Model
Our adversary model adheres to the one commonly assumed
for TEE architectures, i.e., a strong software-only adversary
that can compromise all software components, including the
OS, except a small software/microcode Trusted Computing
Base (TCB) which conﬁgures the hardware security primi-
tives of the system, manages the enclaves and which is inher-
ently trusted [3, 10, 22, 27, 35, 48].
We assume that the goal of the adversary is to leak secret
information from the TCB or from a victim enclave. An
adversary with full control of the system software can inject
own code into the kernel (PL2) and even into the hypervisor
(PL1). This allows the adversary, with full access to the TCB
interface used for setting up enclaves, to spawn malicious
processes and even enclaves. Even though the adversary
cannot change the ﬁrmware code (which uses secure boot),
memory corruption vulnerabilities might still be present in the
code and be exploitable by the adversary [24]. In addition, we
assume that an adversary is able to compromise peripherals
from software to perform DMA attacks [63, 76].
We assume the underlying hardware to be correct and
trusted, and hence, exclude attacks that exploit hardware
ﬂaws [40, 86]. We also do not assume physical access, and
thus, fault injection attacks [6], physical side-channel at-
tacks [46, 62] or the physical connection of malicious periph-
erals are out of scope. We do not consider Denial-of-Service
(DoS) attacks in which the adversary starves an enclave since
an adversary with control over the OS can shut down the
complete system trivially. As standard for TEE architectures,
CURE does not protect from software-exploitable vulnerabili-
ties in the enclave code but prevents their exploitation from
compromising the complete system.
4 Requirements Analysis
To provide customizable, practical and strongly-isolated en-
claves, CURE must fulﬁll a number of security and function-
ality requirements. We list them in the following section, and
show in Section 7 how CURE fulﬁlls the security require-
ments. In Section 6 and Section 8, we demonstrate how the
functionality requirements are met.
4.1 Security Requirements (SR)
SR.1: Enclave protection. Enclave code must be integrity-
protected when at rest, and inaccessible for an adversary when
executed. All sensitive enclave data must remain conﬁden-
tial and integrity-protected at all times. An enclave must