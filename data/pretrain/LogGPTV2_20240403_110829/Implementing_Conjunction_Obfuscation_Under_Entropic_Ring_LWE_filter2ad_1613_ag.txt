Cham: Springer
[36] D. Apon, N. D¨ottling, S. Garg, and P. Mukherjee, “Cryptanalysis of
Indistinguishability Obfuscations of Circuits over GGH13,” in 44th
International Colloquium on Automata, Languages, and Programming
(ICALP 2017), vol. 80, 2017, pp. 38:1–38:16.
[37] S. Garg, E. Miles, P. Mukherjee, A. Sahai, A. Srinivasan, and
M. Zhandry, Secure Obfuscation in a Weak Multilinear Map Model.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 241–268.
[Online]. Available: https://doi.org/10.1007/978-3-662-53644-5 10
[38] M. Bellare and I. Stepanovs, Point-Function Obfuscation: A Framework
and Generic Constructions.
Berlin, Heidelberg: Springer Berlin
Heidelberg, 2016, pp. 565–594. [Online]. Available: http://dx.doi.org/
10.1007/978-3-662-49099-0 21
[39] S. Goldwasser and G. N. Rothblum, On Best-Possible Obfuscation.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2007, pp. 194–213.
[Online]. Available: http://dx.doi.org/10.1007/978-3-540-70936-7 11
[40] B. Lynn, M. Prabhakaran, and A. Sahai, Positive Results and
Techniques for Obfuscation. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2004, pp. 20–39. [Online]. Available: http://dx.doi.org/10.
1007/978-3-540-24676-3 2
[41] G. D. Crescenzo, L. Bahler, B. A. Coan, Y. Polyakov, K. Rohloff,
and D. B. Cousins, “Practical implementations of program obfuscators
for point functions,” in International Conference on High Performance
Computing & Simulation, HPCS 2016,
Innsbruck, Austria, July
18-22, 2016.
[Online]. Available:
IEEE, 2016, pp. 460–467.
http://dx.doi.org/10.1109/HPCSim.2016.7568371
[42] L. Bahler, G. Di Crescenzo, Y. Polyakov, K. Rohloff,
and
D. B. Cousins, “Practical
implementation of lattice-based program
obfuscators for point functions,” in 2017 International Conference
on High Performance Computing & Simulation, HPCS 2017, Genoa,
Italy, July 17-21, 2017, 2017, pp. 761–768.
[Online]. Available:
https://doi.org/10.1109/HPCS.2017.115
367
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
[43] Z. Brakerski and G. N. Rothblum, “Obfuscating conjunctions,” Journal
of Cryptology, vol. 30, no. 1, pp. 289–320, 2017.
[44] D. Micciancio and C. Peikert, “Trapdoors for
lattices: Simpler,
tighter, faster, smaller,” in Advances in Cryptology–EUROCRYPT 2012.
Springer, 2012, pp. 700–718.
[45] C. F. F. Karney, “Sampling exactly from the normal distribution,” ACM
Trans. Math. Softw., vol. 42, no. 1, pp. 3:1–3:14, Jan. 2016. [Online].
Available: http://doi.acm.org/10.1145/2710016
[46] D. Micciancio and M. Walter, “Gaussian sampling over the integers:
Efﬁcient, generic, constant-time,” in Advances in Cryptology - CRYPTO
2017 - 37th Annual International Cryptology Conference, Santa Bar-
bara, CA, USA, August 20-24, 2017, Proceedings, Part II, 2017, pp.
455–485.
[47] J.-S. Coron, T. Lepoint, and M. Tibouchi, Practical Multilinear
Berlin, Heidelberg: Springer Berlin
Maps over
Heidelberg, 2013, pp. 476–493. [Online]. Available: https://doi.org/10.
1007/978-3-642-40041-4 26
Integers.
the
[48] S. Garg, C. Gentry,
from Ideal
Maps
Berlin Heidelberg,
http://dx.doi.org/10.1007/978-3-642-38348-9 1
Lattices.
2013,
pp.
and S. Halevi, Candidate Multilinear
Springer
[Online]. Available:
Berlin, Heidelberg:
1–17.
[49] K.
Nayak,
Fletcher,
C. W.
L.
and V. Goyal,
Chandran,
S. Lokam, E. Shi,
“Hop: Hardware makes
obfuscation practical,” in 24th Annual Network and Distributed
System Security Symposium, NDSS.
Internet Society, February
2017. [Online]. Available: https://www.microsoft.com/en-us/research/
publication/hop-hardware-makes-obfuscation-practical-2/
Ren,
N.
[50] D. Wichs and G. Zirdelis, “Obfuscating compute-and-compare programs
under lwe,” Cryptology ePrint Archive, Report 2017/276, 2017, http:
//eprint.iacr.org/2017/276.
[51] R. Goyal, V. Koppula, and B. Waters, “Lockable obfuscation,” Cryptol-
ogy ePrint Archive, Report 2017/274, 2017, http://eprint.iacr.org/2017/
274.
[52] M. Kubat, An Introduction to Machine Learning, 1st ed.
Springer
Publishing Company, Incorporated, 2015.
[53] Y. Xiao, K. G. Mehrotra, and C. K. Mohan, Efﬁcient Classiﬁcation
of Binary Data Stream with Concept Drifting Using Conjunction Rule
Based Boolean Classiﬁer, 2015, pp. 457–467.
[54] Y. LeCun, C. Cortes, and C. J. Burges, “The MNIST database of
handwritten digits,” http://yann.lecun.com/exdb/mnist/, accessed: 2017-
11-13.
[55] A. Anand, L. Wilkinson, and D. N. Tuan, “An l-inﬁnity norm visual
classiﬁer,” in 2009 Ninth IEEE International Conference on Data
Mining, Dec 2009, pp. 687–692.
[56] L. Wilkinson, A. Anand, and D. N. Tuan, “Chirp: A new classiﬁer
based on composite hypercubes on iterated random projections,” in
Proceedings of
the 17th ACM SIGKDD International Conference
on Knowledge Discovery and Data Mining, ser. KDD ’11. New
York, NY, USA: ACM, 2011, pp. 6–14.
[Online]. Available:
http://doi.acm.org/10.1145/2020408.2020418
[57] V. Lyubashevsky, C. Peikert, and O. Regev, “A toolkit for ring-LWE
cryptography,” in EUROCRYPT, vol. 7881. Springer, 2013, pp. 35–54.
[58] A. Aysu, C. Patterson, and P. Schaumont, “Low-cost and area-efﬁcient
fpga implementations of lattice-based cryptography,” in Hardware-
Oriented Security and Trust (HOST), 2013 IEEE International Sym-
posium on, June 2013, pp. 81–86.
[59] C. Gentry,
S. Halevi,
and N.
Evaluation of
Berlin Heidelberg,
850–867.
https://doi.org/10.1007/978-3-642-32009-5 49
the AES Circuit.
2012,
pp.
P.
Smart, Homomorphic
Berlin, Heidelberg: Springer
[Online]. Available:
[60] V. Lyubashevsky, C. Peikert, and O. Regev, On Ideal Lattices and
Learning with Errors over Rings. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2010, pp. 1–23. [Online]. Available: http://dx.doi.org/10.
1007/978-3-642-13190-5 1
[61] N. Genise and D. Micciancio, “Faster gaussian sampling for trapdoor
lattices with arbitrary modulus,” Cryptology ePrint Archive, Report
2017/308, 2017, http://eprint.iacr.org/2017/308.
[62] R. El Bansarkhani and J. Buchmann, “Improvement and efﬁcient im-
plementation of a lattice-based signature scheme,” in Selected Areas in
Cryptography–SAC 2013, T. Lange, K. Lauter, and P. Lisonˇek, Eds.
Springer, 2014, pp. 48–67.
[63] L. Ducas, V. Lyubashevsky, and T. Prest, Efﬁcient Identity-Based En-
Berlin, Heidelberg: Springer Berlin
cryption over NTRU Lattices.
Heidelberg, 2014, pp. 22–41.
[64] C. Peikert, “An efﬁcient and parallel Gaussian sampler for lattices,” in
CRYPTO, 2010, pp. 80–97.
[65] C. Gentry, C. Peikert, and V. Vaikuntanathan, “Trapdoors for hard
lattices and new cryptographic constructions,” in Proceedings of the
Fortieth Annual ACM Symposium on Theory of Computing, ser. STOC
’08. New York, NY, USA: ACM, 2008, pp. 197–206.
[66] N. C. Dwarakanath and S. D. Galbraith, “Sampling from discrete gaus-
sians for lattice-based cryptography on a constrained device,” Applicable
Algebra in Engineering, Communication and Computing, vol. 25, no. 3,
pp. 159–180, Jun 2014.
[67] M. Albrecht, S. Scott, and R. Player, “On the concrete hardness of
learning with errors,” Journal of Mathematical Cryptology, vol. 9, no. 3,
p. 169203, 10 2015.
[68] M. Chase, H. Chen, J. Ding, S. Goldwasser, S. Gorbunov, J. Hoffstein,
K. Lauter, S. Lokam, D. Moody, T. Morrison, A. Sahai, and V. Vaikun-
tanathan, “Security of homomorphic encryption,” HomomorphicEncryp-
tion.org, Redmond WA, Tech. Rep., July 2017.
[69] J.-F. Dhem and J.-J. Quisquater, “Recent results on modular multiplica-
tions for smart cards,” in Smart Card Research and Applications, ser.
Lecture Notes in Computer Science, J.-J. Quisquater and B. Schneier,
Eds. Springer Berlin Heidelberg, 2000, vol. 1820, pp. 336–352.
PSEUDOCODE FOR TRAPDOOR SAMPLING ALGORITHMS
APPENDIX A
(cid:14) q = [q]
κ
t is the vector of
Algorithm 3 G-sampling [61]
function SAMPLEG(σt, u, q)
base-t digits in modulus q
(cid:21)
t (1 + 1/κ) + 1
σ := σt/ (t + 1)
l0 :=
h0 := 0
d0 := q0/t
for i = 1..κ − 1 do
(cid:21)
(cid:21)
t (1 + 1/(κ − i))
t (1 − 1/{κ − (i − 1)})
li :=
hi :=
di := (di−1 + qi) /t
sparse triangular matrix L
column of matrix D
(cid:14) li, hi are entries in
(cid:14) di are entries in the last
end for
Define Z ∈ Zκ×n
(cid:14) this vector will store the result
for i = 0..n − 1 do (cid:14) Iterate through all coefﬁcients of
of G-sampling
polynomial. This loop can be parallelized.
coefﬁcient u(i) ∈ Zq
(cid:14) v = [v]
κ
t is the vector of digits in
(cid:14) p, l, h ∈ Rκ
v := u(i)
p ← PERTURB(σ, l, h)
c0 := (v0 − p0)/t
for j = 1..κ − 1 do
cj = (cj−1 + vj − pj)/t
end for
z ← SAMPLED(σ, c, d)
t0 := t · z0 + q0 · zκ−1 + v0
for j = 1..κ − 2 do
(cid:14) z ∈ Zκ; c, d ∈ Rκ
tj := t · zj − zj−1 + qj · zκ−1 + vj
end for
tκ−1 := qκ−1 · zκ−1 − zκ−2 + vκ−1
(cid:14) t = (t0, t1, . . . , tκ−1) ∈ Zκ
Z(:, i) := t
end for
return Z
end function
368
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
The algorithms described in this section are variations of
trapdoor sampling algorithms proposed in [61]. The modiﬁca-
tions were made to reduce the number of calls to polynomial
CRT operations, increase opportunities for parallel execution,
and ease the software implementation.
A more signiﬁcant modiﬁcation is in the Perturb subroutine
of Algorithm 3. Instead of using discrete Gaussian distribution,
we switched to the continuous distribution. The use of discrete
Gaussian distribution would require a higher value of σt,
proportional to t2 rather than t + 1, due to the Σ3 condition
in Corrolary 3.1 of [61]. This would signiﬁcantly increase the
modulus q (for large t) determined by the correctness con-
straint (1). The use of the continuous distribution eliminates
the Σ3 condition. A more detailed discussion of this scenario
is provided after Corrolary 3.1 in [61].
(cid:14) l, h ∈ Rκ are the entries in
(cid:14) SAMPLER is continuous
function PERTURB(σ, l, h)
matrix L
for i = 0..κ − 1 do
zi ← SAMPLER(σ, 0)
Gaussian sampler
end for
for i = 0..κ − 2 do
pi = li · zi + hi+1 · zi+1
end for
pκ−1 = hκ−1 · zκ−1
return p
end function
Algorithm 4 Perturbation generation [61]
function SAMPLEPZ(n, q, s, σt, (ˆr, ˆe) )
i ˆri
(cid:6)−1
(cid:5)
(cid:3)κ
(cid:3)κ
t − s
−2
−2
(cid:3)κ
z :=
σ
a := s2 − z
i=1 ˆrT
b := −z
(cid:21)
i ˆei
d := s2 − z
i=1 ˆeT
i ˆei
for i = 0..nκ − 1 do
s2 − σ2
qi ← SAMPLEZ(
t )
end for
(cid:29)
convert q ∈ Zκ×n to ˆq ∈ Rκ
i=1 ˆrT
(cid:28)
q
can be executed in parallel
t
t
ˆq
ˆr
ˆe
c := − σ2
s2−σ2
p ← SAMPLE2Z (a, b, d, c)
convert p ∈ Z2×n to ˆp ∈ R2
return (ˆp, ˆq)
q
end function
function SAMPLE2Z(a, b, d, c )
let c = (c0, c1)
q1 ← SAMPLEFZ(d, c1)
convert q1 ∈ Zn to ˆq1 ∈ K2n
−1 ( ˆq1 − c1)
c0 := c0 + bd
q0 ← SAMPLEFZ(a − bd
−1bT , c0)
return (q0, q1)
(cid:14) a ∈ K2n
(cid:14) b ∈ K2n
(cid:14) d ∈ K2n
(cid:14) CRT operations
(cid:14) c ∈ K2
(cid:14) p ∈ Z2×n
2n
(cid:14) q1 ∈ Zn
(cid:14) q0 ∈ Zn
(cid:14) p = (p0, p1, . . . , pκ−1) ∈ Rκ
end function
(cid:14) Sample from the lattice
The expression corresponding to the minuend in Evaluate,
i.e., A0SΠR3, can be written as follows:
function SAMPLED(σ, c, d)
generated by matrix D
zκ−1 ← SAMPLEZ(σ/dκ−1,−cκ−1/dκ−1)
c := c − zκ−1d
for i = 0..κ − 2 do
zi ← SAMPLEZ(σ,−ci)
end for
return z
end function
(cid:14) z = (z0, z1, . . . , zκ−1) ∈ Zκ
APPENDIX B
DERIVATION OF CORRECTNESS CONSTRAINT FOR
CONJUNCTION OBFUSCATOR