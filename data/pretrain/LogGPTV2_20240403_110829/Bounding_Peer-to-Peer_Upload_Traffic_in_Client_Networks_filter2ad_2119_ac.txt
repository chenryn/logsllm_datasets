8
0
.
0
5
10
15
20
Delay (in seconds)
Figure 5. The measured out-in packet delay
in the trace data. Part-(a) shows the raw data
with observed port-reuse effects on peaks.
Part-(b) shows the CDF of the out-in packet
delays.
like delayed-ACK. However, they should not be too long.
The statistics of out-in packet delay are shown in Figure 5-
b. Since we use a large expiry timer, Te = 600 seconds,
to handle expired socket pairs, in Figure 5-b, the effect of
port-reuse can be observed roughly at the peaks. Although
the port-reuse timer varies in different implementations, we
ﬁnd that most of them are in multiples of 60 seconds. The
statistics also show that most out-in packet delays are very
short. In Figure 5-c, 99% of out-in packet delays are under
2.8 seconds. The result also implies that the most Internet
trafﬁc is bi-directional and has high locality in the temporal
domain.
4 The Bitmap Filter
By deﬁnition, a client network should have only client
hosts, such as a business enterprise customer, a group of
o r k
C lie n t n et w
s
r
u t e
o
e   r
g
d
E
Client network
Core routers
ISP 
network
Peer ISP
Client network
Possible 
Installations
Figure 6. An ISP network with bitmap ﬁlters.
DSL users, a wireless network, or buildings in a campus.
Usually client hosts only initiate requests and seldom re-
ceive requests from the Internet. However, as the peer-to-
peer softwares become more and more popular, client hosts
now also wait for inbound connections from other peers and
thus generate huge volumes of upload trafﬁc. The bitmap
ﬁlter is a lightweight and efﬁcient algorithm that can be used
to bounding upload trafﬁc from client networks. In this sec-
tion, we ﬁrst illustrate the usage model of our solution and
then introduce the detailed design of the algorithm.
4.1 The Usage Model
Bitmap ﬁlters should be installed in an ISP network. As
shown in Figure 6, an ISP usually has edge routers (black
nodes) and core routers (white nodes). The bitmap ﬁlter can
be installed on an edge router directly connected to a client
network or on a core router, which is an aggregate of two or
more client networks. In Figure 6, the nodes with an out-
lined circle are possible locations to install the bitmap ﬁlter.
Actually, the bitmap ﬁlter can be installed at any location
through which trafﬁc from client networks must pass.
4.2 Construct the Bitmap Filter
The design of the bitmap ﬁlter leverages certain client
network trafﬁc characteristics to improve the ﬁlter perfor-
mance. Based on the observations that 1) the client net-
work trafﬁc is bi-directional, 2) most out-in packet delays
are short, and 3) most of the outbound trafﬁc are triggered
by inbound requests, a na¨ıve solution is proposed to limit
the upload trafﬁc. The solution basically keeps only the
outbound requests initiated by inner clients. When the up-
load bandwidth throughput is low, all the inbound packets,
either responses to previous outbound requests or inbound
requests to the client network, are permitted. However, if
the upload bandwidth throughput is high, only the inbound
packets that are responses to previous outbound requests
are permitted. The solution works as follows: Suppose
that a timer with an initial value of T is associated with
the socket pair σout = {protocol , source-address, source-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:17 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007H1(t)
H2(t)
Hm(t)
n-bit
1
1
2
1
3
1
1
1
1
1
1
1
...
...
...
...
...
k
1
1
1
2n
bits
Figure 7. An example of a {k × n}-bitmap, the
core architecture for a bitmap ﬁlter.
port, destination-address, destination-port} of each out-
bound packet that is new to an edge router. If the socket
pair σout is not new to the router, the value of the associ-
ated timer is simply reset to T . The timer reduces every
time unit Δt. When the timer expires (reaches zero), the as-
sociated socket pair is deleted. For each inbound packet, the
router extracts the socket pair σin and checks if its inverse
σin exists. If it exists, the packet is bypassed; otherwise, it is
dropped under certain probability Pd. The dropping prob-
ability Pd in our algorithm varies according to the uplink
bandwidth throughput. It can be lower when the throughput
is low and higher when the uplink is fully utilized.
The problem of the above solution is that the complexi-
ties for both storage and computations make it infeasible to
deploy in a large scale network. Thus, a bitmap ﬁlter, which
is a composite of k bloom ﬁlters [9] of equal size N = 2n
bits, denoted as a {k × N}-bitmap ﬁlter, is used instead.
An example of a bitmap is illustrated in Figure 7. Each col-
umn in the bitmap represents a bit-vector of a bloom ﬁlter.
For the convenient of explanation, in the algorithm, the bit-
vector of the ith bloom ﬁlter is written as bit-vector[i].
At the initialization phase, all the bits on the {k × n}-
bitmap are set to zero and an index of the current bit vec-
tor idx is set to the ﬁrst bit-vector. All the bloom ﬁlters in
the bitmap share the same m hash functions, each of which
should only output an n-bit value. An output that exceeds n-
bit should be truncated. The bitmap ﬁlter comprises two al-
gorithms, the b.rotate algorithm, which clears expired bits
from the bitmap, and the b.ﬁlter algorithm, which marks
and looks up bits in the bitmap. The algorithms are detailed
in Algorithm 1 and Algorithm 2, respectively. The b.rotate
algorithm is quite simple. The algorithm runs every time
unit Δt. When it is activated, the index of the current bit
vector idx is set to the next bit vector and all bits in the pre-
vious bit vector are set to zero. For example, assume there
are k bit vectors in a bitmap ﬁlter indexed from {1,··· , k}.
If the current index is set to the 1st bit vector, then the last
bit vector will be the kth bit-vector; however, if the current
index is set to the jth(1 < j ≤ k) bit vector, then the last
bit vector will be the (j − 1)th bit-vector.
Algorithm 1 The Timer Handler - b.rotate()
Require: An initialized {k × n}-bitmap and an index to
1: last = idx
2: idx = (idx + 1) (mod k)
3: set all bits in bit-vector[last] to zero
4: return idx
current bit vector idx.
The bitmap is marked and looked up using the b.ﬁlter
algorithm, as shown in Algorithm 2. When a packet is
received by an edge router, the b.ﬁlter algorithm is ap-
plied to determine whether the packet should be bypassed
or dropped. For an outbound packet, the b.ﬁlter iteratively
applies all the m hash functions on the socket pair σout and
marks the corresponding bits in all bit vectors to a value of
1. Outbound packets are always bypassed. On the other
hand, when an inbound packet is received, the b.ﬁlter iter-
atively applies all the hash functions on the socket pair σin
and checks if the corresponding bit in the current bit vec-
tor indicated by the index idx is marked or not. If a bit is
not marked, then the packet will be dropped under a prob-
ability of Pd. The value of Pd can be dynamically adjusted
according to the upload bandwidth throughput. An exam-
ple of generating Pd is a similar form to the random early
detection (RED) algorithm [10]. Given two threshold L, H
(L < H), and an indicator of upload bandwidth throughput
b, the Pd is computed by Equation 1.
⎧⎨
⎩
Pd =
0
b−L
H−L
1
, if b ≤ L
, if L < b < H
, if b ≥ H
(1)
Note that
the bitmap ﬁlter is not necessary to use
all ﬁelds in the socket pair σ to compute the hash
value.
Instead, for an outbound packet, the hash func-
tions can be applied only to the parts of {protocol , source-
address, source-port, destination-address}.
In con-
trast, for an inbound packet, only {protocol , destination-
address, destination-port, source-address} are used to
compute the hash value. The reason not to use all ﬁelds
is to support the “hole-punching” [11] technique, which is
usually used for a client host to create bypass rules on the
network address translation (NAT) or ﬁrewall device for fu-
ture inbound connections. The support to “hole-punching”
can be enabled or disabled depending on the network ad-
ministrator’s choice.
In summary, the “mark” action is always performed on
all bit vectors, the “look up” and the “clean up” actions are
only performed for the current bit vector and the last bit
vector, respectively. The combination of these operations
achieves the same purpose as the na¨ıve solution described
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:17 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Algorithm 2 The Filtering Function - b.ﬁlter()
Require: An initialized {k × n}-bitmap, an index of cur-
rent bit vector idx, a conditional dropping probability
Pd, and a packet pkt to be inspected.
j = h(σout)
mark the jth bit in all bit vectors as 1
end for
for h ∈ hash-function list do
1: if pkt is an outbound packet then
for h ∈ hash-function list do
2:
3:
4:
5:
6: else if pkt is an inbound packet then
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: end if
17: return PASS
end if
end for
return DROP
end if
j = h(σin)
if the jth bit in bit-vector[idx] is 0 then
p = a randomly generated number in [0, 1]
if p < Pd then
at the beginning of this sub-section, which effectively limits
the upload trafﬁc sent from a client network.
4.3 Choose Proper Parameters
As stated in Section 4.2, several parameters for the
bitmap ﬁlter must be decided. They are the k - the num-
ber of bit vectors in a bitmap, the N - the size of a bit vec-
tor, the Δt - the time unit to clean up a bit vector, and the
m - the number of hash functions used in the bitmap ﬁlter.
The k and N parameters decide how much storage space
is required for the bitmap ﬁlter; and the k and Δt parame-
ters decide the countdown time of the timer Te mentioned
in Section 3.3. Thus, given a moderate expiry timer Te and
Δt(cid:8).
a proper time unit Δt, the value k can be decided by (cid:7) Te
Recall the result in Section 3.3. Te should not be too
long, since the port-reuse effect may incur more false pos-
itives2, which decrease the precision of the bandwidth lim-
iter. In other words, a packet that should be dropped may
be accepted by the limiter. However, to prevent overkilling
connections with longer delays, Te should not be too short
either. A value below 60 seconds, such as 20 or 30 seconds,
would be acceptable. On the other hand, the time unit Δt
need not to be too short. Although a shorter Δt improves
the timer’s granularity, a Δt that is too short may raise the
frequency of running bitmap clean-ups too much and thus
reduce the overall performance of the system. A value of 4
or 5 seconds would be appropriate.
2The deﬁnition of false positives is deﬁned in Section 5
The n is a ﬂexible parameter. A network administrator
can decide the value according to the number of concur-
rently active connections and the memory space that they
are willing to devote to the system. Note that a small n
will raise the possibility of false positives and reduce the
effectiveness of trafﬁc limiter. To avoid the problem, more
hash functions (i.e., m) may be used to reduce false posi-
tives. When deploying such a system, administrators should
consider a trade-off between storage space and computation
power to decide the value of n and m. We further evaluate
the effects of different sets of parameters in the next section.
5 Evaluations
In this section, we evaluate several aspects of the pro-
posed solution by analyses and simulations.
5.1 False Positives and False Negatives
As our solution adopts an approximate algorithm to
maintain outbound connection states, it may incur false pos-
itives and false negatives. The deﬁnition of a false positives
is similar to that used in the original bloom ﬁlter paper [9].
That is, an inbound packet that should be dropped is ac-
cepted by the ﬁlter. In contrast, a false negative is an in-
bound packet that should be accepted is dropped. Since the
bitmap ﬁlter works in ﬂavor of a positive listing, only in-
bound packets with an out-in packet delay longer than the
expiry timer Te are ﬁltered out. Thus, the number of false
negatives is very low. As the result in Section 3.3 shows,
false negatives should be lower than 1% when Te is greater
than 3.61 seconds.
However, we should focus more on false positives. As-
sume m hash functions are applied to a single inbound
packet and the utilization of the current bit vector is U = b
N ,
where b is the number of marked bits in a bit vector. The
probability p that a random inbound socket pair σ will pen-
etrate the bitmap ﬁlter is
(cid:5)
(cid:6)m