This setup should not specifically affect individual tasks, but may
have caused some jitter for subjects.
VIII. RELATED WORK
As mentioned in the introduction, previous papers have already
shed some light on the problem of GUI confusion attacks in
Android. In particular, [3] describes tapjacking attacks in general,
whereas [4] focuses on tapjacking attacks against WebViews
(graphical elements used in Android to display Web content). Felt
et al. [5] focus on phishing attacks on mobile devices deriving from
control transfers (comparable to the “App Switching” attacks we
described), whereas Chen et al. [6] describe a technique to infer
the UI state from an unprivileged app and present attack examples.
Our paper generalizes these previously-discovered techniques by
systematizing existing exploits and introducing additional attack
vectors. We also confirmed the effectiveness of these attacks
through a user study. More importantly, we additionally proposed
two general defense mechanisms and evaluated their effectiveness.
Fernandes et al. present a GUI defense focusing on keyboard
input in [9]: the “AuthAuth” system augments the system keyboard
by presenting a user-defined image and the app name and icon.
Our proposed defense system uses the same “UI-user shared secret”
mechanism: in both cases, users must first choose an image that
will be known only by the OS and the user, making it unspoofable
for an attacking app.
However our works significantly differ in how this mechanism
is used and what is presented to the user. For instance, as we have
shown before (e.g., see Figure 4), app names and icons are not valid
or reliable roots of trust, as they are easy to spoof. Apps with similar-
looking name and icons are commonly present in Android markets,
and fake apps with the same name and icon can be side-loaded on the
device. Our work, instead, establishes a root of trust to the author of
the app, and extends the covered attack surface by considering more
attack scenarios and methods. In particular, we opted to secure all the
user interactions instead of focusing only on the keyboard, because
users interact with apps in a variety of ways. For instance, some
payment apps (e.g., Google Wallet) use custom PIN-entry forms,
while others get sensitive input such as health-related information
through multiple-choice buttons or other touch-friendly methods.
Other research efforts focus on the analysis of Android malware.
Zhou et al. performed a systematic study of the current status of
malware [22], whereas other studies focus on the specific techniques
945945946
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:15 UTC from IEEE Xplore.  Restrictions apply. 
that current malicious applications use to perform unwanted
activities. A frequently-used technique is repackaging [14], [15].
In this case, malware authors can effectively deceive users by
injecting malicious functionality in well-known, benign-looking
Android applications. As previously mentioned in Section III-B2,
this technique can be used in combination with our attack vectors
to make it easy for attackers to mimic the GUI of victim apps.
Roesner et al. [28] studied the problem of embedded user
interfaces in Android and its security implications. Specifically, they
focus on the common practice of embedding in an app graphical
elements, created by included libraries. The problem they solve is
related and complementary to the one we focus on. Specifically they
focus on how users interact with different elements within the same
app, whereas we focus on how users interact with different apps.
Felt et al. performed a usability study to evaluate how users
understand permission information shown during the installation
process of an app [29]. They showed that current permission
warnings are not helpful for most users and presented recommen-
dations for improving user attention. Possible modifications to how
permissions are shown to users and enforced have been also studied
in Aurasium [30]. Our work has in common with these the fact that it
proposes a set of modifications to give users more information on the
current status of the system, although we address a different threat.
Many studies investigated how to show security-related informa-
tion and error messages in browsers, both from a general prospec-
tive [31]–[33] and specifically for HTTPS [34]–[38]. Akhawe et
al. [38] showed that proper HTTPS security warning messages are ef-
fective in preventing users from interacting with malicious websites.
The knowledge presented by these works has been used as a baseline
for our proposed defense mechanism. It should be noted, however,
that other studies have shown that indicators are not always effective.
In fact, over the years, the situation has significantly improved in
browsers: compare, for instance, the almost-hidden yellow lock on
the status bar of Internet Explorer 6 from [37] with Figure 1. We
believe that our solution may also have benefited from the EV-style
presentation of a name in addition to a lock and the consequent
increase in screen area. In general, effectively communicating the
full security status of user interactions is an open problem.
Phishing protection has been extensively studied in a web
browser context (e.g., in [39]–[41]) and is commonly implemented
using, for example, blacklists such as Google’s SafeBrowsing [42].
Our work is complementary to these approaches and explores GUI
confusion attacks that are not possible in web browsers.
Finally, the problem of presenting a trustworthy GUI has been
studied and implemented in desktop operating systems, either
by using a special key combination [43] or decorations around
windows [44]. Given the limited amount of screen space and
controls, applying these solutions in mobile devices would be
impossible in an unobtrusive way.
IX. CONCLUSION
In this paper, we analyzed in detail the many ways in which
Android users can be confused into misidentifying an app. We
categorized known attacks, and disclose novel ones, that can be
used to confuse the user’s perception and mount stealthy phishing
and privacy-invading attacks.
We have developed a tool to study how the main Android
GUI APIs can be used to mount such an attack, performing a full
state exploration of the parameters of these APIs, and detecting
problematic cases.
Moreover, we developed a two-layered defense. To prevent
such attacks at the market level, we have developed another tool
that uses static analysis to identify code in apps that could be
leveraged to launch GUI confusion attacks, and we have evaluated
its effectiveness by analyzing both malicious applications and
popular benign ones.
To address the underlying user interface limitations, we have
presented an on-device defense system designed to improve
the ability of users to judge the impact of their actions, while
maintaining full app functionality. Using analogies with how web
browsers present page security information, we associate reliable
author names to apps and present them in a familiar way.
Finally, we have performed a user study demonstrating that our
on-device defense improves the ability of users to notice attacks.
ACKNOWLEDGMENTS
We would like to thank all the participants in our user study that
provided useful and detailed feedback.
This material is based upon work supported by DHS under
Award No. 2009-ST-061-CI0001, by NSF under Award No.
CNS-1408632, and by Secure Business Austria. Any opinions,
findings, and conclusions or recommendations expressed in this
publication are those of the author(s) and do not necessarily reflect
the views of DHS, NSF, or Secure Business Austria.
This material is also based on research sponsored by DARPA
under agreement number FA8750-12-2-0101. The U.S. Government
is authorized to reproduce and distribute reprints for Governmental
purposes notwithstanding any copyright notation thereon. The
views and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the official
policies or endorsements, either expressed or implied, of DARPA
or the U.S. Government.
REFERENCES
[1]
comScore, “The U.S. Mobile App Report,” http://www.comscore.com/I
nsights/Presentations-and-Whitepapers/2014/The-US-Mobile-App-Rep
ort, 2014.
[2] ESET, “Trends for 2013,” http://www.eset.com/us/resources/white-pap
ers/Trends for 2013 preview.pdf.
[3] M. Niemietz and J. Schwenk, “UI Redressing Attacks on Android
Devices,” Black Hat Abu Dhabi, 2012.
[4] T. Luo, X. Jin, A. Ananthanarayanan, and W. Du, “Touchjacking Attacks
on Web in Android, iOS, and Windows Phone,” in Proceedings of the
5th International Conference on Foundations and Practice of Security
(FPS). Berlin, Heidelberg: Springer-Verlag, 2012, pp. 227–243.
[5] A. P. Felt and D. Wagner, “Phishing on mobile devices,” Web 2.0
Security and Privacy, 2011.
[6] Q. A. Chen, Z. Qian, and Z. M. Mao, “Peeking into Your App Without
Actually Seeing It: UI State Inference and Novel Android Attacks,”
in Proceedings of the 23rd USENIX Security Symposium. Berkeley,
CA, USA: USENIX Association, 2014, pp. 1037–1052.
[7] Bank of America, “SiteKey Security,” https://www.bankofamerica.co
m/privacy/online-mobile-banking-privacy/sitekey.go.
946946947
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:15 UTC from IEEE Xplore.  Restrictions apply. 
[8] Yahoo, “Yahoo Personalized Sign-In Seal,” https://protect.login.yaho
o.com.
[9] E. Fernandes, Q. A. Chen, G. Essl, J. A. Halderman, Z. M. Mao, and
A. Prakash, “TIVOs: Trusted Visual I/O Paths for Android,” University
of Michigan CSE Technical Report CSE-TR-586-14, 2014.
[10] TrendLabs,
“Tapjacking: An Untapped Threat
in Android,”
http://blog.trendmicro.com/trendlabs-security-intelligence/tapjacki
ng-an-untapped-threat-in-android/, December 2012.
[11] TrendLabs, “Bypassing Android Permissions: What You Need to
Know,” http://blog.trendmicro.com/trendlabs-security-intelligence/bypa
ssing-android-permissions-what-you-need-to-know/, November 2012.
[12] S. Jana and V. Shmatikov, “Memento: Learning Secrets from Process
Footprints,” in Proceedings of the IEEE Symposium on Security and
Privacy (SP), May 2012, pp. 143–157.
[13] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and D. Song, “Juxtapp:
A Scalable System for Detecting Code Reuse Among Android
Applications,” in Proceedings of the 9th International Conference on
Detection of Intrusions and Malware, and Vulnerability Assessment
(DIMVA). Berlin, Heidelberg: Springer-Verlag, 2012, pp. 62–81.
[14] W. Zhou, Y. Zhou, X. Jiang, and P. Ning, “Detecting Repackaged
Smartphone Applications in Third-party Android Marketplaces,” in
Proceedings of the Second ACM Conference on Data and Application
Security and Privacy (CODASPY). New York, NY, USA: ACM, 2012,
pp. 317–326.
[15] W. Zhou, X. Zhang, and X. Jiang, “AppInk: Watermarking Android
Apps for Repackaging Deterrence,” in Proceedings of the 8th ACM
SIGSAC Symposium on Information, Computer and Communications
Security (ASIA CCS). New York, NY, USA: ACM, 2013, pp. 1–12.
[16] P. De Ryck, N. Nikiforakis, L. Desmet, and W. Joosen, “TabShots: Client-
side Detection of Tabnabbing Attacks,” in Proceedings of the 8th ACM
SIGSAC Symposium on Information, Computer and Communications
Security (ASIA CCS). New York, NY, USA: ACM, 2013, pp. 447–456.
https:
Full-Screen Mode,”
[17] Google,
Immersive
“Using
//developer.android.com/training/system-ui/immersive.html.
[18] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An Empirical
Study of Cryptographic Misuse in Android Applications,” in Proceedings
of the 2013 ACM SIGSAC Conference on Computer and Communications
Security (CCS). New York, NY, USA: ACM, 2013, pp. 73–84.
[19] A. Desnos and G. Gueguen, “Android: From reversing to decompilation,”
Black Hat Abu Dhabi, 2011.
conference on Software engineering.
[20] M. Weiser, “Program slicing,” in Proceedings of the 5th international
IEEE Press, 1981, pp. 439–449.
[21] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie, “WHYPER:
Towards Automating Risk Assessment of Mobile Applications,” in
Proceedings of the 22nd USENIX Security Symposium. Berkeley, CA,
USA: USENIX Association, 2013, pp. 527–542.
[22] Y. Zhou and X. Jiang, “Dissecting Android Malware: Characterization
and Evolution,” in Proceedings of the IEEE Symposium on Security
and Privacy (SP), May 2012, pp. 95–109.
[23] R. Unuchek, “The Android Trojan Svpeng Now Capable of Mobile
Phishing,” http://securelist.com/blog/research/57301/the-android-troja
n-svpeng-now-capable-of-mobile-phishing/, November 2013.
[24] CA/Browser
Forum,
Management Of
//cabforum.org/wp-content/uploads/Guidelines v1 4 3.pdf, 2013.
“Guidelines
For
Extended Validation
The
Certiﬁcates,”
Issuance And
https:
[26]
[25] Google, “Featured, Staff Picks, Collections, and Badges,” https://develo
per.android.com/distribute/googleplay/about.html#featured-staff-picks.
J. Clark and P. van Oorschot, “SoK: SSL and HTTPS: Revisiting Past
Challenges and Evaluating Certiﬁcate Trust Model Enhancements,” in
Proceedings of the IEEE Symposium on Security and Privacy (SP),
May 2013, pp. 511–525.
[27] A. Kittur, E. H. Chi, and B. Suh, “Crowdsourcing User Studies with
Mechanical Turk,” in Proceedings of the SIGCHI Conference on Human
Factors in Computing Systems. New York, NY, USA: ACM, 2008,
pp. 453–456.
[28] F. Roesner and T. Kohno, “Securing Embedded User Interfaces: Android
and Beyond,” in Proceedings of the 22nd USENIX Security Symposium.
Berkeley, CA, USA: USENIX Association, 2013, pp. 97–112.
[29] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner,
“Android Permissions: User Attention, Comprehension, and Behavior,”
in Proceedings of the Eighth Symposium On Usable Privacy and
Security (SOUPS). New York, NY, USA: ACM, 2012, pp. 3:1–3:14.
[30] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: Practical Policy
Enforcement for Android Applications,” in Proceedings of the 21st
USENIX Security Symposium.
Berkeley, CA, USA: USENIX
Association, 2012, pp. 27–27.
[31] Z. E. Ye and S. Smith, “Trusted Paths for Browsers,” in Proceedings of
the 11th USENIX Security Symposium. Berkeley, CA, USA: USENIX
Association, 2002, pp. 263–279.
[32] A. Neupane, N. Saxena, K. Kuruvilla, M. Georgescu, and R. Kana,
“Neural Signatures of User-Centered Security: An fMRI Study of
Phishing and Malware Warnings,” in Proceedings of the 21st Annual
Network and Distributed System Security Symposium (NDSS), 2014.
[33] Y. Niu, F. Hsu, and H. Chen, “iPhish: Phishing Vulnerabilities on
the 1st Conference on
Consumer Electronics.” in Proceedings of
Usability, Psychology, and Security (UPSEC), 2008.
J. Sunshine, S. Egelman, H. Almuhimedi, N. Atri, and L. F. Cranor,
“Crying Wolf: An Empirical Study of SSL Warning Effectiveness,” in
Proceedings of the 18th USENIX Security Symposium. Berkeley, CA,
USA: USENIX Association, 2009, pp. 399–416.
J. Lee, L. Bauer, and M. L. Mazurek, “The Effectiveness of Security
Images in Internet Banking,” Internet Computing, IEEE, vol. 19, no. 1,
pp. 54–62, Jan 2015.
[34]
[35]
[36] S. Fahl, M. Harbach, T. Muders, L. Baumg¨artner, B. Freisleben, and
M. Smith, “Why Eve and Mallory Love Android: An Analysis of
Android SSL (in)Security,” in Proceedings of the 2012 ACM Conference
on Computer and Communications Security (CCS). New York, NY,
USA: ACM, 2012, pp. 50–61.
[37] S. Schechter, R. Dhamija, A. Ozment, and I. Fischer, “The Emperor’s
New Security Indicators,” in Proceedings of the IEEE Symposium on
Security and Privacy (SP), May 2007, pp. 51–65.
[38] D. Akhawe and A. P. Felt, “Alice in Warningland: A Large-scale Field
Study of Browser Security Warning Effectiveness,” in Proceedings of
the 22nd USENIX Security Symposium. Berkeley, CA, USA: USENIX
Association, 2013, pp. 257–272.
[39] N. Chou, R. Ledesma, Y. Teraguchi, D. Boneh, and J. C. Mitchell,
“Client-side defense against web-based identity theft,” in Proceedings
of the 11th Annual Network and Distributed System Security Symposium
(NDSS), 2004.
[40] R. Dhamija and J. D. Tygar, “The Battle Against Phishing: Dynamic
Security Skins,” in Proceedings of the Symposium On Usable Privacy
and Security (SOUPS). New York, NY, USA: ACM, 2005, pp. 77–88.
[41] E. Kirda and C. Kruegel, “Protecting users against phishing attacks with
AntiPhish,” in Proceedings of the Computer Software and Applications
Conference (COMPSAC), vol. 1, July 2005, pp. 517–524 Vol. 2.
[42] Google, “Safe Browsing,” http://www.google.com/transparencyrepor
t/safebrowsing/.
[43] D. Clercq and Grillenmeie, Microsoft Windows Security Fundamentals.
(Chapter 5.2.1), Connecticut, USA: Digital Press, October 2006.
J.
http://ﬁles.qubes-os.org/ﬁles/doc/arch-spec-0.3.pdf, January 2010.
“Qubes OS Architecture
Rutkowska,
(Section
5.3),”
[44]
947947948
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:15 UTC from IEEE Xplore.  Restrictions apply.