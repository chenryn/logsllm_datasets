server when the user is typing.
To verify the defense effectiveness of IM-Visor, we repeat
the above operations in the development board with IM-Visor
for several times. Figure 7 shows the defense effectiveness of
IM-Visor against malicious IME apps. It is clearly shown that
IM-Visor can prevent malicious third party IME apps from
stealing sensitive data.
2) Defense against PHAs: Most commercial-off-the-shelf
(COTS) IME apps actually collect the user input to improve
user experience by analyzing the user input habits or to
do targeted advertising. To verify this, we use Wireshark to
intercept the network packets when users enter data using
IME apps. After experiments on commonly used IME apps,
we indeed ﬁnd that a continuous sequence of packets will be
captured by Wireshark when user is typing. For further veri-
ﬁcation, we need to analyze the content of captured packets.
Although some IME apps such as Baidu IME and iFly IME use
encryption to prevent the content analysis, there are still other
IME apps which upload users’ input in plain-text with HTTP
protocol. After experiments, IME apps include Sogou (v8.0),
QQ (v5.4.0), Octopus (v4.2.6) and TouchPal (for pad, v5.4.5)
have dawn our attention. Taking the Sougou IME app as an
example, after typing the word “password” in the SMS, we
use Wireshark to intercept the network packets of Sogou IME
app. Figure 8 shows the intercepted packets. This indicates
that sensitive keystrokes have been leaked out by the IME
app. With IM-Visor, these potentially harmful IME apps can
no longer access the user input when the input is sensitive,
as we don’t see Wireshark capturing any packets containing
sensitive keystrokes.
B. Correctness Evaluation
IM-Visor is a pre-IME design, it intervenes in the com-
munication between user apps and IME apps. As an IME app
cannot trigger input by itself, it must be employed by a user
app which has edit boxes. So in this section, we need test
if user apps and IME apps can normally run with IM-Visor
deployed.
152
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
(a) Email log-in using the repackaged Sogou
IME
(b) WeChat log-in using the repackaged QQ
IME
(c) AliPay log-in using the repackaged TouchPal
IME
Fig. 7: The defense of IM-Visor on repackaged IME apps. The repackaged IME apps are capable of uploading user names
and passwords to the remote server without IM-Visor. However, with the IM-Visor protection, they cannot leak out sensitive
information.
First, we need test if user apps and IME apps can run
without crashing. To implement this, we ﬁrst download and
install
the top 10 IME apps from Android Market. Then
we use the Android automated testing tool MonkeyRunner
to download 100 user apps from the Android Market. As
the touch events triggered by MonkeyRunner are random, we
restrict the screen area where touch events can happen based
on the location analysis of edit boxes in many user apps. In
this way, MonkeyRunner can trigger more keystrokes. For each
IME app, we use MonkeyRunner to install and run these 100
user apps. After experiments, we ﬁnd only 3 user apps crashed
and none of the 10 IME apps crashed. For the 3 crashed user
apps, we manually run them in the development board without
IM-Visor, however, they still crashed. So we think these 3
user apps crashed because of their bad compatibilities with
our development board.
Besides the crash problem, we also need to test if IM-
Visor can guarantee that a user app will run without any
input data missing or input data disorder (the input data are
from IM-Visor and IME apps). For each user app, we design
several different use cases, and for each use case, we use some
commonly used IME apps including Sogou, QQ, TouchPal,
Baidu and iFly to test. We have tested 10 typical user apps
including the Email Client and SMS. For the Email Client we
design two use cases including normal log-in and resumed log-
in (i.e., the user is typing and then he picks up a phone call
and resumes to log in after hanging up). For the SMS, we also
design two use cases including normal text-edit and resumed
text-edit. After experiments for 20 times, we manually verify
and ﬁnd that a user app can work normally without any data
missing or data disorder.
C. Usability Evaluation
In this evaluation, we need test how much time it costs
that a user app to get user input data. This refers to the
duration from the time when the ﬁrst keystroke in the test string
happens, to the time when the full string is committed to the
user app. The IME apps used for test are Sogou IME, Baidu
IME, iFly IME, QQ IME and TouchPal IME. The sensitive
data set used for test contains phones numbers, ID numbers,
bank card numbers, and email addresses. We select a phone
number (11 characters) and an email address (19 characters)
for sensitive data test.
Excluding irregular touches (e.g., fumbling phones) and
multi-touch behaviour (e.g., zooming gestures), our test is fo-
cused on the most common case that a user types characters on
a qwerty soft keyboard with his or her single-touch behaviour.
The user app used for test is SMS. When a user types text
in SMS, the translation results of keystrokes will be analyzed
by IM-Visor to decide whether the keystrokes are sensitive.
The conclusions can be classiﬁed into two types: Sensitive
keystrokes and non-sensitive keystrokes.
Sensitive Keystrokes. We choose a phone number of 11
characters and an email address of 19 characters which are
in the sensitive data set. Then for each IME app, we type
the phone number and email address 50 times separately and
calculate the average elapsed times, respectively. The results
are shown in the left half of Table I.
Based on the results for sensitive keystrokes in Table I,
we ﬁnd that the elapsed time taken for the user app to get
user input data in IM-Visor is 1.84% longer than the time
without IM-Visor deployed. This is mainly due to the overhead
of world switches between secure world and normal world.
The secure kernel we port is a Linux-like kernel, it takes about
110ms to switch from user mode in secure world (the context
of pre-IME Guard) to user mode in normal world (the context
of java hooks ).
One additional
issue is about user experience. For the
whole sensitive phone number, although IM-Visor brings only
1.84% reception latency, the display latency may be user-
perceptible. Recalling policies in Section V-B3, IM-Visor
153
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Elapsed time for the user app to get the data. We compare the time without/with IM-Visor.
IME apps
Sogou
Baidu
iFly
QQ
TouchPal
Phone Number
Email Address
Phrases of 15 Characters
Phrases of 25 Characters
Without IM-Visor With IM-Visor Without IM-Visor With IM-Visor Without IM-Visor With IM-Visor Without IM-Visor With IM-Visor
Sensitive Keystrokes
Non-Sensitive Keystrokes
(ms)
6143
6090
6302
6085
6098
(ms)
6256
6192
6408
6184
6112
(ms)
11028
10960
11332
10971
10948
(ms)
11132
11063
11433
11079
11061
(ms)
8565
8543
8890
8507
8513
(ms)
9315
9316
9632
9275
9269
(ms)
14658
14632
15130
14601
14613
(ms)
15972
15933
16456
15899
15925
enforces two different policy (i.e., context-based policy and
preﬁx-matching policy) to analyze user input. With the context-
based policy, IM-Visor will
treat every single number as
sensitive and commit it to a user app one by one, so the display
latency is non-perceptible. With the preﬁx-matching policy,
the display latency is user-perceptible for sensitive keystrokes.
For a sensitive numeric string like phone number, the preﬁx-
matching of IM-Visor cannot determine the sensitiveness of
input until the last number has been typed. Hence, from the
view of a user, no character is displayed until the last number
of whole sensitive data has been typed. To strike a balance be-
tween user privacy and experience, those long sensitive string
in user-deﬁned sensitive data set will be maintained in the form
of shorter pieces to alleviate the uncomfortable display latency.
For example, a sensitive phone number “1320469299” will be
automatically maintained in the form of two shorter pieces like
“13204” and “69299”.
Non-sensitive Keystrokes. We select some phrases from
the commonly used sentences set [3]. In order to facilitate the
average time calculation, we select 50 different phrases of 15
characters and calculate the average time to input these 50
phrases. Then we select 50 different phrases of 25 characters
and calculate the average time. The sensitive data set is the
same as the above test, that is, a phone number of 11 characters
and an email address of 19 characters. The results are shown
in the right half of Table I.
Based on the results for non-sensitive keystrokes in Table I,
we ﬁnd that the elapsed time taken for the user app to get user
input data in IM-Visor is 9.5% longer than the time without
IM-Visor deployed. This is also mainly due to the overhead of
world switches between secure world and normal world. The
world switch for sensitive string only need once, but for non-
sensitive string, this switch may happen many times, so the
time taken by IM-Visor for non-sensitive keystrokes is usually
longer than that for sensitive keystrokes.
For non-sensitive keystrokes, whether the display latency
is user-perceptible depends on how the preﬁx of non-sensitive
typed string matches the preﬁx of user-deﬁned sensitive data
set (i.e., phone numbers in our case). If there is no long com-
mon preﬁx between non-sensitive string and items of sensitive
data set, the display latency is non-perceptible. Otherwise, it
is perceptible.
Non-keystroke Touch Events. The above evaluation is
about keystrokes, but there are also non-keystroke touch events
which will be intercepted by IM-Visor. With the display
information in secure world, we optimized the secure kernel
to prevent trapping in user mode in secure world when a non-
keystroke touch event happened. The optimized world switch
here is only 27ms and it will not affect the Android touch
Fig. 9: CaffeineMark results for original Android and Android
with IM-Visor
event system to distinguish user gesture.
D. Performance Evaluation
In order to test the performance impact of IM-Visor on
Android system, we use the CaffeineMark benchmark and
compare it to original Android. CaffeineMark is a popular
Android benchmarking tool that runs a series of tests and gives
an assessment score [2]. We run the benchmark 15 times, each
time with a reboot to eliminate impact caused by different
system workload, then calculate the average score. The results
are in Figure 9. Overall, IM-Visor performs only 1.53% worse
than stock Android. This is mainly due to the reason that the
IME is an event-driven service which makes IM-Visor keep
idle in most time.
VII. DISCUSSION AND LIMITATION
Although IM-Visor has made the ﬁrst “pre-IME” attempt to
prevent sensitive keystroke leakage against third party IMEs,
some limitations still exist in its design and implementation.
SystemServer Attacks Recently, some vulnerabilities have
been discovered to attack System Server [17], [18], [28], [29].
But none of them can achieve a control ﬂow hijacking, so
malicious code cannot modify hooks in System Server to stop
IM-Visor from intercepting touch events.
GUI Attacks A malicious app may mimic the user app’s UI
to mount phishing or click-jacking. However, at present, there
are quite a few prior systems which can detect such attacks
[7], [10], [19].
Side Channel Attacks Malicious apps may use gravity
sensor and acceleration sensor to launch a side channel attack.
IM-Visor provides the STIE for user typing, in which we can
154
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
also reconﬁgure those related sensors as secure peripherals to
thwart such threat [8], [27].
VIII. RELATED WORK
Defense against the Android third-party IME apps belongs
to a relatively new problem, I-Box [12] tries to establish a
sandbox mechanism for third-party IME apps, by analyzing
the user keystrokes to determine whether to rollback the IME
app. As a post-IME design, I-Box is vulnerable to the preﬁx-
substitution attack and colluding attack. In contrast, IM-Visor
is a defense with the pre-IME nature and it can defend against
the above attacks. Also the solution does not notice the “Buffer
revisiting threat”, so it can be cracked by sandbox bypassing
attack. With hooks in revisiting APIs, IM-Visor can block the
data leakage path from a user app to an IME app.