我们发现这其实就是一种攻击方法。但是我们有没有想过上述攻击成立的条件是B拿到了连续两次记账的权利。我们可以大致算一下：
    假设诈骗者掌握了全网1%的计算能力，那么他争取到记账权的概率就是1%，两次就是10的负4次方。那还是存在一定概率进行攻击的。
既然连续两次的概率比较大，那么我们就将次数增加。也就是等6个入链并被确认后再把交易对应的商品交付。
这样概率也就几乎为零了（在百分之1的算力情况下）。
下面我们就算个数，倘若我掌握了全网的51%的算力，那么我成功记录六个区块的概率是多少呢？
即0.018，也就是说，几乎100笔交易中我就有可能进行一次攻击。那这样的危害也就很大了。
#### 3 自私挖矿
在Pow机制中，除了上述通过“算力”这种大吃小的安全隐患外，还有一种通过小技巧进行的安全危害——“自私挖矿”。
诚实挖矿的策略如下：其挖到区块链后就对其进行全网广播。而在自私挖矿的策略中，矿工维护两个区块链，其中一个链是公开的一个是私密的。一开始私密区块链等于公开区块链。在矿工挖到区块之后，它并不将新挖的区块加入公开链中，而是添加到本地的私密区块链中，并不广播给其他人。而我们可以想象到，加入我已经知道上一个区块的值，我就可以先人一步进入下一个区块的计算中。（如同我们考试的时候提前将第一天做出来，就可以快人一步做第二道题）。即使当前区块被被人提前发了出来，我们也可以将自己挖出的区块公布到全网中。
而诚实矿工可能会在不知情的情况下选择 “支持”
攻击者所在分叉：即在攻击者发布的区块后面继续挖矿。这是如何出现的呢？当攻击者的长链分叉信息率先传递到某个诚实矿工那里，这个诚实矿工会根据比特币的共识机制，认可该分叉内区块的合法性，并且选择在该长链尾部继续挖矿。这令攻击者处在更为有利的位置上。事实上，出现这种情况，恰恰是由于比特币网络信息传播存在时延所致。对于网络上的其他节点来说，这两个区块的高度是相同的，所以被其他节点承认的概率还有1/2，这样自私矿工就有了相对于其他人的优势。
然而自私挖矿策略仅对使用Pow共识有效果，对Pos等不适用。
### 四、Pos、DPos共识算法
Pos算法：由于区块链的分布式结构，所以区块链的共识过程也就是我们所说的选择一个leader的过程，并且有这个领导人来进行新的区块的发布工作，但是在设计共识的过程中我们也要避免单个用户或者财团对账本的长期控制。而根据我们上述的Pow机制，我们发现这种共识机制会浪费巨大的电力资源，并且存在了许多安全隐患，例如自私挖矿与双花攻击。
正式由于Pow中存在的不足情况，Pos孕育而生。Pow中文名为股权证明机制，它希望使用股权来代替或者部分代替计算资源来完成这个领
导人选举的过程。在股权证明机制的过程中，共识算法根据参与共识过程每个人所持有股权比例来选择下一个出块的人。
这一种思想也是参考了我们生活中的经济社会。即一个人拥有的股份数量越多，其获得的股份以及红利越多。这也使得区块链在币圈中更加贴近金融，有着通胀的情况产生。我们来看实际的协议是如何运行的。
例如
Peercoin，其协议在运行的过程中采用币龄作为一个参考变量来影响下一个区块的挖矿难度。在共识过程中，节点需要提交一份交易记录来证明对区块链资产的拥有权，并且拥有的区块链资产越多，持有时间越长，挖矿就会越容易。算法希望用户对自己所拥有的资产进行证明，而这些资产可以影响矿工的挖矿难度。拥有的资产越多，就越有机会计算出符合条件的
nonce。因此其计算公式为：`success = `
而当proofHash  = coins * age * D):
    5：          nonce++
    6：Broadcast(  )//广播计算的值
    7：end
虽然Pos算法比起Pow有其独特的优点用以避免计算资源的竞争，但是它仍会存在某些问题。比如用户长时间拥有了全网的大量资产，那么根据计算公式，他的计算难度就比其他节点小很多，这样就会造成严重的“贫富不均”情况。不进如此，Pos仍需要进行哈希计算，所以仍然存在浪费计算资源的情况。
所以我们设计了第三种公式机制——DPos。
DPOS 是去中心化交易所 Bitshares 提出并使用的  
共识算法。在Bitshares中存在三种类型的用户：见证人(witnesses)，代表(delegates)和工人(work-ers)。见证人如同矿工，通过处理交易和维护区块链来获得报酬。而代表可以发起更新请求，但是他们并没有报酬。工人可以提出自己下一步的项目想法，如果此项目获得了大部分人的投票支持，那么他们会从中获得收益。
DPos在共识期间分为“见证人选举”和“见证人出块”两个过程。见证人对各个交易进行验证签名与时间。在网络中每个账户都可以为下一个见证人投票，而票数要根据区块链的资产情况来分配。
`见证人选举过程如下：`
只有拥有被选举权的永久节点才能够被选举，最终只有前N名见证人可以被选举出来。这N个人都要获得50%以上的票数才能够顺利当选，除此之外，这个名单会按照固定的时间间隔进行重新选举。
`见证人出块过程如下：`
见证人每生产一个块，都会获得报酬，他们的薪酬水平由其获得的投票决定。如果见证人没有生产区块，他们便没有收入，并且还有可能被 投票失去见证人的身份。
见证人生产区块时，每 2 s 生产一个区块，如果见 证人没有在规定的时间生产块，那么这个见证人将会
每2s需要产生一个区块，如果超过了规定的时间，那么当前见证人就会失去生产权利而转交给下一个人。
网络中所有的用户均有责任监控区块链生成的过程，并且同意需要选择分叉最长的那个链进行追加。
### 五、确定性共识算法攻击
#### 1 确定性算法重放攻击
传统计算机术语中，重放攻击(Replay
Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的数据包，来达到欺骗系统的目的。重放攻击在任何网络通过程中都可能发生，是计算机世界黑客常用的攻击方式之一。
在区块链技术中，重放攻击是指“一条链上的交易在另一条链上也往往是合法的”。简单来说，就是攻击者“重放”他们在网络上窃听到的消息。
由于硬分叉的两条链，它们的地址和私钥生产的算法相同，交易格式也完全相同，因此导致在其中一条链上的交易在另一条链上很可能是完全合法的。所以你在其中一条链上发起的交易，就可以到另一条链上去重新广播，可能也会得到确认。这就是“重放攻击”。而这种攻击一旦发生，就会产生类似于双花攻击那样的效果：同一笔钱转给了同一个人两次，就会导致在不需要付款人参与的情况下多一次支付。
那我们如何防止重放攻击呢？
下面我们讲解两种方法去防止：
  * 1 对于[UTXO](https://baijiahao.baidu.com/s?id=1604754095345872627&wfr=spider&for=pc)模型，我们需要对收到的交易检查其Hash是否存在。
  * 2 对于Balance模型，我们需要防止随机数NONCE用以防止重放攻击。
而在传统的密码学协议中，我们首先可以添加时间戳来防止重放攻击：
    DateTime current = DateTime.Now;     // 每次访问的时间
    if (current >= _dt.Add(RefreshTime)) // 如果访问的时间大于一个特定的时间戳，则需要更新保存的时间
    {
        _dt = current;
        // 生成新的nonce值
        // ...
    }
在client每次访问的时候，需要查看这个时间是否过期了，如果过期了，需要重新记录下当前的访问的时间。
除此之外，我们可以使用挑战相应机制，每次发送挑战并使用公钥密码去验证对方身份，以杜绝中间人的破坏行为。
#### 2 权利压迫攻击
这种攻击方法简单来说，就是攻击者在获得记账权的时候利用手中的部分权利实施一些操作让系统的随机数产生偏移用以增加自己下一次获得记账权力的可能性。
**方式一：** 验证者通过一些参数的组合找到一些特殊参数用以增加自己被选择的可能性。
**方式二：** 利用对当前区块的控制力来影响下一个区块。
例如：假设N+1个区块的随机性依赖于区块N的签名，那么如果攻击者在当前区块中始终指向自己，那么他将永远获得记账权。
在解决这类问题时，我们可以采取如下手段：让验证者抵押自己的资产以避免作恶，并且避免使用那些容易被操控的信息来产生随机数。
### 六、参考资料
  * 1 
  * 2 
  * 3 [https://baijiahao.baidu.com/s?id=1593998280365704878&wfr=spider&for=pc§](https://baijiahao.baidu.com/s?id=1593998280365704878&wfr=spider&for=pc§)
  * 4 
**本稿为原创稿件，转载请标明出处。谢谢。**