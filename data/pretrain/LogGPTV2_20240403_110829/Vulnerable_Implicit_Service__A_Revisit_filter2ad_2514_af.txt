agation problem and solves it with the COAL solver [25]. It can
extract the Intent values used by inter-component communication
(ICC) APIs. Unfortunately, our experiments show that IC3 fails to
generate results for about 38% applications we analyze.
Statistic Analysis of Android Apps. One reason for the ex-
plosive growth of Android application is the loose auditing mech-
anism adopted by Google Play Market. (cid:140)erefore, whether the
developers works in a secure and rigorous approach will have a
signi(cid:128)cant impact on the overall security of Android ecosystem.
Statistic Analysis has been adopted on several works to discover
the behaviors of the developers. Felt et al. [14] built an automated
testing tool named Stowawy and apply it to a set of 940 applica-
tions to detects whether Android developers follow least privilege
on the permission requests and found that one-third applications
are overprivileged. Enck et al. [13] conduct a static analysis on
1,100 popular free applications to discover the common security
problems in the applications, and (cid:128)nd that many developers failed
to securely use Android APIs. Egele et al. [12] study whether the
developers use the cryptographic APIs in a secure fashion on 11,748
applications and (cid:128)nd that 88% of them make at least one mistake.
Viennot et al. [39] perform a large measurement study on 1,100,000
applications crawled from the Google Play application store to un-
cover the characterization of the application content such as its
evolution over time, library usage etc. Lindorfer et al.[30] analyze
1,000,000 applications to discover the trends in malware behaviors
observed from applications. Afonso et al. [3] perform an analysis
of the native code usage in 1.2 million Android applications and
propose an automatic sandboxing policy for protecting native code.
McDonnell et al. [32] conduct a study to (cid:128)nd the catching up rate
of developers when APIs evolve and (cid:128)nd that about 28% of API
references are outdated with a median lagging time of 16 months.
In this paper, we conduct a study with a di(cid:130)erent goal, which is to
(cid:128)nd out the adoption trend of the one-size-(cid:128)ts-all implicit service
forbidden solution among the application developers and (cid:128)nd that
even the implicit service invocations had been forbidden for more
than two years, there are 64 applications still vulnerable to service
hijacking or DoS a(cid:138)acks.
8 CONCLUSIONS
Because of service hijacking a(cid:138)acks, the implicit service invocations
have been forbidden since Android 5.0. In this paper, we revisit
the service invocations and evaluate the impacts and e(cid:130)ectiveness
of disabling implicit invocations by simply throwing an exception.
Our experiments show that a(cid:137)er implicit service invocations had
been banned for 30 months, 36 popular applications still contain
codes vulnerable to service hijacking a(cid:138)acks. Moreover, we (cid:128)nd
that this one-size-(cid:128)ts-all solution not only still su(cid:130)ers from service
hijacking a(cid:138)acks, but also introduces a new Denial of Service a(cid:138)ack
on Android apps, and 28 applications are involved. Finally, we
propose a new ranking algorithm on selecting services invoked
through implicit intents to mitigate the remaining service hijacking
a(cid:138)acks.
ACKNOWLEDGMENTS
We greatly appreciate the insightful comments and constructive
feedback from the anonymous reviewers. We would like to thank
Xianchen Meng for his work at the early stage of this project. (cid:140)is
work is partially supported by U.S. O(cid:129)ce of Naval Research un-
der Grant N00014-16-1-3214 and N00014-16-1-3216, the National
Key Research and Development Program of China under Grant
2016YFB0800102, the Natural Science Foundation of China under
Grants 61572278 and 61472165, Guangzhou Key Laboratory of Data
Security and Privacy Preserving, and Guangdong Provincial Key
Laboratory of Data Security and Privacy Preserving. (cid:140)e corre-
sponding authors are Yuewu Wang and Qi Li.
REFERENCES
[1] 2014. PlayDrone Android Apps. h(cid:138)ps://archive.org/details/android apps. (2014).
[2] 2017.
reverse engineering Android apk (cid:128)les.
Apktool:A tool
for
h(cid:138)ps://ibotpeaches.github.io/Apktool/. (2017).
[3] Vitor Afonso, Antonio Bianchi, Yanick Fratantonio, Adam Doup´e, Mario Polino,
Paulo de Geus, Christopher Kruegel, and Giovanni Vigna. 2016. Going Native:
Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code
Sandboxing Policy. In Proceedings of the Annual Symposium on Network and
Distributed System Security (NDSS).
[4] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014.
Flowdroid: Precise context, (cid:131)ow, (cid:128)eld, object-sensitive and lifecycle-aware taint
analysis for android apps. ACM SIGPLAN Notices 49, 6 (2014), 259–269.
[5] Vitalii Avdiienko, Konstantin Kuznetsov, Alessandra Gorla, Andreas Zeller,
Steven Arzt, Siegfried Rasthofer, and Eric Bodden. 2015. Mining apps for abnor-
mal usage of sensitive data. In Proceedings of the 37th International Conference on
So(cid:135)ware Engineering-Volume 1. IEEE Press, 426–436.
[6] Paulo Barros, Ren´e Just, Suzanne Millstein, Paul Vines, Werner Dietl, Michael D
Ernst, et al. 2015. Static Analysis of Implicit Control Flow: Resolving Java
Re(cid:131)ection and Android Intents (T). In Automated So(cid:135)ware Engineering (ASE),
2015 30th IEEE/ACM International Conference on. IEEE, 669–679.
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1062[11]
[7] Sven Bugiel, Stephen Heuser, and Ahmad-Reza Sadeghi. 2013. Flexible and (cid:128)ne-
grained mandatory access control on Android for diverse security and privacy
policies. In Presented as part of the 22nd USENIX Security Symposium (USENIX
Security 13). 131–146.
[8] Stefano Calzavara, Ilya Grishchenko, and Ma(cid:138)eo Ma(cid:130)ei. 2016. Horndroid: Prac-
tical and sound static analysis of android applications by smt solving. In Security
and Privacy (EuroS&P), 2016 IEEE European Symposium on. IEEE, 47–62.
[9] Qi Alfred Chen, Zhiyun Qian, and Zhuoqing Morley Mao. 2014. Peeking into
Your App without Actually Seeing It: UI State Inference and Novel Android
A(cid:138)acks.. In USENIX Security, Vol. 14. 1037–1052.
[10] Erika Chin, Adrienne Porter Felt, Kate Greenwood, and David Wagner. 2011.
Analyzing inter-application communication in Android. In Proceedings of the
9th international conference on Mobile systems, applications, and services. ACM,
239–252.
Je(cid:130)rey Dean, David Grove, and Craig Chambers. 1995. Optimization of object-
oriented programs using static class hierarchy analysis. In European Conference
on Object-Oriented Programming. Springer, 77–101.
[12] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel.
2013. An empirical study of cryptographic misuse in android applications. In
Proceedings of the 2013 ACM SIGSAC conference on Computer & communications
security. ACM, 73–84.
[13] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011.
A Study of Android Application Security.. In USENIX security symposium, Vol. 2.
2.
[14] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner.
2011. Android permissions demysti(cid:128)ed. In Proceedings of the 18th ACM conference
on Computer and communications security. ACM, 627–638.
[15] Yanick Fratantonio, Antonio Bianchi, William Robertson, Engin Kirda, Christo-
pher Kruegel, and Giovanni Vigna. 2016. Triggerscope: Towards detecting logic
bombs in android applications. In Security and Privacy (SP), 2016 IEEE Symposium
on. IEEE, 377–396.
[16] Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2013. Highly
precise taint analysis for Android applications. EC SPRIDE, TU Darmstadt, Tech.
Rep (2013).
Fundamentals.
h(cid:138)ps://developer.android.com/guide/components/fundamentals.html. (2017).
[18] Google. 2017. GooglePlay. h(cid:138)ps://play.google.com/store/apps?hl=en. (2017).
[19] Google.
[17] Google.
Application
Android
Intents
2017.
2017.
and
Intent
Filters.
h(cid:138)ps://developer.android.com/guide/components/intents-(cid:128)lters.html. (2017).
[20] Google. 2017. Service Component. h(cid:138)ps://developer.android.com/guide/topics/manifest
/service-element.html. (2017).
[24]
[21] Google. 2017. Shared-Preferences:Saving Key-Value Sets. (2017).
[22] Google. 2017. Uses SDK Element in Android Application Manifest File.
h(cid:138)ps://developer.android.com/guide/topics/manifest/uses-sdk-element.html.
(2017).
[23] Michael I Gordon, Deokhwan Kim, Je(cid:130) H Perkins, Limei Gilham, Nguyen Nguyen,
and Martin C Rinard. 2015. Information Flow Analysis of Android Applications
in DroidSafe.. In NDSS. Citeseer.
Johannes Ho(cid:130)mann, Martin Ussath, (cid:140)orsten Holz, and Michael Spreitzenbarth.
2013. Slicing droids: program slicing for smali code. In Proceedings of the 28th
Annual ACM Symposium on Applied Computing. ACM, 1844–1851.
[25] PSU SIIS Lab. 2014. coal solver. h(cid:138)p://siis.cse.psu.edu/coal/. (2014).
[26] Ondˇrej Lhot´ak and Laurie Hendren. 2003. Scaling Java points-to analysis using
Spark. In International Conference on Compiler Construction. Springer, 153–169.
[27] Ding Li, Yingjun Lyu, Mian Wan, and William GJ Halfond. 2015. String analysis
for Java and Android applications. In Proceedings of the 2015 10th Joint Meeting
on Foundations of So(cid:135)ware Engineering. ACM, 661–672.
[28] Li Li, Alexandre Bartel, Tegawend´e F Bissyand´e, Jacques Klein, Yves Le Traon,
Steven Arzt, Siegfried Rasthofer, Eric Bodden, Damien Octeau, and Patrick
McDaniel. 2015. Iccta: Detecting inter-component privacy leaks in android apps.
In Proceedings of the 37th International Conference on So(cid:135)ware Engineering-Volume
1. IEEE Press, 280–291.
[29] Li Li, Tegawend´e F Bissyand´e, Damien Octeau, and Jacques Klein. 2016. Droidra:
Taming re(cid:131)ection to support whole-program analysis of android apps. In Pro-
ceedings of the 25th International Symposium on So(cid:135)ware Testing and Analysis.
ACM, 318–329.
[30] Martina Lindorfer, Ma(cid:138)hias Neugschwandtner, Lukas Weichselbaum, Yanick
Fratantonio, Victor Van Der Veen, and Christian Platzer. 2014. Andrubis–
1,000,000 apps later: A view on current Android malware behaviors. In 2014 (cid:138)ird
International Workshop on Building Analysis Datasets and Gathering Experience
Returns for Security (BADGERS). IEEE, 3–17.
[31] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. Chex:
statically ve(cid:138)ing android apps for component hijacking vulnerabilities. In Pro-
ceedings of the 2012 ACM conference on Computer and communications security.
ACM, 229–240.
[32] Tyler McDonnell, Baishakhi Ray, and Miryung Kim. 2013. An empirical study
of api stability and adoption in the android ecosystem. In So(cid:135)ware Maintenance
(ICSM), 2013 29th IEEE International Conference on. IEEE, 70–79.
[33] Damien Octeau, Daniel Luchaup, Ma(cid:138)hew Dering, Somesh Jha, and Patrick
McDaniel. 2015. Composite constant propagation: Application to android inter-
component communication analysis. In Proceedings of the 37th International
Conference on So(cid:135)ware Engineering-Volume 1. IEEE Press, 77–88.
[34] Damien Octeau, Patrick McDaniel, Somesh Jha, Alexandre Bartel, Eric Bodden,
Jacques Klein, and Yves Le Traon. 2013. E(cid:130)ective inter-component communica-
tion mapping in android: An essential step towards holistic security analysis. In
Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13).
543–558.
[35] Sebastian Poeplau, Yanick Fratantonio, Antonio Bianchi, Christopher Kruegel,
and Giovanni Vigna. 2014. Execute (cid:140)is! Analyzing Unsafe and Malicious
Dynamic Code Loading in Android Applications.. In NDSS, Vol. 14. 23–26.
[36] Siegfried Rasthofer, Steven Arzt, Marc Miltenberger, and Eric Bodden. 2016.
Harvesting runtime values in android applications that feature anti-analysis
techniques. In Proceedings of the Annual Symposium on Network and Distributed
System Security (NDSS).
[37] (cid:140)omas Reps, Susan Horwitz, and Mooly Sagiv. 1995. Precise interprocedural
data(cid:131)ow analysis via graph reachability. In Proceedings of the 22nd ACM SIGPLAN-
SIGACT symposium on Principles of programming languages. ACM, 49–61.
[38] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android:
Bringing Flexible MAC to Android.. In NDSS, Vol. 310. 20–38.
[39] Nicolas Viennot, Edward Garcia, and Jason Nieh. 2014. A measurement study of
google play. In ACM SIGMETRICS Performance Evaluation Review, Vol. 42. ACM,
221–233.
[40] Ruowen Wang, William Enck, Douglas Reeves, Xinwen Zhang, Peng Ning,
Dingbang Xu, Wu Zhou, and Ahmed M Azab. 2015. EASEAndroid: automatic
policy analysis and re(cid:128)nement for security enhanced android via large-scale
semi-supervised learning. In 24th USENIX Security Symposium (USENIX Security
15). 351–366.
[41] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. 2014. Amandroid: A precise
and general inter-component data (cid:131)ow analysis framework for security ve(cid:138)ing
of android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer
and Communications Security. ACM, 1329–1341.
[42] Michelle Y Wong and David Lie. 2016. Intellidroid: A targeted input generator for
the dynamic analysis of android malware. In Proceedings of the Annual Symposium
on Network and Distributed System Security (NDSS).
[43] Meng Xu, Chengyu Song, Yang Ji, Ming-Wei Shih, Kangjie Lu, Cong Zheng, Ruian
Duan, Yeongjin Jang, Byoungyoung Lee, Chenxiong Qian, et al. 2016. Toward
Engineering a Secure Android Ecosystem: A Survey of Existing Techniques.
ACM Computing Surveys (CSUR) 49, 2 (2016), 38.
[44] Mu Zhang and Heng Yin. 2014. AppSealer: Automatic Generation of
Vulnerability-Speci(cid:128)c Patches for Preventing Component Hijacking A(cid:138)acks
in Android Applications.. In NDSS.
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1063