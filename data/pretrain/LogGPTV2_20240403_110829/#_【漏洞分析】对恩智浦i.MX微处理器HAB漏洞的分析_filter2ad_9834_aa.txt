# 【漏洞分析】对恩智浦i.MX微处理器HAB漏洞的分析
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
作者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、前言**
恩智浦（NXP）半导体公司生产的[i.MX](http://www.nxp.com/products/microcontrollers-and-processors/arm-processors/i.mx-applications-processors:IMX_HOME)系列应用处理器的安全启动特性中存在两个漏洞，这两个漏洞由Quarkslab的两名研究人员Guillaume
Delugré和Kévin Szkudłapski发现，本文对这两个漏洞的技术细节做了具体分析。
攻击者可以利用这两个漏洞破坏安全启动过程，从而绕过代码签名认证，实现在启用了HAB（High Assurance
Boot）特性的i.MX应用处理器上加载并运行任意代码。有12款i.MX系列处理器受这些漏洞影响。
研究人员于2016年9月发现这些漏洞并将漏洞报告给厂商，在2017年5月19日的举办[高通移动安全峰会](https://qct-qualcomm.secure.force.com/QCTConference/GenericSitePage?eventname=2017Security&page=Summit%20Information)上，Quarkslab与NXP联合[公布](http://www.nxp.com/support/support/documentation:DOCUMENTATION)了本文介绍的技术细节。2017年3月，我们向4个国家的计算机应急小组（CERTs）通报了相关漏洞信息。
NXP公布了一份工程简报以及两份勘误文件（分别为EB00854、ERR010872以及ERR0108873），对这两个漏洞做了简要的介绍，同时也介绍了受影响的处理器型号清单、相应的解决方案以及可能的缓解措施。
在下文中，我们会向大家介绍i.MX处理器的相关特性以及影响这些特性的具体漏洞细节。
**二、背景介绍**
****
NXP半导体公司生产的i.MX系列处理器是基于ARM的应用处理器，广泛应用于汽车、工业以及电子消费市场中的SoC（System on a
Chip）系统。微控制器最早由飞思卡尔（Freescale）半导体公司研发，该公司在2015年被NXP收购，给NXP带来各种面向安全的特性，包括安全及加密启动特性、篡改检测特性、为各种加密算法设计的硬件加速特性、片上及片外安全存储特性、实时安全时钟特性以及基于硬件的随机数生成器特性。
在产品中使用i.MX处理器的厂商需要自己启动这些特性，某些情况下，处理器被设置为锁定状态，此时这些安全特性无法被禁用。
如果读者感兴趣的话，可以使用几种开发板来体验i.MX处理器的安全特性。我们使用基于i.MX6的SabreLite开发板发现了这些漏洞，开发板如下所示：
**2.1 何为安全启动**
当处于关机状态的系统被启动后，设备会通过安全启动（secure
boot）过程将系统引导到一个已知的健康状态。安全启动过程通常会涉及许多原生代码的执行过程，这些原生代码被封装到多个二进制文件中，设备会加载这些二进制文件，验证文件的可靠性，保证文件未被篡改，然后按顺序运行这些文件，最终将系统引导至厂商或者用户预期的状态。通常情况下，设备会使用具有合法数字签名的二进制程序来完成这一任务，在执行过程中，设备会检查下一个运行的二进制程序的完整性以及真实性，如果验证通过，就会将控制权交给下一个二进制程序。
如果设备在已知健康状态下被启动，并且引导过程中执行的一系列程序都已通过有效签名认证，那么当最后一个程序执行后，设备会认为此时自身处于健康并且受信的状态中。然而，如果在安全启动执行链中，某一个程序无法验证下一个程序的有效性，那么最终得到的系统状态将不再被信任。
通常情况下，这条信任链的源头由核心加密密钥（签名及加密密钥）以及存储在片上只读内存（on-chip read only
memory）中的原始可信固件（bootrom）这两类因素共同决定。
启用了安全启动特性的系统会以某种方式锁住这条信任链，使实际接触到设备的最终用户、下游厂商、集成商或者攻击者无法通过禁用安全启动特性来篡改设备安全性。这项特性通常用于数字版权管理（DRM）和知识产权保护中，也可以用来防止恶意代码或其他未授权软件在设备上运行。
**2.2 High Assurance Boot（HAB）**
HAB（High Assurance
Boot）是NXP在i.MX处理器中实现的安全启动特性。这项特性内置于片上ROM中，负责加载初始程序镜像（通常为启动介质中第一阶段的bootloader）。
HAB使用公开密钥加密算法（具体来说是RSA算法）来对启动时执行的镜像进行验证。镜像厂商已经在离线状态下使用私钥对镜像数据进行签名，i.MX处理器会从该镜像的某个部位中提取签名信息，然后使用相应的公钥信息对签名进行验证。
这条信任链的根节点依赖于一组RSA密钥对，这组密钥对名为SRKs（Super Root
Keys，超级根密钥），用于防止设备加载并使用由潜在攻击者提供的任意公钥来运行恶意镜像，恶意镜像使用了攻击者自己的私钥进行签名。此外，它也能优化紧缺的一次性可编程硬件资源。合法的私钥由证书颁发机构（CA）签发，用来对镜像进行签名，对应的公钥哈希表存储在一次性可编程硬件中。对于支持安全启动特性的i.MX处理器而言，这是一种隐藏的ROM以及电子可编程保险丝（electrically
programmable fuses，eFuses）。
在启动时，HAB bootrom会从CSF（Command Sequence File）中加载SRK表，计算哈希值，将计算结果与存储在SRK
fues中的值进行对比。如果哈希值匹配，那么安全启动过程就会继续检查镜像是否经过正确的私钥签名。启动过程失败或者出现任何错误，处理器就会进入恢复（recovery）模式，在这个模式下，设备可以使用串行下载协议（Serial
Download Protocol，SDP）通过UART或者USB端口安全加载启动镜像。
供应商使用代码签名工具（Code Signing
Tools，CST）以X.509证书形式提供公钥。HAB特性以API形式与启动镜像代码对接，CSF中的命令可以调用这些API。CSF中包含HAB在安全启动过程中执行的有所命令，也包含SRK表以及证书及签名，以验证待加载运行的那些镜像。
上图为HAB信任链，NXP在“使用HABv4的i.MX50、i.MX53及i.MX
6系列处理器中的安全启动”[文档](http://www.nxp.com/docs/en/application-note/AN4581.pdf)中（AN4581）详细介绍了整个过程。
**2.3 串行下载协议（SDP）** ****
bootrom支持一种名为串行下载协议（Serial Download
Protocol，SDP）的恢复模式，在这种模式下，设备可以通过USB或者UART端口加载启动镜像。
为了实现这一功能，bootrom在HID的基础上实现了带有一些简单命令的小型USB协议：
1、从内存中读取1个单字（READ REGISTER）
2、往内存中写入1个单字（WRITE REGISTER）
3、将启动镜像写入内存（WRITE FILE）
4、写入并执行一组DCD命令（DCD WRITE）
5、执行内存中已加载的启动镜像（JUMP ADDRESS）
当设备被锁定在安全模式下时，会有一系列检查过程，以保证bootrom免受未经允许的内存访问以及未经签名的代码执行，这些检查过程包括：
1、使用白名单方式检查检查访问的内存是否位于许可的范围内。
2、以同一个白名单检查访问的DCD内存范围是否位于许可的范围内。
3、JUMP ADDRESS在执行启动镜像前会先检查启动镜像签名。
**三、漏洞分析**
****
我们对编译好的一个bootrom进行分析然后发现了这些漏洞。
我们对代码的功能进行了理解，在这个基础上修改了代码中函数的名称，这些名称可能与源代码中真实的函数名不一致。
用来描述函数位置的地址与bootrom镜像有关，这个镜像的MD5值为945cfc9f525a378102dd24b5eb1b41cf。
我们的实验设备是一个处于锁定状态下的Sabrelite开发板，我们通过一个功能型利用代码，绕过了开发板的HAB安全启动过程，从而证实了漏洞的有效性。
InversePath生产的[USB
Armory](https://inversepath.com/usbarmory)也受这些漏洞影响，该厂商研发了相应的PoC程序来演示这些漏洞。
**3.1 X.509证书解析中的栈缓冲区溢出漏洞（CVE-2017-7932）**
bootrom的X.509证书解析器中存在一个栈缓冲区溢出漏洞，当解析器加载攻击者构造的一个证书时就会触发这个漏洞。
安全启动中的控制流遵循如下步骤：
1、从存储设备中或者在恢复模式下通过USB接口获取中断向量表（Interrupt Vector Table，IVT）。
2、执行DCD命令。
3、执行CSF命令，这些命令负责安全启动的完整性。当设备处于信任模式下时，这一阶段所执行的CSF命令通常如下：
（1）安装SRK类型的RSA公钥，其SHA256哈希必须与SRK fuses中已写入的哈希值完全一致。
（2）使用经SRK签名的X.509证书安装CSFK公钥。
（3）使用CSFK认证CSF。
（4）安装公钥以验证启动镜像。
（5）使用之前安装的密钥验证启动镜像。
4、执行下一阶段的bootloader。
设备使用INSTALL_KEY这个CSF命令完成密钥安装过程。设备会加载并验证不同的密钥，每个密钥的验证由上一个已安装的密钥来完成（信任链的根节点为SRK
fuses）。
当设备安装一个X.509类型的公钥时，hab_csf_cmd_install_key函数（其地址位于0xB5C0处）会找到负责导入X.509证书的插件，然后以下述方式调用：
    mod_x509->load_key (x509_parse_certificate)
    mod_x509->verify_key (x509_verify_certificate_signature)
因此，设备在验证证书签名之前就已经解析了整个证书。由于INSTALL_KEY命令可以先于任何验证命令执行，因此，攻击者无需篡改启动镜像或者将设备切换到恢复模式，就可以触发X.509解析器中存在的漏洞。
HAB bootrom使用了自定义的ASN.1以及X.509解析库，当解析X.509证书中的扩展属性时，HAB错误调用了某个ASN.1库函数，导致漏洞存在。
asn1_extract_bit_string函数（位于0xE796处）使用了内部函数asn1_deep_copy_element_data（位于0xEF20处）来拷贝一个位串（bit