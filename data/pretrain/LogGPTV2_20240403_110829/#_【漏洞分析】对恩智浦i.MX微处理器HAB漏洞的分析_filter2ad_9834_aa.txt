# 【漏洞分析】恩智浦i.MX微处理器HAB漏洞的深入解析

## 译文声明
本文为翻译文章，原文来源：安全客  
原文地址：[请插入链接]  
译文仅供参考，具体内容以原文为准。  
作者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)  
预估稿费：200 RMB  
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿。

## 一、前言
恩智浦（NXP）半导体公司生产的[i.MX系列应用处理器](http://www.nxp.com/products/microcontrollers-and-processors/arm-processors/i.mx-applications-processors:IMX_HOME)在安全启动特性中存在两个漏洞。这两个漏洞由Quarkslab的研究人员Guillaume Delugré和Kévin Szkudłapski发现，并在本文中进行了详细的技术分析。

攻击者可以利用这些漏洞破坏安全启动过程，绕过代码签名认证，从而在启用了HAB（High Assurance Boot）特性的i.MX应用处理器上加载并运行任意代码。受影响的i.MX系列处理器共有12款。

研究人员于2016年9月发现这些漏洞，并向厂商报告。在2017年5月19日的[高通移动安全峰会](https://qct-qualcomm.secure.force.com/QCTConference/GenericSitePage?eventname=2017Security&page=Summit%20Information)上，Quarkslab与NXP联合公布了相关技术细节。此外，在2017年3月，相关信息也被通报给四个国家的计算机应急小组（CERTs）。

NXP发布了一份工程简报及两份勘误文件（EB00854、ERR010872和ERR0108873），概述了这些漏洞及其影响范围、解决方案和缓解措施。下文中将详细介绍i.MX处理器的相关特性和漏洞的具体细节。

## 二、背景介绍
### NXP i.MX系列处理器
NXP半导体公司的i.MX系列处理器基于ARM架构，广泛应用于汽车、工业及消费电子市场的SoC（System on a Chip）系统中。这些微控制器最初由飞思卡尔半导体公司开发，该公司于2015年被NXP收购。i.MX处理器具备多种安全特性，包括安全及加密启动、篡改检测、硬件加速加密算法、片上及片外安全存储、实时安全时钟以及基于硬件的随机数生成器等。

使用i.MX处理器的厂商需要自行启用这些安全特性。在某些情况下，处理器会被设置为锁定状态，此时这些安全特性无法被禁用。

### 安全启动
当处于关机状态的系统启动时，通过安全启动过程将系统引导到一个已知的健康状态。这一过程涉及多个二进制文件的执行，设备会加载这些文件，验证其完整性和真实性，然后按顺序运行，最终将系统引导至预期状态。通常，设备会使用具有合法数字签名的二进制程序来完成这一任务，并在执行过程中检查下一个二进制程序的有效性。

如果所有程序都通过有效签名认证，则设备认为自身处于健康且受信任的状态。然而，如果某个程序无法验证下一个程序的有效性，则最终系统状态将不再被信任。

这条信任链的源头通常由核心加密密钥（签名及加密密钥）和存储在片上只读内存中的原始可信固件（bootrom）决定。启用安全启动特性的系统会锁住这条信任链，防止最终用户、下游厂商、集成商或攻击者通过禁用安全启动来篡改设备安全性。这项特性常用于数字版权管理（DRM）和知识产权保护，也可以防止恶意代码或其他未授权软件在设备上运行。

### High Assurance Boot (HAB)
HAB是NXP在i.MX处理器中实现的安全启动特性。它内置于片上ROM中，负责加载初始程序镜像（通常是第一阶段的bootloader）。HAB使用RSA算法对启动镜像进行验证，确保镜像数据经过离线私钥签名。i.MX处理器从镜像中提取签名信息，并使用相应的公钥进行验证。

信任链的根节点依赖于一组称为SRKs（Super Root Keys）的RSA密钥对，防止设备加载并使用潜在攻击者提供的任意公钥来运行恶意镜像。合法的私钥由证书颁发机构（CA）签发，对应的公钥哈希表存储在一次性可编程硬件中。对于支持安全启动特性的i.MX处理器，这是一种隐藏的ROM和电子可编程保险丝（eFuses）。

启动时，HAB bootrom从CSF（Command Sequence File）中加载SRK表，计算哈希值并与存储在SRK fuses中的值对比。如果哈希值匹配，安全启动过程继续检查镜像是否经过正确的私钥签名。如果启动失败或出现任何错误，处理器进入恢复模式，通过串行下载协议（SDP）通过UART或USB端口安全加载启动镜像。

供应商使用代码签名工具（CST）以X.509证书形式提供公钥。HAB特性以API形式与启动镜像代码对接，CSF中的命令可以调用这些API。CSF包含HAB在安全启动过程中执行的所有命令，也包含SRK表、证书及签名，以验证待加载运行的镜像。

### 串行下载协议（SDP）
bootrom支持一种名为串行下载协议（Serial Download Protocol, SDP）的恢复模式，在这种模式下，设备可以通过USB或UART端口加载启动镜像。为了实现这一功能，bootrom在HID基础上实现了几个简单命令的小型USB协议：

1. 从内存中读取单字（READ REGISTER）
2. 往内存中写入单字（WRITE REGISTER）
3. 将启动镜像写入内存（WRITE FILE）
4. 写入并执行一组DCD命令（DCD WRITE）
5. 执行内存中已加载的启动镜像（JUMP ADDRESS）

当设备被锁定在安全模式下时，会有以下检查过程以防止未经允许的内存访问和未经签名的代码执行：
1. 使用白名单检查访问的内存是否位于许可范围内。
2. 以同一个白名单检查访问的DCD内存范围是否位于许可范围内。
3. 在执行启动镜像前，JUMP ADDRESS会先检查启动镜像签名。

## 三、漏洞分析
我们对编译好的一个bootrom进行了分析，发现了这些漏洞。通过对代码功能的理解，我们修改了代码中函数的名称，这些名称可能与源代码中的真实函数名不一致。描述函数位置的地址与bootrom镜像有关，该镜像的MD5值为945cfc9f525a378102dd24b5eb1b41cf。

我们的实验设备是一个处于锁定状态下的Sabrelite开发板，通过一个功能性利用代码，我们绕过了开发板的HAB安全启动过程，证实了漏洞的有效性。InversePath生产的[USB Armory](https://inversepath.com/usbarmory)也受这些漏洞影响，该厂商研发了相应的PoC程序来演示这些漏洞。

### 3.1 X.509证书解析中的栈缓冲区溢出漏洞（CVE-2017-7932）
bootrom的X.509证书解析器中存在一个栈缓冲区溢出漏洞，当解析器加载攻击者构造的一个证书时就会触发这个漏洞。

安全启动中的控制流遵循以下步骤：
1. 从存储设备中或在恢复模式下通过USB接口获取中断向量表（IVT）。
2. 执行DCD命令。
3. 执行CSF命令，这些命令负责安全启动的完整性。当设备处于信任模式下时，这一阶段所执行的CSF命令通常如下：
   - 安装SRK类型的RSA公钥，其SHA256哈希必须与SRK fuses中已写入的哈希值完全一致。
   - 使用经SRK签名的X.509证书安装CSFK公钥。
   - 使用CSFK认证CSF。
   - 安装公钥以验证启动镜像。
   - 使用之前安装的密钥验证启动镜像。
4. 执行下一阶段的bootloader。

设备使用INSTALL_KEY这个CSF命令完成密钥安装过程。设备会加载并验证不同的密钥，每个密钥的验证由上一个已安装的密钥来完成（信任链的根节点为SRK fuses）。

当设备安装一个X.509类型的公钥时，`hab_csf_cmd_install_key`函数（地址位于0xB5C0处）会找到负责导入X.509证书的插件，然后以下述方式调用：
```c
mod_x509->load_key(x509_parse_certificate);
mod_x509->verify_key(x509_verify_certificate_signature);
```
因此，设备在验证证书签名之前就已经解析了整个证书。由于INSTALL_KEY命令可以先于任何验证命令执行，攻击者无需篡改启动镜像或将设备切换到恢复模式即可触发X.509解析器中的漏洞。

HAB bootrom使用自定义的ASN.1和X.509解析库。当解析X.509证书中的扩展属性时，HAB错误地调用了某个ASN.1库函数，导致漏洞存在。

`asn1_extract_bit_string`函数（位于0xE796处）使用内部函数`asn1_deep_copy_element_data`（位于0xEF20处）来拷贝位串（bit string）。