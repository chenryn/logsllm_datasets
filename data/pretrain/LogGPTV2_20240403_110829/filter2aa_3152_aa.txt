It’s assembler, 
Jim, but not as 
we know it!
Morgan Gangwere
DEF CON 26
Dedication
Never forget the 
shoulders you stand on.
Thanks, Dad
whoami
Hoopy Frood
Been fiddling with Linux SOCs since I 
fiddled with an old TS-7200 
EmbeddedARM board
I’ve used ARM for a lot of services: 
IRC, web hosting, etc.
I’ve built CyanogenMod/LineageOS, 
custom ARM images, etc. 
A word of note
There are few concrete examples in this talk. I’m sorry.
This sort of work is
One part science
One part estimation
Dash of bitter feelings towards others
Hint of “What the fuck was that EE thinking?”
A lot comes from experience. I can point the way, but I 
cannot tell the future. 
There’s a lot of seemingly random things. Trust me, It’ll
make sense.
ARMed to the 
teeth
From the BBC to your home.
Short history of 
ARM
Originally the Acorn RISC machine
Built for the BBC Micro!
Acorn changed hands and became 
ARM Holdings
Acorn/ARM has never cut silicon!
Fun fact: Intel has produced ARM-
based chips (StrongARM and 
XSCale) and still sometimes does!
The ISA hasn’t changed all that 
much.
Embedded 
Linux 101
Anatomy of an Embedded 
Linux device. 
Fundamentally 3 parts
Storage
SoC/Processor
RAM
Everything else? Bonus.
PHYs on everything from I2C, USB to SDIO
Cameras and Screens are via MIPI-defined protocols, 
CSI and DSI respectively
At one point, they all look mostly the same.
What is an SoC?
Several major vendors:
Allwinner, Rockchip (China)
Atheros, TI, Apple (US)
Samsung (Korea)
80-100% of the peripherals and possibly storage is right 
there on die
Becomes a “just add peripherals” design
Some vendors include SoCs as a part of other 
devices, such as TI's line of DSPs with an ARM SoC 
used for video production hardware and the like.
In some devices, there may be multiple SoCs: A whole 
line of Cisco-owned Linux-based teleconferencing 
hardware has big banks of SoCs from TI doing video 
processing on the fly alongside a DSP.
What is an SoC?
Internal bus
Peripheral Controller
LTE modem
Ethernet PHY
I2C/SPI
External 
Peripherals
RAM 
(sometimes)
Storage 
Controller
SD 
Card/NAND/etc
GPU
CPU 
Core(s)
Storage
Two/Three common flavors
MTD (Memory Technology 
Device): Abstraction of flash 
pages to partitions
Storage
Two/Three common flavors
MTD (Memory Technology 
Device): Abstraction of flash 
pages to partitions
eMMC: Embedded 
MultiMedia Card
Storage
Two/Three common flavors
MTD (Memory Technology 
Device): Abstraction of flash 
pages to partitions
eMMC: Embedded 
MultiMedia Card, SPI SD card
SD cards
Storage
Two/Three common flavors
MTD (Memory Technology 
Device): Abstraction of flash 
pages to partitions
eMMC: Embedded 
MultiMedia Card, SPI SD card
SD cards
Storage
Two/Three common flavors
MTD (Memory Technology 
Device): Abstraction of flash 
pages to partitions
eMMC: Embedded 
MultiMedia Card, SPI SD card
SD cards
Then there’s UFS
Introduced in 2011 for 
phones, cameras: High 
Bandwidth storage devices
Uses a SCSI model, not 
eMMC’s linear model
Variations
Some devices have a small amount of onboard Flash for 
the bootloader
Commonly seen on phones, for the purposes of 
boostrapping everything else
Every vendor has different tools for pushing bits to a 
device and they all suck.
Samsung has at least three for Android
Allwinner based devices can be placed into FEL boot 
mode
Fastboot on Android devices
RAM
The art of cramming a lot in a 
small place
Vendors are seriously tight-
assed
Can you cram everything in 
8MB? Some routers do.
The WRT54G had 8M of RAM, 
later 4M
Modern SoCs tend towards 
1GB, phones 4-6G
In pure flash storage, ramfs
might be used to expand on-
demand files (http content)
Peripherals
Depends on what the hardware has: SPI, I2C, I2S, etc are 
common sights.
Gonna see some weird shit
SDIO wireless cards
“sound cards” over I2S
GSM modems are really just pretending to be Hayes AT 
modems.
Power management, LED management, cameras, etc.
“We need an Ethernet PHY” becomes “We hooked an 
Ethernet PHY up over USB” 
Linux doesn’t care if they’re on-die or not, it’s all the same 
bus. 
Peripherals
Depends on what the hardware has: SPI, I2C, I2S, etc are 
common sights.
Gonna see some weird shit
SDIO wireless cards
“sound cards” over I2S
GSM modems are really just pretending to be Hayes AT 
modems.
Power management, LED management, cameras, etc.
“We need an Ethernet PHY” becomes “We hooked an 
Ethernet PHY up over USB” 
Linux doesn’t care if they’re on-die or not, it’s all the same 
bus. 
Peripherals
Depends on what the hardware has: SPI, I2C, I2S, etc are 
common sights.
Gonna see some weird shit
SDIO wireless cards
“sound cards” over I2S
GSM modems are really just pretending to be Hayes AT 
modems.
Power management, LED management, cameras, etc.
“We need an Ethernet PHY” becomes “We hooked an 
Ethernet PHY up over USB” 
Linux doesn’t care if they’re on-die or not, it’s all the same 
bus. 
Peripherals
Depends on what the hardware has: SPI, I2C, I2S, etc are 
common sights.
Gonna see some weird shit
SDIO wireless cards
“sound cards” over I2S
GSM modems are really just pretending to be Hayes AT 
modems.
Power management, LED management, cameras, etc.
“We need an Ethernet PHY” becomes “We hooked an 
Ethernet PHY up over USB” 
Linux doesn’t care if they’re on-die or not, it’s all the same 
bus. 
Not 
GPIO!
GPIO
Bootloader
One Bootloader To Rule Them All: Das U-Boot
Uses a simple scripting language
Can pull from TFTP, HTTP, etc.
Might be over Telnet, Serial, BT UART, etc.
Some don’t use U-Boot, use Fastboot or other loaders
Android devices are a clusterfuck of options
Life and death of an SoC*
DFU 
Check
• First chance to load fresh code onto device, use for bootstrapping and 
recovery
IPL
• Does signature checking of early boot image
• Probably SoC vendor provided
Bootloader
• Early UART/network wakeup is likely here.
Load Kernel 
into RAM
• Some devices are dumb and load multiple kernels until one fails or they run out
• U-Boot is really running a script here.
Start kernel
• Kernel has to wake up (or re-wake) devices it wants. It can’t make any guarantees. 
Userland 
• Home of the party. 
• Where the fun attacks are
* Some restrictions apply
Life and death of an SoC*
DFU 
Check
• First chance to load fresh code onto device, use for bootstrapping and 
recovery
Early 
Boot
• Does signature checking of early boot image
• Probably SoC vendor provided
U-Boot
• Early UART/network wakeup is likely here.
Load Kernel 
into RAM
• Some devices are dumb and load multiple kernels until one fails or they run out
• U-Boot is really running a script here.
Start kernel
• Kernel has to wake up (or re-wake) devices it wants. It can’t make any guarantees. 
Userland 
• Home of the party. 
• Where the fun attacks are
* Some restrictions apply
Root Filesystem: Home to 
All
A root filesystem contains the bare minimum to boot Linux: Any 
shared object libraries, binaries, or other content that is necessary for 
what that device is going to do
Fluid content that needs to be changed or which is going to be fetched 
regularly is often stored on a Ramdisk; this might be loaded during 
init's early startup from a tarball.
This is a super common thing to miss because it's a tmpfs outside of 
/tmp
this is a super common way of keeping / “small”
This often leads to rootfs extractions via tar that seem "too big“ 
There are sometimes multiple root filesystems overlaid upon each 
other
Android uses this to some extent: /system is where many things 
really are
Might be from NFS, might try NFS first, etc.
Attacking these 
devices
Step 0: Scope out your 
device
Get to know what makes the device 
tick
Version of Linux
Rough software stack
Known vulnerabilities
Debug shells, backdoors, admin 
shells, etc.
ARM executables are fairly generic
Kobo updates are very, VERY generic 
and the Kobo userland is very aware 
of this.
Hardware vendors are lazy: many 
devices likely similar to kin-devices
Possibly able to find update for 
similar device by same OEM
Don’t Reinvent The Wheel
Since so many embedded linux devices are similar, or run similarly 
outdated software, you may well have some of your work cut out 
for you
OWASP has a whole task set devoted to IoT security:
https://www.owasp.org/index.php/OWASP_Internet_of_Things_Pr
oject
Tools like Firmwalker (https://github.com/craigz28/firmwalker) and 
Routersploit (https://github.com/threat9/routersploit) are already 
built and ready. Sometimes, thinking like a skid can save time and 
energy for other things, like beer!
Firmware Security blog is a great place to look, including a 
roundup of stuff (https://firmwaresecurity.com/2018/06/03/list-of-