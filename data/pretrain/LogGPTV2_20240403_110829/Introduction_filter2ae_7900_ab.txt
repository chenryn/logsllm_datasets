        shift_address = virtual_addr >> 12  # 4kb
        pte_offset = shift_address & 0x1ff
        shift_address = shift_address >> 9  # 512
        pde_offset = shift_address & 0x1ff
        shift_address = shift_address >> 9  # 512
        pdpt_offset = shift_address & 0x1ff
        shift_address = shift_address >> 9
        pml_offset = shift_address & 0x1ff
        print("entry: PML4: 0x%x PDPT: 0x%x PD: 0x%x PT: 0x%x" % (pml_offset, pdpt_offset, pde_offset, pte_offset))
        print("offset: PML4: 0x%x PDPT: 0x%x PD: 0x%x PT: 0x%x" % (pml_offset * entry_size, pdpt_offset * entry_size, pde_offset * entry_size, pte_offset * entry_size))
    def calc_physical_32(virtual_addr):
        entry_size = 0x8
        shift_address = virtual_addr >> 12  # 4kb
        pte_offset = shift_address & 0x1ff
        shift_address = shift_address >> 9  # 512
        pde_offset = shift_address & 0x1ff
        print("entry: PD: 0x%x PT: 0x%x" % (pde_offset, pte_offset))
        print("offset: PD: 0x%x PT: 0x%x" % (pde_offset * entry_size, pte_offset * entry_size))
#### Self-ref Entry Weakness
​ Self-Ref机制的缺点是很明显的，就是上面展示的，由于self-entry的位置并不是绝对随机化的，对于给定的虚拟地址，我们是有可能计算出用来管理该虚拟地址的各级Page Table的。
#### Self-ref In Windows
​ Windows在32bits和64bits中都采用了Self-Ref机制，以64bits系统为例，前256 PML4 entries用作USER
SPACE，后256 PML4 entries用作KERNEL SPACE。PML4的self-ref
entry是0x1ED（在内核空间）相应的虚拟地址空间`(512G + 1G + 2M + 4K)*0x1ED =0xf6fb 7dbe
d000`，加上canonical address就是`0xffff f6fb 7dbe d000`。
​ 事实上，Windows上为所有运行的进程使用 固定的 PML4 self-ref entry，这使得攻击者可以计算出Page
Table/entries（无论使用的那些物理地址）。通过这种方式，攻击者可以修改或者添加entries。这种方式既可以用在本地也可以远程攻击中，windows2000
或者win10 都受影响。使得KALSR受到冲击，这种攻击方式在`Windows SMEP bypass`中有所体现。
#### Windows version 1607 Update
​ Windows采用了随机化Self-Ref Entry的措施。
#### Windows Hal Heap
​ Windows由于KALSR的存在，每个模块基地址都是随机的。但是我们不由得问道“第一个加载的模块呢？”
​ Windows每次开机时第一次加载的模块是`HAL.dll`（Hardware Abstraction Layer），该模块运行在Kernel
Mode下，用于抽象基础硬件。通过这种方式Windows可以通过Hal.dll的导出函数与各种硬件交互。
​
HAL.DLL在运行时同样需要Stack，Heap空间，但是最有趣的是HEAP，HAL.DLL的HEAP地址在启动时由HAL创建，该地址总是映射在同一个虚拟地址空间（自从win2000），这个攻击因子也被用来Bypass
KALSR。这个固定的虚拟地址是：Windows 32 bits =>`0xffd0 0000`，Windows => `0xffff ffff ffd0
0000`。下面是一张64bits 下的该地址的物理地址及虚拟地址查询表
​
#### Explorer By Windbg
​ 为了验证上面探讨的Windows Page机制，我分别在Windows 7 32bits和 Windows 10 64bits上做了下面的实验。
​ 测试代码：
    #include 
    #include 
    int main()
    {
        PVOID addr = (PVOID)0x1000000;
        //Allocate Memory
        addr = VirtualAlloc(addr, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        wprintf(L"address = 0x%llx\n", addr);
        // Setting Memory
        memset(addr, 0x41, 0x1000);
        //  Debug
        __debugbreak();
    }
##### Windows 7 32bits
​ 运行到断点时，可以发现已经成功地分配到虚拟地址，并在其中写入了我们的数据
​
​ 查看对应的虚拟地址的Page Table状态
​ 可以发现32bits上只有PDE和PTE，而且我们发现PTE用物理地址0x61cd5000(低12bits是标志位) 映射
虚拟地址0x1000000。这说明虚拟地址在解析到具体的物理地址的时候依赖PTE的值。
​ 例如，我们修改PTE的值，使其指向别的物理地址。
​ 
​
可以看到，此时eax指向虚拟地址没有变化，但是内容已经变化，这就意味着我们修改某一虚拟地址对应的PTE到某一物理地址，就能实现修改虚拟地址的内容的目的，也可以达到对该物理地址实际对应的虚拟地址的重写的目的。
​
再举个例子，在Win7上的任意地址写利用时，时常会用到的`nt!HalDispatchTable`偏移`0x4`位置的指针`hal!HaliQuerySystemInformation`。我们尝试修改可控的虚拟地址指向和该地址同一个物理地址的位置，看看会发生什么。
​ 查看HalDispatchTable
我们将该物理地址`03f6f000+3fc`写到虚拟地址`eax=0x1000000`的PTE中，对虚拟地址eax写入看看会怎样
可以看到，我们通过将两个虚拟地址的PTE修改为一致的，可以通过写入可控的虚拟地址来修改到不可控的虚拟地址！（偏移在虚拟地址和物理地址是一样的）
​ 除此之外，我们可以验证下由虚拟地址获取Page Table地址
由上面给的脚本计算出的PTE值
可以看到偏移是完全正确的，缺的是一个PTE的基地址。
另外，值得注意的是，在测试过程中发现，Window
7中，0x1000000虚拟地址对应的物理地址是随机的，但是PDE和PTE始终保持不变，这也就意味着Self-Ref是没有开启随机化的。
##### Windows 10 1903 64bits
​ 同样的运行测试的代码，断下后的状态
​ 可以看到，Win10 x64上的四级页表寻址机制，其中PTE保存的依然是虚拟地址对应的物理地址内容。
修改PTE的效果和Win7是一样的（可以自己动手实验下）。
​ 测试上述脚本根据虚拟地址得到Page Table的情况，可以看到偏移是一致的。
​
​ 而且，在Windows
10及以上，存在`nt!MiGetPteAddress`，Pte基地址编码在固定的偏移`0x13`，类似的也有`MiGetPdeAddress`，偏移`0xc`
​ 这种情况下，根据虚拟地址得到PTE是相对容易的。如果我们拥有任意地址写，是可以用用户可控的虚拟地址的PTE修改物理地址到一内核地址，实现利用的。
Windows10测试中，PTE基地址是随机的。
#### Related Links
  * [Getting Physical-Part 1](https://www.coresecurity.com/core-labs/articles/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-1)
  * [Getting Physical-Part-2](https://www.coresecurity.com/core-labs/articles/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-2-windows)
  * [Getting-Pyhsical-Part-3](https://www.coresecurity.com/core-labs/articles/getting-physical-extreme-abuse-of-intel-based-paging-systems)
  * [CSW2016](https://www.coresecurity.com/sites/default/files/private-files/publications/2016/05/CSW2016%20-%20Getting%20Physical%20-%20Extended%20Version.pdf)