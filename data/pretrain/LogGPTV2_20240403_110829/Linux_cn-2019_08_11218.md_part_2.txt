例如，我可能会为我的 C++ 程序添加以下内容：
```
AC_INIT([penguin], [2019.3.6], [[PI:EMAIL][8]])
AC_OUTPUT
AM_INIT_AUTOMAKE
AC_CONFIG_FILES([Makefile])
AC_PROG_CXX
```
保存该文件。现在让我们将目光转到 `Makefile`。
#### 生成 Autotools Makefile
`Makefile` 并不难手写，但 Autotools 可以为你编写一个，而它生成的那个将使用在 `./configure` 步骤中检测到的配置选项，并且它将包含比你考虑要包括或想要自己写的还要多得多的选项。然而，Autotools 并不能检测你的项目构建所需的所有内容，因此你必须在文件 `Makefile.am` 中添加一些细节，然后在构造 `Makefile` 时由 `automake` 使用。
`Makefile.am` 使用与 `Makefile` 相同的语法，所以如果你曾经从头开始编写过 `Makefile`，那么这个过程将是熟悉和简单的。通常，`Makefile.am` 文件只需要几个变量定义来指示要构建的文件以及它们的安装位置即可。
以 `_PROGRAMS` 结尾的变量标识了要构建的代码（这通常被认为是 原语   primary 目标；这是 `Makefile` 存在的主要意义）。Automake 也会识别其他原语，如 `_SCRIPTS`、`_ DATA`、`_LIBRARIES`，以及构成软件项目的其他常见部分。
如果你的应用程序在构建过程中需要实际编译，那么你可以用 `bin_PROGRAMS` 变量将其标记为二进制程序，然后使用该程序名称作为变量前缀引用构建它所需的源代码的任何部分（这些部分可能是将被编译和链接在一起的一个或多个文件）：
```
bin_PROGRAMS = penguin
penguin_SOURCES = penguin.cpp
```
`bin_PROGRAMS` 的目标被安装在 `bindir` 中，它在编译期间可由用户配置。
如果你的应用程序不需要实际编译，那么你的项目根本不需要 `bin_PROGRAMS` 变量。例如，如果你的项目是用 Bash、Perl 或类似的解释语言编写的脚本，那么定义一个 `_SCRIPTS` 变量来替代：
```
bin_SCRIPTS = bin/penguin
```
Automake 期望源代码位于名为 `src` 的目录中，因此如果你的项目使用替代目录结构进行布局，则必须告知 Automake 接受来自外部源的代码：
```
AUTOMAKE_OPTIONS = foreign subdir-objects
```
最后，你可以在 `Makefile.am` 中创建任何自定义的 `Makefile` 规则，它们将逐字复制到生成的 `Makefile` 中。例如，如果你知道一些源代码中的临时值需要在安装前替换，则可以为该过程创建自定义规则：
```
all-am: penguin
        touch bin/penguin.sh
penguin: bin/penguin.sh
        @sed "s|__datadir__|@datadir@|" $&lt; &gt;bin/$@
```
一个特别有用的技巧是扩展现有的 `clean` 目标，至少在开发期间是这样的。`make clean` 命令通常会删除除了 Automake 基础结构之外的所有生成的构建文件。它是这样设计的，因为大多数用户很少想要 `make clean` 来删除那些便于构建代码的文件。
但是，在开发期间，你可能需要一种方法可靠地将项目返回到相对不受 Autotools 影响的状态。在这种情况下，你可能想要添加：
```
clean-local:
        @rm config.status configure config.log
        @rm Makefile
        @rm -r autom4te.cache/
        @rm aclocal.m4
        @rm compile install-sh missing Makefile.in
```
这里有很多灵活性，如果你还不熟悉 `Makefile`，那么很难知道你的 `Makefile.am` 需要什么。最基本需要的是原语目标，无论是二进制程序还是脚本，以及源代码所在位置的指示（无论是通过 `_SOURCES` 变量还是使用 `AUTOMAKE_OPTIONS` 告诉 Automake 在哪里查找源代码）。
一旦定义了这些变量和设置，如下一节所示，你就可以尝试生成构建脚本，并调整缺少的任何内容。
#### 生成 Autotools 构建脚本
你已经构建了基础结构，现在是时候让 Autotools 做它最擅长的事情：自动化你的项目工具。对于开发人员（你），Autotools 的接口与构建代码的用户的不同。
构建者通常使用这个众所周知的顺序：
```
$ ./configure
$ make
$ sudo make install
```
但是，要使这种咒语起作用，你作为开发人员必须引导构建这些基础结构。首先，运行 `autoreconf` 以生成用户在运行 `make` 之前调用的 `configure` 脚本。使用 `-install` 选项将辅助文件（例如符号链接）引入到 `depcomp`（这是在编译过程中生成依赖项的脚本），以及 `compile` 脚本的副本（一个编译器的包装器，用于说明语法，等等）。
```
$ autoreconf --install
configure.ac:3: installing './compile'
configure.ac:2: installing './install-sh'
configure.ac:2: installing './missing'
```
使用此开发构建环境，你可以创建源代码分发包：
```
$ make dist
```
`dist` 目标是从 Autotools “免费”获得的规则。这是一个内置于 `Makefile` 中的功能，它是通过简单的 `Makefile.am` 配置生成的。该目标可以生成一个 `tar.gz` 存档，其中包含了所有源代码和所有必要的 Autotools 基础设施，以便下载程序包的人员可以构建项目。
此时，你应该仔细查看存档文件的内容，以确保它包含你要发送给用户的所有内容。当然，你也应该尝试自己构建：
```
$ tar --extract --file penguin-0.0.1.tar.gz
$ cd penguin-0.0.1
$ ./configure
$ make
$ DESTDIR=/tmp/penguin-test-build make install
```
如果你的构建成功，你将找到由 `DESTDIR` 指定的已编译应用程序的本地副本（在此示例的情况下为 `/tmp/penguin-test-build`）。
```
$ /tmp/example-test-build/usr/local/bin/example
hello world from GNU Autotools
```
### 去使用 Autotools
Autotools 是一个很好的脚本集合，可用于可预测的自动发布过程。如果你习惯使用 Python 或 Bash 构建器，这个工具集对你来说可能是新的，但它为你的项目提供的结构和适应性可能值得学习。
而 Autotools 也不只是用于代码。Autotools 可用于构建 [Docbook](https://opensource.com/article/17/9/docbook) 项目，保持媒体有序（我使用 Autotools 进行音乐发布），文档项目以及其他任何可以从可自定义安装目标中受益的内容。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出