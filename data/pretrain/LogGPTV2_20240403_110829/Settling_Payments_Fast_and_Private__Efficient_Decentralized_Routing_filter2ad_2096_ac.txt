and the adversarial assumptions also remain the same except
that instead of neighboring nodes Nin(s) of the sender s, now
for receiver privacy, we consider Nout(r) of the receiver r.
D. Performance Metrics
In this section, we describe the performance goals to be
achieved by a routing algorithm, which we denote generically
by R. In the following, we denote by (Gt, wt) the snapshot of
a PBT network at time t. Note that although we abstract away
the payment and accountability algorithms in this work, a PBT
network must implement them and therefore a PBT network
is dynamic. Let {(ti, ci, si, ri)} be a set of payment requests
from si to ri for an amount ci at time ti.
The performance of a routing algorithm R is characterized
by the following four metrics:
• Success ratio: Let ((p1, c1), . . . , (p|L|, c|L|)) be the set of
paths returned by routePay(c, s, r) as implemented in R.
i ci = c.
We consider the transaction successful only if(cid:80)
6
The success ratio describes the fraction of transactions
that are successful.3
• (Hop) Delay: The delay of R with regard to a transac-
tion (ti, ci, si, ri) is the difference between the time of
termination and the initiation time ti. In the absence of a
concrete implementation including realistic computation
and communication latencies, we provide an abstract
measurement of the delay as follows. Let m1 and m2
be messages sent by R. We say m2 is subsequent to m1
if a node sends m2 as a result of receiving m1. The hop
delay is the length of the longest chain of subsequent
messages sent by R.
• Transaction Overhead: Nodes exchange messages to
execute a transaction (ti, ci, si, ri). The transaction over-
head denotes the number of exchanged bits. As before, in
the absence of a concrete implementation, we abstract it
by assuming equal-sized messages for each implementa-
tion and stating the number of messages as the overhead.
• Stabilization Overhead: Analogously to the transaction
overhead, the stabilization overhead corresponds to the
number of bits sent within a certain time interval
to
maintain necessary state information, as required by the
implementation of the operation setRoutes() in R. Again,
we abstract from the concrete implementation by stating
the number of messages instead of the number of bits.
The ﬁrst two metrics heavily impact the perceived quality of
service while the latter two directly relate to network conges-
tion and hence impact the delay. Furthermore, the overhead
determines the load on the user devices.
IV. OUR CONSTRUCTION
In this section, we ﬁrst describe the key ideas of our
design and then detail the three operations in our routing
algorithm. We present pseudocode for centralized versions of
the algorithms, which allows presenting the algorithms in a
linear compact manner. We then describe how the distributed
versions used within a PBT network differ from the centralized
version.
A. Assumptions
Each user in the PBT network locally maintains the in-
formation of the links with her neighbors. We further as-
sume that users sharing a link can send messages to each
other through an authenticated and conﬁdential communication
channel. Moreover, we assume that there exist a set of nodes,
called landmarks, that are well known to other users in the
PBT network. We note that these assumptions are in tune with
other distributed PBT networks such as SilentWhispers.
Throughout this section, we refer to links that have non-
zero funds in both directions, i.e., links (u, v) and (v, u) with
w(u, v) > 0 and w(v, u) > 0 as bidirectional. u and v have
a unidirectional link if one of the two links does not exist or
has zero funds.
3This inherently assumes a payment algorithm that always succeeds after a
route with enough credit has been found. We thereby abstract away the details
of the payment algorithm.
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
B. Overview and Key Ideas
We here describe the key ideas of SpeedyMurmurs with
regard to the operations setRoutes, setCred, and routePay. In
particular, we focus on the predominant differences to existing
algorithms.
setRoutes:
In this algorithm, we construct multiple
embeddings, one for each landmark. As mentioned in Sec-
tion II-C, VOUTE offers an algorithm for BFS-based coordi-
nate assignment that assumes unweighted and undirected links.
We modify this algorithm by dividing it into two phases. First,
we only add bidirectional links. In the second phase of the
algorithm, nodes that are not yet part of the spanning tree join
by adding unidirectional links to the spanning tree.
setCred: We ﬁrst change the weight of the link and then
adapt the embedding accordingly. VOUTE does not provide
any guidance on how to react
to changes of weights. In
agreement with setRoutes, we decided to only initiate changes
if the two nodes i) established a new link of non-zero weight
(or set the value of link from 0 to a non-zero value), and
ii) removed a non-zero link (or set its value to 0). If they
established a new link, one of the nodes can choose the other
as a parent if it does not have a parent or the link to its
current parent only has credit in one direction. In contrast, if
a link is removed, one of the nodes has to select a new parent
(and coordinate) if the other node previously was its parent.
Furthermore, any descendants of the affected node have to
change coordinates.
routePay: The routing consists of three steps: i) the
receiver generates anonymous return addresses and sends them
to the sender, ii) the sender randomly splits the transaction
value on |l| paths, one for each landmark, and iii) VOUTE’s
routing algorithm ﬁnds a path between sender and receiver,
restricted to links that have sufﬁcient funds. Our algorithm
allows a ﬂexible choice of routes, preferring paths with high
funds. Determining the funds transferred along each path
beforehand enables nodes to block a certain amount of credit
during the probe operation and ensure that the subsequent
payment succeeds without blocking all of the link’s funds.
C. Detailed Description
setRoutes:
In the initialization phase, described in
Algorithm 1, we derive the embeddings. Iterating over all
landmarks, Algorithm 1 assigns the landmark coordinate to
be the empty vector (Line 3) and appends the landmark to a
queue (Line 5). The main loop of the algorithm then processes
the queue. In each step, the algorithm removes a node from the
queue (Line 8) and considers all its neighbors. If a neighbor
n does not have a coordinate yet and is eligible to have
one, the algorithm integrates n into the spanning tree, assigns
a coordinate by concatenating the parent coordinate and a
random b-bit number, and appends it to the queue (Lines 14-
17). The criterion determining the eligibility to be part of
the spanning depends on the phase of the algorithm: Initially
(bi = true, Line 6), a node is eligible if the available credit
on the link to and from its potential parent is non-zero. In
the second phase of the algorithm (bi = false), triggered
by an empty queue (Lines 18–21), all nodes can join the
spanning tree. Note that Algorithm 1 does not prevent a child
from choosing a parent such that they do not have funds in
Algorithm 1 setRoutes
1: # Input: Graph G, landmarks l1, . . . , l|L|
2: for i = 1 to |L| do
3:
4:
5:
6:
idi(li) = ()
q = empty queue
add li to q
bi = true # ﬁrst consider nodes with links in both
directions
while q is not empty do
node = remove head of q
for all n: neighbors of node do
n stores idi(node)
# Assign coordinate if n does not have one
if idi(n) is not set then
if (w(node, n) > 0 and w(n, node) > 0) or !bi
then
parenti(n) = node
n chooses random b-bit number r
idi(n) = concatenate(idi(node), r)
add n to q
# Add nodes with unidirectional links
if q is empty and bi then
bi = false
add all nodes n with idi(n) set to q
either direction. As such links do not serve any purpose in
a PBT network, we assume that the network does not allow
them. Alternatively, Algorithm 1 can check if the funds on a
unidirectional link is non-zero before allowing a parent-child
relation. The algorithm terminates once the queue is empty,
indicating that all nodes in a connected graph have coordinates.
In a distributed scenario,
there are no central queues.
Rather, nodes send messages to their neighbors when they
join a spanning tree. Each message includes the index i of
the tree and the coordinate idi(node) of the potential parent.
Starting the second phase is tricky in a distributed scenario
and will not be simultaneous for all nodes. Rather, we choose
a time limit τ that represents an upper limit on the time the
initialization should take. If a node n receives a message of
the form (i, idi(node)) from a neighbor node with only one
link of non-zero weight, n waits for time τ. If none of n’s
neighbors with bidirectional links to n indicate that they are
potential parents until the waiting period ends, n selects node
as its parent.
setCred: setCred reacts to a pair of nodes (u, v) that
want to change the value of their shared link to c. Algorithm 2
ﬁrst determines if the value change should lead to coordinate
changes. In total there are three situations that indicate a need
for a coordinate change:
1) New non-zero unidirectional link: One of the nodes is not
yet part of the tree and should hence choose the other as
their parent (Lines 8–12) to be able to participate in the
routing.
2) New non-zero bidirectional link: u and v share a bidi-
rectional non-zero link and (without loss of generality) u
has only a unidirectional link to its current parent. Then
u should change its parent to v if v has a bidirectional
link to its parent (Lines 13–21). In this manner, a bidi-
7
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
if a1 and !a2 then
reset = v
if a2 and !a1 then
reset = u
# case:remove link
if old > 0 and c == 0 then
if parenti(u) == v then
if parenti(v) == u then
reset = u
reset = v
# change coordinates
if reset != null then
reset = null # node whose coordinate should change
# case:add link
if old == 0 and c > 0 then
# If one node does not have a coordinate
if idi(v) is not set and idi(u) is set then
Algorithm 2 setCred
1: # Input: Graph G, u, v ∈ V , new value c
2: old = w(u, v) # Previous value of w(u, v)
3: # check if coordinate change necessary
4: for i = 1 to |L| do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
a1 =(cid:0)w(u, parenti(u)) == 0 or
w(parenti(u), u) == 0(cid:1)
a2 =(cid:0)w(v, parenti(v)) == 0 or
w(parenti(v), v) == 0(cid:1)
if idi(u) is not set and idi(v) is set then
# One node has unidirectional link to parent
if reset = null then
if w(u, v) > 0 and w(v, u) > 0 then
reset = u
reset = v
delete coordinates of reset and descendants
have nodes choose new parent
rectional connection replaces a unidirectional link in the
spanning tree and increases the likelihood of successfully
transferring funds.
3) Removed link: u is a child of v or v is a child of u
(Lines 24–27). The child node should select a new parent
to increase the number of non-zero links in the spanning
tree and the likelihood of transferring funds.
If one of u or v changes its parent, all descendants remove
their coordinates and inform their neighbors of the removal.
Afterwards, they all choose a new parent and corresponding
coordinate. In agreement with the initialization setRoutes,
nodes ﬁrst consider only neighbors to whom they have non-
zero links in both directions. However, if a node does not have
such links to any neighbor, it considers links in one direction.
If they have several suitable parents, they choose their parent
randomly from those candidates with the shortest coordinates,
as having short routes to the landmark reduces the lengths of
paths [30]. After choosing a new coordinate, nodes forward
the new coordinate and the tree index to all their neighbors.
We do not present the pseudocode, as it is very similar to
Algorithm 1.
The distributed variant of Algorithm 2 follows the same
principles but requires the exchange of messages for nodes
to communicate information. u and v exchange information
8
about the link to their parents. Each of them then individually
decides if they want to add or remove the other as a parent.
Starting from the node reset that aims to reset its coordinate,
all descendants inform their neighbors ﬁrst that they remove
their old coordinate for the tree i. Children of a node in turn
remove their own coordinate and send the respective messages.
In the second phase, nodes select their new coordinates and
inform their neighbors. As the two phases are likely to run
in parallel in the distributed setting, nodes have to ensure that
they do not choose a previous descendant as a parent before
the descendant chooses a new coordinate. However, the nature
of the coordinates makes it easy to prevent such cycles in the
tree by disallowing a node v from choosing a parent whose
coordinate contains v’s previous coordinate as a preﬁx.
routePay: routePay discovers a set of paths from the
sender to the receiver. It corresponds to the probe operation
in SilentWhispers. Algorithm 3 divides the process into three
steps:
ii)
splitting the total transaction value c randomly on |L| paths,
and iii) ﬁnding paths for all embeddings that can transmit the