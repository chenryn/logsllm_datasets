title:ALITHEIA: Towards Practical Verifiable Graph Processing
author:Yupeng Zhang and
Charalampos Papamanthou and
Jonathan Katz
ALITHEIA: Towards Practical Veriﬁable Graph Processing
Yupeng Zhang
ECE Dept. & UMIACS
University of Maryland
PI:EMAIL
Charalampos Papamanthou
ECE Dept. & UMIACS
University of Maryland
PI:EMAIL
Jonathan Katz
Computer Science Dept. & UMIACS
University of Maryland
PI:EMAIL
ABSTRACT
We consider a scenario in which a data owner outsources storage
of a large graph to an untrusted server; the server performs compu-
tations on this graph in response to queries from a client (whether
the data owner or others), and the goal is to ensure veriﬁability of
the returned results. Existing work on veriﬁable computation (VC)
would compile each graph computation to a circuit or a RAM pro-
gram and then use generic techniques to produce a cryptographic
proof of correctness for the result. Such an approach will incur
large overhead, especially in the proof-computation time.
In this work we address the above by designing, building, and
evaluating ALITHEIA, a nearly practical VC system tailored for
graph queries such as computing shortest paths, longest paths, and
maximum ﬂow. The underlying principle of ALITHEIA is to min-
imize the use of generic VC systems by leveraging various algo-
rithmic techniques speciﬁc for graphs. This leads to both theoret-
ical and practical improvements. Asymptotically, it improves the
complexity of proof computation by at least a logarithmic factor.
On the practical side, we show that ALITHEIA achieves signiﬁ-
cant performance improvements over current state-of-the-art (up to
a 108× improvement in proof-computation time, and a 99.9% re-
duction in server storage), while scaling to 200,000-node graphs.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]:
Security and Protection
Keywords
Veriﬁable Computation; Graph Processing; Cloud Computing
1.
INTRODUCTION
Graph algorithms are everywhere. For instance, navigation sys-
tems run the Dijkstra or Floyd-Warshall algorithms to compute
the shortest route between two locations, and various problems in
transportation networks can be modeled as maximum-ﬂow com-
putations. In the era of cloud computing, however, the owner of
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660354 .
the (data underlying the) graph may not be the same entity run-
ning computations over this graph. Speciﬁcally, a (trusted) data
owner with small local memory might outsource storage of a large
graph to a server, who will then answer queries about the graph
made by various clients. The goal is to ensure veriﬁability of the
returned results, thus protecting clients against bugs in the server’s
code, malicious behavior by the server, or server compromise. (The
naive solution of having the data owner authenticate the graph, and
then having the client download/verify the graph and compute the
result on its own, imposes unacceptable bandwidth, storage, and
computational costs on the client.)
Precisely this setting is addressed by early work on authenticated
data structures [34, 28, 5], as well as more recent work on the
broader problem of veriﬁable computation (VC) [18, 14, 9, 10, 19,
11, 33, 32, 30, 7, 12, 36]. Such schemes enable the server to pro-
vide a cryptographic proof of correctness of the returned result,
which can be veriﬁed by the client posing the query.
There are several parameters of interest when it comes to de-
signing VC protocols. Perhaps the main concerns are that the size
of the proof should be small (ideally, proportional to the size of the
result itself), and the veriﬁcation time for the client should be low.
(We stress, however, that in our setting we are mainly interested
in outsourcing storage rather than computation.) These is particu-
larly important when proof veriﬁcation might be done by resource-
constrained clients (e.g., smartphones). Other measures of interest
include the time for the server to compute the proof (especially im-
portant for latency), the storage required by both the server and the
clients, and the preprocessing time required by the data owner.
A VC protocol for graph algorithms can be derived in theory via
black-box use of existing general-purpose VC schemes [18, 14, 24,
9, 10, 19, 11], or one of the systems that have been built to apply
these techniques [33, 32, 30, 7, 12, 36]. Applying these general-
purpose protocols to graph algorithms, however, does not necessar-
ily yield practical protocols. (See Table 1.) This is partly just a
consequence of their generality, but is more speciﬁcally due to the
fact that most of these systems require the computation being per-
formed to be represented as a (boolean or arithmetic) circuit. For
graph computations, a circuit-based representation will not be op-
timal, and a RAM-based representation is preferable. Recent work
on RAM-based VC schemes by Braun et al. [12] and Ben-Sasson
et al. [7], however, are not quite practical yet—see Table 1.
Our contributions. To address the above problems we design,
build, and evaluate ALITHEIA, a system for nearly practical veriﬁ-
able graph processing. Currently, ALITHEIA handles shortest-path,
longest-path, and maximum-ﬂow queries over weighted directed
and undirected graphs (as applicable). The speciﬁc contributions
of ALITHEIA are as follows:
Table 1: Summary of our results, and comparison with existing approaches, for verifying shortest-path queries. For asymptotic results, we
consider a planar graph with n nodes and m edges, and let |p| denote the length of the shortest path. Experimental results refer to the (planar)
road network of the city of Rome (n = 3,353 nodes, m = 8,870 edges, |p| = 13), taken from the 9th DIMACS implementation challenge for
shortest paths [3]. Nodes in this graph correspond to intersections between roads, and edges correspond to road segments. Results marked
with ∗ are estimates (see Section 6), since we could only run [30, 12] on small graphs and the full implementation of [7] is not yet available.
PINOCCHIO [30]
(Circuit-Based VC)
Preprocessing Time O(nm)
Prover Time
Proof Size
Veriﬁcation Time
Preprocessing Time
Prover Time
Proof Size
Veriﬁcation Time
O(nm log m)
O(1)
O(|p|)
19,000 hours∗
7,600 hours∗
288 bytes
0.008 seconds∗
PANTRY [12]
(RAM-Based VC)
O(m log m)
O(m log2 m)
O(1)
O(|p|)
270 hours∗
550 hours∗
288 bytes
0.008 seconds∗
SNARKS FOR C [7] ALITHEIA
(RAM-Based VC)
O(m log m)
O(m log2 m)
O(1)
O(|p|)
52 hours∗
30 hours∗
288 bytes
0.049 seconds∗
(general graphs)
O(m)
O(m log m)
O(|p|)
O(|p|)
69 minutes
3.3 minutes
704 bytes
0.19 seconds
ALITHEIA
(planar graphs)
√
√
O(m
m log m)
m log2 m)
O(
O(log m + |p|)
O(log m + |p|)
4.1 minutes
13 seconds
3,872 bytes
0.592 seconds
1. On the theoretical side, ALITHEIA asymptotically reduces
the preprocessing and proof-computation time relative to the
best previous approaches. E.g., for shortest-path queries in a
graph with m edges, it saves a factor of O(log m) (see Sec-
tion 3). For planar graphs (ones that can be drawn in the
plane without edge crossings), ALITHEIA reduces the num-
ber of cryptographic operations needed for proof computa-
tion even more, by a factor of O(
√
m) (Section 4).
2. On the practical side, ALITHEIA achieves signiﬁcant per-
formance improvements, bringing veriﬁable computation on
graphs closer to practice (Section 5). Speciﬁcally, compared
to existing state-of-the-art it improves the running time of
the prover by over a factor of 108 (for graphs with 100,000
nodes), and the server storage by 99.9%. We validate such
performance savings on real-world graphs as well (e.g., the
numbers in Table 1 are from running ALITHEIA on the road
network of the city of Rome [3]). Finally, ALITHEIA is the
ﬁrst VC system that can scale up to 200,000-node graphs.
3. ALITHEIA supports dynamic updates (where edges can be
added to or removed from the original graph) in logarithmic
time (Section 3.4). Some existing RAM-based VC schemes
support such updates in theory (e.g., see [12]), but not in
practice for graphs of reasonable size.
Table 1 provides a detailed theoretical and practical compar-
ison of ALITHEIA with current state-of-the-art systems [30, 12,
7] for answering shortest-path queries on general graphs. Espe-
cially for planar graphs, ALITHEIA offers the best practical per-
formance among all presented schemes. Preprocessing time and
proof-computation time are much improved, at the expense of a
reasonable increase in the proof size and veriﬁcation time. We note
also that although the overall asymptotic complexity for prepro-
cessing planar graphs using ALITHEIA is larger than for general
graphs, the number of cryptographic operations needed in the pla-
nar case is also O(m), but with a much lower constant. Asymptot-
ically, for general graphs, although the proof size in ALITHEIA in-
creases from O(1) to O(|p|) (where p is the shortest path), the pro-
tocol’s asymptotic bandwidth remains the same (i.e., O(|p|)) since
the actual path p must be communicated to the client anyway.
Our techniques. We ﬁrst brieﬂy describe the approach used by
ALITHEIA for handling shortest-path queries in a general, non-
planar (un)directed graph G = (V, E); see Section 3 for further
details. Consider a request for the shortest path from some node
s to another node t. At a high level, what we want to do is to en-
code correct computation of the result as an NP statement whose
validity can then be veriﬁed using existing systems (e.g., [30, 12]).
The naive way to do this would be to certify correct execution of,
say, Dijkstra’s shortest-path algorithm on the given inputs; this ap-
proach, however, would be prohibitively slow. Instead, we rely on
a certifying algorithm for shortest paths [31]. This allows us to en-
code the correct result as a simple set of constraints (see Relation 1)
on the shortest paths from s to all nodes in the graph, which can be
computed by the server with no cryptographic work. The only cryp-
tographic work required is for the veriﬁcation of these constraints
using existing systems. We use similar techniques to design veriﬁ-
able protocols for longest-path and maximum-ﬂow queries.
Although the above technique signiﬁcantly reduces the practi-
cal overhead of existing solutions, it requires the use of a general-
purpose system (in our case, PINOCCHIO) on a relation of size
O(m), where m is the number of edges of the graph. Unfortu-
nately, as we show in our experiments, such an approach does not
scale for graphs that exceed 10,000 nodes. We address this problem
in Section 4 (and scale up to 200,000 nodes) by taking advantage
of the special structure of planar graphs, i.e., those that can be em-
bedded in the plane without any crossings. Planar graphs are inter-
esting in our context since they generally provide a good model for
vehicular and road networks used by navigation applications. We
derive a more efﬁcient protocol for shortest-path queries in planar
graphs by leveraging a data structure based on the celebrated planar
√
separator theorem [22]. This data structure answers shortest-path
n log n) time, and its main operation relies on per-
queries in O(
√
forming a MIN computation over the sum of two vectors of size
n). To verify the data structure’s operation, we cannot use
O(
√
common authenticated data-structure techniques (e.g., [34, 28, 5])
n) size, where n is the num-
since these would yield proofs of Ω(
ber of nodes in the graph. Instead, we achieve logarithmic-sized
proofs by using a general-purpose system only on the MIN rela-
tion. This approach, combined with an additively-homomorphic