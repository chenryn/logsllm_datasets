      atomic_dec (& c->busy);  
      goto probe_epilogue;  
    }  
    c->last_stmt = 0;  
    c->last_error = 0;  
    c->nesting = -1;  
    c->uregs = 0;  
    c->kregs = 0;  
    #if defined __ia64__  
    c->unwaddr = 0;  
    #endif  
    c->probe_point = sp->pp;  
    #ifdef STP_NEED_PROBE_NAME  
    c->probe_name = sp->pn;  
    #endif  
    c->probe_type = _STP_PROBE_HANDLER_KRETPROBE;  
    memset(&c->ips, 0, sizeof(c->ips));  
    c->probe_flags = 0;  
    #ifdef STAP_NEED_REGPARM  
    c->regparm = 0;  
    #endif  
    #if INTERRUPTIBLE  
    c->actionremaining = MAXACTION_INTERRUPTIBLE;  
    #else  
    c->actionremaining = MAXACTION;  
    #endif  
    c->kregs = regs;  
    c->ips.krp.pi = inst;  
    c->ips.krp.pi_longs = sdp->saved_longs;  
    {  
      unsigned long kprobes_ip = REG_IP(c->kregs);  
      if (entry)  
        SET_REG_IP(regs, (unsigned long) inst->rp->kp.addr);  
      else  
        SET_REG_IP(regs, (unsigned long)inst->ret_addr);  
      (sp->ph) (c);  
      SET_REG_IP(regs, kprobes_ip);  
    }  
    #if defined(STP_TIMING) || defined(STP_OVERLOAD)  
    {  
      cycles_t cycles_atend = get_cycles ();  
      int32_t cycles_elapsed = ((int32_t)cycles_atend > (int32_t)cycles_atstart)  
        ? ((int32_t)cycles_atend - (int32_t)cycles_atstart)  
        : (~(int32_t)0) - (int32_t)cycles_atstart + (int32_t)cycles_atend + 1;  
      #ifdef STP_TIMING  
      if (likely (stat)) _stp_stat_add(stat, cycles_elapsed);  
      #endif  
      #ifdef STP_OVERLOAD  
      {  
        cycles_t interval = (cycles_atend > c->cycles_base)  
          ? (cycles_atend - c->cycles_base)  
          : (STP_OVERLOAD_INTERVAL + 1);  
        c->cycles_sum += cycles_elapsed;  
        if (interval > STP_OVERLOAD_INTERVAL) {  
          if (c->cycles_sum > STP_OVERLOAD_THRESHOLD) {  
            _stp_error ("probe overhead exceeded threshold");  
            atomic_set (&session_state, STAP_SESSION_ERROR);  
            atomic_inc (&error_count);  
          }  
          c->cycles_base = cycles_atend;  
          c->cycles_sum = 0;  
        }  
      }  
      #endif  
    }  
    #endif  
    c->probe_point = 0;  
    #ifdef STP_NEED_PROBE_NAME  
    c->probe_name = 0;  
    #endif  
    c->probe_type = 0;  
    if (unlikely (c->last_error && c->last_error[0])) {  
      if (c->last_stmt != NULL)  
        _stp_softerror ("%s near %s", c->last_error, c->last_stmt);  
      else  
        _stp_softerror ("%s", c->last_error);  
      atomic_inc (& error_count);  
      if (atomic_read (& error_count) > MAXERRORS) {  
        atomic_set (& session_state, STAP_SESSION_ERROR);  
        _stp_exit ();  
      }  
    }  
    atomic_dec (&c->busy);  
  probe_epilogue:  
    if (unlikely (atomic_read (& skipped_count) > MAXSKIPPED)) {  
      if (unlikely (pseudo_atomic_cmpxchg(& session_state, STAP_SESSION_RUNNING, STAP_SESSION_ERROR) == STAP_SESSION_RUNNING))  
      _stp_error ("Skipped too many probes, check MAXSKIPPED or try again with stap -t for more details.");  
    }  
    #if INTERRUPTIBLE  
    preempt_enable_no_resched ();  
    #else  
    local_irq_restore (flags);  
    #endif  
    #endif // STP_ALIBI  
  }  
  return 0;  
}  
static int enter_kretprobe_probe (struct kretprobe_instance *inst, struct pt_regs *regs) {  
  return enter_kretprobe_common(inst, regs, 0);  
}  
static int enter_kretprobe_entry_probe (struct kretprobe_instance *inst, struct pt_regs *regs) {  
  return enter_kretprobe_common(inst, regs, 1);  
}  
static int systemtap_module_init (void) {  
  int rc = 0;  
  int cpu;  
  int i=0, j=0;  
  const char *probe_point = "";  
  {  
    const char* release = UTS_RELEASE;  
    #ifdef STAPCONF_GENERATED_COMPILE  
    const char* version = UTS_VERSION;  
    #endif  
    if (strcmp (release, "2.6.32-358.el6.x86_64")) {  
      _stp_error ("module release mismatch (%s vs %s)", release, "2.6.32-358.el6.x86_64");  
      rc = -EINVAL;  
    }  
    #ifdef STAPCONF_GENERATED_COMPILE  
    if (strcmp (utsname()->version, version)) {  
      _stp_error ("module version mismatch (%s vs %s), release %s", version, utsname()->version, release);  
      rc = -EINVAL;  
    }  
    #endif  
    if (_stp_module_check()) rc = -EINVAL;  
    if (_stp_privilege_credentials == 0) {  
      if (STP_PRIVILEGE_CONTAINS(STP_PRIVILEGE, STP_PR_STAPDEV) ||  
          STP_PRIVILEGE_CONTAINS(STP_PRIVILEGE, STP_PR_STAPUSR)) {  
        _stp_privilege_credentials = STP_PRIVILEGE;  
        #ifdef DEBUG_PRIVILEGE  
          _dbug("User's privilege credentials default to %s\n",  
                privilege_to_text(_stp_privilege_credentials));  
        #endif  
      }  
      else {  
        _stp_error ("Unable to verify that you have the required privilege credentials to run this module (%s required). You must use staprun version 1.7 or higher.",  
                    privilege_to_text(STP_PRIVILEGE));  
        rc = -EINVAL;  
      }  
    }  
    else {  
      #ifdef DEBUG_PRIVILEGE  
        _dbug("User's privilege credentials provided as %s\n",  
              privilege_to_text(_stp_privilege_credentials));  
      #endif  
      if (! STP_PRIVILEGE_CONTAINS(_stp_privilege_credentials, STP_PRIVILEGE)) {  
        _stp_error ("Your privilege credentials (%s) are insufficient to run this module (%s required).",  
                    privilege_to_text(_stp_privilege_credentials), privilege_to_text(STP_PRIVILEGE));  
        rc = -EINVAL;  
      }  
    }  
  }  
  if (rc) goto out;  
  #ifdef STAP_NEED_GETTIMEOFDAY  
  rc = _stp_init_time();  
  if (rc) {  
    _stp_error ("couldn't initialize gettimeofday");  
    goto out;  
  }  
  #endif  
  (void) probe_point;  
  (void) i;  
  (void) j;  
  atomic_set (&session_state, STAP_SESSION_STARTING);  
  for_each_possible_cpu(cpu) {  
    contexts[cpu] = _stp_kzalloc_gfp(sizeof(struct context), STP_ALLOC_SLEEP_FLAGS);  
    if (contexts[cpu] == NULL) {  
      _stp_error ("context (size %lu) allocation failed", (unsigned long) sizeof (struct context));  
      rc = -ENOMEM;  
      goto out;  
    }  
  }  
  #ifdef STP_TIMING  
  for (i = 0; i module, sdp->section, sdp->address);  
    if (relocated_addr == 0) continue;  
    probe_point = sdp->probe->pp;  
    if (sdp->return_p) {  
      kp->u.krp.kp.addr = (void *) relocated_addr;  
      if (sdp->maxactive_p) {  
        kp->u.krp.maxactive = sdp->maxactive_val;  
      } else {  
        kp->u.krp.maxactive = KRETACTIVE;  
      }  
      kp->u.krp.handler = &enter_kretprobe_probe;  
      #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)  
      if (sdp->entry_probe) {  
        kp->u.krp.entry_handler = &enter_kretprobe_entry_probe;  
        kp->u.krp.data_size = sdp->saved_longs * sizeof(int64_t) +   
                              sdp->saved_strings * MAXSTRINGLEN;  
      }  
      #endif  
      #ifdef __ia64__  
      kp->dummy.addr = kp->u.krp.kp.addr;  
      kp->dummy.pre_handler = NULL;  
      rc = register_kprobe (& kp->dummy);  
      if (rc == 0) {  
        rc = register_kretprobe (& kp->u.krp);  
        if (rc != 0)  
          unregister_kprobe (& kp->dummy);  
      }  
      #else  
      rc = register_kretprobe (& kp->u.krp);  
      #endif  
    } else {  
      kp->u.kp.addr = (void *) relocated_addr;  
      kp->u.kp.pre_handler = &enter_kprobe_probe;  
      #ifdef __ia64__  
      kp->dummy.addr = kp->u.kp.addr;  
      kp->dummy.pre_handler = NULL;  
      rc = register_kprobe (& kp->dummy);  
      if (rc == 0) {  
        rc = register_kprobe (& kp->u.kp);  
        if (rc != 0)  
          unregister_kprobe (& kp->dummy);  
      }  
      #else  
      rc = register_kprobe (& kp->u.kp);  
      #endif  
    }  
    if (rc) {  
      sdp->registered_p = 0;  
      if (!sdp->optional_p)  
        _stp_warn ("probe %s (address 0x%lx) registration error (rc %d)", probe_point, (unsigned long) relocated_addr, rc);  
      rc = 0;  
    }  
    else sdp->registered_p = 1;  
  }  
  if (rc) {  
    if (probe_point)  
      _stp_error ("probe %s registration error (rc %d)", probe_point, rc);  
    atomic_set (&session_state, STAP_SESSION_ERROR);  
    goto out;  
  }  
  if (atomic_read (&session_state) == STAP_SESSION_STARTING)  
    atomic_set (&session_state, STAP_SESSION_RUNNING);  
  return 0;  
out:  
  atomic_set (&session_state, STAP_SESSION_STOPPED);  
  #ifdef STAPCONF_SYNCHRONIZE_SCHED  
  synchronize_sched();  
  #endif  
  #ifdef STAP_NEED_GETTIMEOFDAY  
   _stp_kill_time();  
  #endif  
  for_each_possible_cpu(cpu) {  
    if (contexts[cpu] != NULL) {  
      _stp_kfree(contexts[cpu]);  
      contexts[cpu] = NULL;  
    }  
  }  
  return rc;  
}  
static void systemtap_module_refresh (void) {  
  int i=0, j=0;  
  (void) i;  
  (void) j;  
  for (i=0; imodule, sdp->section, sdp->address);  
    int rc;  
    if (sdp->registered_p == 0 && relocated_addr != 0) {  
      if (sdp->return_p) {  
        kp->u.krp.kp.addr = (void *) relocated_addr;  
        if (sdp->maxactive_p) {  
          kp->u.krp.maxactive = sdp->maxactive_val;  
        } else {  
          kp->u.krp.maxactive = KRETACTIVE;  
        }  
        kp->u.krp.handler = &enter_kretprobe_probe;  
        #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)  
        if (sdp->entry_probe) {  
          kp->u.krp.entry_handler = &enter_kretprobe_entry_probe;  
          kp->u.krp.data_size = sdp->saved_longs * sizeof(int64_t) +   
                                sdp->saved_strings * MAXSTRINGLEN;  
        }  
        #endif  
        #ifdef __ia64__  
        kp->dummy.addr = kp->u.krp.kp.addr;  
        kp->dummy.pre_handler = NULL;  
        rc = register_kprobe (& kp->dummy);  
        if (rc == 0) {  
          rc = register_kretprobe (& kp->u.krp);  
          if (rc != 0)  
            unregister_kprobe (& kp->dummy);  
        }  
        #else  
        rc = register_kretprobe (& kp->u.krp);  
        #endif  
      } else {  
        kp->u.kp.addr = (void *) relocated_addr;  
        kp->u.kp.pre_handler = &enter_kprobe_probe;  
        #ifdef __ia64__  
        kp->dummy.addr = kp->u.kp.addr;  