title:Static Detection of Packet Injection Vulnerabilities: A Case for
Identifying Attacker-controlled Implicit Information Leaks
author:Qi Alfred Chen and
Zhiyun Qian and
Yunhan Jack Jia and
Yuru Shao and
Zhuoqing Morley Mao
Static Detection of Packet Injection Vulnerabilities –
A Case for Identifying Attacker-controlled Implicit
Information Leaks
Qi Alfred Chen, Zhiyun Qian†, Yunhan Jack Jia, Yuru Shao, Z. Morley Mao
University of Michigan, †University of California, Riverside
PI:EMAIL, †PI:EMAIL, {jackjia, yurushao, zmao}@umich.edu
ABSTRACT
1.
INTRODUCTION
Off-path packet injection attacks are still serious threats to the In-
ternet and network security. In recent years, a number of studies
have discovered new variations of packet injection attacks, target-
ing critical protocols such as TCP. We argue that such recurring
problems need a systematic solution. In this paper, we design and
implement PacketGuardian, a precise static taint analysis tool that
comprehensively checks the packet handling logic of various net-
work protocol implementations. The analysis operates in two steps.
First, it identiﬁes the critical paths and constraints that lead to ac-
cepting an incoming packet. If paths with weak constraints exist,
a vulnerability may be revealed immediately. Otherwise, based on
“secret” protocol states in the constraints, a subsequent analysis is
performed to check whether such states can be leaked to an attacker.
In the second step, observing that all previously reported leaks
are through implicit ﬂows, our tool supports implicit ﬂow tainting,
which is a commonly excluded feature due to high volumes of false
alarms caused by it. To address this challenge, we propose the con-
cept of attacker-controlled implicit information leaks, and prioritize
our tool to detect them, which effectively reduces false alarms with-
out compromising tool effectiveness. We use PacketGuardian on 6
popular protocol implementations of TCP, SCTP, DCCP, and RTP,
and uncover new vulnerabilities in Linux kernel TCP as well as 2
out of 3 RTP implementations. We validate these vulnerabilities
and conﬁrm that they are indeed highly exploitable.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Informa-
tion ﬂow controls; C.2.5 [Computer-Communication Networks]:
Local and Wide-Area Networks—Internet (e.g., TCP/IP)
General Terms
Security, Program Analysis
Keywords
Network protocol security, Implicit information leakage, Static
analysis, Side channel detection
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, CO, USA.
c° 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813643.
The encryption coverage on today’s Internet is unfortunately still
rather poor: only 30% [46]. Thus, off-path packet injection attacks
remain a serious threat to network security. Recently a number
of such attacks and their variants have been reported including off-
path TCP packet injection [18,19,37,38] and DNS cache poisoning
attacks [34, 47]. These attacks jeopardize the integrity of network
communication, and lead to serious damage where personal data
from unsuspecting users can be leaked when visiting a web site.
Despite application-layer encryption support (e.g., SSL and TLS),
network connections are still vulnerable. For instance, for HTTPS
connections, the initial request sent by the browser may still be an
unencrypted HTTP request, and the server subsequently redirects
the client to the HTTPS site. As shown in a recent study [37], an
off-path attacker can inject a legitimate response to the very ﬁrst
HTTP request. Furthermore, such packet injection attacks can re-
sult in DoS, e.g., by injecting a reset (RST) packet with an inferred
TCP sequence number.
To combat such threats, the network stacks typically implement
stringent checks on various ﬁelds to verify if an incoming packet is
valid. In fact, a number of RFCs like RFC 5961 [39] are dedicated
to this purpose. However, two problems remain. First, the design
of an RFC may not be formally veriﬁed to be secure. Second, even
if the design is secure, the actual implementation may not always
conform to the design.
In fact, the implementation is generally
much more complex and difﬁcult to get right. For instance, it has
been shown that TCP implementations on Linux and FreeBSD are
signiﬁcantly weaker than what the RFC recommends regarding the
mitigation against off-path attacks [38]. This calls for a systematic
approach to verify protocol implementations.
In this work, we fulﬁll this very need by developing an effective
and scalable static program analysis tool, PacketGuardian, which
can systematically evaluate the robustness (i.e., the level of secu-
rity strength) of a network protocol implementation against off-path
packet injection attacks. To ensure effectiveness and accuracy, our
tool uses a precise context-, ﬂow-, and ﬁeld-sensitive taint analysis
with pointer analysis support. To handle the scalability challenge
caused by such high sensitivity, we choose a data ﬂow analysis
of summary-based approach, which is known to be more scalable
compared to other frameworks [43], and is demonstrated to scale
to very large programs like the Linux kernel [52].
At a high level, the tool operates by performing analysis in two
steps: (1) Find all paths leading to the program execution point
of accepting an incoming packet. This helps identify the critical
checks that a protocol implementation relies on to prevent packet
injection, and may directly reveal a packet injection vulnerability
if any check is weak. (2) Motivated by the observation that strong
checks typically rely on certain hard-to-guess or “secret” commu-
388nication protocol state, e.g., TCP sequence numbers, or RTP source
IDs, we perform a subsequent analysis to check whether such secret
states can be leaked to an attacker through side channels.
In network protocol implementations, these “secret” protocol
states are unlikely to be leaked directly through explicit ﬂows,
and all previously reported leakage has been through implicit
ﬂows [18, 37, 38]. Therefore, PacketGuardian supports implicit
ﬂow tainting, which is known to be of much less value compared
to explicit ﬂow tracking (implicit ﬂow usually leaks at most 1 bit
of information) and at the same time cause large numbers of false
positives [28]. It is thus a commonly excluded feature in nearly
all taint analysis tools [4, 17, 21, 25]. To address the false posi-
tive challenge without compromising tool effectiveness, we lever-
age a key insight that the previously-discovered practical leaks are
all attacker-controlled implicit information leaks, meaning that an
attacker can inﬂuence which bit to leak. By prioritizing this special
type of leak, we effectively reduce the false positive number and
make the tool more useful for ﬁnding practical vulnerabilities.
Our analysis requires access to source code, which is a realis-
tic assumption for many key network protocols. The tool we have
developed is fully functional and is able to analyze arbitrary por-
tions of the Linux kernel source code. By applying our tool to the
Linux kernel TCP, SCTP, DCCP, and variants of open source RTP
protocol implementations, we are able to identify a set of new vul-
nerabilities not previously reported. For example, for the 3 RTP
implementations, two can be compromised by injecting less than
51 packets. For the Linux kernel TCP implementation, our tool
identiﬁes 17 high-entropy protocol state leakage, with 11 of them
successfully validated in a realistic test bed. This illustrates that
the Linux kernel TCP stack is still vulnerable even after the re-
cent patches for the previous known leakage [15, 39], indicating
the complex nature of the problem.
The contributions of this paper are as follows:
• We formulate the problem to systematically analyze the se-
curity properties of network protocol implementations against off-
path packet injection attacks, and develop an effective and scalable
static program analysis tool to address it using a precise context-,
ﬂow-, and ﬁeld-sensitive taint analysis with pointer analysis.
• To enable the detection of practical information leaks due
to implicit ﬂows while ensuring low false positives, we propose
the concept of attacker-controlled implicit information leaks and
prioritize our tool to detect them. To the best of our knowledge,
we are the ﬁrst to design a taint analysis tool for detecting attacker-
controlled implicit information leaks.
• We implement and apply our tool on 6 real implementations
for 4 network protocols. From the result, we are able to discover
new and realistic vulnerabilities conﬁrmed by proof-of-concept at-
tacks for Linux kernel TCP and 2 out of 3 RTP implementations.
2. ATTACK THREAT MODEL
Fig. 1 depicts the threat model for the off-path packet injection
attack considered in this paper. As shown, an existing communica-
tion channel (e.g., a TCP connection, a UDP session, or RTP ses-
sion) is established between Alice and Bob. The attacker’s goal is
to inject a packet into the channel targeting Bob, pretending to be a
packet from Alice. The attack goal can be to inject payload, e.g., to
launch attack such as phishing, or to trigger the termination of the
channel, resulting in denial-of-service (DoS). The attacker in this
threat model is off-path, i.e., much weaker and more realistic than
a man-in-the-middle attacker. To ensure channel integrity, Alice
and Bob usually share several secret protocol states, denoted as s in
the ﬁgure, and include it in the packet. These states are unknown
to the off-path attacker and should be hard to guess.
To incorporate recently-discovered packet injection vulnerabil-
ities [18, 19, 37, 38], our threat model also optionally considers a
collaborative attacker sharing the same system as Bob. This collab-
orative attacker can be an unprivileged malware program [37, 38],
or a script in the browser [18, 19]. This collaborative attacker is
tasked to provide feedback about any packet injection attempt of
the off-path attacker, facilitating the inference of the secret proto-
col state for a successful injection.
3.
ILLUSTRATIVE EXAMPLE
3.1 Packet Injection Attack for TCP
To illustrate how static analysis can help detect packet
in-
jection attacks for TCP, Fig. 2 shows a signiﬁcantly simpliﬁed
implementation example for handling an incoming TCP packet,
which is the entry for an injection packet from an off-path at-
tacker. This implementation is mostly based on Linux kernel
3.15, from which we only include the important logic, i.e., se-
quence number and acknowledgment number checks. In this ﬁgure,
tcp_rcv_established() is the main entry function, param-
eter tp is the socket status maintained by the system, and param-
eter skb is the data structure for the incoming packet. Function
accept_payload() copies the packet data into the application
layer, indicating the acceptance of the incoming packet for this TCP
connection, i.e., a successful injection.
exist
injection,
to prevent
To evaluate the robustness of this implementation against
the key question is what strong
off-path packet
an off-path injected packet
checks
from reaching accept_payload().
As we can see in
tcp_rcv_established(), 3 checks on line 2, 3, and 4 exist.
The check on line 2 requires the incoming packet to have either
ACK or RST bit set, which is easy to bypass by an attacker. The
checks on line 3 and 4 call into tcp_validate_incoming()
and tcp_ack(), and can be passed only if the former re-
turns true, and the later returns a non-negative value.
In
tcp_validate_incoming(), to return true, the seq ﬁeld
of the incoming packet needs to fall into the receive window
[tp->rcv_nxt, tp->rcv_nxt + tp->win1], and the size
of this window is usually between 214 to 220. tp->rcv_nxt
is a protocol state unknown to an off-path attacker,
thus it
takes up to 218 guesses to pass the check.
In addition, for
tcp_ack() to return a non-negative value, ack_seq needs
to fall into [tp->snd_una - tp->win2, tp->snd_nxt].
Like rcv_nxt, snd_una and snd_nxt are also protocol states
unknown to the attacker, making this check also hard to pass.
Combined with the check in tcp_validate_incoming(),
it takes up to 236 = 68, 719, 476, 736 guesses for a single packet
to be accepted, making it practically unexploitable. Therefore,
these are important checks to prevent off-path attackers.
In this
paper, we use the number of packets needed for one injection as
the metric for evaluating off-path packet injection robustness of a
protocol implementation, denoted by Npkt.
We note that the robustness strongly depends on the implementa-
tion details. As shown in the bottom-left rectangle of Fig. 2, before
Linux 3.7, the ACK bit check was much weaker. In this case, off-
path attacker can simply set the ACK bit to 0 to avoid the checks
in tcp_ack(), resulting in a large reduction in Npkt from 236
to 218. This turns out to be a missing implementation of a check
required by the protocol speciﬁcation [15]. Thus, even for a well-
designed protocol, the corresponding implementation of it may not
be robust against off-path packet injection attacks.
If strong checks do exist, which usually depend on secret
protocol states unknown to the attacker, a further question is
389Bob
B,s
Collaborative
attacker
(optional)
Alice
A,s
A,?
Off-path
attacker
1: void tcp_rcv_established(tcp_sock* tp,
    sk_buff* skb) {
2:
3:
4:
5: accept_payload();
6: }
If (!skb->ack && !skb->rst) return;
If (!tcp_validate_incoming(tp, skb)) return;
If (tcp_ack(tp, skb) ack && tcp_ack(tp, skb) seq >= tp->rcv_nxt ) && (skb->seq rcv_nxt + tp->win1)) {
3:     tcp_send_dupack(tp, skb);
4:     return false;
5:   }
6:   return true;
7: }
1: void tcp_send_dupack(tcp_sock* tp, sk_buff* skb) {
2:   If (skb->seq rcv_nxt)
3:      tp->net_statistics[DelayedACKLost]++;
4: }
1: bool tcp_ack(tcp_sock* tp, sk_buff* skb) {
2:   If (skb->ack_seq snd_una) {
3:     if (skb->ack_seq snd_una - tp->win2) return -1;
4:     return 0;
5:   }
6:   If (skb->ack_seq > tp->snd_nxt) return -1;
7:   return 0;
8: }
Figure 1: Packet injection attack
threat model in this paper.
Figure 2: An illustrative code example of a simpliﬁed implementation for handling an incoming TCP
packet in Linux kernel 3.15.
whether with the help of a collaborative attacker, these pro-
tocol states can be leaked. This is of concern since previ-
ous work [18, 38] has shown that rcv_nxt and snd_nxt can
have leakage through storage channels such as proc ﬁles. The
threat demonstrated by Qian et al. [38] is especially realistic as
rcv_nxt and snd_nxt can be inferred under only a second.
The upper-right rectangle in Fig. 2 illustrates this reported leakage
for rcv_nxt. Since it is very unlikely to pass the check on line
1 in tcp_validate_incoming(), the attack packet reaches
tcp_send_dupack(), and if seq set by the attacker is smaller
than rcv_nxt, it changes a counter DelayedACKLost in proc ﬁle,
otherwise not. If we inspect this counter closely, each comparison
leaks 1 bit of information, and thus at most 32 guesses/packets are
needed to infer the exact value of rcv_nxt. Note that at the time
of Qian et al. [38], the check in tcp_ack() is easy to bypass.