modification of attested memory is factored into the attestation
result. Hence, it incurs no extra runtime cycles or additional RAM
allocation, on top of that of VRASED architecture. In fact, as we
discuss next, in Section 8, Attest runtime can be reduced to the
time to attest only LMT. The runtime reduction is presented in
Figure 8. This represents a reduction of ≈ 10 times compared, e.g.,
to the number of cycles to attest an AR of size 4KBytes. The runtime
savings increase linearly with the size of AR.
Memory Overhead. RAT AA requires 128-bit of additional storage:
64 bits for RTC and 64 bits for LMT . RTC is implemented using a 64-
bit memory cell incremented at every clock cycle. This guarantees
that RTC does not wrap around during Prv lifetime since it would
take more than 70, 000 years for that to happen on MSP430 running
at 8MHz and incrementing RTC at every cycle. In RAT AA, LMT is
implemented as a 64-bit memory storage and updates its content
with RTC value whenever setLMT bit is on. For RAT AB, the memory
overhead increases to a total of 512 bits. 256 bits of memory are
required by the implementation of VRASED authentication module,
while another 256 bits are used to implement LMT that updates its
(a) Additional LUTs
(b) Additional Registers
Figure 7: Hardware overhead. Comparison between RAT A
and techniques based on self-measurements.
Figure 8: Comparison of LMT attestation time Case-1) with
regular attestation of AR (Case-2), as a function of |AR|. |LMT |
is 32 Bytes. Results on the MSP430 MCU running at 8MHz.
content with Chal when applicable (as described in Section 6). This
small reserved memory corresponds to 0.1% of MSP430 memory
address space (64KBytes in total).
Verification resources. We verify RAT A on an Ubuntu 18.04 ma-
chine running at 3.40GHz. Results are shown in Table 2. RAT AA
adds 127 lines of verified Verilog code on top of VRASED. These are
needed to enforce 2 invariants in Equations 11 and 12. RAT AB in-
curs 182 additional lines of verified Verilog code, needed to enforce
the 3 invariants in Equations 15, 16, and 17. Besides that, RAT A
verification requires checking existing VRASED invariants. Overall
verification process takes less than one second and consumes at
most 26MB of memory.
Comparison. We compare RAT A hardware overhead with that of
two recent self-measurement RA techniques: SeED [26] and ERAS-
MUS [12]. Even though, as discussed in Section 4.3, these techniques
do not achieve TOCTOU-Security (per Definition 4.1), we believe
that they are the most closely related approaches to RAT A. SeED
extends a 32-bit Intel architecture, which is higher-end than our
target devices, i.e., a 16-bit TI MSP430. Whereas, ERASMUS was
implemented on MSP430. Figure 7 compares RAT A to SeED and
ERASMUS in terms of numbers of additional LUTs and registers.
RAT AA require fewer LUTs, compared to both SeED and ERASMUS.
Whereas, RAT AB necessitates more registers, compared to ERAS-
MUS, it uses less LUTs than both self-measurements techniques. In
summary, both RAT A-s incur low overhead: < 5% increase for both
LUTs and registers.
RATAaRATAbSeEDERASMUSNumber of Additional Look−Up Tables0100200300400RATAaRATAbSeEDERASMUSNumber of Additional Registers05010015020012345678Attested Memory Region (AR) Size (in KB)100200300400500600700800Run-time (in ms)Regular AR AttestationLMT Attestation (RATA)Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2930SERVICES
8 USING RAT A TO ENHANCE RA & RELATED
We now discuss how RAT A can make RA and related services
simpler and more efficient.
8.1 Constant-Time RA
One notable and beneficial feature of RAT A is that, most of the
time, RA no longer needs to be computed over the entire AR, which
significantly reduces RA execution time on Prv.
If Vrf already knows AR contents from a previous attestation
result, it suffices to show that AR was not changed since then. This
can be done by attesting LMT by itself, instead of AR in its entirety,
resulting in substantial reduction of computation time from linear
in the size of AR to constant: |LMT |, i.e., 32 bytes. As such, RA is
performed differently, in two possible cases:
– Case-1: if no modification to AR happened since the last attesta-
tion (denoted by tatt ), call Attest on LMT region only. Verify checks
for H ≡ HMAC(KDF(K, Chal), LMT). Vrf then learns whether AR
was modified since the previous measurement, solely based on LMT .
By checking that LMT corresponds to t0 < tatt , this result confirms
that AR remained the same in the interim. Therefore, measuring
AR again is unnecessary and doing so would be redundant.
– Case-2: If AR was modified since the last attestation, call Attest
covering entire AR. Verify is computed normally as described in
Constructions 1 or 2, depending on the implementation, i.e., RAT AA
or RAT AB.
Remark 5: Note that PrvRA functionality can easily detect whether
AR was modified (in order to decide between attesting with Case-1
or Case-2) by checking the value of LMT , which is readable (though
not writable) in software.
Most of the time, Prv is expected to be in a benign state (i.e., no
malware), especially if Adv knows that its presence is guaranteed
to be detectable. In such times, size of attested memory can be
reduced from several KBytes (e.g., when AR is the entire program
memory on a low-end Prv) to a mere 32 Bytes (LMT size), Figure 8
depicts an empirical result on the MSP430 MCU showing how this
optimization can significantly reduce RA runtime overhead.
In the rest of this section, we discuss some implications of this
optimization, along with security improvements offered by RAT A,
to different branches of RA and related security services.
8.2 Atomicity & Real-Time Settings
Security of hybrid RA architectures generally depends on tempo-
ral consistency of attested memory. Simply put, temporal consis-
tency means “no modifications to AR during RA computation”.
Lack thereof allows self-relocating malware to move itself within
Prv memory during attestation, in order to avoid detection, e.g.,
if malware interrupts attestation execution, relocates itself to the
part of AR that has already been covered by the integrity-ensuring
function (HMAC in our case), and restarts attestation.
In higher-end devices, memory locking can be used to prevent
modifications until the end of attestation, as discussed in [22]. How-
ever, in low-end devices, where applications run on bare-metal
and there is no architectural support for memory locking, tempo-
ral consistency is attained by enforcing that attestation software
(SW-Att) runs atomically: once it starts, it can not be interrupted
by any software running on Prv, thus preventing malware from
interrupting RA and relocating itself. While effective for security
purposes, this requirement conflicts with real-time requirements if
Prv serves a safety-critical and time-sensitive function.
Some prior remediation techniques proposed to enable inter-
rupts while maintaining temporal consistency, with high probabil-
ity. SMARM [37] is one such approach. (Others similar techniques
are discussed in [38]). SMARM divides attested memory (AR) into
a set of blocks which are attested in a randomized order. Attesta-
tion of one block remains atomic. However, interrupts are allowed
between attestation of two blocks. Assuming that malware can not
guess the index of the next block to be attested, even if interrupts
are allowed, malware only has a certain probability of avoiding
detection. If the entire attestation procedure is repeated multiple
times, this probability can be made arbitrarily small.
We note that, given the RAT A optimization discussed in Sec-
tion 8.1, attestation can be computed faster. In particular, since
most Pseudo Random Function (PRF) implementations use block
sizes of at least 32 bytes, the atomic attestation of one block in a
SMARM-type strategy can not be faster than the attestation on
LMT in RAT A (|LMT | = 32 Bytes). In addition, attestation of LMT
provides information about the content of AR in its entirety, with no
probability of evasion. We believe this makes RAT A more friendly
to safety-critical operations than existing approaches.
Device-to-Device Malware Relocation
In such settings, we envision that AR would be attested in its en-
tirety at system boot time (Case-2 in Section 8.1), while subsequent
RA would be computed on LMT only (Case-1 in Section 8.1). We
note that, if AR is eventually modified, Prv would need to fall back
to Case-2 for the next RA computation, which takes time to run
atomically. However, after an unauthorized modification to Prv
memory, it is unclear why one would still want to offer real-time
guarantees to compromised software.
8.3 Collective RA Protocols and
Collective RA protocols (CRA) (aka swarm attestation) [13, 39–44]
are a set of techniques that attest a large number of devices that
operate together as a part of a larger system. CRA schemes typically
assume hybrid RA architectures on individual devices and look into
how to attest many devices efficiently. One security problem that
is typically out of scope on single-device RA and becomes relevant
in CRA settings is caused by migratory malware. This is an analog
of intra-device self-relocating malware (discussed in Section 8.2)
that appears in collective settings. Specifically, instead of moving
around inside the memory of the same device, it migrates from
device to device to avoid detection.
To guarantee detection of migratory malware, CRA result must
convince Vrf that all devices were in a safe state within the same
time window, implying that malware had no destination device
to migrate and avoid detection. Consequently, if a single-device
attestation result conveys a safe state only at some point in between
the execution of Request and Verify algorithms, it is nearly impos-
sible (especially, in the presence of network delays) to conclude
that migratory malware is not present in the swarm. Although this
problem is discussed in the CRA literature existing approaches ei-
ther place it outside their adversarial model [13, 39, 40, 43], or make
a strong assumption about clock synchronization among all devices
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2931in the swarm [26, 41, 42, 44], so that all devices can be scheduled
to run Attest at the same time.
Construction 3 (CRA-RAT A). Let S = {Prv1, ..., Prvn } de-
note a swarm of n devices individually equipped with RAT AB hybrid RA fa-
cilities. Let LMTi be the value of LMT in Prvi . Also, Verify(Prvi) denotes the
verification algorithm of Construction 2 for Prvi . Consider a protocol in which:
(1) Vrf executes RAT AB protocol, as defined in Construction 2 with each
Prvi in parallel. Let t(Reqi) denote the time when Vrf issued the
request to Prvi .
(2) Vrf collects all responses and computes Verify(Prvi) for all Prvi ∈ S.
It then uses the values of LMTi to learn “since when” Prvi has been in
a valid state. We denote this time as t(LMTi).
We claim that, by addressing the TOCTOU problem in the single-
device setting, RAT AB can be utilized to construct the first CRA
protocol secure against migratory malware without relying on
synchronization of the entire swarm. To see why this is the case,
consider Construction 3. In this construction, TOCTOU-Security on
individual devices allows Vrf to conclude that each Prv was in a
valid state within a fixed time interval. Therefore, by checking the
overlap in the valid interval of all Prv-s, Vrf can learn the time
window in which the entire swarm was safe as a whole, or detect
migratory malware when such time window does not exist. Theo-
rem 8.1 states the concrete guarantee offered by Construction 3.
In Construction 3, if for all Prvi ∈ S, Verify(Prvi)
in step 2 succeeds for some t(LMTi), then it must be the case that entire
S was in a valid state in the time window defined by the interval:
Theorem 8.1.
(max[t(LMT1), ..., t(LMTn)] , min[t(Req1), ..., t(Reqn)])
(18)
assuming equation 18 constitutes a valid interval.
Note: (a, b) is a valid interval if a < b.
Proof. (Sketch) It follows directly from the observations that:
– Given RA-Security, for each Prvi ∈ S, a valid response can not
be produced before the time when Prvi receives Chal, which is
strictly greater than t(Reqi).
– Given TOCTOU-Security, for each Prvi ∈ S with Verify(Prvi) = 1,
its memory could not have been changed between t(LMTi) and the
first call to Attest after t(Reqi).
□
8.4 Runtime Attestation
Runtime attestation focuses on detection of runtime/data-memory
attacks, providing authenticated information about software execu-
tion on Prv. While it seems unrelated to detection of retrospective
program memory modifications, we argue that RAT A can also offer
improvement to runtime attestation techniques.
Proofs of execution (PoX) for embedded systems were recently
explored in [6] (APEX). A PoX proves that a given operation on
Prv was performed through the execution of the expected code
and to verifies that outputs were indeed produced by this execution.
Control Flow Attestation (CFA) introduced in [3] (C-FLAT) allows
Vrf to also verify whether software that executed on Prv took a
specific (or a set of) valid control path(s), thus enabling detection
of code-reuse attacks.
We note that regular (or static) RA is a common stepping stone
in these functionalities. In C-FLAT, OAT [45], and Tiny-CFA [4],
the executable must be instrumented with specific instructions to
enable CFA and RA is used to verify that such instructions were
not removed or modified. Besides, even executions with the same
control-flow may differ in terms of behavior or outputs if their
instructions differ. Similarly, in APEX, a proof of execution to Vrf
is obtained via attestation of execution metadata. However, without
attesting the corresponding executable (in program memory), such
a proof would have no meaning other than: “some code executed
successfully”.
In many applications, the same executable is expected to remain
in memory for long periods of time, while its proper execution
(or control-flow) must be verified repeatedly, per safety-critical
embedded operation [45]. RAT A optimization discussed in 8.1 can
minimize the overhead of such successive runtime attestations.
To illustrate this concept we combined RAT A with APEX and
Tiny-CFA, which is implemented atop APEX. In APEX, all runtime
overhead vis-a-vis cost of executing the same software without
proving its successful execution to Vrf is caused by the cost of static
RA. Since APEX is implemented atop VRASED, we implemented
a RAT A-compliant version of APEX without changing neither the
internal behavior of RAT A hardware modules nor APEX hardware
module itself. As such, this approach substantially reduced PoX
and CFA computational costs (these savings are consistent with
Figure 8), while requiring the same additional hardware cost as
reported in Table 2.
9 RELATED WORK
– Remote Attestation (RA): RA techniques generally fall into
three categories: hardware-based, software-based and hybrid.
Hardware-based techniques [11, 21, 46, 47] either perform RA using
a dedicated autonomous hardware component (e.g., a TPM [11]),
or require substantial changes to the underlying instruction set
architecture in order to support execution of trusted software (e.g.,
SGX [48]). Such changes are too expensive for cost-sensitive low-
end embedded devices. On the other end of the spectrum, software-
based techniques [49–51] require no hardware security features;
they perform RA using a custom checksum function implemented