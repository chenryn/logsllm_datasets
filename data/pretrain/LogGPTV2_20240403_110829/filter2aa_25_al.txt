13.1.1 测试原理和方法
在短信、邮件调用业务或生成业务数据环节中，如短信验证码、邮件验证码、订单生
成、评论提交等，对业务环节进行调用（重放）测试。如果业务经过调用（重放）后多次
生成有效的业务或数据结果，可判断为存在接口调用（重放）问题。
13.1.2 测试过程
如图13-1所示，在进行接口调用重放测试时，攻击者与普通用户的区别在于他会通过
工具（如Burp  Suite）抓取订单请求，然后在短时间内通过Burp  Suite工具的Repeater对请
求（如订单请求）进行多次重放，服务器则会根据请求在短时间内执行多个有效操作（如
生成订单）。
测试过程以某购买机票系统为例。
步骤一：如图13-2所示，在购买机票“提交订单”环节抓取数据包。
图13-1 接口调用重放测试流程图
图13-2 提交订单
步骤二：如图13-3所示，使用Burp Suite工具对生成订单的数据包进行重放测试。
步骤三：如图13-4所示，查看返回结果，订单在1分钟内重复生成。
图13-3 Burp Suite抓取提交订单的请求
图13-4 一分钟内生成重复订单
13.1.3 修复建议
（1）对生成订单环节采用验证码机制，防止生成数据业务被恶意调用。
（2）每一个订单使用唯一的Token，订单提交一次后，Token失效。
13.2 接口调用遍历测试
13.2.1 测试原理和方法
Web  接口一般将常见的一些功能需求进行封装，通过传入不同的参数来获取数据或
者执行相应的功能，其中一个最常见的场景就是通过接口传入id参数，返回对应id的一些
信息。在安全测试中，我们可以使用Burp 
Suite作为HTTP代理，记录所有请求和响应信
息，通过Burp  Suite以登录后的状态对整站进行爬取，再使用过滤功能找到传入id参数的
HTTP请求，然后通过Intruder对id参数进行遍历，看是否返回不同的响应信息。如果不同
的id值对应不同用户的信息，则说明存在漏洞。
13.2.2 测试过程
如图13-6所示，攻击者在测试前，使用Brup  Suite的爬虫功能对网站进行爬取，然后
筛选出包含用户标识参数的请求（如id、uid），对筛选后的每一个请求进行分析，判断
其是否包含敏感信息。如果包含敏感信息，则通过Brup  Suite的Intruder设置用户标识参数
为变量来进行遍历，如果返回他人信息，则漏洞存在。
图13-5 接口调用遍历测试流程图
步骤一：如图13-6所示，使用Burp  Suite的爬虫功能，从重点关注的目录（一般为网
站根目录）开始爬取，在  HTTP  history  选项卡中选中要开始爬取的项，单击鼠标右键，
选择“Spider from here”，爬取登录后的网站链接。
图13-6 使用Burp Suite爬取网站根目录
如图13-7所示，爬取的结果会在Target→Site map中显示，在爬取完毕后，再使用Burp Suite的过滤功能筛选出带有uid参数的链接，没有包含uid字符串的HTTP请求会被隐藏起
来，不会在HTTP history中显示。
图13-7 过滤出带有uid的请求
如图13-8所示，在请求中找到uid参数出现的位置。
图13-8 定位uid参数的出现位置
步骤二：如图13-9所示，查看对应的HTTP请求的响应包中是否带有想要的信息。由
HTTP 
请求的参数我们可以猜测到这个请求的功能，如 
method 
参数值为
video.getUserVideoRecordList，作用是获取对应  uid  的视频播放的历史记录，由响应内容
可以确定。
图13-9 查看对应的请求和响应
HTTP响应中包含一些敏感信息，如观看视频时的ip  地址、视频id、视频的标题等。
如图13-9所示，第一个title的值为All  Polished&＃039；&quot；&lt；\/img&gt；，在浏览
器的console终端通过document.write函数解码输出后，得到All  Polished'"</img，如图13-10
所示。
如图13-11所示，将title的值和视频历史播放记录进行比较，可以发现完全一致。
图13-10 解码响应中的title值
图13-11 与历史播放记录进行比较
步骤三：如图13-12所示，将HTTP请求发送到Intruder，设置后四位数字为变量，进
行遍历测试。
图13-12 发送到Intruder
如图13-13所示，我们设置后四位数字为变量。
图13-13 设置变量
如图13-14所示，设置Payload为0000～9999的数字。
图13-14 设置payload
设置完Payload后，单击“Start attack”按钮即可开始遍历测试。
步骤四：分析 Intruder 的测试结果，不存在对应的 uid 时，服务器会返回 code为-201
的响应；存在时，返回的响应会包含"ip"（带双引号）这个字符串，以此来过滤出成功的
请求，如图13-15所示。
图13-15 对Interder结果进行过滤
如图13-16所示，可以看到过滤后的请求，均是有播放记录的请求，确认存在接口调
用遍历测试漏洞。
图13-16 确认漏洞
13.2.3 修复建议
在Session中存储当前用户的凭证或者id，只有传入凭证或者id参数值与Session中的一
致才返回数据内容。
13.3 接口调用参数篡改测试
13.3.1 测试原理和方法
在短信、邮件调用业务环节中，例如短信验证码、邮件验证码。修改对应请求中手机
号或邮箱地址参数值提交后，如果修改后的手机号或邮箱收到系统发送的信息，则表示接
口数据调用参数可篡改。
13.3.2 测试过程
如图13-17所示，攻击者拥有账号B，用户拥有账号A。攻击者对账号A进行密码找回
操作，服务器给账号  A  的邮箱或者手机发送密码重置信息，攻击者进入验证码验证环
节，此时攻击者单击“重新发送验证码”并拦截重新发送这个请求，将请求中的接收验证码
用户的邮箱或者手机修改为自己的。如果接收到密码重置信息，则存在漏洞。
图13-17 接口调用参数篡改测试流程图
测试过程以某手机App系统为例。
步骤一：如图13-18所示，在短信验证码页面单击“重新发送”同时抓取数据包。
图13-18 发送验证码并使用Burp Suite抓包
步骤二：如图13-19所示，在截取数据中将param.telno参数（指定发送手机号码）修
改为其他手机号码。
图13-19 Burp Suite修改参数值
步骤三：如图13-20所示，修改后被指定的手机号收到相应验证码短信。
图13-20 确认漏洞
13.3.3 修复建议
（1）会话Session中存储重要的凭证，在忘记密码、重新发送验证码等业务中，从
Session获取用户凭证而不是从客户请求的参数中获取。
（2）从客户端处获取手机号、邮箱等账号信息，要与  Session  中的凭证进行对比，
验证通过后才允许进行业务操作。
13.4 接口未授权访问/调用测试
13.4.1 测试原理和方法
在正常的业务中，敏感功能的接口需要对访问者的身份进行验证，验证后才允许调用
接口进行操作。如果敏感功能接口没有身份校验，那么攻击者无须登录或者验证即可调用
接口进行操作。在安全测试中，我们可以使用Burp  Suite作为HTTP代理，在登录状态下记
录所有请求和响应信息，筛选出敏感功能、返回敏感数据的请求。在未登录的情况下，使
用浏览器访问对应敏感功能的请求，如果返回的数据与登录状态后的一致，则存在漏洞或
缺陷。
13.4.2 测试过程
如图13-21所示，攻击者在测试前，使用Brup  Suite的爬虫功能对网站进行爬取，通过
MIME 
Type筛选出与接口相关的请求，对筛选后的每一个请求进行判断是否包含敏感信
息。如果包含敏感信息，则复制请求URL到未进行登录的浏览器进行访问，如果访问后返
回之前的敏感信息，则存在漏洞。
图13-21 接口未授权访问测试流程图
步骤一：登录后使用Burp 
Suite的爬虫功能，从重点关注的目录（一般为网站根目
录）开始爬取，在HTTP 
history选项卡中选中要开始爬取的项，右键选择“Spider 
from
here”。爬取的结果会在Target→Site 
map中显示。如图13-20所示，在爬取完毕后，使用
Burp  Suite的MIME  type过滤功能，筛选出接口相关的HTTP请求，重点关注json、script、
xml、text MIME type等。
图13-22 对MIME type进行过滤
步骤二：如图12-23所示，对接口相关的请求进行查看，查看响应中是否包含想要的
敏感信息，如个人电话、IP地址、兴趣爱好、网站历史记录、身份证、手机号、住址等信
息。
图13-23 查找包含敏感信息的HTTP请求
通过查看响应包的具体信息，可以发现返回页面包含敏感信息，如ip地址、视频的历
史播放等信息，通过这些信息可以了解其位置及关注点。
步骤三：如图13-24所示，将完整的请求URL复制到未登录的浏览器中，查看能否访
问对应URL的内容。如果能够返回敏感信息，则说明漏洞存在；如果需要登录验证后才能
访问，则不存在该漏洞。
图13-24 未登录状态下访问URL
在未进行登录的浏览器上，能够直接返回对应URL的页面内容而无须验证其身份，则
该网站存在接口未授权访问的漏洞。
13.4.3 修复建议
（1）采用Token校验的方式，在url中添加一个Token参数，只有Token验证通过才返
回接口数据且Token使用一次后失效。
（2）在接口被调用时，后端对会话状态进行验证，如果已经登录，便返回接口数
据；如果未登录，则返回自定义的错误信息。
13.5 Callback自定义测试
13.5.1 测试原理和方法
在浏览器中存在着同源策略，所谓同源是指域名、协议、端口相同。当使用Ajax异步
传输数据时，非同源域名之间会存在限制。其中有一种解决方法是JSONP（JSON 
with
Padding），基本原理是利用了HTML里元素标签，远程调用JSON文件来
实现数据传递。JSONP 技术中一般使用 Callback（回调函数）参数来声明回调时所使用的
函数名，这里往往存在安全问题，由于没有使用白名单的方法进行限制Callback的函数
名，导致攻击者可以自定义Callback内容，从而触发XSS等漏洞。
13.5.2 测试过程
如图13-25所示，攻击者在测试前，使用Brup  Suite的爬虫功能对网站进行爬取，筛选
出带有Callback或者jsonp参数的请求，对请求响应的Content-Type进行判断，如果Content-Type为text/html，则进行下一步，接着攻击者对Callback参数进行分析，如果Callback参数
允许攻击插入HTML标签，则存在漏洞。
图13-25 CallBack测试流程图
步骤一：如图13-26所示，使用Burp  Suite的爬虫功能，从重点关注的目录（一般为网
站根目录）开始爬取，在  HTTP  history  选项卡中选中要开始爬取的项，右键选择“Spider from here”。
如图13-27所示，爬取的结果会在Target→Site 
map中显示。在爬取完毕后，再使用
Burp Suite的过滤功能找到带有Callback参数的链接，如图13-28所示。
图13-26 从网站根目录开始爬取
图13-27 切换到Site map标签页
图13-28 使用callback关键词进行过滤
在输入关键词之后，再单击图13-28中序号“1”的位置即可让过滤生效。步骤二：如图
13-29所示，找到URL带有callback参数的链接。
图13-29 定位到callback参数位置
步骤三：查看URL对应的HTTP 
Response的Content-Type类型是否为text/html。如果
Content-Type为text/html，我们输入的HTML标签才会被浏览器解析。如图12-30所示，
Content-Type类型为text/html，将对应的请求发送到Repeater，继续步骤四。
图13-30 观察响应的Content-Type
步骤四：如图13-31所示，查看callback参数是否存在过滤及可控，这时我们需要在