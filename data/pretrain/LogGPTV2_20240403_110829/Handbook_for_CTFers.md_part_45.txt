situations from occurring, but it does significantly speed up the scripting process.
Using the following statement to enable the LAZY_SOLVES option.
s . one_active , options add (angr options LAZY_SOLvES)
Before this option is enabled, scripts take 74.102 s to run, and after it is enabled, 
scripts take 8.426 s to run, which is a huge difference. In earlier versions of angr, this
option was turned on by default, but in the newer versions, it is turned off by default.
In most cases, tuming this option on can improve the efficiency of scripts.
In addition, are there any other optimizations that can be made? It can be observed
that many of the previous operations of the program are fetching inputs one by one,
which is relatively time-consuming. If you can put the input directly in memory and
then start the execution from the address of the call CheckSolution (0x4028E0), you
may be able to save the time of fetching the input one by one.
Angr’s simulations of standard input and file systems make it easy to fully
automate the creation of symbolic variables. However, because stream objects
such as standard input and file systems cannot simply infer the length of the input,
Jadodu oqi oi an aajos on slua suop n oi su Suo e 1sue saei uao 1
process of some specific input functions such as scanf in angr, the solver may not
work correctly, even reporting no solutions, so sometimes we need to manually forge
the input by claripy module in angr. Claripy is a wrapper for a symbolic solver
engine like z3, so it can be used as a native z3. claripy.BVSO can create symbolic
variables directly, similar to BitVec in z3, with the first parameter being the variable
name and the second parameter being the number of bits. . So, we can create user
input with the following code.
p = angr . Project (* . /baby-re', auto_load_libs = False)
state = p .factozy .blank_state (addr = 0x4028g0)
flag_chars = [claripy.Bvs (*flag_vd* $ i, 32) fox i in range [13)]
---
## Page 410
396
5 Reverse Engineering
Then put these variables into their corresponding memory addresses, and for
convenience, put them directly into the memory address that rsp points to (don’t
(puo a ne 1aoueed oq ssed o1 1o1oj
for i in xrange (13) :
state.mem [state.regs.rsp+i *4] dvord = flag_chars [1]
state.regs.rdi = state.regs.rsp
 = p. factory .simulation_manager (state)
8 . one_active , options add (angr options LAZY_sOLVES)
s .exp1ore (find = 0x4028E9, avoid = 0x402941)
After manually setting the symbolic variable, you cannot directly dump the
standard input to get the correct input, but angr'’s solver directly provides an eval
function to get the corresponding value of the symbolic variable.
flag = 11 -join (chz (s,one_found.solver.eval (c) ) for c in flag_chars)
pzint (fliag)
After doing so, we successfully optimized the script runtime from 8.461 s t0
7.933 s.
3. sakura (Hitcon 2017)
This challenge is more or less the same as the previous two challenges, but after
verifying the input, it directly outputs the flag. Unfortunately, if you directly load this
program into angr and explore it, the script will be killed by the system affer running
for a long time and consuming a large number of resources. This requires some
optimization. At the same time, because the validation function is too large, you need
to increase the limit of the number of nodes in IDA to see the control ffow graph, see
Fig. 5.94.
After the initialization operation, the validation for each step is very similar, see
Fig. 5.95, and on the right side is a loop, at the end of which a judgment is made, and
if it is not equal, rbp+var_1E49 is assigned a value of 0, see Fig. 5.96.
At the end of the function, rbp+var_1E49 is returmed directly to the higher-level
function as a retum value, see Fig. 5.97. Then, all operations that assign 0 to rbp
+var_1E49 should be flags of flag errors, and these places should be avoided by
angr.
However, there are many operations that performed on this memory address in
the function, which can be extracted using idapython.
import idc
p = 0x850
end = 0x10FF5
addr = [1
while p 
Fig, 5,99 Use pin32 and pin64
---
## Page 418
404
5  Reverse Engineering
Tools provided by Pin do not usually meet the requirements of CTF challenges,
so you need to develop your Pintool using APIs provided by Pin. The sample code
provided by Intel is available in the source\tools'MyPinTool directory, and you need
to use Visual Studio to develop Pintool. The development environment in this
section is Visual Studio 2017.
If the build is successful, the compilation is successful. Open the command line in
the directory where MyPinTool.dll was generated and enter the following command.
123
Generate a log.log in the current directory, which records the number of basic
blocks and instructions executed by the program, see Fig. 5.100.
The error shown in Fig. 5.101 is because the 32-bit pintool does not support
Windows 10 and needs to be compiled and run in Windows 7 or Windows 8 virtual
machines.
5.7.3.2  Using Pintool
The compiled Pintool exists as a DLL on Windows and as a so on Linux and can be
usord Susixa ue on qoee o no (z01°g ty aas) poap uesoud e es on posn
(see Fig. 5.103).
H1og.1og
MyPinTool analysis results:
Number of instructions: 1965508
Number of basic blocks: 478369
Number of threads: 1
Fig, 5.100 log.log file
Fig, 5.101 pin32 error infomation
Fig, 5.102 Start a program use pin32
---
## Page 419
5.7 Moderm Reverse Engineering Techniques
405
Fig, 5.103 Attach a program use pin32
5.7.3.3 Pintool Basic Framework
This section uses MyPintool, which comes with Pin on Windows, as a framework to
explain the process.
The basic framework of MyPintool’s main function is as follows.
int main (int arge, char *azgv []) (
// If the argument has -h, then output the help infozmation, 1 .e. , ca11
// Initialize the PIN runtime library
the Usage function.
if (PIN_Init (argc, azgv))(
return Usage (} :
if (IfileName ,enpty ()> {
string fileNane = KnobOutputFi1e . Value () ;
out = new std: : ofstream (fileName c_stx ()) ;
if (KnobCount){
TRACE_AddInstrumentFunction (Trace, 0) ;
// Register the
function that will be executed when the instruction trace 1s executed.
PIN_AddThreadStartFunction (ThreadStart, 0) ;
function to be executed at the start of each thread.
// Register the
PIN_AddFiniFunction (Fini, 0) ;
// Register the function to
be executed at the end of execution.
PIN_StartProgran [1 ;
// Start the program, the function
does not return
return 0;
Pintool will first execute Pin_Init to initialize the Pin runtime library. If the
parameter has -h or the initialization fails and reports an error, it will output the
tool's help information, i.e., call Usage function, see Fig. 5.104.
Afterwards, Pintools will initialize the filename variable according to the command
line arguments. The definition of KnobOutputFile and KnobCount are in Fig. 5.105. O
argument will set the value of KnobOutputFile, which defaults to null, and count
argument will set the value of KnobCount, which defaults to 1. With KnobCount set,
three instrumentation functions are registered and PIN_StartProgram is called to run
the pinned program (PIN_StartProgram does not retum).
See Table 5.8 for Pin-provided instrumentations.