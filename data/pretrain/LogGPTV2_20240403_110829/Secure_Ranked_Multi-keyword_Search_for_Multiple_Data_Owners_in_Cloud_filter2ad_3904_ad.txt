encoded with two Additive Order and Privacy Preserving
Functions. Now we analysis the security of additive order and
privacy preserving function. Assume the input for the F y
aopp(x)
is s, and the data owner ID is i. Then the cloud server can
only capture the following value that is derived from s:
(Hi(i))
aopp
Aj,k · m(s, j) · m(Hi(i), k) + raof
(28)
Different data owners have different Hi(i) and raof . There-
fore it’s infeasible for the cloud server to break the additive
0≤j,k≤τ
(cid:11)
(s) =
F
order and privacy preserving F y
of corresponding F y
preserved.
aopp(x). Thus the security
aopp(x) encoded relevance score is also
A. Sharing Hash Function as Secret
Sharing a hash function secretly among data owners and
users seems to be a violation to Kerckhoffs principle [24],
which asserts a cryptosystem should only have its key as
a secret. Here we argue from two aspects. First, the secret
sharing of hash function is equivalent to the sharing of a
key because data owners and users can construct keyed hash
function such as HMAC [25]. The hash algorithm is public
knowledge while the key is the only secret in the system.
Second, it is a common security practice to seal all security
computations in a hardware entity such as a USB key. The
data owners and users could be given a USB dongle that seals
a secret hash function, keywords encryption algorithms, and
additive order and privacy preserving functions. They use the
USB dongle to preprocess data and generate queries. This is
an arguably better security practice than to give them secret
keys and ask them to conﬁgure their computers to be secure
and trustable to perform cryptographic operations.
B. Necessity of Secret Sharing
It is apparently better if we could design a scheme that
permits secure keyword search without asking data owners
and users to share any secret. A notable beneﬁt would be the
freedom of allowing new users to submit queries without a
joining process, i.e. disseminating the shared secret to them.
Unfortunately, this is impossible because the users must
have some information privilege over the cloud server to
protect data and query privacy. In our scheme, the secretly
shared hash function prevent the cloud server from construct-
ing keyword trapdoors. If the cloud server could construct
queries as users can, the cloud server could submit a series
of queries that contains popular keywords to itself. Then the
query results would reveal the connections between keywords
and data ﬁles. Moreover, the cloud server would be able to
infer the keywords in a user submitted query by looking at
the search result.
C. Possible Extension
is notable that
It
in previous works and our proposed
scheme, a data user needs to request the ﬁle encryption key
from data owner to decrypt the downloaded data ﬁle. This
requirement introduces indeﬁnite delays and extra communica-
tion overhead. Especially when there are multiple data owners
and data users, it is impractical to ensure all data owners
to be constantly available and promptly answer key requests.
Moreover, if data ﬁles are anonymized before upload, the data
users may not be able to ﬁnd the corresponding data owner
when an encrypted data ﬁle is downloaded.
Here we propose a bold extension that allows data users
to decrypt downloaded data ﬁles without requesting the ﬁle
encryption key from corresponding data owners, at the cost
of increased security risks. When a data owner i generates
283283283
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:58 UTC from IEEE Xplore.  Restrictions apply. 
owner uploads tuple (Ci,j,
the symmetric key ki,f that encrypts his data ﬁles Fi,j, j =
1, 2,··· , n, he ﬁrst generates a random string si,f and then
calculates ki,f = Hs(si,f ).
(cid:2)
Using the scheme proposed in previous sections, the data
is an encrypted data ﬁle and(cid:2)
Wi), j = 1, 2,··· , n in which Ci,j
Wi is the corresponding encrypted
keywords list. The ﬁle encryption key ki,f is kept in secret by
the data owner. We can modify the scheme and ask the data
owner to upload si,f to the server. Upon receiving a query, the
cloud server returns relevant ﬁles and their corresponding si,f
to the user. Because the data user holds the secret hash function
Hs(·), he can reproduce ﬁle encryption keys and decrypt data
ﬁles. The cloud server cannot calculate ki,f from si,f .
Please note that this modiﬁcation would introduce a sub-
stantial security risk. When the cloud server learns the secret
hash function Hs(·), it would be able to decrypt all data ﬁles.
However, the return on risk (RoR) is also signiﬁcant. The data
users no longer need to look for the corresponding data owners
and wait them to answer key requests. This beneﬁt is especially
desired when a large group of people scattered around the
world and collaborate on many data ﬁles.
VII. PERFORMANCE EVALUATION
In this section, we measure the efﬁciency of our proposed
schemes. For easy description, we denote our scheme as
SRMSM. Then we compare SRMSM with the state-of-the-art
scheme MRSE [9], side by side. Since MRSE is only suitable
for single owner model, our SRMSM not only works well in
multi-owner settings, but also outperforms MRSE on many
aspects
A. Evaluation Settings
We conduct performance experiments on a real data set,
the Internet Request For Comments dataset (RFC) [26]. This
dataset has 6870 plain text ﬁles with a total size about 349MB.
The average size of each ﬁle is 52KB. The ﬁle size of this
data set is demonstrated in Fig. 4(a). We use Hermetic Word
Frequency Counter [27] to extract keywords from each RFC
ﬁle. The keyword frequency of this data set is shown in Fig.
4(b).
Most RFC ﬁles in the data set has less than 100 keywords,
while a few of them may contain more than 500 keywords.
After the keyword extraction, we compute keyword statistics
such as the keyword frequency in each ﬁle, the length of each
ﬁle, the number of ﬁles containing a speciﬁc keyword, etc.
We further calculate the relevance score of a keyword to a ﬁle
based on these statistics.
The experiment programs are coded using Python program-
ming language on a PC with 3.0GHZ Pentium Dual Core CPU
and 2GB memory. We implement all necessary routines for
data owners to preprocess data ﬁles, for data user to generate
trapdoors, and for the cloud server to perform ranked searches.
It is noteworthy that there exists O(log n) algorithm for the
power-modular arithmetic. More precisely, the computational
complexity of gx mod p is upper bounded by O(log2 x). The
difference of whether applying fast computing algorithm is
284284284
substantial. Our test results show that when x ≈ 2160, the
fast computing algorithm can bring 1000 times time cost
reduction for gx mod p computation. In SRMSM, we adopt
this fast computing algorithm to implement the power-modular
arithmetic. In MRSE, we use the public utility routines by
Numerical Recipes to compute the inverse of matrix.
B. Evaluation Results
1) Index Construction: For MRSE, data owner achieves
index construction in four steps. First, data owner extracts
keywords from all data ﬁles. Second, data owner gathers all
these keywords to obtain the keyword dictionary. Note that,
all keywords in the dictionary are distinct. Third, data owner
constructs a data vector for each data ﬁle based on the extract-
ed keywords. Fourth, data owner encrypts these vectors with
two matrices. For our SRMSM, index construction is ﬁnished
by two algorithms (Keywords Encryption and Build Index)
described in aforementioned sections. Fig. 5(a) demonstrates
that, given the same number of ﬁles (n=1000), our SRMSM
consumes much less time than MRSE on constructing indexes.
Additionally, SRMSM is insensitive to the size of keyword dic-
tionary for index construction, while MRSE suffers a quadratic
growth with the size of keyword dictionary increases. Fig.
5(b) shows that, given the same keyword dictionary (u=4000),
time of index construction for both schemes increases linearly
with the number of ﬁles increases, while SRMSM also spends
much less time on index construction. Fig. 5(c) shows the
encoding efﬁciency of our proposed AOPPF. The time spended
on encoding increases from 0.1s to 1s when the number of
keywords increases from 1000 to 10000. This time cost can
be acceptable.
2) Trapdoor Generation: Compared with index construc-
tion, trapdoor generation consumes much less time. Fig. 6(a)
demonstrates that, given the same number of queried keywords
(q=100), SRMSM is insensitive to the size of keyword dictio-
nary on trapdoor generation and consumes 0.18 seconds to
generate trapdoors. While MRSE increases from 0.04 seconds
to 6.2 seconds. Fig. 6(b) shows that, given the same number
of dictionary size (u=4000), when the number of queried
keywords increases from 100 to 1000, the trapdoor generation
time for MRSE is 0.31 seconds and remains unchanged. While
SRMSM increases from 0.018 seconds to 0.18 seconds.
3) Search: For MRSE, query execution in the cloud server
consists of computing and ranking similarity scores for all
documents in the dataset. For SMRSM, query execution in
the cloud server consists of two aforementioned algorithms
(Locate Keywords, Rank Relevance scores). Fig. 7(a) demon-
strates that, given the same keyword dictionary (u=4000) and
dataset size (n=2000), with the different number of queried
keywords,
the search time remains 1s for MRSE, while
increases linearly for SMRSM. Fig. 7(b) shows that, given
the same number of queried keywords (q=10) and keyword
dictionary size(u=4000), when the number of ﬁles changes
from 1000 to 6000, the time cost of search increases linearly
for MRSE while remains constant for SMRSM. Fig. 7(c)
shows that, given the same number of queried keywords
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:58 UTC from IEEE Xplore.  Restrictions apply. 
(1
(
1

1

V
H
O
L
I

I
R

U
H
E
P
X
1
(
.
+
(


V
H
O
L
I

I
R

U
H
E
P
X
1


(

1XPEHURINH\ZRUGVu(
+
.
1

.

4
)LOHVL]H.%
(a) RFC database ﬁle size
(b) RFC dataset keyword frequency
Fig. 4: Features of RFC data set

V

+



×



[
H
G
Q
L

J
Q
L
G
O
L
X
E

I
R

H
P
7
L
+
+
(.
4
(



056(
65060
(
1
+
.
1XPEHURIILOHVLQWKHGDWDVHW×+

V

+



×



[
H
G
Q
L

J
Q
L
G
O
L
X
E

I
R

H
P
7
L

1
.
+
(




056(
65060
.
+
(

1XPEHURINH\ZRUGVLQGLFWLRQDU\×+
1


4
7

V


J
Q
L
G
R
F
Q
(

I
R

H
P
7
L

4