types StartElement, EndElement, CharData, Comment, ProcInst or Directive.
Go 有一个使用 NewParser.创建的XML 解析器。这需要一个 io.Reader 作为参数,并返回一个指向
Parser 的指针。这个类型的主要方法是 Token ，这个方法返回输入流中的下一个标记。该标记
是 StartElement, EndElement, CharData, Comment,ProcInst 和Directive 其中一种。
The types are
这些类有
StartElement
The type StartElement is a structure with two field types:
StartElement 类型是一个包含两个字段的结构:
type StartElement struct {
Name Name
Attr []Attr
}
type Name struct {
Space, Local string
}
type Attr struct {
Name Name
Value string
}
EndElement
This is also a structure
同样也是一个结构
type EndElement struct {
Name Name
}
CharData
This type represents the text content enclosed by a tag and is a simple type
这个类表示一个被标签包住的文本内容，是一个简单类。
type CharData []byte
Comment
Similarly for this type
这个类也很简洁
type Comment []byte
ProcInst
A ProcInst represents an XML processing instruction of the form 
一个ProcInst 表示一个XML 处理指令形式，如
type ProcInst struct {
Target string
Inst []byte
}
Directive
A Directive represents an XML directive of the form . The bytes do not
include the  markers.
一个指令用XML 指令的形式表示，内容不包含 构成部分。
type Directive []byte
A program to print out the tree structure of an XML document is
打印XML 文档的树结构的一个程序，代码如下
/* Parse XML
*/
package main
import (
"encoding/xml"
"fmt"
"io/ioutil"
"os"
"strings"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "file")
os.Exit(1)
}
file := os.Args[1]
bytes, err := ioutil.ReadFile(file)
checkError(err)
r := strings.NewReader(string(bytes))
parser := xml.NewDecoder(r)
depth := 0
for {
token, err := parser.Token()
if err != nil {
break
}
switch t := token.(type) {
case xml.StartElement:
elmt := xml.StartElement(t)
name := elmt.Name.Local
printElmt(name, depth)
depth++
case xml.EndElement:
depth--
elmt := xml.EndElement(t)
name := elmt.Name.Local
printElmt(name, depth)
case xml.CharData:
bytes := xml.CharData(t)
printElmt("\""+string([]byte(bytes))+"\"", depth)
case xml.Comment:
printElmt("Comment", depth)
case xml.ProcInst:
printElmt("ProcInst", depth)
case xml.Directive:
printElmt("Directive", depth)
default:
fmt.Println("Unknown")
}
}
}
func printElmt(s string, depth int) {
for n := 0; n 
 Newmarch 
 Jan 
PI:EMAIL
PI:EMAIL
We would like to map this onto the Go structures
接下来我们想把这个文档映射到 Go 结构
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Type string
Address string
}
This requires several comments:
这里需要一些说明:
1. Unmarshalling uses the Go reflection package. This requires that all
fields by public i.e. start with a capital letter. Earlier versions
of Go used case-insensitive matching to match fields such as the XML
string "name" to the field Name. Now, though, case-sensitive matching
is used. To perform a match, the structure fields must be tagged to
show the XML string that will be matched against. This
changes Person to
2.
3. type Person struct {
4. Name Name `xml:"name"`
5. Email []Email `xml:"email"`
6. }
7. While tagging of fields can attach XML strings to fields, it can't
do so with the names of the structures. An additional field is required,
with field name "XMLName". This only affects the top-level
struct, Person
8.
9. type Person struct {
10. XMLName Name `xml:"person"`
11. Name Name `xml:"name"`
12. Email []Email `xml:"email"`
13. }
14.Repeated tags in the map to a slice in Go
15.Attributes within tags will match to fields in a structure only if
the Go field has the tag ",attr". This occurs with the
field Type of Email, where matching the attribute "type" of the "email"
tag requires `xml:"type,attr"`
16.If an XML tag has no attributes and only has character data, then
it matches a string field by the same name (case-sensitive, though).
So the tag `xml:"family"` with character data "Newmarch" maps to the
string field Family
17.But if the tag has attributes, then it must map to a structure. Go
assigns the character data to the field with tag ,chardata. This occurs
with the "email" data and the field Address with tag ,chardata
1. 使用 Go reflection 包去解组。这要求所有字段是公有，也就是以一个大写字母
开始。早期版本的 Go 使用不区分大小写匹配来匹配字段,例如 XML 标签“name”对应
Name 字段。但是现在使用 case-sensitive 匹配，要执行一个匹配,结构字段后必须
用标记来显示 XML 标签名,以应付匹配。Person 修改下应该是
2.
3. type Person struct {
4. Name Name `xml:"name"`
5. Email []Email `xml:"email"`
6. }
7. 虽然标记结构字段可以使用 XML 字符串,但是对于结构名不能这么做 ，这个解决办
法是增加一个额外字段,命名“XMLName”。这只会影响上级结构，修改 Person 如下
8.
9. type Person struct {
10. XMLName Name `xml:"person"`
11. Name Name `xml:"name"`
12. Email []Email `xml:"email"`
13. }
14.重复标记会映射到 Go 的 slice
15.要包含属性的标签准确匹配对应的结构字段，只有在 Go 字段后标记”,attr”。举
个下面例子中 Email 类型的 Type 字段，需要标记`xml:"type,attr"`才能匹配带有
“type”属性的“email”
16.如果一个 XML 标签没有属性而且只有文本内容,那么它匹配一个 string 字段是通
过相同的名称(区分大小写的,不过如此)。所以标签`xml:"family"`将对应着文
本”Newmarch”映射到 Family 的 string 字段中
17.但如果一个标签带有属性,那么它这个特征必须反映到一个结构。Go 在字段后标记
着 ,chardata 的文字。如下面例子中通过 Address 后标记,chardata 的字段来获取
email 的文本值
A program to unmarshal the document above is
解组上面文档的一个程序
/* Unmarshal
*/
package main
import (
"encoding/xml"
"fmt"
"os"
//"strings"
)
type Person struct {
XMLName Name `xml:"person"`
Name Name `xml:"name"`
Email []Email `xml:"email"`
}
type Name struct {
Family string `xml:"family"`
Personal string `xml:"personal"`
}
type Email struct {
Type string `xml:"type,attr"`
Address string `xml:",chardata"`
}
func main() {
str := `
 Newmarch 
 Jan 
PI:EMAIL
PI:EMAIL
`
var person Person
err := xml.Unmarshal([]byte(str), &person)
checkError(err)
// now use the person structure e.g.
fmt.Println("Family name: \"" + person.Name.Family + "\"")
fmt.Println("Second email address: \"" + person.Email[1].Address + "\"")
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
(Note the spaces are correct.). The strict rules are given in the package
specification.
(注意空间是正确的)。Go 在包详解中给出了严格的规则。
12.4 Marshalling XML 编组 XML
Go 1 also has support for marshalling data structures into an XML document.
The function is
Go1 也支持将数据结构编组为 XML 文档的。这个函数是
func Marshal(v interface}{) ([]byte, error)
This was used as a check in the last two lines of the previous program.
这是用来检查前面程序的最后两行
12.5 XHTML XHTML
HTML does not conform to XML syntax. It has unterminated tags such as ''.
XHTML is a cleanup of HTML to make it compliant to XML. Documents in XHTML
can be managed using the techniques above for XML.
HTML 并不符合 XML 语法。 它包含无闭端的标签如“”。XHTML 是 HTML 的一个自身
兼容 XML 的子集。 在 XHTML 文档中可以使用操作 XML 的技术。