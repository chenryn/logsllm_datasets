Certainly! Here is the optimized and refined version of the text:

---

### Representing Filtering Conditions

A filtering condition can be represented as a complete sentence, such as the one shown in Figure 7-5.

**Figure 7-5: Filtering Conditions**

| Field Key          | Condition        | Value   | Match Type | Action         |
|--------------------|------------------|---------|------------|----------------|
| Remote TCP Port    | If the           | 445     | Equal to   | Block the connection |

At this point, we have established the basic "if this, do that" logic for our rule. However, we still need to address other conditions related to filter arbitration.

### Assigning Weights and Sublayers

Suppose our driver has filters to both permit traffic on TCP port 1080 and block outbound connections on TCP ports greater than 1024. To handle these conflicts, we must assign each filter a weight. The higher the weight, the higher the priority, and the earlier the condition will be evaluated. For example, the filter allowing traffic on port 1080 should be evaluated before the one blocking all traffic using ports higher than 1024, to ensure that software using port 1080 can function correctly. In code, a weight is an `FWP_VALUE` (either `UINT8` or `UINT64`) assigned to the `weight` member of the `FWPM_FILTER` structure.

In addition to assigning weights, we need to assign the filter to a sublayer to ensure it is evaluated at the correct time. This is done by specifying a GUID in the `layerKey` member of the `FWPM_FILTER` structure. If we created our own sublayer, we would specify its GUID here. Otherwise, we use one of the default sublayer GUIDs listed in Table 7-1.

**Table 7-1: Default Sublayer GUIDs**

| Filter Sublayer Identifier                       | Filter Type                |
|--------------------------------------------------|----------------------------|
| `FWPM_SUBLAYER_EDGE_TRAVERSAL`                   | Edge traversal             |
| `FWPM_SUBLAYER_INSPECTION`                       | Inspection                 |
| `FWPM_SUBLAYER_IPSEC_DOSP`                       | IPsec DoS protection       |
| `FWPM_SUBLAYER_IPSEC_FORWARD_OUTBOUND_TUNNEL`   | IPsec forward outbound tunnel |
| `FWPM_SUBLAYER_IPSEC_TUNNEL`                     | IPsec tunnel               |
| `FWPM_SUBLAYER_LIPS`                             | Legacy IPsec filters       |
| `FWPM_SUBLAYER_RPC_AUDIT`                        | RPC audit                  |
| `FWPM_SUBLAYER_SECURE_SOCKET`                    | Secure socket              |
| `FWPM_SUBLAYER_TCP_CHIMNEY_OFFLOAD`              | TCP Chimney Offload        |
| `FWPM_SUBLAYER_TCP_TEMPLATES`                    | TCP template               |
| `FWPM_SUBLAYER_UNIVERSAL`                        | Universal (default)        |

Note that the `FWPM_SUBLAYER_IPSEC_SECURITY_REALM` sublayer identifier is defined in the `fwpmu.h` header but is undocumented.

### Adding a Security Descriptor

The last parameter we can pass to `fwpuclnt!FwpmFilterAdd()` is a security descriptor. While optional, it allows the developer to explicitly set the access control list for their filter. If not provided, the function will apply a default value to the filter. This default security descriptor grants `GenericAll` rights to members of the Local Administrators group, and `GenericRead`, `GenericWrite`, and `GenericExecute` rights to members of the Network Configuration Operators group, as well as the diagnostic service host (`WdiServiceHost`), IPsec policy agent (`PolicyAgent`), network list service (`NetProfm`), remote procedure call (`RpcSs`), and Windows firewall (`MpsSvc`) services. Additionally, `FWPM_ACTRL_OPEN` and `FWPM_ACTRL_CLASSIFY` are granted to the Everyone group.

After the call to `fwpuclnt!FwpmFilterAdd()` completes, the callout driver is initialized and will process events until the driver is ready to be unloaded. The unloading process, which is outside the scope of this chapter, involves closing all previously opened handles, deleting created sublayers and filters, and safely removing the driver.

### Detecting Adversary Tradecraft with Network Filters

Most of the telemetry collected by a WFP filter driver comes from its callouts, primarily classify callouts, which receive information about the connection as input. From this data, developers can extract telemetry useful for detecting malicious activity. Let’s explore these functions further, starting with their definition in Listing 7-9.

**Listing 7-9: The `FwpsCalloutClassifyFn` Definition**

```c
FWPS_CALLOUT_CLASSIFY_FN2 FwpsCalloutClassifyFn2;

void FwpsCalloutClassifyFn2(
    [in] const FWPS_INCOMING_VALUES0 *inFixedValues,
    [in] const FWPS_INCOMING_METADATA_VALUES0 *inMetaValues,
    [in, out, optional] void *layerData,
    [in, optional] const void *classifyContext,
    [in] const FWPS_FILTER2 *filter,
    [in] UINT64 flowContext,
    [in, out] FWPS_CLASSIFY_OUT0 *classifyOut
)
{
    // Function implementation
}
```

On invocation, the callout receives pointers to several structures containing details about the data being processed. These details include basic network information, such as the remote IP address, and metadata providing additional context, including the requesting process's PID, image path, and token.

The callout function sets the action for the stream-layer shim to take (assuming the packet is in the stream layer) and an action for the filter engine, such as to block or allow the packet. It may also defer the decision to the next registered callout function.

#### The Basic Network Data

The first parameter, a pointer to an `FWPS_INCOMING_VALUES0` structure, contains information about the connection passed from the filter engine to the callout.

**Listing 7-10: The `FWPS_INCOMING_VALUES0` Structure**

```c
typedef struct FWPS_INCOMING_VALUES0_ {
    UINT16 layerId;
    UINT32 valueCount;
    FWPS_INCOMING_VALUE0 *incomingValue;
} FWPS_INCOMING_VALUES0;
```

- **`layerId`**: The identifier of the filter layer where the data was obtained.
- **`valueCount`**: The number of entries in the `incomingValue` array.
- **`incomingValue`**: An array of `FWPS_INCOMING_VALUE0` structures containing the data passed to the callout.

Each `FWPS_INCOMING_VALUE0` structure contains an `FWP_VALUE0` structure, which describes the type and value of the data.

**Listing 7-11: The `FWP_VALUE0` Structure**

```c
typedef struct FWP_VALUE0_ {
    FWP_DATA_TYPE type;
    union {
        UINT8 uint8;
        UINT16 uint16;
        UINT32 uint32;
        UINT64 *uint64;
        INT8 int8;
        INT16 int16;
        INT32 int32;
        INT64 *int64;
        float float32;
        double *double64;
        FWP_BYTE_ARRAY16 *byteArray16;
        FWP_BYTE_BLOB *byteBlob;
        SID *sid;
        FWP_BYTE_BLOB *sd;
        FWP_TOKEN_INFORMATION *tokenInformation;
        FWP_BYTE_BLOB *tokenAccessInformation;
        LPWSTR unicodeString;
        FWP_BYTE_ARRAY6 *byteArray6;
    };
} FWP_VALUE0;
```

To access the data inside the array, the driver needs to know the index. This index varies based on the layer identifier. For example, if the layer is `FWPS_LAYER_OUTBOUND_IPPACKET_V4`, the driver would access fields based on their index in the `FWPS_FIELDS_OUTBOUND_IPPACKET_V4` enumeration.

**Listing 7-12: The `FWPS_FIELDS_OUTBOUND_IPPACKET_V4` Enumeration**

```c
typedef enum FWPS_FIELDS_OUTBOUND_IPPACKET_V4_ {
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS_TYPE,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_REMOTE_ADDRESS,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_INTERFACE,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_INTERFACE_INDEX,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_SUB_INTERFACE_INDEX,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_FLAGS,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_INTERFACE_TYPE,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_TUNNEL_TYPE,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_COMPARTMENT_ID,
    FWPS_FIELD_OUTBOUND_IPPACKET_V4_MAX
} FWPS_FIELDS_OUTBOUND_IPPACKET_V4;
```

For instance, if an EDR’s driver wanted to inspect the remote IP address, it could access this value using the code in Listing 7-13.

**Listing 7-13: Accessing the Remote IP Address in the Incoming Values**

```c
if (inFixedValues->layerId == FWPS_LAYER_OUTBOUND_IPPACKET_V4) {
    UINT32 remoteAddr = inFixedValues->incomingValues[FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_REMOTE_ADDRESS].value.uint32;
    // Further processing
}
```

In this example, the EDR driver extracts the IP address by referencing the unsigned 32-bit integer (`uint32`) value at the index `FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_REMOTE_ADDRESS` in the incoming values.

#### The Metadata

The next parameter that the callout function receives is a pointer to an `FWPS_INCOMING_METADATA_VALUES0` structure, which provides valuable metadata beyond what you would expect from a packet-capture application like Wireshark.

**Listing 7-14: The `FWPS_INCOMING_METADATA_VALUES0` Structure**

```c
typedef struct FWPS_INCOMING_METADATA_VALUES0_ {
    UINT32 currentMetadataValues;
    UINT32 flags;
    UINT64 reserved;
    FWPS_DISCARD_METADATA0 discardMetadata;
    UINT64 flowHandle;
    UINT32 ipHeaderSize;
    UINT32 transportHeaderSize;
    FWP_BYTE_BLOB *processPath;
    UINT64 token;
    UINT64 processId;
    UINT32 sourceInterfaceIndex;
    UINT32 destinationInterfaceIndex;
    ULONG compartmentId;
    FWPS_INBOUND_FRAGMENT_METADATA0 fragmentMetadata;
    ULONG pathMtu;
    HANDLE completionHandle;
    UINT64 transportEndpointHandle;
    SCOPE_ID remoteScopeId;
    WSACMSGHDR *controlData;
    ULONG controlDataLength;
    FWP_DIRECTION packetDirection;
    PVOID headerIncludeHeader;
    ULONG headerIncludeHeaderLength;
    IP_ADDRESS_PREFIX destinationPrefix;
    UINT16 frameLength;
    UINT64 parentEndpointHandle;
    UINT32 icmpIdAndSequence;
    DWORD localRedirectTargetPID;
    SOCKADDR *originalDestination;
    HANDLE redirectRecords;
    UINT32 currentL2MetadataValues;
    UINT32 l2Flags;
    UINT32 ethernetMacHeaderSize;
    UINT32 wiFiOperationMode;
    NDIS_SWITCH_PORT_ID vSwitchSourcePortId;
    NDIS_SWITCH_NIC_INDEX vSwitchSourceNicIndex;
    NDIS_SWITCH_PORT_ID vSwitchDestinationPortId;
    UINT32 padding0;
    USHORT padding1;
    UINT32 padding2;
    HANDLE vSwitchPacketContext;
    PVOID subProcessTag;
    UINT64 reserved1;
} FWPS_INCOMING_METADATA_VALUES0;
```

One of the main benefits of monitoring network traffic on each endpoint is the context it provides to the EDR. The `processPath`, `processId`, and `token` members give us information about the endpoint process and the associated principal.

Note that not all values in this structure will be populated. To check which values are present, the callout function checks the `currentMetadataValues` member, which is a bitwise-OR of metadata filter identifiers. Microsoft provides a macro, `FWPS_IS_METADATA_FIELD_PRESENT()`, to determine if a specific value is present.

#### The Layer Data

After the metadata, the classify function receives information about the layer being filtered and the conditions under which the callout is invoked. For example, if the data originates from the stream layer, the parameter will point to an `FWPS_STREAM_CALLOUT_IO_PACKET0` structure. This layer data contains a pointer to an `FWPS_STREAM_DATA0` structure, which includes flags encoding the characteristics of the stream (e.g., whether it is inbound or outbound, high priority, and whether the network stack will pass the FIN flag in the final packet). It also contains the offset to the stream, the size of its data, and a pointer to a `NET_BUFFER_LIST` describing the current portion of the stream.

This buffer list is a linked list of `NET_BUFFER` structures, each containing a chain of memory descriptor lists used to hold the data sent or received over the network. If the request did not originate from the stream layer, the `layerData` parameter will point only to a `NET_BUFFER_LIST`, assuming it is not null.

--- 

I hope this optimized version meets your needs!