∀i ∈ [0, 31]
∀i ∈ [0, 31].
Proof. Straightforward, using Deﬁnition 2.6 and Equa-
tion (1). For
the second equation, note that f
does not depend on its leftmost
input. Therefore
f (0 a33+i . . . a79+i) = f (a32+i . . . a79+i) = b32+i and
hence {nR,i} ⊕ f (0 a33+i . . . a79+i) = nR,i.
Consequently, if an attacker somehow recovers the
internal state of the LFSR αi = aiai+1 . . . ai+47 at
some time i, then she can repeatedly apply Theo-
rem 2.8 to recover α0 = a0a1 . . . a47, which is the
sector key.
3. Weaknesses
This section describes weaknesses in the design of
the Mifare Classic. We ﬁrst treat weaknesses in the way
the Mifare Classic handles parity bits and then the ones
concerning nested authentications. These weaknesses
will be exploited in Section 4.
3.1. Parity weaknesses
The ISO standard 14443-A [ISO01] speciﬁes that
is followed by a parity bit. The
every byte sent
Mifare Classic computes parity bits over the plaintext
instead of over the ciphertext. Additionally, the bit of
keystream used to encrypt the parity bits is reused to
encrypt the next bit of plaintext.
This already breaks the conﬁdentiality of the encryp-
tion scheme. In this paper we shall only be concerned
with the four parity bits of nT , nR, and aR. The ISO
standard speciﬁes odd parity, hence the “⊕1” in the
deﬁnition below.
Deﬁnition 3.1. In the situation from Deﬁnition 2.6, we
deﬁne the parity bits pj ∈ F2 by
pj := nT,8j ⊕ nT,8j+1 ⊕ · · · ⊕ nT,8j+7 ⊕ 1
pj+4 := nR,8j ⊕ nR,8j+1 ⊕ · · · ⊕ nR,8j+7 ⊕ 1
pj+8 := aR,8j ⊕ aR,8j+1 ⊕ · · · ⊕ aR,8j+7 ⊕ 1
reader sends {nR} and {aR}, the tag checks the parity
bits before the answer of the reader. If at least one of
the eight parity bits is wrong, the tag does not respond.
If all eight parity bits are correct, but the answer aR is
wrong, the tag responds with the 4-bit error code 0x5
signifying failed authentication, called ‘transmission
error’ in [KHG08]. If all eight parity bits are correct
and the answer aR is also correct, the tag responds,
of course, with its answer aT . Furthermore, in case
the reader sends the correct parity, but
the wrong
answer, the 4-bit error code 0x5 is sent encrypted. This
happens even though the reader has not authenticated
itself and hence cannot be assumed to be able to
decrypt.
Figure 3.1 shows an authentication trace where the
attacker sends incorrect authentication data but correct
parity bits. The exclamation marks represent parity bits
that deviate from what is speciﬁed in the standard.
The ﬁnal message of this trace is the encrypted error
message 0x5.
3.2. Nested authentications
Once an attacker knows a single sector key of a
Mifare Classic,
there is a vulnerability that allows
an adversary to recover more keys. When a reader
is already communicating (encrypted) with a tag, a
subsequent authentication command for a new sector
also has to be sent encrypted. After this authentication
command, the internal state of the cipher is set to the
key for the new sector and the authentication protocol
from Section 2.5 starts again. This time, however, the
challenge of the tag is also sent encrypted. Because
there are only 216 possible nonces, an attacker can
simply try to guess a nonce to recover 32 bits of
keystream.
Also here, the information that leaks through the
parity bits can be used to speed up the attack. Although
there are 216 tag nonces, we show below that the parity
bits sent with the encrypted tag nonce leak three bits
of information, so that there are only 213 tag nonces
possible.
Deﬁnition 3.2. In the situation from Deﬁnition 2.6, we
deﬁne {nT,i} ∈ F2 by
∀j ∈ [0, 3]
{nT,i} := nT,i ⊕ bi
∀i ∈ [0, 31].
and the encryptions {pj} of these by
{pj} := pj ⊕ b8+8j
∀j ∈ [0, 11].
There is a further weakness concerning the parity
bits. During the authentication protocol, when the
Theorem 3.3. For every j ∈ {0, 1, 2} we have
nT,8j ⊕ nT,8j+1 ⊕ · · · ⊕ nT,8j+7 ⊕ nT,8j+8
= {pj} ⊕ {nT,8j+8} ⊕ 1
6
c1 08 41 6a e2
Reader 26
Tag
02 00
Reader 93 20
Tag
Reader 93 70 c1 08 41 6a e2 e4 7c
Tag
Reader 60 00 f5 7b
Tag
ab cd 19 49
Reader 59! d5 92 0f! 15 b9 d5! 53! {nR}{aR}
Tag
req type A
answer req
select
uid, bcc
select(uid)
Mifare Classic 4k
auth(block 0)
nT
18 37 cd
a
{5}
Figure 3.1. Trace of a failed authentication attempt
Proof. We compute as follows.
nT,8j ⊕ nT,8j+1 ⊕ · · · ⊕ nT,8j+7 ⊕ nT,8j+8
(by Dfn. 3.1)
= pj ⊕ 1 ⊕ nT,8j+8
= pj ⊕ b8+8j ⊕ nT,8j+8 ⊕ b8+8j ⊕ 1
= {pj} ⊕ {nT,8j+8} ⊕ 1 (by Dfns. 3.1 and 3.2)
Since the attacker can observe {pj} and {nT,8j+8},
this theorem gives an attacker three bits of information
about nT .
In practice, timing information between the ﬁrst and
second authentication attempt leaks so much additional
information that the attacker can accurately predict
what the challenge nonce will be.
It turns out that the distance between the tag nonces
used in consecutive authentication attempts strongly
depends on the time between those attempts. Here
distance is deﬁned as follows.
Deﬁnition 3.4. Let nT and n′
deﬁne the distance between nT and n′
T be two tag nonces. We
T as
suci(nT ) = n′
T .
d(nT , n′
T ) := min
i∈N
4. Attacks
This section shows how the weaknesses described
in the previous section can be exploited.
4.1. Brute-force attack
The attacker plays the role of a reader and tries to
authenticate for a sector of her choice. She answers
the challenge of the tag with eight random bytes (and
eight random parity bits) for {nR} and {aR}. With
probability 1/256, the parity bits are correct and the
tag responds with the encrypted 4-bit error code. A
success leaks 12 bits of entropy (out of 48).
7
Repeating the above procedure sufﬁciently many
times (in practice six is enough) uniquely determines
the key. Since the key length is only 48 bits,
the
attacker can now brute force the key: she can just
check which of the 248 keys produces all six times the
correct parity bits and received response. In practice,
gathering those six authentication sessions with correct
parity bits only takes on average 6 · 256 = 1536
authentication attempts which can be done in less than
one second. The time it takes to perform the ofﬂine
brute-force attack of course is strongly dependent on
the resources the attacker has at her disposal. We
give an estimate based on the performance of COPA-
COBANA [KPP+06]; this is a code-cracker built from
off-the-shelf hardware costing approximately 10000
USD. Based on the fact that COPACOBANA ﬁnds a
56-bit DES key in on average 6.4 days, pessimisti-
cally assuming that one can ﬁt the same number of
CRYPTO1 checks on an FPGA as DES-decryptions,
and realizing that
the search space is a factor of
256 smaller, we estimate that this takes on average
6.4 days/256 = 36 min.
In Sections 4.2 and 4.3 the same idea is exploited
in a different way, trading online communication for
computation time.
4.2. Varying the reader nonce
This section shows how an attacker can mount a
chosen ciphertext attack by adaptively varying the
encryption of nR. We assume that the attacker can
control the power up timing of the tag, thereby causing
the tag to produce the same nT every time.
We ﬁrst give the idea of the attack. The attacker runs
authentication sessions until she guesses the correct
parity bits. The internal state of the stream cipher just
after feeding in nR is α64. She then runs another
authentication session, keeping the ﬁrst 31 bits of {nR}
(and the three parity bits) the same, ﬂipping the last
bit of {nR} (and randomly picking the rest until the
parity is ok). Now the state of the stream cipher just
after feeding in the reader nonce is α64 ⊕ 1, i.e., α64
with the last bit ﬂipped. Since the parity of the last
byte of nR changed (since the attacker ﬂipped just the
last bit), and since its parity in the ﬁrst run is encrypted
with f (α64) and in the second run with f (α64⊕1), she
can deduce whether or not the last bit of nR inﬂuences
the encryption of the next bit, i.e., whether or not
f (α64) = f (α64 ⊕ 1). Approx. 9.4% of the possible
α64’s has f (α64) 6= f (α64) ⊕ 1 and they can easily be
generated since only the twenty bits that are input to f
are relevant. By repeating this, the attacker eventually
(on average after 10.6 tries) ﬁnds an instance in which
α64 is in those 9.4% and then she only has to search,
ofﬂine, 9.4% of all possible states.
We now make this idea precise and at the same time
generalize it to the last bit of each of the four bytes in
the reader nonce. The following deﬁnition says that a
reader nonce has property Fj (for j ∈ {0, 1, 2, 3}) if
ﬂipping the last bit of the (j + 1)th byte of the reader
nonce changes the encryption of the next bit.
Deﬁnition 4.1. Let j ∈ {0, 1, 2, 3} and let nR and
R be reader nonces with the property that n′
n′
R,8j+7 =
R,i = nR,i for all i  8j + 7). We say
that nR has property Fj if b8j+40 6= b′
8j+40.
After the tags sends its challenge nT , the attacker
answers {nR}, {aR}. Inside this answer, the attacker
also has to send the (encryptions of) the parity bits:
{p4}, . . . , {p11}. For these, she tries all 256 possibili-
ties. After on average 128 authentication sessions, and
after at most 256, with different choices for the {pi},
the parity bits are correct and the attacker recognizes
this because the tag responds with an error code.
Now the attacker deﬁnes {n′
R,8j+7} := {nR,8j+7},
i.e., she changes the last bit of the jth byte of {nR}.
R} she chooses the same as
The earlier bits of {n′
those of {nR};
R}
the attacker chooses arbitrarily. Again, the attacker
repeatedly tries to authenticate to ﬁnd the correct parity
bits {p′
i} = {pi}
for i ∈ {4, . . . , j + 3}, so this takes on average 27−j
authentication attempts and at most 28−j.
i} to send. Note that necessarily {p′
the later bits of {n′
R} and {a′
Now nR has property Fj if and only if {pj+4} 6=
j+4}.
{p′
the last bit of
the jth byte of nR,
Proof. Because the attacker modiﬁed the cipher-
text of
the
last bit of the plaintext of this byte also changes:
n′
R,8j+7 = {n′
R,8j+7} ⊕
b′
8j+39 = {nR,8j+7} ⊕ b8j+39 = nR,8j+7 ⊕ b8j+39 ⊕
the parity of this byte
b8j+39 = nR,8j+7. Hence,
changes: p′
R,8j+7⊕1 =
R,8j+6⊕n′
nR,8j ⊕ . . . nR,8j+6 ⊕ nR,8j+7 ⊕ 1 = pj+4.
8j+39 = {n′
R,8j+7} ⊕ b′
R,8j ⊕· · ·⊕n′
j+4 = n′
Formally this is not just a property of nR, but also
of k, nT , and u. Now k and u of course do not vary,
so we ignore that here. Furthermore, when deciding
whether or not nR has property Fj in Protocol 4.2
below, the attacker also keeps nT constant.
i, b′
The attacker does change the reader nonce. We use
i to refer to the bits of the LFSR-stream where the
a′
reader nonce n′
i, etc.