title:PSI: Precise Security Instrumentation for Enterprise Networks
author:Tianlong Yu and
Seyed Kaveh Fayaz and
Michael P. Collins and
Vyas Sekar and
Srinivasan Seshan
PSI: Precise Security Instrumentation
for Enterprise Networks
Tianlong Yu†, Seyed K. Fayaz†, Michael Collins(cid:91), Vyas Sekar†, Srinivasan Seshan†
†Carnegie Mellon University, (cid:91)RedJack
Abstract—Despite soaring investments in IT infrastructure,
the state of operational network security continues to be abysmal.
We argue that this is because existing enterprise security ap-
proaches fundamentally lack precision in one or more dimen-
sions: (1) isolation to ensure that the enforcement mechanism does
not induce interference across different principals; (2) context
to customize policies for different devices; and (3) agility to
rapidly change the security posture in response to events. To
address these shortcomings, we present PSI, a new enterprise
network security architecture that addresses these pain points.
PSI enables ﬁne-grained and dynamic security postures for
different network devices. These are implemented in isolated
enclaves and thus provides precise instrumentation on these above
dimensions by construction. To this end, PSI leverages recent
advances in software-deﬁned networking (SDN) and network
functions virtualization (NFV). We design expressive policy ab-
stractions and scalable orchestration mechanisms to implement
the security postures. We implement PSI using an industry-grade
SDN controller (OpenDaylight) and integrate several commonly
used enforcement tools (e.g., Snort, Bro, Squid). We show that
PSI is scalable and is an enabler for new detection and preven-
tion capabilities that would be difﬁcult to realize with existing
solutions.
I.
INTRODUCTION
Despite dramatic escalation in cost (e.g., 7.3 billion dol-
lars/year for the US Government [47]) the state of operational
network security is still abysmal. We continue to hear about
high-proﬁle breaches and failures of existing network security
infrastructures [33], [37], [56]. In many ways, these indicate
the collective failure of traditional network security approaches
for enterprises including perimeter-defenses [65], distributed
ﬁrewalls [41], Security Information and Event Management
(SIEM) systems [21], network management products [13],
[71], among others.
As a well-known fact in the operational security commu-
nity [1], [26], current solutions do not and cannot effectively
implement precise defenses along three key dimensions: iso-
lation, context, and agility (§II):
• Isolation: First, a defense system must ensure that security
policies do not interfere with each other and cause collateral
damage. Due to cost and network management limitations,
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23200
existing approaches enforce policies at topological “choke
points” [41]. This induces both logical and performance
interference. For example, reconﬁguring a ﬁrewall to block
a speciﬁc user can unintentionally block others (logical
interference), or processing trafﬁc may overload the ﬁrewall,
cause dropped packets (performance interference) and may
lead to the shutting down of advanced security functions
[16].
• Context: Second, a defense system must be able to enforce
customized policies for individual network devices based on
the context — all the security-related device attributes and
states. For example, a ﬁrewall protecting a database should
allow a http server with OpenSSL 1.0.1g to access the
database (heartbleed patched), but should deny the access of
the other http server with OpenSSL 1.0.1f (vulnerable
to heartbleed), even if both servers are exposing the same
IP and ports to the ﬁrewall (via NAT). The state of the
practice relies on trafﬁc attributes such as IP addresses
or netblocks. Unfortunately, this induces signiﬁcant “blind
spots” as the relevant contextual attributes may be obscured
due to topological artifacts; e.g., the device origin may be
hidden behind a NAT [36].
• Agility: Finally, a defense system must be able to change
policy at ﬁne-grained timescales. We know that attackers dy-
namically alter their strategies (e.g., moving laterally inside
the perimeter, switching to different exploit kits at different
stage [55]). Ideally, we should be able to dynamically
change our posture when speciﬁc internal hosts appear to
be engaging in suspicious activities. Unfortunately, today’s
mechanisms are derived from static abstractions (e.g., ACLs,
signatures) and cannot express and implement such dynamic
capabilities.
To address these limitations, let us consider a hypothet-
ical design point as shown in Figure 1 where we can: (1)
physically and logically isolate the processing applied to the
trafﬁc to/from one device from trafﬁc to/from other devices;
(2) ensure ﬁne-grained customization based on the relevant
context (e.g., this trafﬁc is from a device with heartbleed
vulnerability); and (3) dynamically instantiate the necessary
security processing (e.g., if a BYOD device suddenly tries to
connect to an irrelevant internal server (suspicious), subject
it to deep inspection or quarantine it). By construction, this
design addresses the above limitations—it has deep context
into every packet, the processing can be dynamically adjusted,
and it guarantees zero interference. Based on the current trajec-
tory of enterprise security solutions (i.e., relying on statically
conﬁgured hardware appliances deployed at designated net-
work chokepoints), however, this design may seem hopelessly
elusive in terms of cost, complexity, and deployability.
Fig. 1: Contrasting today’s approaches vs. PSI
II. MOTIVATION
Fig. 2: An example enterprise network from an enterprise
intrusion incident [10].
In this paper, we present Precise Security Instrumentation
(PSI), which serves as a proof-by-construction realization of
this hypothetical design (§III). PSI uses recent advances in
Network Functions Virtualization (NFV) to launch virtualized
security functions (e.g., virtual NIDS) on demand [30] inside
an on-premise cluster and SDN capabilities to route the trafﬁc
to the desired virtual appliances. Thus, PSI can serve as an
enabler for new precise security detection and prevention ca-
pabilities that would be exceedingly difﬁcult, if not impossible,
with existing mechanisms.
Contributions: Our goal in this paper is to design the tech-
nical foundations for PSI, rather than develop new detection
and prevention algorithms. To this end, we make three key
contributions:
• Expressive Polices (§IV): We design a PSI policy abstrac-
tion that can express agile and contextual trafﬁc processing.
This allows us to express rich multi-stage security-relevant
processing mapped to a security-relevant state for each
device; e.g., a host in normal state is subject to simple IDS-
followed-by-ﬁrewall but in “suspicious” state may be subject
to additional on-demand exﬁltration detection modules. We
also provide mechanisms to incorporate legacy policies that
need to be applied to a group of devices.
• Scalability and Responsiveness (§V): Naively applying
SDN/NFV mechanisms in security context is problematic
and can introduce new avenues for DoS attacks [63]. We
develop a scalable orchestration platform by synthesizing
three key ideas: (a) proactive forwarding schemes based on
logical tags that do not need to involve the controller; (b)
effective techniques for horizontally scaling the controller
infrastructure; and (c) prefetching future enforcement states
to improve responsiveness.
Implementation (§VI–§VII): We prototype
• Practical
PSI
an
platform
in
(OpenDaylight) [17]. We extend a range of widely
used open source network security tools (e.g., Snort, Squid,
iptables) and integrate them within PSI. We show that
PSI can coordinate complex policies on networks of up to
100,000 hosts without signiﬁcant performance overload.
Finally, we demonstrate use cases showing how PSI can
enable new security capabilities (e.g., IoT patch).
SDN control
industry-grade
In this section, we motivate the need for isolation, context,
and agility using a simple but realistic enterprise network
topology (§II-A). Then, we discuss our threat model, highlight-
ing the attackers’ goals, capabilities, and potential strategies
in §II-B. Given this setup, §II-C presents attack scenarios that
highlight key shortcomings in current mechanisms with respect
to isolation, context, and agility.
A. Problem setting
Network Description: Figure 2 depicts a small enterprise
network composed of multiple switches1 and middleboxes
(e.g., ﬁrewalls, NATs, proxies, IPSes). This network connects
multiple devices such as hosts, databases and servers. The
devices are protected by a collection of security middleboxes
(e.g., FW1 , FW2 and IPS1 ). Like most enterprise networks,
the depicted network has some more complex subcomponents:
a NAT changes IP and port addresses of packets; DHCP dy-
namically assigns IP to some devices and server1 is connected
to both s2 and s3 with different IP addresses to support failure
recovery or high throughput [20].
Security intent: The intent of the operator is to enforce secu-
rity postures as a function of network devices and their context
(device attributes and security states), namely, intent =
f unction(device, context device). For example, a device may
be a HTTP server, and the context may be it has n-day
Heartbleed vulnerability.
B. Threat Model
The goal of attackers is to compromise devices, exﬁltrate
data, or disrupt services. To achieve these goals, attackers
need to evade the detection and mitigation of current defense
system. There are four general strategies the attackers can use:
being stealthy, being dynamic, causing collateral damage, and
overloading the defense:
• Being stealthy: Attackers can use “blind spots”—devices
or trafﬁc routes not visible to the defense system, to avoid
detection. For example, an attacker can exploit a BYOD
device and use it to launch internal attacks that can avoid
the detection of IPS at the department gateway, as seen in
the Shady RAT exploit [10].
1We use the terms router and switch interchangeably.
2
  Internet Traditional network security  Many	
  false	
  +/-­‐	
  Coarse,	
  Sta+c	
  Policies	
  Lack	
  Context	
  Lack	
  Visibility	
  Hardware Appliances PSI vision 	
  Internet Isolated,	
  Customized	
  Appliances	
  PSI	
  Controller	
  Fine-­‐grained	
  Postures	
  Interference	
  Dynamic	
  Orchestra+on	
  laptop	server1	host3	server2	s3	DHCP	Internet	FW1	IPS1	host1	host2	s1	NAT	FW2	DB	s2	s0	• Being dynamic: Attackers can adjust their attack postures
to achieve their goals. For instance, we commonly see multi-
stage and multi-vector attacks such as using a zero-day
attack to bypass the defense and compromise an initial
device [5],
then using multiple exploit
toolkits [11] to
compromise others from private network.
• Causing collateral damage: Attackers can force the de-
fense system to act on innocent users or not act at all.
For example, an attacker behind a NAT can force an IPS
to enforce deep packet inspection (DPI) for all trafﬁc at
the gateway, which can degrade performance for legitimate
trafﬁc [16].
• Overloading the defense: Attackers can overload the de-
fense systems or the administrator. For example, an attacker
can increase the trafﬁc volume to overload an IPS or use
malformed packets to generate a large scale of alerts to
overload the alerting systems or the administrator.
Our threat model assumes that the attacker cannot directly
compromise the defense system (e.g., infect the IDS or the
SIEM system).
C. Motivating Scenarios
Next we walk through several scenarios to highlight how
the attackers can evade existing mechanisms such as perimeter
defense [24], distributed Firewall/IPS [12], [41], [51], [58],
SIEM (Security Information & Event Management) [6], [21],
and network segmentation (e.g., vLAN [13]). These scenarios
highlight the importance of isolation, context, and agility in
mitigating the attacker’s strategies above.
Isolation: Our example network (Figure 2) lacks isolation in
two ways: performance interference and logical interference.
Attackers can exploit this interference to cause collateral dam-
age. Performance interference results from the need to process
trafﬁc through narrow enforcement points. For example, in
Figure 2, IP S1 is shared across all devices’ trafﬁc from/to the
Internet. Suppose, an attacker is exploiting server1, which has
massive inbound/outbound trafﬁc, and the administrator uses
a DPI module at IP S1 to stop the exploit. Here IP S1 can be
overloaded, and the throughput of other devices (e.g., host3)
will also decrease. Thus, the attack causes collateral damage to
host3. Logical interference results from the fact that common
enforcement points often result in policy speciﬁcations that are
coarse-grained or prone to misconﬁguration [75]. For example,
suppose an attacker has compromised host1 and use it to
access to the database server DB. To stop the attack, the
administrator updates the ﬁrewall policy at F W2 to block the
IP of host1. Due to the NAT, host1 and host2 are exposing the
same IP and the updated policy can unintentionally interfere
with host2’s access to DB. This kind of problem is commonly
reported on operational forums [3], [49]. In terms of the
security intent we deﬁned in §II-A, interference conceptually
means that the same device can be affected with conﬂicting
intents.