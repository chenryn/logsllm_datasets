2 ∈ M× ˆC
Mult : On input two level-1 ciphertexts C (1)
this algorithm outputs a level-2 ciphertext C (1) = α ∈ ˆC
computed as:
1 , C (1)
α = ˆEnc(pk, a1 · a2) (cid:1) a1 · β2 (cid:1) a2 · β1
Add2 : On input two level-2 ciphertexts C (1)
2 =
α2 ∈ ˆC this algorithm returns a level-2 ciphertext C (1) =
α ∈ ˆC computed as
1 = α1, C (1)
α = α1 (cid:1) α2
t
1 , . . . , C (2)
Finally, given a ciphertext C (1), a multiplication by a known
constants c ∈ M is achieved straightforwardly:
if C =
(a, β), simply return (c · a, c · β); if C = α return c · α.
i = bi ∈ M for all i ∈
): let C (2)
2S.Eval2(pk, f, C (2)
[t]. The algorithm simply executes f over the bi’s. Namely,
output C (2) = b = f (b1, . . . , bt) ∈ M.
2S.Dec(sk, C (1), C (2)): the decryption proceeds slightly dif-
ferently according to whether the ciphertext component
C (1) is of level-1 or level-2.
Given C (1) = (a, β) and C (2) ∈ M, output m ← a + C (2).
Given C (1) = α ∈ ˆC and C (2) ∈ M, output m ← ˆDec(sk, α)+
C (2).
We notice that the β component of C (1) is not necessary
for decryption. That is, in order to save bandwidth one
may require the ﬁrst server not to transmit β.
Security. First, we prove that our protocol is semantically-
secure according to our Deﬁnition 10.
Theorem 5. If ˆHE is semantically-secure, then 2S.DCED
is a semantically-secure protocol for two-server delegation of
computation on encrypted data.
The proof is rather straightforward and is omitted.
To continue, we show that the protocol 2S.DCED satisﬁes
context-hiding as per Deﬁnition 11.
Theorem 6. If ˆHE is circuit-private, then 2S.DCED is
context-hiding.
Proof. Let ˆSim be the simulator for the circuit privacy
of ˆHE. For an arithmetic circuit f of degree 1 the simulator
Sim(1λ, (cid:126)C1, f, pk, m = f ( (cid:126)m1, (cid:126)m2)) can simply output (cid:100)C (1) =
(m − b, ˆSim(1λ, pk, b)) and (cid:100)C (2) = b where b = f ((cid:126)b1,(cid:126)b2) for
a randomly sampled (cid:126)b2 ∈ Mt2 and for (cid:126)b1 = (cid:126)C (2)
1. If f is
ˆSim(1λ, pk, m − b). It is straightforward to see that by the
of degree 2, the simulator does the same except that (cid:100)C (1) =
circuit privacy of ˆHE ((cid:100)C (1), (cid:100)C (2)) is indistinguishable from
the pair (C (1), C (2)) produced by the algorithms 2S.Eval1
and 2S.Eval2 respectively.
Unbalanced Eﬃciency and Unbalanced Security. Our
2S-DCED protocol described above achieves two interesting
properties. The ﬁrst one, that we call unbalanced eﬃciency,
says, very roughly, that one of the two servers needs to invest
much fewer computational resources. More in detail, the
second server – the one executing 2S.Eval2 – can run much
faster than the ﬁrst server since it does not have to do any
public key operation. Essentially, it can perform as if it com-
putes over the messages in the plain. Moreover, the storage
overhead at such second server, i.e., the ratio |C (2)|/|m|, is
basically null. This property is particularly relevant in cloud
scenarios where clients have to pay for the servers’ storage
space and CPU cycles. In our solution the cost to pay to
the second server is indeed signiﬁcantly smaller.
The second property achieved by our construction is called
unbalanced security, and it says that the semantic security
of the protocol holds information-theoretically with respect
to the second server10, the same one who can run faster.
Oﬄine/Online Encryption. Our 2S-DCED protocol
also enjoys the possibility to perform a pre-processing that
allows to encrypt very eﬃciently. In fact, the encryptor may
generate oﬄine all the random masks b, and send β = ˆEnc(b)
and b to the ﬁrst and second server, respectively. Next, in
the online phase, to encrypt m, one has to simply compute
a = (m − b) and send a to the ﬁrst server. As a further op-
timization, instead of storing all the b values, one may also
generate them using a PRF computed on a unique label
(e.g., a counter).
Comparison with other possible solutions. We note
that by using a linear secret sharing scheme it is possible to
construct a 2S-DCED protocol which uses only two servers,
though supporting only degree-1 computations. To support
degree-2 computations using secret sharing, one would need
at least three distinct non-colluding servers (see e.g., [12]).
On the other hand, a solution (with succinct communica-
tion) based on only one server can be achieved using a some-
what homomorphic encryption scheme supporting one mul-
tiplication. In contrast, our solution can achieve the same
result with only two servers and by using only a linearly-
homomorphic encryption scheme.
6. EXPERIMENTAL EVALUATION
To give the reader a glance of the practical eﬃciency of
the schemes resulting from our transformations of Section 4
and 5, we implemented the schemes obtained by using Pail-
lier [33] and Joye-Libert [25] as underlying cryptosystems.
We show the performances related to the HE scheme, and
we note that the performances for the two-server 2S.DCED
scheme are very similar. For decryption we measured the
decryption of a single ciphertext (which is what it is done in
2S.DCED): the shown value should be multiplied by (2L+1)
10With respect to the ﬁrst server the security still holds in a
computational sense.
1526for the total decryption time of HE, where L is the number
of degree-2 monomials in the computed function.
We compared the performance of our solutions with that
of the BGV [4] homomorphic encryption implemented in
HE-Lib [23], instantiated with parameters suitable to sup-
port one multiplication. Clearly, the somewhat homomor-
phic scheme always yields a single-server solution.
More in detail, we considered an application in which one
encrypts integers and wishes to perform computations with
128-bits precision.11 This led us to instantiate Joye-Libert
with message space Z
2128 and BGV with message space12
Zp[X]/Φm(X) where p is a 21-bits prime and φ(m) > 5000.
Paillier’s cryptosystem has always a large enough message
space ZN , with N of 1024 (resp. 3072) bits.
The schemes are implemented with security parameters of
80 and 128 bits, and both implementations of the Paillier-
based and Joye-Libert-based schemes use NTL [36] with
GMP [19]. Our timings were performed on a MacBook Pro
laptop (Intel Core i5, 8GB RAM) running Mac OS X 10.10.3.
A summary of the measured costs appear in Table 1.
Timing (ms) HE(Paillier)
80bit 128bit
Security
KeyGen
Enc
Add1
Mult
Dec
20.37 787.45
7.36 154.97
0.011
0.055
32.33 707.49
155
7.28
HE(JL13)
80bit 128bit
23.54 842.78
3.93
0.018
10.49
20.76
0.49
0.005
1.29
3.29
BGV12
80bit 128bit
590
31.7
0.136
44.58
82.38
4110
36.9
0.255
45.63
116
C. size (bytes)
256
768
128
384
71K
89K
Table 1: Cost comparisons.
By analyzing the above timings and comparing the result-
ing homomorphic encryption schemes, we observe that for
L = 10 the solution based on JL13 (with 80bits of secu-
rity) still achieves: a decryption time comparable to that
of BGV (69.09ms vs. 82.38ms); ciphertexts that are 25×
shorter (2.7KB vs. 71KB); encryption and homomorphic
operations timings that are at least 30× faster. On the
other hand, our HE schemes do not scale well for large val-
ues of L (still, for L ≤ 270 our solution wins for bandwidth
as ciphertexts remain shorter). Nevertheless, in the two-
server setting, although being in a weaker security model,
our solution outperforms the BGV somewhat homomorphic
encryption: ciphertexts are almost 500× shorter; encryption
and decryption is about 60× cheaper; the costs at the ﬁrst
server are roughly 36× faster, whereas the costs at the sec-
ond server are essentially negligible (we estimated the cost
of a multiplication in Z
2128 to 0.8µs).
Comparison with BGN . To complete the picture we
provide also comparisons with the BGN [3] cryptosystem.
For 128-bit security, Guillevic [22] argues that level-1 ci-
phertexts (i.e. ciphertexts for which homomorphic additions
and - one - multiplication can be performed) require 3072-
bits, whereas level-2 ciphertexts require (roughly) 6144 bits.
For 80-bit security we consider a public modulus of 1024
bits. This leads to ciphertext sizes of 1024 bits for level
1 ciphertexts and 2048 for level 2 ones. Thus, in terms
of bandwidth consumption, BGN performs better than our
JL13-based solution for essentially all computations involv-
11Such an application for example rules out encryption
schemes such as BGN that support only small messages.
12We use the optimized message encoding techniques of [31].
ing small plaintexts. The latter, however, is preferable both
in terms of plaintext space (it allows for exponentially large
message spaces) and in terms of computational eﬃciency.
Table 2 provides more precise indications of the measured
costs. These costs do not explicitly include the costs for
additions after the multiplication (i.e. Add2) as these are
essentially the same as those for Add1 in both cases. We
notice that the plaintext space for BGN refers to the size
(in bits) of the original encrypted messages. After multi-
plication such messages can double their length and this is
why Dec2 (i.e. decryption in the target group) is often much
more costly than Dec1.
Timing (ms)
BGN05
Security
80bit
128bit
KeyGen
Enc
Add1
Mult
Dec1
Dec2
446.969 5662.638
43.127
0.074
542.364
180.88
432.043 2188.677
3.936
0.018
28.872
22.893
HE(JL13)
80bit
128bit
18.96
0.07
0.0059
0.16
0.35
762.76
0.39
0.018
0.99
5.94
(2L+1) × Dec1
Table 2: Comparison with BGN for 10-bit messages.
Acknowledgments
The authors would like to thank Mario Di Raimondo and
Rosario Sebastiano Russo for providing help and support
for the implementations, and the anonymous reviewers for
their valuable comments.
7. REFERENCES
[1] B. Applebaum, Y. Ishai, and E. Kushilevitz. How to
garble arithmetic circuits. In R. Ostrovsky, editor,
52nd FOCS, pages 120–129. IEEE Computer Society
Press, Oct. 2011.
[2] D. Boneh, X. Boyen, and H. Shacham. Short group
signatures. In M. Franklin, editor, CRYPTO 2004,
volume 3152 of LNCS, pages 41–55. Springer, Aug.
2004.
[3] D. Boneh, E.-J. Goh, and K. Nissim. Evaluating
2-DNF formulas on ciphertexts. In J. Kilian, editor,
TCC 2005, volume 3378 of LNCS, pages 325–341.
Springer, Feb. 2005.
[4] Z. Brakerski, C. Gentry, and V. Vaikuntanathan.
(leveled) fully homomorphic encryption without
bootstrapping. In S. Goldwasser, editor, ITCS 2012,
pages 309–325. ACM, Jan. 2012.
[5] Z. Brakerski and V. Vaikuntanathan. Fully