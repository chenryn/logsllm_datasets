**作者：evilpan  
原文链接：  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
# 前言
随着社会越来越重视安全性，各种防御性编程或者漏洞缓解措施逐渐被加到了操作系统中，比如代码签名、指针签名、地址随机化、隔离堆等等，许多常见的内存破坏漏洞在这些缓解措施之下往往很难进行稳定的利用。因此，攻击者们的目光也逐渐更多地投入到逻辑漏洞上。逻辑漏洞通常具有很好的稳定性，不用受到风水的影响；但同时也隐藏得较深、混迹在大量业务代码中难以发现。而且由于形式各异，不太具有通用性，从投入产出比的角度来看可能不是一个高优先级的研究方向。但无论如何，这都始终是一个值得关注的攻击面。因此，本文就以
Android 平台为目标介绍一些常见的逻辑漏洞。
# 四大组件
接触过 Android 的人应该都听说过 “四大组件”，开发应用首先需要学习的就是各个组件的生命周期。所谓四大组件，分别是指 **Activity** 、
**Service** 、 **Broadcast Receiver** 和 **Content Provider**
，关于这些组件的实现细节可以参考官方的文档: [Application
Fundamentals](https://developer.android.com/guide/components/fundamentals)。
在安全研究中，四大组件值得我们特别关注，因为这是应用与外界沟通的重要桥梁，甚至在应用内部也是通过这些组件构建起了相互间松耦合的联系。比如应用本身可以不申请相机权限，但可以通过组件间的相互通信让（系统）相机应用打开摄像头并取得拍到的照片，仿佛是自身进行拍照的一样。
而在组件交互的过程中，最为核心的数据结构就是
[Intent](https://developer.android.com/reference/android/content/Intent)，这是大部分组件之间进行通信的载体。
# Intent 101
根据官方的说法，Intent 是 “对某种要执行的操作的抽象描述”，直译过来也可以叫做 “意图”，比如说 **想要**
打开摄像机拍照、想要打开浏览器访问网址，想要打开设置界面，……都可以用 Intent 来描述。
Intent 的主要形式有两种，分别是显式 Intent 和隐式 Intent；二者的差别主要在于前者显式指定了 `Component`，后者没有指定
Component，但是会通过足够的信息去帮助系统去理解意图，比如 `ACTION`、`CATAGORY` 等。
Intent 的最主要功能是用来启动 Activity，因此我们以这个场景为例，从源码中分析一下 Intent 的具体实现。启动 Activity
的常规代码片段如下：
    Intent intent = new Intent(context, SomeActivity.class);
    startActivity(intent);
这里用的是显式 Intent，但不是重点。一般在某个 Activity 中调用，因此调用的是 `Activity.startActivity`，代码在
_frameworks/base/core/java/android/app/Activity.java_ 中，这里不复制粘贴了，总而言之调用链路如下：
  * Activity.startActivity()
  * Activity.startActivityForResult()
  * Instrumentation.execStartActivity()
  * ActivityTaskManager.getService().startActivity()
  * IActivityTaskManager.startActivity()
最后一条调用是个接口，这是个很常见的 pattern 了，下一步应该去找其实现，不出意外的话这个实现应该在另一个进程中。事实上也正是在
`system_server` 中：
  * ActivityTaskManagerService.startActivity()
  * ActivityTaskManagerService.startActivityAsUser()
  * ActivityStarter.execute()
最后一个方法通过前面传入的信息去准备启动 Activity，包括 caller、userId、flags，callingPackage 以及最重要的
intent 信息，如下：
    private int startActivityAsUser(...) {
        // ...
        return getActivityStartController()
                .obtainStarter(
                    intent, "startActivityAsUser")
                .setCaller(caller)
                .setCallingPackage(callingPackage)
                .setCallingFeatureId(callingFeatureId)
                .setResolvedType(resolvedType)
                .setResultTo(resultTo)
                .setResultWho(resultWho)
                .setRequestCode(requestCode)
                .setStartFlags(startFlags)
                .setProfilerInfo(profilerInfo)
                .setActivityOptions(bOptions)
                .setUserId(userId)
                .execute();
    }
**ActivityStarter.execute()** 主要的逻辑如下:
    int execute() {
        // ...
        if (mRequest.activityInfo == null) {
            mRequest.resolveActivity(mSupervisor);
        }
        res = resolveToHeavyWeightSwitcherIfNeeded();
        res = executeRequest(mRequest);
    }
其中，`resolveActivity` 用于获取要启动的 Activity
信息，例如在隐式启动的情况下，可能有多个符合要求的目标，也会弹出菜单询问用户选用哪个应用打开。`executeRequest`
中则主要进行相关权限检查，在所有权限满足条件后再调用 `startActivityUnchecked` 去执行真正的调用。
其中大部分流程我在 [Android12 应用启动流程分析](https://evilpan.com/2021/12/05/apk-startup/)
中已经介绍过了，这里更多是关注 Intent 本身的作用。从上面的分析中发现，可以将其看作是多进程通信中的消息载体，而其源码定义也能看出 Intent
本身是可以可以序列化并在进程间传递的结构。
    public class Intent implements Parcelable, Cloneable { ... }
`Intent`
本身有很多方法和属性，这里暂时先不展开，后面介绍具体漏洞的时候再进行针对性的分析。后文主要以四大组件为着手点，分别介绍一些常见的漏洞模式和设计陷阱。
# Activity
[Activity](https://developer.android.com/reference/android/app/Activity)
也称为活动窗口，是与用户直接交互的图形界面。APP 主要开发工作之一就是设计各个 activity，并规划他们之间的跳转和连结。通常一个 activity
表示一个全屏的活动窗口，但也可以有其他的存在形式，比如浮动窗口、多窗口等。作为 UI 窗口，一般使用 XML 文件进行布局，并继承 Activity
类实现其生命周期函数 `onCreate` 和 `onPause` 等生命周期方法。
如果开发者定义的 Activity 想通过 `Context.startActivity` 启动的话，就必须将其声明到 APP 的 manifest
文件中，即
[AndroidManifest.xml](https://developer.android.com/guide/topics/manifest/manifest-intro)。应用被安装时，`PackageManager` 会解析其 manifest 文件中的相关信息并将其注册到系统中，以便在 `resolve`
时进行搜索。
在 adb shell 中可以通过 `am start-activity` 去打开指定的 Activity，通过指定 Intent 去进行启动：
    am start-activity [-D] [-N] [-W] [-P ] [--start-profiler ]
            [--sampling INTERVAL] [--streaming] [-R COUNT] [-S]
            [--track-allocation] [--user  | current] 
作为用户界面的载体，Activity
承载了许多用户输入/处理、以及外部数据接收/展示等工作，因此是应用对外的一个主要攻击面。下面就介绍几种较为常见的攻击场景。
## 生命周期
Activity 经典的生命周期图示如下：
通常开发者只需要实现 `onCreate` 方法，但是对于一些复杂的业务场景，正确理解其生命周期也是很必要的。以笔者在内测中遇到的某应用为例，其中某个
Activity 中执行了一些敏感的操作，比如开启摄像头推流，或者开启了录音，但只在 `onDestroy` 中进行了推流/录音的关闭。这样会导致在 APP
进入后台时候，这些操作依然在后台运行，攻击者可以构造任务栈使得受害者在面对恶意应用的钓鱼界面时候仍然执行目标应用的后台功能，从而形成特殊的钓鱼场景。正确的做法应该是在
`onPaused` 回调中对敏感操作进行关闭。
攻击者实际可以通过连续发送不同的 Intent 去精确控制目标 Activity
生命周期回调函数的触发时机，如果开发时没有注意也会造成应用功能的状态机异常甚至是安全问题。
## Implicit Exported
前面说过，开发者定义的 Activity 要想使用 `startActivity` 去启动，就必须在 AndroidManifest.xml 中使用
`` 进行声明，一个声明的示例如下：
[activity](https://developer.android.com/guide/topics/manifest/activity-element) 中支持许多属性。其中一个重要的属性就是 `android:exported`，表示当前 Activity 是否可以被 **其他应用**
的组件启动。该属性有几个特点：
  1. 属性可以缺省，缺省值默认为 `false`；
  2. 如果 Activity 没有显式设置该属性，且该 Activity 中定义了 ``，那么缺省值就默认为 `true`；
也就是说，开发者可能没有显式指定 Activity 导出，但由于指定了 `intent-filter`，因此实际上也是导出的，即可以被其他应用唤起对应的
Activity。这种情况在早期很常见，比如 APP
设计了一组更换密码的界面，需要先输入旧密码然后再跳转到输入新密码的界面，如果后者是导出的，攻击者就可以直接唤起输入新密码的界面，从而绕过了旧密码的校验逻辑。
Google 已经深刻意识到了这个问题，因此规定在 Android 12 之后，如果应用的 Activity 中包含 intent-filter，就必须要显式指定 `android:exported` 为 true 或者 false，不允许缺省。在 Android 12 中未显式指定
exported 属性且带有 intent-filter 的 Activity 的应用在安装时候会直接被 PackageManager 拒绝。
## Fragment Injection
Activity 作为 UI 核心组件，同时也支持模块化的开发，比如在同一个界面中展示若干个可复用的子界面。随着这种设计思路诞生的就是
[Fragments](https://developer.android.com/guide/components/fragments) 组件，即
“片段”。使用 `FragmentActivity` 可以在一个 Activity 中组合一个或者多个片段，方便进行代码复用，片段的生命周期受到宿主
Activity 的影响。
Fragment Injection 漏洞最早在 2013 年爆出，这里只介绍其原理，本节末尾附有原始的文章以及论文。漏洞的核心是系统提供的
`PreferenceActivity` 类，开发者可以对其进行继承实现方便的设置功能，该类的 onCreate 函数有下面的功能：
    protected void onCreate() {
        // ...
        String initialFragment = getIntent().getStringExtra(EXTRA_SHOW_FRAGMENT);
        Bundle initialArguments = getIntent().getBundleExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS);
        // ...
        if (initialFragment != null) {
            switchToHeader(initialFragment, initialArguments);
        }
    }
    private void switchToHeaderInner(String fragmentName, Bundle args) {
        getFragmentManager().popBackStack(BACK_STACK_PREFS,
                FragmentManager.POP_BACK_STACK_INCLUSIVE);
        if (!isValidFragment(fragmentName)) {
            throw new IllegalArgumentException("Invalid fragment for this activity: "
                    + fragmentName);
        }
        Fragment f = Fragment.instantiate(this, fragmentName, args);
    }
可以看到从 Intent 中获取了一个字符串和一个 Bundle 参数，并最终传入 `switchToHeaderInner` 中，用于实例化具体的
`Fragment`。实例化的过程如下：
    public static Fragment instantiate(Context context, String fname, Bundle args) {
        // ...
        Class clazz = sClassMap.get(fname);