## 模不互素 （`gcd(N1,N2)!=1`）
**适用情况：存在两个或更多模数 ，且`gcd(N1,N2)!=1` 。**
多个模数n共用质数，则可以很容易利用欧几里得算法求得他们的质因数之一`gcd(N1,N2)`
，然后这个最大公约数可用于分解模数分别得到对应的p和q，即可进行解密。实现参照本文`欧几里得算法` 部分和`RSA解密` 部分。
## 共模攻击
**适用情况：明文m、模数n相同，公钥指数e、密文c不同，`gcd(e1,e2)==1`**
对同一明文的多次加密使用相同的模数和不同的公钥指数可能导致共模攻击。简单证明见代码注释。
Python实现：
    def common_modulus(n, e1, e2, c1, c2):
        """
        ref: https://crypto.stackexchange.com/questions/16283/how-to-use-common-modulus-attack
        ∵gcd(e1,e2)==1,∴由扩展欧几里得算法，存在e1*s1+e2*s2==1
        ∴m==m^1==m^(e1*s1+e2*s2)==((m^e1)^s1)*((m^e2)^s2)==(c1^s1)*(c2^s2)
        """
        assert (libnum.gcd(e1, e2) == 1)
        _, s1, s2 = gmpy2.gcdext(e1, e2)
        # 若s1 0 else pow(gmpy2.invert(c1, n), -s1, n)
        m *= pow(c2, s2, n) if s2 > 0 else pow(gmpy2.invert(c2, n), -s2, n)
        return m % n
### 例子：QCTF2018-XMan选拔赛 / Xman-RSA 【共模攻击+模不互素】
这道题利用了共模攻击和模不互素。刚开始是一个字符替换，与本文无关。encryption.encrypted文件被做了字符替换，根据语法确定替换表，修复文件得到源文件如下。
题目附件见文末链接。
    from gmpy2 import is_prime
    from os import urandom
    import base64
    def bytes_to_num(b):
        return int(b.encode('hex'), 16)
    def num_to_bytes(n):
        b = hex(n)[2:-1]
        b = '0' + b if len(b) % 2 == 1 else b
        return b.decode('hex')
    def get_a_prime(l):
        random_seed = urandom(l)
        num = bytes_to_num(random_seed)
        while True:
            if is_prime(num):
                break
            num += 1
        return num
    def encrypt(s, e, n):
        p = bytes_to_num(s)
        p = pow(p, e, n)
        return num_to_bytes(p).encode('hex')
    def separate(n):
        p = n % 4
        t = (p * p) % 4
        return t == 1
    f = open('flag.txt', 'r')
    flag = f.read()
    msg1 = ""
    msg2 = ""
    for i in range(len(flag)):
        if separate(i):
            msg2 += flag[i]
        else:
            msg1 += flag[i]
    p1 = get_a_prime(128)
    p2 = get_a_prime(128)
    p3 = get_a_prime(128)
    n1 = p1 * p2
    n2 = p1 * p3
    e = 0x1001
    c1 = encrypt(msg1, e, n1)
    c2 = encrypt(msg2, e, n2)
    print(c1)
    print(c2)
    e1 = 0x1001
    e2 = 0x101
    p4 = get_a_prime(128)
    p5 = get_a_prime(128)
    n3 = p4 * p5
    c1 = num_to_bytes(pow(n1, e1, n3)).encode('hex')
    c2 = num_to_bytes(pow(n1, e2, n3)).encode('hex')
    print(c1)
    print(c2)
    print(base64.b64encode(num_to_bytes(n2)))
    print(base64.b64encode(num_to_bytes(n3)))
n2，n3已知，利用共模攻击得到n1，由`gcd(n1,n2)==p1` 分解n1，n2，就可解密得到两部分msg，拼接即可。
解题脚本如下：
    # -*- coding: utf-8 -*-    # by https://findneo.github.io/
    import base64
    import libnum
    import gmpy2
    def fix_py():
        # decode encryption.encrypted
        s1 = 'abdefghijklmpqrtuvwxyz'
        s2 = 'dmenwfoxgpyhirasbktclu'
        f1 = open('encryption.encrypted')
        with open('encryption.py', 'w') as f2:
            for i in f1.readlines():
                tmp = ''
                for j in i:
                    tmp += s2[s1.index(j)] if j in s1 else j
                f2.write(tmp)
    # fix_py()
    def common_modulus(n, e1, e2, c1, c2):
        assert (libnum.gcd(e1, e2) == 1)
        _, s1, s2 = gmpy2.gcdext(e1, e2)
        m = pow(c1, s1, n) if s1 > 0 else pow(gmpy2.invert(c1, n), -s1, n)
        m *= pow(c2, s2, n) if s2 > 0 else pow(gmpy2.invert(c2, n), -s2, n)
        m %= n
        return m
    [n2, n3] = map(lambda x: int(base64.b64decode(x).encode('hex'), 16),
                   open('n2&n3').readlines())
    [n1c1, n1c2] = map(lambda x: int(x, 16), open('n1.encrypted').readlines())
    [msg1c1, msg2c2] = map(lambda x: int(x, 16), open('ciphertext').readlines())
    # 通过共模攻击得到n1
    e1 = 0x1001
    e2 = 0x101
    n1 = common_modulus(n3, e1, e2, n1c1, n1c2)
    # n1,n2有一个共有质因数p1
    # n1 += n3  # 存在n3比n1小的可能，并且确实如此;貌似主办方中途改题，把n1改成小于n3了。
    p1 = gmpy2.gcd(n1, n2)
    assert (p1 != 1)
    p2 = n1 / p1
    p3 = n2 / p1
    e = 0x1001
    d1 = gmpy2.invert(e, (p1 - 1) * (p2 - 1))
    d2 = gmpy2.invert(e, (p1 - 1) * (p3 - 1))
    msg1 = pow(msg1c1, d1, n1)
    msg2 = pow(msg2c2, d2, n2)
    msg1 = hex(msg1)[2:].decode('hex')
    msg2 = hex(msg2)[2:].decode('hex')
    print msg1, msg2
    # XA{RP0I_0Itrsigi s.y
    # MNCYT_55_neetnvmrap}
    # XMAN{CRYPT0_I5_50_Interestingvim rsa.py}
## 小明文攻击
**适用情况：e较小，一般为3。**
公钥e很小，明文m也不大的话，于是`m^e=k*n+m` 中的的k值很小甚至为0，爆破k或直接开三次方即可。
Python实现：
    def small_msg(e, n, c):
        print time.asctime(), "Let's waiting..."
        for k in xrange(200000000):
            if gmpy2.iroot(c + n * k, e)[1] == 1:
                print time.asctime(), "...done!"
                return gmpy2.iroot(c + n * k, 3)[0]
### 例题：Jarvis OJ Extremely hard RSA
题目提供的n是4096位的，e=3。
    import gmpy2,binascii,libnum,time
    n=0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929
    e=3
    res=0
    c=int(open('extremelyhardRSA.rar/flag.enc','rb').read().encode('hex'),16)
    print time.asctime()
    for i in xrange(200000000):
        if gmpy2.iroot(c+n*i,3)[1]==1:
            res=gmpy2.iroot(c+n*i,3)[0]
            print i,res
            print libnum.n2s(res)
            print time.asctime()
            break
## Rabin加密中的N可被分解
**适用情况：e==2**
Rabin加密是RSA的衍生算法，e==2是Rabin加密典型特征，可以百度或阅读
以了解到详细的说明，这里只关注解密方法。一般先通过其他方法分解得到p，q，然后解密。
Python实现：
    def rabin_decrypt(c, p, q, e=2):
        n = p * q
        mp = pow(c, (p + 1) / 4, p)
        mq = pow(c, (q + 1) / 4, q)
        yp = gmpy2.invert(p, q)
        yq = gmpy2.invert(q, p)
        r = (yp * p * mq + yq * q * mp) % n
        rr = n - r
        s = (yp * p * mq - yq * q * mp) % n
        ss = n - s
        return (r, rr, s, ss)
函数返回四个数，这其中只有一个是我们想要的明文，需要通过其他方式验证，当然CTF中显然就是flag字眼了。