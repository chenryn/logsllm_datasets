control, but only hope for, the availability of vulnerable apps on
users’ devices, the reality has been working towards attacker’s fa-
vor due to the large number of under-trained Android developers
and an overall lack of app quality assurance. Therefore, as a de-
fensive effort, we designed CHEX to assist apps developers, testers,
and market operators in ﬁltering out apps vulnerable to component
hijacking attacks before they reach end user devices. We chose
to target CHEX on non-malicious apps, which constitute the ma-
jority of exploitation targets, so that we can safely assume a non-
adversarial application scenario (e.g. heavy obfuscations and anti-
analysis techniques are out of our concern) and solely focus on de-
signing the detection and analysis method.
3. DETECTION AND ANALYSIS METHOD
CHEX follows a static program analysis approach, featuring a
novel data-ﬂow analyzer specially designed to accommodate An-
droid’s special app programming paradigms. Static analysis makes
sense for vetting benign apps in that, the anti-analysis techniques
that are commonly used in adversarial scenarios are out of scope,
and the advantages of static analysis, such as its completeness and
bounded time complexity, are well suited to addressing the vulner-
ability discovery problem.
Existing data-ﬂow analysis and modeling methods are not imme-
diately applicable to Andriod apps due to Android’s special event-
driven programming paradigm. Our ﬂow- and context-sensitive an-
alyzer, incorporated with a number of analysis techniques and mod-
els that we devised for Android apps, can efﬁciently discover data
ﬂows of interest within the entire app. Its underlying ﬂow extrac-
tion mechanism is separated from the high level policies that deﬁne
interesting ﬂows. As a result, our data-ﬂow analysis method can
be applied to other applications than vulnerability discovery. Our
method also offers the ﬂexibility to choose if the Android frame-
work code3 needs to be included or simply modeled during the
analysis, depending on speciﬁc usage scenarios. In this paper, we
model the framework code for reasons discussed in Section 3.2.
Next, we present a concrete example to illustrate component hi-
jacking vulnerabilities, as well as typical challenges associated with
performing data-ﬂow analysis on Android apps.
3.1 A component hijacking example
Our example is a hypothetical Android app that aggregates the
popular location-based services and provides a one-stop solution
for users. Figure 2 shows a critical Service component of the
app. Upon requested by particular Intents, this component ob-
tains user’s location information and synchronizes it with a remote
server. Despite that the component is intended for the app’s in-
ternal use only, its developer carelessly left it open to other apps.
This mistake is not uncommon partly because Android by de-
fault publicly exports components that register to accept particular
Intents. Here, we demonstrate two possible component hijack-
ing attacks on this example app and highlight the challenges asso-
ciated with analyzing the code. The vulnerabilities in this example
app are similar to those that we found in the real apps and reported
in Section 5.2.
In Figure 2, Method onBind (Ln. 5) is invoked by the frame-
work whenever a requester component connects to the Service.
Android programming paradigm dictates that apps organize their
logic into components of different kinds, whose life-cycles are
managed by the framework in an event-driven manner. Each com-
ponent implicitly or explicitly registers event handlers (e.g. Ln. 5,
10, and 32). These handlers serve as the entry points through
which the framework starts or activates the component when han-
dled events happen. Apps, even average-sized ones, can have a
large amount of entry points of diverse object types and appear-
ances, which posed the ﬁrst challenge to our analysis:
C1 : Reliably discovering all types of entry points (or event
handlers) in their completeness.
Method onBind returns to the requester component an object
that implements the IBinder interface (Ln. 6) — a common
pattern to achieve inter-component communications in Android
apps. The requester component can then send messages for the
3Android framework consists of the Dalvik runtime and Android
system libraries. We refer to it as the framework hereafter. Note
that apps (including system apps) are not part of the framework.
231to the variable that controls the URL to be contacted (i.e. realizing
G2).
Sometimes it takes multiple individual data-ﬂows, loosely con-
nected or partially overlapped, to enable one of the three goals de-
scribed in Deﬁnition 1. In our example, two individual data-ﬂows
together allow the attacking app to read the location information
(i.e. by forcing the vulnerable component to retrieve and send the
location information to a speciﬁed URL): one ﬂow carrying loca-
tion data obtained on Ln. 15 to the HTTP Post on Ln. 36 and the
other carrying requester-supplied URL on Ln. 19 to the same HTTP
Post operation. To detect such hijack-enabling ﬂows , a data-ﬂow
analyzer needs to tackle the challenge of:
C3 : Assessing the collective side-effects of individual
data-ﬂows and identifying converged ﬂows of interest.
For optimized responsiveness, Android apps always perform
blocking operations within the doInBackGround method in
AsyncTask4, such as network-send (Ln. 30). The message
handler prepares the network-send parameter with the requester-
supplied URL (Ln. 20). Once execute on the next line is called,
the framework starts doInBackGround (Ln. 32) in a new thread,
introducing another entry point to the component. Code that is
reachable from each entry point is a segment of the entire com-
ponent code. These segments can be statically determined via
reachability analysis. We refer to them as splits (deﬁned shortly).
Although executing in separate contexts, splits are by no means
isolated and in fact can relate to each other through inter-split
data-ﬂows. Heap and global variables used in different split can
form these ﬂows. Note that there exist two hijack-enabling ﬂows
that originate from the split started by handleMessage and
reach to the split started by doInBackground:
(i) the heap
variable currLoc assigned with the location data (Ln. 15) and
used as the HTTP Post content (Ln. 34), and (ii) the local array
sendParams containing the URL (Ln. 20), implicitly passed to
params on Ln. 32 by the framework as an entry point parameter,
and used for the HTTP Post (Ln. 34). Therefore, our analyzer
needs to be capable of:
C4 : Tracking data ﬂows across splits and components.
In summary, this example demonstrates that a component is vul-
nerable to hijacks when it is exported to the public without lim-
iting its interfaces to intended users.
It also shows that using
hijack-enabling data-ﬂows to model the vulnerability is general
and straightforward. A program analyzer aiming at detecting these
ﬂows faces four major challenges imposed by the unique Android
programming paradigms (C1, C2) or by the complications of the
data-ﬂows (C3, C4). Next, we introduce our approach to conduct-
ing data-ﬂow analysis on Android apps, with vulnerability detec-
tion as an application. We propose analysis methods and models
that overcome the challenges discussed above. They are expected
to be useful to other types of app analysis as well.
3.2 Analysis methods and models
The reason why we chose to model the framework, instead of
including all its code into the analysis scope, is because of the
complexity of analyzing the framework code and the simplicity of
modeling its external data-ﬂow behavior. Due to the framework’s
extensive use of reﬂections, mixed use of programming languages,
and overwhelming code size, including the framework code into
the analysis scope incurs a signiﬁcant amount of overhead and in-
troduces certain extent of inaccuracy to the analysis. Therefore,
4A convenient threading construct provided by the framework.
Figure 2: Vulnerable component example
Service to handle via the object. It is the framework that deliv-
ers the message and invokes handleMessage as an entry point
(Ln. 10) when an incoming message arrives. Since the invocations
of different entry points in an app can be asynchronous, we faced
the second challenge:
C2 : Soundly modeling the asynchronous invocations of entry
points for analysis.
Once connected to the example Service, an attacking app
can exploit at least two separate component hijacking vulnerabil-
ities to obtain the device location and perform network commu-
nications respectively, neither incurring any permission violations
or user interactions. Speciﬁcally, the attacking app can send a
MSG_UPDATE_LOCATION message, followed by a MSG_SYNC_
LOCATION message, to coerce the message handler to ﬁrst re-
trieve the device location (Ln. 15) and then send the data to a
URL of the attacker’s choice (Ln. 21). Alternatively, using a sin-
gle MSG_SYNC_LOCATION message, the attacking app is able to
make connections to arbitrary URL he supplies in the message.
Based on Deﬁnition 1, these two particular cases of component
hijacking are enabled by data-ﬂows that respectively allow the at-
tacker to (i) read the location data (i.e. realizing G1), and (ii) write
1publicclassSyncLocSrvextendsService{2LocationcurrLoc;3finalMessengermMessenger=newMessenger(newReqHandler());45publicIBinderonBind(Intentintent){6returnmMessenger.getBinder();7}89privateclassReqHandlerextendsHandler{10publicvoidhandleMessage(Messagemsg){11...12switch(msg.what){13caseMSG_UPDATE_LOCATION:14//getGPSlocation15currLoc=lm.getLastKnownLocation(PROVIDER);16break;17caseMSG_SYNC_LOCATION:18//syncGPSwithspecifiedURL19Stringurl=msg.getData().getString("url");20String[]sendParams=newString[]{url};21newSendToNetwork().execute(sendParams);22break;23...24default:25...26}27}28}2930privateclassSendToNetworkextendsAsyncTask{31//runinaseparatethread32protectedStringdoInBackground(String[]params){33HttpClienthc=newDefaultHttpClient();34HttpPostpst=newHttpPost(params[0]));//URL35pst.setEntity(newStringEntity("gps:"+currLoc));36HttpResponseresp=hc.execute(pst);37returnresp.toString();38}39}40...41}Listing1:VulnerablecomponentexampleC2:Soundlymodelingtheasynchronousinvocationsofentrypointsforanalysis.OnceconnectedtotheexampleService,anattackingappcanexploitatleasttwoseparatehijackingvulnerabilitiestoobtainthedevicelocationandperformnetworkcommuni-cationsrespectively,withoutrequiringanypermissionsoruserinteractions.AMSG_UPDATE_LOCATIONfollowedbyaMSG_SYNC_LOCATIONmessagefromanattackercancoercethemessagehandlertoﬁrstretrievethedevicelocation(Ln.15)andthensendthedatatoaURLoftheattacker’schoice(Ln.21).Alternatively,withasingleMSG_SYNC_LOCATION,anattackerisabletomakearbitraryconnectionstoanyURLhesuppliedinthemessage.BasedonDeﬁnition1,thesetwoparticularcasesofcomponenthijackingareasso-ciatewithhijack-enablingﬂowsthatrespectivelyallowtheattackerto(i)readthelocationdata(i.e.realizingG1),and(ii)writetothevariablethatcontrolstheURLtobecon-tacted(i.e.realizingG2).Ingeneral,hijack-enablingﬂowsoftenconsistofmulti-pleindividualdata-ﬂowsthatareeitherlooselyconnectedorpartiallyoverlapped.TheycollectivelyenableoneofthethreegoalsdescribedinDeﬁnition1.Inourexample,twoin-dividualdata-ﬂows–onecarryinglocationdataobtainedonLn.15totheHTTPPostonLn.36andtheothercarryingrequester-suppliedURLonLn.19tothesameHTTPPostoperation–formthehijack-enablingﬂowsthattogetheral-lowanattackertoreadthelocationdata.Thecapabilityofdetectingsuchhijack-enablingﬂowshingesonnotonlyanaccuratedata-ﬂowtracker,butmoreimportantly,anana-lyzerthattacklesthechallengeof:C3:Assessingthecollectiveside-e↵ectsofindividualdata-ﬂowstoidentifyconvergedﬂowsofinterest.Duetotheasynchronousinvocationsofentrypointswithunknowncall-sites,trackingdata-ﬂowsarenotasstraight-forwardinAndroidappsasintraditionalprograms.Codethatisreachablefromeachentrypointisasubsetoftheen-tirecomponentcodeandcanbestaticallydetermined.Werefertothesesubsetsassplits(deﬁnedshortly).However,splits,thoughrepresentingseparateexecutioncontexts,arebynomeansisolatedandinfactcanrelatetoeachotherwithinter-splitdata-ﬂowsthatareenabledbyheaporglobalvariables,orcreatedbytheframework.Intheexample,toimprovetheappresponsiveness,thenetworkrelatedoper-ationissettoexecuteasanAsyncTask(i.e.aconvenientthreadingconstructprovidedbytheframework).OnLn.21,handleMessagepreparestheparameterforSendToNetworktaskwiththerequester-suppliedURLandthenleavesitfortheframeworktostartdoInBackGround(Ln.32)inanewthreadwiththeparameter–essentiallyintroducinganotherentrypointtothecomponent.Notethatthereexisttwohijack-enablingﬂowsthatcrosstheboundarybetweenthesplitsstartedbyhandleMessageanddoInBackground:(i)theheapvariablecurrLocassignedwiththelocationdata(Ln.15)andusedastheHTTPPostcontent(Ln.34),and(ii)thelocalarraysendParamscontainingtheURL(Ln.20),implicitlypassedtoparamsonLn.32bytheframework,andusedfortheHTTPPost(Ln.34).Similarly,hijack-enablingﬂowscanhappenacrosscomponentstoo.Therefore,ouranalyzerneedstobecapableof:C4:Trackingdataﬂowsacrosssplitsandcomponents.Insummary,theexampledemonstratesthatacomponentisvulnerabletohijackswhenitisexportedtothepub-licwithoutassuringtoonlyacceptrequestsfromintendedusers.Italsoshowsthatusinghijack-enablingdata-ﬂowstomodelthevulnerabilityisgeneralandstraightforward,butaprogramanalyzeraimingatdetectingthoseﬂowsfacesfourmajorchallengesimposedbytheuniqueAndroidpro-grammingparadigms(C1,C2)orbythecomplicationsofthedata-ﬂows(C3,C4).Next,weintroduceourapproachtoconductingdata-ﬂowanalysisonAndroidapps,withvul-nerabilitydetectionasanapplication.Weproposeanalysismethodsandmodelsthatovercomethechallengesdiscussedaboveandareexpectedtobeusefultootherapplicationsaswell.3.2AnalysismethodsandmodelsThereasonwhywechosetoexcludetheframeworkoutoftheanalysisscope,andwebelievemostdata-ﬂowanalysisofappsshoulddothesame,isbecauseofthecomplexityofanalyzingtheframeworkcodeandthesimplicityofmodel-ingitsexternaldata-ﬂowbehavior.Theoretically,whentheframeworkcodeisincluded,theanalysisscopecontainstheentireprogramcodethatcanbeexecutedwithintheapp’s4232Algorithm 1 Entry points discovery
Mf ← {Uncalled framework methods overridden by app}
Ma ← {App methods overriding framework}
E ← {Listeners in Manifest; Basic component handlers}
repeat
G ← BuildCallGraph(E)
for all ma ∈ Ma ∧ ma overrides mf ∈ Mf do
if ma’s constructor ∈ G then
E ← E ∪ {ma}
end if
end for
until E reaches a ﬁxed point
output E as entry point set
analysis that only require a partial knowledge on the framework’s
external behavior, such as data-ﬂow analysis, should model rather
than diving into the framework, to avoid unnecessary performance
overhead and inaccuracy. In addition to modeling the framework
in terms of its data-ﬂow behavior, our analysis requires type in-
formation of framework-deﬁned classes (the app-level classes are
derived from these types). We will show in Section 4 that, such
information can be easily extracted from the framework, which the
analyzer uses to build the complete class hierarchy.
Entry point discovery: As the ﬁrst step to deal with the multi-
entry-point nature of apps and tackle C1, we designed an algorithm
that discovers entry points in app code at a very low false rate, with-
out requiring analyzing the framework code. To avoid ambiguity,
we use the following deﬁnition of entry points in this paper:
DEFINITION 2. App entry points are the methods that are de-
ﬁned by the app and intended to be called only by the framework.
Entry points in an app can be large in amount, often with a great
variety in their object types. For instance, each UI elements in
an app can deﬁne multiple event listeners to be called at different
moments as particular events happen. Similarly, each component
can implement handlers to get notiﬁed about its life-cycle changes.
Therefore, we avoided any manual efforts that use expert knowl-
edge to generate sets of possible entry points, due to its error prun-
ing nature and no guarantee for completeness.
Since the entry point methods are supposed to be called by the
framework, the latter then requires the prior knowledge about these
methods.
In fact, there are only two ways for an app to deﬁne
entry points that can be recognized by the framework: either via
explicitly stating them in the manifest ﬁle, or implicitly overriding
methods or implementing interfaces that are originally declared by
the framework as app entry points. Those deﬁned using the ﬁrst
option can be determined by parsing the manifest. To ﬁnd the
rest, our algorithm ﬁrst generates the set of uncalled methods in the
app that override their counterparts declared in the framework, and
then excludes methods that are unreachable even by the framework
(i.e. dead methods). Telling apart entry points from dead methods
that override the framework, despite neither is called by the app, is
based on two facts unique to entry points: (i) the containing class of
any entry point always have at least one instantiated object (since
app entry points are non-static methods), and (ii) there should be
no app-level invocation on the original method that the entry point
overrides or on any decedents of the original method in the class
hierarchy. In contrast, dead methods that override the framework
mostly cannot satisfy both conditions.
Our entry point discovery method, as formulated in Algorithm 1,
follows an iterative procedure until a ﬁxed point is reached for the
entry point set E. Method set Mf and Ma are generated by a sim-
ple scan of the class hierarchy and all call sites in the app code.
E is initialized to include entry points declared in manifest ﬁles
and basic component-life-cycle handlers deﬁned in the code. Com-
pared with other entry points, the component-life-cycle handlers
have very few types and are the only entry points whose containing
class is created by the framework (i.e. calls to their constructors are
invisible at the app level). During each iteration, a new call graph
G is built based on the already discovered entry points in E. Due
to the new entry points added in the last iteration, the new G may
contain previously unreachable methods and classes instantiations.
A method ma ∈ Ma is added to E as a new entry point when ma
overrides a framework method or interface mf ∈ Mf and ma’s
containing class is instantiated in G. We build the call graph us-
ing the entire E, rather than just using the newly discovered entry
points in the previous iteration, so that the point-to analysis sup-
porting the call graph builder can be as complete and accurate as
possible. The algorithm terminates when E stops growing and con-
tains all possible entry points. Very rare false positives can happen
only when framework-declared methods are never called in the app
while they are already overwritten by instantiated classes and made
for app use.
App code splitting: Once all entry points are discovered, we model
their asynchronous invocations and addresses C2 with a novel tech-
nique named app code splitting. We deﬁne the concept of splits as
follows:
DEFINITION 3. A split is a subset of the app code that is reach-
able from a particular entry point method.
From a static analysis perspective, app executions can be viewed
as a collection of splits executing in all feasible orders, possibly
interleaved. The idea of modeling app execution in terms of splits
may seem challenging at the ﬁrst glance. However, constrains im-
posed by the framework and our focus on data-ﬂow analysis signif-
icantly simplify the realization of the idea. In fact, most splits in an
app can only be executed in a sequential order (i.e. not interleav-
ing each other), because the framework invokes the majority of app
entry points in the main thread of an app. The mere exceptions are
entry points of concurrency constructs, such as threads. Since our
goal is to perform security vulnerability detection, concurrency-
incurred data-ﬂows are usually not a concern in this context due to
their extreme unreliability to be reproduced or exploited. There-
fore, we can safely approximate the app execution as sequen-
tial permutations of splits that are feasible under framework con-
straints.