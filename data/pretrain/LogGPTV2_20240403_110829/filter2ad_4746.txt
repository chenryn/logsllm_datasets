# Using Formal Grammar and Genetic Operators to Evolve Malware

**Authors:**
- Sadia Noreen¹
- Shafaq Murtaza¹
- M. Zubair Shafiq²
- Muddassar Farooq²

¹ FAST National University, Islamabad, Pakistan  
² nexGIN RC, FAST National University, Islamabad, Pakistan

**Contact:**
- {sadia.noreen, shafaq.murtaza}@nu.edu.pk
- {zubair.shafiq, muddassar.farooq}@nexginrc.org

## Abstract
In this paper, we utilize the concepts of formal grammar and genetic operators to evolve malware. As a case study, we focus on COM infectors and design their formal grammar using production rules in Backus-Naur Form (BNF). The chromosome (abstract representation) of an infector consists of genes (production rules), which are used by a code generator to derive the source code. Standard genetic operators—crossover and mutation—are applied to evolve the population. Our experimental results show that the evolved population contains a significant proportion of valid COM infectors. Additionally, approximately 7% of the evolved malware evade detection by commercial off-the-shelf (COTS) anti-virus software.

## 1. Evolutionary Malware Engine: An Empirical Study
Malware authors have developed engines that generate different variants of a given malware, primarily through packing techniques. These variants typically retain the same functionality and semantics. In contrast, our methodology aims to create "new" malware. The process involves three phases:
1. Designing a formal grammar for malware and using it to create an abstract representation.
2. Applying standard genetic operators—crossover and mutation.
3. Generating assembly code from the evolved abstract representation.

### Working Principle
The proposed COM infector evolution framework is illustrated in Figure 1. Initially, the source code of an infector is analyzed and mapped to production rules defined in the formal grammar to generate its chromosome. This step is performed for 10 infectors, resulting in a population of 10 chromosomes. Genetic operators—crossover and mutation—are then applied to this population. Not all individuals will remain legitimate infectors after these operations. To test this, a code generation unit converts the evolved chromosomes into assembly code. Finally, the evolved malware is presented to well-known COTS anti-virus products to check if they can evade detection.

### Experimental Observations
Our observations indicate that the evolved infectors fall into one of three categories:
1. COM infectors that have become benign.
2. COM infectors detected by anti-virus software but as a different type than the initial 10 infectors.
3. Unknown variants of COM infectors that successfully evade detection.

We manually executed the third category of infectors on a Windows XP machine to verify their destructive capabilities. Our initial findings show that about 52% of the evolved infectors have become benign; 41% are detected but with new names not included in the initial population; and the remaining 7% still perform their destructive tasks while remaining undetected. The last category of infectors has achieved true stealthiness.

### Example: mini44 Malware
To illustrate the evolution procedure, we use the example of a simple mini44 malware (Figure 2). Common routines—Search First, Copy, Search Next—are labeled in the figure. The Search First routine finds the first COM file in the current directory, opens it, writes the malware code, and closes the file. The next victim COM file is searched in the Search Next function. When our engine reads the instruction `mov ah, 4EH` in mini44, it looks up the corresponding production rules (Figure 3). The genotype of this instruction might consist of the following production rules: 1-2-7-8-9-10-11-12-16-15-22. Similarly, the genotype of each instruction/routine in the COM infector is generated. To produce a new individual, we take the abstract representations of two infectors and apply crossover and mutation operators. The code generator then performs the reverse mapping to generate the source code of the evolved infector.

## References
1. Virus Source Code Database (VSCDB). [Online]. Available: http://www.totallygeek.com/vscdb/

---

**Figures:**
- **Figure 1.** Architecture of COM infector evolution framework.
- **Figure 2.** Code of mini44.
- **Figure 3.** BNF of COM infectors.

---

**Note:** Figures 1, 2, and 3 should be included in the final document to provide visual support for the described concepts.