windows域环境下认证和攻击初识
原创西部陆战队 酒仙桥六号部队
2020-09-09原文
这是 酒仙桥六号部队 的第 78 篇文章。
全文共计3484个字，预计阅读时长12分钟。
Kerberos认证原理
Kerberos是一种认证机制。目的是通过密钥系统为客户端/服务器
应用程序提供强大的可信任的第三方认证服务：保护服务器防止错
误的用户使用，同时保护它的用户使用正确的服务器，即支持双向
验 证 。 kerberos 最 初 由 MIT 麻 省 理 工 开 发 ， 微 软 从 Windows
2000开始支持Kerberos认证机制，将kerberos作为域环境下的主
要身份认证机制，理解kerberos是域渗透的基础。
kerberos认证框架
kerberos机制中主要包含三个角色：Client、Server、KDC(Key
Distribution
Center)密钥分发中心。Client代表用户，用户有自己的密码，Se
rver上运行的服务也有自己的密码，KDC是受信任的三方认证中心
，它拥有用户和服务的密码信息。KDC服务默认会安装在域控中，Cl
ient 想 要 访 问 Server 的 服 务 （ xxx
service），前提是通过KDC认证，再由KDC发放的票据决定Client
是否有权限访问Server的服务。框架图如下：
kerberos认证术语初识
KDC(Key Distribution
center)：密钥分发中心，在域环境中，KDC服务默认会安装在域控
中。
AS(Authentication
Service)：认证服务，验证client的credential(身份认证信息)
，发放TGT。
TGT(Ticket Granting
ticket)：票据授权票据，由KDC的AS发放，客户端获取到该票据后
，以后申请其他应用的服务票据(ST)时，就不需要向KDC的AS提交
身份认证信息(credential)，TGT具有一定的有效期。
TGS(Ticket Granting
Service)：票据授权服务，验证TGT，发放ST。
ST(Service
Ticket)：服务票据，由KDC的TGS发放，是客户端应用程序访问Se
rver某个服务的凭证，Server端验证通过则完成Client与Server
端信任关系的建立。
先由简到繁地去梳理以上术语的关系。首先Client想要访问Server
的某个服务，就需要通过KDC的认证，获取到服务票据（ST），服务
会验证服务票据（ST）来判断Client是否通过了KDC认证。为了避
免Client每次访问Server的服务都要向KDC认证(输入密码)，KDC
设计时分成了两个部分，一个是AS，另一个是TGS，AS接收Client
的认证信息，认证通过后给Client发放一个可重复使用的票据TGT
，后续Client使用这个TGT向TGS请求ST即可。
Authenticator：验证器，不能重复使用，与票据（时效内能重复
使用）结合用来证明Client声明的身份，防止票据被冒用。
windows域kerberos认证流程
第一步 AS认证(获取TGT)
请 求 ： Client
向KDC的AS发起认证请求，身份认证信息包含了用户密码hash(use
r_hash) 加 密 的 timestamp 预 认 证 信 息 pre-authentication
data ， 以 及 用 户 名 (user) 、 客 户 端 信 息 (client
info)、服务名(krbtgt)等未加密信息。
生 成 session
key以及TGT：域控中存储了域中所有用户密码hash（user_hash）
，KDC的AS依据用户名查找相应的user_hash，成功解密预认证信
息 ， 验 证 客 户 端 通 过 ， 然 后 会 生 成 一 个 sessionkey-
TGS( 后 续 用 于 加 密 Client 与 TGS 通 信 ) ， 以 及 TGT( 由 krbtgt
hash 加 密 的 sessionkey-TGS 、 user 、 client
info、lifetime、timestamp等信息)。
注：krbtgt账户是创建域时系统自动创建的，可以认为是为了kerb
eros认证服务而创建的账号。
注：TGT是KDC加密的，Client无法解密，并且具有有效期，客户端
用其向TGS请求ST。
响 应 ： AS 用 user_hash 加 密 sessionkey-
TGS，与TGT一起生成REP响应发送给客户端。客户端解密响应成功
说 明 数 据 包 是 KDC 发 送 来 的 ， 并 且 获 得 sessionkey-
TGS以及TGT，sessionkey-TGS用于后续加密通信。
第二步 TGS认证(获取ST)
通过第一步，客户端解密AS的响应后，可以得到一个sessionkey-
TGS以及TGT。
请求：用户想访问Aservice服务，于是向TGS请求访问Aservice的
ST。首先客户端会生成验证器Authenticator，内容包含user、c
lient info、lifetime、timestamp信息，并且用sessionkey-
TGS加密。客户端将验证器、Aservice信息、TGT发送给TGS请求ST
。
生 成 session key 以 及 ST ： TGS 收 到 请 求 ， 利 用 krbtgt
hash 解 密 TGT ， 获 取 到 sessionkey-TGS ， user 、 client
info 等 信 息 ， 然 后 利 用 sessionkey-
TGS解密验证器，校验验证器和TGT中的user信息，如果一致，则说
明该请求符合TGT中声明的用户，该用户是通过AS认证的。然后TGS
会 为 用 户 user 和 服 务 Aservice 之 间 生 成 新 的 session key
sessionkey-Aservice ， 并 用 sessionkey-
TGS 加 密 sessionkey-
Aservice 。 再 生 成 一 个 ST ， 内 容 包 含 user 、 client
info 、 lifetime 、 timestamp 、 sessionkey-
Aservice，ST用Aservice的service_hash加密。
注：验证器Authenticator只能使用一次，是为了防止TGT被冒用
。kerberos设计之初，产生票据的概念就是为了避免重复的常规密
码验证，因为票据在有效期内可以重复使用。为了避免冒用，设计
出 session key 以 及 Authenticator 。 session
key 只 有 真 正 的 客 户 端 、 服 务 知 道 ， 利 用 session
key加密验证器，服务就可以解密对比验证器以及票据中声明的用户
、客户端信息是否一致，一致说明票据来自可信客户端。
响 应 ： TGS 将 sessionkey-TGS 加 密 后 的 sessionkey-
Aservice以及service_hash加密的ST响应给客户端。
第三步 服务认证
通 过 第 二 步 ， Client 获 取 到 sessionkey-
Aservice 以 及 ST ， 接 下 来 Client 利 用 sessionkey-
Aservice加密Authenticator，连同ST去请求Server的Aservic
e 。 Aservice
利 用 自 己 的 service_hash 解 密 ST ， 获 得 sessionkey-
Aservice，再解密Authenticator验证Client声明的user信息，
通 过 认 证 后 Aservice 还 需 要 用 sessionkey-
Aservice加密一段信息返回给Client，Client利用sessionkey-
Aservice解密成功说明Aservice用自己service_hash成功解密
出了sessionkey-Aservice，是可信服务端。
至此，kerberos认证流程完成，Client可访问Aservice提供的服
务。
NTLM认证
NTLM认证采用质询/应答(Challenge/Response)的消息交换模式
。NTLM既可用于域环境下的身份认证，也可以用于没有域的工作组