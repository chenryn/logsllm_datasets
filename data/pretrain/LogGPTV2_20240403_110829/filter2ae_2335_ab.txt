    from icssploit.protocols.s7comm import *
#### 3.2. 定义基础参数及数据结构
如之前所说，S7comm协议在发送具体的请求参数前，需要先建立COTP连接并进行通讯参数配置，具体的流程如下图所示。
![
](https://images.seebug.org/content/images/2018/12/89663aab-2664-4aab-b523-a61254b3d3be.jpg-w331s)
因此我们在对请求操作进行Fuzzing测试时也需要先事先建立COTP连接，完成通讯参数配置后才能发送对应的测试数据。
首先需要对目标设备的一些连接信息进行设置，TSAP相关的参数涉及到目标设备的槽位号和连接方式等信息被用于建立COTP-CR连接时使用，具体参数需要根据实际测试设备在编程时的槽位号进行调整。
    # snap7 server 配置信息
    TARGET_IP = '172.16.22.131'
    TARGET_PORT = 102
    RANDSEED = int(RandShort())
    SRC_TSAP = "0100".encode('hex')  # COTP CR请求的参数
    DST_TSAP = "0102".encode('hex')  # COTP CR请求的参数
随后我们则需要进一步构造用于建立连接的数据包结构及需要进行fuzzing测试的数据包格式， 具体的代码及说明如下。
    # 定义COTP CR建立连接数据包
    COTP_CR_PACKET = TPKT()/COTPCR()
    COTP_CR_PACKET.Parameters = [COTPOption() for i in range(3)]
    COTP_CR_PACKET.PDUType = "CR"
    COTP_CR_PACKET.Parameters[0].ParameterCode = "tpdu-size"
    COTP_CR_PACKET.Parameters[0].Parameter = "\x0a"
    COTP_CR_PACKET.Parameters[1].ParameterCode = "src-tsap"
    COTP_CR_PACKET.Parameters[2].ParameterCode = "dst-tsap"
    COTP_CR_PACKET.Parameters[1].Parameter = SRC_TSAP
    COTP_CR_PACKET.Parameters[2].Parameter = DST_TSAP
    # 因为是建立连接使用，因此fuzzable参数需要设置为False避免数据包被变异破坏。
    # 如果想对建立连接的过程也进行分Fuzz的话，则可以另行编写测试用例。
    COTP_CR_TEMPLATE = Template(name='cotp_cr', fields=[
        ScapyField(COTP_CR_PACKET, name='cotp_cr', fuzzable=False),
    ])
    # 定义通讯参数配置数据结构
    SETUP_COMM_PARAMETER_PACKET = TPKT() / COTPDT(EOT=1) / S7Header(ROSCTR="Job", Parameters=S7SetConParameter())
    # 因为是建立连接使用，因此fuzzable参数需要设置为False避免数据包被变异破坏。
    # 如果想对建立连接的过程也进行分Fuzz的话，则可以另行编写测试用例。
    SETUP_COMM_PARAMETER_TEMPLATE = Template(name='setup comm template', fields=[
        ScapyField(SETUP_COMM_PARAMETER_PACKET, name='setup comm', fuzzable=False),
    ])
    # 定义需要Fuzzing的数据包结构, 下面例子中将使用RandShort对请求的SZLId及SZLIndex值进行变异测试。
    READ_SZL_PACKET = TPKT() / COTPDT(EOT=1) / S7Header(ROSCTR="UserData", Parameters=S7ReadSZLParameterReq(),Data=S7ReadSZLDataReq(SZLId=RandShort(), SZLIndex=RandShort()))
    # 定义READ_SZL_TEMPLATE为可以进行变异的结构，fuzzing的次数为1000次
    READ_SZL_TEMPLATE = Template(name='read szl template', fields=[
        ScapyField(READ_SZL_PACKET, name='read szl', fuzzable=True, fuzz_count=1000),
    ])
    # 在完成了上述的结构定义后就可以使用GraphModel将这些数据包结构进行前后关联。
    # 使用GraphModel进行Fuzz
    model = GraphModel()
    # 在GraphModel中注册第一个节点, 首先发送COTP_CR请求。
    model.connect(COTP_CR_TEMPLATE)
    # 在GraphModel中注册第二个节点, 在发送完COTP_CR后发送SETUP_COMM_PARAMETER请求。
    model.connect(COTP_CR_TEMPLATE, SETUP_COMM_PARAMETER_TEMPLATE)
    # 在GraphModel中注册第三个节点, 在发送完SETUP_COMM_PARAMETER后发送READ_SZL请求。
    model.connect(SETUP_COMM_PARAMETER_TEMPLATE, READ_SZL_TEMPLATE)
#### 3.3. 进行Fuzz模式配置
在完成了上述的定义后，剩下的配置和Modbus基本一致，只需要修改一下Target的名称等即可。
    # define target
    s7comm_target = TcpTarget(name='s7comm target', host=TARGET_IP, port=TARGET_PORT, timeout=2)
    # 定义是需要等待Target返回响应，如果设置为True Target不返回数据包则会被识别成异常进行记录。
    s7comm_target.set_expect_response(True)
    # 定义使用基础的ServerFuzzer进行Fuzz测试
    fuzzer = ServerFuzzer()
    # 定义fuzzer使用的交互界面为web界面
    fuzzer.set_interface(WebInterface(port=26001))
    # 在fuzzer中定义使用GraphModel
    fuzzer.set_model(model)
    # 在fuzzer中定义target为s7comm_target
    fuzzer.set_target(s7comm_target)
    # 定义每个测试用例发送之间的延迟
    fuzzer.set_delay_between_tests(0.1)
    # 开始执行Fuzz
    fuzzer.start()
完成上述的设置后即可使用python命令执行这个脚本对目标进行测试了，运行后将会在命令行终端看到如下图所示的输出。
![
](https://images.seebug.org/content/images/2018/12/b5eeb53f-be60-461e-a7f9-5aae2f37b2a9.jpg-w331s)
此时也可以通过开启的web管理界面来查看Fuzzing测试的状态
![
](https://images.seebug.org/content/images/2018/12/6388223a-d3f6-4374-bbf2-80118a2b3aa8.jpg-w331s)
上面介绍的是使用Kitty结合ISF中的协议数据结构对西门子S7comm协议进行Fuzzing的例子，如果想针对性的测试S7comm的不同协议功能码依旧需要修改数据结构定义的部分。
#### 3.4. 完整代码
下面是Fuzzing Read SZL结构的完整测试用例。
    #!/usr/bin/python2
    # coding:utf-8
    from kitty.model import Template
    from kitty.interfaces import WebInterface
    from kitty.fuzzers import ServerFuzzer
    from kitty.model import GraphModel
    from katnip.targets.tcp import TcpTarget
    from katnip.model.low_level.scapy import *
    # 从ISF中导入cotp相关的数据包结构
    from icssploit.protocols.cotp import *
    # 从ISF中导入s7comm相关的数据包结构
    from icssploit.protocols.s7comm import *
    # snap7 server 配置信息
    TARGET_IP = '172.16.22.131'
    TARGET_PORT = 102
    RANDSEED = int(RandShort())
    SRC_TSAP = "0100".encode('hex')
    DST_TSAP = "0103".encode('hex')
    # 定义COTP CR建立连接数据包
    COTP_CR_PACKET = TPKT()/COTPCR()
    COTP_CR_PACKET.Parameters = [COTPOption() for i in range(3)]
    COTP_CR_PACKET.PDUType = "CR"
    COTP_CR_PACKET.Parameters[0].ParameterCode = "tpdu-size"
    COTP_CR_PACKET.Parameters[0].Parameter = "\x0a"
    COTP_CR_PACKET.Parameters[1].ParameterCode = "src-tsap"
    COTP_CR_PACKET.Parameters[2].ParameterCode = "dst-tsap"
    COTP_CR_PACKET.Parameters[1].Parameter = SRC_TSAP
    COTP_CR_PACKET.Parameters[2].Parameter = DST_TSAP
    # 因为是建立连接使用，因此fuzzable参数需要设置为False避免数据包被变异破坏。
    COTP_CR_TEMPLATE = Template(name='cotp cr template', fields=[
        ScapyField(COTP_CR_PACKET, name='cotp cr', fuzzable=False),
    ])
    # 定义通讯参数配置数据结构
    SETUP_COMM_PARAMETER_PACKET = TPKT() / COTPDT(EOT=1) / S7Header(ROSCTR="Job", Parameters=S7SetConParameter())
    SETUP_COMM_PARAMETER_TEMPLATE = Template(name='setup comm template', fields=[
        ScapyField(SETUP_COMM_PARAMETER_PACKET, name='setup comm', fuzzable=False),
    ])
    # 定义需要Fuzzing的数据包结构, 下面例子中将使用RandShort对请求的SZLId及SZLIndex值进行变异测试。
    READ_SZL_PACKET = TPKT() / COTPDT(EOT=1) / S7Header(ROSCTR="UserData", Parameters=S7ReadSZLParameterReq(),Data=S7ReadSZLDataReq(SZLId=RandShort(), SZLIndex=RandShort()))
    # 定义READ_SZL_TEMPLATE为可以进行变异的结构，fuzzing的次数为1000次
    READ_SZL_TEMPLATE = Template(name='read szl template', fields=[
        ScapyField(READ_SZL_PACKET, name='read szl', fuzzable=True, fuzz_count=1000),
    ])
    # 使用GraphModel进行Fuzz
    model = GraphModel()
    # 在使用GraphModel中注册第一个节点, 首先发送COTP_CR请求。
    model.connect(COTP_CR_TEMPLATE)
    # 在使用GraphModel中注册第二个节点, 在发送完COTP_CR后发送SETUP_COMM_PARAMETER请求。
    model.connect(COTP_CR_TEMPLATE, SETUP_COMM_PARAMETER_TEMPLATE)
    # 在使用GraphModel中注册第三个节点, 在发送完SETUP_COMM_PARAMETER后发送READ_SZL请求。
    model.connect(SETUP_COMM_PARAMETER_TEMPLATE, READ_SZL_TEMPLATE)
    # define target
    s7comm_target = TcpTarget(name='s7comm target', host=TARGET_IP, port=TARGET_PORT, timeout=2)
    # 定义是需要等待Target返回响应，如果设置为True Target不返回数据包则会被识别成异常进行记录。
    s7comm_target.set_expect_response(True)
    # 定义使用基础的ServerFuzzer进行Fuzz测试
    fuzzer = ServerFuzzer()
    # 定义fuzzer使用的交互界面为web界面
    fuzzer.set_interface(WebInterface(port=26001))
    # 在fuzzer中定义使用GraphModel
    fuzzer.set_model(model)
    # 在fuzzer中定义target为s7comm_target
    fuzzer.set_target(s7comm_target)
    # 定义每个测试用例发送之间的延迟
    fuzzer.set_delay_between_tests(0.1)
    # 开始执行Fuzz
    fuzzer.start()
### 4\. 小结
通过将Kitty与基于Scapy的数据包结构进行结合能够基于一些现有的协议组件(例如ISF或Scapy中原生的协议)快速的构造一个高度自定义的Fuzzing测试用例，特别是在面对复杂的协议时可以减少大量的协议数据结构编写等大量工作。
Kitty的可扩展性非常强，而且本文只涉及到了其中非常少的一部分功能，通过对Kitty进行扩展可以快速的针对特定目标构造对应的Fuzzing工具。
* * *