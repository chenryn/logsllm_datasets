ifpwd != account.pwd {
fmt.Println("你输入的密码不正确")
return
}
//看看取款金额是否正确
ifmoney account.balance {
fmt.Println("你输入的金额不正确")
return
}
account.balance -= money
fmt.Println("取款成功~~")
}
//查询余额
func(account *account) Query(pwd string) {
//看下输入的密码是否正确
ifpwd != account.pwd {
fmt.Println("你输入的密码不正确")
return
}
fmt.Printf("你的账号为=%v 余额=%v \n", account.accountNo, account.balance)
}
main/main.go
package main
import(
"fmt"
"go_code/chapter11/encapexercise/model"
)
funcmain() {
//创建一个 account 变量
account :=model.NewAccount("jzh11111", "000", 40)
ifaccount != nil {
fmt.Println("创建成功=",account)
} else{
fmt.Println("创建失败")
}
}
 说明：在老师的代码基础上增加如下功能：
通过SetXxx 的方法给Account 的字段赋值 通过GetXxx方法获取字段的值。(同学们自己完成)
在main函数中测试
11.4 面向对象编程三大特性-继承
11.4.1 看一个问题，引出继承的必要性
一个小问题,看个学生考试系统的程序 extends01.go，提出代码复用的问题
 走一下代码
package main
import(
"fmt"
)
//编写一个学生考试系统
//小学生
type Pupilstruct {
Name string
Ageint
Scoreint
}
//显示他的成绩
func(p *Pupil)ShowInfo() {
fmt.Printf("学生名=%v 年龄=%v 成绩=%v\n", p.Name, p.Age, p.Score)
}
func(p *Pupil)SetScore(score int){
//业务判断
p.Score= score
}
func(p *Pupil)testing() {
fmt.Println("小学生正在考试中.....")
}
//大学生, 研究生。。
//大学生
type Graduatestruct {
Name string
Ageint
Scoreint
}
//显示他的成绩
func(p *Graduate)ShowInfo() {
fmt.Printf("学生名=%v 年龄=%v 成绩=%v\n", p.Name, p.Age, p.Score)
}
func(p *Graduate)SetScore(score int){
//业务判断
p.Score= score
}
func(p *Graduate)testing() {
fmt.Println("大学生正在考试中.....")
}
//代码冗余.. 高中生....
funcmain() {
//测试
varpupil =&Pupil{
Name :"tom",
Age: 10,
}
pupil.testing()
pupil.SetScore(90)
pupil.ShowInfo()
//测试
vargraduate= &Graduate{
Name :"mary",
Age: 20,
}
graduate.testing()
graduate.SetScore(90)
graduate.ShowInfo()
}
 对上面代码的小结
1) Pupil 和 Graduate 两个结构体的字段和方法几乎，但是我们却写了相同的代码， 代码复用性不
强
2) 出现代码冗余，而且代码不利于维护，同时也不利于功能的扩展。
3) 解决方法-通过继承方式来解决
11.4.2 继承基本介绍和示意图
继承可以解决代码复用,让我们的编程更加靠近人类思维。
当多个结构体存在相同的属性(字段)和方法时,可以从这些结构体中抽象出结构体(比如刚才的
Student),在该结构体中定义这些相同的属性和方法。
其它的结构体不需要重新定义这些属性(字段)和方法，只需嵌套一个Student 匿名结构体即可。 [画
出示意图]
也就是说：在 Golang 中，如果一个 struct 嵌套了另一个匿名结构体，那么这个结构体可以直接访
问匿名结构体的字段和方法，从而实现了继承特性。
11.4.3 嵌套匿名结构体的基本语法
type Goods struct {
Name string
Priceint
}
type Book struct {
Goods //这里就是嵌套匿名结构体Goods
Writerstring
}
11.4.4 快速入门案例
 案例
我们对extends01.go 改进，使用嵌套匿名结构体的方式来实现继承特性,请大家注意体会这样编程
的好处
 代码实现
package main
import(
"fmt"
)
//编写一个学生考试系统
type Studentstruct {
Name string
Ageint
Scoreint
}
//将Pupil 和 Graduate 共有的方法也绑定到 *Student
func(stu *Student)ShowInfo() {
fmt.Printf("学生名=%v 年龄=%v 成绩=%v\n", stu.Name, stu.Age, stu.Score)
}
func(stu *Student)SetScore(score int){
//业务判断
stu.Score=score
}
//小学生
type Pupilstruct {
Student//嵌入了Student匿名结构体
}
//显示他的成绩
//这时Pupil结构体特有的方法，保留
func(p *Pupil)testing() {
fmt.Println("小学生正在考试中.....")
}
//大学生, 研究生。。
//大学生
type Graduatestruct {
Student//嵌入了Student匿名结构体
}
//显示他的成绩
//这时Graduate结构体特有的方法，保留
func(p *Graduate)testing() {
fmt.Println("大学生正在考试中.....")
}
//代码冗余.. 高中生....
funcmain() {
//当我们对结构体嵌入了匿名结构体使用方法会发生变化
pupil:=&Pupil{}
pupil.Student.Name= "tom~"
pupil.Student.Age= 8
pupil.testing()
pupil.Student.SetScore(70)
pupil.Student.ShowInfo()
graduate :=&Graduate{}
graduate.Student.Name="mary~"
graduate.Student.Age =28
graduate.testing()
graduate.Student.SetScore(90)
graduate.Student.ShowInfo()
}
11.4.5 继承给编程带来的便利
1) 代码的复用性提高了
2) 代码的扩展性和维护性提高了
11.4.6 继承的深入讨论
1) 结构体可以使用嵌套匿名结构体所有的字段和方法，即：首字母大写或者小写的字段、方法，
都可以使用。【举例说明】
2) 匿名结构体字段访问可以简化，如图
对上面的代码小结
(1) 当我们直接通过 b 访问字段或方法时，其执行流程如下比如 b.Name
(2) 编译器会先看b对应的类型有没有Name, 如果有，则直接调用B类型的Name 字段
(3) 如果没有就去看B 中嵌入的匿名结构体A 有没有声明Name 字段，如果有就调用,如果没有
继续查找..如果都找不到就报错.
3) 当结构体和匿名结构体有相同的字段或者方法时，编译器采用就近访问原则访问，如希望访问
匿名结构体的字段和方法，可以通过匿名结构体名来区分【举例说明】
4) 结构体嵌入两个(或多个)匿名结构体，如两个匿名结构体有相同的字段和方法(同时结构体本身
没有同名的字段和方法)，在访问时，就必须明确指定匿名结构体名字，否则编译报错。【举例说明】
5) 如果一个struct 嵌套了一个有名结构体，这种模式就是组合，如果是组合关系，那么在访问组合
的结构体的字段或方法时，必须带上结构体的名字
6) 嵌套匿名结构体后，也可以在创建结构体变量(实例)时，直接指定各个匿名结构体字段的值
11.4.7 课堂练习
结构体的匿名字段是基本数据类型，如何访问, 下面代码输出什么
说明
1) 如果一个结构体有int类型的匿名字段，就不能第二个。
2) 如果需要有多个int的字段，则必须给int 字段指定名字
11.4.8 面向对象编程-多重继承
 多重继承说明
如一个 struct 嵌套了多个匿名结构体，那么该结构体可以直接访问嵌套的匿名结构体的字段和方
法，从而实现了多重继承。
 案例演示
通过一个案例来说明多重继承使用
 多重继承细节说明
1) 如嵌入的匿名结构体有相同的字段名或者方法名，则在访问时，需要通过匿名结构体类型名来
区分。【案例演示】
2) 为了保证代码的简洁性，建议大家尽量不使用多重继承
11.5 接口(interface)
11.5.1 基本介绍
按顺序,我们应该讲解多态,但是在讲解多态前,我们需要讲解接口(interface)，因为在Golang 中 多态
特性主要是通过接口来体现的。
11.5.2 为什么有接口
11.5.3 接口快速入门
这样的设计需求在 Golang 编程中也是会大量存在的,我曾经说过,一个程序就是一个世界,在现实世
界存在的情况，在程序中也会出现。我们用程序来模拟一下前面的应用场景。
 代码实现
package main
import(
"fmt"
)
//声明/定义一个接口
type Usb interface {
//声明了两个没有实现的方法
Start()
Stop()
}
type Phonestruct {
}
//让Phone 实现 Usb 接口的方法
func(p Phone)Start(){
fmt.Println("手机开始工作。。。")
}
func(p Phone)Stop(){
fmt.Println("手机停止工作。。。")
}
type Camera struct {
}
//让Camera 实现 Usb接口的方法
func(c Camera) Start() {
fmt.Println("相机开始工作。。。")
}
func(c Camera) Stop(){
fmt.Println("相机停止工作。。。")
}
//计算机
type Computerstruct {
}
//编写一个方法 Working 方法，接收一个Usb 接口类型变量
//只要是实现了 Usb 接口 （所谓实现Usb接口，就是指实现了 Usb 接口声明所有方法）
func(c Computer)Working(usb Usb) { //usb 变量会根据传入的实参，来判断到底是Phone,还是Camera
//通过usb 接口变量来调用Start 和Stop方法
usb.Start()
usb.Stop()
}
funcmain() {
//测试
//先创建结构体变量
computer:=Computer{}
phone:=Phone{}
camera:=Camera{}
//关键点
computer.Working(phone)
computer.Working(camera)//
}
说明: 上面的代码就是一个接口编程的快速入门案例。
11.5.4 接口概念的再说明
interface类型可以定义一组方法，但是这些不需要实现。并且 interface 不能包含任何变量。到某个
自定义类型(比如结构体Phone)要使用的时候,在根据具体情况把这些方法写出来(实现)。
11.5.5 基本语法
 小结说明:
1) 接口里的所有方法都没有方法体，即接口的方法都是没有实现的方法。接口体现了程序设计的
多态和高内聚低偶合的思想。
2) Golang 中的接口，不需要显式的实现。只要一个变量，含有接口类型中的所有方法，那么这个
变量就实现这个接口。因此，Golang 中没有 implement 这样的关键字
11.5.6 接口使用的应用场景
11.5.7 注意事项和细节
1) 接口本身不能创建实例,但是可以指向一个实现了该接口的自定义类型的变量(实例)
2) 接口中所有的方法都没有方法体,即都是没有实现的方法。
3) 在Golang 中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现
了该接口。
4) 一个自定义类型只有实现了某个接口，才能将该自定义类型的实例(变量)赋给接口类型
5) 只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型。
6) 一个自定义类型可以实现多个接口
7) Golang 接口中不能有任何变量
8) 一个接口(比如 A 接口)可以继承多个别的接口(比如 B,C 接口)，这时如果要实现 A 接口，也必
须将B,C 接口的方法也全部实现。
9) interface类型默认是一个指针(引用类型)，如果没有对interface 初始化就使用，那么会输出nil
10) 空接口 interface{} 没有任何方法，所以所有类型都实现了空接口, 即我们可以把任何一个变量
赋给空接口。
11.5.8 课堂练习
11.5.9 接口编程的最佳实践