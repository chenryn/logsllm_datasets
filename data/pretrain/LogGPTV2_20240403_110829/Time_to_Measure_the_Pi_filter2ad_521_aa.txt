title:Time to Measure the Pi
author:Peter Membrey and
Darryl Veitch and
Rocky K. C. Chang
Time to Measure the Pi
Peter Membrey
Darryl Veitch
Department of Computing
The Hong Kong Polytechnic
School of Computing and
Communications
University
Hunghom, Hong Kong
PI:EMAIL
University of Technology
Sydney, Australia
PI:EMAIL
Rocky K. C. Chang
Department of Computing
The Hong Kong Polytechnic
University
Hunghom, Hong Kong
PI:EMAIL
ABSTRACT
The Raspberry Pi platform is increasingly being used
for network measurement due to its low cost, ease of de-
ployment, and ability to run Linux. Timestamps are a
critical part of measurement data, yet the suitability of
the Pi for timing has not been established. We use ref-
erence hardware to characterize the Pi’s STC hardware
counter, and to evaluate its performance when paired
with a low cost yet powerful GPS ‘hat’. We ﬁnd that
the platform can support timing adequate for most mea-
surement purposes, but with some caveats.
Categories and Subject Descriptors
C.2.3 [Computer Communications]: Network oper-
ations—Network monitoring
Keywords
Raspberry Pi, GPS hat, network measurement, PPS,
clock synchronization, Internet of Things.
1.
INTRODUCTION
The Raspberry Pi (or Pi) has become a widely used
computing platform due to its low cost, small form fac-
tor, and support for the Linux operating system [3].
For network measurement, its ease of deployment has
made it an attractive way to scale out monitoring net-
works. For example both CAIDA’s Ark platform [1],
and the BISmark project [2], increasingly employ Pi-
based nodes, and Pi’s equipped with GPS are now also
receiving attention [8].
Although relatively powerful, the processing, memory
and networking limitations of the Pi are well recognized
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14-16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987476
[12, 13]. These naturally place constraints on the mea-
surement regimes a Pi-based infrastructure can support,
but the range of applications is nonetheless wide, par-
ticularly since Pi’s or other IoT devices could be used
primarily for data collection, with data analysis occur-
ring elsewhere. There is however a fundamental issue
that relates directly to the collection platform. Much
measurement data involves, if not literally consists of,
timestamps. How suitable then is the Pi as a platform
for reliable timing? Underlying hardware factors such
as low cost oscillators, small thermal mass, low resolu-
tion counters, and inexpensive networking architecture,
will all impact on its ﬁnal timekeeping and timestamp-
ing performance.
In this paper we examine the suitability of the Pi
platform for timing. Our main goals are as follows.
(1) Characterization of the System Timer Counter.
The STC, which ticks nominally at a rate of 1Mhz, is
the Pi’s only readily accessible hardware counter. It is
therefore the basis of any software clock one could deﬁne
on the platform (including the system clock under the
Raspbian operating system). Clock performance will
therefore be limited by the STC’s stability and resolu-
tion. We use specialist hardware and careful method-
ology to measure this stability accurately for the ﬁrst
time for each of the Pi-1(B), Pi-2, and the newly re-
leased Pi-3.
An alternative counter of higher resolution is that
underlying the CPU, however it is not readily accessi-
ble under Raspbian, nor used by it (see [15] for access
notes). We believe this is because its nominal rate is
unreliable, rendering it unsuitable for timekeeping.
The remaining goals concern the situation where Pulse
Per Second (PPS) input is available. The main example
is when the PPS is provided by a GPS receiver, where
the pulses fall on the seconds of Coordinated Universal
Time (UTC). These pulses are used by system clocks
to lock to UTC. Our study of ‘Pi+PPS’ is motivated by
the fact that low cost GPS boards are now available for
the Pi, opening up the possibility of using it as a low
cost precision timing platform with particular beneﬁts
for measurement, in particular where accurate absolute
time is essential. These include studies based on la-
tency comparisons, such as latency benchmarking and
mapping, reliable event ordering (needed for example
in time-aware distributed databases [9]), or the health
checking of public timing infrastructure [21, 20].
(2) Characterization of a low cost GPS hat.
We examine a high quality uBLOX M8Q GNSS module
with a custom ﬁt to the Pi, and compare its PPS output
to a GPS synchronized atomic clock reference.
(3) Examination of latency pitfalls in PPS triggering.
The availability of PPS to a network of Pi measure-
ment points enables their use as precise distributed trig-
gers. This would increase the accuracy and resolution
of applications such as Internet coordinate systems, and
moreover can be achieved independently of potentially
inaccurate system clocks. We report on some potential
pitfalls of this idea.
(4) Performance of Pi+hat timing.
By comparing ‘identical twin’ Pi+PPS systems in par-
allel we report on the expected best case underlying
performance of the Pi+hat platform.
It is beyond the scope of this paper to systematically
evaluate all elements impacting on the end performance
of Pi-based timing. For example we do not evaluate the
latency proﬁles of network hardware, nor evaluate in
detail the reaction of ntpd (the default system clock
synchronization algorithm) to failures in a PPS, a key
problem in opportunistic ‘antenna out the window’ de-
ployments. Nonetheless, in the conclusion we describe
the implications of our ﬁndings in terms of the end per-
formance of both the Pi+hat and Pi platforms.
Our work provides a strong foundation for future
studies.
In particular our focus on the availability of
PPS is not only about a desire to evaluate a Pi+hat
platform. It is the basis of our methodology for the ac-
curate measurement of the goals above, which can also
be used and/or adapted for the benchmarking of alter-
native platforms, or future counters on the Pi which
may become available. For example it may be possi-
ble to synthesize a reliable counter of high resolution
by combining the STC and the CPU counter in a simi-
lar way to Xen Clocksource [6]. Our methodology also
allows for the benchmarking of methods to estimate
counter stability when PPS is not available. This can
be done by exploiting RADclock [19], and will also form
the object of our future work.
2. TESTBED HARDWARE
Our testbed consists of a number of Pi’s, six units of
a particular GPS hat, GPS receivers (more accurately,
GNSS, using both GPS and GLONASS satellite constel-
lations), an atomic clock, and additional measurement
equipment.
2.1 The Pi and its Hat
We work with all three generations of the Raspberry
Pi, including the recently released Pi-3. Although there
Figure 1: The reference testbed equipment.
have been some variations within these (we use Pi-1(B)),
they mainly aﬀect CPU, RAM and additional features
such as wireless networking, bluetooth capabilities and
the like, rather than the core hardware including the
STC hardware counter that we focus on here. The Pi’s
all have General Purpose Input Output (GPIO) pins,
which can be used to input a PPS signal.
To provide the GPS functionality, a GPS module
from uputronics (previously HAB Supplies) was used.
This device was chosen since, despite being a low cost
board (£34.99 at the time of writing) and designed to
physically ﬁt (like a hat) to the Pi, it uses a very high
quality uBLOX M8Q GPS receiver which features a
PPS output enabling high precision locking to UTC.
Cheaper GPSes rely solely on messages sent using the
NMEA protocol [14], which do not arrive with the same
precision as pulse edges. The chipset supports various
modes to improve its reliability for time synchroniza-
tion, such as limiting the number of NMEA messages
it sends, and allowing Stationary mode: telling the re-
ceiver it is physically stationary reduces the degrees of
freedom and so improves the time ﬁx. Finally, the M8Q
model provides a TCXO (Temperature Compensated
Crystal Oscillator), which has a higher stability than of
a standard crystal, though still below that of an atomic
clock. This cost to performance ratio makes it an ideal
board for developing larger IoT devices.
2.2 Reference Testbed
Benchmarking a GPS system requires an accurate
and robust reference against which to compare. To cre-
ate such a reference, industry standard equipment was
chosen from leading manufacturers, widely known and
respected in the industry.
We cascade three devices to produce, ﬁnally, a PPS
output which is extremely stable both at small and long
time-scales, and which oﬀered ﬂexible conﬁguration for
our needs. This cascade, shown in Figure 1, consists of:
GPS receiver → atomic clock → signal generator.
Figure 2: Pulse errors E(i) of the hat over 99 hours. Left: timeseries, Right: histogram of all values.
The ﬁrst device is a Microsemi S600 GPS Network
Time Server, which provides a UTC synchronized PPS
which is highly stable on long time-scales.1 To im-
prove stability over shorter time-scales, and to provide
holdover protection in case of satellite reception prob-
lems, we use the GPS’s PPS output to discipline a SRS
(Stanford Research Systems) FS-725 Rubidium Desk-
top Reference. This atomic clock produces a reference
PPS which will converge to a more stable form of the
output of the S600. Finally, because the 1.2 V output
level of the FS-725’s PPS is potentially too low for the
Pi to reliably detect (especially when daisy chaining and
testing a number of Pi’s in parallel), we use the 10Mhz
output of the FS-725 to precisely discipline a Tektronix
AGF1022 signal generator, whose own output can be
easily conﬁgured to generate a PPS of our choosing.
This PPS source was used for experiments with the Pi.
The Pi’s GPIO interrupt trigger level is usually around
1.8 V , but can range from 0.8 V to 2.0 V [5]. Whilst the
Pi-2 and Pi-3 triggered reliably at 1.2 V , the Pi-1 did
not. We set the signal generator’s output to 2 V , which
allowed reliable triggering for all Pi’s.
Each GPS receiver (both the Microsemi references
and the hats) has it own antenna, which was placed out-
side a nearby window. The number of satellites visible
during experiments was monitored. It was well above
the minimum required for each receiver to maintain a
reliable and accurate time ﬁx. For example the S600
saw typically 6 and 8 satellites from the GPS (L1) con-
stellation.
2.3 Measurement Equipment
In addition to our PPS reference, a Rigol DS1104Z
Oscilloscope and a Keysight 53230A digital frequency
counter were used for performing visualization, com-
parison, and measurement of pulse trains.
The counter was disciplined (in hardware via phase
locked loop) by the 10Mhz output of the FS-725. The
counter’s time-interval measurements are estimated to
have an accuracy of 50 ps (1 sigma) for our signals. The
oscilloscope does not support external synchronization,
however it contains a TCXO and was only used for com-
paring signals over sub-µs intervals, where errors due to
the TCXO drift would be in the pico-second range.
1In some cases a higher end Microsemi S650 was used
instead of the S600. The improvement is negligible for
our purposes. For simplicity we refer to the S600 below.
3. CHARACTERIZING THE HAT’S PPS
We begin with the analysis of the hat performance
(Goal 2), as this is the logical ﬁrst step, being indepen-
dent of the Pi. We characterize the pulse train of the
hat in three ways: via per-pulse errors, stability analy-
sis, and pulse shape.
3.1 Experiment Design
To measure per-pulse errors, we feed the pulse trains
from the hat and our atomic clock reference into sepa-
rate channels of the digital counter. The counter is set
to trigger on each hat pulse and return the time interval
to the next reference pulse.
We oﬀset (via a hat conﬁguration option) the hat
pulses by δ = −10µs (to sub-ns error) to ensure they al-
ways arrive before their corresponding reference pulses.
This oﬀset is removed in post-processing.