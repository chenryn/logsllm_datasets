以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 表结构定义

#### 池塘
```sql
CREATE TABLE ponds (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    type CHARACTER VARYING(64),
    shores MULTIPOLYGON
);
```

#### 命名地点
```sql
CREATE TABLE named_places (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    boundary POLYGON
);
```

#### 地图整饰线
```sql
CREATE TABLE map_neatlines (
    fid INTEGER NOT NULL PRIMARY KEY,
    neatline POLYGON
);
```

### 空间参考系统
```sql
INSERT INTO spatial_ref_sys VALUES (
    101, 'POSC', 32214, 
    'PROJCS["UTM_ZONE_14N", GEOGCS["World Geodetic System 72", DATUM["WGS_72", ELLIPSOID["NWL_10D", 6378135, 298.26]], PRIMEM["Greenwich", 0], UNIT["Meter", 1.0]], PROJECTION["Transverse_Mercator"], PARAMETER["False_Easting", 500000.0], PARAMETER["False_Northing", 0.0], PARAMETER["Central_Meridian", -99.0], PARAMETER["Scale_Factor", 0.9996], PARAMETER["Latitude_of_origin", 0.0], UNIT["Meter", 1.0]]'
);
```

### 数据插入

#### 湖泊
```sql
INSERT INTO lakes VALUES (
    101, 'BLUE LAKE',
    PolyFromText(
        'POLYGON((52 18,66 23,73 9,48 6,52 18), (59 18,67 18,67 13,59 13,59 18))',
        101
    )
);
```

#### 道路段
```sql
INSERT INTO road_segments VALUES (
    102, 'Route 5', NULL, 2,
    LineFromText('LINESTRING(0 18, 10 21, 16 23, 28 26, 44 31)', 101)
);

INSERT INTO road_segments VALUES (
    103, 'Route 5', 'Main Street', 4,
    LineFromText('LINESTRING(44 31, 56 34, 70 38)', 101)
);

INSERT INTO road_segments VALUES (
    104, 'Route 5', NULL, 2,
    LineFromText('LINESTRING(70 38, 72 48)', 101)
);

INSERT INTO road_segments VALUES (
    105, 'Main Street', NULL, 4,
    LineFromText('LINESTRING(70 38, 84 42)', 101)
);

INSERT INTO road_segments VALUES (
    106, 'Dirt Road by Green Forest', NULL, 1,
    LineFromText('LINESTRING(28 26, 28 0)', 101)
);
```

#### 分割路线
```sql
INSERT INTO divided_routes VALUES (
    119, 'Route 75', 4,
    MLineFromText('MULTILINESTRING((10 48,10 21,10 0), (16 0,16 23,16 48))', 101)
);
```

#### 森林
```sql
INSERT INTO forests VALUES (
    109, 'Green Forest',
    MPolyFromText(
        'MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26), (52 18,66 23,73 9,48 6,52 18)), ((59 18,67 18,67 13,59 13,59 18)))',
        101
    )
);
```

#### 桥梁
```sql
INSERT INTO bridges VALUES (
    110, 'Cam Bridge',
    PointFromText('POINT(44 31)', 101)
);
```

#### 溪流
```sql
INSERT INTO streams VALUES (
    111, 'Cam Stream',
    LineFromText('LINESTRING(38 48, 44 41, 41 36, 44 31, 52 18)', 101)
);

INSERT INTO streams VALUES (
    112, NULL,
    LineFromText('LINESTRING(76 0, 78 4, 73 9)', 101)
);
```

#### 建筑物
```sql
INSERT INTO buildings VALUES (
    113, '123 Main Street',
    PointFromText('POINT(52 30)', 101),
    PolyFromText('POLYGON((50 31, 54 31, 54 29, 50 29, 50 31))', 101)
);

INSERT INTO buildings VALUES (
    114, '215 Main Street',
    PointFromText('POINT(64 33)', 101),
    PolyFromText('POLYGON((66 34, 62 34, 62 32, 66 32, 66 34))', 101)
);
```

#### 池塘
```sql
INSERT INTO ponds VALUES (
    120, NULL, 'Stock Pond',
    MPolyFromText(
        'MULTIPOLYGON(((24 44, 22 42, 24 40, 24 44)), ((26 44, 26 40, 28 42, 26 44)))',
        101
    )
);
```

#### 命名地点
```sql
INSERT INTO named_places VALUES (
    117, 'Ashton',
    PolyFromText('POLYGON((62 48, 84 48, 84 30, 56 30, 56 34, 62 48))', 101)
);

INSERT INTO named_places VALUES (
    118, 'Goose Island',
    PolyFromText('POLYGON((67 13, 67 18, 59 18, 59 13, 67 13))', 101)
);
```

#### 地图整饰线
```sql
INSERT INTO map_neatlines VALUES (
    115,
    PolyFromText('POLYGON((0 0, 0 48, 84 48, 84 0, 0 0))', 101)
);
```

### 测试查询

#### T1: 获取所有几何列的表名
```sql
SELECT f_table_name FROM geometry_columns;
```

#### T2: 获取指定表的几何列名
```sql
SELECT f_geometry_column FROM geometry_columns WHERE f_table_name = 'streams';
```

#### T3: 获取指定表的坐标维度
```sql
SELECT coord_dimension FROM geometry_columns WHERE f_table_name = 'streams';
```

#### T4: 获取指定表的空间参考系统ID
```sql
SELECT srid FROM geometry_columns WHERE f_table_name = 'streams';
```

#### T5: 获取指定空间参考系统的WKT表示
```sql
SELECT srtext FROM SPATIAL_REF_SYS WHERE SRID = 101;
```

#### T6: 获取湖泊岸线的维度
```sql
SELECT Dimension(shore) FROM lakes WHERE name = 'Blue Lake';
```

#### T7: 获取湖泊中心线的几何类型
```sql
SELECT GeometryType(centerlines) FROM lakes WHERE name = 'Route 75';
```

#### T8: 获取命名地点边界的WKT表示
```sql
SELECT AsText(boundary) FROM named_places WHERE name = 'Goose Island';
```

#### T9: 获取命名地点边界的WKB表示并转换为WKT
```sql
SELECT AsText(PolyFromWKB(AsBinary(boundary), 101)) FROM named_places WHERE name = 'Goose Island';
```

#### T10: 获取命名地点边界的SRID
```sql
SELECT SRID(boundary) FROM named_places WHERE name = 'Goose Island';
```

#### T11: 检查道路段是否为空
```sql
SELECT IsEmpty(centerline) FROM road_segments WHERE name = 'Route 5' AND aliases = 'Main Street';
```

#### T12: 检查湖泊岸线是否简单
```sql
SELECT IsSimple(shore) FROM lakes WHERE name = 'Blue Lake';
```

#### T13: 获取命名地点边界的边界
```sql
SELECT AsText(Boundary(boundary, 101)) FROM named_places WHERE name = 'Goose Island';
```

#### T14: 获取命名地点边界的包络
```sql
SELECT AsText(Envelope(boundary, 101)) FROM named_places WHERE name = 'Goose Island';
```

#### T15: 获取桥梁位置的X坐标
```sql
SELECT X(position) FROM bridges WHERE name = 'Cam Bridge';
```

#### T16: 获取桥梁位置的Y坐标
```sql
SELECT Y(position) FROM bridges WHERE name = 'Cam Bridge';
```

#### T17: 获取道路段起点
```sql
SELECT AsText(StartPoint(centerline)) FROM road_segments WHERE fid = 102;
```

#### T18: 获取道路段终点
```sql
SELECT AsText(EndPoint(centerline)) FROM road_segments WHERE fid = 102;
```

#### T19: 检查命名地点边界的闭合性
```sql
SELECT IsClosed(LineFromWKB(AsBinary(Boundary(boundary)), SRID(boundary))) FROM named_places WHERE name = 'Goose Island';
```

#### T20: 检查命名地点边界的环形
```sql
SELECT IsRing(LineFromWKB(AsBinary(Boundary(boundary)), SRID(boundary))) FROM named_places WHERE name = 'Goose Island';
```

#### T21: 获取道路段长度
```sql
SELECT Length(centerline) FROM road_segments WHERE fid = 106;
```

#### T22: 获取道路段点数
```sql
SELECT NumPoints(centerline) FROM road_segments WHERE fid = 102;
```

#### T23: 获取道路段的第一个点
```sql
SELECT AsText(PointN(centerline, 1)) FROM road_segments WHERE fid = 102;
```

#### T24: 获取命名地点边界的质心
```sql
SELECT AsText(Centroid(boundary)) FROM named_places WHERE name = 'Goose Island';
```

#### T25: 检查命名地点边界是否包含其表面点
```sql
SELECT Contains(boundary, PointOnSurface(boundary)) FROM named_places WHERE name = 'Goose Island';
```

#### T26: 获取命名地点边界的面积
```sql
SELECT Area(boundary) FROM named_places WHERE name = 'Goose Island';
```

#### T27: 获取湖泊岸线的外环
```sql
SELECT AsText(ExteriorRing(shore)) FROM lakes WHERE name = 'Blue Lake';
```

#### T28: 获取湖泊岸线的内环数量
```sql
SELECT NumInteriorRing(shore) FROM lakes WHERE name = 'Blue Lake';
```

#### T29: 获取湖泊岸线的第一个内环
```sql
SELECT AsText(InteriorRingN(shore, 1)) FROM lakes WHERE name = 'Blue Lake';
```

#### T30: 获取分割路线的几何数量
```sql
SELECT NumGeometries(centerlines) FROM divided_routes WHERE name = 'Route 75';
```

#### T31: 获取分割路线的第二个几何
```sql
SELECT AsText(GeometryN(centerlines, 2)) FROM divided_routes WHERE name = 'Route 75';
```

#### T32: 检查分割路线是否闭合
```sql
SELECT IsClosed(centerlines) FROM divided_routes WHERE name = 'Route 75';
```

#### T33: 获取分割路线的长度
```sql
SELECT Length(centerlines) FROM divided_routes WHERE name = 'Route 75';
```

#### T34: 获取池塘岸边的质心
```sql
SELECT AsText(Centroid(shores)) FROM ponds WHERE fid = 120;
```

#### T35: 检查池塘岸边是否包含其表面点
```sql
SELECT Contains(shores, PointOnSurface(shores)) FROM ponds WHERE fid = 120;
```

#### T36: 获取池塘岸边的面积
```sql
SELECT Area(shores) FROM ponds WHERE fid = 120;
```

#### T37: 检查命名地点边界是否等于给定的多边形
```sql
SELECT Equals(boundary, PolyFromText('POLYGON((67 13, 67 18, 59 18, 59 13, 67 13))', 1)) FROM named_places WHERE name = 'Goose Island';
```

#### T38: 检查分割路线与命名地点边界是否不相交
```sql
SELECT Disjoint(centerlines, boundary) FROM divided_routes, named_places WHERE divided_routes.name = 'Route 75' AND named_places.name = 'Ashton';
```

#### T39: 检查溪流与湖泊岸线是否接触
```sql
SELECT Touches(centerline, shore) FROM streams, lakes WHERE streams.name = 'Cam Stream' AND lakes.name = 'Blue Lake';
```

#### T40: 检查命名地点边界是否在建筑物范围内
```sql
SELECT Within(boundary, footprint) FROM named_places, buildings WHERE named_places.name = 'Ashton' AND buildings.address = '215 Main Street';
```

#### T41: 检查森林边界与命名地点边界是否重叠
```sql
SELECT Overlaps(forests.boundary, named_places.boundary) FROM forests, named_places WHERE forests.name = 'Green Forest' AND named_places.name = 'Ashton';
```

#### T42: 检查道路段与分割路线是否交叉
```sql
SELECT Crosses(road_segments.centerline, divided_routes.centerlines) FROM road_segments, divided_routes WHERE road_segments.fid = 102 AND divided_routes.name = 'Route 75';
```

#### T43: 检查道路段与分割路线是否相交
```sql
SELECT Intersects(road_segments.centerline, divided_routes.centerlines) FROM road_segments, divided_routes WHERE road_segments.fid = 102 AND divided_routes.name = 'Route 75';
```

#### T44: 检查森林边界是否包含命名地点边界
```sql
SELECT Contains(forests.boundary, named_places.boundary) FROM forests, named_places WHERE forests.name = 'Green Forest' AND named_places.name = 'Ashton';
```

#### T45: 检查森林边界与命名地点边界的关系
```sql
SELECT Relate(forests.boundary, named_places.boundary, 'TTTTTTTTT') FROM forests, named_places WHERE forests.name = 'Green Forest' AND named_places.name = 'Ashton';
```

#### T46: 获取桥梁位置与命名地点边界的距离
```sql
SELECT Distance(position, boundary) FROM bridges, named_places WHERE bridges.name = 'Cam Bridge' AND named_places.name = 'Ashton';
```

#### T47: 获取溪流与湖泊岸线的交集
```sql
SELECT AsText(Intersection(centerline, shore)) FROM streams, lakes WHERE streams.name = 'Cam Stream' AND lakes.name = 'Blue Lake';
```

#### T48: 获取命名地点边界与森林边界的差集
```sql
SELECT AsText(Difference(named_places.boundary, forests.boundary)) FROM named_places, forests WHERE named_places.name = 'Ashton' AND forests.name = 'Green Forest';
```

#### T49: 获取湖泊岸线与命名地点边界的并集
```sql
SELECT AsText(Union(shore, boundary)) FROM lakes, named_places WHERE lakes.name = 'Blue Lake' AND named_places.name = 'Goose Island';
```

#### T50: 获取湖泊岸线与命名地点边界的对称差集
```sql
SELECT AsText(SymDifference(shore, boundary)) FROM lakes, named_places WHERE lakes.name = 'Blue Lake' AND named_places.name = 'Ashton';
```

#### T51: 获取建筑物在桥梁缓冲区内的数量
```sql
SELECT COUNT(*) FROM buildings, bridges WHERE Contains(Buffer(bridges.position, 15.0), buildings.footprint) = 1;
```

#### T52: 获取湖泊岸线的凸包
```sql
SELECT AsText(ConvexHull(shore)) FROM lakes WHERE lakes.name = 'Blue Lake';
```

---

版权所有 © 2007 Open Geospatial Consortium, Inc. 保留所有权利。  
OGC 06-104r4 版权所有 © 2007 Open Geospatial Consortium, Inc. 保留所有权利。

---