Facts are special symbols that can take any fixed number of terms as their arguments. A specific subset of these facts encodes messages on the network and adversary knowledge, while all other facts represent the protocol state. We typically denote a fact named `Factname` with three terms as its arguments as `Factname(t1, t2, t3)`. 

A labeled multiset rewriting rule is structured as follows:
```
[ l ] --[ a ]-> [ r ]
```
where `l`, `a`, and `r` are multisets of facts representing the premises, actions, and conclusions, respectively. These may contain variables. If a rule has no associated action, the `[ a ]` part is omitted.

### Signature Model with Message Recovery

The standard symbolic signature model allows both the protocol and the adversary to verify signatures by applying a verification function to a claimed signature, the expected message, and the public key. The result is then tested for equality to `true`.

In this model, a public key is considered a function of a secret key, rather than both being functions of a seed value. This approach aligns with traditional symbolic models, and conversion between representations is straightforward. These models have been widely adopted over the past 20 years, as seen in Tamarin [72, Page 37] and ProVerif [41, Page 14]. The message recovery model is also documented in the original ProVerif paper [39].

#### Functions and Equations
- **Functions**: `rvlSign /2`, `rvlVerify /3`, `getMsg /1`, `pk /1`, `true /0`
- **Equations**:
  - `rvlVerify(rvlSign(m, sk), m, pk(sk)) = true`
  - `getMsg(rvlSign(m, sk)) = m`

### ProVerif’s Probabilistic Model with Message and Key Recovery

ProVerif's manual [41, Page 46] proposes an alternative model for non-deterministic signatures with message and key recovery:

- **Functions**: `spk /1`, `sign /3`, `getmess /1`, `checksign /2`, `getkey /1`
- **Equations**:
  - `checksign(sign(m, k, r), spk(k)) = true`
  - `getmess(sign(m, k, r)) = m`
  - `getkey(sign(m, k, r)) = spk(k)`

### Labeled Transition System

The labeled transition system operates on ground terms, which are terms without variables. A rule is applicable in a given ground state if an instantiation of the premises of the rule is a subset of the current state. Applying a rule changes the state by removing the premises and adding appropriately instantiated conclusions. The instantiated action facts are the actions associated with this rule instance.

### Execution and Traces

An execution is a sequence of states starting from the empty set, with transitions between states defined by rule instances. A trace is the sequence of ground action facts appearing at the rule instances in a protocol execution.

### Security Properties

Security properties are defined using a fragment of two-sorted first-order logic, with messages and timepoints, and quantification over both. The atoms considered include ⊥ (false), term (in-)equality (`s = s'`), and timepoint ordering (`t1 < t2`).

### Example: No-DEO Model

For signature schemes that do not satisfy Denial of Existence (DEO), we add the following equation and rule to Tamarin:

- **Equation**: `Neq(m1, m2)`
- **Rule**:
  ```
  [ In(DEOgen(m1, sign(m1, sk)), A) ]
  --[ Neq(m1, m2 )]->
  [ Out(DEOgen(m2, sign(m1, sk))) ]
  ```

After adding this to Tamarin, reanalyzing STS-ID reveals a UKS attack, as reported by Baek and Kim [25]. The attack proceeds similarly to the one on the original STS-MAC protocol, where the adversary waits for the final message and produces a public key that verifies A’s signature but for a message altered to include the adversary’s identity.

### Decidability of Protocols

Chevalier and Kourjieh [44] explored the decidability of protocols in this context, providing further insights into the theoretical foundations of these models.