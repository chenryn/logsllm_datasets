Facts are special symbols that take any (fixed) number of terms as
their arguments. There is a special set of them that encodes mes-
sages on the network as well as adversary knowledge. All other facts
represent the protocol state. We generally write Factname(t1, t2,
t3) for a fact named Factname with three terms as its arguments.
A labeled multiset rewriting rule is then of the form
















functions : rvlSign /2 , rvlVerify /3 , getMsg /1 , pk /1 , true /0
equations : rvlVerify ( rvlSign (m , sk ) ,m , pk ( sk )) = true
getMsg ( rvlSign (m , sk )) = m
Signature Model with Message Recovery used by both tools
rule name :
[ l ] --[ a ]-> [ r ]
The equation in the standard symbolic signature model allows
the protocol and adversary to verify signatures by applying verify
to a claimed signature, alongside the expected message and public
key, and test if the resulting term is equal to true. In these models
of signatures, a public key is considered to be a function of a secret
key, rather than the typical notion that both are functions of a seed
value. We follow the traditional symbolic model in this paper. Note
that converting between the two representations is straightforward.
These models have become a standard over the past 20 years,
see [72, Page 37] for Tamarin’s version, and [41, Page 14] for
ProVerif’s. Indeed the message recovery model appears verbatim
in [39], the original ProVerif paper. Tools such as CPSA [53] and
Maude-NPA [54] use similar models.
The ProVerif manual [41, Page 46] proposes an alternative model,
which captures non-deterministic signatures with message and key
recovery:
functions : spk /1 , sign /3 , getmess /1 , checksign /2 , getkey /1
equations : checksign ( sign (m ,k ,r) , spk (k)) = true
getmess ( sign (m ,k ,r)) = m
getkey ( sign (m ,k ,r))
= spk (k)
ProVerif’s Probabilistic Model with Message and Key Recovery
(Translated into Tamarin notation)
where rule is a keyword, name is an identifier, and l, a, r are
multisets of facts representing the premises, actions, and conclusions
respectively. All of these may contain variables. Some rules may
have no associated action, and in that case we omit the action [ a
] in the rule description.
The labeled transition system operates on ground terms, i.e., terms
without variables. A rule is applicable in a given ground state when
an instantiation of the premises of the rule is a subset of the current
state. Applying a rule changes the state by removing the premises,
and adding appropriately instantiated conclusions. The instantiated
action facts are the action associated with this rule instance.
An execution is a sequence of states starting from the empty set
and using rule instances to transition from one state to the next.
Then, a trace is the sequence of ground action facts appearing at
the rule instances in a protocol execution.
Security properties are defined in a fragment of two-sorted first-
order logic, with messages and timepoints, and quantification is pos-
sible over both. The atoms considered are then ⊥, term (in-)equality
s = s’, timepoint ordering t1 )]
--[ Neq (m1 , m2 )]->
[ Out ( DEOgen (m2 , sign (m1 , sk )))]
No-DEO: Model for signature schemes that do not satisfy DEO.
After adding this equation and rule to Tamarin, we rerun our anal-
ysis on STS-ID and discover a UKS attack. This attack was reported
in a short paper by Baek and Kim [25]. The attack proceeds in much
the same way as the attack on the original STS-MAC protocol. The
adversary waits until A sends the final message and then produces
a public key for which A’s signature will verify, but for a message
altered to include the adversary’s identity.
Chevalier and Kourjieh [44] considered the decidability of proto-