title:On Using Application-Layer Middlebox Protocols for Peeking Behind
NAT Gateways
author:Teemu Rytilahti and
Thorsten Holz
On Using Application-Layer Middlebox Protocols
for Peeking Behind NAT Gateways
Teemu Rytilahti
Ruhr University Bochum
PI:EMAIL
Thorsten Holz
Ruhr University Bochum
PI:EMAIL
Abstract—Typical port scanning approaches do not achieve a
full coverage of all devices connected to the Internet as not all
devices are directly reachable via a public (IPv4) address: due to
IP address space exhaustion, ﬁrewalls, and many other reasons,
an end-to-end connectivity is not achieved in today’s Internet
anymore. Especially Network Address Translation (NAT) is widely
deployed in practice and it has the side effect of “hiding” devices
from being scanned. Some protocols, however, require end-to-end
connectivity to function properly and hence several methods were
developed in the past to enable crossing network borders.
In this paper, we explore how an attacker can take advantage
of such application-layer middlebox protocols to access devices
located behind these gateways. More speciﬁcally, we investigate
different methods for identifying such devices by using only
legitimate protocol features. We categorize the available protocols
into two classes: First, there are persistent protocols that are
typically port-forwarding based. Such protocols are used to allow
local network devices to open and forward external ports to them.
Second, there are non-persistent protocols that are typically proxy-
based to route packets between network edges, such as HTTP
and SOCKS proxies. We perform a comprehensive, Internet-wide
analysis to obtain an accurate overview of how prevalent and
widespread such protocols are in practice. Our results indicate
that hundreds of thousands of hosts are vulnerable for different
types of attacks, e. g., we detect over 400,000 hosts that are
likely vulnerable for attacks involving the UPnP IGD protocol.
More worrisome, we ﬁnd empirical evidence that attackers are
already actively exploiting such protocols in the wild to access
devices located behind NAT gateways. Amongst other ﬁndings,
we discover that at least 24 % of all open Internet proxies are
misconﬁgured to allow accessing hosts on non-routable addresses.
I.
INTRODUCTION
Port scanning is a common phenomenon on the Internet.
In 2007, Allman et al. [2] presented a 12-year-long view of
Internet scanning based on data collected starting from 1994
until 2006. According to their analysis, the year 2001 marked
the end of an era where the number of regular connection
attempts dropped below those of scanners. Nmap [46] is
probably the most popular port scanning tool, but it was not
designed to perform high-speed scans over large portions of the
Internet. As a result, tools such as ZMap [20] and Masscan [27]
were developed. They take advantage of the steadily increasing
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24389
www.ndss-symposium.org
available bandwidth and enable efﬁcient and scalable Internet-
wide scans. In 2014, Durumeric et al. [19] studied the network
scanning activity with the help of a large darknet, concluding
that both researchers (e. g. [39], [60]) and malicious actors
(e. g., for locating vulnerable hosts for reﬂection attacks) are
leveraging these tools for large horizontal scans of the Internet.
Nowadays, searchable databases exist for exploring results
from such scans such as Censys [36] and Shodan [63], allowing
anyone to explore the scan results efﬁciently.
Unfortunately,
typical port scanning approaches do not
achieve full coverage of all devices connected to the Internet
because they require a direct network connection to the to-
be-scanned device. In practice, however, not all devices are
directly reachable via a public (IPv4) address: due to IP address
space exhaustion, ﬁrewalls, and many other reasons, an end-to-
end connectivity is not achieved in today’s Internet anymore.
Mainly due to the rising number of connected devices in our
times, the number of available IP addresses to give out has
depleted, and this has become a problem in practice. To address
this obstacle, different solutions have been developed, e. g.,
IP version 6 (IPv6) which uses 128 bits for addressing, but
its adoption has been slow even though growing [34]. The
Internet as a whole has not hurried to use IPv6—instead,
Network Address Translation (NAT) is widely deployed in
order to allow the expansion of the Internet to continue without
moving to IPv6. Lately, Carrier-grade NATs (CGN), where this
translation is done on the Internet Service Provider’s (ISP)
premises to allow bundling several clients behind a single IP
address, are commonplace and increasing in numbers [45].
By assigning clients a non-publicly routable address space
(see RFC 1918 [59]), a single Internet-facing device can be
used as a gateway device for a multitude of clients. For
example, in their study on the prevalence of middleboxes,
Huang et al. [33] reported in 2017 that 7 % (or 695) of the
autonomous systems they investigated using Luminati were
evidently behind middleboxes.
The basic idea of NAT is to use other information besides
IP addresses for routing by translating the address when the
packet is being sent to the Internet. This can be done by saving
the information obtained from outgoing communications, i. e.,
storing a tuple of source and destination addresses, respective
ports, and the protocol (UDP, TCP, etc.) to allow identifying
the connection later on. The device performing this translation
keeps a collection of these tuples in a so-called connection
tracking table. When receiving a packet destined to an external
network from LAN, NAT will adjust the source address and
port transparently to the sender and save it in the tracking table.
Upon receiving a response, it will check its connection tracking
table to see if it is part of a known ﬂow. If a match is found,
it will rewrite the destination address and port accordingly to
those values that were stored in the table earlier. As a side-
effect, NAT also builds a feeling of security, as the assigned IP
addresses of the internal clients are not routable and thus not
directly accessible from the Internet. As a result, these devices
are “hidden” from network scanners and cannot be probed with
existing scanning tools.
In this paper, we explore different approaches to access
networks that should be inaccessible by the fact that they
are behind (NAT) gateways. More speciﬁcally, we investigate
different methods for enumerating such devices by using
legitimate features of protocols designed to cross network
borders. Our approach bases on the insight that there are also
downsides for mangling the connections via NAT/CGN. Most
importantly, NAT breaks the end-to-end connectivity between
devices. For example, some application layer protocols storing
IP address information in their payloads, such as Session Initi-
ation Protocol (SIP) commonly used for Voice over IP (VoIP),
are affected by NAT as the address does not match anymore.
Second, some protocols such as File Transfer Protocol (FTP)
may use multiple ports for communication, requiring special
handling to allow communication to those other ports. Third,
and most importantly, NAT prevents incoming connections to
the devices in the internal network if there is no indication
where the packets are to be relayed, making hosting services
behind them impossible without NAT traversal techniques.
To overcome these challenges, several application-layer
middlebox protocols were developed and deployed on the
Internet to enable crossing network borders. We show how
these protocols can be utilized by an adversary to peek behind
gateways. More speciﬁcally, we systematically explore how
different types of protocols can be used to access devices
behind a NAT gateway or relay trafﬁc to external systems. For
example, we show how the UPnP Internet Gateway Device
(UPnP IGD) protocol can enable access to internal networks
that would otherwise be out of reach for attackers. Generally
speaking, we categorize the available protocols into two classes
based on their temporal behavior. On the one hand, there are
persistent protocols that are port-forwarding based: such NAT
traversal protocols are used to allow local network devices
to open and forward external ports to them, hence bypassing
the restrictions of NAT. In practice, the three commonly used
protocols are UPnP Internet Gateway Device (UPnP IGD),
NAT Port Mapping Protocol (NAT-PMP), and its successor
Port Control Protocol (PCP). On the other hand, the non-
persistent proxy protocols allow merely relaying packets for
the life-time of the proxy connection. Famous examples are
HTTP and SOCKS proxies, where especially SOCKSv5 is
much more powerful compared to HTTP proxies given that
the protocol also allows UDP connections.
Throughout
the paper, we assume the following threat
model: we investigate how an external attacker can leverage
these protocols to pivot to networks that would otherwise be
inaccessible for them. This ability could be used to exploit
unpatched devices deemed to be secure due to their lack of
a public IP address. For NAT traversal protocols, the premise
is that the normally only LAN-accessible control interfaces
are mistakenly also open to the Internet. For proxies, where
the expected functionality is to be open to the Internet, the
premise is a misconﬁguration of access control mechanisms.
We emphasize that
the described methods could also be
exploited for further access by an attacker who already has
a foothold into the network.
In a ﬁrst step, we perform Internet-wide scans to study the
prevalence of persistent protocols in the wild. Among other
ﬁndings, our measurements discover over 400,000 (~15 %)
of UPnP responsive hosts that are likely vulnerable to this
class of attacks. Most interestingly, we ﬁnd that over 60,000
hosts contain traces of attempts to misuse such protocols,
which serves as empirical evidence that attackers are already
actively exploiting endpoints behind the corresponding gate-
ways. In addition, we provide a comprehensive analysis of
the usage of NAT port-mapping with the help of UPnP’s
enumeration feature. Our analysis shows that these vulnerable
gateways are still more commonly used for their designed
purpose, e. g., to allow BitTorrent and chat software, such as
WeChat or WhatsApp, to function. We also perform a brief
measurement study on the existence of NAT-PMP/PCP, which
is a competing standard for controlling port mappings. Our
results indicate that although there exist Internet-exposed NAT-
PMP/PCP endpoints, they do not seem to be vulnerable for
protocol-conforming forward attacks like the UPnP endpoints
we identiﬁed during our scans.
Second, we also study the non-persistent, temporary relay
protocols HTTP and SOCKS, and investigate if open network
proxies can also be used for similar malicious purposes. To
this end, we scan the Internet on commonly used proxy ports
and make requests on reachable open network proxies to un-
derstand their functionalities and potential misconﬁgurations.
We ﬁnd that merely 3 % of all Internet-exposed proxies are
open proxies, while the majority of the closed ones are running
outdated Squid instances located in just a few networks, hinting
at ISP-wide installations. Among other ﬁndings, we show that
47 % of open SOCKSv4 proxies support DNS extension, that
merely 9 % of SOCKSv5 proxies support IPv6, 10 % support
UDP relaying, and that 76 % perform DNS resolving. Worse,
we discover that 23 % of all open proxies (potentially up to
40 %) are misconﬁgured and can be abused by an attacker
to access internal networks. In addition, by analyzing the
responses from these misconﬁgured proxies, we show that
they can be leveraged to access internal services such as
router conﬁguration pages and SSH, which are not otherwise
externally accessible. We also discovered a large population
of about 200,000 open HTTP proxies located on a single
autonomous system of a large European ISP. We argue that
even when open proxies are small in numbers on a global
scale, many users are typically located behind such proxies
(e. g., in corporate environments) and they could be exploited
via such misconﬁgurations.
In summary, we make the following key contributions:
1) We explore different methods that can be used for
scanning internal networks via protocols that en-
able us to connect devices across network borders.
We divide these protocols into two types: persistent
NAT traversal protocols such as UPnP IGD and
NAT-PMP/PCP, where the target changes the rout-
ing behavior, and non-persistent protocols such as
2
HTTP/SOCKS proxies, where the target acts as an
intermediary.
2) We perform extensive, Internet-wide measurements
to provide a comprehensive overview of hosts on the
Internet implementing these protocols. Based on this
empirical data, we analyze the potential attack surface
while taking both ethical and legal considerations into
account. Amongst other results, we ﬁnd empirical
evidence that attackers are already actively exploiting
the techniques studied by us in the wild.
In contrast to previous studies, we provide a more
holistic and comprehensive view of the proxy ecosys-
tem by also analyzing the non-open proxies to the
extent possible.
3)
This paper is structured into several main sections that each
contains a preface describing its intent, and where suitable,
we separate the measurement approach, evaluation, and our
key ﬁndings inside sections for clarity. After these three
main sections, we discuss related works (Section V), reﬂect
on ethical considerations and some limitations of our study
(Section VI), and conclude in Section VII with a summary.
II. UPNP INTERNET GATEWAY DEVICE
Universal Plug and Play (UPnP) is a marketing term used
for a set of protocols which aim at enabling consumer devices
to discover and control other UPnP-enabled devices effort-
lessly [54]. In practice, UPnP is typically used in the context of
home-entertainment systems for media streaming and playback
controlling. In the context of this paper, we are interested in
the UPnP Internet Gateway Device (IGD) proﬁle, which is a
suite of UPnP services for conﬁguring gateway devices. The
offered capabilities vary by implementations, but commonly
exposed services include capabilities for querying the state of
external connectivity, controlling potential integrated services
(such as DHCP), and controlling port mappings.
In this section, we investigate the port mapping control
functionalities of the UPnP IGD proﬁle, especially concentrat-
ing on how external actors could misuse this proﬁle to insert
new port forwards to access otherwise inaccessible networks.
Although we concentrate on how this functionality can be
misused by an external attacker due to the endpoints being
exposed to the Internet (while they should only be available on
LAN interfaces), we emphasize that the same functionality can
also be misused by an adversary who has already compromised
a device on the network. However, as measuring this is a
hard task, we perform Internet-wide scans to ﬁnd hosts which
expose this interface to the WAN interface and enumerate over
the existing port forwards to obtain insights on how this feature
is used for both benign and malicious uses.
A. Measurement Approach
In the scope of our work, we are only interested in existing
port forwards on those devices. Obtaining that information is
a three-step process, as illustrated in Figure 1: (i) discovering
UPnP devices by sending discovery requests with a portscan-
ning tool such as ZMap (Section II-A1), (ii) downloading
the device description ﬁle from responsive hosts to see if
they are exposing the services of our interest (Section II-A2),
and ﬁnally (iii) enumerating over existing port forwards (Sec-
tion II-A3). In the following, we describe each step in detail.
Fig. 1. UPnP scanning method:  We start by scanning with ZMap for SSDP
responsive hosts and feeding the results to our scanning system (Sec. II-A1).
 We extract the location of the device description ﬁle from responses and try
to fetch it (Sec. II-A2).   We enumerate the existing port forwardings from
responsive hosts and save results to a database for analyses. (Sec. II-A3)
1) Discovering UPnP Devices: Although the Simple Ser-
vice Discovery Protocol (SSDP) uses HTTP-like requests on
the UDP multicast group 239.255.255.250 with port 1900 for
UPnP discovery, the architecture speciﬁcation mandates that all
devices shall also listen for unicast search messages [54]. The
discovery begins when the requesting party sends a discovery
request containing a Search Target (ST) header indicating
which types of services it is looking for. All matching devices
supporting the searched service shall send a unicast reply to
the requester, one for each matching service in case there exist
multiple matching services. In our example (see the ﬁrst step
in Figure 1, or Listing 1 in Appendix A for more details),
we use the wildcard target "ssdp:all" to elicit responses
about all available UPnP services on all devices receiving the
request. As a side note: this feature is also the very same that
is widely used for DDoS attacks [60].
We used ZMap’s UPnP probe payload and saved the results
into a list in a Redis database. The results were read simultane-
ously from the list by our scanner to avoid potential IP churn.
We had to modify ZMap because the stock version captures
only responses with the source port 1900 (same as destination),
and we found that this signiﬁcantly underestimates the actual
number of UPnP hosts on the Internet.
2) Finding Port Mapping Services: The ﬁrst step our
crawler takes is extracting the location of the device description
ﬁle (contained in the LOCATION header of the discovery
response, see the search response in Figure 1), replacing the
(potentially internal, 10.0.0.1 in the example) IP address with
the source of the SSDP reply (192.0.2.123 in the example)
3
ZMap❶ Discovering UPnP Devices (Section II-A1)Our Scanner❷ Finding Port Mapping Services (Section II-A2)GET /gatedesc.xml    1337    127.0.0.1    443    TCP            Allow remote conﬁguration!    ❸ List Existing Port Mappings (Section II-A3)Enumerate incrementing index until receiving an error.srcip: 192.0.2.123200 OKLOCATION: http://10.0.0.1/gatedesc.xml     .. WANIPConnection ..     /ctl/IPConnDevice Description FileSearch responsePOST /ctl/IPConn HTTP/1.1    index Vulnerable Device192.0.2.123Vulnerable Device192.0.2.123and ﬁnally trying to fetch the ﬁle (step 2 in Figure 1).
This XML ﬁle contains general information about the device
(including its name, manufacturer, serial number, etc.), a list
of exposed devices, and the services that are currently being
offered. An abbreviated example is available in Listing 2 in
Appendix A. In this paper, we are interested in interfaces
implementing any version of the WANIPConnection or the
WANPPPConnection service (later WAN*Connection).
Each service entry element contains the location of a service
description ﬁle containing, e. g., what actions are provided,
and what their parameters and return values are. As we work
on UPnP-standardized services, we do not need to parse the
service description ﬁles, but simply mark down the SOAP
service endpoints (controlURL) necessary for our next step.
3) Listing Existing Port Mappings: Invoking a UPnP action
happens by sending a speciﬁcally crafted, SOAP-formed HTTP
POST request to the service endpoint. This request contains
a SoapAction header describing the action to execute and
its body is an XML-encoded SOAP document containing the
parameters speciﬁc to the action.
There are currently two versions of the WAN*Connec-
tion service which support different sets of actions for
obtaining existing port mappings. The more widely sup-
ported version 1 exposes an index-based GetGenericPort-
MappingEntry, which allows enumerating the existing map-
pings by executing the call with incremented index until an
error is received. Version 2 introduces GetListOfPort-
Mappings to query all available port mappings without
enumeration. Based on our preliminary investigation on SSDP
responses from vulnerable devices, this is not widely available
in practice. As the versions are backward-compatible, we use
the former in the remainder of this paper.
To accommodate for potential sparseness in forward lists
(e. g., due to removal of forwards in-between), we continue
iterating up to ﬁve times after receiving the ﬁrst SOAP error.
The response contains the forwarded port as well as the
target host, port, used protocol (TCP/UDP), and a descrip-
tion, among other information. A condensed example of the
response is shown in the bottom-most response in Figure 1.
Note that the values found in the responses mirror the ones
for AddGenericPortMapping calls used to create port
mappings and which resides under the same service endpoint
(i.e., we assume is, that they share the same access controls).
B. Evaluation
We performed an Internet-wide scan in January 2019 with a
patched version of the ZMap scanner [20]. The total runtime of
the whole, Internet-wide crawling process was approximately
12 hours, including the ZMap scan. A summary of the results
can be seen in Table I. For readibility, we round the numbers
in text and refer our readers to the table for exact numbers.
In the following, we use the terms “port mapping” and “(port)
forward” interchangeably.
1) Responsive UPnP Hosts: Our ZMap scan received re-
sponses from ~2,800,000, from which the majority (66 %)
would have been ignored by the standard ZMap due to its
port ﬁlter (we saw replies from 44,075 distinct source ports).
We contacted the ZMap developers and submitted a patch to
address this problem, the patch was accepted and merged. We
TABLE I.
RESPONSIVE UPNP HOSTS
Total WAN*Connection
SSDP responses
From port 1900
From other ports ††
Countries
Unique AS#
Exposed HTTP endpoints ‡
Manufacturers