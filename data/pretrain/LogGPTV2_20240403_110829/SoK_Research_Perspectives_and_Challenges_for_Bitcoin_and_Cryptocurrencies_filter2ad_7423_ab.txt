that redeems certain outputs—an individual owns as many
bitcoins as they can redeem. Public key hashes, as speciﬁed
in pay-to-pub-key-hash transactions, effectively function as
pseudonymous identities within the system and are referred
to as addresses. No real-world name or identifying informa-
tion are required.
Arguably, there is little that is deeply innovative about
Bitcoin’s transaction format. However, the use of a scripting
language to specify redemption criteria and the realization
that transactions can specify the entire state of the system
are non-obvious design choices given prior cryptocurrency
systems, both of which have been standard in essentially all
subsequent designs. Some proposals extend the semantics
of Bitcoin transactions (often by enhancing the scripting
language) without changes to any other components.
2) Consensus and Mining: A transaction-based currency
system would be insecure if transactions were sent directly
between users to transfer funds. While the signatures would
limit only the valid recipient of a previous transaction from
referencing it in valid follow-up transactions, there is nothing
in the transactions themselves to limit Alice from redeeming
some transaction input twice in separate transactions sent
to Bob and Carol, both of which would appear valid in
isolation. Bitcoin takes a simple approach to solving this
double spending attack: all transactions must be published
in a global, permanent transaction log and any individual
transaction output may only be redeemed in one subsequent
transaction. Verifying a transaction now requires verifying
the transaction’s scripts as well as ensuring that it is success-
fully published to the log. In Bitcoin, the log is implemented
as a series of blocks of transactions, each containing the
hash of the previous block, committing this block as its sole
antecedent. It is referred to as the blockchain.
Note that this design still requires global consensus on
the contents of the blockchain. If Bob and Carol see two
divergent blockchains, they will be vulnerable to double-
spending attacks. One solution is to use a trusted central
authority to collect transactions and publish them in signed
blocks. However, this is undesirable as this authority might
refuse to publish certain transactions (effectively freezing
a user’s assets), might go ofﬂine completely, or might
intentionally fork the blockchain to double-spend coins.
Nakamoto consensus. Bitcoin instead establishes consen-
sus on the blockchain through a decentralized, pseudony-
mous protocol dubbed Nakamoto consensus. This can be
considered Bitcoin’s core innovation and perhaps the most
crucial ingredient to its success. Any party can attempt to
add to the chain by collecting a set of valid pending transac-
106106
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:10 UTC from IEEE Xplore.  Restrictions apply. 
tions and forming them into a block. The core ingredient is
the use of a challenging computational puzzle (usually given
the slight misnomer proof of work7) to determine which
party’s block will be considered the next block in the chain.
The process for choosing a new block is simple: the
ﬁrst announced valid block containing a solution to the
computational puzzle is considered correct. Upon hearing
of it, other participants are meant to begin working to ﬁnd
a followup block. If an announced block contains invalid
transactions or is otherwise malformed, all other participants
are meant to reject it and continue working until they have
found a solution for a valid block. At any given time, the
consensus blockchain is the “longest” version. Typically this
is simply the branch with the most blocks, but because the
mining difﬁculty can vary between long forks the longest
chain must be deﬁned as the one with the greatest expected
difﬁculty to produce.8
It is also possible for two valid solutions to be found
at approximately the same time (depending on network
latency), which leads to a temporary fork during which there
are two equal-length chains. Miners can choose either fork in
this scenario. Due to the random nature of the computational
puzzle, one blockchain will eventually be extended further
than the other at which point all miners should adopt it.
While Bitcoin’s original speciﬁcation provided only an in-
formal argument that eventual consensus would emerge [90],
followup work has proved that, assuming an effective and
timely broadcast channel and that miners controlling a ma-
jority of computational power follow the protocol faithfully,
the protocol is robust and the network gradually reaches con-
sensus [46], [84]. We will discuss this further in Section III.
Block conﬁrmation. The gradual nature of this consensus
mechanism implies that users must wait for blocks to be
found in order to gain high conﬁdence that a transaction is
permanently included in the blockchain. During a fork, one
of the branches will eventually be discarded after miners
converge on the other. Although both branches typically
include mostly the same transactions, if conﬂicting trans-
actions are included in competing branches then one may
be apparently included in the longest chain but be revoked
if the other branch surpasses it. In the worst case, this can
effectively enable a double spending attack [12], [60].
In theory, users can never be completely sure that a
transaction won’t eventually be removed by a very deep
fork [13], [70]. However, if a majority of miners follow
the default protocol then users can infer that a transaction
is exponentially increasingly likely (see Section III-A) to
end up on the eventual longest chain as more conﬁrming
7Bitcoin’s mining puzzle is not a true proof-of-work scheme but a
probabilistic one. Finding a solution is computationally challenging on
expectation, but it is possible to get lucky and ﬁnd a solution with very
little work.
8Speciﬁcally,
this prevents an attacker from forking the blockchain,
modifying timestamps on their fork to produce a lower difﬁculty, and using
this lower difﬁculty to more easily overtake the previous longest chain.
blocks are found. In practice, most Bitcoin clients require 6
“conﬁrmation” blocks before accepting that a transaction is
published. The choice of 6 blocks is arbitrary, it originates
from the reference client and is not based on any analysis
of the probability of deep forks.
Deep forks are also prevented in an ad-hoc manner
by including hard-coded blockchain preﬁxes (checkpoints)
with the default Bitcoin client which clients require in any
valid blockchain. Laurie [70] argues that these checkpoints
demonstrate that Bitcoin is not a true decentralized consen-
sus protocol, as they are chosen in a centralized manner.
Incentivizing correct behavior. A critical component of
the protocol is that a participant who ﬁnds a block can
insert a coinbase transaction minting a speciﬁed amount of
currency and transferring it to an address of their choosing.
Because participants are working (indeed, racing) to solve
this computational puzzle in exchange for monetary rewards,
they are called miners. This new currency, called the block
reward, incentivizes miners to only work on valid blocks,
as invalid ones will be rejected by the network and their
mining rewards will then not exist in the eventually-longest
blockchain. Note that from the miner’s point of view, “valid”
blocks are simply those which they believe the majority of
other miners will accept and build upon, trumping any other
speciﬁcation of validity (of which there is none beyond the
bitcoind implementation).
Because this consensus algorithm relies on monetary
rewards for miners it cannot easily be used in systems with
no notion of transferable value. In Bitcoin, miners receive
all new currency initially and there is no other allowed
mechanism for money creation. This is not strictly essential,
but the consensus protocol does require some reward is
issued to miners or else they have no incentive to ﬁnd valid
blocks and solve the difﬁcult computational puzzle.
Mining details. The computational puzzle itself requires
ﬁnding a partial pre-image for SHA-256, a cryptographic
hash function. Speciﬁcally, the puzzle is to ﬁnd a block
(consisting of a list of transactions, the hash of the previous
block, a timestamp and version number, plus an arbitrary
nonce value) whose SHA-256 hash is less than a target value.
The puzzle is often described approximately as ﬁnding a
hash that starts with d consecutive zero bits.9 The standard
strategy is simply to try random nonces10 until a solution is
found (though this may not be the only strategy [34]).
The randomized nature of this puzzle is important; with
a non-randomized puzzle (true proof-of-work) the most
powerful individual miner could be expected to ﬁnd every
block ﬁrst. With a randomized puzzle each miner will have
a probability of ﬁnding the next block proportional to their
9At the time of this writing d ≈ 68.
10The puzzle is slightly more complicated in that the randomness is split
into a 32-bit nonce in the block header and an arbitrary “extra nonce” in the
coinbase transaction. Most miners proceed by choosing a random coinbase
nonce and then exhausting all 232 values for the header nonce.
107107
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:10 UTC from IEEE Xplore.  Restrictions apply. 
share of the competing computational power.
The difﬁculty of the puzzle is calibrated so that a new
block is found, on average, once every 10 minutes. To main-
tain this, the difﬁculty is adjusted once every 2016 blocks, or
approximately every two weeks, by a deterministic function
of the timestamps included in the previous 2016 blocks.11
Mining rewards and fees. The size of the block reward is
determined by a ﬁxed schedule. Initially, each block created
B50. This has since halved to B25, and is scheduled to halve
roughly every four years until roughly 2140 at which point
no new bitcoins will be created.
To enable this wind-down of currency creation, miners
do not only proﬁt from block rewards: they are also allowed
to claim the net difference in value between all input and
all output
transactions in this block. For users, a block
with greater input value than output value thus includes a
transaction fee paid to the miners.
To date, transaction fees have primarily been used to dis-
courage overuse of the network with many small transactions
(called penny ﬂooding) and have never provided more than
1–2% of mining revenue [87]. Fee values have primarily
been determined by defaults conﬁgured in the reference
client [87], with a small number of users opting to pay higher
fees to have their transactions published more quickly.
Mining pools. In practice, miners often collaborate in
mining pools [102] to lower the variance of their revenue
by sharing rewards with a group of other miners. Mining
pools are typically administered by a manager who, for a
small fee, collects mining rewards from valid blocks found
by all participating members and allocates the funds to
members in proportion to the amount of work they have
performed on behalf of the pool. Participating miners prove
(probabilistically) the amount of work they have performed
by sending shares which are “near-blocks” whose hash starts
with a large number of zeros (say d(cid:2) = 40) but are not
valid Bitcoin blocks. Pool members receive lower variance
in rewards due to risk sharing, in exchange for a small drop
in expected earnings to cover the manager’s fee.
Although pools were not described in the original protocol
and may have been unanticipated, since 2013 the majority
of mining power has been organized into pools. A number
of formulas have been used to divide revenue between pool
members in order to encourage loyalty and minimize “pool-
hopping” while still being friendly to new members [102].
There are also several standard protocols for low-latency
communication from pool operators to members [94] and
between the operators of different pools [32], [74]. While
the most popular pools are centrally administered, there are
also ad hoc pools using the p2pool protocol [122].
3) Peer-to-Peer Communication Network: The ﬁnal core
component of Bitcoin is its communication network. Essen-
11Sanity checks are in place to prevent manipulated timestamps from
dramatically altering the difﬁculty. Blocks with implausible timestamps will
be rejected by the network.
tially, it is a decentralized, ad hoc peer-to-peer broadcast
network used to announce new transactions and proposed
blocks. Generally, this is the least innovative of the three
components and few altcoins have made substantial changes.
Impact on consensus. The performance and stability
of the network has an important impact on the consensus
protocol for two reasons. First, any latency between the
discovery of a block and its receipt by all other nodes
increases the possibility of a temporary fork. Fear of frequent
forks motivated the choice of 10 minutes as the block cre-
ation time in the original design. Second, a malicious miner
who is able to control a substantial portion of the network
may attempt to favor the broadcast of their own blocks,
increasing the likelihood of their blocks “winning” a fork
and thus increasing their expected mining rewards. Similarly,
any party able to censor the network can selectively block
transmissions and freeze assets. Thus it is important for
Bitcoin to have a broadcast network which is decentralized
(ﬁtting with its overall design), low latency, and where it is
difﬁcult to censor or delay messages.
Network topology and discovery. Any node can join
the network by connecting to a random sample of other
nodes. By default, each node attempts to make 8 outgoing
connections and is prepared to receive up to 125 incoming
connections. Nodes behind a NAT, such as mobile clients,
are unable to receive incoming connections. Peers who join
the network initially need a way to ﬁnd out about other peers.
Like many other peer-to-peer networks, Bitcoin achieves
this through the use of dedicated directory servers or “seed
nodes,” the identities of whom are hard coded into the
reference client; thereafter, each node maintains a list of
peer addresses it knows about.
Peers also propagate information about each other through
two other mechanisms: ﬁrst, when a node establishes a new
outgoing connection, it triggers a cascade of relay messages
containing its connection information; second, upon receiv-
ing an incoming connection, a node asks its peer for a sample
from its list of known addresses. This mechanism establishes
a well-connected random network, with low degree yet low
diameter, suitable for rapid broadcast of information through
diffusion [38], [61].
Communication protocol. New blocks and pending
transactions are broadcast to the entire network by ﬂooding.
Nodes send INV messages to all of their peers containing the
hashes of new blocks or pending transactions whenever they
ﬁrst hear of them. Peers can respond by requesting the full
contents of these blocks or transactions if they have not yet
seen them (via a GETDATA message). By default nodes will
only forward new data once, preventing inﬁnite propagation;
only relay transactions and blocks that are valid; only relay
the ﬁrst block they hear of when two blocks are found in a
temporary fork; and will not broadcast pending transactions
which conﬂict (double-spend) with pending transactions
they have sent. These limits are performance optimizations
108108
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:10 UTC from IEEE Xplore.  Restrictions apply. 
designed to limit data on the network—a non-compliant
node may relay invalid or conﬂicting data, requiring all
nodes to independently validate all data they receive.
Relay policy. By default, Bitcoin nodes only relay trans-
actions and blocks which satisfy stricter validation rules than
what is permitted by the general transaction validity rules.
The goal is to prevent various denial of service attacks—an
application of the classic robustness principle “be conserva-
tive in what you send, be liberal in what you accept.” For
example, default nodes only relay transactions containing
scripts from a very narrow whitelist of standard transaction
types. The implication of this policy is that users of the
system wishing to have non-standard transactions included
in the blockchain cannot use the normal Bitcoin network, but
will need to contact an agreeable miner directly.12 Another
example is that default nodes refuse to relay more than a
few thousand transactions below B0.001 per minute as a
penny-ﬂooding defense.
III. STABILITY OF BITCOIN
Stability for Bitcoin has been deﬁned in many vague
and sometimes conﬂicting ways, but it is broadly taken to
mean that the system will continue to behave in a way that
facilitates a functional currency as it grows and participants
attempt novel attacks. We will consider notions of stability
for each component of Bitcoin in turn. It remains an open
question under which exact conditions Bitcoin is stable,
though stability results exist under strong assumptions.
A. Stability of transaction validity rules
It
is under-analyzed how participants in the Bitcoin
ecosystem achieve consensus about
transaction validity
rules. The baseline philosophy is that the rules were set