        /* This is a secret undocumented option! It is useful if you find
               an interesting test case during a normal fuzzing process, and want
               to mutate it without rediscovering any of the test cases already
               found during an earlier run.
               To use this mode, you need to point -B to the fuzz_bitmap produced
               by an earlier run for the exact same binary... and that's it.
               I only used this once or twice to get variants of a particular
               file, so I'm not making this an official setting. */
        if (in_bitmap) FATAL("Multiple -B options not supported");
        in_bitmap = optarg;
        read_bitmap(in_bitmap);
        break;
    }
  1. 首先检查`in_bitmap`是否已被设置，防止多次设置`-d`选项。
  2. 将选项参数赋值给`in_bitmap`。
  3. 调用`read_bitmap`。
#####  `-C`选项(崩溃探索模式开关)
基于覆盖率的`fuzz`中通常会生成一个崩溃分组的小数据集，可以手动或使用非常简单的`GDB`或`Valgrind`脚本进行快速分类。这使得每个崩溃都可以追溯到队列中的非崩溃测试父用例，从而更容易诊断故障。但是如果没有大量调试和代码分析工作，一些模糊测试崩溃可能很难快速评估其可利用性。为了协助完成此任务，`afl-fuzz`支持使用`-C`标志启用的非常独特的“崩溃探索”模式。在这种模式下，模糊器将一个或多个崩溃测试用例作为输入，并使用其反馈驱动的模糊测试策略非常快速地枚举程序中可以到达的所有代码路径，同时保持程序处于崩溃状态。此时，`fuzz`器运行过程中生成的不会导致崩溃的样本变异被拒绝，任何不影响执行路径的变异也会被拒绝。
    enum {
      /* 00 */ FAULT_NONE,
      /* 01 */ FAULT_TMOUT,
      /* 02 */ FAULT_CRASH,
      /* 03 */ FAULT_ERROR,
      /* 04 */ FAULT_NOINST,
      /* 05 */ FAULT_NOBITS
    };
    case 'C': /* crash mode */
    {
        if (crash_mode) FATAL("Multiple -C options not supported");
        crash_mode = FAULT_CRASH;
        break;
    }
  1. 首先检查`crash_mode`是否已被设置，防止多次设置`-C`选项。
  2. 将`02`赋值给`crash_mode`。
#####  `-n`选项(盲测试模式开关)
`fuzzing`通常由盲`fuzzing`(`blind fuzzing`)和导向性`fuzzing`(`guided
fuzzing`)两种。`blind fuzzing`生成测试数据的时候不考虑数据的质量，通过大量测试数据来概率性地触发漏洞。`guided
fuzzing`则关注测试数据的质量，期望生成更有效的测试数据来触发漏洞的概率。比如，通过测试覆盖率来衡量测试输入的质量，希望生成有更高测试覆盖率的数据，从而提升触发漏洞的概率。
    case 'n': /* dumb mode */
    {
        if (dumb_mode) FATAL("Multiple -n options not supported");
        if (getenv("AFL_DUMB_FORKSRV")) dumb_mode = 2; else dumb_mode = 1;
        break;
    }
  1. 首先检查`dumb_mode`是否已被设置，防止多次设置`-n`选项。
  2. 检查`"AFL_DUMB_FORKSRV"`这个环境变量是否已被设置，若已设置，将`dumb_mode`设置为`2`，否则，将`dumb_mode`设置为`1`。
#####  `-T`选项(指定`banner`内容)
指定运行时在实时结果界面所显示的`banner`。
    case 'T': /* banner */
    {
        if (use_banner) FATAL("Multiple -T options not supported");
        use_banner = optarg;
        break;
    }
  1. 首先检查`use_banner`是否已被设置，防止多次设置`-T`选项。
  2. 将选项参数写入`use_banner`。
#####  `-Q`选项(`QEMU`模式开关)
启动`QEMU`模式进行`fuzz`测试。
    /* Default memory limit when running in QEMU mode (MB): */
    #define MEM_LIMIT_QEMU      200
    case 'Q': /* QEMU mode */
    {
        if (qemu_mode) FATAL("Multiple -Q options not supported");
        qemu_mode = 1;
        if (!mem_limit_given) mem_limit = MEM_LIMIT_QEMU;
        break;
    }
  1. 首先检查`qemu_mode`是否已被设置，防止多次设置`-Q`选项，随后将`qemu_mode`变量置位。
  2. 若`mem_limit_given`标志位(此标志位通过`-m`选项设置)未被设置，将`mem_limit`变量设置为`200(MB)`。
#####  `-V`选项(版本选项)
展示`afl-fuzz`的版本信息。
    case 'V': /* Show version number */
    {
        /* Version number has been printed already, just quit. */
        exit(0);
    }
展示版本后直接退出程序。
##### 用法展示(`default`语句)
    default:
        usage(argv[0]);
调用`usage`函数打印`afl-fuzz`的用法。
####  必需参数检查
    if (optind == argc || !in_dir || !out_dir)
        usage(argv[0]);
如果目标输入目录`in_dir`为空、结果输出目录`out_dir`为空、当前处理的参数下标与`argc`相同，三项条件之一命中，调用`usage`函数打印`afl-fuzz`的用法。
> 关于`optind`变量，此变量指示当前处理的参数下标。例如，调用命令为`./a.out -a -b 2
> -c`，此时`argc`的值为`5`，当使用`getopt()`获取到`-c`之后，其下标为`5`。而因为`afl-fuzz`的调用规范是`./afl-> fuzz [ options ] -- /path/to/fuzzed_app [ ...
> ]`，当当前处理的参数下标与`argc`相同，意味着`/path/to/fuzzed_app`未给定，而这是必需的。
####  后续逻辑
**后续逻辑将进行大量的函数调用，由于篇幅限制，将在下一篇文章中给予说明。**
###  `ck_strdup`函数/`DFL_ck_strdup`函数
此函数实际上是一个宏定义：
    // alloc-inl.h line 349
    #define ck_strdup DFL_ck_strdup
因此其实际定义为
    /* Create a buffer with a copy of a string. Returns NULL for NULL inputs. */
    #define MAX_ALLOC 0x40000000
    #define ALLOC_CHECK_SIZE(_s) do { \
        if ((_s) > MAX_ALLOC) \
            ABORT("Bad alloc request: %u bytes", (_s)); \
    } while (0)
    #define ALLOC_CHECK_RESULT(_r, _s) do { \
        if (!(_r)) \
            ABORT("Out of memory: can't allocate %u bytes", (_s)); \
    } while (0)
    #define ALLOC_OFF_HEAD  8
    #define ALLOC_OFF_TOTAL (ALLOC_OFF_HEAD + 1)
    #define ALLOC_C1(_ptr)  (((u32*)(_ptr))[-2])
    #define ALLOC_S(_ptr)   (((u32*)(_ptr))[-1])
    #define ALLOC_C2(_ptr)  (((u8*)(_ptr))[ALLOC_S(_ptr)])
    #define ALLOC_MAGIC_C1  0xFF00FF00 /* Used head (dword)  */
    #define ALLOC_MAGIC_C2  0xF0       /* Used tail (byte)   */
    static inline u8* DFL_ck_strdup(u8* str) {
      void* ret;
      u32   size;
      if (!str) return NULL;
      size = strlen((char*)str) + 1;
      ALLOC_CHECK_SIZE(size);
      ret = malloc(size + ALLOC_OFF_TOTAL);
      ALLOC_CHECK_RESULT(ret, size);
      ret += ALLOC_OFF_HEAD;
      ALLOC_C1(ret) = ALLOC_MAGIC_C1;
      ALLOC_S(ret)  = size;
      ALLOC_C2(ret) = ALLOC_MAGIC_C2;
      return memcpy(ret, str, size);
    }
将宏定义合并后，可以得到以下代码
    /* Create a buffer with a copy of a string. Returns NULL for NULL inputs. */
    static inline u8* DFL_ck_strdup(u8* str) {
        void* ret;
        u32   size;
        if (!str) return NULL;
        size = strlen((char*)str) + 1;
        if (size > 0x40000000)
            ABORT("Bad alloc request: %u bytes", size);
        ret = malloc(size + 9);
        if (!ret)
            ABORT("Out of memory: can't allocate %u bytes", size);
        ret += 8;
        ((u32*)(ret))[-2] = 0xFF00FF00;
        ((u32*)(ret))[-1]  = size;
        ((u8*)(ret))[((u32*)(ret))[-1]] = 0xF0;
        return memcpy(ret, str, size);
    }
  1. 此处事实上定义了一种数据格式：
  2. 获取传入的字符串，检查其是否为空，若为空，返回`NULL`。
  3. 获取字符串长度并将其`+1`作为总的字符串长度，存入`size`中，随后检查其是否小于等于`0x40000000`，若不满足，终止程序并抛出异常。
  4. 分配`size + 9`大小的`chunk`(多出的大小是结构首部和尾部的空间)，若分配失败，终止程序并抛出异常。
  5. 将`chunk`指针移至`Body`的位置，并通过负偏移寻址的方式在`Header`部分写入`Magic Number`字段(大小为`0xFF00FF00`)以及大小字段。
  6. 将`size`作为偏移寻址写入最后的`0xF0`尾部标志位、
  7. 使用`memcpy`将字符串复制至`chunk`的`String`位置，返回。
###  `read_bitmap`函数
    /* Read bitmap from file. This is for the -B option again. */
    #define EXP_ST static
    #define ck_read(fd, buf, len, fn) do { \
        u32 _len = (len); \
        s32 _res = read(fd, buf, _len); \
        if (_res != _len) RPFATAL(_res, "Short read from %s", fn); \
      } while (0)
    #define MAP_SIZE (1 << MAP_SIZE_POW2)
    #define MAP_SIZE_POW2 16
    EXP_ST void read_bitmap(u8* fname) {
      s32 fd = open(fname, O_RDONLY);
      if (fd < 0) PFATAL("Unable to open '%s'", fname);
      ck_read(fd, virgin_bits, MAP_SIZE, fname);
      close(fd);
    }
将宏定义合并后，可以得到以下代码
    /* Read bitmap from file. This is for the -B option again. */
    static void read_bitmap(u8* fname) {
        s32 fd = open(fname, O_RDONLY);
        if (fd < 0) 
            PFATAL("Unable to open '%s'", fname);
        u32 _len = 1 << 16;
        s32 _res = read(fd, virgin_bits, _len);
        if (_res != _len) 
            RPFATAL(_res, "Short read from %s", fname);
        close(fd);
    }
  1. 以只读模式打开`bitmap`文件，若打开失败，抛出致命错误，程序中止。
  2. 从`bitmap`文件中读取`1<<16`个字节写入到`virgin_bits`变量中，如果成功读取的字符数小于`1<<16`个字节，抛出致命错误，程序中止。
  3. 关闭已打开的文件。
###  `usage`函数
    /* Display usage hints. */
    static void usage(u8* argv0) {
      SAYF("\n%s [ options ] -- /path/to/fuzzed_app [ ... ]\n\n"
           "Required parameters:\n\n"
           "  -i dir        - input directory with test cases\n"
           "  -o dir        - output directory for fuzzer findings\n\n"
           "Execution control settings:\n\n"
           "  -f file       - location read by the fuzzed program (stdin)\n"
           "  -t msec       - timeout for each run (auto-scaled, 50-%u ms)\n"
           "  -m megs       - memory limit for child process (%u MB)\n"
           "  -Q            - use binary-only instrumentation (QEMU mode)\n\n"     
           "Fuzzing behavior settings:\n\n"
           "  -d            - quick & dirty mode (skips deterministic steps)\n"
           "  -n            - fuzz without instrumentation (dumb mode)\n"
           "  -x dir        - optional fuzzer dictionary (see README)\n\n"
           "Other stuff:\n\n"
           "  -T text       - text banner to show on the screen\n"
           "  -M / -S id    - distributed mode (see parallel_fuzzing.txt)\n"
           "  -C            - crash exploration mode (the peruvian rabbit thing)\n"
           "  -V            - show version number and exit\n\n"
           "  -b cpu_id     - bind the fuzzing process to the specified CPU core\n\n"
           "For additional tips, please consult %s/README.\n\n",
           argv0, EXEC_TIMEOUT, MEM_LIMIT, doc_path);
      exit(1);
    }
打印`afl-fuzz`的用法，随后程序退出。
## 0x04 后记
虽然网上有很多关于`AFL`源码的分析，但是绝大多数文章都是抽取了部分代码进行分析的，本文则逐行对源码进行了分析，下一篇文章将针对`afl-fuzz`源码做后续分析。
## 0x05 参考资料
[【原】AFL源码分析笔记(一) – zoniony](https://xz.aliyun.com/t/4628#toc-10)