without the involvement of the “device owner", gaining unautho-
rized control on the plug (switching it on/off).
3.2 Weak Cross-DMC Management
As mentioned earlier, some manufacturer DMCs include the mecha-
nisms to assert some level of control over third-party DMCs’ opera-
tions on the same device; e.g., allowing the user in the manufacturer
app to open/close a third-party DMC, control its network provision
or user binding process. A real example is with the Abode alarm hub:
the user must use the Abode app to generate a HomeKit setup code,
before she can pair the Abode device with her Home app (through
HomeKit). Such cross-DMC management can be abstracted through
the intersection between the state-machines of these DMCs, in which
one DMC’s state transitions are contingent on the operations/state
transitions of another DMC. For devices with such intersecting state
machines, we check whether the two DMCs can coordinate their
security policies. In particular, we inspect their user policies: if a
user has no/lost permission on the DMC used by the owner, we
further look into whether he can control the dangling DMC.
Codema Flaw 3: Insufficient cross-DMC control on Run state.
August Lock [12] is among the most popular smart locks, which can
be managed by the August app (m-DMC) and HomeKit DMC. The
(iOS) August app allows its user to enable and disable the HomeKit
Figure 5: State machines of DMCs in the August lock
DMC (by simply toggling an ‘enable/disable’ switch), which by
default is disabled.
By inspecting the state machines of the DMCs, we found that
such protection is enabled since the August m-DMC imposes a
control switch on HomeKit DMC’s Run state, as illustrated in Fig-
ure 5. Specifically, we analyzed how the August app enables/disables
HomeKit on the lock, by reverse-engineering the app and examin-
ing the HomeKit documentations [19], which leads to the discovery
that the gap between Android and iOS platforms limits the capability
for August m-DMC to adequately manage HomeKit DMC. Specifically,
to impose control on the HomeKit DMC, the iOS August app needs
to generate a secret string, called additional authorization
data or AAD, and shares it with the Apple Home app on iOS devices
(through an iOS API updateAuthorizationData [35]). According
to the HomeKit specification [19], the HomeKit library integrated in
the device supports verification of the AAD for sensitive operations
(e.g., operating a lock), as designated by the device manufacturer:
that is, to operate on the August lock, the Home app (HomeKit
DMC) needs to present an AAD in its commands to the device. Since
the Home app and the iOS API are not available on Android and we
found no guideline from Apple on how HomeKit can be managed
on Android, the August Android app cannot work with HomeKit
(control it or monitor its status).
Such a limitation imposed by Apple introduces security risks
to the lock owner who utilizes the August Android app, since she
does not have full observation and control over her lock’s accessi-
bility status while an attacker running the August iOS app can have.
Specifically, when the owner temporarily allows a (malicious) user
to use her lock (e.g., a tenant, Airbnb guest, or employee) through
her August Android app, the user can abuse this temporary per-
mission and quietly enable the HomeKit DMC on the lock using
his iOS August app. The control acquired on the HomeKit DMC
lasts even after the owner fully revokes the user’s right (using the
Android app).
PoC attack. In our research, we implemented an end-to-end PoC
attack on our own August lock (3rd generation). Specifically, the
owner first set up her August Android app to control the device
and then temporarily invited a malicious user (e.g., a rental tenant)
to access her lock. Once given the access right, the user paired
his Apple Home app with the lock using the HomeKit setup code
on the lock, and then ran his August iOS app to enable HomeKit
(simply toggling the switch in the app to share the AAD to his Home
app). Once this happened, even after the owner later revoked the
malicious user’s access right through her August Android app (m-
DMC), the user was still able to control the lock with his Home app
(HomeKit DMC). The attack video is online [49].
Session 5A: Control System SecurityCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1294Discussion. Our further investigation shows that, even the AAD
mechanism of HomeKit is not designed for secure cross-DMC man-
agement against Codema. Based on HomeKit specification [19], it
is optional (by default disabled), and designed for finer granularity
of authorization: the device manufacturer can generate a set of
AADs (as security tokens), and configure the HAP library to restrict
specific commands from the HomeKit channel (e.g., open/close lock)
using particular AADs; the AADs are shared with the Home app
(using the aforementioned iOS API updateAuthorizationData) of
intended users, so users assigned different ADDs assume different
permissions in the HomeKit channel to command the device.
Codema Flaw 4: Insufficient cross-DMC control on user bind-
ing (WfB state). In the absence of a standard, suitable cross-DMC
management protocol, besides Flaw 3, mainstream manufacturers’
DMCs also attempt to control the third-party DMC’s user binding
process to better control the device, which however is error-prone.
As a prominent example, Abode Alarm Hub is a top-rated smart
home security system [6]. It acts as a Z-Wave/Zigbee hub and can
be connected with other Z-Wave/Zigbee compatible devices to
enhance their security and usability: e.g., the user can set a rule
through the hub to raise an alarm when the window sensor detects
a motion. The hub also supports HomeKit. By looking into the state
machines of the HomeKit DMC and Abode m-DMC, we found that
the m-DMC introduces a control to manage the HomeKit DMC’s
user binding process (Figure 6). Specifically, the owner has to first
set up the hub through the Abode app, then she can acquire a
HomeKit setup code from the app, using which a user can bind the
HomeKit DMC and control it. Note that, although it sacrifices some
convenience, such a control prevents the adversary in the home
Wi-Fi with physical access to the hub from configuring HomeKit,
since the adversary does not have the setup code.
However, the protection turns out to be inadequate for securing
the temporary permission: the adversary (e.g., an Airbnb/hotel
guest) invited by the owner can acquire the setup code from the
Abode app to stealthily configure the hub’s HomeKit, binding his
account to the device, without being observed by the owner; later
even after the owner revokes his rights from her Abode app, he can
still maintain control over the hub through HomeKit and can even
disarm the siren when he breaks into the victim’s home. Actually by
exploiting this vulnerability, the adversary can also gain access to
other home devices like home cameras and sensors [7], since they
can all be managed by the Abode hub. Further, similar to August
Lock, Abode only manages the HomeKit setup code in its iOS app.
So the owner running the Android app may have no idea at all that
the HomeKit channel can be activated using the iOS version of the
manufacturer app. Even the Abode iOS app, if used by the owner,
does not show whether the HomeKit DMC is bound by others.
PoC attack. We demonstrated that the risk is realistic by perform-
ing a PoC attack on our Abode Smart Security Kit. The adversary
was able to disable the security siren on the hub from Apple Home
app by setting it to “stand by” mode even after the owner revoked
his rights through the Abode app (m-DMC).
Codema Flaw 5: Insufficient cross-DMC control on network
provision (WfN state). Also, a manufacturer’s m-DMC in the
wild may impose inadequate control on any state of the third-party
Figure 6: State machines of DMCs in the Abode alarm hub
DMC, in the absence of a standard, suitable protocol for multiple-
DMC management. As an example, Philips Hue devices can be
managed by smart speakers’ local DMC (Section 2), as well as by
the Hue Bluetooth app (m-DMC) — both DMCs rely on BLE for
communication. By looking into their state machines (Figure 4),
we found that although the m-DMC imposes control on the smart
speaker DMC’s network provision process, the protection is only
effective when the m-DMC is first bound to the user, before the other
channel; otherwise, there is no protection for the smart-speaker
channel and the device becomes exposed to a practical Codema
attack through the m-DMC.
Specifically, if the device is paired with the Hue app (the m-
DMC through BLE) first, it will deny a new Bluetooth pairing
request. So, if the owner using the Bluetooth m-DMC wants to
control her device with a smart speaker, she needs to make the
device discoverable again for pairing with the speaker, through her
Hue app. However, such a cross-DMC control is conditional, based
upon the aforementioned assumption: it bestows a high privilege to
the m-DMC (through its app), yet still allows an alternative control
path without going through the m-DMC. Particularly, when the
owner first opts for the smart speaker to control the device, the
m-DMC of the device is left open and an unauthorized party in
the range of BLE (330 feet [14]) can use the manufacturer app to
silently pair with the device and gain control.
PoC attack. We performed a successful PoC attack using our own
Google Home Mini [18], Amazon Echo plus, and Philips Hue Blue-
tooth plug [32]. In our experiment, we first set up a speaker to
switch on/off the plug; then a “malicious user” ran the Philips Hue
Bluetooth app [28] to silently pair with the plug, and was thus able
to switch on/off the plug.
3.3 Measurement
To better understand the prevalence and impact of Codema prob-
lems in the wild, we searched devices on popular American and
Asian online stores (i.e., Amazon, Best Buy, Walmart, and Taobao)
using smart-home and IoT related keywords (e.g., “smart light bulb”,
“smart garage opener/controller”, “smart lock/camera/plug”) and
manually browsed 200 most popular devices sorted by customer
ratings or sale numbers. Through manually reading their prod-
uct descriptions online, we observed a total of four third-party
DMCs, i.e., HomeKit DMC, Zigbee/Z-Wave compatible DMC, and
smart-speaker Seamless DMC. We further identified the devices that
support multiple DMCs, from which we randomly selected and pur-
chased 14 highly rated and popular devices (Table 1) covering mul-
tiple device types including cameras, lights, locks, plugs, hubs, etc.
Session 5A: Control System SecurityCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1295We analyzed all the 14 devices with end-to-end exploit exper-
iments and confirmed that they were all vulnerable to Codema
attacks, potentially affecting at least millions of users (estimated
by the download numbers of their mobile apps on Google Play).
Table 1 shows the results including 25 successful exploits (each row
without “N/A” indicates a successful end-to-end exploit). Each de-
vice can have multiple Codema flaws and can be subject to multiple
exploits depending on which DMCs the victim/attacker uses. In
general, the DMCs if dangling, are exploitable by the adversary. We
observe that the DMCs on 11 of the 14 devices (except Abode, Au-
gust, and Yeelight) are completely disjointed (Flaw 1 and 2), which
demonstrates that the DMCs generally work independently without
coordination on most devices.
Table 1: Summary of Measurement Results
Victim’s
DMC
M
M
H
M
M and H
M and Z
M
H
M
H
M
H
M
H
M
H
M
H
M(BLE)
Z
S
M
H
M
H
Exploitable
DMC
H
H
N/A
H
Z
Z
H
H
N/A
H
M
H
N/A
H
M
H
N/A
H
M
Z
Z
M
H
M
H
N/A
M(BLE)
Yeelight
M and Yeelight
Flaw
Type
Flaw 4
Flaw 1
Flaw 3
Flaw 5
Flaw 5
Flaw 3
Flaw 1
Flaw 1
Flaw 1
Flaw 1
Flaw 1
Flaw 1
Flaw 1
Flaw 1
Flaw 4
Flaw 1