There are different ways to do this. You can either use negroni.Classic() 
or call negroni.New(). The first, negroni.Classic(), sets up default middleware, 
including a request logger, recovery middleware that will intercept and 
recover from panics, and middleware that will serve files from the public 
folder in the same directory. The negroni.New() function doesn’t create any 
default middleware. 
Each type of middleware is available in the negroni package. For example, 
you can use the recovery package by doing the following:
n.Use(negroni.NewRecovery())
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    85
Next, you add your router to the middleware stack by calling n.Use 
Handler(r) w. As you continue to plan and build out your middleware, consider 
the order of execution. For example, you’ll want your authentication-
checking middleware to run prior to the handler functions that require 
authentication. Any middleware mounted before the router will execute 
prior to your handler functions; any middleware mounted after the router 
will execute after your handler functions. Order matters. In this case, you 
haven’t defined any custom middleware, but you will soon.
Go ahead and build the server you created in Listing 4-4, and then 
execute it. Then issue web requests to the server at http://localhost:8000. You 
should see the negroni logging middleware print information to stdout, as 
shown next. The output shows the timestamp, response code, processing 
time, host, and HTTP method:
$ go build -s negroni_example
$ ./negroni_example
 [negroni] 2020-01-19T11:49:33-07:00 | 404 |      1.0002ms | localhost:8000 | GET
Having default middleware is great and all, but the real power comes 
when you create your own. With negroni, you can use a few methods to 
add middleware to the stack. Take a look at the following code. It creates 
trivial middleware that prints a message and passes execution to the next 
middleware in the chain:
type trivial struct {
}
func (t *trivial) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) { u
    fmt.Println("Executing trivial middleware")
    next(w, r) v
}
This implementation is slightly different from previous examples. 
Before, you were implementing the http.Handler interface, which expected 
a ServeHTTP() method that accepted two parameters: http.ResponseWriter and 
*http.Request. In this new example, instead of the http.Handler interface, 
you’re implementing the negroni.Handler interface. 
The slight difference is that the negroni.Handler interface expects you to 
implement a ServeHTTP() method that accepts not two, but three, parameters: 
http.ResponseWriter, *http.Request, and http.HandlerFunc u. The http.HandlerFunc 
parameter represents the next middleware function in the chain. For your 
purposes, you name it next. You do your processing within ServeHTTP(), and 
then call next() v, passing it the http.ResponseWriter and *http.Request values 
you originally received. This effectively transfers execution down the chain. 
But you still have to tell negroni to use your implementation as part of 
the middleware chain. You can do this by calling negroni’s Use method and 
passing an instance of your negroni.Handler implementation to it:
n.Use(&trivial{})
前沿信安资讯阵地  公众号：i nf osrc
86   Chapter 4
Writing your middleware by using this method is convenient because you 
can easily pass execution to the next middleware. There is one drawback: 
anything you write must use negroni. For example, if you were writing a mid-
dleware package that writes security headers to a response, you would want 
it to implement http.Handler, so you could use it in other application stacks, 
since most stacks won’t expect a negroni.Handler. The point is, regardless of 
your middleware’s purpose, compatibility issues may arise when trying to use 
negroni middleware in a non-negroni stack, and vice versa.
There are two other ways to tell negroni to use your middleware. UseHandler 
(handler http.Handler), which you’re already familiar with, is the first. The 
second way is to call UseHandleFunc(handlerFunc func(w http.ResponseWriter, 
r *http.Request)). The latter is not something you’ll want to use often, since 
it doesn’t let you forgo execution of the next middleware in the chain. For 
example, if you were writing middleware to perform authentication, you 
would want to return a 401 response and stop execution if any credentials or 
session information were invalid; with this method, there’s no way to do that.
Adding Authentication with Negroni
Before moving on, let’s modify our example from the previous section to dem-
onstrate the use of context, which can easily pass variables between functions. 
The example in Listing 4-5 uses negroni to add authentication middleware. 
package main
import (
    "context"
    "fmt"
    "net/http"
    "github.com/gorilla/mux"
    "github.com/urfave/negroni"
)
type badAuth struct { u
    Username string
    Password string
}
func (b *badAuth) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) { v
    username := r.URL.Query().Get("username") w
    password := r.URL.Query().Get("password")
    if username != b.Username || password != b.Password {
        http.Error(w, "Unauthorized", 401)
        return x
    }
    ctx := context.WithValue(r.Context(), "username", username) y
    r = r.WithContext(ctx) z
    next(w, r)
}
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    87
func hello(w http.ResponseWriter, r *http.Request) {
    username := r.Context().Value("username").(string) {
    fmt.Fprintf(w, "Hi %s\n", username)
}
func main() {
    r := mux.NewRouter()
    r.HandleFunc("/hello", hello).Methods("GET")
    n := negroni.Classic()
    n.Use(&badAuth{
        Username: "admin",
        Password: "password",
    })
    n.UseHandler(r)
    http.ListenAndServe(":8000", n)
}
Listing 4-5: Using context in handlers (/ch-4/negroni_example/main.go)
You’ve added new middleware, badAuth, that is going to simulate authen-
tication, purely for demonstration purposes u. This new type has two fields, 
Username and Password, and implements negroni.Handler, since it defines the 
three-parameter version of the ServeHTTP() method v we discussed previ-
ously. Inside the ServeHTTP() method, you first grab the username and pass-
word from the request w, and then compare them to the fields you have. If 
the username and password are incorrect, execution is stopped, and a 401 
response is written to the requester. 
Notice that you return x before calling next(). This prevents the 
remainder of the middleware chain from executing. If the credentials 
are correct, you go through a rather verbose routine of adding the user-
name to the request context. You first call context.WithValue() to initialize 
the context from the request, setting a variable named username on that 
context y. You then make sure the request uses your new context by call-
ing r.WithContext(ctx) z. If you plan on writing web applications with Go, 
you’ll want to become familiar with this pattern, as you’ll be using it a lot.
In the hello() function, you get the username from the request context 
by using the Context().Value(interface{}) function, which itself returns an 
interface{}. Because you know it’s a string, you can use a type assertion 
here {. If you can’t guarantee the type, or you can’t guarantee that the 
value will exist in the context, use a switch routine for conversion. 
Build and execute the code from Listing 4-5 and send a few requests 
to the server. Send some with both correct and incorrect credentials. You 
should see the following output:
$ curl -i http://localhost:8000/hello
HTTP/1.1 401 Unauthorized
Content-Type: text/plain; charset=utf-8
X-Content-Type-Options: nosniff
Date: Thu, 16 Jan 2020 20:41:20 GMT
Content-Length: 13
前沿信安资讯阵地  公众号：i nf osrc
88   Chapter 4
Unauthorized
$ curl -i 'http://localhost:8000/hello?username=admin&password=password'
HTTP/1.1 200 OK
Date: Thu, 16 Jan 2020 20:41:05 GMT
Content-Length: 9
Content-Type: text/plain; charset=utf-8
Hi admin
Making a request without credentials results in your middleware return-
ing a 401 Unauthorized error. Sending the same request with a valid set 
of credentials produces a super-secret greeting message accessible only to 
authenticated users.
That was an awful lot to digest. Up to this point, your handler functions 
have solely used fmt.FPrintf() to write your response to the http.Response 
Writer instance. In the next section, you’ll look at a more dynamic way of 
returning HTML by using Go’s templating package.
Using Templates to Produce HTML Responses
Templates allow you to dynamically generate content, including HTML, 
with variables from Go programs. Many languages have third-party pack-
ages that allow you to generate templates. Go has two templating packages, 
text/template and html/template. In this chapter, you’ll use the HTML pack-
age, because it provides the contextual encoding you need. 
One of the fantastic things about Go’s package is that it’s contextually 
aware: it will encode your variable differently depending on where the vari-
able is placed in the template. For example, if you were to supply a string as 
a URL to an href attribute, the string would be URL encoded, but the same 
string would be HTML encoded if it rendered within an HTML element.
To create and use templates, you first define your template, which 
contains a placeholder to denote the dynamic contextual data to render. 
Its syntax should look familiar to readers who have used Jinja with Python. 
When you render the template, you pass to it a variable that’ll be used as 
this context. The variable can be a complex structure with several fields, 
or it can be a primitive variable. 
Let’s work through a sample, shown in Listing 4-6, that creates a simple 
template and populates a placeholder with JavaScript. This is a contrived 
example that shows how to dynamically populate content returned to the 
browser.
package main
import (
    "html/template"
    "os"
)
u var x = `
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    89
    v Hello {{.}}
`
func main() {
    w t, err := template.New("hello").Parse(x)
    if err != nil {
        panic(err)
    }
    x t.Execute(os.Stdout, "")
}
Listing 4-6: HTML templating (/ch-4/template _example /main.go)
The first thing you do is create a variable, named x, to store your 
HTML template u. Here you’re using a string embedded in your code to 
define your template, but most of the time you’ll want to store your tem-
plates as separate files. Notice that the template is nothing more than a 
simple HTML page. Inside the template, you define placeholders by using 
the {{variable-name}} convention, where variable-name is the data element 
within your contextual data that you’ll want to render v. Recall that this 
can be a struct or another primitive. In this case, you’re using a single 
period, which tells the package that you want to render the entire context 
here. Since you’ll be working with a single string, this is fine, but if you 
had a larger and more complex data structure, such as a struct, you could 
get only the fields you want by calling past this period. For example, if you 
passed a struct with a Username field to the template, you could render the 
field by using {{.Username}}.
Next, in your main() function, you create a new template by calling 
template .New(string) w. Then you call Parse(string) to ensure that the tem-
plate is properly formatted and to parse it. Together, these two functions 
return a new pointer to a Template. 
While this example uses only a single template, it’s possible to embed 
templates in other templates. When using multiple templates, it’s impor-
tant that you name them in order to be able to call them. Finally, you call 
Execute(io.Writer, interface{}) x, which processes the template by using 
the variable passed as the second argument and writes it to the provided 
io.Writer. For demonstration purposes, you’ll use os.Stdout. The second 
variable you pass into the Execute() method is the context that’ll be used 
for rendering the template.
Running this produces HTML, and you should notice that the script 
tags and other nefarious characters that were provided as part of your con-
text are properly encoded. Neat-o!
$ go build -o template_example
$ ./template_example
    Hello &lt;script&gt;alert(&#39;world&#39;)&lt;/script&gt;
前沿信安资讯阵地  公众号：i nf osrc
90   Chapter 4
We could say a lot more about templates. You can use logical operators 
with them; you can use them with loops and other control structures. You can 
call built-in functions, and you can even define and expose arbitrary helper 
functions to greatly expand the templating capabilities. Double neat-o! We 
recommend you dive in and research these possibilities. They’re beyond the 
scope of this book, but are powerful.
How about you step away from the basics of creating servers and handling 
requests and instead focus on something more nefarious. Let’s create a 
credential harvester!
Credential Harvesting
One of the staples of social engineering is the credential-harvesting attack. 
This type of attack captures users’ login information to specific websites by 
getting them to enter their credentials in a cloned version of the original 
site. The attack is useful against organizations that expose a single-factor 
authentication interface to the internet. Once you have a user’s credentials, 
you can use them to access their account on the actual site. This often leads 
to an initial breach of the organization’s perimeter network.
Go provides a great platform for this type of attack, because it’s quick 
to stand up new servers, and because it makes it easy to configure routing 
and to parse user-supplied input. You could add many customizations and 
features to a credential-harvesting server, but for this example, let’s stick to 
the basics.
To begin, you need to clone a site that has a login form. There are a 
lot of possibilities here. In practice, you’d probably want to clone a site in 
use by the target. For this example, though, you’ll clone a Roundcube site. 
Roundcube is an open source webmail client that’s not used as often as com-
mercial software, such as Microsoft Exchange, but will allow us to illustrate 
the concepts just as well. You’ll use Docker to run Roundcube, because it 
makes the process easier.
You can start a Roundcube server of your own by executing the fol-
lowing. If you don’t want to run a Roundcube server, then no worries; the 
exercise source code has a clone of the site. Still, we’re including this for 
completeness:
$ docker run --rm -it -p 127.0.0.180:80 robbertkl/roundcube
The command starts a Roundcube Docker instance. If you navigate 
to http://127.0.0.1:80, you’ll be presented with a login form. Normally, 
you’d use wget to clone a site and all its requisite files, but Roundcube has 
JavaScript awesomeness that prevents this from working. Instead, you’ll use 
Google Chrome to save it. In the exercise folder, you should see a directory 
structure that looks like Listing 4-7.
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    91
$ tree
.
+-- main.go
+-- public
   +-- index.html
   +-- index_files
       +-- app.js
       +-- common.js
       +-- jquery-ui-1.10.4.custom.css
       +-- jquery-ui-1.10.4.custom.min.js
       +-- jquery.min.js
       +-- jstz.min.js
       +-- roundcube_logo.png
       +-- styles.css
       +-- ui.js
    index.html
Listing 4-7: Directory listing for /ch-4/credential _harvester/
The files in the public directory represent the unaltered cloned login 
site. You’ll need to modify the original login form to redirect the entered 
credentials, sending them to yourself instead of the legitimate server. To 
begin, open public/index.html and find the form element used to POST the 
login request. It should look something like the following:
You need to modify the action attribute of this tag and point it to your 
server. Change action to /login. Don’t forget to save it. The line should now 
look like the following:
To render the login form correctly and capture a username and 
password, you’ll first need to serve the files in the public directory. Then 
you’ll need to write a HandleFunc for /login to capture the username and 
password. You’ll also want to store the captured credentials in a file with 
some verbose logging.
You can handle all of this in just a few dozen lines of code. Listing 4-8 
shows the program in its entirety.
package main
import (
    "net/http"
    "os"
    "time"