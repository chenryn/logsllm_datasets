3. Choose "Window" -> "Devices and Simulators".
4. Click on your connected iOS device in the left section of the Devices window.
5. Reproduce the problem.
6. Click on the "Open Console" button located in the upper right-hand area of the Devices window to view the
console logs on a separate window.
367
Setting up a Testing Environment for iOS Apps
To save the console output to a text file, go to the top right side of the Console window and click on the "Save" button.
You can also connect to the device shell as explained in "Accessing the Device Shell", install socat via apt-get and run
the following command:
iPhone:~ root# socat - UNIX-CONNECT:/var/run/lockdown/syslog.sock
========================
ASL is here to serve you
> watch
OK
Jun 7 13:42:14 iPhone chmod[9705] : MS:Notice: Injecting: (null) [chmod] (1556.00)
Jun 7 13:42:14 iPhone readlink[9706] : MS:Notice: Injecting: (null) [readlink] (1556.00)
Jun 7 13:42:14 iPhone rm[9707] : MS:Notice: Injecting: (null) [rm] (1556.00)
Jun 7 13:42:14 iPhone touch[9708] : MS:Notice: Injecting: (null) [touch] (1556.00)
...
Additionally, Passionfruit offers a view of all the NSLog-based application logs. Simply click on the "Console" ->
"Output" tab:
368
Setting up a Testing Environment for iOS Apps
Needle also has an option to capture the logs of an iOS application, you can start the monitoring by opening Needle
and running the following commands:
[needle] > use dynamic/monitor/syslog
[needle][syslog] > run
Dumping KeyChain Data
Dumping the KeyChain data can be done with multiple tools, but not all of them will work on any iOS version. As is
more often the case, try the different tools or look up their documentation for information on the latest supported
versions.
Objection (Jailbroken / non-Jailbroken)
The KeyChain data can easily be viewed using Objection. First, connect objection to the app as described in
"Recommended Tools - Objection". Then, use the ios keychain dump command to get an overview of the keychain:
$ objection --gadget="iGoat-Swift" explore
... [usb] # ios keychain dump
...
Note: You may be asked to authenticate using the devices passcode or TouchID
Save the output by adding `--json keychain.json` to this command
Dumping the iOS keychain...
Created Accessible ACL Type Account Service
Data
------------------------- ------------------------------ ----- -------- ------------------- --------------
------------ ----------------------------------------------------------------------
2019-06-06 10:53:09 +0000 WhenUnlocked None Password keychainValue com.highaltitu
dehacks.dvia mypassword123
2019-06-06 10:53:30 +0000 WhenUnlockedThisDeviceOnly None Password SCAPILazyVector com.toyopagrou
p.picaboo (failed to decode)
2019-06-06 10:53:30 +0000 AfterFirstUnlockThisDeviceOnly None Password fideliusDeviceGraph com.toyopagrou
p.picaboo (failed to decode)
2019-06-06 10:53:30 +0000 AfterFirstUnlockThisDeviceOnly None Password SCDeviceTokenKey2 com.toyopagrou
p.picaboo 00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh
2019-06-06 10:53:30 +0000 AfterFirstUnlockThisDeviceOnly None Password SCDeviceTokenValue2 com.toyopagrou
p.picaboo CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=
OWASP.iGoat-Swift on (iPhone: 12.0) [usb] # quit
369
Setting up a Testing Environment for iOS Apps
Note that currently, the latest versions of frida-server and objection do not correctly decode all keychain data. Different
combinations can be tried to increase compatibility. For example, the previous printout was created with frida-
tools==1.3.0 , frida==12.4.8 and objection==1.5.0 .
Finally, since the keychain dumper is executed from within the application context, it will only print out keychain items
that can be accessed by the application and not the entire keychain of the iOS device.
Needle (Jailbroken)
Needle can list the content of the keychain through the storage/data/keychain_dump_frida module. However, getting
Needle up and running can be difficult. First, make sure that open , and the darwin cc tools are installed. The
installation procedure for these tools is described in "Recommended Tools - iOS Device".
Before dumping the keychain, open Needle and use the device/dependency_installer plugin to install any other
missing dependencies. This module should return without any errors. If an error did pop up, be sure to fix this error
before continuing.
Finally, select the storage/data/keychain_dump_frida module and run it:
[needle][keychain_dump_frida] > use storage/data/keychain_dump_frida
[needle][keychain_dump_frida] > run
[*] Checking connection with device...
[+] Already connected to: 192.168.43.91
[+] Target app: OWASP.iGoat-Swift
[*] Retrieving app's metadata...
[*] Pulling: /private/var/containers/Bundle/Application/92E7C59C-2F0B-47C5-94B7-DCF506DBEB34/iGoat-Swift.app/In
fo.plist -> /Users/razr/.needle/tmp/plist
[*] Setting up local port forwarding to enable communications with the Frida server...
[*] Launching the app...
[*] Attaching to process: 4448
[*] Parsing payload
[*] Keychain Items:
[+] {
"AccessControls": "",
"Account": "keychainValue",
"CreationTime": "2019-06-06 10:53:09 +0000",
"Data": " (UTF8 String: 'mypassword123')",
"EntitlementGroup": "C9MEM643RA.org.dummy.fastlane.FastlaneTest",
"ModifiedTime": "2019-06-06 16:53:38 +0000",
"Protection": "kSecAttrAccessibleWhenUnlocked",
"Service": "com.highaltitudehacks.dvia",
"kSecClass": "kSecClassGenericPassword"
}
...
[+] {
"AccessControls": "",
"Account": "",
"CreationTime": "2019-06-06 10:53:30 +0000",
"Data": " (UTF8 String: 'CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=')",
"EntitlementGroup": "C9MEM643RA.org.dummy.fastlane.FastlaneTest",
"ModifiedTime": "2019-06-06 10:53:30 +0000",
"Protection": "kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly",
"Service": "com.toyopagroup.picaboo",
"kSecClass": "kSecClassGenericPassword"
}
[*] Saving output to file: /Users/razr/.needle/output/frida_script_dump_keychain.txt
Note that currently only the keychain_dump_frida module works on iOS 12, but not the keychain_dump module.
Passionfruit (Jailbroken / non-Jailbroken)
With Passionfruit it's possible to access the keychain data of the app you have selected. Click on "Storage" and
"Keychain" and you can see a listing of the stored Keychain information.
370
Setting up a Testing Environment for iOS Apps
Keychain-dumper (Jailbroken)
Keychain-dumper lets you dump a jailbroken device's KeyChain contents. The easiest way to get the tool is to
download the binary from its GitHub repo:
$ git clone https://github.com/ptoomey3/Keychain-Dumper
$ scp -P 2222 Keychain-Dumper/keychain_dumper root@localhost:/tmp/
$ ssh -p 2222 root@localhost
iPhone:~ root# chmod +x /tmp/keychain_dumper
iPhone:~ root# /tmp/keychain_dumper
(...)
Generic Password
----------------
Service: myApp
Account: key3
Entitlement Group: RUD9L355Y.sg.vantagepoint.example
Label: (null)
Generic Field: (null)
Keychain Data: SmJSWxEs
Generic Password
----------------
Service: myApp
Account: key7
Entitlement Group: RUD9L355Y.sg.vantagepoint.example
Label: (null)
Generic Field: (null)
Keychain Data: WOg1DfuH
In newer versions of iOS (iOS 11 and up), additional steps are necessary. See the README.md for more details.
Note that this binary is signed with a self-signed certificate that has a "wildcard" entitlement. The entitlement grants
access to all items in the Keychain. If you are paranoid or have very sensitive private data on your test device, you
may want to build the tool from source and manually sign the appropriate entitlements into your build; instructions for
doing this are available in the GitHub repository.
Setting Up a Network Testing Environment
Basic Network Monitoring/Sniffing
You can remotely sniff all traffic in real-time on iOS by creating a Remote Virtual Interface for your iOS device. First
make sure you have Wireshark installed on your macOS machine.
1. Connect your iOS device to your macOS machine via USB.
2. You would need to know the UDID of your iOS device, before you can start sniffing. Check the section "Getting
the UDID of an iOS device" on how to retrieve it. Open the Terminal on macOS and enter the following command,
filling in the UDID of your iOS device.
$ rvictl -s 
Starting device  [SUCCEEDED] with interface rvi0
1. Launch Wireshark and select "rvi0" as the capture interface.
371
Setting up a Testing Environment for iOS Apps
2. Filter the traffic with Capture Filters in Wireshark to display what you want to monitor (for example, all HTTP traffic
sent/received via the IP address 192.168.1.1).
ip.addr == 192.168.1.1 && http
The documentation of Wireshark offers many examples for Capture Filters that should help you to filter the traffic to
get the information you want.
Setting up an Interception Proxy
Burp Suite is an integrated platform for security testing mobile and web applications. Its tools work together
seamlessly to support the entire testing process, from initial mapping and analysis of attack surfaces to finding and
exploiting security vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a
man-in-the-middle between the browser and web server(s). Burp Suite allows you to intercept, inspect, and modify
incoming and outgoing raw HTTP traffic.
Setting up Burp to proxy your traffic is pretty straightforward. We assume that you have an iOS device and workstation
connected to a Wi-Fi network that permits client-to-client traffic. If client-to-client traffic is not permitted, you can use
usbmuxd to connect to Burp via USB.
PortSwigger provides a good tutorial on setting up an iOS device to work with Burp and a tutorial on installing Burp's
CA certificate to an iOS device.
Using Burp via USB on a Jailbroken Device
In the section "Accessing the Device Shell" we've already learned how we can use iproxy to use SSH via USB. When
doing dynamic analysis, it's interesting to use the SSH connection to route our traffic to Burp that is running on our
computer. Let's get started:
First we need to use iproxy to make SSH from iOS available on localhost.
$ iproxy 2222 22
waiting for connection
The next step is to make a remote port forwarding of port 8080 on the iOS device to the localhost interface on our
computer to port 8080.
ssh -R 8080:localhost:8080 root@localhost -p 2222
You should now be able to reach Burp on your iOS device. Open Safari on iOS and go to 127.0.0.1:8080 and you
should see the Burp Suite Page. This would also be a good time to install the CA certificate of Burp on your iOS
device.
The last step would be to set the proxy globally on your iOS device:
1. Go to Settings
2. Wi-Fi
372
Setting up a Testing Environment for iOS Apps
3. Connect to any Wi-Fi (you can literally connect to any Wi-Fi as the traffic for port 80 and 443 will be routed
through USB, as we are just using the Proxy Setting for the Wi-Fi so we can set a global Proxy)
4. Once connected click on the small blue icon on the right side of the connect Wi-Fi
5. Configure your Proxy by selecting Manual
6. Type in 127.0.0.1 as Server
7. Type in 8080 as Port
Open Safari and go to any webpage, you should see now the traffic in Burp. Thanks @hweisheimer for the initial idea!
Certificate Pinning
Some applications will implement SSL Pinning, which prevents the application from accepting your intercepting
certificate as a valid certificate. This means that you will not be able to monitor the traffic between the application and
the server.
For information on disabling SSL Pinning both statically and dynamically, refer to "Bypassing SSL Pinning" in the
"Testing Network Communication" chapter.
References
Jailbreak Exploits - https://www.theiphonewiki.com/wiki/Jailbreak_Exploits
limera1n exploit - https://www.theiphonewiki.com/wiki/Limera1n
IPSW Downloads website - https://ipsw.me
Can I Jailbreak? - https://canijailbreak.com/
The iPhone Wiki - https://www.theiphonewiki.com/
Redmond Pie - https://www.redmondpie.com/
Reddit Jailbreak - https://www.reddit.com/r/jailbreak/
Information Property List -
https://developer.apple.com/documentation/bundleresources/information_property_list?language=objc
UIDeviceFamily -
https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/iPh
oneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW11
Tools
Apple iOS SDK - https://developer.apple.com/download/more/
AppSync - http://repo.hackyouriphone.org/appsyncunified
Burp Suite - https://portswigger.net/burp/communitydownload
Chimera - https://chimera.sh/
Class-dump - https://github.com/interference-security/ios-pentest-tools/blob/master/class-dump
Class-dump-z - https://github.com/interference-security/ios-pentest-tools/blob/master/class-dump-z
Clutch - https://github.com/KJCracks/Clutch
Cydia Impactor - http://www.cydiaimpactor.com/
Frida - https://www.frida.re
Frida-ios-dump - https://github.com/AloneMonkey/frida-ios-dump
IDB - https://www.idbtool.com
iFunBox - http://www.i-funbox.com/
Introspy - https://github.com/iSECPartners/Introspy-iOS
ios-deploy - https://github.com/ios-control/ios-deploy
IPA Installer Console - https://cydia.saurik.com/package/com.autopear.installipa
ipainstaller - https://github.com/autopear/ipainstaller
iProxy - https://iphonedevwiki.net/index.php/SSH_Over_USB
373
Setting up a Testing Environment for iOS Apps
ITMS services asset downloader - https://www.npmjs.com/package/itms-services
Keychain-dumper - https://github.com/ptoomey3/Keychain-Dumper/
libimobiledevice - https://www.libimobiledevice.org/
MobSF - https://github.com/MobSF/Mobile-Security-Framework-MobSF
Needle - https://github.com/mwrlabs/needle
Objection - https://github.com/sensepost/objection
Passionfruit - https://github.com/chaitin/passionfruit/
Radare2 - https://github.com/radare/radare2
Sileo - https://cydia-app.com/sileo/
SSL Kill Switch 2 - https://github.com/nabla-c0d3/ssl-kill-switch2
TablePlus - https://tableplus.io/
Usbmuxd - https://github.com/libimobiledevice/usbmuxd
Wireshark - https://www.wireshark.org/download.html
Xcode - https://developer.apple.com/xcode/
374
Data Storage on iOS
Data Storage on iOS
The protection of sensitive data, such as authentication tokens and private information, is key for mobile security. In
this chapter, you'll learn about the iOS APIs for local data storage, and best practices for using them.
Testing Local Data Storage (MSTG-STORAGE-1 and MSTG-STORAGE-2)
As little sensitive data as possible should be saved in permanent local storage. However, in most practical scenarios,
at least some user data must be stored. Fortunately, iOS offers secure storage APIs, which allow developers to use
the cryptographic hardware available on every iOS device. If these APIs are used correctly, sensitive data and files
can be secured via hardware-backed 256-bit AES encryption.
Data Protection API
App developers can leverage the iOS Data Protection APIs to implement fine-grained access control for user data
stored in flash memory. The APIs are built on top of the Secure Enclave Processor (SEP), which was introduced with
the iPhone 5S. The SEP is a coprocessor that provides cryptographic operations for data protection and key
management. A device-specific hardware key-the device UID (Unique ID)-is embedded in the secure enclave,
ensuring the integrity of data protection even when the operating system kernel is compromised.
The data protection architecture is based on a hierarchy of keys. The UID and the user passcode key (which is
derived from the user's passphrase via the PBKDF2 algorithm) sit at the top of this hierarchy. Together, they can be
used to "unlock" so-called class keys, which are associated with different device states (e.g., device locked/unlocked).
Every file stored on the iOS file system is encrypted with its own per-file key, which is contained in the file metadata.
The metadata is encrypted with the file system key and wrapped with the class key corresponding to the protection
class the app selected when creating the file.
The following illustration shows the iOS Data Protection Key Hierarchy.
Files can be assigned to one of four different protection classes, which are explained in more detail in the iOS Security
Guide:
Complete Protection (NSFileProtectionComplete): A key derived from the user passcode and the device UID
protects this class key. The derived key is wiped from memory shortly after the device is locked, making the data
inaccessible until the user unlocks the device.
Protected Unless Open (NSFileProtectionCompleteUnlessOpen): This protection class is similar to Complete
Protection, but, if the file is opened when unlocked, the app can continue to access the file even if the user locks
the device. This protection class is used when, for example, a mail attachment is downloading in the background.
375
Data Storage on iOS
Protected Until First User Authentication (NSFileProtectionCompleteUntilFirstUserAuthentication): The