⇐⇒
z + x + y + cin = 0 mod 2
cout + x · y + z · cin + cin = 0 mod 2.
(cid:40)
(cid:40)
19
Therefore, the addition with carries of (xL−1, . . . , x0)2 and (yL−1, . . . , y0)2 results
in (zL, zL−1, . . . , z0)2 if and only if the following equations hold:
z0 + x0 + y0 = 0 mod 2;
c1 + x0 · y0 = 0 mod 2;
z1 + x1 + y1 + c1 = 0 mod 2;
c2 + x1 · y1 + z1 · c1 + c1 = 0 mod 2;
...
zL−1 + xL−1 + yL−1 + cL−1 = 0 mod 2;
zL + xL−1 · yL−1 + zL−1 · cL−1 + cL−1 = 0 mod 2.
(12)
Here, for each i ∈ {1, . . . , L − 1}, ci denotes the carry-out bit at the i-th step
which is also the carry-in bit at the (i + 1)-th step. (The last carry-out bit is zL.)
Now, observe that, together with equation (11), the 2L equations in (12) lead
us to an instance of the protocol of Section 3. It indeed ﬁts the pattern if we
let N := 4L, m1 := 3L + 1, m2 := 3m and denote the ordered tuple of N + m2
secret bits(cid:0)x0, . . . , xL−1, y0, . . . , yL−1, z0, . . . , zL, c1, . . . , cL−1, r1,1, . . . , r3,m
(cid:1) by
(cid:0)s1, . . . , sN +m2
(cid:1). Then, note that the ﬁrst m1 bits s1, . . . , sm1 and the last m2
bits sN +1, . . . , sN +m2 satisfy the linear equation modulo q from (11), while the
ﬁrst N bits s1, . . . , sN satisfy the equations modulo 2 in (12), which contain N
linear terms and a total of |T| := 2L − 1 quadratic terms, i.e.:
x0 · y0, x1 · y1, z1 · c1,
. . . , xL−1 · yL−1, zL−1 · cL−1.
As a result, our ZK argument system can be obtained from the protocol
constructed in Section 3. The protocol is a statistical ZKAoK assuming the
security of two variants of the KTX commitment scheme: the variant used to
L·n), and the
commitment COM used in the interaction between two parties - which relies on
commit to X, Y , Z - which relies on the hardness of SIVP(cid:101)O(
the hardness of SIVP(cid:101)O(n). By Theorem 1, each execution of the protocol has
√
perfect completeness, soundness error 2/3 and communication cost
O(n log n) + 3m + 2(3L + 1 + 3m)(cid:100)log2 q(cid:101) + 20L
bits, where O(n log n) is the total bit-size of 3 KTX commitments (sent by the
prover in the ﬁrst move) and 2 commitment randomness. Here, it is important
to note that the cost of proving knowledge of valid openings for cx, cy, cz is
O(n log n) + 3m + 2(3L + 1 + 3m)(cid:100)log2 q(cid:101) bits. Thus, the actual cost for proving
the addition relation is 20L bits.
We further remark that the protocol can easily be adapted to less challenging
situations such as: (i) The bit-size of the sum Z is public known to be exactly L
(instead of L + 1); (ii) Not all elements X, Y, Z need to be hidden and committed.
Indeed, in those scenarios, our strategy of expressing the considered relations as
equations modulo q and modulo 2 easily goes through. Moreover, it even simpliﬁes
the resulting protocols and reduces their complexity because the number of secret
bits to deal with is smaller than in the above protocol.
20
L−1(cid:88)
m(cid:88)
5 Logarithmic-Size Arguments for Range Membership
and Set Non-Membership
We present two applications of our zero-knowledge protocol for integer additions
from Section 4: range membership and set non-membership arguments.
5.1 Range Membership Arguments
Let L = poly(n), q = (cid:101)O(
Our range arguments build on the integer addition protocol of Section 4. We
consider the problem of proving in ZK that a committed integer X satisﬁes
X ∈ [α, β], i.e., α ≤ X ≤ β, for publicly known integers α, β.
L · n) and m = n((cid:100)log2 q(cid:101) + 3). Suppose that L-bit
integer X = (xL−1, . . . , x0)2 is committed via the KTX commitment scheme,
using a public commitment key a0, . . . , aL−1, b1, . . . , bm ∈ Zn
q and randomness
r1, . . . , rm ∈ {0, 1}. Namely, the commitment c ∈ Zn
q is computed as
√
ai · xi +
bj · rj = c mod q.
(13)
i=0
j=1
Our goal is to prove in ZK that X ∈ [α, β], for publicly given L-bit integers
α = (αL−1, . . . , α0)2 and β = (βL−1, . . . , β0)2.
The main idea. We observe that X satisﬁes α ≤ X ≤ β if and only if there
exist non-negative L-bit integers Y, Z such that
α + Y = X and X + Z = β.
(14)
We thus reduce the task of proving X ∈ [α, β[ to proving two addition relations
among integers, which can be achieved using the techniques of Section 4. To this
end, it suﬃces to demonstrate that the relations among the secret bits of X, Y, Z
and public bits of α, β can be expressed as equations modulo 2 of the form (6).
The underlying equations modulo 2. Let the bits of integers Y, Z be
(yL−1, . . . , y0)2 and (zL−1, . . . , z0)2, respectively. The addition α + Y = X over Z,
when viewed as a binary addition with carries, can be expressed as the following
2L equations modulo 2 which contain L−1 quadratic terms x1·c1, . . . , xL−1·cL−1.
x0 + y0 = α0 mod 2;
c1 + α0 · y0 = 0 mod 2;
x1 + y1 + c1 = α1 mod 2;
c2 + α1 · y1 + x1 · c1 + c1 = 0 mod 2;
...
// First carry-bit
// Second carry-bit
(15)
cL−1 + αL−2 · yL−2 + xL−2 · cL−2 + cL−2 = 0 mod 2;
xL−1 + yL−1 + cL−1 = αL−1 mod 2;
αL−1 · yL−1 + xL−1 · cL−1 + cL−1 = 0 mod 2.
// Last carry-bit is 0.
21
x0 + z0 = β0 mod 2;
e1 + x0 · z0 = 0 mod 2;
x1 + z1 + e1 = β1 mod 2;
e2 + x1 · z1 + β1 · e1 + e1 = 0 mod 2;
...
// First carry-bit
// Second carry-bit
(16)
The relation X + Z = β is handled similarly. We obtain the following 2L
equations modulo 2, which contain L quadratic terms x0·z0, x1·z1, . . . , xL−1·zL−1.
eL−1 + xL−2 · zL−2 + βL−2 · eL−2 + eL−2 = 0 mod 2;
xL−1 + zL−1 + eL−1 = βL−1 mod 2;
xL−1 · zL−1 + βL−1 · eL−1 + eL−1 = 0 mod 2.
// Last carry-bit is 0.
Combining (15) and (16), we obtain a system of 4L equations modulo 2,
which contain N := 5L − 2 linear terms
x0, . . . , xL−1, y0, . . . , yL−1, z0, . . . , zL−1, c1, . . . , cL−1, e1, . . . , eL−1,
and a total of |T| = 2L − 1 quadratic terms
x1 · c1, . . . , xL−1 · cL−1, x0 · z0, x1 · z1, . . . , xL−1 · zL−1.
Putting it altogether. Based on the above transformations, we have translated
the task of proving that committed integer X satisﬁes X ∈ [α, β] to proving
knowledge of N + m2 = 5L − 2 + m secret bits
x0, . . . , xL−1, y0, . . . , yL−1, z0, . . . , zL−1, c1, . . . , cL−1, e1, . . . , eL−1, r1, . . . , rm,(17)
where the ﬁrst m1 = L bits and the last m2 = m bits satisfy equation (13)
modulo q, while the ﬁrst N = 5L − 2 bits satisfy a system of equations modulo
2 containing N linear terms and |T| = 2L − 1 quadratic terms. In other words,
we have reduced the considered statement to an instance of the general protocol
of Section 3.2. By running the latter with the witness described in (17), we
obtain a statistical ZKAoK hardness of based on the hardness of SIVPγ with
L · n). Each execution of the protocol has perfect completeness,
factor γ ≤ (cid:101)O(
√
soundness error 2/3 and communication cost
O(n log n) + m + 2(L + m)(cid:100)log2 q(cid:101) + 23L
bits, where O(n log n) is the total bit-size of 3 KTX commitments (sent by the
prover in the ﬁrst move) and 2 commitment randomness. Here, the cost of proving
knowledge of a valid opening for c is O(n log n) + m + 2(L + m)(cid:100)log2 q(cid:101) bits. The
actual cost for proving the range membership thus amounts to 23L bits.
Variants. Our techniques can be easily adapted to handle other variants of
range membership arguments. To prove a strict inequality, e.g., X < β for a
given β, we can simply prove that X ≤ β − 1 using the above approach. In the
22
case of hidden ranges, e.g., when we need prove that Y < X < Z where X, Y, Z
are all committed, then we proceed by proving the existence of non-negative
L-bit integers Y1, Z1 such that Y + Y1 + 1 = X and X + Z1 + 1 = Z. This can
be done by executing two instances of the protocol for addition relation among
committed integers from Section 4.
5.2 Set Non-Membership Arguments
For security parameter n, choose q = (cid:101)O(n), k = n(cid:100)log2 q(cid:101) and m = 2k.
In this section, we construct a protocol allowing to prove that a committed
element is not in a public set Set. The goal is to do this without relying on a
trusted third party to approve the description of Set by signing its elements or
any other means. To this end, we combine our protocols for integer addition
and inequalities with arguments of knowledge of a path in a Merkle tree [45].
While Merkle trees were introduced for proving set membership, we (somewhat
counter-intuitively) use them for dual purposes.
Sample uniformly random matrices A, B0, B1 ∈ Zn×k
, and denote their columns
as a0, . . . , ak−1, b0,0, . . . , b0,k−1, b1,0, . . . , b1,k−1 ∈ Zn
q . These vectors will serve
as public key for the KTX commitment scheme with k-bit committed values,
while matrix B = [B0 | B1] ∈ Zn×2k
will also serve as the public key for the
Merkle tree from [44]. Let G ∈ Zn×k
be the “powers-of-2” matrix of Section 2.1.
q be a KTX
q
Let X = (xk−1, . . . , x0)2 be a k-bit integer, and let c ∈ Zn
commitment to X, i.e., we have the following equation modulo q:
q
ai · xi +
bi,j · ri,j = c mod q,
(18)
q
(cid:88)
(i,j)∈{0,1}×k
k−1(cid:88)
i=0
where bits r0,1, . . . , r1,k ∈ {0, 1} are the commitment randomness.
Let Set = {S1, . . . , SM} be a public set containing M = poly(n) integers of
bit-size k, where S1 < S2 < . . . < SM . We wish to prove in ZK that an integer
X, which has been committed to via c ∈ Zn
q , does not belong to Set. We aim at
communication complexity O(log M ), so that the protocol scales well for large
sets. To this end, we will use the lattice-based Merkle hash tree from [45].
Without loss of generality, assuming that M = 2(cid:96) − 2 for some positive inte-
ger (cid:96).6 For each i = 0, . . . , M , let si ∈ {0, 1}k be the binary-vector representation
of Si. Let s0 = (0, . . . , 0) and sM +1 = (1, . . . , 1) be the all-zero and all-one
vectors of length k, which represent 0 and 2k − 1, the smallest and the largest
non-negative integers of bit-size k, respectively. Using the SIS-based hash function
hB (see Section 2.1), we build a Merkle tree of depth (cid:96) on top of 2(cid:96) vectors
s0, s1, . . . , sM , sM +1 and obtain the root u ∈ {0, 1}k. For each i ∈ [0, M + 1], the
tree path from leaf si to root u is determined by the (cid:96) bits representing integer i.
We prove knowledge of two consecutive paths from leaves y ∈ {0, 1}k and
z ∈ {0, 1}k to the public root u such that the k-bit integers Y and Z corresponding
6 If M does not have this form, one can duplicate S1 suﬃciently many times until the
cardinality of the set has this property. Our protocol remains the same in this case.
23
to y and z satisfy Y < X < Z, where X is the integer committed in c.
Let v(cid:96)−1, . . . , v0 and w(cid:96)−1, . . . , w0 be the bits determining the paths from the
leaves y and z, respectively, to root u. Then, by “consecutive”, we mean that the
(cid:96)-bit integers V = (v(cid:96)−1, . . . , v0)2 and W = (w(cid:96)−1, . . . , w0)2 satisfy V + 1 = W .
We remark that the truth of the statement – which is ensured by the soundness
of the argument – implies that the integer committed in c does not belong to
Set, assuming the collision-resistance of the Merkle hash tree and the security of
the commitment scheme. This is because: (i) The existence of the two tree paths
guarantees that y, z ∈ Set; (ii) The fact that they are consecutive further ensures
that (y, z) = (si, si+1), for some i ∈ [0, M ]; (iii) The inequalities Y < X < Z