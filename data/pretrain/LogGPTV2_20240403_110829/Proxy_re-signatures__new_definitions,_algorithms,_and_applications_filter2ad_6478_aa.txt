title:Proxy re-signatures: new definitions, algorithms, and applications
author:Giuseppe Ateniese and
Susan Hohenberger
Proxy Re-Signatures: New Deﬁnitions, Algorithms, and
Applications
Giuseppe Ateniese
The Johns Hopkins University
PI:EMAIL
Susan Hohenberger
Massachusetts Institute of Technology
PI:EMAIL
In 1998, Blaze, Bleumer, and Strauss (BBS) proposed
proxy re-signatures, in which a semi-trusted proxy acts as
a translator between Alice and Bob. To translate, the proxy
converts a signature from Alice into a signature from Bob
on the same message. The proxy, however, does not learn
any signing key and cannot sign arbitrary messages on be-
half of either Alice or Bob. Since the BBS proposal, the
proxy re-signature primitive has been largely ignored, but
we show that it is a very useful tool for sharing web certiﬁ-
cates, forming weak group signatures, and authenticating a
network path.
We begin our results by formalizing the deﬁnition of secu-
rity for a proxy re-signature. We next substantiate the need
for improved schemes by pointing out certain weaknesses of
the original BBS proxy re-signature scheme which make it
unﬁt for most practical applications. We then present two
secure proxy re-signature schemes based on bilinear maps.
Our ﬁrst scheme relies on the Computational Diﬃe-Hellman
(CDH) assumption; here the proxy can translate from Alice
to Bob and vice-versa. Our second scheme relies on the CDH
and 2-Discrete Logarithm (2-DL) assumptions and achieves
a stronger security guarantee – the proxy is only able to
translate in one direction. Constructing such a scheme has
been an open problem since proposed by BBS in 1998. Fur-
thermore in this second scheme, even if the delegator and
the proxy collude, they cannot sign on behalf of the dele-
gatee. Both schemes are eﬃcient and secure in the random
oracle model.
Categories and Subject Descriptors: K.6.5 [Security
and Protection]: Authentication.
General Terms: Security, Algorithms, Theory.
Keywords: proxy re-signature, authenticating path in net-
work, bilinear maps.
1.
INTRODUCTION
In a proxy re-signature scheme, a semi-trusted proxy is
given some information which allows it to transform Alice’s
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
signature on a message m into Bob’s signature on m, but
the proxy cannot, on its own, generate signatures for either
Alice or Bob.
This primitive was introduced at Eurocrypt ’98 by Blaze,
Bleumer, and Strauss [5] and yet very little follow up work
has been done, to our knowledge. One explanation is that
the BBS original construction [5] is ineﬃcient and with lim-
ited features. Moreover, the deﬁnition of proxy re-signature
in the BBS paper [5] is informal and has created some con-
fusion between the notion of proxy re-signature and the dis-
tinct one of proxy signature as introduced by Mambo, Usuda,
and Okamoto [18].
Proxy signatures [18] allow Alice to delegate her signing
rights to Bob but only if the proxy cooperates.
In prac-
tice, Bob and the proxy can jointly generate a signature on
arbitrary messages on Alice’s behalf. This is usually accom-
plished by dividing Alice’s secret into two shares which are
distributed to Bob and the proxy (each gets only one share).
A signature from Alice on a message is generated by com-
bining two partial signatures on the same message computed
by Bob and the proxy under their own shares, respectively.
In proxy re-signature [5], a proxy “translates” a perfectly-
valid and publicly-veriﬁable signature from Alice on a cer-
tain message, σA(m), into one from Bob on the same mes-
sage, σB(m). Notice that, in proxy re-signature, the two
signatures, one from Alice and the other from Bob as gen-
erated by the proxy, can coexist and both can be publicly
veriﬁed as being two signatures from two distinct people on
the same message. Moreover, the proxy can convert a sin-
gle signature into multiple signatures of several and distinct
signers, and vice-versa!
Any proxy re-signature can be used to build a proxy sig-
nature, but the reverse is not necessarily true. For instance,
it is possible to build a proxy signature based on RSA (as
in [12], by splitting Alice’s secret d into d1 and d2 such that
d = d1+d2) but it is not possible to have a proxy re-signature
scheme that translates between two publicly-veriﬁable RSA
signatures sharing the same modulus (because of the com-
mon modulus problem/attack). Another unique property of
proxy re-signature is that the “translation” from one signa-
ture to another can be performed in sequence and multiple
times by distinct proxies without even requiring the inter-
vention of the signing entities. Thus, the valuable secret keys
can remain oﬄine. The signatures generated in this process
are all valid and publicly-veriﬁable signatures on the same
message from distinct entities.
We re-open the discussion of proxy re-signature by pro-
viding four separate results: (1) we ﬁrst motivate the need
for improved schemes, by pointing out that the original BBS
scheme [5], while satisfying their security notion, is unsuit-
able for most practical applications, including the ones pro-
posed in the original paper, (2) we provide formal deﬁni-
tions and a security model, (3) we introduce provably secure
proxy re-signature constructions from bilinear maps, and (4)
we present new applications and perform comparisons with
other cryptographic primitives. Incidentally, we also intro-
duce a new signature scheme based on bilinear maps where
two signing secrets are associated to a single public key. Let
us brieﬂy describe these results in more detail.
Remarks on the BBS Scheme. The authors of the BBS
paper introduced several potential applications of proxy re-
signatures. By taking a careful look at how one might wish
to use proxy re-signatures in practice, we noticed that the
BBS construction [5] has inherent limitations. In short, their
scheme is actually ”proxy-less” since it is possible to recover
the information that would be stored at the proxy (the re-
signature key) by looking at the original signature and its
transformation. This precludes the possibility of having a
proxy in the ﬁrst place since anyone would be able to imper-
sonate the proxy itself once a single re-signature is released.
Moreover, the BBS scheme is what the authors called ”sym-
metric” [5], which means that, from the re-signature key
(which is public!), Alice can recover Bob’s secret key or vice-
versa.
Finding secure schemes without these limitations turned
out to be a very diﬃcult task. Many proxy re-signature
schemes based on standard signature algorithms that we in-
vestigated were found susceptible to the same type of prob-
lems. Several pairing-based signature schemes also failed or
it was not clear how to turn them in proxy re-signatures.
Formal Deﬁnitions and Security Model. There is no
formal deﬁnition of proxy re-signature in the BBS paper [5]
and their security guarantee holds for only a few limited
applications, given the problems we mentioned earlier.
For this reason, we formalize the notion of a proxy re-
signature and provide a security model that incorporates
the desirable property of having the re-signature key safely
stored at the proxy (so that it is reasonable to talk about
proxies in this context). First, this allows us to make mean-
ingful claims about our schemes’ security. In particular, in
Section 3.3, we realize a strong notion of security: Suppose
Alice delegates to Bob, via a proxy, the ability to change his
signatures into hers. As one might expect, even when the
proxy and Alice collude, they cannot recover any informa-
tion about Bob except his public key. More surprisingly, we
show that even when the proxy and Bob collude, they can
only recover a weak version of Alice’s secret key – that only
gives them the power to compute what Alice had already
delegated to them. Secondly, our formal notion allows us to
view the primitive abstractly, for easier reasoning about its
applications in Section 4.
Two Proxy Re-Signature Constructions. We present
two diﬀerent constructions based on bilinear maps. The ﬁrst
is a bidirectional proxy re-signature in which the proxy can
translate from Alice to Bob and vice-versa using a single
proxy key. The scheme is very attractive for its simplicity.
Unlike the bidirectional BBS scheme, here the proxy can
keep his proxy keys private. This scheme also allows for
multi-use, meaning that a signature may be transformed
from Alice to Bob, then from Bob to Carol, and so on. The
security of the scheme is based on the Computational Diﬃe-
Hellman (CDH) assumption, i.e., given (g, gx, gy), it is hard
to compute gxy, in the random oracle model.
The second scheme is unidirectional in that the proxy can
be given information that allows it to translate from Alice
to Bob, but not from Bob to Alice. This is the ﬁrst con-
struction of a unidirectional scheme since it was proposed
as an open problem by BBS seven years ago [5]. (In BBS,
they refer to such schemes as asymmetric.) Here, we al-
low the re-signature key to be public so that anyone can
act like a proxy but, at the same time, we ensure that cer-
tain important security properties are guaranteed based on
its unidirectional nature. (We also provide some insight on
how one might keep this proxy key private.) The security
of this scheme is based on the CDH and 2-Discrete Loga-
2
rithm (2-DL), i.e., given (g, gx, gx
), it is hard to compute
x, assumptions in the random oracle model.
Finally, we note that our unidirectional scheme introduces
a new signature algorithm that may be of independent in-
terest, because it allows the signer to use two secrets (strong
and weak) for a single public key (more details in Section 3.4).
Applications. We propose exciting new applications of
proxy re-signatures in Section 4. In particular we show how
to use proxy re-signatures to provide a proof that a certain
path in a graph was taken.
In the simplest case, the ba-
sic idea is that each node in the path (except the ﬁrst) is
only given a re-signature key which allows it to translate
signatures from adjacent nodes, but not a signing key. For
instance, given three nodes in a path A → B → C, we give
the ﬁrst node A’s signing key, while the second node is only
able to translate signatures from A into signatures from B,
without using (or storing) B’s signing key. Then, node C
only has to verify a single signature from B even if several
nodes (not just A) precede B in the path.
Our technique requires some pre-conﬁguration but pro-
vides several beneﬁts: (1) all (but the ﬁrst) nodes in the
graph do not store any signing key so that, even if a node is
compromised, no new messages can be injected in the graph,
(2) only a single signature must traverse the path, i.e., there
is no need to accumulate signatures and public keys while
traversing the path, (3) no information on the path itself is
collected so that, if applications require it, the actual path
traversed by a message could remain private, i.e., the last
node of the path knows that the message followed a legiti-
mate path but does not know which one (we stress that this
property is optional).
(cid:1)
(cid:1)
(cid:1)
We will also introduce other interesting applications. For
instance, we show how to use proxy re-signatures to share
existing public-key certiﬁcates and save the cost of obtain-
ing and distributing new ones.
In particular, a signature
σ
(m), that can only be veriﬁed with a new and/or uncerti-
ﬁed public key P
, could be transformed into σ(m) that can
be veriﬁed with a trusted and certiﬁed public key P . De-
pending on the application, translating between signatures
could be more convenient then requesting a certiﬁcate for
P
and distributing it to several parties.
A certiﬁcate itself is often implemented as a digital sig-
nature from a certiﬁcation authority (CA). There are cases
where certiﬁcates released by CA1 cannot be veriﬁed by en-
tities trusting only certiﬁcates released by CA2. A proxy
could be set up to transform certiﬁcates from CA1 into ones
from CA2, eﬀectively removing the need for building com-
plex hierarchies between certiﬁcation authorities (at least
temporarily).
We also show how to generate anonymous signatures that,
much like group signatures, can be used to hide a group’s
membership while providing accountability. Indeed, a proxy
could translate signatures from group members into signa-
tures from the group manager. The advantage here is that
the proxy does not store any signing key and the key of
the group manager cannot get exposed even if the proxy is
compromised.
1.1 Related Work
Proxy re-signatures [5] should not be confused with the
similar sounding proxy signatures [18, 12] as previously dis-
cussed. In particular, deﬁnitions in Dodis et al. [12] are for
proxy signatures: In their general construction, Bob’s signa-
ture is seen as a double signature which includes a signature
from Alice and one from the proxy. There is clearly no trans-
lation between valid Alice’s signatures into Bob’s ones and
Alice’s signing secret key is actually provided to her by Bob
(or by a trusted authority).
Proxy re-signatures share some properties with the transi-
tive signatures as introduced by Micali and Rivest [20] and
extended by Bellare and Neven [4].
In a transitive signa-
ture scheme, a single master signer signs edges of a graph
in such a way that anyone (i.e., not only a proxy) in pos-
session of signatures on edges ab and bc can compute the
master’s signature on edge ac. There is a symmetry be-
tween these schemes: in a transitive signature, the veriﬁca-
tion key stays constant while the message content changes,
while in a proxy re-signature scheme the message content
remains constant while the veriﬁcation key changes. Tran-
sitive signatures may also be appropriate for some of our
authenticated routing applications in Section 4.
Our work is also related to multi and aggregate signatures.
Multi-signatures [19, 6, 22, 21] allow n users, each with a
public and private key pair (pki, ski), to all sign the same
message m and have the result be just one single signature.
Similarly, aggregate signatures, introduced in [8], allow each
of the n users to sign a distinct message such that the com-
puted n signatures, on n distinct messages, can be aggre-
gated into a single one. Our multi-use proxy re-signatures
can be used as an alternative to multi-signatures, but not to
aggregate signatures, given that we allow transformations to
be made only between signatures on the same message. In
certain applications (e.g., those requiring a chain of signers),
multi and aggregate signatures have a potential drawback:
the veriﬁer must possess and trust n public keys in order
to verify the ﬁnal compressed signature.
In Section 4, we
discuss how, when proxy re-signatures are used instead, the
veriﬁer need only possess and trust one public key. This cuts
down on the storage needs and key distribution headaches
of some practical applications.
We notice that our ﬁrst proxy re-signature scheme, in Sec-
tion 3.3, uses a construction similar to Boldyreva’s multi-
signature [6] and Dodis and Reyzin’s “veriﬁably committed
signature” [13] constructions which are both based on the
short signature of Boneh, Lynn, and Shacham [10, 9]. How-
ever, the purpose, deﬁnition, and the security model of these
cryptographic primitives are diﬀerent and unrelated.
2. DEFINITIONS
Our protocols are based on bilinear maps [7, 10, 16], which
can be eﬃciently implemented [14].
Definition 2.1
(Bilinear Map). We say a map e :
G1× ˆG1 → G2 is a bilinear map if: (1) G1 and G2 are groups
of the same prime order q; (2) for all a, b ∈ Zq, g ∈ G1, and
h ∈ ˆG1, then e(ga, hb) = e(g, h)ab is eﬃciently computable;
(3) the map is non-degenerate (i.e., if g generates G1 and
h generates ˆG1, then e(g, h) generates G2); and (4) there
exists a computable isomorphism from ˆG1 to G1. (Here, G1
may equal ˆG1.)
Now, we explain the diﬀerent components of a proxy re-
signature scheme.
Definition 2.2
(Proxy Re-Signature). A proxy re-
signature scheme is a tuple of (possibly probabilistic) polyno-
mial time algorithms (KeyGen, ReKey, Sign, ReSign, Verify),
where:
tion, signing, and veriﬁcation algorithms.
• (KeyGen, Sign, Verify) form the standard key genera-
• On input (pk A, sk
∗
A, pk B, sk B), the re-encryption key
generation algorithm, ReKey, outputs a key rk A→B for
the proxy. (Note: rk A→B allows to transform A’s sig-
natures into B’s signatures – thus B is the delegator.)
The input marked with a ‘∗’ is optional.
• On input rk A→B, a public key pk A, a signature σ,
outputs σB(m) if Verify(pk A, m, σ) and ⊥ otherwise.
and a message m, the re-signature function, ReSign,
Correctness. The correctness property has two require-
ments. For any message m in the message space and any key
) ← KeyGen(1k), let σ = Sign(sk , m)
pairs (pk , sk ), (pk
and rk ← ReKey(pk , sk , pk
). Then the following two