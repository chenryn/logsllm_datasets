(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
N/A
N/A
N/A
N/A
(cid:35): no request
SET A1 (3/14)
SET A2 (3/14)
SET A3 (1/14)
SET A4 (1/14)
SET A5 (1/14)
SET A6 (3/14)
SET A7 (2/14)
SET A8 (2/9)
SET A9 (1/9)
SET A10 (2/9)
SET A11 (1/9)
SET A12 (1/9)
SET A13 (1/9)
SET A14 (1/9)
SET A15 (2/5)
SET A16 (1/5)
SET A17 (1/5)
SET A18 (1/5)
SET A19 (1/4)
SET A20 (1/4)
SET A21 (1/4)
SET A22 (1/4)
Chrome
Opera
Firefox
Edge
(cid:32): request with cookies
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
Table 2: Results from the analysis of ad blocking extensions per browser.
(cid:71)(cid:35): request without cookies
purpose, we used the EasyList and EasyPrivacy lists10
which contain regular expressions used by various pop-
ular browser extensions to determine whether requests
should be blocked. In Table 4, we show the number of
unique tracking or advertising domains, that make use
of one of the bypass techniques that we found to be most
successful. We only count the second-level domain name
of the tracker or advertiser to whom the request was sent.
To evaluate whether the advertising or tracking host
leveraged one of the techniques to purposely circumvent
browser extensions, we visited the web pages on which
these trackers or advertisers were included. For each
page visit, we enabled the browser extension that may be
bypassed with the detected technique. We found that all
uses of the methods were legitimate, and the requests to
the trackers and advertisers were never initiated because
either the script or frame containing the bypass function-
ality was preemptively blocked. Although we did not en-
counter any intentional abuse in the 10,000 websites we
analyzed, it is possible that trackers may actively try to
avoid detection, for instance by only triggering requests
upon human interaction. Moreover, as there exists a very
wide spectrum of advertisers and trackers, some of these
may not have been present in our dataset.
5.2 Evaluating unknown techniques
In order to evaluate whether any bypass technique was
used that was not detected by our framework, we com-
pared the DNS trafﬁc generated by every of the 160,059
visited web pages with the requests that we could detect
from each visit. More precisely, we ran every browser in-
stance in a separate Linux namespace and used tcpdump
to capture all DNS requests the browser generated. Next,
we aggregated all DNS requests that could not be traced
back to a captured request and used an aggregated list11
to mark those directed towards trackers and advertisers.
These DNS requests could be indicative of a bypass tech-
nique we were previously unaware of.
The preliminary analysis of this data indicated that
4,701 web pages triggered DNS requests for which we
did not capture any HTTP request. However, we found
that in most cases new resources were still being loaded
when we closed the web page (15 seconds after open-
ing it). We re-evaluated these web pages but now al-
lowed the browser 120 seconds to ﬁnish loading all re-
sources. This resulted in 865 web pages that triggered a
non-corresponding DNS request to a total of 77 different
hosts. A manual analysis of these showed that the vast
majority was due to DNS prefetching and the remainder
was still caused by requests that were interrupted when
closing the browser. These results indicate the complete-
ness of our framework, as we did not ﬁnd any bypass
technique that our framework was unable to detect.
10https://easylist.to/
11https://github.com/notracking/hosts-blocklists
USENIX Association
27th USENIX Security Symposium    161
AppCache
HTML
Headers
Redirect
PDF JS
JavaScript
SW
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
N/A
(cid:35): no request
SET B1 (1/6)
SET B2 (1/6)
SET B3 (3/6)
SET B4 (1/6)
SET B5 (1/4)
SET B6 (2/4)
SET B7 (1/4)
SET B8 (1/4)
SET B9 (1/4)
SET B10 (1/4)
SET B11 (1/4)
SET B12 (1/1)
Chrome
Opera
Firefox
Edge
(cid:32): request with cookies
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
Table 3: Results from the analysis of tracking protection extensions per browser.
(cid:71)(cid:35): request without cookies
Category
Technique
AppCache
CACHE:
Link: ; rel=next
Header
Link: ; rel=prefetch
JS
CSP: report-uri: url
sendBeacon(url)
new WebSocket(url)
Tracking
domains
0
0
0
8
56
27
4
0
0
Advertising
domains
1
0
1
1
18
7
10
2
3
Table 4: Unique number of tracking or advertising do-
mains that make use of one of the potential bypass tech-
niques
6 Discussion
As we have shown in Section 4, through our frame-
work, which evaluated several browsers and browser ex-
tensions in various conﬁgurations, we uncovered numer-
ous instances where an authenticated third-party request
could circumvent the imposed restrictions. We found
that this unintended behavior can be traced back to sev-
eral factors, which can be classiﬁed as implementation
errors, misconﬁguration and design ﬂaws.
In this sec-
tion, we discuss which measures can be taken to remedy
the discovered circumventions.
6.1 Browser implementations
Most of the browsers that we evaluated have built-in sup-
port for suppressing cookies of third-party requests. Our
results show that only the Gecko-based browsers (Fire-
fox, Cliqz and Tor Browser) manage to do this success-
fully. Surprisingly, we found that the blocking of third-
party cookies feature in Edge had no effect. We believe
that this is due to an oversight from the browser develop-
ers or a regression bug introduced when new functional-
ity was added.
For the Chromium-based browsers (Google Chrome
and Opera), we found that because of the built-in PDF
reader, an adversary or tracker can still initiate authen-