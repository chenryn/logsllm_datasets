**Context:**
  * Playwright Version: ^1.29.1
  * Operating System: Windows11
  * Node.js Version: v19.0.1
  * Browser: Chromium
**Code Snippet**
    test("repro", async ({ page, context }) => {
      await page.goto('http://localhost:8080');
      await page.locator('#theForceIsStrongWithThisOne').click({ timeout: 3000 });
    });
**HTML:**
            Keep On Darthin' In The Free World
            These are the blog articles you are looking for, if not, use the filter button above.
I also note that there is CSS for the "filter" class:
    .filter:after {
        position: absolute;
        border-left: .25em solid;
        left: -.125em;
        top: -.2em;
        height: .4em;
        content: ' '
    }
**Describe the bug**
When running this (only) in Chromium, as you will see in the trace below,
while playwright correctly highlights the filter control, it is going to
perform the click elsewhere and so the error that is returned makes sense
" intercepts pointer events"  
![image](https://user-
images.githubusercontent.com/16937257/210839453-2809d992-cc51-4bbf-a684-291c0eea82a2.png)  
I have a feeling this is probably not playwright and more likely chromium
itself but this is somewhat further than I know to go in the code to really
get to the bottom of it.
Click here for the log produced:
    waiting for locator('#theForceIsStrongWithThisOne')
    locator resolved to visible 
    attempting click action
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #1
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #2
    waiting 20ms
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #3
    waiting 100ms
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #4
    waiting 100ms
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #5
    waiting 500ms
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #6
    waiting 500ms
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #7
    waiting 500ms
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #8
    waiting 500ms
    waiting for element to be visible, enabled and stable
    element is visible, enabled and stable
    scrolling into view if needed
    done scrolling
    … intercepts pointer events
    retrying click action, attempt #9
    waiting 500ms
Here is the output from the console:
      3 | test("repro", async ({ page, context }) => {
      4 |   await page.goto("http://localhost:8080");
    > 5 |   await page.locator("#theForceIsStrongWithThisOne").click({ timeout: 3000 });
        |                                                      ^
      6 | });
      at c:\Users\DannyCrone\repos\click-repro\tests\repro.spec.ts:5:54
click-repro.zip
This project contains a repro website to test against and 1 test
  * website is in the folder "website"
  * test is called "repro" in "repro.spec.ts"
In order to run the website so it renders the page correctly, I used http-
server using the following command:
    http-server website -c-1
Also included it as an npm script:
      "scripts": {
        "start": "http-server website -c-1"
      },
Attached are the traces from chromium (failing) and webkit (passing):  
chromiumtrace.zip  
webkittrace.zip