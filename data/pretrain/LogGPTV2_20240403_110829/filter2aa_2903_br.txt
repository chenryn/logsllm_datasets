### 定位问题根源

清单5-9展示了在内核调试会话中检查CpuWhere驱动程序内部关键数据结构的WinDBG命令及其执行记录（清单中显示的是正常结果，供比较使用）。

#### 图5-8 CpuWhere 2.0版本工作时的截图

**清单5-9 在内核调试会话中观察驱动程序的关键数据结构**

1. `0: kd> !drvobj cpuwhere`
2. `Driver object (ffffd5827522db90) is for: \Driver\CpuWhere`
3. `Driver Extension List: (id, addr)`
4. 
5. `Device Object list: ffffd5827516e630`
6. `0: kd> !devobj ffffd5827516e630`
7. `Device object (ffffd5827516e630) is for: CpuWhere \Driver\CpuWhere DriverObject ffffd5827522db90`
8. `Current Irp 00000000 RefCount 1 Type 00008306 Flags 00000048`
9. `SecurityDescriptor ffffad0740074c80 DevExt ffffd5827516e780 DevObjExt ffffd5827516ef98`
10. `ExtensionFlags (0x00000800) DOE_DEFAULT_SD_PRESENT`
11. `Characteristics (0000000000)`
12. `Device queue is not busy.`
13. `0: kd> dt cpuwhere!_BTS_DEVICE_EXTENSION ffffd5827516e780`
14. `+0x000 DevObj : 0xffffd582`7516e630 _DEVICE_OBJECT
15. `+0x008 MaxBtsRecords : 0`
16. `+0x00c Flags : 0`
17. `+0x010 Options : 0`
18. `+0x018 BtsState : [64] _BTS_STATE`
19. `0: kd> dx -r1 (*((cpuwhere!_BTS_STATE (*)[64])0xffffd5827516e798))`
20. `[0] [Type: _BTS_STATE]`
21. `[1] [Type: _BTS_STATE]`
22. `[2] [Type: _BTS_STATE]`
23. `[3] [Type: _BTS_STATE]`
24. `[4] [Type: _BTS_STATE]`
25. `[省略多行]`
26. `0: kd> dx -r1 (*((cpuwhere!_BTS_STATE *)0xffffd5827516e7b8))`
27. `+0x000 DebugStore : 0xffffc38135e12000 [Type: _DEBUG_STORE *]`
28. `+0x008 MdlDebugStore : 0xffffd58271c7e8b0 [Type: _MDL *]`
29. `+0x010 VaUserDebugStore : 0x21a83290000 [Type: void *]`
30. `+0x018 BtsStatus : 0x1 [Type: unsigned char]`
31. `0: kd> dx -r1 (*((cpuwhere!_DEBUG_STORE *)0xffffc38135e12000))`
32. `+0x000 BtsBase : 0xffffc38135e12050 [Type: unsigned __int64]`
33. `+0x008 BtsIndex : 0xffffc38135e1e548 [Type: unsigned __int64]`
34. `+0x010 BtsAbsolute : 0xffffc38135e2f510 [Type: unsigned __int64]`
35. `+0x018 BtsIntThreshold : 0xffffc38135e2f528 [Type: unsigned __int64]`
36. `+0x020 PebsBase : 0x0 [Type: unsigned __int64]`
37. `+0x028 PebsIndex : 0x0 [Type: unsigned __int64]`
38. `+0x030 PebsAbsolute : 0x0 [Type: unsigned __int64]`
39. `+0x038 PebsIntThreshold : 0x0 [Type: unsigned __int64]`
40. `+0x040 PebsCounterReset : 0x0 [Type: unsigned __int64]`
41. `+0x048 Reserved : 0x0 [Type: unsigned __int64]`

第1行使用`!drvobj`命令列出驱动对象（第2行）和它创建的设备对象（第7行）。然后使用`!devobj`观察设备对象的详细信息，以获取与其关联的设备扩展结构体地址（第12行），该指针指向的是`BTS_DEVICE_EXTENSION`结构体。有了这个地址后，使用`dt`命令观察（第17行），再用`dx`命令显示结构体中的`BtsState`数组（第23行）。接下来可以根据监控的CPU编号观察对应的数组元素，显示出某个CPU对应的`BTS_STATE`结构体（第30行），并通过其中的`DebugStore`成员继续观察对应的`DEBUG_STORE`结构体（第35行）。第36～39行为CPU手册定义的BTS字段的值，可以看到BTS缓冲区的记录指针（`BtsIndex`）为`0xffffc38135e1e548`，距离起始地址50424字节，因为每条记录为24个字节，所以缓冲区中已经有2101条记录。如图5-8所示，界面上设置的总记录数为5000，因此还有大约一半缓冲区可以使用。

**老雷评点**
通过上述调试日志，我们可以看到NT内核经典驱动模型（WDM）的概要，也能看出其将面向对象思想融入过程语言（C）的巧妙之处。

### 5.4.4 局限性和扩展建议

CpuWhere程序可以观察到CPU的运行轨迹，并将其翻译成程序符号。这些信息可以帮助我们精确了解CPU的运行历史，为软件调试和研究软件的工作过程提供第一手资料。

然而，CpuWhere毕竟是一个示例性的小程序，尽管作者花费了大量时间，但它仍然是BTS功能的一个初级应用，存在以下局限：

1. **未考虑进程上下文**：目前只是简单地将BTS记录中的地址传递给内核调试引擎寻找匹配的符号。由于没有仔细设置和维护进程上下文，查到的用户态地址的符号可能是不准确甚至错误的。
2. **单一的线性列表显示方式**：一种更好的显示方式是以调用图（calling graph）的形式显示函数的调用和返回。
3. **使用环形缓冲区模式而不是中断模式**：当BTS区满后，CPU会循环使用。

感兴趣的读者可以从本书的线上资源中下载CpuWhere的源代码，进行改进和补充，解决上述不足。

**老雷评点**
2011年9月，《软件调试》第2版第一次开工，坚持到2013年8月（写到本章），开始更新CpuWhere程序，但用了一个月的时间，导致那次努力半途而废。2017年再次开工，写到本章时，以前的环境已经不在，于是重新搭建环境，编译运行，一边调试一边做了些更新，终于跨过了这道坎。前前后后花在这个程序上的时间需以月计。希望读者诸君阅读本节时学到的不只是分支记录。

### 5.4.5 Linux内核中的BTS驱动

浏览Linux内核源代码树（作者使用的是4.4版本），打开`arch/x86/kernel/cpu/perf_event_intel_bts.c`文件——这是英特尔公司为IA CPU的BTS设施编写的驱动程序。驱动代码不长，比作者编写的Windows版本的驱动要简单得多，主要原因是使用了Linux 2.6内核引入的perf框架。这个框架是以面向事件的思想设计的，驱动程序只需提供管理事件的几个回调函数（包括初始化、开始、停止、增加、删除、读取等）。清单5-10所示的初始化函数`bts_init`便是把这些回调函数赋值到一个结构体（`bts_pmu`）的成员中，然后再调用perf框架的注册函数（`perf_pmu_register`）报告给框架。

**清单5-10 Linux内核BTS驱动的初始化函数**

```c
static __init int bts_init(void)
{
    if (!boot_cpu_has(X86_FEATURE_DTES64) || !x86_pmu.bts)
        return -ENODEV;

    bts_pmu.capabilities = PERF_PMU_CAP_AUX_NO_SG | PERF_PMU_CAP_ITRACE;
    bts_pmu.task_ctx_nr = perf_sw_context;
    bts_pmu.event_init = bts_event_init;
    bts_pmu.add = bts_event_add;
    bts_pmu.del = bts_event_del;
    bts_pmu.start = bts_event_start;
    bts_pmu.stop = bts_event_stop;
    bts_pmu.read = bts_event_read;
    bts_pmu.setup_aux = bts_buffer_setup_aux;
    bts_pmu.free_aux = bts_buffer_free_aux;

    return perf_pmu_register(&bts_pmu, "intel_bts", -1);
}
arch_initcall(bts_init);
```

在默认情况下，BTS驱动会被构建到Linux内核中，使用perf工具的`list`命令可以观察到：

```sh
# perf list | grep bts
  intel_bts//                                        [Kernel PMU event]
```

使用如下命令可以监视并记录指定进程（例如`ls`）的运行过程：

```sh
# perf record --per-thread -e intel_bts// --dump ls /home -R
```

记录的数据默认放在当前目录的`perf.data`文件中。执行`perf report`便可以查看和分析结果（见图5-9）。

**图5-9 使用perf脚本分析BTS记录**

注意，图5-9所示的分析结果完全是按事件数量计算的。标题第一行显示了总的样本数——506255003，即5亿多个。看表格中`malloc`那一行，所占百分比为0.56%，即283万多个。这反映了被监视进程频繁调用了`malloc`函数。可以通过设置`MSR_LBR_SELECT`寄存器来对分支事件进行过滤，从而只监视某一类或几类感兴趣的分支跳转。在内核代码树的`tools/perf/Documentation/intel-bts.txt`文件中，有关于BTS驱动的简要说明。

英特尔公司的VTune软件是一款强大的辅助调试和性能分析工具，具有丰富的功能，它所依赖的技术除了本节介绍的BTS技术，还有下一节将介绍的性能监视机制。

### 5.5 性能监视

许多程序员都有过这样的经历：为了评估一段代码的执行效率，分别在这段代码的前面和后面取系统时间，然后通过计算时间差得到这段代码的执行时间。这可以说是最简单的性能监视（performance monitoring）方法。这种方法忽略了许多因素，因此得到的结果只是一个非常粗略的估计。比如在一个多任务的操作系统中，CPU在执行这段代码的过程中，很可能被多次切换去执行其他程序或处理各种中断请求，而这些时间是不固定的。

性能监视对软件调优（tuning）和软件调试都有着重要的意义。为了更好地满足性能监视任务的需要，IA处理器从奔腾开始就提供了性能监视机制，包括专门的计数器、寄存器、CPU管脚和中断支持等。

需要指出的是，虽然从奔腾CPU开始的所有IA处理器都包含了性能监视支持，但直到Core Solo和Core Duo处理器发布时，才将一部分性能监视机制纳入到IA架构中，其他部分仍是与处理器型号相关的。换句话说，IA CPU的性能监视支持是与处理器型号相关的，使用时应先检查CPU的型号。下面按照由简单到复杂的顺序分别介绍不同IA CPU的性能监视机制。

### 5.5.1 奔腾处理器的性能监视机制

奔腾处理器是第一个引入性能监视机制的IA处理器，该机制包括两个40位的性能计数器（PerfCtl0和PerfCtl1）、一个32位的名为CESR（Counter Event Select Register）的控制寄存器，以及处理器上的PM0/BP0和PM1/BP1管脚。CESR寄存器用于选择要监视的事件和配置监视选项，PM0/BP0和PM1/BP1管脚用于向外部硬件通知计数器状态（各对应一个计数器）。PerfCtl0、PerfCtl1和CESR都是MSR，可以通过RDMSR和WRMSR指令来访问。下面我们以CESR的格式为线索，介绍奔腾处理器的性能监视机制。

**图5-10 奔腾处理器的CESR**

显而易见，CESR的高16位和低16位的布局是相同的。低16位对应计数器0，高16位对应计数器1。每个部分都包含以下三个域：

1. **6位的事件选择域ES（Event Select）**：用来选择要测量（监视）的事件类型，例如DATA_READ、DATA_WRITE、CODE_READ等。IA-32手册卷3B的附录A中列出了每种IA-32处理器所支持的全部事件类型。
2. **3位的计数器控制域CC（Counter Control）**：用来设置计数器选项，其可能值和含义如下：
   - 000：停止计数。
   - 001：当CPL=0、1或2时对选定的事件计数。
   - 010：当CPL=3时对选定的事件计数。
   - 011：不论CPL为何值，都对选定的事件计数。
   - 100：停止计数。
   - 101：当CPL=0、1或2时对时钟（clocks）计数，相当于记录CPU在内核态的持续时间。
   - 110：当CPL=3时对时钟（clocks）计数，相当于记录CPU在用户态的持续时间。
   - 111：不论CPL为何值，都对时钟计数。
   显然，最高位是用来控制对事件计数还是对时钟计数（即持续时间）；中间位用来使能（enable）当CPL为3（用户模式下）时是否计数；最低位用来使能（enable）当CPL为0、1或2（内核模式下）时是否计数。
3. **1位的管脚控制域PC（Pin Control）**：用来设置对应的PM/BP管脚行为。如果该位为1，那么当对应计数器溢出时，PM/BP管脚信号被置起（asserted）；如果该位为0，那么当对应计数器递增时，PM/BP管脚信号被置起。