4
13
7
1
1
13
8
4
11
62
• What performance beneﬁts can IntelliDroid’s targeting
potentially provide for a dynamic analysis tool? What are
the run-time costs of the static and dynamic components?
We measure the time IntelliDroid takes to generate and in-
ject inputs, the number of inputs required, and the amount
of code that IntelliDroid is able to avoid executing.
A. Targeted Execution with IntelliDroid-Targeted TaintDroid
To demonstrate how IntelliDroid can be used in practice,
we integrated IntelliDroid with TaintDroid [19], a dynamic
taint-tracking system, to produce a combined system we call
Intelli-TaintDroid. Integration with TaintDroid is straightfor-
ward and requires the merging of IntelliDroid’s input injection
component with TaintDroid’s code base, which can be done
with an automated patch. To derive the set of targeted APIs
from TaintDroid, we analyze TaintDroid’s documentation and
source code to identify the instrumented methods that add and
check taint tags. In cases where taint is assigned or checked
in an internal framework method, we traced the call path back
to an API method. Table II summarizes the number and types
of APIs targeted. We found that specifying the targeted APIs
for TaintDroid was fairly easy and took the ﬁrst author on the
order of 2-3 hours to produce the full set of targeted APIs.
We perform three experiments with Intelli-TaintDroid.
First, we evaluate against a malware set for which we know
the ground truth of all malicious behaviors. In this way we
can evaluate the accuracy of Intelli-TaintDroid. Second, we
compare against FlowDroid, a purely static analysis tool that
also detects privacy leakage. Finally, we compare against
TaintDroid driven by Monkey, a generic non-targeted fuzzer.
To perform a ground-truth evaluation of Intelli-TaintDroid,
we need malware for which all known privacy leaking behav-
iors are known. To this end, we use 14 documented malware
families from the Android Malware Genome dataset [49] that
are known to leak sensitive information and supplement this
with several recent samples from the Contagio project [34],
which we manually analyzed to ﬁnd all privacy leaking behav-
iors. Table III summarizes all of the behaviors that the malware
is known to exhibit. The Intelli-TaintDroid combination is
able to detect all of these behaviors with no false positives.
IntelliDroid generates the appropriate inputs that trigger the
privacy leakages and TaintDroid’s dynamic tracking promptly
reports it. In some cases, tainted data may ﬂow through the
heap and this would require executing intermediate paths that
do not directly invoke the targeted API methods. IntelliDroid’s
Malware
Backﬂash
Bgserv
Cajino
CoinPirate
Crusewin
Endofday
GamblerSMS
GGTracker
GoldDream
GPSSMSSpy
NickyBot
HeHe
NickySpy
Pjapps
SMSReplicator
Spitmo
Zitmo
Leakage Paths
SMS → SMS
SMS → HTTP
Lifecycle → HTTP
Boot → HTTP
SMS → HTTP
SMS → File
SMS → HTTP
Intent → HTTP
SMS → HTTP
SMS → HTTP
SMS → File
SMS → SMS
SMS → HTTP
SMS → SMS
Location → SMS
SMS → SMS
Lifecycle → HTTP
SMS → HTTP
SMS → File
Lifecycle → HTTP
Boot → SMS
SMS → SMS
Lifecycle → HTTP
SMS → SMS
SMS → SMS
SMS → HTTP
Sensitive Data
SMS, IMEI
SMS, IMEI
IMEI
IMEI
phone number
phone number
phone number
SMS, IMEI, contacts, ﬁles
SMS
SMS
phone number
SMS
SMS, phone number
SMS
location
IMEI
IMEI
SMS, IMSI
SMS
IMEI, IMSI
IMEI
SMS
IMEI
SMS
SMS
SMS
event-chain mechanism detects these ﬂows and invokes the
necessary intermediate events to complete the ﬂow from taint
source to taint sink.
We further compare Intelli-TaintDroid against Flow-
Droid [4], a purely static taint-tracking tool, on the same set
of malware. Since FlowDroid uses a more sophisticated static
analysis than IntelliDroid, we expect that it might be more
complete than IntelliDroid. However, out of the 26 privacy
leaks, FlowDroid is unable to precisely detect the leakage in
7 cases because it stops when the sensitive information is sent
to an Intent. Since Intelli-TaintDroid executes the full system,
it is able to detect that data sent to these intents is eventually
leaked via SMS or HTTP. We also note that Intelli-TaintDroid
has no false positives, though it does report extra leaks that
FlowDroid does not, since TaintDroid also monitors system
services while FlowDroid only analyzes the application. We
manually conﬁrmed these extra ﬂows to be true privacy leaks.
To fully compare against FlowDroid, we also tested Intelli-
TaintDroid with the DroidBench test suite used in FlowDroid’s
own evaluation. Although DroidBench was meant to evaluate
static analysis tools, this comparison shows the advantages of
dynamic analysis when attached to a targeted execution tool
such as IntelliDroid. Intelli-TaintDroid is able to detect all
privacy leaks without any of the false positives of FlowDroid,
due to the increased precision of dynamic taint-tracking.
Finally, we compare our Intelli-TaintDroid implementation
against TaintDroid on its own being driven by Monkey4. While
Monkey is a simplistic tool, we found that we were unable
4http://developer.android.com/tools/help/monkey.html
9
TABLE IV.
NUMBER OF INJECTED INPUTS REQUIRED BY
INTELLIDROID TO TRIGGER MALICIOUS BEHAVIOR
Malware
Injections Required
Backﬂash
Bgserv
Cajino
CoinPirate
Crusewin
Endofday
GamblerSMS
GGTracker
GoldDream
GPSSMSSpy
HeHe
NickyBot
NickySpy
Pjapps
SMSReplicator
Spitmo
Zitmo
Average
41
91
167
85
2
44
5
9
43
19
430
104
107
64
7
5
3
72
to integrate more sophisticated open-source tools with Taint-
Droid. We had attempted to compare with DynoDroid [31]
(only available on Android 2.3), but we were unable to inte-
grate it with TaintDroid successfully. We were also similarly
unsuccessful with integrating the Android concolic testing
system ACTEve [2] with TaintDroid.
We ran Monkey on each application for one hour, sending
over 60K injections per application. Since Monkey is only ca-
pable of sending UI events and select system events, Monkey-
TaintDroid missed 21 out of 26 cases of privacy leaks in our
malware dataset, where the leaks require non-UI events such
as location or SMS. Monkey was also unable to trigger leaks in
cases such as GPSSPSSpy, where speciﬁc input strings must be
injected to trigger the privacy leak. In comparison, Table IV
shows the number of input injections that Intelli-TaintDroid
required to detect all malicious behavior in each application.
We can see that overall, IntelliDroid needs between 2 and 430
inputs (with an average of 72) to trigger all malicious behavior
in any one of our malware samples. While we speculate that
DynoDroid would likely have been able to detect more leaks
because it can inject non-UI events, we do not believe that
it would be able to guess the correct input strings needed
to trigger the privacy leak either. ACTEve, being a concolic
testing tool that performs static analysis, would likely be able
to determine the correct inputs, but as a coverage tool, it seeks
to execute each path only once and thus may miss malicious
behaviors since it does not know the order in which to inject
inputs. In contrast, IntelliDroid injects each input once and
determines from static analysis the correct order to inject them.
B. Generating Inputs to Trigger Targeted APIs
The previous section shows that IntelliDroid is effective
in practice when integrated with a real dynamic analysis
system. However, TaintDroid itself is only capable of detecting
privacy leaks. We now seek to understand the limits of what
types of inputs IntelliDroid can generate when tasked with
triggering a larger variety of behaviors. To do this, we use
27 malware families from the Android Malware Genome [49]
and Contagio datasets [34], and use a set of targeted APIs that
would have been derived from a hypothetical tool that would
be capable of detecting all known malicious behavior, given
IntelliDroid’s ability to trigger it. The malware in our dataset
performs malicious actions that are typical of many types
of malware, including SMS manipulation and monetization,
receiving command and control messages via the network and
SMS messages, sending stolen data over the network, and
other malicious network requests. They also obfuscate their
actions using techniques such as reﬂection and dynamic class
loading, which are common among Java-based malware. In
some cases, a malware sample can exhibit several malicious
behaviors, giving the dataset a total of 75 malicious behaviors
that IntelliDroid must trigger.
For each behavior, we describe both the targeted APIs that
IntelliDroid targets (i.e., the static conﬁguration), as well as
how we conﬁrm that IntelliDroid is able to successfully trigger
the targeted API.
2 Blocking
1 Premium SMS: Trigger paths
to SmsManager.
sendTextMessage. Conﬁrmed by checking that
sendTextMessage is called with a premium number.
to
paths
from
BroadcastReceiver.abortBroadcast
within an onReceive event handler. Conﬁrmed
by
BroadcastReceiver.
abortBroadcast is invoked
Trigger
SMS:
checking
that
3 Deleting SMS: Trigger paths to ContentProvider.
delete where the URI is content://sms. Con-
ﬁrmed when a deletion occurs on the SMS content
provider, where the deleted message was injected by
IntelliDroid.
4 Leaking information via SMS: Trigger paths with calls
to sendTextMessage. Conﬁrmed by inspecting the
content of messages sent by sendTextMessage.
5 Network access: Trigger paths to HTTP API methods.
Conﬁrmed by recording and inspecting the device’s net-
work trafﬁc.
6 Reﬂection and dynamic class loading: Trigger paths
to reﬂection and dynamic class loading API methods
(e.g. DexClassLoader.loadClass). Conﬁrmed by
checking that the API methods are invoked.
In some cases, the malware constraints depend on values
obtained from network requests to a remote control server.
To resolve these constraints, IntelliDroid will monitor these
network requests to extract the necessary values and solve
the constraints to generate inputs that will match these re-
quests. However, for the CoinPirate, Crusewin, and Pjapps
malware, the third-party servers were no longer available and
the network data values could not be extracted. To test these
samples, we implemented an HTTP proxy server that imitates
the original control server and responds to application requests
with appropriately formatted replies.
Using the malicious dataset and the speciﬁcation of tar-
geted APIs, we measure the number of instances where Intelli-
Droid successfully generates inputs that trigger the targeted
API. Many of the malware samples have multiple malicious
invocations of the APIs, in which case they are tested once
for each invocation. Table V provides detailed information
10
TABLE V.
EFFECTIVENESS BY MALWARE FAMILY
Rows indicate the malware family and columns indicate the type of input(s)
injected. Numbers indicate the type(s) of malicious activity triggered/missed.
Event →
AnserverBot
Backﬂash
Bgserv
Cajino
CoinPirate
Crusewin
DogWars
Endofday
Fakemart
FakeNetﬂix
FakePlayer
GamblerSMS
GGTracker
GoldDream
GPSSMSSpy
HeHe
Jifake
HippoSMS
KMin
NickyBot
NickySpy
Pjapps
RogueSPPush
SMSReplicator
Spitmo
Zitmo
Zsone
SMS
Intent
Loc
5
1
5
1
4
4