**Question 1: Managing Multiple Python Versions and Installing External Modules on macOS**

You have three versions of Python installed on your Mac:

1. Apple-supplied Python 2.7.1 (located at `/usr/local/bin`)
2. MacPorts-installed Python 2.7.3 (located at `/opt/local/bin`)
3. Python.org-installed Python 2.7.3 (located at `/Library/Frameworks/Python.framework/Versions/2.7/bin`)

To install and use external modules like OpenCV or Pygame, you need to ensure that the modules are installed in the correct Python environment and that the correct Python interpreter is being used.

### Steps to Install and Use External Modules

1. **Determine the Active Python Interpreter:**
   - Check which Python interpreter is currently active by running `which python` in the terminal. This will show you the path to the active Python executable.
   - If you want to use a specific Python version, you can specify it directly, e.g., `python2.7` or the full path, e.g., `/opt/local/bin/python2.7`.

2. **Install External Modules:**
   - For the MacPorts-installed Python, you can use `port` to install modules. For example:
     ```sh
     sudo port install py27-opencv
     sudo port install py27-pygame
     ```
   - For the Python.org-installed Python, you can use `pip` to install modules. First, ensure you are using the correct `pip` by specifying the full path:
     ```sh
     /Library/Frameworks/Python.framework/Versions/2.7/bin/pip install opencv-python
     /Library/Frameworks/Python.framework/Versions/2.7/bin/pip install pygame
     ```

3. **Verify Installation:**
   - After installation, verify that the modules are available by running a Python script and importing them:
     ```python
     import cv2
     import pygame
     print(cv2.__version__)
     print(pygame.__version__)
     ```

4. **Handle "No Module Found" Error:**
   - If you encounter a "no module found" error, ensure that the correct Python interpreter is being used. You can check the Python path by running:
     ```python
     import sys
     print(sys.path)
     ```
   - Add the directory containing the installed modules to the `PYTHONPATH` environment variable if necessary:
     ```sh
     export PYTHONPATH=$PYTHONPATH:/path/to/module
     ```

### Question 2: Adding External Libraries to PyDev in Eclipse

To add external libraries to PyDev in Eclipse, follow these steps:

1. **Configure the Python Interpreter:**
   - Open Eclipse and go to `Preferences` (or `Eclipse > Preferences` on macOS).
   - Navigate to `PyDev > Interpreters > Python Interpreter`.
   - Click on `New...` to add a new interpreter. Select the appropriate Python executable (e.g., `/opt/local/bin/python2.7` for MacPorts or `/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7` for Python.org).

2. **Add External Libraries:**
   - Once the interpreter is added, select it and click on `Apply`.
   - PyDev will automatically scan for libraries installed in the selected interpreter's environment.
   - If you install new libraries later, return to the `Python Interpreter` preferences, select the interpreter, and click `Apply` again to rescan for new libraries.

3. **Recommendation:**
   - Using MacPorts for managing Python and its libraries is recommended because it simplifies the installation and management of dependencies. Most common libraries are available via MacPorts, reducing the need for manual installation.

By following these steps, you should be able to manage multiple Python versions and install and use external modules effectively on your Mac.