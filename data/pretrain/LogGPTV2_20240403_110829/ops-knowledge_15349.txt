User: 请回答以下安全问题在网络应用中对不受信任的用户提供的代码进行沙盒处理我正试图创建一个编程游戏，在该游戏中，用户提供的程序在战斗模拟中进行竞争，用作教授和练习编程的工具。（这可能是一个基于回合的机器人模拟，但就这个问题而言，它也可能是国际象棋或跳棋。）实现这个游戏的一个主要组成部分是提供一种机制，根据游戏数据运行用户生成的代码，以确定机器人的动作。
我知道典型的建议是，“尽可能不要运行不受信任的代码”，我理解它的来源。不过，在我目前的情况下，如果可能的话，这将是我想制作的应用的核心功能。我知道我需要采取一些预防措施，以确保用户提供的代码不会造成损坏。据我所知，理想的设置将强制执行：
用户代码从STDIN读取游戏状态
用户代码将生成的移动写入STDOUT
用户代码与主机系统隔离
用户代码彼此隔离
用户代码可消耗的资源（CPU、内存、磁盘）有限
用户代码无法访问网络
我的用例似乎并不独特。如果有什么不同的话，我想以下任何类型的应用都有类似的要求：
大多数编程游戏
竞技节目在线评委
“试试X编程语言”
游戏AI竞赛
然而，我环顾谷歌，却找不到任何值得信赖的参考实现。上述类型的大多数应用都是封闭源代码的，这也许是有充分理由的。
考虑到这些需求，我想我需要某种隔离/虚拟化/容器化解决方案，尽管我真的不确定哪种解决方案能提供必要的保证。
对于用户提供的代码，当前围绕沙盒的最佳实践是什么？有人有可靠来源的信息或参考资料吗？

Assistant: 我假设您收到的代码由客户端在其Javascript解释器中执行，并在某个时候在服务器上提交和解释以进行验证。
您有多个问题：
你想确保为一个玩家执行的代码不会对另一个玩家产生负面影响
您希望确保执行的代码不允许任何操作系统级别的权限提升
可选的额外功能：您想知道在客户端代码执行过程中什么时候出错
消毒输入
第一件事：记得把你从客户那里得到的投入列为白名单。它们必须具有已知的长度和格式。使用与平台无关的格式来存储接收到的数据，该格式指定所有交换变量的长度和类型。
隔离客户端
然后，您必须确保任何输入的计算都可以导致正确的结果，或者在不影响操作系统或其他并发计算的情况下导致计算失败。这意味着每个输入都在其包含的线程/进程中进行处理。您可以让Web服务器将输入转发到一个自定义守护进程，该守护进程为每个客户端生成一个沙盒进程，并向其提供输入。
您也可以使用类似Wedge的东西来直接安全地划分单个服务器。辣椒也是一种选择。
即使您选择使用单个Javascript解释器来运行由不受信任的客户端编写的JS代码，您也很快就会有适当的工具来保证隔离，因为COWL（一种成功实现JS代码不干扰的限制机制）正在被W3C标准化。
保护操作系统
无论你走哪条路，你只需要确保运行代码的流程是：
不由root运行/具有root等效功能
包含在一个cgroup中，以实现对CPU、内存、磁盘和网络带宽的QoS限制（我认为后一个可能需要网络名称空间）
包含在用户命名空间中
知道计算结果是可信的
参加一门基于语言的安全课程：-）这通常是一个非常艰巨的目标，需要对语言和您想要保证的安全属性进行大量假设。
祝你好运