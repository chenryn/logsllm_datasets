### Cancellation in a PLINQ Query

To enable cancellation in a PLINQ query, use the `WithCancellation` method of the `ParallelQuery` class and specify a `CancellationToken`. Here is an example:

```csharp
CancellationToken tok = ...;
var orderInfoQuery =
    from c in CustomersInMemory.Customers.AsParallel().WithCancellation(tok)
    join o in OrdersInMemory.Orders.AsParallel()
    on ...
```

### Synchronizing Tasks for Thread-Safe Exclusive Access to Shared Data

Use the `lock` statement to ensure exclusive access to shared data. For example:

```csharp
object myLockObject = new object();
...
lock (myLockObject)
{
    // Code that requires exclusive access to a shared resource
}
```

### Synchronizing Threads and Making Them Wait for an Event

- **ManualResetEventSlim**: Use this to synchronize an indeterminate number of threads.
- **CountdownEvent**: Use this to wait for an event to be signaled a specified number of times.
- **Barrier**: Use this to coordinate a specified number of threads and synchronize them at a particular point in an operation.

### Synchronizing Access to a Shared Pool of Resources

Use a `SemaphoreSlim` object. Specify the number of items in the pool in the constructor. Call the `Wait` method before accessing a resource in the shared pool, and call the `Release` method when you are done. For example:

```csharp
SemaphoreSlim semaphore = new SemaphoreSlim(3);
semaphore.Wait();
// Access a resource from the pool
semaphore.Release();
```

### Providing Exclusive Write Access with Shared Read Access

Use a `ReaderWriterLockSlim` object. Before reading the shared resource, call the `EnterReadLock` method and `ExitReadLock` when finished. Before writing, call the `EnterWriteLock` method and `ExitWriteLock` when done. For example:

```csharp
ReaderWriterLockSlim readerWriterLock = new ReaderWriterLockSlim();

Task readerTask = Task.Factory.StartNew(() =>
{
    readerWriterLock.EnterReadLock();
    try
    {
        // Read shared resource
    }
    finally
    {
        readerWriterLock.ExitReadLock();
    }
});

Task writerTask = Task.Factory.StartNew(() =>
{
    readerWriterLock.EnterWriteLock();
    try
    {
        // Write to shared resource
    }
    finally
    {
        readerWriterLock.ExitWriteLock();
    }
});
```

### Canceling a Blocking Wait Operation

Create a `CancellationToken` from a `CancellationTokenSource` object and specify this token as a parameter to the wait operation. To cancel the wait operation, call the `Cancel` method of the `CancellationTokenSource` object. For example:

```csharp
CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
CancellationToken cancellationToken = cancellationTokenSource.Token;

// Semaphore that protects a pool of 3 resources
SemaphoreSlim semaphoreSlim = new SemaphoreSlim(3);

// Wait on the semaphore, and throw an OperationCanceledException if another thread calls Cancel on cancellationTokenSource
semaphoreSlim.Wait(cancellationToken);
```

### Implementing the User Interface for a Universal Windows Platform App

#### Overview

After completing this chapter, you will be able to:
- Describe the features of a typical Universal Windows Platform (UWP) app.
- Implement a scalable user interface for a UWP app that can adapt to different form factors and device orientations.
- Create and apply styles to a UWP app.

#### Introduction to UWP

Recent versions of Windows have introduced the Universal Windows Platform (UWP), which allows developers to build highly interactive applications with touch-driven user interfaces and support for embedded device sensors. UWP apps can run on a wide range of devices, including tablets, desktops, and Xbox, without the need to maintain separate code bases.

#### Features of a UWP App

- **Touch Interaction**: Design your UWP apps for touch, but they should also work with a mouse and keyboard.
- **Gestures**: Utilize gestures like tap, rotate, pinch, and slide to enhance the user experience.
- **Adaptability**: Construct your app to scale and adapt to different screen sizes and orientations.
- **Suspend and Resume**: Manage the app's lifecycle to conserve resources and battery life.
- **Security and Capabilities**: Declare capabilities in the `Package.appxmanifest` file to perform restricted operations, such as internet access or file system modifications.

#### Building a UWP App

1. **Create the Adventure Works Customers App**:
   - Start Visual Studio 2017.
   - Go to `File > New > Project`.
   - Select `Blank App (Universal Windows)` under `Visual C# > Windows Universal`.
   - Name the project `Customers` and set the location.
   - Accept the default values for the target and minimum versions.

2. **Design the User Interface**:
   - Open `MainPage.xaml` and design the layout using XAML.
   - Use the `Design View` window to see how the UI will appear on different devices.
   - Implement the logic in `MainPage.xaml.cs`.

#### Implementing a Scalable User Interface

- **Form Factors and Orientations**: Use the drop-down list in the `Design View` window to select different resolutions and orientations.
- **XAML Layout**: Define the layout in XAML, ensuring it scales and adapts to different form factors.
- **Styling**: Separate the user interface design from the business logic to allow collaboration between graphic artists and developers.

By following these guidelines, you can create a robust and adaptable UWP app that provides a seamless user experience across various devices.