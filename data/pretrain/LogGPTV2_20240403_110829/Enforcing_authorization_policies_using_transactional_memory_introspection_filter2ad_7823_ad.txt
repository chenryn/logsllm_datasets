### 5.1 GradeSheet: A Grade Management System
As discussed in Section 3.2, GradeSheet is a simple client/server Java application designed to manage student grades, consisting of approximately 900 lines of code. The system's principals are either graders (professors or teaching assistants) or students. GradeSheet enforces the following authorization policy:
1. Professors have read and write access to all grades and can read all grade averages.
2. Teaching Assistants (TAs) can read and write grades for projects they supervised and can read any project’s grade average.
3. Students can only read their own grades and project grade averages.

We ported GradeSheet to use TMI-based authorization policy enforcement and converted all shared objects to their transactional equivalents. The @sensitive GradeCell objects must be authorized based on their security-relevant attributes, such as grades, student IDs, and project IDs. We integrated the TMI authorization module with both a custom-built policy engine and another one that used XACML [23] policies.

### 5.2 A Tar Archive Service
We experimented with a 5,000-line Java service that allows the creation and processing of standard Tar archives [55]. We converted this code to use TMI-enhanced DSTM2, performing each service invocation within a transaction. Minimal changes were required: we used a simple, static escape analysis to determine that most state was transaction-local, with files being the only security-relevant, shared resources.

Subsequently, we added TMI-based enforcement of file-system authorization policies to the converted Tar service. This was implemented with an authorization manager that inherits from the Java SecurityManager [30], ensuring accurate modeling of system-level access control in Java.

The TMI reference monitor is invoked whenever files are opened for reading or writing. It can perform authorization checks lazily or in an overlapped fashion by copying security-relevant metadata, including the Java stack-based security context, into an introspection log.

We used our implementation for lazy and overlapped enforcement of existing Java stack inspection security policies, using java.security.AllPermission, the simplest policy available for Java stack inspection. Coupled with overlapped enforcement, more complex policies could amplify the trends shown in our experiments, potentially allowing more work to be performed in parallel with the main execution.

### 5.3 FreeCS: A Chat Server
FreeCS is a Java-based chat server consisting of about 22,000 lines of code [26]. It allows users to broadcast messages, which are visible to all other users in the same group (equivalent to a chat room). Users can issue various commands via the FreeCS interface, including joining new groups, inviting others, and banning members. FreeCS supports 47 such commands.

Each FreeCS user is associated with a privilege level (e.g., Super-User, Guest, Punished, Banned), and the set of commands a user can issue depends on these privileges. Groups can be Open or Locked; users can freely join Open groups, while special privileges are required for Locked groups. FreeCS enforces several policies on users and groups, but these policies are hard-coded using language constructs like if-then-else.

We ported FreeCS to use TMI-based authorization policy enforcement. The TMI reference monitor replaced FreeCS’s enforcement mechanisms for several commands and augmented it to enforce additional policies:
1. Punished users are disallowed from joining other groups.
2. Superusers are disallowed from joining a Locked group.
3. The number of users who can join a group is bounded.

Our implementation uses the XACML framework to express FreeCS authorization policies. If a user is not authorized to perform an operation, FreeCS rolls back the failed operation and sends a failure message to the user, requiring no additional failure-handling code.

Overall, our port of FreeCS to use TMI-based enforcement required about 860 changes in seven classes, introducing transactions for all 47 FreeCS client requests. Most changes involved replacing reads/writes of transactional objects with DSTM2 accessor functions. Several security-relevant operations in FreeCS consisted of multiple low-level object accesses, so we supplied the TMI reference monitor with fingerprints to recognize these operations. These fingerprints are sensitive to the order of accesses, and we used introspection logs as the basis for TMI-based enforcement.

### 5.4 WeirdX: A Window Management Server
WeirdX is a Java-based X window server consisting of about 27,000 lines of code [39]. It supports the X protocol, allowing X clients to connect and communicate with each other and with WeirdX similarly to the X11 server [60].

Like the X11 server, WeirdX does not enforce any policies on X clients, making it vulnerable to malicious clients accessing or modifying resources belonging to other clients. Prior work has highlighted the need for window management servers to enforce authorization policies to prevent such attacks [40].

We ported WeirdX to enforce authorization policies using TMI, formulating and enforcing several policies discussed in prior work [40], including preventing a rogue X client from killing arbitrary X clients and mediating copy/paste operations. For example, we enforced the Bell-LaPadula policy on how data copied from an X client can be pasted to other X clients. Our port of WeirdX required about 4,800 changes in 25 classes, introducing 108 transactions to the code that dispatches X protocol requests to handlers. We also modified WeirdX to buffer writes that happen within transactions, flushing the buffers only upon a transaction commit.

### 5.5 Performance
We evaluated the performance of three variants of the GradeSheet, Tar, FreeCS, and WeirdX servers:
1. **No-STM**: Unmodified server.
2. **STM-only**: Server ported to use unmodified DSTM2 for concurrency control.
3. **STM-TMI**: Server ported to use our modified DSTM for concurrency control and TMI-based authorization.

In the STM-TMI variant, each client request is handled as an STM transaction, with the TMI reference monitor mediating all access to security-relevant resources and a server authorization manager performing security checks. The same authorization policy is enforced in all three server variants, with the STM-TMI variant using our added TMI-based enforcement mechanisms.

For the STM-TMI variant, we ran three experiments using eager, lazy, and overlapped authorization managers. Figure 7 reports the arithmetic mean of the measured wall-clock execution time for handling client requests, archiving files, adding a user to a FreeCS forum, and creating and mapping subwindows.

These experiments included no contention and no authorization failures, running on a quiescent system with Intel Core 2 Duo processors. As Figure 7 shows, lazy TMI enforcement (STM-TMI/Lazy) incurs acceptable overheads—under 21% in all cases. Eager TMI-based enforcement (STM-TMI/Eager) has even lower overhead for GradeSheet and Tar, but results in significant slowdowns for FreeCS and WeirdX due to complex fingerprint matching. Overlapped TMI enforcement (STM-TMI/Overlapped) creates a thread for each transaction, leading to significant overhead for short transactions but potential speedups for longer ones.

### 6. Related Work
We focus our discussion of related work on four areas: applications of transactions to security, comparing TMI and virtual machine introspection, work on exception handling and recovery, and aspect-oriented software development.

**Applications of Transactions to Security:**
- **Clark and Wilson’s Model:** Defined in terms of separation of duty and well-formed transactions, our TMI-based approach ensures that transactions never commit unless all actions are authorized and data integrity is maintained.
- **Vino Operating System:** Used transactions to isolate misbehaving or malicious kernel extensions, terminating transactions if they fail or violate system policy. Unlike TMI, Vino used a custom-built transaction manager and relied on transactions for remediation.
- **Chung et al.:** Used transactional memory for thread-safe binary translation and information-flow tracking, primarily to ensure thread-safe access to security metadata.
- **Peyton-Jones and Harris:** Proposed a framework for programmer-supplied data invariants in Haskell STM, evaluated just before a transaction commits. While similar to TMI, it does not support security checks at each access or maintain introspection logs.
- **Locasto et al. (SEAD):** Used transactions to build self-healing software, executing each function as a transaction and rolling back on faults due to bugs or exploits.

In summary, TMI-based authorization has acceptable overhead when applied to servers using STM techniques and can even improve performance. However, simply using DSTM2 for concurrency control results in substantial performance overhead, emphasizing the importance of efficient TMI-based enforcement.