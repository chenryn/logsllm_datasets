claim with the protocol we describe). Basically, any AKE-
secure protocol which achieves implicit authentication but
not explicit authentication will su(cid:14)ce. Here is one possi-
bility: starting with any AKE-secure protocol (cid:25), construct
protocol (cid:25)0 as follows:
(cid:15) Upon receiving message bjm, run protocol (cid:25) on input
message m.
(cid:15) When protocol (cid:25) instructs to send message m, send
message 0jm.
(cid:15) When the protocol has concluded, compute a tem-
porary session key sk0 exactly as directed by (cid:25).
If
all incoming messages were pre-pended by a \0", set
sk = sk0 and accept i(cid:11) directed to by (cid:25). Otherwise,
choose sk at random and accept.
It is easy to see that (cid:25)0 remains AKE-secure. (Informally,
if the adversary sends a message pre-pended with a \1" to
an instance then that instance generates a completely ran-
dom session key;
if the adversary always sends messages
pre-pended with a \0" to some instance then that instance
will essentially just run (cid:25), which is AKE-secure.) It is also
easy to see that (cid:25)0 is not secure against outsider imperson-
ation attacks since an adversary can cause any instance of
any player to accept by simply sending to that instance a
message pre-pended with a \1".
The above protocol does not guarantee agreement, either.
To see this, consider an adversary who acts as a man-in-
the-middle in an honest execution of the protocol between
two parties, but who (cid:13)ips one of the pre-pended bits from
a \0" to a \1". In this case, both players will accept but
will compute di(cid:11)erent session keys with all but negligible
probability.
Ideal Functionality FGKE
FGKE proceeds as follows, running on security parameter k, with players U1; :::; Un, and an ideal adversary S.
Initialization: Upon receiving (sid; pid; new-session) from player Ui for the (cid:12)rst time (where pid is a set of at least
two distinct user identities containing Ui), record (sid; pid; Ui) and send this to S.
In addition, if there are
already jpidj (cid:0) 1 recorded tuples (sid; pid; Uj ) for Uj 2 pid n fUig then store (sid; pid; ready) and send this to S.
Key Generation: Upon receiving a message (ok) from S where there is a recorded tuple (sid; pid; ready), do:
(cid:15) If all U 2 pid are uncorrupted, choose (cid:20)   f0; 1gk and store (sid; pid; (cid:20)).
(cid:15) If any of the U 2 pid are corrupted, wait for S to send a message (key; (cid:20)) and then store (sid; pid; (cid:20)).
Key Delivery: If S sends a message (deliver; Ui) where there is a recorded tuple (sid; pid; (cid:20)) and Ui 2 pid, then send
(sid; pid; (cid:20)) to player Ui. (This message is delivered to Ui immediately, as discussed in the text.)
Player Corruption: If S corrupts Ui 2 pid where there is a recorded tuple (sid; pid; (cid:20)) and message (sid; pid; (cid:20)) has
not yet been sent to Ui, then the adversary is given (cid:20). Otherwise, S is given nothing.
Figure 1: The group key-exchange functionality FGKE .
3. UNIVERSALLY COMPOSABLE GROUP
KEY EXCHANGE PROTOCOLS
In this section, we introduce an ideal functionality for
group key exchange within the UC framework and then show
that any protocol which securely realizes this functionality
is automatically AKE-secure and secure against insider at-
tacks. In the following section, we show an e(cid:14)cient compiler
which converts any AKE-secure group key-exchange proto-
col into a UC-secure group key-exchange protocol.
3.1 Group Key Exchange in the UC Frame›
work
For a general overview of the UC framework, we refer
the reader to [12, 14]; the latter, in particular, focuses on
(two-party) key exchange within the UC framework. In the
UC framework, roughly speaking, a cryptographic task is
de(cid:12)ned by specifying an appropriate ideal-world function-
ality F; a protocol (cid:25) is then said to securely realize the
desired task if the actions of the participants running (cid:25) in
the real world (in the presence of a real-world adversary)
can be appropriately simulated by an ideal-world adversary
having access only to the ideal functionality F (and dummy
parties interacting with F). To formally de(cid:12)ne a notion
of UC-security for group key exchange protocols, then, we
must only specify an appropriate ideal-world functionality
FGKE for group key exchange. This functionality is given
in Figure 1. We now brie(cid:13)y explain the functionality and
describe some choices made in its de(cid:12)nition. (Some of what
follows assumes familiarity with [14].)
The interface. A player Ui runs a group key exchange pro-
tocol with an input of the form (sid; pid; new-session), where
pid is the set of identities of players with whom Ui should
share a session key and sid is a session ID. The local output
of the protocol run by player Ui takes the form (sid; pid; (cid:20))
where (cid:20) 2 f0; 1gk is the session key and k is the security
parameter.
Overview of the functionality. We summarize the func-
tionality as described in Figure 1, providing some commen-
tary along the way. As expected, the functionality begins
with an \initialization" phase in which the functionality
waits to be noti(cid:12)ed by each of the players who are sup-
posed to take part in an execution of the protocol. Once
FGKE receives a noti(cid:12)cation from each of the players | with
identical values of sid and pid | the functionality enters a
\ready" state and informs the adversary to this e(cid:11)ect by
sending the adversary a ready message.
Let jpidj = n. At this point, the n players expected to
take part in the protocol are all ready to receive a key.
However, the functionality does not choose a key until it
receives an ok message from the adversary. The purpose of
the ready/ok messages is to allow the adversary the oppor-
tunity to corrupt players at some point in time after they
have all initiated the protocol, but before the session key
has been generated. (In the real world, this corresponds to
corrupting a player after it and its partners have begun exe-
cution of the protocol, but before any player has generated a
session key.) This \delay" in the functionality seems neces-
sary in order to properly model corruptions that may occur
at any time during execution of the protocol, and indeed |
although omitted there | also seems necessary for the proof
of security in [14].
Once the adversary sends the ok message, the functional-
ity chooses a key. At this point, if none of the players in pid
is corrupted, the session key is chosen uniformly at random
from f0; 1gk. If at least one of the players in pid is corrupted,
the adversary is allowed to choose the value of the session
key, as in [14]. Finally, this key is delivered to the players
according to a scheduling determined by the adversary. In
particular, a key is delivered to a player only when delivery
is requested by the adversary. Once the adversary requests
that the functionality deliver a key to a player, we make the
convention that the key is delivered to this player immedi-
ately. This convention follows the recent revisions of the UC
framework (see [12, footnote 11]), and is di(cid:11)erent (and, in
our mind, more natural) than the de(cid:12)nitional choice made
in [14].3
Multiple sessions and session state corruption. As
discussed in [14], although key-exchange protocols are gen-
erally viewed as handling multiple sessions, it su(cid:14)ces (in the
UC framework) to consider protocols and ideal functional-
3Seemingly, another way to achieve the same e(cid:11)ect would be
to have the functionality output (sid; pid; (cid:20)) (for all players)
immediately, and then have delivery of these messages be
controlled by the adversary. In order to properly model ses-
sion state corruption (see below) as well as forward secrecy,
however, we will require the functionality to \know" when
a message has been delivered to a party.
ities handling only a single session. Universal composition
with joint state (see [14, 15]) can then be used to obtain
the so-called \multi-session" extension which handles mul-
tiple executions of the protocol. An important point is that
for our purposes there is not even any e(cid:14)ciency loss in do-
ing so, since the multi-session extension of an authenticated
key-exchange protocol is the same as the underlying single-
session protocol except that a \multi-session authentication
module" is used. The latter are easy to construct using any
digital signature scheme by concatenating the unique (sub-
)session ID of the current session to any messages that are
signed [15].
Focusing on single-session protocols simpli(cid:12)es the de(cid:12)ni-
tions and the analysis. As discussed in [14], however, doing
so necessitates a slight change in the UC framework itself. In
particular, when considering the multi-session extension of
FGKE one needs to augment the basic UC model with a no-
tion of session-state corruption which is intended to capture
the same sort of attacks modeled by the Reveal oracle in the
de(cid:12)nition of AKE-security. (In the \standard" UC frame-
work there is no notion of obtaining the state of a player
without fully corrupting the player, nor is it possible for the
adversary to obtain the state of a player for only a subset
of that player’s executions.) Such session state corruption
is not explicit in Figure 1 since that (cid:12)gure presents only the
single-session version of the functionality.
Perfect forward secrecy. Perfect forward secrecy is the
notion that corruption of a player should not reveal previ-
ous session keys generated by that player. We have already
noted above (and in footnote 3) that the presence of the \key
delivery" phase of FGKE , and the convention by which mes-
sages from FGKE are delivered immediately, are intended to
ensure that FGKE \knows" when messages have been deliv-
ered, and we have claimed that such knowledge is helpful for
an accurate modeling of forward secrecy. We now explain
why this is so.
Notice that if a player is corrupted after having output the
session key (in some execution of the protocol), then forward
secrecy requires that the adversary not be able to learn the
value of the session key output by Ui in that execution. Since
the functionality FGKE is \aware" of when a player outputs
the session key (since that player outputs the session key
immediately after receiving (sid; pid; (cid:20)) from FGKE , and this
message is received by Ui immediately after FGKE sends it),
FGKE can give the appropriate information to the adversary
when a corruption occurs.
In particular, if the adversary
corrupts a player after the session key has been sent to that
player (corresponding to a corruption in the real world after
the player has output a session key), the adversary is given
nothing.
UC-secure channels.
It should be possible to de(cid:12)ne a
notion of UC-secure (group) channels, following [14] who
de(cid:12)ne such a notion for the two-party case. We leave this
for future work.
3.2 Relation to Previous De(cid:2)nitions
We say a group key exchange protocol is UC-secure if it
securely realizes the (multi-session extension of) ideal func-
tionality FGKE . In other words, for any adversary A there
exists an ideal adversary S such that no ppt environment Z
can determine whether it is interacting with A and players
running the protocol in the real world, or whether it is in-
teracting with S and \dummy" players communicating with
(the multi-session extension of) ideal functionality FGKE in
the ideal world. The following claims serve as useful \sanity
checks" for our de(cid:12)nition:
Claim 2. Any UC-secure group key-exchange protocol is
AKE-secure (in the strong corruption model).
The proof, which is omitted for lack of space, is quite straight-
forward and is very similar to the proof of the analogous
result in the two party setting [14].
Claim 3. Any UC-secure group key-exchange protocol is
secure against insider attacks. That is, it is secure against
insider impersonation attacks and guarantees agreement.
The intuition behind the proof of this claim, which is again
omitted due to lack of space, is rather straightforward given
the de(cid:12)nition of the ideal functionality in Figure 1. The
main idea is that if a protocol is not secure against insider
attacks, then there exists an adversary A which violates se-
curity against insider attacks when attacking this protocol.
We use A along with an appropriate environment Z to dis-
tinguish interactions of A in the real world from interactions
of any adversary S in the ideal world, thus proving that the
protocol is not UC-secure.
4. CONSTRUCTING UC›SECURE PROTO›
COLS
We have already shown (cf. Claims 1{3) that UC-security
is strictly stronger than AKE-security. We describe here,
however, how any AKE-secure protocol (cid:25) can be compiled
to give a UC-secure protocol (cid:25)0. Our compiler is essentially
the one suggested (without proof) in the full version of [23,
Section 2.1] but is fundamentally di(cid:11)erent | although sim-
ilar in spirit | from the compiler analyzed in [14]. Speci(cid:12)-
cally, as pointed out in the Introduction, the compiler of [14]
authenticates an \ack" message using a MAC keyed with a
session key known to all parties participating in the proto-
col. Such an approach would simply not work in our setting,
since a malicious insider would know the value of this session
key and hence be able to impersonate the \ack" message of
other (honest) players. Instead, our compiler uses a long-
term signature scheme to sign an \ack" message of a sim-
ilar sort. We have mentioned already in the Introduction,
though, that certain additional technicalities arise. We set
the stage for dealing with these in the following section.
4.1 Technical Preliminaries
Let (cid:6) = (Gen; Sign; Vrfy) be a signature scheme which
is existentially unforgeable against adaptive chosen-message
attack. We also use a pseudorandom function family [22]
F with the additional guarantee of what we term collision-
resistance:
informally, this means that there exists a value
v0 such that no e(cid:14)cient adversary can (cid:12)nd two di(cid:11)erent keys
s; s0 such that Fs(v0) = Fs0 (v0). Formally:
De(cid:12)nition 4 Let F = fF kg with F k = fFsgs2f0;1gk be