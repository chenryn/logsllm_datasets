title:How Does Blockchain Security Dictate Blockchain Implementation?
author:Andrew Lewis-Pye and
Tim Roughgarden
How Does Blockchain Security Dictate Blockchain
Implementation?
Andrew Lewis-Pye
London School of Economics
PI:EMAIL
Tim Roughgarden
Columbia University
PI:EMAIL
ABSTRACT
Blockchain protocols come with a variety of security guarantees.
For example, BFT-inspired protocols such as Algorand1 tend to be
secure in the partially synchronous setting, while longest chain
protocols like Bitcoin will normally require stronger synchronicity
to be secure. Another fundamental distinction, directly relevant to
scalability solutions such as sharding, is whether or not a single
untrusted user is able to point to certificates, which provide incon-
trovertible proof of block confirmation. Algorand produces such
certificates, while Bitcoin does not. Are these properties accidental?
Or are they inherent consequences of the paradigm of protocol
design? Our aim in this paper is to understand what, fundamen-
tally, governs the nature of security for permissionless blockchain
protocols. Using the framework developed in [12], we prove general
results showing that these questions relate directly to properties of
the user selection process, i.e. the method (such as proof-of-work
or proof-of-stake) which is used to select users with the task of
updating state. Our results suffice to establish, for example, that the
production of certificates is impossible for proof-of-work protocols,
but is automatic for standard forms of proof-of-stake protocols. As a
byproduct of our work, we also define a number of security notions
and identify the equivalences and inequivalences among them.
CCS CONCEPTS
• Computer systems organization → Dependable and fault-
tolerant systems and networks.
KEYWORDS
blockchain; cryptocurrencies; proof-of-work; proof-of-stake; Byzan-
tine fault tolerant; longest-chain
ACM Reference Format:
Andrew Lewis-Pye and Tim Roughgarden. 2021. How Does Blockchain
Security Dictate Blockchain Implementation? . In Proceedings of the 2021
ACM SIGSAC Conference on Computer and Communications Security (CCS
’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York,
NY, USA, 14 pages. https://doi.org/10.1145/3460120.3484752
1For an exposition of Algorand that explains how to achieve security in the partially
synchronous setting, see [7].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484752
1 INTRODUCTION
Paradigms for blockchain protocol design. In the wake of Bitcoin
[14], thousands of cryptocurrencies have flooded the market. While
many of these currencies use only slight modifications of the Bitcoin
protocol, there are also a range of cryptocurrencies taking radically
different design approaches. Two informal distinctions are between:
(1) Proof-of-stake (PoS)/proof-of-work (PoW). In a PoW proto-
col, users are selected and given the task of updating state,
with the probability any particular user is chosen being pro-
portional to their (relevant) computational power. In PoS
protocols, users are selected with probability depending on
their stake (owned currency).
(2) BFT2/longest-chain. As well as being a PoW protocol, Bitcoin
is the best known example of a longest chain protocol. This
means that forks may occur in the blockchain, but that honest
miners will build on the longest chain. In a BFT protocol, on
the other hand, users are selected and asked to carry out a
consensus protocol designed for the permissioned setting. So,
roughly, longest chain protocols are those which are derived
from Bitcoin, while BFT protocols are derived from protocols
designed in the permissioned setting. Algorand [8] is a well
known example of a BFT protocol.
A formal framework for comparing design paradigms [12]. While
informal, these distinctions are more than aesthetic. For example,
BFT protocols like Algorand will tend to give security guarantees
that hold under significantly weaker network connectivity assump-
tions than are required to give security for protocols like Bitcoin.
By developing an appropriate formal framework, it can then be
shown [12] that these differences in security are a necessary conse-
quence of the paradigm of protocol design: The fact that Bitcoin
is a PoW protocol means that it cannot offer the same flavour of
security guarantees as Algorand. A framework of this kind was
developed in [12], according to which permissionless 3 protocols
run relative to a resource pool. This resource pool specifies a balance
for each user over the duration of the protocol execution (such as
hashrate or stake), which may be used in determining which users
are permitted to update state. Within this framework, the idea that
protocols like Bitcoin require stronger connectivity assumptions
for security can be formalised as a theorem asserting that adaptive
2The acronym BFT stands for ‘Byzantine-Fault-Tolerant’.
3In the distributed computing literature, consensus protocols have traditionally been
studied in a setting where all participants are known to each other from the start of
the protocol execution. In the parlance of the blockchain literature, this is referred
to as the permissioned setting. What differentiates Bitcoin [14] from these previously
studied protocols is that it operates in a permissionless setting, i.e. it is a protocol for
establishing consensus over an unknown network of participants that anybody can
join, with as many identities as they like in any role.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1006protocols cannot be partition secure – these terms apply to permis-
sionless blockchain protocols and will be defined formally later on,
but, roughly, they can be summed up as follows:
• Liveness and security are defined in terms of a notion of
confirmation for blocks. A protocol is live if the number of
confirmed blocks can be relied on to increase during ex-
tended intervals of time during which message delivery is
reliable. A protocol is secure if rollback on confirmed blocks
is unlikely.
• Bitcoin being adaptive means that it remains live in the
face of an unpredictable size of resource pool (unpredictable
levels of mining).
• A protocol is partition secure if it is secure in the partially
synchronous setting, i.e. if the rollback of confirmed blocks
remains unlikely even in the face of potentially unbounded
network partitions. The partially synchronous setting will
be further explained and formally defined in Section 2.
This paper: certificates. The way in which Algorand and other
BFT protocols achieve partition security is also worthy of note. For
all such protocols, protection against unbounded network partitions
is provided through the production of certificates: These are sets
of broadcast messages whose very existence suffices to establish
block confirmation and which cannot be produced by a (suitably
bounded) adversary given the entire duration of the execution of
the protocol. Bitcoin does not produce certificates, because the ex-
istence of a certain chain does generally not prove that it is the
longest chain – a user will only believe that a certain chain is the
longest chain until presented with a longer (possibly incompatible)
chain. Algorand does produce certificates, on the other hand, be-
cause the very existence of a valid chain, together with appropriate
committee signatures for all the blocks in the chain, suffices to
guarantee (beyond a reasonable doubt) that the blocks in that chain
are confirmed. We will formally define what it means for a protocol
to produce certificates in Section 3.
The production of certificates is also functionally useful, beyond
providing security against network partitions. The production of
certificates means, for example, that a single untrusted user is able
to convince another user of block confirmation (by relaying an
appropriate certificate), and this is potentially very useful in the
context of sharding. If a user wishes to learn the state of a blockchain
they were not previously monitoring, then it is no longer neces-
sary to perform an onboarding process in which one samples the
opinions of users until such a point that it is likely that at least one
of them was ‘honest’ – one simply requests a certificate proving
confirmation for a recently timestamped block.4
1.1 Overview of results.
The goal of this paper is to rigorously investigate to what extent
today’s protocols “have to look the way they are” given the secu-
rity guarantees they achieve. Such formal analyses are relevant to
the broader research community for several reasons, including: (i)
accurate intuitions of the community (e.g., that there’s fundamen-
tally only one way to achieve certain properties) can be formally
validated, with the necessary assumptions clearly spelled out; (ii)
4Such techniques can avoid the need to store block hashes in a sharding ‘main chain’,
and the information withholding attacks that come with those approaches.
inaccurate intuitions can be exposed as such; (iii) unexplored areas
of the protocol design space can naturally rise to the surface (e.g.,
Section 5.2); and (iv) new definitions (e.g., certificates) can enhance
our language for crisply describing and comparing competing solu-
tions (both present and future). In this paper, we prove three main
results, which each address this issue in a different setting.
The partially synchronous setting. The first key question is:
Q1. Are certificates fundamental to partition security, or an ar-
tifact of Algorand’s specific implementation? That is, are
certificates the only way for permissionless blockchain pro-
tocols to achieve security in the partially synchronous set-
ting?
Our first main result, proved in the context of the framework of
[12], gives an affirmative response to Q1. Of course, all terms will
be explained and formally defined in later sections.
THEOREM 3.3. If a permissionless blockchain protocol is secure in
the partially synchronous setting, then it produces certificates.
Since it will be easily observed that the production of certificates
implies security, Theorem 3.3 shows that, in the partially synchro-
nous setting, the production of certificates is actually equivalent to
security.
The synchronous setting. What about Bitcoin? While Bitcoin
does not satisfy the conditions of Theorem 3.3, it clearly has some
non-trivial security. The standard formalisation in the literature
[10, 17] is that Bitcoin is secure in the synchronous setting, for which
there is an upper bound on message delivery time.5 Even working
in the synchronous setting, though, it is clear that Bitcoin does
not produce certificates. Again, we are led to ask whether this is a
necessary consequence of the paradigm of protocol design:
Q2. Could there be a Bitcoin-like protocol that, at least in the
synchronous setting, has as strong a security guarantee in
terms of the production of certificates as BFT-type protocols
do in the partially synchronous setting?
The answer depends on key features of the resource pool – recall
that the resource pool specifies a balance for each user over the
duration of the protocol execution, such as hashrate or stake. The
crucial distinction here is between scenarios in which the size of
the resource pool is known (e.g. PoS), and scenarios where the size
of the resource pool is unknown (e.g. PoW). As per the framework
in [12], we will refer to these as the sized and unsized settings,
respectively – formal definitions will be given in Section 5. As
alluded to above, we define a protocol to be adaptive if it is is live in
the unsized setting, and it was shown in [12] that adaptive protocols
cannot be secure in the partially synchronous setting.
The synchronous and unsized setting. The term “non-trivial
adversary”, which is used in Theorem 5.1 below, will be defined in
Section 5 so as to formalise the idea that the adversary may have at
least a certain minimum resource balance throughout the execution.
With these basic definitions in place, we can then give a negative
answer to Q2.
5The synchronous setting will be further explained and formally defined in Section 2.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1007THEOREM 5.1 Consider the synchronous and unsized setting. If a
permissionless blockchain protocol is live then, in the presence of a
non-trivial adversary, it does not produce certificates.
So, while Theorem 3.3 showed that the production of certificates
is necessary in the partially synchronous setting, Theorem 5.1 shows
that the production of certificates isn’t possible in the unsized setting
(in which PoW protocols like Bitcoin operate). Following on from
our previous discussion regarding the relevance of certificates to
sharding, one direct application of this result is that it rules out
certain approaches to sharding for PoW protocols.
The synchronous and sized setting. In the sized setting (such
as for PoS protocols), though, it is certainly possible for protocols
to produce certificates. It therefore becomes a natural question to
ask how far we can push this:
Q3. Does the production of certificates come down purely to
properties of the process of user selection? Is it simply a
matter of whether one is in the sized or unsized setting?
Our final theorem gives a form of positive response to Q3. We state
an informal version of the theorem below. A formal version will be
given in Section 5.
THEOREM 5.6 (INFORMAL VERSION). Consider the synchronous
and sized setting, and suppose a permissionless blockchain protocol is
of ‘standard form’. Then there exists a ‘recalibration’ of the protocol
which produces certificates.
Theorem 5.6 says, in particular, that all ‘standard’ PoS protocols
can be tweaked to get the strongest possible security guarantee,
since being of ‘standard form’ will entail satisfaction of a number
of conditions that are normal for such protocols. Roughly speaking,
one protocol will be considered to be a recalibration of another if
running the former just involves running the latter for a computable
transformation of the input parameters and/or using a different
notion of block confirmation. The example of Snow White [3] may
be instructive here (for the purposes of this example, the particulars
of the Snow White protocol are not important – all that matters is
that, at a high level, Snow White might be seen as a PoS version
of Bitcoin, but with the fundamental differences that it operates
in the sized setting, and that blocks have non-manipulable times-
tamps). Snow White is a PoS longest chain protocol, and it is not
difficult to see that, with the standard notion of confirmation, it
does not produce certificates – an adversary can produce chains
of blocks which are not confirmed, but which would be considered
confirmed in the absence of other blocks which have been broad-
cast. So whether a block is confirmed depends on the whole set of
broadcast messages. On the other hand, it is also not difficult to