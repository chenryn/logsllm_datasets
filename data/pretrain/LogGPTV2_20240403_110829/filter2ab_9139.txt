### Title: NoJITsu: Locking Down JavaScript Engines at Black Hat US-20

**Abstract:**

Data-only attacks against dynamic scripting environments have become increasingly prevalent. Modern web browsers and other applications often embed scripting engines to support interactive content, and these engines optimize performance through just-in-time (JIT) compilation. As applications are becoming more resilient to code-reuse attacks, adversaries are now targeting the corruption of sensitive data, such as the intermediate representation (IR) used by optimizing JIT compilers, to achieve code execution or privilege escalation.

While numerous defenses have been developed for JIT compilers, our research demonstrates that securing JIT compilation alone is insufficient. We present a proof-of-concept data-only attack against a recent version of Mozilla's SpiderMonkey JIT, where the attacker corrupts heap objects to successfully issue a system call from within bytecode execution at runtime. This finding challenges the assumption that bytecode execution is inherently safe, as interpreters typically allow only a narrow set of benign instructions and validate bytecode before execution.

To address this vulnerability, we introduce NOJITSU, a novel defense mechanism designed to protect complex, real-world scripting engines from data-only attacks on interpreted code. The core concept of NOJITSU is to implement fine-grained memory access control for individual memory regions based on their roles throughout the JavaScript lifecycle. We achieve this by combining automated analysis, instrumentation, compartmentalization, and Intel's Memory-Protection Keys (MPK).

Our implementation of NOJITSU has been thoroughly tested using various real-world scenarios and standard benchmarks. The results show that NOJITSU effectively thwarts both code-reuse and data-only attacks against any part of the scripting engine, while incurring only a modest runtime overhead of 5%.

**Key Contributions:**
1. **Proof-of-Concept Attack:** Demonstrates a data-only attack on Mozilla's SpiderMonkey JIT, challenging the safety assumptions of bytecode execution.
2. **NOJITSU Defense Mechanism:** A comprehensive solution that combines multiple security techniques to protect against data-only attacks.
3. **Fine-Grained Memory Access Control:** Utilizes Intel's MPK to enforce strict memory access policies based on the role of each memory region.
4. **Extensive Testing and Validation:** Rigorous testing with real-world scenarios and benchmarks, ensuring robust protection with minimal performance impact.

**Conclusion:**

NOJITSU represents a significant advancement in the defense against data-only attacks in JavaScript engines. By addressing the vulnerabilities in both JIT and interpreted code, NOJITSU provides a robust and efficient solution to enhance the security of modern web applications.