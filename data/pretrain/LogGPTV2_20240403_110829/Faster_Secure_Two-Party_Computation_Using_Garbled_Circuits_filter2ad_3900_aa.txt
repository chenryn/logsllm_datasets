title:Faster Secure Two-Party Computation Using Garbled Circuits
author:Yan Huang and
David Evans and
Jonathan Katz and
Lior Malka
Faster Secure Two-Party Computation Using Garbled Circuits
Yan Huang
David Evans
University of Virginia
Jonathan Katz
University of Maryland
Lior Malka
Intelࢩ
http://MightBeEvil.org
Abstract
Secure two-party computation enables two parties to
evaluate a function cooperatively without revealing to ei-
ther party anything beyond the function’s output. The
garbled-circuit technique, a generic approach to secure
two-party computation for semi-honest participants, was
developed by Yao in the 1980s, but has been viewed
as being of limited practical signiﬁcance due to its in-
efﬁciency. We demonstrate several techniques for im-
proving the running time and memory requirements of
the garbled-circuit technique, resulting in an implemen-
tation of generic secure two-party computation that is
signiﬁcantly faster than any previously reported while
also scaling to arbitrarily large circuits. We validate our
approach by demonstrating secure computation of cir-
cuits with over 109 gates at a rate of roughly 10 µs per
garbled gate, and showing order-of-magnitude improve-
ments over the best previous privacy-preserving proto-
cols for computing Hamming distance, Levenshtein dis-
tance, Smith-Waterman genome alignment, and AES.
1
Introduction
Secure two-party computation enables two parties to
evaluate an arbitrary function of both of their inputs with-
out revealing anything to either party beyond the output
of the function. We focus here on the semi-honest set-
ting, where parties are assumed to follow the protocol
but may then attempt to learn information from the pro-
tocol transcript (see further discussion in Section 1.2).
There are two main approaches to constructing proto-
cols for secure computation. The ﬁrst approach exploits
speciﬁc properties of f to design special-purpose proto-
cols that are, presumably, more efﬁcient than those that
would result from generic techniques. A disadvantage of
this approach is that each function-speciﬁc protocol must
be designed, implemented, and proved secure.
ࢩWork done while at the University of Maryland.
The second approach relies on completeness theorems
for secure computation [7, 8, 34] which give protocols
for computing any function f starting from a Boolean-
circuit representation of f . This generic approach to se-
cure computation has traditionally been viewed as being
of theoretical interest only since the protocols that result
require several symmetric-key operations per gate of the
circuit being executed and the circuit corresponding to
even a very simple function can be quite large.
Beginning with Fairplay [22], several implementa-
tions of generic secure two-party computation have been
developed in the past few years [11, 21, 27] and used
to build privacy-preserving protocols for various func-
tions (e.g., [4,13,16,26,29]). Fairplay and its successors
demonstrated that Yao’s technique could be implemented
to run in a reasonable amount of time for small circuits,
but left the impression that generic protocols for secure
computation could not scale to handle large circuits or in-
put sizes or compete with special-purpose protocols for
functions of practical interest.
Indeed, some previous
works have explicitly rejected garbled-circuit solutions
due to memory exhaustion [16, 26].
The thesis of our work is that design decisions made
by Fairplay, and followed in subsequent work, led re-
searchers to severely underestimate the applicability of
generic secure computation. We show that protocols con-
structed using Yao’s garbled-circuit technique can out-
perform special-purpose protocols for several functions.
1.1 Contributions
We show a general method for implementing privacy-
preserving applications using garbled circuits that is both
faster and more scalable than previous approaches. Our
improvements are of two types: we improve the efﬁ-
ciency and scalability of garbled circuit execution itself,
and we provide a ﬂexible framework that allows pro-
grammers to optimize various aspects of the circuit for
computing a given function.
Hamming Distance (900 bits)
Online Time
Overall Time
0.310 s [26]
213 s [26]
0.051 s
4176
Best Previous
Our Results
Speedup
0.019 s
16.3
Levenshtein Distance
AES
Overall Time† Overall Time‡ Online Time Overall Time
92.4 s
4.1 s
22.5
534 s
18.4 s
29
0.4 s [11]
0.008 s
50
3.3 s [11]
0.2 s
16.5
Table 1: Performance comparisons for several privacy-preserving applications.
† Inputs are 100-character strings over an 8-bit alphabet. The best previous protocol is the circuit-based protocol of [16].
‡ Inputs are 200-character strings over an 8-bit alphabet. The best previous protocol is the main protocol of [16].
Garbled-circuit execution. In previous garbled-circuit
implementations including Fairplay, the garbled circuit
(whose length is several hundreds bits per binary gate)
is fully generated and loaded in memory before circuit
evaluation starts. This impacts both the efﬁciency of the
resulting implementation and severely limits its scalabil-
ity. We observe that it is unnecessary to generate and
store the entire garbled circuit at once. By topologically
sorting the gates of the circuit and pipelining the process
of circuit generation and evaluation we can signiﬁcantly
improve overall efﬁciency and scalability. Our imple-
mentation never stores the entire garbled circuit, thereby
allowing it to scale to effectively an unlimited number of
gates using a nearly constant amount of memory.
We also employ all known optimizations,
includ-
ing the “free XOR” technique [18], garbled-row reduc-
tion [27], and oblivious-transfer extension [14]. Sec-
tion 2 provides cryptographic background and explains
the protocol and optimizations we use.
Programming framework. Developing and debugging
privacy-preserving applications using existing compil-
ers is tedious, cumbersome, and slow. For example, it
takes several hours for Fairplay to compile an AES pro-
gram written in SFDL, even on a computer with 40 GB
of memory. Moreover, the high-level programming ab-
straction provided by Fairplay and other tools for secure
computation obscures important opportunities for gener-
ating more compact circuits. Although this design de-
cision stems from the worthy goal of providing a high-
level programming interface for secure computation, it is
severely detrimental to performance. In particular, exist-
ing compilers (1) automatically garble the entire circuit,
even when portions of the circuit can be computed lo-
cally without compromising privacy; (2) use more gates
than necessary, since they always use the maximum num-
ber of bits needed for a particular variable, even when the
number of bits needed at some intermediate stage might
be signiﬁcantly lower; (3) miss important opportunities
to replace general gates with XOR gates (which can be
garbled “for free” [18]); and (4) miss opportunities to use
special-purpose (e.g., multiple input/output) gates that
may be more efﬁcient than binary gates. TASTY [11]
provides a bit more control, by allowing the programmer
to decide when to use depth-2 arithmetic circuits (which
can be computed using homomorphic encryption) rather
than Boolean circuits. However, this is not enough to
support many important circuit optimizations and there
are limited places where using homomorphic encryption
improves performance over an efﬁcient garbled-circuit
implementation.
We present a new method and supporting framework
for generating efﬁcient protocols for secure two-party
computation. Our method enables programmers to gen-
erate a secure protocol computing some function f from
an existing (insecure) implementation of f , while pro-
viding enough control over the circuit design to enable
key optimizations to be employed. Our approach al-
lows users to write their programs using a combination
of high-level and circuit-level Java code. Programmers
need to be able to design Boolean circuits, but do not
need to be cryptographic experts. Our framework en-
ables circuits to be built and evaluated modularly. Hence,
even very complex circuits can be generated, evaluated,
and debugged. This also provides the programmer with
opportunities to introduce important circuit-level opti-
mizations. Although we hope that such optimizations
can eventually be done automatically by sophisticated
compilers, our emphasis here is on providing a frame-
work that makes it easy to implement privacy-preserving
applications. Section 3 provides details about our imple-
mentation and efﬁciency improvements.
Results. We explore applications of our framework
to several problems considered in prior work including
secure computation of Hamming distance (Section 4)
and Levenshtein (edit) distance (Section 5), privacy-
preserving genome alignment using the Smith-Waterman
algorithm (Section 6), and secure evaluation of the AES
block cipher (Section 7). As summarized in Table 1, our
implementation yields privacy-preserving protocols that
are an order of magnitude more efﬁcient than prior work,
in some cases beating even special-purpose protocols de-
signed (and claimed) to be more efﬁcient than what could
be obtained using a generic approach.1
1Results for the Smith-Waterman algorithm are not included in the
table since there is no prior work for meaningful comparison, as we
discuss in Section 6.
1.2 Threat Model
In this work we adopt the semi-honest (also known as
honest-but-curious) threat model, where parties are as-
sumed to follow the protocol but may attempt to learn
additional information about the other party’s input from
the protocol transcript. Although this is a very weak
security model, it is a standard security model for se-
cure computation, and we refer the reader to Goldreich’s
text [7] for details.
Studying protocols in the semi-honest setting is rele-
vant for two reasons:
ࢫ There may be instances where a semi-honest threat
model is appropriate:
(1) when parties are legit-
imately trusted but are prevented from divulging
information for legal reasons, or want to protect
against future break-ins; or (2) where it would be
difﬁcult for parties to change the software without
being detected, either because software attestation
is used or due to internal controls in place (for ex-
ample, when parties represent corporations or gov-
ernment agencies).
ࢫ Protocols for the semi-honest setting are an impor-
tant ﬁrst step toward constructing protocols with
stronger security guarantees. There exist generic
ways of modifying the garbled-circuit approach to
give covert security [1] or full security against ma-
licious adversaries [19, 20, 25, 30].
Further, our implementation could be modiﬁed eas-
ily so as to give meaningful privacy guarantees even
against malicious adversaries. Speciﬁcally, consider a
setting in which only one party P2 (the circuit evaluator;
see Section 2.1) receives output, and the protocol is im-
plemented not to reveal to the other party P1 anything
about the output (including whether or not the protocol
completed successfully). If an oblivious-transfer proto-
col with security against malicious adversaries is used
(see Section 2.2), our implementation achieves full se-
curity against a malicious P2 and privacy against a ma-
licious P1.
In particular, neither party learns anything
about the other party’s inputs beyond what P2 can infer
about P1’s input from the revealed output. Understand-
ing how much private information the output itself leaks
is an important and challenging problem, but outside the
scope of this paper.
Note that this usage of our protocols provides privacy,
but does not provide any correctness guarantees. A mali-
cious generator could construct a circuit that produces an
incorrect result without detection. Hence, this approach
is insufﬁcient for scenarios where the circuit generator
may be motivated to trick the evaluator by producing
an incorrect result. Such scenarios would require fur-
ther defenses, including mechanisms to prevent parties
from lying about their inputs. Many interesting privacy-
preserving applications do have the properties needed for
our approach to be effective. Namely, (1) both parties
have a motivation to produce the correct result, and (2)
only one party needs to receive the output. Examples
include ﬁnancial fraud detection (banks cooperate to de-
tect fraudulent accounts), personalized medicine (a pa-
tient and drug company cooperate to determine the best
treatment), and privacy-preserving face recognition.
2 Cryptographic Background
This section brieﬂy introduces the cryptographic tools
we use: garbled circuits and oblivious transfer. We adapt
and implement protocols from the literature, and there-
fore do not include proofs of security in this work. The
protocol we implement can be proven secure based on
the decisional Difﬁe-Hellman assumption in the random
oracle model [2].
2.1 Garbled Circuits
Garbled circuits allow two parties holding inputs x and
y, respectively, to evaluate an arbitrary function f xy
without leaking any information about their inputs be-
yond what is implied by the function output. The ba-
sic idea is that one party (the garbled-circuit genera-
tor) prepares an “encrypted” version of a circuit com-
puting f ; the second party (the garbled-circuit evalua-