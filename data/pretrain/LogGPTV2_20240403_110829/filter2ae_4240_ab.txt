案例： GEMCHAIN
合约地址：
如上上图所示，该智能合约中的mintToken函数用于增发代币，但是在增发代币的过程中对于加法操作没有使用SafeMath函数进行数值运算操作，而且也没有使用require对是否发生溢出进行检查，故这里存在溢出风险，如果合约的owner给target增发较多数量的mintedAmount那么将会导致溢出问题的发生。
使用remix演示如下：
###### 编译合约
###### 部署合约
###### 上溢操作
第一次铸币：
首先，我们先调用mintToken函数向地址“0x14723a09acff6d2a60dcdf7aa4aff308fddc160c”铸币，铸币的数量为：
“0x8000000000000000000000000000000000000000000000000000000000000000”即2的255次方
交易日志：
铸币之后地址“0x14723a09acff6d2a60dcdf7aa4aff308fddc160c”的余额为：
为了让其发生溢出，我们还需要向地址“0x14723a09acff6d2a60dcdf7aa4aff308fddc160c”铸币，铸币的数量仍然为：“0x8000000000000000000000000000000000000000000000000000000000000000”即2的255次方，目的就是为了让2的255次方+2的255次方发生溢出，超出uint256的最大范围。下面具体看操作
第二次铸币：
交易日志：
查看余额：
从上面的结果我们可以发现确实发生了溢出！可想而知，如果合约的owner在不校验溢出问题的情况下向某一地址铸币，那么该地址如果发生溢出，那么代币数量将会发生变化，时而出现减少的情况(因为发生溢出)。
#### 特殊情况
有时候你会发现虽然我们看到一个合约当中有整型溢出的风险，例如在transfer函数中未使用require进行溢出校验，同时也没有使用SafeMath函数进行数值运算防护的情形，但是该合约当中已经规定了token的总量(totalSupply)，而且没有铸币函数(mintToken)另外增加代币，那么合约总体来说是安全的，不存在整型溢出，为什么这样说呢？因为你永远都不会发生两个数值相加超过uint256的情况，但是在这中情况下你就应该将目光放到“乘法溢出”或“减法下溢”的问题上来进行查找，审计是否真的不存在“整型溢出”问题。
#### 溢出防御
那么如何防范这种整型溢出问题呢？官方给出的建议是使用OpenZepplin提供的SafeMath函数库进行数值运算操作，使用SafeMath库函数可以有效的对溢出问题进行检查与防范，SafeMath函数库源代码如下：
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.0;
    /**
     * @title SignedSafeMath
     * @dev Signed math operations that revert on error.
     */
    library SignedSafeMath {
        /**
         * @dev Returns the multiplication of two signed integers, reverting on
         * overflow.
         *
         * Counterpart to Solidity's `*` operator.
         *
         * Requirements:
         *
         * - Multiplication cannot overflow.
         */
        function mul(int256 a, int256 b) internal pure returns (int256) {
            return a * b;
        }
        /**
         * @dev Returns the integer division of two signed integers. Reverts on
         * division by zero. The result is rounded towards zero.
         *
         * Counterpart to Solidity's `/` operator.
         *
         * Requirements:
         *
         * - The divisor cannot be zero.
         */
        function div(int256 a, int256 b) internal pure returns (int256) {
            return a / b;
        }
        /**
         * @dev Returns the subtraction of two signed integers, reverting on
         * overflow.
         *
         * Counterpart to Solidity's `-` operator.
         *
         * Requirements:
         *
         * - Subtraction cannot overflow.
         */
        function sub(int256 a, int256 b) internal pure returns (int256) {
            return a - b;
        }
        /**
         * @dev Returns the addition of two signed integers, reverting on
         * overflow.
         *
         * Counterpart to Solidity's `+` operator.
         *
         * Requirements:
         *
         * - Addition cannot overflow.
         */
        function add(int256 a, int256 b) internal pure returns (int256) {
            return a + b;
        }
    }
应用了SafeMath函数的智能合约实例：
可以看到在上面的智能合约当中对于数值运算都使用了SafeMath函数进行操作，而且也使用了require对溢出校验进行防护，总体较为安全。
#### 溢出列表
[https://github.com/BlockChainsSecurity/EtherTokens/blob/6e1e0952bc2a4b213cdc6db6ba7a855d9c776242/GEMCHAIN/mint%20integer%20overflow.md](https://github.com/BlockChainsSecurity/EtherTokens/blob/6e1e0952bc2a4b213cdc6db6ba7a855d9c776242/GEMCHAIN/mint
integer overflow.md)
[https://github.com/dwfault/AirTokens/blob/aff7102887096a6c8d384820835818f445f3401f/Link_Platform__LNK_/mint%20integer%20overflow.md](https://github.com/dwfault/AirTokens/blob/aff7102887096a6c8d384820835818f445f3401f/Link_Platform__LNK_/mint
integer overflow.md)
#### 文末总结
整型溢出问题发生的根源还是在于合约的开发者在开发合约时未考虑到“整型溢出”问题，作为审计人员的我们在看到合约时也要保持清醒，对于存在疑惑的地方应该采用“调试、验证”的方法去排除疑虑，而且在审计的过程中也要十分的认真、细心才可以，不要放过任何一个有可能存在问题的地方，例如修饰器/修饰词对应的权限问题、逻辑处理问题等等。
* * *