If you know how to fix the issue, make a pull request instead.
  * I tried using the `@types/xxxx` package and had problems.
  * I tried using the latest stable version of tsc. https://www.npmjs.com/package/typescript
  * I have a question that is inappropriate for StackOverflow. (Please ask any appropriate questions there).
  * Mention the authors (see `Definitions by:` in `index.d.ts`) so they can respond. 
    * Authors: @johnnyreilly @bbenezech @pzavolinsky @digiguru @ericanderson @DovydasNavickas @theruther4d @guilhermehubner @ferdaber @jrakotoharisoa @pascaloliv @Hotell @franklixuefei @Jessidhia @saranshkataria @lukyth @eps1lon
Hello! I am facing an issue when trying to type the `ref` property of a custom
component.
This is the setup I have:
    // someFile.TS
    // Due to some weird Webpack rules and the app's architecture I have this interface in a file which
    // cannot import the TableComponent from its TableComponent.tsx file.
    // Therefore, I am trying to emulate the end result of the React.createElement function call
    interface ITableComponent {
      tableProps: IlDataTableProps; // This is the only property I need to access
    }
    interface ITableComponentProps {
      ref: React.RefObject
    }
    // someOtherFile.TSX
    class TableComponent extends React.Component implements ITableComponent {}
    // somewhereInTheApp.TSX
    class SomeComponent extends ... {
      tableRef = React.createRef();
      render () {
        return ; // *Read below
      }
    }
*Over here I get the following error:  
![image](https://user-
images.githubusercontent.com/24717857/65044496-ab471f00-d965-11e9-916f-69dc1dde010c.png)
Looking through the type definition of ref I came across this line:
        type Ref = { bivarianceHack(instance: T | null): void }["bivarianceHack"] | RefObject | null;
and this one:
        function createRef(): RefObject;
Seeing as `createRef` returns a T, in my case that should be
`ITableComponent`. And the ref type also has an option of `RefObject`.
However, as the error shows, it looks for something which is `(string &
RefObject)`. I don't understand where that `string &` is coming for and I
also cannot find an explanation why is it needed. To my understanding, the
`string` refs were the first implementation and were deprecated. So why does
that type need to interfere with the `React.RefObject`. Or, if it must
interfere, why is it that the `React.createRef` function is not returning that
`string & RefObject` definition? If I change the definition to that in the
`@types/react/index.d.ts` file everything works as it should.