experiments.
Program annotations foil some of the ways to hide
malware. IFC hampers data exﬁltration. Hiding data-
ﬂow based malware in an application that is annotated
with ﬂow sources and ﬂow sinks turned out to be difﬁcult
for the Red Teams, even though they had access to our
source code, documentation, and our own evaluation of
our system’s limitations.
Generality of our analysis. Our information-ﬂow
based approach turned out to be surprisingly general. Our
toolset revealed malicious data ﬂow of the payload as well
as the injected triggers. We found, for instance, malware
in applications that give wrong results based on a certain
time of day or a random value. Perhaps more importantly,
we were able to easily extend our system as we discovered
new properties that we wished IFC to handle — we did
so over the course of our own usage and also between
batches of malware analysis in the experiments.
of types of malware or its quality. It is also possible that
our tools became tuned to the sort of malware created by
those ﬁve Red Teams.
Skill of the analysts. The same instrument may be
more or less effective depending on who is using it. It is
possible that our team was particularly skilled or lucky in
effectively classifying all the apps that it analyzed — or
that another team would have done a better job. An analyst
needs time to come up to speed on IFC; we have found
that a few weeks is sufﬁcient for an undergraduate work-
ing part time, as conﬁrmed by experiments (Sect. 3.12).
Training only needs to occur once, and our team’s
unfamiliarity with the apps was a bigger impediment.
Collaborative app veriﬁcation model. Our model
assumes that application vendors are willing to anno-
tate their source code. We believe this is true for high-
assurance app stores, but our approach may not be appli-
cable to ordinary app stores.
3.15 Future work
We plan to enrich ﬂow policies in three ways, while re-
taining the simple and high-level ﬂavor of these speciﬁ-
cations. (1) We will reﬁne permissions, such as splitting
the WRITE_CONTACTS permission so that separate policies
can be speciﬁed for email addresses, phone numbers, and
notes ﬁelds. (2) The ﬂow policy will indicate not just the
endpoints of the information ﬂow, but an entire path. For
example, it might be valid to send personal information
to the Internet only if it has passed through an encryption
module ﬁrst. (3) The ﬂow policy will indicate conditional
information ﬂows, such as permitting information ﬂow
from the microphone to the network only when the user
presses the “transmit” button.
We plan to implement a variant of record types, so that
(for example) different parts of a data structure or ﬁle can
be given different information-ﬂow types. We have al-
ready successfully implemented this for Android’s intents,
improving IFC’s analysis of inter-process communication.
3.14 Threats to validity
Our success in the experiments shows promise for our
approach. Nonetheless, we wish to highlight a few of the
most important threats to validity.
Characteristics of malware. The malware we ana-
lyzed was created by ﬁve different teams, each consisting
of multiple engineers working full-time on the task of
creating stealthy malware. The teams had previously
surveyed real malware, and they created malware repre-
sentative both of commercial malware that makes a proﬁt
and advanced persistent threats who aim to steal informa-
tion. Nonetheless, we have no assurance that this malware
was representative of malware in the wild, either in terms
4 Related work
This section discusses the research most closely related
to our approach.
Information ﬂow
4.1
Information ﬂow tracking has been investigated for sev-
eral languages and paradigms [14, 37, 25, 19]. These
approaches are largely complementary to our work as
they are theoretical or do not employ type systems to
achieve static guarantees of information ﬂow properties.
Besides statically verifying properties, several approaches
12
for enforcing information ﬂow properties have been pro-
posed, such as refactoring [41], dynamic analysis [28],
or encoding as safety properties [44, 33]. Milanova and
Huang [30] recently presented a system that combines
information ﬂow with reference immutability to improve
precision. Yet, the system has not been applied in a se-
curity context. Engelhardt et al.[11] discuss handling
intransitive information-ﬂow policies; IFC requires mak-
ing transitive ﬂows explicit. Sun et al. [43] discusses
modular inference for information ﬂow; IFC provides
ﬂow-sensitive type reﬁnement within method bodies.
In the domain of information ﬂow tracking for Java
programs, the closest related work is Jif (Java information
ﬂow) [32, 31, 39]. Jif uses an incompatible extension of
the Java programming language and its own compiler to
express and check information ﬂow properties of a pro-
gram. In contrast, IFC uses standard Java annotations and
the standard Java compiler. Furthermore, IFC achieves its
effects with a simpler, easier-to-use type system. While
Jif focuses on the expressiveness and ﬂexibility of the type
system and trust model, IFC aims at practicality and scal-
ability to be applicable on large real-world Android appli-
cations. Jif has not been evaluated in an adversarial chal-
lenge exercise comparable to our experiments using IFC.
WebSSARI (Web application Security by Static Anal-
ysis and Runtime Inspection) [21] is another related ap-
proach but targets a different domain. WebSSARI focuses
on web applications written in PHP and aims at preventing
vulnerabilities such as Cross-Site Scripting or SQL Injec-
tion. In this context, static analysis is applied to reveal
existing weaknesses and to insert runtime checks. In con-
trast, IFC statically veriﬁes information ﬂow properties
for Android applications.
4.2 Android studies
Many recent research studies have focused on understand-
ing the weaknesses of the Android platform, as well as
characterizing Android malware in the wild. This section
discusses IFC in the context of those prior studies since it
also targets the Android platform.
Recent studies (e.g., [1, 12, 45]) investigated the An-
droid permission system and revealed that many Android
applications are overprivileged, meaning that they are
granted more permissions than they use. These studies
also provided a mapping of API calls to required permis-
sions. IFC utilizes those existing mappings and enhances
the Android permission system by adding ﬁner-grained
sources and sinks for sensitive APIs.
Chin et al. [5] described a weakness caused by the
Android Intent mechanism: implicitly sent intents can
be intercepted by malicious applications. IFC analyzes
communication through intents to mitigate such attacks.
13
4.3 Malware detection and prevention
Ongtang et al. [35] suggest an application-centric secu-
rity model to strengthen Android’s security. The Google
Play Store runs Bouncer to detect and reject malicious
applications. Unfortunately, Bouncer can be circum-
vented [36, 23], which motivates our work.
Tools for detecting or preventing malicious behavior
on smartphones employ static analysis for detection or dy-
namic analysis for both detection and prevention. Wood-
pecker [17] uses static analysis to detect capability leaks
and ComDroid [5] to locate Intent-related vulnerabilities.
In addition, several systems have been proposed to de-
tect the leakage of personal data (e.g., [16, 27]). In this
context, PiOS [9] is a system for the detection of privacy
leaks in iOS Applications, which constructs a control
ﬂow graph from compiled code and performs data ﬂow
analysis. Unlike those existing approaches, IFC uses a
ﬁner-grained model for sources and sinks, operates on
the source code, and is not limited to explicit information
ﬂow. RiskRanker [18] and DroidRanger [53] combine
multiple analyses in an attempt to detect likely malware.
Besides the detection tools, dynamic enforcement tools
have been proposed in the literature that monitor the ex-
ecution of an application at runtime and intervene, if
necessary, to ensure safe behavior. TaintDroid [10] and
DroidScope [49] use taint-tracking to monitor the ﬂow
of sensitive data that is sent from the phone, whereas
AppFence [20] automatically replaces the sensitive data
with innocuous data. Both of these techniques require
modiﬁcation to the Android runtime framework, mak-
ing the approach non-portable. As an alternative Aura-
sium [48] uses inlined dynamic enforcement, which
rewrites the target application to embed runtime checks.
Although inlined dynamic enforcement improves porta-
bility, the performance and code size overhead may affect
its suitability for resource-constrained mobile platforms.
5 Conclusion
We have described IFC, a ﬂow-sensitive, context-sensitive
type system that enables collaborative veriﬁcation of infor-
mation ﬂow properties in Android applications. Its design
focuses on usability and practicality, and it supports a rich
programming model.
We evaluated IFC by analyzing 72 new applications
(57 of them malicious), which were written by 5 different
corporate Red Teams who were not under our control. IFC
detected 96% of the information-ﬂow-related malware
(we explain how to increase this number to 100%), and
82% of all malware. Other experiments show that IFC is
easy to use for both programmers and auditors.
Our system is freely available, including source code,
library API annotations, user manual, and example anno-
tated applications.
6 Acknowledgments
We thank Yoshi Kohno, David Wetherall, Dylan Mc-
Namee, David Naumann, John Singleton, David Brumley,
Zach Tatlock, and Marcelo d’Amorim for helpful discus-
sions.
This material is based on research sponsored by
DARPA under agreement number FA8750-12-2-0107.
The U.S. Government is authorized to reproduce and
distribute reprints for Governmental purposes notwith-
standing any copyright notation thereon.
References
[1] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D. PScout:
Analyzing the Android permission speciﬁcation. In CCS (Oct.
2012), pp. 217–228.
[2] BANERJEE, A., NAUMANN, D. A., AND ROSENBERG, S. Ex-
pressive declassiﬁcation policies and modular static enforcement.
In IEEE Symposium on Security and Privacy (2008), pp. 339–353.
[3] BONNINGTON, C. First instance of iOS app store malware de-
tected, removed, 2012. http://www.wired.com/gadgetlab/
2012/07/first-ios-malware-found/.
[4] BROOKS, JR., F. P. The Mythical Man-Month: Essays on Soft-
ware Engineering. Addison-Wesley, Boston, MA, USA, 1975.
[5] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D. An-
alyzing inter-application communication in Android. In MobiSys
(June 2011), pp. 239–252.
[6] CHONG, S., VIKRAM, K., AND MYERS, A. C. SIF: Enforcing
In USENIX
conﬁdentiality and integrity in web applications.
Security (Aug. 2007).
[7] DENNING, D. E. A lattice model of secure information ﬂow.
CACM 19, 5 (May 1976), 236–243.
[8] DIETL, W., DIETZEL, S., ERNST, M. D., MU ¸SLU, K., AND
SCHILLER, T. Building and using pluggable type-checkers. In
ICSE (May 2011), pp. 681–690.
[9] EGELE, M., KRUEGEL, C., KIRDAZ, E., AND VIGNA, G. PiOS:
Detecting privacy leaks in iOS applications. In NDSS (Feb. 2011).
[10] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J.,
MCDANIEL, P., AND SHETH, A. N. TaintDroid: an information-
ﬂow tracking system for realtime privacy monitoring on smart-
phones. In OSDI (Oct. 2010).
[11] ENGELHARDT, K., VAN DER MEYDEN, R., AND ZHANG, C.
Intransitive noninterference in nondeterministic systems. In ACM
Conference on Computer and Communications Security (2012),
pp. 869–880.
[12] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER,
D. Android permissions demystiﬁed. In CCS (Oct. 2011), pp. 627–
638.
[13] FELT, A. P., FINIFTER, M., CHIN, E., HANNA, S., AND WAG-
NER, D. A survey of mobile malware in the wild. In SPSM (Oct.
2011), pp. 3–14.
[14] FERRARI, E., SAMARATI, P., BERTINO, E., AND JAJODIA, S.
Providing ﬂexibility in information ﬂow control for object-oriented
systems. In IEEE Security and Privacy (May 1997), pp. 130–140.
Proof-of-concept app exploiting iOS se-
in trouble with Apple, 2012.
[15] FORESMAN, C.
curity ﬂaw gets researcher
http://arstechnica.com/apple/2011/11/safari-
charlie-discovers-security-flaw-in-ios-gets-
booted-from-dev-program/.
[16] GIBLER, C., CRUSSELL, J., ERICKSON, J., AND CHEN, H.
AndroidLeaks: Automatically detecting potential privacy leaks
in Android applications on a large scale. In TRUST (June 2012),
pp. 291–307.
[17] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic
detection of capability leaks in stock Android smartphones. In
NDSS (Feb. 2012).
[18] GRACE, M., ZHOU, Y., ZHANG, Q., ZOU, S., AND JIANG, X.
RiskRanker: Scalable and accurate zero-day Android malware
detection. In MobiSys (June 2012), pp. 281–294.
[19] HAMMER, C., KRINKE, J., AND SNELTING, G. Information ﬂow
control for java based on path conditions in dependence graphs.
In ISSSE (Mar. 2006), pp. 87–96.
[20] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND
WETHERALL, D. These aren’t the droids you’re looking for:
Retroﬁtting Android to protect data from imperious applications.
In CCS (Oct. 2011), pp. 639–652.
[21] HUANG, Y.-W., YU, F., HANG, C., TSAI, C.-H., LEE, D.-T.,
AND KUO, S.-Y. Securing web application code by static analysis
and runtime protection. In WWW (May 2004), pp. 40–52.
[22] JONES, C. The Economics of Software Quality. Addison-Wesley,
2011.
[23] KASSNER, M. Google Play: Android’s Bouncer can be pwned.
http://www.techrepublic.com/blog/it-security/-
google-play-androids-bouncer-can-be-pwned/, 2012.
[24] KITCHING, C., AND MCVOY, L.
BK2CVS prob-
lem. http://lkml.indiana.edu/hypermail/linux/kernel/
0311.0/0635.html, 2003.
[25] LI, P., AND ZDANCEWIC, S. Encoding information ﬂow in
Haskell. In CSFW (July 2006), pp. 16–27.
[26] LIU, L., ZHANG, X., YAN, G., AND CHEN, S. Chrome ex-
tensions: Threat analysis and countermeasures. In NDSS (Feb.
2012).
[27] MANN, C., AND STAROSTIN, A. A framework for static detection
of privacy leaks in Android applications. In SAC (Mar. 2012),
pp. 1457–1462.
[28] MASRI, W., PODGURSKI, A., AND LEON, D. Detecting and
debugging insecure information ﬂows. In ISSRE (Nov. 2004),
pp. 198–209.
[29] MCCONNELL, S. Software Estimation: Demystifying the Black
Art. Microsoft Press, 2006.
[30] MILANOVA, A., AND HUANG, W. Composing polymorphic
information ﬂow systems with reference immutability. In FTfJP
(July 2013), pp. 5:1–5:7.
[31] MYERS, A. C. JFlow: Practical mostly-static information ﬂow
control. In POPL (Jan. 1999), pp. 228–241.
[32] MYERS, A. C., ZHENG, L., ZDANCEWIC, S., CHONG, S., AND
NYSTROM, N. Jif: Java + information ﬂow. http://www.cs.
cornell.edu/jif.
[33] NAUMANN, D. A. From coupling relations to mated invariants for
checking information ﬂow. In European Symposium on Research
in Computer Security (ESORICS) (2006), vol. 4189 of LNCS,
pp. 279–296.
[34] OCTEAU, D., MCDANIEL, P., JHA, S., BARTEL, A., BODDEN,
E., KLEIN, J., AND LE TRAON, Y. Effective inter-component
communication mapping in Android with Epicc: An essential
step towards holistic security analysis. In USENIX Security (Aug.
2013), pp. 543–558.
[35] ONGTANG, M., MCLAUGHLIN, S., ENCK, W., AND MC-
DANIEL, P. Semantically rich application-centric security in
Android. In ACSAC (Dec., 2009), pp. 340–349.
14
[36] PEROCO, N. J., AND SCHULTE, S. Adventures in BouncerLand.
In Black Hat USA (July 2012).
[37] POTTIER, F., AND SIMONET, V. Information ﬂow inference for
ML. In POPL (Jan. 2002), pp. 319–330.
[38] RASHID, F. Android malware makes up this week’s dangerous