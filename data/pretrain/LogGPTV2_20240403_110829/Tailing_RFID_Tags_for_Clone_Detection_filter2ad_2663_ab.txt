t
Tail, Pointer
AXC,2
AXY,3
WXY,1
WMY,2
Genuine product
123
123
123
123
Tail, Pointer
Counterfeit
product
Tag trace
(events)
Rule Verification
AMC,2
AML,3
PML,1
123
123
123
Clone
injection
AXC,2
AXY,3
AML,3
WXY,1
PML,1
WMY,2
t0
t1
t2
t3
t4
t5
t6
t
(b)
Figure 2. Rule veriﬁcation on (a) the tag tail
and pointer of a genuine product and (b) the
tails and pointers of a genuine and a coun(cid:173)
terfeit product together. Values are given af(cid:173)
ter a reader updates the tail and pointer.
In
this example, the tail is composed of 3 sym(cid:173)
bols. Each symbol is an 8(cid:173)bit value (exempli(cid:173)
ﬁed with ASCII characters).
Intuitively, a pair of events should reﬂect the results of
valid tag modiﬁcation operations. In particular, a pair com-
posed of two time-consecutive events ei and ei+1, having
tail and tail pointer equal to T Ti and T Pi, and to T Ti+1
and T Pi+1, respectively, is considered correct if and only
if: (i) The symbols in the tail T Ti+1 are the same of those
in T Ti (except in position T Pi+1), and (ii) the tail pointer
T Pi+1 presents a unitary increment with respect to T Pi.
Formally, these two rules are:
( T Ti+1[n] = T Ti[n]
T Pi+1 − T Pi = 1 (mod t),
∀n \ T Pi+1
(1)
where n ranges from 1 to tail size t (in symbols) and T T [n]
indicates the n-th symbol in the tail T T .
Figure 2(a) shows a (genuine) tagged product and its tag
tail and tail pointer when it circulates in an RFID-enabled
supply chain with tailing enabled (the tail and pointer values
are shown after a reader’s update). All the pairs of time-
consecutive events are successfully veriﬁed, i.e., meet the
two above rules. In contrast, Figure 2(b) shows two prod-
ucts with the same tag ID, i.e, a genuine and a counterfeit
Tail, Pointer
AB,1
Genuine product
123
AX,2
123
Tail, Pointer
AB,1
AX,2
Miswrite
HG,2
RG,1
Genuine product
123
123
123
123
RT,2
123
Tail, Pointer
Counterfeit
product
Tag trace
(events)
Rule Verification
AZ,1
AR,2
GR,1
GL,2
AL,1
123
123
123
123
123
Clone
injection
AB,1
AR,2
GR,1
GL,2
AL,1
AX,2
Tail, Pointer
Counterfeit
product
Tag trace
(events)
ED,1
ED,1
123
123
Clone
injection
Misread
Misevent
AB,1
AX,2
WX,1
RG,1
RT,2
t0
t1
t2
t3
t4
t5
t6
t
t0
t1
t2
t3
t4
t5
t6
t
Rule Verification
(a)
(b)
Figure 3. Tailing rule veriﬁcation under (a) false event consistency and (b) weak visibility (misev(cid:173)
ents, miswrites leading to memory corruption, and misreads). To avoid clone evidence, in (a) the
counterfeit tail and pointer at times t1 and t5 have to be correctly set.
product. Due to tail and pointer inconsistencies, some pairs
fail the rule veriﬁcation and show evidence of cloning.
3.3 Main Challenges
There are two main obstacles to successful detection via
tailing: False event consistency, i.e., suppression or loss of
clone evidence, and weak visibility, i.e., event streams that
are fragmentary or error-prone.
False event consistency. Continuously updating tails with
random values makes it difﬁcult for the adversary to guess
tail contents: Even if the adversary knows a tail value at
time ti, at time ti+j, there are j new symbols to guess. Ad-
ditionally, updating the tail and incrementing the pointer in
an ordered sequence builds a relationship between two time-
consecutive events: Any extra adversarial event between
two time-consecutive events will break this relationship, re-
sulting in clone evidence.
An adversary can nonetheless, with some probability,
cancel out clone evidence. This is clearly possible when the
adversary controls all the readers through which a counter-
feit product (or the genuine one) passes. Even if the adver-
sary has no control or partial control of readers, though, a
chance remains that no clone evidence appears. Figure 3(a)
illustrates, given a genuine and a counterfeit product, how
this can happen. If the counterfeit tail and pointer are, by
chance, consistent with the genuine tail and pointer at the
injection time t1 and at time t5, no clone evidence would ap-
pear between events at times t0 and t2, and between events
at times t5 and t6. By controlling only a subset of the read-
ers, an adversary may increase the probability of such de-
tection failure. For example, by controlling the reader that
operates the genuine product at time t0, the adversary would
learn the genuine product tail and pointer and could ensure
consistency at time t1. For the adversary’s clone now to
pass undetected, the adversary would only need the coun-
terfeit tail to be correctly set by chance at time t5. Obvi-
ously, many factors (e.g., tail and symbol sizes) impact the
probability of such undesired chance events.
Weak visibility. Blind zones and reader errors create frag-
mentary and erroneous visibility in the supply chain, mask-
ing evidence of clone tags or creating inconsistencies in the
observed tag paths that lead to false alarms. The causes
of fragmentary and erroneous visibility are misevents, mis-
reads, and miswrites. A misevent occurs when a relevant
event is not available to the detector. Misevents do not
obstruct the tailing operation, i.e., the tag memory is cor-
rectly modiﬁed, but they result in lost events. As shown in
Figure 3(b), this loss creates inconsistencies in tag traces
as two reported time-consecutive events appear as non-
consecutive, potentially raising a false alarm. Misevents
may also mask clone evidence, as may misreads. A mis-
read occurs when a tag passes unnoticed through a reader,
so that no tail update or event creation results. As shown in
Figure 3(b), misreads can lead to missed clones. A miswrite
occurs when a tag write operation fails. Miswrites include
cases when tags (i) reply with a write failure message (tag
memory is not modiﬁed); alternatively, they may not re-
port the result of the write operation and may have: (ii) Not
modiﬁed, (iii) correctly modiﬁed, or (iv) incorrectly modi-
ﬁed (corrupted) the tag memory. When a reader reports a
miswrite by ﬂagging an event as unusable using T F , case
(iii) is comparable to a misevent, while cases (i) and (ii) are
comparable to a misread. As shown in Figure 3(b), case (iv)
creates inconsistencies that potentially raise a false alarm.
4 Overview of Main Results
We evaluate our tailing mechanism in terms of security
and robustness through both an analytic (Section 5) and a
simulation-based (Section 6) study. We also evaluate its
performance in terms of required storage, computational ef-
fort, communication costs, scalability, and tag processing
speed (Section 7). Finally, we compare it against previous
work [24, 36] in a simulation-based study (Section 8).
In our analytic evaluation, we abstract the supply chain
and the product ﬂow into two independent event sequences
associated, respectively, with a genuine product and its
clone. For each of the possible combinations of these se-
quences and a given adversary, we compute the probabil-
ity that a combination does not present any clone evidence.
By summing probabilities across combinations, we quan-
tify the adversary’s success probability in injecting clones,
i.e., the probability that injected clones pass unnoticed by
tailing detection.
In the simulation-based evaluation, we model a sup-
ply chain by its structure (partners and their relationships),
product paths, lead times, and RFID system (readers and
failures). We deploy a custom-built RFID-enabled supply-
chain simulator to generate a ﬂow of products from the
manufacturers (both genuine and counterfeit) to the retail-
ers, and to populate the detector’s database with tag events
recorded by each partner’s reader during the simulation.
We then compute the clone-detection and false-alarm rates
when products leave the chain at the retailers.
Analytic evaluation. We show that our tailing mechanism
drastically limits the adversary’s success probability, even
when the majority of the readers in the clone path have
been compromised. For example, blocking 2, 3, or 4 out
of 5 readers in the clone path leads to an adversary’s suc-
cess probability of 0.81, 3.6, and 12.5% respectively. We
also show that the optimal symbol size is 1 bit, while a
tail larger than 5 symbols does not provide any signiﬁcant
advantage over adversaries that compromise readers. This
means that our mechanism requires a limited tag memory
space as small as 8 bits (5 bits for the tail, 3 bits for the
tail pointer). Additionally, we compute an upper bound on
the adversary’s success probability by considering an adver-
sary that can select the optimal strategy (in terms of read-
ers to compromise and actions to perform) for each injected
clone. Although such a strong and arguably non-realistic
adversary presents high(er) success probabilities, e.g., 15,
52, and 90% when compromising 2, 3, or 4 readers respec-
tively (5 on the clone path), our tailing mechanism is still
able to detect a fraction of the injected clones.
Our mechanism relies on purpose-built, artiﬁcial infor-
mation that is independent from the supply-chain structure
and the product ﬂow. That is, it does not require any pre-
deﬁned (in)correct information such as “Product X has to
go through locations Lx, Ly, and Lz at times tx, ty, and tz.”
Thus our mechanism is unaffected by extraordinary ﬂow
deviations and changes in the supply-chain structure, due,
for example, to product recalls, misdeliveries, and partners
joining and leaving the chain. Although blind zones and
reader failures (i.e., misevents, misreads, and miswrites)
negatively impact our mechanism, we show that it miti-
gates the negative effects of misevents and miswrites (false
alarms) with no (signiﬁcant) increase in the adversary’s suc-
cess probability. Misevents are mitigated by hypothesiz-
ing missing events between two reported time-consecutive
events that present tail and pointer inconsistencies. If there
exists at least one missing event that would resolve these
inconsistencies, the ostensible clone evidence is discarded.
Such ﬂexibility is possible because our tailing mechanism
updates the tail and increments the pointer in an ordered
sequence, allowing for trace reconstruction. Miswrites are
mitigated by speciﬁcally reporting write failures through
an additional event attribute. A reader that does not re-
ceive a correct write response from a tag sets this attribute
in the corresponding event. The detector will then ignore
the inconsistencies resulting from that event and succeed-
ing one. We ﬁnd that misreads create clone misses that may
signiﬁcantly increase the adversary’s success probability.
We show, however, that even for a high number of mis-
reads, our mechanism is still able to detect a portion of the
injected clones. For example, an adversary that compro-
mises 4 out of 5 readers in the clone path presents a suc-
cess probability of 56% even when half of all events are
subject to misreads.
Simulation-based evaluation. We show that our mecha-
nism presents a high detection rate for a relatively low false-
alarm rate, as well as a relatively high detection rate for
a false-alarm rate of 0. For example, in a scenario where
an adversary injects clones with no reader compromise and
more than 60% of all traces contain at least one inconsis-
tency due to misevents, misreads, or miswrites, we observe
detection rates of 93% and 80% for false-alarm rates of
0.95% and 0% respectively. This result holds for differ-
ent supply-chain structures and clone injection rates. We
also show that our mechanism presents good detection and
false-alarm rates in scenarios where a large majority of the
tag traces (85%) present inconsistencies: We observe de-
tection rates of 86% and 64% for false-alarm rates of 2.8%
and 0.01% respectively. We observe that our mechanism is
affected by the length of clone paths: The longer the path,
the higher the number of instances of clone evidence. Even
within scenarios where clone paths are short (e.g., when the
adversary injects at the retailers), our detection mechanism
still provides a high detection rate (>85%) for a relatively
low false-alarm rate (0.95%). We also observe that although
an adversary compromising readers can signiﬁcantly reduce
the detection rate, only controlling the (quasi) totality of all
clone paths leads to no detection at all. For example, in a
simulated scenario with a 15-partner supply chain, we ob-
tain detection rates of 74% and 6% for an adversary con-
trolling 3 and 12 of the 15 partners, respectively.
Performance evaluation. Our mechanism’s resource costs
are independent of the overall number of tags in the system.
Instead, its required storage capacity, computational / ac-
cessing effort, and communication costs are linearly depen-
dent on the number n of events in the traces under evalua-
tion; thus the mechanism’s resource costs also scale linearly
with n. The tag processing speed (i.e., speed at which tag
IDs can be read) is affected by the tailing operation between
a tag and reader, which includes (tail and pointer) read and
write operations on tag memory. Despite the limited tag-
memory requirement of our mechanism, it reduces the nom-
inal tag processing speed in an EPC C1G2-compliant im-
plementation from 24.4/1838 tags/s (lower/upper bound) to
9.6/44.5 tags/s. We argue, however, that tailing can be per-
formed by a few readers in a supply-chain facility (e.g., only
upon product receipt and shipping); thus it is a rare opera-
tion with little overall processing overhead. Consequently,
we believe that tailing promises to be highly scalable in real-
world supply-chain environments.
Comparison. We compare our tailing mechanism against
the mechanisms proposed by Lehtonen et al. [24] and
Zanetti et al. [36]. Our exploration indicates that both mech-
anisms present limitations that make our tailing mechanism
the most suitable solution for scenarios in which inconsis-
tent information may undermine clone detection. This su-
periority holds not only by comparison with the mentioned
mechanisms, but also for their robust variants that we pro-
pose and explore in our evaluation. The mechanism pro-
posed by Lehtonen et al. suffers mainly from false alarms
due to misevents and miswrites. Its robust variant mitigates
miswrite effects, but is not effective against misevents. The
mechanism proposed by Zanetti et al. suffers mainly from
false alarms due to misevents and misreads. Although its ro-
bust variant mitigates both misevent and misread effects, no
improvement in its detection/false-alarm tradeoff results. In
a scenario where an adversary injects clones with no reader
compromise and more than 60% of all traces contain at least
one inconsistency, we observe detection/false-alarm rates of
89%/32%, 94%/16%, and 93%/0.95% for the Lehtonen et
al., the Zanetti et al., and our tailing mechanisms, respec-
tively. With their false-alarm rates set to 0%, their respec-
tive detection rates drop to 37%, 34%, and 80%.
All three mechanisms present the same (asymptotic)
required database storage capacity, computational effort,
communication costs, and scalability. However, despite
its poor detection/false-alarm tradeoff, the mechanism pro-
posed by Zanetti et al. has the beneﬁt of not relying on
tags’ rewritable memory, and thus avoids a mechanism-
dependent degradation of the nominal tag processing speed
(max. 1838 tags/s). Although the mechanism proposed
by Lehtonen et al. presents severely limited tag processing
speeds due to its online execution (max. 4.5 tags/s), an of-
ﬂine variant offers the same performance as tailing.
5 Analytic Evaluation
We now evaluate the success probability of an adversary
in injecting a counterfeit product into a supply chain given
the use of tailing (Section 5.2). We also evaluate the robust-
ness of tailing against misreads, miswrites, and misevents
(Section 5.3).
5.1 Deﬁnitions
We model the supply chain S as an acyclic, directed
graph H = (V, K), in which nodes V represent readers
and edges K represent supply-chain paths between readers.
Products enter the graph / supply chain at a source node and
traverse edges along a path π until they reach the sinks.
The detector D has limited visibility into the supply
chain, corresponding to a subset of readers VD ⊆ V . We de-
ﬁne G = (g0, ..., gm) as the sequence of detection-relevant
events associated with a genuine product following a path