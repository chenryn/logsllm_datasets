>
> The options that are available to set are displayed in the following
> screenshot:
>
> ![](media/image673.jpeg)
>
> The options that we need to start the listener are: AuthCode and
> ClientID.
>
> To get the ClientID, we need to register to Microsoft\'s developer
> account and log in. We can see the application dashboard by visiting
> [https://apps.dev.micrsoft.com/#](https://apps.dev.micrsoft.com/%23/appList)
>
> [/appList. Click the **Add an app** button to add an
> application:](https://apps.dev.micrsoft.com/%23/appList)
>
> ![](media/image674.jpeg)
>
> Set the application name and click the **Create** button to continue:
>
> ![](media/image675.jpeg)
Upon successful creation of the application, we can see the application
ID. This is the client ID that is required by the Empire C2:
> ![](media/image676.jpeg)
Let\'s now set the client ID:
> ![](media/image677.jpeg)
>
> We also need to add a redirect URL. We can do this by clicking on the
> **Add Platform** button under the **Platforms** section:
>
> ![](media/image678.jpeg)
![](media/image679.jpeg)A window will open to ask which type of platform
we want to add. For now, let\'s choose **Web**:
> We will then be displayed with a **Redirect URLs** field, where we can
> add the
![](media/image680.jpeg)URL:
> Set the field to https://login.live.com/oauth20_desktop.srf :
>
> ![](media/image681.jpeg)
![](media/image682.jpeg)Half of the configuration is now complete. To
retrieve the AuthCode, we need to execute the listener so that the
listener will request the AuthCode using the ClientID:
Open the URL given by the Empire C2 to get the AuthCode:
> ![](media/image683.jpeg)
![](media/image684.jpeg)Click **Yes** to continue. The page will be
redirected to the blank page. In the URL, we can find the code
parameter. This is the AuthCode that we require:
> Now, set the AuthCode:
>
> ![](media/image685.jpeg)
>
> Everything is ready, so let\'s start the listener:
>
> ![](media/image686.jpeg)
>
> ![](media/image687.jpeg)Now that the listener is ready, we can
> generate a one-liner stager using the OneDrive listener:
>
> ![](media/image688.jpeg)When the stager is executed on the target
> server, it will connect back to the OneDrive server and the Empire C2
> will update the agent entry with the newly connected agent:
Let\'s check the network traffic from the target:
> ![](media/image689.jpeg)
Similar to Dropbox, the SSL certificate used in OneDrive is a valid one.
> ![](media/image690.jpeg)
>
> The cloud-based file-sharing C2s can really help in a situation where
> it\'s difficult to get reverse connections back to our C2. This
> doesn\'t mean, however, that we shouldn\'t look out for the covert
> channels that our C2 is using. Covert channels are an important aspect
> of a red team operation.
# C2 covert channels
> A covert channel is used to communicate secretly. Whereas encryption
> only protects the communication from being decoded by unauthorized
> parties, covert channels aim to hide the very existence of the
> communication. Initially, covert channels were identified as a
> security threat on monolithic systems such as mainframes. More
> recently, focus has shifted towards covert channels in computer
> network protocols. The huge amount of data and the vast number of
> different protocols in the internet make it an ideal high-bandwidth
> vehicle for covert communication. Some of the most common protocols
> that are used to create a covert channel are as follows.
>
> (The following are referenced from:
> [https://holdmybeersecurity.com/2017/10/15/part-3-
> how-to-red-team-setting-up-environment/)](https://holdmybeersecurity.com/2017/10/15/part-3-how-to-red-team-setting-up-environment/)
# TCP
> **Transmission Control Protocol** (**TCP**) is one of the most common
> protocols that are used in networking. We can use it as a C2 covert
> channel because of its connection-oriented nature. As there are many
> TCP communications happening on the wire, the C2 covert channel used
> can blend in with other TCP communications. The biggest disadvantage
> of using TCP as the covert channel, however, is the persistent
> connection that is established. When checking for active connections
> on the system, the ESTABLISHED state that is displayed by the netstat
> command can reveal the communication between the C2 and the target
> server. This type of indicator can tell the blue teamer the subnet of
> the red team, the IP address of the C2 server(s), the port its
> connecting back to, and the type of traffic to block.
# UDP
> **User Datagram Protocol** (**UDP**) is one of the most difficult
> protocols to work with. Malware writers struggle to write malware that
> is specific to the communication with the C2 because of its
> connection-less nature. However, this means that this protocol
> doesn\'t show an ESTABLISHED state when monitoring active connections
> using netstat, which gives it a stealthier C2 channel.
# HTTP(S)
> **Hyper Text Transfer Protocol** (**HTTP**) is apparently the most
> well-known protocol on the web. Due to its different web request
> methods, including GET and POST, it is a viable C2 channel. Since it
> is a common protocol that is used by most organizations,
> administrators allow the HTTP ports 80 and 443 for the outbound
> connection.
# DNS
> **Domain Name Server** (**DNS**) is the second most commonly used
> network protocol and one of the most popular ones for C2 communication
> with the target server. To set up a C2 covert channel, DNS uses
> different methods such as QUERY and RESPONSE. DNS is particularly
> powerful since no IP addresses need to be recalled and all
> administrations depend on DNS to achieve their goals. It is a
> straightforward method to impart malware.
# ICMP
> **Internet Control Management Protocol** (**ICMP**), which is also
> known as PING, is also known as PING, is another method that can be
> used as a C2 channel. Many administrators allow PING through the
> firewall so they can check whether the servers are alive or not. The
> C2 payloads can be added as padding to the ICMP headers, making it a
> unique C2 covert channel.
>
> On the other hand, if the blue team detects our access, they can
> easily blacklist our C2 IPs forever and our C2s will be burned.
> However, this does not necessarily mean that we have to go through the
> whole installation and configuration procedure again.
# Summary
> In this chapter, we have provided an introduction to command and
> control (C2) servers and discussed how they are used in a red team
> operation. We have then covered how we can use cloud-based
> file-sharing services as C2s to make the communication between the
> target and our C2 stealthier. We have also learned about C2 covert
> channels and their importance with some commonly used protocols used
> in covert channels. In the next chapter, we will cover the topic of
> hiding C2s behind a Redirector so that even if the blue team detects
> the connection, only our redirector will be burned and not our C2.
# Questions
1.  What all other C2 servers can we use if not cloud based?
2.  Can we use our personal account for Dropbox?
3.  Is it necessary to use a C2 server in the first place? Why not just
    > make our own system as C2?
4.  Are there any automation scripts or tools which can be used to
    > configure the red team infrastructure automatically?
5.  Is there a way to manage multiple C2s from a dashboard?
# Further reading
> For more information on the topics discussed in this chapter, please
> visit the following links:
>
> [https://holdmybeersecurity.com/2017/10/15/part-3-how-to-red-team-setting-up-environm
> ent/](https://holdmybeersecurity.com/2017/10/15/part-3-how-to-red-team-setting-up-environment/)
>
> [https://speakerdeck.com/bluscreenofjeff/building-a-better-moat-designing-an-effectiv
> e-covert-red-team-attack-infrastructure?slide=10](https://speakerdeck.com/bluscreenofjeff/building-a-better-moat-designing-an-effective-covert-red-team-attack-infrastructure?slide=10)
> 
> 
>
> 
# Obfuscating C2s - Introducing Redirectors
> In the previous chapter, we learned about the basics of C2 server and
> how we can use file-sharing services like Dropbox and OneDrive as a C2
> server.
>
> However, from the blue team\'s perspective, the unfamiliar IPs will be
> blacklisted after knowing what those IPs are for. If our C2 server is
> blacklisted, our engagement will fail. Consequently, to protect our C2
> servers from being detected by the defenders of the organization, we
> will hide our team servers behind another server. This server is
> called a **Redirector** and it\'ll be responsible for redirecting all
> the communication to our C2 server.
In this chapter, we will cover the following topics:
> Introduction to redirectors Obfuscating C2 securely
>
> **Short-term** (**ST**) and **long-term** (**LT**) redirectors Payload
> stager redirection
>
> Domain fronting
# Technical requirements
> Linux Armitage Socat
# Introduction to redirectors
> ![](media/image691.jpeg)Let\'s explore the basics of redirector using
> a simple example. Take a scenario in which we have already configured
> our team server and we\'re waiting for an incoming Meterpreter
> connection on port 8080/tcp. Here, the payload is delivered to the
> target and has been executed successfully. To follow are the things
> that will happen next: On payload execution, the target server will
> try to connect to our C2 on port 8080/tcp. Upon successful connection,
> our C2 will send the second stage as follows:
>
> A Meterpreter session will then open and we can access this using
> Armitage:
>
> ![](media/image692.jpeg)
>
> However, the target server\'s connection table will have our C2s IP in
> it. This means that the monitoring team can easily get our C2 IP and
> block it:
>
> ![](media/image693.jpeg)
![](media/image694.jpeg)Here\'s the current situation. This is displayed
in an architectural format in order to aid understanding:
> To protect our C2 from being burned, we need to add a redirector in
> front of our
>
> C2. Refer to the following image for a clear understanding of this
> process:
>
> ![](media/image695.jpeg)
This is currently the IP information of our redirector and C2:
> Redirector IP: 35.153.183.204
>
> C2 IP: 54.166.109.171
>
> ![](media/image696.jpeg)Assuming that socat is installed on the
> redirector server, we will execute the following command to forward
> all the communications on the incoming port 8080/tcp to our C2:
Our redirector is now ready. Now let\'s generate a one-liner payload
with a small change. This time, the lhost will be set to the redirector
IP instead of the C2:
> ![](media/image697.jpeg)
![](media/image698.jpeg)Upon execution of the payload, the connection
will initiate from the target server and the server will try to connect
with the redirector:
![](media/image699.jpeg)We might now notice something different about
the following image as the source IP is redirector instead of the target
server:
Let\'s take a look at the connection table of the target server:
> ![](media/image700.jpeg)
Bingo! The connection table doesn\'t have our C2 IP and neither does the
Blue team. Now the redirector is working perfectly, what could be the
issue with this C2-redirector setup?
> Let\'s perform a port scan on the C2 to check the available open
> ports:
>
> ![](media/image701.jpeg)
>
> As we can see from the preceding screenshot, port 8080/tcp is open on
> our C2. This
>
> means that anyone can try to connect to our listener in order to
> confirm its existence. To avoid situations like this, we should
> configure our C2 in such a way that allows us to protect it from
> outside reconnaissance (recon) and attacks.
# Obfuscating C2 securely
> To put it in a diagrammatic format, our current C2 configuration is
> this:
>
> ![](media/image702.jpeg)
>
> ![](media/image703.jpeg)If someone tries to connect to our C2 server,
> they will be able to detect that our C2 server is running a
> Meterpreter handler on port 8080/tcp:
>
> To protect our C2 server from outside scanning and recon, let\'s set
> the following **Uncomplicated Firewall** (**UFW**) ruleset so that
> only our redirector can connect to our C2. To begin, execute the
> following UFW commands to add firewall rules for C2: **sudo ufw allow
> 22**
>
> **sudo ufw allow 55553**
>
> **sudo ufw allow from 35.153.183.204 to any port 8080 proto tcp sudo
> ufw allow out to 35.153.183.204 port 8080 proto tcp**
## sudo ufw deny out to any
> The given commands needs to be executed and the result is shown in the
> following screenshot:
>
> ![](media/image704.jpeg)
>
> In addition, execute the following ufw commands to add firewall rules
> for redirector as well: **sudo ufw allow 22**
>
> **sudo ufw allow 8080**
>
> The given commands needs to be executed and the result is shown in the
> following screenshot:
>
> ![](media/image705.jpeg)
Once the ruleset is in place, this can be described as follows:
> ![](media/image706.jpeg)
>
> If we try to perform a port scan on the C2 now, the ports will be
> shown as
>
> filtered: as shown below.
>
> ![](media/image707.jpeg)
>
> ![](media/image708.jpeg)Furthermore, our C2 is only accessible from
> our redirector now. Let\'s also confirm this by doing a port scan on
> our C2 from redirector server:
There are different kinds of redirectors that we can use according to
our needs in the red team engagement.
# Short-term and long-term redirectors
> **Short-term** (**ST**)---also called short haul---C2 are those C2
> servers on which the beaconing process will continue. Whenever a
> system in the targeted organization executes our payload, the server
> will connect with the ST-C2 server. The payload will periodically poll
> for tasks from our C2 server, meaning that the target will call back
> to the ST-C2 server every few seconds. The redirector placed in front
>
> of our **ST-C2 server** is called the **short-term** (**ST**)
> **redirector.** This is responsible for handling **ST-C2 server**
> connections on which the ST-C2 will be used for executing commands on
> the target server in real time. ST and LT redirectors would get caught
> easily during the course of engagement because they\'re placed at the
> front.
**Long-term** (**LT**)---also known as long-haul---C2 server are where
the callbacks received from the target server will be after every few
hours or days. The redirector placed in front of our **LT-C2 server** is
called a **long-term** (**LT**) **redirector**. This redirector is used
to maintain access for a longer period of time than ST redirectors. When
performing persistence via the **ST-C2 server**, we need to provide the
domain of our LT redirector so that the persistence module running on
the target server will connect back to the LT redirector instead of the
ST redirector.
> A segregated red team infrastructure setup would look something like
> this:
>
> ![](media/image709.png)
>
> Source:
> https://payatu.com/wp-content/uploads/2018/08/redteam_infra.png
Once we have a proper red team infrastructure setup, we can focus on the
kind of redirection we want to have in our ST and LT redirectors.
# Redirection methods
> There are two ways in which we can perform redirection:
>
> Dumb pipe redirection Filtration/smart redirection
# Dumb pipe redirection
> The dumb pipe redirectors blindly forward the network traffic from the
> target server to our C2, or vice-versa. This type of redirector is
> useful for quick configuration and setup, but they lack a level of
> control over the incoming traffic. Dumb pipe redirection will
> obfuscate (hide) the real IP of our C2, but won\'t it distract the
> defenders of the organization from investigating our setup.
>
> We can perform dumb pipe redirection using **socat** or **iptables**.
> In both cases, the network traffic will be redirected either to our
> **ST-C2 server** or **LT-C2 server**.
>