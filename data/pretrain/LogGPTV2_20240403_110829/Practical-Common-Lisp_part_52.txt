可以让你取出赋值给循环变量的列表里的值，类似于DESTRUCTURING-BIND的工作方式但没有
22.7
另一方面，值汇聚子句为循环过程中涉及值汇聚的常见循环用法提供了一套简洁表示法。每
 每次通过循环时，汇聚子句会对form求值并将其按照由verb所决定的方式保存起来。通过
 verb form 【 into var ］
值汇聚（value accumulation）语句可能是Loop中最有用的部分。尽管选代控制语句提供了一
如果解构列表含有比列表中的值更多的变量，那么多余的变量将被设置为NIL，这使得所有
如果你想要忽略一个解构列表中的值，
(loop for cons on list 
这棵树还可以包含带点的列表，这时点之后的名字将像一个&reBt参数那样处理，被绑定到
一个尚未谈及的LOOP宏的非常有用的特性，是其解构赋值给循环变量的列表值的能力。这
( )( （(9 )( )（))， （) I d)
(loop for (item 
NIL
a:1; b:2
值汇聚
when rest do (format t
do（format t
3：
解构变量
1
b:
b:
寸
.rest） on list
item)
(car cons))
www.TopSage.com
，可以用NIL代替相应变量的名字。
22.8值汇聚
245
---
## Page 263
义了一个变量*random*，它含有一个随机数列表。
之和，maximize收集它所看到的form的最大值，而minimize则收集最小值。例如，假设你定
也必须是列表，然后像函数APPEND或NCONC?那样将所有列表汇聚成单个列表。
相关的动词是append和nconc。这两个动词都将值汇聚到一个列表上，但它们所汇聚的值本身
特别有用的构造，因为手工编写一个像LooP那样有效率的列表来收集代码非常困难。?与collect
maximizing和minimizing。
它们对应的进行时形式的同义词:collecting、appending、nconcing、counting、summing、
达式返回值的默认值。
with子句所声明的那样。如果没有into下级子句，那么汇聚子句将汇聚出一个作为整个循环表
其余的汇聚子句都用来汇聚数值。动词count统计form为真的次数，sum收集所有form的值
可用的动词包括collect、append、nconc、count、sum、maximize和minimize。还有
246
②回顾一下，NCONC是APPEND的破坏性版本一
① 难点在于必须跟踪列表的尾部并通过sErF尾部的cDR来向列表添加新的点对。一个由(1oop fori upto 10
collect子句会构造一个列表，列表中包含以代码中的顺序排列的所有form的值。这是一个
(loop for i in *random* 
那么下面的循环将返回关于这些数的一个含有多种统计信息的列表：
(defparameter *random* (loop repeat 100 collect (random 10000)))
为也难以保证，因为其行为根本没有定义。
它将很可能进人一个无限循环，因为由(1ist12 3)所产生的列表被破坏性地修改以指向它自身。其实这个行
(loop for i on (list 1 2 3) nconc i) → undefined 
而这个将给你带来麻烦：
(loop for i upto 3 nconc (1ist i i)) → (0 0 1 1 2 2 3 3)
表，而且该列表没有跟其他列表共享任何结构。例如，下面的代码是安全的：
标准的收集值的PUSH/NREVERSE。
当然，你很少需要编写像这样的代码。可以使用LOOP，也可以（如果出于某种原因你不想使用LOOP的话）使用
collecti）所生成代码的手写等价版本如下所示：
(do((list nil) (tail nil)(i 0(l+ i)))
(let((new
finally (return (list min max total evens odds)))
summing
counting (evenp i) into evens
((> i 10) list)
(setf tail new)))
(if (null
第 22章
(setf (cdr tail) new))
 into
(cons i nil)))
list)
高阶LOOP
into max
www.TopSage.com
安全使用nconc子句的场合仅限于你正在收集的值都是全新的列
---
## Page 264
所示：
的Lisp形式里“调用”sumi。对于类似这种情况，就需要用到LOOP自己的条件表达式，如下
求和从1到10之间的偶数。你不可能用一个do子句来写出这样的循环，因为没有办法在一个正规
这样的控制构造。下面就是只打印1到10之间所有偶数的一种循环的写法：
22.10
和
可以从任意封闭的表达式中返回。举个例子，比较下列表达式
跳出。注意retUrn子句总是从临近的LOOP表达式里返回，而do子句中的RETURN或RETURN-FROM
组成，当该形式被求值时，得到的结果将立即作为整个循环的值返回。
循环的闭合括号或是下一个循环关键字。
后接一个或多个Lisp形式构成，这些形式将在do子句开始运行时全部被求值。do子句结束于一个
进一步子句的其他子句相比，do具有一种Yoda式的简洁性。
个很好的通用迭代机制了。
22.9无条件执行
由于do子句可以包含任意Lisp形式，所以可以在这里使用任何Lisp表达式，包括rF和wHEN
使用Lisp的常规控制流操作符，例如RETURN和RETURN-FROM，也可以从循环中的do子句里
在一个循环之内执行任意代码的最简单方式是使用do子句。与之前讨论过的那些带有介词和
①“No!Try not. Do...or do not. There is no try.”（不!不要试。要么做要么不做。没有机会可试）—Yoda，The Empire
不过，有时你会需要循环子句层面上的条件控制。例如，假设你只想用一个summing子句来
(loop for i from l to 10 do (when (evenp i) (print i)))
例如，为了打印出数字1到10，可以这样来写：
虽然值汇聚构造非常有用，但如果没有机会在循环体中执行任意代码的话，LOOP就不是一
上述do和return子句统称为无条件执行子句。
(block outer
(block outer
另一个更有趣的立即执行的形式是return子句。这个子句由单词return后接单个Lisp形式
(loop for i from 1 to 10 do (print i))
Strikes Back（《星球大战5》）。
200）→100
200）→200
(print
dOoT wox pauxnqax 0ot : (oot urnzax o wox  xog doot)
(print
条件执行
"This won't print")
"This will print")
www.TopSage.com
。一个do子句由单词do（或doing）
22.10条件执行
247
---
## Page 265
22.11
每次通过循环时被调用，其参数是条件子句中的汇聚子句最后更新的不同变量的值。
loop-clause。Loop的if和when关键字CommonLisp中同名的关键词含义不同，在这里它们是
some-hash中对应的非空值：
式所返回的值。例如，下面的循环可以收集在列表some-list中查找键时所找到的在哈希表
另一个条件执行子句。多个循环子句可以通过and连接成单一条件。
loop-clause则可以是一个值汇聚子句（count、collect，等等）、一个无条件执行子句或是
其中的conditional可以是if、when或unless，test-form可以是任何正规Lisp形式，而
同义词—行为上没有区别。
248
下面这个相当傻的循环演示了几种不同形式的Loop条件子句。函数update-analysis将在
条件子句在每次通过循环时都会执行。if或when子句会在它的test-form求值为真时执行
还有一点儿语法糖：在第一个循环子句里，测试形式之后，可以使用变量it来指代由测试形
LOOP语言设计者早就预见到：循环在实际使用中总是以一些设置初始环境的代码开始，循
(loop for i from 1 to 100
(loop for key in some-list when (gethash key some-hash) collect it)
conditional test-form loop-clause
LOOP提供了三种条件构造，它们全部遵循下面的基本模式：
(loop fori from 1 to 10when（evenp i）sum i）→30
第22章高阶LOOP
设置和拆除
do
el:
if（evenp i）
(update-analysis min-even
and sum i intoodd-total
end
when（zerop（modi5))
minimize
and sumi into even-total
end
unless
sum i into fives-total
aximize
sumi into even-not-fours-total
iinto min-odd and
www.TopSage.com
even-not-fours-total))
fives-total
odd-total
even-total
max-odd
min-odd
max-even
---
## Page 266
显式的返回值将比其他汇聚或终止测试子句所提供的值具有更高的优先级。
运行尾声：
循环变量。
部循环变量被初始化以后和循环体开始之前运行一次。所有的finally形式则被简单地组合成
束之后运行的多个Lisp形式所组成。所有的initially形式会被组合一个的“序言”，在所有局
环主体以外的代码。
里。这样，Loop就提供了两个关键字，initially和finally，用于引入那些原本会运行在循
可以返回值的表达式，因此通常更需要做的一件事是在循环结束之后生成一个有用返回值。
的话也就毫无意义了，if语句在循环结束后输出结果。在CommonLisp中，Loop结构也是一个
了循环开始前的两行代码中声明的变量。
环结束后还会有更多的代码来处理由循环所计算出来的值。举一个简单的Perl例子?，如下所示：
一个“尾声”，在循环体的最后一次迭代结束以后运行。序言和尾声部分的代码都可以引用局部
在initially或finally之后,这些子句由所有需要在下一个循环子句开始之前或者循环结
就算循环迭代了零次，序言部分也总是会运行。但是循环有可能在下列任何情况发生时不会
所以，LOoP的设计者说，应该提供一种方式将原本应该放在循环中的那些代码也塞进循环
③你可以使用局部宏LOOP-FINISH让整个循环从循环体中的某段LiSP代码中直接正常返回，同时有机会执行循环
② 在Perl里，如果你没有使用use strict的话，Perl会允许你随意使用未经声明的变量。但你应当总是在Perl中使
①我并不是故意选择Perl的，这个例子在任何语法基于C的语言里看起来都差不多。
另外,为了使RETURN-FROM从一个特定的循环中返回(这在嵌套的LOOP表达式中是有用的)，
口循环被一个always、never或thereis子句终止，我将在下一节里讨论这种情况。
口RETURN、RETURN-FROM或其他控制构造的传递操作在循环体中的一个Lisp形式中被调用°。
执行了一个return子句。
这段代码中的循环是foreach语句。但foreach本身并不能独立工作：循环体中的代码引用
if ($evens_sum > $odds_sum) {
foreach my $i 
my $evens_sum = 0;
的尾声部分。
用usestrict。Python、Java或C中的等价代码将总是会要求声明变量。
 print "Sum of odds greater\n";
 print "Sum of evens greater\n";
else{
} else {
if ($i名2)
 $evens_sum += $i;
:s =+ wns"sppos 
(@list_of_numbers）{
www.TopSage.com
?而循环所做的所有工作假如果没有了后面那个if语句
22.11
设置和拆除
249
23
---
## Page 267
试形式均为假。如果测试形式失败了（在always子句中返回NIL或是在never子句中返回非
使用always来确认循环的每次迭代过程中测试形式均为真。相反地，never测试每次迭代中测
句带有一个into下级子句。编译器（或解释器）应当在编译期报告此类错误。always和never