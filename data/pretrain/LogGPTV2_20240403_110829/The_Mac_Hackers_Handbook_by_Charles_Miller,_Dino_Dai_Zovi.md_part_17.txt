126 Part II ■ Discovering Vulnerabilities
anomalies can be added in a more intelligent manner. For example, length fi elds
and checksums can be respected. By contrast, with the mutation-based approach
this type of information is not known, so the application may quickly reject
changes to the inputs. This increased knowledge of the underlying structure of
the input, while taking much more time to develop, can lead to more thorough
testing of the application and thus may fi nd more bugs. Generation-based fuzz-
ing is similar to many forms of quality-assurance testing. The major difference
is that in fuzzing, the tester doesn’t care if the results of the program are correct,
but only if a critical security failure occurs, such as a crash.
Other methods for input generation exist, but are still rather experimental. It
is possible to generate inputs by statically analyzing the binary, using techniques
borrowed from evolutionary biology to attempt to fi nd the inputs best at fi nd-
ing bugs, or trying to construct inputs by observing the application under test
while consuming the inputs.
For more information on fuzzing, please consult Fuzzing: Brute Force
Vulnerability Discovery, by Sutton, Greene, and Amini.
Network Fuzzing
Here we present a couple of quick fuzzing examples against Leopard, both tar-
geting QuickTime Player. The fi rst example looks at fuzzing a network protocol,
and the second examines fi le fuzzing.
One of the ways data can get into QuickTime Player is by connecting to a
media server using the RTSP protocol. A couple of very simple vulnerabili-
ties in this protocol were discovered in late 2007 and early 2008 by Krystian
Kloskowski and Luigi Auriemma, respectively. We’re about to show exactly how
to carry out fuzzing of QuickTime Player’s RTSP parsing. This methodology
would have revealed these two vulnerabilities, and, as you’ll see, even more
unpatched problems.
For this discussion, we’re going to use the mutation-based approach, which
means you’ll need valid data to start from. In this case, to get data all you need to
do is repeatedly point the application at a media server and inject anomalies into
the stream. QuickTime Player doesn’t seem to accept a URL as a command-line
argument, but it will happily accept a fi le to process. You can easily construct a
.qtl fi le that simply redirects the player to a remote media server:
In this case, to save bandwidth you can use the open-source Helix DNA
Server as your RTSP server. You could just as easily use a URL on the Internet
as found by Google. Notice the nonstandard port being used. You’ll see why
this is necessary shortly.
9955336633cc0055..iinndddd 112266 11//2255//0099 44::4411::0077 PPMM
Chapter 5 ■ Finding Bugs 127
Next you need a way to launch QuickTime Player repeatedly, let it run for
a bit, then kill it and restart it. This is accomplished by way of the following
simple script.
#!/usr/bin/perl
$i = 0;
while($i  0;
print “.”;
}
This script simply launches QuickTime Player with the argument of our .qtl
fi le, waits 10 seconds, and then desperately tries to kill it. Such a variety of meth-
ods to kill the process is necessary because of the strange state that QuickTime
Player can get into when bombarded with anomalous data.
Now we need a way to inject faults into the network stream. This is accom-
plished by way of the open-source ProxyFuzz fuzzer. This Python script acts as
a man-in-the-middle proxy and simply adds anomalies to the network stream
and forwards it on. ProxyFuzz is completely ignorant of the underlying proto-
col being fuzzed, in this case RTSP. It is a perfect example of a mutation-based
fuzzer. To set up ProxyFuzz, simply run the following command line:
python proxyfuzz.py -l 6789 -r localhost -p 554 -c
This command has ProxyFuzz wait for connections on port 6789, then forward
the modifi ed traffi c to port 554 on the same machine on which ProxyFuzz is
running. The fi nal argument tells ProxyFuzz to fuzz only the client side of the
9955336633cc0055..iinndddd 112277 11//2255//0099 44::4411::0077 PPMM
128 Part II ■ Discovering Vulnerabilities
communication. Now it is just a matter of starting the script that spawns the
player and waiting for the QuickTime Player to crash; see Figure 5-3.
Unmodified
RTSP request
RTSP request
RTSP response Fuzzed
RTSP response
RTSP server ProxyFuzz QuickTime Player
client
Figure 5.3: ProxyFuzz acts as a man-in-the-middle and fuzzes the RTSP traffic destined
for the player.
Eventually QuickTime Player will succumb to this simple fuzzing. ReportCrash
will capture the crash for future analysis (more on this in the next section).
Unfortunately, it is diffi cult to use ProxyFuzz to repeat the exact conditions that
caused the fault that made the application crash.
Here is an excerpt from the crash fi le.
Process: QuickTime Player [5047]
Path: /Applications/QuickTime
Player.app/Contents/MacOS/QuickTime Player
Identifier: com.apple.quicktimeplayer
Version: 7.4.1 (14)
Build Info: QuickTime-7360000~2
Code Type: X86 (Native)
Parent Process: perl [5046]
Date/Time: 2008-03-20 13:25:00.985 -0500
OS Version: Mac OS X 10.5.2 (9C7010)
Report Version: 6
Exception Type: EXC_BAD_ACCESS (SIGBUS)
Exception Codes: KERN_PROTECTION_FAILURE at 0x0000000000000001
Crashed Thread: 0
Thread 0 Crashed:
0 libSystem.B.dylib 0x909c0745 strtol_l + 52
1 libSystem.B.dylib 0x909f2243 atol + 69
2 …uickTimeStreaming.component 0x0067c421
RTSPMessage_GetTransportInfo + 670
3 …uickTimeStreaming.component 0x006977d3
RTPMediaCond_HandleReceiveSetupResponse + 401
4 …uickTimeStreaming.component 0x00698208
RTPMediaCond_NotificationFromEngine + 95
5 …uickTimeStreaming.component 0x0067a985 _StreamModuleProc +
1904
9955336633cc0055..iinndddd 112288 11//2255//0099 44::4411::0077 PPMM
Chapter 5 ■ Finding Bugs 129
6 …uickTimeStreaming.component 0x006ac8e5 BaseStream_RcvData + 90
7 …uickTimeStreaming.component 0x006acaa5
BaseStream_ComponentDispatch + 125
8 …ple.CoreServices.CarbonCore 0x93eaf5cd CallComponentDispatch +
29
9 com.apple.QuickTime 0x950b6eb7 QTSSMRcvData + 49
10 com.apple.QuickTime 0x950b2663 QTSModSendData + 149
It is not obvious whether this bug is exploitable.
File Fuzzing
File fuzzing is similar to network fuzzing but in many ways is easier to carry
out. Again we pick on QuickTime Player, and again we use a mutation-based
approach. This time, however, you can fuzz the way it parses .jp2 fi les, which
are image fi les that use the JPEG-2000 fi le format. For this you need a valid .jp2
fi le, a way to add anomalies to it, a way to launch QuickTime Player repeatedly
for each of the fuzzed fi les, and a way to monitor which fi les cause problems.
Obtaining a valid .jp2 fi le is easy—just ask Google. As for the way to make
the fuzzed test cases, you just need a simple program that randomly changes
bytes in the fi le. This approach is ignorant of the .jp2 fi le format, but, as you’ll
see, still proves to be effective in fi nding bugs.
#include 
#include 
#include 
#define NUM_FILES 8092
int main(void)
{
FILE *in, *out, *lout;
unsigned int n, i, j;
char buf[1002444];
char backup[1002444];
char outfile[1024];
int rn;
int rbyte;
int numwrites;
in = fopen(“good.jp2”, “r”);
n = read(fileno(in), buf, sizeof(buf));
memcpy(backup, buf, n);
lout=fopen(“list”, “w”);
srand(time(NULL));
for (i=0;i:mov ecx,DWORD PTR [eax+0xe]
(gdb) x/16x $eax
0xf8645ff0: 0x05aa0000 0x007d0000 0x0c000000 0x00000000
0xf8646000: Cannot access memory at address 0xf8646000
In this case, the allocated buffer ended at 0xf8645fff (this might include pad-
ding or rounding from the allocation). The code tried to read past the buf-
fer. Reading beyond the allocated buffer isn’t usually enough to make a bug
exploitable. Fortunately, Guard Malloc has a feature that allows reads past the
end of the buffer but not writes. It does this by marking the following page as
read-only. This is controlled by the MALLOC_ALLOW_READS environment
variable. Using this variable, the .jp2 bug reveals that it does actually corrupt
heap metadata by writing beyond the end of an allocated buffer.
(gdb) set env MALLOC_ALLOW_READS=1
(gdb) r
…
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_PROTECTION_FAILURE at address: 0xf86b2000
0x95336963 in JP2DecoPreflight ()