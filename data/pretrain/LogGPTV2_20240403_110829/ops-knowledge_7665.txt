User: I have the task of packaging and shipping a commercial application bundle, which will include:

a python library (developed by us)
some python programs depending on the library above
additional libraries not developed by us, but which are dependencies of our library.
a complete python installation (python 2.6)
additional stuff, libs and programs in other languages. Not a concern here, as they are not hooked into the above machinery, and the current shipping process works already.

The bundle is shipped to Linux, OSX and Windows. On Linux, it's distributed as a simple tar.gz. The user just unpacks the tar.gz and source a provided bash script in .bashrc, so that the environment is correctly set. On mac, it's a dmg. On windows, I have no idea. The windows guy is not here today, but what I see is that an exe is created somehow.
I will now explain in more detail the above points.
Our Python Library
We don't want to give out sources, so we want to provide only compiled python files. A better strategy to make them even more tamper-proof is welcome, even if it involves some deep hacking (e.g. I once saw magic done importing stuff from a .zip which was "corrupted" ad-hoc). The library at the moment does not have C level code or similar platform dependent code, but this is going to change soon. We will therefore have to provide platform-specific compiled .so together with the pyc.
Clearly, this library will be shipped in the package, together with the rest of our application. It will therefore be installed on the downloaded bundle. For this reason, it must be fully relocatable, and the user must in some way (either manually or via our env script) add the location of the untarred package to PYTHONPATH, so that the interpreter can find it.
Our Python Programs
We will ship applications in our bundle, and these applications will depend on our library. The code of these applications must be either visible by the user (so that he can learn how to use the library interface), or not visible (for those utilities we want to keep closed-source), so a double approach is called for.
Additional Libraries
Our library depends on 3rd party libraries we will have to ship, so that the user is up and running without any dependency hunting. Clearly, these libraries will be installed by us in the bundle, but we must hope these don't store the install path somewhere during the build, because that would make them non relocatable.
Our python
We will ship our version of python, which we assume the user will run in order to access our script. This is because we want to be sure of the python version running. Also, we may tinker a bit the executable or the standard library. We may have a concern about the interaction of this python with the standard python, and if the user wants a specific library on our python it will have to install it within our bundled package, and not on the standard place for libraries.
Request
I need to make my mind around this task. I've seen it done, but never done it personally, so I need your point of view. What I presented above is how I think things should work, according to how things are working right now, but it may be wrong. Any hint, quirk, suggestion, or strategy for a successful deployment is welcome. Given the complexity of the question, I already announce a high bounty on it, according to the best answer I can get.
Assistant: This will vary depending on your target market.  In specialized niche industries there is more variety in how stuff is distributed.  In heavily commoditized areas I would expect native OS package (at least if I were a customer).  I tend to take the quality of the deployment package as indicative of the quality of the software in general. I associate native OS packages as higher quality than other formats largely because the dependency information can be complete.  This makes it easier to do some compliance testing and change management.
Native OS Packages

For Unices consider creating native OS packages. They provide better integration and visibility with processes like compliance, change management, dependency management, etc. 
For OSX others have already suggested py2app.  You may also be able to leverage MacPorts package format or the Fink package format.
For Windows others have already suggested py2exe. 

Relocation and Config Requirements

Put your Python executable under .../libexec.  This prevents it from accidentally being called.
Change the name of the Python executable to prevent confusion.  ie. /usr/local/libexec/<pkg>_python
Distribute the .py for the bins to make them easily relocatable. You can change the Magic Cookie at install time to whatever the location your Python was installed in via an install script.  The only code you need in the bin is a line that calls into your lib which is a pyc.
Install your libs in the correct location under /usr/local/lib/app_python/site_package/... and you won't need to use PYTHONPATH.

Shared Libraries

If I remember correctly you'll want to make sure you strip any rpath entries from the libs as this can mess with their ability to be relocated.
The native OS packaging should help with any dependencies the shared libs require.