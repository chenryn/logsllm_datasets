```
When a value is passed to a prop attribute, it becomes a property on that
component instance. The value of that property is accessible within the template
and on the component's `this` context, just like any other component property.
A component can have as many props as you like and, by default, any value can be
passed to any prop.
Once a prop is registered, you can pass data to it as a custom attribute, like this:
```html
```
In a typical app, however, you'll likely have an array of posts in your parent component:
```javascript
export default {
  // ...
  data() {
    return {
      posts: [
        { id: 1, title: 'My journey with Vue' },
        { id: 2, title: 'Blogging with Vue' },
        { id: 3, title: 'Why Vue is so fun' }
      ]
    }
  }
}
```
Then want to render a component for each one, using `v-for`:
```html
```
We declare long prop names using camelCase because this avoids having to use
quotes when using them as property keys.
```javascript
export default {
  props: {
    greetingMessage: String
  }
}
```
```html
{{ greetingMessage }}
```
However, the convention is using kebab-case when passing props to a child
component.
```html
```
### Passing different value types on props
* Numbers:
    ```html
    ```
* Boolean:
    ```html
    ```
* Array
    ```html
    ```
* Object
    ```html
    ```
    If you want to pass all the properties of an object as props, you can use
    v-bind without an argument.
    ```javascript
    export default {
      data() {
        return {
          post: {
            id: 1,
            title: 'My Journey with Vue'
          }
        }
      }
    }
    ```
    The following template:
    ```html
    ```
    Will be equivalent to:
    ```html
    ```
### [One-way data flow in props](https://vuejs.org/guide/components/props.html#one-way-data-flow)
All props form a one-way-down binding between the child property and the parent
one: when the parent property updates, it will flow down to the child, but not
the other way around.
Every time the parent component is updated, all props in the child component
will be refreshed with the latest value. This means you should not attempt to
mutate a prop inside a child component.
### [Prop validation](https://vuejs.org/guide/components/props.html#prop-validation)
Components can specify requirements for their props, if a requirement is not
met, Vue will warn you in the browser's JavaScript console.
```javascript
export default {
  props: {
    // Basic type check
    //  (`null` and `undefined` values will allow any type)
    propA: Number,
    // Multiple possible types
    propB: [String, Number],
    // Required string
    propC: {
      type: String,
      required: true
    },
    // Number with a default value
    propD: {
      type: Number,
      default: 100
    },
    // Object with a default value
    propE: {
      type: Object,
      // Object or array defaults must be returned from
      // a factory function. The function receives the raw
      // props received by the component as the argument.
      default(rawProps) {
        // default function receives the raw props object as argument
        return { message: 'hello' }
      }
    },
    // Custom validator function
    propF: {
      validator(value) {
        // The value must match one of these strings
        return ['success', 'warning', 'danger'].includes(value)
      }
    },
    // Function with a default value
    propG: {
      type: Function,
      // Unlike object or array default, this is not a factory function - this is a function to serve as a default value
      default() {
        return 'Default function'
      }
    }
  }
}
```
Additional details:
* All props are optional by default, unless `required: true` is specified.
* An absent optional prop will have `undefined` value.
* If a `default` value is specified, it will be used if the resolved prop value
    is `undefined`, this includes both when the prop is absent, or an explicit
    `undefined` value is passed.
## Listening to Events
As we develop our `` component, some features may require
communicating back up to the parent. For example, we may decide to include an
accessibility feature to enlarge the text of blog posts, while leaving the rest
of the page at its default size.
In the parent, we can support this feature by adding a `postFontSize` data property:
```javascript
data() {
  return {
    posts: [
      /* ... */
    ],
    postFontSize: 1
  }
}
```
Which can be used in the template to control the font size of all blog posts:
```html
```
Now let's add a button to the `` component's template:
```vue
 -->
    {{ title }}
    Enlarge text
```
The button currently doesn't do anything yet - we want clicking the button to
communicate to the parent that it should enlarge the text of all posts. To solve
this problem, component instances provide a custom events system. The parent can
choose to listen to any event on the child component instance with `v-on` or
`@,` just as we would with a native DOM event:
```html
```
Then the child component can emit an event on itself by calling the built-in
`$emit` method, passing the name of the event:
```html
 -->
    {{ title }}
    Enlarge text
```
The first argument to `this.$emit()` is the event name. Any additional arguments
are passed on to the event listener.
Thanks to the `@enlarge-text="postFontSize += 0.1"` listener, the parent will
receive the event and update the value of `postFontSize`.
We can optionally declare emitted events using the emits option:
```vue
```
This documents all the events that a component emits and optionally validates
them. It also allows Vue to avoid implicitly applying them as native listeners
to the child component's root element.
### [Event arguments](https://vuejs.org/guide/components/events.html#event-arguments)
It's sometimes useful to emit a specific value with an event. For example, we
may want the `` component to be in charge of how much to enlarge the
text by. In those cases, we can pass extra arguments to $emit to provide this
value:
```html
  Increase by 1
```
Then, when we listen to the event in the parent, we can use an inline arrow
function as the listener, which allows us to access the event argument:
```html
 count += n" />
```
Or, if the event handler is a method:
Then the value will be passed as the first parameter of that method:
```javascript
methods: {
  increaseCount(n) {
    this.count += n
  }
}
```
### [Declaring emitted events](https://vuejs.org/guide/components/events.html#declaring-emitted-events)
Emitted events can be explicitly declared on the component via the `emits` option.
```javascript
export default {
  emits: ['inFocus', 'submit']
}
```
The `emits` option also supports an object syntax, which allows us to perform
[runtime
validation](https://vuejs.org/guide/components/events.html#events-validation) of
the payload of the emitted events:
```javascript
export default {
  emits: {
    submit(payload) {
      // return `true` or `false` to indicate
      // validation pass / fail
    }
  }
}
```
Although optional, it is recommended to define all emitted events in order to
better document how a component should work.
## [Content distribution with Slots](https://vuejs.org/tutorial/#step-14)
In addition to passing data via props, the parent component can also pass down
template fragments to the child via slots:
```vue
  This is some slot content!
```
In the child component, it can render the slot content from the parent using the
`` element as outlet:
```vue
```
Content inside the `` outlet will be treated as "fallback" content: it
will be displayed if the parent did not pass down any slot content:
```vue
Fallback content
```
Slot content is not just limited to text. It can be any valid template content. For example, we can pass in multiple elements, or even other components:
```html
  Click me!
```
Slot content has access to the data scope of the parent component, because it is
defined in the parent. However, slot content does not have access to the child
component's data. As a rule, remember that everything in the parent template is
compiled in parent scope; everything in the child template is compiled in the
child scope. You can however use child content using [scoped
slots](https://vuejs.org/guide/components/slots.html#scoped-slots).
### [Named Slots](https://vuejs.org/guide/components/slots.html#named-slots)
There are times when it's useful to have multiple slot outlets in a single component.
For these cases, the `` element has a special attribute, `name`, which can be
used to assign a unique ID to different slots so you can determine where content
should be rendered:
```html
```
To pass a named slot, we need to use a `` element with the `v-slot`
directive, and then pass the name of the slot as an argument to `v-slot`:
```html
    Here might be a page title
    A paragraph for the main content.
    And another one.
    Here's some contact info
```
Where `#` is the shorthand of `v-slot`.
## Dynamic components
Sometimes, it's useful to dynamically switch between components, like in
a tabbed interface, for example in [this
page](https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdD5cbmltcG9ydCBIb21lIGZyb20gJy4vSG9tZS52dWUnXG5pbXBvcnQgUG9zdHMgZnJvbSAnLi9Qb3N0cy52dWUnXG5pbXBvcnQgQXJjaGl2ZSBmcm9tICcuL0FyY2hpdmUudnVlJ1xuICBcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIEhvbWUsXG4gICAgUG9zdHMsXG4gICAgQXJjaGl2ZVxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50VGFiOiAnSG9tZScsXG4gICAgICB0YWJzOiBbJ0hvbWUnLCAnUG9zdHMnLCAnQXJjaGl2ZSddXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZGVtb1wiPlxuICAgIDxidXR0b25cbiAgICAgICB2LWZvcj1cInRhYiBpbiB0YWJzXCJcbiAgICAgICA6a2V5PVwidGFiXCJcbiAgICAgICA6Y2xhc3M9XCJbJ3RhYi1idXR0b24nLCB7IGFjdGl2ZTogY3VycmVudFRhYiA9PT0gdGFiIH1dXCJcbiAgICAgICBAY2xpY2s9XCJjdXJyZW50VGFiID0gdGFiXCJcbiAgICAgPlxuICAgICAge3sgdGFiIH19XG4gICAgPC9idXR0b24+XG5cdCAgPGNvbXBvbmVudCA6aXM9XCJjdXJyZW50VGFiXCIgY2xhc3M9XCJ0YWJcIj48L2NvbXBvbmVudD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c3R5bGU+XG4uZGVtbyB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZWVlO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIHBhZGRpbmc6IDIwcHggMzBweDtcbiAgbWFyZ2luLXRvcDogMWVtO1xuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgb3ZlcmZsb3cteDogYXV0bztcbn1cblxuLnRhYi1idXR0b24ge1xuICBwYWRkaW5nOiA2cHggMTBweDtcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogM3B4O1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XG4gIG1hcmdpbi1ib3R0b206IC0xcHg7XG4gIG1hcmdpbi1yaWdodDogLTFweDtcbn1cbi50YWItYnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZDogI2UwZTBlMDtcbn1cbi50YWItYnV0dG9uLmFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6ICNlMGUwZTA7XG59XG4udGFiIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgcGFkZGluZzogMTBweDtcbn1cbjwvc3R5bGU+IiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCJcbiAgfVxufSIsIkhvbWUudnVlIjoiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwidGFiXCI+XG4gICAgSG9tZSBjb21wb25lbnRcbiAgPC9kaXY+XG48L3RlbXBsYXRlPiIsIlBvc3RzLnZ1ZSI6Ijx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInRhYlwiPlxuICAgIFBvc3RzIGNvbXBvbmVudFxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+IiwiQXJjaGl2ZS52dWUiOiI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJ0YWJcIj5cbiAgICBBcmNoaXZlIGNvbXBvbmVudFxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+In0=).
The above is made possible by Vue's `` element with the special `is` attribute:
```vue
```
In the example above, the value passed to `:is` can contain either:
* The name string of a registered component, OR.
* The actual imported component object.
You can also use the is attribute to create regular HTML elements.
When switching between multiple components with ``,
a component will be unmounted when it is switched away from. We can force the
inactive components to stay "alive" with the built-in `` component.
## [Async components](https://vuejs.org/guide/components/async.html)
In large applications, we may need to divide the app into smaller chunks and
only load a component from the server when it's needed. To make that possible,
Vue has a `defineAsyncComponent` function:
```javascript
import { defineAsyncComponent } from 'vue'
const AsyncComp = defineAsyncComponent(() =>
  import('./components/MyComponent.vue')
)
```
Asynchronous operations inevitably involve loading and error states,
`defineAsyncComponent()` supports handling these states via advanced options:
```javascript
const AsyncComp = defineAsyncComponent({
  // the loader function
  loader: () => import('./Foo.vue'),
  // A component to use while the async component is loading
  loadingComponent: LoadingComponent,
  // Delay before showing the loading component. Default: 200ms.
  delay: 200,
  // A component to use if the load fails
  errorComponent: ErrorComponent,
  // The error component will be displayed if a timeout is
  // provided and exceeded. Default: Infinity.
  timeout: 3000
})
```
# [Testing](https://vuejs.org/guide/scaling-up/testing.html)
When designing your Vue application's testing strategy, you should leverage the following testing types:
* *Unit*: Checks that inputs to a given function, class, or composable are
    producing the expected output or side effects.
* *Component*: Checks that your component mounts, renders, can be interacted
    with, and behaves as expected. These tests import more code than unit tests,
    are more complex, and require more time to execute.
* *End-to-end*: Checks features that span multiple pages and make real network
    requests against your production-built Vue application. These tests often
    involve standing up a database or other backend.
## Unit testing
Unit tests will catch issues with a function's business logic and logical
correctness.
Take for example this increment function:
```javascript
// helpers.js
export function increment (current, max = 10) {
  if (current < max) {
    return current + 1
  }
  return current
}
```
Because it's very self-contained, it'll be easy to invoke the `increment`
function and assert that it returns what it's supposed to, so we'll write a Unit