model equal to 1/N and consider the standard scenario of queries issued uni-
formly at random. They achieve FDR on an arbitrary database with O(N 4 log N )
queries using access pattern leakage. Instead, we obtain FDR with O(N 2 log N )
queries using both access pattern leakage and search pattern leakage. They fur-
ther achieve FDR with O(N 2 log N ) queries under the additional assumption
that the database has a record with value in the interval [0.2N, 0.3N ].
Regarding ordering reconstruction, they are able to achieve FOR with
O(N log N ) queries under the following additional assumption on the database
values: there are two values in range [N/4, 3N/4] and their distance is larger
than N/3. Note that this implies that FDR can also be achieved in dense
databases with O(N log N ) queries.
Note that Grubbs et al. [6, 8] as well as Lacharit´e et al. [18] are also able
to achieve approximate database reconstruction assuming access to an auxil-
iary distribution for the database values. Our work focuses on exact database
reconstruction, not approximate, and thus this result is less relevant.
There have been plenty of attacks on diﬀerent types of leakage as well. Ko-
rnaropoulos, Papamanthou and Tamassia [15] developed an approximate recon-
struction attack utilizing leakage from k-nearest neighborhood queries. Grubbs,
Lacharit´e, Minaud, and Paterson [7] utilize volume leakage from responses to
range queries to achieve full database reconstruction. Grubbs, Ristenpart, and
Shmatikov [10] present a snapshot attack that can break the claimed security
guarantees of encrypted databases. While most of the above attack papers as-
sume that the client issues queries uniformly at random, in recent work, Ko-
rnaropoulos, Papamanthou and Tamassia [16, 17] develop distribution-agnostic
reconstruction attacks from range and k-nearest neighbor (k-NN) queries using
search pattern leakage.
There are also attacks on property-revealing-encryption schemes (which re-
veal more information than we assume) and attacks that assume a more active
adversary [2, 5, 9, 11, 19, 20].
4 Full Ordering Reconstruction
In this section, we present our algorithm for full ordering reconstruction, which
infers the order of the database records by value. The algorithm uses access
pattern leakage, but not search pattern leakage.
Evangelia Anna Markatou and Roberto Tamassia
4.1 Approach
The ordering reconstruction algorithm is based on the following observation.
Suppose we have two query responses, M1 and M2, each consisting of the set of
identiﬁers of a query response. Let B = M1∩M2, A = M1−B, and C = M2−B.
We have M1 = A ∪ B and M2 = B ∪ C, where A and C are disjoint. as shown
in Figure 1.
B
A
C
Fig. 1. Intersection and diﬀerences between two range query responses, M1 and M2,
where B = M1 ∩ M2, A = M1 − B, and C = M2 − B.
Then, there can be only two correct (partial) orderings of the elements in M1
and M2 by value: (i) A, followed by B, followed by C or (ii) C, followed by B,
followed by A, as illustrated in Figure 2.
A
C
B
or
B
C
A
Fig. 2. The two possible ordering of the elements in the query responses M1 = A ∪ B
and M2 = B ∪ C from Figure 1.
The above observation serves as a building block of our algorithm for ordering
the elements of the database. That is, every time we see two query results that
have a non-empty intersection, we know that there are two ordering possibilities:
the one reﬂection of the other. Suppose now that we see a query result M3 =
B ∪ A1 and that A1 ∪ A2 = A. Then, we reﬁne the ordering as follows: A1
followed by A2, followed by B, followed by C, or C followed by B, followed by
A1, followed by A2. It seems that most query results we see have the potential
to reﬁne this partial ordering, possibly until the point where all elements will
have been ordered.
Full Database Reconstruction with Access and Search Pattern Leakage
Although keeping and maintaining this partial ordering may seem compli-
cated, fortunately, Booth and Lueker [1] designed a data structure that does
just that: maintains a partial ordering of a set of elements. The data structure
is called a PQ tree.
PQ Trees A PQ tree is a data structure that can eﬃciently store all permissible
permutations of a set of elements.
A PQ tree is built from three types of nodes, P nodes, Q nodes, and leaf
nodes:
1. Leaf node. A leaf node stores a single element and has no children.
2. P node. The children of a P node can assume any ordering. (Similar to a
set.)
3. Q node. The children of a Q node can assume only the ordering they are in,
or the reverse order. (Similar to an ordered list.)
To use a PQ tree, one ﬁrst creates a root P node that contains all elements as
children leaf nodes. Then, the PQ tree can consume sets of elements that need to
be contiguous and modify itself to represent these requirements, by reorganizing
the leaf nodes in P and Q nodes as appropriate. The order is fully reconstructed
if the PQ tree contains one Q node, whose children are all leaves.
Each range response is essentially a set of identiﬁers that are all contigu-
ous. The PQ tree can consume these range responses to identify all permissible
permutations of the ordering of the identiﬁers.
4.2 Algorithm
We show in Algorithm 1 our method for full ordering reconstruction. Similarly to
[3] and [8], we use PQ trees [1] to store the partial ordering of the set of database
elements. The adversary initializes a PQ tree. Then, it feeds it sets of identiﬁers
as answers to queries are observed. For each answer set, M , the PQ tree updates
the partial order of the identiﬁers seen so far in time proportional to the size
of M by means of operation update(M ) The details of operation update can be
found in [1].
Note that in this work, much like all previous papers, we are not concerned
with the computational complexity of the algorithms we use (as long as it is
within reasonable polynomial bounds), but with the number of queries needed
to achieve the database order/value reconstruction necessary. At every point the
adversary has access to all allowable permutations of the identiﬁers using the
PQ-tree.
Algorithm 1 Full Ordering Reconstruction
1: Initialize an empty PQ-tree, T
2: while a new answer set M is observed do
3:
T.update(M )
Evangelia Anna Markatou and Roberto Tamassia
4.3 Query Complexity Analysis
The query complexity of our FOR algorithm is summarized in the following
theorem.
Theorem 1. Using access pattern leakage, Algorithm 1 reconstructs the order
of the database identiﬁers with respect to their values after observing 2.1N 2 log N
uniformly at random issued queries, with probability greater than 1−1/N 2, where
N is the size of the universe of database values.
Proof. There are N (N +1)/2 possible queries. Given that queries come uniformly
at random, the probability that a given query is not issued after 2.1N 2 log N
queries is
(cid:16)
(cid:17)2.1N 2 log N ≤
1 −
2
N (N + 1)
1
e4 log N ≤ 1
N 4 .
By Union Bound, the probability that at least one query is not issued after
2.1N 2 log N queries is at most
N (N +1)/2(cid:88)
i=1
1
N 4 ≤ N (N + 1)
2N 4
≤ 1
N 2 .
ability greater than 1 − 1
N 2 .
Thus, after 2.1N 2 log N queries, all queries will have been issued with prob-
(cid:117)(cid:116)
Note that Algorithm 1 works with any query distribution—not just with
uniform ones. In the theorem above, we have made the assumption that the client
issues queries uniformly at random so as to be able to compare our results with
the results previously reported in the literature which make this assumption.
4.4 Lower Bound
Lemma 1. Let A be an adversary that can reconstruct the order of the records
with only access to access pattern leakage. If the client queries ranges uniformly
at random, then adversary A needs to observe Ω(N 2) queries before successfully
completing the reconstruction in expectation.
Proof. We are going to base our proof on a database that is diﬃcult to recon-
struct. Suppose we have the following database:
K
1
L
2
N
M
N − 1 N
The only element values in it are 1,2, N − 1 and N . That is we have one small
cluster at 1,2 and one small cluster at N − 1, and N .
Full Database Reconstruction with Access and Search Pattern Leakage
Given that adversary A only has access to access pattern leakage, the possible
sets A can observe are:
{K},{L},{M},{N}
{K, L},{L,M},{M, N}
{K, L, M},{L, M, N}
{K, L,M, N}
Given that the queries come uniformly at random, A will be able to tell that K
and L are clustered together and that M and N are also clustered together rel-
atively quickly. What drives this lower bound is that one of {L, M}, {K, L, M},
and {L, M, N} is necessary in order to glue the two clusters together.
Note that there are O(N 2) possible queries. The only query that returns
{L, M} is [2, N − 1], the only query that returns {K, L, M} is [1, N − 1], and the
query that returns {L, M, N} is [2, N ].
The probability that a random query is either one of those is
O(N 2) .
Thus, Adversary A has to observe at least Ω(N 2) queries to access one of the
necessary results in expectation.
(cid:117)(cid:116)
3
O(N 2) = 1
4.5 Dense Databases
For dense databases, reconstructing the ordering of the elements corresponds
to a full reconstruction of the database (up to reﬂection). In this setting, Algo-
rithm 1 matches the best previously known complexity for dense full database
reconstruction [6, 8, 18].
Theorem 2. Suppose an attacker uses Algorithm 1 to reconstruct a dense
database. Then, the attacker can reconstruct the database after the client is-
sues 8.2N log N + 4 log N uniformly at random queries with probability greater
than 1 − 3
N 3 , where N is the size of the database.
Proof. First, let’s split the database in two equal parts, A and B.
A
B
0
N/2
N
By Lemma 2, after 4.1N log N uniformly at random queries, for each value
a ∈ A, the client issues a query [a, b], for some b ∈ B with high probability.
Let’s look at the ﬁrst 2 records in A, rA1 and rA2 . By Lemma 2, the attacker
will see some response that contains {rA1 , rA2, ....}, and a response that con-
tains {rA2 , ....}. Note that {rA1, rA2 , ....} contains all records in A, and {rA2 , ....}
contains all elements in A besides rA1.
0
rA1rA2
N/2
N
Evangelia Anna Markatou and Roberto Tamassia
Given the two responses the PQ tree will be able to at least tell that rA1 is
Similarly, given some rAk , and rAk+1,
to the left (or to the right) of rA2 and all the other elements in A.
responses
{rAk , rAk+1, ....}, and a response that contains {rAk+1, ....}. When she updates
the PQ tree with the responses, the PQ tree will again be able to tell that rAk
is to the left (or to the right) of rAk+1 and all the other elements in A higher
than rAk+1.
the attacker
sees
In this way, the attacker can order all elements in A, and get
rA1 − rA2 − .... − rAmax .
The attacker knows this order, but doesn’t know if rA1 or rAmax is the smallest
element. Using a similar argument, accompanied by Lemma 3, the attacker can
order all elements in B.
rB1 − rB2 − .... − rBmax.
With only the above information, the PQ tree will be equivalent to one whose
root will have two children P nodes. The ﬁrst P node will contain the elements
in A and the second P node will contain the elements in B.
It remains to show that the PQ tree can connect the two together. According
to Lemma 4, the client will issue some query [a, b], which is not of the form
[N/2 − i, N/2 + i + 1], and starts in A − {1} and ends in B − {N}. As the
database is dense, this query will result to a set S that contains some records
from A and some records from B. Importantly, this query doesn’t query 1 or N ,
and breaks the symmetry if all other queries were of the form [N/2−i, N/2+i+1].
Because the query returns only a subset of A and a subset of B, the PQ tree is
able to deduce that rAmax and rB1 are contained in S, and thus must be next
to each other. Thus, the PQ tree will return the following order:
rA1 − rA2 − .... − rAmax − rB1 − rB2 − .... − rBmax .
Thus, we conclude by Union Bound, that after 8.2N log N + 4 log N queries
the attacker can reconstruct the dense database with probability greater than
1 − 3
N 3 .
(cid:117)(cid:116)
Below, we prove the Lemmas used above.
Lemma 2. After 4.1N log N uniformly at random queries, for each value a ∈ A,
the client issues a query [a, b], for some b ∈ B with probability greater than 1− 1
N 3 .
Proof. Let’s look at one value a ∈ A. There are N/2 values b ∈ B. The proba-
bility that a single query issued is of the form [a, b] is
N/2
N (N + 1)/2
=
1
N + 1
.
Full Database Reconstruction with Access and Search Pattern Leakage
After 4.1N log N queries, the probability that no query is of the desired form
is
(cid:16)
1 − 1
N + 1
(cid:17)4.1N log N ≤
1
e4 log N ≤ 1
N 4 .
Now, let’s look at every a ∈ A. After 4.1N log N queries, by Union Bound
the probability that for at least one a the client doesn’t issue a query of the form
[a, b] is less than
N · 1
N 4 ≤ 1
N 3 .
(cid:117)(cid:116)
Lemma 3. After 4.1N log N uniformly at random queries, for each value b ∈ B,
the client issues a query [a, b], for some a ∈ A with probability greater than 1− 1
N 3 .
The proof follows similarly to Lemma 2.
Lemma 4. After 4 log N uniformly at random queries, the client issues a query
[a, b] that is not of the form [N/2 − i, N/2 + i + 1], for some a ∈ A − {1},
b ∈ B − {N}, and i ∈ [1, N/2), with probability greater than 1 − 1
N 3 .
Proof. There are N/2 − 1 desirable queries that start on each a ∈ A − {1}, as
2 − 1) queries
one of them is not of the desired form. Thus, there are ( N
of desired form.
Thus, the probability that a query issued is not of the form [N/2 − i, N/2 +
2 − 1)( N
i + 1] is
2 − 1)( N
( N
2 − 1)
N (N +1)
2
≤ 1
4
,