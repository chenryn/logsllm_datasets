title:A Measurement-Based Traffic Profile of the eDonkey Filesharing Service
author:Kurt Tutschku
A Measurement-Based Traﬃc Proﬁle of the
eDonkey Filesharing Service
Kurt Tutschku
Institute of Computer Science, University of W¨urzburg,
Am Hubland, D-97074 W¨urzburg, Germany.
PI:EMAIL
Abstract. Peer-to-peer ﬁle sharing applications have evolved to one of
the major traﬃc sources in the Internet. In particular, the eDonkey ﬁle
sharing system and its derivatives are causing high amounts of traﬃc
volume in today’s networks. The eDonkey system is typically used for
exchanging very large ﬁles like audio/video CDs or even DVD images. In
this report we provide a measurement based traﬃc proﬁle of the eDonkey
service. Furthermore, we discuss how this type of service increases the
”mice and elephants” phenomenon in the Internet traﬃc characteristics.
1 Introduction
Peer-to-peer (P2P) ﬁle sharing applications have evolved to the major traﬃc
sources in the Internet. In particular, the eDonkey2000 P2P ﬁle sharing system
[1] and its derivatives [2,3] are causing high amounts of traﬃc volume [4]. The
eDonkey1 system is typically used for exchanging very large ﬁles like CDs or even
complete DVDs images. The service is highly robust and obtains considerable
short download times. P2P ﬁle sharing traﬃc is considered to be hazardous for
networks. This view is mainly due to the high traﬃc volume but also caused by
the transfer of very large ﬁles. The latter feature might increase the ”mice and
elephants” phenomenon in Internet traﬃc [5,6]. The phenomenon describes that
the traﬃc consists of mainly short transfers (referred to as ”mice”) and long
transfers (referred to ”elephants”). Elephant streams are considered harmful for
the network since they clog the system whereas mice may reduce the throughput
if issued with high frequency [7].
The aim of this paper is to provide a traﬃc proﬁle for the eDonkey service.
The focus of the study is on the distinction of non-download traﬃc and down-
load traﬃc. In addition, we discuss the ”mice and elephants” characteristic in
eDonkey and the origin and destination of eDonkey ﬂows. The paper is organized
as following. Section 2 outlines the eDonkey architecture and protocol. Section 3
describes at brieﬂy the measurement setup and focuses on the measurements.
Section 4 discusses related work on P2P behavior and traﬃc models. Section 5
summarizes the measurement results and provides a brief outlook.
1 In this paper we subsume eDonkey2000 and all its derivatives by the single term
eDonkey.
C. Barakat and I. Pratt (Eds.): PAM 2004, LNCS 3015, pp. 12–21, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
A Measurement-Based Traﬃc Proﬁle of the eDonkey Filesharing Service
13
eDonkey
eDonkey
Network
Network
client M
client M
client O
client O
client N
client N
client P
client P
Server  Layer
Server  Layer
Sever B
Sever B
6
6
Server A
Server A
6
6
Server C
Server C
partly available 
partly available 
file 
file 
client E
client E
3
3
client F
client F
1
1
client G
client G
6
6
client E
client E
2b
2b
2a
2a
Server D
Server D
client L
client L
client L
4
4
client H
client H
client I
client I
client J
client J
client K
client K
5
5
client L
client L
partly available 
partly available 
file 
file 
Fig. 1. eDonkey Communication
2 The eDonkey P2P File Sharing Service
The main features of eDonkey P2P ﬁle sharing application are: a) it doesn’t rely
on a single central server, b) a ﬁle can be downloaded from several diﬀerent peers
at once, and c) a ﬁle can be shared by a peer before it is completely obtained.
The eDonkey protocol appears is not oﬃcially documented. A details have been
obtained recently through reverse engineering [2,3,8].
Architecture and Operation: The eDonkey ﬁle sharing service belongs to the
class of hybrid P2P architectures. Its architecture comprises two applications
which form the eDonkey network: the eDonkey client2 and the eDonkey server,
cf. Figure 1. The eDonkey client is used to share and download ﬁles. The eDonkey
server operates as an index server for ﬁle locations and distributes addresses of
other servers to clients3. In the eDonkey network no ﬁles are transmitted through
the server. Every eDonkey user is eligible to setup a server.
Searching and Sharing of Files: When a client connects to the eDonkey
service, it logs on to one of the servers (using a TCP connection) and registers
all ﬁles it is willing to sharing, cf. 1 in Figure 1. Each server keeps a list of all
ﬁles shared by the clients connected to it. When a client searches a ﬁle, cf. 2a
in Figure 1, it sends the query to its main server. The server returns a list of
matching ﬁles and their locations. The client may resubmit the query to another
server, cf. 2b , if none or an insuﬃcient number of matches have been returned.
The major communication between client and server is typically implemented
by TCP connections on port ’4661’. Additional communication between clients
and servers, e.g. further queries and their results, are transmitted via UDP on
port ’4665’.
2 The terms ”client” and ”peer” are exchangeable in the context of eDonkey.
3 In addition, eDonkey clients may also distribute server addresses among each other.
14
K. Tutschku
Downloading of Files: When an eDonkey client decides to download a ﬁle, it
ﬁrst gathers a list of all potential ﬁle providers and then asks the providing peers
for an upload slot, see 3 in Figure 1. Upon reception of a download request,
the providing client places the request in its upload queue. A download request
is served as soon as it obtains an upload slot. eDonkey clients may restrict
their total upload bandwidth to a given limit. An upload slot comes available
when a minimum fair share of the upload limit is possible. When an upload slot
is available, the providing client initiates a TCP connection to the requesting
client, negotiates which chunk of the ﬁle is exchanged, and transmits the data.
The eDonkey protocols splits the ﬁle into separate pieces, denoted as chunks.
A chunk has typically a size of 10MBytes. The consuming client can reassemble
the ﬁle using the chunks or parts of chunks. A client can share a ﬁle as soon as it
a has received a complete chunk, see 4 in Figure 1. A major feature of eDonkey
is that the consuming client may operate in the multiple source download mode,
cf. 5 in Figure 1. In this mode, the downloading client issues in parallel two or
more requests to diﬀerent providing clients and retrieves data in parallel from
the providers.
Since an eDonkey client may leave the eDonkey service at any time, the
requesting client has to renew its download request periodically otherwise the
requests are dropped. In order to reliably check the availability of a client, the
eDonkey protocol uses TCP connections on port ’4662’ for the communication
between the clients. A client-to-client connection is terminated by the eDonkey
application after an idle period of 40sec. It is worth to be mentioned here, that
other P2P ﬁle sharing applications like Bearshare [9] or KaZaA [10] have imple-
mented similar multiple source download schemes.
Server-to-Server Communications: The communication between eDonkey
servers is very limited, cf. 6 in Figure 1. The servers contact each other peri-
odically but with small frequency in order to announce themselves and to send
back a list of other servers. In this way the servers maintain an updated list of
working servers and aﬃrm the search eﬃciency of the eDonkey service.
3 eDonkey Traﬃc Proﬁle
3.1 Measurement Setup
The measurements in this paper have been carried out in Aug. 2003 over a
duration of 296h on a 100Mbps, half duplex FE link connecting the department
with the university’s campus LAN. The Internet connection of the university is a
155Mbps link to the German Research Network (DFN). The measurements were
performed on ﬂow level using TCPdump which was conﬁgured to record all TCP
ﬂows on the eDonkey client-to-client port ’4662’. The ﬂows were classiﬁed in an
semi-oﬀ-line procedure into non-download streams and download ﬂows, which
contain at least one of the eDonkey / eMule protocol opcodes ’OP_SENDINGPART’
or ’OP_COMPRESSEDPART’.
A Measurement-Based Traﬃc Proﬁle of the eDonkey Filesharing Service
15
Table 1. General Data on the Investigated eDonkey Data Set
number of observed TCP connections on port ’4662’ 3431743
number of local hosts
number of foreign hosts
total transmitted volume in all ﬂows
total transmitted volume in download connections
number of download connections
number of inbound download connections
number of outbound download connections
25
242067
2.95 · 1011bytes
2.08 · 1011bytes (70.5%)
(2.24%)
77111
(27.7%)
21344
55767
(72.3%)
Since the eDonkey protocol is semi-proprietary, it can’t be excluded that
the observed non-download ﬂows contain also download traﬃc. The analysis
given below show that a misclassiﬁcation is quite unlikely. For the rest of the
paper we denote a TCP connection as inbound if it was initiated by a eDonkey
client residing outside the department network. A TCP connection is said to be
outbound if it was initiated by a client inside the department’s LAN.
3.2 Traﬃc Proﬁle
Table 1 provide general statistic values on the data set of the measurement. In
total almost 3.5 million ﬂows have been investigated which were carrying 295
Gbyte of data (non-download and download). Only 2.24% of all connections were
download connections. However, they were carrying 705% of the total traﬃc.
eDonkey Flowsize: The average observed eDonkey ﬂow size during the mea-
surements was 86Kbytes, cf. Table 2. A more detailed inspection shows that
the average size of download streams (2.48Mbytes) is two orders of magnitudes
larger than the average size of non-download streams (16.7Kbytes). This feature
doesn’t change much when the direction of the ﬂows is considered, i.e. it doesn’t
diﬀer for inbound and outbound ﬂows. Figure 2 depicts the complementary cu-
mulative distribution function (CCDF) of the ﬂow sizes. Part (a) and (c) of
Figure 2 shows that the download ﬂow size decreases stronger than linear in the
log/log plot. That means that the ﬂow sizes don’t show a strong ”heavy tailed”
feature. An approximation of the observed data with a lognormal distribution
achieves a good estimate. The reduced strength of the heavy tail feature is not
expected, but can be explained: the download ﬂows are limited due to the seg-
mentation of ﬁles into chunks and due to the application of the multiple source
download principle.
Part (b) and (d) of Figure 2 depicts the size of non-download ﬂows. The pro-
bability that a ﬂow is larger than a given value decreases almost exponentially
until a limit of approx. 14Kbytes. Beyond this limit, the decrease is not regular.
This is an expected behavior since non-download ﬂows are typical signalling
ﬂows to renew requests. The above observed features in the ﬂow sizes indicate
that the ”mice and elephants” phenomenon has not been worsen by eDonkey .
16
K. Tutschku
Table 2. eDonkey Flow Statistics
TCP connection interarrival time (all directions)
download TCP connection interarrival time (inbound)
download TCP connection interarrival time (outbound)
non-download TCP connection interarrival time (inbound)
non-download TCP connection interarrival time (outbound)
ﬂow size (all directions)
download ﬂow size (inbound)
download ﬂow size (outbound)
non-download ﬂow size (inbound)
non-download ﬂow size (outbound)
TCP connection holding time (all directions)
download TCP connection holding time (inbound)
download TCP connection holding time (outbound)
non-download TCP connection holding time (inbound)
non-download TCP connection holding time (outbound)
plain bandwidth (all directions)
download plain bandwidth (inbound)
download plain bandwidth (outbound)
non-download plain bandwidth (inbound)
non-download plain bandwidth (outbound)
busy bandwidth (all directions)
download busy bandwidth (inbound)
download busy bandwidth (outbound)
non-download busy bandwidth (inbound)
non-download busy bandwidth (outbound)
std. deviation
0.379 sec
61.4 sec
23.2 sec
1.04 sec
0.745 sec
average
0.310 sec
49.9 sec
19.1 sec
0.830 sec
0.515 sec
86.0 kbytes 5.79 Mbytes
3.28 Mbytes 15.8 Mbytes
2.48 Mbytes 5.32 Mbytes
42.3 kbytes 7.17 Mbytes
15.7 kbytes 4.49 Mbytes
67.9 sec
1010 sec
851 sec
47.7 sec
49.7 sec
109 bps
2.77 kbps
2.41 kbps
44.9 bps
59.9 bps
716 bps
3.20 kbps
2.80 kbps
322 bps
878 bps
265 sec
1460 sec
1500 sec
39.2 sec
78.4 sec
23.7 kbps
5.17 kbps
2.55 kbps
4.61 kbps
30.2 kbps
404 kbps
5.54 kbps
2.95 kbps
4.75 kbps
520 kbps
TCP Holding Time: The average eDonkey connection holding time on TCP
level is 67.9 sec, cf. Table 2. As for the ﬂow sizes, there is a signiﬁcant diﬀe-
rence between download and non-load ﬂows. The mean duration of download
connections is 851sec. This more than one orders of magnitudes longer than the
duration of non-download streams, which is 47sec. However, the standard devia-
tion of the ﬂow duration is much larger for download ﬂows than for non-download
(b) Non-download, Outbound
(b) Non-download, Outbound
strong decay
strong decay
(a) Download, Outbound
(a) Download, Outbound
Lognormal approx.
Lognormal approx.
100
100
10-1
10-1
10-2
10-2
10-3
10-3
10-4
10-4
10-5
10-5
100
100
10-1
10-1
10-2
10-2
10-3
10-3
10-4
10-4
10-5
10-5
F
F
D
D
C
C
C
C
100
100
102
102
104
104
106
106
108
108
1010
1010
100
100
102
102
104
104
106
106
108
108
1010
1010
Flow Size [byte]
Flow Size [byte]
(d) Non-download, Inbound
(d) Non-download, Inbound
Flow Size [byte]
Flow Size [byte]
(c) Download, Inbound
(c) Download, Inbound
Lognormal approx.
Lognormal approx.
100
100
10-1
10-1
10-2
10-2
10-3
10-3
10-4
10-4
10-5
10-5
100
100
10-1
10-1
10-2
10-2
10-3
10-3
10-4
10-4
10-5
10-5
F
F
D
D
C
C
C
C
F
F
D
D
C
C
C
C
F
F
D
D
C
C
C
C
100
100
102
102
104
104
106
106
108
108
1010
1010
100
100
102
102
104
104
106
106
108
108
1010
1010
Flow Size [byte]
Flow Size [byte]
Flow Size [byte]
Flow Size [byte]
Fig. 2. CCDF of the observed eDonkey Flow Size
A Measurement-Based Traﬃc Proﬁle of the eDonkey Filesharing Service
17
100
10-2
10-4
F
D
C
C
10-6
100
100
10-2
10-4
F
D
C
C
10-6
100
(a) Download, Outbound
101
102
103
104
105
Holding Time [sec]
(c) Download, Inbound
101
102
103
104
105
Holding Time [sec]
100
10-2
10-4
F
D
C