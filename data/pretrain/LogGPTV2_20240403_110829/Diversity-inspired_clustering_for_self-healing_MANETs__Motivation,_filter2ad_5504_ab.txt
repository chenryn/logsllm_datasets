16201324262112151185254910190876229231122281417273162013242621121511852549101908762292311222814172732716201324262112151185254910190876229231122281417331620132426211215118525491019087622923112228141727Proof. Based on its preliminary N2 knowledge, v will be
aware of the following scenario:
∃u, N1(u) ∪ {u} ⊂ N1(v) ∪ {v},
which can be translated into:
∀w, w ∈ N1(u) − {v} ⇒ w ∈ N1(v).
Then ∀w, w ∈ N1(u)−{v}, v will be able to use its prelim-
inary N2 knowledge to determine if the following condition
holds:
ˆN1(w) (cid:54)= ∅ ∧ ˇN1(w) (cid:54)= ∅
Hence, by learning that aside from v itself, none of u’s
neighbors are qualiﬁed to be CHs, v will be able to con-
ﬁrm that v itself is the CH of the sole cluster with which u
is afﬁliated.
Q.E.D.
On the other hand, when a CH candidate v conﬁrms that
its cluster is redundant, v will change its CH status to be
passive. For simplicity, we use the word withdraw to refer
to that type of CH status change. In addition, if v’s con-
ﬁrmation is made according to Deﬁnition 2, then v’s with-
drawal will be safe (because the withdrawal will not cause
any nodes to become unclustered). Conversely, when v is
unable to conﬁrm whether its cluster is redundant based on
that deﬁnition, then its withdrawal will be unsafe.
To illustrate the idea of redundancy shadowing, we re-
visit the example shown in Figure 1. We observe that node
0 withdraws its CH candidacy (which is suggested by the
Min-ID policy). The reason is that the cluster completely
overlaps with two inclusion-type non-redundant clusters
(centered at nodes 25 and 29), both of which contain nodes
having sole cluster afﬁliations with them. Note that node 27
also withdraws its CH candidacy (which is suggested by the
Max-ID policy), as all the nodes in the cluster, including the
CH itself (node 27), are overlapped with an inclusion-type
non-redundant cluster in which node 3 is the CH.
3.3 Algorithm
Just like a typical ID-based protocol, SCP forms clus-
ters through two neighborhood proﬁle exchanges (NPEs).
In order to efﬁciently utilize the neighborhood knowledge,
redundancy shadowing correspondingly has a two-stage re-
alization. The algorithm is shown below and is explained
according to the ordering of stages.
First Neighborhood-Proﬁle Exchange
shown in Algorithm 1,
during the ﬁrst NPE
As
is a 3-
(line 4), each node sends a message that
tuple (cid:104)ID(v), N1(v), CHstatus(v)(cid:105).
The third ﬁeld
CHstatus(v) indicates whether v is a CH candidate, and
Algorithm 1 Superimposed Clustering
1: send(ID(v));
2: N1(v) ← receive(integerSet);
3: CHstatus(v) ← MAXorMIN(ID(v),N1(v));
4: send(ID(v),N1(v),CHstatus(v));
5: cRegistry(v) ← digest(receive(3-tupleSet));
6: neighborCHs(v) ← identifyCHs(cRegistry(v));
7: Stage-1-RedundancyShadowing(cRegistry(v));
8: send(ID(v), CHstatus(v), neighborCHs(v));
9: cRegistry(v) ← digest(receive(3-tupleSet));
10: Stage-2-RedundancyShadowing(cRegistry(v));
11: identifyGWs(cRegistry(v));
// 1st NPE
// 2nd NPE
min.
by which clustering policy v is qualiﬁed if v is a CH can-
didate. Since the nodes do not yet have N2 knowledge yet
at that point, CH candidates mark themselves as tentative
CHs, i.e., CHtv
max or CHtv
By receiving the messages from all its neighbors, v will
obtain the preliminary N2 knowledge, and will be able to
identify 1) whether any of its neighbors are qualiﬁed to be-
come CH candidates, and 2) how many such candidates are
in v’s neighborhood. The digested N2 knowledge will then
be stored into v’s cluster registry (cRegistry).
In addition, the ﬁndings about the CH candidates in
N1(v) will be recorded in an array neighborCHs (line
6 of Algorithm 1). Each entry of the array is a pair
(cid:104)HID, CHtype(cid:105) in which HID is the ID of a CH candi-
date in v’s neighborhood and CHtype indicates by which
policy the CH candidate is qualiﬁed. Then v becomes ready
to enter the stage-1 redundancy shadowing.
Stage-1 Redundancy Shadowing
The ﬁrst stage of redundancy shadowing is a preparation
stage. Equipped with the N2 knowledge, a node v that is a
CH candidate will be able to check (see Theorem 2) its po-
tential cluster to see if it is an inclusion-type non-redundant
cluster based on Deﬁnition 3 (see line 3 of Algorithm 2 be-
low). If conﬁrmed, v will mark itself as CHnr
max or CHnr
min.
Otherwise, its candidate status will remain tentative.
if inclusionTypeNonRedundant(cRegistry(v)) then
Algorithm 2 Stage-1 Redundancy Shadowing
1: Stage-1-RedundancyShadowing(3-tupleSet)
2: if CHstatus(v) (cid:54)= null then
3:
4:
5:
6: else if | neighborCHs(v) |= 1 then
7:
8: end if
conﬁrmNonRedundant(CHstatus(v));
end if
conﬁrmNonRedundant(neighborCHs(v)[1].CHtype);
If v is not a CH candidate, it will be able to learn (see
Theorem 1), per the information in neighborCHs, whether
v has a sole cluster afﬁliation. If the result is positive, v
will mark the CH of the sole cluster with which v is afﬁli-
ated as the CH of a non-redundant cluster. The updates thus
collectively elaborate the preliminary N2 knowledge.
Second Neighborhood-Proﬁle Exchange
The elaborated N2 knowledge is then exchanged among
the nodes in the second NPE (line 8 of Algorithm 1).
Each message is again a 3-tuple. But the 3-tuple now is
(cid:104)ID(v), CHstatus(v), neighborCHs(v)(cid:105). The second ﬁeld
may show its updated CH status if v is a CH candidate (e.g.,
from CHtv
min), while the third ﬁeld will tell whether
it has a sole cluster afﬁliation if v is not a CH candidate.
min to CHnr
Stage-2 Redundancy Shadowing
Upon the completion of the second NPE, v ﬁrst updates its
cluster registry based on the elaborated N2 knowledge ob-
tained from the neighbors. Then, based on the organized
knowledge, v carries out stage-2 redundancy shadowing, as
shown in Algorithm 3.
if redundantCluster(clusterRegistry(v)) then
Algorithm 3 Stage-2 Redundancy Shadowing
1: Stage-2-RedundancyShadowing(3-tupleSet)
2: if CHstatus(v) (cid:54)= null then
3:
4:
5:
6:
7:
8: end if
conﬁrmNonRedundant(CHstatus(v));
else if nonRedundant(clusterRegistry(v)) then
goShadow(CHstatus(v));
end if
In particular, if a CH candidate v sees from its cRegistry
that all the potential CMs and v itself are included in the
CM lists of non-redundant clusters, v will determine (based
on Deﬁnition 2) that its potential cluster is redundant and
update its status as a passive CH (line 4 of Algorithm 3).
Conversely, if v sees in its cRegistry that a node u that is
not a CH candidate has only one CH candidate in its neigh-
borhood and that the candidate is v itself, v will change its
status to CHnr
min (based on Deﬁnition 1).
max or CHnr
Table 1 shows a sample cluster registry maintained by
node 0 in the running example illustrated by Figure 1. Note
that the entries without and with a mark ∗ are updated by the
ends of stage-1 and stage-2 redundancy shadowing, respec-
tively. For example, nodes 25 and 29 learn, based on prelim-
inary N2 knowledge, that their clusters are non-redundant
(per Theorem 2). Thus, they mark themselves accord-
ingly during the stage-1 redundancy shadowing. However,
node 0 is unable to determine its status until after nodes 25
and 29 have made their “non-redundant” announcements
in the second NPE. Therefore, node 0 changes its status
from CHtv
min (per Deﬁnition 2) during the stage-
2 redundancy shadowing. Meanwhile, node 0 updates the
min to CHps
CHstatus ﬁelds of nodes 25 and 29 per what node 0 has
learned from their announcements in the second NPE.
Table 1: A Cluster Registry
ID(u)
0
25
29
. . .
N1(u)
4,5,8 . . .
0,4,5 . . .
0,2,8 . . .
. . .
CHstatus(u)
∗
∗
∗
ps
CH
min
CHnr
max
CHnr
max
. . .
25∗, 29∗
neighborCHs(u) GW(u)
yes∗
no∗
no∗
. . .
0∗
0∗
. . .
In addition, cluster registries make gateway selection
straightforward. As shown in Table 1, GW qualiﬁcation
of each node can be determined per the multiplicity of
neighborCHs. So after the second-stage redundancy shad-
owing, cluster registries will offer adequate information for
gateway selection and route discovery on the backbone.
3.4 Discussion
As mentioned earlier, our goal is to provide swarm sys-
tems with better self-healing ability. For cluster-based
swarm systems, self-healing is supposed to be accom-
plished through circumventing or mitigating the effects of
excessive clustering coverage degradation.
It is notewor-
thy that there are two types of coverage degradation. The
ﬁrst type is gradual coverage degradation caused by normal
host mobility. With a protocol that is efﬁcient enough and
has a predictable clustering time, such as the single-round
SCP, proactive reclustering would be more cost-effective
than frequent cluster maintenance, in terms of preventing
excessive system-wide coverage deterioration.
The second type is unexpected cluster damage caused
by CH failure, death, or abrupt departure. In those circum-
stances, a passive CH will reactively take over from the CH
that loses serviceability to let the affected cluster maintain
gracefully degradable performance (and will adjust its po-
sition to progressively improve the coverage), until the next
epoch of reclustering. Such a mechanism is indeed both re-
active and proactive in nature in the sense that the passive
CH is predesignated by SCP.
Moreover,
in systems that apply superimposed clus-
tering, passive-CH-enabled recovery is advantageous over
event-triggered local CH reelection. The reason is that the
latter is likely to 1) result in unexpected service disruption,
and 2) be more costly, since all the hosts must be location-
aware all the time (as otherwise the computation overhead
of reelection would worsen the service disruption).
More importantly, passive CHs are inherent redundan-
cies resulting from superimposed clustering (meaning that
there is no extra cost for attaining the redundancy). Thus,
the readiness of a passive CH enables the affected cluster to
be recovered with little service disruption.
To further explain the concept, we could revisit the run-
ning example depicted in Figure 1. But now we assume that
node 3 has failed. Hence, as illustrated in Figure 1(d), the
passive CH, node 27, takes over from node 3.
4 Performability Evaluation
4.1 Measures and Formulation
In order to evaluate the effectiveness of SCP, we deﬁne
three types of performability measures concerning 1) the
efﬁciency of SCP with respect to the coverage achieved in
a single round, 2) the likelihoods of clustering redundancy
from the perspectives of a CH and a CM, and 3) the grace-
fully degraded coverage when a passive CH takes over from
a CH that loses serviceability.
Clustering Efﬁciency
For the measure of the ﬁrst type, we choose to evaluate
P scp
hm (v), the probability that a node v will become afﬁli-
ated with a cluster, as either a CH or a CM, through a sin-
gle round of superimposed clustering. Clearly, the value of
P scp
hm (v) will depend upon the value rank of its ID and the
size of its neighborhood. Therefore, we must ﬁrst evaluate
the conditional probabilities. In addition, as node IDs are
unique but are not necessarily consecutive, we give each
node an ordinal number to rank the value of its ID. (Note
the ordinal numbers are unique and consecutive.) Then, if
we let P scp
h (v) denote the probability that node v will be
clustered as a CH and assume that hosts are approximately