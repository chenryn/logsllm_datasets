title:Provably secure ciphertext policy ABE
author:Ling Cheung and
Calvin C. Newport
Provably Secure Ciphertext Policy ABE
∗
Ling Cheung
MIT CSAIL, Cambridge, MA, USA
PI:EMAIL
†
Calvin Newport
MIT CSAIL, Cambridge, MA, USA
PI:EMAIL
ABSTRACT
In ciphertext policy attribute-based encryption (CP-ABE),
every secret key is associated with a set of attributes, and
every ciphertext is associated with an access structure on
attributes. Decryption is enabled if and only if the user’s
attribute set satisﬁes the ciphertext access structure. This
provides ﬁne-grained access control on shared data in many
practical settings, e.g., secure database and IP multicast.
In this paper, we study CP-ABE schemes in which ac-
cess structures are AND gates on positive and negative at-
tributes. Our basic scheme is proven to be chosen plaintext
(CPA) secure under the decisional bilinear Diﬃe-Hellman
(DBDH) assumption. We then apply the Canetti-Halevi-
Katz technique to obtain a chosen ciphertext (CCA) secure
extension using one-time signatures. The security proof is a
reduction to the DBDH assumption and the strong existen-
tial unforgeability of the signature primitive.
In addition, we introduce hierarchical attributes to op-
timize our basic scheme—reducing both ciphertext size and
encryption/decryption time while maintaining CPA security.
We conclude with a discussion of practical applications of
CP-ABE.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Security, Theory
Keywords
Access Control, Attribute-Based Encryption, Public Key
Cryptography
∗Cheung was supported by NSF Award #CCR-0326277.
†Newport was supported by NSF Award #CCR-0121277
and USAF, AFRL Award #FA9550-04-1-0121.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ..$5.00.
1.
INTRODUCTION
In traditional public key crypto systems, the communi-
cation model is one-to-one, in the sense that any message
encrypted using a particular public key can be decrypted
only with the corresponding secret key. The same holds for
identity-based encryption (IBE) [14], where user public keys
can be arbitrary bit strings such as email addresses. In prac-
tice, however, many applications of encryption are natural
examples of one-to-many communication. For instance, doc-
uments in a shared database are accessed by multiple users,
and cable television programs are viewed by multiple sub-
scribers.
One-to-many communication can be secured using one-to-
one public key cryptosystems in a straightforward manner.
For example, a sender may encrypt data with a symmet-
ric encryption key, and distribute this data key to every
intended receiver using public key encryption. This general
scheme is simple to implement, but ineﬃcient in the number
of encryption operations and in the size of ciphertexts (both
linear in the total number of intended receivers). A better
solution is broadcast encryption [8, 11, 2], where a sender
speciﬁes a set of receivers (or revoked users) during encryp-
tion. Any intended receiver can decrypt using his secret key,
while revoked users cannot—even if they collude.
Although broadcast encryption is eﬃcient, it requires that
receivers are represented individually. A sender must main-
tain a list of prospective receivers, as well as authorization
information associated with each receiver. In order to derive
a receiver set for a particular message, the sender queries his
receiver database with some appropriate policy information.
In some application scenarios, it is desirable to be able to
encrypt without exact knowledge of the set of intended re-
ceivers. For example, in a secure database of an intelligence
agency, one may specify that a certain document can be ac-
cessed only by agents in the domestic surveillance program.
In that situation, it is much more natural to encrypt to the
single attribute “domestic spy”, instead of an enumerative
list of all domestic spies. (It is conceivable that the sender
is not even authorized to obtain such a list.)
Attribute-Based Encryption. Attribute-based encryption
(ABE) oﬀers this desired ability to encrypt without exact
knowledge of the receiver set. It enforce access policies, de-
ﬁned on attributes, within the encryption procedure. This
idea was ﬁrst introduced by Sahai and Waters (SW) as an
application of their fuzzy IBE scheme [13], where both ci-
phertexts and secret keys are associated with sets of at-
tributes. Decryption is enabled if and only if the cipher-
456text and secret key attribute sets overlap by at least a ﬁxed
threshold value d.
Two variants of ABE were subsequently proposed. In the
key policy variant (KP-ABE) of Goyal, Pandey, Sahai and
Waters (GPSW) [10], every ciphertext is associated with
a set of attributes, and every user secret key is associated
with a threshold access structure on attributes.1 Decryp-
tion is enabled if and only if the ciphertext attribute set
satisﬁes the access structure on the user secret key. In the
ciphertext policy variant (CP-ABE) of Bethencourt, Sahai
and Waters (BSW) [1], the situation is reversed: attributes
are associated with user secret keys and access structures
with ciphertexts.
To date, all existing ABE schemes involve some form of
threshold secret sharing construction. In [13, 10], shares of
a system master secret are embedded into user secret keys,
while in [1] shares of the randomness in an encryption are
embedded into ciphertext components.
In this paper, we
break from this tradition and consider AND-gates on posi-
tive and negative attributes as our access structures. In this
simpler setting, we obtain eﬃcient schemes that are prov-
ably secure under standard complexity assumptions. Since
AND gates are suﬃcient in many application scenarios, our
approach retains signiﬁcant potential.
Our Contributions. We ﬁrst present a CP-ABE scheme
that is chosen plaintext (CPA) secure under the Decisional
Bilinear Diﬃe-Hellman (DBDH) assumption. Access struc-
tures in this scheme are AND-gates on positive and negative
attributes. We then apply the Canetti-Halevi-Katz tech-
nique to obtain a chosen ciphertext (CCA) secure exten-
sion, using one-time signatures. The security proof is a re-
duction to the DBDH assumption and the strong existential
unforgeability of the signature primitive. Since strongly ex-
istentially unforgeable signatures can be constructed under
the standard computational Diﬃe-Hellman (CDH) assump-
tion [3], the security of our CCA scheme reduces to DBDH
and CDH. To the best of our knowledge, this is the ﬁrst
formal CCA security proof for CP-ABE.
We observe that attributes can be arranged into logical
hierarchies, which in turn can be used to improve the eﬃ-
ciency of our basic scheme. Essentially, a hierarchy allows us
to use fewer group elements to represent all attributes in the
system, thereby reducing the ciphertext size, the number of
exponentiations in encryption and the number of pairings
in decryption. This optimized scheme is proven to be CPA
secure.
Finally, we note that policies in the form of disjunctive
normal form formulas can be enforced by encrypting the
same message to every AND gate in the formula. We discuss
some subtleties in the security of this proposal, and leave the
formal proof as important future work.
Related Work. As mentioned above, the concept of ABE
was proposed in [13] and later extended in [10, 1]. Both the
fuzzy IBE scheme of [13] and the KP-ABE scheme of [10]
are proven secure under the DBDH assumption. For the CP-
ABE scheme of [1], there appears to be inherent diﬃculties
in reducing security to a well-known complexity assumption.
Mostly likely, this is due to the way in which secret key com-
ponents are “tied together” to avoid collusion attacks. In-
deed, in this paper we use a diﬀerent technique to bind secret
key components and we are able to prove security based on
DBDH. The trade-oﬀ inherent in our technique is that ci-
phertext size and encryption/decryption time grow linearly
with n, the total number of attributes in the system. For
small AND gates, the optimization of Section 5 brings the
factor n down to log n. In contrast, the ciphertext size and
encryption/decryption time of the BSW scheme are linear
in the size of the access tree, independent of n.
The authors of [13, 1] suggest that chosen ciphertext secu-
rity can be achieved using the Fujisaki-Okamoto transforma-
tion [9] or the Canetti-Halevi-Katz (CHK) technique [4]. A
more concrete outline is given in [10], using a large universe
construction2 and delegation of user secret keys. In this pa-
per, we implement CCA security without a large universe
construction (and hence without the use of hash functions).
In [5], Chase answers an open problem posed in [13] and
presents a scheme in which (disjoint sets of) attributes are
assigned by multiple authorities. Our technique for bind-
ing together secret key components is similar to Chase’s
technique for “distributing” the system master secret among
multiple attribute authorities. Chase also outlines a CP-
ABE system in which access structures are monotone (i.e.,
no negation) conjunctive normal form formulas. That ap-
proach, however, is ineﬃcient, as each authority corresponds
to one clause in the conjunction and the same attribute ap-
pearing in diﬀerent clauses must be duplicated at every rel-
evant authority.
On the practical side, Pirreti et al.
introduced a secure
information management architecture based on ABE prim-
itives [12]. The original SW scheme is implemented and
optimized.
It is also shown that complex policies can be
implemented eﬃciently using constructions that are secure
in the random oracle model.
Overview. Section 2 deﬁnes the CP-ABE primitive and the
CPA security game. Section 3 presents the basic construc-
tion for AND gates and the CPA security proof. Section 4
introduces the CCA security game and our CCA secure
scheme. A more eﬃcient version of the basic scheme is pre-
sented in Section 5, and a heuristic is given in Section 6
for disjunctive normal form policies. Finally, two applica-
tions scenarios (selective data sharing and group key man-
agement) are described in Section 7, and concluding remarks
follow in Section 8.
2. CIPHERTEXT POLICY ABE
Intuitively, an access structure on attributes is a rule W
that returns either 0 or 1 given a set S of attributes. We
say that S satisﬁes W (written S |= W ) if and only if W
answers 1 on S. As mentioned in Section 1, access structures
may be Boolean expressions, threshold trees, etc.
A ciphertext policy attribute-based encryption (CP-ABE)
system consists of four fundamental algorithms: Setup, En-
crypt, KeyGen and Decrypt.
1In [10], an access structure is a tree in which every inter-
nal node is a threshold gate and every leaf is labeled by an
attribute.
2In a large universe construction, any bit string can be used
as an attribute, provided each encryption involves no more
than a ﬁxed number of attributes. Additional hashing and
exponentiation operations are required.
Setup. Setup takes as input a security parameter κ and re-
turns a public key PK and a master key MK . The public
key is used for encryption. The master key, held by the
central authority, is used to generate user secret keys.
KeyGen. KeyGen takes as input the master key MK and a
set S ⊆ N of attributes. It returns a secret key SK associ-
ated with S.
Encrypt. Encrypt takes as input the public key PK , a mes-
sage M and an access structure W . It returns a ciphertext
CT such that a secret key generated from attribute set S
can be used decrypt CT if and only if S |= W .
Decrypt. Decrypt takes as input a ciphertext CT and a
secret key SK . It returns the message M if S satisﬁes W ,
where S is the attribute set used to generate SK .
2.1 CPA Security Game for CP-ABE
A CP-ABE scheme is said to be secure against chosen
plaintext attacks (CPA) if no probabilistic polynomial-time
adversaries have non-negligible advantage in this game.
Init The adversary chooses the challenge access structure
W and gives it to the challenger.
Setup The challenger runs the Setup algorithm and gives
the adversary PK .
Phase 1 The adversary submits S for a KeyGen query. Pro-
vided S 6|= W , the challenger answers with a secret key
SK for S. This can be repeated adaptively.
Challenge The adversary submits two messages M0 and M1
of equal length. The challenger chooses µ ∈ {0, 1} at
random and encrypts Mµ to W . The resulting cipher-
text CT is given to the adversary.
Phase 2 Same as Phase 1.
Guess The adversary outputs a guess µ0 of µ.
Notice, collusion resistance follows from the fact the ad-
versary may make multiple secret key queries both before
and after selecting challenge plaintexts. We also point out
that our CPA security game is weaker than that of [1], be-
cause the adversary must submit a challenge access struc-
ture before the setup phase. This is essential in our security
proofs (cf. Sections 3 and 4), because the simulator uses
information from the challenge access structure to set up
public key elements. This weaker form is sometimes called
selective ID security. See the full version of this work for a
discussion of the stronger variant called adaptive ID security,
and its implications for our scheme [7].
3. BASIC CONSTRUCTION
For notational simplicity, let the set of attributes be N :=
{1, . . . , n} for some natural number n. We refer to attributes
i and their negations ¬i as literals. In this section, we con-
sider access structures that consist of a single AND gate
i∈I i, where
I ⊆ N and every i is a literal (i.e., i or ¬i).
whose inputs are literals. This is denoted V
Setup. This algorithm selects:
• a bilinear group G of prime order p, with bilinear map
• random elements y, t1, . . . , t3n in Zp and a random gen-
e : G × G → G1,
erator g of G.
Positive
Negative
Don’t Care
1
T1
2
T2
. . .
3
T3
Tn+1
T2n+1
Tn+2
T2n+2
Tn+3
T2n+3
n
Tn
T2n
T3n
Figure 1: Public Key Components
Let Y := e(g, g)y and Tk := gtk for each k ∈ {1, . . . , 3n}.
The public key is PK := he, g, Y, T1, . . . , T3ni. The master
secret key is MK := hy, t1, . . . , t3ni.
V
if i = i and T s
Intuitively, the public key elements Ti, Tn+i and T2n+i cor-
respond to the three types of occurrences of i: positive, neg-
ative and don’t care. This is illustrated in Figure 1. Because
of the technique we use to randomize secret key components,
we must provide a don’t care element for each attribute i not
appearing in the AND gate. This should become clear after
we introduce KeyGen and Decrypt.
Encrypt. Given a message M ∈ G1 and an AND gate W =
i∈I i, the Encrypt algorithm ﬁrst selects a random s ∈ Zp
and sets ˜C := M · Y s and ˆC := gs. For each i ∈ I, let Ci be
n+i if i = ¬i. For each i ∈ N \ I, let Ci be
T s
i
2n+i. The ciphertext is CT := hW, ˜C, ˆC,{Ci|i ∈ N}i.
T s
In total, Encrypt performs n + 1 exponentiations in G,