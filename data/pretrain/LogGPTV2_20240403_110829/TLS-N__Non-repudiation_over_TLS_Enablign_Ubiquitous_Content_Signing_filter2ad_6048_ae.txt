they use a Merkle tree, however without commitments. However,
they do not include the overall document length in the proof so
that a veri(cid:27)er cannot observe how much data was “redacted”, if
it was “redacted” at the end of the document. Also, their solution
requires a marker in every Merkle tree node which is less e(cid:28)cient.
Further additions to redactable signatures provide transparency [7,
24]. These signatures aim to prevent any inference attacks as they
hide the structural information of the data. Some schemes even
make its impossible for the veri(cid:27)er to observe a redaction. In our
work, we intentionally reveal the fact that data was hidden and its
structural information (P2). Previously motivated [22], we provide
our motivation for this design through the Content Hiding Attack.
Another related solution, Sanitizable Signatures [8], can be gen-
erated by a signer using its private key. They also include the public
key of a designated sanitizer and a division into blocks and admis-
sible. These admissible blocks can later be changed by the sanitizer.
However, in our design there shouldn’t be a designated sanitizer.
To simplify adoption and deployment, any generator-accepted peer
can act as requester.
Authenticated Data Structures [10, 31] achieve a similar goal as
our design. An untrusted party extracts or computes a result based
on a signed construct so that the result correctness can be veri(cid:27)ed
by a third party. However, authenticated data structures are more
aimed at data outsourcing, e.g. for databases.
6.2 Existing and Strawman TLS Solutions
In this section, we look at other solutions to provide non-repudiation
through TLS and present attacks according to our adversarial de(cid:27)-
nition in Section 4. The solutions and their provided properties are
summarized in Table 4.
TLS Sign is a proposed extension [16] for TLS 1.1. TLS Sign de(cid:27)nes
a new sub-protocol (or content type) for TLS called TLSSignOnO(cid:29)
(in addition to the three already existing: Handshake, Application
data, and Alert). Both, client and server can use the TLSSignOnO(cid:29)
9
Evidence
Privacy/Leakage
.
B
e
s
n
o
p
s
e
R
-
t
s
e
u
q
e
R
g
n
i
v
r
e
s
e
r
P
-
r
e
d
r
O
-
n
o
i
t
a
i
d
u
p
e
R
-
n
o
N
NRO
.
I
e
v
i
t
i
s
n
e
S
g
n
i
t
c
e
t
o
r
P
e
m
T
i
y
t
i
r
a
l
u
n
a
r
G
n
o
i
t
c
e
t
o
r
P
y
t
i
l
i
b
a
s
U
-
-
Solutions
TLS Sign
TLS Evidence
MAC Chaining
One Signature
Our Solution
- (cid:32)
NRO, NRR (cid:71)(cid:35) - (cid:71)(cid:35) (cid:32)
(cid:32) (cid:32) (cid:32) -
(cid:32) (cid:32) (cid:32) (cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
-
(cid:32)
(cid:32)
Table 4: Provided properties satis(cid:27)ed by the di(cid:29)erent solu-
tions. (cid:32) = provided property, (cid:71)(cid:35) = partially provided prop-
erty, - = not provided property.
n/a
n/a
Bytes
Record
Record
NRC
NRC
-
-
-
-
messages to notify their peer that they will start or stop transmit-
ting signed data, i.e., the sub-protocol is used to specify the evi-
dence window. In the evidence window, each record is hashed, and
a signature over this hash is generated. When the stop signal is
triggered, the generator gathers all hash signature pairs and sends
them to the requester as evidence.
The development of TLS Sign had stopped before a (cid:27)nal version
was released; thus this extension is incomplete. TLS Sign’s design
presents following disadvantages: TLS Sign is ine(cid:28)cient, because it
requires one asymmetric signature per record within the evidence
window. TLS Sign is vulnerable to content reordering and content
omission attacks. Therefore, TLS Sign only provides NRO and no
timing information or message ordering.
TLS Evidence is a TLS extension [6]. Similar to TLS Sign, the client
expresses his intent to use TLS Evidence in the TLS extension (cid:27)eld.
TLS evidence uses a set of new alert messages to be transmitted
in the existing alert protocol to de(cid:27)ne the evidence window. The
requester sends an alert message and waits (i.e. he is not allowed
to send any messages) for the responding alert. After exchanging
these alerts, the evidence window is open until one of the peers
sends an alert, triggering a corresponding reply. Then, the peers
exchange their certi(cid:27)cates and generate the following evidence: a
signature over a timestamp, a hash over all sent messages, a hash
over all received messages and a hash of the handshake.
TLS evidence has several limitations. First, for human-centered
use cases it is unclear when to start and stop the evidence collec-
tion.Second, since TLS evidence provides a signature over the hash
of all sent and the hash of all received messages, it only provides a
partial order within the sent and the received messages. However,
the total order between sent and received messages is not preserved.
Therefore, TLS Evidence is vulnerable to the content reordering
attack, as seen in Figure 5. Because the evidence window can be
opened after some content has already been transmitted, TLS Evi-
dence is also vulnerable to the content omission attack. Finally, as
the included timestamp is the time of evidence generation, a time
shifting attack is possible. Therefore, TLS Evidence only provides
NRO, NRR, a partial order and upper time bound.
MAC Chaining was described in the IETF mailing list [25] as
combining the already-used Message Authentication Codes (MACs)
of individual records to a MAC over the complete communication.
MAC Chaining suggests including the MAC of the previous record
into the current record and thereby chaining the MAC properties.
Finally, to provide the evidence the last MAC of the communication
is signed to verify the whole stream with very small overhead. Two
variants of MAC Chaining are proposed that either verify only one
side or both sides of the communication.
However, in TLS 1.3 a proof for MAC Chaining would have
to include the TLS tra(cid:28)c secrets used for authenticated encryp-
tion (AEAD) [28] to allow the veri(cid:27)cation of individual MACs.
Given such a proof, including the TLS tra(cid:28)c secrets, the signature
of the last MAC and the conversation content, the adversary can
create proofs with di(cid:29)erent conversation content. In short, the un-
forgeability of P0 is violated. This is because AEAD authentication
tags, for all cipher suites available in TLS 1.3 [38], are not consid-
ered collision resistant if the key is known to the adversary. We
therefore conclude that MAC Chaining provides no non-repudiation
as proofs can be forged given an existing proof.
Signing the complete TLS session from the beginning of the
handshake until one party closes the connection would be one of
the simplest solutions to provide non-repudiation. The evidence
window would thereby cover the complete connection. Similar to
previous work, such an extension would require the inclusion in
the handshake and an additional evidence message at the end of
the session.The evidence would be order-preserving. However, this
solution requires the requester to store all records in order to be
able to compute the (cid:27)nal signature and would necessarily result
in a big proof size. Finally, such a non-repudiation service o(cid:29)ers
no privacy protection. In contrast our record-level approach has
comparably low computational costs, while being more e(cid:28)cient
and providing record-level privacy protection.
Signing content at the application layer could be another non-
repudiation solution, as one could argue that such a functionality
should not be handled at the TLS layer. Two parties can exchange
signed content on the application layer by explicitly requesting to
sign data, or employ already existing protocols such as OpenPGP [9].
Application layer non-repudiation however su(cid:29)ers from several
disadvantages. First, regarding reusability, an application layer solu-
tion would only support a particular protocol/application. Having a
TLS layer solution, however, enables any TLS-based application to
bene(cid:27)t from non-repudiation. Second, an application layer solution
would require that private keys are exposed to the application layer,
contradicting the principle of minimum exposure and that the TLS
layer is responsible of managing the cryptographic keys.
There are existing solutions providing additional authentication
for REST-ful HTTP as studied and extended by Lo Iacono et al. [27].
However, these solutions include di(cid:29)erent HTTP headers, would
have to be extended for future headers and provide authentica-
tion only. A TLS-based non-repudiation solution includes all of
the HTTP tra(cid:28)c and allows the proof contents to be chosen dur-
ing proof generation. Finally, in contrast to the existing solutions,
TLS-based non-repudiation solves the problem of public key au-
thentication by leveraging the already established web-PKI. Using
10
Requester
Generator
Requester
Generator
Requester
Generator
Requester
Generator
Requester
Generator
Requester
Generator
Reqx
CollectEvidence
1 2 3
Reqy
ReturnEvidence
E v i d e n c e ( R e q y + 1 2 3)
9 8 7
w
o
d
n
W
i
e
c
n
e
d
i
v
E
Reqy
1 2 3
TLS Handshake
Reqx
CollectEvidence
ReturnEvidence
Reqy
1 2 3
9 8 7
w
o
d
n
W
i
e
c
n
e
d
i
v
E v i d e n c e ( R e q y|| 1 2 3 ) E
Reqy
1 2 3
CollectEvidence
Authpassword\0
Reqx\0
Reqy\0