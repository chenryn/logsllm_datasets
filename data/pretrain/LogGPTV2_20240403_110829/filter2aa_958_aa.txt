Offensive Windows IPC Internals 3: ALPC 
24 May 2022
Contents:
Introduction
ALPC Internals
The Basics
ALPC Message Flow
ALPC Messaging Details
ALPC Message Attributes
Putting the pieces together: A Sample Application
Attack Surface
Identify Targets
Impersonation and Non-Impersonation
Unfreed Message Objects
Conclousion
Appendix A: The use of connection and communication ports
References
Introduction
After talking about two inter-process communication (IPC) protocols that can be uses remotely as 
well as locally, namely Named Pipes and RPC, with ALPC we’re now looking at a technology that 
can only be used locally. While RPC stands for Remote Procedure Call, ALPC reads out to 
Advanced Local Procedure Call, sometimes also referenced as Asynchronous Local Procedure 
Call. Especially the later reference (asynchronous) is a reference to the days of Windows Vista 
when ALPC was introduced to replace LPC (Local Procedure Call), which is the predecessor IPC 
mechanism used until the rise of Windows Vista.
A quick word on LPC 
The local procedure call mechanism was introduced with the original Windows NT kernel in 1993-
94 as a synchronous inter-process communication facility. Its synchronous nature meant that 
clients/servers had to wait for a message to dispatched and acted upon before execution could 
continue. This was one of the main flaws that ALPC was designed to replace and the reason why 
ALPC is referred to by some as asynchronous LPC. 
ALPC was brought to light with Windows Vista and at least from Windows 7 onward LPC was 
completely removed from the NT kernel. To not break legacy applications and allow for 
backwards compatibility, which Microsoft is (in)famously known for, the function used to create 
an LPC port was kept, but the function call was redirected to not create an LPC, but an ALPC port.
As LPC is effectively gone since Windows 7, this post will only focus on ALPC, so let’s get back to it. 
But, if you’re - like me - enjoy reading old(er) documentations of how things started out and how things 
used to for work, here’s an article going in some detail about how LPC used to work in Windows NT 3.5: 
http://web.archive.org/web/20090220111555/http://www.windowsitlibrary.com/Content/356/08/1.html
Back to ALPC 
ALPC is a fast, very powerful and within the Windows OS (internally) very extensively used inter-
process communication facility, but it’s not intended to be used by developers, because to 
Microsoft ALPC is an internal IPC facility, which means that ALPC is undocumented and only used 
as the underlying transportation technology for other, documented and intended-for-developer-
usage message transportation protocols, for example RPC. 
The fact that ALPC is undocumented (by Microsoft), does however not mean that ALPC is a total 
blackbox as smart folks like Alex Ionescu have reverse engineered how it works and what 
components it has. But what it does mean is that you shouldn’t rely on any ALPC behavior for any 
long-term production usage and even more you really shouldn’t use ALPC directly to build 
software as there are a lot of non-obvious pitfalls that could cause security or stability problems. 
If you feel like you could hear another voice on ALPC after reading this post, I highly recommend 
listening to Alex’s ALPC talk from SyScan’14 and especially keep an ear open when Alex talks 
about what steps are necessary to release a mapped view (and that’s only addressing views) from 
your ALPC server, which gets you at around minute 33 of the talk.
So what I’m saying here is:
ALPC is a very interesting target, but not intended for (non-Microsoft) usage in 
production development. Also you shouldn’t rely on all the information in this post 
being or continue to be 100% accurate as ALPC is undocumented.
ALPC Internals
Alright let’s get into some ALPC internals to understand how ALPC works, what moving parts are 
involved in the communications and how the messages look like to finally get an idea of why ALPC 
might be an interesting target from an offensive security standpoint.
The Basics
To get off from the ground it should be noted that the primary components of ALPC 
communications are ALPC port objects. An ALPC port object is a kernel object and its use is similar 
to the use of a network socket, where a server opens a socket that a client can connect to in order 
to exchange messages. 
If you fire up WinObj from the Sysinternals Suite, you’ll find that there are many ALPC ports 
running on every Windows OS, a few can be found under the root path as shown below:
… but the majority of ALPCs port are housed under the ‘RPC Control’ path (remember that RPC 
uses ALPC under the hood):
To get started with an ALPC communication, a server opens up an ALPC port that clients can 
connect to, which is referred to as the ALPC Connection Port, however, that’s not the only ALPC 
port that is created during an ALPC communication flow (as you’ll see in the next chapter). 
Another two ALPC ports are created for the client and for the server to pass messages to. 
So, the first thing to make a mental note of is:
There are 3 ALPC ports in total (2 on the server side and 1 on the client side) involved in an 
ALPC communication.
The ports you saw in the WinObj screenshot above are ALPC Connection Ports, which are 
the ones a client can connect to.
Although there are 3 ALPC ports used in total in an ALPC communication and they all are referred 
to by different names (such as “ALPC Connection Ports”), there is only a single ALPC port kernel 
object, which all three ports, used in an ALPC communication, instantiate. The skeleton of this 
ALPC kernel object looks like this:
As it can be seen above the ALPC kernel object is a quite complex kernel object, referencing 
various other object types. This makes it an interesting research target, but also leaves some good 
margin for errors and/or missed attack paths.
ALPC Message Flow
To dig deeper into ALPC we’ll have a look into the ALPC message flow to understand how 
messages are sent and how these could look like. First of all we’ve already learned that 3 ALPC 
port objects are involved in an ALPC communication scenario, with the first one being the ALPC 
connection port that is created by a server process and that clients can connect to (similar to a 
network socket). Once a client connects to a server’s ALPC connection port, two new ports are 
created by the kernel called ALPC server communication port and ALPC client communication 
port.
Once the server and client communication ports are established both parties can send messages 
to each other using the single function NtAlpcSendWaitReceivePort  exposed by ntdll.dll. 
The name of this function sounds like three things at once - Send, Wait and Receive - and that’s 
exactly what it is. Server and client use this single function to wait for messages, send messages 
and receive messages on their ALPC port. This sounds unnecessary complex and I can’t tell you 
for sure why it was build this way, but here’s my guess on it: Remember that ALPC was created as 
a fast and internal-only communication facility and the communication channel was build around 
a single kernel object (the ALPC port). Using this 3-way function allows to do multiple operations, 
e.g. sending and receiving a message, in a single call and thus saves time and reduces user-
kernel-land switches. Additionally, this function acts as a single gate into the message exchange 
process and therefore allows for easier code change and optimizations (ALPC communication is 
used in a lot of different OS components ranging from kernel drivers to user GUI applications 
developed by different internal teams). Lastly ALPC is intended as an internal-only IPC mechanism 
so Microsoft does not need to design it primarily user or 3rd party developer friendly. 
Within this single function you also specify what kind of message you want to send (there are 
different kinds with different implications, we’ll get to that later on) and what other attributes you 
want to send along with your message (again we’ll get to the things that you can send along with a 
message later on in chapter ALPC Message Attributes).
So far this sounds pretty straight forward: A server opens a port, a client connects to it, both 
receive a handle to a communication port and send along messages through the single function 
NtAlpcSendWaitReceivePort … easy. 
We’ll on a high level it is that easy, but you surely came here for the details and the title of the 
post said “internals” so let’s buckle up for a closer look:
1. A server process calls NtAlpcCreatePort with a chosen ALPC port name, e.g. ‘CSALPCPort’, and 
optionally with a SecurityDescriptor to specify who can connect to it. 
The kernel creates an ALPC port object and returns a handle this object to the server, this 
port is referred to as the ALPC Connection Port
2. The server calls NtAlpcSendWaitReceivePort, passing in the handle to its previously created 
connection port, to wait for client connections
3. A client can then call NtAlpcConnectPortwith:
The name of the server’s ALPC port (CSALPCPort)
(OPTIONALLY) a message for the server (e.g. to send a magic keyword or whatever)
(OPTIONALLY) the SID of server to ensure the client connects to the intended server
(OPTIONALLY) message attributes to send along with the client’s connection request 
(Message attributes will be detailed in chapter ALPC Message Attributes)
4. This connection request is then passed to the server, which calls NtAlpcAcceptConnectPort to 
accept or reject the client’s connection request.
(Yes, although the function is named NtAlpcAccept… this function can also be used to reject 
client connections. This functions last parameter is a boolean value that specifies if 
connection are accepted (if set to true ) or rejected (if set to false ).
The server can also:
(OPTIONALLY) return a message to the client with the acceptance or denial of the 
connection request and/or…
(OPTIONALLY) add message attributes to that message and/or ..
(OPTIONALLY) allocate a custom structure, for example a unique ID, that is attached to 
the server’s communication port in order to identify the client 
— If the server accepts the connection request, the server and the client each receive a 
handle to a communication port —
5. Client and server can now send and receive messages to/from each other via 
NtAlpcSendWaitReceivePort, where:
The client listens for and sends new messages to its communication port
The server listens for and sends new messages to its connection port
Both the client and the server can specify which message attributes (we’ll get to tht in a 
bit) they want to receive when listening for new messages
… wait a minute… Why is the server sending/receiving data on the connection port instead of its 
communication port, since it has a dedicated communication port?… This was one of the many things 
that puzzled me on ALPC and instead of doing all the heavy lifting reversing work to figure that out 
myself, I cheated and reached out to Alex Ionescu and simply asked the expert. I put the answer in 
Appendix A at the end of this post, as I don’t want to drive too far away from the message flow at this 
point… sorry for the cliff hanger …
Anyhow, looking back at the message flow from above, we can figure that client and server are 
using various functions calls to create ALPC ports and then sending and receiving messages 
through the single function NtAlpcSendWaitReceivePort . While this contains a fair amount of 
information about the message flow it’s important to always be aware that server and client do 
not have a direct peer-to-peer connection, but instead route all messages through the kernel, 
which is responsible for placing messages on message queues, notifying each party of received 
messages and other things like validating messages and message attributes. To put that in 
perspective I’ve added some kernel calls into this picture:
Server process
Client process
Connection Port
- Port name
- Port Attributes
- Object Attribute (e.g. SID) 
handle:
hConnectionPort 
NtAlpcCreatePort
Kernel
AlpcpCreateConnectionPort 
NtAlpcSendWaitReceivPort
hConnectionPort,
msgReceiveBuffer,
msgReceiveAttributes
NtAlpcSendWaitReceivPort
AlpcpReceiveMessage
NtAlpcConnectPort
handle:
hCommunicationPort 
msgSendBuffer,
msgReceiveAttributes
NtAlpcConnectPort
...
NtAlpcAcceptConnectPort
hConnectionPort,
msgSendBuffer,
msgSendAttributes,
boolAcceptOrDeny 
Communication Port
- Port Attributes
- Object Attribute (e.g. SID) 
NtAlpcSendWaitReceivPort
hConnectionPort,
msgSendBuffer,
msgSendAttributes,
msgReceiveBuffer,
msgReceiveAttributes 
Communication Port
- Port Attributes
- Object Attribute (e.g. SID) 
AlpcpAcceptConnectPort
handle:
hConnectionPort 
NtAlpcSendWaitReceivPort
hCommunicationPort,
msgSendBuffer,
msgSendAttributes,
msgReceiveBuffer,
msgReceiveAttributes 
AlpcpReceiveMessage
AlpcpReceiveMessage
AlpcpSendMessage
NtAlpcSendWaitReceivPort
AlpcpSendMessage
...
I have to admit on a first glance this is diagram is not super intuitive, but I’ll promise things will get 
clearer on the way, bear with me. 
To get a more complete picture of what ALPC looks like under the hood, we need to dive a little 
deeper into the implementation bits of ALPC messages, which I’ll cover in the following section.
ALPC Messaging Details
Okay so first of all, let’s clarify the structure of an ALPC message. An ALPC message always consist 
of a, so called, PORT_HEADER or PORT_MESSAGE, followed by the actual message that you want to 
send, e.g. some text, binary content, or anything else.
In plain old C++ we can define an ALPC message with the following two structs:
typedef struct _ALPC_MESSAGE {
    PORT_MESSAGE PortHeader;
    BYTE PortMessage[100];      // using a byte array of size 100 to store my 
actual message
} ALPC_MESSAGE, * PALPC_MESSAGE;
typedef struct _PORT_MESSAGE