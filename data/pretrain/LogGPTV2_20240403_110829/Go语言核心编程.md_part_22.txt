}
//给双向链表插入一个结点
//编写第2种插入方法，根据 no 的编号从小到大插入..【实用】
funcInsertHeroNode2(head *HeroNode, newHeroNode *HeroNode) {
//思路
//1. 找到适当的结点
//2. 创建一个辅助结点[跑龙套, 帮忙]
temp:= head
flag :=true
//让插入的结点的 no，和temp 的下一个结点的no比较
for{
iftemp.next== nil{//说明到链表的最后
break
} elseiftemp.next.no>= newHeroNode.no {
//说明newHeroNode 就应该插入到temp 后面
break
} elseiftemp.next.no== newHeroNode.no {
//说明我们额链表中已经有这个no,就不然插入.
flag =false
break
}
temp= temp.next
}
if!flag {
fmt.Println("对不起，已经存在no=",newHeroNode.no)
return
} else{
newHeroNode.next=temp.next //ok
newHeroNode.pre= temp//ok
iftemp.next!=nil {
temp.next.pre= newHeroNode //ok
}
temp.next=newHeroNode //ok
}
}
//删除一个结点[双向链表删除一个结点]
funcDelHerNode(head *HeroNode, idint) {
temp:= head
flag :=false
//找到要删除结点的 no，和temp 的下一个结点的no比较
for{
iftemp.next== nil{//说明到链表的最后
break
} elseiftemp.next.no== id{
//说明我们找到了.
flag =true
break
}
temp= temp.next
}
ifflag {//找到, 删除
temp.next=temp.next.next//ok
iftemp.next!=nil {
temp.next.pre= temp
}
} else{
fmt.Println("sorry, 要删除的id不存在")
}
}
//显示链表的所有结点信息
//这里仍然使用单向的链表显示方式
funcListHeroNode(head *HeroNode) {
//1. 创建一个辅助结点[跑龙套, 帮忙]
temp:= head
// 先判断该链表是不是一个空的链表
iftemp.next== nil{
fmt.Println("空空如也。。。。")
return
}
//2. 遍历这个链表
for{
fmt.Printf("[%d ,%s ,%s]==>", temp.next.no,
temp.next.name, temp.next.nickname)
//判断是否链表后
temp= temp.next
iftemp.next== nil{
break
}
}
}
funcListHeroNode2(head *HeroNode) {
//1. 创建一个辅助结点[跑龙套, 帮忙]
temp:= head
// 先判断该链表是不是一个空的链表
iftemp.next== nil{
fmt.Println("空空如也。。。。")
return
}
//2. 让 temp 定位到双向链表的最后结点
for{
iftemp.next== nil{
break
}
temp= temp.next
}
//2. 遍历这个链表
for{
fmt.Printf("[%d ,%s ,%s]==>", temp.no,
temp.name, temp.nickname)
//判断是否链表头
temp= temp.pre
iftemp.pre== nil{
break
}
}
}
funcmain() {
//1. 先创建一个头结点,
head :=&HeroNode{}
//2. 创建一个新的 HeroNode
hero1:=&HeroNode{
no:1,
name: "宋江",
nickname: "及时雨",
}
hero2:=&HeroNode{
no:2,
name: "卢俊义",
nickname: "玉麒麟",
}
hero3:=&HeroNode{
no:3,
name: "林冲",
nickname: "豹子头",
}
InsertHeroNode(head, hero1)
InsertHeroNode(head, hero2)
InsertHeroNode(head, hero3)
ListHeroNode(head)
fmt.Println("逆序打印")
ListHeroNode2(head)
}
20.6.5 单向环形链表的应用场景
20.6.6 环形单向链表介绍
20.6.7 环形的单向链表的案例
完成对单向环形链表的添加结点，删除结点和显示.
package main
import(
"fmt"
)
//定义猫的结构体结点
type CatNodestruct {
noint//猫猫的编号
namestring
next*CatNode
}
funcInsertCatNode(head *CatNode, newCatNode *CatNode) {
//判断是不是添加第一只猫
ifhead.next== nil {
head.no =newCatNode.no
head.name =newCatNode.name
head.next =head //构成一个环形
fmt.Println(newCatNode, "加入到环形的链表")
return
}
//定义一个临时变量，帮忙,找到环形的最后结点
temp:= head
for{
iftemp.next== head {
break
}
temp= temp.next
}
//加入到链表中
temp.next=newCatNode
newCatNode.next=head
}
//输出这个环形的链表
funcListCircleLink(head *CatNode) {
fmt.Println("环形链表的情况如下：")
temp:= head
iftemp.next== nil{
fmt.Println("空空如也的环形链表...")
return
}
for{
fmt.Printf("猫的信息为=[id=%d name=%s] ->\n", temp.no, temp.name)
iftemp.next== head {
break
}
temp= temp.next
}
}
//删除一只猫
funcDelCatNode(head *CatNode, idint)*CatNode {
temp:= head
helper:= head
//空链表
iftemp.next== nil{
fmt.Println("这是一个空的环形链表，不能删除")
return head
}
//如果只有一个结点
iftemp.next== head { //只有一个结点
iftemp.no == id{
temp.next=nil
}
return head
}
//将 helper 定位到链表最后
for{
ifhelper.next== head {
break
}
helper= helper.next
}
//如果有两个包含两个以上结点
flag :=true
for{
iftemp.next== head { //如果到这来，说明我比较到最后一个【最后一个还没比较】
break
}
iftemp.no ==id {
iftemp == head{ //说明删除的是头结点
head =head.next
}
//恭喜找到., 我们也可以在直接删除
helper.next=temp.next
fmt.Printf("猫猫=%d\n", id)
flag =false
break
}
temp= temp.next//移动 【比较】
helper= helper.next//移动 【一旦找到要删除的结点 helper】
}
//这里还有比较一次
ifflag { //如果flag 为真，则我们上面没有删除
iftemp.no == id{
helper.next=temp.next
fmt.Printf("猫猫=%d\n", id)
}else{
fmt.Printf("对不起，没有no=%d\n", id)
}
}
return head
}
funcmain() {
//这里我们初始化一个环形链表的头结点
head :=&CatNode{}
//创建一只猫
cat1 :=&CatNode{
no:1,
name: "tom",
}
cat2 :=&CatNode{
no:2,
name: "tom2",
}
cat3 :=&CatNode{
no:3,
name: "tom3",
}
InsertCatNode(head, cat1)
InsertCatNode(head, cat2)
InsertCatNode(head, cat3)
ListCircleLink(head)
head =DelCatNode(head, 30)
fmt.Println()
fmt.Println()
fmt.Println()
ListCircleLink(head)
}
作业:
20.6.8 环形单向链表的应用实例
 Josephu 问题
Josephu 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1<=k<=n）的人从 1
开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m 的那个人又出列，依次类推，
直到所有人出列为止，由此产生一个出队编号的序列。
 提示
用一个不带头结点的循环链表来处理 Josephu 问题：先构成一个有 n 个结点的单循环链表，然后
由k结点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又
从1开始计数，直到最后一个结点从链表中删除算法结束。
 示意图说明
 走代码：
package main
import(
"fmt"
)
//小孩的结构体
type Boy struct {
Noint// 编号
Next*Boy // 指向下一个小孩的指针[默认值是nil]
}
// 编写一个函数，构成单向的环形链表
//num ：表示小孩的个数
//*Boy : 返回该环形的链表的第一个小孩的指针
funcAddBoy(num int)*Boy{
first :=&Boy{} //空结点
curBoy :=&Boy{} //空结点
//判断
ifnum <1 {
fmt.Println("num 的值不对")
return first
}
//循环的构建这个环形链表
fori :=1; i <=num; i++ {
boy:=&Boy{
No: i,
}
//分析构成循环链表，需要一个辅助指针[帮忙的]
//1. 因为第一个小孩比较特殊
ifi ==1{ //第一个小孩
first =boy//不要动
curBoy =boy
curBoy.Next=first //
} else{
curBoy.Next=boy
curBoy =boy
curBoy.Next=first //构造环形链表
}
}