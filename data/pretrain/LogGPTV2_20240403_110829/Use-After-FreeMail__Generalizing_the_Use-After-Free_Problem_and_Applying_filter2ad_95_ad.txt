a confidence level of 99%. To assess the risk of email addresses of
being exploited, we investigated which email addresses are more
attractive for an attacker to target. The most attractive provider for
an attacker is Lycos, where more than 77.27% of all addresses found
were free to register. We suspect the reason for the high number
of free email addresses in the 30-day expiration period. The least
attractive provider for an attacker is Yandex, where only 2.47% of
the addresses were free to register. However, Yandex was also the
fastest service to check for registered addresses, with only 0.11 s
per address. The reason for the low number of free email addresses
is likely again the expiration period, which is 2 years in this case.
The scaled average over all providers is 33%, i.e., an attacker has a
33% chance that a randomly selected email address is free.
Some leaks (e.g., the last.fm leak) provide the account registration
date. We investigated the probability that an email address is free to
register in relation to the account registration date provided in the
leak. Figure 2 shows the probability as a function of the registration
date over 22 533 email addresses out of which 3358 (15%) were free
2003-062004-102006-022007-072008-112010-042011-0800.10.20.30.4Probabilityto register. For registration dates before May 2004, on average 30%
of the addresses are free to register. We suspect that this value is
above average for this data set because email addresses have not
been checked automatically as part of the registration process at
that time. This lead to addresses in the database that were never
valid in the first place. In the time from May 2004 to July 2009,
on average 15% of the addresses were free to register. From July
2009 to February 2012 the number of addresses we found free to
register gradually decreased from 10% to 2%, with an average of 5%.
Note that the correlation between the distribution of hosts in the
last.fm leak and our combined data set is 0.86, i.e., the distribution
is very similar, and hence, observations on the last.fm data set can
be generalized. We conclude that email addresses which were used
in the more recent past, are less likely to be free to register.
For registrations in March 2012, we found 14% of the addresses
of the addresses in the database to be free to register. We suspect
the reason in ongoing registrations at the time of the leak, where
preliminary accounts may still contained non-confirmed invalid
email addresses. Providing no valid email address constitutes a
violation of the terms of use. Usually these accounts are deleted
within a short period of time, but this did not happen for the ongoing
registrations at the time of the leak yet.
6.2 Use-After-FreeMail based on expired
domain names
To evaluate Use-After-FreeMail on domain names of leaked email
addresses, it is necessary to pre-filter definitely invalid email ad-
dresses. Many services do not check email addresses during the
registration process. This leads to invalid email addresses in data-
base leaks. After filtering invalid domain names, the set of potential
target domains contains 23 669 300 names in total.
During the evaluation of this huge amount of domain names, we
experienced rate limitation on every publicly available DNS resolver
we tried. Consequently, we set up our own resolver, which leads
to a lower throughput but eliminated the possibility of corrupting
results through rate limitation effects.
Resolving all 23 669 300 domains showed that 7 252 062 domains,
i.e., 30.6% of the potential target domains, result in the NXDOMAIN
status. We identified two reasons for this huge portion.
The first reason is that it is possible to have sub-domains in
the domain part of an email address. As some TLDs did not allow
public registration of second-level domains, registries instead reg-
istered the second-level themselves, e.g., co.uk, co.nz, com.br or
com.au. The registries then publicly offered third-level domains, i.e.,
virtually sub-domains, to customers. Therefore, we also checked
sub-domains in our evaluation, although the corresponding second-
level domain might not have been available for registration. One
such example is the domain sverige.hotmail.com. The DNS resolver
found that the status of this sub-domain is NXDOMAIN, but it is
obviously not available for registration. The number of 2nd level
domains with NXDOMAIN status is 5 242 711, which is still a huge
amount of available domains.
The second reason is that such email addresses were likely pro-
vided during a registration process, even though they never existed.
Registrations with invalid email addresses inevitably increase the
number of available domains found in our evaluation. However,
Figure 3: Mail aliases per available domain. Single avail-
able domains have up to 83 735 references in database leaks,
whereas 4.2 million domains have only a single reference in
database leaks.
these are still exploitable dangling references, as long as the chosen
domain name is valid and not yet registered.
We filtered the data set which we obtained in our evaluation
to only second-level domains, i.e., the most promising domains
for an attack. We found that available second-level domains are
referenced by 11 575 621 email addresses found in database leaks.
Figure 3 shows the number of email addresses per available second-
level domain. We can see that most second-level domains are only
referenced by a small number of email addresses in database leaks.
4.2 million domains have only a single reference in database leaks.
With a growing number of references, the number of domains
quickly decreases. Only 38 second-level domains are referenced by
more than 10 000 email addresses in database leaks.
The second-level domain with the most references was datingeu-
rope.net,2 with 83 735 email addresses in database leaks. Hence, by
registering this single available second-level domain, an attacker
could have gained control over at least 83 735 email addresses that
are possibly still referenced by various web services. We provide a
detailed case study for this domain in Section 7.3.
7 CASE STUDIES
In this section, we present case studies with users summarizing the
types of data that we were able to obtain. First, we performed a
quantitative case study to investigate how many users are affected
by our attack. We designed the study to have 100 participants to
have a maximum standard error below 10 % at a confidence level
of 95 %. We found that 60% of the users have an address they don’t
use anymore and 18% of which, i.e., 11% of all users, are affected by
our attack.
Our user case study had a total of 31 participants, which we
recruited via University newsgroups and mailing lists, and word-
of-mouth. The age range of the participants was from 20 to 53
years. 18 out of 31 participants (which is 58%, very close to the 60%
we observed in the quantitative case study described in the last
paragraph) provided us with a total of 23 free-mail addresses. We
studied the Use-After-FreeMail attack on the 23 free-mail addresses
qualitatively. We found 17 of the free-mail addresses were free
to register. We performed automated and semi-automated checks
against a series of popular websites and found dangling references
for 6 free-mail addresses of 6 different users. Hence, for users from
2We registered this domain to prevent attackers from using it for malicious purposes
(cf. Section 7.3).
8
100101102103104105106107100101102103104105DomainsMailAliasesthe selected University environment, we find that 19% of users are
affected (standard error 14%, confidence level 95%). We performed
comprehensive case studies with the 6 affected users we found.
We summarize the results of these case studies in this section and
describe them in detail in Appendix C.
Section 7.3 discusses our case study on datingeurope.net in detail.
7.1 Quantitative Case Study
For our quantitative case study we performed a paid online survey
where people answered the question whether they have a free-mail
address they do not use anymore, and if so, whether they would
provide us with that free-mail address. The participants were from
25 different countries on 5 different continents, 59 from Europe.
60 participants said that they have a free-mail address which they
do not use anymore. 36 participants provided us with these free-
mail addresses, yielding a total of 108 addresses. By running these
addresses against our dataset we found that 14 of these addresses,
from 11 different participants, are free to register. We can conclude,
with a standard error of 6.2 % and a confidence level of 95 %, that
11% of users are affected by our attack. In Appendix B we provide
additional demographic details about the participants.
7.2 User Case Studies
We performed a comprehensive case study with 6 affected users
who each had an expired free-mail address from one of 3 different
free-mail providers. Out of the 6 email addresses, we found 5 in
online leaks, which provided us with a good starting point for the
exploitation phase. We attacked these users by re-registering their
expired free-mail addresses and using the password reset feature
on a series of popular websites. We summarize our findings by
categorizing them in 3 categories. A detailed case study for each
user can be found in Appendix C.
Personal Information. For all participants, we were able to see a
variety of personal details, such as full name, telephone number,
and postal address. In addition, we gained access to personal files
for half of the participants. We also gained access to social media
accounts for half of the participants. As one participant pointed out,
an attacker can abuse access to such an account to cause personal
or professional damage.
Financial Information. For 2 participants we were able to directly
see their bank details. Moreover, one user also had non-public
financial information of a nonprofit organisation stored. Besides
the direct access to financial information, we had access to the
Amazon account of half the participants, allowing us not only to
view recent orders but also to place new orders.
Third-party Information. We also gained access to information
about third parties from 2 participants. They each had files from a
registered association for which they work stored in their private
DropBox account. The account for the national automobile club of
one participant also revealed personal information about all family
members.
7.3 Domain Case Study: datingeurope.net
The domain datingeurope.net was registered from approximately
2008 to 2013. We found this domain to be the domain with the most
Figure 4: Activity on the mail server over the 5 day time
frame of our case study.
dangling email addresses (83 735) in up to 4 database leaks. As our
paper reports about the availability of this domain and the dangling
references to this domain, we would directly point an attacker to an
attractive attack target. Hence, we decided to register this domain,
to prevent Use-After-FreeMail attacks through this domain.
We set up an information page recommending to check haveibeen-
pwned.com as well as all accounts to eliminate any dangling refer-
ences that enable these attacks. We set up a mail server immediately
rejecting any emails to datingeurope.net. This guarantees that we
do not receive any emails, subjects or other meta-data beyond the
sender email address and the IP address of the connecting mail
server. Over a period of 5 days, we logged accesses to the web
server (time, IP address) and the mail server (time, IP address of
sending mail server, email address, login name).
On the web server we only observed 401 connections, out of
which 105 were non-malformed benign requests and 148 non-
malformed malicious requests. 111 out of 148 malicious requests
tried to access a database dump, expected to be in the web root
folder.
Figure 4 shows the activity on the mail server over the 5 day
time frame. On the mail server, we received the first connection
less than 3 minutes after the domain registration. We observed a
total of 5 496 304 connections over the 5 days, i.e., 13 connections
per second on average, from 44 011 unique IP addresses, trying
to deliver 1 028 719 mails to 85 690 recipients. The top IP address
accounted for 24 607 of the requests. While there was only little
activity on the server within the first hours, we experienced a
significant jump in activity after 30 hours, likely because of delayed
DNS updates. The peak activity was 34 hours after registration with
446 287 connections in one hour, i.e., 124 connections per second,
from 2398 unique IP addresses.
Out of the 83 736 addresses we found in online leaks, emails were
sent to 83 599. The remaining 137 email addresses do not show up
in our log files. However, in our log files we found 2091 addresses
which do not show up in any online leak we found.
We suspect that most of the emails would have been spam emails.
However, our results clearly show the viability of this attack.
8 DISCUSSION
We have seen that use-after-free is a far more generic and om-
nipresent problem than anticipated. Hence, we need to raise aware-
ness that use-after-free may occur in almost any system. With
Twitter and DNS entry use-after-free being exploited in the wild, it
9
020406080100100102104106HourCountUniqueRecipientsUniqueIPsConnectionsis very likely that free-mail use-after-free is also being exploited in
the wild. Consequently, we need to take action to prevent further
damage to users, i.e., we need to cut at least one of the links shown
in Figure 1, or make resource reuse impossible. With our work, we
want to tie different areas of research (i.e., use-after-free on memory
buffers and objects, domains, and emails) together. Despite the fact
that different forms of use-after-free attacks may have vastly differ-
ent properties (i.e., it may be easy to find an expired mail address,
whereas dangling pointers have fortunately become a more rare
occasion in modern software), it will help to retrofit defenses from
one area of research to other areas.
In the following, we discuss recommendations to reduce the
problem of use-after-free on emails, as well as ethical considerations
regarding this work and its responsible disclosure.
8.1 Applying Existing Countermeasures
against Traditional Use-After-Free Attacks
to Use-After-FreeMail
After observing the similarities between traditional use-after-free
situations and our use-after-free situation for mail addresses, the
question arises whether countermeasures could be adapted directly
to mitigate our attacks. An important observation is that in contrast
to the traditional use-after-free situations our real-world situation
does not have the notion of a “program life time” after which all vir-
tual memory of the program is released anyway. Instead, an email
address (virtually a pointer) can be referenced forever. Dhurjati et al.
[15] recommended that once a buffer is deleted, the corresponding
pointer becomes and stays invalid. Applying this idea to mail ad-
dresses, mail addresses must become and stay invalid forever, once
the mailbox it refers to is deleted.
Several works propose to solve the problem using compiler ex-
tensions, e.g., Caballero et al. [10] detect the creation of dangling
pointers at runtime, Serebryany et al. [60] to detect, besides other
bugs, use-after-free bugs at compile time, other works [37, 64, 72]
keep track of all pointer copies and nullify when the corresponding
memory block is released. While it would be an ideal solution to
nullify all copies of an email address when the corresponding mail-
box is deleted, this poses practical challenges, since the copies are
not stored in a predictable defined way, but can have any form and
maybe are stored in human memory. However, as we discuss in
the following subsections, several ideas can be adapted to at least
partially resolve the Use-After-FreeMail problem. This highlights
that mitigating use-after-free in scenarios which were unconnected
prior to our work, should not be seen as unrelated work, but instead
the scientific community could benefit by connecting research in
these areas.
8.2 Recommendations for Providers and Web
Services
Mills and Kucherawy [47] already proposed a require-recipient-
valid-since header field or SMTP extension in RFC 7293. They sug-
gest that a sender adds a timestamp to the email header stating
when the ownership of the mailbox was last known to the sender.
If the receiving mail server notices that the mailbox ownership
changed since then, the email bounces to the sender. Although this
solution is not complete (e.g., use-after-free on domains), it would
10
significantly raise the bar to perform Use-After-FreeMail attacks.
While there are implementations for RFC 7293 [1], they are not
widely adopted in practice [2, 3]. We also did not observe any active
RFC 7293 mitigations on any mail server in analysis.
Non-expiring resource identifiers, as suggested by Dhurjati et al.
[15], may be a viable solution in many places. Especially for email