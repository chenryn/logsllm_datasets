{pay = pay + $2*$3 }
END { print NR, "employees"
print "total pay is", pay
第一个动作累加所有雇员的报酬.END动作打印：
6 employees
total pay is 337.5
average pay is 56.25
很明显，printf可以用来产生更加美观的输出，这个程序有一个潜在的错误：一种不常见的情况是NR
的值为0，程序会尝试将0作除数，此时awk就会产生一条错误消息.
操作文本
Awk的长处之一是它可以非常方便地对字符串进行操作，就像大多数其他语言操作数值那样方便，
Awk的变量除了可以存储数值，还可以存储字符串，这个程序搜索每小时工资最高的雇员：
$2> maxrate{ maxrate = $2; maxemp = $1}
END { print "highest hourly rate:", maxrate,"for", maxemp }
它的输出是：
13
---
## Page 20
第一章快速入门
12
highest hourly rate: 5.50 for Mary
在这个程序里，变量maxrate保存的是数值，而maxemp保存的是字符串.（如果有多个雇美都拥有相
网的最高每小时工资，这个程序只会打印第一个人的名字）
字符串拼接
可以通过旧字符串的组合来生成一个新字符串；这个操作叫作拼接（concatenation）.程序
{ names = names $1 " " }
END ( print names )
将所有雇员的名字都收集到一个单独的字符串中，每一次拼接都是把名字与一个空格符添加到变量
names 的值的末尾.names在END动作中被打印出来：
Beth Dan Kathy Mark Mary Susie
在一个awk程序中，字符串的拼接操作通过陆续写出字符串来完成.对每一个输入行，上面程序中的第
一条语句将三个字符事连接在一起：names早先的值，第一个字段，以及一个空格；然后再将结果字符事
赋值给names.于是，当所有的输入行都读取完毕时，names包含有一个由所有雇员名字组成的，每个名
字之间由空格分隔的字符事，用来存储字符串的变量的初始值跌认为空字符串（也就是说该字符串不包
含任何字符），因此在这个程序里，names不需要显式地初始化.
打印最后一行
虽然在END动作里，NR的值被保留了下来，但是S0却不会，程序
{last = $0 }
END ( print last }
可以用来打印文件的最后一行：
Susie4.25
18
内建函数
我们已经看到awk提供有内建变量，这些变量可以用来维护经常需要用到的量，比如字段的个数，
以及当前输入行的行号，同样，awk也提供用来计算其他值的内建函数，求平方根，取对数，随机数，除了
这些数学函数，还有其他用来操作文本的函数，其中之一是length，它用来计算字符串中字符的个数，
例如，这个程序计算每一个人的名字的长度：
{print $1, length($1)}
程序运行结果是：
14
Beth 4
Dan 3
Kathy 5
---
## Page 21
第一章快速入门
13
Mark  4
Mary 4
Susie 5
行，单词与字符的计数
这个程序使用length,NF与NR计算行，单词与字符的数量，为方便起见，我们将每个字段都当成
一个单词
{nc = nc + length($0) + 1
nw = nw + NF
END { print NR, "lines,", nw, "words,", nc, "characters"}
文件emp.data含有
6 1ines, 18 words, 77 characterg
我们为每一个输入行末尾的换行符加1，这是因为$0不包含换行符，
1.6流程控制语句
Awk提供有用于决策的if-else语句，以及循环语句，所有的这些都来源于C语言.它们只能用
在动作（Action）里.
If-Else语句
下面这个程序计算每小时工资多于$6.00的雇员的总报酬与平均报酬，在计算平均数时，它用到了
if语句，避免用0作除数，
$2 > 6 { n = n + 1; pay = pay + $2 * $3 }
END( if (n > O)
print n, "employees, total pay is", pay,
"average pay is", pay/n
else
emp.data的输出是：
no employees are paid more than $6/hour
15
在if-else语句里，if后面的条件被求值，如果条件为真，第一个print语句执行，否则是第二个
print语句被执行，注意到，在追号后面断行，我们可以将一个长语句延续到下一行
---
## Page 22
第一章快速入门
14
While语句
一个while含有一个条件判断与一个循环体，当条件为真时，衍环体执行，下面这个程序
展示了一笔钱在一个特定的利率下，其价值如何随着投资时网的增长而增加，价值计算的公式是
talue = amount(1 + rate)sears,
# interestl - compute compound interest
#
input:amountrateyears
#
output: compounded value at the end of each year
i = 1
while (i  0) {
print line[i]
i = i - 1
用emp.data作输入，输出是
Susie
4 .25
18
Axe
5 .50
22
Mark
5 .00
20
Kathy
4.00
10
Dan
3.75
0
Beth
4.00
0
这是用for循环实现的等价的程序：
17
# reverse - print input in reverse order by line
{line[NR] = $0 }# remember each input line
END ( for (i = NR; i > 0; i = i - 1)
---
## Page 24
第一章快速入门
16
print line[i]
}
1.8实用“一行”手册
虽然awk可以写出非常复杂的程序，但是许多实用的程序并不比我们目前为止看到的复杂多少，这
里有一些小程序集合，对读者应该会有一些参考价值，大多数是我们已经讨论过的程序的变形，
1.输入行的总行数
END { print NR }
2.打印第10行
NR == 10
3.打印每一个输入行的最后一个字段
{print $NF }
4.打印最后一行的最后一个字段
{field = $NF }
END { print field }
5.打印字段数多于4个的输入行
NF > 4
6.打印最后一个字段值大于4的输入行
SNF > 4
7.打印所有输入行的字段数的总和
{ nf = nf + NF }
END ( print nf }
8.打印包含Beth的行的数量
/Beth/{ nlines = nlines + 1}
END ( print nlines }
9.打印具有最大值的第一个字段，以及包含它的行（假设S1总是正的）
18
---
## Page 25
第一章快速入门
17
$1 > max { max = $1; maxline = $0 }
END ( print max, maxline }
10.打印至少包含一个字段的行
NF > 0
11.打印长度超过80个字符的行
length($0) > 80
12.在每一行的前面加上它的字段数
{print NF, $0}
13.打印每一行的第1与第2个字段，但顺序相反
{print $2,$1}
14.交换每一行的第1与第2个字段，并打印该行
{temp = S1; $1= $2; $2=temp; print }
15.将每一行的第一个字段用行号代替
{$1 = NR; print }
16.打印删除了第2个字段后的行
{ $2 = ""; print }
17.将每一行的字段按逆序打印
{for (i = NF; i> 0; i= i-1) printf("&s ",$i)
printf("\n")
18.打印每一行的所有字段值之和
{sum = 0
for (i = 1; i <= NF; i = i + 1) sum = sum + $i
print sum
19.将所有行的所有字段值累加起来
---
## Page 26
第一章快建入门
8T
{for (i = 1; i <= NF; i = i + 1) sum = sum + $i )
END{printsum)
20.将每一行的每一个字段用它的绝对值替换
{ for (i = 1; i <= NF; i = i + 1) if ($i < 0) $i = -$i
print
1.9接下来
19
读者已经见识过了awk的要点，本章的每个程序都是由多个模式-动作语句组成的序列.Awk用
模式测试每一个输入行，如果模式匹配，对应的动作就会执行，模式可以包括数值或字符事比较，动作也
可以包含计算和格式化输出，除了可以自动从输入文件中读取数据，awk还会将每一个输入行分割为字
段.它还提供了一系列的内建变量与函数，当然你也可以自己定义，有了这些特征的帮助，许多实用的计
算可以用非常简短的程序实现一如果使用其他语言实现同样的功能，那么就要考虑到许多细节，而awk
程序可以隐式处理这些细节
本书的剩下部分将会详细讨论这些基本概念.由于有些程序会比本章给出的示例程序大一些，我们
强烈建议读者尽可能开始自已写程序，这会使你对awk更加熟悉，也更容易理解稍大一些的程序，更进
一步讲，没有什么能比一个简单的实验更能说明问题，读者还是应该浏览整本书；每一个例子都侍达出一
些关于awk的知识点，可能是关于如何使用一个语言特性，也可能是如何创建一个有趣的程序.
20
---
## Page 27
第二章
Awk语言
21
这一章解释—大部分都带有例子—组成一个awk程序所需要的构造要素.由于这次要描述的是整
个语言，所以材料会非常琐细，我们建议读者只需要浏览一下即可，当需要时再回来查阅细节。
最简单的awk程序是一个由多个模式-动作语句构成的序列：
pattern{action}
pattern{action}
***
在某些语句中，模式可以不存在；还有些语句，动作及其包围它的花括号也可以不存在，如果程序经过
awk检查后没有发现语法错误，它就会每次读取一个输入行，对读取到的每一行，按顺序检查每一个模
式.对每一个与当前行匹配的模式，对应的动作就会执行，一个缺失的模式匹配每一个输入行，因此每一
个不带有模式的动作对每一个输入行都会执行，只含有模式而没有动作的语句，会打印每一个匹配模式
的输入行，大部分情况下，在这一章出现的术语“输入行”与“记录”被当作一对同义词，在2.5节，我们
会讨论多行记录，多行记录指的由多行数据组成的单个记录，
本章的第一节详细讨论模式.第二节通过描述表达式，赋值语句与流程控制语句，展开对动作的讨
论.剩下的小节包括函数定义，输出，输入，以及awk调用其他程序的方式.大部分小节都包含对主要性
质的总结
输入文件countries
作为本章许多awk程序的输入数据，我们将使用文件countries.每一行都包括一个国家的名字，
联被如到了亚洲，在文件里，四列数据用制表符分隔，用一个空格分隔North（South）与America
文件countries包含下面几行：
22
USSR
8649
275
Asia
Canada
3852
25