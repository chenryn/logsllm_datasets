tion Q gives rise to a set of runs denoted by Runs(Q). A run
is typically denoted by R, and corresponds to a sequence of
actions as executed by threads. A run represents a possible
execution history of the system.
Protocol logic. For each of the actions that can occur
in a run, a corresponding action predicate is deﬁned. Some
examples are given in the right column of Table 1. The pro-
tocol logic is extended with logical connectives, a predicate
to reason about the ordering of actions in a run (<), as well
as predicates to reason about the knowledge of threads.
One of the predicates of the logic is the Honest predicate,
which is closely related to the set HONEST(C). For a run
R, Honest( ˆX) is used to denote that ˆX ∈ HONEST(C) and
“all threads of ˆX are in a ‘pausing’ state in R” [14, page 325].
This is a technicality2 that is needed to make the honesty
rule (which is not described here) work.
One predicate of interest for this paper is the Contains
predicate, which is used to reason about the relation be-
In particular, Contains(t1, t2) is deﬁned
tween two terms.
by means of the subterm relation ⊆ in [14, page 323], stat-
ing that t1 contains t2 as a subterm. The subterm relation
⊆ is never formally deﬁned. Here we assume that the sub-
term relation is deﬁned syntactically3.
In particular, we
assume that a signature such as SIG ˆX{| m|} contains m,
i.e. Contains(SIG ˆX{| m|}, m) holds. Note that this assump-
tion only plays a role in the construction of a particular
as in the honesty rule HON [14, page 329], and the VER
axiom [14, pp. 329–330], replicated here in Section 3.1. In
this second interpretation, X is a variable that ranges over
all threads executed by the agent ˆX, and ˆX eﬀectively ex-
presses a domain restriction on X.
2The Honest predicate serves within the honesty rule as an
encoding of the atomic nature of basic sequences.
3Observe that if we would alternatively assume that the sub-
term relation involves only tuple projection, as seems to be
suggested by the CON axiom [13, page 444], i.e. t ⊆ t(cid:48) ≡
(t = t(cid:48))∨ (∃t(cid:48)(cid:48).t(cid:48) = (t, t(cid:48)(cid:48))∨ t(cid:48) = (t(cid:48)(cid:48), t)), then e.g. the P2 and
VER axioms in [13, 14] are unsound, because respectively
the fresh value and the signature might be sent as part of
an encrypted term, and decrypted by an agent that knows
the key.
counterexample in Section 3.3, and does not inﬂuence any
of our general observations.
Using the protocol logic, one aims to establish properties
of all runs of a protocol. A run R of a protocol Q that
satisﬁes a property φ is denoted as Q, R |= φ. If all runs of
a protocol Q satisfy φ, we write Q |= φ. If a formula φ is
provable using the logic by using any PCL axioms except the
honesty rule, we write (cid:96) φ, which expresses that φ holds
for all protocols. For formulas provable using the axioms
and the honesty rule for a protocol Q, we write (cid:96)Q φ, which
expresses that φ holds for the protocol Q.
In the remainder of this paper we use the following con-
vention: All formulas that are numbered are ours. All un-
numbered formulas, including the named axioms, are copied
from PCL papers, in which case the source paper and page
number is given.
3. PROBLEMS WITH BASIC PCL
In this section, we address two problems with basic PCL
as deﬁned in [9,13,14,17]. First, we identify in Section 3.1 a
strong restriction on the scope of basic PCL. Then, we iden-
tify two missing proof mechanisms that seem to be necessary
to prove simple protocols correct in Sections 3.2 and 3.3.
3.1 Authentication properties only provable
for signature protocols
In basic PCL [9, 13, 14, 17], the possibility of proving au-
thentication properties is limited to protocols that use sig-
natures.
Proving an authentication property such as aliveness or
agreement requires a proof of existence of actions of another
agent.
In basic PCL, there is only one axiom that allows
for a conclusion of that type. The precondition of this ax-
iom can only be met by protocols that use signatures. As a
consequence, if a protocol does not use signatures, the exis-
tence of a communication partner cannot be proven within
the logic.
This is surprising, as PCL was “initially designed as a logic
of authentication” [14, page 313], and it is stated in the ab-
stract of the paper that “PCL [. . . ] has been applied to
a number of industry standards including SSL/TLS, IEEE
802.11i [. . . ]” [14, page 311, abstract]. These protocols con-
sist of many subprotocols that do not rely only on signatures,
but also rely on symmetric key cryptography and symmetric
MACs.
The problem occurs for all authentication properties that
imply the existence of a communication partner. This in-
cludes aliveness or any form of agreement from [23], match-
ing conversations from [3], or synchronisation from [8]. The
matching conversations property is the authentication prop-
erty used within basic PCL [14, page 331]. All these prop-
erties are of the form:
φ(X) ⊃ ∃Y.ψ(Y )
(1)
where typically, φ(X) denotes that thread X executes a role
that authenticates another role. Such a property states that
if a thread X executes actions of a certain role (e.g. all ac-
tions of an initiator role), then there exists a thread Y that
has executed some actions of another role (e.g. the ﬁrst two
actions of a responder role), and possibly some further con-
dition holds. This is captured in ψ(Y ). Note that both
the weak and strong authentication properties in the exam-
ple of [14, page 331] belong to this class of authentication
properties.
In order to prove such a property, it is required to prove
the existence of a thread. Examination of all axioms of the
logic reveals that only one axiom allows for the conclusion of
the existence of a thread, which is the VER axiom [14, page
327]:
VER Honest( ˆX) ∧ Verify(Y, SIG ˆX{| x|}) ∧ ˆX (cid:54)= ˆY ⊃
∃X.Send(X, m) ∧ Contains(m, SIG ˆY {| x|})
Because this axiom has the signature veriﬁcation predicate
Verify in the precondition, it can only be used for signature
protocols. Hence there is no way to prove the existence of
another thread for protocols without signatures.
Other comments regarding non-signature protocols.
Whilst introducing new axioms for establishing thread
existence for non-signature protocols is non-trivial, there
is a related problem with the inconsistent use of symmet-
ric/asymmetric cryptography. In basic PCL, there is only
one type of encryption operator, and only a single key set, in
the sense that the rules for encryption and decryption do not
distinguish between diﬀerent types of keys. This suggests
that either only symmetric, or only asymmetric encryption
is supported.
The deﬁnitions of the reaction rules [14, page 318], the
action formulas [14, page 324] and the Has predicate [14,
pp.324–325] all indicate that one encrypts and decrypts a
message using the same key, e.g.:
Hasi+1(A, ENCK{| m|})
Hasi+1(A, m)
if Hasi(A, m) and Hasi(A, K)
if Hasi(A, ENCK{| m|}) and Hasi(A, K)
The same assumption, that one encrypts and decrypts with
the same key, can be found in axiom AR3 [14, page 327].
Without explaining the full details of the notation of this
axiom, we want to point out that the key K is used as the
key to decrypt a message encrypted with K:
AR3 a(x) [y := dec x, K]X a(ENCK{| y |})
However, the idea that symmetric encryption is intended
seems to be contradicted by the SEC axiom [14, page 327],
which states that there is only one agent that can decrypt a
message encrypted with a key, along the lines of asymmetric
encryption:
SEC Honest( ˆX) ∧ Decrypt(Y, ENC ˆX{| x|}) ⊃ ( ˆY = ˆX)
Combined with the deﬁnition of the Has predicate, one is
lead to conclude that the only one who can create the en-
crypted message that occurs in the SEC axiom, is the agent
that can decrypt it.
3.1.1
In order to prove any authentication property of the form
of (1) for a protocol that does not use signatures, one needs
to introduce consistent machinery for symmetric and asym-
metric cryptography and several new axioms.
Implications
In basic PCL, protocols like Needham-Schroeder-Lowe4
and many key establishment protocols cannot be modeled,
4Observe that in a precursor of PCL in [19] there is a proof of
Needham-Schroeder-Lowe, but this logic has only asymmet-
ric cryptography, and has no notion of threads or processes.
and even if they could be, no authentication proofs could
be given for them. Similarly, it is impossible to use basic
PCL as deﬁned in [9, 13, 14, 17] to prove the authentication
properties of the protocols “SSL/TLS, IEEE 802.11i” [14,
page 311, abstract]. In order to prove authentication of these
protocols, one is required to introduce additional axioms.
3.1.2 Resolving the problem
The problem can be split into three subparts. First, sym-
metric and asymmetric cryptography must be dealt with
consistently. Second, basic PCL must be extended with
axioms that enable proving authentication properties (ex-
istence of a thread) for symmetric cryptography. Third,
resolving the problem for public-key encryption protocols
(which includes many key agreement protocols, and the well-
known Needham-Schroeder-Lowe protocol) requires the in-
troduction of additional theory. We ﬁrst address the two
easier problems before turning to public-key encryption.
Dealing consistently with symmetric and asymmetric
cryptography.
The ﬁrst requirement for resolving this problem is to split
symmetric and asymmetric encryption either by having two
types of encrypt/decrypt actions as in e.g. [1], or by splitting
the key set as in e.g. [7]. Either choice impacts the action
sets, the action formulas, the Has predicate, and requires the
addition of further ARx axioms and an alternative for the
SEC axiom. Most of the additions are trivial, but introduce
additional complexity into the logic and possibly also the
execution model.
Proving authentication for protocols using symmetric
encryption or keyed hashes.
The axiom for signature protocols deals with the simplest
possible case of authentication by cryptography: the signa-
ture of an honest agent can be used immediately to conclude
that there exists a thread executed by this agent. If that
agent diﬀers from any agent executing the currently known
threads, this implies the existence of another thread. This
conclusion is based on the fact that only one agent has the
private key needed to perform the signature.
For symmetric encryption and keyed hashes there is usu-
ally a notion of symmetry: in most cases, two agents share
a symmetric key. Thus, if a symmetric key K shared by
two honest agents ˆX and ˆY , occurs in a message of a thread
X, there are two candidates for the agent who created the
message. If we can exclude that the message was generated
in thread X executed by ˆX, we can derive the existence of
another thread Y that must have created it.
The authors of PCL have explored a variant of this route
for e.g. the extensions needed for the keyed-hash based pro-
tocols in [21]. We discuss the merits of those extensions in
detail in Section 4.2.
Proving authentication for public-key encryption pro-
tocols.
If we assume that basic PCL is extended to consistently
deal with public-key encryption, the authentication proper-
ties still cannot be proven, as we lack an axiom for establish-
ing thread existence as pointed out previously. Contrary to
signatures or symmetric-key cryptography, there is no easy
solution with an axiom based on honest agents only, because
the public keys are also known to the intruder. If a message
encrypted with the public key of an honest agent ˆX occurs,
no conclusion can be drawn about the sender or creator of
the message. Thus we must also consider the possibility that
the message was sent by the adversary.
A ﬁrst step towards a solution would be to introduce an
axiom in the protocol logic, along the lines of Lemma 2.3 [14,
page 321] of the execution model. In fact, such an axiom was
present in a precursor of basic PCL. In [19, page 701] one
can ﬁnd axiom AR1 which, when recast in the basic PCL
model, would read
AR1 [receive t]X∃Z.Send(Z, t)
(This axiom is not in basic PCL)
(2)
A second axiom that might be adapted for proving these
properties is the SRC axiom in [19, page 703].
Unfortunately, for either of these axioms, authentication
proofs would require either further machinery to prove that
Z is executed by an honest agent, or explicit reasoning about
the intruder, as the sender thread Z need not be executed
by an honest agent. This type of reasoning is not supported
by basic PCL, and would require a signiﬁcant amount of
additional machinery.
3.2 No means to establish preceding actions in
a thread
By the deﬁnition of the PCL execution model, threads of