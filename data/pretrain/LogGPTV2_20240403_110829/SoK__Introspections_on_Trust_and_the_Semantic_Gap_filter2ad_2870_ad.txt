are the system call
table and interrupt descriptor table.
For instance, an attacker could interpose on all ﬁle open
calls simply by replacing the pointer to the sys_open()
function in the system call table.
In older OSes, these hooks were in the data segment
despite not being dynamically changed by most OSes. In
order to prevent malware from overwriting these hooks, most
kernels now place these hooks in the read-only text segment.
As discussed in §III-D1, a sufﬁcient defense is hypervisor-
imposed, page-level Write ⊕ Execute permissions.
to protect
2) Data section hooks: Kernel data section hooks are
more difﬁcult
than text section hooks. Data
section hooks place function pointers in objects, facilitating
extensibility. For instance, Linux implements a range of dif-
ferent socket types behind a generic API; each instantiation
overrides certain hooks in the ﬁle descriptor for a given
socket handle.
The fundamental challenge is that, although these hooks
generally do not change during the lifetime of the object,
they are often placed in the same page or even cache
line with ﬁelds that do change. Because most kernels mix
hooks which should be immutable with changing data, most
hardware-based protection mechanisms are thwarted.
In practice, these hooks are very useful for rootkits to
hide themselves from anti-malware tools inside the VM. For
instance, the Adore-ng [36] rootkit overrides the lookup()
and readdir() functions on the /proc ﬁle system di-
rectory. Process listing utilities work by reading the sub-
directories for each running process under /proc; a rootkit
that overrides these functions can ﬁlter itself from the
readdir() system call issued by ps.
In order to defend against such attacks, the function point-
ers need to be protected from modiﬁcation once initialized.
Because of the high-cost of moderating all writes to these
data structures, most defenses either move the hooks to
different locations which can be write-protected [89], or
augment hooks in the kernel with checks against a whitelist
of trusted functions [75].
are benign in order to provide some meaningful protections
without solving the signiﬁcantly harder problem of kernel
control ﬂow integrity in the presence of untrusted modules.
KOH defenses generally assume benign kernel modules.
Finally, we note that some published solutions to the
KOH data section problem are based on best-effort dynamic
analysis, which can miss hooks that are not exercised. There
is no fundamental reason this analysis should be dynamic,
other than the unavailability of source code. In fact, some
systems do use static analysis to identify code hooks [51],
which can identify all possible data section hooks.
B. Dynamic Kernel Object Manipulation
Manipulating the kernel
text and code hooks are the
easiest attack vector against VMI; once KOH defenses
were developed, attackers turned their attention to attacks
on the kernel heap. Dynamic Kernel Object Manipulation
(DKOM) [28] attacks modify the kernel heap through a
loaded module or an application accessing /dev/mem or
/proc/kcore on Linux. DKOM attacks only modify data
values, and thus are distinct from modifying the control ﬂow
through function hooks (KOH).
A DKOM attack works by invalidating latent assumptions
in unmodiﬁed kernel code. A classic example of a DKOM
attack is hiding a malicious process from a process listing
tools, such as ps. The Linux kernel tracks processes in two
separate data structures: a linked list for process listing and
a tree for scheduling. A rootkit can hide malicious processes
by taking the process out of the linked list, but leaving
the malicious process in the scheduler tree. The interesting
property is that loading a module can be sufﬁcient to alter
the behavior of unrelated, unmodiﬁed kernel code.
DKOM attacks are hard to prevent because they are
a metaphorical needle in a haystack of expected kernel
heap writes. As a result, most practical defenses attempt
to identify data structure invariants, either by hand, static,
or dynamic analysis, and then detect data structure invariant
violations asynchronously. Because an attacker can create
objects from any memory, not just the kernel heap allocator,
data structure detection is also a salient issue for detect-
ing DKOM attacks (§III-A). Thus, a robust, asynchronous
DKOM detector must search all guest memory, increasing
overheads, and tolerate attempts to obfuscate a structure.
Trust: DKOM defenses introduce additional trust in the
guest beyond a KOH defense, and make several assumptions
which an attacker can could be violated by an attacker.
Most DKOM defenses work by identifying security-related
data structure invariants. Because it
is difﬁcult for the
defender to ever have conﬁdence that all security-relevant
invariants have been identiﬁed, this approach will generally
be best-effort and reactive in nature. Deeper source analysis
tools could yield more comprehensive invariant results, but
more research is needed on this topic. Many papers on the
Trust: Protecting the kernel code from unexpected
modiﬁcations at runtime is clearly sensible. Underlying these
defenses is the assumption that the kernel is initially trusted,
but may be compromised later. The more subtle point,
however, is that all of the VMI tools discussed in §III assume
that the kernel text will not change. Thus, preventing text
section modiﬁcation is effectively a prerequisite for current
VMI techniques.
Defenses against KOH on data hooks generally posit
trust in the ability of an administrator to correctly identify
trustworthy and untrustworthy kernel modules. As explained
in Section III-D, KOH defenses assume that kernel modules
613
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:07 UTC from IEEE Xplore.  Restrictions apply. 
topic focus on a few troublesome data structures, such as
the task_struct, yet Linux has several hundred data
structure types. It is unclear whether any automated analysis
will scale to the number of hiding places afforded to rootkits
by monolithic kernels, or whether detection tools will always
be one step behind attackers. That said, even a best-effort
defense has value in making rootkits harder to write.
Another problematic assumption is that all security-
sensitive ﬁelds of kernel data structures have invariants that
can be easily checked in a memory snapshot. For instance,
one might assume that any outgoing packets come from a
socket that appears in the output of a tool such as netstat
(or a VMI-based equivalent). Yet a malicious Linux kernel
module could copy packets from the heap of an application
to the outgoing IP queue—a point in the networking stack
which doesn’t maintain any information about the origi-
nating socket or process. Thus, memory snapshots alone
couldn’t easily identify an inconsistency between outgoing
packets and open sockets, especially if the packet could have
been sent by a different process, such as a process with
an open raw socket. Although the problem in this example
could be mitigated with continuous monitoring, such mon-
itoring would substantially increase runtime overheads; in
contrast, most DKOM defenses rely on infrequent scanning
to minimize overheads. In this example, the data structure
invariant spans a sequence of operations, which can’t be
captured with one snapshot.
A single snapshot cannot capture data structure invariants
that span multiple operations.
Third, DKOM defenses cement trust that the guest kernel
is benign. These defenses train data structure classiﬁers
on a clean kernel instance or derive the classiﬁers from
source code, which is assumed to only demonstrate desirable
behavior during the training phase. Although we hasten to
note that this assumption may be generally reasonable, it
is not beyond question that an OS vendor might include
a backdoor that such a classiﬁer would learn to treat as
expected behavior.
In order to ensure that the guest kernel is benign, DKOM
defenses generally posit a KOH defense. Learning code
invariants is of little use when an attacker can effectively
replace the code. The interesting contrast between KOH and
DKOM defenses is that DKOM defenses can detect invalid
data modiﬁcations even in the presence of an untrustworthy
module, whereas common KOH defenses rely on module
whitelisting. Thus, if a DKOM defense intends to tolerate
untrusted modules, it must build on a KOH defense that
is robust to untrusted modules as well, which may require
substantially stronger control ﬂow integrity protection.
KOH defenses are a building block for DKOM defenses,
but often make different trust assumptions about modules.
Finally, these detection systems explicitly assume mal-
ware will leave persistent, detectable modiﬁcations and im-
plicitly assume malware cannot win races with the detector.
DKOM detectors rely on invariant violations being present
in the view of memory they analyze—either a snapshot or
a concurrent search using a read-only view of memory. Be-
cause DKOM detectors run in increments of seconds, short-
lived malware can easily evade detection. Even for persistent
rootkits, a reasonably strong adversary may also have access
to similar data structure classiﬁers and aggressively search
for invariants missed by the classiﬁer.
If a rootkit can reliably predict when a DKOM detector
will view kernel memory, the rootkit has the opportunity to
temporarily repair data structure invariants—racing with the
detector. Reading a substantial portion of guest memory can
be is highly disruptive to cache timings—stalling subsequent
writes on coherence misses. Similarly, solutions based on
preempting the guest OS will leave telltale “lost ticks” on
the system clock. Even proposed hardware solutions can
be probed by making benign writes to potentially sensitive
addresses and then observing disruptions to unrelated I/O
timings. Given the long history of TOCTTOU and other
concurrency-based attacks [29, 92], combined with a likely
timing channel induced by the search mechanism and recent
successes exploiting VM-level side channels [94], the risk of
an attacker successfully racing with a detector is concerning.
DKOM defenses are potentially vulnerable to race condi-
tions within their threat model.
C. Direct Kernel Structure Manipulation
Direct Kernel Structure Manipulation (DKSM) attacks
[23] change the interpretation of a data structure between
training a VMI tool and its application to classify memory
regions into data structures. Simple examples of a DKSM
attack include swapping two ﬁelds within a data structure
or padding the structure with garbage ﬁelds so that relative
offsets differ from the expectation of the VMI tool.
Because most VMI tools assume a benign kernel, a
successful DKSM attack hinges on changing kernel con-
trol ﬂow. The two previously proposed mechanisms are
KOH attacks and return-oriented programming [66]. As
discussed above, a number of successful countermeasures
for KOH attacks have been developed, as have effective
countermeasures to return-oriented programming, including
G-Free [72], “Return-Less” kernels [62], and STIR [90].
Trust: DKSM is somewhat of an oddity in the literature
because it
is effectively precluded by a generous threat
model. However, a realistic threat model might allow an
adversarial OS to demonstrate different behavior during the
data structure training and classiﬁcation phases—analogous
to “split-personality” malware that behaves differently when
it detects that it is under analysis.
DKSM is a reasonable concern obviated by generous
threat models.
614
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:07 UTC from IEEE Xplore.  Restrictions apply. 
Attack
Write text
Segment
KOH
(code and
hooks)
Defense
Hypervisor-enforced W
⊕ X.
Memory protect hooks
from text section modiﬁ-
cation, or whitelist load-
able modules.
DKOM
(heap)
Identify data structure
invariants, detect viola-
tions by scanning mem-
ory snapshots.
Trust Assumption
Initial text segment benign.
Pristine
initial OS copy
and administrator’s ability
to discern trustworthy ker-
nel modules.
• Guest
exhibits
only desirable behavior
during
or
source is trustworthy.
training,
kernel
• All
security-relevant
data structure invariants
can
a
priori.
identiﬁed
be
• All malware will
leave
persistent modiﬁcations
that violate an invariant.
invariants can be
single
• All
in
a
checked
search.
• Attackers
cannot win
races with the monitor.
DKSM
Prevent Bootstrapping
through KOH or ROP.
OS is benign; behaves iden-
tically during training and
classiﬁcation.
VMI ATTACKS, DEFENSES, AND UNDERLYING TRUST ASSUMPTIONS.
Table III
D. The semantic gap is really two problems
Under a stronger threat model, the DKSM attack effec-
tively leverages the semantic gap to thwart security mea-
sures. Under DKSM, a malicious OS actively misleads VMI
tools in order to violate a security policy.
In the literature on VM introspection, the semantic gap
problem evolved to refer to two distinct
issues: (1) the
engineering challenges of generating introspection tools,
possibly without source code [40, 44, 80], and (2) the
ability of a malicious or compromised OS to exploit fragile
assumptions underlying many introspection designs in order
to evade a security measure [51, 64, 77, 83, 89]. These
assumptions include:
• Trusting that the guest OS is benign during the training
phase, and will not behave differently under monitoring.
• All security-sensitive invariants and hooks can be auto-
matically learned.
searches.
• Attacks will persist long enough to be detected by periodic
• Administrators can whitelist trustworthy kernel modules.