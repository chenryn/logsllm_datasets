B).
380Figure 2: The client-ﬂow protocol sequences.
9. IdP checks i, r, c and s, and returns an access token t to
RP.
10. RP makes a web API call to IdP with t.
11. IdP validates t and returns U’s proﬁle attributes for RP
to create an authenticated session.
The client-ﬂow is designed for applications that cannot
embed a secret key, such as JavaScript clients. The access
token is returned directly in the redirect URI, and its secu-
rity is handled in two ways: (1) The IdP validates whether
the redirect URI matches a pre-registered URL to ensure
the access token is not sent to unauthorized parties; (2) the
token itself is appended as an URI fragment (#) of the redi-
rect URI so that the browser will never send it to the server,
and hence preventing the token from being exposed in the
network. Figure 2 illustrates how client-ﬂow works:
1. User U initiates an SSO process by clicking on the social
login button rendered by RP.
2. B sends response_type=token, client ID i, permission
scope p, redirect URL r and an optional state parameter
a to IdP.
3. Same as sever-ﬂow step 4 (i.e., authentication).
4. Same as sever-ﬂow step 5 (i.e., authorization).
5. IdP returns an access token t appended as an URI frag-
ment of r to RP via B. State parameter a is appended
as a query parameter if presented.
6. B sends a to r on RP. Note that B retains the URI
fragment locally, and does not include t in the request to
RP.
7. RP returns a web page containing a script to B. The
script extracts t contained in the fragment using JavaScript
command such as document.location.hash.
8. With t, the script could call IdP’s web API to retrieve
U’s proﬁle on the client-side, and then send U’s proﬁle
to RP’s sign-in endpoint; or the script may send t to RP
directly, and then retrieve U’s proﬁle from RP’s server-
side.
2.2 Related work
The “OAuth Threat Model” [25] is the oﬃcial OAuth 2.0
security guide that provides a comprehensive threat model
and countermeasures for implementation developers to fol-
low. Several formal approaches have been used to examine
the OAuth 2.0 protocol. Pai et al. [32] formalize the proto-
col using Alloy framework [22], and their result conﬁrms a
known security issue discussed in Section 4.1.1 of the “OAuth
Threat Model”. Chari et al. [8] analyze OAuth 2.0 server-
ﬂow in the Universal Composability Security framework [7],
and the result shows that the protocol is secure if all end-
points from IdP and RP are SSL protected. Slack et al. [38]
use Murphi [10] to verify OAuth 2.0 client-ﬂow, and conﬁrm
a threat documented in the “OAuth Threat Model” (i.e.,
CSRF attack against redirect URI). However valuable these
ﬁndings are, as the formal proofs are executed on the ab-
stract models of the OAuth protocol, subtle implementation
details and browser behaviors might be ignored. To comple-
ment formal approaches, we performed a security analysis
through empirical examinations of real-world IdP and RP
implementations.
Many researchers have studied the security of Facebook
Connect protocol—the predecessor of Facebook OAuth 2.0,
which has already been deprecated and replaced by OAuth
2.0 as the default Facebook Platform authentication and au-
thorization protocol. Each study employs a diﬀerent method
to examine the protocol, including formal model checking
using AVISPA [27], symbolic execution that investigates if
postMessage HTML5 API is used in an insecure manner [20],
and labeling HTTP messages going through the browser to
explore exploit opportunities [46].
The vulnerability discovery methodology employed by our
work and Wang et al. [46] are similar (i.e., examining the
browser relayed messages), but diﬀerent in two important
aspects. First, we assume a practical adversary model based
on existing literature in which an attacker can eavesdrop un-
encrypted traﬃc between the browser and the RP server,
and that application and browser vulnerabilities could be
leveraged by an attacker. Without this assumption, only
the impersonation attack on RPs that use user proﬁles from
the IdP as SSO credentials could be identiﬁed by Wang et
al. [46], but not other weaknesses we unveiled. Second, we
focused on OAuth 2.0 rather than generic SSO. This focus
allowed us to (1) identify the gaps between the protocol spec-
iﬁcation and implementations, (2) design semi-automatic as-
sessment tools to examine the prevalence of each uncovered
weakness, whereas the work in [46] requires in-depth knowl-
edge from domain experts to evaluate an exploit, and (3)
investigate fundamental causes (rather than implementation
logic ﬂaws found in [46]), and propose simple and practical
improvements that are applicable to all current OAuth IdPs
and RPs (instead of speciﬁc websites), and can be adopted
gradually by individual sites.
3. APPROACH
Our overall approach consists of two empirical studies that
examine a representative sample of the most popular OAuth
SSO implementations: an exploratory study, which analyzes
potential threats users faced when using OAuth SSO for
login, and a conﬁrmatory study that evaluates how prevalent
those uncovered threats are. Throughout both studies, we
investigate the root causes of those threats in order to design
eﬀective and practical protection mechanisms.
We examined the implementations of three high-proﬁle
IdPs, including Facebook, Microsoft and Google. We could
not evaluate Yahoo and Twitter as they were using OAuth
1.0 at the time of writing. For the samples of RP web-
sites, we looked through the list of Google’s Top 1,000 Most-
Visited Websites [15]. We excluded non-English websites
(527), and only chose websites that support the use of Face-
book accounts for login (96), because Google’s OAuth 2.0
implementation was still under experiment, and the imple-
mentation from Microsoft had just been released.
On December 13th, 2011, Facebook released a “breaking
change” to its JavaScript SDK. The updated SDK uses a
381signed authorization code in place of an access token for
the cookie being set by the SDK library [6]. This change
avoids exposure of the access token in the network, but it
also breaks the existing SSO functions of RP websites that
rely on the token stored in the cookie. This particular event
gave us an opportunity to investigate how client-ﬂow RPs
handle SSO without the presence of access tokens in cookies,
and whether their coping strategies introduce potential risks.
3.1 Adversary Model
We assume the user’s browser and computer are not com-
promised, the IdP and RP are benign, and that the commu-
nication between the RP and IdP is secured. In addition,
our threat model assumes that the conﬁdentiality, integrity,
and availability of OAuth related credentials (e.g., access
token, authorization code, client secret) are guaranteed by
the IdP. In our adversary model, the goal of an adversary
is to gain unauthorized access to the victim user’s personal
data on the IdP or RP website. There are two diﬀerent ad-
versary types considered in this work, which vary on their
attack capabilities:
• A web attacker can post comments that include static
content (e.g., images, or stylesheet) on a benign website,
setup a malicious website, send malicious links via spam
or an Ads network, and exploit web vulnerabilities at RP
websites. Malicious content crafted by a web attacker can
cause the browser to issue HTTP requests to RP and IdP
websites using both GET and POST methods, or execute
the scripts implanted by the attacker.
• A passive network attacker can sniﬀ unencrypted net-
work traﬃc between the browser and the RP (e.g., un-
secured Wi-Fi wireless network). We assume that the
client’s DNS/ARP function is intact, and hence do not
consider man-in-the-middle (MITM) network attackers.
An MITM attacker can alter the script of a redirect URI
to steal access tokens directly, which is an obvious threat
that has been already discussed in the “OAuth Threat
Model” (Section 4.4.2.4).
3.2 Methodology
Academic researchers undertaking a security analysis of
real-world OAuth SSO systems face unique challenges. These
technical constraints include the lack of access to the im-
plementation code, undocumented implementation-speciﬁc
design features, the complexity of client-side JavaScript li-
braries, and the diﬃculty of conducting realistic evaluations
without putting real users and websites at risk.
In our
methodology, we treated IdPs and RPs as black boxes, and
analyzed the HTTP traﬃc going through the browser during
an SSO login session to identify exploit opportunities.
In the initial stage, we implemented a sample RP for
each IdP under examination to observe and understand IdP-
speciﬁc mechanisms that are not covered or mandated by the
speciﬁcation and the “OAuth Threat Model”. In addition to
other ﬁndings, we found that each evaluated IdP oﬀers a
JavaScript SDK to simplify RP development eﬀorts. The
SDK library implements a variant of client-ﬂow, and pro-
vides a set of functions and event-handling mechanisms in-
tended to free RP developers from implementing the OAuth
protocol by themselves. We observed several IdP-speciﬁc
mechanisms that deserve further investigation, as illustrated
in Table 1: (1) SDKs save access tokens into HTTP cook-
ies, (2) authorization codes are not restricted to one-time
Mechanisms (Sections)
GL
1. Token cookie (4.1, 5.1)
2. Authz. code (4.3, 5.1)
3. Implicit authz. (4.2, 5.2)
4. Cross-domain comm. (5.3)
5. Redirect URI (4.2, 5.2, 6.1) MD WL+MD5
6. Refresh token (5.2, 6.1)
N
N
Y
FB
Y1
MU SU
Y
Y2
Y
Y3
MS
Y
MU
Y
N4
SD
Y6
IdP-speciﬁc
1:
Table
implementation mechanisms.
FB=Facebook; GL=Google, MS=Microsoft;
Acronyms:
Y=Yes; N=No; MU=Multiple Use;
SU=Single Use;
MD=Multiple Domain; WL=Whitelist; SD=Single Domain.
Notes: 1: prior to the ﬁx; 2: postMessage and Flash; 3: postMes-
sage, Flash, FIM, RMR and NIX; 4: use cookie; 5: whitelist
for client and server-ﬂow, but multiple domains for SDK ﬂow;
6: only when an oﬄine permission is requested.
use, (3) access tokens are obtained even before the end-user
initiating the login process, (4) access tokens are passing
through cross-domain communication mechanisms, (5) redi-
rect URI restriction is based on an HTTP domain instead
of a whitelist, and (6) a token refresh mechanism is absent
from Facebook’s implementation. The security implications
of each observation are further discussed in the denoted sec-
tions.
In the second stage of our exploratory study, we manu-
ally recorded and analyzed HTTP traﬃc from 15 Facebook
RPs (randomly chose from the list of 96 RP samples). The
analysis was conducted both before and after the Facebook
SDK revision event. From the analysis of network traces, we
identiﬁed several exploitable weaknesses in the RP imple-
mentations. For each vulnerability, a corresponding exploit
was designed and manually tested on those 15 RPs.
In the conﬁrmatory study, a set of semi-automatic vulner-
ability assessment tools were designed and implemented to
facilitate the evaluation process and avoid errors from man-
ual inspections. The tools were then employed to evaluate
each uncovered vulnerability on 96 Facebook RPs. For each
failed exploitation, we manually examined the reasons.
4. EVALUATION AND RESULTS
To begin an assessment process, the evaluator signs into
the RP in question using both traditional and SSO options
through a Firefox browser. The browser is augmented with
an add-on we designed that records and analyzes the HTTP
requests and responses passing through the browser. To
resemble a real-world attack scenario, we implemented a
website, denoted as attacker.com, that retrieves the analysis
results from the trace logs, and feeds them into each assess-
ment module described below. Table 2 shows the summary
of our evaluation results. We found 42% of RPs use server-
ﬂow, and 58% support client-ﬂow; but all client-ﬂow RPs
use Facebook SDK instead of handling the OAuth protocol
themselves. In the following sections, we describe how each
exploit works, the corresponding assessment procedures and
evaluation results.
4.1 Access token eavesdropping (A1)
This exploit eavesdrops access tokens by sniﬃng on the
unencrypted communication between the browser and RP
server. To assess this exploit, the log analyzer traces the ac-
cess token from its origin, and checks if the token is passed
through any subsequent communication between the browser
382RPs
SSL (%)
Vulnerabilities (%)
RPs
Client
Flow SSO credential N % T
14
7
0
18
1
9
49
code
token
proﬁle
code
token
proﬁle
36
17
4
25
4
13
100
35
17
4
24
4
12
96
Gigya
Total
Server
SSL % Vul. %
S A3 A4
4
4
2
8
3
0
10
7
1
1
6
6
21
33
25
15
3
11
3
6
64
Flow N % T
21
Client
Server
28
49
Total
58
42
100
56
40
96
S
6
15
21
A1 A2 A3 A4 A5
18
25