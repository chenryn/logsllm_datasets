(if needed)
RPC
Communication
BiRtCreateEvent
ForApp
+Callback
CreateBrokerEvent
SetWaitableTimer
Timer fires, Callback is called:
Publish new WNF state data
Starts the
Background Task
Subscribe
WNF state
BrokerInfracture
Time Broker
Server
Background Task
Host
WNF
FIGURE 8-44 Architecture of the Time Broker.
258 
CHAPTER 8 System mechanisms
Another important service that the Background Broker Infrastructure provides to the Brokers 
and to its clients is the storage capability for background tasks. This means that when the user shuts 
down and then restarts the system, all the registered background tasks are restored and rescheduled 
as before the system was restarted. To achieve this properly, when the system boots and the Service 
Control Manager (for more information about the Service Control Manager, refer to Chapter 10) starts 
the Broker Infrastructure service, the latter, as a part of its initialization, allocates a root storage GUID, 
and, using NtLoadKeyEx native API, loads a private copy of the Background Broker registry hive. The 
service tells NT kernel to load a private copy of the hive using a special flag (REG_APP_HIVE). The 
BI hive resides in the C:\Windows\System32\Config\BBI file. The root key of the hive is mounted as 
\Registry\A\ and is accessible only to the Broker Infrastructure service’s process 
(svchost.exe, in this case; Broker Infrastructure runs in a shared service host). The Broker Infrastructure 
hive contains a list of events and work items, which are ordered and identified using GUIDs:
I 
An event represents a Background task’s trigger It is associated with a broker ID (which
represents the broker that provides the event type), the package full name, and the user of the
UWP application that it is associated with, and some other parameters.
I 
A work item represents a scheduled Background task It contains a name, a list of condi-
tions, the task entry point, and the associated trigger event GUID.
The BI service enumerates each subkey and then restores all the triggers and background tasks. It 
cleans orphaned events (the ones that are not associated with any work items). It then finally publishes 
a WNF ready state name. In this way, all the brokers can wake up and finish their initialization.
The Background Broker Infrastructure is deeply used by UWP applications. Even regular Win32 
applications and services can make use of BI and brokers, through their Win32 client libraries. Some 
notable examples are provided by the Task Scheduler service, Background Intelligent Transfer service, 
Windows Push Notification service, and AppReadiness.
Packaged applications setup and startup 
Packaged application lifetime is different than standard Win32 applications. In the Win32 world, 
the setup procedure for an application can vary from just copying and pasting an executable file to 
executing complex installation programs. Even if launching an application is just a matter of running 
an executable file, the Windows loader takes care of all the work. The setup of a Modern application is 
instead a well-defined procedure that passes mainly through the Windows Store. In Developer mode, 
an administrator is even able to install a Modern application from an external .Appx file. The package 
file needs to be digitally signed, though. This package registration procedure is complex and involves 
multiple components. 
Before digging into package registration, it’s important to understand another key concept that 
belongs to Modern applications: package activation. Package activation is the process of launching a 
Modern application, which can or cannot show a GUI to the user. This process is different based on the 
type of Modern application and involves various system components. 
CHAPTER 8 System mechanisms
259
Package activation
A user is not able to launch a UWP application by just executing its .exe file (excluding the case of the 
new AppExecution aliases, created just for this reason. We describe AppExecution aliases later in this 
chapter). To correctly activate a Modern application, the user needs to click a tile in the modern menu, 
use a special link file that Explorer is able to parse, or use some other activation points (double-click 
an application’s document, invoke a special URL, and so on). The ShellExperienceHost process decides 
which activation performs based on the application type.
UWP applications
The main component that manages this kind of activation is the Activation Manager, which is imple-
mented in ActivationManager.dll and runs in a sihost.exe service because it needs to interact with the 
user’s desktop. The activation manager strictly cooperates with the View Manager. The modern menu 
calls into the Activation Manager through RPC. The latter starts the activation procedure, which is sche-
matized in Figure 8-45:
I 
Gets the SID of the user that is requiring the activation, the package family ID, and PRAID of the
package. In this way, it can verify that the package is actually registered in the system (using the
Dependency Mini Repository and its registry cache).
I 
If the previous check yields that the package needs to be registered, it calls into the AppX
Deployment client and starts the package registration. A package might need to be registered
in case of “on-demand registration,” meaning that the application is downloaded but not
completely installed (this saves time, especially in enterprise environments) or in case the ap-
plication needs to be updated. The Activation Manager knows if one of the two cases happens
thanks to the State Repository.
I 
It registers the application with HAM and creates the HAM host for the new package and its
initial activity.
I 
Activation Manager talks with the View Manager (through RPC), with the goal of initializing the
GUI activation of the new session (even in case of background activations, the View Manager
always needs to be informed).
I 
The activation continues in the DcomLaunch service because the Activation Manager at this
stage uses a WinRT class to launch the low-level process creation.
I 
The DcomLaunch service is responsible in launching COM, DCOM, and WinRT servers in re-
sponse to object activation requests and is implemented in the rpcss.dll library. DcomLaunch
captures the activation request and prepares to call the CreateProcessAsUser Win32 API. Before
doing this, it needs to set the proper process attributes (like the package full name), ensure
that the user has the proper license for launching the application, duplicate the user token, set
the low integrity level to the new one, and stamp it with the needed security attributes. (Note
that the DcomLaunch service runs under a System account, which has TCB privilege. This kind
of token manipulation requires TCB privilege. See Chapter 7 of Part 1 for further details.) At this
point, DcomLaunch calls CreateProcessAsUser, passing the package full name through one of
the process attributes. This creates a suspended process.
260 
CHAPTER 8 System mechanisms
I 
The rest of the activation process continues in Kernelbase.dll. The token produced by
DcomLaunch is still not an AppContainer but contains the UWP Security attributes. A Special
code in  the CreateProcessInternal function uses the registry cache of the Dependency Mini
Repository to gather the following information about the packaged application: Root Folder,
Package State, AppContainer package SID, and list of application’s capabilities. It then verifies
that the license has not been tampered with (a feature used extensively by games). At this point,
the Dependency Mini Repository file is mapped into the parent process, and the UWP applica-
tion DLL alternate load path is resolved.
I 
The AppContainer token, its object namespace, and symbolic links are created with the
BasepCreateLowBox function, which performs the majority of the work in user mode, except for
the actual AppContainer token creation, which is performed using the NtCreateLowBoxToken
kernel function. We have already covered AppContainer tokens in Chapter 7 of Part 1.
I 
The kernel process object is created as usual by using NtCreateUserProcess kernel API.
I 
After the CSRSS subsystem has been informed, the BasepPostSuccessAppXExtension function
maps the Dependency Mini Repository in the PEB of the child process and unmaps it from the
parent process. The new process can then be finally started by resuming its main thread.
NT Kernel
Modern Start Menu
(ShellExperienceHost.exe
Activation
Manager
Host Activity
Manager (HAM)
View
Manager
WinRT Activation
Sets process attributes
Checks license
Duplicates and stamps the token
Calls CreateProcessAsUser
State Repository
Dependency Mini Repository
Initializes the GUI
Creates HAM host and
Activity
Read package information
and AppContainer data
Checks if package
exists and is
registered
Process Creation
AppContainer Environment setup
AppContainer token creation
KernelBase.dll
DComLaunch
FIGURE 8-45 Scheme of the activation of a modern UWP application.
CHAPTER 8 System mechanisms
261
Centennial applications
The Centennial applications activation process is similar to the UWP activation but is implemented 
in a totally different way. The modern menu, ShellExperienceHost, always calls into Explorer.exe for 
this kind of activation. Multiple libraries are involved in the Centennial activation type and mapped in 
Explorer, like Daxexec.dll, Twinui.dll, and Windows.Storage.dll. When Explorer receives the activation 
request, it gets the package full name and application id, and, through RPC, grabs the main application 
executable path and the package properties from the State Repository. It then executes the same steps 
(2 through 4) as for UWP activations. The main difference is that, instead of using the DcomLaunch 
service, Centennial activation, at this stage, it launches the process using the ShellExecute API of the 
Shell32 library. ShellExecute code has been updated to recognize Centennial applications and to use 
a special activation procedure located in Windows.Storage.dll (through COM). The latter library uses 
RPC to call the RAiLaunchProcessWithIdentity function located in the AppInfo service. AppInfo uses the 
State Repository to verify the license of the application, the integrity of all its files, and the calling pro-
cess’s token. It then stamps the token with the needed security attributes and finally creates the process 
in a suspended state. AppInfo passes the package full name to the CreateProcessAsUser API using the 
PROC_THREAD_ATTRIBUTE_PACKAGE_FULL_NAME process attribute.
Unlike the UWP activation, no AppContainer is created at all, AppInfo calls the PostCreateProcess 
DesktopAppXActivation function of DaxExec.dll, with the goal of initializing the virtualization layer of 
Centennial applications (registry and file system). Refer to the “Centennial application” section earlier in 
this chapter for further information.
EXPERIMENT: Activate Modern apps through the command line
In this experiment, you will understand better the differences between UWP and Centennial, and 
you will discover the motivation behind the choice to activate Centennial applications using the 
ShellExecute API. For this experiment, you need to install at least one Centennial application. At 
the time of this writing, a simple method to recognize this kind of application exists by using the 
Windows Store. In the store, after selecting the target application, scroll down to the “Additional 
Information” section. If you see “This app can: Uses all system resources,” which is usually located 
before the “Supported languages” part, it means that the application is Centennial type.
In this experiment, you will use Notepad++. Search and install the “(unofficial) Notepad++” 
application from the Windows Store. Then open the Camera application and Notepad++. Open 
an administrative command prompt (you can do this by typing cmd in the Cortana search box 
and selecting Run As Administrator after right-clicking the Command Prompt label). You need to 
find the full path of the two running packaged applications using the following commands:
wmic process where "name='WindowsCamera.exe'" get ExecutablePath 
wmic process where "name='notepad++.exe’" get ExecutablePath
EXPERIMENT: Activate Modern apps through the command line
In this experiment, you will understand better the differences between UWP and Centennial, and
you will discover the motivation behind the choice to activate Centennial applications using the
ShellExecute API. For this experiment, you need to install at least one Centennial application. At
the time of this writing, a simple method to recognize this kind of application exists by using the
Windows Store. In the store, after selecting the target application, scroll down to the “Additional
Information” section. If you see “This app can: Uses all system resources,” which is usually located
before the “Supported languages” part, it means that the application is Centennial type.
In this experiment, you will use Notepad++. Search and install the “(unofficial) Notepad++” 
application from the Windows Store. Then open the Camera application and Notepad++. Open 
an administrative command prompt (you can do this by typing cmd in the Cortana search box 
and selecting Run As Administrator after right-clicking the Command Prompt label). You need to 
find the full path of the two running packaged applications using the following commands:
wmic process where "name='WindowsCamera.exe'" get ExecutablePath
wmic process where "name='notepad++.exe’" get ExecutablePath
262 
CHAPTER 8 System mechanisms
Now you can create two links to the application’s executables using the commands:
mklink "%USERPROFILE%\Desktop\notepad.exe" "" 
mklink "%USERPROFILE%\Desktop\camera.exe" "
replacing the content between the  symbols with the real executable path discovered 
by the first two commands.
You can now close the command prompt and the two applications. You should have created 
two new links in your desktop. Unlike with the Notepad.exe link, if you try to launch the Camera 
application from your desktop, the activation fails, and Windows returns an error dialog box like 
the following:
This happens because Windows Explorer uses the Shell32 library to activate executable links. 
In the case of UWP, the Shell32 library has no idea that the executable it will launch is a UWP 
application, so it calls the CreateProcessAsUser API without specifying any package identity. 
In a different way, Shell32 can identify Centennial apps; thus, in this case, the entire activation 
process is executed, and the application correctly launched. If you try to launch the two links 
using the command prompt, none of them will correctly start the application. This is explained 
by the fact that the command prompt doesn’t make use of Shell32 at all. Instead, it invokes the 
CreateProcess API directly from its own code. This demonstrates the different activations of each 
type of packaged application.
Note Starting with Windows 10 Creators Update (RS2), the Modern Application Model 
supports the concept of Optional packages (internally called RelatedSet). Optional packages 
are heavily used in games, where the main game supports even DLC (or expansions), and in 
packages that represent suites: Microsoft Office is a good example. A user can download 
and install Word and implicitly the framework package that contains all the Office common 
code. When the user wants to install even Excel, the deployment operation could skip the 
download of the main Framework package because Word is an optional package of its main 
Office framework.
Optional packages have relationship with their main packages through their manifest files. 
In the manifest file, there is the declaration of the dependency to the main package (using 
AMUID). Deeply describing Optional packages architecture is beyond the scope of this book.
Now you can create two links to the application’s executables using the commands:
mklink "%USERPROFILE%\Desktop\notepad.exe" ""
mklink "%USERPROFILE%\Desktop\camera.exe" "
replacing the content between the  symbols with the real executable path discovered 
by the first two commands.
You can now close the command prompt and the two applications. You should have created 
two new links in your desktop. Unlike with the Notepad.exe link, if you try to launch the Camera 
application from your desktop, the activation fails, and Windows returns an error dialog box like 
the following:
This happens because Windows Explorer uses the Shell32 library to activate executable links. 
In the case of UWP, the Shell32 library has no idea that the executable it will launch is a UWP 
application, so it calls the CreateProcessAsUser API without specifying any package identity. 
CreateProcessAsUser API without specifying any package identity. 
CreateProcessAsUser
In a different way, Shell32 can identify Centennial apps; thus, in this case, the entire activation 
process is executed, and the application correctly launched. If you try to launch the two links 
using the command prompt, none of them will correctly start the application. This is explained 
by the fact that the command prompt doesn’t make use of Shell32 at all. Instead, it invokes the 
CreateProcess API directly from its own code. This demonstrates the different activations of each 
type of packaged application.
CHAPTER 8 System mechanisms
263
AppExecution aliases
As we have previously described, packaged applications could not be activated directly through their 
executable file. This represents a big limitation, especially for the new modern Console applications. 
With the goal of enabling the launch of Modern apps (Centennial and UWP) through the command 
line, starting from Windows 10 Fall Creators Update (build 1709), the Modern Application Model has 
introduced the concept of AppExecution aliases. With this new feature, the user can launch Edge or 
any other modern applications through the console command line. An AppExecution alias is basi-
cally a 0-bytes length executable file located in C:\Users\\AppData\Local\Microsoft\
WindowsApps (as shown in Figure 8-46.). The location is added in the system executable search path 
list (through the PATH environment variable); as a result, to execute a modern application, the user 
could specify any executable file name located in this folder without the complete path (like in the Run 
dialog box or in the console command line). 
FIGURE 8-46 The AppExecution aliases main folder.
How can the system execute a 0-byte file? The answer lies in a little-known feature of the file system: 
reparse points. Reparse points are usually employed for symbolic links creation, but they can store any 
data, not only symbolic link information. The Modern Application Model uses this feature to store the 
packaged application’s activation data (package family name, Application user model ID, and applica-
tion path) directly into the reparse point. 
264 
CHAPTER 8 System mechanisms
When the user launches an AppExecution alias executable, the CreateProcess API is used as usual. 
The NtCreateUserProcess system call, used to orchestrate the kernel-mode process creation (see the 
“Flow of CreateProcess” section of Chapter 3 in Part 1, for details) fails because the content of the file is 
empty. The file system, as part of normal process creation, opens the target file (through IoCreateFileEx 
API), encounters the reparse point data (while parsing the last node of the path) and returns a STATUS_
REPARSE code to the caller. NtCreateUserProcess translates this code to the STATUS_IO_REPARSE_TAG_
NOT_HANDLED error and exits. The CreateProcess API now knows that the process creation has failed 
due to an invalid reparse point, so it loads and calls into the ApiSetHost.AppExecutionAlias.dll library, 
which contains code that parses modern applications’ reparse points. 
The library’s code parses the reparse point, grabs the packaged application activation data, and 
calls into the AppInfo service with the goal of correctly stamping the token with the needed security at-