BakSmali汇编的语法来插入log语句就行了，这里笔者选择了Log.v方
法。完整的代码如下：
const-string V2,“PWN"
invoke-static{V2,v1),Landroid/util/Log;->v(Ljava/lang/String;Ljava/lang/String;)
invoke-virtual{v0,vi),Ljava/lang/String;->equals(Ljava/lang/Object;)Z
move-result v0
if-eqz v0, :cond_0
然后按照Apktool重打包的步骤，完成重打包后运行即可。使用
adblogcat命令可以查看log的输出信息，如图24-22所示，使用grep命
令结合tag参数，可以更快找到我们想要的调试信息
$adblogcat1grepPWN
V/PWN
(2872):flag{this_is_flag}
图24-22log法打印flag
---
## Page 877
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试877/1144
24.3.2smali动态调试
24.3.1节介绍了传统的log调试法，可以看出，使用log调试还是
比较烦琐的，需要仔细阅读代码，那么有没有一种方法可以在不修改
BakSmali代码的情况下去直接调试BakSmali代码呢？答案是有的，本
节将介绍直接调试BakSmali代码的方法一一使用JEB2进行调试。本
来笔者还想做一个使用Smalidea插件调试的教程，但是最新版的
IntelijIDEA已经不兼容最新版的Smalidea插件了，为了不误导读者
故将这部分内容删去了。
介绍这种方法之前，必须先了解为什么BakSmali代码可以被调
试。
调试特性的出现最开始是为了满足开发人员的需求。Dalvik虚拟
机在最初的版本中就加入了对调试的支持，为了与传统Java升发的调
试接口统一，Dalvik虚拟机实现了JDWP（JavaDebugWire
Protocol，Java调试有线协议），可以支持使用JDWP的调试器来调试
Android程序，例如Java程序员所熟知的jdb。
Dalvik虚拟机为JDWP的实现加入了DDM（DalvikDebug
---
## Page 878
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
878/1144
Monitor，Dalvik调试监控器）特性，可以使用DDMS（DalvikDebug
MonitorServer，Dalvik调试监视器服务）查看，运行AndroidSDk的
tools自录下的monitor即可打开DDMS。DDMS主要用于实现设备截屏
查看线程信息、文件预览、模拟来电、模拟短信、模拟GPS信息等功
能。DDMS功能强大，但是它不能用于调试BakSmali代码，因此
DDMS也不是本节的重点。
每一个启用调试的Dalvik虚拟机实例都会启动一个JDWP线程
该线程一直处于空闲状态，直到打开DDMS或者调试器连接。那么什
么是启用调试的Dalvik虚拟机实例呢？新的App应用启动时，Android
服务框架会为它创建一个新的Dalvik虚拟机，Android服务框架会首先
检查系统属性ro.debuggable是否为1，如果是1，则新开的Dalvik虚拟
机会启用调试；如果是o，则Android服务框架会进一步检查APK的
AndroidManifest.xml文件，如果元素中包含了
android：debuggable="true"则会开启调试，否则就不开启调试。
查看ro.debuggable属性的方法，是运行“adbshellgetprop
ro.debuggable”命令，如果显示为1则表示已启用，显示为o则表示
未开启。
---
## Page 879
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
879/1144
可见，若想使用BakSmali调试功能，要么需要系统属性
ro.debuggable为1，要么需要APK具有android:debuggable="true"属性
在默认情况下，使用AndroidAVD生成的模拟器的ro.debuggable属性
为1，在默认情况下，使用GoogleAndroid源码库（AOSP）编译出来
的镜像的ro.debuggable属性也为1。那么如果ro.debuggable属性为o
呢？一个很简单的办法就是使用Apktool对APK进行反编译，修改
AndroidManifest.xml文件，为其添加上android:debuggable="true"属
性，再重打包回去。这种方法具有一定的局限性，因此这里采用特定
的方法修改系统的ro.debuggable属性
setpropex，是一款可以修改系统属性的工具，使用这个工具需
要root权限。源码位于https://github.com/jiduck/rootadb中。克隆到住
意路径，切换进去，执行ndk-build命令即可完成编译（没有ndk-builc
命令？先去下载AndroidNDK吧）。编译完成后的可执行程序位于libs
armeabi目录下，有两个文件setpropex和setpropex-pie，使用哪一个
文件取决于系统版本，如果是Android5.o以上的版本，则需要使用
setpropex-pie文件。
编译完成后，adbpush到手机里，运行即可修改系统属性，示例
---
## Page 880
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
880/1144
命令如下：
Sadbpushsetpropex-pie/data/local/tmp
[100%] /data/local/tmp/setpropex-pie
$adb shell
shell@hammerhead:/$su
shell@hammerhead:/#getpropro.debuggable
0
shell@hammerhead:/#getpropro.debuggable
1
这样就成功修改了系统的ro.debuggable属性，可以对任意的APK
进行调试了。Android本身还带有一个setprop命令用于修改系统属性
但是这个命令基本没用
下面开始介绍具体的调试方法
JEB2相比JEB1的进步之处就是它增加了APK的动态调试功能
而且这个功能不需要烦琐的操作，只需要点击一个按钮即可进入调
试。
自前JEB2的调试功能并不稳定，使用时需要多加注意。JEB2的
动态调试界面如图24-23所示。
---
## Page 881
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
881/1144
口
sotring()osrin, 
2tring(1)otr
4O0
ets([B, (9),
tp-sgtstring(1)itring, ,
net+-stot
sadsfestf
ho(,
图24-23JEB动态调试界面
使用JEB2的动态调试功能前，需保证系统设定了ro.debuggable
属性或者APK本身具有android：debuggable="true"属性，然后就可以
调试了。
开始调试的方法非常简单，首先在手机上运行APK；然后点击
JEB2上方的调试按钮，在弹出的对话框中选择目标手机以及要调试
---
## Page 882
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
882/1144
的App的名字，点击Attach，即可进入调试模式。需要注意的是，目
标App的Flags一栏中需要有D属性，如果没有，则是系统的
ro.debuggable属性没有设置好，需要重新设置，如图24-24所示。
Attach
Machines/Devices
to va
Index Name
Locati~FlagsInformation
0
032c274a0934c027
Online
Processes
com.a.sample.findmydex
Flags
1777713com.a.sample.findmydex
D
Options
Suspend all threads
Use Native Debugger
Attach
关闭
刷新
图24-24JEB选择目标进程
图24-25中的按钮从左至右分别为调试、运行、暂停、停止、单
步进入、单步执行、跳出函数、运行到指针处，都是极为常见的调试
按钮。
---
## Page 883
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
883/1144
图24-25JEB动态调试按钮
进入JEB2的调试模式之后，ProjectExplorer一栏中会出现新的一
项一VM。VM中包括Locals栏、Breakpoints栏和Threads栏，其中
Locals栏用于显示局部变量，Breakpoints栏用于显示断点信息，
Threads栏用于显示APK运行的所有线程，如图24-26所示。
在BakSmali代码栏中，选择某一行，使用Control+B（macOS系
统中是Command+B）快捷键下断点，下了断点的语句会在它的左边
显示断点标志。下完想要的断点之后，点击运行按钮，然后触发目标
事件，就能将断点下在自标代码处了，这个时候的调试与一般的调试
方法一样，如图24-27所示。
---
## Page 884
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
884/1144
Project Expl...
口
VM/Locals3
口
Name Type Value
Extra
/Users/alset/Desktop/Fi
thiLcom id=3829
app-release.apk
voint
315306496
12CB3200h
app-release.apk
v1int
v2int
315306496
12CB3200h
Manifest
2131099682
7F060022h
Certificate
v3int
1
1h
v4int
Bytecode
316032032
12D64420h
v5int
314700800
12C1F400h
Resources
VM
Filter: type “Enter" to v
a)JEB动态调试富口（1）
VM/Breakpoints 3
口
VM/Threads 3
Address
Tihread ID State
Lcom/a/sample/findmydex/a;->onCl
PAUSED
Name
Z4
>3
WAITING
Signal Catcher
main
> 4
WAITING FinallzerWatchdogDaer
5
RUNNING Binder_1
>6
>7
WAITING
WAITING FinallzerDaemon
GCDaemon
>8
WAITING HeapTrimmerDaemon
10
>9
RUNNING Binder_2
WAITING
ReferenceQueueDaemon
11
RUNNING Binder_3
13
> 12
RUNNING RenderThread
14
WAITING AdyncTask#2
WAITING AsyncTask#1
15
RUNNING hwuiTask1
> 16
RUNNING hwuiTask2
ryCoc
b)JEB动态调试富口（2）
---
## Page 885
CTF特训营：技术详解、解题方法与
24.3.2smali动态调试
885/1144
图
24-26
Bytecode/Disassembly 
X
xml
a/Source
vM/Threads
口
80080026
move-result-object
v1
08000028
invoke-static
HainActivity->a(String，String)[B，vθ,v1
B008082E
nove-result-object
80008838
invoke-static
MainActivity->iO）[B
08680836
move-result-object
v1
80808838
invoke-static
Arrays->equals([B，[B)Z，vθ，v1
B888803E
nove-result
vθ
08880040
if-eqz
vθ，:6A
:44
80800044
iget-object
vθ，pθ，a->b:Context
88888848
iget-object
v1,pθ,a->c:MainActivity
8088884C
const
v2，0x7F060025
00808052
invoke-virtual
HainActivity->getString(I)String,v1，v2
08888058
nove-result-object
v1
8080085A
invoke-static
Toast->makeText(Context,CharSequence，I)Toast,vθ,
88888068
nove-result-object
88888862
invoke-virtual
Toast->shov()v,vθ
:68
00000068
return-void
:6A
8000006A
iget-object
vθ，pθ，a->b:Context
B080006E
iget-object
v1,pθ，a->c:MainActivity
88808072
const
v2，0x7F060022
88888878
invoke-virtual
MainActivity->getString(I)String，v1，v2
B080807E
move-result-object
v1
00000088
invoke-static
Toast->akeText(Context,CharSequence，I)Toast,vθ,
08080886
move-result-object
Description
HexDump
Disassembly
Strings
图24-27JEB动态调试界面
总的来说，JEB2的动态调试功能还是非常强大的，能在比赛过
程中节约不少的时间。
---
## Page 886
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程886/1144
24.3.3使用Xposed框架Hook进程
本节将介绍Xposed框架，大部分Android发烧友应该都听说过
行，基于它可以制作出许多功能强大的模块，被誉为“Android第一
神器”。
Xposed框架从本质上讲采用的是Hook技术，该框架通过在
system/bin/目录的app_process程序下注入代码，使之在启动的时候
优先加载Xposed框架的XposedBridge.jar文件，该文件在内部会检索
安装的APK，检查APK是否具有Xposed模块的标志，如果有，则将该
APK注册为Xposed模块。此后，当其他的APK运行时，注册的模块会
优先运行，并根据代码进行相关的Hook操作。Xposed框架是开源软
件，更多信息可查看GitHub了解更多内容（https:/lgithub.com/rovo89）
(pasodx
下面我们来看一下Xposed框架的安装步骤。根据Xposed框架的
原理，我们首先要做的是向app_process程序注入代码，Xposed官方