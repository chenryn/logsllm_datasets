title:Transcript Collision Attacks: Breaking Authentication in TLS, IKE
and SSH
author:Karthikeyan Bhargavan and
Ga&quot;etan Leurent
Transcript Collision Attacks: Breaking Authentication
in TLS, IKE, and SSH
Karthikeyan Bhargavan, Gaëtan Leurent
To cite this version:
Karthikeyan Bhargavan, Gaëtan Leurent. Transcript Collision Attacks: Breaking Authentication in
TLS, IKE, and SSH. Network and Distributed System Security Symposium – NDSS 2016, Feb 2016,
San Diego, United States. 10.14722/ndss.2016.23418. hal-01244855
HAL Id: hal-01244855
https://hal.inria.fr/hal-01244855
Submitted on 29 Mar 2016
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
Transcript Collision Attacks:
Breaking Authentication in TLS, IKE, and SSH
Karthikeyan Bhargavan
INRIA
Ga¨etan Leurent
INRIA
PI:EMAIL
PI:EMAIL
Abstract—In response to high-proﬁle attacks that ex-
ploit hash function collisions, software vendors have
started to phase out the use of MD5 and SHA-1 in
third-party digital signature applications such as X.509
certiﬁcates. However, weak hash constructions continue
to be used in various cryptographic constructions within
mainstream protocols such as TLS, IKE, and SSH, because
practitioners argue that their use in these protocols relies
only on second preimage resistance, and hence is unaf-
fected by collisions. This paper systematically investigates
and debunks this argument.
We identify a new class of transcript collision attacks
on key exchange protocols that rely on efﬁcient collision-
ﬁnding algorithms on the underlying hash construc-
tions. We implement and demonstrate concrete credential-
forwarding attacks on TLS 1.2 client authentication, TLS
1.3 server authentication, and TLS channel bindings. We
describe almost-practical impersonation and downgrade
attacks in TLS 1.1, IKEv2 and SSH-2. As far as we know,
these are the ﬁrst collision-based attacks on the crypto-
graphic constructions used in these popular protocols.
Our practical attacks on TLS were responsibly dis-
closed (under the name SLOTH) and have resulted in
security updates to several TLS libraries. Our analysis
demonstrates the urgent need for disabling all uses of
weak hash functions in mainstream protocols, and our
recommendations have been incorporated in the upcoming
Token Binding and TLS 1.3 protocols.
I.
INTRODUCTION
Hash functions, such as MD5 and SHA-1, are widely
used to build authentication and integrity mechanisms
in cryptographic protocols. They are used within public-
key certiﬁcates, digital signatures, message authentica-
tion codes (MAC), and key derivation functions (KDF).
Permission to freely reproduce all or part of this paper for noncommer-
cial purposes is granted provided that copies bear this notice and the
full citation on the ﬁrst page. Reproduction for commercial purposes
is strictly prohibited without the prior written consent of the Internet
Society, the ﬁrst-named author (for reproduction of an entire paper
only), and the author’s employer if the paper was prepared within the
scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23418
However, recent practical attacks on MD5 and almost-
practical attacks on SHA-1 have led researchers and
practitioners to question whether these uses of hash
functions in popular protocols are still secure.
The ﬁrst collision on MD5 was demonstrated in
2005 [38], and since then, collision-ﬁnding algorithms
have gotten much better. Simple MD5 collisions can
now be found in seconds on a standard desktop. In re-
sponse, protocol experts reviewed the use of MD5 in In-
ternet protocols such as Transport Layer Security (TLS)
and IPsec [16], [15], [3]. Despite some disagreement
on the long-term impact of collisions, they concluded
that most uses of hash functions in these protocols
were not affected by collisions. Consequently, MD5
continues to be supported (alongside newer, stronger
hash algorithms) in protocols like TLS and IPsec.
In 2009, an MD5 collision was used to create a
rogue CA certiﬁcate [36], hence breaking the security
of certiﬁcate-based authentication in many protocols. A
variant of this attack was used by the Flame malware
to disguise itself as a valid Windows Update security
patch [34]. Due to these high-proﬁle attacks,
there
is now consensus among certiﬁcation authorities and
software vendors to stop issuing and accepting new
MD5 certiﬁcates. Learning from the MD5 experience,
software vendors are also pro-actively phasing out SHA-
1 certiﬁcates, since collisions on SHA-1 are believed to
be almost practical [35].
This leaves open the question of what to do about
other uses of MD5 and SHA-1 in popular crypto-
graphic protocols. Practitioners commonly believe that
collisions only affect non-repudiable signatures (like
certiﬁcates), but that signatures and MACs used within
protocols are safe as long as they include unpredictable
contents, such as nonces [16], [15].In these cases,
protocol folklore says that a second preimage attack
would be required to break these protocols, and such
attacks are still considered hard, even for MD5.
Conversely, theoretical cryptographers routinely as-
sume collision-resistance in proofs of security for
these protocols. For example, various recent proofs of
TLS [17], [22], [11] assume collision-resistance even
though the most popular hash functions used in TLS
are MD5 and SHA-1. Whom shall we believe? Either it
is the case that cryptographic proofs of these protocols
are based on too-strong (i.e. false) assumptions that
should be weakened, or that practitioners are wrong and
collision resistance is required for protocol security.
This paper seeks to clarify this situation by systemat-
ically investigating the use of hash functions in the key
exchanges underlying various versions of TLS, IPsec,
and SSH. We demonstrate that, contrary to common
belief, collisions can be used to break fundamental secu-
rity guarantees of these protocols. We describe a generic
class of attacks called transcript collision attacks, and
detail concrete instances of these attacks against real-
world applications. In particular, we demonstrate how
a man-in-the-middle attacker can impersonate TLS 1.2
clients, TLS 1.3 servers, and IKEv2 initiators. We also
show how a network attacker can downgrade TLS 1.1
and SSH-2 [39] connections to use weak ciphers. We
implement proofs-of-concept exploit demos for three
of these attacks to demonstrate their practicality, and
provide attack complexities for the others. We believe
that ours are the ﬁrst hash collision-based attacks on the
cryptographic constructions within these protocols.
We do not claim to have found all transcript col-
lision attacks in these protocols; nor do we think that
our attack implementations are the most efﬁcient. Still,
our results already provide enough evidence for us
to strongly recommend that weak hash functions like
MD5 and SHA-1 should be immediately disabled from
Internet protocols. Partly due to recommendations by
us and other researchers, these hash functions and other
weak constructions based on them have been removed
from the draft version of the TLS 1.3 protocol.
Outline Section II introduces transcript collision at-
tacks on authenticated key exchange protocols. Sec-
tion III outlines the state-of-the-art in collision-ﬁnding
algorithms for MD5, SHA-1, and their concatenation.
Section IV describe the TLS protocol, and Section V
describes concrete attacks on various versions of TLS
and three proof-of-concept demos. Section VI describes
concrete attacks on IKE and SSH. Section VII summa-
rizes the impact of our attacks and disclosure status.
Section VIII concludes.
II. TRANSCRIPT COLLISION ATTACKS ON
AUTHENTICATED KEY EXCHANGE
Authenticated Key Exchange (AKE) protocols are
executed between two parties, usually called client and
server or initiator and responder, in order to establish
a shared session key that can be used to encrypt sub-
sequent messages. A typical example is the SIGMA’
protocol depicted in Figure 1. This protocol is a variant
Fig. 1. SIGMA’: A mutually-authenticated key exchange protocol
of the basic SIGMA (sign-and-mac) protocol from [21]
which served as the inspiration for the key exchanges
used in many protocols including IKE, OTR, and JFK.
In SIGMA’, the initiator A ﬁrst sends a message
m1 to B, consisting of Difﬁe-Hellman public value gx,
along with some protocol-speciﬁc parameters infoA that
may include, for example, a nonce, a protocol version,
a proposed ciphersuite, etc. B responds with a message
m2 containing its own Difﬁe-Hellman public value gy
and some parameters infoB. A and B have now com-
pleted an anonymous Difﬁe-Hellman exchange and can
compute the shared secret gxy and use it to derive the
session key. However, before using the session key, they
authenticate each other by exchanging digital signatures
over the protocol transcript hash(m1|m2) using their
long-term signing keys (sk A, sk B). (Digital signature
algorithms typically hash their arguments before sign-
ing them, and we have chosen to make this hashing
explict in our presentation of SIGMA’.) By signing the
transcript, A and B verify that they agree upon all the
elements of the key exchange, and in particular, that a
network attacker has not tampered with the messages.
Finally, A and B also prove to each other that they know
the session key gxy by exchanging MACs computed
with this key over their own identities.
Like other AKE protocols, SIGMA’ aims to prevent
message tampering, peer impersonation, and session
key leakage, even if the network and other clients and
servers are under the control of the adversary. Formally,
authenticating the transcript guarantees matching con-
versations, that is, that the two parties agree on each
others identity and other important protocol parameters.
Transcript Collision Attacks The alert reader will
notice that SIGMA’ does not in fact guarantee that A
and B agree on the message sequence m1|m2; it only
guarantees that they agree on the hash of this sequence.
What if a network attacker were to tamper with the mes-
sages, so that A and B see different message sequences
but the hashes of the two sequences is the same? In that
case, the protocol will proceed to completion but the
integrity and authentication guarantees no longer hold.
Figure 2 illustrates such an attack. The man-in-the-
2
(cid:48)
A, info
2) = hash(m(cid:48)
(cid:48)
a transcript collision by ﬁnding x(cid:48), y(cid:48), info
B such
that hash(m1|m(cid:48)
1|m2). The amount of
work required to ﬁnd such a collision depends on the
hash function. As we will see in the next section, such
collisions require 2N/2 work for hash functions that
produce N bits. Hence, for MD5, such a collision would
require the MitM to compute 264 MD5 hashes, which
may well be achievable by powerful adversaries.
A Chosen-Preﬁx Transcript Collision We now con-
sider a more efﬁcient attack that works even when
B sends an unpredictable m2 containing a fresh
(ephemeral) Difﬁe-Hellman value gy and a previously
unknown infoB. However, we assume that the length
of m2 (M) is ﬁxed and known to MitM. Moreover,
suppose that in the second message of SIGMA’, infoB
is allowed to have arbitrary length and arbitrary con-
tents. That is, even if infoB has junk data at the end,
A will accept the message. Speciﬁcally, suppose that
infoB = len B|data B where data B is opaque data that
will be ignored by A. (We will see several examples
of such “collision-friendly” messages in TLS, IKE, and
SSH.) Finally, we assume that the hash function uses the
Merkle-Damg˚ard construction [29], [7], so that it obeys
the length extension property: if hash(x) = hash(y)
then hash(x|z) = hash(y|z). (Strictly speaking, this
property only holds when the lengths of x, y are equal
and a multiple of the hash function block size.)
Under all these conditions, MitM can compute a
transcript collision by ﬁnding two collision bitstrings
C1, C2 of L1 and L2 bytes respectively, such that:
hash(m1| [gy(cid:48)|
(cid:124)
B
(cid:122)
(cid:123)
(cid:125)(cid:124)
info(cid:48)
(cid:123)(cid:122)
(cid:125)
B|C1|−]
(cid:48)
len
m(cid:48)
2
info(cid:48)
A(cid:122)(cid:125)(cid:124)(cid:123)
(cid:123)(cid:122)
(cid:125)
)
C2 ]
(cid:124)
) = hash([gx(cid:48)|
m(cid:48)
1
(cid:48)
where len
B = L1 + M. Note that we have left empty
space (written −) of size M bytes that still needs to
(cid:48)
be ﬁlled after C1 in info
B. As we will see in the next
section, this kind of collision is called a chosen-preﬁx
collision and is typically achievable with far less work
than a generic collision attack. For example, a chosen-
preﬁx collision in MD5 requires the MitM to compute
about 239 MD5 hashes, which takes only a few CPU
hours.
After receiving m1 from A and computing C1, C2,
MitM now sends m(cid:48)
1 to B. When B responds with m2
(of size M bytes), MitM now stuffs m2 at the end of
B (in place of −) and sends m(cid:48)
(cid:48)
2 to A. Due to the
info
length extension property, we have:
(cid:122)
len
B
(cid:123)
(cid:125)(cid:124)
info(cid:48)
(cid:123)(cid:122)
(cid:125)
B|C1|m2]
(cid:48)
m(cid:48)
2
info(cid:48)
A(cid:122)(cid:125)(cid:124)(cid:123)
(cid:123)(cid:122)
(cid:125)
C2 ]
(cid:124)
) = hash([gx(cid:48)|
m(cid:48)
1
|m2)