parameters, run-time conﬁguration, dynamically loaded ex-
ecutable code, and any other data that may be relevant to a
particular PAL. The semantics of HV Extend are identical to
those of the hardware TPM’s TPM Extend: Given a measure-
ment m ← SHA − 1(data), a particular µPCR is extended as
follows: µPCRnew ← SHA − 1(µPCRold||m).
HV GetRand. PALs rely heavily on cryptography because
all access to non-volatile storage or network communica-
tion involves data travelling through the potentially mali-
cious legacy OS. Thus, it is essential that PALs have a good
source of random numbers for generating keys and nonces.
HV GetRand returns the requested number of bytes using
a pseudo-random number generator (PRNG) seeded by ran-
domness from the system’s hardware TPM. The interface ex-
posed to PAL code is identical to that of the hardware TPM’s
TPM GetRand. The PRNG enables HV GetRand to dramat-
call foo()
/* App A */
1.
Marshaling
Isolation
/* PAL */
foo() {
  HV_Unseal()
  doWork()
  HV_Seal()
4.
2.
µTPM
3.
Unmarshaling
Figure 4: TrustVisor and µTPM-based protections for a PAL
containing function foo. (1) Input parameters are marshaled
by TrustVisor from untrusted code into the PAL. (2) The PAL
can invoke the µTPM Unseal command to decrypt previously
created secrets. (3) After the PAL serves its purpose, sensitive
state can once again be sealed using the µTPM. (4) Outputs
from the PAL are unmarshaled back to untrusted code.
ically outperform the corresponding TPM GetRand by exe-
cuting on the platform’s main CPU, since in the common case
no low-speed hardware TPM operations are required.
HV Seal and HV Unseal.
These functions are also de-
signed to present the same interface as their v1.2 TPM Seal
and TPM Unseal counterparts [33]. The primary differ-
ence is that instead of authorizing decryption based on val-
ues stored in the physical PCRs in the system’s TPM chip,
these functions operate based on the values in the µPCRs in
the µTPM instance maintained by TrustVisor for a particular
PAL. HV Seal gives PALs the ability to specify the required
state of the µPCRs for the data to be unsealed. HV Unseal
will only succeed if the values in the µPCRs, at the time when
HV Unseal is invoked, match those speciﬁed as arguments to
the original HV Seal call.
HV Seal outputs a ciphertext that should be included as
one of the inputs to a later call to HV Unseal. It is the re-
sponsibility of the untrusted application code to maintain this
ciphertext on a non-volatile storage device (e.g., hard disk)
for future retrieval, if it is desired that the data survive sys-
tem reboots or multiple register-unregister cycles of the same
PAL. Note that data sealed on one physical TPM cannot be
unsealed on a different physical TPM. However, we do allow
data sealed by the µTPM associated with one PAL to be un-
sealed by the µTPM associated with another PAL. This pro-
vides the ability to establish a secure channel between multi-
ple PALs. Figure 4 shows a PAL using µTPM-based sealed
storage to protect data across multiple registration cycles.
The data sealed by a µTPM is protected using authenti-
cated encryption [18] with keys maintained by TrustVisor it-
self. TrustVisor protects its own secrets using cryptographic
keys sealed by the TPM to the PCR containing the DRTM
measurement of TrustVisor. Thus, during TrustVisor boot,
these keys are unsealed in a call to the physical TPM. Like-
wise, any changes in these keys must be re-sealed using a call
to the physical TPM prior to system shutdown.
HV Quote. We have designed HV Quote to offer fewer op-
tions than the corresponding TPM Quote function. The rea-
son for this is the natural tension between security and privacy
in remote attestation, and our desire to keep the TCB small.
HV Quote uses a single RSA identity keypair µAIK across all
PALs (µTPM instances), which is generated in a determinis-
tic fashion from the AIK (Attestation Identity Key) currently
in use in the system’s physical TPM. We generate µAIK by
seeding a pseudo-random number generator (PRNG) with a
TrustVisor-maintained secret and the active public AIK. µAIK
can then be regenerated at a future time without requiring
storage of µAIK itself. In this way, the existing TPM-based
mechanisms for protecting the privacy of an attesting system
apply equally well to TrustVisor and the PALs running there-
upon. Once an identity keypair has been generated, it can be
cached by TrustVisor and maintained in non-volatile storage
using TPM Seal (sealed to the code image of TrustVisor) on
the system’s physical TPM. This enables rapid loading during
subsequent boot cycles of TrustVisor.
4.3.3 Attestation and Trust Establishment
Attestation enables a remote entity to establish trust in Trust-
Visor, and subsequently in PALs protected by TrustVisor.
Building on the two-level integrity measurement mechanisms
described in §4.3.1, we also design a two-part attestation
mechanism. First, we use TPM-based attestation to demon-
strate that a dynamic root of trust was employed to launch
TrustVisor with hardware-enforced isolation. Second, we use
µTPM-based attestation to demonstrate that TRTM was em-
ployed to launch a particular PAL with TrustVisor-enforced
isolation. Thus, the ultimate root of trust in a system running
TrustVisor stems from TPM-based attestation to the invoca-
tion of TrustVisor using hardware DRTM.
TPM-Generated Attestation. An external veriﬁer that re-
ceives a TPM-generated attestation covering the PCRs into
which TrustVisor-relevant binaries and data have been ex-
tended conveys the following information to the veriﬁer:
• A dynamic root of trust (e.g., AMD’s SKINIT instruc-
tion) was used to bootstrap the execution of TrustVisor.
• TrustVisor received control immediately following the
establishment of the dynamic root of trust.
• The precise version of TrustVisor that is executing is
identiﬁable by its measurement in one of the PCRs.
• TrustVisor generated an identity key for its µTPM based
on the current TPM AIK.
Note that the veriﬁer must learn the identity of the AIK by
some authentic mechanism, such as pre-conﬁguration by an
administrator or system owner. In some cases trust-on-ﬁrst-
use may even be reasonable, but we emphasize that the choice
of mechanism is orthogonal to the architecture of TrustVisor.
µTPM-Generated Attestation. An attestation from Trust-
Visor consists of an HV Quote operation, along with addi-
tional measurement metadata3 to facilitate the veriﬁer’s mak-
ing sense out of the values in the µPCRs. The veriﬁer must
ﬁrst decide to trust TrustVisor based on a TPM attestation. If
3The nuances of validating untrusted measurement lists using trustworthy
TPM-style measurement aggregates are be beyond the scope of this paper.
IBM’s IMA discusses one possible mechanism [28].
Remote
Party (RP):
TV:
RP:
RP → App:
App → PAL: n2
App:
PAL:
App ← PAL: q2
RP ← App:
RP:
RP:
has AIKpublic,
expected hash(TrustVisor) = ˆH
TPM Extend(PCR[18], h(µAIKpublic))
generate nonce, n1 ← h(1||nonce), n2 ← h(2||nonce)
n1, n2
q1 ← TPM Quote(PCR[17,18], n1)
q2 ← HV Quote(µPCR[0], n2)
q1, q2
if (¬Verify(AIKpublic , q1, n1)
∨ q.PCR17 6= h(0|| ˆH)
∨ q.PCR18 6= h(0||h(µAIKpublic))
∨¬Verify(µAIKpublic , q2, n2)
) then abort
µPCR array represents a valid PAL run.
Figure 5: Attestation protocol. Remote Party veriﬁes that a
particular attestation represents a legitimate run of a PAL.
TrustVisor is untrusted, then no trusted environment can be
constructed using TrustVisor. A veriﬁer learns the following
information as it analyzes the contents of the µPCRs:
• µPCR [0] always begins with 20 bytes of zeros extended
with the measurement of the registered PAL. Thus, the
veriﬁer can learn precisely which PAL was registered
and invoked during this session on TrustVisor.
• The values in the remaining µPCRs and any other values
extended into µPCR [0] are speciﬁc to the PAL that exe-
cuted, and will not have been inﬂuenced by TrustVisor.
• The set of µPCRs selected for inclusion in HV Quote
(and a nonce provided by the remote veriﬁer to ensure
freshness) will be signed by TrustVisor’s µTPM identity
key µAIK, generated as described in §4.3.2.
Note that the veriﬁer can conﬁrm precisely which PAL
executed, and that a PAL constructed to measure its inputs
and outputs enables the veriﬁer to learn that the execution in-
tegrity of this PAL is intact. Figure 5 illustrates the attestation
protocol used to convince an external veriﬁer that a particular
PAL ran on a particular system with TrustVisor’s protections.
5
Implementation
We now describe our implementation of TrustVisor. Cur-
rently TrustVisor is AMD-speciﬁc, but its design applies
equally well to widely available Intel systems that include
support for both 2D page walks and dynamic root of trust.
TrustVisor is a tiny hypervisor that leverages modern x86
hardware virtualization with the latest Nested Page Table
(NPT) support and either a Device Exclusion Vector (DEV)
or full IOMMU (e.g., AMD’s [2]) support: (1) to keep the
software TCB small and (2) to maintain binary compatibility
with various legacy x86 OSes. We have developed a full, sta-
ble implementation of TrustVisor as described in §4, though
our implementation currently lacks SMP support. We run our
experiments on an off-the-shelf Dell PowerEdge T105 (§6).
We present our implementation in the same order that
we presented TrustVisor’s design: memory protection mech-
anisms for TrustVisor and PALs ﬁrst (§5.1), then trusted
computing mechanisms including our µTPM implementation
(§5.2). Note that this means TrustVisor’s steady-state opera-
tion is presented before its boot-up using the trusted comput-
ing mechanism dynamic root of trust.
5.1 Protecting TrustVisor and PALs
Based on AMD’s SVM hardware virtualization, TrustVisor
runs as the host while the Linux Kernel and applications run
as a guest. Thus, TrustVisor executes at a more privileged
CPU protection level (ring on x86) than the Linux kernel.
However, to protect itself and PALs, TrustVisor needs to cre-
ate an isolated environment for them. We ﬁrst describe the
basic memory isolation mechanism employed by TrustVisor.
Then, we present how TrustVisor handles the registration pro-
cess for PALs. Finally, we explain how TrustVisor enables a
protected environment for PAL execution.
5.1.1 Memory Isolation for TrustVisor
To achieve memory isolation, TrustVisor virtualizes the guest
OS’s physical memory using the 2D nested page table (NPT)
hardware feature provided by AMD SVM. The NPTs are
maintained by TrustVisor in host mode, while the guest OS
continues to maintain its own page tables to translate guest
virtual addresses to guest physical addresses (i.e., the guest
OS need not be aware that it is virtualized). At runtime, guest
physical addresses are further translated to machine physical
addresses by the CPU using the corresponding NPT. Trust-
Visor maintains only one set of NPTs for the guest, which
is simply an identity mapping from guest physical addresses
to machine physical addresses. TrustVisor uses 2 MB page
granularity in the NPTs to improve performance by reducing
TLB pressure.
To protect itself, TrustVisor sets the NPT permissions such
that its physical pages can never be accessed through the NPT
from guest mode. To protect its physical pages against DMA
access by devices, TrustVisor uses the DEV (Device Exclu-
sion Vector) mechanism, which is a simpliﬁed IOMMU (In-
put/Output Memory Management Unit) provided by AMD
SVM. With DEV support, the system’s memory controller is
designed to provide DMA read and write protection for phys-
ical pages on a per-page basis. TrustVisor sets up DEV pro-
tection to cover all of its own physical pages. To prevent an
attacker from modifying the DEV settings, TrustVisor also in-
tercepts all PCI conﬁguration space accesses from the guest.
If TrustVisor ﬁnds any attempt to access the DEV, it will sim-
ply respond as if the device does not exist.
The protection mechanisms described above for TrustVisor
are statically set up during initialization. TrustVisor also uses
similar mechanisms to protect PALs. However, due to the
registration feature TrustVisor exports for PALs, those protec-
tions have to be set up dynamically at runtime. We describe
the details below.
5.1.2 PAL Registration
Application developers must explicitly register and unregister
the PAL(s) for their application (recall §4.2.2). Both registra-
tion and unregistration consist of a hypercall with parameters
to describe the PAL to be registered. These hypercalls are in-
tercepted directly by TrustVisor without legacy OS awareness
using the VMMCALL instruction.
We have developed simple build-process linker scripts to
automate the process of placing sensitive code and regular
code on separate pages, as well as allocating pages for a
PAL’s data and parameters. There are six types of sensi-
tive memory pages: PAL entry point code pages, PAL-private
code pages, code pages shared between PALs and untrusted
applications, PAL data pages, PAL runtime stack pages, and
PAL parameter marshaling pages. All of the functions that
contain intended entry points to PAL code are collected
and linked into an explicit entry-point region that cannot be
shared. PAL-private code regions are used to hold all read-
only, unshared, PAL-speciﬁc code. The shared code region
includes routines that may be called by the untrusted appli-
cations or other PALs. Sharing is only allowed for read-only
pages, with shared pages commonly resulting from Linux’s
copy-on-write functionality during process forking, and from
memory mapping and demand paging common code pages
for multiple instances of the same binary executable or li-
brary. Part of the PAL build process isolates the PAL’s initial-
ized and uninitialized data into a dedicated PAL data region,
and further allocates additional pages for use as the PAL’s
stack and as the PAL-accessible location for marshaled input
and output parameters. We note that there is no explicit PAL
heap. We implement dynamic memory allocation for PALs as
a stand-alone library that can be optionally linked into each
PAL, that from the perspective of the build process simply
includes a large (the size of the heap) static buffer.
During registration, TrustVisor accepts the start address
and the size of each page region of the PAL, a list of valid
entry points, and information describing the input and output
parameters for each entry point. TrustVisor performs three
steps to set up the protections for a PAL during registration.
First, TrustVisor collects all the physical pages that corre-
spond to each page region by walking the current guest page
tables. Note that TrustVisor needs to check that all the per-
mission bits of the guest page table entries during page table
walking are consistent with the intended permissions of each
page region. This prevents a malicious application from tak-
ing advantage of TrustVisor to violate the permissions set by
a well-behaved OS, e.g., by attempting to register read-only
application pages as writable PAL pages. TrustVisor also
needs to save the base address of the current guest page table
structure from the guest’s CR3 register as part of an indica-
tor that can be used to identify this PAL in the future. Sec-
ond, TrustVisor sets up permissions for all the correspond-
ing machine physical pages in the NPT structures. All of
the corresponding machine pages (except for any shared code
pages) are marked as not accessible from the guest. TrustVi-
sor also sets up DEV protection for those pages, to prevent
malicious DMA accesses. Third (now that isolation is con-
ﬁgured), TrustVisor creates a µTPM instance dedicated to the
newly registered PAL, and performs the ﬁrst measurement of
the PAL’s non-data pages to instantiate the TRTM.
We leverage Linux’s copy-on-write feature to generate
multiple copies of non-read-only PAL pages and pages con-
taining PAL entry points. During registration, one byte on
each page is written with its current value to force Linux to
make a duplicate using copy-on-write. This requires code
pages (such as the pages containing the PAL entry points)
to be temporarily marked writable during registration. For
performance reasons, whenever changing permissions in the
NPT, TrustVisor changes between 2 MB and 4 KB NPT gran-
ularities as necessary. Essentially, 2 MB pages are used to
map contiguous regions 2 MB or larger, since this will con-
sume only a single TLB entry. 4 KB pages are used to map
smaller regions, such as a PAL’s stack pages.
Note that any attempt by the untrusted legacy OS or its
applications to write to any registered page, or to read from
any non-shared registered page, will cause a nested page fault
(NPF) that will be caught by TrustVisor. If an overlapping
registration of non-shared pages is attempted, the registration
hypercall will return a failure code to the calling guest ap-
plication. Valid calls to PAL entry points are allowed, but
all other illegal accesses will be prevented by TrustVisor.
Our current prototype halts at this point to aid debugging,
but a production implementation should inject a fault (e.g.,