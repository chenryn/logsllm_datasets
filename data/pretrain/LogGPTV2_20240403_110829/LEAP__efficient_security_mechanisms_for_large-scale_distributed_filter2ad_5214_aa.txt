# LEAP: Efficient Security Mechanisms for Large-Scale Distributed Sensor Networks

## Authors
- Sencun Zhu
- Sanjeev Setia
- Sushil Jajodia

## Affiliations
- Center for Secure Information Systems, George Mason University, Fairfax, VA 22030
- PI: EMAIL

## Abstract
In this paper, we present LEAP (Localized Encryption and Authentication Protocol), a key management protocol designed for sensor networks. LEAP supports in-network processing while limiting the security impact of a node compromise to its immediate network neighborhood. The protocol is motivated by the observation that different types of messages exchanged between sensor nodes have varying security requirements, which cannot be met by a single keying mechanism. LEAP establishes four types of keys for each sensor node: an individual key shared with the base station, a pairwise key shared with another sensor node, a cluster key shared with multiple neighboring nodes, and a group key shared by all nodes in the network. The key establishment and update protocols are communication- and energy-efficient, minimizing the involvement of the base station. Additionally, LEAP includes an efficient inter-node traffic authentication protocol based on one-way key chains, supporting source authentication without precluding in-network processing and passive participation. We analyze the performance and security of our scheme under various attack models and demonstrate its efficiency in defending against many attacks.

## Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Generalâ€”Security and protection

## General Terms
Design, Security

## Keywords
Security Mechanism, Sensor Networks, Key Management, In-network Processing

## 1. Introduction
Sensor systems are often deployed in unattended and adversarial environments, making security mechanisms that provide confidentiality and authentication critical. Providing security in sensor networks is particularly challenging due to the resource limitations of sensor nodes. For example, it is impractical to use asymmetric cryptosystems in a sensor network where each node has a slow (4 MHz) under-powered processor with only 8 KB of memory. Thus, key management protocols for sensor networks typically rely on symmetric key algorithms.

A fundamental issue in using symmetric key management protocols is the initial establishment of shared keys. The constrained energy budgets and limited computational and communication capacities of sensor nodes make protocols such as TLS and Kerberos, developed for wired networks, impractical for large-scale sensor networks. The most practical approach for bootstrapping secret keys in sensor networks is to use pre-deployed keying, where keys are loaded into sensor nodes before deployment. Several solutions based on pre-deployed keying have been proposed, including approaches using a global key shared by all nodes, unique keys shared with the base station, and random key sharing.

An important design consideration for security protocols based on symmetric keys is the degree of key sharing between nodes. Network-wide keys are very energy-efficient but have the disadvantage that the compromise of a single node reveals the global key. On the other hand, pairwise key sharing is ideal from a security perspective but requires each node to have a unique key for every other node it communicates with, which is impractical in many sensor networks.

LEAP (Localized Encryption and Authentication Protocol) is designed to support in-network processing while providing security properties similar to those of pairwise key sharing schemes. It supports the establishment of four types of keys for each sensor node: an individual key shared with the base station, a pairwise key shared with another sensor node, a cluster key shared with multiple neighboring nodes, and a group key shared by all nodes in the network. The key establishment and update protocols are communication- and energy-efficient, minimizing the involvement of the base station. LEAP also includes an efficient inter-node traffic authentication protocol based on one-way key chains, supporting source authentication without preventing passive participation.

The rest of this paper is organized as follows. We discuss our design goals and assumptions in Section 2, describe the LEAP protocol in detail in Section 3, and present the inter-node traffic authentication protocol in Section 3.3. In Sections 4 and 5, we analyze the performance and security of our protocol. We discuss related work in Section 6 and conclude the paper in Section 7.

## 2. Assumptions and Design Goals

### 2.1 Network and Security Assumptions
We assume the sensor network is static, with sensor nodes not being mobile. The base station, acting as a controller or key server, is a laptop-class device with long-lasting power. The sensor nodes are similar in their computational, communication capabilities, and power resources to current-generation sensor nodes, such as the Berkeley MICA motes. Each node can store up to hundreds of bytes of keying materials. The sensor nodes can be deployed via aerial scattering or physical installation, but the immediate neighboring nodes of any sensor node will not be known in advance.

Wireless communication is assumed to be insecure, allowing an adversary to eavesdrop on all traffic, inject packets, or replay older messages. If a node is compromised, all the information it holds will also be compromised. However, the base station is assumed to remain secure.

### 2.2 Design Goals
The main goal of LEAP is to design efficient security mechanisms for supporting various communication models in sensor networks. The security requirements include authentication, confidentiality, robustness, and survivability. The sensor network should be robust against various security attacks, and if an attack succeeds, its impact should be minimized. For example, the compromise of a single node should not break the security of the entire network.

The protocol should support sensor network optimization mechanisms such as in-network processing. Given the constrained resources of sensor nodes, the key establishment protocols should be lightweight and minimize communication and energy consumption. It should be possible to add new sensor nodes incrementally to the sensor network. The keying protocols should be scalable, meaning the size of the sensor network should not be limited by per-node storage and energy resources.

## 3. LEAP: Localized Encryption and Authentication Protocol

### 3.1 Overview
LEAP provides multiple keying mechanisms for providing confidentiality and authentication in sensor networks. The packets exchanged by nodes can be classified into several categories based on different criteria, such as control packets vs. data packets, broadcast packets vs. unicast packets, queries or commands vs. sensor readings, etc. The security requirements for a packet depend on its category. Authentication is required for all types of packets, whereas confidentiality may only be required for some types of packets. For example, routing control information usually does not require confidentiality, whereas (aggregated) readings transmitted by a sensor node and queries sent by the base station may need confidentiality.

LEAP supports the establishment of four types of keys for each sensor node:
- **Individual Key**: A unique key shared pairwise with the base station.
- **Group Key**: A globally shared key used by the base station for encrypting messages broadcast to the whole group.
- **Cluster Key**: A key shared by a node and all its neighbors, used for securing locally broadcast messages and supporting in-network processing.
- **Pairwise Shared Key**: A key shared with each immediate neighbor, used for securing communications that require privacy or source authentication.

### 3.2 Key Establishment
In this section, we describe the schemes provided by LEAP for establishing and updating these keys. The key establishment (and re-keying) protocol for the group key uses cluster keys, whereas cluster keys are established (and re-keyed) using pairwise shared keys.

#### Notation
- \( N \): Number of nodes in the network
- \( u, v \): Principals such as communicating nodes
- \( \{f_k\} \): Family of pseudo-random functions
- \( \{s\}_k \): Encrypting message \( s \) with key \( k \)
- \( MAC(k, s) \): Message authentication code (MAC) of message \( s \) using symmetric key \( k \)

From a key \( K \), a node can derive other keys for various security purposes. For example, a node can use \( K_0 = f_K(0) \) for encryption and \( K_1 = f_K(1) \) for authentication. For simplicity, in the following discussion, we say a message is encrypted or authenticated with key \( K \), although it is actually encrypted with \( K_0 \) and authenticated with \( K_1 \).

#### 3.2.1 Establishing Individual Node Keys
Every node has an individual key that is only shared with the base station. This key is generated and pre-loaded into each node prior to its deployment.