UDF计算。
使用指导
 创建extension
 当编译的plpython为python2时：
gsql=#createextensionplpythonu;
CREATEEXTENSION
南大通用数据技术股份有限公司
407
GBase 8s V8.8开发者手册
 当编译的plpython为python3时：
gsql=#createextensionplpython3u;
CREATEEXTENSION
下面示例是以python2为例。
 创建plpython-fencedUDF
 查看UDF信息
gsql=#select*frompg_procwhereproname='pymax';
gsql=#createorreplacefunctionpymax(aint,bint)
gsql-#returnsINT
gsql-#languageplpythonufenced
gsql-#as$$
gsql$#importnumpy
gsql$#ifa>b:
gsql$# returna;
gsql$#else:
gsql$# returnb;
gsql$#$$;
CREATEFUNCTION
 运行UDF
 创建一个数据表：
gsql=#createtabletemp(aint,bint);
CREATETABLE
gsql=#insertintotempvalues(1,2),(2,3),(3,4),(4,5),(5,6);
INSERT05
 运行UDF：
gsql=#selectpymax(a,b)fromtemp;
pymax
-------
2
3
4
5
6
(5rows)
南大通用数据技术股份有限公司
408
GBase 8s V8.8开发者手册
11.2.2.2 DB4AI-Snapshots 数据版本管理
DB4AI-Snapshots是DB4AI模块用于管理数据集版本的功能。通过DB4ai-Snapshots组
件，开发者可以简单、快速地进行特征筛选、类型转换等数据预处理操作，同时还可以像
git一样对训练数据集进行版本控制。数据表快照创建成功后可以像视图一样进行使用，但
是一经发布后，数据表快照便固化为不可变的静态数据，如需修改该数据表快照的内容，需
要创建一个版本号不同的新数据表快照。
DB4AI-Snapshots的生命周期
DB4AI-Snapshots的状态包括published、archived以及purged。其中，published可以用
于标记该DB4AI-Snapshots 已经发布，可以进行使用。archived表示当前 DB4AI-Snapshots
处于“存档期”，一般不进行新模型的训练，而是利用旧数据对新的模型进行验证。purged
则是该DB4AI-Snapshots 已经被删除的状态，在数据库系统中无法再检索到。
需要注意的是快照管理功能是为了给用户提供统一的训练数据，不同团队成员可以使用
给定的训练数据来重新训练机器学习模型，方便用户间协同。为此私有用户和三权分立状态
(enableSeparationOfDuty=ON)等涉及不支持用户数据转写等情况将不支持Snapshot特性。
用户可以通过“CREATESNAPSHOT”语句创建数据表快照，创建好的快照默认即为
published状态。可以采用两种模式创建数据表快照，即为MSS以及CSS模式，它们可以通
过GUC参数db4ai_snapshot_mode进行配置。对于MSS模式，它是采用物化算法进行实现
的，存储了原始数据集的数据实体；CSS则是基于相对计算算法实现的，存储的是数据的增
量信息。数据表快照的元信息存储在DB4AI的系统目录中。可以通过db4ai.snapshot 系统
表查看到。
可以通过“ARCHIVESNAPSHOT”语句将某一个数据表快照标记为archived状态，可
以通过“PUBLISHSNAPSHOT”语句将其再度标记为published状态。标记数据表快照的状
态，是为了帮助数据科学家进行团队合作使用的。
当一个数据表快照已经丧失存在价值时，可以通过“PURGESNAPSHOT”语句删除它，
以便永久删除其数据并恢复存储空间。
DB4AI-Snapshots使用指导
(1) 创建表以及插入表数据。
数据库内存在已有的数据表，可根据该已有的数据表创建对应的数据表快照。为了后续
演示，在此处新建一个名为 t1 的数据表，并向其中插入测试数据。
南大通用数据技术股份有限公司
409
GBase 8s V8.8开发者手册
createtablet1(idint,namevarchar);
insertintot1values(1,'zhangsan');
insertintot1values(2,'lisi');
insertintot1values(3,'wangwu');
insertintot1values(4,'lisa');
insertintot1values(5,'jack');
通过SQL语句，查询搭配数据表内容。
SELECT*FROMt1;
id| name
----+----------
1|zhangsan
2|lisi
3|wangwu
4|lisa
5|jack
(5rows)
(2) 使用DB4AI-Snapshots。
 创建DB4AI-Snapshots
 示例1：CREATESNAPSHOT…AS
示例如下，其中，默认版本分隔符为 “@”, 默认子版本分割符为 “.”，该分割符可
以分别通过GUC参数db4ai_snapshot_version_delimiter以及db4ai_snapshot_version_separator
进行设置。
createsnapshots1@1.0commentis'firstversion'asselect*fromt1;
schema| name
--------+--------
public|s1@1.0
(1row)
上述结果提示已经创建了数据表 s1的快照，版本号为 1.0。创建好后的数据表快照可
以像使用一般视图一样进行查询，但不支持通过“INSERTINTO”语句进行更新。例如下面
几种语句都可以查询到数据表快照s1的对应版本 1.0的内容：
SELECT*FROMs1@1.0;
SELECT*FROMpublic.s1@1.0;
SELECT*FROMpublic.s1@1.0;
id| name
----+----------
1|zhangsan
南大通用数据技术股份有限公司
410
GBase 8s V8.8开发者手册
2|lisi
3|wangwu
4|lisa
5|jack
(5rows)
可以通过下列SQL语句修改数据表t1的内容：
UPDATEt1SETname='tom'whereid=4;
insertintot1values(6,'john');
insertintot1values(7,'tim');
再检索数据表t1的内容时，发现虽然数据表t1的内容已经发生变化，但是数据表快照
s1@1.0 版本的查询结果并未发生变化。由于数据表t1的数据已经发生了改变，如果将当前
数据表的内容作为版本2.0，则可创建快照s1@2.0,创建的SQL语句如下：
createsnapshots1@2.0asselect*fromt1;
通过上述例子，我们可以发现，数据表快照可以固化数据表的内容，避免中途对数据的
改动造成机器学习模型训练时的不稳定，同时可以避免多用户同时访问、修改同一个表时造
成的锁冲突。
 示例2：CREATESNAPSHOT…FROM
SQL语句可以对一个已经创建好的数据表快照进行继承，利用在此基础上进行的数据
修改产生一个新的数据表快照。例如：
PI:EMAIL@1.0commentis'inheritsfrom@1.0'using(INSERTVALUES(6,
'john'),(7,'tim');DELETEWHEREid=1);
schema| name
--------+--------
public|s1@3.0
(1row)
其中，“@”为数据表快照的版本分隔符，from子句后加上已存在的数据表快照，用
法为“@”+版本号，USING关键字后加入可选的几个操作关键字（INSERT …/UPDATE …
/DELETE …/ALTER …）,其中“INSERTINTO”以及“DELETEFROM”语句中的“INTO”、
“FROM”等与数据表快照名字相关联的子句可以省略，具体可以参考AI特性函数。
示例中，基于前述s1@1.0快照，插入2条数据，删除1条新的数据，新生成的快照s1@3.0，
检索该s1@3.0：
SELECT*FROMs1@3.0;
id| name
南大通用数据技术股份有限公司
411
GBase 8s V8.8开发者手册
----+----------
2|lisi
3|wangwu
4|lisa
5|jack
6|john
7|tim
(7rows)
 删除数据表快照SNAPSHOT
purgesnapshots1@3.0;
schema| name
--------+--------
public|s1@3.0
(1row)
此时，已经无法再从s1@3.0 中检索到数据了，同时该数据表快照在db4ai.snapshot视
图中的记录也会被清除。删除该版本的数据表快照不会影响其他版本的数据表快照。
 从数据表快照中采样
示例：从snapshots1中抽取数据，使用0.5抽样率。
samplesnapshots1@2.0stratifybynameasnickatratio.5;
schema| name
--------+------------
public|s1nick@2.0
(1row)
可以利用该功能创建训练集与测试集，例如：
SAMPLESNAPSHOTs1@2.0 STRATIFYBYnameAS_testATRATIO.2,AS_trainAT
RATIO.8COMMENTIS'training';
schema| name
--------+----------------
public|s1_test@2.0
public|s1_train@2.0
(2rows)
 发布数据表快照
采用下述SQL语句将数据表快照 s1@2.0 标记为published 状态：
publishsnapshots1@2.0;
schema| name
南大通用数据技术股份有限公司
412
GBase 8s V8.8开发者手册
--------+--------
public|s1@2.0
(1row)
 存档数据表快照
采用下述语句可以将数据表快照标记为 archived 状态：
archivesnapshots1@2.0;
schema| name
--------+--------
public|s1@2.0
(1row)
可以通过db4ai-snapshots提供的视图查看当前数据表快照的状态以及其他信息：
select*fromdb4ai.snapshot;
id|parent_id|matrix_id|root_id|schema| name |owner | commands
|comment|published|archived| created|row_count
----+-----------+-----------+---------+--------+------------+--------+----------------------------------------
--+---------+-----------+----------+----------------------------+-----------
1| | | 1|public|s1@2.0 |gbase|{"select*","fromt1
whereid>3",NULL}| |t |f |2021-04-1709:24:11.139868|
2
2| 1| | 1|public|s1nick@2.0|gbase|{"SAMPLEnick.5
{name}"} | |f |f |2021-04-1710:02:31.73923
| 0
(3) 异常场景
数据表或db4ai-snapshots不存在时。
purgesnapshots1nick@2.0;
publishsnapshots1nick@2.0;
---------
ERROR: snapshotpublic."s1nick@2.0"doesnotexist
CONTEXT: PL/pgSQLfunctiondb4ai.publish_snapshot(name,name)line11atassignment
archivesnapshots1nick@2.0;
----------
ERROR: snapshotpublic."s1nick@2.0"doesnotexist
CONTEXT: PL/pgSQLfunctiondb4ai.archive_snapshot(name,name)line11atassignment
删除snapshot时，有依赖该快照的其他snapshot，需先确保删除对本快照所依赖的其他
快照。
南大通用数据技术股份有限公司
413
GBase 8s V8.8开发者手册
purgesnapshots1@1.0;
ERROR: cannotpurgerootsnapshot'public."s1@1.0"'havingdependentsnapshots
HINT: purgealldependentsnapshotsfirst
CONTEXT: referencedcolumn:purge_snapshot_internal
SQLstatement"SELECTdb4ai.purge_snapshot_internal(i_schema,i_name)"
PL/pgSQLfunctiondb4ai.purge_snapshot(name,name)line71atPERFORM
(4) 相关GUC参数
 db4ai_snapshot_mode：
Snapshot有2种模式：MSS（物化模式，存储数据实体）和CSS（计算模式，存储增量
信息）。Snapshot可在MSS和CSS之间切换快照模式，默认是MSS模式。
 db4ai_snapshot_version_delimiter：
该参数为数据表快照版本分隔符。“@”为数据表快照的默认版本分隔符。
 db4ai_snapshot_version_separator
该参数为数据表快照子版本分隔符。“.”为数据表快照的默认版本分隔符。
(5) DB4AISchema下的数据表快照详情db4ai.snapshot。
gsql=#\ddb4ai.snapshot
Table"db4ai.snapshot"
Column | Type | Modifiers
-----------+-----------------------------+---------------------------
id |bigint |
parent_id|bigint |
matrix_id|bigint |
root_id |bigint |
schema |name |notnull
name |name |notnull
owner |name |notnull
commands |text[] |notnull
comment |text |
published|boolean |notnulldefaultfalse
archived |boolean |notnulldefaultfalse
created |timestampwithouttimezone|defaultpg_systimestamp()
row_count|bigint |notnull
Indexes:
"snapshot_pkey"PRIMARYKEY,btree(schema,name)TABLESPACEpg_default
"snapshot_id_key"UNIQUECONSTRAINT,btree(id)TABLESPACEpg_default
南大通用数据技术股份有限公司
414
GBase 8s V8.8开发者手册
命名空间 DB4AI 是本功能的私有域，不支持在 DB4AI 的命令空间下创建函数索引
（functionalindex）。
11.3 AI in DB: 数据库内 AI 功能
智能Explain:SQL语句查询时间预测