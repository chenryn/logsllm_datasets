based on possession of secrets. We introduce semantics for secure 
channel and use it to establish soundness of R4. Soundness of R5, 
R6  is  established  by  proving  if  premises  are  satisfied  then  (i)  an 
action is known to appear in one of the collections (semantics of 
user performing action), or (ii) an action appears in the sequence 
after a SignIn action (semantics of principal performing action).  
We note that our semantics assumes a user to be aware of actions 
it is allowed to assert. This is not always true for web protocols. In 
presence of cross-site request forgery where secrets are forged, the 
assumption is not valid. A web protocol negates such attacks if it 
satisfies the redirection safety property described in Section 5.4.  
5.  REASONING BASED ON SECRETS IN 
WEB PROTOCOLS 
5.1  Attacks Based on Parallel Runs 
A significant limitation of belief logics has been their inability to 
handle  certain  attacks  based  on  multiple  protocol  runs.  In  such 
attacks,  intruder  participates in multiple simultaneous executions 
of the protocol and uses secret values learnt from one session, in 
another  session.  A  case  in  point  is  the  multiple  session  based 
attack  on  Needham-Schroeder  Public  Key  (NSPK)  protocol  first 
reported in [13]. The protocol was analyzed as safe in the original 
BAN  work  [1].  While  this  does  not  impact  BAN’s  reasoning 
based  on  signed  messages,  it  does  demonstrate  an  inadequacy 
related to reasoning based on secrets.  
5.2  Request Forgery in Web Protocols 
In  web  protocols,  an  additional  complexity  introduced  while 
dealing with secrets in is that of request forgery.  In cryptographic 
protocols, a principal is always aware of the content of messages 
it sends (unless it is relaying an encrypted message for which it is 
not held accountable). In browser-based protocols, a user may be 
induced  into  clicking  a  link  or  submitting  a  form  at  a  malicious 
website.  Both  the  content  of  the message and the receiving end-
point can thus be controlled by an attacker. Moreover, an HTTP 
cookie identifying any context information (e.g. login context) is 
automatically inserted by the user-agent if the request is directed 
to  a  URL  within  its  scope  (defined  as  a  combination  of  domain 
and  path).  The  class  of  attacks  is  termed  as  cross-site  request 
forgery  (CSRF).  Since  secrets  are  message  content  and  can  be 
forged, reasoning in a logic designed for the web should include 
measures to ensure soundness in presence of such attacks.  
5.3  Using Model Checking to Supplement 
Belief Logic Analysis 
One way to address issues described in Sections 5.1 and 5.2 is to 
extend  the  logic  to  address  the  above  scenarios.  However,  not 
only  will  this  make  the  logic  more  complex,  it  goes  against  the 
spirit  of  inference  construction  approaches  to  build  support  for 
specific attacks. Thus, instead of extending the logic, we take the 
approach  of  augmenting  belief 
logic  analysis  with  attack 
construction approaches. The general approach works as follows. 
We use the belief logic to analyze the protocol first and obtain a 
set of beliefs established by the protocol. However, these beliefs 
are subject to a security property being satisfied by the protocol. 
The specific security property can then be checked using a model 
checking  approach.  Moreover,  depending  on 
the  security 
property,  it  may  be  possible  to  use  a  simplified  version  of  the 
protocol, to check for it. 
In  Section  5.4,  we  discuss  such  a  security  property  for  web 
protocols.  The  belief  logic  of  Section  4  is  designed  to  be  used 
with the assumption of this property. In Section 5.5, we show that 
validation  of  the  property  can  be  performed  using  a  much 
simplified version of the original protocol being analyzed. 
5.4  Secure Redirection Property 
Secrets are used in web protocols primarily to identify a user who 
has  performed  an  action,  possibly  at  a  different  place  or  time. 
Secrets can either be included in the HTTP header as a cookie, or 
carried  in  the  body  of  the  message.  In  the  presence  of  request 
forgery,  secrets  carried  in  the  body  of  the  request  cannot  by 
themselves  be  used  to  conclusively  establish  beliefs  at  service 
providers.  
Assumption of secure channel (HTTPS) makes protocols easier to 
analyze.  Since  most  protocols  carrying  secret 
information 
recommend using secure HTTPS communication, the assumption 
is not unrealistic. An SSL/TLS session eliminates a major class of 
man-in-the-middle  attacks.  With  secured  sessions,  in  order  to 
forge requests containing secrets, the adversary is required to be a 
participant  in  the  protocol.  Since  authentication  of  service 
providers  is  analyzed  using  belief  logic  in  our  approach,  the 
model  checking  stage  needs  to  only  rule  out  possibility  of  a 
malicious  third  party  participating  as  a  user  in  the  protocol. 
Moreover,  malicious  user  behavior  e.g.  tricking  an  honest  user 
into  joining  a  manipulated  protocol  session  can  only  occur 
between  secure  sessions.  The  intruder  model  is  thus  greatly 
simplified. In particular, presence of an adversary, is indicated by 
a  ‘message’  exchanged  between  two  users  (one  honest  and  one 
dishonest).  The  communication  could  happen 
through  an 
asynchronous user action e.g. clicking a malicious hyperlink sent 
by the attacker, or an automated browser action e.g. redirection to 
a manipulated callback URI. If we can establish that the protocol 
does not allow user-to-user communication, we say that it satisfies 
the secure redirection property.  
5.5  Protocol Simplification 
Establishing security property of Section 5.4 essentially involves 
associating  two  or  more  secure  sessions in the protocol with the 
same web user. In the absence of identifying keys, possession of 
secrets and cookies is the only means to establish this. Since this 
analysis  only  requires  reasoning  based  on  possession  of  secrets 
and  cookies,  it  can be done on a much simplified version of the 
protocol  in  which  only  messages  containing  secret  values 
exchanged  with  a  user  are  retained.  The  rules  for  simplification 
described below are tabulated in Table 3.  
Rule 1: A protocol message that is not sent or received by a user 
can be removed, i.e. server to server communication is ignored. 
Rule 2: Any term which does not contain a secret or nonce value 
is dropped.  
Rule  3:  In  the  remaining  messages,  an  encrypted  formula  {X}K, 
received  at  a  user  is  represented  by  an  opaque  token  Nx,k  if  the 
decryption key can be assumed to be unavailable to the intruder. 
Otherwise,  in  addition to the token, the formula is also included 
(with or without encryption as shown in Table 3).  
Rule 4: Similarly, an encrypted formula {X}K received from a user 
is interpreted as the user possessing the corresponding token Nx,k 
Table 3. Transformation rules for sent, received messages 
Formula  
Decryption Key 
in Intruder 
Knowledge 
Transformed Formula  
Server to User   User to Server 
{ }
X −
K
{ }KX
  Always 
 Never 
1
{ }KshX
  Always 
 Never 
{ }KshX
{ }KshX
  X, Nx,K-1 
  Nx,K    
  X, Nx,Ksh 
  Nx,Ksh 
  Nx,K-1 
  Nx,K 
  Nx,Ksh 
  Nx,Ksh 
 No assumption 
 {X}Ksh,Nx,Ksh 
  Nx,Ksh 
K: public key, K-1: private key, Ksh: shared key.  
293
6.  MODELING WEB PROTOCOLS USING 
ALLOY 
6.1  Overview of Alloy 
Alloy  [15],  [17],  [29]  is  a  declarative  language  for  describing 
structures and a tool for exploring them. An alloy model specifies 
a  set  of  constraints  that  apply  to  objects  in  the  domain  being 
modeled.  Alloy  Analyzer  is  a  solver  that  takes  constraints  of  a 
model  and  finds  structures  satisfying  them  using  a  SAT  solver. 
Thus technically, it is a model-finder rather than a model-checker. 
A signature and a constraint on the signature are declared below: 
sig S extends E { 
      F: one T } 
fact { 
      all s:S | s.F in X } 
It is often useful to think of Alloy as an object-oriented language, 
e.g. S is a class (s being an instance), that extends superclass E. F 
is a member of S pointing to T. However, under the covers S is a 
subset of E and F is a relation that maps each of S to a single T.  
Fact  statements  represent  constraints  that  must  always  hold. 
Quantified expressions of the form quantifier s: S | F mean 
that  constraint  F  holds  for  all,  no,  lone  (zero or one),  some 
(at least one) or one elements of S. Fact expressions that apply to 
a  particular  signature  (as  is  the  case  above)  can  be  directly 
appended to the signature within curly brackets. Predicate (pred 
{…})  and  functions  are  optional  facts  that  can  be  conditionally 
invoked. Assertions (assert {…}) are properties against which 
the specification needs to be checked. A run command causes the 
analyzer to search for consistency of a function or predicate, while 
a  check  command  causes  it  to  search  for  a  counter-example  to 
show that the assertion does not hold.  
Alloy checks models of finite sizes using a specified scope which 
limits  the  maximum  size  of  top  level  signatures.  Exceptions  can 
be specified for specific signatures. E.g. the below command tries 
to  find  a  counter-example  for  assertion  acyclic  with  default 
scope up to 5, but up to 2 fileSystems and 7 FSObjects.  
check acyclic for 5 but 2 fileSystem, 
exactly 7 FSObject 
We also use a utility ordering to define an order on elements 
of a signature. The function greater than or equal (gte) defined in 
ordering can be used in an expression such as the one shown 
in example below to specify vals with times (cid:149) time.  
open util/ordering[Time] as ord 
.. 
all t: Time |t in vals  t.ord/gte[time] 
6.2  General Model for Web Protocols 
We now describe our general Alloy model that allows reasoning 
about secrets for a wide range of web protocols.   
Principals.  The  signature  Process  declares  a  set  of  all 
principals.  It is extended by signatures Server and User which 
are (disjoint) subsets representing web service providers and end 
users respectively, Also declared are set of all keys (Key), private 
keys (PvtKey), instants (Time), cookies (Cookie) and values, 
(Value, CkValue, TkValue). 
A private key is associated with a public key through the relation 
pubkey.  A  principal  knows  a  set  of  keys  (knownkeys)  and  a 
server  principal  owns  a  private  key  (ownedkey).  Most  web 
protocols  requiring  security  analysis  involve  two  collaborating 
294
service  providers.  The  peer  relation  maps  a  server  to  its 
collaborating  partner.  The 
relations  uniquecookie  and 
uniqueval  associate  a  Server  with  a  unique  cookie  and  a 
secret/nonce  value, 
the 
declarations are required to represent protocols needing more than 
cookie,  secret  per  server  role.    Constraint  on  uniquecookie 
relation ensures that cookie points to the correct server. 
respectively.  Minor  changes 
in 
abstract sig Process {  
   knownkeys: set Key }  
sig Time { }  sig Key { }   sig Value { }  
sig TkValue extends Value { } 
sig CkValue extends Value { }  
sig Cookie{  
    value: one CkValue, server: one Server } 
sig PvtKey extends Key {  
    pubkey: one Key } { pubkey != this } 
sig Server extends Process {  
    ownedkey: one PvtKey, peer: one Server, 
    uniqueval: one TkValue,  
    uniquecookie: one Cookie 
} {peer != this, uniquecookie.server = this} 
sig User extends Process {  
    seentokens: set TkValue->Time, 
    knowncookies: set Cookie->Time}{ ... } 
sig HUser extends User { }  
fact {all k1,k2: PvtKey|k1 != k2 => 
k1.pubkey != k2.pubkey }  
fact { all s1,s2: Server|s1 != s2 => 
(s1.uniqueval != s2.uniqueval) && 
(s1.ownedkey != s2.ownedkey) &&  
(s1.uniquecookie)!= (s2.uniquecookie) } 
User participates in two relations. seentokens associates the 
user to a set of (value, time) pairs each indicating that a value was 
known to user at time. The relation knowncookies provides a 
similar association for cookies known to the user.   
Finally,  the  two  facts  represent  constraints  on  private  keys  and 
servers. Two private keys may not be mapped to the same public 
key.  Similarly  each  server  must  own  a  unique  private  key  and 
should generate distinct nonces and cookies. 
Protocol Messages. The signature Sent is used to declare a set 
of  possible  protocol  (HTTP)  messages.  Each  message  has  a 
sender and receiver principal and is associated with a time 
when it is transmitted. The other relations on message are a set of 
values (content) and a set of cookies (cookies) contained in 
the  message.  A  message  may  also  contain  a  redirection  URL 
(redirectURL),  if  it  represents  an  HTTP  redirect.  If  a  key  is 
used  to  encrypt  the  message  it  is  identified  using  the  enckey 
relation. The first constraint says that a message sent by a user can 
only  contain  cookies  that  are  known  to  sender  at  the  time  of 
sending the message and were received earlier from the target of 
that  message.  The  bi-implication  requires  that  all  such  cookies 
must necessarily be included in the message. 
If  p  and  q  are  possible  sent  messages, then  p->q appearing in 
the sequence implies that receiver of p is the sender of q. Also the 
timestamp  on  q  must  be  the  next  time  instant  following  the 
timestamp of p. The last generic constraint describes handling of 
an HTTP redirect for an honest user (HUser). It specifies that if 
an honest user receives a redirect message, the next message in the 
sequence must be a message sent by this user to the target of the 
redirection  URL.  The  message  should  include  any  values/tokens 
received  in  the  redirect.  The  other  constraints  on  protocol 
sequence are specific to the protocol being modeled. 
Intruder Model. The intruder is simply a User. The redirection 
constraint for honest user does not apply to it. The intruder learns 
new values based on learning rules for tokens and can only send 
seen  tokens  (as  per  constraint  on  Sent  discussed  earlier). 
Communication  from  a dishonest to honest user is modeled as a 
redirect message generated by the dishonest user.  
7.  ANALYSIS OF OAUTH PROTOCOL 
7.1  Protocol Description 
sig URL { target: one Process } 
sig Sent {  
   cookies: set Cookie, sender: one Process,  
   receiver: one Process, time: one Time,  
   content: set TkValue,  
   redirectURL: lone URL, enckey: lone Key } 
{  
  sender in User => (all c: Cookie | (c in   
  cookies  c->time in sender.knowncookies  
  && c.server = receiver)) 
  sender in User => (all v: TkValue | (v in  
  content => v->time in sender.seentokens)) 
  enckey in sender.knownkeys+sender.ownedkey 
  sender != receiver } 
The next one is a similar constraint requiring any values contained 
in  a  message  to  be  known  to  the  user.    The  third  constraint 
requires  the  encryption  key  to  be  known  to  the  sender.  The  last 
constraint  says  that  sender  and  receiver of a message have to be 
distinct.  More  complex  messages  can  be  modeled  by  replacing 
content with an appropriate structure.  
Learning Rules.  The rules for a user learning new secret values 
or  cookies  are  expressed  as  constraints  appended  to  the  User 
signature.  An  ordering  is  defined  on  the elements of Time. The 
first  constraint  implies  that  a  pair  (cookie,  t)  appears  in 
knowncookies  if  and  only  if  the  user  has  seen  a  message 
containing cookie at a time (cid:148) t. A similar constraint for values 
seen by a user is also specified.  
open util/ordering[Time] as ord 
sig User extends Process { ...} {  
   all  c:  Cookie  |  all  t:  Time  |  (c->t  in 
knowncookies    some  s:  Sent  |  c  in 
s.cookies 
&& 
t.ord/gte[s.time]) 
s.receiver 
&& 
= 
this 
   all  v:  TkValue  |  all  t:  Time  |  (v->t  in 
seentokens  some s: Sent | v in s.content 
&&  s.receiver  =  this  &&  s.enckey  in 
s.reciver.knownkeys && t.ord/gte[s.time]) } 
Protocol Flow. The signature ProtoSeq represents all possible 
sequences  of  messages  under  generic  and  protocol  specific 
constraints.  
sig ProtoSeq {  
   sequence: set Sent->Sent 
} {     
   all p,q: Sent | (p->q in sequence) => 
(q.sender = p.receiver) 
   all p,q: Sent | (p->q in sequence) => 
(q.time = ord/next[p.time]) 
   all p: Sent | (p.receiver in HUser) && 
p.redirectURL => (some q: Sent | (p->q in 
sequence) && (q.receiver = 
p.redirectURL.target) && (q.content = 
p.content)) 
 /* other protocol specific constraints */ }  
295
Figure 1. The OAuth Protocol (RFC version) 
The  OAuth  protocol  [4]  provides  a  web  based  workflow  that 
allows a user to temporarily delegate privileges of his account at a 
provider  to  a  third  party  without  sharing  his  login  credentials. 
Privileges could for example mean access to pictures, friend list, 
blogs  etc.  OAuth  is  the  primary  protocol  used  by  Google, 
Facebook, Twitter to allow third party access to user content.  
The  original  version,  OAuth  Core  1.0  [24]  is  known  to  suffer 
from  a  session-fixation  attack  and  was  analyzed  in  [23].  In  this 
paper,  we  analyze  the  revised  version  (Core  1.0a)  also  an 
approved  IETF  RFC  [4],  OAuth  1.0  Protocol.  We  also  refer  to 
this as the RFC version of OAuth1. Workflow for the RFC version 
of OAuth protocol shown in Figure 1 is described below.  
Steps 1-4, user requests service S from consumer (C).  The service 
requires a set of privileges (permissions) Priv to the user account 
at provider (P). Consumer registers delegation request with P and 
gets  returned  a  request  token  Nb.  C  redirects  user  to  P  with  this 
token. Steps 5-10, user is requested to sign in and delegate set of 
privileges  Priv  to  C.  User  signs  in  as  principal  Q  and  performs 
1 We note that some providers like Google, Facebook have moved 
to  OAuth  2.0  [25]  which  bears  little  resemblance  with  the 
original protocol and is not analyzed here. Other providers e.g. 
Twitter have chosen to stay with the IETF approved version [4]. 
requested delegation. User is redirected back to C with the request 
token and another verifier token, Np.  Steps  11-14,  C uses tokens 
Nb,  Np  to  request  a  protected  resource  directly  from  P.  User 
receives  requested  service  S  in  step  14.  All  communication 
happens  over  secure  SSL/TLS  channels  and  requests  from 
consumer  are  signed  and  verifiable  at  the  provider.  The  secure 
channels used are identified as C1-C5 in Figure 1. 
7.2  Belief Logic Analysis of OAuth 
The  protocol  is  idealized  as  shown  below.  Only  messages 
received by either C or P are idealized because we are interested 
in beliefs at these principals. There are two named variables in the 
idealized  protocol:  scope  representing  the  set  of  privileges  to  be 
delegated  and  callback  identifying  the  URL  used  by  P  for 
redirection in step 10.  
(cid:98)
C
2
Message
Message
1
2
U
C
C
C
→
1
→
2
C
P
:
: