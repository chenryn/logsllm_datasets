so asymptotically linear, the actual cost is deﬁnitely higher
because of the complexity of biometrics matching). We are
thus motivated to extend the idea of password wrapped cre-
dential to biometric wrapped credential, in an attempt to
make anonymous biometric authentication a realistic tool.
4.1 Biometric Wrapped Credential
The concept of biometric wrapped credential is similar to
that of password wrapped credential, but with one’s biomet-
ric information (in place of a password) being used for pro-
tection of an authentication credential. Speciﬁcally, during
the Enrollment phase, the authentication server issues each
user a credential to be used for anonymous authentication;
the user wraps the credential with her biometric informa-
tion, which yields a biometric wrapped credential. Subse-
quently, each time to authenticate to the server, the user
starts by recovering the authentication credential from the
biometric wrapped credential with a fresh biometric reading
(we assume that the application implementing the biomet-
ric wrapped credential approach must ensure the ‘liveness’
of biometric readings, as required in regular biometric au-
thentication), and then engages in anonymous authentica-
tion with the server using the recovered credential. Fig-
ure 1 depicts the conceptual comparison between password
wrapped credential and biometric wrapped credential. To
maximally retain portability, a biometric wrapped creden-
tial can be managed at any storage device so as to guarantee
its availability at the point of authentication.
Clearly this is quite diﬀerent from the standard setting
for biometric authentication, where each user enrolls a bio-
metric template to the authentication server who ends up
managing a database containing all enrolled biometric tem-
plates.
In the approach of biometric wrapped credential,
no biometric template is enrolled to the server, diminishing
the risk of biometrics leakage; more importantly, the work-
load upon the server for anonymously authenticating a user
is the cost to verify the authenticity of the authentication
credential, thus independent of the total number of enrolled
users, breaking the linear server-side bound intrinsic in the
standard setting.
4.2 Materialization
The challenge in substantiating the concept of biometric
wrapped credential is the noisy nature of biometrics, i.e.,
diﬀerent readings of the same biometric trait of the same
person, even obtained using the same sensor, are always dis-
tinct. Hence unlike passwords, biometric information cannot
be directly used to derive a cryptographic key for wrapping
an authentication credential. Fortunately, we discover that
many existing template protection techniques in the biomet-
rics ﬁeld support key release (e.g., [3, 6, 20, 22, 33] and see
Section 2), and they cater to the need of substantiating bio-
metric wrapped credential.
A Uni(cid:12)ed Abstraction. To facilitate illustration, we
provide a uniﬁed abstraction of the template protection with
key release techniques, as reviewed in Section 2. Let X de-
note the space of a particular biometric trait. Basically, a
such technique can be described by the following two algo-
rithms:
• k
• (k; tpl) ← KeyTPLGen(x ∈ X): This probabilistic key
and template generation algorithm outputs a key k and
a template tpl, taking as input a biometric sample x.
′ ∈ X): The deterministic key
′ ← KeyRelease(tpl, x
release algorithm takes as input a template tpl and a
biometric reading x
′
It stipulates that for ∀x; x
′
, and outputs a key k
′ ∈ X; (k; tpl) ← KeyTPLGen(x)
and k
) < (cid:14),
where dist is a distance function in terms of a certain metric
(e.g., Hamming distance) and (cid:14) is a predeﬁned threshold.
′ ← KeyRelease(tpl, x
′
′
): k = k
iﬀ dist(x; x
.
′
We point out that a common way for KeyTPLGen to gen-
erate k in those template protection with key release tech-
niques mentioned in Section 2 is to ﬁrst select a random k,
and then embeds it within x in one way or another which
results in tpl. The nice thing about KeyTPLGen is that
the template tpl it generates does not disclose information
on x. This is where “template protection” comes into play,
and the template is often alluded to as “secure template” in
the literature.
Substantiation. Given the template protection with key
release techniques, it is a bit direct to materialize biometric
wrapped credential, i.e., one uses k generated from her bio-
metric to wrap her authentication credential. Concretely,
let us assume the same setup as in the above anonymous
password authentication system - BBS+ Signature is used
to issue authentication credentials for anonymous entity au-
let (M; k; s) be the authentication credential
thentication:
of user u; then her biometric wrapped credential is dcredu =
⟩, where (ku; tplu) ← KeyTPLGen(xu) with
⟨M; [s]ku ; k; tplu
credential. To unwrap dcredu, it is apparent that the user
ku ← KeyRelease(tplu; x
xu being a biometric sample of u. Note that k remains un-
protected, as it will be accumulated in an Accumulator for
handling user revocation, the same as in password wrapped
′
u and then computes
ﬁrst captures a live biometric reading x
′
u).
The anonymous biometric authentication scheme will be
the same as in Section 3, with biometric wrapped credentials
substituting for password wrapped credentials. As a matter
of fact, public key suppression is not necessary in anonymous
biometric authentication, and the original BBS+ Signature
can be used as it is. This is because biometrics are of high
entropy, and there is no concern of brute force guessing at-
tacks, whether they are oﬄine or online. But it should be
147Figure 1: Conceptual Comparison
clear that enforcement of public key suppression would in-
crease the entropy of biometric wrapped credentials, making
the system more secure. This would be of help in case the
adopted template protection with key release technique is
not so strong (see “Caveat” in Section 5 for more details).
Another point to note is that the mechanism to tackle online
guessing attacks in anonymous password authentication are
not necessary herein either, again because of high entropy
of biometrics.
In a natural manner, existing literature on template pro-
tection with key release, e.g., [3, 6, 20, 22, 33], directly uses
k for (regular) entity authentication. In comparison, the ad-
vantages of our “credential wrapping” strategy include gener-
ality and strengthened security. For generality, we can work
over any template protection with key release technique and
tap on the latest developments in the ﬁeld. Specially, our
approach caters to all the requirements set upon biometric
authentication in [11], except multi-modality; but to em-
brace multiple biometric traits in our approach is a matter
of trivial expansion. For strengthened security, there ex-
ist attacks [31] to some template protection with key release
techniques such as Fuzzy Commitment and Fuzzy Vault, and
some attacks assume the accidental disclosure of k. In our
“credential wrapping”, since k is only required to be present
in the “bootstrap” step (i.e., unwrapping), and is not in-
volved in the authentication protocol at all, the chance for
it to be disclosed is diminished.
Remark. The instantiation of biometric wrapped creden-
tials essentially needs a kind of “biometric encryption”, i.e.,
only one’ genuine biometrics can do decryption. The fuzzy
identity-based encryption [36] can use one’s biometrics as
public key or identity, such that encryptions under biomet-
ric samples can be decrypted by the private key generat-
ed from the biometric template. Apparently, The fuzzy
identity-based encryption scheme is not suitable to imple-
ment “biometric encryption” we desire.
4.3 A Tailored Alternative
For the sole purpose of anonymous biometric authentica-
tion, it can also directly issue BBS+ signature upon k gen-
erated from a user’s biometric, to be the user’s anonymous
credential, e.g., replacing user identity u with k in issuing
BBS+ signature. The user stores ⟨M; s; k⟩ without further
protection, while recover k at the point of authentication to
make the complete credential. This amounts to the afore-
mentioned directly using k for entity authentication (anony-
mous entity authentication in our case), and is orthogonal
to the above biometric wrapped credential paradigm, so we
stop short of further elaboration.
4.4 Beyond “Closed Systems"
While we concentrate on achieving anonymous entity au-
thentication in “closed” systems (i.e., the authentication cre-
dentials are used towards a particular server), biometric
wrapped credentials clearly have applicability beyond closed
systems and anonymous authentication. As said earlier,
guessing attacks are no longer an issue for biometric wrapped
credentials, thus nulliﬁcation of the public veriﬁability of au-
thentication credentials is no longer required. This suggests
that the authentication credentials can be used as usual, to
any party in an “open” system. In addition, a credential in
wrapping is not restricted to be an anonymous authentica-
tion credential, and it can be any other secret quantities,
e.g., the private/signing key in standard encryption/digital
signature. In such cases, biometrics based wrapping actual-
ly acts as a secure “software smartcard” for managing one’s
secrets, and has much wider applicability than mere client-
server authentication.
4.5 Countering Online Guessing Attacks in A-
PA with Biometrics
Recall that online guessing attacks are inevitable in pass-
word authentication, and can only be addressed at the sys-
tem level. Since individual users are not discerned by the
authentication server, online guessing attacks are even more
troublesome in anonymous password authentication. The
scheme in [42] addressed this issue with a virtual TTP (trust-
ed third party) solution, which enlists enrolled users to help
the server to scrape the anonymity of the users under attack
(in other words, enrolled users and the authentication server
together act as a TTP for anonymity scraping). While the
idea is interesting, there may be operational diﬃculties in
implementing the virtual TTP solution in practice.
Incorporating the biometrics factor into anonymous pass-
word authentication yields a better solution. Speciﬁcally, it
is not hard to see that credential wrapping will be based on
pwAuthentication ServerAuthentication credentialA. EnrollmentUserB. AuthenticationPassword wrapped credentialpwpwpwpwpwUnwrappingWrappingBiometric wrapped credentialA. EnrollmentB. Authentication148a key derived from both a password and k to harden the
password, implementing the so called two-factor authentica-
tion. In this case, since the biometric factor is introduced to
increase the entropy of passwords, a relatively higher FMR
(False Match Rate: the probability of a non-genuine sam-
ple is interpreted as match) in biometrics can be tolerated,
compared to pure biometric authentication. Moreover, it is
preferred that the biometrics factor does not downgrade the
portability of passwords. As such, behaviorial biometrics
such as keystroke dynamics would suﬃce, as they arguably
do not require the presence of biometric sensors.
5. EXPERIMENTS
To evaluate the feasibility of biometric wrapped creden-
tials, we implemented and tested the anonymous biometric
authentication protocol within a BYOD (Bring Your Own
Device) prototype. Each user enrolls her smart phone to the
system, during which among others, an authentication cre-
dential under BBS+ Signature is issued and then wrapped
to generate the biometric wrapped credential. When a us-
er anonymously logs in to the system, she is recognized as
“Anonymous User” and is granted “read” privilege under
mandatory access control to a collection of E-resources such
as E-books, E-journals, internal reports and publications.
The biometric trait our experiments adopted is ﬁnger-
print, as there are public data sets for testing. In particular,
we used the FVC2002-DB1 database [26], which contains
images from 100 ﬁngers with 8 impressions per ﬁnger. For
each ﬁgure, we discarded the last 2 impressions in terms of
quality, and used 1 for enrollment and the remaining 5 for
authentication trials. The NIST NBIS mindtct algorithm
[38] was used for minutiae extraction. The number of minu-
tiae extracted per image varies, and some of the minutiae
were selected based on quality and quantized to be 1920 bits
according to ANSI INCITS 378-2004. For BBS+ Signature,
we implemented pairing friendly MNT curves [25] with em-
bedding degree 6, and the order of bilinear groups being
161.
5.1 Implementation Details
The crux of the implementation is the template protection
with key release technique, which we chose to implement the
idea of Fuzzy Extractor [3, 6]. Speciﬁcally, Figure 2 shows
the diagram of the KeyTPLGen algorithm: k is computed
Figure 2: KeyTPLGen
as HMAC(x; r) by applying HMAC-SHA1 to a biometric
sample x and a random number r; tpl includes two elements
(d; r) with d = x ⊕ rc, where rc is a random codeword from
the codeword space of a Reed-Solomon code.
We implemented Reed-Solomon [1920; 768; 1153]211 which
can correct up to 1153−1
= 576 bits of error (i.e., 30% of
1920). To compute d, each bit of the 1920-bit x is turned
into a 11-bit symbol by simply padding with zeros. Such
a coding guarantees that at most one bit in each symbol
2
of rc could be corrupted in our case where the corruption
comes from the application of diﬀerent biometric samples
(but not from data transmissions as usual). The output of
HMAC is 160 bits, so k can be directly used as an AES key
for encryption of (M; s) in generating biometric wrapped
credential.
The diagram of the KeyRelease is depicted in Figure 3.
, the algorithm
′
Given tpl = (d; r) and a biometric sample x
Figure 3: KeyRelease
c = d ⊕ x
′
′
= x ⊕ rc ⊕ x
′
′
, which can
starts by computing r
If the number of