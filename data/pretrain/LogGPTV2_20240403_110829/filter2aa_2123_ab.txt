2.
明文不断“流”进加密器
3.
金钥通常为一个 seed 生成 Keystream
4.
常用于需要即时回应，或是讯息长度未定
的情况
5.
常见演算法：Xor Cipher, Salsa20
区块加密：
1.
一次加密 n 个 bits
2.
一整块资料塞进加密器
3.
金钥就是一个字串
4.
常用于已知讯息长度的情况
5.
常见演算法：AES, DES
Block cipher mode of operation
●
区块加密的对称式加密演算法通常只能加密特定长度或是长度在一定范围内的
讯息（称为 Block size）
●
如何用同一个加密演算法与同一个金钥加密比 Block size 还要长的讯息？
●
将很长的讯息切成数个长度为该演算法之 Block size 的区块（Blocks）
●
以下只介绍几个常见的 mode
ECB
直接把每个 block 个别加密
问题：
●
同样的 block 会被加
密成同样的密文
●
block 可以被任意调
换位置
●
重送攻击
By Lunkwill http://en.wikipedia.org/wiki/Image:Tux_ecb.jpg
CBC
●
一定要等前一个 block 
加密完才能往后加密
●
将前一个 block 的 
ciphertext 设为初始向量
（IV），第一个 block 可以
自订 IV
●
若密文有某个 block 的  
bit 错误，只会影响该 
block 及下一个 block 的
解密
●
若密文有某个 block 的 
bit 遗失，则会影响后续
所有 block 的解密
CTR
●
counter 从 0 开始递加
●
nonce 为随机生成
●
模拟 Stream Cipher
●
可以同步加解密
●
丢失任何 block 都不影响其
他 block 的解密
Padding
●
讯息长度不一定刚好为 block size 的整数倍
●
需要某种方式把最后一个 block “填满”
●
PKCS7：缺 N bytes 就用 N 带入
○
缺 1 bytes 就用 0x01 填满
○
缺 2 bytes 就用 0x02 填满
○
不要和 CBC Mode 一起使用（Padding Oracle Attacks）
●
ANSI X.923：最后一个 byte 填写有多少空缺，用 null bytes 填满其余空位
○
DD DD DD DD 00 00 00 04
●
ZeroPadding：就全部用 null byte 填满
Padding Oracle Attack
●
CBC + PKCS7
●
场景：
○
解密成功，内容正确：HTTP 200 OK, correct
○
解密成功，内容错误：HTTP 200 OK, error
○
解密失败：HTTP 500
●
常见于 Web 的漏洞（e.g. CVE-2010-3332）
Padding Oracle Attack
图皆取自 Fun with Padding Oracles - OWASP
Padding Oracle Attack
Padding Oracle Attack
Padding Oracle Attack
Padding Oracle Attack
Padding Oracle Attack
Padding Oracle Attack
Padding Oracle Attack
Padding Oracle Attack
刚刚推出来的中间值
原本就知道的 IV
两者 XOR 得明文
其实我写了一个程式可以绕过密码
- yoyodiy
Padding Oracle Attack
●
并不是演算法本身安全，密文就不会被破解
●
正确使用演算法、cipher mode、padding mode
●
预防方式
○
解密前确认密文没被窜改（讯息认证码  MAC）
○
隐藏错误讯息（Timing Attack ?)
○
不要用 CBC Mode
金钥分配问题
Alice 如何安全的把金钥送给 Bob？
●
事先约定
○
Alice 把金钥写在纸条上， 偷偷拿给 Bob
●
金钥管理
●
非对称式加密系统
○
有两把金钥，用于加密的可以公开给别人，用于解密的要私藏
●
Diffie-Hellman key exchange
○
可以靠著沟通创造出共有金钥而让窃听者无法得知该金钥
非对称式加密
加密解密使用不同的 Key
明文
密文
用 Public Key 加密
用 Private Key 解密
非对称式加密
1.
Bob 要传讯息给 Alice
2.
Bob 拿 Alice 的公钥 （Public Key） 对
讯息加密
3.
Bob 传加密过后的讯息给 Alice
4.
Alice 拿自己的私钥 （Private Key）对
讯息解密
非对称式加密
●
Public Key 可以公开
●
Private Key 必须自己保存
●
任何人都可以用 Alice 的 Public Key 加密讯息
●
只有 Alice 能将这些讯息以她的 Private Key 解密
●
常见演算法：RSA, ElGamal, ECC
●
运算速度比对称式加密慢很多，故现在几乎都是混合对称式加密（Hybrid 
cryptosystem）
○
Alice 生成一个会议金钥（ Session Key），以会议金钥对称式加密讯息
○
Alice 以非对称式加密拿 Bob 的 Public Key 加密会议金钥
○
两者合并传送给 Bob
○
Bob 用自己的 Private Key 解开会议金钥
○
Bob 以会议金钥解密讯息
RSA
●
最常见的非对称式加密系统
●
基于大数质因数分解困难
●
Ron Rivest、Adi Shamir、Leonard Adleman 共同发明
RSA
制作 Public Key 与 Private Key：
1.
选择 2 个超大相异质数 p, q 并计算 N = pq
2.
计算 r = (p-1) × (q-1)
3.
选一整数 e 满足 e < r 且 gcd(e, r) = 1
4.
寻一整数 d 满足 ed ≡ 1 (mod r)
5.
销毁 p 与 q，得 Public Key (N, e) 与 Private 
Key (N, d)
加密与解密：
1.
Bob 要传讯息给 Alice，讯息依据特定方法
转成整数 m 满足 m < N
2.
Alice 将 Public Key (N, e) 交给 Bob
3.
Bob 运算 c ≡ me (mod N) 得 c 并交给 
Alice （加密）
4.
Alice 运算 cd ≡ m (mod N) 得 m ，再依约
定方法转回原始内容（解密）
其实看不懂没关系啦 ...
维基百科上有很详细的证明可以读
RSA Padding
●
解决 RSA 的一些神奇特性所造成的问题：
○
同样明文、同样金钥会得同样密文
○
当 me < N，me (mod N) = me
○
0e = 0
1e = 1
○
Homeomorphic Property:
RSA(k,A) × RSA(k,B) = RSA(k,A×B)  
●
讯息一定要先处理过才能 RSA 加密
●
常见：PKCS#1 padding, OAEP
OAEP
●
Optimal Asymmetric Encryption Padding
●
欲加密讯息 m，随机生成乱数 r
●
加密：
○
X=(m+000...) ⊕ G(r)
Y = r ⊕ H(X)
○
其中 G, H 是公开的 Hash 函数
○
RSA 加密 (X||Y)
●
解密：
○
RSA 解密得 (X||Y)
○
r = Y ⊕ H(X)
○
m+000...= X ⊕ G(r)
Diffie-Hellman key exchange
●
可以靠著沟通创造出共有金钥而让窃听者无法得知该金钥
●
基于离散对数问题
●
由 Ralph C. Merkle、Bailey Whitfield Diffie、Martin Edward Hellman 提出
Diffie-Hellman key exchange
1.
Alice 与 Bob 约定使用 p=23, g=5
2.
Alice 创造一个整数 a=6 并保密
并计算 A = ga mod p 并传给 Bob。
A = 56 mod 23 = 8
3.
Bob 创造一个整数 b=15 并保密
并计算 B = gb mod p 并传给 Alice。
B = 515 mod 23 = 19
4.
Alice 计算 s = Ba mod p
196 mod 23 = 2
5.
Bob 计算 s = Ab mod p
815 mod 23 = 2
密码学用于资料与身份验证
杂凑函数（Hash）
●
将任意长度的字串转成固定长度
●
Avalanche effect：字串有些微变动，Hash 差异很大
○
md5(1234) = 81dc9bdb52d04dc20036dbd8313ed055