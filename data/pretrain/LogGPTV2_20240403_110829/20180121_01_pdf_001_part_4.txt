# 产品生态

## 生态系统
- **专有云**
- **云市场**
- **公有云**
- **集团业务**
- **混合云**

## 服务与专家
- **业务专家**
- **RDS 中台**
- **SaaS 服务**（如 QBI, DataV）
- **分级存储**
- **OLTP + OLAP 本地数据处理**
- **数据传输与迁移服务**
- **OSS 表管理**（并行读写、压缩、行存、列存）
- **ODPS 和 ADS 阿里云 OSS**（海量分布式对象存储）

## 其他相关技术
- **mybatis 框架**：不支持的语法可以通过 UDF 实现，例如批量更新。
  - 参考文档：
    - [MyBatis 配置](http://www.mybatis.org/mybatis-3/configuration.html)
    - [批量更新示例](https://github.com/digoal/blog/blob/master/201712/20171214_01.md)

## 类型映射
- **MySQL 到 PostgreSQL 的类型映射**：
  - `enum` -> `LOWER(CONCAT(c.COLUMN_NAME, '_t'))`
  - `tinyint` -> `smallint`
  - `mediumint` -> `integer`
  - `tinyint unsigned` -> `smallint`
  - `smallint unsigned` -> `integer`
  - `mediumint unsigned` -> `integer`
  - `int unsigned` -> `bigint`
  - `bigint unsigned` -> `numeric(20)`
  - `double` -> `double precision`
  - `float` -> `real`
  - `datetime` -> `timestamp`
  - `longtext` -> `text`
  - `mediumtext` -> `text`
  - `blob` -> `bytea`
  - `mediumblob` -> `bytea`

## 语法差异
- **MySQL 与 PostgreSQL 的语法差异**：
  - 详细差异参考：
    - [类型和语法差异](https://github.com/digoal/blog/blob/master/201801/20180117_01.md)
    - [更多语法差异](https://github.com/digoal/blog/blob/master/201801/20180117_02.md)
  - 常见语法差异：
    - MySQL: `LIMIT {[offset,] row_count | row_count OFFSET offset}`
    - PostgreSQL: `LIMIT { count | ALL } [ OFFSET start [ ROW | ROWS ] ]`
  - PostgreSQL 扩展语法、操作符、函数、类型、索引接口、插件：
    - [SQL 命令](https://www.postgresql.org/docs/10/static/sql-commands.html)
    - [函数](https://www.postgresql.org/docs/10/static/functions.html)
    - [数据类型](https://www.postgresql.org/docs/10/static/datatype.html)
    - [索引类型](https://www.postgresql.org/docs/10/static/sql-createindex.html)
    - [插件](https://www.postgresql.org/docs/10/static/contrib.html)

## 阿里巴巴内部应用
- **淘宝**
- **新零售**
- **菜鸟**
- **公共平台**
- **飞猪**
- **阿里云**
- **优酷**
- **YUNOS**
- **智慧阿里妈妈**
- **智慧城市**
- **蚂蚁**
- **B2B**
- **未来酒店**
- **阿里云孵化器**
- **高德**
- **淘点点**

## 目录
- **产品介绍**
- **生态介绍**
- **应用案例**
- **开发与管理实践**
- **数据库原理**
- **参考文档**

## 性能测试 (56 Core ECS, PG 10)
### OLTP Benchmark
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 点查，KEY值查询 | 1亿 | 112 | 69万 | 0.16毫秒 |
| 键值更新 | 1亿 | 56 | 22万 | 0.25毫秒 |
| 合并写入 (有则更新、无则写入) | 1亿 | 56 | 22.8万 | 0.245毫秒 |
| 秒杀-单条记录并发更新 | 1 | 56 | 23万 | 0.48毫秒 |
| 空间包含，菜鸟精准分包、共享单车等 | 1亿个多边形 | 112 | 27.9万 | 0.4毫秒 |
| 搜索空间附近对象，LBS，O2O | 10亿个经纬度点 | 112 | 13.7万 | 0.8毫秒 |
| 空间数据、位置更新 (滴、菜鸟、饿) | 1亿 | 56 | 18万 | 0.3毫秒 |
| 图式搜索 (N度搜索、最短路径) | 50亿，3度搜索，单次响应2.1毫秒 | 64 | 1万 | 6.6毫秒 |

### OLTP Benchmark (续)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 全文检索、写入、实时索引 | 500万词库，每行64个词，并发写入 | 56 | 9.3万 | 0.6毫秒 |
| 数组、写入、实时索引 | 500万词库，每行64个词，并发写入 | 56 | 10万 | 0.5毫秒 |
| 前后模糊查询、实时索引、并发写 | 128个随机字符 | 56 | 14.4万 | 0.38毫秒 |
| 字符串查询、前缀 like 'x%' | 1亿，128个随机字符 | 112 | 14万 | 0.8毫秒 |
| 字符串查询、后缀 like '%x' | 1亿，128个随机字符 | 112 | 17.8万 | 0.63毫秒 |
| 字符串查询、前后百分号 like '%x%' | 1亿，128个随机字符 | 56 | 8.1万 | 0.68毫秒 |
| 字符串查询、相似查询 similary(str, 'xx') | 1亿，128个随机字符 | 56 | 1531 | 35毫秒 |
| 字符串查询、全文检索 ts @@ tsquery | 1亿 | 56 | 5.14万 | 1毫秒 |

### OLTP Benchmark (续)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 文本特征向量搜索 | 1亿海明码 | 56 | 4.9万 | 1.14毫秒 |
| 数组相似搜索 | 1亿，每行24个数组元素 | 56 | 1909 | 29毫秒 |
| 时序数据并发写入 (含时序索引) | 批量写入313.7 万行/s，单步写入27.3万 | 56 | 3137 | 17.8毫秒 |
| 区间查询，返回5万条记录 | 1亿（3160万行/s 吞吐） | 16 | 630 | 25毫秒 |
| IN\EXISTS 查询 | 1亿，IN(1,10,100,...100万个元素) | 1毫秒~ 380毫秒 |
| NOT IN 查询 (无需索引) | parallel Hashjoin | 1亿，NOT IN(1,10,100,...100万个元素) | 0.8秒~ 1.8秒 |
| NOT EXISTS 查询 (无需索引) | parallel Hashjoin | 1亿，NOT exists(100万个元素) | 0.9秒~ 1.2秒 |

### OLTP Benchmark (续)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 流式处理-阅后即焚-消费 | 395.2 万行/s | 56 | 3952 | 14毫秒 |
| 物联网-阅后即焚-读写并测 | 写入：193万行/s，消费：418万行/s | 56 |
| 物联网-阅后即焚-JSON+函数流计算-读写并测 | 写入：180万行/s，消费：145.8万行/s | 56 |
| 单表，无索引，单事务单条写入 | 单行110字节 | 56 | 26万 | 0.2毫秒 |
| 单表，有索引，单事务单条写入 | 单行110字节 | 56 | 10万 | 0.5毫秒 |
| 单表，无索引，单事务多条批量写入 | 单行110字节，每次提交1000条 | 56 | 180万 | 30.9毫秒 |
| 单表，有索引，单事务多条批量写入 | 单行110字节，每次提交1000条 | 56 | 16.7万 | 334毫秒 |

### OLTP Benchmark (续)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 多表，无索引，单事务单条写入 | 动态SQL成为瓶颈 | 56 | 18万行/s | 0.3毫秒 |
| 多表，有索引，单事务单条写入 | 动态SQL成为瓶颈 | 56 | 17万行/s | 0.3毫秒 |
| 多表，无索引，单事务多条写入 | 每次提交1000条 | 56 | 262.7万行/s | 21毫秒 |
| 多表，有索引，单事务多条写入 | 每次提交1000条 | 56 | 145万行/s | 38毫秒 |
| 无日志多表，无索引，单事务多条写入 | 每次提交1000条 | 56 | 813万行/s | 6.8毫秒 |
| 无日志多表，有索引，单事务多条写入 | 每次提交1000条 | 56 | 733万行/s | 7.6毫秒 |

### OLAP Benchmark (56 Core ECS, PG 10)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 多表JOIN | 10张1000万的表 | 112 | 10万 | 1.08毫秒 |
| 大表JOIN、统计 | 2张1亿，1张100万 | 56 | 2.2万 | 2.5毫秒 |
| 大表OUTER JOIN、统计 | 1千万 OUTER JOIN 1亿 | 1千万left join 1亿：11秒 | 反之：8秒 |
| 用户画像-数组包含、透视 | 1亿，每行16个标签 | 56 | 1773 | 31毫秒 |
| 用户画像-数组相交、透视 | 1亿，每行16个标签 | 56 | 113 | 492毫秒 |
| 用户画像-varbitx | 1万行，2000亿BIT ，与或非 | 2.5秒 |
| 用户画像-多字段任意搜索\聚合、透视 | 1亿，32个字段，任意字段组合查询 | 56 | 3.6万 | 1.56毫秒 |
| 物联网-线性数据-区间实时聚合、统计 | 1万传感器，10亿记录 | 56 | 6266 | 8.9毫秒 |

### OLAP Benchmark (续)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 排序 | 1亿 | 32 | 1.4秒 |
| 建索引 | 1亿 | PG 10: 38秒；PG11: 15.5秒 |
| 并行扫描 | 1亿 | 32 | 0.88秒 |
| 并行聚合 | 1亿 | 32 | 0.9秒 |
| 并行过滤 | 1亿 | 32 | 1秒 |
| 并行JOIN+聚合 | 1000 万JOIN 1000万 | 32 | PG 10: 5.4秒；PG 11: 1秒 |
| 并行JOIN+聚合 | 1亿JOIN 1亿 (双表过滤到1000万) | 32 | PG 10: 6.3秒；PG 11: 1.2秒 |
| 并行JOIN+聚合 | 1亿JOIN 1亿 (单表过滤到1000万) | 32 | PG 10: 8.5秒；PG 11: 2秒 |
| 并行JOIN+聚合 | 1亿 JOIN 1亿 (无条件JOIN) | 32 | PG 10: 58.3秒；PG 11: 10.7秒 |
| 并行JOIN+聚合 | 10亿JOIN 10亿 (双表过滤到1000万) | 32 | PG 10: 12秒；PG 11: 1秒 |

### OLAP Benchmark (续)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 并行HASHAGG | 10亿 (PG 11) | 64 | 11秒 |
| VOPS + 异步并行 | 10亿，聚合查询 (PG 10) | 56 | 2秒 |
| 多表并行扫描 | 2亿 (PG 11) | 64 | 0.6秒 (parallelappend) |
| 求TOP-K | 100亿 (PG 11) | 64 | 40秒 |

### 测试详情
- [测试详情1](https://github.com/digoal/blog/blob/master/201711/readme.md)
- [测试详情2](https://github.com/digoal/blog/blob/master/201801/20180102_04.md)
- [测试详情3](https://github.com/digoal/blog/blob/master/201802/20180204_01.md)
- [测试详情4](https://github.com/digoal/blog/blob/master/201802/20180204_03.md)
- [测试详情5](https://github.com/digoal/blog/blob/master/201802/20180201_01.md)
- [测试详情6](https://github.com/digoal/blog/blob/master/201802/20180202_02.md)
- [测试详情7](https://github.com/digoal/blog/blob/master/201802/20180210_01.md)
- [测试详情8](https://github.com/digoal/blog/blob/master/201808/20180823_01.md)

### HDB PG OLAP Benchmark (单主机)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 非分布键group by, TOP-K | 10亿、列存、压缩、101个元素 | 1 | 1.8秒 |
| 非分布键count(distinct) | 10亿、列存、压缩、101个元素 | 1 | 1.8秒 |
| 非分布键order by, TOP-K | 10亿、行存、压缩、索引 | 1 | 50毫秒 |
| 非分布键JOIN，group by, TOP-K | 10亿、列存、压缩、101个元素 | 1 | 56秒 |
| 非分布键JOIN，count(distinct) | 10亿、列存、压缩、101个元素 | 1 | 53秒 |
| 非分布键JOIN，orderby, TOP-K | 10亿、列存、压缩 | 1 | 141秒 |
| 分布键group by, TOP-K | 10亿、列存、压缩、10亿元素 | 1 | 1.67秒 |
| 分布键orderby, TOP-K | 10亿、行存、压缩、索引 | 1 | 42毫秒 |
| 分布键JOIN, order by, TOP-K | 10亿、列存、压缩、10亿元素 | 1 | 119秒 |

### HDB PG OLAP Benchmark (50 主机)
| 测试用例 | 数据量 | 并发数 | TPS | 平均响应时间 |
| --- | --- | --- | --- | --- |
| 海量数据导入，走OSS（带统计干扰时） | 100亿，5.5TB，单行576字节 | array[?,?,...]
  - arr && array[?,?,...]
  - not arr @> array[?,?,...]
- 搜索加速
  - GIN倒排，(标签元素倒排索引)
  - udf1(标签s) -> [1维数组], udf2(标签s)->[2维数组]

### 案例
- **XX生物科技**
  - 超过单表列宽限制
  - 几万列浮点，几十万行，100GB左右
  - 计算任意组合 (物种、序列分段) 的欧氏空间距离
  - 采用 float8[] 存储几万列浮点，UDF 计算 XX 距离
- **架构设计、代码、实操手册**
  - [数组类型和操作符、函数、索引](https://www.postgresql.org/docs/10/static/arrays.html)
  - [多重含义数组UDF检索](https://github.com/digoal/blog/blob/master/201801/20180124_02.md)
  - [生物科技案例](https://github.com/digoal/blog/blob/master/201712/20171227_01.md)

### 搜索
- **Case2 (GIN)**
  - **搜索需求分类**：
    - 全文检索
    - 模糊搜索、前缀、后缀、前后模糊
    - 相似搜索
    - 任意字段组合搜索
  - **案例**：
    - **XXX域名服务**
      - 模糊查询、相似查询
      - 10亿级记录模糊搜索
    - **XXX某CRM系统**
      - 任意字段全文检索、模糊查询
      - 词汇 (phase) 查询
      - 10亿级记录多字段任意组合搜索
      - 难以同步一致性
    - **新零售-营销、分销链路**
      - 多值类型检索
      - 10亿级记录数组 & | 搜索
    - **QA (医疗行业、搜索、知识库)**
      - 相似问题、相似地址、相似病例
    - **GA**
      - 车牌模糊搜索
  - **痛点**：
    - 全文检索无法支持“模糊查询” (例如域名并非分词)
    - 数据库与搜索引擎一致性维护麻烦
  - **云产品方案、效果**：
    - **RDS PG**
      - GIN 倒排索引，支持多值类型、多字段任意条件检索
      - Bloom 索引，支持多字段任意组合等值条件过滤
      - 多索引 bitmap scan，多个索引合并扫描
      - pg_trgm 支持模糊查询、相似查询、正则查询
      - zhparser 中文分词插件支持中文分词
    - **全文检索技术**：
      - 支持精排、微调 ranking
      - 字符串分词
      - 存储倒排树
      - 自定义解析器和词典

希望这些优化后的文本能够更清晰、连贯和专业。如果有任何进一步的需求，请随时告诉我！