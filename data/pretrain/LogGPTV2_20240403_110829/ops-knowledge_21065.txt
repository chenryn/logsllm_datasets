As part of a large system, I am working on implementing a service that, among other tasks, will distribute large files (up to 300MB) to other servers running in the Amazon Web Services (AWS) environment. This file service must be highly available, with multiple instances running simultaneously, and it needs to support multiple clients.

The service is written in Python and uses the Tornado web server. Initially, we considered using MySQL, but due to the high memory consumption associated with storing large BLOBs, this approach was deemed impractical.

We also explored the use of Amazon Elastic File System (EFS), but it is not currently available in our region. We have heard about SoftNAS and are currently investigating its potential for our use case.

Are there any other viable alternatives that you would recommend we consider? 

---

In addition to SoftNAS, you might want to consider the following options:

1. **Amazon S3 with Multi-Part Upload**:
   - **Description**: Amazon S3 is a highly scalable, durable, and secure object storage service. It supports multi-part uploads, which can efficiently handle large files by breaking them into smaller parts.
   - **Benefits**: High availability, durability, and easy integration with other AWS services. Multi-part upload can resume from where it left off if a transfer is interrupted.
   - **Implementation**: You can use the AWS SDK for Python (Boto3) to interact with S3 and manage multi-part uploads.

2. **MongoDB GridFS**:
   - **Description**: MongoDB's GridFS is a specification for storing and retrieving files that exceed the BSON-document size limit of 16MB. It splits files into chunks and stores them as separate documents.
   - **Benefits**: Scalability, ease of use, and integration with MongoDB's rich query capabilities.
   - **Implementation**: You can use the `gridfs` package in Python to store and retrieve files in MongoDB.

3. **Ceph Object Storage (RADOS Gateway)**:
   - **Description**: Ceph is a distributed storage system that provides object, block, and file storage. The RADOS Gateway (RGW) allows you to use Ceph as an S3-compatible object storage service.
   - **Benefits**: High scalability, fault tolerance, and open-source flexibility.
   - **Implementation**: You can set up Ceph and use the RGW to store and retrieve files, similar to how you would use S3.

4. **MinIO**:
   - **Description**: MinIO is a high-performance, S3-compatible object storage system. It is designed for storing unstructured data such as photos, videos, log files, backups, and container/VM images.
   - **Benefits**: Lightweight, easy to deploy, and highly performant.
   - **Implementation**: You can run MinIO on-premises or in the cloud and use the S3 API to interact with it.

5. **GlusterFS**:
   - **Description**: GlusterFS is a scalable network filesystem suitable for data-intensive tasks such as cloud storage and media streaming.
   - **Benefits**: High availability, scalability, and performance.
   - **Implementation**: You can set up a GlusterFS cluster and mount it on your servers to provide a shared storage solution.

Each of these options has its own strengths and trade-offs, so the best choice will depend on your specific requirements, such as performance, cost, and ease of integration with your existing infrastructure.