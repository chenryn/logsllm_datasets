title:Survivor: a fine-grained intrusion response and recovery approach
for commodity operating systems
author:Ronny Chevalier and
David Plaquin and
Chris I. Dalton and
Guillaume Hiet
Survivor: A Fine-Grained Intrusion Response and
Recovery Approach for Commodity Operating Systems
Ronny Chevalier, David Plaquin, Chris Dalton, Guillaume Hiet
To cite this version:
Ronny Chevalier, David Plaquin, Chris Dalton, Guillaume Hiet. Survivor: A Fine-Grained In-
trusion Response and Recovery Approach for Commodity Operating Systems. ACSAC 2019
- 35th Annual Computer Security Applications Conference, Dec 2019, San Juan, Puerto Rico.
10.1145/3359789.3359792. hal-02289315v2
HAL Id: hal-02289315
https://hal.inria.fr/hal-02289315v2
Submitted on 26 Sep 2019
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
Survivor: A Fine-Grained Intrusion Response and Recovery
Approach for Commodity Operating Systems
Ronny Chevalier
HP Labs
CentraleSupélec, Inria, CNRS, IRISA
PI:EMAIL
David Plaquin
HP Labs
PI:EMAIL
Chris Dalton
HP Labs
PI:EMAIL
ABSTRACT
Despite the deployment of preventive security mechanisms to pro-
tect the assets and computing platforms of users, intrusions even-
tually occur. We propose a novel intrusion survivability approach
to withstand ongoing intrusions. Our approach relies on an orches-
tration of fine-grained recovery and per-service responses (e.g.,
privileges removal). Such an approach may put the system into a
degraded mode. This degraded mode prevents attackers to reinfect
the system or to achieve their goals if they managed to reinfect
it. It maintains the availability of core functions while waiting for
patches to be deployed. We devised a cost-sensitive response se-
lection process to ensure that while the service is in a degraded
mode, its core functions are still operating. We built a Linux-based
prototype and evaluated the effectiveness of our approach against
different types of intrusions. The results show that our solution
removes the effects of the intrusions, that it can select appropriate
responses, and that it allows services to survive when reinfected.
In terms of performance overhead, in most cases, we observed a
small overhead, except in the rare case of services that write many
small files asynchronously in a burst, where we observed a higher
but acceptable overhead.
CCS CONCEPTS
• Security and privacy → Operating systems security; Mal-
ware and its mitigation.
KEYWORDS
Intrusion Survivability, Intrusion Response, Intrusion Recovery
ACM Reference Format:
Ronny Chevalier, David Plaquin, Chris Dalton, and Guillaume Hiet. 2019.
Survivor: A Fine-Grained Intrusion Response and Recovery Approach for
Commodity Operating Systems. In 2019 Annual Computer Security Applica-
tions Conference (ACSAC ’19), December 9–13, 2019, San Juan, PR, USA. ACM,
New York, NY, USA, 14 pages. https://doi.org/10.1145/3359789.3359792
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in 2019 Annual
Computer Security Applications Conference (ACSAC ’19), December 9–13, 2019, San Juan,
PR, USA, https://doi.org/10.1145/3359789.3359792.
Guillaume Hiet
CentraleSupélec, Inria, CNRS, IRISA
PI:EMAIL
1 INTRODUCTION
Despite progress in preventive security mechanisms such as cryp-
tography, secure coding practices, or network security, given time,
an intrusion will eventually occur. Such a case may happen due to
technical reasons (e.g., a misconfiguration, a system not updated,
or an unknown vulnerability) and economic reasons [39] (e.g., do
the benefits of an intrusion for criminals outweigh their costs?).
To limit the damage done by security incidents, intrusion re-
covery systems help administrators restore a compromised system
into a sane state. Common limitations are that they do not preserve
availability [23, 27, 34] (e.g., they force a system shutdown) or that
they neither stop intrusions from reoccurring nor withstand re-
infections [23, 27, 34, 71, 74]. If the recovery mechanism restores
the system to a sane state, the system continues to run with the
same vulnerabilities and nothing stops attackers from reinfecting
it. Thus, the system could enter a loop of infections and recoveries.
Existing intrusion response systems, on the other hand, apply
responses [20] to stop an intrusion or limit its impact on the system.
However, existing approaches apply coarse-grained responses that
affect the whole system and not just the compromised services [20]
(e.g., blocking port 80 for the whole system because a single compro-
mised service uses this port maliciously). They also rely on a strong
assumption of having complete knowledge of the vulnerabilities
present and used by the attacker [20, 62] to select responses.
These limitations mean that they cannot respond to intrusions
without affecting the availability of the system or of some services.
Whether it is due to business continuity, safety reasons, or the user
experience, the availability of services is an important aspect of a
computing platform. For example, while web sites, code reposito-
ries, or databases, are not safety-critical, they can be important for
a company or for the workflow of a user. Therefore, the problem
that we address is the following: how to design an Operating Sys-
tem (OS) so that its services can survive ongoing intrusions while
maintaining availability?
Our approach distinguishes itself from prior work on three fronts.
First, we combine the restoration of files and processes of a service
with the ability to apply responses after the restoration to withstand
a reinfection. Second, we apply per-service responses that affect the
compromised services instead of the whole system (e.g., only one
service views the file system as read-only). Third, after recovering a
compromised service, the responses we apply can put the recovered
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Chevalier et al.
service into a degraded mode, because they remove some privileges
normally needed by the service.
The degraded mode is on purpose. When the intrusion is de-
tected, we do not have precise information about the vulnerabilities
exploited to patch them, or we do not have a patch available. The
degraded mode allows the system to survive the intrusion for two
reasons. First, after the recovery, the degraded mode either stops the
attackers from reinfecting the service, or it stops the attackers from
achieving their goals. Second, the degraded mode keeps as many
functions of the service available as possible, thus maintaining
availability while waiting for a patch.
We maintain the availability by ensuring that core functions of
services are still operating, while non-essential functions might not
be working due to some responses. For example, a web server could
have "provide read access to the website" as core function, and "log
accesses" as non-essential. Thus, if we remove the write access to
the file system it would degrade the service’s state (i.e., it cannot
log anymore), but we would still maintain its core function. We
developed a cost-sensitive response selection where administrators
describe a policy consisting of cost models for responses and mali-
cious behaviors. Our solution then selects a response that maximize
the effectiveness while minimizing its impact on the service based
on the policy.
This approach gives time for administrators to plan an update
to fix the vulnerabilities (e.g., wait for a vendor to release a patch).
Finally, once they patched the system, we can remove the responses,
and the system can leave the degraded mode.
Contributions. Our main contributions are the following:
help select optimal responses (section 5).
• We propose a novel intrusion survivability approach to with-
stand ongoing intrusions and maintain the availability of
core functions of services (section 3.1 and 4).
• We introduce a cost-sensitive response selection process to
• We develop a Linux-based prototype implementation by
modifying the Linux kernel, systemd [65], CRIU [12], Linux
audit [29], and snapper [63] (section 6).
• We evaluate our prototype by measuring the effectiveness
of the responses applied, the ability to select appropriate
responses, the availability cost of a checkpoint and a restore,
the overhead of our solution, and the stability of the degraded
services (section 7).
Outline. The rest of this document is structured as follows. First,
in section 2, we review the state of the art on intrusion recovery and
response systems. In section 3, we give an overview of our approach,
and we define the scope of our work. In section 4, we specify the
requirements and architecture of our approach. In section 5, we
describe how we select cost-sensitive responses and maintain core
functions. In section 6, we describe a prototype implementation
which we then evaluate in section 7. In section 8, we discuss some
limitations of our work. Finally, we conclude and give the next steps
regarding our work in section 9.
2 RELATED WORK
Our work is based on the concept of survivability [37], and specifi-
cally intrusion survivability, since our approach focuses on with-
standing ongoing intrusions. We make a trade-off between the
availability of the functionalities of a vulnerable service and the
security risk associated to maintaining them. In this section, we
review existing work on intrusion recovery and response systems.
2.1 Intrusion Recovery Systems
Intrusion recovery systems [23, 27, 34, 71, 74] focus on system in-
tegrity by recovering legitimate persistent data. Except SHELF [74]
and CRIU-MR [71], the previous approaches do not preserve avail-
ability since their restore procedure forces a system shutdown, or
they do not record the state of the processes. Furthermore, except
for CRIU-MR, they log all system events to later replay legitimate
operations [23, 34, 74] or rollback illegitimate ones [27], thus provid-
ing a fine-grained recovery. Such an approach, however, generates
gigabytes of logs per day inducing a high storage cost.
Most related to our work are SHELF [74] and CRIU-MR [71].
SHELF recovers the state of processes and identify infected files
using a log of system events. During recovery, it quarantines in-
fected objects by freezing processes or forbidding access to files.
SHELF, however, removes this quarantined state as soon as it re-
stores the system, allowing an attacker to reinfect the system. In
comparison, our approach applies responses after a restoration to
prevent reinfection or the reinfected service to cause damages to
the system.
CRIU-MR restores infected systems running within a Linux con-
tainer. When an Intrusion Detection System (IDS) notifies CRIU-MR
that a container is infected, it checkpoints the container’s state (us-
ing CRIU [12]), and identifies malicious objects (e.g., files) using
a set of rules. Then, it restores the container while omitting the
restoration of the malicious objects. CRIU-MR differs from other ap-
proaches, including ours, because it uses a checkpoint immediately
followed by a restore, only to remove malicious objects.
The main limitation affecting prior work, including SHELF and
CRIU-MR, is that they neither prevent the attacker from reinfecting
the system nor allow the system to withstand a reinfection since
vulnerabilities are still present.
2.2 Intrusion Response Systems
Having discussed systems that recover from intrusions and showed
that it is not enough to withstand them, we now discuss intrusion
response systems [5, 20, 62] that focus on applying responses to
limit the impact of an intrusion.
One area of focus of prior work is on how to model intrusion dam-
ages, or response costs, to select responses. Previous approaches
either rely on directed graphs about system resources and cost mod-
els [5], on attack graphs [20], or attack defense trees [62]. Shameli-
Sendi et al. [62] use Multi-Objective Optimization (MOO) methods
to select an optimal response based on such models.
A main limitation, and difference with our work, is that these
approaches apply system-wide or coarse-grained responses that af-
fect every application in the OS. Our approach is more fine-grained,
since we select and apply per-service responses that only affect
the compromised service, and not the rest of the system. Moreover,
these approaches cannot restore a service to a sane state. Our ap-
proach, on the other hand, combines the ability to restore and to
apply cost-sensitive per-service responses.
Survivor: A Fine-Grained Intrusion Response and Recovery Approach for Commodity Operating Systems
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Some of these approaches [20, 62] also rely on the knowledge of
vulnerabilities present on the system and assume that the attacker
can only exploit these vulnerabilities. Our approach does not rely on
such prior knowledge, but relies on the knowledge that an intrusion
occurred, and the malicious behaviors exhibited by this intrusion.
Huang et al. [28] proposed a closely related approach that mit-
igates the impact of waiting for patches when a vulnerability is
discovered. However, their system is not triggered by an IDS but
only by the discovery of a vulnerability. They instrument or patch
vulnerable applications so that they do not execute their vulner-
able code, thus losing some functionality (similar to a degraded
state). They generate workarounds that minimize the cost of losing
a functionality by reusing error-handling code already present. In
our work, however, we do not assume any knowledge about the
vulnerabilities, and we do not patch or modify applications.
3 PROBLEM SCOPE
This section first gives an overview of our approach (illustrated
in Figure 1), then it describes our threat model and some assump-
tions that narrow the attack scope.
3.1 Approach Overview
Since we focus our research on intrusion survivability, our work
starts when an IDS detects an intrusion in a service.
the loss of known legitimate and non-infected data.1 To per-
form recovery actions, we do not require for the system to be
rebooted, and we limit the availability impact on the service.
Response A response action removes privileges, isolates compo-
nents of the system from the service, or reduces resource
quotas (e.g., CPU or RAM) of one service. Hence, it does
not affect any other component of the system (including
other services).2 Its goal is to either prevent an attacker to
reinfect the service or to withstand a reinfection by stop-
ping attackers from achieving their goals (e.g., data theft)
after the recovery. Such a response may put the service into
a degraded mode, because some functions might not have
the required privileges anymore (or limited access to some
resources).
Policies We apply appropriate responses that do not disable core
functions (e.g., the ability to listen on port 80 for a web
server). To refine the notion of core functions, we rely on
policies. Their goal is to provide a trade-off between the
availability of a function (that requires specific privileges)
in a service and the intrusion risk. We designed a process
to select cost-sensitive responses (see section 5) based on
such policies. Administrators, developers, or maintainers
provide the policies by specifying the cost of losing specific
privileges (i.e., if we apply a response) and the cost of a
malicious behavior (exhibited by an intrusion).
Intrusion
Intrusion
Detection
Detection
Monitor
Operating System
Service
Alert
Policies
Policies
Use
Recovery & Response
1. Restore infected objects
2. Maintain core functions
3. Withstand reinfection
Devices
Network
Filesystem
Restore
service
Apply
respo-
nses
Restore
files
In scope
Out of scope
Figure 1: High-level overview of our intrusion survivability
approach