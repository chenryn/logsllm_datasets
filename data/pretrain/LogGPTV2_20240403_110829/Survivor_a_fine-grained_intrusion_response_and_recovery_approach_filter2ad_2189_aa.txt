# Survivor: A Fine-Grained Intrusion Response and Recovery Approach for Commodity Operating Systems

**Authors:** Ronny Chevalier, David Plaquin, Chris I. Dalton, Guillaume Hiet

## Abstract
Despite the deployment of preventive security mechanisms to protect user assets and computing platforms, intrusions still occur. We propose a novel intrusion survivability approach to withstand ongoing intrusions. Our approach leverages an orchestration of fine-grained recovery and per-service responses (e.g., privilege removal). This may place the system in a degraded mode, which prevents attackers from reinfecting the system or achieving their goals if they do manage to reinfect it. The degraded mode maintains the availability of core functions while waiting for patches to be deployed. We have developed a cost-sensitive response selection process to ensure that essential service functions remain operational even in a degraded state. A Linux-based prototype was built and evaluated against various types of intrusions. The results demonstrate that our solution effectively removes the effects of intrusions, selects appropriate responses, and allows services to survive re-infections. In terms of performance overhead, we observed minimal impact in most cases, with a higher but acceptable overhead only in rare scenarios involving services that write many small files asynchronously in bursts.

## Keywords
Intrusion Survivability, Intrusion Response, Intrusion Recovery

## ACM Reference Format
Ronny Chevalier, David Plaquin, Chris Dalton, and Guillaume Hiet. 2019. Survivor: A Fine-Grained Intrusion Response and Recovery Approach for Commodity Operating Systems. In 2019 Annual Computer Security Applications Conference (ACSAC '19), December 9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3359789.3359792

## 1. Introduction
Despite advancements in preventive security measures such as cryptography, secure coding practices, and network security, intrusions can still occur due to technical (e.g., misconfigurations, unpatched systems, unknown vulnerabilities) and economic reasons (e.g., the benefits to attackers outweighing the costs). To mitigate the damage caused by security incidents, intrusion recovery systems help administrators restore compromised systems to a sane state. However, these systems often fail to preserve availability or prevent reinfections.

Existing intrusion response systems apply coarse-grained responses that affect the entire system rather than just the compromised services. These approaches also rely on the assumption of complete knowledge of the vulnerabilities present and used by the attacker. This limitation means that they cannot respond to intrusions without affecting the availability of the system or its services. Availability is crucial for business continuity, safety, and user experience, making it essential to design an Operating System (OS) that can survive ongoing intrusions while maintaining service availability.

Our approach addresses this problem through three key innovations:
1. **Combination of Restoration and Response:** We combine the restoration of files and processes of a service with the ability to apply responses after restoration to withstand reinfection.
2. **Per-Service Responses:** We apply responses that target the compromised services rather than the entire system.
3. **Degraded Mode Operation:** After recovering a compromised service, we apply responses that put the service into a degraded mode, removing some privileges normally needed by the service. This degraded mode is intentional, allowing the system to survive the intrusion by either preventing reinfection or stopping the attacker from achieving their goals, while maintaining the availability of core functions.

We maintain the availability of core functions by ensuring that essential service functions remain operational, even if non-essential functions are disabled. For example, a web server's core function might be to provide read access to the website, while logging accesses is non-essential. By removing write access to the file system, we degrade the service’s state (i.e., it cannot log anymore), but we maintain its core function. We have developed a cost-sensitive response selection process where administrators describe policies consisting of cost models for responses and malicious behaviors. Our solution then selects a response that maximizes effectiveness while minimizing its impact on the service based on the policy.

This approach gives administrators time to plan and deploy updates to fix vulnerabilities, and once the system is patched, the responses can be removed, and the system can leave the degraded mode.

### Contributions
- **Novel Intrusion Survivability Approach:** We propose a new approach to withstand ongoing intrusions and maintain the availability of core service functions.
- **Cost-Sensitive Response Selection:** We introduce a cost-sensitive response selection process to help select optimal responses.
- **Linux-Based Prototype:** We develop a Linux-based prototype implementation by modifying the Linux kernel, systemd, CRIU, Linux audit, and snapper.
- **Evaluation:** We evaluate our prototype by measuring the effectiveness of the responses applied, the ability to select appropriate responses, the availability cost of checkpoint and restore, the overhead of our solution, and the stability of degraded services.

### Outline
- **Section 2:** Review of the state of the art on intrusion recovery and response systems.
- **Section 3:** Overview of our approach and the scope of our work.
- **Section 4:** Specification of the requirements and architecture of our approach.
- **Section 5:** Description of the cost-sensitive response selection process.
- **Section 6:** Details of the prototype implementation.
- **Section 7:** Evaluation of the prototype.
- **Section 8:** Discussion of limitations.
- **Section 9:** Conclusion and future work.

## 2. Related Work
Our work is based on the concept of survivability, specifically focusing on intrusion survivability. We balance the availability of vulnerable service functionalities with the associated security risks. This section reviews existing work on intrusion recovery and response systems.

### 2.1 Intrusion Recovery Systems
Intrusion recovery systems [23, 27, 34, 71, 74] focus on restoring system integrity by recovering legitimate persistent data. Most approaches, except SHELF [74] and CRIU-MR [71], do not preserve availability as they force a system shutdown during the restore procedure or do not record the state of processes. Additionally, they log all system events, generating gigabytes of logs daily, leading to high storage costs.

SHELF [74] and CRIU-MR [71] are most related to our work. SHELF recovers the state of processes and identifies infected files using a log of system events. During recovery, it quarantines infected objects by freezing processes or forbidding access to files. However, SHELF removes this quarantined state upon restoration, allowing potential reinfection. In contrast, our approach applies responses after restoration to prevent reinfection or limit the impact of a reinfected service.

CRIU-MR restores infected systems running within a Linux container. When an Intrusion Detection System (IDS) notifies CRIU-MR of an infection, it checkpoints the container’s state, identifies malicious objects, and restores the container while omitting the restoration of malicious objects. Unlike other approaches, CRIU-MR uses a checkpoint followed by a restore to remove malicious objects. However, it does not prevent reinfection or allow the system to withstand a reinfection since vulnerabilities are still present.

### 2.2 Intrusion Response Systems
Intrusion response systems [5, 20, 62] focus on applying responses to limit the impact of an intrusion. Prior work has focused on modeling intrusion damages or response costs to select responses, using directed graphs, attack graphs, or attack defense trees. Shameli-Sendi et al. [62] use Multi-Objective Optimization (MOO) methods to select optimal responses based on these models.

A main limitation of these approaches is that they apply system-wide or coarse-grained responses, affecting every application in the OS. Our approach is more fine-grained, selecting and applying per-service responses that only affect the compromised service. Moreover, these approaches cannot restore a service to a sane state, whereas our approach combines restoration and cost-sensitive per-service responses.

Huang et al. [28] proposed a related approach that mitigates the impact of waiting for patches when a vulnerability is discovered. Their system is not triggered by an IDS but by the discovery of a vulnerability. They instrument or patch vulnerable applications to avoid executing vulnerable code, losing some functionality (similar to a degraded state). They generate workarounds to minimize the cost of losing functionality by reusing error-handling code. In contrast, our approach does not assume any prior knowledge of vulnerabilities and does not modify applications.

## 3. Problem Scope
This section provides an overview of our approach (illustrated in Figure 1), describes our threat model, and outlines the assumptions that narrow the attack scope.

### 3.1 Approach Overview
Our research focuses on intrusion survivability, starting when an IDS detects an intrusion in a service. Our approach involves the following steps:

- **Recovery:** Restoring the state of infected files and processes while minimizing the loss of known legitimate and non-infected data. We do not require a system reboot and limit the availability impact on the service.
- **Response:** Applying actions to remove privileges, isolate components of the system from the service, or reduce resource quotas (e.g., CPU or RAM) of one service. The goal is to prevent reinfection or withstand a reinfection by stopping attackers from achieving their goals (e.g., data theft) after the recovery. This may place the service in a degraded mode, as some functions might no longer have the required privileges or limited access to resources.
- **Policies:** We apply appropriate responses that do not disable core functions (e.g., the ability to listen on port 80 for a web server). To refine the notion of core functions, we rely on policies provided by administrators, developers, or maintainers. These policies specify the cost of losing specific privileges and the cost of a malicious behavior exhibited by an intrusion. We designed a process to select cost-sensitive responses based on these policies.

![High-level overview of our intrusion survivability approach](Figure 1: High-level overview of our intrusion survivability approach)

**In Scope:**
- Service-specific responses
- Fine-grained recovery
- Degraded mode operation
- Cost-sensitive response selection

**Out of Scope:**
- System-wide responses
- Coarse-grained recovery
- Full system shutdowns

By combining these elements, our approach aims to provide a robust and flexible solution for intrusion survivability, ensuring that core service functions remain available even in the face of ongoing intrusions.