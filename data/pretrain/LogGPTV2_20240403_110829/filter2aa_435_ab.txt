### .NET Architecture Overview

#### Common Language Runtime (CLR)
.NET applications are compiled to an intermediate language known as Microsoft Intermediate Language (MSIL) or "IL". The CLR then compiles the IL into machine code, which is executed. This architecture provides extensive tool support, simpler deployment (ending "DLL Hell"), superior scalability, support for multiple programming languages, and a common data type system.

#### ECMA-335
This standard defines the Common Language Infrastructure (CLI), including the Common Language Runtime (CLR).

### Common Language Runtime (CLR)

#### CLR Internals
- **Class Loader**: Loads and initializes classes.
- **IL to Native Compilers**: Compiles MSIL to native code.
- **Code Manager**: Manages the execution of code.
- **Garbage Collector**: Manages memory automatically.
- **Security Engine**: Enforces security policies.
- **Debug Engine**: Supports debugging.
- **Type Checker**: Ensures type safety.
- **Exception Manager**: Handles exceptions.
- **Thread Support**: Manages threading.
- **COM Marshaler**: Interoperates with COM components.
- **Base Class Library Support**: Provides a rich set of libraries.

### Features of the Common Language Runtime
- **Threading and Memory Management**: Manages threads and memory.
- **Eliminates Memory Management Drudgery**: Automatically manages memory.
- **Kills Entire Classes of Bugs**: Prevents issues like memory corruption and reference counting.
- **Auto-Versioning**: Eliminates "DLL Hell".
- **Scalability, Performance, and Reliability**: Improves overall application performance.
- **Fine-Grained Evidence-Based Security**: Provides code access and role-based security.
- **Integrated with Underlying OS**: Works seamlessly with the operating system.
- **No-Touch Deployment**: Uses XCOPY, no registry required.
- **Object Remoting with SOAP**: Supports remote object communication.

### .NET Execution Model
1. **Source Code** in C++, C#, VB, or any .NET language.
2. **Compiler** (e.g., csc.exe, vbc.exe) compiles the source code into an assembly (DLL or EXE).
3. **.NET Assemblies** contain metadata and MSIL.
4. **Operating System Services** and **Common Language Runtime** manage the execution.
5. **JIT Compiler** converts MSIL to native code.
6. **Managed Code** is executed.

### .NET Framework Security Design
- **Managed Code Execution Mode**: Ensures type safety and security.
- **Strong Name Signing**: Provides a unique identity for assemblies.
- **Code Access Security**: Controls permissions.
- **Role-Based Security**: Defines roles and their permissions.
- **Encryption Mechanisms**: Protects data.
- **/GS Option**: For VC++ .NET, enhances security.
- **Isolated Storage**: Provides a secure storage area.

### Managed Code Execution
- **PEVerify**: Verifies the integrity of managed code.
- **NGEN**: Pre-compiles assemblies to native code.
- **Deployment Phases**: Global Assembly Cache (GAC), application directory, download cache.

### Example Code
```csharp
public static void Main(string[] args)
{
    string usr;
    FileStream f;
    StreamWriter w;
    try
    {
        usr = Environment.GetEnvironmentVariable("USERNAME");
        f = new FileStream("C:\\test.txt", FileMode.Create);
        w = new StreamWriter(f);
        w.WriteLine(usr);
        w.Close();
    }
    catch (Exception e)
    {
        Console.WriteLine("Exception: " + e.ToString());
    }
}
```

### Assembly Structure
- **PE Header + MSIL + Metadata + EH Table**: Contains executable and metadata.
- **Module + Class List**: Organizes classes and methods.
- **Policy Manager**: Manages security policies.
- **Host Policy**: Determines host-specific policies.
- **Class Loader**: Loads and initializes classes.
- **Grant Permissions**: Assigns permissions.
- **Vtable + Class Info**: Stores class information.
- **JIT + Verification**: Compiles and verifies code.
- **Native Code + GC Table**: Manages native code and garbage collection.
- **CLR Services**: Provides runtime services.
- **GC**: Garbage collector.
- **Exception Handling**: Manages exceptions.
- **Class Initialization**: Initializes classes.
- **Security**: Enforces security policies.

### Strong Name and Assembly Deployment
- **Compiler**: Generates assemblies.
- **Key**: Used for signing.
- **Sign**: Signs the assembly.
- **Manifest**: Contains assembly metadata.
- **Strong Name**: Provides a unique identity.
- **Signature File**: Stores the signature.
- **References**: References other assemblies.

### Executing .NET Applications
- **CLR Execution Support and Management**:
  - **Class Loader**: Loads and initializes classes.
  - **.NET PE Files (metadata and IL)**: Contains executable and metadata.
  - **CLRâ€™s Virtual Execution Engine**: Manages the execution.
  - **JIT Compiler**: Compiles MSIL to native code.
  - **Managed Native Code**: Executes the compiled code.
  - **Verifier**: Ensures code integrity.

### Comparison with General Windows Programs
- **General PE Program**: Multiple import entries.
- **.NET PE Program**: Single import entry.
- **Metadata iSignature**: Fixed at 0x424a5342 (BSJB).
- **CLR Header Data**: Contains runtime information.
- **Metadata Table Entry**: Stores metadata.
- **Metadata Check Mechanism**:
  - **Static Check**: Performed during compilation (PeVerify.exe).
  - **Dynamic Check**: Performed at runtime (.NET core check).

### Code Modification
- **.NET Round-Tripping**: Allows code modification without detection.
- **Tools Needed**:
  - Re-Sign, StrongName, Remove, ILDecoder, Reflector, sn, ngen, ildasm, ilasm, MegaPuck, CFF Explorer, PEiD, LoadPE, PEInfo, GuidDbg, PEBrowse, dbg, ollydbg, IDA Pro, windbg.

### .NET Framework Rootkits
- **Example**:
  ```csharp
  static void Main(string[] args)
  {
      Console.WriteLine("Hello (crazy) World!");
  }
  ```
- **Reason**: The `WriteLine` method in the .NET framework can be modified, allowing hackers to alter the implementation of .NET languages.
- **Targets**: mscorlib.dll, mscorwks.dll, and other .NET runtime DLLs.

### Creating a New Project
- **Direct Usage**: Use existing tools and frameworks.
- **Run "ymc demo.exe"**: Execute the example program.
- **Filemon**: Monitor file access to see where mscorlib.dll is located.