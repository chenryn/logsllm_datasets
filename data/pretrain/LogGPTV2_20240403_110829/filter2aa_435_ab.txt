34
.NET Architecture Overview
35
35
Common Language Runtime (CLR)
 .NET applications are compiled to a common 
.NET applications are compiled to a common 
language known as Microsoft Intermediate 
language known as Microsoft Intermediate 
Language, or "IL".
Language, or "IL".
 The CLR, then, handles compiling the IL to 
The CLR, then, handles compiling the IL to 
machine language, at which point the program is 
machine language, at which point the program is 
executed.
executed.
 The CLR architecture provides expansive tool 
The CLR architecture provides expansive tool 
support , simpler deployment (
support , simpler deployment (end of "DLL Hell"),
end of "DLL Hell"),
superior scalability, support for multiple 
superior scalability, support for multiple 
programming languages and a common data type 
programming languages and a common data type 
system 
system 
36
36
ECMA
ECMA--335
335
37
37
Common Language Runtime (CLR)
38
38
CLR:
CLR: Internals
Internals
Class Loader
IL to Native
Compilers
Code
Manager
Garbage
Collector
Security Engine
Debug Engine
Type Checker
Exception Manager
Thread Support
COM Marshaler
Base Class Library Support
39
39
Common Language Runtime
Common Language Runtime
Manages running code
Manages running code
••
Threading, Memory management
Threading, Memory management
••
Eliminates memory management drudgery
Eliminates memory management drudgery
••
Kills entire classes of bugs (e.g., memory corruption, 
Kills entire classes of bugs (e.g., memory corruption, 
ref counting)
ref counting)
••
Auto
Auto--versioning
versioning, no more DLL Hell
, no more DLL Hell
••
Scalability, performance, reliability all improve
Scalability, performance, reliability all improve
Fine
Fine--grained evidence
grained evidence--based security
based security
••
Code access + Role
Code access + Role--based
based
••
Integrated with underlying OS
Integrated with underlying OS
••
Security model ensures safety
Security model ensures safety
No
No--touch deployment
touch deployment
••
XCOPY, no registry required
XCOPY, no registry required
Object remoting with SOAP
Object remoting with SOAP
40
40
Source Code
C++, C#, VB or 
C++, C#, VB or 
any .NET 
any .NET 
language
language
csc.exe
csc.exe or 
or vbc.exe
vbc.exe
Compiler
Compiler
Assembly
DLL or EXE
DLL or EXE
.Net Assemblies
.Net Assemblies
41
41
VB
VB
Source 
Source 
code
code
Compiler
Compiler
C++
C++
C#
C#
Compiler
Compiler
Compiler
Compiler
Operating System Services
Operating System Services
Common Language Runtime
Common Language Runtime
JIT Compiler
JIT Compiler
Native Code
Native Code
Managed
Managed
code
code
Assembly
Assembly
IL Code
IL Code
Assembly
Assembly
IL Code
IL Code
Assembly
Assembly
IL Code
IL Code
.Net Execution Model
.Net Execution Model
42
42
.NET Framework
.NET Framework安全设计
安全设计
43
43
.NET Framework
.NET Framework安全设计
安全设计
Managed Code
Managed Code执行模式
执行模式
型别安全检查
型别安全检查
共享名称签署
共享名称签署
程式码存取安全
程式码存取安全
角色架构安全
角色架构安全性设计
性设计
加密机制
加密机制
/GS Option
/GS Option--
--适用于
适用于VC++ .NET
VC++ .NET
隔離储存区
隔離储存区
44
44
Managed Code 
Managed Code 执行模式
执行模式
PEVerify
PEVerify
NGEN
NGEN
部署阶段
部署阶段
GAC, 
GAC, 
app. directory, 
app. directory, 
download cache
download cache
public static void Main(String[] args )
{ String usr; FileStream f; StreamWriter w;
try {
usr=Environment.GetEnvironmentVariable("USERNAME");
f=new FileStream(“C:\\test.txt",FileMode.Create);
w=new StreamWriter(f);
w.WriteLine(usr);
w.Close();
} catch (Exception e){
Console.WriteLine("Exception:"+e.ToString());
} }
编译器
编译器
开发阶段
开发阶段
public static void Main(String[] args )
{ String usr; FileStream f; StreamWriter w;
try {
usr=Environment.GetEnvironmentVariable("USERNAME");
f=new FileStream(“C:\\test.txt",FileMode.Create);
w=new StreamWriter(f);
w.WriteLine(usr);
w.Close();
} catch (Exception e){
Console.WriteLine("Exception:"+e.ToString());
}
}
原始码
原始码
Assembly
Assembly
PE header + MSIL + 
PE header + MSIL + 
Metadata + EH Table
Metadata + EH Table
执行阶段
执行阶段
组件资讯
组件资讯
模组
模组
+ 
+ 類别清单
類别清单
Policy 
Policy 
Manager
Manager
Host
Host
Policy
<CodeGroup class="UnionCodeGroup"
version="1"
PermissionSetName="FullTrust"
Class
Class
Loader
Loader
授与权限
授与权限
Vtable
Vtable ++
Class info
Class info
JIT +
JIT +
verification
verification
Native code
Native code
+ GC table
+ GC table
CLR 
CLR 服务
服务
GC
GC
Exception
Exception
Class init
Class init
Security
Security
((组件
组件))
((類别
類别))
((方法
方法))
Assembly
Assembly
Loader
Loader
Evidence
Evidence
权限要求
权限要求
45
45
组件部署与
组件部署与强名称
强名称
编译器
编译器
密钥
密钥
签署
签署
资讯清单
资讯清单
PK=34 e2 5c
PK=34 e2 5c…
…
强式名称
强式名称
签名档
签名档
编译器
编译器
资讯清单
资讯清单
參照
參照::MyDLL
MyDLL,,
PK=34 e2 5c
PK=34 e2 5c…
…
Main
Main
MyDLL
MyDLL
11
44
33
22
46
46
执行
执行.NET
.NET应用程式
应用程式
CLR
CLR提供之执行支援与管理
提供之执行支援与管理
類别载入
類别载入(Class Loader)
(Class Loader)
.NET PE Files(metadata 
.NET PE Files(metadata 与
与IL)
IL)
CLR
CLR’’s Virtual Execution Engine
s Virtual Execution Engine
JIT
JIT编译器
编译器
Managed Native Code
Managed Native Code
Verifier
Verifier
JIT
JIT
47
47
一般
一般windows
windows程式与
程式与.net
.net程式的
程式的
外观比较
外观比较
48
48
一般的
一般的PE
PE程式
程式
49
49
Import session
Import session可以看到多个
可以看到多个entry
entry
50
50
.net
.net程式的
程式的PE
PE内容
内容
51
51
Import session
Import session只有一个
只有一个entry
entry
52
52
Metadata 
Metadata iSignature
iSignature
固定为0x424a5342  (BSJB)
53
53
CLR 
CLR 表头资料
表头资料
54
54
Metadata
Metadata的
的table entry
table entry
55
55
Metadata check
Metadata check机制
机制
 Static check
Static check
•• Compiler
Compiler阶段
阶段
•• 特别程式验测
特别程式验测((PeVerify.exe
PeVerify.exe))
 Dynamical Check
Dynamical Check
•• .net core check 
.net core check 
 Static check
Static check可修改后绕过
可修改后绕过
 骇客常常制造可执行但
骇客常常制造可执行但metadata check 
metadata check 
failed
failed的程式來扰亂
的程式來扰亂
56
56
Code modify
Code modify
 由于
由于.net 
.net 可进行
可进行round
round--tripping
tripping操作
操作. . 所
所
以
以code modify
code modify可以神不知鬼不觉的进行
可以神不知鬼不觉的进行
 对于混合编辑的程式就失效了
对于混合编辑的程式就失效了
•• 需配合
需配合Refflector
Refflector与
与IDA Pro 
IDA Pro 一起
一起
•• 没有
没有round
round--tripping
tripping的特性
的特性
57
57
debug
debug
58
58
CLR stalking
CLR stalking
 事前准备
事前准备
•• Windbg
Windbg, , symbol(pdb
symbol(pdb))
•• VisualStudio
VisualStudio 2005
2005
•• .net framework 2.0 runtime RTM
.net framework 2.0 runtime RTM
•• 一个
一个.net
.net小程式
小程式
59
59
ld kernel32
.chain 
检查DLL chain
Sxe ld:mscorwks
当load时中断
60
60
bp mscoree!_CorExeMain
Net 核心函數 CorExeMain中断
61
61
Sxe ld:mscorwks
当load mscorwks时中断
62
62
中断于 mscorwks的EEStartupHelper
63
63
中断于 FinalizerThreadStart
64
64
中断于 ClassLoader
65
65
中断于 CallDescr
中断于 CallDescrWorker
66
66
bp mscorwks!Assembly::GetEntryPoint
重要函數GetEntryPoint
67
67
CLR init 
CLR init 运作
运作
 mscoree!_CorExeMain
mscoree!_CorExeMain
•• Mscoree
Mscoree载入
载入engine
engine
 Mscorwks!_CorExeMain
Mscorwks!_CorExeMain
 Mscorwks!EEStartupHelper
Mscorwks!EEStartupHelper
 Mscorwks!SetupThread
Mscorwks!SetupThread
•• Mapping OS thread 
Mapping OS thread 与
与CLR thread
CLR thread
 Mscorwks!ClassLoader
Mscorwks!ClassLoader
 Mscorwks!CallDescr
Mscorwks!CallDescr
 Mscorwks!CallDescrWorker
Mscorwks!CallDescrWorker
 mscorwks!Assembly::GetEntryPoint
mscorwks!Assembly::GetEntryPoint
68
68
.NET Framework Rootkits
69
69
Tool you Need
Tool you Need
Re
Re--Sign
Sign
StrongName
StrongName
Remove
Remove
ILDecoder
ILDecoder
Reflector
Reflector
sn
sn
ngen
ngen
ildasm
ildasm
ilasm
MegaPuck ilasm
MegaPuck
CFF 
CFF 
explorer
explorer
PEiD
PEiD
LoadPE
LoadPE
PEInfo
PEInfo
GuidDbg
GuidDbg
PEBrowse
PEBrowse
dbg
dbg
ollydbg
ollydbg
IDA Pro
IDA Pro
windbg
windbg
70
70
.NET Framework 
.NET Framework Rootkits
Rootkits
 程式片断
程式片断
static void 
static void Main(string
Main(string[] 
[] args
args))
{{
Console.WriteLine("Hello
Console.WriteLine("Hello (crazy) World!");
(crazy) World!");
}}
 执行结果
执行结果
71
71
.NET Framework 
.NET Framework Rootkits
Rootkits
 原因
原因
•• .NET framework
.NET framework的
的WriteLine
WriteLine被偷改了
被偷改了
 也就是說
也就是說, , 骇客只要有技术
骇客只要有技术, , 就可以更
就可以更
改
改.NET
.NET语言的实作
语言的实作
•• Mscorlib.dll
Mscorlib.dll
•• Mscoree.dll
Mscoree.dll
•• Mscorwks.dll
Mscorwks.dll
•• Mscorxxxxx.dll
Mscorxxxxx.dll 都是好目标
都是好目标
72
72
新增一个专案
新增一个专案
73
73
直接拿來用
直接拿來用
74
74
Run  
Run  ““ymc
ymc demo
demo””.exe
.exe
75
75
Filemon
Filemon
76
76
看看
看看mscorlib.dll
mscorlib.dll在那
在那