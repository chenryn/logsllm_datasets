to apps and should not blindly trust any data sent from an app.
However, we observed that many system services not only trust
app-supplied data from Managers (wrappers provided by SDK),
but also misplace sensitive input validations in the Managers code.
For example, Figure 3 illustrates a mistaken trust of app-supplied
data. Since apps can bypass the Managers and forge their inputs
to system services (address and prefixLength in this example), the
security check does not operate as expected. This allows any app
to insert new VPN server addresses into the system, which can
potentially redirect all of the device’s traffic to an attacker without
authorization.
Weakened Validations In Customized System Images. In the
Android ecosystem, system services are often customized to pro-
vide added value. During the process of customization, the input
Figure 4: An input validation in Android Audio Service is
removed in customized image.
validations may become weakened. Within the 4 customized images
we studied, 35 system services are modified, with 41 input valida-
tions affected. Figure 4 depicts an example of weakened sensitive
input validation. Since the customized image of Xiaomi removed the
check before invoking setRingerMode(), any app is free to change
the ringer mode arbitrarily (e.g., silent or vibrate).
On the other side, over 203 new customized services are in-
troduced in these images, together with 326 new sensitive input
validations. We find even more suable and interesting confusion
cases. For instance, shown in Figure 5, Qualcomm introduces a new
service called CNEService. Although its privileged interfaces are
designed to be available to only its vendor-supplied system apps,
it cannot be guaranteed at all (i.e., the packageName parameter is
completely untrusted).
4 METHODOLOGY
This section introduces our methodology to discover insecure input
validations in Android. We will give an insight that guides our
(cid:54)(cid:72)(cid:85)(cid:89)(cid:76)(cid:70)(cid:72)(cid:86)(cid:36)(cid:83)(cid:83)(cid:3)(cid:38)(cid:82)(cid:71)(cid:72)(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)(cid:3)(cid:41)(cid:85)(cid:68)(cid:80)(cid:72)(cid:90)(cid:82)(cid:85)(cid:78)(cid:37)(cid:76)(cid:81)(cid:71)(cid:72)(cid:85)(cid:3)(cid:3)(cid:3)(cid:3)(cid:44)(cid:51)(cid:38)(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)(cid:3)(cid:46)(cid:72)(cid:85)(cid:81)(cid:72)(cid:79)(cid:38)(cid:79)(cid:76)(cid:72)(cid:81)(cid:87)(cid:3)(cid:11)(cid:88)(cid:81)(cid:87)(cid:85)(cid:88)(cid:86)(cid:87)(cid:72)(cid:71)(cid:12)(cid:3)(cid:55)(cid:85)(cid:88)(cid:86)(cid:87)(cid:72)(cid:71)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)(cid:54)(cid:39)(cid:46)(cid:3)(cid:48)(cid:68)(cid:81)(cid:68)(cid:74)(cid:72)(cid:85)(cid:54)(cid:72)(cid:85)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:48)(cid:68)(cid:81)(cid:68)(cid:74)(cid:72)(cid:85)(cid:56)(cid:81)(cid:87)(cid:85)(cid:88)(cid:86)(cid:87)(cid:72)(cid:71)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3)(cid:258)(cid:258)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3)Android SDKpublic (cid:258) addAddress( InetAddress (cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86), int (cid:83)(cid:85)(cid:72)(cid:73)(cid:76)(cid:91)(cid:47)(cid:72)(cid:81)(cid:74)(cid:87)(cid:75)(cid:3)){(cid:258) securityCheck( (cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:3),(cid:83)(cid:85)(cid:72)(cid:73)(cid:76)(cid:91)(cid:47)(cid:72)(cid:81)(cid:74)(cid:87)(cid:75)(cid:3));    return getService().addVpnAddress  ( (cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86).getHostAddress(),  (cid:83)(cid:85)(cid:72)(cid:73)(cid:76)(cid:91)(cid:47)(cid:72)(cid:81)(cid:74)(cid:87)(cid:75)(cid:3)(cid:3));  }(cid:258)}Android Frameworkpublic (cid:258)  addVpnAddress( String (cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86), int (cid:83)(cid:85)(cid:72)(cid:73)(cid:76)(cid:91)(cid:47)(cid:72)(cid:81)(cid:74)(cid:87)(cid:75)(cid:3)){     (cid:258)Android APPRPCRPCpublic (cid:258) setRingerModeExternal( (cid:85)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:80)(cid:82)(cid:71)(cid:72)(cid:3),(cid:70)(cid:68)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3)) {if( wouldeToggleZenMode( (cid:85)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:80)(cid:82)(cid:71)(cid:72)(cid:3))&&  checkCallerIsSystemOrSamePackage( (cid:70)(cid:68)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3))&&  checkAccessPolicy( (cid:70)(cid:68)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3))){throw new SecurityException(...)}setRingerMode( (cid:85)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:80)(cid:82)(cid:71)(cid:72)(cid:3),(cid:70)(cid:68)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3),(cid:258))public (cid:258) setRingerModeExternal( (cid:85)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:80)(cid:82)(cid:71)(cid:72)(cid:3),(cid:70)(cid:68)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3)){setRingerMode( (cid:85)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:80)(cid:82)(cid:71)(cid:72)(cid:3),(cid:70)(cid:68)(cid:79)(cid:79)(cid:72)(cid:85)(cid:3),(cid:258))(cid:258)(cid:258)}}(a) Code in AOSP(b) Code  customized by XiaomiAndroid FrameworkAndroid FrameworkWe leverage the inherent structural characteristics in input vali-
dations. Specifically, different from general branching statements,
an input validation not only compares the input with other data,
but also terminates its normal execution immediately when the
validation fails. For example, a SecurityException can be thrown as
a termination action. Figure 7 illustrates two input checks from
the Android framework, in which one (a) is an input validation
and the other (b) is a normal branching. In Figure 7.(a), the system
service verifies the uid of the calling app, and throws an exception
to stop the execution of the system methods when the validation
fails. In comparison, Figure 7.(b) only aims to handle different kinds
of input and select the corresponding handler method.
Based on this observation, we need to understand which set of
termination actions are typically taken if a validation fails. To reiter-
ate, the first requirement of input validation is that the input must
be propagated to a comparison statement through data flow and
compared against some pre-configured values or results dynami-
cally retrieved from other APIs. Then, different actions are taken
based on the comparison result. After analyzing a handful of real-
world input validations in Android, we summarize the following
four kinds of termination actions:
• Throw exception. A straightforward way to show that the
client fails in the input validation is throwing a specific excep-
tion, such as SecurityException and IllegalArgumentException.
• Return constant. System services use some pre-defined
constants to indicate that caller fails in input validation,
which will be returned in the termination actions.
• Log and return. Logging information is useful in monitor-
ing the running of the system. In termination actions, they
commonly log some information about the illegal input and
then return.
• Recycle and return. In some cases, before the exit of execu-
tion, public interfaces need to recycle the previous allocated
resources.
In some cases, some input validations are simply data format
checks, e.g., a Null object check. Since this kind of validation does
not lead to serious security consequences (other than perhaps crash-
ing the system service if missing), we choose to exclude this kind of
validations in our framework and focus on other non-DoS-related
vulnerabilities, e.g., privilege escalation or privacy breach.
By recognizing the termination actions, we can identify input
validations with the following four steps: First, for a given system
method, we obtain all conditional statements in the method body.
Second, we identify the conditions that involve variables related to
the method input (via data flow analysis). Third, we apply the filter
to eliminate data format related validations. Finally, our analysis en-
sures that each recognized validation has a termination action. Our
results described in §6.1 show that this approach can identify 800
input validations in Android services with only 71 false positives.
4.3 Learning Sensitive Input Validations
Unfortunately, no structural patterns can tell sensitive input valida-
tions from other less sensitive ones. A precise and complete analysis
would require inferring the semantic significance of the input vari-
ables in terms of how they are processed in the service and what
kinds of operations they authorize. We consider this analysis to
Figure 5: An input validation in system service which trusts
the inputs from less privileged apps.
system design, the overall picture of our system, followed by each
component in detail.
4.1 Insights and Workflow
In an ideal world where we have the labels of all the sensitive in-
puts (parameters of public service methods), all we need to do is to
identify the absence of validations against those inputs. In practice,
unfortunately, such labels are never provided by developers and
at best have to be inferred which is generally an open problem.
Therefore, we take a different approach — instead of relying on
identifying all sensitive inputs and their missing validations, we can
look for existing sensitive input validations that are misplaced or
incomplete, which is a much more tractable problem. The assump-
tion is that the probability that a sensitive input is never validated
anywhere in the entire Android codebase is small, and hence we
argue that locating existing sensitive input validations and their
insecure uses can still capture a significant fraction of the related
vulnerabilities. We admit that this assumption is difficult to validate
as the ground truth of the total number of vulnerabilities is hard to
obtain.
Invetter operates in three steps, as illustrated in Figure 6. First,
Invetter thoroughly extracts system services along with their public
interfaces from a given Android image, and recognizes all input
validations using a structural analysis. Second, these extracted vali-
dations are passed into our learning module to recognize a subset
of them that are “sensitive input” validations. It is worth noting
that even though locating existing sensitive input validations is a
simpler problem than identifying all sensitive inputs in the world,
the very problem is still challenging. This is because (as discussed
in § 1), sensitive input validations in Android are unstructured,
ill-defined, and fragmented, and no simple structural patterns can
capture them. Finally, we look for insecure input validations based
on our observations introduced in §3. These reported cases are
then considered as candidate vulnerabilities, which will be further
verified by security analysts.
4.2 Extracting Input Validation Structures
Since input validation is the centerpiece of our analysis, we need
to automatically identify and study input validations in Android
framework, which is a challenging problem; this is because they
are neither performed through pre-defined system interfaces, nor
identifiable via fixed APIs like permission checks.
if (isSystemPackageName( (cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3))){}Android FrameworkICNEManager.updatePolicy((cid:258) , (cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3));public int(cid:3)updatePolicy( (cid:258), String (cid:83)(cid:68)(cid:70)(cid:78)(cid:68)(cid:74)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3))  { // do Sensitive Operation(cid:258)(cid:258)}Vendor APPRPCFigure 6: The overall architecture of Invetter.
Figure 9). They are thus likely to be positively correlated in terms
of their sensitiveness. Our detailed approach is introduced below.
4.3.1 Grouping input validations for association rule mining. One
important requirement in association rule mining is that we need to
observe enough samples/occurrences of any given variable. How-
ever, if we treat each unique variable name separately, we may end
up with cases such as variables flag1 and flag2 which each appear
only one time respectively in the code base, disallowing effective
association rule mining. Our intuition is that if the variables share
a common term (or prefix/suffix), they must be semantically related
and we can simply group them together. To do so, we go through a
series of steps:
Word splitting and stemming. Normally input parameters are
letter-case separated words. For example, ‘componentName’ can
be separated as ‘component’ and ‘name’, and ‘groupOwnerAddress’
can be separated as ‘group’, ‘owner’, and ‘address’. Based on this
approach, we split such long words into separated words. Further-
more, for each separated word, Invetter attempts to further identify
a single common root or base word. For example, words like ‘types’
and ‘subtype’ stemmed from the base word ‘type’, and the prefix
‘m’ of words ‘mflag’ and ‘mname’ should be removed also. To find
the base word, Invetter splits words by iteratively matching the
maximum length word in WordNet [19] until the input word cannot
be further split, and discards the remaining. After this step, Invetter
obtains the root words of each input parameter.
Variable name normalization. We can obtain a normalized name
by merging the root words of each input parameter. However, even
though word splitting and stemming are applied, meaningless quali-
fiers are unavoidable, skewing the final name. For example, variable
‘linkaddress’ is split into ‘link’ and ‘address’, while both ‘address’
and the qualifier ‘link’ are treated as root words. To remove the qual-
ifiers, Invetter calculates the occurrence frequency of each pair of
words. If two words often occur simultaneously, we only retain the
more popular word. After this step, we can group variables based
on their normalized names, which will facilitate the association
rule mining.
Learning new sensitive input validations. In total, we obtained
4.3.2
over 1132 input validation groups after the above step. However,
without a priori knowledge, it is not clear whether a validation
involves any sensitive input. Fortunately, we observed that devel-
opers tend to enforce similar input validations in adjacent places.
For example, in Figure 9, various sensitive input validations are en-
forced nearby. Thus, we can figure out a small number of sensitive
input validation groups, and discover other related groups.
Figure 7: Code snippets of input checks within Android
framework.
be infeasible as it requires a significant knowledge base describing
what operations in the system are sensitive, which itself is difficult
to obtain.
We take a drastically different approach through machine learn-
ing. The idea is to take advantage of the fact we can label a much
smaller set of sensitive input validations as training samples, and
have the machine learning automatically learn the rest.
We first present a strawman approach, which does not quite
work. In Figure 5, we illustrate a simple example where a sensitive
variable “packageName” is validated to check the identity of the
caller package. One might imagine a natural language processing
based technique to infer the meaning/sensitiveness of an English
word. However, Android framework manages plenty of system
resources, and uses a diverse set of variable names to represent dif-
ferent pieces. It is almost impossible to determine the sensitiveness
of such domain-specific names without a complete understanding
of Android framework.
Instead, Invetter chooses to use the association rule mining tech-
nique [28] to automatically discover additional input validations
that are likely also sensitive based on their co-occurrence with
known sensitive input validations. The intuition here is sensitive
input validations are often co-located in the same service meth-
ods. Taking the “packageName” and “uid” as an example, Android
framework often uses them together to verify an app’s identity (See
Structural AnalysisLearning based RecognitionSystem ImagesInput Validation Sensitive Input ValidationVulnerabilityDiscoveryVulnerabilityReportInsecure InputValidation Modelboolean securityViolation =  ai.uid != 0&& ai.uid != Process.SYSTEM_UID   if (securityViolation) {   String msg = "Requesting code from " + ai.packageName+ " (with uid " + ai.uid + ")";  throw new SecurityException(msg);} String action = intent.getAction(); if (ACTION_PASSWORD_CHANGED.equals(action)) {       onPasswordChanged(context, intent);} else if (ACTION_PASSWORD_FAILED.equals(action)) {       onPasswordFailed(context, intent);} else if (ACTION_PASSWORD_SUCCEEDED.equals(action)) {       onPasswordSucceeded(context, intent);} else if  ...(a) Input Validation(b) Functionality check ( not an input validation)Figure 9: An example for nearby input validations.
Figure 8: The Initial seeds and expanded groups for recog-
nizing sensitive input validations.
Figure 10: Types of security flaws in sensitive input valida-
tion.
Seeds of sensitive input validations. As described in §2.2, only
the input validations which verify the user identity, or restrict the
usage of sensitive resources, are considered sensitive. Thus, we
curated the list of input validation groups in Figure 8 as the initial
seeds.
Association rule mining. We expand the sensitive input valida-
tion sets by conducting the association rule mining. First, we calcu-
late the distance between each pair of input validations. Specifically,
if two input validations occur on two basic blocks with a common
edge, we consider these input validations adjacent to each other.
Then, if two input validation groups contain three adjacent pairs,
we associate these groups together (number chosen empirically).
Finally, starting with the seeds, we collect all the associated groups
iteratively until no more new group can be discovered. Figure 8
shows the partial list after expansion. As we can see, the technique
is effective in discovering a large number of groups of sensitive
input validations.
4.4 Vulnerability Discovery
Invetter operates from two independent perspectives: by searching
for incorrect/insecure sensitive input validations in each Android
system image; and by comparing inconsistent security enforcement
between different images. In this section, we first describe our
intra-image analysis followed by the inter-image analysis.
Intra-image analysis. Based on our observation in §3, we rea-
4.4.1
son about other possible incorrect assumptions that affect sensitive
input validation. We summarize them as illustrated in Figure 10.(a)
and (b).
Incorrectly trusting app-supplied data. Some services validate
the caller identity based on input parameters that can be easily
manipulated by untrusted apps. Clearly, the input parameters can
be originated from untrusted apps and cannot be trusted for sensi-
tive input validation. Based on the expanded input validations in
Figure 8, an sensitive input validation is considered vulnerable if
it verifies an app-supplied sensitive data, and our learning based
sensitive input validation analysis reveals that it is applied to check
the identity of the caller.
Incorrectly trusting code in the app process. Unlike permis-
sion checks which never occur in the application process itself,
input validations are actually quite often misplaced due to their
unstructured nature. Specifically, we find that the collection of
Managers in the Android SDK (see Figure 2) that run inside the