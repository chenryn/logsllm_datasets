tained in the encrypted payload.
Assuming an analyst is unable to provide correctly
signed package manifests for future dates, this payload
provides a secure random value unpredictable to an ana-
lyst, but generatable in advance by the payload’s author
(because the author knows the secret HMAC key). Such
a random value can be used as a seed in a domain genera-
tion scheme similar to that of the Conﬁcker worm.
Data exﬁltration The data exﬁltration payload searches
for sensitive data (we looked for credit card numbers), and
returns results in encrypted form. To avoid analysis by
correlating input with the presence or absence of output,
the payload generates some output regardless of whether
sensitive data is present in the ﬁle.
Timebomb This payload implements key cloaked func-
tionality necessary for a timed DDoS attack that keeps the
target and time secret until the attack begins. Like the do-
main generation payload, it uses signed package release
manifests to establish an authenticated current timestamp.
Once the payload has veriﬁed the signature on the mani-
fest, it extracts the date. If the resultant date is later than
a value encoded in the encrypted payload, it releases the
time-sensitive information as output. This payload out-
puts a secret AES key contained in the encrypted payload.
The key can be used to decode a ﬁle providing further in-
structions, such as the DDoS target, or a list of commands.
5.4 Evaluation
We tested our implementation on a Dell Optiplex 780 with
a quad-core 2.66 Ghz Intel Core 2 CPU with 4 GB of
RAM running Linux 2.6.30.5. We used a ST Microelec-
tronics ST19NP18 TPM, which is TCG v1.2 compliant.
Elapsed wallclock times for protocol phases are indicated
in Table 4. We used 2048-bit RSA encryption and 128-bit
AES encryption. The malicious payloads varied in size
from 2.5 KB for the command and control to 0.5 KB for
the text search.
Costs for infecting a machine
Action
Infected Platform generates binding key
Infected Platform generates AIK and credential
request
Malware Distribution Platform processes re-
quest
Infected Platform certiﬁes key
Infected Platform decrypts credential
Malware Distribution Platform veriﬁes proof
Total
Per-payload execution statistics
MLE setup
Time to decrypt payload
Command and Control
DDoS Timebomb
Text Search
Time system appears frozen
Total MLE execution time
Time (s)
19.4 ± 11.2
31.6 ± 17.9
0.07 ± 0
5.9 ± 0.012
6.0 ± 0.010
0.04 ± 0
63.1 ± 22.2
Time (s)
1.05 ± 0.01
3.07 ± 0.01
0.008 ± 0
0.008 ± 0
0.004 ± 0
3.22
4.27
Table 4: Performance of different phases. Error bars are stan-
dard deviations of sample sets. A standard deviation of “0” indi-
cates less than 1 ms. Statistics for the protocol up to late launch
were calculated from 10 protocol cycles run one immediately af-
ter the other, while late launch payload statistics were calculated
from 10 other runs per payload, one immediately after the other.
The main performance bottleneck is TPM operations,
especially key generation. We veriﬁed that the signiﬁcant
and variable duration of key generation was directly due
to underlying TPM operations. The current performance,
one minute per machine infection, allows rapid propaga-
12
Program
tpm genkey
aik gen
tpm certify
infected
platform
Purpose
Generates the binding key and output key blob to a ﬁle.
Generates an AIK and accompanying certiﬁcation re-
quest. Outputs key blob and request to ﬁles.
Certiﬁes the binding key under the AIK.
Two modes: proof which generates a proof of authen-
ticity to convince the Malware Distribution Platform to
distribute an encrypted payload and payload which
loads the binding key and decrypts the payload.
Two modes: req which handles a request from the In-
fected Platform and returns an encrypted credential and
proof which validates a proof of authenticity from the
Infected Platform
Correspondence to Protocol
Infection Keygen step 1
Infection Keygen steps 2– 4
Infection Proof step 5
proof: Infection Proof steps 1–4 and
6, payload: Infection Hidden Exe-
cute steps 1–3
req: Malware Distribution Platform
Certiﬁcate Handler, proof: Mal-
ware Distribution Platform Payload
Delivery
Table 3: Programs that comprise the key establishment part of the implementation and their functions.
tion of malware (hosts can be compromised concurrently).
Performance is most important for operations on the
Malware Distribution Platform, which may have to ser-
vice many clients in rapid succession, and in the ﬁnal
payload decryption, as it occurs in late launch with the op-
erating system suspended. The payload decryption must
occur per payload execution, which in our motivating sce-
narios will be at least daily. The slowest operation on the
Malware Distribution Platform can handle tens of clients
per second with no optimization whatsoever.
We provide several numbers that characterize late
launch payload performance. The MLE setup phase of
the Flicker kernel module involves allocation of memory
to hold an MLE and conﬁgures MLE-related structures
like page tables used by SINIT to measure the MLE. The
Flicker module then launches the MLE, which in our case
contains the Infection Payload Loader PAL. This PAL ﬁrst
decrypts the payload, which occupies most MLE execu-
tion time for our experiments. The payload runs, the MLE
exits, and the kernel module restores prior system state.
The late launch environment execution can be as long
as 3.2 s, which is long enough that an alert user might no-
tice the system freeze (since the late launch environment
suspends the OS) and become suspicious. Then again,
performance variability is a hallmark of best-effort operat-
ing systems like Linux and Windows. The rootkit control
program can use heuristics to launch the payload when
the platform is idle or the user is not physically present.
Payload decryption performance is largely based on the
speed of asymmetric decryption operations performed by
the TPM. The use of TPM key blobs here involves two
asymmetric decryption operations, one to allow use of
the private portion of the key blob (which is stored in
encrypted form), and one to use this private key for de-
crypting an encrypted symmetric key. Symmetric AES
decryption took less than 1% of total payload decryption
time in all cases, and is unlikely to become more costly
even with signiﬁcant increases in payload size: We found
that a 90 KB AES decryption with OpenSSL (36× larger
than our largest payload), took only 650 microseconds.
6 Defenses
We now examine defenses against the threat of using
TPMs to cloak malware. We present multiple potential
directions for combating this threat. In general, we ﬁnd
that there is no clear “silver bullet” and many of the pro-
posed solutions require tradeoffs in terms of the security
or usability of the TPM system.
6.1 Restricting late launch code
One possibility would be to restrict the code that can be
used in late launch. For example, a system could im-
plement a security layer to trap on SENTER instructions.
With recent Intel hardware, a hypervisor could provide
admission control, gaining control whenever SENTER is
issued and protecting its memory via Extended Page Ta-
ble protections. The hypervisor could enforce a range of
policies with its access to OS and user state. For example,
the TrustVisor [39] hypervisor likely enforces a policy to
deny all MLEs since its goal is to implement an indepen-
dent software-based trusted computing mechanism.
Restricting access to the hardware TPM is one of the
best approaches to defending against our attack, but such
a defense is not trivial. Setup and maintenance of this
approach may be difﬁcult for a home or small business
user. Use of a security layer is more plausible in an enter-
prise or cloud computing environment. In that setting, the
complexity centers on policy to check whether an MLE is
permitted to execute in late launch. The most straightfor-
ward methods are whitelisting or signing MLEs. These
raise additional policy issues about what software state to
hash or sign, how to revoke hashes or keys, and how to
handle software updates. Any such system must also log
failed attempts and delay or ban abusive users.
It is possible to use other system software to control ad-
mission to MLEs. SINIT, which itself is signed by Intel,
could restrict admission to MLEs since all late launches
ﬁrst transfer control to SINIT. However, this would re-
13
quire SINIT, which is low-level system software, to en-
force access control policy. It would most likely do this by
only allowing signed MLEs to run. There are then two op-
tions: either MLEs must be signed by a key that is known
to be trusted, or SINIT must also contain code for key
management operations like retrieving, parsing, and vali-
dating certiﬁcates. In the former case, the signing key is
most likely to be from Intel; Intel chipsets can already ver-
ify Intel-signed data [12]. However, this makes third party
development more difﬁcult; code signing is most effective
when updates are infrequent and the signing party is the
code developer. For late launch MLEs, it is quite possi-
ble that neither will be the case. The latter case, having
SINIT manage keys, is likely to be difﬁcult to imple-
ment, especially since SINIT cannot use OS services.
6.2 TPM Manufacturer Cooperation
A malware analyst could defeat our attack with the co-
operation of TPM manufacturers. Our attack uses keys
certiﬁed to be TPM-controlled to distinguish communi-
cation with a legitimate TPM from an analyst forging re-
sponses from a TPM. A TPM manufacturer cooperating
with analysts and certifying illegitimate EKs would defeat
our attack, by allowing the analyst to create a software-
controlled late-launch environment. However, any leak of
a certiﬁcate for a non-hardware EK would undermine the
security of all TPMs (or at least all TPMs of a given man-
ufacturer). Malware analysis often occurs with the coop-
eration of government, academic, and commercial institu-
tions, which raises the probability of a leak.
Alternately, a manufacturer might selectively decrypt
data encrypted with a TPM’s public EK on-line upon re-
quest. Such a service would compromise the Privacy CA
protocol at the point where the Privacy CA encrypts a
credential with the EK for a target TPM-containing plat-
form. The EK decryption service would allow an analyst
to obtain a credential for a forged (non-TPM-generated)
AIK. This is less dangerous than the previous situation,
as now only parties that trust the Privacy CA (in our case
the Malware Distribution Platform) could be mislead by
the forged AIK. However, this approach also places ad-
ditional requirements on the manufacturer, in that it must
respond to requests for decryption once per Malware Dis-
tribution Platform, rather than once per analyst. Addition-
ally, the EK decryption service has potential for abuse by
an analyst if legitimate Privacy CAs are deployed.
6.3 Attacks on TPM security
Cloaking malware with the TPM relies on the security of
TPM primitives. A compromise of one or more of these
primitives could lead to the ability to decrypt or read an
encrypted payload. For instance, the exclusive access of
late launch code to system DRAM is what prevents ac-
cess to decrypted malicious payloads. A vulnerability in
the signed code module that implements the late launch
mechanism (and enables this exclusive access) could al-
low an analyst to read a decrypted payload [55].
Physical access to a TPM permits other attacks. Some
TPM uses are vulnerable to a reset of the TPM without re-
setting the entire system, by grounding a pin on the LPC
bus [32]. Late launch, as used by our malware, is not vul-
nerable to this attack. LPC bus messages can be eaves-
dropped or modiﬁed [37], revealing sensitive TPM infor-
mation.
In addition, sophisticated physical deconstruc-
tion of a TPM can expose protected secrets [51]. While
TPMs are not speciﬁed to be resistant to physical attack,
the tamper-resistant nature of TPM chips indicates that
physical attacks are taken seriously. It is likely that phys-
ical attacks will be mitigated in future TPM revisions.
One potential analysis tool is a cold boot attack [29]
in which memory is extracted from the machine during
operation and read on a different machine.
In practice
the effectiveness of cold boot attacks will be tempered by
keeping malicious computations short in duration, as it
is only necessary to have malicious payloads decrypted
while they are executing. Additionally, it may be possible
to decrypt payloads in multiple stages , so only part of the
payload is decrypted in memory at any one time. Mem-
ory capture is a serious concern for data privacy in legit-
imate TPM-based secure computations as well. It is im-
portant for future trusted computing solutions to address
this issue, and the addition of mechanisms that defend
against cold boot attacks would increase the difﬁculty of
avoiding our attack.
6.4 Restricting deployment and use of TPMs
Our attack requires that the malware platform knows SRK
and owner AuthData values for the TPM. The danger of
malware using TPM functionality could be mitigated by
careful control of AuthData. Existing software that uses