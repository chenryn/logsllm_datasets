⎫⎬
⎭
j∈[1,(cid:4)]
and store (output, idmul, z) in memory.
Output: On receiving (release, idmul, i) from S P∗
if
Mul,
(output, idmul, z) exists in memory but (complete, idmul, i)
does not, and if i ∈ P \ P
, then send (output, idmul, zi) to
Pi, and store (complete, idmul, i) in memory.
∗
Mul
We now give a protocol for t-party multiplication that realizes
F (cid:4),t,n
. In our protocol speciﬁcation, we will abstract away the
fact that F (cid:4)
2PMul is asymmetric, with designated Alice and Bob
roles for participating parties. We will instead use phrasing
such as “Parties Pi and Pj access F (cid:4)
2PMul with inputs a and
b” as shorthand to indicate that Pi plays the role of Alice and
Pj that of Bob, with inputs as speciﬁed. We will continue to
use this style throughout the rest of the paper. We illustrate
the pattern of interaction during an instance of the protocol for
the speciﬁc case of 8 parties as a wiring diagram in Figure 1.
(cid:7)
(cid:8)
:
π(cid:4),t,n
Mul
Protocol 2. t-Party Multiplication
This protocol is parameterized by the statistical security
parameter s and the group Zq over which multiplication is to
be performed, and by the party count n, the threshold size t,
and the batch size (cid:5). It invokes the Two-party Multiplication
functionality F (cid:4)
2PMul. The Init phase is run once with the
entire group of parties {Pi}i∈[1,n], and the Multiplication
phase can be run repeatedly, each time with a unique idmul
and a varying subset of parties parties P ⊆ [1, n] such that
|P| = t. During each multiplication, every party Pi for i ∈ P
supplies an input vector ai ∈ Z(cid:4)
q and the unique index idmul
and receives an output zi ∈ Z(cid:4)
q, such that the outputs for all
parties in P form an additive sharing of the element-wise
product of the inputs.
Init: Each pair of parties Pi,Pj for i, j ∈ [1, n] such that
i < j initialize their multiplication oracle by sending (init)
to their shared F (cid:4)
Multiplication:
1) Each party Pi has input ai, and sets ζ0
..= ai.
2) For each pair of parties Pi,Pj such that i < j:
2PMul instance.
i
3) For ρ ∈ [1, log2(t)]:
i,j
2PMul.
F (cid:4)
2PMul, where idmul
a) Pj, acting as Bob, sends (preprocess, idmul
i,j ) to
is a unique, agreed upon index.
2PMul, Pi, as
i,j ) from F (cid:4)
i,j ) to F (cid:4)
2PMul.
i,j ) from F (cid:4)
b) On receiving (bob-ready, idmul
Alice, sends (preprocess, idmul
c) Pj receives (alice-ready, idmul
a) For each pair of parties Pi,Pj in each contiguous
non-overlapping subgroup of 2ρ parties from P, if
Pi and Pj have not previously interacted during the
course of this invocation of π(cid:4),t,n
Mul , then they send
i,j , ζρ−1
(input, idmul
to
F (cid:4)
i,j , ζρ,j
2PMul, respectively, and receive (output, idmul
)
and (output, idmul
j ). If the party playing the role
of Alice goes second, then it samples a random output
and uses the rushing phase of F (cid:4)
b) Each party Pi privately computes ζρ
⎫⎬
⎭
wise sum of its output shares for round ρ:
) and (input, idmul
i to be the element-
i,j , ζρ−1
⎧⎨
⎩
i,j , ζρ,i
(cid:2)
2PMul.
ζρ,j
i,l
ζρ
i
..=
j
)
i
i
j∈Pρ,i
l∈[1,(cid:4)]
where Pρ,i ⊂ P such that |Pρ,i| = 2ρ − 1 is the
subgroup with whom Pi interacted in round ρ.
4) Each party Pi takes zi ..= ζlog2(t)
i
to be their output.
Theorem IV.1. The protocol π(cid:4),t,n
ality F (cid:4),t,n
for a κ-bit ﬁeld Zq in the F (cid:4)
Oracle Model,
statically corrupting up to t − 1 parties.
Mul UC-realizes the function-
2PMul-hybrid Random
in the presence of a malicious adversary
Mul
Round Count. The protocol π(cid:4),t,n
requires each party to engage
in t instances of the F (cid:4)
Mul
2PMul functionality. The preprocessing
phases of these instances are evaluated in parallel, but due
(cid:18)(cid:17)(cid:22)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
1
2
d
n
u
o
R
3
d
n
u
o
R
P
1
a
1
P
2
a
2
P
3
a
3
P
4
a
4
P
5
a
5
P
6
a
6
P
7
a
7
P
8
a
8
×
×
×
×
×
×
×
×
×
×
×
×
+
+
+
+
+
+
+
+
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
+
z
1
+
z
2
+
z
3
+
z
4
+
z
5
+
z
6
+
z
7
+
z
8
Fig. 1: Illustration of a t-Party Multiplication among 8 parties.
We use × to denote an instance of the two-party multiplication
functionality F (cid:2)
2PMul, and + to denote a local sum. Note that in
each round all individual instances of F (cid:2)
2PMul are invoked in parallel.
Outputs from the ﬁrst round are shown as green wires, from the
second round as red wires, and from the third round as blue wires.
to data dependencies, the input-adjustment phases must be
evaluated in log(t) sequential groups. Thus, when F (cid:4)
2PMul is
realized by π(cid:4)
Mul will require log(t) + 2 rounds in
the general case. However, in our use-case we can apply the
optimization discussed at the end of Section III to π(cid:4)
2PMul, in
light of which the round count of π(cid:4),t,n
is reduced to log(t)+1.
Mul
2PMul, π(cid:4),t,n
V. THRESHOLD ECDSA
In this section, we describe the threshold ECDSA function-
ality that our protocol realizes, followed by the protocol itself,
which is broken into two parts: a setup protocol and a signing
protocol. The former protocol is run once among a group of n
parties, and its output may be reused many times by various
subgroups of t parties engaging in the latter.
A. The t-of-n ECDSA Functionality
We have made no attempt to formulate a general signature
functionality, but instead have modeled ECDSA in the threshold
setting directly, much as previous works [11], [12] have done.
Unlike the functionality of Doerner et al. [1], ours does not
allow malicious parties the ability to bias the instance key.
As is typical of dishonest-majority protocols, the adversary
will have the ability to deprive honest parties of their output.
We model this in our functionality by allowing any party to
specify a vector B ⊆ P of parties to block. We note that
ECDSA makes use of a hash function, and that the standard
speciﬁes this function to be SHA-256. As we will discuss in
Section VII, we use SHA-256 to instantiate the Random Oracle
in our implementation. However, when our functionality makes
use of the function H, it refers not to the Random Oracle but
to SHA-256 speciﬁcally.
Functionality 6. F t,n
ECDSA:
This functionality is parameterized by the Elliptic curve
(G, G, q), as well as a hash function H. The setup phase
runs once with a group of parties {Pi}i∈[1,n], and the signing
phase may be run many times between any (varying) subgroup
of parties indexed by P ⊆ [1, n] such that |P| = t.
Setup: On receiving (init) from all parties:
1) Sample and store the joint secret key, sk ← Zq.
2) Compute and store the joint public key, pk ..= sk · G.
3) Send (public-key, pk) to all parties.
4) Store (ready) in memory.
Signing: On receiving (sign, idsig, P, m) from each party
Pi for i ∈ P, where P ⊆ [1, n] such that |P| = t is the list
of parties participating in this signature, if (ready) exists in
memory but (complete, idsig) does not exist in memory:
1) Sample k ← Zq and store it as the instance key.
2) Wait for (get-instance-key, idsig) from all parties
3) Compute (rx, ry) = R ..= k · G and send
4) Wait for (proceed, idsig, Bi) from every party Pi for
(instance-key, idsig, R) to all parties.
i ∈ P. If some party sends (abort, idsig), then halt.
P.
5) Compute
H(m) + sk · rx
sig ..=
6) Collect the signature, σ ..= (sig mod q, rx mod q).
7) Compute
k
"
B ..=
Bi
i∈P
8) Send (signature, idsig, σ) to each Pi for i ∈ P \ B
9) Store (complete, idsig) in memory.
B. Threshold Setup
Our setup protocol is derived from the 2-of-n setup protocol
of Doerner et al. [1]. Like their scheme,
it uses simple
techniques to produce and verify an n-party Shamir secret
sharing [21] of a joint secret key sk, from which any t parties
can derive a t-party additive sharing of sk with no further
interaction; unlike their scheme, we use a proof of knowledge
to ensure security against a dishonest majority. Their protocol
sampled the public/private key pair as an n-party additive
sharing, and then converted it to a Shamir sharing; we make a
(cid:18)(cid:17)(cid:22)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
small improvement by sampling the Shamir sharing directly.
Speciﬁcally, each party locally samples a random polynomial
of degree degree-(t− 1) and distributes points at predetermined
locations on this polynomial to the other parties. The parties
sum the points they receive to construct a Shamir sharing of a
single degree-(t−1) polynomial. The parties then multiply their
points on the shared polynomial by the elliptic curve generator
G, broadcast the result, and verify that all subsets of their shares