### 授权许可使用说明
本文档仅供清华大学使用。下载时间为2021年3月20日UTC 05:35:50，来源于IEEE Xplore。请注意，本文档受相关使用限制。

---

### 5.3 控制评估
本节展示了在第4节中提出的反馈控制器应用于托管TPC-C数据库的PostgreSQL数据库服务器时的评估结果。首先，在5.3.1小节中介绍AM-C（可用性最大化）控制器的实验结果；然后，在5.3.2小节中描述PM-C（性能最大化）控制器的结果。

#### 5.3.1 AM-C 可用性最大化控制
在此部分，我们评估了在第4.1节中提出的AM-C反馈控制器。这里，我们设定一个性能约束，即最大平均客户端请求延迟为8秒。AM-C的目标是在满足此性能约束的同时，通过在线反馈控制最大化服务可用性。我们使用两个场景来评估该控制器，每个场景分别改变系统的一个外生输入变量：第一个场景考虑变化的工作负载混合，第二个场景处理变化的工作负载量N。

图6描述了第一个场景，其中工作负载混合从M1变为M2，再回到M1（参见图6(a)），而工作负载量N为80个客户端。M1工作负载混合包含读写请求，而M2仅生成读请求。图6(b)、(c)和(d)分别显示了随时间变化的服务器多程序级别(MPL)、平均客户端请求延迟以及客户端请求放弃率，并将非控制基线系统与闭环控制系统的性能进行了比较。注意到在第20分钟和第40分钟之后MPL的突然变化对应于工作负载混合的变化，这也影响了延迟和放弃率。结果显示，AM-C控制器能够动态调整MPL以确保延迟性能约束，同时将服务可用性保持在最大值，M1下的放弃率为0%，M2下的平均放弃率为9%。而在非控制基线系统中，由于并发不受控且可能无限制，服务质量无法得到保证，性能下降导致延迟增加高达30%。

图7展示了另一种系统动态，即随时间变化的工作负载量（参见图7(a)），此时工作负载混合保持在M1。图7(b)、(c)和(d)分别显示了随时间变化的服务器MPL、平均客户端请求延迟以及客户端请求放弃率，并将非控制基线系统与控制系统进行比较。注意，由于TPC-C客户端思考时间，任何给定时间点的活动客户端数量可能与实际由TPC-C客户端模拟器生成的负载不同。结果显示，控制下的MPL能够调整到最优值以确保性能约束。而非控制系统的延迟增长至14.4秒，比控制系统高出80%。在控制系统中，当并发客户端数达到75个时（即实验前半段），放弃率被维持在5%以下。随后，随着并发客户端数量的增加，放弃率也随之增加，以确保延迟低于目标最大延迟。在实验结束时（第18至25分钟之间），高放弃率是合理的，因为此时延迟达到了最大允许值（如图7(b)所示），需要拒绝某些请求以保证延迟约束。然而，在实验早期阶段，延迟低于最大允许值时，出现高于0%的放弃率则值得商榷。这可以通过图7(e)中的随机工作负载解释，其中MPL始终高于平均Ne，但在某些时刻，客户端数量可能会暂时超过MPL，从而导致非零放弃率（如图7(e)中的圆圈所示）。为了应对这一问题，改进的AM-C可用性最大化控制策略应考虑系统欠载情况，进一步最小化放弃率（即增加MPL），只要延迟约束得到保证即可。由于篇幅限制，此处不展示该场景的具体结果。

#### 5.3.2 PM-C 性能最大化控制
本部分评估了在第4.2节中提出的PM-C性能最大化反馈控制器。这里，我们设定了一个可用性约束，即最大客户端请求放弃率为10%。PM-C的目标是在满足此可用性约束的同时，通过在线反馈控制最大化服务性能。图8展示了当外生输入变量工作负载混合M发生变化时，系统行为和动态控制的变化。图8(a)中，工作负载混合从M1变为M2，再回到M1，工作负载量N为80个客户端。M1工作负载混合包含读写请求，而M2仅生成读请求。图8(b)、(c)和(d)分别显示了随时间变化的服务器MPL、客户端请求放弃率以及平均客户端请求延迟，并将非控制基线系统与控制系统进行比较。同样地，我们可以看到当工作负载混合突然变化时，MPL也会发生突变，并对延迟和放弃率产生影响。结果显示，PM-C控制器能够动态调整MPL以确保放弃率约束，同时将服务性能保持在最大值，M1下的平均延迟为4秒，M2下的平均延迟为8秒。相比非控制基线系统，这提高了系统延迟性能达20%。

---

### 相关工作
系统配置对于服务器系统的性能和可用性至关重要[18,19]。许多相关研究集中在系统QoS管理领域，探讨了诸如准入控制、服务差异化、服务降级和请求调度等技术。由于篇幅限制，我们将简要概述与服务器系统管理中的准入控制相关的研究工作。尽管通常通过系统管理员的临时调优来改善服务器性能和可用性[6,21]，但新的方法正逐渐出现以简化这类系统的管理。Menascé等人提出了一种启发式方法，通过爬山优化技术确定服务器的多程序级别(MPL)，从而管理服务器的QoS[20]。虽然这种方法在多种应用中表现良好，但爬山优化并不能保证最优解。文献[9]中也应用了类似的技术，但MPL是离线确定的，因此不能适应变化的工作负载。其他针对特定服务器技术（如事务服务器[26]）提出了MPL识别解决方案。还有一些方法旨在建模系统以表征其容量。文献[10]中进行了一项基于仿真的研究，并提出了一个分析模型，根据变化的工作负载调整服务器MPL。然而，该模型仅适用于具有抛物线形状的性能函数，而不适用于通常作为服务级别目标(SLO)基础的请求延迟和放弃率等指标。在过去十年中，一些研究尝试将控制理论应用于服务器系统。一种初步的方法是将著名的线性控制理论应用于单输入单输出(SISO)或多输入多输出(MIMO)黑盒模型的服务器[25,7]。然而，由于这些系统的内在非线性行为，线性控制理论并未取得显著成功。其他方法基于从排队论推导出的非线性模型[28,30]，并提出了理论建议[15,16,24]。由此产生的模型能够很好地预测系统性能，但这需要对模型参数进行精细校准才能提供准确的结果。所提出的AM/PM-C系统在多个方面与先前的研究有所不同。它基于流体近似应用控制理论，从而得到了一个更简单的非线性模型，外部参数很少。流体近似已在其他领域（如汽车流量控制和人口模型）中成功用于建模和控制各种系统。在本工作中，我们将其应用于服务器系统的建模和控制，并展示了如何通过这种方式提供服务性能和服务可用性的综合保证。

---

### 结论
本文介绍了基于流体流动控制理论设计、实现和评估的一种非线性连续时间模型，并据此推导出服务器的准入控制，以实现服务器的最佳配置。提出了两种针对不同QoS目标的控制变体。AM-C是一种可用性最大化最优服务器准入控制，它在固定的性能约束下实现最高的服务可用性。PM-C是一种性能最大化最优服务器准入控制，它在期望的可用性目标下实现最高的性能。我们的实验表明，所提出的技术在保证可用性约束的同时，性能提高了最多30%。尽管本文主要关注客户端请求延迟和放弃率等QoS指标，但我们相信所提出的建模和控制技术也可以应用于其他指标，如服务器吞吐量。尽管所提出的建模和准入控制法则应用于数据库服务器，但我们认为它们可以轻松应用于任何支持准入控制的服务器系统（例如Web服务器、应用服务器等）。此外，我们还对这些建模和控制技术如何应用于分布式系统感兴趣。

---

### 参考文献
[略]

---

希望以上优化后的文本更加清晰、连贯和专业。如果还有其他需要修改或补充的地方，请随时告知。