directly mapped to the taint bits of the architectural registers,
allowing the operating system to read and write all at once.
While the physical register ﬁle contains more registers [41],
we still require only two MSRs, as they only provide access
to the taint bits of the current architectural registers. As a
typical x86 CPU already contains several hundred MSRs [42],
[1], adding two new MSRs per CPU core is a negligible
hardware overhead. To save the current taint state on interrupts
(Section III-B1), we ensure data consistency between the two
MSRs; a write to IA32_TAINT also (atomically) updates
IA32_SHADOW_TAINT. This enables us to implement secure
context switches (cf. Section III-C).
Behavioral Changes. All behavioral changes are only enabled
if the operating system supports and enables ConTExT using
the corresponding bit in the control register (cf. Section III-A).
However, taint tracking is enabled unconditionally as it hap-
pens implicitly without additional cost. This applies to all op-
erations which transfer data from memory to registers or from
registers to registers. In our proof-of-concept implementation,
we added the taint tracking to 368 out of 557 instructions
implemented in Bochs. If no memory mapping is marked
as non-transient, then no register can be tainted. Thus, taint
tracking simply has no effect if there is no operating system
support.
B. ConTExT-light
In addition to the hardware emulation for ConTExT, we
implemented ConTExT-light (cf. Section III) for Linux. Our
implementation of ConTExT-light consists of two parts, a
kernel module, and a runtime library. For the full ConTExT, we
provide a compiler extension that minimizes the performance
penalties of register spills.
For the proof of concept, we emulate non-transient memory
mappings via uncacheable memory mappings. Uncacheable
memory can generally not be accessed inside the transient
execution domain [21], [59] and we consider Meltdown-type
attacks out-of-scope since they are already ﬁxed on most recent
hardware [59], [91], [78]. In contrast to ConTExT, ConTExT-
light does not protect secrets while they are architecturally
stored in registers of running threads. Thus,
the security
guarantees of ConTExT-light still hold in this case.
Kernel Module. We opted to implement
the operating-
system changes as a kernel module for compatibility with a
wide range of kernels. The kernel module is responsible for
setting up non-transient memory mappings. As our proof-of-
concept implementation relies on uncacheable memory, we do
not retroﬁt page-table bits but use the page-attribute table to
declare a memory mapping as uncacheable.
The kernel module provides an interface for the runtime
library (cf. Section IV-B) to set up non-transient memory
mappings. This allows keeping the changes in the kernel space
minimal as most of the logic and parsing can be implemented
in user space. The kernel module ensures that the page-attribute
table contains an uncacheable (UC) entry by reprogramming
the page-attribute table if this is not already the case. If
the runtime library requests a mapping to be marked non-
transient via the kernel-module interface, the page-table entry
is modiﬁed to reference the UC entry in the page-attribute
table. Subsequently, the corresponding TLB entry is ﬂushed.
We do not ﬂush all cache lines of the mapping, as this would
incur additional overhead. Thus, the developer (or runtime
library) has to take care that values stored on pages marked as
non-transient are not cached before they are marked as non-
transient.
Runtime Library. The runtime library sets up all static
and dynamic non-transient memory mappings via the kernel-
module interface. Our proof-of-concept runtime library sup-
ports C and C++ applications and can even be included as a
single header ﬁle for simple projects. The header ﬁle provides
a keyword, nospec, to annotate variables as secrets using
the __attribute__ directive. This keyword ensures that
the linker allocates the variables in a dedicated secret
section in the ELF binary. Moreover, the header ﬁle registers
a constructor function which is executed before the actual
application, to initialize ConTExT at runtime.
When the application starts, the runtime library identiﬁes
all memory mappings in the secret section from the ELF
binary. These memory mappings are then set to non-transient
(i.e., uncacheable) using the kernel module.
The runtime library is only active on application startup
and does not inﬂuence the application during runtime. During
runtime, it is only used if the developer requests dynamic non-
transient memory, i.e., non-transient heap memory. For this
10
purpose, the runtime library provides a malloc_nospec and
free_nospec function. These functions mark the allocated
heap memory immediately as non-transient.
Compiler. For the full ConTExT with hardware support,
we also require compiler support. We extend the LLVM
compiler [54] in version 8.0.0 to not use the stack for local
variables, but move them to a different part of the memory
which we refer to as unprotected stack.3 The normal stack
is marked as non-transient to not leak temporary variables
and function parameters the compiler puts on the stack. Thus,
to reduce the performance impact, we allocate local variables
which are deﬁned by the developer in the unprotected stack,
which is not marked as non-transient.
Our implementation is based on the already existing SafeS-
tack extension [52]. We modify the heuristics to not move only
speciﬁc but all user-deﬁned variables from the non-transient
stack to the unprotected stack (SafeStack in the original
extension). Allocations coming from function parameters and
registers spills are put on the non-transient stack.
V. EVALUATION
In this section, we evaluate ConTExT and ConTExT-light
with respect to their security properties and their performance.
We evaluate ConTExT on our modiﬁed Bochs emulator, and
ConTExT-light on a Lenovo T480s (Intel Core i7-8650U,
24 GB DRAM) running Ubuntu 18.04.1 with kernel version
4.15.0.
A. Security
We generally assume that the operating system is trusted
as it handles the non-transient memory mappings. First, we
explain how ConTExT can be used to protect against all
Spectre attacks, and how current commodity hardware can be
retroﬁtted to partially emulate ConTExT. Second, we show the
limitations of ConTExT.
1) Security of ConTExT: The security guarantees of Con-
TExT are built on two assumptions: the application developer
correctly annotated all secrets as such, and the application does
not actively leak secrets (e.g., by writing them to memory lo-
cations not marked as non-transient). ConTExT guarantees for
code that is leakage-free on a strict in-order machine that this
code will also be leakage-free on an out-of-order or speculative
machine with ConTExT, iff secrets are correctly annotated. For
the evaluation, we distinguish two cases, based on whether the
secret values are used architecturally in the application or not
while an attacker mounts a transient-execution attack.
Security Argument. ConTExT eliminates leakage of secrets
from transient-instruction execution into the microarchitec-
tural state. It
to see that allowing no transient-
instruction execution eliminates any leakage. ConTExT allows
the transient execution of instructions that do not inﬂuence the
microarchitectural state. An implementation, e.g., our proof-
of-concept, deﬁnes for each instruction whether it has to
stall (e.g., branch instructions if the corresponding taint bit
is set), use a dummy value instead of the secret value (e.g.,
operations with one or more secret input operands and one or
is trivial
3The patches can be found in our GitHub repository https://github.com/
IAIK/contextlight.
1 char oracle[256 * 4096];
2 // nospec for ConTExT-light
3 char /*nospec*/ secret = ’X’;
4
5 if(speculate()) {
6
7
8
9 }
// LFENCE here for mitigation
oracle[secret * 4096]; // encode secret
oracle[’E’ * 4096]; // encode public value
y
c
n
e
t
a
L
]
s
e
l
c
y
c
[
300
200
100
65
No secret 0x45
70
unprotected
lfence
ConTExT
75
80
Page of oracle
Secret 0x58
85
90
Fig. 3: Evaluation of Figure 1. The unprotected code snippet
leaks the secret ’X’ (0x58) and public value ’E’ (0x45) to the
cache (Lines 7 to 8). State-of-the-art lfence-based mitigation
(lfence in Line 6) prevents both indices from being cached.
A ConTExT-light annotation (Line 3) prevents the secret index
from being cached but allows the public index to be cached,
warming up the cache.
more memory input or output operands, and operations that
inﬂuence “uncore” or off-core microarchitectural elements),
or can run in an unmodiﬁed way (e.g., pure on-core register
operations). If an implementation correctly restricts these,
the microarchitectural state cannot be inﬂuenced by a secret.
Hence, in the extreme case where the entire memory is secret,
it is straightforward to see that ConTExT would not allow any
transient-instruction execution. More speciﬁcally, ConTExT al-
lows exactly the subset of instructions in the instruction stream
to run transiently that do not inﬂuence the microarchitecture
based on secrets.
Architecturally Unused Secrets. A secret is architecturally
unused if the secret is only stored in a non-transient memory
region, i.e., there is no part of the secret which is stored in a
register, cache, or normal memory region. For example, this is
the case if the secret was not used by the time of an attack.
However, the application can also be in such a state, although
the secret has already been used in the past. If all traces of the
secret in normal memory or the cache are already overwritten
(or evicted), the application returns again to the state where
secrets are architecturally unused.
In this state, an attacker can only target the secret itself and
not an unprotected copy of it. It is clear that such an attack
cannot be successful, as—per-deﬁnition—transiently executed
code cannot retrieve the value from a non-transient memory
region. Hence, ConTExT is secure if its implementation fulﬁlls
this property.
Architecturally Used Secrets.
If the entire secret, or parts
of it, are stored in a register, cache, or a memory region
not marked as non-transient, the secret is considered architec-
turally used. In this case, an attacker can target any unprotected
copy of the secret, not only the original secret stored in the
non-transient memory region. However, an attack fails if the
target is marked as secret, e.g., by a non-transient memory
mapping, tainted register, or tainted cache line.
11
If a non-transient memory region is loaded into a reg-
ister, the register is tainted and, thus, it cannot be targeted.
Moreover, the taint is also applied to the corresponding cache
line and TLB entry. Any register-to-register operation which
copies the secret also copies the taint. Similarly, an operation
that copies the secret to a non-transient memory region is
also secure. Such operations include, for example, register
spills to the stack, temporary storage of registers in local
variables, or secrets as function arguments (depending on the
calling convention). Tainted registers can only be untainted
by destroying their content, i.e., overwriting them with non-
secret values. Overwriting a register with an immediate or by
using an idiom, e.g., xor rax,rax, generally untaints the
register. Using the rep preﬁx on arithmetic or logical register
operations preserves the taint.
Thus, registers cannot be untainted while containing a
secret. However, over-approximation can lead to more tainted
registers than necessary.
Operations that copy the secret to a memory region not
marked as non-transient could be attacked. However, such
operations are never implicitly generated by the compiler, as
the compiler only uses the stack as a temporary memory. Thus,
such an operation has to be explicitly deﬁned by the application
developer, which violates the assumption that the application
does not actively leak secrets.
A remaining scenario is the context switch of the ap-
plication with used secrets. In such a case, the application
is stopped by the operating system, and the current register
content is saved to the kernel. As the operating system is aware
of register taints, and also considered trusted, it can leverage
the taint saving mechanism described in Section III-B1. The
registers can again be saved in a non-transient memory region
to prevent transient-execution attacks on the saved registers.
When returning from the kernel, all registers are ﬁrst tainted
(an over-approximation, as they are restored from a non-
transient stack), but the original taint is restored just before
the end of the context switch. Thus, registers containing secrets
are always tainted and cannot be targeted.
2) Security Limitations of ConTExT-light: As ConTExT-
light is implemented using uncacheable memory, we evalu-
ated the security properties of uncacheable memory regarding
transient execution. We use the transient-execution proof-of-
concepts from Canella et al. [14] as test cases to verify that
ConTExT-light prevents any leakage of secret data. For all
proof-of-concepts which are applicable to our test system, we
successfully leaked the secrets before deploying ConTExT-
light. We furthermore used the AVX-based Spectre-PHT vari-
ant from Schwarz et al. [80] to verify that ConTExT-light
also prevents Spectre attacks, which do not use the cache
as a covert channel. To verify the effectiveness of ConTExT-
light in our experimental setup, we mark the memory mapping
containing the secret data as uncacheable using the PAT.
Additionally, using Flush+Reload, we veriﬁed that the memory
mapping is actually uncacheable. For all
tested proof-of-
concepts, ConTExT-light successfully prevented any leakage
of the secret data (cf. Figure 3).
ConTExT-light cannot protect secrets while they are ar-
chitecturally stored in registers of running threads. Further-
more, ConTExT-light is not designed as a protection against
Meltdown-type attacks. Mitigating Meltdown-type attacks, in-
cluding MDS attacks,
to our work, and we
consider it out of scope.
is orthogonal