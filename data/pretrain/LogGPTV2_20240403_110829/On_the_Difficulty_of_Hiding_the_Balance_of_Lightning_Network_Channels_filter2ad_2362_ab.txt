### 3. Channel Balance Discovery

#### 3.1 Scenario and Objective
In our scenario, Alice (A) and Bob (B) have an open Bitcoin Lightning Channel, AB, with a capacity \( C_{AB} \). The objective of the adversary, Mallory (M), is to determine the exact balances that each node has in channel AB, denoted as \( \text{balance}_{AB} \) and \( \text{balance}_{BA} \).

**Figure 1: Simple single channel scenario.**

#### 3.2 Attack Methodology
To execute the attack, Mallory (M) needs to open a payment channel with Alice (A), denoted as MA (see Figure 1). Once the MA channel is established, M initiates a payment through the path M → A → B. If the balance in the MA channel (\( \text{balance}_{MA} \)) is greater than or equal to the balance in the AB channel (\( \text{balance}_{AB} \)), any payment with an amount \( p \leq \text{balance}_{AB} \) can be routed through this path and successfully delivered to B.

A straightforward approach would involve performing multiple payments, incrementing the amount \( p \) step by step until a payment fails. The amount \( p \) of the last successful payment can be considered as \( \text{balance}_{AB} \), and the remaining balance \( \text{balance}_{BA} \) can be calculated as \( \text{balance}_{BA} = C_{AB} - \text{balance}_{AB} \).

This method can be optimized to reduce the economic cost for the adversary by using a binary search to find the threshold value more efficiently.

#### 3.3 Enhanced Attack Using Invalid Payments
To further enhance the attack, M can create a fake invoice with a random value \( h(x) \) as if it were created by B. This fake invoice cannot be detected by A but will be rejected by B, who will not be able to retrieve the corresponding \( x \) value. This results in the denial of the last hop payment, and thus the entire payment.

#### 3.4 Attack Extension to Multiple Channels
The described attack can be extended to discover the balances of all open channels that A has with \( n \) peers \( B_1, B_2, \ldots, B_n \) (see Figure 2). With the same setup (M opens a single channel with A), M can obtain the pairs \( (\text{balance}_{AB_i}, \text{balance}_{B_iA}) \) for all \( i = 1, \ldots, n \), provided that M is aware of the existence of \( B_i \) and \( \text{balance}_{MA} \geq \text{balance}_{AB_i} \) for all \( i \). In this case, M should set up payments with each end node \( B_i \).

**Figure 2: Multiple nodes scenario.**

#### 3.5 Algorithm for Balance Discovery
**Algorithm 1: minmaxBandwidth**
- **Input:** Route, target, maxFlow, minFlow, accuracy_threshold
- **Output:** bwidth, an array of tuples giving the range of bandwidth discovered for each channel

```plaintext
1. missingTests ← True;
2. bwidth.max ← maxFlow;
3. bwidth.min ← minFlow;
4. while missingTests do
5.     flow ← (bwidth.min + bwidth.max) / 2;
6.     h(x) ← RandomValue();
7.     response ← sendFakePayment(route, target, h(x), flow);
8.     if response = UnknownPaymentHash then
9.         bwidth.min ← flow;
10.    else if response = InsufficientFunds then
11.        bwidth.max ← flow;
12.    if bwidth.max - bwidth.min ≤ accuracy_threshold then
13.        missingTests ← False;
14. return bwidth;
```

**Algorithm 2: Complete Node Attack**
- **Input:** Node, accuracy_threshold
- **Output:** routes2Neighbors, an array of routes and bandwidths for each neighbor

```plaintext
1. channelPoint ← getChannelPointListChannels(node);
2. created ← False;
3. if channelPoint is undefined then
4.     channelPoint ← getChannelPointPendingChannels(node);
5.     if channelPoint is defined then
6.         waitChannelNotPending(channelPoint);
7.         created ← True;
8.     else
9.         createConnection(node.externalIP);
10.        maxFunding ← calculateMaxFunding;
11.        responseOpenChannel ← createChannelSync;
12.        channelPoint ← waitChannel(responseOpenChannel);
13. neighbors ← getNeighbors(node);
14. for neighbor in neighbors do
15.     neighbor.minmaxBandwidth ← minmaxBandwidth(route=node, target=neighbor, maxFlow=CAB, minFlow=0, accuracy_threshold=accuracy_threshold);
16. if created then
17.     closeChannel(channelPoint);
18. return routes2Neighbors;
```

#### 3.6 Adversary Model and Attack Cost
The Bitcoin Lightning Network is an open P2P network, and there are no special requirements for an adversary to perform the attack, other than the ability to open a payment channel with the victim node A. Node A could refuse to open a channel, but nodes are generally willing to do so to improve connectivity. If the adversary fully funds the channel, A is more likely to accept the request.

To disclose the balance of a channel, the adversary needs to open another channel (the first hop in the path). This requires two transactions on the Bitcoin blockchain:
1. A transaction to open the channel and lock the funds.
2. A transaction to close the channel and refund the locked funds.

The total cost of the attack can be divided into the entrance barrier cost and the economic cost:
- **Entrance Barrier Cost:** The resources the adversary must control to perform the attack, which are recovered after the attack.
- **Economic Cost:** The money lost due to the execution of the attack.

For maximum accuracy, the adversary needs to open a channel with its maximum capacity, currently bounded at 0.16777215 BTC. The entrance barrier cost is approximately $640.05 USD (as of January 10, 2019, with 1 BTC = $3,815 USD).

The economic cost includes:
1. The fee for the funding transaction.
2. The fee for the closing transaction.
3. The financial cost of having funds locked during the attack.

The funding transaction fee is around 0.00001534 BTC, and the closing transaction fee is around 0.00000463 BTC. The financial cost from locking funds is negligible, as the attack takes only seconds. Thus, the total economic cost is around 0.00002 BTC, or $0.0763 USD.

#### 4. Experimental Results
To evaluate the feasibility of the attack, we conducted two evaluations:
1. **Bitcoin Mainnet Evaluation:** We estimated the impact and cost of the attack on the Lightning Network running over the Bitcoin Mainnet Blockchain.
2. **Bitcoin Testnet Evaluation:** We tested the technical feasibility of the attack on the Lightning Network running over the Bitcoin Testnet Blockchain.

**4.1 Bitcoin Mainnet Evaluation**
As of January 8, 2019, the Lightning Network on the Bitcoin Mainnet consists of 1,732 nodes and 6,501 channels. There are limits on the maximum payment amount (4,294,967 satoshis) and the maximum channel funding amount (16,777,215 satoshis). These limits may affect the effectiveness of the attack, providing a bound on the channel balance rather than the exact balance.

**4.2 Ethical Considerations**
We chose to run the real evaluation only on the Testnet for ethical reasons and performed a responsible disclosure to the developers of the Lightning Network about our findings.