generated and used to include h(x ) in the invoice. Then, D reveals
the value x to obtain the payment performed by C. In doing this, C
gets to know about x and can redeem the payment from B that, in
turn, can do the same.
3 CHANNEL BALANCE DISCOVERY
Our scenario assumes that Alice, A, and Bob, B, have an open Bitcoin
Lightning Channel, AB, with capacity CAB. Then, the objective of
the adversary, Mallory M, is to disclose the exact balances that each
node has in channel AB, that is balanceAB and balanceBA.
Figure 1: Simple single channel scenario.
To perform our attack, Mallory M needs to open a payment
channel with2 A, MA (see Figure 1). Once the MA channel is open,
M performs a payment through the path M ↔ A ↔ B. In case
that balanceMA ≥ balanceAB, any payment with amount p ≤
balanceAB performed by M can be routed through that route and
the payment will be correctly delivered to B. Obviously, a naive
attack may be carried by performing multiple payments each of
one increases p from balanceMA step by step3 until an error in
the payment is obtained. The amount p of the last correctly pro-
cessed payment can be considered the value balanceAB and then
balanceBA = CAB − balanceAB.
The previously described attack can be enhanced, in order to
reduce the economic cost for the adversary, by routing an invalid
payment. To that end, M creates a fake invoice as if created by B,
with a random value h(x ). However, the fake invoice cannot be
detected by A but only by B, who will not be able to retrieve the
corresponding x value (in fact, he could not locate the invoice, that
was created by M) denying the last hop payment and, therefore,
the whole payment.
3.1 Attack Extension
The previously described attack can be easily extended in order to
discover the balance of all open channels that A has with n peers
B1, B2,· · · Bn (see Figure 2). Notice that with the same set-up as
before (M opens a single channel with A), M can also obtain the
pairs (balanceABi , balanceBi A) ∀i = 1,· · · , n as far as M is aware
of the existence of Bi and balanceMA ≥ balanceABi ∀i. In that case,
M should set payments with each end node Bi.
2There is a symmetry in the channel creation, so M can choose either A or B, or both,
for the attack.
3The implemented approach, however, improves its efficiency by using a binary search
to obtain the threshold value.
MABMAABSession 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand604Algorithm 2: Complete Node Attack
Data: node, accuracy_threshold
Result: routes2Neighbors, an array of routes and bandwidths for each neighbor
else
channelPoint = getChannelPointPendingChannels(node);
if channel Point is defined then
of the node
1 channelPoint ← getChannelPointListChannels(node);
2 created ← F alse;
3 if channelPoint is undefined then
4
5
6
7
8
9
10
11
12
13
14 end
15 neighbors ← getNeighbors(node);
16 for neighbor in neighbors do
17
waitChannelNotPending(channelPoint);
created ← T rue;
createConnection(node.externalIP);
maxFunding ← calculateMaxFunding;
responseOpenChannel ← createChannelSync;
channelPoint ← waitChannel(responseOpenChannel);
neighbor.minmax Bandwidth ←
minmaxBandwidth(route =node, target =neighbor);
end
18 end
19 if created then
20
21 end
22 return routes2Neighbors
closeChannel(channelPoint);
failure message is instead “InsufficientFunds”, then the payment
could not pass through channel A ↔ B , due to insufficient funds4
(Line 15). In this case, the maximum bandwidth (cf. Lines 16-18) is
modified. Since the adversary cannot get any further information
w.r.t. the maximum bandwidth, the new maximum and minimum
values are those of the channel that produced the failure message,
which held the lowest index in the route, w.r.t. the origin. Lines 5–7
ensure the termination of the algorithm when the range is less than
the desired accuracy threshold (since, at least, the desired channel
reaches such a precision when maxFlow equals the capacity of the
channel created by the adversary created).
In order to estimate the balance of the channel, one simply has
to add up 1% of the capacity of the channels to each of the results of
the algorithm, since this is the default percentage that members of
a channel require to always have as balance to be accountable for
punishments in the event of fraud. In order to perform the attack
described in Section 3.1, Algorithm 2 can be used. Given the victim
node A, the adversary discovers all the channels she had open with
other peers Bi for i = 1,· · · , n and obtains their current balances
balanceABi for i = 1,· · · , n. We assume here that the adversary
advertises its external IP address to the victim (i.e., the IP address
which is accepting incoming connections).
Lines 1-6 first check if the adversary has an open or pending
open (i.e. waiting to get enough confirmations) channel with the
victim node. If not, then the adversary creates the channel (Lines 7-
13). Afterwards, the adversary gets the neighbors of the victim in
Line 15, to perform Algorithm 1 on each of the channels with its
neighbors (Line 17). Finally, if the attack opened a channel, it closes
it in Line 20.
4The payment should always pass through the channel M ↔ A since M controls the
channel and can ensure that balanceMA ≥ CAB.
Figure 2: Multiple nodes scenario.
3.2 Attack Implementation
Algorithm 1 describes the first attack presented in the previous
section, i.e., the adversary trying to discover the balanceAB by
performing invalid payments to B through the path M ↔ A ↔ B
route (cf. Figure 1). Algorithm 1 takes as inputs the target node B,
the route to B (i.e., node A), the range of the payment minFlow and
maxFlow, that is [0, CAB], and the accuracy the adversary wants for
the obtained balance. The function returns the value balanceAB.
The algorithm starts by trying a payment in the middle of the pay-
ment range (cf. Lines 8-10). The value h(x ) for the invoice needed
to perform the payment has been randomly created by M ensur-
ing that the sendFakePayment() function always will return an
error. In case the failure message is “UnknownPaymentHash”, then
the adversary knows that the payment would have been possible
(cf. Line 11), i.e., the channel can forward the payment. Thus, the
minimum bandwidth of the channel can be updated to this new
flow, unless its minimum was already greater (cf. Lines 12-14). If the
Algorithm 1: minmaxBandwidth
Data: route, target, maxFlow, minFlow,
accuracy_threshold
Result: bwidth, an array of tuples that gives the range of bandwidth discovered
for each channel
1 missingTests ← T rue;
2 bwidth.max ← maxFlow;
3 bwidth.min ← minFlow;
4 while missingTests do
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20 end
21 return bwidth
end
end
end
if bwidth.max − bwidth.min ≤ accuracy_threshold then
missingTests ← F alse;
end
flow ← (bwidth.min + bwidth.max )/2;
h (x ) ← RandomV alue;
response ← sendFakePayment(route = [route, target], h (x ), f low );
if response = UnknownPaymentHash then
if bwidth.min  flow then
bwidth.max ← flow;
MAB2B1BnMAAB1AB2ABnSession 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand6053.3 Adversary Model and Attack Cost
The Bitcoin Lightning Network is an open P2P network to which
any user can connect, and for that reason, there is no special require-
ments for an adversary to perform the proposed attack, besides the
ability to open a payment channel with the victim node A from
which the adversary knows the IP address. Of course, node A could
refuse to open a payment channel with the adversary, since such
procedure should be authorized by both parties, and then the attack
could not be initiated. However, nodes in the Lightning Network
are expected to be willing to open new channels, to allow better
connectivity. In case the adversary completely funds the funding
transaction, node A should not need to provide any liquidity, being
more likely to accept the request from the adversary to open the
channel.
In order to disclose the balance of a channel, the adversary needs
to open another channel (i.e., first hop in the path). To do this, the
adversary needs to send two transactions to the Bitcoin blockchain:
(1) a first transaction to open the channel and lock the funds of the
channel; and (2) a second transaction to close the channel and re-
fund the funds that were previously locked. No Lightning Network
fees need to be used, since the attack does not fulfill any payment.
The total cost of the attack can be divided between the entrance
barrier cost and the economic cost. On the one hand, the entrance
barrier cost takes into account the economic resources that the
adversary has to control to be able to perform the attack. Such
resources will be completely recovered after the attack has been
finished. On the other hand, the economic cost of the attack is the
amount of money that the adversary will lose due to the execution
of the attack.
Regarding the entrance barrier cost, the proposed attack needs to
fund a Lightning Channel to perform the balance disclose of other
channels. In order to achieve maximum accuracy, the adversary
needs to open a channel with its maximum capacity, that at present
time is bounded at 0.16777215 BTC (stock symbol for Bitcoins, in
which 1 BTC represents 100, 000, 000 satoshis5). Hence, the entrance
barrier cost will be around6 640.05 USD (United States Dollars).
With regard to the economic cost of the attack, three values have
to be taken into account: (i) the fee corresponding to the funding
transaction of the channel; (ii) the fee corresponding to the transac-
tion that closes the channel; and (iii) the financial cost from having
funds of the channel locked during the attack execution. Although
the amount of bitcoins deposited in the funding transaction has
to be, at least, as big as the biggest capacity of the channel that
the adversary wants to attack, the cost in fees of the transaction
does not depend on the amount deposited in the channel but on
the size in bytes of the transaction. Additionally, being such size
mostly independent from its inputs that will vary for each particu-
lar transaction, funding transactions with a single input can cost
as low as 0.00001534 BTC7. Secondly, and regarding the closing
transaction, it is difficult to estimate the exact fee for a generic
5Smallest amount within Bitcoin, i.e., one hundred millionth of a BTC.
6Exchange rate from Jan 10, 2019 in which 1 BTC exchanges at 3, 815 USD.
7See, for instance, transaction:
930d1c204258afee13fac4d45f9fa98e6e807c918cdbfde49f9d56e2dc482f4a It is the funding
transaction corresponding to the Channel Id 614573123866132481 opened on January
17, 2019, by node
021387e1257d1da1c93996e10e7c4e2a2183683e978e60e40ae9f1927b86fabd27
closing transaction, since multiple parameters may affect such a
value. A cost rounding 0.00000463 BTC can be achieved, as can be
seen in different existing closing transactions8.
The financial costs derived from the locking funds can be mea-
sured in terms of standard interest rate [8]. However, as we detail
in the next section, even a standard fixed annual interest rate of
4% implies negligible values when estimating this type of costs,
since the time to perform the aforementioned attack is in the range
of seconds. Then, the economic cost of the attack will be around
0.00002 BTC, i.e., equivalent to 0.0763 USD. Such a reduced cost
can be used not only to disclose the balance of a single channel, but
also to disclosing the balances of all the open channels of node A.
4 EXPERIMENTAL RESULTS
To analyze the feasibility of our attack, we have performed two
different evaluations. The first evaluation focuses on the Lightning
Network running over the Bitcoin Mainnet Blockchain, where real
value is being transacted. In this first evaluation, we estimate the
impact of our attack over Mainnet, based on topological measures,
as well as the cost estimation that such an attack could have. The
second evaluation focuses on the Lightning Network running over
the Bitcoin Testnet Blockchain, to test a real attack over transac-
tional functionality. This second evaluation reports the technical
feasibility of the attack.
The choice of only running the second evaluation over Testnet,
rather than executing the attack over Mainnet, does not follow any
technical, nor economical, reasons. In fact, experiments over Testnet
have a very erratic and unrealistic behavior. The implications on
the exact information extracted from Testnet are not always easy
to extrapolate over Mainnet. However, our decision of conducting
the real evaluation only over Testnet follows ethical reasons. In
addition, we performed a responsible disclosure to the developers
of the Lightning Network, about our findings.
4.1 Bitcoin Mainnet Evaluation
To analyze the feasibility of our attack in the Bitcoin Lightning
Mainnet, we have performed some measurements on that network
that is composed by 1, 732 nodes and 6, 501 channels (snapshot
taken the 8th of January, 2019).
At the moment of writing, there is a detail in the main implemen-
tations of the Lightning Network that may let our attack less effec-
tive, providing a bound on the balance of the channel rather than
the exact balance. Lightning Network implementations have two
main limits, one on the maximum amount to pay in one single pay-
ment (MAX_PAYMENT_ALLOWED), and another one on the maximum
amount with which to create a channel (MAX_FUNDING_ALLOWED),
with values 4, 294, 967 and 16, 777, 215 satoshis, respectively. Re-
garding the logic of Algorithm 1 and with these limits in mind, we
can perform the attack to a channel with capacity CAB and obtain
its exact balance only if CAB ≤ MAX_PAYMENT_ALLOWED. Should
that not be the case, and considering that MAX_FUNDING_ALLOWED
is almost four times the MAX_PAYMENT_ALLOWED, it is possible that,
if a channel has a big amount of funds in both ends, the attack
instance,
8For
ity 0.1 BTC has