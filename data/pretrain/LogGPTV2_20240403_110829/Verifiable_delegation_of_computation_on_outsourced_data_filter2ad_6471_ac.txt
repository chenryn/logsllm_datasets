2. PRELIMINARIES
We will denote with λ ∈ N a security parameter. We say
that a function ǫ is negligible if it vanishes faster than the
inverse of any polynomial. If S is a set, x ←R S denotes
the process of selecting x uniformly at random in S. If A is
a probabilistic algorithm, x ←R A(·) denotes the process of
running A on some input and assigning its output to x.
Algebraic Tools. Let G(1λ) be an algorithm that on input
the security parameter 1λ, outputs the description of bilinear
groups bgpp = (p, G, GT , e, g) where G and GT are groups
of the same prime order p > 2λ, g ∈ G is a generator and
e : G × G → GT is an eﬃciently computable bilinear map.
We call such an algorithm G a bilinear group generator.
Informally, an arithmetic circuit
Arithmetic Circuits.
takes input variables X = {τ1 . . . τn} over a ﬁeld F on its
incoming wires, and computes over these inputs using ad-
dition and multiplication gates. For lack of space, we refer
the interested reader to [48] for a useful survey on this sub-
ject. Here we only review some deﬁnitions useful for our
work. Arithmetic circuits evaluate polynomials in the fol-
lowing way. Addition (resp. multiplication) gates compute
the polynomial obtained by the sum (resp. product) of the
two polynomials on their incoming wires. The output of the
circuit is the value returned by its last gate. The degree of
a gate is deﬁned as the total degree of the polynomial com-
puted by that gate. The degree deg(f ) of a circuit f is the
maximal degree of all its gates. In this paper, we restrict our
interest to families of circuits {fλ} over F with deg(fλ) ≤ 2.
3. HOMOMORPHIC MACS WITH
EFFICIENT VERIFICATION
Homomorphic message authenticators were ﬁrst deﬁned by
Gennaro and Wichs [27]. Their deﬁnition was tailored to the
model of labeled programs deﬁned therein. Roughly speak-
ing, a labeled program is a function f (e.g., a circuit) which
takes in n variable inputs such that each of these variables
is assigned a label τ (e.g., a binary string). One may think
of such labeling of variables as a way to give useful names to
the variables of a program. Using this model, homomorphic
message authenticators were deﬁned in [27] in such a way
that a message m is authenticated with respect to a label τ .
Binding m with τ essentially means that the value m can
be assigned to those input variables of a labeled program f
whose label is τ . This, however, imposes a limitation: a la-
bel cannot be re-used for multiple messages, i.e., one cannot
authenticate two diﬀerent messages m, m′ with respect to
the same label τ . This limitation makes perfect sense if one
considers labeling of the data as a way to uniquely “catego-
rize” the data, which is useful, for instance, in cases where
a user outsources her data to a remote server and does not
keep a local copy of the data. However, for the purpose of
labeling programs, the re-use limitation also requires chang-
ing the labeling of the variable inputs of f whenever f is
executed on a diﬀerent set of inputs.
In other words, labels are useful to identify both concrete
data items and variable inputs of programs. The current
deﬁnition of homomorphic MACs, however, focuses more on
a labeling mechanism for data items, instead of capturing
the notion of identifying the program inputs. In the next
section, we bridge this gap by introducing so-called multi-
labels that aim to capture both useful properties of labels:
program variable labeling and data labeling. Thereafter, we
give a deﬁnition of homomorphic MACs for multi-labeled
programs.
3.1 Multi-Labeled Programs
We elaborate a variation of labeled programs that we call
multi-labeled programs. The basic idea behind our model is
to introduce the notion of a multi-label L, which consists of
two parts: a data set identiﬁer ∆ and an input identiﬁer τ .
Input identiﬁers, in isolation, are used to label the variable
inputs of a function f , whereas the combination of both, i.e.,
the full multi-label L = (∆, τ ), is used to uniquely identify a
speciﬁc data item. Precisely, binding a value m with multi-
label (∆, τ ) means that m can be assigned to those input
variables with input identiﬁer τ . The pair (∆, τ ) is necessary
to uniquely identify m. While one can still not re-use a pair
(∆, τ ) for authentication purposes, one can re-use the input
identiﬁer τ , instead.
For the sake of illustration, consider the multi-labeled ap-
proach as a separation of data items into two independent
dimensions. One might think of a database table, e.g., stor-
ing air pollution levels, where some function f : Mn → M
is evaluated over n columns (labeled τ1, . . . , τn). Each such
column could represent a point in time, e.g., 7:05, 07:10,
etc. This computation is performed for each row (labeled
∆i) of the table. Each such row could represent a diﬀerent
day, e.g., 2013/08/14, 2013/08/15, etc. We hence evaluate
f∆i (τ1, . . . , τn) for each row i, hence for each day.
Labeled Programs. First, we review the notion of labeled
programs introduced by Gennaro and Wichs [27]. While
867this notion was given for the case of Boolean circuits f :
{0, 1}n → {0, 1}, here we generalize it to the case of any
function f deﬁned over an appropriate set M. A labeled
program P is deﬁned by a tuple (f, τ1, . . . , τn) where f :
Mn → M is a function on n variables, and each τi ∈ {0, 1}∗
is the label of the i-th variable input of f . Labeled programs
allow for composition as follows. Given labeled programs
P1, . . . , Pt and given a function g : Mt → M, the composed
program P ∗ corresponds to evaluating g on the outputs of
P1, . . . , Pt. The composed program is compactly denoted
as P ∗ = g(P1, . . . , Pt). The labeled inputs of P ∗ are all
distinct labeled inputs of P1, . . . , Pt, i.e., all inputs with the
same label are grouped together in a single input of the new
program. If fid : M → M is the canonical identity function
and τ ∈ {0, 1}∗ is a label, then Iτ = (fid, τ ) denotes the
identity program for input label τ . Notice that any program
P = (f, τ1, . . . , τn) can be expressed as the composition of n
identity programs P = f (Iτ1 , . . . , Iτn ).
Multi-labeled Programs. Intuitively, multi-labeled pro-
grams are an extension of labeled programs in which a la-
beled program P is augmented with a data set identiﬁer ∆.
Formally, we deﬁne a multi-labeled program P∆ as a pair
(P, ∆) where P = (f, τ1, . . . , τn) is a labeled program (as
deﬁned above) and ∆ ∈ {0, 1}∗ is a binary string called
the data set identiﬁer. Multi-labeled programs allow for
composition within the same data set in the most natural
way, i.e., given multi-labeled programs (P1, ∆), . . . , (Pt, ∆)
having the same data set identiﬁer ∆, and given a func-
tion g : Mt → M, the composed multi-labeled program
∆ is the pair (P ∗, ∆) where P ∗ is the composed program
P ∗
g(P1, . . . , Pt), and ∆ is the data set identiﬁer shared by
all the Pi.
If fid : M → M is the canonical identity
function and L = (∆, τ ) ∈ ({0, 1}∗)2 is a multi-label, then
IL = (fid, L) denotes the identity multi-labeled program for
data set ∆ and input label τ . As for labeled programs, any
multi-labeled program P∆ = ((f, τ1, . . . , τn), ∆) can also be
expressed as the composition of n identity multi-labeled pro-
grams: P∆ = f (IL1 , . . . , ILn ) where Li = (∆, τi).
It is worth noting that, in the notation of [27], a multi-
labeled program P∆ = ((f, τ1, . . . , τn), ∆) is essentially a
labeled program (f, L1, . . . , Ln) where each string Li is a
multi-label (∆, τi). The main diﬀerence here is the (explicit)
notion of labeled data sets that we use in order to group
together several inputs, similarly to the deﬁnition used for
homomorphic signatures [13, 23]. This explicit splitting will
turn out to be crucial in order to achieve the desired prop-
erty of eﬃcient veriﬁcation.
3.2 Hom. MACs for Multi-Labeled Programs
We review the notion of homomorphic message authentica-
tors [27, 15]. We have adapted the deﬁnition to our model
of multi-labeled programs as deﬁned in the previous section.
Definition 1.
A homomorphic message authenticator
scheme HomMAC-ML for multi-label programs is a tuple of
algorithms (KeyGen, Auth, Ver, Eval) satisfying four proper-
ties: authentication correctness, evaluation correctness, suc-
cinctness, and security. More precisely:
KeyGen(1λ): given the security parameter λ, the key gener-
ation algorithm outputs a secret key sk and a public evalu-
ation key ek.
Auth(sk, L, m): given the secret key sk, a multi-label L =
(∆, τ ) and a message m ∈ M, it outputs a tag σ.
Ver(sk, P∆, m, σ):
given the secret key sk, a multi-labeled
program P∆ = ((f, τ1, . . . , τn), ∆), a message m ∈ M, and
a tag σ, the veriﬁcation algorithm outputs 0 (reject) or 1
(accept).
Eval(ek, f, ~σ): on input the evaluation key ek, a circuit f :
Mn → M and a vector of tags ~σ = (σ1, . . . , σn), the eval-
uation algorithm outputs a new tag σ.
Authentication Correctness.
Informally speaking, a
homomorphic MAC has authentication correctness if any
tag σ generated by the algorithm Auth(sk, L, m) authenti-
cates m with respect to the identity program IL. More
formally, we say that a scheme HomMAC-ML satisﬁes au-
thentication correctness if for any message m ∈ M, all
keys (sk, ek) ←R KeyGen(1λ), any multi-label L = (∆, τ ) ∈
({0, 1}∗)2, and any tag σ ←R Auth(sk, L, m), we have that
Ver(sk, IL, m, σ) = 1 holds with probability 1.
Evaluation Correctness. This property aims at cap-
turing that if the evaluation algorithm is run on a vector
of tags ~σ = (σ1, . . . , σn) such that each σi authenticates
some message mi as the output of a multi-labeled program
(Pi, ∆), then the tag σ produced by Eval must authenti-
cate f (m1, . . . , mn) as the output of the composed program
(f (P1, . . . , Pn), ∆). More formally, let us ﬁx a pair of keys
(sk, ek) ←R KeyGen(1λ), a function g : Mt → M and any
set of message/program/tag triples {(mi, P∆,i, σi)}t
i=1 such
that all multi-labeled programs P∆,i = (Pi, ∆) (i.e., share
the same data set identiﬁer ∆) and Ver(sk, P∆,i, mi, σi) = 1.
If m∗ = g(m1, . . . , mt), P ∗ = g(P1, . . . , Pt), and σ∗ =
∆, m∗, σ∗) = 1 holds
Eval(ek, g, (σ1, . . . , σt)), then Ver(sk, P ∗
with probability 1.
Succinctness. The size of a tag is bounded by some ﬁxed
polynomial in the security parameter, which is independent
of the number n of inputs taken by the evaluated circuit.
Security. A homomorphic MAC has to satisfy the follow-
ing notion of unforgeability. Let HomMAC-ML be a homo-
morphic MAC scheme as deﬁned above and let A be an
adversary. HomMAC-ML is said to be unforgeable if for ev-
ery PPT adv. A, we have Pr[HomUF−CMAA,HomMAC-ML(λ) =
1] ≤ ǫ(λ) where ǫ(λ) is a negligible function. The experiment
HomUF−CMAA,HomMAC-ML(λ) is the one deﬁned below.
Setup The challenger generates (sk, ek) ←R KeyGen(1λ)
and gives ek to A.
Authentication queries The adversary can adaptively ask
for tags on multi-labels and messages of its choice. Given
a query (L, m) where L = (∆, τ ), the challenger proceeds
as follows: If (L, m) is the ﬁrst query with data set identi-
ﬁer ∆, then the challenger initializes an empty list T∆ = ∅
for data set identiﬁer ∆. If T∆ does not contain a tuple
(τ, ·) (i.e., the multi-label (∆, τ ) was never queried), the
challenger computes σ ←R Auth(sk, L, m), returns σ to A
and updates the list T∆←T∆ ∪ (τ, m). If (τ, m) ∈ T∆ (i.e.,
the query was previously made), then the challenger replies
with the same tag generated before. If T∆ contains a tu-
ple (τ, m′) for some message m′ 6= m, then the challenger
ignores the query.
Veriﬁcation queries The adversary has access to a veriﬁ-
cation oracle as follows: Given a query (P∆, m, σ) from A,
the challenger replies with the output of Ver(sk, P∆, m, σ).
Forgery The adversary terminates the experiment by re-
∆∗ = (P ∗, ∆∗)
∆∗, m∗, σ∗) for some P ∗
turning a forgery (P ∗
868and P ∗ = (f ∗, τ ∗
n). Notice that, equivalently, A
can implicitly return such a tuple as a veriﬁcation query
(P ∗
∆∗, m∗, σ∗) during the experiment.
1 , . . . , τ ∗
Before describing the outcome of this experiment, we re-
view the notion of well-deﬁned programs with respect to a
list T∆ [15]. A labeled program P ∗ = (f ∗, τ ∗
n) is well-
deﬁned with respect to T∆∗ if either one of the following two
cases holds:
1 , . . . , τ ∗
• there exist messages m1, . . . , mn such that the list T∆∗
contains all tuples (τ ∗
Intuitively,
this means that the entire input space of f for data set
∆∗ has been authenticated.
1 , m1), . . . , (τ ∗
n, mn).
• there exist indices i ∈ {1, . . . , n} such that (τ ∗
i , ·) /∈ T∆∗
(i.e., A never asked authentication queries with multi-
label (∆∗, τ ∗
i )), and the function f ∗({mj}(τj ,mj )∈T∆∗ ∪
{ ˜mj}(τj ,·) /∈T∆∗ ) outputs the same value for all possible
choices of ˜mj ∈ M. Intuitively, this case means that the
unauthenticated inputs never contribute to the compu-
tation of f .
To deﬁne the output of the experiment HomUF−CMA, we
∆∗, m∗, σ∗) = 1 and
say it outputs 1 if and only if Ver(sk, P ∗
one of the following conditions holds:
• Type 1 Forgery: no list T∆∗ was created during the game,
i.e., no message m has been authenticated with respect
to a data set identiﬁer ∆∗ during the experiment.
• Type 2 Forgery: P ∗ is well-deﬁned w.r.t. T∆∗ and m∗ 6=
f ∗({mj}(τj ,mj )∈T∆∗ ), i.e., m∗ is not the correct output
of the labeled program P ∗ when executed on previously