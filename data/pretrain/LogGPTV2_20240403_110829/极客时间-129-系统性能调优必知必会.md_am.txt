# 29 | 流式计算：如何通过集群实现实时计算？

大家好，我是陶辉。在上一节课中，我们介绍了MapReduce离线计算技术，该技术适用于处理有边界的存量数据。本节课我们将探讨对于无边界数据的实时流式计算。

## 1. 离线计算与实时流式计算

对于不再变化的存量数据，可以使用MapReduce技术将数据划分到多台主机上并行处理。由于待处理的数据量庞大，通常只能获得分钟级以上的延迟。然而，在某些场景下，业务需求要求在秒级甚至毫秒级的时间内获取运算结果。例如，在电商营销活动中，为了防止“羊毛党”利用大量主机并行地“薅羊毛”，系统需要能够实时分析所有优惠券使用者的特点，并基于业务规则及时封禁相关账号或IP地址，以控制风险并提高活动收益。

## 2. 实现秒级聚合分析

早期的流式计算方案是定期将数据分片，然后在多台主机上并行执行MapReduce计算。然而，这种方法在面对网络不稳定、数据乱序以及复杂业务关系的情况下难以保证准确性。接下来，我们将深入探讨流式计算的工作原理及其常用的数据分片窗口。

### 2.1 有边界数据与无边界数据

- **有边界数据（InBound Data）**：存储在数据库或HDFS等分布式系统中的静态数据，具有明确的开始和结束时间。
- **无边界数据（OutBound Data）**：线上运行中的互联网产品产生的实时数据流，只有开始时间而没有明确的结束时间。

### 2.2 基于固定时间窗口的批处理解决方案

例如，对于分布式监控系统，我们需要基于IP地址、用户账号、请求类型等特征进行定时的聚合统计。假设我们要计算每分钟内所有请求处理时延的平均值，可以按照分钟整点对数据进行分片计算。当时间窗口结束时，返回最终结果。这种设计思想就是基于固定时间窗口的批处理解决方案。

### 2.3 中间状态的使用

为了更均衡地使用计算资源，可以在每个消息到达时计算中间状态，并在窗口结束时将其转换为最终结果。中间状态可以存放在内存或持久化到本地磁盘，以提高可用性。此外，还可以将备份状态存储在远程数据库中，方便计算节点的调度。

### 2.4 基于MapReduce思想的并行计算

流式计算的核心思路是基于MapReduce思想，将同一窗口的数据分发到不同的计算节点进行并行的Map计算，再将映射出的结果Reduce为最终结果。由于流式计算是基于消息事件驱动的，因此它通常直接从Kafka等消息队列中获取输入数据。

### 2.5 有状态计算与无状态计算

- **有状态计算**：在时间窗口内，不同消息之间会互相作用并影响最终结果，如求平均值。
- **无状态计算**：处理到达的数据时，不涉及窗口内的其他数据，如单独判断每个消息中的时延数据以生成告警。

### 2.6 常见窗口类型

- **滑动窗口**：从固定窗口衍生而来，每次计算后只淘汰部分数据，步长向后移动一定时间。
- **计数窗口**：基于事件个数而非时间进行划分。
- **会话窗口**：根据用户的特定行为动态调整窗口大小。

### 2.7 水位线（Watermark）

为了避免乱序事件的影响，可以使用水位线来减少乱序概率。水位线基于事件发生时间而不是系统处理时间来划分窗口，从而提高统计结果的准确性。

## 3. 小结

本节课介绍了流式计算的实现原理及常用的几种分片窗口。对于无边界的实时数据流，我们可以在时间维度上将其切分为不同的窗口，并在空间维度上将每个窗口内的数据分发到不同的节点进行并行计算。常见的流式计算框架包括Apache Flink、Spark和Storm等。通过不同的窗口划分规则，可以实现不同的计算目的，包括以时间驱动的固定窗口、滑动窗口和计数窗口，以及以事件驱动的会话窗口。为了提高准确性，还可以使用带有超时时间的水位线。

## 4. 思考题

你了解Lambda架构吗？该架构通过分别部署MapReduce和流式计算系统，同时完成离线计算与实时流计算。尽管这套系统的IT成本较高，但人们正致力于使用一套系统同时解决这两个问题。你认为这种解决方案是如何实现的？你又是如何看待流式计算的发展方向的？欢迎你在留言区与大家一起探讨。

感谢阅读，如果你觉得这节课对你有所收获，也欢迎你把今天的内容分享给你的朋友。