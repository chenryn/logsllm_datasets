can abuse such data for ﬁngerprinting visited websites; then,
a victim user’s browsing history is stolen by the attacker.
The data usually consists of the key–value pair. The
characters of the key used in cookies or localStorage are
statically deﬁned in each website, and the characters of the
value are often dynamically assigned. Therefore, we use the
key for ﬁngerprinting. We empirically found that value in
localStorage in a certain page is stored in a JSON format.
If the JSON data has an associative array structure,
the
attacker can recursively parse it and extract additional keys
for ﬁngerprinting.
We found that the expiration time of cookies is usually
set as the time generated by adding a certain period (e.g., one
month) to the time of website access. For a page that uses such
a cookie, an attacker can also possibly infer the accessed time
of a target user from the expiration time of the cookie. The
effectiveness of the ﬁngerprinting approach will be examined
in Section IV.
5) Session Hijacking and Injection: As we explain in
detail later in Section III-C, a web proxy relays the cookies
in the HTTP header to transparently ensure HTTP sessions
between the browser and original page. A web proxy attaches
a newly issued cookie with the HTTP header from the rehosted
page. When a user logs in to a certain service through a
web proxy, the user’s browser stores the cookie newly issued
by the web proxy. The attacker can steal this cookie and
hijack HTTP sessions of the original page from the rehosted
malicious page using JavaScript. The cookies used in history
theft described in the previous subsection are written using
JavaScript and those used in this attack are written using HTTP
header; however, both can be stolen using JavaScript. Even
though setting the HttpOnly ﬂag on the relayed cookie is
effective as a countermeasure against this attack, most of the
web rehostings do not adopt it. Note that a session cookie does
not work as a countermeasure, as mentioned in Section II-C.
An attacker can also inject a session into the victim’s
browser and force the victim to log in to the account prepared
by the attacker. This concept, session injection 5, is useful
for tracking the victim’s future behavior. For example, Google
stores the search history log of google accounts on the user
activity page. Video sites and shopping sites automatically
record the history log of content viewed by users like YouTube
and Amazon for each account. Thus, such a log indicates the
victim’s online behavior, which can be retrieved at any time
by the attacker.
Session hijacking only applies to users who actively log
in to a web service through web rehosting, whereas session
injection applies to users who do not log into the service on
their own will. We note that the victim may suspect the session
injection because they will browse the service while logging
into a strange account prepared by the attacker.
C. Rehosting Rules
Attacks described in Section III-B strongly depend on the
rules adopted by web rehosting services; we call such rules
rehosting rules, and they include the mechanism used by a
web rehosting service to rewrite a URL, the ﬁle type that can
be rehosted, and how the browser resources are handled. We
introduce commonly adopted rehosting rules and how attackers
abuse these rules to manipulate browser resources.
URL Rewriting. The most fundamental rule is URL rewriting.
We present how each component of a URL, i.e., scheme,
domain name, and path are changed to be rehosted.
In most cases, the scheme of the rehosted page is changed
to the scheme provided by the web rehosting services. Ex-
ceptions include Google Cache (web archive), which uses the
original scheme of the rehosted website, and Service-α (web
proxy), which depends on the server’s conﬁguration owing to
the OSS application. If a web rehosting service uses only an
HTTP scheme, there is, of course, the risk of a MITM attack
from remote attackers on the network path. Our key insight
is that both the persistent MITM attack (Section III-B1) using
a service worker and AppCache, and privilege abuse (Sec-
tion III-B2) using resource requesting permissions are effective
on only HTTPS-enabled web rehosting services because those
resources need to be operated in a secure context.
We introduced the threat model (Section III-A) on the
basis of the origin uniﬁcation for rehosted pages. In ad-
dition to this case, there are some web rehosting services
that use several subdomains, e.g., us.rehosted.example
and eu.rehosted.example for rehosted pages, which are
mainly for load-balancing. This is not an obstacle for our
attacks because an attacker can rehost malicious pages on each
subdomain by repeating requests to rehost even in this case and
make a victim access those rehosted malicious pages by using
a single landing page containing iframe tags.
Web rehosting provides mainly two types of URL nam-
ing conventions for rehosted pages: (1) URL query con-
vention (used by web proxy and web translator) and (2)
5This is the same type of attack called session ﬁxation.
UNIX-path like convention (used by web archive). An ex-
ample of the former is https://rehosted.example/
rehost?url=evil.example and an example of the lat-
ter is https://rehosted.example/evil.example/.
Between them, there is only a trivial difference in URL parsing
at the server-side, but there is a signiﬁcant difference at the
client-side. The scope in case of the service worker refers to
the path located at the service worker script (i.e., sw.js)
as mentioned in Section III-B1. In the case of URL query
convention, a registered service worker affects all the rehosted
pages. On the other hand, in the case of UNIX-path like
convention, a registered service worker cannot affect them
except for the rehosted page of evil.example.
In addition,
JavaScript code from the page; hence,
succeed in such services.
some web rehosting services eliminate
the attacks cannot
Rehostable File Type. Web proxy and web archive services
can rehost any kind of content with the original MIME Type.
An attacker can exploit this rule to place a malicious service
worker script or an AppCache manifest ﬁle on the origin of
rehosted pages. On the other hand, web translator services gen-
erally only rehost ﬁles with a MIME Type for HTML or plain
text. However, we found that, for web translator, the JavaScript
ﬁle is automatically rehosted when the HTTP-scheme URL of
the JavaScript is set at the src attribute of the script tag
in the page. The reason for this exceptional behavior is to
avoid security errors caused by a mixed content problem [12],
that is, the inconsistency of the scheme of the rehosted HTML
page (HTTPS) and that of the rehosted resource page (HTTP).
According to such exceptional behavior, the URL at the src
attribute is converted into the URL of the rehosted JavaScript,
so an attacker can use this URL as the malicious service worker
script on the origin of the rehosted pages.
Handling Browser Resources. While the origin of the re-
hosted page will be changed to that provided by web rehosting,
web rehosting does not rewrite the JavaScript code6. Thus, all
resources and permissions that are stored via JavaScript on the
rehosted benign page are simply accessible from the rehosted
malicious page.
The handling of cookies derived from the HTTP header
depends on the web rehosting category. Wayback Machine
disables cookie storing by adding a speciﬁc preﬁx to the
header name such as x-archive-orig-set-cookie.
Other web archives and web translators simply discard the
Set-Cookie header. In contrast, the web proxy implicitly
or explicitly relays cookies in the HTTP header in order
to reconstruct the HTTP session between a browser and the
rehosted page. The handling of the cookies among browsers,
web services, and web rehosting is shown in Figure 5. When
a browser logs in to a web service, a cookie named sid
with key, 1234 as the value is generated. If the browser
accesses the web service (e.g., a.example) via a web proxy
explicitly relaying cookies, the name of the cookie is changed
to c[a.example][/][sid]. At
the relayed
cookie stored in the web browser is linked to the domain
name of the web proxy. When the browser tries to access
this time,
6Although it does not affect attack success, Wayback Machine rewrites
google analytics code on archived pages to optimize access analysis as an
exceptional behavior.
7
the attacker can steal
The three web rehosting services adopting HTTP are
vulnerable to typical MITM attacks over the network path,
while the remaining 16 only needed to consider the risks
of attacks feasible only in a secure context. There were 13
services vulnerable to persistent MITM attack, and 12 of them
are vulnerable to the service worker attack, which is the most
powerful of our attacks.
For these services,
the victim’s
activities and privacy-sensitive information, rewrite a part or
all of the viewed content, and replace binary ﬁles or movies;
these can lead to malware infection, phishing, or even political
instigation. If the web rehosting service and rehosted website
are both trustworthy, e.g., reading a CNN news article through
Google Translate, it is difﬁcult for a user to notice if the
content has been modiﬁed by an attacker. For web rehosting
services such as UnblockVideos, it is possible to replace a
movie ﬁle with an attacker-prepared one. To monetize this
attack more directly, the attacker can usually insert advertising
and a cryptominer [9], [39], [62].
As another interesting case study, Google Translate has a
feature that translates user-uploaded local ﬁles such as PDF
and Word documents. We noticed that
the domain of the
website showing the translation result is the same as that
of the rehosting website. This means that a user, who has
accessed an attacker-prepared malicious site before and has
a service worker implanted, can have the translated version
of their uploaded documents stolen by the attacker. Thus, if
a document with classiﬁed or privacy information is uploaded
for translation, which is not a rare use case, it will be stolen
by a third party under this attack.
The rest of the services are not vulnerable to the attacks
that use the service worker owing to the path constraints on the
service workers or the inability to rehost JavaScript code. Of
these, for Wayback Machine, a URL is speciﬁed UNIX-path
like, but an attacker can instead use AppCache, which works
regardless of the path to replace all fallback requests with a
webpage prepared by an attacker. Furthermore, we conﬁrmed
that by saving 100 cookies of 200 bytes with a JavaScript
code on the rehosted malicious page, all pages fall back on
the Wayback Machine. All the pages viewed by the victim,
therefore, can be replaced with pages prepared by the attacker,
even in the Wayback Machine.
We noticed that translators provided by Google, Yandex,
Bing, Baidu, and PROMT place rehosted content in iframe,
which is protected by a sandbox attribute. These services were
safe against privilege abuse attacks, but the rest of the services
were vulnerable to them. We found that a ﬂaw enabling the
credential theft attack is present in all of the investigated
web proxy services. Furthermore, a browsing history theft is
feasible against all investigated services that had JavaScript
enabled. For the number of ﬁngerprintable websites, refer to
Section IV-B.
For all web proxy services that adopt explicit relay of
sessions described in Section III-C, we found that it is possible
to hijack the session or inject an attacker’s session. Moreover,
even in cases where the implicit relay is adopted, such as
in Sitenable Web Proxy and ProxFree,
is still possible
to steal the session used for managing web rehosting users;
consequently, it is possible to hijack the session of rehosted
it
8
Fig. 5. HTTP cookie relaying in a web proxy.
a.example, the server of the web proxy converts the name
of the cookie into its original name and adds it to the request to
access a.example. At the web proxy that implicitly relays
cookies, the cookie between a.example and the server of
the web proxy is mapped to a corresponding cookie between
the browser and the server of the web proxy from a translation
table. The table associates users using the web proxy with the
sessions of rehosted website. Both methods of cookie relay
transparently maintain HTTP sessions between web browsers
and web servers. Our attack can directly hijack sessions or
inject session IDs for web proxy services that explicitly relay
cookies. For web proxy services that implicitly relay cookies,
our attacks can still hijack sessions or inject the generated
session IDs although the original session IDs are hidden.
IV. FEASIBILITY ANALYSIS
In this section, we analyze the feasibility of the attacks we
introduced in Section III-B. We ﬁrst examine whether the 21
popular web rehosting services are vulnerable to our attacks.
We then investigate the ﬁngerprintability of websites to assess
the effectiveness of the history theft attack. Finally, we analyze
the differences in the resource access behaviors of browsers.
A. Vulnerable Rehosting Services in the Wild
We conducted vulnerability checks on services by actually
attacking them. We targeted 21 web rehosting services listed
in Section II-A. Note that neither the servers nor users were
impacted, as our experiment only checked for unexpected
accessibility to client-side browser resources in our own testing
environment.
Surprisingly, against 18 of the investigated services, at least
one of our attacks succeeded. Of those, three services denied
hotlinking, limiting the feasibility of the attacks; however, the
rest, including those run by world-famous providers such as
Google, Bing (Microsoft), and Baidu, allow hotlinking. On the
other hand, against FreezePage, GenMirror, and FilterBypass,
all the attacks were infeasible as the services all force-remove
JavaScript code included in webpages when rehosting them.
yWebRehostinga.exampleset-cookie: “sid=1234”a.exampleset-cookie: “sid=1234”set-cookie: “c[a.example][/][sid]=1234”yWebRehostinga.exampleset-cookie:“sid=1234”set-cookie:“user=abcd”DirectExplicit relayImplicit relayUserDomainKeyValueabcda.examplesid1234….TABLE IV.
PARTY WHO DID NOT GENERATE THE URL OF THE REHOSTED PAGE CAN ACCESS IT, WHILE “SW” STANDS FOR SERVICE WORKER. “note” INDICATES AN
VULNERABILITIES OF THE 21 SERVICES INVESTIGATED. VULNERABLE ((cid:32)) AND SECURE ((cid:35)). “HOTLINK” SHOWS WHETHER A THIRD
EXCEPTIONAL VULNERABILITY DETAILED IN THE BODY.
At least one
Vulnerability
Persistent MITM
SW AppCache
Privilege
Abuse
Credential
Theft
History
Theft
Session
Hijacking & Injection
Category
Rehosting Service
ProxySite
Hide My Ass!
Hide me
Sitenable Web Proxy
FilterBypass
ProxFree
toolur
hidester
GenMirror
UnblockVideos
Service-α
Google Translate
Bing Translator
Weblio
PROMT Online
Service-β
Yandex.Translate
Baidu Translate
Wayback Machine
Google Cache
FreezePage
Proxy
Translator
Archive
Scheme
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTP/S
HTTPS
HTTPS
HTTPS
HTTP
HTTPS
HTTPS
HTTP
HTTPS
HTTP/S
HTTP
Hotlink
no
yes
no
yes
no
yes
yes
no
no
yes
yes/no
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)