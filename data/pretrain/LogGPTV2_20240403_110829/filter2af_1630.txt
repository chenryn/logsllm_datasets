# 【技术分享】通过重定向绕过CSP目录限制

## 译文声明
本文为翻译文章，原文作者：lorexxar。  
原文地址：[链接](https://chloe.re/2016/07/25/bypassing-paths-with-open-redirects-in-csp/)  
译文仅供参考，具体内容和含义以原文为准。

### 概述
内容安全策略（CSP）是一种非常强大的安全机制，用于防止跨站脚本攻击（XSS）。最近阅读了一篇国外的文章，介绍了如何利用302重定向来绕过CSP的域限制。这不仅在服务器端请求伪造（SSRF）中有特殊表现，在CSP中也同样适用。

### 漏洞分析
让我们逐步分析这个漏洞的成因。

#### 测试页面
假设我们有一个包含CSP头的测试站点，其结构如下：
- 站点根目录为 `/test/`
- JavaScript 文件位于 `/test/js/` 目录下
- CSP 头仅允许两个域：
  - `http://127.0.0.1/test/js/`
  - `http://xss.cc/the_only_allow_dir/`

#### 漏洞条件
1. **存在一个重定向页面**：在第一个允许的域内存在一个可以定义重定向的页面，例如 `302.php`。
2. **允许的外域**：第二个允许的域 `http://xss.cc/` 下有一个可以上传JavaScript文件的目录，例如 `http://xss.cc/myjs/a.js`，该文件内容为 `alert(32)`。

#### 利用过程
1. 在 `302.php` 中设置重定向到 `http://xss.cc/myjs/a.js`。
2. 打开测试页面，由于CSP允许 `http://xss.cc/` 域下的JavaScript执行，因此会成功弹出 `alert(32)`。

### 漏洞的限制及必备条件
尽管上述方法成功绕过了CSP的域限制，但存在一些限制：

1. **不允许302所在域**：如果将 `302.php` 放在站点根目录下，而CSP只允许 `http://127.0.0.1/test/js/` 和 `http://xss.cc/test/`，则 `302.php` 不在允许的域内，CSP会拦截重定向。
2. **去掉外域的允许**：即使 `302.php` 跳转到 `http://xss.cc/myjs/a.js`，但如果删除了 `http://xss.cc/` 的CSP策略，CSP仍然会拦截。
3. **直接使用外域**：即使允许外域，直接访问 `http://xss.cc/myjs/a.js` 也不会成功。
4. **发送数据到XSS平台**：尝试通过 `XMLHttpRequest` 发送数据到 `http://xss.cc/`，如果没有设置 `default-src`，CSP会拦截跨域请求。

### 结论
要成功利用此漏洞，需要满足以下条件：
1. 在 `script-src` 允许的域内存在一个重定向页面，通常出现在登录或注销页面。
2. 在 `script-src` 允许的域内存在任意文件上传点。
3. 有特别的方式跨域发送请求，或者有站内域可以接受请求。

虽然这些条件看起来比较苛刻，但实际上在某些情况下很容易满足。例如，某个站点调用某个CDN，或者 `script-src` 设置为 `example.com/scripts/` 和 `google.com/recaptcha/`，而 `google.com/script/*` 下有一个恶意的 `evil.js`，且站内存在重定向功能。

### 为什么CSP会发生这样的漏洞？
原作者提到，为了避免此类问题，应严格限制CSP中允许的范围，并禁用重定向功能。更多关于重定向的内容可以参考相关文档。

希望这篇分享对你有所帮助！