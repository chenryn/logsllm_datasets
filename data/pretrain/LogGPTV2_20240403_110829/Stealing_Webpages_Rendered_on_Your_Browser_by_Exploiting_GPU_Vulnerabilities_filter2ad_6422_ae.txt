(d) Firefox with W9000.
Figure 13. RGB histogram distance between webpage image snapshots
and dumps.
We further check inference accuracy as explained in
Section V-D. We correctly infer ∼50% and ∼22% of the
randomly selected 100 front pages using the Chromium web
browser with NVIDIA and AMD GPUs, respectively, which
is worse than that of the attack using known GPU memory
dumps, but the results of NVIDIA GPUs are still meaningful.
F. Attack on Victims Browsing Multiple Webpages
Lastly, we identify whether we can attack a victim who si-
multaneously visits multiple webpages using tabs or separate
windows. Using multiple tabs or windows of web browsers
is common in a desktop environment so that considering
30
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:35 UTC from IEEE Xplore.  Restrictions apply. 
SamewebpageDifferentwebpage0.00.10.20.30.40.50.60.70.80.9HistogramdistanceSamewebpageDifferentwebpage0.00.10.20.30.40.50.60.7HistogramdistanceSamewebpageDifferentwebpage0.00.10.20.30.40.50.60.7HistogramdistanceSamewebpageDifferentwebpage0.00.10.20.30.40.50.60.7HistogramdistanceForegroundBackground0.00.10.20.30.40.50.60.70.8PixelsequencesimiliarityForegroundBackground0.00.10.20.30.40.50.6HistogramdistanceWhile neither GPU vendors nor researchers provide such
solutions, GPU programs dealing with sensitive data should
delete global memory pages before deallocating them, and
clear the local and private memories before context switches.
The graphics APIs, however, provide no functions to clear
memory contents. Therefore, graphics programs have to use
the computing APIs for manually clearing allocated GPU
memory, though it results in performance degradation and
high programming complexity.
VII. RELATED WORK
In this section, we introduce some related studies of this
work.
A. Remote Pixel Stealing in HTML5
Numerous researchers [34]–[36] consider security attacks
exploiting HTML5 CSS ﬁlters that allow web developers
to apply various graphics effects on webpages using host
GPUs. By applying CSS ﬁlters to a target webpage loaded
in an iframe while measuring the completion time, the CSS
ﬁlter-based attacks can recognize a user’s login status and
steal pixels of the target webpage. However, the attacks have
restricted coverage because (1) they should deceive victims
to visit their malicious webpage and (2) many webpages
disallow web browsers to load them in an iframe to avoid
security attacks.
B. Security Attacks using GPUs
GPU-based cracking against passwords or hash values are
well-known security attacks [37]. Some academic studies
also utilize GPUs for conducting general security attacks.
Vasiliadis et al. [38] shows the possibility of malware
obfuscation using GPUs. First,
they load an encrypted
malware on a host’s main memory and map its memory
address to GPU memory to enable direct access on the
memory from GPUs, also known as zero-copy memory [2].
Next, their code decrypts the malware, and the host ﬁnally
executes it. Ladakis et al. [39]’s GPU-based keylogger also
relies on memory-mapped IOs. The keylogger ﬁrst uses
a rootkit for mapping the keybuffer in kernel memory to
GPU memory. The GPU part of the keylogger then records
keystrokes through the mapped keybuffer, and lastly returns
the recorded keystrokes to the host.
C. General Applications of GPUs
Several researchers conduct various studies to utilize
GPUs for solving general and computation-intensive prob-
lems. For example, researchers try to use GPUs for in-
creasing the performance of AES [13]–[15] and RSA [16],
[17] algorithms. Some researchers also implement high-
speed intrusion detection systems (IDSs) [10], [11] and
an SSL accelerator [12]. Other researchers also introduce
GPU-accelerated routers for IP network [9] and database
accelerators [7], [8].
(a) Pixel sequence.
(b) RGB histogram.
Figure 15. Comparisons between combined dumps and dumps of ﬁrstly
and secondly rendered webpages in two windows (Chromium and GTX
780).
We lastly check inference accuracy: the combined match-
ing correctly infers 98.6% of webpages loaded in the fore-
ground tabs and 90.8% of webpages loaded in the secondly
rendered windows. We presume that
the relatively low
accuracy of the inference on the secondly rendered windows
is due to the unoverwritten textures of the ﬁrstly rendered
windows. Consequently, when a victim visits a number of
webpages using a GPU-accelerated web browser, attackers
can accurately infer some of the webpages either loaded in
the foreground tab or rendered in the lastly opened window.
VI. DISCUSSION
A simple solution for preventing the proposed attack
is clearing newly allocated global memory pages as We-
bGL [20] does. Moreover, GPUs need to delete the per-CU
local memory and per-PE private memory at GPU context
switches.
Unfortunately, we expect that GPU vendors are unwilling
to embrace such methods because they bring performance
degradation. For example, NVIDIA targets to reduce the cost
of the GPU context switch below 25 µs [33]. However, it
takes 79 µs to delete the entire local and private memories
when we execute our optimized GPU memory deletion
program in an NVIDIA GeForce GTX 780 GPU, which is
approximately three times longer than the context switching
time. The GPU vendors may not accept such huge overhead
because their main concerns are performance and power
efﬁciency. Consequently, we demand new hardware- and
software-level solutions for efﬁciently clearing GPU mem-
ory, which cannot be accomplished without GPU vendors’
efforts.
31
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:35 UTC from IEEE Xplore.  Restrictions apply. 
FirstSecond0.00.20.40.60.81.0PixelsequencesimiliarityFirstSecond0.000.050.100.150.200.250.30HistogramdistanceThe preceding applications, however, may suffer from
serious threats because of the security problems discussed in
this work. For example, attackers can extract secret keys and
plaintext from GPU-based cryptographic engines without a
root privilege. Furthermore, they can capture packets from
GPU-based IDSs, SSL accelerators, and routers. Conse-
quently, both GPU programmers and researchers need to
be aware of the security problems of GPUs that this work
considers.
VIII. CONCLUSION
GPUs become more powerful and general, and many ap-
plications increase their performance using them. However,
no in-depth study has considered their security problems.
In this paper, we investigated the security vulnerabilities of
GPUs, and described attacks that reveal a victim’s sensi-
tive data kept in GPUs. We further applied the proposed
attacks on popular programs using GPUs: the Chromium
and Firefox web browsers utilizing GPUs for faster webpage
rendering. We were able to successfully obtain rendered
webpage textures remaining in GPU memory and accurately
infer their original webpages. Therefore, both GPU vendors
and programmers need to know that GPU programs can be
in danger, and prepare countermeasures to cope with such
threats.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
for their insightful comments and suggestions. This research
was supported by the MSIP, Korea, under the ITRC support
program supervised by the NIPA through CMEST (NIPA-
2013-H0301-13-3002) and NRF Grant funded by the Korean
Government (NRF-2012-Global Ph.D. Fellowship Program).
REFERENCES
[1] NVIDIA, “NVIDIA’s next generation CUDA compute archi-
tecture: Kepler GK110,” 2012.
[2] ——. CUDA C programming guide version 5.5. http://docs.
nvidia.com/cuda/cuda-c-programming-guide/.
and
“DirectX
[3] Microsoft,
graphics
gaming,”
http://msdn.microsoft.com/en-us/library/windows/desktop/
ee663274(v=vs.85).aspx.
[4] D. Shreiner, G. Sellers, J. M. Kessenich, and B. M. Licea-
Kane, OpenGL Programming Guide: The Ofﬁcial Guide to
Leaning OpenGL. Addison Wesley, 2013.
[5] B. Gaster, L. Howes, D. R. Kaeli, P. Mistry, and D. Schaa,
Heterogeneous Computing with OpenCL. Morgan Kauf-
mann, 2012.
[6] NVIDIA, “Tesla supercomputing HPC industrical case stud-
ies,” http://www.nvidia.com/object/tesla-case-studies.html.
[7] P. Bakkum and K. Skadron, “Accelerating SQL database
operations on a GPU with CUDA,” in Proceedings of the
3rd Workshop on General-Purpose Computation on Graphics
Processing Units (GPGPU), 2010.
32
[8] H. Wu, G. Diamos, S. Cadambi, and S. Yalamanchili, “Kernel
weaver: Automatically fusing database primitives for efﬁ-
cient GPU computation,” in Proceedings of the 45th Annual
IEEE/ACM International Symposium on Microarchitecture
(MICRO), 2012.
[9] S. Han, K. Jang, K. Park, and S. Moon, “PacketShader: a
GPU-accelerated software router,” in Proceedings of the ACM
SIGCOMM 2010 Conference, 2010.
[10] G. Vasiliadis, M. Polychronakis, and S. Ioannidis, “MIDeA:
intrusion detection architecture,” in Pro-
the 18th ACM Conference on Computer and
A multi-parallel
ceedings of
Communications Security (CCS), 2011.
[11] M. Jamshed, J. Lee, S. Moon, I. Yun, D. Kim, S. Lee,
Y. Yi, and K. Park, “Kargus: a highly-scalable software-
based intrusion detection system,” in Proceedings of the 19th
ACM Conference on Computer and Communications Security
(CCS), 2012.
[12] K. Jang, S. Han, S. Han, S. Moon, and K. Park, “SSLShader:
Cheap SSL acceleration with commodity processors,” in
Proceedings of the 8th USENIX Symposium on Networked
Systems Design and Implementation (NSDI), 2011.
[13] D. L. Cook, J. Ioannidis, A. D. Keromytis, and J. Luck,
“CryptoGraphics: Secret key cryptography using graphics
cards,” in Proceedings of The Cryptographer’s Track at RSA
Conference 2005 (CT-RSA), 2005.
[14] J. Yang and J. Goodman, “Symmetric key cryptography
on modern graphics hardware,” in Proceedings of the 13th
International Conference on the Theory and Application of
Cryptology and Information Security (ASIACRYPT), 2007.
[15] O. Harrison and J. Waldron, “Practical symmetric key cryp-
tography on modern graphics hardware,” in Proceedings of
the 17th USENIX Security Symposium, 2008.
[16] ——, “Efﬁcient acceleration of asymmetric cryptography on
graphics hardware,” in Proceedings of the 2nd International
Conference on Cryptology in Africa (AFRICACRYPT), 2009.
[17] R. Szerwinski and T. G¨uneysu, “Exploiting the power of
GPUs for asymmetric cryptography,” in Proceedings of the
10th Workshop on Cryptographic Hardware and Embedded
Systems (CHES), 2008.
[18] J. T. Adriaens, K. Compton, N. S. Kim, and M. J. Schulte,
“The case for GPGPU spatial multitasking,” in Proceedings of
the 18th IEEE International Conference on High Performance
Computer Architecture (HPCA), 2012.
[19] VirtualGL. The VirtualGL project. http://www.virtualgl.org.
[20] Khronos, “WebGL security,” http://www.khronos.org/webgl/
security/.
[21] J. Chow, B. Pfaff, T. Garﬁnkel, and M. Rosenblum, “Shred-
ding your garbage: Reducing data lifetime through secure
deallocation,” in Proceedings of the 14th USENIX Security
Symposium, 2005.
[22] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and M. Rosen-
blum, “Understanding data lifetime via whole system simu-
lation,” in Proceedings of the 13th USENIX Security Sympo-
sium, 2004.
[23] T. Garﬁnkel, B. Pfaff, J. Chow, and M. Rosenblum, “Data
lifetime is a system problem,” in Proceedings of the 11th
ACM SIGOPS European Workshop, 2004.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:35 UTC from IEEE Xplore.  Restrictions apply. 
[24] A. M. Dunn, M. Z. Lee, S. Jana, S. Kim, M. Silberstein,
Y. Xu, V. Shmatikov, and E. Witchel, “Eternal sunshine
of the spotless machine: Protecting privacy with ephemeral
channels,” in Proceedings of the 10th USENIX Symposium
on Operating Systems Design and Implementation (OSDI),
2012.
[25] R. Di Pietro, F. Lombardi, and A. Villani, “CUDA leaks:
Information leakage in GPU architectures,” ArXiv e-prints,
2013.
[26] C. Maurice, C. Neumann, O. Heen, and A. Francillon, “Con-
ﬁdentiality issues on a GPU in a virtualized environment,” in
Proceedings of the 18th International Conference on Finan-
cial Cryptography and Data Security (FC), 2014.
[27] R. Love, Linux Kernel Development. Addison Wesley, 2010.
[28] S. Jana and V. Shmatikov, “Memento: Learning secrets from
process footprints,” in Proceedings of the 33rd IEEE Sympo-
sium on Security and Privacy (Oakland), 2012.
[29] K. Zhang and X. Wang, “Peeping tom in the neighborhood:
Keystroke eavesdropping on multi-user systems,” in Proceed-
ings of the 18th USENIX Security Symposium, 2009.
[30] R. Meltzer, C. Zeng, and C. Cecka, “Micro-benchmarking the
C2070,” in GPU Technology Conference, 2013.
[31] E. Bingham and H. Mannila, “Random projection in dimen-
sionality reduction: Applications to image and text data,”
in Proceedings of the 17th ACM SIGKDD Conference on
Knowledge Discovery and Data Mining (KDD), 2001.
[32] A. Hidayat. PhantomJS: Headless WebKit with JavaScript
API. http://phantomjs.org.
[33] NVIDIA, “NVIDIA’s next generation CUDA compute archi-
tecture: Fermi,” 2009.
[34] R. Kotcher, Y. Pei, P. Jumde, and C. Jackson, “Cross-
origin pixel stealing: Timing attack using CSS ﬁlters,” in
Proceedings of the 20th ACM Conference on Computer and
Communications Security (CCS), 2013.
[35] P. Stone, “Pixel perfect
Blackhat USA, 2013.
timing attacks with HTML5,” in
[36] A.
Barth,
“Adam barth’s
schemehostport.com/2011/12/timing-attack-on-css-shaders.
html.
proposal,”
http://www.
[37] D. Goodin, “25-GPU cluster cracks every standard Windows
password in <6 hours.”
[38] G. Vasiliadis, M. Polychronakis, and S. Ioannidis, “GPU-
assisted malware,” in Proceedings of the 5th International
Conference on Malicious and Unwanted Software (Malware),
2010.
[39] E. Ladakis, L. Koromilas, G. Vasiliadis, M. Polychronakis,
and S. Ioannidis, “You can type, but you can’t hide: A stealthy
GPU-based keylogger,” in Proceedings of the 6th European
Workshop on System Security (EuroSec), 2013.
33
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:35 UTC from IEEE Xplore.  Restrictions apply.