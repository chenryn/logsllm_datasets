element expresses the similarity between a pair of items, and
the Cosine Similarity is computed between vectors of items
(e.g., user ratings for each item).
If ratings are binary values (e.g., viewed/not viewed), as in
one of our applications (see Section III), the Cosine Similarity
between items a and b is:
{Sim}ab =
Cab√
Ca · Cb
(1)
where Cab, Ca, and Cb denote, respectively, the number of
people who rated both a and b, a, and b. Given the similarity
matrix, we can identify the nearest neighbors for each item as
the items with the highest correlation values. The ﬁnal model
then consists of the identity of the nearest neighbors and their
correlation values (or weights) which are used in the prediction
process, i.e., the items that should be recommended.
Note that, with ItemKNN, given the item-to-item matrix,
each user could independently compare their ratings with the
nearest neighbors of each item in the model. Upon ﬁnding a
match, the weight is added to the prediction score for that item.
The items are then ranked by their prediction scores and the
top K are taken as recommendations.
E. Exponential Weighted Moving Average (EWMA)
Exponential Weighted Moving Average (EWMA) mod-
els [62] can predict future values based on past values weighted
with exponentially decreasing weights toward older values.
Given a signal over time r(t), we indicate with ˜r(t + 1) the
predicted value of r(t + 1) given the past observations, r(t(cid:48)),
at time t(cid:48) ≤ t. Predicted signal ˜r(t + 1) is estimated as:
t(cid:88)
˜r(t + 1) =
α(1 − α)t−t(cid:48)
r(t(cid:48))
t(cid:48)=1
where α ∈ (0, 1) is the smoothing coefﬁcient, and t(cid:48) = 1, . . . , t
indicates the training window, i.e., 1 corresponds to the oldest
observation while t is the most recent one.
in a private and distributed way,
In the rest of this work, we present efﬁcient techniques
to estimate,
the training
datasets required for ItemKNN-based Recommender System,
Exponential Weighted Moving Average (EWMA) modeling,
as well as median and other frequency statistics. The mech-
anisms combine traditional linear aggregation with sketches,
for efﬁciency, and, when needed, differential privacy to limit
information leakage.
III. PRIVATE RECOMMENDER SYSTEMS FOR
STREAMING SERVICES
Media streaming services are becoming increasingly popu-
lar as numerous dedicated providers (e.g., Netﬂix, Amazon,
Hulu) as well as “traditional” broadcasting services (e.g.,
BBC, CNN, Al-Jazeera) offer digital access to TV shows,
movies, documentaries, and news. One of the providers’ goals
is often continuous user engagement, thus, new content should
periodically be suggested to users based on their interests.
These recommendations are usually provided by means of
recommender systems [3, 41] like ItemKNN (cf. Section II-D),
which typically require the full availability of users’ ratings,
whereas, we focus on a model where a provider like the BBC
provides recommendations to its users, e.g., on iPlayer, without
tracking their preferences and viewings. Note that iPlayer does
not actually require users to register or have an account, which
further motivates the need to protect users’ privacy.
A. Overview
We present a novel privacy-friendly recommender system
where the ItemKNN algorithm is trained using only aggregate
statistics. Aiming to build a global matrix of co-views (i.e.,
pairs of programs watched by the same user) in a privacy-
preserving way, we rely on (i) private data aggregation based
on secret sharing (inspired by the “low overhead protocol”
in [47]), and (ii) the Count-Min Sketch data structure to
reduce the computation/communication overhead, trading off
an upper-bounded error with increased efﬁciency.
Recommendations are derived, based on ItemKNN, as
follows: users’ interests are modeled as a (symmetric) item-
to-item matrix I = {0, 1}M×M , where Iab is set to 1 if the
user has watched both programs a and b and to 0 otherwise.
Iaa is set to 1 if the user has watched the program a. The
Cosine Similarity {Sim}ab between programs a and b can
be computed from item-to-item matrices using Equation 1.
The Cosine Similarity is then used by each user to derive
personalized recommendations as described in Section II-D.
System Model. Our system involves a tally (e.g., the BBC)
and a set of users, and no other trusted/semi-trusted authority:
1) Users, possibly organized in groups, compute their (se-
cret) blinding factors, based on the public keys of the
other users, in such a way that they all sum up to
zero. They encrypt their local Count-Min Sketch entries
(representing their co-view matrix) using these blinding
factors, and send the resulting ciphertexts to the tally.
2) The tally receives the encrypted Count-Min Sketch
from each user, aggregates the encrypted counts, and
decrypts the aggregates. These are broadcast back to the
users, who use them to recover an estimate of the global
similarity matrix and derive personalized ItemKNN-based
recommendations.
Notation. In the rest of this section, we denote with N the
number of users, with M the total number of items, and with
L = d · w the number of items in a Count-Min Sketch table.
Also, let G be a cyclic group of prime order q for which the
Computational Difﬁe-Hellman problem (CDH) is hard and g
be the generator of the same group. H : {0, 1}∗ → Zq denotes
a cryptographic hash function mapping strings of arbitrary
length to integers in Zq. Finally, “||” denotes the concatenation
operator and a ∈r A means that a is sampled at random from
A. We assume the system runs on input public parameters
G, g, q, where g generates a group of order q in G.
B. Protocol
Public keys of all users are distributed to each other, using a
public bulletin board or the tally itself.
As discussed later in this section, users might be orga-
nized in groups in order to facilitate aggregation. To ease
presentation, we discuss the protocol steps for a single group
of users, as combining aggregates from different groups is
trivial and can be done, in the clear, by the tally.
input
vector
an
assume
data
Sketch
holds
construction. We
of
Count-Min
each
user Ui
points
I = {Ic ∈ N, c = 1, . . . , T}, which represents Ui’s co-view
matrix (i.e., T = M · M/2). First, Ui initializes a Count-Min
Sketch table Xi with all zero entries. In the following, we
represent Ui’s Count-Min Sketch table Xi ∈ Nd×w as a vector
of length L = d · w. Then, Ui encodes I in the Count-Min
Sketch using the update procedure described in Section II-B,
where the following pairwise-independent hash function is
employed:
h(x) = ((ax + b) mod p) mod w
(cid:96)=1 (with L = d · w as per Deﬁnition 1).
for a (cid:54)= 0, b random integers modulo a random prime p. At
the end of this step, Ui has built a Count-Min Sketch table
Xi = {Xi(cid:96)}L
Encryption. To participate in the privacy-preserving sketch
aggregation, each user Ui ﬁrst needs to generate blinding
factors. At round s, for each (cid:96) = 1, . . . , L, user Ui computes:
ki(cid:96) =
H(yxi
j ||(cid:96)||s) · (−1)i>j mod q
N(cid:88)
where
j=1
j(cid:54)=i
(−1)i>j :=
(cid:26)−1
1
if i > j
otherwise
Note that the sum of all ki(cid:96)’s equals to zero:
N(cid:88)
N(cid:88)
N(cid:88)
ki(cid:96) =
H(yxi
j ||(cid:96)||s) · (−1)i>j = 0
i=1
i=1
j=1
j(cid:54)=i
Then, for each entry Xi(cid:96), Ui encrypts Xi(cid:96) as bi(cid:96) = Xi(cid:96) +
ki(cid:96) mod 232, as only 32 bits of bi(cid:96) are enough for our
application, and sends the resulting ciphertext to the tally.
Aggregation. The tally receives the ciphertexts from the N
users and (obliviously) aggregates the sketches. Speciﬁcally,
for (cid:96) = 1, . . . , L, it computes:
N(cid:88)
N(cid:88)
N(cid:88)
N(cid:88)
C(cid:96) =
bi(cid:96) =
ki(cid:96) +
Xi(cid:96) =
Xi(cid:96) mod 232
i=1
i=1
i=1
i=1
where C(cid:96) denotes the (cid:96)-th item in the aggregate Count-Min
Sketch table. {C(cid:96)}L
(cid:96)=1, are broadcast back to the users (but
can obviously be used locally at the tally too), who use
them to recover an estimate of the global matrix and derive
personalized recommendations via the ItemKNN algorithm.
We now present the details of our proposed protocol. Its
cryptographic layer is also summarized in Figure 1.
Setup. Each user Ui (i ∈ [1, N ]) generates a private key xi ∈r
G, and computes and publishes public key yi = gxi mod q.
Fault Tolerance. If, during the aggregation phase, only a
subset of users report their values bi(cid:96) to the tally, the sum
of the ki(cid:96)’s is no longer equal to zero and the aggregate items
C(cid:96) cannot be decrypted. However, it is possible to recover as
follows: Let U on denote the list of users who have submitted
4
User Ui (i ∈ [1, N ])
(2) ∀(cid:96) = 1, . . . , L, ki(cid:96) := (cid:80)
j(cid:54)=i
∀(cid:96) = 1, . . . , L, bi(cid:96) := Xi(cid:96) + ki(cid:96) mod 232
yi
(1) xi ∈r G, yi := gxi mod q
j ||(cid:96)||s) · (−1)i>j mod 232  {yj}j∈[1,N ]
H(yxi
{bi(cid:96)}L
(cid:9)L
U on

H(yxi
j ||(cid:96)||s) · (−1)i>j mod 232
(cid:8)k(cid:48)
i(cid:96)
(4) ∀(cid:96) k(cid:48)
i(cid:96)
:=(cid:80)
j(cid:54)=i,
j(cid:54)∈U on
Tally
-
(cid:96)=1 - (3) Fault recovery (if needed)
(cid:96)=1 - (5) ∀(cid:96) = 1, . . . , L, C(cid:48)
(cid:96) :=
(cid:32) (cid:80)
i∈U on
(cid:33)
bi(cid:96) − (cid:80)
i∈U on
k(cid:48)
i(cid:96)
mod 232
Figure 1: Cryptographic layer of our private recommender system for online streaming services. At setup (1), users compute their secret
share and send their public key to the tally, who broadcasts them to the other users. During the encryption phase (2), each user computes
the blinding factors, encrypts their Count-Min Sketch and sends it to the tally. In case not all users have sent the data, the tally broadcasts
U on, the subset of users that did (3). These compute new blinding factors and send them to the tally (4). Aggregate sketches are then
recovered by the tally (5).
the data in the aggregation phase. The tally sends U on to
each Ui ∈ U on. Then, Ui computes, for each (cid:96) = 1, . . . , L,
k(cid:48)
i(cid:96)
=
H(yxi
j ||(cid:96)||s) · (−1)i>j mod q
N(cid:88)
j=1
j(cid:54)=i,j(cid:54)∈U on
and sends these values back to the tally.
Assuming all users in U on submit the values k(cid:48)
i(cid:96), the
tally can recover the entries in the aggregate sketches (for
users in U on) by computing:
(cid:32) (cid:88)
bi(cid:96) − (cid:88)
i∈U on
i∈U on
(cid:33)
C(cid:48)
(cid:96) =
k(cid:48)
i(cid:96)
mod 232
Groups. Although the protocol can cope with faults, we should
nonetheless minimize the probability of missed contributions.
Moreover, as discussed in Section III-D, the protocol’s com-
plexity also depends on the number of users and, in the case
of iPlayer, there can be peaks of hundreds of thousands of
users per hour1. Consequently, we need to organize users
into reasonably sized groups. As mentioned earlier, combining
aggregates from different groups is straightforward and can be
done, in the clear, by the tally.
We argue that a good choice is between 100 and 1,000
users per group, as also supported by our empirical evaluation
presented later. There could be a few different ways to form
groups: for instance, the tally could group users in physical
proximity and/or select users that are watching/listening a
video with at least a couple of minutes left to watch. Also
note that users not involved in the protocol (or having limited
“history”) can get recommendations too as the tally can still
provide them with the global co-view matrix, which, even
though it does not include their own contribution, can be used
by the ItemKNN algorithm to derive recommendations.
Security Analysis. The security of our scheme, in the honest-
but-curious model, is straightforwardly guaranteed by that of
the “low overhead” private aggregation scheme by Kursawe
et al. [47], which is secure under the CDH assumption. We
modify it to cope with users faults and to aggregate Count-Min
Sketch entries, rather than the actual data, and this does not
1http://downloads.bbc.co.uk/mediacentre/iplayer/iplayer-performance-may15.pdf
affect the privacy properties of the scheme. In case of passive
collusions between users,
the conﬁdentiality of the data
provided by the non-colluding users is still preserved. Finally,
note that malicious active users could report fake values
in order to invalidate the ﬁnal aggregation values, however,
protocol’s integrity could be preserved using veriﬁable tools
such as zero-knowledge proofs and commitments, an extension
we leave as part of future work, along with considering a
malicious tally.
C. Prototype Implementation
We have implemented the tally’s functionalities as a web
application running on the server-side JavaScript environment
Node.js (or Node for short).2 We also use Express.js3 to orga-
nize our application into a Model View Controller (MVC) web
architecture and Socket.io4 to set up bidirectional web-socket
connections. Integrating our solution is as simple as installing
a Node module through the Node Package Manager (NPM)
and importing it from any web application, thus requiring no
familiarity with the inner workings of the cryptographic and
aggregation layers.
The module for user’s functionalities is modeled as the
client-side of the web application and can be run as simple
JavaScript code embedded on a HTML page. Therefore, it re-
quires no deployment or installation of any additional software
by the users, but runs directly in the browser, transparently,
when users visit tally’s website. Our JavaScript