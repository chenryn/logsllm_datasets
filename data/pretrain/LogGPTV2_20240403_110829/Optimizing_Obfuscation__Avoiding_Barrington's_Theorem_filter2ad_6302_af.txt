ind(j) = {i ∈ [n] : inp1(i) = j} ∪ {i ∈ [n] : inp2(i) = j} .
Step 1: Randomizing the relaxed matrix branching program BP. The obfuscator O
(cid:48)
randomizes the branching program in two steps using procedures randBP and randBP
described
in Section 4. It begins by sampling a large enough prime p of Ω(n) bits.
20
(cid:16)
(cid:17)
p
for all i ∈ [n], b1, b2 ∈ {0, 1}.
(cid:48)
2. It then executes the procedure randBP
inp1, inp2, ˜s, (cid:8) ˜Bi,b1,b2
above to get (cid:102)BP =
˜Bi,b1,b2 ∈ Zw×w
1. It invokes the procedure randBP on the relaxed matrix branching program BP obtained
p and
(cid:9)
on input (cid:102)BP to obtain (˜s, {Ci,b1,b2}i∈[n],b1,b2∈{0,1},
˜t). The matrices Ci,b1,b2 are such that Ci,b1,b2 = αi,b1,b2 · ˜Bi,b1,b2 , where αi,b1,b2 ∈ Zp with
i ∈ [n], b1, b2 ∈ {0, 1} are picked uniformly at random.
The output of this phase is (inp1, inp2, ˜s, {Ci,b1,b2}
i∈[n],
Looking ahead, the ﬁnal obfuscation of BP will consist of ideal encodings of these elements
. Recall that ˜s, ˜t ∈ Zw
i∈[n],b1,b2∈{0,1}, ˜t
, ˜t).
b1,b2∈{0,1}
with respect to a carefully chosen set system. Next, we describe how these sets are chosen.
Step 2: Initialization of the set systems. Consider a universe set U. Let Us, Ut, U1,
U2, . . . , U(cid:96) be partitions of U such that for all j ∈ [(cid:96)],
|Uj| = (2(cid:96)(cid:48) − 1). That is, Us, Ut, U1,
Uj.
U2, . . . , U(cid:96) are disjoint sets and U = Us ∪ Ut ∪ (cid:96)(cid:83)
Now let Sj be the straddling set system (deﬁned in Section 6) over the elements in Uj. Note
that Sj will have |ind(j)| = (cid:96)(cid:48) sets in the system for each j ∈ [(cid:96)]. We now associate the entries
in the straddling set system Sj with the indices of BP which depend on xj, i.e. the set ind(j).
More precisely, let
j=1
Sj = {Sj
k,b : k ∈ ind(j), b ∈ {0, 1}}.
Step 3: Associating elements of randomized RMBP with sets. Next, we associate a set
to each element output by the randomization step. Recall that in a dual-input relaxed matrix
branching program, each step depends on two ﬁxed bits in the input deﬁned by the evaluation
functions inp1 and inp2. For each step i ∈ [n], b1, b2 ∈ {0, 1}, we deﬁne the set S(i, b1, b2) using
the straddling sets for input bits inp1(i) and inp2(i) as follows:
∪ Sinp2(i)
S(i, b1, b2) := Sinp1(i)
.
i,b1
i,b2
Step 4: Encoding of elements in randomized RMBP. We use the set S(i, b1, b2) to
encode the elements of Ci,b1,b2 . We will use the sets Us and Ut to encode the elements in ˜s and
˜t respectively. More formally, O does the following:
O initializes the oracle M with the ring Zp and universe set U. Then it asks for the encodings
of the following elements:
(cid:8)(˜s[k], Us), (˜t[k], Ut)(cid:9)
k∈[w]
{(Ci,b1,b2 [j, k], S(i, b1, b2)}i∈[n],b1,b2∈{0,1},j,k∈[w]
O receives a list of handles for these elements from M. Let [β]S denote the handle to
(β, S). For a matrix M , let [M ]S denote a matrix of handles such that [M ]S[j, k] is a handle for
(M [j, k], S). Thus, O receives the following handles, which is then output by O.
[˜t]Ut, (cid:8)[Ci,b1,b2]S(i,b1,b2)
(cid:9)
[˜s]Us ,
i∈[n],b1,b2∈{0,1}
Evaluation of O(BP) on input x. Recall that two handles corresponding to the same set
S can be added. If [β]S and [γ]S are two handles, we denote the handle for (β + γ, S) obtained
from M on addition query by [β]S + [γ]S. Similarly, two handles corresponding to S1 and S2
can be multiplied if S1 ∩ S2 = ∅. We denote the handle for (β · γ, S1 ∪ S2) obtained from M
on valid multiplication query on [β]S1 and [γ]S2 by [β]S1 · [γ]S2 . Similarly, we denote the handle
for (M1 · M2, S1 ∪ S2) by [M1]S1 · [M2]S2.
21
h = [˜s]Us · n(cid:89)
(cid:104)
i=1
(cid:105)
Ci,xinp1(i),xinp2(i)
S(i,xinp1(i),xinp2(i))
· [˜t]Ut
Given x ∈ {0, 1}(cid:96), to compute BP(x), O(BP) computes the handle for the following expres-
sion:
Next, O(BP) uses the oracle M to do a zero-test on h. If the zero-test returns a 1, then O(BP)
outputs 0 else it outputs 1.
Correctness of Evaluation. We ﬁrst assume that none of the calls to M fail and show
that O(BP) on x outputs 1 iﬀ BP(x) = 1. We denote bi
2 = xinp2(i) in the
following equation. From the description of the evaluation above, O(BP) outputs 0 on x if and
only if
1 = xinp1(i) and bi
i=1
1,bi
2
Ci,bi
0 = ˜s · n(cid:89)
(cid:32)
0 ) · n(cid:89)
(cid:32)
e1 · n(cid:89)
(e1R−1
Bi,bi
i=1
=
=
· ˜t = ˜s · n(cid:89)
(cid:33)
i=1
· ew
1,bi
2
· n(cid:89)
αi,bi
1,bi
2
· ˜Bi,bi
R(i−1) · Bi,bi
1,bi
2
· R−1
i
· ˜t
1,bi
2
(cid:33) n(cid:89)
= Px[1, w] · n(cid:89)
· (Rnew)
i=1
αi,bi
1,bi
2
αi,bi
1,bi
2
αi,bi
1,bi
2
i=1
i=1
i=1
We conclude with the following theorem and corollary which summarize our results.
Theorem 7. There is a virtual black box obfuscator O in the idealized model for all poly-sized
RMBPs. For a family of input-oblivious RMBPs of length n and width w, the obfuscation
requires n levels of multilinearity over a ﬁeld of size p = 2Ω(n), the obfuscated program consists
of nw2 encodings of ﬁeld elements, and its evaluation involves O(nw2) multilinear operations.
The proof of the above theorem follows along the lines of Barak et al. [4]. We provide the formal
proof in Appendix D.
The following corollary follows from Theorem 1, Theorem 2 and the above theorem.
Corollary 1. There is a virtual black box obfuscator O in the idealized model for non-deterministic
branching programs. For a family of keyed branching programs (or formulas) of size s, the ob-
fuscation requires s levels of multilinearity over a ﬁeld of size p = 2Ω(s), the obfuscated program
consists of O(s3) encodings of ﬁeld elements, and its evaluation involves O(s3) multilinear op-
erations. For a family of input-oblivious, special layered branching programs of length n and
width w, the obfuscation requires n levels of multilinearity over a ﬁeld of size p = 2Ω(n), the
obfuscated program consists of O(nw2) encodings of ﬁeld elements, and its evaluation involves
O(nw2) multilinear operations.
In the above theorem and its corollary, the obliviousness requirement can be relaxed by
incurring an additional multiplicative overhead of (cid:96) to the levels of multilinearity and the number
of multilinear operations, where (cid:96) is the number of input variables.
Claim 6. If e(cid:48) is a sub-element of e, then there exists a collection of disjoint sets C from our
set systems {Sj}j∈[(cid:96)], Us and Ut such that the sets in C are disjoint with S(e(cid:48)) and S(e) =
S(e(cid:48)) ∪(cid:83)
S∈C S.
The above claim says that if e(cid:48) is a sub-element of e, the set corresponding to the encoding
of e can be seen as being derived from the set used for encoding of e(cid:48). Intuitively, this is true
because in obtaining e from e(cid:48), the set of encoding never shrinks. It remains same with each
addition and increases as union of two disjoint sets with each multiplication. Thus, there would
exist a collection of sets such that S(e) can be written as the union of this collection of disjoint
22
sets along with the set of e(cid:48). In other words, there exists a cover for S(e) which involves the set
S(e(cid:48)) and some other disjoint sets from our set system.
S∈C S. The claim follows by noting that S(e) = S(e1).
and S(e1) = S(e(cid:48)) ∪(cid:83)
the sets in C1 are disjoint with S(e(cid:48)) and S(e1) = S(e(cid:48))∪(cid:83)
Proof. (of Claim 13) We will prove this claim by induction on the size of e. If e = 1, i.e. e
If e = e1 + e2, then either (1) e(cid:48) = e or
is a basic element, then the claim trivially holds.
(2) e(cid:48) is a sub-element of either e1 or e2. In the ﬁrst case, the claim is trivially true. In the
second case, let wlog e(cid:48) be sub-element of e1. Then by induction hypothesis, there exists a
collection of disjoint sets C from our set systems such that the sets in C are disjoint with S(e(cid:48))
Finally, if e = e1 · e2, either (1) e(cid:48) = e or (2) e(cid:48) is a sub-element of either e1 or e2. In the ﬁrst
case, the claim is trivially true. In the second case, let wlog e(cid:48) be sub-element of e1. Then by
induction hypothesis, there exists a collection of disjoint sets C1 from our set systems such that
S. Now, for e2 either (1) e2 is a
basic element or (2) there exists a basic sub-element e(cid:48)(cid:48) of e2. In the ﬁrst case, C = C1 ∪{S(e2)}
since for valid multiplication S(e1) ∩ S(e2) = ∅. In the second case, we apply the induction
hypothesis on e2, e(cid:48)(cid:48) and get a collection of sets C2 and C = C1 ∪ (S(e(cid:48)(cid:48)) ∪ C2). Note that S(e(cid:48)(cid:48))
is a union of two disjoint sets from our set system.
S∈C1
Next, we prove that for elements which can be zero-tested, i.e. elements at the highest
level of encoding, all the elements output by the procedure D are single input elements.
In
this direction, we ﬁrst observe that adding two elements does not create new input-proﬁles.
That is, only way to create new proﬁles is to multiply two elements. As noted in Remark 1,
multiplication of two elements can lead to invalid proﬁles. Here we use the observation that if
e = e1 · e2 has invalid input proﬁle then computations involving e cannot lead to an element at
the universe set and cannot be zero-tested. Here we crucially use the properties of straddling
sets and Claim 13. More formally,
Claim 7. If U = S(e) then all the elements in D(e) are single-input elements. Namely, for
every s ∈ D(e) we have that Prof(s) (cid:54)= ⊥.
Proof. We will prove this claim by contradiction. Let us assume that the claim is false. Then
there exists a sub-element ebad of e such that D(ebad) contains an invalid input-proﬁle but
decomposition of all sub-elements of ebad have valid input-proﬁles. We now do a case analysis
on the structure of ebad.
ebad cannot be a basic sub-element since input-proﬁle of all basic sub-elements is valid. Also,
ebad cannot be of the form e1 + e2 because input-proﬁles in D(ebad) is a union of input-proﬁles
in D(e1) and D(e2). Hence, ebad is of the form e1 · e2.
The only way D(ebad) contains an invalid input-proﬁle when all input proﬁles in D(e1) and
D(e2) are valid is the following: There exists a s1 ∈ D(e1) and s2 ∈ D(e2) such that Prof(s1) (cid:54)= ⊥
and Prof(s2) (cid:54)= ⊥ but Prof(s1 · s2) = ⊥. Then, wlog there exists j ∈ [(cid:96)] such that Prof(s1) = 0
and Prof(s2) = 1. From the description of input proﬁles, there exists a basic sub-element ˆe1
of s1 such that S( ˆe1) ∩ Uj = Sj
k,0 ∈ Sj for some k ∈ ind(j). Similarly, there exists a basic
sub-element ˆe2 of s2 such that S( ˆe2) ∩ Uj = Sj
Intuitively, using Claim 4, we show that there is no way of combining ˆe1 and ˆe2 to form a
valid element e such that S(e) ⊇ Uj. For this, we critically use the properties of the straddling
set system and the fact that the set used for encoding only grows as union of two disjoint sets (as
we do more multiplications). Hence, to obtain e using ˆe1 and ˆe2, we need to ﬁnd a collection of
disjoint sets whose union along with S( ˆe1) and S( ˆe2) gives U. This is not possible by properties
of straddling sets. More formally, we have the following:
Since, ˆe1 is a basic sub-element of s1, by Claim 13, there exists a collection C1 such that
S. Similarly, there exists a collection C2 such that S(s2) = S( ˆe2) ∪
S. Since (s1 · s2) is a valid multiplication, (cid:0)S( ˆe1) ∪(cid:83)
S(s1) = S( ˆe1) ∪ (cid:83)
(cid:83)
k(cid:48),1 ∈ Sj for some k ∈ ind(j).
S∈C1
S(cid:1)(cid:83)(cid:0)S( ˆe2) ∪(cid:83)
S∈C2
S(cid:1) =
S∈C1