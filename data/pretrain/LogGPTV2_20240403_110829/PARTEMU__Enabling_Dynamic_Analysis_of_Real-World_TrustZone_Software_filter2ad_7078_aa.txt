title:PARTEMU: Enabling Dynamic Analysis of Real-World TrustZone Software
Using Emulation
author:Lee Harrison and
Hayawardh Vijayakumar and
Rohan Padhye and
Koushik Sen and
Michael Grace
PartEmu: Enabling Dynamic Analysis of Real-World 
TrustZone Software Using Emulation
Lee Harrison and Hayawardh Vijayakumar, Samsung Knox, Samsung Research America; 
Rohan Padhye and Koushik Sen, EECS Department, University of California, Berkeley; 
Michael Grace, Samsung Knox, Samsung Research America
https://www.usenix.org/conference/usenixsecurity20/presentation/harrison
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.PARTEMU: Enabling Dynamic Analysis of Real-World TrustZone Software
Using Emulation
Lee Harrison*1, Hayawardh Vijayakumar*1, Rohan Padhye2, Koushik Sen2, and Michael Grace1
1Samsung Knox, Samsung Research America
{lee.harrison,h.vijayakuma,m1.grace}@samsung.com
2EECS Department, University of California, Berkeley
{rohanpadhye,ksen}@cs.berkeley.edu
Abstract
ARM’s TrustZone technology is the basis for security of bil-
lions of devices worldwide, including Android smartphones
and IoT devices. Because TrustZone has access to sensitive
information such as cryptographic keys, access to TrustZone
has been locked down on real-world devices: only code that
is authenticated by a trusted party can run in TrustZone. A
side-effect is that TrustZone software cannot be instrumented
or monitored. Thus, recent advances in dynamic analysis tech-
niques such as feedback-driven fuzz testing have not been
applied to TrustZone software.
To address the above problem, this work builds an emu-
lator that runs four widely-used, real-world TrustZone oper-
ating systems (TZOSes) - Qualcomm’s QSEE, Trustonic’s
Kinibi, Samsung’s TEEGRIS, and Linaro’s OP-TEE - and
the trusted applications (TAs) that run on them. The tradi-
tional challenge for this approach is that the emulation effort
required is often impractical. However, we ﬁnd that TZOSes
depend only on a limited subset of hardware and software
components. By carefully choosing a subset of components
to emulate, we ﬁnd we are able to make the effort practical.
We implement our emulation on PARTEMU, a modular frame-
work we develop on QEMU and PANDA. We show the utility
of PARTEMU by integrating feedback-driven fuzz-testing us-
ing AFL and use it to perform a large-scale study of 194
unique TAs from 12 different Android smartphone vendors
and a leading IoT vendor, ﬁnding previously unknown vul-
nerabilities in 48 TAs, several of which are exploitable. We
identify patterns of developer mistakes unique to TrustZone
development that cause some of these vulnerabilities, high-
lighting the need for TrustZone-speciﬁc developer education.
We also demonstrate using PARTEMU to test the QSEE TZOS
itself, ﬁnding crashes in code paths that would not normally
be exercised on a real device. Our work shows that dynamic
analysis of real-world TrustZone software through emulation
is both feasible and beneﬁcial.
* These authors contributed equally to this work.
1
Introduction
ARM’s TrustZone technology [2] is the basis for security
of billions of devices worldwide, including Android smart-
phones [51,54] and IoT devices [55]. TrustZone provides two
isolated environments: a rich execution environment (REE
or “normal world”) for running normal applications, and a
trusted execution environment (TEE or “secure world”) for
running trusted applications. Only the secure world has access
to sensitive data such as cryptographic keys and biometrics
information. The secure world runs security-critical “trusted
applications” (TAs) for cryptographic key management, attes-
tation [41], device integrity maintenance [4], and authentica-
tion on top of a TrustZone operating system (TZOS). It is the
responsibility of the TAs and TZOS to protect access to such
sensitive data even if the normal world is fully compromised,
for example, due to malicious apps or users who “root” their
smartphones [63]. A vulnerability in a TA or the TZOS leads
to a breakdown of this protection. Therefore, it is critical to
be able to analyze the security of TrustZone software.
In spite of TrustZone software’s importance to security,
dynamic analysis of real-world TrustZone software is limited
by TrustZone’s locked-down nature. In real-world TrustZone
deployments, only code that is authenticated (i.e., signed) by a
trusted party can run. This restriction maintains the security of
data accessible only by the secure world. However, it comes at
a cost: the inability to instrument or monitor code in the secure
world. This rules out applying dynamic analysis techniques
such as feedback-driven fuzz testing [9, 12, 40, 61], concolic
execution [13, 48], taint analysis [17, 58], or debugging, on
TrustZone software on real devices.
As a result, approaches to analyze real-world TrustZone
software have been limited. Approaches to ﬁnd TA vulner-
abilities include static reverse-engineering of binaries [7, 8]
and blind fuzzing without feedback [6] on real devices. Ap-
proaches that attempt to emulate software by forwarding re-
quests to real hardware [28, 31, 49, 59] through interfaces
such as JTAG or USB are not applicable, since TrustZone
hardware does not export such interfaces and its software is
USENIX Association
29th USENIX Security Symposium    789
locked down. Perhaps closest to our work is TEEMU, men-
tioned in a talk by Komaromy [30]. While they do not attempt
full-system TZOS and TA emulation, they run TAs for a real-
world TZOS (an older version of Trustonic’s Kinibi [56]) by
re-implementing a subset of the TZOS system calls. Since
they do not run the original TZOS, this limits TEEMU to
testing Kinibi TAs that use only those system calls that they
re-implement, and does not allow testing the Kinibi TZOS it-
self. Furthermore, reproducibility is dependent on the ﬁdelity
of re-implementation of the TZOS system calls, which are
often complicated.
In this work, we re-host2 binary images of closed-source,
real-world TZOSes in a full-system emulator to enable holis-
tic dynamic analysis of TrustZone software - the TZOSes
themselves and the TAs that run on these TZOSes. Specif-
ically, we build an emulator that can run four widespread,
real-world TZOSes: Qualcomm’s QSEE [38], Trustonic’s
Kinibi [56], Samsung’s TEEGRIS [43], and Linaro’s OP-
TEE [34]3. As of 2019, Qualcomm’s QSEE runs on more
than 60% of Android phones [51, 62], Trustonic’s Kinibi runs
on over 1.7 billion devices, including 9 of the top 10 Android
vendors [54], and Samsung’s TEEGRIS runs on several of
Samsung’s non-Qualcomm smartphones, including its ﬂag-
ship Samsung Galaxy S10 [22, 50], making them the three
most widely-used real-world TZOSes.
The obvious challenge for emulation is its practical fea-
sibility. Android smartphones, the biggest users of Trust-
Zone in the real-world, have a huge number of hardware
and software components. The naïve approach of attempting
to run an entire ﬁrmware image by emulating all required
hardware is not practically feasible, especially given many
vendor-speciﬁc, undocumented components. However, many
components, such as a hypervisor, are unrelated to the TZOS.
Therefore, to make the emulation effort practical, we start by
excluding components unrelated to the TZOS.
However, even after excluding such unrelated components,
we still ﬁnd that supporting the remaining components is im-
practical. For example, the TZOS depends on the bootloader,
which itself depends on a variety of storage controllers that are
typically extremely complicated, vendor-speciﬁc and not suf-
ﬁciently supported by any open-source emulator. Our insight
is that, here, it is more practical to emulate the bootloader’s
APIs that the TZOS depends on than it is to support the entire,
unmodiﬁed bootloader binary with all its dependencies. Thus,
we re-implement the relevant functionality of the bootloader
in a custom component that mimics, or emulates, the origi-
nal bootloader to the TZOS. Our approach, therefore, is to
study TZOS dependencies on each software component and
determine whether it is more practical to reuse the original
component or emulate it. In this process, we also identify de-
2Firmware re-hosting [23] is the process of migrating ﬁrmware from its
original hardware environment into a virtual environment.
3OP-TEE can already be compiled to run in an emulator. However, we re-
host an already-built binary image that runs on real hardware to an emulator.
pendency patterns on each component that may help similar
future efforts for other closed-source TZOSes.
We implement our design on PARTEMU, a modular frame-
work that we built on QEMU [5] and PANDA [17]. We show
that both the software and hardware emulation effort required
to support these TZOSes is practically feasible: hardware
required emulation of a total of 235 distinct registers using
8 access patterns, and additional support for only 3 devices,
whereas software emulation of the bootloader and secure
monitor required specifying 52 data values and 17 APIs,
many again following simple patterns. We show the utility of
PARTEMU by integrating feedback-driven fuzz-testing using
AFL as a module, and use it to test 194 unique TAs from
12 different Android smartphone vendors and a leading IoT
vendor, ﬁnding previously unknown vulnerabilities in 48 TAs,
several of which are exploitable. We identify patterns unique
to TrustZone development that cause some of these vulnerabil-
ities, highlighting the need for TrustZone-speciﬁc developer
education. We also demonstrate using PARTEMU to test the
QSEE TZOS itself, ﬁnding crashes in code paths that would
not normally be exercised on a real device.
In summary, the work makes the following contributions.
• We study the software and hardware emulation effort
required to run four widespread, real-world TrustZone
OSes - Kinibi, QSEE, TEEGRIS, and OP-TEE - in an
emulator, showing that the emulation effort is practically
feasible if we choose a suitable subset of components to
emulate,
• We build PARTEMU, a system that enables modular dy-
namic analysis of TrustZone by addressing additional
challenges such as stability, performance, and TA authen-
tication, and
• We use PARTEMU to perform a large-scale study of 194
real-world TAs from 12 different smartphone vendors
and a leading IoT vendor, ﬁnding several previously-
unknown vulnerabilities and identifying patterns of
causes.
To the best of our knowledge, we are the ﬁrst to demon-
strate that it is practically feasible to re-host real-world closed-
source TZOSes in an emulator, and to perform a large-scale
dynamic analysis of real-world TAs across Android smart-
phone vendors.
2 Problem
The problem we address in this paper is that dynamic analy-
sis for real-world, deployed TrustZone software is extremely
limited due to TrustZone’s necessarily locked-down nature.
TrustZone is often the foundation for smartphone security
since it has access to critical cryptographic material. For ex-
ample, it has access to a device-unique symmetric hardware
790    29th USENIX Security Symposium
USENIX Association
key [1, 41] that is used to ensure that data stored on disk en-
crypted by that key can only be decrypted on that particular
device. As another example, on Samsung phones, TrustZone
has access to a factory-installed per-device private key signed
by the Samsung CA [42] for remote attestation. Thus, remote
servers can verify that they are communicating with a valid,
protected, Samsung device, and can decide to store enterprise
data on such devices. By convention, on such devices, only
authenticated TrustZone software that is signed by a trusted
party can run. If arbitrary changes were possible to TrustZone
software, then these keys and secrets could be leaked, thus
completely compromising security.
A side-effect of the inability to change TrustZone software
is that dynamic analysis is extremely limited for the com-
munity. Without the ability to instrument or monitor Trust-
Zone software, the community cannot take advantage of ad-
vances in dynamic analysis such as feedback-driven fuzz
testing [12,40,48,61] for TrustZone software. State-of-the-art
for dynamic analysis on devices is limited to projects such
as FuzzZone [6], which enables black-box fuzz testing of
TrustZone on devices using a custom normal-world Linux
kernel driver. Even here, if there is a crash, it is almost im-
possible to ﬁnd the root cause. Devices typically just reboot
and do not have TrustZone crash logs since such information
may leak sensitive data. Researchers have been restricted to
primarily static reverse-engineering of binaries [7, 8] to ﬁnd
vulnerabilities in TrustZone software.
Thus, we are left with the status quo that TrustZone soft-
ware, despite being the foundation of security on millions of
smartphone devices across the world, has received limited
scrutiny from the community.
2.1 Goals
To address the above problem, our goal is to build an emulator
to enable dynamic analysis of real-world TrustZone software.
In particular, our aim is to re-host closed-source binary images
of four widely-deployed real-world TZOSes (and their TAs) in
an emulator: Qualcomm’s QSEE [38], Trustonic’s Kinibi [56],
Samsung’s TEEGRIS [43], and Linaro’s OP-TEE [34]. Specif-
ically, we have the following goals:
• Compatibility. The emulator should be able to run the
same TZOS and TA binaries that are deployed on real-
world devices.
• Reproducibility. The emulator should have sufﬁcient
ﬁdelity so that the issues discovered should be repro-
ducible on the real device.
• Feasbility. We want to require practically feasible hard-
ware and software emulation effort to build the emulator.
3 Challenge and Solution Overview
Our main challenge is that environments that use ARM Trust-
Zone in the real world have a large number of software and
Figure 1: Solution steps.
hardware components, thus making emulation non-trivial. An-
droid smartphones, the largest users of ARM TrustZone, have
software that includes the Android framework, Android apps,
the Linux kernel, and a hypervisor in the normal world, and
a secure monitor, TZOS, and TAs in the secure world. Hard-
ware includes the system-on-chip, TrustZone address-space
and protection controllers, cryptography co-processors, and
peripherals such as a touchscreen, camera, GPS, and storage.
Naïvely loading the entire ﬁrmware binary in an emulator and
running it is practically infeasible due to the huge amount of
hardware components, many custom and without documenta-
tion, that need to be emulated.
To make the emulation effort practically feasible, we ﬁrst
note that the TZOS only depends on a limited subset of all
hardware and software components. For example, the TZOS
usually has no dependency on the hypervisor. Therefore, such
components can be excluded. Second, even for those compo-
nents that the TZOS depends on, we ﬁnd that we can some-
times further reduce effort by extracting out only the relevant
parts of the component that the TZOS depends on into a stub,
depending on how tightly the TZOS is coupled with the com-
ponent. In general, we can more easily extract dependencies
and emulate a component using a stub if the TZOS is loosely
coupled with it. Otherwise, it is may be more practical to reuse
the original binary component and support its dependencies.
Our solution approach, therefore, has three main steps. We
start by studying the dependencies of the target component
we want to emulate (Step 1 in Figure 1). In our case, our tar-
get, the TZOS depends on the secure monitor, the TEE driver
in the Linux kernel, the TEE userspace, and the bootloader.
We exclude components that the TZOS does not depend on.
For each component the TZOS depends on, we estimate how
tightly they are coupled, i.e., how complex the dependency is.
Next, using this information, we decide whether to emulate
components using a stub or reuse original components (Step 2
in Figure 1). Section 5 describes criteria for choosing whether
to reuse or emulate a component, and Section 6 studies com-
ponent dependencies in our target TZOSes, ﬁnding concrete
patterns that suggest reuse or emulation.
Third, once we decide which software and hardware com-
ponents to emulate, we need to emulate them (Step 3 in Fig-
ure 1), that is, replace the component with a stub that sufﬁ-
ciently mimics the original component. For most hardware
USENIX Association
29th USENIX Security Symposium    791
Step 1: Study Component DependenciesStep 2: Select Component Subset to EmulateStep 3: Emulate Selected ComponentsTZOSS.MonHypTEEDriver?CATABootldrTZOSS.MonTEEDriverTABootldrTZOSS.MonTEEDriverTABootldr???????components, we ﬁnd that the TZOS binary itself gives sufﬁ-
cient information about the expected interaction, such as the
result of reading a register. We ﬁnd that simple register access
patterns are sufﬁcient to emulate most hardware (Section 7).
4 TZOS Background
In this section, we ﬁrst present relevant background on ARM
TrustZone (Section 4.1), and then study component depen-
dencies in a typical system running ARM TrustZone (Sec-
tion 4.2).
4.1 ARM TrustZone Background
ARMv8, ARM’s 64-bit architecture that runs the majority
of smartphone devices today, has two orthogonal privilege
systems (Figure 2). First, it has four privilege levels called
exception levels (ELs), similar to rings in x86. Typically,
EL0, the lowest privilege level, runs userspace code, EL1 runs
the OS, EL2 the hypervisor, and EL3, the highest privilege
level, runs the secure monitor. For backwards compatibility,
ARMv8 supports running 32-bit code as well. Therefore, it
can support both the 64-bit TZOSes (QSEE, TEEGRIS), and
32-bit TZOSes (Kinibi).
Second, ARM TrustZone introduces another orthogonal
privilege system. It allows code in any of the exception levels
to run in either: (1) a trusted state, called the trusted execution
environment (TEE) or “secure world”, or (2) in an untrusted
state, called the rich execution environment (REE), non-secure
or “normal world”4,5. Transition from the normal to secure
world is done using the secure monitor call (SMC) instruction,
which calls into the secure monitor in EL3. SMCs can only
be made from EL1 or EL2, and not directly from EL0.
When running in the secure world, software can access all
memory and peripherals. When running in the normal world,
software can only access non-secure memory and non-secure
peripherals. This access control is enforced in hardware by the
TrustZone address-space controllers (TZASC) for memory
and protection controllers (TZPC) for peripherals.
4.2 TZOS Dependencies
TrustZone software components and their dependencies are
implementation-deﬁned. However, we observe that most im-
plementations of TrustZone, including QSEE, Kinibi, TEE-
GRIS, OP-TEE, and Huawei’s TEE [45], have similar soft-
ware components and interactions. In the secure world, trusted
applications (TAs) run in secure EL0 (S.EL0), the TZOS in
secure EL1 (S.EL1), and the secure monitor in EL3. In the
normal world, applications that communicate with TAs, called
client applications (CAs) run in non-secure EL0 (NS.EL0)
4As of ARMv8.3, EL2 is only available in the normal world. ARMv8.4
removes this restriction
5EL3 runs in both secure and non-secure states
Figure 2: ARMv8 TrustZone architecture and a typical
TZOS’s software interactions.
alongside other apps. These CAs call into the TEE driver in
the OS kernel in NS.EL1 (e.g., Linux) that transitions to the
secure world using an SMC. Finally, during system startup,
the TZOS is loaded into memory by a bootloader that runs
either in EL3 or S.EL1. For ease of implementation, parts of