In order to perform active TCP hijacking attacks, the ad-
ditional requirements include S1 and C2:
(C2). Client-side ISN monotonically incrementing for the
same four tuples. This client-side requirement is in fact ex-
plicitly deﬁned in RFC 793 [9] to prevent packets of old con-
nections, with in-range sequence numbers, from being ac-
cepted by the current connection mistakenly. Even though
the latest Linux kernel has eliminated the requirement C1,
C2 is still preserved.
4.2 Client-Side TCP Injection
In this attack, an attacker attempts to inject malicious
data into a connection established by other apps on the
phone. The essential part of the attack is the TCP sequence
number inference which has already been described in de-
tail. The challenge is that the injected data may compete
with the data sent from the legitimate server. For instance,
considering the connection under attack is an HTTP session
where a valid HTTP response typically follows immediately
after the request is sent, by the time the sequence number
inference is done, at least part of the HTTP response is al-
ready sent by the server. The injected HTTP packets likely
can only corrupt the response and cause denial of service
instead of serious damage.
Even though the timing requirement sounds diﬃcult to
satisfy, we did implement this attack against websites such
599Figure 7: Tradeoﬀ between inference
speed and overhead
Figure 8: Relationship between RTT
and inference time
Figure 9: Passive TCP hijacking se-
quence
Figure 10: Active TCP hijacking se-
quence
as Facebook where we are able to inject malicious Javascripts
to post new status on behalf of a victim user. The detail is
described in §5.1.
The idea is to leverage two common scenarios: (1) The
server may take a long time to process a request and as-
semble the response. This is especially common as many
services (websites) take longer than 100ms or more to pro-
cess a request. The fact that the sequence number inference
time in certain scenarios (when RTT from the server to the
client is small) can be made below 100ms makes the injection
attack as powerful as hijacking. (2) A single TCP connec-
tion is reused for more than one pair of HTTP request and
response. The idea is to use the inferred sequence number
for injecting malicious data not on the ﬁrst HTTP request
but the later ones. In both cases, an attacker has enough
time to conduct sequence number inference.
4.3 Passive TCP Hijacking
Passive TCP hijacking allows an attacker to hijack TCP
connections that are passively detected. This means that the
attacker can hijack TCP connections issued by the browser
or any other app, regardless of how and when they are made.
It is the most powerful TCP attack in this study. As demon-
strated in §5, with this attack, it is possible to replace the
Facebook login page with a phishing one.
The high-level idea is the same as proposed in the recent
work [26], which is to reset the connection on the legitimate
server as soon as possible to allow the attacker to claim to
be the legitimate server talking to the victim. The key is
that such reset has to be triggered right after the legitimate
server sends SYN-ACK. Requirement C1 allows the mal-
ware and the attacker to predict the rough range of victim’s
ISN and send reset packets with sequence numbers in that
range. This is helpful because the attacker is required to
send fewer spoofed RST packets (thus with lower bandwidth
requirement) compared to enumerating the entire 4G space.
Further, after the legitimate server is reset, requirement S1
is necessary since it helps prevent the legitimate server from
generating RST upon receiving out-of-state data or ACK
packets from the victim.
The attack sequence diagram is shown in Figure 9. Time
steps 1 to 3 are the same as the previous attack where the un-
privileged malware detects and reports the newly established
TCP connection. In addition, the malware also needs to es-
tablish a connection to the oﬀ-path attacker to report the
current ISN value (high 8 bits). With this information, at
time 4, the oﬀ-path attacker can ﬂood the legitimate server
with a number of spoofed RSTs enumerating the lower 24
bits (sequence numbers can increment by a step size as large
as the server’s receive window size). Note that the RST
packets have to arrive before the ACK/request packets at
time 5; otherwise, the server may send back the response
packets before the attacker. Of course, the server may need
some time to process the request as well, which can vary
from case to case, allowing the attacker additional time to
complete the reset procedure. After the legitimate server’s
connection is reset, all future packets from the victim app
will be considered out-of-state and silently dropped due to
requirement S1. For instance, the ACK packet received at
time 5 is silently discarded. From time 6 to 7, the attacker
conducts the sequence number inference described earlier
and injects malicious content afterwards at time 8 with the
inferred sequence number. A more detailed analysis on the
bandwidth and time requirement is discussed in a similar
setting in a prior work [26].
4.4 Server-side TCP Injection
In this attack, an attacker tries to inject malicious payload
into a victim connection, destined for the server (as opposed
to the client). For instance, as shown in the case study in §5,
we are able to target at Windows live messenger protocols
to inject malicious commands to cause persistent changes to
the victim user account, e.g., adding new friends or removing
existing friends.
This attack is straightforward by combining the sequence
number inference and ACK number inference as described
in §3. We omit the detailed attack sequence as it does not
include other important steps. This attack has no additional
requirements besides the base requirements. In general, ap-
plications with unencrypted and stateful protocols are good
attack targets.
4.5 Active TCP Hijacking
In this attack, an attacker attempts to hijack connections.
However, because the latest Linux kernel since 3.0.2 has the
entire 32-bit randomized for ISNs of diﬀerent four tuples,
 0 5 10 15 20 25 30 2 4 6 8 10 12 14 16 18 20 22total # of bytes required (KB)# of round trips (iterations)AndroidMac 0 100 200 300 400 500 600 700 0 10 20 30 40 50 60 70 80 90 100Inference time (ms)RTT between attacker and client (ms)AndroidMacOff-path attackerLegit ServerVictim AppUnprivileged malwarePhoneConnection reset6. Seq number inference -- start7. Seq number inference -- end...8. Malicious response4. Spoofed RSTs1. SYN5. ACK/request3. SYN-ACK (seq = Y)2. Notification of new connOff-path attackerLegit ServerVictim AppUnprivileged malwarePhoneConnection reset9. Seq number inference -- start10. Seq number inference -- end...11. Malicious response8. Spoofed RSTs1. Conn(X)6. Conn(X)3. Seq + ACK inference --start2. Notification of conn(X)4. Seq + ACK inference -- end7. Notification of conn(X)...5. Port jamming600requirement C1 is no longer satisﬁed. In this case, we show
that it is still possible to launch a weaker version of TCP
hijacking by “actively” performing oﬄine analysis as long as
requirement C2 is satisﬁed. As shown in §5, we have success-
fully used the port-jamming-assisted active TCP hijacking
to replace a Facebook login page with a phishing one.
Requirement C2 speciﬁes that the ISN for the same four-
tuple always increments with time. This implies that as long
as an attacker can infer the client’s ISN for a particular four-
tuple once, he can store the value for a future connection
that reuses the same four-tuple, and reset the server using
the stored ISN (plus the increment by time) so that the
attacker can hijack the connection.
The detailed attack sequence is demonstrated in Fig-
ure 10, at time 1, the unprivileged malware establishes a
connection on its own to a target server of interest (e.g.,
Facebook server), and notiﬁes the oﬀ-path attacker imme-
diately (at time 2) so that it can infer the client ISN of the
used four tuples (through time 3 to 4). Now, assuming that
the attacker knows that a victim app is about to initiate a
connection to the same server, an attacker can immediately
perform port jamming to exhaust all the local port numbers
(at time 5) so that the victim app’s connection can only use
the local port number that was in the inferred four tuples
(we will describe how port jamming can be done later). Now
that the victim connection reuses the same four tuples, the
malware can immediately notify the oﬀ-path attacker (at
time 6) which uses the previously inferred client-side ISN
to reset the server (at time 7). Subsequently, the attack
sequence is identical to the end of passive TCP hijacking.
In the above attack sequence, one critical part is the
knowledge of when the victim app initiates the connection to
the target website. One simple strategy is to actively trigger
the victim app to make the connection through the unpriv-
ileged malware. On Android, for instance, any app could
directly invoke the browser going to a given URL, before
which the attacker can perform the port jamming.
One alternative strategy is to perform oﬄine analysis on
as many four tuples as possible so that it can essentially ob-
tain the knowledge of ISN for all possible four tuples going
to a particular website (without requiring port jamming).
This way, after the oﬄine analysis is performed, the attacker
basically can launch passive TCP hijacking on any of the
four tuples that have been previously analyzed. Since each
client-side ISN inference should take a little over a second,
an attacker can infer, for instance, 1000 four tuples in 15
minutes. Even though a connection to Facebook may have
1% probability falling in the range, the user may repeatedly
visit the website and the probability that all of the connec-
tions failing to match any existing four tuples is likely very
low. We have veriﬁed that the ISN for the same four-tuple
does increment consistently over time for over an hour. We
suspect that the cryptographic key for computing ISN does
not change until reboot in Linux 3.0.2 and above.
To jam local ports, the unprivileged malware can simply
start a local server, then open many connections to the local
server intentionally occupying most of the local port except
the ones that are previously seen for inference. One chal-
lenge is that the OS may limit the total number of ports that
an application can occupy, thus preventing the attacker from
opening too many concurrent connections. Interestingly, we
ﬁnd such limit can be bypassed if the established connections
are immediately closed (which no longer counts towards the
limit). The local port numbers are not immediately released
since the closed connections enter the TCP TIME WAIT
state for a duration of 1 to 2 minutes.
5. ATTACK IMPACT ANALYSIS FROM
CASE STUDIES
Experiment setup. As discussed earlier, even though our
attacks are implemented on both Android and Mac OS, we
choose to focus on Android in our implementation and ex-
periments. We use two diﬀerent phones: Motorola Atrix and
Samsung Captivate. We veriﬁed that all attacks work on
both Android phones, although the experimental results are
repeated based on Atrix. The WiFi networks include a home
network and a university network. The oﬀ-path attacker is
hosted on one or more Planetlab nodes in California.
We describe four case studies corresponding to the four
TCP attacks proposed in the previous section. We also
present experimental results such as how likely we can suc-
ceed in hijacking the Facebook login page based on repeated
experiments.
For all attacks, we implemented the malware as a benign
app that has the functionality of downloading wallpapers
from the Internet (thus justifying the Internet permission).
Since the malware needs to scan netstat (or /proc/net/tcp
and /proc/net/tcp6 equivalently) for new connection detec-
tion, which can drain the phone’s battery very quickly, we
make the malware stealthy such that it only scans for new
connections when it detects that the victim app of interest
is at the foreground. This can be achieved by querying each
app’s IMPORTANCE FOREGROUND ﬂag which is typi-
cally set by the Android OS whenever it is brought to the
foreground. Further, the malware queries the packet counter
only when the oﬀ-path attacker instructs it to do so. The
malware is only used in our controlled experiment environ-
ments without aﬀecting real users.
Note that most apps except the browser on the smart-
phones do not have an indication about whether the con-
nection is using SSL, which means that the users may be
completely unaware of the potential security breach for un-
encrypted connections (e.g., HTTP connections used in the
Facebook app).
5.1 Facebook Javascript Injection
We launch the attack based on client-side TCP injec-
tion as described in §4.2. Recall that the injection can hap-
pen only after the sequence number inference ﬁnishes. If the
inference cannot be done earlier than the response comes
back, the attacker will miss the window of opportunity.
By examining the packet trace generated by visiting the
Facebook website where a user is already logged in, we iden-
tify two possible ways to launch the Javascript injection at-
tack. The ﬁrst attack is surprisingly straightforward. Ba-
sically, when the user visits m.facebook.com, the browser
issues an HTTP request that fetches all recent news. We ob-
serve that it consistently takes the server more than 1.5 sec-
onds to process the request before sending back the ﬁrst re-
sponse packet. According to our results in §3.7, the inference
time usually ﬁnishes within 0.7s even when RTT=100ms. It
allows enough time for an attacker to inject the malicious
response in time (or inject a phishing login page as well).
As shown in Table 1, the success rate is 87.5% based on
40 repeated experiments in our home environment where
601RT Ta=100ms
Succ Rate
87.5% (35/40)
1 RT Ta is the RTT between the attacker and the client
RT Ta=70ms1
97.5% (39/40)
Table 1: Success rate of Facebook Javascript injection (case study 1)
RTT=100ms. It goes up to 97.5% when the experiment is
conducted in the university network where RTT=70ms. The
failed cases are mostly due to packet loss.
The second attack is based on the observation that mul-
tiple requests are issued over the same TCP connection to
the Facebook site. Even if the attacker is not able to in-
fer the sequence number in time to inject response for the
ﬁrst request (e.g., Facebook may improve the server pro-
cessing time in the future), he can still perform inference
for the second request. Speciﬁcally, if the user visits the