说明：
recvmsg 返回套接字上到达的下一个报文。它将报文放入一个结构，该结构包括首部
和数据。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
msg 类型为&struct msghdr，含义是一个报文结构的指针
flags 类型为 int，含义是控制位，它指明是否接受带外数据和是否预览报文
报文用 msghdr 传递结构，其格式如下：
struct msghdr
{
caddr_t
msg_name ;
/* 可选地址 */
int
msg_namelen ;
/* 地址大小 */
struct iovec
msg_iov ;
/* 散列/紧凑数组 */
int
msg_iovlen
/* msg_iov 中的元素字节数 */
caddr_t
msg_accrights ;
/* 发送/接受权限 */
int
msg_accrghtslen ;
/* 特权字段的长度 */
} ;
返回码：
recvmsg 如果成功便返回报文中的字节数。如果发生错误则返回 –1 。出错后，全局
变量 errno 中含有如下值之一：
附录 A  有关网络通信的服务和网络库函数
- 313 -
EBADF  错误原因是第一个参数没有指定合法的描述符
ENOTSOCK  错误原因是第一个参数没有指定一个套接字描述符
EWOULDBLOCK  错误原因是套接字没有数据，但已被指定为非阻塞 I/O 。
EINTR  错误原因是在读操作可以传递数据前被信号中断
EFAULT  错误原因是参数 msg 不正确。
select 系统调用
用法：
retcode = select ( numfds, refds, wrfds, exfds, time ) ;
说明：
select 提供异步 I/O ，它允许单进程等待一个指定文件描述符集合中的任意一个描述
符最先就绪。调用者也可以指定最大等待时间。
参数：
numfds 类型为 int，含义是集合中文件描述符的数目
refds 类型为&fd_set，含义是用作输入的文件描述符的集合
wrfds 类型为&fd_set，含义是用作输出的文件描述符的集合
exfds 类型为&fd_set，含义是用作异常的文件描述符的集合
time 类型为&struct timeval，含义是最大等待时间
涉及描述符的参数由整数组成，而整数的第 i 比特与描述符 i 相对应。宏 FD_CLR 和
FD_SET 清楚或设置各个比特位。
返回值：
select 如果成功则返回就绪的文件描述符数，若时间限制已到则返回 0 ，如果发生错
误则返回 –1 。一旦出错全局变量  errno 中含有下面的值之一：
EBADF  错误原因是某个描述符集合指定了一个非法的描述符。
EINTR  错误原因是在等待超时或任何一个北选择的描述符准备就绪以前，被信
号中断
EINVAL  错误原因是时间限制值不正确
send 系统调用
用法：
retcode = send ( socket, msg, msglen, flags ) ;
说明：
应用程序调用 send 将一个报文传送到另一个机器。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
msg 类型为&char，含义是报文的指针
msglen 类型为 int，含义是报文的字节长度
flags 类型为 int，含义是控制位，指定是否接受带外数据和是否预览报文
- 314 -
Linux网络编程
返回值：
send 若成功就返回以发送的字节数。否则返回 –1 。一旦出错，全局变量 errno 含有
如下值之一：
EBADF  错误原因是第一个参数未指定合法的描述符
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
EFAULT  错误原因是参数 msg 不正确
EMSGSIZE  错误原因是报文对套接字而言太大了
EWOULDBLOCK  错误原因是套接字没有数据，但是已经北指定为非阻塞 I/O
ENOBUFS  错误原因是系统没有足够的资源完成操作
sendmsg 系统调用
用法：
retcode = sendmsg ( socket, msg, flags ) ;
说明：
sendmsg 从 msghdr 结构中提取出一个报文并发送。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
msg 类型为&struct msghdr，含义是报文结构的指针
flags 类型为 int，含义是控制位，指定是否接受带外数据和是否预览报文
返回值：
sendmsg 若成功就返回以发送的字节数。否则返回 –1 。一旦出错，全局变量 errno 含
有如下值之一：
EBADF  错误原因是第一个参数未指定合法的描述符
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
EFAULT  错误原因是参数 msg 不正确
EMSGSIZE  错误原因是报文对套接字而言太大了
EWOULDBLOCK  错误原因是套接字没有数据，但是已经北指定为非阻塞 I/O
ENOBUFS  错误原因是系统没有足够的资源完成操作
sendto 系统调用
用法：
retcode = sendto ( socket, msg, msglen, flags, to, tolen ) ;
说明：
sendto 从一个结构中获取目的地址，然后发送报文。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
msg 类型为&char，含义是报文的指针
msglen 类型为 int，含义是报文的字节长度
附录 A  有关网络通信的服务和网络库函数
- 315 -
flags 类型为 int，含义是控制位，指定是否接受带外数据和是否预览报文
to 类型为&sockaddr，含义是地址结构的指针
tolen 类型为&int，含义是地址的字节长度的指针
返回值：
sendto 若成功就返回以发送的字节数。否则返回 –1 。一旦出错，全局变量 errno 含有
如下值之一：
EBADF  错误原因是第一个参数未指定合法的描述符
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
EFAULT  错误原因是参数 msg 不正确
EMSGSIZE  错误原因是报文对套接字而言太大了
EWOULDBLOCK  错误原因是套接字没有数据，但是已经北指定为非阻塞 I/O
ENOBUFS  错误原因是系统没有足够的资源完成操作
sethostid 系统调用
用法：
(void) sethostid ( hostid ) ;
说明：
系统管理员在系统启动时运行一个有特权的程序，该程序调用 sethostid 为本地机器指
派唯一的 32 比特主机标识符。通常，主机标识符是机器的 IP 地址。
参数：
hostid 类型为 int，含义是被保存作为主机标识符的值
返回值：
运行它的程序必须有 root 权限。否则 sethostid 不会改变主机的标识符。
setsockopt 系统调用
用法：
retcode = setsockopt ( socket, level, opt, optval, optlen ) ;
说明：
getsockopt 允许一个应用改变某个套接字的参数值或该套接字所使用的协议。
参数：
socket 类型为 int，含义是一个套接字描述符
level 类型为 int，含义是一个整数，它标识某个协议级
opt 类型为 int，含义是一个整数它标识某个选项
optval 类型为&char，含义是存放返回值的缓冲区地址
optlen 类型为&int，含义是缓冲区大小，返回时为所发现的值的长度。
用于套接字的查究级选项包括：
SO_DEBUG 调试信息的状态
SO_REUSEADDR 允许本地地址重用
- 316 -
Linux网络编程
SO_KEEPALIVE 连接保持状态
SO_DONTROUTE 忽略出报文的选路
SO_LINGER 如果存在数据，延迟关闭
SO_BROADCAST 允许传输广播报文
SO_OOBINLINE 在带内接受带外数据
SO_SNDBUF 输出缓冲区大小
SO_RCVBUF 输入缓冲区大小
SO_TYPE 套接字的类型
SO_ERROR 获取并清楚套接字的上一次出错
返回值：
setsockopt 如果成功则返回 0 ，如果发生错误则返回 –1 ，并且 errno 全局变量中含有
如下值之一：
EBADF  错误原因是第一个参数未指定一个合法的描述符
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
ENOPROTOOPT  错误原因是 opt 不正确
EFAULT  错误原因是 optval 或 optlen 的地址不正确
shutdown 系统调用
用法：
retcode = shutdown ( socket, direction ) ;
说明：
shutdown 函数用于全双工的套接字，并且用于部分关闭连接。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
direction 类型为 int，含义是 shutdown 需要的方向： 0 表示终止进一步输入，1 表
示终止进一步输出，2 表示终止输入输出。
返回值：
shutdown 调用若操作成功则返回 0 ，若发生错误则返回 –1 。一旦出错，全局变量 errno
中含有一个指出错误原因的代码：
EBADF  错误原因是第一个参数未指明一个合法的描述符
ENOTSOCK  错误原因是第一个参数未指明一个套接字描述符
ENOTCONN  错误原因是指定的套接字当前未连接
socket 系统调用
用法：
retcode = socket ( family, type, protocol ) ;
说明：
socket 函数创建一个用于网络通信的套接字，并返回该套接字的整数描述符。
附录 A  有关网络通信的服务和网络库函数
- 317 -
参数：
family 类型为 int，含义是协议或地址族( 对于 TCP/IP 为 PF_INET ，也可使用
AF_INET )
type 类型为 int，含义是服务的类型（对于 TCP 为 SOCK_STREAM，对于 UDP
为 SOCK_DGRAM）
protocol 类型为 int，含义是使用的协议号，或是用 0 指定 family 和 type 的默认协
议号
返回值：
EPROTONOSUPPORT  错误原因是参数中的错误：申请的服务或指定的协议无
效
EMFILE  错误原因是应用程序的描述符表已经满
ENFILE  错误原因是内部的系统文件表已满
ENOBUFS  错误原因是系统没有可用的缓冲空间
write 系统调用
用法：
retcode = write ( socket, buff, buflen ) ;
说明：
write 允许一个应用程序给远方的客户端发送信息。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
buff 类型为&char，含义是一个存放输入字符的数组的指针
buflen 类型为 int，含义是一个整数，它指明 buff 数组中的字节数
返回值：
write 若它成功就返回发送的字节数，如果发生了错误就返回 –1 。一旦出错，全局变
量 errno 中含有如下值之一：
EBADF  错误原因是第一个参数未指定合法的描述符
EPIPE  错误原因是试图向一个未连接的流套接字上写
EFBIG  错误原因是写入的数据超过了系统容量
EFAULT  错误原因是地址 buff 不合法
EINVAL  错误原因是套接字的指针无效
EIO  错误原因是在读数据时 I/O 发生错误
EWOULDBLOCK指定的是非阻塞的 I/O ，但是套接字没有数据。
附录 B  Vi 使用简介
- 319 -
附录 B  Vi 使用简介
Vi 是 Unix 世界里极为普遍的全屏幕文本编辑器，几乎可以说任何一台 Unix 机器都会
提供这套软件。Linux 当然也有，它的 vi 其实是 elvis（版权问题），不过它们都差不多。熟
悉 DOS 下的文本处理后，也许会感到 vi 并不好用；Unix 上也已经发展出许多更新、更好
用的文本编辑器，但是并不一定每一台 Unix 机器上都会安装这些额外的软件。所以，学习
vi 的基本操作还是有好处，让你在各个不同的机器上得心应手。
B.1  Vi 基本观念
Unix 提供一系列的 ex 编辑器，包括 ex, edit 和 vi。相对于全屏幕编辑器，现在可能很
难想像如何使用 ex, edit 这种行列编辑器（有人用过 DOS 3.3版以前所附的 EDLIN 吗？）。
Vi 的原意是“ Visual”，它是一个立即反应的编辑程式，也就是说可以立刻看到操作结果。
也由于 vi 是全屏幕编辑器，所以它必须控制整个终端屏幕哪里该显示些什么。而终端
的种类有许多种，特性又不尽相同，所以 vi 有必要知道现在所使用的是哪一种终端机。这
是借由 TERM 这个环境变数来设定，设定环境变数方面请查看所使用 shell 的说明。（除非
执行 vi 的时候回应 unknow terminal type，否则可以不用设定。）
只要简单的执行 vi 就可以进入 vi 的编辑环境。在实际操作之前先对它有个概略的了解
会比较好。Vi 有两种模式，输入模式以及命令模式。输入模式即是用来输入文字数据，而
命令模式则是用来下达一些编排文件、存文件、以及离开 vi 等等的操作命令。当执行 vi 后，
会先进入命令模式，此时输入的任何字符都视为命令。
B.1.1  进入与离开
要进入 vi 可以直接在系统提示字符下输入 vi ＜文件名称＞，vi 可以自动帮你调入所
要编辑的文件或是开启一个新文件。进入 vi 后屏幕左方会出现波浪符号，凡是列首有该符
号就代表此列目前是空的。要离开 vi 可以在命令模式下输入 :q, :wq 命令则是存文件后再
离开（注意冒号）。要切换到命令模式下则是用 [ESC] 键，如果不晓得现在是处于什么模
式，可以多按几次 [ESC]，系统会发出哔哔声以确定进入命令模式。
B.1.2  Vi 输入模式
要如何输入数据呢？有好几个命令可以进入输入模式：
新增（append）