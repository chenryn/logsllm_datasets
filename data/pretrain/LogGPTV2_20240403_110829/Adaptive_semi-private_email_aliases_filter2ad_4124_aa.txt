title:Adaptive semi-private email aliases
author:Beng Heng Ng and
Alexander Crowell and
Atul Prakash
Adaptive Semi-Private Email Aliases
Beng Heng Ng, Alexander Crowell, Atul Prakash
Department of Computer Science and Engineering
{bengheng, crowella, aprakash}@eecs.umich.edu
University of Michigan
ABSTRACT
Email address leakages are the cause of several security problems
including spam and privacy loss. With current email addresses,
once the address leaks without its owner’s consent, it becomes ef-
fectively compromised, creating a struggle for the user to keep the
address out of the hands of new spammers. To compound the prob-
lem, some websites require addresses belonging to a certain domain
(e.g., .edu) as a partial proof of the user’s afﬁl-
iation with an organization. This leaves the user not much choice
except to have faith that the address will not be misused.
To address the problem, this paper improves on the prior work on
disposable email addresses by proposing a mechanism called semi-
private aliases. Semi-private aliases make two contributions. First,
they have a lifecycle model that permits gradual, selective controls
on the use of the alias by senders without requiring any special
infrastructure on the part of senders or receivers. Second, semi-
private aliases can be easily used to validate a user belonging to a
certain organization (e.g., university or company) and reveal only
selected attributes to a service while hiding the real identity. The
second aspect recently proved useful in allowing students in one of
our freshmen courses to register easily and safely at Piazza.com,
a discussion forum for courses, that, by default, requires students
to provide a university email address, but has privacy policies that
differ from a university’s.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and Protection; H.4.3 [Information Systems Applications]:
Communication Applications—Electronic Mail
General Terms
Design, Security
Keywords
Semi-Private, Alias, Email Aliases, Lifecycle, Afﬁliation Valida-
tion, Disposable Email Addresses, Email Address Leakages, Spam,
Unsolicited Email
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-1303-2/12/05 ...$10.00.
1.
INTRODUCTION
Since its inception in the 1970s, electronic mail, or email, has
come to largely replace snail mail for a variety of reasons, includ-
ing its low cost, user convenience, ease of use, and high delivery
efﬁciency. But for these very same reasons the problem of unso-
licited bulk email messages, commonly referred to as spam, has
grown along with email since the 1990s, spurring huge research
efforts for ﬁnding tools to combat spam. Although the state-of-the-
art in spam detection has been successful at detecting most obvious
cases of spam, false positives and false negatives are still not en-
tirely uncommon.
One primary cause of the spam problem is the way in which
email addresses are typically used. To provide a ﬁxed address at
which they can be reached, most users treat their email IDs as per-
manent and only abandon them in rare circumstances. As a result,
once a user’s email address leaks to spammers, it is nearly impos-
sible to entirely prevent them from sending messages to the user’s
inbox. Users usually have no recourse if they wish to retract the re-
lease of an email address to a certain party. And although one may
take extreme care to prevent one’s email address from falling in to
the wrong hands, because anyone with the address could then leak it
to a third party, either intentionally or unintentionally, such an effort
can easily be futile. The situation becomes further complicated if
we consider that a user may later change their mind about whether
they should have given their email address to a certain party.
To compound the problem, some services require corporate email
addresses as part of the proof of a user’s afﬁliation with the orga-
nization before deeming the user as eligible for certain services or
discounts. Early examples included Facebook, which required uni-
versity afﬁliations when it started. More recently, Piazza.com is
used by many universities to host threaded forums between students
and professors and, by default, it requires users to sign in with an
email ID that validates them to their university. This creates a po-
tential dilemma for professors as to whether it is proper to require
students to sign up for an external service with a different privacy
policy on protection of students’ email IDs than their university’s.
Many companies offering corporate discounts on their services or
products, for example, Sprint and AT&T in the U.S., also require
customers to provide their corporate email ID to receive discounts
on their monthly bills. While alternative proof methods may be al-
lowed, these are usually troublesome. This also creates concerns:
a corporate address is potentially being used to receive non-work
email, making it more susceptible to marketing use.
This paper proposes a mechanism called semi-private aliases, a
novel solution that attempts to blend the user control provided by
disposable email addresses with the ﬂexible nature of ubiquitous
permanent email addresses to provide an email aliasing mecha-
nism that can limit misuse without being overly restrictive to either
the address owners or their trusted correspondents. Semi-private
aliases are email addresses that can be attached seamlessly to a
user’s regular inbox, and serve as aliases for that inbox that can
be distributed in the same fashion as Disposable Email Addresses
(DEAs) [1, 2]. These aliases make two signiﬁcant contributions:
1. Concept of alias lifecycle: A lifecycle, in the form of a state
machine, allows the user to adaptively add restrictions to an
alias as the effects of an address leak begin to show them-
selves. Starting out as unrestricted and open to all incom-
ing mail, an alias can be marked partly restricted when un-
solicited email begins to be received, resulting in no added
restrictions for those who have corresponded with the alias
before the identiﬁed compromise. New senders sending to a
partly restricted alias receive a CAPTCHA challenge, after
which the user is prompted to accept or reject that sender’s
correspondence. Once an alias has reached the point where
the user does not expect any new contacts on it, they may
mark it as fully restricted, at which time only those contacts
on the alias’ whitelist are permitted to send. Finally, a user
might choose to disable an alias if it eventually falls entirely
out of use.
2. Privacy-protecting afﬁliation validation: When deployed by
an organization, the service can be used by individuals in the
organization to validate their organizational afﬁliation (and
optionally a selection of other information such as their name
or role in the organization) to external service providers with-
out the risk of exposing the real corporate email ID informa-
tion to the providers. Instead, service providers are provided
with an email alias.
Some challenges in designing our system for semi-private aliases,
which we call SEAL, are how to make it work with existing email
infrastructure and services as well as how to avoid requiring sig-
niﬁcant authentication steps (e.g. CAPTCHAs) along communi-
cation paths. SEAL achieves these goals, using encrypted SMTP
supported by existing infrastructure, including Gmail and software
clients such as Mozilla Thunderbird, for sending messages; for au-
thentication of senders to aliases, we make use of alias lifecycles
to identify when senders are likely to be potential spammers and
execute authentication steps only in these cases.
We note that SEAL primarily aims to give users selective control
over their privacy rather than provide complete anonymity over the
web. We assume that the SEAL infrastructure is trusted, but we
attempt to design it so that the theft of information in the database
maintained by SEAL for its functioning is of limited use to spam-
mers.
The paper is structured as follows. We ﬁrst discuss related work
in Section 2. Then we present SEAL from an end-user’s perspective
in Section 3. We also discuss the design and describe our prototype
in Section 4. Next, we evaluate the effectiveness of the system in
restricting aliases and tracing alias leakages, and the deployment
of our system in a real world scenario in Section 5. Finally, we
discuss potential limitations and defenses against potential attacks
on the SEAL design in Section 6 before concluding in Section 7.
2. RELATED WORK
Variants of disposable email aliases are supported by several sys-
tems. We divide current DEA solutions into two groups, charac-
terizing them as either incomplete or overly restrictive. The ﬁrst
category of DEA systems are specialized services that allow users
to create DEAs but do not provide full email services. They can be
sub-categorized into receive-only systems that do not allow a user
to reply to emails, and temporary systems that only allow users to
access their inbox for a limited amount of time [3]. Others, e.g.,
Mailinator [4, 5], provide a single shared inbox for all users, and so
there is no notion of privacy; anyone with the email ID string can
access the email to that email ID.
In the second category, the DEA systems are overly restrictive,
either only permitting the complete removal of an address to pre-
vent spam or requiring that every correspondent solve a CAPTCHA.
One example of such work is Inexpensive Email Addresses (IEA)[6].
IEA cryptographically generates exclusive email addresses for each
sender that must be veriﬁed by CAPTCHA. This greatly limits the
system’s practicality, making it difﬁcult to use with automated sys-
tems like mailing lists, newsletters, and password recovery ser-
vices. For normal users, it requires them to go through an extra
step of solving a CAPTCHA before being able to send an email.
Yahoo Mail’s aliases require removal of an alias to prevent spam,
once traditional ﬁlters break down.
Ioannidis proposed the concept of a Single-Purpose Address (SPA)
[7], where an SPA has cryptographic properties and encodes secu-
rity policies that can be enforced by receivers into the email ad-
dress itself. When a receiver creates an SPA, an expiration date
is supplied that determines its lifetime. This encoding of policy
into SPAs severely limits their usefulness; an encoded policy can
never be changed during the life of the email address, so a single
compromise means the owner must live with spam until the address
expires or switch to a new key, thereby invalidating all of his exist-
ing SPAs. The unlikely event of a server compromise also poses a
much greater problem for SPAs, since the leak of a key requires the
owner to invalidate all of their SPAs and start from scratch. SEAL
avoids these limitations by keeping state on the server, allowing
the user to ﬂexibly respond to address leaks by restricting speciﬁc
aliases. A side beneﬁt of this is that in the event of a temporary
compromise of the server itself, once control is regained the user
can restrict all of their preexisting aliases, avoiding a temporary
complete loss of service due to the need to create and distribute
entirely new email addresses.
The Tagged Message Delivery Agent (TMDA) is a challenge/re-
sponse system that aims to mitigate spam [8]. One feature of TMDA
is tagged addresses that can contain date information used in a sim-
ilar manner to SPA for determining the expiration of the addresses.
Similar to SPA, the expiration date has to be determined at the point
of creation. Again, the tagged address may be leaked before it ex-
pires.
The free online classiﬁed advertising site Craigslist generates a
random anonymous email address for the user when a posting is
made. While this conceals the user’s real address from email har-
vesters that scrape websites, Craigslist is often attacked by spam-
mers who post fake advertisements. An unknowing user who replies
to the fake email reveals his real address. With SEAL, a user can
simply use a semi-private alias when creating or responding to an
ad on Craigslist, giving them the ability to block spam sent to that
address at any point.
OpenID [9] permits users to sign up for external services us-
ing an existing email ID, such as their Facebook ID or Google ID,
while providing some privacy controls. SEAL accomplishes a sim-
ilar goal but without requiring the service provider to use a speciﬁc
authentication infrastructure and having full control over the infor-
mation that is disclosed with the email alias.
Spam ﬁltering has been well-studied [10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24], and is complementary to our
approach. While SEAL is not a spam ﬁlter, the life-cycle man-
agement controls provide an additional layer of spam control when
traditional spam ﬁltering fails, without requiring an alias to be com-
Table 1: Commands used by SEAL. All commands are speciﬁed
in the email Subject line. The contents of the message bodies are
ignored.
Command
Request alias
Partly restrict alias
Fully restrict alias
Trust sender
Distrust sender
Service Account
getalias@sealserver
service@sealserver
service@sealserver
service@sealserver
service@sealserver
Subject Line
(cid:104)alias name(cid:105)
restrict (cid:104)alias(cid:105)
restrict full (cid:104)alias(cid:105)
trust (cid:104)email address(cid:105)
distrust (cid:104)email address(cid:105)
Table 2: Capability matrix between sender status (columns) and
alias states (rows). A ‘’ denotes that the sender is allowed to send
to the alias, while a ‘’ denotes the contrary. CAPTCHA denotes
that the sender will be arbitrated to be trusted or not by solving a
CAPTCHA challenge and receiving explicit permission from the
user.
Unrestricted
Partly Restricted
Fully Restricted
Disabled
Distrusted Unknown
Trusted





CAPTCHA






3.1 Lifecycle of a Semi-Private Alias
After creating a user account, the user can request an alias name
that is not in use by other users. Using the alias name, the user
can request aliases for distribution to contacts. Figure 2 shows the
lifecycles for three aliases. At t1, the user requests a new alias
for the alias name bob. We discuss the different methods for re-
questing a new alias in Section 3.3. The system returns the new
alias bob.rzkyt7y4 which can be distributed to the user’s con-
tacts. The user corresponds with the contacts on bob.rzkyt7y4
until he observes that it has been leaked at t2 and informs SEAL
via a command email. SEAL then marks all senders prior to t2
as trusted, marks the alias as partly restricted, and generates the
successor alias bob.u1pvwf47.
At this point, it may be possible that spammers prior to t2 are
erroneously marked as trusted. However, this is reversible. The
user can reﬁne which senders should be trusted. Another possible
approach may be to let the user decide the earliest time when the
ﬁrst spam to the alias is found and to mark all senders prior to that
time as trusted. However, if the user makes a mistake in ﬁnding the
ﬁrst spam, mail from legitimate senders may be blocked, especially
for automated systems like mailing lists. Therefore, we decided to
Figure 2: Lifecycle scenarios of three aliases. The unshaded part
of a bar shows the alias is unrestricted while the shaded part shows
that it has been leaked and becomes restricted.
Figure 1: Overview of the Seal Service
pletely disabled.
3. USER’S PERSPECTIVE
of
such
an
An
example
Senders correspond with users of SEAL using semi-private email
aliases.
be
bob.89dtzx3r@sealserver, where bob is the alias name
and 89dtzx3r is the randomization string. An alias is formed
by joining the alias name and the randomization string with a de-
limiting character in between. The alias name is speciﬁed by the
user while the randomization string is a randomly generated string,
created by SEAL.
alias would
Figure 1 shows an overview of the email interactions between a
SEAL user and a sender who wishes to correspond with that user.
A user of the SEAL service sends mail through a SEAL server that
processes the mail and forwards it to the recipient. A person send-