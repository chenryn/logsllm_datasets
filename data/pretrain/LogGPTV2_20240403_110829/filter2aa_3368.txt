# Exploit Mitigation Techniques on iOS
## Max Bazaliy
### August 4-7, 2016

---

## About Me
- From Kiev, Ukraine
- Staff Engineer at Lookout
- Focused on XNU, Linux, and LLVM internals
- Interested in jailbreak techniques
- Previously worked on obfuscation and DRM
- Member of the Fried Apple team

---

## Agenda
1. iOS Security Mechanisms
2. Function Hooking
3. iOS 8 & 9 Exploit Mitigations
4. Bypassing Code Signatures
5. Future Codesign Attacks

---

## iOS Security Mechanisms
- **Memory Protections:**
  - No way to change existing page permissions.
  - Pages can never be both writable and executable.
  - No dynamic code generation without JIT.
  - Non-executable stack and heap.
  - ASLR / KASLR.

- **Code Signing:**
  - Mandatory Access Control Framework (MACF).
  - Code must be signed by a trusted party.
  - Signed page hashes must match running code.

- **Sandbox:**
  - Restricts processes to a limited set of operations.

- **Secure Boot Process:**
  - Ensures the integrity of the boot process.

- **Data Protection:**
  - Protects data at rest and in transit.

- **Kernel Patch Protection:**
  - Prevents unauthorized modifications to the kernel.

---

## Memory Protections
### Allocating New Regions
```c
kern_return_t vm_map_enter(…){
    ...
#if CONFIG_EMBEDDED
    if (cur_protection & VM_PROT_WRITE){
        if ((cur_protection & VM_PROT_EXECUTE) && !entry_for_jit){
            printf("EMBEDDED: curprot cannot be write+execute. turning off execute\n");
            cur_protection &= ~VM_PROT_EXECUTE;
        }
    }
#endif /* CONFIG_EMBEDDED */
    ...
}
```
Source: [Apple Open Source](http://opensource.apple.com//source/xnu/xnu-3248.20.55/osfmk/vm/vm_map.c)

### Changing Existing Regions
```c
kern_return_t vm_map_protect(…){
    ...
#if CONFIG_EMBEDDED
    if (new_prot & VM_PROT_WRITE) {
        if ((new_prot & VM_PROT_EXECUTE) && !(curr->used_for_jit)) {
            printf("EMBEDDED: %s can't have both write and exec at the same time\n", __FUNCTION__);
            new_prot &= ~VM_PROT_EXECUTE;
        }
    }
#endif
    ...
}
```
Source: [Apple Open Source](http://opensource.apple.com//source/xnu/xnu-3248.20.55/osfmk/vm/vm_map.c)

---

## Code Signing
- **LC_CODE_SIGNATURE** command points to a CSBlob.
- **Key Component:** The Code Directory.
- **File Page Hashes:** Individually stored into slots.
- **Special Slots:** _CodeResources, Entitlements, etc.
- **CDHash:** Master hash of code slot hashes.

### Code Signature Format
- **CS on Load Validation in Kernel:**
  - `__mac_execve` or `posix_spawn`
  - `exec_activate_image`
  - `exec_mach_imgact`
  - `load_machfile`
  - `parse_machfile`
  - `load_code_signature`
  - `ubc_cs_blob_add`
  - `mac_vnode_check_signature`

- **CS Page Validation in Kernel:**
  - `vm_fault_enter`
  - `vm_page_validate_cs`
  - `vm_page_validate_cs_mapped`
  - `cs_validate_page`

- **CS Page Validation:**
  - `vm_fault` called on a page fault.
  - A page fault occurs when a page is loaded.
  - Validated page means that the page has a hash in the CSDir.
  - Tainted page: calculated page hash does not match the stored page hash.
  - Processes with invalid codesign status will be killed.

- **When to Verify:**
  ```c
  #define VM_FAULT_NEED_CS_VALIDATION(pmap, page) \
      ((pmap) != kernel_pmap && \
      !(page)->cs_tainted && \
      (page)->object->code_signed && \
      (!(page)->cs_validated || (page)->wpmapped))
  ```

- **Code Sign Enforcement:**
  - **Apple Mobile File Integrity (AMFI):**
    - Registers hooks in MACF.
    - `mpo_proc_check_get_task`
    - `mpo_vnode_check_signature`
    - `mpo_vnode_check_exec`
    - And more...

  - **Process:**
    - `sysent`
    - `AMFI`
    - `amfid`
    - `libmis.dylib`
    - `trust cache`
    - `MACF`

  - **Kernel Land vs. User Land:**

---

## Function Hooking
- **Use Cases:**
  - Add new security features.
  - Debugging third-party code.
  - Logging and tracing API calls.
  - Reverse engineering and de-obfuscation.
  - Interposing to the rescue.

- **Interposing - DYLD_INFO and LINKEDIT:**
  - **Rebase Info:** Contains rebasing opcodes.
  - **Bind Info:** For required import symbols.
  - **Lazy Bind Info:** Symbol binding info for lazy imports.
  - **Weak Bind Info:** Symbol binding info for weak imports.
  - **Export Info:** Symbol binding info for exported symbols.
  - Details: [NewOSXBook](http://newosxbook.com/articles/DYLD.html)

- **Having Fun with Bind Info:**
  ```c
  case BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:
      segIndex = immediate;
      address = segOffsets[segIndex] + read_uleb128(&p, end);
      break;

  case BIND_OPCODE_ADD_ADDR_ULEB:
      address += read_uleb128(&p, end);
      break;

  case BIND_OPCODE_DO_BIND:
      *((void **)address) = new_impl;
      address += sizeof(void *);
      break;

  case BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB:
      *((void **)address) = new_impl;
      address += read_uleb128(&p, end) + sizeof(void *);
      break;
  ```
  Source: [Apple Open Source](https://opensource.apple.com/source/dyld/dyld-360.18/src/ImageLoaderMachOCompressed.cpp)

- **dyld_shared_cache:**
  - All frameworks and libraries.
  - Loaded into each process space.
  - Used for performance and security reasons.
  - ASLR slide randomized at boot time.

- **Fixed Offset in a Cache:**
  - Example: `send` function implementation in iOS 8 and iOS 9.

- **Trampolines:**
  - How to change memory to RW?
  - How to switch back to RX?
  - How to bypass a codesign check?

- **Change Memory to RW:**
  ```c
  void *data = mmap(addr & (~PAGE_MASK), PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_ANON | MAP_PRIVATE | MAP_FIXED, 0, 0);
  ```

- **Change Memory to RX:**
  ```c
  mprotect(addr & (~PAGE_MASK), PAGE_SIZE, PROT_READ | PROT_EXEC);
  ```

- **Steps to Create Trampoline:**
  - Copy original page content.
  - Mmap new RW page over.
  - Copy original content back.
  - Write trampoline.
  - Mprotect to RX.
  - Handle codesign.

- **Codesign Bypass:**
  - Page is checked on page fault.
  - Prevent page fault using `mlock`.
  - Example: `mlock(data & (~PAGE_MASK)), PAGE_SIZE);`

- **Full Attack:**
  - Get function pointer, get page base.
  - Copy page contents to temporary buffer.
  - Mmap new RW page over.
  - Copy original content back.
  - Mlock page.
  - Copy trampoline code.
  - Mprotect page to RX.

- **Hook fcntl in dyld to Skip Codesign Validation:**
  ```c
  fsignatures_t siginfo;
  siginfo.fs_file_start = offsetInFatFile;    
  siginfo.fs_blob_start = (void*)(long)(codeSigCmd->dataoff);
  siginfo.fs_blob_size = codeSigCmd->datasize;
  int result = fcntl(fd, F_ADDFILESIGS_RETURN, &siginfo);
  ```
  Source: [Apple Open Source](https://opensource.apple.com/source/dyld/dyld-360.18/src/ImageLoaderMachO.cpp)

- **Loading Unsigned Code:**
  - Mlock all pages with executable permission during mapping.
  ```c
  if (size > 0) {
      if ((fileOffset + size) > fileLen) {
          ...
      }
      void* loadAddress = xmmap((void*)requestedLoadAddress, size, protection, MAP_FIXED | MAP_PRIVATE, fd, fileOffset);
      ...
  }
  ```
  Source: [Apple Open Source](https://opensource.apple.com/source/dyld/dyld-360.18/src/ImageLoaderMachO.cpp)

- **cs_bypass:**
  - Hook `fcntl` and return -1.
  - Hook `xmmap` and mlock all regions with exec permission.
  - `dlopen` unsigned code.
  - Example: [GitHub](https://github.com/kpwn/921csbypass)

- **Future Codesign Attacks:**
  - Hide executable segment.
  - Hook dyld functions.
  - Hook libmis functions.

---

For more information, follow me on Twitter: [@mbazaliy]

---