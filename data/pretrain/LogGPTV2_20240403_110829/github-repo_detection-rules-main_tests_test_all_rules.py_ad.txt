                err_strings.append(f'({len(type_errors)}) {errors_by_type["msg"]}')
                err_strings.extend([f'  - {e}' for e in type_errors])
            self.fail('\n'.join(err_strings))
    def test_required_lookback(self):
        """Ensure endpoint rules have the proper lookback time."""
        long_indexes = {'logs-endpoint.events.*'}
        missing = []
        for rule in self.all_rules:
            contents = rule.contents
            if isinstance(contents.data, QueryRuleData):
                if set(getattr(contents.data, "index", None) or []) & long_indexes and not contents.data.from_:
                    missing.append(rule)
        if missing:
            rules_str = '\n '.join(self.rule_str(r, trailer=None) for r in missing)
            err_msg = f'The following rules should have a longer `from` defined, due to indexes used\n {rules_str}'
            self.fail(err_msg)
    def test_eql_lookback(self):
        """Ensure EQL rules lookback => max_span, when defined."""
        unknowns = []
        invalids = []
        ten_minutes = 10 * 60 * 1000
        for rule in self.all_rules:
            if rule.contents.data.type == 'eql' and rule.contents.data.max_span:
                if rule.contents.data.look_back == 'unknown':
                    unknowns.append(self.rule_str(rule, trailer=None))
                else:
                    look_back = rule.contents.data.look_back
                    max_span = rule.contents.data.max_span
                    expected = look_back + ten_minutes
                    if expected ={expected}')
        if unknowns:
            warn_str = '\n'.join(unknowns)
            warnings.warn(f'Unable to determine lookbacks for the following rules:\n{warn_str}')
        if invalids:
            invalids_str = '\n'.join(invalids)
            self.fail(f'The following rules have longer max_spans than lookbacks:\n{invalids_str}')
    def test_eql_interval_to_maxspan(self):
        """Check the ratio of interval to maxspan for eql rules."""
        invalids = []
        five_minutes = 5 * 60 * 1000
        for rule in self.all_rules:
            if rule.contents.data.type == 'eql':
                interval = rule.contents.data.interval or five_minutes
                maxspan = rule.contents.data.max_span
                ratio = rule.contents.data.interval_ratio
                # we want to test for at least a ratio of: interval >= 1/2 maxspan
                # but we only want to make an exception and cap the ratio at 5m interval (2.5m maxspan)
                if maxspan and maxspan > (five_minutes / 2) and ratio and ratio ={expected}'
                    invalids.append(err_msg)
        if invalids:
            invalids_str = '\n'.join(invalids)
            self.fail(f'The following rules have intervals too short for their given max_spans (ms):\n{invalids_str}')
class TestLicense(BaseRuleTest):
    """Test rule license."""
    def test_elastic_license_only_v2(self):
        """Test to ensure that production rules with the elastic license are only v2."""
        for rule in self.production_rules:
            rule_license = rule.contents.data.license
            if 'elastic license' in rule_license.lower():
                err_msg = f'{self.rule_str(rule)} If Elastic License is used, only v2 should be used'
                self.assertEqual(rule_license, 'Elastic License v2', err_msg)
class TestIncompatibleFields(BaseRuleTest):
    """Test stack restricted fields do not backport beyond allowable limits."""
    def test_rule_backports_for_restricted_fields(self):
        """Test that stack restricted fields will not backport to older rule versions."""
        invalid_rules = []
        for rule in self.all_rules:
            invalid = rule.contents.check_restricted_fields_compatibility()
            if invalid:
                invalid_rules.append(f'{self.rule_str(rule)} {invalid}')
        if invalid_rules:
            invalid_str = '\n'.join(invalid_rules)
            err_msg = 'The following rules have min_stack_versions lower than allowed for restricted fields:\n'
            err_msg += invalid_str
            self.fail(err_msg)
class TestBuildTimeFields(BaseRuleTest):
    """Test validity of build-time fields."""
    def test_build_fields_min_stack(self):
        """Test that newly introduced build-time fields for a min_stack for applicable rules."""
        current_stack_ver = PACKAGE_STACK_VERSION
        invalids = []
        for rule in self.production_rules:
            min_stack = rule.contents.metadata.min_stack_version
            build_fields = rule.contents.data.get_build_fields()
            errors = []
            for build_field, field_versions in build_fields.items():
                start_ver, end_ver = field_versions
                if start_ver is not None and current_stack_ver >= start_ver:
                    if min_stack is None or not Version.parse(min_stack) >= start_ver:
                        errors.append(f'{build_field} >= {start_ver}')
            if errors:
                err_str = ', '.join(errors)
                invalids.append(f'{self.rule_str(rule)} uses a rule type with build fields requiring min_stack_versions'
                                f' to be set: {err_str}')
            if invalids:
                self.fail(invalids)
class TestRiskScoreMismatch(BaseRuleTest):
    """Test that severity and risk_score fields contain corresponding values"""
    def test_rule_risk_score_severity_mismatch(self):
        invalid_list = []
        risk_severity = {
            "critical": 99,
            "high": 73,
            "medium": 47,
            "low": 21,
        }
        for rule in self.all_rules:
            severity = rule.contents.data.severity
            risk_score = rule.contents.data.risk_score
            if risk_severity[severity] != risk_score:
                invalid_list.append(f'{self.rule_str(rule)} Severity: {severity}, Risk Score: {risk_score}')
        if invalid_list:
            invalid_str = '\n'.join(invalid_list)
            err_msg = 'The following rules have mismatches between Severity and Risk Score field values:\n'
            err_msg += invalid_str
            self.fail(err_msg)
class TestEndpointQuery(BaseRuleTest):
    """Test endpoint-specific rules."""
    @unittest.skipIf(PACKAGE_STACK_VERSION  **Note**:\n> This investigation guide uses the [Osquery Markdown Plugin]'
                                '(https://www.elastic.co/guide/en/security/master/invest-guide-run-osquery.html) '
                                'introduced in Elastic Stack version 8.5.0. Older Elastic Stack versions will display '
                                'unrendered Markdown in this guide.')
        for rule in self.production_rules.rules:
            if not rule.contents.get('transform'):
                continue
            osquery = rule.contents.transform.get('osquery')
            if osquery and osquery_note_pattern not in rule.contents.data.note:
                self.fail(f'{self.rule_str(rule)} Investigation guides using the Osquery Markdown must contain '
                          f'the following note:\n{osquery_note_pattern}')
    def test_plugin_placeholders_match_entries(self):
        """Test that the number of plugin entries match their respective placeholders in note."""
        for rule in self.production_rules.rules:
            has_transform = rule.contents.get('transform') is not None
            has_note = rule.contents.data.get('note') is not None
            if has_transform and not has_note:
                self.fail(f'{self.rule_str(rule)} transformed defined with no note')
            elif not has_transform:
                continue
            transform = rule.contents.transform
            transform_counts = {plugin: len(entries) for plugin, entries in transform.to_dict().items()}
            note = rule.contents.data.note
            self.assertIsNotNone(note)
            note_template = PatchedTemplate(note)
            note_counts = defaultdict(int)
            for identifier in note_template.get_identifiers():
                # "$" is used for other things, so this verifies the pattern of a trailing "_" followed by ints
                if '_' not in identifier:
                    continue
                dash_index = identifier.rindex('_')
                if dash_index == len(identifier) or not identifier[dash_index + 1:].isdigit():
                    continue
                plugin, _ = identifier.split('_')
                if plugin in transform_counts:
                    note_counts[plugin] += 1
            err_msg = f'{self.rule_str(rule)} plugin entry count mismatch between transform and note'
            self.assertDictEqual(transform_counts, note_counts, err_msg)
    def test_if_plugins_explicitly_defined(self):
        """Check if plugins are explicitly defined with the pattern in note vs using transform."""
        for rule in self.production_rules.rules:
            note = rule.contents.data.get('note')
            if note is not None:
                results = re.search(r'(!{osquery|!{insight)', note, re.I | re.M)
                err_msg = f'{self.rule_str(rule)} investigation guide plugin pattern detected! Use Transform'
                self.assertIsNone(results, err_msg)
class TestAlertSuppression(BaseRuleTest):
    """Test rule alert suppression."""
    @unittest.skipIf(PACKAGE_STACK_VERSION  3:
                    self.fail(f'{self.rule_str(rule)} has rule alert suppression with more than 3 elements.')
    @unittest.skipIf(PACKAGE_STACK_VERSION < Version.parse("8.6.0"),
                     "Test only applicable to 8.6+ stacks for rule alert suppression feature.")
    def test_group_field_in_schemas(self):
        """Test to ensure the fields are defined is in ECS/Beats/Integrations schema."""
        for rule in self.production_rules:
            if rule.contents.data.alert_suppression:
                group_by_fields = rule.contents.data.alert_suppression.group_by
                min_stack_version = rule.contents.metadata.get("min_stack_version")
                if min_stack_version is None:
                    min_stack_version = Version.parse(load_current_package_version(), optional_minor_and_patch=True)
                else:
                    min_stack_version = Version.parse(min_stack_version)
                integration_tag = rule.contents.metadata.get("integration")
                ecs_version = get_stack_schemas()[str(min_stack_version)]['ecs']
                beats_version = get_stack_schemas()[str(min_stack_version)]['beats']
                queryvalidator = QueryValidator(rule.contents.data.query)
                _, _, schema = queryvalidator.get_beats_schema([], beats_version, ecs_version)
                if integration_tag:
                    # if integration tag exists in rule, append integration schema to existing schema
                    # grabs the latest
                    integration_schemas = load_integrations_schemas()
                    for ints in integration_tag:
                        integration_schema = integration_schemas[ints]
                        int_schema = integration_schema[list(integration_schema.keys())[-1]]
                        for data_source in int_schema.keys():
                            schema.update(**int_schema[data_source])
                for fld in group_by_fields:
                    if fld not in schema.keys():
                        self.fail(f"{self.rule_str(rule)} alert suppression field {fld} not \
                            found in ECS, Beats, or non-ecs schemas")
    @unittest.skipIf(PACKAGE_STACK_VERSION < Version.parse("8.6.0"),
                     "Test only applicable to 8.6+ stacks for rule alert suppression feature.")
    def test_stack_version(self):
        """Test to ensure the stack version is 8.6+"""
        for rule in self.production_rules:
            if rule.contents.data.alert_suppression:
                per_time = rule.contents.data.alert_suppression.get("duration", None)
                min_stack_version = rule.contents.metadata.get("min_stack_version")
                if min_stack_version is None:
                    min_stack_version = Version.parse(load_current_package_version(), optional_minor_and_patch=True)
                else:
                    min_stack_version = Version.parse(min_stack_version)
                if not per_time and min_stack_version < Version.parse("8.6.0"):
                    self.fail(f'{self.rule_str(rule)} has rule alert suppression but \
                        min_stack is not 8.6+')
                elif per_time and min_stack_version < Version.parse("8.7.0"):
                    self.fail(f'{self.rule_str(rule)} has rule alert suppression with \
                        per time but min_stack is not 8.7+')
    @unittest.skipIf(PACKAGE_STACK_VERSION < Version.parse("8.6.0"),
                     "Test only applicable to 8.6+ stacks for rule alert suppression feature.")
    def test_query_type(self):
        """Test to ensure the query type is KQL only."""
        for rule in self.production_rules:
            if rule.contents.data.alert_suppression:
                rule_type = rule.contents.data.language
                if rule_type != 'kuery':
                    self.fail(f'{self.rule_str(rule)} has rule alert suppression with \
                        but query language is not KQL')