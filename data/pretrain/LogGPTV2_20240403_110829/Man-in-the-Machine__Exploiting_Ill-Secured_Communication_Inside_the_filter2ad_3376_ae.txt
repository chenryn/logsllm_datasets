the attacks presented in this paper.
IPC security. Windows named pipes have been an at-
tractive target for security analysts. Even though the OS
offers security controls to named pipes using DACL, the
default security descriptor of a Windows named pipe al-
lows anyone to read its content [38]. In some cases, there
could be write access for everyone due to the developer’s
negligence.
In such scenarios, even a remote attacker
may be able to impersonate the pipe client to perform
code execution or denial of service [19, 20]. The server-
impersonation and name-hijacking attacks explained in
our paper are not feasible for such remote attackers.
Additionally, named pipes are also known to be vul-
nerable to an impersonation attack [53] (unrelated to the
client or server impersonation of our paper). The pipe
server impersonates its client’s security context, which
allows it to perform actions on behalf of the client. This
attack requires the server and client processes to run as
the same user or for the server to run as the superuser,
which is a stronger assumption than our threat model.
Vulnerabilities have also been found for other IPC
mechanisms. Xing et al. [55] demonstrated that a mali-
cious application on macOS and iOS can access another
application’s resources despite the app isolation. The at-
tacks intercept IPC in a way similar to ours, but the ma-
licious binary is executed with the victim’s privileges.
Related problems have also been found in Android app
isolation [22, 46].
The DNS rebinding vulnerability [26, 27, 31] that we
referred to in Sections 6.1 and 6.2 has simple solu-
tions based on whitelisting. It is, however, known that
whitelisting approaches, such as cross-origin resource
sharing (CORS) for HTTP, often lead to the use of un-
safe wildcard policies. Such too-relaxed whitelists on
locally-running services may enable XMLHttpRequest
from untrusted web applications (without the DNS re-
binding of [26, 27]). These attacks are akin to our client
impersonation, but the attack is launched from a suppos-
edly sandboxed code running in the web browser rather
from another user’s session.
Automated detection and ﬁrewall-like defenses may
help to prevent attacks between users and applications
inside the same computer. Vijayakumar et al. [51] au-
tomate the detection of name-resolution vulnerabilities
with dynamic analysis of software. A process ﬁrewall
can prevent unauthorized cross-user resource access with
system calls [52] and ﬁle and IPC squatting attacks [50].
The attacks presented in the current paper could be pre-
vented by ﬁrewalling of applications, although it may be-
come burdensome to whitelist the desirable interactions
accurately.
Password manager security. Secure and usable inte-
gration of a password manager and a browser is a widely
studied problem. Because the password manager is ex-
pected to autoﬁll passwords into web forms, the creden-
tials are exposed to network attackers running malicious
scripts on the website. Silver et al. [48] showed that the
autoﬁll policies in some browsers allow a network at-
tacker to steal credentials. Li et al. [37], on the other
hand, found that password managers suffer from tradi-
tional web vulnerabilities (e.g. XSS, CSRF), poor user-
interface design, and problems related to poorly under-
stood threat model. Unlike the remote attacker in these
publications, our MitMa attacker exploits the IPC com-
munication within a single computer.
There have been several attempts to create more se-
cure password-manager architectures, more speciﬁcally
to address autoﬁll attacks [36] and ofﬂine cracking at-
tacks [17]. While they illustrate the wide variety of
threats that must be taken into account when designing a
password manager, to our best knowledge, there is hardly
USENIX Association
27th USENIX Security Symposium    1523
any previous work that would address the security issues
arising within the computer.
USB hardware token security. Hardware tokens can be
used as a second authentication factor to protect against
credential leaking, phishing, and man-in-the-middle at-
tacks [35]. The security of the tokens has been studied
under various threat models [14, 29, 33, 42]. Unlike the
attacks in these papers, our MitMa attacks neither require
the attacker to physically access the hardware token nor
to ﬁnd a side channel.
11 Conclusion
We analyzed the security of inter-process communica-
tion in the presence of a nonprivileged malicious process
on the same computer. The malicious process may be-
long to another user that has login access to the com-
puter or to a guest user. We found several vulnerabilities
in security-critical applications including password man-
agers, two-factor authentication, and applications that
have been split into separate frontend and backend pro-
cesses. While it is possible to use IPC in a secure way,
we found that many applications either do not give much
consideration to the security of local communication or
they implement ad-hoc security measures that are insuf-
ﬁcient. We expect the importance of IPC security to in-
crease as operating system strive to isolate not only users
but also applications from each other.
Following responsible disclosure, we have reported
the vulnerabilities discovered in the research project to
the respective vendors and believe that they have taken
steps to prevent the attacks.
Acknowledgments
This work started from a collaborative research project
with F-Secure. We are grateful to Alexey Kirichenko
and others at F-Secure for their support and feedback.
The research was partially funded by the CyberTrust pro-
gram of DIMECC and Tekes (Business Finland) and by
Academy of Finland (project 296693).
References
[1] 1Password. https://agilebits.com/onepassword.
[2] Blizzard. https://www.blizzard.com/.
[3] Dashlane. https://www.dashlane.com/.
[4] F-Secure Key.
https://www.f-secure.com/en/web/
home global/key.
[5] Keybase. https://keybase.io/.
[6] Password Boss. https://www.passwordboss.com/.
[7] RoboForm. https://www.roboform.com/.
[8] Sticky Password. https://www.stickypassword.com/.
[9] Transmission. https://transmissionbt.com/.
[10] APPLE DOCUMENTATION ARCHIVE. Root and login sessions on
OS X. https://developer.apple.com/library/content/
documentation/MacOSX/Conceptual/BPMultipleUsers/
Concepts/SystemContexts.html, Apr. 2013.
[11] APPLE DOCUMENTATION ARCHIVE.
design
guide — app
box
https://developer.apple.com/library/
content/documentation/Security/Conceptual/
AppSandboxDesignGuide/AppSandboxInDepth/
AppSandboxInDepth.html, Sept. 2016.
sandbox
App
in
sand-
depth.
[12] AURA, T., AND SETHI, M. Nimble out-of-band authentication
Internet-Draft draft-aura-eap-noob-03,
for EAP (EAP-NOOB).
IETF, July 2018.
[13] BALFANZ, D., AND HAMILTON, R. Transport layer security
(TLS) channel IDs. Internet-Draft draft-balfanz-tls-channelid-01,
2013.
[14] BARDOU, R., FOCARDI, R., KAWAMOTO, Y., SIMIONATO, L.,
STEEL, G., AND TSAY, J.-K. Efﬁcient padding oracle attacks on
cryptographic hardware. vol. 7417 of LNCS, Springer, pp. 608–
625.
[15] BELLARE, M., POINTCHEVAL, D., AND ROGAWAY, P. Au-
thenticated key exchange secure against dictionary attacks.
In
Advances in Cryptology - Eurocrypt 2000 (2000), vol. 1807 of
LNCS, Springer, pp. 139–155.
[16] BLUETOOTH SPECIAL INTEREST GROUP.
V10r00. Whitepaper, Aug. 2006.
Simple pairing,
[17] BOJINOV, H., BURSZTEIN, E., BOYEN, X., AND BONEH, D.
Kamouﬂage: Loss-resistant password management. In European
Symposium on Research in Computer Security, ESORICS 2010
(2010), vol. 6345 of LNCS, Springer, pp. 286–302.
[18] BOYKO, V., MACKENZIE, P., AND PATEL, S. Provably secure
password-authenticated key exchange using Difﬁe-Hellman. In
Advances in Cryptology - Eurocrypt 2000 (2000), vol. 1807 of
LNCS, Springer, pp. 156–171.
[19] BURNS, J. Fuzzing Win32 inter-process communication mecha-
nisms. In Black Hat (2006).
[20] COHEN, G. Call the plumber you have a leak in your (named)
pipe. In DEF CON 25 (2017).
[21] DIETZ, M., CZESKIS, A., BALFANZ, D., AND WALLACH,
D. S. Origin-bound certiﬁcates: A fresh approach to strong client
authentication for the web. In 21st USENIX Security Symposium
(2012), pp. 317–331.
[22] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND
In
CHIN, E. Permission re-delegation: Attacks and defenses.
20th USENIX Security Symposium (2011).
[23] FIDO ALLIANCE. Universal 2nd factor (U2F) overview.
https://fidoalliance.org/specs/fido-u2f-v1.2-ps-
20170411/fido-u2f-overview-v1.2-ps-20170411.html,
Oct. 2017.
[24] FLORENCIO, D., AND HERLEY, C. A large-scale study of web
password habits. In 16th International Conference on World Wide
Web, WWW2007 (2007), ACM, pp. 657–666.
[25] GOOGLE.
Native messaging.
developer.chrome.com/apps/nativeMessaging.
2017].
https://
[Nov.
[26] GOOGLE SECURITY RESEARCH.
Blizzard update agent -
JSON RPC DNS rebinding. https://www.exploit-db.com/
exploits/43879/, Jan. 2018. EDB-ID 43879.
[27] GOOGLE SECURITY RESEARCH. Transmission - JSON RPC
DNS rebinding. https://www.exploit-db.com/exploits/
43665/, Jan. 2018. EDB-ID 43665, CVE-2018-5702.
1524    27th USENIX Security Symposium
USENIX Association
[28] GOVERNMENT DIGITAL SERVICE.
Introducing GOV.UK
Verify. https://www.gov.uk/government/publications/
introducing-govuk-verify/introducing-govuk-
verify, Mar. 2018.
[45] SETHI, M., ANTIKAINEN, M., AND AURA, T. Commitment-
based device pairing with synchronized drawing. In IEEE Inter-
national Conference on Pervasive Computing and Communica-
tions, PerCom 2014 (2014), pp. 181–189.
[46] SHAO, Y., OTT, J., JIA, Y. J., QIAN, Z., AND MAO, Z. M.
The misuse of Android Unix domain sockets and security im-
plications. In 2016 ACM SIGSAC Conference on Computer and
Communications Security, CCS 2016 (2016), ACM, pp. 80–91.
[47] SILBERSCHATZ, A., GALVIN, P. B., AND GAGNE, G. Operat-
ing system concepts essentials. John Wiley & Sons, 2014.
[48] SILVER, D., JANA, S., BONEH, D., CHEN, E. Y., AND JACK-
In 23rd
SON, C. Password managers: Attacks and defenses.
USENIX Security Symposium (2014), pp. 449–464.
[49] STEVENS, W. R., FENNER, B., AND RUDOFF, A. M. UNIX
Network Programming, vol. 1. Addison-Wesley Professional,
2004.
[50] VIJAYAKUMAR, H., GE, X., PAYER, M., AND JAEGER, T. JIG-
SAW: Protecting resource access by inferring programmer expec-
tations. In 23rd USENIX Security Symposium (2014), pp. 973–
988.
[51] VIJAYAKUMAR, H., SCHIFFMAN, J., AND JAEGER, T. STING:
In 21th
Finding name resolution vulnerabilities in programs.
USENIX Security Symposium (2012), pp. 585–599.
[52] VIJAYAKUMAR, H., SCHIFFMAN, J., AND JAEGER, T. Process
In 8th
ﬁrewalls: Protecting processes during resource access.
ACM European Conference on Computer Systems, EuroSys’18
(2013), ACM, pp. 57–70.
[53] WATTS, B. Discovering and exploiting named pipe secu-
rity ﬂaws for fun and proﬁt. http://www.blakewatts.com/
namedpipepaper.html. [Dec. 2017].
[54] WINDOWS IT PRO CENTER. Set up a shared or guest PC
with Windows 10.
https://docs.microsoft.com/en-us/
windows/configuration/set-up-shared-or-guest-pc,
July 2017.
[55] XING, L., BAI, X., LI, T., WANG, X., CHEN, K., LIAO, X.,
HU, S.-M., AND HAN, X. Cracking app isolation on Apple:
Unauthorized cross-app resource access on macOS. In Proceed-
ings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security, CCS 2015 (2015), ACM, pp. 31–43.
[56] YLONEN, T., AND LONVICK, C. The secure shell (SSH) proto-
col architecture. RFC 4251, IETF, 2006.
PROGRAM.
[57] YUBICO DEVELOPER
overview.
Protocol details/Overview.html. [Oct. 2017].
technical
https://developers.yubico.com/U2F/
U2F
[29] GRAND, J. Attacks on and countermeasures for USB hardware
token devices. In Proceedings of the Fifth Nordic Workshop on
Secure IT Systems (2000).
[30] JABLON, D. P. Strong password-only authenticated key ex-
change. ACM SIGCOMM Computer Communication Review 26,
5 (1996), 5–26.
[31] JACKSON, C., BARTH, A., BORTZ, A., SHAO, W., AND
BONEH, D. Protecting browsers from DNS rebinding attacks.
ACM Transactions on the Web (TWEB) 3, 1 (2009), 2.
[32] JURANIC, L.
gone wild.
DefenseCode Unix WildCards Gone Wild.txt, June 2014.
Back to the future:
Unix wildcards
http://www.defensecode.com/public/
[33] K ¨UNNEMANN, R., AND STEEL, G. YubiSecure? Formal secu-
rity analysis results for the YubiKey and YubiHSM. In Interna-
tional Workshop on Security and Trust Management, STM 2012
(2012), vol. 7783 of LNCS, Springer, pp. 257–272.
[34] LAITINEN, P. HTML5 and digital signatures: Signature creation
service 1.0.1. Speciﬁcation, Finnish Population Register Cen-
tre, 2015. https://eevertti.vrk.fi/documents/2634109/
2858578/SCS-signatures v1.0.1.pdf.
[35] LANG, J., CZESKIS, A., BALFANZ, D., SCHILDER, M., AND
SRINIVAS, S. Security Keys: Practical cryptographic second fac-
tors for the modern web. In International Conference on Finan-
cial Cryptography and Data Security, FC 2016 (2016), vol. 9603
of LNCS, Springer, pp. 422–440.
[36] LI, H., AND EVANS, D. Horcrux: A password manager for
paranoids. Document arXiv:1706.05085v2, Oct. 2017. http:
//arxiv.org/abs/1706.05085.
[37] LI, Z., HE, W., AKHAWE, D., AND SONG, D. The emperor’s
new password manager: Security analysis of web-based pass-
In 23rd USENIX Security Symposium (2014),
word managers.
pp. 465–479.
[38] MICROSOFT.
Named pipe security and access
rights.
https://docs.microsoft.com/en-us/windows/desktop/
ipc/named-pipe-security-and-access-rights, May
2018.
[39] MICROSOFT DEVELOPERS NETWORK. Choosing a network
protocol. https://msdn.microsoft.com/en-us/library/
ms187892.aspx, 2016.
[40] MICROSOFT DEVELOPERS NETWORK. AppContainer iso-
https://msdn.microsoft.com/en-us/library/
lation.
windows/desktop/mt595898(v=vs.85).aspx, May 2018.
[41] MICROSOFT DEVELOPERS NETWORK. Fast user switching.
https://msdn.microsoft.com/en-us/library/windows/
desktop/bb776893, May 2018.
[42] OSWALD, D., RICHTER, B., AND PAAR, C. Side-channel at-
tacks on the YubiKey 2 one-time password generator. In Inter-
national Workshop on Recent Advances in Intrusion Detection,
RAID 2013 (2013), vol. 8145 of LNCS, Springer, pp. 204–222.
[43] PARTANEN, A., AND LAITINEN, P. HTML5 and digital sig-
natures: Signature creation service 1.1. Speciﬁcation, Finnish
Population Register Centre, 2017. https://eevertti.vrk.fi/
documents/2634109/2858578/SCS-signatures v1.1.pdf.
[44] REDHAT. Kernel local privilege escalation ”Dirty COW” —
CVE-2016-5195. https://access.redhat.com/security/
vulnerabilities/DirtyCow, Oct. 2016.
USENIX Association
27th USENIX Security Symposium    1525