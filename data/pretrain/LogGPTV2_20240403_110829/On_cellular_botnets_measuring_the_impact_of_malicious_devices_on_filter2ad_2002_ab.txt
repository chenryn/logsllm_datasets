and Apple’s Mobile OS X. Unfortunately, many devices are only
now beginning to implement basic security mechanisms including
memory protection and separation of privilege. Accordingly, such
systems expected to be increasingly targeted by malware.
Malware targeting mobile devices may come from any one of a
number of sources. Given that 10% of cellular users downloaded
games to their mobile devices at least once a month in 2007 [40]1
and the wide availability of free ringtones, downloadable content
and executables are one of the more likely origins. Like their desk-
top counterparts, mobile devices are also likely to be susceptible to
a range of browser exploits including drive-by downloads [42]. Fi-
nally, the presence of multiple communications interfaces makes
mobile devices susceptible to malware that propagates not only
through the cellular network itself [19], but also potentially through
WiFi and Bluetooth [14, 15, 16, 17]. Accordingly, the breadth of
infection vectors exceeds that of many traditional systems.
4. ATTACK OVERVIEW
The attack in this paper attempts to prevent legitimate users of a
cellular network from sending or receiving calls or text messages.
Because most of the functionality of these networks relies on the
availablity and proper functioning of HLRs, our attack seeks to vi-
olate such conditions. In particular, an adversary with control over
a set of compromised mobile phones will attempt to overwhelm
1Given the popularity of application download services provided
on platforms such as the iPhone and Android, such numbers are
expected to grow signiﬁcantly.
Table 1: TM1’s Transaction Mix
Type Default Mix
Transaction
get_subscriber_data
get_new_destination
get_access_data
update_subscriber_data
update_location
insert_call_forwarding
delete_call_forwarding
r
r
r
w
w
rw
rw
35%
10%
35%
2%
14%
2%
2%
a speciﬁc HLR with a large volume of trafﬁc. Legitimate users
relying on the same HLR will be unable to receive service as their
requests will be dropped. Figure 1 shows how such an attack would
occur.
There are a number of differences that make such DoS attacks
different from those observed on the Internet. First, mobile devices
can not transmit entirely arbitrary requests to the HLR; rather, only
speciﬁc types of messages can be exchanged. Second, such re-
quests must be made in a manner such that unnecessary trafﬁc or
side effects are not generated. Malware with auto-dialer or auto-
texter functionality would not only use signiﬁcantly more resources
within the network (thereby increasing the obviousness of the at-
tack to both users and administrators), but would also potentially
cause serious congestion locally. This behavior may prevent such
an attack from acheiving the widespread outages possible if the
HLR were instead reached.
To understand such attacks, we ﬁrst characterize the performance
of an HLR (Section 5) and then reconcile these experiments with
the behavior of a live network (Section 6). When estimating the
size of a cellular botnet, we compare the relative impact of a vari-
ety of interactions with the HLR, thereby allowing an adversary to
execute such an attack with the smallest amount of trafﬁc possible
(Section 7). Finally, we explore network bottlenecks and discuss
ways in which they can be avoided (Section 8). We argue a real at-
tack is more likely to occur against multiple HLRs instead of a sin-
gle device as we assume that infected phones will occur uniformly
with population density. However, by characterizing the behavior
of a single HLR, we gain context to discuss realistic scenarios.
5. CHARACTERIZING HLR PERFORMANCE
Because most service requests in a cellular network must pass
through an HLR, these devices represent an attractive target for an
adversary. In particular, the failure of an HLR can cause all users
serviced by this database to be denied service. The expanded ca-
pabilities of mobile phones and their signiﬁcant susceptibility to
HLRSGSNSGSN225Figure 2: Throughput for an HLR with varying numbers
of subscribers using TM1’s Default Mix.
Figure 4: Comparison of candidate transaction types
based on the resulting throughput in a MySQL database.
Figure 3: HLR throughput for each transaction type with
500K subscribers.
Figure 5: Comparison of candidate transaction types
based on the resulting throughput in a SolidDB database.
infection make the exploitation of such a choke point a realistic
threat. In this section, we quantify the performance impact caused
by the invocation of the range of services provided by an HLR. We
achieve such characterization through the use of the Telecom One
(TM1) benchmarking suite [52]. This telecommunications indus-
try standard for database load testing allows providers to evaluate
different hardware and software conﬁgurations prior to deploying
equipment. Through the use of this tool, we can identify the most
expensive classes of service requests, thereby reducing the effort
needed for an adversary to effectively render an HLR unavailable.
5.1 Testbed Conﬁguration
We used version 3.0.6 of the TM1 benchmarking suite to char-
acterize an HLR under normal and attack conditions. TM1 creates
a database and then uses a set of networked clients to generate traf-
ﬁc to determine the Maximum Qualiﬁed Throughput (MQTh)2 in
transactions per second (TPS). The HLR was deployed on server-
class hardware with dual quad-core (8 total cores) Xeon 2.3 GHz
CPUs and 8 GB of RAM running a 2.6.22 Linux Kernel. Such a
hardware conﬁguration is within [54] or above [5, 23] speciﬁcation
for a number of real HLRs. We use this setup to evaluate the per-
formance of MySQL version 5.0.45 and SolidDB version 6.0, as
both databases are used in many real deployments. MySQL was
conﬁgured to use the InnoDB storage engine, which maintains a
buffer pool for caching data and indexes in main memory. SolidDB
stores the entire database in memory; thus it offers signiﬁcantly
higher performance. These conﬁgurations are representative of the
2Different documents produced by SolidDB have different deﬁni-
tions for MQTh [52, 53]. Through experimentation, we have deter-
mined that this value actually represents the mean throughput.
range of HLRs that are currently (MySQL) and will be increas-
ingly deployed (SolidDB) in the coming years. In order to simulate
maximal load on the HLR, client processes were spawned across as
many as six different machines, each with the same hardware spec-
iﬁcations as the HLR. Client machines were connected to the HLR
via Gigabit switch. All experiments using TM1 were repeated until
the 95% conﬁdence interval was less than two orders of magnitude
of the mean (approximately 50 experiments per data point).
5.2 Normal HLR Behavior
Providers consider two factors when deploying an HLR. The
ﬁrst, the number of subscribers serviced by the database, is inﬂu-
enced by practical concerns including population density, equip-
ment capability and available resources. Real deployments range
from a few hundred thousand to ﬁve million subscribers per HLR [6].
The second factor is the rate and type of service requests from mo-
bile devices. As discussed earlier, mobile devices interact with the
HLR in well established patterns based on functions of device mo-
bility, call rates and the anticipated frequency of speciﬁc services
being activated.
TM1 allows users to simulate normal trafﬁc by providing a “De-
fault Mix” of read and write operations. In spite of the great variety
of AT commands invoking services from mobile phones, only a
small set of generic back-end operations are required to support all
possible requests in an HLR. Recognizing this, TM1 categorizes all
such requests into one of seven “meta-commands”3. As shown in
Table 1, the Default Mix is comprised of 80% read and 20% write
meta-commands. This mix is used as the standard comparison be-
3This term is our own. These are similar to the GSM MAP com-
mands [3], however, there is not a direct mapping
 5000 10000 15000 20000 25000 30000 35000100K500K1M1.5MMax Qualified Throughput (TPS)Number of SubscribersMySQL DatabaseSolid Database 0 2000 4000 6000 8000 10000 12000 0 10 20 30 40 50 60 70 80 90 100Max Qualified Throughput (TPS)Run NumberDELETE CALL FORWARDINGINSERT CALL FORWARDINGUPDATE SUBSCRIBER DATAUPDATE LOCATIONGET ACCESS DATAGET NEW DESTINATIONGET SUBSCRIBER DATA 1000 2000 3000 4000 5000 6000 7000 8000100K500K1M1.5M2MMax Qualified Throughput (TPS)Number of SubscribersDELETE CALL FORWARDINGINSERT CALL FORWARDINGUPDATE SUBSCRIBER DATAUPDATE LOCATION 5000 10000 15000 20000 25000 30000100K500K1M1.5MMax Qualified Throughput (TPS)Number of SubscribersDELETE CALL FORWARDINGINSERT CALL FORWARDINGUPDATE SUBSCRIBER DATAUPDATE LOCATION226Figure 6: Simpliﬁed message ﬂow for update location. This
ﬁgure illustrates the caching of authentication vectors in the
VLR and vastly simpliﬁes the remainder of the message ﬂow.
Figure 7: Response times for location updates via the
GPRS attach AT command. Note that the caching of au-
thentication vectors occurs sets of ﬁve.
tween systems using TM1 [23, 54, 5]. Given that users more fre-
quently perform read operations (e.g., make phone calls, send text
messages) than write operations (e.g., authenticate to the network,
update their location), such a mix is consistent with reality.
Figure 2 shows the impact of the number of subscribers on the
MQTh for both the HLRs running MySQL and SolidDB. Because
only the caching data and indexes of the MySQL database are stored
in memory, these systems are less robust in handling elevated traf-
ﬁc from large populations of users. Because of the high demand
on the HLR, system throughput quickly becomes a result of disk
throughput. The HLR running SolidDB does not suffer from the
same signiﬁcant degradation of performance because the database
itself is stored in main memory and it employs a more advanced
concurrency control technique. These results are consistent with
previously published studies given equivalent hardware conﬁgura-
tions [54].
5.3 Characterizing Meta-Commands
Understanding the capacity of an HLR using normal trafﬁc mixes
provides an approximate volume of trafﬁc an attacker must inject
to disrupt the network. However, the amount of attack trafﬁc can
be reduced signiﬁcantly through a simple observation. An adver-
sary recognizing that read and write operations on a database have
different costs can greatly improve the efﬁciency of their attack.
Accordingly, we characterize the performance of an HLR for each
of the meta-commands.
Figure 3 shows the MQTh for each of the seven meta-commands
on an HLR running a MySQL database with 500K subscribers. As
expected, read-only transactions perform signiﬁcantly better than
those performing writes. For instance, get_access_data and
get_new_destination can be processed at approximately 11,000
TPS, whereas all four of the transactions performing writes achieve
less than 2,500 TPS. Even get_subscriber_data, which per-
forms a large number of reads, experiences approximately double
the MQTh of the fastest write transaction.
Figures 4 and 5 characterize the performance of each meta-command
for a varying number of users on HLRs running MySQL and SolidDB,
respectively. We omit the results of the less expensive read com-
mands as injecting them would require the attacker to create more
trafﬁc than would be necessary by simply increasing trafﬁc with
normal characteristics. Both Figures provide a relatively stable
ranking of the relative expense required to service these requests.
Through this analysis, we have demonstrated that an adversary
selecting certain subsets of service requests can improve the efﬁ-
ciency of their attack. However, more information on the behavior
Figure 8: Response times for location updates via the
GPRS Detach AT command. Note that the rapid re-
sponse from the network indicates that no information
is sent to the HLR.
of the core network is required before a successful attack can be
launched.
6. PROFILING NETWORK BEHAVIOR
Not surprisingly, the experiments in the last section demonstrated
that service requests requiring database writes are signiﬁcantly more
expensive than those performing reads. However, the magnitude
of this difference, nearly six times in some cases, was not previ-
ously appreciated from an attack perspective in this environment.
While such experiments certainly give insight into the classes of
messages an adversary would select in order to improve the effec-
tiveness of their attack, they do not consider the impact of network
architecture and protocols. To reconcile the differences between
our simulations and reality, we further characterize the impact of
the write-based service requests on a live network. We then con-
sult standards documents to verify discrepancies in expected and
observed behavior.
6.1 TM1 and Measuring Network Behavior
We injected and measured service requests representing each of
the four write-based meta-commands on a live cellular network.
All tests used a single Nokia 9500 running Symbian Series 80. Sim-
ilar results were recorded using a Motorola A1200 running a 2.4.20
Linux kernel. Each AT command was executed a total of 200 times
during low trafﬁc hours. In addition to the time required to receive a
response from the network for each AT command, we had to insert
a two second delay between the the sequential execution of com-
mands as immediate execution on some phones caused extended
delays. We therefore build in this extra time across all platforms
MSMSCSGSNHLRAttach RequestUpdate LocationUpdate LocationAuthenticationVectorLocation UpdateAcceptAttach AcceptThe HLR generates authentication vectors in groupsAttach RequestUpdate LocationLocation UpdateAcceptAttach AcceptThe next n-1 location updates do not reachthe HLRThe SGSN stores this data for future location updates 2 2.5 3 3.5 4 0 20 40 60 80 100 120 140 160 180 200SecondsTest NumberGPRS Enable 0 0.5 1 1.5 2 0 20 40 60 80 100 120 140 160 180 200SecondsTest NumberGPRS Disable227Figure 9: The messaging ﬂow for Call Waiting requests. Note
that updates always reach the HLR. The VLR stores a copy
of the forwarded number in case the device attempts to later
query the network.
to be as conservative as possible in our calculations. Note that our
experiments were run using the utmost caution and at no time did
we attempt to overwhelm the HLR.
6.2 Update Location
Figure 10: Response times for CW enable requests.
One of the most important functions of an HLR is to keep track
of each user’s location. To support such operations, mobile devices
implement a series of AT commands that alert the network of any
of a number of changes. For instance, as a device moves between
two base stations connected to different SGSNs or MSCs, a loca-