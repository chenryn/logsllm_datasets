can discard Oi on his local machine.
6.1.3 Maximum and Minimum of STrapitj(RVi [ RCt)
Recall that for calculating the dynamic trapdoor information, our
method needs the maximum value maxtj and minimum value mintj
in the set fSTrapitj(RVi [ RCt)j1 (cid:20) i (cid:20) ng. The static trapdoor
information STrapitj(RVi [ RCt) will not change after the prepa-
ration stage, nor do the values maxtj and mintj.
For maxtj and mintj, we let the service provider to calculate
them and the result is sent back to the data owner. This choice
reduces the computation burden of the data owner.
6.2 Clustering
After the preparation stage, the service provider starts clustering
encrypted data with the assistance of dynamic trapdoor information
provided by the data owner.
6.2.1 Service Provider’s Clustering Algorithm
The clustering algorithm carried out by the service provider is
shown in Figure 1. Before explaining this algorithm, we should
mention that this algorithm intends to be a speciﬁcation for cor-
rectness. A service provider should consider the high performance
implementation of this speciﬁcation based on the features of its
platform.
In the clustering algorithm for the service provider, an iteration
of k-means clustering starts from the label StartIterations.
Before the clustering iterations, an arrays of n integers, allo[n],
is declared to record the allocation for each data object. This array
is initialized to 0 for each element. The array allo[n] is shared
among iterations, so that the new allocation for a data object can be
detected.
In an iteration, the algorithm ﬁrst allocates each data object into
one of clusters. For this purpose, the algorithm calculates the en-
crypted distances ED2(Oi,Ct) between each data object i and each
∑
cluster t. Note that ED2(Oi,Ct) is used as a variable name, so as to
reuse the notations from the last section. The value of this variable
j=1(eij1 (cid:0) e
′
tj1)2. Similarly,
is determined by the expression
STrapit(Oi; Rit), STrapitj(Rit), DTrapt(Ct; b), DTraptj(ctj)
and OED2(Oi,Ct) are all variable names, with their values coming
from the preparation stage, the network channel (indicated by the
receive keyword), or the corresponding right-hand side expres-
sion.
d
From ED2(Oi,Ct), the algorithm produces the order-preserving
encrypted distances OED2(Oi,Ct) by adding it up with the trap-
door information Trapit. The calculation of Trapit requests the
dynamic trapdoor information DTrapt(Ct; b) and DTraptj(ctj)
for each t and j ((1 (cid:20) j (cid:20) d)) from the data owner. Then, a
data object is allocated into a cluster with the minimum distance
OED2(Oi,Ct) for 1 (cid:20) t (cid:20) k.
If an iteration does not change the allocation of any data object,
indicated by the boolean variable newAllo, the clustering stage is
completed and the service provider sends the END message to the
data owner. Otherwise, the service provider will proceed to calcu-
late the centers of new clusters and ask the data owner to reencrypt
these new centers, as described below.
Since the data objects are homomorphically encrypted, the new
cluster centers can be obtained by adding up the corresponding en-
crypted attributes of all data objects in the same cluster and then
dividing the sum by the number of data object in this cluster. Note
that each attribute of a data object is encrypted into a vector of sub-
ciphertexts, and the operations of adding two ciphertexts and divid-
let allo[n] be an array of integers
for i from 1 to n do {
allo[i]=0
}
StartIterations:
newAllo=false
//allocate each data object
for i from 1 to n do {
minD=0 //the minimum distance
cNum=0 //the nearest cluster
for t from 1 to k do {
∑
d
j=1(eij1 (cid:0) e
′
tj1)2
ED2(Oi,Ct)=
//get dynamic trapdoor information
receive DTrapt(Ct; b)
receive DTraptj(ctj) for 1 (cid:20) j (cid:20) d
Trapit=STrapit(Oi; Rit)
∑
j=1 DTraptj(ctj) (cid:3) STrapitj(Rit)
d
+
+DTrapt(Ct; b)
//the order-preserving distance
OED2(Oi,Ct)=ED2(Oi,Ct)+Trapit
if t=1 or OED2(Oi,Ct)  k, the change
is not easy to handle because there is no corresponding static trap-
door information STrapit and STrapitj for 1 (cid:20) i (cid:20) n, 1 (cid:20) j (cid:20) d
and k < t (cid:20) k
. Since the number of data objects n might be big,
it is not efﬁcient to generate the missing static trapdoor informa-
tion with respect to each data object. Our solution to this problem
is that if the data objects will be clustered for different numbers
of clusters, the data owner takes a big enough cluster number to
prepare static trapdoor information at the preparation stage. Thus,
there will be no problem for a smaller cluster number.
′
′
′
7. PERFORMANCE EVALUATION
We have implemented our method for securing outsourced k-
means clustering with Java in a prototype. In this section, we eval-
uate the performance of our method by comparing the computation
costs for the client and the service provider.
7.1 Conﬁguration
The homomorphic encryption scheme is conﬁgured to produce
eight subciphertexts for a plaintext (i.e., a key is K(8)). The num-
ber of subciphertexts affects the size of key space and hence the
security level of homomorphic encryption. Together with the fol-
lowing conﬁguration on key components, eight subciphertexts for
a plaintext can produce sufﬁciently large key space.
The key components ki (1 (cid:20) i (cid:20) 8) are randomly generated
with the form of d1d2d3d4:d5, where di is a digit, ti (1 (cid:20) i (cid:20) 8)
with the form of d1d2d3:d4, and si are random numbers having the
form of d1d2d3:d4d5. Based on this conﬁguration, for 1 (cid:20) i (cid:20) 7,
there is at least 104 possibilities of the only one non-zero ti, and
105 possibilities of both ki and si. Conservatively, we do not take
account the 105 possibilities of k8+s8+t8 into the key space, since
the information of k8 + s8 + t8 might be leaked by factoring the
last ciphertext. Hence, the key space provided by this conﬁguration
is at least 104 (cid:3) 105(cid:3)7 (cid:3) 105(cid:3)7 = 1074, which is bigger than 2192,
the key space of AES-192.
A data object in our experiment consists of attribute values of
the form d1d2d3d4:d5, and the random numbers ri used in encryp-
tion have the form d1d2d3d4d5d6:d7d8d9d10. That is, the size of
random numbers is much bigger in a ciphertext. Ciphertexts are
represented in our implementation by the Java BigDecimal class,
which supports arbitrary-precision decimal numbers and their op-
erations.
We test the prototype in two machines. One is Dell Ultrabook
XPS 13, running Windows 7, used by the data owner to encrypt
data objects and generate trapdoor information, and the other is
a Virtual Server, with one CPU and 4G RAM, running Windows
Server 2008, used by the service provider to run our clustering al-
gorithm over encrypted data. The Java implementation programs
are run within Java development environment Eclipse on both ma-
chines.
In the test, we change the number of data objects from 5000 to
30000, and each data object has 50 attributes (i.e., a data object is
a 50-dimensional vector). These objects will be initially allocated
into 10 clusters. We produced 30000 data objects randomly and
choose 10 of them as the initial cluster centers, and they are used
through the test.
130Data Objects Encryption (s)
2.12
3.93
6.07
8.64
10.26
12.01
5000
10000
15000
20000
25000
30000
Static Trapdoor (s)
1.85
2.91
4.68
5.94
7.39
10.68
Data Objects Encrypted Data (s)
5.48
12.07
17.35
21.25
28.29
41.71