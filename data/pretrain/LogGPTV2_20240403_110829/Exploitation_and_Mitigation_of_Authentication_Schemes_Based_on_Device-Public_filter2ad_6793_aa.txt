title:Exploitation and Mitigation of Authentication Schemes Based on Device-Public
Information
author:Antonio Bianchi and
Eric Gustafson and
Yanick Fratantonio and
Christopher Kruegel and
Giovanni Vigna
Exploitation and Mitigation of Authentication Schemes
Based on Device-Public Information
University of California, Santa Barbara
University of California, Santa Barbara
Antonio Bianchi
PI:EMAIL
Eric Gustafson
PI:EMAIL
Yanick Fratantonio
Christopher Kruegel
University of California, Santa Barbara
University of California, Santa Barbara
University of California, Santa Barbara
Giovanni Vigna
PI:EMAIL
EURECOM
PI:EMAIL
PI:EMAIL
ABSTRACT
Today’s mobile applications increasingly rely on communication
with a remote backend service to perform many critical functions,
including handling user-specific information. This implies that
some form of authentication should be used to associate a user
with their actions and data. Since schemes involving tedious
account creation procedures can represent “friction” for users,
many applications are moving toward alternative solutions, some
of which, while increasing usability, sacrifice security.
This paper focuses on a new trend of authentication schemes
based on what we call “device-public” information, which consists
of properties and data that any application running on a device can
obtain. While these schemes are convenient to users, since they
require little to no interaction, they are vulnerable by design, since
all the needed information to authenticate a user is available to any
app installed on the device. An attacker with a malicious app on
a user’s device could easily hijack the user’s account, steal private
information, send (and receive) messages on behalf of the user, or
steal valuable virtual goods.
To demonstrate how easily these vulnerabilities can be
weaponized, we developed a generic exploitation technique that first
mines all relevant data from a victim’s phone, and then transfers and
injects them into an attacker’s phone to fool apps into granting ac-
cess to the victim’s account. Moreover, we developed a dynamic anal-
ysis detection system to automatically highlight problematic apps.
Using our tool, we analyzed 1,000 popular applications and found
that 41 of them, including the popular messaging apps WhatsApp
and Viber, were vulnerable. Finally, our work proposes solutions
to this issue, based on modifications to the Android API.
CCS CONCEPTS
• Security and privacy → Mobile platform security; Software
security engineering;
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full
citation on the first page. Copyrights for components of this work owned by others
than the author(s) must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists, requires prior
specific permission and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associ-
ation for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134615
KEYWORDS
mobile-security, vulnerability, authentication
ACM Reference format:
Antonio Bianchi, Eric Gustafson, Yanick Fratantonio, Christopher Kruegel,
and Giovanni Vigna. 2017. Exploitation and Mitigation of Authentica-
tion Schemes Based on Device-Public Information. In Proceedings of ACSAC
2017, San Juan, PR, USA, December 4–8, 2017, 12 pages.
https://doi.org/10.1145/3134600.3134615
1 INTRODUCTION
Mobile applications (“apps”) have evolved from being simple con-
veniences, into complex systems, aimed at powering the latest gen-
eration of Internet-connected, distributed, massively multi-user ser-
vices. This implies that these apps depend to some extent on backend
services to function. For example, many apps function as frontends
for existing online services, where their entire behavior is tightly
coupled to the remote service. To handle multiple users securely on
these backends, some sort of authentication needs to occur.
Traditionally, this procedure relies on a combination of “user-
private” credentials, such as username and password. However,
given the incredibly crowded market in which these apps compete
and the fickle nature of users, there is a significant pressure to
lower the “friction” new users encounter when using an app. For
this reason, applications are moving away from authentication
schemes based on user-private credentials, toward those schemes
that are more automatic. An existing solution that is often used to
accomplish this is OAuth, an authorization mechanism that can en-
able users to leverage accounts on identity services, such as Google
and Facebook, without creating new, ad-hoc, ones. Nonetheless,
developers constantly strive to create novel, custom authentication
mechanisms to increase the ease-of-use of their applications.
In this paper, we study and characterize a new broad class
of vulnerable authentication schemes, which fully rely on what
we call device-public information. With this term, we refer to all
information, properties, and data that can be accessed by any
application (with proper permissions, as explained in Section 3.2)
installed on the same device.
As an example, consider a messaging app that, after users identify
themselves, stores a token in the device’s external storage, which
any app can access. The app then sends this token to the app’s
backend server each time it is used, as a form of authentication.
This technique has the advantage that if the user uninstalls the app
and later wants to use it again, the token will persist on the external
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
A. Bianchi et al.
storage, and no re-authentication will be required. Unfortunately,
this versatility comes at a price: a malicious app running on the
same device can obtain and leak this token to a remote attacker, who
can now easily hijack the user’s account. Even if an app is leveraging
a technology such as OAuth, poor handling of the resulting tokens
could render them device-public as well. This is just one possible
scenario for the mis-use of device-public information; apps can and
do use such schemes as the only form of authentication, without
requiring private data from the user such as a password, rendering
their associated accounts wide-open to malicious apps on the device.
In this paper, we perform the first comprehensive analysis
and characterization of vulnerable authentication schemes
based on device-public information. We start by describing the
identity-transfer attack, a generic exploitation technique, composed
by two steps. First, a malicious app, termed the “ID Leaker,” steals
all device-public information from a victim’s device without any
user interaction. Then, this app transfers this data to “ID Injector,”
an app installed on the attacker’s device that collects the received
information and injects them into the device. Once this step is
completed, the attacker can simply install the vulnerable target app,
which will automatically log the attacker in the victim’s account.
We also take the first step toward understanding how widespread
this class of vulnerabilities is, by developing a dynamic analysis
system that aims at uncovering potentially-vulnerable apps among
a much larger set. While “authentication” is a difficult behavior
to characterize, we can leverage interesting behavioral patterns
to locate authentication with enough accuracy to help a human
analyst determine if a vulnerability is present. In particular, the
system we developed records the app’s user interface behavior
during its first execution on a device, when authentication and
registration is likely to appear. Then, as a second step, the system
wipes the app’s private data (by uninstalling and then re-installing
the app), and it runs the app once again. The key intuition is
that if the behavior of an app changes after the re-installation, it
means the app somehow relies on device-public information for
authentication, and is very likely to be vulnerable to our attack. As
a final step, our system attempts to confirm the vulnerability by
using the generic exploitation technique described above to transfer
the identity used in the previous steps to an entirely new device.
Although some of the ideas and intuitions behind this work can
be applied to any mobile operating system (and the corresponding
apps), in this paper we focus on Android. This choice has been
motivated by two main reasons: the fact that Android is currently
the most widespread mobile operating system [36] and the ease
of performing automatic analyses on Android apps.
We used this analysis system to vet 1,000 of the most popular
applications from the Google Play Store, and 41 of them were
correctly identified as vulnerable. Two of these vulnerable apps
were WhatsApp and Viber, two of the most popular messaging apps,
which are used by hundreds of millions of users. For both these
apps, we discovered that it was sufficient to steal the content of a
single file (and spoof the value of some device’s identifiers) to fully
hijack a user account. We reported our findings to the respective
security teams, which quickly acknowledged the vulnerabilities.
Among the apps flagged as vulnerable, our system also identified
several popular games that allow a user to purchase virtual objects
or currency: our automatically generated exploit was able to hijack
these accounts as well. We conclude this work by proposing and
implementing solutions for the identified class of vulnerabilities.
schemes that rely on device-public information.
In summary, the contributions of this paper are as follows:
• We identify and study a new class of insecure authentication
• We demonstrate how it is possible to automatically exploit
these vulnerable schemes by developing a generic “identity-
transfer” attack, which is capable of stealing and replaying
device-public information to hijack accounts.
• We explore the scope of the vulnerability in 1,000 popular
apps from the Google Play Store using an automated
dynamic analysis system, and identified 41 vulnerable apps,
including Viber and WhatsApp.
• We propose and implement solutions to the identified
problems.
2 AUTHENTICATION SCHEMES
Authentication in mobile applications can take on a variety of
distinct forms, with differing security properties. The first, and most
obvious, authentication scheme is the traditional username and
password, in which the user is asked directly by the authenticating
app for credentials. The app then sends these credentials to its
backend server, which verifies their correctness. After this step, the
server sends to the app a token, which is a shared secret string that
can be used for authenticating all following interactions between
the client and the server.
Another way to authenticate is to use third-party authentication
services. This method removes the need to handle tedious per-app
registrations. In Android, the AccountManager [14] offers a generic
API that can be used to obtain an OAuth-like authentication token
from third-party identity providers, such as Google or Facebook.
The obtained token is presented with the app’s requests to its
backend, and can then be used by the backend to ask the third-party
service for more information about the user.
Another popular scheme uses text messages (SMS) and the user’s
phone number as a form of authentication. In this scenario, the
user would need to prove that they own a given phone number. As
a part of the verification process, the user would typically enter the
phone number manually. A code is then sent via SMS to the user,
and is typically parsed automatically from the user’s SMS inbox
and verified. After this step, the phone number is used as the user’s
primary identity.
Lastly, some Android apps employ schemes in which distin-
guishing information about the device itself is used to bind a device
to an account. This works under the implicit assumption that
these identifiers are static and unique per device. To authenticate,
the required identifiers are sent to the app’s backend server, an
authentication token is obtained, and such token is then sent along
with future requests.
To reach the widest possible audience, many apps offer multiple
authentication schemes, such as Facebook, Google, or regular user
name and password authentication. While some of these methods
may be securely implemented, the app may still be vulnerable if
it allows users to use unsafe login-less methods that rely only on
device-public information.
Exploitation and Mitigation of Authentication Schemes. . .
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
At their core, all these authentication schemes aim to obtain
some sort of token that can be used to authenticate a user to the
app’s remote backend. However, if the authentication token can
be obtained using information that another application on the same
device can obtain, the authorization scheme is not safe. We also
note that, even when apps employ schemes that are thought to
be secure, they can still be vulnerable to account hijacking if they
store authentication tokens in publicly accessible locations.
3 IDENTITY-TRANSFER ATTACK
Our key observation is that if an app only relies on device-public
information to authenticate the user to its backend, it is possible for
a malicious app to mine and leak all relevant information. If such
a scheme is in use, an attacker can perform an identity-transfer
attack, transferring information from the victim’s device to the
attacker’s, so that the user’s identity associated to a given app is
effectively transferred.
3.1 Threat Model
In this paper, we assume that an attacker is able to lure the user
into installing an attacker-controlled malicious application. This
application requests all the needed permissions to acquire the
device-public information being stolen, as outlined in Section 3.2.
Moreover, we assume the operating system of the device to be
uncompromised, and it thus constitutes a trusted computing base.
Furthermore, we assume that the victim’s device is not rooted (if
it is, our attack does not take advantage of it), which means that
an attacker cannot get root privileges. Therefore, the malicious app
does not have access to app-private data, as the separation of the
apps’ private storage is strictly enforced by the OS.
3.2 Device-Public Information Sources
In this paper, we refer to device-public information as information
that can be accessed from any app on the device that requests the
permissions needed to obtain it. We will focus primarily on Android
versions ranging from Android 4.4 to Android 7. When necessary,
we will describe differences among different versions.
Here we will discuss the different sources of device-public infor-
mation we have considered in our study, which are used by apps to
identify users (also summarized in Table 1). Some of these identifiers
are related to a specific hardware device, and cannot be changed by
the user, whereas others can be changed after a “factory reset” of the
device, or are linked to a Google Account. Google has recently at-
tempted to hide some identifiers from apps to thwart tracking. That
said, as of Android 7.1.1, we found that we are still able to access ev-