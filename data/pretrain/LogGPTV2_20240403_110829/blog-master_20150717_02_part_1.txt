## PostgreSQL (User defined Operator) UDO & Operator Optimization Information  
### 作者                                                          
digoal                                                          
### 日期                                                           
2015-07-17                                                  
### 标签                                                          
PostgreSQL , UDO , 用户定义操作符    
----                                                                      
## 背景                                                           
PostgreSQL 支持自定义操作符，本质上是调用函数来实现的。  
语法如下：  
```  
CREATE OPERATOR name (  
    PROCEDURE = function_name  
    [, LEFTARG = left_type ] [, RIGHTARG = right_type ]  
    [, COMMUTATOR = com_op ] [, NEGATOR = neg_op ]  
    [, RESTRICT = res_proc ] [, JOIN = join_proc ]  
    [, HASHES ] [, MERGES ]  
)  
```  
例如创建一个求两个值的平均值的操作符：  
首选要创建函数  
```  
postgres=# create function f_avg(numeric,numeric) returns numeric as $$  
postgres$#   select ($1+$2)/2;  
postgres$# $$ language sql strict;  
CREATE FUNCTION  
```  
验证函数  
```  
postgres=# select f_avg(1,null);  
 f_avg   
-------  
(1 row)  
postgres=# select f_avg(1,2);  
       f_avg          
--------------------  
 1.5000000000000000  
(1 row)  
```  
创建操作符，指定左右参数类型，调用的函数名，commutator是一个和优化器相关的选项，我后面会重点介绍：  
```  
postgres=# create operator ## (procedure=f_avg, leftarg=numeric, rightarg=numeric, commutator='##');  
CREATE OPERATOR  
postgres=# select 1 ## 2;  
      ?column?        
--------------------  
 1.5000000000000000  
(1 row)  
```  
注意到在创建操作符的语法中有6个和优化器有关的关键字：  
```      
    [, COMMUTATOR = com_op ] [, NEGATOR = neg_op ]  
    [, RESTRICT = res_proc ] [, JOIN = join_proc ]  
    [, HASHES ] [, MERGES ]  
```  
介绍如下：  
假设x表示操作符左侧的参数，y表示操作符右侧的参数  
1\. commutator，指明x op1 y等效于y op2 x，即操作数调换，返回的值一样。例如2>1 和1就是操作符时指定了它的commutator是是它的commutator。  
另外需要注意，有commutator操作符的操作符的左右两侧的参数类型必须一致，这样才能满足x op1 y等价于y op2 x。  
优化器如何利用commutator呢？例如索引扫描，必须列在操作符的左侧才能使用索引。1 > tbl.c这个条件，如果>没有commutator的话，是不能使用索引的。  
例子，以int4的>和和' and oprcode='int4gt'::regproc;  
    oprcom      
--------------  
 pg_catalog.  
(1 row)  
```  
记录他们的oprcom对应的OID  
```  
postgres=# select * from pg_operator where oprname='>' and oprcode='int4gt'::regproc;  
 oprname | oprnamespace | oprowner | oprkind | oprcanmerge | oprcanhash | oprleft | oprright | oprresult | oprcom | oprnegate | oprc  
ode |   oprrest   |     oprjoin       
---------+--------------+----------+---------+-------------+------------+---------+----------+-----------+--------+-----------+-----  
----+-------------+-----------------  
 >       |           11 |       10 | b       | f           | f          |      23 |       23 |        16 |     97 |       523 | int4  
gt  | scalargtsel | scalargtjoinsel  
(1 row)  
postgres=# select * from pg_operator where oprname='' and oprcode='int4gt'::regproc;  
UPDATE 1  
postgres=# update pg_operator set oprcom=0 where oprname=',id;  
                        QUERY PLAN                          
----------------------------------------------------------  
 Seq Scan on tbl  (cost=0.00..1361.00 rows=33333 width=4)  
   Filter: (10 > id)  
(2 rows)  
```  
重新建立这两个 operator的commutator关系后，优化器会自动将10>id转换为id' and oprcode='int4gt'::regproc;  
UPDATE 1  
postgres=# explain select * from tbl where 10>id;  
                                QUERY PLAN                                   
---------------------------------------------------------------------------  
 Index Only Scan using idx_tbl_id on tbl  (cost=0.29..8.45 rows=9 width=4)  
   Index Cond: (id 是一对negator操作符，NOT (x = y) 可以简化为 x <> y。  
```  
postgres=# explain select * from tbl where 10=id;  
                                QUERY PLAN                                   
---------------------------------------------------------------------------  
 Index Only Scan using idx_tbl_id on tbl  (cost=0.29..8.31 rows=1 width=4)  
   Index Cond: (id = 10)  
(2 rows)  
postgres=# explain select * from tbl where not(10<>id);  
                                QUERY PLAN                                   
---------------------------------------------------------------------------  
 Index Only Scan using idx_tbl_id on tbl  (cost=0.29..8.31 rows=1 width=4)  
   Index Cond: (id = 10)  
(2 rows)  
```  
同样，操作符两侧参数x,y的类型必须一致。并且仅适用于返回布尔逻辑类型的操作符。  
3\. restrict，是用于评估选择性的函数，仅适用于二元操作符，例如where col>100，这个查询条件，如何评估选择性呢？是通过操作符的restrict来指定的，选择性乘以pg_class.reltuples就可以评估得到这个查询条件的行数。  
选择性函数的代码在 src/backend/utils/adt/   
包括  
```  
-rw-r--r--. 1 1107 1107  33191 Jun 10 03:29 array_selfuncs.c  
-rw-r--r--. 1 1107 1107   2316 Jun 10 03:29 geo_selfuncs.c  
-rw-r--r--. 1 1107 1107    720 Jun 10 03:29 network_selfuncs.c  
-rw-r--r--. 1 1107 1107  33895 Jun 10 03:29 rangetypes_selfuncs.c  
-rw-r--r--. 1 1107 1107 218809 Jun 10 03:29 selfuncs.c  
```  
选择性函数，还需要依赖数据库的统计信息，从而计算选择性，常见的选择性计算函数有：  
```  
postgres=# select distinct oprrest from pg_operator order by 1;  
   oprrest      
--------------  
 -  
 eqsel  相等  
 neqsel  不相等  
 scalarltsel  小于等于  
 scalargtsel  大于等于  
 areasel  
 positionsel  
 contsel  
 iclikesel  
 icnlikesel  
 regexeqsel  
 likesel  
 icregexeqsel  
 regexnesel  
 nlikesel  
 icregexnesel  
 rangesel  
 networksel  
 tsmatchsel  
 arraycontsel  
(20 rows)  
```  
当然，用户如果自定义数据类型的话，也可以自定义选择性函数，或者使用以上标准的选择性函数，只是可能需要实现一下类型转换。  