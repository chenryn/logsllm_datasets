relation Rlin
F over Dx,1 × Dx,2 × Du,1 × ··· × Du,(cid:96) such that:
(cid:0)x1, x2, (uj)j∈[(cid:96)]
(cid:1) = 1 ⇐⇒ F · y = x1, where y := (x2, (uj)j∈[(cid:96)])
Rlin
F
Note that the above relation Rlin is slightly diﬀerent from the one supported by CPPed
lin of Section
the linear function is not applied over public inputs.
4.2. The only diﬀerence is that in CPPed
lin
However, this small discrepancy can be easily solved by adding a commitment to the additional
public input x2 and opening this commitment.
Summary of the Building Blocks. In Table 2 we recall the various commit-and-prove SNARKs
presented Sections 4 and 5 along with a summary of their eﬃciency measures. First-level dependen-
cies between the diﬀerent building blocks can be found in the ﬁrst column of the table. We wanted
to show the minimal requirements to build such constructions, regardless of the inner instantiation
of each modular component. That is, for each row we are pointing out the CP-SNARKs that appear
only in the description of their respective protocol.
6.2 Arithmetic Circuit Satisﬁability
Let us consider the problem of arithmetic circuit satisﬁability.
Deﬁnition 6.3. Let C : Fnx × Fnw → Fl be an arithmetic circuit, where nx, nw, l ∈ N denote input,
witness and output length. We deﬁne the arithmetic circuit satisﬁability relation Rac
C (x, w) as the
set of pairs such that C(x, w) = 0l.
CP-SNARKs
P
V
Dependencies
O(m + (cid:96)) O((cid:96) + n)
Scheme
CPlink O(m + (cid:96)) O((cid:96))
CPPed
lin
CPeq ∧ CPpoly ∧ CPprd → CPsc
CPpoly ∧ CPsc → CPlin
CPsc → CPmmp
CPpoly ∧ CPsc → CPmm
CPpoly ∧ CPsc → CPhad
CPeq ∧ CPpoly ∧ CPprd → CPipd
CPeq ∧ CPipd ∧ CPprd → CPsfprm
O(m)
O(N ) O(log N )
O(n2)
O(n2)
O(n)
O(n)
O(n)
O(n2)
O(µ)
O(µ)
O(µ2)
O(µ2)
O(µ)
2N + 3
2n2 + 3
2n2 + 3
2n + 3
2n + 3
2n + 3
|crs|
G1
m + (cid:96) + 1
G2
(cid:96) + 2
m + (cid:96)
n + (cid:96) + 1
|π|
G1
1
1
2(δ + 1)µ + 3
µ + 3
µ(2d + 2p + 3) + 4p + 3
log N + 3
2 log N + 13µ + 21
2µ + 3
2µ + 3
µ + 3
µ + 3
µ + 3 (cid:80)(cid:96)
11µ + 11
15µ + 15
15µ + 15
j + 25µj) + 16(cid:96) + 13(cid:80)(cid:96)
F
0
0
µ + 5
µ + 7
µ + 5
2µ + 5
µ + 5
j=0(11µ2
11µ2/2 + 25µ/2 + 2
µ2/2 + 15µ/2
j + 15µj) + 10(cid:96) + 2
Table 2: Direct dependencies and concrete theoretical costs of our CP-SNARKs. In CPsc we denote:
by m the number of monomials in the sumcheck polynomial; by µ the number of variables in the
sumcheck polynomial (note m ≤ 2µ); by δ the degree of the committed polynomial (if δ = 1, it
holds that (δ + 1)µ ≥ m); by d the maximum degree of each variable in the sumcheck polynomial;
by p the number of polynomial factors committed. For all remaining schemes, we denote: by n the
length of vectors, the order of square matrices or the largest dimension in a matrix; by µ the size
of the multilinear extensions involved, which above it is always such that µ = log n; by N the size
lin matrix, of dimension 2ν × 2µ = n × m; by µj the logarithm of the length of
of the CPlin and CPPed
the j-th set of variables; by (cid:96) the total number of commitments.
j=0(µ2
36
We show two solutions to model the above relation using a commit-and-prove paradigm. The
ﬁrst one relies on the encoding put forward by Bootle et al. [BCC+16] that reduces the relation Rac
to an Hadamard product and a set of linear constraints. The second one is similar to that of Groth
[Gro09] (recently used in [BCG+17]) and encodes arithmetic circuit satisﬁability using Hadamard
products, additions and permutations of (committed) vectors.
Arithmetic Circuit Satisﬁability through Hadamard and Linear Constraints
Following [BCC+16, BBB+17], an arithmetic circuit C can be described by a tuple (nx, nu, N, W L,
W R, W O, W x, W U , c) where nx and nu are the input and (committed) witness lengths respectively,
N is the number of multiplication gates, and matrices W L, W R, W O ∈ FQ×N , W x ∈ FQ×nx, W U ∈
FQ×nu and vector c ∈ FQ describe a system of linear equations over the wires of C. Using such a
deﬁnition, C is satisﬁed by (x, u) if there exist three vectors uM
R + W O · uM
O ∈ FN such that
L , uM
O + W x · x + W U · u = c
O ∧ W L · uM
L + W R · uM
L ◦ uM
uM
R = uM
R , uM
F (c, (x, u, uM
L , uM
R , uM
O ))
O ) ∧ Rlin
where F = (W x, W U , W L, W R, W O) ∈ FQ×(nx+nu+3N ).
C (x, u, uw) := Rhad(uM
R , uM
L , uM
Rac
By the above deﬁnition of Rac
C and our Theorem 3.1 we obtain the following corollary.
Corollary 6.1. If there exist CP-SNARKs CPhad and CPlin for a commitment scheme Com and for
relations Rhad and Rlin respectively, then there is a CP-SNARK LegoAC for Com and relation Rac
C .
Instantiations. We evaluate two instantiations of LegoAC:
– LegoAC1: from our CPPed
lin (Section 4.2) and Lipmaa’s CP-SNARK for Hadamard products [Lip16].
LegoAC1 is a CP-SNARK for the commitment scheme of [Lip16], and its security holds in the
lin ).
generic group model (due to GGM security of CPPed
– LegoAC2: from our CPPed
lin
(Section 4.2) and our CPhad (Section 5.3). This is a CP-SNARK for
PolyCom, and its security holds in the GGM and random oracle model (the latter due to CPhad).
If needed, both schemes can be lifted to work with a standard Pedersen commitment using CPlink.
Their complexity, summarized in Table 1, results from the combined eﬃciency of the building blocks
plus the observation that the matrices W L, W R, W O are sparse and with a number of nonzero
entries linear in the number of circuit wires.
Arithmetic Circuit Satisﬁability through Hadamard, Addition and Equalities
Any arithmetic circuit C consists of NA addition gates, NM multiplication gates, both of fan-in 2,
and NC multiplication-by-constant gates, of fan-in 1. Each gate has a left input, a right input and
an output wire;17 also each output wire can be input to another gate. This means that C can be
described by integers NA, NM , NC, a vector c ∈ FNC of constants, and the wiring information saying
that the output wire of addition/multiplication i is the left/right input of addition/multiplication
gate j. With such a representation ∃w : C(x, w) = 0l can be encoded by showing the existence of
an assignment to the inputs and outputs of C’s gates that satisﬁes every gate, that is consistent
with the wiring of C as well as with the public input x and the output 0.
17 We model gates of fan-in 1 as having one single left input.
37
More formally, consider an arithmetic circuit C : Fnx × Fnw → Fl with NA addition gates, NM
multiplication gates, and NC multiplication by constant gates, and where we split the witness w
between committed witness u ∈ Fnu and free witness ω ∈ Fnω. Assume we arrange the wires of C
so as to have, orderly: the nx input wires, the nu committed witness wires, the l output wires, the
3NA left, right and output wires of the addition gates, the 3NM left, right and output wires of the
multiplication gates, and the 2NC input and output wires of the multiplication-by-constant gates.
All these wires can be indexed by integers from 1 to m = nx + nu + l + 3(NA +NM ) + 2NC, and the
wiring information of C can be described by a set S of pairs (i, k) ∈ [m] × [m] indicating that the
wire at position i is connected to the wire at position k.
proving ∃(u, ω) Rac
concatenation of vectors uw := (uA
Therefore we model an arithmetic circuit C with a tuple (nx, nu, l, NA, NM , NC, c, S). Then
C (x, u, ω) can be done by proving the existence of a vector uw, that is the
L, uA
R, uA
O, uM
C (x, u, uw) := Radd(uA
∧ Rhad(uM
L , uM
L, uA
L , uM
R , uM
R, uA
R , uM
O , uC
I , uC
O) ∧ Rhad(uC
O ) ∧ Rveq
Rac
O), such that
I , c, uC
O)
S ((x, 0), u, uw)
L, uA
R, uA
comes for free. Therefore, by deﬁnition of Rac
O) is the relation expressing the predicate uA
where Radd(uA
O ) is the Hadamard product relation uM
uM
O, and Rhad(uM
L , uM
R ,
L ◦ uM
O,j for all j ∈ [3NM ]).
If Com is a linearly homomorphic and extractable commitment scheme, a proof system for Radd
C and our Theorem 3.1 we obtain the following corollary.
Corollary 6.2. If there exist CP-SNARKs CPhad and CPveq for a linearly-homomorphic extractable
commitment scheme Com and for relations Rhad and Rveq respectively, then there is a CP-SNARK
C .
LegoUAC for Com and relation Rac
?= uA
R,j = uM
O (i.e., uM
L,j · uM
L + uA
R
?= uM
R
Instantiating LegoUAC with Universal CRS. Both the schemes LegoAC1 and LegoAC2 consid-
lin .18 The LegoUAC
ered earlier have a circuit-speciﬁc CRS due to the circuit-speciﬁc CRS of CPPed
scheme obtained in the corollary above can be instantiated in such a way to have universal CRS
of linear-size. To this end, we recall that Rveq can be expressing using Rsfprm, and therefore we
evaluate an instantiation of LegoUAC with our CPhad and CPsfprm schemes. Both schemes admit a
universal CRS that can be deterministically specialized (due to specializing CPsfprm’s CRS to the
circuit-dependent permutation φ). The complexity of LegoUAC is depicted in Table 1 and stems
from that of our CPhad and CPsfprm.
more in detail, we consider relations Rparjnt(u) :=(cid:86)N
6.3 Parallel Computation on Joint Inputs
We consider the problem of proving (in zero-knowledge) the correctness of a computation that
consists in the parallel execution of the same subcomputation on (partially) shared inputs. Slightly
j is a subset of the
entries of u. This relation has several use cases. One example is proving knowledge of all the leaves