Log Block
Size [Bytes]
106
98
210
76 + 4 · number of logs + size of (logs)
Figure 5 shows the results as a cumulative distribution
function. Intuitively, when w increases, the frequency at which
nodes in the network are audited also increases. With w=4,
98.4% of the challenges were received within 10 s (1T ) of
receiving the last challenge, and in the worst case it took only
27.96 s ( t) is executed. As such, there exists a race
Fig. 6: Timeline of our attack case study, where host v replays the
trace of the “THEIA Firefox Backdoor w/ Drakon In-Memory” attack
from the DARPA TC dataset [59]. The circles in the zoomed-in view
represent audits from other hosts to v: the green audits successfully
veriﬁed and replicated logs of the trace; the red audit occurred after
the attacker tampered with the logs and failed, causing CUSTOS to
raise an alert to the system administrator.
other hosts everything but the last 2 seconds of the trace before
the attacker succeeded at achieving privilege escalation. These
logs described the adversary’s initial compromise attempts,
their methods of establishing foothold and their download of a
malicious ﬁle. The attacker was able to erase the last 2 seconds
of the trace before they were replicated. These included the
logs describing their method of achieving privilege escalation.
However, CUSTOS detected this log tampering 3 seconds later
(at the next audit), and alerted the system administrator of the
violation. In conclusion, CUSTOS forces attackers into a “lose-
lose” situation: either they can be covert and not tamper with
logs (which can be used for forensics), or they can erase logs
but then be detected by CUSTOS.
XII. DISCUSSION
1) Value of CUSTOS after full system compromise: This
work considers methods for securing audit logs in the face of
a powerful anti-forensic adversary that has gained full control
of the system (i.e., root privilege); this threat model does not
reﬂect an artiﬁcially-enhanced attacker, but instead reﬂects the
common capabilities and methods of system intruders (e.g.,
[16], [17], [90], [121], [104], [37], [77], [9]). Against this
adversary, ensuring the correctness of log events recorded post-
compromise is not practical. This is because, after full system
compromise, no security measure can prevent the attacker from
controlling which events are logged. This grants them the
ability to make arbitrary claims about the events on the system.
This limitation is common to all secure logging solutions (cf.
Section XIII). Nonetheless, CUSTOS provides an invaluable
property even against root-level attackers—the intruder is
unable to undetectably edit or remove any recorded evidence of
their methods of entry onto the system, reconnaissance tactics
prior to escalating privilege, and their method of privilege
escalation. This information may implicate another node in the
network or lead to the discovery of a zero-day exploit, which
are valued at tens of thousands of dollars [92] and are thus
zealously guarded by attackers. Most importantly, these events
13
11:4210:52Attacker attempted to compromise v but failedAttacker compromised v (unprivileged access)11:46:2711:46:44Attacker escalated privileges and then erased logs11:46:4711:46:42Tampering detected!11:46:3611:46:1711:46:25Attacker downloadeda script on vcondition between the time mx reaches the enclave and the
moment the attacker can erase it. A variety of factors, including
scheduling decisions, might affect whether this race condition
is exploitable. Nonetheless, recall that G1 is concerned with
detecting tampering only with log messages recorded pre-
compromise, which will likely include signiﬁcant system calls
(e.g., events from 10:52 to 11:46:42 in Section XI): CUSTOS,
like prior work, does not seek to protect events that have not
yet been recorded by the moment of compromise.
6) Diagnosing Benign Faults: Finally, one limitation of
CUSTOS is that it cannot differentiate benign power failures
or crashes from protocol
termination attacks, creating the
possibility for false-positive alerts. The root cause of this issue
is that Intel SGX and other TEEs are unable to measure the
runtime integrity state of the untrusted OS at the moment
when an asynchronous failure occurs, and are thus unable to
tell whether the failure was benign or caused by a malicious
OS. This is an important problem with existing TEEs, but
orthogonal to the aims of this work. Furthermore, alternate
mechanisms exist
to distinguish failures from attacks: for
example, out-of-band information such as telemetry data from
power distribution units will allow the system administrator to
differentiate a power failure from an attack. The administrator
can also investigate faults using techniques from computer
forensics. For example, looking at logs that were not lost, open
ports and running processes may reveal useful information
on the type of fault which occurred; external network trafﬁc
monitors and anti-rootkit scanners are also useful tools which
can help diagnose the issue. In any case, whether benign or
malicious, faults still require manual intervention: we provide
an in-depth discussion on how CUSTOS supports recovery from
errors in Appendix A. However, in practice, we believe that it
is not in an APT attacker’s interests to compromise a machine
and make it crash immediately before the next audit, as it
will cause the system administrator to intervene and effectively
prevent them from completing their mission [83].
XIII. RELATED WORK
A. Secure Logging
Many cryptographic approaches have been proposed for
tamper-evident logging. Bellare et al. [10] ﬁrst deﬁned the
notion of forward integrity for secure audit logs, which consists
of generating integrity proofs in such a way that when the
logging machine is compromised, previously committed logs
will remain tamper-evident. To achieve forward integrity, the
signing key evolves over time and expired keys are deleted
from the logger. Schemes that use symmetric primitives [10],
[108], [109], [114] traditionally rely on hash chains, of-
fering computational efﬁciency at
the cost of higher data
overheads while assuming a fully trusted veriﬁer. On the
other hand, systems that rely on asymmetric primitives [44]
provide third-party veriﬁability but incur larger computational
overheads both to generate and verify proofs. To minimize
these overheads, [73], [127] proposed the use of sequential
aggregate signatures, but these schemes have been shown to
be insecure [40]. Yavuz et al. presented an optimized signing
procedure at the cost of a key size that is linear with the number
of log entries and no support for ﬁne-grained audits [128].
Most recently, Hartung et al. [41] presented a scheme that
combines forward-secure sequential aggregate signatures with
forward-secure signatures, but still incurs impractically large
computational costs to generate proofs.
The use of various cryptographic data structures has also
been proposed in the literature for storing data in a tamper-
evident fashion, such as history trees [20], [101] and hash
treaps [101]. The trust model for these systems is that messages
generated by a host are being stored in a remote untrusted
server, and the data structures provide an efﬁcient interactive
protocol
to verify that a message was correctly recorded.
CUSTOS also features untrusted storage servers, but in a more
aggressive threat model
including the
host itself, may be compromised. We thus use redundancy to
probabilistically ensure that messages are not erased. It would
be possible to extend CUSTOS to use these structures as a way
to verify that an auditor has not erased replicated logs.
in which any node,
that
to introduce a protocol
Closely related to ours is the work from Karande et al. [57],
who were the ﬁrst
leverages
Intel SGX to protect log integrity. Their system relies on
hash chains based on symmetric-key cryptography. However,
SGX-Log fails to provide third-party veriﬁability (G2) and
log availability (G4) since log access and veriﬁcation rely
on the particular enclave that sealed the log. Further, SGX-
Log is not minimally invasive (G5) because encryption breaks
interoperability with log analysis applications; additionally,
SGX-Log’s reliance on frequent writes to an Intel SGX’s
monotonic counter is vulnerable to memory wear-out. Finally,
SGX-Log’s per-event processing overhead is too costly for the
high-frequency nature of system logging (cf. Section X-A).
B. Data Provenance and Attack Investigation
Related to system auditing are also [7], [31], [62], [63],
[84], [97], [99], [76], which focused on techniques to accu-
rately and efﬁciently collect and analyze system logs. This
line of work typically parses system logs into dependency
graphs (also known as provenance graphs) that allow to derive
insights and scrutinize the causal relationships between events.
Several methods have been proposed to automatically recog-
nize security incidents from these graphs [23], [45], [83], [42],
[11], [93], [35], [98], [124], to more precisely and accurately
reason about the stream of events [67], [75], [65], [74], [5], or
to more efﬁciently process queries to these graphs [71], [29],
[30], [54], [55], [96]. Notably, all this work fully trusts the
integrity of the logs used as input to their systems. CUSTOS can
thus complement these existing systems by providing tamper-
evidence to system logs.
C. Secure Hardware
Several works have leveraged the isolation guarantees of
Intel SGX [81], [50] to protect user-level applications across
domains. Representative systems that focused on “shielding”
applications in SGX enclaves are Haven [8] for a lightweight
OS, SCONE [1] for Docker containers and Panoply [113] for
POSIX interface threads. Glamdring [69] further proposed a
framework to semi-automatically partition applications to only
run security-sensitive code within enclaves. Rather than secure
entire applications, CUSTOS’ goal is to secure system logs,
thus minimizing the TCB to a small set of critical components.
Intel SGX has also served to enable applications that were
either not possible or not practical otherwise, including secure
14
multi-party computation [3], functional encryption [28], obliv-
ious machine learning [91], integrity assurance for Internet
services [2], secure databases [100], secure network function
virtualization [112], privacy-preserving cloud computing [46],
secure MapReduce computations [110], [22] and access del-
egation [79]; or to enhance the security of systems such as
Tor [61], Zookeeper [15] and Spark [130]. Analogously to
these works, CUSTOS leverages secure hardware to enable
an application (tamper-evident auditing) to operate efﬁciently
under a stronger threat model that was previously possible.
D. Network Auditing
Adopting a similar threat model
to CUSTOS’s are the
network forensic systems PeerReview [36] and SNooPy [131],
which detect faults amongst byzantine nodes participating in
a network protocol. The systems detect some faulty nodes in