title:Network scan detection with LQS: a lightweight, quick and stateful
algorithm
author:Mansour Alsaleh and
Paul C. van Oorschot
Network Scan Detection with LQS:
A Lightweight, Quick and Stateful Algorithm
Mansour Alsaleh, P.C. van Oorschot
School of Computer Science
Carleton University, Ottawa, Canada
{malsaleh, paulv}@scs.carleton.ca
ABSTRACT
Network scanning reveals valuable information of accessi-
ble hosts over the Internet and their oﬀered network ser-
vices, which allows signiﬁcant narrowing of potential tar-
gets to attack. Addressing and balancing a set of sometimes
competing desirable properties is required to make network
scanning detection more appealing in practice: 1) fast de-
tection of scanning activity to enable prompt response by
intrusion detection and prevention systems; 2) acceptable
rate of false alarms, keeping in mind that false alarms may
lead to legitimate traﬃc being penalized; 3) high detection
rate with the ability to detect stealthy scanners; 4) eﬃcient
use of monitoring system resources; and 5) immunity to eva-
sion. In this paper, we present a scanning detection algo-
rithm designed to accommodate all of these goals. LQS is
a fast, accurate, and light-weight scan detection algorithm
that leverages the key properties of the monitored network
environment as variables that aﬀect how the scanning de-
tection algorithm operates. We also present what is, to our
knowledge, the ﬁrst automated way to estimate a reference
baseline in the absence of ground truth, for use as an evalu-
ation methodology for scan detection. Using network traces
from two sites, we evaluate LQS and compare its scan de-
tection results with those obtained by the state-of-the-art
TRW algorithm. Our empirical analysis shows signiﬁcant
improvements over TRW in all of these properties.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and protection; C.2.3 [Network Operations]: Net-
work monitoring
General Terms
Security, Algorithms
Keywords
Scanning Detection, Port Scanning, Host Discovery Tech-
niques, Reconnaissance
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
1.
INTRODUCTION
Network scanning continues to be a common reconnais-
sance technique that precedes many of today’s Internet at-
tacks. Many botnets and network worms scan various IP
address ranges to locate vulnerable machines to attack [14,
15, 24]. Scanning is also an eﬀective way to search for poten-
tial weaknesses in dedicated servers since pull-based infec-
tion techniques (e.g., drive-by downloads) and other infec-
tion techniques that require user interaction (e.g., opening
malicious email attachments) are not applicable.
A single scan activity attempts to connect to a speciﬁc
port in a host either to ﬁnd out if the host is active or if
the port is open and what service it oﬀers. Given that the
objective of network scanning is to ﬁnd responsive services,
scanners cannot avoid making failed connection attempts.
Therefore, detection approaches based on a remote’s failed
connection attempts oﬀer more promise where other detec-
tion features can be evaded by informed adversaries.
Most post-detection responses (e.g., limiting the amount
of information that a scanner can learn about the monitored
network by blocking some of their inbound network traﬃc)
require fast, real-time detection of scanners. The fewer failed
connection attempts by a remote host required by a detec-
tion algorithm to ﬂag the remote as a scanner, the faster
the scan detection and the more stealthy scanners are de-
tected. In addition to the challenge of selecting an appropri-
ate trade-oﬀ between the false positive rate and the number
of required failed connection attempts, it is also important to
balance between eﬃcient use of monitoring system resources
and reasonable accuracy of the detection algorithm.
In this paper, we propose a lightweight quick and stateful
(LQS ) real-time network scanning detection algorithm for
external scanners. LQS leverages key properties of the op-
erating environment that impact the detection performance
such that they are incorporated into operational parame-
ters of the algorithm. Our analysis and empirical evaluation
ﬁnds that while LQS requires a small memory footprint to
operate, its detection accuracy and speed outperforms the
TRW algorithm [9]. Unlike TRW, LQS can detect vertical
scans and it has a greater immunity to evasion from scan-
ners who have a priori knowledge of some available services
in the target network.
Contributions. Our main contributions are the following:
1. Lightweight Quick and Stateful Online Scan
Detection Algorithm: We propose a lightweight
network scan detection algorithm (LQS) that detects
scanners as early as from their second connection at-
102
tempt to the monitored network. Unlike previous scan
detection approaches (e.g., [9, 19]), LQS keeps the
state of oﬀered network services over time to evaluate
inbound connection attempts.
2. Empirical Evaluation: We evaluate the performance
of LQS on two datasets from two qualitatively diﬀer-
ent network environments and compare its results to
those obtained by TRW.
3. Scan Detection Evaluation Methodology: We
present an evaluation methodology for scan detection
schemes in which remote hosts contacting the moni-
tored network are classiﬁed after monitoring their net-
work traﬃc over a relatively long period of time (as op-
posed to a short monitoring window in real-time scan
detection to make a fast decision, as in the LQS al-
gorithm). The new methodology provides a reference
baseline for evaluation for each dataset studied, in the
absence of ground truth.
Our implementation of LQS (Section 3.2, Algorithm 1) as a
policy in the Bro IDS [1] is available at http://lqs-bro.
sourceforge.net/. Our empirical evaluation shows that
LQS both detects scanners earlier than TRW and has higher
detection accuracy (e.g., in one dataset, LQS detection rate
is 76% vs. 12% in TRW).
Organization. We discuss identiﬁcation of scanners in Sec-
tion 2. Section 2.1 describes the datasets used and their
network environment. Section 2.2 presents a new method-
ology to obtain a reference baseline for evaluating network
scanning detectors. Challenges in real-time scan detection
are discussed in Section 2.3. We present a design overview
of LQS in Section 3. Section 4 explores the advantages of
LQS relative to TRW discussing the features and capabili-
ties of both. Section 5 evaluates LQS on two datasets from
diﬀerent sites; scan detection results of both the LQS and
TRW algorithms are given and analyzed. Section 6 discusses
related work. Section 7 concludes.
2.
IDENTIFICATION OF SCANNERS:
ANALYSIS OF SCANNING PATTERNS
Typically, network scanners tend to probe a range of net-
work addresses in search of active services of particular inter-
est to the scanners. Unlike legitimate network traﬃc, most
scanners’ connection attempts are expected to fail since the
density of network services (i.e., the ratio of open ports to
closed ports of all Internet-addressable local hosts) in a given
network is very small. Using failed connection attempts as
a sign of scanning intent seems eﬀective, as scanners cannot
evade probing non-existing network services.
To use a network service remotely, the common way for a
regular user to locate the IP address of the server in question
is through DNS requests. Users usually enter the human-
readable host name of the required server in the used ap-
plication (e.g., entering a URL in a browser) which in turn
sends a DNS request to obtain the corresponding IP address.
The application often determines the appropriate destina-
tion port to contact the corresponding server. While it may
seem unlikely for a benign remote host to make unsuccessful
connections, in practice, there are several inevitable benign
reasons to generate failed connection attempts (e.g., network
failures, outdated DNS entries, and temporarily unavailable
network services).
In Section 2.2, we study failed connection attempts in two
datasets and propose a scan detection evaluation methodol-
ogy. An overview of these datasets is ﬁrst given in Sec-
tion 2.1 below. Section 2.3 discusses challenges in real-time
scan detection.
2.1 Overview of Datasets
Dataset I. The dataset is a full capture network trace
collected at a class C university network with 62 Internet-
addressable IP addresses. The trace was gathered over the
period of Jan 28 to Mar 13, 2007 (45 days). The size of the
dataset is 41 gigabytes. The active IP addresses during the
capture period were 30. The network ﬁrewall allows inbound
connection attempts to closed ports and unassigned IP ad-
dresses. Since local hosts respond to inbound connection
attempts that are sent to closed ports, most inbound timed-
out TCP connection attempts are destined to unassigned IP
addresses (or turned oﬀ machines). Note that about 95%
of inbound TCP connections in Table 1 are rejected (i.e.,
RST packet is sent by the destination) suggesting a high-
volume of network scanning traﬃc. Few IP addresses used
P2P ﬁle sharing over short bursts of the log capture period.
Connection attempts to unavailable peers contributed to the
rejected and timed-out outbound TCP connections.
To identify the network protocols running in the open
ports in this network without relying on the port number, we
used a signature-based detection method based on Ethereal
display ﬁlter reference [2]. Six open ports (in three dedi-
cated servers) were identiﬁed running the following network
protocols: HTTP, HTTPS, SSH, SMTP, IMAPS, and IPP.
Dataset II. This is a network trace of packet headers col-
lected at a class C university network (a network diﬀerent
than that of dataset I) with 254 Internet-addressable IP ad-
dresses. The trace was gathered over the period of Jun 17
to Jul 4, 2010 (18 days). The size of the dataset is 188
gigabytes. The active IP addresses during the capture pe-
riod were 223. Inbound connection attempts to closed ports
or unassigned IP addresses were not allowed by the net-
work ﬁrewall. About 70% of inbound TCP connections are
timed-out (i.e., did not go through the ﬁrewall) suggesting
a high-volume of network scanning traﬃc.
Network protocols running in the open ports were iden-
tiﬁed by the same signature-based method used in the ﬁrst
dataset. Only protocol signatures located in the ﬁrst bytes
of the TCP payload data for packets with shorter than max-
imum header size are identiﬁed. The open ports fall into the
following categories: (a) 180 ports running Sophos antivirus
remote management system (port 8194); (b) 170 ports run-
ning Microsoft Directory Service (Microsoft-DS; e.g., SMB
protocol); (c) 12 ports running Line Printer Daemon proto-
col (LPD; port 515); (d) 10 ports running Telnet protocol;
(e) 7 ports running SSH protocol; and (f) 72 various other
services mostly on ephemeral ports. There were no P2P
protocols observed during the capture period.
2.2 Evaluation in the Absence of Ground Truth
A labeled dataset is often used to validate an intrusion
detection technique. Accurate labeling of a dataset requires
either unique signatures to match against or artiﬁcially cre-
ated or injected intrusion traﬃc. A network scanning event
103
Number of:
Inbound Outbound
Inbound Outbound
Dataset I
Dataset II
a) Flows (TCP, UDP, and ICMP)
b) TCP connections (ﬂows)
i) Successful TCP connections (percentage of b)
ii) Rejected TCP connections
iii) Timed-out TCP connections
c) Source IP addresses initiating TCP connections
4,011,132
3,857,660
4.2%
95.79%
0.01%
7,031
828,988
719,273
57.2%
12.9%
29.9%
30
660,877
207,988
29.2%
2.2%
68.6%
28,922
27,868,693
22,747,160
71.7%
20.2%
8.1%
223
Table 1: Datasets statistics (dataset I of Jan 28 to Mar 13, 2007; dataset II of Jun 17 to Jul 4, 2010)
could resemble legitimate traﬃc depending on (unknowable)
intent, and thus general signatures for all network scanning
events do not seem possible. Given the diﬃculty of gener-
ating synthetic traﬃc that represents all forms of network
scanning, and that is distinguishable from legitimate traf-
ﬁc, simulation and emulation approaches that involve gen-
erating scanning events appear challenging for validation.
Alternatively, aggregate behaviour of multiple events (e.g.,
frequency, rate, and the number of distinct destination IP
addresses the remote made failed connection attempts to)
from the same source can be used to infer scanning intent
and to provide a reference baseline, that while not repre-
senting a solid ground truth of scanners, may give a limited
form or an estimated ground truth.
Unlike real-time scan detection algorithms, which are typ-
ically designed for fast detection upon observing as few as
possible connection attempts from remote hosts, the full net-
work traﬃc of remote hosts (of a particular dataset) is avail-
able to establish a reference baseline of scanners. Although
monitoring network traﬃc over a relatively long period of
time (e.g., few days) gives us more conﬁdence in identifying
scanners, those with few connection attempts remain hard
to identify.
Given the possible change of state in a remote host from
benign to scanner and vice versa, the aggregate behaviour
of the remote host over a relatively long period of time may
seem inaccurate. Thus, it is important to consider the time
parameter in which the remote is classiﬁed as a scanner for
some time periods and benign for others. However, in a
given remote host, the probability that both a scanning mal-
ware (e.g., a worm) and a legitimate software (e.g., brows-
ing a Web site) contact the same network is low. Therefore,
considering the change of state is not necessary in such a
classiﬁcation.
For the two datasets in Section 2.1, we attempt to generate
a reference baseline (RB) for each remote host based on the
following metrics:
1. the number of distinct {local IP address, destination
port} pairs that the remote host initiates successful
connection attempts to over the entire dataset capture
period;
2. the number of distinct {local IP address, destination
port} pairs that the remote host initiates unsuccessful
connection attempts to over the entire dataset capture
period; and
3. whether any local host initiates a connection attempt
to the remote host.