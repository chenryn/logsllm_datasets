# 通过HackerOne漏洞报告学习PostMessage漏洞实战场景中的利用与绕过

## 译文声明
本文为翻译文章，译文仅供参考。具体内容及含义以原文为准。

## 0x00 前言
本文旨在通过分析HackerOne平台披露的Bug Bounty报告，探讨`postMessage`漏洞在实际场景中的利用方式。

## 0x01 什么是PostMessage
根据Mozilla开发文档，`window.postMessage()`方法允许跨源Window对象之间进行安全通信。例如，一个页面与其生成的弹出窗口或嵌入的iframe之间可以使用此方法传递信息。

### 示例
假设我们有两个网站：`1.html`和`2.html`。`1.html`中包含两个按钮：
1. 第一个按钮通过`openChild()`函数打开包含`2.html`的弹出窗口。
2. 第二个按钮通过`sendMessage()`函数发送消息。该函数设置了一个消息变量`msg`，然后调用`postMessage(msg, '*')`来发送消息。

`2.html`包含一个链接和一个按钮：
1. 链接的`href`字段根据从`window.addEventListener("message", (event) => {...})`接收的消息动态变化。
2. 按钮调用`closeMe()`函数关闭窗口。

### 代码示例
**1.html**
```html
<button onclick="openChild()">打开子窗口</button>
<button onclick="sendMessage()">发送消息</button>

<script>
    function openChild() {
        var child = window.open('2.html', 'childWindow');
    }

    function sendMessage() {
        var msg = {url: "changed.html"};
        var child = window.open('', 'childWindow');
        child.postMessage(msg, '*');
    }
</script>
```

**2.html**
```html
<a id="link" href="#">返回</a>
<button onclick="closeMe()">关闭窗口</button>

<script>
    function closeMe() {
        window.close();
    }

    window.addEventListener("message", (event) => {
        document.getElementById('link').href = event.data.url;
    });
</script>
```

## 0x02 基础漏洞实例
### XSS漏洞实现
如果`postMessage`使用不当，可能会导致信息泄露或跨站脚本（XSS）攻击。例如，`2.html`在未验证消息来源的情况下直接处理接收到的消息，这使得攻击者可以通过将恶意网页`3.html`作为`iframe`加载`2.html`并调用`postMessage()`函数来篡改`href`值。

#### 漏洞示例
假设恶意的`msg`变量包含数据`{url: "javascript:prompt(1)"};`，则`2.html`会将其解析为JavaScript代码并执行，从而触发XSS攻击。

### 安全建议
- **不希望接收其他网站的消息时**：不要添加任何消息事件监听器，这样可以完全避免此类安全问题。
- **希望从其他站点接收消息时**：需要对消息源进行身份验证，并确保只接受来自可信源的消息。即使验证了身份，也应对接收到的消息进行语法验证，以防跨站脚本攻击。
- **发送消息时**：务必指定准确的目标源，而不是使用通配符`*`。这可以防止恶意网站在不知情的情况下改变窗口位置并拦截数据。

### 代码修正
**1.html**
```javascript
child.postMessage(msg, 'http://example.com/2.html');
```

**2.html**
```javascript
window.addEventListener("message", (event) => {
    if (event.origin !== 'http://example.com') return; // 验证消息来源
    document.getElementById('link').href = event.data.url;
});
```

通过以上措施，可以有效减少`postMessage`相关的安全风险。