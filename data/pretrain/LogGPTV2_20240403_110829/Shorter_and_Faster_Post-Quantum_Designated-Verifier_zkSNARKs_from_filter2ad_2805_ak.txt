r← F. It computes ˜𝑎′
1 = ˜𝑎1 + ˜𝑎0 + xT ˜a, ˜𝑎′
ples ˜𝑎1, ˜𝑎2, ˜𝑎3
2 =
˜𝑎2+ ˜𝑏0+xT ˜b, and ˜𝑎′
3 = ˜𝑎3+˜𝑐0+xT˜c. Compute ˜𝑎4 = ˜𝑧−1( ˜𝑎′
1 ˜𝑎′
2− ˜𝑎′
3).
It outputs ˜a = ( ˜𝑎1, ˜𝑎2, ˜𝑎3, ˜𝑎4).
To complete the proof, it suffices to show that the simulated
distribution is identical to the real distribution for any (x, w)
where CS𝜅(x, w) = 1. By construction, the verification state and
query matrix (output by SLPCP,1) are identically distributed in
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea229some 𝜏 ∈ F \ 𝑆. Since 𝑍𝑆(𝑥) =𝛼∈𝑆(𝑥 − 𝛼) and 𝜏 ∉ 𝑆, we have
the two cases, so it suffices to analyze the distribution of the
responses. Let (st, Q) ← QLPCP(1𝜅), 𝝅 ← PLPCP(1𝜅, x, w), and
a ← QT𝝅. Write st = (𝑎0, 𝑏0, 𝑐0, a, b, c, 𝑧). First, 𝑧 = 𝑍𝑆(𝜏) for
that 𝑧 = 𝑍𝑆(𝜏) ≠ 0. Then the following holds:
– In the real distribution, Eq. (B.2) holds (by completeness). Since
𝑧 ≠ 0, the value of 𝑎4 is uniquely defined given 𝑎1, 𝑎2, 𝑎3 and st.
The value of 𝑎4 that satisfies Eq. (B.2) precisely coincides with
the value ˜𝑎4 sampled by SLPCP,2 (for the choice of ˜𝑎1, ˜𝑎2, ˜𝑎3
chosen by the simulator).
– In the real distribution, 𝑎1 = 𝛿1𝑍𝑆(𝜏)+𝑖∈[𝑁𝑤−𝑛] 𝑤𝑛+𝑖𝐴𝑛+𝑖(𝜏),
where 𝛿1 is uniform over F and independent of all other com-
ponents. Since 𝑍𝑆(𝜏) ≠ 0, this means 𝑎1 is uniform over F.
A similar argument holds for 𝑎2 and 𝑎3 (by appealing to the
randomness of 𝛿2 and 𝛿3, respectively). This is precisely the
distribution of ˜𝑎1, ˜𝑎2, ˜𝑎3 in the simulation.
Thus, the simulated response is identically distributed as the real
response, and perfect HVZK holds.
□
Knowledge against affine strategies. While our compiler only re-
quires a linear PCP with knowledge against linear strategies we
can easily modify the linear PCP from Construction C.1 to provide
knowledge against affine prover strategies without increasing the
query complexity. We describe this modified variant in the full ver-
sion of this paper [78]. This means that we can base security on the
weaker conjecture that Construction 3.5 is “affine-only.” Using the
modified linear PCP comes at a very slight increase in the concrete
cost of the verifier, and has no effect on the prover complexity. Since
we believe that Conjecture 3.9 holds, we do not use this modified
linear PCP in our concrete implementation.
C LINEAR PCP AND ZKSNARK ANALYSIS
In this section, we provide the formal analysis of our linear-only
vector encryption scheme and resulting zkSNARKs.
C.1 Linear PCPs over Extension Fields
First, we describe how to transform a linear PCP over F𝑝2 to a linear
PCP over F𝑝.
𝑝
𝑝 to denote its representation in F𝑑
Field extensions. Recall that a degree-𝑑 field extension F𝑝𝑑 of F𝑝
is a 𝑑-dimensional vector space over F𝑝. For a field element 𝑠 ∈ F𝑝𝑑 ,
we write v𝑠 ∈ F𝑑
𝑝. There is an
efficiently-computable isomorphism between 𝑠 ∈ F𝑝𝑑 and v𝑠 ∈ F𝑑
𝑝.
In particular, this means that for all 𝑠, 𝑡 ∈ F𝑝𝑑 , v𝑠 + v𝑡 = v𝑠+𝑡 ∈ F𝑑
𝑝.
We write M𝑠 ∈ F𝑑×𝑑
to denote the linear transformation over F𝑑
𝑝
corresponding to scalar multiplication by 𝑠 over F𝑝𝑑 . Namely, for
all 𝑠, 𝑡 ∈ F𝑝𝑑 , we have that M𝑠v𝑡 = v𝑠𝑡 .
Construction C.1 (F𝑝𝑑 -Linear PCP to F𝑝-Linear PCP). Let Π′
LPCP =
(Q′
LPCP) be a 𝑘-query linear PCP for a family of
R1CS systems CS = {CS𝜅}𝜅∈N over an extension field F𝑝𝑑 with
query length ℓ. We construct a (𝑑𝑘)-query linear PCP ΠLPCP =
(QLPCP, PLPCP,VLPCP) for CS with query length 𝑑ℓ over the base
field F𝑝:
• QLPCP(1𝜅): Run (st, Q′) ← Q′
Q ∈ F𝑑ℓ×𝑑𝑘
𝑝𝑑 . Let
be the matrix formed by taking each component
LPCP(1𝜅), where Q′ ∈ Fℓ×𝑘
,V′
, P′
LPCP
LPCP
𝑝
𝑝
𝑖,𝑗
𝑖,𝑗” matrix MT
𝑞′
∈ F𝑑×𝑑
LPCP(1𝜅, x, w) ∈ Fℓ
𝑝 be the vector formed by taking each component 𝜋′
𝑖,𝑗 ∈ F𝑝𝑑 in Q′ and replacing it with the transpose of the
𝑞′
“multiplication-by-𝑞′
. Output st and Q.
• PLPCP(1𝜅, x, w): Compute 𝝅′ ← P′
𝑝𝑑 . Let
𝑖 ∈ F𝑝𝑑
𝝅 ∈ F𝑑ℓ
in 𝝅′ and replacing it with the vector v𝜋′
𝑝 representing 𝜋𝑖.
Output the proof vector 𝝅.
] for some
• VLPCP(st, x, a): First, parse a ∈ F𝑑𝑘
𝑝 as [v𝑎′
a′ = (𝑎′
LPCP(st, x, a′).
𝑝𝑑 . Output V′
Theorem C.2 (F𝑝𝑑 -Linear PCP to F𝑝-Linear PCP).
is
complete, perfect HVZK, and has knowledge error 𝜀, then the same
holds for ΠLPCP from Construction C.1.
∈ F𝑑
1| · · · |v𝑎′
1, . . . , 𝑎′
𝑘) ∈ F𝑘
If Π′
LPCP
𝑘
𝑖
.
v𝑞′
𝑝
𝑝
LPCP
𝑗 =
M𝑞′
a𝑖 =
𝑗,𝑖 𝜋′
𝑗 ∈[ℓ]
𝑗,𝑖 v𝜋′
𝑗 = v(q′

𝑖)T𝝅′ ∈ F𝑑
𝑝,
𝑗 ∈[ℓ]
𝑖 ∈ Fℓ
Proof. We analyze each property individually:
• Completeness: Take any x, w whereR(x, w) = 1, and let (st, Q′) ←
Q′
LPCP(1𝜅), 𝝅′ ← P′
LPCP(1𝜅, x, w). Let Q ∈ F𝑑ℓ×𝑑𝑘
and 𝝅 ∈ F𝑑ℓ
be as specified in QLPCP and PLPCP and let a ← QT𝝅. Write
a = [a1, . . . , a𝑘]. By construction, for all 𝑖 ∈ [𝑘],

where q′
𝑝𝑑 denotes the 𝑖th column of Q′. This means that
the vector a′ computed by VLPCP satisfies a′ = (Q′)T𝝅′. Com-
pleteness now follows by completeness of Π′
• Knowledge: Let (st, Q′) ← Q′
LPCP(1𝜅) and let Q be the ma-
trix QLPCP constructs from Q′. Take any proof 𝝅 ∈ F𝑑ℓ
𝑝 , and let
𝝅′ ∈ Fℓ
𝑝𝑑 be the vector obtained by viewing each contiguous
block of 𝑑 elements of 𝝅 as an element of F𝑝𝑑 . By construction,
LPCP(st, x, (Q′)T𝝅′) =
VLPCP(st, x, QT𝝅) = 1 if and only if V′
1. The claim now follows by knowledge soundness of Π′
.
Namely, the extractor ELPCP for ΠLPCP simply invokes the ex-
tractor E′
𝑝𝑑 that E′
makes to ⟨𝝅′, ·⟩ can be simulated via 𝑑 linear queries to ⟨𝝅, ·⟩ by
expanding each component in q′ into a matrix over F𝑑×𝑑
.
LPCP = (S′
• Perfect HVZK: Let S′
LPCP,2) be the linear
PCP simulator for Π′
. We define SLPCP = (SLPCP,1,SLPCP,2)
LPCP
for ΠLPCP as follows:
– SLPCP,1(1𝜅): On input 𝜅 ∈ N, run the simulator S′
LPCP,1(1𝜅)
to obtain a pair (st, Q′) where Q′ ∈ Fℓ×𝑘
𝑝𝑑 . The simulator con-
structs Q ∈ F𝑑ℓ×𝑑𝑘
by expanding replacing each component
𝑞′
𝑖,𝑗 of Q′ with M′T
(as in QLPCP). It outputs (st, Q).
– SLPCP,2(st, x): On input the simulation state st and a statement
x, run S′
LPCP,2(st, x) to obtain a′ ∈ F𝑘
𝑝𝑑 . Then, compute and
𝑝 by expanding each component 𝜋′
output a ∈ F𝑑𝑘
𝑖 ∈ F𝑝𝑑 as a
∈ F𝑑
𝑝 (as in PLPCP).
vector v𝜋′
Perfect HVZK now follows by perfect HVZK of Π′
. Any linear query q′ ∈ Fℓ
LPCP,1,S′
for Π′
LPCP
LPCP
LPCP
LPCP
𝑝
𝑞𝑖,𝑗
𝑝
𝑖
.
LPCP
□
C.2 Circuit Privacy
We give the formal definition of circuit privacy below:
Definition C.3 (Circuit Privacy). Let ΠEnc = (Setup, Encrypt,
Decrypt, Add) be a secret-key vector encryption scheme over Fℓ.
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea230We say that ΠEnc satisfies circuit privacy if for all efficient and
stateful adversaries A, there exists an efficient simulator S such
that for all security parameters 𝜆 ∈ N,
Pr[ExptCircuitPrivΠEnc,A,S(1𝜆) = 1] = 1/2 + negl(𝜆),
(C.1)
where the experiment ExptCircuitPrivΠEnc,A,S(1𝜆) is defined as
follows:
(1) The challenger samples (pp, sk) ← Setup(1𝜆, 1ℓ) and gives
(pp, sk) to the adversary. The adversary replies with a collection
of vectors v1, . . . , v𝑘 ∈ Fℓ.
(2) The challenger constructs ciphertexts ct𝑖 ← Encrypt(sk, v𝑖) for
all 𝑖 ∈ [𝑘] and gives (ct1, . . . , ct𝑘) to A. The adversary replies
with a collection of coefficients 𝑦1, . . . , 𝑦𝑘 ∈ F.
0 ← Add(pp, {ct𝑖}𝑖∈[𝑘], {𝑦𝑖}𝑖∈[𝑘])
and ct∗
bit 𝑏
experiment is 1 if 𝑏′ = 𝑏 and 0 otherwise.
1 ← S(1𝜆, pp, sk,𝑖∈[𝑘] 𝑦𝑖v𝑖). It also samples a random
(4) The adversary outputs a bit 𝑏′ ∈ {0, 1}. The output of the
r← {0, 1} and replies to the adversary with ct∗
(3) The challenger computes ct∗
𝑏
.
In this work, we also consider a weaker notion of circuit privacy
where we additionally constrain the adversary to choosing the
coefficients from an a priori specified set 𝑆 ⊆ F. In this case, we
say that ΠEnc satisfies circuit privacy with respect to 𝑆. In addition,
when the probability in Eq. (C.1) is bounded by 1/2 + 𝜀, we say that
ΠEnc is 𝜀-circuit private.
Remark C.4 (Multi-Query Circuit Privacy). We can define a multi-
query variant of Definition C.3 where the adversary can adaptively
choose multiple collections of coefficients 𝑦1, . . . , 𝑦𝑘 ∈ 𝑅𝑝 and