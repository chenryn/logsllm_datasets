# 六、Docker 的下一代网络栈：libnetwork
在本章中，我们将了解 Docker: libnetwork 的新网络栈，它为单主机和多主机虚拟网络提供了默认实现的可插拔架构:
*   介绍
    *   目标
    *   设计
*   CNM 物件
    *   CNM 属性
    *   CNM 生命周期
*   司机
    *   桥式驱动器
    *   覆盖网络驱动程序
*   使用覆盖网络与游民
*   具有 Docker 机器和 Docker 群的覆盖网络
*   手动创建覆盖网络并将其用于容器
*   容器网络接口
*   Calico 的 libnetwork 驱动程序
# 目标
用 go 语言编写的 libnetwork 是连接 Docker 容器的一种新方式。目的是提供一个容器网络模型，帮助程序员并提供网络库的抽象。libnetwork 的长期目标是遵循 Docker 和 Linux 的理念来交付独立工作的模块。libnetwork 的目标是为容器中的网络提供可组合的需求。它还旨在通过以下方式将 Docker Engine 和 libcontainer 中的网络逻辑模块化为一个可重用的库:
*   用 libnetwork 替换 Docker 引擎的网络模块
*   作为允许本地和远程驱动程序向容器提供网络的模型
*   为管理和测试 libnetwork 提供工具 dnet 仍在进行中(参考自[https://github.com/docker/libnetwork/issues/45](https://github.com/docker/libnetwork/issues/45))。
# 设计
libnetwork 实现了一个**容器网络模型** ( **CNM** )。它形式化了为容器提供网络所需的步骤，同时提供了一个可用于支持多个网络驱动程序的抽象。它的端点 API 主要用于管理相应的对象和簿记它们，以便提供 CNM 模型所需的抽象级别。
CNM 由三个主要部分组成。下图显示了 libnetwork 的网络沙盒模型:
![Design](img/00046.jpeg)
# CNM 物件
让我们详细讨论一下 CNM 物体。
## 沙盒
这包含容器网络栈的配置，包括路由表管理、容器接口和 DNS 设置。沙盒的实现可以是 Linux 网络命名空间、FreeBSD 监狱或其他类似的概念。一个沙箱可能包含来自多个网络的许多端点。它还表示容器的网络配置，如 IP 地址、媒体访问控制地址和域名系统条目。libnetwork 利用特定于操作系统的参数来填充沙盒表示的网络配置。libnetwork 提供了一个在多个操作系统中实现沙盒的框架。Netlink 用于管理命名空间中的路由表，目前存在两种沙盒实现，`namespace_linux.go`和`configure_linux.go`，用于唯一标识主机文件系统上的路径。
沙箱与单个 Docker 容器相关联。以下数据结构显示了沙箱的运行时元素:
```
type sandbox struct {
  id            string
  containerID   string
  config        containerConfig
  osSbox        osl.Sandbox
  controller    *controller
  refCnt        int
  endpoints     epHeap
  epPriority    map[string]int
  joinLeaveDone chan struct{}
  dbIndex       uint64
  dbExists      bool
  isStub        bool
  inDelete      bool
  sync.Mutex
}
```
从网络控制器实例化一个新的沙箱(稍后将详细解释):
```
func (c *controller) NewSandbox(containerID string, options ...SandboxOption) (Sandbox, error) {
  …..
}
```
## 终点
一个端点将一个沙箱加入到网络中，并为一个容器向部署在同一网络中的其他容器公开的服务提供连接。它可以是开放式虚拟交换机的内部端口或类似的虚拟交换机对。一个端点只能属于一个网络，但可能只属于一个沙盒。端点代表服务，并提供各种 API 来创建和管理端点。它有一个全局范围，但只连接到一个网络，如下图所示:
![Endpoint](img/00047.jpeg)
端点由以下数据结构指定:
```
type endpoint struct {
  name          string
  id            string
  network       *network
  iface         *endpointInterface
  joinInfo      *endpointJoinInfo
  sandboxID     string
  exposedPorts  []types.TransportPort
  anonymous     bool
  generic       map[string]interface{}
  joinLeaveDone chan struct{}
  prefAddress   net.IP
  prefAddressV6 net.IP
  ipamOptions   map[string]string
  dbIndex       uint64
  dbExists      bool
  sync.Mutex
}
```
端点与唯一的标识和名称相关联。它连接到一个网络和一个沙盒 ID。它还与 IPv4 和 IPv6 地址空间相关联。每个端点都与一个`endpointInterface`结构相关联。
## 网络
网络是一组能够直接相互通信的端点。它在同一台主机或多台主机内提供所需的连接，每当创建或更新网络时，都会通知相应的驱动程序。一个例子是 VLAN 桥或 Linux 桥，它在集群中具有全局范围。
网络由网络控制器控制，我们将在下一节讨论。每个网络都有名称、地址空间、标识和网络类型:
```
type network struct {
  ctrlr        *controller
  name         string
  networkType  string
  id           string
  ipamType     string
  addrSpace    string
  ipamV4Config []*IpamConf
  ipamV6Config []*IpamConf
  ipamV4Info   []*IpamInfo
  ipamV6Info   []*IpamInfo
  enableIPv6   bool
  postIPv6     bool
  epCnt        *endpointCnt
  generic      options.Generic
  dbIndex      uint64
  svcRecords   svcMap
  dbExists     bool
  persist      bool
  stopWatchCh  chan struct{}
  drvOnce      *sync.Once
  internal     bool
  sync.Mutex
}
```
## 网络控制器
网络控制器对象提供创建和管理网络对象的应用编程接口。通过将特定驱动程序绑定到给定网络，它是 libnetwork 中的一个入口点，并且它支持内置和远程的多个活动驱动程序。网络控制器允许用户将特定的驱动程序绑定到给定的网络:
```
type controller struct {
  id             string
  drivers        driverTable
  ipamDrivers    ipamTable
  sandboxes      sandboxTable
  cfg            *config.Config
  stores         []datastore.DataStore
  discovery      hostdiscovery.HostDiscovery
  extKeyListener net.Listener
  watchCh        chan *endpoint
  unWatchCh      chan *endpoint
  svcDb          map[string]svcMap
  nmap           map[string]*netWatch
  defOsSbox      osl.Sandbox
  sboxOnce       sync.Once
  sync.Mutex
}
```
每个网络控制器都参考以下内容:
*   数据结构中的一个或多个驱动程序可驱动
*   数据结构中的一个或多个沙箱
*   数据存储
*   美味的
下图显示了**网络控制器**如何位于**Docker 引擎**和它们所连接的容器和网络之间:
![Network controller](img/00048.jpeg)
## CNM 属性
属性有两种类型，如下:
*   **选项**:它们不是最终用户可见的，而是数据的键值对，提供了一种灵活的机制，将特定于驱动程序的配置从用户直接传递给驱动程序。libnetwork 仅在关键字与一个众所周知的标签匹配时对选项进行操作，因为结果值是由一个泛型对象表示的。
*   **标签**:它们是选项的子集是使用`–labels`选项在用户界面中表示的最终用户变量。它们的主要功能是执行特定于驱动程序的操作，并且它们是从用户界面传递的。
## CNM 生命周期
容器网络模型的消费者通过 CNM 对象及其应用编程接口进行交互，以将他们管理的容器联网。
驱动程序向网络控制器注册。内置驱动程序在 libnetwork 内部注册，而远程驱动程序通过插件机制(WIP)向 libnetwork 注册。每个驱动程序处理特定的网络类型。
使用`libnetwork.New()`应用编程接口创建网络控制器对象，以管理网络的分配，并可选地使用特定于驱动程序的选项配置驱动程序。
通过提供名称和`networkType`，使用控制器的`NewNetwork()`应用编程接口创建网络。`networkType`参数有助于选择相应的驱动程序，并将创建的网络绑定到该驱动程序。从这一点来看，网络上的任何操作都将由该驱动程序处理。
`controller.NewNetwork()`应用编程接口还接收携带特定于驱动程序的选项和标签的可选选项参数，驱动程序可以使用这些参数。
`network.CreateEndpoint()`可以被调用来在给定的网络中创建新的端点。该应用编程接口还接受随驱动程序而变化的可选选项参数。
驱动程序将使用`driver.CreateEndpoint`调用，当在网络中创建端点时，它可以选择保留 IPv4/IPv6 地址。驱动程序将使用在`driver`应用编程接口中定义的`InterfaceInfo`接口分配这些地址。需要 IPv4/IPv6 地址来完成端点作为服务的定义以及端点公开的端口。服务端点是应用容器正在侦听的网络地址和端口号。
`endpoint.Join()`可用于将容器连接到端点。如果该容器不存在，则`Join`操作将创建一个沙箱。驱动程序利用沙箱密钥来识别连接到同一个容器的多个端点。
有一个单独的应用编程接口来创建端点，还有一个应用编程接口来连接端点。
端点代表独立于容器的服务。当一个端点被创建时，它拥有为容器保留的资源，以便以后连接到该端点。它给出了一致的网络行为。
当容器停止时调用`endpoint.Leave()`。驱动程序可以清除在`Join()`调用期间分配的状态。当最后一个引用端点离开网络时，libnetwork 将删除沙箱。
只要端点仍然存在，libnetwork 就会一直保留 IP 地址。当容器(或任何容器)再次连接时，这些将被重用。它确保容器的资源在停止和再次启动时被重新使用。
`endpoint.Delete()`用于从网络中删除端点。这将导致删除端点并清理缓存的`sandbox.Info`。
`network.Delete()`用于删除一个网络。如果没有端点连接到网络，则允许删除。
# 驾驶员
驱动程序拥有一个网络，并负责网络的工作和管理。网络控制器提供 API，为驱动程序配置特定的标签/选项，这些标签/选项对用户不直接可见，但对 libnetwork 透明，可以由驱动程序直接处理。驱动程序既可以是内置的(如桥、主机或覆盖)，也可以是远程的(来自插件提供者)，可以部署在各种用例和部署场景中。
驱动程序拥有网络实施并负责管理，包括 **IP 地址管理(IPAM)** 。下图解释了该过程:
![Driver](img/00049.jpeg)
以下是内置驱动程序:
*   **空**:为了提供与旧`docker --net=none`的向后兼容，这个选项主要存在于不需要联网的情况下。
*   **桥接**:它提供了一个 Linux 特有的桥接实现驱动。
*   **叠加**:叠加驱动实现组网，可以跨越 VXLAN 等多台主机网络封装。我们将深入研究它的两个实现:使用 Consul 的基本设置和部署覆盖驱动程序的游民设置。
*   **远程**:它提供了一种方式，通过远程运输支持司机，具体的司机可以根据选择来编写。
## 驾驶台驾驶员
桥驱动程序代表 Linux 桥上的包装器，充当 libcontainer 的网络。它为每个创建的网络创建一个 veth 对。一端与容器连接，另一端与桥架连接。以下数据结构代表一个桥接网络:
```
type driver struct {
  config      *configuration
  etwork      *bridgeNetwork
  natChain    *iptables.ChainInfo