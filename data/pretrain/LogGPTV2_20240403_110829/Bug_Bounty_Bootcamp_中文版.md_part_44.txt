vulnerability exists in critical functionality, like the code that
creates a password, changes the password, changes the email address, or
resets the password.
有时候，跨站请求伪造甚至可以导致账户被接管。这种情况并不罕见；如果在关键的功能上，比如创建、更改、重置密码或更改电子邮件地址的代码中存在CSRF漏洞，则可能会出现账户被接管的问题。
For example, let's say that in addition to signing up by using an email
address and password, *example.com* also allows users to sign up via
their social media accounts. If a user chooses this option, they're not
required to create a password, as they can simply log in via their
linked account. But to give users another option, those who've signed up
via social media can set a new password via the following request:
例如，假设除了通过电子邮件地址和密码注册外，example.com还允许用户通过其社交媒体帐户进行注册。如果用户选择此选项，则不需要创建密码，因为他们可以通过已链接的帐户直接登录。但为了给用户另一个选项，通过社交媒体注册的用户可以通过以下请求设置新密码。
    POST /set_password
    Host: example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    (POST request body)
    password=XXXXX&csrf_token=871caef0757a4ac9691aceb9aad8b65b
Since the user signed up via their social media account, they don't need
to provide an old password to set the new password, so if CSRF
protection fails on this endpoint, an attacker would have the ability to
set a password for anyone who signed up via their social media account
and hasn't yet done so.
由于用户是通过其社交媒体账户注册的，因此在设置新密码时无需提供旧密码，因此如果在此端点上CSRF保护失败，则攻击者将有能力为任何通过其社交媒体账户注册但尚未设置密码的人设置密码。
Let's say the application doesn't validate the CSRF token properly and
accepts an empty value. The following request will set a password for
anyone who doesn't already have one set:
假设应用程序没有正确验证CSRF令牌，而是接受空值。以下请求将为尚未设置密码的任何人设置密码：
    POST /set_password
    Host: example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    (POST request body)
    password=XXXXX&csrf_token=
Now all an attacker has to do is to post a link to this HTML page on
pages frequented by users of the site, and they can automatically assign
the password of any user who visits the malicious page:
现在攻击者只需要在经常被网站用户访问的页面上发布这个 HTML
页面的链接，他们就可以自动分配任何访问恶意页面的用户的密码：
After that, the attacker is free to log in as any of the affected
victims with the newly assigned password
`      this_account_is_now_mine     ` .
此后，攻击者可以使用新分配的密码this_account_is_now_mine以受影响的任何受害者的登录身份。
While the majority of CSRFs that I have encountered were low-severity
issues, sometimes a CSRF on a critical endpoint can lead to severe
consequences.
虽然我遇到的大多数CSRF都是低严重性问题，但是有时候在关键节点发生的CSRF可能会产生严重后果。
## Delivering the CSRF Payload {#c09.xhtml#h1-501546c09-0006}
Quite often in bug bounty reports, you'll need to show companies that
attackers can reliably deliver a CSRF payload. What options do attackers
have to do so?
在漏洞赏金报告中，有时候你需要向公司展示攻击者可以可靠地提供CSRF负载。攻击者有哪些选项可以这样做？
The first and simplest option of delivering a CSRF payload is to trick
users into visiting an external malicious site. For example, let's say
*example.com* has a forum that users frequent. In this case, attackers
can post a link like this on the forum to encourage users to visit their
page:
交付CSRF负载的第一个和最简单的选项是欺骗用户访问一个外部恶意网站。例如，假设example.com有一个用户经常访问的论坛。在这种情况下，攻击者可以在论坛上发布像这样的链接，以鼓励用户访问他们的页面:
Visit this page to get a discount on your *example.com* subscription:
*https://example.attacker.com*
And on *example.attacker.com* , the attacker can host an auto-submitting
form to execute the CSRF:
在example.attacker.com这个网站上，攻击者可以托管一个自动提交表单来执行CSRF攻击：
For CSRFs that you could execute via a GET request, attackers can often
embed the request as an image directly---for example, as an image posted
to a forum. This way, any user who views the forum page would be
affected:
对于可以通过GET请求执行的CSRF攻击，攻击者通常可以将请求嵌入到像是发布到论坛的图片中。这样，任何查看论坛页面的用户都会受到影响。
Finally, attackers can deliver a CSRF payload to a large audience by
exploiting stored XSS. If the forum comment field suffers from this
vulnerability, an attacker can submit a stored-XSS payload there to make
any forum visitor execute the attacker's malicious script. In the
malicious script, the attacker can include code that sends the CSRF
payload:
最后，攻击者可以通过利用存储的XSS向广大受众传递CSRF有效负载。如果论坛评论字段存在此漏洞，攻击者可以在那里提交存储的XSS有效负载，使任何论坛访问者执行攻击者的恶意脚本。在恶意脚本中，攻击者可以包含发送CSRF有效负载的代码。
      document.body.innerHTML += "
        ";
      document.getElementById("csrf-form").submit();
This piece of JavaScript code adds our exploit form to the user's
current page and then auto-submits that form.
这段JavaScript代码将我们的漏洞表单添加到用户当前的页面，然后自动提交该表单。
Using these delivery methods, you can show companies how attackers can
realistically attack many users and demonstrate the maximum impact of
your CSRF vulnerability. If you have Burp Suite Pro, or use the ZAP
proxy, you can also take advantage of their CSRF POC-generation
functionality. For more information, search the tools' documentation for
*CSRF POC generation* . You can also keep a POC script you wrote
yourself and insert a target site's URLs into the script every time you
test a new target.
使用这些交付方式，您可以向公司展示攻击者如何实际攻击许多用户，并展示您的CSRF漏洞的最大影响。如果您有Burp
Suite Pro，或使用ZAP代理，您还可以利用它们的CSRF
POC生成功能。有关更多信息，请搜索工具文档以获取CSRF
POC生成的信息。您还可以保留自己编写的POC脚本，并在每次测试新目标时将目标网站的URL插入脚本中。
## Finding Your First CSRF! {#c09.xhtml#h1-501546c09-0007}
Armed with this knowledge about CSRF bugs, bypassing CSRF protection,
and escalating CSRF vulnerabilities, you're now ready to look for your
first CSRF vulnerability! Hop on a bug bounty program and find your
first CSRF by following the steps covered in this chapter:
具备有关CSRF漏洞、绕过CSRF保护和升级CSRF漏洞的知识，你现在已经可以寻找你的第一个CSRF漏洞了！参加漏洞赏金计划并按照本章节中所述的步骤找到你的第一个CSRF漏洞吧。
1.  Spot the state-changing actions on the application and keep a note
    on their locations and functionality.
2.  Check these functionalities for CSRF protection. If you can't spot
    any protections, you might have found a vulnerability!
3.  If any CSRF protection mechanisms are present, try to bypass the
    protection by using the protection-bypass techniques mentioned in
    this chapter.
4.  Confirm the vulnerability by crafting a malicious HTML page and
    visiting that page to see if the action has executed.
5.  Think of strategies for delivering your payload to end users.
6.  Draft your first CSRF report!
:::
[]{#c10.xhtml}
::: section
# [ [ ]{#c10.xhtml#Page_175 .pagebreak title="175"} 10 ]{.ChapterNumber} [ Insecure Direct Object References ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
Like XSS and open redirects, *insecure direct object references (*
*IDORs)* are a type of bug present in almost every web application. They
happen when the application grants direct access to a resource based on
the user's request, without validation.
与XSS和开放式重定向一样，不安全的直接对象引用（IDOR）是几乎每个Web应用程序都存在的类型错误。当应用程序在不进行验证的情况下基于用户请求直接访问资源时，就会发生这种情况。
In this chapter, we'll explore how these work. Then we'll dive into how
applications prevent IDORs, and how you can bypass those common
protection mechanisms.
在本章中，我们将探讨它们的工作原理。然后，我们将深入研究应用程序如何防止IDOR，并介绍如何绕过这些常见的保护机制。
## Mechanisms {#c10.xhtml#h1-501546c10-0001}
Despite its long and intimidating name, IDOR is easy to understand; it's
essentially a missing access control. IDORs happen when users can access
resources that do not belong to them by directly referencing the object
ID, object number, or filename.
尽管IDOR这个名称很长且令人畏惧，但其实很容易理解；它基本上是一种缺少访问控制的漏洞。当用户可以通过直接引用对象ID，对象编号或文件名来访问不属于他们的资源时，就会出现IDOR漏洞。
[ ]{#c10.xhtml#Page_176 .pagebreak title="176"} For example, let's say
that *example.com* is a social media site that allows you to chat with
others. When you sign up, you notice that your user ID on the site is
*1234* . This website allows you to view all your messages with your
friends by clicking the View Your Messages button located on the home
page. When you click that button, you get redirected to this location,
which displays all your direct messages:
*https://example.com/messages?user_id=1234.*
例如，假设example.com是一个可以与他人聊天的社交媒体网站。当您注册时，您会注意到您在该网站上的用户ID是1234。这个网站允许您通过单击主页上的查看消息按钮查看与朋友的所有消息。当您单击该按钮时，会被重定向到此位置，该位置显示所有您的直接消息：https://example.com/messages？user_id=1234。
Now, what if you change the URL in the URL bar to
*https://example.com/messages?user_id=1233* ?
现在，如果您在URL栏中更改URL为https://example.com/messages？user_id =
1233？
You notice that you can now see all the private messages between another
user, user *1233* , and their friends. At this point, you've found an
IDOR vulnerability. The application does not restrict access to messages
based on the user's identity. Instead, it allows users to request any
messages that they wish. The application naively trusts user input, and
it directly loads resources based on the user-provided
`      user_id     ` value, like this piece of example code:
你注意到你现在可以看到另一个用户1233与他们的朋友之间所有的私人信息。此时，你发现了一项IDOR漏洞。应用程序不会根据用户的身份限制对消息的访问。相反，它允许用户请求他们希望查看的任何消息。应用程序天真地相信用户输入，并根据用户提供的user_id值直接加载资源，例如以下示例代码：
    messages = load_messages(request.user_id)
    display_messages(messages)
IDORs are not just limited to reading other users' information, either.
You can also use them to edit data on another user's behalf. For
example, let's say that users can submit a POST request to change their
password. The POST request must contain that user's ID and new password,
and they must direct the request to the */change_password* endpoint:
IDOR
不仅仅限于阅读其他用户的信息。您还可以使用它们代表另一个用户编辑数据。例如，假设用户可以提交
POST 请求来更改密码。POST 请求必须包含该用户的 ID
和新密码，并且必须将请求直接发送到 /change_password 端点。
    POST /change_password
    (POST request body)
    user_id=1234&new_password=12345
In this case, if the application doesn't validate that the submitted
user ID corresponds to the currently logged-in user, an attacker might
be able to change someone else's password by sending a user ID that
doesn't belong to them, like this:
在这种情况下，如果应用程序不验证提交的用户ID是否对应于当前登录的用户，则攻击者可能会通过发送不属于他们的用户ID来更改其他人的密码，例如：
    POST /change_password
    (POST request body)
    user_id=1233&new_password=12345
Finally, IDORs can affect resources other than database objects. Another
type of IDOR happens when applications reference a system file directly.
For example, this request allows users to access a file they've
uploaded: *https://example.com/uploads?file=user1234-01.jpeg.*