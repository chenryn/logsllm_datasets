      DWORD                SizeOfInitializedData;
      DWORD                SizeOfUninitializedData;
      DWORD                AddressOfEntryPoint;
      DWORD                BaseOfCode;
      DWORD                BaseOfData;
      DWORD                ImageBase;
      DWORD                SectionAlignment;
      DWORD                FileAlignment;
      WORD                 MajorOperatingSystemVersion;
      WORD                 MinorOperatingSystemVersion;
      WORD                 MajorImageVersion;
      WORD                 MinorImageVersion;
      WORD                 MajorSubsystemVersion;
      WORD                 MinorSubsystemVersion;
      DWORD                Win32VersionValue;
      DWORD                SizeOfImage;
      DWORD                SizeOfHeaders;
      DWORD                CheckSum;
      WORD                 Subsystem;
      WORD                 DllCharacteristics;
      DWORD                SizeOfStackReserve;
      DWORD                SizeOfStackCommit;
      DWORD                SizeOfHeapReserve;
      DWORD                SizeOfHeapCommit;
      DWORD                LoaderFlags;
      DWORD                NumberOfRvaAndSizes;
      IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
    } IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
其中用得到的是：DataDirectory
>
>     DataDirectory
>  
>
> A pointer to the first [IMAGE_DATA_DIRECTORY](https://docs.microsoft.com/en-> us/windows/desktop/api/winnt/ns-winnt-image_data_directory) structure in the
> data directory.
>
> The index number of the desired directory entry. This parameter can be one
> of the following values.
通过这个成员我们可以查看一些结构体的偏移和大小，其中 **IMAGE_DATA_DIRECTORY** 如下
    typedef struct _IMAGE_DATA_DIRECTORY {
      DWORD VirtualAddress;
      DWORD Size;
    } IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
如： **IMAGE_DIRECTORY_ENTRY_EXPORT** ，这是一个PE文件的导出表，里面记录了加载函数的信息，内容大致如下
之后找到这个： **_IMAGE_EXPORT_DIRECTORY**
    typedef struct _IMAGE_EXPORT_DIRECTORY {
        DWORD   Characteristics;
        DWORD   TimeDateStamp;
        WORD    MajorVersion;
        WORD    MinorVersion;
        DWORD   Name;
        DWORD   Base;
        DWORD   NumberOfFunctions;
        DWORD   NumberOfNames;
        DWORD   AddressOfFunctions;     // RVA from base of image
        DWORD   AddressOfNames;         // RVA from base of image
        DWORD   AddressOfNameOrdinals;  // RVA from base of image
    } IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
就可以用`AddressOfFunctions` `AddressOfNames` `AddressOfNameOrdinals`来找到函数了
**通过基址找到`GetProcAddress`**
    FARPROC _GetProcAddress(HMODULE hMouduleBase)
    {
        //由之前找到的DllBase来得到DOS头的地址
        PIMAGE_DOS_HEADER lpDosHeader = 
            (PIMAGE_DOS_HEADER)hMouduleBase;
        //找到 IMAGE_NT_HEADERS 的所在
        PIMAGE_NT_HEADERS32 lpNtHeader = 
            (PIMAGE_NT_HEADERS)((DWORD)hMouduleBase + lpDosHeader->e_lfanew);
        if (!lpNtHeader->OptionalHeader//检查可选文件头的导出表大小是否 不为空
                .DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size)
        {
            return NULL;
        }
        if (!lpNtHeader->OptionalHeader//检查可选文件头的导出表的偏移是否 不为空
                .DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress)
        {
            return NULL;
        }
        PIMAGE_EXPORT_DIRECTORY lpExport = //获得_IMAGE_EXPORT_DIRECTORY对象
            (PIMAGE_EXPORT_DIRECTORY)((DWORD)hMouduleBase + (DWORD)lpNtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
        //下面变量均是RVA,要加上hModuleBase这个基址
        PDWORD lpdwFunName =
            (PDWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfNames);
        PWORD lpword =
            (PWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfNameOrdinals);
        PDWORD lpdwFunAddr =
            (PDWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfFunctions);
        //DWORD   AddressOfFunctions;      指向输出函数地址的RVA
        //DWORD   AddressOfNames;          指向输出函数名字的RVA
        //DWORD   AddressOfNameOrdinals;   指向输出函数序号的RVA
        DWORD dwLoop = 0;//遍历查找函数
        FARPROC pRet = NULL;
        for (; dwLoop NumberOfNames-1;dwLoop++)
        {
            char *pFunName = (char*)(lpdwFunName[dwLoop] + (DWORD)hMouduleBase);//char *pFunName = lpwdFunName[0] = "func1";
            if (pFunName[0] == 'G'&&
                pFunName[1] == 'e'&&
                pFunName[2] == 't'&&
                pFunName[3] == 'P'&&
                pFunName[4] == 'r'&&
                pFunName[5] == 'o'&&
                pFunName[6] == 'c'&&
                pFunName[7] == 'A'&&
                pFunName[8] == 'd'&&
                pFunName[9] == 'd'&&
                pFunName[10] == 'r'&&
                pFunName[11] == 'e'&&
                pFunName[12] == 's'&&
                pFunName[13] == 's')
                //if(strcmp(pFunName,"GetProcAddress"))
            {
                pRet = (FARPROC)(lpdwFunAddr[lpword[dwLoop]] + (DWORD)hMouduleBase);
                break;
            }
        }
        return pRet;
    }
    ;这里原作者是寻找SwapMouseButton函数
    ;将最后一段汇编参数修改为MessageBoxA的16位小端序
    ;即可找到MessageBoxA函数的地址
    xor ecx, ecx
    mov eax, fs:[ecx + 0x30] ; EAX = PEB
    mov eax, [eax + 0xc]     ; EAX = PEB->Ldr
    mov esi, [eax + 0x14]    ; ESI = PEB->Ldr.InMemOrder
    lodsd                    ; EAX = Second module
    xchg eax, esi            ; EAX = ESI, ESI = EAX
    lodsd                    ; EAX = Third(kernel32)
    mov ebx, [eax + 0x10]    ; EBX = Base address
    mov edx, [ebx + 0x3c]    ; EDX = DOS->e_lfanew
    add edx, ebx             ; EDX = PE Header
    mov edx, [edx + 0x78]    ; EDX = Offset export table
    add edx, ebx             ; EDX = Export table
    mov esi, [edx + 0x20]    ; ESI = Offset namestable
    add esi, ebx             ; ESI = Names table
    xor ecx, ecx             ; EXC = 0
    Get_Function:
    inc ecx                              ; Increment the ordinal
    lodsd                                ; Get name offset
    add eax, ebx                         ; Get function name
    cmp dword ptr[eax], 0x50746547       ; GetP
    jnz Get_Function
    cmp dword ptr[eax + 0x4], 0x41636f72 ; rocA
    jnz Get_Function
    cmp dword ptr[eax + 0x8], 0x65726464 ; ddre
    jnz Get_Function
    mov esi, [edx + 0x24]                ; ESI = Offset ordinals
    add esi, ebx                         ; ESI = Ordinals table
    mov cx, [esi + ecx * 2]              ; Number of function
    dec ecx
    mov esi, [edx + 0x1c]                ; Offset address table
    add esi, ebx                         ; ESI = Address table
    mov edx, [esi + ecx * 4]             ; EDX = Pointer(offset)
    add edx, ebx                         ; EDX = GetProcAddress
    xor ecx, ecx    ; ECX = 0
    push ebx        ; Kernel32 base address
    push edx        ; GetProcAddress
    push ecx        ; 0
    push 0x41797261 ; aryA
    push 0x7262694c ; Libr
    push 0x64616f4c ; Load
    push esp        ; "LoadLibrary"
    push ebx        ; Kernel32 base address
    call edx        ; GetProcAddress(LL)
    add esp, 0xc    ; pop "LoadLibrary"
    pop ecx         ; ECX = 0
    push eax        ; EAX = LoadLibrary
    push ecx
    mov cx, 0x6c6c  ; ll
    push ecx
    push 0x642e3233 ; 32.d
    push 0x72657375 ; user
    push esp        ; "user32.dll"
    call eax        ; LoadLibrary("user32.dll")
    add esp, 0x10                  ; Clean stack
    mov edx, [esp + 0x4]           ; EDX = GetProcAddress
    xor ecx, ecx                   ; ECX = 0
    push ecx
    mov ecx, 0x616E6F74            ; tona
    push ecx
    sub dword ptr[esp + 0x3], 0x61 ; Remove "a"
    push 0x74754265                ; eBut
    push 0x73756F4D                ; Mous
    push 0x70617753                ; Swap
    push esp                       ; "SwapMouseButton"
    push eax                       ; user32.dll address
    call edx                       ; GetProc(SwapMouseButton)
###  6.小细节
  * 避免全局变量（包括static之类的）的使用这违反了避免对地址直接调用的原则
  * 确保API的DLL被加载（显式加载）这个可以在一般情况下写好程序，使用PEid查看输入表，就可以知道在那个DLL调用了那个函数。也可以使用vs的跳转到定义或msdn查询
## 二、整合：shellcode开发框架
###  0.创建程序
新建项目->控制台应用->能同时选择控制台应用和空项目最好；不能的话选择控制台应用
编译器选择 **release** 版本
关闭生成清单： **工程属性(右键项目) - >链接器->清单文件->生成清单：否**
关闭缓冲区检查： **工程属性(右键项目) - >c/c++->代码生成->安全检查，设置为禁用安全检查**
关闭调试信息： **工程属性(右键项目) - >链接器->调试->生成调试信息：否**
设置函数入口：`#pragma comment(linker, "/ENTRY:EntryName")`
###  1.静态注入框架
**1.编写代码**
正常的功能
    #include 
    int main()
    {
        CreateFileA("shellcode.txt", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);
        MessageBoxA(NULL, "Hello shellcode!", "shell", MB_OK);
        return 0;
    }
**实现：**
前面讲过了，shellcode要避免对地址的直接调用，所以我们需要使用`GetProcAddress`和`LoadLibraryA`，所以将之前的getKernel32和getProcAddress导入到程序中
    DWORD getKernel32();
    FARPROC getProcAddress(HMODULE hMouduleBase);
**2.实现CreateFileA**
对`CreateFileA`实现动态调用，先创建函数指针，然后声明一个对象
    fn_CreateFileA = (FN_CreateFileA)GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateFileA");
声明对象时：1.要调用`GetProcAddress`，2.第一个参数：LoadLibraryA(“kernel32.dll”)，3.第二个参数：”CreateFileA”字符串。
**1。** 使用动态调用`GetProcAddress`
按照之前的方法，代码如下：
        typedef FARPROC (WINAPI *FN_GetProcAddress)
            (
                _In_ HMODULE hModule,
                _In_ LPCSTR lpProcName
            );
        FN_GetProcAddress fn_GetProcAddress = (FN_GetProcAddress)getProcAddress((HMODULE)getKernel32());
动态调用的是自己的函数`getProcAddress`(getProcAddress又是通过getkernel32和 **PE文件头**
找到的)，这样在`CreateFileA`的动态调用里面的参数就可以填fn_GetProcAddress
**2。** 第一个参数：LoadLibraryA(“kernel32.dll”)
直接使用`getkernel32`汇编代码
**3。** 第二个参数：”CreateFileA”字符串。
因为直接填写字符串会被编译器认为是静态变量，而我们要避免静态变量，所以要新建变量
    char szFuncName[] = { 'C','r','e','a','t','e','F','i','l','e','A',0 };
所以，最后我们的代码是这样的：
        typedef FARPROC (WINAPI *FN_GetProcAddress)
            (
                _In_ HMODULE hModule,
                _In_ LPCSTR lpProcName
            );
        FN_GetProcAddress fn_GetProcAddress = (FN_GetProcAddress)getProcAddress((HMODULE)getKernel32());
        typedef HANDLE(WINAPI *FN_CreateFileA)
            (
                __in     LPCSTR lpFileName,
                __in     DWORD dwDesiredAccess,
                __in     DWORD dwShareMode,
                __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,
                __in     DWORD dwCreationDisposition,
                __in     DWORD dwFlagsAndAttributes,
                __in_opt HANDLE hTemplateFile
                );
        char szFuncName[] = { 'C','r','e','a','t','e','F','i','l','e','A',0 };
        char szNewFile[] = { 'S','h','e','l','l','c','o','d','e','.','t','x','t',0};
        FN_CreateFileA fn_CreateFileA = (FN_CreateFileA)fn_GetProcAddress((HMODULE)getKernel32(), szFuncName);
        fn_CreateFileA(szNewFile, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);
**3.实现MessageBoxA()**
和上面CreateFileA实现不同的是，MessageBoxA是位于 **User32.dll** 中的，所以要动态加载`LoadLibraryA`
    typedef HMODULE(WINAPI *FN_LoadLibraryA)
            (
                _In_ LPCSTR lpLibFileName
            );
        char szLoadLibrary[]= { 'L','o','a','d','L','i','b','r','a','r','y','A' ,0};