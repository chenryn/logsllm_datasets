title:Security Analysis of the Palm Operating System and its Weaknesses
Against Malicious Code Threats
author:
USENIX Association
Proceedings of the
10th USENIX Security
Symposium
Washington, D.C., USA
August 13–17, 2001
© 2001 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Security Analysis of the Palm Operating System
and its Weaknesses Against Malicious Code Threats
Kingpin and Mudge
@stake, Inc.
196 Broadway
Cambridge, MA 02139
{kingpin,mudge}@atstake.com
Abstract
1 Introduction
Portable devices, such as Personal Digital Assis-
tants (PDAs), are particularly vulnerable to mali-
cious code threats due to their widespread imple-
mentation and current lack of a security framework.
Although well known in the security industry to be
insecure, PDAs are ubiquitous in enterprise envi-
ronments and are being used for such applications
as one-time-password generation, storage of medi-
cal and company conﬁdential information, and e-
commerce. It is not enough to assume all users are
conscious of computer security and it is crucial to
understand the risks of using portable devices in a
security infrastructure. Furthermore, it is not pos-
sible to employ a secure application on top of an
insecure foundation.
Palm operating system (OS) devices own nearly
80 percent of the global handheld computing mar-
ket [11]. It is because of this that the design of the
Palm OS and its supporting hardware platform were
analyzed. The presented research provides detail
into speciﬁc scenarios, weaknesses, and mitigation
recommendations related to data protection, ma-
licious code, virus storage, and virus propagation.
Additionally, this work can be used as a model by
users and developers to gain a deeper understanding
of the additional security risks that these and other
portable devices introduce.
∗Palm OS and HotSync are registered trademarks of Palm,
Inc. Other product and company names may be trademarks
of their respective owners.
A new threat model exists for malicious code and
virus attacks on portable devices. These threats
are no longer contained to common desktop environ-
ments. Portable devices employing custom electri-
cal circuit design, product-speciﬁc capabilities, and
embedded operating systems are commonplace in
corporate infrastructure. It is increasingly common
for vendors to introduce these devices to an envi-
ronment before the security ramiﬁcations have been
examined. PDAs are now being deployed by cor-
porations for security-related applications. Added
functionality of wireless technologies, such as in-
frared (IR) and radio frequency (RF), increases risk
areas. New classes of malicious code attacks ex-
ist that cannot be detected or contained by current
methods long deployed in desktop environments. In
addition, the notion of cross-architecture pollination
very quickly becomes a mainstream concern.
[5]
provides an overview of some malicious threats to
PDAs and can be read in parallel with this text.
Many users do not recognize that the information
stored on their PDA is open to compromise by unau-
thorized users, and hence do not treat the data
stored on their handhelds with the same care as
they do on their desktop. Our research discusses
the underlying problem that security is not prop-
erly designed into the Palm OS platform. Although
Palm OS is not presented as a secure operating sys-
tem, if the device is being used for security pur-
poses, which is becoming prevalent in corporate en-
vironments, there are a number of risk areas to be
concerned with.
For example, Palm OS oﬀers a built-in Security ap-
plication which is used for the legitimate user to
protect and hide records from unauthorized users
by means of a password. In all basic built-in appli-
cations (Address, Date Book, Memo Pad, and To
Do List), individual records can be marked as “Pri-
vate” and should only be accessible if the correct
password is entered. Another example is the “Beam
Bit” ﬂag contained in every application database,
which is used to prevent the information from being
transferred, or “beamed”, to another device via IR.
Honoring the state of the Beam Bit is purely volun-
tary by the executing application. These simplistic
mechanisms lull the user and perhaps some devel-
opers into a false sense of security. There should
be strong warnings by the vendor that these mech-
anisms are trivially bypassed (as in §4, §5, and
with [14]), so users and developers can plan for and
workaround the lack of security. Security-based ap-
plications exist on the Palm OS, such as software au-
thentication tokens, cryptographic key storage, and
encryption products, all that require a secure oper-
ating system in order to be properly implemented.
Without proper protection mechanisms in place, ap-
plications that rely on the secure storage of secret
components are severely at risk of compromise.
The properties of malicious code, particularly
viruses, can be distilled into four stages: Infection,
Storage, Triggers, and Actions. In this paper, the
design of Palm OS is analyzed with respect to each
of these stages. A number of weaknesses and attack
vectors have been identiﬁed from both classical and
new technology areas and we oﬀer insight into ad-
dressing these problems in design and usage. In no
way is this text exhaustive in enumerating attacks.
Rather, an attempt is made to educate the reader
on the design ﬂaws and new threats that exist on
portable devices.
In §2, we provide a summary of the various types of
malicious code: viruses, Trojan horses, and worms.
§3 describes the typical design and architecture of a
PDA, focusing on the Palm OS software and hard-
ware platform. §4 and §5 detail the risks of weak
system password storage and backdoor debug modes
inherent in Palm OS. §6 through §9 address the four
stages of the virus lifecycle with respect to Palm OS.
We conclude that current state-of-the-art portable
devices are not equipped for the threat of viruses or
other malicious code components. In addition, it be-
comes apparent that threat models and attack vec-
tors these devices introduce are not yet taken into
account by product designers and anti-virus ven-
dors1. Hopefully, the various sections of this paper
can act as a road map towards the future design
of these devices and aid in security awareness for
existing deployments.
2 Summary of Malicious Code Types
For the purposes of clarity, we will classify malicious
code into three areas [23]:
• A Virus is a self-replicating code segment
which must be attached to a host executable.
When the host is executed, the virus code may
also execute.
If possible, the virus will repli-
cate by attaching a copy of itself to another ex-
ecutable. The virus may include an additional
“payload” that triggers when speciﬁc condi-
tions are met.
• A Trojan horse is malicious code masquerad-
ing as a legitimate application. The goal of the
code is to have the user believe they are con-
ducting standard operations or running an in-
nocuous application when in fact initiating its
ulterior activities. There are many ways this
attack manifests with the most frequent being
reliance upon user naivety. A Trojan horse is
similar to a virus, except a Trojan horse does
not replicate.
• A Worm is a self-replicating program.
It is
self-contained and does not require a host pro-
gram. The program creates the copy and causes
it to execute; no user intervention is required.
Worms commonly utilize network services to
propagate to other computer systems [19].
3 Palm OS Device Architecture
At the highest level, the architecture of the Palm OS
device, and most other PDAs, can be broken down
into three layers (Figure 1): Application, Operating
System, and Hardware.
Use of the Palm OS Application Programming In-
terface (API) provides the application developer
1Anti-virus software for PDAs is available from a number
of vendors, including, but not limited to: Central Command,
F-Secure, McAfee.com, Symantec, and Trend Micro.
Figure 1: Typical layered architecture of a PDA
with a notion of hardware independence and pro-
vides a layer of abstraction.
If the API is used
properly, recompiling of the application is all that is
necessary in order to run on Palm OS devices based
on diﬀerent hardware. Therefore, it is important to
examine weaknesses and attack vectors that can be
found at the programming interface to the operating
system.
Directly accessing the processor by avoiding the in-
terface put forward by the operating system allows
the developer to have more control of the proces-
sor and its functionality. A risk of legitimate use
of direct processor access is the loss of compati-
bility for future models. For example, older Palm
OS devices did not support a grayscale LCD palette
through the Palm OS API, even though the under-
lying hardware possessed this capability. Bypassing
this interface and tapping into the functionality of
the processor directly will remedy this [13]. Ideally,
to provide some semblance of access control and se-
curity, only the operating system should have access
to the underlying hardware. Allowing applications
to directly access hardware provides an avenue for
malicious attack (as discussed in §9.2).
3.1 Operating System
Palm OS was designed to be open and modular to
support application development by third-parties.
The notion of layer- or ﬁle-based access control is
notably absent.
It is not surprising that all pro-
gram code and data can be accessed and modiﬁed
by any user or other application. In such uniform
memory access scenarios, it is diﬃcult to diﬀeren-
tiate between legitimate and malicious applications
solely from memory read/writes and system calls.
[20] oﬀers the following overview on ﬁle system and
application structure:
• Palm OS does not use a traditional ﬂat ﬁle sys-
tem. Data is stored in memory chunks called
“records”, which are grouped into “databases”.
A database is analogous to a ﬁle. The diﬀer-
ence is that data is broken down into multiple
records instead of being stored in one contigu-
ous chunk.
• Palm OS applications are generally single-
threaded, event-driven programs. Only one
program runs at a time. Each application has a
PilotMain function that is equivalent to main
in C programs. To launch an application, Palm
OS calls PilotMain and sends it a launch code.
The launch code may specify that the applica-
tion is to become active and display its user
interface (called a “normal launch”), or it may
specify that the application should simply per-
form a small task and exit without display-
ing its user interface. The sole purpose of the
PilotMain function is to receive launch codes
and respond to them. Future versions of the
Palm OS may allow third-party applications to
be multi-threaded.
• Applications can send launch codes to each
other, so an application might be launched from
another application or it might be launched
from the system. An application can use a
launch code to request that another application
perform an action or modify its data.
3.2 Hardware
All Palm OS devices,
spring,
including those by Hand-
IBM, Kyocera, QUALCOMM,
Sony,
Operating SystemHardware DriversApplicationSoftware APIHardwareUsing thePalm OS APIDirect accessto the processorFranklin Covey, TRG and Symbol Technologies,
currently use the Motorola DragonBall MC68328-
family of microprocessors which are based on the
Motorola MC68EC000 core2.
The DragonBall
processors are inherently low-speed, ranging from
16MHz to 33MHz depending on the type (MC68328,
’EZ328, or ’VZ328). ARM Limited’s microprocessor
architecture, employed in many consumer, wireless,
and security products, will be used as the core of
future DragonBall processors [2] and is planned to
be implemented in Palm OS devices in 2002.
Palm OS and other handheld embedded devices use
battery-backed Random Access Memory (RAM) to
store application and user data. The operating
system and other non-transient components are of-
ten stored in Read-Only Memory (ROM). However,
newer devices are moving towards Flash memory
for static components such as the operating system.
Flash memory is non-volatile and the data stored in
it will remain intact even with loss of battery power
or a hard reset. The Palm OS is restarted from its
ROM or Flash storage area upon system reset.
History has shown the weaknesses of poorly chosen
or stored passwords, as in [17] and with the Mor-
ris Worm [19]. Users of portable devices, especially
those that have no keyboard and require character
input with a pen, oftentimes choose short, easily
guessable passwords, placing convenience over se-
curity. Leveraging this, the scenario presents itself
where malicious code determines the user’s pass-
word on the local device and, upon connection to a
network or other system, attempts to gain access to
other systems using the user name and now-known
password. This type of attack ends up being dis-
concertingly successful.
As it happens, an encoded block is stored on
the Palm OS device in the Unsaved Preferences
database that contains a reversible obfuscation of
the user’s system password [15]. The block is not
only readable by any application on the actual de-
vice, but is also transmitted over the serial cable,
airwaves, and networks during a HotSync operation.
This problem is veriﬁed to concern Palm OS ver-
sions 3.5.2 and earlier.
4 Retrieval of Passwords
4.1 Password Decoding Details
It is possible, via a number of methods, to extract
data from portable devices by reading raw memory
or from the host system after such data has been
backed up. These attacks can retrieve ﬁles contain-
ing potentially valuable data such as passwords, ﬁ-
nancial, medical, or other company or personal in-
formation.
In oﬃcially sanctioned scans, the au-
thors found that the passwords chosen by users to
protect data on their PDAs were the same as those
being used for critical corporate assets.
One example of a high-security application is med-
ical data, which is increasingly being stored on
portable devices by doctors in order to have im-
mediate access to patient information. Recent sit-
uations have occurred in which hospital intruders
have beamed extensive amounts of unprotected pa-
tient data oﬀ of Palm OS devices. This could have
been avoided with the proper use of passwords, en-
cryption, and access-control on the device.
2Motorola’s MC68328 DragonBall Integrated Processor
User’s Manual describes the programming, capabilities, and
operation of the MC68328;
the M68000 Microprocessor
User’s Manual provides instruction details for the ’EC000
core.
The password is set by the legitimate user with
the Security application. The maximum length of
the ASCII password is 31 characters. Regardless
of the length of the ASCII password, the resultant
encoded block is always 32 bytes. Two methods
are used to encode the ASCII password, depending
on its length. For passwords of four characters or
fewer, an index is calculated based on the length
of the password and the string is XORed against a
32-byte constant block. For passwords of more than
four characters, the string is padded to 32 bytes and
run through four rounds of a function that XORs
against a 64-byte constant block. By understanding
the encoding schema, it is possible to essentially run
the routines in reverse to decode the password.
The Palm desktop software makes use of the Se-
rial Link Protocol (SLP) to transfer information be-
tween itself and the Palm device. Each SLP packet
consists of a packet header, client data of variable
size, and a packet footer [20]. During the HotSync
negotiation process, one particular SLP packet’s
client data consists of a structure which contains
the encoded password block (Figure 2).
struct {
UInt8 header[4];
UInt8 exec_buf[6];
Int32 userID;
Int32 viewerID;
Int32 lastSyncPC;
time_t successfulSyncDate;
time_t lastSyncDate;