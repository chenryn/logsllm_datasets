# 服务端模板注入攻击 (SSTI) 浅析

## 译文声明
本文为翻译文章，原文来源：[knownsec](http://blog.portswigger.net/)。  
原文地址：[《Server-Side Template Injection: RCE for the modern webapp》](https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf)  
作者：RickGray（知道创宇404安全实验室）  
译文仅供参考，具体内容及含义以原文为准。

在2015年的黑帽大会上，James Kettle详细介绍了服务端模板注入（SSTI），从其形成、检测到验证和利用方法。本文基于对原文的理解，并结合具体示例，进一步探讨了SSTI的原理及其扫描检测方法。

## 一、模板注入与常见Web注入

常见的Web注入漏洞包括SQL注入、XSS注入、XPath注入、XML注入、代码注入和命令注入等。这些注入漏洞的核心原因在于服务器未充分过滤或验证用户输入，直接将其拼接到代码中执行。例如：

```php
// SQL 注入
$query = "SELECT * FROM sometable WHERE id=" . $_GET['id'];
mysql_query($query);
```

而服务端模板注入（SSTI）同样是因为服务器接收并使用了用户的输入作为模板内容的一部分，在编译和渲染过程中执行了恶意代码，从而可能导致敏感信息泄露、代码执行甚至GetShell等问题。其影响程度主要取决于所使用的模板引擎的复杂性。

## 二、模板注入原理

模板注入涉及服务端Web应用使用模板引擎渲染用户请求的过程。以下以PHP模板引擎Twig为例进行说明：

```php
render("Hello {{name}}", array("name" => $_GET["name"])); // 将用户输入作为模板变量
echo $output;
```

在这种情况下，模板变量`{{name}}`的值来自GET请求参数`$_GET["name"]`。由于模板引擎通常会对变量值进行编码和转义，因此不会导致XSS攻击。

然而，如果用户输入被直接用作模板内容的一部分，则情况不同：

```php
render("Hello {$_GET['name']}"); // 将用户输入作为模板内容
echo $output;
```

此时，如果用户传递JavaScript代码，该代码将被原样输出，从而可能引发XSS攻击。此外，攻击者还可以针对模板框架进行更复杂的攻击。

总之，SSTI的根本原因是服务器信任了用户的输入（Web安全原则：永远不要相信用户的输入）。

## 三、模板注入检测

要检测SSTI，可以构造特定的Payload并根据返回内容判断是否存在注入漏洞。例如，在Twig模板引擎中，可以使用如下代码进行测试：

```php
render("Hello {$_GET['name']}");
echo $output;
```

假设用户输入`name={{2*10}}`，则模板内容变为`Hello {{2*10}}`。Twig会计算表达式`2*10`并将结果20输出。若进一步构造Payload `IsVuln{# comment #}{{2*8}}OK`，最终输出应为`Hello IsVuln16OK`。

通过这种方式，可以构建出SSTI的扫描检测流程：

1. 更改请求参数，使其包含特定的模板语法Payload。
2. 根据页面渲染返回的内容判断Payload是否被解析。
3. 如果Payload被解析，则存在对应模板引擎的注入漏洞；否则不存在SSTI。

## 四、小结

本文简要介绍了服务端模板注入漏洞与常规Web注入漏洞的关系，分析了其产生的原理，并以Twig模板引擎为例讲解了SSTI的扫描和检测方法。尽管SSTI并不普遍，但开发人员不当使用模板引擎时，可能会导致严重的安全问题。后续文章将进一步研究各语言流行的模板引擎，并提供相应的利用点和方法。

### 参考资料
- [Black Hat US 2015 - Server-Side Template Injection: RCE for the Modern Web App](https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf)
- [YouTube - Server-Side Template Injection: RCE for the Modern Web App](https://www.youtube.com/watch?time_continue=1342&v=BGsAguMPtFw)