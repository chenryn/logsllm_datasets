### 3.78 USER_TAB_SUBPARTITIONS

The `USER_TAB_SUBPARTITIONS` view provides information about all subpartitions owned by the current user.

| Name | Type | Description |
|------|------|-------------|
| `schema_name` | `TEXT` | The name of the schema in which the table resides. |
| `table_name` | `TEXT` | The name of the table. |
| `partition_name` | `TEXT` | The name of the partition. |
| `subpartition_name` | `TEXT` | The name of the subpartition. |
| `high_value` | `TEXT` | The high subpartitioning value specified in the `CREATE TABLE` statement. |
| `high_value_length` | `INTEGER` | The length of the subpartitioning value. |
| `subpartition_position` | `INTEGER` | The position of the subpartition (1 for the first, 2 for the second, etc.). |
| `tablespace_name` | `TEXT` | The name of the tablespace in which the subpartition resides. |
| `pct_free` | `NUMERIC` | Included for compatibility only; always 0. |
| `pct_used` | `NUMERIC` | Included for compatibility only; always 0. |
| `ini_trans` | `NUMERIC` | Included for compatibility only; always 0. |
| `max_trans` | `NUMERIC` | Included for compatibility only; always 0. |
| `initial_extent` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `next_extent` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `min_extent` | `NUMERIC` | Included for compatibility only; always 0. |
| `max_extent` | `NUMERIC` | Included for compatibility only; always 0. |
| `pct_increase` | `NUMERIC` | Included for compatibility only; always 0. |
| `freelists` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `freelist_groups` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `logging` | `CHARACTER VARYING(7)` | Included for compatibility only; always `YES`. |
| `compression` | `CHARACTER VARYING(8)` | Included for compatibility only; always `NONE`. |
| `num_rows` | `NUMERIC` | Same as `pg_class.reltuples`. |
| `blocks` | `INTEGER` | Same as `pg_class.relpages`. |
| `empty_blocks` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `avg_space` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `chain_cnt` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `avg_row_len` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `sample_size` | `NUMERIC` | Included for compatibility only; always `NULL`. |
| `last_analyzed` | `TIMESTAMP WITHOUT TIME ZONE` | Included for compatibility only; always `NULL`. |
| `buffer_pool` | `CHARACTER VARYING(7)` | Included for compatibility only; always `NULL`. |
| `global_stats` | `CHARACTER VARYING(3)` | Included for compatibility only; always `YES`. |
| `user_stats` | `CHARACTER VARYING(3)` | Included for compatibility only; always `NO`. |
| `backing_table` | `REGCLASS` | Name of the partition backing table. |

### 3.79 USER_TABLES

The `USER_TABLES` view displays information about all tables owned by the current user.

| Name | Type | Description |
|------|------|-------------|
| `schema_name` | `TEXT` | The name of the schema in which the table belongs. |
| `table_name` | `TEXT` | The name of the table. |
| `tablespace_name` | `TEXT` | The name of the tablespace in which the table resides if other than the default tablespace. |
| `status` | `CHARACTER VARYING(5)` | Included for compatibility only; always set to `VALID`. |
| `temporary` | `CHARACTER(1)` | `Y` if the table is temporary; `N` if the table is not temporary. |

### 3.80 USER_TRIGGERS

The `USER_TRIGGERS` view displays information about all triggers on tables owned by the current user.

| Name | Type | Description |
|------|------|-------------|
| `schema_name` | `TEXT` | The name of the schema in which the trigger resides. |
| `trigger_name` | `TEXT` | The name of the trigger. |
| `trigger_type` | `TEXT` | The type of the trigger. Possible values are: `BEFORE ROW`, `BEFORE STATEMENT`, `AFTER ROW`, `AFTER STATEMENT`. |
| `triggering_event` | `TEXT` | The event that fires the trigger. |
| `table_owner` | `TEXT` | The user name of the owner of the table on which the trigger is defined. |
| `base_object_type` | `TEXT` | Included for compatibility only. Value will always be `TABLE`. |
| `table_name` | `TEXT` | The name of the table on which the trigger is defined. |
| `referencing_names` | `TEXT` | Included for compatibility only. Value will always be `REFERENCING NEW AS NEW OLD AS OLD`. |
| `status` | `TEXT` | Status indicates if the trigger is enabled (`VALID`) or disabled (`NOTVALID`). |
| `description` | `TEXT` | Included for compatibility only. |
| `trigger_body` | `TEXT` | The body of the trigger. |
| `action_statement` | `TEXT` | The SQL command that executes when the trigger fires. |

### 3.81 USER_TYPES

The `USER_TYPES` view provides information about all object types owned by the current user.

| Name | Type | Description |
|------|------|-------------|
| `schema_name` | `TEXT` | The name of the schema in which the type is defined. |
| `type_name` | `TEXT` | The name of the type. |
| `type_oid` | `OID` | The object identifier (OID) of the type. |
| `typecode` | `TEXT` | The typecode of the type. Possible values are: `OBJECT`, `COLLECTION`, `OTHER`. |
| `attributes` | `INTEGER` | The number of attributes in the type. |

### 3.82 USER_USERS

The `USER_USERS` view provides information about the current user.

| Name | Type | Description |
|------|------|-------------|
| `username` | `TEXT` | User name of the user. |
| `user_id` | `OID` | ID number of the user. |
| `account_status` | `CHARACTER VARYING(32)` | The current status of the account. Possible values are: `OPEN`, `EXPIRED`, `EXPIRED(GRACE)`, `EXPIRED & LOCKED`, `EXPIRED & LOCKED(TIMED)`, `EXPIRED(GRACE) & LOCKED`, `EXPIRED(GRACE) & LOCKED(TIMED)`, `LOCKED`, `LOCKED(TIMED)`. Use the `edb_get_role_status(role_id)` function to get the current status of the account. |
| `lock_date` | `TIMESTAMP WITHOUT TIME ZONE` | If the account status is `LOCKED`, `lock_date` displays the date and time the account was locked. |
| `expiry_date` | `TIMESTAMP WITHOUT TIME ZONE` | The expiration date of the account. |
| `default_tablespace` | `TEXT` | The default tablespace associated with the account. |
| `temporary_tablespace` | `CHARACTER VARYING(30)` | Included for compatibility only. The value will always be an empty string. |
| `created` | `TIMESTAMP WITHOUT TIME ZONE` | Included for compatibility only. The value will always be `NULL`. |
| `initial_rsrc_consumer_group` | `CHARACTER VARYING(30)` | Included for compatibility only. The value will always be `NULL`. |
| `external_name` | `CHARACTER VARYING(4000)` | Included for compatibility only; always set to `NULL`. |

### 3.83 USER_VIEW_COLUMNS

The `USER_VIEW_COLUMNS` view provides information about all columns in views owned by the current user.

| Name | Type | Description |
|------|------|-------------|
| `schema_name` | `CHARACTER VARYING` | The name of the schema in which the view belongs. |
| `view_name` | `CHARACTER VARYING` | The name of the view. |
| `column_name` | `CHARACTER VARYING` | The name of the column. |
| `data_type` | `CHARACTER VARYING` | The data type of the column. |
| `data_length` | `NUMERIC` | The length of text columns. |
| `data_precision` | `NUMERIC` | The precision (number of digits) for `NUMBER` columns. |
| `data_scale` | `NUMERIC` | The scale of `NUMBER` columns. |
| `nullable` | `CHARACTER(1)` | Whether or not the column is nullable. Possible values are: `Y` - column is nullable; `N` - column does not allow null. |
| `column_id` | `NUMERIC` | The relative position of the column within the view. |
| `data_default` | `CHARACTER VARYING` | The default value assigned to the column. |

### 3.84 USER_VIEWS

The `USER_VIEWS` view provides information about all views owned by the current user.

| Name | Type | Description |
|------|------|-------------|
| `schema_name` | `TEXT` | The name of the schema in which the view resides. |
| `view_name` | `TEXT` | The name of the view. |
| `text` | `TEXT` | The `SELECT` statement that defines the view. |

### 3.85 V$VERSION

The `V$VERSION` view provides information about product compatibility.

| Name | Type | Description |
|------|------|-------------|
| `banner` | `TEXT` | Displays product compatibility information. |

### 3.86 PRODUCT_COMPONENT_VERSION

The `PRODUCT_COMPONENT_VERSION` view provides version information about product version compatibility.

| Name | Type | Description |
|------|------|-------------|
| `product` | `CHARACTER VARYING(74)` | The name of the product. |
| `version` | `CHARACTER VARYING(74)` | The version number of the product. |
| `status` | `CHARACTER VARYING(74)` | The status of the release. Included for compatibility; always `Available`. |

### 4 System Catalog Tables

The following system catalog tables contain definitions of database objects. The layout of the system tables is subject to change. If you are writing an application that depends on information stored in the system tables, it would be prudent to use an existing catalog view or create a catalog view to isolate the application from changes to the system table.

#### 4.1 dual

`dual` is a single-row, single-column table provided for compatibility with Oracle databases.

| Column | Type | Modifiers | Description |
|--------|------|-----------|-------------|
| `dummy` | `VARCHAR2(1)` | | Provided for compatibility only. |

#### 4.2 edb_dir

The `edb_dir` table contains one row for each alias that points to a directory created with the `CREATE DIRECTORY` command. A directory is an alias for a pathname that allows a user limited access to the host file system. You can use a directory to fence a user into a specific directory tree within the file system. For example, the `UTL_FILE` package offers functions that permit a user to read and write files and directories in the host file system, but only allows access to paths that the database administrator has granted access to via a `CREATE DIRECTORY` command.

| Column | Type | Modifiers | Description |
|--------|------|-----------|-------------|
| `dirname` | `"name" not null` | | The name of the alias. |
| `dirowner` | `oid not null` | | The OID of the user that owns the alias. |
| `dirpath` | `text` | | The directory name to which access is granted. |
| `diracl` | `aclitem[]` | | The access control list that determines which users may access the alias. |

#### 4.3 edb_password_history

The `edb_password_history` table contains one row for each password change. The table is shared across all databases within a cluster.

| Column | Type | References | Description |
|--------|------|------------|-------------|
| `passhistroleid` | `oid` | `pg_authid.oid` | The ID of a role. |
| `passhistpassword` | `text` | | Role password in md5 encrypted form. |
| `passhistpasswordsetat` | `timestamptz` | | The time the password was set. |

#### 4.4 edb_policy

The `edb_policy` table contains one row for each policy.

| Column | Type | Modifiers | Description |
|--------|------|-----------|-------------|
| `policyname` | `name not null` | | The policy name. |
| `policygroup` | `oid not null` | | Currently unused. |
| `policyobject` | `oid not null` | | The OID of the table secured by this policy (the `object_schema` plus the `object_name`). |
| `policykind` | `char not null` | | The kind of object secured by this policy: `r` for a table, `v` for a view, `=` for a synonym. Currently always `r`. |
| `policyproc` | `oid not null` | | The OID of the policy function (the `function_schema` plus `policy_function`). |
| `policyinsert` | `boolean not null` | | True if the policy is enforced by `INSERT` statements. |
| `policyselect` | `boolean not null` | | True if the policy is enforced by `SELECT` statements. |
| `policydelete` | `boolean not null` | | True if the policy is enforced by `DELETE` statements. |
| `policyupdate` | `boolean not null` | | True if the policy is enforced by `UPDATE` statements. |
| `policyindex` | `boolean not null` | | Currently unused. |
| `policyenabled` | `boolean not null` | | True if the policy is enabled. |
| `policyupdatecheck` | `boolean not null` | | True if rows updated by an `UPDATE` statement must satisfy the policy. |
| `policystatic` | `boolean not null` | | Currently unused. |
| `policytype` | `integer not null` | | Currently unused. |
| `policyopts` | `integer not null` | | Currently unused. |
| `policyseccols` | `int2vector not null` | | The column numbers for columns listed in `sec_relevant_cols`. |

#### 4.5 edb_profile

The `edb_profile` table stores information about the available profiles. `edb_profiles` is shared across all databases within a cluster.

| Column | Type | References | Description |
|--------|------|------------|-------------|
| `oid` | `oid` | | Row identifier (hidden attribute; must be explicitly selected). |
| `prfname` | `name` | | The name of the profile. |
| `prffailedloginattempts` | `integer` | | The number of failed login attempts allowed by the profile. `-1` indicates that the value from the default profile should be used. `-2` indicates no limit on failed login attempts. |
| `prfpasswordlocktime` | `integer` | | The password lock time associated with the profile (in seconds). `-1` indicates that the value from the default profile should be used. `-2` indicates that the account should be locked permanently. |
| `prfpasswordlifetime` | `integer` | | The password life time associated with the profile (in seconds). `-1` indicates that the value from the default profile should be used. `-2` indicates that the password never expires. |
| `prfpasswordgracetime` | `integer` | | The password grace time associated with the profile (in seconds). `-1` indicates that the value from the default profile should be used. `-2` indicates that the password never expires. |
| `prfpasswordreusetime` | `integer` | | The number of seconds that a user must wait before reusing a password. `-1` indicates that the value from the default profile should be used. `-2` indicates that the old passwords can never be reused. |
| `prfpasswordreusemax` | `integer` | | The number of password changes that have to occur before a password can be reused. `-1` indicates that the value from the default profile should be used. `-2` indicates that the old passwords can never be reused. |
| `prfpasswordallowhashed` | `integer` | | The password allow hashed parameter specifies whether an encrypted password to be allowed for use or not. The possible values can be `true/on/yes/1`, `false/off/no/0`, and `DEFAULT`. |
| `prfpasswordverifyfuncdb` | `oid` | `pg_database.oid` | The OID of the database in which the password verify function exists. |
| `prfpasswordverifyfunc` | `oid` | `pg_proc.oid` | The OID of the password verify function associated with the profile. |

#### 4.6 edb_variable

The `edb_variable` table contains one row for each package-level variable (each variable declared within a package).

| Column | Type | Modifiers | Description |
|--------|------|-----------|-------------|
| `varname` | `"name" not null` | | The name of the variable. |
| `varpackage` | `oid not null` | | The OID of the `pg_namespace` row that stores the package. |
| `vartype` | `oid not null` | | The OID of the `pg_type` row that defines the type of the variable. |
| `varaccess` | `"char" not null` | | `+` if the variable is visible outside of the package. `-` if the variable is only visible within the package. Note: Public variables are declared within the package header; private variables are declared within the package body. |
| `varsrc` | `text` | | Contains the source of the variable declaration, including any default value expressions for the variable. |
| `varseq` | `smallint not null` | | The order in which the variable was declared in the package. |

#### 4.7 pg_synonym

The `pg_synonym` table contains one row for each synonym created with the `CREATE SYNONYM` command or `CREATE PUBLIC SYNONYM` command.

| Column | Type | Modifiers | Description |
|--------|------|-----------|-------------|
| `synname` | `"name" not null` | | The name of the synonym. |
| `synnamespace` | `oid not null` | | Replaces `synowner`. Contains the OID of the `pg_namespace` row where the synonym is stored. |
| `synowner` | `oid not null` | | The OID of the user that owns the synonym. |
| `synobjschema` | `"name" not null` | | The schema in which the referenced object is defined. |
| `synobjname` | `"name" not null` | | The name of the referenced object. |
| `synlink` | `text` | | The (optional) name of the database link in which the referenced object is defined. |

#### 4.8 product_component_version

The `product_component_version` table contains information about feature compatibility. An application can query this table at installation or run time to verify that features used by the application are available with this deployment.

| Column | Type | Description |
|--------|------|-------------|
| `product` | `character varying (74)` | The name of the product. |
| `version` | `character varying (74)` | The version number of the product. |
| `status` | `character varying (74)` | The status of the release. |

### 5 Acknowledgements

The PostgreSQL 8.3, 8.4, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 10, and 11 Documentation provided the baseline for the portions of this guide that are common to PostgreSQL, and is hereby acknowledged:

**Portions of this EnterpriseDB Software and Documentation may utilize the following copyrighted material, the use of which is hereby acknowledged.**

- **PostgreSQL Documentation, Database Management System**
  - PostgreSQL is Copyright © 1996-2018 by the PostgreSQL Global Development Group.
  - Postgres95 is Copyright © 1994-5 by the Regents of the University of California.

**Permission to use, copy, modify, and distribute this software and its documentation for any purpose, without fee, and without a written agreement is hereby granted, provided that the above copyright notice and this paragraph and the following two paragraphs appear in all copies.**

**IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.**

**THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS-IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.**

Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.