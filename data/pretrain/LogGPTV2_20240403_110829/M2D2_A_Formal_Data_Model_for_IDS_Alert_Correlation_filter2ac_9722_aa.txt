title:M2D2: A Formal Data Model for IDS Alert Correlation
author:Benjamin Morin and
Ludovic M&apos;e and
Herv&apos;e Debar and
Mireille Ducass&apos;e
M2D2: A Formal Data Model for IDS Alert
Correlation
Benjamin Morin1, Ludovic M´e2, Herv´e Debar1, and Mireille Ducass´e3
1 France T´el´ecom R&D, Caen, France
{benjamin.morin, herve.debar}@rd.francetelecom.com,
2 Sup´elec, Rennes, France
PI:EMAIL,
3 IRISA/INSA, Rennes, France
PI:EMAIL
Abstract. At present, alert correlation techniques do not make full use
of the information that is available. We propose a data model for IDS
alert correlation called M2D2. It supplies four information types: in-
formation related to the characteristics of the monitored information
system, information about the vulnerabilities, information about the se-
curity tools used for the monitoring, and information about the events
observed. M2D2 is formally deﬁned. As far as we know, no other formal
model includes the vulnerability and alert parts of M2D2. Three exam-
ples of correlations are given. They are rigorously speciﬁed using the
formal deﬁnition of M2D2. As opposed to already published correlation
methods, these examples use more than the events generated by security
tools; they make use of many concepts formalized in M2D2.
1 Introduction
Intrusion detection today faces four major challenges. Firstly, the overall number
of alerts generated is overwhelming for operators. Secondly, too many of these
alerts falsely indicate security issues and require investigation from these oper-
ators. Thirdly, the diagnosis information associated with the alerts is so poor
that it requires the operator to go back to the original data source to under-
stand the diagnosis and assess the real severity of the alert. Finally, the number
of undetected attacks (a.k.a false negatives) must be reduced in order to provide
an appropriate coverage for the monitoring of the environment.
Alarm correlation is the key to the ﬁrst three challenges: it consists in reduc-
ing and conceptually interpreting multiple alarms such that new meanings are
assigned to these alarms [1]. In order to reduce false negatives, heterogeneous
analyzers are often used to get multiple points of view of the attacks. Multiply-
ing analyzers also multiplies alerts. Alert correlation is therefore all the more
essential.
At present, alert correlation techniques do not make full use of the informa-
tion that is available. For example, they tend to only use the events generated
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 115–137, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
116
B. Morin et al.
by security tools. We argue that alert correlation must take at least four in-
formation types into account: information related to the characteristics of the
monitored information system, information about the vulnerabilities, informa-
tion about the security tools used for the monitoring, and information about the
events observed. Indeed, an organization information system (IS) is made of a
network of hosts which potentially exhibit vulnerabilities. These vulnerabilities
are exploited by attackers. Security tools are required to monitor the IS in order
to locate events of interest, identify attacks and generate alerts.
In this paper, we propose a model, called M2D2, which supplies the above
four types of information. It provides concepts and relations relevant to the
security of an information system. M2D2 is formally deﬁned, following Mc Hugh’s
suggestion that further intrusion detection signiﬁcant progress will depend on
the development of an underlying theoretical basis for the ﬁeld [2].
The model has nevertheless a practical ground. Indeed, a relational database
implements parts of it, and the corresponding tables are automatically generated
from data sources. IDS and vulnerability scanners ﬁll the database with events,
vulnerabilities and products tables come from the ICAT [3] database.
Three examples of correlations are given. The ﬁrst one aggregates alerts
referring to the same host, even when the host name is not provided by the
alert attributes. The second example identiﬁes the hosts vulnerable to an attack
occurrence. The third example aims at reducing false positives by analyzing the
reaction or the absence of reaction of the security tools which are able to detect
the cause of the alert. These examples are rigorously speciﬁed using the formal
bases of M2D2. Moreover, they illustrate the need to work on the four types of
information.
Two sets of related work address the modeling of information for intrusion
detection : the NetStat Network Fact Base of Vigna and Kemmerer [4,5] and the
Intrusion Reference Model (IRM) of Goldman et al. [6]. The Network Fact Base
is formally deﬁned but it is not comprehensive, only the topology of information
systems and some of the events are modeled. IRM is quite comprehensive but
we are not aware of any formalization.
As it is illustrated in the examples of correlations, the model must be both
comprehensive and formally deﬁned. Indeed, if it is not comprehensive enough,
all the useful properties cannot be expressed; if it is not formally deﬁned, the
properties are not as rigorous as they must be. In the following, we reuse the
concepts of Vigna’s formal model [7], and extend the formalization to encompass
the four types of information needed. The main contribution of this article is
therefore a formal model of data relevant for alert correlation. This model is
richer than the existing formal models.
Section 2 presents the concepts of the model and the relations and functions
which link concepts together. Section 3 presents some correlation methods based
on the model. Section 4 discusses related work. The last section concludes on
the contributions of this article.
M2D2: A Formal Data Model for IDS Alert Correlation
117
Fig. 1. M2D2 scheme
2 M2D2: Concepts and Relations
M2D2 integrates the four main types of information relevant to security identiﬁed
in the introduction: IS characteristics, vulnerabilities, security tools, and events.
The global schema of M2D2 can be found in ﬁgure 1. It summarizes the main
concepts and relations described thereafter.
In the remainder of this section the four types of information are described
in turn. For each type of information, the formal deﬁnition can be found in
framed ﬁgures, and an informal description of the concepts can be found in the
text. Every time a relation is informally discussed, its identiﬁer is indicated in
bold (equiv for example) so that its formal deﬁnition can be easily found in the
corresponding frame.
2.1 Notations
For formalization, notations of the Z and B formal methods are used [8]. The
precise deﬁnitions of all the operators used in this article can be found in ﬁgure 2.
Let us brieﬂy recall here the basic ones. The set of all the relations between two
118
B. Morin et al.
Deﬁnition
Conditions
{y, x | (y, x) ∈ t × s ∧ (x, y) ∈ r}
Syntax
Name
s ↔ t P (s × t)
Set of relations
r ∈ s ↔ t
r−1
Inverse relation
dom(r) { x | x ∈ s ∧ ∃y·(y ∈ t ∧ (x, y) ∈ r)} r ∈ s ↔ t
Domain
ran(r) { y | y ∈ t ∧ ∃x·(x ∈ s ∧ (x, y) ∈ r)} r ∈ s ↔ t
Range
Composition
r ; q
id(s)
Identity
Restriction
u  r
r[w]
Image
Partial functions s (cid:7)→ t
s → t
Total functions
s (cid:1) t
Injections
s (cid:2) t
Surjections
s (cid:1)(cid:2) t
Bijections
q ◦ r
{ x, y | (x, y) ∈ s × s ∧ x = y}
{ x, y | (x, y) ∈ r ∧ x ∈ u}
ran(w  r)
{ r | r ∈ s ↔ t ∧ (r−1 ;r) ⊆ id(t)}
{ f | f ∈ s (cid:7)→ t ∧ dom(f) = s}
s → t ∩ s (cid:7)(cid:1) t
s (cid:7)(cid:2) t ∩ s → t
s (cid:1) t ∩ s (cid:2) t
r ∈ s ↔ t ∧ q ∈ t ↔ u
r ∈ s ↔ t ∧ u ⊆ s
r ∈ s ↔ t ∧ w ⊆ s
Fig. 2. Notations
sets s and t is noted s ↔ t. A relation represents a zero-or-possibly-many to
zero-or-possibly-many correspondence. The set of all partial functions between
s and t is noted s (cid:7)→ t. A partial function represents a zero-or-possibly-many
to zero-or-one correspondence. The set of all total functions between s and t
is noted s → t. A total function represents a one-or-possibly-many to zero-or-
one correspondence. The set of all partial (respectively total) injections between
s and t is noted s (cid:7)(cid:1) t (resp. s (cid:1) t). A partial (respectively total) injection
represents a zero-or-one to zero-or-one (resp. one to zero-or-one) correspondence.
The set of all partial (respectively total) surjections between s and t is noted
s (cid:7)(cid:2) t (resp. s (cid:2) t). A partial (respectively total) surjection represents a zero-or-
possibly-many to one (resp. one-or-possibly-many to one) correspondence. The
set of all bijections between s and t is noted s (cid:1)(cid:2) t. A bijection represents a one
to one correspondence.
The distinction between relations and functions, as well as the injective prop-
erty, have a major impact on implementation. An injective function can be im-
plemented straightforwardly by an array. A non-injective function can be im-
plemented by an array but the contents of the array may be a pointer to a list
of values. In general, a relation which is not an injective function is best im-
plemented by a database table. The partial versus total distinction has a major
impact on the interpretation of the data. Indeed, if a function is partial some
of the values may be undeﬁned. A relation which is not a function may also
be partial. It can be speciﬁed by the fact that the domain is only included in,
and not necessarily equal to, the origin set (dom(r) ⊆ s). Bijections are the
easiest to implement and handle, unfortunately, very few relations are bijections
in reality. In the following, we will therefore rigorously deﬁne the characteristics
of the deﬁned relations.
M2D2: A Formal Data Model for IDS Alert Correlation
119
Deﬁnitions
I is the set of network interfaces.
A network is a hypergraph on I, i.e is a family N = (E1, E2, . . . , Em), where
Ei ⊂ I is called an edge. Edges are divided in two subsets, H and L
H ⊆ P(I) is the set of hosts, and
L ⊆ P(I) is the set of links.
N is the set of host names in the information system.
NA = {0, . . . , 232 − 1} is the set of IPv4 address.
Functions & Relations
addr ∈ I (cid:1) NA
hostname ∈ H → N
Properties
Hosts and links both partition interfaces, i.e
(cid:1)p
i=1 Hi = I and Hi ∩ Hj = ∅ (∀i, j ∈ {1, 2, . . . , p} and i (cid:8)= j)
(cid:1)q
i=1 Li = I and Li ∩ Lj = ∅ (∀i, j ∈ {1, 2, . . . , q} and i (cid:8)= j)
Comments
A hub is a type of link, for example.
See ﬁgure 4 for a network example. Interfaces are dots, hosts are circles and links
are lines between interfaces.
Hosts should uniquely be identiﬁed by their host name, however two distinct hosts
can have the same host name, thus hostname is not a bijection.
Fig. 3. M2D2 IS topology model
2.2
Information System’s Characteristics
Modeling information systems (IS) is a diﬃcult task because IS are increasingly
complex and dynamic. Alert correlation must take into account information
system speciﬁcities. As an example, alert correlation requires evaluating the
success probability of an attack, which can be achieved by comparing the target
conﬁguration with the vulnerability’s known prerequisites.
As mentioned earlier, an IS characteristics depends on both the topology
(network of hosts) and the products used.
Topology. The topology model is formally deﬁned in ﬁgure 3. We adopt the
TCP/IP networks topology formal model proposed by Vigna [7]. Vigna suggests
to model a network with an hypergraph. Nodes of the graph are the network
interfaces, edges are subsets of the interfaces set1. Edges are divided into two
kinds of components, hosts and links. From that physical network model, an IP
network is modeled with an injective function which maps interfaces with IP
addresses (addr).
1 in standard graphs, edges are nodes couples; in an hypergraph, edges are subsets of
the nodes
120
B. Morin et al.
Fig. 4. A sample network
In addition to Vigna’s model, M2D2 also includes other topological infor-
mation, such as the mapping between hosts and host names (hostname). This
information is useful for alert correlation purposes because IDS either give the
former or the latter depending on their data source. We also rely on the IANA
list for mapping services names to port numbers.
M2D2 information system model does not contain all relevant concepts yet.
Missing concepts (users and ﬁles for example) must be integrated inside M2D2
in the future in order to reach comprehensiveness.
From a practical point of view, some automated tools exist to build and
maintain the network topology and product database 2. Network topology can
also be manually built with graphical tools.
Products. Products are formally deﬁned in ﬁgure 5. In M2D2, a prod-
uct is simply a logical entity that is executed by a host. A product is
a quadruplet (vendor_id, product_id, version_id, type). vendor_id and
product_id respectively represent the vendor name (vendor) and the product
name (prodname). The version number (version) is problematical because there
is currently no canonical representation of software product versions, and version
notations are heterogenous (generally an alphanumeric string). That is why ver-
sion is a partial function. For alert correlation purposes, it is useful to compare
the version number of two products, for example to evaluate the vulnerability of
a host. There is currently no solution to this problem. The product set may be
p. The total or-
any set provided with a total order relation. We suggest to use N
der relation (<) is given in ﬁgure 5. Each product belongs to a class (prodtype)
which may be one of {OperatingSystem, xxxServer, LocalApp, other}, where
xxxServer stands for any server-like application, i.e an application which listens
to a port. xxx is to be replaced by a protocol name like http, ftp, snmp.
2 SNMP protocol
(http://www.ietf.org/rfc/rfc1157.txt), NetSaint