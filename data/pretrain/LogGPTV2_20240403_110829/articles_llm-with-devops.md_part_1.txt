探索软件开发新⼯序
LLM
赋能研发效能提升
Thoughtworks / & Phodal
谢保⻰ ⻩峰达（ ）
谢保⻰ ⻩峰达（Phodal ）
• 开坑，开到填不完的知名开源挖坑选⼿：https://github.com/phodal/
● Thoughtworks 专家级咨询师，Thoughtworks 中国区的
• AI 相关开源项⽬：ClickPrompt、ChatFlow、Unit Mesh、AutoDev
/DevOps CAC(China
⼯程效能 解决⽅案的负责⼈，
• AI 相关⽂章：《理解 Prompt》、《Prompt 编写模式》、《Prompt 即代码》、《AI 研发
Agile Coach) Exin DevOps Master
专业敏捷教练， 认
提效的正确姿势：开源 LLM + LoRA》、《上下⽂⼯程：基于 Github Copilot 的实时能⼒分
证讲师。
析与思考》、《⼤语⾔模型友好的 API》等。
● 拥有 15+ 年软件⼯程从业经验，⽬前主要聚焦于国内⾦
• 开源架构治理⼯具 ArchGuard 核⼼开发 & 架构师
DevOps
融客户的敏捷、 转型⼯作以及研发效能相关咨
• Thoughtworks 技术专家，开源有 Java 重构分析⼯具 Coca、Mooa 微前端框
询⼯作。对敏捷项⽬管理、研发效能度量与提升、⼤型
架、Ledge 平台等
企业组织转型等有丰富经验。
AIGC 从头开始构建
企业 投资策略
⻔
LLM
不同 协作⽅式的成本
槛
较
⾼
重新训练模型
微调开源模型
微调现有模型
Multimodal Prompting
⻔
Zero-shot Prompting
Dynamic Prompting
槛
较
低
Few-shot Prompting
Prompting ⼯程 Langchain 微调 重新训练或从头开始构建 Credit: Zichuan Xiong
⽬录
1.
研发效能提升遇到的挑战
应⽤
端到端应⽤（不包含专有模型）
2. LLM
在研发效能带来的新机遇
端到端应⽤
○ 梳理研发流程寻找突破点
⾯向最终⽤户的应⽤
（含专有模型） 闭源基础模型 专有模型 微调模型
○ 新机遇带来的新挑战
提供 API 的 构建全新的专有模型 ⾯向特定领域微调的模型
⼤规模预训练模型
3. LLM +
⼯序：探索与构建路径
开源基础模型 开源基础模型
带训练权重发布的模型 带训练权重发布的模型 ○ Discover 阶段：流程⼯程与 “语⾔” ⼯程
○ Define 阶段：数据⼯程与 Prompt ⼯程
○ Delivery 阶段：上下⽂⼯程与平台⼯程
云平台
在云部署模型中向开发⼈员公开的计算硬件
4.
总结与展望
○ LLM 重塑⼯具平台
专⽤硬件
○ LLM 对⼈才和组织结构的影响
针对模型训练和推理⼯作负载优化的加速器芯⽚
修改⾃： https://a16z.com/2023/01/19/who-owns-the-generative-ai-platform/
研发效能提升遇到的挑战
5
从极限编程到研发效能
——
什么变了？什么没有变？ ⼯具变的成熟，思想与内核的实践没有变
1996 2020
2009~2010
极限编程 研发效能
DevOps
和持续交付
《Adapting Agile and DevOps Principles for Business Agility》
6
容器化
DevOps
⼈
才 经典⽅法
培
养
成
本
⾼
局限性
码
代
洁
整
传统的⼯程实践依赖于⼈能⼒和意愿，提升
⾃动化测试
个⼈能⼒是⼀个漫⻓的过程且难以标准化。
计
设
型
模
域
领
Review
Code
etc. e t c .
如果重写⽐重构快？
Martin Folwer
Thoughtworks ⾸席科学家，著有《重
构：改善既有代码的设计》《分析模
式：可复⽤的对象模型》《领域特定
语⾔》《企业应⽤架构模式》等经典
著作
8
LLM
在研发效能
带来的新机遇
9
SDLC Co-piloting with AI
基础模型与⼈⼯智能⽣产⼒⼯具正在重塑技术⼈员
基础模型
的⼯作⽅式。
Research
现在，类似于 ChatGPT 和 Microsoft Copilot 这样的⼈⼯
开源
智能突破正在彻底改变软件⾏业。 Marketing
运
营
基于⼈⼯智能的⼯具与基础⼤语⾔模型可以增强软件开发 Customer
Support
在设计、需求、测试、发布和运维等各个环节中的能⼒，
提⾼质量和效率。
Operations
交
Observability
Ideation
产
付
品
和 Host
设
Prototype 运
计
维
Research
CI/CD
闭源
Design
IDE
需
Facilitation
求
开
Commit
分
发
Documentation
析 Copilots
Collaboration
Documentation
梳理研发流程寻找突破点
需要拆到⾜够⼩的⼯序，才能看到明显的效果
产品设计 架构设计 开发
产品设计 特性设计 开发计划 建模 架构设计 API 设计 详细设计 编码 编码后
⽤户调研 功能细分 验收条件 事件⻛暴 时序图设计 API 定义 代码设计 代码⽣成 代码检视
产品创新 UX Design 优化级 领域模式 组件图设计 单元测试⽣成 提交信息
产品定义 ⾮功能需求 迭代计划 限界上下⽂ 设计模式
原型 发布计划 ⽂档
⾥程碑设计
运维 交付 测试
测试⽤例
Monitor 发布 部署 缺陷分析 ⾃动化测试
设计
⽇志分析 发布⽂档 部署脚本⽣成 根因分析 ⾃动化测试代码⽣成 测试⽤例⽣成
客户⽀持 更新⽂档 缺陷分析
客户情绪分析 缺陷⽂档
ChatGPT + Copilot
端到端使⽤评估
研究⽬的 ChatGPT + Copilot 在企业应⽤中，从需求、编码、测试端到端的辅助能⼒和提效作⽤评估
研究过程 研究结论
辅助能⼒评估：
1 : Thoughtworks OKR
第 步：选择⼀个真实的项⽬需求 ⼯具
整体提升 20%~30% 效率
• 其中重复性⼯作，如需求格式、代码编写、测试
2 ChatGPT
第 步：使⽤ 来完成领域术语定义和竞品分析启发，
⽤例、单元测试提升较为明显
MVP
再到 特性设计启发
L1 <10% L2 10-30%
特性分析 架构设计 代码实现
3 ChatGPT
第 步：使⽤ 来完成特性的需求分析，展示可视化的⽤户
旅程、功能需求拆分及格式化编写、验收标准定义
特性设计 功能拆分 定义AC 架构设计 领域模型 API接⼝ 详细设计 编写代码 编码后