如果在支持中断驱动且可以修改一个中断请求的 smp_affinity 系统中设置硬件，那么特定的处理
器处理一个中断请求的决策就是硬件级别，它不会受内核的干扰。关于中断驱动，详情请见 ＜第 6 章
网络＞。
3.3.8. 使使用用 Tuna 配配置置 CPU、、线线程程和和中中断断关关联联
Tuna 能够控制 CPU、线程及中断关联，并能给其所能控制的每类实体提供大量操作。完整的 Tuna 功能列
表，请参见 ＜第 A.2 节 “Tuna”＞。
要从一个或多个特定的 CPU 中移除所有线程，请运行如下命令，使用想要隔离的 CPU 数量来替换 CPUs。
# tuna --cpus CPUs --isolate
要在可运行特定线程的 CPU 列表中加入一个 CPU，请运行如下命令，使用想要加入的 CPU 数量来替换
CPUs。
# tuna --cpus CPUs --include
18
第⁠第 3 章章 CPU
要将一个中断请求移动至特定的 CPU，请运行如下命令，用 CPU 数量替换 CPU，用想要移动且使用逗号分
隔的中断请求列表替换 IRQs。
# tuna --irqs IRQs --cpus CPU --move
此外，用户可以使用如下命令来找到所有 sfc1* 模式的中断请求。
# tuna -q sfc1* -c7 -m -x
要改变一个线程的策略和优先级，请运行如下命令，使用想要改变的线程替换 thread，使用需要的线程运行策
略名称替换 policy，用从 0（最低优先级）至 99（最高优先级）间的一个整数替换 level。
# tuna --threads thread --priority policy:level
19
红红帽帽企企业业版版 Linux 7 性性能能调调节节指指南南
第第 4 章章 内内存存
本章概述了红帽企业版 Linux 7 的内存管理功能。＜第 4.1 节 “注意事项”＞ 探讨了与内存相关的会影响性能
的因素。＜第 4.2 节 “监控及诊断性能问题”＞ 教您如何使用红帽企业版 Linux 7 的工具来诊断与内存使用情
况或配置细节相关的性能问题。＜第 4.3 节 “配置工具”＞ 探讨了可以使用的工具和策略，以此解决红帽企业
版 Linux 7 中与内存相关的性能问题。
4.1. 注注意意事事项项
对于适中的工作负载，红帽企业版 Linux 7 会默认优化。如果用户的应用程序或用例需要大量的内存，那么改
变系统处理虚拟内存可以提高应用程序的性能。
4.1.1. 页页面面大大小小
物理内存管理区块称为页面。每一个页面的物理位置都映射到一个虚拟位置以便处理器能够访问内存。这种映
射存储于一个叫做页面表的数据结构中。
默认情况下，一个页面大约有 4 KB。由于页面的默认大小非常小，因此用户需要很多页面来管理大量的内
存。但是，页面表只能存储有限的地址映射，增加其存储地址映射的数量既昂贵又困难，因为要考虑到将性能
等级保持在内存需求的范围内。
红帽企业版 Linux 通过静态大型分页来给每个页面管理大内存的能力。静态大型分页可以配置到 1 GB 大小。
但很难对其进行手动管理，必须在启动时就分配好。
透明大型分页很大程度上是之余静态大型页面的一个自动选择。透明大型页面大小为 2 MB 且默认启动。它们
有时会干扰对延迟敏感的应用程序，因此常常在延迟严重时被禁用。
配置大页面以提高应用程序性能，详情请见 ＜第 4.3.1 节 “配置大页面”＞。
4.1.2. 转转换换后后背背缓缓冲冲区区大大小小
从页面表中读取地址映射很耗时且资源很宝贵，因此 Linux 操作系统提供最近使用地址的缓存：转换后背缓冲
区（TLB）。但默认的 TLB 只能缓存一定量的地址映射。如果需要的地址映射不在 TLB 中（即，TLB
missed），系统仍然需要读取页面表以决定物理到虚拟的地址映射。
由于应用程序内存需求与用来缓存地址映射的页面大小之间的关系，较于对内存需求小的应用程序来说，对内
存需求大的应用程序更容易受到 TLB 缺失造成的性能下降问题。因此无论何时，避免 TLB 缺失很重要。
红帽企业版 Linux 提供大型转换后背缓冲区 （大型 TLB），可以将内存分为大片段进行管理。这使大量的地
址映射能同时进行缓存，以此降低 TLB 缺失的可能性，并提高需要大内存的应用程序的性能。
配置大型 TLB，详情请见 ＜第 4.3.1 节 “配置大页面”＞。
4.2. 监监控控及及诊诊断断性性能能问问题题
红帽企业版 Linux 7 提供大量有用的工具来监控系统性能并诊断与系统内存相关的性能问题。本章概述了可用
的工具，并举例说明如何使用它们来监控和诊断与内存相关的性能问题。
4.2.1. 使使用用 vmstat 监监控控内内存存使使用用量量
Vmstat 由 procps-ng 数据包提供，输出用户系统进程、内存、网页、字块输入/输出、中断以及 CPU 活动等
的报告。这是在机子最后一次启动或上一个报告之后提供的关于这些活动平均数的即时报告。
以下指令显示了各种事件计数和内存统计信息列表。
20
第⁠第 4 章章 内内存存
$ vmstat -s
使用 vmstat 的方法，详情请见 ＜第 A.9 节 “vmstat”＞ 或手册页：
$ man vmstat
4.2.2. 用用 Valgrind 分分析析应应用用程程序序的的内内存存使使用用量量
Valgrind 是一个为用户提供空间二进制文件测量方法的框架。它包含大量的工具来概述和分析程序性能。本
章列出的 valgrind 工具能帮助用户检测内存错误，例如未初始化的内存使用和不适当的内存分配及解除分
配。
要使用 valgrind 或其工具，请安装 valgrind 数据包：
# yum install valgrind
4.2.2.1. 使使用用 Memcheck 分分析析内内存存使使用用量量
Memcheck 是默认的 valgrind 工具。它检测并报告大量难以检测和诊断到的内存错误，例如：
不应发生的内存访问
使用未定义或未初始化的值
不正确的释放堆内存
指示字重叠
内存泄露
注注意意
Memcheck 只能报告这些错误，但并不能阻止它们发生。如果程序以通常会引起段错误的方式来访问
内存的话，段错误仍然会发生。但memcheck 会在发生错误之前立刻记录一条信息。
由于 memcheck 使用测量工具，通过 memcheck 执行的应用程序会比平常运行起来慢 10-30 倍。
要在应用程序上运行 memcheck， 请执行以下指令：
# valgrind --tool=memcheck application
用户也可以使用以下选项来使 memcheck 的输出集中在特定的问题类型上。
⁠--leak-check
在应用程序结束运行后，memcheck 会搜索内存泄露问题。默认值为 --leak-
check=summary，在找到内存泄露时会显示其数量。用户可以指定 --leak-check=yes 或 --
leak-check=full 来输出每个泄露问题的详情。禁用请设定 --leak-check=no。
⁠--undef-value-errors
默认值为 --undef-value-errors=yes，使用未定义的值时会报错。用户还可设定 --
undef-value-errors=no ，这将禁用此报告并略微提高 Memcheck 的速度。
21
红红帽帽企企业业版版 Linux 7 性性能能调调节节指指南南
⁠--ignore-ranges
在查看可寻址内存时指定一个或多个 memcheck 应忽略的范围，例如， --ignore-
ranges=0xPP-0xQQ,0xRR-0xSS。
要查看 memcheck 选项的完整列表，请参见 /usr/share/doc/valgrind-
version/valgrind_manual.pdf 中的文档。
4.2.2.2. 使使用用 Cachegrind 分分析析缓缓存存使使用用量量
Cachegrind 会模拟应用程序与系统缓存层次结构和分支预测器间的交互作用。它会追踪模拟的第一级指令
和数据缓存使用情况，以此检测出该级缓存与代码间不良的交互作用。它也会追踪最后一级缓存（第二或第三
极）以便追踪内存访问。这样的情况下，使用 cachegrind 的应用程序运行起来会比通常慢 20-100 倍。
Cachegrind 会收集应用程序执行期间的统计数据，并且将概要输出至操作台。要在应用程序中运行
cachegrind ，请执行以下指令：
# valgrind --tool=cachegrind application
用户也可以使用以下选项来让 cachegrind 的输出集中在一个特定的问题上。
⁠--I1
指定大小、关联性以及第一级指令缓存行大小的方法如下：--
I1=size,associativity,line_size。
⁠--D1
指定大小、关联性以及第一级数据缓存行大小的方法如下：--
D1=size,associativity,line_size.。
⁠--LL
指定大小、关联性以及最后一级缓存行大小的方法如下：--
LL=size,associativity,line_size。
⁠--cache-sim
启用或禁用缓存访问和缺失数量的集合是默认启用的（--cache-sim=yes）。禁用此集合以及 -
-branch-sim 来使 cachegrind 不收集信息。
⁠--branch-sim
启用或禁用分支指令及错误预测数量的集合是默认启用的（--branch-sim=yes）。禁用此集合
以及 --cache-sim 来使 cachegrind 不收集信息。
Cachegrind 写入详细的分析信息至每个进程 cachegrind.out.pid 文件，其中， pid 是进
程标识符。这一详细信息可以使用 cg_annotate 工具进行进一步处理，方法如下：
# cg_annotate cachegrind.out.pid
Cachegrind 也提供 cg_diff 工具，可以更为容易地在代码变化前后对程序性能进行记录。要对比输出文
件，请执行以下命令：先用原始配置输出文件替代，再用后续配置输出文件替代。
# cg_diff first second
生成的输出文件可以使用 cg_annotate 工具来查看更多详情。
22
第⁠第 4 章章 内内存存
要查看 cachegrind 选项的完整列表，请参见 /usr/share/doc/valgrind-
version/valgrind_manual.pdf 中的文档。
4.2.2.3. 使使用用 Massif 分分析析堆堆栈栈空空间间
Massif 测量特定应用程序的堆空间。它测量可用空间和额外用来记录和调准的空间。massif 有助于用户了
解减少应用程序内存使用的方法，以便提高运行速度，减少应用程序耗尽系统交换空间的可能性。使用
massif 执行的应用程序运行起来比平常通常慢 20 倍左右。
要在一个应用程序中运行 massif，请执行如下命令：
# valgrind --tool=massif application
用户也可以使用以下选项来将 massif 的输出集中在一个特定的问题上。
⁠--heap
设定 massif 是否分析堆。默认值为 --heap=yes。要禁用堆分析可设置为 --heap=no。
⁠--heap-admin
堆分析启用时要设定每个用于管理的数据块字节数。默认值为 8 字节。
⁠--stacks
设定 massif 是否分析堆。默认值为 --stack=no 是由于堆分析会大大减缓 massif。将这一选
项设置为 --stack=yes 来启用堆分析。要注意的是，massif 会假设主要的堆始于零值，这是为
了更好地显示与所分析的应用程序相关的堆尺寸的变化。
⁠--time-unit
设定 massif 收集分析数据的间隔。默认值为 i（执行指令）。用户也可以指定 ms（毫秒或实时）
和 B（分配或收回的堆栈字节数）。检查分配的字节数有利于短期运行的应用程序及测试，因为对
于不同的硬件来说，它是最具重复性的。
Massif 将分析数据输出至 massif.out.pid 文件中，该文件中的 pid 是指定应用程序的进程标识
符。ms_print 工具将此分析数据绘成图表，以此显示执行应用程序的内存消耗，也包括峰值内存分配点负责
分配的站点详情。要绘制 massif.out.pid 文件中的数据，请执行以下指令：
# ms_print massif.out.pid
要查看 Massif 选项的完整列表，请参见 /usr/share/doc/valgrind-
version/valgrind_manual.pdf 中的文档。
4.3. 配配置置工工具具
内存使用量往往是通过设置一个或多个内核的参数值来进行配置的。这些参数可以通过改变在 /proc 文件系统
中的文件内容来进行暂时设置，或是通过设置系统核心参数工具来进行永久设置，此工具由 procps-ng 数据包
提供。
例如，要将 overcommit_memory 参数暂时设置为 1，请运行以下指令：