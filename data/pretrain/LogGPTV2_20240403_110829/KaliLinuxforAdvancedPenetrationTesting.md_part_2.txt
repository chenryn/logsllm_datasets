Escalating user privileges on a compromised host 139
Replaying authentication tokens using incognito 140
Manipulating access credentials with Windows Credential Editor 142
Escalating from Administrator to SYSTEM 143
Accessing new accounts with horizontal escalation 143
Covering your tracks 144
Summary 147
Chapter 6: Post Exploit – Persistence 149
Compromising the existing system and application files
for remote access 150
Remotely enabling the Telnet service 150
Remotely enabling Windows Terminal Services 152
Remotely enabling Virtual Network Computing 154
Using persistent agents 155
Employing Netcat as a persistent agent 155
Maintaining persistence with the Metasploit Framework 159
Using the metsvc script 159
Using the persistence script 161
Creating a standalone persistent agent with Metasploit 163
Redirecting ports to bypass network controls 165
Example 1 – simple port redirection 166
Example 2 – bidirectional port redirection 167
Summary 168
Part 2: The Delivery Phase
Chapter 7: Physical Attacks and Social Engineering 171
Social Engineering Toolkit 172
Spear Phishing Attack 176
Using a website attack vector – Java Applet Attack Method 181
Using a website attack vector – Credential Harvester Attack Method 186
Using a website attack vector – Tabnabbing Attack Method 188
Using a website attack vector - Multi-Attack Web Method 190
[ iii ]
Table of Contents
Using the PowerShell alphanumeric shellcode injection attack 190
Hiding executables and obfuscating the attacker's URL 192
Escalating an attack using DNS redirection 194
Physical access and hostile devices 197
Raspberry Pi attack vectors 200
Summary 202
Chapter 8: Exploiting Wireless Communications 203
Configuring Kali for wireless attacks 204
Wireless reconnaissance 204
Kismet 207
Bypassing a Hidden Service Set Identifier 209
Bypassing the MAC address authentication 211
Compromising a WEP encryption 213
Attacking WPA and WPA2 219
Brute-force attacks 219
Attacking wireless routers with Reaver 223
Cloning an access point 224
Denial-of-service attacks 225
Summary 227
Chapter 9: Reconnaissance and Exploitation
of Web-based Applications 229
Conducting reconnaissance of websites 230
Vulnerability scanners 236
Extending the functionality of traditional vulnerability scanners 237
Extending the functionality of web browsers 238
Web-service-specific vulnerability scanners 240
Testing security with client-side proxies 243
Server exploits 250
Application-specific attacks 251
Brute-forcing access credentials 251
Injection attacks against databases 252
Maintaining access with web backdoors 254
Summary 256
Chapter 10: Exploiting Remote Access Communications 257
Exploiting operating system communication protocols 258
Compromising Remote Desktop Protocol 258
Compromising Secure Shell 262
Exploiting third-party remote access applications 264
[ iv ]
Table of Contents
Attacking Secure Sockets Layer 266
Configuring Kali for SSLv2 scanning 267
Reconnaissance of SSL connections 269
Using sslstrip to conduct a man-in-the-middle attack 275
Denial-of-service attacks against SSL 277
Attacking an IPSec Virtual Private Network 278
Scanning for VPN gateways 279
Fingerprinting the VPN gateway 280
Capturing pre-shared keys 282
Performing offline PSK cracking 282
Identifying default user accounts 283
Summary 283
Chapter 11: Client-side Exploitation 285
Attacking a system using hostile scripts 286
Conducting attacks using VBScript 286
Attacking systems using Windows PowerShell 289
The Cross-Site Scripting Framework 291
The Brower Exploitation Framework – BeEF 299
Installing and configuring the Browser Exploitation Framework 300
A walkthrough of the BeEF browser 303
Integrating BeEF and Metasploit attacks 308
Using BeEF as a tunneling proxy 309
Summary 311
Appendix: Installing Kali Linux 313
Downloading Kali Linux 313
Basic Installation of Kali Linux 314
Installing Kali Linux to a virtual machine 315
Full disk encryption and nuking the master key 316
Setting up a test environment 321
Vulnerable operating systems and applications 322
Index 327
[ v ]
Preface
This book is dedicated to the use of Kali Linux in performing penetration tests
against networks. A penetration test simulates an attack against a network or
a system by a malicious outsider or insider. Unlike a vulnerability assessment,
penetration testing is designed to include the exploitation phase. Therefore, it proves
that the exploit is present, and that it is accompanied by the very real risk of being
compromised if not acted upon.
Throughout this book, we will refer to "penetration testers,"
"attackers," and "hackers" interchangeably as they use the same
techniques and tools to assess the security of networks and
data systems. The only difference between them is their end
objective—a secure data network, or a data breach.
Most testers and attackers follow an informal, open source, or proprietary-defined
testing methodology that guides the testing process. There are certain advantages of
following a methodology:
• A methodology identifies parts of the testing process that can be automated
(for example, a tester may always use a ping sweep to identify potential
targets; therefore, this can be scripted), allowing the tester to focus on
creative techniques to find and exploit vulnerabilities
• The results are repeatable, allowing them to be compared over time or to
cross-validate one tester's results against another, or to determine how the
security of the target has improved (or not!) over time
• A defined methodology is predictable in terms of time and personnel
requirements, allowing costs to be controlled and minimized
• A methodology that has been preapproved by the client, protects the tester
against liability in the event there is any damage to the network or data
Preface
Formal methodologies include the following well-known examples:
• Kevin Orrey's penetration testing framework: This methodology walks
the tester through the sequenced steps of a penetration test, providing
hyperlinks to tools and relevant commands. More information can be found
at www.vulnerabilityassessment.co.uk.
• Information Systems Security Assessment Framework (ISSAF):
This comprehensive guide aims to be the single source for testing a network.
More information on this can be found at www.oissg.org.
• NIST SP 800-115, technical guide to information security testing and
assessment: Written in 2008, the four-step methodology is somewhat
outdated. However, it does provide a good overview of the basic steps in
penetration testing. You can get more information at http://csrc.nist.
gov/publications/nistpubs/800-115/SP800-115.pdf.
• Open Source Security Testing Methodology Manual (OSSTMM):
This is one of the older methodologies, and the latest version attempts to
quantify identified risks. More details can be found at www.osstmm.org.
• Open Web Application Security Project (OWASP): This is focused on the
10 most common vulnerabilities in web-based applications. More
information on this can be found at www.owasp.org.
• Penetration Testing Execution Standard (PTES): Actively maintained,
this methodology is complete and accurately reflects on the activities
of a malicious person. You can get more information at
www.pentest-standard.org.
• Offensive (Web) Testing Framework (OWTF): Introduced in 2012, this is a
very promising direction in combining the OWASP approach with the more
complete and rigorous PTES methodology. More details can be found at
https://github.com/7a/owtf.
Unfortunately, the use of a structured methodology can introduce weaknesses into
the testing process:
• Methodologies rarely consider why a penetration test is being undertaken, or
which data is critical to the business and needs to be protected. In the absence
of this vital first step, penetration tests lose focus.
• Many penetration testers are reluctant to follow a defined methodology,
fearing that it will hinder their creativity in exploiting a network.
[ 2 ]
Preface
• Penetration testing fails to reflect the actual activities of a malicious attacker.
Frequently, the client wants to see if you can gain administrative access on
a particular system ("Can you root the box?"). However, the attacker may
be focused on copying critical data in a manner that does not require root
access, or cause a denial of service.
To address the limitations inherent in formal testing methodologies, they must
be integrated in a framework that views the network from the perspective of an
attacker, the "kill chain."
The "Kill Chain" approach to
penetration testing
In 2009, Mike Cloppert of Lockheed Martin CERT introduced the concept that is
now known as the "attacker kill chain." This includes the steps taken by an adversary
when they are attacking a network. It does not always proceed in a linear flow as
some steps may occur in parallel. Multiple attacks may be launched over time at the
same target, and overlapping stages may occur at the same time.
In this book, we have modified the Cloppert's kill chain to more accurately reflect
on how attackers apply these steps when exploiting networks and data services.
The following diagram shows a typical kill chain of an attacker:
Reconnaissance Post-exploit
(cid:31) Passive (indirect) Exploit (cid:31) Action on the
(cid:31) Active (direct) objective
(cid:31) Persistence
Delivery phase
[ 3 ]
Preface
A typical kill chain of an attacker can be described as follows:
• Reconnaissance phase – The adage, "reconnaissance time is never wasted
time", adopted by most military organizations acknowledges that it is better
to learn as much as possible about an enemy before engaging them. For the
same reason, attackers will conduct extensive reconnaissance of a target
before attacking. In fact, it is estimated that at least 70 percent of the "work
effort" of a penetration test or an attack is spent conducting reconnaissance!
Generally, they will employ two types of reconnaissance:
° Passive reconnaissance – This does not directly interact with the
target in a hostile manner. For example, the attacker will review
the publicly available website(s), assess online media (especially
social media sites), and attempt to determine the "attack surface"
of the target.
One particular task will be to generate a list of past and current
employee names. These names will form the basis of attempts
to brute force, or guessing passwords. They will also be used
in social engineering attacks.
This type of reconnaissance is difficult, if not impossible,
to distinguish from the behavior of regular users.
° Active reconnaissance – This can be detected by the target but,
it can be difficult to distinguish most online organizations' faces
from the regular backgrounds.
Activities occurring during active reconnaissance include
physical visits to target premises, port scanning, and remote
vulnerability scanning.
• The delivery phase – Delivery is the selection and development of
the weapon that will be used to complete the exploit during the attack.
The exact weapon chosen will depend on the attacker's intent as well
as the route of delivery (for example, across the network, via wireless,
or through a web-based service). The impact of the delivery phase will
be examined in the second half of this book.
[ 4 ]
Preface
• The exploit or compromise phase – This is the point when a particular
exploit is successfully applied, allowing attackers to reach their objective.
The compromise may have occurred in a single phase (for example, a known
operating system vulnerability was exploited using a buffer overflow),
or it may have been a multiphase compromise (for example, an attacker
physically accessed premises to steal a corporate phone book. The names
were used to create lists for brute force attacks against a portal logon. In
addition, e-mails were sent to all employees to click on an embedded link to
download a crafted PDF file that compromised their computers.). Multiphase
attacks are the norm when a malicious attacker targets a specific enterprise.
• Post exploit: action on the objective – This is frequently, and incorrectly,
referred to as the "exfiltration phase" because there is a focus on perceiving
attacks solely as a route to steal sensitive data (such as login information,
personal information, and financial information); it is common for an attacker
to have a different objective. For example, a business may wish to cause a
denial of service in their competitor's network to drive customers to their
own website. Therefore, this phase must focus on the many possible actions
of an attacker.
One of the most common exploit activity occurs when, the attackers
attempt to improve their access privileges to the highest possible level
(vertical escalation), and to compromise as many accounts as possible
(horizontal escalation).
• Post exploit: persistence – If there is value in compromising a network or
system, then that value can likely be increased if there is persistent access.
This allows attackers to maintain communications with a compromised
system. From a defender's point of view, this is the part of the kill chain that
is usually the easiest to detect.
Kill chains are metamodels of an attacker's behavior when they attempt to compromise
a network or a particular data system. As a metamodel, it can incorporate any
proprietary or commercial penetration testing methodology. Unlike the methodologies,
however, it ensures a strategic-level focus on how an attacker approaches the network.
This focus on the attacker's activities will guide the layout and content of this book.
[ 5 ]
Preface
What this book covers
This book is divided into two parts. In Part 1, The Attacker's Kill Chain, we will follow
the steps of a kill chain, analyzing each phase in detail. In Part 2, The Delivery Phase,
we will focus on the delivery phase and some of the available methodologies to
understand how attacks take place, and how this knowledge can be used to secure
a network.
Chapter 1, Starting with Kali Linux, introduces the reader to the fundamentals of Kali
Linux, and its optimal configuration to support penetration testing.
Chapter 2, Identifying the Target – Passive Reconnaissance, provides a background on
how to gather information about a target using publicly available sources, and the
tools that can simplify the reconnaissance and information management.
Chapter 3, Active Reconnaissance and Vulnerability Scanning, introduces the reader to
stealthy approaches that can be used to gain information about the target, especially
the information that identifies vulnerabilities, which could be exploited.
Chapter 4, Exploit, demonstrates the methodologies that can be used to find and
execute exploits that allow a system to be compromised by an attacker.
Chapter 5, Post Exploit – Action on the Objective, describes how attackers can
escalate their privileges to achieve their objective for compromising the system,
including theft of data, altering data, launching additional attacks, or creating a
denial of service.
Chapter 6, Post Exploit – Persistence, provides a background on how to configure
a compromised system so that the attacker can return at will and continue
post-exploit activities.
Chapter 7, Physical Attacks and Social Engineering, demonstrates why being able to
physically access a system or interact with the humans who manage it provides
the most successful route to exploitation.
Chapter 8, Exploiting Wireless Communications, demonstrates how to take advantage
of common wireless connections to access data networks and isolated systems.
Chapter 9, Reconnaissance and Exploitation of Web-based Applications, provides a
brief overview of one of the most complex delivery phases to secure: web-based
applications that are exposed to the public Internet.
[ 6 ]
Preface
Chapter 10, Exploiting Remote Access Communications, provides an increasingly
important route into systems as more and more organizations adopt distributed
and work-from-home models that rely on remote access communications that are
themselves vulnerable to attack.
Chapter 11, Client-side Exploitation, focuses on attacks against applications on the
end-user's systems, which are frequently not protected to the same degree as the
organization's primary network.
Appendix, Installing Kali Linux, provides an overview of how to install Kali Linux,
and how to employ a whole-disk encryption to avoid an intercept of confidential
testing data.
What you need for this book
In order to practice the material presented in this book, you will need virtualization
tools such as VMware or VirtualBox.
You will need to download and configure the Kali Linux operating system and its
suite of tools. To ensure that it is up-to-date and that you have all of the tools, you
will need access to an Internet connection.
Sadly, not all of the tools on the Kali Linux system will be addressed since there are
too many of them. The focus of this book is not to inundate the reader with all of
the tools and options, but to provide an approach for testing that will give them the
opportunity to learn and incorporate new tools as their experiences and knowledge
change over time.
Although most of the examples from this book focus on Microsoft Windows, the
methodology and most of the tools are transferrable to other operating systems
such as Linux and the other flavors of Unix.
Finally, this book applies Kali to complete the attacker's kill chain against target
systems. You will need a target operating system. Many of the examples in the book
use Microsoft Windows XP. Although it is deprecated as of April 2014, it provides
a "baseline" of standard behavior for many of the tools. If you know how to apply
the methodology to one operating system, you can apply it to more recent operating
systems such as Windows 7 and Windows 8.
[ 7 ]