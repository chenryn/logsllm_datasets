If 𝑁sent ≠ 𝑁recv + 1 then
Return ⊥
Return 𝑚sent
Figure 23: Support function SUPP for strict in-order delivery.
𝑁op ← 𝑁op + 1
If label(cid:48) = label then
Return (𝑁op, 𝑚)
(op = sent ∧ label(cid:48) ≠⊥) then
If (op = recv ∧ 𝑚 ≠⊥)∨
Return (𝑁op,⊥)
MTP-ME(F) = 0 for any F making
sent by user u, so we have Advupref
at most 296 queries, and otherwise there exists an adversary
F such that Advupref
MTP-ME(F) = 1. Note that MTP-ME always has
payloads larger than 256 bits. The MTProto implementation
of message encoding we analysed was not UPREF-secure as
it allowed repeated msg_id (cf. Section IV-B2).
Game Gupref
ME,F
win ← false
(stME,I , stME,R)
←$ ME.Init()
𝑋I ← 𝑋R ← ∅
F Send; Return win
Figure 24: Preﬁx uniqueness of message encoding scheme ME.
Send(u, 𝑚, aux, 𝑟)
(stME,u, 𝑝) ← ME.Encode(stME,u, 𝑚, aux; 𝑟)
If | 𝑝| < 256 then return ⊥
𝑝0 ← 𝑝[0 : 256]
If 𝑝0 ∈ 𝑋u then win ← true
𝑋u ← 𝑋u ∪ {𝑝0} ; Return 𝑝
3) Encoding robustness of MTP-ME: We require that decoding
in MTP-ME should not affect its state in such a way that
would be visible in future encoded payloads, as deﬁned by
the security game in Fig. 25. The advantage of an adversary
D in breaking the ENCROB-security of a message encoding
ME,D ] −
scheme ME is deﬁned as Advencrob
1. This advantage is trivially zero both for MTP-ME and the
original MTProto message encoding scheme (modelled in the
full version). Note, however, that this property is incompatible
with stronger notions of resistance against reordering attacks
such as causality preservation.
(D) = 2 · Pr[Gencrob
ME
Game Gencrob
ME,D
𝑏 ←$ {0, 1} ; (stME,I , stME,R) ←$ ME.Init()
𝑏(cid:48) ←$ DSend,Recv ; Return 𝑏(cid:48) = 𝑏
Send(u, 𝑚, aux, 𝑟)
(stME,u, 𝑝) ← ME.Encode(stME,u, 𝑚, aux; 𝑟) ; Return 𝑝
Recv(u, 𝑝, aux)
If 𝑏 = 1 then (stME,u, 𝑚) ← ME.Decode(stME,u, 𝑝, aux)
Return ⊥
Figure 25: Encoding robustness of message encoding scheme
ME.
4) Combined security of MTP-SE and MTP-ME: We require
that decryption in MTP-SE with uniformly random keys has
unpredictable outputs with respect to MTP-ME, as deﬁned in
Fig. 26. The security game Gunpred
SE,ME,F in Fig. 26 gives adversary
F access to two oracles. For any user u ∈ {I, R} and
message key msg_key, oracle Ch decrypts a given ciphertext
𝑐se of deterministic symmetric encryption scheme SE under
a uniformly random key 𝑘 ∈ {0, 1}SE.kl, and then decodes
it using the given message encoding state stME of message
encoding scheme ME, returning no output. The adversary is
allowed to choose arbitrary values of 𝑐se and stME; it is allowed
to repeatedly query oracle Ch on inputs that contain the same
values for u, msg_key in order to reuse a ﬁxed, secret SE key 𝑘
with different choices of 𝑐se. Oracle Expose lets F learn the
SE key corresponding to the given u and msg_key; the table S
is then used to disallow the adversary from querying Ch with
this pair of u and msg_key values again. F wins if it can cause
ME.Decode to output a valid 𝑚 ≠ ⊥. Note that msg_key in
this game merely serves as a label for the tables, so we allow it
to be an arbitrary string msg_key ∈ {0, 1}∗. The advantage of
F in breaking the UNPRED-security of SE with respect to ME
SE,ME,F]. In the full version
is deﬁned as Advunpred
MTP-SE,MTP-ME(F) ≤ 𝑞Ch/264 for
of this work we show that Advunpred
any F making 𝑞Ch queries.
SE,ME (F) = Pr[Gunpred
Game Gunpred
SE,ME,F
win ← false ; F Expose,Ch ; Return win
Expose(u, msg_key)
S[u, msg_key] ← true ; Return T[u, msg_key]
Ch(u, msg_key, 𝑐se, stME, aux)
If ¬S[u, msg_key] then
// msg_key ∈ {0, 1}∗
// msg_key ∈ {0, 1}∗
If T[u, msg_key] =⊥ then T[u, msg_key] ←$ {0, 1}SE.kl
𝑘 ← T[u, msg_key] ; 𝑝 ← SE.Dec(𝑘, 𝑐se)
(stME, 𝑚) ← ME.Decode(stME, 𝑝, aux)
If 𝑚 ≠ ⊥ then win ← true
Return ⊥
Figure 26: Unpredictability of deterministic symmetric encryp-
tion scheme SE with respect to message encoding scheme ME.
D. Correctness of MTP-CH
We claim that our MTProto-based channel satisﬁes our
correctness deﬁnition. Consider any adversary F playing
in the correctness game Gcorr
CH,supp,F (Fig. 6) for channel
CH = MTP-CH (Fig. 12) and support function supp = SUPP
(Fig. 23). Due to the deﬁnition of SUPP, the Recv oracle in
game Gcorr
MTP-CH,SUPP,F rejects all CH ciphertexts that were not
previously returned by Send. The encryption and decryption
algorithms of channel MTP-CH rely in a modular way on
the message encoding scheme MTP-ME, deterministic function
families MTP-KDF, MTP-MAC, and deterministic symmetric
encryption scheme MTP-SE; the latter provides decryption
correctness, so any valid ciphertext processed by oracle
Recv correctly recovers the originally encrypted payload
𝑝. Thus we need to show that MTP-ME always recovers the
expected plaintext 𝑚 from payload 𝑝, meaning 𝑚 matches the
corresponding output of SUPP. This is implied by the EINT-
security of MTP-ME with respect to SUPP; we prove the latter
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
101
in the full version of this work for adversaries that make at
most 296 queries.22
E. IND-security of MTP-CH
Due to lack of space, here we provide only a very high-level
overview of how we prove IND-security of MTP-CH and a
theorem statement. We begin our IND-security reduction by
considering an arbitrary adversary DIND playing in the IND-
security game against channel CH = MTP-CH (i.e. Gind
CH,DIND
in Fig. 6), and we gradually change this game until we can
show that DIND can no longer win. To this end, we make three
key observations. (1) Recall that oracle Recv always returns
⊥, and the only functionality of this oracle is to update the
state of receiver’s channel by calling CH.Recv. We assume
that calls to CH.Recv never affect the ciphertexts that are
returned by future calls to CH.Send (more precisely, we use the
ENCROB property of ME that reasons about payloads rather
than ciphertexts). This allows us to completely disregard the
Recv oracle, making it immediately return ⊥ without calling
CH.Recv. (2) We use the UPRKPRF-security of MAC to show
that the ciphertexts returned by oracle Ch contain msg_key
values that look uniformly random and are independent of
each other. Roughly, this security notion requires that MAC
can only be evaluated on a set of inputs with unique preﬁxes.
To ensure this, we assume that the payloads produced by ME
meet this requirement (as formalised by the UPREF property
of ME). (3) In order to prove that oracle Ch does not leak
the challenge bit, it remains to show that ciphertexts returned
by Ch contain 𝑐se values that look uniformly random and
independent of each other. This follows from the OTIND$-
security of SE. We invoke the OTWIND-security of HASH to
show that auth_key_id does not leak any information about
the KDF keys; we then use the RKPRF-security of KDF to show
that the keys used for SE are uniformly random. Finally, we
use the birthday bound to argue that the uniformly random
values of msg_key are unlikely to collide, and hence the keys
used for SE are also one-time. Formally, we have:
Theorem 1. Let ME, HASH, MAC, KDF, 𝜙MAC, 𝜙KDF, SE be any
primitives that meet the requirements stated in Deﬁnition 5
of channel MTP-CH. Let CH = MTP-CH[ME, HASH, MAC, KDF,
𝜙MAC, 𝜙KDF, SE]. Let DIND be any adversary against the IND-
security of CH, making 𝑞Ch queries to its Ch oracle. Then
there exist adversaries DOTWIND, DRKPRF, DENCROB, FUPREF,
DUPRKPRF, DOTIND$ such that
Advotwind
Advind
+ Advencrob
+ Advuprkprf
MAC, 𝜙MAC
+ Advotind$
HASH (DOTWIND) + Advrkprf
(FUPREF)
(DENCROB) + Advupref
ME
ME
(DOTIND$)(cid:17)
(DUPRKPRF) + 𝑞Ch · (𝑞Ch − 1)
2 · 2MAC.ol
CH (DIND) ≤ 2 ·(cid:16)
(DRKPRF)
KDF, 𝜙KDF
.
SE
The proof can be found in the full version of this work.
22There are other ways to handle counters which could imply correctness
for unbounded adversaries – MTP-ME wraps its counters to stay close to the
actual MTProto implementations.
F. INT-security of MTP-CH
Due to lack of space, here we provide only a very high-level
overview of how we prove integrity of MTP-CH and a theorem
statement. Details are in the full version. The ﬁrst half of
our integrity proof shows that it is hard to forge ciphertexts;
in order to justify this, we rely on security properties of the
cryptographic primitives that are used to build the channel
MTP-CH (i.e. HASH, KDF, SE, and MAC). Once ciphertext
forgery is ruled out, we are guaranteed that MTP-CH broadly
matches an intuition of an authenticated channel: it prevents
an attacker from modifying or creating its own ciphertexts but
still allows it to intercept and subsequently drop, reorder or
replay honestly produced ciphertexts. So it remains to show
that the message encoding scheme ME appropriately resolves
all of the possible adversarial interaction with an authenticated
channel; formally, we require that it behaves according to the
requirements that are speciﬁed by some support function supp.
Our main result is then:
Theorem 2. Let session_id ∈ {0, 1}64, pb ∈ N, and bl = 128.
Let ME = MTP-ME[session_id, pb, bl] be the message encoding
scheme as deﬁned in Deﬁnition 6. Let SE = MTP-SE be the
deterministic symmetric encryption scheme as deﬁned in Deﬁn-
ition 10. Let HASH, MAC, KDF, 𝜙MAC, 𝜙KDF be any primitives
that, together with ME and SE, meet the requirements stated in
Deﬁnition 5 of channel MTP-CH. Let CH = MTP-CH[ME, HASH,
MAC, KDF, 𝜙MAC, 𝜙KDF, SE]. Let supp = SUPP be the support
function as deﬁned in Fig. 23. Let FINT be any adversary
against the INT-security of CH with respect to supp. Then
there exist adversaries DOTWIND, DRKPRF, FUNPRED, FRKCR,
FEINT such that
Advint
CH,supp(FINT) ≤ Advotwind
+ Advunpred
+ Adveint
HASH (DOTWIND) + Advrkprf
SE,ME (FUNPRED) + Advrkcr
ME,supp(FEINT).
(DRKPRF)
(FRKCR)
MAC, 𝜙MAC
KDF, 𝜙KDF
The proof can be found in the full version of this work.
G. Instantiation and Interpretation
We are now ready to combine the theorems from the previous
two sections with the notions deﬁned in Section V-A and
Section V-C and the proofs in the full version of this work. This
is meant to allow interpretation of our main results: qualitatively
(what security assumptions are made) and quantitatively (what
security level is achieved). Note that in both of the following
corollaries, the adversary is limited to making 296 queries.
This is due to the wrapping of counters in MTP-ME, since
beyond this limit the advantage in breaking UPREF-security
and EINT-security of MTP-ME becomes 1.
Corollary 1. Let session_id ∈ {0, 1}64, pb ∈ N and bl = 128.
Let ME = MTP-ME[session_id, pb, bl], MTP-HASH, MTP-MAC,
MTP-KDF, 𝜙MAC, 𝜙KDF, MTP-SE be the primitives of MTProto
deﬁned in Section IV-D. Let CH = MTP-CH[ME, MTP-HASH,
MTP-MAC, MTP-KDF, 𝜙MAC, 𝜙KDF, MTP-SE]. Let 𝜙SHACAL-2 be
the related-key-deriving function deﬁned in Fig. 20. Let ℎ256
be the SHA-256 compression function, and let H be the corres-
ponding function family with H.Ev = ℎ256, H.kl = H.ol = 256
and H.In = {0, 1}512. Let ℓ ∈ N. Let DIND be any adversary
against the IND-security of CH, making 𝑞Ch ≤ 296 queries
to its Ch oracle, each query made for a message of length
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
102
at most ℓ ≤ 227 bits.23 Then there exist adversaries Dshacal
OTPRF,
DLRKPRF, DHRKPRF, Dcompr
Advind
OTPRF, DOTIND$ such that