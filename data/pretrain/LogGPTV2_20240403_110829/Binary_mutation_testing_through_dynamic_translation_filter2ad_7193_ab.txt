Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:31 UTC from IEEE Xplore.  Restrictions apply. 
mutations for creating a set of mutants from the original
binary.
Figure 1. Binary mutation testing ﬂow.
In the mutation testing step binary mutants are created
and tested by applying the mutation table entries separately.
For each mutant, its output according to the given set of
test cases is compared with the output of a golden run, i.e.,
a run of the original binary being carried out in advance.
Finally, the evaluation step annotates the CFG with mutation
testing results, i.e., instruction address coverage, mutation
coverage, and mutation detection. This is done in order
to extract metrics for the given set of test cases, e.g., the
number of killed mutants w.r.t. the total number of mutants.
Moreover, the annotated CFG may serve as input format
for further investigations, e.g., for automatic test pattern
generation (ATPG).
B. Mutation Taxonomy for ARM Instruction Set
According to Section II-B the general format of an ARM
instruction word disassembly can be described as follows:
The latter two ﬁelds are optional/mandatory depending on
the class and type of instruction. Accordingly, we propose
a set of atomic binary mutation operator classes affecting a
single instruction word at a given address. Table III lists the
mutator classes with their operator mnemonics that will be
used throughout the remaining text.
1) Operator: The Operator mutator class (OPTR) sum-
marizes all possible mutations of operators sharing the same
format, i.e., number and type of operands and ﬂags. This can
be for instance OPTR(add→sub) in order to turn an arith-
metic addition into a subtraction or it can be OPTR(and→or)
in order to turn a logic and into a logic or.
2) Condition: The Condition mutator class (COND)
summarizes all possible mutations of an instruction’s con-
dition. As in ARM instruction almost all instructions can
be executed conditionally this applies to nearly any instruc-
tion word. A typical mutator of this class is for instance
COND(AL→NV) in order prevent instructions from being
executed. Moreover, COND(*→AL) can be used in order to
switch off the evaluation of any condition listed in Table I.
Atomic mutator class Mnemonic
Change operator
Change condition
Change ﬂag
Change operand
OPTR
COND
FLAG
OPRD
Table III
Example mutator
OPTR(add→sub)
COND(AL→NV)
FLAG(S↔ ¬S)
OPRD(Rd↔ Rs)
ATOMIC BINARY MUTATOR CLASSES FOR ARM INSTRUCTION SET.
Binary interface issues
Symbol table/header
Subroutine arguments passing
Subroutine return value passing
Endianness
Data/stack alignment/padding
Coverage through mutation
Branch, load and store address
Register/stack access
Register/stack access
Byte access order
Load and store offsets
COVERAGE OF BINARY LINKING RELATED ERRORS.
Table IV
3) Flag: The F lag mutator class (FLAG) summarizes all
possible mutations to operation ﬂags. Obviously, this only
applies to instruction classes taking ﬂags. A useful mutator
is for instance FLAG(S↔ ¬S) in order to switch on/off an
update of the condition ﬂags in the CPSR register.
4) Operand: The Operand mutator class (OPRD) sum-
marizes all possible mutations of operands. The applicability
of a certain operand mutator to an instruction word depends
on the number and type of operands used. Useful mutators
of this class are for instance OPRD(Rd↔Rs) in order to
toggle source and destination register or OPRD(Opn→C)
in order to change the immediate operand n to a constant
value C.
In addition to the proposed ARM speciﬁc mutator classes,
we need to introduce the general mutators DATA in order
to change constant or variable data at a given address and
ADDW in order to insert a new instruction word. Moreover,
as some typical source code faults can only be covered
at the binary level by performing mutations spanning over
several addresses atomic mutations need to be extendable to
complex mutations by means of applying a composition of
atomic mutators to form a single mutant. This is commonly
referred to as higher order mutation.
We chose this particular set of mutator classes for two
reasons. First,
they have an orthogonal characteristic in
changing the meaning of an instruction word as they affect
different aspects. Second, they are canonic in a way of being
sufﬁcient enough to perform any required mutation for test-
ing the coverage of both high-level programming language
faults (e.g., by the programmer) as well as low level target
speciﬁc faults (e.g., compilation or binary linking).
Commonly, commercial off-the-shelf binary code is pro-
vided with symbol tables and header ﬁles in order to be
linkable to some other code. As linkers cannot guarantee
binary compatibility successful linking relies on the agree-
ment on Application Binary Interfaces (ABI) specifying
for instance the calling conventions for subroutines such
as argument/return passing. ABIs are sometimes subject
to changes (e.g., with gcc3/gcc4). Moreover, the usage of
certain compiler ﬂags can affect the binary compatibility.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:31 UTC from IEEE Xplore.  Restrictions apply. 
int check_bounds(int a, int b, int c)
{
if (a<=b && b<=c) { /* Is b inside [a,c]? */
return 1; /* True */
}
return 0; /* False */
1
2
3
4
5
6
}
Listing 1. Example function check bounds in C language.
Type
A
A
A
A
A
A
A
C
A
A
Mutator
Class
Rm↔Rn
OPRD
sub→add
OPTR
Rm↔Rn
OPRD
sub→add
OPTR
S→ ¬S
FLAG
COND MI→AL
COND MI→NV
COND MI→AL
COND MI→AL
Op2→0x1
OPRD
Op2→0x0
OPRD
Addr.
0x24
0x24
0x34
0x34
0x34
0x28
0x28
0x28
0x38
0x48
0x3c
Table V
Source code equivalence
2: if(b ≤ a&&b ≤ c)
2: if(−a ≤ b&&b ≤ c)
2: if(a ≤ b&&c ≤ b)
2: if(a ≤ b&& − b ≤ c)
2: if(a ≤ b)
2: if(b ≤ c)
2: if(false)
2: if(true)
3: return 1;
5: return 0;
BINARY MUTATION TABLE.
order). If true the function returns 1. Otherwise it returns 0
(false).
The respective executable binary code is created using
arm-elf-gcc cross compiler with -O0 ﬂag (i.e., no code
optimization). For the creation of a CFG, the binary code is
disassembled starting with the function addresses extracted
from the binary’s symbol table. Here only functions of user
interest are taken into account. For each of the following
instruction words the operation’s assembler mnemonic along
with the operands are decoded from the instruction word to
form linear segments of disassembled code until a branch
occurs or a return statement is recognized. The resulting
linear segments are stored in the CFG nodes.
In case of branch instructions the corresponding destina-
tion address is decoded in order to being disassembled in a
recursive fashion. By means of coloring visited addresses
redundant processing of instruction addresses is avoided,
e.g., when branches join together. Unconditional branches
are represented by a single directed edge pointing from the
branch instruction’s source node to the corresponding branch
target’s node. Conditional branches are represented by an
additional directed edge according to control ﬂow taken for
the negative evaluation of the condition. In that case the edge
points to a new node beginning with the instruction address
directly after the respective branch instruction.
In case of a branch destination pointing to an internal
address (i.e., not a linear segment’s start address) the node
and its corresponding code segment is split at the branch
target address. Thus, the resulting linear segments of the two
new nodes are equal to the common deﬁnition of a compiler
basic block, i.e., they are non-overlapping and there is only a
single entry point and a single exit point. CFG construction
is complete once all recursive disassembling paths have
terminated due to recognition of a return statement or the
encounter of a colored instruction address.
Fig. 2 depicts the corresponding CFG derived from the
check bounds function compiled into ARM code. The CFG
is composed of ﬁve basic blocks. The ﬁrst block (considered
from up to down) contains the function prologue, i.e., saving
the calling function’s register context to stack. Moreover,
it evaluates the left part of the if statement’s condition in
source line 2 (see Listing 1). In case the evaluation returns
Figure 2. Control ﬂow graph of the disassembled check bounds function.
The ability to detect interface incompatibilities through a
given set of test cases (referred to as interface mutation)
can be investigated by our method at the binary level. Table
IV summarizes binary interface issues related to linking
of object/binary code and their coverage through binary
mutation. Such kind of issues cannot be covered efﬁciently
through source code mutation.
C. Binary Analysis
In order to identify appropriate locations for the appli-
cation of the proposed mutation operators an analysis of
the binary code is carried out prior to its execution. Let us
consider a simple source code example (though source code
is not required for the approach). Listing 1 shows the C
function check bounds that takes three integer arguments:
a, b, and c. The purpose of that function is to check whether
the value of b is inside an interval bounded by a and b in
such a way that following condition is true: a ≤ b ≤ c
(which is equivalent to a, b, and c being sorted in ascending
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:31 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3. Binary translation induced mutation (adopted from [8]).
true the second block evaluates the right part of the condition
(i.e., b ≤ c) being conjuncted with a logic and. Otherwise it
is skipped. The 3rd and 4th blocks contain the assignment
of the functions return value according to the evaluation of
the if statement. Finally, block ﬁve passes the return value
and restores the calling function’s register context. This also
includes restoring of the PC register from the saved LR
thereby performing the return to the calling function.
For the derivation of a mutation table from the binary
under test, the CFG is iterated in order to investigate the
applicability of binary mutators based on the disassembled
code segments stored in the nodes. Table V shows the
portion of a mutation table derived from the check bounds
CFG. The mutation table format is as follows. The ﬁrst
column denotes the mutation type. Here, A stands for an
atomic mutation. Respectively, C stands for a complex
mutation, i.e., the composition of multiple atomic mutations
(spanning over multiple lines) in order to form a single
mutant. Columns two to four contain the atomic mutator
class, the concrete mutator, and the affected instruction word
address (denoted by bold font style in the corresponding
CFG in Fig. 2). Column ﬁve shows the equivalence in the
affected source code line according to the binary mutation
table entry.
Here, one can see that the mapping of a typical simple
source code mutator (e.g., switching off the evaluation of
an if statement condition) might require the application of
a complex mutation at the according binary code such as
the mutation of the and conjuncted expression to if (true).
It has to be mentioned that the previous introduced table
is incomplete. Although the given example is very simple,
an exhaustive application of the proposed mutator classes
results in a much longer mutation table.
D. Binary Translation Induced Mutation
Dynamic binary translation provides a ﬂexible and efﬁ-
cient execution environment for target speciﬁc binary code.
It is widely used for the translation of non-native code into
functionally equivalent native code at runtime. This way, the
execution of an original binary on its target hardware can
be emulated on hosts with a different ISA. By means of
adapting the translator, the output, i.e., the resulting native
code, can be instrumented in order to change the emulated
behavior. We make use of this technique in order to emulate
binary mutations through the translated code. Thus, there is
no need for instrumenting the original binary itself. More-
over, translation induced mutation allows the application of
more complex mutations. For instance, injecting code into
binaries cannot be applied by a simple patch as this would
need to shift instruction words which would invalidate the
whole addressing. In such a case, it would be necessary to
rewrite the complete binary.
For the mutation of the translated code we follow an
instrumentation approach similar to the one introduced in
[9]. In their work they describe a generic instrumentation
interface for QEMU based on event-triggered plug-ins. The
plug-in interface consists of a set of callback functions
invoked at the occurrence of an event. Such events can
be translation related or execution related. Callback func-
tions assigned to translation related events can access the
translator’s code generator API. Thus, they can suppress,
extend, or modify the generation of translated code. Callback
functions assigned to execution related events have access
to the emulator’s runtime environment. Thus, they can trace
or modify the state of the emulated CPU and memory.
Fig. 3 depicts the QEMU emulation ﬂow extended by
mutation injection. In QEMU the fetch-decode-execute cycle
is realized by alternating translation and execution phases. A
translation phase is entered when the emulated PC register
encounters an unknown target address, i.e., when the look up
of the corresponding Translated Block (TB) from translation
buffer failed. The translation loop consists of fetching and
decoding single instruction words from memory until the
encounter of a branch instruction (denoting the end of a
translation phase). Then, the content of the intermediate
buffer is rewritten as native TB into the translation buffer.
The TB’s entry address is stored with the target code PC
entry address in a hash table.
We employ three generic translation events according to
the following block translation phases: post-prolog, pre-
instruction, and pre-epilog. Such events can interrupt the
translation process as depicted by Fig. 3 in order to modify
the content of the intermediate code buffer. In case of a
mutation affected address the encountered event is forwarded
to the corresponding mutation plug-in through an event man-
ager, which is aware of event sensitivities. Listing 2 shows
the corresponding code of the extended QEMU function that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:31 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
void tb_gen_code(TranslatedBlock *tb
uint32_t search_pc) {
DisasContext dc; dc.pc = search_pc;
... /* Initialize ARM disassemble context
and generate block prolog */
if (fire_tb_post_prolog_event(&dc,tb)==SKIP_BLCK)
goto epilog; /* Skip regular code generation */
do { /* Disassemble and translate instructions */
if(fire_tb_pre_insn_event(&dc, tb)!=SKIP_INSN)
disas_arm_insn(&dc, tb);
... /* Handling of special cases */
} while(!dc.is_jmp); /* Block ends at branch */
epilog: fire_tb_pre_epilog_event(&dc, tb);
... /* Generate block epilog */
}
Listing 2. Extended QEMU ARM translator with event invocation.
decodes ARM target code in order to generate intermediate
code. Here, in lines 6, 9, and 11 translation events are
ﬁred. In order to replace valid code by mutated code the
generation of valid code can be suppressed by plug-ins