    001df460 77171b01 00000000 77195b91 0009048a USER32!gapfnScSendMessage+0x2cf
    001df490 77171b27 77195b91 0009048a 00000110 USER32!PeekMessageA+0x18c
###  CVE-2018-19447：URI解析栈缓冲区溢出漏洞
当我在逆向分析逻辑问题时，我偶然发现了位于`loc_104CC981`处的`sub_104CC8B0`存在栈缓冲区溢出问题，当时我正尝试将用户提供的URI拷贝至`String1`缓冲区中：
    .text:104CC981 loc_104CC981:                                  ; CODE XREF: sub_104CC8B0+C3
    .text:104CC981                                                ; sub_104CC8B0+CA
    .text:104CC981                 push    offset word_106837E0   ; lpString2
    .text:104CC986                 lea     eax, [ebp+String1]
    .text:104CC98C                 push    eax                    ; lpString1
    .text:104CC98D                 call    ebx                    ; lstrcatW
    .text:104CC98F                 push    edi                    ; lpString2
    .text:104CC990                 lea     ecx, [ebp+String1]
    .text:104CC996                 push    ecx                    ; lpString1
    .text:104CC997                 call    ebx                    ; calls lstrcatW to trigger the stack overflow
该函数受栈cookie（stack
cookie，也称安全cookie）的保护，并且编译时启用了`/SAFESEH`选项，因此我们利用起来更难。即便如此，我们还是可以绕过这些保护措施，我们会在后续文章中介绍具体方法。
    STATUS_STACK_BUFFER_OVERRUN encountered
    (a50.1064): Break instruction exception - code 80000003 (first chance)
    eax=00000000 ebx=2da3944c ecx=75e9e4f4 edx=0031c085 esi=00000000 edi=238c2f50
    eip=75e9e371 esp=0031c2cc ebp=0031c348 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200246
    kernel32!UnhandledExceptionFilter+0x5f:
    75e9e371 cc              int     3
    0:000> kv L10
     # ChildEBP RetAddr  Args to Child              
    00 0031c348 2d4cd47d 2da3944c 96120647 69edf9b8 kernel32!UnhandledExceptionFilter+0x5f (FPO: [Non-Fpo])
    WARNING: Stack unwind information not available. Following frames may be wrong.
    01 0031c67c 2d84ca09 00000044 00000000 00000000 FoxitPDFSDK_AX_Std!IReader_ContentProvider::GetDocEventHandler+0x12427
    02 0031caec 00410041 00410041 00410041 00410041 FoxitPDFSDK_AX_Std!IReader_ContentProvider::CreateContentProvider+0x4b419
    03 0031caf0 00410041 00410041 00410041 00410041 0x410041
    04 0031caf4 00410041 00410041 00410041 00410041 0x410041
    05 0031caf8 00410041 00410041 00410041 00410041 0x410041
    06 0031cafc 00410041 00410041 00410041 00410041 0x410041
    07 0031cb00 00410041 00410041 00410041 00410041 0x410041
    08 0031cb04 00410041 00410041 00410041 00410041 0x410041
    09 0031cb08 00410041 00410041 00410041 00410041 0x410041
    0a 0031cb0c 00410041 00410041 00410041 00410041 0x410041
    0b 0031cb10 00410041 00410041 00410041 00410041 0x410041
    0c 0031cb14 00410041 00410041 00410041 00410041 0x410041
    0d 0031cb18 00410041 00410041 00410041 00410041 0x410041
    0e 0031cb1c 00410041 00410041 00410041 00410041 0x410041
    0f 0031cb20 00410041 00410041 00410041 00410041 0x410041
    0:000> !exchain
    0031c338: kernel32!_except_handler4+0 (75eca332)
      CRT scope  0, filter: kernel32!UnhandledExceptionFilter+69 (75e9e37e)
                    func:   kernel32!UnhandledExceptionFilter+6d (75e9e382)
    0031cc44: 00410041
    Invalid exception stack at 00410041
但我们怎么才能触发这些漏洞呢？
## 五、攻击方法
由于我们不能执行任何脚本操作，因此我们不能使用像`OpenFile`之类的公开方法。然而进一步分析控件后，我们可以看到其中包含一个`FilePath`属性，我们可以设置这个属性。
图1. ActiveX属性及方法
###  IE浏览器
因此如果我们使用远程托管的html文件，就可以在不执行脚本操作的情况下，通过ActiveX控件成功渲染pdf文件。
    saturn:~$ python -m SimpleHTTPServer 9090
    Serving HTTP on 0.0.0.0 port 9090 ...
    172.16.175.154 - - [21/Nov/2018 09:48:51] "GET / HTTP/1.1" 200 -    172.16.175.154 - - [21/Nov/2018 09:49:28] "GET /sample.pdf HTTP/1.1" 200 -    
这里的问题在于，如果目标站点不可信（这一点很有可能，除非目标站点位于Local Machine Zone中 ），我们就会看到如下一个非常不友好的弹出框：
图2. 弹框对攻击者来说始终不是件好事
点击“Allow”后，浏览器可以成功渲染我们构造的pdf文件：
图3. 在浏览器中通过FoxitPDFSDKProCtrl.5渲染PDF文件
在点击“Allow”后，我们可以在“管理加载项”页面中看到攻击者的IP地址已位于站点白名单中，可以运行该控件。
图4. 白名单站点可以运行Foxit.FoxitPDFSDKProCtrl.5控件
浏览器对我们来说的确是不错的攻击媒介，我们可以将攻击载荷托管在一个`iframe`中，给我们的受害者耍些花样。但这里的问题是我们还需要一次用户交互，并且最重要的一点：现在还有谁在用IE呢？
###  微软Office
因此我决定使用微软的Office产品，桌面环境中Office的使用范围比IE要广。此外，我们构造的攻击载荷基本上能适用于所有的Office文档，如Excel、Word、PowerPoint、Outlook预览面板等。Outlook预览面板是最理想的目标，因为用户不需要打开邮件，只需要预览邮件即可，这样我们就能实现100%可靠的代码执行效果。
Office与IE最关键的区别在于，Word中运行ActiveX控件时不会向用户弹出窗口。我在Windows 10
x86及x64系统上安装过打全补丁的Office 2013以及Office 2016，专门做了测试，能够确认这一点。
最开始时我构造了一个`poc.docx`文件，但在Word中设置`FilePath`属性时碰到了一些问题，当输入一个字符串并按下Enter键后，我看到了如下界面：
图5. 无法设置`FilePath`属性，但微软给的信息非常明确
为了解决这个问题，我使用目标ActiveX构造了`poc.docx`文档，然后手动修改`word/activeX/activeX1.xml`，设置`FilePath`
[ocxPr](https://msdn.microsoft.com/en-us/library/ff532755\(v=office.12).aspx)属性，然后重新打包整个文档。
在这个基础上，我将`poc.docx`保存为`poc.rtf`文件。为了进一步增强rtf
poc效果，我使用了来自CVE-2018-8174的模板，将其中的`htmlfile`
`objClass`替换为`Foxit.FoxitPDFSDKStdCtrl.5` `objClass`。
最后生成的rtf poc文档看起来不错，并且文件大小更小，这样混淆起来更加方便，便于绕过IDS。
## 六、POC
我在PoC视频中演示了[CVE-2018-19418](https://srcincite.io/pocs/src-2019-0009.py.txt)以及[CVE-2018-19447](https://srcincite.io/pocs/src-2019-0010.py.txt)的利用过程，大家可访问[此处](https://vimeo.com/302125302)观看视频。
## 七、总结
结合本文内容，我通常会建议用户禁用ActiveX，不要打开不可信链接等等等。但实际上，当微软Office在实例化可信ActiveX控件时（这里的“可信”指的是能够安全初始化，安全处理脚本操作），用户看不到任何警告信息，用户甚至不知道他们安装的是包含第三方ActiveX控件的一款产品。
因此我想直接给开发者一些建议，请停止开发ActiveX控件，就这么简单。
## 八、参考资料