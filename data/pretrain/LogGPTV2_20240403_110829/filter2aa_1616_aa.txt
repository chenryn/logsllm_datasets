# 对抗AV检测：病毒遗传感染技术的探索

## 内容介绍
本文探讨了病毒遗传感染技术，包括计算机病毒、人工生命和自进化等方面。我们将讨论多态/变形技术之后的新思路，并分析其弱点。此外，还将介绍一种基于生物病毒突变机制的遗传感染实现方法。

### 关于病毒遗传感染技术
- **计算机病毒/人工生命/自进化**:
  - 人工生命的定义由1987年美国桑塔菲研究院的Langton教授提出：“人工生命是具有生命现象和特征的人造系统。”
  - 普通病毒体现了人工生命的一种表达方式。加密、多态和变形展示了自进化的变异过程，这是对抗反病毒检测技术的一种自我进化方式。
- **研究现状**:
  - 2005年，SPTH在RRLF#6发表《Code Evolution: Follow nature's example》，从指令变形的角度阐述了如何像生物自然选择那样进行代码变异。
  - 2008年，saec在EOF-DR-RRLF发表《Evolutionary Virus Propagation Technique》，设想了如何像生物病毒那样具有遗传变异的感染方式，这与现有复杂的感染方式有很大区别。

### 多态/变形之后的思路
1. **代码集成方式**：
   - 重建宿主程序，使病毒代码分片插入到宿主中与其混合。该方法实现复杂，目前仅有zmist病毒较为接近。
2. **虚拟化感染**：
   - 借助VMProtect中的思路，设计病毒自己的p-code，需要实现一个病毒自己的虚拟机。
3. **未来的设想**：
   - 利用宿主程序本身的指令构造出病毒使用的代码，而“病毒代码”仅是连接这些指令执行的组织者，本身没有恶意操作且融入宿主程序。

### 多态/变形的弱点
1. **多态技术**：
   - 解密过程始终是最薄弱的环节，需要隐藏好。
2. **变形技术**：
   - 产生的文件体积过大，约80%是变形引擎的代码。
   - 编写难度大，处理不当会导致宿主文件大小急剧膨胀。
   - 意外因素和设计漏洞容易被通配符匹配和静态启发式等技术检测到。

### 遗传感染的一种实现思路
#### 从生物病毒那里寻找思路
- **生物病毒的突变形式**（点突变和染色体突变）：
  - **丢失**: 1 - 2 - 3 - 4 - 5 - 6 - 7 → 1 - 2 - 4 - 5 - 6 - 7
  - **重复**: 1 - 2 - 3 - 4 - 5 - 6 - 7 → 1 - 2 - 3 - 3 - 4 - 5 - 6 - 7
  - **倒序**: 1 - 2 - 3 - 4 - 5 - 6 - 7 → 1 - 2 - 4 - 3 - 5 - 6 - 7
  - **插入**: 1 - 2 - 3 - 4 - 5 - 6 - 7 → 1 - 2 - 3 - 4 - x1 - x2 - 5 - 6 - 7
  - **易位**: a1 - a2 - a3 - a4 - a5 - a6 | b1 - b2 - b3 - b4 - b5 - b6 → a1 - b2 - b3 - a5 - b1 - b6 | b1 - b6 - b5

#### 生物病毒和我们的关系
- **DNA与代码的关系**:
  - DNA对应代码，染色体对应程序功能，基因对应命令。
  - **点突变示例**:
    - 1000 1001 1101 1000 ... (mov ax, bx)
    - XOR 0000 0000 0000 1000 ... (随机数)
    - 1000 1001 1101 0000 ... (mov ax, dx)

#### 改进思路
- 将每个计算机病毒想象成携带若干个“基因（DNA）”的代码片段，在感染宿主程序后产生变异。
- 病毒个体改变了宿主个体的“基因”，从而产生了进化。
- 病毒由两部分组成：有效基因和无效基因。

### 把握好的原则：舍弃解密器/收缩器
- **不要解密器**：让病毒的“基因”与宿主自然混合。
- **不要收缩器**：让病毒的“非基因”部分以变形形式存在，利用指令模板控制，避免过度膨胀。

### 构造一个新的变形机制
- **病毒结构布局**:
  - 病毒/宿主混合部分，anti-vm Stub
  - 垃圾数据，anti-heur static Garbage Data
  - 变形的病毒体 Metamorphism Code
  - 加密的数据 Encrypt Data

- **抽出病毒中若干个函数当作“基因”**，在交叉点的位置进行突变形成一个stub区域。任意的病毒执行过程都可以写成如下形式：
  ```assembly
  START:
    call my_DNA1
    call my_DNA2
    call my_DNA3
    ...
  v_code:
    include virus_delta.inc      ; 重定位处理函数
    include virus_get_k32_base   ; 获得kernel32.dll基址
    ...
  vv_code:
    vir_vars VIR_STRUCT <>      ; 病毒自身使用变量的结构
  vEnd:
  END START
  ```

- **感染前后对比图**:
  - 被修改交叉点的宿主文件
  - 宿主代码/病毒/anti-av（stub）
  - 感染前的宿主程序
  - metamorphism code
  - encrypt data

通过以上方法，我们可以实现一种既易于编写又能完全变形且具有良好反AV效果的感染方式。