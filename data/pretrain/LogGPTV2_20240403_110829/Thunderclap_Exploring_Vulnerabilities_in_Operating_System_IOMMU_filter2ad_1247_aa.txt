# Title: Thunderclap: Exploring Vulnerabilities in Operating System IOMMU Protection via DMA from Untrustworthy Peripherals

## Authors:
- A. Theodore Markettos
- Colin Rothwell
- Brett F. Gutstein
- Allison Pearce
- Peter G. Neumann
- Simon W. Moore
- Robert N. M. Watson

**Affiliations:**
- University of Cambridge, Department of Computer Science and Technology
- Rice University
- SRI International

**Website:** [www.thunderclap.io](http://www.thunderclap.io)

**Contact:** [PI:EMAIL]

## Abstract
Direct Memory Access (DMA) attacks have been known for many years, with DMA-enabled I/O peripherals having complete access to a computer's state, enabling them to fully compromise it, including reading and writing all system memory. The popularity of Thunderbolt 3 over USB Type-C and smart internal devices has significantly increased the opportunities for such attacks, which can be performed with just seconds of physical access to a computer. In response, hardware and operating system (OS) vendors have incorporated Input-Output Memory Management Units (IOMMUs) to impose memory protection on DMA. However, our investigation using a novel I/O-security research platform reveals that current protections are insufficient when faced with a functional network peripheral that uses its complex interactions with the OS for malicious purposes.

We describe vulnerabilities in macOS, FreeBSD, and Linux, which nominally use IOMMUs to protect against DMA attackers. Windows uses the IOMMU only in limited cases and remains vulnerable. Using Thunderclap, an open-source FPGA research platform we developed, we explore new classes of OS vulnerabilities arising from inadequate IOMMU usage. These vulnerabilities allow attackers to extract private data (e.g., sniffing cleartext VPN traffic) and hijack kernel control flow (e.g., launching a root shell) in seconds using devices such as USB-C projectors or power adapters.

We have worked closely with OS vendors to address these vulnerability classes, resulting in substantial feature improvements and mitigations. 

## 1. Introduction
Modern computers are complex distributed systems with interlocking hardware and software components. Direct Memory Access (DMA) allows programmable peripheral devices—such as storage adapters, network adapters, USB controllers, GPUs, and other accelerators—to access system memory, improving performance. Historically, DMA was available only within the physical case of a computer, e.g., via PCI Express (PCIe) or on-chip interconnects. More recently, DMA has become available via external device connections, such as Firewire, Thunderbolt 2, and USB-C with Thunderbolt 3. This adoption is driven by rising I/O performance requirements, such as flash storage and multi-gigabit networking, and the trend towards smaller laptops with fewer ports and externally pluggable peripherals.

DMA introduces a security relationship between the CPU, its memory, and peripheral devices, allowing peripherals to read or overwrite key OS internal data structures in kernel memory. The deployment of Firewire in the early 2000s led to DMA attacks where external devices or other Firewire-enabled computers were used to extract data or gain privileges on target systems. Both the performance and vulnerability of DMA enabled highly effective "drive-by" attacks, extracting confidential memory contents or compromising system integrity.

Contemporary hardware and OS vendors use IOMMUs to limit DMA access by untrustworthy peripherals. MacOS, Linux, and FreeBSD can be configured to expose only limited portions of kernel memory to DMA, preventing malicious devices from extracting encryption keys or modifying kernel data structures. The principle is similar to the MMU used for memory protection on general-purpose CPUs since the 1960s: the physical address space is virtualized to produce I/O virtual address (IOVA) spaces, through which DMA access from peripherals is transformed and limited. Just as the OS imposes virtual address spaces on processes to isolate them from kernel memory, the OS constrains PCIe devices to perform DMA via specific IOVA spaces containing only mappings for intentionally exposed memory.

In this paper, we explore the IOMMU protection strategies employed by widely used operating systems and reveal a more nuanced state of affairs. An essential insight is that while IOMMUs allow peripheral devices to be constrained, the DMA interface between device drivers and peripherals is a porous and complex attack surface that malicious actors can manipulate to influence software behavior and trigger vulnerabilities. The comparison with MMU-based OS protection is apt: just as the system-call interface is one of the most critical security interfaces in an OS, used to constrain untrustworthy software requesting system services, IOMMU-based protection is also about communication as much as isolating malicious peripherals from sensitive memory. Tradeoffs in IOMMU use exist, especially with respect to performance, where TLB resources are limited, and page-table walks trigger additional memory traffic and latency, constraining the acceptable vocabulary of this interface even after years of optimization.

However, there are important differences from the system-call interface. The software side of peripheral DMA interfaces is not implemented by carefully hardened kernel system-call code, tested by decades of malicious attacks and fuzzing, but by thousands of device drivers designed around historic mutual trust, hardware convenience, and performance maximization. Unlike most system-call interfaces, many key data structures shared between the kernel and peripherals are via shared memory, such as descriptor rings, rather than register passing and selected copy avoidance. Prior work has suggested that shared-memory interfaces are particularly vulnerable to race conditions and other unsafe interactions.

To date, DMA attacks have focused on either systems unprotected by IOMMUs or the narrow class of race conditions where the IOMMU is left disabled or improperly configured during early boot. To explore more interesting classes of vulnerabilities and corresponding exploit techniques in the steady state of contemporary IOMMU-aware OSes, we developed Thunderclap, an FPGA-based PCIe-enabled device suitable for use with internal PCIe slots, external Thunderbolt 2 ports, and external USB-C ports with Thunderbolt 3. We designed several physical embodiments of the FPGA-based platform, including malicious docking stations, USB-C chargers, and projectors—devices that end users are comfortable casually connecting to notebook computers without compromising their personal data.

Rather than simply issuing loads and stores to sensitive kernel memory, we developed a peripheral device emulation platform, allowing us to engage with more complex OS and device-driver behaviors by emulating full I/O devices with DMA access. We utilize a CPU on the FPGA to implement a full software model of an arbitrary peripheral device, allowing us to choose the device driver we interact with and explore subtleties of interaction with shared-memory structures such as network card descriptor rings. Implementing our new adversarial model, we are able to interact deeply with OS functions such as memory allocation and free, IOMMU mapping creation and revocation, and so on. Thunderclap allows us to explore rich device, OS, and device-driver-specific behaviors in this essential but largely unexplored vulnerability space.

The results are catastrophic, revealing endemic vulnerability in the presence of a more sophisticated attacker despite explicit use of the IOMMU to limit I/O attacks. We describe a range of new vulnerability classes and how conventional exploit techniques used in software-based attacks, and the mitigations used to limit them, differ in the context of DMA-based attacks in the presence of an IOMMU. Adversarial techniques differ substantially in this new space; for example, attackers can trigger new vulnerable behaviors, such as holding IOMMU windows open awaiting a low-probability shared-memory race. We find that mitigation techniques intended to limit userspace attackers via the system-call interface, such as KASLR, are applicable but require careful re-application in the DMA context due to historic assumptions. For example, the common practice of leaking kernel pointers to peripheral devices is no longer acceptable. Two years of interactions with major OS and device vendors have led to significant security updates, and explicit recognition that OS IOMMU bypass vulnerabilities are within vendor threat models. We are able to achieve IOMMU bypass within seconds of connecting on vulnerable macOS, FreeBSD, and Linux systems across a range of hardware vendors. Apple, Microsoft, and Intel have issued security updates to partially address these concerns.

In this paper, we:
- Provide background on I/O, DMA, and IOMMUs.
- Present our methodology, including threat model and I/O-security research platform with peripheral device models.
- Survey a range of current general-purpose operating systems for vulnerabilities, demonstrating escalating complexity as the sophistication of IOMMU use grows.
- Consider the suitability of existing access-control techniques.
- Discuss how these problems may be mitigated, considering performance constraints.
- Conclude with a consideration of related work, vulnerability disclosures to date, and future areas of work.

## 2. Background
In this section, we introduce key technologies, the landscape of existing attacks, and modern defenses. We describe how systems are currently structured and the vulnerabilities that an expanded threat model exposes.

### 2.1 Interface Classification
Devices can be classified into two broad categories:
1. **Protocol-based approach (message-passing):** Memory is not accessed directly, covering protocols such as native USB and SATA.
2. **Shared-memory approach:** This includes:
   - Inside-the-case inter-chip communications, soldered or modular, typically interconnected with PCI Express.
   - External 'pluggable' devices, typically via Thunderbolt.
   - System-on-chip (SoC) devices, typically via on-chip interconnect such as AXI.
   - Memory shared between computers in a clustering arrangement (remote DMA or RDMA).

Today, most peripherals of any scale, such as network cards and GPUs, perform DMA, allowing them to access shared system memory. Our experimental work focuses on PCI Express and Thunderbolt for practical reasons, but would equally apply to on-chip devices.

### 2.2 Peripheral Technologies
- **PCI Express (PCIe):** The backbone of laptop, desktop, and server computers, allowing peripheral devices such as those for networking and storage to attach directly or indirectly. Each side (device and CPU/main memory) can issue memory requests of the other.
- **Thunderbolt:** Intel’s proprietary external cabling system combining hot-pluggable PCIe and video. It is popular for connecting docking stations and dongles to laptops, adding external PCIe devices and/or additional video outputs. Thunderbolt 1 & 2 use the mini-Displayport connector and are prevalent on Apple laptops and desktops.
- **USB Type-C:** A multipurpose connector standard. By default, it carries USB, but devices can add a microcontroller to negotiate the port into an 'alternate mode' to carry different protocols, including video (Displayport/MHL/HDMI), analog audio, and Thunderbolt 3. USB Type-C also provides Power Delivery modes and is a popular means of charging devices.
- **Thunderbolt 3:** Behaviorally similar to Thunderbolt 1 and 2 but with additional speed modes, conveyed over the Type-C connector. It is increasingly widespread on middle- and high-end laptops.

The IOMMU sits between main memory and PCIe devices (including those externalized via Thunderbolt), applying address translation and protection against requests from devices. Originally designed for virtualization, it has been repurposed to protect non-virtualized machines against malicious peripheral DMA.

### 2.3 DMA Attacks
The threat from peripherals first came to light with the spread of Firewire, an early competitor to USB, used by vendors such as Apple and Sony. Unlike USB, Firewire provided DMA to external peripherals, improving performance by reducing host-controller-directed memory copying and allowing peripherals to directly address host memory.

Initial DMA attacks used this Firewire feature to read physical memory of a computer and then apply standard forensic memory techniques to compromise the system, e.g., to steal passwords or reveal disk encryption keys. With advances in technology, such attacks were updated to use PCI, Cardbus, PCI Express, and Thunderbolt—both externally and internally.

In light of these attacks, operating systems had to improve their use of system protections. A key landmark was macOS 10.8.2 in 2012, the first time the IOMMU was enabled by default for protection against malicious peripherals. As a result, a large swath of DMA attacks were blocked, leading to a belief that the IOMMU solved the DMA attack problem. However, this belief is now being challenged.

### 2.4 IOMMU Primer
Since the IOMMU is the primary place where protection is implemented in the I/O system, we outline its operation here. Implementations, namely Intel VT-d, AMD-Vi, and Arm’s System MMU, are broadly similar, with minor differences.

The IOMMU implements a similar protection model for devices as the MMU does for processes. Both involve the translation of addresses in memory read and write operations, as well as access control. The MMU translates virtual addresses (used by a program or process on the CPU) to physical addresses (used by the underlying hardware memory). It uses multiple levels of page tables, each translating a smaller region of memory. Different tables are switched in and out each time the processor switches to running a different process. Each unit of translation (or 'page') may have different read, write, or execute permissions, allowing one program to have its memory protected from another. Because a full table lookup is slow, the Translation Lookaside Buffer (TLB) is a cache of recently used translations.

The IOMMU mirrors the MMU operation, although for accesses from peripheral devices. I/O devices generate their own memory read and write transactions. Translations, this time from I/O virtual addresses (IOVAs) to physical addresses, are performed using the same table structure. However, because multiple I/O devices may make accesses at the same time, there can be a separate table for each device, comparable to the use of a separate MMU page table for each OS process. PCIe allows 2^16 devices, so there are potentially 2^16 sets of tables. For performance, there exists an Input/Output TLB (IOTLB) to cache recent translations.

OS IOMMU bypass vulnerabilities arise when a malicious attacker is able to manipulate OS, device-driver, or application behavior to bypass intended protections, allowing undesired attacks on memory integrity or confidentiality.