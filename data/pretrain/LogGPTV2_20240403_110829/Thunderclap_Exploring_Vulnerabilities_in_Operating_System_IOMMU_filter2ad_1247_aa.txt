title:Thunderclap: Exploring Vulnerabilities in Operating System IOMMU
Protection via DMA from Untrustworthy Peripherals
author:A. Theodore Markettos and
Colin Rothwell and
Brett F. Gutstein and
Allison Pearce and
Peter G. Neumann and
Simon W. Moore and
Robert N. M. Watson
Thunderclap: Exploring
Vulnerabilities in Operating System IOMMU
Protection via DMA from Untrustworthy Peripherals
A. Theodore Markettos∗, Colin Rothwell∗, Brett F. Gutstein∗†,
Allison Pearce∗, Peter G. Neumann‡, Simon W. Moore∗, Robert N. M. Watson∗
∗ University of Cambridge, Department of Computer Science and Technology † Rice University ‡ SRI International
www.thunderclap.io
PI:EMAIL
Abstract—Direct Memory Access (DMA) attacks have been
known for many years: DMA-enabled I/O peripherals have com-
plete access to the state of a computer and can fully compromise
it including reading and writing all of system memory. With the
popularity of Thunderbolt 3 over USB Type-C and smart internal
devices, opportunities for these attacks to be performed casually
with only seconds of physical access to a computer have greatly
broadened. In response, commodity hardware and operating-
system (OS) vendors have incorporated support for Input-Ouptut
Memory Management Units (IOMMUs), which impose memory
protection on DMA, and are widely believed to protect against
DMA attacks. We investigate the state-of-the-art in IOMMU pro-
tection across OSes using a novel I/O-security research platform,
and ﬁnd that current protections fall short when faced with a
functional network peripheral that uses its complex interactions
with the OS for ill intent. We describe vulnerabilities in macOS,
FreeBSD, and Linux, which notionally utilize IOMMUs to protect
against DMA attackers. Windows uses the IOMMU only in
limited cases. and it remains vulnerable. Using Thunderclap, an
open-source FPGA research platform that we built, we explore
new classes of OS vulnerability arising from inadequate use
of the IOMMU. The complex vulnerability space for IOMMU-
exposed shared memory available to DMA-enabled peripherals
allows attackers to extract private data (snifﬁng cleartext VPN
trafﬁc) and hijack kernel control ﬂow (launching a root shell)
in seconds using devices such as USB-C projectors or power
adapters. We have worked closely with OS vendors to remedy
these vulnerability classes, and they have now shipped substantial
feature improvements and mitigations as a result of our work.
I.
INTRODUCTION
Modern computers are a complex distributed system of
interlocking hardware/software components, even inside the
case. Direct Memory Access (DMA) allows programmable
peripheral devices – storage adapters, network adapters, USB
controllers, GPUs, and other accelerators – to access system
memory in order to improve performance. Historically, DMA
has been available only within the physical case of a computer
– e.g., PCI Express (PCIe) or on-chip interconnect. More
recently, DMA has been available via connections for external
devices – Firewire, and latterly Thunderbolt 2, and USB-C
with Thunderbolt 3. Adoption has been driven by rising
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23194
www.ndss-symposium.org
Fig. 1: Thunderbolt dock with FPGA implant, an implementation
of our I/O-security research platform
I/O performance requirements, such as ﬂash storage and
multi-gigabit networking, and the trend towards smaller laptops,
with fewer ports and externally pluggable peripherals.
DMA introduces an intimate security relationship between the
general-purpose CPU, its memory, and peripheral devices (which
themselves frequently contain processors): it allows peripherals
the ability to read or overwrite key operating-system (OS) internal
data structures in kernel memory, placing the peripheral within
the OS’s Trusted Computing Base (TCB). The deployment of Fi-
rewire in the early 2000s led to the emergence of DMA attacks in
which external devices, as well as other Firewire-enabled comput-
ers, were used to extract data from, or gain privilege on, target sys-
tems [7], [12], [13], [16]. Both the performance and vulnerability
of DMA allowed for highly effective “drive-by” attacks extracting
conﬁdential memory contents or compromising system integrity.
Contemporary hardware and OS vendors are aware of these
threats and employ an Input-Output Memory Management Unit
(IOMMU) to limit access by DMA-enabled peripherals to system
memory. MacOS, Linux, and FreeBSD, for example, can be
conﬁgured to open up only limited portions of kernel memory
to DMA, in order to prevent malicious devices from extracting
encryption keys or modifying kernel data structures. The principle
of this approach is similar to that of the Memory Management
Unit (MMU) used for memory protection on general-purpose
CPUs since the 1960s: the physical address space is virtualized to
produce a number of I/O virtual address (IOVA) spaces through
which DMA access from peripherals is transformed and limited
(Figure 2). Just as the OS imposes virtual address spaces on
processes to isolate them from kernel memory and one another,
the OS constrains PCIe devices to performing DMA via speciﬁc
I/O virtual address spaces that contain only mappings for memory
Fig. 2: The IOMMU translates I/O virtual to physical addresses and applies access control, similar to how the MMU translates
virtual addresses from processes.
intentionally exposed by the OS or corresponding device driver
– e.g., to allow packets to be read or written by a network card.
This approach recognizes that devices may be untrustworthy, and
allows such devices to be considered outside of the OS TCB. IOM-
MUs are widely believed to be effective in limiting DMA attacks.
In this paper, we explore IOMMU protection strategies
employed by a number of widely used operating systems, and
reveal a substantially more nuanced state of affairs. An essential
insight is that, while IOMMUs allow peripheral devices to be
constrained, the DMA interface between device drivers and
peripherals is a porous and complex attack surface that malicious
actors can manipulate to inﬂuence software behavior and trigger
vulnerabilities. The comparison with MMU-based OS protection
is apt: just as the system-call interface is one of the most critical
security interfaces in an OS, used to constrain untrustworthy
software requesting system services that access data provided
by the attacker and lead to complex (and potentially vulnerable)
kernel behavior, IOMMU-based protection is just as much about
communication as it is isolating malicious peripherals from
sensitive memory. And, as with MMUs, tradeoffs in IOMMU
use necessarily exist – especially with respect to performance,
where, just as with MMUs, TLB resources are limited, and
page-table walks trigger additional memory trafﬁc and memory-
access latency, which constrain the acceptable vocabulary of this
interface even after years of optimization [3], [9], [40]–[43], [53].
However, there are important differences from the system-call
interface. The software side of peripheral DMA interfaces is
not implemented by carefully hardened kernel system-call code,
tested by decades of malicious attacks and fuzzing, but by
thousands of device drivers that have been designed around
historic mutual trust, hardware convenience, and performance
maximization. Unlike most system-call interfaces, many key
data structures shared between the kernel and peripherals are
via shared memory – eg., descriptor rings – rather than register
passing and selected copy avoidance. Prior work has suggested
that shared-memory interfaces are particularly vulnerable to race
conditions and other unsafe interactions [1], [25], [65].
To date, DMA attacks have focused on either systems
unprotected by IOMMUs, or the narrow class of race conditions
in which the IOMMU is left disabled or improperly conﬁgured
during early boot – e.g., on hardware reset, in ﬁrmware, or during
kernel startup [22], [24], [27], [46], [47], [59], [68]. To explore
the more interesting classes of vulnerabilities and corresponding
exploit techniques in the steady state of contemporary IOMMU-
aware OSes, we have developed a novel hardware platform, Thun-
derclap, which is an FPGA-based PCIe-enabled device suitable
for use with internal PCIe slots, external Thunderbolt 2 ports, and
external USB-C ports with Thunderbolt 3. We have designed sev-
eral physical embodiments of the FPGA-based platform including
malicious docking stations (Figure 1), USB-C chargers, and pro-
2
jectors – all devices that end users are comfortable casually con-
necting to notebook computer systems, and that they can reason-
ably expect to borrow without compromising their personal data.
Rather than simply issuing loads and stores to sensitive kernel
memory, we have developed a peripheral device emulation
platform, allowing us to engage with more complex OS and
device-driver behaviors by emulating full I/O devices that have
DMA access. We utilize a CPU on the FPGA to implement
a full software model of an arbitrary peripheral device, which
allows us to choose the device driver we interact with, and to
explore subtleties of interaction with shared-memory structures
such as network card descriptor rings. Implementing our new
adversarial model, we are able to interact deeply with OS
functions such as memory allocation and free, IOMMU mapping
creation and revocation, and so on. Thunderclap allows us to
explore rich device, OS, and device-driver speciﬁc behaviors
in this essential but largely unexplored vulnerability space.
The results are catastrophic, revealing endemic vulnerability in
the presence of a more sophisticated attacker despite explicit use
of the IOMMU to limit I/O attacks. We describe a range of new
vulnerability classes, but also how conventional exploit techniques
used in software-based attacks, and the mitigations used to limit
them, differ in the context of DMA-based attacks in the presence
of an IOMMU. Adversarial techniques differ substantially in this
new space; for example, attackers can trigger new vulnerable
behaviors – such as holding IOMMU windows open awaiting
a low-probability shared-memory race. We ﬁnd that mitigation
techniques intended to limit userspace attackers via the system-
call interface, such as KASLR, are applicable but require careful
re-application in the DMA context due to historic assumptions
– for example, the common practice of leaking kernel pointers to
peripheral devices is no longer acceptable. Two years of interac-
tions with major OS and device vendors have led to signiﬁcant
security updates, and explicit recognition that OS IOMMU bypass
vulnerabilities are within vendor threat models. We are able
to achieve IOMMU bypass within seconds of connecting on
vulnerable macOS, FreeBSD, and Linux systems across a range of
hardware vendors. Apple, Microsoft and Intel have issued security
updates to partially address these concerns. In this paper, we:
• Provide background on I/O, DMA, and IOMMUs.
• Present our methodology, including threat model and I/O-
security research platform with peripheral device models.
• Survey a range of current general-purpose operating
systems
for vulnerabilities, demonstrating escalating
complexity as the sophistication of IOMMU use grows.
• Consider the suitability of existing access-control techniques.
• Discuss how these problems may be mitigated, including
• Conclude with a consideration of related work, vulnerability
considering performance constraints.
disclosures to date, and future areas of work.
II. BACKGROUND
In this section we introduce a number of key technologies, the
landscape of existing attacks, and modern defenses. We describe
how systems are currently structured and the vulnerabilities that
an expanded threat model exposes.
A. Interface classiﬁcation
We can classify devices into two broad categories. The
ﬁrst uses a protocol-based approach that may be described as
message-passing, where memory is not accessed directly. This
covers protocols such as native USB and SATA.
The second uses a shared-memory approach. We classify
shared-memory interfaces into several categories: inside-the-case
inter-chip communications, soldered or modular, typically inter-
connected with PCI Express; external ‘pluggable’ devices, typi-
cally via Thunderbolt; system-on-chip (SoC) devices, typically via
on-chip interconnect such as AXI; memory shared between com-
puters in a clustering arrangement (remote DMA or RDMA). To-
day, most peripherals of any scale, e.g. network cards and GPUs,
perform DMA, allowing them to access shared system memory.
Our experimental work focuses on PCI Express and Thunderbolt
for practical reasons, but would equally apply to on-chip devices.
We outline some of these technologies in subsequent sections.
B. Peripheral technologies
The PCI Express (PCIe) interconnect [51] is the backbone
of laptop, desktop, and server computers. Peripheral devices
such as those for networking and storage attach (directly or
indirectly) to PCIe. Each side (device and CPU/main memory)
can issue memory requests of the other. PCIe cards are mostly
used within the computer’s physical enclosure.
Thunderbolt [28] is Intel’s proprietary external cabling system
that combines hotpluggable PCIe and video. It is popular for
connecting docking stations and ‘dongles’ to laptops, which add
external PCIe devices (graphics, storage, networking) and/or addi-
tional video outputs. Thunderbolt 1 & 2 use the mini-Displayport
connector and are most prevalent on Apple laptops and desktops.
USB Type-C [64] is a multipurpose connector standard. By
default it carries USB, but devices may add a microcontroller that
can negotiate the port into an ‘alternate mode’, to carry a different
protocol. These include video (Displayport/MHL/HDMI), analog
audio, and Thunderbolt 3. Type-C also provides Power Delivery
modes and is a popular means of charging devices.
Thunderbolt 3 [30] is behaviorally similar to the previous
Thunderbolt 1 and 2 but with additional speed modes, and
is conveyed over the Type-C connector. Thunderbolt 3 is
increasingly widespread on middle- and high-end laptops.
The IOMMU (Input-Output Memory Management Unit) sits
between main memory and PCIe devices (including those
externalized via Thunderbolt), applying address translation
and protection against
requests from devices. Originally
designed for virtualization – dedicating peripherals to different
virtual machines – it has since been repurposed to protect
non-virtualized machines against malicious peripheral DMA.
C. DMA attacks
The threat from peripherals ﬁrst came to light with the spread
of Firewire, an early competitor to USB, used by vendors such
as Apple and Sony. Unlike USB, Firewire provided DMA to
external peripherals. This improved performance by reducing
host-controller-directed memory copying, allowing peripherals
to directly address host memory.
Initial DMA attacks used this Firewire feature to read
physical memory of a computer and then apply standard forensic
3
Fig. 3: Stack of a typical network or storage device. Lower
layers are standardized, while the DMA and application layers
vary among devices. Implementing all layers in a software
model allows us to explore vulnerabilities throughout the stack.
memory techniques to compromise the system, e.g., to steal
passwords or reveal disk encryption keys [7], [12], [13], [16].
With advances in technology, such attacks were updated to use
PCI, Cardbus, PCI Express and Thunderbolt – both externally
and internally [6], [19]–[21], [31], [56], [58].
In light of these attacks, operating systems had to improve
their use of system protections. A key landmark was macOS
10.8.2 in 2012, the ﬁrst time the IOMMU was enabled by default
for protection against malicious peripherals. As a result, a large
swath of DMA attacks were blocked, resulting in a refrain from
attack authors that the IOMMU solved the DMA attack problem:
“IOMMU ... does appear to provide protection against
simple DMA attacks effectively” [32]
“DMA does not work! what to do?” [20]
(Further discussion of the literature is given in Section X).
D. IOMMU primer
Since the IOMMU is the primary place where protection
is implemented in the input/output (I/O) system, we outline
its operation here. Implementations, namely Intel VT-d [29],
AMD-Vi [2], and Arm’s System MMU [4], are broadly similar,
with minor differences.
The IOMMU implements a similar protection model for
devices as the MMU (memory management unit) does for
processes. Both involve the translation of addresses in memory
read and write operations, as well as access control.
In brief, the MMU translates virtual addresses (used by a
program or process on the CPU) to physical addresses (used by
the underlying hardware memory). It uses multiple levels of page
tables, each translating a smaller region of memory (address
space). Different tables are switched in and out each time the
processor switches to running a different process. Each unit of
translation (or ‘page’) may have different read, write, or execute
permissions, allowing one program to have its memory protected
from another. Because a full table lookup is slow, the Translation
Lookaside Buffer (TLB) is a cache of recently used translations.
The IOMMU mirrors the MMU operation, although for
accesses from peripheral devices. I/O devices generate their
own memory read and write transactions. Translations, this time
from I/O virtual addresses (IOVAs) to physical addresses, are
performed using the same table structure. However, because
multiple I/O devices may make accesses at the same time, we
can have a separate table for each device, comparable to the
use of a separate MMU page tables for each OS process. PCIe
allows 216 devices, so there are potentially 216 sets of tables
– although in practice a system may have only a few dozen
devices present. For performance, there exists an Input/Output
TLB (IOTLB) to cache recent translations. The arrangements
of MMU and IOMMU are shown in Figure 2.
OS IOMMU bypass vulnerabilities arise when a malicious
attacker is able to manipulate OS, device-driver, or application
behavior to bypass intended protections, allowing undesired
attacks on memory integrity or conﬁdentiality. Spatial vulnera-