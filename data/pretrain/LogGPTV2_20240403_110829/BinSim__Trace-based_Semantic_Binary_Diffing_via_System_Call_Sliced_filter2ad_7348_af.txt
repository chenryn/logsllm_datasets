(ACSAC’12) (2012).
[40] LU, K., ZOU, D., WEN, W., AND GAO, D. deRop: Remov-
ing return-oriented programming from malware. In Proceedings
of the 27th Annual Computer Security Applications Conference
(ACSAC’11) (2011).
[41] LUO, L., MING, J., WU, D., LIU, P., AND ZHU, S. Semantics-
based obfuscation-resilient binary code similarity comparison
with applications to software plagiarism detection. In Proceed-
ings of the 22nd ACM SIGSOFT International Symposium on
Foundations of Software Engineering (FSE’14) (2014).
[42] MENG, X., AND MILLER, B. P. Binary code is not easy. In Pro-
ceedings of the 25th International Symposium on Software Test-
ing and Analysis (ISSTA’16) (2016).
[43] MING, J., PAN, M., AND GAO, D.
iBinHunt: Binary hunting
with inter-procedural control ﬂow. In Proceedings of the 15th An-
nual International Conference on Information Security and Cryp-
tology (ICISC’12) (2012).
[44] MING, J., XIN, Z., LAN, P., WU, D., LIU, P., AND MAO,
B. Replacement Attacks: Automatically impeding behavior-
based malware speciﬁcations. In Proceedings of the 13th Inter-
national Conference on Applied Cryptography and Network Se-
curity (ACNS’15) (2015).
[45] MING, J., XU, D., WANG, L., AND WU, D. LOOP: Logic-
oriented opaque predicates detection in obfuscated binary code.
In Proceedings of the 22nd ACM Conference on Computer and
Communications Securit (CCS’15) (2015).
[46] MING, J., XU, D., AND WU, D. Memoized semantics-based
binary difﬁng with application to malware lineage inference. In
Proceedings of the 30th International Conference on ICT Systems
Security and Privacy Protection (IFIP SEC’15) (2015).
[47] MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring multiple
execution paths for malware analysis. In Proceedings of the 2007
IEEE Symposium of Security and Privacy (S&P’07) (2007).
268    26th USENIX Security Symposium
USENIX Association
[48] MOSER, A., KRUEGEL, C., AND KIRDA, E. Limits of static
analysis for malware detection. In Proceedings of the 23th An-
nual Computer Security Applications Conference (ACSAC’07)
(December 2007).
[49] NG, B. H., AND PRAKASH, A. Expos´e: Discovering poten-
In Proceedings of the 37th IEEE An-
tial binary code re-use.
nual Computer Software and Applications Conference (COMP-
SAC’13) (2013).
[50] OH, J. W. Fight against 1-day exploits: Difﬁng binaries vs anti-
difﬁng binaries. Black Hat USA 2009, 2009.
[51] OKANE, P., SEZER, S., AND MCLAUGHLIN, K. Obfuscation:
The hidden malware. IEEE Security and Privacy 9, 5 (2011).
[52] OREANS TECHNOLOGIES.
cation against reverse engineering.
codevirtualizer.php, last reviewed, 02/16/2017.
Code Virtualizer: Total obfus-
http://oreans.com/
[53] PANDA SECURITY.
227,000 malware samples per day in
Q1 2016. http://www.pandasecurity.com/mediacenter/
pandalabs/pandalabs-study-q1/.
[54] PEWNY, J., GARMANY, B., GAWLIK, R., ROSSOW, C., AND
HOLZ, T. Cross-architecture bug search in binary executables.
In Proceedings of the 36th IEEE Symposium on Security and Pri-
vacy (S&P’15) (2015).
[55] POULIOS, G., NTANTOGIAN, C., AND XENAKIS, C. ROPInjec-
tor: Using return oriented programming for polymorphism and
antivirus evasion. Black Hat USA 2015, 2015.
[56] RAMOS, D. A., AND ENGLER, D. R. Practical, low-effort equiv-
alence veriﬁcation of real code. In Proceedings of the 23rd Inter-
national Conference on Computer Aided Veriﬁcation (CAV’11)
(2011).
[57] ROUNDY, K. A., AND MILLER, B. P. Binary-code obfuscations
in prevalent packer tools. ACM Computing Surveys 46, 1 (2013).
[58] SCAIFE, N., CARTER, H., TRAYNOR, P., AND BUTLER, K. R.
CryptoLock (and Drop It): Stopping ransomware attacks on user
data. In Proceedings of the 36th IEEE International Conference
on Distributed Computing Systems (ICDCS’16) (2016).
[59] SCHRITTWIESER, S., KATZENBEISSER, S., KIESEBERG, P.,
HUBER, M., LEITHNER, M., MULAZZANI, M., AND WEIPPL,
E. Covert Computation: Hiding code in code for obfuscation
In Proceedings of the 8th ACM SIGSAC Symposium
purposes.
on Information, Computer and Communications Security (ASI-
ACCS’13) (2013).
[60] SHACHAM, H. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86). In Proceed-
ings of the 14th ACM Conference on Computer and Communica-
tions Security (CCS’07) (2007).
[61] SHARIF, M., LANZI, A., GIFFIN, J., AND LEE, W. Automatic
reverse engineering of malware emulators. In Proceedings of the
2009 IEEE Symposium on Security and Privacy (S&P’09) (2009).
[62] SHI, Y., GREGG, D., BEATTY, A., AND ERTL, M. A. Virtual
machine showdown: Stack versus registers. In Proceedings of the
1st ACM/USENIX International Conference on Virtual Execution
Environments (VEE’05) (2005).
[63] SIKORSKI, M., AND HONIG, A. Counterfeiting the Pipes with
FakeNet 2.0. BlackHat EUROPE 2014, 2014.
[64] SMITH, J., AND NAIR, R. Virtual Machines: Versatile Plat-
forms for Systems and Processes (The Morgan Kaufmann Series
in Computer Architecture and Design). Morgan Kaufmann Pub-
lishers Inc., San Francisco, CA, USA, 2005.
[65] SMITH, T. F., AND WATERMAN, M. Identiﬁcation of common
molecular subsequences. Journal of Molecular Biology 147, 1
(1981).
[66] SONG, D., BRUMLEY, D., YIN, H., CABALLERO, J., JAGER,
I., KANG, M. G., LIANG, Z., NEWSOME, J., POOSANKAM, P.,
AND SAXENA, P. BitBlaze: A new approach to computer secu-
rity via binary analysis. In Proceedings of the 4th International
Conference on Information Systems Security (ICISS’08) (2008).
[67] SOOS, M., NOHL, K., AND CASTELLUCCIA, C. Extending SAT
In Proceedings of the 12th
solvers to cryptographic problems.
International Conference on Theory and Applications of Satisﬁa-
bility Testing (SAT’09) (2009).
[68] UGARTE-PEDRERO, X., BALZAROTTI, D., SANTOS, I., AND
BRINGAS, P. G. SoK: Deep packer inspection: A longitudinal
study of the complexity of run-time packers. In Proceedings of
the 36th IEEE Symposium on Security & Privacy (2015).
[69] VMPROTECT SOFTWARE. VMProtect software protection.
http://vmpsoft.com, last reviewed, 02/16/2017.
[70] VMRAY. VMRay Analyzer. https://www.vmray.com/, last
reviewed, 02/16/2017.
[71] WANG, C., HILL, J., KNIGHT, J. C., AND DAVIDSON, J. W.
Protection of software-based survivability mechanisms. In Pro-
ceedings of the 2001 International Conference on Dependable
Systems and Networks (2001).
[72] WANG, T., WEI, T., GU, G., AND ZOU, W. Checksum-aware
fuzzing combined with dynamic taint analysis and symbolic ex-
ecution. ACM Transactions on Information and System Security
(TISSEC) 14, 15 (September 2011).
[73] WANG, X., JHI, Y.-C., ZHU, S., AND LIU, P. Behavior based
software theft detection. In Proceedings of the 16th ACM Con-
ference on Computer and Communications Security (CCS’09)
(2009).
[74] WARREN, H. S. Hacker’s Delight. Addison-Wesley Longman
Publishing Co., Inc., Boston, MA, USA, 2002.
[75] XU, D., MING, J., AND WU, D. Cryptographic function de-
tection in obfuscated binaries via bit-precise symbolic loop map-
ping. In Proceedings of the 38th IEEE Symposium on Security
and Privacy (S&P’17) (2017).
[76] XU, Z., ZHANG, J., GU, G., AND LIN, Z. AUTOVAC: Au-
tomatically extracting system resource constraints and generat-
ing vaccines for malware immunization. In Proceedings of the
33rd International Conference on Distributed Computing Sys-
tems (ICDCS’13) (2013).
[77] XU, Z., ZHANG, J., GU, G., AND LIN, Z. GoldenEye: Efﬁ-
ciently and effectively unveiling malwares targeted environment.
In Proceedings of the 17th International Symposium on Research
in Attacks Intrusions and Defenses (RAID’14) (2014).
[78] YADEGARI, B., AND DEBRAY, S. Symbolic execution of obfus-
cated code. In Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security (CCS’15) (2015).
[79] YADEGARI, B., JOHANNESMEYER, B., WHITELY, B., AND
DEBRAY, S. A generic approach to automatic deobfuscation of
executable code. In Proceedings of the 36th IEEE Symposium on
Security and Privacy (S&P’15) (2015).
[80] ZHANG, X., GUPTA, R., AND ZHANG, Y. Precise dynamic slic-
ing algorithms. In Proceedings of the 25th International Confer-
ence on Software Engineering (ICSE’03) (2003).
USENIX Association
26th USENIX Security Symposium    269
int isPowerOfTwo 1 (unsigned int x)
{
/∗ While x is even and > 1 ∗/
while (((x % 2) == 0) && x > 1)
x /= 2;
return (x == 1);
int isPowerOfTwo 2 (unsigned int x)
{
unsigned int numberOfOneBits = 0;
while(x && numberOfOneBits >= 1;
numberOfOneBits++;
}
return (numberOfOneBits == 1);
Figure 12: Two different isPowerOfTwo algorithms
check if an unsigned integer is a power of 2.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
}
}
}
Appendix
Table 7: Examples: critical system calls/Windows API.
Object
File
Critical system calls/Windows API
NtCreateFile, NtOpenFile, NtClose
NtQueryDirectoryFile, NtSetInformationFile
Registry NtCreateKey, NtOpenKey, NtSaveKey
Memory NtAllocateVirtualMemory, NtMapViewOfSection
Process
Thread
Network
Desktop
Other
NtWriteVirtualMemory
NtCreateProcess, NtOpenProcess , NtTerminateProcess
NtCreateThread, NtResumeThread, NtTerminateThread
connect, bind, send, recv, gethostname
CreateDesktop, SwitchDesktop, SetThreadDesktop
LoadLibrary, GetProcAddress, GetModuleHandle
Table 8: Instructions with implicit branch logic.
Meaning
Conditional move
Set operand to 1 on condition, or 0 otherwise
Compare and then swap
Instructions
CMOVcc
SETcc
CMPXCHG
REP-preﬁxed Repeated operations, the upper limit is stored in ecx
JECXZ
LOOP
Jump if ecx register is 0
Performs a loop operation using ecx as a counter
 cmp     [ebp+8], 0
 jnz    loc_8000016
 loc_8000016:
 mov     eax, [ebp+8]
 and     eax, 1
 add     [ebp-0xC], eax
 shr     [ebp+8], 1
 printf ((cid:3247)\d(cid:3248),count)
(a)
 cmp     [ebp+8], 0
 jnz    loc_800004D
 printf ((cid:3247)\d(cid:3248),count)
 loc_800004D:
 mov     eax, [ebp+8]
 sub     eax, 1
 and     [ebp+8], eax
 add     [ebp-0xC], 1
(b)
 mov     eax, [ebp+8]
 mov     edx, eax
 and     edx, 55555555h
 mov     eax, [ebp+8]
 shr     eax, 1
 and     eax, 55555555h
 add     eax, edx
 mov     [ebp+8], eax
 mov     eax, [ebp+8]
 mov     edx, eax
 and     edx, 33333333h
 mov     eax, [ebp+8]
 shr     eax, 2
 and     eax, 33333333h
 add     eax, edx
 mov     [ebp+8], eax
 mov     eax, [ebp+8]
 mov     edx, eax
 and     edx, 0F0F0F0Fh
 mov     eax, [ebp+8]
 shr     eax, 4
 and     eax, 0F0F0F0Fh
 add     eax, edx
 mov     [ebp+8], eax
 mov     eax, [ebp+8]
 mov     edx, eax
 and     edx, 0FF00FFh
 mov     eax, [ebp+8]
 shr     eax, 8
 and     eax, 0FF00FFh
 add     eax, edx
 mov     [ebp+8], eax
 mov     eax, [ebp+8]
 movzx   edx, ax
 mov     eax, [ebp+8]
 shr     eax, 10h
 add     eax, edx
 mov     [ebp+8], eax
 printf ((cid:3247)\d(cid:3248),n)
(c)
Figure 11: The disassembly code of three BitCount al-
gorithms shown in Figure 3. The grey basic blocks rep-
resent the main loop bodies, which are not matched by
“block-centric” binary difﬁng tools.
unsigned flp2 1 (unsigned x){
x=x|(x>>1);
x=x|(x>>2);
x=x|(x>>4);
x=x|(x>>8);
x=x|(x>>16);
return x−(x>>1);
}
unsigned flp2 2 (unsigned x){
unsigned y=0x80000000;
while(y>x){
y=y>>1;
}
return y;
}
unsigned flp2 3 (unsigned x){
unsigned y;
do{
y=x;
x=x&(x−1);
}while(x!=0);
return y;
Figure 13: Three different flp2 algorithms ﬁnd the
largest number that is power of 2 and less than an given
integer x.
270    26th USENIX Security Symposium
USENIX Association