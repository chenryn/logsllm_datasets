do not believe memory usage is a fundamental limitation of the
architecture or a barrier to scalability.
8 CASE STUDY: HIDDEN SERVICE LOAD
BALANCER
In the “non-anonymous” Internet, it is common to replicate popular
servers, dynamically scale them up and down as demand varies,
and use a load balancer middlebox to direct requests to the least
loaded servers. This is surprisingly difficult in Tor. Here, we show
how to easily do it with Bento.
8.1 Prior approaches
Load balancing over anonymity networks has been introduced
previously. PeerFlow [40] proposes load balancing for Tor relays
through a bandwidth-weighted voting process, limiting the ability
of an adversary to fake the bandwidth.
For hidden services, OnionBalance [59] introduces the notion
of pre-creating replicas and publishing a different descriptor (and
set of Introduction Points) to the hidden service directory for each
replica. The default Tor client will randomly choose an Introduc-
tion Point from those descriptors, thus evenly distributing clients
across replicas. This unfortunately makes it heavily dependent on
6It is difficult to provide exact measurements for memory usage within SGX because
of its inherent security properties and design.
829
IntroductionPointRendezvousPointClientReplicas1Setup2RequestLoadBalancerHSHSHSFigure 5: Per client bandwidth with and without our LoadBalancer function. The plot on the left shows per client download speed
without the LoadBalancer while the plot on the right demonstrates the benefit from utilizing our function. As more clients access the
hidden service, additional replicas are spun up to handle the load.
the maximum number of introduction points available, as well as
limiting adaptability and exhibiting slow failover [76].
To improve the scalability of hidden services, Sucu introduces ad-
ditional techniques for load balancing [76]. The primary technique
performs balancing at the circuit level and requires modifications
to the Tor source code.
8.2 Function overview
LoadBalancer can spin up new hidden service replicas and di-
rect client requests to (or away from) replicas to distribute load
and improve performance. Similar to how hidden services operate
today, LoadBalancer establishes introduction points and listens
for clients’ incoming requests to join them at a rendezvous point.
However, rather than connect to the rendezvous point itself, Load-
Balancer chooses from a set of replicas (or spins up a new replica)
and instructs the replica to connect to the rendezvous point on
its behalf. To create a replica, the LoadBalancer copies all files
(including the hostname and private key) to the new instance; this
motivates deploying LoadBalancer within conclaves. Figure 4
provides an overview.
LoadBalancer receives periodic messages from replicas describ-
ing their load, and uses high- and low-watermark thresholds to
determine when to create or remove a replica. Replica creation is
transparent to clients: there is but one set of introduction points
(that the LoadBalancer establishes), and, naturally, clients never
learn the identities of the hidden service nodes. Our current selec-
tion process randomly chooses a replica from all active middlebox
nodes, but this could be more sophisticated, taking into considera-
tion properties like geography, latency, etc.
8.3 Evaluation
We evaluated LoadBalancer with multiple replicas of our hidden
service running on the Tor network and varying load on the hidden
service.
Our experiments are performed with four Tor nodes that host
the hidden service (Amazon EC2 T2 instances with 2 vCPUs, 4
GB RAM and Ubuntu 18.04 OS) and thirteen clients (Amazon EC2
micro instances with Ubuntu 16.04, 1 GiB Memory, 1 CPU). Clients
arrive at roughly 1sec intervals, and each client downloads a 10
MB file from the hidden service. We perform the experiment with
and without LoadBalancer, keeping the environment consistent
across runs.
Figure 5 shows the results. Without the LoadBalancer, we can
see that the download speed of each client reaches roughly the same
maximum, as the clients share the single server’s bandwidth, and
the clients take roughly the same amount of time to download the
file. With LoadBalancer configured to permit at most two clients
at a time, we observe considerably improved use of resources. At its
peak, a total of four machines (the original plus three replicas) ser-
vice the clients’ requests, resulting in shorter download times, more
dedicated use of each replica’s bandwidth, and better performance
overall.
9 OTHER FUNCTIONS
Here, we demonstrate Bento’s breadth in solving a wide range
of problems by briefly describing other functions we have imple-
mented. These span a wide range of application domains, and some
of them address longstanding questions within the Tor community.
9.1 Cover Traffic
Anonymity systems that offer “strong anonymity” [22] send cover
traffic whenever there are hosts with nothing to send. This ensures
that the size of the anonymity set (the set of principals who could
have taken a given observed action) is as close to the entire set of
participants as possible. Tor explicitly chose not to do this, instead
preferring efficient, low-latency use of its collective resources, under
the assumption that if it was fast and easy enough to use, then
increased usage would naturally create additional cover traffic.
Unfortunately, that is not always the case. Circuit fingerprinting
and website fingerprinting attacks are facilitated by the fact that
there is not always sufficient cover traffic.
830
 0 50 100 150 200 250 300 350 400 450 0 10 20 30 40 50 60 70 80Download Speed (KB/s)Time (s)Client 1Client 2Client 3Client 4Client 5Client 6Client 7Client 8Client 9Client 10Client 11Client 12Client 13 0 50 100 150 200 250 300 350 400 450 0 10 20 30 40 50 60 70 80Download Speed (KB/s)Time (s)Client 1Client 2Client 3Client 4Client 5Client 6Client 7Client 8Client 9Client 10Client 11Client 12Client 13Function overview Cover instructs a Bento box to ensure that
a given circuit always transmits at a fixed rate, sending junk traffic
if it has no legitimate traffic to send.
To see the strength of this simple primitive, consider how it could
compose with Browser: a client could establish bidirectional cover
traffic with an exit node, then initiate the download of a webpage.
Instead of waiting until the webpage is fully downloaded to begin
sending it, the Bento box could send back immediately, permitting
support for interactive webpages without sacrificing anonymity.
9.2 Dropbox
In developing other functions, we found it useful to be able to
ephemerally store files in the Tor network. Allowing users to store
files without having to remain online gives them the flexibility to
thwart attackers by going offline without having to interrupt their
computation. More generally, it provides a level of indirection that
is useful in composing functions, making this deceptively simple
function quite powerful.
Function overview After a user installs a Dropbox function
on a middlebox, the function operates in two phases. The first
phase accepts a put request, along with the invocation token, which
serves as a capability [88] permitting access to that dropbox. When
Dropbox receives a put request with the appropriate token, it saves
the data in the function’s chrooted directory and, if written to disk,
using an ephemeral key stored in the enclave (§5.4). The second
phase permits get requests with the same invocation token, up to
either some maximum amount of bandwidth, number of requests, or
expiry time, after which the function deletes the file and terminates.
9.3 Shard
Functions like Dropbox provide a level of indirection: users can
store a file at one point in time, keep it stored in the network, and
return at a later time to retrieve it. Although powerful, it also intro-
duces some potential concerns: Suppose an adversary’s machine
were used to run the Browser function in Figure 2, outside of a con-
clave. Then, the adversary would not know the client who initiated
the connection, but he would know the location of the Dropbox
function. If the stored file is only available at that one known lo-
cation in the network, then it puts the attacker in a potentially
powerful position to launch a fingerprinting attack. Additionally,
with only a single copy of a file, if the machine hosting Dropbox
crashes, then the file will be lost.
Function overview The Shard function addresses these con-
cerns by applying a digital fountain approach [11, 53] to spread
a single file across multiple machines. It takes as input a file, a
number of shards 𝑁 to create, and a minimum number necessary
to reconstruct the file, 1 ≤ 𝑘 ≤ 𝑁 . Shard uses standard linear
encoding techniques to ensure that retrieving any 𝑘 of the 𝑁 shards
suffices to reconstruct the file. (In the trivial case where 𝑘 = 1 and
𝑁 > 1, Shard simply replicates.) Shard then deploys these shards
by invoking the Dropbox function on other machines. When the
user is ready to obtain the files, it chooses a subset of drop-off
locations.
This empowers users in three ways. First, if any of the Dropbox
nodes fail, then the file is still available. Second, if a user subse-
quently learns that certain regions of the network are less trust-
worthy or more susceptible to attack, then she has flexibility over
where she accesses the data. Finally, using multiple shards increases
the probability that one user’s shards are at the same location as
other users’, resulting in additional cover traffic.
9.4 Future ideas
Multipath routing An open research question in Tor is how to
efficiently use the network’s overall bandwidth, as well as adapt to
traffic congestion. Several works [5, 87] propose adding a multipath
routing scheme that splits a stream across multiple circuits sharing
a common exit relay, and that dynamically schedules traffic over
the stream’s circuits based on their throughput. Rather than modify
the Tor code base, we are exploring whether multipath routing
designs can be implemented as Bento functions.
Geographical avoidance Prior work has introduced provable
avoidance routing [49, 51, 52]: allowing users to specify geographic
regions where packets should not traverse, and then providing
proof that the packets did not go through such regions. However,
as these techniques rely on end-to-end RTT measurements and
knowledge of the location of each Tor relay on the circuit, they
are not immediately applicable to hidden services, wherein no one
entity (neither the source nor hidden service) knows the entire end-
to-end circuit. We are exploring whether functions, running inside
an enclave at the rendezvous point, enable computing the proofs of
avoidance while maintaining privacy.
Hidden service DDoS defense To mitigate DDoS attacks against
hidden services, Tor supports client authentication to the HSDirs
and introduction points—solutions that are only appropriate for
private hidden services. A number of proposals [23, 60, 63, 64]
recommend additional defenses that change the topology of the
introduction points, add new cell types to assist in rate limiting, or
require client-side proofs of work prior to establishing a connection.
We are exploring whether these approaches can be implemented as
function-specific protocols, rather than modifying Tor’s existing
protocols.
10 ETHICAL CONSIDERATIONS
As our experiments were performed over the actual Tor network,
we were careful not to impact the security and privacy of its users
or the performance of the network. We ran our own exit relays
and hidden service servers (as this is where our Bento functions
are deployed), and experimented with fingerprinting only our own
traffic.
11 LIMITATIONS AND FUTURE WORK
This paper might raise more questions than it answers; we believe
that is a good thing! In seeking to achieve properties that would
be much more complicated or inefficient in the current design of
anonymity networks like Tor, we allowed ourselves to take rather
drastic departures. As a result, we have identified important goals
for any programmable anonymity network, and have provided a
proof-of-concept architecture that achieves them.
831
That said, we acknowledge there is a considerable amount of
future work necessary for programmable anonymity networks to
become a practical reality. Though we have discussed many of
Bento’s limitations throughout the paper, we summarize them here,
along with a few others that were not previously discussed. We
believe that many of the existing limitations provide interesting
avenues for future work.
Reliance on a TEE One limitation is that Bento explicitly includes
a trusted execution environment in its trusted compute base (Intel
SGX in our implementation). If the TEE were compromised, what
would that mean for Bento? In the worst case, an attack on the TEE
would allow a Bento operator to possibly introspect on running
functions, view a user’s data as the function executes, or alter the
execution of a function—a complete breakdown of anonymity for
some functions. Moreover, the Bento operator might also lose access
to the plausible deniability that we discuss in the case of abusive
content.
These concerns are mitigated somewhat by the fact that Bento
permits flexibility in which TEEs users are willing to trust. Bento is
built on top of conclaves—which are not strictly bound to SGX—and
thus we too can work with any TEE that has similar properties.
Even without access to a TEE, we believe the programmable
anonymity networks and Bento can still be useful. Many basic
functions, such as Cover, that do not contain sensitive information
could potentially be executed even without a TEE (see our discus-
sion in Section 5.4). We also note that trusted hardware is just one
way to achieve the properties of a TEE. One interesting avenue for
future work would be to explore if there are other ways to achieve
our stated goals without using a TEE, such as with computation
over encrypted traffic [62, 71].
Lack of fairness Another limitation that we have previously
discussed is that Bento currently does not have a mechanism im-
plemented for ensuring fairness among users. This leads to several
concerns in the case of malicious users, such as loading numer-
ous functions on many Bento servers to prevent others from us-
ing the system or leveraging fuctions and middlebox resources
to carry out DDoS attacks. We believe that this is an interesting
area of future work, and that many existing research areas such as
proofs of work [9, 25], anonymous credentials [18], or combinations
thereof [14, 21, 31] are potentially promising.
Unclear incentives for adoption In this paper we do not solve
a number of questions pertaining to incentives for users to run
Bento, nor for the Tor community at large to adopt it. Perhaps the
best way to answer this question is a further demonstration of the
power of programmable anonymity networks: What else can be
done with Bento? What other problems can be solved, features can
be introduced, or spaces in the anonymity trilemma explored once
one has access to a programmable Tor network? This paper is the
first step towards programmable anonymity networks; to facilitate
further work in this vein, we have made our code publicly available.
12 CONCLUSION
We introduced programmable anonymity networks and showed
them to be possible and useful. We showed with a series of ap-
plications that even simple programs running on nodes in the Tor
832
network can result in significant improvements to security, per-
formance, and resilience. We also addressed the elephant in the
room—the natural concerns of running untrusted code on other
users’ machines—and presented an architecture that leverages re-
cent results in trusted execution environments to ensure safety
for both users and relay operators. We view this paper as the first
step towards programmable anonymity networks, and hope that it
gives rise to exploration of new domains in which to apply NFV. To
assist in these future efforts, we have made the Bento code publicly
available at https://bento.cs.umd.edu.
ACKNOWLEDGMENTS
We thank our shepherd, Barath Raghavan, and the anonymous
reviewers for their helpful feedback. This work was supported in
part by NSF grants CNS-1816422, CNS-1816802, and CNS-1901325.
REFERENCES
[1] D. Eastlake 3rd and Huawei. 2011. Transport Layer Security (TLS) Extensions:
Extension Definitions. RFC 6066. (Jan. 2011). http://www.ietf.org/rfc/
rfc6066.txt
[2] Adil Ahmad, Kyungtae Kim, Muhammad Ihsanulhaq Sarfaraz, and Byoungyoung
Lee. 2018. OBLIVIATE: A Data Oblivious Filesystem for Intel SGX.. In Network
and Distributed System Security Symposium (NDSS).
[3] Masoud Akhoondi, Curtis Yu, and Harsha V. Madhyastha. 2013. LASTor: A
Low-Latency AS-Aware Tor Client. In IEEE Symposium on Security and Privacy.
[4] Alexa Top 500 Global Sites [n. d.]. Alexa Top 500 Global Sites. http://www.
alexa.com/topsites. ([n. d.]).
[5] Mashael AlSabah, Kevin Bauer, Tariq Elahi, and Ian Goldberg. 2013. The Path
Less Travelled: Overcoming Tor’s Bottlenecks with Traffic Splitting. In Privacy
Enhancing Technologies Symposium (PETS).
[6] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative
technology for CPU based attestation and sealing. In International Workshop on
Hardware and Architectural Support for Security and Privacy (HASP).
[7] James Anderson, Ryan Braud, Rishi Kapoor, George Porter, and Amin Vah-
dat. 2012. xOMB: Extensible Open Middleboxes with Commodity Servers . In
ACM/IEEE Symposium on Architectures for Networking and Communications Sys-
tems (ANCS).
[8] Bilal Anwer, Theophilus Benson, Nick Feamster, and Dave Levin. 2015. Program-
ming Slick Network Functions. In Symposium on SDR Research (SOSR).
[9] Adam Back. [n. d.]. Hashcash. http://www.cypherspace.org/hashcash/.
([n. d.]).
[10] Alex Biryukov, Ivan Pustogarov, and Ralf-Philipp Weinmann. 2012. TorScan:
Tracing long-lived connections and differential scanning attacks. In Computer
Security–ESORICS 2012. Springer, 469–486.
[11] John W. Byers, Michael Luby, Michael Mitzenmacher, and Ashutosh Rege. 1998.
A Digital Fountain Approach to Reliable Distribution of Bulk Data. In ACM
SIGCOMM.
[12] Xiang Cai, Rishab Nithyanand, Tao Wang, Rob Johnson, and Ian Goldberg. 2014.
A Systematic Approach to Developing and Evaluating Website Fingerprinting