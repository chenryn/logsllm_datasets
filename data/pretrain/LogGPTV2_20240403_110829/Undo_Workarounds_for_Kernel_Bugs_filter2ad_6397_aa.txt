title:Undo Workarounds for Kernel Bugs
author:Seyed Mohammadjavad Seyed Talebi and
Zhihao Yao and
Ardalan Amiri Sani and
Zhiyun Qian and
Daniel Austin
Undo Workarounds for Kernel Bugs
Seyed Mohammadjavad Seyed Talebi, Zhihao Yao, and Ardalan Amiri Sani, 
UC Irvine; Zhiyun Qian, UC Riverside; Daniel Austin, Atlassian
https://www.usenix.org/conference/usenixsecurity21/presentation/talebi
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Undo Workarounds for Kernel Bugs
Seyed Mohammadjavad Seyed Talebi(cid:63), Zhihao Yao(cid:63)
Ardalan Amiri Sani(cid:63), Zhiyun Qian†, Daniel Austin‡
(cid:63)UC Irvine, †UC Riverside, ‡Atlassian∗
Abstract
OS kernels are full of bugs resulting in security, reliability,
and usability issues. Several kernel fuzzers have recently been
developed to ﬁnd these bugs and have proven to be effective.
Yet, bugs take several months to be patched once they are
discovered. In this window of vulnerability, bugs continue
to pose concerns. We present workarounds for kernel bugs,
called bowknots, which maintain the functionality of the sys-
tem even when bugs are triggered, are applicable to many ker-
nel bugs, do not cause noticeable performance overhead, and
have a small kernel footprint. The key idea behind bowknots
is to undo the side effects of the in-ﬂight syscall that triggers
a bug, effectively neutralizing the syscall. We also present a
static analysis tool, called Hecaton, that generates bowknots
automatically and inserts them into the kernel. Through exten-
sive evaluations on the kernel of Android devices as well as
x86 upstream kernels, we demonstrate that bowknots are ef-
fective in mitigating kernel bugs and vulnerabilities. We also
show that Hecaton is capable of generating the right bowknots
fully automatically in majority of cases, and requires minimal
help from the analyst for the rest. Finally, we demonstrate the
beneﬁts of bowknots in improving the efﬁciency of kernel
fuzzing by eliminating repetitive reboots.
1 Introduction
Commodity OS kernels are monolithic, large, and hence full
of bugs. Bugs in the kernel cause important problems. First,
they risk the system’s security as some bugs might be ex-
ploitable vulnerabilities. The kernel is a highly privileged
layer in the system software stack and hence is attractive to at-
tackers. Indeed, OS kernels are hot targets for security attacks
these days. For example, according to Google, an increasing
number of attacks on mobile devices are targeting the ker-
nel (i.e., 44% of attacks in 2016 vs. 9% and 4% of them in
2015 and 2014, respectively) [9]. Second, they impact the
∗This research started while Mr. Austin was with Google, as part of the
Android Security team.
reliability and usability of the system. Even a simple crash
bug, e.g., a null pointer dereference, results in a system hang
or reboot, causing usability issues for the users. Even worse,
bugs can corrupt the state of the software and hardware and
lead to unexpected behavior. Finally, as we will show, kernel
bugs can even pose practical challenges for kernel fuzzing by
inducing repetitive reboots and wasting the fuzzing time.
The common practice today is to ﬁnd these bugs and patch
them. There has been a lot of progress recently to automate the
ﬁrst step (i.e., ﬁnding bugs). More speciﬁcally, several kernel
fuzzers have been recently developed such as Syzkaller [13],
kAFL [36], Digtool [32], and MoonShine [31]. Indeed, these
fuzzers have been successfully used to ﬁnd bugs in the ker-
nel [10,12,37]. However, the second step (i.e., patching bugs)
remains a highly manual and lengthy process. In practice,
this requires reporting the bug to the developers of the code,
e.g., the vendor in charge of a device driver, and waiting for a
patch. Unfortunately, this wait can take months for the bug
to sit in a queue, be evaluated by developers, and get a patch
developed, tested, and merged into the kernel. Our study of
bugs found by Syzkaller [12] shows that bugs have taken on
average 66 days to be patched. Moreover, at the time of the
study (November 2019), there were several open bugs that
were waiting for a patch for an average of 233 days. While
waiting for a patch, the kernel remains vulnerable.
In this paper, we introduce workarounds for kernel bugs be-
fore they are correctly patched. We refer to such a workaround
as a Bug undO Workaround for KerNel sOlidiTy (bowknot).
A bowknot has ﬁve important properties. First, it is fast to
generate. Unlike a proper patch for a bug that takes months
to be ready, a bowknot takes at most a few hours. Second, it
is designed to maintain the system’s functionality even if the
bug is triggered1. Kernel bugs almost always are triggered
when unanticipated syscalls are issued, either by mistake by
a faulty application or intentionally by malware. A bowknot
undoes the side effects of this faulty or malicious syscall in-
1In the paper, we use the term “trigger a bug” to mean either executing
buggy code or triggering a kernel sanitizer warning (or even a manual check)
right before executing buggy code. See §4.1 for more details.
USENIX Association
30th USENIX Security Symposium    2381
vocation, allowing the kernel to continue to correctly serve
well-structured syscalls. Third, a bowknot does not require
any special hardware support, e.g., power management sup-
port in a driver needed for checkpointing (§8), and hence
is applicable to a large number of bugs in various devices.
Fourth, a bowknot does not add any noticeable performance
overhead. This is because it does not do much as long as the
bug is not triggered. Only when the bug is triggered, it is
invoked to undo its side effects. Finally, a bowknot requires
small changes to the kernel. It requires modiﬁcations only to
the functions in the execution path that triggers the bug.
The key idea behind a bowknot is to undo the effects of
the syscall that triggers a bug. In other words, when a syscall
is issued and triggers a bug, the bowknot gets activated and
neutralizes the effects of that syscall. Undoing the syscall at
arbitrary points of execution is challenging since not only a
syscall can affect the kernel memory state, it can even change
the state of I/O devices, e.g., a camera. The latter is especially
important for device drivers, which contain most of the kernel
bugs (e.g., 85% of bugs in Android kernels [44]). To address
this problem, we leverage existing undo statements in error
handling blocks in the kernel to generate the right undo blocks
for the functions in the execution path of the bug.
Bowknots, as described, achieve all the aforementioned
properties, except for one. More speciﬁcally, generating a
bowknot manually, while feasible, is challenging and time-
consuming. Therefore, to satisfy this requirement, we in-
troduce Hecaton, a static analysis tool that helps generate
bowknots automatically2. Hecaton analyzes the whole kernel
to ﬁnd the relationship between state-mutating statements in
the kernel and their corresponding undo statements in error
handling basic blocks. It then uses this knowledge to gen-
erate the right undo block for the function containing the
bug and the parent functions in the call stack. It also auto-
matically inserts the undo blocks into the kernel. Due to
the limitations discussed in §5.3, in some cases, Hecaton’s
automatically-generated bowknots need manual alterations.
As a result, Hecaton provides a conﬁdence score for each
bowknot. This score helps the analyst determine whether a
manual ﬁx is required, before spending any time on testing the
bowknot. Our evaluations with real bugs show the conﬁdence
score correctly predicts the completeness of the automatically
generated bowknots in 90% of the cases.
We evaluate bowknots and Hecaton with 113 real bugs,
CVEs, and automatically injected bugs in several kernel com-
ponents including the IPC subsystem, networking stack, ﬁle
system, and device drivers in different Android devices and
x86 upstream Linux kernels. First, we show that bowknots
are effective workarounds for bugs. More speciﬁcally, we
show that bowknots can effectively mitigate 92.3% of real
bugs and CVEs and 94.6% of injected bugs. Second, we show
that bowknots manage to maintain the system functionality
2Hecaton’s source code is available at https://trusslab.github.io/hecaton/
in 87.6% of these cases. Third, we show that Hecaton auto-
matically generates complete bowknots for 64.6% of kernel
bugs. For the rest, it only requires adding on average 3 state-
ments and less than 2 hours of work by the analyst. Fourth, we
evaluate the correctness of bowknots’ undo capability with
a manual case-by-case study on 10 randomly selected real
bugs. We show that for 6 out of these 10 bugs, automatically
generated bowknots completely undo the side effects of the
buggy syscall. Fifth, we show the effectiveness of bowknots
in improving the efﬁciency of kernel fuzzing by effectively
eliminating repetitive reboots. Sixth, we empirically compare
bowknots with a recent bug workaround solution, Talos [18].
Bowknots signiﬁcantly outperform Talos for bug mitigation,
for maintaining the system functionality, and for improving
kernel fuzzing in the face of repetitive reboots. Finally, we
also evaluate the performance overhead of bowknot on nor-
mal execution of kernel components. We show that bowknots’
overhead is less than the baseline variations for TCP through-
put and GPU framerate even if we instrument all their corre-
sponding kernel functions with bowknots.
2 Motivation
2.1 Unpatched Kernel Bugs
As mentioned, kernel bugs pose security, reliability, and us-
ability problems. Unfortunately, even when discovered, these
bugs do not get patched immediately and there is a notice-
able delay from when a bug is reported until when a patch is
available. One reason behind this delay is that bugs can be
complex and ﬁxing them requires time and effort. To demon-
strate this, we studied the bugs found by Syzbot [12], an
automated fuzzing system based on Syzkaller [13]. At the
time of the study (November 2019), there were 1691 bugs
that were ﬁxed. Our analysis shows that these bugs took an
average of 66 days to get ﬁxed. Moreover, there were 503
bugs that were still open, for an average of 232 days.
Moreover, bugs in device drivers (which constitute 85%
of the kernel bugs [44]) might take even longer as the bug
needs to be reported to the developers of the driver. For ex-
ample, bugs in several drivers of Android smartphones based
on Qualcomm chipsets need to be ﬁxed by Qualcomm. Qual-
comm says, "the company hopes to patch disclosed ﬂaws and
vulnerabilities within 90 days" [7].
2.2 Problems with Unpatched Kernel Bugs
Security. The most important problem with unpatched ker-
nel bugs is that they endanger the system’s security. Bugs
might be exploitable, allowing attackers to mount privilege
escalation attacks. Given the high privileges of the kernel, a
successful attack can be devastating for the victim’s device.
Reliability and usability. Even if not exploitable, kernel
bugs cause reliability and usability problems, e.g., due to a
2382    30th USENIX Security Symposium
USENIX Association
Figure 1: Repetitive reboots when fuzzing the camera device driver of Nexus 5X.
hang or reboot. Even worse, a bug might corrupt the state of
the hardware and software, resulting in unexpected behavior.
Inefﬁcient kernel fuzzing.
A lesser-known problem of
unpatched kernel bugs is that they cause practical problems for
fuzzing the kernel by causing repetitive reboots [38]. Kernel
bugs, when triggered by the fuzzer, result in the reboot of the
system. Unfortunately, reboots waste a noticeable amount of
fuzzing time. The reboot itself takes 10s of seconds to minutes
according to our own experience with various Android-based
mobile devices and according to others [6]. In addition to
wasting fuzzing time, a reboot resets the state of the system,
throwing away the progress made by the fuzzer in mutating
the state in order to ﬁnd new bugs.
Unfortunately, modern feedback-driven fuzzers such as
Syzkaller and AFL may trigger the same bug many times
resulting in repetitive reboots, i.e., costly and useless reboots
caused by the same bug, due to the feedback-driven fuzzing
algorithm [5, 8] and some bugs being easy to trigger.
Figure 1 shows the timeline for one of these fuzzing ses-
sions (i.e., fuzzing the camera device driver of Nexus 5X
using Syzkaller). As can be seen, reboots happen very fre-
quently, resulting in only 44.6% of the overall fuzzer uptime
being spent on fuzzing (i.e., fuzzing time). The main reason
for most reboots is triggering only 6 unique bugs again and
again.
2.3 Current Approaches
Approach I: mitigation through code disabling. One pos-
sible approach is to try to mitigate a bug by disabling the part
of the code that contains the bug. This can be done at different
granularities. For example, the buggy subcomponent within
the code can be disabled. If applied to the kernel, one can
imagine disabling a device driver if it has a bug. It can also
be applied at the function level. Talos uses this approach [18].
It neutralizes a vulnerability in a codebase by disabling the
function that contains it. The function instead is instrumented
to return an appropriate error message.
Although disabling the code can mitigate the bugs and
vulnerabilities in many cases, it very likely breaks the system
functionality. Losing functionality in a system will deter the
use of this approach in practice. This approach does not help
with the kernel fuzzing efﬁciency either. This is because code
disabling limits the code coverage of the fuzzer (see §7.1.1
and §7.4 for empirical results).
Approach II: dirty patching. One might wonder whether
the analyst can perform a “quick and dirty patch” to ﬁx the
bug. For example, if the bug is a null pointer dereference,
they can add a null pointer check to return directly to avoid
crashing. Unfortunately, dirty patching suffers from similar
drawbacks as code disabling. That is, it can break the func-
tionality of the system or result in unexpected behavior if not
done carefully. In addition, such patches might still need engi-
neering effort. For example, a dirty patch for a use-after-free
bug resulting from a race condition is not trivial.
3 Overview
3.1 Goals
Our goal is to design a bug workaround solution that can
mitigate the undesirable side effects of a bug until a proper
patch is available. In other words, the applicability of the
workaround is in the window of vulnerability from when the
bug is ﬁrst discovered until when the correct patch is available.
The main users of kernel bug workarounds are kernel secu-
rity analysts, OS vendors, and IT departments. For example,
the security team in an OS vendor company might ﬁnd a
bug and report it to the corresponding developers, e.g., an-
other company in charge of a device driver or a development
team within the same company. While they wait for the patch,
they can use a workaround to mitigate the bug. Or an IT
department might apply a workaround for a known bug in the
company’s servers or employees’ workstations. Finally, secu-
rity analysts can leverage this tool to mitigate kernel bugs in
their own devices, e.g., to improve the efﬁciency of their ker-
nel fuzzing sessions. To show our solution’s applicability, we
implement and test it on several targets, such as ARM-based
Android smartphones and x86-based Linux kernels.
We identify ﬁve important properties that a bug workaround
solution must satisfy. First, it should be fast to generate, other-
wise it will not be available soon enough to help in the afore-
mentioned window of vulnerability. Second, a workaround
for a kernel bug should maintain the system’s functionality
even if the bug is triggered. Third, the workaround approach
should be widely applicable to different kernel components
and different kernels. Moreover, it should not require special
hardware support, e.g., to checkpoint the state of an I/O de-
vice (§8). Fourth, a workaround should not add any noticeable
performance overhead. Finally, a workaround should require
USENIX Association
30th USENIX Security Symposium    2383
RebootingFuzzing 50 100 150 200Time (minutes)effects of a syscall on the software and hardware state in case
of expected errors, such as a null pointer or a busy I/O error
in some ﬁxed code locations. While the kernel does not have
error handling code for arbitrary bug sites in the execution
of a syscall, the idea in Hecaton is to leverage existing undo
statements in these blocks to generate the right undo code
needed for a bowknot. More speciﬁcally, Hecaton leverages