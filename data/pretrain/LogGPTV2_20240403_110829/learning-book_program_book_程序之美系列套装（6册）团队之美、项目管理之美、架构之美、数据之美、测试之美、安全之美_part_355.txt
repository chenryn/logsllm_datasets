## Page 2027
像很多新的团队一样，我们测试自动化的三角形是倒置的。借用
PatrickWilson-Welsh的名言，我们需要把测试三角形翻转为正面朝
上。
一旦程序员们在测试驱动开发方面有了兴趣，并且有精力去致力于
一个新的测试层时，就意味着是时候开始在功能测试中使用FitNesse
了。我找到一个程序员，我问他：“你能帮我为你现在工作的这个故
事写FitNesse测试吗？”他写出来后发现这样操作更简单易行，并且
告诉了团队里的其他成员这个好处。进行更多的几次选代后，每个
程序员都试用过了FitNesse，也多发现了这个尝试是值得的。我们开
始为每个故事写FitNesse测试任务卡片，因为这是“可FitNesse"的。
当我们搭建FitNesse回归测试程序组时，我们的测试自动化金字塔开
始改变形状了。一段时间后，金字塔由三角形变得更像一个菱形，
中间的FitNesse层变得突出。随着越来越多的代码在新的架构中跟随
着测试驱动开发被执行，金字塔的底部单位层次延伸到了更高的层
次。我们虽说一直在写WebTest冒烟测试脚本，但是在回归测试中已
经算是很小的比例了。
等到2009年4月时，我们已经完成了3864个单元测试，474个Fit
Nesse测试和99个WebTest脚本。我们已经把测试自动化金字塔翻转
到了正确的位置。每个“测试”包含许多断言，所以这倍增了成千上
万的自动回归测试。
这些测试在多个连续构建中运行。运行JUnit测试构建大约需要8分
钟。这几天的构建中可能不出差错，也可能一天出很多次错；这取
决于这个正在进行中的故事，以及是否有人在做一个大的重构或是
否在多重领域中运行着代码。这样这个人就可以在破坏了构建的同
时马上作出修复，而且当他需要帮助时，整个团队都是时刻准备着
的。
从功能性测试和GUI测试中得到完整反馈，也就是我们所说的“完全
构建”，这需要花几个小时的时间。一般来说，回归测试在选代中能
被捕捉好儿次。我们很高兴这些缺陷没有被流通至生产流程而是及
时修复了。每两个小时，我们就能知道此构建是否是稳定的、可发
布的。这种价值是非常宝贵的。
没有哪个自动化测试套件是完全可靠的，但这个安全网在需要重构
时和实施代码时能为我们提供帮助，免除了我们对产生意外后果的
2026
---
## Page 2028
恐惧。它使我们的技术债务达到管理的水平。我们有足够的时间去
做手工探索性测试，也能了解可能的连锁反应。
我们也有很多Watir测试脚本，它们是那些可以添加到回归测试安全
网里的，但是更重要的是，仅仅用手工按键就可以帮我们做更多的
探测。
在UI中为手动测试建立场景时，我们可以设置一两种脚本运行适当
的测试数据，在正确的屏幕上显示，节省了我们好儿个小时的单调
乏味和时间。这样我们就可以用100%的手动测试来超水平完成更多
的场景。
测试驱动开发
掌握单元层次的驱动测试并发似乎比指导开发时学习怎么利用业务
案例和面向业务测试更直截了当。想达到这个目的，很明显FitNesse
是一个好工具，但是解决的途径需要很多次反复测验的参与。
试验
我们发现FitNesse测试写起来真的很简单。当我们一腔热忧把业务案
例转入可执行测试过程中，产品责任人（PO）和我简直失去理智
了。我们团队有一个困滩的、高风险的主题即将接手，这涉及复杂
的算法，而且有一个硬时限。就在我们团队为那些特征并始着手故
事前，产品责任人和我花了几关时间为这个主题的儿个不同的部分
写了可执行的FitNesse测试。
当主题工作的第一个选代周期开始时，程序员们对我们详尽的
FitNesse测试的反应是：“啊？"他们只见树末，不见森林。这些复杂
的、高度详尽的测试场景并没有给他们显示出一个需要写些什么代
码的大方向。另外，测试设计与代码架构并不兼容。
我们必须提供支持了，提供一些重点方面的案例，又重写了所有的
FitNesse测试，但是这也给我们团队上了一课。所以我们现在只在代
码之前写一些高层次的验收测试。在有人可以进行代码任务卡编译
之前，我们都没有开始写详细的可执行的测试。
没有处方可以遵循，不知道什么时候写测试，不知道要写多少测
试，也不知道这些测试要详尽到什么程度。每个团队必须一起实验
2027
---
## Page 2029
并找出可行方案。
规划
我的团队把测试和编码看作一个软件开发过程的两部分。测试和代
码的美是不可能分开的。当我们开始计划这个主题或显式并行指令
计算时，我们把测试当作编写代码了。我们能给这些故事写FitNesse
测试吗？
我们需要新的数据来测试吗？我们当前的测试环境足够了吗？我们
需要任何第三方吗？主题和故事评估都包括了测试活动的所需时
间。
在选代计划期间，我们同时进行着测试和开发两部分的任务卡片。
我们利用敏捷测试象限（图15-4）来帮助进行所有测试类型的思
考，包括何时需要做，以及需要什么工具来做。
敏捷测试象限
自动和手动
面向企业
手动
功能测试
探索性测试
场景
场景
故事测试
可用性测试
原型
UAT（用户验收测试）
模拟
团队
第二象限第三象限
a/β
第一象限第四象限
价产
单元测试
性能和负载测试
组件测试
安全测试
ility测试
自动
面向技术
工具
图15-4敏捷测试象限
当我们开始一个新项目或主题时，可以从解决案例和模拟原型着
手，然后接着考虑做高层次的可以指导开发的测试。这些都是包含
在Q2测试里的。既然我们用的是测试驱动开发，那么Q1测试是给定
的，但是我们在计划的时候，很容易会忽略掉Q3和Q4。这可能需要
2028
---
## Page 2030
提前为如性能测试等活动规划实施正确的工具，以确保有足够的时
间预算去进行探索性测试。
幸运的是，我们的产品责任人史蒂夫把从所有商业利益相关者那边
的每个故事都做到了如他所说的“提前清澈透明”。他写了自己满意
的条件，为每个故事列出自己的清单，并考虑到了法律问题、第三
方的影响，以及是否需要新的报告等。他经常写一些高层次的测试
用例。他明白我们使用测试来进行代码驱动，并给我们提供了一些
现实中的可以转换为可执行测试的例子来帮助我们准备任务。这种
业务团队与技术团队之间的紧密协作是测试之美中必不可少的。
当开始着手一个复杂的主题时，我们会开很长时间的头脑风暴式的
集体讨论会。我们和客户在白板上研究场景，也思考着最好的办法
来设计系统。团队里每个成员都自由地提问，也责献着自己的想
法。有时候甚至一个测试员能比产品责任人提出的解决方案更简单
可行。
按照实例驱动编码
GUI层级的回归测试是成功的关键，尤其是想要继续下去时。一旦我
们不必再手动回归测试上浪费时间，我们就可以开始用FitNesse把理
想的系统行为案例转换成测试驱动开发了。
像之前提到的，我们的产品责任人给我们提供了一些现实中的很有
用的可以转换为可执行测试的例子。这些不是电子白板图像，也不
是电子数据表格的形式。我们后来把这些转换为可执行的FitNesse测
试，就像是图15-5里显示的一样。
fep aurs aul u sprulied ong a
Loan ProcessingFiture
podcadi.r
postpomert
sotsomere
07n
10-31-2005
10-31-200
of
.07
celve paymert
.07
11-01-2005
11-01-2005
ider+stapeliecter1
510
chark
principar appbed tor1
07
809
loanBanceis
图15-5FitNesse测试实例
2029
---
## Page 2031
之前也提到过，当我们计划一个比较大的新主题时，一定是需要考
虑测试的。一些新特征的代码编译起来可能比较直接，但是测试起
来却不简单。选代周期的计划时期，我们为所有的测试任务写任务
卡片。这是一个典型处理贷款付款过程的故事任务卡片。
为申请贷款偿付的利息和本金写高层级测试用例。
为申请贷款偿付的利息和本金写FitNesse测试用例。
为申请贷款偿付的自动化测试写FitNesse代码。
·为处理贷款偿付写CanooWebTest测试。
手动测试处理贷款偿付。
我提到过任何团队成员都可以参加任何测试任务吗？因为我们的应
用程序的测试是很密集的，即使我们是5个程序员与2个测试员的组
合，程序员们也时常需要负担一些测试任务，如写FitNesse任务等。
而且为他们自己的测试驱动开发使用FitNesse测试对他们来说也不是
多稀奇的事情。
坎珂前行
当然，我们的自动化道路也是坎坷的。甚至到了5年之后，一个老大
难问题仍然能让我们栽跟头。这是一个最近发生的例子。我们的
FitNesse版本落后了差不多两年了，到最后终于升级到了最新的版
本。新版本不再生成HTMIL结果文档，用来持续构建生成测试结果的
程序再也用不到了。
我花了几天时间试着把得到的新版本整合到持续构建中，但是却不
能生成正确的结果文档。与此同时，另一个同事正在把持续构建进
程从CruiseControl转换成Hudson。到最后我们一起合作把FitNesse套
件作为另一部分运行在了Hudson构建进程中。我的最主要的功劳就
是求助测试团队，把Hudson作为FitNesse和样式表的插件的形式来得
到结果，并保证这些结果是最必要的格式。我们的同事，一个系统