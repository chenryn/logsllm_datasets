特别令人感兴趣的有下面这些：
界面的介质 － 这是用来实现界面的技术。你可能考虑要使用一个 web 界面的灵活性
来提供给终端用户在任何一个浏览器上控制 rootkit 的操作。然而这大大地提高了安全风险。
认证，加密，防篡改，配置更改跟踪和权限级别这些是在浏览器环境中最为重要的。
你也可以考虑用 Visual Studio 来开发，本章的例子就是。优点有以下这些：物理上安全，
因为访问控制器软件可以在物理上控制；可扩展性好，因为拖拽 Visual Studio 的东西（菜单，
对话框，命令按钮等）适用于对程序的扩展；效率高，因为程序不必遵守一系列如跨浏览器
HTML 或者 java 对虚拟机的需求等；进入市场时间快，因为 Visual Studio 可以快速地从原
型设计跳到程序的实现。
界面 － 这是终端用户最终能看到的视图。可能需要用到一个主页面和一些子页面。要
注意的是 rootkit 的功能不需要映射到用户界面上。界面的目的是控制 rootkit 的功能而 rootkit
的目的是去实现这些功能。这看起来似乎是密切相关的，但是控制应该尽量要简单而实现可
以跟据需要而变得非常复杂。把复杂的实现部分移除是设计界面的一个中要目标。
摘要视图 － 这是用来显示全部状态的页面。市场工作会对这个页面特别感兴趣。圆形
图，三维条形图，彩色编码的活动层和对所有主要控制类型的简单访问都是这个摘要视图的
特色。
控制类型 － 这里是几个控制类型的例子：
监视状态 － 计算机，带 rootkit 的计算机，当前连接的计算机
监视历史 － 连接历史，安装日期，rootkit 版本
事件状态 － 按类型，按计算机，按用户，按日期分类的所有事件，
策略开发 － 创建策略，策略数据库，组策略
策略实现 － 按计算机，按组，按用户实现
升级 － 代码，策略，从供应商中获取，发到计算机，历史
控制面板 － 所有计算机，一组计算机，一台计算机
取证 － 数据捕获，数据收集，记录条目，事故报告
报告 － 报告设计，运到报告，报告输出格式
任务 － 数据取证，rootkit 完整性检测，安装
连接
如前面所说的，rootkit 和控制器之间的通信是目前 rootkit 被检测到的最大原因。要尽
量减少 rootkit 被检测到的可能性，Ghost rootkit 在驱动笫一次被加载的时候启动过程控制连
接。这需要远程控制器监听一个预先指定的端口，并为每个连接开启一个控制线程。
根据需要隐藏程度的不同，连接可以是间歇性的（例如 10 分钟），底层的（例如 TDI），
伪装的（例如伪装成 HTTP 的格式），或者配置多种隐藏通道。在一个友好的环境里，你可
以仅仅是希望能穿透防火墙，这种情况下用没公开的 TDI 连接就足够了。在一个不友好的
环境里，你可能需要把网络接口卡（NIC）设置为混杂模式然后以一个虚构的地址来对通信
进程监视。这个可能性是无限的。
防篡改检测
不论你的 rootkit 的目的是什么，你都会遇到有试图去破坏这个目的的情况。设计的目
标不能总是只考虑好的环境，有太多的变数，太多的聪明用户和太多新的反 roortkit 技术。
相反，设计的目标应该是尽可能快地检测出违规行为。
本章中的例子使用了一个连续 TCP/IP 连接来检测违规行为。如果连接断开了，而客户
端机器还继续回应 ping 命令，那就很可能是 rootkit 受到攻击了。这是一个非常简单的实现，
也是一个非常简单的基于网络管理员用来调查违规行为的原因的反篡改技术。
心跳包是另一个防上违规行为的非常棒的方式，因为即使 rootkit 停止工作了，一个
TCP/IP 连接仍然可以打开。例如，一个用户可能会停止一个用来路由信息到 rootkit 的一个
服务，这是一个不用关闭 rootkti 和控制器之间的连接而破坏 rootkti 的非常有效的方法，但
如果 rootkit 会周期性地等待这个服务的心跳包的话，那么停止这个服务就会导致 rootkit 报
告一个违规行为。
心跳包也是检测钩子是否被摘除的一个很好的方法。如果你的 rootkti 是基于钩子的，
定期地指定一个特殊的参数来调用一个钩子函数而钩子函数会在你的钩子里有一个特殊的
反应，这样能表明钩子是否被移除。随着如 Rootkit Unhook 这样的摘除钩子工具越来越强大，
这种反篡改技术会变得越来越重要。
创建一个仅仅是检测 rootkit 并且在 rootkit 无法回应的时候广播一条错误消息的后台任
务也是确保 rootkti 没被攻击的一种方法。一些高层次的 use case 在实现这个特殊的解决方案
之前可能是有用的，因为 rootkti 故障的原因很可能是由于 rootkit 被检测和清除了，监视
rootkti 的进程不应该被相同的方法给检测到，否则很可能会导致 rootkit 和控制器被同时清
除掉。
一般情况下，控制器需要跟踪的有下面内容：
在被控制环境下的每台机器都可以对一个 ping 进行回应
在被控制环境下的每台机器都安装有一个 rootkit
在被控制环境下的每台机器都没有安装一个 rootkit
在被控制环境下的每台机器都一个正在回应的 rootkit
一个实例
GhostTracker 是一个基于 C#.NET 的程序。这个工程由 4 个文件和两个窗体组成。如果
你看一下这个工程的源代码你会看到不止有 4 个文件，但是只有 4 个文件是我们创建的，其
余的部是是在 C#工程创建时自动生成的。
下面是这 4 个文件：
GhostTracker.cs － 这是最主要的文件，包含了程序的主窗体。
ControlForm.cs － 这个文件包含了控制面板的控制逻辑
TargetController － 这个文件包含了每个连接的链接逻辑
Listen.cs － 这个文件包含了初始化连接和进程产生逻辑
下面是两个窗体：
GhostTracker － 这个是程序启动时显示的主窗体
ControlForm － 这个是每个连接的 rootkti 的控制面板
GhostTracker 线程模型如图 12-1 所示，它实现了一个能为每个进入的连接产生一个
TargetController 的监听线程。TargetController 可以显示一个 ControlForm 来控制连接到的
rootkit。控制面板可以在一个列表框里双击来启动。
图 12－1
GhostTracker.cs
GhostTracker.cs
GhostTracker.cs
GhostTracker.cs
GhostTracker.cs 文件包含一个 MainForm 类，它包含下面的成员函数：
MainFOrm(构造函数） － 初始化并且启动监听线程
AddTarget － 把每个新 TargetController 添加到主列表框里
Dispose － 停止监听纯种并且清除 MainForm 组件
Main － 程序启动时调用的函数
Alert － 在控制器操作时用来显示消息
targetListView_SelectedIndexChanged － 启动控制面板
// GhostTracker.cs
// Copyright Ric Vieler, 2006
// This is a remote controller for the Ghost rootkit
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Threading;
namespace GhostTracker
{
/// 
/// Summary description for Form1.
/// 
public class MainForm : System.Windows.Forms.Form
{
TargetController myTarget = null;
Listen myListener = null;
Thread myThread = null;
private System.Windows.Forms.ListView targetListView;
private System.Windows.Forms.ColumnHeader AddressHeader;
private System.Windows.Forms.ColumnHeader InfoHeader;
/// 
/// Required designer variable.
/// 
private System.ComponentModel.Container components = null;
public MainForm()
{
//
// Required for Windows Form Designer support
//
InitializeComponent();
// Create a thread object, passing in the
// Listen.Start method using a ThreadStart delegate.
myListener = new Listen( this );
myThread = new Thread( new ThreadStart( myListener.Start ) );
// Start the listen thread.
myThread.Start();
}
public void AddTarget( TargetController target, string targetAddress, string
targetInfo )
{
// Save the TargetController class
myTarget = target;
// Add the target to the list view
string[] columns = new string[3];
// Add Item to the ListView control.
columns[0] = targetAddress;
columns[1] = targetInfo;
columns[2] = "0";
ListViewItem item = new ListViewItem( columns );
this.targetListView.Items.Add( item );
this.targetListView.EnsureVisible( this.targetListView.Items.Count - 1 );
}
/// 
/// Clean up any resources being used.
/// 
protected override void Dispose( bool disposing )
{
if( disposing )
{
if( myThread != null )
{
// Stop the listen thread.
myListener.Stop();
myThread.Abort();
myThread.Join();
}
if (components != null)
{
components.Dispose();
}
}
base.Dispose( disposing );
}
#region Windows Form Designer generated code
---the code that was here was auto-generated---
#endregion
/// 
/// The main entry point for the application.
/// 
[STAThread]
static void Main()
{
Application.Run(new MainForm());
}
public void Alert( IWin32Window baseControl, string message )
{
// TODO: There seems to be a bug in MessageBox.Show
//
when using the IWin32Window overloads.
//
Dialog "should" be center of App, not screen...
if( baseControl == null )
baseControl = this;
MessageBox.Show( baseControl, message, "GhostTracker",
MessageBoxButtons.OK, MessageBoxIcon.Information);
}
private void targetListView_SelectedIndexChanged(object sender, System.EventArgs
e)
{
string targetIP = "";
// Get the selected item
foreach( ListViewItem item in targetListView.Items )
{
targetIP = item.Text;
if( item.Selected )
break;
}
// Launch a controller for the target
ControlForm controller = new ControlForm( targetIP, myTarget );
controller.ShowDialog(this);
// We're done once the target and controller are hooked up
}
}
}
为了显得清晰一点，窗体设计器里面的代码被我删掉了。这部分代码是自动生成的。要
了解更多关于这部分代码的信息请查看源代码文件。
ControlForm.cs
ControlForm.cs
ControlForm.cs
ControlForm.cs
文件 ControlForm.cs 包含一个 ControlForm 类，它包含下面的类成员：
ControlFOrm(构造函数) － 初始化一个按钮
Dispose － 清理控制面板组件
InitializeComponent － 初始化一个控制面板组件
checkCOnnectionButton_Click － 目标反馈的占位符
GhostTracker 的控制面板是一个可以让读者对控制面板有一个感性认识的实物模型。控
制面板上的按钮都是没有实际作用的。
// ControlForm.cs
// Copyright Ric Vieler, 2006
// This file supports control panel operations
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
namespace GhostTracker
{
/// 
/// Summary description for ControlForm.
/// 
public class ControlForm : System.Windows.Forms.Form
{
private string myIPAddress;
private TargetController myTarget;
private System.Windows.Forms.Label IPLabel;
private System.Windows.Forms.Label statusLabel;
private System.Windows.Forms.TextBox statusTextBox;
private System.Windows.Forms.Label checkConnectionLabel;
private System.Windows.Forms.Label putFileLabel;
private System.Windows.Forms.Label getFileLabel;
private System.Windows.Forms.Label putKeyLabel;
private System.Windows.Forms.Label getKeyLabel;
private System.Windows.Forms.Label CrashTargetLabel;
private System.Windows.Forms.Label cleanTargetLabel;
private System.Windows.Forms.Label destroyTargetLabel;
private System.Windows.Forms.Button checkConnectionButton;
private System.Windows.Forms.Button putFileButton;
private System.Windows.Forms.Button getFileButton;
private System.Windows.Forms.Button putKeyButton;
private System.Windows.Forms.Button getKeyButton;
private System.Windows.Forms.Button crashTargetButton;
private System.Windows.Forms.Button cleanTargetButton;
private System.Windows.Forms.Button destroyTargetButton;
private System.Windows.Forms.Button commandShellButton;
private System.Windows.Forms.Label commandShellLabel;
/// 
/// Required designer variable.
/// 
private System.ComponentModel.Container components = null;
public ControlForm( string IPAddress, TargetController target )
{
//
// Required for Windows Form Designer support
//
InitializeComponent();
myTarget = target;
myIPAddress = IPAddress;
this.IPLabel.Text = "Tagret IP Address: " + myIPAddress;
}
/// 
/// Clean up any resources being used.
/// 
protected override void Dispose( bool disposing )
{
if( disposing )
{
if(components != null)
{
components.Dispose();
}
}
base.Dispose( disposing );
}
#region Windows Form Designer generated code
/// 
/// Required method for Designer support - do not modify
/// the contents of this method with the code editor.
/// 
private void InitializeComponent()
{
this.IPLabel = new System.Windows.Forms.Label();
this.statusLabel = new System.Windows.Forms.Label();
this.statusTextBox = new System.Windows.Forms.TextBox();
this.checkConnectionLabel = new System.Windows.Forms.Label();
this.putFileLabel = new System.Windows.Forms.Label();
this.getFileLabel = new System.Windows.Forms.Label();
this.putKeyLabel = new System.Windows.Forms.Label();
this.getKeyLabel = new System.Windows.Forms.Label();
this.CrashTargetLabel = new System.Windows.Forms.Label();
this.cleanTargetLabel = new System.Windows.Forms.Label();
this.destroyTargetLabel = new System.Windows.Forms.Label();
this.checkConnectionButton = new System.Windows.Forms.Button();
this.putFileButton = new System.Windows.Forms.Button();
this.getFileButton = new System.Windows.Forms.Button();
this.putKeyButton = new System.Windows.Forms.Button();
this.getKeyButton = new System.Windows.Forms.Button();
this.crashTargetButton = new System.Windows.Forms.Button();
this.cleanTargetButton = new System.Windows.Forms.Button();
this.destroyTargetButton = new System.Windows.Forms.Button();
this.commandShellButton = new System.Windows.Forms.Button();
this.commandShellLabel = new System.Windows.Forms.Label();
this.SuspendLayout();
//
// IPLabel
//
this.IPLabel.Location = new System.Drawing.Point(16, 16);
this.IPLabel.Name = "IPLabel";
this.IPLabel.Size = new System.Drawing.Size(192, 24);
this.IPLabel.TabIndex = 0;
this.IPLabel.Text = "Tagret IP Address: xxx.xxx.xxx.xxx";
//
// statusLabel
//
this.statusLabel.Location = new System.Drawing.Point(8, 280);
this.statusLabel.Name = "statusLabel";
this.statusLabel.Size = new System.Drawing.Size(48, 16);
this.statusLabel.TabIndex = 1;
this.statusLabel.Text = "Status:";
//
// statusTextBox
//
this.statusTextBox.Location = new System.Drawing.Point(64, 280);
this.statusTextBox.Name = "statusTextBox";
this.statusTextBox.Size = new System.Drawing.Size(136, 20);
this.statusTextBox.TabIndex = 2;
this.statusTextBox.Text = "";
//
// checkConnectionLabel
//
this.checkConnectionLabel.Location = new System.Drawing.Point(16, 48);