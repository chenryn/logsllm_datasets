# Windows NT Processes and Subsystems

The following subsystems are used in Windows NT processes:

- **IMAGE_SUBSYSTEM_WINDOWS_GUI (2)**: The image runs in the Windows graphical user interface (GUI) subsystem.
- **IMAGE_SUBSYSTEM_WINDOWS_CUI (3)**: The image runs in the Windows character subsystem.
- **IMAGE_SUBSYSTEM_POSIX_CUI (7)**: The image runs in the POSIX character subsystem.
- **IMAGE_SUBSYSTEM_WINDOWS_CE_GUI (9)**: The image runs on Windows CE.
- **IMAGE_SUBSYSTEM_EFI_APPLICATION (10)**: The image is an EFI application.
- **IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER (11)**: The image is an EFI driver that provides boot services.
- **IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER (12)**: The image is an EFI driver that provides runtime services.

## DLL Characteristics

The `DLLCharacteristics` field in the Optional Header of a PE file defines various attributes. The following constants are defined for this field:

- **0x0001, 0x0002, 0x0004, 0x0008**: Reserved
- **IMAGE_DLLCHARACTERISTICS_NO_BIND (0x0800)**: Do not bind the image.
- **IMAGE_DLLCHARACTERISTICS_WDM_DRIVER (0x2000)**: The driver is a WDM Driver.
- **IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE (0x8000)**: The image is Terminal Server aware.

## Optional Header Data Directories (Image Only)

Each data directory in the Optional Header provides the address and size of a table or string used by Windows NT. These directories are loaded into memory for use at runtime. A data directory is defined as follows:

```c
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD RVA;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
```

- **RVA**: Relative virtual address of the table when loaded, relative to the base address of the image.
- **Size**: Size of the table in bytes.

The data directories, which form the last part of the Optional Header, are listed below. Note that the number of directories is not fixed, so the `NumberOfRvaAndSizes` field in the optional header should be checked before looking for a specific directory. The RVAs given in this table do not necessarily point to the beginning of a section, and the sections containing specific tables may have different names.

| Offset (PE/PE32+) | Size | Field | Description |
|------------------|------|-------|-------------|
| 96/112           | 8    | Export Table | Address and size of the export table. |
| 104/120          | 8    | Import Table | Address and size of the import table. |
| 112/128          | 8    | Resource Table | Address and size of the resource table. |
| 120/136          | 8    | Exception Table | Address and size of the exception table. |
| 128/144          | 8    | Certificate Table | Address and size of the attribute certificate table. |
| 136/152          | 8    | Base Relocation Table | Address and size of the base relocation table. |
| 144/160          | 8    | Debug | Address and size of the debug data. |
| 152/168          | 8    | Architecture | Address and size of architecture-specific data. |
| 160/176          | 8    | Global Ptr | Relative virtual address of the value to be stored in the global pointer register. The size must be set to 0. |
| 168/184          | 8    | TLS Table | Address and size of the Thread Local Storage (TLS) table. |
| 176/192          | 8    | Load Config Table | Address and size of the load configuration table. |
| 184/200          | 8    | Bound Import | Address and size of the bound import table. |
| 192/208          | 8    | IAT | Address and size of the Import Address Table. |
| 200/216          | 8    | Delay Import Descriptor | Address and size of the delay import descriptor. |
| 208/224          | 8    | COM+ Runtime Header | Address and size of the COM+ runtime header. |
| 216/232          | 8    | Reserved | Reserved. |

### Certificate Table

The Certificate Table entry points to a table of attribute certificates. These certificates are not loaded into memory as part of the image. Therefore, the first field of this entry, which is normally an RVA, is a File Pointer instead.

## Section Table (Section Headers)

Each row in the Section Table represents a section header. This table immediately follows the optional header, if any. The location of the section table is determined by calculating the location of the first byte after the headers. Ensure to use the size of the optional header as specified in the file header.

- **NumberOfSections**: The number of entries in the Section Table.
- **Section Order**: Code and data memory section entries are in the order chosen by the linker.
- **Virtual Addresses**: In an image file, the virtual addresses for sections must be assigned in ascending order and adjacent, and they must be a multiple of the Section Align value in the optional header.

Each section header has the following format, totaling 40 bytes per entry:

| Offset | Size | Field | Description |
|--------|------|-------|-------------|
| 0      | 8    | Name | An 8-byte, null-padded ASCII string. If the string is exactly eight characters long, there is no terminating null. For longer names, this field contains a slash (/) followed by the ASCII representation of a decimal number, which is an offset into the string table. Executable images do not use a string table and do not support section names longer than eight characters. Long names in object files will be truncated if emitted to an executable file. |
| 8      | 4    | VirtualSize | Total size of the section when loaded into memory. If this value is greater than `SizeOfRawData`, the section is zero-padded. This field is valid only for executable images and should be set to 0 for object files. |
| 12     | 4    | VirtualAddress | For executable images, this is the address of the first byte of the section when loaded into memory, relative to the image base. For object files, this field is the address of the first byte before relocation is applied; for simplicity, compilers should set this to zero. Otherwise, it is an arbitrary value that is subtracted from offsets during relocation. |
| 16     | 4    | SizeOfRawData | Size of the section (object file) or size of the initialized data on disk (image files). For executable images, this must be a multiple of `FileAlignment` from the optional header. If this is less than `VirtualSize`, the remainder of the section is zero-filled. Because this field is rounded while the `VirtualSize` field is not, it is possible for this to be greater than `VirtualSize` as well. When a section contains only uninitialized data, this field should be 0. |
| 20     | 4    | PointerToRawData | File pointer to the section’s first page within the COFF file. For executable images, this must be a multiple of `FileAlignment` from the optional header. For object files, the value should be aligned on a four-byte boundary for best performance. When a section contains only uninitialized data, this field should be 0. |
| 24     | 4    | PointerToRelocations | File pointer to the beginning of relocation entries for the section. Set to 0 for executable images or if there are no relocations. |
| 28     | 4    | PointerToLineNumbers | File pointer to the beginning of line-number entries for the section. Set to 0 if there are no COFF line numbers. |
| 32     | 2    | NumberOfRelocations | Number of relocation entries for the section. Set to 0 for executable images. |
| 34     | 2    | NumberOfLineNumbers | Number of line-number entries for the section. |
| 36     | 4    | Characteristics | Flags describing the section’s characteristics. |

### Section Flags

The `Characteristics` field in the section header indicates the characteristics of the section. The following flags are defined:

| Flag | Value | Description |
|------|-------|-------------|
| IMAGE_SCN_TYPE_REG | 0x00000000 | Reserved for future use. |
| IMAGE_SCN_TYPE_DSECT | 0x00000001 | Reserved for future use. |
| IMAGE_SCN_TYPE_NOLOAD | 0x00000002 | Reserved for future use. |
| IMAGE_SCN_TYPE_GROUP | 0x00000004 | Reserved for future use. |
| IMAGE_SCN_TYPE_NO_PAD | 0x00000008 | Section should not be padded to the next boundary. This is obsolete and replaced by `IMAGE_SCN_ALIGN_1BYTES`. This is valid for object files only. |
| IMAGE_SCN_TYPE_COPY | 0x00000010 | Reserved for future use. |
| IMAGE_SCN_CNT_CODE | 0x00000020 | Section contains executable code. |
| IMAGE_SCN_CNT_INITIALIZED_DATA | 0x00000040 | Section contains initialized data. |
| IMAGE_SCN_CNT_UNINITIALIZED_DATA | 0x00000080 | Section contains uninitialized data. |
| IMAGE_SCN_LNK_OTHER | 0x00000100 | Reserved for future use. |
| IMAGE_SCN_LNK_INFO | 0x00000200 | Section contains comments or other information. The `.drectve` section has this type. This is valid for object files only. |
| IMAGE_SCN_TYPE_OVER | 0x00000400 | Reserved for future use. |
| IMAGE_SCN_LNK_REMOVE | 0x00000800 | Section will not become part of the image. This is valid for object files only. |
| IMAGE_SCN_LNK_COMDAT | 0x00001000 | Section contains COMDAT data. See Section 5.5.6, “COMDAT Sections,” for more information. This is valid for object files only. |
| IMAGE_SCN_MEM_FARDATA | 0x00008000 | Reserved for future use. |
| IMAGE_SCN_MEM_PURGEABLE | 0x00020000 | Reserved for future use. |
| IMAGE_SCN_MEM_16BIT | 0x00020000 | Reserved for future use. |
| IMAGE_SCN_MEM_LOCKED | 0x00040000 | Reserved for future use. |
| IMAGE_SCN_MEM_PRELOAD | 0x00080000 | Reserved for future use. |
| IMAGE_SCN_ALIGN_1BYTES | 0x00100000 | Align data on a 1-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_2BYTES | 0x00200000 | Align data on a 2-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_4BYTES | 0x00300000 | Align data on a 4-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_8BYTES | 0x00400000 | Align data on an 8-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_16BYTES | 0x00500000 | Align data on a 16-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_32BYTES | 0x00600000 | Align data on a 32-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_64BYTES | 0x00700000 | Align data on a 64-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_128BYTES | 0x00800000 | Align data on a 128-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_256BYTES | 0x00900000 | Align data on a 256-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_512BYTES | 0x00A00000 | Align data on a 512-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_1024BYTES | 0x00B00000 | Align data on a 1024-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_2048BYTES | 0x00C00000 | Align data on a 2048-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_4096BYTES | 0x00D00000 | Align data on a 4096-byte boundary. This is valid for object files only. |
| IMAGE_SCN_ALIGN_8192BYTES | 0x00E00000 | Align data on an 8192-byte boundary. This is valid for object files only. |
| IMAGE_SCN_LNK_NRELOC_OVFL | 0x01000000 | Section contains extended relocations. |
| IMAGE_SCN_MEM_DISCARDABLE | 0x02000000 | Section can be discarded as needed. |
| IMAGE_SCN_MEM_NOT_CACHED | 0x04000000 | Section cannot be cached. |
| IMAGE_SCN_MEM_NOT_PAGED | 0x08000000 | Section is not pageable. |
| IMAGE_SCN_MEM_SHARED | 0x10000000 | Section can be shared in memory. |
| IMAGE_SCN_MEM_EXECUTE | 0x20000000 | Section can be executed as code. |
| IMAGE_SCN_MEM_READ | 0x40000000 | Section can be read. |
| IMAGE_SCN_MEM_WRITE | 0x80000000 | Section can be written to. |

### Grouped Sections (Object Only)

In object files, the `$` character (dollar sign) has a special interpretation in section names. When determining the image section that will contain the contents of an object section, the linker discards the `$` and all characters following it. Thus, an object section named `.text$X` will contribute to the `.text` section in the image.

However, the characters following the `$` determine the ordering of the contributions to the image section. All contributions with the same object-section name will be allocated contiguously in the image, and the blocks of contributions will be sorted in lexical order by object-section name. Therefore, everything in object files with section name `.text$X` will end up together, after the `.text$W` contributions and before the `.text$Y` contributions.

The section name in an image file will never contain a `$` character.