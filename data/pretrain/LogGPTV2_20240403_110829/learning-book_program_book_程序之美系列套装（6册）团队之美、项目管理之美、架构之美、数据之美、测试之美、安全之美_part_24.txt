看到一些大错特错的做法扼杀了团队士气和进步。
启动一个新项目是很有意思的。在我的职业生涯中，亲自启动多个
新项目的过程让我颇为开心，我也很高兴能够成为BBS团队的一份
子。作为咨询师，我经常置身于团队之外，与团队在一起的时间总
是很短。而在这个案例中，我差不多每隔一周去一次BBS，也就真
正地融入其中了。
团队刚开始时才几个人，只有系统工程师Johnny、首席工程师
Alan，还有我。
当时Johmny的首要任务就是给我讲解项目的需求。他有一份长达30
页的需求文档，就像常规的需求文档一样，其中充斥着诸如“应
该”、“必须”之类的用词。
需求文档中有不少非常棒的信息，但是它的撰写方式使其毫无可操
作性。即使是已经设定好优先级的需求，也没有明确说明软件必须
具备哪些功能。软件是要对外提供功能的，我们需要一个列表，说
明软件必须要做到什么。令人欣慰的是，对于这个问题，有一个流
行的解决办法。用例可以用来分类和定义系统行为。用例的确可以
帮我们着手弄清楚软件应该做什么、将会做到什么，以及必须做到
什么。
不过我们当时遇到一个小问题。Johnny此前从未用过用例法。如果
用例法不是标准流程的一部分，我们也许就要做一些正式的情况说
明。我们查阅了流程手册，令人高兴的是，我们发现用例法是表达
需求的一种可接受的方式。这是好消息。
129
---
## Page 131
Johnny和我把我们自己关在他的办公室里。我们一边阅读需求文
档，一边讨论需求的含义以及其隐含的系统行为。我们命名了一个
又一个用例，并将它们记录在电子表格中。大概通过了一周的努
力，我们从Johnny的需求文档中抽取出大概105个用例，识别出系统
之外有9个参与者。至少在讨论和计划的层面上，我们理解了系统
的边界和系统的行为。这个活动可以称为“用例识别”，主要是为所
有的行为命名。
当时，KentBeck刚刚出版了《解析极限编程》一书[]，激发了热烈
的讨论。在刚建立的Yahoo！讨论组和已成立的comp.object新闻组
中，争论之声喧嚣不已。一个很好的机会出现了。我当时受雇于
ObjectMentor，公司垄断了极限编程（XP）的市场。呵呵，这样说
不完全准确，但是听起来很不错。实际情况是：BobMartin、Jim
Newkirk和LowellLindstrom（他们是ObjectMentor的管理团队）组成
了一个联盟，加入者还有KentBeck、RonJefries和MartinFowler，
这个联盟培训人们使用极限编程。Lowell邀请我参加第一次极限编
程浸入式活动（XPImmersion）。我暂时离开BBS，用了一周的时
间深人学习了极限编程。我没有料到，在伊利诺伊州迪尔菲尔德市
万豪饭店的那一周给我造成了很大触动。那么多小小的事件竞能产
生如此重大的影响，我确实为之惊讶。
我必须承认，当时绝大多数人对极限编程几乎一无所知，我也毫不
例外。之前的听闻让我有些担心。名字中带有极限字样的东西怎么
会是好主意呢？跟滑雪又没啥联系。需要头盔，还是护肘？我需要
新的人寿保险合同么？我觉得Ken真的很有煽动性，现在我也很高
兴他当时那样做。要是被起个诸如明智编程（Sensible
Programming）之类的名字，每个人都会哈欠连天，瀑布流程将会继
续作为理想的开发过程占领统治地位。可事情还是发生了，那本短
小精湛的书籍让许许多多的人开始挑战现状。
在浸入式活动那一周结束后，我像个刚刚皈依的教徒，带着满腹热
情返回了BBS公司。好吧，我有些夸张了。对于极限编程，我从没
有宗教般的热情，但的确认为很多想法可以打破BBS目前的僵局。
我开始给同事讲解极限编程中有趣而且革命性的技术。他们也很感
兴趣，但是有所保留。“质保那些人是不会让我们做一些所谓极
限”的事情的”，Alan说。Johnny认为我们还是需要更多的前期设计
和文档工作，担心极限编程对这些不够重视。重型流程文化的存
在，让人们很难认为像极限编程这样的轻量级流程是个好主意。
130
---
## Page 132
说服管理层
在对极限编程进行过一些讨论之后，Alan和Johnny开始逐渐了解其
中的理念了。我们的经理Fred听取了我们对极限编程的汇报，他也
很想尽量尝试一下，但是我们还要得到老板（也就是我们的总监）
Bud的认可。我们知道将会有些争论，特别是围绕着是否保留流程
监督者、提供哪些文档等话题。BBS对文档的需求是重量级的。可
我作为团队的指导者，就是要挑战他们现在的实践并帮助他们成
长。
我准备了一个讲解极限编程的演示。我们对Bud将会提出的问题做
了一些预测，并给出了我们的推荐做法。演示结束时，Bud提出了
一些开放性的问题，并引出了如下对话。
Bud：“这些听起来都很不错，可我们如何应对流程硬性要求的技术
评审环节呢？”
“我们要把评审从关键路径上去掉。”我告诉Bud。我告诉他一些他
已经知道的东西：评审会临时阻碍项目进展。准备评审的过程非常
耗时，要安排日程让资深工程师参加评审会议也是很大的问题。我
们还提到：当前的方法实际上评审的是未经尝试的设计方案。
我解释道：“你手下经验最丰富的人会把时间都用在评审上，而不
是开发产品。应该在每个团队中都安排一个有经验的设计人员。”
我们还谈到：有人签字认可不应是设计过程结束的标准，设计其实
是一种日常活动。
Bud：“我想我明白了。你说我们不需要评审？”
“我也觉得不能完全放弃评审，但是我们可以改变评审的内容和时
间。”我如此回复。我们知道定期评审是无法完全避免的，但是我
们可以尽量找到更高效的方式来运作。评审会让团队停下前进的脚
步，直到评审会议举行并且设计签字通过才能继续。我们告诉
Bud：将评审从关键路径上去掉，我们就能让团队继续前进，连贯
地进行设计、实现和测试。
“目前你使用最有经验的人来评审设计，而不是去创建设计。"我告
诉他。我们讨论了如何尽可能让每个团队中都能有一名资深设计人
员，让他参加日常的设计讨论和结对编程，保证设计的高质量。
131
---
## Page 133
Bud问道：“好吧，但是评审的对象是什么呢？”
极限编程实践
极限编程是一组原则和实践，希望通过增量的方式创建高质量的软
件。它是敏捷开发方法论大家庭最早的成员之一。
把客户作为团队成员
团队中有某个人（或一组人）能代表客户的利益。客户决定产品的
功能范围。客户负责对产品进行验收测试。这意味着客户团队中要
有技能纯熟的QA人员。
用户故事
用户故事代表系统的某个特性。用户故事很小，小到只需一个人在
一个选代中就可以完成。如果故事太大，在一个选代中完不成，那
就要把它拆成更小的故事。用户故事就像是用例的名字。
规划游戏
在规划游戏中，客户和并发人员决定下个版本的功能范围。并发人
员估算完成每个故事需要的工作量。客户选择故事，并将其打包到
一个选代中，同时不能超过团队在选代中的工作能力。客户会根据
各个故事的价值和成本对其进行排序。
小版本发布
系统通过小版本发布。每个选代持续两周。一个版本包括一组选代
的工作，选代的产出要为系统用户提供有价值的功能特性。
验收测试
验收测试说明故事已经完成了。它们提供了故事背后的细节，而且
会在故事开始开发之前确定下来。客户控制验收测试。测试的主要
部分都要做到能够自动化完成，而且可以在任何时间运行，一般每
天都会运行好几次。
开放的工作空间
132
---
## Page 134
为了促进团队内部的沟通，团队要在并放的工作空间中工作，大家
可以很方便地与其他成员沟通，使用各种设备，了解项目进度信
息。
测试驱动设计
并发人员以非常小、可验证的步骤来并发软件。首先写一个小测
试，然后编写刚刚够的代码来满足测试；接下来编写另一个测试，
以此方式继续进行。
隐喻
系统的隐喻能够提供一个理念或模型，帮人们理解系统。它是概要
设计的一部分，能够促进交流。它为软件中模块、类和函数的命名
提供了一个上下文。
重构
重构是以增量方式保持设计清晰的过程。系统不断演化，设计就会
变得混乱不堪。重构是为了检测、识别、修复设计方面的问题，而
且是在它们还不严重、易于修复的时候。
简单设计
对于当前要实现的故事，设计要尽可能简单。伴随着代码重构的过
程，框架和底层代码会发生演化。
结对编程
两个开发人员互相协作，解决一个问题，编程的过程没有旁观者，
两个开发人员都会投入到解决方案中，解决手上的问题，
编码标准
代码必须拥有共同的风格，以促进并发人员之间的沟通。团队控制
代码和编码的风格。
持续集成
开发人员每天都会多次集成和测试软件。要避免大规模的代码分支
和合并。
133
---
## Page 135
集体所有制
团队拥有代码。并发人员结对修改任何代码。广泛的单元测试会帮
助团队避免编码错误。
可持续的速度
团队要保持活力，以高效并发软件。过多加班会降低产品质量，让
人员疲惫不堪，得到难以预测的产出。每个人都会努力工作，但是
要保持可持续的速度。
来源：James Grenning的"Extreme Programming and Embedded Software
Development"[2]。
“我们会评审已经构建完成和经过测试的产出，而不是将要构建的
东西。"我告诉Bud。我们谈到：在每个选代中，我们将会记录重要
的架构决策和构造结构。如果在评审中发现了设计问题，我们就可
以充满信心地做出改变。我们的自动化测试将会关注系统行为。经
过评审，任何需要作出的变更都会在下个选代中完成。
“我们要搞清楚：写设计文档的目的，是为了提供系统的概要路线
图，"我补充道，“设计细节将会体现在代码和对应的测试中。”
Bud：“等等，没有详细设计文档吗？”
“没有，”我回答道，“使用测试先行编程，我们就会得到很多自动化
单元测试。测试用例就是详细文档。”我们讨论到每个测试用例都
是一个代码范例，其中带有特定的前置条件和期望的输出。
我补充道：“这些测试就是可执行的规格说明。”一旦人们学着阅读
测试，测试就会成为非常有效的详细文档。它们不像那些文字写成
的文档，还需要人们的阅读和诠释。测试这样的规格说明可以执
行，不管是什么时候，我们就能看到是否存在对需求的偏离。“测
试就像一种能够不断送出的礼物。"我说道。
因为还有一点点不确定，我又说道：“Bud，你也知道，我们都是刚
刚接触这些，但是我们认为这些做法很有意义。不管怎么说，我们
可以用一个月的周期，尝试这种方法，然后每个月重新审视我们的
决策。”
134
---