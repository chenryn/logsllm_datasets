chmod 600 ~/.postgresql/black.crl    
```    
```    
export PGSSLCRL="/var/lib/pgsql/.postgresql/black.crl"       
export PGSSLMODE="verify-ca"    
export PGSSLCERT="/var/lib/pgsql/.postgresql/client123.crt"    
export PGSSLKEY="/var/lib/pgsql/.postgresql/client.key"    
export PGSSLROOTCERT="/var/lib/pgsql/.postgresql/ca2_int.crt"    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  dbhost.domain.name.or.ipaddress -p 1921 -U dbuser1 postgres    
psql: error: could not connect to server: SSL error: certificate verify failed  
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  dbhost.domain.name.or.ipaddress -p 1921 -U digoal postgres    
psql: error: could not connect to server: SSL error: certificate verify failed  
```    
吊销证书生效后, 可以重新生成一个新的数据库证书来连接, 周期性执行吊销操作, 防止证书泄露.(就像我们银行的KEY,也会让你周期性的去更换)           
数据库:     
```    
openssl req -new -key server.key -out server123.csr -subj "/CN=dbhost.domain.name.or.ipaddress"    
```    
授权机构:     
```    
openssl x509 -req -in server123.csr -text -days 365  -CA intermediate.crt -CAkey intermediate.key -CAcreateserial  -out server123.crt    
server123.crt  拷贝到数据库服务器 $PGDATA  
chmod 600 server123.crt   
```    
数据库:     
```    
修改数据库参数 ssl_cert_file = 'server123.crt'  
pg_ctl reload  
```    
数据库已经使用新的证书, 可以建立连接.    
```    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  dbhost.domain.name.or.ipaddress -p 1921 -U digoal postgres    
Password for user digoal:   
psql (12.3)  
SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)  
Type "help" for help.  
postgres=# \q  
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  dbhost.domain.name.or.ipaddress -p 1921 -U dbuser1 postgres    
Password for user dbuser1:   
psql (12.3)  
SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)  
Type "help" for help.  
postgres=# \q  
```    
如果不想检查数据库是否使用了吊销证书, PGSSLCRL环境变量设置为空即可.   
```    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> export PGSSLCRL=""    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  dbhost.domain.name.or.ipaddress -p 1921 -U dbuser1 postgres    
psql (12.3)    
SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)    
Type "help" for help.    
postgres=# \q    
```    
## 角色     
1、权威机构     
2、权威机构的授权机构 . 你可以假想为权威机构太忙或者太远, 需要应对全球的证书, 所以需要授权其他机构来颁证.     
3、客户端证书, 向权威 或 权威授权机构 申请认证(盖章)     
4、db端证书, 向权威 或 权威授权机构 申请认证(盖章)     
5、吊销证书列表, 类似离婚证，办理吊销时, 需要带着证书到证书颁证机构去申请吊销(如果颁发机构是授权机构, 那么需要到授权机构以及对应的权威机构去办理吊销), 例如证书泄露的情况，可以去吊销.           
6、权威机构 或 权威授权机构发的, 用于验证证书真伪的文件(验证证书真伪, 即是否为权威机构盖的章) . 实际上就是颁发机构的公共证书(如果颁发机构是授权机构, 那么检查证书真伪需要同时拥有权威机构和授权机构的公共证书).      
### 场景    
1、user a 有一本证书, 由权威机构ca1盖章.     
2、有一个自称"user a"的人要跟user b通讯. 因为ca1比较权威, 所以user b只认ca1颁发的证书. 那么user b 要确认user a的身份, 首先问 user a要a的证书, user b用ca1给的验证方法(ca1给b的文件, 用于验证a的证书是否为ca1颁发的证书), 判断user a 给的证书的真假, 如果是ca1颁发的证书, 然后再看证书的内容, 例如证书中的cn值等信息, 根据业务逻辑进一步要做什么.     
3、对于授权机构颁发的证书, 需要一个链来验证它的真伪, 例如根-授权机构1-子授权机构2. 由授权机构2颁发的证书, 需要受到根,授权机构1,子授权机构2的多方验证, 所以需要这三个机构都给出验证方法(颁证机构的公共证书黏贴在一个文件中).      
4、非对称加密技术    
key, pub对.  pub加密, key解密.  证书中就包含了pub. 所以user a把证书给user b后, user b就可以解开证书里面的pub来进行数据加密, 并且把加密后的数据传输给user a, user a用key能解密.      
每一本证书都有一个对应的key, 一个key可以创建出很多本证书.     
5、如果 user c 捡到一本ca1颁发的证书, 能与user b通讯吗?  有几种情况:     
user b认定证书是ca1颁发的, 然后再看证书的内容, 例如证书中的cn值等信息, psql -h hostname, 如果cn与hostname不同, 所以不会进行通信.    
user a 向权威机构挂失它的证书, 权威机构发布公告, user a的证书已经吊销了, user b在它的吊销证书列表里面存储吊销证书. 所以不会进行通信.      
user a 的证书到期.   所以不会进行通信.      
6、客户端 可以通过权威机构签名的证书判断 数据库的真伪.    
7、数据库 可以通过权威机构签名的证书判断 客户端的真伪.    
8、数据库 可以使用cert认证方法(pg_hba.conf配置为cert认证方法), 不需要用户提供密码, 只需要提供证书登录数据库.     
### 校验模式    
1、客户端 PGSSLMODE verify-ca : 校验数据库证书真伪.    
2、客户端 PGSSLMODE verify-full : 校验数据库证书真伪, 以及证书的CN内容与客户端连接的数据库hostname一致.      
3、数据库端 pg_hba.conf option clientcert=verify-ca : 校验客户端证书真伪.     
4、数据库端 pg_hba.conf option clientcert=verify-full  或 cert认证方法  : 校验客户端的证书真伪, 以及证书的CN内容与连接的数据库用户名一致. (这样就可以为每个DBUSER办法一个证书, 分发给不同的应用程序, 提高应用级租户安全性.)       
## 数据库相关文件和参数    
https://www.postgresql.org/docs/devel/runtime-config-connection.html#RUNTIME-CONFIG-CONNECTION-SSL    
ssl (boolean)    
Enables SSL connections. This parameter can only be set in the postgresql.conf file or on the server command line. The default is off.    
ssl_key_file (string) 数据库证书私钥    
Specifies the name of the file containing the SSL server private key. Relative paths are relative to the data directory. This parameter can only be set in the postgresql.conf file or on the server command line. The default is server.key.    
ssl_cert_file (string) 数据库证书公钥, 经过权威机构盖章后的文件    
Specifies the name of the file containing the SSL server certificate. Relative paths are relative to the data directory. This parameter can only be set in the postgresql.conf file or on the server command line. The default is server.crt.    
ssl_ca_file (string) 客户端证书颁证机构的公钥, 用于检测客户端证书真伪    
Specifies the name of the file containing the SSL server certificate authority (CA). Relative paths are relative to the data directory. This parameter can only be set in the postgresql.conf file or on the server command line. The default is empty, meaning no CA file is loaded, and client certificate verification is not performed.    
ssl_crl_file (string) 吊销证书(例如有些客户端证书遗失了, 放在这里表示这些证书失效, pg_hba.conf配置了verify-ca或verify-full时， 不允许已吊销证书的客户端登录)    
Specifies the name of the file containing the SSL server certificate revocation list (CRL). Relative paths are relative to the data directory. This parameter can only be set in the postgresql.conf file or on the server command line. The default is empty, meaning no CRL file is loaded.    
## 客户端相关文件和环境变量    
https://www.postgresql.org/docs/devel/libpq-envars.html    
https://www.postgresql.org/docs/devel/libpq-connect.html#LIBPQ-CONNECT-SSLCERT    
```    
PGSSLMODE behaves the same as the sslmode connection parameter.    
PGSSLCERT behaves the same as the sslcert connection parameter.    
PGSSLKEY behaves the same as the sslkey connection parameter.    
PGSSLROOTCERT behaves the same as the sslrootcert connection parameter.    
PGSSLCRL behaves the same as the sslcrl connection parameter.    
```    
## 小结    
1、客户端登录DB, 在密码认证之前加入双方的身份证书验证后, 解决了哪些安全问题?     
- 客户密码泄露后, 拿到密码的攻击者可以伪装成客户登录.     
- db和客户的网络之间有攻击者, 攻击者可以伪装成db服务器, 套取客户的密码.     
2、云数据库服务? 谁来颁证?  同样也分数据库证书和客户端证书.      
- 1、第一种是采用用户和云厂商都认可的第三方机构签名     
- 2、云厂商自己的机构签名     
- 3、用户自己上传server.key, server.crt, root.crt, x.crl  (用户自己控制, 证书可以自己签名 或 第三方签名. root.crt 用于配合pg_hba.conf verify-ca verify-full验证客户端证书。x.crl用于配合pg_hba.conf verify-ca verify-full过滤吊销的客户端证书。)       
    - 注意如果要用户上传， 千万不能使用密码保护server.key文件， 否则数据库启动是需要输入key的密码， 没有密码会导致启动数据库失败出现故障。     
    - 对于用户自己控制的方式, 最弹性, 但是要求用户可以上传证书, 可配置pg_hba.conf, 建议可配置postgresql.conf的ssl min tls version等参数(ssl_min_protocol_version  ssl_max_protocol_version).      
    - 如何判断用户上传的私钥KEY文件没有passphase保护？
    - pg_hba.conf 分两段， 第一段内容固定， 包括一些默认规则（云服务的acl规则优先匹配）。 第二段append在第一段后面， 用户可配置， 用户配置不影响云管理服务的acl。  
    - 证书的过期时间监测。  
    - crl文件正确性，以及与ca.crt匹配， 否则启动数据库将失败。   
- 4、证书内容如下:
    - DB: 
        - ssl_key_file = db.key 
        - ssl_cert_file = db.crt 
        - db_ca.key (给db颁证的机构自己保存, 生成db_ca.crt以及给db.csr签名生成db.crt时需要)
        - ssl_ca_file = client_ca.crt 
        - ssl_crl_file = client_black.crl
    - Client: 
        - PGSSLKEY = client.key 
        - PGSSLCERT = client.crt 
        - client_ca.key (给client颁证的机构自己保存, 生成client_ca.crt以及给client.csr签名生成client.crt时需要)
        - PGSSLROOTCERT = db_ca.crt 
        - PGSSLCRL = db_black.crl
有密码保护的key:  
```
less server.key 
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,80D0DC2C02ACD35A
C92A388DpZxlKAzfb5gDKSizpBQXPzN1tkWNWLR3HoTZlfZn+6TT8tKsVhHxWbUP
x2olORr5+I1WtMVIROPsjlCCQfyGenhKxOK80fy/HTb+62F9Og4gJMnXaqeUvCAG
7gCu6xBObOgsbd67dBAspy0OyGpyQjmRBj7TF24jVL9HOrpKgxE1GIwkC0+Dwif+
h0eNnhbQ7tDqT5jfGN7tFKHQznxx9/w4WFcLDMnoS/R5SScaFfcK7UJByMfMrSii
al9OpmtWe7wrLZnswDpZaow77N6J8/C+H0Ar2SwvFID3lsTOljHUgRnx+kAxunr5
HHjjbSCPG225OhbVcXpo28NPL8/kZkkkgPFxj9ymzMZi6PWQ5vqtkHWkTQ0+KlIh
LpfqZKr2jhjcfn9MfUGkQm3HTsdMMe0YvKBE9i82Y16EFgmo12qSpwX/qBEOUywU
2mOZy3MjRBoquEUSOW19JQ1suRPEQna/cQtmf98R6mMmdBzNVLcKmseRC5WgybMD
N4aW1mDOsAy9Er0XoCIQIpHWvnl10J48E2BuOwondjTAHh17A/lglHMfYqb43X7p
UfK7OdsJmvqxBtHIGJ0Of3cMOTjksIPGTnUtTeK7jO26MMHBOB0oOs8SuCU90y0x
mD1HGP6ZCn75Gf28dxDD7W27amCaxMSEVTKFNBZ0R4n72icvXzbbkKe9uVrhvimI
i/UwbXu6KvU5y0uT6YUXguOXuJ/oLYhg1g/27AN06Xx/45SGqAVbSu+ytaV77ulK
utSdzXVG786hkvYp/TSO1wNePsSNS/UGSJZcqQxZ4JsKT+G4P9o5iw==
-----END RSA PRIVATE KEY-----
```
没有密码保护的key:  
```
[root@iZbp135pwcjjoxqgfpw9k1Z ~]# less client.key
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDQbfsXBKOMEiTC
Mhfkr6c/cCjR4UhMHSlFnCmraMePidWsU94yleeZmmqWrAx9NbvetfwSBgMdI+Rz
GIT77HlphtiV11S50s93tGzLxawZ2S/TuNe+OHK/gp6/JcY4IDuLx+A51W033QI0
TZBFL68k26W7J8jRT0lt+6remhtegheYQYG/NIBno+xYuzRtzhgw28ThpOiSU3u6
buSfSK0yq+6zhjyxcEDdYhx+H2IfZJgy4ICEWFlpjTxW6uKgPpfrij1mPCJA639h
t5XDGEpBxBeK+JqjbAT0nGEO4U32HpEyfona6Yvt9awQzN7ACZwec0qQOESDnBUX
al2YuS4tAgMBAAECggEAFJBlT5YTlMRNgCN1HAkAlU+5l0uE2I2f/tAzhEfoOI8+
16vGpnMH0K3dilQbP1dH2+dUoWqacAuUhI6MwFZKfFDjmZUPNO5JrePNQCWWn05A
W8FG9+uV1rNKek19yxfTCC2GP+6Awhw6FXL5ovnba+WH6nk4ZP5PnlxQNXo67Q33
I3fq8tl6h+CYPV3yDRYhZITS+qsM/hV05sr1gLMMAhqwsNKNiwdYpOgtERjM31QK
VD7oIz0u1K/Yq/mXTvaeMD2VKc7Y7Cv0KTIjJaPzmDyxDfoOj7qNELr1qWyIIOTq
yovdvV6QCiNJjEGVMfyGziPhRTmeg5NGZ+hFigVhOQKBgQD0FhnFcQfPOTmjaYvp
w5ZN4wXuhW9ECNdVrr96zVLvR4mB5gXhrSNBG7tJQVzQ5nzBM6ilDyyNvdXpnACk
IAyiOHkbgZohT1m3ouHiPQ3sMCha+iI1cPl5focqK5bi6u1Y0tUrzzyyUD+x7mlW
/7OkLJq8olgK40pxgaJyqPikTwKBgQDamlfxFyAMHAAEIBzdbhxLbS7wRfUzaw+M
lAtprOFdHFvhdY79cEWRmi+Tcb0vG+NrS9GdxJ5zTqYWKXHVo9Si1vIx/dAPPEiu
SDTJd1kbJr0uFp0LkeYKvMrswcnXjDhHrWTIf5Z27QAGqdOs/A0WpDgSrRGRE55K
D54NNhwawwKBgQCpneoOwHsyz4t0OVZW/emm+koW9HbbimFJU4QQbDpjuQyfTh9s
Mgq7pe/B+j/rkx/Ciol5GlBVt0O9cQEpDHR7Dk9qg+d9mky4ReI+ezr/lH+WqRe4
l2dlvD1lWqEh0ytYfDpSlVKSfx2kIg7lvA8z2SM2ToJsHoKO2gzvLOiMFQKBgG8Z
2nAxrJv67xcpqwHvIHpFN4HuTDyhwPlVlKdUsgU8kIX51X6BPRpPHrb1K41xwxeZ
JSPl9hHsewTwc2Z9KWjJjbZSpRfZL6dEE3ABNExUV/nAjHiA4kW6xfemVgsyvLfR
LFOqZLJ0qXq5fVeBkrVbKRR02WS+b8h8P3u/cHE5AoGAeIRhKHvmAZa4k7MqsGn3
JbdfiMCsGLUSsXhS34VVSM76Q8ffVJIHB1ItfAflJtjeGbrzmTb/Stn3/6huhJ1E
h8RU00et/PwaMsubZGOcxofvOmDuOT358hzAFA4tDnM4sscY0I5bL85hVHJJVkuJ
VeBUAhUTLkYCAuKzgsMXzFw=
-----END PRIVATE KEY-----
```
证书过期时间:  
```
[root@iZbp135pwcjjoxqgfpw9k1Z ~]# openssl x509 -in certs/ca1.crt -dates
notBefore=Jun 19 06:24:31 2020 GMT
notAfter=Jun 17 06:24:31 2030 GMT
-----BEGIN CERTIFICATE-----
MIIC+TCCAeGgAwIBAgIJALX+zZaaXqmKMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV
BAMMCHJvb3QtY2ExMB4XDTIwMDYxOTA2MjQzMVoXDTMwMDYxNzA2MjQzMVowEzER
MA8GA1UEAwwIcm9vdC1jYTEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB