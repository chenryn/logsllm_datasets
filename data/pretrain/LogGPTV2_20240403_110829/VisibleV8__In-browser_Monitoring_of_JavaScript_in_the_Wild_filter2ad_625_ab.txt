Policy Limits. Not all Chrome browser API features can be
patched or wrapped by design policy. These features can be iden-
tified using the WebIDL [7] (interface definition language) files in-
cluded in the Chromium sources. For Chrome 64, these files defined
5,755 API functions and properties implemented for use by web
content (there are more available only to internal test suites). 21
are marked Unforgeable and cannot be modified at all. Notably, this
set includes window.location and window.document, preventing
in-band instrumentation of arbitrary-property accesses on either
of these important objects. Again, such a restriction would have
eliminated many of our results in Section 5.
Patch Detection. Prototype patches of native API functions (or
propertyaccessors)canbedetecteddirectlyandthusfailthecriterion
of stealth. JS functions are objects and can be coerced to strings.
In every modern JS engine, the resulting string reveals whether
the function is a true JS function or a binding to a native function.
Patching a native function (e.g., window.alert) with a non-native
JS wrapper function is a dead giveaway of interposition.
/* from https :// cdn . flashtalking . com / xre /275/
2759859/1948687/ js /j -2759859 -1948687. js */
/* ( all variable names original ) */
var badWrite = !( document . write
instanceof Function && ~ document . write . toString () .
indexOf ( '[ native code ] '));
/* ( later on , among other logic checks ) */
if ( badWrite || o. append ) {
o. scriptLocation . parentNode . insertBefore (
/* omitted for brevity */ );
} else {
document . write ( div . outerHTML );
}
Listing 1: Prototype patch evasion in the wild
The function-to-string probe has been employed to detect finger-
printing countermeasures [55] and appears commonly in real-world
JS code. In many cases, such checks appear strictly related to testing
available features for browser compatibility. But there also exist
cases like Listing 1, in which the script changes its behavior in di-
rect response to a detected patch. Function-to-string probe evasions
abound, from the obvious (patch the right toString function, too)
to the subtle. In Listing 2, the "[native code]" string literal in the
patch function appears in the output of toString and will fool a
sloppy function-to-string probe that merely tests for the presence
of that substring.
Let us assume a “perfect” patching system invisible to toString
probes has been used to instrument createElement, the single most
popular browser API observed in our data collection across the Alexa
50k (Section 4). Such a patch is still vulnerable to a probe that exploits
JS’s type coercion rules with a Trojan argument to detect patches on
the call stack at runtime (Listing 3).
For brevity, the provided proof-of-concept calls the Error con-
structor, which could itself be patched, but there are other ways
of obtaining a stack trace in JS. The Byzantine complexity of JS’s
1
2
3
4
5
6
7
8
9
10
11
12
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
7
8
9
10
11
12
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Jordan Jueckstock and Alexandros Kapravelos
/* from
https :// clarium . global . ssl . fastly . net ("..." comment
means irrelevant portions elided for brevity ) */
patchNodeMethod : function (a) {
var b = this ,
c = Node . prototype [a ];
Node . prototype [a] = function (a) {
" [ native code ] ";
var d = a. src || "";
return /* ... */
c. apply ( this , arguments )
}
/* ... */
}
Listing 2: Function patches hiding in plain sight
function paranoidCreateElement ( tag ) {
return document . createElement ({
toString : function () {
var callers = new Error () . stack . split ( '\n '). slice (1) ;
if (/ at paranoidCreateElement /. test ( callers [1]) ) {
return tag ; /* no patch */
} else {
}} ,}) ;}
throw new Error (" evasive action !"); /* patched ! */
Listing 3: Trojan argument attack (Chrome variant)
pathologically dynamic type system offers many opportunities for
callback-based exposure of patches and proxies via stack traces. Here
prototype patches face a cruel dilemma: either invoke the toString
operation and open the gates to side-effects (allowing detection and
evasion), or refuse to invoke it and break standard JS semantics
(allowing detection and evasion).
Patch Subversion. Finally, prototype patches can be subverted
through abuse of  elements. Each  is an inde-
pendent browser window with its own global object, unaffected
by prototype patches in other frames. We have observed scripts
exploiting this fact to evade patches they have detected.
/* from https
:// an . yandex . ru / resource / context_static_r_4583 . js */
/* ( some names changed
for clarity ; cachedJSON is initially null ) */
if ( window . JSON
&& a. checkNativeCode ( JSON . stringify )
&& a. checkNativeCode ( JSON . parse ))
return window . JSON ;
if (! cachedJSON ) {
var t = getInjectedIFrameElement () ;
cachedJSON = t. contentWindow . JSON ;
var e = t. parentNode ;
e. parentNode . removeChild (e)
}
Listing 4: Patch subversion in the wild
In Listing 4, the script resorts to frame injection to avoid patched
JSON encoding/decoding functions. Short of blocking the creation of
all s (and thus breaking much of the web), the only defense
against this evasion is to ensure that prototype patching code is
always run inside newly created frames before any other code can
access its contents. Such an invariant can be established through
some browser automation and debugging frameworks, like Chrome
DevTools. But the web extension APIs of both Firefox and Chrome, as
currently implemented, do not provide such a guarantee to extension
Figure 2: V8 architecture with VV8’s additions
authors, effectively crippling privacy or security (or research [45,
47, 49]) extensions that rely on this technique. (The author of a
prior related work [50] reported this bug to both the Firefox [3] and
Chrome [4] projects; neither report has been resolved at the time of
this writing, and we have confirmed that Chrome 71 is still affected.)
2.4 Summary
Robust JS instrumentation systems must be tamper proof, must pro-
vide comprehensive coverage, and must not introduce unmistakable
identifying artifacts. At present, JS language semantics and browser
implementation details prevent in-band implementations from meet-
ingthesecriteria.Webelievethatsecurity-criticalJSinstrumentation,
like traditional operating system auditing and enforcement logic,
belongs in “kernel space,” i.e., within the browser implementation
itself. But to be useful such a system must be cost-effective, both to
develop and to maintain.
3 SYSTEM ARCHITECTURE
We present cost-effective out-of-band JS instrumentation via Visi-
bleV8, a variant of Chrome that captures and logs traces of all native
API accesses made by any JS execution during browsing. Here we ex-
plain VV8’s internal design, relate our experience maintaining it over
several Chrome update cycles, evaluate its raw performance against
several alternatives, and describe the data collection and analysis
system we have built around VV8 to demonstrate its potential for
real-world measurement work.
3.1 Chromium/V8 Internals
Chromium is a massive project (over 20 million lines of code at time
of writing), actively developed, and frequently updated. Fortunately,
the Chromium browser’s architecture is modular, as is the design
of its V8 JS engine, so we can restrict our changes to a tiny subset
of the entire browser code base.
Modern versions of V8 handles JS parsing and execution via the
Ignition bytecode interpreter and the TurboFan JIT compiler (Figure
2). Ignition parses JS source code, generates bytecode, and executes
bytecode;itsdesignisoptimizedforlowlatency,nothighthroughput.
When run-time statistics indicate that JIT compilation is desired, Tur-
boFan aggressively optimizes and translates the relevant bytecode
into native machine code.
TurbofanIgnitionSourceParserBytecodeGeneratorBytecodeInterpreterJIT Compiler SourceASTBytecode Statistics Optimized MachineCode V8 Runtime LibraryVV8VV8VV8 LoggingVisibleV8: In-browser Monitoring
of JavaScript in the Wild
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Ignition and TurboFan rely on a large supporting run-time library
(RTL) that includes a foreign-function interface allowing JS code to
call into native (i.e., C++) code via type-safe API function bindings
created by the hosting application (e.g., Chrome). Functionality not
implemented by JS code or by V8 built-in code (e.g., Math.sqrt)
must use an API binding to native browser code. V8’s RTL thus
forms a software-enforced JS/native boundary not unlike a system
call boundary in a traditional OS kernel.
In V8’s 2-stage implementation, source code translation happens
once, and the run-time behavior of that source code is fixed (mod-
ulo JIT compiler optimizations) at the point of bytecode generation.
This predictable workflow keeps our patches to V8 small and self-
contained.
3.2 VisibleV8 Implementation
VV8 intercepts and logs all native API access from JS execution dur-
ing browsing. Native API accesses comprise API function calls and
all get and set operations on properties of JS objects constructed
by native (i.e., C++) code in the browser itself. The resulting traces
include context information (e.g., the source code location triggering
this event), feature names, and some abbreviated activity details like
function call parameters and the value being stored during property
writes. Our patches are small: 67 lines of code changed or added
inside V8 itself to insert our instrumentation hooks, and 472 lines
of new code for filtering and logging.
Instrumenting Native Function Calls. All foreign function
calls through the JS/native boundary are routed through a single
V8 runtime function that handles the transition from the bytecode
interpreter to native execution and back. By adding a single call state-
ment invoking our centralized tracing logic to this C++ function,
we can hook all such calls made under Ignition bytecode interpre-
tation. However, when the bytecode is JITted to optimized machine
code, one of TurboFan’s hundreds of optimization transforms will
reduce the call through that hooked runtime function into a more
direct alternative. This transformation would disrupt our function
call tracing, so we disabled that single specific reduction, leaving the
rest of the JIT compiler untouched. This removal slows V8 down by
1.3% on the Mozilla Dromaeo micro-benchmark suite (Section 3.3),
with margins of error near 1% as well. For the cost of two trivial code
modifications and very modest overhead, we gain full visibility of
JS calls into native API bindings under both bytecode interpretation
and JITted code execution.
InstrumentingNativePropertyAccesses.V8providesnosim-
ilarly convenient single choke-point from which all native object
property accesses can be observed. Property access is a frequent
and complicated operation in JS, and V8 has multiple fast-paths for
different access scenarios. Therefore, we target not the execution of
any bytecode here, but rather the generation of property-accessing
bytecode.
JS code entering V8 is first processed by Ignition’s source-to-
bytecode compiler before any execution. The bytecode compiler
uses a classic syntax-directed architecture. First, a parser constructs
an abstract syntax tree (AST) from JS source code. Then, the bytecode
generator walks this AST while generating bytecode to implement
the semantics required by the original JS syntax.
We instrument property access to native objects by patching the
bytecode generator. Specifically, we add statements to the AST vis-
itor logic for property get and set expressions to emit additional
bytecode instructions in each case. These instructions call a custom
V8 runtime function containing our tracing logic. Since such runtime
calls are effectively opaque black boxes to the TurboFan optimizer,
ourhookinstructioncannotbeautomaticallyoptimizedawayduring
JIT compilation. So our injected hook’s semantics are preserved from
bytecode generation, through interpretation and JIT compilation, to
optimized machine code execution. For completeness, we also hook
the built-in implementation of Reflect.get and Reflect.set in
the RTL using the same approach as for native function calls. Thus,
we also capture property accesses via calls to the JS Reflection API,
not only through member-access expressions.
Capturing Execution Context. All of our hooks, whether in
runtimefunctionsorininjectedbytecode,callintoourcentraltracing
logic. Written in C++ and compiled into V8, this code is responsible
for filtering events and capturing execution context information for
the trace log.
Native API calls are always logged. But since our property-access
hooks intercept all syntax- and reflection-based property accesses,
we must filter those events. We log only property accesses on na-
tive objects as indicated by V8’s internal object metadata API. V8
treats the JS global object as a unique special case, but we treat it as
a standard native object for logging purposes.
Fine-grained feature-usage analysis requires a significant amount
of execution context to be logged along with each function call or
property access. We link feature usage not just with a visited domain,
but also with the active security origin, active script, and location
within that script. We use V8’s C++ APIs to extract the invoking
script and location from the top frame of the JS call stack and the se-
curity origin from the origin property of the active global object. V8
and Blink sometimes execute internal JS code in a non-Web context,
where the global object has no origin property or it has a non-string
value. In this case an “unknown” origin is recorded (and we can later
discard this activity from our analysis). The visit domain (i.e., from
the URL displayed in the browser’s address bar) is associated with
the log during post-processing.
Logging Trace Data. Reliably recording JS trace data at low cost
introduced its own engineering challenges. Repeatedly looking up
and logging identical context for successive events wastes CPU time,
I/O bandwidth, and storage space. We therefore track execution con-
text state (such as active script) over time, and log it only when it has
changed since the last logged event. This optimization introduces
state-tracking and synchronization issues.
Chrome uses multiple processes and threads to achieve good
performance and strong isolation. Even with just a single browser
tab open, JS code can be executing simultaneously across multiple
threads. To keep our traces coherent, we must track context and log
events on a per-thread basis. To store our separate trace log streams
without races or synchronization bottlenecks, we create per-thread
log files.
3.3 Performance
With every JS object property access intercepted and possibly logged,
we expected VV8 to be significantly slower than stock Chrome in
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Jordan Jueckstock and Alexandros Kapravelos
all instrumented variants. Dromaeo’s recommended test suite com-
prises 49 micro-benchmarks, too many to effectively visualize in
a single figure, so we provide only the reported aggregate score.3
VV8-light still handily outperforms in-band instrumentation, but
VV8-full is significantly slower than the baseline (6x in aggregate).
VV8-full showed a wide range of performance on Dromaeo micro-
benchmarks, from six showing no slowdown at all to three showing