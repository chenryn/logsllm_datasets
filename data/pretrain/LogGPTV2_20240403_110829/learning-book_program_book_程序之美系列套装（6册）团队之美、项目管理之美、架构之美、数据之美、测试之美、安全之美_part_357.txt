鉴赏。之后我读到高德纳（DonaldKnuth）博士写的一本书《计算机
（生）《集
其中谈到了这个情况。高德纳博士认为数学家和计算机科学家都需
要具有相似的基本技能：在大脑中保持很多变数，然后在抽象链中
快速游弋寻找解决复杂程序的能力。高德纳博士说，数学家一般追
求真相，即寻找那些持续的并被广泛认为是正确的理念；而计算机
科学家则只是设一些条件语句2后就不管了。
数学家解决任何数学问题都是先简化问题。例如，有一个代数方
程：2X-6=0。我们将等式两边都加上6后再各除以2得到了X=3。这
个过程的每一步都是在简化这个方程。实际上，任何公式的最简表
达式都是其答案。有些时候你可能会得到像X=2Y这样的形式，虽然
没解出来X和Y，但因为你已经把问题简化到了最简形式而得到满
分。由此我想到了解这样问题的最佳例子是证明。
对于数学家来讲，好的证明便是作品，即纯逻辑的、抽象成符号的
那些东西。3我在Salisbury大学修过的两门课是豪末·奥斯丁博士讲
的数论和数学史。这两门课不是一般想象的那种课程。数论基本上
是重新建立伟大的证明，即拿到一个看起来合理的方程式，然后证
明其对于F（1）是正确的，对于F(N)也正确，对于F（N+1）也是正
确的。这叫做归纳证明。数论是试图理解宇宙中的分子（如呈现在
海螺壳上的斐波那契数列）是怎样联系在一起的，或者预测下一个
素数，或者解释为什么π出现在很多地方。
2036
---
## Page 2038
豪末·奥斯丁博士总是退后一步看他写在黑板上面的方程式，然后说
“现在，有一个美丽的等式。"这说明一个道理：美丽和简洁就是
好。
我也可以从我自已的作业中感受到这个道理，因为对的答案总是最
简洁的。如果回答错了，教授会指着乱七八糟的、一条比一条难看
的线告诉我：“就是那儿，Matt，你就是在那儿开始出错的（wentof
the rails）。"[4]
当学期结束时我们开始明白那些道理。说实在的，我真的觉得欠了
他一笔债似的。5]
当然，你可以感受到在任何抽象和多重变量的规律中都有美的存
在。例如，国际象棋、化学、宇宙工程或者音乐与艺术。回我自己
的感受是，至少在20世纪90年代，计算机科学中缺少这种美感。人
们不欢迎简洁而是欢迎复杂。人们不重视可给予用户的价值，越来
越多的高级开发员编写复杂的框架结构，使众多的初级开发员变成
程序执行员。本应是更快地创造价值却变成了在开发空中的城堡。
是用（），√一
些程序员觉得问题太简单所以自己附加了一些难题出来，或者不去
解决好一个问题而是为了解决一堆由来已久的问题而开发出了更广
范围的框架结构。
焦·思伯奇将这样的人称为“建筑宇航员”，意指他们变得太抽象而脱
离了公司的空气舱。口这时我会听到奥斯丁博士在我耳边说：“就
在那儿......你就是在那儿出错的。”10年后，我们学到了很多东西。
我们积揽了很多关于怎样将美学应用到开发中的知识。甚至OReilly
因此出版了一本书。可是测试呢？测试就关生是丑八怪吗？除了程
序员面对的类似TDD的测试，测试往好了说是没意思，往坏了说是
拔牙不用麻药那种痛。
我可不这么认为。数学里有初步证据一词，意味着一个论据表面看
来是真的而无需证明。例如，无需证明向等式两边加1或乘2其结果
不变。我们认可这些表面值是因为表面值是显而易见的。数学上的
研究是建立在基本的初步证据（或公理）之上的。[8]
这里我要对你说的是：无聊的、不用大脑的、令人厌恶的测试不是
好的测试，而只是检验，检验没有美感。谈到丑陋的测试解决方
案，我们都知道那是错的，是离谱的。我们可以做得更好。
2037
---
## Page 2039
[1]严格地讲，我的本科专业是数学（偏向于计算机科学专业）。
[2]条件语句指的是IF/THEN/ELSE语句块。
[3]我很注重证明之美。多年来，我问我遇到的各种有数学背景的人
有没有自己喜爱的数学证明，在看到了很多迷茫的眼神后我就不再
问这样的问题了。至于我自己，我喜爱的证明介于对所有正数求1/
（2）之和的极限的证明与牛顿积分的证明（你猜猜看是哪一个）
之间。（RobSabourin是其中一个例外。我问过他同样的问题，他的
回答是介于两者之间。）
[4]不是Ruby程序的双关语。我是Perl黑客。
[5]这里指的是豪末·奥斯丁博士、凯瑟琳·夏侬博士、穆罕穆德·莫在
姆博士和迪恩·得梵农教授及墨里恩马龙教授。
[6]我的同事及偶尔的写作伙伴克里斯迈克宏喜欢说测试是一门表演
艺术。你要自己证实他说的这话。哦，这本书也有他写的章节。
好，你自己看他写的吧。
[Z]http://www.joelonsoftware.com/articles/fog0000000018.html
[8]其实大多几何学理论都认为两条平行线不会相交，但这个法则无
从证明。这是公理。如果你能证明，给我打个电话，我们至少能获
得百万美元。我是说真的。
跟我来，最好的在前方
这句话很流行，但我想不起来这话是从哪里来的了。我相信我第一
次读到这句话的时候是在我祖母林奈特·义赛慕的诗集里。我最喜欢
她的一首诗是：“一旦我心里在歌唱，我就遇见你，我就听见那话
语。"那是在讲她的儿子一—我的爸爸，罗杰·秀瑟。虽然这首诗与
测试无关，但因为那是我所听过的最美的诗篇，还是忍不住公布于
此。
为了达到我们的目标，我们要将软件风险管理看成一种时间和资源
的投资，以寻找有可能惹恼用户的问题。《HowToBreakSoftware》
（Addison-Wesley）的作者詹姆士·维塔克（JamesWhittaker）将此看
法引申为：没有用户想给测试者开工资，用户们只愿意为已经做过
出去的天然属性。
不，我并不是在建议你们团队将测试完全外包出去。②在
Socialtext，我们并行地进行软件开发和测试。对一个测试团队来
讲，作为替代使用的测试外包只是“传递”软件给测试团队，并等待
2038
---
## Page 2040
结果，不费吹灰之力就得到上百个bug报告。概括来讲，测试外包既
无作用也没效率，更无美感。
我建议管理层将测试管理起来，要求测试报告写得令他们可以明
百。怎样能做到就在于我们自己了。我们从最五陋的错误二分法
手动或自动测试开始。
[1] http://blogs.msdn.com/james_whittaker/archive/2008/08/20/the-future-
of-software-testing-part-1.aspx.
[2]如果你的公司不将开发和测试看作主要的竞争手段，那说明你的
公司不是一个软件公司。建议你去找另一个有此想法并想要与你建
立共生关系的合伙人。（请参考我在下列网站发表的理科硕士论
文：
http://www.xndev.com/cs/cs692/TheOutsourcingEquation_ABIT.doc。)
自动化测试并不自动
“自动化测试"就像是“自动生产”一样，我们有很多机器人，它们能
做与人类做的完全一样的事情，这种说法很诱人。如图16-1所示，
有一个计算器应用程序，以下是我们的一个简单的测试脚本：
1.在第一个框中敲进4。
2.在第二个框中敲进4。
3.从列表中选择"Multiplication”（乘法）选项。
4.按"Submit”（提交）。
5.期望Answer（答案）中会出现16。
我们用计算机实现这些步骤，称之为自动化。问题是在每一个测试
步骤末尾都会有一个隐性的第二期待：“没有怪事发生。”
最简单的对付“没有怪事”的方式是捕捉整个屏幕并比较运行结果。
但如果真这样，任何时候开发人员移动按键，或改变屏幕设置，或
其他任何事情都会使软件产生错误。
现在最常见的情况是，只检验具体提出的要求，这样就意味着你会
错过以下一些现象：
2039
---
## Page 2041
MagicalMysteryCalculator
First Number:
Second Number.
ChooseanoperationSubmit
Chooseanoperation
Addition
Subtraction
Multiplication
Division
Exponent
Answer.
图16-1一个非常简单的应用程序
图标的背景颜色不透明。
一旦按下"Submit"按钮，列表会重回之前“加法"的状态，从而看起
来是“4+4=16”。
自输入第二个数值后，“取消"按钮变成无效。
应该是编辑无效（呈灰色）的Answer框却可以编辑。
操作用了8秒才完成。
只有新页面才有正确的答案，第一个输入的数值被清零了。换句话
说，现在算式看起来像0+4=8。
如果测试者是会思考的人，那么会立刻注意到这些事，可机器则不
然。所以说“自动测试"并不等同于人类做的测试。再者，假设得到
这样的结果需要10秒钟，人类会觉得对这样的简单乘法很难忍受，
从而用更广范围的数字或复杂的算式进行计算，以便测试是否还有
别的没注意到的错误。而机器就不会做这些事了。
这样我们找到了很多造成缺陷的原因。而缺陷也可以通过很多方法
找到。
走进Socialtext
在介绍Socialtext之前，我要介绍一下在我的工作环境和测试中遇到
的一些基本情况。在测试Socialtext时，我们要运用不同的技术去找
2040
---
## Page 2042
到（或防止）很多由不同原因造成的缺陷。如果不先明确这样的目
标，那么我们的测试团队会一直在揣测测试目的（找缺陷还是汇报
现状），我们的目标是否要达到（100%自动化测试），或者有什么
恰当的衡量（测试数量和覆盖范围的）标准。
我在Socialtext缺陷数据库中归纳出如表16-1所示的缺陷种类。
表16-1：缺陷种类和示例
缺陷种类
例子
不可测试或难以执行
6
输出的PDF文件字体不对、首标不对位、指前标签与打字
的位置错位
测试不出浏览器的兼容性
6
IE6的工作区没有下拉滚动条
或无法执行
可捉的计算机浏览器的
19
抹掉标签，或标签不消失
执行和评估
可捕提的短的演示（缺陷）
7
所有的文件都按照复杂的排序标准排序
特殊字符、意外处理或
13
特殊字符（@$==、版权或商标等）存人时不能正确存入
国际化问题
应用程序安装或升级