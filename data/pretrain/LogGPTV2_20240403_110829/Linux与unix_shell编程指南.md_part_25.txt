### 第18章 控制流结构

#### 18.4.6 缺省变量值
在读取变量时，如果用户仅输入回车键，并不总是意味着脚本会立即退出。可以通过检查变量是否已被设置来处理这种情况。若未被设置，则可以为其分配一个默认值。

以下脚本要求用户输入运行报表的日期。如果用户直接按下回车键，则使用默认日期（星期六），并将该值赋给变量`when`。如果用户指定了其他日期（如星期四或星期一），则这些值将作为有效的运行日期。这里采用了日期缩写来表示可能的有效日期。

**示例脚本：**
```bash
#!/bin/bash
read -p "请输入报表运行日期 (例如: Sat, Thu, Mon): " when
if [ -z "$when" ]; then
  when="Sat"
fi
echo "选择的日期是: $when"
```

#### 18.5 for循环
`for`循环的基本格式如下：
```bash
for 变量名 in 列表
do
  命令1
  命令2
  ...
done
```
当列表中的每个元素都被迭代时，`for`循环会执行一次所有命令。这里的命令可以是任何有效的shell命令或语句。变量名可以是任意合法的单词。`in`列表部分是可选的；如果不指定它，`for`循环将使用命令行的位置参数作为其列表。

**18.5.1 简单的for循环**
下面的例子显示了如何通过`for`循环遍历列表`1 2 3 4 5`，并打印出每一个数字。
```bash
for i in 1 2 3 4 5
do
  echo $i
done
```

**18.5.2 打印字符串列表**
这个例子中，`for`循环遍历字符串列表“orange red blue grey”，并通过`echo`命令输出列表中的每个元素。
```bash
for loop in orange red blue grey
do
  echo $loop
done
```

**18.5.3 使用for循环与ls命令**
此循环用于执行`ls`命令，列出当前目录下的所有文件。
```bash
for file in $(ls)
do
  echo $file
done
```

**18.5.4 对for循环使用参数**
当省略`in`列表选项时，`for`循环接受来自命令行的位置参数作为输入。
```bash
for param in "$@"
do
  echo $param
done
```

**更多关于for循环的应用案例**

- **连接服务器**：通过`for`循环遍历一系列服务器名称，并逐一尝试连接。
- **备份文件**：利用`for`循环结合`cp`命令批量备份文件。
- **多文件转换**：匹配特定前缀的所有文件，并将其内容转换为大写。
- **多sed删除操作**：使用`sed`删除空文件，并重命名它们。
- **循环计数**：结合`expr`命令实现循环计数功能。
- **发送邮件通知**：向所有在线用户发送电子邮件通知。
- **嵌套for循环**：在一个`for`循环内部再嵌入另一个`for`循环以处理更复杂的任务。

#### 18.6 until循环
`until`循环将持续执行一系列命令直到某个条件变为真为止。与`while`循环相反，`until`循环至少会执行一次，因为测试是在循环体之后进行的。

**基本格式：**
```bash
until 条件
do
  命令1
  ...
done
```

**18.6.1 简单的until循环**
下面这段脚本不断检查是否有root用户登录系统。一旦发现root登录，就向用户Simon发送一封邮件通知。
```bash
is_root=$(who | grep root)
until [ -n "$is_root" ]
do
  sleep 5
  is_root=$(who | grep root)
done
echo "Root user has logged in." | mail -s "Notification" simon@example.com
```

#### 18.7 while循环
`while`循环允许重复执行一组命令，直到给定条件不再满足为止。其语法结构如下：
```bash
while 条件
do
  命令1
  命令2
  ...
done
```

**18.7.1 简单的while循环**
这是一个基础的`while`循环示例，演示了如何从0开始递增计数直至达到5。
```bash
counter=0
while [ $counter -lt 5 ]
do
  echo $counter
  ((counter++))
done
```

**18.7.2 使用while循环读键盘输入**
`while`循环同样可用于从标准输入读取数据，如下所示：
```bash
while read film
do
  if [ "$film" = "quit" ]; then
    break
  fi
  echo "You entered: $film"
done
```

**18.7.3 用while循环从文件中读取数据**
最后，`while`循环非常适合于逐行处理文本文件的内容。
```bash
while IFS=, read -r name department id
do
  echo "Name: $name, Department: $department, ID: $id"
done < employees.csv
```

以上就是对控制流结构章节的一些关键点进行了优化和整理。希望这能帮助你更好地理解和应用这些概念。