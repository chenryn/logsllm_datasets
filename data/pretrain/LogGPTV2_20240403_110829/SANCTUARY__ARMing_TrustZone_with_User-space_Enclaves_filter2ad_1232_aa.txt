title:SANCTUARY: ARMing TrustZone with User-space Enclaves
author:Ferdinand Brasser and
David Gens and
Patrick Jauernig and
Ahmad-Reza Sadeghi and
Emmanuel Stapf
SANCTUARY:
ARMing TrustZone with User-space Enclaves
Ferdinand Brasser, David Gens, Patrick Jauernig, Ahmad-Reza Sadeghi, Emmanuel Stapf
Technische Universität Darmstadt, Germany
{ferdinand.brasser, david.gens, patrick.jauernig, ahmad.sadeghi, emmanuel.stapf}@trust.tu-darmstadt.de
Abstract—ARM TrustZone is one of the most widely deployed
security architecture providing Trusted Execution Environments
(TEEs). Unfortunately, its usage and potential beneﬁts for ap-
plication developers and end users are largely limited due
to restricted deployment policies imposed by device vendors.
Restriction is enforced since every Trusted App (TA) increases
the TEE’s attack surface: any vulnerable or malicious TA can
compromise the system’s security. Hence, deploying a TA requires
mutual trust between device vendor and application developer,
incurring high costs for both. Vendors work around this by
offering interfaces to selected TEE functionalities, however, these
are not sufﬁcient to securely implement advanced mobile services
like banking. Extensive discussion of Intel’s SGX technology
in academia and industry has unveiled the demand for an
unrestricted use of TEEs, yet no comparable security architecture
for mobile devices exists to this day.
We propose SANCTUARY, the ﬁrst security architecture which
allows unconstrained use of TEEs in the TrustZone ecosystem
without relying on virtualization. SANCTUARY enables execution
of security-sensitive apps within strongly isolated compartments
in TrustZone’s normal world comparable to SGX’s user-space
enclaves. In particular, we leverage TrustZone’s versatile Address-
Space Controller available in current ARM System-on-Chip
reference designs, to enforce two-way hardware-level isolation:
(i) security-sensitive apps are shielded against a compromised
normal-world OS, while (ii) the system is also protected from
potentially malicious apps in isolated compartments. Moreover,
moving security-sensitive apps from the TrustZone’s secure world
to isolated compartments minimizes the TEE’s attack surface.
Thus, mutual trust relationships between device vendors and
developers become obsolete: the full potential of TEEs can be
leveraged.
We demonstrate practicality and real-world beneﬁts of SANC-
TUARY by thoroughly evaluating our prototype on a HiKey 960
development board with microbenchmarks and a use case for
one-time password generation in two-factor authentication.
I.
INTRODUCTION
Mobile devices have already changed our daily lives in various
ways. Their success can mainly be attributed to the ecosystem
that evolved around them. The increasing computing and stor-
age capabilities, the vast number and variety of apps available
on app stores and markets, as well as the connectivity to
cloud services make mobile devices convenient replacements
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23448
www.ndss-symposium.org
for traditional computing platforms, and the de-facto standard
way of accessing the Internet [40].
Despite all beneﬁts, today’s mobile devices provide a large at-
tack surface imposing many security and privacy challenges on
their system design to be able to protect sensitive applications
such as mobile banking, payments, and eID services.
The TrustZone security architecture was motivated mainly by
the need for secure mobile services [5], when introduced in
2008 as part of an industry effort. TrustZone introduces the
notion of a normal world and a secure world. While the normal
world runs the Legacy OS (LOS) and user-level applications,
security-sensitive applications can be executed (partially or
entirely) within the secure world which represents a Trusted
Execution Environment (TEE) on top of the TrustZone kernel
and hardware.
Problems of TrustZone. Despite TrustZone’s implementa-
tion and wide-spread deployment, TrustZone-based TEEs are
mainly used by the vendors for own purposes, and hence
a ﬂourishing landscape of secure mobile services is largely
missing even more than a decade after TrustZone was initially
released [17]. One root cause for the lack of progress in
TrustZone-based TEEs’ adoption is that each installed Trusted
App (TA) increases the potential for security-critical vulnera-
bilities, allowing attackers to exploit bugs and escalate privi-
leges, exﬁltrate private data, or gain complete control over the
entire device. In practice, this means that bugs in TrustZone-
enabled applications expose a large number of devices to real-
world security threats, as continuously demonstrated by secu-
rity researchers across device families and hardware vendors
(e.g. in 2014 [15], [32], in 2015 [19], [47], in 2016 [20], [49],
and in 2017 [52], [44]). Google’s ProjectZero [45] recently
summarized the main ﬂaws of the current design of TrustZone
as follows: it combines (i) weak isolation between TAs in the
TEE, with (ii) Trusted Computing Base (TCB) expansion, and
(iii) highly privileged access to the platform, making TrustZone
a high-value target for attackers. Thus, vendors often aim
to control and restrict access to the TEE. Thorough security
assessments are needed to build a trust relationship between
device vendor and app developer. Furthermore, deploying
TAs to a TEE produces a large management overhead [23].
For smaller developers, the emerging costs pose a signiﬁcant
investment severely limiting the development of secure mo-
bile services in practice. Device vendors try to circumvent
these problems by offering some TEE functionalities, e.g. key
storage, over interfaces to normal-world apps. However, this
approach does not allow developers to protect own security-
sensitive code and data. Hence, the provided TEE services are
not sufﬁcient to implement feature-rich secure mobile services.
Existing Security Architectures. A number of ARM-based
security architectures have been proposed previously [28],
[10], [18]. However, they rely on virtual memory for isolation,
using the same isolation mechanism proven insufﬁcient for
isolating TAs within ARM TrustZone’s secure world [45].
Approaches that rely solely on temporal
isolation – i.e.,
suspending the entire system to provide protection for TA exe-
cution – are not suitable for today’s multi-core platforms [38],
[51], since they effectively disable multitasking and parallel
execution for the entire platform which imposes severe restric-
tions that directly affect user experience.
Goals and Contributions. Our main goal is to tackle the
aforementioned problems and enable the full potential of TEEs
for third-party application developers without requiring any
hardware changes.
To this end, we present SANCTUARY, a novel security ar-
chitecture for Trusted Execution Environments (TEEs) based
on the latest ARM System-on-Chip (SoC) reference designs.
SANCTUARY inherently de-privileges TrustZone-enabled apps
by moving them from the secure-world TEE to an isolated
normal-world compartment, thereby reducing the code base in
the secure world. We call these security-sensitive apps, which
are comparable to SGX’s user-space enclaves, Sanctuary Apps
(SAs). SANCTUARY achieves SA isolation by dynamically
partitioning and re-allocating system resources: CPU cores
and physical memory are temporarily reserved for the isolated
compartments to execute SAs without suspending the rest of
the system. In particular, we leverage TrustZone’s Address-
Space Controller (TZASC) to ensure a hardware-enforced,
two-way isolation between SAs and all other system compo-
nents. This enables an SGX-like usage of TrustZone without
requiring any hardware modiﬁcations.
Building SANCTUARY comes with a number of interesting
challenges: ﬁrst, the Legacy OS normally assumes full control
over all available CPUs. To support dynamic re-allocation of
cores we have to claim, initialize, and boot individual cores
dynamically at run time. Second, enforcing a strict separation
between normal world, SAs, and secure world necessitates
communication channels between them, e.g.,
to relay I/O
or shared data. Third, SANCTUARY must provide security
services, such as remote attestation and sealing of SAs (similar
to SGX), and provide secure ways for SAs to access them.
Finally, to offer tangible improvements in real-world scenarios,
SANCTUARY must provide adequate performance, e.g., in au-
thentication for mobile banking applications, without affecting
user experience. Our design of SANCTUARY tackles all of
these challenges to support SGX-like usage of TrustZone-
enabled applications.
To summarize, our main contributions are as follows:
• We present the design of SANCTUARY, a novel se-
curity architecture building on existing TrustZone’s
hardware and software components while enabling
enclave-like usage in the form of de-privileged
normal-world execution environments that are com-
pletely isolated from the rest of the system.
Our proof-of-concept implementation of SANCTUARY
uses the HiKey 960 development board, and Linaro’s
open-source software OP-TEE on top of TrustZone.
•
• We analyze and discuss the security properties of
SANCTUARY in a strong adversary setting that in-
cludes malicious SAs.
• We extensively evaluate SANCTUARY with respect to
its setup and communication overhead. Additionally,
we demonstrate real-world beneﬁts of SANCTUARY
in a detailed one-time password and key-generation
use case for two-factor authentication, which is highly
relevant for many security-sensitive applications such
as mobile payment. Our results show that SANC-
TUARY supports low latency and does not affect
user experience, hence, offering practical performance
characteristics.
II. BACKGROUND
The core principle of TEEs is isolation of code and data to
protect their integrity and conﬁdentiality.
TEEs have been developed by both, academic community
and industry. First, we present ARM TrustZone [5] which is
available on most ARM-based systems and which is the basis
for our novel security architecture SANCTUARY. Second, we
explain the TrustZone Address Space Controller (TZASC) that
enforces memory access control in TrustZone and plays a key
role for our hardware-based isolation in SANCTUARY.
We discuss TEE research proposals as well as other related
approaches in detail in Section VIII.
A. ARM TrustZone
TrustZone represents a set of security enhancements to proces-
sor designs and SoCs that are based on the ARM architecture.
TrustZone enhances the processor, memory (including caches),
and peripherals. A TrustZone-enabled processor can execute
instructions in four different privilege levels (Exception Lev-
els – EL0-EL3) and, additionally, two security modes at any
given time (cf., normal world and secure world in Figure 1).
To facilitate switching between normal and secure world, and
to provide a clean interface, EL3 (also called monitor mode)
runs the ARM Trusted Firmware (TF). On top of the Trusted
Firmware (TF), the secure and normal world both manage their
own address spaces using the remaining privilege levels for
separation: EL2 is optionally used for a hypervisor, EL1 for
the OS kernel, and EL0 (lowest execution privilege) is used
for execution of application code.
The processor can switch from normal to secure world via
an instruction called the secure monitor call (smc). When an
smc instruction is invoked from normal world, the processor-
core performs a context switch to the secure world (via the
monitor mode) and freezes its normal-world execution. All
other CPU cores of a multi-core system can independently
remain in normal-world mode.
TrustZone can separate physical memory into two partitions,
with one partition being exclusively accessible by the secure
world. This isolation is enforced by the memory controller
(TZASC), which is discussed in Section II-B. While the normal
world cannot access memory assigned to the secure world, the
secure world can access normal-world memory.
A device running ARM TrustZone boots up in the secure
world. After the secure world ﬁnished its initial setup by
2
III. ADVERSARY MODEL AND REQUIREMENTS
A. Adversary Model
Our threat model adheres to that of TrustZone and makes the
same underlying assumptions [5]. In particular, the attacker can
corrupt all normal-world software, including all privilege levels
up to an optional hypervisor (EL2), via remote or local soft-
ware attacks. Additionally, an adversary can conduct passive
physical attacks. However, the adversary cannot compromise
the secure-world software and the monitor mode.
Invasive physical attacks that tamper with hardware, e.g., to
inject faults at run time are out of scope. Similar to Trust-
Zone, we do not consider Denial-of-Service (DoS) attacks,i.e.,
SANCTUARY does not provide availability guarantees.
Our detailed standard assumptions are derived from the related
work [22], [10], [9], [12], [16], [28]:
•
•
•
•
•
•
Applications in normal world are considered un-
trusted.
The Legacy OS (LOS) in the normal world is un-
trusted.
Isolation between different privilege levels is enforced
by hardware through virtual memory.
All existing architectural defenses, such as Execute
Never (XN), Unprivileged Execute Never (UXN),
Privileged Execute Never (PXN), and Privileged Ac-
cess Never (PAN) are deployed and active.
Secure and normal world are isolated by the TrustZone
hardware extensions [5].
Software in the secure world, including the boot loader
and EL3 ﬁrmware (monitor mode), is trusted.
In this setting, SANCTUARY can be used to minimize the
amount of software required in the secure world as it allows
to outsource all Trusted Apps (TAs) to Sanctuary Apps (SAs)
which execute in isolated compartments in the normal world.
B. Requirements Analysis
To enable practical and secure Sanctuary Apps (SAs) on ARM
TrustZone-based platforms, a number of requirements must
be fulﬁlled. We show that SANCTUARY fulﬁlls these security
requirements in Section VI, and demonstrate that SANCTUARY
meets the functional requirements in Section VII.
1)
2)
3)
Code and data integrity. The integrity of the code
and data of an SA must be preserved. This can be
achieved by (i) isolation during SA execution and
(ii) attestation of the SA code when loaded into the
isolated compartment.
Data conﬁdentiality. Conﬁdentiality of data pro-
cessed in an SA must be preserved. This can be
achieved by (i) a secure channel for provisioning
the data, (ii) spatial isolation during execution, and
(iii) temporal isolation to prevent that sensitive in-
formation becomes accessible after SA execution has
ﬁnished.
Secure channel to secure world. An SA needs a
secure channel to utilize security services provided by