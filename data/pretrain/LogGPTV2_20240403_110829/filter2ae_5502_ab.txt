                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            System.out.println("This experiment test is successful");
        }
    }
之后我们看到生成了加密后新的CypherTest.class文件。
因为这个是自定义加密后，我们无法使用工具直接进行反编译操作和直接使用jvm默认类加载器去使用它。
之后我们再编写一个Dectyption解密类，对新加密的CypherTest.class进行解密操作。
    package com.testCypher;
    import java.io.ByteArrayOutputStream;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    public class Decryption extends ClassLoader { // 继承ClassLoader类
        private String rootDir;
        public Decryption(String rootDir) {
            this.rootDir = rootDir;
        }
        @Override // 重写覆盖findClass
        protected Class findClass(String className) throws ClassNotFoundException {
            Class c = findLoadedClass(className);
            if (c != null) {
                return c;
            } else {
                ClassLoader parent = this.getParent();
                try {
                    c = parent.loadClass(className);
                } catch (ClassNotFoundException e) {
                    // System.out.println("父类无法加载你的class，抛出ClassNotFoundException,已捕获，继续运行");
                }
                if (c != null) {
                    System.out.println("父类成功加载");
                    return c;
                } else {// 读取文件 转化成字节数组
                    byte[] classData = getClassData(className);
                    if (classData == null) {
                        throw new ClassNotFoundException();
                    } else { // 调用defineClass()方法
                        c = defineClass(className, classData, 0, classData.length);
                        return c;
                    }
                }
            }
        }
        public byte[] getClassData(String className) {
            String path = rootDir + "/" + className.replace('.', '/') + ".class";
            // 将流中的数据转换为字节数组
            InputStream is = null;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                is = new FileInputStream(path);
                byte[] buffer = new byte[1024];
                int temp = -1;
                while ((temp = is.read()) != -1) {
                    baos.write(temp ^ 0xff);
                }
                return baos.toByteArray();
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if (baos != null) {
                    try {
                        baos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }
这里我们使用将Decryption继承ClassLoader类，之后覆盖findClass()方法，并且在findClass()方法中调用defineClass()方法使用，最后加载我们自定义的getClassData方法去进行解密操作。
最后我们使用一个Demo进行测试，去查看当前类加载器机制的情况。如果我们想要获取其输出的System.out.println语句，需要反射机制去实现。这篇文章我们只学习ClassLoader类应用，就不去涉及其他知识点，获取其类加载器查看即可。
    package com.testCypher;
    public class Demo {
        public static void main(String[] args) throws ClassNotFoundException {
            Decryption deLoader = new Decryption("/usr/local/temp/");// 解密加载器
            Class t1 = deLoader.loadClass("com.test.CypherTest");// 加载已加密的类
            System.out.println("c3 的Class是  " + t1);
        }
    }
## URLClassLoader
除了上述自定义ClassLoader类，我们还可以学习URLClassLoader。URLClassLoader类继承ClassLoader类，可以加载本地磁盘和网络中的jar包类文件。
### 1\. 本地磁盘class文件调用
首先我在D盘创建了一个Test.java文件，写了一段calc.exe计算机弹窗代码。如果文件被成功解析执行，会输出Test
success字段且弹出计算器。
    package com.test;
    public class Test {
        public Test(){
            System.out.println("Test success!!!");
            try{
                Runtime.getRuntime().exec("cmd /c calc.exe");
            } 
            catch(Exception e) {
                e.printStackTrace();
            }
        }
    }
然后使用javac进行编译，在D盘生成对应的class文件。
之后我们再修改ClassLoaderTest类，利用URLClassLoader方式去获取D盘中Test.class文件。
    package com.Classloader;
    import java.io.File;
    import java.net.URI;
    import java.net.URL;
    import java.net.URLClassLoader;
    public class ClassLoaderTest {
        public static void main(String[] args) throws Exception{
            File file = new File("d:/");
            URI uri = file.toURI();
            URL url = uri.toURL();
            URLClassLoader classLoader = new URLClassLoader(new URL[]{url});
            Class clazz = classLoader.loadClass("com.test.Test");
            clazz.newInstance();
        }
    }
这里使用File获取类文件路径，之后使用URLClassLoader获取url地址为D盘，之后使用loadClass方法获取Test.class所含包名，然后实例化。运行发现解析获取到了D盘中Test.class文件。
## 2\. 网络传输class文件调用
之后我们将Test.class放置到电脑的Tomcat服务器目录下，然后启动Tomcat。之后新建个ClassLoaderDemo类网络加载Tomcat服务器中的Test.class.
    package com.Classloader;
    import java.net.URL;
    import java.net.URLClassLoader;
    public class ClassLoaderDemo {
        public static void main(String[] args) throws Exception {
            URL url = new URL("http://localhost:8080/examples/");
            URLClassLoader classLoader = new URLClassLoader(new URL[]{url});
            Class clazz = classLoader.loadClass("com.test.Test");
            clazz.newInstance();
        }
    }
这里使用URLClassLoader加载网络中的Tomcat服务器目录，成功解析获取到了目录下的Test.class文件。
## 小结
通过ClassLoader类的学习，我们知道不仅仅局限于在ClassPath中类的调用，还能够通过自定义CLassLoader类来加载我们特定的类来操作利用。在安全领域当中，我们往往会使用其ClassLoader特性，自定义恶意的类加载webshell利用以及自定以类字节码的native方法绕过RASP检测。所以了解ClassLoader特性并进行自定义编写，对我们了解java安全机制十分重要。
## 参考链接