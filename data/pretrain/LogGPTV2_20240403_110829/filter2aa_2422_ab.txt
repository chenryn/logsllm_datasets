In a memory pointer, you can have a base register, a 
scaled register, and a displacement. They are all 
optional, but you at least need to use one of them 
(otherwise it would be nothing at all)
Of the registers, you have the 8 general purpose 
ones to choose from (with some major exceptions)
If eax is 0x11223344, XOR [eax], eax will XOR the 
value of eax with the value in the address of 
0x11223344 and store it at that address
You can also add to the address of that pointer with a 
displacement. [eax + 0x42] would be [0x11223386] 
(considering what eax originally had above)
MODR/M Table
This is the machine encoding table that makes it all 
happen (well half of it, the other half is the SIB byte 
when required).
The MODR/M Table allows for encoding operands as 
a register, a pointer with one base register, a pointer 
with a base register and a 8 or 32 bit displacement, 
or just a 32 bit displacement.
If you want to have a scaled register or mix and 
match the above with a scaled register, then you 
need the SIB byte (selectable from this table)
As always, there are many exceptions
XOR EAX, EDX (0x31D0)
In this slide we work through an example, because 
we like to explore more than just theory.
In most of our examples, we will use the 0x31 
machine opcode for XOR (there are exceptions 
when we cover redundancies). It's the XOR r/m32, 
r32 encoding (so 1rst operand can be register or 
pointer and second operand has to be a register, 
both 32 bit)
In the table, we line up EAX with EDX to get our 
0xD0 value for the operand information for our 
machine code.
XOR [ECX], EAX (0x3101)
Next we do a pointer for the first operand. Note we 
are still starting with the 0x31 encoding for XOR
We are using the pointer of [ECX] for the first 
operand and EAX for the second operand. All we 
have to do is line them up to arrive at the 0x01 byte 
for the machine code byte to encode this. It's just as 
straight forward as the last example
XOR [ESI + 0x42], EAX (0x314642)
This one adds one little extra bit of complexity.
We first start with our 0x31 for XOR. Next we have a 
pointer of [ESI + 0x42] and then EAX.
EAX is easy to line up at the top. For the first 
operand, we need to find a line that supports ESI 
plus a 1 byte displacement. It is shown in the 
screenshot as 0x46
But we aren't done, the processor then expects the 
next byte of the instruction to actually be that offset, 
so the 0x42 displacement comes as the next byte
XOR [EBX + 0xFFF31337], ESP (0x31A33713F3FF)
If the previous example made sense, this one should 
be just as easy.
We need to find a pointer that supports EBX plus a 
32 bit displacement and the register of ESP. When 
lining this up on the table, we find that it is 0xA4.
The only thing that may appear confusing to those 
that don't know is that Intel encodes addresses in 
Little-Endian form. This is just another way to say 
that bytes are in backward order. So 0xFFF31337 
becomes 0x3713F3FF after our machine code of 
0x31A3.
This makes the entire instruction: 0x31A33713F3FF
XOR [0x42], EAX (0x310542000000)
This is looking at not using any registers for our 
pointer. This examples just demonstrates a literal 
displacement of 0x42.
We need to find the horizontal line that encodes for 
only a displacement and the vertical line for EAX. 
There are no horizontal lines for just an 8 bit 
displacement, so we are forced to use the 32 bit one 
and just pad the first 3 bytes with nulls.
So we have our 0x31 for XOR, 0x05 for the operand 
encoding from the chart, and 0x42000000 for the 
displacement data (ordered like that because Little-
Endian)
xor [ebx + ecx * 4 + 0x42], eax (0x31448B42)
Now we start to get a little crazier; we are going to 
use a scaled register.
Lining up the second operand of EAX on the chart is 
easy. To use a scaled register, we need the SIB byte, 
which is one of the horizontal options using [--][--]. 
There are 3 different variations of this SIB option, 
one without a displacement, one with an 8 bit 
displacement, and another with a 32 bit 
displacement. In this case, it's just the 8 bit 
displacement. So we choose 0x44 in this table, and 
then look next to our SIB table to pick the actual 
Base and Scaled register 
xor [ebx + ecx * 4 + 0x42], eax (0x31448B42)
The Base register will be the vertical line and the 
Scaled (multiplied register) will be the horizontal line. 
Finding EBX (vertical base register) is the easiest.
For the horizontal line, we must find the item that 
uses ECX and is also * 4. This is actually not terribly 
hard to find on the table either.
When you line this up, you get 0x8B for the SIB byte.
Finally, we have the displacement of 0x42 to add to 
the end of the instruction to get our final result
XOR [ESP], EAX (0x310424)
Now lets dig into some weird exceptions; lets start 
with using ESP as the base register in a pointer. 
When looking at the table, ESP isn't an option?
However, we know from the SIB byte that you can 
choose a Base register, although you have to choose 
a Scaled register as well. But did you notice from the 
table on the last slide that 'none' was an option for 
the Scaled register. That's the hack that assemblers 
use.
For the MODR/M byte, we line up EAX for the 
vertical and the [--][--] (SIB) for no displacement. This 
gives us 0x04 for our MODR/M byte.
Next let's look at what we do with the SIB byte.
XOR [ESP], EAX (0x310424)
Since ESP is our Base register, we line that up 
vertically. We choose the first 'none' horizontal line 
for the Scaled register to give us 0x24.
So what's the difference between that 'none' and the 
3 others. There isn't any in this particular case, 
hence the next slide
XOR [ESP], EAX (0x310424), 
With All the 'NONEs'
In this slide we see the PoC of using all 4 of the 
'none' options in the SIB byte. This is to note that the 
assembly is the same for any of these
Using SIB When You Don't Need To
In the last example, we needed to use the 'none' field 
in the SIB byte because ESP wasn't an option for the 
base register. However, we can still use this 
ignorance when the base register is already an 
option in the MODR/M table.
In this slide, we are showing that we are using this 
encoding with EAX. Keep in mind that we can still 
use any of the 4 'none' bytes
Gratuitous SIB
In this screenshot we first see how an assembler 
'should' encode XOR [EAX], EAX. The last 4 
instructions are the various ways we can encode it 
with the pointless 'none's in the SIB byte
XOR [ESP * 2], EAX (0xNOPE)
What's the exception to use ESP as a Scaled 
register? as we didn't notice it as an option in the SIB 
byte encodings. It's because you can't. You try to 
write this above instruction and your assembler will 
give you an error and make you feel bad.
XOR [EBP + EAX * 2], EAX (0x31444500)
This instruction has a base register of 
EBP and a scaled register of EAX * 2. 
Vertically aligning the 2nd operand of 
EAX is easy. Since we are using a 
scaled register, we need to find the 
appropriate [--][--] line horizontally.
One would think that we would pick 
0x04, but that is not the case, we need 
to pick 0x44 due to some EBP base 
register complications in the SIB byte 
that we are about to explore on the next 
slide
XOR [EBP + EAX * 2], EAX (0x31444500)
Lining up the horizontal line for the scaled register of EAX * 2 is 
straight forward. However, we don't find an obvious EBP base 
register on the vertical line. It's the [*] line that actually gives us 
what we need.
The [*] line is dependent on the displacement option we pick from 
the MODR/M byte. There are only 3 variations; no displacement, 
8-bit displacement, and 32-bit displacement. The results are as 
follows:
No displacement = [ScaledReg * n + 0x11223344]
Disp8 = [EBP + ScaledReg * n +0x11]
Disp32 = [EBP + ScaledReg * n +0x11223344]
Either of the last 2 options would technically work, but we chose 
the 8-bit displacement option because it would get encoded in with 
3 less bytes.
So finally, we arrive at the 0x45 byte in our table. However, we 
aren't done until we actually put the 0x00 byte at the end, because 
this is our 'invisible' displacement This means that our assembly 
would more literally be interpreted as such: XOR [EBP + EAX * 2 + 
0x00], EAX
Implied Scale (* 1)
• Consider [eax + ecx]
● You can't have two base registers; one has to 
be scaled
• Assemblers viewed a 2nd 'base' register as 
scaled by '1'. So:
● [eax + ecx * 1]
There are things we take for granted when only 
writing in a high level language like assembly. If you 
type a pointer like [eax + ecx], the thing to consider is 
that there can only be one base register.
An assembler (like nasm) is going to look to your 2nd 
register to encode as the scaled register; the 
assembler will treat [eax + ecx] more literally as [eax 
+ ecx * 1]. Or it will make ecx the scaled register and 
scale it by 1.
Convert Scaled to Base
• Consider [ecx * 1]
● Encoding for SIB requires more bytes
• If there is no base register already:
● Assemblers will convert a scaled by '1' register 
as a base. So:
● [ecx]
It's one thing to have something like [ecx * 4]. It is 
unambiguous: there is no base register and we need 
a scaled register of ecx * 4.
[ecx * 1] on the other hand, assemblers don't do 
what you asked for here. If you don't pick a base 
register, and your scaled register is scaled by one, 
your assembler is just going to make it the base 
register.
My instinct is to get annoyed with this, as my 
assembly is being interpreted into machine code that 
I didn't intend for, as I would have and could have 
written [ecx] if that's what I wanted. The reason an 
assembler is going to choose this because it takes 
less bytes to encode (because it doesn't need the 
SIB byte).
ESP * 1
• You CAN'T scale ESP
• You write [eax + esp *4], you get an error
• You write [eax + esp * 1] or [eax + esp]
● You Dont?
• This is because the assembler converts it for 
you behind your back to:
● [esp + eax * 1]
So we know that we can't use ESP as the scaled 
register. This is why if we write something like [eax + 
esp * 4] we will get an error. But why do we not get 
an error if we write [eax + esp * 1]?
Well, if you were to assemble this and then 
disassemble it, you would discover that your 
assembler actually writes this as [esp + eax * 1].
In other words, if esp is scaled by only one, and the 
base register itself is not also esp, it will make the 
base register the scaled one so esp can join back in 
as the base. It logically does the same thing.
Ignores You, Chooses Less Bytes
Sometimes
• This is about the commutative property, it works 
with 6 of the 8 general purpose registers, like 
this:
• It does work with EBP, but differently:
• And doesn't work with ESP, because ESP 
doesn't scale
Speaking of swapping around the registers, this is the 
commutative property in mathematics (because addition). 
We can do this no problem with eax, ecx, edx, ebx, esi, 
and edi.
esp is a register that can't be swapped, because of its 
scaling issues as previously discussed.
We also discussed the trade-off that needs to be made 
when using ebp in the SIB byte, so we do this at the cost of 
having to add the extra disp8 null.
However, the most interesting part of this is that if you use 
[ebp+eax] in your assembly, it will take you literally If it did 
[eax + ebp] (logically the same), it would actually take 1 
less byte to encode, but it doesn't opt for less machine 
code in this case. Just goes to show that sometimes an 
assembler optimizes for this kind of stuff, but not always
Put a Null in it
• If a pointer doesn't have a displacement, then 
put in a displacement of 0x00...same difference 
right
• If there's an 8 bit displacement, make it a 32 bit 
displacement with 3 bytes of leading nulls
For instructions that don't already have 
displacements, there's nothing from stopping us from 
being a troll and adding a displacement of nothing 
(0x00). We can add an 8-bit or a 32-bit displacement 
with nothing in it and the memory pointer would be 
logically the same.
Additionally, if we have an 8-bit displacement, we 
can 'upgrade' it to 32-bit by padding 3 null bytes in 
front of it.
Put a Null in it w/ the 
Commutative Property Too
• Add a null to it and swap registers
• Add 3 nulls to it and swap registers
Of course you can get creative and mix and match 
these redundancies.
This slide shows us mixing the 'null upgrade' with the 
commutative property
Basic ModR/M Redundancy
This redundancy works because x86 generally has no 
instructions that allow for both operands to be a memory 
location in the same instruction.
For instance, if your instruction was 'mov', you could move 
a value of a register into a memory location, you could also 
move the value in a memory location into a register, but 
you could never move the value of a memory location into 
another memory location (with only one instruction).
Because of this, you need an encoding for each scenario. 
However, the operand that allows for a memory pointer 
also allows for it to just be a register as well (allowing 
register to register).
This means that both encodings allow for register to 
register. This is where the redundancy comes into play and 
why we can see something like the above screenshot.
Basic ModR/M Redundancy
In the previous slide it seemed like magic that we 
could just swap out the machine opcode and leave 
the operand data (0xC0) alone. This isn't always the 
case. With the different encodings, the vertical and 
horizontal parts of the table get swapped. But in the 
case of using the same register with itself, it's 
symmetric enough to not change the value in the 
table.
NASMs Interpretive Dance 
in SIB
• Or how 'eax * 2' is the same as 'eax + eax'
• And way more unusual things
This is another byte saving optimization. 
The next slide will follow the maze of the 
MODR/M + SIB byte to find out why
NASMs Interpretive Dance
in SIB
So in the top 2 screenshots, we are comparing two 
different assembly instructions to the machine code 
nasm outputs on the right. Notably, both instructions 
are converted to the [eax + eax] form. It is logically 
the same as [eax * 2], what does nasm have against 
scaling eax?
It is because of the side effects of not having a base 
register when using SIB. You can have 'none' for a 
scaled register, but having 'none' (or [*]) for the base 
register comes at the cost of having to use a 32-bit 
displacement. This was covered a few slides back 
(the 3 options the [*] uses).
If we take [eax * 2] literally, it doubles our machine 
code for the instruction. Assemblers do not see this 
as ideal
NASM is Tolerant to
UR Bullshit
But what's really interesting is what kind of bullshit 
assemblers like nasm will put up with.
First of all, there is no scale of * 5; only 1, 2, 4, and 8. 
But nasm is smart enough to look at this instruction 
and decide it is logically the same as eax + eax * 4
Finally, scaling by something non-existant is one 
thing, but there is no such thing as subtraction in our 
pointer format, but it is valid assembly to nasm. 
Nasm is smart enough to look at [eax * 2 – eax] and 
know that it is pretty much the same thing as just 
[eax]
I love nasm
TEST r32, r/m32
• TEST 32-bit register with a 32-bit register OR 32-bit memory
location
• This form can be written in Assembly Language
• But there is no machine code representation of it
I like this one. This slide is saying that you can write 
something in assembly like: TEST EAX, [EAX]
The thing is, there is no machine encoding to 
represent this. We previously discussed how we 
needed more than one encoding to mitigate being 
able to use a pointer for the source or destination. So 
what's going on here?
We will explore in the next couple slides
CMP r32, r/m32
This slide shows the two different encodings of the 
cmp instruction with 32bit operands.
The last 2 screenshots compare the source 
assembly with the resulting machine-code in a 
debugger.
TEST r32, r/m32
If we write the assembly shown on top, we get 
machine code comparable to the middle image.
What we see here is that the first instruction gets 