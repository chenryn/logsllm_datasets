D. Gens et al.
6 Discussion
6.1 Applying LAZARUS to Diﬀerent KASLR Implementations
Relocation of kernel code is an example of how randomization approaches can
be used as a defense building block which is implemented by practically all
real-world operating systems [2,11,14]. While a kernel employing control-ﬂow
integrity (CFI) [1,3,21] does not gain security beneﬁt from randomizing the
code section, it might still randomize the memory layout of other kernel mem-
ory regions: for instance, it can be applied to the module section, to hide the
start address of the code of dynamically loadable kernel modules. Further, ran-
domization was recently proposed as a means to protect the page tables against
malicious modiﬁcation through data-only attacks [5].
Since all of the publicly available attacks focus on disclosing the random oﬀset
of the kernel code section, we implemented our proof of concept for KASLR as
well. Nonetheless, we note that LAZARUS is not limited to hardening kernel code
randomization, but can be applied to other randomization implementations as
well. In contrast to the case of protecting KASLR, our defense does not require
any special treatment for hiding the low-level switching code if applied to other
memory regions.
6.2 Other Side-Channel Attacks on KASLR
As explained in Sect. 2, almost all previously presented side-channel attacks
on KASLR exploit the paging subsystem. LAZARUS isolates kernel vir-
tual memory from user processes by separating their page tables. However,
Evtyushkin et al. [6] recently presented the branch target buﬀer (BTB) side-
channel attack, which does not exploit the paging subsystem for virtual kernel
addresses.
In particular, they demonstrated how to exploit collisions between branch
targets for user and kernel addresses. The attack works by constructing a mali-
cious chain of branch targets in user space, to ﬁll up the BTB, and then executing
a previously chosen kernel code path. This evicts branch targets previously exe-
cuted in kernel mode from the BTB, thus their subsequent execution will take
longer.
While the BTB attack was shown to bypass KASLR on Linux, it diﬀers from
the paging-based side channels by making a series of assumptions: (1) the BTB
has a limited capacity of 10 bits, hence it requires KASLR implementations to
deploy a low amount of entropy in order to succeed. (2) it requires the attacker to
craft a chain of branch targets, which cause kernel addresses to be evicted from
the BTB. For this an adversary needs to reverse engineer the hashing algorithm
used to index the BTB. These hashing algorithms are diﬀerent for every micro
architecture, which limits the potential set of targets. (3) the result of the attack
can be ambiguous, because any change in the execution path directly eﬀects the
BTB contents.
LAZARUS: Practical Side-Channel Resilient
255
There are multiple ways of mitigating the BTB side-channel attack against
KASLR. A straightforward approach is to increase the amount of entropy for
KASLR, as noted by Evtyushkin et al. [6]. A more general approach would be
to introduce a separation between privileged an unprivileged addresses in the
BTB. This could be achieved by oﬀering a dedicated ﬂush operation, however
this requires changes to the hardware. Alternatively, this ﬂush operation can
emulated in software, if the hashing algorithm used for indexing the BTB has
been reverse engineered. We implemented this approach against the BTB attack
by calling a function which performs a series of jump instructions along with our
page tables switching routine and were unable to recover the correct randomiza-
tion oﬀset through the BTB attack in our tests.
7 Related Work
In this section we discuss software and hardware mitigations against side-channel
attacks that were proposed, and compare them to our approach.
7.1 Hardware Mitigations
Privilege Level Isolation in the Caches. Eliminating the paging side channel is
also possible by modifying the underlying hardware cache implementation. This
was ﬁrst noted by Hund et al. [10]. However, modern architectures organize
caches to be optimized for performance. Additionally, changes to the hardware
are very costly, and it takes many years to widely deploy these new systems.
Hence, it is unlikely that such a change will be implemented, and even if it is,
existing production systems will remain vulnerable for a long time. Our software-
only mitigation can be deployed instantly by patching the kernel.
Disabling Detailed Timing for Unprivileged Users. All previously presented pag-
ing side-channel attacks rely on detailed timing functionality, which is provided
to unprivileged users by default. For this reason, Hund et al. [10] suggested to
disable the rdtsc instruction for user mode processes. While this can be done
from software, it eﬀectively changes the ABI of the machine. Since modern plat-
forms oﬀer support for a large body of legacy software, implementing such a
change would introduce problems for many real-world user applications. As we
demonstrate in our extensive evaluation, LAZARUS is transparent to user-level
programs and does not disrupt the usual workﬂow of legacy software.
7.2 Software Mitigations
Separating Address Spaces. Unmapping the kernel page tables during user-land
execution is a natural way of separating their respective address spaces, as sug-
gested in [8,13]. However, Jang et al. [13] considered the approach impractical,
due to the expected performance degradation. Gruss et al. [8] estimated the
performance impact of reloading the entire page table hierarchy up to 5%, by
256
D. Gens et al.
reloading the top level of the page table hierarchy (via the CR3 register) during
a context switch, but did not provide any implementation or detailed evaluation
of their estimated approach. Reloading the top level of the page tables results
in a higher performance overhead, because it requires the processor to ﬂush
all of the cached entries. Address space separation has been implemented by
Apple for their iOS platform [16]. Because the ARM platform supports multiple
sets of page table hierarchies, the implementation is straightforward on mobile
devices. For the ﬁrst time we provide an improved and highly practical method
of implementing address space separation on the x86 platform.
Increasing KASLR Entropy. Some of the presented side-channel attacks beneﬁt
from the fact that the KASLR implementation in the Linux kernel suﬀers from a
relatively low entropy [6,10]. Thus, increasing the amount of entropy represent a
way of mitigating those attacks in practice. While this approach was suggested by
Hund et al. [10] and Evtyushkin et al. [6], it does not eliminate the side channel.
Additionally, the mitigating eﬀect is limited to attacks which exploit low entropy
randomization. In contrast, LAZARUS mitigates all previously presented paging
side-channel attacks.
Modifying the Page Fault Handler. Hund et al. [10] exploited the timing dif-
ference through invoking the page fault handler. They suggested to enforce its
execution time to an equal timing for all kernel addresses through software.
However, this approach is ineﬀective against attacks which do not invoke the
kernel [8,13]. Our mitigation reorganizes the cache layout in software to suc-
cessfully stop the attacks, that exploit hardware features to leak side channel
information, even for attacks that do not rely on the execution time of any
software.
KAISER. Concurrently to our work Gruss et al. implemented strong address-
space separation [7]. Their performance numbers are in line with our own mea-
surements, conﬁrming that separating the address spaces of kernel and userland
constitutes a practical defense against paging-based side-channel attacks. In con-
trast to LAZARUS, their approach does not make use of dummy mappings to
hide the switching code, but separates it from the rest of the kernel code section
(as outlined in 3.3.C2).
8 Conclusion
Randomization has become a vital part of the security architecture of mod-
ern operating systems. Side-channel attacks threaten to bypass randomization-
based defenses deployed in the kernel by disclosing the randomization secret
from unprivileged user processes. Since these attacks exploit micro-architectural
implementation details of the underlying hardware, closing this side channel
through a software-only mitigation eﬃciently is challenging. However, all of
these attacks rely on the fact that kernel and user virtual memory reside in
LAZARUS: Practical Side-Channel Resilient
257
a shared address space. With LAZARUS, we present a defense to mitigate pre-
viously presented side-channel attacks purely in software. Our approach shows
that side-channel information exposed through shared hardware resources can be
hidden by separating the page table entries for randomized privileged addresses
from entries for unprivileged addresses in software. LAZARUS is a necessary
and highly practical extension to harden kernel-space randomization against
side-channel attacks.
Acknowledgment. This work was supported in part by the German Science Founda-
tion (project S2, CRC 1119 CROSSING), the European Union’s Seventh Framework
Programme (609611, PRACTICE), and the German Federal Ministry of Education
and Research within CRISP.
Dean Sullivan, Orlando Arias, and Yier Jin are partially supported by the Depart-
ment of Energy through the Early Career Award (DE-SC0016180). Mr. Orlando Arias
is also supported by the National Science Foundation Graduate Research Fellowship
Program under Grant No. 1144246.
References
1. Abadi, M., Budiu, M., Erlingsson, ´U., Ligatti, J.: Control-ﬂow integrity princi-
ples, implementations, and applications. ACM Transactions on Information System
Security 13 (2009)
org/∼jmorris/lss2013 slides/cook kaslr.pdf
2. Cook, K.: Kernel address space layout randomization (2013). http://selinuxproject.
3. Criswell, J., Dautenhahn, N., Adve, V.: Kcoﬁ: complete control-ﬂow integrity for
commodity operating system kernels. In: 35th IEEE Symposium on Security and
Privacy. S&P (2014)
4. CVEDetails: CVE-2016-4557
(2016).
http://www.cvedetails.com/cve/cve-
2016-4557
5. Davi, L., Gens, D., Liebchen, C., Ahmad-Reza, S.: PT-Rand: practical mitigation
of data-only attacks against page tables. In: 24th Annual Network and Distributed
System Security Symposium. NDSS (2017)
6. Evtyushkin, D., Ponomarev, D., Abu-Ghazaleh, N.: Jump over aslr: attacking
branch predictors to bypass aslr. In: IEEE/ACM International Symposium on
Microarchitecture (MICRO) (2016)
7. Gruss, D., Lipp, M., Schwarz, M., Fellner, R., Maurice, C., Mangard, S.: Kaslr is
dead: long live kaslr. In: International Symposium on Engineering Secure Software
and Systems. ESSoS (2017)
8. Gruss, D., Maurice, C., Fogh, A., Lipp, M., Mangard, S.: Prefetch side-channel
attacks: bypassing smap and kernel aslr. In: Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, pp. 368–379. ACM (2016)
9. Henning, J.L.: Spec cpu2006 benchmark descriptions. SIGARCH Comput. Archit.
News 34(4), 1–17 (2006). http://doi.acm.org/10.1145/1186736.1186737
10. Hund, R., Willems, C., Holz, T.: Practical timing side channel attacks against
kernel space ASLR. In: 34th IEEE Symposium on Security and Privacy. S&P
(2013)
11. Inc., A.: Os x mountain lion core technologies overview (2012). http://movies.
apple.com/media/us/osx/2012/docs/OSX MountainLion Core Technologies
Overview.pdf
258
D. Gens et al.
12. Intel: Intel 64 and IA-32 architectures software developer’s manual (2017).
http://www-ssl.intel.com/content/www/us/en/processors/architectures-
software-developer-manuals.html
13. Jang, Y., Lee, S., Kim, T.: Breaking kernel address space layout randomization with
intel TSX. In: Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security, pp. 380–392. ACM (2016)
14. Johnson, K., Miller, M.: Exploit mitigation improvements
in windows
8 (2012). https://media.blackhat.com/bh-us-12/Brieﬁngs/M Miller/BH US 12
Miller Exploit Mitigation Slides.pdf
15. Larabel, M., Tippett, M.: Phoronix
test
suite
(2011).
http://www.
phoronix-test-suite.com
16. Mandt, T.: Attacking the ios kernel: a look at “evasi0n”(2013). http://www.nislab.
no/content/download/38610/481190/ﬁle/NISlecture201303.pdf
17. MITRE: CVE-2015-1328
(2015). https://cve.mitre.org/cgi-bin/cvename.cgi?
name=CVE-2015-1328
18. MITRE: CVE-2016-0728
(2016). https://cve.mitre.org/cgi-bin/cvename.cgi?
name=cve-2016-0728
19. MITRE: CVE-2016-5195
(2016). https://cve.mitre.org/cgi-bin/cvename.cgi?
name=CVE-2016-5195
20. Molinyawe, M., Hariri, A.A., Spelman, J.: $hell on earth: from browser to system
compromise. In: Blackhat USA. BH US (2016)
21. PaX Team: RAP: RIP ROP (2015)
22. Staelin, C.: lmbench: an extensible micro-benchmark suite. Softw. Pract. Experi-
ence 35(11), 1079 (2005)
23. Wojtczuk, R.: Tsx improves timing attacks against kaslr (2014). https://labs.
bromium.com/2014/10/27/tsx-improves-timing-attacks-against-kaslr/