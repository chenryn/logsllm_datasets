are existentially unforgeable.
6. ACKNOWLEDGMENTS
Supported by ERC Project ERCC (FP7/615074).
7. REFERENCES
[1] M. Bellare, G. Neven. Multi-signatures in the plain
public-key model and a general forking lemma. In
A. Juels, R. N. Wright, S. Vimercati, eds., ACM CCS
06: 390-399, Alexandria, US, Oct. 2006. ACM Press.
[2] E. Brickell, D. Pointcheval, S. Vaudenay, M. Yung.
Design validations for discrete logarithm based
signature schemes. In H. Imai, Y. Zheng, Eds.,
PKC 2000, LNCS 1751: 276-292, Melbourne, AU,
Jan. 2000. Springer.
[3] D. Brown. On the provable security of ECDSA. In I.
Blake, G. Seroussi, N. Smart, Eds., Advances in
Elliptic Curve Cryptography: 21-40. Cambr. Uni. Pr.,
2005
[4] D. Brown. Generic groups, collision resistance, and
ECDSA. IACR ePrint 2002/026.
http://ia.cr/2002/026.
[5] D. Brown. Generic groups, collision resistance, and
ECDSA. Des. Codes Cryptography, 35(1):119-152,
2005.
1660[6] D. Brown. One-up problem for (EC)DSA. IACR
ePrint 2008/286. http://ia.cr/2008/286.
[7] A. W. Dent. Adapting the weaknesses of the random
oracle model to the generic group model. In Y. Zheng,
Ed., ASIACRYPT 2002, LNCS 2501: 100-109,
Queenstown, NZ, Dec. 2002. Springer.
[8] V. Dolmatov, A. Degtyarev. GOST R 34.10-2012:
Digital Signature Algorithm. RFC 7091, Dec. 2013.
http://www.ietf.org/rfc/rfc7091.txt.
[9] N. Howgrave-Graham, N. Smart. Lattice attacks on
digital signature schemes. Des. Codes Crypt.,
23(3):283-290, 2001.
[10] ISO/IEC 11889:2015. Information technology - trusted
platform module library, 2013.
[11] C. Kerry, P. Gallagher. FIPS PUB 186-4: Digital
Signature Standard (DSS), 2013.
http://dx.doi.org/10.6028/NIST.FIPS.186-4.
[12] E. Kiltz, K. Pietrzak. Leakage resilient ElGamal
encryption. In M. Abe, Ed., ASIACRYPT 2010, LNCS
6477: 595-612, SG, Dec. 2010. Springer.
[13] P. J. Leadbitter, D. Page, N. P. Smart. Attacking DSA
under a repeated bits assumption. In M. Joye, J.-J.
Quisquater, Eds., CHES 2004, LNCS 3156: 428-440,
Cambridge, US, Aug. 2004. Springer.
[14] J. Malone-Lee, N. P. Smart. Modiﬁcations of ECDSA.
In K. Nyberg, H. M. Heys, Eds., SAC 2002, LNCS
2595: 1-12, St. John’s, CA, Aug. 2003. Springer.
[15] U. Maurer. Abstract models of computation in
cryptography. In N. P. Smart, Ed., 10th IMA
International Conference on Cryptography and
Coding, LNCS 3796: 1-12, Cirencester, UK, Dec. 2005.
Springer.
[16] U. Maurer, S. Wolf. Lower bounds on generic
algorithms in groups. In K. Nyberg, Ed.,
EUROCRYPT’98, LNCS 1403: 72-84, Espoo, FI,
May/June 1998. Springer.
[17] G. Neven, N. P. Smart, B. Warinschi. Hash function
requirements for Schnorr signatures. J. Mathematical
Cryptology, 3(1):69-87, 2009.
[18] P. Q. Nguyen, I. Shparlinski. The insecurity of the
elliptic curve digital signature algorithm with partially
known nonces. Des. Codes Crypt., 30(2):201-217, 2003.
[19] P1363. IEEE P1363-2000: Standard speciﬁcations for
public key cryptography. IEEE, Inc., 2000.
http://grouper.ieee.org/groups/1363/.
[20] D. Pointcheval, J. Stern. Security proofs for signature
schemes. In U. Maurer, Ed., EUROCRYPT’96, LNCS
1070: 387-398, Saragossa, ES, May 1996. Springer.
[21] D. Pointcheval, S. Vaudenay. On provable security for
digital signature algorithms. Technical report,
Technical Report LIENS-96-17, LIENS, 1996.
[22] V. Shoup. Lower bounds for discrete logarithms and
related problems. In W. Fumy, Ed., EUROCRYPT’97,
LNCS 1233: 256-266, Konstanz, DE, May ’97.
Springer.
[23] N. P. Smart. The exact security of ECIES in the
generic group model. In B. Honary, Ed., 8th IMA
International Conference on Cryptography and
Coding, LNCS 2260: 73-84, Cirencester, UK,
Dec. 2001. Springer.
[24] J. Stern, D. Pointcheval, J. Malone-Lee, N. P. Smart.
Flaws in applying proof methodologies to signature
schemes. In M. Yung, Ed., CRYPTO 2002, LNCS
2442: 93-110, Sta. Barbara, US, Aug. 2002. Springer.
[25] S. Vaudenay. Hidden collisions on DSS. In N. Koblitz,
Ed., CRYPTO’96, LNCS 1109: 83-88, Sta. Barbara,
US, Aug. 1996. Springer.
[26] S. Vaudenay. The security of DSA and ECDSA. In
Y. Desmedt, Ed., PKC 2003, LNCS 2567: 309-323,
Miami, US, Jan. 2003. Springer.
[27] Z. Zhang, K. Yang, J. Zhang, C. Chen. Security of the
SM2 signature scheme against generalized key
substitution attacks. In L. Chen, S. Matsuo, Eds.,
Security Standardisation Research 2015, LNCS 9497:
140-153, Tokyo, JP, Dec. 2015. Springer.
APPENDIX
A. FUNCTIONS IN THE GGM
We consider how the generic group model should be used
for the analysis of DL-based signature schemes that make
use of a non-algebraic component such as a hash function.
Although they have never been written down at a formal
level (to the best of our knowledge), most of the observations
made in this section can be considered folklore. We thank
Ueli Maurer and others for useful discussions in this context.
Shoup [22] introduced the generic group model for study-
ing cryptographic problems (‘hardness assumptions’) related
to the discrete logarithm problem in the context of generic
algorithms. That is, “algorithms that do not exploit any spe-
cial properties of the encodings of group elements other than
the property that each group element is encoded as a unique
binary string” [22]. Generic group models proved useful for
establishing generic lower bounds for several newly proposed
cryptographic problems. Even though no concrete group can
be fully generic, it is generally believed in cryptography that
the generic group model approximates the behavior of ellip-
tic curve groups ‘well-enough’ in most cases.
The generic group model for algebraic problems.
Let Π[G] be a cryptographic problem deﬁned over some
prime-order group (G, g, q) which is expressed via a (poten-
tially interactive) probabilistic experiment between a chal-
lenger and an unbounded adversary. Suppose Π[G] is al-
gebraic in the sense that all operations of the experiment
can be described by group operations only. An example
for an algebraic cryptographic problem is the DLP; in con-
trast, a cryptographic problem involving a hash function
f : G → {0, 1}k (e.g., providing collision resistance) is not
algebraic. In order to analyze problem Π[G] in the generic
group model, one commonly executes the following experi-
ment. (There exist variants of the generic group model, but
the choice of the variant does not aﬀect our arguments.)
In the beginning, a random bijective encoding function
E : G → Aq := {0, . . . , q − 1}
(4)
is chosen (from the set of all possible such functions), where
Aq is naturally interpreted as a subset of {0, 1}m with m =
(cid:100)log(q)(cid:101). Set Aq can be viewed as an abstract copy of G,
but itself without any algebraic structure.
The interactive security experiment Π[G] is then executed
with the adversary where group G is substituted by Aq,
1661i.e., every appearance of a group element A ∈ G is re-
placed by the encoding E(A) of it. More precisely, if the
experiment is supposed to send A ∈ G to the adversary, it
sends A(cid:48) := E(A) ∈ Aq instead; if the adversary is sup-
posed to send A ∈ G to the experiment, it sends some value
A(cid:48) ∈ Aq instead which is interpreted by the experiment as
A = E−1(A(cid:48)). All other messages, including elements from
Zq, are exchanged unmodiﬁed. Importantly, the adversary
only sees encodings of group elements of the form E(A) but
it gets neither access to E itself nor to any group element
held by the experiment. Rather, it performs group opera-
tions through the group oracle
mult : Aq × Aq → Aq; (A
(cid:48)
Note (Aq, mult) can be considered a ‘group’ with neutral
element 1(cid:48) = E(1).
) (cid:55)→ E(E
−1(A
(cid:48)
)) .
−1(B
(cid:48)
)E
(cid:48)
, B
The intuition behind the described framework is that it
models an adversary that cannot exploit any speciﬁc prop-
erty of the underlying group G. This is a clean and well-
accepted model. It allows, for example, to prove that any
otherwise unbounded generic adversary that makes at most
t queries to the group oracle can solve the discrete logarithm
problem with probability at most O(t2/q) [22].
Generic groups for non-algebraic problems.
Once we drop the requirement that the cryptographic
problem be algebraic it becomes unclear how to adapt the
generic group model in order to obtain meaningful results.
Suppose the cryptographic problem Π[G, f ] involves hash
function f : G → {0, 1}k that takes group elements and out-
puts bit-strings such that the behavior of the function can-
not be described by group operations only (we call this a
non-algebraic function).
In fact, in such problems, func-
tion f really operates on bit-strings of some length n and
one silently assumes an encoding that represents each group
element A ∈ G as a unique bit-string of this length. It is
thus more precise to say that hash function f describes how
it acts on group elements that are represented by binary
strings. For example, if G is an elliptic curve group over
GF(p), one could set n = 2(cid:100)log(p)(cid:101) and represent group el-
ements A = (x, y) ∈ GF(p) × GF(p) in the canonic form;
further, f : {0, 1}n → {0, 1}k could be a member of the SHA
family.
How should one consider such a non-algebraic function f
in the generic group model? This turns out to be rather
unclear. The issue is that the generic group adversary only
sees elements from Aq, not from G, and yet, intuitively, any
reasonable model has to allow the adversary the evaluation
of f on group elements of its choice. Note here that one can-
not simply provide the adversary with oracle access to f via
Of (A(cid:48)) := f (E−1(A(cid:48))) since Of (A(cid:48)) may leak information
about group element A = E−1(A(cid:48)) ∈ G (as this informa-
tion could be exploited by the computationally unbounded
adversary, this would contradict the idea of the GGM). So
in order to give the adversary fair access to function f we
have to deﬁne another function f(cid:48) : Aq → {0, 1}k that some-
how mimics the behavior of f : G → {0, 1}k. The following
approach to deﬁne f(cid:48) was taken in previous generic group
proofs (e.g., [23, 5, 17, 12]). There, f : G → {0, 1}k is sim-
ply transferred, without any modiﬁcation, to Aq, i.e., the
generic group proof is carried out with respect to function
(cid:48)
: Aq → {0, 1}k, where f
(cid:48)
f
(cid:48)
(A
) := f (A
(cid:48)
) ,
(5)
instead of f . Note, however, that Aq and G are indepen-
dent, i.e., setting f(cid:48)(A(cid:48)) := f (A(cid:48)) is generally not even well-
deﬁned! But as Aq ⊆ {0, 1}m and G ⊆ {0, 1}n, they both
act on bit-strings and can usually be made well-deﬁned by
forcing Aq ⊆ G. Now, if we successfully carried out a generic
group proof with respect to function f(cid:48) deﬁned in (5), for
which concrete function f(cid:48)(cid:48) : G → {0, 1}k did we actually
prove the generic hardness of Π? Given f(cid:48) : Aq → {0, 1}k,
we can express f(cid:48)(cid:48) : G → {0, 1}k via the random bijection E
from (4) as f(cid:48)(cid:48) = f(cid:48) ◦ E = f ◦ E. Hence a generic group
proof using the approach to replace function f by f(cid:48) implic-
itly proves the hardness of Π[G, f(cid:48)(cid:48)]. Note, however, that
f(cid:48)(cid:48) = f ◦ E is necessarily an idealized object (as E is one).
It thus remains unclear how much impact a security result
on Π[G, f(cid:48)(cid:48)] has on the original problem Π[G, f ]. In partic-
ular, the generic group proof can now make use of the fact
that each group element is encoded as a unique random bi-
nary string, not only a unique binary string as motivated by
Shoup [22].
Maurer’s generic model for non-algebraic problems.
Maurer’s generic model of computation [15] diﬀers from
the one by Shoup in that the adversary never obtains rep-
resentations E(A) of group elements A, but can only access
known group elements via abstract handles. Consequently,
in this model it is unavoidable that any non-algebraic func-
tion f : G → {0, 1}k is modeled via explicit oracle access.
This solves the main problem of non-algebraic functions in
the generic group model we encountered above, namely that
it is not clear how the adversary can access function f . For
this reason we believe that Maurer’s model oﬀers a much
cleaner and rigorous way to analyze non-algebraic problems
in a generic model.
The security of ECDSA in the generic group model.
Brown provides a security proof of ECDSA in the generic
group model [5, 3], assuming f(cid:48) := f as in (5), where f is the
‘mod q’ conversion function of ECDSA. By our discussion
we can conclude that his proof implicitly considers an ide-
alized conversion function, namely ECDSA with conversion
function f(cid:48)(cid:48) = f ◦ E, which is some idealized version of the
real ‘mod q’ conversion function f .
In order to obtain a rigorous analysis of the generic secu-
rity of ECDSA, one can try to translate Brown’s proof to
Maurer’s generic model of computation. However, it remains
unclear how to setup the oracle for the conversion function.
A canonical candidate would be to give access to f ◦ E as
discussed above, but the problem is that Brown’s proofs re-
quire the conversion function to be almost-invertible, which
is arguably wrong for this function. We suspect that our
techniques can be used to restate and prove Brown’s result
in Maurer’s model of computation by deﬁning f = ψ ◦ Π ◦ φ
and providing the generic adversary oracle access to a bijec-
tive random oracle OΠ. However, we did not further look
into this, as our results imply stronger and more general
security guarantees for ECDSA. We stress that there is no
reason to believe that Brown’s proofs are ﬂawed. But, as
discussed above, their interpretation and impact to ECDSA
remain unclear.
1662