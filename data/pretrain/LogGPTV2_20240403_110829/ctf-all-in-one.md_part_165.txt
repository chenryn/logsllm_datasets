么时候后端的例程被调用。为了使用 BFD，需要包括 bfd.h 并且连接的时候需
要和静态库 libbfd.a 或者动态库 libbfd.so 一起连接。
看一下这个引起崩溃的二进制文件，它作为一个可重定位文件，本来不应该有
program headers，但这里的 Number of program headers 这一项被修改为一个很
大的值，已经超过了程序在内存中的范围：
1610
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
$ file test
test: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV),
not stripped
$ readelf -h test | grep program
readelf: Error: Out of memory reading 536870912 program headers
Start of program headers: 0 (bytes into file)
Size of program headers: 0 (bytes)
Number of program headers: 65535 (536870912)
objdump 用于显示一个或多个目标文件的各种信息，通常用作反汇编器，但也能显
示文件头，符号表，重定向等信息。objdump 的执行流程是这样的：
1. 首先检查命令行参数，通过 switch 语句选择要被显示的信息。
2. 剩下的参数被默认为目标文件，它们通过 display_bfd() 函数进行排序。
3. 目标文件的文件类型和体系结构通过 bfd_check_format() 函数来确定。如
果被成功识别，则 dump_bfd() 函数被调用。
4. dump_bfd() 依次调用单独的函数来显示相应的信息。
回溯栈调用情况：
1611
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
gdb-peda$ r -x test
gdb-peda$ bt
#0 0xb7fd9ce5 in __kernel_vsyscall ()
#1 0xb7e2eea9 in __GI_raise (sig=0x6) at ../sysdeps/unix/sysv/l
inux/raise.c:54
#2 0xb7e30407 in __GI_abort () at abort.c:89
#3 0xb7e6a37c in __libc_message (do_abort=0x2,
fmt=0xb7f62e54 "*** Error in `%s': %s: 0x%s ***\n")
at ../sysdeps/posix/libc_fatal.c:175
#4 0xb7e702f7 in malloc_printerr (action=,
str=0xb7f5f943 "free(): invalid pointer", ptr=,
ar_ptr=0xb7fb5780 ) at malloc.c:5006
#5 0xb7e70c31 in _int_free (av=0xb7fb5780 , p=,
have_lock=0x0) at malloc.c:3867
#6 0x0814feab in objalloc_free (o=0x8250800) at ./objalloc.c:18
7
#7 0x08096c10 in bfd_hash_table_free (table=0x8250a4c) at hash.
c:426
#8 0x080985fc in _bfd_delete_bfd (abfd=abfd@entry=0x8250a08) at
opncls.c:125
#9 0x08099257 in bfd_close_all_done (abfd=0x8250a08) at opncls.
c:773
#10 0x08052791 in display_file (filename=0xbffff136 "test", targ
et=,
last_file=0x1) at ./objdump.c:3726
#11 0x0804c1af in main (argc=0x3, argv=0xbfffef04) at ./objdump.
c:4015
#12 0xb7e1b637 in __libc_start_main (main=0x804ba50 , argc
=0x3, argv=0xbfffef04,
init=0x8150fd0 , fini=0x8151030 ,
rtld_fini=0xb7fea880 , stack_end=0xbfffeefc) at ..
/csu/libc-start.c:291
#13 0x0804c3ca in _start ()
一步一步追踪函数调用：
1612
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
// binutils/objdump.c
int
main (int argc, char **argv)
{
[...]
while ((c = getopt_long (argc, argv,
"pP:ib:m:M:VvCdDlfFaHhrRtTxsSI:j:wE:zgeGW::",
long_options, (int *) 0))
!= EOF)
{
switch (c)
{
[...]
case 'x':
dump_private_headers = TRUE;
dump_symtab = TRUE;
dump_reloc_info = TRUE;
dump_file_header = TRUE;
dump_ar_hdrs = TRUE;
dump_section_headers = TRUE;
seenflag = TRUE;
break;
[...]
}
}
if (formats_info)
exit_status = display_info ();
else
{
if (optind == argc)
display_file ("a.out", target, TRUE);
else
for (; optind flags |= BFD_DECOMPRESS;
/* If the file is an archive, process all of its elements. */
if (bfd_check_format (file, bfd_archive))
{
[...]
}
else
display_object_bfd (file);
}
最关键的部分，读取 program headers 的逻辑如下：
1615
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
// binutils/objdump.c
/* Read in the program headers. */
if (i_ehdrp->e_phnum == 0)
elf_tdata (abfd)->phdr = NULL;
else
{
Elf_Internal_Phdr *i_phdr;
unsigned int i;
#ifndef BFD64
if (i_ehdrp->e_phnum > ((bfd_size_type) -1) / sizeof (*i_p
hdr))
goto got_wrong_format_error;
#endif
amt = i_ehdrp->e_phnum * sizeof (*i_phdr); // phdr = (Elf_Internal_Phdr *) bfd_alloc (
abfd, amt);
if (elf_tdata (abfd)->phdr == NULL)
goto got_no_match;
if (bfd_seek (abfd, (file_ptr) i_ehdrp->e_phoff, SEEK_SET)
!= 0)
goto got_no_match;
i_phdr = elf_tdata (abfd)->phdr;
for (i = 0; i e_phnum; i++, i_phdr++)
{
Elf_External_Phdr x_phdr;
if (bfd_bread (&x_phdr, sizeof x_phdr, abfd) != sizeof x_p
hdr)
goto got_no_match;
elf_swap_phdr_in (abfd, &x_phdr, i_phdr);
}
}
因为伪造的数值 0xffff 大于 0，进入读取 program headers 的代码。然后在溢
出点乘法运算前，eax 为伪造的数值 0x20000000 ：
1616
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
gdb-peda$ ni
[----------------------------------registers--------------------
---------------]
EAX: 0x20000000 ('')
EBX: 0x8250a08 --> 0x8250810 ("test")
ECX: 0xd ('\r')
EDX: 0x5f ('_')
ESI: 0x8250ac8 --> 0x464c457f
EDI: 0xd ('\r')
EBP: 0x81ca560 --> 0x81c9429 ("elf32-i386")
ESP: 0xbfffec20 --> 0xb7fe97eb (: add esi,0x
15815)
EIP: 0x80aeba0 (: imul eax,eax,0x3
8)
EFLAGS: 0x206 (carry PARITY adjust zero sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x80aeb90 : or DWORD PTR [ebx
+0x28],0x800
0x80aeb97 : jmp 0x80ae613 
0x80aeb9c : lea esi,[esi+eiz*1
+0x0]
=> 0x80aeba0 : imul eax,eax,0x38
0x80aeba3 : sub esp,0x4
0x80aeba6 : xor edx,edx
0x80aeba8 : push edx
0x80aeba9 : push eax
[------------------------------------stack----------------------
---------------]
0000| 0xbfffec20 --> 0xb7fe97eb (: add esi,0
x15815)
0004| 0xbfffec24 --> 0x8250ac8 --> 0x464c457f
0008| 0xbfffec28 --> 0xd ('\r')
0012| 0xbfffec2c --> 0x0
0016| 0xbfffec30 --> 0x8250a0c --> 0x81ca560 --> 0x81c9429 ("elf
32-i386")
0020| 0xbfffec34 --> 0x82482a0 --> 0x9 ('\t')
0024| 0xbfffec38 --> 0x8250a08 --> 0x8250810 ("test")
1617
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
0028| 0xbfffec3c --> 0x81ca560 --> 0x81c9429 ("elf32-i386")
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
780 elf_tdata (abfd)->phdr = (Elf_Internal_Phdr *) bfd_
alloc (abfd, amt);
做乘法运算， 0x20000000 * 0x38 = 0x700000000 ，产生溢出。截断后高位的
0x7 被丢弃， eax 为 0x00000000 ，且 OVERFLOW 的标志位被设置：
gdb-peda$ ni
[----------------------------------registers--------------------
---------------]
EAX: 0x0
EBX: 0x8250a08 --> 0x8250810 ("test")
ECX: 0xd ('\r')
EDX: 0x5f ('_')
ESI: 0x8250ac8 --> 0x464c457f
EDI: 0xd ('\r')
EBP: 0x81ca560 --> 0x81c9429 ("elf32-i386")
ESP: 0xbfffec20 --> 0xb7fe97eb (: add esi,0x
15815)
EIP: 0x80aeba3 (: sub esp,0x4)
EFLAGS: 0xa07 (CARRY PARITY adjust zero sign trap INTERRUPT dire
ction OVERFLOW)
[-------------------------------------code----------------------
---------------]
0x80aeb97 : jmp 0x80ae613 
0x80aeb9c : lea esi,[esi+eiz*1
+0x0]
0x80aeba0 : imul eax,eax,0x38
=> 0x80aeba3 : sub esp,0x4
0x80aeba6 : xor edx,edx
0x80aeba8 : push edx
0x80aeba9 : push eax
0x80aebaa : push ebx
[------------------------------------stack----------------------
---------------]
1618
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
0000| 0xbfffec20 --> 0xb7fe97eb (: add esi,0
x15815)
0004| 0xbfffec24 --> 0x8250ac8 --> 0x464c457f
0008| 0xbfffec28 --> 0xd ('\r')
0012| 0xbfffec2c --> 0x0
0016| 0xbfffec30 --> 0x8250a0c --> 0x81ca560 --> 0x81c9429 ("elf
32-i386")
0020| 0xbfffec34 --> 0x82482a0 --> 0x9 ('\t')
0024| 0xbfffec38 --> 0x8250a08 --> 0x8250810 ("test")
0028| 0xbfffec3c --> 0x81ca560 --> 0x81c9429 ("elf32-i386")
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080aeba3 780 elf_tdata (abfd)->phdr = (Elf_Interna
l_Phdr *) bfd_alloc (abfd, amt);
于是，在随后的 bfd_alloc() 调用时，第二个参数即大小为 0，分配不成功：
// bfd/opncls.c
void *bfd_alloc (bfd *abfd, bfd_size_type wanted);
gdb-peda$ ni
[----------------------------------registers--------------------
---------------]
EAX: 0x0
EBX: 0x8250a08 --> 0x8250810 ("test")
ECX: 0xd ('\r')
EDX: 0x0
ESI: 0x8250ac8 --> 0x464c457f
EDI: 0xd ('\r')
EBP: 0x81ca560 --> 0x81c9429 ("elf32-i386")
ESP: 0xbfffec10 --> 0x8250a08 --> 0x8250810 ("test")
EIP: 0x80aebab (: call 0x8099540 )
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
1619