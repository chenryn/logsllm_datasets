## 小结今天我从如何选、如何用和如何改三个方面，为你讲了如何才能用好开源项目，希望对你有所帮助。这就是今天的全部内容，留一道思考题给你吧，目前的云计算厂商很多都提供了和开源项目类似的系统（例如阿里云的云数据库HBase），你倾向于购买云厂商提供的系统，还是只是将开源系统部署在云服务器上？理由是什么？欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）![](Images/f2eae62fce5bba3ca5ee38d11da01862.png){savepage-src="https://static001.geekbang.org/resource/image/ba/37/ba6fcd186893b8cc9977d18e1fa5ab37.jpg"}
# 49 \| 谈谈App架构的演进专栏截止到上一期，架构设计相关的理念、技术、实践已经基本讲完，相信你一路学习过来会有一种感觉，这些内容主要都是讲后端系统的架构设计，例如存储高可用、微服务、异地多活等，都是后端系统才会涉及。事实上确实也是如此，通常情况下我们讲架构设计，主要聚焦在后端系统，但这并不意味着App、前端就没有架构设计了，专栏所讲述的整套架构设计理念，虽然是来源于我的后端设计经验，但一旦形成完善的技术理论后，同样适应于App 和前端。首先，先来复习一下我的专栏所讲述的架构设计理念，可以提炼为下面几个关键点：-   **架构是系统的顶层结构。**-   **架构设计的主要目的是为了解决软件系统复杂度带来的问题。**-   **架构设计需要遵循三个主要原则：合适原则、简单原则、演化原则。**-   **架构设计首先要掌握业界已经成熟的各种架构模式，然后再进行优化、调整、创新。**复习完我们就可以进入今天的正题，我来[谈谈 App架构的演进]{.orange}，以及上面这些架构设计关键点是如何体现的。
## Web App最早的 App有很多采用这种架构，大多数尝试性的业务，一开始也是这样的架构。Web App架构又叫包壳架构，简单来说就是在 Web 的业务上包装一个 App的壳，业务逻辑完全还是 Web 实现，App壳完成安装的功能，让用户看起来像是在使用 App，实际上和用浏览器访问 PC网站没有太大差别。``{=html}为何早期的 App或者尝试新的业务采用这种架构比较多呢？简单来说，就是当时业务面临的复杂度决定的。我们以早期的App 为例，大约在 2010年前后，移动互联网虽然发展很迅速，但受限于用户的设备、移动网络的速度等约束，PC互联网还是主流，移动互联网还是一个新鲜事物，未来的发展前景和发展趋势，其实当年大家也不一定能完全看得清楚。例如淘宝也是在2013 年才开始决定"All in无线"的，在这样的业务背景下，当时的业务重心还是在 PC互联网上，移动互联网更多是尝试性的。既然是尝试，那就要求快速和低成本，虽然当时的Android 和 iOS 已经都有了开发 App的功能，但原生的开发成本太高，因此自然而然，Web App这种包壳架构就被大家作为首选尝试架构了，其主要解决"快速开发"和"低成本"两个复杂度问题，架构设计遵循"合适原则"和"简单原则"。
## 原生 AppWeb App虽然解决了"快速开发"和"低成本"两个复杂度问题，但随着业务的发展，Web App的劣势逐渐成为了主要的复杂度问题，主要体现在：-   移动设备的发展速度远远超过 Web 技术的发展速度，因此 Web App    的体验相比原生 App 的体验，差距越来越明显。-   移动互联网飞速发展，趋势越来越明显，App    承载的业务逻辑也越来越复杂，进一步加剧了 Web App 的体验问题。-   移动设备在用户体验方面有很多优化和改进，而 Web App    无法利用这些技术优势，只有原生 App 才能够利用这些技术优势。因此，随着业务发展和技术演进，移动开发的复杂度从"快速开发"和"低成本"转向了"用户体验"，而要保证用户体验，采用原生App 的架构是最合适的，这里的架构设计遵循"演化原则"。原生 App 解决了用户体验问题，没记错的话大约在 2013年前后开始快速发展，那个时候的 Android 工程师和 iOS工程师就像现在的人工智能工程师一样非常抢手，很多同学也是那时候从后端转行到App 开发的。
## Hybrid App原生 App很好的解决了用户体验问题，但业务和技术也在发展，移动互联网此时已经成为明确的大趋势，团队需要考虑的不是要不要转移动互联网的问题，而是要考虑如何在移动互联网更具竞争力的问题，因此各种基于移动互联网特点的功能和体验方式不断被创造出来，大家拼的竞争方式就是看谁更快抓住用户需求和痛点。因此，移动开发的复杂度又回到了"快速开发"，这时就发现了原生App 开发的痛点：由于 Android、iOS、WindowsPhone（你没看错，当年确实是这三个主流平台）的原生开发完全不能兼容，同样的功能需要三个平台重复开发，每个平台还有一些差异，因此自然快不起来。为了解决"快速开发"的复杂度问题，大家自然又想到了 Web 的方式，但 Web的体验还是远远不如原生，怎么解决这个问题呢？其实没有办法完美解决，但可以根据不同的业务要求选取不同的方案，例如对体验要求高的业务采用原生App 实现，对体验要求不高的可以采用 Web 的方式实现，这就是 Hybrid App架构的核心设计思想，主要遵循架构设计的"合适原则"。