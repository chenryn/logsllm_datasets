题目大意
这一题要求判断2颗树是否是完全相等的
解题思路
递归判断即可。
代码
package leetcode
/☆
* Definition for a binary tree node.
* type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
func isSameTree(p *TreeNode,q *TreeNode) bool {
if p == ni1 && q == nil {
return true
} else if p != nil && q != nil {
if p.val != q.val {
return false
return isSameTree(p.Left, q.Left) && isSameTree(p.Right, q.Right)
}else {
return false
---
## Page 221
101.SymmetricTree
题目
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
1
/
//
3443
But the following [1,2,2,null,3,null,3] is not:
Note:
Bonus points if you could solve it both recursively and iteratively.
题目大意
这一题要求判断2颗树是否是左右对称的
解题思路
·这道题是几道题的综合题。将根节点的左字数反转二叉树，然后再和根节点的右节点进行比较，是
否完全相等。
·反转二叉树是第226题。判断2颗树是否完全相等是第100题。
代码
package leetcode
---
## Page 222
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func isSymmetric(root *TreeNode) bool{
if root == nil {
return true
return isSameTree(invertTree(root.Left) , root.Right)
102.BinaryTreeLevelOrderTraversal
题目
Given a binary tree, return the level order traversal of its nodles' values. (ie, from left to right, level
by level).
For Example:
Given binary tree [3,9,20,null,null,15,7],
/
920
15
7
return its level ordler traversal as:
[3] ,
[9,20] ,
[15, 7]
题目大意
按层序从上到下遍历一颗树。
---
## Page 223
解题思路
用一个队列即可实现。
代码
package leetcode
 Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
//解法一BFS
func levelorder(root *TreeNode) [][]int {
if root == nil {
return [][]int{}
{}aponaauls[] =: ananb
queue = append(queue,root)
curNum, nextLevelNum, res, tmp := 1, 0, [][]int{}, []int{}
for len(queue) != 0 {
if curNum > 0 {
node := queue[0]
if node.Left != nil {
queue = append(queue, node.Left)
nextLevelNum++
if node.Right != nil {
queue = append(queue, node.Right)
nextLevelNum++
curNum=-
tmp = append(tmp, node.Val)
[:T]ananb = ananb
if curNum == 0 {
res = append(res, tmp)
curNum = nextLeve1Num
nextLevelNum = 0
---
## Page 224
tmp = []int{}
F
return res
//解法二DFS
func levelorderl(root *TreeNode) [][]int {
levels := [][]int{}
dfsLevel(root, -1, &levels)
return levels
func dfsLevel(node *TreeNode, level int, res *[][]int) {
if node == nil {
return
currLevel := level + 1
for len(*res)  0 {
node := queue[0]
if node.Left != nil {
queue = append(queue, node.Left)
nextLeve1Num++
if node.Right != nil {
---
## Page 226
queue = append(queue, node.Right)
nextLevelNum++
上
curNum--
tmp = append(tmp, node.Va1)
queue = queue[1:]
if curNum == 0 {
if curDir == 1 {
for i,j := 0, len(tmp)-1; i  preEnd {
return ni1
root := &TreeNode{val: pre[preStart]}
rootIdx := inPos [pre[preStart]]
1eftLen := rootIdx -inStart
root.Left = buildPreIn2TreeDFS(pre, preStart+l, preStart+leftLen, inStart,
inPos)
root.Right = buildPreIn2TreeDFS(pre, preStart+leftLen+l, preEnd, rootIdx+l,
inPos)
return root
106.ConstructBinaryTreefromInorderand
PostorderTraversal
题目
Given inorder and postorder traversal of a tree, construct the binary tree.
Note: You may assume that duplicates do not exist in the tree.
For example, given
inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:
3
/
920
/
15
7
题目大意
根据一棵树的中序遍历与后序遍历构造二叉树。
注意：
你可以假设树中没有重复的元素。
---
## Page 230
解题思路
给出2个数组，根据inorder和postorder数组构造一颗树。
利用递归思想，从postorder可以得到根节点，从inorder中得到左子树和右子树。只剩一个节
点的时候即为根节点。不断的递归直到所有的树都生成完成。
代码
package leetcode
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func buildTreel06(inorder []int, postorder []int) *TreeNode {
inPos := make(map[int]int)
for i := 0;i  postEnd {
return ni1
root := &TreeNode{val: post[postEnd]}
rootIdx := inPos [post[postEnd]]
leftLen := rootIdx - inStart
root.Left = buildInPos2TreeDFS(post, postStart, postStart+leftLen-1,
inStart, inPos)
root.Right = buildInPos2TreeDFS(post, postStart+leftLen, postEnd-1,
rootIdx+l, inPos)
return root
107.BinaryTreeLevelOrderTraversall
题目
---
## Page 231
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left
to right, level by level from leaf to root).
For Example:
Given binary tree [3,9,20,null,null,15,7],
/
920
15
1
return its bottom-up level order traversal as:
[15,7] ,
[9,20],
[∈]
1
题目大意
按层序从下到上遍历一颗树。
解题思路
用一个队列即可实现。
代码
package leetcode
☆
* Definition for a binary tree node.
type TreeNode struct {
Valint
Left *TreeNode
Right *TreeNode
---
## Page 232
*/
func levelorderBottom(root *TreeNode) [][]int {
tmp := 1evelorder(root)