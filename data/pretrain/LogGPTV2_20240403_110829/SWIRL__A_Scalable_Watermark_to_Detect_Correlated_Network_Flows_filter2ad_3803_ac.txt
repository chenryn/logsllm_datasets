imental and analytical histograms of false detected inter-
vals, namely, the number of watermark intervals detected
by SWIRL detector from non-watermarked ﬂows. Again,
the simulations result in fewer errors than predicted by the
upper bounds in the analysis. Comparing the two ﬁgures,
it is easy to see that there is a strong separation between
the two distributions; thus we should be able to achieve a
low false error rate by choosing the detection threshold ap-
propriately. Using a threshold of η = 12, we observed no
false-positive or false-negative errors in our simulations.
5.3
Implementation
We implemented the SWIRL watermarking scheme over
the PlanetLab infrastructure to evaluate its performance. We
(a) False detected intervals
(b) True detected intervals
Figure 9. Histogram of watermark intervals detected by the simulated SWIRL detector for T
(1000 random runs), as well as expected histogram values from the analysis.
r = 100
)
η
(
d
l
o
h
s
e
r
h
t
n
o
i
t
c
e
t
e
d
l
a
m
i
t
p
O
30
25
20
15
10
5
0
0
5
10
15
20
Flow rate (λ)
(a) Optimal detection threshold
R
E
O
C
1
1e-05
1e-10
1e-15
1e-20
1e-25
0
5
15
10
20
Flow rate (λ)
(b) COER
25
30
Figure 7. COER and optimal detection thresh-
old for different effective rates.
y
t
i
l
i
b
a
b
o
r
p
r
o
r
r
e
e
s
l
a
F
1
1e-05
1e-10
1e-15
1e-20
1e-25
1e-30
1e-35
1e-40
1e-45
COER
False positives
False negatives
0
2 4
8 10 12 14 16 18 20
6
Flow rate (λ)
Figure 8. Probability of false positive and
false negative errors for the optimal threshold
(COER) and for a constant detection thresh-
old of η = 12.
used same data set of SSH ﬂows from the CAIDA traces, but
we explored a wide range of ﬂow rates. In each experiment,
the watermarker reads the timings of packets in a ﬂow read
from the trace and then applies the watermark to them to
generate a sequence of packets. These packets are then sent
over the wide area to another PlanetLab node running the
detector. Both the watermarker and detector are written in
C++. As in simulations, we use the system parameters from
Table 3. We also generate the watermarking key randomly
as described before. To obtain false-positive rates, we fed
ﬂow timings from traces directly into the detector.
Table 4 summarizes the PlanetLab experiment results.
Since the analysis suggests different detection performance
for different ﬂow rates, the ﬂows are selected such that their
!"#!!"$!!"%!!"&!!"'!!!"!"$"&"'#"'%"#!"#$"#&"(#"!"#$%&'()'%*+%&,#%-./'!"#$%&'()'0%.%1.%0',-.%&234/')*+,-./,0123"402356723"!"#!"$!!"$#!"%!!"%#!"&!!"!"'"("$%"$)"%!"%'"%("&%"!"#$%&'()'%*+%&,#%-./'!"#$%&'()'0%.%1.%0',-.%&234/'*+,-./0-1234"513467834"rates lie in one of the three ranges shown in Table 4; we used
about 100 ﬂows per group. Since the detection performance
drastically improves with ﬂow rate we skip data rates higher
than 10 pps in our experiments. Also, in order to illustrate
the effect of r parameter on the system performance each
group of ﬂows are watermarked with three different values
of r. As the results show, in all cases a choice of η = 12
results in zero errors.
We notice that detection performance improves for
higher rate ﬂows, e.g., group A results in the best detec-
tion results. For a given group of ﬂows, increasing r de-
grades detection performance, but improves watermark de-
lay and invisibility as discussed in Section 6. Note that, as
mentioned before, for the lower-rate ﬂows, SWIRL detector
uses a higher value for the T parameter, in order to com-
pensate for the smaller number of packets in each interval.
One can show that increasing T signiﬁcantly improves the
detection performance at the expense of longer watermark
detection times.
5.4 Detector synchronization
As shown in Table 2, the offset o is shared between the
watermarker and the detector. In fact, this is not necessary,
as the scheme is self-synchronizing: the detector can per-
form detection using multiple offset value and return the
best result. For example, Figure 10 shows a detector try-
ing offset values in the range [0, T ] using steps of T /100.
This approach allows the detector to use a randomized off-
set; this can serve as an additional countermeasure for the
multi-ﬂow attack, as discussed in [10]. It also ensures that
two ﬂows that exhibit similar behavior (e.g., repeated down-
loads of the same web page) will nevertheless be marked
with different patterns.
6 Watermark invisibility
In this section, we start by showing that the very high
entropy of the SWIRL watermark key makes is infeasible
for an attacker to guess the watermark key. Then, we show
that without having access to the watermark key an attacker
is unable to detect the SWIRL watermark from a single wa-
termark ﬂow, as well as from multiple watermarked ﬂows.
1
2
3
4
5
6
7
8
intervals = range(2*n) # 0,...,2n-1
for i in range(n):
b[i] = intervals[0]
intervals.remove(b[i])
# pick m[i] uniformly at random
# out of remaining intervals
m[i] = random.choice(intervals)
intervals.remove(m[i])
Figure 11. Algorithm to generate interval as-
signments (shown in Python)
of parameters bj and mj. Note that it is possible to create
equivalent keys by renumbering the intervals, therefore, we
must count the number of non-equivalent interval assign-
ments; we do so by deﬁning a canonical ordering scheme
such that bi < bj for any i < j.
We can consider a recursive algorithm for generating a
random assignment of 2n intervals into base–mark pairs,
shown in Figure 11.
It is easy to see that this algorithm
generates every assignment with canonical ordering exactly
once. The only random choice is on line 7 of the algorithm;
at iteration i(= 0, . . . , n− 1), there are 2(n− i)− 1 choices
available. Therefore, the space of choices is:
(2n − 1)(2n − 3) . . . (3)(1) =
(2n)!
2n(n!)
(19)
For a conservative analysis, we can assume that o = 0
and that the ﬁrst 2n intervals are chosen for watermarking;
this results in the minimal required watermark duration of
2nT (= 128 s using the parameters in Table 3). We can thus
estimate the entropy of the key choice as:
(m!)rn((2n)!)
=
log2
2(n!)
rn log2(m!) + log2(2n!) − log2(n!) − n (20)
Using the parameters from Table 3, the key entropy is
over 4000 bits, thus it is completely infeasible for an at-
tacker to guess the secret key.
6.1 Watermark key entropy
6.2 Single ﬂow invisibility
To maintain invisibility, the watermark key must remain
secret. We therefore estimate the size of the key space for
the secret parameters used in SWIRL, as listed in Table 2.
. Each
permutation is a random member of Sm, and each permuta-
tion is chosen independently. Therefore, the total space of
permutations is (m!)rn. Next, we must consider the space
First, we consider the space of permutations π(i)
j
In this section we demonstrate the infeasibility of distin-
guishing between SWIRL watermarked ﬂows and benign
ﬂows by an attacker who does not have access to the water-
mark key.
Delay. As described in Section 2, a ﬂow watermark is re-
quired to be invisible. The magnitude of delays makes a
Table 4. Watermark detection results for the PlanetLab experiments.
Flow rate λ range
(packet/sec)
T
True detected intervals
Group
A
B
C
6–10
3–6
0–3
r
10
20
30
10
20
30
10
20
30
(sec) Mean
31.6
30.56
31.4
30.89
31.25
29.4
25.25
22.75
20.66
2
2
2
2
2
2
4
4
4
Range
30–32
28–32
29–32
29–32
27–32
24-32
15–31
14–30
14-27
False detected intervals
Mean
3.5
2.6
2.8
2.87
2.87
2.87
1.4
1.4
1.1
Range
0–6
0–5
2–4
1–5
2–4
1–4
0–2
0–2
0–3
(a) Watermarked ﬂow
(b) Non-watermarked ﬂow
Figure 10. Synchronization at watermark detection.
scheme easier or harder to identify. The maximum delay
inserted by SWIRL is:
(cid:18)
(cid:19)
Dmax =
T
r
2 − 2
m
(21)
Table 5 shows the average watermark delay over the
packets for different values of the redundancy parameter r,
with T ﬁxed at 2s. As evident from (17) and (14), lower
r will reduce the number of false negatives at the cost of
higher delay.
Information-theoretic tests. We also test the invisibil-
ity of the SWIRL using the information-theoretic tools de-
signed by Gianvecchio et al. [8] for the detection of covert
timing channels. We use two entropy tests of EN and CCE
and apply them over a database of SSH ﬂows, collected
from real traces at the North Carolina State University (the
average rate of the ﬂows is 4.4pps). The tests are evaluated
for two classes of ﬂows: a) regular non-watermarked ﬂows,
and, b) the same ﬂows watermarked with SWIRL (each ﬂow
is 2000 packets long), with 10 tests per class. We then try
different decision thresholds to decide whether a test met-
ric corresponds to a watermarked ﬂow. Figure 12 draws the
ROC curves for the EN and CCE test metric, where the true
positive is the odds of detecting a watermarked ﬂow and the
false positive is the odds of declaring a non-watermarked
ﬂow to be watermarked. As can be seen, the test metrics
are not able to provide a conﬁdent separation between non-
watermarked and SWIRL watermarked ﬂows.
6.3 Multiple ﬂow invisibility
Kiyavash et al. [10] show how multi-ﬂow attacks (MFA)
can be applied to compromise invisibility of interval-based
ﬂow watermarking schemes [15, 19, 24]. The main idea of
the MFA attack is to collect a number of network ﬂows wa-
−1000−800−600−400−20002004006008001000048121620242832Offset value (msec)Detected intervalsDetected bits = 31Offset value = 291−1000−800−600−400−20002004006008001000048121620242832Offset value (msec)Detected bitsDetected bits = 5Offset value = − 622Table 5. Average watermark delay (per packet) for different values of T /r along with the detection
performance (σ = 10 msec, results averaged over 500 runs).
Average delay Maximum delay Mean true intervals Mean false intervals
r
10
20
30
40
T /r
(msec)
200
100
66.7
50
(msec)
53.77
17.91
11.84
9.05
(msec)
(out of n=32)
(out of n=32)
200
100
66.67
50
29.56
26.3