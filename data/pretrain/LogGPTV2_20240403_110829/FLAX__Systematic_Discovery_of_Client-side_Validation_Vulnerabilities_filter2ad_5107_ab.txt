domain hosted at “evilexample.com”, to send messages. As
a result, the vulnerable code naively trusts the received data
even though the data is controlled by an untrusted principal.
In the running example, for instance, an untrusted attacker
can send chat messages to victim users on behalf of benign
users.
Code injection.
Code injection is possible because
JavaScript can dynamically evaluate both HTML and
script code using various DOM methods
(such as
document.write) as well as JavaScript native con-
2In the postMessage interface design, the browser is responsible
for attributing each message with the domain, port, and protocol of the
sender principal and making it available as the “origin” string property of
the message event [7, 40]
Command injection. Many AJAX applications use un-
trusted data to construct URL parameters dynamically,
which are then used to direct XMLHttpRequest requests
to a backend server. Several of these URL parameters func-
tion as application-speciﬁc commands. For instance, the
chat application in the example sends a conﬁrmation com-
mand to a backend script on lines 29-31. The backend
server script may take other application commands (such
as adding friends, creating a chat room, and deleting his-
tory) similarly from HTTP URL parameters. If the HTTP
request URL is dynamically constructed by the application
in JavaScript code (as done on line 30) using untrusted data
without validation, the attacker could inject new applica-
tion commands by inserting extra URL parameters. Since
the victim user is already authenticated, command injection
allows the attacker to perform unintended actions on be-
half of the user. For instance, the attacker could send ’hi
& call=addfriend&name=evil’ as the message which could
result in adding the attacker to the buddy list of the victim
user.
Cookie-sink vulnerabilities. Web applications often use
cookies to store session data, user’s history and preferences.
These cookies may be updated and used in the client-side
code. If an attacker can control the value written to a cookie
by exploiting a CSV vulnerability, she may ﬁx the values of
the session identiﬁers (which may result in a session ﬁxation
attack) or corrupt the user’s preferences and history data.
1:function ParseOriginURL (url) {
2: var re=/(.*?):\/\/(.*?)\.com/;
3: var matches = re.exec(url);
4: return matches;
5:}
6:
7:function ValidateOriginURL (matches)
8:{
9: if(!matches) return false;
10: if(!/https?/.test(matches[1]))
11:
12: var checkDomRegExp = /example/;
13: if(!checkDomRegExp.test (matches[2])) {
14:
15: return true;
16:}
// All Checks Ok
return false;
return false;
}
17:// Parse JSON into an array object
18:function ParseData (DataStr) {
19: eval (DataStr);
20:}
21:function receiveMessage(event) {
22: var O = ParseOriginURL(event.origin);
23: if (ValidateOriginURL (O)) {
24:
25:
26:
27:
29:
30:
var DataStr = ’var new_msg =(’ +
event.data + ’);’;
ParseData(DataStr);
display_message(new_msg);
var backserv = new XMLHttpRequest(); ...;
backserv.open("GET","http://example.com/srv.php?
call=confirmrcv&msg="+new_msg["message"]);
backserv.send();} ... } ...
31:
32: window.addEventListener("message",
receiveMessage,...);
Figure 2. An example vulnerable chat application’s JavaScript code for a child message display win(cid:173)
dow, which takes chat messages from the main window via postMessage. The vulnerable child mes(cid:173)
sage window code processes the received message in four steps, as shown in the receiveMessage
function. First, it parses the principal domain of the message sender. Next, it tries to check if the ori(cid:173)
gin’s port and domain are “http” or “https” and “example.com” respectively. If the checks succeed,
the popup parses the JSON [3] string data into an array object and ﬁnally, invokes a function for
displaying received messages. In lines 29(cid:173)31, the child window sends conﬁrmation of the message
reception to a backend server script.
analysis. Dynamic taint analysis identiﬁes all uses of un-
trusted data in critical sinks. This analysis identiﬁes two
pieces of information about each potentially dangerous data
ﬂow:
the type of critical sink, and, the fractional part of
the input that is inﬂuences the data used in the critical sink.
Speciﬁcally, we extract the range of input characters IS that
on which data arguments of a sink operation S are directly
dependent. All statements that operate on data that is di-
rectly dependent on IS , including path conditions, are ex-
tracted into an executable slice of the original application
which we term as an acceptor slice (denoted as AS ). AS is
termed so because it is a stand-alone program that accepts
all inputs in the equivalence class of I, in the sense that they
execute the same program path as I up to the sink point S.
As the second step, we fuzz each AS to ﬁnd an input that
exploits a bug. Our fuzzing is sink-aware because it uses
the details of the sink node exposed by the taint analysis
step. Fuzz testing on AS semantically simulates fuzzing on
the original application program. Using an acceptor slice to
link the two high-level steps has two advantages:
• Program size reduction. AS can be executed as a pro-
gram on its own, but is signiﬁcantly smaller in size
than the original application. From our experiments in
Section 5, AS is typically smaller than the executed in-
struction sequence by a factor of 1000. Thus, fuzzing
on a concise acceptor slice instead of the original com-
plex application is a practical improvement. It avoids
application restart, decouples the two high-level steps,
Figure 3. Approach Overview
3 Approach
In this section, we present the key design points of our
approach and explain our rationale for employing a hybrid
dynamic analysis technique into FLAX.
3.1 Approach and Architectural Overview
Figure 3 gives a high-level view of our approach – the
boxed, shaded part represents the primary technical contri-
bution of this work. The input to our analysis is an ini-
tial benign input and the target application itself. The tech-
nique explores the equivalence class of inputs that execute
the same program path as the initial benign input and ﬁnds a
ﬂow of untrusted data into a critical sink without sufﬁcient
validation.
Approach. In the ﬁrst step, we execute the application with
the initial input I and perform character-level dynamic taint
and allows testing of multiple sinks to proceed in par-
allel.
robust platform for simpliﬁed implementation of dy-
namic taint analysis and other analyses.
• Fuzzing search space reduction. Sink-aware fuzzing
focuses only on IS for each AS , rather than the entire
input. Additionally, our sink-aware fuzzer has custom
rules for each type of critical sink because each sink
results in different kinds of attacks and requires a dif-
ferent attack vector. As an example, it distinguishes
eval sinks(which allow injection of JavaScript code)
from DOM sinks(which allow HTML injection). Our
sink-aware fuzzing employs input mutation strategies
that are based on grammars such as the HTML syntax,
JavaScript syntax, or URL syntax grammars.
3.2 Technical Challenges and Design Points
One of our contributions is to design a framework that
simpliﬁes JavaScript analysis and explicitly models re-
ﬂected ﬂows and path constraints. We explain each of these
design points in detail below.
Modeling Path Constraints. The running example in
Figure 2 shows how validation checks manifest as condi-
tional checks, affecting the choice of execution path in the
program. Saner, an example of previous work that pre-
cisely analyzes server-side code, has considered only input-
transformation functions as sanitization operations in its dy-
namic analysis, thereby ignoring branch conditions [4]. Our
techniques improve on Saner’s by explicitly modelling path
constraints, thereby enabling FLAX to capture the valida-
tion checks as branch conditions, as shown in the running
example in the AS .
Simplifying JavaScript. There are two key problems in
designing analyses for JavaScript code.
• Rich data types and complex operations. JavaScript
supports complex data types such as string and ar-
ray, with a variety of native operations on them. The
ECMA-262 speciﬁcation deﬁnes over 50 operations on
string and array data types alone [1]. JavaScript anal-
ysis becomes complex because there are several syn-
tactic constructs that can perform the same semantic
operations. As a simple indicative example, there are
several ways to split a string on a given separator (such
as by using String.split, String.match, String.indexOf,
and String.substring).
In our approach, we canonicalize JavaScript opera-
tions and data references into a simpliﬁed intermedi-
ate form amenable for analysis, which we call JASIL
(JAvascript Simpliﬁed Instruction Language). JASIL
has a simpler type system and a smaller set of instruc-
tions which are sufﬁcient to faithfully express the se-
mantics of higher-level operations relevant to the ap-
plications we study. As a result, JASIL serves as a
• Aliasing. There are numerous ways in which two dif-
ferent syntactic expressions can refer to the same ob-
ject at runtime. This arises because of the dynamic fea-
tures of JavaScript, such as reﬂection, prototype-based
inheritance, complex scoping rules, function overload-
ing, as well as due to numerous exposed interfaces to
access DOM elements. Reasoning about such a di-
verse set of syntactic variations is difﬁcult. Previous
static analysis techniques applied to this problem area
required complex points-to analyses [14, 17].
This forms one of the main motivations for designing
FLAX as a dynamic analysis tool. FLAX dynamically
translates JavaScript operations to JASIL, and by de-
sign each operand (an object, variable or data element)
in JASIL is identiﬁed by its allocated storage address.
With appropriate instrumentation of the JavaScript in-
terpreter, we identify element accesses regardless of
the syntactic complexity of the access pattern used in
the references.
Dealing with reﬂected ﬂows. In this paper, we consider
data ﬂows of two kinds: direct and reﬂected. A direct ﬂow
is one where there is a direct data dependency between a
source operation and a critical sink operation in script code.
Dynamic taint analysis identiﬁes such ﬂows as potentially
dangerous. A reﬂected ﬂow occurs when data is sent by the
JavaScript application to a backend server for processing
and the returned results are used in further computation on
the client. Our dynamic taint analysis identiﬁes untrusted
data propagation across a reﬂected ﬂow using a common-
substring based content matching algorithm3. During a re-
ﬂected ﬂow, data could be transformed on the server. The
exact data transformation/sanitization on the server is hid-
den from the client-side analysis. To address this, we com-
positionally test the client-side code in two steps. First, we
test the client-side code independently of the server-side
code by generating candidate inputs that make simple as-
sumptions about the transformations occurring in reﬂected
ﬂows. Subsequently, it veriﬁes the assumption by running
the candidate attack concretely, and reports a vulnerability
if the concrete test succeeds.
4 Design and Implementation
We describe our algorithm for detecting vulnerabilities
and present details about the implementation of our proto-
type tool FLAX.
3It is possible to combine client-side taint tracking with taint tracking
on the server; however, in present work we take a blackbox view of the
web server.
HTTP Request/Response
Tainting
2
Web Server
Browser
XMLHttp 
Request/Response
JASIL
Trace
1
5
Veriﬁcation
Fuzzing
4
Candidate 
Inputs
Sink-Aware 
Random Testing
Acceptor
3
Figure 4. System Architecture for FLAX
4.1 Algorithm
Figure 4 shows the architectural overview of our taint
enhanced blackbox fuzzing algorithm. The pseudocode of
the algorithm is described in Figure 5. At a high level, it
consists of 5 steps:
1. Dynamic trace generation and conversion to JASIL.
Run the application concretely in our instrumented
web browser to record an execution trace in JASIL
form.
2. Dynamic taint analysis. Perform dynamic taint analy-
sis on the JASIL trace to identify uses of external data
in critical sinks. For each such potentially dangerous
data ﬂow into a sink S, our analysis computes the part
of the untrusted input (IS ) which ﬂows into the critical
sink.
3. Generate an acceptor slice. For each sink S and the
given associated information about S from the previ-
ous step, the analysis extracts an executable slice, AS ,
as deﬁned in Section 3.1.
4. Sink-aware Random testing. Apply random fuzzing to
check if sufﬁcient validation has been performed along
the path to a given sink operation. For a given AS ,
our fuzzer generates random inputs according to sink-
speciﬁc rules and custom attack vectors.
5. Veriﬁcation of candidate inputs. Randomized testing
of AS generates candidate vulnerability inputs assum-
ing a model of the transformation operations on the
Input: T : Trace
Output: V : AttackString List
type F low : {
var Sink, Source : Int List,
var TaintedInsList : Int List,
var InputOffset : (Int,Int) List
};
var F lowList : Flow List;
F lowList = CalculateF lows (T );
var Candidates = InputString List;
var V = InputString List;
foreach F in F lowList do
AS = GenAutomaton(F , T );
Candidates = F uzz ( AS
, max length, max iters);
foreach C in Candidates do
CT = ExecuteOnInput(C)
var Result = V erif yAttack(T , CT )
if Result then
V.append([F , CT .input]);
end
end
end
return V;
Figure 5. Algorithm for FLAX
x : τ ::= v : τ
x : τ ::= ∗ (v : Ref (τ ))
x : Int ::= v1 : Int op v1 : Int
x : Bool ::= v1 : τ op v1 : τ
x : Bool ::= v1 : Bool op v1 : Bool
x : PC ::= if (testvar : Bool) then (c : Int) else (c : Int)
x : String ::= substring(s : String, startpos : Int, len : Int)
x : String ::= concat(s1 : String, s2 : String)
x : String ::= fromArray(s1 : Ref (τ ))
x : String ::= convert(s1 : String)
x : Char ∗ κ ::= convert(i : Int)
x : Int ::= convert(i : Char ∗ κ)
x : τ ::= F (i1 : τ , . . ., in : τ )
(Assignment, Type Conversion)
(Dereference)
(Arithmetic)
(Relational)
(Logical)
(Control Flow)
(String Ops)
(String Ops)
(String Ops)
(String Ops)
(Character Ops)
(Character Ops)
(Uninterpreted Function Call)
Figure 6. Simpliﬁed operations supported in JASIL intermediate representation
τ := η | β[η] | Bool | N ull | U ndef | P C
η := Int | β
β := Ref (τ ) | String(κ) | Char(κ)
κ := U T F 8 | U T F 7 | . . .
Figure 7. Type system of JASIL intermediate
representation