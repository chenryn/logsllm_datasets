## PostgreSQL partial index use caveat in prepared statement =$1::timestamp with time zone and create_time =$1::timestamp with time zone and create_time  '2011-04-15 00:00:00+08'::timestamp with time zone  
```  
所以在执行prepared statement的时候, optimalize后才取传递的参数值, 所以不能使用这个索引.  
而T1表是全量索引, 所以自然优先选择索引. 就出现了本文出现的问题.  
例如 :   
```  
digoal=> prepare p_t2 (timestamp with time zone, timestamp with time zone, bigint, bigint) as SELECT * from digoal.t2 where create_time>=$1 and create_time explain execute p_t2('2012-11-10', '2012-11-11', 10, 10);  
                                               QUERY PLAN                                                  
---------------------------------------------------------------------------------------------------------  
 Limit  (cost=10006153796.86..10006153975.12 rows=71304 width=161)  
   ->  Sort  (cost=10006153618.60..10006155401.21 rows=713042 width=161)  
         Sort Key: create_time  
         ->  Seq Scan on t2  (cost=10000000000.00..10005958957.99 rows=713042 width=161)  
               Filter: ((create_time >= $1) AND (create_time  prepare p_t1(timestamp with time zone, timestamp with time zone, bigint, bigint) as SELECT * from digoal.t1 where create_time>=$1 and create_time explain execute p_t1('2012-11-10', '2012-11-11', 10, 10);  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=11730.96..23461.92 rows=158179 width=152)  
   ->  Index Scan using idx_t1 on t1  (cost=0.00..117309.44 rows=1581788 width=152)  
         Index Cond: ((create_time >= $1) AND (create_time  create table t1 (id int, create_time timestamp);  
CREATE TABLE  
digoal=> insert into t1 select generate_series(1,1000000),clock_timestamp();  
INSERT 0 1000000  
digoal=> create index idx_t1 on t1(create_time) where create_time>'2012-11-15 14:45:00';  
CREATE INDEX  
digoal=> explain select * from t1 where create_time>='2012-11-15 14:45:01' and create_time  Index Scan using idx_t1 on t1  (cost=0.00..3533.52 rows=5000 width=12)  
         Index Cond: ((create_time >= '2012-11-15 14:45:01'::timestamp without time zone) AND (create_time  prepare p_t1(timestamp, timestamp, bigint, bigint) as select * from t1 where create_time>=$1 and create_time explain execute  p_t1('2012-11-15 14:45:01', '2012-11-15 14:45:02', 10, 10);  
                                                                            QUERY PLAN                                                
------------------------------------------------------------------------------------------------------------------------------------  
------------------------------  
 Limit  (cost=7.07..14.13 rows=10 width=12)  
   ->  Index Scan using idx_t1 on t1  (cost=0.00..3533.52 rows=5000 width=12)  
         Index Cond: ((create_time >= '2012-11-15 14:45:01'::timestamp without time zone) AND (create_time  psql  
psql (9.1.3)  
Type "help" for help.  
postgres=# create table t1 (id int, create_time timestamp);  
CREATE TABLE  
postgres=#  insert into t1 select generate_series(1,1000000),clock_timestamp();  
INSERT 0 1000000  
postgres=# create index idx_t1 on t1(create_time) where create_time>'2012-11-15 14:45:00';  
CREATE INDEX  
postgres=# explain select * from t1 where create_time>='2012-11-15 14:45:01' and create_time  Index Scan using idx_t1 on t1  (cost=0.00..3533.28 rows=5000 width=12)  
         Index Cond: ((create_time >= '2012-11-15 14:45:01'::timestamp without time zone) AND (create_time =$1 and create_time  Sort  (cost=20713.19..20725.69 rows=5000 width=12)  
         Sort Key: create_time  
         ->  Seq Scan on t1  (cost=0.00..20406.00 rows=5000 width=12)  
               Filter: ((create_time >= $1) AND (create_time < $2))  
(5 rows)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")