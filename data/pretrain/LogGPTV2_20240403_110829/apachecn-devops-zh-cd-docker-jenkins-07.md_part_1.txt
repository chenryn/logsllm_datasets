# 七、持续交付管道
我们已经介绍了持续交付过程中最关键的部分:提交阶段、工件存储库、自动化验收测试和配置管理。
在本章中，我们将重点关注最终管道中缺失的部分，即环境和基础设施、应用版本控制和非功能测试。
本章包括以下几点:
*   设计不同的软件环境及其基础设施
*   保护 Jenkins 代理和服务器之间的连接
*   介绍各种非功能测试
*   在持续交付过程中提出非功能测试的挑战
*   解释不同类型的应用版本控制
*   完成持续交付管道
*   引入烟雾测试的概念并将其添加到最终管道中
# 环境和基础设施
到目前为止，我们一直使用一台 Docker 主机来处理所有事情，并将其视为无限资源的虚拟化，我们可以在其中部署所有东西。显然，Docker 主机实际上可以是一组机器，我们将在接下来的章节中展示如何使用 Docker Swarm 创建它。然而，即使 Docker 主机在资源方面是无限的，我们仍然需要考虑底层基础架构，至少有两个原因:
*   机器的物理位置很重要
*   不应在生产物理机器上进行测试
考虑到这些事实，在本节中，我们将讨论不同类型的环境、它们在持续交付过程中的角色以及基础架构安全方面。
# 环境类型
有四种最常见的环境类型:生产、试运行、质量保证(测试)和开发。让我们讨论其中的每一个及其基础架构。
# 生产
生产是最终用户使用的环境。它存在于每个公司，当然，它是最重要的环境。
让我们看看下图，看看大多数生产环境是如何组织的:
![](img/3092eae3-1a55-4505-987b-d3aff24db07c.png)
用户通过负载平衡器访问服务，负载平衡器选择确切的机器。如果应用在多个物理位置发布，那么(第一个)设备通常是基于 DNS 的地理负载平衡器。在每个位置，我们都有一个服务器集群。如果我们使用 Docker，那么服务器集群可以隐藏在一个或多个 Docker 主机后面(这些主机在内部由许多使用 Docker Swarm 的机器组成)。
机器的物理位置很重要，因为请求-响应时间会因物理距离的不同而有很大差异。此外，数据库和其他相关服务应该位于靠近服务部署位置的机器上。更重要的是，应该以最小化不同位置之间复制开销的方式分割数据库。否则，我们可能要等很长时间，数据库才会在彼此相距甚远的实例之间达成一致。关于物理方面的更多细节超出了本书的范围，但重要的是要记住，Docker 并不总是银弹。
Containerization and virtualization allow you to think about servers as an infinite resource; however, some physical aspects such as location are still relevant.
# 脚手架
试运行环境是部署候选版本的地方，以便在上线之前执行最终测试。理想情况下，此环境是生产的一面镜子。
让我们看看下面的内容，看看这样的环境在交付过程中应该是什么样子:
![](img/3dcb04d1-39d0-4e73-9773-1de9f5de4b47.png)
请注意，转移环境是一个精确的生产克隆。如果应用部署在多个位置，则转移也应该有多个位置。
在持续交付过程中，所有自动化的验收功能和非功能测试都是针对这个环境运行的。虽然大多数功能测试通常不需要相同的类似生产的基础设施，但是在非功能(尤其是性能)测试的情况下，这是必须的。
出于节约成本的目的，分段基础设施不同于生产设施(通常包含更少的机器)并不罕见。然而，这种方法会导致许多生产问题。迈克尔·t·尼加德在他的名著《T2》中写道:释放它！，给出了一个真实场景的示例，其中在试运行环境中使用的机器比在生产环境中使用的少。
故事是这样的:在一家公司，系统是稳定的，直到某个代码更改，这导致生产极其缓慢，即使所有的压力测试都通过了。怎么可能？碰巧有一个同步点，每个服务器都在这个点上相互通信。在转移的情况下，有一个服务器，所以实际上没有阻止程序。然而，在生产中，有许多服务器，这导致服务器相互等待。这个例子只是冰山一角，如果试运行环境与生产环境不同，许多生产问题可能无法通过验收测试。
# 质量保证
质量保证环境(也称为测试环境)旨在供质量保证团队执行探索性测试，并供外部应用(依赖于我们的服务)执行集成测试。质量保证环境的用例和基础设施如下图所示:
![](img/e9e70c25-4395-435b-91ff-36d3657f285d.png)
虽然分段不需要稳定(在持续交付的情况下，它在提交到存储库的每个代码更改后都会更改)，但质量保证实例需要提供一定的稳定性，并公开与生产相同(或向后兼容)的应用编程接口。与登台环境相反，基础架构可能与产品不同，因为它的目的不是确保候选版本正常工作。
一个非常常见的情况是为质量保证实例分配更少的机器(例如，仅从一个位置)。
Deploying to the QA environment is usually done in a separate pipeline, so that it will be independent from the automatic release process. Such an approach is convenient, because the QA instance has a different life cycle than production (for instance, the QA team may want to perform testing on the experimental code branched from the trunk).
# 发展
开发环境可以创建为所有开发人员的共享服务器，或者每个开发人员都可以拥有自己的开发环境。这里展示了一个简单的图表:
![](img/4ded0bd8-f76b-4509-bd96-f0cb95bd5606.png)
开发环境总是包含最新版本的代码。它用于实现开发人员之间的集成，可以像对待质量保证环境一样对待，但由开发人员使用，而不是质量保证。
# 持续交付环境
对于持续交付流程而言，登台环境是不可或缺的。在一些非常罕见的情况下，当性能不重要并且项目没有很多依赖关系时，我们可以在本地(开发)Docker 主机上执行验收测试(就像我们在上一章中所做的那样)，但是这应该是一个例外，而不是规则。在这种情况下，我们总是要冒一些与环境相关的生产问题的风险。
其他环境对于持续交付通常并不重要。如果我们希望每次提交都部署到质量保证或开发环境中，那么我们可以为此目的创建单独的管道(注意不要混淆主发布管道)。在许多情况下，部署到质量保证环境是手动触发的，因为它可能有不同于生产的生命周期。
# 保护环境
所有环境都需要妥善保护。很明显。更显而易见的是，最重要的要求是保持生产安全，因为我们的业务依赖于此，任何安全缺陷的后果都可能是最高的。
Security is a broad topic. In this section, we focus only on the topics related to the Continuous Delivery process. Nevertheless, setting up a complete server infrastructure requires much more knowledge about security.
在持续交付过程中，从属端必须能够访问服务器，以便部署应用。
为从属服务器提供服务器凭证有不同的方法:
*   **将 SSH 密钥放入从机**:如果我们不使用动态 Docker 从机配置，那么我们可以配置 Jenkins 从机包含私有 SSH 密钥。
*   **将 SSH 密钥放入从映像:**如果我们使用动态 Docker 从配置，我们可以将 SSH 私钥添加到 Docker 从映像中。但是，这可能会造成安全漏洞，因为任何能够访问该映像的人都可以访问生产服务器。
*   **Jenkins 凭证**:我们可以配置 Jenkins 存储凭证，并在管道中使用。
*   **复制到从 Jenkins 插件**:我们可以在开始 Jenkins 构建的同时，将 SSH 密钥动态复制到从机中。
每种解决方案都有一些优点和缺点。在使用它们中的任何一个时，我们必须格外小心，因为当一个奴隶可以进入生产时，任何闯入奴隶的人都会闯入生产。
最有风险的解决方案是将 SSH 私钥放入 Jenkins 从映像中，因为此后存储映像的所有地方(Docker 注册表或带有 Jenkins 的 Docker 主机)都需要得到很好的保护。
# 非功能测试
在前一章中，我们学习了很多关于功能需求和自动化验收测试的知识。然而，我们应该如何处理非功能性需求呢？或者更有挑战性，如果没有要求怎么办？在持续交付过程中，我们是否应该跳过它们？让我们在这一部分回答这些问题。
软件的非功能方面总是很重要的，因为它们会给系统的运行带来很大的风险。
例如，许多应用会失败，因为它们无法承受用户数量突然增加的负载。在*可用性工程**雅各布·尼尔森*一书中写道，1.0 秒大约是用户思想流动保持不间断的极限。想象一下，随着负载的增长，我们的系统开始超过这个极限。用户可以仅仅因为服务的性能而停止使用它。考虑到这一点，非功能测试和功能测试一样重要。
长话短说，对于非功能测试，我们应该始终采取以下步骤:
*   决定哪些非功能方面对我们的业务至关重要
*   对于他们每个人:
    *   指定测试的方式与我们指定验收测试的方式相同
    *   向持续交付管道添加一个阶段(在验收测试之后，应用仍部署在阶段环境中)
*   只有在所有非功能测试都通过之后，应用才会进入发布阶段
不管非功能测试的类型如何，想法总是一样的。然而，方法可能略有不同。让我们检查不同的测试类型及其带来的挑战。
# 非功能测试的类型
功能测试总是与同一个方面相关——系统的行为。相反，非功能测试涉及许多不同的方面。让我们讨论最常见的系统属性，以及如何在持续交付过程中测试它们。
# 性能试验
性能测试是最广泛使用的非功能测试。它们衡量系统的响应性和稳定性。我们可以创建的最简单的性能测试是向 web 服务发送一个请求，并测量其**往返时间** ( **RTT** )。
性能测试有不同的定义。在许多地方，它们意味着包括负载、压力和可伸缩性测试。有时它们也被描述为白盒测试。在本书中，我们将性能测试定义为测量系统延迟的黑盒测试的最基本形式。
出于性能测试的目的，我们可以使用一个专用的框架(对于 Java 来说，最流行的是 JMeter)，或者只使用与验收测试相同的工具。简单的性能测试通常在验收测试之后作为管道阶段添加。如果 RTT 超过了给定的限制，并且它检测到了肯定会降低服务速度的错误，这样的测试应该会失败。
The JMeter plugin for Jenkins can show performance trends over the time.
# 负载测试
负载测试用于检查当有大量并发请求时系统如何运行。虽然一个系统只需一个请求就可以非常快，但这并不意味着它同时处理 1，000 个请求就足够快了。在负载测试期间，我们测量许多并发调用的平均请求-响应时间，这些调用通常由许多机器执行。负载测试是发布周期中非常常见的质量保证阶段。为了实现自动化，我们可以使用与简单性能测试相同的工具；但是，在大型系统的情况下，我们可能需要一个单独的客户端环境来执行大量并发请求。
# 压力测试
压力测试，也称为容量测试或吞吐量测试，是一种确定有多少并发用户可以访问我们服务的测试。这听起来可能和负载测试一样；但是，在负载测试的情况下，我们将并发用户的数量(吞吐量)设置为给定的数字，检查响应时间(延迟)，如果超过限制，构建就会失败。然而，在压力测试期间，我们保持延迟不变，并增加吞吐量，以便在系统仍可运行时发现最大并发调用数。因此，压力测试的结果可能是通知我们的系统可以处理 10，000 个并发用户，这有助于我们为高峰使用时间做好准备。
压力测试不太适合持续交付过程，因为它需要长时间的测试，并发请求的数量也越来越多。它应该作为单独的 Jenkins 管道的单独脚本来准备，并在我们知道代码更改会导致性能问题时按需触发。
# 可扩展性测试