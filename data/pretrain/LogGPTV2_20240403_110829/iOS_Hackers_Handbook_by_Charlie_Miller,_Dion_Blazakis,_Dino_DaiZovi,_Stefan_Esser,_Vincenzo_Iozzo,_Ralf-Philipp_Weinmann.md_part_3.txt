to the ARM architecture used in iOS devices, it moves into return-
oriented programming (ROP). It shows how you can create ROP pay-
loads both manually and automatically. It also gives some examples
of ROP payloads.
n Chapter 9 — This chapter transitions from user space to that of the kernel.
After introducing some kernel basics, it describes how to debug the iOS
ffllaasstt..iinndddd xxvviiiiii 44//33//22001122 77::4477::5555 PPMM
Introduction xix
kernel so you can watch it in action. It shows how to audit the kernel for
vulnerabilities and then how to exploit many types of such vulnerabilities.
n Chapter 10 — This chapter introduces jailbreaking. Starting with the
basics of how jailbreaking works, it then describes in detail the different
types of jailbreaks. It then outlines the different components needed for
a jailbreak including fi le system modifi cations, installed daemons, activa-
tion, and concludes with a walkthrough of all the kernel patches utilized
by jailbreaking.
n Chapter 11 — This fi nal chapter moves from the main application pro-
cessor to the other processor found in many iOS devices, the baseband
processor. It shows how to set up the tools to interact with the baseband
as well as which real-time operating systems run on basebands avail-
able on iOS devices, past and present. It then shows how to audit the
baseband operating systems, as well as some examples of vulnerabili-
ties. It ends by describing some payloads that can be run on baseband
operating systems.
Who Should Read This Book
This book is intended for anyone who’s ever wondered how iOS devices work.
This might be someone who wants to get involved in the jailbreaking commu-
nity, an application developer trying to understand how to store their data in a
secure manner, an enterprise administrator trying to understand how to secure
iOS devices, or a security researcher trying to fi nd fl aws in iOS.
Just about anybody can expect to read and understand the early chapters
of this book. Although we attempted to start with the basics, in later chapters,
understanding this content requires at least a familiarity with basic ideas, like
how to use a debugger and how to read code listings, and so on.
Tools You Will Need
If you’re only looking to gain a basic understanding of how iOS works, you
don’t need anything outside of this book. However, to get the most out of this
book, we encourage you to follow along with the examples on your own iOS
devices. For this, you’ll need at least one iOS device. To really work through
the examples, it will need to be jailbroken. Additionally, while it is possible to
cobble together a working toolchain for other platforms, it is probably easiest
if you have a computer running Mac OS X in order to use Xcode to compile
sample programs.
ffllaasstt..iinndddd xxiixx 44//33//22001122 77::4477::5555 PPMM
xx Introduction
What’s on the Website
This book’s website (www.wiley.com/go/ioshackershandbook) will contain
all the code found in this book. No need to sit down and type it in yourself.
Furthermore, when iOS specifi c tools are mentioned, they will be made avail-
able on the site when possible. Also check out the website for any corrections
to the book, and feel free to let us know if you fi nd any errors.
Congratulations
We love our iOS devices. We’re all Apple Fan Boys. However, we like them
even better when attackers aren’t stealing all our personal information. While
reading a book like this won’t stop all attacks against iOS, the more people who
understand the security of iOS and how it works, the closer we will be to mak-
ing it a more secure platform. So, sit back, get ready to learn about iOS security,
and work toward making it even better. After all, knowing is half the battle…
ffllaasstt..iinndddd xxxx 44//33//22001122 77::4477::5555 PPMM
CHAPTER
1
iOS Security Basics
If you’re like us, every time you get your hands on a new device you wonder how
secure it is. The iPhone was no exception. Here was a device that had jumped
across the threshold from being a phone that might have a small web browser to a
device that was more like your computer than your old phone. Surely there were
going to be similar security issues in these (and future) devices to the issues that
were already occurring on desktop computers. What precautions and security
mechanisms had Apple built into these devices to prevent compromises? Here
was a chance to start a whole new branch of computing, from the beginning.
How important was security going to be for these emerging smart devices?
This chapter answers these questions for iOS devices. It begins by looking at
the hardware seen for various iOS devices and then quickly moves into describing
the security architecture of iOS 5. This includes highlighting the many layers of
defense built into current devices to make attacks by malware and exploitation
by attackers diffi cult. It then illustrates how these defenses have held up (or
not) in the real world by showing some attacks that have occurred against iOS
devices. This section on iOS attacks takes a historical approach starting from
attacks against the very fi rst iPhone and ending with attacks against iOS 5
devices. Along the way you will notice how much the security of iOS devices
has improved. Whereas the very fi rst versions of iOS had almost no security, the
most recent versions of iOS 5 have quite a strong and robust security posture.
1
cc0011..iinndddd 11 44//1166//22001122 55::4411::2255 PPMM
2 Chapter 1 n iOS Security Basics
iOS Hardware/Device Types
As iOS evolved during the years, so did the hardware inside the various Apple
devices. When smartphones and tablets became widespread among users,
people started to feel the need to have powerful devices at their disposal. In a
way, the expectation was to have a computer in their pocket.
The fi rst step in that direction was the creation of the iPad. The original
iPad had an ARM Cortex-A8 CPU, which, compared to the CPU present on the
original iPhone, was roughly twice as fast.
Another big step forward was the iPad 2 and the iPhone 4S. They both feature
ARM Cortex-A9 dual-core processors, which are 20 percent faster compared to
the A8 in terms of CPU operations. Even more astonishing is the fact that the
GPU of the A9 is nine times faster compared to the A8.
From a security perspective, the biggest hardware differences came with the
iPhone 3GS and the iPad 2. The iPhone 3GS was the first one to support
the Thumb2 instruction set. The new instruction set changed the way ROP pay-
loads needed to be created. Most code sequences present in previous versions
of the device were suddenly different on the 3GS.
The iPad 2, on the other hand, introduced dual-core processors, which in
turn enabled the iOS allocator to work in full swing. This has had a huge
impact on exploit development because exploits become much less reliable in a
multi-processor environment.
Another relevant hardware component from a security point of view is the
baseband. In fact, in most countries the iDevices are bound to a carrier (locked).
To unlock iPhones, most exploits use bugs in the baseband component inside
the phone. Both devices have historically used Infi neon baseband fi rmwares.
Only recently with the iPhone 4 CDMA and iPhone 4S has Apple moved
to Qualcomm.
A number of exploits have been published on the various Infi neon fi rmwares,
but none yet on the Qualcomm ones.
How Apple Protects the App Store
One of the things that makes iOS devices so great is the number of applications,
or apps, that are available to run on them. These apps can be found in Apple’s
App Store. There have been more than 18 billion downloads from the App Store,
and at least 500,000 different apps are available (see Figure 1.1).
Apps are developed using Xcode and the iOS SDK on Mac OS X computers.
The built apps can run in an iOS simulator or can be put on real devices for
testing. The apps are then sent to Apple for review. If approved, they are signed
by Apple’s private key and pushed out to the App Store for download. Apps must
cc0011..iinndddd 22 44//1166//22001122 55::4411::2255 PPMM
Chapter 1 n iOS Security Basics 3
be signed by a trusted party, such as Apple, or they will not run on the devices
because of the Mandatory Code-Signing requirement in iOS (see Chapter 4 for
more details). Enterprises can also distribute apps to their employees using a
similar system, but the employees’ phones must be confi gured to accept apps
that are signed by the enterprise as well as by Apple.
Figure 1.1: A users’ view of the App Store.
Of course, once you could download new apps to iOS devices, it opened
up the possibility for malware. Apple has tried to reduce this risk with code
signing and the App Store review process. Additionally, App Store apps run
in a sandbox at a low privilege level to reduce the damage they can cause. You
see more on this in a bit.
Understanding Security Threats
This book is about iOS security — how it works and how to break it. To fully
understand the decisions made by Apple in trying to secure its devices, it is fi rst
necessary to think about the different types of threats that the device might face.
At a high level, iOS devices face many of the same types of attacks that any
desktop computer faces. These types of attacks can be split into two broad
categories: malware and exploits. Malware has been around for decades on
personal computers and is starting to become a menace for mobile devices as
well. In general, malware is any software that does something “bad” when it is
cc0011..iinndddd 33 44//1166//22001122 55::4411::2255 PPMM
4 Chapter 1 n iOS Security Basics
installed and run on a device. This malware might be bundled with software
the user wants, or it might disguise itself as something the user wants. In either
case, the user downloads and installs the malware and when the malware is
executed, it performs its malicious actions. These actions might include send-
ing e-mails, allowing remote access to an attacker, installing a keylogger, and
so on. All general-purpose computing devices are susceptible at some level to
malware. Computers are designed to run software; they do what they are told.
If the user tells it to run something that turns out to be malicious, the computing
device will happily comply. There is no real vulnerability with the computer;
it is just not in a position to know which programs it should run and which it
should not. The typical way to protect devices from malware is with antivirus
(AV) software. It is the AV’s job to determine which software is safe to run and
which is not safe to run.
On the other hand, exploits take advantage of some underlying defect of the
software on the device to run its code. A user might be innocently surfi ng a
web page, reading an e-mail, or doing absolutely nothing at all, when all of a
sudden some malicious code (perhaps in the form of a web page, e-mail, or text
message) takes advantage of a vulnerability to run code on the device. Such
attacks are sometimes called drive-by-downloads because, unlike the malware
example, the user is mostly an innocent victim and wasn’t trying to install any
code, but just trying to use his or her device! The exploit might run some code
inside the compromised process, or it might download some software, install
it, and run it. The victim might have no idea that anything out of the ordinary
has happened.
Exploitation such as this requires two ingredients. The fi rst is a fl aw or
vulnerability in the software on the device. The second is a way to leverage
this vulnerability to get attacker-controlled code to run on the device. Because
of this two-step process, you have two main ways to protect against this kind
of attack. The fi rst involves making it harder to fi nd vulnerabilities. This might
mean exposing less code to the attacker (reducing the attack surface) or cleaning
up and removing as many fl aws as possible in the code. The problem with this
approach is that some code must always be exposed to the attacker or the device
cannot interact with the outside world. Furthermore, it is very diffi cult to fi nd
all (or even most) of the vulnerabilities lurking deep in a code base. If it were
easy, there would be no book like this one — or any jailbreaks, for that matter!
The second approach to protecting against exploitation is to make the pro-
cess of going from vulnerability to performing a malicious action more dif-
fi cult. This involves a lot of engineering technologies such as data execution
prevention, and memory randomization, which are discussed throughout this
book. Continuing with this line of reasoning, if you concede that an attacker
will eventually fi nd a bug in your code and might get it running, you can
cc0011..iinndddd 44 44//1166//22001122 55::4411::2266 PPMM
Chapter 1 n iOS Security Basics 5
at least limit the damage that code might do. This involves using privilege
separation or sandboxing to keep sensitive data from some processes. For
example, your web browser probably doesn’t need the capability to make
videos or send text messages.
So far, the discussion has centered on security threats for all devices. Next,
you examine how attacking an iOS device might differ from attacking a personal
computer. In many respects, it is very similar. iOS is a stripped-down version of
Mac OS X, and so many of the vulnerabilities and attacks are shared between the
two or are at least very similar. The differences that do exist basically boil down
to the attack surface. The attack surface is the portion of code that is accessible
to an attacker and that processes attacker-supplied input.
In some respects, the attack surface of iOS devices is smaller than a corre-
sponding Mac OS X desktop computer. Certain applications, such as iChat, are
not installed in iOS. Other applications, such as QuickTime, are greatly reduced
in their capabilities. Likewise, certain fi le types are rejected by MobileSafari but
are parsed by Safari. So in these ways iOS has a smaller attack surface. On the
other hand, certain features are present only on iOS devices, particularly the
iPhone. One such example is SMS messages. The fact that iPhones parse these
messages but you don’t have corresponding code in Mac OS X demonstrates
that in some regards, iOS has a larger attack surface. Another example of the
expanded attack surface of iOS includes the code running on the baseband
processor of the iPhone. We talk about these two iOS-specifi c attack vectors
later in this book in Chapters 6 and 12, respectively.
Understanding the iOS Security Architecture
You can imagine some of the nasty attacks that await an iOS device; this section
discusses how the device is engineered to withstand these kinds of attacks. Here
we describe iOS 5, which as you’ll see, is pretty secure. In a later section we
show you the evolution of how iOS got here, which was a bit of a bumpy ride.
The Reduced Attack Surface
The attack surface is the code that processes attacker-supplied input. If Apple
has a vulnerability in some code, and either the attacker can’t reach it or Apple
doesn’t ship the code at all in iOS, an attacker cannot base an exploit on this
vulnerability. Therefore, a key practice is minimizing the amount of code an
attacker can access, especially remotely.
In the ways that were possible, Apple reduced the attack surface of iOS
compared to Mac OS X (or other smartphones). For example, love it or hate it,
cc0011..iinndddd 55 44//1166//22001122 55::4411::2266 PPMM
6 Chapter 1 n iOS Security Basics
Java and Flash are unavailable on iOS. These two applications have a history of
security vulnerabilities and not including them makes it harder for an attacker
to fi nd a fl aw to leverage. Likewise, iOS will not process certain fi les, but Mac
OS X will. One example is .psd fi les. This fi le type is handled happily in Safari,
but not in MobileSafari, and importantly, nobody would likely notice the lack
of support for this obscure fi le format. Likewise, one of Apple’s own formats,
.mov, is only partially supported, and many .mov fi les that play on Mac OS X
won’t play in iOS. Finally, even though iOS renders .pdf fi les natively, only
some features of the fi le format are parsed. Just to see some numbers on the
subject, Charlie Miller once fuzzed Preview (the native Mac OS X PDF viewer)
and found well over a hundred crashes. When he tried these same fi les against
iOS, only 7 percent of them caused a problem in iOS. This means that just by
reducing the PDF features that iOS handled, it reduced the number of potential
vulnerabilities by more than 90 percent in this case. Fewer fl aws mean fewer
opportunities for exploitation.
The Stripped-Down iOS
Beyond just reducing the potential code an attacker might exploit, Apple also
stripped down the number of useful applications an attacker might want to
use during and after exploitation. The most obvious example is that there is no
shell (/bin/sh) on an iOS device. In Mac OS X exploits, the main goal is to try to
execute a shell in “shellcode.” Because there is no shell at all in iOS, some other
end goal must be developed for iOS exploits. But even if there were a shell in
iOS, it wouldn’t be useful because an attacker would not be able to execute other
utilities from a shell, such as rm, ls, ps, and so on. Therefore, attackers who get
code running will have to either perform all of their actions within the context
of the exploited process, or bring along all the tools they want to use. Neither
or these options are particularly easy to pull off.
Privilege Separation
iOS separates processes using users, groups, and other traditional UNIX fi le
permission mechanisms. For example, many of the applications to which the
user has direct access, such as the web browser, mail client, or third-party
apps, run as the user mobile. The most important system processes run as
the privileged user root. Other system processes run as other users such
as _wireless or _mdnsresponder. By using this model, an attacker who gets full
control of a process such as the web browser will be constrained by the fact the
code she is executing will be running as user mobile. There are limits to what
such an exploit can do; for example, the exploit will not be able to make system-
level confi guration changes. Likewise, apps from the App Store are limited in
what they can do because they will be executed as user mobile as well.
cc0011..iinndddd 66 44//1166//22001122 55::4411::2266 PPMM
Chapter 1 n iOS Security Basics 7
Code Signing
One of the most important security mechanisms in iOS is code signing. All
binaries and libraries must be signed by a trusted authority (such as Apple)
before the kernel will allow them to be executed. Furthermore, only pages in
memory that come from signed sources will be executed. This means apps
cannot change their behavior dynamically or upgrade themselves. Together,
these actions prevent users from downloading and executing random fi les
from the Internet. All apps must come from the Apple App Store (unless the
device is confi gured to accept other sources). Apple has the ultimate approval
and inspects applications before they can be hosted at the App Store. In this
way, Apple plays the role of an antivirus for iOS devices. It inspects each app
and determines if it is okay to run on iOS devices. This protection makes it very
hard to get infected with malware. In fact, only a few instances of malware have
ever been found for iOS.
The other impact of code signing is that it complicates exploitation. Once an
exploit is executing code in memory, it might want to download, install, and
execute additional malicious applications. This will be denied because anything
it tries to install will not be signed. Therefore, exploits will be restricted to the