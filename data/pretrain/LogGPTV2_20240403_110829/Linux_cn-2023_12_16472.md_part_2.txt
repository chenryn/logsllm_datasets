```
Defaults        env_reset, timestamp_timeout=XX
```
其中 `XX` 是以分钟为单位的超时时长。
如果你还有其他参数，例如你在上一节中看到的星号反馈，它们都可以在一行中组合起来：
```
Defaults        env_reset, timestamp_timeout=XX, pwfeedback
```
> 
> ? 同样地，你还可以控制密码重试的次数上限。使用 `passwd_tries=N` 来修改用户可以输入错误密码的次数。
> 
> 
> 
### 4、在不输入密码的情况下使用 sudo
行！你已经增加了 `sudo` 密码超时时限（或者称之为 SPT。哇塞！你还在坚持这个叫法 ?）。
这样很好。我的意思是，毕竟没人愿意每几分钟就输入一次密码。
扩大超时时限是一方面，另一方面则是尽可能不去使用它。
是的，你没听错。你就是可以在无需输入密码的情况下使用 `sudo`。
从安全角度来看，这听起来似乎很冒险，对吧？的确如此，但在某些实际情况下，你确实会更青睐无密码的 `sudo`。
例如，如果你需要远程管理多台 Linux 服务器，并为了避免总是使用 root，你在这些服务器上创建了一些 `sudo` 用户。辛酸的是，你会有太多的密码。而你又不想对所有的服务器使用同一的 `sudo` 密码。
在这种情况下，你可以仅设置基于密钥的 SSH 访问方式，并允许使用无需密码的 `sudo`。这样，只有获得授权的用户才能访问远程服务器，也不用再记住 `sudo` 密码。
我在 [DigitalOcean](https://digitalocean.pxf.io/JzK74r) 上部署的测试服务器上就采用了这种方法，用来测试开源工具和服务。
好处是这可以按用户进行设置。使用以下命令打开 `/etc/sudoers` 文件进行编辑：
```
sudo visudo
```
然后添加如下行：
```
user_name ALL=(ALL) NOPASSWD:ALL
```
当然，你需要将上面行中的 `user_name` 替换为实际的用户名。
保存文件后，你就可以享受无密码的 `sudo` 生活了。
### 5、配置独立的 sudo 日志文件
查阅 syslog 或 journal 日志，我们可以找到关于 `sudo` 的所有条目，但若需要单独针对 `sudo` 的记录，可以专门创建一个自定义的日志文件。例如，选择 `/var/sudo.log` 文件来存储日志。这个新的日志文件无需手动创建，如果不存在，系统会自动生成。
编辑 `/etc/sudoers` 文件，采用 `visudo` 命令，并在其中添加以下内容：
```
Defaults  logfile="/var/log/sudo.log"
```
保存该文件后，便可以在其中查看哪些命令在何时、由哪位用户通过 `sudo` 运行了。
![](/data/attachment/album/202312/14/232357d09rs9mzers5dde9.png)
### 6、限制特定用户组使用 sudo 执行特定命令
这是一种高级解决方案，系统管理员在需要跨部门共享服务器的多用户环境中会使用。
开发者可能会需要以 root 权限运行 Web 服务器或其他程序，但全权给予他们 `sudo` 权限会带来安全风险。我建议在群组级别进行此项操作。例如，创建命名为 `coders` 的群组，并允许它们运行在 `/var/www` 和 `/opt/bin/coders` 目录下的命令（或可执行文件），以及 [inxi 命令](https://itsfoss.com/inxi-system-info-linux/)（路径是 `/usr/bin/inxi` 的二进制文件）。这是一个假想情景，实际操作请谨慎对待。
接下来，用 `sudo visudo` 编辑 sudoer 文件，再添加以下行:
```
%coders   ALL=(ALL:ALL) /var/www,/opt/bin/coders,/usr/bin/inxi
```
如有需要，可以添加 `NOPASSWD` 参数，这样允许使用 `sudo` 运行的命令就不再需要密码了。
关于 `ALL=(ALL:ALL)` 的详细解读，我们将会在其他文章中进行讲解，毕竟这篇文章已经解释的内容足够多了。
### 7、检查用户的 sudo 权限
好吧，这是个小提示，而不是系统调优技巧。
如何确认一个用户是否具有 `sudo` 权限呢？可能有人会说，查看他们是否是 `sudo` 组的成员。但这并不一定准确，因为有些发行版用的是 `wheel` 代替 `sudo` 分组。
更佳的方法是利用 `sudo` 内建的功能，看看用户具有哪种 `sudo` 权限：
```
sudo -l -U user_name
```
这将显示出用户具有执行部分命令或所有命令的 `sudo` 权限。
![](/data/attachment/album/202312/14/232357g2v6hcs6o2nkoeos.png)
如你所见，我拥有自定义日志文件、密码反馈以及执行所有命令的 `sudo` 权限。
如果一个用户完全没有 `sudo` 权限，你将看到如下提示：
```
User prakash is not allowed to run sudo on this-that-server.
```
### ? 附加内容：输错 sudo 密码时，让系统“侮辱”你
这是个我在文章开头提到的“无用”小调整。
我想你在使用 `sudo` 时肯定曾误输过密码，对吧？
这个小技巧就是，在你每次输错密码时，[让 sudo 抛出随机的“侮辱”](https://itsfoss.com/sudo-insult-linux/)。
用 `sudo visudo` 修改 `sudo` 配置文件，然后添加以下行：
```
Defaults   insults
```
修改后，你可以故意输错密码，测试新的设置。
![](/data/attachment/album/202312/14/232358dareehb4844irfbv.png)
你可能在想，谁会喜欢被侮辱呢？**只有粉丝**可以以直白的方式告诉你 ?
### 你是如何运用 sudo 的？
![](/data/attachment/album/202312/14/232359d1s1bob9bak19san.png)
我知道定制化的可能性无穷无尽，但其实，一般的 Linux 用户并不会去自定义 `sudo`。
尽管如此，我还是热衷于与你分享这些因为你可能会发现一些新奇且实用的东西。
? 那么，你有发现什么新的东西吗？请在评论区告诉我。你有一些秘密的 `sudo` 技巧欢迎和大家分享！
*（题图：DA/a12900e5-e197-455e-adfc-0b52e4305b91）*
---
via: 
作者：[Abhishek Prakash](https://itsfoss.com/author/abhishek/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[ChatGPT](https://linux.cn/lctt/ChatGPT) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出