**作者： knaithe@天玄安全实验室  
原文链接：**
> **漏洞描述**
> ：漏洞位于/net/packet/af_packet.c文件，rx_owner_map引用了pg_vec，切换到TPACKET_V3协议版本中，在packet_set_ring()函数的末尾，对pg_vec释放了一次，并未对rx_owner_map指针置为NULL，导致rx_owner_map成为悬空指针，直到从TPACKET_V3协议版本切换到TPACKET_V2协议版本后，在次到达packet_set_ring()函数的末尾，bitmap_free()函数对rx_owner_map指针进行释放，触发double
> free漏洞。
>
> **影响版本** ：Linux Kernel v5.8.0 - v5.15.0
>
> **测试版本** ：Linux #5.13.0
>
> **保护机制** ：SMEP/SMAP/KASLR/KPTI
## 1.漏洞分析
### 1.1.AF_PACKET套接字协议族
**协议简介：**
AF_PACKET是原始套接字协议，是一种特殊的套接字协议，可以是数据链路层原始套接字，也可以是网络层原始套接字。如果是数据链路层原始套接字，可以直接发送和接收位于数据链路层的以太帧，比如Ethernet
II协议，如果是网络层原始套接字，就只能发送和接收位于网络层的数据报文，比如IP协议。
**快速使用：** 我们这里可以通过如下函数快速的创建一个 AF_PACKET协议的原始套接字：
    socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
通过setsockopt就可以设置该套接字相关操作，比如设置当前AF_PACKET套接字协议版本为TPACKET_V3：
    int version = TPACKET_V3;
    setsockopt(s, SOL_PACKET, PACKET_VERSION, &version, sizeof(version));
创建ring buffer：
    struct tpacket_req3 req3;
    memset(&req3, 0, sizeof(req3));
    req3.tp_block_size = block_size;
    req3.tp_block_nr = block_nr;
    req3.tp_frame_size = frame_size;
    req3.tp_frame_nr = frame_nr;
    req3.tp_retire_blk_tov = retire_blk_tov;
    req3.tp_sizeof_priv = 0;
    req3.tp_feature_req_word = 0;
    setsockopt(recv_fd, SOL_PACKET, PACKET_RX_RING, &req3, sizeof(req3));
### 1.2.漏洞触发
**触发过程详解：**
  1. 首先调用socket函数创建AF_PACKET套接字。
  2. 然后调用setsockopt设置协议版本为TPACKET_V3。
  3. 接着调用setsockopt设置RX_RING，正常给tpacket_req3配置参数，在执行packet_set_ring()函数过程中，pg_vec指向alloc_pg_vec()函数分配的内存，并且调用init_prb_bdqc函数，导致pg_vec被sock->rx_ring->prb_bdqc->pkbdq引用，然后调用swap函数将pg_vec和sock->rx_ring->pg_vec交换，函数最后pg_vec指向NULL，没有调用free。
  4. 再次调用setsockopt设置RX_RING，将tpacket_req3参数的tp_block_nr和tp_frame_nr字段设置为0，然后调用swap函数将pg_vec和sock->rx_ring->pg_vec交换，此时sock->rx_ring->pg_vec为NULL，pg_vec指向上一步骤分配的内存，函数结尾调用free_pg_vec()释放pg_vec，此时packet_ring_buffer->prb_bdqc->pkbdq成为悬空指针。
  5. 到此才可以再次调用setsockopt设置协议版本为TPACKET_V2，sock->rx_ring->pg_vec为NULL，所以该套接字切换协议TPACKET_V2成功。
  6. 最后调用setsockopt设置RX_RING，此时tpacket_req参数的tp_block_nr字段必须为0，再次进入packet_set_ring()函数，由于已经是TPACKET_V2协议，所以调用了swap函数交换了rx_owner_map和sock->rx_ring->rx_owner_map，由于packet_ring_buffer结构体的rx_owner_map成员和tpacket_kbdq_core成员属于联合体，所以sock->rx_ring->rx_owner_map和sock->rx_ring->prb_bdqc->pkbdq的值相同，在第4步骤packet_ring_buffer->prb_bdqc->pkbdq成为悬空指针，所以在函数结尾调用bitmap_free(rx_owner_map)，等同于free掉sock->rx_ring->prb_bdqc->pkbdq这个悬空指针，造成double free。
    /net/packet/af_packet.c
    static int packet_set_ring(struct sock *sk, union tpacket_req_u *req_u,
      int closing, int tx_ring)
    {
     struct pgv *pg_vec = NULL;
     struct packet_sock *po = pkt_sk(sk);
     unsigned long *rx_owner_map = NULL;
     int was_running, order = 0;
     struct packet_ring_buffer *rb;
     struct sk_buff_head *rb_queue;
     __be16 num;
     int err;
     /* Added to avoid minimal code churn */
     struct tpacket_req *req = &req_u->req;
     rb = tx_ring ? &po->tx_ring : &po->rx_ring;
     rb_queue = tx_ring ? &sk->sk_write_queue : &sk->sk_receive_queue;
     err = -EBUSY;
     if (!closing) {
      if (atomic_read(&po->mapped))
       goto out;
      if (packet_read_pending(rb))
       goto out;
     }
     if (req->tp_block_nr) {   // 上述第4、6步，tp_block_nr字段必须为0，只允许步骤3进入
      unsigned int min_frame_size;
      /* Sanity tests and some calculations */
      err = -EBUSY;
      if (unlikely(rb->pg_vec))
       goto out;
      switch (po->tp_version) {
      case TPACKET_V1:
       po->tp_hdrlen = TPACKET_HDRLEN;
       break;
      case TPACKET_V2:
       po->tp_hdrlen = TPACKET2_HDRLEN; 
       break;
      case TPACKET_V3:
       po->tp_hdrlen = TPACKET3_HDRLEN; //  TPACKET3_HDRLEN = 0x44
       break;
      }
      err = -EINVAL;
      if (unlikely((int)req->tp_block_size tp_block_size))) // 注意tp_block_size必须与PAGE_SIZE对齐
       goto out;
      min_frame_size = po->tp_hdrlen + po->tp_reserve;
      if (po->tp_version >= TPACKET_V3 &&
          req->tp_block_size req3.tp_sizeof_priv) + min_frame_size)
       goto out;
      if (unlikely(req->tp_frame_size tp_frame_size & (TPACKET_ALIGNMENT - 1)))
       goto out;
      rb->frames_per_block = req->tp_block_size / req->tp_frame_size;
      if (unlikely(rb->frames_per_block == 0))
       goto out;
      if (unlikely(rb->frames_per_block > UINT_MAX / req->tp_block_nr))
       goto out;
      if (unlikely((rb->frames_per_block * req->tp_block_nr) !=
         req->tp_frame_nr))
       goto out;
      err = -ENOMEM;
      order = get_order(req->tp_block_size);
      pg_vec = alloc_pg_vec(req, order); // 步骤3进入pg_vec分配内存
      if (unlikely(!pg_vec))
       goto out;
      switch (po->tp_version) {
      case TPACKET_V3:
       /* Block transmit is not supported yet */
       if (!tx_ring) {   //  只能是RX_RING
        init_prb_bdqc(po, rb, pg_vec, req_u); // 步骤3 rb->prb_bdqc->pkbdq引用了pg_vec
       } else {
        struct tpacket_req3 *req3 = &req_u->req3;
        if (req3->tp_retire_blk_tov ||
            req3->tp_sizeof_priv ||
            req3->tp_feature_req_word) {
         err = -EINVAL;
         goto out_free_pg_vec;
        }
       }
       break;
      default:
       if (!tx_ring) {
        rx_owner_map = bitmap_alloc(req->tp_frame_nr,
         GFP_KERNEL | __GFP_NOWARN | __GFP_ZERO);
        if (!rx_owner_map)
         goto out_free_pg_vec;
       }
       break;
      }
     }
     /* Done */
     else {
      err = -EINVAL;
      if (unlikely(req->tp_frame_nr))  // 上述第4、6步，tp_frame_nr字段必须为0，不能直接goto out 
       goto out;
     }
     /* Detach socket from network */
     spin_lock(&po->bind_lock);
     was_running = po->running; //release调用时，此值为0
     num = po->num;
     if (was_running) {
      WRITE_ONCE(po->num, 0);
      __unregister_prot_hook(sk, false);
     }
     spin_unlock(&po->bind_lock);
     synchronize_net();
     err = -EBUSY;
     mutex_lock(&po->pg_vec_lock);
     if (closing || atomic_read(&po->mapped) == 0) {  // closing字段一直为0，但是po->mapped字段一直等于0
      err = 0;
      spin_lock_bh(&rb_queue->lock);
      swap(rb->pg_vec, pg_vec); // 步骤3 pg_vec和rb->pg_vec交换，pg_vec为NULL，步骤4被换回来
      if (po->tp_version rx_owner_map, rx_owner_map); // 步骤6 rx_owner_map指向同rb->prb_bdqc->pkbdq
      rb->frame_max = (req->tp_frame_nr - 1);
      rb->head = 0;
      rb->frame_size = req->tp_frame_size;
      spin_unlock_bh(&rb_queue->lock);
      swap(rb->pg_vec_order, order);
      swap(rb->pg_vec_len, req->tp_block_nr);
      rb->pg_vec_pages = req->tp_block_size/PAGE_SIZE;
      po->prot_hook.func = (po->rx_ring.pg_vec) ?
          tpacket_rcv : packet_rcv;
      skb_queue_purge(rb_queue);
      if (atomic_read(&po->mapped))
       pr_err("packet_mmap: vma is busy: %d\n",
              atomic_read(&po->mapped));
     }
     mutex_unlock(&po->pg_vec_lock);
     spin_lock(&po->bind_lock);
     if (was_running) {
      WRITE_ONCE(po->num, num);
      register_prot_hook(sk);
     }
     spin_unlock(&po->bind_lock);
     if (pg_vec && (po->tp_version > TPACKET_V2)) {
      /* Because we don't support block-based V3 on tx-ring */
      if (!tx_ring)
       prb_shutdown_retire_blk_timer(po, rb_queue);
     }
    out_free_pg_vec:
     bitmap_free(rx_owner_map);  // 步骤6 free掉rx_owner_map等于free rb->prb_bdqc->pkbdq，造成double free
     if (pg_vec)   // 步骤3由于pg_vec等于NULL为进入free,步骤4pg_vec不为NULL
      free_pg_vec(pg_vec, order, req->tp_block_nr);  // 步骤4由于释放pg_vec，同时rb->prb_bdqc->pkbdq变为悬空指针
    out:
     return err;
    }
上述步骤3中，进入init_prb_bdqc()函数增加了sock->rx_ring->prb_bdqc->pkbdq引用了pg_vec。
    /net/packet/af_packet.c
    static void init_prb_bdqc(struct packet_sock *po,
       struct packet_ring_buffer *rb,
       struct pgv *pg_vec,
       union tpacket_req_u *req_u)
    {
     struct tpacket_kbdq_core *p1 = GET_PBDQC_FROM_RB(rb);
     struct tpacket_block_desc *pbd;
     memset(p1, 0x0, sizeof(*p1));
     p1->knxt_seq_num = 1;
     p1->pkbdq = pg_vec;   // 步骤3 sock->rx_ring->prb_bdqc->pkbdq引用了pg_vec，造成漏洞的关键行为
     pbd = (struct tpacket_block_desc *)pg_vec[0].buffer;
     p1->pkblk_start = pg_vec[0].buffer;
     p1->kblk_size = req_u->req3.tp_block_size;
     p1->knum_blocks = req_u->req3.tp_block_nr;
     p1->hdrlen = po->tp_hdrlen;
     p1->version = po->tp_version;
     p1->last_kactive_blk_num = 0;
     po->stats.stats3.tp_freeze_q_cnt = 0;
     if (req_u->req3.tp_retire_blk_tov)
      p1->retire_blk_tov = req_u->req3.tp_retire_blk_tov;
     else
      p1->retire_blk_tov = prb_calc_retire_blk_tmo(po,
          req_u->req3.tp_block_size);
     p1->tov_in_jiffies = msecs_to_jiffies(p1->retire_blk_tov);
     p1->blk_sizeof_priv = req_u->req3.tp_sizeof_priv;
     rwlock_init(&p1->blk_fill_in_prog_lock);
     p1->max_frame_len = p1->kblk_size - BLK_PLUS_PRIV(p1->blk_sizeof_priv);
     prb_init_ft_ops(p1, req_u);
     prb_setup_retire_blk_timer(po);
     prb_open_block(p1, pbd);
    }
漏洞触发，引发panic：
## 2.漏洞利用
### 2.1.绕过KASLR
**泄露内核地址思路：**
通过漏洞篡改msg_msg->m_ts成员，增大msg_msg消息大小，然后再读取该msg_msg，泄露邻近timerfd_ctx->tmr->function这个函数指针指向的timerfd_tmrproc内核函数地址来计算内核基地址，从而绕过KASLR。
**泄露内核地址详细步骤：**
1.先耗尽kmalloc-256的per_cpu上的freelist里的空闲块，然后布局PAGE大小的dummy ringbuf；
2.第一次堆喷，首先释放dummy
ringbuf偶数下标的ringbuf，让这些free掉的PAGE都返还给伙伴系统的order-0。然后再用pg_vec去堆喷kmalloc-256的slab，并从伙伴系统的order-0取出PAGE分成16个kmalloc-256给pg_vec；
3.第二次堆喷，释放dummy
ringbuf奇数下标的ringbuf，让这些free掉的PAGE都返还给伙伴系统的order-0。然后用timerfd_ctx去喷kmalloc-256的slab，并从伙伴系统的order-0取刚刚归还的PAGE分成16个kmalloc-256给timerfd_ctx；
4.第三次堆喷，通过pg_vec的漏洞释放掉所有的第一次堆喷中的pg_vec对象，这些kmalloc-256的pg_vec不会归还给伙伴系统，而是进入到了对应slab的空闲链表，接着用msg_msg从空闲链表再次申请出刚释放掉的kmalloc-256的slab；
5.第四次堆喷，这时，触发部分pg_vec的double
free漏洞，然后用msg_msgseg再次将刚释放的msg_msg从freelist里分配出来并篡改msg_msg->m_ts，这时读取所有第三步中申请的msg_msg，即可读取包含被篡改msg_msg->m_ts的msg_msg，从而造成OOB读，泄露出相邻PAGE的timerfd_ctx->tmr->function这个函数指针指向的timerfd_tmrproc内核函数地址，从而计算出当前内核基址的相对偏移。
### 2.2.利用方式一：篡改modprobe_path
> **提权思路：** 通过msg_msg +
> fuse的方式提权，篡改modprobe_path指向的字符串，modprobe_path默认指向"/sbin/modprobe"，修改modprobe_path指向"/tmp/w"，然后再执行一个非法的二进制文件，这样便会触发"/tmp/w"这个文件以root权限执行，从而拿到root权限。
>
> **提权原理：**
> 篡改modprobe_path提权的原理，想必大家也不陌生，这里还是简单介绍一下，当execve函数执行一个非法的二进制文件时，执行到search_binary_handler()函数时，会遍历formats链表，formats链表包含所有注册的二进制文件，挨个调用load_elf_binary()函数，判断当前执行文件格式是否是注册的二进制文件，如果不是注册的二进制文件，再调printable宏判断当前执行文件前4个字节是否是可打印的字符，如果当前执行文件既不是注册的二进制文件，前4个字节也不是可打印的字符，则调用request_module()函数。
    static int search_binary_handler(struct linux_binprm *bprm)
    {
     bool need_retry = IS_ENABLED(CONFIG_MODULES);
     struct linux_binfmt *fmt;
     int retval;