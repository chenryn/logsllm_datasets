---
author: Lee Carpenter
category: 树莓派
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4878
date: '2020-04-07 10:35:24'
editorchoice: false
excerpt: 将流量引入 Kubernetes 树莓派集群的分步指南。
fromurl: https://opensource.com/article/20/3/kubernetes-traefik
id: 12081
islctt: true
largepic: /data/attachment/album/202004/07/103035brocaxwcimcinza0.jpg
permalink: /article-12081-1.html
pic: /data/attachment/album/202004/07/103035brocaxwcimcinza0.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 12049
- displayorder: 0
  raid: 12106
reviewer: wxy
selector: lujun9972
summary: 将流量引入 Kubernetes 树莓派集群的分步指南。
tags:
- Kubernetes
- k3s
thumb: false
title: 使用 Traefik 引导 Kubernetes 流量
titlepic: true
translator: wxy
updated: '2020-04-07 10:35:24'
---
> 
> 将流量引入 Kubernetes 树莓派集群的分步指南。
> 
> 
> 
![](/data/attachment/album/202004/07/103035brocaxwcimcinza0.jpg)
在本文中，我们将部署几个简单的网站，并学习如何使用 Traefik 将来自外部世界的流量引入到我们的集群中。之后，我们还将学习如何删除 Kubernetes 资源。让我们开始吧！
### 准备
要继续阅读本文，你只需要我们在上一篇文章中构建的 [k3s 树莓派集群](/article-12049-1.html)。由于你的集群将从网络上拉取镜像，因此该集群需要能够访问互联网。
出于解释目的，本文将显示一些配置文件和示例 HTML 文件。所有示例文件都可以在[此处](https://gitlab.com/carpie/ingressing_with_k3s/-/archive/master/ingressing_with_k3s-master.zip)下载。
### 部署一个简单的网站
之前，我们使用 `kubectl` 进行了直接部署。但是，这不是典型的部署方法。一般情况都会使用 YAML 配置文件，这也是我们要在本文中使用的配置文件。我们将从顶部开始，并以自顶向下的方式创建该配置文件。
### 部署配置
首先是部署配置。配置如下所示，并在下面进行说明。我通常以 [Kubernetes 文档](https://kubernetes.io/docs/)中的示例为起点，然后根据需要对其进行修改。例如，下面的配置是复制了[部署文档](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment)中的示例后修改的。
创建一个文件 `mysite.yaml`，其内容如下：
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysite-nginx
  labels:
    app: mysite-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysite-nginx
  template:
    metadata:
      labels:
        app: mysite-nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
```
其中大部分是样板。重要的部分，我们会将该部署命名为 `mysite-nginx`，并为其加上同名的 `app` 标签。我们指定了一个 副本   replica ，这意味着将只创建一个 Pod。我们还指定了一个容器，我们将其命名为 `nginx`。我们将 镜像   image 指定为 `nginx`。这意味着在部署时，k3s 将从 DockerHub 下载 `nginx` 镜像并从中创建一个 Pod。最后，我们指定了 容器端口   containerPort 为 `80`，这只意味着在容器内部 Pod 会监听 `80` 端口。
我在上面强调了“在容器内部”，因为这是一个重要的区别。由于我们是按容器配置的，因此只能在容器内部访问它，并且进一步将其限制为内部网络。这对于允许多个容器在同一容器端口上监听所是必要的。换句话说，通过这种配置，其他一些 Pod 也可以在其容器端口 80 上侦听，并且不会与此容器冲突。为了提供对该 Pod 的正式访问权限，我们需要一个 服务   service 配置。
### 服务配置
在 Kubernetes 中， 服务   service 是一种抽象。它提供了一种访问 Pod 或 Pod 集合的方法。当连接到服务时，服务会路由到单个 Pod，或者如果定义了多个 Pod 副本，会通过负载均衡路由到多个 Pod。
可以在同一配置文件中指定该服务，这就是我们将在此处要做的。用 `---` 分隔配置区域，将以下内容添加到 `mysite.yaml` 中：
```
---
apiVersion: v1
kind: Service
metadata:
  name: mysite-nginx-service
spec:
  selector:
    app: mysite-nginx
  ports:
    - protocol: TCP
      port: 80
```
在此配置中，我们将服务命名为 `mysite-nginx-service`。我们提供了一个 选择器   selector ：`app: mysite-nginx`。这是服务选择其路由到的应用程序容器的方式。请记住，我们为容器提供了 `app` 标签：`mysite-nginx` 。这就是服务用来查找我们的容器的方式。最后，我们指定服务协议为 `TCP`，在端口 `80` 上监听。
### 入口配置
 入口   Ingress 配置指定了如何将流量从集群外部传递到集群内部的服务。请记住，k3s 预先配置了 Traefik 作为入口控制器。因此，我们将编写特定于 Traefik 的入口配置。将以下内容添加到 `mysite.yaml` 中（不要忘了用 `---` 分隔）：
```
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: mysite-nginx-ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: mysite-nginx-service
          servicePort: 80
```
在此配置中，我们将入口记录命名为 `mysite-nginx-ingress`。我们告诉 Kubernetes，我们希望 `traefik` 成为我们的入口控制器，再加上 `kubernetes.io/ingress.class` 的注解。
在 规则   rules 部分中，我们基本上是说，当 `http` 流量进入时，并且 `path` 匹配 `/`（或其下的任何内容），将其路由到由 `serviceName mysite-nginx-service` 指定的 后端   backend 服务中，并将其路由到 `servicePort 80`。这会将传入的 HTTP 流量连接到我们之前定义的服务。
### 需要部署的东西
就配置而言，就是这样了。如果我们现在部署，我们将获得默认的 nginx 页面，但这不是我们想要的。让我们创建一些简单但可自定义的部署方式。创建具有以下内容的文件 `index.html`：
```
K3S!
  Hello from K3S!
```
我们尚未介绍 Kubernetes 中的存储机制，因此在这里我们偷懒一下，仅将该文件存储在 Kubernetes 配置映射中。这不是我们推荐的部署网站的方式，但对于我们的目的来说是可行的。运行以下命令：
```
kubectl create configmap mysite-html --from-file index.html
```
该命令从本地文件 `index.html` 创建名为 `mysite-html` 的 配置映射   configmap 资源。这实际上是在 Kubernetes 资源中存储一个文件（或一组文件），我们可以在配置中调出该文件。它通常用于存储配置文件（因此而得名），我们在这里稍加滥用。在以后的文章中，我们将讨论 Kubernetes 中适当的存储解决方案。
创建配置映射后，让我们将其挂载在我们的 `nginx` 容器中。我们分两个步骤进行。首先，我们需要指定一个 卷   volume 来调出配置映射。然后我们需要将该卷挂载到 `nginx` 容器中。通过在 `mysite.yaml` 中的 `container` 后面的 `spec` 标签下添加以下内容来完成第一步：
```
      volumes:
      - name: html-volume
        configMap:
          name: mysite-html
```
这告诉 Kubernetes 我们要定义一个名为 `html-volume` 的卷，并且该卷应包含名为 `html-volume`（我们在上一步中创建的）的配置映射的内容。
接下来，在 `nginx` 容器规范中的 端口   ports 下方，添加以下内容：
```
        volumeMounts:
        - name: html-volume
          mountPath: /usr/share/nginx/html
```
这告诉 Kubernetes，对于 `nginx` 容器，我们想在容器中的 `/usr/share/nginx/html` 路径上挂载名为 `html-volume` 的卷。 为什么要使用 `/usr/share/nginx/html`？那个位置就是 `nginx` 镜像提供 HTML 服务的地方。通过在该路径上挂载卷，我们用该卷内容替换了默认内容。