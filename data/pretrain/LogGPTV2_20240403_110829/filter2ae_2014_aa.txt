**译者:知道创宇404实验室翻译组  
原作者：Jungwon Lim _, Yonghwi Jin_ †, Mansour Alharthi, Xiaokuan Zhang, Jinho
Jung, Rajat Gupta, Kuilin Li, Daehee Jang‡, Taesoo Kim**
`摘要`
Web浏览器是每个人日常生活中不可或缺的一部分。它们经常用于注重安全性和隐私敏感的事情，银行交易和检查医疗记录时都会用到。不幸的是，现代Web浏览器过于复杂，难免会有漏洞（例如，Chrome中有2500万行代码），它们作为网络空间接口的作用使它们容易受到攻击。因此，Web浏览器自然成为展示攻击者先进漏洞利用技术和浏览器供应商最先进防御措施的舞台。可以说，Web浏览器是学习最新安全问题和技术的绝佳之地，但由于其快速变化的特性和复杂的代码库，对于大多数安全研究人员来说，
Web浏览器仍然如魔法一般不好捉摸。
为了弥补这一差距，本文将通过研究流行的安全漏洞类型、它们的漏洞利用技术和部署的防御措施,
来系统化讲述现代Web浏览器的安全环境。具体来讲，我们首先介绍了一个统一的架构，展示四大Web浏览器的安全设计。其次，我们分享了近10年有关浏览器漏洞纵向研究的见解。第三，我们提出了应对计划及其有效性的时间表和背景。第四，我们分享了我们在2020年
Pwn2Own
比赛中使用的全链漏洞利用的经验教训。我们相信，这种系统化的关键点梳理可以揭示如何推进改善现代网络浏览器的现状，更重要的是，如何在未来创建安全不易攻破的软件。
## I. 序
Web浏览器在现代互联网连接生活方式中发挥着不可或缺的作用。我们依靠网络浏览器来支付抵押贷款、安排疫苗接种并与世界各地的人们联系。换句话说，网络浏览器成为网络空间的守门人，它们的不安全性对我们社会的安全、公平和隐私构成严重威胁。不幸的是，网络浏览器一直是网络攻击中最具吸引力、最有价值的目标——2021年[58]，50%的0-day漏洞都是对web浏览器的攻击，这威胁到互联网上的每一个人[103],
[141], [195], [196], [211], [230], [231]。
因此，希望使用新型漏洞利用技术入侵的攻击者与希望通过最先进的应对方案保护用户安全的浏览器供应商自然把现代Web浏览器当做战场。浏览器供应商确实是通过以下方式推进现代安全实践的重要参与者:
1\. 不仅开源当前架构和代码，还开源设计过程本身[45]、[52]、[210]; 2\. 引入漏洞赏金奖励以鼓励发现0-day漏洞[116]、[176];
3\. 通过在云上开发和运行最先进的模糊测试器[109]，[111]，主动发现可利用的漏洞
不幸的是，详细的安全设计决策和针对新漏洞利用的新缓解措施的见解通常不是那么容易做到，Web浏览器社区中已经见识到了难度。一部分原因是它们复杂的架构、快速变化的实现方法和庞大的代码库，但主要是因为同时清晰且客观地系统化所有主要Web浏览器的知识并非易事。每个浏览器供应商的专家都试图提供他们对安全设计和决策的看法，例如
Chrome[44]、IE[51]、Firefox[54]。之前在2017年发表的行业报告[90]、[226]主要侧重于以一种临时的、实时的的方式描述个别技术和防御措施，而没有发展学术观点或提供有助于为社区设想未来方向的见解和教训。
本文大胆尝试将现代Web浏览器的安全环境系统化梳理。我们首先提供了四种主要网络浏览器在安全方面的统一模型，并通过使用提供的模型比较和对比它们的安全决策。其次，基于该模型，我们分析了过去10年在每个开源浏览器中发现的安全漏洞，并展示了它们与新应对方案的开发、漏洞赏金计划和已知的漏洞利用技术的关系。第三，根据我们的研究，我们分享我们的见解和经验教训，以激励正在塑造网络浏览器未来的研究人员和开发人员。我们希望这样的尝试可以帮助他们全面了解每个供应商的方法，从而增强他们的安全设计，以最大限度地减少安全影响和攻击面。
`挑战`: 三个独特的特点使得将网络浏览器安全知识系统化变得具有挑战性。 1\. 研究对象不断在变化:
浏览器供应商做出决策非常快速（例如，每周更新），他们的开发速度比人类构建的任何其他软件都要快得多。为了推断出有见地的经验教训，我们努力专注于Web浏览器中的基本设计问题和方法。
2\. 海量的研究量: 现代网络浏览器是用几百万行代码构建的，例如，Chrome由2500万行代码组成
[16]。除了项目规模之外，有关Web浏览器的信息（例如0-day漏洞利用和缓解措施）分散在整个Internet中，无法提供安全形势的整体总结和概述。在本文中，我们将精力集中在四种主要的网络浏览器上，即Chrome、Firefox、Safari和Edge，并研究众多公共资源以解决它们的安全问题：issue跟踪器[43]、[48]、CVE报告
[2]、[4]、[5]、[7]、[9]、[11]、[12]、[14]、[55]、代码库 [30]、[45]、[52]、[60]，以及来自供应商的技术报告
[49]、[58]、[65]、[67]、[79]、[86]、[152]、[161]、[163]、[170]、[171]、[204]、[208]、[230]、[231]。
3\. 单独的规范:
同样重要的是，要就其安全问题提供客观的观点；每个浏览器在做出决策时都有自己的规范和要求（例如，发布截止日期），专注于基本问题是至关重要的。为了解决这个问题，我们提供了一个统一的架构，可以在概念上比较和对比每个浏览器的设计，而不会影响它们的实现细节。
`贡献`: 本文做出以下贡献: \- 提供现代浏览器架构在沙盒方案方面的结构的详细比较； \- 对浏览器漏洞进行为期10年的纵向研究； \-通过详细分析对浏览器漏洞进行分类； \- 研究浏览器上最先进的通用缓解措施； \- 对真实世界的全链漏洞利用进行详细研究。
`非本文的目标`。本研究的主要重点是网络浏览器安全，涉及其自身漏洞的安全性。我们不考虑其他与Web相关的安全问题，例如Web或Web服务器安全问题，例如跨站点脚本(XSS)、SQL注入等。请注意，尽管通用跨站点脚本(UXSS)[166]听起来类似于XSS，它通常源于浏览器的实现和设计中的问题，因此被认为是网络浏览器安全（§III-E）。
## II. 现代浏览器架构
本节提供了每个Web浏览器的统一模型，可以客观地比较它们的方法。
### A. 概述
现代网络浏览器采用最小权限原则，将操作系统进程作为保护域。通过使用进程域，可以使用三种类型的进程来描述每个Web浏览器，即`浏览器(browser)进程`（标记为绿色）、`渲染器(renderer)进程`（标记为洋红色magenta,
实际上在图中偏紫的那部分）和`特定任务的进程`（标记为黄色），如图1所示。
图1: 四大浏览器的内部架构。所有浏览器都部署了一个沙箱（粉红色区域）来限制渲染器，而详细的沙箱方法因底层操作系统而异。浏览器之间存在细微但重要的差异。
`浏览器进程`:
当Web浏览器启动时，浏览器进程以与用户相同的特权级别（即更高的特权）运行，并将沙箱配置文件传递给操作系统以限制其他进程的特权（即较低的特权）。它管理所有子进程（例如渲染器），并且是唯一通过系统调用（和用户界面）直接与用户交互的进程。
`渲染器进程`: 此进程负责解析和渲染不受信任的Web内容。Web上不断增长的数据类型导致渲染器进程包含各种各样的组件，例如媒体解析器、DOM 和 JS
引擎。由于它们是浏览器bug的主要来源，因此它们被限制在限制性沙箱中（参见§II-C）。渲染器进程通常是按浏览器选项卡或每个网页来生成的。每个渲染器的隔离策略因每个Web浏览器的安全策略或功能（例如，站点隔离）、运行时可用资源（例如，移动设备中的内存不足）甚至用户配置而异。
`其他进程`:
现代浏览器的架构是高度模块化的。这种模块化设计使浏览器能够根据进程的角色拥有不同的权限级别。与外部驱动程序交互的服务（例如，网络或GPU进程）被隔离为一个单独的进程，这为不需要此类访问的进程（如渲染器进程）启用了更严格的沙盒。Web浏览器通常也将扩展和插件放在不同的进程中。这可以保护具有更高权限级别的插件免受恶意Web内容的侵害，并保护浏览器在恶意插件的情况下不被劫持。
`进程间通信(IPC)`:
由于这些进程不能直接访问彼此的内存，它们总是通过操作系统提供的IPC通道进行通信，并且通信通常由浏览器（代理）进程进行调解。换句话说，浏览器进程作为一个关系监视器，限制从其他进程直接访问重要数据或高权限操作（例如，cookie或系统调用）。由于这种多进程架构，攻击总是从类似渲染进程这样的低权限进程发起，攻击者的目标是闯入以用户权限运行的浏览器进程。同时，它可以从渲染器进程中的良性bug导致的崩溃中恢复，从而使浏览器对稳定性问题具有弹性。
`同源政策(SOP)`:
实际上，网站由来自不同来源的大量内容组成，例如，将CDN用于常见的JavaScript库，通过iframe嵌入外部站点，或启用社交网络中的点赞按钮。网站的复杂性促成了每个Web浏览器的众多安全策略和独特功能。根据每个网站的来源[94]，浏览器进程和渲染器进程限制允许网页与哪些资源(例如cookie)进行交互，这就是同源策略(SOP)[94]。
### B. 浏览器的差异
到目前为止讨论的设计同样适用于所有四种主流浏览器。然而，如图1所示，一些实现细节会因浏览器的设计及其底层操作系统的不同而有所不同。例如，Chrome和Safari中的
GPU进程与渲染器进程是分开的，使用沙盒配置文件使它们能够访问3D API 平台[67]（参见
§II-C）。此外，Chrome、Firefox和Safari各自有一个单独的进程来处理网络服务，而Chrome网络服务则置于沙箱之外。Chrome团队目前正在实现其网络服务的沙箱
[28]。
`站点隔离`: 沙盒机制的确可以保护浏览器；但是，随着通用跨站脚本 (UXSS)
攻击的出现，攻击者可以窃取用户数据而无需沙箱逃逸。为了处理此类攻击，Chrome团队提出了站点隔离[186]以进一步将不同的站点来源分离到不同的进程中。它为每个站点来源创建了一个专用进程，因此不同站点来源之间没有隐式共享。站点隔离是解决UXSS的有效措施，它也有利于防止基于硬件的瞬态执行攻击[137]、[147]。Firefox有一个类似的项目，名为Fission[175]，它在Firefox_88_Beta[174]中发布。
`JavaScript引擎`: JavaScript引擎是现代浏览器的核心，它将JavaScript代码转换为机器代码。主流浏览器使用即时编译(Just-In-Time, JIT)[36][34][33]来加速代码执行。此外，JIT编译器对所有操作的结果和副作用(side-effects)进行建模，并运行各种分析过程以优化代码。如果其中任何一个出错，就会生成并执行具有内存损坏问题的本机代码，这可能导致严重的安全隐患[26]、[121]。虽然每个引擎都有不同的实现，但它们使用相似的设计原则并具有共同的攻击面（参考§III-D）。因此，攻击者可以构建出跨不同引擎的通用攻击原语，例如fakeobj和addrof原语[154]、[189]以及元素类型转换
[153]、[190]。JavaScript引擎也在浏览器之外被使用（例如Node.js使用V8），放大了JavaScript引擎中安全漏洞的影响。我们在§VI-A中讨论了由同类型的浏览器引擎引起的问题。
`渲染引擎`: 渲染引擎负责解释资源和渲染网页。四大浏览器中的每一个都有自己的渲染引擎：Safari使用WebKit;
Chrome使用Blink（衍生自WebKit）; Firefox使用 Gecko;
Edge使用Blink（替换EdgeHTML）。Web标准[219]、[224]用作浏览器供应商实现其渲染引擎的基线规范和参考。由于Web标准不断发展新功能，渲染引擎也发生了快速变化，即实现新功能或删除已弃用的功能。由于不同的决策过程和实现策略，在不同浏览器的渲染引擎中实现的特性有很大的不同[42]，攻击面[228]因而也是不同的。我们将在§III中讨论攻击面。
### C. 沙盒方案的差异
沙盒会限制程序执行，以防其偏离预期任务。然而，用于构建沙盒环境的底层技术和架构在操作系统之间存在显著差异。为了检查沙盒实现的内部结构，我们进行了如下操作，并在表I中总结了我们的发现。
1\. 审核浏览器的源代码 2\. 监控沙盒API的行为 3\. 分析预定义的沙盒策略文件(例如, Safari浏览器的配置)。
表I. 沙盒对比(Chrome, Firefox, Edge, Safari; on Windows, Linux, MacOS)
`对沙盒原语进行分类`: 在表I中，我们根据作用将沙盒原语分为三类: 1\. 权限削减, 使用DAC/MAC等平台的权限系统对沙盒进程应用更多受限制的权限；
2\. 域分离, 为沙盒进程分配一个分离的资源空间； 3\. 减少攻击面, 限制对系统服务、内核或设备驱动程序的访问。
`浏览器的特定特征`:
浏览器供应商根据给定的约束(如，可用内存)使用不同的原语。例如，站点隔离通过在受感染的渲染器和特权网页[107]、[108]之间设置一个原始的、进程级的安全边界来防止RCE漏洞转化为UXSS或沙盒逃逸。
`特定于操作系统的行为`: 我们还比较了不同操作系统(即Windows、Linux和macOS)的沙盒功能。
  * `Windows`: 通过使用安全令牌(security token)来限制每个进程[117]。与基于功能的模型(capability-based model)类似，获得某个令牌级别的进程可以访问具有适当安全描述符级别的特权资源。例如，渲染器进程以低完整性令牌级别(low integrity token level)运行，代理进程以中等完整性令牌级别(medium integrity token level)运行，因此在默认情况下，从渲染器进程到代理进程的任何写入访问都将受到限制。
然而，细粒度的访问控制没有统一的协议。为了解决这个问题，Chrome和Firefox使用自己的IPC机制和资源相关功能的二进制级代码补丁以支持细粒度规则集[117]。微软在Windows
8中引入了AppContainer，通过添加"附加到进程令牌"的功能概念，对资源实施更细粒度的访问控制。Edge创建了一个基于AppContainer[89]的沙箱。从默认拒绝策略(deny-by-default)开始，Edge为所需的系统资源创建了一组功能。Chrome也在试验基于AppContainer的沙箱[28]。浏览器还利用各种功能来应对沙盒逃逸。例如，备用桌面和备用窗口站(alternate
window
station)可用于应对基于UI的攻击，例如Shatter[180]；引入"锁定默认DACL"[24]和"随机限制SID"[38]以执行更加严格的DACL，因此受感染的沙盒进程无法访问其他沙盒进程。
  * `Linux`: 与Windows不同，Linux沙箱主要基于seccomp、chroot和namespace。首先，seccomp是基于eBPF语言的标准系统调用过滤器。由于默认的seccomp配置过于严格，浏览器会定义自己的过滤规则。例如，Chrome将其自定义的seccomp规则应用于除代理进程(broker process)之外的所有进程，并且每个进程的详细规则各不相同。其次，为了限制文件访问，基于Linux的浏览器沙箱会利用chroot监禁。一旦使用chroot限制了进程，就无法访问文件系统的更高层次结构。例如，Firefox将chroot监禁应用于所有渲染器，并且仅允许它们根据从代理进程获得的文件描述符访问特定文件。此外，浏览器使用namespace[74]为各种资源（例如用户、网络和IPC）创建单独的空间。例如，创建和加入用户命名空间使沙盒进程能够位于单独的UID和GID中，从而有效地禁用对其他未沙盒进程的访问。
  * `macOS`: 虽然Windows和Linux支持各种类型的沙箱原语，但macOS支持专门格式化的沙箱配置文件(.sb)[75]来描述给定进程的沙箱策略。通常，该文件提供允许访问的绝对文件路径的允许列表，并默认阻止所有其他文件访问。该配置文件还定义了访问其他资源（如网络和共享内存）的能力，并支持基于系统调用的过滤，如Linux的seccomp，尽管它仅部署在Safari上。
`移动平台`:
由于基于进程的沙箱使用大量内存，因此移动平台会在沙箱策略中引入细微差异，或者根据可用资源禁用它们。例如，在Android上，只有当设备有足够的内存（>1.9GB）并且用户需要在网站上输入密码时，才会启用Chrome中的站点隔离[77]。在iOS上，Safari使用与macOS不同的沙盒规则，因为不同的系统服务和IOKit驱动程序是暴露在移动设备上的。由于这些差异，一些漏洞利用可能仅适用于移动平台[152]。
### D. 浏览器漏洞利用
浏览器利用的目标是窃取其用户的敏感数据或安装恶意软件以采取进一步行动。攻击者可以执行UXSS之类的攻击直接窃取数据，或者先执行代码，然后尝试沙箱逃逸。攻击者可能会试图通过攻击内核来获得系统特权沙箱逃逸，这超出了本文的范围。幸亏有各种应对方案（参见§III，§IV），攻击者需要将多个bug（例如，利用4个bug组合直到沙盒逃逸[134]）链接在一起以获得任意执行。即使在控制流被劫持之后，由于渲染器进程在沙箱内运行，攻击者需要在代理进程中找到另一组bug以进行沙箱逃逸。根据武器库中可用的漏洞，攻击者经常试图利用系统服务、驱动程序或内核中的错误而不是代理进程来突破沙箱[155]。
## III. 浏览器漏洞和应对措施
在本节中，我们首先对过去十年中公开报告的浏览器漏洞进行统计研究，以推断趋势，然后介绍主要的漏洞类型（例如JavaScript引擎错误）及其供应商发布的相应应对措施。
图2. 浏览器利用场景和漏洞分类。我们主要关注浏览器安全相关问题，省略了基本的软件攻击/防御技术，如ROP、NX和ASLR。"Exploit
example"箭头描绘了§V中描述的利用路径。
### A. 浏览器漏洞趋势
`数据采集`: 我们研究了四种主要浏览器的公开CVE和漏洞报告:  
1\. 来自“浏览器供应商[53]的定期更新的安全公告  
2\. 供应商[43][48]发布的公共问题跟踪  
3\. 开放源代码存储库有将bug修复提交到已发布漏洞的常规做法[30][45][60][52]  
4\. 国家漏洞数据库(NVD)[55]中的CVE报告  
5\. 现实世界中使用的安全漏洞利用，例如Pwn2Own[61]中使用的bug，以及Google Project
Zero报告[49]、[58]。表II总结了我们数据收集工作的成果。