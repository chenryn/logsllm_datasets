__toString触发条件：
**echo ($obj) / print($obj) 打印时会触发**
**字符串连接时**
**格式化字符串时**
**与字符串进行==比较时（PHP进行==比较的时候会转换参数类型）**
**格式化SQL语句，绑定参数时**
**数组中有字符串时**
我们来写一个demo看一下
toString_demo.php
    test1 = $test;
        }
        public function __destruct()
        {
            // TODO: Implement __destruct() method.
            print "__destruct:";
            print $this->test1;
            print "n";
        }
        public function __wakeup()
        {
            // TODO: Implement __wakeup() method.
            print "__wakeup:";
            $this->test1 = "wakeup";
            print $this->test1."n";
        }
        public function __toString()
        {
            // TODO: Implement __toString() method.
            print "__toString:";
            $this->test1 = "tosTRING";
            return $this->test1."n";
        }
    }
    $a = new toString_demo("demo");
    $b = serialize($a);
    $c = unserialize($b);
    //print "n".$a."n";
    //print $b."n";
    print $c;
执行结果为下：
通过上面的测试，可以总结以下几点：
**echo ($obj) / print($obj) 打印时会触发**
**__wakeup的优先级 >__toString>__destruct**
**每执行完一个魔法函数，**
接下来从两个方面继续来深入：
**字符串操作**
**魔术函数的优先级可能造成的变量覆盖**
**字符串操作**
字符串拼接：
在字符串与反序列化后的对象与字符串进行字符串拼接时，会触发__toString方法。
字符串函数：
经过测试，当反序列化后的最想在经过php字符串函数时，都会执行__toString方法，从这一点我们就可以看出，__toString所可能造成的安全隐患。
下面举几个常见的函数作为例子（所使用的类还是上面给出的toString_demo类）：
**数组操作**
将反序列化后的对象加入到数组中，并不会触发__toString方法：
但是在in_array()方法中，在数组中有__toString返回的字符串的时候__toString会被调用：
**class_exists**
从in_array()方法中，我们又有了拓展性的想法。我们都知道，在php底层，类似于in_array()这类函数，都属于先执行，之后返回判断结果。那么顺着这个想法，我想到了去年的[IPS
Community Suite gadgets = $this->get_gadget_chains();
可以跟进代码看一看，其完成了对于所有payload的加载及保存，将所有的payload进行实例化，并保存在一个全局数组中，以方便调用。
可以动态跟进，看一下：
    public function get_gadget_chains()
        {
            $this->include_gadget_chains();
            $classes = get_declared_classes();
            $classes = array_filter($classes, function($class)
            {
                return is_subclass_of($class, '\PHPGGC\GadgetChain') &&
                       strpos($class, 'GadgetChain\') === 0;
            });
            $objects = array_map(function($class)
            {
                return new $class();
            }, $classes);
            # Convert backslashes in classes names to forward slashes,
            # so that the command line is easier to use
            $classes = array_map(function($class)
            {
                return strtolower(str_replace('\', '/', $class));
            }, $classes);
            return array_combine($classes, $objects);
        }
跟进include_gadget_chains方法中看一下：
    protected function include_gadget_chains()
        {
            $base = $this->base . self::DIR_GADGETCHAINS;
            $files = glob($base . '/*/*/*/chain.php');
            array_map(function ($file)
            {
                include_once $file;
            }, $files);
        }
在这边首先获取到当前路径，之后从根目录将其下子目录中的所有chain.php遍历一下，将其路劲存储到$files数组中。接着将数组中的所有chain.php包含一遍，保证之后的调用。
回到get_gadget_chains接着向下看，将返回所有已定义类的名字所组成的数组，将其定义为$classes，接着将是PHPGGCGadgetChain子类的类，全部筛选出来（也就是将所有的payload筛选出来），并将其实例化，在其完成格式化后，返回一个由其名与实例化后的类所组成的键值数组。
到此，完成了最基本框架加载与类的实例化准备。
跟着运行流程，看到generate方法：
    public function generate()
        {
            global $argv;
            $parameters = $this->parse_cmdline($argv);
            if(count($parameters) help();
                return;
            }
            $class = array_shift($parameters);
            $gc = $this->get_gadget_chain($class);
            $parameters = $this->get_type_parameters($gc, $parameters);
            $generated = $this->serialize($gc, $parameters);
            print($generated . "n");
        }
代码很简单，一步一步跟着看，首先parse_cmdline完成了对于所选模块及附加参数的解析。
接下来array_shift完成的操作就是将我们所选的模块从数组中抛出来。
举个例子，比如我们输入如下：
    $ ./phpggc monolog/rce1 'phpinfo();'
当前的$class为monolog/rce1，看到接下来进入了get_gadget_chain方法中，带着我们参数跟进去看。
    public function get_gadget_chain($class)
        {
            $full = strtolower('GadgetChain/' . $class);
            if(!in_array($full, array_keys($this->gadgets)))
            {
                throw new PHPGGCException('Unknown gadget chain: ' . $class);
            }
            return $this->gadgets[$full];
        }
现在的$full为gadgetchain/monolog/rce1，ok，看一下我们全局存储的具有payload的数组：
可以很清楚的看到，返回了一个已经实例化完成的GadgetChainMonologRCE1的类。对应的目录则为/gadgetchains/Monolog/RCE/1/chain.php
继续向下，看到将类与参数传入了get_type_parameters，跟进：
    protected function get_type_parameters($gc, $parameters)
        {
            $arguments = $gc->parameters;
            $values = @array_combine($arguments, $parameters);
            if($values === false)
            {
                $this->o($gc, 2);
                $arguments = array_map(function ($a) {
                    return '';
                }, $arguments);
                $message = 'Invalid arguments for type "' . $gc->type . '" ' . "n" .
                           $this->_get_command_line($gc->get_name(), ...$arguments);
                throw new PHPGGCException($message);
            }
            return $values;
        }
其完成的操作对你想要执行或者写入的代码进行装配，即code标志位与你输入的RCE代码进行键值匹配。若未填写代码，则返回错误，成功则返回相应的数组以便进行payload的序列化。
看完了这个模块后，再看我们最后的一个模块：将RCE代码进行序列化，完成payload的生成：
    public function serialize($gc, $parameters)
        {
            $gc->load_gadgets();
            $parameters = $gc->pre_process($parameters);
            $payload = $gc->generate($parameters);
            $payload = $this->wrap($payload);
            $serialized = serialize($payload);
            $serialized = $gc->post_process($serialized);
            $serialized = $this->apply_filters($serialized);
            return $serialized;
        }
**0x07 结语**
关于PHP（反）序列化漏洞的触发和利用所涉及的东西还有很多，本文只是做一个概括性的描述，抛砖引玉，如有不精确的地方，望大家给予更正。
**0x08 参考资料**
[Practical PHP Object
Injection](https://www.insomniasec.com/downloads/publications/Practical%20PHP%20Object%20Injection.pdf)
[SugarCRM 6.5.23 – REST PHP Object
Injection漏洞分析](http://bobao.360.cn/learning/detail/3020.html)
[CVE-2016-7124](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-7124)
[PHPGGC](https://github.com/ambionics/phpggc)
[关于PHP中的自动加载类](http://lucifaer.com/index.php/archives/17/)
[Phith0n小密圈的主题](http://t.xiaomiquan.com/zJ6Y7Mf)