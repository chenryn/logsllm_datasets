4\. [《PostgreSQL PITR THREE recovery target MODE: name,xid,time USE CASE - 2》](../201302/20130205_01.md)  
5\. [《PostgreSQL sharding有序UUID最佳实践 - serial global uuid stored in 64bit int8》](../201301/20130122_01.md)    
6\. http://postgres-xc.sourceforge.net/  
7\. http://postgres-xc.sourceforge.net/docs/1_0/barriers.html  
8\. http://postgres-xc.sourceforge.net/docs/1_0/sql-createbarrier.html  
9\. src/backend/pgxc/barrier/barrier.c  
10\. src/include/pgxc/barrier.h  
11\. src/backend/storage/lmgr/README  
12\. src/backend/storage/lmgr/README.barrier  
13\. src/include/storage/barrier.h  
14\.   
XLogRecord中的COMMIT/ABORT的时间信息相关代码 :   
src/backend/utils/adt/timestamp.c  
```  
01262 /*  
01263  * GetCurrentTimestamp -- get the current operating system time  
01264  *  
01265  * Result is in the form of a TimestampTz value, and is expressed to the  
01266  * full precision of the gettimeofday() syscall  
01267  */  
01268 TimestampTz  
01269 GetCurrentTimestamp(void)  
01270 {  
01271     TimestampTz result;  
01272     struct timeval tp;  
01273   
01274     gettimeofday(&tp, NULL);  
01275   
01276     result = (TimestampTz) tp.tv_sec -  
01277         ((POSTGRES_EPOCH_JDATE - UNIX_EPOCH_JDATE) * SECS_PER_DAY);  
01278   
01279 #ifdef HAVE_INT64_TIMESTAMP  
01280     result = (result * USECS_PER_SEC) + tp.tv_usec;  
01281 #else  
01282     result = result + (tp.tv_usec / 1000000.0);  
01283 #endif  
01284   
01285     return result;  
01286 }  
```  
src/backend/access/transam/xact.c  
```  
/*  
 * xactStartTimestamp is the value of transaction_timestamp().  
 * stmtStartTimestamp is the value of statement_timestamp().  
 * xactStopTimestamp is the time at which we log a commit or abort WAL record.  
 * These do not change as we enter and exit subtransactions, so we don't  
 * keep them inside the TransactionState stack.  
 */  
static TimestampTz xactStartTimestamp;  
static TimestampTz stmtStartTimestamp;  
static TimestampTz xactStopTimestamp;  
/*  
 *      transaction states - transaction state from server perspective  
 */  
typedef enum TransState  
{  
        TRANS_DEFAULT,                          /* idle */  
        TRANS_START,                            /* transaction starting */  
        TRANS_INPROGRESS,                       /* inside a valid transaction */  
        TRANS_COMMIT,                           /* commit in progress */  
        TRANS_ABORT,                            /* abort in progress */  
        TRANS_PREPARE                           /* prepare in progress */  
} TransState;  
/*  
 *      GetCurrentTransactionStopTimestamp  
 *  
 * We return current time if the transaction stop time hasn't been set  
 * (which can happen if we decide we don't need to log an XLOG record).  
 */  
TimestampTz  
GetCurrentTransactionStopTimestamp(void)  
{  
        if (xactStopTimestamp != 0)  
                return xactStopTimestamp;  
        return GetCurrentTimestamp();  
}  
/*  
 *      SetCurrentTransactionStopTimestamp  
 */  
static inline void  
SetCurrentTransactionStopTimestamp(void)  
{  
        xactStopTimestamp = GetCurrentTimestamp();  
}  
/*  
 *      RecordTransactionCommit  
 *  
 * Returns latest XID among xact and its children, or InvalidTransactionId  
 * if the xact has no XID.      (We compute that here just because it's easier.)  
 */  
static TransactionId  
RecordTransactionCommit(void)  
....  
  xlrec.xact_time = xactStopTimestamp;  
/*  
 *      RecordTransactionAbort  
 *  
 * Returns latest XID among xact and its children, or InvalidTransactionId  
 * if the xact has no XID.      (We compute that here just because it's easier.)  
 */  
static TransactionId  
RecordTransactionAbort(bool isSubXact)  
....  
        /* Write the ABORT record */  
        if (isSubXact)  
                xlrec.xact_time = GetCurrentTimestamp();  
        else  
        {  
                SetCurrentTransactionStopTimestamp();  
                xlrec.xact_time = xactStopTimestamp;  
        }  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")