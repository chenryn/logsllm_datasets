参数：
没有任何参数
返回值：
gethostid 返回一个含有主机标识符的长整数。
gethostname 系统调用
用法：
retcode = gethostname ( name, namelen ) ;
说明：
gethostname 用文本字符串的形式返回本地机器的主名字。
参数：
name 类型为&char，含义是放置名字的字符数组的地址
namelen 类型为 int，含义是名字数组的长度（至少应该为 65）
返回值：
若 gethostname 成功则返回 0 ，若发生错误则返回 –1 。当发生错误十，全局变量 errno
含有以下值：
EFAULT  错误原因是 name 或 namelen 参数不正确
getpeername 系统调用
附录 A  有关网络通信的服务和网络库函数
- 307 -
用法：
retcode = getpeername ( socket, remaddr, addrlen ) ;
说明：
应用程序使用 getpeername 获取以建立连接的套接字的远程端点的地址。通常，客户
机调用 connect 时设置了远程端点的地址，所以它知道远程地址。但是，使用 accept 获得
连接的服务器，可能需要查询套接字来找出远程地址。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
remaddr 类型为&sockaddr，含义是一个含有对端地址的 sockaddr 结构的指针。
addrlen 类型为&int，含义是一个整数指针，调用前，该函数含有第二个参数的长
度，调用后该整数含有远程端点地址的实际长度。
返回值：
getpeername 如果成功则返回 0 ，如果发生错误则返回 –1 。当发生错误的时候，全
局变量 errno 含有如下值之一：
EBADF  错误原因是第一个参数未指定一个合法的描述符
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
ENOTCONN  错误原因是套接字不是一个已经连接的套接字
ENOBUFS  错误原因是系统没有足够的资源完成操作
EFAULT  错误原因是 remaddr 参数指针无效
getprotobyname 系统调用
用法：
retcode = getprotobyname ( name ) ;
说明：
应用程序调用 getprotobyname ，以便根据协议名找到该协议正式的整数值。
参数：
name 类型为&char，含义是一个含有协议名字的字符串地址
返回值：
getprotobyname 如果成功则返回 protoent 类型的指针。如果发生错误则返回 0 。结构
protoent 声明如下：
struct protoent
{
/* 协议描述项 */
char p_name ;
/* 协议的正式名 */
char **p_aliases ;
/* 协议的别名列表 */
int
p_proto ;
/* 正式协议号 */
}
getservbyname 库调用
- 308 -
Linux网络编程
用法：
retcode = getservbyname ( name, proto ) ;
说明：
getservbyname 根据给出的服务名，从网络服务库中获取该服务的有关信息。客户机和
服务器都调用 getservbyname 将服务名映射为协议端口号。
参数：
name 类型为&char，含义是一个含有服务名的字符串指针。
proto 类型为&char，含义是一个含有所用协议名的字符串指针。
返回值：
getservbyname 如果成功则返回一个 servent 结构的指针，如果发生错误则返回一个空
指针。servent 结构声明如下：
struct servent
{
/* 服务项 */
char s_name ;
/* 正式服务名 */
char **s_aliases ;
/* 其它别名列表 */
int
s_port ;
/* 该服务使用的端口 */
char s_proto ;
/* 服务所使用的协议 */
} ;
getsockname 系统调用
用法：
retcode = getsockname ( socket, name, namelen ) ;
说明：
getsockname 获得指定套接字的本地地址。
参数：
socket 类型为 int，含义是一个由 socket 创建的描述符
name 类型为&sockaddr，含义是一个含有 IP 地址和套接字协议端口号的结构的指
针
namelen 类型为&int，含义是 name 结构中的字节数，返回时为结构的大小
返回值：
getsockname 如果成功则返回 0 ，如果发生错误则返回 –1 。一旦发生错误，全局变
量 errno 中含有如下值之一：
EBADF  错误原因是第一个参数没有指定一个合法的描述符
ENOTSOCK  错误原因是第一个参数没有指定一个套接字描述符
ENOBUFS  错误原因是系统中没有足够的缓冲区空间可用
EFAULT  错误原因是 name 或 namelen 的地址不正确
getsockopt 系统调用
附录 A  有关网络通信的服务和网络库函数
- 309 -
用法：
retcode = getsockopt ( socket, level, opt, optval, optlen ) ;
说明：
getsockopt 允许一个应用获得某个套接字的参数值或该套接字所使用的协议。
参数：
socket 类型为 int，含义是一个套接字描述符
level 类型为 int，含义是一个整数，它标识某个协议级
opt 类型为 int，含义是一个整数它标识某个选项
optval 类型为&char，含义是存放返回值的缓冲区地址
optlen 类型为&int，含义是缓冲区大小，返回时为所发现的值的长度。
用于套接字的查究级选项包括：
SO_DEBUG 调试信息的状态
SO_REUSEADDR 允许本地地址重用
SO_KEEPALIVE 连接保持状态
SO_DONTROUTE 忽略出报文的选路
SO_LINGER 如果存在数据，延迟关闭
SO_BROADCAST 允许传输广播报文
SO_OOBINLINE 在带内接受带外数据
SO_SNDBUF 输出缓冲区大小
SO_RCVBUF 输入缓冲区大小
SO_TYPE 套接字的类型
SO_ERROR 获取并清楚套接字的上一次出错
返回值：
getsockopt 如果成功则返回 0 ，如果发生错误则返回 –1 ，并且 errno 全局变量中含有
如下值之一：
EBADF  错误原因是第一个参数未指定一个合法的描述符
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
ENOPROTOOPT  错误原因是 opt 不正确
EFAULT  错误原因是 optval 或 optlen 的地址不正确
gettimeofday 系统调用
用法：
retcode = gettimeofday ( tm, tmzone ) ;
说明：
gettimeofday 从系统中提取当前时间和日期，以及有关本地时区的信息。
参数：
tm 类型为&struct timeval，含义是一个 timeval 结构的地址
tmzone 类型为&struct timezone，含义是一个 timezone 结构的地址
两个结构声明如下：
- 310 -
Linux网络编程
struct timeval
{
/* 存储时间的结构 */
long tv_sec ;
/* 自 1/1/70 以来的秒数 */
long tv_usec ;
/* 超过 tv_sec 的毫秒数 */
} ;
struct timezone
{
/* timezone 信息结构 */
int
tz_minuteswest ;
/* 格林尼治以西的分钟数 */
int
tz_dsttime ;
/* 所用的校正的类型 */
} ;
返回值：
gettimeofday 如果成功则返回 0 ，如果发生错误则返回 –1 。一旦发生错误，全局变
量 errno 将含有如下的值：
EFAULT
tm 或 tmzone 参数含有不正确的地址
listen 系统调用
用法：
retcode = listen ( socket, queuelen ) ;
说明：
服务器使用 listen 是套接字处于被动状态（准备接受联入请求）。在服务器处理某个请
求时，协议软件应将后续收到的请求排队，listen 也设置排队的连接请求数目。listen 只用
于 TCP 套接字。
参数：
socket 类型为 int，含义是一个由 socket 调用创建的套接字描述符
queuelen 类型为 int，含义是入连接请求的队列大小
返回值：
listen 若成功则返回 0 ，若发生错误则返回 –1 。一旦出错，全局变量 errno 含有如下
值之一：
EBADF  错误原因是第一个参数未指定一个合法的描述符
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
EOPNOTSUPP  错误原因是套接字类型不支持 listen
read 系统调用
用法：
retcode = read ( socket, buff, buflen ) ;
说明：
附录 A  有关网络通信的服务和网络库函数
- 311 -
客户机或服务器使用 read 从套接字获取输入。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
buff 类型为&char，含义是一个存放输入字符的数组的指针
buflen 类型为 int，含义是一个整数，它指明 buff 数组中的字节数
返回值：
read 如果检测到套接字上遇到文件结束就返回 0 ，若它获得了输入就返回当前读取的
字节数，如果发生了错误就返回 –1 。一旦出错，全局变量 errno 中含有如下值之一：
EBADF  错误原因是第一个参数未指定合法的描述符
EFAULT  错误原因是地址 buff 不合法
EIO  错误原因是在读数据时 I/O 发生错误
EINTR  错误原因是某个信号中断了操作
EWOULDBLOCK指定的是非阻塞的 I/O ，但是套接字没有数据。
recv 系统调用
用法：
retcode = recv ( socket, buffer, length, flags ) ;
说明：
recv 从套接字读取下一个入报文。
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
buffer 类型为&char，含义是存放报文的缓冲区的地址
length 类型为 int，含义是缓冲区的长度
flags 类型为 int，含义是控制位，它指明是否接受带外数据和是否预览报文
返回值：
recv 如果成功则返回报文中的字节数，如果发生错误则返回 –1 。一旦出错，全局变
量 errno 中含有如下值之一：
EBADF  错误原因是第一个参数没有指定合法的描述符
ENOTSOCK  错误原因是第一个参数不是一个套接字描述符
EWOULDBLOCK  错误原因是套接字没有数据，但是它已经被指定为非阻塞 I/O
EINTR  错误原因是在读操作时被信号所中断
EFAULT  错误原因是参数 buffer 不正确
recvfrom 系统调用
用法：
retcode = recvfrom ( socket, buffer, length, flags, from , fromlen ) ;
说明：
recvfrom 从套接字获取下一个报文，并记录发送者的地址（允许调用者发送应答）。
- 312 -
Linux网络编程
参数：
socket 类型为 int，含义是一个由 socket 函数创建的套接字描述符
buffer 类型为&char，含义是存放报文的缓冲区地址
length 类型为 int，含义是缓冲区的长度
flags 类型为 int，含义是控制位，指明是否接受带外数据和是否预览报文
from 类型为&sockaddr，含义是存放发送方地址结构的地址
fromlen 类型为&int，含义是缓冲区的长度，返回时为发送者地址的大小
返回值：
recvfrom 如果成功便返回报文中的字节数，如果发生错误则返回 -1 。一旦出错，全
局变量 errno 将含有下面值之一：
EBADF  错误原因是第一个参数没有指定合法的描述符
ENOTSOCK  错误原因是第一个参数没有指定一个套接字描述符
EWOULDBLOCK  错误原因是套接字没有数据，但是已经被设定为非阻塞 I/O 。
EINTR  错误原因是在读操作进行时，被信号所中断
EFAULT  错误原因是参数 buffer 不正确。
recvmsg 系统调用
用法：
retcode = recvmsg ( socket, msg, flags ) ;