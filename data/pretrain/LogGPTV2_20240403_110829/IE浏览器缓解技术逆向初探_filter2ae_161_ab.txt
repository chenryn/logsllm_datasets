Visual Studio
2015及之后的版本支持CFG，相关编译参数为“/guard:cf”。编译时，编译器扫描所有的间接调用，在调用之前插入语句调用检查函数；且将潜在的间接调用的目的函数地址对齐到0x10字节，即函数地址值可整除16。
链接过程中，模块的PE文件节区结构体IMAGE_LOAD_CONFIG_DIRECTORY末尾添加有GuardFlags和GuardCFFunctionTable、GuardCFFunctionCount等项。其中GuardCFFunctionTable是一个表，反汇编时该函数被识别为___guard_fids_table，表中以RVA形式存放函数指针，用1字节存放SuppressedFlag，每个表项5字节，GuardCFFunctionCount表明该表的容量。
例如，某dll模块定义导出函数normal_function、sensitive_function，假设要求sensitive_function不能被间接调用，可在函数声明时添加“guard(suppress)”关键字。编译完成后，节区包含GuardCFFunctionTable如下：
    10001040    _sensitive_function
    01
    10001070    _normal_function
    00
    100010C0   @__security_check_cookie@4
    00
    100013F0    __DllMainCRTStartup@12
    00
对于_sensitive_function，SuppressedFlag值为1，标示为禁止间接调用；其他函数对应的SuppressedFlag值为0，标示为允许间接调用。该模块被加载进入进程内存空间后，进程bitmap添加对应的DWORD值来标示其中函数是否被允许间接调用。
程序执行过程中，exe和dll模块中的代码在执行间接调用前会先调用函数__gurad_check_icall，其中EDI寄存器存放实际调用的函数，调用之前拷贝到ECX寄存器传入__gurad_check_icall函数进行检查：
    mov      ecx, edi
    call        _guad_check_icall
    call        edi
另外，有些函数中的间接调用会检查栈顶在调用前后是否发生变化：
    mov      ebx, esp
    mov      ecx, edi
    call        _guad_check_icall
    call        edi
    cmp      ebx, esp
    jz          loc_continue:
    mov      ecx, 4
    int  29h
静态分析时，函数_guad_check_icall在文件中指向无意义的函数，只包含RETN指令以兼容老版本的操作系统；在被加载进入进程时该函数被动态插装，指向的汇编代码横跨连续的三个函数：
    ntdll!LdrpValidateUserCallTarget:
    mov      edx,dword ptr [ntdll!LdrSystemDllInitBlock+0x60]
    mov      eax,ecx
    shr        eax,8
    ntdll!LdrpValidateUserCallTargetBitMapCheck:
    mov      edx,dword ptr [edx+eax*4]
    mov      eax,ecx
    shr        eax,3
    test              cl,0Fh
    jne        ntdll!LdrpValidateUserCallTargetBitMapRet+0x1
    bt          edx,eax
    jae         ntdll!LdrpValidateUserCallTargetBitMapRet+0xa
    ntdll!LdrpValidateUserCallTargetBitMapRet:
    ret
    or          eax,1
    bt          edx,eax
    jae         ntdll!LdrpValidateUserCallTargetBitMapRet+0xa
    ret
    …
    ntdll!LdrpValidateUserCallTargetBitMapRet+0xa
    call        ntdll!RtlpHandleInvalidUserCallTarget
本段代码中ntdll!LdrSystemDllInitBlock+0x60存放bitmap基地址的指针，该bitmap在大多数情况下是只读的。bitmap中的每个DWORD标示0x00-0xff范围内256个地址的合法性。例如，对于10001070处的_normal_function函数，地址的LSB为0x70，bitmap有对应10001000~100010FF范围的DWORD，该DWORD第14位为1，标示该函数是合法的。
对于每个DWORD，偶数位可以为0或1，标示地址LSB为00、10、20、30、40、50、60、70、80、90、A0、B0、C0、D0、E0、F0处函数的合法性；每个DWORD的奇数位与地址LSB的其他值构成一对多的关系，一般均为0，表示这些地址全部非法。下表举例展示内存地址地址LSB与bitmap比特位的对应关系：
表1 内存地址LSB与bitmap比特位的对应关系示例
浏览器进程中间接调用的黑白名单由加载到进程的不同模块确定；在进程中也可以直接调用SetProcessValidCallTargets来修改黑白名单；进程代码如果调用Window
API GetProcAddress，该API也会修改bitmap以标示对应函数为合法。
CFG技术通过bitmap维护各模块中间接调用地址的黑白名单。由于进程bitmap不存在0x0c0c0c00~0x0c0c0cff所对应的DWORD值，CFG技术使堆喷射技术常用的0x0c0c0c0c等地址为非法地址；间接调用的目标为函数内部的情况也不合法，因为该地址不在bitmap标识的白名单之内。
CFG技术主要保护间接调用。它不是为控制流完整性而设计，也不能保证控制流完整性。通过上述分析可知该技术有如下缺陷：
不保护栈上的返回地址和其他函数指针(如SEH)。
不保护call [data]类型的函数调用。
CFG只提供粗粒度的保护。进程中的所有线程、模块查询同一个bitmap，因此共享相同的保护策略。由于兼容性原因，当不同模块的黑白名单冲突时只能将引起冲突的函数加入白名单。进程保护策略不好协调、不易确定，粗粒度的保护使CFG技术难以确保安全。
进程中，如果某dll模块未开启CFG，则该模块内的间接调用均不受保护；如果exe主模块未开启CFG，则保护完全失效。
CFG技术对于不改变程序执行流程的漏洞利用无保护作用。
目前CFG技术最严重的缺陷在于它提供保护的粗粒度。根据前述CFG的流程可以实现一个调试插件以枚举CFG检查为合法的目标函数【3】，发现IE
11浏览器进程中的合法目标函数不乏LoadLibrary、VirtualProtect、ProtectVirtualMemory等敏感API；另一方面存在2700个以上的DWORD的值为0xffffffff，意味着较老的模块中的任意地址均为合法地址；更重要的是，合法目标函数的总数在270000以上，理论上攻击者可以借鉴ROP技术实施代码重用攻击，将多个合法目标函数作为CFG
gadget进行组合以绕过该技术的保护。
## 四、小结
新型缓解技术在UAF漏洞利用过程的各个阶段进行拦截，迫使高级漏洞利用技术也有所演进。
## 五、参考资料
Abusing Silent mitigations. Abdul-Aziz Hariri, Simon Zuckerbraum, Brian Gorenc
Cross The Wall-Bypass All Modern Mitigations of Microsoft Edge. Henry Li
https://github.com/dwfault/CFGValidEnum