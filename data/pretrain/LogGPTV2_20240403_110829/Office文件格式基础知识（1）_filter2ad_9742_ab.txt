上面数据流中加粗字符前面的是OLE对象的头部，各字段解析内容如下：
数据 | 解释  
---|---  
01050000 | OLE Version  
02000000 | Format ID  
09000000 | ProgName Size（0x09）  
4f4c45324c696e6b00 | ProgName (OLE2Link)  
000a0000 | Data Size  
**d0cf11e0a1b11ae1** 后面的数据就是ObjectStream的内容了，解析的时候需要将ascii  
转换成hex才可以识别。
###  部分office文档混淆免杀技术
**RTF文档格式混淆**
**文件头混淆**
Rtf文档正常的文件头是 **{rtf1** ，但解析器只识别前四个字节{rt}，所以可以通过修改文件头达到样本混淆的效果。
{rt{{{{info{authorismail-
{rtÈÐÏ
**无用字符混淆**
经过测试，rtf空格回车和不可见字符不会被解析器识别，所以可以通过在rtf样本中嵌入0x20以下和0x7f以上的字符完成混淆效果。
{rtf1object112objocx9912{*objdata54541 {{0……
**混淆objdata头部**
前文已经介绍过，objdata是OLE嵌入对象数据控制字，实际测试、objdata可以写成: bjdata (空格为0x00)这种形式
**大小写混淆**
Rtf解析器对大小写不敏感，而OLE data部分常用小写形式，所以OLE标识符可以写成 **D0cf11e0a1b11ae1** 或任意大小写组合。
**多重嵌套**
rtf中的组可以多重嵌套，但解释器会跳过无用的组和控制符，所以可以通过嵌套无用组达到混淆效果。
{{}{}{}{}ddd{}ddd}
**Bin混淆**
rtf  
binxx关键字表示后面的xx个字符将以二进制方式读取，实质上就是一段二进制的OLESS头部的数据。所以可以通过构造binxx后面的若干字节达到混淆的效果。
**利用OLE特性的免杀技术**
目前发现了一些通过插入OLE2Link达到免杀效果的样本，位置比较灵活：
  1. 页脚文件中有一个OLE2Link对象
  1. rels文件中插入OLE2Link
目前github已有类似的[开源项目](https://github.com/ryhanson/phishery)，可以生成插入OLE2Link对象的样本文档。将link指向的地址设为bit.ly等类似提供短链接生成的服务，可以增强免杀效果。
**构造特殊的OLE对象**
前面已经说到，正常RTF文档插入OLE时，首先是控制字“objdata”，然后是OLE 版本（4字节）、格式ID（4 字节）、程序名长度（4
字节）、程序名和数据流大小（4字节），而后是Compound File Binary Format（复合二进制文档）的标识符，也就是
**d0cf11e0a1b11ae1**
，后面是数据流（ObjectStream）。但是可以通过构造特殊的OLE对象，通过去掉部分结构上的关键字达到绕过杀软查杀的效果。
（360威胁情报中心-利用Office公式编辑器特殊处理逻辑的免杀技术分析（CVE-2017-11882））
这是上面是一个seebug发现的样本。我们可以看到objdata后面的头部没有问题，但是没有D0 CF 11
E0的标识符。至于为什么能够成功打开公式编辑器并利用漏洞，下面解析一下。
（360威胁情报中心-利用Office公式编辑器特殊处理逻辑的免杀技术分析（CVE-2017-11882））
在这个过程当中需要注意的是，WINWORD.EXE在调用ole32!OleLoad函数前，会解析CFB文件将CFB文件的流对象写入剪切板并且将Embedded对象数据块（即d0cf11e0a1b11ae10对应的块）的Clsid值覆盖之前通过ProgID获取的Clsid，也就是最终以Embedded对象数据块内的clsid为准，
**所以CLSID仍然是Equation.3对应的CLSID** 。所以office 能够将公示对象传递给Equation处理。
Equation可以逻辑上可以处理Equation Native和Ole10Native两种流，在EquEdt32.exe打开Equation
Native流失败的情况，会处理OleNative流。
（360威胁情报中心-利用Office公式编辑器特殊处理逻辑的免杀技术分析（CVE-2017-11882））
然后就可以转入漏洞触发环节。根据上面的流的处理逻辑可以大致总结出免杀样本触发Equation漏洞的过程：
  1. 攻击者在objdata后附带非CFB格式的数据（只有公式数据的01Ole10Native流），迫使Office通过objdata  
header中的流名字（Equation.3）来查找对应处理的clsid，转入处理流程。
  2. 由于附带的是公式对象的01Ole10Native流（030101…部分数据），所以EquEdt32.exe进程打开Equation  
Native流失败，转而以objdata  
header中指定的数据长度直接处理01Ole10Native流，触发漏洞利用。
这种方式可以明显避过杀软对Equation.3 ProgID的检测，也可以通过去掉CFB标识符躲避杀软的检测。
## 深入理解OLE
为了深入理解OLE的原理，需要了解当含有OLE的文档打开时会有什么操作
####  关于OLE加载初始化
OLE加载初始化是依靠ole32!OleLoad() API完成的
这个API的主要步骤：
步骤1：调用CoCreateInstance来初始化OLE对象
这里的CLSID在rtf和openxml文档中获取的方法不同：
> rtf是通过OLE对象头部的 _progID_ 进行转化得来的
>
> openxml是通过OLESS格式的二进制数据中读入的
步骤2：调用IPersistStorage来初始化OLE对象的初始状态(数据)
MSDN对该函数的定义是：允许容器应用程序将存储对象传递给其中一个包含的对象，并加载和保存存储对象。  
此接口支持结构化存储模型，其中每个包含的对象都有自己的存储，嵌套在容器的存储中。
OLE初始化时，就是会用load()方法为OLE对象加载初始化的状态。
这里的Storage Data在rtf和openxml文档中获取的方法不同：
Rtf是OLE1 NativeData中获得的，
Openxml格式的Storage Data在OleObject.bin文件中的Contents节中获得。
###  关于OLE Verb动作
关于OLE Verb动作
OLE  
Verb动作本质上是依靠调用IOleObject::DoVerb方法完成的。MSDN对该方法的定义如下：
这里需要注意的是第一个参数，iVerb。这个参数的MSDN定义是：IOleObject
::EnumVerbs返回的OLEVERB结构中的verb动作的编号。
###  利用OLE可达的攻击面
**IPersistStorage::Load**
通过构造伪造的Storage数据，可能会在load数据时造成内存破坏。多数已发现的OLE漏洞都是利用IPersistStorage::Load方法。
**CVE-2012-0158**
调试过程：
Windbg加载winword打开poc.doc，访问违例，EIP指向0x41414141，查看函数调用栈发现没有任何内容。利用Immunity进行调试，查看栈的内容是这样的。
从栈结构看，0x275c8a0a很可能是崩溃函数的返回地址。
IDA查看静态代码是这样的。
可以看到sub_275c876d是一个memcpy的代码，在这个函数里，两次完成memcpy，第一次是copy  
一个0xc字节的数据段，并判断dwBytes也就是第一次copy的最后四个字节是否大于等于8，如果条件成立则第二次复制。这里面有一个问题，sub_275c89c7只分配了0x14字节的栈空间，第一次copy利用了0xc字节空间，后面只有0x8字节空间可以利用，而第二次复制的数据大小是受第一次复制结构体的最后一个字节的成员控制的，如果它大于8，那么复制将会破坏sub_275c89c7的栈空间，造成栈溢出。事实上调试过程中也可以看到，函数处理数据时首先会匹配0x6A626F43地址中的内容。即验证读入的是否为Cobj对象的数据。而CVE-2012-0158溢出文档中查找Cobj对象可以看一下，Cobj对应的hex流为’
**436f626a** ‘
Cobj对象的长度为0x8282，就一定会溢出的了。研究人员分析，这个漏洞本质上就发生在IPersistStorage::Load这个方法当中。
**IOleObject::DoVerb**
**这个攻击面主要代表是沙虫漏洞（CVE-2014-4114），如有必要的话会在后续中给出调试过程的信息**
**CLSID相关联的DLL加载**
注册表项HKEY_CLASSES_ROOTCLSID中存放着dll相关的CLSID，前面OLE初始化的内容已经说过，OLE对象由CLSID指定，CLSID在rtf和openxml文档中都可以被获取，也就是说可以
**由攻击者自由配置。** 这样就会导致很多后果：
  1. 可以在OLE容器中配置没有ALSR的dll，绕过ALSR（比如mscormmc.dll）
  2. 内存破坏，通过加载一个“未准备好的”dll，可以破坏内存（CVE-2015-1770）
  3. Dll劫持，可以通过控制工作目录去加载想要执行的dll（CVE-2015-2369）
## Office文档xml解析类的攻击面
Msxml库是office负责解析xml数据的动态链接库，漏洞通常发生在异构的标签数据，有的是因为标签不正确闭合，有的是通过精心构造数据混淆数据类型，如有必要，该部分内容将在后续中分享。
## 调试office漏洞的部分工具
  1. Windbg+符号文件
  2. IDA pro + bindiff工具
  3. Immunity debugger（崩溃的时候方便查看栈结构）
  4. Github oletools项目
  5. Offvis工具
  6. Olefileview工具
  7. 010 editor（支持ole格式）
  8. Msdn
## 部分参考链接