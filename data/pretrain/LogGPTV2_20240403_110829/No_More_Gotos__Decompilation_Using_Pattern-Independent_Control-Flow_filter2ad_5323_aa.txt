title:No More Gotos: Decompilation Using Pattern-Independent Control-Flow
Structuring and Semantic-Preserving Transformations
author:Khaled Yakdan and
Sebastian Eschweiler and
Elmar Gerhards-Padilla and
Matthew Smith
No More Gotos: Decompilation Using Pattern-Independent Control-Flow Structuring
and Semantics-Preserving Transformations
Khaled Yakdan∗, Sebastian Eschweiler†, Elmar Gerhards-Padilla†, Matthew Smith∗
∗University of Bonn, Germany
{yakdan, smith}@cs.uni-bonn.de
†Fraunhofer FKIE, Germany
{sebastian.eschweiler, elmar.gerhards-padilla}@fkie.fraunhofer.de
Abstract—Decompilation is important for many security appli-
cations; it facilitates the tedious task of manual malware reverse
engineering and enables the use of source-based security tools on
binary code. This includes tools to ﬁnd vulnerabilities, discover
bugs, and perform taint tracking. Recovering high-level control
constructs is essential for decompilation in order to produce
structured code that is suitable for human analysts and source-
based program analysis techniques. State-of-the-art decompilers
rely on structural analysis, a pattern-matching approach over
the control ﬂow graph,
to recover control constructs from
binary code. Whenever no match is found, they generate goto
statements and thus produce unstructured decompiled output.
Those statements are problematic because they make decompiled
code harder to understand and less suitable for program analysis.
the ﬁrst decompiler
to offer a goto-free output. DREAM uses a novel pattern-
independent control-ﬂow structuring algorithm that can recover
all control constructs in binary programs and produce structured
decompiled code without any goto statement. We also present
semantics-preserving transformations that can transform unstruc-
tured control ﬂow graphs into structured graphs. We demonstrate
the correctness of our algorithms and show that we outperform
both the leading industry and academic decompilers: Hex-Rays
and Phoenix. We use the GNU coreutils suite of utilities as a
benchmark. Apart from reducing the number of goto statements
to zero, DREAM also produced more compact code (less lines of
code) for 72.7% of decompiled functions compared to Hex-Rays
and 98.8% compared to Phoenix. We also present a comparison
of Hex-Rays and DREAM when decompiling three samples from
Cridex, ZeusP2P, and SpyEye malware families.
In this paper, we present DREAM,
I.
INTRODUCTION
Malicious software (malware) is one of the most serious
threats to the Internet security today. The level of sophistication
employed by current malware continues to evolve signiﬁcantly.
For example, modern botnets use advanced cryptography, com-
plex communication and protocols to make reverse engineering
harder. These security measures employed by malware authors
are seriously hampering the efforts by computer security
researchers and law enforcement [4, 32] to understand and
take down botnets and other types of malware. Developing
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23185
effective countermeasures and mitigation strategies requires a
thorough understanding of functionality and actions performed
by the malware. Although many automated malware analysis
techniques have been developed, security analysts often have
to resort to manual reverse engineering, which is difﬁcult and
time-consuming. Decompilers that can reliably generate high-
level code are very important tools in the ﬁght against malware:
they speed up the reverse engineering process by enabling
malware analysts to reason about the high-level form of code
instead of its low-level assembly form.
Decompilation is not only beneﬁcial for manual analy-
sis, but also enables the application of a wealth of source-
based security techniques in cases where only binary code
is available. This includes techniques to discover bugs [5],
apply taint tracking [10], or ﬁnd vulnerabilities such as RICH
[7], KINT [38], Chucky [42], Dowser [24], and the property
graph approach [41]. These techniques beneﬁt from the high-
level abstractions available in source code and therefore are
faster and more efﬁcient than their binary-based counterparts.
For example, the average runtime overhead for the source-
based taint tracking system developed by Chang et al. [10] is
0.65% for server programs and 12.93% for compute-bound
applications, whereas the overhead of Minemu, the fastest
binary-based taint tracker, is between 150% and 300% [6].
One of the essential steps in decompilation is control-ﬂow
structuring, which is a process that recovers the high-level
control constructs (e.g., if-then-else or while loops) from
the program’s control ﬂow graph (CFG) and thus plays a vital
role in creating code which is readable by humans. State-of-
the-art decompilers such as Hex-Rays [22] and Phoenix [33]
employ structural analysis [31, 34] (§II-A3) for this step. At a
high level, structural analysis is a pattern-matching approach
that tries to ﬁnd high-level control constructs by matching
regions in the CFG against a predeﬁned set of region schemas.
When no match is found, structural analysis must use goto
statements to encode the control ﬂow inside the region. As a
result, it is very common for the decompiled code to contain
many goto statements. For instance, the de facto industry stan-
dard decompiler Hex-Rays (version v2.0.0.140605) produces
1,571 goto statements for a peer-to-peer Zeus sample (MD5
hash 49305d949fd7a2ac778407ae42c4d2ba) that consists of
997 nontrivial functions (functions with more than one basic
block). The decompiled malware code consists of 49,514 lines
of code. Thus, on average it contains one goto statement for
each 32 lines of code. This high number of goto statements
makes the decompiled code less suitable for both manual
and automated program analyses. Structured code is easier to
understand [16] and helps scale program analysis [31]. The
1
2
3
4
5
6
7
8
int foo(){
int i = 0;
while(i < MAX){
print(i);
i = i + 1;
}
return i;
}
DECL
SEQ
WHILE
RETURN
int
=
<
SEQ
i
i
0
i
MAX
CALL
=
print
ARG
i
+
int i = 0
c: i < MAX
c
print(i)
i = i + 1
¬c
i
i
1
return i
(a) Exemplary code sample
(b) Abstract Syntax Tree
(c) Control Flow Graph
Fig. 1: Code representations.
collapsed to one node of corresponding type. If no match is
found, goto statements are inserted to represent the control
ﬂow. In the literature, acyclic and cyclic subgraphs for which
no match is found are called proper and improper intervals,
respectively. For instance, Figure 2 shows the progression of
structural analysis on a simple example from left to right.
In the initial (leftmost) graph nodes n1 and c2 match the
shape of a while loop. Therefore, the region is collapsed
into one node that is labeled as a while region. The new
node is then reduced with node c1 into an if-then region
and ﬁnally the resulting graph is reduced to a sequence. This
series of reductions are used to represent the control ﬂow as
if (c1){while (¬c2){n1}} ; n2
B. Problem Deﬁnition
Given a program P in CFG form, the problem of control-
ﬂow structuring is to recover high-level, structured control con-
structs such as loops, if-then and switch constructs from
the graph representation. An algorithm that solves the control-
ﬂow structuring problem is a program transformation function
fP that returns, for a program’s control ﬂow graph PCFG, a
semantically equivalent abstract syntax tree PAST. Whenever
fP cannot ﬁnd a high-level structured control construct it
will resort to using goto statements. In the context of this
paper, we denote code that does not use goto statements as
structured code. The control-ﬂow of P can be represented in
several ways, i.e., several correct ASTs may exist. In its general
form structural analysis can and usually does contain goto
statements to represent the control ﬂow. Our goal is to achieve
fully structured code, i.e., code without any goto. For this, we
restrict the solution space to structured solutions. That is, all
nodes n ∈ PAST representing control constructs must belong
to the set of structured constructs shown in Table I. The table
does not contain for loops since these are not needed at this
stage of the process. for loops are recovered during our post-
structuring optimization step to enhance readability (§VI).
C. Running Example
As an example illustrating a sample control ﬂow graph and
running throughout this paper, we consider the CFG shown in
Figure 3. In this graph, code nodes are denoted by ni where i
is an integer. Code nodes are represented in white. Condition
nodes are represented in blue and labeled with the condition
tested at that node. The example contains three regions that we
TABLE I: AST nodes that represent high-level control con-
structs
AST Node
Seq [ni]i∈1..k
Cond [c, nt, nf ]
Loop [τ, c, nb]
Switch [v,C, nd]
Description
Sequence of nodes [n1, . . . , nk] executed in
order. Sequences can also be represented as
Seq [n1, . . . , nk].
If construct with a condition c, a true branch nt
and a false branch nf . It may have only one
branch.
Loop of type τ ∈ {τwhile, τdowhile, τendless}
with continuation condition c and body nb.
Switch construct consisting of a variable v, a
list of cases C = [(V1, n1) , . . . , (Vk, nk)], and
a default node nd. Each case (Vi, ni) represents
a node ni that is executed when v ∈ Vi
use to illustrate different parts of our structuring algorithm. R1
represents a loop that contains a break statement resulting in
an exit from the middle of the loop to the successor node.
R2 is a proper interval (also called abnormal selection path).
In this region, the subgraph headed at b1 cannot be structured
as an if-then-else region due to an abnormal exit caused
by the edge (b2, n6). Similarly, the subgraph with the head
at b2 cannot be structured as if-then-else region due to
an abnormal entry caused by the edge (n4, n5). Due to this,
structural analysis represents at least one edge in this region
as a goto statement. The third region, R3, represents a loop
with an unstructured condition, i.e., it cannot be structured by
structural analysis. These three regions where chosen such that
the difﬁculty for traditional structuring algorithms increases
from R1 to R3. The right hand side of Figure 5 shows how
the structuring algorithm of Hex-Rays structures this CFG.
For comparison, the left hand side shows how the algorithms
developed over the course of this paper structure the CFG.
As can be seen for the three regions, the traditional approach
produces goto statements and thus impacts readability. Even
in this toy example a non-negligible amount of work needs to
be invested to extract the semantics of region R3. In contrast,
using our approach,
the entire region is represented by a
single while loop with a single clear and understandable
continuation condition.
3
is justiﬁed by the fact that any slice node n has a simple path
to the sink node. The path represented by dfsStack and the
currently explored edge e is simple if the target node of e is
not in dfsStack.
We extend Algorithm 1 to calculate the graph slice from
a given node to a set of sink nodes. For this purpose, we
ﬁrst create a virtual sink node nv, add edges from the sink
set to nv, compute SG (ns, nv), and ﬁnally remove nv and
its incoming edges. Figure 6 shows the computed graph slice
between nodes d1 and n9 in our running example. The slice
shows that n9 is reached from d1 if and only if the condition
(d1 ∧ ¬d3) ∨ (¬d1 ∧ ¬d2) is satisﬁed.
2) Deriving and Simplifying Conditions: After having com-
puted the slice SG (ns, ne), the reaching conditions for all slice
nodes can be computed by one traversal over the nodes in
their topological order. This guarantees that all predecessors
of a node n are handled before n. To compute the reaching
condition of node n, we need the reaching conditions of its
direct predecessors and the tags of incoming edges from these
nodes. Speciﬁcally, we compute the reaching conditions using
the formula:
(cid:95)
(cr (ns, v) ∧ τ (v, n))
cr (ns, n) =
v∈Preds(n)
where Preds (n) returns the immediate predecessors of node
n and τ (v, n) is the tag assigned to edge (v, n). Then, we
simplify the logical expressions.
B. Structuring Acyclic Regions
The key idea behind our algorithm is that any directed
acyclic graph has at least one topological ordering deﬁned by
its reverse postordering [14, p. 614]. That is, we can order
its nodes linearly such that for any directed edge (u, v), u
comes before v in the ordering. Our approach to structuring
acyclic region proceeds as follows. First, we compute reaching
conditions from the region header h to every node n in the
region. Next, we construct the initial AST as sequence of
code nodes in topological order associated with corresponding
reaching conditions,
it represents the control ﬂow in-
side the region as if (cr (h, n1)){n1} ; . . . ; if (cr (h, nk)){nk}.
the initial AST is not optimal. For example,
Obviously,
nodes with complementary conditions are represented as two
if-then constructs if (c){nt} if (¬c){nf} and not as one
if-then-else construct if (c){nt} else{nf}. Therefore, in
the second phase, we iteratively reﬁne the initial AST to ﬁnd
a concise high-level representation of control ﬂow inside the
region.
i.e.,
1) Abstract Syntax Tree Reﬁnement: We apply three re-
ﬁnement steps to AST sequence nodes. First, we check if
there exist subsets of nodes that can be represented using
if-then-else. We denote this step by condition-based re-
ﬁnement since it reasons about the logical expressions rep-
resenting nodes’ reaching conditions. Second, we search for
nodes that can be represented by switch constructs. Here,
we also look at
the checks (comparisons) represented by
each logical variable. Hence, we denote it by condition-aware
reﬁnement. Third, we additionally use the reachability relations
among nodes to represent them as cascading if-else con-
structs. The third step is called reachability-based reﬁnement.
6
At a high level, our reﬁnement steps iterate over the
children of each sequence node V and choose a subset Vc ∈ V
that satisﬁes a speciﬁc criterion. Then, we construct a new
compound AST node vc that represents control ﬂow inside
Vc and replaces it in a way that preserves the topological
order of V . That is, vc is placed after all nodes reaching it
and before all nodes reached from it. Note that we deﬁne
reachability between two AST nodes in terms of corresponding
basic blocks in the CFG, i.e., let u, v be two AST nodes, u
reaches v if u contains a basic block that reaches a basic block
contained in v.
Condition-based Reﬁnement. Here, we use the observation
that nodes belonging to the true branch of an if construct with
condition c is executed (reached) if and only if c is satisﬁed.
That is, the reaching condition of corresponding node(s) is an
AND expression of the form c∧ R. Similarly, nodes belonging
to the false branch have reaching conditions of the form ¬c∧R.
This reﬁnement step chooses a condition c and divides children
nodes into three groups:
true-branch candidates Vc, false-
branch candidates V¬c, and remaining nodes. If the true-branch
and false-branch candidates contain more than two nodes, i.e.,
|Vc| + |V¬c| ≥ 2, we create a condition node vc for c with
children {Vc, V¬c} whose conditions are replaced by terms R.
Obviously, the second term of logical AND expressions (c or
¬c) is implied by the conditional node.
The conditions that we use in this reﬁnement are chosen