available by extended page tables (EPT) in recent processors.
Likewise, Brookes et al. [12] also leverage Intel’s EPT to
provide an execute-only memory approach (called ExOShim),
but their approach does not provide the strong guarantees of
Crane et al. [16, 17].
Gionta et al. [21] also approach execute-only memory with
consideration for intermixed code and data. To do so, data
embedded in code sections is ﬁrst identiﬁed via binary analysis
(with symbol information), then split into separate code-only
and data-only memory pages. At runtime, instruction fetches
are directed to code-only pages, while reads are directed to
data-only pages. Conditional page direction is implemented
by loading split code and data translation look-aside buffers
(TLBs) with different page addresses. One drawback of this
approach is that all recent processors now make use of a
uniﬁed second-level TLB, rendering this approach incompati-
ble with modern hardware. Moreover, static code analysis on
binaries is a difﬁcult problem, leaving no other choice but
to rely on human intervention to separate code and data in
closed-source software. Thus, the security guarantees imbued
by that approach are only as reliable as the human in the loop.
Unlike the aforementioned works that require source code
[3, 16, 17], debug symbols, or human intervention [21], Backes
et al. [4] take a different approach that
is geared toward
protection for commercial off-the-shelf (COTS) binaries. A
software implementation of execute-only-memory is provided
wherein all code regions are initially made inaccessible, which
causes a kernel-mode memory fault when code is executed
or read. A process is terminated if it attempts to read from
a code section, but is made accessible for code execution.
The accessible code page is again made inaccessible when
a fault occurs on a different page. Unfortunately, rather than
confronting the challenges of intermixed code and data head-
on, the approach of Backes et al. [4] allows for a limited
number of pages to be accessible at any point in time, and
increments a counter for each ﬁrst instance of a code page read
while decrementing on execution. An application is terminated
if some undeﬁned threshold is reached, presumably indicating
that too many reads of bytes of code have occurred. Given the
lack of guidance on how an appropriate threshold can be set
in practice, the security guarantees afforded by XnR remain
unclear. Note that systems like XnR [4], which temporarily
allow an attacker to non-destructively read signiﬁcant parts
of code, can also be bypassed by simply gathering gadgets
from those temporarily available pages in a JIT-ROP fashion
by reading them directly.
B. Preventing Disclosed Code Execution
Heisenbyte [45] takes a radically different approach that
instead focuses on the concept of destructive reads, whereby
code is garbled after it is read. By taking advantage of exist-
ing virtualization support (i.e., EPT) and focusing solely on
thwarting the execution of disclosed code bytes, Heisenbyte’s
use of destructive code reads sidesteps the many problems that
arise due to incomplete disassembly in binaries, and thereby
affords protection of complex close-sourced COTS binaries.
Similarly, NEAR [48] implements a so-called no-execute-after-
read memory primitive using EPT on x86 Windows and other
hardware primitives on x86-64 and ARMv8 which, instead of
randomly garbling code, substitutes ﬁxed invalid instruction(s),
hence ensuring that subsequent execution always terminates
the application. NEAR also demonstrates how valid data within
code sections can be automatically and reliably relocated on-
load, without the use of source code or debug symbols, which
signiﬁcantly reduces average runtime overhead from 16.48%
in Heisenbyte to 5.72% in NEAR.
Both Tang et al. [45] and Werner et al. [48] provide an ex-
cellent overview of how destructive reads can be implemented
by leveraging EPT and conservatively relocating intermingled
code and data during an ofﬂine analysis phase. When a
956956
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
protected application loads, a duplicate copy of its executable
memory pages is maintained, and that copy is used in the
event of a memory read operation. To detect read operations
in an executable memory page, the page is originally marked
as execute-only. For the purposes of this paper, the techniques
used to separate code and data are not of particular importance,
but interested readers are referred to Tang et al. [45][§4] for
more details.
Code 
Disclosure
Read Exception
(via EPT)
Swap-in
Executable Page
Destroy Code
Execution of 
Destroyed Code
Runtime
Exception
Continue
Process
Terminate
Process
Swap-in
Data Page
Single-step
(Allow Read)
enforces
Fig. 3. Overview of destructive reads.
In our evaluations we use the NEAR implementation for the
32-bit Microsoft Windows platform1. We emphasize, however,
that the security implications outlined in this paper are equally
applicable to both approaches. The high-level overview is
shown in Figure 3. NEAR also leverages EPT for marking code
pages as execute-only for the sole purpose of intercepting the
disclosure of code. Similar to Heisenbyte, a kernel module is
used to hook the system page fault handler, identify newly
loaded code pages, and communicate with the hypervisor
module to mark those pages as execute-only. The act of
reading a byte of code results in an invalid opcode being
written to that location in memory, which would generate an
exception in the event that the previously disclosed code is
later executed. Further, we reiterate that ﬁne-grained ASLR is
a prerequisite for execute-only memory protections, as without
randomization there is no need for an adversary to dynamically
disclose code at runtime. To fulﬁll
this requirement, we
use the publicly available implementation of in-place code
randomization [35].
III. ASSUMPTIONS
As noted earlier, unlike the recent body of work on pre-
venting code disclosure attacks [3, 21, 16, 17, 18, 12], Tang
et al. [45] suggest a new defensive model wherein preventing
the execution of disclosed code is the ultimate goal. To
be able to achieve this goal for commodity software (i.e.,
without requiring access to source code), several important
assumptions underscore the design of destructive code reads.
Speciﬁcally, it is assumed that a suite of application defenses
are in place that prevent all control-ﬂow hijacking attacks,
with the exception of so-called just-in-time code reuse attacks
(JIT-ROP) [42]. Destructive reads, therefore, are the proposed
1The thin hypervisor implemented by Werner et al. [48] is available under
an open source license at github.com/uncseclab
solution to mitigating such attacks. Hence, in this paper, we
also assume that the following mitigations are in place:
• Non-Executable memory: The stack(s) and heap(s) of
the protected program are non-executable, thus preventing
an attacker from directly injecting new executable code
into data regions. Furthermore, all executable regions
(including those of shared libraries) are non-writable; thus
the modiﬁcation of existing code is not possible.
• Fine-grained randomization: Program and library code
regions are randomized using binary-compatible trans-
formations on the ordering of registers and instructions
within basic blocks. To achieve binary compatibility, we
assume the techniques of Pappas et al. [35] are employed,
as no other proposed approach meets these goals without
auxiliary information (i.e., source code or debug symbols)
for complex COTS software.
• JIT mitigations: Browser-speciﬁc defenses against JIT-
spraying instructions useful for code injection and code
reuse attacks are in use. For example, Internet Explorer
includes countermeasures that share commonalities with
Librando [25].
• Destructive Code Reads: We assume that the act of
reading any byte of code immediately precludes that
speciﬁc byte of code from being executed later.
The aforementioned assumptions are in accordance with those
of both the just-in-time code reuse paradigm given by Snow
et al. [42] and the destructive code read defense presented
by Tang et al. [45] and Werner et al. [48]. We remind the reader
that the fact that binary compatibility is required, means that
only in-place ﬁne-grained code diversiﬁcation can be assumed.
We elaborate on the reasons for that next.
A. Implications of Binary-compatible Fine-grained ASLR
Binary compatible ﬁne-grained ASLR transformations are
(thus far) only able to reliably achieve a subset of those
transformations possible in schemes that randomize code by
utilizing program source code (or debug symbols). The reason
for this disparity is that binary code analysis is a provably
undecidable problem [46]. Because of this fact, the use of
more aggressive ﬁne-grained randomization strategies, such
as randomizing the location of functions or basic blocks, or
randomly inserting inaccessible guard regions between pages
of code, remains a signiﬁcant challenge. Existing attempts in
doing so at the binary level, such as Binary Stirring [47], which
rearranges all basic blocks present in a code segment, rely on
fragile heuristics for the recovery of jump tables, computed
jump targets, callback routines, and other code intricacies
that complicate code disassembly. Indeed, Wartell et al. [47]
demonstrate the applicability of Binary Stirring using solely
main executables (not libraries) of simple utility programs.
Note that although binary metadata such as relocation in-
formation or export tables are leveraged by state-of-the-art
disassemblers to improve the coverage and accuracy of code
identiﬁcation and control ﬂow graph extraction, imprecisions
still exist due to the above code intricacies.
957957
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
Header
size
section 
pointers
oﬀ 
limits 
oﬀ 
limits 
oﬀ 
limits 
to disclose gadgets 
Backward scan 
and ﬁle header
Initial disclosure
(known oﬀset)
location
Forward scan 
to disclose gadgets
Fig. 4. In contrast to the original JIT-ROP attack [42], the absence of guard pages allows for linear scanning of memory, and the disclosure of any code that
is not within the program’s normal execution path (represented by the gray areas).
Instead, binary compatible ﬁne-grained ASLR schemes [35,
29] perform code transformations in-place, i.e., as in rearrang-
ing code within a basic block, without changing its location,
rather than globally moving large swaths of code, which
requires identifying and rewriting all code that interacts with
the moved sections; again, an undecidable problem [46].
Thus, one can conclude that a just-in-time code reuse attack
can take a simpler approach to identifying code pages than
that presented by Snow et al. [42]. In that work, the existence
of guard pages (i.e., randomly introduced in-accessible pages)
were dealt with by disassembling each known page of code
and only queuing new pages observed as instruction operands
in the ﬁrst page. Instead,
the adversary can
precompute the offset from the initially disclosed function
pointer to the beginning of the module that contains a func-
tion, as is routinely done by exploits in-the-wild as the ﬁrst
step in bypassing coarse-grained ASLR. Furthermore, even if
functions are randomized (which has not been shown to be
practical to date for complex COTS binaries), the adversary
could walk backwards in memory, page-by-page, until the ﬁrst
few bytes of the page match the binary-format header for the
target platform.
in our case,
Figure 4 illustrates these simpliﬁed strategies. In the module
depicted, the initially disclosed pointer remains at a ﬁxed offset
between randomizations with in-place randomization. Hence,
one either computes the offset of that initial pointer ofﬂine
prior to attack, or steps backwards carefully avoiding off-limits
pages at runtime while searching for the binary header. In face
of destructive code reads, the off-limits regions represent por-
tions of code that would be executed during normal program
operation, and hence we must avoid destroying that code.
Given that
the adversary now knows the base address
of a given module, one can parse the information in that
header to determine the module layout, including start and
end addresses, as well as the location of import tables. Thus,
one can use this information to directly disclose the entire
code region of a module, as well as obtain references to all
other modules referenced by that module. In short, binary
compatible ﬁne-grained ASLR provides the attacker with the
opportunity to acquire a superset of the gadgets obtained via
the so-called JIT-ROP attack [42]. However, up to this point,
destructive code reads still prevent the adversary from using
any discovered gadgets by destroying the code as it is read.
B. Adversarial Assumptions
Similar to Snow et al. [42] and Tang et al. [45], we assume
an adversary who can read and write arbitrary memory of the
vulnerable process. Additionally, we assume that the adversary
is capable of running scripted code within the limits of the
attacked application (e.g., JavaScript or ActionScript code) and
storing the gathered information either locally, e.g., in cookies
or in HTML5 Local Storage [1], or on a remote server.
At this point, it is prudent to note that the concept of
destructive reads only works in cases where the following
(implicit) assumptions hold:
• Code Persistence: Code may not be loaded and unloaded
by the adversary. This assumption guarantees that an
adversary may not restore destroyed code after learning
its layout.
• Code Singularity: The process may not contain any
duplicate code sections. This assumption guarantees that
an adversary may not infer any information about the
code in process memory by reading another existing copy
of that code.
• Code Dis-association: Any information discovered dur-
ing an attempted attack can not be relied upon in subse-
quent attacks. This assumption is needed to ensure that
an adversary cannot mount an incremental attack against
an application disclosing partial information and then
reusing it in the next stage of an attack.
Unfortunately, these assumptions are easily broken in prac-
tice, especially in scripting environments. In what follows,
we explore how breaking any of those implicit assumptions
results in the complete compromise of the security afforded
by destructive code reads, thereby allowing the attacker to re-
enable the use of just-in-time code reuse attacks.
IV. UNDERMINING DESTRUCTIVE READS
Next, we detail four distinct strategies to just-in-time dis-
close a usable code reuse payload in face of destructive code
reads. Each of these strategies breaks one of the three implicit
assumptions detailed in section §III-B to accomplish the stated