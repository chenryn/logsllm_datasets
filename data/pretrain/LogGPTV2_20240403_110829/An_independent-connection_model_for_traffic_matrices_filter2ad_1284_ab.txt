Certainly! Here is the optimized and improved version of your text:

---

### Model Formulation

For \( i, j = 1, \ldots, n \):

\[
X_{ij} = \frac{f A_i P_j + (1 - f) A_j P_i}{\sum_{i=1}^n P_i}
\]

The next aspect of the model to consider is the stability of parameters over time. In the most general case, all parameters may vary at each time step. We term this version of the model the time-varying IC model:

\[
X_{ij}(t) = \frac{f(t) A_i(t) P_j(t) + (1 - f(t)) A_j(t) P_i(t)}{\sum_{i=1}^n P_i(t)}
\]

for \( i, j = 1, \ldots, n \) and \( t = 1, \ldots, T \).

We also consider two other variants of the model that incorporate increasingly restrictive assumptions about the temporal stability of the parameters.

#### Stable-f IC Model

At high levels of aggregation, one might expect \( f \) to show stability over time. This assumption results in the stable-f IC model:

\[
X_{ij}(t) = \frac{f A_i(t) P_j(t) + (1 - f) A_j(t) P_i(t)}{\sum_{i=1}^n P_i(t)}
\]

for \( i, j = 1, \ldots, n \) and \( t = 1, \ldots, T \).

#### Stable-f P IC Model

Finally, we consider the case where connection preferences are also stable over time. This assumption may be justified if connection preferences reflect a relatively stable underlying 'popularity' of services available via each node. This assumption yields the stable-f P IC model:

\[
X_{ij}(t) = \frac{f A_i(t) P_j + (1 - f) A_j(t) P_i}{\sum_{i=1}^n P_i}
\]

for \( i, j = 1, \ldots, n \) and \( t = 1, \ldots, T \).

### Practical Considerations

There are several practical reasons for considering these different model variants.

#### Synthetic Traffic Matrix Construction

First, consider the problem of constructing synthetic traffic matrices (TMs). Using the gravity model, one must synthetically generate \( 2n \) values at each timestep \( t \), namely \( \{X_{i*}(t)\} \) and \( \{X_{*i}(t)\} \). The stable-f IC model requires the same number of input parameters at each timestep: \( \{A_i(t)\} \) and \( \{P_i(t)\} \), and hence presumably presents roughly the same level of modeling difficulty. However, the IC model can do significantly better: the stable-f P model requires only \( n \) inputs \( \{A_i(t)\} \) at each timestep.

#### Traffic Matrix Estimation

The second reason for considering different model variants relates to the TM estimation problem. These variants reflect different amounts of outside information that must be brought into the estimation process. When the stable-f P model is used for TM estimation, one assumes that the stable values of \( f \) and \( P \) have previously been measured; then only \( n \) inputs (namely \( \{A_i(t)\} \)) need to be estimated from data. In the case of the stable-f model, we assume that \( f \) has been measured previously and can be reused; here both \( \{A_i(t)\} \) and \( \{P_i(t)\} \) are estimated from data.

### Measurement Data

To explore the validity and utility of the IC model, we used three datasets:

#### Géant Data

Géant [1] is a network of 22 Points of Presence (PoPs) connecting research institutions and universities across continental Europe. The sampling rate is 1 packet out of every 1000. The methodology used to construct origin-destination (OD) flows from NetFlow data is detailed in [7]. We use a time bin size of 5 minutes to construct OD flows, giving us 2016 sample points for each week’s worth of data.

#### Totem Data

The publicly available Totem [14] dataset comes from the same Géant network. The dataset consists of 4 months of TMs, constructed from sampled NetFlow data using the method described in [14]. Our results for the Totem TM are very similar to those obtained with the Géant data and are often omitted due to lack of space. We present this data when illustrating multi-week long behavior.

#### Full Packet Header Traces from Abilene Backbone

We used two-hour contiguous bidirectional packet header traces collected at the Indianapolis router node (IPLS) in the Abilene network [2]. The links instrumented are the ones eastbound and westbound, towards Cleveland (CLEV) and Kansas City (KSCY).

### Model Evaluation

We now examine how well our model fits empirical datasets. We expect the time-varying model to fit the data best, followed by the stable-f model, with the poorest fit coming from the stable-f P model. This is based on the number of time-varying model parameters: \( 3n \) for the time-varying model, \( 2n \) for the stable-f model, and \( n \) for the stable-f P model. More precisely, if we are trying to fit a dataset of OD flows from a network with \( n \) nodes over \( t \) timesteps, the gravity model has \( 2nt - 1 \) degrees of freedom, the time-varying IC model has \( 3nt \) degrees of freedom, the stable-f model has \( 2nt + 1 \) degrees of freedom, and the stable-f P model has \( nt + n + 1 \) degrees of freedom.

To be most conservative in our conclusions, we focus on our weakest model, the stable-f P model. The metric we use for measuring the accuracy of model prediction is relative \( l_2 \) temporal error (as in [12]):

\[
\text{RelL2T}(t) = \sqrt{\frac{\sum_{i=1}^n \sum_{j=1}^n (X_{ij}(t) - \hat{X}_{ij}(t))^2}{\sum_{i=1}^n \sum_{j=1}^n X_{ij}(t)^2}}
\]

We estimate the values of \( f \), \( P_i \), and \( A_i(t) \) via optimization, using the following nonlinear program:

\[
\min_{f, P_i, A_i(t)} \sum_{t=1}^T \text{RelL2T}(t)
\]

where \( \hat{X}_{ij}(t) = f A_i(t) P_j + (1 - f) A_j(t) P_i \)

subject to:
- \( A_i(t) \geq 0 \) for all \( i, t \)
- \( P_i \geq 0 \) for all \( i \)
- \( \sum_{i} P_i = 1 \)

If we assume that errors have a Gaussian distribution, this is equivalent to a maximum-likelihood estimation of model parameters. We use the optimization toolbox provided by MATLAB [3] to find the solution numerically.

We fit both our model and the gravity model and compare their accuracy in Figure 2. We plot the improvement of the IC model over the gravity model using the RelL2T metric. The improvement typically lies between 18% to 24%. The absolute improvements lie between 0.10 to 0.12. It is both surprising and encouraging that our model can fit the data well with a single constant \( f \) for the entire network. This implies that our simpler IC models may be sufficient for the TM applications we consider.

### Characterizing \( f \)

Since the stable-f P model can indeed fit real traffic data quite well, we now examine which values for \( f \) are reasonable and whether such a parameter setting is stable over time. Ideally, to perform a thorough study of observed values of \( f \), one would need unsampled NetFlow traces or unsampled packet header traces of all traffic in the network. To the best of our knowledge, no such datasets exist. What we can do is measure \( f \) for two large OD flows in the Abilene network since in our packet trace data, the packets in the pairs (KSCY, IPLS) and (IPLS, KSCY) flow over the IPLS-KSCY link. Due to space limitations, we refer the reader to [5] for a complete description of our procedure for measuring \( f \).

In Figure 3, we plot our measured values of \( f \). We draw three conclusions:
1. \( f \) lies consistently in the range 0.2 to 0.3.
2. \( f \) is quite stable across time.
3. The values of \( f \) for (CLEV, IPLS) and (IPLS, CLEV) are similar, providing preliminary support for assuming spatial stability of \( f_{ij} \) over different (i, j) pairs.

We extracted the values of \( f \) computed from our fitting procedure in Section 4. We found that over a seven-week period (Totem data), \( f \) did not vary outside the narrow range of [0.17, 0.21]. The stability of \( f \) is encouraging as it means that if \( f \) could be measured once in a while, the obtained value for \( f \) could subsequently be used in modeling tasks for possibly multiple weeks. We believe that the particular values for \( f \) we observe are reflective of the application mix in highly aggregated traffic. While applications like web browsing would have values of \( f \) lower than 0.2, other applications such as P2P could have higher \( f \) values.

### Characterizing Preferences

Using our fitted data, we observed the values for \( \{P_i\} \) over seven weeks in the Totem data. We make two observations from Figure 4 (the values of \( \{P_i\} \) for nodes \( i \) are in arbitrary order, and the \( \{P_i\} \) sum to 1):
1. Values of \( P_i \) for any given node \( i \) are remarkably stable over time, even over seven weeks. Combining this observation with the stable \( f \) behavior, lends support for the use of the stable-f P model.
2. The \( \{P_i\} \) values are highly variable across different nodes (with some nodes as much as ten times greater than the typical value). The high variability of \( \{P_i\} \) values prompts us to examine their distributional tail. We found that a long-tailed lognormal distribution does a better job in fitting the tail [5]. However, the distributional fits should not be relied on too heavily; we have far too few data points (22 or 23) to reliably choose a distributional model for this data.

### Characterizing Activity Levels

Finally, we examine the nature of the timeseries of activity levels, \( \{A_i(t)\} \), in our data. The variation in these values is the source of all time-variation in the stable-f P model. Intuitively, if \( \{A_i(t)\} \) represents the rate at which traffic is being 'initiated' at node \( i \), we expect to see familiar patterns of daily variation. In [5], we provide the details of our findings on activity levels.

---

This version is more structured, clear, and professional, making it easier to follow and understand.