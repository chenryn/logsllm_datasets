title:Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
author:Pinghai Yuan and
Qingkai Zeng and
Xuhua Ding
Hardware-Assisted Fine-Grained Code-Reuse
Attack Detection
Pinghai Yuan1,2(B), Qingkai Zeng1,2, and Xuhua Ding3
1 State Key Laboratory for Novel Software Technology,
Nanjing University, Nanjing, China
2 Department of Computer Science and Technology,
PI:EMAIL
Nanjing University, Nanjing, China
3 School of Information Systems, Singapore Management University,
PI:EMAIL
Singapore, Singapore
PI:EMAIL
Abstract. Code-reuse attacks have become the primary exploitation
technique for system compromise despite of the recently introduced Data
Execution Prevention technique in modern platforms. Diﬀerent from
code injection attacks, they result in unintended control-ﬂow transfer
to victim programs without adding malicious code. This paper proposes
a practical scheme named as CFIGuard to detect code-reuse attacks
on user space applications. CFIGuard traces every branch execution by
leveraging hardware features of commodity processors, and then vali-
dates the traces based on ﬁne-grained control ﬂow graphs. We have
implemented a prototype of CFIGuard on Linux and the experiments
show that it only incurs around 2.9 % runtime overhead for a set of typ-
ical server applications.
Keywords: Code-reuse attack · Control ﬂow integrity · Indirect branch
tracing
1 Introduction
There are abundant schemes focusing on software vulnerability mitigation. Data
Execution Prevention (DEP) [4,34], Stack Smashing Protector (SSP) [12] and
coarse-grained Address Space Layout Randomization (ASLR) [33] have been
widely adopted in commodity platforms. For instance, DEP marks a memory
page either non-executable or non-writable such that it can eﬀectively defend
against code injection attacks. However, DEP and the other two mechanisms
fall short of defending against advanced code-reuse attacks, such as Return-
oriented Programming (ROP) [30] and just-in-time ROP [32], which have been
used by hackers in real-life cyberspace attacks.
This situation has prompted active research on ﬁne-grained ASLR [15,18,
25,31,38] and Control Flow Integrity (CFI) [3] mechanisms to counter code-
reuse attacks. ASLR aims to hide the address space layout from the attacker in
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 66–85, 2015.
DOI: 10.1007/978-3-319-26362-5 4
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
67
a bid to hinder eﬀective construction of malicious code. However, its security-
by-obscurity approach cannot withstand sophisticated attacks that infers the
address space layout via various channels. CFI works by checking a program’s
execution ﬂow against predetermined Control-Flow Graphs (CFGs), thus pro-
vides strong protection by detecting control-ﬂow violation. Unfortunately, CFI
has not been widely adopted to protect applications in practice, mainly due to
its large overhead for code preprocessing and runtime checking. Moreover, CFI
lacks of code transparency in the sense that it demands modiﬁcation either on
the source code [2] or the binary code of the protected application [41,43]. This
hassle also hinders a wide adoption of CFI.
However, existing CFI works still face the security challenge in practice. For
instance, the inter-module transfers that span over two modules can hardly be
restricted without information extracted by a whole program analysis, which
in turn needs a tough engineer work. Furthermore, since many works enforce
context-free CFI with static CFGs, so they cannot prevent a backward-transfer
issued by a ret instruction back to a caller which is valid according to the CFGs
but does not issue current function invocation. Their security guarantees become
worse as many recent works enforce coarse-grained CFI [9,13,16,29]. The deadly
point of most CFI works is that they are crippled and made ineﬀective once
control-ﬂow has already been diverted due to their imperfect protection.
This paper presents CFIGuard, a fully transparent code-reuse attack detec-
tion engine for user applications. Our approach is to monitor every executed
indirect branch during the lifetime of a process, and to identify abnormal control
transfers diverting from the control ﬂow graph. The core of CFIGuard is a novel
combination of two hardware features widely available on modern x86 processors:
Last Branch Recording (LBR) and Performance Monitor Unit (PMU). We name
the technique as LBR + PMU whereby LBR records the jump-from and jump-to
addresses of every branch instruction execution and PMU sets oﬀ a non-maskable
interrupt triggered by a programmable counter. The interrupt handler then val-
idates the records by consulting the corresponding ﬁne-grained CFGs. Relying
mainly on hardware for instruction-level monitoring allows for completely trans-
parent operation, without the hassle of modifying the protected applications.
Applying ﬁne-grained CFGs for attack detection guarantees a strong security
protection. The runtime overhead of LBR + PMU is lowered by ﬁltering out
direct transfer whose executions dominate the total of all branch executions.
We have built a prototype of CFIGuard on Linux. It can selectively protect
any Linux application as long as its CFG is in place. Besides detecting tradi-
tional ROP attacks, CFIGuard can counter stop JOP [7], the recent just-in-time
ROP [32] and blind-ROP [6] attacks. To measure the eﬀectiveness of CFIGuard,
we have conducted a variety of security tests using the RIPE benchmark [39],
including stack/heap overﬂow vulnerabilities coupled with shell code injection
or ROP attacks. Our evaluation results indicate that CFIGuard can precisely
catch the attacks on the spot. Performance evaluation results show that CFI-
Guard introduces negligible runtime overhead for most applications.
68
P. Yuan et al.
The main contributions of our work are:
– The key observation that control ﬂow hijacking on security breaches can be
precisely captured by using the LBR mechanism coupling with PMU.
– The design of CFIGuard which is the ﬁrst system to detect code-reuse attacks
and enforce ﬁne-grained CFI protection with hardware support.
– A prototype implementation of CFIGuard on Linux with security and perfor-
mance evaluations to demonstrate its eﬀectiveness and eﬃciency.
2 Background: Hardware Features
Recent years have seen several proposed schemes utilizing hardware features
on modern x86 processors to mitigate control-ﬂow hijacking attacks. Among
them, CFIMon [40] uses Branch Trace Store (BTS) [19] while kBouncer [26] and
ROPecker [11] rely on LBR [19]. Besides using debug facilities, CFIGuard also
makes use of PMU [19]. Note that on multicore systems, each core has its own
BTS, LBR and PMU facilities. We now brieﬂy explain these three hardware
features.
Branch Trace Store. BTS records all branches execution in the user/kernel
space into a memory buﬀer. It can be conﬁgured to halt the monitored program
when the recording buﬀer is full and to resume as well. However, since BTS
does not support branch type ﬁltering, all types of jumps, calls and returns are
recorded without distinction. Since validating direct branches on a platform with
DEP protection is an action of gilding the lily, using BTS alone may introduce
unnecessary false positive to security systems such as CFIMon [40].
Last Branch Recording. Like BTS, LBR also records both source and des-
tination addresses of each branch execution. However, LBR stores the traces in
a set of Model-Speciﬁc Registers (MSRs) in a round-robin fashion. The current
design of LBR feature does not generate interrupt when the LBR buﬀer is full.
As a result, the oldest records are ﬂushed away with upcoming ones.
To monitor a user space code execution, kBouncer [26] and ROPecker [11]
have deliberately to hook into system calls or use a sliding window in order to
trigger page faults. Even so, LBR automatically ﬂushes away most of the records
and these approaches can only check a small portion of branch executions. The
advantages of LBR over BTS are that (i) incurs negligible overhead for recording
the branch traces, and (ii) supports a ﬁltering mechanism based on combination
of Code Privilege Level (CPL) and branch instruction types.
Performance Monitoring Unit. PMU is a performance measuring and count-
ing unit provided by most modern x86 processors. PMU can work in interrupt-
based mode, in which a counter called PMC increases for each occurrence of the
monitored event and a non-maskable interrupt is thrown out whenever PMC
overﬂows. PMU can monitor a wide range of events including cache-missing,
branch mis-predictions, and even the execution of certain types of branches.
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
69
3 Practical Indirect Branch Tracing for Code-Reuse
Attack Detection
The proposed approach uses runtime process monitoring to identify the execution
of code that exhibits code-reuse behavior. A code-reuse attack, such as an ROP
attack, consists of several instruction sequences called gadgets scattering among
code segments of the victim program. A gadget always ends with an indirect
branch instruction that transfers control to the subsequent gadget whose address
is speciﬁed in the injected malicious “payload” prepared by the attacker.
In code-reuse attacks, the branch instruction at the end of a gadget is either
an unintended instruction (a.k.a. truncated instruction) or jumps to an unin-
tended target. The former refers to an instruction code beginning at the mid-
dle of a valid instruction generated by the compiler, which is possible because
instructions on x86 platforms are of variable lengths and not aligned. An unin-
tended target is an instruction address where the current branch is not expected
to jump to according to the CFG. By recording both jump-from and jump-to
addresses of every indirect branch execution and then validating each record
with a ﬁne-grained CFG, CFIGuard can detect a code-reuse attack before its
code completes a malicious operation.
In this section, we discuss in detail how CFIGuard combines Last Branch
Recording and Performance Monitoring Unit to record every indirect branch
execution. Then we describe how CFIGuard uses this information to detect code-
reuse attacks.
3.1 Branch Tracing vs Other Approaches
The targets of direct branches are hard-coded in the code segments. With DEP
[4,34] protection, they are free from being tempered with. On the contrary, indi-
rect branches are vulnerable to control-ﬂow hijacking as the memory regions stor-
ing their target addresses, such as the stack and the heap, are always writable.
Therefore, as in previous schemes, our work exclusively focuses on protecting
the execution of indirect call, indirect jump and ret instructions. There are sev-
eral approaches that can be applied to protect their executions with diﬀerent
protection granularity, transparency level and deployment eﬀort.
Software Hardening Approach. This approach extends the compiler to insert
runtime checks in the executable at compile time [20,35]. They always provide
ﬁne-grained protection on the selected branch types because they can strictly
restrict the dynamically computed target of each branch with the information
extracted from the source code. However, this approach requires recompilation
of the target applications and the dependent libraries. An alternative is to have
binary instrumentation or rewriting. It is advantageous over the compiler based
method as it does not require the source code, but only debug symbols [2] or
relocation information [43]. Nonetheless, this beneﬁt is at the cost of weaker
security assurance as it is challenging to obtain a ﬁne-grained CFG [16] from the
binary.
70
P. Yuan et al.
Runtime Monitoring Approach. kBouncer [26], ROPecker [11] and CFIMon
[40] utilize hardware features provided by mainstream processors to protect
user space code. They record and check the jump-from and jump-to addresses
of each branch execution without instrumenting the binary. Nonetheless, they
apply heuristic rules to identify attacks, an approach which is unreliable as com-
pared with CFG [17]. In addition, due to the limitation of the LBR capability,
kBouncer [26] and ROPecker [11] can only check a small portion of branch exe-
cutions, thus their security protection is inadequate and vulnerable [9,16].
CFIGuard’s Approach. Similar to kBouncer and ROPecker, our system only
monitors the execution of indirect branches at runtime. The diﬀerence is that
we can trace every branch execution by coupling LBR with PMU. To compare
with the BTS-based CFIMon [40], CFIGuard achieves a better performance by
ﬁltering out direct branches at the hardware level. Moreover, CFIGuard provides
more reliable protection as it identiﬁes attacks by consulting ﬁne-grained CFGs.
3.2 Using LBR + PMU for Security Enhancement
In our system, PMU counts branch executions while LBR records of them.
LBR + PMU traces all indirect branch executions by turning on LBR’s ﬁlter-
ing mechanism and by conﬁguring PMU to monitor indirect branch executions
with a properly initialized PMC to ensure that an interrupt is triggered before
the LBR buﬀer is full.
LBR + PMU can be conﬁgured to generate an interrupt once every N branch
executions by initializing PMC with diﬀerent values. By setting N to 1, LBR +
PMU would interrupt the monitored program at every indirect branch execution
and thus we can detect the attack at the ﬁrst place. However, this setting has a
high performance toll. We observe that setting N to the LBR buﬀer size (16 for
the CPU model we used) can achieve the best performance while recording all
executions of user-level indirect branches.
Filtering Out Direct Branches. Both LBR and PMU support ﬁltering accord-
ing to CPL and branch types. LBR provides a dedicated control register
MSR LBR SELECT for ﬁltering; PMU can set a sub-event mask for this purpose.
Table 1 lists the available ﬁltering ﬂags provided by LBR + PMU. An indirect