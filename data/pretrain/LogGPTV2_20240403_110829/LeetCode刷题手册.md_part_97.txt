·这一题也可以用二分的思想来解答。把深度平分给A部分和 B 部分。
func maxDepthAfterSplitl(seq string) []int {
//解法二模拟
func maxDepthAfterSplit(seq string) []int {
//解法一二分思想
package leetcode
stack, top, res := make([lint, len(seq)), -l, make([]int, len(seq)
for i， r := range seq { 
return res
for i:= O; i O {
for count[b] > O {
-, v := range arrl {
count[i]--
res = append(res, i)
count[b] --
res = append(res, b)
-，b := range B {
---
## Page 1031
Example 3: 
 Example 2: 
Example 1: 
Recall that:
Given a rooted binary tree, return the lowest common ancestor of its deepest leaves.
题目
1123. Lowest Common Ancestor of Deepest Leaves
Output:[4]
Input: root = [1,2,3,4]
Input: root = [1,2,3]
● The depth of the root of the tree is O, and if the depth of a node is d, the depth of each of its
● The node of a binary tree is a leaf if and only if it has no children 
[1,2,3]".
The answer returned is a TreeNode object (not an array) with serialization "
The lowest common ancestor of these leaves is the node with value 1.
The deepest leaves are the nodes with values 2 and 3.
Explanation:
Output: [1,2,3] 
 that every node in S is in the subtree with root A.
The lowest common ancestor of a set S of nodes is the node A with the largest depth such 
 children is d+1. 
res = append(res, leftover...)
sort.Ints(leftover)
for v, count := range m {
for -, s := range arr2 {
return res
for i := O; i 0 { 
if dominoe[O] != dominoe[1] {
key, rotatedKey := dominoe[0]*10+dominoe[1], dominoe[1]*10+dominoe[0] 
 buckets [key]++
else { 
buckets [key]++ 
result += buckets[key]
if buckets[rotatedKey］ > O {
 result += buckets[rotatedkey]
，求出这组牌中相同牌的个数。牌相同的定义是：牌的2个数字相同(正序或
，比较大小即可，正序和逆序都
---
## Page 1035
代码
解题思路
提示：
给你整数 n，请返回第 n 个泰波那契数 Tn 的值。
++ L++=+ 0 =  T yr!m  anjen 
Initially, the first player names a value × with 1  2{ 
 trib, prev, prev2 = trib+prev+prev2, trib, prev
n--
---
## Page 1037
提示：
则返回 true；若无法获胜，就请返回 false。
。现在，假设你是“二号”玩家，根据所给出的输入，假如存在一个y值可以确保你赢得这场游戏，
合就会被跳过。若两个玩家都没有可以染色的节点时，游戏结束。着色节点最多的那位玩家获得胜利
的邻节点（即左右子节点、或父节点）进行染色。如果当前玩家无法找到这样的节点来染色时，他的回
之后两位玩家轮流进行操作，每一回合，玩家选择一个他之前涂好颜色的节点，将所选节点一个未着色
家为红色，
个节点，且n 为奇数，其中每个节点上的值从1 到n各不相同。游戏从“一号”玩家开始（“一号”玩
有两位极客玩家参与了一场“二叉树着色”的游戏。游戏中，给出二叉树的根节点root，树上总共有n
题目大意
Constraints:
●n为奇数。
·二叉树的根节点为 root，树上由 n 个节点，节点上的值从1 到n 各不相同。
●root is the root of a binary tree with n nodes and distinct node values from 1 to n.
● n is odd. 
Explanation: The second player can choose the node with value 2.
output: true
Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
1 <= × <= n <= 100
“一号”玩家从[1,n] 中取一个值×（1<=×<=n）；
“一号”玩家给值为×的节点染上红色，而“二号”玩家给值为y的节点染上蓝色。
“二
号”
“二号”玩家为蓝色），最开始时，
8
玩家也从[1,n] 中取-个值y（1<=y<=n）且y!=×。
6
乙
10
5
11
9
3
---
## Page 1038
代码
解题思路
·如图所示，当一号玩家选择了一个红色的结点，可能会将二叉树切割为 3个部分（连通分量）
·2个人参加二叉树着色游戏。二叉树节点数为奇数。1号玩家和2号玩家分别在二叉树上选项一个
·<=×<=n<=100
func btreeGamewinningMove(root *TreeNode, n int, x int) bool
up := n - left - right - 1 
dfsBtreeGamewinningMove(root, &left, &right, x)
var left, right int 
一个父结点连通分量的大小，可以用结点总数减去这两个连通分量大小，再减去红色所占结点，即
树 red_left 和右子树 red_right 的大小，那么我们就已经找到两个连通分量的大小了，最后
如何确定蓝色是否有必胜策略，就可以转换为，被红色点切割的三个连通分量中，是否存在一个连
最大的那个点。也就是示例图中的1号结点。如果我们选择了1号结点为蓝色结点，那么可以染
那么二号玩家怎样选择蓝色结点才是最优呢？答案是：选择离红色结点最近，且所属连通分量规模
论哪种情况都无关紧要，我们都可以当成3个部分来对待，例如一号玩家选择了一个叶结点，我
如果选择的是根结点，则可能是2个部分或1个部分，如果选择叶结点，则是1个部分。不过无
没法继续着色的时候游戏结束。着色多的人获胜。问二号玩家是否存在必胜策略？
左右子节点、或父节点）进行染色。当有人不能选点着色的时候，他的那个回合会被跳过。双方都
parent = n - red_left - red_right - 1。
通分量，大小大于所有结点数目的一半。统计三个连通分量大小的过程，可以用深度优先搜索 
成红色的点就只剩下6号点和7号点了，而蓝色可以把根结点和其左子树全部占据。
们也可以把叶结点的左右两个空指针看成大小为0的两个部分。
点着色。每一回合，玩家选择一个他之前涂好颜色的节点，将所选节点一个未着色的邻节点（即
（DFS）来实现。当遍历到某一结点，其结点值等于选定的红色结点时，我们统计这个结点的左子
8
4
6
2
0
5
二
3
---
## Page 1039
Constraints:
Example 4:
Example 3: 
Example 2:
Example 1: 
the day number of the year.
题目
1154. Day of the Year
●date.length == 10