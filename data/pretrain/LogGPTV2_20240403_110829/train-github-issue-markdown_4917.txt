# Bug report
**What is the current behavior?**  
I created `childCompiler` at `parentCompiler.hook.make` stage and I called
`runAsChild` at `parentCompiler.hook.emit` stage. `childCompilation.assets`
are nothing. I do not see any compilation.
Parent compilation is based on `web.webpack.config.js` whose target is `web`.
Child compilation is based on another `webworker.webpack.config.js` whose
target is `webworker`.
**If the current behavior is a bug, please provide the steps to reproduce.**
web.webpack.config.js
    "plugins": [
        new WorkboxPlugin(require("./webworker.webpack.config.js")(env, argv))
      ],
      "target": "web"
    ]
    const {DefinePlugin, WebpackOptionsApply, WebpackOptionsDefaulter} = require("webpack");
    const NAME = "webworker-injection";
    module.exports = class WorkboxPlugin {
      constructor(options) {
        this.options = new WebpackOptionsDefaulter().process(options);
      }
      apply(compiler) {
        const self = this;
        let childCompiler = null;
        debugHooks(compiler, NAME);
        compiler.hooks.emit.tapAsync(NAME, (compilation, callback) => {
          const stats = compilation.getStats().toJson();
          new DefinePlugin({
            "__PRECACHE_MANIFEST__": JSON.stringify({}),
          }).apply(childCompiler);
          childCompiler.runAsChild((err, entries, childCompilation) => {
            console.log(childCompilation.getStats().toJson());  {
          childCompiler = compilation.createChildCompiler("child", self.options.output);
          childCompiler.options = new WebpackOptionsApply().process(self.options, childCompiler);
          childCompiler.context = compiler.context;
          debugHooks(childCompiler, "child");
          callback();
        });
      }
    }
    const debugHooks = (target, from) => {
      for (let hook in target.hooks) {
        if (target.hooks[hook].constructor.name.startsWith("Async")) {
          target.hooks[hook].tapAsync(from, (...args) => {
            console.log(`${hook}.${from}`);
            args[args.length - 1]();
          });
        } else {
          target.hooks[hook].tap(from, () => {
            console.log(`${hook}.${from}`);
          });
        }
      }
    }
![image](https://user-
images.githubusercontent.com/5212215/59151491-f8236d00-89e8-11e9-9086-b9f26db20816.png)
**What is the expected behavior?**
    childCompiler.runAsChild((err, entries, childCompilation) => {
      console.log(childCompilation.getStats().toJson()); <<<<<<<<<< this should have something
      callback(err);
    });
**Other relevant information:**  
webpack version: 4.30  
Node.js version: 12.3.1  
Operating System: macOS 10.14.5  
Additional tools: