vm_size_t
calculate_hash_table_size(uint64_t msize, int pfPTEG, int hash_table_shift)
{
unsigned int nbits;
uint64_t tmemsize;
vm_size_t hash_table_size;
// Get first bit in upper half
nbits = cntlzw(((msize > 32);
// If upper half is empty, find bit in lower half
if (nbits == 32)
nbits = nbits + cntlzw((uint_t)((msize > nbits;
// Ensure 32-bit arithmetic doesn't overflow
if (tmemsize > 0x0000002000000000ULL)
tmemsize = 0x0000002000000000ULL;
// IBM-recommended hash table size (1 PTEG per 2 physical pages)
hash_table_size = (uint_t)(tmemsize >> (12 + 1)) * pfPTEG;
// Mac OS X uses half of the IBM-recommended size
hash_table_size >>= 1;
// Apply ht_shift, if necessary
if (hash_table_shift >= 0) // make size bigger
hash_table_size >= (-hash_table_shift);
// Ensure minimum size
if (hash_table_size \n", PROGNAME);
exit(1);
}
msize = ((uint64_t)(atoi(argv[1])) > 20);
exit(0);
}
$ cat cntlzw.s
; cntlzw.s
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 17 of 59
; count leading zeros in a 32-bit word
;
.text
.align 4
.globl _cntlzw
_cntlzw:
cntlzw r3,r3
blr
$ gcc -Wall -o hash_table_size hash_table_size.c cntlzw.s
$ ./hash_table_size 4096
33554432 bytes (32MB)
$ ./hash_table_size 2048
16777216 bytes (16MB)
pmap_bootstrap() calls hw_hash_init() [osfmk/ppc/hw_vm.s] to initialize the hash table and the PCA. It then calls hw_setup_trans()
[osfmk/ppc/hw_vm.s], which we came across earlier in this chapter. Recall that hw_setup_trans() only configures the hardware registers
required for address translationit does not actually start address translation.
pmap_bootstrap() calculates the amount of memory that needs to be designated as "allocated" (i.e., it cannot be marked free). This includes
memory for the initial context save areas, trace tables, physical entries (phys_entry_t), the kernel text, the logical pages (struct vm_page)
needed to map physical memory, and the address-mapping structures (struct vm_map_entry). It then allocates the initial context save areas by
calling savearea_init() [osfmk/ppc/savearea.c]. This allows the processor to take an interrupt.
Save Areas
Save areas are used to store process control blocks (PCBs). Depending on its type, a save area can contain a general processor
context, a floating-point context, a vector context, and so on. Various save area structures are declared in
osfmk/ppc/savearea.h. A save area never spans a page boundary. Moreover, besides referring to a save area by its virtual
address, the kernel may also reference it by its physical address, such as from within an interrupt vector, where exceptions must
not occur. The kernel maintains two global save area free lists: the save area free pool and the save area free list. There is one
local list for each processor.
pmap_bootstrap() initializes the mapping tables by calling mapping_init() [osfmk/ppc/mappings.c]. It then calls pmap_map()
[osfmk/ppc/pmap.c] to map memory for page tables in the kernel's map. The page tables are mapped V=Rthat is, with virtual address being
equal to the real address. On 64-bit machines, pmap_bootstrap() calls pmap_map_physical() [osfmk/ppc/pmap.c] to block-map physical
memory regionsin units of up to 256MBinto the kernel's address map. Physical memory is mapped at virtual addresses starting from
PHYS_MEM_WINDOW_VADDR, which is defined to be 0x100000000ULL (4GB) in osfmk/ppc/pmap.h. Moreover, in this physical memory window,
an I/O hole of size IO_MEM_WINDOW_SIZE (defined to be 2GB in osfmk/ppc/pmap.h) is mapped at an offset IO_MEM_WINDOW_VADDR (defined to
be 2GB in osfmk/ppc/pmap.h). The pmap_map_iohole() [osfmk/ppc/pmap.c] function is called on a 64-bit machine to map the I/O hole.
Finally, pmap_bootstrap() sets the next available page pointer (first_avail) and the first free virtual address pointer (first_free_virt).
The rest of the memory is marked free and is added to the free regions, from where it can be allocated by pmap_steal_memory()
[osfmk/vm/vm_resident.c].
ppc_vm_init() now calls pmap_map() to map (again, V=R) exception vectors in the kernel's address map, starting from the address
exception_entry through the address exception_endboth addresses are defined in osfmk/ppc/lowmem_vectors.s. Other pmap_map() calls
that are made include those for the kernel's text (__TEXT) and data (__DATA) segments. The __KLD and __LINKEDIT segments are mapped
(wired) through pmap_enter() [osfmk/ppc/pmap.c], page by page. These segments are unloaded by the I/O Kit in their entirety, to reclaim
that memory, after booting completes.
ppc_vm_init() next calls MapUserMemoryWindowInit() [osfmk/ppc/pmap.c] to initialize a mechanism the kernel uses for mapping portions
of user-space memory into the kernel. The copyin() and copyout() functions, both of which are implemented in osfmk/ppc/movc.s,
primarily use this facility by calling MapUserMemoryWindow() [osfmk/ppc/pmap.c], which maps a user address range into a predefined kernel
range. The range is 512MB in size and starts at USER_MEM_WINDOW_VADDR, which is defined to be 0xE0000000ULL (3.5GB) in
osfmk/ppc/pmap.h.
5.3.2.3. Starting Address-Translation
Now that the memory management hardware has been configured and virtual memory subsystem data structures have been allocated and
initialized, ppc_vm_init() calls hw_start_trans() [osfmk/ppc/hw_vm.s] to start address translation. Note that this is the first time in the
boot process that address translation is enabled.
5.3.3. After Virtual Memory
ppc_init() makes a call to PE_init_platform(), but with the vm_initialized Boolean argument set to trUE (unlike the earlier call made
by ppc_init()). As a result, PE_init_platform() calls pe_init_debug() [pexpert/gen/pe_gen.c], which copies the debug flags, if any,
from the boot arguments to the kernel variable DEBUGFlag.
printf_init() [osfmk/kern/printf.c] initializes locks used by the printf() and sprintf() kernel functions. It also calls bsd_log_init
() [bsd/kern/subr_log.c] to initialize a message buffer for kernel logging. The buffer structure is declared in bsd/sys/msgbuf.h.
// bsd/sys/msgbuf.h
#define MSG_BSIZE (4096 - 3 * sizeof(long))
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 18 of 59
struct msgbuf {
#define MSG_MAGIC 0x063061
long msg_magic;
long msg_bufx; // write pointer
long msg_bufr; // read pointer
char msg_bufc[MSG_BSIZE]; // buffer
};
#ifdef KERNEL
extern struct msgbuf *msgbufp;
...
Since logs may be written at interrupt level, it is possible for a log manipulation to affect another processor at interrupt level. Therefore,
printf_init() also initializes a log spinlock to serialize access to log buffers.
panic_init() [osfmk/kern/debug.c] initializes a lock used to serialize modifications by multiple processors to the global panic string.
printf() and panic() are required if a debugger needs to run.
5.3.3.1. Console Initialization
PE_init_kprintf() [pexpert/ppc/pe_kprintf.c] determines which console character output method to use. It checks the /options node in
the device tree for the presence of input-device and output-device properties. If either property's value is a string of the format scca:x,
where x is a number with six or fewer digits, PE_init_kprintf() attempts to use a serial port, with x being the baud rate. However, if the
serialbaud boot argument is present, its value is used as the baud rate instead. PE_init_kprintf() then attempts to find an onboard serial
port.
Figure 510 shows an excerpt from kprintf() initialization.
Figure 510. Initialization of the kprintf() function
// pexpert/ppc/pe_kprintf.c
void serial_putc(char c);
void (* PE_kputc)(char c) = 0;
...
vm_offset_t scc = 0;
void
PE_init_kprintf(boolean_t vm_initialized)
{
...
// See if "/options" has "input-device" or "output-device"
...
if ((scc = PE_find_scc())) { // Can we find a serial port?
scc = io_map_spec(scc, 0x1000); // Map the serial port
initialize_serial((void *)scc, gPESerialBaud); // Start serial driver
PE_kputc = serial_putc;
simple_lock_init(&kprintf_lock, 0);
} else
PE_kputc = cnputc;
...
}
PE_find_scc() [pexpert/ppc/pe_identify_machine.c] looks for a serial port[10] in the device tree. If one is found, PE_find_scc() returns
the physical I/O address of the port, which is then passed to io_map_spec() [osfmk/ppc/io_map.c] to be mapped into the kernel's virtual
address space. Since virtual memory is enabled at this point, io_map_spec() calls io_map() [osfmk/ppc/io_map.c] to allocate pageable
kernel memory in which the desired mapping is created. initialize_serial() [osfmk/ppc/serial.c] configures the serial hardware by
performing I/O to the appropriate registers. Finally, PE_init_kprintf() sets the PE_kputc function pointer to serial_putc()
[osfmk/ppc/ke_printf.c], which in turn calls scc_putc() [osfmk/ppc/serial_io.c] to output a character to a serial line.
[10] A legacy serial port is named escc-legacy, whereas a new-style serial port is named escc in the device tree.
If no serial ports could be found, PE_init_kprintf() sets PE_kprintf to cnputc() [osfmk/console/ppc/serial_console.c], which calls
the putc member of the appropriate entry[11] of the cons_ops structure to perform console output.
[11] Depending on whether the serial console or the graphics console is the default, the appropriate entry is set to SCC_CONS_OPS
or VC_CONS_OPS, respectively, at compile time.
// osfmk/console/ppc/serial_console.c
#define OPS(putc, getc, nosplputc, nosplgetc) putc, getc
const struct console_ops {
int (* putc)(int, int, int);
int (* getc)(int, int, boolean_t, boolean_t);
} cons_ops[] = {
#define SCC_CONS_OPS 0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 19 of 59
{ OPS(scc_putc, scc_getc, no_spl_scputc, no_spl_scgetc) },
#define VC_CONS_OPS 1
{ OPS(vcputc, vcgetc, no_spl_vcputc, no_spl_vcgetc) },
};
#define NCONSOPS (sizeof cons_ops / sizeof cons_ops[0])
osfmk/console/ppc/serial_console.c contains a console operations table with entries for both a serial console and a video console.
vcputc() [osfmk/console/video_console.c] outputs to the graphical console by drawing characters directly to the framebuffer.
ppc_vm_init() now checks whether a serial console was requested at boot time, and if so, it calls switch_to_serial_console()
[osfmk/console/ppc/serial_console.c] to set the SCC_CONS_OPS entry of console_ops as the default for console output.
ppc_vm_init() calls PE_create_console() [pexpert/ppc/pe_init.c] to create either the graphical or the textual console, depending on the
type of video set in the PE_state.video.v_display field, which was initialized earlier by PE_init_platform().
// pexpert/ppc/pe_init.c
void
PE_init_platform(boolean_t vm_initialized, void *_args)
{
...
boot_args *args = (boot_args *)_args;
if (PE_state.initialized == FALSE) {
PE_state.initialized = TRUE;
...
PE_state.video.v_display = args->Video.v_display;
...
}
...
}
...
void
PE_create_console(void)
{
if (PE_state.video.v_display)
PE_initialize_console(&PE_state.video, kPEGraphicsMode);
else
PE_initialize_console(&PE_state.video, kPETextMode);
}
PE_initialize_console() [pexpert/ppc/pe_init.c] supports disabling the screen (switching to the serial console), enabling the screen
(switching to the "last" console), or simply initializing the screen. All three operations involve calling initialize_screen()
[osfmk/console/video_console.c], which is responsible for retrieving the graphical framebuffer address.
osfmk/console/video_console.c also implements functions used while displaying boot progress during a graphical boot.
ppc_vm_init() finally calls PE_init_printf() [pexpert/gen/pe_gen.c].
After ppc_vm_init() returns, ppc_init() processes the wcte and mcksoft boot arguments (see Table 412) on 64-bit hardware.
5.3.3.2. Preparing for the Bootstrapping of Kernel Subsystems
Finally, ppc_init() calls machine_startup() [osfmk/ppc/model_dep.c], which never returns.
machine_startup() processes several boot arguments. In particular, it checks whether the kernel must halt in the debugger. It initializes locks
used by the debugger (debugger_lock) and the backtrace print mechanism (pbtlock). debugger_lock is used to ensure that there is only one
processor in the debugger at a time. pbtlock is used by print_backtrace() [osfmk/ppc/model_dep.c] to ensure that only one backtrace can
occur at a time. If the built-in kernel debuggerKDBhas been compiled into the kernel, machine_startup() calls ddb_init()
[osfmk/ddb/db_sym.c] to initialize KDB. Moreover, if the kernel has been instructed to halt in KDB, machine_startup() calls Debugger()
[osfmk/ppc/model_dep.c] to enter the debugger.
// osfmk/ppc/model_dep.c
#define TRAP_DEBUGGER __asm__ volatile("tw 4,r3,r3");
...
void
machine_startup(boot_args *args)
{
...
#if MACH_KDB
...
ddb_init();
if (boot_arg & DDB_KDB)
current_debugger = KDB_CUR_DB;
if (halt_in_debugger && (current_debugger == KDB_CUR_DB)) {
Debugger("inline call to debugger(machine_startup)");
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 20 of 59
...
}
...
}
...
void
Debugger(const char *message)
{
...
if ((current_debugger != NO_CUR_DB)) { // debugger configured
printf("Debugger(%s)\n", message);
TRAP_DEBUGGER; // enter the debugger
splx(spl);
return;
}
...
}
machine_startup() calls machine_conf() [osfmk/ppc/model_dep.c], which manipulates Mach's machine_info structure
[osfmk/mach/machine.h]. The host_info() Mach call[12] retrieves information from this structure. Note that the memory_size field is pinned
to 2GB on machines with more than 2GB of physical memory.
[12] We will see an example of using this call in Chapter 6.
// osfmk/mach/machine.h
struct machine_info {
integer_t major_version; // kernel major version ID
integer_t minor_version; // kernel minor version ID
integer_t max_cpus; // maximum number of CPUs possible
integer_t avail_cpus; // number of CPUs now available
uint32_t memory_size; // memory size in bytes, capped at 2GB
uint64_t max_mem; // actual physical memory size
integer_t physical_cpu; // number of physical CPUs now available
integer_t physical_cpu_max; // maximum number of physical CPUs possible
integer_t logical_cpu; // number of logical CPUs now available
integer_t logical_cpu_max; // maximum number of logical CPUs possible
};
typedef struct machine_info *machine_info_t;
typedef struct machine_info machine_info_data_t;
extern struct machine_info machine_info;
...
On older kernels, machine_startup() also initializes thermal monitoring for the processor by calling ml_thrm_init()
[osfmk/ppc/machine_routines_asm.s]. Newer kernels handle thermal initialization entirely in the I/O Kitml_thrm_init() performs no work
on these kernels.
Finally, machine_conf() calls kernel_bootstrap() [osfmk/kern/startup.c], which never returns.
5.4. Mach Subsystem Initialization
kernel_bootstrap() performs much of the higher-level kernel startup. In fact, it eventually launches BSD initialization, which in turn ends by
initiating user-level system startup. Figure 511 shows the key steps performed by kernel_bootstrap().
Figure 511. Bootstrapping kernel subsystems
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 21 of 59
lck_mod_init() [osfmk/kern/locks.c] initializes data structures that are used by Mach's locking primitives.
5.4.1. Scheduler Initialization
sched_init() [osfmk/kern/sched_prim.c] initializes the processor scheduler. It sets the default preemption rate to
DEFAULT_PREEMPTION_RATE (defined to be 100 per second in osfmk/kern/sched_prim.c), unless a boot argument was used to set it to some
other value. sched_init() calculates the values of fundamental scheduling constants. For example, it calculates the standard timeslicing
quantum in microseconds as the number 1,000,000 divided by the default preemption rate. It then prints a message advertising the value so
calculated. In a verbose boot (PowerPC), this is the first kernel message seen by the user:
standard timeslicing quantum is 10000 us
sched_init() also performs the following specific operations.
 It calls wait_queues_init() [osfmk/kern/sched_prim.c] to initialize the event wait queues used by the scheduler APIs. The hash of
wait queue structuresconsisting of NUMQUEUES (59) bucketsis statically allocated in osfmk/kern/sched_prim.c. Each bucket contains a
queue of threads that have the same hash function value. All wait queues are initialized with a synchronizer wait ordering policy of
SYNC_POLICY_FIFO.
 It calls load_shift_init() [osfmk/kern/sched_prim.c] to initialize the timeshare loading factors contained in the
sched_load_shifts array. The array contains a per-run-queue factor, which is used as the dynamic, load-based component in the
computation of the timeshare priority conversion factor.
 It calls pset_init() [osfmk/kern/processor.c] to initialize the default processor set. Mach scheduling uses processor sets,[13] hence
this is necessary for the scheduler to run. pset_init() initializes the components of the specified processor-set data structure, including
its various queues.