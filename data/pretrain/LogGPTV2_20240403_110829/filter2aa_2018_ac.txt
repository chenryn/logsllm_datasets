### 1.2 Decryption Scenarios
Decryption of traffic that is not otherwise captured through pre-arranged mechanisms (such as SSL Inspection) includes the following scenarios:
- **Post-Breach Incident Response:** Decryption of logged malicious RDP sessions for incident response and forensic analysis.
- **Legal Investigations:** Decryption of illicit HTTPS traffic captured before serving a search warrant.
- **Automated Malware Analysis:** Transparent decryption of malware connections, especially when PowerShell or other native elements are used.
- **Windows Update Traffic:** Decryption of traffic related to Windows Update.

### 1.3 Research Question
Given the challenge of decrypting connections made with the Windows implementation of ephemeral key exchanges, the research question is:
- Do the necessary connection parameters exist in the memory of modern Windows systems to retroactively decrypt sessions? If so, how long do these artifacts persist?

Additionally, the study aims to identify any other connection artifacts that may provide context to the nature of the connection.

### 1.4 Hypothesis
It is hypothesized that, to maintain the connection, at least the session keys must exist for the duration of the connection. Furthermore, it is posited that other secrets may persist beyond the connection itself to support session resumption or other implementation-specific functionalities.

### 1.5 Assumptions
The research question and hypothesis are based on the following assumptions:
- **Modern Operating Systems:** The term "modern" refers to operating systems currently supported by Microsoft.
- **Standard Configuration:** The examined operating systems are standard, with no alterations to the kernel or physical memory addressing schemes by any party other than Microsoft.
- **Hardware Agnostic:** The operating system can be installed on either physical or virtual hardware without affecting the study's subject matter.
- **Reliable Analysis Platform:** The chosen underlying analysis platform is sound and can be relied upon to perform its intended function.

### 1.6 Limitations
The scope of the research is defined by the following limitations:
- **Operating System and Architecture:** The study focuses on Windows 10 operating systems running on Intel x86 and x64 architectures.
- **SSL/TLS Versions:** All versions of SSL and TLS supported by Windows 10 are considered.
- **Analysis Frameworks:** Either the Volatility or Rekall frameworks, or both, are used to demonstrate the findings.

### 1.7 Delimitations
The delimitations of the study include:
- **Non-Windows Systems:** Linux, Unix, or other systems with implementations or emulations of Microsoft cryptographic packages are not examined.
- **Third-Party Cryptographic Protocols:** Third-party cryptographic protocols or packages for the operating systems under consideration are not included.
- **Volatile Memory Acquisition:** Methods of volatile memory acquisition outside of a cursory review during the literature review are not explored.
- **Paging and CPU Cache:** Paging constraints and CPU cache size and levels are not considered in this work.

### Chapter 2: Relevant Literature
This section highlights the literature relevant to the problem identified in Chapter One and the development of a solution. It is assumed that the reader has a basic understanding of TCP/IP networking, computer architectures, and digital forensics. The literature review will cover:
- **Memory Analysis Frameworks:** A brief discussion of modern memory analysis frameworks.
- **SSL/TLS Overview:** A cursory overview of SSL/TLS to provide context for the methods and results.
- **Windows Internal Memory Management and TLS Implementation:** A review of Windows internal memory management and TLS implementation.
- **Prior Works:** A review of prior works to establish the novelty and significance of the research.

#### Key Insights from the Literature Review
- **Volatility and Rekall:** These are the primary memory analysis platforms considered.
- **SSL/TLS Secrets Caching:** SSL/TLS require caching of secrets to support session resumption, even in cases where Perfect Forward Secrecy (PFS) is attempted.
- **LSASS:** The Local Security Authority Subsystem Service (LSASS) is the key isolation component in Microsoft's SSL/TLS implementation.
- **Prior Work:** There is prior work on extracting persistent RSA private keys from Windows systems and OpenSSL secrets from UNIX-like systems, but no prior work on extracting ephemeral SSL/TLS secrets from the Windows SSL implementation.

### 2.1 Volatile Memory Analysis Frameworks
There are two primary frameworks for volatile memory analysis: the Volatility and Rekall Memory Forensics Frameworks. Both are considered here, as either one or both will be used to demonstrate the findings.

**Volatility Framework:**
- **Development and Background:** Originally developed by Alex Walters and Nick Petroni as "FATKit" and "Volatools," the Volatility Framework is widely regarded as the gold standard for volatile memory analysis.
- **Extensibility and Features:** Volatility is extensible via plugins and can interpret architecture and OS-dependent address spaces, making it ideal for developing a Proof-of-Concept (PoC) solution. It uses "V-Types" for object creation and extension, which is a powerful abstraction for reverse engineering and forensic artifact extraction.

**Rekall Framework:**
- **Origins and Philosophy:** Rekall originated as a branch of Volatility maintained by Michael Cohen (alias "Scudette"). Differences in philosophy and changes to the main code base led to Rekall becoming a separate framework.
- **Key Features:** Rekall handles profiles for various operating systems differently, supports dynamic symbol loading and parsing, and prefers an interactive command-line interface. It also incorporates a dynamic symbol loading and parsing system.

Both Volatility and Rekall support similar functionality through plugins, making them modular and flexible. The logical view of their architecture is depicted in Figure 2.1.

### 2.2 SSL & TLS
Understanding SSL/TLS internals is crucial for the thesis. SSL and TLS are designed to securely establish communications between two parties by defining how they will authenticate each other and encrypt their communications. This section covers the handshake, key exchange, session resumption, session ticket extension, and the extended master secret extension.

**Differences Between SSLv3 and TLSv1:**
- **Interoperability:** While SSLv3 and TLSv1 are related, they are not interoperable. TLSv1 incorporates a mechanism to downgrade to SSLv3 if needed.
- **Key Differences:** TLS extensions, HMAC functions, PRFs, padding lengths, and the last message of the handshake differ between SSLv3 and TLSv1.

**Handshake and Key Exchange:**
- **Purpose:** The key exchange is central to the security of the protocol, allowing both parties to derive the same symmetric secret key.
- **Cipher Suite Negotiation:** The cipher suite, which includes the key exchange, symmetric cipher, and integrity components, is negotiated during the handshake.
- **Key Exchange Mechanisms:** Common key exchange mechanisms include RSA, DHE, ECDHE, SRP, and PSK. The choice of cipher suite determines the subsequent messages and enables properties like Perfect Forward Secrecy (PFS).

**Perfect Forward Secrecy (PFS):**
- **Definition:** PFS ensures that the compromise of long-term secret keying material does not compromise the secrecy of earlier exchanged keys.
- **Ephemeral Key Exchanges:** Ephemeral key exchanges, such as DHE and ECDHE, create short-lived keys that are not persisted to disk, enhancing PFS.

**Key Calculation:**
- **Master Secret Generation:** The master secret is generated using the Pre-Master Secret (PMS), client and server random values, and the PRF.
- **Session Keys:** The master secret is expanded to generate session keys and unique values, which are used for encryption and integrity verification.

This structured and detailed approach should make the text more clear, coherent, and professional.