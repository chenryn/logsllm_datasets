were not otherwise captured through a pre-arranged mechanism (such as SSL
Inspection), for example:
• Decryption of logged malicious RDP sessions after a breach for incident
response purposes
• Decryption of illicit HTTPS traﬃc captured prior to the serving of a search
warrant
• Automated, transparent decryption of malware connections (especially salient
for instances where Powershell or other native elements are used).
4
• Decryption of Windows Update traﬃc
1.3 Research Question
Given the problem of decrypting connections made with the Windows
implementation of ephemeral key exchanges, the research question stands thusly:
Do the requisite connection parameters exist in the memory of modern
Windows systems to retroactively decrypt sessions? If so, how long do
these artifacts persist?
Complimenting this question is the ancillary pursuit of any other connection
artifacts that may help provide context to the nature of the connection.
1.4 Hypothesis
It is posited that, to maintain the connection, at the very least the session
keys must exist for the duration of the connection. It is further supposed that,
outliving the connection itself, other secrets may exist to support the ability to
perform session resumption or other implementation speciﬁc functionality.
1.5 Assumptions
The research question and subsequent hypothesis are predicated on several
assumptions, which are as follows:
• The term modern with respect to operating systems refers to those currently
actively supported by Microsoft at the time of writing
• It is assumed that the operating systems to be examined are standard in so
much as the kernel and physical memory addressing schemes have not been
altered by any party other than Microsoft and are in general distribution
5
• It is assumed that any operating system being examined may be either
installed on physical or virtual hardware without consequence; that is to say
that the use of virtualization will have no impact on the subject matter of the
study
• It is assumed that any underlying analysis platform chosen is sound in its
implementation and can be relied upon to perform its purported function
1.6 Limitations
In addition to the assumptions, it was important to deﬁne the scope of the
research. The methodology appearing in Chapter Three of this thesis will discuss
the instrumentation that inherently produces constraints, but the scope will be
discussed here explicitly in terms of limitations and delimitations. Limitations refer
speciﬁcally to those things that the research deﬁnes as within bounds of the scope.
The delimitations, conversely, will seek to delineate those things which are
reasonably outside the bounds of the research and were not explored at any depth.
The limitations for this study included:
• Windows 10 operating systems were considered on Intel x86 and x64
architectures
• All versions of SSL and TLS supported by Windows 10 were considered
• Either the Volatility or Rekall frameworks were used to demonstrate the
ﬁndings of the thesis, or both as necessary
1.7 Delimitations
The delimitations for this study included:
• Linux, Unix, or other systems which have implementations or emulation of
Microsoft cryptographic packages were not examined, unless explicitly
identiﬁed in the limitations
6
• Third party cryptographic protocols or packages for the operating systems
being considered were not examined
• This thesis did not examine methods of volatile memory acquisition outside of
a cursory glance during the literature review, and the necessary semantic
elements that may deﬁne the proprietary bitstream structures of di↵erent
acquisition methods
• Paging constraints and operations were not considered as part of this work,
though they may be in future work
• CPU cache size and levels were not controlled for due to the diﬃculty of
manipulation in virtual environment that was used during testing
7
CHAPTER 2. RELEVANT LITERATURE
This section will highlight literature considered salient to the problem
identiﬁed in Chapter One and the development of a solution. While this chapter will
provide background information, it is assumed that the reader has an understanding
of Transmission Control Protocol (TCP)/Internet Protocol (IP) networking,
computer architectures, and digital forensics. Part of this literature review will not
involve academic works, but also material from industry conferences, code from
well-established open-source projects, and even blog posts from prominent members
within the community. The review will progress through four larger stages:
• A brief discussion of modern memory analysis frameworks
• A cursory overview of SSL/TLS to provide framing for methods and results
• A review of Windows internal memory management and TLS implementation,
the subject of the thesis
• A review of prior works as grounds for due diligence, in pursuit of showing
good faith regarding the novelty and signiﬁcance of the research
The most salient insights from the literature review across all of these
sub-divisions are provided here for convenience:
• Volatility and Rekall are the memory analysis platforms that will be
considered
• SSL/TLS require caching of secrets to support session resumption, even in
cases where PFS is attempted
• LSASS is the Key Isolation component of the Microsoft’s SSL/TLS
implementation
• There is prior work on extracting persistent RSA private keys from Windows
systems
8
• There is prior work on extracting OpenSSL secrets from UNIX-like systems
• There does not appear to be prior work on extracting ephemeral SSL/TLS
secrets from the Windows SSL implementation
2.1 Volatile Memory Analysis Frameworks
Although many methods exist for memory collection, there are currently two
primary frameworks that exist for analysis: the Volatility and Rekall Memory
Forensics Frameworks. Both are considered here, as either one or both will be used
to demonstrate ﬁndings of the thesis.
Perhaps the gold standard for volatile memory analysis has been the
Volatility Framework originally developed by Alex Walters and Nick Petroni in the
form of “FATKit” and “Volatools” (Petroni, Walters, Fraser, & Arbaugh, 2006;
Walters & Petroni, 2007). Core developers of Volatility, led by Michael Hale Ligh,
went on to develop the most extensive source material to date on memory analysis
for forensics, entitled “The Art of Memory Forensics: Detecting Malware and
Threats in Windows, Linux, and Mac memory.”
Volatility is extensible via plug-ins and has the capability to interpret the
architecture and OS dependent address spaces, making it an ideal platform on
which to develop a Proof-of-Concept (PoC) solution. It makes use of a structure
referred to as a “V-Type” that allows objects to be created and extended based on a
C-like strucure, without knowing all ﬁelds in the structure (Ligh et al., 2014). This
is a powerful abstraction for reverse engineering and forensic artifact extraction.
Rekall originated as a branch of Volatility maintained by Micheal Cohen
(also known by the alias “Scudette”) and was called the “scudette” or “Technology
Preview” branch. It seems that di↵erences in philosophy and changes to the main
code base meant that the scudette branch was never destined to be merged with the
master branch of Volatility (Cohen, 2015a). The di↵erences in approach are outlined
principally in the Rekall blog and on the Rekall website (Cohen, 2015b). Succinctly,
9
they are the way in which proﬁles for various operating systems are handled, the
way operating systems are identiﬁed, and the preference in Rekall for the interactive
command-line, as well as redesign of the plug-in structure. Rekall also (by extension
of the way it manages proﬁles) has incorporated a dynamic symbol loading and
parsing system that it can leverage automatically (when allowed Internet access).
Both Volatility and Rekall support much of the same functionality through
plug-ins. Plug-ins implement an interface, and can be developed and incorporated
by anyone, making both tools modular, hence they are described as a framework.
The logical view of this architecture is depicted in Figure 2.1 The philosophy taken
by Rekall, particularly the dynamic ability to look up symbols and localization of
proﬁles, even within Windows versions, seems to be a desirable trait going forward.
At the same time, many environments leveraged by the target audience require
analysis systems that are completely disconnected from the Internet, meaning that
any methods developed cannot solely rely on the capability to dynamically fetch
symbols, if at all possible.
10
Figure 2.1. Volatility plug-in interface and address space abstraction (Ligh et al.,
2014)
2.2 SSL & TLS
Understanding SSL/TLS internals is central to the thesis. The core purpose
of SSL, and its successor TLS, is to provide a mechanism to securely establish
communications between two parties by deﬁning how both parties will decide upon
and exchange the necessary information to authenticate each other and encrypt
their communications. This section will overview the poignant components, namely:
the handshake, key exchange, session resumption, session ticket extension, and the
extended master secret extension. These topics will be reviewed per the Request for
Comment (RFC) speciﬁcations here, and then particulars of the Windows
implementation will appear in a later section.
11
A distinction that should be clariﬁed is that, while it seems generally
accepted that SSLv3 is equivalent to TLSv1, the two should not be conﬂated and
are not interoperable. This information is relayed explicitly in the TLSv1 RFC:
The di↵erences between this protocol and SSL 3.0 are not dramatic, but
they are signiﬁcant enough that TLS 1.0 and SSL 3.0 do not interoperate
(although TLS 1.0 does incorporate a mechanism by which a TLS
implementation can downgrade to SSL 3.0).(Dierks & Allen, 1999, p.5)
The two are decidedly related though, closely enough in fact that the protocol
identiﬁer for TLSv1 is 0x0301, a reference to “SSLv3.1.” Still, a few points worth
noting (Freier et al., 2011; Goh & Boneh, 2001) are:
• TLS Extensions are not strictly supported by SSLv3
• The HMAC function di↵ers between the two
• The Pseudo-Random Functions (PRFs) di↵er
• Total allowed padding lengths di↵er
• The last message of the handshake di↵ers
These di↵erences are touched upon because they could alter the artifacts seen in
memory between the two (though in part this is implementation speciﬁc). There
remains enough similarities that the overview will discuss them simultaneously,
pointing out any di↵erences as necessary. For readability and brevity, only TLS will
be used for the remainder of the thesis.
2.2.1 Handshake & Key Exchange
The TLS key exchange is central to the security of the protocol. The purpose
is to exchange enough information that both parties can derive the same
(symmetric) secret key1 to encrypt and decrypt messages. There are several
standardized ways to achieve this objective, and so both client and server need to
1keys plural, actually, as will be discussed later
12
agree on which way the exchange will occur. There is also the question of what
algorithm (cipher) will be used for encryption once a shared secret is known by both
parties (the symmetric key size will be dependent upon this choice). A ﬁnal concern
is how to protect the integrity of the connection by verifying the parties are who
they claim to be, and verifying that messages passed between them have not been
surreptitiously altered. TLS addresses these problems by bundling the key
exchange, symmetric cipher, and integrity components into a single parameter
called the “Cipher Suite.” An example of a cipher suite is
“TLS RSA WITH AES 128 CBC SHA.”
The cipher suite is negotiated through an TLS “handshake,” in which these
and other parameters for the connection are established. This process, as described
in the SSLv3 and TLSv1 RFCs, is depicted in Figure 2.2, consisting of at minimum
a “Client Hello” and “Server Hello” in which a cipher suite is determined, a client
key exchange, and a change cipher spec message.
13
Figure 2.2. SSL/TLS Handshake (Dierks & Allen, 1999; Freier et al., 2011; Microsoft,
2003a)
A few key parameters set in this exchange are:
• The TLS version: The client and server agree on a TLS version for the
connection, which is represented as a unique identiﬁer (e.g. 0x0302 for TLS
v1.1).
• The random values: The client and server random values are used to seed the
PRF, and consist of a four byte timestamp followed by 28 bytes of random
data.
• The session ID: Before TLS 1.2 (and in current practical implementation) the
session ID is a 16 byte value often represented by 32 hexadecimal characters,
14
which is used to uniquely identify the session. The client should send a null
session ID if it wants to start a new connection (or if tickets are being used to
resume the session, discussed later).
• The cipher suite: A unique value used to represent the ciphers that will be
used in the connection (e.g. 0xc028 for
TLS ECDHE RSA WITH AES 256 CBC SHA384).
The key exchange itself is the ﬁrst cipher component dictated in the “Cipher
Suite” chosen by the server, and is commonly one of several options speciﬁed in
RFCs:
• Rivest-Shamir-Adelman (RSA)
• Diﬃe-Helman Ephmeral (DHE)
• Elliptic Curve DHE (ECDHE)
• Secure Remote Password (SRP)
• Pre-Shared Key (PSK)
The choice of cipher suite will also determine what messages follow. An RSA
key exchange does not contain a “ServerKeyExchange” message, whereas DHE and
ECDHE do. This is important, because the ServerKeyExchange is what allows the
Pre-Master Secret (PMS) to be derived by both parties without the client sending it
over the network, and as a result part of what enables the property of Perfect
Forward Secrecy.
2.2.2 Perfect Forward Secrecy
Perfect Forward Secrecy (PFS) is a property of secure communications that
employ key exchanges (which, by their nature, may be observable by third parties).
Whitﬁeld Diﬃe described PFS in his paper “Authentication and Authenticated Key
Exchanges,” noting that “An authenticated key exchange protocol provides perfect
forward secrecy if disclosure of long-term secret keying material does not
compromise the secrecy of the exchanged keys from earlier runs” (Diﬃe,
15
Van Oorschot, & Wiener, 1992, p. 7). In the context of TLS, this refers to the
compromise of the private key.
The issue with non-PFS key exchanges, like RSA, is that a private key can
be used to retroactively decrypt previously captured connections indeﬁnitely. This
is because the public key encrypts the Pre-Master Key (PMK) and sends it to the
Server. The Pre-Master Key (PMK) is used to derive the master key, which in turn
is used with public parameters to derive the session keys.
Ephemeral key exchanges address this in part by creating and rotating
short-lived keys that are not persisted to disk (and, in theory, should not be
persisted between connections). They also do not exchange a secret encrypted with
this key over the network. Instead, Diﬃe-Helman relies on the communicative
property of exponents to exchange a public value (g) raised to the power of a secret
modulo a large prime number. If the client and server are Alice and Bob2, then
Alice would send ga mod p to bob, where g is a public base number, a is Alice’s
secret and p is a large prime number. Bob would do the same with his secret, and
send it to Alice. Bob would then take the value that Alice sent and raise it to his
secret value mod p. Alice does the same and the result is that both Alice and Bob
have arrived at the same secret.
This helps achieve the property of PFS by ensuring that the values
exchanged are not reliant on a persistently stored secret, and that a secret relying
on that key is not exchanged across the network. For the sake of the thesis, any
suite that is ephemeral will be said to be a TLS implementation of PFS. However,
as will be discussed, another aspect of TLS negates some of the beneﬁt provided by
storing secrets in main memory for what might be termed an extended period of
time with respect to the life of the connection. Another key consideration to
remember is that the client may send support for an ephemeral cipher suite in its
hello, but the suite chosen comes down to the Server’s preference.
2A common method of representing a party “A” and “B”
16
2.2.3 Key Calculation
Having successfully exchanged or derived a secret, known as the “Pre-Master
Secret (PMS)” both parties now generate the master secret or “master key.”
Whereas the PMK may vary in size, the master secret is always 48 bytes. The
method used to generate the master secret for TLS is shown in Figure 2.3, as it
appears in the RFCs.
master_secret = PRF(pre_master_secret, "master secret",
ClientHello.random + ServerHello.random)
[0..47];
Figure 2.3. TLS master secret generation pseudo-code (Dierks & Allen, 1999; Dierks
& Rescorla, 2008)
The master secret is then, in turn, used to generate a series of session keys
and unique values. This occurs by expanding the master secret (much like a key
schedule), and then passing the master secret, the “key expansion,” and the client
and server random value into a PRF, yielding a “key block.” The key block is then