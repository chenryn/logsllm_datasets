# Design of the EROS Trusted Window System

**Authors:**
- Jonathan S. Shapiro
- John Vanderburgh
- Eric Northup
- David Chizmadia

**USENIX Association**
- Proceedings of the 13th USENIX Security Symposium
- San Diego, CA, USA
- August 9–13, 2004
- © 2004 by The USENIX Association
- Phone: +1 510 528 8649
- FAX: +1 510 548 5738
- Email: [PI:EMAIL]
- For more information: [http://www.usenix.org](http://www.usenix.org)
- All rights reserved. Permission is granted for noncommercial reproduction for educational or research purposes, provided this copyright notice is included.
- USENIX acknowledges all trademarks herein.

## Abstract

Window systems are the primary mediators of user input and output in modern computing environments and serve as a common interprocess communication mechanism. They play a crucial role in enforcing security policies and protecting sensitive information. Users must be assured that their passwords and passphrases are disclosed exclusively to the intended program. In highly secure systems, global information flow restrictions must be honored. Most window systems today, including X11 and Microsoft Windows, carry forward the presumptive trust assumptions of the Xerox Alto, which are inappropriate for modern computing environments.

This paper presents the design of a new trusted window system for the EROS capability-based operating system. The EROS Window System (EWS) provides robust traceability of user volition and can enforce mandatory access controls with minor extensions. The entire implementation of EWS is less than 4,500 lines of code, which is a factor of ten smaller than previous trusted window systems like Trusted X, making it feasible to evaluate for high assurance.

## 1. Introduction

Window systems are central to modern computing, serving as the primary mediator of user input and output and providing widely used interprocess communication mechanisms such as cut and paste. Most modern window systems, including X11 and Microsoft Windows, trace their conceptual origins to the Xerox Alto. The Alto design assumed applications were friendly and the display was a single-user device, encouraging cooperation among applications in an environment of trust. Unfortunately, these assumptions are incompatible with even minimal security standards.

Window systems have direct access to sensitive information, such as passphrases and timing data, and are involved in critical paths for trusted applications like login services. They must enforce global information flow restrictions when system-wide mandatory access controls are in effect. Current designs include shared mutable resources, which are problematic, and provide server-side resources to hold client data, creating opportunities for storage denial of service. They also perform operations with high variance and observable latency, facilitating timing denial of service and covert channel construction. Thus, window systems present numerous vulnerabilities that attackers can exploit, even in otherwise compartmentalized systems. Security in their design is essential.

In the late 1980s, there was significant work on compartmented mode workstation (CMW) implementations, particularly TRW's Trusted X, which identified major and minor design flaws in X. However, the CMW effort paid little attention to potentially hostile actions within a multilevel secure (MLS) compartment. This oversight is also evident in the Trusted Computer System Evaluation Criteria and the Common Criteria. Defense against scripting viruses and excessive window creation falls outside the scope of most compartmentation strategies, highlighting the need for trusted path and discretionary control.

## 2. Objectives and Overview

### 2.1 Principles and Goals

After reviewing Epstein and Picciotto's conclusions, we established the following principles and goals for EWS:

- **R1. Isolation:** No operation performed on one client session should affect or observe state associated with other sessions.
- **R2. No Mutable Sharing:** The display server should provide no shared mutable state to clients.
- **R3. Minimize Server Resource Types:** The total number of resource types managed and/or allocated by the server should be minimized.
- **R4. Minimize Algorithmic Complexity:** The number and complexity of algorithms and data structures in the server should be minimized.
- **R5. Restricted Communication:** The display server should provide strictly limited inter-process communication facilities.
- **R6. Volitional Traceability:** No communication may occur between applications through the display server unless an authorizing user action is demonstrated.
- **R7. Resource Conservatism:** The display server should not enqueue input requests or events, and dynamically allocated resources should come from the client.
- **R8. Small Size:** The display server should be small enough to be evaluable, with an initial goal of 30,000 lines of code.
- **R9. Low Variance:** Each input event should be delivered to exactly one recipient application, and each operation should complete in fixed, small time.

With three exceptions, we achieved these objectives:
1. Clipboard interaction establishes a temporary unidirectional communication channel, involving notification of both sides by the display server.
2. Our design supports hierarchical client subsessions, but destruction of a session implies destruction of all descendant subsessions.
3. Window structures are dynamically allocated using display server memory, requiring a quota system to limit communication and attacks.

### 2.2 Design Overview

The functions of a display server can be divided into five main categories:
1. **Input Processing:** Including events and client requests.
2. **Rendering and Display Update.**
3. **Interprocess Communication:** Such as cut and paste.
4. **Trusted User Interaction and Feedback:** Including window decorations, labeling, and trusted path management.
5. **Isolation Support.**

We will discuss how each of these is approached in EWS and examine how various security concerns are addressed by the design.

As a capability system, EROS is object-based. Consequently, EWS is an "object server," and requests are performed by synchronously invoking operating system-protected capabilities. It is conventional to refer to such a server as an "RPC Server." All interprocess communications in EWS are local remote procedure calls, leveraging the EROS capability invocation mechanism for high-performance transport. The synchrony of these invocations does not bottleneck display performance.

The EWS display server does not directly implement remote connection or cryptographic transport layer protection. These are separable functions with generic utility for many applications. There is no reason for the display system to duplicate these functions when they can be implemented in a separately assurable component. Cox et al. propose a compelling architecture for separating transport security and key management from applications.

The display server also omits authentication functionality. In a capability system, possession of a capability is sufficient proof of authority to perform the operations invokable through that capability. In EWS, a client either possesses a Session capability or does not, and capability distribution is a separable problem. User accounts are created with an initial desktop session that can be detached and reattached by the login subsystem. Responsibility for subsession creation initially lies with the user’s primary "shell." In a multilevel secure system, this shell would be a trusted application responsible for creating compartments and associating security labels with subordinate Session capabilities.

## 3. Input Processing

Input processing imposes three constraints on the display server:
1. **Promptness:** Requests must be completed promptly.
2. **Determinism:** Each input event should be delivered to exactly one recipient application.
3. **Low Latency:** Operations should complete in fixed, small time.

[Figure 2: EWS Components]

- **Kbd Helper**
- **Mouse Helper**
- **Display Server**
- **Clients**

These components work together to ensure efficient and secure input processing, adhering to the principles and goals outlined above.