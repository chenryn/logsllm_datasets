The pre-deﬁned power model in VirusMeter is user-centric, which is relative
to system-centric models that typically have too many system-level states. This
model is constructed by VirusMeter itself when the device is in a clean state.
VirusMeter consists of three major components: User-Centric Power Model,
VirusMeter: Preventing Your Cellphone from Spies
249
data collector/Symbian APIs
....................
user events
system events
Battery
state
machine
user operations
user−centric
power model
realtime
mode
charging
mode
decision
detector
Fig. 2. VirusMeter Architecture
Data Collector, and Malware Detector. Figure 2 shows these components and
the work ﬂow of VirusMeter.
While the logic of VirusMeter is straightforward, we still need to overcome sev-
eral challenges before VirusMeter becomes practically deployable on commodity
mobile devices: (1) Accurate power modeling: An accurate yet simple power
consumption model is crucial to the eﬀectiveness of VirusMeter for malware de-
tection. (2) Precise power measurement: Both model construction and data
collection rely on precise power measurement. (3) Low execution overhead:
For VirusMeter to be practically deployable, its own power consumption should
not adversely aﬀect the power-based anomaly detection.
In the following sections, we shall present more design and implementation
details that address these challenges.
4 Building a User-Centric Power Model for VirusMeter
4.1 Existing Battery Power Models
Generally speaking, a battery’s power consumption rate can be aﬀected by two
groups of factors, environmental factors such as signal strength, environmental
noises, temperature, humidity, the distance to the base station, the discharging
rate, the remaining battery power, etc., and user operations such as phone calls,
emailing, text messaging, music playing, etc. Three types of power models have
been suggested so far:
(1) Linear Model: In this simple model the remaining capacity after operating
duration td is given by
250
L. Liu et al.
(cid:2)
Pr = Pp −
t0+td
d(t)dt = Pp − I × td,
(1)
t=t0
where Pp is the previous battery power, and d(t) is the draining rate at time t.
With the assumption that the operating mode does not change for td time units,
d(t) stays the same during this period and is denoted as I. Once the operation
mode changes, the remaining capacity is re-calculated [28].
(2) Discharge Rate Dependent Model: In this model, the discharge rate is
considered to be related to the battery capacity. For this purpose, c is deﬁned
as the fraction of the eﬀective battery capacity Pef f and the maximum capacity
Pmax, i.e., c = Pef f
Pmax . Then the battery power is calculated as
d(t)dt = c × Pp − I × td.
Pr = c × Pp −
t0+td
(cid:2)
(2)
t=t0
c changes with the current; it becomes close to 1 when the discharge rate is low,
and approaches 0 when the discharge rate is high [6,28].
(3) Relaxation Model: This model is based on a common phenomenon called
relaxation [14,18], which refers to the fact that when a battery is discharged at
a high rate, the diﬀusion rate of the active ingredients through the electrolyte
and electrode will fall behind, and the battery reaches its end of life even if there
are active materials available. If the discharge current is cut oﬀ or reduced, the
diﬀusion and transport rate of active materials will catch up with the depletion of
the materials [25]. Although this is the most comprehensive model characterizing
a real battery, the model involves more than 50 electro-chemical and physical
input parameters [25].
All these models calculate the battery power consumption from a physical
and electrical perspective, although their inputs are remarkably diﬀerent. The
relaxation model can provide more accurate battery estimation than the lin-
ear model. However, even with aid of external instruments, measuring over 50
parameters could be diﬃcult and expensive in practice. In addition, since Virus-
Meter aims to run on commodity mobile devices, it purely relies on publicly
available system functions (without external support) to collect data; most of
the 50 parameters in the relaxation model, however, cannot be captured with
available APIs. Furthermore, a model with as many as 50 parameters is too cum-
bersome and thus not suitable for resource-constrained devices. The other two
models model have similar problems, as the power draining rate and discharge
rate are hard to measure without external power measurement instruments.
4.2 User-Centric Power Model
Due to the diﬃculties of measuring the input parameters of existing power mod-
els, we decide to build a user-centric power model for VirusMeter. In this model,
the amount of power consumed is characterized as a function of common user
operations and relevant environmental factors. Moreover, this model has only a
VirusMeter: Preventing Your Cellphone from Spies
251
few states, which is in contrast to those system-centric power models that need
cumbersomely proﬁle all system behaviors and are thus diﬃcult to build without
in-depth understanding of the mobile OS and its underlying hardware.
To derive a user-centric model from scratch, we investigate the power con-
sumption of common types of user operations on mobile devices in diﬀerent
environments. The following types of user operations are now considered: (1)
Calling: its power consumption is mainly dependent on the conversation dura-
tion. VirusMeter treats incoming and outgoing calls separately. (2) Messaging:
its average power consumption depends on both the sizes and the types of the
messages. MMS and SMS are the two message types being considered. Also,
sending and receiving messages are treated as diﬀerent activities. (3) Emailing:
its power consumption is mainly decided by the amount of traﬃc, which we can
get by querying the email message size. (4) Document processing: we assume
that the duration of the operation is the deciding factor. (5) Web surﬁng: Web
surﬁng is more complicated than the above as a user may view, download, or be
idle when surﬁng the Web. Currently we calculate the average power consump-
tion simply based on the amount of traﬃc involved and also the surﬁng duration.
(6) Idle: for a large amount of time, a user may not operate on the device for
anything. During this period, however, system activities such as signaling may
still take place. Under such a state, the power consumption is intuitively relevant
to its duration. (7) Entertainment and others: currently, we simply assume the
average power consumption is determined by the duration of the activities. This,
admittedly, is a coarse model and further study is required.
For environmental factors, the following two types are being considered: (1)
Signal strength: signal strength impacts the power consumption of all the above
operations. The weaker of the signal strength, the more power consumption is
expected. (2) Network condition: for some of the operations, network conditions
are also important. For example, the time, and thus the power, needed to send
a text message depends on the current network condition.
In VirusMeter, the battery power consumed between two measurements can
be described as a function of all these factors during this period:
ΔP = f(Di
call
, SSi
call
, T j
msg
, Sj
msg
, SSj
msg
, N j
msg
..., Dk
idle
, SSk
idle),
(3)
where ΔP represents the power consumption, D the duration of the operation,
SS the signal strength, T the type of the text message, and N the network
condition. i,j, and k represent the index of the user operation under discussion.
To this end, what is missing in this user-centric power model is the function
itself in Equation 3. This is derived from the following three diﬀerent approaches:
Linear Regression: Linear regression generates a mathematical function which
linearly combines all variables we have discussed with techniques such as least
square functions; it can thus be easily stored and implemented in a small segment
of codes that run on commodity mobile devices with trivial overhead. While
linear regression may incur little overhead, which makes it suitable for real-
time detection, its accuracy depends on the underlying assumption of the linear
relationship between variables.
252
L. Liu et al.
Neural Network: An artiﬁcial neural network (ANN), often referred to as a
“neural network” (NN), is a mathematical or computational model inspired by
biological neural networks. It consists of an interconnected group of artiﬁcial neu-
rons that process information using a connectionist approach for computation.
Neural networks are commonly used for non-linear statistical data modeling.
They can be used to model complex relationships between inputs and outputs
or to ﬁnd patterns in data. In VirusMeter, we use neural network as a regres-
sion tool, in which the neural network model, unlike the linear regression model,
cannot easily be presented as a mathematical function.
Decision Trees: A decision tree is a predictive model that maps the observa-
tions of an item to conclusions of its target value. In a decision tree, branches
represent conjunctions of features that lead to leaves that represent classiﬁca-
tions. In VirusMeter we build a classiﬁcation tree in which branches represent
normal or malware samples. We train the decision tree with both normal and
malware data samples. When a new piece of data sample is fed into the decision
tree, it can tell if the new data is normal or not, as well as which malware most
likely caused the abnormal power consumption.
5 Constructing State Machines for Data Collection
To train the three power models presented in the previous section, VirusMeter
needs to collect some data. For the linear and neural network model construction,
only clean data are needed. For decision tree construction, both clean data and
dirty data (the data when malware programs are present) are needed. In this
section, we present how VirusMeter collects these data to train the models.
Currently, we mainly consider the user operations deﬁned in the previous sec-
tion and their corresponding power consumption in VirusMeter. Although the
power consumption can be queried using public APIs, there is no interface that
could be directly called for the user operations. As it is common for commodity
devices to provide some APIs for third parties to query, register, and monitor
system-level events or status, we construct a state machine to derive user opera-
tions (which we also call external events) from system events (which we also call
internal events). In this state machine, state transitions are triggered by internal
events when they appear in a certain order and satisfy certain timing constraints.
For example, during a normal incoming call, a ring event must precede another
answer key event, but cannot happen more than 25 seconds before the answer
key event, because ringing lasts for less than 25 seconds in our experimental
cellphone before the call is forwarded to the voicemail service.
One may wonder whether we can simply use these state machines to detect
malware without power auditing. This is possible but can potentially miss some
malware for two reasons. On one hand, stealthy malware can easily evade de-
tection by mimicing normal user behaviors that can be derived from the state
machine. On the other hand, it is diﬃcult, if not impossible, to build a state
machine that exhaustively characterizes all possible user operations. The state
machine in VirusMeter covers only the internal events corresponding to those
VirusMeter: Preventing Your Cellphone from Spies
253
Algorithm 1. State Machine Construction for Each User Operation
1: Run a monitor program on the clean cellphone.
2: Execute a deﬁned user operation, such as a phone call.
3: Monitor and record all related internal events during the test period and their
properties.
4: Find the correlation between a user operation and the internal events, their depen-
dency and sequences.
5: Query and record all parameters of the events.
6: Repeat the experiment.
7: Abstract the common event sequence from the recording. These internal events are
used to build the state machine.
common user operations that we have deﬁned. Due to these concerns, we still
need the power model for mobile malware detection.
VirusMeter performs Algorithm 1 to construct the state machine for each user
operation deﬁned previously. Figure 3 shows an example of the obtained state
machine for receiving a phone call. In this ﬁgure, the triggering events are marked
on the transition arrows. Starting in the Idle state, the state machine transits
to the Ring state after a ring event. If the user decides to answer the call by
pressing the answer key, the answer key event is generated, which makes the state
machine move to the Answer state if the answer key event happens half a second
to 25 seconds after the Ring state. On a Symbian cell phone, we can observe an
EStatusAnswering event. At this time, the state machine starts a timer. When
the user terminates the call by pressing the cancel key or hanging it up, the
state machine turns to the End state followed by a Symbian EStatusDisconnecting
event. The state machine now stops the timer and calculates the calling duration.
Finally the state machine returns to Idle state and generates a receiving call
operation with the call duration. In a similar approach, we conduct experiments
to build state machines for other user operations we have deﬁned.
Idle
ring event
cancel key
hangup event
Ring
End
stop timer
cancel key
hangup event
 call operation
       (receiving)
       ( duration)
answer key event
[0.5<delay<25]
EstatusRinging
EstatusDisconnecting
Answer
start timer
EstatusAnswering
Fig. 3. State Machine for Receiving a Phone Call
254
L. Liu et al.
6 Model Checking for Malware Detection
With the power model and the state machines available, VirusMeter can perform
malware detection in a straightforward manner: we use the power model to
predict how much power should be consumed and then compare it against the
measured power consumption. If abnormal power consumption is observed, an
alert is raised. Here, VirusMeter is designed with two running modes:
– Real-time mode: VirusMeter uses the linear regression power model to predict
power consumption due to its low computational cost.
– Battery-charging mode: Although linear regression is easy to perform, it
may generate false detection results since (1) it implicitly assumes a linear
relationship among all variables, and (2) power measurements may have
ﬂuctuations due to electro-chemical battery properties. Thus, VirusMeter
accumulates power consumption measurement data and uses the neural net-
work model and the decision tree algorithm to perform malware detection
when the battery is charging.
It is noted that both modes can also run oﬀ the mobile device. For example,