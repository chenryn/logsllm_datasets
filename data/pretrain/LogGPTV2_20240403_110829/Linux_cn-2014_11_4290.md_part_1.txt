---
author: Gerhard Lazu
category: 观点
comments_data:
- date: '2014-11-24 16:33:01'
  message: '@我的印象笔记'
  postip: 117.26.249.10
  username: 微博评论
- date: '2014-11-25 14:01:56'
  message: DevOps 持续火热哈。
  postip: 123.126.22.250
  username: soli
count:
  commentnum: 2
  favtimes: 2
  likes: 0
  sharetimes: 4
  viewnum: 13973
date: '2014-11-24 15:30:24'
editorchoice: false
excerpt: 在 Docker 和 Ansible 的技术社区内存在着很多好玩的东西，我希望在你阅读完这篇文章后也能像我们一样热爱它们。当然，你也会收获一些实践知识，那就是如何通过部署
  Ansible 和 Docker 来为 Rails 应用搭建一个完整的服务器环境。 也许有人会问：你怎么不去用 Heroku？首先，我可以在任何供应商提供的主机上运行
  Docker 和 Ansible；其次，相比于方便性，我更偏向于喜欢灵活性。我可以在这种组合中运行任何程序，而不仅仅是 web 应用。最后，我骨子里是一个工匠，我非常了解如何把零件拼凑在一起工作。Heroku
  的基础模块是 Linux Containe
fromurl: http://thechangelog.com/ansible-docker/
id: 4290
islctt: true
largepic: /data/attachment/album/201411/24/153029kpg1olikdiokidzd.png
permalink: /article-4290-1.html
pic: /data/attachment/album/201411/24/153029kpg1olikdiokidzd.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在 Docker 和 Ansible 的技术社区内存在着很多好玩的东西，我希望在你阅读完这篇文章后也能像我们一样热爱它们。当然，你也会收获一些实践知识，那就是如何通过部署
  Ansible 和 Docker 来为 Rails 应用搭建一个完整的服务器环境。 也许有人会问：你怎么不去用 Heroku？首先，我可以在任何供应商提供的主机上运行
  Docker 和 Ansible；其次，相比于方便性，我更偏向于喜欢灵活性。我可以在这种组合中运行任何程序，而不仅仅是 web 应用。最后，我骨子里是一个工匠，我非常了解如何把零件拼凑在一起工作。Heroku
  的基础模块是 Linux Containe
tags:
- Docker
- Ansible
thumb: false
title: Ansible和Docker的作用和用法
titlepic: false
translator: bazz2
updated: '2014-11-24 15:30:24'
---
在 [Docker](https://www.docker.io/) 和 [Ansible](https://github.com/ansible/ansible) 的技术社区内存在着很多好玩的东西，我希望在你阅读完这篇文章后也能像我们一样热爱它们。当然，你也会收获一些实践知识，那就是如何通过部署 Ansible 和 Docker 来为 Rails 应用搭建一个完整的服务器环境。
也许有人会问：你怎么不去用 Heroku？首先，我可以在任何供应商提供的主机上运行 Docker 和 Ansible；其次，相比于方便性，我更偏向于喜欢灵活性。我可以在这种组合中运行任何程序，而不仅仅是 web 应用。最后，我骨子里是一个工匠，我非常了解如何把零件拼凑在一起工作。Heroku 的基础模块是 Linux Container，而 Docker 表现出来的多功能性也是基于这种技术。事实上，Docker 的其中一个座右铭是：容器化是新虚拟化技术。
![](/data/attachment/album/201411/24/153029kpg1olikdiokidzd.png)
### 为什么使用 Ansible？
我重度使用 Chef 已经有4年了（LCTT：Chef 是与 puppet 类似的配置管理工具），**基础设施即代码**的观念让我觉得非常无聊。我花费大量时间来管理代码，而不是管理基础设施本身。不论多小的改变，都需要相当大的努力来实现它。使用 [Ansible](http://ansible.com/)，你可以一手掌握拥有可描述性数据的基础架构，另一只手掌握不同组件之间的交互作用。这种更简单的操作模式让我把精力集中在如何将我的技术设施私有化，提高了我的工作效率。与 Unix 的模式一样，Ansible 提供大量功能简单的模块，我们可以组合这些模块，达到不同的工作要求。
除了 Python 和 SSH，Ansible 不再依赖其他软件，在它的远端主机上不需要部署代理，也不会留下任何运行痕迹。更厉害的是，它提供一套内建的、可扩展的模块库文件，通过它你可以控制所有的一切：包管理器、云服务供应商、数据库等等等等。
### 为什么要使用 Docker？
[Docker](http://docker.io/) 的定位是：提供最可靠、最方便的方式来部署服务。这些服务可以是 mysqld，可以是 redis，可以是 Rails 应用。先聊聊 git 吧，它的快照功能让它可以以最有效的方式发布代码，Docker 的处理方法与它类似。它保证应用可以无视主机环境，随心所欲地跑起来。
一种最普遍的误解是人们总是把 Docker 容器看成是一个虚拟机，当然，我表示理解你们的误解。Docker 满足[单一功能原则](http://en.wikipedia.org/wiki/Single_responsibility_principle)，在一个容器里面只跑一个进程，所以一次修改只会影响一个进程，而这些进程可以被重用。这种模型参考了 Unix 的哲学思想，当前还处于试验阶段，并且正变得越来越稳定。
### 设置选项
不需要离开终端，我就可以使用 Ansible 来在这些云平台中生成实例：Amazon Web Services，Linode，Rackspace 以及 DigitalOcean。如果想要更详细的信息，我于1分25秒内在位于阿姆斯特丹的2号数据中心上创建了一个 2GB 的 DigitalOcean 虚拟机。另外的1分50秒用于系统配置，包括设置 Docker 和其他个人选项。当我完成这些基本设定后，就可以部署我的应用了。值得一提的是这个过程中我没有配置任何数据库或程序开发语言，Docker 已经帮我把应用所需要的事情都安排好了。
Ansible 通过 SSH 为远端主机发送命令。我保存在本地 ssh 代理上面的 SSH 密钥会通过 Ansible 提供的 SSH 会话分享到远端主机。当我把应用代码从远端 clone 下来，或者上传到远端时，我就不再需要提供 git 所需的证书了，我的 ssh 代理会帮我通过 git 主机的身份验证程序的。
### Docker 和应用的依赖性
我发现有一点挺有意思的：大部分开发者非常了解他们的应用需要什么版本的编程语言，这些语言依赖关系有多种形式：Python 的包、Ruby 的打包系统 gems、node.js 的模块等等，但与数据库或消息队列这种重要的概念相比起来，这些语言就处于很随便的境地了——随便给我个编程语言环境，我都能把数据库和消息队列系统跑起来。我认为这是 DevOps 运动（它旨在促进开发与运维团队的和谐相处）的动机之一，开发者负责搭建应用所需要的环境。Docker 使这个任务变得简单明了直截了当，它为现有环境加了实用的一层配置。
我的应用依赖于 MySQL 5.5和 Redis 2.8，依赖关系放在“.docker*container*dependencies”文件里面：