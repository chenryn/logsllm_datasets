---
author: Brian D Foy
category: 新闻
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4647
date: '2020-06-25 22:44:37'
editorchoice: false
excerpt: 它是默认带有现代行为的 Perl 5，将为以后更大的变化奠定基础。
fromurl: https://www.perl.com/article/announcing-perl-7/
id: 12349
islctt: true
largepic: /data/attachment/album/202006/25/222345bm22b7uvsb2vb636.jpg
permalink: /article-12349-1.html
pic: /data/attachment/album/202006/25/222345bm22b7uvsb2vb636.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 它是默认带有现代行为的 Perl 5，将为以后更大的变化奠定基础。
tags:
- Perl
thumb: false
title: Perl 继续前行，Perl 7 将是下一代（硬核老王点评版）
titlepic: true
translator: wxy
updated: '2020-06-25 22:44:37'
---
![](/data/attachment/album/202006/25/222345bm22b7uvsb2vb636.jpg)
近日[召开的 Perl 大会是在云端举办的](https://perlconference.us/tpc-2020-cloud/)，在会上 Sawyer X 宣布 Perl 有了新的前进计划。Perl 7 的开发工作已经在进行中，但不会有代码或语法上的巨大变化。它是默认带有现代行为的 Perl 5，将为以后更大的变化奠定基础。
> 
> 硬核老王：在经历了 Perl 6 失败的巨大痛苦之后，Perl 社区终于从阴霾的心情中走出了。但是失去的黄金 20 年却是挽回不了了，否则别说 PHP，都不会有 Python 什么事。我认为，Perl 7 是一条自我救赎之路，应该，或许，会有新的 Perl 7、Perl 8 吧……
> 
> 
> 
### Perl 7 基本上是 Perl 5.32
Perl 7.0 将会是 Perl 5 系列的 5.32，但会有不同的、更合理的、更现代的默认行为。你不需要启用大多数你已经设置过的默认行为，因为这些已经为你启用了。这个大版本跳跃为我们一直以来的工作方式和未来可以做的事情之间设定了一个界限。
> 
> 硬核老王：可以理解为，Perl 是一个 Perl 5 兄弟们亲手打下的家族企业，而 Perl 6 是外面请来的职业经理人，结果经理人要对家族企业采用现代化管理，差点鸡飞蛋打。现在好了，Perl 6 分家出去单过了，亲儿子 Perl 7 准备重振家业。
> 
> 
> 
请记住，Perl 是一门“按我的意思做”的语言，其默认行为可能就是你想要的。在 Perl 4 和 Perl 5 的早期，这很容易。但是，几十年过去了，现在的世界更加复杂了。我们不断地往其中添加编译指令，但由于 Perl 对向后兼容的承诺，我们不能改变其默认行为。现在，我们又回到了 C 语言的旧时代，在开始做一些事情之前，我们必须包含大量的例行模板：
```
use utf8;
use strict;
use warnings;
use open qw(:std :utf8);
no feature qw(indirect);
use feature qw(signatures);
no warnings qw(experimental::signatures);
```
这一点在 v5.12 及以后的版本中稍有好转，因为我们可以通过使用设置最低版本来免去设置 `strict` 指令：
```
use v5.32;
use utf8;
use warnings;
use open qw(:std :utf8);
no feature qw(indirect);
use feature qw(signatures);
no warnings qw(experimental::signatures);
```
> 
> 硬核老王：不可否认，Perl 二十年前如日中天，那个时候，不说终端运行的脚本，就是互联网上主要的互动程序（CGI），也几乎全是用 Perl 写的。但是在风口时代它的主要精力都在折腾 Perl 6，而 Perl 5 系列不但很多地方显得老旧，历史包袱也过重。向前不能保持原有的精巧习惯，向后不能跟上现代的软工理念。
> 
> 
> 
Perl 7 是一个新的机会，即使不指定版本，也可以把其中的一些行为变成默认行为。Perl 5 仍然有它的极度向后兼容的行为，但 Perl 7 将以最小的历史包袱获得现代实践的新生。我个人希望 签名   （    signatures    ） 功能能够入选到新的版本，但要让 Unicode 成为默认行为还有很多工作要做，所以你可能需要保留其中的一些编译指令：
```
use utf8;
use open qw(:std :utf8);
```
你可能会丢掉一些你肯定不应该使用的垃圾功能，比如间接对象表示方式。Larry Wall 说他必须为 C++ 程序员做点什么。
```
my $cgi = new CGI;  # 间接对象，但在 Perl 7 不这样用了
my $cgi = CGI->new; # 直接对象
```
但是，这个功能在 Perl 7 中并没有真正消失。它在 v5.32 中已经可以[通过设置关闭](https://www.effectiveperlprogramming.com/2020/06/turn-off-indirect-object-notation/)了，但现在有了不同的默认行为。
### Perl 5 怎么了？
没有人要把 Perl 5 从你身边夺走，它将进入长期维护模式 —— 比最新用户版本的两年滚动支持时间的两倍都要长得多。这可能要从现在支持到十年后了（或者说 Perl 5 已经人过中年了）。
> 
> 硬核老王：这样挺好，旧时代的继续留在旧时代，新生代的轻装前行。
> 
> 
> 
### 什么时候开始？
这项工作现在就在进行，但你不需要担心，大约六个月后，才会出现第一个候选版本。我们的目标是在明年发布 Perl 7.0 的用户版本，并在这期间发布一些候选版本。
这也是一个容易实现的承诺，因为 Perl 7 基本上就是 v5.32，默认行为不同而已。没有大的重写，也没新的功能，尽管目前一些实验性的功能可能会稳定下来（请把“签名”功能选入！）。
### CPAN 怎么办？
CPAN（ 综合 Perl 档案网   （    Comprehensive Perl Archive Network    ） ）有近 20 万个模块。人们正在使用的处于维护状态的模块应该还能用，对于其它的模块会有一个兼容模式。记住 Perl 7 主要是 v5.32，所以你应该不需要修改太多。
你可能不知道 [Perl5 Porters](https://lists.perl.org/list/perl5-porters.html) 几乎会针对所有的 CPAN 模块测试其新版本。这个用于检查更改可能对 Perl 社区产生影响的工具已有很长的历史了。作为一个模块的作者，我经常会收到来自不同人的消息，主要是 Andreas Koenig 或 Slaven Rezić，他们说我的模块中的一些奇怪的东西可能会在新的 Perl 版本中出问题。通常，我总是需要更新一些东西来解决这些问题。追踪现有代码中的问题已经不是问题了。修复代码应该不会那么繁琐，因为它仍然是 Perl 5，但有更好的实践。
> 
> 硬核老王：知道当年 Perl 为什么强悍吗？有一个主要的原因是，Perl 有个无所不包的 CPAN 仓库。
> 
> 
> 
会不会有一个单独的 Perl 7 的 CPAN？没有人说不能有，但是在跳转到 Perl 7 的过程中，开发人员不希望重做已经可以工作的东西。这个变化应该是可以控制的，尽量减少副作用。