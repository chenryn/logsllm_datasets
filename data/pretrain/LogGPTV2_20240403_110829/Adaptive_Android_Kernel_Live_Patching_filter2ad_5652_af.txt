# References

[36] JANA, S., KANG, Y., ROTH, S., AND RAY, B. Automatically Detecting Error Handling Bugs Using Error Specifications. In 25th USENIX Security Symposium (USENIX Security '16), Austin, August 2016.

[37] KASHYAP, S., MIN, C., LEE, B., KIM, T., AND EMELYANOV, P. Instant OS Updates via Userspace Checkpoint-and-Restart. In 2016 USENIX Annual Technical Conference (2016).

[38] KIM, D., NAM, J., SONG, J., AND KIM, S. Automatic Patch Generation Learned from Human-written Patches. In Proceedings of the 2013 International Conference on Software Engineering, IEEE, pp. 802–811, 2013.

[39] LUO, L., MING, J., WU, D., LIU, P., AND ZHU, S. Semantics-based Obfuscation-resilient Binary Code Similarity Comparison with Applications to Software Plagiarism Detection. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, ACM, pp. 389–400, 2014.

[40] MING, J., PAN, M., AND GAO, D. iBinHunt: Binary Hunting with Inter-procedural Control Flow. In Proceedings of International Conference on Information Security and Cryptology, Springer, pp. 92–109, 2012.

[41] PERKINS, J. H., KIM, S., LARSEN, S., AMARASINGHE, S., BACHRACH, J., CARBIN, M., PACHECO, C., SHERWOOD, F., SIDIROGLOU, S., SULLIVAN, G., WONG, W.-F., ZIBIN, Y., ERNST, M. D., AND RINARD, M. Automatically Patching Errors in Deployed Software. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles, October 2009.

[42] ROSENBERG, D. QSEE TrustZone Kernel Integer Overflow Vulnerability. In Black Hat USA, 2014.

[43] SHEN, D. Exploiting TrustZone on Android. In Black Hat USA, 2015.

[44] SHOSHITAISHVILI, Y., WANG, R., SALLS, C., STEPHENS, N., POLINO, M., DUTCHER, A., GROSEN, J., FENG, S., HAUSER, C., KRUEGEL, C., AND VIGNA, G. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. In Proceedings of the 37th IEEE Symposium on Security and Privacy, 2016.

[45] SIDIROGLOU, S., LAADAN, O., PEREZ, C., VIENNOT, N., NIEH, J., AND KEROMYTIS, A. D. ASSURE: Automatic Software Self-healing Using Rescue Points. In Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems, March 2009.

[46] SILBERSCHATZ, A., GALVIN, P. B., AND GAGNE, G. Operating System Concepts. Wiley, 2012.

[47] ZHANG, H., SHE, D., AND QIAN, Z. Android Root and Its Providers: A Double-Edged Sword. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, New York, NY, USA, 2015, ACM, pp. 1093–1104.

## Evaluation of Applicability: Additional Case Studies

### A.1 CVE-2014-3153 (Towelroot)

This vulnerability, known as "Towelroot," is the second most commonly used exploit for rooting Android devices. It resides in the `futex_requeue` function, which takes the addresses of two futexes as arguments. By design, the function should only re-queue from a non-PI (priority inheritance [46]) futex to a PI futex. However, this condition is violated if the two addresses point to the same futex, leading to an exploitable dangling pointer condition. To fix this bug, Linux adds a check to ensure that the two futex addresses are different [13]. In KARMA, this can be addressed by hooking the `futex_requeue` function, obtaining its arguments, and comparing their equality. If an attack is detected, the patch returns `-EINVAL` (Figure 4).

### A.2 CVE-2015-3636 (PingPong Root)

Another popular vulnerability for rooting Android devices, known as "PingPong Root," originates from the interaction between the `socket` and `hlist` functions. Specifically, when `hlist_nulls_del(&sk->sk_nulls_node)` is called, it assigns `LIST_POISON2` to `sk->sk_nulls_node.pprev`. `LIST_POISON2` is defined as a constant value. If interpreted as an address, `LIST_POISON2` can be mapped by a malicious app in user space without any permissions. A subsequent call to `connect` by the attacker results in a use-after-free on the attacker-controlled address, compromising the kernel. The Linux patch sets the pointer to `NULL` in the `ping_unhash` function [16]. However, this method cannot be applied by KARMA because its patch is prohibited from writing to kernel memory. Instead, the patch checks if `sk->sk_nulls_node.pprev` equals `LIST_POISON2`. If so, it returns an error code without freeing the associated memory, blocking the exploit but leaving the socket object on the list. This patch, while not clean, works and does not impact the kernel's functionalities. Alternatively, KARMA can hook `connect` in the kernel to prevent reusing the freed socket.

## Table 6: Recent Critical Android Kernel Vulnerabilities and KARMA's Effectiveness

| **Vulnerability** | **Hotpatching Using KARMA** | **Adaptable?** |
|------------------|-----------------------------|----------------|
| CVE-2016-7117    | Hook `__sys_recvmmsg` and its invocation of `fput`. On returning of `fput`, check if `__sys_recvmmsg`'s `err` is not equal to 0 and not equal to `-EAGAIN`. If so, return `err` and skip the rest of the execution. | ! |
| CVE-2016-5340    | Hook `is_ashmem_file` and check the full path of the input file. Only return `True` if the full path is `/dev/ashmem`. Otherwise, return `False`. | ! |
| CVE-2016-4470    | Hook `key_reject_and_link` and its invocation of `__key_link_end`. Check if `link_ret` is 0 before calling into `__key_link_end`. If so, simply return. | Level-3 |
| CVE-2016-3951    | Hook `do_ipv6_setsockopt` to avoid concurrent access to the socket options of the same socket fd. | ! |
| CVE-2016-3841    | Hook `aio_setup_single_vector` and check if the input `kiocb->ki_nbytes` exceeds `MAX_RW_COUNT`. If so, return `-EFAULT`. | ! |
| CVE-2016-3775    | Hook `mtk_p2p_wext_discovery_results` etc. functions of which the bodies are deleted by the official patch, and simply return 0. | ! |
| CVE-2016-3768    | Android does not enable `CONFIG_USER_NS` so this should not be a direct threat to Android devices. But KARMA can still fix it by iterating `newpos = pos + e->next_offset` to check if there is an out-of-bound access. | ! |
| CVE-2016-3767    | It requires to reorder the instructions (to change when to take the lock). This is not an allowed operation by KARMA. | ! |
| CVE-2016-3134    | Hook `hdd_parse_ese_beacon_req` and check the `tempInt` read from the argument `pValue`. If it exceeds `SIR_ESE_MAX_MEAS_IE_REQS`, return `-EINVAL`. | ! |
| CVE-2016-2503    | Hook `_kgsl_sharedmem_page_alloc` and validate the input size. | ! |
| CVE-2016-2474    | Hook `msm_compr_ioctl` and check if `MAX_AC3_PARAM_SIZE`. If so, return `-EINVAL` without executing into it. | ! |
| CVE-2016-2468    | Hook `adm_get_params` and check if `adm_get_parameters[]` exceeds `ADM_GET_PARAMETER_LENGTH-1` and `params_length/sizeof(int)`. If so, return `-EINVAL`. | ! |
| CVE-2016-2467    | Hook the concerned functions in `drivers/video/msm/mdss/mdss_debug.c` patched in the original patch, and their invocations of `__copy_to_user`. Validate `len` and `count`, and return `-EFAULT` in case of exploit conditions. | ! |
| CVE-2016-2466    | Hook `check_vma` and return `-EFAULT` if `vma->vm_flags & memdesc->flags != memdesc->flags`. | ! |
| CVE-2016-2465    | Hook `adreno_perfcounter_query_group` and its invocation of `kmalloc`. On entry of `kmalloc`, check if `t` is larger than `count`. | ! |
| CVE-2016-2067    | Hook `ipa_wwan_ioctl` and its invocation of `find_mux_channel_index`. On entry of `find_mux_channel_index`, if the value of `rmnet_index` exceeds `MAX_NUM_OF_MUX_CHANNEL`, return `-EFAULT` directly. | ! |
| CVE-2016-2062    | Hook `msm_l2_test_set_ev_constraint` and check if `shift_idx >= PMU_CODES_SIZE`. Return `-EINVAL` in case of that. | ! |
| CVE-2016-0844    | Hook `priv_get_struct` and its invocation of `__copy_from_user`, check if `prIwReqData->data.length > u4CopyDataMax` and return `-EFAULT` if so. | ! |
| CVE-2016-0843    | Hook `iw_softap_set_channel_range` and check if the caller has the capability `CAP_NET_ADMIN`, return `-EPERM` if not. | ! |
| CVE-2016-0820    | Hook `get_krait_evtinfo` and check if `reg` exceeds `krait_max_l1_reg`, return `-EINVAL` if so. | ! |
| CVE-2016-0806    | Hook `wl_validate_wps_ie` and check if `subelt_len` exceeds the size of `devname` (100). Hook `wl_notify_sched_scan_results` and its invocation of `memcpy` and check if the buffer length passed in exceeds `DOT11_MAX_SSID_LEN`. | ! |
| CVE-2016-0805    | Hook `asn1_find_indefinite_length` and check if `dp` is larger than `datalen`. Return `-1` if so. | ! |
| CVE-2016-0801    | Hook `join_session_keyring` and iterate the keyring. Return error if `keyring->usage` reaches the overflow boundary (0xFFFFFFFF). | ! |

**Note:** Some adaptable vulnerabilities are omitted due to space constraints.

---

This version of the text is more structured and clear, with proper formatting and consistent use of terminology.