manipulator  dynamics  using  the  first  three  (out  of  seven) 
degrees  of  freedom  only  (two  rotational  joints  plus  one 
translational  joint).  This  is  reasonable  because  the  first  three 
joints  are  positioning  joints  which  contribute  most  to  the 
instruments’  end-effectors’  positions,  while  the  other  four 
degrees of freedom are instrument joints, mainly affecting the 
orientation of the end-effectors. The model estimates the next 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
Integration 
Method 
(Step Size:1 ms) 
4-th Order 
Runge Kutta 
Euler 
Avg. 
Time/ 
Step 
(ms) 
0.032 
0.011 
Joint 1 
Avg. Error 
(% deg.) 
mpos  
jpos  mpos 
115.0 
(2.4) 
136.6 
(2.4) 
0.9 
(2.4) 
1.0 
(2.4) 
178.1 
(1.5) 
132.8 
(1.4) 
Joint 2 
Avg. Error  
(% deg.) 
Joint 3 
Avg. Error 
(%) 
jpos  mpos
(deg)
181.9
1.8 
(2.0) 
(0.3) 
180.6
1.4 
(1.9) 
(0.3) 
jpos 
(mm) 
1.4 
(0.4) 
1.3 
(0.3) 
Figure 8. Validation of dynamic model:  Trajectories generated by the 
dynamic model and the robot and average estimation error  
states  of  the  first  three  motors  and  the  corresponding  joint 
states,  including  shoulder  joint  (rotational),  elbow  joint 
(rotational), tool insertion/retraction (translational) on one arm. 
Two  sets  of  second-order  ordinary  differential  equations 
were used to describe the dynamic model of the robot, including 
link  (joint)  and  motor  dynamics,  similar  to  [35].  The  robot 
mechanical properties, such as link mass, inertia, and center of 
mass  location  were  obtained  from  the  CAD  models  of  the 
joints.  The  coefficients  of  these  models  were  obtained  via 
manual  tuning  based  on  [35],  so  that  the  dynamic  model 
trajectory and the real robot trajectory are close.  
The 4th order Runge-Kutta and explicit Euler methods were 
used for calculating the solutions for these equations using the 
numerical  integration  solver  (odeint)  package  in  C++.  We 
validated  this  dynamic  model  by  comparing  the  operational 
trajectory of the RAVEN II robot with the corresponding trace 
generated by the dynamic model. Specifically, we measured the 
performance  of  the  dynamic  model  in  terms  of  the  average 
estimation  error  and  the  required  time  for  performing  the 
estimation  at  each  robot  control  cycle.  Figure  8  shows  the 
average run time and average motor and joint position errors for 
the 4-th order Runge Kutta and Euler solvers, by calculating the 
average of mean absolute errors estimated for each trajectory, 
over 10 different runs of model and robot together. As shown 
in the table, for the specific trajectories experimented here, the 
Euler technique with a step size of 1 millisecond provides us 
with  the  best  trade-off  between  execution  time  and  average 
trajectory  error.  The  average  execution 
time  of  0.011 
milliseconds is within the timing constraint of 1 millisecond of 
the RAVEN control loop, which enables running of the model 
in parallel with the robot control software.  
Figure 8 also shows trajectories of the first three joints and 
motors when running the model (blue plot) in parallel with the 
physical system (red plot) and both receiving the same control 
input, calculated based on the encoder feedback from the real 
robot. As we see in the figure the model closely follows the 
trajectory of the actual robot. 
2)  Attack  Injection  Engine:  The  core  of  the  attack 
injection engine is a software implemented fault-injection tool 
that  can  be  programmed  to  install  wrappers  around  different 
system  calls  in  the  control  software  to  create  the  attack 
scenarios  shown  in  Table  I.  The  attack  injector  can  inject 
malicious 
inputs/commands  with  different  values  and 
activation  periods  to  the  control  software  at  different  times 
during a running trajectory (e.g., a surgical operation).  
B.  Assessing the Impact of Attacks 
We used the dynamic model-based simulation framework in 
Figure 7(a) for assessing the impact of attack scenarios A and B 
by  injecting  a  variety  of  unintended  user  inputs  (malicious 
desired  end-effector  positions)  and  malicious  motor  torque 
commands  to  RAVEN  control  software.  The  simulation 
framework enabled us to assess the resiliency of the robot by 
performing thousands of injections without causing damages to 
the real robot. Representative fault injection experiments were 
repeated on the actual robot to validate the consistency between 
the  robot  and  model  behavior.  We  made  the  following 
observations by simulating these attack scenarios: 
1.  Malicious torque commands that inject small errors to the 
DAC values do not have any impact on the robot state, unless 
they are activated for periods of larger than 64 milliseconds. 
If injected for shorter periods (e.g., 2-4 milliseconds), they 
can cause abrupt jumps in the motor velocities but the impact 
do not propagate to the next control loop and do not impact 
motor, joint, and end-effector positions, unless larger values 
are injected for longer periods. This is due to the fact that the 
PID controller inside the control corrects the errors in motor 
velocity  and  motor  positions  at  each  cycle  of  the  control 
loop. Therefore, to corrupt the physical state of the robot, the 
attacker  needs  to  keep  injecting  malicious  values  to  the 
commands over a long enough period of time.  
2.  The  existing  safety  checks  in  RAVEN  cannot  detect  the 
abrupt  jumps  resulted  from  malicious  torque  commands 
(injected after the software safety checks are done) until the 
physical system state is corrupted to a point where the PID 
control cannot fix the errors anymore. This is because: 
(i)  these safety mechanisms only check the DAC commands 
calculated  in  software  being  sent  to  the  robot  by 
comparing it to a fixed threshold. They do not take into 
account the semantics of the control commands and their 
consequences  in  the  physical  system,  i.e.,  impact  of  a 
DAC command on the state of the robot, motor positions 
and velocities, joint positions, and end-effector positions.  
(ii) the safety check are done at the latest computation step in 
the  control  software  before  sending  the  commands  to 
physical  system.  Therefore,  there  is  a  TOCTOU  gap, 
from the time the commands are checked to the time they 
are executed on the physical system, allowing attackers 
to target the system.    
C.  Anomaly Detection and Attack Mitigation  
In order to preemptively detect the adverse impact of the 
attacks on the physical robot, we integrate the dynamic model-
based  analysis  framework  with  the  robot  control  system,  to 
403
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
estimate the consequences of control commands before they are 
sent to the motor controllers and are executed on the physical 
robot (Figure 7(b)). Our goal is to detect if a given command 
will  cause  an  unsafe  jump  of  more  than  1  millimeter  on  the 
robot  end-effector  position  within  a  short  period  of  1-2 
milliseconds (based on feedback from expert surgeons).  
We design an anomaly detection mechanism that intercepts 
the DAC commands sent by the RAVEN control software and 
estimates the values for the next motor velocities and positions 
and joint positions using the robot dynamic model in real time. 
The  detector  raises  an  alert  whenever  the  estimated  instant 
velocity and acceleration on the first three motors and joints 
(the difference between the estimated values for the next step 
and current values) are beyond a pre-defined safety threshold 
(defined as 1 millimeter jump on end-effectors). The thresholds 
used for detecting anomalies are learned through measuring the 
maximum instant velocities of each of the variables over 600 
fault-free  runs  of  the  model  with  two  different  trajectories 
containing sufficient variability in the movement. To eliminate 
the sensitivity of sample statistics to outliers and possible noise 
in  measurements,  we  chose  values  between  the  99.8–99.9th 
percentiles of instant velocity as the threshold for each variable. 
In order to reduce false alarms due to model inaccuracies and 
natural  noise  in  the  trajectory,  the  detector  fuses  the  alarms 
based  on  the  motor  acceleration,  motor  velocity,  and  joint 
velocity  and  raises  an  alert  only  when  all  three  variables 
indicate an abnormality.  
Table IV shows the performance of dynamic-model based 
anomaly  detection  mechanism  compared  to  the  existing 
detection  and  emergency  stop  (E-STOP)  mechanisms  in  the 
RAVEN  II  robot  in  terms  of  detection  accuracy  (ACC),  true 
positive  rate  (TPR),  false  positive  rate  (FPR),  and  F1-score 
(which is a unified measure of precision and recall). The results 
were  achieved  from  1,925  experiments  simulating  the  attack 
scenario A and 1,361 simulation runs of the attack scenario B. 
Figure  9  shows  the  impact  of  attack  activation  period  and 
injected error values in scenario B on the probability of adverse 
impact  on  the  robot  physical  system  (abrupt  jumps  of  end-
effector  positions)  and  probability  of  attack  detection  and 
mitigation by the dynamic-model based detection and the robot 
safety mechanisms. Each attack scenario with specific distance 
error and activation period was repeated for at least 20 times to 
achieve confidence in the probability estimates. The conditional 
Table  IV.  Dynamic-model  based  detection  performance  evaluation, 
compared to RAVEN detector 
Attack Scenario Technique  ACC  TPR  FPR 
12.4  
F1 
74.8  
88.0  
89.8  
84.6  
53.3  
92.0 
90.7 
99.8 
81.0 
7.7  
11.8 
4.6 
57.8  
89.1 
85.1 
A 
(User inputs) 
B 
(Torque 
commands) 
Dynamic 
Model  
RAVEN  
Dynamic 
Model 
RAVEN 
probability  of  attacks  given  each  injected  error  value  v  and 
activation  period  d  was  estimated  by  calculating  marginal 
conditional probabilities from the measured data.   
Figure  9  shows  that  by  injecting  larger  error  values  and 
increasing  the  activation  period  the  probability  of  adverse 
impact on the physical system  increases. Our dynamic-model 
based anomaly detection has higher probability of preemptively 
detecting  the  attacks  before  their  impact  manifests  in  the 
physical system than the RAVEN safety checks that only detect 
the impact after it has already happened. As shown in Table IV, 
the  dynamic-model  based  detector  could  detect  the  simulated 
attacks scenarios with an averaged accuracy of 90% and average 
F1-score  of  82%.  For  attack  scenarios  A  and  B,  there  were 
respectively  152  and  84  cases  where  the  dynamic–model 
detected  an  abrupt  jump  on  end-effectors  while  the  RAVEN 
checks did not detect them. There were a total of 13 true cases 
(in scenario A) that our detector missed but RAVEN detected.  
The probability of RAVEN safety mechanisms in detecting 
and  mitigating  the  adverse  impact  is  always  lower  than  the 
probability of adverse impact, i.e., the RAVEN safety checks 
cannot detect all the adverse scenarios. Thus, the attacker has a 
chance of causing an adverse impact on the physical system by 
carefully  engineering  injections  with  values  that  will  not  be 
detected by the robot for even short periods of 2-16 milliseconds 
(Figure 9(b)). But this chance is reduced when injecting larger 
error values for longer periods (of more than 64 milliseconds).  
Upon detection of potential adverse impact on the physical 
system,  the  impact  of  attacks  can  be  mitigated  by  either 
correcting the malicious control command by forcing the robot 
to stay in a previously safe state or stopping the commands from 
execution  and  put  the  control  software  into  a  safe  state  (E-
STOP).  The  ideal  location  for  insertion  of  detection  and 
mitigation mechanisms are at lower layers of control structure 
(a) 
Figure 9. Attack detection probability vs. injected error values and attack activation period 
(b) 
404
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
and just before the commands are going to be executed on the 
physical robot. This will decrease the probability of TOCTTOU 
exploits  by  requiring  attackers  to  compromise  the  hardware 
controllers  which  are  harder  to  access  compared  to  control 
software.  In  the  RAVEN  II  robot,  the  last  computational 
component before the motor controllers is the microcontroller 
inside  the  USB  interface  board.  The  implementation  of  the 
methods for calculating a numerical solution for the ODEs of 
the  dynamic  model  might  incur  high  computational  costs  in 
simple 
8-bit  AVR 
microcontroller with 128KB flash memory in RAVEN). One 
possible solution is to implement the parallel version of these 
estimation techniques on a custom trusted hardware module and 
run them concurrently with the robot control system.  
controllers 
hardware 
(e.g., 
an 
V.  RELATED WORK 