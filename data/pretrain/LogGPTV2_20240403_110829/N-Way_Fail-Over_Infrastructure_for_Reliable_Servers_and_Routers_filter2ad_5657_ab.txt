cute the Reallocate IPs() procedure. As shown above, all
servers that start this procedure in the same component
will have identical views of the IP coverage and will de-
tect the same “holes” (IP addresses that are not covered
by any server in the current component). Following the
algorithm, these IP’s are covered at the end of the Re-
allocate IPs() procedure, ensuring the complete coverage
during the RUN state.
2
From the two lemmas above, we obtain the correctness
property as speciﬁed in section 3.1.
We will now prove the liveness property.
Proof:
Due to the properties of the group communication
delivery speciﬁcation, if there is a time t from which
no view-change notiﬁcations occur, then every server is
guaranteed to deliver all the state messages that were sent
in that membership. At that time, each server will exe-
cute the ﬁnite procedure Reallocate IPs() and will switch
to the RUN state.
2
3.4 Practical Considerations
The algorithm presented so far satisﬁes the correctness
guarantees but can be further optimized in order to im-
prove its performance.
From a practical perspective we want to minimize the
amount of time that an IP address is covered by two or
more servers in the same connected component in order to
avoid network level conﬂicts. This is ensured by the fact
that the ResolveConﬂicts() procedure is invoked as soon
as a conﬂict is detected and one of the involved parties
will drop the offending IP.
Algorithm 3 BALANCE State
1: Balance IPs()
2: send BALANCE MSG
3: state = RUN
4: when: VIEW CHANGE or BALANCE MSG or
STATE MSG do
5:
delay event
Of similar importance to the system is the fast comple-
tion of reconciliation during the GATHER state. The min-
imal task that needs to be executed in the Reallocate IPs()
procedure is the acquisition of non-allocated IP addresses
in order to guarantee the complete coverage. However, af-
ter several partitions/merges, the system may end up with
a very unbalanced allocation of IP addresses among the
set of connected servers. To avoid this we can modify the
Reallocate IPs() procedure to perform load-based reallo-
cation of IP addresses. However, this would extend the
time the system is in a non-operational state. We intro-
duce a re-balancing procedure which is triggered from the
RUN state by a set timeout and is executed only by one
member (representative) of the connected component, se-
lected based on the order in the membership list provided
by the group communication system. The representative
decides on the new IP allocation based on load balanc-
ing considerations and explicit preferences speciﬁed by
each server at startup and passed along through state mes-
sages. The representative broadcasts a BALANCE MSG
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:00:51 UTC from IEEE Xplore.  Restrictions apply. 
containing the new IP allocation and switches back to the
RUN state. Upon receiving a BALANCE MSG, a server
in the RUN state acquires or releases the necessary IP ad-
dresses. Note that the BALANCE state executes as an
atomic procedure with the server ignoring any potential
VIEW CHANGE notiﬁcation from the group communi-
cation until it returns to the RUN state. Furthermore, even
when a VIEW CHANGE is detected before all servers re-
ceive and apply the BALANCE MSG the correctness of
the algorithm is not endangered since the GATHER pro-
cedure does not assume anything about the starting state
of the participating servers and treats any conﬂict as it is
discovered.
Another optimization was added in order to gracefully
bootstrap the system. A server s starts with the local vari-
able mature unset and without being responsible for any
IP addresses. Upon receiving a view change notiﬁcation,
s switches to the GATHER state. If during the GATHER
state s receives a state message from a mature server, it
will mark itself as mature and continue the normal algo-
rithm execution. If all the servers that s can contact are not
mature, s will remain ”immature” until a certain timeout
expires after which it automatically sets itself as mature,
notiﬁes the other servers, and starts managing the IP ad-
dresses. The reason for this optimization is to avoid quick
IP reallocations as the cluster is rebooted.
4
Implementation
Wackamole [23] has been implemented with cross-
platform interoperability in mind; it currently supports
FreeBSD, Linux, and Solaris systems. To more readily
accommodate its use on multiple platforms, the imple-
mentation is separated into two clearly delineated parts.
The ﬁrst, comprised of generic ANSI C code, implements
the core algorithm presented above. The second, which
contains platform-speciﬁc code, implements the function-
ality needed to manage multiple interfaces and spoof ARP
caches on each supported operating system.
4.1 The Spread Toolkit
The correctness as well as the efﬁciency of the sys-
tem depends on the use of a group communication system
that provides reliable, totally ordered multicast and group
membership notiﬁcations for a cluster of servers. Wack-
amole was implemented using the Spread group commu-
nication toolkit [20, 3].
Spread is a general-purpose group communication sys-
It provides re-
tem for wide- and local-area networks.
liable and ordered delivery of messages (FIFO, causal,
agreed ordering) as well as Virtual Synchrony and Ex-
tended Virtual Synchrony membership services. These
properties match the algorithm requirements speciﬁed in
Section 3.1
Spread uses a client-daemon architecture. Node
crashes/recoveries and network partitions/remerges are
detected by Spread at the daemon level; upon detecting
such an event, the Spread daemons install the new dae-
mon membership and inform their clients of the corre-
sponding changes in the group membership that are in-
troduced by the failure. Clients are also notiﬁed when
changes in the group membership are triggered by a
graceful leave or join of any client. The Spread toolkit is
optimized to support the latter situation without triggering
a full daemon membership reconﬁguration, but rather in-
forming only the participating group about the new group
membership. The impact of this optimized approach will
become apparent in section 6.
The Spread toolkit is publicly available and is being
used by several organizations in both research and pro-
duction settings. It supports cross-platform applications
and has been ported to several Unix platforms as well as
to Windows and Java environments.
4.2
Implementation Considerations
Wackamole’s state synchronization algorithm is im-
plemented using group membership and messaging ser-
vices offered by the Spread Toolkit. Immediately upon
startup, the Wackamole daemon connects to a Spread dae-
mon running on the same host and joins the wackamole
group. It then relies on the regular membership messages
sent by Spread to determine the current set of available
hosts, and to initiate state transfer upon view-change de-
tection. Spread is also used to ensure that messages are
sent in a total order among Wackamole daemons, that old
messages which must be discarded upon receipt can be
identiﬁed properly, and that endian conﬂicts across plat-
forms are handled correctly.
As a consequence of Wackamole’s tightly-coupled re-
lationship with Spread, some of the ﬁne-tuning decisions
that can be made to improve Wackamole’s response time
to network events are dependent on the way Spread is
conﬁgured. Modifying the Spread network-failure prob-
ing timeouts must be, however, done on a system-speciﬁc
basis. If not done properly, this tuning can be detrimental
to the performance of a Wackamole cluster by increasing
the number of false-positive network failures. The impact
of this tuning is analyzed in Section 6.
A Wackamole daemon that becomes disconnected
from Spread will drop all of its virtual interfaces and
enter a cycle in which it periodically attempts to recon-
nect to Spread, because it cannot ensure correctness with-
out the services Spread provides. This behavior allows
clusters to survive changes to the Spread daemons with
which they communicate, such as version changes and re-
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:00:51 UTC from IEEE Xplore.  Restrictions apply. 
Internet
Internet
Router
xxx.yyy.221.1
Wackamole:
Arp Spoof
Router
xxx.yyy.221.1
Webserver 1
xxx.yyy.221.151
Webserver 2
xxx.yyy.221.152
Webserver 3
xxx.yyy.221.153
Webserver 1
xxx.yyy.221.151
xxx.yyy.221.153
Webserver 2
xxx.yyy.221.152
Webserver 3
Figure 3. N-Way Fail-Over for Web Clusters: The IP of the failed server is reassigned to one of the
available servers and the router is informed of the ARP change.
Wackamole: Reallocate IP
initializations for conﬁguration modiﬁcation, taking into
account the fact that Spread may be used for multiple ap-
plications concurrently.
In order to provide continuous service to the Wack-
amole daemons, Spread must bind to IP addresses that are
not subject to Wackamole’s management. Consequently,
it is possible (although not required) to run Spread on a
separate Network Interface Card (NIC) than the one be-
ing used for the virtual IP addresses managed by Wack-
amole. Also, Wackamole does not provide failure detec-
tion of any of the applications that may be relying on its
management, e.g. HTTP servers. Either of these two sit-
uations can cause failures that are not detectable by the
Spread membership service. This problem is not directly
addressed by Wackamole’s implementation, but a possi-
ble solution is to perform run-time checks on the avail-
ability of the NIC or of the speciﬁc applications that use
Wackamole, and trigger the virtual IP migration when a
failure is detected.
Another practical aspect of the Wackamole implemen-
tation is the addition of an input channel to allow admin-
istrative control of a cluster’s behavior. Also, the way
Wackamole handles network failures can be modiﬁed,
such that all decisions are made by a deterministically
chosen representative and imposed upon the other dae-
mons, rather than made independently by each daemon
through a deterministic decision process. This will enable
changing the way virtual address allocation decisions are
made without breaking version compatibility.
5 Practical Applications
The two primary applications for which Wackamole
was developed are clusters and fail-over routers. The im-
plementation of Wackamole takes these applications into
account and can be ﬁne-tuned to make appropriate trade-
offs in either situation. We show how Wackamole pro-
vides availability for these applications.
5.1 N-Way Fail-over for Clusters
Web clustering is the application that drove the cre-
ation of Wackamole. In combination with Domain Name
Service (DNS), Wackamole provides the functionality to
enable websites served by multiple IP addresses and/or
hosted on a cluster of machines to be highly available.
The generic management of virtual addresses has already
been discussed. However, this class of application re-
quires Wackamole to perform an additional task: ARP
spooﬁng.
While IP addresses are used for routing on wide area
networks, on local area networks Media Access Control
(MAC) addresses are used. An IP address is resolved to
a MAC address using the Address Resolution Protocol
(ARP). In and of itself, this is not a problem for Wack-
amole. However, ARP data is cached on an IP address
basis. This cache must be updated for any virtual address
that is moved from one host to another, on each host that
has cached an  pair for that
virtual address.
Since we assume that we are managing a local area
cluster, all requests to the server must come through a
router. That router’s ARP cache must be updated in order
to ensure that it correctly forwards packets to the appro-
priate machine whenever Wackamole alters the allocation
of virtual addresses within the cluster. Consequently, part
of Wackamole’s platform-speciﬁc code deals with spoof-
ing of ARP reply packets to force updates to the router
ARP cache.
An example layout for a Wackamole-assisted web
cluster (Figure 3) consists of a number of web servers and
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:00:51 UTC from IEEE Xplore.  Restrictions apply. 
Internet
xxx.yyy.221.1
Virtual Router
Router 1
xxx.yyy.221.2
Router 2
xxx.yyy.221.3
Private Cluster (DB)
192.168.0.1
Internet
xxx.yyy.221.1
Virtual Router
Router 1
xxx.yyy.221.2
Router 2
xxx.yyy.221.3
Private Cluster (DB)
192.168.0.1
192.168.0.2
192.168.0.3
192.168.0.zzz
192.168.0.2
192.168.0.3
192.168.0.zzz
xxx.yyy.222.102
xxx.yyy.222.103
xxx.yyy.222.102
xxx.yyy.222.103
xxx.yyy.222.101 Visible Cluster (Web)
xxx.yyy.222.101 Visible Cluster (Web)
xxx.yyy.222.zzz
xxx.yyy.222.zzz
Figure 4. N-Way Fail-Over for Routers: At any point, a single physical router acts as the virtual
router, managing the virtual addresses xxx.yyy.221.1, xxx.yyy.222.101, 192.168.0.1.
a single router through which outside requests are made.
Each of the web servers must be running a Spread dae-
mon, likely on a private IP address, and must be running
a Wackamole daemon, to ensure that virtual IP addresses
are correctly allocated. Each server must also be responsi-
ble for notifying the router to update its ARP cache when
it assumes responsibility for a new virtual address.
5.2 N-Way Fail-Over for Routers
Router management is another application that has
emerged as a common use for Wackamole. An exam-
ple layout for this application of Wackamole consists of
multiple physical routers that act as a single virtual router
as depicted in Figure 4. An indivisible set of virtual ad-
dresses on different interfaces is allocated to the physi-
cal router currently acting as the fail-over router. In the
ﬁgure, these IP’s are xxx.yyy.222.101, 192.168.0.1, and
xxx.yyy.221.1 which represent the logical IP addresses of
the router in the three networks that it serves. The picture
also shows the stationary IP addresses of each physical
router, on each of the three networks. These IPs are de-
picted in the ﬁgure inside the Virtual Router box.
If the interface through which the machine is con-
nected to Spread fails, or the machine itself crashes, the
set of virtual IP addresses will be reallocated to a different
machine. The set of physical routers running Wackamole,
each of which is potentially ”the” router, can be concep-
tualized as a single virtual router.
For the most part, the presented Wackamole architec-
ture can support this application without additional modi-
ﬁcations beyond what is needed for web clustering. How-
ever, a router needs to simultaneously exist on multiple
networks in order to route packets between said networks.
Therefore a set of virtual IP addresses must be consid-
ered as a single entity. As a result, Wackamole was mod-
iﬁed to support grouping of multiple IP addresses, possi-
bly on different interfaces, as an indivisible set of virtual
addresses. This enables the correct handling of situations
where a single host being managed by Wackamole must
be accessible on multiple virtual addresses.
Furthermore,
the notiﬁcation mechanism for ARP
spooﬁng must be enhanced to update the ARP cache of
every host which has resolved the MAC address of the vir-
tual router. To facilitate the necessary notiﬁcation, each
Wackamole daemon periodically sends data from its ARP
cache to all other daemons. This makes it possible for a
daemon to approximately know the set of machines that
must be notiﬁed when it assumes responsibility for a vir-
tual IP address. Obviously, this approach does not scale
well to very large LANs. We are investigating the poten-
tial of applying garbage collection techniques to make the
ARP spoof notiﬁcation more accurately targeted towards
hosts that require such notiﬁcation.
The method described above incurs additional delays
when the router is using any dynamic routing protocol
such as OSPF [15] or RIP [18] on one or more of its
interfaces. The fail-over router in such a case needs to
be updated with the current state of the relevant dynamic
routing tables before it is able to route messages properly.
This usually takes around 30 seconds. A different setup
can be used to avoid this delay. In this alternate setup,
all the participating fail-over routers act as separate enti-
ties in the dynamic routing protocol and all advertise the
same internal networks to the external dynamic networks.
Therefore, all of the fail-over routers are continuously up-
dated with route changes. On the internal network only
one of the fail-over routers actively routes, and Wack-
amole will ensure that its IP address is always covered
by one of the fail-over routers.
Using this setup, a failure of any of the routers will
only cause a minor service interruption, noticeable only
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:00:51 UTC from IEEE Xplore.  Restrictions apply. 
by the fraction of the external routing queries that are di-
rected to the failed router. All routing from the internal
network will not be affected unless the designated router
fails. In this case, Wackamole reassigns another router
to control the virtual router address and the hand-off is