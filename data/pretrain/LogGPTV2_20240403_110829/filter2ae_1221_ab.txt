  * 证书序列号(Serial Number)
  * 签名算法标识符(Signature Algorithm)  
签名算法标识用来指定由CA签发证书时所使用的"签名算法"。算法标识符用来指定CA签发证书时所使用的:  
1) 公开密钥算法  
2) hash算法  
example: sha256WithRSAEncryption  
须向国际知名标准组织(如ISO)注册
  * 签发机构名(Issuer)
  * 有效期(Validity)：指定证书的有效期
  * 证书用户名(Subject)
  * 证书持有者公开密钥信息(Subject Public Key Info)  
证书持有者公开密钥信息域包含两个重要信息:  
1) 证书持有者的公开密钥的值  
2) 公开密钥使用的算法标识符。此标识符包含公开密钥算法和hash算法。
  * 扩展项(extension)
  * 签发者唯一标识符(Issuer Unique Identifier)
  * 证书持有者唯一标识符(Subject Unique Identifier)
  * 签名算法(Signature Algorithm)
  * 签名值(Issuer's Signature)  
```
  * 如下图所示
#### 如何校验服务端证书呢？
  * 签名的生成：CA先将证书信息生成hash摘要，然后再用CA机构的私钥进行加密。
  * 签名的校验：使用CA机构的公钥进行解密签名，得到hash摘要A，再计算证书信息的hash摘要B。比对是否一致。  
#### 详细解释服务端的证书是怎么生成的？
  * 服务端的证书是由CA (Certificate Authority，证书认证中心)颁发的。他是一个负责发放和管理数字证书的第三方权威机构，它负责管理PKI（Public Key Infrastructure，公开密钥基础设施）结构下的所有用户(包括各种应用程序)的证书，把用户的公钥和用户的其他信息捆绑在一起，在网上验证用户的身份。
  * 一般情况下网站方向CA申请一个证书。CA会给网站方生成一对非对称加密的`公钥`和`私钥`，公钥会做到证书里面，私钥则会给到网站方。
  * CA会先做一个“数字签名”（生成过程：明文 --> hash运算 --> 摘要 --> 私钥加密 --> 数字签名）
    * 就是将`网站方的信息`和`网站方的公钥`、`签名算法`等信息（就是Wireshark Packet 20中的数据，除了“签名值”），计算一个hash值（图中hash算法是SHA256），然后CA再用自己私钥做加密（图中公开密钥算法是RSA），最后的这个密文就是“数字签名”（也就是我们在图中看到“encrypted”签名值）。
  * CA最后将“网站方信息”、“网站方公钥”、“签名算法”、“签名值”都做到证书里面（就是Wireshark Packet 20中的我们看到那些数据），证书就做好了，CA会把“证书”和“网站方的私钥”给到网站方。
#### CA怎么验证证书是不是自己颁发的呢？以及做证书内容校验？
  * 首先浏览器（校验网站的证书）或操作系统（校验应用的证书），会在操作系统存储的系统信任的根证书里面去查找“证书颁发机构”是否是信任的。如下图系统根证书：
    * 浏览器通常也会内置大多数主流权威CA的根证书。
    * 如果查找不到对应的可信CA，则判断这个证书是伪造的，不可信的。（浏览器则会提醒该证书不是可信任机构颁发的，并询问是否要继续访问）
  * 如果找到对应的CA机构，则取出`CA机构证书`里面的`公钥`信息，将`网站方证书`中的`签名值`（也就是数字签名）做解密，得到`网站证书`信息的hash摘要A。
  * 然后将`网站证书`中的信息，做hash得到摘要B，比对摘要A和摘要B是否一致。如果不一致，说明`网站证书`中的信息被修改了。（浏览器则会提醒该证书不是可信任机构颁发的，并询问是否要继续访问）
  * 如果摘要hash一致，则说明证书中的信息未被修改，这时浏览器会比对您现在正在访问的网站与证书中网站信息是否一致，比如域名是否一致、证书是否在有效期内等。（如果出现问题，浏览器将会提醒你，并询问是否要继续访问）
  * 另外大部分浏览器也会在线校验证书，是否在有效期内（将证书序列号通过在线证书状态协议“OCSP”发送给CA做校验）。
  * 证书校验成功，最后将从证书中取出网站方的`公钥`，用于后面的握手签名。
### 4\. Server Key Exchange
  * 这个步骤是密钥协商的服务端部分，最终的密钥将会用于传输数据对称加密。
  * 服务端需要发送一个Diffie-Hellman算法的公钥，和指定使用哪种椭圆曲线多项式。
  * 我们到Client Key Exchange的时候，再来讲这个密钥协商过程。
  * 这里还有一个签名，校验这个流程的数据是否被篡改。如下图所示，客户端收到Server Key Exchange数据后，可以用上个流程中获得的`证书`公钥对签名值解密，获得摘要A。并将这次数据明文做SHA512的hash，获得摘要B，做比对。（这里对协商算法做签名校验，目的可能是防止中间人对协商算法方式做篡改，虽然DH算法不担心公钥在不安全的网络中传输，但是其他算法可能需要考虑被篡改的情况。所以猜测服务端密钥协商时做签名是这个目的，因为服务端这时已经确定是DH算法了，所以客户端协商时就不需要做签名了，DH算法不需要考虑这个安全问题）
  * 发送的数据如下图示：
### 5\. Server Hello Done
  * 服务端发送ServerHelloDone消息表示，已经发送完了密钥协商需要的消息，并且客户端可以开始进行客户端的密钥协商处理了，也就是Client Key Exchange。
  * 收到ServerHelloDone后，客户端需要确认服务器是否提供了合法的证书，并且确认服务器的ServerHello消息里面的参数是否可以接受。
### 6\. Client Key Exchange
  * 客户端生成自己用于密钥协商的公私钥，并发送此公钥
  * 这时客户端已经知道了`服务端密钥协商的公钥以及自己的公钥`
  * 我们以`EC Diffie-Hellman`密钥协商协议为例，来看看客户端、服务端是怎么协商出相同的密钥的（这里协商出来的是PreMasterSecret，不是最终的对称加密用到的密钥）。
  * EC Diffie-Hellman使用到一个数学难题，就是在给定的椭圆曲线上的一个点P，一个整数k，求Q=kP很容易；但是给定一个点P、Q，知道Q=kP，求整数k确实很难。
  * 服务端确定了密钥协商算法为“EC Diffie-Hellman”，发送给客户端。现在两端都知道了使用的是哪个曲线参数（椭圆曲线E、阶N、基点G）。
  * Server Key Change：服务端随机生成一个整数a，计算A=a*G，生成服务端公钥A，发送给客户端。
  * Client Key Change：客户端随机生成一个整数b，计算B=b*G，生成服务端公钥B，发送给服务端。
  * 客户端计算出PreMasterSecret：Q=b _A=b_ (a*G)
  * 服务端计算出PreMasterSecret：Q'=a _B=a_ (b*G)，这两个计算结果是相等的，此时双方协商好对称密钥值。
  * 并且即使攻击者截获到双方公钥A、B，仍然无法计算出PreMasterSecret，因为攻击者需要知道随机整数a、b的其中任意一个，可是之前我们就提到过EC Diffie-Hellman协议中，知道A、G求a是很难的。
  * 真正对称加密使用到的密钥生成（这里使用到了client、server一开始hello中传输的随机数）：
    * MasterSecret = PRF(PreMasterSecret, "master secret", Client.random || Server.random)[0..47] -- 固定取前 48 字节
    * KeyBlock = PRF(MasterSecret, "key expansion", Server.random || Client.random) -- 长度为由双方确定的密码算法套件决定
    * KeyBlock才是最终用来做对称加密的密钥块 [6.3. Key Calculation](https://tools.ietf.org/html/rfc5246#section-6.3)
### 7\. Client Change Cipher Spec
  * 这个过程就是告诉服务端，他已经准备好MasterSecret了，可以进行数据加密传输了。
  * 这个协议是冗余的，在TLS 1.3里面直接被删除了。
### 8\. Client Finished
  * 这条消息是用来确定双方的MasterSecret是否正确生成，发送的是verify_data消息。
    struct {
        opaque verify_data[verify_data_length];
    } Finished;
    verify_data
       PRF(master_secret, finished_label,Hash(handshake_messages))
          [0..verify_data_length-1];
  * verify_data = PRF(master_secret, finished_label, Hash(handshake_messages))
    * PRF是伪随机函数（pseudorandom function，PRF）
    * master_secret是密钥协商时，计算出来的
    * finished_label：对客户端发的Finished消息来说，固定是字符串 "client finished". 对服务器发的Finished消息来说，固定是字符串 "server finished".
    * handshake_messages，是各端握手过程中发送的所有消息的，类型如下：
                struct {
            HandshakeType msg_type;    /* handshake type */
            uint24 length;             /* bytes in message */
            select (HandshakeType) {
                case hello_request:       HelloRequest;  //HelloRequest是服务端在任何时候都可以发出的，告诉客户端需要重新进行握手协议，客户端随即发送新的ClientHello    
                case client_hello:        ClientHello;
                case server_hello:        ServerHello;
                case certificate:         Certificate;//服务端或客户端发送自己证书给客户端。
                case server_key_exchange: ServerKeyExchange;
                case certificate_request: CertificateRequest;//服务端请求，客户端发送自己的客户端证书，给服务端做校验。这个步骤在博文中没有提到，看以后有需要再了解。
                case server_hello_done:   ServerHelloDone;
                case certificate_verify:  CertificateVerify;//客户端发出，从client hello开始，一直到CertificateVerify之前的所有消息的hash加上客户端证书对应私钥的加密结果。
                case client_key_exchange: ClientKeyExchange;
                case finished:            Finished;
            } body;
        } Handshake;
  * 但不包括ChangeCipherSpec、alerts之类的消息。并且最后一个发送Finished的一方，需要把前一个发送Finished的内容包括进去。
  * 注意这里每个端发送自己的握手消息就可以，比如Client发送内容包括ClientHello、Certificate（有发送的话）、CertificateVerify（如果有发送的话）、ClientKeyExchange、Finished（如果是最后一方需要包含）。服务端同理。
  * 因为verify_data是加密的，我就没有在截图了，上述的字段以及说明可以查看协议文档 [7.4.9. Finished](https://tools.ietf.org/html/rfc5246#section-7.4.9)
### 8.1. Server New Session Ticket
  * 如果服务端想使用Ticket方式存储session状态，在Server Change Cipher Spec之前就需要发送New Session Ticket消息。
  * New Session Ticket方式与Session ID方式对比：
    * SessionID方式，客户端在ClientHello的时候带着上一次SessionID过来，服务端从自己内存中查找SessionID对应的session状态，并读取session状态快速恢复。
    * SessionTicket方式，则是将session状态加密后，发送给客户端存储。客户端在ClientHello时将SessionTicket带上，服务端就将其解密，读取出里面存储的session状态信息，SessionTicket存储的信息如下：
                struct {
            ProtocolVersion protocol_version; //协议版本
            CipherSuite cipher_suite; //加密套件类型
            CompressionMethod compression_method;    //压缩方法
            opaque master_secret[48]; //对称密钥
            ClientIdentity client_identity; //客户端ID
            uint32 timestamp;//ticket有效期
        } StatePlaintext;
### 9\. Server Change Cipher Spec
  * 告诉客户端，我已经准备好进行加密传输了。
### 10\. Server Finished
  * 与8. Client Finished的情况一样，使用对称密钥加密，最后做一次验证，确定双方是否都准备好进行数据传输了。只是这里加密的数据还不是真正的网站内容数据，而是握手过程的数据。
### 11\. Application Data
  * 真正的网站数据传输，但是这里的数据就是经过握手时协商好的对称密钥进行加密的了。
  * 现在我们有KeyBlock（对称密钥块），也知道对称加密算法是AES-128-GCM [5.1. AEAD_AES_128_GCM](https://tools.ietf.org/html/rfc5116#page-14)
# 参考文献
  * [The Transport Layer Security (TLS) Protocol Version 1.2](https://tools.ietf.org/html/rfc5246)
  * [OpenSSL 与 SSL 数字证书概念贴](http://seanlook.com/2015/01/15/openssl-certificate-encryption/)
  * [详解https是如何确保安全的？](http://www.wxtlife.com/2016/03/27/%E8%AF%A6%E8%A7%A3https%E6%98%AF%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9D%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/)
  * [数字证书的基础知识](http://www.enkichen.com/2016/02/26/digital-certificate-based/)
  * [TLS 握手优化详解](https://imququ.com/post/optimize-tls-handshake.html)
  * [Transport Layer Security (TLS) Parameters](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml)
  * [crypto101](https://www.crypto101.io/)
  * [TLS协议分析 (五) handshake协议 证书与密钥交换](http://qkxue.net/info/195840/TLS-handshake)
  * [HTTPS权威指南：在服务器和Web应用上部署SSL/TLS和PKI](http://www.ituring.com.cn/book/tupubarticle/11135)
  * [读图解HTTP](http://pennyren.me/2016/read-graphical-http/)