char
System.Char
表示一个16位的（Unicode）字
符
char类型的字面量是用单引号括起来的，如’A'。如果把字符放在双引号中，编译器会
把它看成字符串，从而产生错误。
除了把char表示为字符字面量之外，还可以用4位十六进制的Unicode值
（如’\u0041'）、带有强制类型转换的整数值（如（char）65）或十六进制数（'\x0041'）
表示它们。它们还可以用转义序列表示，如表2-6所示。
表2-6
转义序列
字符
\'
单引号
\"
双引号
\\
反斜杠
\0
空
\a
警告
\b
退格
\f
换页
\n
换行
\r
回车
\t
水平制表符
\v
垂直制表符
2.4.4 预定义的引用类型
C#支持两种预定义的引用类型：object和string，如表2-7所示。
表2-7
名称
.NET类型
说明
object
System.Object
根类型，其他类型都是从它派生
而来的（包括值类型）
string
System.String
Unicode字符串
1. object类型
许多编程语言和类层次结构都提供了根类型，层次结构中的其他对象都从它派生而
来。C#和.NET也不例外。在C#中，object类型就是最终的父类型，所有内置类型和用户定
义的类型都从它派生而来。这样，object类型就可以用于两个目的：
● 
可以使用object引用来绑定任何特定子类型的对象。例如，第8章将说明如何使用
object类型把堆栈中的值对象装箱，再移动到堆中。object引用也可以用于反射，
此时必须有代码来处理类型未知的对象。
● object类型实现了许多一般用途的基本方法，包括Equals（）、GetHashCode（）、
GetType（）和ToString（）。用户定义的类需要使用一种面向对象技术——重写
（见第4章），来提供其中一些方法的替代实现代码。例如，重写ToString（）
时，要给类提供一个方法，给出类本身的字符串表示。如果类中没有提供这些方
法的实现代码，编译器就会使用object类型中的实现代码，它们在类上下文中的执
行不一定正确。
后面将详细讨论object类型。
2. string类型
C#有string关键字，在遮罩下转换为.NET类System.String。有了它，像字符串连接和
字符串复制这样的操作就很简单了：
    string str1 = "Hello ";
    string str2 = "World";
    string str3 = str1 + str2; // string concatenation
尽管这是一个值类型的赋值，但string是一个引用类型。string对象被分配在堆上，而
不是栈上。因此，当把一个字符串变量赋予另一个字符串时，会得到对内存中同一个字符
串的两个引用。但是，string与引用类型的常见行为有一些区别。例如，字符串是不可改
变的。修改其中一个字符串，就会创建一个全新的string对象，而另一个字符串不发生任
何变化。考虑下面的代码（代码文件StringSample/Program.cs）：
    using static System.Console;
    class Program
    {
      static void Main()
      {
      string s1 = "a string";
      string s2 = s1;
      WriteLine("s1 is " + s1);
      WriteLine("s2 is " + s2);
      s1 = "another string";
      WriteLine("s1 is now " + s1);
      WriteLine("s2 is now " + s2);
      }
    }
其输出结果为：
    s1 is a string
    s2 is a string
    s1 is now another string
    s2 is now a string
改变s1的值对s2没有影响，这与我们期待的引用类型正好相反。当用值a string初始化
s1时，就在堆上分配了一个新的string对象。在初始化s2时，引用也指向这个对象，所以s2
的值也是a string。但是当现在要改变s1的值时，并不会替换原来的值，在堆上会为新值分
配一个新对象。s2变量仍指向原来的对象，所以它的值没有改变。这实际上是运算符重载
的结果，运算符重载详见第8章。基本上，string类已实现，其语义遵循一般的、直观的字
符串规则。
字符串字面量放在双引号中（"..."）；如果试图把字符串放在单引号中，编译器就会
把它当成char类型，从而抛出错误。C#字符串和char一样，可以包含Unicode和十六进制数
转义序列。因为这些转义序列以一个反斜杠开头，所以不能在字符串中使用没有经过转义
的反斜杠字符，而需要用两个反斜杠字符（\\）来表示它：
    string filepath = "C:\\ProCSharp\\First.cs";
即使用户相信自己可以在任何情况下都记住要这么做，但输入两个反斜杠字符会令人
迷惑。幸好，C#提供了替代方式。可以在字符串字面量的前面加上字符@，在这个字符
后的所有字符都看成其原来的含义——它们不会解释为转义字符：
    string filepath = @"C:\ProCSharp\First.cs";
甚至允许在字符串字面量中包含换行符：
    string jabberwocky = @"'Twas brillig and the slithy toves
    Did gyre and gimble in the wabe.";
那么jabberwocky的值就是：
    'Twas brillig and the slithy toves
    Did gyre and gimble in the wabe.
C# 6定义了一种新的字符串插值格式，用$前缀来标记。这个前缀在2.3节中使用过。
可以使用字符串插值格式，改变前面演示字符串连接的代码片段。对字符串加上$前缀，
就允许把花括号放在包含一个变量甚或代码表达式的字符串中。变量或代码表达式的结果
放在字符串中花括号所在的位置：
    public static void Main()
    {
      string s1 = "a string";
      string s2 = s1;
      WriteLine($"s1 is {s1}");
      WriteLine($"s2 is {s2}");
      s1 = "another string";
      WriteLine($"s1 is now {s1}");
      WriteLine($"s2 is now {s2}");
    }
  注意： 字符串和字符串插值功能参见第10章。
2.5 程序流控制
本节将介绍C#语言最基本的重要语句：控制程序流的语句。它们不是按代码在程序
中的排列位置顺序执行的。
2.5.1 条件语句
条件语句可以根据条件是否满足或根据表达式的值来控制代码的执行分支。C#有两
个控制代码的分支的结构：if语句，测试特定条件是否满足；switch语句，比较表达式和
多个不同的值。
1. if语句
对于条件分支，C#继承了C和C++的if...else结构。对于用过程语言编程的人，其语法
非常直观：
    if (condition)
      statement(s)
    else
      statement(s)
如果在条件中要执行多个语句，就需要用花括号（{ ... }）把这些语句组合为一个块
（这也适用于其他可以把语句组合为一个块的C#结构，如for和while循环）。
    bool isZero;
    if (i == 0)
    {
      isZero = true;
      WriteLine("i is Zero");
    }
    else
    {
      isZero = false;
      WriteLine("i is Non-zero");
    }
还可以单独使用if语句，不加最后的else语句。也可以合并else if子句，测试多个条件
（代码文件IfStatement/Program.cs）。
    using static System.Console;
    namespace Wrox
    {
      class Program
      {
        static void Main()
        {
        WriteLine("Type in a string");
        string input;
        input = ReadLine();
        if (input == "")
        {
          WriteLine("You typed in an empty string.");
        }
        else if (input.Length < 5)
        {
          WriteLine("The string had less than 5 characters.");
        }
        else if (input.Length < 10)
        {
          WriteLine("The string had at least 5 but less than 10 Characters.");
        }
        WriteLine("The string was " + input);
        }
      }
添加到if子句中的else if语句的个数不受限制。
注意，在上面的例子中，声明了一个字符串变量input，让用户在命令行输入文本，
把文本填充到input中，然后测试该字符串变量的长度。代码还显示了在C#中如何进行字
符串处理。例如，要确定input的长度，可以使用input.Length。
对于if，要注意的一点是如果条件分支中只有一条语句，就无须使用花括号：
    if (i == 0)
      WriteLine("i is Zero");        // This will only execute if i == 0
    WriteLine("i can be anything");  // Will execute whatever the
                                              // value of i
但是，为了保持一致，许多程序员只要使用if语句，就加上花括号。
  提示： 在if语句中不使用花括号，可能在维护代码时导致错误。无论if语句返
回true还是false，都常常给if语句添加第二个语句。每次都使用花括号，就可以避免这
个编码错误。
使用if语句的一个指导原则是只有语句和if语句写在同一行上，才不允许程序员使
用花括号。遵守这条指导原则，程序员就不太可能在添加第二个语句时不添加花括
号。
前面介绍的if语句还演示了用于比较数值的一些C#运算符。特别注意，C#使用“=
=”对变量进行等于比较。此时不要使用“=”，一个“=”用于赋值。
在C#中，if子句中的表达式必须等于布尔值（Boolean）。不能直接测试整数（如从
函数中返回的值），而必须明确地把返回的整数转换为布尔值true或false，例如，将值与0
或null进行比较：
    if (DoSomething() ! = 0)
    {
      // Non-zero value returned
    }
    else
    {
      // Returned zero
    }
2. switch语句
switch…case语句适合于从一组互斥的可执行分支中选择一个执行分支。其形式是
switch参数的后面跟一组case子句。如果switch参数中表达式的值等于某个case子句旁边的
某个值，就执行该case子句中的代码。此时不需要使用花括号把语句组合到块中；只需要
使用break语句标记每段case代码的结尾即可。也可以在switch语句中包含一条default子
句，如果表达式不等于任何case子句的值，就执行default子句的代码。下面的switch语句
测试integerA变量的值：
    switch (integerA)
    {
      case 1:
        WriteLine("integerA = 1");
        break;
      case 2:
        WriteLine("integerA = 2");
        break;
      case 3:
        WriteLine("integerA = 3");
        break;
      default:
        WriteLine("integerA is not 1, 2, or 3");
        break;
    }
注意case值必须是常量表达式；不允许使用变量。
C和C++程序员应很熟悉switch…case语句，而C#的switch…case语句更安全。特别是
它禁止几乎所有case中的失败条件。如果激活了块中靠前的一条case子句，后面的case子
句就不会被激活，除非使用goto语句特别标记也要激活后面的case子句。编译器会把没有
break语句的case子句标记为错误，从而强制实现这一约束：
    Control cannot fall through from one case label ('case 2:') to another
在有限的几种情况下，这种失败是允许的，但在大多数情况下，我们不希望出现这种
失败，而且这会导致出现很难察觉的逻辑错误。让代码正常工作，而不是出现异常，这样
不是更好吗？
但在使用goto语句时，会在switch…cases中重复出现失败。如果确实想这么做，就应
重新考虑设计方案了。
下面的代码说明了如何使用goto模拟失败，得到的代码会非常混乱：
    // assume country and language are of type string
    switch(country)
    {
      case "America":
        CallAmericanOnlyMethod();
        goto case "Britain";
      case "France":
        language = "French";
        break;
      case "Britain":
        language = "English";
        break;
    }
但有一种例外情况。如果一条case子句为空，就可以从这条case子句跳到下一条case
子句，这样就可以用相同的方式处理两条或多条case子句了（不需要goto语句）。
    switch(country)
    {
      case "au":
      case "uk":
      case "us":
        language = "English";
        break;
      case "at":
      case "de":
        language = "German";
        break;
    }
在C#中，switch语句的一个有趣的地方是case子句的顺序是无关紧要的，甚至可以把
default子句放在最前面！因此，任何两条case都不能相同。这包括值相同的不同常量，所
以不能这样编写：
    // assume country is of type string
    const string england = "uk";
    const string britain = "uk";
    switch(country)
    {
      case england:
      case britain:   // This will cause a compilation error.
        language = "English";
        break;
    }
上面的代码还说明了C#中的switch语句与C++中的switch语句的另一个不同之处：在
C#中，可以把字符串用作测试的变量。