3
→100
---
## Page 91
时间减去键的值对象的lru时间计算得出的：
结构包含的最后一个属性为1ru属性，该属性记录了对象最后一次被命令程序访问的时间：
8.10对象的空转时长
码的集合对象，以及 zset 编码的有序集合对象）都可以使用这些共享对象。
象的对象（linkedlist 编码的列表对象、hashtable 编码的哈希对象、hashtable 编
Redis只对包含整数值的字符串对象进行共享。
对象和目标对象是否相同所需的复杂度就会越高，消耗的CPU 时间也会越多：
下，程序才会将共享对象用作键的值对象，而一个共享对象保存的值越复杂，验证共享
除了前面介绍过的 type、encoding、ptr 和 refcount 四个属性之外，redisObject
对象和键想创建的目标对象是否完全相同，只有在共享对象和目标对象完全相同的情况
普访问 msg 键的值
OBJECTIDLETIME命令可以打印出给定键的空转时长，这一空转时长就是通过将当前
 typedef struct redisobject {
redis> SET msg "hello world"
另外，这些共享对象不单单只有字符串键可以使用，那些在数据结构中嵌套了字符串对
redis> GET msg
(integer) 180
redis> OBJECT IDLETIME msg
#等待一阵子
redis> OBJECT IDLETIME msg
#等特一小段时间
]robj;
因此，尽管共享更复杂的对象可以节约更多的内存，但受到CPU 时间的限制
如果共享对象是包含了多个值（或者对象的）对象，比如列表对象或者哈希对
口如果共享对象是保存字符串值的字符串对象，那么验证操作的复杂度为 O(N);
口如果共享对象是保存整数值的字符串对象，那么验证操作的复杂度为 O(1);
当服务器考虑将一个共享对象设置为键的值对象时，程序需要先检查给定的共享
!...
unsigned lru:22;
象，那么验证操作的复杂度将会是 O(N)。
为什么Redis不共享包含字符串的对象？
第8章 对 
象·87
---
## Page 92
88·第一部分数据结构与对象
8.11
的更多信息。
时，空转时长较高的那部分键会优先被服务器释放，从而回收内存。
或者 allkeys-lru，那么当服务器占用的内存数超过了maxmemory选项所设置的上限值
如果服务器打开了 maxmemory 选项，并且服务器用于回收内存的算法为volatile-lru
对象的 Iru 属性。
配置文件的 maxmemory 选项和 maxmemory-policy选项的说明介绍了关于这方面
除了可以被OBJECTIDLETIME命令打印出来之外，键的空转时长还有另外一项作用：
OBJECT IDLETIME 命令的实现是特殊的，这个命令在访问键的值对象时，不会修改值
口对象会记录自己的最后一次被访问的时间，这个时间可以用于计算对象的空转时间。
口Redis会共享值为0到9999的字符串对象。
口 Redis 的对象系统带有引用计数实现的内存回收机制，当一个对象不再被使用时，该
口服务器在执行某些命令之前，会先检查给定键的类型能否执行指定的命令，而检查
口 Redis 共有字符串、列表、哈希、集合、有序集合五种类型的对象，每种类型的对象
口 Redis 数据库中的每个键值对的键和值都是一个对象。
(integer)0
redis>
键处于活跃状态，空转时长为0
"hello world"
对象所占用的内存就会被自动释放。
一个键的类型就是检查键的值对象的类型。
使用效率。
至少都有两种或以上的编码方式，不同的编码可以在不同的使用场景上优化对象的
重点回顾
OBJECT IDLETIME msg
---
## Page 93
第14章服务器
第13章名
第12章 
第11章AOF 持久化
第10章RDB 持久化
第9章数据库
客户端
事件
单机数据库的实现
第二部分
---
## Page 94
个数据库：
数组中，db 数组的每个项都是一个 redis.h/redisDb 结构，每个 redisDb 结构代表一
9.1
现方法。
务器自动删除过期键的方法。最后，本章还会说明 Redis 2.8 新引人的数据库通知功能的实
更新操作的实现方法等。除此之外，本章还会说明服务器保存键的过期时间的方法，以及服
户端切换数据库的方法，数据库保存键值对的方法，以及针对数据库的添加、删除、查看、
Redis 服务器将所有数据库都保存在服务器状态redis.h/redisServer 结构的 db
在初始化服务器时，程序会根据服务器状态的dbnum属性来决定应该创建多少个数据库：
struct
本章将对Redis 服务器的数据库实现进行详细介绍，说明服务器保存数据库的方法，客
struct redisServer i
服务器中的数据库
!...
11 服务器的数据库数量
..·
！！.··
int dbnum;
redisDb *db;
一个数组，保存着服务器中的所有数据库
redisServer
数据库
第9章
---
## Page 95
据库，这个属性是一个指向redisDb 结构的指针：
并执行类似操作的过程：
SELECT命令来切换目标数据库。
命令的时候，目标数据库就会成为这些命令的操作对象。
9.2
16，所以 Redis 服务器默认会创建16个数据库，如图 9-1所示。
以下代码示例演示了客户端在0号数据库设置并读取键msg，之后切换到2 号数据库
在服务器内部，客户端状态 redisClient 结构的 db 属性记录了客户端当前的目标数
默认情况下，Redis 客户端的目标数据库为0号数据库，但客户端可以通过执行
每个 Redis 客户端都有自己的目标数据库，每当客户端执行数据库写命令或者数据库读
redisDb *db;
typedef struct redisclient {
redis[2]> GET msg
redis[2]> SET msg"another world"
redis[2]> GET msg
redis> SELECT 2
redis> GET msg
dbnum 属性的值由服务器配置的 database 选项决定，默认情况下，该选项的值为
"another world"
(nil)
吴
切换数据库
redisServer
dbnum
16
db
图9-1服务器数据库示例
[st]qp[2]qp[T1qp[0]qp
第9章数据库·91
---
## Page 96
92·第二部分单机数据库的实现
标数据库的功能一
和服务器状态之间的关系将更新成图9-3。
状态和服务器状态之间的关系如图9-2所示。
素就是客户端的目标数据库。
客户端会在输入符旁边提示当前所使用的目标数据库：
比如说，如果某个客户端的目标数据库为1号数据库，那么这个客户端所对应的客户端
通过修改redisClient.db 指针，让它指向服务器中的不同数据库，从而实现切换目
如果这时客户端执行命令 SELECT2，将目标数据库改为2号数据库，那么客户端状态
redisClient.db 指针指向 redisServer.db 数组的其中一个元素，而被指向的元
) redisClient;
到目前为止，Redis 仍然没有可以返回客户端目标数据库的命令。虽然 redis-cli
一这就是SELECT命令的实现原理。
redisclient
redisClient
redisServer
redisServer
dbnum
16
db
图 9-3客户端的目标数据库为2号数据库
图9-2客户端的目标数据库为1号数据库
谨慎处理多数据库程序
db[0]db[1]db[2].·db[15]
db[0]db[1]db[2].-.db[15]
---
## Page 97
所有键值对，我们将这个字典称为键空间（key Space）：
一个 redis.h/redisDb 结构表示，其中，redisDb 结构的 dict 字典保存了数据库中的
9.3
显式地切换到指定的数据库，然后才执行别的命令。
行 Redis 命令特别是像FLUSHDB这样的危险命令之前，最好先执行一个SELECT 命令，
正在使用的是哪个数据库。当出现这种情况时，为了避免对数据库进行误操作，在执
样一直显示目标数据库的号码，那么在数次切换数据库之后，你很可能会忘记自己当前
但如果你在其他语言的客户端中执行 Redis 命令，并且该客户端没有像 redis-cli 那
redis> HSET book publisher "Manning"
"u "a "e, yaqeudte Hsnay  HsET book author "Josiah L. Carlson"
(integer)3
集合对象和有序集合对象中的任意一种 Redis 对象。
redisDb;
数据库键空间
redis[2]>
redis[1]> SELECT 2
redis> SELECT 1
!！..·
dict *dict;
/！数据库键空间，保存着数据库中的所有键值对
...
第 9章
数
库·93
---
## Page 98
94·第二部分单机数据库的实现
象，而键值对的值则是一个包含字符串“2013.12.1”的字符串对象，如图9-5所示。
键空间将添加一个新的键值对，这个新键值对的键是一个包含字符串"date”的字符申对
键为字符串对象，而值则为任意一种类型的 Redis 对象。
9.3.1
新、取值等操作的实现原理。
是通过对键空间字典进行操作来实现的，以下几个小节将分别介绍数据库的添加、删除、更
数据库，或者从数据库中删除一个键值对，又或者在数据库中获取某个键值对等，实际上都
那么在这些命令执行之后，数据库的键空间将会是图9-4所展示的样子：
添加一个新键值对到数据库，实际上就是将一个新键值对添加到键空间字典里面，其中
redisDb
举个例子，如果键空间当前的状态如图9-4所示，那么在执行以下命令之后：
因为数据库的键空间是一个字典，所以所有针对数据库的操作，比如添加一个键值对到
dict
 message是一个字符申键，键的名字是一个包含字符串"message"的字符申对象，
口 book是一个哈希表键，键的名字是一个包含字符串"book"的字符串对象，键的
redis> SET date "2013.12.1"
.··
键的值则是一个包含字符串“helloworld"的字符串对象。
值则是一个包含三个键值对的哈希表对象。
添加新键
象，键的值则是一个包含三个元素的列表对象。
 Stringobject
Stringobject
"alphabet"
stringobject
"message"
"book"
dict
图9-4数据库键空间例子
"hello world"
Stringobject
Stringobject
Stringobject
Stringobject
"publisher"
 Hashobject
Stringobject
"author"
"name"
"a"
"Josiah L. Carlson"
"Redis in Action"
stringobject
Stringobject
Stringobject
Stringobject
"Manning"
Listobject
Stringobject
"c"
---
## Page 99
值对象的类型不同，更新的具体方法也会有所不同。
9.3.3
键 book 以及它的值将从键空间中被删除，
9.3.2
对一个数据库键进行更新，实际上就是对键空间里面键所对应的值对象进行更新，根据
举个例子，如果键空间当前的状态如图9-4所示，那么在执行以下命令之后：
redisDb
举个例子，如果键空间当前的状态如图9-4所示，那么在执行以下命令之后：
新添加…--
redisDb
redis> SET message "blah blah"
(integer) 1
redis> DEL book
dict
dict
更新键
删除键
Stringobject
StringObject
Stringobject
"alphabet"
Stringobject
Stringobject
Stringobject
"message"
"message"
"alphabet"
"date"
"book"
dict
dict
图 9-6删除 book 键之后的键空间
图 9-5添加 date 键之后的键空间
"2013.12.1"
Stringobject
"hello world"
Stringobject
"publisher"
Stringobject
Stringobject
Stringobject
Stringobject
Hashobject
Stringobject
"author"
"hello world"
"name"
"a"
如图9-6 所示。
"Josiah L. Carlson"
"Redis in Action"
 Stringobject