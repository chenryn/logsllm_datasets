d-i partman-lvm/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman-auto-lvm/guided_size string max
d-i partman-auto/choose_recipe select atomic
d-i partman/default_filesystem string ext4
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman-md/confirm boolean true
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
[ 168 ]
Custom Builds with PXE Booting Chapter 6
Although verbose, this section of the file basically says to automatically partition the
disk /dev/sda, set up LVM, use automated calculations to determine the filesystem layout,
and then create ext4 filesystems. As you can see, there are many safeguards and
confirmation prompts that we have flagged as true as otherwise, the installer would stop
and wait for user input to proceed. If this were to happen, our installation would again not
be truly unattended. From here, we specify the package set we want to be installed, as
follows:
tasksel tasksel/first multiselect standard
d-i pkgsel/include string openssh-server build-essential
d-i pkgsel/update-policy select none
The preceding lines of code essentially set up a minimal server build with the openssh-
server package and build-essential packages on it. The automated update policy is
configured to not automatically update. Finally, to finish off the file, we tell it where to
install the boot loader, and to reboot upon successful completion, as follows:
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i finish-install/reboot_in_progress note
As with our CentOS example, we will serve this file from our web server, and thus, the
PXELINUX boot configuration needs adjusting, to make sure we incorporate this file—an
appropriate example is shown as follows:
default isolinux/menu.c32
prompt 0
timeout 120
menu title --------- Enterprise Automation Boot Menu ---------
label 1
menu label ^1. Install Ubuntu Server 18.04 from local repo
kernel ubuntu1804/linux
append initrd=ubuntu1804/initrd.gz
url=http://192.168.201.1/ubuntu-config/ubuntu-unattended.txt vga=normal
locale=en_US.UTF-8 console-setup/ask_detect=false console-
setup/layoutcode=gb keyboard-configuration/layoutcode=gb
mirror/country=manual mirror/http/hostname=192.168.201.1
mirror/http/directory=/ubuntu1804 mirror/http/proxy="" live-installer/net-
image=http://192.168.201.1/ubuntu1804/install/filesystem.squashfs
netcfg/get_hostname=unassigned-hostname
[ 169 ]
Custom Builds with PXE Booting Chapter 6
Note the following new options in use this time:
url: Tells the installer from where to obtain our pre-seed file.
console-setup/layoutcode and keyboard-
configuration/layoutcode: Prevents the installer from asking about
keyboard settings when it is first run.
netcfg/get_hostname: Although we have set the hostname in the pre-seed file,
we have to specify this parameter here, otherwise the installer will stop, and
prompt the user to enter a hostname.
Again, if you test this by booting a server over the network using the preceding
configuration, you should see the server build complete. Unlike the CentOS 7 installation,
you will not see any menu options—these will only be presented to you if your pre-seed
configuration file is incorrect, or is missing some important details. Instead, you will simply
see a series of progress bars flash by, as the various stages of the installation are completed.
For example, the following screenshot shows that the base system is installed to the disk
after the partitions and logical volumes have been set up:
Assuming all goes well, this process will continue until you are presented with a final
progress bar, which shows the final tidy-up being completed before the server is rebooted.
In the following screenshot, the filesystems are being unmounted, in preparation for a
reboot:
When this final progress bar completes, your server will reboot, and you will be presented
with a login prompt, from where you can log in with the credentials specified in the pre-
seed file d-i passwd parameters shown previously. Note that if you use different
credentials for your build, you must use these here, and not those specified previously.
[ 170 ]
Custom Builds with PXE Booting Chapter 6
At this stage, you should be able to perform an unattended build of either CentOS or
Ubuntu Server over the network and perform basic changes, such as selecting the required
packages and setting credentials. In the next section, we will explore methods of additional
bespoke customization, beyond the original OS.
Adding custom scripts to unattended boot
configurations
As you will have seen from the examples in this chapter, the kickstart and pre-seed files are
quite prescriptive in what they can do. For most purposes, they should be perfectly
adequate, allowing you to build a machine suitable for further customization with Ansible.
Indeed, much of the rest of this book is dedicated to how you would manage and automate
configuration management across an estate of servers, built per the details in this and the
preceding chapters.
However, what if your enterprise has a task (or tasks) that absolutely has to be performed
at build time—perhaps for security compliance (which we shall explore in Chapter 13,
Using CIS Benchmarks), for example? Luckily, both of the technologies we have discussed
here provide an option for that. Let's first take a look at how you might perform custom
commands in a kickstart-unattended installation.
Customized scripting with kickstart
As discussed previously, it is recommended for most tasks that you perform the post-build
configuration with Ansible. However, let's take a simple and hypothetical
example—suppose that, for security reasons, you need to disable root SSH logins
immediately when the server is built, for security compliance. There is no directive in
kickstart that can perform this task, and leaving the server with this enabled while it waits
for Ansible to run against it may not be acceptable to a corporate security team, as there is a
window of opportunity for a potential attacker. Luckily, at the bottom of our kickstart file,
we can put a %post block in that runs any shellcode you put into it. Thus, we could run
the sed utility from within the following code block:
%post --log=/root/ks.log
/bin/sed -i 's/#PermitRootLogin yes/PermitRootLogin no/'
/etc/ssh/sshd_config
%end
[ 171 ]
Custom Builds with PXE Booting Chapter 6
This very simple block of code runs after the installation process has finished (but before
the reboot), and logs its output into /root/ks.log. You could customize this as you see
fit—however, here, for the sake of our simple example, we are performing a search and
replace operation on the default SSH daemon configuration, to ensure that even on first
boot, root logins over SSH are disabled.
In the next section, we'll see how the same thing is achieved in an Ubuntu pre-seed file.
Customized scripting with pre-seed
Suppose we want to perform the same customization with Ubuntu. Ubuntu pre-seed files
run a single line of commands rather than a block as used in kickstart; hence, they lend
themselves better to either simple tasks, or indeed to downloading a script for more
complex operations. We could embed the sed command in our pre-seed file by adding the
following line at the bottom:
d-i preseed/late_command string in-target /bin/sed -i
's/#PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
Suppose, however, we have a much more complex script to run, and that trying to write it
all on one line would make it difficult both to read and manage—instead, we could change
the preceding command, to download a script from a chosen place and run it, as follows:
d-i preseed/late_command string in-target wget -P /tmp/
http://192.168.201.1/ubuntu-config/run.sh; in-target chmod +x /tmp/run.sh;
in-target sh -x /tmp/run.sh
Note here that we are using wget (which was installed earlier in the build process) to
download a file called run.sh from the /ubuntu-config/ path on our web server. We
then make it executable and run it. In this way, far more complex command sequences can
be run at the end of the build process, just prior to the first reboot.
In this manner, incredibly complex, bespoke operating system builds can be installed
remotely, over the network, without any human intervention at all. The use of kickstart and
pre-seed files also means that the process is scripted and repeatable, which is an important
principle for us to adhere to.
[ 172 ]
Custom Builds with PXE Booting Chapter 6
Summary
Even when using bare-metal servers (and some virtualization platforms), it is entirely
possible to script the installation process, to ensure that all builds are consistent and thus
adhere to the SOE principle we set out earlier in this book. By following the processes set
out in this chapter, you will ensure that all your servers are built in a consistent manner,
regardless of the platform on which they are running.
Specifically, you gained experience of performing an interactive Linux installation
environment, using PXE network booting. You then learned how to fully automate the
build process, using kickstart and pre-seed scripts, to ensure that builds are completely
unattended (and, hence, automated). Finally, you learned how to further customize the
builds, by adding custom scripts to the build definition.
In the next chapter, we will proceed to look at the use of Ansible to customize servers, both
when they are newly built, and on an ongoing basis.
Questions
1. What does PXE stand for?
2. Which basic services are required for a PXE boot?
3. Where would you obtain the installation sources for a network boot?
4. What is an unattended installation?
5. What is the difference between a kickstart file and a pre-seed file?
6. Why would you need to use a %post block in a kickstart file?
7. What is the purpose of the BIOS and EFIx64 directories under the TFTP server
root?
8. How would you create a separate partition for /home in a pre-seed file?
[ 173 ]
Custom Builds with PXE Booting Chapter 6
Further reading
To see all the possible pre-seed file options, please visit https:/​/​help.​ubuntu.
com/​lts/​installation-​guide/​example-​preseed.​txt.
To learn more about kickstart files (also works on CentOS), please visit https:/​/
access.​redhat.​com/​documentation/​en-​us/​red_​hat_​enterprise_​linux/​7/​html/
installation_​guide/​sect-​kickstart-​howto.
To see a syntax reference for kickstart file commands, please visit https:/​/
access.​redhat.​com/​documentation/​en-​us/​red_​hat_​enterprise_​linux/​7/​html/
installation_​guide/​sect-​kickstart-​syntax#sect-​kickstart-​commands.
[ 174 ]
7
Configuration Management with
Ansible
So far in this book, we have established a solid framework for our Enterprise Linux
infrastructure, one that lends itself well to the large-scale deployments typical in an
enterprise, and to automated management with Ansible at this scale. In this chapter, we
now proceed to go into depth on the automated management aspect of this infrastructure,
starting with the installation and configuration of software packages.
In just about every enterprise, one task is almost guaranteed to be required during the
lifespan of a standardized Linux system—the installation and configuration of a service.
This might simply involve the configuration of an existing system service, or possibly even
the installation of the service itself, followed by post-configuration work.
We will cover the following topics in this chapter, to explore Ansible configuration
management in greater depth:
Installing new software
Making configuration changes with Ansible
Managing configuration at an enterprise scale
Configuration Management with Ansible Chapter 7
Technical requirements
This chapter includes examples based on the following technologies:
Ubuntu Server 18.04 LTS
CentOS 7.6
Ansible 2.8
To run through these examples, you will need access to two servers or virtual machines
running one of each of the operating systems listed here, and also Ansible. Note that the
examples given in this chapter may be destructive in nature (for example, they install and
uninstall software packages and make changes to server configuration), and if run as-is,
they are only intended to be run in an isolated test environment.
Once you are satisfied that you have a safe environment in which to operate, let's get
started on looking at the installation of new software packages with Ansible.
All example code discussed in this chapter is available from GitHub, at the following
URL: https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-
Linux/​tree/​master/​chapter07.
Installing new software
Depending on your requirements, it is quite possible that your SOE operating system build
has sufficient software installed, and requires only configuration work. However, for many
people, that will not be the case, so we will begin this chapter with a section covering the
installation of software. As with all our work so far, our desire is that anything we do here
is repeatable and lends itself well to automation, and thus, even if new software is required,
it is desirable that we do not install it by hand.
Let's start by looking at the simplest possible case here—installing a native operating
system package.
[ 176 ]
Configuration Management with Ansible Chapter 7
Installing a package from operating system
default repositories
Suppose that you are rolling out a new service that requires a database server—for
example, MariaDB. It is unlikely that you will have installed and enabled MariaDB in all of
your SOE images, and hence, the first task before you do anything else will be to install the
software package.
Both of our example operating systems in this book (and indeed, many of their derivatives)
include native packages for MariaDB, so we could quite easily make use of these. When it
comes to package installation, there is, of course, a need to understand what is going on
behind the scenes in our target operating system. For example, on Ubuntu, we know that
we would normally install our chosen software by using the APT package manager. Thus,
if we wanted to install this manually, including the matching client for management
purposes, we would issue the following command:
# sudo apt install mariadb-server mariadb-client
Of course, on CentOS, things are quite different—even though packages are available for
MariaDB, the command to install them would instead be the following one:
# sudo yum install mariadb mariadb-server
Although Ansible can automate a great deal of your Enterprise Linux requirements, it
cannot abstract away some of the fundamental differences between different Linux
operating systems. Fortunately, though, Ansible makes everything else quite
straightforward. Consider the following inventory:
[servers]
ubuntu-testhost
centos-testhost
We have advocated building a standard operating environment throughout this book, so
this inventory is rather unlikely to occur in real life—however, it serves as a good example
here as we can demonstrate how to install a MariaDB server on two differing platforms. As
with earlier examples in this book, we'll complete this task by making use of roles.
Building on our work on templates from earlier in this book, consider the following role:
---
- name: Install MariaDB Server on Ubuntu or Debian
apt:
name: "{{ item }}"
state: present
[ 177 ]
Configuration Management with Ansible Chapter 7
loop:
- mariadb-server
- mariadb-client
when: ansible_distribution == 'Debian' or ansible_distribution ==
'Ubuntu'
- name: Install MariaDB Server on CentOS or RHEL
yum:
name: "{{ item }}"
state: present
loop:
- mariadb-server
- mariadb
when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red
Hat Enterprise Linux'
This neatly packaged role will operate correctly on both Ubuntu and CentOS (and, indeed,
Red Hat Enterprise Linux (RHEL) and Debian, if required), and takes account of both the
differing package managers and different package names. Naturally, if you are fortunate
enough to have an environment that is completely unified (for example, only Ubuntu
Server-based), then the code can be simplified even further.
There exists an Ansible module called package that attempts to detect the
correct package manager to use, based on the operating system the
playbook is run against. Although this removes the need for separate
yum- and apt- based tasks, such as the ones we used previously, you still
need to take into account the different package naming between different
Linux operating systems, so you may still require a when clause.
We will define a simple playbook to call the role, as follows:
---
- name: Install MariaDB
hosts: all
become: yes
roles:
- installmariadb
[ 178 ]
Configuration Management with Ansible Chapter 7
Now, we can run the playbook and observe what happens, as follows:
From the preceding output, you can see how the tasks that are irrelevant to each system are
skipped, while the successful installation of our desired package results in
a changed status. Also, note that the task status returned was ok when installing the
MariaDB client package called mariadb on our CentOS test system. The reason for this is
that the loop defined in our role iterates over each listed package in turn, installing it; on
CentOS, the mariadb package is a dependency of the mariadb-server package, and so it
was installed when that particular task was run.
Although specifying this manually could be seen as redundant, it does no harm to keep it
in our role as it ensures that whatever happens, the client package is present. It is also a
form of self-documentation—in a few years, someone could come back to this playbook
and understand that both the MariaDB client and server packages were required, even if
they were unaware of this nuance of the CentOS 7 operating system.