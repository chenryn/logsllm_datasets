**作者：Eyal Itkin  
原文链接：  
翻译：知道创宇404实验室 **
## 概述
在许多公司，日常工作包括每天到办公室在公司计算机上安全地使用公司内网。有时，员工可能需要特殊的异地访问，并使用工具远程连接到公司的网络。
然而，自从 **COVID-19** 大流行爆发以来，这种日常工作已经发生了逆转。在 **Check Point**
，与世界各地许多其他的公司一样，现在绝大多数工作都是远程完成的。这种从现场工作到异地工作的转变意味着现在比以往任何时候都更多地使用用于远程连接到公司网络的
IT 解决方案。这也意味着这些解决方案中的任何安全漏洞都会产生更大的影响，因为公司依靠这项技术来保持其业务正常运转。
**Apache Guacamole** 是一种流行的远程工作基础架构，在全球的 **docker** 下载量超过 **1000**
万次。在我们的研究中，我们发现 **Apache Guacamole** 容易受到几个关键的反向 **RDP** 漏洞的攻击，并且还受到
**FreeRDP** 中发现的一些新漏洞的影响。简而言之，这些漏洞允许已经成功入侵组织内部计算机的攻击者在毫无戒心的工作人员尝试连接到受感染的计算机时对
**Guacamole** 网关发起攻击。然后黑客可以完全控制服务器，并拦截和控制所有其他连接的会话。
在这个简短的视频演示中，我们展示了如何设法利用这些漏洞并成功控制 **Guacamole** 网关和所有连接的会话：
## 介绍 Apache Guacamole
我们决定将远程工作的技术解决方案作为一个有趣的研究课题。事实上，我们的 IT 部门立即恳请我们审查一个这样的解决方案： **Apache
Guacamole** 。如前所述，它是市场上较为突出的工具之一。不仅许多组织使用该产品连接到他们的网络，许多网络和安全产品也在他们自己的产品中嵌入了
**Apache Guacamole** 。包括： **Jumpserver Fortress、Quali、Fortigate** 等等。
经过一番摸索，我们画出了推荐的网络架构的基本草图，如图1所示：
**图 1：** 部署 **Apache Guacamole** 网关的典型网络架构。
从本质上讲，员工使用浏览器连接到公司面向 **Internet**
的服务器，通过身份验证过程，然后访问他的公司计算机。当员工只使用他的浏览器时，guacamole服务器会选择一种支持的协议（ **RDP、VNC、SSH**
等）并使用开源客户端连接到特定的公司计算机。连接后，guacamole服务器充当中间人，在将事件从所选协议转换为特殊的“guacamole协议”时来回中继事件，反之亦然。
现在我们了解了架构，还有一些有希望的攻击向量需要检查：
**1、反向攻击场景：企业网络内的一台受感染机器利用传入的良性连接攻击网关，旨在接管它。**
**2、恶意员工场景：一名恶意员工使用网络内的计算机来利用他对连接两端的控制并控制网关。**
## 我们需要一个 0-Day 吗？
在我们深入研究代码之前，让我们简要地关注一下 **FreeRDP** 。在我们之前对反向 **RDP** 攻击的研究中，我们发现了这个 **RDP**
客户端中的几个关键漏洞，使其暴露在恶意 **RDP** “服务器”的攻击之下。换句话说，恶意公司计算机可以控制连接到它的毫无防备的 **FreeRDP**
客户端。我们甚至为我们的一个漏洞 ( **CVE-2018-8786** ) 提供了一个基本的 PoC，并且我们已经演示了远程代码执行。
通过查看 **Apache Guacamole** 已发布的版本，我们可以看到只有 2020 年 1 月底发布的 1.1.0 版本增加了对最新
**FreeRDP** 版本（2.0.0）的支持。知道我们在 **FreeRDP** 中的漏洞仅在 2.0.0-rc4 版本上进行了修补，这意味着2020
年 1 月之前发布的所有版本都使用易受攻击的 **FreeRDP** 版本。
我们本可以在这里停下来，估计大多数公司尚未升级到最新版本的可能性很高，并且可能已经使用这些已知的 1-Days 进行了攻击。但是，我们决定再次搜索 RDP
协议中的漏洞，更具体地说：
**1、guacamole-server的代码，同时只关注对RDP协议的支持。**
**2、最新发布的 FreeRDP 版本代码：2.0.0-rc4 版。**
最重要的是，我们的利用条件是它能够在默认安装上工作，仅使用默认启用的功能，并且希望不需要来自客户端的任何交互。开始吧。
## 寻找新的漏洞
熟悉 **FreeRDP** 的代码，以及整个 **RDP** ，在这次安全审计中真的很有帮助。我们很快就开始寻找漏洞。
### CPR-ID-2141 – 我们的第一个信息泄露漏洞
**CVE： CVE-2020-9497**
**文件：** protocols\rdp\channels\rdpsnd\rdpsnd-messages.c
**功能：** guac_rdpsnd_formats_handler()
**旁注：** 由于 **Apache** 没有使用我们报告的漏洞 (CPR-ID) 和他们发布的 CVE-ID 之间的 1:1
映射，我们将主要参考漏洞通过他们的（更准确的）CPR-ID
为了在 **RDP** 连接和客户端之间中继消息，开发人员为默认 **RDP**
通道实现了他们自己的扩展。一个这样的通道负责来自服务器的音频，因此毫不奇怪地称为rdpsnd（ **RDP** 声音）。
然而，通常情况下， **guacamole-server** 和 **FreeRDP** 之间的集成点被证明是容易出错的。传入的消息由 FreeRDP 的
**wStream** 对象包装，并且应使用此对象的 API 解析数据。但是，如图 2
所示，开发人员忘记强制传入流对象必须包含与数据包声明的字节数匹配的字节数。
**图 2：** 缺少输入过滤导致越界读取。
通过发送恶意的rdpsnd通道消息，恶意的 **RDP**
服务器可能会导致客户端认为该数据包包含大量字节，这些字节实际上是客户端本身的内存字节。这反过来会导致客户端用这些字节向服务器发回响应，并给 **RDP**
服务器一个大量的、心脏出血式的信息泄露原语。
### **CPR-ID-2142 – 再次信息泄露**
**CVE：** CVE-2020-9497
**文件：** protocols\rdp\channels\rdpsnd\rdpsnd.c
**功能：** guac_rdpsnd_process_receive()
在同一个 RDP 通道中，不同的消息具有类似的漏洞。这次它将越界数据发送到连接的客户端，而不是返回到 RDP 服务器。
**图 3：** 类似的越界读取，这次是将数据泄露给客户端。
虽然有用，但这种泄露会将信息发送给客户端，我们希望在客户端甚至不知道网关受到攻击的情况下构建漏洞。
### **CPR-ID-2143 – 仍然是，信息泄露**
**CVE： CVE-2020-9497**
**文件：** protocols\rdp\plugins\guacai\guacai-messages.c
**功能：** guac_rdp_ai_read_format()
我们很想找到一个额外的频道guacai，负责声音信息。该通道负责“音频输入”，因此得名guacai。尽管容易受到与前一个频道大致相同的漏洞的影响，但默认情况下该频道是禁用的。
![
](https://images.seebug.org/content/images/2021/06/33fd28e5-88d7-4554-8c55-0d03e4805b7f.png-w331s)
**图 4：** 另一个越界读取，就像第一个一样。
在我们研究的这一点上，我们发现了 3 个主要的信息泄露漏洞，这对于绕过
ASLR（地址空间布局随机化）应该绰绰有余。然而，我们仍然需要一个内存损坏漏洞来完成我们的漏洞利用链。感觉卡住了，我们又去看看
FreeRDP，希望能找到我们之前研究中可能遗漏的漏洞。
## FreeRDP，我们的老朋友
自从我们上次查看 RDP
客户端以来，没有对其进行太多更改；补丁版本仍然是迄今为止发布的最新版本。在寻找漏洞时总是如此，让我们首先了解wStream该客户端使用的类型中的一个关键设计“功能”
。在图 5 中，我们可以看到这个结构体的字段：
**图5：** 该wStream对象，用来包裹传入/传出分组。
这是一个简单的流包装器的经典示例：
**buffer – 指向接收包开始的指针。**
**pointer – 指向接收数据包内的读取头的指针。**
**length – 传入数据包的大小，以字节为单位。**
在从输入流解析给定字段之前，应进行检查以确保流足够大以容纳它。这样的检查可以在图 6 中看到：
**图 6：** 检查可用输入，使用Stream_GetRemainingLength().
我们再怎么强调这个输入检查的重要性都不为过。每次解析或跳过字段时，指针字段都会相应地前进。稍后，当执行下一次检查时，它看起来像这样：
**图 7：** 使用当前流的头部计算剩余长度。
一旦指针字段通过传入数据包的末尾，此计算将下溢，从而返回一个巨大的无符号值，该值应表示剩余的负字节数。总之，漏了一个检查，剩下的就没用了。正如我们很快发现的那样，这种有趣的设计选择使
FreeRDP极易受到越界读取漏洞的影响。
在我们介绍这些越界读取漏洞之前，重要的是要注意我们为什么关心它们。通常，读取只有在以某种方式将读取的字节返回给攻击者时才有用。否则，读取只能用作在尝试访问内存中未映射的页面时使程序崩溃的一种方式。
**Apache Guacamole** 攻击场景很特别，因为我们拥有连接的两端。例如，如果内存字节被解析为屏幕的图形更新，这些更新仍将发送到连接的客户端。
在这种攻击场景中，每个越界读取漏洞都可能变成一个弱但仍然有用的信息披露。
### **CPR-ID-2145 和 CPR-ID-2146 – FreeRDP 中的越界读取**
记住wStream对象中有趣的设计缺陷，我们所要做的就是寻找不受检查支持的读取操作。这很有效，我们发现了两个这样的漏洞： **CPR-ID-2145** 和
**CPR-ID-2146** 。
但是，在向供应商报告它们时，我们发现它们都已经被两个不同的小组报告了。由于这些是重复的，即使我们仅在几个小时后提交了它们，也应该将它们归于合法的研究人员。
因此，我们决定让其他团队展示他们的发现更为合适，并从我们的博客文章中删除了有关他们的详细信息。
## 我们需要一个内存损坏......
此时，我们发现了 5 个漏洞，这些漏洞可以作为我们攻击中的信息披露利用原语。但是，我们甚至还没有发现一个内存损坏漏洞。在 FreeRDP
中寻找此类漏洞非常烦人，因为每次我们有线索时，检查都会阻止它。很多时候，这个检查是针对我们报告的漏洞的补丁，所以我们真的不能抱怨太多。
**Zensploitation Twitter**
([@zensploitation](https://twitter.com/zensploitation
"@zensploitation"))中的这篇帖子几乎总结了我们在研究中此时的感受：
**图 8：**
在这一点上，我们认为我们已经走得太远了，不能简单地放弃。我们决定再看一遍guacamole服务器，这一次我们收获颇丰。
### **CPR-ID-2144 – 最后，内存损坏**
**CVE： CVE-2020-9498**