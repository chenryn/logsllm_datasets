require implementing a new feature from scratch, e.g., a GitHub
commit [2] adds a new ﬂight mode for Quad-plane type drones,
(3) For eight patches, PGPATCH needs to deﬁne a new variable,
loop, or function, e.g.,
[3], and (4) Four patches require
other complicated techniques, e.g., a GitHub commit [78]
adds/updates mathematical formulas. Creating correct patches
in these cases requires different kinds of analyses that we plan
to study in the future.
Patch Creation and Testing Overhead. PGPATCH takes on
average 12.5 minutes to create a patch. The Patch Veriﬁer
then runs the “Autotest suite” [12] and PGFuzz [41] to verify
a patch. These steps take an average of 2.81 hours. In the
case of manual patching, the developers similarly leverage
the “Autotest suite”. They additionally conduct a manual code
inspection with other maintainers of RV software.
C. Qualitative Evaluation
To evaluate the correctness of patches generated by
PGPATCH, two authors of this paper manually examined each
patch. To determine if a patch is correct, we use the following
criteria: (1) When both authors agree that a patch created by
PGPATCH and a patch created by developers are semantically
the same, we consider that the patch created by PGPATCH is
correct. (2) Some developers’ patches contain supplementary
code lines, e.g., logging an RV’s states. We ignore such code
lines in developers’ patches. We believe that developers can
easily add such supplementary code to patches created by
PGPATCH. (3) To measure patches’ performance impact, we
compare performance between an unpatched version of the RV
software and patched software containing all patches created
by PGPATCH.
Patch Correctness. PGPATCH generates 181 correct patches
out of 203 bugs found by fuzzing works (DataSetF) [41],
[43], as shown in Table III. Speciﬁcally, the root cause of
179 out of 181 bugs is that the three RV programs do not
check valid ranges of parameters or use incorrect ranges.
To ﬁx these bugs, PGPATCH extracted valid ranges for the
conﬁguration parameters from the RV documentation in XML
ﬁle format, as explained in Section V-D4. For these bugs, the
developers updated the documentation to warn users not to
assign parameter values outside valid ranges, and, unfortunately,
have not yet included patches for them at the time of writing.
PGPATCH generates 77 correct patches for logic bugs found
from DataSetH. We found that 97.4% (75/77) of the patches
are semantically the same as developers’ patches. However, two
patches of the DISABLE patch type are semantically different
from developers’ patches. The reason for the difference is that
PGPATCH is not designed to remove existing variables and
functions while using the DISABLE patch type. We select such
a design choice to minimize damaging the functionalities of
RV programs. However, developers’ patches remove functions.
We note that the two patches created by PGPATCH still ﬁx the
logic bugs. However, PGPATCH’s DISABLE patch type might
generate patches that contain unused code snippets.
Performance Impact. We evaluate the performance impact
of the 258 patches. After deploying all the generated patches
simultaneously (172 patches for ArduPilot, 48 patches for PX4,
and 38 patches for Paparazzi), we do not observe any signiﬁcant
performance degradation.
D. Root Cause and Physical Effect of Bugs
The root causes of the 181 bugs reported by fuzzing
tools for RVs [41], [43] are mainly incorrectly checked
valid ranges of conﬁguration parameters (96.1%) because the
fuzzers heavily mutated the parameters and discovered that
RV control programs do not properly check valid ranges of
the parameters. Out of 181 bugs, 176 bugs (97.2%) directly
lead to physical harm (i.e., either crashing or instability), and
5 bugs (2.8%) cause incorrect states. In contrast, we found
that 66 out of 77 bugs (85.7%) from GitHub commit history
occur due to either developers’ mistakes or unimplemented
features. Out of 77 bugs, 46 of them (59.7%) directly cause
physical harm. 31 (40.3%) either degrade ﬂight performance
due to increased processing time, wasted memory space, and
incorrectly measured states (e.g., incorrect land detection) or
lead to incorrect states. We detail the root cause and physical
effects of bugs for each RV control program in Appendix C.
E. Generality of PGPATCH
To evaluate the generality of PGPATCH to other RV software,
we studied 11 open-source RV control programs commonly
used in research [24] and industry [21], [22], as shown
in Table IV. To port PGPATCH to other RV software, the
following conditions must be satisﬁed: (1) The RV software
uses a telemetry protocol (e.g., MAVLink [53]) between an
RV and a ground control station (GCS) so that PGPATCH can
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
111836
RV
software
Paparazzi [59]
PX4 [64]
ArduPilot [8]
Betaﬂight [14]
Cleanﬂight [18]
INAV [35]
LibrePilot [47]
Tau Labs [76]
dRonin [23]
Hackﬂight [29]
multiwii [55]
Language
C
C/C++
C/C++
C
C
C
C
C/C++
C/C++
C++
C++
SLOC
(K)
6,024
4,042
3,999
1,825
1,668
1,309
1,106
944
817
34
13
Telemetry
protocol
Simulation
Naming
convention
Portable






















N/A


N/A
N/A
N/A
N/A















TABLE IV: A list of RV control programs used to evaluate
the generality of PGPATCH.
operate the RV through the telemetry protocol. (2) A simulator
supports the RV software. (3) The RV control program is
implemented in C/C++. (4) The software follows naming
conventions of getters and setters, e.g., get, set, enabled, and
disabled, if the software is implemented in C++. We manually
analyzed the documentation and source code of RVs, and
executed each RV software to test the ﬁrst three conditions (1)-
(3). To verify (4), we randomly select private member variables
and check whether the RV software follows the naming
conventions (See Appendix D). We found that PGPATCH
can be ported to 8 of the 11 RV control programs with
minor engineering effort. However, PGPATCH cannot be easily
applied to INAV [35] and multiwii [55], and Hackﬂight [29] as
they either are not supported by any simulators or the telemetry
protocol is used for viewers instead of operating RVs.
F. Discovering and Fixing New Logic Bugs
PGPATCH, when used in conjunction with bug-discovery
tools (such as PGFuzz [41]), can help identify and ﬁx new
bugs. In particular, we used PGPATCH together with PGFuzz to
leverage formulas for discovering new bugs and ﬁxing them. To
demonstrate this use case scenario, we evaluate PGPATCH on
Paparazzi to ﬁnd new logic bugs. We reused the ﬁve formulas
of PGFuzz and created an additional PPL formula that ensures
the RV’s correct operation under fail-safe mode. PGPATCH,
in conjunction with PGFuzz, ran for a day, and discovered a
total of 12 previously unknown logic bugs (See Table VIII
in Appendix E). PGPATCH ﬁxed 6 logic bugs correctly, 4 ADD,
1 DISABLE, and 1 CHECK type. The other 6 bugs require creating
the features from scratch (e.g., requires implementing Hover
ﬂight mode and Quad_Elie0 and Quad-Navstik vehicle types).
We have reported the discovered, previously unknown 12 bugs
to Paparazzi developers, and they acknowledged all the bugs.
G. User Study
In our user study, we aim to determine (1) the effort required
to create PPL formulas, and (2) how useful PGPATCH is in
patching the logic bugs compared to the manual patching effort
required by RV developers and users.
Recruitment Methods. We recruit from two different groups,
(1) RV software developers who actively ﬁx reported bugs,
and (2) experienced RV users who create patches, which are
then reviewed and approved by developers before they are
applied to the RV software. 22 participants (6 developers and
16 users) applied for our study, and 18 (6 developers and 12
5
5
5
5
4
4
4
5
3
2
4
5
5
5
3
2
2
5
5 5
3
4
3
4
3
4
2
5
5 4.6
t
c
e
r
r
o
c
f
s
r
e
w
s
n
a
o
#
1
1
0
0
0
0
0
2
g
v
A
A B C D E F G H I J K L M N O P Q R
Participant ID
Created patches
Built formulas
Fig. 9: The number of correct answers per participant.
% of correct
answers
# of incorrect
answers
Reasons
Patch
Formula
80.4%
37/46
91.1%
82/90
9
8
Partially ﬁx a bug (5)
Wrong unit used (2)
Wrong patch location (1)
Compile error (1)
Wrong term (3)
Wrong verb (2)
Wrong value (1)
Missing post-condition (2)
Type
of fault
Semantic
Syntactic
Syntactic
Semantic
TABLE V: Root causes of incorrect answers.
users) qualiﬁed based on their experience in ﬁnding bugs in
RVs and modifying RV software. We note that 1 of the 6 RV
developers is an ofﬁcial maintainer of ArduPilot. We detail the
demographic data of the participants in Appendix F.
1) Tasks: The user study consists of two tasks: (i) patching
ﬁve logic bugs in ArduPilot at the source code level, and (ii)
creating ﬁve PPL formulas used by PGPATCH to ﬁx the ﬁve
logic bugs in ArduPilot. We randomly selected the ﬁve bugs
from our evaluation data set (Section VII-A). We randomized
the order of the tasks and bugs per participant. We limit the
maximum time to perform each task to 2 hours.
Task1: Manually Creating Patches. Task1 consists of ﬁve
questions. In each question, the participants are asked to read
a logic bug’s description and manually create a patch. The
description explains (1) the incorrect behavior caused by the
bug, (2) the correct behavior on the documentation, and (3)
how to trigger the bug on the simulator. We ask the participants
to submit the patch locations and source code ﬁles containing
their patches. After each question, the participants rate (i) their
conﬁdence in their patch, and (ii) the difﬁculty in ﬁxing the
logic bug on a ﬁve-point scale. We allow participants to give
up creating a patch and justify it by providing an explanation.
Task2: Building PPL Formulas. In Task2, we ask participants
to create ﬁve PPL formulas. We show an online self-tutorial to
participants that (1) explains the PPL syntax in Listing 1, (2)
provides two PPL templates in Section II, and (3) presents six
examples to demonstrate how to convert the descriptions of RV
behaviors into PPL formulas. This is because the participants
have experience with RV software but not with the PPL syntax.
The participants spent on average 8.4 minutes (min: 4.9 and
max: 11.8 mins) in the tutorial. In each question, we ask the
participants to read a description of the RV’s correct behavior
and create a PPL formula using a set of candidate terms. We
provide these candidate terms to participants since PGPATCH
outputs them to allow users to build formulas (Section II).
After each question, we ask the participants to (i) score their
conﬁdence in their formula and how difﬁcult it was to create
it, and (ii) explain any reason if they decide to give up.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
121837
64
42
36
36.9
4
2
2
2.4
24
17
2
2
120
80
40
0
)
.
i
n
M
(
e
m
T
i
14
2.2
12
1.2
22
31
6
3.3
20
2
20
3
120
80