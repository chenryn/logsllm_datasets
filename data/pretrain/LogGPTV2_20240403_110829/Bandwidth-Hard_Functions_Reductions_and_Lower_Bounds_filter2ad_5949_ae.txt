(cid:107)
rbpeb
(G, m) ≥ 2(cid:12)(cid:12)∪t
(cid:32)
i
(cid:12)(cid:12) cb + tcr
(cid:33)
− m
i=1Bi
≥ 2 max
|Bi|cb + tcr
(cid:107)
cc(G)
Π
≥ 2
(cid:32)
t
(cid:32)
2
≥ min
t
(cid:107)
cc(G)
Π
t
− m
cb + tcr
(cid:33)
(cid:33)
cb, tcr
Corollary 4.2. For an (e, d)-depth robust graph G,
(cid:107)
rbpeb
(G, m) ≥ min
t
(cid:18)
2
(cid:18) ed
t
(cid:19)
− m
(cid:19)
cb, tcr
.
Proof. An (e, d)-depth robust DAG G has ed ≤ Π
(cid:107)
cc(G) [ABP17].
We show that there exists a similar relationship between sequential black pebbling cost and sequential
red-blue pebbling cost.
Theorem 4.3.
(cid:18) Πcc(G)
t
(cid:19)
− m
+ crt,
rbpeb(G) ≥ 2cb
where m is the cache size, t is the number of steps in the pebbling, cb is the cost of a blue move and cr is the
cost of a red move.
Proof. Given a sequential black pebbling P1, . . . , Pt of G, let Bi be the set of blue pebbles at time step i.
Then
|Bi| ≥ max
(|Pi| − m) ≥
i
max
i
(cid:18) Πcc(G)
t
(cid:19)
− m
,
where the last step results from a simple averaging argument over all t steps. Finally, each item in Bi requires
cost cb to load into cache and another cost cb to be stored in memory (if the item is not ever retrieved from
memory, it would not be in Bi for an optimal pebbling).
Theorem 1.2 can also be related to parallel pebbling through the following lemma:
Lemma 4.4. rbpeb(G, 2m) ≤ rbpeb
(cid:107)
(G, m) ≤ rbpeb(G, m).
(G, m) ≤ rbpeb(G, m) follows immediately from deﬁnition.7 Now consider rbpeb(G, 2m) and
(cid:107)
Proof. rbpeb
(cid:107)
rbpeb
(G, m). Any parallel pebbling with cache size m can be performed by a sequential pebbling with cache
size 2m. Note that at any step, a parallel pebbling with cache size m can have at most m labels stored and
m new pebbles placed in each step. Thus, a sequential pebbling with cache size 2m can emulate this by
retaining the stored labels while adding the new pebbles one by one.
7To see that rbpeb(cid:107)(G, m) and rbpeb(G, m) are not identically equivalent quantities, consider the complete directed bipartite
graph Km,m with m sources A and m sink nodes B(m is also the cache size). In the parallel model we can ﬁnish in two steps
with zero blue moves: R0 = ∅, R1 = A, R2 = B. In the sequential pebble game we would have to keep pebbles on A while we
begin placing pebbles on B one by one. Each time we place a red-pebble on a node y ∈ B we need to evict some node x ∈ A
by converting x into a blue node (and then bring it back into the cache-later).
17
Combining Theorem 4.3 and Lemma 4.4 yields Theorem 1.2.
Alwen and Blocki [AB16] show Π
cc(G) = O(cid:16) n2 log log n
(cid:107)
(cid:17)
Moreover, there exists a family of DAGs {Gn}∞
AdRNV16].
for any graph G with constant indegree.
n=1 with constant indegree with Πcc(Gn) ∈ Ω(n2) [Sch83,
log n
We now show a relationship similar to Theorem 1.2 between the energy cost and cumulative memory
cost [AS15] of an execution trace, where the cumulative memory cost of an execution trace is deﬁned as:
cmc(TraceA,R,H (x)) =
(cid:88)|αi|,
where αi encodes the state of the attacker at round i. Similarly, cmcq,(fG,H ) = minA,R,x cmc(TraceA,R,H (x))
where the minimum is taken over all A making at most q random oracle queries that compute fG,H correctly
with probability at least . While there is no notion of a cache in their pROM model, we could trivially
set αi = (σi, ξi). We note that for ecostq, (fG,H ) minimum is taken over all A making at most q random
oracle queries that compute fG,H correctly with probability at least  and having cache size at most mw
bits, which means that the set of attackers we consider is even more restrictive. We emphasize that A can
be an arbitrary pROM algorithm, so that the following result also applies to dMHFs such as scrypt.
Theorem 4.5. For any execution trace TraceA,R,H (x) of an algorithm A with cache size mw bits
ecost(TraceA,R,H (x)) ≥
(cid:18) cmc(TraceA,R,H (x))
(cid:19)
tw
− m
cb + tcr,
where m is the cache size, t is the number of steps, cb is the cost of a blue move and cr is the cost of a red
move.
Proof. Recall that the energy cost of an execution trace
i=1 is deﬁned as
TraceA,R,H (x) = {(σi, ξi, Ri, Si, Qi)}t
(cid:16)
t(cid:88)
(cid:18) cmc(TraceA,R,H (x))
cr|Qi| +
cb
w
i=1
(|Ri| + |Si|)
(cid:17)
(cid:19)
− m
ecost(TraceA,R,H (x)) =
≥ max
cb + tcr ≥
|ξi|
w
The second step above follows from the observation that for all j we have |ξj| ≤(cid:80)j
cb + tcr
tw
i
i=1 (|Ri| + |Si|), and
the third step follows from the observation that
cmc(TraceA,R,H (x)) − mtw =
(|σ| + |ξ|) − mtw ≤ t max
i
|ξi| .
t(cid:88)
i=1
(cid:32)(cid:114)
In particular, by minimizing over all t it follows that for any trace TraceA,R,H (x) we have
ecost(TraceA,R,H (x)) ∈ Ω
cmc(TraceA,R,H (x)) · cb · cr
w
− mcb
(cid:33)
Since Alwen et al. [ACP+17] show that cmcq,(scrypt) ∈ Ω(n2 · w) for any q > 0 and  > 2−w/2 + 2−n/20+1
it follows that
Corollary 4.6. For any q > 0 and  > 2−w/2 + 2−n/20+1,
√
cb · cr) .
ecostq,(scrypt) ∈ Ω (n
18
5 Bandwidth Hardness of Candidate iMHFs
In this section, we provide lower bounds on the bandwidth hardness on the family of graphs generated by
Argon2i [BDK15], aATSample, and DRSample [ABH17]. Given a DAG G = ([n], E), a target set T ⊂ [n] and
red/blue subsets B, R ⊆ [n] with |R| ≤ m we let rbpeb
(cid:107)
(G, m, T, B, R) denote the red-blue cost to place red
pebbles on a target set T starting from an initial red-blue pebbling conﬁguration B, R.
5.1 Analysis Framework
We follow a similar strategy for each candidate construction by deﬁning a target set Ti = ((i− 1)c(cid:96), ic(cid:96)], and
analyzing the structure of the DAG to lower bound the following quantity for that DAG:
R,B(cid:48)⊆[(i−1)c(cid:96)]:|R|≤m
min
(|B(cid:48)| cb + |ancestorsG−R−B(cid:48)(Ti)| cr)
We show in Theorem 5.2 that this quantity suﬃces to lower bound the bandwidth hardness.
Lemma 5.1. ∀T, B, R ⊆ [n] such that |R| ≤ m we have
(cid:107)
rbpeb
(G, m, T, B, R) ≥ min
B(cid:48)⊆B
(|B(cid:48)| cb + |ancestorsG−R−B(cid:48)(T )| cr) ,
where cb is the cost of a blue move and cr is the cost of a red move.
Proof. Let P = (B0, R0) , (B1, R1) . . . , (Bt, Rt) denote a legal red-blue pebbling sequence given starting
conﬁguration B0 = {v ∈ B : ∃j ≤ t.v ∈ Rj} (e.g., B0 is the subset of all blue pebbles in B that we will
use at some point during the pebbling) and R0 = R. By construction of B0 the pebbling contains at least
B0 blue moves at cost |B0| cb. Similarly, we remark that we must place a red-pebble on all of the nodes in
ancestorsG−R−B(cid:48)(T ) at some point. Thus, we have at least |ancestorsG−R−B(cid:48)(T )| cr red-moves. It follows
that
(cid:107)
rbpeb
(G, m, T, B, R) ≥ min
B(cid:48)⊆B
(|B(cid:48)| cb + |ancestorsG−R−B(cid:48)(T )| cr) .
Theorem 5.2. Let G = ([n], E) be any DAG such that (i, i + 1) ∈ E for each i < n, let c be a positive
integer and Ti = ((i − 1)c(cid:96) + 1, ic(cid:96)],
c(cid:96)(cid:99)(cid:88)
(cid:98) n
(cid:107)
rbpeb
(G, m) ≥
R,B(cid:48)⊆[(i−1)c(cid:96)]:|R|≤m
(|B(cid:48)| cb + |ancestorsG−R−B(cid:48)(Ti)| cr) .
i=1
min
To prove Theorem 5.2, consider an optimal red-blue pebbling and let ti denote the ﬁrst time we place a
pebble on node ic(cid:96). For each i, we use Lemma 5.1 to lower bound the red-blue cost incurred between steps
ti−1 + 1 and ti. See Appendix A for more details.
(G, m) ≤ ncr for any graph G. Thus,
(cid:107)
As expected, if m = n then we have red-blue cost at most rbpeb
we require some upper bound on m to establish lower-bounds for red-blue pebbling cost.
5.2 Underlying DAGs
We now describe each of the underlying DAGs whose energy complexity we analyze.
The underlying graph for Argon2iB [BDK16] has a directed path of length n nodes. Each node i has
, where N (cid:29) n (in the implementation of N = 232) and x is chosen
parents i − 1 and r(i) = i
uniformly at random from [N ]. See Algorithm 3 in Appendix C for a more formal description.
1 − x2
N 2
(cid:16)
(cid:17)
19
While Argon2iA (v1.1) is an outdated version of the password hash function it is still worthwhile to study
for several reasons. First, the uniform edge distribution is a natural one which has been adopted by other
iMHF constructions [BCS16]. Second, it is possible that this older version of Argon2i may have seen some
adoption. Each node i in Argon2iA has two parents: i − 1 and r(i) = i(cid:0)1 − x
(cid:1), where N = 232 and x is
(cid:107)
cc(G) ∈ Ω
DRSample is a family of graphs Gn with Π
chosen uniformly at random from [N ]. Thus, the parents in Argon2iA are slightly less biased towards closer
nodes than in Argon2iB. See Algorithm 4 in Appendix C for a more formal description.
with high probability for any G ∈ Gn. Like
Argon2i and Argon2iB, the underlying graph for DRSample has a directed path of length n nodes. Each
node i has parents i − 1 and r(i), but the distribution for r(i) diﬀers greatly from Argon2i and Argon2iB.
Roughly speaking, DRSample samples an index j uniformly at random from [1, log i], an index k uniformly
at random from [1, 2j], and sets r(i) = i − k. See Algorithm 1 in Appendix C for a more formal description.
A close relative to DRSample, aATSample [ABH17] is also a family of graphs Gn with Π
with high probability for any G ∈ Gn. aATSample modiﬁes DRSample by appending another directed path
with n nodes that strategically connects to the ﬁrst half of the graph so that the resulting computational
complexity is high. See Algorithm 2 in Appendix C for a more formal description.
(cid:107)
cc(G) ∈ Ω
(cid:16) n2
(cid:17)
log n
log n
(cid:16) n2
(cid:17)
N
5.3 Argon2iB
Let G be a graph generated by Argon2iB and Gk be the metagraph with n
k nodes, so that each meta-node
in Gk represents k nodes in G. Again, we connect two meta-nodes i < j in Gk if there exists a node in the
last k/3 nodes of i to a node in the ﬁrst k/3 nodes of j. Then Gk has the following property:
Lemma 5.3. [BZ17] For any two meta-nodes x < y of Gk, the last third of x is connected to the ﬁrst third
of y with probability at least
√
.
k
T = [i, i + (cid:96) − 1] be an interval of length (cid:96) = O(cid:16)
k+36
k
3−(cid:17)