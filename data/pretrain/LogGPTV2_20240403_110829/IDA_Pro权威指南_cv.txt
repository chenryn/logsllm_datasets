 指令，模拟器将确定目标地址是否位于被分析的文件的虚拟地址空间之内，或者目标地址是否与所分析二进制文件已加载的一个库导出的函数有关。如前所述，模拟器会加载它所分析的二进制文件加载的所有库的导出目录。如果模拟器确定调用指令的目标地址在该二进制文件的边界以外，模拟器将扫描加载到数据库中的导出表，以确定被调用的库函数。对于 Windows PE文件，模拟器为表 21-2 中列出的函数提供了模拟实现。
如果模拟器确定其中的一个函数被调用，它将从程序栈中读取任何参数，要么执行和该函数相同的操作（如果程序正在运行），或者执行某个最低限度的操作，生成一个在被模拟的程序看来是正确的返回地址。对于使用 stdcall
 调用约定的函数，在完成被模拟的函数之前，模拟器还会删除任何栈参数。
表21-2 被x86emu 模拟的函数
CheckRemoteDebuggerPresent
GetTickCount
LocalFree
VirtualAlloc
CreateThread
GetVersion
NtQuerySystemInformation
VirtualFree
GetCurrentThreadId
HeapAlloc
NtQueryInformationProcess
calloc
GetCurrentProcess
HeapCreate
NtSetInformationThread
free
GetCurrentProcessId
HeapDestroy
RtlAllocateHeap
lstrcat
GetModuleHandleA
HeapFree
TlsAlloc
lstrcpy
GetProcAddress
IsDebuggerPresent
TlsFree
lstrlen
GetProcessHeap
LoadLibraryA
TlsGetValue
malloc
GetThreadContext
LocalAlloc
TlsSetValue
realloc
模拟与堆有关的函数的行为，将会使模拟器操纵它的内部堆实现（由.heap
 节实现），并返回一个适用于被模拟函数的值。例如，HeapAlloc
 的模拟版本返回的值是一个适合被模拟的程序写入数据的地址。调用 VirtualAlloc
 的模拟版本时，将在数据库中创建一个新节，用于表示新映射的虚拟地址空间。IsDebuggerPresent
 的模拟版本总是返回假。在模拟LoadLibraryA
 时，模拟器会通过检查向 LoadLibraryA
 提供的栈参数，提取出它所加载的库的名称。然后，模拟器尝试在本地系统上打开这个库，使这个库的导出表能够加载到数据库中。最后，模拟器会向调用方返回一个合适的库句柄4
 值。当拦截到对 GetProcAddress
 的调用时，模拟器会检查栈上的参数，确定被引用的共享库。然后，模拟器解析这个库的导出表，计算出GetProcAddress
 的正确内存地址。最后，模拟版本的GetProcAddress
 函数将函数地址返回给调用方。对LoadLibraryA
 和GetProcAddress
 的调用将在 IDA 的“输出”窗口中显示。
4. 一个 Windows 库句柄仅识别 Windows 进程中的一个库。库句柄实际上是一个基址，库在这个位置被加载到内存中。
调用x86emu不为其提供内部模拟的函数时，将显示与图 21-8 类似的对话框。
图21-8 x86emu库函数对话框
知道了被调用函数的名称，模拟器将查询 IDA 的类型库信息，获取该函数所需的参数的数量和类型。然后，模拟器深入挖掘程序栈，显示已经传递给该函数的所有参数及其类型和正式名称。参数类型和名称只有在 IDA 提供相关的类型信息时才能正确显示。用户可利用这个对话框指定一个返回值，以及该函数使用的调用约定（这些信息可能由 IDA 提供）。如果选择tdcall用约定，用户应指出，在调用完成时，应从栈上删除多少个参数（而非字节）。在模拟函数调用时，模拟器需要这些信息来维持执行栈的完整性。
回到前面的 UPX 去模糊示例，让模拟器完成导入表重建循环，我们发现，模拟器在 IDA 的“输出”窗口中生成以下输出：
x86emu: LoadLibrary called: KERNEL32.DLL (7C800000)  
x86emu: GetProcAddress called: ExitProcess (0x7C81CDDA)  
x86emu: GetProcAddress called: ExitThread (0x7C80C058)  
x86emu: GetProcAddress called: GetCurrentProcess (0x7C80DDF5)  
x86emu: GetProcAddress called: GetCurrentThread (0x7C8098EB)  
x86emu: GetProcAddress called: GetFileSize (0x7C810A77)  
x86emu: GetProcAddress called: GetModuleHandleA (0x7C80B6A1)  
x86emu: GetProcAddress called: CloseHandle (0x7C809B47)
这个输出记录了模糊二进制文件加载的库，以及这些库中被模糊程序查找的函数5
 。如果以这种方式查找函数地址，这些地址通常保存在一个数组中（这个数组是程序的导入表），以方便随后使用。
5. 只要程序已经使用GetProcAddress
 找到某个函数的地址，随后，该程序可以使用返回的地址随时调用这个函数。以这种方式查找函数地址，既免去了在构建时显式链接函数的需要，也减少了dumpbin 等静态分析工具能够提取到的信息量。
去模糊后的程序存在一个基本问题，即它们缺乏符号表信息，而没有经过模糊处理的二进制文件往往包含这些信息。如果一个二进制文件的导入表完好无损，IDA 的PE加载器将根据它在运行时将包含其地址的函数的名称，为导入表中的每个条目命名。如果遇到一个模糊二进制文件，对每一个存储函数地址的位置应用函数名称将会有好处。就 UPX 而言，下面摘自代码清单 21-1的几行代码说明了函数地址在每次经历函数查找循环时如何保存到内存中：
  UPX1:00408897        call    dword ptr [esi+8090h] ; GetProcAddress   
  UPX1:0040889D        or      eax, eax  
  UPX1:0040889F        jz      short loc_4088A8  
➊  UPX1:004088A1        mov     [ebx], eax            ; Save to import table  
  UPX1:004088A3        add     ebx, 4
地址004088A1h
 处的指令（➊）负责将函数地址存储到重建后的导入表中。x86emu提供一种自动工具，只要 x86emu识别一个这样的指令，该工具将命名导入表中的每个条目。模拟器称这样的指令为“导入地址保存点”（import address save point），你可以使用 Emulate▶Windows▶Set Import Address Save Point （模拟▶窗口▶设置导入地址保存点）菜单将一个地址指定为“导入地址保存点”。为了使这一功能生效，你必须在模拟指令之前进行指定。完成指定后，每次模拟这条指令，模拟器将进行一次查找，确定被写入的数据代表哪一个函数，然后使用这个导入函数的名称命名被写入的地址。在 UPX 示例中，若没有指定一个“导入地址保存点”，将得到下面的导入表（部分显示）：
UPX0:00406270                 dd 7C81CDDAh  
UPX0:00406274                 dd 7C80C058h  
UPX0:00406278                 dd 7C80DDF5h  
UPX0:0040627C                 dd 7C8098EBh
但是，在指定“导入地址保存点”时，x86emu 工具执行的自动命名将产生以下自动生成的导入表（部分显示）：
UPX0:00406270 ; void __stdcall ExitProcess(UINT uExitCode)  
UPX0:00406270 ExitProcess     dd 7C81CDDAh ; DATA XREF: j_ExitProcess↑ r  
UPX0:00406274 ; void __stdcall ExitThread(DWORD dwExitCode)  
UPX0:00406274 ExitThread      dd 7C80C058h ; DATA XREF: j_ExitThread ↑ r  
UPX0:00406278 ; HANDLE __stdcall GetCurrentProcess()  
UPX0:00406278 GetCurrentProcess dd 7C80DDF5h ; DATA XREF: j_GetCurrentProcess↑ r  
UPX0:0040627C ; HANDLE __stdcall GetCurrentThread()  
UPX0:0040627C GetCurrentThread dd 7C8098EBh ; DATA XREF: j_GetCurrentThread ↑ r
以这种方式重建导入表，IDA 将能够使用从它的类型库中提取出的参数类型信息，为库函数调用添加适当的注释，反汇编代码清单的总体质量也因此得到显著提高。
4. x86emu 的其他功能
这种模拟器还提供其他一些有用的功能。下面详细介绍其中一些功能。
File▶Dump（文件▶转储）。用户可利用这个菜单选项指定一个数据库地址范围，这些地址将转储到一个文件中。默认情况下，这个范围由光标当前所在位置延伸到数据库中的最大虚拟地址。
File▶Dump Embedded PE（文件▶转储嵌入式 PE）。许多恶意程序包含嵌入式可执行文件，以将它们安装到目标系统中。这个菜单选项在光标当前所在位置寻找一个有效的PE文件，解析这个文件的头部，以确定该文件的大小，然后从数据库中提取出相应的字节，转储到一个文件中。
View▶Enumerate Heap （查看▶枚举堆）。这个菜单项使模拟器将一组已分配的堆块转储到“输出”窗口中，如下所示：
x86emu: Heap Status ---
   0x5378000-0x53781ff (0x200 bytes)
   0x5378204-0x5378217 (0x14 bytes)
   0x537821c-0x5378347 (0x12c bytes)
Emulate▶Switch Thread （模拟▶切换线程）。在 Windows PE文件中进行模拟时，x86emu会捕捉对CreateThread
 函数的调用，并分配额外的资源来管理一个新的线程。由于模拟器没有自己的调度器，如果你希望在多个线程之间切换，必须使用这个菜单项。
Functions ▶Allocate Heap Block（函数▶分配堆块）。用户可利用这个菜单项在模拟堆中保留一个内存块。用户需要提供这个块的大小。这个新保留块的地址将报告给用户。如果在模拟过程中需要暂存空间，就会用到这项功能。
Functions ▶Allocate Stack Block （函数▶分配栈块）。用户可利用这个菜单项在模拟栈中保留一个内存块。它的作用与 Functions Allocate Heap Block命令类似。
5. x86emu 与反调试
虽然模拟器并不是作为调试器使用的，但它必须为被模拟的程序模拟一个运行时环境。为了成功模拟许多模糊二进制文件，模拟器不能成为各种主动的反调试技巧的牺牲品。在设计模拟器的一些功能时，我们一直考虑到这些反调试技巧。
其中一种反调试技巧是使用 x86 rdtsc
 指令测量时间间隔，确保一个程序不会被调试器暂停。rdtsc
 指令用于读取内部时间戳计数器
 （Time Stamp Counter，TSC ），并返回一个 64 位值，表示处理器自上一次重启以来所经过的时间。TSC 递增的速度因 CPU 类型而异，但基本上是每个内部CPU 时钟周期递增一次。调试器无法终止 TSC 递增，因此，通过测量两个连续的 rdtsc
 调用之间的TSC 差异，处理器能够确定它曾经被终止很长一段时间。x86emu维护有一个内部 TSC ，它随每条被模拟的指令而递增。因为模拟 TSC 仅仅受被模拟的指令影响，因此，使用rdtsc
 的间隙不论有多久，都不会造成问题。这样，观察到的TSC 值之间的差距将始终与在两次调用 rdtsc
 之间模拟的指令数量大致成一定比例，而且这个差距会始终保持足够小，能够让被模拟的程序确信它没有附加调试器。
有意使用异常是模拟器必须处理的另一种反调试技巧。模拟器包含非常基本的功能，能够模拟Windows 结构化异常处理（SEH ）进程的行为。如果被模拟的程序是一个 Windows PE二进制文件，模拟器必须通过构建一个 SHE CONTEXT
 结构体，通过 fs:[0]
 遍历异常处理程序列表来定位当前的异常处理程序，并将控制权转交给这个已安装的异常处理程序，以此来响应一个异常或软件中断。当该异常处理程序返回时，模拟器将从CONTEXT
 结构体（可能已经被异常处理程序修改）恢复CPU 的状态。
最后，虽然 x86emu模拟x86 硬件调试寄存器的行为，但它并不利用这些寄存器在一个被模拟的程序中设置断点。如前所述，模拟器在内部维护用户指定的断点列表，并在执行每条指令前扫描这个列表。在 Windows异常处理程序中对调试寄存器的任何修改都不会影响模拟器的操作。
21.4 基于虚拟机的模糊
如本章前面所述（见 21.1.2 节中的“操作码模糊”），一些最复杂的模糊器使用自定义字节码及相关的虚拟机重新实现了原本具有输入接收功能的程序。面对以这种方式模糊的二进制文件，你看到的唯一本机代码为虚拟机。假设你认识到所看到的是软件虚拟机，那么一般而言，完全了解所有这些代码并不能揭示该模糊程序的真实意图。这是因为程序的行为仍然隐藏在必须由虚拟机解释的嵌入式字节码中。要完全了解这个程序，首先你必须定位所有的嵌入式字节码，然后逆向工程虚拟机的指令集，以便能够正确解释该字节码的含义。
作为比较，想象一下，如果你对 Java 一无所知，有人给你一个 Java 虚拟机和一个包含已编译字节码的.class 文件，并问你它们有什么作用。由于缺乏任何文档资料，你可能对字节码文件知之甚少，并且你需要完全逆向工程虚拟机才能了解.class 文件的结构以及如何解释它的内容。对字节码机器语言有一定了解后，接下来你就可以了解.class 文件的作用。
VMProtect是一款利用非常复杂的基于虚拟机的模糊技术的商业产品。更多是作为一种学术活动，TheHyper的HyperUnpackMe21
 挑战二进制文件是在模糊中使用虚拟机的一个相当简单的示例，主要的挑战在于定位虚拟机的嵌入式字节码程序并确定每个字节码的含义。在OpenRCE上描述HyperUnpackMe2的文章2
 中，Rolf Rolles 采用的方法是：充分了解虚拟机以构建一个能够反汇编其字节码的处理器模块。然后，他使用该处理器模块来反汇编嵌入到所挑战的二进制文件中的字节码。使用这个方法存在一个小限制，通过它你可以查看 HyperUnpackme2中的x86 代码（使用IDA 的x86 模块）或虚拟机代码（使用 Rolle的处理器模块），但不能同时查看这两种代码。为此，你需要创建两个不同的数据库（每个数据库使用不同的处理器模块）。另一种方法是在使用插件的过程中利用定制现有处理器模块的功能（参见19.5 节），来有效扩展指令集，在其中包括嵌入式虚拟机的所有指令。将这种方法应用于HyperUnpackMe2，我们就可以在一个数据库中同时查看 x86 代码和虚拟机代码了，如下面的清单所示：
1. HyperUnpackMe2 是一个crackme。——译者注
2. 参见 http://www.openrce.org/articles/full_view/28
 网站的“Defeating HyperUnpackMe2 With an IDA Processor Module ”。
TheHyper:01013B2F             ➊ h_pop.l       R9  
TheHyper:01013B32                h_pop.l       R7  
TheHyper:01013B35                h_pop.l       R5  
TheHyper:01013B38                h_mov.l       SP, R2  
TheHyper:01013B3C                h_sub.l       SP, 0Ch  
TheHyper:01013B44                h_pop.l       R2  
TheHyper:01013B47                h_pop.l       R1  
TheHyper:01013B4A                h_retn        0Ch  
TheHyper:01013B4A sub_1013919  endp  
TheHyper:01013B4A  
TheHyper:01013B4A ; ----------------------------------------------------------  