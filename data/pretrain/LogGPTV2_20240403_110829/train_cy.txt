is possible to start with a big datagram size
(headers up to 64 kilobytes long) and let it shrink by updates of the path mtu.
.ip
to get an initial estimate of the
path mtu, connect a datagram socket to the destination address using
.br connect (2)
and retrieve the mtu by calling
.br getsockopt (2)
with the
.b ip_mtu
option.
.ip
it is possible to implement rfc 4821 mtu probing with
.b sock_dgram
or
.b sock_raw
sockets by setting a value of
.br ip_pmtudisc_probe
(available since linux 2.6.22).
this is also particularly useful for diagnostic tools such as
.br tracepath (8)
that wish to deliberately send probe packets larger than
the observed path mtu.
.tp
.br ip_multicast_all " (since linux 2.6.31)"
this option can be used to modify the delivery policy of multicast messages
to sockets bound to the wildcard
.b inaddr_any
address.
the argument is a boolean integer (defaults to 1).
if set to 1,
the socket will receive messages from all the groups that have been joined
globally on the whole system.
otherwise, it will deliver messages only from
the groups that have been explicitly joined (for example via the
.b ip_add_membership
option) on this particular socket.
.tp
.br ip_multicast_if " (since linux 1.2)"
set the local device for a multicast socket.
the argument for
.br setsockopt (2)
is an
.i ip_mreqn
or
.\" net: ip_multicast_if setsockopt now recognizes struct mreq
.\" commit: 3a084ddb4bf299a6e898a9a07c89f3917f0713f7
(since linux 3.5)
.i ip_mreq
structure similar to
.br ip_add_membership ,
or an
.i in_addr
structure.
(the kernel determines which structure is being passed based
on the size passed in
.ir optlen .)
for
.br getsockopt (2),
the argument is an
.i in_addr
structure.
.tp
.br ip_multicast_loop " (since linux 1.2)"
set or read a boolean integer argument that determines whether
sent multicast packets should be looped back to the local sockets.
.tp
.br ip_multicast_ttl " (since linux 1.2)"
set or read the time-to-live value of outgoing multicast packets for this
socket.
it is very important for multicast packets to set the smallest ttl possible.
the default is 1 which means that multicast packets don't leave the local
network unless the user program explicitly requests it.
argument is an integer.
.tp
.br ip_nodefrag " (since linux 2.6.36)"
if enabled (argument is nonzero),
the reassembly of outgoing packets is disabled in the netfilter layer.
the argument is an integer.
.ip
this option is valid only for
.b sock_raw
sockets.
.tp
.br ip_options " (since linux 2.0)"
.\" precisely: 1.3.30
set or get the ip options to be sent with every packet from this socket.
the arguments are a pointer to a memory buffer containing the options
and the option length.
the
.br setsockopt (2)
call sets the ip options associated with a socket.
the maximum option size for ipv4 is 40 bytes.
see rfc\ 791 for the allowed options.
when the initial connection request packet for a
.b sock_stream
socket contains ip options, the ip options will be set automatically
to the options from the initial packet with routing headers reversed.
incoming packets are not allowed to change options after the connection
is established.
the processing of all incoming source routing options
is disabled by default and can be enabled by using the
.i accept_source_route
.i /proc
interface.
other options like timestamps are still handled.
for datagram sockets, ip options can be set only by the local user.
calling
.br getsockopt (2)
with
.b ip_options
puts the current ip options used for sending into the supplied buffer.
.tp
.br ip_passsec " (since linux 2.6.17)"
.\" commit 2c7946a7bf45ae86736ab3b43d0085e43947945c
if labeled ipsec or netlabel is configured on the sending and receiving
hosts, this option enables receiving of the security context of the peer
socket in an ancillary message of type
.b scm_security
retrieved using
.br recvmsg (2).
this option is supported only for udp sockets; for tcp or sctp sockets,
see the description of the
.b so_peersec
option below.
.ip
the value given as an argument to
.br setsockopt (2)
and returned as the result of
.br getsockopt (2)
is an integer boolean flag.
.ip
the security context returned in the
.b scm_security
ancillary message
is of the same format as the one described under the
.b so_peersec
option below.
.ip
note: the reuse of the
.b scm_security
message type for the
.b ip_passsec
socket option was likely a mistake, since other ip control messages use
their own numbering scheme in the ip namespace and often use the
socket option value as the message type.
there is no conflict currently since the ip option with the same value as
.b scm_security
is
.b ip_hdrincl
and this is never used for a control message type.
.tp
.br ip_pktinfo " (since linux 2.2)"
.\" precisely: 2.1.68
pass an
.b ip_pktinfo
ancillary message that contains a
.i pktinfo
structure that supplies some information about the incoming packet.
this works only for datagram oriented sockets.
the argument is a flag that tells the socket whether the
.b ip_pktinfo
message should be passed or not.
the message itself can be sent/retrieved
only as a control message with a packet using
.br recvmsg (2)
or
.br sendmsg (2).
.ip
.in +4n
.ex
struct in_pktinfo {
    unsigned int   ipi_ifindex;  /* interface index */
    struct in_addr ipi_spec_dst; /* local address */
    struct in_addr ipi_addr;     /* header destination
                                    address */
};
.ee
.in
.ip
.i ipi_ifindex
is the unique index of the interface the packet was received on.
.i ipi_spec_dst
is the local address of the packet and
.i ipi_addr
is the destination address in the packet header.
if
.b ip_pktinfo
is passed to
.br sendmsg (2)
and
.\" this field is grossly misnamed
.i ipi_spec_dst
is not zero, then it is used as the local source address for the routing
table lookup and for setting up ip source route options.
when
.i ipi_ifindex
is not zero, the primary local address of the interface specified by the
index overwrites
.i ipi_spec_dst
for the routing table lookup.
.tp
.br ip_recverr " (since linux 2.2)"
.\" precisely: 2.1.15
enable extended reliable error message passing.
when enabled on a datagram socket, all
generated errors will be queued in a per-socket error queue.
when the user receives an error from a socket operation,
the errors can be received by calling
.br recvmsg (2)
with the
.b msg_errqueue
flag set.
the
.i sock_extended_err
structure describing the error will be passed in an ancillary message with
the type
.b ip_recverr
and the level
.br ipproto_ip .
.\" or sol_ip on linux
this is useful for reliable error handling on unconnected sockets.
the received data portion of the error queue contains the error packet.
.ip
the
.b ip_recverr
control message contains a
.i sock_extended_err
structure:
.ip
.in +4n
.ex
#define so_ee_origin_none    0
#define so_ee_origin_local   1
#define so_ee_origin_icmp    2
#define so_ee_origin_icmp6   3
struct sock_extended_err {
    uint32_t ee_errno;   /* error number */
    uint8_t  ee_origin;  /* where the error originated */
    uint8_t  ee_type;    /* type */
    uint8_t  ee_code;    /* code */
    uint8_t  ee_pad;
    uint32_t ee_info;    /* additional information */
    uint32_t ee_data;    /* other data */
    /* more data may follow */
};
struct sockaddr *so_ee_offender(struct sock_extended_err *);
.ee
.in
.ip
.i ee_errno
contains the
.i errno
number of the queued error.
.i ee_origin
is the origin code of where the error originated.
the other fields are protocol-specific.
the macro
.b so_ee_offender
returns a pointer to the address of the network object
where the error originated from given a pointer to the ancillary message.
if this address is not known, the
.i sa_family
member of the
.i sockaddr
contains
.b af_unspec
and the other fields of the
.i sockaddr
are undefined.
.ip
ip uses the
.i sock_extended_err
structure as follows:
.i ee_origin
is set to
.b so_ee_origin_icmp
for errors received as an icmp packet, or
.b so_ee_origin_local
for locally generated errors.
unknown values should be ignored.
.i ee_type
and
.i ee_code
are set from the type and code fields of the icmp header.
.i ee_info
contains the discovered mtu for
.b emsgsize
errors.
the message also contains the
.i sockaddr_in of the node
caused the error, which can be accessed with the
.b so_ee_offender
macro.
the
.i sin_family
field of the
.b so_ee_offender
address is
.b af_unspec
when the source was unknown.
when the error originated from the network, all ip options
.rb ( ip_options ", " ip_ttl ,
etc.) enabled on the socket and contained in the
error packet are passed as control messages.
the payload of the packet causing the error is returned as normal payload.
.\" fixme . is it a good idea to document that? it is a dubious feature.
.\" on
.\" .b sock_stream
.\" sockets,
.\" .b ip_recverr
.\" has slightly different semantics. instead of
.\" saving the errors for the next timeout, it passes all incoming
.\" errors immediately to the user.
.\" this might be useful for very short-lived tcp connections which
.\" need fast error handling. use this option with care:
.\" it makes tcp unreliable
.\" by not allowing it to recover properly from routing
.\" shifts and other normal
.\" conditions and breaks the protocol specification.
note that tcp has no error queue;
.b msg_errqueue
is not permitted on
.b sock_stream
sockets.
.b ip_recverr
is valid for tcp, but all errors are returned by socket function return or
.b so_error
only.
.ip
for raw sockets,
.b ip_recverr
enables passing of all received icmp errors to the
application, otherwise errors are reported only on connected sockets
.ip
it sets or retrieves an integer boolean flag.
.b ip_recverr
defaults to off.
.tp
.br ip_recvopts " (since linux 2.2)"
.\" precisely: 2.1.15
pass all incoming ip options to the user in a
.b ip_options
control message.
the routing header and other options are already filled in
for the local host.
not supported for
.b sock_stream
sockets.
.tp
.br ip_recvorigdstaddr " (since linux 2.6.29)"
.\" commit e8b2dfe9b4501ed0047459b2756ba26e5a940a69
this boolean option enables the
.b ip_origdstaddr
ancillary message in
.br recvmsg (2),
in which the kernel returns the original destination address
of the datagram being received.
the ancillary message contains a
.ir "struct sockaddr_in" .
.tp
.br ip_recvtos " (since linux 2.2)"
.\" precisely: 2.1.68
if enabled, the
.b ip_tos
ancillary message is passed with incoming packets.
it contains a byte which specifies the type of service/precedence
field of the packet header.
expects a boolean integer flag.
.tp
.br ip_recvttl " (since linux 2.2)"
.\" precisely: 2.1.68
when this flag is set, pass a
.b ip_ttl
control message with the time-to-live
field of the received packet as a 32 bit integer.
not supported for
.b sock_stream
sockets.
.tp
.br ip_retopts " (since linux 2.2)"
.\" precisely: 2.1.15
identical to
.br ip_recvopts ,
but returns raw unprocessed options with timestamp and route record
options not filled in for this hop.
.tp
.br ip_router_alert " (since linux 2.2)"
.\" precisely: 2.1.68
pass all to-be forwarded packets with the
ip router alert option set to this socket.
valid only for raw sockets.
this is useful, for instance, for user-space rsvp daemons.
the tapped packets are not forwarded by the kernel; it is
the user's responsibility to send them out again.
socket binding is ignored,
such packets are filtered only by protocol.
expects an integer flag.
.tp
.br ip_tos " (since linux 1.0)"
set or receive the type-of-service (tos) field that is sent
with every ip packet originating from this socket.
it is used to prioritize packets on the network.
tos is a byte.
there are some standard tos flags defined:
.b iptos_lowdelay
to minimize delays for interactive traffic,
.b iptos_throughput
to optimize throughput,
.b iptos_reliability
to optimize for reliability,
.b iptos_mincost
should be used for "filler data" where slow transmission doesn't matter.
at most one of these tos values can be specified.
other bits are invalid and shall be cleared.
linux sends
.b iptos_lowdelay
datagrams first by default,
but the exact behavior depends on the configured queueing discipline.
.\" fixme elaborate on this
some high-priority levels may require superuser privileges (the
.b cap_net_admin
capability).
.\" the priority can also be set in a protocol-independent way by the
.\" .rb ( sol_socket ", " so_priority )
.\" socket option (see
.\" .br socket (7)).
.tp
.br ip_transparent " (since linux 2.6.24)"
.\" commit f5715aea4564f233767ea1d944b2637a5fd7cd2e
.\"     this patch introduces the ip_transparent socket option: enabling that
.\"     will make the ipv4 routing omit the non-local source address check on
.\"     output. setting ip_transparent requires net_admin capability.
.\" http://lwn.net/articles/252545/
setting this boolean option enables transparent proxying on this socket.
this socket option allows
the calling application to bind to a nonlocal ip address and operate
both as a client and a server with the foreign address as the local endpoint.
note: this requires that routing be set up in a way that
packets going to the foreign address are routed through the tproxy box
(i.e., the system hosting the application that employs the
.b ip_transparent
socket option).
enabling this socket option requires superuser privileges
(the
.br cap_net_admin
capability).
.ip
tproxy redirection with the iptables tproxy target also requires that
this option be set on the redirected socket.
.tp
.br ip_ttl " (since linux 1.0)"
set or retrieve the current time-to-live field that is used in every packet
sent from this socket.
.tp
.br ip_unblock_source " (since linux 2.4.22 / 2.5.68)"
unblock previously blocked multicast source.
returns
.br eaddrnotavail
when given source is not being blocked.
.ip
argument is an
.i ip_mreq_source
structure as described under
.br ip_add_source_membership .
.tp
.br so_peersec " (since linux 2.6.17)"
if labeled ipsec or netlabel is configured on both the sending and
receiving hosts, this read-only socket option returns the security
context of the peer socket connected to this socket.
by default,
this will be the same as the security context of the process that created
the peer socket unless overridden by the policy or by a process with
the required permissions.
.ip
the argument to
.br getsockopt (2)
is a pointer to a buffer of the specified length in bytes
into which the security context string will be copied.
if the buffer length is less than the length of the security
context string, then
.br getsockopt (2)
returns \-1, sets
.i errno
to
.br erange ,
and returns the required length via
.ir optlen .
the caller should allocate at least
.br name_max
bytes for the buffer initially, although this is not guaranteed
to be sufficient.
resizing the buffer to the returned length
and retrying may be necessary.
.ip
the security context string may include a terminating null character
in the returned length, but is not guaranteed to do so: a security
context "foo" might be represented as either {'f','o','o'} of length 3
or {'f','o','o','\\0'} of length 4, which are considered to be
interchangeable.
the string is printable, does not contain non-terminating null characters,
and is in an unspecified encoding (in particular, it
is not guaranteed to be ascii or utf-8).
.ip
the use of this option for sockets in the
.b af_inet
address family is supported since linux 2.6.17
.\" commit 2c7946a7bf45ae86736ab3b43d0085e43947945c
for tcp sockets, and since linux 4.17
.\" commit d452930fd3b9031e59abfeddb2fa383f1403d61a
for sctp sockets.
.ip
for selinux, netlabel conveys only the mls portion of the security
context of the peer across the wire, defaulting the rest of the
security context to the values defined in the policy for the
netmsg initial security identifier (sid).
however, netlabel can
be configured to pass full security contexts over loopback.
labeled ipsec always passes full security contexts as part of establishing
the security association (sa) and looks them up based on the association
for each packet.
.\"
.ss /proc interfaces
the ip protocol
supports a set of
.i /proc
interfaces to configure some global parameters.
the parameters can be accessed by reading or writing files in the directory
.ir /proc/sys/net/ipv4/ .
.\" fixme as at 2.6.12, 14 jun 2005, the following are undocumented:
.\"  ip_queue_maxlen
.\"  ip_conntrack_max
interfaces described as
.i boolean
take an integer value, with a nonzero value ("true") meaning that
the corresponding option is enabled, and a zero value ("false")
meaning that the option is disabled.
.\"
.tp
.ir ip_always_defrag " (boolean; since linux 2.2.13)"
[new with kernel 2.2.13; in earlier kernel versions this feature
was controlled at compile time by the
.b config_ip_always_defrag
option; this option is not present in 2.4.x and later]
.ip
when this boolean flag is enabled (not equal 0), incoming fragments
(parts of ip packets
that arose when some host between origin and destination decided
that the packets were too large and cut them into pieces) will be
reassembled (defragmented) before being processed, even if they are
about to be forwarded.
.ip
enable only if running either a firewall that is the sole link