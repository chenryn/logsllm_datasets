### 5. Assumptions and Protocol Setup

In this section, we outline the assumptions that underpin our protocol. For now, we assume:
1. **Synchronization**: All members know when to initiate a protocol run and can distinguish one run from another.
2. **Participation**: All group members participate in every protocol run.
3. **Key Management**: Each member has public encryption keys and non-repudiable signing keys, which are known to all other members.
4. **Connectivity and Reliability**: All members remain connected throughout the protocol run and continue to send correctly-signed messages until the protocol is completed from the perspective of all group members.

Assumption (4) implies that we currently address only safety properties, deferring liveness issues to Section 5. This includes the important corner case where a node withholds the last message it is supposed to send while collecting all other members' final messages, thereby learning the results of the protocol run without sharing them with others.

### 3. Shuffle Protocol

This section details the shuffle protocol, covering its cryptographic building blocks, formal description, correctness proof, and complexity analysis.

#### 3.1 Cryptographic Primitives

Dissent relies on a conventional, possibly randomized signature scheme, consisting of:
- **Key Generation Algorithm**: Produces a private/public key pair \((u, v)\).
- **Signing Algorithm**: Takes a private key \(u\) and a message \(m\) to produce a signature \(\sigma = \text{SIG}_u\{m\}\).
- **Verification Algorithm**: Takes a public key \(v\), a message \(m\), and a candidate signature \(\sigma\), returning true if \(\sigma\) is a correct signature of \(m\) using the associated private key \(u\).

The notation \(\{m\}\text{SIG}_u\) indicates the concatenation of the message \(m\) with the signature \(\text{SIG}_u\{m\}\).

We also require a public-key cryptosystem that is IND-CCA2 secure [2]. The cryptosystem must provide access to the random bits used in key generation and encryption, which Dissent's accountability mechanisms use for commitment and verification. An example of such a system is RSA-OAEP [19] with a pseudorandom number generator. The cryptosystem consists of:
- **Key Generation Algorithm**: Produces a private/public key pair \((x, y)\).
- **Encryption Algorithm**: Takes a public key \(y\), a plaintext \(m\), and some random bits \(R\), producing a ciphertext \(C = \{m\}^R_y\).
- **Decryption Algorithm**: Takes a private key \(x\) and a ciphertext \(C\), returning the plaintext \(m\).

A node can save the random bits \(R\) used during encryption and encrypt deterministically using a given \(R\). We assume that honest nodes can verify an arbitrary \((x, y)\) purported to be a key pair, ensuring it was generated according to the specified algorithm. The appendix describes how any public-key cryptosystem can be adapted to meet this requirement. The notation \(C = \{m\}^{R_1:R_N}_{y_1:y_N}\) indicates iterated encryption via multiple keys: \(C = \{\ldots \{m\}^{R_1}_{y_1} \ldots \}^{R_N}_{y_N}\).

We omit \(R\) when the random inputs need not be saved. We use a standard definition [35] of a collision-resistant unkeyed hash function, denoted as \(\text{HASH}\{m\}\). We also use a standard definition [35] of a pseudorandom number generator (PRNG), denoted as \(\text{PRNG}\{L, s\}\) for the first \(L\) bits generated from a PRNG seeded with \(s\).

#### 3.2 Protocol Description

Each group member \(i\) (for \(i = 1, \ldots, N\)) initially has a primary encryption key pair \((x_i, y_i)\), a signing key pair \((u_i, v_i)\), and a secret message \(m_i\) of fixed length \(L\) to send anonymously.

Before a protocol run, all members agree on a session nonce \(n_R\) uniquely identifying the run, the participants' primary public encryption and signing keys, and a common ordering of all members \(1, \ldots, N\). Such agreement might be achieved via Paxos [25] or BFT [8], as discussed further in Section 5.

The shuffle protocol operates in phases. Each honest member \(i\) sends at most one unique message \(\mu_{i\phi}\) per phase \(\phi\). A member \(i\) may broadcast \(\mu_{i\phi}\) to all members. A faulty node might equivocate by sending different messages to different members.

Each group member maintains a tamper-evident log of all messages sent and received in a protocol run [23]. Member \(i\) signs each \(\mu_{i\phi}\) with its private key \(u_i\), including the session nonce \(n_R\) and a hash \(h_{i\phi}\) of \(i\)'s current log head in phase \(\phi\). Members ignore any messages containing a bad signature or session nonce.

- **Phase 1: Secondary Key Pair Generation**. Each member \(i\) chooses an encryption key pair \((w_i, z_i)\) and broadcasts:
  \[
  \mu_{i1} = \{z_i, n_R, h_{i1}\}\text{SIG}_{u_i}
  \]

- **Phase 2: Data Submission**. Each member \(i\) encrypts their datum \(m_i\) with all members' secondary public keys:
  \[
  C'_i = \{m_i\}^{z_N:z_1}
  \]
  Member \(i\) stores \(C'_i\) with all members' primary public keys, saving the random bits used in each encryption. Member \(i\) then further encrypts \(C'_i\):
  \[
  C_i = \{C'_i\}^{R_{iN}:R_{i1}}_{y_N:y_1}
  \]
  If encryption fails, the group moves directly to phase 5b ("blame"). Member \(i\) sends to member 1:
  \[
  \mu_{i2} = \{C_i, n_R, h_{i2}\}\text{SIG}_{u_i}
  \]

- **Phase 3: Anonymization**. Member 1 collects all ciphertexts into a vector \(\vec{C}_0 = C_1, \ldots, C_N\), randomly permutes its elements, and strips one layer of encryption from each ciphertext using private key \(x_1\) to form \(\vec{C}_1\). Member 1 sends to member 2:
  \[
  \mu_{13} = \{\vec{C}_1, n_R, h_{13}\}\text{SIG}_{u_1}
  \]
  Each member \(1 < i < N\) in turn accepts \(\vec{C}_{i-1}\), permutes it, strips one encryption layer to form \(\vec{C}_i\), and sends \(\vec{C}_i\) to member \(i+1\). Member \(N\) finally permutes and decrypts \(\vec{C}_{N-1}\) to form \(\vec{C}_N\), and broadcasts to all members:
  \[
  \mu_{N3} = \{\vec{C}_N, n_R, h_{N3}\}\text{SIG}_{u_N}
  \]
  If any member \(i\) detects a duplicate or invalid ciphertext, they report it, and the group moves to phase 5b ("blame").

- **Phase 4: Verification**. All members now hold \(\vec{C}_N\), which should be a permutation of \(C'_1, \ldots, C'_N\). Each member \(i\) verifies that their own \(C'_i\) is included in \(\vec{C}_N\) and sets a flag \(\text{GO}_i\) to TRUE if so and FALSE otherwise. Each member \(i\) creates a vector \(\vec{B}\) of all broadcast messages sent or received in prior phases: all members' public key messages from phase 1 and member \(N\)'s phase 3 message containing \(\vec{C}_N\). Thus, \(\vec{B} = \mu_{11}, \ldots, \mu_{N1}, \mu_{N3}\). Member \(i\) broadcasts:
  \[
  \mu_{i4} = \{\text{GO}_i, \text{HASH}\{\vec{B}\}, n_R, h_{i4}\}\text{SIG}_{u_i}
  \]
  Each member \(i\) waits to receive a "go/no-go" message from every other member. If every member \(j\) reports \(\text{GO}_j = \text{TRUE}\) for the expected \(\text{HASH}\{\vec{B}\}\), member \(i\) enters phase 5a; otherwise, \(i\) enters phase 5b ("blame").

- **Phase 5a: Decryption**. Each member \(i\) destroys their copy of \(C'_i\) and the random bits saved in phase 2, then broadcasts their secondary private key \(w_i\) to all members:
  \[
  \mu_{i5} = \{w_i, n_R, h_{i5}\}\text{SIG}_{u_i}
  \]

- **Phase 5b: Blame**. Each member destroys their secondary private key \(w_i\), reveals the random bits \(R_{ij}\) saved from the primary public key encryptions in phase 2, and all signed messages sent and received in phases 1–4. Each member \(i\) uses this information to check the behavior of each member \(j\) in phases 1–4, replaying \(j\)'s primary key encryptions in phase 2, and verifying that \(j\)'s anonymized output \(\vec{C}_j\) in phase 3 was a decrypted permutation of \(\vec{C}_{j-1}\). Member \(i\) exposes member \(j\) as faulty if \(j\) signed an invalid \(z_j\) in phase 1, an incorrectly encrypted \(C_j\) in phase 2, an improperly decrypted or permuted \(\vec{C}_j\) in phase 3, a \(\text{GO}_j = \text{FALSE}\) or a wrong \(\text{HASH}\{\vec{B}\}\) in phase 4 after phases 1–3 succeeded, or if \(j\) equivocated by signing more than one message or log head \(h_{j\phi}\) in any phase \(\phi\).

#### 3.3 Protocol Correctness

The shuffle protocol's integrity and anonymity derive almost directly from Brickell/Shmatikov [7], so we only sketch proofs of these properties, focusing instead on the accountability property introduced by our enhancements.

- **Integrity**: To preserve integrity, after a protocol run, every honest member must either: (a) hold the datum \(m_i\) of every honest member \(i\), or (b) know that the protocol did not complete successfully. Suppose a protocol run appears to complete successfully via phase 5a (decryption), but some honest member \(i\) does not hold the plaintext \(m_j\) of another honest member \(j\). Since \(j\) is honest, \(j\)'s intermediate ciphertext \(C'_j\) must be a correct encryption of \(m_j\), and \(C'_j\) must have appeared in \(\vec{C}_N\). Otherwise, \(j\) would have sent \(\text{GO}_j = \text{FALSE}\) in phase 4. Since honest member \(i\) would not enter phase 5a without receiving \(\text{GO}_j = \text{TRUE}\) for the same \(\vec{B}\) from all members, and \(\vec{B}\) includes message \(\mu_{N3}\) containing \(\vec{C}_N\), \(i\) must hold \(C'_j\). If all members released correct secondary private keys \(w_1, \ldots, w_N\) during phase 5a, \(C'_j\) must then decrypt to \(m_j\). If some member \(k\) released a secondary private key \(w_k\) such that \((w_k, z_k)\) is an invalid key pair, all honest members expose member \(k\).

- **Anonymity**: The protocol preserves anonymity if no group of \(k \leq N-2\) colluding members can win an anonymity game, determining with non-negligible probability which of two honest members submitted which of two plaintexts, as detailed in prior work [7]. The attacker might gain advantage either by manipulating protocol messages or by using only the information revealed by a correct protocol run. In the first case, the attacker can identify the intermediate ciphertext \(C'_i\) of some honest member \(i\) by duplicating or eliminating other honest members' ciphertexts in phase 3, but any honest member will detect duplication in phase 3 and elimination in phase 4, aborting the protocol before the attacker can decrypt \(C'_i\). In the second case, an attacker who can win the anonymity game with non-negligible probability using only information revealed by correct protocol runs can use this ability to win the distinguishing game that defines an IND-CCA2 secure cryptosystem [2, 7].

- **Accountability**: Upon receiving all keys \(w_1, \ldots, w_N\), member \(i\) checks that each \(w_j\) is the private key corresponding to public key \(z_j\), and if not, exposes \(j\) using the signed messages from \(j\) containing these invalid keys. Otherwise, \(i\) removes the remaining \(N\) levels of encryption from \(\vec{C}_N\), resulting in a permutation of the submitted data \(m_1, \ldots, m_N\), and the protocol completes successfully.

A member \(i\) exposes another member \(j\) if \(i\) obtains proof of \(j\)'s misbehavior verifiable by a third party. To maintain accountability, no member may expose an honest member, and at the end of a protocol run, either: (a) the protocol completes successfully, or (b) all honest members expose at least one faulty member.

We first show that no member \(i\) can expose an honest member \(j\). A proof of misbehavior by \(j\) consists of some "incriminating" message \(\mu_{j\phi}\) signed by \(j\) in phase \(\phi\), together with all of the messages in \(j\)'s log up through phase \(\phi\), and the random bits each node saved during phase 2 and released in phase 5b. Member \(i\) could "truthfully" expose \(j\) only if \(j\) signs an incorrect message in phases 1–5a or signs more than one message per phase, contradicting the assumption that \(j\) is honest. Member \(i\) could also falsely accuse \(j\).