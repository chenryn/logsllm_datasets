/$(1)/{
print "Killing"$$3;
endef
搜索字符串包含了宏的第一个参数S（1），而sS3和$$1则是awk变量。
只有这么做会较具可读性时，我才会使用单一字符变量并省略圆括号。我通常会对宏的
参数以及foreach循环中的控制变量这么做，你应该采用符合自己实际情况的做法。如
果你对makefile的可维护性有任何疑问，请遵照make在线手册的建议，充分使用圆括
---
## Page 101
函数
91
号。别忘了，make程序主要是用来减轻与“软件维护”有关的问题。当你在编写makefile
的时候，若能将此事铭记在心，则可以避免许多问题。
较不重要的杂项函数
最后，让我们来看一些杂项函数。尽管它们的使用不如foreach或call频繁，不过你
将发现自己会经常用到它们。
S(strip text)
strip函数将会从text中移除所有前导和接在后面的空格，并以单一空格符号来
替换内部所有的空格。此函数常用来清理“条件表达式”中所使用的变量。
当变量和宏的定义跨越多行时，我常会通过此函数从中移除非必要的空格。不过，
如果函数会受参数的前导空格的影响，为函数的参数S1、S2等加上strip也是
个不错的主意。通常程序员并不知道，在cal1的参数列表中，make会于逗号之
后附加一个空格。
S(origin variable)
origin函数将会返回描述变量来自何处的字符串。这个变量可以协助你决定如何
使用一个变量的值。举例来说，如果一个变量来自环境，或许你会想要忽略该变量
的值；如果该变量来自命令行，你就不会这么做。让我们来看一个比较具体的范例。
下面是一个新的断言函数，可用来测试一个变量是否有定义：
#S(call assert-defined,variable-name)
define assert-defined
S(call assert,
$（filter-outundefined,s（origin Sl)),\
'$1'is undefined）
endef
origin的可能返回值包括：
undefined
变量尚未定义。
default
变量的定义来自make的内置数据库。如果你改变了内置变量的值，origin所
返回的是最近一次的定义来自何处。
environment
environmentoverride
变量的定义来自环境（而且使用了--environment-overrides选项）。
---
## Page 102
92
第四章
file
变量的定义来自makefile。
command 1ine
变量的定义来自命令行。
override
变量的定义来自override指令。
automatic
这个变量是make所定义的自动变量。
S(warning text)
warning函数类似于error函数，不过warning不会导致make结束运行。如同
要显示的信息内容。warning函数扩展之后会变成空字符串，所以它几乎可以使
用在任何地方。
s（if $(wildcard S(JAVAC)).,
S（warning The java compiler variable,JAVAC （S(JAVAC)),\
is not properly set.))
高级的用户自定义函数
我们将会花费大量的时间在宏函数的编写上。可借，make并未提供多少可以协助我们
进行调试的功能。让我们试着编写一个简单的调试追踪函数以协助我们摆脱此困境。
正如稍早所说，ca11函数将会把它的每个参数依次绑定到S1、S2等编号变量。你可
以为ca11函数指定任意多个参数，你还可以通过S0来访问当前所执行的函数的名称
（即变量名称）。使用这个信息，我们可以编写一对调试函数来追踪宏的扩展过程：
#S(debug-enter)
debug-enter =$（if S(debug_trace),\
$(warning Entering $0($（echo-args))))
#S(debug-leave)
debug-leave=$（if $(debug_trace),S（warning Leaving $0))
comma:=
'，（euuoo)s...asqns）s=sbxe-oua
$（foreacha,123456789,*S（$a)'))
如果我们想要查看函数a和b是如何被调用的，我们可以这么做：
debug_trace=1
---
## Page 103
函数
93
definea
s(debug-enter)
@echo $1$2 $3
S(debug-leave)
endef
defineb
$(debug-enter)
$(cal1 a,S1,$2,hi)
$(debug-leave)
endef
trace-macro:
S(Ca11 b,5,S(MAKE))
通过在函数的开头和结尾摆放debug-enter和debug-leave变量，你可以追踪函数的扩
展过程。这些函数相当简单。echo-args函数只会输出前9个参数，更糟的是，它无法
决定调用中实际参数的个数（当然，make也没办法！）。然而，我还是在调试的时候使
用了这些函数。对这个makefile执行make之后会产生如下的追踪输出：
$make
makefile:14:Enteringb（5'，make',,,,，,,）
makefile:14:Entering a（'5','make','hi',,,
makefile:14:Leaving a
makefile:14:Leavingb
5 make hi
最近曾听到有人这么说：“以前，我根本不会把make作为是一种程序语言。”GNUmake
已非老祖母昔日所使用的make！
eval与value函数
eva1是个与所有其他内置函数完全不同的函数，它的用途是将文本直接放入make解析
器。例如：
$（eval sources := foo.c bar.c)
首先make会扫描eval的参数中是否有变量以便进行扩展的动作（就像对任何函数的任
何参数所做的那样），然后make会解析文本以及进行求值的动作，就好像它是来自输入
文件的一样。此处所举的例子似乎太简单，或许你会觉得奇怪，为何我要自找麻烦地使
用这个函数。让我们再来看一个比较有意义的例子。假设你有一个用来编译许多程序的
makefile，而且你想要为每个程序定义若干变量，例如sources、headers和objects。
此时，你不必反复地以手动的方式为每个程序定义这些变量：
1s_sources :=1s.c glob.c
ls_headers:=1s.h glob.h
---
## Page 104
94
第四章
ls_objects := 1s.o glob.o
...
你可以定义宏，让它帮你做这个工作：
$(call program-variables,variable-prefix,file-list)
define program-variables
$1_sources=$（filter &.c,$2）
$1_headers=$（filter &.h.$2)
$1_objects=S（subst.c,.o,S（filter 8.c,s2）)
endef
$（call program-variables,1s,1s.c ls.h glob.c glob.h)
show-variables:
#$(ls_sources)
#$(ls_headers)
$(ls_objects)
program-variables宏有两个自变量：一个是这三个变量的前缀；另一个是一份文件列
表，宏可从中选出文件以便设定这三个变量。但是，当我们使用这个宏的时候，却得到
如下的错误信息：
S make
Makefile:7:*** missing separator.Stop.
正如我们所预料的，这么做是行不通的。这跟make解析器的运作方式有关。一个（位于
解析顶层的）宏被扩展成多行文本是不合法的，这会导致语法错误。此时，解析器会以
为cal1这一行是一个规则或是命令行的一部分，但是找不到分隔符记号（separator
token）。这是一个令人相当困惑的错误信息，eva1函数可用来解决这个问题。如果对
cal1这一行做如下的修改：
$（eval $(call program-variables,1s,1s.c 1s.h glob.c glob.h))
就可以获得我们预期的结果：
$make
#1s.c glob.c
#1s.h glob.h
#1s.o glob.o
eva1可以解决解析的问题，因为eval能够处理多行形式的宏的扩展动作，而且它本
身会被扩展成零行。
现在，我们可以非常简单地使用这个宏来定义三个变量。注意宏中赋值表达式里的变量
名称，它是由一个可变的前缀（来自函数的第一个参数）和一个固定的后缀所构成，例
如S1_sources。准确地说，这些变量并非前面所提到的“经求值的变量”，不过它们非
常相似。
---
## Page 105
函数
95
接着，我们还想在这个宏里引入我们的规则：
#$(call program-variables,variable-prefix,file-list)
define program-variables
$1_sources =S（filter &.c,$2)
$1_headers =$（filter &.h,$2)
$1_objects=S（subst.C,.o,$（filter 8.c,$2）)
$($1_objects):$($1_headers)
endef
ls:$(ls_objects)
$（eval $(ca1l program-variables,ls,1s.c1s.h glob.cglob.h))
program-variables的这两个版本，可让我们看到函数参数中的空格所造成的问题。在
前一个版本中，函数所使用的两个参数并不受前导空格的影响。也就是说，不管S1或
S2是否有前导空格，其行为都一样。然而，新的版本使用了“经求值的变量”
$（$1_objects）和s（$1_headers）。现在为函数的第一个参数（ls）加上一个前导的空
格，好让“经求值的变量”能够以一个前导的空格开头，这样它会被扩展成空无一物，
因为没有一个变量被定义成以前导空格开头的。这是一个相当难以诊断的问题。
当这个makefile被运行之后，我们发现不知为什么，.h必要条件会被make忽略掉。为了
诊断此问题，我们决定使用--print-data-base选项来运行make，以便查看make的
内部数据库。我们看到了一些奇怪的地方：
1s_headers =1s.h glob.h
ls_sources=1s.c glob.c
1s_objects=1s.oglob.o
:'ST
1s.o:1s.c
ls: 1s.0
当make解析eval函数调用时，它首先会扩展用户自定义函数program-variables。这
个宏的第一行会被扩展成：
1s_sources =1s.cglob.c
请注意，宏中的每一行会如预期般地立即被扩展，其他的变量赋值动作也是以同样的方
式来处理。然后我们会来到描述规则的地方：
$($1_objects):S($1_headers)
“经求值的变量”里的变量名称会先被扩展：
---
## Page 106
96
第四章
S(ls_objects):s(ls_headers)
然后会进行外部的变量扩展，这次会产生如下的结果：
：
等一下！我们的变量跑哪里去了？答案是，虽然make会扩展前面那三个赋值表达式，但
是却不会对它们求值。让我们继续看下去。一旦对program-variables的调用被扩展
后，make会看到如下的结果：
S(eval1s_sources =1s.c glob.c
ls_headers =1s.h glob.h
1s_objects=1s.o glob.o
:)
接着，eval函数会执行并定义这三个变量。所以，答案是，在规则中的变量被实际定
义之前make就已经将它们扩展了。
要解决这个问题，我们可以把“经求值的变量”的扩展动作延后到这三个变量定义后进
行。方法就是为“经求值的变量”加上美元符号：
$S($1_objects):$$($1_headers)
这一次make的数据库会显示我们所预期的必要条件：
Smake-p1grep^1o
ls_headers =ls.h glob.h
1s_sources=1s.c glob.c
1s_objects=ls.o glob.o
1s.c:
ls.h:
1s.o:1s.c1s.h glob.h
1s:1s.0
结果，eval的参数会被扩展两次：第一次是在make为eva1准备参数列表的时候，第
二次是eval自己进行的。
我们解决最后一个问题的方法是延后“经求值的变量”的求值动作。处理这个问题的另
一个方法就是以eval函数封装（wrapping）每个变量赋值表达式，追使其提早进行求
值的动作：
#$（callprogram-variables,variable-prefix,file-list)
define program-variables
$（eval $1_sources=$（filtcr 8.c.$2))
$（eval $1_headers =S（filter &.h,$2))
$（eval $1_objects=S（subst.c,.o,s(fiiter 8.c,$2)))
---
## Page 107
函数
97
$（$1_objects):s(S1_headers)
endef
1s:$(1s_objects)
$（eval $(call program-variables,1s,1s.c 1s.h glob.c glob.h))
通过把变量赋值表达式封装在它们自己的eval调用中，可让make在扩展program-