There are several steps you can take to reduce this problem. 
(cid:132) Where possible, choose a guest operating system that has good timekeeping behavior when run in a 
virtual machine, such as one that uses tickless or VMI timekeeping. 
(cid:132) Configure the guest operating system to work around any known timekeeping issues specific to that 
guest version. See the VMware knowledge base for details. 
(cid:132) Use clock synchronization software in the guest.
There are also a number of ways to avoid using the guest operating system’s clock, if you are writing or 
modifying software specifically to make timing measurements in a virtual machine. 
(cid:132) Use the feature documented in “Pseudoperformance Counters” on page 9. 
(cid:132)
(cid:132)
For measuring relatively long time intervals, get the starting and ending time directly from a network time 
server, using a program like ntpdate or rdate. 
Read the virtual CMOS TOD clock, because it runs in real time, not apparent time. However, this clock is 
precise only to the nearest second.
Performance Measurements
Performance measurements reported by a guest operating system running inside a virtual machine are 
meaningful and in some cases just as accurate as when the operating system is running on physical hardware. 
However, you must interpret these results with care, because the guest operating system does not have the full 
picture of what is happening on the host.
To get a complete picture, you also need to look at statistics taken by the VMkernel. With ESX and ESXi, 
VMkernel performance statistics are available from Virtual Center, from tools such as esxtop, and also inside 
the guest operating system using the VMware Guest SDK (also known as guestlib or vmGuestLib).
To get a complete picture when using VMware hosted products, use the host operating system’s standard tools 
such as Windows perfmon and Linux top. 
Considerations for several specific types of performance measurement follow.
Event Counts
Generally, event counts taken by the guest operating system are accurate, but they count only events 
happening in that specific virtual machine. On ESX, for example, the guest operating system’s count of context 
switches is a perfectly accurate count of switches between guest operating system processes, but it does not 
count how often the VMkernel descheduled this virtual machine and ran a different one. The latter statistic is 
available from the VMkernel. Similarly, on hosted products, the guest operating system does not know how 
many times the host operating system descheduled the virtual machine and ran a different host process.
As another example, the guest operating system’s count of interrupts accurately reflects how many virtual 
interrupts it received, but it does not count physical interrupts on the host system.
Memory Usage
Memory usage counts taken by the guest operating system accurately reflect the guest operating system’s 
usage of its virtualized physical memory. They do not, however, show how much real physical memory the 
virtual machine has been able to save using VMware techniques such as ballooning, page sharing, and lazily 
allocating pages that the guest operating system has never touched, nor do they reflect any memory that has 
been swapped to disk at the host level.
Copyright © 2008 VMware, Inc. All rights reserved.
19
Timekeeping in VMware Virtual Machines
CPU Usage
CPU usage measurements taken by a guest operating system generally give an approximately correct measure 
of the relative CPU usage of various processes running in the guest operating system, but they do not reflect 
how loaded the host system is, because most guest operating systems are unaware that they are running in a 
virtual machine and are thus time‐sharing the physical hardware with other virtual machines. The following 
paragraphs clarify this point.
Operating systems use one of two basic mechanisms to charge and account for CPU utilization: statistical 
sampling or exact measurement.
The statistical sampling method is more common. With statistical sampling, whenever a timer interrupt 
occurs, the operating system checks what process was interrupted (which may have been the idle process) and 
charges that process for the full amount of time that has passed since the last timer interrupt. This charging is 
often incorrect, because the current process may not have been running for the amount of time reported, but 
over the long run, the errors average out to near zero and the method provides a useful result.
With the exact measurement method, on the other hand, the operating system uses a performance counter 
provided by the CPU (often the TSC) to measure the exact number of cycles that it gives to each process.
If the operating system is using the statistical sampling method and the timer device in use is running in 
apparent time (the most common case), the guest operating system charges all the apparent time that passes 
to one or another of its processes. This occurs because the virtual machine delivers all of the timer interrupts 
that the guest operating system has requested, but it shifts them in time so that they all occur while the virtual 
machine is running—none while it is descheduled. As a result, time when the virtual machine has in reality 
been descheduled is charged by the guest to guest processes. This charging occurs randomly, approximately 
in proportion to the actual CPU usage of each process. Thus the guest operating system’s CPU usage statistics 
accurately reflect the CPU consumption of guest processes relative to one another but not the absolute fraction 
of a host CPU they consume. For example, if the virtual machine is getting about 50 percent of a physical CPU 
and has two processes each consuming about an equal amount of time, with no idle time, the guest operating 
system reports each process as consuming 50 percent of a virtual CPU. From a larger point of view, however, 
each process is actually consuming only 25 percent of a physical CPU.
The results are similar with the exact measurement method using the TSC. Time during the period the virtual 
machine was descheduled is rapidly caught up the next time it runs again by running the TSC faster, so the 
next guest operating system process to run is charged for this time. This excess charging is randomly 
distributed among the guest operating system processes, roughly in proportion to how much time the process 
is really consuming. So the guest operating system’s “exact” CPU usage measurements are inflated and thus 
no longer exact, but on average over the long term, guest operating system CPU usage statistics do accurately 
reflect the CPU consumption of guest operating system processes relative to one another.
The results can be somewhat different if the guest operating system is using the statistical sampling method 
but with a timer device that is in “lazy” mode (see “Virtual Local APIC Timer” on page 8). In this case, if 
multiple virtual timer interrupts are scheduled to occur while the guest operating system is descheduled, they 
effectively merge into one. Thus, most descheduled time is not charged to any guest operating system process. 
With some guest operating systems, idle time may be computed as apparent time minus the sum of times 
charged to other processes, in which case descheduled time is counted as idle time. In others, the idle process 
is charged using statistical sampling as with other processes, so the total charged time does not add up to 100 
percent of real time.
Finally, some guest operating systems can explicitly account for descheduled time. An operating system 
running in a virtual machine and using the VMI paravirtualization interface can obtain and display the 
amount of stolen time—that is, the amount of time when the kernel wanted to run a nonidle process but was 
descheduled. Alternatively, a Windows or Linux guest operating system that has the VMware VMdesched 
driver (also called the “timer sponge”) installed shows most descheduled time as having been used by the 
vmdesched process instead of a real guest operating system process. VMdesched is compatible only with 
operating systems that use statistical sampling for process accounting and tick counting for timekeeping, and 
the current implementation works only on uniprocessor guests. VMdesched works by manipulating the 
Copyright © 2008 VMware, Inc. All rights reserved.
20
Timekeeping in VMware Virtual Machines
timing of virtual timer interrupts so that most catch‐up interrupts occur while the vmdesched process is 
running. (In fact, the process does nothing more than run briefly when there are catch‐up interrupts to be 
delivered.) Because vmdesched adds overhead and is not compatible with some of the newer kernel 
technologies, it is likely not to be further developed and may be dropped in the future.
Because of these issues, total CPU load (or, conversely, total idle time) measured from within a virtual machine 
is not a very meaningful number, even though CPU usage of nonidle guest operating system processes relative 
to one another is meaningful. Therefore, if you are running software in a virtual machine that measures and 
adapts to total system load, you should experiment to find out how the software behaves, and you may find 
that you need to modify the software’s measurement and adaptation algorithms.
Resource Pressure
Because timekeeping requires some CPU resources and requires some activities to be performed in a timely 
way—especially when tick counting is being used—the guest operating system clock in a virtual machine that 
does not get enough resources can fall behind or otherwise misbehave. This section discusses some potential 
problems.
CPU Pressure
If the guest operating system is using tick counting and it does not get enough CPU time to handle the number 
of timer interrupts per second that it has requested, its clock falls behind real time.
You can deal with CPU pressure issues in either of two ways.
(cid:132) Where possible, configure the guest operating system to use a lower timer interrupt rate.
With Linux guest operating systems, choose a tickless kernel if possible, or a kernel that uses a relatively 
low base timer interrupt rate, or a kernel that has the divider= option that lets you lower the rate. See the 
Linux best practices guide in VMware knowledge base article 1006427 
(http://kb.vmware.com/kb/1006427). Avoid configuring your virtual machines with more virtual 
processors than needed.
With Windows guest operating systems, try to avoid running software in the guest operating system that 
raises the timer interrupt rate. See “Microsoft Windows” on page 10. 
(cid:132) Give more CPU time to the virtual machine.
On both VMware ESX and VMware hosted products, avoid overcommitting the host CPU by running so 
many virtual machines that some or all of them cannot get enough time to handle all their timer 
interrupts. The exact number of virtual machines you can run depends on what applications you are 
running in them and how busy they are, so we cannot give a guideline in this paper. Other VMware 
publications are available to help with capacity planning, and features such as VMware Distributed 
Resource Scheduler (DRS) and VMware Distributed Power Management (VMware DPM) are useful in 
optimizing the placement of virtual machines on physical hosts and helping you keep the right number 
of physical hosts powered on to handle the current resource usage by virtual machines.
In addition, on VMware ESX, if a specific virtual machine is not getting enough CPU time to handle all its 
timer interrupts, you can give it a CPU reservation to ensure it gets enough time. This comes at the 
expense of other virtual machines that might otherwise have been allocated that time.