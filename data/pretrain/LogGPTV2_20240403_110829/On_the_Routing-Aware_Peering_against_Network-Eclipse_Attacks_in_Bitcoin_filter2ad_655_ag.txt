random host mutation: transparent moving target defense using
software deﬁned networking. In Proc. HotSDN, 2012.
[31] Sushil Jajodia, Anup K Ghosh, Vipin Swarup, Cliff Wang, and
X Sean Wang. Moving target defense: creating asymmetric
uncertainty for cyber threats. Springer Science & Business
Media, 2011.
[41] Gleb Naumenko. p2p: supplying and using asmap to im-
https://github.
prove IP bucketing in addrman, 2020.
com/bitcoin/bitcoin/pull/16702.
[42] Gleb Naumenko, Gregory Maxwell, Pieter Wuille, Alexandra
Fedorova, and Ivan Beschastnikh. Erlay: Efﬁcient Transaction
Relay for Bitcoin. In Proc. ACM CCS, 2019.
[43] RIPE NCC. RIS Live - RIPE Network Coordination Centre,
2020. https://ris-live.ripe.net/.
[44] RIPE NCC.
RIS Raw Data, 2020.
https:
//www.ripe.net/analyse/internet-measurements/
routing-information-service-ris/ris-raw-data.
[45] Rishab Nithyanand, Oleksii Starov, Adva Zair, Phillipa Gill,
and Michael Schapira. Measuring and mitigating AS-level
adversaries against Tor. In Proc. NDSS, 2016.
[46] PlanetLab. An open platform for developing, deploying,
and accessing planetary-scale services, 2020. https://www.
planet-lab.org/.
[47] Jian Qiu and Lixin Gao. AS path inference by exploiting
known AS paths. In Proc. IEEE GLOBECOM, 2005.
[48] Tongqing Qiu, Lusheng Ji, Dan Pei, Jia Wang, Jun (Jim) Xu,
and Hitesh Ballani. Locating Preﬁx Hijackers using LOCK.
In Proc. USENIX Security, 2009.
[49] Routeviews. University of Oregon Route Views Project, 2020.
http://www.routeviews.org/routeviews/.
[50] Brandon Schlinker, Todd Arnold, Italo Cunha, and Ethan Katz-
Bassett. PEERING: Virtualizing BGP at the Edge for Research.
In Proc. ACM CoNEXT, 2019.
[51] Atul Singh, Miguel Castro, Peter Druschel, and Antony Row-
stron. Defending against eclipse attacks on overlay networks.
In Proc. ACM SIGOPS European Workshop, 2004.
[32] Joshua Juen, Aaron Johnson, Anupam Das, Nikita Borisov,
and Matthew Caesar. Defending tor from network adversaries:
A case study of network path prediction. In Proc. PETS, 2015.
[52] Hennadii Stepanov. Try to preserve outbound block-relay-only
https://github.com/
connections during restart, 2020.
bitcoin/bitcoin/pull/17428.
[33] Thomas Kernen. Public route server and looking glass site list,
2011. http://www.traceroute.org/.
[34] Matthew Luckie. Scamper: a scalable and extensible packet
prober for active measurement of the internet. In Proc. ACM
IMC, 2010.
[35] Gordon Fyodor Lyon. Nmap network scanning: The ofﬁcial
Nmap project guide to network discovery and security scanning.
Insecure, 2009.
[36] Harsha V Madhyastha, Tomas Isdal, Michael Piatek, Colin
Dixon, Thomas Anderson, Arvind Krishnamurthy, and Arun
Venkataramani. iPlane: An information plane for distributed
services. In Proc. OSDI, 2006.
[37] Z Morley Mao, Lili Qiu, Jia Wang, and Yin Zhang. On AS-
level path inference. In ACM SIGMETRICS PER, 2005.
[38] Yuval Marcus, Ethan Heilman, and Sharon Goldberg. Low-
Resource Eclipse Attacks on Ethereum’s Peer-to-Peer Network,
2018. https://eprint.iacr.org/2018/236.
[39] Steven J Murdoch and Piotr Zieli´nski. Sampled trafﬁc analysis
by internet-exchange-level adversaries. In Proc. PETS, 2007.
[53] Yixin Sun, Anne Edmundson, Nick Feamster, Mung Chiang,
and Prateek Mittal. Counter-RAPTOR: Safeguarding Tor
Against Active Routing Attacks. In Proc. IEEE S&P, 2017.
[54] Yixin Sun, Anne Edmundson, Laurent Vanbever, Oscar Li,
Jennifer Rexford, Mung Chiang, and Prateek Mittal. RAPTOR:
Routing attacks on privacy in Tor. In Proc. USENIX Security,
2015.
[55] Renata Teixeira, Aman Shaikh, Tim Grifﬁn, and Jennifer Rex-
ford. Dynamics of hot-potato routing in IP networks. In Proc.
of SIGMETRICS, 2004.
[56] Tor.
The lifecycle of a new relay.
https://blog.
torproject.org/lifecycle-new-relay, 2013.
[57] Muoi Tran, Inho Choi, Gi Jun Moon, Anh V. Vu, and Min Suk
Kang. A Stealthier Partitioning Attack against Bitcoin Peer-to-
Peer Network. In Proc. IEEE S&P, 2020.
[58] Jian Wu, Ying Zhang, Z Morley Mao, and Kang G Shin. Inter-
net routing resilience to failures: analysis and implications. In
Proc. ACM CoNext, 2007.
[59] Addy Yeow. Global Bitcoin nodes distribution, 2020. https:
//bitnodes.io/.
1268    30th USENIX Security Symposium
USENIX Association
A A Large-scale Data-plane Route Measure-
ment
Figure 15: A map of geographic locations of our 21 cloud
instances (red pins), 26 PlanetLab nodes (blue pins), and 12
PEERING servers (black pins).
We perform a large-scale measurement to record the data-
plane routes from 59 distributed nodes across the world
to all available IPv4 preﬁxes. Particularly, in December
2019, we send out in total 47.2 million traceroute probes
from 21 instances hosted at different regions of ﬁve popular
cloud providers (i.e., Amazon, OVH, DigitalOcean, Hetzner,
and Alibaba), 26 PlanetLab nodes [46], and 12 PEERING
servers [50]. We visualize the geographical distributions of
our measurement nodes in Figure 15. We note that none
of these nodes are located at top-100 ASes, hence there is
no overlapping with the list of attackers that we consider in
most of our experiments in this paper. The destinations of
the traceroute probes are approximate 800 thousand IP
addresses that are randomly selected from all IPv4 preﬁxes
in the Internet. We assume all IPs in the same preﬁx would
have the same route as the randomly selected IP. We perform
the measurements in parallel using the state-of-the-art tool
scamper [34] at the rate of 400 packets per second where
each set of measurements from one node to all destinations is
ﬁnished in less than 20 hours. Then, we use the Routeviews
Preﬁx-to-AS mapping [12] to convert the traceroute re-
sults into AS-level paths. Finally, we remove all unreachable
hosts or hosts that do not belong to any mapping AS in all
measured paths.
B IP churn rate of Bitcoin nodes
For a more realistic evaluation of the Erebus attacks, we study
the IP churn rate of the actual Bitcoin nodes by measuring
their online duration before they leave the system. We re-
trieve two years’ worth of data (from January 1, 2018, to De-
cember 31, 2019) provided by Bitnodes — an online service
that periodically takes the snapshots of all reachable Bitcoin
addresses [59]. We consider an IP address that appears in
two consecutive Bitnodes snapshots is online between two
timestamps when the snapshots were taken. Following this,
we compute the total online duration (in days) of about 340
thousand distinct Bitcoin addresses observed in this two-year
period and plot the distribution in Figure 16. Figure 16 shows
10 5
10 4
3
10
2
10
1
10
s
e
d
o
n
n
i
o
c
t
i
B
f
o
r
e
b
m
u
N
s
y
a
d
D
r
o
f
e
n
i
l
n
o
10
0
10 0
Pr[D > 30]
 = 0.1747
Pr[D >130]
  = 0.0731
Pr[D > 380]
  = 0.0208
Pr[D 
 30]
 = 0.8253
10 1
30
10 2
130
380
10 3
Online duration D (days)
Figure 16: The online duration distribution (in days) of 340
thousand reachable Bitcoin nodes observed by Bitnodes [59]
in two years from January 1, 2018 to December 31, 2019.
Pr[·] indicates the empirical probability distribution of the
online duration.
that the Bitcoin network has a high churn rate. The vast ma-
jority (e.g., 82.53%) of the Bitcoin nodes are fairly short-lived
— they become unreachable within 30 days, which is well-
aligned with an existing one-month measurement done by
Donet et al. [14]. On the other hand, only 7.3% of the nodes
were online for more than 130 days and 2% of nodes (i.e.,
about 6.8 thousand IPs) were online for over 2 years.
The IP churn rate distribution is crucial when it comes to
the evaluation of the Erebus attacks. When evaluating whether
the attack is successful against a speciﬁc victim, we calculate
the required attack execution time and consider a random
online duration from the distribution to be the lifespan of the
victim node. Note that short-lived nodes (i.e., nodes that are
online for less than 30 days) are excluded from the considera-
tion because the usual targets of Erebus attacks are long-lived
and highly inﬂuential Bitcoin nodes, such as mining pool
gateways [57].
C Implementations of IP-to-AS Mapping
The basic principle of the tweak T1 (i.e., ASN-based group-
ing) is an IP-to-ASN mapping that maps any IP address to
the AS number of the AS representing it. Given a set of at-
tacker IPs, a mapping that groups them in a fewer number
of groups is generally preferred because they will likely oc-
cupy fewer slots in the two tables, thus decreasing the attack
success rate. In this paper, we take a simple approach that
maps an IP address to the ASN of its actual owner, i.e., an
IP-to-owner-AS mapping. During our disclosure with Bit-
coin Core developers (see Section 6.3), we learn that they
are implementing an uncommon, more sophisticated IP-to-
bottleneck-AS mapping, which was still being discussed at
the time we evaluated the tweak T1 [5]. In this section, we
describe this IP-to-bottleneck-AS implementation and show
that it is only marginally different from our mapping imple-
mentation in terms of effectiveness.
Particularly, the IP-to-bottleneck-AS mapping maps an IP
address to a so-called bottleneck AS, which is the ﬁrst com-
mon AS that appears on all AS-paths collected by multiple
USENIX Association
30th USENIX Security Symposium    1269
1
0.8
0.6
0.4
0.2
F
D
C
0
10 0
10 1
10 2
10 3
10 4
10 5
# /16 prefix
# owner AS
# bottleneck AS
Figure 17: Cumulative distribution of attacker IPs in terms
of their number of /16 preﬁxes, owner ASes, and bottleneck
ASes.
1
0.8
0.6
0.4
0.2
0
Nov 15
s
h
t
a
p
l
l
a
o
t
s
e
g
n
a
h
c
h
t
a
p
f
o
o
i
t
a
R
Bangalore
Frankfurt
New York
San Francisco
Singapore
Nov 20
Nov 25
Nov 30
Dec 5
Dec 10
Dec 15
Figure 18: The ratio of AS-level paths that have changed
compared to the previous day. The measurements are done
from ﬁve DigitalOcean regions in a one-month period (from
November 15, 2019, to December 15, 2019).
BGP collectors (e.g., RIPE RIS [44]) that destined to the IP
address. Similarly, a Bitcoin operator can individually calcu-
late the mapping with AS-paths retrieved from local routing
table dumps. Intuitively, if attacker IPs are distributed in mul-
tiple single-homed ASes, this implementation would make a
smaller number of groups than the IP-to-owner-AS mapping
because the IPs tend to share common upstream ASes. On
the other hand, it can be worse if a majority of IPs are from
the same multi-homed AS and mapped to multiple bottleneck
ASes.
To highlight the differences between three mapping op-
tions (i.e., the original /16 preﬁx, IP-to-owner-AS, and IP-to-
bottleneck-AS), we show the distributions of attacker IPs in
5900 scenarios (see Section 3.2) in term of number of /16
preﬁxes, number of owner ASes, and number of bottleneck
ASes in Figure 17. It shows that using both IP-to-AS map-
pings makes smaller numbers of groups than using the /16
preﬁx mapping. Also, the IP-to-bottleneck-AS mapping is
shown to be insigniﬁcantly better than our IP-to-owner-AS
implementation, e.g., the number of cases having 100 or fewer
groups is increased by only ten percentage points.
D (In)stability of Data-plane Routes
The third option of the inference logic is the data-plane mea-
surement scheme — a Bitcoin node measures the routes via
sending traceroute probes to its peers. The main problem
of this approach, which makes it unusable, is that a malicious
AS, which is already on the paths of the traceroute probes,
can easily manipulate the measurement results so that the
paths look benign (e.g., the results do not include the mali-
cious AS). For instance, the malicious AS can respond to
the probe with another AS’s IP address, or simply drop the
probing packet.
One may argue that a victim Bitcoin node can still de-
tect such manipulation by looking for anomalies of the
traceroute paths based on its longitudinal history. For ex-
ample, if the AS-level paths obtained via traceroute probes
to the same IP address suddenly change, it may indicate that
the traceroute probes may have been manipulated by a
malicious AS. Our analysis, however, shows that such detec-
tion is difﬁcult in practice. The reason is that the AS-level
paths are already quite unstable, even when there exist no
such attacks, and thus it is hard to distinguish sudden AS-path
changes due to malicious activities from the frequent benign
AS-path changes.
Here, we investigate the natural instability of traceroute
measurements at the AS-level. Our analysis begins with mea-
suring the data-plane paths from ﬁve nodes hosted at dif-
ferent regions of the DigitalOcean network (i.e., Bangalore
(India), Frankfurt (Germany), New York (US-East), San Fran-
cisco (US-West), and Singapore) to all 800 thousand available
IPv4 preﬁxes in the Internet, see Appendix A. The same set
of experiments is repeated every day for one month (from
November 15, 2019, to December 15, 2019). In each day,
we compute the number of AS paths that have changed in
comparison with the paths to the same destinations one day
earlier. Figure 18 shows the ratio of path changes to all paths
in each day from nodes in ﬁve regions. The data-plane paths
at AS-level appear to be quite stable in general — about 90%
of the paths measured from all regions (except Bangalore)
are unchanged within one day period. However, this also
means that 10% of the measured AS-level paths (i.e., about
80K) change within one day period. The measurements at
Bangalore show a more dynamic behavior of the changing
paths, in which about one-fourth of the paths are different
from what they were in the previous day.
This non-negligible amount of AS-level path changes
makes it difﬁcult to ﬁnd a practical threshold for anomaly
detection. Worse, a malicious AS, knowing that a portion of
the paths from the victim would change frequently, can slowly
manipulate the traceroute results within the threshold to
circumvent the detection. In conclusion, detecting the manip-
ulation in data-plane measurements is extremely challenging
and thus the data-plane measurement scheme cannot be used
in practice for RAP.
1270    30th USENIX Security Symposium
USENIX Association