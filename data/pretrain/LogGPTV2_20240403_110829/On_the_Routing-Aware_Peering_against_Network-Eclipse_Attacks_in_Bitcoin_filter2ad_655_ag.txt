### References

1. **Random Host Mutation: Transparent Moving Target Defense Using Software-Defined Networking.** In *Proc. HotSDN*, 2012.
2. **Sushil Jajodia, Anup K Ghosh, Vipin Swarup, Cliff Wang, and X Sean Wang.** *Moving Target Defense: Creating Asymmetric Uncertainty for Cyber Threats*. Springer Science & Business Media, 2011.
3. **Gleb Naumenko.** *p2p: Supplying and Using asmap to Improve IP Bucketing in addrman*. GitHub, 2020. [Link](https://github.com/bitcoin/bitcoin/pull/16702).
4. **Gleb Naumenko, Gregory Maxwell, Pieter Wuille, Alexandra Fedorova, and Ivan Beschastnikh.** *Erlay: Efficient Transaction Relay for Bitcoin*. In *Proc. ACM CCS*, 2019.
5. **RIPE NCC.** *RIS Live - RIPE Network Coordination Centre*, 2020. [Link](https://ris-live.ripe.net/).
6. **RIPE NCC.** *RIS Raw Data*, 2020. [Link](https://www.ripe.net/analyse/internet-measurements/routing-information-service-ris/ris-raw-data).
7. **Rishab Nithyanand, Oleksii Starov, Adva Zair, Phillipa Gill, and Michael Schapira.** *Measuring and Mitigating AS-Level Adversaries Against Tor*. In *Proc. NDSS*, 2016.
8. **PlanetLab.** *An Open Platform for Developing, Deploying, and Accessing Planetary-Scale Services*, 2020. [Link](https://www.planet-lab.org/).
9. **Jian Qiu and Lixin Gao.** *AS Path Inference by Exploiting Known AS Paths*. In *Proc. IEEE GLOBECOM*, 2005.
10. **Tongqing Qiu, Lusheng Ji, Dan Pei, Jia Wang, Jun (Jim) Xu, and Hitesh Ballani.** *Locating Prefix Hijackers Using LOCK*. In *Proc. USENIX Security*, 2009.
11. **Routeviews.** *University of Oregon Route Views Project*, 2020. [Link](http://www.routeviews.org/routeviews/).
12. **Brandon Schlinker, Todd Arnold, Italo Cunha, and Ethan Katz-Bassett.** *PEERING: Virtualizing BGP at the Edge for Research*. In *Proc. ACM CoNEXT*, 2019.
13. **Atul Singh, Miguel Castro, Peter Druschel, and Antony Rowstron.** *Defending Against Eclipse Attacks on Overlay Networks*. In *Proc. ACM SIGOPS European Workshop*, 2004.
14. **Joshua Juen, Aaron Johnson, Anupam Das, Nikita Borisov, and Matthew Caesar.** *Defending Tor from Network Adversaries: A Case Study of Network Path Prediction*. In *Proc. PETS*, 2015.
15. **Hennadii Stepanov.** *Try to Preserve Outbound Block-Relay-Only Connections During Restart*. GitHub, 2020. [Link](https://github.com/bitcoin/bitcoin/pull/17428).
16. **Thomas Kernen.** *Public Route Server and Looking Glass Site List*, 2011. [Link](http://www.traceroute.org/).
17. **Matthew Luckie.** *Scamper: A Scalable and Extensible Packet Prober for Active Measurement of the Internet*. In *Proc. ACM IMC*, 2010.
18. **Gordon Fyodor Lyon.** *Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning*. Insecure, 2009.
19. **Harsha V Madhyastha, Tomas Isdal, Michael Piatek, Colin Dixon, Thomas Anderson, Arvind Krishnamurthy, and Arun Venkataramani.** *iPlane: An Information Plane for Distributed Services*. In *Proc. OSDI*, 2006.
20. **Z Morley Mao, Lili Qiu, Jia Wang, and Yin Zhang.** *On AS-Level Path Inference*. In *ACM SIGMETRICS PER*, 2005.
21. **Yuval Marcus, Ethan Heilman, and Sharon Goldberg.** *Low-Resource Eclipse Attacks on Ethereum’s Peer-to-Peer Network*, 2018. [Link](https://eprint.iacr.org/2018/236).
22. **Steven J Murdoch and Piotr Zieliński.** *Sampled Traffic Analysis by Internet-Exchange-Level Adversaries*. In *Proc. PETS*, 2007.
23. **Yixin Sun, Anne Edmundson, Nick Feamster, Mung Chiang, and Prateek Mittal.** *Counter-RAPTOR: Safeguarding Tor Against Active Routing Attacks*. In *Proc. IEEE S&P*, 2017.
24. **Yixin Sun, Anne Edmundson, Laurent Vanbever, Oscar Li, Jennifer Rexford, Mung Chiang, and Prateek Mittal.** *RAPTOR: Routing Attacks on Privacy in Tor*. In *Proc. USENIX Security*, 2015.
25. **Renata Teixeira, Aman Shaikh, Tim Griffin, and Jennifer Rexford.** *Dynamics of Hot-Potato Routing in IP Networks*. In *Proc. of SIGMETRICS*, 2004.
26. **Tor.** *The Lifecycle of a New Relay*. Tor Blog, 2013. [Link](https://blog.torproject.org/lifecycle-new-relay).
27. **Muoi Tran, Inho Choi, Gi Jun Moon, Anh V. Vu, and Min Suk Kang.** *A Stealthier Partitioning Attack against Bitcoin Peer-to-Peer Network*. In *Proc. IEEE S&P*, 2020.
28. **Jian Wu, Ying Zhang, Z Morley Mao, and Kang G Shin.** *Internet Routing Resilience to Failures: Analysis and Implications*. In *Proc. ACM CoNext*, 2007.
29. **Addy Yeow.** *Global Bitcoin Nodes Distribution*, 2020. [Link](https://bitnodes.io/).

### Appendix A: Large-Scale Data-Plane Route Measurement

**Figure 15:** Geographical distribution of our 21 cloud instances (red pins), 26 PlanetLab nodes (blue pins), and 12 PEERING servers (black pins).

We conducted a large-scale measurement to record data-plane routes from 59 distributed nodes across the world to all available IPv4 prefixes. Specifically, in December 2019, we sent out a total of 47.2 million traceroute probes from 21 instances hosted in different regions of five popular cloud providers (Amazon, OVH, DigitalOcean, Hetzner, and Alibaba), 26 PlanetLab nodes, and 12 PEERING servers. The geographical distribution of our measurement nodes is visualized in Figure 15. None of these nodes are located within the top-100 ASes, ensuring no overlap with the list of attackers considered in most of our experiments. The destinations of the traceroute probes were approximately 800,000 IP addresses randomly selected from all IPv4 prefixes in the Internet. We assumed that all IPs in the same prefix would have the same route as the randomly selected IP. The measurements were performed in parallel using the state-of-the-art tool scamper [17] at a rate of 400 packets per second, with each set of measurements from one node to all destinations completed in less than 20 hours. We then used the Routeviews Prefix-to-AS mapping [11] to convert the traceroute results into AS-level paths. Finally, we removed all unreachable hosts or hosts that did not belong to any mapped AS in all measured paths.

### Appendix B: IP Churn Rate of Bitcoin Nodes

For a more realistic evaluation of the Erebus attacks, we studied the IP churn rate of actual Bitcoin nodes by measuring their online duration before they leave the system. We retrieved two years' worth of data (from January 1, 2018, to December 31, 2019) provided by Bitnodes, an online service that periodically takes snapshots of all reachable Bitcoin addresses [29]. We considered an IP address that appears in two consecutive Bitnodes snapshots to be online between the timestamps when the snapshots were taken. Following this, we computed the total online duration (in days) of about 340,000 distinct Bitcoin addresses observed in this two-year period and plotted the distribution in Figure 16.

**Figure 16:** Online duration distribution (in days) of 340,000 reachable Bitcoin nodes observed by Bitnodes [29] from January 1, 2018, to December 31, 2019. \(Pr[D > x]\) indicates the empirical probability distribution of the online duration.

The Bitcoin network has a high churn rate. The vast majority (82.53%) of Bitcoin nodes are short-lived, becoming unreachable within 30 days, which aligns with an existing one-month measurement done by Donet et al. [14]. On the other hand, only 7.3% of the nodes were online for more than 130 days, and 2% of nodes (about 6,800 IPs) were online for over 2 years.

The IP churn rate distribution is crucial for evaluating the Erebus attacks. When evaluating whether the attack is successful against a specific victim, we calculate the required attack execution time and consider a random online duration from the distribution to be the lifespan of the victim node. Short-lived nodes (online for less than 30 days) are excluded from consideration because the usual targets of Erebus attacks are long-lived and highly influential Bitcoin nodes, such as mining pool gateways [27].

### Appendix C: Implementations of IP-to-AS Mapping

The basic principle of tweak T1 (i.e., ASN-based grouping) is an IP-to-ASN mapping that maps any IP address to the AS number of the AS representing it. Given a set of attacker IPs, a mapping that groups them into fewer groups is generally preferred because they will likely occupy fewer slots in the two tables, thus decreasing the attack success rate. In this paper, we take a simple approach that maps an IP address to the ASN of its actual owner, i.e., an IP-to-owner-AS mapping. During our disclosure with Bitcoin Core developers (see Section 6.3), we learned that they are implementing a more sophisticated IP-to-bottleneck-AS mapping, which was still being discussed at the time we evaluated tweak T1 [5]. In this section, we describe this IP-to-bottleneck-AS implementation and show that it is only marginally different from our mapping implementation in terms of effectiveness.

Specifically, the IP-to-bottleneck-AS mapping maps an IP address to a so-called bottleneck AS, which is the first common AS that appears on all AS-paths collected by multiple BGP collectors (e.g., RIPE RIS [6]) destined to the IP address. Similarly, a Bitcoin operator can individually calculate the mapping with AS-paths retrieved from local routing table dumps. Intuitively, if attacker IPs are distributed in multiple single-homed ASes, this implementation would make a smaller number of groups than the IP-to-owner-AS mapping because the IPs tend to share common upstream ASes. On the other hand, it can be worse if a majority of IPs are from the same multi-homed AS and mapped to multiple bottleneck ASes.

To highlight the differences between the three mapping options (i.e., the original /16 prefix, IP-to-owner-AS, and IP-to-bottleneck-AS), we show the distributions of attacker IPs in 5,900 scenarios (see Section 3.2) in terms of the number of /16 prefixes, number of owner ASes, and number of bottleneck ASes in Figure 17. It shows that both IP-to-AS mappings result in smaller numbers of groups than the /16 prefix mapping. Additionally, the IP-to-bottleneck-AS mapping is shown to be insignificantly better than our IP-to-owner-AS implementation, e.g., the number of cases having 100 or fewer groups is increased by only ten percentage points.

**Figure 17:** Cumulative distribution of attacker IPs in terms of their number of /16 prefixes, owner ASes, and bottleneck ASes.

### Appendix D: (In)stability of Data-Plane Routes

The third option of the inference logic is the data-plane measurement scheme, where a Bitcoin node measures the routes by sending traceroute probes to its peers. The main problem with this approach, making it unusable, is that a malicious AS, already on the paths of the traceroute probes, can easily manipulate the measurement results to make the paths look benign (e.g., the results do not include the malicious AS). For example, the malicious AS can respond to the probe with another AS's IP address or simply drop the probing packet.

One might argue that a victim Bitcoin node can still detect such manipulation by looking for anomalies in the traceroute paths based on its longitudinal history. For instance, if the AS-level paths obtained via traceroute probes to the same IP address suddenly change, it may indicate that the traceroute probes have been manipulated by a malicious AS. However, our analysis shows that such detection is difficult in practice. The reason is that the AS-level paths are already quite unstable, even without such attacks, making it hard to distinguish sudden AS-path changes due to malicious activities from frequent benign AS-path changes.

Here, we investigate the natural instability of traceroute measurements at the AS-level. Our analysis begins with measuring the data-plane paths from five nodes hosted in different regions of the DigitalOcean network (Bangalore (India), Frankfurt (Germany), New York (US-East), San Francisco (US-West), and Singapore) to all 800,000 available IPv4 prefixes in the Internet, as described in Appendix A. The same set of experiments was repeated every day for one month (from November 15, 2019, to December 15, 2019). Each day, we computed the number of AS paths that had changed compared to the paths to the same destinations one day earlier. Figure 18 shows the ratio of path changes to all paths in each day from nodes in five regions. The data-plane paths at the AS-level appear to be quite stable in general—about 90% of the paths measured from all regions (except Bangalore) are unchanged within a one-day period. However, this also means that 10% of the measured AS-level paths (about 80,000) change within a one-day period. The measurements at Bangalore show a more dynamic behavior, with about one-fourth of the paths being different from what they were in the previous day.

This non-negligible amount of AS-level path changes makes it difficult to find a practical threshold for anomaly detection. Worse, a malicious AS, knowing that a portion of the paths from the victim would change frequently, can slowly manipulate the traceroute results within the threshold to circumvent the detection. In conclusion, detecting the manipulation in data-plane measurements is extremely challenging, and thus the data-plane measurement scheme cannot be used in practice for RAP.

**Figure 18:** The ratio of AS-level paths that have changed compared to the previous day. The measurements are done from five DigitalOcean regions in a one-month period (from November 15, 2019, to December 15, 2019).