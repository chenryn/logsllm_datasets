### A. RQ4: Controller Selection Guideline

Based on our observations, we provide general guidelines to assist operators in selecting the most suitable SDN controllers. Our guidelines emphasize completeness, functionality, and specific SDN use cases. We found that FAUCET is the least stable among the analyzed controllers, with 52.5% of its issues attributed to missing logic. Although CORD and ONOS share a common codebase, CORD is more prone to load-related problems, with 30% of its bugs related to this issue compared to 16% in ONOS.

In Table VI, we highlight two critical SDN use cases and the symptoms that affect their core functionality. Based on our findings, we recommend ONOS as the most stable and performant controller. Transitioning to ONOS may require developers to find or develop appropriate applications due to a lack of rich, pre-existing applications. Additionally, FAUCET is specialized for specific use cases, such as network slicing [131], [132]. Using FAUCET outside of these narrow use cases often results in missing functionality and logic errors.

### B. RQ4: Automating Operators' Diagnosis

In the absence of a comprehensive tool for diagnosing and resolving bugs, we provide guidelines to expedite root-cause diagnosis and resolution. We achieve this by analyzing the correlations between bugs and categories (as shown in Table I) and exploring the uniqueness of keywords in bug descriptions.

**Correlation Analysis:** Figure 12 illustrates the cumulative distribution function (CDF) of correlations between all possible bug and category pairs. The curve shows that while most bug-category pairs (93.72%) are fairly correlated, there is a long tail indicating strongly correlated bug categories (6.28%). For instance, memory bugs are highly deterministic. Notably, bugs triggered by third-party service calls are highly correlated with the fix "add compatibility," which aligns with the observation that these bugs are often caused by argument mismatches between library versions. Unlike core controller bugs, these third-party bugs are associated with "Error message" and "Byzantine" outcomes.

**Keyword Analysis:** To further understand these correlations, we analyzed the topics extracted using natural language processing (NLP) techniques. We hypothesize that specific classes of bugs have unique topics or keywords in their descriptions. For example, memory bugs frequently mention null pointers and similar exceptions. Figure 14 lists the top bug categories based on topic uniqueness, confirming that these categories are the same ones with high correlations. Specifically, bugs with Byzantine symptoms introduce significantly different topics and keywords, while deterministic bugs have remarkably unique topics.

We applied our NLP model, trained on a manually labeled dataset, to a larger dataset of critical bugs from Jira. This dataset contains approximately five times more bugs than our manually labeled set. Figure 13 shows the distribution of predicted triggers from the entire dataset. Configuration errors are the primary trigger of SDN controller bugs, suggesting that operators should focus on potential configuration glitches during troubleshooting. OpenFlow events, while complex to capture and replay, contribute only a small part to the bug triggers. Therefore, it is more efficient to examine network events after addressing other more critical potential triggers.

**Takeaway:** These correlations and keyword analyses imply that identifying outcomes, symptoms, and extracting keywords from bugs can help developers and operators narrow down potential root causes and fixes. Future work could involve developing a decision tree to further streamline the diagnostic process.

### C. RQ5: Selecting Recovery Frameworks

In Table V, we present a survey of existing fault tolerance techniques for SDNs. A key observation is that no single technique can effectively recover from bugs across all root causes. Most techniques [13], [14], [48], [123]–[125] can recover from events triggered by OpenFlow messages, which is the primary focus of most SDN research. However, there are few existing works addressing interactions with configuration and external calls. While non-SDN techniques like Lock-in-Pop [133] can handle external events or configuration, they need to be adapted for domain-specific issues.

Most existing systems can easily recover from non-deterministic issues, but there is little support for deterministic issues, which account for most of the problems (as shown in Section III).

**Takeaway:** Although many systems can diagnose or recover from different types of bugs, combining them into a holistic system is non-trivial for the following reasons:
- Simply layering systems on top of each other may introduce inefficiencies or impact accuracy. For example, SPHINX [134] requires all input OpenFlow messages to update a "flow graph"-based model, while Bouncer [135] proactively filters out some inputs, potentially leading to an inconsistent flow graph.
- Their expected inputs and system models are often fundamentally different, making integration challenging. For instance, SOFT [136] analyzes output from different vendor implementations, and CHIMP [137] analyzes output from different SDN applications, but it is unclear how to combine their results for a holistic, cross-layer approach to fault detection.

### VIII. Threats to Validity and Discussions

**Generalizability:** While limited, our analysis is believed to generalize to future controllers because related work has shown that controllers follow a limited set of design principles. The three controllers we analyzed (CORD, ONOS, and FAUCET) cover various design choices: specialized (CORD) vs. generalized (ONOS, FAUCET); monolithic (FAUCET) vs. modular (ONOS, CORD); and distributed (ONOS, CORD) vs. centralized (FAUCET).

**Automated SE Analysis:** Our automated code analysis is constrained by the limitations of existing software engineering tools, which support specific languages (JAVA) or build systems (maven, gradle). For example, we could not perform smell analysis for FAUCET, which is written in Python, as the analysis codebase only supports JAVA-based software.

**Different Bug Management Systems:** The controllers use different bug management systems (e.g., GitHub for FAUCET, JIRA for ONOS and CORD), leading to variations in the type of information available. For example, JIRA provides Gerrit reviews, bug status, and timestamps, while GitHub provides a different subset of data. These differences impact the techniques and analyses we can apply. For instance, we could not analyze FAUCET's resolution times because the GitHub repository does not provide this information.

**Manual Classification:** Our work involves both manual and automated analysis. While automated analysis is susceptible to noise and bias, we use it to support our manual analysis. Most of our takeaways are based on manual analysis, minimizing the impact of learning-based noise on our observations. The validity of our manual analysis depends on the accurate description and reporting of bugs.

### IX. Related Works

**System-Research:** Bug studies across various domains [18], [19], [35], [138]–[141] form the foundation for systems research. While prior studies have focused on distributed systems, there is a lack of in-depth and comprehensive studies for SDN controllers. Despite using a similar classification as prior work [18], [19], bugs in SDN controllers differ significantly in their distributions, highlighting the need for studies like ours.

**SDN Bug Studies:** Previous work on SDN bugs [11], [12], [142]–[145] has analyzed a smaller spectrum of bugs compared to our study, which provides a holistic and in-depth analysis of 'critical' SDN bugs. While our work focuses on understanding bugs and their implications, others [143]–[145] have developed stochastic models to quantify the reliability of existing controllers.

### X. Conclusion

Bugs are a critical aspect of any software ecosystem, and within the software-defined networking (SDN) community, we have a limited understanding of our bugs. Without a thorough understanding, it is challenging to evaluate the efficacy of existing SDN fault tolerance techniques, design representative fault injectors, or identify key areas for research. In this paper, we aim to fill this crucial gap by conducting the largest bug study to date over three popular controller platforms.

### XI. Acknowledgements

We thank the anonymous reviewers and our shepherd, Marco Vieira, for their helpful comments. This work was supported by NSF award CNS-1749785.

### References

[1] “AT&T SD-WAN details retrieved from,” https://www.business.att.com/products/sd-wan.html, 2019, accessed: 10-6-2019.
[2] “Vodafone SDN details retrieved from,” https://www.vodafone.co.uk/business/sdn, 2019, accessed: 13-11-2019.
[3] “How SDN simplifies managing digital experiences,” https://www.orange-business.com/en/blogs/connecting-technology/networks/how-sdn-simplifies-managing-digital-experiences, accessed: 13-11-2019.
[4] “NSX Data Center details retrieved from,” https://www.vmware.com/in/products/nsx.html, 2019, accessed: 10-6-2019.
[5] “The Andromeda Cloud Platform details retrieved from,” https://www.ngcsoftware.com/landing/ngcandromedacloudplatform/, 2019.
[6] J. Son and R. Buyya, “A taxonomy of software-defined networking (SDN)-enabled cloud computing,” ACM Comput. Surv., vol. 51, no. 3, pp. 59:1–59:36, May 2018. [Online]. Available: http://doi.acm.org/10.1145/3190617
[7] R. Govindan, I. Minei, M. Kallahalla, B. Koley, and A. Vahdat, “Evolve or Die: High-Availability Design Principles Drawn from Google’s Network Infrastructure,” in Proceedings of the 2016 ACM SIGCOMM Conference, ser. SIGCOMM ’16. New York, NY, USA: ACM, 2016, pp. 58–72. [Online]. Available: http://doi.acm.org/10.1145/2934872.2934891
[8] S. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski, A. Singh, S. Venkata, J. Wanderer, J. Zhou, M. Zhu, J. Zolla, U. Hölzle, S. Stuart, and A. Vahdat, “B4: Experience with a globally-deployed software defined WAN,” in Proceedings of the ACM SIGCOMM 2013 Conference on SIGCOMM, ser. SIGCOMM ’13. New York, NY, USA: ACM, 2013, pp. 3–14. [Online]. Available: http://doi.acm.org/10.1145/2486001.2486019
[9] T. Lei, Z. Lu, X. Wen, X. Zhao, and L. Wang, “SWAN: An SDN based campus WLAN framework,” in 2014 4th International Conference on Wireless Communications, Vehicular Technology, Information Theory and Aerospace Electronic Systems (VITAE), May 2014, pp. 1–5.
[10] S. Choi, B. Burkov, A. Eckert, T. Fang, S. Kazemkhani, R. Sherwood, Y. Zhang, and H. Zeng, “FBOSS: Building switch software at scale,” in Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication, ser. SIGCOMM ’18. New York, NY, USA: Association for Computing Machinery, 2018, p. 342–356. [Online]. Available: https://doi.org/10.1145/3230543.3230546
[11] M. Canini, D. Venzano, P. Peresíni, D. Kostic, and J. Rexford, “A NICE way to test OpenFlow applications,” in NSDI. San Jose, CA: USENIX, 2012, pp. 127–140. [Online]. Available: https://www.usenix.org/conference/nsdi12/technical-sessions/presentation/canini
[12] C. Scott, A. Wundsam, B. Raghavan, A. Panda, A. Or, J. Lai, E. Huang, Z. Liu, A. El-Hassany, S. Whitlock, H. Acharya, K. Zarifis, and S. Shenker, “Troubleshooting Blackbox SDN Control Software with Minimal Causal Sequences,” ACM SIGCOMM Computer Communication Review, vol. 44, 08 2014.
[13] N. Katta, H. Zhang, M. Freedman, and J. Rexford, “Ravana: Controller Fault-tolerance in Software-defined Networking,” in Proceedings of the 1st ACM SIGCOMM Symposium on Software Defined Networking