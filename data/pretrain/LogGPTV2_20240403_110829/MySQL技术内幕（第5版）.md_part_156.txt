---
## Page 682
两个过程不允许有同样的名字，但函数可以和过程有同样的名字。
就应该以 db_name.routine_name 的格式来给出它的名字。在同一个数据库里，任意两个函数或
CREATE ROUTINE 权限。
（如 SELECT 语句生成的结果集）将被删除。
务器
行）
句显式指定了这种行为。ON COMPLETIONPRESERVE子句将导致事件不会被删除。
语句，必须用关键字BEGIN和END 把它们括起来以构成一个复合语句。（更多信息请参考E.2节。）
现表引用，也不应该出现指向存储函数或用户定义函数的引用。
的首次执行时间，用ENDS子句来设定事件从何时起不再执行。在ONSCHEDULE子句里，不应该出
执行发生在它刚被创建时，然后再按照设定的时间间隔重复执行。可以用STARTS子句来设定事件
interva1修饰符构成（例如，5HOUR或'1:30，MINUTE_SECOND）。默认情况下，新事件的首次
形式的设置项将使得该事件定期重复执行。重复时间由一个数值和一个用来表明如何解释该数值的
里的interval值不应该使用任何与微秒有关的限定符。
来加上或减去一个时态间隔。详细的语法格式描述，请参考C.2.5节中的DATE_ADD（）函数条目。这
词）可以用来表示当前日期和时间。datetime 表达式可以使用INTERVAL expor interval运算
子句的各种格式里，datetime代表的是日期/时间值。CURRENT_TIMESTAMP（）函数（或它的同义
662
默认情况下，新例程将被创建在当前的默认数据库里。如果想在某个数据库里创建一个新例程，
DO子句用来给出事件发生时将要执行的语句。它应该只包含一条 SQL语句。如果需要使用多条
这些语句可用来创建新的存储例程（函数和过程)。在使用这些语句创建存储例程时，必须拥有
●CREATE FUNCTION、CREATE PROCEDURE
事件既不需要输入参数，也不会产生输出信息。也就是说，无法向事件传递参数，并且输出信息
选项ENABLE和DISABLE分别表示的是事件在被创建出来后的初始状态是“启用”（按计划运
默认情况下，事件在它最后一次执行完毕之后将被删除。ONCOMPLETIONNOTPRESERVE子
在ONSCHEDULE子句里，AT形式的设置项将使得该事件在指定时刻执行且仅执行一次。EVERY
子句ON SCHEDULE的作用是为新事件安排执行时间表（假设事件调度器正在运行中）。在这个
characteristic:
func_param:
CREATE
CREATE
在事件创建时生效的 sql_mode系统变量的值会被保存起来并在事件发生时恢复生效。
上是启用的，但是在复制它的任何从服务器上都是禁用的。
还是“禁用”
param_name type
routine_stmt
routine_stmt
RE
cha
COMMENT
附录ESQL语法参考
(CONTAINS SQL
acte.
type
=definer_name]
ristic]
definer_name]
（不运行）。DISABLEON SALVE 选项的含义是，事件在创建它的那个MySQL服
str'
INO SQL I READS SQL DATA I MODIFIES SQL DATA)
义
---
## Page 683
法执行那些会生成一个结果集的语句。
语句，必须用关键字BEGIN和END 把它们括起来以构成一个复合语句（参考E.2节)。
果没加，则默认为IN。
IN、OUT或INOUT，以表明该参数是仅用于输入、仅用于输出，还是可以同时用于输入和输出。如
对调用者而言是不可见的。（即函数的参数会被当作IN参数。）
MySQL数据类型。参数的作用是在函数被调用时把参数值传递给它，但参数值的变化在函数返回时
在创建例程时，系统变量 sql_mode 的当前值会被保存起来，以便在例程执行时使用。
函数要向调用者返回一个值，所以在函数体内必须包含至少一条 RETURN 语句。不过，函数无
●CREATE INDEX
routine_stmt 是例程主体，是一个 SQL 语句。它应该是单条 SQL 语句。如果需要使用多条
口
口INOUT参数可以把一个值传递给存储过程，其最终结果在存储过程终止之后对调用者而言是
口IN参数用来把值传递给存储过程。这种参数可以在存储过程里修改，但在存储过程终止之
index_option:
CREATE [UNIQUEIFULLTEXTISPATIAL]INDEX indeX_name
COMMENT
可以指定一个或多个characteristic值，它们之间以空格隔开的下列选项构成。
口
存储过程的参数也是通过给出参数名及其类型的方式定义的，但在参数名的前面还可以加上
在定义函数的时候，参数列表后面必须加上一条 RETURNS 语句，以表明返回值的数据类型。
存储函数的参数是通过给出参数名及其类型的方式定义的。参数类型可以是任何一种有效的
automatic_sp_privileges.
例程的描述性说明。此说明信息可以通过用于显示例程信息的SHOW语句显示出来。
可见的。
此特性与DEFINER子句一起使用，决定着例程执行时的安全上下文（即用于核查其访问权限
SQLSECURITY
表明的是例程语言。此选项会被解析，但会被忽略。MySQL只支持用 SQL语言编写存储例程。
LANGUAGE SQL
不确定性的。
DETERMINISTIC表示的是，
DETERMINISTIC表示的是，函数在使用同样的参数值调用时，总是会产生相同的结果。NOT
DETERMINISTIC、NOT DETERMINISTIC
■MODIFIESSQLDATA：例程包含可修改数据的SQL语句。
这些特性提供的是与例程如何访问数据有关的提示。在 MySQL 里，这些特性不会对“服务
CONTAINS SQL、NO SQL、READS SQL DATA、MODIFIES SQLDATA
程里修改。OUT参数的最终结果在存储过程终止之后对调用程序而言是可见的。
OUT参数不是用来向存储过程传递值的。它在存储过程里的初始值是NULL，允许在存储过
后从调用程序里看不出任何改变。
限
?
器
，并且会在例程被删除时恢复它们。如果要关闭这种行为，可以禁用系统变量
账户。就哪些权限会被检查而言，该账户必须对能够被调用的那个例程拥有EXECUTE
账户)，请参考4.3节。如果没有给出DEFINER，则默认使用执行CREATE语句的那个用户
READS SQL DATA：例程包含的是只读SQL语句，不能修改数据。
NOSQL：例程不包含SQL语句。
CONTAINS SQL：例程包含 SQL语句。如果没有指定数据访问特性，则默认为这个值。
实际上允许例程执行什么样的语句”产生任何影响。
默认情况下，MySQL会自动将EXECUTE和ALTERRUOTINE权限分配给例程的创建用
，结果不一定相同。例如，使用NOW（）作为返回值的函数可能是
E.1SQL语句语法（非复合语句）
663
权
---
## Page 684
属性的空间类型列。
串列（CHAR、VARCHAR、TEXT）。SPATIAL 索引只适用于MyISAM表，并且只适用于具有 NOT NULL
来创建。
索引I的类型。CREATEINDEX语句不能用来创建PRIMARY KEY，必须使用ALTERTABLE语句
逐个创建要快得多。
某个表创建多个索引，最好使用 ALTER TABLE 语句。只用一条语句就可以添加所有的索引，这比
内部是被当作 ALTERTABLE语句来处理的。更多详细信息请参考ALTERTABLE 条目。如果需要为
664
FULLTEXT索引可用于MyISAM表或InnoDB表（自MySQL5.6.4起），但是只能用于非二进制
默认情况下，创建的是非唯一性索引。UNIQUE、FULLTEXT或SPATIAL关键字可以用来表明
CREATE[TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
·CREATE TABLE
与索引创建有关的更多信息请参考2.6.4节。
口
口
口index_type。它表示的是索引算法，该算法可用于多种存储引擎。算法值包括适用于
在索引定义的末尾，可以使用下面这些index_option值。
给tbl_name表增加一个名为index
create_definition:
table_option:
index_type: USING (BTREE | HASH | RTREE)
文解析器插件。与解析器插件有关的详细内容请参考MySQL参考手册。
WITH PARSER parser_name。它只适用于 FULLTEXT索引。其作用是为新索引指定一个全
0时表示使用默认长度。
KEY_BLOCK_SIZE[=］n。它会建议存储引擎使用n个字节作为新索引的键块长度。n值为
5.5.3里引人的。
COMMENT"str’。它提供的是对索引的描述性说明（最多1024个字符）。此选项是在MySQL
表里用于SPATIAL索引I的RTREE。
MyISAM表和InnoDB表的BTREE、适用于MEMORY表的HASH或BTREE，以及MyISAM
附录ESQL语法参考
(INDEX
(index_columns)
(LIKE tbl_name2)
LIKE
index_nam
BLOCK_SIZE[=]n
（参考后面的讨论）
name2
definition[reference_definition]
[index_option]
[table_option]
name的新索引l。新索引会根据index_columns里给出
select]
---
## Page 685
TABLE 语句删除临时表，或者把它重新命名，那么可以再次看到原有的那个表。在创建临时表时，
个表之所以仍然能被其他客户端看到，那是因为临时表只对创建它的客户端可见的。如果用DROP
建一个临时表，并且在临时表存在期间，客户端将无法看到原来那个名为tbl_name 的表。原来那
这里有两种例外情况。首先，如果指定了IF NOT EXISTS 子句，表将不会被创建，这条语句也不
CREATE 权限。
据库里创建表，则必须以 db_name.tbl_name 格式给出表名。执行此语句时，要求对该表拥有
一般情况下，如果想要创建的表已存在，那么这条语句将执行失败，并且会报告错误。但是，
CREATE TABLE语句会在默认数据库里创建一个新的名为tbl_name的表。如果需要在指定数
partition_option:（参考后面的讨论）
subpartition_definition:
partition_definition:
reference_definition:
index_option：（参考后面的讨论）
col_definition:
REFERENCES
[partition_option]...
ICHECK (expr)
(subpartition_definition[,subpartition_definition]...)]
[(partition_definition[,partition_definition]...)]
SUBPARTITION
PARTITIONS n]
ON
MATCH FULL
[COMMENTStr']
[AUTO_INCREMENT]
[SUBPARTITIONS
[index_name](index_columns)[index_option]...
RANGE (expr)
[LINEAR]
日
UPDATE
DELETE
[LINEAR]
ST
(expr)
COLUMNS (col_list)
reference_action
|CASCADE|SET NULLINO ACTIONISET DEFAULT
BY
n]
(col_list）
[PRIMARY KEY] 【UNIQUE [KEY]]
FOREIGN KEY
E.1SQL语句语法（非复合语句）
---
## Page 686
属性的空间类型列。
列（CHAR、VARCHAR、TEXT）。SPATIAL 索引只适用于MyISAM表，并且只适用于具有NOT NULL
自动选择第一个索引列的名字作为此索引的名字。
是表里的一个或多个列，它们之间用逗号隔开。如果没有给出索引名字index_name，则MysQL会
所创建的索引允许包含
句 PRIMARY KEY和UNIQUE 所创建的索引不允许包含相同的值。INDEX和KEY互为同义词，它们
附录B。允许出现在数据类型之后的其他可选关键字如下所示。
键
类
子句或一个CHECK子句。CHECK子句可以被解析，但会被忽略。
建为已有表的一个空副本。后面有几节会更加完整地描述这些子句。
存
语句创建的，那么该列表是可选的。table_option 值用于指定表的各种属性。如果需要将表分区
TABLE语句将其删除。
必须拥有CREATETEMPORARY TABLE 权限。
建字。该类型可以是附录B里列出的任何一种。每种列类型都有一些特有的属性，详细讨论请参考
666
似，但是
意的 SELECT语句形式），则新表将使用它所返回的结果集来创建。结尾的LIKE子句会把新表创
储，可以使用partition_scheme来定义各种分区特性。如果指定了结尾的 select_stmt（以
FULLTEXT索引可用于MyISAM表或InnoDB表（自MySQL5.6.4起），但是仅用于非二进制串
列和索引的定义。create_definition可以是一个列定义、一个索引定义、一个 FOREIGN KEY
列表create_definition 列出的是要创建的各个列和索引。如果新表是通过结尾的 SELECT
如果指定了TEMPORARY 关键字,则临时表将一直存在,直到当前客户端会话结束或者使用 DROP
在索引定义的最后，
子句 PRIMARY KEY、UNIQUE、INDEX、KEY、
口
口
口
NULL或NOTNULL
列定
口
COLUMNS 语句来查看。
列的描述性注释（最多1024个字符）。此属性可以用 SHOW CREATE TABLE 和 SHOWFULL
COMMENT'str
用来表明该列是
UNIQUE [KEY]
略这个项的话，MySQL会向列定义中添加 NOT NULL。
用来表明该列是一个 PRIMARY KEY。PRIMARY KEY 列必须是 NOT NULL 的，因此如果你省
这个关键字只能用在整数和浮点类型的列上。AUTO_INCREMENT列的特殊之处在于：当你往
AUTO_INCREMENT
句时，MySQL也可以分配默认值一
用来设定该列的默认值。它不能用于BLOB或TEXT类型、空间类型，或者带有
DEFAULT default_value
的介绍。）AUTO_INCREMENT 列必须被索引，而且不能为 NOT NULL。每个表最多只能有一