      // 这个hashbuf用于存储SHA512的计算结果，在后面比较会一直被使用到
      memset(hash_buf, 0, 64);
      data1_len = 0;
      data2_len = 0;
      memset(image_info, 0, sizeof(image_info));
      IN_MEM = 0;
      // 通过stat函数读取加密固件的相关信息写入结构体到image_info，最重要的是文件大小
      if ( !stat(img_loc, image_info) )
      {
        // 获取文件大小
        file_blocks = image_info[13];
        // 以只读打开加密固件
        image_fp = open(img_loc, 0);
        if ( image_fp >= 0 )
        {
          // 将加密固件映射到内存中
          MEM = (_DWORD *)mmap(0, file_blocks, 1, 1, image_fp, 0);
          if ( MEM )
          {
            // 以O_RDWR | O_NOCTTY获得解密后固件应该存放的文件描述符
            out_image_fp = open(out_image_loc, 258);
            if ( out_image_fp >= 0 )
            {
              v9 = file_blocks;
              // 比较写入到内存的大小和固件的真实大小是否相同
              if ( file_blocks - 1 == lseek(out_image_fp, file_blocks - 1, 0) )
              {
                write(out_image_fp, &unk_402EDC, 1);
                close(out_image_fp);
                out_image_fp = open(out_image_loc, 258);
                // 以加密固件的文件大小，将待解密的固件映射到内存中，返回内存地址OUT_MEM
                OUT_MEM = mmap(0, v9, 3, 1, out_image_fp, 0);
                if ( OUT_MEM )
                {
                  IN_MEM = MEM;                     // 重新赋值指针
                  // 检查固件的Magic，通过查看HEX可以看到加密固件的开头有SHRS魔数
                  if ( check_magic((int)MEM) )      // 比较读取到的固件信息中含有SHRS
                  {
                    // 获得解密后固件的大小
                    data1_len = htonl(IN_MEM[2]);  
                    data2_len = htonl(IN_MEM[1]);   
                    // 从加密固件的1756地址起，计算data1_len个字节的SHA512，也就是解密后固件大小的消息摘要，并保存到hash_buf
                    sub_400C84((int)(IN_MEM + 0x6dc), data1_len, (int)hash_buf);
                    // 比较原始固件从156地址起，64个字节大小，和hash_buf中的值进行比较，也就是和加密固件头中预保存的真实加密固件大小的消息摘要比较
                    if ( !memcmp(hash_buf, IN_MEM + 0x9c, 64) )
                    {
                      // AES对加密固件进行解密，并输出到OUT_MEM中
                      // 这个地方也可以看出从加密固件的1756地址起就是真正被加密的固件数据，前面都是一些头部信息
                      // 函数逻辑比较简单，就是AES加解密相关，从保存在固件头IN_MEM + 0xc获取解密密钥
                      sub_40107C((int)(IN_MEM + 0x6dc), data1_len, aes_key, IN_MEM + 0xc, OUT_MEM);
                      // 计算解密后固件的SHA_512消息摘要
                      sub_400C84(OUT_MEM, data2_len, (int)hash_buf);
                      // 和存储在原始加密固件头，从92地址开始、64字节的SHA512进行比较
                      if ( !memcmp(hash_buf, IN_MEM + 0x5c, 64) )
                      {
                        // 获取解密固件+aes_key的SHA512
                        sub_400D24(OUT_MEM, data2_len, aes_key, (int)hash_buf);
                        // 和存储在原始固件头，从28地址开始、64字节的SHA512进行比较
                        if ( !memcmp(hash_buf, IN_MEM + 0x1c, 64) )
                        {
                          // 使用当前文件系统内的公钥，通过RSA验证消息摘要和签名是否匹配
                          if ( sub_400E78((int)(IN_MEM + 0x5c), 64, (int)(IN_MEM + 0x2dc), 0x200) == 1 )
                          {
                            if ( sub_400E78((int)(IN_MEM + 0x9c), 64, (int)(IN_MEM + 0x4dc), 0x200) == 1 )
                              v5 = 0;
                            else
                              v5 = -1;
                          }
                          else
                          {
                            v5 = -1;
                          }
                        }
                        else
                        {
                          puts("check sha512 vendor failed\r");
                        }
                      }
                      else
                      {
                        printf("check sha512 before failed %d %d\r\n", data2_len, data1_len);
                        for ( i = 0; i = 0 )
        close(image_fp);
      if ( image_fp >= 0 )
        close(image_fp);
      return v5;
    }
### 概述DIR 3040的固件组成以及解密验证逻辑
从上面最关键的解密函数逻辑分析中，可以知道如果仅仅是解密相关，实际上只用到了AES解密，而且还是使用的硬编码密钥（通过了一些计算）。只是看上面的解密+验证逻辑分析，对整个流程可能还是会有点混乱，下面就说一下加密固件的文件结构和总结一下上面的解密+验证逻辑。
先直接给出加密固件文件结构的结论，只展现出重要的Header内容，大小1756字节，其后全部是真正的被加密固件数据。
起始地址 | 长度（Bytes） | 作用  
---|---|---  
0：0x00 | 4 | 魔数：SHRS  
4：0x4 | 4 | 解密固件的大小，带填充  
8：0x8 | 4 | 解密固件的大小，不带填充  
12：0xC | 16 | AES_128_CBC解密密钥  
28：0x1C | 64 | 解密后固件+KEY的SHA512消息摘要  
92：0x5C | 64 | 解密后固件的SHA512消息摘要  
156：0x9C | 64 | 加密固件的SHA512消息摘要  
220：0xDC | 512 | 未使用  
732：0x2DC | 512 | 解密后固件消息摘要的数字签名  
1244：0x4DC | 512 | 加密后固件消息摘要的数字签名  
结合上面的加密固件文件结构，再次概述一下解密逻辑：
  1. 判断加密固件是否以Magic Number：SHRS开始。
  2. 判断（加密固件中存放的，真正被加密的固件数据大小的SHA512消息摘要），和，（去除Header之后，数据的SHA512消息摘要）。
这一步是通过验证固件的文件大小，判定是否有人篡改过固件，如果被篡改，解密失败。
  1. 读取保存在Header中的AES解密密钥，对加密固件数据进行解密
  2. 计算（解密后固件数据的SHA512消息摘要），和（预先保存在Header中的、解密后固件SHA512消息摘要）进行对比
  3. 计算（解密固件数据+解密密钥的、SHA512消息摘要），和（预先保存在Header中的、解密后固件数据+解密密钥的、SHA512消息摘要）进行对比
  4. 使用保存在当前文件系统中的RSA公钥，验证解密后固件的消息摘要和其签名是否匹配
  5. 使用保存在当前文件系统中的RSA公钥，验证加密后固件的消息摘要和其签名是否匹配
## 小结
这篇文章主要是以DIR
3040固件为例，说明如何从未加密的老固件中去寻找负责解密的可执行文件，用于解密新版的加密固件。先说明拿到一个固件后如何判断已经被加密，然后说明如何去找到负责解密的可执行文件，再通过qemu仿真去执行解密程序，将固件解密，最后简单说了下固件完整性相关的知识，并重点分析了解密程序的解密+验证逻辑。
这次对于DIR
3040的漏洞分析和固件解密验证过程分析还是花费了不少的时间。首先是固件的获取，从官网下载到的固件是加密的，然后看到一篇文章简单说了下基于未加密固件版本对加密固件进行解密，也是DIR
3040相关的。但是我在官网上没有找到未加密的固件，全部是被加密的固件。又在信息搜集的过程中，发现了原来在Github上有一个比较通用的、针对D-Link系列的[固件解密脚本](https://github.com/0xricksanchez/dlink-decrypt)。原来，Dlink近两年使用的加密、验证程序imgdecrypt基本上都是一个套路，于是我参考了解密脚本开发者在2020年的分析思路，结合之前看过的关于可信计算相关的一些知识点，简单叙述了固件安全性，然后重点分析了解密验证逻辑如上。
关于漏洞分析，感兴趣的师傅可以看一下我的这篇[分析文章](https://genteeldevil.github.io/2021/07/23/D-Link%20DIR%203040%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E5%88%B0RCE/)。
### 参考链接
  * [Breaking the D-Link DIR3060 Firmware Encryption](https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/21943)
  * [D-Link DIR 3040从信息泄露到RCE](https://genteeldevil.github.io/2021/07/23/D-Link%20DIR%203040%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E5%88%B0RCE/)
* * *