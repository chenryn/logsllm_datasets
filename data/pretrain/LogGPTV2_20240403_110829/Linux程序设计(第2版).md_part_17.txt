7)find_cd函数的作用是在CD唱盘“标题”文件里查找CD唱盘的有关资料，它使用grep命令
来完成这-工作。我们需要知道字符串在“标题”文件里出现了多少次，但grep命令的返回值只
能告诉我们是没有找到该字符串还是找到了很多次。为了解决这一问题，我们把grep的输出保存
到一个临时文件里去，字符串每被找到一次就在临时文件里保存一行对应的数据，然后再统计
临时文件里的行数就可以达到我们的目的了。
单词统计命令wc的输出里包含着用来分隔被统计文件中行数、单词数和字符个数的空白字
符。我们利用“S（wc-1Stemp_file)”记号从其输出结果里提取出第一个参数赋值给表示文件中
文本行数的linefound变量。如果我们要用到wc命令输出中其他靠后的值，可以利用set命令把
shell参数变量设置为wc命令的输出结果。
我们把IFS（Internal Field Separator，内部数据域分隔符）设置为一个逗号（，），这样就可
以读取以逗号分隔的数据城了。另一个可替换使用的命令是cut。
find_cd()(
if |*$1*+n*}:then
asklist=n
p1se
加入jaVa编程群：524621833
---
## Page 82
第2章shell程序设计63
asklist=y
cdcatnuss*.
fi
echo
-e *Enter a string to seareh for in the CD titles \c*
if {*$searchstr*= "* ]; then
read searchstr
fi
return 0
grep “Ssearchstr* Stitle_file > $teep_file
set S（wc -1 Stenp_file)
linesfound=$1
case “$linesfound* in
{0
echo *Sorry.nothing found*
get_return
return 0
1}
2}
echo·Found the following*
cat $tenp_file
get_return
return 0
esac
IFS=*,*
read cdcatrum cdtitle cdtype cdac  $temp_file
mv $tenp_file Stracks_file
echo
add_record_tracks
return
fi
1
9)count_cds函数的作用是快速统计数据库中的CD唱盘个数和曲目总数。
count_cds(}{
set $(wc -1 $title_file)
num_titles=$1
set $(wc -1 Stracks_file)
echo found Snum_titles CDs, with a total of $nwm_tracke cracks
num_tracks=$1
get_return
return
10)remove_records函数的作用是从数据库文件里删除对应的数据项，它通过“grep-v”命
令别除所有匹配到的字符串。注意，我们必须使用一个临时文件来完成这一工作。
如果我们使用下面这样的命令：
grep -v *^scdcatnun*> Stitle_file
Stitle_file文件就会在grep命令开始执行之前被“>”输出重定向操作设置为空文件，从面使
grep命令实际上将从一个空文件里读取数据。
remove_records()(
if[=z"$edcatnum*];then
echo You must select a CD first
find_cd n
 [aeopos.u-]
fi
get_confirm &k{
grep-v*S(cdcatnum}.$title_file > Stemp_file
grep-v*^s(cdcatnum),$tracks_file>Stenp_file
nv Stemp_file Stitle_file
nv Stemp_rile Stracks_file
echo Entry renoved
cdcatnuma**
get_return
retuzn
ll1)list_tracks函数还是使用grep命令来找出我们想要的数据行，它还通过cut命令去处
理有关的数据城，再通过more命令按页提供输出。读者可以自已算一下要是用c语言来重新
编写出这段大约20行左右的代码需要多少条语句，你不得不佩服shel1可是多么强大的一个
工具。
加入java编程群：524621833
---
## Page 84
第2章shell程序设计
65
list_tracks()(
if[*Scdcatnum*=*];then
echo no CD selected yet
return
else
grep*^s(cdcatmum),*Stracks_file>$tenp_file
num_tracks=s[wc -] Stemp_Eile]
if[*Snun_tracks=*0]:then
else(
echo no tracks found for $cdtitle
echo
echo
*$cdtitle:-*
cut-f 2--d.$temp_file
echo
）|S{PAGER:-more)
echo
fi
fi
get_return
return
12）到这里所有的函数都已经定义好了，我们进人主程序部分。开头那几行先查明文件是否
存在，然后调用主菜单函数set_menu_choice，再根据主菜单函数的输出进行相应的操作。
如果用户选择了退出（“q”或“Q”），我们先副除临时文件，再显示结束信息，最后以成功
条件（退出码为0）退出这个应用程序。
rm -f Stemp_file
if(t-f $title_file ]:then
touch stitle_file
iff-f Stracks_tile ]:then
fi
touch $tracks_file
 Now the application proper
clear
echo
echo
echo *Mini CD manager*
sleep 1
quitan
while*$quic*!*y*]:
do
set_menu_choice
a)
add_records::
f) find_cd y::
remove_records;:
u) update_cd: :
list_tracks;1
count_cds;:
11
b)
echo
more Stitle_file
echo
get_return;:
)echo*Sorry.choice notrecognized*;:
done
esac
#Tidy up and leave
rm -f $tenp_file
加入java编程群：524621833
---
## Page 85
66
Linux程序设计
补充说明
脚本程序开始处的trap命令起作用是陷阱用户按下“Ctrl-C”组合键的事件，根据终端设置
情况的不同，它将引发EXIT或INT信号。
菜单选择操作还有其他的实现办法，特别值得一提的是bash或ksh（它没有被列在X/Open技
术规范里）提供的select结构，它是一个专“]用来处理菜单选择的结构。如果具备在脚本程序单
使用这种结构的条件，并且不介意移植性稍差的话，可以考虑这种办法。为用户准备的多行信
息还可以用即时文档来实现。
读者可能已经注意到在开始--个新的CD唱盘记录时没有对它的主关键字进行检验：新代码
忽略了使用同样的代码的后续的唱盘名称，而把它们上面的曲目添加到第一个CD唱盘的曲目清
单里。如下所示：
1 First CD Track 1
2 First CD Track 2
2 With the same Co key
Another CD
我们把这个问题和其他改进留给读者，请发挥你们自已的想象力和创造力，因为在GPL版权
规则下，你们完全可以对这些代码进行修改。
2.6本章总结
在这一章里，我们看到shel本身就是一种功能强大的程序设计语言。它能够调用其他程序
并对它们的输出进行处理，这使shel成为文本和文件处理方面一个理想的工具。
当你下一次需要小工具程序的时候，请考虑是否能够用一个脚本程序把某些UNIX命令组织
起来解决自已的问题。在不使用编译器的情况下，你完全可以编写出大量的工具程序，也许你
自己都会吃惊的。
加入jaVa编程群：524621833
---
## Page 86
第3章如何使用和处理文件
在这一章里，我们将学习关于UNIX中的文件和子目录的知识以及如何对它们进行处理。我
们将学习如何建立文件、如何打开它们、如何对它们进行读写操作以及如何关闭它们。我们还
将学习程序如何对子目录进行处理，比如如何建立、扫描和删除它们等。在上一章岔开去讨论
shel程序设计之后，我们终于开始使用C语言进行程序设计了。
在开始讨论UNIX对文件的I/O程序之前，我们先来复习一下与文件、子自录和设备有关的概
念。对网络和子目录进行的处理需要通过系统调用（UNIX中与Windows中的应用程序接口API
对应的概念），但还有许多库函数和标准I/O函数库（stdio库）等使文件处理更直接高效。
本章的大部分内容都将用于讨论对文件和子日录进行处理的各种调用。因此，这一章的学
习范围主要有：
·文件和设备。
·系统调用。
·库函数。
·文件访问的底层操作。
·对文件进行管理。
·标准V/O库。
·格式化的输入和输出。
·文件和子目录的维护。
·对子目录进行扫描。
·错误及其处理。
·其他高级论题。
1
3.1UNIX的文件结构