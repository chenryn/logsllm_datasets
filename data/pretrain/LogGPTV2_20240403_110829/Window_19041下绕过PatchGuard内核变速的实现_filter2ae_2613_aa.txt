# Window 19041下绕过PatchGuard内核变速的实现
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这里主要讨论的计时API函数为QueryPerformanceCounter
原型如下
    BOOL QueryPerformanceCounter(
      LARGE_INTEGER *lpPerformanceCount//指向接收当前性能计数器值的变量的指针。
    );
    //检索性能计数器的当前值，该值是可用于时间间隔测量的高分辨率（QuadPart = time + round(lpPerformanceCount->QuadPart - time) * 20;
        return ret;
    }
    BYTE jmpcode[] = { 0XFF, 0X25, 0X00, 0X00, 0X00, 0X00, 0X00 ,0X00 ,0X00 ,0X00 ,0X00 ,0X00 ,0X00 ,0X00 };
    //用于jmp到山寨函数
    int main()
    {
        LARGE_INTEGER time1;
        LARGE_INTEGER time2;
        g_Kernel32_QueryPerformanceCounter = GetProcAddress(GetModuleHandleA("Kernel32.dll"),"QueryPerformanceCounter");
        g_Ntdll_RtlQueryPerformanceCounter = GetProcAddress(GetModuleHandleA("ntdll.dll"), "RtlQueryPerformanceCounter");
        QueryPerformanceCounter(&time1);
        Sleep(1000);
        QueryPerformanceCounter(&time2);
        std::cout ntdll.RtlQueryPerformanceCounter }*/
        //原函数直接调用ntdll.RtlQueryPerformanceCounter
        *(DWORD64*)(jmpcode + 6) = (DWORD64)FakeQueryPerformanceCounter;
        VirtualProtect(QueryPerformanceCounter,14,PAGE_EXECUTE_READWRITE,&oldprotect);
        memcpy(g_Kernel32_QueryPerformanceCounter,jmpcode,14);
        VirtualProtect(QueryPerformanceCounter, 14, oldprotect, &oldprotect);
        do
        {
            QueryPerformanceCounter(&time1);
            Sleep(1000);
            QueryPerformanceCounter(&time2);
            std::cout OriFunc;
        auto name = PsGetProcessImageFileName(PsGetCurrentProcess());
        auto status = pOldFunc(PerformanceCounter, PerformanceFrequency);
        if (strstr(name, "test") != NULL)
        {
            DPRINT("FakeNtQueryPerformanceCounter\n");
            PerformanceCounter->QuadPart = time.QuadPart + (PerformanceCounter->QuadPart - time.QuadPart) * 2;
        }
        return status;
    }
    void Unload(PDRIVER_OBJECT driverObject)
    {
        UNREFERENCED_PARAMETER(driverObject);
        InstallInlineHook(g_NtQueryPerformanceCounter);
        DPRINT("[+]QpcData %u\n", *(BYTE*)(&SharedUserData->QpcData));
        *(BYTE*)(&SharedUserData->QpcData) = *(BYTE*)(&SharedUserData->QpcData) | 1;
        DPRINT("[+]QpcData %u\n", *(BYTE*)(&SharedUserData->QpcData));
        DPRINT("Unload!\n");
    }
    EXTERN_C NTSTATUS DriverEntry(const PDRIVER_OBJECT driverObject, const PUNICODE_STRING registryPath) {
        UNREFERENCED_PARAMETER(driverObject);
        UNREFERENCED_PARAMETER(registryPath);
        DPRINT("[+]QpcData %u\n", *(BYTE*)(&SharedUserData->QpcData));
        *(BYTE*)(&SharedUserData->QpcData) = *(BYTE*)(&SharedUserData->QpcData) & 0xFFFE;
        DPRINT("[+]QpcData %u\n", *(BYTE*)(&SharedUserData->QpcData));
        g_NtQueryPerformanceCounter = reinterpret_cast( GetSystemServiceDescriptorTableFunction(49));
        InstallInlineHook(g_NtQueryPerformanceCounter,FakeNtQueryPerformanceCounter);
        driverObject->DriverUnload = Unload;
        return STATUS_SUCCESS;
    }
验证程序
    int main()
    {
        LARGE_INTEGER time1{};
        LARGE_INTEGER time2{};
        do
        {
            QueryPerformanceCounter(&time1);
            Sleep(1000);
            QueryPerformanceCounter(&time2);
            std::cout  uf nt!NtQueryPerformanceCounter
    nt!NtQueryPerformanceCounter:
    fffff805`5acac4c0 48895c2408      mov     qword ptr [rsp+8],rbx
    fffff805`5acac4c5 57              push    rdi
    fffff805`5acac4c6 4883ec20        sub     rsp,20h
    fffff805`5acac4ca 488bda          mov     rbx,rdx //;rbx PLARGE_INTEGER pPerformanceFrequency
    fffff805`5acac4cd 488bf9          mov     rdi,rcx //;rdi PLARGE_INTEGER pPerformanceCounter
    fffff805`5acac4d0 488364244000    and     qword ptr [rsp+40h],0
    fffff805`5acac4d6 65488b042588010000 mov   rax,qword ptr gs:[188h] //;_ethread
    fffff805`5acac4df 80b83202000000  cmp     byte ptr [rax+232h],0 //;+0x232 PreviousMode     : Char
    fffff805`5acac4e6 0f840a601800    je      nt!NtQueryPerformanceCounter+0x186036 (fffff805`5ae324f6)
进入NtQueryPerformanceCounter后，系统或获取当前线程PreviousMode，如果是KernelMode就跳到nt!NtQueryPerformanceCounter+0x186036处执行，否则接着执行。
    //KernelMode和UserMode都有这操作。
    //  LARGE_INTEGER NewPerformanceFrequency = {0};
    //  LARGE_INTEGER ret = KeQueryPerformanceCounter(&NewPerformanceFrequency);
    //    *pPerformanceCounter = ret;
    //    if(pPerformanceFrequency != 0)
    //        pPerformanceFrequency = &NewPerformanceFrequency;
    //    return STATUS_SUCCESS;
    nt!NtQueryPerformanceCounter+0x186036:
    fffff805`5ae324f6 488d4c2440      lea     rcx,[rsp+40h]
    fffff805`5ae324fb e84064acff      call    nt!KeQueryPerformanceCounter (fffff805`5a8f8940)
    fffff805`5ae32500 488907          mov     qword ptr [rdi],rax
    fffff805`5ae32503 4885db          test    rbx,rbx
    fffff805`5ae32506 0f8447a0e7ff    je      nt!NtQueryPerformanceCounter+0x93 (fffff805`5acac553)
    nt!NtQueryPerformanceCounter+0x18604c:
    fffff805`5ae3250c 488b442440      mov     rax,qword ptr [rsp+40h]
    fffff805`5ae32511 488903          mov     qword ptr [rbx],rax
    fffff805`5ae32514 e93aa0e7ff      jmp     nt!NtQueryPerformanceCounter+0x93 (fffff805`5acac553)
当PreviousMode ==
UserMode时会触碰到用户缓冲区，必须用结构化异常处理探测通过参数传过来的两个用户地址是否可写，避免操作不合法的用户缓冲区地址导致蓝屏。在try
except中执行了与nt!NtQueryPerformanceCounter+0x186036相同的处理——调用KeQueryPerformanceCounter。
    nt!NtQueryPerformanceCounter+0x2c:
    fffff805`5acac4ec 40f6c703        test    dil,3
    fffff805`5acac4f0 7559            jne     nt!NtQueryPerformanceCounter+0x8b (fffff805`5acac54b)
    nt!NtQueryPerformanceCounter+0x32:
    fffff805`5acac4f2 48ba0000ffffff7f0000 mov rdx,7FFFFFFF0000h
    fffff805`5acac4fc 488bca          mov     rcx,rdx
    fffff805`5acac4ff 483bfa          cmp     rdi,rdx
    fffff805`5acac502 480f42cf        cmovb   rcx,rdi
    fffff805`5acac506 8a01            mov     al,byte ptr [rcx]
    fffff805`5acac508 8801            mov     byte ptr [rcx],al
    fffff805`5acac50a 8a4107          mov     al,byte ptr [rcx+7]
    fffff805`5acac50d 884107          mov     byte ptr [rcx+7],al
    fffff805`5acac510 4885db          test    rbx,rbx
    fffff805`5acac513 7514            jne     nt!NtQueryPerformanceCounter+0x69 (fffff805`5acac529)
    nt!NtQueryPerformanceCounter+0x55:
    fffff805`5acac515 488d4c2440      lea     rcx,[rsp+40h]
    fffff805`5acac51a e821c4c4ff      call    nt!KeQueryPerformanceCounter (fffff805`5a8f8940)
    fffff805`5acac51f 488907          mov     qword ptr [rdi],rax
    fffff805`5acac522 4885db          test    rbx,rbx
    fffff805`5acac525 751a            jne     nt!NtQueryPerformanceCounter+0x81 (fffff805`5acac541)
    nt!NtQueryPerformanceCounter+0x67:
    fffff805`5acac527 eb2a            jmp     nt!NtQueryPerformanceCounter+0x93 (fffff805`5acac553)
    nt!NtQueryPerformanceCounter+0x69:
    fffff805`5acac529 f6c303          test    bl,3
    fffff805`5acac52c 751d            jne     nt!NtQueryPerformanceCounter+0x8b (fffff805`5acac54b)
    nt!NtQueryPerformanceCounter+0x6e:
    fffff805`5acac52e 483bda          cmp     rbx,rdx
    fffff805`5acac531 480f42d3        cmovb   rdx,rbx
    fffff805`5acac535 8a02            mov     al,byte ptr [rdx]
    fffff805`5acac537 8802            mov     byte ptr [rdx],al
    fffff805`5acac539 8a4207          mov     al,byte ptr [rdx+7]
    fffff805`5acac53c 884207          mov     byte ptr [rdx+7],al
    fffff805`5acac53f ebd4            jmp     nt!NtQueryPerformanceCounter+0x55 (fffff805`5acac515)
    nt!NtQueryPerformanceCounter+0x81:
    fffff805`5acac541 488b442440      mov     rax,qword ptr [rsp+40h]
    fffff805`5acac546 488903          mov     qword ptr [rbx],rax