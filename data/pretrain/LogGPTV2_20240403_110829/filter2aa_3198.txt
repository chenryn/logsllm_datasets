### Pin2pwn: How to Root an Embedded Linux Box with a Sewing Needle
**Presenter:** Brad Dixon - Carve Systems  
**Event:** DEF CON 24

#### Key Points
- **Effectiveness:** It works.
- **Ease of Use:** Simple and easy to execute.
- **Teachability:** Can be taught to others.
- **Dramatic Impact:** Highly dramatic and visually impressive.

**"USEFUL NOVELTY"**
- **Risks:** Potentially risky and can cause damage.
- **Methodology:** Crude and may be redundant in some cases.

#### Demonstration
- A live demonstration will be provided to illustrate the technique.

#### Prior Art
- There is a significant body of work on fault injection and glitching at the IC level, particularly for secure processors.
- Recent system-level applications include:
  - **2004:** WRT54 "Bricked Router" recovery, documented by mbm.
  - **Pen Test Partners Blog Post:** "How to Hack the Hudl – We give Rockchip a good seeing to."
  - **Kevin2600's Work:** "WINKHUB Side Channel Attack."

#### Objectives
- **When Effective:** Conditions under which this attack can be effective.
- **Why it Works:** The underlying principles that make this attack possible.
- **Defensive Measures:** Strategies to defend against this type of attack.

#### Risks to Hardware
- **Potential Damage:** Although I have not yet destroyed hardware, this method involves the abuse of semiconductor devices.
- **Precaution:** Only use this technique on equipment you can afford to lose.
- **Alternatives:** Depending on the specific hardware, there may be safer and more reliable options. Consider these first.

#### Generic Networked Device Product Design
- **Attack Sequence:**
  1. Serial Interface
  2. JTAG Interface
  3. Other Interfaces
  4. Flash to CPU Interface

**Device Architecture:**
- **CPU**
- **Flash Memory**
- **Ethernet**
- **Memory**
- **Serial Port**
- **JTAG Port**
- **Other I/O Ports**
- **Parallel or SPI Flash**

**Target Area:**
- **Poke here** (indicated area)

#### Why Does This Work?
- **Disruption of Boot Chain:** Introduce a transient fault to disrupt the boot sequence.
- **Activation of Failure Path:** Trigger an unexpected failure path.

**Boot Process:**
- **Boot Loader**
- **Kernel Load to RAM**
- **Scan / Mount?**
- **Init / Start Application**

**Poke Timing:**
- **Now…** (during boot loader)
- **Or Now…** (during kernel load)

#### Scenario #1: Exploitable U-Boot Configuration
1. No JTAG interface.
2. Custom "secure" boot process.
3. Attempt to load and boot kernel #1.
4. If kernel #1 fails, attempt to load and boot kernel #2.
5. If both kernels fail, return to the U-Boot prompt.

#### Scenario #2: Exploitable Init Configuration
- `/bin/init` reads `/etc/inittab`.
- `/bin/init` runs `/etc/rc`.
- `/etc/rc` starts the application in the foreground.
- The application presents a login prompt with unknown credentials.
- **BUT…** if the application fails to load, `/bin/init` runs `/bin/sh`.

#### Lab Example
- **FT232R Chip:**
  - **IOH (High-Level Output Current):** 2mA
  - **Imax (Maximum Current):** 24mA

#### How To
- **Survey Hardware:**
  - Identify ports to monitor the boot process.
  - Consult datasheets.
  - Inspect failure modes, if possible.
  - Determine boot timing.

- **Prepare:**
  - Select pins to poke.
  - Obtain timing assistance.
  - Perform the poking.
  - May require multiple attempts.
  - Power off between tests.

- **Poking:**
  - Monitor for unusual behavior, such as:
    - Serial traffic
    - Fallback boot configurations
    - Reactivated JTAG
    - New network ports
  - Sometimes, you get lucky!

#### Pwn?
- **Defense: FAIL CLOSED**
  - **Test Failure Paths:** Ensure your system handles transient hardware failures.
  - **Modify Boot Loaders:** Configure boot loaders to reboot at the end of the automated boot sequence.
  - **Caution with Debug Modes:** Be cautious about shipping "fail to debug mode" features in production configurations.

**Thank You!**