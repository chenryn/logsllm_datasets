On index 4 (0-based) we have 1 vs 3 so we have to move this student.
On index 5 (0-based) we have 3 vs 4 so we have to move this student.
Example 2:
Input: heights = [5,1,2,3,4]
output: 5
Example 3:
Input: heights = [1,2,3,4,5]
output: 0
Constraints:
●1  x {
if grumpy[1eft] == 1 {
customer] -= customers[left]
left++
if customerl > maxCustomerl {
maxCustomerl = customer1
---
## Page 1004
return maxCustomerl + customer0
//解法二滑动窗口暴力版
func maxSatisfiedl(customers []int, grumpy []int, x int) int {
left, right, res :=0,-1, 0
for left  end {
if grumpy[i] == 0{
sum += customers[i]
}else{
sum += customers[i]
return sum
1054.DistantBarcodes
题目
In a warehouse, there is a row of barcodes, where the i -th barcode is barcodes [i] .
Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer,
and it is guaranteed an answer exists.
Example 1:
---
## Page 1005
Input: [1,1,1,2,2,2]
output: [2,1,2,1,2,1]
Example 2:
Input: [1,1,1,1,2,2,3,3]
output: [1,3,1,3,2,1,2,1]
Note:
1.1= 0 11 j >= 0 11 carry != 0; {
if i >= 0 {
carry += arr1[i]
i --
if j >= 0 {
carry += arr2[j]
j--
---
## Page 1009
ans = 
append([]int{carry & 1}, ans...)
carry =
-(carry >> 1)
foridx，num=rangeans{//去掉前导0
if num != 0 {
return ans[idx:]
3
return []int{0}
//解法二标准的模拟，但是这个方法不能AC，因为测试数据超过了64位，普通数据类型无法存储
func addNegabinaryl(arrl []int, arr2 []int) []int {
return intToNegabinary(negabinaryToInt(arrl) + negabinaryToInt(arr2))
}
func negabinaryToInt(arr []int) int {
if 1en（arr) == 0 {
return 0
res := 0
for i := 0; i matriz[]
0
闭区间，所需要取左边界左边的和）。经过这样的处理，列方向的维度就被我们拍扁了。
·再来看看行方向的和，现在每一列的和都可以通过区间相减的方法得到。那么这道题就变成了第1
题TwoSum的问题了。TwoSum问题只需要O(n)的时间复杂度求解，这一题由于是二维的，所
以两个列的边界还需要循环，所以最终优化下来的时间复杂度是O（n^3)。计算presum可以直接
用原数组，所以空间复杂度只有一个O（n）的字典。
·类似思路的题目有第560题，第304题。
代码
package leetcode