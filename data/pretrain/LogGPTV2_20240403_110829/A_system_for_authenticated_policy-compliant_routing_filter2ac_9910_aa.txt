title:A system for authenticated policy-compliant routing
author:Barath Raghavan and
Alex C. Snoeren
A System for Authenticated Policy-Compliant Routing
Barath Raghavan and Alex C. Snoeren
University of California, San Diego
{barath,snoeren}@cs.ucsd.edu
ABSTRACT
Internet end users and ISPs alike have little control over how pack-
ets are routed outside of their own AS, restricting their ability to
achieve levels of performance, reliability, and utility that might oth-
erwise be attained. While researchers have proposed a number of
source-routing techniques to combat this limitation, there has thus
far been no way for independent ASes to ensure that such trafﬁc
does not circumvent local trafﬁc policies, nor to accurately deter-
mine the correct party to charge for forwarding the trafﬁc.
We present Platypus, an authenticated source routing system built
around the concept of network capabilities. Network capabilities
allow for accountable, ﬁne-grained path selection by cryptograph-
ically attesting to policy compliance at each hop along a source
route. Capabilities can be composed to construct routes through
multiple ASes and can be delegated to third parties. Platypus caters
to the needs of both end users and ISPs: users gain the ability to
pool their resources and select routes other than the default, while
ISPs maintain control over where, when, and whose packets tra-
verse their networks. We describe how Platypus can be used to ad-
dress several well-known issues in wide-area routing at both the
edge and the core, and evaluate its performance, security, and inter-
actions with existing protocols. Our results show that incremental
deployment of Platypus can achieve immediate gains.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: Packet-switching net-
works; C.2.2 [Network Protocols]: Routing protocols
General Terms
Design, Security, Performance, Measurement
Keywords
Source routing, Authentication, Overlay networks, Capabilities
1.
INTRODUCTION
Network operators and academic researchers alike recognize that
today’s wide-area Internet routing does not realize the full potential
of the existing network infrastructure in terms of performance [31],
reliability [1, 4, 20], or ﬂexibility [12, 17, 40]. While a number
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’04, Aug. 30–Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1-58113-862-8/04/0008 ...$5.00.
of techniques for intelligent, source-controlled path selection have
been proposed to improve end-to-end performance [31, 37], relia-
bility [1, 4, 20, 41], and ﬂexibility [10, 14, 17, 36, 40], they have
proven problematic to deploy due to concerns about security and
network instability. We attempt to address these issues in develop-
ing a scalable, authenticated, policy-compliant, wide-area source
routing protocol.
We argue that many of the deﬁciencies of today’s routing in-
frastructure are symptoms of the coupling of routing policy and
routing mechanism [33]. In particular, today’s primary wide-area
routing protocol, the Border Gateway Protocol (BGP), is extraordi-
narily difﬁcult to describe, analyze, or manage [24]. Autonomous
systems (ASes) express their local routing policy during BGP route
advertisement by affecting the routes that are chosen and exported
to neighbors. Similarly, ASes often adjust a number of attributes on
routes they accept from their neighbors according to local guide-
lines [27]. As a result, conﬁguring BGP becomes an overly com-
plex task, one for which the outcome is rarely certain. BGP’s com-
plexity affects Internet Service Providers (ISPs) and end users alike;
ISPs struggle to understand and conﬁgure their networks while end
users are left to wonder why end-to-end connectivity is so poor.
One approach to reducing this complexity is to consider an alter-
nate approach to routing, where the issues of connectivity discovery
and path selection are separated. Removing policy constraints from
route discovery presents an opportunity for end users and edge net-
works: routes previously hidden by overly conservative policy ﬁl-
ters can be revealed by ASes and traversed by packets. In this paper
we consider one such approach based upon source routing. The key
challenge becomes determining whether a particular source route
is appropriate. ASes have no incentive to forward arbitrary trafﬁc;
currently they only wish to forward trafﬁc for their customers or
peers. We argue, however, that this is simply a poor approxima-
tion of the real goal: ASes want to forward trafﬁc only if they are
compensated for it. Henceforth, we will consider trafﬁc policy com-
pliant at a particular point in the network if the AS can identify the
appropriate party to bill, and that party has been authorized by the
AS to use the portion of the network in question.
We present the design and evaluation of Platypus, a source rout-
ing system that, like many source-routing protocols before it, can
be used to implement efﬁcient overlay forwarding, select among
multiple ingress/egress routers, provide virtual AS multi-homing,
and address many other common routing deﬁciencies. The key ad-
vantage of Platypus is its ability to ensure policy compliance dur-
ing packet forwarding. Platypus enables packets to be stamped at
the source as being policy compliant, reducing policy enforcement
to stamp veriﬁcation. Hence, Platypus allows for management of
routing policy independent of both route export and path selection.
Platypus uses network capabilities, primitives that are placed
within individual packets, to securely attest to the policy compli-
ance of source routing requests. Network capabilities are i) trans-
Session 5: Secure Networksferable: an entity can delegate capabilities to others, ii) composable:
a packet may be accompanied by a set of capabilities, and iii) cryp-
tographically authenticated. Capabilities can be issued by ASes to
any parties they know how to bill. Each capability speciﬁes a de-
sired transit point (called a waypoint), a resource principal respon-
sible for the trafﬁc, and a stamp of authorization. By presenting a
capability along with a routing request, end users and ISPs express
their willingness to be held accountable for the trafﬁc, and the in-
cluded authorization ensures the policy compliance of the request.
In addition to its design, we also aim to understand how Platypus
might be deployed in today’s Internet. Incremental deployability is
key in our setting, as it would be unreasonable to expect ASes to
cooperate in the deployment of a system that affects local policy. To
this end, we present results from wide-area measurements and per-
formance evaluation of a prototype UNIX-based Platypus router,
which indicate that incremental deployment of Platypus is feasible
and may yield substantial beneﬁt even using only a few routers.
2. OVERVIEW & APPLICATIONS
It is well known that multiple paths often exist between any two
points in today’s Internet. The central tenet of any source-routing
scheme is that no single route will be best for all parties. Instead,
sources should be empowered to select their own routes according
to whatever criteria they determine. Protocols for efﬁcient wide-
area route discovery and selection, however, are beyond the scope
of this paper. We assume that the network is conﬁgured (using BGP,
for example) with a set of default routes and that certain motivated
parties become aware of alternative paths, either through active
probing [4, 35] or route discovery services [26]. Platypus builds
on this basic infrastructure, allowing entities to select paths other
than the default. Packets may specify a set of waypoints to be tra-
versed on the way to a destination, but are not required to specify
each router along the path. A source-routed packet is forwarded us-
ing default paths between the speciﬁed waypoints; an end-to-end
path is therefore a concatenation of default paths.
Platypus is designed to be deployed selectively by ASes at choice
locations in their networks. To support incremental deployment,
Platypus waypoints are speciﬁed using routable IP addresses. When
source routing a packet, the routing entity, which may be an end
host or a device inside the network, encapsulates the payload and
replaces the original destination IP address of the packet with the
address of the ﬁrst waypoint. The original destination IP address is
stored in the packet for replacement at the last waypoint. When a
Platypus packet arrives at a waypoint, the router updates the Platy-
pus headers and forwards the packet on to the next waypoint.
2.1 Sample applications
We motivate the design of Platypus by describing several possi-
ble applications below. These examples are meant to be illustrative,
not necessarily comprehensive.
2.1.1 Efﬁcient overlay routing/On-demand transit
Consider the partial network topology shown in Figure 1. Nodes
A, B, and C are all willing to cooperate to forward each other’s
trafﬁc. Assume that A wishes to send a packet to B, but the default
route A → R3 → R4 → B is unsatisfactory, perhaps because
the link R3 ↔ R4 is congested or down. With prior overlay sys-
tems [4], A could use C as a transit point by tunneling its trafﬁc
directly to C, who would then forward it along to B. While effec-
tive at avoiding the bad link, this route is clearly sub-optimal for all
involved, since:
1. C is forced to forward each packet itself, consuming both
its bandwidth (in both directions) and processor resources.
A
R3
R1
R5
R2
R6
R4
B
R7
R8
C
Figure 1: A simple network topology. Hosts A, B, and C all
have different ISPs.
It would prefer that R8 forward the trafﬁc instead; likewise,
R8 would prefer that R7 forward the trafﬁc.
2. Any path from A to B through R7 is likely suboptimal unless
the R5 ↔ R6 link is congested.
3. If avoiding R3 ↔ R4 is the objective, an alternate route
exists using the R1 ↔ R2 link. If C’s ISP also owns R1 and
R2, C should be able to authorize use of the link R1 ↔ R2.
The ﬁrst issue could be addressed by traditional source-routing
schemes, requiring that A specify the route R3 → R5 → R7 →
R6 → R4 → B. The challenge is in communicating to C’s ISP
that such a route request is reasonable. In this case, assuming C’s
ISP is not a transit provider, it is permissible only because C is a
customer of the ISP and is willing to be charged for A’s trafﬁc.
With existing source-routing mechanisms, an AS cannot determine
whether a forwarding request complies with local policy, and, if so,
who to charge for the service. Currently, an AS assumes that pack-
ets should arrive at its border only if it advertised a route to their
destinations. In our example, a packet destined for B should not
arrive at R5 from R3; it should go directly to R4. Source-routed
packets can obviously be made to explicitly transit any AS, violat-
ing this precondition. While ISPs can (and do) use ﬁlters to prevent
unauthorized trafﬁc from entering their network, ﬁlters can only
act upon information contained within a packet—source and des-
tination addresses, protocol, type of service, etc.—and current net-
work location. These attributes are insufﬁcient to determine policy
compliance or the responsible party in this case. Nothing about the
source-routed packet from A to B indicates C’s cooperation (and
resulting policy compliance).
In Platypus, C, by virtue of being a customer of its ISP, may
have authority to source route through any of the ISP’s routers. In
that case, C’s ISP would issue C a capability and a secret key that
can be used to stamp packets. The capability would name C as
the resource principal—the party responsible for all trafﬁc bearing
the capability. Platypus ensures the policy compliance of a given
source route by requiring that source-routed packets contain a ca-
pability for each waypoint in a packet’s source route. Because the
secret key needed to stamp packets is known only to the indicated
resource principal (or its associates), properly stamped packets cer-
tify their policy compliance and allow waypoints to appropriately
account for usage.
We posit that ASes conduct a priori negotiations with customers
and each other to determine mutually agreeable policies about who
may source route trafﬁc through which waypoints (similar to to-
day’s peering agreements [27]). Efﬁciently describing or construct-
ing such policies is a complex problem on its own; we do not dis-
cuss it here. Instead, we assume the output of this process is a set of
rights which can be encoded as a matrix of binary entries: for each
waypoint in the network, a given resource principal may or may not
forward trafﬁc through it. Capabilities expire periodically and can
be revoked, allowing ASes to dynamically update their policies.
Returning to our example, C could transfer its capability to A,
allowing A to construct a source route that can alleviate all three
issues, depending on the waypoint speciﬁed in the capability. If the
capability speciﬁes R7 as a waypoint, the ﬁrst problem is solved.
If, on the other hand, the waypoint simply refers to any router
within C’s ISP, the second problem is addressed automatically by
the intra-AS routing protocol, which forwards the packet along the
most efﬁcient route from R5 (which would serve as the waypoint).
Finally, if C were to request a capability speciﬁcally naming R1 as
a next hop, even the third issue can be addressed.
While we have described A, B, and C as end hosts for simplic-
ity, Platypus is designed to allow in-network stamping. Hence, each
of these entities could correspond to entire ASes, allowing the ex-
ample to be recast as a type of secondary transit, where C—a stub
domain—can resell its transit privileges to other, non-adjacent stub
domains without prior involvement of its provider.
2.1.2 Preferential egress points
Continuing to focus on ISPs, we observe that it is often the case
that ISPs would like to select egress peering points based upon the
peer injecting the trafﬁc. However, since multiple upstream ASes
often peer at the same ingress point of an ISP’s network, it can be
difﬁcult to separate an individual AS’s trafﬁc to perform selective
forwarding. Currently the only effective means of specifying egress
points based upon upstream AS is through inter-provider MPLS,
which to our knowledge is rarely deployed. Platypus can address
this need, requiring cooperation only between the peering ASes.
Upstream ASes can be issued capabilities with waypoints corre-
sponding to the desired egress routers. These ASes stamp trafﬁc
with the appropriate capability at their peering router, thereby di-
recting their trafﬁc to the appropriate egress router.
2.1.3 Preferential ingress points
Multi-homed stub ASes often select multiple upstream providers
and send different trafﬁc through each depending on network con-
ditions and destination—so-called policy routing. Unfortunately, a
stub AS remains at the mercy of its upstream providers to con-
trol how incoming trafﬁc arrives; there currently exists no widely
deployed mechanism to affect ingress points [1]. Using Platypus,
however, an AS could delegate multiple capabilities naming way-
points corresponding to its different upstream providers. Just as
with toll-free phone numbers, a stub AS may be willing to be the re-
source principal responsible for incoming trafﬁc if it can affect how
that incoming trafﬁc arrives. While the design of a mechanism for
broadcasting capabilities and associated secret keys is outside the
scope of this paper (although likely as simple as leveraging DNS
or HTTP), Section 4.3 details how capabilities can be restricted to
only allow trafﬁc to be sent to a speciﬁed destination.
2.1.4 Virtual multi-homing
A stub AS with a single upstream connection is currently limited
to the default routes of its provider. Without multi-homing, an AS
is incapable of selecting backbone providers to carry its trafﬁc—it
must use the backbone selected by its upstream AS. With Platypus,
however, a stub AS could request capabilities from providers of its
choice, and place these on its out-bound trafﬁc indicating which
of its regional provider’s upstream backbones to use for particu-
lar trafﬁc—in effect making the AS virtually multi-homed. Thus, a
stub AS could implement its own policy routing without the need
for any conﬁguration on the part of its upstream provider.
As a concrete example, suppose an AS, X, wishes to choose be-
tween two indirectly upstream providers A and B. X’s ISP, Y , need
not provide Platypus support. At the X ↔ Y gateway, X classiﬁes
trafﬁc it wishes to route through either A or B and stamps them
with appropriate capabilities. Though Y doesn’t support Platypus
forwarding, it faithfully delivers packets to A’s or B’s edge routers,
which are aware of Platypus headers, and, thus, deliver the packets
as X desired. In such a scenario A and B clearly have a ﬁnancial
motivation to provide such a service since they can bill X, while
X beneﬁts by having choice in its indirect upstream providers, po-
tentially providing fail-over or optimized routing. X’s provider, Y ,
has no disincentive to allow Platypus-enabled packets to traverse
its network since it has an already established relationship with X.
2.2 Challenges
As these examples demonstrate, source routing can be used to
address a number of issues with the existing routing infrastructure.
We believe, therefore, that the unavailability or limited deployment
of source routing protocols stems not from a lack of utility, but,
instead, from the omission of two key features: a mechanism for
accountable and composable authorization, and the ability for ISPs
to effectively manage link utilization. The need for authorization
should be clear from the examples. The relationship to load man-
agement, however, is a bit more subtle. Recent research indicates
that self-interested source routing can achieve performance gains
even in wide deployment, but raises concerns about possible neg-
ative interactions with trafﬁc engineering—highly reactive sources
may make existing trafﬁc engineering mechanisms ineffective by
constantly changing ﬁne-grained route requests [28].
3. NETWORK CAPABILITIES
Platypus addresses both of these issues through the use of net-
work capabilities. Abstractly, a network capability is made up of
two ﬁelds: a waypoint and a resource principal identiﬁer. The way-
point speciﬁes a topological network location through which the