acts as a development environment of sorts.  Perl Composer
( http://perlcomposer.sourceforge.net/ ) is an \s-1IDE\s0 for Perl/Tk
\&\s-1GUI\s0 creation.
.PP
In addition to an editor/IDE you might be interested in a more
powerful shell environment for Win32.  Your options include
.IP "Bash" 4
.IX Item "Bash"
from the Cygwin package ( http://sources.redhat.com/cygwin/ )
.IP "Ksh" 4
.IX Item "Ksh"
from the \s-1MKS\s0 Toolkit ( http://www.mks.com/ ), or the Bourne shell of
the U/WIN environment ( http://www.research.att.com/sw/tools/uwin/ )
.IP "Tcsh" 4
.IX Item "Tcsh"
ftp://ftp.astron.com/pub/tcsh/ , see also
http://www.primate.wisc.edu/software/csh\-tcsh\-book/
.IP "Zsh" 4
.IX Item "Zsh"
ftp://ftp.blarg.net/users/amol/zsh/ , see also http://www.zsh.org/
.PP
\&\s-1MKS\s0 and U/WIN are commercial (U/WIN is free for educational and
research purposes), Cygwin is covered by the \s-1GNU\s0 Public License (but
that shouldn't matter for Perl use).  The Cygwin, \s-1MKS\s0, and U/WIN all
contain (in addition to the shells) a comprehensive set of standard
\&\s-1UNIX\s0 toolkit utilities.
.PP
If you're transferring text files between Unix and Windows using \s-1FTP\s0
be sure to transfer them in \s-1ASCII\s0 mode so the ends of lines are
appropriately converted.
.PP
On Mac \s-1OS\s0 the MacPerl Application comes with a simple 32k text editor
that behaves like a rudimentary \s-1IDE\s0.  In contrast to the MacPerl Application
the \s-1MPW\s0 Perl tool can make use of the \s-1MPW\s0 Shell itself as an editor (with
no 32k limit).
.IP "BBEdit and BBEdit Lite" 4
.IX Item "BBEdit and BBEdit Lite"
are text editors for Mac \s-1OS\s0 that have a Perl sensitivity mode
( http://web.barebones.com/ ).
.IP "Alpha" 4
.IX Item "Alpha"
is an editor, written and extensible in Tcl, that nonetheless has
built in support for several popular markup and programming languages
including Perl and \s-1HTML\s0 ( http://alpha.olm.net/ ).
.PP
Pepper and Pe are programming language sensitive text editors for Mac
\&\s-1OS\s0 X and BeOS respectively ( http://www.hekkelman.com/ ).
.Sh "哪儿有 vi 用的 Perl 宏？"
.IX Subsection "Where can I get Perl macros for vi?"
For a complete version of Tom Christiansen's vi configuration file,
see http://www.cpan.org/authors/Tom_Christiansen/scripts/toms.exrc.gz ,
the standard benchmark file for vi emulators.  The file runs best with nvi,
the current version of vi out of Berkeley, which incidentally can be built
with an embedded Perl interpreter\*(--see http://www.cpan.org/src/misc/ .
.Sh "给 emacs用的 perl模式又要去哪抓呢?"
.IX Subsection "Where can I get perl-mode for emacs?"
从大约 Emacs 19.22版 (version 19 patchlevel 22)起，已内含了 perl-mode.el及 perl 除虫器的支援。它们应该会和标准的 Emacs 19版一起出货。
.PP
在 perl原始码的目录下，你会找到一个叫作 ``emacs'' 的目录，里面包括一个 cperl-mode 可以把程式中的关键字上色、提供内文相关的协助以及其它方便的功能。
.PP
注意：``main'foo''（其中的单引号）会让 emacs的 perl-mode 出问题，并且会弄乱内 缩 (indentation) 与高亮 (hilighting)。不过你本来就该用 ``main::foo''的 （译者按： main'foo 是表示模组或 package的旧式写法；新式的 [perl5的]写法是 main::foo）。
.Sh "如何在 Perl里使用 curses?"
.IX Subsection "How can I use curses with Perl?"
The Curses module from \s-1CPAN\s0 provides a dynamically loadable object
module interface to a curses library.  A small demo can be found at the
directory http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz ;
this program repeats a command and updates the screen as needed, rendering
\&\fBrep ps axu\fR similar to \fBtop\fR.
.Sh "X或 Tk如何与 Perl配合呢?"
.IX Subsection "How can I use X or Tk with Perl?"
Tk 模块是一个完全以 Perl 为基础，面向对象的接口，让你不用学 Tcl也可以使用 Tk工具组。Sx则是 Athena Widget set专用的介面。两者都可在 CPAN取得。参见分类 http://www.cpan.org/modules/by\-category/08_User_Interfaces/
.PP
Invaluable for Perl/Tk programming are the Perl/Tk \s-1FAQ\s0 at
http://w4.lns.cornell.edu/%7Epvhp/ptk/ptkTOC.html , the Perl/Tk Reference
Guide available at
http://www.cpan.org/authors/Stephen_O_Lidie/ , and the
online manpages at
http://www\-users.cs.umn.edu/%7Eamundson/perl/perltk/toc.html .
.Sh "如何不靠 CGI或 Tk 帮助作出简单的目录（选单）?"
.IX Subsection "How can I generate simple menus without using CGI or Tk?"
http://www.cpan.org/authors/id/SKUNZ/perlmenu.v4.0.tar.gz
是个以 curses为基础的模组，可以达成你的要求。
.Sh "如何让我的 Perl程式跑得更快些?"
.IX Subsection "How can I make my Perl program run faster?"
最好是能设计一个较好的演算法 (algorithm)，这通常会让程式有大不相同的表现。Jon Bentley's book \fIProgramming Pearls\fR (没有拼写错误!) 中有些你或许想知道的增进效率小技巧。
Advice on benchmarking boils down to: benchmark
and profile to make sure you're optimizing the right part, look for
better algorithms instead of microtuning your code, and when all else
fails consider just buying faster hardware.  You will probably want to
read the answer to the earlier question ``How do I profile my Perl
programs?'' if you haven't done so already.
.PP
其它方法包括自动载入较少使用的 Perl 程式码。请参看标准 perl 套件中的 AutoSplit及 AutoLoader模组的用法。或当你能断定程式执行效率的瓶颈在何处时，用 C来写那个部份，就像用组合语言来撰写 C程式的瓶颈部份一样。与此法相近的是使用以 C撰写瓶 颈部份的模组 (例如 CPAN中的 PDL 模组)。
.PP
如果你目前是将你的 perl直译器动态连结到 libc.so的话，重新作一份静态连结到 libc.a的 perl直译器可以提高 10-25%的执行效能。虽然这会使你的 perl直译器变得更胖，但你的 Perl程式 (及程式设计者) 或许会因此而感谢你。详情请参考 perl标准套件原始码版本中的 INSTALL 档案。
.PP
使用 undump程式把编译后的档案格式存到硬碟里以加快执行的速度已经是老掉牙的手法了。它已不再是个可行的方法，因为这方法只有几种平台能用，况且它终究不是个治本之 道。
.Sh "如何让我的 Perl 程序少用一些内存？"
.IX Subsection "How can I make my Perl program take less memory?"
当问题变成时间与空间的交易时， Perl 几乎总是用记忆体来帮忙解决问题。 Perl中的纯量 (Scalar) 耗掉的记忆体比 C中的字串形态还多，阵列又更多， 更别谈杂凑阵列了 (Hashes)。关于这一点，我们当然还有很多工作得作，近来发布的版本，已开始针对这些问题做改进了。例如， 5.004 版中， 重复的散列键 (duplicate hash keys) 由使用它的杂凑阵列共用，这样就不用再重新定份位置给它了。
.PP
在某些情况下，使用 substr()或 vec()来模拟数组有很大的好处。例如，一个有上千 个布林代数值的阵列将占用至少 20,000位元组的空间，但是它可以被转变为一个 125位元组的位元向量 (bit vector)以节省相当可观的记忆体。标准套件中的 Tie::SubstrHash模组也能够帮助特定形态的资料结构节省些记忆体。若你正在和一些特殊的资料结构奋战 (例如，矩阵)，用 C写的模组所耗掉的记忆体可能低于同功能并用 Perl写的模组。
.PP
另一件值得一试的是，查一下你的 Perl是以系统内的 malloc 还是 Perl内含的 malloc 编译起来的。不论是哪个，试着换成另一个，再看看这是否造成任何差别。关于 malloc的资讯可在 perl标准套件原始码版中的 INSTALL 档案找到。键入 \f(CW\*(C`perl \-V:usemymalloc\*(C'\fR. 就可以知道你是否在使用 perl的 malloc。
.PP
Of course, the best way to save memory is to not do anything to waste
it in the first place. Good programming practices can go a long way
toward this:
.IP "* Don't slurp!" 4
.IX Item "Don't slurp!"
Don't read an entire file into memory if you can process it line
by line. Or more concretely, use a loop like this:
.Sp
.Vb 6
\&        #
\&        # Good Idea
\&        #
\&        while () {
\&           # ...
\&        }
.Ve
.Sp
instead of this:
.Sp
.Vb 7
\&        #
\&        # Bad Idea
\&        #
\&        @data = ;
\&        foreach (@data) {
\&            # ...
\&        }
.Ve
.Sp
When the files you're processing are small, it doesn't much matter which
way you do it, but it makes a huge difference when they start getting
larger.
.IP "* Use map and grep selectively" 4
.IX Item "Use map and grep selectively"
Remember that both map and grep expect a \s-1LIST\s0 argument, so doing this:
.Sp
.Vb 1
\&        @wanted = grep {/pattern/} ;
.Ve
.Sp
will cause the entire file to be slurped. For large files, it's better
to loop:
.Sp
.Vb 3
\&        while () {
\&                push(@wanted, $_) if /pattern/;
\&        }
.Ve
.IP "* Avoid unnecessary quotes and stringification" 4
.IX Item "Avoid unnecessary quotes and stringification"
Don't quote large strings unless absolutely necessary:
.Sp
.Vb 1
\&        my $copy = "$large_string";
.Ve
.Sp
makes 2 copies of \f(CW$large_string\fR (one for \f(CW$copy\fR and another for the
quotes), whereas
.Sp
.Vb 1
\&        my $copy = $large_string;
.Ve
.Sp
only makes one copy.
.Sp
Ditto for stringifying large arrays:
.Sp
.Vb 4
\&        {
\&                local $, = "\en";
\&                print @big_array;
\&        }
.Ve
.Sp
is much more memory-efficient than either
.Sp
.Vb 1
\&        print join "\en", @big_array;
.Ve
.Sp
or
.Sp
.Vb 4
\&        {
\&                local $" = "\en";
\&                print "@big_array";
\&        }
.Ve
.IP "* Pass by reference" 4
.IX Item "Pass by reference"
Pass arrays and hashes by reference, not by value. For one thing, it's
the only way to pass multiple lists or hashes (or both) in a single
call/return. It also avoids creating a copy of all the contents. This
requires some judgment, however, because any changes will be propagated
back to the original data. If you really want to mangle (er, modify) a
copy, you'll have to sacrifice the memory needed to make one.
.IP "* Tie large variables to disk." 4
.IX Item "Tie large variables to disk."
For \*(L"big\*(R" data stores (i.e. ones that exceed available memory) consider
using one of the \s-1DB\s0 modules to store it on disk instead of in \s-1RAM\s0. This
will incur a penalty in access time, but that's probably better than
causing your hard disk to thrash due to massive swapping.
.Sh "把局部变量的引用返回是不安全的做法吗?"
.IX Subsection "Is it safe to return a reference to local or lexical data?"
这样是安全的，Perl的资源回收 (garbage collection)系统会解决此问题。
.PP
.Vb 4
\&    sub makeone {
\&        my @a = ( 1 .. 10 );
\&        return \e@a;
\&    }
.Ve
.PP
.Vb 3
\&    for ( 1 .. 10 ) {
\&        push @many, makeone();
\&    }
.Ve
.PP
.Vb 1
\&    print $many[4][5], "\en";
.Ve
.PP
.Vb 1
\&    print "@many\en";
.Ve
.Sh "我如何释放一个数组或散列以缩小我的程式尺寸?"
.IX Subsection "How can I free an array or hash so my program shrinks?"
你无法这么作。系统配置给程式的记忆体是覆水难收。这也是为何执行很长一段时间的程式有时会重新执行 (re-exec)它们自己的原因。