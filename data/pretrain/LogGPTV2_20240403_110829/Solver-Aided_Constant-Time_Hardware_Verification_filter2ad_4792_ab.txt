14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
// source : IF_pc ; sink : WB_reg ;
module mips_pipeline ( clk , rst );
input clk , rst ;
assign IF_pc4 = IF_pc + 32 ' d4 ;
assign IF_pcj = ID_Jmp
assign IF_pcn = M_PCSrc ? M_btgt
? ID_jaddr : IF_pc4 ;
: IF_pcj ;
assign ID_rs = ID_instr [ 25 : 21 ];
assign ID_rt = ID_instr [ 20 : 16 ];
rom32 IMEM ( IF_pc , IF_instr );
always @(*)
Stall = EX_MemRead &&
( EX_rt == ID_rs ||
EX_rt == ID_rt );
always @( posedge clk )
if ( rst )
ID_instr
 Mark 'rst' as PUBLIC? [Y/n]
The user either answers with Y indicating that rst should indeed be
considered public, or else responds n which tells Xenon to exclude
the variable from future consideration (i.e., not suggest it in future).
Suppose that we follow Xenon’s advice, and choose Y: this marks
rst public and re-starts Xenon for another verification attempt.
Step 2. Next, Xenon suggests marking M_PCSrc as public. Flag
M_PCSrc indicates whether the current instruction in the memory
stage contains an indirect jump. But whether an indirect jump is
executed depends on register values (i.e., M_PCSrc is set depending
on whether the output of the ALU is zero) and therefore, indirectly,
on the data memory. Assuming that M_PCSrc is public would lead to
assumptions about the memory which we wish to avoid. Hence, we
tell Xenon to exclude it in future verification attempts and restart
verification.
Step 3. Restarting verification causes Xenon to suggest candidate
variable IF_pc, the program counter of the fetch stage. We mark
IF_pc as public as this directly encodes the assumption that the
program’s control flow does not depend on secrets. Xenon restarts
the solver which proves that the program—under the inferred se-
crecy assumptions—executes in constant-time. This concludes the
verification process. In addition to the assumptions that rst and
IF_pc are public, Xenon also infers a set of usage assumptions that
detail the parts of the pipeline that have to be flushed on context
switches. These assumptions would otherwise have to be supplied
by the user as well.
Counterexamples. When synthesizing assumptions, Xenon inter-
nally computes a constant-time counterexample which contains the
set of variables that have lost the constant-time property earliest.
While the user can simply follow Xenon’s suggestions without
further investigating the root cause of the violation, we find that—if
the user chooses to do so—the counterexample often helps to fur-
ther understand why the circuit has become non constant-time. In
our example, Xenon returns as counterexample, variable ID_instr,
for all three interactions. Indeed, inspecting the parts of the circuit
where ID_instr is assigned focuses our attention on the relevant
parts of the circuit, that is, the conditional assignment of ID_instr
under rst (Line 19) and under Stall (Lines 22 and 28). We discuss
how Xenon computes counterexamples using artifacts extracted
from the failed proof attempt in § 4.1, and how Xenon uses them
to synthesize an optimal set of secrecy assumptions via a reduction
to integer linear programming in § 4.2.
2.4 Real-World Circuits Are Not Small
While Xenon’s solver-aided, interactive verification loop signifi-
cantly reduces the time the user has to spend on verification efforts,
large real-world circuits often also present a challenge for the solver.
This is because computing invariants and synthesizing assumptions
naively requires a whole-program analysis. Hence, efficiency cru-
cially depends on the size of the circuit we are analyzing.
Consider, for example, the AES-256 benchmark from [10]. Fig. 5
depicts the dependency graph of its modules, where each node
𝑚 represents a Verilog module, and we draw an edge between
modules 𝑚 and 𝑛, if 𝑚 instantiates 𝑛. Each edge is annotated with the
number of instantiations. Even though there are only ten modules,
the total number of module instantiations is 789. This, in turn,
causes a blowup in the size of code Xenon has to verify. Even
though the sum of #LOC of the modules is only 856, inlining module
instances causes this number to skyrocket to 135194 rendering both
assumption synthesis and verification all but intractable. (In fact,
Xenon does manage to verify the naive, inlined circuit, however, a
single verification run takes over 6 hours to complete).
Fortunately, we can avoid this blowup by exploiting the modu-
larity that is already apparent at the Verilog level. We illustrate
this process using module S from Figure 1.
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea432aes
7
6
1
13
exp𝐴
exp𝐵
final
one
1
1
4
4
4
S4
S
1
lookup
4
1
T
xS
Figure 5: Module dependency graph of the AES-256 benchmark.
1
2
3
4
5
6
7
8
9
10
11
module S4 ( clk , in , out );
input clk ;
input [ 31 :0] in ;
output [ 31 :0] out ;
wire [7:0]
out_0 , out_1 , out_2 , out_3 ;
S S_0 ( clk , in [ 31 : 24 ] , out_3 ),
S_1 ( clk , in [ 23 : 16 ] , out_2 ),
out_1 ),
S_2 ( clk , in [ 15 :8] ,
S_3 ( clk , in [7:0] ,
out_0 );
assign out = { out_3 , out_2 , out_1 , out_0 };
endmodule
Figure 6: Module from the AES benchmark.
Module Summaries. Since the value of out only depends on in,
we can characterize its timing behavior as follows: the module
output out is constant-time, if module input in is constant-time.
We can formalize this in the following module summary, which
Xenon computes automatically: 𝑐𝑡(in) ⇒ 𝑐𝑡(out). Instead of in-
lining the module, both assumption synthesis, and verification can
now use its summary thereby eschewing the code explosion. The
code in Figure 6 shows an instantiation of module S in module
S4. Instead of inlining S at its four instantiation sites S_0 to S_3,
Xenon uses the single module summary to compute a correctness
proof for the full AES circuit, which only takes 3 seconds.
3 MODULAR CONSTANT-TIME
VERIFICATION
We now formalize the concepts introduced in the overview. We
first review a formal definition of constant-time execution for hard-
ware circuits (§ 3.1) and its translation to Horn-clause verification
conditions, which we use to encode the verification task (§ 3.2). We
then modularize this naive encoding via summaries (§ 3.3). After
that, we discuss counterexamples and assumption synthesis (§ 4).
3.1 Defining Constant-Time Execution
Configurations. Configurations represent the state of a Verilog
computation. A configuration Σ ≜ (𝑃, 𝜎, 𝜃, 𝑐, 𝑡, Src) is made up of
a Verilog program 𝑃 (say, the processor in Figure 3), a store 𝜎, a
liveness map 𝜃, current clock cycle 𝑐 ∈ N, initial clock cycle 𝑡 ∈ N
and, finally, a set of sources Src ⊆ Vars. Store 𝜎 ∈ Vars → Z
maps variables Vars (registers and wires) to their current values;
map 𝜃 ∈ Vars → {⋆,•} maps variables to liveness-bits; cycle 𝑡
marks the starting-cycle of the computation we want to track and
finally, Src identifies its inputs.
Transition relation. Transition relation ⇝∈ (Σ × Σ) encodes a
standard Verilog semantics which defines how a configuration is
updated from one clock cycle to the next. We omit its definition, as
it is not needed for our purposes, but formal accounts can be found
in [50, 51, 91]. In addition to updating the store and current cycle,
the transition relation updates the liveness map 𝜃 by tracking which
variables are currently influenced by the computation started in 𝑡.
At initial cycle 𝑡, our transition relation starts a new computation