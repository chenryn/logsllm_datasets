    getObjectInstance(Object refInfo, Name name, Context nameCtx,
3
                        Hashtable environment)
4
    throws Exception
5
{
6
        // Use builder if installed
7
    ...
8
    // Use reference if possible
9
    Reference ref = null;
10
    if (refInfo instanceof Reference) {//满足
11
        ref = (Reference) refInfo;//复制
12
    } else if (refInfo instanceof Referenceable) {//不进入
13
        ref = ((Referenceable)(refInfo)).getReference();
14
    }
15
16
    Object answer;
17
18
    if (ref != null) {//进入此处
19
NamingManager.java
        String f = ref.getFactoryClassName();//函数名 ExecTest
20
        if (f != null) {
21
            //任意命令执行点1（构造函数、静态代码），进入此处
22
            factory = getObjectFactoryFromReference(ref, f);
23
            if (factory != null) {
24
                //任意命令执行点2（覆写getObjectInstance），
25
                return factory.getObjectInstance(ref, name, nameCtx,
26
                                                    environment);
27
            }
28
            return refInfo;
29
30
        } else {
31
            // if reference has no factory, check for addresses
32
            // containing URLs
33
34
            answer = processURLAddrs(ref, name, nameCtx, environment);
35
            if (answer != null) {
36
                return answer;
37
            }
38
        }
39
    }
40
static ObjectFactory getObjectFactoryFromReference(
1
    Reference ref, String factoryName)
2
    throws IllegalAccessException,
3
    InstantiationException,
4
    MalformedURLException {
5
    Class clas = null;
6
7
    //尝试从本地获取该class
8
    try {
9
            clas = helper.loadClass(factoryName);
10
    } catch (ClassNotFoundException e) {
11
        // ignore and continue
12
        // e.printStackTrace();
13
    }
14
    //如果不在本地classpath，从cosebase中获取class
15
    String codebase;
16
    if (clas == null &&
17
            (codebase = ref.getFactoryClassLocation()) != null) {
18
        //此处codebase是我们在恶意RMI服务端中定义的http://127.0.0.1:8081/
19
        try {
20
            //从我们放置恶意class文件的web服务器中获取class文件
21
            clas = helper.loadClass(factoryName, codebase);
22
        } catch (ClassNotFoundException e) {
23
        }
24
    }
25
    //实例化我们的恶意class文件
26
实例化会默认调⽤构造⽅法、静态代码块。
上⾯的例⼦就是调⽤了构造⽅法完成任意代码执⾏。
六、Weblogic 关于JRMP⼀系列绕过
最后到从CVE-2017-3248到CVE-2018-3245
3245RemoteObject类的⼦类都可以
七、JEP290
built-in ﬁlters 内置过滤器
专⻔⽤于RMI，现在习惯⽤ Distributed Garbage Collection (DGC) 
jdk 9 也引进了⼀个内置的过滤器，配置这个过滤器主要⽤于RMI和DGC 。RMI Registry 和 
DGC的内置过滤器是⽩名单的形式，⽩名单包含了服务器能够执⾏的类。
JEP290中对RMI设置了默认的过滤器（sun.rmi.registry.RegistryImpl#registryFilter)
1.JDK8u231 bypass
https://cert.360.cn/report/detail?id=add23f0eafd94923a1fa116a76dee0a1
想要在RMI中Bypass JEP290的限制，思路很明确，我们需要从上⾯⽩名单的类或者他们的⼦
类中寻找复写readObject利⽤点
yso中的JRMPClient是⾃动bypass了jep290
https://paper.seebug.org/1251/#bypass-jep290-rmi
绕过调⽤栈 可以看到有两个reobject
    return (clas != null) ? (ObjectFactory) clas.newInstance() : null;
27
}
28
2.利⽤本地类突破JDK⾼版本限制进⾏JNDI注⼊
在⾼版本中（如：JDK8u191以上版本）虽然不能从远程加载恶意的Factory，但是我们依然可
以在返回的Reference中指定Factory Class，这个⼯⼚类必须在受害⽬标本地的CLASSPATH
中。⼯⼚类必须实现 javax.naming.spi.ObjectFactory 接⼝，并且⾄少存在⼀个 
getObjectInstance() ⽅法。org.apache.naming.factory.BeanFactory 刚好满⾜条件并且存在
被利⽤的可能。org.apache.naming.factory.BeanFactory 存在于Tomcat依赖包中，所以使⽤
也是⾮常⼴泛。
Tomcat  ----> javax.el.ELProcessor
 IBM WebSphere ----> com.ibm.ws.webservices.engine.client.ServiceFactory ||  
com.ibm.ws.client.applicationclient.ClientJ2CCFFactory
https://www.jianshu.com/p/1f97328a104f
https://www.veracode.com/blog/research/exploiting-jndi-injections-java
3.利用LDAP返回序列化数据，触发本地Gadget
LDAP Server除了使⽤JNDI Reference进⾏利⽤之外，还⽀持直接返回⼀个对象的序列化数
据。如果Java对象的 javaSerializedData 属性值不为空，则客户端的 obj.decodeObject() ⽅法
就会对这个字段的内容进⾏反序列化。LDAP Server除了使⽤JNDI Reference进⾏利⽤之外，
还⽀持直接返回⼀个对象的序列化数据。如果Java对象的 javaSerializedData 属性值不为空，
则客户端的 obj.decodeObject() ⽅法就会对这个字段的内容进⾏反序列化。
需要利⽤⼀个本地的反序列化利⽤链（如CommonsCollections），然后可以结合Fastjson等漏
洞⼊⼝点和JdbcRowSetImpl进⾏组合利⽤
https://paper.seebug.org/942/#classreference-factory
https://github.com/kxcode/JNDI-Exploit-Bypass-Demo
⼋、⼀些协议的区分
https://blog.knownsec.com/2019/12/java-%E4%B8%AD-rmi%E3%80%81jndi%E3%8
0%81ldap%E3%80%81jrmp%E3%80%81jmx%E3%80%81jms%E9%82%A3%E4%BA%
9B%E4%BA%8B%E5%84%BF%EF%BC%88%E4%B8%8A%EF%BC%89/
RMI、JRMP、JNDI
readObject:431, ObjectInputStream (java.io)
1
executeCall:252, StreamRemoteCall (sun.rmi.transport)
2
invoke:161, UnicastRef (sun.rmi.server)
3
invokeRemoteMethod:227, RemoteObjectInvocationHandler (java.rmi.server)
4
invoke:179, RemoteObjectInvocationHandler (java.rmi.server)
5
createServerSocket:-1, $Proxy0 (com.sun.proxy)
6
newServerSocket:666, TCPEndpoint (sun.rmi.transport.tcp)
7
listen:335, TCPTransport (sun.rmi.transport.tcp)
8
exportObject:254, TCPTransport (sun.rmi.transport.tcp)
9
...
10
exportObject:346, UnicastRemoteObject (java.rmi.server)
11
reexport:268, UnicastRemoteObject (java.rmi.server)
12
readObject:235, UnicastRemoteObject (java.rmi.server)
13
Java远程⽅法调⽤，即Java RMI（Java Remote Method Invocation）是Java编程语⾔⾥，⼀
种⽤于实现远程过程调⽤的应⽤程序编程接⼝。它使客户机上运⾏的程序可以调⽤远程服务器上
的对象。远程⽅法调⽤特性使Java编程⼈员能够在⽹络环境中分布操作。RMI全部的宗旨就是尽
可能简化远程接⼝对象的使⽤。
Java远程⽅法协议（英语：Java Remote Method Protocol，JRMP）是特定于Java技术的、
⽤于查找和引⽤远程对象的协议。这是运⾏在Java远程⽅法调⽤（RMI）之下、TCP/IP之上的
线路层协议（英语：Wire protocol）。
Java命名和⽬录接⼝（Java Naming and Directory Interface，缩写JNDI），是Java的⼀个⽬
录服务应⽤程序接⼝（API），它提供⼀个⽬录系统，并将服务名称与对象关联起来，从⽽使得
开发⼈员在开发过程中可以使⽤名称来访问对象。
⽬前基于 JNDI 实现的⼏本为 rmi 与 ldap 的⽬录服务系统，构建 rmi 、ldap ⽐较常⽤的的⼯
具有 marshalsec 、ysoserial。
更多信息建议查阅Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事⼉（上）。
WebLogic RMI
WebLogic RMI是服务器框架的组成部分。它使Java客户端可以透明地访问WebLogic Server上
的RMI对象，这包括访问任何已部署到WebLogic的EJB组件和其他J2EE资源，它可以构建快
速、可靠、符合标准的RMI应⽤程序。当RMI对象部署到WebLogic群集时，它还集成了对负载
平衡和故障转移的⽀持。WebLogic RMI与Java RMI规范完全兼容，上⾯提到的动态加载加载功
能也是具有的，同时还提供了在标准Java RMI实现下更多的功能与扩展。
ORB与GIOP、IIOP
ORB全称（Object Request Broker）对象请求代理。ORB是⼀个中间件，他在对象间建⽴⼀个
CS关系，或者更简单点来说，就是⼀个代理。客户端可以很简单的通过这个媒介使⽤服务器对
象的⽅法⽽不需要关注服务器对象是在同⼀台机器上还是通过远程⽹络调⽤的。ORB截获调⽤
后负责找到⼀个对象以满⾜该请求。
GIOP全称（General Inter-ORB Protocol）通⽤对象请求协议，其功能简单来说就是CORBA⽤
来进⾏数据传输的协议。GIOP针对不同的通信层有不同的具体实现，⽽针对于TCP/IP层，其实
现名为IIOP（Internet Inter-ORB Protocol）。所以说通过TCP协议传输的GIOP数据可以称为
IIOP。
⽽ORB与GIOP的关系是GIOP起初就是为了满⾜ORB间的通信的协议。所以也可以说ORB是
CORBA通信的媒介。
CORBA
CORBA全称（Common ObjectRequest Broker Architecture）也就是公共对象请求代理体系
结构，是OMG（对象管理组织）制定的⼀种标准的⾯向对象应⽤程序体系规范。其提出是为了
解决不同应⽤程序间的通信，曾是分布式计算的主流技术。
⼀般来说CORBA将其结构分为三部分，为了准确的表述，我将⽤其原本的英⽂名来进⾏表述：
naming service
client side
servant side
这三部分组成了CORBA结构的基础三元素，⽽通信过程也是在这三⽅间完成的。我们知道
CORBA是⼀个基于⽹络的架构，所以以上三者可以被部署在不同的位置。servant side 可以理
解为⼀个接收 client side 请求的服务端；naming service 对于 servant side 来说⽤于服务⽅注
册其提供的服务，对于 client side 来说客户端将从 naming service 来获取服务⽅的信息。这
个关系可以简单的理解成⽬录与章节具体内容的关系：⽬录即为 naming service，servant 
side 可以理解为具体的内容，内容需要⾸先在⽬录⾥⾯进⾏注册，这样当⽤户想要访问具体内
容时只需要⾸先在⽬录中查找到具体内容所注册的引⽤（通常为⻚数），这样就可以利⽤这个引
⽤快速的找到章节具体的内容。 
九、RMI回显
 利⽤漏洞点调⽤ClassLoader的deﬁneClass⽅法 
 写⼊类：deﬁneClass在⽬标服务器运⾏返回我们构造的类(已经写好的RMI接⼝类) 
 绑定类：将RMI接⼝类绑定到⽬标服务器，也就是将我们构造的恶意类注册到rmi注册中⼼ 
 攻击者本地远程调⽤⽅法获取回显结果
⼗、杂
为什么Fastjson 的利⽤都跟jndi 注⼊有关？JNDI注⼊在原⽣得反序列化⾥有么？
com.sun.rowset.JdbcRowSetImpl类的execute()也可以触发JNDI注⼊利⽤，调⽤过程
如下：
 -> JdbcRowSetImpl.execute()
 -> JdbcRowSetImpl.prepare()
 -> JdbcRowSetImpl.connect()
 -> InitialContext.lookup(dataSource)