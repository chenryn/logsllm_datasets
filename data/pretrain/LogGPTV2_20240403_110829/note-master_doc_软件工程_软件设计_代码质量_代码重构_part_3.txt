}
```
↓
```js
class Person {
  get name() {...}
}
```
- 以工厂函数取代构造函数
构造函数使用起来较不灵活，尝试把创建对象的职责交给工厂
```js
leadEngineer = new Employee(document.leadEngineer, 'E');
```
↓
```js
leadEngineer = createEngineer(document.leadEngineer);
```
- 以命名取代函数
命令对象大都服务于单一的函数，命令相交于过程性代码，拥有了大部分面向对象的能力
```js
function score(candidate, medicalExam, scoringGuide) { 
  let result = 0;
  let healthLevel = 0;
  // long body code
}
```
↓
```js
class Scorer {
  constructor(candidate, medicalExam, scoringGuide) { 
    this._candidate = candidate;
    this._medicalExam = medicalExam; 
    this._scoringGuide = scoringGuide;
  }
  execute() { 
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}
```
- 以函数取代命令
上述的反向重构，在不是很复杂的情况下，直接使用函数完成任务即可
### 处理继承关系
- 函数上移
本质上还是为了避免重复，重复代码是滋生bug的温床
```js
class Employee {...}
class Salesman extends Employee { 
 get name() {...}
}
class Engineer extends Employee { 
 get name() {...}
}
```
↓
```js
class Employee { 
 get name() {...}
}
class Salesman extends Employee {...} 
class Engineer extends Employee {...}
```
- 字段上移
同上，函数换成字段
- 构造函数本体上移
将子类里的共同行为提取到父类
```js
class Party {...}
class Employee extends Party { 
 constructor(name, id, monthlyCost) {
  super(); 
  this._id = id;
  this._name = name; 
  this._monthlyCost = monthlyCost;
 }
}
```
↓
```js
class Party { 
 constructor(name){
  this._name = name;
 }
}
class Employee extends Party { 
 constructor(name, id, monthlyCost) {
  super(name); 
  this._id = id;
  this._monthlyCost = monthlyCost;
 }
}
```
- 函数下移
函数上移的反向重构，如果超类的某个函数只与部分子类有关，那就需要将函数下移
- 字段下移
字段上移的反向重构，动机同上
- 以子类取代类型码
使用多态来替代逻辑判断
```js
function createEmployee(name, type) { 
  return new Employee(name, type);
}
```
↓
```js
function createEmployee(name, type) { 
  switch (type) {
    case "engineer": return new Engineer(name); 
    case "salesman": return new Salesman(name); 
    case "manager": return new Manager (name);
}
```
- 移除子类
随着代码演进，子类压根就不需要了
```js
class Person {
 get genderCode() {return "X";}
}
class Male extends Person {
 get genderCode() {return "M";}
}
class Female extends Person { 
 get genderCode() {return "F";}
}
```
↓
```js
class Person {
  get genderCode() {return this._genderCode;}
}
```
- 提炼超类
如果两个类再做相似的事，利用继承机制将它们的相似之处进行提炼
```js
class Department {
 get totalAnnualCost() {...} 
 get name() {...}
 get headCount() {...}
}
class Employee {
 get annualCost() {...}
 get name() {...}
 get id() {...}
}
```
↓
```js
class Party {
 get name() {...}
 get annualCost() {...}
}
class Department extends Party { 
 get annualCost() {...}
 get headCount() {...}
}
class Employee extends Party { 
 get annualCost() {...}
 get id() {...}
}
```
- 折叠继承体系
随着继承体系演化，一个类与其超类已经没有多大区别
```js
class Employee {...}
class Salesman extends Employee {...}
```
↓
```js
class Employee {...}
```
- 以委托取代子类
继承会给子类带来极大的耦合，父类的任何修改都会影响到子类，使用委托就是一种组合关系，在任何情况下，组合应该优先于继承
```js
class Order {
 get daysToShip() {
  return this._warehouse.daysToShip;
 }
}
class PriorityOrder extends Order { 
 get daysToShip() {
  return this._priorityPlan.daysToShip;
 }
}
```
↓
```js
class Order {
 get daysToShip() {
  return (this._priorityDelegate)
   ? this._priorityDelegate.daysToShip
   : this._warehouse.daysToShip;
 }
}
class PriorityOrderDelegate { 
 get daysToShip() {
  return this._priorityPlan.daysToShip
 }
}
```
- 以委托取代超类
如果父类的一些接口不适合让子类暴露，那么这个类应该就通过组合的方式复用
```js
class List {...}
class Stack extends List {...}
```
↓
```js
class Stack { 
  constructor() {
    this._storage = new List();
  }
}
class List {...}
```
### 速查表
    坏味道（英文）  
    坏味道（中文）  
    页码  
    常用重构  
    Alternative Classes with Different Interfaces  
    异曲同工的类  
    83  
    改变函数声明（124），搬移函数（198），提炼超类（375）  
    Comments  
    注释  
    84  
    提炼函数（106），改变函数声明（124），引入断言（302）  
    Data Class  
    纯数据类  
    83  
    封装记录（162），移除设值函数（331），搬移函数（198），提炼函数（106），拆分阶段（154）  
    Data Clumps  
    数据泥团  
    78  
    提炼类（182），引入参数对象（140），保持对象完整（319）  
    Divergent Change  
    发散式变化  
    76  
    拆分阶段（154），搬移函数（198），提炼函数（106），提炼类（182）  
    Duplicated Code  
    重复代码  
    72  
    提炼函数（106），移动语句（223），函数上移（350）  
    Feature Envy  
    依恋情结  
    77  
    搬移函数（198），提炼函数（106）  
    Global Data  
    全局数据  
    74  
    封装变量（132）  
    Insider Trading  
    内幕交易  
    82  
    搬移函数（198），搬移字段（207），隐藏委托关系（189），以委托取代子类（381），以委托取代超类（399）  
    Large Class  
    过大的类  
    82  
    提炼类（182），提炼超类（375），以子类取代类型码（362）  
    Lazy Element  
    冗赘的元素  
    80  
    内联函数（115），内联类（186），折叠继承体系（380）  
    Long Function  
    过长函数  
    73  
    提炼函数（106），以查询取代临时变量（178），引入参数对象（140），保持对象完整（319），以命令取代函数（337），分解条件表达式（260），以多态取代条件表达式（272），拆分循环（227）  
    Long Parameter List  
    过长参数列  
    74  
    以查询取代参数（324），保持对象完整（319），引入参数对象（140），移除标记参数（314），函数组合成类（144）  
    Loops  
    循环语句  
    79  
    以管道取代循环（231）  
    Message Chains  
    过长的消息链  
    81  
    隐藏委托关系（189），提炼函数（106），搬移函数（198）  
    Middle Man  
    中间人  
    81  
    移除中间人（192），内联函数（115），以委托取代超类（399），以委托取代子类（381）  
    Mutable Data  
    可变数据  
    75  
    封装变量（132），拆分变量（240），移动语句（223），提炼函数（106），将查询函数和修改函数分离（306），移除设值函数（331），以查询取代派生变量（248），函数组合成类（144），函数组合成变换（149），将引用对象改为值对象（252）  
    Mysterious Name  
    神秘命名  
    72  
    改变函数声明（124），变量改名（137），字段改名（244）  
    Primitive Obsession  
    基本类型偏执  
    78  
    以对象取代基本类型（174），以子类取代类型码（362），以多态取代条件表达式（272），提炼类（182），引入参数对象（140）  
    Refused Bequest  
    被拒绝的遗赠  
    83  
    函数下移（359），字段下移（361），以委托取代子类（381），以委托取代超类（399）  
    Repeated Switches  
    重复的switch  
    79  
    以多态取代条件表达式（272）  
    Shotgun Surgery  
    霰弹式修改  
    76  
    搬移函数（198），搬移字段（207），函数组合成类（144），函数组合成变换（149），拆分阶段（154），内联函数（115），内联类（186）  
    Speculative Generality  
    夸夸其谈通用性  
    80  
    折叠继承体系（380），内联函数（115），内联类（186），改变函数声明（124），移除死代码（237）  
    Temporary Field  
    临时字段  
    80  
    提炼类（182），搬移函数（198），引入特例（289）  