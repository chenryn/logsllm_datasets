heuristics on the error reports for BIND and OpenSSL.
The P′ only column describes errors that only occurred
in the patched function, while P and P′ describes errors
that occurred in both versions. In this experiment, we are
primarily concerned with bugs introduced by a patch, so
our discussion describes P′ only unless otherwise noted.
The manual annotations suppressed 42% of the re-
ports for BIND but only 9.6% for OpenSSL. We attribute
this difference to the greater effort we expended writing
manual annotations for BIND, for which the automated
heuristics were less effective without the annotations.
Automated heuristics. We tried numerous heuristics to
reduce false reports. UC-KLEE augments each error re-
port with a list of the heuristics that apply. The must-
fail heuristic identiﬁes errors that must occur for all in-
put values following that execution path, since these are
often true errors [18]. For example, assertion failures are
must-fail when the condition must be false.
A variation on the must-fail heuristic is the belief-fail
heuristic, which uses a form of belief analysis [19]. The
intuition behind this heuristic is that if a function contra-
dicts itself, it likely has a bug. For example, if the code
checks that a pointer is null and then dereferences the
pointer, it has a bug, regardless of any input precondi-
tions. On the other hand, a function is generally agnostic
to the assumptions made by the functions it calls. For
example, if strcmp checks whether two strings have the
same address, the caller does not acquire this belief, even
if the path constraints now indicate that the two addresses
match. Following this intuition, the belief-fail heuristic
identiﬁes errors that occur for all input values satisfying
the belief set, which is the set of constraints (i.e., branch
conditions) added within the current function or inher-
ited from its caller, but not its callees. We track belief
sets for each stack frame.
EXPECT(condition)
IMPLIES(a, b)
HOLDS(a)
MAY HOLD(a)
SINK(e)
path if infeasible.
Add condition as a path constraint if feasi-
ble; otherwise, ignore.
Logical implication: a → b.
Returns true if condition a must hold.
Returns true if condition a may hold.
Forces e to be evaluated; prevents compiler
from optimizing it away.
VALID POINTER(ptr) Returns true if ptr is valid; false otherwise.
Returns the size of the object pointed to by
OBJECT SIZE(ptr)
ptr; kills path if pointer is invalid.
Figure 11: C annotation macros.
The EXPECT macro adds the speciﬁed path constraint
only if the condition is feasible on the current path and
elides it otherwise.
In this example, we avoid consid-
ering cases where the mutex is already locked. How-
ever, this annotation has no effect if the condition is not
feasible (i.e., the lock has deﬁnitely been acquired along
this path). This annotation allows UC-KLEE to detect er-
rors in lock usage while suppressing false positives un-
der the assumption that if a function attempts to acquire
a lock supplied as input, then a likely input precondi-
tion is that the lock is not already held. This annotation
did not prevent us from ﬁnding the BIND locking bug in
receive secure db shown in Figure 5.
Figure 11 summarizes the convenience macros we
provided for expressing annotations using C code. While
annotations may be written using arbitrary C code, these
macros provide a simple interface to functionality not
expressible with C itself (e.g., determining the size of
a heap object using OBJECT SIZE). The HOLDS and
MAY HOLD macros allow code to check the feasibility of
a Boolean expression without causing UC-KLEE to fork
execution and trigger path explosion.
For BIND, we wrote 13 function call annotations and
31 data type annotations (about 400 lines of C). For
OpenSSL, we wrote six data type annotations and no
function call annotations (60 lines). We applied a single
set of annotations for each codebase to all the patches we
tested. In our experience, most of these annotations were
56  24th USENIX Security Symposium 
USENIX Association
A second variation on must-fail
is concrete-fail,
which indicates that an assertion failure or memory er-
ror was triggered by a concrete (non-symbolic) condi-
tion or pointer, respectively.
In practice, this heuristic
and belief-fail were the most effective.
These heuristics reduced the total number of reports to
a small enough number that we were able to inspect them
all manually. While only 8.6% of the belief-fail errors for
BIND and 20% of those for OpenSSL were true bugs, the
total number of these errors (60) was manageable relative
to the number of patches we tested (811). In total, the
annotations and belief-fail heuristic eliminated 98.6% of
false positives for BIND and 98.2% for OpenSSL.
A subset of the belief-fail errors were caused by read-
ing past the end of an input buffer, and none of these
were true bugs. Instead, they were due to paths reaching
the input bound we speciﬁed. In many cases, our system
would emit these errors for any input bound because they
involved unbounded loops (e.g., strlen). The excluding
inputs row in Figure 10 describes the subset of belief-fail
errors not related to input buffers. This additional ﬁl-
ter produced a small enough set of P and P′ errors for
OpenSSL that we were able to manually inspect them,
discovering a number of additional bugs. We note that
the true errors listed in Figure 10 constitute 12 distinct
bugs; some bugs showed up in multiple error reports.
4 Generalized checking
In addition to checking patches, UC-KLEE provides an
interface for rule-based checkers to be invoked during
symbolic path exploration. These checkers are similar to
tools built using dynamic instrumentation systems such
as Valgrind [34] or Pin [30]. Unlike these frameworks,
however, UC-KLEE applies its checkers to all possible
paths through a function, not to a single execution path
through a program. In addition, UC-KLEE considers all
possible input values along each path, allowing it to dis-
cover bugs that might be missed when checking a single
set of concrete inputs.
Conceptually, our framework is similar to WOOD-
PECKER [8], a KLEE-based tool that allows system-
speciﬁc checkers to run on top of (whole program) sym-
bolic execution.
In this paper, however, we focus on
generic checkers we implemented for rules that apply to
many systems, and we directly invoked these checkers
on individual functions deep within each codebase.
UC-KLEE provides a simple interface for implement-
ing checkers by deriving from a provided C++ base class.
This interface provides hooks for a checker to intercept
memory accesses, arithmetic operations, branches, and
several types of errors UC-KLEE detects.
A user invoking UC-KLEE provides a compiled LLVM
module and the name of a function to check. We re-
fer to this function as the top-level function. Generally,
the module has been linked to include all functions that
might be called by the top-level function. When UC-
KLEE encounters a function call, it executes the called
function. When UC-KLEE encounters a call to a func-
tion missing from the LLVM module, however, it may op-
tionally skip over the function call rather than terminate
the path with an error message. When UC-KLEE skips
a function call, it creates a new under-constrained value
to represent the function’s return value, but it leaves the
function’s arguments unchanged. This approach under-
approximates the behaviors that the missing function
might perform (e.g., writing to its arguments or globals).
Consequently, UC-KLEE may miss bugs and cannot pro-
vide veriﬁcation guarantees when functions are missing.
We brieﬂy experimented with an alternative approach
in which we overwrote the skipped function’s argu-
ments with new under-constrained values, but this over-
approximation caused signiﬁcant path explosion, mostly
involving paths that could not arise in practice.
In addition to missing functions due to scalability lim-
itations, we also encountered inline assembly (Linux ker-
nel only) and unresolved symbolic function pointers. We
skipped these two cases in the same manner as missing
functions. For all three cases, UC-KLEE provides a hook
to allow a checker to detect when a call is being skipped
and to take appropriate actions for that checker.
In the remainder of this section, we describe each
checker, followed by our experimental results in § 4.4.
4.1 Leak checker
Memory leaks can lead to memory exhaustion and pose
a serious problem for long-running servers. Frequently,
they are exploitable as denial-of-service vulnerabili-
ties [10, 13, 14]. To detect memory leaks (which may or
may not be remotely exploitable, depending on their lo-
cation within a program), we implemented a leak checker
on top of UC-KLEE. The leak checker considers a heap
object to be leaked if, after returning from the top-level
function, the object is not reachable from a root set of
pointers. The root set consists of a function’s (symbolic)
arguments, its return value, and all global variables. This
checker is similar to the leak detection in Purify [23] or
Valgrind’s memcheck [34] tool, but it thoroughly checks
all paths through a speciﬁc function, rather than a single
concrete path through a whole program.
When UC-KLEE encounters a missing function, the
leak checker ﬁnds the set of heap objects that are reach-
able from each of the function call’s arguments using a
precise approach based on pointer referents [42, 43]. It
then marks these objects as possibly escaping, since the
missing function could capture pointers to these objects
and prevent them from becoming unreachable. At the
end of each execution path, the leak checker removes any
possibly escaping objects from the set of leaked objects.
USENIX Association  
24th USENIX Security Symposium  57
Doing so allows it to report only true memory leaks, at
the cost of possibly omitting leaks when functions are
missing. However, UC-KLEE may still report false leaks
along invalid execution paths due to missing input pre-
conditions. Consider the following code fragment:
char *a = (char*) malloc(10); /* not leaked */
char *b = (char*) malloc(10); /* maybe leaked */
char *c = (char*) malloc(10); /* leaked! */
1 : char* leaker() {
2 :
3 :
4 :
5 :
6 :
7 :
8 : }
bar(b); /* skipped call to bar */
return a;
When UC-KLEE returns from the function leaker, it in-
spects the heap and ﬁnds three allocated objects: a, b,
and c. It then examines the root set of objects. In this
example, there are no global variables and leaker has
no arguments, so the root set consists only of leaker’s
return value. UC-KLEE examines this return value and
ﬁnds that the pointer a is live (and therefore not leaked).
However, neither b nor c is reachable. It then looks at its
list of possibly escaping pointers due to the skipped call
to bar on line 6, which includes b. UC-KLEE subtracts
b from the set of leaked objects and reports back to the
user that c has been leaked. While this example is trivial,
UC-KLEE discovered 37 non-trivial memory leak bugs in
BIND, OpenSSL, and the Linux kernel (§ 4.4).
4.2 Uninitialized data checker
Functions that access uninitialized data from the stack
or heap exhibit undeﬁned or non-deterministic behavior
and are particularly difﬁcult to debug. Additionally, the
prior contents of the stack or heap may hold sensitive
information, so code that operates on these values may
be vulnerable to a loss of conﬁdentiality.
UC-KLEE includes a checker that detects accesses to
uninitialized data. When a function allocates stack or
heap memory, the checker ﬁlls it with special garbage
values. The checker then intercepts all loads, binary
operations, branches, and pointer dereferences to check
whether any of the operands (or the result of a load) con-
tain garbage values. If so, it reports an error to the user.
In practice, loads of uninitialized data are often in-
tentional; they frequently arise within calls to memcpy
or when code manipulates bit ﬁelds within a C struct.
Our evaluation in § 4.4 therefore focuses on branches and
dereferences of uninitialized pointers.
When a call to a missing function is skipped, the unini-
tialized data checker sanitizes the function’s arguments
to avoid reporting spurious errors in cases where missing
functions write to their arguments.
4.3 User input checker
Code that handles untrusted user input is particularly
prone to bugs that lead to security vulnerabilities since
an attacker can supply any possible input value to exploit
the code. Generally, UC-KLEE treats inputs to a function
as under-constrained because they may have unknown
preconditions. For cases where inputs originate from un-
trusted sources such as network packets or user-space
data passed to the kernel, however, the inputs can be con-
sidered fully-constrained. This term indicates that the set
of legal input values is known to UC-KLEE; in this case,
any possible input value may be supplied. If any value
triggers an error in the code, then the error is likely to be
exploitable by an attacker, assuming that the execution
path is feasible (does not violate other preconditions).
UC-KLEE maintains shadow memory (metadata) asso-
ciated with each symbolic input that tracks whether each
symbolic byte is under-constrained or fully-constrained.
UC-KLEE provides an interface for system-speciﬁc C an-
notations to mark untrusted inputs as fully-constrained
by calling the function ucklee clear uc byte. This
function sets the shadow memory for each byte to the
fully-constrained state.
that
intercepts all
UC-KLEE includes a system-conﬁgurable user in-
put checker
errors and adds
an UNSAFE INPUT ﬂag to errors caused by fully-
constrained inputs.
the
checker examines the pointer to see if it contains fully-
constrained symbolic values. For assertion failures, it
examines the assertion condition. For division-by-zero
errors, it examines the divisor.
For memory access errors,
In all cases, the checker inspects the fully-constrained
inputs responsible for an error and determines whether
any path constraints compare the inputs to under-
constrained data (originating elsewhere in the program).
If so, the checker assumes that the constraints may prop-
erly sanitize the input, and it suppresses the error. Oth-
erwise, it emits the error. This approach avoids reporting
spurious errors to the user, at the cost of missing errors
when inputs are partially (but insufﬁciently) sanitized.
We designed this checker primarily to ﬁnd security
vulnerabilities similar to the OpenSSL “Heartbleed” vul-
nerability [1, 11] from 2014, which passed an untrusted
and unsanitized length argument to memcpy, triggering
a severe loss of conﬁdentiality.
In that case, the code
never attempted to sanitize the length argument. To
test this checker, we ran UC-KLEE on an old version of
OpenSSL without the ﬁx for this bug and conﬁrmed that
our checker reports the error.
4.4 Evaluation
We evaluated UC-KLEE’s checkers on over 20,000 func-
tions from BIND, OpenSSL, and the Linux kernel. For
BIND and OpenSSL, we used UC-KLEE to check all
functions except those in the codebases’ test directo-
ries. We used the same minor code modiﬁcations de-
scribed in § 3.2.1, and we again used a maximum input
58  24th USENIX Security Symposium 
USENIX Association
Leak Checker
BIND
OpenSSL
Linux kernel
Funcs. Bugs Reports
6239
6579
5812
138
272†
127
9
5
23
Pointer
Funcs. Bugs Reports
False
2.2%
6239
90.1% 6579
76.4% 7185
0
197
72
3
6
10
Uninitialized Data Checker
Pointer Branch
Reports
False
-
244*
92.90% 564*
83.30% 494*
User Input Checker
Funcs. Bugs Reports
6239
6579
1857
67
5
145
0
0
11
False
100%
100%
80.0%
Figure 12: Summary of results from running UC-KLEE checkers on Funcs functions from each codebase. Bugs shows the number
of distinct true bugs found (67 total). Reports shows the total number of errors reported by UC-KLEE in each category (multiple
errors may point to a single bug). False reports the percentage of errors reported that did not appear to be true bugs (i.e., false
positives). †excludes reports for obfuscated ASN.1 code. *denotes that we inspected only a handful of errors for that category.
1 :int gssp accept sec context upcall(struct net *net,
2 :
3 :
4 :
5 :
6 :
7 :