开发人员不是心理学家
220
一步构建你的项目
221
Ant:Java项目的构建工具
222
项目、属性、目标、任务
223
良好的构建脚本···
228
良好的构建脚本超越基本功能
230
构建脚本也是代码
232
新的开发人员，第二幕
233
软件开发工具箱
234
项目的各个片段
构建过程
可运行的系统
号有
G
Ac调业保的系/
PD
xvi
---
## Page 29
目录
测试和连续集成
智者千虑必有一失
有时候，即便最优秀的开发人员也会破坏构建版本。
至少人人身上都经历过一次。你确认代码通过了编译：你在机器上一遍又一遍地测
试了你的代码，并把代码提交到存储目录。但是，在你的机器和被人们称之为服务
器的黑箱子之间的某处，就肯定有人修改了你的代码，下一个调出程序的倒霉的人
将要换过一个痛苦的早上，得想尽办法弄清哪些是可工作的代码。在这一章中，我
们将讲述如何设置一张安全网，以保证构建版本有序，并且富有生产力。
事情总是会出错的.
236
有三种方式检查你的系统…
238
黑箱测试的重点在输入和输出
239
灰箱测试使你更贴近代码
240
白箱测试利用系统的内部知识
243
一个步骤测试每件事情
248
使用测试方案让你的测试自动化
250
使用测试框架运行你的测试
251
运用CruiseControl控制C1
254
测试确保系统能有效工作-对吗？
256
测试全部代码意味者测试每个逻辑分支
264
利用测试覆盖率报告看看测试所覆盖情况
265
达到良好的测试覆盖率并不容易
267
你的环境在做什么.
270
软件开发工具箱
274
菲激试
XVii
---
## Page 30
目录
测试驱动开发
让代码负起责任
有时候，完全取决于你的预期。人人都知道，再好的代码必须能运行。但你如何
知道你的代码能运行呢？即使是单元测试（UnitTest），也有大多数代码的某些部
分没有被测试到。但如果测试的是软件开发的基础性部分，会怎样呢？如果你做每
件事都伴随着测试，又会怎样呢？在本章中，我们将用你所学到的版本控制、CI和
自动测试方面的知识，并将这些绑定在一起放在一个环境中。在这个环境中，你能
有信心修复错误（Fixing bugs）、进行重构（Refactoring），甚至重新实施部分系
统。
测试在先，而不是在后
276
所以，我们打算先做测试…
277
欢迎光临测试驱动开发
277
你的第个测试
278
痛苦的失败
279
让你的测试亮绿灯
280
红灯停、绿灯行和重构…
281
在TDD中，以测试驱动实施
286
完成任务就说明你做了所需要的全部测试，并且都通过了
288
当测试通过时，继续前进！
289
简明化代表避免关联
66
总是编写可测试的代码
6
当难干测试时，检查一下你的设计
295
策略模式提供单一界面的多项实施方式
296
让测试代码跟上你的测试
299
测试产生良好的代码
300
多测试意味着很多代码
302
策略设计模式、松散合、对象替代
我们需要很多不同，但相似的对象
304
红灯：谢试失候
如果我们生成不同对象呢？
304
模拟对象代替真实对象
305
绿灯：别试成址
Mock 对象是工作对象的替代物
306
D
董称：清理任何重宝、准
好软件是可测试的.
60
和过时的代码
让测试通过并不容易
310
测试驱动开发人员生命中的一天
312
xvi
软件开发工具箱
314
---
## Page 31
目录
结束开发循环
涓涓细流归大海·
你几乎完成了任务！团队工作努力、任务正在完成。你的任务和使用情节
已经完成，然而，多花一天的时间进行工作收尾的最佳方式是什么？用户
测试何时安排？你能挤出一回合做一轮重构和重新设计吗？确实还有许多
棘手的错误何时修正这些错误？这些是开发循环结束时所要面对的一
切因此，让我们开始进行收尾工作吧。
开发循环马上就要完成了…
318
但是，还有很多事情可以做
319
系统测试必不可少
324
.但是，由谁来做系统测试？
325
系统测试取决于一个可供测试的完整系统
326
良好的系统测试需要两组开发循环
327
越多的开发循环意味越多的问题
328
有效系统测试的前十个星著特点
333
错误的生与死
334
你发现了一个错误
336
软件错误报告的制析
337
但仍然有很多遗留的工作你能做
338
开发循环回顾
342
一些开发循环回顾问题
343
为完成额外事情的一般性优先级列表
344
软件开发工具箱
346
xix
---
## Page 32
目录
下一轮开发循环
10
无事就要生非
事情会顺利吗？
等等，事情也许会发生变化的
你的开发循环进行得很顺利，而且你正在如期交付能运行的软件。该
进行下一轮开发循环吧？没有问题，对吗？不幸的是，根本不是这么会
事。软件开发就是一个要应对不断变化的过程，进入下一轮开发循环也
绝无例外。在本章中，你将学会如何准备下一轮开发循环，你必须重建
你的白板，调整你的使用情节以及预期，基于客户现在需要什么，而不
是一个月前要什么。
何请可运行的软件？
350
你需要为下一轮开发据环作计划
352
时间效率值说明了….真实的情况
359
还是关系到客户
360
别人开发的软件也是软件
362
客户认可吗？核查一下！
365
测试你的代码
370
休斯顿，我们有麻烦了
371
相信自己
373
谁编写的代码并不重要。如果这些代码在你的
软件系统中，那么。它就是你的资任
373
不按流程的你
378
遵循流程的你
379
Thenext
ieration
---
## Page 33
目录
软件错误
专业排错
你编写的代码，你的责任感…你的代码错误，你的名声！
当事情陷于困境的时候，让它从泥潭中回到正轨是你的责任。软件错误，不管它
们出现在你所编写的代码中，还是在你所利用的软件中，这都是在软件开发过程
中无法改变的事实。像其他事情一样，你处理软件错误的方法与流程的其他部分
是一致的。您需要准备好大白板、让你的客户参与其中、满怀信心地估计修正软
件错误的工作量，并且把代码重构与预构（Prefactoring）应用于软件错误的修正，
以避免在未来出现软件错误。
开发循环2—前景提要
384
首先，你必须与客户加强沟通
386
优先考虑的事情：使代码可构建
392
我们可以修改代码了
394
但我们必须修正功能性
395
弄清楚什么功能可运行
396
现在，你知道有什么不能运行
66
你会怎么数？
399
利用峰值测试做估计
400
峰值测试的结果告诉你什么？
402
团队成员的真实感受很重要
0#
把排错的时间估计告诉你的客户
406
事情看起来不错
410
-你成功地完成了开发循环！
411
还有最重要的，是，客户也很高兴
412
软件开发工具箱
414
Orbtts
---
## Page 34
目录
真实的世界
12
落实流程
你已经学到了很多有关软件开发的知识。但是，在你把工作量完成情况趋势图钉
在每个人的办公室之前，还有一些事情是你在处理每个项目时需要知道的。项目
与项目之间都存在很多相似性和最佳的实践，但是，项目还存在独特的地方，你应
当为这些独特的地方做好准备。现在是该看看如何把你所学到的知识应用于某个特
定的项目的时候了，以及还有哪些需要学习。
定义软件开发的流程
418
良好的流程交付良好的软件
419
要求正式.
424
一些额外的资源
426
更多的知识一更好的流程
427
软件开发工具箱
428
大白板
配置管理
使用情节
持续集成
测试覆盖率
测试驱动开发
---
## Page 35
目录
附录1：本书之遗
前五个遗漏（我们没有涉及的部分）
是否感到若有所失？我们能明白你的意思
就在你认为已完成本书的阅读…，还没有完呢。我们不可能没有额外的内容，这些
额外的内容无法收录在本书之中。至少，你并不希望借助手推车来随身带着这本书。
所以，快速地翻阅一下书本，看看你可能遗漏掉了些什么。
#1.UML和类图
434
#2序列图
436
3.使用情节和用户案例
438
4.系统测试与单元测试的比较
440
#5.代码重构
441
Airplane)
speed :int
getSpeedO:int
标题：传送围片给其他用户
setSpeed(speed:int):void
描述：点者“借运围片”搜铅（只需支持
JPE印格式）给其他用户传运图片，其他用户应
该有否接收这个文停的选项。
20
估计值：
优先级：
KOCIII
---
## Page 36
目录
附录2：技术和原则
给有经验的软件开发人员的工具
是否曾经希望那些好用的工具和技术都放在一起？这里对我们所涉及
到的所有软件开发技术和原则做一个摘要。把它们全部淘览一遍，看
看你是否能记得每则内容的涵义，你甚至可能想把这些内容页面裁剪下
来，把它贴到你的大自板的底部，以便你每天参加碰头会议的人都能
看得到。
开发技术