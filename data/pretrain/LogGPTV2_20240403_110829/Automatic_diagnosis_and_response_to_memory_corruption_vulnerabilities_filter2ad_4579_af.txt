few receiving states. Our analysis of the ghttpd web server
shows that when receiving client messages, the server stays
in the main loop. From our monitor’s perspective, its call
stack does not change. Therefore, the bene(cid:12)t of using call
stack trace is application dependent. The use of call stack
trace does not a(cid:11)ect the correctness of the signature (cid:12)l-
tering mechanism even when it does not help reduce false
positives. Therefore, the additional bene(cid:12)ts it o(cid:11)ers to ap-
plications such as OpenSSH still makes it a useful technique.
Although modeling execution state using call stack is appli-
cation and protocol dependent, the general idea of associat-
ing program data/execution state with message signatures
can still be potentially bene(cid:12)cial to many applications. Fur-
ther research is required to identify more useful program
semantic states.
8. RELATED WORK
Intrusion detection systems (IDSs) (e.g., Snort [30, 4], Bro
[29], and NetSTAT [37]) have been used to detect attacks.
Most current IDSs that are being used are based on sig-
natures of known attacks, though some other approaches
have been proposed to detect attacks using statistical tech-
niques (e.g., NIDES [16]). These signatures are tradition-
ally generated manually, and the generation of signatures is
usually slow and error prone. To deal with the delay in sig-
nature generation, and particularly to deal with the threat
of fast spreading worms, several approaches [22, 17, 33, 26]
have been developed to generate (worm) signatures from at-
tack tra(cid:14)c, including polymorphic worms [26]. However, all
these approaches rely on other means to identify the attack
tra(cid:14)c. The approach proposed in this paper starts to gen-
erate the signature for an unknown attack upon detection
by our system. Moreover, the proposed technique o(cid:11)ers an
opportunity to detect, recover, and defend similar attacks
in a purely decentralized manner.
TaintCheck [27] uses binary program emulation to track
the propagation and use of tainted external data.
It pre-
vents the use of tainted data for jump addresses and format
strings. We believe that within our system architecture,
the technique used by TaintCheck, i.e., dynamic informa-
tion (cid:13)ow tracking, can be a part of the crash diagnosis en-
gine. We will study how to best leverage such techniques in
our future research. Adopting a reactive approach, STEM
[32] identi(cid:12)es potentially vulnerable code segments based
on program crashes or instrumented applications running
on honeypots, and then selectively emulate the vulnerable
code segments by instrumenting the source code. The emu-
lation allows a vulnerable program to recover from attacks
by rolling back the changes made by an attack. Our ap-
proach can use similar attack detectors as in STEM, but
di(cid:11)er in that it uses message (cid:12)lter instead of error virtualiza-
tion for blocking future attacks. Despite the similar purpose
of detecting and recovering from unknown memory corrup-
tion attacks, our approach also di(cid:11)ers from these techniques.
In particular, our approach automatically identi(cid:12)es the vul-
nerability (at the binary level) exploited by novel attacks,
and prevent future attacks by signature-based detection and
(cid:12)ltering. In addition, our approach introduces insigni(cid:12)cant
performance overhead during normal program execution be-
cause it does not use emulation or code instrumentation.
ARBOR [24] is a system that can generate signatures for
bu(cid:11)er over(cid:13)ow attacks. ARBOR uses statistical analysis of
message sizes to (cid:12)nd bu(cid:11)er lengths, while we use program
analysis to (cid:12)nd signatures for a larger class of attacks. In a
follow-up work [23], the authors of ARBOR used a similar
approach to this paper to locate corrupting instructions due
to bu(cid:11)er overrun, localize attack message, and then gener-
ate signature based on message length and contents. Their
method requires application level protocol speci(cid:12)cation for
better signature quality.
Our approach is similar to FLIPS [25] which uses anomaly
classi(cid:12)er, signature (cid:12)lter, and instruction set randomization
(ISR). While ISR only detects code injection attacks, we
use address space randomization to detect a broader range
of memory corruption attacks. In [1], shadow honeypots are
used to verify and therefore reduce false alerts from anomaly
detectors. The approach requires an additional shadow pro-
cess in addition to the regular server process. The shadowed
process runs more slowly than the original server process
due to code instrumentation. Our approach only uses one
randomized server process with very little performance over-
head during normal operations.
Shield [38] is a vulnerability based protection system, which
uses manually generated signatures to (cid:12)ltering out attacks
exploiting known vulnerabilities. Our approach, which tar-
gets at unknown memory corruption vulnerabilities, is com-
plementary to Shield.
Indeed, our approach can be com-
bined with Shield to provide automatically generated sig-
natures, and protect against attacks exploiting both known
and unknown vulnerabilities.
Address space randomization has been proposed as a generic
defense mechanism against memory corruption attacks (e.g.,
[3, 28, 40]). Our system uses address space randomization to
detect memory corruption attacks and trigger the diagnosis
and response process. Recent work [31] has shown that it is
possible to brute-force attack randomized systems. Clearly,
moving to 64-bit platform or using more (cid:12)ne-grain random-
ization will minimize the chance of such attacks. On the
other hand, the goal of our system is precisely to defeat such
attacks. Upon the (cid:12)rst brute-force attack, we analyze the
crash and generate signatures to block future attacks. With
better problem diagnosis and signature generation schemes,
we will eventually be able to defeat such attacks. We will
study these approaches in our future research.
A number of ad hoc techniques and tools have been devel-
oped to protect known vulnerabilities. Examples include de-
tection and prevention techniques against stack bu(cid:11)er over-
(cid:13)ow attacks [11, 9, 13], and format string attacks [10]. Since
these techniques are targeted at speci(cid:12)c types of bugs, and
they can certainly be used in our system and serve as special-
ized detectors. However, we believe that randomization is a
more generic and broader detection methods that can cover
these aforementioned techniques. Several virtual-machine
based tools (e.g., [12, 18, 19]) have been developed to record
and analyze OS-level events and their dependencies to fa-
cilitate intrusion analysis. The approach presented here is
complementary to these techniques.
9. CONCLUSION AND FUTURE WORK
In this paper, we developed a novel approach to automat-
ically diagnose unknown memory corruption vulnerabilities
on the basis of program randomization. This approach al-
lows a network service program to quickly identify the vul-
nerability being exploited. We also generate message signa-
tures that can be used to prevent future attacks. Further-
more, we associate program’s execution state, in particular
its call stack trace, with the attack signatures learned from
the attack messages. The association can be used to signi(cid:12)-
cantly reduce the false positive rate without decreasing the
detection rate for certain applications. The proposed tech-
niques enable the development of a fully decentralized self-
diagnosing and self-protecting defense mechanism for net-
worked computer systems.
A number of issues require future investigations. A more
general dynamic data dependency analysis method is re-
quired for more e(cid:14)cient diagnosis. The message (cid:12)ltering
mechanism should be moved to the kernel space for better
performance and better integration with the diagnosis en-
gine. And (cid:12)nally, more experiments are required to evaluate
our system.
10. ACKNOWLEDGMENTS
We would like to thank our shepherd, Somesh Jha, for his
excellent comments and timely responses. We also thank
Dawn Song and the anonymous reviewers for their many
suggestions for improving this paper. This work is partially
supported by the National Science Foundation (NSF) under
grants ITR-0219315 and CCR-0207297.
11. REFERENCES
[1] K. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis,
E. Markatos, and A. Keromytis. Detecting targeted attacks
using shadow honeypots. In Proceedings of the 14th USENIX
Security Symposium, August 2005.
[2] A. Baraloo, N. Singh, and T. Tsai. Libsafe: Protecting critical
elements of stacks.
http://www.research.avayalabs.com/project/libsafe/. White
Paper.
[3] S. Bhatkar, D.C. DuVarney, and R. Sekar. Address obfuscation:
an e(cid:14)cient approach to combat a broad range of memory error
exploits. In Proceedings of the 12th USENIX Security
Symposium (Security ’03), August 2003.
[4] Brian Caswell and Marty Roesch. Snort: The open source
network intrusion detection system. http://www.snort.org.
[5] CERT. http://www.cert.org/advisories/CA-2001-19.html.
[6] CERT. http://www.cert.org/advisories/CA-2003-04.html.
[7] CERT. http://www.cert.org/advisories/CA-2003-20.html.
[8] H. Chen and D. Wagner. MOPS: an infrastructure for
examining security properties of software. In Proceedings of the
9th ACM Conference on Computer and Communications
Security (CCS’02), November 2002.
[9] T. Chiueh and F. Hsu. RAD: A compile-time solution to bu(cid:11)er
over(cid:13)ow attacks. In Proceedings of the 21st International
Conference on Distributed Computing Systems (ICDCS 01),
April 2001.
[10] C. Cowan, M. Barringer, S. Beattie, and G. Kroah-Hartman.
Formatguard: Automatic protection from printf format string
vulnerabilities. In Proceedings of the 2001 USENIX Security
Symposium, August 2001.
[11] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie,
A. Grier, P. Wagle, Q. Zhang, and H. Hinton. StackGuard:
Automatic adaptive detection and prevention of bu(cid:11)er-over(cid:13)ow
attacks. In Proceedings of the 7th USENIX Security
Conference, June 1998.
[12] G.W. Dunlap, S.T. King, S. Cinar, M.A. Basrai, and P.M.
Chen. ReVirt: Enabling intrusion analysis through
virtual-machine logging and replay. In Proceedings of the 2002
Symposium on Operating Systems Design and
Implementation (OSDI), December 2002.
[13] H. Etoh. GCC extension for protecting applications from
stack-smashing attacks.
http://www.research.ibm.com/trl/projects/security/ssp/.
[14] H. Feng, J. Gi(cid:14)n, Y. Huang, S. Jha, W. Lee, and B. Miller.
Formalizingsensitivity in static analysis for intrusion detection.
In Proceedings of the 2004 IEEE Symposium on Security and
Privacy, May 2004.
[15] Intel Corporation. Intel Architecture Software Developer’s
Manual, volume 2, Instruction Set Reference, 1999.
[16] H.S. Javits and A. Valdes. The NIDES statistical component:
Description and justi(cid:12)cation. Technical report, SRI
International, Computer Science Laboratory, 1993.
[17] H. A. Kim and B. Karp. Autograph: Toward Automated,
Distributed Worm Signature Detection. In Proceedings of the
13th Usenix Security Symposium, August 2004.
[18] S.T. King and P.M. Chen. Backtracking intrusions. In
Proceedings of the 2003 Symposium on Operating Systems
Principles (SOSP), October 2003.
[19] S.T. King, Z.M. Mao, D.G. Lucchetti, and P.M. Chen.
Enriching intrusion alerts through multi-host causality. In
Proceedings of The 12th Annual Network and Distributed
System Security Symposium (NDSS ’05), February 2005.
[20] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure
execution via program shepherding. In Proceedings of the 11th
USENIX Security Symposium, August 2002.
[21] C. Ko, M. Ruschitzka, and K. Levitt. Execution monitoring of
security-critical programs in distributed systems: A
speci(cid:12)cation-based approach. In Proceedings of 1997 IEEE
Symposium on Security and Privacy, pages 175{187, Oakland,
CA, May 1997.
[22] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion
detection signatures using honeypots. In Proceedings of the
Second Workshop on Hot Topics in Networks (HotNets-II),
November 2003.
[23] Zhenkai Liang and R. Sekar. Automated, sub-second attack
signature generation: A basis for building self-protecting
servers. In To appear in 12th ACM Conference on Computer
and Communications Security (CCS), November 2005.
[24] Zhenkai Liang, R. Sekar, and Daniel C. DuVarney. Automatic
synthesis of (cid:12)lters to discard bu(cid:11)er over(cid:13)ow attacks: A step
towards realizing self-healing systems. In USENIX Annual
Technical Conference, April 2005.
[25] M. Locasto, K. Wang, A. Keromytis, and S. Stolfo. Flips:
Hybrid adaptive intrusion prevention. In Proceedings of the 8th
International Symposium on Recent Advances in Intrusion
Detection (RAID), September 2005.
[26] J. Newsome, B. Karp, and D. Song. Ploygraph: Automatically
generating signatures for polymorphic worms. In Proceedings of
the IEEE Symposium on Security and Privacy, May 2005.
[27] James Newsome and Dawn Song. Dynamic taint analysis for
automatic detection, analysis, and signature generation of
exploits on commodity software. In Proceedings of the 12th
Annual Network and Distributed System Security Symposium
(NDSS), 2005.
[28] PaX Team. http://pax.grsecurity.net/docs/aslr.txt.
[29] Vern Paxson. Bro: a system for detecting network intruders in
real-time. Computer Networks, 31(23-24):2435{2463, 1999.
[30] M. Roesch. Snort - lightweight intrusion detection for networks.
In Proceedings of the 1999 USENIX LISA conference, 1999.
[31] Hovav Shacham, Matthew Page, Ben Pfa(cid:11), EuJin Goh,
Nagendra Modadugu, and Dan Boneh. On the E(cid:11)ectiveness of
Address Space Randomization. In Proceedings of 11th ACM
Conference on Computer and Communications Security
(CCS), October 2004.
[32] S. Sidiroglou, M.E. Locasto, S.W. Boyd, and A.D. Keromytis.
Building a reactive immune system for software services. In
Proceedings of USENIX Annual Technical Conference, pages
149 { 161, April 2005.
[33] S. Singh, C.Estan, G. Varghese, and S. Savage. Automated
worm (cid:12)ngerprinting. In Proceedings of the 6th ACM/USENIX
Symposium on Operating System Design and Implementation
(OSDI), December 2004.
[34] Sumeet Singh, Cristian Estan, George Varghese, and Stefan
Savage. Automated Worm Fingerprinting. In Proceedings of
the ACM/USENIX Symposium on Operating System Design
and Implementation (OSDI), December 2004.
[35] A. Smirnov and T. Chiueh. DIRA: Automatic detection,
identi(cid:12)cation, and repair of control-hijacking attacks. In
Proceedings of The 12th Annual Network and Distributed
System Security Symposium (NDSS ’05), February 2005.
[36] Sudarshan Srinivasan, Srikanth Kandula, Christopher Andrews,
and Yuanyuan Zhou. Flashback: A light-weight rollback and
deterministic replay extension for software debugging. In The
proceedings of the annual Usenix technical conference
(USENIX’04), June 2004.
[37] G. Vigna and R. A. Kermmerer. NetSTAT: A network-based
intrusion detection approach. In Proceedings of the 14th
Annual Security Applications Conference, December 1998.
[38] Helen J. Wang, Chuanxiong Guo, Daniel R. Simon, and Alf
Zugenmaier. Shield: Vulnerability-Driven Network Filters for
Preventing Known Vulnerability Exploits. In Proceedings of
ACM SIGCOMM, August 2004.
[39] Jun Xu, Shuo Chen, Zbigniew Kalbarczyk, and Ravishankar K.
Iyer. An Experimental Study of Security Vulnerabilities Caused
by Errors. In Proceedings of IEEE International Conference
on Dependable Systems and Networks, Goteborg, Sweden,
July 2001.
[40] Jun Xu, Zbigniew Kalbarczyk, and Ravishankar K. Iyer.
Transparent runtime randomization for security. In Proceedings
of 22nd Symposium on Reliable and Distributed System
(SRDS), October 2003.