+ (cid:15). We include the constant
> (cid:12)(cid:12)(cid:12)
xi (cid:0) x j(cid:12)(cid:12)(cid:12)
straint (cid:12)(cid:12)(cid:12)
xi (cid:0) x j(cid:12)(cid:12)(cid:12)
+ (cid:12)(cid:12)(cid:12)
xk (cid:0) x j(cid:12)(cid:12)(cid:12)
term (cid:15) to avoid counting marginal violations (the error in measur-
ing these links is likely on the order of several milliseconds). For
(cid:15) = 5ms, we ﬁnd that 4.5% of the triples in the King data set violate
the triangle inequality.
Of course, while a data set with many triangle inequalities will
do poorly in most coordinate spaces we’d consider, a data set with
few triangle inequalities still might not ﬁt well into arbitrary coor-
dinate spaces. The small number of triangle inequalities in the data
only suggests that we are not doomed from the start.
5.2 Euclidean spaces
First, we explore the use of Euclidean coordinate spaces. These
have the familiar equations:
[x1; (cid:1) (cid:1) (cid:1) ; xn] (cid:0) (cid:2)y1; (cid:1) (cid:1) (cid:1) ; yn(cid:3) = (cid:2)x1 (cid:0) y1; (cid:1) (cid:1) (cid:1) ; xn (cid:0) yn(cid:3)
k[x1; (cid:1) (cid:1) (cid:1) ; xn]k = qx2
1 + (cid:1) (cid:1) (cid:1) + x2
n
(cid:11) (cid:2) [x1; (cid:1) (cid:1) (cid:1) ; xn] = [(cid:11)x1; (cid:1) (cid:1) (cid:1) ; (cid:11)xn]
If we choose to use a Euclidean coordinate space, the ﬁrst ques-
tion is how many dimensions to use. We use a principal com-
ponents analysis as in Cox and Dabek [4] and Tang and Crov-
ella [29], to characterize the dimensionality of Internet coordinates.
The analysis suggests that the coordinates primarily use two to
three dimensions, with little variation in the others. That is, in-
sofar as the data is Euclidean, it is only two- or three-dimensional.
This ﬁnding is a somewhat surprising result given the complexity
of the Internet.
Examining the data reveals that the latencies in the data are dom-
inated by geographic distance. If geographic distance were the only
factor in latency, a 2-dimensional model would be su(cid:14)cient. How-
ever, the ﬁt is not perfect, probably due to aspects of the network
like access-link delays and the fact that nodes often take ine(cid:14)cient
routes as they move from one backbone to another (as happens, for
example, in hot-potato routing). As we add more dimensions, the
accuracy of the ﬁt improves slightly, probably because the extra di-
mensions allow Vivaldi more “wiggle room” for placing hard-to-ﬁt
points.
Figure 13 plots the CDF of relative errors for 2-, 3-, and 5-
dimensional Euclidean coordinates, for both the PlanetLab and King
data sets. Adding extra dimensions past three does not make a sig-
niﬁcant improvement in the ﬁt. While using coordinates with more
dimensions does improve the quality of the ﬁt, it also increases the
communication overhead required to run Vivaldi; for this reason
s
r
i
a
P
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
s
r
i
a
P
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
1.0
0.8
0.6
0.4
0.2
0.0
1.0
0.8
0.6
0.4
0.2
0.0
2D
3D
5D
0.0
0.5
1.0
Relative Error
1.5
2.0
2D
3D
5D
s
r
i
a
P
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
s
r
i
a
P
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
1.0
0.8
0.6
0.4
0.2
0.0
1.0
0.8
0.6
0.4
0.2
0.0
2D
3D
2D + height
0.0
0.5
1.0
Relative Error
1.5
2.0
2D
3D
2D + height
0.0
0.5
1.0
Relative Error
1.5
2.0
0.0
0.5
1.0
Relative Error
1.5
2.0
Figure 13: The cumulative distribution of Vivaldi’s prediction error
for various numbers of Euclidean dimensions for the PlanetLab (top)
and King (bottom) data sets.
Figure 15: The cumulative distribution of prediction error for 2- and
3-dimensional Euclidean coordinates and height vectors chosen by Vi-
valdi for the PlanetLab (top) and King (bottom) data sets.
we prefer the lowest dimensional coordinates that allow for accu-
rate predictions.
5.3 Spherical coordinates
Because we know that the distances we are attempting to model
are drawn from paths along the surface of a sphere (namely the
Earth), we might expect that a spherical distance function would
provide a more accurate model.
We adapted Vivaldi to use spherical coordinates; instead of ex-
pressing a force vector in Euclidean space, a node moves some
fraction of the angular distance towards or away from another node.
Figure 14 plots the CDF of relative errors for Vivaldi’s choice 2-
dimensional Euclidean coordinates as well as spherical coordinates
with varying radii, for the PlanetLab and King data sets and a syn-
thetic data set generated from a spherical model. In (a) and (b), the
error is large until about 80 ms; before this, the sphere’s surface is
likely too small for the nodes to spread out.
The spherical model’s error is similar to the Euclidean model’s
error and does not degrade as the radius is increased. This ﬁnd-
ing suggests that all points cluster on one side of the sphere as the
sphere provides approximately 2(cid:25)r2 of surface area, approximating
a Euclidean plane in which to work. To test this hypothesis we tried
Vivaldi on a synthetic network of nodes chosen to ﬁt a sphere of ra-
dius 80 ms. The error for the spherical ﬁt is zero when the radius
of the modeled sphere is 80ms. It degrades as the radius increases
beyond its optimal value. A ﬁt to a 2-dimensional Euclidean space
produced a larger error than the (near-perfect) spherical model on
this data set.
We suspect that the underlying reason that spherical coordinates
do not model the Internet well is that the paths through the Internet
do not “wrap around” the Earth appreciably. Inspection of Internet
paths originating in east Asia suggests that few links connect Asia
and Europe directly. For instance, packets sent from Korea to Israel
travel east across two oceans rather than west across land. Some
paths do connect Asia and Europe directly, of course, but they are
not prevalent in the data. A spherical model assumes that such links
would always be used when they make the path shorter. Since this
case is not the usual one, the fact that the spherical model correctly
predicts the few paths across Asia is negated by the fact that it in-
correctly predicts the many paths that go the long way, avoiding
Asia. Anecdotal evidence gathered with traceroute on PlanetLab
nodes supports this observation.
5.4 Height vectors
A height vector consists of a Euclidean coordinate augmented
with a height. The Euclidean portion models a high-speed Internet
core with latencies proportional to geographic distance, while the
height models the time it takes packets to travel the access link
from the node to the core. The cause of the access link latency may
be queuing delay (as in the case of an oversubscribed cable line),
low bandwidth (as in the case of DSL, cable modems, or telephone
modems), or even the sheer length of the link (as in the case of
long-distance ﬁber-optic cables).
A packet sent from one node to another must travel the source
node’s height, then travel in the Euclidean space, then travel the
destination node’s height. Even if the two nodes have the same
height, the distance between them is their Euclidean distance plus
the two heights. This is the fundamental di(cid:11)erence between height
vectors and adding a dimension to the Euclidean space. Intuitively,
packet transmission can only be done in the core, not above it.
The height vector model is implemented by redeﬁning the usual
vector operations (note the + on the right hand side of the subtrac-
tion equation):
[x; xh] (cid:0) (cid:2)y; yh(cid:3) = (cid:2)(x (cid:0) y); xh + yh(cid:3)
+ xh
(cid:11) (cid:2) [x; xh] = [(cid:11)x; (cid:11)xh]
(cid:13)(cid:13)(cid:13)
[x; xh](cid:13)(cid:13)(cid:13)
= (cid:13)(cid:13)(cid:13)
x(cid:13)(cid:13)(cid:13)
Each node has a positive height element in its coordinates, so that
its height can always be scaled up or down.
The e(cid:11)ect of these equations is the following. In a normal Eu-
clidean space, a node that ﬁnds itself too close to another node will
move away from the other node. A node that ﬁnds itself too close
to nodes on all sides has nowhere to go: the spring forces cancel out
and it remains where it is. In the height vector system, the forces
cancel out in the Euclidean plane, but the height forces reinforce
each other, pushing the node up away from the Euclidean plane.
Similarly, a node that ﬁnds itself too far away from other nodes on
all sides will move down closer to the plane.
Figure 15 shows that height vectors perform better than both 2D
and 3D Euclidean coordinates.
Examination of the coordinates that the height vector model as-
signs to hosts in the PlanetLab data set shows that the model cap-
tures the e(cid:11)ect we hoped. Well-connected nodes, such as the ones
at New York University, are assigned the minimum height. Two
1.0
0.8
0.6
0.4
0.2
s
r
i
a
P
e
d
o
N
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
0.0
0
1.0
0.8
0.6
0.4
0.2
s
r
i
a
P
e
d
o
N