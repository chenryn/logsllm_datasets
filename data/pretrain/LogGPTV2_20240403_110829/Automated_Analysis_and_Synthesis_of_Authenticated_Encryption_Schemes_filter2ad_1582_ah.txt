proc Encrypt[∆, π](N, A, M)
M1 ··· M2mM2m+1 := M; X := 02n; v := 1
// |Mi| = n for i ≤ 2n, and |M2m+1|  n then
// |M0
1| = n
1M0
M0
V := πT (M0
C0
1 := πL(C0
2 := M2m+1
1); C0
210∗) ⊕ M0
2 := V [1,|M0
2|] ⊕ M0
2
1; C2m+1 := C0
1C0
2
elseif |M2m+1| = n then C2m+1 := πT (0n) ⊕ M2m+1
else C2m+1 := πT (0n)[1,|M2m+1|] ⊕ M2m+1
V ←$ {0, 1}n
return C1 ··· C2mC2m+1 k V [1, τ]
// Experiments H4, H5
proc Encrypt[∆, π](N, A, M)
M1 ··· M2mM2m+1 := M; X := 02n; v := 1
// |Mi| = n for i ≤ 2n, and |M2m+1| < 2n
for i = 1 to m do
T := (N, A, v); π ←$ Perm(T , n)
(Y, C2i−1C2i) := Encπ(T, X, M2i−1M2i)
C2i−1C2i ←$ {0, 1}2n
v := v + Cost(Π); X := Y
T := (N, A, v); L := (N, A, v + 1)
C2m+1 ←$ {0, 1}|M2m+1|; V ←$ {0, 1}n
return C1 ··· C2mC2m+1 k V [1, τ]
Figure B.4: Experiments H1–H5 in the proof of Theorem B.1. Experiments H2 and H5 include the corresponding
boxed statements, but H1 and H4 do not.
Theorem B.2. Let Π[E] = (K,E,D) be an AE scheme on {0, 1}∗ such that Auth(G−
2 ) = true, where
2 are the unlabeled graphs for algorithms Dec and Tag of Π, respectively. Then for any adversary A,
G−
1 , G−
there is an adversary B with Advauth
(B), where ‘ is the number
of (full) blocks in the forgery output by A. Adversary B has the same running time as A and makes at most
(Cost(Π) + 1) · σ/2 queries, where σ is the total number of (full) message blocks in the queries of A.
Π[E](A) ≤ 2−τ + ‘(Cost(Π) + 2)/2n + Adv±fprp
1 , G−
E
24
// Experiments H1, H2
proc Decrypt[π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2mC2m+1 k tag := C
// |Ci| = n for i ≤ 2m, |C2m+1| < 2n, and |tag| = τ
X := 02n; v := 1
for i = 1 to ‘ do
T := (N, A, v); (Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
v := v + Cost(Π); X := Y
(X, M2m+1) := ]Encπ((N, A, v), X, C2m+1)
π ←$ Perm(T , n);
T := (N, A, 1 − v); V := Tagπ(T, X)
if tag 6= V [1, τ] then return ⊥
return M1 ··· M2mM2m+1
v := v + d|M2m+1|/ne − 1
// Experiment H3
proc Decrypt[π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2mC2m+1 k tag := C
// |Ci| = n for i ≤ 2m, |C2m+1| < 2n, and |tag| = τ
X := 02n; v := 1
for i = 1 to ‘ do
T := (N, A, v); (Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
v := v + Cost(Π); X := Y
(X, M2m+1) := ]Encπ((N, A, v), X, C2m+1); V ←$ {0, 1}n
if tag 6= V [1, τ] then return ⊥
return M1 ··· M2mM2m+1
Figure B.5: Experiments H1–H3 in the proof of Theorem B.2. Experiment H2 includes the corresponding boxed
statement, but experiment H1 does not. Each experiment also has a procedure Encrypt[π], implementing the
encryption algorithm of Π[π], that is not shown for simplicity.
Proof. Adversary B runs A. For each of A’s encryption queries, B runs the encryption scheme of Π[E] but
with each call to EK replaced by a query to B’s ﬁrst oracle, and returns the ciphertext to A. When A
outputs a forgery (N, A, C), adversary B runs the decryption scheme of Π[E] on (N, A, C), but with each
K replaced by a query to B’s oracles. Adversary B returns 1 if A output a valid forgery, and
call to EK/E−1
returns 0 otherwise. Let Π[π] be the ideal variant of Π[E], where calls to EK/E−1
K are replaced by queries to
Π[π](A) ≤ 2−τ + ‘(Cost(Π)+2)/2n.
π/π−1, respectively, with π ←$ Perm(T , n). It suﬃces to show that Advauth
Consider experiments H1–H3 in Figure B.5. In H1, the adversary has oracle access to the encryption
and decryption schemes of Π[π]. Experiment H2 is identical to H1, except that when running the decryption
algorithm, we re-sample π ←$ Perm(T , n) before using it in Tag. Experiment H3 is identical to H2, except
that instead of using Tag to generate the tag, we sample the tag uniformly.
Let (N, A, C) be the forgery output by A. Suppose that there is no encryption query (N, A, M0) with
d|M0|/ne = d(|C| − τ)/ne. Since decryption of the forgery query involves calling Tag with a tweak that has
never been used before, we have Pr[A forges in H1] = Pr[A forges in H2]. An application of Lemma 3.1 to
lines 12–13 of Auth, shows that the string V := Tagπ(T, X) is uniform. Thus Pr[A forges in H2] is equal to
Pr[A forges in H3], which is in turn at most 2−τ. Hence Advauth
Now, suppose that there is an encryption query (N, A, M0) such that d|M0|/ne = d(|C| − τ)/ne. (Note
that there can be at most one such query, since the attacker is not allowed to re-use a nonce value in two
encryption queries.) Let C0 be the corresponding ciphertext output by this encryption query. We say that
a ciphertext is complete if its length (excluding the tag) is a multiple of n. First consider the case that
one of C and C0 is complete and the other is incomplete. For example, suppose that C is complete and C0
is incomplete. Let S be the subset of Perm(T , n) such that for any f ∈ S and for any query (T, X) that
Π[π](A) ≤ 2−τ.
25
// Experiments P1, P2
proc Decrypt[∆, π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2mC2m+1 k tag := C; X := 02n; v := 1
// |Ci| = n and |tag| = τ
for i = 1 to m do
T := (N, A, v); π ←$ S
(Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
v := v + Cost(Π); X := Y
2m+1 ⊕ C0
M2m+1 := M0
T := (N, A, 1 − v); π ←$ S; V := Tagπ(T, X)
if tag 6= V [1, τ] then return false
return true
2m+1 ⊕ C2m+1; X := X ⊕ (M2m+1 k 0n)
// Experiments P3+j, for 0 ≤ j ≤ m − r + 1
proc Decrypt[∆, π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2mC2m+1 k tag := C; X := 02n; v := 1
// |Ci| = n, and |tag| = τ
for i = 1 to m do
T := (N, A, v); π ←$ S
(Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
if r ≤ i ≤ r + j then Y ←$ {0, 1}n
v := v + Cost(Π); X := Y
2m+1 ⊕ C0
M2m+1 := M0
π ←$ S; V := Tagπ(T, X)
if j = m − r + 1 then V ←$ {0, 1}n
if tag 6= V [1, τ] then return false
return true
2m+1 ⊕ C2m+1; X := X ⊕ (M2m+1 k 0n)
Figure B.6: Experiments P1, . . . , P4+m−r in the proof of Theorem B.2. Experiment P2 includes the corresponding
boxed statement, but P1 does not. Each experiment also has a procedure Encrypt[∆, π], implementing the encryption
algorithm of Π[π], that is not shown for simplicity. Here S is the set of f ∈ Perm(T , n) such that for any query
(T, X) that Encrypt[∆, π](N, A, M0) makes to π, f(T, X) = π(T, X).
encrypting (N, A, M0) via Π[π] makes to π, we have f(T, X) = π(T, X). From the proof of Theorem B.1,
we have (i) the outputs of the encryption oracle are independent of the key ∆, and (ii) π(T,·), for any
T ∈ N × A × Z+, is independent of ∆. Let X be the state that Tag receives on querying (N, A, C), and let
X0 be the corresponding state on querying (N, A, C0). Then X is independent of ∆, but X0[1, n] is the xor
of ∆ and another string that is independent of ∆. Hence X[1, n] = X0[1, n] with probability at most 2−n. If
X[1, n] 6= X0[1, n], by applying Lemma 3.2 to lines 20–22 of Auth, the tag of C is within statistical distance
at most 2/2n from a uniform string, independent of the prior ciphertexts. Hence the chance of forgery is at
most 3/2n + 2−τ.
Suppose that either (i) both C and C0 are complete, or (ii) both C and C0 are incomplete. We consider
2m+1 k tag0. If |C2m+1| =
case (i); case (ii) is similar. Let C = C1 ··· C2mC2m+1 k tag and C0 = C0
2m+1| = 0 then the situation is like the basic case, which is already proven by Theorem 3.4. What remains
|C0
is the case |C2m+1| = |C0
Case 1: Cj = C0
deterministic, the forgery is invalid.
Case 2: Cj = C0
2m+1. Let X be the state that Tag receives on
querying (N, A, C), and let X0 be the corresponding state on querying (N, A, C0). Then X[1, n] = X0[1, n]⊕
2m+1 6= X0[1, n]. By applying Lemma 3.2 to lines 20–22 of procedure Auth, the tag of C is within
C2m+1 ⊕ C0
j for every j ≤ 2m + 1. Then tag and tag0 must be diﬀerent and thus, since Tag is
2m+1| = n. We consider the following cases.
j for every j ≤ 2m, but C2m+1 6= C0
1 ··· C0
2mC0
26
2r−1C0
2r, and Cj = C0