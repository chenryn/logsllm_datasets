### Enhancing the Lives of SREs: Socializing a Product and Achieving Buy-In

The process of socializing a product and achieving buy-in across an organization is crucial for the project’s success. Do not underestimate the effort required to raise awareness and interest in your software product; a single presentation or email announcement is insufficient. Successfully socializing internal software tools to a large audience requires:

- A consistent and coherent approach
- User advocacy
- The sponsorship of senior engineers and management, to whom you will need to demonstrate the utility of your product

#### Considering the Customer Perspective

It is essential to consider the perspective of the customer to make your product usable. Engineers may not have the time or inclination to delve into the source code to figure out how to use a tool. Although internal customers are generally more tolerant of rough edges and early alphas than external customers, providing documentation is still necessary. SREs are busy, and if your solution is too difficult or confusing, they will likely develop their own solution.

#### Setting Expectations

When an engineer with years of experience in a problem space begins designing a product, it's easy to envision a utopian end-state. However, it is important to differentiate between aspirational goals and minimum success criteria (or Minimum Viable Product). Projects can lose credibility and fail by promising too much, too soon. Conversely, if a product does not promise a sufficiently rewarding outcome, it can be challenging to convince internal teams to try something new. Demonstrating steady, incremental progress through small releases raises user confidence in your team’s ability to deliver useful software.

In the case of Auxon, we struck a balance by planning a long-term roadmap alongside short-term fixes. Teams were promised that:

- Any onboarding and configuration efforts would provide the immediate benefit of alleviating the pain of manually bin-packing short-term resource requests.
- As additional features were developed for Auxon, the same configuration files would carry over and provide new, broader, long-term cost savings and other benefits. The project roadmap enabled services to quickly determine if their use cases or required features were not implemented in the early versions.

Meanwhile, Auxon’s iterative development approach fed into development priorities and new milestones for the roadmap.

#### Identifying Appropriate Customers

The team developing Auxon realized that a one-size-fits-all solution might not work for everyone. Many larger teams already had home-grown solutions for capacity planning that worked passably well. While these custom tools were not perfect, these teams did not experience enough pain in the capacity planning process to try a new tool, especially an alpha release with rough edges.

The initial versions of Auxon intentionally targeted teams that had no existing capacity planning processes in place. Because these teams would have to invest in configuration effort whether they adopted an existing tool or our new approach, they were interested in adopting the newest tool. The early successes Auxon achieved with these teams demonstrated the utility of the project, turning the customers themselves into advocates for the tool. Quantifying the usefulness of the product proved further beneficial. When we onboarded one of Google’s Business Areas, the team authored a case study detailing the process and comparing the before and after results. The time savings and reduction of human toil alone presented a significant incentive for other teams to give Auxon a try.

#### Providing Customer Service

Even though software developed within SRE targets an audience of TPMs and engineers with high technical proficiency, any sufficiently innovative software still presents a learning curve to new users. Don’t hesitate to provide white-glove customer support for early adopters to help them through the onboarding process. Sometimes automation also entails emotional concerns, such as fear that someone’s job will be replaced by a shell script. By working one-on-one with early users, you can address those fears personally and demonstrate that rather than owning the toil of performing a tedious task manually, the team instead owns the configurations, processes, and ultimate results of their technical work. Later adopters are convinced by the positive examples of early adopters.

Furthermore, because Google’s SRE teams are distributed globally, early-adopter advocates for a project are particularly beneficial, as they can serve as local experts for other teams interested in trying out the project.

#### Designing at the Right Level

A key principle of Auxon’s design was agnosticism—writing the software to be generalized to allow myriad data sources as input. This meant that customers were not required to commit to any one tool to use the Auxon framework. This approach allowed Auxon to remain sufficiently general even as teams with divergent use cases began to use it. We approached potential users with the message, “come as you are; we’ll work with what you’ve got.” By avoiding over-customization for one or two big users, we achieved broader adoption across the organization and lowered the barrier to entry for new services.

We have also consciously avoided defining success as 100% adoption across the organization. In many cases, there are diminishing returns on closing the last mile to enable a feature set that is sufficient for every service in the long tail at Google.

#### Team Dynamics

In selecting engineers to work on an SRE software development product, we have found great benefit from creating a seed team that combines generalists who can quickly get up to speed on a new topic with engineers possessing a breadth of knowledge and experience. A diversity of experiences covers blind spots and the pitfalls of assuming that every team’s use case is the same as yours.

It is essential for your team to establish a working relationship with necessary specialists and for your engineers to be comfortable working in a new problem space. For SRE teams at most companies, venturing into this new problem space requires outsourcing tasks or working with consultants, but SRE teams at larger organizations may be able to partner with in-house experts. During the initial phases of conceptualizing and designing Auxon, we presented our design document to Google’s in-house teams specializing in Operations Research and Quantitative Analysis to draw upon their expertise and bootstrap the Auxon team’s knowledge about capacity planning.

As project development continued and Auxon’s feature set grew more broad and complex, the team acquired members with backgrounds in statistics and mathematical optimization. These new team members were able to identify areas for improvement when the project’s basic functionality was complete and adding finesse became the top priority.

The right time to engage specialists will vary from project to project. As a rough guideline, the project should be successfully off the ground and demonstrably successful, such that the skills of the current team would be significantly bolstered by the additional expertise.

#### Fostering Software Engineering in SRE

What makes a project a good candidate to take the leap from a one-off tool to a fully-fledged software engineering effort? Strong positive signals include engineers with firsthand experience in the relevant domain who are interested in working on the project, and a target user base that is highly technical (and therefore able to provide high-signal bug reports during the early phases of development). The project should provide noticeable benefits, such as reducing toil for SREs, improving an existing piece of infrastructure, or streamlining a complex process.

It is important for the project to fit into the overall set of objectives for the organization, so that engineering leaders can weigh its potential impact and subsequently advocate for your project, both with their reporting teams and with other teams that might interface with their teams. Cross-organizational socialization and review help prevent disjoint or overlapping efforts, and a product that can easily be established as furthering a department-wide objective is easier to staff and support.

What makes a poor candidate project? Many of the same red flags you might instinctively identify in any software project, such as software that touches many moving parts at once, or software design that requires an all-or-nothing approach that prevents iterative development. Because Google SRE teams are currently organized around the services they run, SRE-developed projects are particularly at risk of being overly specific work that only benefits a small percentage of the organization. Because team incentives are aligned primarily to provide a great experience for the users of one particular service, projects often fail to generalize to a broader use case as standardization across SRE teams comes in second place. At the opposite end of the spectrum, overly generic frameworks can be equally problematic; if a tool strives to be too flexible and too universal, it runs the risk of not quite fitting any use case and therefore having insufficient value in and of itself. Projects with grand scope and abstract goals often require significant development effort but lack the concrete use cases required to deliver end-user benefit on a reasonable timeframe.

As an example of a broad use case: a layer-3 load balancer developed by Google SREs proved so successful over the years that it was repurposed as a customer-facing product offering via Google Cloud Load Balancer [Eis16].

#### Successfully Building a Software Engineering Culture in SRE: Staffing and Development Time

SREs are often generalists, as the desire to learn breadth-first rather than depth-first lends itself well to understanding the bigger picture. These engineers often have strong coding and software development skills but may not have the traditional SWE experience of being part of a product team or thinking about customer feature requests. Partnering with engineers, TPMs, or PMs who are familiar with user-facing software development can help build a team software development culture that brings together the best of both software product development and hands-on production experience.

Dedicated, non-interrupted project work time is essential to any software development effort. Dedicated project time is necessary to enable progress on a project, as it is nearly impossible to write code—much less concentrate on larger, more impactful projects—when you’re switching between several tasks in the course of an hour. Therefore, the ability to work on a software project without interruptions is often an attractive reason for engineers to begin working on a development project. Such time must be aggressively defended.

The majority of software products developed within SRE begin as side projects whose utility leads them to grow and become formalized. At this point, a product may branch off into one of several possible directions:

- Remain a grassroots effort developed in engineers’ spare time
- Become established as a formal project through structured processes
- Gain executive sponsorship from within SRE leadership to expand into a fully staffed software development effort

However, in any of these scenarios—and this is a point worth stressing—it is essential that the SREs involved in any development effort continue working as SREs instead of becoming full-time developers embedded in the SRE organization. Immersion in the world of production gives SREs performing development work an invaluable perspective, as they are both the creator and the customer for any product.

#### Getting There

If you like the idea of organized software development in SRE, you’re probably wondering how to introduce a software development model to an SRE organization focused on production support.

First, recognize that this goal is as much an organizational change as it is a technical challenge. SREs are used to working closely with their teammates, quickly analyzing and reacting to problems. Therefore, you’re working against the natural instinct of an SRE to quickly write some code to meet their immediate needs. If your SRE team is small, this approach may not be problematic. However, as your organization grows, this ad hoc approach won’t scale, resulting in largely functional yet narrow or single-purpose software solutions that can’t be shared, inevitably leading to duplicated efforts and wasted time.

Next, think about what you want to achieve by developing software in SRE. Do you just want to foster better software development practices within your team, or are you interested in software development that produces results that can be used across teams, possibly as a standard for the organization? In larger established organizations, the latter change will take time, possibly spanning multiple years. Such a change needs to be tackled on multiple fronts but has a higher payback. The following are some guidelines from Google’s experience:

**Create and Communicate a Clear Message**

It is important to define and communicate your strategy, plans, and—most importantly—the benefits SRE gains from this effort. SREs are a skeptical lot (in fact, skepticism is a trait for which we specifically hire); an SRE’s initial response to such an effort will likely be, “that sounds like too much overhead” or “it will never work.” Start by making a compelling case of how this strategy will help SRE; for example:

- Consistent and supported software solutions speed ramp-up for new SREs.
- Reducing the number of ways to perform the same task allows the entire department to benefit from the skills any single team has developed, thus making knowledge and effort portable across teams.

When SREs start to ask questions about how your strategy will work, rather than if the strategy should be pursued, you know you’ve passed the first hurdle.

**Evaluate Your Organization’s Capabilities**

SREs have many skills, but it is relatively common for an SRE to lack experience as part of a team that built and shipped a product to a set of users. To develop useful software, you are effectively creating a product team. That team includes required roles and skills that your SRE organization may not have formerly demanded. Will someone play the role of product manager, acting as the customer advocate? Does your tech lead or project manager have the skills and/or experience to run an agile development process?

Begin filling these gaps by taking advantage of the skills already present in your company. Ask your product development team to help you establish agile practices via training or coaching. Solicit consulting time from a product manager to help you define product requirements and prioritize feature work. Given a large enough software development opportunity, there may be a case to hire dedicated people for these roles. Making the case to hire for these roles is easier once you have some positive experiment results.

**Launch and Iterate**

As you initiate an SRE software development program, your efforts will be followed by many watchful eyes. It is important to establish credibility by delivering a product of value in a reasonable amount of time. Your first round of products should aim for relatively straightforward and achievable targets—ones without controversy or existing solutions. We also found success in pairing this approach with a six-month rhythm of product update releases that provided additional useful features. This release cycle allowed teams to focus on identifying the right set of features to build, and then building those features while simultaneously learning how to be a productive software development team. After the initial launch, some Google teams moved to a push-on-green model for even faster delivery and feedback.

**Don’t Lower Your Standards**

As you start to develop software, you may be tempted to cut corners. Resist this urge by holding yourself to the same standards to which your product development teams are held. For example:

- Ask yourself: if this product were created by a separate dev team, would you onboard the product?
- If your solution enjoys broad adoption, it may become critical to SREs in order to successfully perform their jobs. Therefore, reliability is of utmost importance. Do you have proper code review practices in place? Do you have end-to-end or integration testing? Have another SRE team review the product for production readiness as they would if onboarding any other service.

It takes a long time to build credibility for your software development efforts, but only a short time to lose credibility due to a misstep.

#### Conclusions

Software engineering projects within Google SRE have flourished as the organization has grown, and in many cases, the lessons learned from and successful execution of earlier software development projects have paved the way for subsequent endeavors. The unique hands-on production experience that SREs bring to developing tools can lead to innovative approaches to age-old problems, as seen with the development of Auxon to address the complex problem of capacity planning. SRE-driven software projects are also noticeably beneficial to the company in developing a sustainable model for supporting services at scale. Because SREs often develop software to streamline inefficient processes or automate common tasks, these projects mean that the SRE team doesn’t have to scale linearly with the size of the services they support.

Ultimately, the benefits of having SREs devote some of their time to software development are reaped by the company, the SRE organization, and the SREs themselves.