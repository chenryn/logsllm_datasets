title:On the Incoherencies in Web Browser Access Control Policies
author:Kapil Singh and
Alexander Moshchuk and
Helen J. Wang and
Wenke Lee
On the Incoherencies in Web Browser Access Control Policies
Kapil Singh∗, Alexander Moshchuk†, Helen J. Wang† and Wenke Lee∗
∗Georgia Institute of Technology, Atlanta, GA
Email: {ksingh, wenke}@cc.gatech.edu
†Microsoft Research, Redmond, WA
Email: {alexmos, helenw}@microsoft.com
Abstract—Web browsers’ access control policies have evolved
piecemeal in an ad-hoc fashion with the introduction of new
browser features. This has resulted in numerous incoherencies.
In this paper, we analyze three major access control ﬂaws in
today’s browsers: (1) principal labeling is different for different
resources, raising problems when resources interplay, (2) run-
time changes to principal identities are handled inconsistently,
and (3) browsers mismanage resources belonging to the user
principal. We show that such mishandling of principals leads
to many access control incoherencies, presenting hurdles for
web developers to construct secure web applications.
A unique contribution of this paper is to identify the com-
patibility cost of removing these unsafe browser features. To do
this, we have built WebAnalyzer, a crawler-based framework
for measuring real-world usage of browser features, and used
it to study the top 100,000 popular web sites ranked by Alexa.
Our methodology and results serve as a guideline for browser
designers to balance security and backward compatibility.
I. INTRODUCTION
Web browsers have gradually evolved from an application
that views static web pages to a rich application platform
on which mutually distrusting web site principals co-exist
and interact [1]–[3]. Along the way, the browsers’ access
control policies have also been evolving, but unfortunately
this happened in a piecemeal and ad-hoc fashion alongside
the introduction of new browser features (such as AJAX)
or resources (such as local storage). There have been no
principles or invariants that a new access control policy must
follow or maintain. Consequently, numerous incoherencies
in browsers’ access control policies exist, presenting hurdles
for web programmers to build robust web applications.
In this paper, we examine the current state of browser ac-
cess control policies, uncover and analyze the incoherencies
in these policies, and measure the cost of eliminating them
in today’s web.
An access control policy conﬁgures how a principal
accesses certain resources. This involves deﬁning how prin-
cipals are identiﬁed, how resources are labeled with principal
IDs, and how these labels may be changed and handled at
runtime. Unfortunately, browsers often mismanage princi-
pals, resulting in access control inconsistencies. We focus on
three major sources of these problems: inconsistent principal
labeling, inappropriate handling of principal label changes,
and disregard of the user principal.
Inconsistent principal
labeling. Today’s browsers do
not have the same principal deﬁnition for all browser re-
sources (which include the Document Object Model (DOM),
network, cookies, other persistent state, and display). For
example, for the DOM (memory) resource, a principal is
labeled by the origin deﬁned in the same origin policy
(SOP) in the form of  [4]; but
for the cookie resource, a principal is labeled by . Different principal deﬁnitions for two resources are
benign as long as the two resources do not interplay with
each other. However, when they do, incoherencies arise. For
example, when cookies became accessible through DOM’s
“document” object, DOM’s access control policy, namely the
SOP, undermines some of cookie’s access control policies
(Section II-C1 gives a more detailed analysis).
Inappropriate handling of principal label changes. A
web application is allowed to change its principal’s label
at runtime through the use of the document.domain
DOM property. Nevertheless,
the access control state is
often kept static and such “effective” principal IDs set by
document.domain are disregarded. This leads to access
control incoherencies.
Disregard of
the user principal. In this paper, we
introduce the concept of a user principal in the browser
setting. The user principal represents the user of a browser.
Sometimes,
the user principal is disregarded in existing
browsers’ access control policies. Certain resources should
belong to the user principal exclusively. They include the
user-private state such as clipboard and geolocation, user
actions like navigating back and forward in browsing history,
and a browser’s UI including the current tab. These resources
should not be accessible by web applications without user
permission; otherwise, a web site could impersonate the user
and violate user privacy. Unfortunately, today’s DOM APIs
expose some of these resources to web applications.
To systematically analyze and uncover the incoherencies
created by these three problem areas, we have devised a set
of coherency principles and constructed tests to check major
browsers (including Internet Explorer, Firefox, and Google
Chrome) for violations of these principles and to uncover
the incoherencies that ensue.
A major goal of our work is to evaluate the compatibility
cost of removing unsafe browser features that contribute to
the incoherencies. To this end, we have built WebAnalyzer, a
scalable, crawler-based browser-feature measurement frame-
work that can inspect a large number of web pages by
rendering them in instrumented browsers. WebAnalyzer cap-
tures the DOM interactions of a page by interposing between
the JavaScript engine and the DOM renderer, captures the
protocol-level behavior through an HTTP proxy, and ana-
lyzes the visual appearance of a page by extracting its page
layout.
Armed with WebAnalyzer, we have conducted measure-
ments on the prevalence of unsafe browser features over the
most popular 100,000 web sites as ranked by Alexa [5]. Our
results pinpoint some unsafe features that have little back-
ward compatibility cost and are thus possible to remove from
current browsers without breaking many sites. For example,
we ﬁnd that most APIs controlling user-owned resources,
descendant navigation, and incoherencies in XMLHttpRe-
quest’s principal
labeling have low compatibility costs,
whereas a substantial number of sites depend on “dangerous”
functionality provided by document.domain or transpar-
ent cross-origin overlapping frames. Overall, we believe that
by estimating the prevalence of unsafe features on the web,
our measurements can guide future browsers to make better
security vs. functionality trade-offs.
In summary, this work makes the following contributions:
• A systematic, principal-driven analysis of access con-
trol incoherencies in today’s browsers.
• Introduction of the user principal concept for
the
browser setting.
• A comprehensive, extensible compatibility measure-
ment framework.
• The ﬁrst large-scale measurements on the compatibility
cost of coherent access control policies.
The rest of the paper is organized as follows. Section II
presents our systematic analysis of today’s browser access
control policies and enumerates access control incoheren-
cies. Section III discusses our measurement motivation,
tools, and infrastructure. Section IV presents our measure-
ment results and gives recommendations on which unsafe
policies can be eliminated with acceptable compatibility
cost. Section V discusses limitations of our approach, Sec-
tion VI presents related work, and Section VII concludes.
II. AN ANALYSIS OF BROWSER ACCESS CONTROL
INCOHERENCIES
In this section, we present our systematic analysis of
today’s browser access control policies and enumerate their
incoherencies.
A. Methodology
1) Each shared browser resource, i.e. a resource shared
among multiple principals, should have a principal
deﬁnition (labeling of principals that share the re-
source) and have an access control policy.
2) For each non-shared browser resource that is explicitly
owned by a single principal, the resource should have
an owner principal with a speciﬁc label or be globally
accessible.
3) When two resources interplay, both resources should
have the same principal deﬁnition.
This is because when two resources have different
ways of labeling principals and when they interplay,
their respective access control policies can be in con-
ﬂict.
4) All access control policies must consider the runtime
label of the principals, namely, the “effective” princi-
pal ID.
5) The user principal’s resources should not be accessible
by web applications.
This is because when the user principal’s resources
are accessible by web applications, the user’s privacy
may be compromised or a web application could act
on the user’s behalf without the user’s knowledge.
We look for violations of these principles and check for
incoherencies when violations take place. The pseudocode
below illustrates our manual analysis process.
0 foreach (browser resources) {
1
if exists (access control) {
2
3
4
if !considers (effective principal ID)
check improper principal ID changes
} else
check if lack of policy is appropriate
5
6 }
7
8 foreach (pairs of resources) {
9
if (they interplay &&
the principal/owner labeling differs)
check resource interplay incoherencies
10
11
12 }
For each resource, we check whether it has an access
control policy. If not, we check whether the lack of policy
is appropriate (line 5, for example, Section II-E illustrates
on how some resources that belong to the user principal
lack access control considerations). If yes, we further check
whether the access control policy considers the effective
principal ID that sites can change dynamically at render-
time. If it does not, then we check for incoherencies there
(line 3, Section II-D).
For a systematic analysis, we establish the following
access control coherency principles to guide our search for
incoherencies:
In addition, we go through all pairs of resources; if they
interplay and if they have the different principal deﬁnitions,
we check for incoherencies (line 11, Section II-C). Careful
Shared resources
Principal deﬁnition
DOM objects
cookie
localStorage
sessionStorage
display
SOP origin
domain/path
SOP origin
SOP origin
SOP origin and dual ownership *
Table I
SHARED BROWSER RESOURCES AND THEIR RESPECTIVE PRINCIPAL
DEFINITIONS. *DISPLAY ACCESS CONTROL IS NOT WELL-DEFINED IN TODAY’S
BROWSERS.
Non-shared resources
Owner
XMLHttpRequest
postMessage
clipboard
browser history
geolocation
SOP origin
SOP origin
user*
user*
user
Table II
NON-SHARED BROWSER RESOURCES AND THEIR RESPECTIVE OWNER
PRINCIPAL. *ACCESS CONTROL IS NOT WELL-DEFINED IN TODAY’S BROWSERS.
readers may wonder what happens to the interplay of more
than two resources. Coherency in this context is a transitive
property. That is, if a Resource 1 and Resource 2’s access
control policies are coherent (namely have the same princi-
pal deﬁnitions) and that of Resource 2 and Resource 3 are
coherent, then the access control policies of Resource 1 and
Resource 3 are also coherent since their principal deﬁnitions
should also be the same.
The enumeration of resources is done by manually brows-
ing through IE’s source code (more in Section II-B). Our
incoherency checks are done through test programs on major
browser versions.
Despite our effort to be comprehensive, it is possible that
we miss some browser resources or miss some interplays
among the resources. We hope our work to be a start for
a community effort on mapping out the full set of browser
access control policies.
B. Browser resources
In this section, we enumerate all types of browser re-
sources. A browser resource may be shared among (some
deﬁnition of) principals or may not be shared and is ex-
plicitly owned by some principal. Table I shows the shared
resources and their respective principal deﬁnitions. Table II
shows non-shared resources and their respective owners.
We now describe each resource, their principal or owner
deﬁnition, and its access control policy in turn.
A DOM object
is a memory resource shared among
principals labeled with SOP origins, namely, . The access control policy of DOM objects is
governed by SOP [4], which mandates that two documents
from different origins cannot access each other’s HTML
documents using the Document Object Model (DOM),
which is the platform- and language-neutral interface that
allows scripts to dynamically access and update the content,
structure and style of a document [6].
A cookie is a persistent state resource. The browser
ensures that a site can only set its own cookie and that
a cookie is attached only to HTTP requests to that site.
By default, the principal is labeled with the host name
and path, but without
the protocol and the port num-
ber [7], [8], unlike SOP origins. For example, if the page
a.com/dir/1.html creates a cookie, then that cookie
is accessible to a.com/dir/2.html and other pages
from that dir/ directory and its subdirectories, but is not
accessible to a.com/. Furthermore, https://a.com/
and http://a.com/ share the cookie store unless a
cookie is marked with a “secure” ﬂag. Non-HTTPS sites
can still set “secure” cookies in some implementations, but
cannot read them back [9]–[11]. A web programmer can
make cookie access less restrictive by setting a cookie’s
domain attribute to a postﬁx domain or the path name to
be a preﬁx path.
Local storage is the persistent client-side storage shared
among principals deﬁned by SOP origins [12].
Session storage is storage for a tab [12]. Each tab has a
unique set of session storage areas, one for each SOP origin.
The sessionStorage values are not shared between tabs. The
lifetime of this storage is the same as that of the tab.
Display does not have a well-speciﬁed access control
policy in today’s browsers and standards (corresponding to
line 5 in our pseudocode). Our earlier work Gazelle [3]
speciﬁed an access control policy for display (and Gazelle
further advocated that this policy be enforced by the browser
kernel, unlike existing browsers). In Gazelle’s model, a web
site principal delegates its display area to another principal in
the form of cross-domain iframes (or objects, images). Such
an iframe (window) is co-owned by both the host page’s
principal, called landlord, and the nested page’s principal,
called tenant (both labeled with SOP origins). Principals
other than the landlord and the tenant have no access per-
missions for the window. For the top-level window, the user
principal owns it and plays the role of its landlord. Gazelle’s
policy further speciﬁes how landlord and tenant should
access the four attributes of a window, namely the position,
dimensions, pixels, and URL location. This speciﬁcation
guarantees that the tenant cannot interfere with the landlord’s
display, and that the tenant’s pixels, DOM objects, and
navigation history are private to the tenant. Gazelle’s policy
is coherent with SOP. In Table III, we summarized the access
control matrix for Gazelle, IE 8, Firefox 3.5, and Chrome 2.
The access control of the URL location attribute corresponds
to the navigation policy of a browser. Descendant navigation
policy allows navigating a descendant window regardless
of its origin; this was advocated and implemented over
several browsers [13]. Gazelle’s policy is child navigation
Landlord
Tenant
position (x,y,z)
dimensions (height, width)
pixels
URL location
Gazelle
RW
RW
W
IE
RW
RW
W*
W
FF/Chrome
Gazelle
RW
RW
W*
RW*
R
RW
RW
IE
RW
RW
RW
RW
FF/Chrome
R
RW
RW