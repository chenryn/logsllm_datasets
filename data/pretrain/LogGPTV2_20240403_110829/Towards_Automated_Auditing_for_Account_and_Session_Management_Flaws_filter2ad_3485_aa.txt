title:Towards Automated Auditing for Account and Session Management Flaws
in Single Sign-On Deployments
author:Mohammad Ghasemisharif and
Chris Kanich and
Jason Polakis
3
5
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Towards Automated Auditing for Account and Session
Management Flaws in Single Sign-On Deployments
Mohammad Ghasemisharif, Chris Kanich, and Jason Polakis
University of Illinois at Chicago,{mghas2, ckanich, polakis}@uic.edu
Abstract—Single Sign-On (SSO) is both a core and critical compo-
nent of user authentication and authorization on the modern web, as
it is often offered by web and mobile applications alongside credential-
based authentication to facilitate the account creation and login pro-
cess. However, the interplay between local account management and
SSO functionality in the backend leads to flaws that enable or magnify
account hijacking attacks. These flaws are not baked into the actual
SSO protocols, but manifest due to the complexity of supporting sep-
arate but intermingling authentication paths. As a result, these types
of flaws cannot be detected by the SSO protocol or implementation
verification tools proposed in prior work. In this paper we introduce
SAAT, a fully automated modular framework that assesses whether
relying parties (RPs) that use Facebook as the IdP comply with
secure practices and guidelines, and uncovers flaws in account and
session management that stem from or are affected by the interplay
of SSO and local functionality. We conduct a large-scale exploration
of authentication and session practices in Facebook’s RPs, revealing a
volatile ecosystem where SSO support can be suddenly dropped and
17.6% of the tested RPs exhibit non-functional SSO implementations.
This highlights the need for the continuous and systematic testing of
the SSO ecosystem made possible by SAAT. More critically, we find
that security measures are often missing and official guidelines are rou-
tinely overlooked or misconfigured, with only 0.8% of the RPs fully en-
abling re-authentication which can prevent compromise from hijacked
identity provider (IdP) cookies. Our study also shows that less than 2%
of RPs correctly react to SSO revocation and 67% continue to allow
account access even 10 days after revocation. Overall, we envision our
framework as a tool for enabling and guiding widespread remediation
efforts by major SSO identity providers, which were previously infea-
sible due to the sheer scale and inherent mutability of this ecosystem.
I.
INTRODUCTION
Account creation and authentication are essential aspects of the
modern web ecosystem. Creating individual accounts for each web
service is tedious both for the user who needs to manage multiple
passwords, and the service owner who needs to develop and maintain
a complex component of their overall system where any flaw can
have severe security ramifications. Single Sign-On (SSO) mecha-
nisms offer an attractive alternative that allows users to avoid tedious
account creation processes by leveraging their existing accounts on
popular services (referred to as Identity Providers or IdPs). Online
services (referred to as Relying Parties or RPs) can then outsource
some or all of their authentication infrastructure to these IdPs,
enabling a more integrated and uniform browsing experience across
different web services and applications while also streamlining
account and session management for both the RPs and the end users.
Although centralizing authentication with major services like
Facebook and Google can improve security at relying parties
by leveraging their substantial security resources and expertise,
SSO introduces a complementary set of security risks to users.
While the security of the underlying protocols has been studied
in depth [1] and are currently understood to be free of substantial
flaws, the implementation thereof may itself be incorrect [2].
Importantly, most uses of SSO augment, rather than fully replace,
a site’s native authentication mechanisms and there is substantial
flexibility in the integration of the RP’s and the IdP’s authentication
mechanisms. This flexibility has led to a variety of specific
implementations, which unsurprisingly leads to both a challenge
for the RPs to implement said schemes correctly (leading to
various vulnerabilities [3], [4], [5]), and difficulty in longitudinally
evaluating the security of these implementations [6], [7].
Although many of the aforementioned vulnerabilities are
predicated on being successfully authenticated to the IdP, the security
of these services can still create a well-fortified but imperfect single
point of failure in online authentication. These major services are
still not impervious to flaws that enable account hijacking, as shown
by prior research [6], [8]. A recent real-world attack campaign
resulted in the largest hack in Facebook’s history [9], where the
authentication tokens (i.e., cookies) of 50 million users were stolen.
Alarmingly, as had been previously demonstrated by Ghasemisharif
et al. [6], a compromised IdP account allows attackers to obtain
persistent and stealthy long-term access to users’ RP accounts with
little to no option for remediation [6]. In essence, the issues they
identified can be traced back to the complexities that arise from the
co-existence and interplay of two separate account authentication
pathways, that of traditional credentials and that of Single Sign-On,
and the ensuing session management processes.
While numerous studies have conducted extensive evaluations
of the design and implementations of SSO protocols, no prior work
has conducted a systematic, large-scale and in-depth exploration
of account and session management in the SSO ecosystem. We
introduce SAAT, an automated black-box framework for auditing
systems, which use Facebook as the IdP, in the wild. First we
compile a set of best-practice guidelines and recommendations for
core building blocks of the SSO ecosystem: integrated registration,
authentication, and session management. Next, we define a series of
auditing tasks, modelled as finite-state machines, that identify viola-
tions and insecure practices in the implementation of these processes
in Relying Parties. This builds upon our ability to orchestrate actions
and infer state changes in the Identity Provider and Relying Parties.
More importantly, our fully automated testing pipeline handles every
aspect of the SSO protocol; from detection of SSO support and
account registration to access revocation and session termination.
We use SAAT to obtain a large-scale longitudinal view of SSO
support, uncovering a brittle and volatile ecosystem, with 17.6%
of the RPs we tested having non-functional SSO implementations
and almost 8% suddenly dropping support for SSO within a 50-day
© 2022, Mohammad Ghasemisharif. Under license to IEEE.
DOI 10.1109/SP46214.2022.00095
1774
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
period. We also identify a significant lack of security mechanisms
being deployed, with only 0.8% of the RPs adequately protecting
users accounts from IdP cookie hijackers. Moreover, only 1.7%
of the RPs log users out in response to IdP access revocation and
67% continue to allow access to the account even 10 days past the
revocation. Our auditing also reveals that 10% of the tested RPs
violate account merging guidelines. Overall our findings highlight
that SSO-deployment insecurity is not limited to implementation
flaws in the protocols themselves, but instead should be viewed
as an error-prone multicomponent integration process complicated
by local account and session management mechanisms. While our
study focuses on Facebook as the IdP, we also perform a manual
comparative analysis to Google and Apple SSO implementations
in a subset of the analyzed RPs. In 99% of the cases we do not find
any differences across IdPs, indicating that the flaws detected by
our system are not limited to a given IdP implementation but instead
are intrinsic and affect multiple IdPs supported by vulnerable RPs.
It is important to note that some of the flaws that we identify
in our study only become operational after a user’s IdP account is
compromised. Unfortunately, this may result in a lack of incentive
for RPs to fix these flaws as blame can be shifted to the IdP. As
such, IdPs can leverage our framework to identify RPs that do not
conform to best practices or violate security guidelines, and enforce
stricter onboarding requirements or mandate the use of official
SDKs. In summary, our research contributions are the following:
• We provide a modeling of SSO account and session
management, which guide our development of an
automated black-box auditing framework for testing RPs
that support Facebook as the IdP.
• We conduct a large-scale study of SSO deployments in the
wild, uncovering the prevalence of flaws, non-compliance,
and insecure practices across the SSO ecosystem.
• We have disclosed our findings to affected vendors, and
also developed a Chrome extension for providing users
with additional information about guideline-compliance in
RPs. To foster additional research, we will share our code
and data with researchers and IdP vendors upon request.
II. BACKGROUND AND MOTIVATION
We provide pertinent background information on SSO, and an
overview of policies and best practice guidelines for account and
session management when SSO is supported. We also highlight the
flaws that are the focus of our study, and end with our threat model.
A. Preliminaries
Identity Providers (IdPs) are entities that provide an authenti-
cation service to other entities. We use “SSO support” when a third-
party entity allows their users to authenticate via an IdP. We focus on
Facebook due to it’s prevalence as an IdP [6], as that will allow us to
gain a broader view of how RPs incorporate SSO in their websites.
Relying Parties (RPs) are third-party services that delegate
their authentication process to an Identity Provider. RPs can be
websites or IdP-side applications that other websites use.
Account Access. After the SSO login process, the RP receives
access tokens that have certain permission scopes. The RP can use
these tokens to talk to the IdP (within the permission scope) on
behalf of the user. Moreover, the user receives RP cookies which
they can use to communicate with the RP directly. It is important
to note that access tokens obtained from web logins (as opposed
Fig. 1: Single Sign-On workflow.
to mobile app logins) are typically short-lived [10] whereas the RP
cookies’ validity can remain valid way beyond the lifetime of the
access tokens. Additionally, the access tokens are either accepted or
rejected by the IdP, while RP cookies can provide different levels of
access. For instance, an RP may allow accessing non-sensitive parts
with cookies while the sensitive parts may require re-authentication
via password. In this paper, we do not differentiate between these
levels of access and we strictly define RP access based on whether
the presence of RP cookies in a request changes the RP’s state.
B. Single Sign-On Workflow
Figure 1 shows a typical SSO authentication process: 1 upon
visiting the RP’s website and initiating the SSO process, 2 the
user’s browser gets redirected to the IdP’s website. Depending on the
RP’s configuration, 3 the IdP will attempt to authenticate the user
via cookies or ask them to re-authenticate using their password. Once
authentication is complete, 4 the IdP redirects the browser back to
the RP while appending a code. The RP can then optionally 5 send
cookies to the user that will get stored in the browser’s cookie jar.
Once cookies are set, the RP can 6 continue authenticating the user
in the future via those cookies, until they expire. The RP can also
use the code to retrieve the necessary tokens for communicating
with the IdP on behalf of the user, until those also expire. In this
study, we use three primary terms for the SSO workflow and the
corresponding test cases that are part of our auditing process.
Authentication paths or channels. RPs may offer users one
or more authentication options, namely SSO-based and traditional
credential-based authentication. An authentication path is created
when one of those options is used to register or log into an account.
Account merging is required for different authentication paths
to lead to a single account. For instance, this will occur if a user
initially creates an RP account using credentials and later uses SSO to
log into the RP. If the SSO process ends in the same account created
via credentials, an account merge has occurred, which is the expected