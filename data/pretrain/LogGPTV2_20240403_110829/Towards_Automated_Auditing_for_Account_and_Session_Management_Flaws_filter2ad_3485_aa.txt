# Title: Automated Auditing for Account and Session Management Flaws in Single Sign-On Deployments

## Authors: Mohammad Ghasemisharif, Chris Kanich, and Jason Polakis

### Abstract
Single Sign-On (SSO) is a critical component of user authentication and authorization on the modern web, often offered by web and mobile applications to facilitate account creation and login processes. However, the interplay between local account management and SSO functionality can lead to flaws that enable or exacerbate account hijacking attacks. These flaws are not inherent in SSO protocols but arise from the complexity of supporting separate but intertwined authentication paths. As a result, they cannot be detected by existing SSO protocol or implementation verification tools.

In this paper, we introduce SAAT, a fully automated modular framework that evaluates whether relying parties (RPs) using Facebook as the Identity Provider (IdP) comply with secure practices and guidelines. SAAT uncovers flaws in account and session management that stem from or are affected by the interplay of SSO and local functionality. Our large-scale exploration of authentication and session practices in Facebook’s RPs reveals a volatile ecosystem where SSO support can be suddenly dropped, and 17.6% of the tested RPs exhibit non-functional SSO implementations. This highlights the need for continuous and systematic testing of the SSO ecosystem, which SAAT enables.

We find that security measures are often missing, and official guidelines are frequently overlooked or misconfigured. Only 0.8% of the RPs fully enable re-authentication, which can prevent compromise from hijacked IdP cookies. Additionally, less than 2% of RPs correctly react to SSO revocation, and 67% continue to allow account access even 10 days after revocation. Overall, we envision SAAT as a tool for enabling and guiding widespread remediation efforts by major SSO identity providers, which were previously infeasible due to the scale and mutability of the ecosystem.

## 1. Introduction
Account creation and authentication are essential aspects of the modern web ecosystem. Creating individual accounts for each web service is tedious for users who must manage multiple passwords and for service owners who must develop and maintain complex authentication components. Single Sign-On (SSO) mechanisms offer an attractive alternative by allowing users to leverage their existing accounts on popular services (Identity Providers or IdPs). Online services (Relying Parties or RPs) can outsource some or all of their authentication infrastructure to these IdPs, providing a more integrated and uniform browsing experience while streamlining account and session management for both RPs and end users.

While centralizing authentication with major services like Facebook and Google can improve security by leveraging their substantial resources and expertise, SSO introduces a complementary set of security risks. Although the security of the underlying protocols has been studied in depth and is currently understood to be free of substantial flaws, the implementation may still be incorrect. Most uses of SSO augment, rather than fully replace, a site’s native authentication mechanisms, leading to a variety of specific implementations. This flexibility results in challenges for RPs to implement schemes correctly and difficulties in longitudinally evaluating the security of these implementations.

Many vulnerabilities are predicated on being successfully authenticated to the IdP, but the security of these services can still create a single point of failure in online authentication. Major services are not impervious to flaws that enable account hijacking, as shown by prior research. A recent real-world attack campaign resulted in the largest hack in Facebook’s history, where the authentication tokens (i.e., cookies) of 50 million users were stolen. A compromised IdP account allows attackers to obtain persistent and stealthy long-term access to users’ RP accounts with little to no option for remediation. The issues identified can be traced back to the complexities arising from the co-existence and interplay of traditional credentials and SSO, and the ensuing session management processes.

While numerous studies have evaluated the design and implementations of SSO protocols, no prior work has conducted a systematic, large-scale, and in-depth exploration of account and session management in the SSO ecosystem. We introduce SAAT, an automated black-box framework for auditing systems that use Facebook as the IdP. First, we compile a set of best-practice guidelines and recommendations for the core building blocks of the SSO ecosystem: integrated registration, authentication, and session management. Next, we define a series of auditing tasks, modeled as finite-state machines, that identify violations and insecure practices in the implementation of these processes in Relying Parties. This builds upon our ability to orchestrate actions and infer state changes in the Identity Provider and Relying Parties.

Our fully automated testing pipeline handles every aspect of the SSO protocol, from detecting SSO support and account registration to access revocation and session termination. Using SAAT, we obtain a large-scale longitudinal view of SSO support, uncovering a brittle and volatile ecosystem. We find that 17.6% of the RPs we tested have non-functional SSO implementations, and almost 8% suddenly drop SSO support within a 50-day period. We also identify a significant lack of security mechanisms, with only 0.8% of the RPs adequately protecting users' accounts from IdP cookie hijackers. Moreover, only 1.7% of the RPs log users out in response to IdP access revocation, and 67% continue to allow access to the account even 10 days past the revocation. Our auditing also reveals that 10% of the tested RPs violate account merging guidelines.

Overall, our findings highlight that SSO deployment insecurity is not limited to implementation flaws in the protocols themselves but should be viewed as an error-prone multicomponent integration process complicated by local account and session management mechanisms. While our study focuses on Facebook as the IdP, we perform a manual comparative analysis of Google and Apple SSO implementations in a subset of the analyzed RPs. In 99% of the cases, we do not find any differences across IdPs, indicating that the flaws detected by our system are intrinsic and affect multiple IdPs supported by vulnerable RPs.

It is important to note that some of the flaws we identify only become operational after a user’s IdP account is compromised. Unfortunately, this may result in a lack of incentive for RPs to fix these flaws, as blame can be shifted to the IdP. IdPs can leverage our framework to identify RPs that do not conform to best practices or violate security guidelines and enforce stricter onboarding requirements or mandate the use of official SDKs.

### 2. Background and Motivation
#### 2.1 Preliminaries
**Identity Providers (IdPs)** are entities that provide an authentication service to other entities. "SSO support" refers to when a third-party entity allows their users to authenticate via an IdP. We focus on Facebook due to its prevalence as an IdP, which allows us to gain a broader view of how RPs incorporate SSO in their websites.

**Relying Parties (RPs)** are third-party services that delegate their authentication process to an Identity Provider. RPs can be websites or IdP-side applications that other websites use.

**Account Access**: After the SSO login process, the RP receives access tokens with certain permission scopes. The RP can use these tokens to communicate with the IdP on behalf of the user. The user also receives RP cookies, which they can use to communicate directly with the RP. It is important to note that access tokens obtained from web logins (as opposed to mobile app logins) are typically short-lived, whereas RP cookies can remain valid well beyond the lifetime of the access tokens. Additionally, the access tokens are either accepted or rejected by the IdP, while RP cookies can provide different levels of access. For instance, an RP may allow accessing non-sensitive parts with cookies while requiring re-authentication via password for sensitive parts. In this paper, we do not differentiate between these levels of access and strictly define RP access based on whether the presence of RP cookies in a request changes the RP’s state.

#### 2.2 Single Sign-On Workflow
Figure 1 shows a typical SSO authentication process:
1. Upon visiting the RP’s website and initiating the SSO process.
2. The user’s browser gets redirected to the IdP’s website.
3. Depending on the RP’s configuration, the IdP will attempt to authenticate the user via cookies or ask them to re-authenticate using their password.
4. Once authentication is complete, the IdP redirects the browser back to the RP while appending a code.
5. The RP can then optionally send cookies to the user, which get stored in the browser’s cookie jar.
6. Once cookies are set, the RP can continue authenticating the user in the future via those cookies until they expire. The RP can also use the code to retrieve the necessary tokens for communicating with the IdP on behalf of the user, until those also expire.

In this study, we use three primary terms for the SSO workflow and the corresponding test cases that are part of our auditing process:
- **Authentication paths or channels**: RPs may offer users one or more authentication options, namely SSO-based and traditional credential-based authentication. An authentication path is created when one of those options is used to register or log into an account.
- **Account merging**: Required for different authentication paths to lead to a single account. For instance, if a user initially creates an RP account using credentials and later uses SSO to log into the RP, and the SSO process ends in the same account created via credentials, an account merge has occurred, which is the expected behavior.