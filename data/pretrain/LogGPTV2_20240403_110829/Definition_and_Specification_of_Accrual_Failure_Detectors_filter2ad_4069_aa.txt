# Definition and Specification of Accrual Failure Detectors

**Authors:**
- Xavier Défago
- Péter Urbán
- Naohiro Hayashibara
- Takuya Katayama

**Publication Details:**
- **Conference Paper**: January 2005
- **DOI**: 10.1109/DSN.2005.37
- **Source**: IEEE Xplore
- **Reads**: 134
- **Citations**: 39

**Author Affiliations:**
- **Xavier Défago**: Tokyo Institute of Technology
- **Péter Urbán, Naohiro Hayashibara, Takuya Katayama**: Japan Advanced Institute of Science and Technology (JAIST)

**Project Links:**
- [Accrual Failure Detectors](https://www.researchgate.net/publication/4156666)
- [Mobile Robots](https://www.researchgate.net/publication/4156666)

**Uploaded by:**
- Takuya Katayama on June 4, 2014

---

## Abstract

For many years, the development of failure detection as a basic service has been advocated, but with limited success. We believe this is due to the inadequate addressing of important system engineering issues, preventing the definition of a truly generic service. Our goal is to define a service that is both simple and expressive, yet powerful enough to support the requirements of many distributed applications.

To achieve this, we propose an alternative interaction model between the service and the applications, called accrual failure detectors. These detectors associate a real value representing a suspicion level to each process, rather than the traditional binary information (trust vs. suspect). This paper provides a rigorous definition for accrual failure detectors, demonstrates that changing the interaction model does not reduce computational power, discusses quality of service (QoS) issues, and presents several possible implementations.

## 1. Introduction

Failure detection is essential for building reliable distributed systems. Despite significant advances in failure detection, a generic service remains elusive. We argue that the current obstacles are due to overlooked architectural and engineering issues. A ubiquitous failure detection service must meet the requirements of a wide variety of applications without introducing unnecessary limitations. Specifically, it must provide various levels of QoS and support common usage patterns smoothly.

Although the computational aspects of failure detectors are well-established, few studies have addressed the aforementioned issues. This paper defines accrual failure detectors, which allow for a cleaner decomposition of the underlying system's behavior and the QoS provided to applications. In our recent work, we proposed an implementation of an accrual failure detector called the ϕ failure detector [23].

This paper complements our earlier work by:
1. Providing a precise definition for accrual failure detection.
2. Establishing important properties of such failure detectors.
3. Presenting the characteristics of several useful implementations.

### 1.1 Failure Detectors

Chandra and Toueg [7] laid the theoretical foundation for failure detection, leading to numerous important results, including minimal conditions, equivalences, transformations, and metrics. These studies focus on the computational power of failure detectors from an algorithmic perspective. Other studies have implemented failure detectors over small-scale and large-scale networks. However, most failure detectors in the literature use a binary interaction model, where a monitored process is either trusted or suspected.

### 1.2 Limitations of the Binary Model

The binary model has limitations when providing failure detection as a generic service. First, it makes it difficult to support multiple applications simultaneously, as there is a tradeoff between conservative (slow and accurate) and aggressive (fast but inaccurate) failure detection. Different applications may have different QoS requirements, and even within the same application, multiple QoS levels can be useful.

Second, while binary failure detectors are well-suited for many algorithms, their interaction model cannot easily handle some practical usage patterns. The following example illustrates these limitations.

### 1.3 Illustration: BoT Computations

Consider a simplified environment with one master process and a collection of worker processes in the OurGrid platform [10]. The master holds a list of independent tasks, dispatches them to available workers, and gathers results. Assume the master never fails, but some workers may crash. The master must detect worker crashes and reassign tasks. Two situations highlight the need for a more flexible failure detection model:

1. **Task Assignment**: The master must avoid sending tasks to crashed workers, requiring the ability to sort workers based on their likelihood of being operational.
2. **Task Execution**: If a task is wrongly aborted due to a false suspicion, all CPU cycles spent on the task are wasted. The cost of aborting the task increases over time.

These situations are challenging to handle with binary failure detectors. While ad-hoc solutions exist, a more suitable abstraction, such as slowness oracles [28], can simplify design and improve system quality. However, slowness oracles do not address the second situation well.

### 1.4 Accrual Failure Detectors

To address these challenges, we propose a more flexible interaction model for failure detectors. Accrual failure detectors associate a real number, representing a suspicion level, to each monitored process. The value changes over time, with zero indicating no suspicion and higher values indicating stronger suspicion. Accrual failure detectors ensure that the suspicion level for a faulty process increases toward infinity, while for a correct process, it remains bounded.

### 1.5 Architectural Issues

Failure detection can be decomposed into three tasks: monitoring, interpretation, and action. Monitoring gathers information about other hosts and processes, typically through network sampling. Interpretation makes sense of this information, often by setting timeouts and generating suspicions. Actions are executed in response to triggered suspicions, usually within applications.

Binary failure detectors combine monitoring and interpretation, providing only interpreted information to applications. This limits flexibility, as suspicion tradeoffs depend on the nature and cost of the triggered actions. In contrast, accrual failure detectors decouple monitoring and interpretation, allowing different applications to set different thresholds or use the suspicion level directly. This is an architectural consideration, and a library can still provide a binary interface if needed.

### 1.6 Contribution & Structure

The main contribution of this paper is a rigorous definition of accrual failure detectors, focusing on a class computationally equivalent to an unreliable failure detector of class ♦P. We identify important properties related to QoS and discuss several possible implementations. The paper is structured as follows:

- **Section 2**: Describes the system model and basic definitions.
- **Section 3**: Defines accrual failure detectors and their properties.
- **Section 4**: States important theorems related to specific classes of accrual failure detectors.
- **Section 5**: Outlines possible implementations of accrual failure detectors.
- **Section 6**: Discusses how accrual failure detectors relate to previous work.
- **Section 7**: Concludes the paper.

## 2. System Model & Definitions

### System Model

We consider a distributed system with a set of processes Π = {p1, ..., pn}. We assume the existence of a global time, unknown to processes, with a domain T, an infinitely countable subset of real numbers with no upper bound. Processes always make progress, and at least δ > 0 time units elapse between consecutive steps.

### Failures

Our failure model is based on Chandra and Toueg [7]. A process can be correct or faulty. A process is faulty if its behavior deviates from its specification, and correct if it is not faulty. A process fails when its behavior starts deviating. Faulty processes never recover.

A failure pattern is a function F: T → 2Π, where F(t) is the set of processes that have failed before or at time t. The function correct(F) denotes the set of correct processes, while faulty(F) = Π - correct(F) denotes the set of faulty processes.