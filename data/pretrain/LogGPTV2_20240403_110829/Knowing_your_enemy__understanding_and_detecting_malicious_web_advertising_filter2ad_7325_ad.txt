### Training Data and Classification

Our training data were collected from traces between June 21, 2001, and September 30, 2011. The data are classified into three categories: "likely good," "known bad," and "unknown," using the method described in Section 5.1. We further divided the "likely good" data into two equal-sized subsets. One subset (Training-likely-good) and the "known bad" dataset are used for training, while the other subset (Testing-likely-good) is used to evaluate false positives (FP). The "unknown" data serve as one testing dataset (Testing-Jun-Sep) to study the coverage of MadTracer, along with another testing set (Testing-Oct) collected from October 1 to October 30, 2011. Table 4 summarizes these datasets.

### Rule Generation and False Positive Evaluation

MadTracer generates 82 rules from the training data. We first evaluate the false positives caused by these rules using the subsequences in Testing-likely-good, and measure the false positive rate. The false positive (FP) rate is defined as \( \frac{NF_P}{NF_P + NT_N} \), where \( NF_P \) denotes the number of false positives and \( NT_N \) is the number of true negatives. MadTracer detected 0.11% of pages and 0.075% of domain-paths, which are considered false alarms. This indicates that the FP rate introduced by our approach is very low. The details of this study are shown in Table 5.

### Performance Evaluation on Testing Datasets

We then evaluate the performance of MadTracer on the Testing-Jun-Sep and Testing-Oct datasets. MadTracer detected 617 infected publishers and 9,568 unique malvertising domain-paths, with a false detection (FD) rate of around 5%. The FD rate is defined as \( \frac{NF_P}{NF_P + NT_P} \), where \( NT_P \) is the number of true positives. Given that 53,100 out of 90,000 crawled publisher web pages have display-ad-related paths, we observe that over 1% of the top Alexa home pages lead to malvertising. Since these are well-reputed domains with high traffic, malvertising through them could reach a large victim population. Tables 6 and 7 elaborate on the results.

### Attack Classification and Validation

MadTracer is designed to capture common features of malvertising but does not distinguish the type of attacks (scam, drive-by downloads, and click frauds) for the suspicious paths it detects. To validate its detection results, we classify the detected cases heuristically and then work on the cases in individual categories based on their suspicious behavior.

#### Scam
For malicious paths that trigger scam popup windows, we place them in the likely scam category. These popups often display catchy content such as "Your computer is infected" or "You are the winner." Besides fake antivirus (AV) scams, we also find lottery phishing, as shown in Table 8. Lottery phishing attacks redirect users to a phishing page announcing they have won a prize, asking them to provide personal information like cell phone numbers and bank account numbers. This information can be sold to third parties or used for identity theft.

**Validation:** We manually validate these scam cases by examining the images in the popup windows, as their number is small.

#### Drive-by-downloads
For malicious paths that do not trigger popup windows, we analyze the locations of the detected 3-node segments. If such a path segment appears after ad nodes (identified by EasyList and EasyPrivacy) on the path, it corresponds to attackers redirecting users from ad networks to malicious servers, and we classify it as a likely drive-by-download.

**Validation:** To validate these attacks, we scan all involved nodes using Safe Browsing and Forefront. For the remaining ones, we submit them to Microsoft Forefront for in-depth analysis. They confirmed that a vast majority of the detected path segments contain malicious executables using new signatures. We conservatively treat all unconfirmed cases as false positives. For the ones detected by Forefront, more than half are under the category Exploit:JS/Blacole, generated by the Blackhole exploit kit, which exploits recent vulnerabilities in Java and Adobe PDF.

#### Click-fraud
The remaining cases are mostly related to click fraud. Unlike legitimate publishers who display ad links that users can click, fraudulent or compromised publishers redirect user traffic through pay-per-click (PPC) ad networks to ad landing pages automatically, without showing the ads to users and without needing user clicks. Safe Browsing and Forefront fail to detect most of these click fraud attacks since they do not involve malicious executables. Details of the attacks are presented in Appendix B.

**Validation:** To validate such attacks, we examine the detected ad paths based on two properties: whether the publisher page contains an invisible iframe to redirect user traffic automatically and whether the path eventually reaches an ad landing page through a PPC ad network. If a path has both properties, it means the publisher page successfully redirects a browser to an ad landing page without actual user clicks, fulfilling a fraudulent click. For failed cases, we compare their paths with successful click-fraud paths. If they went through the same redirection domain chains, we regard them as likely click frauds.

Tables 6 and 7 list the detailed evaluation results based on the above validation process. The overall FD rate of our detected malvertising domain-paths is 4.48% for the Testing-Jun-Sep dataset and 5.21% for the Testing-Oct dataset. Details of our findings and the study on cloaking techniques are in Appendix C.

### Comparison with Existing Techniques

We compare our detection results with those obtained using URL and domain attributes only. We find that 10.2% of the detected malicious domain-paths display suspicious URL patterns. Thus, compared to URL-based approaches, MadTracer significantly increases the detection coverage.

Compared with Safe Browsing or Forefront, our method misses 46 domain-paths detected by them. However, for the attacks successfully detected by MadTracer, our approach catches them earlier. Specifically, throughout October, we ran MadTracer, Safe Browsing, and Forefront on the traces collected from the beginning of the month on a daily basis. We found that Forefront usually detects malicious domains on the same day as our approach, but Safe Browsing needs an average of 10.5 more days before reporting the domain-paths we caught. Figure 12 illustrates Safe Browsing's delays in detection. Several malvertising domain-paths in our Testing-Jun-Sep dataset detected by our approach were not reported by Safe Browsing until October, introducing significant delays in taking measures to stop ongoing attacks.

### Related Work

#### Research on Malvertising
Malvertising is an emerging threat that has grown rapidly in recent years [9]. Prior research mainly focuses on controlling ad behavior to prevent malvertising, but these approaches cannot defend against common attacks like drive-by-download and require publishers to change their websites. More general static and dynamic analysis techniques could be applied to detect drive-by-download. Ad networks could restrict and sanitize dynamic content using static verifiers like ADSafe [8] and its improvements. These countermeasures raise the bar for attackers, but they can be circumvented by sophisticated packing and anti-emulation techniques or the use of malicious ad networks through ad syndication.

Ad syndication allows attackers to inject malicious code directly into browsers without being examined. Previous studies [27] showed that ad syndication is a popular way to distribute drive-by-downloads.

#### Other Attack Channels
In addition to online advertising, Blackhat SEO campaigns and spam emails are other popular methods for attracting naive web users. Recent work has studied the properties of these attacks and proposed detection strategies [16, 20, 15, 18]. Compared to SEO and spam, malvertising has received less attention, yet it poses a serious threat to web security. First, attackers can infiltrate large ad networks and infect top-ranking websites with more visitors. Second, attackers can specify audience profiles through advertising agreements and target the most vulnerable populations. Previous work has shown the effectiveness of leveraging URL features in detecting redirectors [37] and compromised servers [16]. In our case, we find that using URL features alone is not sufficient, though it provides a useful signal that can augment topological information for detection.

### Discussion

Our study shows that malvertising is a severe problem on the internet. By crawling just the top 90,000 Alexa home pages (53,100 of which are publisher pages), we find that more than 1% of these well-maintained sites have been exploited to deliver malicious content or conduct fraudulent clicks. Considering our crawling scale is small, the actual malvertising problem may be more severe. This calls for the research community to pay more attention to the issue.

Towards detection, we take a first step by examining topologies and developing a method based on analyzing 3-node path segments. We demonstrate initial success with real data and a wide set of real attacks detected. However, we have not incorporated other useful features, such as path length, or the whole topology of ad networks as a graph, which could achieve more effective detection. Further study on these issues is an interesting direction for future research.

The evaluation results show that MadTracer can detect a large number of malicious advertising cases, with an FD rate of around 5%. We aim to detect as many malvertising cases as possible, rather than sacrificing the true-positive rate for a low FD rate. For end users, blocking malicious ads is more important than mistakenly blocking legitimate ads, which is different from detecting other malicious activities like spam.

To evade detection, attackers may exploit the node features we adopt, such as modifying URL patterns or using compromised old domains instead of registering new ones. These attempts should be less effective against MadTracer than approaches that look at individual nodes. By exploring the ad infrastructure, MadTracer forces attackers to change a sequence of nodes and their relations, which is a difficult task as these nodes may be controlled by different malicious parties within the underground ecosystem [31]. Additionally, faking ad-specific features we utilize is challenging.