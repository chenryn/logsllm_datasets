address. When wget receives such a response, it determines
the path in its host ﬁle system to which it will write data
directly from the information provided by the redirect server.
A malicious server can exploit
this behavior to craft a
redirect response that causes wget to write data chosen
by the attacker to a path in the ﬁle system chosen by the
attacker [2].
Ideally, a wget developer would formally specify that
wget must not demonstrate a vulnerability along the lines
of the one described above, and would rewrite wget so that
it satisﬁes such a speciﬁcation. However, rewriting wget to
do so requires detailed knowledge of both the structure of
wget and of the HTTP protocol. Thus, it would be useful if
a developer could deﬁne an acceptable, if perhaps weaker,
speciﬁcation for wget in terms of commonly-used, well-
understood operating-system objects, such as ﬁle descriptors,
and automatically rewrite wget to satisfy such a policy. In
particular, one useful policy for wget deﬁned in terms of
ﬁle descriptors would be:
Policy 1. When wget executes read_http,
it should
always be able to open arbitrary ﬁles and sockets. But wget
should execute write_data with the ability to open ﬁles
if and only if it has not received an HTTP-redirect response.
B. Securing wget on Capsicum
The Capsicum operating system [10] provides a set of
powerful security-oriented system calls (i.e., primitives) that
an application can invoke to ensure that it only behaves
in a secure manner, even if an attacker triggers a serious
vulnerability in the application. Capsicum extends the notion
of a ﬁle descriptor provided by UNIX to that of a capability
by mapping each ﬁle descriptor opened by a process to a set
of access rights that the process holds for the ﬁle descriptor.
Each right corresponds roughly to the ability to perform a
UNIX system call that operates on a ﬁle descriptor (e.g., the
access right CAP_READ corresponds to the read system
call). When a process running on Capsicum invokes a system
call c on ﬁle descriptor f, Capsicum carries out c only if
the process holds the right CAP_C for f. Capsicum also
maps each executing process to an ambient-authority ﬂag,
which is a Boolean value that controls whether the process
can open new ﬁle descriptors.
Capsicum’s capabilities were designed so that a program
executing on Capsicum begins by executing a small, trusted
code segment that manages capabilities, and then executes
complex, untrusted code that can interact with its environ-
ment only through the capabilities set by the trusted code.
When a process opens a ﬁle descriptor, it holds all access
rights for the descriptor. Throughout the process’s execution,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
it can invoke a Capsicum primitive limitfd(d, R) on
descriptor d and set of rights R to decrease its rights for
d to only those in R. A process begins executing with
the capabilities of its parent, and can invoke the Capsicum
primitive cap enter to relinquish the ambient authority.
A programmer can instrument wget to invoke the Cap-
sicum primitives so that it satisﬁes Policy 1 (§II-A). One
correct instrumentation of the example wget is the code
shown in Fig. 1, including the Capsicum primitives shown
in bold font. Essentially, wget is instrumented so that if
it handles an HTTP redirection, then it invokes cap enter
before attempting to write data to its host’s ﬁle system (line
L5).
However, for a programmer to instrument his program
to invoke Capsicum primitives correctly, he must address
two challenges, illustrated by the instrumented version of
wget. First, once a programmer formulates a policy, he
must modify his program to invoke the Capsicum primitives
to enforce the policy. However, the Capsicum primitives
can have subtle consequences. In the example wget, once
the programmer determines that under some conditions,
wget should execute program point L5 without ambient
authority,
then the programmer can immediately deduce
that wget must sometimes invoke the cap enter primitive
before executing L5. However, once the programmer also
determines that if wget does not receive a redirect response,
then wget should execute L5 with ambient authority, it is
fairly difﬁcult for him to instrument wget. The difﬁculty
stems from the fact that once a process invokes cap enter,
then the process can never regain the ambient authority for
the remainder of its execution. Thus, if a wget process (i)
attempts to download from URL u, (ii) receives a redirection
response, and (iii) invokes cap enter, then the process
must execute without ambient authority when downloading
from all input URL’s following u.
wget can be instrumented to satisfy the full informal
policy of Policy 1 by compartmentalizing it to use multiple
communicating processes. A “main” wget process executes
the loop that
iterates over the list of input URL’s. To
download data from each input URL,
the main process
synchronously forks a worker process to download the data
and write it
to the ﬁle system (line C0). Each worker
process begins executing with ambient authority. If the
worker receives an HTTP-redirect response while download-
ing from its URL, then it invokes cap enter, but when the
worker process terminates (line C1), the main wget process
continues to execute with ambient authority, with which it
forks the next worker process. (Capsicum requires that a
child process begin executing with the capabilities of its
parent, but places no restrictions on the capabilities of the
parent based on the capabilities of its children.)
Second, the instrumented program sometimes must update
and consult additional instrumentation state to determine
when to invoke Capsicum primitives. In Fig. 1, the instru-
let redir_exploit =
any_instr* . [ L0 ] . any_instr*
. [ L3 ] . [not L0]*
. [ L5 with AMB ] in
let noredir_fails =
any_instr* . [ L0 ]
. [ not { L0, L3 } ]*
. [ L5 with (no AMB) ] in
let http_fails =
any_instr* . [ L4 with (no AMB) ] in
redir_exploit | noredir_fails | http_fails
Figure 2. A capweave policy for the example wget given in Fig. 1.
The policy is a regular expression that matches all undesired executions of
wget, and is described in §II-C.
mented wget maintains a Boolean variable redir_url
that reﬂects whether or not wget received a redirection
response when downloading from the current URL. The
instrumented wget invokes cap enter (line C1) if and
only if redir_url is true.
Thus, a program can be rewritten to satisfy strong se-
curity requirements while preserving the functionality of
the original program by correctly manipulating capabilities
across multiple communicating processes and maintaining
additional instrumentation state. However, it is non-trivial
to determine how to rewrite an application to do so. In
particular, the control locations at which an application must
invoke primitives to satisfy a policy might not be near each
other in the application’s code. For example, in Fig. 1, wget
invokes fork and cap enter at distant program points.
C. Securing wget on Capsicum with capweave
§II-A and §II-B illustrate the general challenges that a pro-
grammer faces in rewriting a program to execute correctly
on Capsicum. While a programmer can typically deﬁne the
desired behavior of his rewritten program purely in terms
of capabilities (e.g., Policy 1), Capsicum does not allow
the programmer to state such a policy explicitly. Instead,
the programmer must
instrument his program manually
to invoke primitives that manipulate both capabilities and
processes so that the resulting program executes with the
desired capabilities. To help a programmer address this
challenge, we have developed a Capsicum policy weaver,
called capweave. capweave takes as input from the pro-
grammer (1) a program that invokes no Capsicum primitives
(for the example wget, the code in Fig. 1 without the
instrumentation statements), and (2) a policy, which is a
regular language of capability traces that each constitute a
policy violation. A capability trace is a sequence of program
points paired with the capabilities that the program has when
it executes each program point.
A capweave policy that formalizes Policy 1 is given
in Fig. 2. The language of violations in Fig. 2 is deﬁned
as the union of three sublanguages: redir_exploit,
21
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
noredir_fails, and http_fails. redir_exploit
formally expresses the set of all wget executions in which
an attacker exploits wget’s vulnerability in processing
HTTP redirection responses. redir_exploit is deﬁned
as any sequence of instructions, followed by the program
point at which the next URL in the array of inputs is
selected (L0), followed by any sequence of instructions,
followed by the program point at which wget processes
an HTTP redirect response (L3), followed by any sequence
of instructions before the selection of the next input URL
(not L0), followed by wget writing downloaded data to
the ﬁle system (L5) with ambient authority.
noredir_fails formally expresses the set of all wget
executions in which wget does not receive an HTTP
redirection response, but attempts to write downloaded data
to the ﬁle system with insufﬁcient rights. noredir_fails
is deﬁned as any sequence of instructions, followed by L0,
followed by any sequence of instructions other than L0 or
L3, followed by executing L5 with ambient authority.
http_fails formally expresses the set of all wget
executions in which wget attempts to ﬁnish an HTTP
session with insufﬁcient rights. http_fails is deﬁned
as any sequence of instructions followed by attempting to
complete the HTTP protocol (L4) without ambient authority.
For the simpliﬁed version of wget given in Fig. 1, the
accompanying capweave policy given in Fig. 2 is almost as
large as the program itself. However, in practice, policies for
real-world programs tend to grow very slowly in the size of
the program. The real wget program contains 64,443 lines
of source code, but its entire policy can be expressed in only
35 lines of our policy language.
capweave outputs a version of the input program in-
strumented to invoke Capsicum primitives so that it satisﬁes
the input policy. From the uninstrumented version of the
example wget (i.e., Fig. 1 without the instrumentation state-
ments) and the example policy given in Fig. 2, capweave
outputs the correctly instrumented version of wget (Fig. 1
with the instrumentation statements).
D. capweave Parametrized on the Capsicum Semantics
The implemented version of capweave is actually struc-
tured slightly differently than described above:
the im-
plemented tool supports a more general model in which
capweave is generated from an explicit description of
the semantics of Capsicum [15]. Because of this model,
capweave can be adapted easily when Capsicum is ex-
tended or when the “packaging” of sequences of invocations
of Capsicum primitives as a library API is changed.
The Capsicum semantics deﬁnes (i) the state maintained
by Capsicum as a program executes, (ii) the set of primitives
that an instrumented program can invoke, and (iii) the
effects of each primitive on the Capsicum state. In the
current implementation of capweave, the state maintained
by Capsicum is a stack of process states, where a process
state is (a) a map from each descriptor to its current set of
access rights, and (b) a Boolean value indicating whether the
process has ambient authority. If a process state p0 is below a
process state p1 on the stack, then the process whose state is
p0 spawned the process whose state is p1 via a synchronous
fork. The semantics also deﬁnes the effect of each primitive
on the Capsicum state. For instance, cap enter sets the
Boolean value to False in the process state of the currently
executing process (i.e., the top process on the stack); fork
pushes a copy of the top process state onto the stack; join
pops the top process state from the stack; etc.
It
is signiﬁcantly easier for a Capsicum architect
to
deﬁne a model of Capsicum using this mechanism than it
would be for him to implement the entire policy weaver.
capweave consists of 35k lines of OCaml that employs
many subtle optimizations, whereas the Capsicum model
is speciﬁed in only 3k lines, which essentially deﬁne a
Capsicum interpreter. (The Capsicum state and interpretation
functions are discussed in more detail in §III-A3.)
In general,
the Capsicum semantics would be speci-
ﬁed by a Capsicum architect, rather than an application
implementer, and would be changed rarely—either when
new Capsicum primitives are introduced or when there are
changes in the API of a library that packages Capsicum calls
into routines that are more convenient to use than “raw”
Capsicum. Application programmers can then regenerate an
updated capweave tool and weave policies into as many
applications as they wish.
III. DESIGN OF THE POLICY WEAVER
A. The Policy-Weaving Problem
IMP.
1) Language Syntax: The syntax of languages of both
unwoven and woven programs will be deﬁned as instances
of a language of simple imperative programs,
IMP
is a small “core” language that supports only updates to
program state with the result of language operations, opera-
tions on descriptors, invocations of woven instructions, and
conditional branches of control-ﬂow. However, the actual
implementation of capweave instruments programs in the
LLVM intermediate language [16], and thus can weave
programs compiled from widely-used, practical languages,
such as C and C++.
Syntax of Unwoven Programs: The syntax of language
IMP(cid:2)wvinstrs(cid:3) (Fig. 3) is deﬁned for a ﬁxed set of program
variables Vars, a ﬁxed set of control labels Labels, and a set
of open sites Opens that label program instructions at which
descriptors are opened. The syntax is parametrized on a set
of woven instructions wvinstrs (i.e., security primitives). An
IMP program prog is a set of instruction blocks, including an
initial instruction block block0. Each instruction block is a
unique label, a statement, and a block-terminator instruc-
tion. A statement either assigns the result of a language
operation to a variable, opens a descriptor, or executes a
weaving instruction. A block terminator halts the program
22
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
prog := (block0,{block1, . . . , blockn})
block := LABEL : stmt; termin
stmt := v0 := op(v1, . . . , vn)
vi ∈Vars
| dscinst
| wvinstrs
termin := halt | br v ? LABELt
dscinst := os : v0 := open(v1),
v0, v1 ∈ Vars, os ∈ Opens
: LABELf
v ∈Vars
Figure 3. Syntax of the IMP(cid:3)wvinstrs(cid:4) language: an imperative language
parametrized on a set of woven instructions wvinstrs.
capinstr := v0 := op(v1, . . . , vn)
| v ? capprim
capprim := cap enter
| limitfd(os, rs)
| fork
| join
vi ∈WVars
v ∈WVars