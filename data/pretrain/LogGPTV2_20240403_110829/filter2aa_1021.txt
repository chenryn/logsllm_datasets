### Common Vulnerabilities

This document outlines frequently reported vulnerabilities. We recommend reviewing this list, addressing the identified issues, or explicitly excluding them from the project scope to potentially save on costs.

#### 1. Excessive Information Leakage Through Errors/Stack Traces
**Description:**
Websites can inadvertently leak information about internal services through detailed error messages and stack traces. Examples include usernames, full paths to internal documents, and other sensitive data.

**Solution:**
Disable or limit the content of error messages to a brief, non-specific description of the problem.

#### 2. Login/Logout/Newsletter CSRF
**Description:**
While often reported as a best practice, most instances of Cross-Site Request Forgery (CSRF) in login, logout, and newsletter forms are harmless and do not pose a significant security risk.

**Solution:**
Implement a CSRF protection mechanism that applies to all forms, including those for logged-out users. This will also protect against CSRF on newsletter subscription forms.

#### 3. SSL Certificate Issues
**Description:**
Some websites may be intentionally vulnerable to low-severity SSL attacks due to specific SSL setups. Ensure your SSL security by checking it at the following sites:
- [DigiCert](https://www.digicert.com/help/)
- [SSL Labs](https://www.ssllabs.com/ssltest/)

If your company is vulnerable to a specific SSL attack but deems the likelihood of such an attack to be very low, clearly state this in your program policy.

**Solution:**
Ensure that your SSL connection is fully secure. The tests mentioned above will provide valuable insights into your SSL configuration.

#### 4. References to Internal Services/IP
**Description:**
Avoid disclosing internal IP addresses or hostnames publicly. This often occurs in response headers, code comments, and load balancer-injected HTML comments.

**Solution:**
Identify and remove any references to internal services or IP addresses. If you cannot find all instances, researchers will likely identify them during their testing.

#### 5. Missing Security Headers
**Description:**
Many websites lack the necessary security headers that trigger browser-based security mechanisms. These headers include:

- X-XSS-Protection
- Content-Security-Policy
- X-Frame-Options
- Strict-Transport-Security
- X-Content-Type-Options

**Solution:**
Properly configure all security headers. For detailed information, refer to [SecurityHeaders.io](https://securityheaders.io/). If your company has decided not to implement a specific security header, mention this in your program policy.

#### 6. Unnecessary HTTP Headers
**Description:**
Third-party services or plugins may inject additional HTTP headers, potentially leaking sensitive information about your internal services, such as the `X-Powered-By` header.

**Solution:**
Review the raw HTTP response headers and remove any that disclose internal service information.

#### 7. Default Installation Files on Production Server
**Description:**
Default files from installed plugins or services can reveal sensitive information, such as installation paths and version numbers.

**Solution:**
Check all folders for default files and restrict public access to them.

#### 8. Weak Password Policy
**Description:**
Some websites allow users to set very simple passwords, such as "1234".

**Solution:**
Enforce strong password policies. Refer to the [OWASP Authentication Cheat Sheet](https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Password_Complexity) for guidelines.

#### 9. Directory Listing Enabled
**Description:**
Poorly configured web servers may list directory contents, potentially exposing backups or sensitive files.

**Solution:**
Disable directory listing in your web server configuration.

#### 10. No SPF, DMARC, DKIM Records
**Description:**
E-mail spoofing is a common social engineering attack. Proper email authentication mechanisms are essential to prevent such attacks.

**Solution:**
Set up SPF, DMARC, and DKIM records to secure your company from email spoofing.

#### 11. No Rate Limit Functionalities
**Description:**
Without rate limiting, attackers can use brute-force attacks to guess passwords or spam users with password reset requests.

**Solution:**
Implement rate limiting for all forms requiring secrets, such as passwords or PINs. For example, allow 10 password attempts before locking the account for increasing periods (e.g., 30 seconds, then 60 seconds, then 90 seconds).

#### 12. Mobile App Code Not Obfuscated/Encrypted
**Description:**
It is a best practice to obfuscate and/or encrypt the source code of mobile apps to protect against reverse engineering.

**Solution:**
For Android, use ProGuard:
- [ProGuard Guide](http://developer.android.com/guide/developing/tools/proguard.html)
- [Guardsquare ProGuard](https://www.guardsquare.com/en/proguard)

For iOS, consider iXGuard:
- [Guardsquare iXGuard](https://www.guardsquare.com/en/ixguard)

If your company decides not to obfuscate or encrypt the source code, specify this in your program policy.

#### 13. Data Stored Unencrypted
**Description:**
Sensitive data stored on a user's device should be encrypted to prevent unauthorized access.

**Solution:**
Implement encryption and decryption mechanisms for local file storage.

#### 14. Outdated Software
**Description:**
Using outdated software increases the risk of security breaches, as these versions are often targeted by attackers.

**Solution:**
Ensure all services, plugins, and third-party software are updated to the latest, non-vulnerable versions. If upgrading is not possible, contact the vendor for alternative solutions.

---

[PI:EMAIL]  
[www.intigriti.be]