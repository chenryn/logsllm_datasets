COMMON
VULNERABILITIES
COMMON
VULNERABILITIES
In this document you can find common vulnerabilities that are reported commonly. We believe 
that verifying this list and fixing these issues or adding it to out of scope ahead of the start of 
the project might save you some budget!
EXCESSIVE INFORMATION LEAKAGE TROUGH ERRORS/STACK TRACES
[ Description ] Websites can leak information about internal services in all kinds of 
ways but most often this happens because of very excessive errors.
Usernames, full paths to internal documents are some examples of information 
leakage.
[ Solution ] Turn off all excessive errors or limit their content to a short description 
of the problem.
LOGIN/LOGOUT/NEWSLETTER CSRF
[ Description ] This is often reported as best practice but 99% of these reports are 
harmless and do not describe a real security risk.
[ Solution ] Implement a CSRF protection mechanism that applies to all forms 
and even protects logged out users. This will also protect against CSRF on 
newsletter subscription forms.
2
1
SSL CERTIFICATE ISSUES
[ Description ] Some websites require a specific SSL setup and are intentionally 
vulnerable to some low severity SSL attacks. Make sure to check your SSL security 
at the following two sites:
https://www.digicert.com/help/
https://www.ssllabs.com/ssltest/
If your company is vulnerable to a very specific SSL attack and you do not want to 
fix this because the likelihood of such an attack happening is very low make sure to 
mention this in the program policy. 
[ Solution ] Make sure that your SSL connection is completely secure, you’ll already 
get a lot of input from the tests mentioned above.
REFERENCES TO INTERNAL SERVICES/IP
[ Description ] Make sure that no internal IP/hosts are being disclosed publicly, 
this often happens in response headers, comment sections in code.
Load balancers often inject a comment at the end of an HTML page, make sure 
this is turned off. 
[ Solution ] Take a look at where this might occur and then remove it. Not every 
website deals with this and this is often caused by a third party application, so if 
you don’t find all leakages, no problem, the researchers will.
4
3
MISSING SECURITY HEADERS
[ Description ] A lot of websites lack the proper security headers that trigger the 
security mechanism that are present in all modern browsers. Take a look at the 
solution for a list of these headers.
[ Solution ] Make sure all security headers are properly configured. Check if the 
following headers have been implemented:
UNNECESSARY HTTP HEADERS
[ Description ] It often happens that services/plugins inject their own headers into 
the HTTP response. Causing sensitive information about your internal services 
being leaked to the outside world. 
[ Solution ] Check the headers in the raw HTTP response, if you notice some 
headers leaking information about an internal service, like X-powered-by, then 
make the proper changes to remove this header from the HTTP response. 
6
5
X-XSS Protection
Content-Security-Policy
X-Frame-Options
Strict-Transport-Security
X-Content-Type-Options
A lot of these headers will require a specific setup according to how your website 
is designed. Check https://securityheaders.io/ for detailed information about every 
security header.
If your company had decided not to implement a specific security header, make 
sure to mention this in your program policy. 
DEFAULT INSTALLATION FILES STILL ON PRODUCTION SERVER
[ Description ] It happens more than often that installed plugins/services have
default files that disclose a lot of information, e.g. an install path, version numbers,..
[ Solution ] Check all folders of services/plugins and disallow public access for 
these default files. 
WEAK PASSWORD POLICY
[ Description ] Some websites still allow users to use very simple passwords like 
“1234”.
[ Solution ] Make sure you force users to use a strong password. Follow the 
OWASP secure password guidelines to make sure you’re using a good password 
policy.
https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Password_Com-
plexity
8
7
DIRECTORY LISTING ENABLED
[ Description ] Some old or poor configured webservers tend to list the content of 
directories, it happens that backups or sensitive files are found this way.
[ Solution ] Make sure that directory listing is disabled everywhere, this should be 
an easy configuration in your webserver.
9
NO SPF, DMARC, DKIM records
[ Description ] Since e-mail spoofing is an easy to spread social engineering 
attacks like phishing, it’s important to setup the proper protection.
[ Solution ] In order to secure your company from being spoofed, make sure you 
have a proper anti e-mail spoofing mechanism. You can do this by setting up SPF, 
DMARC and DKIM records.
NO RATE LIMIT FUNCTIONALITIES
[ Description ] If no anti brute force or rate limiting mechanism is implemented 
in your website, attackers can use wordbook attacks to brute-force their victim’s 
password, spam other users by requesting lots of password requests etc.
[ Solution ] Make sure that all forms that require some kind of secret, mostly a 
password or pin code, are protected against brute force.
For passwords specifically, it’s good to allow 10 attempts and a lockout system 
that blocks logins for certain accounts for a certain amount of time. (The first 
time 30 sec, then 60, then 90,..)
For a pin code you should only allow a vast amount of attempts, if no valid pin 
was inserted in the allowed attempts a new one should be generated.
10
11
CODE OF MOBILE APP NOT OBFUSCATED/ENCRYPTED
[ Description ] It’s a general best practice to obfuscate and/or encrypt the source 
code of your mobile app to protect against reverse engineering.
[ Solution ] For Android Proguard is a good start:
http://developer.android.com/guide/developing/tools/proguard.html
https://www.guardsquare.com/en/proguard
For IOS:
https://www.guardsquare.com/en/ixguard
If your company decided not to encrypt and or obfuscate the source code of 
mobile apps, please mentuon this in your program policy.
DATA STORED UNENCRYPTED
[ Description ] Developers have multiple reasons to store data on a user’s phone. 
If there’s any sensitive data being stored on the user’s phone it’s a general best 
practice to encrypt these files to make sure no third party can ever read them.  
[ Solution ] Implement an encrypt/decrypt mechanism when writing/reading to/
from local files.
12
13
OUTDATED SOFTWARE
[ Description ] A lot of security breaches are caused because of outdated 
software being used in your website/application. They’re the favorite attack 
surface for an attacker that tries to find a way into your systems. 
[ Solution ] Make sure all used services/plugins and all other third party software 
have been upgraded to a non-vulnerable version, preferably the latest.
If you do use an old version of a specific service and can’t upgrade contact the 
vendor to check with them what the best solution could be.
14
[ PI:EMAIL ] 
[ www.intigriti.be ]