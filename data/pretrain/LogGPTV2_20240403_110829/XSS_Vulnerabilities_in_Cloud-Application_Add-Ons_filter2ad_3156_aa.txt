title:XSS Vulnerabilities in Cloud-Application Add-Ons
author:Thanh Bui and
Siddharth Prakash Rao and
Markku Antikainen and
Tuomas Aura
XSS Vulnerabilities in Cloud-Application Add-Ons
Thanh Bui
Aalto University
Siddharth Rao
Aalto University
Markku Antikainen
Aalto University
Tuomas Aura
Aalto University
9
1
0
2
v
o
N
7
2
]
R
C
.
s
c
[
1
v
2
3
3
2
1
.
1
1
9
1
:
v
i
X
r
a
Abstract
Cloud-application add-ons are microservices that extend the
functionality of the core applications. Many application ven-
dors have opened their APIs for third-party developers and
created marketplaces for add-ons (also add-ins or apps). This
is a relatively new phenomenon, and its effects on the applica-
tion security have not been widely studied. It seems likely that
some of the add-ons have lower code quality than the core
applications themselves and, thus, may bring in security vul-
nerabilities. We found that many such add-ons are vulnerable
to cross-site scripting (XSS). The attacker can take advantage
of the document-sharing and messaging features of the cloud
applications to send malicious input to them. The vulnerable
add-ons then execute client-side JavaScript from the carefully
crafted malicious input. In a major analysis effort, we sys-
tematically studied 300 add-ons for three popular application
suites, namely Microsoft Ofﬁce Online, G Suite and Shopify,
and discovered a signiﬁcant percentage of vulnerable add-ons
in each marketplace. We present the results of this study, as
well as analyze the add-on architectures to understand how
the XSS vulnerabilities can be exploited and how the threat
can be mitigated.
1 Introduction
In modern web applications, user data is stored and processed
mainly in the cloud, and the user interface is implemented
with HTML and JavaScript on the web browser. This kind of
architecture has several advantages. For example, the users do
not need to install or update the applications, and sharing and
synchronizing data between users and services become eas-
ier. A well-known example of a cloud application is Google
Docs [2], an online document editor, which allows collabo-
rative editing of ofﬁce documents. The users naturally need
to trust the cloud platforms to keep their data safe, and cloud-
application developers have come a long way in securing the
services.
Many of the cloud applications follow the microservice
architecture where much of the functionality is implemented
1
as independent services that are loosely coupled to the core
service through APIs. The APIs can also be opened to external
developers. The features implemented with these APIs are
variably called add-ons, add-ins, or apps; we use the word
add-on in this paper. For instance, the Translate [19] add-on
for Google Docs allows the user to translate text to a chosen
language — a feature that is not part of the core service.
Successful cloud applications have created marketplaces for
add-ons and aim to grow an ecosystem of innovative add-on
services around their core platform.
The growing add-on market, however, creates new dangers.
Many add-ons are quick hacks by inexperienced developers,
and the users may not be aware of the difference between
the add-on and the trusted host platform. Moreover, the host-
application vendors are under pressure to attract new add-on
developers, which can lead to less stringent security controls
for the add-ons than for the core service.
In this work, we study the security risks that arise from
potential security vulnerabilities in the add-ons. In particular,
we are interested in how the add-on services process untrusted
user input. This is a critical issue because the emphasis on
collaboration and data sharing in the cloud applications makes
it easy to exploit vulnerabilities in the handling of untrusted
data.
The focus of our analysis is on JavaScript code injection,
popularly known as cross-site scripting (XSS) [45]. Being a
prevalent attack [41], XSS has received much attention among
web security researchers [24, 32, 33, 53, 54]. However, to our
best knowledge, the dangers of XSS in the context of cloud-
application add-ons have not been extensively studied. In this
paper, we aim to ﬁll this gap with the following contributions:
• We explain in detail how XSS attacks against cloud-
application users can occur through vulnerable add-ons.
• We analyze the architecture designs and the security
mechanisms of three popular application suites, namely
Microsoft Ofﬁce Online [3], G Suite [1], and Shopify [4].
The goal is to ﬁnd what the XSS attacker can gain in
each case.
• We evaluate how widespread the problem is with an
empirical study on the add-ons from the marketplaces of
the selected application suites.
• For defensive solutions, we discuss good practices that
add-on developers can follow to secure their products.
We also present the lessons that we learned from our
analysis about design choices and their impact on the
security of an add-on system. We hope that the lessons
would be useful for any cloud-application vendors which
are developing or improving their add-on systems.
The rest of the paper is structured as follows. Section 2
provides necessary background information. Section 3 ex-
plains in detail how XSS can occur in vulnerable add-ons.
Section 4 describes our analysis on the add-on architectures
of the selected cloud-application suites. Section 5 presents the
results of the empirical study. Section 6 considers defensive
solutions. Section 7 discusses the results. Finally, Section 8
summarizes related work, and Section 9 concludes the paper.
2 Background
This section explains the concepts needed in the rest of the
paper, i.e. cross-site scripting and cloud-application add-ons.
2.1 Cross-site scripting
Cross-site scripting (XSS) [45] is one of the most common
vulnerabilities in web applications. In the XSS attack, the at-
tacker injects malicious client-side code, typically JavaScript,
to a website that does not sufﬁciently ﬁlter client input. When
honest users access the target site, the injected code is exe-
cuted in their web browsers in the same context as legitimate
scripts on the same page. Thus, the injected code may gain
unauthorized access to resources on the target site, bypassing
user authentication and the same-origin policy (SOP) [60].
XSS was ﬁrst discussed in 2000 [12], and various variants
of the attack have been discovered since then. In general, XSS
attacks can be classiﬁed into four types:
1. Stored (persistent) XSS: The injected script is perma-
nently stored in a database on the target website. It is
pushed to the victim’s browser when the victim accesses
the stored information.
2. Reﬂected (non-persistent) XSS: The injected script is
not stored on the server. Rather, the attacker tricks the
victim’s browser into sending the script to the server,
which includes it in the immediate response page such
as an error message or search results.
3. DOM-based XSS: The injected script never reaches the
server. Instead, it is injected to the Document Object
Model (DOM) of the vulnerable web page, e.g. from a
URL query string or fragment identiﬁer, and executed
directly on the client side.
4. Persistent client-side XSS: This is relatively new type of
XSS [53]. In the attack, the attacker injects malicious
payloads into client-side storage (e.g. Web Storage, cook-
ies) of the users that it targets. This way, if the Javascript
code of the website executes the malicious data from the
storage, the attack succeeds.
XSS variants can also be classiﬁed into server-side XSS
and client-side XSS [46]. The former occurs when untrusted
user data is included in an HTML response generated by the
server, while the latter occurs when a JavaScript call uses
untrusted user data to update the DOM of the vulnerable page
in an unsafe way.
In all types of XSS, the attacker gains access to any infor-
mation which the victim’s browser stores or processes for the
target website. Most commonly, the attacker steals cookies
that enable it to impersonate the victim to the website. The
attacker can also create a JavaScript key logger to record sen-
sitive data entered by the victim, for example, passwords and
credit card numbers. Moreover, the injected code can invoke
HTML5 APIs, such as webcam or geolocation, although some
of the APIs will only allow access if the victim has opted in
to the features for the target site.
2.2 Cloud-application add-ons
Add-on (also known as add-in, plugin, extension, or app) adds
customized commands and features to a cloud application,
called the host application. The add-on is basically a separate
web service with its own server and client components, but it
has access to the user data and some core functionality of the
host application through APIs deﬁned by the application.
In addition to the add-on web service, each add-on has
a web front-end, which is implemented with HTML and
JavaScript. When the user starts an add-on, the host appli-
cation loads the add-on UI into an iframe and displays it
seamlessly as part of the user interface of the host application.
There are two fundamentally different ways for the add-on
UI to interact with the host application. It can either commu-
nicate locally with the host-application UI component or via
the backend servers. In the latter case, the add-on UI usually
connects to the add-on server in the cloud, which interacts
with the host application server and accesses the user data
through backend APIs that are not visible to the user.
Access control. Cloud application vendors typically imple-
ment permission-based access control for add-ons to limit
their access to user data in the host application. Each add-on
has a list of permissions which it requires to operate. The
host application usually asks the user to explicitly approve the
permissions when the user runs it for the ﬁrst time or during
its installation. This access control tends to be rather coarse
2
(a) With shared workspace
(b) With outside input
Figure 1: XSS attacks with vulnerable add-ons
grained, i.e. the user has to grant all the requested permissions
for either all user data or for a speciﬁc document. Furthermore,
the add-on retains the permissions until the user uninstalls it.
Marketplaces. Cloud application vendors often list their add-
ons in an online marketplace, from where the users can choose
and install (i.e. enable) any add-on for the applications. For
instance, the G Suite marketplace [1] lists add-ons for Google
applications such as Gmail and Google Docs. Usually, only
a relatively small number of add-ons are provided by the
application vendor itself, and the rest are built by third-party
developers.
3 XSS in vulnerable add-ons
In this paper, we focus on non-malicious add-ons. The add-
ons are written by well-meaning developers who do not intend
to cause harm but might not be security experts. Nonetheless,
such add-ons can be vulnerable to external attacks, including
XSS.
We have identiﬁed two types of XSS attacks against vul-
nerable add-ons (see Figure 1):
1. Attack with shared workspace: The attacker and the
victim are colleagues, friends or remote collaborators,
who use the same cloud application. The attacker shares
a workspace with the victim. The workspace concept
varies depending on the host application, but it basically
is any environment, such as a Google Docs document,
through which changes made by one user are propagated
to the others. The attacker injects malicious JavaScript
code into the shared workspace. If the text would be
visible to the user, it can be hidden with the usual tech-
niques like using small font size or text color matching
the background. When the victim enables a vulnerable
add-on for the shared workspace and the add-on renders
the attacker’s input in an unsafe way, the injected script
may become part of the web page in the add-on iframe,
where it is executed by the victim’s web browser. Thus,
the attacker has performed an XSS attack on the victim.
2. Attack with outside input: Some host applications ac-
cept external input such as messages from non-users.
For example, if the host application is an email service
(e.g. Gmail or Outlook), the attacker can hide the mali-
cious script in an email and send it to the victim. If the
victim has enabled a vulnerable add-on to process emails,
the injected script may again ﬁnd its way to the add-on’s
iframe and be executed there like any JavaScript in that
frame.
The details of how the attacker injects the script into the
shared workspace are naturally speciﬁc to the cloud appli-
cation, to the add-on, and to the vulnerability that is being
exploited. In any case, the root cause of the above attacks
is that the vulnerable add-on routes the untrusted user in-
put to JavaScript’s data ﬂow sinks in the add-on UI without
sanitizing it. In particular, malicious data from the attacker
can be executed if the add-on renders it as HTML rather
than as text (with HTML element sinks e.g. document.write
or document.body.innerHTML). The attack would also suc-
ceed if the attacker’s content is given as input to JavaScript
methods such as eval and setTimeout which convert string
input to code. (The latter type of mistakes are less likely
though, because of developer awareness of the dangers of
such functions.)
Compared to the traditional variants of XSS (see Sec-
tion 2.1), the attacks that we describe here are similar to
stored XSS because the attacker’s malicious input is stored
in the host application’s data store. Also, they can be either
server-side XSS or client-side XSS depending on whether the
malicious data is processed by the add-on server or by the
add-on UI.
General consequences. With the ability to run arbitrary
3
Application serverVulnerableadd-oncloud-application.com   cloud-application.comMalicious scriptSharedworkspaceAttackerVictimApplication serverAttackerVulnerableadd-oncloud-application.comVictimPrivateworkspaceMalicious scriptscripts in the context of the vulnerable add-on, the attacker
can perform at least the following types of attacks:
• The attacker can access data on the add-on server