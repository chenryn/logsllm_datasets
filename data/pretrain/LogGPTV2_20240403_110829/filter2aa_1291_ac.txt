h
bit
more
than
once
calling
the
n
um
b
er
of
times
w
e
send
eac
h
bit
the
o
ccupation
n
um
b
er
of
that
bit
o
The
probabilit
y
of
our
message
getting
through
p
will
b
e
based
on
the
probabilit
y
that
a
bit
is
dropp
ed
d
and
the
o
ccupation
n
um
b
er
o
The
probabilit
y
will
b
e
b
ounded
b
elo
w
b
y

d
o
l
Th
us
for
an
y
drop
rate
w
e
can
c
ho
ose
a
sucien
tly
high
o
ccupation
n
um
b
er
to
assure
that
our
messages
will
get
through
And
for
small
drop
rates
the
o
ccupation
n
um
b
er
do
es
not
need
to
b
e
large
to
for
the
probabilit
y
of
successful
transmit
to
b
e
high
When
sending
eac
h
bit
it
m
ust
ha
v
e
the
same
statistical
prop
erties
as
the
co
v
ert
c
hannel
has
when
not
b
eing
used
or
else
an
adv
ersary
could
use
statistical
analysis
to
detect
the
use
of
the
c
hannel
As
w
e
men
tioned
ab
o
v
e
w
e
assume
that
the
c
hannel
is
normally
random
Th
us
our
bits
m
ust
app
ear
random
Since
m
uc
h
researc
h
has
b
een
done
in
nding
cryptographic
means
to
mak
e
ciphertexts
indistinguishable
from
random
distributions
this
will
b
e
easy
W
e
accomplish
this
as
follo
ws
W
e
deriv
e
a
k
ey
bit
k
from
the
same
k
ey
ed
hash
of
the
nonce
t
in
Equation

making
sure
to
not
correlate
n
and
k
k

j
H
h
tK
i
l
k
mo
d

otherwise

The
transmitted
bit
b
is
the
exclusiv
e
or
of
the
k
ey
bit
k
and
the
plain
text
message
bit
M
n
Because
k
seems
random
M
n
will
seem
random
and
th
us
the
random
c
haracteristic
of
our
c
hannel
is
preserv
ed
There
are
sev
eral
tec
hniques
that
the
sender
can
use
to
determine
when
a
bit
has
b
een
transmitted
The
sender
assumes
that
a
blo
c
k
has
b
een
transmitted
after
it
has
ac
hiev
ed
the
o
ccupation
n
um
b
er
o
for
ev
ery
bit
in
the
message
In
order
for
the
receiv
er
to
kno
w
when
they
ha
v
e
receiv
ed
a
blo
c
k
the
last
l
c
bits
of
the
message
are
a
c
hec
ksum
C
of
the
rst
l
l
c
bits

Finding
a
Co
v
ert
Channel
In
attempting
to
lo
cate
a
co
v
ert
c
hannel
w
e
restrict
our
considerations
to
co
v
ert
c
hannels
o
v
er
the
net
w
ork
This
is
b
ecause
most
of
the
time
the
net
w
ork
is
the
only
mec
hanism
through
whic
h
a
pair
of
hosts
can
reasonably
comm
unicate
There
are
t
w
o
w
a
ys
that
w
e
could
transmit
information
W
e
could
send
new
pac
k
ets
and
try
to
mak
e
them
lo
ok
inno
cuous
or
w
e
could
mo
dify
existing
pac
k
ets
Ob
viously
it
will
b
e
easier
to
main
tain
co
v
ertness
if
w
e
mo
dify
exist
ing
pac
k
ets
If
w
e
w
ere
to
send
new
pac
k
ets
w
e
w
ould
need
to
come
up
with
a
mec
hanism
to
generate
inno
cuous
lo
oking
data
If
an
adv
ersary
knew
what
this
mec
hanism
w
as
they
could
lik
ely
detect
our
fak
e
inno
cuous
data
and
our
comm
unication
w
ould
no
longer
b
e
co
v
ert
In
con
trast
if
w
e
mo
dify
pac
k
ets
all
pac
k
ets
that
get
sen
t
are
legitimate
pac
k
ets
and
an
adv
ersary
will
ha
v
e
a
more
dicult
time
detecting
that
an
ything
is
amiss
Th
us
w
e
c
ho
ose
to
mo
dify
existing
pac
k
ets
W
e
can
mo
dify
existing
pac
k
ets
in
t
w
o
w
a
ys
W
e
can
mo
dify
the
application
data
or
w
e
can
mo
dify
the
proto
col
headers
Mo
difying
the
application
data
requires
a
detailed
understanding
of
the
t
yp
e
of
data
sen
t
b
y
a
wide
v
ariet
y
of
applications
Care
m
ust
b
e
tak
en
to
ensure
that
the
mo
died
data
could
ha
v
e
b
een
generated
b
y
a
legitimate
application
and
w
e
m
ust
guess
what
sort
of
applications
the
adv
ersary
considers
inno
cuous
It
is
easier
and
more
general
to
mo
dify
the
proto
col
headers
b
ecause
there
are
few
er
net
w
ork
proto
cols
in
existence
than
application
proto
cols
Most
applications
use
one
of
a
handful
of
net
w
ork
proto
cols
F
urthermore
the
in
terpretation
of
proto
col
header
elds
is
w
ell
dened
so
w
e
can
determine
if
a
c
hange
to
a
eld
will
disrupt
the
proto
col
The
problem
remains
ho
w
ev
er
that
w
e
m
ust
only
pro
duce
mo
died
proto
col
headers
that
w
ould
normally
ha
v
e
b
een
pro
duced
b
y
the
op
erating
system
F
or
example
w
e
could
attempt
to
mo
dify
the
least
signican
t
bit
of
the
windo
w
size
eld
of
TCP
pac
k
ets
Ho
w
ev
er
most

bit
op
erating
systems
tend
to
ha
v
e
windo
w
sizes
that
are
a
m
ultiple
of
four
Since
our
mo
dication
w
ould
pro
duce
man
y
windo
w
sizes
that
w
ere
not
m
ultiples
of
four
an
adv
ersary
could
detect
that
w
e
w
ere
mo
difying
the
windo
w
size
elds
Similarly
w
e
could
attempt
to
hide
data
in
the
iden
tication
eld
of
IP
pac
k
ets
Ho
w
ev
er
man
y
op
erating
systems
normally
generate
sequen
tial
iden
tication
eld
v
alues
so
an
adv
ersary
could
detect
the
presence
of
co
v
ert
data
based
up
on
this
discrepancy
F
or
these
reasons
w
e
wish
to
a
v
oid
directly
mo
difying
pac
k
et
headers
Instead
w
e
observ
e
that
more
subtle
mo
dications
to
the
op
erating
systems
handling
of
pac
k
ets
can
result
in
a
legitimate
and
th
us
presumably
harder
to
detect
c
hange
in
headers
In
particular
if
w
e
dela
y
the
pro
cessing
of
a
pac
k
et
in
a
proto
col
with
timestamps
w
e
can
cause
the
timestamp
to
c
hange
Detecting
these
dela
ys
will
lik
ely
b
e
v
ery
dicult
b
ecause
op
erating
system
timing
is
v
ery
complex
and
dep
ends
on
man
y
factors
that
an
adv
ersary
ma
y
not
b
e
able
to
measure
other
pro
cesses
running
on
the
mac
hine
when
k
eys
are
pressed
on
the
k
eyb
oard
etc
Th
us
this
tec
hnique
for
sending
information
is
v
ery
dicult
to
detect
W
e
no
w
lo
ok
at
applying
this
tec
hnique
to
TCP
to
create
a
c
hannel
with
the
prop
erties
describ
ed
ab
o
v
e

TCP
Timestamps
as
a
Co
v
ert
Channel
By
imp
osing
sligh
t
dela
ys
on
the
pro
cessing
of
selected
TCP
pac
k
ets
w
e
can
mo
dify
the
lo
w
order
bits
of
their
timestamps
The
lo
w
bit
of
the
TCP
timestamp
when
mo
died
in
this
w
a
y
pro
vides
a
co
v
ert
c
hannel
as
describ
ed
ab
o
v
e
The
lo
w
bit
is
eectiv
ely
random
on
most
connections
The
rest
of
the
pac
k
et
or
some
subset
can
b
e
our
nonce
When
examined
individually
pac
k
ets
and
th
us
bits
are
not
deliv
ered
reliably
Because
TCP
timestamps
are
based
purely
on
in
ternal
timings
of
the
host
on
a
slo
w
connection
their
lo
w
bits
are
randomly
distributed
By
rewriting
the
timestamp
and
v
arying
the
timing
within
the
k
ernel
w
e
can
c
ho
ose
the
v
alue
of
the
lo
w
bit
As
long
as
w
e
c
ho
ose
v
alues
with
a
statistically
random
distribution
they
will
b
e
indistinguishable
from
the
unaltered
v
alues
The
rest
of
the
TCP
headers
pro
vides
a
nonce
that
is
nearly
free
from
rep
etition
The
sequence
n
um
b
er
sen
t
with
a
TCP
pac
k
et
is
c
hosen
more
or
less
randomly
from
a


n
um
b
er
space
Th
us
it
is
unlik
ely
to
rep
eat
except
on
re
transmission
of
a
pac
k
et
Ev
en
if
it
do
es
rep
eat
the
ac
kno
wledgmen
t
n
um
b
er
and
windo
w
size
elds
will
lik
ely
ha
v
e
c
hanged
Ev
en
if
those
elds
are
the
same
the
high
order
bits
of
the
timestamp
will
lik
ely
ha
v
e
c
hanged
It
is
extremely
unlik
ely
that
all
of
the
headers
including
the
high
order
bits
of
the
timestamp
will
ev
er
b
e
the
same
on
t
w
o
pac
k
ets
While
TCP
is
a
reliable
stream
proto
col
it
pro
vides
a
stream
of
b
ytes
that
are
reliably
deliv
ered
rather
than
guaran
teeing
reliable
deliv
ery
of
individual
pac
k
ets
F
or
example
if
t
w
o
small
pac
k
ets
go
unac
kno
wledged
they
ma
y
b
e
coalesced
in
to
a
single
larger
pac
k
et
for
the
purp
ose
of
retransmission
As
a
result
bits
asso
ciated
with
the
pac