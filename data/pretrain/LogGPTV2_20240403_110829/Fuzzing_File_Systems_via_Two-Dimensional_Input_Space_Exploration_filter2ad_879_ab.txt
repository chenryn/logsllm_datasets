(2) mitigating frequent disk I/O due to input manipulation.
Unfortunately, current fuzzers fail to address these issues
simultaneously (see §II-B1). An ideal image fuzzer should
target only the metadata, rather than the entire disk image, and
must ﬁx the checksum for any mutated metadata structure.
Missing context-aware workloads. File system-aware work-
loads directly affect the image. In particular, valid ﬁle opera-
tions modify ﬁle objects on an image (e.g., open() creates a
new ﬁle and unlink() removes one link of an existing ﬁle) at
runtime. However, existing fuzzers rely on the predeﬁned image
information (i.e., valid ﬁle and directory paths on a seed image)
to generate system calls, and thereby fail to comprehensively
test all the accessible ﬁle objects in a target ﬁle system at
runtime (§II-B2). Therefore, a better approach is to maintain the
runtime status of every ﬁle object on an image after performing
past ﬁle operations for generating new ones.
Exploring input space in two dimensions. A ﬁle system
processes two types of inputs, including disk images and
ﬁle operations which are organized in completely different
formats (i.e., binary blob versus sequential operations), but
have an implicit connection between them. To fully explore
a ﬁle system, a fuzzer should mutate both of them, which is
not supported by existing fuzzers. Thus, we aim to propose
a hybrid approach that explores both dimensions by fuzzing
image bytes and ﬁle operations simultaneously.
Reproducing found crashes. Traditional OS fuzzers use
virtualized instances to test OS functionalities. However, to
avoid the expensive cost of rebooting a VM or reverting a
snapshot, they re-uses an OS or ﬁle system instance across
multiple runs, which leads to unstable kernel executions and
irreproducible bugs (see §II-B2). This issue can be overcome
by leveraging a library OS [53, 54] that provides the exact OS
behavior and re-initializes the OS states within milliseconds.
A. Overview
III. DESIGN
JANUS is a feedback-driven fuzzer that mutates the metadata
of a seed image, while generating context-aware ﬁle operations
(i.e., system calls) to comprehensively explore a ﬁle system. In
general, JANUS adopts the following design choices to resolve
the aforementioned challenges regarding ﬁle system fuzzing
(see §II-C). First, JANUS merely stores the metadata extracted
from the seed image as its mutation target, which is critical
for a ﬁle system to manage user data. In addition, JANUS
re-calculates every metadata checksum value after mutation.
Since the metadata occupy a small space (1%), the size of
an input test case is much smaller than that of an entire disk
image, which enables high fuzzing throughput. Second, JANUS
does not rely on manually speciﬁed information about the
ﬁles stored on a seed image, as it becomes stale over time
Fuzzing engine
Image mutator
Syscall fuzzer


metadata'
program'

Coverage
bitmap


libOS
executor
Corpus

status'

metadata
program
status
Fig. 2: An overview of JANUS. In each fuzzing iteration, JANUS
loads a test case from its working corpus, which consists of three
parts: the metadata of a seed image, a program containing a list of ﬁle
operations, and the speculated image status at runtime after executing
the program ( 1 ). Then the fuzzing engine of JANUS mutates the test
case in two directions: (1) The image mutator randomly mutates the
metadata, and the fuzzing engine outputs the mutated metadata along
with the intact program for testing ( 2 ), or (2) The syscall fuzzer
mutates existing system calls in the program or appends new ones, and
updates the image status correspondingly as the workload changes
( 2 ). In this case, the fuzzing engine outputs the intact metadata
and the newly generated program. Next, JANUS releases the output
metadata into a full-size image ( 3 ) and delivers the image with the
output program ( 3 ) to a library OS based executor. The executor
mounts the image and executes the program, whose execution trace is
proﬁled into a bitmap shared with the fuzzing engine of JANUS ( 4 ).
If new code paths are discovered, the output metadata and program,
and the updated image status are packed as a new test case and saved
into the corpus for future mutation ( 5 ).
and results in ineffective test case generation. Instead, JANUS
generates new ﬁle operations based upon the deduced status
of an image after completing old ones in a workload. Third,
JANUS manages to explore the two-dimensional input space
of a ﬁle system by wisely scheduling image fuzzing and ﬁle
operation fuzzing. Considering the fact that the original image
determines the initial state of a ﬁle system and affects the
executions of the foremost ﬁle operations, JANUS makes the
ﬁrst effort to mutate image bytes. Lastly, JANUS relies on a
library OS to test kernel functions in user space. A library OS
instance runs as a user application, which can be re-launched
with negligible overhead, and thereby helps to increase the
chance of reproducing a found bug.
Figure 2 presents the detailed design of JANUS. A binary
input for JANUS consists of three parts: (1) a binary blob
comprising the metadata blocks of a seed image, (2) a serialized
program (i.e., ﬁle system workload) that describes a sequence
of system calls, and (3) the speculated image status after the
program operates the image. In the beginning, JANUS relies
on a ﬁle system-speciﬁc parser to extract metadata from a
seed image. JANUS also inspects the seed image to retrieve
initial image status and generate starting programs. The original
metadata, along with the image status and the program, are
packed as a test case and are saved into JANUS’S working
corpus. JANUS initiates fuzzing with both the image mutator
and the system call fuzzer by selecting a test case from the
corpus ( 1 ) for exploring the two-dimensional input space in
an inﬁnite loop. First, the fuzzing engine invokes the image
mutator to ﬂip the bytes of the metadata blob in several ways
(cid:25)(cid:19)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
else:
self.meta_blocks[i].csum_offset = meta_block.csum_offset
self.meta_blocks[i].csum_offset = None
self.meta_blocks[i].offset = meta_block.offset
self.meta_blocks[i].size = meta_block.size
if meta_block.has_csum:
1 # Class Janus
2 def generate_corpus(self, image, fstype):
self.image_buffer = read_image(image)
3
meta_blocks = self.img_parser.parse_image(image, fstype)
4
meta_buffer = ""
5
for meta_block in meta_blocks:
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Fig. 3: Pseudo-code of how JANUS generates the initial corpus given
a seed image.
file_objs = self.inspect_image(image)
program = Program()
status = Status(file_objs)
self.sys_fuzzer.initialize(program, status)
for file_obj in file_objs:
self.sys_fuzzer.generate_syscall(SYS_OPEN, [file_obj])
meta_buffer += meta_block.buffer
(new_program, new_status) = \
self.add_into_corpus((meta_buffer, new_program, new_status))
and outputs mutated blobs ( 2 ). At the same time, the program
in the test case remains unchanged. Later on, the system call
fuzzer enables JANUS to either mutate the argument values of
existing system calls in the program or append new ones to the
program. The system call fuzzer also produces new image status
according to the newly generated program ( 2 ). Meanwhile, the
metadata part remains intact. The output metadata is combined
with other unchanged parts (i.e., user data) to produce a full-size
image with all the checksum values re-calculated by JANUS
( 3 ). And the output program is also serialized and saved onto
the disk ( 3 ). A user-space system call executor, which relies
on a library OS, launches a new instance to mount the full-size
image and perform the ﬁle operations involved in the program
loaded from the disk ( 4 ). The runtime path coverage of the
executor is proﬁled into a bitmap shared with JANUS’s fuzzing
engine. The fuzzing engine inspects the bitmap; on discovering
a new path, JANUS saves the shrunken image, the serialized
program, and the speculated image status into one binary input
for further mutation in successive runs ( 5 ). Note that for
each test case, JANUS always launches the image mutator ﬁrst
for certain rounds and invokes the system call fuzzer if no
interesting test case is discovered.
We ﬁrst describe how JANUS generates the starting test cases
by parsing a seed image in §III-B. We then present how it
fuzzes image bytes and generates ﬁle operations in §III-C and
§III-D, respectively. More important, we describe how JANUS
integrates two core fuzzers in §III-E. Finally, we present our
new library OS-based environment for ﬁle system fuzzing in
§III-F.
B. Building Corpus
JANUS relies on its image parser and system call fuzzer
to build its initial corpus upon a seed image (see Figure 3).
The ﬁrst part of the test cases in the corpus is the essential
metadata blocks of the seed image, which constitutes around
1% of the total size, thereby overcoming the challenges of
fuzzing a disk image, as described in §II-C. Speciﬁcally, JANUS
elif choice == 1:
elif choice == 2:
return flip_bit_at_random_offset(meta_buffer)
choice = Random.randint(0, 8)
if choice == 0:
return set_interesting_word_at_random_offset(meta_buffer)
return set_interesting_byte_at_random_offset(meta_buffer)
1 # Class ImageMutator
2 def mutate_image(meta_buffer):
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Fig. 4: Pseudo-code of how JANUS randomly mutates metadata blocks.
return set_interesting_dword_at_random_offset(meta_buffer)
return inc_random_dword_at_random_offset(meta_buffer)
return inc_random_byte_at_random_offset(meta_buffer)
return inc_random_word_at_random_offset(meta_buffer)
return set_random_byte_at_random_offset(meta_buffer)
elif choice == 5:
elif choice == 6:
elif choice == 3:
elif choice == 4:
else:
ﬁrst maps the entire image into a memory buffer. Then a ﬁle
system-speciﬁc image parser scans the image and locates all
the on-disk metadata according to the speciﬁcation of the
applied ﬁle system. JANUS re-assembles these metadata into a
shrunken blob for mutation afterward and records their sizes
and in-image offsets. For any metadata structure protected
by checksum, JANUS records the in-metadata offset of the
checksum ﬁeld recognized by the image parser. Second, the
starting test cases also include the information of every ﬁle
and directory on the image that allows JANUS to use that
knowledge for generating context-aware workloads afterward.
In particular, the system call fuzzer probes the seed image and
retrieves the path, type (e.g., normal ﬁle, directory, symbolic
link, FIFO ﬁle, etc.), and extended attributes of every ﬁle object
on it, which are packed into every initial test case. Moreover,
every initial test case involves a starting program that has a
distinct system call generated by the system call fuzzer for
mutation. To enlarge the overall coverage of the corpus, each
randomly generated system call operates a unique ﬁle object
(see §III-D for the details of program format and system call
generation). The metadata and the ﬁle status of the seed image,
along with a starting program together form an input test case,
which is packed by JANUS and saved into the corpus on the
disk for future fuzzing.
C. Fuzzing Images
JANUS relies on the image mutator to fuzz images. In
particular, the image mutator loads the metadata blocks of
a test case, and applies several common fuzzing strategies [76]
(e.g., bit ﬂipping, arithmetic operation on random bytes, etc.)
to randomly mutate the bytes of the metadata, as described in
Figure 4 ( 2 ). Similar to existing fuzzers [75], JANUS prefers a
group of speciﬁc integers (i.e., interesting values in Figure 4),
such as -1, 0, INT_MAX, etc., instead of purely random values
to mutate the metadata. In our evaluation, these special values
enable the image mutator to produce more corner cases, which
are not correctly handled by the ﬁle system (e.g., bug #1, #6,
#14, #28, #33, etc. in Table VI found by JANUS) and also
more extreme cases that increase the probability of crashing
(cid:25)(cid:19)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
pos = 0
for meta_block in self.meta_blocks:
meta_block_buffer = meta_buffer[pos:pos + meta_block.size]
if meta_block.csum_offset is not None:
1 # Class Janus
2 def release_image(self, meta_buffer):
3
4
5
6
7
8
9
10
Fig. 5: Pseudo-code of how JANUS releases the mutated metadata
blocks back to a full-size image for testing.
copy_buffer(self.image_buffer[meta_block.offset],
self.fix_csum(meta_block_buffer, meta_block.csum_offset)
meta_block_buffer, meta_block.size)
pos += meta_block.size
arg = Random.choice(args)
mutated_arg = self.generate_arg_by_status(syscall, arg)
new_program.syscalls[syscall_index].args[arg_index] = mutated_arg
return new_program
new_program = Program(self.program)
syscall_index = Random.randint(0, len(self.program.syscalls))
syscall = self.program.syscalls[syscall_index]
args = [i for i in range(len(syscall.args)) \
if not may_effect_status(syscall, i)]
1 # Class SyscallFuzzer
2 def mutate_syscall(self):
3
4
5
6
7
8
9
10
11
12
13 def generate_syscall(self, sysno=None, args=[]):
14
15
16
17
18
19
20
21
22
23
24
Fig. 6: Pseudo-code of how JANUS randomly mutates existing system
calls and generate new ones given a program.
new_program = Program(self.program)
new_status = Status(self.status)
syscall = Syscall()
if sysno is None: syscall.sysno = Random.choice(FS_SYSNOS)
else: syscall.sysno = sysno
for arg in args: syscall.add_arg(arg)
for i in range(len(args), SYSCALL_ARG_NUM[syscall.sysno]):
new_program.add_syscall(syscall)
new_status.update(syscall)
return (new_program, new_status)
syscall.add_arg(self.generate_arg_by_status(syscall, i))
the kernel by triggering a speciﬁc bug at runtime (e.g., most
of the out-of-bound access bugs discovered by JANUS).
After mutating the entire metadata blob, JANUS copies each
metadata block in the blob back to its corresponding position
inside the memory buffer, which stores the original full-size
image ( 3 ). To maintain the sanctity of the image, the image
parser recalculates the checksum value of every metadata block
by following the speciﬁc algorithm adopted by the target ﬁle
system, and ﬁlls the value at the recorded offset of the checksum
ﬁeld.
D. Fuzzing File Operations
The system call fuzzer enables JANUS to generate image-
directed workloads to effectively explore how a ﬁle system
handles various ﬁle operations requested by users. First, we
present the structure of a program manipulated by the system
call fuzzer. A program includes a list of ordered system calls
that modiﬁes the mutated image and maintains a variable bank
that stores the variables used by system calls. JANUS describes
each system call as a tuple of the syscall number, argument
values, and a return value. If any argument value or return
value is not a simple constant but a variable, JANUS presents
it as an index pointing to the variable stored in the variable
bank. In addition, the program also includes a list of active
ﬁle descriptors that are opened and have not been closed by
the program.
Similar to existing fuzzers (e.g., Syzkaller), the system call
fuzzer generates new programs from an input program in two
ways: (1) Syscall mutation. The system call fuzzer randomly
selects one system call in the program, and generates a list
of new values to replace the old value of a randomly selected
argument; (2) Syscall generation. The system call fuzzer
appends a new system call to the program, whose arguments
have randomly generated values. In particular, JANUS adopts
the same strategies that Syzkaller uses to generate values for the
trivial arguments of a system call. The candidate values of these
arguments are independent of our speculated runtime status.
For any argument that has a clearly deﬁned set of its available
values, JANUS randomly selects values from the set for it.
(e.g., int whence for lseek()). Moreover, JANUS generates
random numbers in a certain range for the arguments of an