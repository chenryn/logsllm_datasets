honest players to S according to the step 7 of Con-
vert Sharings.
1213. S internally executes Convert Sharings for each hon-
est player up to step 10 at which point S and A send
messages to each other according to the protocol
speci(cid:12)cation, with S emulating the honest servers
and A emulating the corrupt servers.
14. S de(cid:12)nes G, {z1, . . . , zn−2t}, and λb,m as in
∑
(i) =
, K) from FCS, S
(i) for each corrupt Si and
16. A provides an output for the environment, which S
step 12 of Convert Sharings and computes V (k)
replies with shares V (k)
for each (b, k) ∈ [ℓ] × [K].
forwards to Z.
15. Upon receiving (Shares?, ℓ, ℓ
zm (i) for each corrupt Si.
n−2t
m=1 λb,mU (k)
′
b
b
a , and the V (k)
Theorem 1. The protocol Convert Sharings UC-emulates
the ideal functionality FCS.
Proof. We need to show that for any polytime A, there
exists a polytime S such that no polytime Z can distin-
guish between interacting with A (in the execution of Con-
vert Sharings in the (FRandom,FRandomB ,FShareB ,FOpen)-hybrid
model) or interacting with S (in the ideal world protocol for
FCS).
Output of Honest Servers: We (cid:12)rst show that Z cannot
distinguish (except with negligible probability) between the
outputs of the honest servers in the hybrid versus the ideal
In the ideal execution, the honest servers will
execution.
output shares of V (k)
b which share the same values as the
input polynomials H (k)
will be uniformly
random subject to the constraint that they agree with the
shares provided by the adversary. Assuming the polynomi-
}i∈[n−2t] in step 12 of Convert Sharings are \correct"
als {U (k)
zm (−a) = H (k)
in that U (k)
b will hold the
same secrets as the H (k)
(as shown in the paragraph fol-
lowing the speci(cid:12)cation of Convert Sharings). Furthermore,
the shares of the corrupt servers are chosen by the simulator
to be the same as the shares in the hybrid execution. To
see that the V (k)
are uniformly random given the secrets
they hold and the shares of the corrupt players, note that
FShareB chooses the U (k)
for honest Si uniformly at random
given the secrets and corrupt shares. Since there are at least
|G| − t = (n − 2t) − t = n − 3t ≥ ℓ honest servers in G, the
uniform randomness then follows from the fact that inter-
polation with coe(cid:14)cients λb,m can be view as multiplication
by a hyper-invertible matrix (see the security proof for Ran-
domPairs in [22]).
a (zm), then the V (k)
It remains to show that the polynomials {Uzi
}i∈[n−2t] are
zi
a
b
b
i
\correct." We show that, except with negligible probability,
any dealer Si who dealt a U (k)
a (i)
for some a and k will be eliminated as corrupt in step 10 of
Convert Sharings. The random values r(k) opened in step 5
of Convert Sharings is a vector in ZK
p . For some (cid:12)xed i, let
V denote the subspace of ZK
(−a) ̸= H (k)
such that U (k)
p such that
i
i
∑
∑
for each a ∈ [ℓ
′
such that∑
K
i
p
Then the set of all possible vectors (r(1), . . . , r(K)) in ZK
(−a) ̸=
such the check in step 10 will pass is v +V . Now if U (k)
H (k)
a (i) for some a and k, then V will be a proper sub-
space of ZK
p . Then the probability that a random vector
(r(1), . . . , r(K)) will be in v +V is negligible.
Output of Adversary: The next step is to show that Z cannot
distinguish between the output of A in the hybrid versus
the ideal execution. Since the output of A is forwarded by
S to Z in the last step of simulation, it su(cid:14)ces to show
that A cannot distinguish between these two scenarios. We
therefore demonstrate that the messages sent from S to A
have the same distribution as those that would be sent in
the hybrid execution.
In step 8 of simulation, S sends uniformly random values,
which is what FOpen does in the hybrid execution. In step 9,
A corrupts servers, and S simply forwards their shares to
A, which is what A would see in the hybrid execution. We
deal with step 11 below. In step 13, S follows the protocol
speci(cid:12)cation to emulate the messages that would be sent in
the hybrid execution.
In step 11, S emulates honest servers sending shares of
a , and A may adaptively corrupt servers dur-
U (k)
a (q) for k ∈ [K] that are
ing this process. The shares H (k)
forwarded from FCS are the same as in the hybrid execution.
The H (K+1)
are uniformly random given the corrupt servers’
∑
S are uniformly random given the corrupt servers’ shares,
so is H (K+1)
in the ideal execution, since it is de(cid:12)ned by
a
k=1 r(k)H (k)
H (K+1)
K
=
for k ∈ [K + 1] are uniformly random given the cor-
the U (k)
rupt servers’ shares subject to U (k)
a (q) in both
the real and ideal worlds.
shares in the hybrid execution, and since the eHa chosen by
a − eHa. Using a similar argument,
(−a) = H (k)
and H (k)
a
a
q
q
i
B. PDC SECURITY PROOF SKETCH
Description of FPDC.
The parties that provide input to FPDC are the IVS,
V ,
the Ledger Servers, S1, . . . , Sn, and the users
U1, . . . , UJ , where J = poly(κ).
2.
Ledger Initialization:
1. Receive one copy of the balance ledger from each
honest Ledger Server. Each balance ledger entry is
of the form (ξ, ζ, ID, b, c), where ξ and ζ \represent"
the private and public keys (respectively), ID is the
identity associated with the address, b is the current
balance, and c is the transaction counter.
Initialize the transaction ledger to be empty. The
transaction ledger will be of the same format as in
the real-world protocol.
3. Receive from V a list L of identities. FPDC may
receive lists from V at any time during the execution
′
of the ideal process. Upon receiving another list L
from V , update L ← L ∪ L
′
. All lists received from
V are forwarded to A.
Initialize a set P := ∅, which will contain ordered
pairs of the form (ID, δ), where ID is an identity
and δ \represents" a signature on ID.
4.
k=1 r(k)U (k)
i
(−a) =
K
k=1 r(k)H (k)
a (i)
]. Let v = (v(1), . . . , v(K)) be some vector
∑
K
k=1 v(k)U (k)
i
(−a) + U (K+1)
(−a)
a (i) + H (K+1)
a
i
K
k=1 v(k)H (k)
=
(i).
5. Set the block number: BlockN um := 1.
13Identity Veri(cid:12)cation: The following occurs upon receipt
of a message of the form (verify_identity, ID) from
a user U .
If ID /∈ L, do nothing (skip the following steps).
1.
If (ID,·) /∈ P , send ID to A. The adversary returns
2.
δ, and FPDC updates P ← P ∪ {(ID, δ)}.
3. For (ID, δ) ∈ P , send (ID, δ) to U and V .
Interaction with Users: The following messages may
be received from users at any time during the ideal
execution. Messages will be deleted as in step 3 of
Ledger Server Loop. The subset I ⊂ [n] represents the
set of servers that are to receive their messages in the
current block, while the servers in I receive their mes-
sages in the next block.
1. Messages
form (init_addr, nonce,
V, ID, δ, I).
Store this message, and if there
is any corrupt Si such that i ∈ I, then send
(init_addr, nonce, V ) to A.
the
of
2. Messages of the form (tx, nonce, ξ1, ζ1, ζ2, j, v, I). If
there is no balance ledger entry with ξ1 as the pri-
vate key and ζ1 as the public key, or if there is no
balance ledger entry with ζ2 as the public key, then
delete this message. Otherwise, store this message,
and if there is any corrupt Si such that i ∈ I, then
send (tx, nonce, ζ1, ζ2, j) to A.
3. Messages
of
form (check_bal, nonce,
the
ξ, ζ, j1, j2, B1, B2, I).
If there is no balance ledger
entry with ξ as the private key and ζ as the public
key, then delete this message. Otherwise, store this
message, and if there is any corrupt Si such that
i ∈ I, then send (check_bal, nonce, ζ, j1, j2, B1, B2)
to A.
4. The adversary may send messages on behalf of the
corrupt users at any time. The messages may be of
any one of the above three forms, with the excep-
tion that ID, δ, and v (values that are secret-shared
in the real protocol) will be replaced with ⊥. (This
models the fact that A may deal inconsistent shar-
ings.) FPDC deletes or stores these messages accord-
ing the the same criteria used for messages from the
honest users.
sends messages
(check_bal, nonce,
to A of
(tx, nonce,
Processing Blocks: Upon receiving a message of the
form (update block, v) from all honest servers, if v =
BlockN um + 1, then the following steps are performed:
1. FPDC
the
form
ζ1, ζ2, j, i),
(init_addr, nonce, V, i),
ζ, j1, j2, B1, B2, i), which
or
simulates broadcasting those messages
the
honest servers. Messages received from users in
block BlockN um are broadcast for each honest
server with index in I, and messages received in
block BlockN um − 1 are broadcast for each honest
server with index in I.
2. The adversary may send messages to FPDC of the
same form as in the previous step, which simulates
broadcasting those messages for corrupt server Si.
3. For each broadcast message satisfying the conditions
of step 5 of Ledger Server Loop, FPDC performs the
corresponding action (i.e., adding an entry to the
balance ledger for an init_addr message, transfer-
for
4.
ring funds for a tx message, and returning informa-
tion to the user for a check_bal message). Before
doing so, for any message that involved a sharing
with shares set to ⊥ by A, FPDC asks A for a value
to replace this with (although A may still respond
with ⊥, which represents to a corrupt sharing). For
an init_addr message, FPDC chooses random ξ and
ζ to output as private and public keys for the user.
If a proactive refresh is to occur at the end of this
block, A may choose to decorrupt parties at this
step.
5. For each message from an honest user in block
BlockN um, notify A as in Interaction with Users
above if there is any corrupt Si such that i ∈ I.
6. Update BlockN um ← BlockN um + 1.
Corruption: The adversary may choose to corrupt par-
ties at any time during the ideal execution. Upon re-
ceiving (corrupt, Si) from A, FPDC sends (corrupt) to
Si and sends to A a copy of the balance and transac-
tion ledgers. In addition, FPDC sends A init_addr, tx,
and check_bal messages as in Interaction with Users
above for any message received from a user in the cur-
rent block with i ∈ I, and for any message received in
the previous block with i ∈ I.
We sketch below the simulator for the PDC scheme:
Ledger Initialization: To initialize the corrupt servers’
ledger entries, S provides to A balance ledger entries like
those in FPDC, except that randomly chosen values repre-
senting the corrupt servers’ shares are also included. All
lists L of identities received are forwarded to A.
Identity Veri(cid:12)cation: After receiving ID from FPDC, S will
interact with A emulating FSig as in [15]. This will result in
A choosing a signature, δ, which S sends to FPDC.
Interaction with Users: Upon receiving an init_addr, tx,
or check_bal message originating from an honest user, S re-
lays this message to A, but includes a randomly generated
share for each sharing. For each such message originating
from a corrupt player, S forwards a message of the appro-
priate format to FPDC.
Processing Blocks: Messages broadcast by honest servers
are forwarded from FPDC to A, and messages broadcast by
corrupt servers are forwarded from A to FPDC. For each
sub-functionality to invoke, S receives A’s shares. Based
on shares received thus far, S informs FPDC of the value to
be shared for each sharing that was initially shared with ⊥.
If the sub-functionality does not terminate, than the failure
type is forwarded from FPDC to A (i.e., a sharing was invalid,
a user was overdrawing an account, etc.).
Corruption: Upon corruption, S randomly generates a
new share for that server for each ledger entry and each
stored user message that has an associated sharing.
The indistinguishability of the view of the environment
can be argued as follows: The users who follow the proto-
col speci(cid:12)cation will generate uniformly random sharings,
and the shares provided to A by S are randomly chosen.
Since shares provided by A are replaced with ⊥ until enough
shares are received to determine the value being shared (or
whether the sharing is inconsistent), S can correctly pro-
vide input for FPDC, and hence the correct output will be
provided to the environment.
14