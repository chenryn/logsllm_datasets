In the incorrect version, the lack of a compound statement following the magicword if 
statement means the length check is performed only if the magicword comparison is 
true. Therefore, memcpy() is likely always performed. 
Challenge 10 
l = msg_hdr.msg_len; 
frag_off = msg_hdr.frag_off; 
frag_len = msg_hdr.frag_len; 
... 
if ( frag_len > (unsigned long)max) 
{ 
    al=SSL_AD_ILLEGAL_PARAMETER; 
    SSLerr(SSL_F_DTLS1_GET_MESSAGE_FRAGMENT, 
           SSL_R_EXCESSIVE_MESSAGE_SIZE); 
    goto f_err; 
} 
if ( frag_len + s->init_num > 
    (INT_MAX - DTLS1_HM_HEADER_LENGTH)) 
{ 
    al=SSL_AD_ILLEGAL_PARAMETER; 
    SSLerr(SSL_F_DTLS1_GET_MESSAGE_FRAGMENT, 
           SSL_R_EXCESSIVE_MESSAGE_SIZE); 
    goto f_err; 
} 
if ( frag_len & 
     !BUF_MEM_grow_clean(s->init_buf, (int)frag_len + 
                    DTLS1_HM_HEADER_LENGTH + s->init_num)) 
{ 
    SSLerr(SSL_F_DTLS1_GET_MESSAGE_FRAGMENT, 
           ERR_R_BUF_LIB); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
313 
    goto err; 
} 
if ( s->d1->r_msg_hdr.frag_off == 0) 
{ 
    s->s3->tmp.message_type = msg_hdr.type; 
    s->d1->r_msg_hdr.type = msg_hdr.type; 
    s->d1->r_msg_hdr.msg_len = l; 
    /* s->d1->r_msg_hdr.seq = seq_num; */ 
} 
/* XDTLS:  ressurect this when restart is in place */ 
s->state=stn; 
/* next state (stn) */ 
p = (unsigned char *)s->init_buf->data; 
if ( frag_len > 0) 
{ 
    i=s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE, 
                                      &p[s->init_num], 
                                      frag_len,0); 
    /* XDTLS:  fix thismessage fragments cannot 
               span multiple packets */ 
    if (i rwstate=SSL_READING; 
        *ok = 0; 
        return i; 
    } 
} 
else 
   i = 0; 
Did you spot the bug? There is a mistake in one of the length checks where the 
developers use a bitwise AND operator (&) instead of a logical AND operator (&&). 
Specifically, the statement should read: 
if ( frag_len && 
     !BUF_MEM_grow_clean(s->init_buf, (int)frag_len + 
             DTLS1_HM_HEADER_LENGTH + s->init_num)) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
314 
This simple mistake could lead to memory corruption if the BUF_MEM_grow_clean() 
function were to fail. This function returns 0 upon failure, which will be set to 1 by the 
logical not operator. Then, a bitwise AND operation with frag_len will occur. So, in the 
case of failure, the malformed statement is really doing the following: 
if(frag_len & 1) 
{ 
     SSLerr(...); 
} 
7.2.10 Summary 
This chapter has covered nuances of the C programming language that can lead to 
subtle and complex vulnerabilities. This background should enable you to identify 
problems that can occur with operator handling, type conversions, arithmetic 
operations, and common C typos. However, the complex nature of this topic does not 
lend itself to complete understanding in just one pass. Therefore, refer back to this 
material as needed when conducting application assessments. After all, even the best 
code auditor can easily miss subtle errors that could result in severe vulnerabilities. 
7.3 Chapter 7.  Program Building Blocks 
"The secret to creativity is knowing how to hide your sources." 
Albert Einstein 
7.3.1 Introduction 
When reviewing applications, certain constructs tend to appear over and over again. 
These recurring patterns are the natural result of programmers worldwide solving 
similar small technical problems as they develop applications. These small problems 
are often a result of the application's problem-domain, such as needing a particular 
data structure or algorithm for the quick retrieval or sorting of a certain type of data 
element. They can also result from technical details of the program's target 
environment or the capabilities and limitations of the programming language itself. 
For example, most applications written in C have code for manipulating string bytes 
and handling dynamic memory allocation. 
From a security review perspective, it proves useful to study these recurring code 
patterns, focusing on areas where developers might make security-relevant mistakes. 
Armed with this knowledge, you can quickly identify and evaluate problem-causing 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
315 
behaviors and patterns in the code you encounter. You can also adapt more quickly 
when you encounter new codebases. Over time, you will find that it becomes easier to 
recognize the intent and meaning of unfamiliar code because you can spot familiar 
patterns and activities. This chapter explores these common code constructs and 
patterns and helps you identify where developers are prone to making 
security-relevant mistakes. 
7.3.2 Auditing Variable Use 
Variables are objects used to store data elements that have some relevance to an 
application. They are given meaning by the way they're used: what's stored in them, 
what operations are performed on them, and what they represent. A large part of 
code auditing is based on understanding variables, their relationships to each other, 
and how an application can be affected adversely by unexpected manipulation of 
these relationships. This section discusses different techniques for recognizing 
variable and data structure misuse and presents several examples in popular 
applications to help reinforce the concepts. 
Variable Relationships 
Variables are related to each other if their values depend on each other in some 
fashion, or they are used together to represent some sort of application state. For 
example, a function might have one variable that points to a writeable location in a 
buffer and one variable that keeps track of the amount of space left in that buffer. 
These variables are related to each other, and their values should change in lockstep 
as the buffer is manipulated. The more variables used to represent state, the higher 
the chances that the variables can be manipulated to subvert the variable 
relationships, which can lead to an overall inconsistent state. As a code auditor, you 
must search for variables that are related to each other, determine their intended 
relationships, and then determine whether there's a way to desynchronize these 
variables from each other. This usually means finding a block of code that alters one 
variable in a fashion inconsistent with the other variables. Examples of this type of 
vulnerability can range from simple errors involving two variables in a loop to 
complicated ones involving many variables across multiple program modules that 
combine to represent complex state. 
First, take a look at Listing 7-1, an example from the mod_dav Apache module. This 
code deals with CDATA XML elements. 
Listing 7-1. Apache mod_dav CDATA Parsing Vulnerability 
    cdata = s = apr_palloc(pool, len + 1); 
    for (scan = elem->first_cdata.first; scan != NULL; 
         scan = scan->next) { 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
316 
        tlen = strlen(scan->text); 
        memcpy(s, scan->text, tlen); 
        s += tlen; 
    } 
    for (child = elem->first_child; child != NULL; 
         child = child->next) { 
        for (scan = child->following_cdata.first; 
             scan != NULL; 
             scan = scan->next) { 
            tlen = strlen(scan->text); 
            memcpy(s, scan->text, tlen); 
            s += tlen; 
        } 
    } 
    *s = '\0'; 
In Listing 7-1, you can see that a data buffer, s (also set to cdata), is allocated via 
apr_palloc(), and then string data elements from two linked lists 
(elem->first_cdata.first and elem->first_child) are copied into the data buffer. 
The length of the cdata buffer, len, was calculated previously by two similar loops 
through the linked lists. At this point, you have two related variables you're interested 
in: a pointer to the buffer, cdata, and a variable representing the buffer's length, len. 
The preceding code is fine, but see what happens when mod_dav attempts to trim the 
buffer by pruning whitespace characters: 
   if (strip_white) { 
       /* trim leading whitespace */ 
       while (apr_isspace(*cdata)) /* assume: return false 
                                    * for '\0' */ 
           ++cdata; 
       /* trim trailing whitespace */ 
       while (len  > 0 && apr_isspace(cdata[len])) 
           continue; 
       cdata[len + 1] = '\0'; 
   } 
   return cdata; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
317 
The leading spaces are skipped by incrementing the cdata variable; however, the len 
variable doesn't get decremented to reflect the buffer's shrinking size. The 
relationship between the two variables has been rendered invalid. Therefore, when 
the trailing spaces are trimmed in the second while loop, the cdata[len] location can 
point outside the bounds of the buffer. 
The previous example shows a reasonably straightforward error. Usually 
vulnerabilities of this nature are far more complicated because of several related 
variables combining to represent application state or complex code paths that allow 
more opportunities for variables to be desynchronized from one another. To see an 
example of these code paths, take a look at Listing 7-2, from the BIND 9.2.1 resolver 
code. This code has been shortened because it's quite long and rather difficult to 
follow. 
Listing 7-2. Bind 9.2.1 Resolver Code gethostans() Vulnerability 
static struct hostent * 
gethostans(struct irs_ho *this, 
       const u_char *ansbuf, int anslen, 
       const char *qname, int qtype, 
       int af, int size,    /* meaningless for addrinfo cases */ 
       struct addrinfo **ret_aip, const struct addrinfo *pai) 
{ 
    struct pvt *pvt = (struct pvt *)this->private; 
    int type, class, buflen, ancount, qdcount, n, 
        haveanswer, had_error; 
    int error = NETDB_SUCCESS, arcount; 
    int (*name_ok)(const char *); 
    const HEADER *hp; 
    const u_char *eom; 
    const u_char *eor; 
    const u_char *cp; 
    const char *tname; 
    const char *hname; 
    char *bp, **ap, **hap; 
    char tbuf[MAXDNAME+1]; 
    struct addrinfo sentinel, *cur, ai; 
    const u_char *arp = NULL; 
    ... 
    eom = ansbuf + anslen; 
    ... 
    bp = pvt->hostbuf; 
    buflen = sizeof pvt->hostbuf; 
    cp = ansbuf + HFIXEDSZ; 
    ... 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
318 
    haveanswer = 0; 
    had_error = 0; 
    while (ancount > 0 && cp hostbuf buffer holds hostnames read in from 
the DNS response. The buflen variable represents the amount of space left in the 
hostbuf buffer, and it's updated accordingly as the buffer is written into with each 
response from the packet. The bp variable holds the current write location in the 
hostname buffer. So every time bp is incremented to point further into the buffer, 
buflen should be decremented by the same amount. The while loop at the end 
iterates through each answer in the DNS response packet (as tracked by anscount), 
making sure it doesn't read past the end of the packet (stored in eom). 
The following code handles extracting hostnames from a CNAME answer to a query. It's 
correct from a security perspective and should give you a little insight into the use of 
variables: 
     ... 
     if ((qtype == T_A || qtype == T_AAAA || 
          qtype == ns_t_a6 || qtype == T_ANY) 
         && type == T_CNAME) { 
         if (ap >= &pvt->host_aliases[MAXALIASES-1]) 
             continue; 
         n = dn_expand(ansbuf, eor, cp, tbuf, sizeof tbuf); 
         if (n res, tbuf, name_ok)) { 
             had_error++; 
             continue; 
         } 
         cp += n; 
         /* Store alias. */ 
          *ap++ = bp; 
         ... 
         n = strlen(tbuf) + 1;    /* for the \0 */ 
         if (n > buflen || n > MAXHOSTNAMELEN) { 
             had_error++; 
             continue; 
         } 
         strcpy(bp, tbuf); 
         pvt->host.h_name = bp; 
         hname = bp; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
319 
         bp += n; 
         buflen -= n; 
         continue; 
Basically, if the query is a request for an IP address (qtype=), and the server responds 
with a CNAME, which is an alias, the program needs to record the alias into a list 
(pvt->host_aliases) and place the hostname into the pvt->hostbuf buffer. If there's 
room in the alias list, BIND uses dn_expand() to pull the hostname out of the packet 
into the temporary buffer tbuf. If this name is okay, the alias is stored in the 
hostname buffer. Note that the relationship highlighted earlier about bp and buflen 
moving in lockstep has been preserved. A code reviewer focusing on this relationship 
will see one case in which desynchronizing bp from buflen is possiblespecifically, when 
converting information related to A and AAAA records. The offending code is bolded in 
the following excerpt: 
     case T_A: 
     case T_AAAA: 
     convertinfo:  /* convert addrinfo into hostent form */ 
     ... 
        if (ret_aip) { /* need addrinfo. keep it. */ 
            while (cur && cur->ai_next) 
                cur = cur->ai_next; 
        } else if (cur->ai_next) { /* need hostent */ 
            struct addrinfo *aip = cur->ai_next; 
            for (aip = cur->ai_next; aip; 
                 aip = aip->ai_next) { 
                int m; 
                m = add_hostent(pvt, bp, hap, aip); 
                if (m h_addr_ptrs[MAXADDRS-1]) 
                    hap++; 
                bp += m; 
            } 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
320 
            freeaddrinfo(cur->ai_next); 
            cur->ai_next = NULL; 
        } 
        cp += n; 
        break; 
    default: 
        abort(); 
    } 
    if (!had_error) 
        haveanswer++; 
} 
As you can see, the bp variable is updated without buflen being decremented, thus 
desynchronizing the two variables. This introduces the possibility for clients to send 
malformed DNS responses with multiple A and AAAA responses that aren't stored 
correctly; consequently, the pvt->hostbuf variable can be overflowed. This 
vulnerability has since been fixed by removing this variable relationship to ensure 
that another bug like this doesn't occur. Instead of having a buflen variable, a pointer 
variable, ep, is introduced that's statically set to the end of the buffer. Even though 
this variable is also related to bp, the relationship is safer, as ep never has to move 
and, therefore, can never be desynchronized. In a situation like this, you should try to 
identify parts of code where bp is incremented past ep and a subtraction of the two 
pointers (ep - bp) is converted to a large positive integer that is passed as a length 
argument. 
The previous example demonstrated a length variable not being updated correctly to 
reflect the remaining space in a buffer. Despite the amount of code in this function, 
it's still a straightforward example, in that only two variables constituted the state you 