Aggressor.main
进入相关认证工
作
cs.jar 开始运行
输出相关错误，比
如缺少验证正数等
错误
错误
成功启动相关 
UI
new Authorization()
开始认证
开始认证
退出程序
readFile("cobaltstrike.auth")
将数据代入 _decrypt() 进行 
RSA 解密，此处使用公钥解
密
将返回的
将返回的 byte[] 步入
步入 AuthCrypto.derypt()
将公钥文件进行解
析，并计算 MD5 与指
定值进行对比
load() -> readAll("authpub.key")
new AuthCrypto()
cipher
生成
生成
pubkey
生成
生成
狗头退出
狗头退出
MD5 对比失败
对比失败
将 cipher 和 pubkey 代入 _decrypt()
经过 DataParser.readInt()
将 byte 的前 4 个字节转
成有符号 Int
返回一个新的数组
根据有符号 Int 值进行对比，
判断 .auth 是否符合要求
处理文件头，最终返回一个数组
该数组就是解密 .auth 的最终结果
解码返回的
byte[] 数据
对比失败
对比失败
return new 
byte[0]
判断 validto、valid
dataParser.readBytes(16)
byte[16] decryptKey
验证未通过
验证未通过
输出相应错误
输出相应错误
注：GUI 和 Console 的验证
一致
将该 key 代入
SleeveSecurity.registerKey()
获取一个 byte[32] digest
分解 digest
前16位作为 AES key
后16位作为 Hmac key
new SleeveSecurity()
mac = Mac.getInstance("HmacSHA256");
生成了一个
RSA/ECB/PKCS1Padding
的 ciper
当程序调用
SleevedResource.readResource() 
时，进行下一步的解密
将字符串中的resources/ 替换成 sleeve/
因此实际上读取的是 sleeve 中的文件
将文件读取，返回 byte[]
SleeveSecurity.decrypt() 将 byte[]  分成两部分
第一部分是文件主体
第二部分作为对比 flag
代入 Hmac key
将主体部分进行 Hmac 摘
要认证，截取前 16位，与
第二部分作对比
对文件主体进行 AES 解密，返回解密后的 byte[] 
对比失败
对比失败
报错：
[Sleeve] Bad HMAC on ...
代入 AES key
RcoIl 出品