# DevoFlow: Scaling Flow Management for High-Performance Networks

## Authors
- Andrew R. Curtis, University of Waterloo
- Jeffrey C. Mogul, HP Labs — Palo Alto
- Jean Tourrilhes, HP Labs — Palo Alto
- Praveen Yalagandula, HP Labs — Palo Alto
- Puneet Sharma, HP Labs — Palo Alto
- Sujata Banerjee, HP Labs — Palo Alto

## Abstract
OpenFlow is a promising concept that simplifies network and traffic management in enterprise and data center environments by enabling flow-level control over Ethernet switching and providing global visibility of the flows. However, this fine-grained control and visibility come with significant overheads, including frequent involvement of the switch's control plane and the OpenFlow controller, particularly for flow setups and statistics gathering.

In this paper, we analyze these overheads and demonstrate that the current design of OpenFlow is not suitable for high-performance networks. We introduce DevoFlow, a modified OpenFlow model that decouples control and global visibility to maintain useful visibility without unnecessary costs. Our evaluation through simulations shows that DevoFlow can effectively load-balance data center traffic while using 10–53 times fewer flow table entries and 10–42 times fewer control messages compared to traditional OpenFlow.

**Categories and Subject Descriptors:**
C.2 [Internetworking]: Network Architecture and Design

**General Terms:**
Design, Measurement, Performance

**Keywords:**
Data center, Flow-based networking

## 1. Introduction
Flow-based switches, such as those enabled by the OpenFlow framework, support fine-grained, flow-level control of Ethernet switching. This control is desirable because it:
1. Enables correct enforcement of flexible policies without detailed switch configurations.
2. Provides visibility over all flows, allowing for near-optimal traffic management.
3. Simplifies switch design, making it future-proof.

OpenFlow has been widely adopted in academic institutions, research laboratories, and by vendors like HP, NEC, Arista, and Toroki. While initially proposed for campus and wide-area networks, it has also been considered for high-performance networks, such as data centers.

However, OpenFlow's original design couples central control and complete visibility, leading to scalability issues. The controller must be involved in setting up all flows to have full visibility, which creates a centralized bottleneck. Additionally, switches themselves can become bottlenecks due to the slow control-data path, adding unacceptable latency to flow setup and preventing timely flow statistics for traffic management tasks like load balancing.

To address these issues, we propose DevoFlow, which devolves control of most flows back to the switches while maintaining central control over significant flows. This approach reduces the number of switch-controller interactions and the number of TCAM entries, while still providing the necessary visibility for effective flow management.

Our goal with DevoFlow is to enable cost-effective, scalable flow management. The key design principles are:
- Minimize control-plane involvement in flow setups.
- Maintain sufficient visibility for centralized flow management while providing aggregated flow statistics.
- Simplify the design and implementation of fast switches while retaining network programmability.

DevoFlow resolves two main dilemmas:
- **Control Dilemma:** Balancing the need for start-of-flow visibility with the load on the control plane and setup delay.
- **Statistics-Gathering Dilemma:** Balancing the need for detailed flow statistics with the load on the control plane.

By pushing responsibility for most flows to switches and adding efficient statistics collection mechanisms, DevoFlow achieves effective flow management. We discuss the benefits of centralized control and visibility in Section 2 to understand the extent of devolution required.

This work builds on previous research aimed at separating forwarding rules and policy to allow operators to specify high-level policies at a logically centralized controller. While these solutions are innovative, they may not be scalable due to the limitations of the underlying OpenFlow platform. Previous efforts have focused on scaling the controller, but we find that switches may be a greater scalability bottleneck. Addressing this requires minimal changes: slightly more functionality in switch ASICs and more efficient statistics-collection mechanisms.

This paper builds on our earlier work, providing a detailed analysis of OpenFlow's drawbacks, presenting the design and use of DevoFlow, and evaluating its performance through simulations.

## 2. Benefits of Central Control
In this section, we discuss the benefits of OpenFlow's central-control model that are worth preserving and those that can be relaxed to improve scalability.

### Avoiding Complex Global Policies
OpenFlow simplifies the creation of globally consistent policies, avoiding the complex and error-prone process of configuring individual switches. It can provide globally optimal admission control and flow routing for QoS policies, where hop-by-hop mechanisms may fall short.

However, not all flow setups need to be mediated by a central controller. Flows can be categorized into:
- **Security-sensitive flows:** Must be handled centrally to maintain security properties.
- **Significant flows:** Should be handled centrally to maintain global QoS and congestion properties.
- **Normal flows:** Can be set up by individual switches.

Using standard OpenFlow, wild-card rules can pre-authorize certain sets of flows, and the controller can define flow categories that require per-flow vetting. Thus, for security, the controller does not need to be involved in every flow setup.

### Near-Optimal Traffic Management
Effective network performance management requires the controller to have knowledge of the current loads on most network elements. Timely statistics on some flows are also essential for maximizing performance objectives.

Two examples where the controller is crucial are:
- **Load Balancing:** The controller can detect and manage long-lived, high-throughput "elephant" flows.
- **Energy-Aware Routing:** The controller can optimize routes to reduce energy consumption.

In summary, the central-control benefits of OpenFlow can be maintained by individually approving certain flows and categorically approving others, while devolving control of normal flows to the switches.