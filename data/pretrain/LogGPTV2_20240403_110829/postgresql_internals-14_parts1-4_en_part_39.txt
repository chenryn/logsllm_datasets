Hereisanexampleofanindexscanthatprocessesalargenumberofrows:
=> EXPLAIN SELECT * FROM bookings WHERE book_ref  SELECT round(132999::numeric/reltuples::numeric, 4)
FROM pg_class WHERE relname = 'bookings';
round
−−−−−−−−
0.0630
(1 row)
p. Thisvalueiscloseto 1 ,whichwecouldhaveguessedknowingthatbook_refvalues
16
rangefromto.
For-trees,theindex-relatedpartofthe/costestimationincludesthecostof
readingalltherequiredpages. Indexentriesthatsatisfyanyconditionsupported
by-treesarestoredinpagesboundintoanorderedlist,sothenumberofindex
pages to be read is estimated at the index size multiplied by the selectivity. But
sincethesepagesarenotphysicallyordered,readinghappensinarandomfashion.
Cresourcesarespentonprocessingalltheindexentriesthatareread(thecostof
0.005 processingasingleentryisestimatedatthecpu_index_tuple_cost value)andcom-
putingtheconditionforeachoftheseentries(inthiscase,theconditioncontains
0.0025 asingleoperator;itscostisestimatedatthecpu_operator_costvalue).
376
20.1 RegularIndexScans
Tableaccessisregardedassequentialreadingoftherequirednumberofpages. In
thecaseofaperfectcorrelation,heaptupleswillfolloweachotherondisk,sothe
numberofpagesisestimatedatthesizeofthetablemultipliedbytheselectivity.
The/costisfurtherextendedbytheexpensesincurredbytupleprocessing;they
areestimatedatthecpu_tuple_costvaluepertuple. 0.01
=> WITH costs(idx_cost, tbl_cost) AS (
SELECT
(
SELECT round(
current_setting('random_page_cost')::real * pages +
current_setting('cpu_index_tuple_cost')::real * tuples +
current_setting('cpu_operator_cost')::real * tuples
)
FROM (
SELECT relpages * 0.0630 AS pages, reltuples * 0.0630 AS tuples
FROM pg_class WHERE relname = 'bookings_pkey'
) c
),
(
SELECT round(
current_setting('seq_page_cost')::real * pages +
current_setting('cpu_tuple_cost')::real * tuples
)
FROM (
SELECT relpages * 0.0630 AS pages, reltuples * 0.0630 AS tuples
FROM pg_class WHERE relname = 'bookings'
) c
)
)
SELECT idx_cost, tbl_cost, idx_cost + tbl_cost AS total
FROM costs;
idx_cost | tbl_cost | total
−−−−−−−−−−+−−−−−−−−−−+−−−−−−−
2457 | 2177 | 4634
(1 row)
Thesecalculationsillustratethelogicbehindthecostestimation,sotheresultis
aligned with the estimation provided by the planner, even if it is approximated.
Gettingtheexactvaluewouldrequiretakingotherdetailsintoaccount,whichwe
arenotgoingtodiscusshere.
377
Chapter20 IndexScans
Bad Scenario: LowCorrelation
Everythingchangesifthecorrelationislow.Let’screateanindexonthebook_date
column,whichhasalmostzerocorrelationwiththisindex,andthentakealookat
thequerythatselectsalmostthesamefractionofrowsasinthepreviousexample.
Indexaccessturnsouttobesoexpensivethattheplannerchoosesitonlyifallthe
otheralternativesareexplicitlyforbidden:
=> CREATE INDEX ON bookings(book_date);
=> SET enable_seqscan = off;
=> SET enable_bitmapscan = off;
=> EXPLAIN SELECT * FROM bookings
WHERE book_date  WITH costs(idx_cost, tbl_cost) AS (
SELECT
( SELECT round(
current_setting('random_page_cost')::real * pages +
current_setting('cpu_index_tuple_cost')::real * tuples +
current_setting('cpu_operator_cost')::real * tuples
)
FROM (
SELECT relpages * 0.0630 AS pages, reltuples * 0.0630 AS tuples
FROM pg_class WHERE relname = 'bookings_pkey'
) c
),
( SELECT round(
current_setting('random_page_cost')::real * tuples +
current_setting('cpu_tuple_cost')::real * tuples
)
FROM (
SELECT relpages * 0.0630 AS pages, reltuples * 0.0630 AS tuples
FROM pg_class WHERE relname = 'bookings'
) c
)
)
SELECT idx_cost, tbl_cost, idx_cost + tbl_cost AS total FROM costs;
idx_cost | tbl_cost | total
−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−
2457 | 533330 | 535787
(1 row)
The reason is that the model takes caching into account. Frequently used pages
arekeptinthebuffercache(andinthecache),sothebiggerthecachesize,the
morechancestofindtherequiredpageinit,thusavoidinganextradiskaccessop-
eration.Forplanningpurposes,thecachesizeisdefinedbytheeffective_cache_size 4GB
parameter.Thesmalleritsvalue,themorepagesareexpectedtoberead.
Thegraphthatfollowsshowsthedependencybetweentheestimationofthenum-
ber of pages to be read and the table size (for the selectivity of 1 and the page
2
containing10rows).1 Thedashedlinesshowtheaccesscountinthebestscenario
possible(halfofthepagecountifthecorrelationisperfect)andintheworstsce-
nario(halfoftherowcountifthereiszerocorrelationandnocache).
1 backend/optimizer/path/costsize.c,index_pages_fetchedfunction
379
Chapter20 IndexScans
p coca ug ne owcount sel=0.5
a c e s ts
r
of
5
0.
count
page
0.5 of page count
tablesize
effective_cache_size
Itisassumedthattheeffective_cache_sizevalueindicatesthetotalvolumeofmem-
orythatcanbeusedforcaching(includingboththePostgrebuffercacheand
cache).Butsincethisparameterisusedsolelyforestimationpurposesanddoes
notaffectmemoryallocationitself,youdonothavetotakeactualfiguresintoac-
countwhenchangingthissetting.
Ifyoureduceeffective_cache_sizetotheminimum,theplanestimationwillbeclose
tothelow-endvalueshownabovefortheno-cachingcase:
=> SET effective_cache_size = '8kB';
=> EXPLAIN SELECT * FROM bookings
WHERE book_date  RESET effective_cache_size;
=> RESET enable_seqscan;
=> RESET enable_bitmapscan;
Theplannercalculatesthetable/costforbothworst-caseandbest-casescenar-
iosandthentakesanintermediatevaluebasedontheactualcorrelation.1
Thus,anindexscancanbeagoodchoiceifonlyafractionofrowshastoberead.If
heaptuplesarecorrelatedwiththeorderinwhichtheaccessmethodreturnstheir
s,thisfractioncanbequitesubstantial.However,ifthecorrelationislow,index
scanningbecomesmuchlessattractiveforquerieswithlowselectivity.
20.2 Index-Only Scans
Ifanindexcontainsalltheheapdatarequiredbythequery,itiscalledacovering
indexforthisparticularquery. Ifsuchanindexisavailable,extratableaccesscan
beavoided: insteadofs,theaccessmethodcanreturntheactualdatadirectly.
Suchatypeofanindexscaniscalledanindex-onlyscan.2 Itcanbeusedbythose
accessmethodsthatsupporttheRproperty. p.
Intheplan,thisoperationisrepresentedbytheIndexOnlyScan3node:
=> EXPLAIN SELECT book_ref FROM bookings WHERE book_ref  SELECT relpages, relallvisible
FROM pg_class WHERE relname = 'bookings';
relpages | relallvisible
−−−−−−−−−−+−−−−−−−−−−−−−−−
13447 | 13446
(1 row)
Thecostestimationofanindex-onlyscandiffersfromthatofaregularindexscan:
its / cost related to table access is taken in proportion to the fraction of pages
thatdonotappearinthevisibilitymap. (Thecostestimationoftupleprocessing
isthesame.)
Sinceinthisparticularexampleallpagescontainonlyall-visibletuples,thecost
ofheap/isinfactexcludedfromthecostestimation:
=> WITH costs(idx_cost, tbl_cost) AS (
SELECT
(
SELECT round(
current_setting('random_page_cost')::real * pages +
current_setting('cpu_index_tuple_cost')::real * tuples +
current_setting('cpu_operator_cost')::real * tuples
)
FROM (
SELECT relpages * 0.0630 AS pages,
reltuples * 0.0630 AS tuples
FROM pg_class WHERE relname = 'bookings_pkey'
) c
) AS idx_cost,
382
20.2 Index-OnlyScans
(
SELECT round(
(1 - frac_visible) * -- fraction of non-all-visible pages
current_setting('seq_page_cost')::real * pages +
current_setting('cpu_tuple_cost')::real * tuples
)
FROM (
SELECT relpages * 0.0630 AS pages,
reltuples * 0.0630 AS tuples,
relallvisible::real/relpages::real AS frac_visible
FROM pg_class WHERE relname = 'bookings'
) c
) AS tbl_cost
)
SELECT idx_cost, tbl_cost, idx_cost + tbl_cost AS total
FROM costs;
idx_cost | tbl_cost | total
−−−−−−−−−−+−−−−−−−−−−+−−−−−−−
2457 | 1330 | 3787
(1 row)
Anyunvacuumedchangesthathavenotdisappearedbehindthedatabasehorizon p.
yetincreasetheestimatedcostoftheplan(and,consequently,makethisplanless
attractive to the optimizer). The   command can show the actual
heapaccesscount.
Inanewlycreatedtable,Postgrehastocheckvisibilityofallthetuples:
=> CREATE TEMP TABLE bookings_tmp
WITH (autovacuum_enabled = off) AS
SELECT * FROM bookings
ORDER BY book_ref;
=> ALTER TABLE bookings_tmp ADD PRIMARY KEY(book_ref);
=> ANALYZE bookings_tmp;
=> EXPLAIN (analyze, timing off, summary off)
SELECT book_ref FROM bookings_tmp WHERE book_ref  VACUUM bookings_tmp;
=> EXPLAIN (analyze, timing off, summary off)
SELECT book_ref FROM bookings_tmp WHERE book_ref < '100000';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Only Scan using bookings_tmp_pkey on bookings_tmp
(cost=0.43..3787.91 rows=132999 width=7) (actual rows=132109 l...
Index Cond: (book_ref < '100000'::bpchar)
Heap Fetches: 0
(4 rows)
Indexes with the Include Clause
It is not always possible to extend an index with all the columns required by a
query:
• Addinganewcolumntoauniqueindexwouldcompromisetheuniquenessof
theoriginalkeycolumns.
• Indexaccessmethodsmaynotprovideanoperatorclassforthedatatypeof
thecolumntobeadded.
v. In this case, you can still include columns into an index without making them a
part of the index key. It will of course be impossible to perform an index scan
basedontheincludedcolumns,butifaqueryreferencesthesecolumns,theindex
willfunctionasacoveringone.
Thefollowingexampleshowshowtoreplaceanautomaticallycreatedprimarykey