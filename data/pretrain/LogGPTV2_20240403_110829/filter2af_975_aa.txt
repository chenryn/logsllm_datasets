# 微信朋友圈分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0、声明
本文仅供安全研究与分享之用，任何人将本文的内容做其他用途（攻击、商业），作者不承担任何法律及连带责任。（说实话：也没什么商业和攻击的用途，本文只能用来装X和学习，没有什么其他用途。）
## 1、前言
本人还是安全路上的一个菜鸟，很多东西都是站在巨人的肩膀上进行产出的。本文是基于luoyesiqiu对7.0.10微信进行分析的基础之上对于
**7.0.14**
进行分析（这几天好像微信更新了7.0.15，有兴趣的师傅们可以试一试本文的方法），以及完善其原文没有的视频朋友圈方面的内容。（luoyesiqiu博客传送门：[https://www.cnblogs.com/luoyesiqiu/）](https://www.cnblogs.com/luoyesiqiu/%EF%BC%89)
## 2、环境配置
###  2.0 使用工具和环境
**·Android Studio 162.3934792（主要是为了SDK中的工具，不装AS也行）**
**·JDK8**
**·雷电模拟器3.93**
**·python 3.72**
**·frida 12.8.20**
**·jadx**
###  2.1工具介绍
####  2.1.1 SDK tools
对于微信这个商业的大工程来说，如果从头进行分析，那么无疑是很困难的，所以对于具体的功能点，可以通过定位具体Activity进行分析。为了定位需要用到一些在安卓APP开发过程中的工具，这里使用的是DDMS和UI
automonitor。  
这两个工具在Android
Studio的tools下面是可以找到的。具体用法可参考：
这里还有一个小提示，对于Java环境最好不要配置最新的，很多工具并不能支持，所以在这里我改回了Java8
####  2.1.2 雷电模拟器
这个模拟器是个人感觉比较好用的，默认是root。当然对于不同人来说使用体验是不一样的。在分析过程中，使用的雷电模拟器版本是3.93，应该在当前来说是最新版本。
本菜鸟在请教很多大佬的时候，大佬们都建议使用可以root的真机进行调试。。。（学生党，是真的穷。）所以只能用模拟器来凑合一些，有条件的还是用用真机。
####  2.1.3 frida
frida是一款方便并且易用的跨平台Hook工具，使用它不仅可以Hook Java写的应用程序，而且还可以Hook原生的应用程序。
frida分客户端环境和服务端环境。在客户端我们可以编写Python代码，用于连接远程设备，提交要注入的代码到远程，接受服务端的发来的消息等。在服务端，我们需要用Javascript代码注入到目标进程，操作内存数据，给客户端发送消息等操作。我们也可以把客户端理解成控制端，服务端理解成被控端。
假如我们要用PC来对Android设备上的某个进程进行操作，那么PC就是客户端，而Android设备就是服务端。
这里对frida进行一个简单的介绍，在下一节对其配置进行详细的介绍
####  2.1.4 jadx
此工具主要是为了静态分析的。之前本菜鸟比较喜欢使用的是JEB，可以进行动态调试，静态分析也很支持。但是可能是电脑配置不够，如果想要分析微信的话，直接就卡死了。原因是Java堆内存不够。  
后来就决定使用jadx，比较好的是jadx可以直接修改电脑给他的堆内存，有助于后续的静态分析。
###  2.2 Frida配置
frida的配置说简单也是简单的，但是说难也难。这里为了让其他人少踩点坑，就详细介绍一下如何进行配置。
####  2.2.1 服务端配置
查看服务端（就是手机或者模拟器）版本，这里是x86
在Github上下载对应的版本（一般来说模拟器都是x86，真机根据架构不同，选择的版本也不同）
解压缩之后，可以重命名
之后传入模拟器
给予其运行权限
运行frida-server
####  2.2.2 客户端配置
这个安装对我来说耗费的时间比较多。参考了很多网站上的配置，都没成功。后来发现归根结底还是自己不够耐心。
有几个关键点：一是python的版本，这里我使用的是3.7+的版本，所以一定要去官网上看看对于3.7+版本的Python需要什么版本的frida库；二是耐心，对于firda-tools和frida的安装，安装命令很简单：pip install xxxxxx==（version）。但是很长时间都会卡在setup.py上面。
那个时候我比较急躁，想着去找办法，网上给的建议是自己去下对应版本的egg文件，然后放在Script目录下。  
其实慢慢等是可以解决的。当初我就是吃饭前敲完命令，吃完饭回来之后就装上了。
命令如下(一定要注意python的版本)：
    pip install frida-tools 
    or
    pip install frida-tools == (version)
    pip install frida 
    or
    pip install frida == (version)
####  2.2.3 frida使用
frida代码编写有一个python框架，对于这个框架只要修改jscode代码即可
    import frida
    import sys
    jscode ='''
    Java.perform(function(){
        var SnsUploadUI = Java.use('com.tencent.mm.plugin.sns.ui.SnsUploadUI');
        var ai = SnsUploadUI.ai.overload("android.os.Bundle");
        ai.implementation = function(bundle)
        {
        var ret = ai.call(this, bundle);
        send("sns type = " + this.wUl.value);
        return ret;
        }
    }
    );
    '''
    def message(message,data):
        if message["type"] == 'send':
            print("[*] {0}".format(message["payload"]))
        else:
            print(message)
    process = frida.get_remote_device().attach("com.tencent.mm")
    script = process.create_script(jscode)
    script.on("message",message)
    script.load()
    sys.stdin.read()
运行流程如下：
**  
1、adb shell 获取root手机或模拟器 shell  
2、在具体目录下运行server：  
**
    ./frida-serverx86
**3、adb端口转发**
    adb forward tcp:27042 tcp:27042 
    adb forward tcp:27043 tcp:27043
**4、运行python脚本**
## 3、定位
环境配置完之后就到了正文部分。  
因为微信是一款成熟的商业APP，其中的保护技术：混淆、反调试之类的技术肯定是很完善的，所以为了更好的完成指定功能，最好的就是先定位。
首先再模拟器中，将画面停留在发送pyq的界面
之后使用以下adb命令，将此时的activity显示在最前面
    adb.exe shell dumpsys activity top
可以看到此时的Activity是 **com.tencent.mm.plugin.sns.ui.SnsUploadUI**
但是com.tencent.mm.plugin.sns.ui.SnsUploadUI这个activity的代码还是很多的，需要进一步的定位
使用DDMS进行跟踪记录。因为由之前的adb命令可以知道跟踪的task时com.tencent.mm，那么在DDMS记录时可以选择这一个task
选中con.tencent.mm这个进程之后，点击右上角的图标，进行跟踪
当pyq发出之后，停止跟踪，可以发现很多东西
我们知道，发表Pyq是要点击“发表”这一个键的，也就是一般来说是 **OnClick** ，于是乎可以找到 **OnClick**
类似的函数。同时在上文中找到了具体的Activity是 **com.tencent.mm.plugin.sns.ui.SnsUploadUI**
，所以也可以通过这个进行搜索。在这里找到的可以函数是—— **onMenuItemClick**
下一章对于这个函数进行具体的静态分析，以及不同类型的pyq（文字、图片、视频）进行hook。
## 4、静态分析与HOOK
###  4.0 总体分析
####  4.0.1 类型分析
使用jadx对微信静态分析，定位到上文提到的 **onMenuItemClick** 。因为混淆过了，所以目前来说，很难看懂。但是这并不影响。
为了更好的分析，这里再一次定位具体的功能代码，使用到的工具就是 **UI automonitor**
。首先还是再在模拟器上停留到发送文字朋友圈的界面（发送纯文本pyq算是一个隐藏功能，开启的方法就是长按右上角的照相机，之后就会进入文本pyq发送的界面，也算涨知识了）
之后可以在UI上捕捉到此时模拟器上的布局，同时可以根据具体的内容，找到其对应的Resource id
可以看到此时文字对应的Resource
id是fms，无疑是混淆后的，但是不影响。之后再源码中查找哪里使用了findViewById，而参数就是fms。因为findViewById这个函数  
是寻找在XML或是Layout里的名称，所以可以认为这里就是寻找文字的ID。  
运气比较好，确实有这么一个调用，此时又引出了一个新的变量 **this.wYj**
对于this.wYj进行搜索，可以看到其中对于this.wYj是否为空有一个判断。这里就是说如果this.wYj为空的话，那么内容描述（contentdesc）为空。所以这  
里this.wYj相当于一个描述了
接着找到了this.wYj的一个赋值。这里对this.desc进行了赋值
接下来就可以跟踪this.desc了。往下跟之后发现，this.desc被当作参数传入的  
SnsUploadUI.this.wYk.a()这个方法了
这里可以查看到接口信息如下，但是并没有什么实质性的作用
归根结底还是得看看this.wYk的赋值情况，在ai这个方法中发现了this.wYk的赋值
在这里thi.wYk跟wUl这个值有关系，所以现在目标又转到this.wUl这里。通过静态分析可以知道this.wUl有如下几个值：0、9、14
在这里可以通过frida脚本来hook，看看这个值与朋友圈有什么关系。测试脚本如下：
    import frida
    import sys
    jscode ='''
    Java.perform(function(){
        var SnsUploadUI = Java.use('com.tencent.mm.plugin.sns.ui.SnsUploadUI');
        var ai = SnsUploadUI.ai.overload("android.os.Bundle");
        ai.implementation = function(bundle)
        {
        var ret = ai.call(this, bundle);
        send("sns type = " + this.wUl.value);
        return ret;
        }
    }
    );
    '''
    def message(message,data):
        if message["type"] == 'send':
            print("[*] {0}".format(message["payload"]))
        else: