### RPC_C_AUTHZ_NONE及相关参数说明
- **RPC_C_AUTHZ_xxx**: 用于指定授权服务，此处使用`RPC_C_AUTHZ_NONE`表示无授权。
- **Server principal name**: 服务器主体名称，设置为`NULL`表示未指定。
- **RPC_C_AUTHN_LEVEL_xxx**: 用于指定认证级别，这里使用`RPC_C_AUTHN_LEVEL_CALL`表示调用级别的认证。
- **RPC_C_IMP_LEVEL_xxx**: 用于指定模拟级别，此处采用`RPC_C_IMP_LEVEL_IMPERSONATE`表示模拟用户身份。
- **Client identity**: 客户端标识，设为`NULL`表示不提供客户端身份信息。
- **Proxy capabilities**: 代理功能标志，使用`EOAC_NONE`表示不启用任何额外功能。

### 执行应用逻辑
在成功连接WMI服务并完成代理安全设置后，可以利用IWbemServices接口执行应用程序的业务逻辑。例如：
- 通过`CreateInstanceEnum`方法创建一个实例枚举（`IEnumWbemClassObject`）对象，并枚举某个类的所有实例。
- 利用`GetObject`方法获取命名空间中的类对象，进而创建该类的新实例（`SpawnInstance`）、读取属性或执行方法（`ExecMethod`）等操作。
简而言之，就是通过WMI提供的COM接口来访问和操作WMI对象。

### 参考示例
对于C++编写的WMI应用程序示例，可以在WMI SDK（现属于Platform SDK的一部分）的Samples\Sysmgmt\VC目录下找到。此外，MSDN文档中也提供了相关示例供参考。

### 清理工作
清理步骤包括释放所有已创建的对象（通过`Release`方法），以及调用`CoUninitialize`函数来清理COM/DCOM库分配的资源。

### WMI脚本
使用WMI服务的一种更简单且常用的方法是编写脚本。由于Windows支持能够访问WMI的ActiveX控件，因此任何兼容ActiveX控件的脚本语言均可用于WMI编程，如VBScript、Microsoft JScript和Perl等。常见的执行环境有Windows Script Host (WSH)、ASP网页（运行于IIS服务器）及Internet Explorer浏览器等。

#### 示例脚本
- **进程列表**：清单31-10展示了一个VBScript脚本`process_list.vbs`，它列出了系统当前运行的所有进程。
- **创建进程**：清单31-11展示了如何通过`create_process.vbs`启动记事本程序，并演示了带输入参数的方法调用过程。
- **事件监听**：清单31-12则展示了如何注册接收记事本进程启动事件的通知。

### WQL
WQL（WMI Query Language）是SQL的一个子集，专为WMI设计。目前，WQL主要实现了数据提取功能。通过IWbemServices接口的`ExecQuery`方法提交WQL查询即可实现对WMI数据的操作。

### WMI代码生成器
微软提供了一款名为WMI Code Writer的工具，可自动生成浏览命名空间、执行查询、调用方法及接收事件的代码。该工具支持生成VBScript、VB.NET和C#三种语言版本的代码。

### WMI ODBC适配器
WMI ODBC适配器允许应用程序像访问数据库一样通过ODBC API访问WMI中的信息，而无需直接使用COM/DCOM技术。但请注意，通过这种方式访问的数据为只读模式且不支持Unicode。

### .Net程序中的WMI使用
.Net Framework提供了System.Management命名空间下的类库，以简化WMI的使用。开发者可以通过这些托管类轻松地与WMI进行交互。清单31-14给出了一个简单的C#示例，用于列出系统中所有正在运行的进程。

### 调试WMI
鉴于WMI系统的复杂性及其内部组件间频繁的跨进程通信，调试可能面临挑战。幸运的是，WMI核心模块内置了日志记录机制，有助于追踪关键操作和异常情况。