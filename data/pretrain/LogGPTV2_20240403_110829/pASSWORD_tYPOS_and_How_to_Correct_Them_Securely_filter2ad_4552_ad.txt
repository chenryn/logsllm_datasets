building typo-tolerant checkers that relax the checks made
by an existing exact checker construction. Let Reg, ExChk
be the algorithms of an exact checker. Then an associated
relaxed checker has the same registration algorithm, but a
different checking algorithm Chk (cid:7)= ExChk. Speciﬁcally, our
approach will be to design relaxed checkers that enumerate
some number of strings as candidates for the password and
checks each with an exact checker.5 The ball of a submitted
string ˜w is the set B( ˜w) ⊆ S of checked strings.
If balls are well constructed, the hope is that it often happens
that when the user makes a typo, the true password w lies in
the ball around the user submitted string ˜w, and thus the typo
can be corrected.
Relaxing an exact checker is a desirable approach to typo-
tolerance for two main reasons. The ﬁrst
is legacy com-
patibility. Modifying a system to become typo-tolerant just
requires deploying a new checking algorithm that works with
5We note that
this can be viewed simply as the standard brute-force
construction of an error correction code from an error detection code.
807807
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
previously registered passwords. For example, registration may
use a password hashing scheme like scrypt [36] or argon2 [8],
or a password onion construction that combines password
hashing with an off-system crypto service [18].
Second, relaxed checking offers no security loss against
ofﬂine, brute-force attacks when the exact checker has, under-
lying it, a secure hash function. A compromise of the system
or leak of the password hash database gives an attacker the
registered string s, just as in the case of the exact checking
system. When s is computed by applying a secure password
hashing algorithm (e.g., [8], [25], [36]), an ofﬂine attacker’s
goal is to perform brute-force attacks to recover a password.
Here one may worry that the attacker’s goal is easier as it
requires simply inverting s to a point that is in the ball of the
target password, but for secure hash functions nothing will
be revealed about the target password by s until the target
password is found exactly. Thus, for a given user account,
either an adversary: (1) Cracks a password hash and submits
the correct password, in which case she obtains no advantage
in an online attack from typo-tolerance or (2) Fails to crack
a password hash, in which case she gains no beneﬁt from
her ofﬂine attack in mounting an online attack. Of course,
should the typo-tolerant Chk algorithm be very complex
to implement, it might increase the likelihood of software
implementation vulnerabilities. For this reason, we consider
simple-to-implement relaxed checkers.
Security degradation in a relaxed checker may still arise in
online attacks. A poorly conceived relaxed checking system
could diminish system security against remote brute-force
guessing attacks. We will investigate this issue in detail below.
Before doing so, we note that relaxing an exact checker does
circumscribe the space of possible checker designs. In partic-
ular, the size of a feasibly searchable ball B( ˜w) is necessarily
somewhat small: ExChk is designed to be computationally
expensive to thwart ofﬂine brute-force guessing attacks, and
relaxed checking involves running it for each string in B( ˜w).
Our measurement results in the prior sections show that even
for balls of size three or four, however, signiﬁcant utility
improvements are possible.
Acceptance utility. We measure utility of a relaxed checker
by the probability that the checker outputs true for entered
passwords even when the submitted string is a typo of the
true password. Formally, the acceptance utility is deﬁned to be
Util(Chk) = Pr[ACC(Chk) ⇒ true], where the event captures
the probability that the experiment of Figure 4 outputs true.
There ←p means sampling from the set according to p, and
←w means sampling from the set according to τw. The game
is (implicitly) parameterized by the registration algorithms and
the distribution pair (p, τ ), and models a user’s choice of
password and ﬁrst attempt to enter it.
The acceptance utility of an exact checker is Util(ExChk) =
E [ τw(w) ] where the expectation is over w ←p PW. For
any non-trivial distribution τ, i.e., assuming a non-zero typo
probability for some password, Util(ExChk)  0}.
After this OpChk solves the following optimization problem
to compute the set B,
p(w(cid:2)
/* Utility */
(cid:3)
/* Completeness */
/* Security */
maximize
B⊆ ˆB( ˜w)
subject to
) · τw(cid:2) ( ˜w)
w(cid:2)∈B
p( ˜w) > 0 ⇒ ˜w ∈ B,
p(B) ≤ p(wq) or |B| = 1,
809809
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
and checks all the passwords in B using ExChk. We let B( ˜w)
denote the solution of the optimization problem induced by the
checker OpChk on input string ˜w.
Observe that in addition to completeness, the constraints
in the optimization problem enforce the condition that
p(B( ˜w)) > p(wq) only if |B( ˜w)| = 1. Thus, OpChk ensures
that the only balls with aggregate probability exceeding p(wq)
are singletons (containing one high-probability password). The
intuition here is that if we never allow a query to cover
more probability mass than that of the qth most popular
password, then adversary A∗ must select as its q queries
the passwords {w1, w2, . . . , wq}. As these passwords deﬁne
singleton balls, it follows that A∗ will achieve exactly the
same success probability as it would for an exact checker, and
thus λfuzzy
q = λq.
q
We now give theorem statements showing that OpChk
in the sense that: (1) It achieves free
is indeed optimal
corrections, meaning Δq = 0 and, equivalently, λfuzzy
= λq,
for suitable q, and (2) Over all checkers with Δq = 0, it
achieves optimal utility, i.e., the highest possible probability
of correcting a typo. The proofs of the following theorems
appear in Appendix F.
Theorem 1 (Free Corrections Theorem). Fix some password
distribution p with support PW, a typo distribution τ, 0  0, a distribution
pair (p, τ ), and a corrector set C. Deﬁne OpChk to work
over C and let Chk work for a set of correctors C(cid:2) ⊆ C. If
Δq(Chk) = 0, then Util(Chk) ≤ Util(OpChk).
q = λq.
The free correction theorem applies with respect