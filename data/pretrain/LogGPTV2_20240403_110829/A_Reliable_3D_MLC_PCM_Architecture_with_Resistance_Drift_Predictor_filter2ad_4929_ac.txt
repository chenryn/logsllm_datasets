D
w
o
R
4-PCM 
LAYER
DRAM
Processor
TIM
Spreader
Heat Sink 
 Memory Block 
Memory Bank
Heat Spreader
L2 
Cache
0
L2Buff
0
L2 
Buff1
CT
U
L2 
Cache
1
Core 
0
Core 
1
L2 
Tag 
2
DR
AM 
C0
DRA
M 
C1
IO 
L2 
Tag 
0
CrossBar
Bridge
L2 
Tag 
1
Jbus
DRA
M 
C2
DRA
M 
C3
L2 
Tag 
3
Core 
2
Core 
3
L2 
Cache
2
FP
U
L2 
Buff2
L2 
Buff3
L2 
Cache 
3
Figure 6: Proposed time- and temperature-aware architec-
ture.
Figure 7: True 3D architecture of the baseline.
V. TIME- AND TEMPERATURE-AWARE SENSING FOR
3D-MLC PCM
In this work, we propose to integrate time- and
temperature-aware sensing mechanisms into memory con-
troller to reduce the drift-related soft error in 3D MLC PCM.
To address the resistance drift, a hybrid technique com-
posed of inter-level margins that can handle about 60%
to 70% of memory accesses (based on Observation 2 in
Section III) and a time- and temperature- aware sensing
scheme is proposed. In this design, the memory controller
determines the mechanism for handling resistance drift based
on elapsed time and elevated temperature: if the resistance
margin cannot cover resistance drift, the reference voltages
(see Fig. 1 (c)) in read circuit must change according to
the elapsed time and elevated temperature. Hence, when a
memory controller writes a block into the main memory,
current time of memory controller is also written to time-
tag part of each memory block. On the other hand, when
memory controller reads a block from the main memory,
Ô¨Årst, drift controller unit in Fig. 6 determines to what extent
resistance drift has occurred. If margins cannot
tolerate
resistance drift, the reference voltages of read circuit are
updated based on the values that can be extracted from
Equation 1. Fig. 6 shows the architecture of our proposed
technique.
Estimating resistance drift. In order to reduce the error
rate of the sensing circuit, it is essential to accurately adjust
resistance thresholds values after drift. For estimating pre-
drift and post-drift borders of states, we assume that the
initial resistance of each state is set
to a value within
¬±3Œ¥ of the mean, where Œ¥ is the standard deviation of a
normal distribution. In design-time, we calculate the value
of resistance drift law for different times and temperatures
and store them in a non-volatile memory (e.g. disk). Because
reading from this memory is on the critical path and a small
DRAM is faster, in boot time we load its whole content
into a small DRAM memory at PCM controller, which we
call State Border Table (SBT). We use SBT in order to
eliminate calculation of state borders after resistance drift in
run-time. In fact, SBT behaves as a dictionary for evaluated
values of drift law. Accordingly, once a read request is
received, using the resident time tag of the target memory
line and its measured temperature, one can decide whether
cell‚Äôs resistance drift exceeds its resistance margin bound or
not; if so, the time and temperature tags are used by drift
controller unit to lookup the SBT for extracting the stored
borders of every state, based on which the S/H circuit output
is interpreted. A recent prototype uses a complicated DSP
framework to estimate these values [8]; therefore, such an
overhead is acceptable in today PCM memories. Because the
pre-deÔ¨Åned values of the SBT are stored in a non-volatile
memory, existence of SBT does not threat the non-volatile
nature of PCM memory system, as we can Ô¨Åll the SBT
immediately on demand (e.g. boot process). In next section,
we illustrate the effect of time and temperature quantization
on error rate. We also show storage and energy overhead of
SBT for different resolutions.
Collecting time and temperature information. To adap-
tively adjust the resistance thresholds, we need to keep the
track of data resident time in memory and the temperature
of a memory line to estimate the resistance drift parameters.
In this work, we assume that there is a global timer in
the PCM controller which shows system cycle using the
memory controller frequency. Besides, each memory line has
a time-tag that saves the controller‚Äôs time stamp at which its
content is written. To obtain the runtime temperature proÔ¨Åle
of a MLC PCM die, we use the thermal sensor network
architecture used in [33]. For the sake of accuracy, thermal
sensors are scattered across processor and memory dies.
The measured temperatures are frequently sent to a sensor
selection unit at the PCM controller (residing in the second
temperature
layer) for thermal proÔ¨Åling. Assuming ideal
sensors is not realistic, and state-of-the-art
technologies
209209209
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:07 UTC from IEEE Xplore.  Restrictions apply. 
















	






+(*
,-
+(*
,-
+(*
,-


















  


 
!



"
# 

 



#
$




 






%

&



'
(
'
(

'
(

'
(

'
(

'
(

'
(

'
(
'
(
)
*



Figure 8: Percentage of memory access for various difference of the last and maximum values of temperature sensors.
like (‚àí0.7 ‚ó¶C, 0.9 ‚ó¶C) [6]. In high
report small errors,
temperature, this variation may lead to wrong data readout
in our scheme. To mitigate this: i) we assumed upward
quantization and over-estimated the thresholds. Due to drift
signiÔ¨Åcance in large resistance, over-estimation of a state
does not violate the next states; ii) we striped a memory
line in multiple 3D-layers and use the highest temperature
for determining inter-state thresholds, discarding errors of
other sensors. For estimating the amount of resistance drift
accurately, we must determine the maximum temperature of
a memory block during its residency in memory system.
But this temperature proÔ¨Åling is very high cost process in
terms of performance and storage, therefore we ignore this
scheme and relies on the last value of corresponding sensors
for estimating resistance drift. Fig. 8 investigate percentage
of memory access for various difference of the last and
maximum values of temperature sensors. As can be depicted
from Fig. 8, about 45% of memory accesses have maximum
temperature with less than 1 ‚ó¶C differences with last values,
this ratio for 2 ‚ó¶C and 5 ‚ó¶C is 66% and 85%, respectively.
This observation shows using the last value of the sensors
is not far from reality. We use the last value of the sensors
to reduce the storage overhead and performance degradation
but we consider this estimation as one of the source of errors
in our proposal.
Adaptive threshold sensing circuit. The read circuit must
be reconÔ¨Ågurable in order to enable adaptive interpretation
of the cell resistance. Indeed, to reduce sensing circuit bit
errors, we need this circuit to be reconÔ¨Ågurable especially
at Ô¨Åne grain resistance resolutions. In this work, we use
the sensing circuit in [23], because of its Ô¨Çexibility on cell
state interpretation. At the heart of this circuit, there is a
unit that repeatedly compares cell‚Äôs voltage with output of
a ramp source. This circuit has also a register that counts
upward (with a predeÔ¨Åned frequency) until the S/H output
indicates input voltages are equal. At last, the counter value
is compared with the boundary resistance values taken from
SBT table to quantify the content of the cell.
VI. EVALUATION
We perform micro-architectural level simulation of an out-
of-order processor model with UltraSPARCIII ISA using
GEMS simulator [19] based on Simics toolset [18]. We use
CACTI 6.5 [20] for detailed area, power and timing models
of the memory hierarchy and HotSpot [28] with parameters
in Table IV to obtain thermal estimation of the evaluated
3D-stacked CMP. We also assume a tiled Ô¨Çoorplan of 4-core
UltraSPARC T1 CMP taken from [1] with a TDP (thermal
design power) of 54 W at2.5 GHz and 1.3 V supply voltage.
We model a 4-core CMP system with 3 levels of caches
and a PCM main memory. Table III summarizes details
of the system conÔ¨Åguration. For PCM main memory, we
implement write pausing and write cancelation mechanisms
to overcome long latency of MLC PCM writes [24]. As can
be seen in Fig. 7, to enable 3D PCM, we adopt a 4-tier true
3D structure [5]. The PCM main memory row in our true 3D
CMP is divided into four 32B sections each residing on one
layer. The peripheral circuits are also located at the bottom
layer for speed optimization.
Note that each state is represented by a range of resistance
values due to process variation. We assume that the resis-
tance value for each state follows a normal distribution. For
our baseline system, coefÔ¨Åcient variation is 17%, as reported
in similar studies [2] [30]. Moreover, for our proposed
system that needs 15 seconds and 66 ‚ó¶C equivalent margins,
based on Equation 1, we can approximately set coefÔ¨Åcient
variation to 13%. Table V, shows mean and deviation values
for resistance of each state.
Multi-thread (PARSEC [4]) and multi-program SPEC2006
[29]) workloads has been used to evaluate efÔ¨Åciency of
presented contribution. We characterize the mentioned work-
loads in Table. II. In Table. II, for each program we extract
write/read per Kilo instructions to specify the pressure of
program on the main memory. Also as resistance drift is a
time, temperature and content dependent phenomenon, per-
centage of drift prone patterns (‚Äú01‚Äù and ‚Äú10‚Äù) computed for
each program. Finally as our proposal is a hybrid solution,
resistance margin coverage (RMC) calculated to determines
210210210
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:07 UTC from IEEE Xplore.  Restrictions apply. 
Table II: Characteristics of the Evaluated Workloads.
DPPa RMCa Workload
RPKIa
WPKIa
Workload
PARSEC-2, 2009, Multi-Threaded
Blackscholes
Bodytrack
Caneal
Dedup
Facesim
Ferret
Fluidanimate
Freqmine
Raytrace
Streamcluster
Swaptions
Vips
X264
0.003 (L)
0.003 (L)
1.12 (M)
0.41 (M)
0.65 (M)
0.65 (M)
0.76 (M)
0.04 (L)
0.008 (L)
0.01 (L)
0.002 (L)
0.05 (L)
0.04 (L)
0.03
0.03
1.31
0.43
0.24
0.67
0.47
0.07
0.02
0.03
0.02
0.07
0.04
15.43
19.07
27.83
26.02
19.18
31.05
18.24
23.03
13.25
23.3
25.3
23.67
24.16
Mix4: mcf,GemsFDTD,povray,perlbench
WPKI
SPECCPU, 2006, 4-Application Multi-Programmed
2.4 (H)
6.64 (H)
3.69 (H)
1.99 (M)
2.2 (H)
1.91 (M)
0.27 (L)
0.53 (M)
0.53 (M)
51.99 Mix1: xalancbmk,omnetpp,bzip2,mcf
18.58 Mix2: milc,leslie3d,GemsFDTD,lbm
76.32 Mix3: mcf,xalancbmk,GemsFDTD,lbm
79.6
54.75 Mix5: mcf,xalancbmk,perlbench,gcc