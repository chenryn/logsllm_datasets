    - Cookie、LocalStorage 和 IndexDB 无法读取。
    - DOM 无法获得。
    - AJAX 请求不能发送
### 如何规避同源策略？
#### JSONP
向服务器请求json数据回调，一般请求URL会加上`&callback=xx`
```bash
foo({
  "ip": "8.8.8.8"
});
```
由于``元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了foo函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。
##### JSONP的劫持
> http://blog.knownsec.com/2015/03/jsonp_security_technic/
防御：
1. 验证 JSON 文件调用的来源（ Referer ），但是Referer 过滤（正则）不严谨、空 Referer也不行
2. 随机token
3. 
#### WebSocket
WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。
#### CORS(重点)
> http://www.ruanyifeng.com/blog/2016/04/cors.html
CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。
CORS请求大致和ajax请求，但是在头信息中加上了Origin字段表明请求来自哪个源。如果orgin是许可范围之内的话，服务器返回的响应会多出`Acess-Control-Allow-*`的字段
##### 与JSONP的比较
CORS与JSONP的使用目的相同，但是比JSONP更强大。
JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。
### DOM XSS与反射XSS有啥不同，给你10s，如何快速判断一个XSS是否是DOM XSS？
> https://www.zhihu.com/question/26628342
存储型XSS：你发送一次带XSS代码的请求，以后这个页面的返回包里都会有XSS代码；
反射型XSS：你发送一次带XSS代码的请求，只能在当前返回的数据包中发现XSS代码；
DOM型XSS：你发送一次带XSS代码的请求，在返回包里压根儿就找不到XSS代码的影子；
### CSP策略
> https://www.zhihu.com/question/21979782
浏览器内容安全策略，减少xss攻击。
### SSRF漏洞原理是什么？利用时有哪些伪协议？
> secpulse.com/archives/65832.html
#### 漏洞原理
利用一个可以发起网络请求的服务当作跳板来攻击内部其他服务。
#### ssrf用处
1. 探测内网信息,用协议探`ftp%26ip={ip}%26port={port}`
2. 攻击内网或本地其他服务
3. 穿透防火墙
#### 漏洞处
1. 能够对外发起网络请求的地方
2. 请求远程服务器资源的地方
3. 数据库内置功能
4. 邮件系统
5. 文件处理
6. 在线处理工具
举几个例子：
1. 在线识图，在线文档翻译，分享，订阅等，这些有的都会发起网络请求。
2. 根据远程URL上传，静态资源图片等，这些会请求远程服务器的资源。
3. 数据库的比如mongodb的copyDatabase函数，这点看猪猪侠讲的吧，没实践过。
4. 邮件系统就是接收邮件服务器地址这些地方。
5. 文件就找ImageMagick，xml这些。
6. 从URL关键字中寻找，比如：source,share,link,src,imageurl,target等。
#### 绕过姿势
1. `http://example.com@127.0.0.1`
2. 利用IP地址的省略写法绕过,[::]绕过localhost
3. DNS解析 http://127.0.0.1.xip.io/  可以指向任意ip的域名：xip.io
4. 利用八进制IP地址绕过,利用十六进制IP地址,绕过利用十进制的IP地址绕过
#### 利用协议
> https://www.secpulse.com/archives/70471.html
接受ua为curl的时候，支持的协议有
使用`curl -v http://xx.com/ssrf.php?url=sxxx`
```
file://
ssrf.php?url=file:///etc/password
Dict://
dict://@:/d:
ssrf.php?url=dict://attacker:11111/
SFTP://
ssrf.php?url=sftp://example.com:11111/
TFTP://
ssrf.php?url=tftp://example.com:12346/TESTUDPPACKET
LDAP://
ssrf.php?url=ldap://localhost:11211/%0astats%0aquit
Gopher://
```
#### 漏洞修复
> https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html
1. 检查是否为内网IP地址
绕过方法:
    利用八进制IP地址绕过
    利用十六进制IP地址绕过
    利用十进制的IP地址绕过
    利用IP地址的省略写法绕过
最好的做法：IP地址转换为整数再进行判断
2. 获取真正请求的host
    1. 如何正确的获取用户输入的URL的Host？
    最常见的就是，使用http://233.233.233.233@10.0.0.1:8080/、http://10.0.0.1#233.233.233.233这样的URL，让后端认为其Host是233.233.233.233，实际上请求的却是10.0.0.1。这种方法利用的是程序员对URL解析的错误，有很多程序员甚至会用正则去解析URL。使用urllib.parse可以解析真正的hostname
    2. 只要Host只要不是内网IP即可吗？
    host可能为ip,可能为域名，利用xip.io绕过。方法：判断是否为http协议，获取url的host，再解析该host，将解析到的ip再进行检查
    3. 只要Host指向的IP不是内网IP即可吗？
    不一定，可能会30x跳转
归纳
解析目标URL，获取其Host
解析Host，获取Host指向的IP地址
检查IP地址是否为内网IP
请求URL
如果有跳转，拿出跳转URL，执行1
### 在浏览器端，Referer可以篡改吗？
通过插件修改，一般抓包修改
### xss盲打到内网服务器的利用
### xss代码层防御
## 文件上传下载遍历漏洞
### 原理
1. 容器漏洞，解析漏洞
### 修复方案
## 文件包含漏洞
> https://blog.csdn.net/fuckcat_2333/article/details/52132559
### 类型
1. 本地文件包含
2. 远程文件包含 ：即加载远程文件，在`php.ini`中开启`allow_url_include`、`allow_url_fopen`选项。开启后可以直接执行任意代码。
### PHP文件包含函数
1. `include()` ：使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。
2. ` inclue_once()` ：功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。
3. `require()`：使用此函数，只要程序执行，立即调用此函数包含文件，发生错误时，会输出错误信息并立即终止程序。
4. ` require_once()` ：功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。
### 利用
1. 读取敏感文件
2. 远程包含shell
3. 图片上传并包含图片shenll
4. 使用伪协议
5. 包含日志文件GetShell
6. 截断包含
### 修复方案
1. 禁止远程文件包含 `allow_url_include=off`
2. 配置 `open_basedir=指定目录`，限制访问区域。
3. 过滤`../`等特殊符号
4. 修改Apache日志文件的存放地址
5. 开启魔术引号 `magic_quotes_qpc=on`
6. 尽量不要使用动态变量调用文件，直接写要包含的文件。
## web框架漏洞弱点
### 服务端注入之Flask框架中服务端模板注入问题
> http://www.freebuf.com/articles/web/135953.html
## HTTP协议
### TCP三次握手四次挥手
#### 三次握手
1. 客户端 syn 发送到服务端，变成 SYN_SENT 状态
2. 服务端 ack=syn+1 回传syn到客户端，变成SYN_RECV状态
3. 客户端 ack=syn+1， 变成ESTABLISHED状态，传输给服务端
4. 服务端收到ACK后变成ESTABLISHED状态，建立连接
SYN标志位为表示请求连接，ACK表示确认
#### 四次挥手
客户端=主动关闭方
1. 客户端FIN->服务端
2. 服务端ACK=FIN+1->客户端，服务端到客户端的连接关闭
3. 服务端FIN->客户端
3. 客户端ACK=FIN+1->服务端
假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说"我Client端没有数据要发给你了"，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，"告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息"。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，"告诉Client端，好了，我这边数据发完了，准备好关闭连接了"。Client端收到FIN报文后，"就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，"就知道可以断开连接了"。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！
> MSL=最大段寿命=TTL=最大生存时间=255s
### 四层模型
1. 应用层 
应用层对应于OSI参考模型的高层，为用户提供所需要的各种服务，例如：FTP、Telnet、DNS、SMTP等.
2. 传输层 