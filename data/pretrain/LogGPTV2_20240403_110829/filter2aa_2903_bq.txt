47   }
参数bEnable用来指定是启用还是禁止BTS，参数bTempOnOff用来
指定本次操作是否是暂时性的。当我们读取BTS缓冲区时，需要暂时禁
用BTS机制，读好后再启用它。暂时性的禁用只操作调试控制寄存器，
不操作IA32_DS_AREA寄存器。第7～12行用于检查CPU是否支持
BTS，即读取IA32_MISC_ENABLE寄存器并检查它的
BTS_UNAVAILABLE标志。第13～20行用于设置IA32_DS_AREA寄存
器。剩下的代码用于操作调试控制寄存器。对于我们关心的TR、
BTINT和BTS位，奔腾4之外的两种调试控制寄存器（IA32_DEBUGCTL
和DebugCtlB）的这些位是一样的，所以我们只是判断当前的CPU是否
是奔腾4——全局变量g_bIsPentium4记录了这一特征。
除了以上代码，驱动程序中还实现了以下一些函数和代码：用于启
动和停止追踪的StartTracing函数，其内部会调用SetupDSArea 和
EnableBTS；用于读取BTS记录的GetBtsRecords函数，它会根据
DebugStore结构中的信息来读取CPU已经产生的BTS记录，读好后，再
把索引值恢复原位。此外，还有负责与应用程序通信的IRP响应函数，
以及其他WDM定义的驱动程序函数。
5.4.2 应用界面
有了驱动程序后，还需要编写一个简单的应用程序来管理驱动程序
以及读取和显示BTS记录——我们将其命名为CpuWhere.exe。图5-7是
CpuWhere.exe的执行界面。窗口左侧是一系列控制按钮，此处的编辑框
用来指定BTS缓冲区可以容纳的BTS记录数，即SetupDSArea函数的参
数。窗口右侧的列表框用来显示从驱动程序读取到的BTS记录。BTS记
录显示的顺序与栈回溯类似，即最近发生的位于上方。或者说，CPU的
运行轨迹是从下到上的。
图5-7 CpuWhere.exe的执行界面
在列表框中，每条BTS记录显示为两行，上面一行用来显示分支的
目标地址（方括号中），地址前以“>”符号表示，地址后为这个地址所
对应的符号；下面一行为分支的发起地址，地址前以“ u nt!PsGetCurrentProcessId
nt!PsGetCurrentProcessId:
80526be0 64a124010000    mov     eax,dword ptr fs:[00000124h]
80526be6 8b80ec010000    mov     eax,dword ptr [eax+1ECh]
80526bec c3              ret
80526bed cc              int     3
观察第1行（#00004365 - [>0xbf801a73]: win32k!HmgLock + 2e），
它是这个BTS记录的目标地址，于是可以推测出这个BTS记录记载的是
从PsGetCurrentProcessId函数返回HmgLock这一事件。第3行和第4行
（#00004366）记载的是HmgLock函数调用PsGetCurrentProcessId时的分
支。
图5-7所示列表框的倒数第2行和第3行记录了调用系统服务时从用
户态向内核态的转移过程。它们记载了从用户态地址[0x8053cad0]的过程。
CpuWhere.exe的大多数实现都是非常简单的。比较复杂的地方就是
如何查找BTS记录所对应的符号。因为BTS记录中既有内核态的地址，
也有用户态的地址，简单地使用DbgHelp库中的符号函数
（SymFromAddr等）是不能满足我们的需要的。
为了用比较少的代码解决以上问题，我们使用了WinDBG的调试引
擎。通过调试引擎所输出的接口，我们启动了一个本地内核调试会话，
然后利用调试引擎来为分支记录中的地址寻找合适的符号。其核心代码
如清单5-6所示。
清单5-6 启动本地内核调试的StartLocalSession方法
1    // 启动本地内核调试会话
2    HRESULT CEngMgr::StartLocalSession(void)
3    {
4        HRESULT hr;
5    
6        if(m_Client==NULL)
7            return E_FAIL;
8        if ((hr = m_Client->SetOutputCallbacks(&m_OutputCallback)) != S_O
K)
9        {
10           Log("StartLocalSession", "SetOutputCallbacks failed, 0x%X\n",
 hr);
11           return hr;
12
13       }
         // 注册我们自己事件的回调函数
14       if ((hr = m_Client->SetEventCallbacks(&m_EventCb)) != S_OK)
15       {
16           Log("StartLocalSession", "SetEventCallbacks failed, 0x%X\n", 
hr);
17           return hr;
18       }
19       hr = m_Client->AttachKernel(DEBUG_ATTACH_LOCAL_KERNEL,NULL);
20       if(hr!=S_OK)
21       {
22           Log("StartLocalSession", 
23            "AttachKernel(DEBUG_ATTACH_LOCAL_KERNEL,NULL)failed with %x"
,hr);
24           return hr;
25       }
26        
27       if ((hr = m_Control->WaitForEvent(DEBUG_WAIT_DEFAULT,
28                                         INFINITE)) != S_OK)
29       {
30           Log("StartLocalSession", "WaitForEvent failed, 0x%X\n", hr);
31       }
32       return hr;
33   }
第8～12行设置一个输出回调类，用来接收调试引擎的信息输出。
我们将这些输出定向到列表框中。第19～25行用来启动本地内核调试，
第27～31行是等待初始的调试事件。等待这一事件后，调试引擎的内部
类会针对本地内核的实际情况进行初始化，此后就可以使用调试引擎的
各种服务了。本书后续分卷将进一步介绍调试引擎的细节。
因为依赖WinDBG版本的调试引擎（Windows系统目录自带的版本
有裁剪），所以运行CpuWhere.exe之前需要先安装WinDBG，而后将
CpuWhere.exe复制到WinDBG程序的目录中再运行它。
5.4.3 2.0版本
在更新本书第2版的时候，作者对CpuWhere.exe做了很多改进，我
们将其称为2.0版本，将前面讨论的称为1.0版本。
2.0版本的最大变化是具有多CPU支持（最多64个）。用户可以选择
在1个或多个CPU上开启分支监视。这个改动涉及数据结构、驱动程
序、用户态代码、驱动程序接口和图形界面。
清单5-7列出了支持多CPU的关键数据结构。因为需要为每个CPU
建立独立的DS区，并分别进行维护和管理，所以不再像1.0版本那样使
用全局变量。新的做法是先把那些变量封装到名为BTS_STATE的结构
体，再在WDM驱动的设备对象扩展中定义一个结构体数组，数组的每
个元素对应一个CPU。
清单5-7 支持多CPU的结构体
1    typedef struct _BTS_STATE
2    {
3        PDEBUG_STORE  DebugStore; // 内核空间中的虚拟地址（va）
4        PMDL           MdlDebugStore;
5        PVOID          VaUserDebugStore;
6    
7        ULONG          BtsStatus;
8    }BTS_STATE, *PBTS_STATE;
9    
10   typedef struct _BTS_DEVICE_EXTENSION 
11   {
12       PDEVICE_OBJECT    DevObj; 
13       DWORD             MaxBtsRecords;
14       DWORD             Flags; //BTS_FLAG_xx;
15       DWORD             Options;
16       //
17       // 按CPU分配成员
18       BTS_STATE     BtsState[MAX_CPU_PER_GROUP];
19       //
20   }BTS_DEVICE_EXTENSION,*PBTS_DEVICE_EXTENSION;
因为要操作的MSR是与CPU相关的，每个CPU都有自己的寄存器实
例，所以启动监视时必须严格保证当前线程是在希望操作上的CPU上执
行。如何实现这一目标呢？我们的做法是为要监视的每个CPU创建一个
工作线程，并且通过设置线程的亲缘性（affinity）将该线程绑定在对应
的CPU上，核心的代码如清单5-8所示。
清单5-8 启动分支监视的用户态代码
1    HRESULT CKrnlAgent::Start(DWORD dwMaxRecord, ULONG64 ul64CpuMask)
2    {
3        PBtsThreadPara pThreadPara = NULL;
4 
5        if(m_hSysHandle==INVALID_HANDLE_VALUE)
6            return E_FAIL;
7 
8        m_dwMaxRecords = dwMaxRecord;
9        
10       this->m_bStop = FALSE;
11    
12       for(int i=0; iCpuNo = i;
19               pThreadPara->PtrAgent = this;
20 
21               m_hBtsThreads[i] = CreateThread(NULL, 0, ThreadProcBtsWor
ker, 
22                   (PVOID)pThreadPara, CREATE_SUSPENDED, NULL);
23    
24               SetThreadAffinityMask( m_hBtsThreads[i], (1MdlDebugStore),
    &(BtsState->VaUserDebugStore),
    &(BtsState->DebugStore)
    );
因此，2.0版本的界面（见图5-8）将原来的“抓取”（Fetch）按钮改
为“Pause/Unpause”。只要单击Pause按钮，上面提到的工作线程先会通
知驱动暂停监视，然后便直接读取DS区，并把信息显示到对应Tab页的
列表中。
2.0版本还加入了64位支持，可以工作在64位的Windows系统上。作
者测试了Windows 7和Windows 10。测试平台是装有第四代酷睿
（Haswell）处理器（i3-4100M）的神易MINI主机，使用该款机器的一
个原因是它自带难得一见的串口，调试起来很方便。如果读者在其他环
境下试用时遇到问题，那么最有效的方法是使用内核调试（见第18章）