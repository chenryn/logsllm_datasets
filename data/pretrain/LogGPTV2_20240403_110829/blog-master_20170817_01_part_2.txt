----------+-------------+-------------  
   629640 |      244453 |      102753  
(1 row)  
postgres=# select pg_size_pretty(pg_relation_size('bloat_test'));  
 pg_size_pretty   
----------------  
 7639 MB  
(1 row)  
postgres=# select pg_size_pretty(pg_relation_size('idx_bloat_test'));  
 pg_size_pretty   
----------------  
 6380 MB  
(1 row)  
```  
回收垃圾的错误做法  
```  
postgres=# vacuum full bloat_test ;  
VACUUM  
postgres=# select pg_size_pretty(pg_relation_size('bloat_test'));  
 pg_size_pretty   
----------------  
 3526 MB  
(1 row)  
索引没有被回收：  
postgres=# select pg_size_pretty(pg_relation_size('idx_bloat_test'));  
 pg_size_pretty   
----------------  
 6380 MB  
(1 row)  
```  
回收垃圾的正确做法  
```  
postgres=# drop index idx_bloat_test ;  
DROP INDEX  
postgres=# vacuum full bloat_test ;  
VACUUM  
postgres=# create index idx_bloat_test on bloat_test(id);  
CREATE INDEX  
postgres=# select pg_size_pretty(pg_relation_size('bloat_test'));  
 pg_size_pretty   
----------------  
 3526 MB  
(1 row)  
postgres=# select pg_size_pretty(pg_relation_size('idx_bloat_test'));  
 pg_size_pretty   
----------------  
 2174 MB  
(1 row)  
```  
2、alter table set distribute  
```  
alter table  set with (reorganize=true) distributed randomly;  
或  
alter table  set with (reorganize=true) distributed by (,....)  
```  
set distribute可以回收索引的膨胀空间。set distribute 加载的锁与DDL锁类似，是排它锁。建议在没有业务的时候执行，不要堵塞业务。  
同时set distribute只要分布条件不变，就是在节点内完成的，不会涉及数据的重分布。  
建议的操作流程：  
```  
1 记录下表的分布列  
2 执行set distribute (REORGANIZE=true)  
如果是随机分布，则设置为随机分布  
```  
例子  
```  
postgres=# update bloat_test set info='test';  
UPDATE 100000000  
postgres=# select pg_size_pretty(pg_relation_size('bloat_test'));  
 pg_size_pretty   
----------------  
 7727 MB  
(1 row)  
postgres=# select pg_size_pretty(pg_relation_size('idx_bloat_test'));  
 pg_size_pretty   
----------------  
 4411 MB  
(1 row)  
根据当前的分布规则，重分布：  
表和索引的垃圾都回收了。  
postgres=# alter table bloat_test set with (reorganize=true) distributed by (id);  
ALTER TABLE  
postgres=# select pg_size_pretty(pg_relation_size('bloat_test'));  
 pg_size_pretty   
----------------  
 4201 MB  
(1 row)  
postgres=# select pg_size_pretty(pg_relation_size('idx_bloat_test'));  
 pg_size_pretty   
----------------  
 2130 MB  
(1 row)  
```  
### PostgreSQL  
PostgreSQL 通常用在OLTP系统中，业务对数据库的可用性比OLAP系统要高很多，所以长时间持有排它锁的VACUUM FULL要少用。  
通常PostgreSQL的autovacuum参数开启后，不会导致大量的膨胀，除非有长事务、或者人为的设定（例如防止备库QUERY与VACUUM冲突的设定）妨碍了垃圾回收。这些都有解决方法，如下：  
[《为什么啤酒和纸尿裤最搭 - 用HybridDB/PostgreSQL查询商品营销最佳组合》](../201704/20170410_02.md)    
[《PostgreSQL snapshot too old补丁, 防止数据库膨胀》](../201511/20151109_01.md)    
[《PostgreSQL 9.6 快照过旧 - 源码浅析》](../201610/20161005_02.md)    
PostgreSQL的垃圾回收方法举例：  
1、首推reorg的方法，这种方法是新建一个对象，增量同步到新的对象，最后将新对象的DATAFILE和老对象（膨胀对象）的DATAFILE进行交换。  
仅仅是交换文件时，需要一个排它锁，非常短暂。  
参考  
[《PostgreSQL 收缩膨胀表或索引 - pg_squeeze or pg_repack》](../201610/20161030_02.md)    
2、如果你没有按照pg_squeeze或pg_repack插件，那么在遇到膨胀后，可以通过vacuum full来回收，PostgreSQL 9.0以后，VACUUM FULL会回收索引的垃圾，比GP更高级一点。  
建议的操作  
```  
set lock_timeout='2s';  
vacuum full tablename;  
```  
## 注意事项  
1、在执行vacuum full或alter table回收垃圾时，务必注意这个是排它锁，请在维护窗口执行，或者至少应该加一个锁超时的设定在开始搞。  
2、PG通常不会产生膨胀，除非配置或使用不规范。见文中详解。  
3、PG的垃圾回收，建议使用reorg的方式，尽量避免使用vacuum full。  
4、GP评估垃圾时，如果你发现没有垃圾，别高兴太早，有可能是统计信息没有收集。所以保持有节奏的analyze是好的习惯。   
另外可以参考一下这个ISSUE，不需要依赖ANALYZE，通过采样的方法评估垃圾比例。   
https://github.com/greenplum-db/gpdb/issues/706   
## 跑linux任务定时清理膨胀
结合本文提到的方法，取出膨胀的表实施vacuum或vacuum freeze或vacuum full.  
```
export PGHOST=$1
export PGPORT=$2
export PGDATABASE=$3
export PGUSER=$4
export PGPASSWORD=$5
for tbl in `psql -q -t -A -c "select quote_ident(schemaname)||'.'||quote_ident(tablename) from pg_tables"`
do 
psql <<EOF
set vacuum_freeze_min_age=0 ;
-- vacuum freeze $tbl ;
vacuum $tbl ; 
EOF
done
```
## 参考文档  
1、alter table 语法  
https://gpdb.docs.pivotal.io/4370/ref_guide/sql_commands/ALTER_TABLE.html  
2、性能诊断  
https://gpdb.docs.pivotal.io/4330/admin_guide/perf_issues.html  
3、日常维护  
https://gpdb.docs.pivotal.io/4330/admin_guide/managing/maintain.html  
4、表膨胀  
https://discuss.pivotal.io/hc/en-us/articles/202873573-FAQ-Bloat-in-HEAP-tables  
5、消除表膨胀的方法  
https://discuss.pivotal.io/hc/en-us/articles/206578327-What-are-the-different-option-to-remove-bloat-from-a-table-  
6、如何通过重分布消除表膨胀  
https://discuss.pivotal.io/hc/en-us/articles/203248413-Tip-Removing-Fragmentaion-aka-bloat-on-a-relation-using-Redistribute-  
7、列存表的收缩和膨胀检查方法:  
[《Greenplum 列存表的膨胀、垃圾检查与空间收缩》](../201708/20170817_03.md)  
8、[《PostgreSQL 如何精确计算表膨胀(fsm,数据块layout讲解) - PostgreSQL table exactly bloat monitor use freespace map data》](../201306/20130628_01.md) 
https://wiki.postgresql.org/wiki/Show_database_bloat  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")