### 4.4 Analysis of Patch Code Patterns

In this subsection, we first provide a statistical overview of our clustering results to demonstrate their high quality. We then describe and analyze the clustered patch code patterns in detail.

By running our clustering algorithm on a set of 940 short code fragments, we obtained 83 initial clusters. From these, we filtered out 50 small-size clusters, each containing fewer than 10 code fragments, as they did not exhibit evident security-oriented patterns. The remaining 33 clusters contained between 10 and 56 code fragments each, with an average of 21 fragments per cluster. We found that 84.8% (28/33) of these clusters exhibited clear patterns, with 19 clusters associated with security-oriented patterns and 9 clusters with non-security-related patterns (e.g., variable declarations and `#ifdef` usage). Among the 19 security-oriented clusters, we identified a total of 16 distinct patterns. Table 4 lists these patterns, sorted by cluster size. Only two clusters (clusters 21 and 1) were mapped to multiple patterns, indicating that we can easily abstract patterns from the data.

**Table 4: Clustered 16 Patch Code Patterns for Android System Vulnerabilities**

| ID | Description | Pattern (using diff code’s essential change format) | Example | Known? | Cluster ID |
|----|-------------|--------------------------------------------------|---------|--------|------------|
| P1 | Mis-retrieving Android service by reference | sp& --> sp | sp& --> sp | ✔ [33] | C5 |
| P2 | Inconsistent Android Parcelable serialization | writeLong --> writeInt OR + writeInt(); | writeLong --> writeInt OR + writeInt(); | (cid:72)(cid:35) [19] | C4 |
| P3 | Mis-exported component in system apps | exported=‘true’ --> exported=‘false’ | exported=‘true’ --> exported=‘false’ | (cid:72)(cid:35) [60] | C1 |
| P4 | Missing or mis-setting IF check condition | if [OLD_CONDITION] --> if NEW_CONDITION | if [OLD_CONDITION] --> if NEW_CONDITION | ✔ [19] | C9 |
| P5 | Missing Android permission/UID checking | +/- XXX_free(); | +/- XXX_free(); | ✔ [65] | C10 |
| P6 | Overflow due to inappropriate #define value | #define INT1 --> #define INT2 | #define INT1 --> #define INT2 | ✔ [26] | C2, C3 |
| P7 | Uninitialized data due to missing memset() | + virtual void onReset(); | + virtual void onReset(); | ✔ [53] | C21, 81 |
| P8 | Uninitialized data due to unassigned variable | + memset(); | + memset(); | ✔ [53] | C21 |
| P9 | Missing certain parameter, causing logic flaws | VARIABLE --> VARIABLE = INIT_VALUE | VARIABLE --> VARIABLE = INIT_VALUE | ✔ [70] | C63, 2 |
| P10 | Overflow due to missing error case checking | --> , PARAMETER | --> , PARAMETER | ✗ | C50, 36 |
| P11 | Integer overflow due to inappropriate INT type | + if (CONDITION) + { return ERROR; } | + if (CONDITION) + { return ERROR; } | ✗ | C32, 4, 15 |
| P12 | Data race due to missing lock/unlock | uint8_t|int --> uint16|32_t|long|size_t | uint8_t|int --> uint16|32_t|long|size_t | ✗ | C73, 21, 1, 74, 14 |

**Key Takeaways:**
- Our clustering algorithm automatically generates high-quality clusters of patch code fragments, with 84.8% of the clusters associated with specific patterns.
- We extracted 16 vulnerability patterns from 19 security-oriented clusters, including six new patterns not previously documented and four specific to Android.
- Further analysis of these patterns through case studies provides insights into their characteristics.

### 4.5 Implications of Our Analysis Results

In this subsection, we discuss four key implications of our analysis results.

**Implication 1: Seriousness of System-Level Vulnerabilities in Android**
- Our analysis quantitatively highlights the severity of system-level vulnerabilities in Android. Of the 2,179 vulnerabilities analyzed, 81% are rated as high or critical severity.
- This suggests that detecting system-level issues is as important, if not more so, than app-level vulnerabilities. A significant portion of Android malware exploits system vulnerabilities for root access.
- Therefore, it is crucial for security researchers to detect and patch zero-day Android vulnerabilities before hackers can exploit them.

**Implication 2: Guidance for System Developers**
- The results on vulnerable modules can help developers avoid similar mistakes in the same or related modules.
- By reviewing previously reported vulnerable code examples, developers can identify and address potential vulnerabilities early in the development process.
- We are developing a web portal to make our results browsable and searchable, facilitating easy retrieval of this information.

**Implication 3: Incorporating Implementation Bugs in Threat Models**
- Since implementation bugs are a significant source of Android system vulnerabilities, future defense systems should incorporate them into threat models.
- Existing research on securing Android OS, such as SEAndroid and ASM, often assumes no implementation vulnerabilities. However, our analysis shows that a significant portion of Android vulnerabilities are likely implementation bugs, which can undermine secure system designs.

**Implication 4: Automatic Vulnerability Detection Using Program Analysis Techniques**
- Our patch code patterns can be leveraged for automatic vulnerability detection using program analysis techniques.
- Some patterns are context-independent (e.g., P1 and P2) or can be tracked using data/control flows (e.g., P3, P6, P10, P11, and P15), making them suitable for static analysis tools.
- For patterns fully dependent on program contexts, learning-based methods (e.g., VulDeePecker) can be used to distinguish different contexts.

### 5 Related Work

This section presents related research on Android system vulnerabilities, vulnerability report analysis, and similar or cloned code detection.

**Research on Android System Vulnerabilities**
- Most prior work has focused on app-level vulnerabilities, but recent studies have addressed system-level vulnerabilities. For example, ADDICTED [77] analyzed the (in)security of Android device drivers and found that many vendor-customized drivers are under-protected.
- Other studies have examined the security of Android framework components, such as Kratos [60], Kywe et al. [46], Gu et al. [35], AceDroid [16], and ACMiner [38], which discovered inconsistent security policy enforcement.
- Unlike these studies, which focus on detecting unknown vulnerabilities, our work aims to gain insights from reported vulnerabilities.

**Analysis of Vulnerability Reports**
- Our paper falls under the category of analyzing vulnerability reports. Two related works [41, 52] also analyzed Android vulnerability reports, but they relied on manual efforts and used a smaller dataset.
- Other notable studies include Chen et al. [20], who modeled memory corruption vulnerabilities using finite-state machines, and Li and Paxson [47], who conducted a generic measurement study of security patches.
- Recent work, such as SemFuzz [73], has leveraged vulnerability-related text from CVE reports and Linux git logs to guide the automatic generation of proof-of-concept exploits.