in a single cache line: L1 icache attacks, FLUSH+RELOAD
attacks, FLUSH+FLUSH attacks, etc. only have cache line
granularity, and are not designed to distinguish varying code
traversal within a single line. Remarkably, both x64_foo and
x64_bar are potential targets for our new method. In this
light, at a very high level what CacheBleed accomplished for
dcache attacks—the ability to target at less than data cache line
granularity—our method accomplishes for the code side, and
furthermore potentially with a single trace instead of averaging
traces.
To validate our ﬁndings, we ran the following set of PORT
SMASH experiments. First, we conﬁgured the Victim process
to execute the x64_foo function passing 0 as an argument,
causing the Victim to issue popcnt commands, using port 1.
In parallel, we conﬁgured the Spy process with the P1 strategy
in the sibling logical core to issue and time crc32 commands,
thus creating contention and the Spy successfully tracks the
Victim state by observing high latency. Then, we repeated
the experiment but this time we passed 1 as an argument to
the Victim process, executing vpbroadcastd instructions,
using port 5. Since the Spy process is still using the P1
strategy, i.e., timing crc32 instructions, port contention does
not occur, hence the Spy successfully tracks the Victim state by
observing low latency. Figure 5 (Top) shows the resulting trace
for both cases, i.e., contention vs no-contention from a Spy
process perspective conﬁgured with the P1 strategy. We then
reconﬁgured the Spy to use the P5 strategy, and repeated the
experiments, shown in Figure 5 (Bottom). This raw empirical
data—that is clearly linearly separable—conﬁrms not only the
validity of our new side-channel in general, but furthermore the
symmetry in the plots conﬁrms that our technique even allows
to leak code traversal information with granularity ﬁner than
y
c
n
e
t
a
L
y
c
n
e
t
a
L
 400
 300
 200
 100
 0
 400
 300
 200
 100
 0
Spy: P1 / Victim: 0
Spy: P1 / Victim: 1
Spy: P5 / Victim: 0
Spy: P5 / Victim: 1
 0
 1000
 2000
 3000
 4000
 5000
 6000
 7000
Time
Fig. 5. Top: Timings for the PORTSMASH Spy when conﬁgured with P1, in
parallel to the Victim executing x64_foo with rdi as both zero and one in
two consecutive runs. Bottom: Analogous but with the Spy conﬁgured with
P5.
cache-line, since in this case it is dependent on port utilization
by the executed instructions within the cache-line.
V. APPLICATIONS
In the previous section, we developed a generic PORT
SMASH Spy process to procure timing signals that detect
port contention. In this section, we present the ﬁrst attack
using our technique in a real-world setting. We start with
some background on ECC, and explain why P-384 is a
highly relevant standardized elliptic curve, and examine its
scalar multiplication code path within OpenSSL 1.1.0h and
earlier, based on an implementation featuring secret-dependent
execution ﬂow, thus satisfying the PORTSMASH technique
requirement. We then design and implement an end-to-end P-
384 private key recovery attack that consists of three phases:
1) In the procurement phase, we target an stunnel TLS
server authenticating with a P-384 certiﬁcate, using
our tooling that queries the TLS server over multiple
handshakes with the Spy measuring port contention in
parallel as the server produces ECDSA signatures.
2) In the signal processing phase, we ﬁlter these traces and
output partial ECDSA nonce information for each digital
signature.
3) In the key recovery phase, we utilize this partial nonce
information in a lattice attack to fully recover the
server’s P-384 private key.
We close this section with a discussion on applications to
statically linked binaries and SGX enclaves. The rationale
behind our choice to demonstrate an end-to-end attack for
the non-SGX case is based on our perceived real-world im-
plications. The number of web-servers powered by OpenSSL
(cid:25)(cid:24)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:40 UTC from IEEE Xplore.  Restrictions apply. 
outside SGX enclaves largely outweighs the number within
SGX enclaves, by at least several orders of magnitude.
A. ECC and P-384
Koblitz [27] and Miller [28] introduced elliptic curves to
cryptography during the mid 1980’s. By 1995, the National
Security Agency (NSA) became a strong supporter of Elliptic
Curve Cryptography (ECC) [29] and pushed for the adoption
of ECDSA, the ECC variant of the (then) recently approved
Digital Signature Algorithm (DSA) [30].
In 2005, NSA’s support of ECC was clear, mandating its
use “for protecting both classiﬁed and unclassiﬁed National
Security information[..], the NSA plans to use the elliptic
curves over ﬁnite ﬁelds with large prime moduli (256, 384,
and 521 bits) published by NIST” [31]. Shortly after, the NSA
announced Suite B, a document recommending cryptography
algorithms approved for protecting classiﬁed information up
to Secret and Top Secret level, including P-256 at 128 bits of
security, and P-384 at 192 bits.
During 2012, the Committee for National Security Systems
(CNSS) issued CNSSP-15 [32], a document deﬁning the set
of public key cryptographic standards recommended to protect
classiﬁed information until public standards for post-quantum
cryptography (PQC) materialize, further pushing the support
for both curves, P-256 and P-384. Suddenly in August 2015,
and after a long history of ECC support, the NSA released a
statement [33] urging the development of PQC and discour-
aging the late adoption of ECC, and instead focusing on the
upcoming upgrade to quantum-resistant algorithms. Parallel
to this statement, the Suite B recommendation was updated,
mysteriously removing P-256 from the list of approved curves
without giving any reason, and leaving P-384 as the only
ECC option to protect information up to Top Secret level.
In January 2016, the NSA issued a FAQ [34] derived from
the statement released ﬁve months prior. They informed about
the replacement of Suite B with an updated version of CNSS-
15, and also ﬁnally commented on the removal of P-256 from
the previous Suite B. We cherry-pick three statements from
the document: (1) “equipment for NSS that is being built and
deployed now using ECC should be held to a higher standard
than is offered by P-256”; (2) “Elimination of the lower level
of Suite B also resolves an interoperability problem raised by
having two levels”; and (3) “CNSSP-15 does not permit use
of P-521”.
To summarize, P-384 is the only compliant ECC option for
Secret and Top Secret levels. Unfortunately, its implementa-
tions have not received the same scrutiny as P-256 and P-521;
we expand later in this section.
ECDSA: For the purpose of this paper, we restrict to short
Weierstrass curves over prime ﬁelds. With prime p > 3, all of
the x, y ∈ GF (p) solutions to the equation
E : y2 = x3 + ax + b
along with the point-at-inﬁnity (identity) form a group. The
domain parameters of interest are the NIST standard curves
that set p a Mersenne-like prime and a = −3 ∈ GF (p).
The user’s private-public keypair is (dA, QA) where dA
is chosen uniformly from [1 . . n) and QA = [dA]G holds.
Generator G ∈ E is of prime order n. A digital signature on
message m compute as follows.
1) Select a secret nonce k uniformly from [1 . . n).
2) Compute r = (k[G])x mod n.
3) Compute s = k−1(h(m) + dAr) mod n.
4) Return the digital signature tuple (m, r, s).
The hash function h can be any “approved” function, e.g.,
SHA-1, SHA-256, and SHA-512. Veriﬁcation is not relevant
to this work, hence we omit the description.
ECDSA and P-384 in OpenSSL: In OpenSSL, each elliptic
curve has an associated method structure containing function
pointers to common ECC operations. For ECDSA, scalar
multiplication is the most performance and security-critical
ECC operation deﬁned in this method structure, and the
actual algorithm to perform scalar multiplication depends on
several factors, e.g., curve instantiated, scalar representation,
OpenSSL version, and both library and application build-time
options. We further elaborate on how these factors inﬂuence
the ﬁnal scalar multiplication execution path in Appendix B,
while for the rest of this work we will focus on the code
paths executed in OpenSSL 1.1.0h and below and speciﬁcally,
as described in this paragraph, on the default implementation
for elliptic curves over prime ﬁelds. Due to the long history of
timing attacks against ECDSA and the possibility of improving
the performance of some curves, over the years OpenSSL
mainlined several implementations for scalar multiplication,
especially for popular NIST curves over prime ﬁelds.
Based on work by Käsper
[35]—and as a response
to the data cache-timing attack by Brumley and Hakala
[36]—OpenSSL introduced EC_GFp_nistp256_method,
a constant-time scalar multiplication method for the NIST
P-256 curve (and analogous methods for P-224 and P-
521). This method uses secure table lookups (through mask-
ing) and ﬁxed-window combing during scalar multiplica-
tion. This is a portable C implementation, but
requires
support for 128-bit integer types. Later, Gueron and Kras-
nov [37]
introduced a faster constant-time method with
their EC_GFp_nistz256_method. This method uses Intel
AVX2 SIMD assembly to increase the performance of ﬁnite
ﬁeld operations, thus providing a considerable speedup when
compared to EC_GFp_nistp256_method that is portable
C. The NIST curve P-256 quickly became (arguably) the
most widely used, fast, and timing-attack resistant of all NIST
curves in OpenSSL.
Unfortunately, P-384 was neglected, and it missed all of
the previous curve-speciﬁc improvements that provided timing
attack security for P-224, P-256, and P-521. Instead, P-384—
like any other short Weierstrass curve over a prime ﬁeld,
including e.g. secp256k1 (adopted for Bitcoin operations)
and Brainpool curves (RFC 5639[38])—follows the default
OpenSSL implementation for scalar multiplication on prime
curves. It is a non constant-time interleaving algorithm that
uses Non-Adjacent Form (wNAF) for scalar representation
(cid:25)(cid:24)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:40 UTC from IEEE Xplore.  Restrictions apply. 
[39, Sec. 3.2]. Although this implementation has been repeat-
edly targeted for side-channel vulnerabilities [36, 40–42], it
has never been exploited in the context of P-384 in OpenSSL.
During ECDSA signature generation, OpenSSL calls
ecdsa_sign_setup @ crypto/ec/ecdsa_ossl.c to
perform steps 1 and 2 of the ECDSA algorithm described
above. For the latter, the underlying ec_wNAF_mul func-
tion gets called to perform the scalar multiplication, where
r = [k]G is the relevant computation for this work. That
function ﬁrst transforms the scalar k to its wNAF representa-
tion and then, based on this representation, the actual scalar
multiplication algorithm executes a series of double and add
operations. To perform double and add operations, OpenSSL
calls ec_GFp_simple_dbl and ec_GFp_simple_add
respectively. There, these methods have several function calls
to simpler and lower level Montgomery arithmetic, e.g., shift,
add, subtract, multiply, and square operations. A single ECC
double (or add) operation performs several calls to these
arithmetic functions. Among the strategies mentioned in Sec-
tion IV, we found that for our target the P5 strategy results
in the cleanest trace overall.
In summary, by using the PORTSMASH technique during
OpenSSL P-384 ECDSA signature generation, we can measure
the timing variations due to port contention. More speciﬁcally,
we capture the port contention delay during double and add
operations, resulting in an accurate raw signal trace containing
the sequence of operations during scalar multiplication, and
leaking enough LSDs of multiple nonces k to later succeed in
our key recovery phase.
B. Procurement Phase: TLS
Stunnel3 provides TLS/SSL tunneling services to servers
(and clients) that do not speak TLS natively; during the
procurement phase we used stunnel 5.49 as the TLS server. We
compiled it from source and linked it against OpenSSL 1.1.0h
for crypto functionality. Our setup consists of an Intel Core i7-
6700 Skylake 3.40GHz featuring Hyper-Threading, with four
cores and eight threads, running Ubuntu 18.04 LTS “Bionic
Beaver”. In addition, we disabled TurboBoost to minimize any
interference due to CPU frequency scaling. Nonetheless, we
hypothesize enabling it would merely introduce some clock
skew without substantially affecting the side-channel leakage
itself. Scalar multiplication is a demanding task, so Turbo-
Boost should already activate during execution and quickly
reach the maximum stable frequency. This would have little
impact on our results since we are more interested in the
trailing portion of the trace. This decision is consistent with
existing results in the literature, e.g. [16, 36, 41, 43].
We conﬁgured the stunnel server with a P-384 ECDSA
certiﬁcate and ECDHE-ECDSA-AES128-SHA256 as the
TLS 1.2 cipher suite. We wrote a custom TLS client
to
connect to our TLS server. Typically, during a TLS hand-
shake, the client and the server exchange several protocol
messages,
including ClientHello, ServerHello, and
3https://www.stunnel.org
ECDH
ECDSA (below)
 0
 5000  10000  15000  20000  25000  30000  35000  40000  45000
y
c
n
e
t
a
L
y
c
n
e
t
a
L
 300
 250
 200
 150
 250
 200
 150
 100
Latency
Filtered
 35000
 36000
 37000
 38000
 39000
 40000
Time
Fig. 6. Multiple TLS trace stages. Top: Raw TLS handshake trace showing
scalar multiplications during ECDH and ECDSA. Bottom: Zoom at the end
of the previous ECDSA trace, peaks (ﬁltered) represent add operations. For
example, this trace ends with an add operation, indicating the nonce is odd.
ServerKeyExchange parameters. These messages are con-
catenated, hashed, and digitally signed by the server. Then, the
client veriﬁes the signature before ﬁnally establishing a session
with the server.
Our custom TLS client, acting as an attacker, serves two
purposes: (1) it controls the start of the attack by initiating
a TLS handshake with the stunnel service, alerting the Spy
process to start capturing OpenSSL scalar multiplication op-
erations performed by the server during the handshake; and