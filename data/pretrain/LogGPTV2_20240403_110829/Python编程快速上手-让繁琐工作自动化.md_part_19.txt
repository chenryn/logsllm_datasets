Bob
请注意，Eve's中的单引号字符不需要转义。在原始字符串中，转义单引号和双
引号是可选的。下面的print()调用将打印出同样的文本，但没有使用多行字符串：
print('Dear Alice,\n\nEve\'s cat has been arrested for catnapping, cat
burglary, and extortion.\n\nSincerely,\nBob')
6.1.6 多行注释
虽然井号字符（#）表示这一行是注释，但多行字符串常常用作多行注释。下
面是完全有效的Python代码：
"""This is a test Python program.
Written by Al Sweigart PI:EMAIL
This program was designed for Python 3, not Python 2.
"""
def spam():
"""This is a multiline comment to help
explain what the spam() function does."""
print('Hello!')
第6章 字符串操作
6.1.7 字符串下标和切片
字符串像列表一样，使用下标和切片。可以将字符串'Hello world!'看成是一个
列表，字符串中的每个字符都是一个表项，有对应的下标。
' H e l l o w o r l d ! '
0 1 2 3 4 5 6 7 8 9 10 11
字符计数包含了空格和感叹号，所以'Hello world!'有12个字符，H的下标是0，!
的下标是11。在交互式环境中输入以下代码：
>>> spam = 'Hello world!'
>>> spam[0]
'H'
>>> spam[4]
'o'
>>> spam[-1]
'!'
>>> spam[0:5]
'Hello'
>>> spam[:5]
'Hello'
>>> spam[6:]
'world!'
如果指定一个下标，你将得到字符串在该处的字符。如果用一个下标和另一个
下标指定一个范围，开始下标将被包含，结束下标则不包含。因此，如果spam是'Hello
world!'，spam[0:5]就是'Hello'。通过 spam[0:5]得到的子字符串，将包含 spam[0]到
spam[4]的全部内容，而不包括下标5处的空格。
请注意，字符串切片并没有修改原来的字符串。可以从一个变量中获取切片，
记录在另一个变量中。在交互式环境中输入以下代码：
>>> spam = 'Hello world!'
>>> fizz = spam[0:5]
>>> fizz
'Hello'
通过切片并将结果子字符串保存在另一个变量中，就可以同时拥有完整的字符
串和子字符串，便于快速简单的访问。
6.1.8 字符串的in 和 not in 操作符
像列表一样，in和not in操作符也可以用于字符串。用in或not in连接两个字
符串得到的表达式，将求值为布尔值True或False。在交互式环境中输入以下代码：
>>> 'Hello' in 'Hello World'
True
>>> 'Hello' in 'Hello'
True
>>> 'HELLO' in 'Hello World'
False
>>> '' in 'spam'
Python编程快速上手——让繁琐工作自动化
True
>>> 'cats' not in 'cats and dogs'
False
这些表达式测试第一个字符串（精确匹配，区分大小写）是否在第二个字符串中。
6.2 有用的字符串方法
一些字符串方法会分析字符串，或生成转变过的字符串。本节介绍了这些方法，
你会经常使用它们。
6.2.1 字符串方法upper()、lower()、isupper()和islower()
upper()和lower()字符串方法返回一个新字符串，其中原字符串的所有字母都被
相应地转换为大写或小写。字符串中非字母字符保持不变。
在交互式环境中输入以下代码：
>>> spam = 'Hello world!'
>>> spam = spam.upper()
>>> spam
'HELLO WORLD!'
>>> spam = spam.lower()
>>> spam
'hello world!'
请注意，这些方法没有改变字符串本身，而是返回一个新字符串。如果你希望改
变原来的字符串，就必须在该字符串上调用 upper()或 lower()，然后将这个新字符串
赋给保存原来字符串的变量。这就是为什么必须使用 spam = spam.upper()，才能改变
spam 中的字符串，而不是仅仅使用 spam.upper()（这就好比，如果变量 eggs 中包含
值10，写下eggs + 3并不会改变eggs的值，但是eggs = eggs + 3会改变egg的值）。
如果需要进行大小写无关的比较，upper()和lower()方法就很有用。字符串'great'
和'GREat'彼此不相等。但在下面的小程序中，用户输入Great、GREAT或grEAT都
没关系，因为字符串首先被转换成小写。
print('How are you?')
feeling = input()
if feeling.lower() == 'great':
print('I feel great too.')
else:
print('I hope the rest of your day is good.')
在运行该程序时，先显示问题，然后输入变形的great，如GREat，程序将给出
输出I feel great too。在程序中加入代码，处理多种用户输入情况或输入错误，诸如
大小写不一致，这会让程序更容易使用，且更不容易失效。
How are you?
GREat
I feel great too.
第6章 字符串操作
如果字符串至少有一个字母，并且所有字母都是大写或小写，isupper()和
islower()方法就会相应地返回布尔值True。否则，该方法返回False。在交互式环境
中输入以下代码，并注意每个方法调用的返回值：
>>> spam = 'Hello world!'
>>> spam.islower()
False
>>> spam.isupper()
False
>>> 'HELLO'.isupper()
True
>>> 'abc12345'.islower()
True
>>> '12345'.islower()
False
>>> '12345'.isupper()
False
因为upper()和lower()字符串方法本身返回字符串，所以也可以在“那些”返回
的字符串上继续调用字符串方法。这样做的表达式看起来就像方法调用链。在交互
式环境中输入以下代码：
>>> 'Hello'.upper()
'HELLO'
>>> 'Hello'.upper().lower()
'hello'
>>> 'Hello'.upper().lower().upper()
'HELLO'
>>> 'HELLO'.lower()
'hello'
>>> 'HELLO'.lower().islower()
True
6.2.2 isX 字符串方法
除了islower()和isupper()，还有几个字符串方法，它们的名字以is开始。这些
方法返回一个布尔值，描述了字符串的特点。下面是一些常用的isX字符串方法：
 isalpha()返回True，如果字符串只包含字母，并且非空；
 isalnum()返回True，如果字符串只包含字母和数字，并且非空；
 isdecimal()返回True，如果字符串只包含数字字符，并且非空；
 isspace()返回True，如果字符串只包含空格、制表符和换行，并且非空；
 istitle()返回True，如果字符串仅包含以大写字母开头、后面都是小写字母的单词。
在交互式环境中输入以下代码：
>>> 'hello'.isalpha()
True
>>> 'hello123'.isalpha()
False
>>> 'hello123'.isalnum()
True
Python编程快速上手——让繁琐工作自动化
>>> 'hello'.isalnum()
True
>>> '123'.isdecimal()
True
>>> ' '.isspace()
True
>>> 'This Is Title Case'.istitle()
True
>>> 'This Is Title Case 123'.istitle()
True
>>> 'This Is not Title Case'.istitle()
False
>>> 'This Is NOT Title Case Either'.istitle()
False
如果需要验证用户输入，isX 字符串方法是有用的。例如，下面的程序反复询
问用户年龄和口令，直到他们提供有效的输入。打开一个新的文件编辑器窗口，输
入以下程序，保存为validateInput.py：
while True:
print('Enter your age:')
age = input()
if age.isdecimal():
break
print('Please enter a number for your age.')
while True:
print('Select a new password (letters and numbers only):')
password = input()
if password.isalnum():
break
print('Passwords can only have letters and numbers.')
在第一个 while 循环中，我们要求用户输入年龄，并将输入保存在 age 中。如
果age是有效的值（数字），我们就跳出第一个while循环，转向第二个循环，询问
口令。否则，我们告诉用户需要输入数字，并再次要求他们输入年龄。在第二个
while 循环中，我们要求输入口令，客户的输入保存在 password 中。如果输入是字
母或数字，就跳出循环。如果不是，我们并不满意，于是告诉用户口令必须是字母
或数字，并再次要求他们输入口令。
如果运行，该程序的输出看起来如下：
Enter your age:
forty two
Please enter a number for your age.
Enter your age:
42
Select a new password (letters and numbers only):
secr3t!
Passwords can only have letters and numbers.
Select a new password (letters and numbers only):
secr3t
在变量上调用 isdecimal()和 isalnum()，我们就能够测试保存在这些变量中的值
是否为数字，是否为字母或数字。这里，这些测试帮助我们拒绝输入forty two，接
第6章 字符串操作
受42，拒绝secr3t!，接受secr3t。
6.2.3 字符串方法startswith()和endswith()
startswith()和endswith()方法返回True，如果它们所调用的字符串以该方法传入
的字符串开始或结束。否则，方法返回False。在交互式环境中输入以下代码：
>>> 'Hello world!'.startswith('Hello')
True
>>> 'Hello world!'.endswith('world!')
True
>>> 'abc123'.startswith('abcdef')
False
>>> 'abc123'.endswith('12')
False
>>> 'Hello world!'.startswith('Hello world!')
True
>>> 'Hello world!'.endswith('Hello world!')
True
如果只需要检查字符串的开始或结束部分是否等于另一个字符串，而不是整个
字符串，这些方法就可以替代等于操作符==，这很有用。
6.2.4 字符串方法join()和split()