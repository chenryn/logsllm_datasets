.BR whence (1),
.BR where (1),
.\
.BR whereis (1).
检查手册页的格式化是否正确，通常是视觉地直接看，你只要使用下面其中一个命令，
打印输出即可：
dt 1psodp/dsxoeeod/dt/at/asn/ 1ueuputguaedsodt- uee-gnox
或者使用这样的命令，在屏幕上以ASCII或是排版输出：
www.TopSage.com
---
## Page 459
编写手册页
447
nroff -san pathfind.man 1 col I more
col命令会处理由nroff针对平行的与差直的操作所产生的特殊转义符，不过groff
的输出就不需要用到co1了。
有些UNIX系统里会提供简单的语法检查程序：checknr，命令为：
checknr pathfind.man
它在我们的系统上不会产生警告信息，checknr的功能是找出不符合的字体，但对手册
页格式的了解不多，
很多UNIX系统里都有deroff，它是一套简单的过滤程序，用以去除troff标记。你
可以像这样执行拼字检查，：
deroff pathfind,man I spel1
为了避免来自拼字检查程序对于troff标记错误的抱怨。找出文件里难以察觉的问题还
有两个好用的工具：叠词查找（doubled-wordfinder，注8）与界定符平衡检查（delimiter-
balance checker，注 9)。
手册页格式转换
转换为HTML、Texinfo、Info、XML与DVI文件很简单：
man2html pathfind.man
man2texi --batch pathfind.man
makeinfo pathfind.texi
makeinfo --xoml pathfind.texi
tex pathtind.tex1
碍于长度，我们不在这里展现.html、.texi、.info与.xml文件的输出。如果你好奇
可以自已做做看，再一窥其内容，了解它们的标记格式。
手册页的安装
一直以来，都是使用man命令，在环境变量MANPATH定义的查找路径下之各个子目录
中一通常像这样/usr/man：/usr/local/man，寻找手册页。
注 8:
http:/Awww.math,xtah.edw/pub/dw/,
注9：
http://www.math.xtah.edw/pub/chkdelim/,
www.TopSage.com
---
## Page 460
448
附票A8
有些近期的man版本只是假设，在程序查找路径PATH中的每个目录，可以放置ZOIm
man字符串在尾端，以找出相对应的手册页目录，而不需用到MANPATH。
在各个手册页目录下，通常是寻找前置man与cat，及结尾是部分编号的成对子目录。
在各子目录内，文件名也以部分编号作为结尾。因此/usr/man/man1/ls.1为1s命令
文件的troff文件，而/usr/man/cat1/ls.1则保存nroff的格式化输出。man使用
的是后者，当它存在时，可避免重新执行不必要的格式化。
当有部分厂商采用全然不同的手册页树状结构组织时，它们的man实例仍能认得过去存
在过的实现方式，因此，大部分GNU软件的安装将可执行文件置于Sprefix/bin中，
并将手册页置于Sprefix/man/man1，其中prefix默认为/usr/local，且在各类系
统下都能运行得当。
系统管理者通常会在固定一段期间安排执行catman或makewhatis，以更新来自手册页
NAME部分中含有单行描述的文件。该文件是给apropos、man-k与whatis命令所使
用的，目的在于提供手册页的简单索引。如果这么微还找不到你想要的东西，就只能求
助于grep，使用全文查找了。
www.TopSage.com
---
## Page 461
附录B
文件与文件系统
如果想要有效率地利用计算机，那么对文件与文件系统就要有基本的了解。本附录要呈
现的是UNIX文件系统重点功能的概要：什么是文件？文件如何命名、包括了哪些东
西？如何将它们层级式地聚集在文件系统里？它们有哪些特性？
什么是文件
简单的说，一个文件就是存在于计算机系统里的一堆数据，而且可以用单一实体的方式
从计算机程序中引用。文件还提供让进程执行可以继续的数据存储机制，一般常用于重
新启动计算机（注1）。
早期计算机上，文件属于计算机系统外部的东西：多半是放在磁带、纸带（papertape），
或打孔卡（punchedcards）上。谁拿着卡片就能管理里面的文件，想用它的人只要愿意
把一大叠打孔卡从地上抱起来就可以。
过了一段时间，磁碟就开始广泛使用。它们的物理大小一直在缩减，从整只手臂的大小
缩到只有你据指的宽度，不过它们的容量却是一直在长大，从20世纪50年代年中期的
5MB，到2004年的400000MB。成本与访问时间已经至少下降了3倍。而今，能使用
的磁碟种类已经相当多了。
 1：
部分系统济神殊的快速文件系统置救在中央的随机访网内存（random-access memory，
RAM）里，让进程之间得以类享临时文件。以一般RAM技术来说，这类文件系统需器
配不新电系统，国为它们常会应系统重启后重建一个新的，然码，有当嵌入式计算机系
统（embecded computer system）使用非挥发性（nonvolatile）的RAM，可提供长期的
文件系统。
449
www.TopSage.com
---
## Page 462
450
附录B
光学存储设备，例如CD-ROM与DVD，已经是廉价又高容量的选择了：20世纪90年
代，CD-ROM大举取代软盘（flexible magnetic disk；floppy）与商用软件发布所使用
的磁带。
另外可以用的还有非挥发性的固态（solid-state）存储设备：它们最后应该会取代某些具
有移动机制部分的设备，后者会因为逐渐耗损而失效。不过在编写本书的时候，成本上
的考虑远大于它的替代性，它们不但容量比较小，且仅能重写几次而已。
文件如何命名
早期计算机操作系统无法命名文件：文件的处理是由它们的所有者提出，再由人工计算
机操作人员一次处理一个。不久马上就有人发现，如果文件能自动地处理就更好了：文
件需要人类可用来归类与管理的名称，而计算机也可使用该名称识别它们。
当我们可以指定名称给文件后，马上就会发现必须处理名称冲突的问题，因为很可能出
现相同名称指定子两个或更多个不同文件的情况，现代文件系统解决这个间题的方法是
将独一无二的文件名逻辑式地组合在一起，称为目录（directory）或文件夹（folder）。
这部分在本附录稍后“UNIX层缓式文件系统”里将有所介绍。
在文件命名时，使用的是从主机操作系统里字符集取得的字符，早期的计算上，字符集
各有相当大的差异，但因为必须在相异的系统间交换数据便凸显了标准化的需求。
1963年，American Standards Association (注 2) C以元长的 American Standard Code
forInformationInterchange名称，提出7位字符集，之后即以其初始字母ASCII（发
音为ask-ee）广为流传。7个位允许呈现2=128个不同的字符，已经足以处理拉丁字
母的大写与小写、数字与一些特殊符号及标点符号字符，包括空格以及剩下的33个控制
字符，后者未指定可打印的图形表现方式。它们之中，有些是用作将行加以标示与分页，
但大部分是用于特定用途。几乎所有计算机系统都已支持ASCII，想了解ASCII字符集，
请使用命令manascii。
不过，这么多的世界语言，使用ASCII表示是不够的：它能贮藏的字符太少了，因为大
部分的系统现在都使用8位字节，作为最小的定址存储单位，它允许2”=256个不同字
符。系统设计师也立即将该256元素集合的上半部分拿来使用，将ASCII留在下半部分。
可惜的是他们未遵循国际标准，所以出现了几百种不同的各种字符指定方式：有时它们
会被称为内码页（codepage）。即使单一128个额外字符集的空间，对完整的欧洲语系
 2:
之后重新命名为American National Standards Institute (ANSI)。
www.TopSage.com
---
## Page 463
文件与文件系统
仍嫌不足，因此InternationalOrganizationforStandardization（ISO）便开发了一系列COm
代码页（或称内码页）：ISO8859-1（注3）、ISO8859-2、ISO8859-3等。
20世纪90年代，共同开发的单一万国字符集Unicode（注4）开始运作。这最终需要每
个字符大约有21个位，但许多操作系统下的现行实例只使用到16个位，UNIX系统使
用一个可变动的位宽度编码：UTF-8（注5），允许已存在的ASCII文件成为有效的
Unicode文件。
会讨论字符集上是因为：除了独特的IBM大型计算机使用EBCDIC（注6）字符集外，
所有现行系统都将ASCII字符集纳入128以下的位置，因此将文件名限制在ASCII子集，
我们就可以让这个名称通用于所有地方了.现在的Internet与WorldWideWeb便证明
了文件可以在不同的系统间进行交换。
原始的UNIX文件系统设计者，决定这256个元素集合都可用于文件名，但有两个例外：
一个是控制字符NUL（此字符的所有位都为零），这是许多程序语言里，用来表示字符
串结尾的字符：另一个则是斜杠（/）字符，这是用来保留重要用途的字符，稍后会介绍。
此选择是相当宽容，不过我们强烈建议你再加强进一步的限制，理由如下：
因为文件名是人们也要使用，所以它的名称必须是可视字符：看不到的控制字符不
适合。
文件名不单单是人类要用，计算机也要用：人们可从上下文认出作为文件名的字符
字符串，但计算机程序需要更精确的规则。
在文件名里使用Shell的meta字符（也就是大部分的标点符号）必须特殊处理，因
此最好都避免。
初始的连字号会让文件名看起来像UNIX命令的选项。
注 3:
可到hnp://www.iso.ch/iso/en/CatalogueListPage.CaralogueList查战ISO Standards 目录,
注4：
《The Unicode Standard, Version 4.0),由 Addison-Wesley 于 2003 年出版, ISBN: 0-321-
*1-84581
注5;
见RFC 2279: UTF-8, 《a.transformation format of ISO 10646), 见ftp:/ftp.internic.net/
rfc/ rfe2279.txt,
注 6;
EBCDIC = Extended Binary-Coded Decimal Interchange Code,发为eb-see-dick成,eb
kih-dick。这是一套在1964年首次出现在IBMSystem/360系统上的8位字料，包括了
用式6位的IBMBCD集合作为子集，System/360及其后来的产物都是应用在计算机上
最久的架构，许多全球企业都使用它们，IBM也支持使用ASCII字将集的GNU/Linux实
例、元http://www.ibm.com/linux/。
www.TopSage.com
---
## Page 464
452
附录B
部分非UNIX文件系统允许在文件名里使用大、小写字符，但在比较文件时却会忽略大
小写的不同。UNIX原始的文件系统则不是这样，对它们来说：readme、Readme，与
README是三个不同的文件名（注7）。
UNIX文件名惯用的方式是全为小写，因为它好读、好输人，某些常见的重要文件名，例
如 AUTHORS, BUGS, ChangeLOg、 COPYRIGHT、INTALL、 LICENSE, Makefile, NENS,
README，与TODO则惯用大写或混用大小写。因为大写字母在ASCII字符集里位于小写
字母之前，因此这些文件在进行目录列表时，会一开始就出现，而更容易被看到。然面，
以现行UNIX系统而言，排序顺序视locale而定，所以将环境变量LC_ALL设为C，即
可得到传统ASCII的排序方式。
为了在其他操作系统上也能使用，最好是将文件名限制在拉丁字母的字符、数字、连字
号、下划线及单一个点号。
1
文件名可以多长？这根据文件系统而定，而有些软件本身的缓冲区有固定大小，限制了
所能处理的最大文件名。早期UNIX系统有14个字符的限制。但从20世纪80年代中期，
UNIX系统的设计便普遍允许使用到255个字符。POSIX定义了NAME_NAX常数为该长
度，不包含终结的NUL字符，且要求最小值为14.X/OpenPortabilityGujde要求最小
值为255。你可以使用getconf（注8）会令找出你系统的限制。下面是你在大部分UNiX
系统里会看到的报告：
S getconf NAME_HAX.
255
在当前的文件系统下，文件名可以多长？
及。
警告：我们在这里，对使用空格字符于文件名中的做法提出警告，有些窗口式的桌面环境操作系
统，其文件名是从滚动菜单中破选定，或输人到对诺方块中，这让它们的用户会以为在文
件名重使用登格字符是没问题的，其买不是！文件名不单只是在达个小小的对语框重被用
到，唯一明智的微法应是在有限的字符集里选择字符，作为你的文件名：特别是UNIX
Shell，它的命令是可以使用空格字符加以分隔的。
因为文件名里可能出现空白或其他特殊字符，在Shell测本里，你应该要记得将任何可能含
有文件名的Shell变量的计算总是以引号括起。
注 7:
MacOSX里支持的m式HFS式文件系统会视大小写为相用，所以将软件移继到该系统
上、可能会出现意料之外的情况。MacOSX也支持一般视大小写为不同的UNIX文件
系统，
注 8;
几手所有UNIX系统卫都有、除了MacOSX与FreeBSD（5.0前的版本）外。getconf
的源代码可以在g1ibc的发布包卫找到：ftp://jtp.gnu.org/gnw/glibe。
www.TopSage.com
---
## Page 465
文件与文件系统
453
UNIX的文件重有什么
UNIX另一个了不起的成就，就是以简单的观点来看文件：UNIX的文件，不过是零或
多个不知名的数据字节集结而成的流。
大部分的其他操作系统将文件看成两种：二进制与纯文本的数据、计数长度（counted
length）与固定长度与可变长度的记录、素引与随机与序的访问，等等。这马上就成
了一种梦魔：简单的复制文件操作，可能就因为文件类型的不同而必须以不同的方式完
成，且必须所有软件都能处理数种文件，复杂度会更高
UNIX的文件复制其实没什么：
try-to-get -a-byte
while (have-a-byte)
put-a-byte
try-to-get-a-byte
F
这种循环的排序可被实例在许多程序语言中，它最棒的地方是在：程序无须知道数据从
哪里来，它可以从文件、磁带设备、管道、网络连接、内核数据结构，或是从任何未来
设计者所设计的数据来源而来。
你会说，那我需要一个特殊文件，文件尾端有一个具指针的目录指向稍早的数据，且该
数据本身是加密的，在UNIX中的答案是：没问题！你只要让应用程序了解你这个完美
的文件格式，完全不会带给文件系统或操作系统该复杂度。它们不必了解这些细节。
然而，UNIX仍对允许的文件稍作区分。人为建立的文件，通常含有数行文本，以分行
字符作为结尾，且不会出现无法打印的ASCII控制字符。这样的文件可以被编辑、显示
于屏幕上、被打印、以电子邮件传送，还能通过网络传递到其他计算机系统上，其数据
也保证是被维护的很完整。用于处理文本文件的程序，包括我们在本书讨论的诸多软件
工具，其设计上是使用大的但大小固定的缓冲区来保存文本行。如果给它们过长的行，
或具有无法打印的字符的输人文件，则它们可能会出现无法预知的行为。处理文本文件
时，建议你将行的长度限制在读取时较舒适的大小，例如50到70个字符。
文本文件以ASCIIlinefeed（LF）字符，在ASCII表里为十进制值10，表示行的界线。
此字符指的是换行字符。许多程序语言在字符字符串里，以、n表示此字符。这种表示
方式，比其他系统的一组carriage-return/linefeed字符的表示方式简单多了.在C与C++
程序语言里的广泛用法以及后来开发的一些语言，都以单一换行字符作为文本文件里每
个行的终结：这是由于它们有很多都是源自于UNIX。
www.TopSage.com
---
## Page 466
454
附豪B
在共享文件系统的混用操作系统环境下，常会需要为使用不同行结尾符的文本文件作转○111