Its lower bounds must not be invalidated by the composition.
Adversary execution. Most optimality results assume hon-
est execution of Cm,t code. An execution is honest if the Cm,t
code is ﬁxed before it reads any variables or input nonce,
and returns correct results for all inputs. Unfortunately, the
optimality in honest execution does not necessarily hold in
adversarial execution since an adversary can change Cm,t’s
code both before and after receiving the nonce, or simply
guess the Cnonce(M, R) result without executing any instruc-
tions. For example, the adversary can encode a small nonce
into immediate address ﬁelds of instructions to save register
space and instruction execution. More insidiously, an adversary
can change Cm,t’s code and nonce to that of C(cid:48)
m(cid:48),t(cid:48) and
nonce(cid:48), M(cid:48), R(cid:48)) (cid:54)= (Cnonce, M, R), such that
nonce(cid:48) where (C(cid:48)
C(cid:48)
nonce(cid:48)(M(cid:48), R(cid:48)) = Cnonce(M, R) and t(cid:48)  m, ti > t. Furthermore, given an optimal
Cmi,ti program for a fast device i, one must be able to
obtain an optimal program Cmi,t(cid:48)
for it, where time bound
i ≥ max(ti), i = 1, . . . , c, independent of mi; e.g., to prevent
t(cid:48)
the on-board proxy attacks above. Neither scaling is obvious.
For example, an intuitive scaling of Cm,t to Cmi,ti might
copy Cm,t code k ≥ (cid:100)mi/m(cid:101) times in Mi and then challenge
the k optimal copies sequentially; and the scaling from Cmi,ti
i/ti(cid:101) nonces. Nei-
to Cmi,t(cid:48)
ther achieves optimal bounds in adversary execution. Consider
the second scaling; the ﬁrst has similar drawbacks. The k(cid:48)
executions Cnonce0 (Mi, Ri), . . . , Cnoncek(cid:48)−1(Mi, Ri) must be
linked to avoid exploitable time gaps, as noted above. If linking
is done by the veriﬁer, Cnoncej (Mi, Ri)’s code cannot end its
execution until it inputs the next nonce, noncej+1, from the
veriﬁer [43]. Then Cmi,ti can no longer be optimal, since
the variable input-synchronization delays in Cmi,ti invalidate
4. If the synchronization buffers noncej+1, op-
the optimal ti
might execute Cmi,ti on k(cid:48) ≥ (cid:100)t(cid:48)
i
3TOCTTOU attacks generalize to remote attestation in networks [18], [21]:
a yet-to-be-attested host can reinfect an already-attested host and then reboot
itself to a clean software copy before its attestation. Reinfection is possible
because attestation does not guarantee correctness of the attested software [56].
Duqu 2 illustrates similar malware mobility [34].
4Synchronization delays for noncej+1 input in a checksumj computation
on a network interface card (Netgear GA 620) can be as high as 0.4t with a
standard deviation of about 0.0029t; see [43], Sections 5.4.2-5.4.4.
4
Verifier Protocol Atomicity     concurrent     transaction order & duration  verifiable  control flow  Code Optimality scalable  bounds unpredictable        result      code composition Time Measurement Security Legend:            denotes a dependency cWRAM model and illustrate the challenges of proving opti-
mality of universal hash functions in it. A detailed description
of cWRAM is in Appendix A.
A. Overview of the cWRAM model
The cWRAM model is a concrete variant of Miltersen’s
practical RAM model [49]; i.e., it has a constant word length
and at most two operands per instruction. It also extends the
practical RAM with higher-complexity instructions (e.g., mod,
multiplication), as well as I/O instructions, special registers
(e.g., for interrupt and device status), and an execution model
that accounts for interrupts. The cWRAM includes all known
register-to-register, register-to-memory, and branching instruc-
tions of real system ISAs, as well as all integer, logic, and
shift/rotate computation instructions. In fact, any computation
function implemented by a cWRAM instruction is a ﬁnite-state
transducer; see Appendix A. (The limit of two operands per
instruction is convenient, not fundamental: instructions with
higher operand arity only complicate optimality proofs.) All
cWRAM instructions execute in unit time. However, ﬂoating-
point instructions are not in cWRAM because, for the same
data size, they are typically twice as slow as the corresponding
integer instructions in latency-bound computations; i.e, when
one instruction depends on the results of the previous one,
as in the Horner-rule step below. Thus they cannot lower
the concrete space-time bounds of our integer computations.
Likewise, non-computation instructions left out of cWRAM
are irrelevant for our application.
Like all real processors, the cWRAM has a ﬁxed number
of registers with distinguished names and a memory that
comprises a ﬁnite sequence of words indexed by an integer.
Operand addressing in memory is immediate, direct and indi-
rect, and operands comprise words and bit ﬁelds.
B. Proving optimality of universal hash functions in cWRAM
The immediate consequence of the constant word length
and limit of two single-word operands per instruction is
that any instruction-complexity hierarchy based on variable
circuit fan-in/fan-out and depth collapses. Hence, lower bounds
established in WRAM models with variable word length and
number of input operands [1], [49], [54] and in branching-
program models [46] are irrelevant in cWRAM. For example,
lower bounds for universal hash functions show the necessity
of executing multiplication instructions [1], [46]. Not only is
this result unusable in cWRAM, but proving the necessity of
any instruction is made harder by the requirement of unit-time
execution for all instructions.
In contrast, concrete space-time lower bounds of crypto-
graphic hash functions built using circuits with constant fan-
in, fan-out, and depth [3], [4] would be relevant to cWRAM
computations. However, these bounds would have to hold in
adversary execution, which is a signiﬁcant challenge, as seen
in Section II-B. Even if such bounds are eventually found,
these constructions allow only bounded adversaries and hence
would not satisfy our goal of unconditional security.
Since we use polynomials to construct k-independent (al-