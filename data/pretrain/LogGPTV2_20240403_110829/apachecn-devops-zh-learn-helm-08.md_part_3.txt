## 部署留言簿应用
当通常使用 Helm 作为独立的命令行界面工具时，您可以通过运行`helm install`命令来安装 Helm 图表。通过 Helm 操作符，您可以通过创建一个 CR 来安装一个 Helm 图表。通过创建位于`guestbook-operator/deploy/crds/`文件夹下的提供的 CR 来安装留言簿 Helm 图表，如以下代码片段所示:
```
$ kubectl apply -f guestbook-operator/deploy/crds/charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml -n chapter8
```
对`chapter8`命名空间中的 Pods 运行另一个`watch`命令，如下面的代码片段所示，您应该能够看到 Guestbook 和 Redis Pods 由于 Helm 图表的安装而旋转起来:
```
$ kubectl get pods -n chapter8 -w
```
以下代码块描述了处于`READY`状态的每个 Pod:
```
NAME                                  READY   STATUS    RESTARTS
example-guestbook-65bc5fdc55-jvkdz    1/1     Running   0
guestbook-operator-6fddc8d7cb-94mzp   1/1     Running   0
redis-master-0                        1/1     Running   0
redis-slave-0                         1/1     Running   0
redis-slave-1                         1/1     Running   0
```
创建留言簿 CR 时，操作员执行`helm install`命令安装留言簿图表。您可以确认通过运行`helm list`创建的版本，如下所示:
```
$ helm list -n chapter8
NAME             	NAMESPACE	REVISION	UPDATED       
example-guestbook	chapter8 	1       	2020-02-24
```
可以通过修改`example-guestbook` CR 来升级版本。修改您的`guestbook-operator/deploy/crds/charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml`文件以更改来自`1 to 2`的副本数量，如下所示:
```
replicaCount: 2
```
更新`replicaCount`值后，应用更改，如下所示:
```
$ kubectl apply -f guestbook-operator/deploy/crds/charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml -n chapter8
```
对留言簿 CR 的修改将触发`example-guestbook`释放的`helm upgrade`命令。大家可能还记得 [*第五章*](05.html#_idTextAnchor265)*构建你的第一个 Helm 图表*，留言簿 Helm 图表的升级挂钩会启动 Redis 数据库的备份。如果您在修改 CR 后对`chapter8`命名空间中的 Pods 运行观察，您将注意到备份`Job`开始，并且一旦备份完成，将看到两个留言簿 Pods 中的一个终止。您还会从以下代码片段中的`helm list`命令中注意到,`example-guestbook`版本的修订号增加到了`2`:
```
$ helm list -n chapter8
NAME             	NAMESPACE	REVISION	UPDATED       
example-guestbook	chapter8 	2       	2020-02-24
```
虽然版本号增加到了`2`，但是在编写本文时，基于 Helm 的运算符的一个限制是，您不能像使用 CLI 一样启动回滚到以前的版本。如果您试图对`example-guestbook`版本运行`helm history`，您还会注意到版本历史中只有第二个版本，如以下代码片段所示:
```
$ helm history example-guestbook -n chapter8
REVISION	UPDATED                 	STATUS        
2       	Tue Feb 25 04:36:10 2020	deployed
```
这是通过命令行界面定期使用 Helm 和通过基于 Helm 的操作员使用 Helm 之间的一个重要区别。因为不保留发布历史，所以基于 Helm 的操作符不允许您执行显式回滚。但是，在升级失败的情况下，将运行`helm rollback`命令。在这种情况下，将执行回滚挂钩，试图回滚到尝试的升级。
尽管基于 Helm 的运营商不保留发布历史，但它擅长的一个领域是同步应用的期望状态和实时状态。这是因为操作员不断地监视 Kubernetes 环境的状态，并确保应用始终配置为与 CR 上指定的配置相匹配。换句话说，如果其中一个留言簿应用的资源被修改，操作员将立即恢复更改，使其符合 CR 上定义的规范。您可以通过修改留言簿资源中的一个字段来查看此操作。
例如，我们将直接将留言簿部署的副本数量从`2`更改为`3`，并观察操作员将其自动恢复回`2`副本，以重新同步 CR 中定义的所需状态。
执行以下`kubectl patch`命令，将留言簿部署的副本数量从`2`更改为`3`:
```
$ kubectl patch deployment example-guestbook -p '{'spec':{'replicas':3}}' -n chapter8
```
通常，这只是添加了一个额外的留言簿应用副本。但是，由于留言簿 CR 目前只定义了`2`个副本，操作员很快将副本计数更改回`2`，并终止创建的附加 Pod。如果你真的想增加副本数量到`3`，你必须更新留言簿上的`replicaCount`值。这个过程提供了确保所需状态与集群的活动状态相匹配的优势。
使用基于 Helm 的操作器卸载留言簿应用就像移除 CR 一样简单。删除`example-guestbook` CR 卸载版本，如下图:
```
$ kubectl delete -f guestbook-operator/deploy/crds/charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml -n chapter8
```
这将删除`example-guestbook`版本和所有相关资源。
您也可以删除留言簿操作符及其资源，因为我们在下一部分不需要它们。您可以通过运行以下命令来实现这一点:
```
$ kubectl delete -f guestbook-operator/deploy/ -n chapter8
```
一般来说，您应该始终确保在删除操作员之前先删除 CR。操作员被编程为当您删除 CR 时，在释放时执行`helm uninstall`命令。如果你不小心先删除了操作符，你将不得不从命令行手动运行`helm uninstall`。
在本节中，您创建了一个 Helm 操作符，并学习了如何使用基于操作符的方法部署应用。在下一节中，我们将通过研究如何使用 Helm 管理 y 来继续讨论运算符。
# 使用 Helm 管理操作员和 CRs
在的上一部分，你通过首先创建位于`guestbook-operator/deploy/crds/`文件夹下的 CRD 来安装留言簿操作器。接下来，您创建了包含在`guestbook-operator/deploy/`文件夹下的操作员资源。最后，您创建了 CR 来部署留言簿应用。这些任务中的每一项都是通过使用 Kubectl CLI 来执行的，但是这也可以使用 Helm 图表来完成，从而为安装和管理操作员提供更灵活和可重复的解决方案。
Helm 允许您在 Helm 图表中提供一个名为`crds/`的特殊目录，每当安装图表时，该目录都用于创建 CRD。Helm 在`templates/`文件夹下定义的任何其他资源之前创建 CRD，这使得安装依赖于 CRD 的应用(如操作员)变得更加简单。
以下文件结构描述了可用于安装留言簿操作器的 Helm 图表:
```
guestbook-operator/
  Chart.yaml
  crds/
    charts.helm.k8s.io_guestbooks_crd.yaml
  templates/
    operator.yaml
    role_binding.yaml
    role.yaml
    Service_account.yaml
  values.yaml
```
这个 Helm 图表，安装后，将首先安装留言簿 CRD。如果集群中已经存在 CRD，它将跳过 CRD 创建，而只创建模板资源。请注意，虽然 CRD 可以方便地包含在 Helm 图表中，但有几个限制。首先，Helm 图表中的 CRD 不能包含任何 Go 模板，因此 CRD 不能像典型资源一样从参数化中受益。CRD 也永远不能升级、回滚或删除。因此，如果需要这些操作，用户必须小心手动修改或删除 CRDs。最后，安装如前所述的图表需要群集管理权限，这是 Kubernetes 中允许的最高权限，因为该图表至少包含一个 CRD 资源。
集群管理员可以使用前面描述的 Helm 图表轻松安装留言簿操作器。然而，这只是等式的一半，因为最终用户仍然必须创建 CRs 来部署留言簿应用。幸运的是，运营商的最终用户也可以通过创建包装留言簿 CR 的 Helm 图表来利用 Helm。
下面的文件结构显示了这种 Helm 图表的布局示例:
```
guestbook-cr
  Chart.yaml
  templates/
    guestbook.yaml
  values.yaml
```
前面的例子包括一个名为`guestbook.yaml`的模板。该模板可能包含最初由`operator-sdk`命令行界面生成的留言簿 CR，名称为`charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml`。与 CRD 不同的是，`templates/`文件夹下的 CRs 受益于 Go 模板和生命周期管理，所有其他资源也是如此。当客户关系报告包含复杂字段时，或者当同一版本中必须包含多个不同的客户关系报告时，这种方法可以提供最大的价值。使用这种方法，您还能够管理您的 CRs 的生命周期，并维护修订的历史记录。
现在您已经了解了如何创建 Helm 操作符以及如何使用 Helm 来帮助管理操作符，请在下一节中随意清理您的 Kubernetes e 环境。
# 清理你的 Kubernetes 环境
首先，运行以下命令删除你的留言簿 CRD:
```
$ kubectl delete crd guestbooks.charts.helm.k8s.io
```
在您继续下一个清理步骤之前，请注意，稍后在*问题*部分提出的一个问题将要求您编写自己的 Helm 图表，以实现在*使用 Helm 管理操作员和客户关系管理系统*部分讨论的图表设计。您可能希望推迟这些步骤来测试您的实现。
要继续清理，运行以下命令删除您的`chapter8`命名空间:
```
$ kubectl delete ns chapter8
```
最后，运行`minikube stop` 命令停止您的迷你库虚拟机。
# 总结
运算符对于帮助确保所需状态始终与活动状态相匹配非常重要。这样的壮举允许用户更容易地维护资源配置的真实来源。用户可以利用基于 Helm 的操作器来提供这种类型的资源协调，并且很容易开始，因为这使用 Helm 图表作为其部署机制。创建 CR 后，Helm 操作员将安装相关的 Helm 图表以创建新版本。修改 CR 时将执行后续升级，删除 CR 时将卸载版本。
为了管理操作员，集群管理员可以创建一个单独的 Helm 图表，用于创建操作员的资源和 CRD。最终用户还可以创建单独的 Helm 图表，该图表可用于创建运营商的 CRs，以及任何其他可能相关的资源。
在下一章中，我们将讨论 Helm 生态系统中围绕安全性的最佳实践和主题。
# 进一步阅读
有关 Kubernetes 资源的更多信息，您可以查看以下链接:
*   要发现更多由社区开发的运营商，请访问 b.com/operator-framework/awesome-Operators.
*   您可以从[https://Kubernetes . io/docs/concepts/extend-Kubernetes/operator/上的 Kubernetes 文档中了解更多关于运算符及其起源的信息。](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/. )
# 问题
1.  Kubernetes 操作符是如何工作的？
2.  使用 Helm 命令行界面和使用基于 Helm 的操作符有什么区别？
3.  假设你的任务是从一个现有的 Helm 图表中创建一个 Helm 操作员。你会采取什么步骤来完成这项任务？
4.  Helm 操作系统中的安装、升级、回滚和卸载生命周期挂钩是如何工作的？
5.  Helm 图表中`crds/`文件夹的目的是什么？
6.  在*使用 Helm 管理运营商和 CRs* 部分，我们介绍了两种不同的 Helm 图表，可用于帮助管理运营商和 CRs。使用该部分中提供的图表布局实现 Helm 图表。图表应用于安装留言簿操作员和安装留言簿 CR。参考 [*第 5 章*](05.html#_idTextAnchor265)*建立你的第一个舵角图*获得创建舵角图的帮助。