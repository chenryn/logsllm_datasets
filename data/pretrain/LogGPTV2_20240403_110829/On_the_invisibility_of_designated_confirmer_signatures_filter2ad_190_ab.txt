simply denoted m−1
ex .
Existentially Forgeable Undeniable Signature We consider an existentially forge-
able undeniable signature scheme UnSign whose associated pair of keys is that
of C i.e. (KC
s ) ← SetupC(1k). We denote the message space Mun and the
signature space Σun. We have two probabilistic polynomial time algorithms
p ,KC
σun ← UnSign(KC
s , mun) and (mun, σun) ← UnForge(KC
p ),
where the latter outputs a valid message-signature pair such that mun is uni-
formly distributed. Furthermore, we also have two interactive protocols UnCon-
ﬁrm and UnDeny between C and V. The properties are the same as for the
algorithms Conﬁrm and Deny.
We will assume that the function UnSign(KC
s ,·) is balanced on the set Σun for
any secret key KC
s . So, the probability for a pair (mun, σun) uniformly picked at
random in Mun × Σun to be valid is equal to ν := v/|Σun|, where v denotes the
number of valid signatures related (and independent) to each mun.
Some examples of such undeniable signatures are the MOVA scheme [17],
the RSA based scheme from [9], the scheme of Chaum [5] based on the discrete
logarithm problem and the generic scheme [18] based on group homomorphisms.
All these schemes present this property provided that we remove some hash
functions or pseudorandom generators. Furthermore, we note that these obtained
signatures schemes are deterministic and therefore cannot satisfy the invisibility
property under a chosen-message attack.
Random Hash Function We consider a hash function h : M → Mex which is
collision-resistant. We furthermore assume that h is full-domain i.e., its range is
the full set Mex. h will be considered as a random oracle.
Random Permutation We consider a public permutation C : Mex → Mex. C
will be considered as a random permutation oracle (see [21,23]) i.e., C is picked
uniformly at random among all permutations over Mex. We assume that we can
send queries to the oracle C and the oracle C−1.
Representation Function We consider a ﬁxed bijection B : Mun × Σun → Mex.
In what follows, we will always work with the function F := C ◦ B instead of C
and B separately. Note that F is then a random bijective function.
4.2 The Scheme
The generic construction we proposed is a natural generalization of Chaum’s
scheme [6]. The signer generates a valid message-signature pair with respect to an
existentially forgeable undeniable signature scheme. Then the signer mixes this
pair with a message digest of the message and ﬁnally signs the result in a classical
6
way using ExSign. The validity of this designated conﬁrmer signature will then
rely on the validity of the message-signature pair which can only be conﬁrmed
by the conﬁrmer. Since ExSign is existentially forgeable, anybody could have
produced a signature with an invalid message-signature pair. On the other hand,
when the message-signature pair is valid the designated conﬁrmer signature can
be produced only by the signer. So, without the help of the conﬁrmer it is not
possible to deduce the validity or invalidity of a designated conﬁrmer signature.
Setup Three pairs of keys are generated (KU
s ) ← SetupU(1k) from a security
Sign Let m ∈ M be a given message to sign. The signer runs the algorithm
UnForge to obtain a pair (mun, σun) and computes h(m). He then computes
mex := F(mun, σun)ﬂh(m). The designated conﬁrmer signature of m is then
σ = (mex, σex), where σex ← ExSignKS
(mex, σex) = 1.
Then, they compute mexﬂh(m)−1, apply F−1, and retrieve (mun, σun). Then
V interacts with C in a proof protocol in which C proves that (mun, σun) is
valid using UnConﬁrm. If this is veriﬁed the protocol outputs 1.
Conﬁrm The veriﬁer and the conﬁrmer check that ExVerifyKS
parameter k, where U ∈ {S, C, V}.
(mex).
s
p ,KU
Deny In the denial protocol, the veriﬁer and the conﬁrmer ﬁrst check that
(mex, σex) = 1 and then retrieve (mun, σun) as in the conﬁrma-
ExVerifyKS
p
tion. Then V interacts with C in a proof protocol in which C proves that
(mun, σun) is invalid using UnDeny. If this is veriﬁed the protocol outputs 1.
Note that the conﬁrmer could also conﬁrm or deny signatures in an anony-
mous way: he does not need σex nor mex but only mun and σun which contain
no information about the signer or the message. This could be suitable for some
applications.
p
5 Security Results
5.1 Security against Adaptive Chosen-Message Existential Forgeries
Theorem 4. The scheme Sign resists against existential forgery under an adap-
tive chosen-message attack provided that
1. h is a random hash function oracle and C/C−1 is a random permutation
oracle
2. ExSign resists against universal forgery under a no-message attack
3. valid (mun, σun) pairs are sparse in Mun × Σun (i.e. ν ¿ 1)
even if the attacker is the conﬁrmer C.
More precisely, for any attacker A which wins in the game of existential forgery
under an adaptive chosen-message attack against Sign with success probability
F F−1-queries, and qS Sign
Succef−cma
queries, we can construct another attacker B which wins the game of universal
forgery under a no-message attack against ExSign with success probability
Sign,A (k) = ε using qh h-queries, qF F-queries, q∗
(cid:181)
ε − (qF + q∗
F)2
|Mex| − 2ν
(cid:182)
Pr[Succuf−nma
ExSign,B(k)] ≥
1
qF · qh
7
p
p
p ,KC
un,1, σ∗
using one run of A.
Proof. For this proof, following Shoup’s methodology [26], we will provide a
sequence of games beginning from the real attack and reach a game allowing to
deduce a universal forgery against ExSign. B is given a challenged public key KS
and a challenged message mchal ∈ Mex for which it has to forge a signature σchal
such that ExVerifyKS
(mchal, σchal) outputs 1 with a non-negligible probability.
Game 1. Here, we consider the real attack game with the random oracle h and
random function oracle F. First, A receives a challenged public key uniformly
picked at random KS
p for which it will have to output an existential forgery.
Since the attacker A can be the conﬁrmer, A gets also the conﬁrmer key pair
(KC
s ). Note that it can simulate ConﬁrmC and DenyC, so we do not need to
give A an access to the denial and conﬁrmation protocol. The attacker makes
adaptively and in any order the following queries:
- A sends qh messages m1, . . . , mqh ∈ M to the random oracle h and receives
the corresponding hash values h1, . . . , hqh.
- A sends qF pairs (mun,1, σun,1), . . . , (mun,qF , σun,qF ) to the random function
oracle F and receives the corresponding values f1, . . . , fqF .
F to the random function oracle F−1 and
- A sends q∗
1 , . . . , f∗
F elements f∗
q∗
receives the corresponding values (m∗
- A sends qS messages ms
qS to the signing oracle Sign (with respect
to the challenged public key) and receives the corresponding signatures
σ1, . . . , σqS. We assume that qh and qF includes the queries made by Sign.
After these queries, A outputs a message m (not queried to the signing oracle)
with a correct forged signature σ with success probability Pr[S1] = ε. In what
follows, we denote the probability event that A succeeds in the Game i as Si.
Note that the challenged public key B received in the universal forgery game
against ExSign is the one given to A in Game 1. Namely, there is no problem for
doing this since the two keys are uniformly distributed in the same key space.
Game 2. Here, B simulates the random oracle h as well as the random function
F using two appropriate lists h-List and F-List. It will apply the following rules:
– To a query mi, B picks hi uniformly at random in Mex and adds the element
(mi, hi) in h-List if mi is not already in h-List. Otherwise, it simply looks in
the h-List and answers the corresponding h-value.
– To handle the F and F−1 oracle queries, it proceeds in a similar way. To
a query (mun,i, σun,i), it picks fi uniformly at random in Mex and adds
((mun,i, σun,i), fi) in F-List if (mun,i, σun,i) is not already in F-List . Oth-
erwise, B answers the corresponding fi taken from F-List. Note that the
simulation fails when collisions occur for some distinct fi since F is a bijec-
tive function. It proceeds exactly in the same way for the F−1 queries by
using the same list F-List.
Since h is a random oracle and F a random function oracle, we see that the
simulation is perfect except when a collision on outputs of F resp. F−1 occurs.
un,1), . . . , (m∗
1, . . . , ms
F , σ∗
un,q∗
F ).
un,q∗
8
Let CollF be the event that such a collision occurs in Game 1 (equivalently in
Game 2). Obviously, Pr[S1 ∧ ¬CollF] = Pr[S2 ∧ ¬CollF], so we can apply the
Shoup’s lemma [26] and obtain
| Pr[S2] − Pr[S1]| ≤ Pr[CollF] ≤ (qF + q∗
F)2
|Mex|
.
un,i, σ0
un,i, σ0
un,i, σ0
un,i) by setting fs := mex,i ﬂ (ht)−1. Note that if (m0
Game 3. This game is identical as Game 2 except that B simulates the Sign
i to h. Let ht be the answer. Sign must also run
oracle. Sign must query ms
UnForge. Let (m0
un,i) be the forged message-signature pair with respect to
the Unsign scheme. It also runs the probabilistic algorithm ExForge which outputs
a valid message-signature pair (mex,i, σex,i) with respect to ExSign. Sign must
also query F with (m0
un,i) and gets some fs. Then, B simulates the value
fs := F(m0
un,i)
or fs is an element which lies already in F-List B has to abort the simulation.
Namely, in the ﬁrst case it could not choose the output value fs while in the
second case it might fail the simulation if fs has a preimage which is not a valid
message-signature pair in Mun × Σun. Since the collisions related to the outputs
of F and F−1 (even those queried by ExSign) are already cancelled in Game
2, such bad events do not happen here. Hence, we notice that the simulation is
perfect since ExForge outputs an mex,i which is uniformly picked in Mex. Note
also that the distribution of m0
un,i is uniform (assumed for UnForge). Thus, for
any ht the distribution of fs is uniform as well and the distribution of the pairs
(mex,i, σex,i) is the same as that from Sign. We have
un,i, σ0
Pr[S3] = Pr[S2].
Game 4. Here, we would like to obtain a game where the output forged message-
signature pair (m, σ) = (m, (mex, σex)) has the two following properties:
– m was queried to the random oracle h (necessarily not through Sign).
– f := mex ﬂ h(m)−1 is an output from a query made to the oracle F (maybe
through Sign).
The ﬁrst condition does not hold with a probability less than 1/|Mex| since the
attacker A could not do better than guessing the right h(m). The second one
does not hold if A guessed the right f (i.e., with probability up to 1/|Mex|)
or if it queried f to F−1-oracle and obtained a valid signature pair (mun, σun),
i.e., with probability up to ν since UnSign is balanced. The probability that
this condition does not hold is then less than max(1/|Mex|, ν) which is ν since
1/ν  0, there exists an invisibility distinguisher UD under a
lunchtime known-message attack against UnSign with advantage ε0 ≥ ε/2 which
uses one run of D.
s ) ← SetupC(1k). Then, UD
Proof. First UD is fed with KC
s to D. The answers of
p ,KS
p ,KS
runs (KS
the oracle queries from D will be simulated by UD. Since D has the signer secret
key KS
s , it does not need any access to a signing oracle. UD simulates the oracle
queries to the conﬁrmation and denial protocol as follows:
- To a message-signature pair (m, (mex, σex)), UD checks ﬁrst that (mex, σex) is
a valid pair with respect to ExSign. It retrieves the corresponding (mun, σun)
and forwards this query to the conﬁrmation (or denial) protocol oracle with
respect to UnSign.
At a time, D sends two messages m0, m1 ∈ M to UD. UD receives from its
un ∈ Mun and a signature σun ∈ Σun (The chal-
challenger two messages m0
un)). Then, UD picks
lenger ﬂipped a coin b ∈U {0, 1} and set σun ← UnSign(mb
un, σun) ﬂ h(mb1), computes