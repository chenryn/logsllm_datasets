0}，
01
0}
端口号（使用内建值）
密
用
码（默认为空）
1户名（默认为loginname）
7.3出错处理和命令选项处理
*
-show_opt.c.
243
---
## Page 264
项的短名字和长名字、其默认值，以及该数值是数字还是字符串，等等。
序能够识别的每一个选项，这个数组都应该拥有一个结构。每个结构都要提供一些信息，如选
MySQL选项处理例程的接口。
来处理命令行选项的程序来讲，都是相同的。在你自己的程序里，也应做同样的事情。
244
(2）定义my-option 结构的数组。在 show_opt.c 里，此数组的名字为my_opts。对于程
（1）除了我们前面包含的那几个文件外，还要包含 my_getopt.h 文件，该文件定义了
show_opt.c所展示的选项处理方式涉及的几个方面，对于任何使用MySQL客户端开发库
int opt_err;
inti；
main (int argc, char *argv[])
nt
exit (0);
for(i= 0;i< argc;i++)
printf ("Argument vector after calling handle_options():\n");
printf
printf
if ((opt_err = handle_options (&argc,&argv, my_opts,get_one_option)))
load_defaults ("my", client_groups, &argc, &argv);
MY_INIT (argv[O]);
printf
printf
printf
printf
printf
printf ("Original connection parameters:\n");
printf
printf
printf
printf
printf
return (0);
case'?':
orintf
printf ("arg %d:%s\n",i,argv[i]);
for（i
printf
my_print_help(my_opts)；/* 输出帮助消息*/
第7章用C语言编写MySQL程序
exit（opt_err);
("Connection parameters after calling handle_options():\n");
("Argumentvector after calling load_defaults():\n");
("Original argument vector:\n");
("password:%s\n",
("password: %s\n",
("socket filename:
("portnumber:%u\n",opt_port_num);
("username:
（"arg %d: %s\n",i, argv[i]);
opt_socket_name ? opt_socket_name :"(null)");
("socket filename:
("port number:%u\n",opt_port_num);
("hostname:
opt_socket_name ? opt_socket_name : "(null)");
0：
0；
i< argc;i++)
%s\n"
%s\n",
%s\n"
8s\n"
8s\n"
opt_user_name
%s\n"
opt_user_name
?opt_host_name
opt_user_name
opt_user_name
："(null)");
“(null)")
"（null)
---
## Page 265
定的：
handle_options（)调用。在 show_opt.c里，这个辅助函数的名字为 get_one_option（）。
如果想要执行某些客户端开发库处理不了的特殊动作，那么你的程序应该定义一个辅助函数，供
例程和my_option结构，使绝大多数选项处理操作都可以由客户端开发库来替你自动完成。不过，
参数指向my_option结构的数组。第四个参数是一个指向辅助函数的指针。设计handle_options（）
量（与load_options（)的情形一样，你必须传递这些变量的地址，而不能传递它们的值）。第三个
handle_options（）来处理这些选项。handle_options（）的前两个参数分别是程序的参数计数和向
my_option 结构定义了一些必需的信息类型，这些类型是为程序所能解读的每一个选项指
关于my_option结构的各个成员的具体用法，
struct my_option
（3）在调用load_defaults（）读取选项文件并设置参数向量之后，便可以调用
口
口
口
口
口
：
及它们的含义和相应的C语言类型。
var_type 表明命令行里紧跟在选项名后面的那个值的类型。
值，从而要求所有给定的选项值都必须与这些合法值中的某一个相匹配。
Itypelib目前尚未使用。在将来的MySQL 发行版本里，有可能被用于指定一组合法
u_max_value设置为NULL。
u_max_value 也是一个泛型指针地址，但它只被服务器使用。对于客户端程序，请把
value 是一个泛型指针的地址，其声明为一个 uchar**值。如果这个选项带有参数，
comment 是一个描述该选项用途的解释性字符串。这里的文字可以显示在帮助消息里。
以让代码都大于255，这是单字符值的最大可能取值。具体示例请参考7.6节。）
id 是选项的短名（单个字母)；如果选项没有单字母名字，那么 id就是与选项相关联的
Iname是选项的长名。它是--name形式的选项，不包括开头的短划线。例如，长选项为
longlong
longlong
longlong
longlong
struct st_typelib*typelib;
uchar
const char
int
const char
NULL。
那
名
名
代码值。例如，短选项为-u，那么在my_option结构里将被列为'u'。如果选项只有长
阝么value 会指向这个你想要存储的参数的变量。在各个选项都处理完成之后，你可
名。代码值必须是唯一的，并且与所有单字符名字不同。（为了满足后面那条要求，
名，而没有对应的单字符名字，那么你应该指定一组选项代码值，以便内部用于矢
Long
检查这个变量，看看此选项到底被设置了什么内容。被指向的那个变量的数据类型
block_size;
max_value;
min_value;
def_value;
var_type;
id;
value;
comment;
arg_type;
￥
￥
￥
￥
￥
选项的最小允许值
选项的默认值*/
选
指
用
用
提
选
选项的长名*/
项
1于存储值的那个变量的指针
供帮助消息的选项描述*/
项的短名或代码*/
如下所示
值是否
数量
否必需*/
数*/
7.3出错处理和命令选项处理
，下表列出了这些类型，以
245
短
---
## Page 266
跟一个用于表明数组结束的终止结构：
246
对于每一个有效选项，my_opts 数组都应该有一个与之对应的 my_option 结构，后面还紧
app_type为专为应用程序保留的。
min_value
口 def_value 适用于数字型选项。如果参数向量里没有显式指定值，则此选项会被设置
口arg_type 表明选项名后面是否跟着选项值，其可能的取值如下表所示。如果 arg_type
口
口
值必须为偶数，那么请把单个块的大小设置为2。handle_options（）函数将把奇数值
有必要，用户给出的选项值将会向下近似为最接近其倍数的那个值。例如，如果选项
lblock_size 适用于数字型选项。如果它不等于零，则它所表示的是单个块的大小。如
向下近似为最接近的那个偶数。
部实际使用的范围却是0到255，那么 sub_size 会被设置为1。
转换成内部所用范围内的值。例如，如果命令行给定的值的范围是1~256，但是程序内
sub_size 适用于数字型选项。它是一个偏移值，用于把参数向量里给定范围内的值，
值。如果为0时，则表示“没有最大值”
max_value 适用于数字型选项。它是最大许可值。比它大的值将自动减小为这个最大
值。如果为0时，则表示“没有最小值”
成默认值。
的取值为 NO_ARG，则 var_type 应该为 GET_NO_ARG。
代码发行版里的mysql.cc文件。
程序的时候（如启用了调试支持功能）才可用。更多关于示例的信息请参考MySQL源
GET_DISABLED 类型可以用来表明某个选项已不再可用，或是只在以某种特定方式建立
项变量指向这个副本。
GET_STR 和 GET_STR_ALLOC 的区别是：对于 GET_STR，客户端开发库会设置选项变量
第7章用C语言编写MySQL程序
GET_DOUBLE
GET_SET
GET_ENUM
GET_DISABLED
GET_STR_ALLOC
GET_STR
GET_ULL
GET_LL
GET_ULONG
GET_LONG
GET_UINT
GET_INT
GET_BOOL
GET_NO_ARG
var_type值
适用于数字型选项。它是最小许可值。比它小的值将自动增大为这个最小
REQUIRED_ARG
OPT_ARG
NO_ARG
arg_type值
双精度（浮点）值
集合值（当前未使用）
枚举值 (当前未使用)
选项被禁用
字符串值
字符串值
无符号长长整数值
长长整数值
无符号长整数值
长整数值
无符号整数值
整数值
布尔值
没有值
含义
选项要求后面带有参数
选项后面可能带有参数
选项后面不带参数
含义
double
char*
unsigned long long
unsigned 1ong
long
unsigned
int
my_bool
char*
longlong
C语言类型
int