以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[10] M. Bun, C. Dwork, G. N. Rothblum, 和 T. Steinke, “通过截断CDP实现可组合且多用途的隐私保护,” 在第50届ACM SIGACT理论计算研讨会论文集, 2018, 第74-86页.

[11] M. Abadi, A. Chu, I. Goodfellow, H. B. McMahan, I. Mironov, K. Talwar, 和 L. Zhang, “带差分隐私的深度学习,” 在ACM计算机与通信安全会议 (CCS). ACM, 2016, 第308-318页.

[12] C. L. Canonne, G. Kamath, 和 T. Steinke, “用于差分隐私的离散高斯分布.” NeurIPS, 2020.

[27] J. Allen, B. Ding, J. Kulkarni, H. Nori, O. Ohrimenko, 和 S. Yekhanin, “在可信处理器上进行差分隐私数据分析的算法框架,” 在神经信息处理系统会议 (NeurIPS), 2019.

[28] T. Ristenpart, E. Tromer, H. Shacham, 和 S. Savage, “嘿，你，离开我的云: 探索第三方云计算中的信息泄露,” 在ACM计算机与通信安全会议 (CCS), 2009.

[29] T. Van Goethem, C. Pöpper, W. Joosen, 和 M. Vanhoef, “无时间的时间攻击: 利用并发性通过远程连接泄露秘密,” 在USENIX安全研讨会, 2020.

[30] G. Marsaglia 和 T. A. Bray, “生成正态变量的一种便捷方法,” SIAM Review, 卷6, 期3, 第260-264页, 1964.

[31] G. Marsaglia 和 W. W. Tsang, “生成随机变量的Ziggurat方法,” Journal of Statistical Software, 卷5, 期8, 2000.

[32] G. Marsaglia, “从正态分布的尾部生成变量,” Technometrics, 卷6, 期1, 第101-102页, 1964. [在线]. 可访问: https://doi.org/10.1080/00401706.1964.10490150

[33] D. Dua 和 C. Graff, “UCI机器学习库,” 2017. [在线]. 可访问: http://archive.ics.uci.edu/ml

[34] B. Balle 和 Y.-X. Wang, “改进用于差分隐私的高斯机制: 分析校准和最优去噪,” 在ACM计算机与通信安全会议 (CCS). ICML, 2018, 第1-23页.

[35] C. Dwork 和 A. Roth, “差分隐私的算法基础,” Found. Trends Theor. Comput. Sci., 卷9, 2014年8月.

[36] J. Hsu, M. Gaboardi, A. Haeberlen, S. Khanna, A. Narayan, B. C. Pierce, 和 A. Roth, “差分隐私: 选择ε的经济方法,” 在2014 IEEE第27届计算机安全基础研讨会. IEEE, 2014, 第398-410页.

[37] Y. LeCun 和 C. Cortes, “MNIST手写数字数据库,” 2010. [在线]. 可访问: http://yann.lecun.com/exdb/mnist/

[38] Z. Bu, J. Dong, Q. Long, 和 W. J. Su, “带高斯差分隐私的深度学习,” CoRR, 卷abs/1911.11607, 2019. [在线]. 可访问: http://arxiv.org/abs/1911.11607

[39] V. Balcer 和 S. P. Vadhan, “有限计算机上的差分隐私,” 在第九届理论计算机科学创新会议 (ITCS 2018), 系列LIPIcs, A. R. Karlin 编辑, 卷94. Schloss Dagstuhl - Leibniz-Zentrum für Informatik, 2018, 第43:1-43:21页. [在线]. 可访问: https://doi.org/10.4230/LIPIcs.ITCS.2018.43

[40] P. Kairouz, Z. Liu, 和 T. Steinke, “用于联邦学习的安全聚合的分布式离散高斯机制,” 在第38届国际机器学习会议 (ICML 2021) 论文集, 2021年7月18-24日, 虚拟活动, 系列Proceedings of Machine Learning Research, M. Meila 和 T. Zhang 编辑, 卷139. PMLR, 2021, 第5201-5212页. [在线]. 可访问: http://proceedings.mlr.press/v139/kairouz21a.html

[41] J. V. Cleemput, B. Coppens, 和 B. De Sutter, “现代x86处理器上时间攻击的编译器缓解措施,” ACM Trans. Archit. Code Optim., 卷8, 期4, 2012年1月. [在线]. 可访问: https://doi.org/10.1145/2086696.2086702

[42] M. Wu, S. Guo, P. Schaumont, 和 C. Wang, “通过程序修复消除计时侧信道泄漏,” 在第27届ACM SIGSOFT国际软件测试与分析研讨会 (ISSTA 2018) 论文集. 纽约, NY, USA: 计算机协会, 2018, 第15-26页. [在线]. 可访问: https://doi.org/10.1145/3213846.3213851

[43] A. Askarov, D. Zhang, 和 A. C. Myers, “预测黑盒缓解计时通道,” 在ACM计算机与通信安全会议 (CCS), 2010, 第297-307页.

[44] S. Sharma, A. Bag, 和 D. Mukhopadhyay, “基于硬件/软件协同设计的紧凑且安全的通用离散高斯采样器,” 在2020亚洲硬件导向安全与信任研讨会 (AsianHOST), 2020, 第1-6页.

[45] I. Gazeau, D. Miller, 和 C. Palamidessi, “在有限精度语义下保持差分隐私,” 在第11届编程语言和系统的定量方面国际研讨会 (QAPL 2013) 论文集, 意大利罗马, 2013年3月23-24日, 系列EPTCS, L. Bortolussi 和 H. Wiklicky 编辑, 卷117, 2013, 第1-18页. [在线]. 可访问: https://doi.org/10.4204/EPTCS.117.1

[46] C. Ilvento, “实现具有基2差分隐私的指数机制,” 在ACM计算机与通信安全会议 (CCS), 系列CCS '20. 纽约, NY, USA: 计算机协会, 2020, 第717-742页. [在线]. 可访问: https://doi.org/10.1145/3372297.3417269

[47] N. Holohan 和 S. Braghin, “差分隐私中的安全随机抽样,” CoRR, 卷abs/2107.10138, 2021. [在线]. 可访问: https://arxiv.org/abs/2107.10138

[48] J. Folláth, “格密码学中的高斯采样,” Tatra Mountains Mathematical Publications, 卷60, 期1, 第1-23页, 2015. [在线]. 可访问: https://doi.org/10.2478/tmmp-2014-0022

[49] V. Lyubashevsky, C. Peikert, 和 O. Regev, “理想格和环上的学习错误,” J. ACM, 卷60, 期6, 2013年11月. [在线]. 可访问: https://doi.org/10.1145/2535925

[50] L. Ducas, A. Durmus, T. Lepoint, 和 V. Lyubashevsky, “格签名和双峰高斯,” 在密码学进展 – CRYPTO 2013, R. Canetti 和 J. A. Garay 编辑. 柏林, Heidelberg: Springer Berlin Heidelberg, 2013, 第40-56页.

[51] L. Groot Bruinderink, A. Hülsing, T. Lange, 和 Y. Yarom, “刷新, 高斯, 重载 – 对BLISS格签名方案的缓存攻击,” 在加密硬件和嵌入式系统 – CHES 2016, B. Gierlichs 和 A. Y. Poschmann 编辑. 柏林, Heidelberg: Springer Berlin Heidelberg, 2016, 第323-345页.

[52] J. Howe, A. Khalid, C. Rafferty, F. Regazzoni, 和 M. O’Neill, “关于格密码学中实用的离散高斯采样器,” IEEE Transactions on Computers, 卷67, 第322-334页, 2018.

[53] D. Micciancio 和 M. Walter, “整数上的高斯采样: 高效, 通用, 常数时间,” Cryptology ePrint Archive, 报告2017/259, 2017, https://ia.cr/2017/259.

[54] A. Karmakar, S. S. Roy, O. Reparaz, F. Vercauteren, 和 I. Verbauwhede, “常数时间离散高斯采样,” IEEE Transactions on Computers, 卷67, 期11, 第1561-1571页, 2018.

[55] D. Lee, J. D. Villasenor, W. Luk, 和 P. H. W. Leong, “使用Box-Muller方法的硬件高斯噪声生成器及其误差分析,” IEEE Trans. Computers, 卷55, 期6, 第659-671页, 2006. [在线]. 可访问: https://doi.org/10.1109/TC.2006.81

### 附录

**A. Box-Muller 方法**

Box-Muller 方法 [55] 是一种从均匀分布的随机值生成标准正态分布样本的计算方法。其操作步骤如下：
1. 选择独立的均匀随机值 x1 和 x2。
2. 设置 r2 ← −2 ln x1 和 Θ ← 2πx2。
3. 返回 s1 ← r cos(Θ)。

此过程可以生成两个独立的正态样本：s1（如上所述）和 s2 ← r sin(Θ)。

**B. DP 梯度计算**

现在我们回顾如何为 DP-SGD 机制确定 f 和 ∆f。

\[ f(B) = \frac{1}{S} \sum_{i=1}^{S} g(b_i) \]

其中 B = [b1, b2, ..., bS]，bi 是 B 中的一个记录，g 计算每个记录的梯度，并根据裁剪范数 L 进行裁剪。注意，由于模型有 d = 26,010 个参数，并且每个批次都用于更新所有参数，因此 f(B) ∈ Rd 包含每个参数的梯度。

**a) 敏感性分析**: DP-SGD 的敏感性是任意一对 f(B) 和 f(B') 之间的最大 L2 距离。裁剪范数 L 决定了任何记录梯度的最大 L2 范数。因此，对于任何 f(B) 和 f(B')，我们有：

\[
\| f(B') - f(B) \|_2 \leq \frac{1}{S} \| g(b_c) - g(b_r) \|_2 \leq \frac{1}{S} (\| g(b_c) \|_2 + \| g(b_r) \|_2) \leq \frac{2L}{S}
\]

其中 bc 指的是金丝雀记录，br 指的是被 bc 替换的记录。由于 L = 1 且 S = 64，f 的敏感性为 1/32。

DP-SGD 然后通过以下方式计算：

\[
y = f(B) + \frac{1}{S} Z
\]

其中 Z = [Z1, ..., Zd] i.i.d.∼ N(0, σ^2L^2)，y ∈ Rd，Gauss pytorch 用于从 N 中抽取噪声。即使某些记录与其他批次中的记录有很大不同（例如，像 DiﬀLabelCanary 中使用的金丝雀），其梯度也会被裁剪到 L。

**C. DP-SGD 离散化**

在第八章-A节中，我们通过离散化梯度 g ∈ Rd 来实现 DP-SGD，如 [40] 所述，他们在联邦学习设置中使用离散高斯来训练模型。该方法步骤如下：
1. 根据裁剪范数 L 裁剪 g，g' = g × min{1, L/||g||2}。
2. 用离散化参数 1/γ 对 g' 进行缩放，以便可以在更细的网格 γZd 上进行离散化。然后将每个坐标随机舍入到最近的整数，z = Roundγ(g') 使得 z ∈ Zd。
3. 令 G ∈ Zd 由 d 个独立样本组成，这些样本来自离散高斯 NZ(0, σ^2/γ^2)。
4. 将离散噪声添加到 z 并取消离散化，z' = (z + G) × γ。

其中 Roundγ 是带有离散化参数 γ 的条件随机舍入函数。有关 Roundγ 的详细信息，请参阅 [40]。

**D. 消融研究**

在这里，我们研究了攻击者做出猜测的速度（攻击率）以及这些猜测中有多少是正确的（攻击准确性）。为此，我们模拟了 q = 0 和 q' = c 的设置，并测试了两个 c 值：1 和 10，这意味着底层函数的敏感性 ∆ 为 1 和 10。我们取 ɛ 的一系列值从 1 到 20，同时保持固定的 δ = 10^-5。表 II 显示，Gauss numpy 和 Gauss pytorch 实现具有不同的攻击率；然而，它们的攻击准确性始终至少为 89%。对于 Gauss go，我们观察到攻击率不受 ɛ 的显著影响（至少 76%），并且攻击准确性始终高于 99.99%。

---

希望这些修改能使您的文本更加清晰、连贯和专业。如果还有其他需要优化的地方，请告诉我！