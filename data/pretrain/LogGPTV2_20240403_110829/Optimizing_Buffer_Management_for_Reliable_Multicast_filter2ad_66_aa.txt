title:Optimizing Buffer Management for Reliable Multicast
author:Zhen Xiao and
Kenneth P. Birman and
Robbert van Renesse
Optimizing Buffer Management for Reliable Multicast
Zhen Xiao
Kenneth P. Birman, Robbert van Renesse
AT&T Labs – Research
Department of Computer Science
180 Park Avenue
Florham Park, N.J. 07932
PI:EMAIL
Cornell University
Ithaca, N.Y. 14853
fken, PI:EMAIL
Abstract
Reliable multicast delivery requires that a multicast
message be received by all members in a group. Hence
certain or all members need to buffer messages for
possible retransmissions. Designing an efﬁcient buffer
management algorithm is challenging in large multicast
groups where no member has complete group member-
ship information and the delivery latency to different
members could differ by orders of magnitude.
We propose an innovative two-phase buffering algo-
rithm, which explicitly addresses variations in delivery
latency seen in large multicast groups. The algorithm
effectively reduces buffer requirements by adaptively al-
locating buffer space to messages most needed in the
system and by spreading the load of buffering among
all members in the group. Simulation and experimental
results demonstrate that the algorithm has good perfor-
mance.
Keywords: reliable multicast, buffer management, error re-
covery, randomization, scalability
1 Introduction
Multicast is an efﬁcient way for disseminating data
to a large group. Many emerging multicast applications
require reliability guarantees not provided by the IP mul-
ticast protocol [4]. Providing reliable multicast service
on a large scale requires an efﬁcient error recovery algo-
rithm. It has been shown that putting the responsibility
of error recovery entirely on the sender can lead to a
message implosion problem [7, 13]. Consequently, sev-
eral reliable multicast protocols adopt a distributed error
recovery approach which allows certain or all members
This work was supported in part by DARPA/RADC under grant
number F30602-99-1-0532. Any opinions, ﬁndings, or recommenda-
tions presented in this paper are those of the authors and do not reﬂect
the ofﬁcial views of the funding agencies.
to retransmit packets lost by other members. For exam-
ple, in the SRM protocol [7], the Bimodal Multicast pro-
tocol [2], and the Randomized Reliable Multicast Proto-
col [16], retransmissions are performed by all members
in the group. In tree-based protocols like RMTP [13],
LBRRM [9], and TMTP [17], members are grouped into
local regions based on geographic proximity and a repair
server is selected in each region to perform retransmis-
sions.
If a member wants to perform retransmissions for
other members, it needs to buffer received messages
for some period of time. Determining which receivers
should buffer a message and for how long turns out to be
a difﬁcult problem. A conservative approach is to have
every member buffer a message until it has been received
by all current members in the group. However, this is in-
efﬁcient in a heterogeneous network where the delivery
latency to different members could differ by orders of
magnitude. Moreover, some reliable multicast protocols
adopt the IP multicast group delivery model in which re-
ceivers can join or leave a multicast session without no-
tifying other receivers. Consequently, no single receiver
has complete membership information about the group.
Buffer management algorithms in existing reliable
multicast protocols reﬂect widely different strategies for
deciding which members should buffer messages and
how long a message should be buffered. In some tree-
based protocols, a repair server buffers all data packets
it has received in the current multicast session. For ex-
ample, the RMTP protocol was originally designed for
multicast ﬁle transfer. In this protocol, a repair server
buffers the entire ﬁle in a secondary storage. This ap-
proach is feasible only if the size of data transmitted in
the current session has a reasonable limit. For long-lived
sessions or settings where repair servers lack space, the
amount of buffering could become impractically large.
The SRM protocol does not buffer packets at the
transport level. Rather, the application regenerates pack-
ets if necessary based on the concept of Application
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
Level Framing (ALF) [3]. This requires that the applica-
tion be designed according to the ALF principle and is
capable of reconstructing packets. Even so, buffer man-
agement at the application level remains a challenge.
Some reliable multicast protocols use a stability de-
tection algorithm to detect when a message has been re-
ceived by all members in the group and hence can be
safely discarded [8]. This requires members in the group
to exchange message history information periodically
about the set of messages they have received. In addi-
tion, a failure detection algorithm is needed to provide
current group membership information.
Previously we proposed a message buffering algo-
rithm for reliable multicast protocols that reduces the
amount of buffer requirement by buffering messages on
only a small set of members [12]. More speciﬁcally,
we assume that each member has an approximation of
the entire membership in the form of network addresses.
The approximation needs not be accurate, but it should
be of good enough quality that the probability of the
group being logically partitioned into disconnected sub-
groups is negligible. Upon receiving a message, a mem-
ber determines whether it should buffer the message us-
ing a hash function based on its network address and
the identiﬁer of the message. (A commonly used iden-
tiﬁer is [source address, sequence number].) If a mem-
ber missed a message, it uses the same hash function to
identify the set of members which should have buffered
the message and requests a retransmission from one of
them.
This algorithm makes no use of network topology
information. Consequently, it suffers from a tendency
to do error recovery over potentially high latency links
in the network. The probability of this happening and
the associated penalty in latency both increase with the
size of the group. Hence the protocol will have a scal-
ability problem in very large networks. It is desirable
to have an algorithm that selects receivers to buffer a
message based on geographic locations of different re-
ceivers. Unfortunately, our previous algorithm cannot
be easily modiﬁed to incorporate such information. The
work described here was motivated by this observation.
In this paper, we report our work on optimizing buffer
requirements for a randomized reliable multicast pro-
tocol called RRMP. The error recovery algorithm in
RRMP combines our previous work on randomized er-
ror recovery in Bimodal Multicast [2] and hierarchical
error recovery similar to that employed by tree-based
protocols.
Its buffer management extends our previ-
ous work on buffer optimization by proposing an inno-
vative two-phase buffering algorithm that explicitly ad-
dresses the variances in delivery latency for large multi-
cast groups. The algorithm reduces buffer requirements
The rest of the paper is organized as follows.
by adaptively allocating buffer space to messages most
needed in the system and by spreading the load of buffer-
ing among all members in the group. Unlike stability
detection protocols, the algorithm does not require peri-
odic exchange of messages and has low trafﬁc overhead.
In
Section 2 we brieﬂy describe the error recovery algo-
rithm in RRMP because it is closely related to the work
reported here. A complete description can be found
in [16]. Readers already familiar with the protocol can
proceed directly to Section 3, where we describe the de-
tails of our buffer management algorithm. Sections 4
and 5 evaluate its performance using simulation and ex-
periments. Limitations of the algorithm are presented in
Section 6. Section 8 concludes.
2 A Randomized Error Recovery Algo-
rithm
The RRMP protocol is designed for multicast appli-
cations with only one sender. We assume that receivers
are grouped into local regions based on their geographic
locations and that different regions are organized into a
hierarchy according to their distance from the sender.
This is called the error recovery hierarchy. Figure 1
shows an example of a hierarchy where the whole group
is divided into three local regions. We deﬁne the parent
region of a receiver as its least upstream region in the hi-
erarchy. For example, in Figure 1, region 1 is the parent
region for all receivers in region 2. If a receiver is in the
same region as the sender, then it has no parent region.
Each receiver maintains group membership knowl-
edge about other receivers in its region as well as re-
ceivers in its parent region. This is achieved by peri-
odic exchanges of session messages among all members
in a group. We adopt an idea from the scalable ses-
sion message protocol [14] in SRM which divides ses-
sion messages into two categories: local session mes-
sages and global session messages. Local session mes-
sages are multicasts restricted within a local region and
global session messages are multicasts that reach the en-
tire group. Session messages are also used to synchro-
nize state among receivers and to help a receiver detect
the loss of the last message in a burst, an idea previ-
ously used in the SRM protocol. In [16] we describe an
algorithm to construct the error recovery hierarchy and
to provide the required group membership knowledge at
each receiver.
In RRMP, the responsibility of error recovery is dis-
tributed among all members in the group. Its error re-
covery algorithm consists of two phases executed con-
currently: a local recovery phase and a remote recovery
phase. In the local recovery phase, when a receiver  de-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
s
Region 1
Region 2
Region 3
Router
Receiver
s
Sender
Figure 1. Local regions in a hierarchical
structure
tects a message loss, it selects a receiver  uniformly at
random from all receivers in its local region and sends a
request to .  also sets a timer according to its estimated
round trip time to . (Round trip time measurements are
described in [16].) Upon receiving ’s request,  checks
whether it has the message. If so, it sends the message
to . Otherwise it ignores the request. If  does not re-
ceive a copy of the message when its timer expires, it
randomly selects another receiver in its region and re-
peats the above process. As long as at least one local
receiver has the message,  is eventually able to recover
the lost message.
In the remote recovery phase, when a receiver  de-
tects a message loss, it randomly chooses a remote re-
ceiver  in its parent region and, with a small proba-
bility, sends a request to . This probability is chosen
so that the expected number of remote requests sent by
all receivers in the region is a constant (cid:21).  also sets
a timer according to its estimated round trip time to .
This timer is set by any receiver missing a message, re-
gardless whether it actually sent out a request or not. If
 does not receive a copy of the message when its timer
expires, it randomly selects another receiver in its parent
region and repeats the above process.
Upon receiving a request from a remote receiver ,
 checks whether it has the requested message. If so, it
sends the message to . Otherwise,  missed the mes-
sage as well. In this case,  records “member  is wait-
ing for the message”. When  later receives a copy of
the message, it relays the message to . When  re-
ceives a repair message from a remote member, it checks
whether the message is a duplicate. If not,  multicasts
the message in its local region so that other members
sharing the loss can receive the message.
The two phases described above, local recovery and
remote recovery, are executed concurrently when a re-
ceiver detects a message loss. If a receiver has no parent
region, its remote recovery phase does nothing.
3 Optimizing Buffer Management
As described in the previous section,
the RRMP
protocol distributes the responsibility of error recovery
among all members in a group. Hence every member
needs to decide how long a message should be buffered
for possible retransmissions. The problem is that this
involves a trade-off with error recovery latency.
If a
member discards a message and later receives a retrans-
mission request for that message, it will be unable to
answer the request. Due to the randomized nature of
our error recovery algorithm, this does not necessarily
compromise the correctness of the protocol because an-
other request will be sent to a randomly chosen member
upon timeout. As long as some member still buffers the
message, the loss can be recovered eventually. How-
ever, error recovery latency is increased because more
requests were needed to repair the loss. The problem is
even more complicated in a wide area network where the
latency between two regions can be signiﬁcantly higher
than the latency within a region. Since a member can
receive a request either from a local member or from a
remote member, it is difﬁcult to determine how long a
message should be buffered for potential requests.
In order to reduce buffer requirements effectively
while minimizing its impact on recovery latency, RRMP
adopts an innovative two-phase buffering scheme:
feedback-based short-term buffering and randomized
long-term buffering. When a message is ﬁrst introduced
into the system, every member that receives the message
buffers it for a short period of time in order to satisfy lo-
cal retransmission requests. Later when the message has
been received by almost all members in a region, only a
small subset of members in this region continue to buffer
the message. The rest of the section describes the details
of our scheme.
3.1 Feedback-based Short-term Buffering
First we investigate how long a member should buffer
a message for local retransmission requests. Since the
outcome of the initial IP multicast for each message can
be different, it is undesirable to buffer every message
for the same amount of time. For example, if only a
small fraction of members in a region have received a
message during the initial IP multicast, these members
should buffer the message for a long period of time in
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
order to satisfy local requests from other members. In
contrast, if almost all members have received the mes-
sage during the initial multicast, then the message can
be discarded quickly. Ideally, we want to allocate buffer
space to messages most needed in the system.
In RRMP, the buffering time for a message is based
on an estimation of how many members in the region
have received the message. One way to estimate this
information is to let all members periodically exchange
message history information about the set of messages
they have received, an idea previously used in some sta-
bility detection protocols [8]. Here we propose a dif-
ferent scheme in which a member estimates this infor-
mation based on the history of retransmission requests
it has received. Recall that in RRMP every member
missing a message sends local requests to randomly se-
lected members in its region. Hence the likelihood that a
member receives a request increases with the number of
members missing the message. More formally, let  be
the size of a region and  be the percentage of members
in this region missing a message. The probability that a
member will not receive any request is:
1  
1
   1

As  ! 1, this probability can be approximated by
e , which decreases exponentially with . Conse-
quently, if a member has not received any request af-
ter a sufﬁciently long period of time, it can conclude
with high conﬁdence that almost all members in the re-
gion have received the message. Based on this observa-
tion, we design a feedback-based scheme for short-term
buffering: when a member receives a message, it buffers
the message until no request for this message has been
received for a time interval T . Such a message is called
an idle message and T is called the idle threshold. The
choice of T depends on the maximum round trip time
within a region and the conﬁdence interval. We call this
a feedback-based scheme because a member uses the re-
transmission requests it received as feedback to estimate
how many members in the region still miss the message.
Unlike stability detection protocols, our scheme does not
introduce extra trafﬁc into the system.
3.2 Randomized Long-term Buffering
After a message has become idle, a member may de-
cide to discard it. However, due to the randomized na-
ture of the algorithm, it is possible that a message is still
missing at some receivers but has become idle every-
where else. These unlucky receivers will not be able to
recover the loss if all other members have decided to dis-
card the message. Moreover, since inter-region latency
can be much larger than intra-region latency, a member
may receive a remote request from a downstream mem-
ber asking for a message which has become idle at all
members in the region.
RRMP addresses this problem by providing long-
term buffering for an idle message at a small subset of
receivers in each region. The set of long-term buffer-
ers are chosen randomly from all members in a region.
More speciﬁcally, when a member detects that a mes-
sage has become idle, it makes a random choice to be-
come a long-term bufferer with probability  .  is cho-
sen so that the expected number of long-term buffer-
ers in the region is a constant C. For a region with
 members, probability theory shows that the number
of long-term bufferers has a binomial distribution with
parameters  and  [5]. As  ! 1,  ! 0 and
 ! C. Hence for large regions the distribution can
be approximated by a Poisson distribution with param-
eter C. (In [16] we applied a similar technique to an-
alyze the number of remote requests sent when an en-
tire region missed a message.) The probability that k
members buffer an idle message is e C C k
k! . Figure 2
shows how the distribution changes with different val-
ues of C. The choice of C reﬂects a trade-off between
buffer requirements and recovery latency. With large C
more members buffer an idle message, and hence an un-
lucky receiver in the previous scenario will recover the
loss faster. On the other hand, small C reduces buffer re-
quirements but may lead to longer recovery latency. In
particular, it is possible that an idle message is buffered
nowhere due to randomization. The probability of this
happening decreases exponentially with C as shown in
Figure 3. When C = 6, for example, the probability is
only 0:25. (This is the probability that no receiver in
a region buffers a message in its long-term buffer. It is
not the probability that a receiver will miss a message.
For example, if the receiver gets the message during the
initial multicast, it will not need any error recovery at
all.)
When the sender multicasts a stream of messages, the
load of long-term buffering is spread evenly among all
members in a region. This is in contrast to some tree-
based protocols where a repair server bears the entire
burden of buffering messages for a local region. Even-
tually even a long-term bufferer may decide to discard
an idle message if the message has not been used for
such a long time that it is highly unlikely any member
may still need it.