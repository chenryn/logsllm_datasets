TAP action. The refinement proof implies SRE, which was proven
on the TAP, also holds for for our models of SGX and Sanctum.
5.1 Refinement Methodology
Let Impl = ⟨ΣL, ;L, initL⟩ be a transition system with states ΣL,
transition relation ;L and initial state initL. We say that Impl
refines TAP, or equivalently TAP simulates Impl, if there exists a
simulation relation R ⊆ (ΣL × Σ) with the following property:
(cid:18)∀sj ∈ ΣL, sk ∈ ΣL, σj ∈ Σ.
(cid:16)
(sj , σj ) ∈ R ∧ sj ;L sk
(sk , σj ) ∈ R ∨ (∃σk ∈ Σ. σj ; σk ∧ (sk , σk ) ∈ R)
(init, initL ) ∈ R
(cid:17)(cid:19)
(7)
=⇒
∧
σj
R
sj
;
R
;L
σk
R
sk
Figure 5: Illustration of Stuttering Simulation
The condition states that for every pair of states (sj , σj ) (belong-
ing to Impl and TAP respectively) that are related by R, if Impl steps
from sj to sk, then either (i) the TAP takes no steps, and sk is related
to σj, or (ii) there exists a state σk of TAP such that σj steps to σk
and (sk , σk ) are related according to R. In addition, the initial states
of Impl and TAP must be related by R. This is illustrated in Fig-
ure 5. This corresponds to the notion of stuttering simulation [13],
and we require stuttering because a single invocation of launch
corresponds to several API calls in Sanctum and SGX.
Refinement states that every trace of Impl can be mapped using
relation R to a trace of TAP; effectively this means that TAP has a su-
perset of the behaviors of Impl. The security properties of the TAP
10
are hyperproperties, which in general, are not preserved by refine-
ment [19]. However, the properties we consider are 2-safety prop-
erties [77] that are variants of observational determinism [48, 62].
These are properties are preserved by refinement. Intuitively, refine-
ment asserts that any behavior observable on Impl has an equivalent
behavior on TAP via R, so any attacker advantage available on Impl
but not on TAP precludes refinement. The SRE properties proven
on the TAP therefore also hold for SGX and Sanctum, as we show
that these architectures (conditionally) refine the TAP.
5.2 MIT Sanctum Processor
Sanctum [21] is an open-source enclave platform that provides
strong confidentiality guarantees against privileged software at-
tackers. In addition to protecting enclave memory from direct obser-
vation and tampering, Sanctum protects against software attackers
that seek to observe an enclave’s memory access patterns.
5.2.1 Sanctum Overview. Sanctum implements enclaves via
a combination of hardware extensions to RISC-V [5] and trusted
software at the highest privilege level, called the security monitor.
Sanctum Hardware: Sanctum minimally extends Rocket Chip [4,
5], an open source reference implementation of the RISC-V ISA [81,
82]. Specifically, Sanctum hardware isolates physical addresses by
dividing system memory (DRAM) into regions, which use disjoint
last level cache sets, and allocating each region to an enclave ex-
clusively. Since enclaves have exclusive control over one or more
DRAM regions, there is no leakage of private memory access pat-
terns through the cache. An adversary cannot create a TLB entry
that maps its virtual address to an enclave’s private cache set.
Sanctum Monitor: The bulk of Sanctum’s logic is implemented
in a trusted security monitor. The monitor exclusively operates in
RISC-V’s machine mode, the highest privilege-level implemented
by the processor, and solely able to bypass virtual address transla-
tion. Monitor data structures maintain enclave and DRAM region
state. The monitor configures the Sanctum hardware to enforce
low-level invariants that comprise enclave access control policies.
For example, the monitor places an enclave’s page tables within
that enclave’s DRAM region, preventing the OS from monitoring an
enclave’s page table metadata to infer memory access patterns. The
monitor exposes an API for enclave operations, including measure-
ment. A trusted bootloader bootstraps the system, loads the monitor
and creates a chain of certificates authenticating the Sanctum chip
and the loaded security monitor.
5.2.2 Sanctum Model. Our Sanctum model combines the Sanc-
tum hardware and the reference security monitor, and includes
hardware registers, hardware operations, monitor data structures
and the monitor API. The hardware registers include the DRAM
bitmap which tracks ownership of DRAM regions, page table base
pointers, and special regions of memory allocated to the moni-
tor and for direct memory access (DMA). Hardware operations
modeled include page tables and address translation, and memory
instruction fetch, loads and stores. All monitor APIs are modeled.
5.2.3 Sanctum Model Refines TAP. The Sanctum refinement
proof is expressed in three parts.
1. Concrete MMU refines Abstract MMU: We constructed an
abstract model of a memory management unit (MMU). The abstract
MMU’s address translation is similar to the TAP; it is a single-level
map from virtual page numbers to permissions and physical page
numbers. In contrast, the concrete Sanctum MMU models a multi-
level page table walk in memory. We showed that the concrete
Sanctum MMU model refines the abstract MMU. We then used the
abstract MMU in modeling the Sanctum Monitor. This simplifies
the simulation relation between Sanctum and TAP.
2. Sanctum Simulates TAP: We showed that every Sanctum state
and every Sanctum operation, which includes both enclave and
adversary operations, can be mapped to a corresponding TAP op-
eration. For this, (i) we constructed a simulation relation between
Sanctum states and corresponding TAP states, and (ii) we con-
structed a Skolem function [72] mapping each Sanctum operation
to the corresponding TAP operation. We proved that for every pair
of states in the simulation relation, every Sanctum operation can be
mapped by the Skolem function to a corresponding TAP operation
such that the resultant states are also in the simulation relation.
3. Proof of Cache Partitioning: The Sanctum model instantiates
the function pa2set which maps physical addresses to cache sets.
We showed that the Sanctum API’s init_enclave operation and
the definition of pa2set together ensure that all Sanctum enclaves’
cache sets are partitioned, i.e. Equation 6 is satisfied.
5.3 Intel SGX
Intel Software Guard Extensions extend the Intel architecture to
enable execution of enclave programs.
5.3.1 SGX Overview. Unlike Sanctum, enclaves in SGX are im-
plemented in hardware (microcode), which provides an instruction
set extension [33] to create enclaves (ecreate), enter enclaves
(eenter), generate attested statements (ereport), etc. The SGX
processor dedicates a contiguous region of physical memory (called
the enclave page cache, or EPC), exclusively usable for storing en-
clave pages. While this provides confidentiality of enclave’s mem-
ory, SGX does not protect several side channel leaks such as cache
timing or page access patterns. The last level cache is shared be-
tween the enclave and the adversary, and adversary memory can
map to the same cache set as the enclave’s private address, allowing
the attacker to perform cache attacks [12, 49, 78, 84]. SGX also
allows the OS to examine the page tables that control the enclave’s
private memory, enabling the OS to read the accessed and dirty bits,
thus learning the enclave’s memory access pattern at the page-level
granularity. The OS also gets notified on page fault exceptions (as
part of demand paging), and this is another channel to learn the
enclave’s page-level memory access patterns [69, 83].
5.3.2 SGX Model. Similar to Sanctum, we use a formal model
of the SGX instruction set, following the approach of Moat [71],
which models the SGX platform at the level of abstraction presented
in the Intel Programmer Reference manual [33]. The model contains
ISA-level semantics of the SGX instructions. It includes hardware
state such as enclave page cache metadata (EPCM), page tables,
private core registers, etc. The model elides details such as attesta-
tion, hardware encryption of DRAM pages, and the cryptographic
protections (encryption, integrity, and freshness) of demand paging
and instead assumes several axioms about these features.
5.3.3 SGX Model Refines TAP. We attempted to prove that
SGX refines TAP, in that all SGX traces can be mapped to TAP traces.
However, we cannot prove SGX refinement unconditionally. We
show that refinement holds only when priv_mappings = false
(see Sec. 4.1.2). This is because SGX implements a mechanism for
the attacker (OS) to view page table entries, which contains the
accessed and dirty bits. As TAP confidentiality for Adversary MCP
only holds when priv_mappings = true, SGX is not secure against
MCP. Furthermore, the lack of cache partitioning also prevents us
from showing that Equation 6 holds, so SGX does not refine TAP
instantiated with Adversary MC. We are able to prove refinement
of TAP by SGX for the restricted adversary M. This shows SGX
provides similar guarantees to Sanctum, except for leakage through
the cache and page table side-channels.
6 VERIFICATION RESULTS
This section discusses our models and machine-checked proofs. Our
models of the TAP, Intel SGX and MIT Sanctum are constructed
using the BoogiePL [7, 24] intermediate verification language. Boo-
giePL programs can be annotated with assertions, loop invariants
and pre-/post-conditions for procedures. The validity of these an-
notations are checked using the Boogie Verification Condition Gen-
erator [7], which in turn uses the Z3 SMT solver [23].
Procedure pre-/post-conditions enable modular verification us-
ing Boogie. For example, we specify the behavior of each TAP
operation using pre- and post-conditions and verify that the im-
plementation of these procedures satisfies these post-conditions.
Once the post-conditions are verified, the TAP’s proofs of integrity,
confidentiality and secure measurement can soundly ignore the
implementation and only reason about the pre- and post-conditions
of these operations.
6.1 BoogiePL Model Construction
Description
Size
Verif.
Time (s)
TAP
Integrity
Measurement
Confidentiality
MMU Model
MMU Refinement
Sanctum
Sanctum Refinement
SGX
SGX Refinement
Total
5
26
6
194
7
8
1
11
-
2
260
Table 4: BoogiePL Models and Verification Results
#ln
1752
985
800
1388
739
216
780
548
1526
351
9085
#an
204
145
100
200
68
38
44
94
4
38
935
#pr
22
12
6
8
9
3
23
12
36
10
141
#fn
49
13
3
-
13
2
321
3
113
1
518
Table 4 shows the approximate size of each of our models. #pr,
#fn, #an and #ln refers to the number of procedures, functions,
annotations and lines of code, respectively. Annotations refer to
the number of loop invariants, assertions, assumptions, pre- and
11
post-conditions that we manually specify. While Boogie can infer
discharge some assertions automatically, we found that we had to
manually specify 935 annotations before it accepted our proofs.
The rows TAP, MMU Model, Sanctum and SGX correspond to
models of the functionality of the TAP, the Sanctum MMU, Sanctum,
and SGX, respectively. The other rows correspond to our proofs
of SRE and refinement. In total, the models are about 4800 lines of
code while the proofs form the remaining ≈ 4300 lines of code. A
significant part of the effort in developing the proofs was finding
the correct inductive invariants to help Boogie prove the properties.
BoogiePL can only verify safety properties. But many of our the-
orems involve hyperproperties [19]. We used the self-composition
construction [8, 77] to convert these into safety properties. Boo-
giePL is also incapable of verifying properties involving alternating
nested quantifiers, for example, ∀x . ∃y. ϕ (x, y). We Skolemized [72]
such properties to take the form: ∀x . ∀y .(y = f (x )) =⇒ ϕ (x, y);
f (x ) is called a Skolem function and must be manually specified.
6.2 Verification Results
Table 4 lists the total time taken by Boogie/Z3 to check validity of all
the manually specified annotations — by verifying the annotations,
we omit them from the trusted computing base, which only includes
the Boogie/Z3 theorem prover. The verification times for the TAP,
MMU Model and Sanctum rows is for proving that procedures in
these models satisfy their post conditions, which specify behavior
and system invariants. The verification times for the remaining
rows is the time taken to prove the SRE properties and refinement.
The total computation time in checking validity of the proofs once
the correct annotations are specified is only a few minutes.
7 DISCUSSION
We argue that TAP-based verification of enclave platforms is more
than just a set of proofs of correctness for our models of Intel SGX
and MIT Sanctum. The TAP serves as a specification of primitives
for enclave execution, and is designed to be extensible towards