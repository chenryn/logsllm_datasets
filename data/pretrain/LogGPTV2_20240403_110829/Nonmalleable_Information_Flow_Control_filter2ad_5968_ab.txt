### Adversarial and Secret Inputs in Information Flow

For an adversarial input from a high-integrity (H) source, the secret input must also be of low integrity (i.e., its label should be H→). If the input is indeed of low integrity, it must be endorsed to allow declassification. As in previous examples, endorsing high-confidentiality information can enable potential exploits.

### 3. Background

We explore nonmalleable information flow within the context of a simplified version of FLAM [4]. Below, we provide some background on FLAM, which offers a unified model for reasoning about both information flow and authorization. Unlike in earlier models, principals and information flow labels in FLAM are drawn from the same set \( L \).

- **Interpretation of Labels and Principals:**
  - A label interpreted as a principal represents the least powerful principal trusted to enforce that label.
  - A principal interpreted as a label represents the strongest information security policy that the principal is trusted to enforce.
  - Elements of \( L \) are referred to as principals or labels, depending on whether the context is authorization or information flow.

- **Confidentiality and Integrity:**
  - Labels (and principals) have both confidentiality and integrity aspects. A label \( \ell \) can be projected to capture just its confidentiality (\( \ell \rightarrow \)) and integrity (\( \ell \leftarrow \)) aspects.

- **Orderings:**
  - **Information Flow Ordering (⊑):** Describes secure information flows in the direction of increasing confidentiality and decreasing integrity. We read \( \ell \sqsubseteq \ell' \) as “\( \ell \) flows to \( \ell' \)”, meaning \( \ell' \) specifies a policy at least as restrictive as \( \ell \).
  - **Trust Ordering (≽):** Corresponds to increasing trustedness and privilege, with higher confidentiality and integrity. We read \( p \succeq q \) as “\( p \) acts for \( q \)”, meaning \( q \) delegates to \( p \).

- **Lattices:**
  - Both orderings define lattices over \( L \), with the least trusted and least powerful principal being \( \bot \) and the most trusted and powerful principal being \( \top \).
  - **Meet and Join Operations:**
    - Principal \( p \wedge q \) is the least powerful principal that can act for both \( p \) and \( q \).
    - Principal \( p \vee q \) can act for all principals that both \( p \) and \( q \) can act for.
  - The least element in the information flow ordering is \( \top \leftarrow \) (maximal integrity, minimal confidentiality), and the greatest element is \( \top \rightarrow \) (minimal integrity, maximal confidentiality).

- **Normal Form:**
  - Any principal (label) can be expressed in the normal form \( p \rightarrow \wedge q \leftarrow \), where \( p \) and \( q \) are CNF formulas over atomic principals. This allows us to decompose decisions about lattice ordering into separate questions regarding the integrity component (\( p \)) and the confidentiality component (\( q \)).

- **Voice of a Label:**
  - FLAM introduces the concept of the voice of a label (principal) \( \ell \), written \( \nabla(\ell) \). For a normal-form label \( \ell = p \rightarrow \wedge q \leftarrow \), the voice is defined as \( \nabla(p \rightarrow \wedge q \leftarrow) \triangleq p \leftarrow \). The voice represents the minimum integrity needed to securely declassify data constrained by that label, ensuring robust declassification.

- **FLAC and NMIFC:**
  - The Flow-Limited Authorization Calculus (FLAC) [5] embeds a simplified version of the FLAM proof system into a core language for enforcing secure authorization and information flow. FLAC extends the Dependency Core Calculus (DCC) [1, 3] with types containing FLAM labels.
  - NMIFC (NonMalleable Information Flow Calculus) enforces security policies by performing computation in a monadic context. Like FLAC, NMIFC includes a program-counter label \( \text{pc} \). For an ordinary value \( v \), the monadic term \( (\eta_\ell v) \) signifies that value with the information flow label \( \ell \). If \( v \) has type \( \tau \), the term \( (\eta_\ell v) \) has type \( \ell \text{ says } \tau \), capturing the confidentiality and integrity of the information.
  - NMIFC does not support dynamic delegation of authority. Atomic principals define \( L \) by statically delegating their authority to arbitrary conjunctions and disjunctions of other principals. Traditional declassification and endorsement operations, decl and endorse, are included.

### 4. Enforcing Nonmalleability

Multiple prior security-typed languages, both functional [5] and imperative [6, 11, 27], aim to allow some form of secure downgrading. These languages place no restriction on the confidentiality of endorsed data or the context in which an endorsement occurs, making them permissive. As a result, all three insecure examples from Section 2 type-check in these languages.

#### 4.1 Robust Declassification

Robust declassification prevents adversaries from using declassifications in the program to release unintended information. The adversary is assumed to observe some state of the system with a sufficiently low confidentiality label and modify some state with a sufficiently low integrity label. Semantically, robust declassification ensures that if the attacker cannot learn a secret with one attack, no other attack will cause it to be revealed [27, 46].

- **Enforcement:**
  - Prior security-typed languages enforce robust declassification using integrity constraints. In FLAM, this is achieved using the voice operator \( \nabla \). However, when declassification is expressed as a programming-language operation, it is convenient to define a new operator on labels, mapping from integrity to confidentiality.
  - **Definition 4.1 (Principal View):** Let \( \ell = p \rightarrow \wedge q \leftarrow \) be a FLAM label (principal) in normal form. The view of \( \ell \), written \( \Delta(\ell) \), is defined as \( \Delta(p \rightarrow \wedge q \leftarrow) \triangleq q \rightarrow \). When the confidentiality of a label \( \ell \) lies above the view of its own integrity, declassification may give adversaries the opportunity to subvert the declassification to release information.

- **Graphical Representation:**
  - Figure 3 illustrates the lattice of FLAM labels, showing the confidentiality and integrity axes. A given label \( \ell \) is a point in this diagram, and the set of labels sharing the same confidentiality or integrity correspond to lines. Given the integrity \( \ell \leftarrow \) of the label \( \ell \), the view of that integrity, \( \Delta(\ell \leftarrow) \), defines a region of information that is too confidential to be declassified.

- **Correspondence:**
  - The view operator corresponds to the writers-to-readers operator used by Chong and Myers [11] in the DLM. This idea is generalized here to the more expressive labels of FLAM.

#### 4.2 Transparent Endorsement

The key insight is that endorsement should be restricted in a manner dual to robust declassification. Declassification (reducing confidentiality) requires a minimum integrity, so endorsement (raising integrity) should require a maximum confidentiality. Intuitively, if a principal could write data it cannot read, such an "opaque write" is unsafe to endorse.

- **Voice Operator:**
  - The voice operator \( \nabla \) suffices to express this restriction. In Figure 4, endorsing information with confidentiality \( \ell \rightarrow \) maps to a corresponding integrity level \( \nabla(\ell \rightarrow) \), defining a minimal integrity level that \( \ell \) must have to be endorsed. If \( \ell \) lies below this boundary, its endorsement is transparent; if it lies above, endorsement is opaque and insecure.

- **Graphical Representation:**
  - Figure 4 shows the gray shaded region representing information that \( \nabla(\ell \rightarrow) \) does not trust and may have been created by an opaque write. It is thus unsafe to endorse with \( \ell \)'s confidentiality.

### 5. A Core Language: NMIFC

We now describe the NonMalleable Information Flow Calculus (NMIFC), a new core language modeled on DCC and FLAC, allowing downgrading but in a more constrained manner to provide stronger semantic guarantees. NMIFC incorporates the program-counter label \( \text{pc} \) of FLAC but eschews the more powerful assume mechanism in favor of traditional declassify and endorse operations.

- **Syntax:**
  - The full NMIFC is a small extension of Polymorphic DCC [1]. In Figure 5, we present the core syntax, leaving other features such as sums, pairs, and polymorphism to Appendix A. NMIFC supports downgrading and models it as an effect, tracking what information influences control flow to constrain downgrading effects appropriately. Like FLAC, NMIFC adds \( \text{pc} \) labels to lambda terms and types.

- **Operational Semantics:**
  - The core semantics of NMIFC are mostly standard, but additional information about evaluation is needed to identify whether information is available to an attacker during evaluation, even if discarded. The NMIFC semantics, presented in Figure 6, maintain a trace \( t \) of events. An event is emitted whenever a new protected value is created, and whenever a declassification or endorsement occurs. These events track the observations or influence an attacker may have during a run of an NMIFC program.

- **Type System:**
  - The NMIFC protection relation, presented in Figure 7, defines how types relate to information flow policies. A type \( \tau \) protects the confidentiality and integrity of \( \ell \) if \( \vdash \ell \sqsubseteq \tau \). Unlike in DCC and FLAC, NMIFC does not support dynamic delegation of authority, and atomic principals define \( L \) by statically delegating their authority to arbitrary conjunctions and disjunctions of other principals.