# Meltdown漏洞利用解读（Part 1）：基础篇
##### 译文声明
本文为翻译文章，原文链接：[https://www.sec-consult.com/](https://www.sec-consult.com/)。译文仅供参考，具体内容及含义以原文为准。

## 前言
自“Meltdown”和“Spectre”这两个术语出现以来，已经过去了一段时间。许多人认为它们是近年来最严重的两个安全问题。媒体和IT安全社区普遍认为这是近期遇到的最严重且最危险的安全威胁。

对于大多数人——特别是非IT行业从业者而言，Meltdown和Spectre的工作原理仍然是个谜。即使是对IT专业人士来说，仍有一些问题未得到解答。本文将主要探讨以下问题：
- 如何在技术层面上实施Meltdown攻击？
- 在不深入了解现代CPU架构所有细节的情况下，如何实现攻击？

我们将通过一个常见的储蓄银行作为例子来说明，这是一个大家都能理解的概念。本文不会涉及以下内容，因为这些已经在其他文章中进行了广泛讨论：
1. Spectre：这将在本系列的另一篇文章中详细讨论。
2. 应对措施：如何保护受影响的系统？
3. 攻击者如何利用企业或个人环境中的漏洞？
4. 现有对策如何影响系统更新？

## 万恶之源 – 问题源于何处？
首先，需要明确的是，Meltdown是基于硬件（具体来说是处理器或CPU）的设计缺陷，而非软件问题。这一设计缺陷存在于自1995年以来生产的处理器中，但直到最近才被发现并利用。

那么，究竟是哪里出了问题呢？为了理解Meltdown攻击，我们需要从以下几个看似不相关的问题入手：
1. 多任务处理
2. CPU与内存之间的性能差距
3. 优化技术
4. 侧信道攻击

### 多任务处理 – 为什么现代计算机可以同时处理多件事情？
大多数现代操作系统都在多任务模式下运行。这意味着虽然CPU一次只能执行一条指令，但用户期望计算机能够并行执行多个任务。实际上，这种并行性是通过CPU在毫秒级别内快速切换任务来模拟的，从而给人一种多个进程同时运行的错觉。

这种多任务功能的安全性依赖于处理器确保每个正在运行的进程完全隔离的假设。如果这一假设不成立，任何进程都可能访问其他进程的数据，导致严重的安全问题。例如，网页浏览器中的不可信代码可能会读取同一时间正在处理的敏感文件内容。在过去二十年中，处理器制造商一直依赖这种隔离假设进行生产。

### CPU与内存之间的性能差距 – CPU速度超过内存速度
另一个重要的话题是CPU与内存之间的速度差距。在现代计算机系统中，CPU负责处理基本指令和当前数据，而内存（RAM）则用于存储当前进程的所有指令和数据。随着时间的推移，现代CPU经历了巨大的性能提升，其工作频率远超内存的操作频率。这直接导致了性能瓶颈问题。

为了解决这个问题，CPU制造商引入了多种优化技术，包括：
- **无序执行**：一种智能CPU优化技术，用于预测下一步操作并提前获取所需数据。
- **缓存**：一种非常快速但容量较小的内存，用于临时存储数据。

无序执行技术会根据预测提前从内存中获取数据并存储在缓存中。如果预测正确且进程有权访问这些数据，则数据会被处理；否则，数据将被丢弃。这一过程对应用程序和操作系统是透明的，完全由硬件控制。

### 侧信道攻击介绍
这是Meltdown漏洞被攻击者滥用的根本原因。

到目前为止，上述内容似乎并不构成安全问题。然而，有两个关键问题出现了：
1. **从内存获取缓存而不先检查权限**：数据从内存中提取到缓存后，才会检查进程是否有权访问这些数据。
2. **不从缓存中删除数据**：即使权限检查失败，存储在缓存中的数据也不会立即清除。

这些问题导致了所谓的侧信道攻击，攻击者可以通过这种方式窃取有价值的信息。侧信道攻击在IT安全领域并不陌生，过去成功的攻击案例包括基于功耗、电磁辐射或系统性能时序波动的变化。例如，2008年3月，KeeLoq系统的加密过程通过高精度功耗测量设备被破解，直接影响了该系统的锁机制。

## 后记
如果你希望获得更详细的实战分析，请继续关注下一篇关于Meltdown机制的文章，我们将用一个简单的银行机构比喻来说明攻击过程：Meltdown – 利用分析（Part 2）：银行抢劫。敬请期待！

审核人：yiwang 编辑：边边