# Language-based Defenses Against Untrusted Browser Origins

## Authors
- Karthikeyan Bhargavan, INRIA Paris-Rocquencourt
- Antoine Delignat-Lavaud, INRIA Paris-Rocquencourt
- Sergio Maffeis, Imperial College London

## Abstract
This paper introduces new attacks and robust countermeasures for security-sensitive components, such as single sign-on (SSO) APIs and client-side cryptographic libraries, which must be safely deployed on untrusted web pages. We demonstrate how the failure to isolate these components can leave them vulnerable to attacks from both the hosting website and other components running on the same page. These attacks are not prevented by browser security mechanisms alone, as they arise from code interactions within the same origin. To mitigate these threats, we propose a combination of fine-grained component isolation at the JavaScript level with cryptographic mechanisms. We introduce Defensive JavaScript (DJS), a subset of the language that ensures the integrity of scripts even in hostile environments. We present a sound type system, a type inference tool, and build defensive libraries for cryptography and data encoding. Our solution's effectiveness is demonstrated through the implementation of several applications using defensive patterns that address our identified attacks. Additionally, we present a model extraction tool to analyze the security properties of our applications using a cryptographic protocol verifier.

## 1. Defensive Web Components
Web users increasingly store sensitive data on servers across the internet. This dispersion allows users to access their data from multiple devices and share it easily. However, concentrating sensitive data on servers makes them attractive targets for cyber-criminals, who use sophisticated browser-based attacks to steal user data.

To address these concerns, web applications now offer more control over data access using authorization protocols like OAuth. These security mechanisms are often implemented as JavaScript components embedded in any website, mediating a three-party interaction between the host website, the user (via the browser), and a server holding the sensitive data.

### Deployment Scenario
Figure 1 illustrates a typical deployment scenario. A website \( W \) wants to access sensitive user data stored on server \( S \). It embeds a JavaScript component provided by \( S \). When a user visits \( W \), the component authenticates the user and exposes an API, allowing \( W \) to access the userâ€™s data if the user has previously authorized \( W \) at \( S \). For authenticated users on authorized websites, the component holds a client-side secret, such as an access token or encryption key, to validate data requests and responses. The component disappears when the user leaves the website, preventing further access.

### Examples
- **Single Sign-On (SSO)**: Facebook provides a JavaScript component that websites like Pinterest can use to request the identity and social profile of a visiting user via an API.
- **Payment Processing APIs**: Google Checkout.
- **Password Managers**: LastPass.
- **Anti-CSRF Protections**: OWASP CSRF-Guard.
- **Client-Side Encryption Libraries**: Mega.

### Security Goals and Threats
Our goal is to design hardened JavaScript components that protect sensitive user data and long-term secrets from unauthorized parties. Despite the use of sophisticated protocols and cryptographic mechanisms, securing such components in a browser environment has proven challenging. We identify three main threats:
1. **Malicious Websites**: Components may be loaded into a malicious website pretending to be trusted.
2. **Script Interference**: On a trusted website, other scripts may modify JavaScript built-in objects, altering the component's behavior.
3. **Cross-Site Scripting (XSS) and Other Vulnerabilities**: Malicious content or vulnerabilities on the same domain or subdomain can compromise the component.

### Same Origin Policy (SOP)
Most browser security mechanisms, including HTML5 APIs, are based on the origin from which a webpage was loaded. SOP isolates JavaScript execution environments of frames and windows from different origins. However, frames from the same origin can directly access each other's variables and functions. SOP does not directly apply to our scenario since components run in the same origin as the host website. To use SOP, components must open new frames or windows on a separate origin, which is difficult to implement correctly.

### Our Proposal
We propose a language-based approach that complements SOP and protects scripts running in the same origin from each other. This enables a defense-in-depth strategy where the functionality and secrets of a component can be protected even if some page on the host origin is compromised.

#### Key Elements
- **DJS**: A defensive subset of JavaScript with a static type checker for writing security-critical components.
- **DJS Library**: A library written and typechecked in DJS, providing cryptographic and encoding functions.
- **DJS2PV**: A tool that analyzes the compositional security of a DJS component by translating it to the applied pi calculus for verification using ProVerif.
- **Script Server**: A verified server for distributing defensive scripts with session-specific encryption keys.

Our architecture relies on developers programming security-critical code in DJS, a well-defined restricted subset of JavaScript. In return, they obtain automated analysis and strong security guarantees. No restrictions are enforced on untrusted code. We use ProVerif, a standard protocol verification tool, to verify authentication and secrecy properties of the defensive components.

### Contributions
1. Identification of common concerns and new attacks on secure components in third-party websites.
2. Introduction of DJS, a defensive subset of JavaScript for programming security components.
3. Development of tools to verify JavaScript code as valid DJS and extract ProVerif models from DJS.
4. Definition of DJCL, a defensive crypto library with encoding and decoding utilities safe for use in untrusted JavaScript environments.
5. Identification of general patterns leveraging DJS and cryptography to enforce component isolation in the browser, and proposed fixes for broken web applications.

Supporting materials, including code, demos, and a technical report with proofs, are available online [11].

## 2. Attacks on Web Security Components
We survey a series of web security components and investigate their security. Table 1 presents our results, focusing on three categories: single sign-on buttons, password managers, and client-side encryption libraries.