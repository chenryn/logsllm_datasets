plaintext DSL involves relatively simple data types and operations, it is easy for the pro-
grammer to hand-write code to express a desired computation. By contrast, proper use of the
ciphertext DSL is signiﬁcantly more complicated—e.g., ciphertext types involve many more
129
parameters, and HE operations must be appropriately scheduled—so it is not intended for
human use (though nothing prevents this). Instead, it is the target language for ALCHEMY’s
plaintext-to-ciphertext compiler. As we will see, having a dedicated ciphertext DSL allows
for homomorphic computations to be operated upon in various useful ways beyond just
executing them, e.g., tracking noise growth or optimizing away redundant operations.
In addition to the DSLs themselves, ALCHEMY provides a variety of useful higher-
level functions and combinators that are written in the DSLs. These include “arithmetized”
versions of functions that are not natively supported by HE schemes, but can be expressed
relatively efﬁciently in terms of native operations. A particularly important example is
the function that “rounds” from Z2𝑘, the ring of integers modulo 2𝑘, to Z2. This function
is central to efﬁcient “boostrapping” algorithms for FHE and the related Learning With
Rounding problem [BPR12]. Efﬁcient arithmetizations are given in [AP13] and a closely
related algorithm from [GHS12a]). We give a different arithmetiziaton in section 6.3
(which is better for particular parameters), and provide an ALCHEMY implementation
in subsection 6.6.1.
Interpreters and compilers. ALCHEMY’s other main component is its collection of
composable interpreters for programs written in the DSLs. Each interpreter deﬁnes how
it acts on each relevant language component to perform a particular task. Some of the
interpreters are actually compilers that translate programs from one collection of DSL
components to another. Example interpreters in ALCHEMY include:
• a (metacircular) evaluator, which simply interprets the plaintext and ciphertext DSLs
using the corresponding Haskell and Λ∘𝜆 operations;
• various utility interprets that, e.g., “pretty print” DSL programs, or compute useful
metrics like program size, multiplicative depth, etc.;
• a diagnostic compiler that modiﬁes any ciphertext-DSL program to also log the noise
rate of every ciphertext it produces;
130
• and most signiﬁcantly, a compiler that transforms any program written in the plaintext
DSL to a corresponding homomorphic computation in the ciphertext DSL.
The plaintext-to-ciphertext compiler is the most substantial and nontrivial of the in-
terpreters, and is one of ALCHEMY’s central contributions. This compiler automatically
performs several important tasks that in all current HE systems must done manually by the
programmer. In particular, it:
• generates all necessary keys and auxiliary “hints” for ciphertext operations like
key-switching and ring-switching.
• properly schedules all necessary ciphertext maintenance operations like key-switching
(e.g., for “linearization” after homomorphic multiplication) and modulus-switching
(for noise management).
• statically infers, using compile-time type arithmetic, the approximate noise rates of
every ciphertext, and chooses an appropriate ciphertext modulus from a provided pool.
If any inferred noise rate is too small relative to the provided moduli, typechecking
fails with an informative error.
• generates encrypted inputs for the resulting homomorphic computation, with appro-
priate noise rates to ensure correct decryption of the ultimate encrypted output.
5.1.2 Example Usage
Here we give a few concrete examples of programs in the ALCHEMY DSLs, and the various
ways they can be interpreted and compiled. We start with the following very simple program:
ex1 = lam $ lam $ v0 *: (v0 +: v1)
The two calls to lam say that ex1 is a function of two inputs, which respectively bind the
De Bruijn-indexed variables v1, v0. (De Bruijn variables are numbered and bound from the
131
“inside out.”) The function represents addition of v0 and v1 using the DSL operator (+:),
followed by multiplication of the result by v0 using the DSL operator (*:).
The Haskell typechecker automatically infers the full type of ex1, which is:
(Lambda expr, Mul expr a, Add expr (PreMul expr a)) =>
expr e (PreMul expr a -> PreMul expr a -> a)
This type carries a great deal of important information; let us unpack its various components:
• First, the type is polymorphic in the type variables expr, a, and e. These type variables
can represent arbitrary Haskell types. . .
• . . . subject to the constraints (Lambda expr, ...), which say that expr must be able
to interpret the Lambda, Mul, and Add language components. The second arguments
of Mul and Add say that multiplication can produce a value of type a as the product
of two values of type PreMul expr a, and that we can add values of the latter type.
(The purpose of PreMul will be explained below, when we describe the plaintext-to-
ciphertext homomorphic compiler.)2
• Finally, expr e (PreMul expr a -> PreMul expr a -> a) means that ex1
represents a DSL function that takes two inputs of type PreMul expr a and outputs a
value of type a. The type argument e represents the expression’s environment, which
must hold the values of any unbound variables. Because v0 and v1 are bound by the
two lams, there are no unbound variables—the code is closed—so e is completely
unconstrained.
Because ex1 is polymorphic in expr, after writing it once we can interpret it in several
different ways by specializing expr to various concrete types. One simple interpreter is the
“pretty printer” P, which has easy implementations for all the requisite language components.
Its public interface
2As the reader may have guessed, Lambda introduces programmer-deﬁned functions and variables via lam,
v0, v1, etc., whereas Mul and Add respectively introduce the multiplication and addition operators *: and +:.
132
pprint :: P () a -> String
converts any closed P-expression to a string representing it. Calling pprint ex1 implicitly
specializes expr to P and the environment e to (), resulting in the following:3
pprint ex1
-- "(\v0 -> (\v1 -> ((mul v1) ((add v1) v0))))"
Another very simple interpreter is the metacircular evaluator E, which interprets all of the
language components using corresponding Haskell (or Λ∘𝜆) operations. Its public interface
eval :: E () a -> a
converts any closed DSL expression representing a value of type a into a Haskell value of
type a, as follows:
eval ex1
-- (Ring a) => a -> a -> a
eval ex1 7 11
-- 198
Because eval implicitly specializes expr to E, which itself deﬁnes PreMul E a = a, the
call to eval ex1 produces a polymorphic Haskell function of type a -> a -> a, for an
arbitrary Ring type a. The Ring constraint arises because the E interpreter uses Haskell’s
operators (+) and (*) to interpret Add and Mul. The eval ex1 7 11 call actually evaluates
the Haskell function, producing 11 · (11 + 7) = 198.
We stress that eval ex1 :: (Ring a) => a -> a -> a is polymorphic in a, so it can
be applied to elements of any plaintext ring, or even to ciphertexts from Λ∘𝜆’s SHE scheme
(both of which are Ring types). However, in the latter case ex1 lacks the extra ciphertext
3For convenience of implementation, the pretty printer indexes variables from the “outside in,” which is the
reverse of De Bruijn indexing; this accounts for the swapping of v0 and v1 in the pretty-printed code, relative
to the deﬁnition of ex1. Note that the two representations are equivalent.
133
“maintenace” operations, like relinearization and modulus-switching, that are needed in
more complex homomorphic computations. For these we use ALCHEMY’s homomorphic
compiler, described shortly.
Ring switching. Here we exhibit a small program that illustrates another important lan-
guage component, for “switching” from one cyclotomic ring to another. Ring-switching in
homomorphic encryption was developed and reﬁned in a series of works [BGV14; Gen+13;
AP13; CP16b], which showed its utility for tasks like “bootstrapping” and efﬁciently com-
puting a wide class of linear functions.
ex2 = linearCyc_ (decToCRT @F28 @F182) .:
linearCyc_ (decToCRT @F8 @F28)
Here decToCRT @F8 @F28 is a Haskell expression representing a certain linear function
from the 8th to the 28th cyclotomic ring, and similarly for decToCRT @F28 @F182. (The
exact linear functions do not matter here, and could be arbitrary.) The operator (.:) denotes
composition of DSL functions; the type checker enforces that the output type of the ﬁrst
function must equal the input type of the second.
The Haskell compiler automatically infers that ex2 has the following type (several
component types and constraints have been simpliﬁed or suppressed for readability):
ex2 :: (LinearCyc expr cycrep, ...) =>
expr env (cycrep F8 zp -> cycrep F182 zp)
This says that ex2 is a (closed) DSL function that is well-deﬁned for any interpreter expr
of the LinearCyc language component (which introduces linearCyc_). Essentially, the
function maps from cycrep F8 zp, which should represent the 8th cyclotomic ring modulo
some integer 𝑝, to cycrep F28 zp, which should represent the 28th cyclotomic ring
modulo 𝑝. The type cycrep is speciﬁed in the LinearCyc expr cycrep constraint, and
could be, e.g., the concrete Cyc type from Λ∘𝜆.
134
As with the previous example, we can pretty-print and evaluate ex2 “in the clear.” More
interesting is to homomorphically evaluate it on HE ciphertexts, using a special form of
key-switching as shown in [Gen+13] and subsection 4.3.6. For this we use ALCHEMY’s
homomorphic compiler.
Compiling to the ciphertext DSL. We now show how the above example programs,
which should now be thought of as computations on plaintexts, can be compiled into
programs that operate on HE ciphertexts to homomorphically compute the original programs
on the underlying plaintexts. The compiler is given by a data type PT2CT, whose public
interface is the Haskell function pt2ct (the signature is in subsection 5.5.1). In order to do
its job, the compiler needs to be given types that specify what ciphertext rings and moduli to
use. We deﬁne such types here:
type CTRingMap = [ (F8,F16), ... ]
type Zq1 = Zq $(mkModulus 34594561)
type Zq2 = Zq $(mkModulus 35642881)
...
type CTModuli
= [ Zq1, Zq2, ... ]
The type CTRingMap says that when the plaintext ring is the 8th cyclotomic, the ciphertext
ring should be the 16th cyclotomic, etc. The type Zq1 represents Z𝑞1, the ring of integers
modulo 𝑞1 = 34594561, and similarly for Zq2 etc. (The macro mkModulus represents its
argument as a type, which is also augmented with the number of “units of noise” the modulus
can hold; see below.)
Having deﬁned the needed types, we can now compile our plaintext-DSL programs to
get new ciphertext-DSL programs, which can in turn be handled by any suitable ciphertext-
DSL interpreter. One small subtlety is that because pt2ct automatically generates the
needed random keys and key-switch hints, it is necessarily monadic (i.e., it has side effects).
135
We therefore use Haskell’s “do notation” to invoke it with the above-deﬁned types on
plaintext-DSL program ex1, and then pretty-print the result:
do ct1  (\v1 ->
--
--
--
--
--
(((\v2 -> (\v3 ->
(modSwitch
(keySwitchQuad 
(modSwitch ((mul v3) v2))))))
((add v1) v0)) v1)))"
Despite the abundant parentheses, the structure of the program is not too hard to discern.
First, because this is a program in the ciphertext DSL, we should think of all the variables
as ciphertexts. In the “inner” layer, the variable v2 is bound to ((add v1) v0), and v3 is
bound to v1.4 These two ciphertexts are multiplied, resulting in a “quadratic” ciphertext.
This is modulus-switched to match the key-switching hint, then key-switched to a “linear”
ciphertext (using a “circularly” encrypted hint), then ﬁnally switched back to a modulus
corresponding to its inherent noise rate.
As another example, we can compile the ring-switching program ex2 = linearCyc_
(...) .: linearCyc_ (...), and print the resulting program:
do ct2 
4Note that both expressions are eligible for “inlining” using 𝛽-reduction; while our compiler does not
perform such optimizations at the DSL level, the Haskell compiler may do so. In any case, the performance cost
of not inlining is negligible when compared with homomorphic operations. One could add this optimization
by deﬁning a new interpreter which outputs a beta-reduced expression.
136
--
--
--
--
--
((\v0 ->
(modSwitch (tunnel  (modSwitch v0))))
((\v0 -> (modSwitch
(tunnel  (modSwitch v0))))
v0)))"
Again the structure is reasonably clear: the program takes a ciphertext as input, switches it
to the modulus of the “tunneling hint” that encodes the desired linear function, then switches
rings by “tunneling” with the hint (thereby homomorphically evaluating the linear function),
then switches back to an appropriate ciphertext modulus. The same cycle is repeated for the
next linear function. (As we shall see, some of the modulus-switches may turn out to be null
operations.)
Evaluating and logging. While it is nice to be able to see a representation of ciphertext-
DSL programs, we are more interested in the useful task of evaluating them to perform a
homomorphic computation on ciphertexts. Fortunately, this is extremely simple: just replace
pprint with eval in the above code! This specializes the (polymorphic) interpreter of the
ciphertext-DSL program to the evaluator E rather than the pretty-printer P.
In addition, for diagnostic purposes we may wish to log the “error rates” of the ciphertexts
as the homomorphic evaluation proceeds. (Recall that error rates must be kept small enough
so that in the end, decryption gives the correct plaintext output.) In ALCHEMY such logging
is very easy using the ErrorRateWriter interpreter, which transforms any ciphertext-DSL
program into an equivalent one that additionally logs the error rates of all intermediate
ciphertexts. The output program can then be evaluated (or printed, or sized, etc.) as usual.
For example:
do logct2
<- writeErrorRates ct2
inputCT <- encrypt inputPT
(result, log) = runWriter $ eval logct2 inputCT
137
print log
-- "Error rates:
-- ("modSwitch_Q539360641*Q537264001",6.8495e-7),
-- ("tunnel_Q539360641*Q537264001",3.3651e-6),
-- ("modSwitch_Q537264001",7.3408e-6),
-- ("modSwitch_Q537264001",7.3408e-6),
-- ("tunnel_Q537264001",1.8010e-4),
-- ("modSwitch_Q537264001",1.8010e-4)"
The log shows the error rates of the ciphertexts produced by each ciphertext-DSL operation
(which is also conveniently augmented by the ciphertext modulus of the result). We can
see that the ﬁrst tunnel operation increases the error rate by roughly 5x; the switch to
the smaller modulus increases the rate by roughly 2x; and the second tunnel operation
increases the rate by roughly 25x. (The other modSwitch operations do not actually change
the modulus, and are therefore null.)
5.1.3 ALCHEMY In The Real World
In this section we explain how ALCHEMY can be used in the context of an actual crypto-
graphic application. In a typical HE scenario, Alice would like Bob to perform a computation