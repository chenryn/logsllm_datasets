syscall side. Razzer [15] and KRACE [29] combines static analysis
and fuzzing to drive fuzzer towards most potential spots of data
race bugs. Though these techniques prove to be effective, one of the
fundamental reasons for their success is the interface specifications
that are manually implemented by security analysts, which is a
tedious process given the massive amount of driver code in kernel.
What’s worse, if the source code is not available, analysts usually
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea751Tool
Target
Requirements
Source Code
Trace
Specification
Infer Explicit
Dependence
Infer Implicit
Dependence
Coverage
Guided
Structure
Recovery
Constraint
Recovery
Techniques
DIFUZE[9]
HFL[16]
Moonshine[21]
p-joker[28]
IMF[14]
SyzGen
SE: Symbolic execution on multiple syscalls. DM: Data mining on traces. SM: Signature matching.
Android Driver
Linux Driver
Linux
MacOS Driver
MacOS
MacOS Driver
✗
SE
DM
✗
DM
✗
✗
✓
✗
✓
✓
✗
✗
✓
✗
✓
✗
✓
✓
✓
✗
✗
✗
DM+SM
✗
✗
✓
✗
✓
✓
✗
✓
✓
✗
✗
✓
✓
✓
✗
✗
✗
✓
✗
✓
✗
✓
✗
✓
Table 1: The comparison of recent fuzzing techniques on interface recovery.
resort to reverse engineering to recover the interface, which is
time-consuming and error-prone.
3 OVERVIEW
In this section, we first walk through a motivating example to
demonstrate our key observation from security analysts’ experience
on how to infer explicit dependence and refine templates iteratively
— which is crucial for developing specifications of good quality,
then position SyzGen in a bigger picture.
3.1 A Motivating Example
Fig. 2 presents some code excerpts adapted from the macOS driver
AppleUpstreamUserClientDriver in which both functions CloseLink()
and FlushLink() require an identifier returned from OpenLink()
(i.e., two explicit dependencies). Here we consider OpenLink() a
generate interface as it generates a new kernel object and returns a
corresponding id (which we refer to as dependence variable). In con-
trast, we consider CloseLink() and FlushLink() use interfaces,
as they rely on or “use” the object previously generated.
In this example, we are able to observe the execution traces
of OpenLink() and CloseLink(). Assuming we already success-
fully inferred the types and constraints of the arguments for both
OpenLink() and CloseLink(), we can also infer the explicit de-
pendence following the prior approach [14]. Specifically, as shown
in ❶ in Fig. 3, it is clear that the actual return value of the generate
interface OpenLink() and the value of the first argument of the use
interface CloseLink() always match. This will allow us to gener-
ate an initial template involving all three interfaces of OpenLink(),
CloseLink(), and FlushLink() but only one explicit dependence
is established. This is because we never observe any traces involving
FlushLink() in a dependence with OpenLink().
Nevertheless, during the course of analyzing CloseLink(), we
can extract more details about the dependence to help generalize it
to other interfaces such as FlushLink(). Specifically, we observe
that there is a function LookupLink() in Fig. 2 responsible for con-
verting a dependence variable (i.e., LinkID) into a corresponding
kernel object. This allows us to label FlushLink() as an internal
dependence operation (see ❷ in Fig. 3) and look for similar oper-
ations in other use interfaces (note that an internal dependence
operation does not have to be a function invocation). The next time
we encounter the same internal operation (i.e., LookupLink() invo-
cation) in another interface (e.g., FlushLink()), we can conclude
the passed value is a dependence variable of the same type, i.e.,
LinkID (see ❸ in Fig. 3). We can further observe that LinkID comes
Figure 2: A motivating example for explicit dependence in-
ference. If we know CloseLink accepts a dependence LinkID,
we can also learn that FlushLink requires the same LinkID
due to their similar code pattern.
from the four bytes of the arg of FlushLink(), and therefore con-
clude FlushLink() is dependent on OpenLink() and update the
template with the new dependence accordingly.
Next, we can inspect other fields in arg of FlushLink() and
refine the template even further with the types and constraints
regarding the complete arg (see ❹ in Fig. 3). For example, we may
learn that the second field of arg needs to take a magic number to
reach a deeper part of the function. The process of iterative refine-
ment of specifications, starting from a “sampled” execution paths
(including OpenLink() and CloseLink(), allows us to gather a
progressively more complete understanding of the driver. We argue
that this side-steps the challenge of analyzing a complex driver in
binary as a whole, and is also a suitable process for automation.
3.2 System Architecture
Fig. 4 illustrates the system architecture of SyzGen which is aimed
at generating specifications for macOS drivers with respect to de-
pendencies between interfaces. SyzGen primarily consists of four
components including (1) syscall logger and analyzer, (2) service
01  typedef int32 LinkID02  struct CloseRequest {  LinkID linkID;  };03  struct FlushRequest {  unknownFields  };04  Service* gService;  // Struct definition is omitted.05  int OpenLink() {  … …  return linkID;  }06  void* LookupLink(int linkID) {07      … … 08  }09  int CloseLink(struct CloseRequest* arg) {10      p ← LookupLink(arg->linkID);11      if (p == NULL) goto error;12      … … 13  }14  int FlushLink(struct FlushRequest* arg) {15      p ← LookupLink(*(int*)&arg->unknownFields[0]);16      if (p == NULL) goto error;17      magic ← *(int*) &arg->unknownFields[1];18      if magic != 0xdeadbeef: goto error;19      … … 20  }Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea752Figure 4: Workflow of SyzGen
specific hardware and virtual machine. With the coverage, SyzGen
additionally infers implicit dependence (order of syscalls) to further
improve the effectiveness of test case generation.
Although in this work we focus on macOS, the proposed solution
can be applied to other OSes with closed-source kernel modules.
It is also worth noting that if no traces are available, SyzGen can
still work, though it can no longer infer explicit dependencies from
existing traces and extrapolate them.
4 DESIGN
In this section, we describe the design of SyzGen in depth. For each
component we present in §3.2, we will explain our design decisions.
4.1 Syscall Logger and Analyzer
As mentioned in §3.2, the primary goal of this component is to
extract the explicit dependence from existing traces. Together with
the service detection and command identifier determination, we
will be able to generate preliminary versions of templates. Though
we apply a similar idea as IMF [14], we also address its limitations.
Specifically, the fundamental premise of IMF is the availability
of knowledge of specifications for the target syscalls (including
parameter definitions), which does not hold true for drivers. As
mentioned in §2.1, the syscall IOConnectCallMethod()’s key in-
put and output parameters inputStruct and outputStruct are
void*. Even though their sizes are given by inputStructSize and
outputStructSize, it is unable to discern which field of input-
Struct represents a dependency. Furthermore, according to our find-
ing, it is common that inputStruct contains pointers that point
to other objects (this can go recursively also). As a result, IMF is
unable to track explicit dependencies whenever the dependence
variable is located in the void* object.
In our solution, we handle the void* by assuming the depen-
dence variable can exist anywhere in the object, from a single byte
to at most eight bytes. Basically, we search for pairs of identical
input and output bytes in two different interfaces. If there exists
a single byte whose values in both the input and output always
match, we consider this byte a potential dependence variable. How-
ever, when there are multiple such individual bytes, we merge them
into contiguous groups up to eight bytes long. Interestingly, in
practice, we find that the size of dependence variables can indeed
vary from two to eight bytes. To improve precision, we ensure iden-
tified explicit dependencies are consistent across different logs and
exhibit different values. The rationale behind it is that dependence
Figure 3: Typical process of interface recovery for the moti-
vating example. ❶ Inferring explicit dependence by search-
ing for identical input and out pairs from logs; ❷ Annotating
dependence related operations; ❸ Identifying more depen-
dence based on annotated code; ❹ Recovering structure and
constraints of inputs.
and interface identification, (3) interface recovery, and (4) fuzzer
with coverage enabled.
Syscall logger and analyzer. The logger instruments the ker-
nel to record the input and output of every syscall to the target
driver. And then SyzGen analyzes the collected logs to identify ex-
plicit dependencies that are directly observable in the execution
traces (following the approach in IMF [14]), which may be limited
as mentioned earlier. It further separates the logs into independent
test cases according to the dependence we have inferred to produce
an initial corpus.
Service and command identifier determination. Given the
target binary, SyzGen detects the service name and its type number
(corresponding to user clients), which are used to interact with
the driver. As mentioned in section §2.1, since interfaces share the
same entry, i.e., IOConnectCallMethod(), SyzGen also needs to
find out what command identifier values the driver expects and
figure out where it is in the input so that the syscall analyzer could
distinguish different interfaces from each other.
Interface recovery. For each interface, SyzGen first attempts
to generate an initial template encoding the previously extracted
explicit dependence knowledge, along with the input structure and
constraints through dynamic analysis (on sampled execution paths).
In addition, it attempts to automatically extrapolate or generalize
the explicit dependence from known ones, in a style similar to the
motivating example. Then, SyzGen proceeds iteratively, allowing it
to gradually encode newly-discovered dependencies and refine the
structure and constraints of new use interfaces (e.g., FlushLink()).
Fuzzer with kernel coverage. Given the specification SyzGen
produces, a standard Syzkaller can start the fuzzing campaign. How-
ever, as much of its power comes from the fact that it is coverage-
guided, we also integrate a kernel module responsible for collecting
coverage in the system, which does not require the source code or
14  int FlushLink(struct FlushRequest* arg) {15    p ← LookupLink(*(int*)&arg->unknownFields[0]);16    if (p == NULL) goto error;17    magic ← *(int*) &arg->unknownFields[1];18    if magic != 0xdeadbeef: goto error;❷ Label Dependence Operation09  int CloseLink(struct CloseRequest* arg) {10    p ← LookupLink(arg->linkID);Log 1:OpenLink() → return bytes([3, 0, 0, 0])CloseLink(bytes([3, 0, 0, 0, … …]))Log2:OpenLink() → return bytes([1, 0, 0, 0])CloseLink(bytes([1, 0, 0, 0, … …]))… …❶ Infer Explicit Dependencetypedef int32 LinkIDstruct CloseRequest {    LinkID linkID;};❹ Interface Recoverystruct FlushRequest {    unknownFields};❸ Identify LinkID 06  void* LookupLink(LinkID linkID)struct FlushRequest {    LinkID linkID;    unknownFields};struct FlushRequest {    LinkID linkID;    int magic == 0xdeadbeef;};Iterative ReﬁnementProgramsSyscall Logger & AnalyzerDriver BinariesSpeciﬁcationService & Command Identiﬁer Determination Coverage-guided FuzzerTestcaseGenerationDependence Generalization& Interface Recovery CorpusDepen-denceReﬁneSession 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea753value by nature is a dynamically changing resource whose value is
inconstant if we have seen enough logs.
In addition, to reconstruct the additional objects that are reach-
able by pointers in inputStruct (which may contain the depen-
dence variable), we monitor the key internal APIs invoked in macOS
drivers to transfer the input from userspace to kernel space, e.g., the
macOS equivalent of copy_from_user() in Linux. For example,
if there is only one pointer in inputStruct object, there will be
one copy of the inputStruct itself, and then a second copy of the
data at the address given by the pointer. We perform the recon-
struction recursively by following as many layers of pointers as
necessary. Combining the above two improvements, we are able
to locate a more complete set of dependence variables and extract
more explicit dependencies missed by IMF.
Finally, a secondary goal of this component is to generate concise
test cases that encode explicit dependencies, of which the benefits
are twofold: (1) The later dynamic analysis in interface recovery
is performed against these distilled test cases instead of the entire
log which can be expensive to sift through. (2) Such test cases can
serve as the initial corpus to boost the fuzzing campaign.
4.2 Service and Command Identifier
Determination
To generate a complete template, SyzGen needs to know the ser-
vice names (specific strings) and valid values of service types to
determine the exposed services and user clients (see §2.1 for de-
tails). In addition, we need to infer the valid values for the command
identifier to differentiate different interfaces.
Service identification. By design, the name of a service is the
name of the corresponding class. As a result, we can directly resort
to the symbols indicating the service class names. Next, we can
simply query the OS using a convenient API IOServiceMatching()
with the service name to confirm its validity. This gives us a list
of matching services registered in the system. To infer the valid
values of service type, for each service, we conduct a dynamic
symbolic execution of IOServiceOpen() with the third argument
type symbolized (See §5 for details.).
Command identifier determination. As mentioned earlier, com-
mand identifiers may or may not be passed as the second argument
of IOConnectCallMethod(). When they are not, it can be tricky to
determine which bytes in either inputValues or inputStruct cor-
respond to a command identifier. Nevertheless, our observation is
that a command identifier is used to determine which functionality
the service should provide, and there are generally some common
programming patterns in macOS. As mentioned in §2, there is often
a function dispatch table that takes the command identifier as an
index to invoke different functions representing different function-
alities. However, using the command identifier as an index may not
be the only pattern (which was recognized by p-joker [28]). We find
that it can also be implemented by involving the command identifier
in conditional statements, e.g., switch cases or if-else statements, to
determine the subsequent code to execute.
Given the above, we design a general symbolic-execution-based
exploration strategy to identify such patterns. Basically, we attempt
to find a symbolic variable (among all the symbolized ones) whose
values lead directly to different functions being invoked. For ex-
ample, we may find a symbolic variable a whose constraint is a
== 1 when function foo() is invoked, whereas it has a different
constraint a == 2 when function bar() is invoked. The exact al-
gorithm is described in Algorithm 1 in the Appendix. In practice,
we find that the algorithm is general enough to handle a variety of
patterns mentioned above (See Appendix A for more details). Note
that the symbolic variable identified by the algorithm will not only
tell which parameter the command identifier comes from (e.g.,
the fifth argument inputStruct of IOConnectCallMethod()) but
also precisely which bytes (e.g., first 8 bytes of inputStruct or the
object pointed to by a pointer field of inputStruct).
After identifying the service and command identifier, SyzGen
could generate an initial template. Moreover, as described in §2,
some macOS drivers follow the convention of using function dis-