# Chrome UAF漏洞模式浅析（一）：user-defined callback
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前序
本系列将简述一些chrome里相对经久不衰的UAF漏洞模式，并配以一个具体的漏洞分析。
## 基础知识
Chromium通过mojo来在不同的进程之间实现通信，具体的细节参考[官方文档](https://chromium.googlesource.com/chromium/src/+/master/mojo/README.md)，这里笔者仅将我们需要用到的mojo
js IDL部分单独摘出，以供参考。
###  Mojo JavaScript Bindings API
####  Getting Started
bindings API被定义在mojo
namespace里，其实现在[mojo_bindings.js](https://source.chromium.org/chromium/chromium/src/+/master:out/Debug/gen/mojo/public/js/mojo_bindings.js)
当bindings generator处理mojom IDL文件时，将会生成对应的mojom.js文件。
假设我们创建一个`//services/echo/public/interfaces/echo.mojom`文件和`//services/echo/public/interfaces/BUILD.gn`
    module test.echo.mojom;
    interface Echo {
      EchoInteger(int32 value) => (int32 result);
    };
    import("//mojo/public/tools/bindings/mojom.gni")
    mojom("interfaces") {
      sources = [
        "echo.mojom",
      ]
    }
通过构建如下生成target，来生成bindings。
  * foo_js JavaScript bindings; 被用在compile-time dependency.
  * foo_js_data_deps JavaScript bindings; 被用在run-time dependency.
如果我们编译这个target,这将生成几个source file
    ninja -C out/r services/echo/public/interfaces:interfaces_js
其中与js binding相关的是
    out/gen/services/echo/public/interfaces/echo.mojom.js
为了使用echo.mojom中的定义，您将需要使用``标签在html页面中包括两个文件：
  * mojo_bindings.js: 注意这个文件必须放在所有的`.mojom.js`文件之前。
  * echo.mojom.js
####  Interfaces
和C++ bindings API相同的是，我们有
  * `mojo.InterfacePtrInfo`和`mojo.InterfaceRequest`封装message pipe的两端，他们分别代表interface连接的client端和service端
  * 对于每个Mojom interface Foo，这也生成一个FooPtr类，它保存一个InterfacePtrInfo，提供了使用InterfacePtrInfo中的message pipe handle发送interface call的方法。
  * `mojo.Binding`保存一个InterfaceRequest。 它侦听message pipe handle，并将传入的message分发到user-defined的interface实现。
让我们考虑上面的echo.mojom示例。下面显示了如何创建Echo interface connection和使用它进行call。
#####  Interface Pointer and Request
在上面的示例中,test.echo.mojom.EchoPtr是一个interface pointer类，它代表interface
connection的client。对于Echo
Mojom接口中的方法EchoInteger，在EchoPtr中定义了相应的echoInteger方法（注意，生成的method
name的格式为camelCaseWithLowerInitial,即小驼峰,第一个字母小写)
这就是实际生成的[echo.mojom.js](https://source.chromium.org/chromium/chromium/src/+/master:out/win-Debug/gen/mojo/public/interfaces/bindings/tests/echo.mojom.js)
在上面的实例中，echoServiceRequest是一个InterfaceRequest实例，它代表接口连接的server。
mojo.makeRequest创建一个message
pipe，用pipe的一端填充output参数（可以是InterfacePtrInfo或interface
pointer）,返回包装在InterfaceRequest实例中的另一端。
      // |output| could be an interface pointer, InterfacePtrInfo or
      // AssociatedInterfacePtrInfo.
      function makeRequest(output) {
        if (output instanceof mojo.AssociatedInterfacePtrInfo) {
          var {handle0, handle1} = internal.createPairPendingAssociation();
          output.interfaceEndpointHandle = handle0;
          output.version = 0;
          return new mojo.AssociatedInterfaceRequest(handle1);
        }
        if (output instanceof mojo.InterfacePtrInfo) {
          var pipe = Mojo.createMessagePipe();
          output.handle = pipe.handle0;
          output.version = 0;
          return new mojo.InterfaceRequest(pipe.handle1);
        }
        var pipe = Mojo.createMessagePipe();
        output.ptr.bind(new mojo.InterfacePtrInfo(pipe.handle0, 0));
        return new mojo.InterfaceRequest(pipe.handle1);
      }
#####  Binding an InterfaceRequest
mojo.Binding桥接了interface的实现和message pipe的一端，从而将传入的message从server端分派到该实现。
在上面的示例中，echoServiceBinding侦听message
pipe上的传入的EchoInteger方法调用，并将这些调用分派到EchoImpl实例。
      // ---------------------------------------------------------------------------    
      // |request| could be omitted and passed into bind() later.
      //
      // Example:
      //
      //    // FooImpl implements mojom.Foo.
      //    function FooImpl() { ... }
      //    FooImpl.prototype.fooMethod1 = function() { ... }
      //    FooImpl.prototype.fooMethod2 = function() { ... }
      //
      //    var fooPtr = new mojom.FooPtr();
      //    var request = makeRequest(fooPtr);
      //    var binding = new Binding(mojom.Foo, new FooImpl(), request);
      //    fooPtr.fooMethod1();
      function Binding(interfaceType, impl, requestOrHandle) {
        this.interfaceType_ = interfaceType;
        this.impl_ = impl;
        this.router_ = null;
        this.interfaceEndpointClient_ = null;
        this.stub_ = null;
        if (requestOrHandle)
          this.bind(requestOrHandle);
      }
      ...
      ...
        Binding.prototype.bind = function(requestOrHandle) {
        this.close();
        var handle = requestOrHandle instanceof mojo.InterfaceRequest ?
            requestOrHandle.handle : requestOrHandle;
        if (!(handle instanceof MojoHandle))
          return;
        this.router_ = new internal.Router(handle);
        this.stub_ = new this.interfaceType_.stubClass(this.impl_);
        this.interfaceEndpointClient_ = new internal.InterfaceEndpointClient(
            this.router_.createLocalEndpointHandle(internal.kPrimaryInterfaceId),
            this.stub_, this.interfaceType_.kVersion);
        this.interfaceEndpointClient_ .setPayloadValidators([
            this.interfaceType_.validateRequest]);
      };
#####  Receiving Responses
一些mojom接口期待response，例如EchoInteger，对应的js方法返回一个Promise，当service端发回响应时，此Promise将被resolve，如果interface断开连接，则将被reject。
## CVE-2019-13768 Chrome sandbox escape漏洞分析
###  Root Cause
该漏洞发生在Chrome的FileWriterImpl接口实现上。
首先我们先看一下FileWriter的IDL接口描述
    // Interface provided to the renderer to let a renderer write data to a file.
    interface FileWriter {
     // Write data from |blob| to the given |position| in the file being written
     // to. Returns whether the operation succeeded and if so how many bytes were
     // written.
     // TODO(mek): This might need some way of reporting progress events back to
     // the renderer.
     Write(uint64 position, Blob blob) => (mojo_base.mojom.FileError result,
                                           uint64 bytes_written);    // stream) =>
           (mojo_base.mojom.FileError result, uint64 bytes_written);
     // Changes the length of the file to be |length|. If |length| is larger than
     // the current size of the file, the file will be extended, and the extended
     // part is filled with null bytes.
     Truncate(uint64 length) => (mojo_base.mojom.FileError result);
    };
而FileWriter是被FileSystemManager管理的，其有一个CreateWriter方法，可以创建出FileWriter。
`MakeRequest`接收一个`FileWriterPtr writer`作为参数，创建一个message
pipe，并将返回pipe的receiver端。而这里pipe的remote端就和`FileWriterPtr
writer`绑定，等receiver端和FileWriterImpl实例绑定后，就可以通过writer来调用FileWriterImpl里的方法。
然后这里就通过`MakeStrongBinding`来将FileWriterImpl实例和刚刚创建出来的receiver绑定到一起，
**此时FileWriterImpl的生命周期和message pipe绑定，只要message
pipe不断开，则FileWriterImpl永远不会被释放** 。
**所以我们可以用断开message
pipe的方法来析构掉这个对象，这也是生命周期管理不严谨的一种表现，FileWrite并没有被FileSystemManager来管理它的生命周期**
然后通过`std::move(callback).Run`来将`FileWriterPtr
writer`作为response返回给CreateWriter的调用者，这样调用者就可以通过writer来调用FileWriterImpl实例里的方法`FileWriterImpl::Write`了。
    // Interface provided by the browser to the renderer to carry out filesystem
    // operations. All [Sync] methods should only be called synchronously on worker
    // threads (and asynchronously otherwise).
    interface FileSystemManager {
     // ...
     // Creates a writer for the given file at |file_path|.
     CreateWriter(url.mojom.Url file_path) =>
         (mojo_base.mojom.FileError result,