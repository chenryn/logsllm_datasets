about the purpose of certiﬁcate validation.
In the absence of improved certiﬁcate management
practices at the application layer, one possible defense is
to enforce sane SSL/TLS conﬁgurations at the operating
system layer. This capability is demonstrated by Fahl
et al.
for Android [29], while Bates et al. present a
mechanism for Linux that simultaneously facilitates the
use of SSL trust enhancements [15]. In the event that the
system trusts compromised root certiﬁcates, a solution
like DVCert [23] could be used to protect against man in
the middle attacks.
Are legacy systems more secure? In Section 7, we noted
that prior work had found that legacy systems are fun-
damentally insecure as they rely principally on insecure
GSM bearer channels. Those systems rely on bearer
channel security because of the practical difﬁculties
of developing and deploying secure applications to a
plethora of feature phone platforms with widely varying
designs and computational capabilities.
In contrast,
we look at apps developed for relatively homogenous,
well-resourced smartphones. One would expect that the
advanced capabilities available on the Android platform
would increase the security of branchless banking apps.
However, given the vulnerabilities we disclose,
the
branchless banking apps we studied for Android put
users at a greater risk than legacy systems. Attacking
cellular network protocols, while shown to be practi-
cal [56], still has a signiﬁcant barrier to entry in terms
of equipment and expertise. In contrast, the attacks we
disclose in this paper require only a laptop, common
attack tools, and some basic security experience to
discover and exploit. Effectively, these attacks are easier
to exploit than the previously disclosed attacks against
SMS and USSD interfaces.
Does regulation help? In the United States, the PCI Se-
curity Standards Council releases a Data Security Stan-
dard (PCI DSS) [48], which govern the security require-
ments for entities that handle cardholder data (e.g., card
numbers and expiration dates). The council is a consor-
tium of card issuers including Visa, MasterCard, and oth-
ers that cooperatively develop this standard. Merchants
that accept credit card payments from these issuers are
generally required to adhere to the PCI DSS and are sub-
ject to auditing.
The DSS document includes requirements,
testing
procedures, and guidance for securing devices and net-
USENIX Association  
24th USENIX Security Symposium  27
11
works that handle cardholder data. These are not, how-
ever, speciﬁc enough to include detailed implementation
instructions. The effectiveness of these standards is not
our main focus; we note that the PCI DSS can be used
as a checklist-style document for ensuring well-rounded
security implementations.
In 2008,
the Reserve Bank of India (RBI) issued
guidelines for mobile payment systems [13]. (By their
deﬁnition, the apps we study would be included in these
guidelines). In 12 short pages, they touch on aspects as
broad as currencies allowed, KYC/AML policies, inter-
bank settlement policies, corporate governance approval,
legal jurisdiction, consumer protection, and technology
and security standards for a myriad of delivery channels.
The security standards give implementers wide leeway to
use their best judgement about speciﬁc security practices.
MoneyOnMobile, which had the most severe security is-
sues among all of the apps we manually analyzed, promi-
nently displays its RBI authorization on its web site.
Some prescriptions stand out from the rest: an objec-
tive to have “digital certiﬁcate based inquiry/transaction
capabilities,” a recommendation to have a mobile PIN
that is encrypted on the wire and never stored in clear-
text, and use of the mobile phone number as the chief
identiﬁer. These recommendations may be responsible
for certain design decisions of Airtel Money and Oxigen
Wallet (both based in India). For example, the digital cer-
tiﬁcate recommendation may have driven Oxigen Wallet
developers to develop their (very ﬂawed) public key en-
cryption architecture. These recommendations also ex-
plain why Airtel Money elected to further encrypt the
PIN (and only the PIN) in messages that are encapsulated
by TLS. Further, the lack of guidance on what “strong
encryption” entails may be partially responsible for the
security failures of Airtel Money and Oxigen Wallet. Fi-
nally, we note that we believe that Airtel Money, while
still vulnerable, was within the letter of the recommen-
dations.
To our knowledge, other mobile money systems stud-
ied in this paper are not subject to such industry or gov-
ernment regulation. While a high-quality, auditable in-
dustry standard may lead to improved branchless bank-
ing security, it is not clear that guidelines like RBI’s cur-
rently make much of a difference.
6 Terms of Service & Consumer Liability
After uncovering technical vulnerabilities for branchless
banking, we investigated their potential implications for
fraud liability. In the United States, the consumer is not
held liable for fraudulent transactions beyond a small
amount. This model recognizes that users are vulnera-
ble to fraud that they are powerless to prevent, combat,
or detect prior to incurring losses.
To determine the model used for the branchless bank-
ing apps we studied, we surveyed the Terms of Service
(ToS) for each of the seven analyzed apps analyzed. The
Airtel Money [1], GCash [3], mCoin [5], Oxigen Wal-
let [9], MoneyOnMobile [7], and Zuum [12] terms all
hold the customer solely responsible for most forms of
fraudulent activity. Each of these services hold the cus-
tomer responsible for the safety and security of their
password. GCash, mCoin, and Oxigen Wallet also hold
the customer responsible for protecting their SIM (i.e.,
mobile phone). GCash provides a complaint system, pro-
vided that the customer notiﬁes GCash in writing within
15 days of the disputed transaction. However, they also
make it clear that erroneous transactions are not grounds
for dispute. mPAY’s terms [8] are less clear on the sub-
ject of liability; they provide a dispute resolution sys-
tem, but do not detail the circumstances for which the
customer is responsible. Across the body of these terms
of service, it is overwhelmingly clear that the customer
is responsible for all transactions conducted with their
PIN/password on their mobile device.
The presumption of customer fault for transactions is
at odds with the ﬁndings of this work. The basis for
these arguments appear to be that, if a customer pro-
tects their PIN and protects their physical device, there
is no way for a third party to initiate a fraudulent trans-
action. We have demonstrated that this is not the case.
Passwords can be easily recovered by an attacker. Six of
the seven apps we manually analyzed transmits authenti-
cation data over insecure connections, allowing them to
be recovered in transit. Additionally, with only brief ac-
cess to a customer’s phone, an attacker could read GCash
PINs out of the phone logs or trigger the Oxigen Wallet
password recovery mechanism. Even when the mobile
device and SIM card are fully under customer control,
unauthorized transactions can still occur, due to the per-
vasive vulnerabilities found in these six apps. By launch-
ing a man-in-the-middle attack, an adversary would be
able to tamper with transactions while in transit, mislead-
ing the provider into believing that a fraudulent transac-
tion originated from a legitimate user. These attacks are
all highly plausible. Exploits of the identiﬁed vulnera-
bilities are not probabilistic, but would be 100% effec-
tive. With only minimal technical capability, an adver-
sary could launch these attacks given the ability to con-
trol a local wireless access point. This litany of vulnera-
bilities comes only from an analysis of client-side code.
Table 2 hints that there may be further server side con-
ﬁguration issues, to say nothing of the security of cus-
tom server software, system software, or the operating
systems used.
Similar to past ﬁndings for the “Chip & Pin” credit
card system [40], it is possible that these apps are already
being exploited in the wild, leaving consumers with no
28  24th USENIX Security Symposium 
USENIX Association
12
recourse to dispute fraudulent transactions. Based on
the discovery of rampant vulnerabilities in these applica-
tions, we feel that the liability model for branchless bank-
ing applications must be revisited. Providers must not
marry such vulnerable systems with a liability model that
refuses to take responsibility for the technical ﬂaws, and
these realities could prevent sustained growth of branch-
less banking systems due to the high likelihood of fraud.
7 Related Work
Banking has been a motivation for computer security
since the origins of the ﬁeld. The original Data Encryp-
tion Standard was designed to meet the needs of bank-
ing and commerce, and Anderson’s classic paper “Why
Cryptosystems Fail” looked speciﬁcally at banking secu-
rity [14]. Accordingly, mobile money systems have been
scrutinized by computer security practitioners. Current
research on mobile money systems to-date has focused
on the challenges of authentication, channel security, and
transaction veriﬁcation in legacy systems designed for
feature phones. Some prior work has provided threat
modeling and discussion of broader system-wide secu-
rity issues. To our knowledge, we are the ﬁrst to examine
the security of smartphone applications used by mobile
money systems.
Mobile money systems rely on the network to pro-
vide identity services; in essence, identity is the tele-
phone number (MS-ISDN) of the subscriber. To address
physical access granting attackers access to accounts, re-
searchers have investigated the use of a small one-time
pads as authenticators in place of PINs. Panjwani et
al. [47] present a new scheme that avoids vulnerabili-
ties with using one-time passwords with PINs and SMS.
Sharma et al. propose using scratch-off one-time au-
thenticators for access with supplemental recorded voice
conﬁrmations [53]. These schemes add complexity to
the system while only masking the PIN from an adver-
sary who can see a message. These schemes do not pro-
vide any guarantees against an adversary who can mod-
ify messages or who recovers a message and a pad.
SMS-based systems, in particular, are vulnerable to
eavesdropping or message tampering [42], and so have
seen several projects to bring additional cryptographic
mechanisms to mobile money systems [20, 41, 22]. Sys-
tems that use USSD, rather than SMS, as their bearer
channel can also use code executing on the SIM card
to cryptographically protect messages. However, it is
unknown how these protocols are implemented or what
guarantees they provide [45].
Finally, several authors have written papers investigat-
ing the holistic security of mobile money systems de-
signed exclusively for “dumbphones.” Paik et al. [45]
note concerns about reliance on GSM trafﬁc channel
cryptographic guarantees, including the ability to inter-
cept, replay, and spoof the source of SMS messages.
Panjwani fulﬁlls the goals laid out by Paik et al. by
providing a brief threat model and a design to protect
against the threats they identify [46]. While those papers
focus on technical analysis, de Almeida [38] and Harris
et al. [35] note the policy implications of the insecurity
of mobile money.
While focused strictly on mobile money platforms,
this paper also contributes to the literature of Android
application security measurement. The pioneering work
in this space was TaintDroid [25, 25], a dynamic anal-
ysis system that detected private information leakages.
Shortly after, Felt et al. found that one-third of apps stud-
ied held privileges they did not need [30], while Chin et
al. found that 60% of apps manually examined were vul-
nerable to attacks involving Android Intents [19]. More
recently, Fahl et al. [28] and Egele et al. [24] use auto-
mated static analysis investigated cryptographic API use
in Android, ﬁnding respectively that 8% of apps studied
were vulnerable to man-in-the-middle attacks and that
88% of apps make some mistake with regards to cryp-
tographic libraries [24]. Our work conﬁrms these re-
sults apply to mobile money applications. This project
is most similar to the work of Enck et al. [26], who auto-
matically and manually analyzed 1,100 applications for
a broad range of security concerns.
However, prior work does not investigate the security
guarantees and the severe consequences of smart phone
application compromise in branchless banking systems.
Our work speciﬁcally investigates this open area of re-
search and provides the world’s ﬁrst detailed security
analysis of mobile money apps. In doing so, we demon-
strate the risk to users who rely on these systems for ﬁ-
nancial security.
8 Conclusions
Branchless banking applications have and continue to
hold the promise to improve the standard of living for
many in the developing world. By enabling access to
a cashless payment infrastructure, these systems allow
residents of such countries to reap the beneﬁts afforded
to modern economies and decrease the physical security
risks associated with cash transactions. However, the se-
curity of the applications providing these services has
not previously been vetted in a comprehensive or pub-
lic fashion. In this paper, we perform precisely such an
analysis on seven branchless banking applications, bal-
ancing both popularity with geographic representation.
Our analysis targets the registration, login, and transac-
tion portions of the representative applications, and cod-
iﬁes discovered vulnerabilities using the CWE classiﬁ-
cation system. We ﬁnd signiﬁcant vulnerabilities in six
USENIX Association  
24th USENIX Security Symposium  29
13
of the seven applications, which prevent both users and
providers from reasoning about the integrity of transac-
tions. We then pair these technical ﬁndings with the dis-
covery of fraud liability models that explicitly hold the
end user culpable for all fraud. Given the systemic prob-
lems we identify, we argue that dramatic improvements
to the security of branchless banking applications are im-
perative to protect the mission of these systems.
Acknowledgments
The authors are grateful to Saili Sahasrabudde for her
assistance with this work. We would also like to thank
the members of the SENSEI Center at the University of
Florida for their help in preparing this work, as well as
our anonymous reviewers for their helpful comments.
This work was supported in part by the US National
Science Foundation under grant numbers CNS-1526718,
CNS-1540217, and CNS-1464087. Any opinions, ﬁnd-
ings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessar-
ily reﬂect the views of the National Science Foundation.
References
[1] Airtel Money: Terms and Conditions of Usage. http://www.
airtel.in/personal/money/terms-of-use.
[2] android-apktool: A Tool for Reverse Engineering Android APK
Files. https://code.google.com/p/android-apktool/.
[3] GCash Terms and Conditions. http://www.globe.com.ph/
gcash-terms-and-conditions.
[4] JEB Decompiler. http://www.android-decompiler.com/.
[5] mCoin: Terms and Conditions. http://www.mcoin.co.id/
syarat-dan-ketentuan.
[6] MMU Deployment Tracker.
http://www.gsma.com/
mobilefordevelopment/programmes/mobile-money-
for-the-unbanked/insights/tracker.
[7] Money on Mobile Sign-Up: Terms and Conditions. http://
www.money-on-mobile.com.
[8] mPAY: Terms and Conditions.
http://www.ais.co.th/
mpay/en/about-term-condition.aspx.
[9] Oxigen Wallet:
Terms and Conditions.
oxigenwallet.com/terms-conditions.
https://www.
[10] smali: An assembler/disassembler for Android’s dex format.
https://code.google.com/p/smali/.
[11] The Legion of
the Bouncy Castle.
bouncycastle.org/.
https://www.
[12] Zuum: Termos e Condic¸ ˜oes.
institucional/termos.
http://www.zuum.com.br/
[13] Mobile Payment in India — Operative Guidelines for Banks.
Technical report, Reserve Bank of India, 2008.
[14] R. Anderson. Why Cryptosystems Fail.
In Proc. of the 1st
ACM Conf. on Comp. and Comm. Security, pages 215–227. ACM
Press, 1993.
[15] A. Bates, J. Pletcher, T. Nichols, B. Hollembaek, D. Tian,
A. Alkhelaiﬁ, and K. Butler. Securing SSL Certiﬁcate Veriﬁ-
cation through Dynamic Linking. In Proc. of the 21st ACM Conf.
on Comp. and Comm. Security (CCS’14), Scottsdale, AZ, USA,
Nov. 2014.
[16] N. Berry. PIN analysis. http://www.datagenetics.com/
blog/september32012/, Sept. 2012.
[17] Bill & Melinda Gates Foundation. Financial Services for the
Poor: Strategy Overview. http://www.gatesfoundation.
org/What-We-Do/Global-Development/Financial-
Services-for-the-Poor.
[18] K. Chen, P. Liu, and Y. Zhang. Achieving Accuracy and Scalabil-