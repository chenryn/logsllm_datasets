⃗𝑐𝑚′ = (𝑐′
𝑖′) are indexed by 𝑖′ ∈ 𝐺′ = Z*
74
𝑚/⟨𝑝⟩, the ideal p𝑖𝑅′ factors as the product of those p′
each 𝑖 ∈ 𝐺 = Z*
𝑖′ such that 𝑖′ = 𝑖
(mod 𝑚), i.e., those 𝑖′ ∈ 𝜑−1(𝑖) where 𝜑 : 𝐺′ → 𝐺 is the natural mod-𝑚 homomorphism.
Therefore,
𝑐′
𝑖′
.
(3.3.7)
∑︁
𝑐𝑖 =
𝑖′∈𝜑−1(𝑖)
To deﬁne ⃗𝑐𝑚′,𝑚, we partition 𝐺′ into a collection ℐ′ of |𝐺′|/|𝐺| equal-sized subsets 𝐼′,
such that 𝜑(𝐼′) = 𝐺 for every 𝐼′ ∈ ℐ′. In other words, 𝜑 is a bijection between each 𝐼′
and 𝐺. This induces a bijection 𝜓 : 𝐺′ → ℐ′ × 𝐺, where the projection of 𝜓 onto its second
component is 𝜑. We index the relative CRT set ⃗𝑐𝑚′,𝑚 = (𝑐𝐼′) by 𝐼′ ∈ ℐ′, deﬁning
∑︁
𝑖′∈𝐼′
𝑐𝐼′ :=
𝑐′
𝑖′
.
By Equation (3.3.7) and the fact that (𝑐′
𝑖′) is the CRT set of 𝑅′
𝑐𝑖′ = 𝑐𝐼′ · 𝑐𝑖 for 𝜓(𝑖′) = (𝐼′, 𝑖), thus conﬁrming Equation (3.3.6).
𝑝, it can be veriﬁed that
3.4 Sparse Decompositions and Haskell Framework
As shown in section 3.3, the structure of the powerful, decoding, and CRT bases yield sparse
decompositions, and thereby efﬁcient algorithms, for cryptographically important linear
transforms relating to these bases. Here we explain the principles of sparse decompositions,
and summarize our Haskell framework for expressing and evaluating them.
3.4.1 Sparse Decompositions
A sparse decomposition of a matrix (or the linear transform it represents) is a factorization
into sparser or more “structured” matrices, such as diagonal matrices or Kronecker products.
Recall that the Kronecker (or tensor) product 𝐴 ⊗ 𝐵 of two matrices or vectors 𝐴 ∈
ℛ𝑚1×𝑛1, 𝐵 ∈ ℛ𝑚2×𝑛2 over a ring ℛ is a matrix in ℛ𝑚1𝑚2×𝑛1𝑛2. Speciﬁcally, it is the
𝑚1-by-𝑛1 block matrix (or vector) made up of 𝑚2-by-𝑛2 blocks, whose (𝑖, 𝑗)th block is
75
𝑎𝑖,𝑗 · 𝐵 ∈ ℛ𝑚2×𝑛2, where 𝐴 = (𝑎𝑖,𝑗). The Kronecker product satisﬁes the properties
(𝐴 ⊗ 𝐵)𝑡 = (𝐴𝑡 ⊗ 𝐵𝑡)
(𝐴 ⊗ 𝐵)−1 = (𝐴−1 ⊗ 𝐵−1)
and the mixed-product property
(𝐴 ⊗ 𝐵) · (𝐶 ⊗ 𝐷) = (𝐴𝐶) ⊗ (𝐵𝐷),
which we use extensively in what follows.
A sparse decomposition of a matrix 𝐴 naturally yields an algorithm for multiplication
by 𝐴, which can be much more efﬁcient and parallel than the naïve algorithm. For example,
multiplication by 𝐼𝑛 ⊗ 𝐴 can be done using 𝑛 parallel multiplications by 𝐴 on appropriate
chunks of the input, and similarly for 𝐴⊗ 𝐼𝑛 and 𝐼𝑙 ⊗ 𝐴⊗ 𝐼𝑟. More generally, the Kronecker
product of any two matrices can be expressed in terms of the previous cases, as follows:
𝐴 ⊗ 𝐵 = (𝐴 ⊗ 𝐼height(𝐵)) · (𝐼width(𝐴) ⊗ 𝐵) = (𝐼height(𝐴) ⊗ 𝐵) · (𝐴 ⊗ 𝐼width(𝐵)).
If the matrices 𝐴, 𝐵 themselves have sparse decompositions, then these rules can be applied
further to yield a “fully expanded” decomposition. All the decompositions we consider
in this work can be fully expanded as products of terms of the form 𝐼𝑙 ⊗ 𝐴 ⊗ 𝐼𝑟, where
multiplication by 𝐴 is relatively fast, e.g., because 𝐴 is diagonal or has small dimensions.
3.4.2 Haskell Framework
We now describe a simple, deeply embedded domain-speciﬁc language for expressing
and evaluating sparse decompositions in Haskell. It allows the programmer to write such
factorizations recursively in natural mathematical notation, and it automatically yields fast
evaluation algorithms corresponding to fully expanded decompositions. For simplicity, our
76
implementation is restricted to square matrices (which sufﬁces for our purposes), but it
could easily be generalized to rectangular ones.
As a usage example, to express the decompositions
𝐴 = 𝐵 ⊗ 𝐶
𝐵 = (𝐼𝑛 ⊗ 𝐷) · 𝐸
where 𝐶, 𝐷, and 𝐸 are “atomic,” one simply writes
transA =
transB @* transC
transB = ( Id n
@* transD) .* transE
transC = trans functionC
-- 𝐵 ⊗ 𝐶
-- (𝐼𝑛 ⊗ 𝐷) · 𝐸
-- similarly for transD, transE
where functionC is (essentially) an ordinary Haskell function that left-multiplies its input
vector by 𝐶. The above code causes transA to be internally represented as the fully
expanded decomposition
𝐴 = (𝐼𝑛 ⊗ 𝐷 ⊗ 𝐼dim(𝐶)) · (𝐸 ⊗ 𝐼dim(𝐶)) · (𝐼dim(𝐸) ⊗ 𝐶).
Finally, one simply writes eval transA to get an ordinary Haskell function that left-
multiplies by 𝐴 according to the above decomposition.
Data types. We ﬁrst deﬁne the data types that represent transforms and their decomposi-
tions (here Array r stands for some arbitrary array type that holds elements of type r)
-- (dim(f), f) such that (f l r) applies 𝐼𝑙 ⊗ 𝑓 ⊗ 𝐼𝑟
type Tensorable r = (Int, Int -> Int -> Array r -> Array r)
-- transform component: a Tensorable with particular 𝐼𝑙, 𝐼𝑟
type TransC r = (Tensorable r, Int, Int)
77
-- full transform: a sequence of zero or more components
data Trans r = Id Int
-- identity sentinel
| TSnoc (Trans r) (TransC r)
• The client-visible type alias Tensorable r represents an “atomic” transform (over
the base type r) that can be augmented (tensored) on the left and right by identity
transforms of any dimension. It has two components: the dimension 𝑑 of the atomic
transform 𝑓 itself, and a function that, given any dimensions 𝑙, 𝑟, applies the 𝑙𝑑𝑟-
dimensional transform 𝐼𝑙 ⊗ 𝑓 ⊗ 𝐼𝑟 to an array of r-elements. (Such a function could
use parallelism internally, as already described.)
• The type alias TransC r represents a transform component, namely, a Tensorable
r with particular values for 𝑙, 𝑟. TransC is only used internally; it is not visible to
external clients.
• The client-visible type Trans r represents a full transform, as a sequence of zero or
more components terminated by a sentinel representing the identity transform. For
such a sequence to be well-formed, all the components (including the sentinel) must
have the same dimension. Therefore, we export the Id constructor, but not TSnoc,
so the only way for a client to construct a nontrivial Trans r is to use the functions
described below (which maintain the appropriate invariant).
Evaluation. Evaluating a transform is straightforward. Simply evaluate each component
in sequence:
evalC :: TransC r -> Array r -> Array r
evalC ((_,f), l, r) = f l r
eval :: Trans r -> Array r -> Array r
78
eval (Id _)
= id
-- identity function
eval (TSnoc rest f) = eval rest . evalC f
Constructing transforms. We now explain how transforms of type Trans r are con-
structed. The function trans wraps a Tensorable as a full-ﬂedged transform:
trans :: Tensorable r -> Trans r
trans f@(d,_) = TSnoc (Id d) (f, 1, 1)
-- 𝐼𝑑 · 𝑓
More interesting are the functions for composing and tensoring transforms, respectively
denoted by the operators (.*), (@*) :: Trans r -> Trans r -> Trans r. Composition
just appends the two sequences of components, after checking that their dimensions match;
we omit its straightforward implementation. The Kronecker-product operator (@*) simply
applies the appropriate rules to get a fully expanded decomposition:
-- 𝐼𝑚 ⊗ 𝐼𝑛 = 𝐼𝑚𝑛
(Id m) @* (Id n) = Id (m*n)
-- 𝐼𝑛 ⊗ (𝐴 · 𝐵) = (𝐼𝑛 ⊗ 𝐴) · (𝐼𝑛 ⊗ 𝐵), and similarly
i@(Id n) @* (TSnoc a (b, l, r)) = TSnoc (i @* a) (b, (n*l), r)
(TSnoc a (b, l, r)) @* i@(Id n) = TSnoc (a @* i) (b, l, (r*n))
-- (𝐴 ⊗ 𝐵) = (𝐴 ⊗ 𝐼) · (𝐼 ⊗ 𝐵)
a @* b = (a @* Id (dim b)) .* (Id (dim a) @* b)
(The dim function simply returns the dimension of a transform, via the expected implemen-
tation.)
79
3.5 Cyclotomic Rings
In this section we summarize Λ∘𝜆’s interfaces and implementations for cyclotomic rings.
In subsection 3.5.1 we describe the interfaces of the two data types, Cyc and UCyc, that
represent cyclotomic rings: Cyc completely hides and transparently manages the internal
representation of ring elements (i.e., the choice of basis in which they are represented),
whereas UCyc is a lower-level type that safely exposes and allows explicit control over
the choice of representation. Lastly, in subsection 3.5.2 we describe key aspects of the
implementations, such as Cyc’s subring optimizations, and how we generically “promote”
base-ring operations to cyclotomic rings.
3.5.1 Cyclotomic Types: Cyc and UCyc
In this subsection we describe the interfaces of the two data types, Cyc and UCyc, that
represent cyclotomic rings.
• Cyc t m r represents the mth cyclotomic ring over a base ring r—typically, one of
Q, Z, or Z𝑞—backed by an underlying Tensor type t (see section 3.3 for details on
Tensor). The interface for Cyc completely hides the internal representations of ring
elements (e.g., the choice of basis) from the client, and automatically manages the
choice of representation so that the various ring operations are usually as efﬁcient as
possible. Therefore, most cryptographic applications can and should use Cyc.
• UCyc t m rep r represents the same cyclotomic ring as Cyc t m r, but as a
coefﬁcient vector relative to the basis indicated by rep. This argument is one of the
four valueless types P, D, C, E, which respectively denote the powerful basis, decoding
basis, CRT r-basis (if it exists), and CRT basis over an appropriate extension ring of r.
Exposing the representation at the type level in this way allows—indeed, requires—
the client to manage the choice of representation. (Cyc is one such client.) This can
lead to more efﬁcient computations in certain cases where Cyc’s management may
80
be suboptimal. More importantly, it safely enables a wide class of operations on
the underlying coefﬁcient vector, via category-theoretic classes like Functor; see
sections 3.5.1 and 3.5.2 for further details.
Clients can easily switch between Cyc and UCyc as needed. Indeed, Cyc is just a relatively
thin wrapper around UCyc, which mainly just manages the choice of representation, and
provides some other optimizations related to subrings (see subsection 3.5.2 for details).
Instances
The Cyc and UCyc types are instances of many classes, which comprise a large portion of
their interfaces.
Algebraic classes. As one might expect, Cyc t m r and UCyc t m rep r are instances
of Eq, Additive, Ring, and various other algebraic classes for any appropriate choices of t,
m, rep, and r. Therefore, the standard operators (==), (+), (*), etc. are well-deﬁned for
Cyc and UCyc values, with semantics matching the mathematical deﬁnitions.
We remark that UCyc t m rep r is an instance of Ring only for the CRT representations
rep = C, E, where multiplication is coefﬁcient-wise. In the other representations, multiplica-
tion is algorithmically more complicated and less efﬁcient, so we simply do not implement
it. This means that clients of UCyc must explicitly convert values to a CRT representation
before multiplying them, whereas Cyc performs such conversions automatically.
Category-theoretic classes. Because UCyc t m rep r for rep = P, D, C (but not
rep =E) is represented as a vector of r-coefﬁcients with respect to the basis indicated
by rep, we deﬁne the partially applied types UCyc t m rep (note the missing base type r)
to be instances of the classes Functor, Applicative, Foldable, and Traversable. For
example, our instantiation of Functor for f = UCyc t m rep deﬁnes fmap :: (r ->
r’) -> f r -> f r’ to apply the given r -> r’ function independently on each of the
r-coefﬁcients.
81
By contrast, Cyc t m is not an instance of any category-theoretic classes. This is because
by design, Cyc hides the choice of representation from the client, so it is unclear how (say)
fmap should be deﬁned: using the current internal representation (whatever it happens to
be) would lead to unpredictable and often unintended behavior, whereas always using a
particular representation (e.g., the powerful basis) would not be ﬂexible enough to support
operations that ought to be performed in a different representation.
Lattice cryptography classes. Lastly, we “promote” instances of our specialized lattice
cryptography classes like Reduce, Lift, Rescale, Gadget, etc. from base types to UCyc
and/or Cyc, as appropriate. For example, the instance Reduce z zq, which represents
modular reduction from Z to Z𝑞, induces the instance Reduce (Cyc t m z) (Cyc t m
zq), which represents reduction from 𝑅 to 𝑅𝑞. All these instances have very concise and
generic implementations using the just-described category-theoretic instances for UCyc; see
subsection 3.5.2 for further details.
Functions
We now describe the remaining functions that deﬁne the interface for Cyc; see Figure 3.2
for their type signatures. (UCyc admits a very similar collection of functions, which we omit
from the discussion.) We start with functions that involve a single cyclotomic index m.
scalarCyc embeds a scalar element from the base ring r into the mth cyclotomic ring
over r.
mulG, divG respectively multiply and divide by the special element 𝑔𝑚 in the 𝑚th cyclo-
tomic ring. These operations are commonly used in applications, and have efﬁcient
algorithms in all our representations, which is why we deﬁne them as special functions
(rather than, say, just exposing a value representing 𝑔𝑚). Note that because the input
may not always be divisible by 𝑔𝑚, the output type of divG is a Maybe.
82
scalarCyc :: (Fact m, CElt t r) =>
mulG
divG
liftPow, liftDec
Cyc t m r
r ->
:: (Fact m, CElt t r) => Cyc t m r ->
Cyc t m r
:: (Fact m, CElt t r) => Cyc t m r -> Maybe (Cyc t m r)
:: (Fact m, Lift b a, ...) => Cyc t m b ->
Cyc t m a
advisePow, adviseDec, adviseCRT
:: (Fact m, CElt t r)
=> Cyc t m r ->
Cyc t m r
-- error sampling
tGaussian
(OrdFloat
::
q, ToRational v, MonadRandom rnd, CElt t q, ...)
=> v
errorRounded :: (ToInteger z, ...) => v
errorCoset
:: (ToInteger z, ...) =>
v -> Cyc t m zp -> rnd (Cyc t m z)
-> rnd (Cyc t m q)
-> rnd (Cyc t m z)