beq1 : b  4.5 (= indicator value whether an implementation leaks
information): OpenSSL (40.81), gnuTLS/Nettle (48.61), and
Käsper-Schwabe (9.53).
Key Retrieval Figure 5 depicts our t-test evaluation results
for the choosen AES implementations. In particular, the cor-
rect key candidate (marked in red) was clearly separated after
∼50k measurements for both openSSL and gnuTLS, while
∼200k measurements were necessary for Käsper-Schwabe
implementation, to reliably guess all key bytes. Note that the
latter implementation requires more measurements due to its
gate-logic implementation for the SubBytes layer, which uses
various XOR instruction that introduce additional statistical
noise.
6.3 Discussion
In this case study, we demonstrated that we are able to implant
sophisticated microcode Trojan triggers that can introduce
exploitable leakage across several allegedly secure AES im-
plementations (and compiler optimizations). We designed and
optimized our trigger to minimize the number of required tim-
ing measurements. Even though we conducted our measure-
ments in a low-noise system (e.g., no out-of-order execution
or multiple cache hierarchy), the principle of our Trojan can
be adapted to noisier systems by adapting the amount of NOP
instructions in the payload to increase the timing dependency.
System Impact Table 3 shows that the performance impact
is negligible for general-purpose applications. However, soft-
ware that utilizes numerous XOR operations, such as CRC and
cryptographic implementations, exhibits a signiﬁcant perfor-
mance impact (e.g., up to 30%). Note that the Trojan does
not alter the control or data ﬂow and thus is stealthy for the
majority of benchmarks.
7 Case-Study: (In-)Secure Cryptography
Most real-world cryptographic software libraries provide spe-
cialized assembly implementations to enable fast and secure
implementations. More precisely, assembly implementations
enable security engineers to control and reason about imple-
mentation security on speciﬁc architectures. In this case study,
we leverage the static nature of the (rarely-changing) assembly
code by designing a stealthy microcode Trojan that can leak
the cryptographic key only for a single attacker-controlled
magic plaintext.
High-Level Attack Idea To leak cryptographic key ma-
terial, we focus on a speciﬁc fault injection during crypto-
graphic processing. In particular, we leverage the static nature
of cryptographic assembly implementations combined with a
multi-stage microcode trigger mechanism for an AES imple-
mentation. For a speciﬁc magic plaintext, we insert a fault in
the last KeyAddition operation so that the ciphertext is always
equivalent to the last round key by setting the state after the
last ShiftRows operation to zero. Based on the last round key,
we can compute the main key [34].
Our Trojan leverages a microcoded instruction matching
state machine that spans multiple instructions and, depending
on its state, executes speciﬁc trigger functionality or payload.
Figure 6 shows the high-level attack idea of our Trojan.
7.1 Microcode Trojan Design
We now detail our multi-stage microcode Trojan trigger and
payload design to insert sophisticated faults during cryp-
tographic processing to leak its keys. We build a sophisti-
cated state machine-based Trojan trigger to share informa-
276    30th USENIX Security Symposium
USENIX Association
50000100000#Measurements1500002000000051015202530t050000100000#Measurements051015202530t15000020000050000100000#Measurements1500002000000051015202530tAES Overview
AES Source Code
Trojan Stages
AES_128_encrypt :
...
// load plaintext
0( a1 )
lw
a3 ,
lw
4( a1 )
a4 ,
a5 ,
lw
8( a1 )
lw
a6 , 12( a1 )
// encryption
...
// load last key
lw
lw
lw
lw
t0 , 160( a0 )
t1 , 164( a0 )
t2 , 168( a0 )
t3 , 172( a0 )
// final key add
xor
xor