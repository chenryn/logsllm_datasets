# Rubeus - 现在拥有更多的Kekeo功能
|
##### 译文声明
本文是翻译文章，文章原作者 harmj0y，文章来源：harmj0y.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者摘要： 本文是[从 Kekeo 到 Rubeus](https://www.anquanke.com/post/id/161781)
的后续，作者继续更新了 Rubeus 项目，实现了更多的 Kekeo 功能。主要介绍了虚假代理 TGT 和 基于 Kerberos
的口令更改等新功能及其原理。
[Rubeus](https://github.com/GhostPack/Rubeus), 是我将 @gentilkiwi 写的
[Kekeo](https://github.com/gentilkiwi/kekeo/) 工具集的部分功能用 C#
重新实现的一个项目。目前已经发布了更新的 1.1.0 版本，并在在 1.2.0
版本中实现了新的功能。此篇文章将会介绍主要的新功能和其他的一些修改，并将深入探讨最酷的新功能 – 虚假代理TGT和基于Kerberos的口令更改。
像以前一样，我想强调 @gentilkiwi 才是这些技术的原创者，此项目只是他的工作的一个重新实现。要不是有
[Kekeo](https://github.com/gentilkiwi/kekeo/)
，我是永远也想不出这些攻击技术的。我发现除非我亲自去实现，否则我无法真正理解某个原理，因此我将继续重新实现 Kekeo 的功能。我将尽量去解释清楚
tgt::deleg/tgtdeleg 和 misc::changepw/changepw 函数（Kekeo 和 Rubeus
都有使用）的底层原理，这样大家都能对 Benjamin 实现的内容有所了解。
但是首先，为了便于讲解我将先介绍一些背景知识。
## 从 TGT 到 .kirbis
正如我们传统上所理解的那样，在 Kerberos 交换中使用一个 hash （ntlm/rc4_hmac, aes128_cts_hmac,
aes256_cts_hmac. .等）从域控（也称为KDC，即密钥分发中心）获取票证授予票证（TGT）。在 Kerberos 语言中，这个交换过程涉及到向
KDC/DC 发送 AS-REQ（身份认证服务请求）进行身份认证，如果成功则将会生成一个 AS-REP
（身份认证服务回复），其中包含一个TGT。但其实它还包含着其他内容。
Big note： TGT 本身是没用的。TGT 是用 Kerberos 服务（krbtgt）哈希加密/签名的不透明 blob
数据，所以普通用户无法将其解码。那么，TGT 实际上是如何使用的呢？
在成功认证用户后返回的 AS-REQ 中，TGT不是唯一的数据块，还有一个”加密的部分”，它是一个被标记的 [EncKDCRepPart
结构](https://github.com/gentilkiwi/kekeo/blob/fd852374dfcfae4ddf5e19e4d8eeb03833f08963/modules/asn1/KerberosV5Spec2.asn#L209-L227)
，使用用户的 hash 进行加密。使用的哈希格式（rc4_hmac, aes256_cts_hmac_sha1, 等）会在初始交换过程中进行协商。当这个
blob 被解密时，它会包含一组元数据，包括启动时间，结束时间，票据的更新期限等，但最重要的是它还会包含一个会话密钥，该密钥同时存在于不透明的 TGT
blob 中（也是被用户的 krbtgt hash 进行加密的）。
那么用户/主机是如何“使用”TGT的呢？它会提供 TGT 和使用会话密钥加密的认证器 ——
这就证明客户端是知道在初始认证交换过程中所返回的会话密钥的（因此也会包含在 TGT 中）。TGT 续订，服务票据请求和 S4U 请求都会需要这个会话密钥。
那么这就说得通了;)
所有这些数据都会包含在一个 KRB-CRED 结构中。这就是 Mimikatz 语言中的 .kirbi 文件，代表通过已建立的 LSA API 提交的完整的
Kerberos 凭证的编码结构。因此，当我们谈论 “TGT” 时，我们实际上指的是可用的 TGT .kirbi
文件（其中包含有明文的会话密钥），而不仅仅是 TGT blob。我们将更深入的介绍一下这个重要区别。
此外，我还想快速地介绍一下从管理员权限和非管理员权限的条件下提取 Kerberos 票据的差异。Rubeus 的 dump 命令将根据 Rubeus
运行时所处的完整性级别来自动采取合适的方法。
如果是管理员权限，则一般的执行方法是：
  1. 提取至系统权限。
  2. 使用 [LsaRegisterLogonProcess()](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaregisterlogonprocess) （需要SYSTEM权限）注册一个虚假的登录进程。这将向 LSA 服务器返回一个特权句柄。
  3. 使用 [LsaEnumerateLogonSessions()](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaenumeratelogonsessions) 枚举当前登陆会话。
  4. 对于每个登录会话，构建一个 [KERB_QUERY_TKT_CACHE_REQUEST](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ns-ntsecapi-_kerb_query_tkt_cache_request) 结构，用来表示此登录会话的 logon session ID ，和一个 [KerbQueryTicketCacheMessage](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ne-ntsecapi-_kerb_protocol_message_type) 类型的消息类型。这将返回指定用户的登录会话中所缓存的所有 Kerberos 票据的相关信息。
  5. 使用 KERB_QUERY_TKT_CACHE_REQUEST 调用 [LsaCallAuthenticationPackage()](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsacallauthenticationpackage) ，并解析返回的票据缓存信息。
  6. 对于缓存中的每个票据信息位，构建一个 [KERB_RETRIEVE_TKT_REQUEST](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ns-ntsecapi-_kerb_retrieve_tkt_request) 结构，此结构包含的内容为：[KerbRetrieveEncodedTicketMessage](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ne-ntsecapi-_kerb_protocol_message_type) 的消息类型，当前正在迭代的登录会话ID，以及当前正在迭代的缓存中的票据所包含的目标服务器（即SPN）。这表明我们需要缓存中指定的服务票据的编码 KRB-CRED (.kirbi) blob 数据。PS – [用C#实现这个的过程比较令人讨厌 😉](https://github.com/GhostPack/Rubeus/blob/4c9145752395d48a73faf326c4ae57d2c565be7f/Rubeus/lib/LSA.cs#L506-L524)
  7. 使用 KERB_RETRIEVE_TKT_REQUEST 调用 [LsaCallAuthenticationPackage()](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsacallauthenticationpackage) 并解析返回的 .kirbi 票据信息。
以上操作将返回当前系统上的登录的所有用户的所有 TGT 和 服务票据的完整 .kirbi blob 数据，无无须打开 LSASS
的读取句柄。当然你也可以选择使用 Mimikatz 的 sekurlsa::tickets /export 命令直接从 LSASS 进程的内存中导出所有的
Kerberos 票据，但是记住，那不是唯一的方法：）
如果你处于非管理员权限，[则与上述的方法略有不同](https://github.com/GhostPack/Rubeus/blob/4c9145752395d48a73faf326c4ae57d2c565be7f/Rubeus/lib/LSA.cs#L685-L935):
  1. 使用 [LsaConnectUntrusted()](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaconnectuntrusted) 打开一个与 LSA 的不可信连接；
  2. 使用 [KerbQueryTicketCacheMessage](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ne-ntsecapi-_kerb_protocol_message_type) 消息类型构建一个 [KERB_QUERY_TKT_CACHE_REQUEST](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ns-ntsecapi-_kerb_query_tkt_cache_request)，将返回当前用户的登录会话中缓存的所有 Kerberos 票据信息；
  3. 使用 KERB_QUERY_TKT_CACHE_REQUEST 调用 [LsaCallAuthenticationPackage()](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsacallauthenticationpackage)，并解析返回的缓存票据信息；
  4. 对于缓存中的每个票据信息位，构建一个消息类型为 [KerbRetrieveEncodedTicketMessage](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ne-ntsecapi-_kerb_protocol_message_type) 的 [KERB_RETRIEVE_TKT_REQUEST](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/ns-ntsecapi-_kerb_retrieve_tkt_request) 结构，和缓存中我们正在迭代的票据的目标服务器（即SPN）。这表明我们需要缓存中指定的服务票据的编码 KRB-CRED (.kirbi) blob 数据；
  5. 使用 KERB_RETRIEVE_TKT_REQUEST 调用 [LsaCallAuthenticationPackage()](https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsacallauthenticationpackage) 并解析返回的 .kirbi 票据信息。
如果不是管理员权限，逻辑上只能请求当前登录会话的票据。并且，在 win7 以上系统，Windows 限制了从用户空间对 TGT 会话密钥的提取，所以当转储
TGT 时，你会得到如下结果：
这说明如果没有管理员权限，则无法为当前用户提取到可用 TGT .kirbis，请求到的会话密钥为空。图中 Mimikatz 的输出显示，
[Microsoft 使用一个注册表项(allowtgtsessionkey)](https://support.microsoft.com/en-us/help/308339/registry-key-to-allow-session-keys-to-be-sent-in-kerberos-ticket-grant) 来允许返回 TGT 会话密钥。但是，默认情况下不启用此键值，并且需要管理员权限才能修改。
下文中的 tgtdeleg 章节将解释 Benjamin 绕过此限制的技巧。
返回会话密钥是为了制作服务票据。后面我们将看到其重要性。
## asktgs
第一个“重大的”新功能是通用服务票据请求：
    Rubeus.exe asktgs   [/dc:DOMAIN_CONTROLLER] [/ptt]
asktgs 功能和 asktgt 功能一样，接受 /dc:X /ptt 参数。/ticket:X 参数一样是接受 .kirbi 文件的 base64
编码或 .kirbi 文件在磁盘上的路径。这票据是一个以 .kirbi 文件格式表示的 TGT （如前所述，完整的会话密钥），因此我们能够在一个 TGS-REQ/TGS-REP 交换中正确的请求一个服务票据。
/service:SPN 参数是必须的，用于指定要请求的服务票据的服务主体名称（SPN）。这个参数指定一个或多个以逗号分隔的 SPN 。如下所示：
    C:Temptickets>Rubeus.exe asktgt /user:harmj0y /rc4:2b576acbe6bcfda7294d6bd18041b8fe
       ______        _
      (_____       | |
       _____) )_   _| |__  _____ _   _  ___
      |  __  /| | | |  _ | ___ | | | |/___)
      | |   | |_| | |_) ) ____| |_| |___ |
      |_|   |_|____/|____/|_____)____/(___/
      v1.0.0
    [*] Action: Ask TGT
    [*] Using rc4_hmac hash: 2b576acbe6bcfda7294d6bd18041b8fe
    [*] Using domain controller: PRIMARY.testlab.local (192.168.52.100)
    [*] Building AS-REQ (w/ preauth) for: 'testlab.localharmj0y'
    [*] Connecting to 192.168.52.100:88
    [*] Sent 232 bytes
    [*] Received 1405 bytes
    [+] TGT request successful!
    [*] base64(ticket.kirbi):
          doIFFjCCBRKgAwIBBa...(snip)...
    C:Temptickets>Rubeus.exe asktgs /ticket:doIFFjCCBRKgAwIBBa...(snip...)== /service:LDAP/primary.testlab.local,cifs/primary.testlab.local /ptt
       ______        _
      (_____       | |
       _____) )_   _| |__  _____ _   _  ___
      |  __  /| | | |  _ | ___ | | | |/___)
      | |   | |_| | |_) ) ____| |_| |___ |
      |_|   |_|____/|____/|_____)____/(___/
      v1.0.0
    [*] Action: Ask TGS
    [*] Using domain controller: PRIMARY.testlab.local (192.168.52.100)
    [*] Building TGS-REQ request for: 'LDAP/primary.testlab.local'
    [*] Connecting to 192.168.52.100:88
    [*] Sent 1384 bytes
    [*] Received 1430 bytes
    [+] TGS request successful!
    [*] base64(ticket.kirbi):
          doIFSjCCBUagAwIBBaEDA...(snip)...
    [*] Action: Import Ticket
    [+] Ticket successfully imported!
    [*] Action: Ask TGS
    [*] Using domain controller: PRIMARY.testlab.local (192.168.52.100)