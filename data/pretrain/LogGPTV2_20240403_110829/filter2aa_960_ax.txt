ing a connection to your database, testing to make sure no errors occurred, 
and deferring a call to close the session. You then use the session variable to 
query the store database w, retrieving all the records from the transactions 
collection. You store the results in a Transaction slice, named results. Under 
the covers, your structure tags are used to unmarshal the binary JSON to 
your defined type. Finally, loop over your result set and print them to the 
screen x. In both this case and the SQL sample in the next section, your 
output should look similar to the following:
$ go run main.go 
4444333322221111 2019-01-05 100.12 1234 09/2020
前沿信安资讯阵地  公众号：i nf osrc
160   Chapter 7
4444123456789012 2019-01-07 2400.18 5544 02/2021
4465122334455667 2019-01-29 1450.87 9876 06/2020
Querying SQL Databases
Go contains a standard package, called database/sql, that defines an inter-
face for interacting with SQL and SQL-like databases. The base implemen-
tation automatically includes functionality such as connection pooling and 
transaction support. Database drivers adhering to this interface automati-
cally inherit these capabilities and are essentially interchangeable, as the 
API remains consistent between drivers. The function calls and implemen-
tation in your code are identical whether you’re using Postgres, MSSQL, 
MySQL, or some other driver. This makes it convenient to switch backend 
databases with minimal code change on the client. Of course, the drivers 
can implement database-specific capabilities and use different SQL syntax, 
but the function calls are nearly identical. 
For this reason, we’ll show you how to connect to just one SQL database— 
MySQL—and leave the other SQL databases as an exercise for you. You 
start by installing the driver with the following command:
$ go get github.com/go-sql-driver/mysql
Then, you can create a basic client that connects to the database and 
retrieves the information from your transactions table—using the script in 
Listing 7-7.
package main
import (
    "database/sql" u
    "fmt"
    "log"
    "github.com/go-sql-driver/mysql" v
)
func main() {
    db, err := sql.Open("mysql", "root:password@tcp(127.0.0.1:3306)/store")w
    if err != nil {
        log.Panicln(err)
    }   
    defer db.Close()
    var (
        ccnum, date, cvv, exp string
        amount                float32
    )   
    rows, err := db.Query("SELECT ccnum, date, amount, cvv, exp FROM transactions") x
前沿信安资讯阵地  公众号：i nf osrc
Abusing Databases and Filesystems   161
    if err != nil {
        log.Panicln(err)
    }   
    defer rows.Close()
    for rows.Next() {
        err := rows.Scan(&ccnum, &date, &amount, &cvv, &exp)y
        if err != nil {
            log.Panicln(err)
        }
        fmt.Println(ccnum, date, amount, cvv, exp)
    }   
    if rows.Err() != nil {
        log.Panicln(err)
    }
}
Listing 7-7: Connecting to and querying a MySQL database (/ch-7/db /mysql-connect/main.go)
The code begins by importing Go’s database/sql package u. This allows 
you to utilize Go’s awesome standard SQL library interface to interact with 
the database. You also import your MySQL database driver v. The leading 
underscore indicates that it’s imported anonymously, which means its 
exported types aren’t included, but the driver registers itself with the sql 
package so that the MySQL driver itself handles the function calls.
Next, you call sql.Open() to establish a connection to our database w. 
The first parameter specifies which driver should be used—in this case, the 
driver is mysql—and the second parameter specifies your connection string. 
You then query your database, passing an SQL statement to select all rows 
from your transactions table x, and then loop over the rows, subsequently 
reading the data into your variables and printing the values y.
That’s all you need to do to query a MySQL database. Using a different 
backend database requires only the following minor changes to the code:
1. Import the correct database driver.
2. Change the parameters passed to sql.Open().
3. Tweak the SQL syntax to the flavor required by your backend database.
Among the several database drivers available, many are pure Go, while 
a handful of others use cgo for some underlying interaction. Check out the 
list of available drivers at https://github.com/golang/go/wiki/SQLDrivers/. 
Building a Database Miner
In this section, you will create a tool that inspects the database schema (for 
example, column names) to determine whether the data within is worth pil-
fering. For instance, say you want to find passwords, hashes, social security 
前沿信安资讯阵地  公众号：i nf osrc
162   Chapter 7
numbers, and credit card numbers. Rather than building one monolithic 
utility that mines various backend databases, you’ll create separate utilities— 
one for each database—and implement a defined interface to ensure con-
sistency between the implementations. This flexibility may be somewhat 
overkill for this example, but it gives you the opportunity to create reusable 
and portable code.
The interface should be minimal, consisting of a few basic types and 
functions, and it should require the implementation of a single method to 
retrieve database schema. Listing 7-8, called dbminer.go, defines the data-
base miner’s interface.
package dbminer
import (
    "fmt"
    "regexp"
)
u type DatabaseMiner interface {
    GetSchema() (*Schema, error)
}
v type Schema struct {
    Databases []Database
}
type Database struct {
    Name   string
    Tables []Table
}
type Table struct {
    Name    string
    Columns []string
}
w func Search(m DatabaseMiner) error {
    x s, err := m.GetSchema()
    if err != nil {
        return err
    }
    re := getRegex()
    y for _, database := range s.Databases {
        for _, table := range database.Tables {
            for _, field := range table.Columns {
                for _, r := range re {
                    if r.MatchString(field) {
                        fmt.Println(database)
                        fmt.Printf("[+] HIT: %s\n", field)
                    }
前沿信安资讯阵地  公众号：i nf osrc
Abusing Databases and Filesystems   163
                }
            }
        }
    }
    return nil
}
z func getRegex() []*regexp.Regexp {
    return []*regexp.Regexp{
        regexp.MustCompile(`(?i)social`),
        regexp.MustCompile(`(?i)ssn`),
        regexp.MustCompile(`(?i)pass(word)?`),
        regexp.MustCompile(`(?i)hash`),
        regexp.MustCompile(`(?i)ccnum`),
        regexp.MustCompile(`(?i)card`),
        regexp.MustCompile(`(?i)security`),
        regexp.MustCompile(`(?i)key`),
    }
}
/* Extranneous code omitted for brevity */
Listing 7-8: Database miner implementation (/ch-7/db /dbminer/dbminer.go)
The code begins by defining an interface named DatabaseMiner u. A 
single method, called GetSchema(), is required for any types that implement 
the interface. Because each backend database may have specific logic to 
retrieve the database schema, the expectation is that each specific utility 
can implement the logic in a way that’s unique to the backend database 
and driver in use.
Next, you define a Schema type, which is composed of a few subtypes 
also defined here v. You’ll use the Schema type to logically represent the 
database schema—that is, databases, tables, and columns. You might have 
noticed that your GetSchema() function, within the interface definition, 
expects implementations to return a *Schema.
Now, you define a single function, called Search(), which contains the 
bulk of the logic. The Search() function expects a DatabaseMiner instance to 
be passed to it during the function call, and stores the miner value in a vari-
able named m w. The function starts by calling m.GetSchema() to retrieve the 
schema x. The function then loops through the entire schema, searching 
against a list of regular expression (regex) values for column names that 
match y. If it finds a match, the database schema and matching field are 
printed to the screen.
Lastly, define a function named getRegex() z. This function compiles 
regex strings by using Go’s regexp package and returns a slice of these values. 
The regex list consists of case-insensitive strings that match against common 
or interesting field names such as ccnum, ssn, and password.
With your database miner’s interface in hand, you can create utility-
specific implementations. Let’s start with the MongoDB database miner. 
前沿信安资讯阵地  公众号：i nf osrc
164   Chapter 7
Implementing a MongoDB Database Miner
The MongoDB utility program in Listing 7-9 implements the interface 
defined in Listing 7-8 while also integrating the database connectivity 
code you built in Listing 7-6.
package main
import (
    "os"
    u "github.com/bhg/ch-7/db/dbminer"
    "gopkg.in/mgo.v2"
    "gopkg.in/mgo.v2/bson"
)
v type MongoMiner struct {
    Host    string
    session *mgo.Session
}
w func New(host string) (*MongoMiner, error) {
    m := MongoMiner{Host: host}
    err := m.connect()
    if err != nil {
        return nil, err 
    }   
    return &m, nil 
}
x func (m *MongoMiner) connect() error {
    s, err := mgo.Dial(m.Host)
    if err != nil {
        return err 
    }   
    m.session = s 
    return nil 
}
y func (m *MongoMiner) GetSchema() (*dbminer.Schema, error) {
    var s = new(dbminer.Schema)
    dbnames, err := m.session.DatabaseNames()z
    if err != nil {
        return nil, err 
    }   
    for _, dbname := range dbnames {
        db := dbminer.Database{Name: dbname, Tables: []dbminer.Table{}}
        collections, err := m.session.DB(dbname).CollectionNames(){
        if err != nil {
            return nil, err 
        }
前沿信安资讯阵地  公众号：i nf osrc
Abusing Databases and Filesystems   165
        for _, collection := range collections {
            table := dbminer.Table{Name: collection, Columns: []string{}}
            var docRaw bson.Raw
            err := m.session.DB(dbname).C(collection).Find(nil).One(&docRaw)|
            if err != nil {
                return nil, err 
            }
            var doc bson.RawD
            if err := docRaw.Unmarshal(&doc); err != nil {}
                if err != nil {
                    return nil, err 
                }
            }
            for _, f := range doc {
                table.Columns = append(table.Columns, f.Name)
            }
            db.Tables = append(db.Tables, table)
        }
        s.Databases = append(s.Databases, db) 
    }   
    return s, nil 
}
func main() {
    mm, err := New(os.Args[1])
    if err != nil {
        panic(err)
    }   
    ~ if err := dbminer.Search(mm); err != nil {
        panic(err)
    }
}
Listing 7-9: Creating a MongoDB database miner (/ch-7/db/mongo/main.go)
You start by importing the dbminer package that defines your Database 
Miner interface u. Then you define a MongoMiner type that will be used to 
implement the interface v. For convenience, you define a New() function 
that creates a new instance of your MongoMiner type w, calling a method 
named connect() that establishes a connection to the database x. The 
entirety of this logic essentially bootstraps your code, connecting to 
the database in a fashion similar to that discussed in Listing 7-6.
The most interesting portion of the code is your implementation of 
the GetSchema() interface method y. Unlike in the previous MongoDB 
sample code in Listing 7-6, you are now inspecting the MongoDB meta-
data, first retrieving database names z and then looping over those data-
bases to retrieve each database’s collection names {. Lastly, the function 
retrieves the raw document that, unlike a typical MongoDB query, uses lazy 
前沿信安资讯阵地  公众号：i nf osrc
166   Chapter 7
unmarshaling |. This allows you to explicitly unmarshal the record into 
a generic structure so that you can inspect field names }. If not for lazy 
unmarshaling, you would have to define an explicit type, likely using bson 
tag attributes, in order to instruct your code how to unmarshal the data 
into a struct you defined. In this case, you don’t know (or care) about the 
field types or structure—you just want the field names (not the data)—so 
this is how you can unmarshal structured data without needing to know the 
structure of that data beforehand.
Your main() function expects the IP address of your MongoDB instance 
as its lone argument, calls your New() function to bootstrap everything, and 
then calls dbminer.Search(), passing to it your MongoMiner instance ~. Recall 
that dbminer.Search() calls GetSchema() on the received DatabaseMiner instance; 
this calls your MongoMiner implementation of the function, which results in 
the creation of dbminer.Schema that is then searched against the regex list in 
Listing 7-8. 
When you run your utility, you are blessed with the following output:
$ go run main.go 127.0.0.1
[DB] = store
    [TABLE] = transactions
       [COL] = _id
       [COL] = ccnum
       [COL] = date
       [COL] = amount
       [COL] = cvv
       [COL] = exp
[+] HIT: ccnum
You found a match! It may not look pretty, but it gets the job done—
successfully locating the database collection that has a field named ccnum. 
With your MongoDB implementation built, in the next section, you’ll 
do the same for a MySQL backend database.
Implementing a MySQL Database Miner
To make your MySQL implementation work, you’ll inspect the information 
_schema.columns table. This table maintains metadata about all the databases 
and their structures, including table and column names. To make the data 
the simplest to consume, use the following SQL query, which removes infor-
mation about some of the built-in MySQL databases that are of no conse-
quence to your pillaging efforts:
SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM columns
    WHERE TABLE_SCHEMA NOT IN ('mysql', 'information_schema', 'performance_schema', 'sys')
    ORDER BY TABLE_SCHEMA, TABLE_NAME
前沿信安资讯阵地  公众号：i nf osrc
Abusing Databases and Filesystems   167
The query produces results resembling the following:
+--------------+--------------+-------------+
| TABLE_SCHEMA | TABLE_NAME   | COLUMN_NAME |
+--------------+--------------+-------------+
| store        | transactions | ccnum       |