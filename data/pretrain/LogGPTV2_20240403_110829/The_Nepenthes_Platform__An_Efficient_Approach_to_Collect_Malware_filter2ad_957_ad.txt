639
540
501
497
442
386
357
Worm.Padobot.M
1
Trojan.Gobot-3
2
Worm.Padobot.N
3
Trojan.Gobot-4
4
Trojan.Poebot-3
5
Trojan.IRCBot-16
6
7
Worm.Padobot.P
8 Trojan.Downloader.Delf-35
9
Trojan.Mybot-1411
Trojan.Ghostbot.A
10
PE or MZ ﬁles, i.e., binaries targeting systems running Windows as operating
system. This is no surprise since nepenthes currently focuses on emulating only
vulnerabilities of Windows.
For the binaries we have collected, we found that about 7% of them are
broken, i.e., some part of the header- or body-structure is corrupted. Further
analysis showed that this is mainly caused by faulty propagation attempts. If
the malware for examples spreads further with the help of TFTP (Trivial File
Transfer Protocol), this transfer can be faulty since TFTP relies on the unreliable
UDP protocol. Furthermore, a download can lead to a corrupted binary if the
attacking station stops the infection process, e.g., because it is disconnected from
the Internet.
The remaining 14,414 binaries are analyzed with diﬀerent antivirus (AV) en-
gines. Since we know that each binary tried to propagate further, we can assume
that each binary is malicious. Thus a perfect AV engine should detect 100% of
these samples as malicious. However, we can show that the current signature-
based AV engines are far away from being perfect. Table 2 gives an overview of
the results we obtained with four diﬀerent AV engines. If we scan the whole set
of more than 14,000 binaries, we see that the results range between 80 and 90
%, thus all AV solutions are missing a signiﬁcant amount of malware. If we scan
only the latest ﬁles, i.e., ﬁles that we have captured within the last 24 hours, the
statistics get even worse. Table 2 gives also an overview of the detection rate for
460 unique ﬁles that were captured within 24 hours. We see that the detection
rates are lower compared to the overall rate. Thus “fresh” malware is often not
detected since the AV vendors do not have signatures for this new threats.
Table 3 gives an overview of the top ten malware types we collected. We
obtained this results by scanning the malware samples with the free AV engine
The Nepenthes Platform: An Eﬃcient Approach to Collect Malware
181
ClamAV. In total, we could identify 642 diﬀerent types of malware. The table
shows that bots clearly dominate the samples we collect. This is mainly caused
by the large number of botnets in the wild and the aggressive spreading of the
individual bots. Interestingly is also the number of captured samples compared
to the malware name. Please remember that we classify a samples as unique with
the help of the MD5 sum. This means that 1136 diﬀerent samples are detected
as Worm.Padobot.M.
4 Future Work
In this section we want to give an overview of further work in the area of ne-
penthes and large-scale honeynet deployments. An extension of the nepenthes
platform to support UDP-based exploits is straightforward. Most of these ex-
ploits are “single-shot” attempts that just send one UDP packet. Therefore it is
only necessary to capture the payload and analyze it, we do not need to emulate
any service at all. However, if the exploit requires interaction with the honey-
pot, we can use the same concept as for TCP-based exploits: we just emulate
the necessary parts and trick the exploit.
The current nepenthes platform is another building block towards an auto-
mated system to eﬀectively stop remote control networks. Such networks are
needed by attackers to coordinate automated activity, e.g. to send commands
to a large number of compromised machines. An example of such a remote con-
trol network is a botnet, i.e., a network of compromised machines that can be
remotely controlled by an attacker. The whole process of stopping such a net-
work is depicted in Figure 6. With the help of nepenthes, we can now automate
step 1 to a high degree. Without supervision, this platform can collect malware
that currently propagates within a network. We are currently working on step
2 - an automated mechanism to extract the sensitive information of a remote
control network from a given binary. With the help of honeypots, we can au-
tomate this step to a certain degree. In addition, we explore possible ways to
use sandbox-like techniques to extract this information during runtime. Thirdly,
we can use static binary analysis, but it seems like this approach cannot be
automated easily. Step 3 in the whole process can be automated as outlined in
[6]: we impersonate as a legal victim and inﬁltrate the network. This allows us
to study the attacker and his techniques, collect more information about other
victims, or learn about new trends. Finally, step 4 can be automated to a limited
degree with the help of techniques such as stooping the communication channel
between victims and remote control server, or other ways to shut-down the main
server itself [8]. This step also needs some further research, but it seems viable
that this can also be automated to a high degree. The whole process would then
allow us to automatically defend against these kind of attacks in a pro-active
manner. An automated system is desirable since this kind of attacks is a growing
threat within the attacker community.
We are currently in the process of deploying a network intrusion detection
system (NIDS) based on nepenthes. In cooperation with SurfNET, we want
to explore feasible ways of using honeypots as a new kind of IDS. The goals
182
P. Baecher et al.
Fig. 6. Four steps to stop remote control networks
of this project are manifold: one the one hand, the system should enable us to
understand the types and amount of malicious traﬃc within a LAN. In addition,
it should stop spreading worms and other kinds of malware. The literature in
this ﬁeld shows some ways how to achieve this goal with honeypots [14]. On the
other hand, the solution must be scalable and easy to manage and maintain.
Zero-maintenance of the individual sensors is desirable and a missing feature
of existing solutions. Our current experience shows that nepenthes scales well
to a couple of thousand honeypots with just one physical machine. In addition,
a hierarchical setup can be used to distribute load if an even larger setup is
needed. The nepenthes platform can also scale to high-speed networks due to
its limited amount of memory resource and only moderate amount of processing
resources needed. Furthermore, the proposed NIDS should have close to no false
positives. Up to now, we did not have any false positives with our nepenthes
setup, so this goal seems to be reachable. This is mainly due to the assumption
of honeypots: all network traﬃc is suspicious. False negatives of our platform
generate a log-entry and all captured information about network traﬃc that
could not be handled are saved. This way, all possible information to help in
avoiding false negatives is already available for analysis by a human.
Finally, an empirical analysis of the eﬀectiveness of a distributed nepenthes
setup is desirable. Nepenthes oﬀers the possibility of distributed deployment
as outlined in Section 2.2 and a recent study concludes that distributed worm
monitoring oﬀers several advantages in regards to detection time [15]. Those
results are obtained with the help of captured packet traces. With the help of
nepenthes, the results could be veriﬁed on live data. Additionally, such a study
would reveal to what degree a certain piece of malware spreads locally.
5 Conclusion
In this paper we introduced the nepenthes platform. This is a new kind of
honeypot-based system that specializes in large-scale malware collection. Ne-
penthes inherits the scalability of low-interaction honeypots but at the same
time oﬀers a high degree of expressiveness. This goal is reached by emulating
only the vulnerable parts of a service. This leads to an eﬃcient and eﬀective so-
lution that oﬀers many advantages compared to other honeypot-based solutions.
The main advantage is the ﬂexibility: an ordinary honeypot solution has to use
a ﬁxed conﬁguration. If an incoming exploit targets another conﬁguration, this
The Nepenthes Platform: An Eﬃcient Approach to Collect Malware
183
exploit will fail. In contrast to this, one instance of nepenthes can be exploited
by a wide array of exploits since nepenthes is ﬂexible in the emulation process.
It can decide during runtime which oﬀset is the correct one to get successfully
exploited. Several other factors like virtual ﬁlesystem and shell emulation con-
tribute further to the enhanced scalability. With only one physical machine we
are able to listen to more than 16,000 IP addresses in parallel.
We have collected millions of malware samples currently spreading in the wild.
A further examination of more than 14,000 unique and valid binaries showed that
current anti-virus engines have some limitations and fail to detect all malware
propagating in the wild. Moreover, we presented some ideas how nepenthes could
be used as the basic block of an automated system to stop botnets or as part of
a next-generation network intrusion detection system.
References
1. K. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis, E. Markatos, and
In Pro-
A. Keromytis. Detecting Targeted Attacks Using Shadow Honeypots.
ceedings of the 14th USENIX Security Symposium, 2005.
2. Michael Bailey, Evan Cooke, Farnam Jahanian, Jose Nazario, and David Watson.
The Internet Motion Sensor: A Distributed Blackhole Monitoring System. In Pro-
ceedings of the 12th Annual Network and Distributed System Security Symposium
(NDSS 05), 2005.
3. Edward Balas and Camilo Viecco. Towards a Third Generation Data Capture Ar-
chitecture for Honeynets. In Proceeedings of the 6th IEEE Information Assurance
Workshop, West Point, 2005. IEEE.
4. Team Cymru: The Darknet Project. Internet: http://www.cymru.com/Darknet/,
Accessed: 2006.
5. David Dagon, Cliﬀ Zou, and Wenke Lee. Modeling Botnet Propagation Using Time
Zones. In Proceedings of the 13th Annual Network and Distributed System Security
Symposium (NDSS 06), 2006.
6. Felix Freiling, Thorsten Holz, and Georg Wicherski. Botnet Tracking: Exploring a
Root-Cause Methodology to Prevent Distributed Denial-of-Service Attacks. In 10th
European Symposium On Research In Computer Security, ESORICS05, Milano,
Italy, September 12-14, 2005, Proceedings, Lecture Notes in Computer Science.
Springer, 2005.
7. Thorsten Holz. A Short Visit to the Bot Zoo. IEEE Security & Privacy, 3(3):76–79,
2005.
2003.
8. Thorsten Holz. Spying With Bots. USENIX ;login:, 30(6):18–23, 2005.
9. Xuxian Jiang and Dongyan Xu. Collapsar: A vm-based architecture for network
attack detention center. In Proceedings of 13th USENIX Security Symposium, 2004.
10. Bill McCarty. Automated Identity Theft. IEEE Security & Privacy, 1(5):89–92,
11. David Moore, Colleen Shannon, Geoﬀrey M. Voelker, and Stefan Savage. Network
Telescopes. Technical Report TR-2004-04, CAIDA, 2004.
12. David Moore, Geoﬀrey M. Voelker, and Stefan Savage. Inferring Internet Denial-of-
Service Activity. In Proceedings of the 10th USENIX Security Symposium, August
2001.
ternet: http://www.few.vu.nl/∼porto/argos/, Accessed: 2006.
13. Georgios Portokalidis. Argos: An Emulator for Capturing Zero-Day Attacks. In-
184
P. Baecher et al.
14. Niels Provos. A Virtual Honeypot Framework. In Proceedings of 13th USENIX
Security Symposium, pages 1–14, 2004.
15. Moheeb Abu Rajab and Andreas Terzis. On the Eﬀectiveness of Distributed Worm
Monitoring. In Proceedings of the 14th USENIX Security Symposium, 2005.
16. Yoichi Shinoda, Ko Ikai, and Motomu Itoh. Vulnerabilities of Passive Internet
Threat Monitors. In Proceedings of the 14th USENIX Security Symposium, 2005.
17. Stuart Staniford, David Moore, Vern Paxson, and Nicholas Weaver. The Top Speed
of Flash Worms. In ACM Workshop on Rapid Malcode (WORM), 2004.
18. Symantec. Mantrap. Internet: http://www.symantec.com/, Accessed: 2006.
19. Nicolas Vanderavero, Xavier Brouckaert, Olivier Bonaventure, and Baudouin Le
Charlier. The HoneyTank : a scalable approach to collect malicious Internet traﬃc.
In Proceedings of the International Infrastructure Survivability Workshop, 2004.
20. Michael Vrable, Justin Ma, Jay Chen, David Moore, Erik Vandekieft, Alex C. Sno-
eren, Geoﬀrey M. Voelker, and Stefan Savage. Scalability, Fidelity, and Contain-
ment in the Potemkin Virtual Honeyfarm. In Proceedings of the ACM Symposium
on Operating System Principles (SOSP), 2005.
21. Kathy Wang. Honeyclient. Internet: http://honeyclient.org, Accessed: 2006.
22. Yi-Min Wang, Doug Beck, Chad Verbowski, Shuo Chen, Sam King, Xuxian Jiang,
and Roussi Roussev. Automated web patrol with strider honeymonkeys: Finding
web sites that exploit browser vulnerabilities. In Proceedings of the 13th Network
and Distributed System Security Symposium (NDSS 06), 2006.
23. Vinod Yegneswaran, Paul Barford, and Dave Plonka. On the Design and Use of In-
ternet Sinks for Network Abuse Monitoring. In Proceedings of the 7th International
Symposium on Recent Advances in Intrusion Detection (RAID), 2004.