extra bits used for various widths of the range (cid:2)eld. Since the real-
life databases have only 16-bit range (cid:2)elds, we used only random
databases for this evaluation. From the (cid:2)gure, we observe that by
using W extra bits for DIRPE (where W is the (cid:2)eld width), there
is a 50% increase in the database size that can be supported, and by
using 2W extra bits, there is a 80% increase in the database size.
3.4 Hybrid Approaches
If a database has a few ranges predominantly, database-
dependent schemes can be used in conjunction with DIRPE,
while still retaining the property that incremental updates are ef-
(cid:2)cient. Here, we consider a very simple variant of the database-
dependent scheme(cid:151)the k most frequent ranges are computed from
the database, and a single bit is assigned to each of the ranges, thus
reducing the expansion of all those ranges to 1.
Figure 7 plots the frequency distribution of the rules that expand
to a certain number of TCAM entries for a real-life database. The
(cid:2)rst graph shows that using 2 bits per range (cid:2)eld (based on the
frequency of occurrence of a range in the database) gives signif-
icant improvement. The second graph shows that even when the
r
o
t
c
a
f
i
n
o
s
n
a
p
x
e
w
o
r
n
e
v
g
i
a
r
o
f
s
e
u
r
f
l
o
n
o
i
t
c
a
r
F
r
o
t
c
a
f
i
n
o
s
n
a
p
x
e
w
o
r
n
e
v
g
i
a
r
o
f
s
e
u
r
f
l
o
n
o
i
t
c
a
r
F
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
 0.018
 0.016
 0.014
 0.012
 0.01
 0.008
 0.006
 0.004
 0.002
 0
Range to Prefix
2 bits each for most frequent ranges
 10
 100
Number of expanded TCAM entries
2 bits each for most frequent ranges
16 DIRPE bits + 2 bits for most frequent ranges
 10
 100
Number of expanded TCAM entries
Figure 7: Distribution of expansion for different ranges on a real-life
database with two range ﬁelds. The top ﬁgure shows how the frequency-
based range encoding improves preﬁx expansion. The bottom ﬁgure
shows how DIRPE further improves the expansion.
database-dependent scheme is used, DIRPE gives further improve-
ment over and above the database-dependent scheme.
Finally, we note that we found the usefulness of DIRPE is greater
in the newer database as compared to the older one. If the trend of
more range rules and more unique ranges continues (as illustrated
by Table 7, which presents the frequency distribution of unique
ranges in the databases from 1998 and 2004), we believe that the
bene(cid:2)ts of DIRPE will further increase in the future.
3.5 Practical Considerations in Using DIRPE
Recall from Section 2 that we have 36 extra bits available. For ta-
bles with a single 16-bit range (cid:2)eld, the DIRPE scheme with strides
4; 3; 3; 3; 3 can be used. 3 This encoding would use up 27 bits and
reduce the worst-case range expansion from 30 entries per rule to
9 entries per rule. The remaining 9 bits can be used to encode the
frequent ranges to achieve better real-life capacity.
For tables with two range (cid:2)elds, the (cid:2)eld with more unique
ranges can use strides 2; 2; 3; 3; 3; 3, and the other (cid:2)eld can use
strides 2; 2; 2; 2; 2; 3; 3. The extra bits used will be 18 and 13 re-
spectively. The remaining 5 bits can be used to encode the frequent
ranges for each of the two (cid:2)elds. These choices reduce the worst-
case expansion from 900 to 143 entries per rule. Applying this on
the 215K database, the expansion reduces from 2:69 to 1:12, a fac-
tor of more than two. Reducing the amount of TCAM needed on a
linecard by a factor of two today is signi(cid:2)cant, and the promise of
larger savings going forward (based on the database trends we have
observed) makes this scheme attractive.
3For reducing the worst-case expansion for a given number of extra bits, we
choose equal-width strides.
2W-2
s
w
o
r
M
A
C
T
f
o
r
e
b
m
u
N
Prefix expansion
(previously known result)
Search Key =(cid:13)
11010100(cid:13)
DIRPE using extra bits
Total # of 8-bit(cid:13)
rules = 5(cid:13)
[ 11xxxxxx(cid:13)
   1xxx0101(cid:13)
   xxxx0100(cid:13)
   010xxxx0(cid:13)
     xxxxxxxx  ](cid:13)
first match(cid:13)
( F1)(cid:13)
11xxxxxx(cid:13)
Set of all rules that(cid:13)
match F1 = 11xxxxxx(cid:13)
[  1xxx0101(cid:13)
   xxxx0100(cid:13)
      xxxxxxxx   ](cid:13)
second(cid:13)
match (F2)(cid:13)
xxxx0100(cid:13)
second(cid:13)
match(cid:13)
Set of all rules that match(cid:13)
11xxxxxx AND xxxx0100(cid:13)
3rd match(cid:13)
(F3)(cid:13)
xxxxxxxx(cid:13)
[  xxxxxxxx  ](cid:13)
No more rules to(cid:13)
match(cid:13)
[ ](cid:13)
Optimal
(Open problem)
1
W
Optimal for no row expansion
Number of bits used
2W-1
Figure 8: Our contribution towards database-independent range en-
coding schemes from a theoretical perspective. The previously known
result was expansion of ranges to preﬁxes. Our algorithm DIRPE uses
extra unused bits to achieve better worst-case expansion. For achieving
a row expansion of 1, we have shown that 2W (cid:0)1 bits are necessary, but
ﬁnding the optimal database-independent encoding is an open problem.
3.6 Future Directions
We have shown how we can reduce the row expansion of range
rules by using the additional bits in a TCAM array in a database-
independent manner. The question then is how far from optimal is
DIRPE in the following sense: To bound the worst case row expan-
sion to E, what is the minimum extra bits needed, and what is the
corresponding encoding? Given B extra bits, what is the least worst
case row expansion, and what is the corresponding encoding?
When the desired row expansion is 1, we have shown that 2W (cid:0)1
is necessary, but (cid:2)nding the optimal database-independent encod-
ing is an open problem. Figure 8 captures the state-of-the-art in
database-independent range encoding to the best of our knowledge.
4. MULTI-MATCH CLASSIFICATION
Traditional packet classi(cid:2)cation requires that, for a given search
key, the best matching rule be found. However, recently, many ap-
plications such as load balancers and intrusion detection systems
require (cid:2)nding multiple (or sometimes all) matches. TCAMs report
only the (cid:2)rst matching entry. To enable these applications, schemes
to (cid:2)nd multiple matches are necessary. We now formally de(cid:2)ne the
multi-match classi(cid:2)cation problem.
Multi-match Classiﬁcation Problem:
Consider a database Fdat consisting of N rules with cost
cost(Fi) associated with each rule Fi. The multi-match classiﬁ-
cation problem for (cid:2)nding (at most) k rules that match a search key
S is de(cid:2)ned as follows.
Find rules F mult
in Fdat such that:
; : : : ; F mult
1
k
(cid:15) Each of F mult
(cid:15) There is no other rule Fj in Fdat such that Fj is a match for
is a rule match for S.
i
S and cost(Fj) < cost(F mult
) for some i 2 [1; k].
i
We de(cid:2)ne the multi-match degree of an ACL database as the
maximum number of rules that can potentially match a key. In other
words, if the multi-match degree of a database is M, then there
exists a key S such that M rules match S and there is no key that
matches more than M rules. Figure 9 shows an example in which
the multi-match degree is 3.
Figure 10 shows the distribution of multi-match degree across
112 ACLs in a router database with a total of 215K rules. The
Figure 9: Example showing set of possible matches at every step of
multi-match classiﬁcation.
s(cid:13)
L
C
A
f
o
#
40(cid:13)
35(cid:13)
30(cid:13)
25(cid:13)
20(cid:13)
15(cid:13)
10(cid:13)
5(cid:13)
0(cid:13)
13(cid:13)
1(cid:13)
7(cid:13)
2(cid:13)
36(cid:13)
24(cid:13)
17(cid:13)
13(cid:13)
3(cid:13)
4(cid:13)
5(cid:13)
6(cid:13)
Multi-match degree (M)(cid:13)
1(cid:13)
7(cid:13)
1(cid:13)
8(cid:13)
Figure 10: Frequency distribution of multi-match degrees (maximum
number of rules that can match any key) for 112 ACLs.
largest ACL had 11781 rules. We now present a summary of the
multi-match characteristics we observed from this database.
(cid:15) The maximum multi-match degree is 8. The set of rules in
one such multi-match group is shown in Figure 11.
(cid:15) Most ACLs have a multi-match degree of 4 or 5.
(cid:15) The multi-match degree does not correlate well with the size
of the databases. Some ACLs with as few as 97 rules as well
as some with as high as 3060 rules both have the same multi-
match degree of 5. Another ACL with only 340 rules has a
multi-match degree of 8.
(cid:15) The snort database [2] has 2700 signatures, each having an
ACL speci(cid:2)ed on the packet header, and further patterns
based on packet content. We found that the set of ACLs that
were found in all these signatures comprised 276 rules. The
multi-match degree of all the unique ACL headers was 4.
Thus, real databases have several multiple matching rules; we
now review earlier approaches to (cid:2)nd multiple matches.
4.1 Earlier Approaches
4.1.1 Entry-Invalidation Scheme
Entry-invalidation scheme, one of the earliest and simplest
schemes, maintains the state of a multi-match search in the database
itself. A valid bit, an additional bit in the TCAM array, is associ-
ated with each entry in the TCAM. Searches are performed over a
subset of TCAM entries by setting the valid bits for those entries
only. When the search starts, the valid bit is set for all the entries.
Let the rule that matches be Fj. Now, the valid bit of Fj is unset
access-list 105 tcp 81.184.207.0 0.0.0.255 148.79.89.193 0.0.0.0 eq 6000
access-list 105 tcp 81.184.207.0 0.0.0.255 148.79.89.193 0.0.0.0 gt 1023
access-list 105 ip 81.184.207.202 0.0.0.0 148.79.89.193 0.0.0.0
access-list 105 tcp 81.184.207.202 0.0.0.0 148.79.89.193 0.0.0.0 lt 20608
access-list 105 tcp 81.184.207.202 0.0.0.0 148.79.89.193 0.0.0.0 lt 20616
access-list 105 tcp 0.0.0.0 255.255.255.255 0.0.0.0 255.255.255.255
access-list 105 ip 0.0.0.0 255.255.255.255 148.0.0.0 0.255.255.255