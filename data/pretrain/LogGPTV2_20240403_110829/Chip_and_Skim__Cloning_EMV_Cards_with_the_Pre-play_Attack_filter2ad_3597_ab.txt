criminal community to more sophisticated smart-card-based
attacks.
Prior research showed that it was possible to use a stolen
EMV card in a POS device without knowing the PIN. Given
a suitable man-in-the-middle device, a crook can trick the
terminal into believing that the right PIN was entered, while
the card thought it was authorising a chip-and-signature
transaction [3]; criminals have now gone on trial in France
for exploiting this “no-PIN” vulnerability [4].
However, the “no-PIN” vulnerability does not explain all
the cases where people contacted the authors having been
refused a refund for an ATM or POS transaction which they
adamantly deny having made. One such case was that of
Alain Job who sued his bank for a refund, but lost after
the judge concluded that the customer’s card was probably
used, not a clone [5]. In that case, the bank destroyed the log
ﬁles despite the fact that a dispute was underway, contrary
to Visa guidelines, and the judge warned that a court might
not be so tolerant of such behaviour in the future.
The number of such cases is unknown. The UK fraud
ﬁgures quoted above only count losses by banks and by
merchants, not those for which customers are blamed; and
since the introduction of EMV, the banks have operated
a “liability shift” as they describe it, which means that
when a transaction is disputed, then if a PIN was used
the customer is held liable, while if no PIN was used
the transaction is charged back to the merchant. Disputed
transactions where the bank’s records show a PIN was used
are seen by the banks not as frauds against the customer but
as attempted frauds by the customer (or perhaps negligence
by the customer) regardless of the fact that the no-PIN attack
falls into this category. This may be ideal from the banks’
viewpoint but is less so for their customers. The 2008/2009
British Crime Survey [6] found that 44% of fraud victims
didn’t get all their money back, despite both bank guidelines
and the European Payment Services Directive requiring that
customers who have not acted negligently or dishonestly
be refunded. Of the 44% who were not fully refunded for
their losses, 55% lost between £25 and £499 ($40 to $790)
and 32% lost £500 or more. So there’s a large gap between
the banks’ statistics and those from the crime survey. We
believe that the vulnerability we expose in this paper could
explain some of it; Mr Gabin’s case is not the only one
that has come to us where the attack we describe here is a
compelling explanation.
III. OVERVIEW OF AN ATM TRANSACTION
An EMV transaction consists of three phases:
1) card authentication in which card details are read
and authenticated by the ATM or POS terminal;
2) cardholder veriﬁcation in which the person who
presents the card is veriﬁed whether by PIN or sig-
nature; and
3) transaction authorization in which the issuing bank
decides whether the transaction should proceed.
The principals are the card, the ATM and the issuer1. The
process is illustrated in Figure 2. The description below
has been somewhat simpliﬁed, and represents typical UK
transaction ﬂow. Other countries may differ slightly, but will
be substantially similar.
During card authentication, the card provides data records
to the ATM, which include the card number, start and expiry
dates and which protocol options the card supports. The card
also provides a static RSA digital signature over selected
records, which aims to prevent crooks from fabricating cards
from known or guessed account numbers. Some cards also
provide dynamic signature generation capabilities, known as
“Dynamic Data Authentication” (DDA).
Following card authentication, cardholder veriﬁcation pro-
ceeds by signature or PIN. In an ATM transaction the card
is not involved in this. The customer enters their PIN on
the PIN pad, where it is encrypted and returned to the card
issuer for veriﬁcation through the ATM network.
Finally, transaction authorization is carried out. The ATM
sends to the card various transaction ﬁelds: the amount, the
currency, the date, the terminal veriﬁcation results (TVR –
the results of various checks performed by the ATM), and a
nonce (in EMV terminology, the “unpredictable number” or
UN). The card responds with an authorization request cryp-
togram (ARQC), which is a cryptographic MAC calculated
over the supplied data, together with some card-provided
data including the application transaction counter (ATC –
a 16 bit number stored by the card and incremented on
each transaction) and the issuer application data (IAD – a
proprietary data ﬁeld to carry information from the card to
its issuer).
The ARQC is sent by the ATM to the issuer along with
the encrypted PIN. The issuer veriﬁes the PIN and checks
the ARQC by recalculating the MAC over the received data
ﬁelds. Additional checks include whether sufﬁcient funds
are available, that the card has not been reported stolen,
and risk-analysis software does not ﬂag the transaction as
suspicious. Then the issuer returns to the ATM an autho-
rization response code (ARC) and an authorization response
cryptogram (ARPC) destined for the card.
The ARC authorises the ATM to dispense cash, which
in turn passes the ARC and ARPC also to the card. The
card veriﬁes the ARPC (which is typically a MAC over
the ARQC exclusive-or’ed with the ARC), and returns an
authenticated settlement record known as a transaction cer-
tiﬁcate (TC), which may be sent to the issuer immediately,
or some time later as part of a settlement process.
1The bank that operates the ATM (the acquirer) and the network that links
the issuer to the acquirer are also involved in settlement, dispute resolution
and assurance, but they do not participate in the authentication protocol run
other than to route messages, so have been omitted from the discussion in
this section.
51
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:33 UTC from IEEE Xplore.  Restrictions apply. 
issuer
ATM
select file 1PAY.SYS.DDF01
card
EMV command
protocol phase
available applications (e.g Credit/Debit/ATM)
SELECT/READ RECORD
select application/start transaction
signed records, Sig(signed records)
unsigned records
SELECT/
GET PROCESSING OPTIONS
READ RECORD...
T = (amount, currency, date, TVR, nonce, ...)
ARQC = (ATC, IAD, MAC(T, ATC, IAD))
GENERATE AC
T, ARQC, encrypted PIN
ARPC, ARC
ARPC, ARC
TC = (ATC, IAD, MAC(ARC, T, ATC, IAD))
EXTERNAL AUTHENTICATE/
GENERATE AC
TC
Card authentication
Cardholder verification
Transaction authorization
Figure 2. Outline of an EMV transaction at ATM. Note that while the messages between card and ATM have been veriﬁed, messages between issuer
and ATM may vary depending on card scheme rules
POS transactions proceed similarly, except that cardholder
veriﬁcation is usually performed by sending the PIN to the
card which checks it against a stored value. Whether the PIN
is veriﬁed locally or online makes no difference to the attack
discussed here. If a POS device generates unpredictable
numbers that can in fact be predicted, then it too will be
vulnerable to a pre-play attack.
IV. THE TWO VARIANTS OF THE PRE-PLAY ATTACK
In a normal EMV transaction the card sends an ARQC to
the ATM to prove that it is alive, present, and engaged in
the transaction. The ATM relies on the issuer to verify this
and authorise the transaction. Simply replaying an ARQC
should not work, because a competent issuer prevents replay
by rejecting any transaction whose application transaction
counter (ATC) it has already seen2. The ATC prevents
simple replay attacks but cannot assure the issuer that the
ARQC was computed today rather than yesterday. To ensure
freshness, a nonce is used – the unpredictable number (UN).
This is a 32 bit ﬁeld generated by the ATM. However,
we have discovered two major ﬂaws that make the UN
almost redundant: (a) a speciﬁcation and engineering ﬂaw
that results in predictable UNs that can be exploited; (b) a
deeper, more difﬁcult to ﬁx protocol ﬂaw, which allows an
attacker to choose an arbitrary UN with the pre-play attack.
These ﬂaws, together with an additional classical protocol
mistake make the entire EMV system vulnerable to the pre-
play attack.
2We have seen incompetent issuers who accepted repeated transactions
with the same ATC.
The speciﬁcation ﬂaw that enables the basic pre-play
attack is that EMV does not include the identity of the
terminal – a classic protocol mistake; in fact it’s strikingly
reminiscent of the notorious Woo-Lam protocol [7]. While
the EMV framework can support this through designation
in a list of ﬁelds to be MACed in the ARQC (the CDOL1),
the standard format developed by Visa (the version 10
cryptogram format [8]) requires only the terminal country
code. The country in which the attacker will use its skimmed
data is trivial to predict in advance.
The speciﬁcation ﬂaw means that when an ATM or POS
terminal generates predictable random numbers,
there is
a “pre-play” attack – authentication data are collected at
one moment in time, and played to one or more possible
verifying parties at some later time that is already determined
when the data are harvested. The practical implementation is
that a tampered terminal in a store collects card details and
ARQCs as well as the PIN from a victim for use later that
day, or the following day, at ATMs of a given type. Indeed,
if the attacker knows how to predict the UNs in a given
make of ATM, he can harvest ARQCs for use in any ATM
of that type in a given country and at a given date in the
future. We will discuss this variant in detail in Section V.
The deeper protocol design ﬂaw is that while the terminal
generates the random number, it is the issuing bank that
relies on it. This means that a man-in-the-middle device
between the terminal and the bank can be used to attack
a system where the random number generation is sound.
The attacker records an ARQC in response to the nonce
N, and presents it to a terminal that actually generated the
nonce N(cid:2). The terminal sends the ARQC along with the
52
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:33 UTC from IEEE Xplore.  Restrictions apply. 
transaction data and N(cid:2) to the bank; the MITM changes N(cid:2)
to N; and the transaction may well be accepted. This means
that a terminal infested with malware can debit your card
not once, but multiple times, and for arbitrary amounts. We
will discuss this variant in detail in Section VI.
V. PRE-PLAY ATTACKS BASED ON A WEAK RNG
The EMV protocol designers did not think through care-
fully enough what
is required for the UN to be “un-
predictable”. The speciﬁcations and conformance testing
procedures simply require that four consecutive transactions
performed by the terminal should have unique unpredictable
numbers [9, test 2CM.085.00]. Thus a rational implementer
who does not have the time to think through the conse-
quences will probably prefer to use a counter rather than a
cryptographic random number generator (RNG); the latter
would have a higher probability of failing conformance
testing (because of the birthday paradox).
The latest version of the EMV speciﬁcation [10, Book 4,
p57] offers some guidance as to how to generate the un-
predictable number, but previous versions left the algorithm
entirely up to implementers. Even the suggested construc-
tion (hash or exclusive-or of previous ARQCs, transaction
counter and time) would not be adequate for generating
a truly unpredictable number because the ARQCs would
be zero if the ATM was rebooted and both the time and
transaction counter are predictable. Yet if the attacker can
predict an “unpredictable number” ahead of time, he can
harvest ARQCs from a card one day and use them at the
ATM the next.
For example,
in the case of the ATM in Palma that
started this line of research, the counter rolls over every
three minutes, so an attacker might ask a card in his store
for twenty ARQCs at points in the 15-bit counter’s cycle.
On visiting the ATM he could use his attack card to ﬁrst
calibrate the ATM’s counter, and then initiate transactions
when the counter is expected to be at a value for which he
has a captured ARQC.
This is all very well in theory, but is it viable in practice?
We decided to ﬁnd out.
A. Experimental Method and Results
Pre-play attacks against EMV have been discussed theo-
retically before, but for a real-world attack to work, there
are many practical challenges. In this section we describe
our own approach to them: surveying for an exploitable
vulnerability, skimming data, and deploying the attack. Each
stage of the process must be completed by criminals with
reasonable yield and an acceptably low cost (including
probability of being caught).
B. Identifying vulnerable ATMs
To identify vulnerable ATMs we took three approaches:
analysis of log ﬁles, collection of UNs in the ﬁeld, and
reverse engineering of ATMs.
53
1) Analysis of log ﬁles: We regularly investigate ATM
withdrawals on behalf of customers in dispute with their
banks. In most cases the level of detail in logs provided by
the bank is low, but in a minority of cases detailed logs are
handed over. The Palma case got us started on this research
track, and we found one or two other cases of suspicious
UNs in logs.
Following our responsible disclosure of this vulnerability
to the banks and card brands, we delivered our random
number analysis toolkit to several parties but so far received
little or no feedback at all about their ﬁndings. We suggest
that anyone in dispute with a bank over ATM transactions
where this vulnerability might be an explanation should
subpoena the bank’s logs for analysis.
We have also discussed the vulnerability with a large
online services ﬁrm, but it turned out that they do not retain
records of the UN.
We are particularly interested in collecting UN data from
Italy, which is the only country of which we are aware where
UNs are routinely printed on all customer receipts.
2) Active probing of ATMs: Even where ATM logs are
available, the timestamps have an accuracy of only a second
or so rather than a millisecond, so perhaps only grossly non-
random UN generation algorithms can be identiﬁed. For both
researchers and crooks, a better data collection approach is
required. This needs to be moderately covert as the public
are aware of the problem of ATM skimming; using primitive
analysis tools repeatedly at an ATM may be a way to get
arrested.
We therefore constructed a set of passive monitoring
cards by adding our own ATM protocol analyser circuitry,
consisting of an additional microcontroller with data storage
memory, to a standard debit card. This was done as follows.
First, the plastic from the rear side of the card, above the
chip, was removed with a knife thus exposing the chip
package. Then a cheap engraving tool with a ﬂat metal cutter
was used to carefully mill away some plastic between the
chip slot and the card edge (Figure 3 top left). This was done
carefully so as not to remove too much plastic and to avoid
cutting through to either the card edge or the card face. The
chip itself, being encapsulated in epoxy, is relatively well
protected from mechanical damage during this surgery.
Then we ﬁtted a Microchip PIC18F24K22 in a 0.5 mm
thin UQFN package into this space, glued some protection
resistors to the plastic next to the chip and wired them up
to the terminal pins using thin wires. This microcontroller
operates from 1.8 V to 5.5 V, so can be connected directly
to the card terminals; but as we used a 3.3 V memory chip
for fast data storage, some additional power control and
interfacing circuitry was added in thin packages of 0.3 mm
to 0.5 mm (Figure 3 top right). The memory chip came in
a standard 0.7 mm WSON package, so we had to slim it
to 0.5 mm; it was carefully milled on sandpaper, removing
0.15 mm from the front and 0.05 mm from the back. Then it
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:33 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3. Passive monitoring card containing real EMV chip, with monitoring microcontroller and ﬂash storage
was glued inside the card (Figure 3 middle left). Finally all
the components were wired together (Figure 3 middle right).
This process required a magnifying glass as some compo-
nents have a 0.4 mm pin pitch. A special card interface was
built for programming the microcontroller and downloading
the ATM transaction data to a PC via an RS-232 connection
(Figure 3 bottom-left). After initial laboratory testing, the
area with added circuitry was ﬁlled with epoxy and tested
with calipers to ensure it still ﬁt the 0.8 mm card proﬁle,
so that the card would not get stuck in an ATM (Figure 3
bottom-right). The epoxy potting protected the circuitry but
made that part of the card more brittle - requiring careful
handling between harvesting attempts. This conﬂicted with
our desire to maintain a low proﬁle by behaving as a normal
ATM user, so normal practice became to transfer the card
from safe storage to wallet while approaching and leaving
the ATM. To guard against losing track of which UNs were
harvested from which ATMs after a day in the ﬁeld, we
inserted dummy transactions into the stream recorded by
the logger. This was done by using the card to perform a
test transaction with a terminal emulator on a laptop back
in the car.
The modiﬁed card remains a valid payment card – the
transaction ﬂow proceeds as normal – so it should always
54
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:33 UTC from IEEE Xplore.  Restrictions apply. 
be accepted. However, it can be inserted into a variety of
ATMs and POS devices without arousing suspicion3. More
primitive approaches with a card wired to a laptop leave
wires trailing from the slot and may cause problems in ATMs
that hold the card internally during reading.
Other possible monitoring equipment includes wireless
relay cards transferring data to a card outside, a wired card
adapted to be compatible with ATM card slots, an overlaid
shim glued on top of a thinned-down existing card, or an
ultra-simple shim consisting simply of an antenna suitably
connected to the card data line (which we could observe
using “TEMPEST” techniques).