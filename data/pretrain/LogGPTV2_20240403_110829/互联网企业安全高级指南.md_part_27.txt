SERVER
NTERFACE
EXECUTOR
RUN-IME
6
5
H4-
COMPILER
图8-12PHPZend引擎架构图
如图8-12所示，当网站的用户在访问一个PHP页面是，当访问请求被PHP初始化，
ZE便把PHP脚本翻译成符号（token），最终翻译成可以进行单步调试和执行的opcode。如
果这些opcode中的一个指令需要调用一个扩展函数，ZE将会给那个函数绑定参数，并且
临时放弃控制权直到函数执行完成。由此可以看出，PHP代码的执行流程中opcode的翻译
和函数调用是必经环节，面Zend引擎是支持扩展，那么我们的PHPRASP方案就是通过
Zend扩展模块实现对恶意行为记录和阻断。
为了部署和可移植性，以及检测阻断能力的可扩展，需要在常规扩展基础之上增加一
个规则查询、匹配模块，此模块与本地配置管理daemon进程通信，在每一个PHPAPI调
用时检测其行为的合法性，给出事件是否阻断、记录或允许执行的判断。配置管理daemon
进程负责与后端配置管理Server通信，更新cache最新的规则。
当符合配置中阻断与记录行为的时候，RASP模块上报数据至本地管理daemon进程，
由daemon进程上报至后端数据分析集群。PHPRASP架构如图8-13所示。
2.检测模型
PHP是解析型语言，在执行时逐行翻译为opcode，那么它zend扩展可以实现记录每个
HOOK的API在哪一行被执行，调用参数是什么。
---
## Page 163
第8章入侵感知体系151
php
000000
数据分析集群
1205 45W6
RASP.SO
RASP.SOCX
CONF.
DAEMON
售
RASP Agnet
配置管理服务器
图 8-13PHP RASP 架构
相比HIDS来说，除了可以记录命令执行之外，还能记录CGI层面的很多API，臀如
IO类、DB类、网络连接、文件上传等等。相比HIDS如果希望知道IO行为，需要过滤整
个系统的海量IO操作不同，因为RASP的监测范围仅限制在了CGI代码层面的调用，性能
的开销小了很多个数量级。面Web人口的安全却又是目前安全攻防的焦点，这个性价比是
非常划算的。因为RASP可以兼顾这么多丰富的API调用，以及调用细节，对于人侵检测
能力来说就增加了很多个维度。
实际的检测能力效果，这里以webshell检测为例。Php语法的灵活性使得传统的静态
文件扫描方式儿乎走进了死胡同，如下所示很多近乎于变态的编码转换儿乎无法有效检测。
S_=*";
..=I+]s
S_=*S_","";
$_= ($_[+**] 1**) . ($_[+**] 1**) . ($_[+**]~**) ]
但是RASP并不受此影响，因为它可以在运行时记录其行为，无论多么变态的编码转
换，在opcode这里还是会显形。
比如攻击者通过请求nonalpha.php？_=exec&_=id执行了一条命令，会被记录如下：
Fi1e: /usr/1oca1/apache/htdoc/nona1pha php
Function: exec
Line:5
Paraml: id
由此可见，任何的基于文件字符串编码转换是逃不过动态监测的。与此同时，如果在
---
## Page 164
152技术篇
文件内容中没找到exec字符串，反倒会作为一个高危的webshell检测特征。
在实际的运营过程中，更多的是以RASP输出的结构化数据建立检测模型。假设我们
的网站存在一个上传漏洞，被人攻击成功，上传一个webshell。那么这个事件在RASP系
统中将会被记录如图8-14所示。
file_upload.php
上传漏润
move_upload_file(°/tm/ooox.php,./first_shellL,php)
fist_shel.ohp 
webshell
move_upload_file(°/tmp/xoo.php*,"/other_shell.php")
other_shell.php
(,xxxoxxxxx dewu,)uasAs
webshell
phpinfo()
mysol_connect()
图8-14基于 RASP 数据模型检测 webshell
从图中可以很明显的看出整个攻击流程，但是仅能“看”出问题还不能算完，接下来
整理出检测模型：
口高危函数组合模式检测webshell—当一个PHP在一段时间内的访问触发了多个
高危函数，那么被判定为webshell文件，规则基于这么一个假设“一个正常的业务
PHP文件，不可能同时拥有这么多危险函数功能”。以下是规则模板。
*total_value":5,
“describe”:"webshell [filename] be found*,
"risk_func”: [
*func*: ["systen*, *popen", "exec", “passthru"] ,
*value*:2
1 ,
"func*: ["move_upload_flle", *phpinfo*] ,
"value*: 2
---
## Page 165
第8章入侵感知体系153
[+,on[eA,
口上下文关联检测webshell—当一个PHPB文件被PHPA上传或写人，同时这个被
写人的PHP文件又有读写文件、上传文件、执行命令等行为，那么这个“上传和写
人”行为是webshell上传攻击事件。模型基于这样一个假设“一个CGI文件写人上
传文件是正常的，但被它生成的如果是PHP文件，且这个PHP有高危API调用行
为，那么这是入侵事件”。
“describe":" [filenameA] File Upload Vulnerabi1ity, webshell [filenameB]
be found*,
'factory": [
*filenaneA. func*, *move_upload_file*
"filenaneA, paraneter .2* :*filenameB",
"ilenaneB, func* : ["move_upload_file*, *system”, *exec”, **, "phpinfo"]
8.3.2 Java RASP
与PHP完全不一样，在Java的世界里，有着各种基于调试、性能测试、监控等目的而
生的框架和接口能用于作为RASP产品的技术方案。下面我们来列举可以使用的技术方案。
1.技术架构
修改rt.jar。rt.jar是Java 基础类库，位于{Java_Home}/jre/lib/下。Java 中对于文件系
统，网络，数据库的访问，以及操作系统命令的调用，都是通过调用rtjar中相应的类来实
现的。为了得到上面这些方法的调用信息，可以改变这些相关类，在代码中加入日志信息，
并将改变后的类打包成新的rt.jar，替换掉{Java_Home}/jre/lib/下原来的jar包。这样在这
些类被调用时，就可以得到调用的日志信息。
优势：简单，性能好。
缺点：静态替换，无法动态加入新的监控点：可维护性差，和jdk紧密耦合。
JVMT1（JVM Tool Interface）是Java虚拟机所提供的 native编程接口，因此使用
JVMTI需要我们与C/C++以及JNI打交道，开发时一般采用建立一个Agent的方式来使用
---
## Page 166
154技术篇
JVMTi，把Agent编译成一个动态链接库，设置一些回调函数，并从Java虚拟机中得到当
前的运行态信息。JVMTI的功能非常丰富，包含了虚拟机中线程、内存、堆栈、类、方法、
变量、事件、定时器处理等20多类功能。
由于使用native语言，运行在虚拟机之外，JVMTI方案对于性能、内存泄漏、故障检
测程序来说具有很多优点，如下所示：
1）功能强大，能够看到更多的信息：如GC、锁、线程。
2）即使虚拟机出现问题时，Agent也可以继续收集到虚拟机的信息。
3）减少了虚拟机的影响，负荷和内存占用。
4）性能更好：native 语言更高效；在JVMTI层有的接口更高效，例如.stack traces。
缺点：
1）JVMTI接口复杂，实现起来也比较麻烦。
2）通用性差：由于是native语言，需要在不同的操作系统上分别编译和测试
3）稳定性差：由于和JVM同时运行在一个进程中，并且在JVM之外，任何的错误容
易引起整个进程的退出。
( 1 ) Java Agent
JavaAgent Instrumentation 的最大作用就是类定义动态改变和操作。在Java SE5中首
次引入，Instrument要求在运行前利用命令行参数或者系统参数来设置代理类；在JavaSE
6里面，instrumentation 包被赋予了更强大的功能：启动后的instrument、本地代码（native
code）instrument，以及动态改变classpath等。
事实上，“java.lang.instrument”包的具体实现，依赖于JVMTI：在Instrumentation 的
实现当中，存在一个JVMTI的代理程序，通过调用JVMTI当中Java类相关的函数来完成
Java类的动态操作。
由于Java Agent是纯Java 的接口，具有以下优点：
1）接口简单，实现相对JVMTI容易
2）通用性好，运行在JVM中，不用考虑操作系统的差异。
3）稳定性好：JVM对于运行在其中的代码做了很多保护，来防止错误的代码引起进程
---
## Page 167
第8章入侵感知体系155
的退出。
缺点：
1）相比JVMTI功能少一些，但对于安全的Agent足够。
2）有些接口例如I stack traces 的比 JVMTI性能差。
( 2 ) Btrace
Btrace是由Kenai开发的一个开源项目，它可以用来帮我们做运行时的Java程序
分析，监控等等操作。Btrace是由：Attach API+BTrace脚本解析引擎+ASM+JDK6
Instumentation 组成
Btrace是一个安全，可以动态跟踪Java程序的一种工具。Btrace的初衷是要“跟踪代
码”，而不是修改代码，他的操作不会对原有Java进程产生影响，不用关闭正在运行的Java
进程，也不会修改Java进程中的逻辑和数据。
由于 Btrace 是基于Java Agent（Instumentation）实现的，除了Instumentation 同样的优
点外，还具有如下优点：
1）不用实现，直接可用，只需写BTrace脚本即可。
2）安全性好，对原有的Java程序只读，没有任何修改。
缺点：只能实现信息的读取，无法实现阻断。
BTrace的安全性检查是通过Verifier来实现的，规范可参照JSR269。将该类重写就可
以突破BTrace的安全限制。重写Verifier可以实现阻断，。
(3) HotCode2
HotCode2是一款纯Java实现的全站式热部署解决方案，无论是修改Java文件还是框
架配置文件，也不管你是在本地还是远程开发机部署，都无需重启Java虚拟机而立即生效，
从面减少开发过程中频繁编译打包和部署的次数。HotCode2本质上是一个Java Agent，因
此可以运行在任何Java程序之上。HotCode2的核心功能是提供对Java文件的热部署功能；
通过字节码变换，HotCode2突破了Hotswap的只能修改方法体的限制，可以让你对一个类
进行任意修改。HotCode2通过SDK的形式提供了对各种框架的支持；Java文件修改+框
架支持，真正实现一站式热部署解决方案，他不像Btrace那样有脚本分析引擎和ASM，如
果要实现规则的自动部署，需要自已实现规则分析引擎和ASM部分
---
## Page 168
156技术篇
除了具有Java Agent（Instumentation）同样的优点外，HotCode2还具有如下优点：突
破了Hotswap的只能修改方法体的限制，可以让你对一个类进行任意修改。
缺点有以下两点：
口需要自已实现规则分析引擎和ASM部分。
口为了实现任意修改类，每个类都会额外增加两个特殊的Fie1d和通用的构造函数，
对线上代码改动大，增加了风险。
Java环境与PHP有很大的不同，我们可以从调用栈获取更多关于攻击事件的细节：
1）在RASP检测到关注的高危事件时，可以通过打印调用栈来获取高危调用前后的调
用链，并以此快速定位漏洞人口，甚至是攻击流程。如下调用栈，是一个典型的struts2漏
洞利用执行命令时的调用栈（缩略）信息：
"stack_trace": [
"method": *start"
"method": "invoke0*
*c1azz*: *ogn1.Ogn1Runtine*,
*method*: *callMethod"
1.
*clazz": *org.apache struts2.impl.StrutsActionProxy",
"method*: *execute*
} ,
"clazz*: *org apache,catalina.
"method*: "invoke*
2）获取因何http请求触发的API调用。我们可以从javax.servlet.http.HttpServlet监控