    static void l2cap_data_channel(struct l2cap_conn *conn, u16 cid,
                       struct sk_buff *skb)
    {
        struct l2cap_chan *chan;
        chan = l2cap_get_chan_by_scid(conn, cid);
        ...
        switch (chan->mode) {
        ...
        case L2CAP_MODE_BASIC:
            /* If socket recv buffers overflows we drop data here
             * which is *bad* because L2CAP has to be reliable.
             * But we don't have any other choice. L2CAP doesn't
             * provide flow control mechanism. */
            if (chan->imtu len) {
                BT_ERR("Dropping L2CAP data: receive buffer overflow");
                goto drop;
            }
            if (!chan->ops->recv(chan, skb))
                goto done;
            break;
        case L2CAP_MODE_ERTM:
        case L2CAP_MODE_STREAMING:
            l2cap_data_rcv(chan, skb);
            goto done;
        ...
        }
        ...
    }
然而，重新配置信道模式是可能的吗？根据规范，对于 A2MP 信道使用 ERTM 或者流模式是强制性的。
> 对于任何建立在 AMP 上的 L2CAP 信道，蓝牙核心通过强制使用增强型重传模式或者流模式来保持蓝牙核心上的协议和配置一定程度上的可靠性。
>
>
> 来源：
由于一些原因，在规范中并没有描述这个事实，不过 Linux 的实现中确实允许我们将需要的信道模式封装在 `L2CAP_CONF_UNACCEPT`
配置响应中来实现从任意的信道模式切换到 `L2CAP_MODE_BASIC`：
    // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/net/bluetooth/l2cap_core.c`
    static inline int l2cap_config_rsp(struct l2cap_conn *conn,
                       struct l2cap_cmd_hdr *cmd, u16 cmd_len,
                       u8 *data)
    {
        struct l2cap_conf_rsp *rsp = (struct l2cap_conf_rsp *)data;
        ...
        scid   = __le16_to_cpu(rsp->scid);
        flags  = __le16_to_cpu(rsp->flags);
        result = __le16_to_cpu(rsp->result);
        ...
        chan = l2cap_get_chan_by_scid(conn, scid);
        if (!chan)
            return 0;
        switch (result) {
        ...
        case L2CAP_CONF_UNACCEPT:
            if (chan->num_conf_rsp data, len,
                               req, sizeof(req), &result);
                ...
            }
            fallthrough;
        ...
        }
        ...
    }
这个函数会调用子程序 `l2cap_parse_conf_rsp()` 。如果选项类型 `L2CAP_CONF_RFC` 被指定，并且当前的信道模式不是
`L2CAP_MODE_BASIC` 就有机会更改为我们想要的：
    // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/net/bluetooth/l2cap_core.c
    static int l2cap_parse_conf_rsp(struct l2cap_chan *chan, void *rsp, int len,
                    void *data, size_t size, u16 *result)
    {
        ...
        while (len >= L2CAP_CONF_OPT_SIZE) {
            len -= l2cap_get_conf_opt(&rsp, &type, &olen, &val);
            if (len mode == L2CAP_MODE_BASIC && chan->mode != rfc.mode)
            return -ECONNREFUSED;
        chan->mode = rfc.mode;
        ...
    }
自然而然的问题是，在发送配置响应之前，我们是否首先需要接收来自受害者的配置请求？这似乎是协议的一个弱点 ——
答案是否定的。此外，无论受害者与我们如何交涉，我们可以发送回一个 `L2CAP_CONF_UNACCEPT` 响应，受害者将会愉快地接受我们的建议。
通过配置响应，我们现在能够到达 A2MP 指令并且能够利用 _BadChoice_
取回所有我们需要的信息（看之后的章节）。一旦我们准备去触发这个类型混淆，我们可以简单地通过断开和连接信道来重新创建 A2MP 信道，并将信道模式设置回
_BadKarma_ 所需的 ERTM。
### 探索 sk_filter()
按照我们的理解， _BadKarma_ 的问题是将一个 `struct amp_mgr` 对象传递给了 `sk_filter()`，然而预期的对象是
`struct sock`。换句话说，在 `struct sock` 中的字段错误地映射到了 `struct amp_mgr`
的字段。因此，这将导致解引用无效的指针最终造成 panic 错误。回顾之前看到的 panic 日志，这里记录了发生了什么，直接导致了 _BadKarma_
的发现。
我们能否控制指针解引用，或者说控制其他在 `struct amp_mgr` 内的成员以影响 `sk_filter()` 的代码流？让我们查看一下
`sk_filter()` 并追踪 `struct sock *sk` 的用法去理解子程序中相关的成员。
    // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/filter.h
    static inline int sk_filter(struct sock *sk, struct sk_buff *skb)
    {
        return sk_filter_trim_cap(sk, skb, 1);
    }
    // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/net/core/filter.c
    int sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap)
    {
        int err;
        struct sk_filter *filter;
        /*
         * If the skb was allocated from pfmemalloc reserves, only
         * allow SOCK_MEMALLOC sockets to use it as this socket is
         * helping free memory
         */
        if (skb_pfmemalloc(skb) && !sock_flag(sk, SOCK_MEMALLOC)) {
            NET_INC_STATS(sock_net(sk), LINUX_MIB_PFMEMALLOCDROP);
            return -ENOMEM;
        }
        err = BPF_CGROUP_RUN_PROG_INET_INGRESS(sk, skb);
        if (err)
            return err;
        err = security_sock_rcv_skb(sk, skb);
        if (err)
            return err;
        rcu_read_lock();
        filter = rcu_dereference(sk->sk_filter);
        if (filter) {
            struct sock *save_sk = skb->sk;
            unsigned int pkt_len;
            skb->sk = sk;
            pkt_len = bpf_prog_run_save_cb(filter->prog, skb);
            skb->sk = save_sk;
            err = pkt_len ? pskb_trim(skb, max(cap, pkt_len)) : -EPERM;
        }
        rcu_read_unlock();
        return err;
    }
`sk` 的第一个用途是在 `sock_flag()`，尽管该函数只是检查一些标识位，仅在 `skb_pfmemalloc()` 返回 true
时发生。相反，让我们看一下 `BPF_CGROUP_RUN_PROG_INET_INGRESS()`，看看它对套接字结构做了什么：
    // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/bpf-cgroup.h
    #define BPF_CGROUP_RUN_PROG_INET_INGRESS(sk, skb)                 \
    ({                                        \
        int __ret = 0;                                \
        if (cgroup_bpf_enabled)                           \
            __ret = __cgroup_bpf_run_filter_skb(sk, skb,              \
                                BPF_CGROUP_INET_INGRESS); \
                                              \
        __ret;                                    \
    })
    // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/kernel/bpf/cgroup.c
    int __cgroup_bpf_run_filter_skb(struct sock *sk,
                    struct sk_buff *skb,
                    enum bpf_attach_type type)
    {
        ...