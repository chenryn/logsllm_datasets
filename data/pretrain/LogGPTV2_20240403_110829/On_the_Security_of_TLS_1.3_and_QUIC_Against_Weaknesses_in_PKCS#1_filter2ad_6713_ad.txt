host is located on the network path between C and S. Even in
settings where the attacker does not control the network, this can
often be easily realized by spooﬁng attacks, which are usually very
simple when the attacker is in the same local network as the victim.
We also assume that the attacker is able to establish connections to
S. For example, S may be a publicly available web server on the
the Internet.
Server provides at least one vulnerable TLS_RSA cipher suite.
We assume that the server offers at least one cipher suite from the
TLS_RSA family, such that the implementation of RSA-encrypted
key transport in this cipher suite is vulnerable to an attack that al-
lows an attacker to compute the function m (cid:55)→ md mod N for
any value m ∈ ZN . This may, for instance, be Bleichenbacher’s or
Manger’s attack (cf. Sections 5.2 and 5.3).
Note that it is very common for a server to offer multiple TLS
versions and multiple cipher suites, for compatibility reasons. More-
over, a web server that offers TLS Versions 1.1 or 1.2 must offer a
cipher suite from the TLS_RSA family, as the mandatory to imple-
ment [11, 12] cipher suites for these versions belong to this fam-
ily. As explained in the introduction, this paper is written under
the hypothesis that attacks like Bleichenbacher’s and Manger’s on
PKCS#1 v1.5 encryption remain a non-negligible threat.
Server uses an RSA-certiﬁcate that allows for signing. We assume
that the web server uses a certiﬁcate which may be used for RSA
signatures. Note that it is in principle possible to create X.509 cer-
tiﬁcates which may only be used in certain applications. That is,
an X.509 certiﬁcate may contain a key extension ﬁeld, which spec-
iﬁes that the certiﬁcate can only be used for encryption, or only for
digital signatures.
A web server may offer different cipher suites, where some ci-
pher suites use RSA signatures (e.g., any cipher suite of the
TLS_DHE_RSA family), and some others use RSA encryption (e.g.,
any cipher suite of the TLS_RSA family). This is a very common
scenario. Such a web server would in principle be able to use dif-
ferent certiﬁcates for different cipher suites. However, we argue
that this is extremely uncommon. First, it seems not even possible
(to our best knowledge) to conﬁgure the most popular TLS imple-
mentation OpenSSL7 in a way such that different RSA certiﬁcates
are used for different cipher suites or protocol versions. Similarly,
the popular nginx web server8 allows one to use only a single
server certiﬁcate [30]. Thus, any such server which offers at least
one TLS_RSA cipher suite and one TLS_(EC)DHE_RSA cipher
7https://www.openssl.org
8http://nginx.org
suite will have to use an RSA-certiﬁcate that allows for both sign-
ing and encryption. Second, certiﬁcates signed by commercial CAs
are costly, in particular extended validation certiﬁcates, which cost
several hundred US dollars per year. Therefore many server opera-
tors might not want to buy different certiﬁcates for different cipher
suites and TLS protocol versions.
Client accepts RSA signatures. For both attacks on TLS 1.3 and
QUIC we assume that the client accepts RSA server certiﬁcates
(for RSA signatures in TLS 1.3 and QUIC). Note that the major-
ity of certiﬁcates on the Internet is RSA-based, thus, any client
not accepting RSA-certiﬁcates at all would not be able to estab-
lish TLS connections to a large number of web sites. Moreover,
TLS_(EC)DHE_RSA cipher suites are explicitly recommended by
security experts [30] for security-critical applications.
6.1 The Attack on TLS 1.3
For concreteness, let us consider a server S that supports TLS
versions 1.2 and 1.3, and a client that accepts only TLS 1.3 connec-
tions. The attack generalizes easily to other settings that satisfy the
above conditions. We write TLS-RSA to denote an arbitrary cipher
suite from the TLS_RSA family offered by the TLS 1.2 implemen-
tation, and TLS-DHE-RSA to denote an arbitrary cipher suite from
the TLS_DHE_RSA family offered by the TLS 1.3 implementation.
The attack proceeds as follows (cf. Figure 1).
1. The client C sends the TLS 1.3 messages ClientHello and
ClientKeyShare, which contain (among other values) a list
of cipher suites accepted by the client C.
2. The attacker A intercepts these messages. He selects an
TLS-DHE-RSA cipher suite. Then it responds to C with
a ServerHello message, which contains the selected ci-
pher suite. Then it chooses a random Difﬁe-Hellman ex-
ponent a $← Z|G| and responds with a ServerKeyShare-
message containing ga. Note that the attacker knows the
Difﬁe-Hellman exponent a.
3. A now retrieves the server’s RSA certiﬁcate by sending a
ClientHello message (for an arbitrary TLS version) to S.
The server responds with a corresponding ServerHello mes-
sage and its certiﬁcate. The attacker embeds the retrieved
certiﬁcate in a Certificate message and forwards it to C.
4. In order to ﬁnish the establishment of a TLS 1.3 session with
C, the attacker now has to compute the CertificateVerify
message. This message must contain a signature over the
transcript M of all previously exchanged messages. The sig-
nature must be valid with respect to M and the public key
(N, e) contained in the certiﬁcate of S. To this end, the at-
tacker ﬁrst computes the PKCS#1 v1.5-signature encoding
m of M (see Section 5.1). Let m denote the result. Then
it computes the signature σ = md mod N, using that the
vulnerability of the server allows for computing the function
m (cid:55)→ md mod N for all m ∈ ZN . This is sufﬁcient to
compute a PKCS#1-v1.5 signature for m that is valid with
respect to the server’s public key.
5. Using its knowledge of the exponent a, the attacker is now
able to compute all further handshake messages and the
PremasterSecret, and thus all other secrets used in the TLS
connection with C. Therefore it is able to ﬁnish the TLS
Handshake with C. This establishes a rogue TLS 1.3 con-
nection between C and A, where C believes it communicates
with S.
Note that the attack described above is an “online” attack. That
is, the MITM attacker is not able to compute the forged signa-
ture before it receives the ClientHello message from the client
C. Note also that the execution of the signature forgery com-
puted by the MITM attacker takes some time, as even efﬁcient
variants of Bleichenbacher’s attack (like Manger’s attack) require
at least a few thousand server requests. The TLS client has to wait
and keep the TLS connection open while the MITM attacker per-
forms these computations. Therefore the efﬁciency and practicabil-
ity of the attack depend mainly on the time needed to execute this
step. A client may not be willing to wait for a very long time for
the CertificateVerify-message, after the ClientKeyShare-
message has been sent. We analyze this in Section 7.
6.2 The Attack on QUIC
The description of the attack on QUIC is much simpler than the
attack on TLS 1.3. As already explained in Section 4, we only
have to explain how an attacker is able to obtain a validly-signed
serialized server conﬁg (SCFG) message containing
• an elliptic curve Difﬁe-Hellman share gA such that the ex-
ponent A is known to the attacker (for example, the attacker
may choose gA herself), and
• a time stamp which lets the SCFG message expire at a suit-
able point in time in the (far) future.
Note that this allows the attacker to impersonate a server an arbi-
trary number of times (until the SCFG message expires, however,
the expiration time can be chosen by the attacker) and against an ar-
bitrary number of different clients. Thus, from the attacker’s point
of view knowing the SCFG message is essentially equivalent to
knowing the server’s secret key.
Assuming that the vulnerable TLS server uses an RSA-based
certiﬁcate that allows for message signing (that is, the key extension
ﬁeld does not limit the certiﬁcate to encryption-only), the attacker
is able to use Bleichenbacher’s or Manger’s attack against the TLS
server to compute a valid signature, exactly as in the attack on TLS
1.3 described above. The only difference is that now the attacker
computes an RSA-PSS signature for a SCFG message, which con-
tains a Difﬁe-Hellman share and an expiration date of the attacker’s
choice.
Note that the attack works even if the QUIC server uses a differ-
ent X.509 certiﬁcate, because the client is not able to tell whether
a given X.509 certiﬁcate “belongs to” the TLS server or the QUIC
server. The attacker would simply take the certiﬁcate from the TLS
server, and present it to the attacked client as the certiﬁcate for
the QUIC protocol. This is possible because the X.509 certiﬁcate
does not contain any information for which protocol this certiﬁcate
should be used.
Recall that SCFG messages are independent of any connection
request by a client, which allow one to pre-compute SCFG mes-
sages prior to the connection attempt of the client. Therefore, even
if mounting the Bleichenbacher/Manger attack against the vulner-
able server takes a long time (say, 10 days or more, which is far
beyond the ﬁgures provided by recent examples of Bleichenbacher
attacks in practice [4, 28, 36]), the attacker will eventually obtain a
validly signed SCFG message.
In a sense, this shows that including client nonces in signatures,
as done in TLS, strengthens a protocol against this type of ofﬂine
attacks.
7. PRACTICAL EVALUATION
7.1 Attacks with “Perfect” Oracle
We will not be able to evaluate the feasibility of the attack on
TLS 1.3 directly, because this TLS version is currently in develop-
ment, and reference implementations are not yet available. How-
ever, note that the attacker A in the attack from Section 6 essentially
implements the full TLS 1.3 protocol, with the only exception that
it is not in possession of the secret key corresponding to the public
key in the server’s RSA certiﬁcate. Instead, it uses the vulnerability
of the server S to obtain an “RSA signing oracle”, which essentially
computes signatures for messages of the attacker’s choice. This is
sufﬁcient for A to impersonate S against C.
This approach extends easily to other TLS versions. Therefore
we will evaluate the attack with respect to a server that implements
only TLS 1.2, but offers two different cipher suites, one from the
TLS_RSA family and one from the TLS_DHE_RSA family, and a
client which only accepts TLS_DHE_RSA cipher suites. This mim-
ics the situation described in Section 6 very closely. Even though
there are some minor differences between the ordering of the mes-
sages and the signed values (note that in TLS 1.2 only a subset of
all previously exchanged data is signed), the principle of the attack
is exactly the same. The TLS version used by the client has no
noticeable effect on the practicability of the attack.
Test Setup. In order to assess the practicability of our attack, we
implemented a malicious MITM server A and tested the attack
against different TLS clients C. The MITM server performs a
Manger attack [25] (adopted to PKCS#1 v1.5 encryption) against a
TLS-RSA server S, which implements a patched OpenSSL server.
For simplicity, S was run on the same system as the MITM server
(note that this is a realistic assumption for cloud computing envi-
ronments [29]).
The MITM server and the server S run on a machine with Ubuntu
14.04, with two 2.2 GHz processors and Java 7 (version 1.7.0_75).
For the clients, we used different machines with different systems,
depending on the tested TLS client software. We tested Google
Chrome 39, Mozilla Firefox 35, and OpenSSL on Ubuntu 14.04,
Safari 7.1.3 on OSX 10.9.5, and Microsoft Internet Explorer on
Windows 7.
Experimental results. The approximate time required to compute
one forged signature and the number of oracle queries is given in
Table 1, for different RSA key-lengths. Note that if an 1024-bit key
is used, then the time to compute a forged RSA signature is below
30 seconds, but increases with larger key sizes.
RSA mod. length
# of queries Duration [sec]
1024
2048
4096
1100
2120
4200
28
66
250
Table 1: Number of queries and time needed to execute
Manger’s attack against the patched OpenSSL server to create
a forged PKCS#1 signature.
According to a recent study by Indutny [16] from April 2015,
there are about 34% of Alexa top one million web sites using 1024-
bit RSA keys. 63% of the analyzed web sites use 2048-bit keys and
2% use 4096-bit keys. About 1760 web sites use 512-bit RSA keys.
Vulnerability of web browsers. As illustrated in Table 1, the dura-
tion of the attack depends on the size of the RSA modulus. Recall
that our attack is an “online” attack. That is, the MITM attacker
can only begin to compute the forged signature after it has received
the ClientHello message from the client. This may make the
attack impossible, if the TLS client raises a timeout and aborts the
establishment of the TLS session before the MITM attacker has
computed the signature (and thus is able to respond to the client).
We have analyzed this timeout for different popular web browsers.
To this end, we equipped our MITM server with a custom TLS
stack, which takes an additional “delay parameter”. When receiv-
ing a ClientHello message, the server responds immediately
with the ServerHello and the Certificate message. The
ServerKeyExchange message is delayed by the conﬁgured time
period. In case the delay does not raise a timeout at the client, we
increase the delay and reinitialize the connection establishment, un-
til the timeout of the considered web browser is determined. The
results of this analysis are depicted in Table 2. For example, Google
Chrome 39 strictly closes the connection after 30 seconds and dis-
plays a This webpage is not available message, which makes our
attack feasible for key sizes up to 1024 bits, but impossible for
2048 bit and beyond. In contrast, Mozilla Firefox 35 allows a time-
out of 600 seconds, and thus enabled the attack for all considered
key sizes.
Please note that for Mozilla Firefox, it is also possible to keep
the connection alive indeﬁnitely, by using a technique by Adrian et
al. [2]. To this end, the authors used TLS warning alerts.
TLS Client
Connection
Open [sec]
Google Chrome 39 (Ubuntu 14.04)
Microsoft IE 11 (Windows 7)
Mozilla Firefox 35 (Ubuntu 14.04)
Safari 7.1.3 (OSX 10.9.5)
30
450
600
450
Table 2: Maximum possible time period for keeping the con-
nection between our MITM server and web browsers alive.
We stress that we have conducted these experiments with an
“ideal” oracle that allows the MITM attacker to use the very efﬁ-
cient algorithm of Manger, which requires only 1100 “oracle queries”
to compute a forged signature. In practice, a weaker oracle may
be given. For instance, typical Bleichenbacher attacks take be-
tween about 4000 and a few millions of queries (for 1024 bit RSA
keys) [4], depending on the strength of the given oracle. Conse-
quently, the attack duration would be longer. However, we also
stress again that we do not claim that the attack is yet practical,
our experiments should mainly demonstrate that such attacks are in
principle possible against TLS 1.3.
Attacking TLS clients beyond web browsers. Note that the time