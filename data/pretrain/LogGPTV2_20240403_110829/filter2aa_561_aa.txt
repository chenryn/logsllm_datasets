### SMBetray: Backdooring & Breaking Signatures

#### Presenter
- **William Martin** (@QuickBreach)
  - OSCP
  - Penetration Tester
  - Supervisor at RSM US LLP in Charlotte, NC
  - Second-time presenter at DEFCON
  - Twitter: @QuickBreach

#### Audience
- Red teamers interested in Active Directory, SMB security, and new attacks against insecure SMB connections.
- Blue teamers looking to defend against these attacks.
- Anyone curious about how SMB signing works.

#### Overview
1. **Recap on SMB**
   - Definition and roles (SMB server and client).
   - Key features and attack vectors.
2. **NTLMv2 Relay Attack**
3. **SMB Signing Explained**
   - What it is and how it works.
4. **Additional SMB Attack Vectors**
5. **Introduction to SMBetray**
6. **Demo and Tool Release**
7. **Countermeasures**
8. **Credits**

### Recap on SMB
- **SMB Server**: Any PC receiving the SMB connection, not necessarily a Windows Server OS. For example, a Windows 7 box can be an SMB server as every Windows OS runs an SMB server by default.
- **SMB Client**: The PC or server connecting to the SMB server.
- **Key Features**:
  - File sharing and management over the network.
  - Mapping network drives.
  - Reading and writing files to shares.
  - Authentication support.
  - Access to MSRPC named pipes.
- **Attack Vectors**:
  - Pass-the-hash.
  - System enumeration (authenticated or null sessions).
  - Spidering shares for sensitive data, such as the cpassword key in SYSVOL XML files.

### What is SMB Signing?
- **Purpose**: Protects the integrity of SMB messages between the client and server, preventing tampering.
- **Default Requirement**: Required by default on all domain controllers.
- **Process**: Occurs after authenticated session setup and stops certain types of attacks.

### SessionBaseKey Generation
- **Core Concepts**:
  - At the end of the authentication phase, the client and server possess the same 16-byte SessionBaseKey.
  - Depending on the dialect, this key is used to generate subsequent keys for specific actions like signing and encrypting SMB packets.
- **Generation Process**:
  - **Step 1**: `NTResponse = HMAC_MD5(User’s NT Hash, username + domain)`
  - **Step 2**: 
    - `basicData = serverChallenge + responseServerVersion + hiResponseServerVersion + '\x00' * 6 + aTime + clientChallenge + '\x00' * 4 + serverInfo + '\x00' * 4`
    - `NtProofString = HMAC_MD5(NTResponse, basicData)`
  - **Step 3**: `SessionBaseKey = HMAC_MD5(NTResponse, NtProofString)`

- **NTLM Key Logic**:
  - User’s password -> User’s NT Hash -> (Combined with challenge & auth data) -> SMB SessionBaseKey
  - If "Negotiate Key Exchange" is set, the client generates a new random SessionBaseKey, RC4 encrypts it with the original SessionBaseKey, and sends it in the NTLMSSP_AUTH request in the "SessionKey" field.

### NTLMv2 Process
- **NTLMSSP Negotiate**: Client initiates the authentication process.
  - No username, password, or domain information in the message.
  - "Negotiate Key Exchange" is usually set.
- **NTLMSSP Challenge**: Server responds with a challenge.
  - Contains: Server challenge, server information.
- **NTLMSSP AUTH (Challenge-Response)**: Client responds with authentication data.
  - Contains: Client username, client domain, client challenge, NtProofString, ResponseServerVersion, HiResponseServerVersion, Timestamp, Encrypted new SessionBaseKey.

### Kerberos and SessionBaseKey
- **Kerberos Session Key**:
  - User’s plaintext password -> Kerberos Session Key -> Service Session Key (inside TGS).
  - If mutual authentication is used, the server replies with a new SessionBaseKey encrypted with the previous one.
  - Key logic: User’s plaintext password -> Kerberos Session Key -> Service Session Key (inside TGS) -> New Service Session Key (inside AP_REP).

### Signing the Packet
- **SMB 1.0**: `Signature = HMAC_MD5(SessionBaseKey, SMBPacket)`
- **SMB 2.0.2 & 2.1.0**: Only the first 16 bytes of the hash make up the signature. `Signature = HMAC_SHA256(SessionBaseKey, SMBPacket)`
- **SMB 3.0.0, 3.0.2 & 3.1.1**: A special signing key is derived from the SessionBaseKey. `Signature = CMAC_AES128(SigningKey, SMBPacket)`

### Attacking SMB
- **Without Encryption**:
  - Steal copies of files passed over the wire in cleartext.
- **Without Signing**:
  - Replace every file with an identical LNK that executes code.
  - Swap out the contents of any legitimate file with a malicious one of the same file type.
  - Inject fake files into directory listings for social engineering.
- **With Known SessionBaseKey**:
  - All above + backdoor any logon scripts and SYSVOL data.

### Default Settings
- **SMB1**:
  - Client supports it, server doesn’t.
  - Unless both support it or one requires it, no signing will be used.
  - No encryption support.
- **SMB2/3**:
  - Server and client support it but don’t require it.
  - Encryption was introduced in SMB3.

This structured and detailed overview should provide a clear and professional presentation of the topic.