# FEX: A Flexible Experimentation Framework

## 1. Introduction
FEX is a flexible and extensible framework for building, running, collecting, and plotting benchmarks. It supports various build parameters and allows users to customize the appearance of emitted plots. The framework is sensitive to environment variables, and FEX provides a convenient wrapper to specify default variables for different steps.

## 2. System Architecture
FEX follows a structured workflow, consisting of four main subsystems: building, running, collecting, and plotting. The latter two subsystems have a straightforward structure, while the former two are more complex and will be discussed in detail.

### 2.1 Build Subsystem
The build stage in FEX can handle two scenarios:
1. A single application can be built multiple times with varying build parameters.
2. The same parameters can be reused for multiple different applications.

To support this variability, the build subsystem is divided into three layers (as shown in Figure 2):
- **Common Layer**: Contains parameters applicable to all benchmarks and build types, such as optimization levels, debugging information, common compilation flags, and generic compilation targets.
- **Experiment Layer**: Manages parameters specific to the current build type. For example, if a benchmark suite needs to be built with GCC and AddressSanitizer enabled, the makefiles will set the `CC` variable to `gcc` and `CFLAGS` to `-fsanitize=address`.
- **Application Layer**: Defines the structure and procedure of the build, specifying the location of source files, listing dependencies, and setting application-specific flags.

These layers can be replaced independently, allowing any application to be compiled with any existing build configuration without additional effort.

### 2.2 Experiment Runners
When an experiment is started using the command:
```bash
fex.py run ...
```
a new instance of the `FEX` class is created. This object controls the overall experiment execution by:
1. Retrieving a configuration file and setting experiment parameters.
2. Setting environment variables to the necessary values using child classes of the `Environment` abstract class.
3. Instantiating and calling the appropriate child class of the `Runner` class to perform the actual experiment.

#### Environment Variables
Environment variables can vary based on the experiment parameters. FEX defines four types of variables:
1. **Default**: Default values of environment variables.
2. **Updated**: Values appended if the variable exists, otherwise assigned.
3. **Forced**: Variables overwritten regardless of previous values.
4. **Debug**: Values set only in debug mode.

The order of these types is important, with each subsequent type having higher priority. Users can add new types by subclassing `Environment` and redefining the `set_variables` function.

#### Experiment Loop
The key function in the `Runner` class is `experiment_loop`, which iterates over all execution parameters through a series of nested loops. For example:
- The outermost loop might iterate over compilers like GCC and Clang.
- The next loop might iterate over applications like Nginx, Apache, and Memcached.

Each loop has a hook that can be implemented in a subclass, allowing the experiment's structure to remain consistent while tailoring actions to specific needs.

## 3. FEX Details and Workflow
### 3.1 Creating New Experiments
FEX facilitates the creation of new experiments and the evaluation of new benchmark suites and standalone programs. The framework assumes a specific directory tree structure, similar to projects like Jekyll.

#### Directory Structure
An example directory tree is shown in Figure 5. To evaluate the performance overhead of Google's AddressSanitizer on the Phoenix benchmark suite and Apache web server, the user sets up the environment with GCC version 6.1, which includes AddressSanitizer by default.

**Steps to Create a New Experiment:**
1. **Write Installation Scripts**: Install the GCC 6.1 compiler, download input files for the Phoenix benchmark, and install an additional Apache benchmark. FEX provides helper functions in `install/common.sh` for common operations.
2. **Create Makefiles**: Place compiler-specific and type-specific makefiles under `makefiles/`. For example, `gcc_native.mk` and `gcc_asan.mk`.
3. **Place Application-Specific Files**: Put application-specific makefiles and sources under `src/`. Standalone programs like Apache are placed in a separate `applications/` subdirectory.
4. **Describe Experiments**: Place the experiment descriptions under `experiments/`. The `run.py` file describes benchmarks and their command-line arguments. Additional hooks can be implemented for preliminary dry runs.
5. **Set Environment Variables**: Modify `environment.py` to set specific environment variables, such as `ASAN_OPTIONS` for fine-tuning AddressSanitizer.
6. **Configure Collection and Plotting**: Use `config.py` to modify parameters for result collection and plotting.

### 3.2 Running New Experiments
Once the experiment description is complete, the user can rebuild the Docker container using `Dockerfile` and deploy it on a test server. The experiment proceeds in two stages:

1. **Setup the Experiment**:
   ```bash
   fex.py install -n gcc-6.1
   fex.py install -n phoenix_inputs
   fex.py install -n apache
   ```

2. **Run the Experiment**:
   ```bash
   fex.py run -n phoenix -t gcc_native gcc_asan
   ```
   This command builds all Phoenix benchmarks using native and AddressSanitizer GCC versions, runs them once (with a preliminary dry run), collects statistics from logs, and saves the final data in a CSV table.

Several command-line flags are available to fine-tune the experiment.

## 4. Conclusion
FEX provides a robust and flexible framework for conducting experiments with various build parameters and benchmarks. Its modular design and clear directory structure make it easy to create and run new experiments, ensuring reproducibility and customization.