Fast detection of large ﬂows minimizes
collateral damage. Hence, for a large ﬂow violating the high-
bandwidth threshold over [t1, t2), the algorithm should de-
tect the ﬂow no later than t2 + tprocess, where tprocess is the
time it takes to process a packet.
3. ALGORITHM
In this section, we ﬁrst investigate and prove the no-
FPs and no-FNℓ relationships between landmark and arbi-
trary window models because they are useful for construct-
ing large-ﬂow algorithms over arbitrary windows. Based on
these relationships, we present EARDet, a streaming algo-
rithm that eﬃciently addresses the large-ﬂow problem over
arbitrary windows (as deﬁned in Deﬁnition 1) with exactness
outside an ambiguity region. Finally, we discuss the imple-
mentation and optimization techniques in detail, and numer-
ically demonstrate that EARDet can operate at high-speed
links while using only hundreds bytes of on-chip SRAM.
It is important to investigate the relationships between
landmark and arbitrary window models because they enable
us to draw on the rich experience of research on the large-
ﬂow problem over landmark windows [10,14,17,18,23,29–31]
for designing arbitrary-window algorithms. Particularly, we
are interested in knowing whether and to what extent we
can leverage existing landmark-window algorithms to build
arbitrary-window ones. The technical contributions of this
paper include proving two theorems that shed light toward
a systematic approach applying existing landmark-window
algorithms to arbitrary-window algorithms.
EARDet leverages the Misra-Gries (MG) algorithm [31],
which ﬁnds all frequent items in a data stream in one pass
but may falsely include non-frequent items. The MG algo-
rithm works over landmark windows in the sense that the
landmark is at the beginning of the data stream. The re-
search challenges here include (1) how to preserve MG’s
no-FNℓ property (over landmark windows) when porting
it to the arbitrary window model, and (2) how to achieve
the no-FPs property when processing packets in one pass.
EARDet modiﬁes the MG algorithm in several novel ways
to eﬀectively address the above challenges.
Interestingly,
despite these simple modiﬁcations, we prove that EARDet
achieves both no-FPs and no-FNℓ properties over arbitrary
windows, thereby providing strong guarantees regardless of
input traﬃc.
3.1 Relationships Between Landmark and
Arbitrary Windows
Here is a straightforward yet ineﬃcient solution to the
exact-outside-ambiguity-region large-ﬂow problem over arbi-
trary windows: the algorithm divides the problem into mul-
tiple sub-problems that each can be handled by a landmark-
window algorithm, L. More concretely, let Li be a copy
of L that monitors a time window starting from packet xi
and ending at the current time. For every newly arrived
packet xi, the algorithm initiates Li, and adds xi to the
new as well as all previous copies, L1, L2, · · · , Li. Then the
algorithm combines the answers returned by L1, L2, · · · , Li.
This straightforward solution is correct, but requires space
linear in the length of the traﬃc stream, which is pro-
hibitively expensive.
To make it more eﬃcient, the key idea is to eliminate
redundant copies of L. To show why this is possible, we
formally state two relationships between landmark windows
and arbitrary windows.
No-FPs relationship. We observe that only one copy
of L is needed to achieve the no-FPs property over arbitrary
window. Speciﬁcally, Theorem 2 states that if an algorithm
ensures (L1) no FPs in the landmark window model, then
it also ensures (A1) no FPs in the arbitrary window model.
Theorem 2. If an algorithm satisﬁes
• L1: For all t, it never reports a ﬂow whose volume is
below γ′
ℓt + β′
ℓ over time interval [0, t).
then it must also satisfy
• A1:
It never reports a ﬂow whose volume is below
γℓ(t2 −t1)+βℓ over time interval [t1, t2) for all t2 > t1.
when γ′
ℓ = γℓ and β′
ℓ = βℓ.
Proof sketch: L1 implies A1 because if a ﬂow sends less
than γℓ(t2 −t1)+βℓ for all intervals [t1, t2), it must also send
less than γ′
ℓ = γℓ and
β′
ℓ = βℓ. (cid:4)
ℓ for all intervals [0, t) when γ′
ℓt + β′
No-FNℓ relationship. The no-FNℓ relationship is more
challenging to prove. We observe that only one copy of L is
needed to achieve the no-FNℓ property if L’s traﬃc synopsis
is “similar” to the initial state throughout the execution of
the algorithm, as checking such a synopsis is roughly equiv-
alent to checking all of L1, L2, · · · , Li. In other words, we
can keep only one synopsis which somehow approximates
the synopsis in each sub-problem.
Formally, we deﬁne a distance metric dis(S, S′) quantify-
ing the similarity between two synopses:
dis(S, S′) ,
min
X,S ′=Update(S,X)
tspan(X)
where the time span of a packet sequence is deﬁned as
tspan(X) = maxx∈X time(x) − minx∈X time(x). S is deﬁned
as a snapshot of the algorithm’s internal state and thus does
not depend on time. The distance between two snapshots is
the shortest time it takes to convert one to the other given
a link capacity.
Theorem 3 states if an algorithm ensures (L2) no FNℓ
in the landmark window model and (L3) its synopsis is
bounded, it also ensures (A2) no FNℓ in the arbitrary win-
dow model.
Theorem 3. If an algorithm satisﬁes
• L2: For all t, it reports all ﬂows whose volume exceed
γ′
ht + β′
h over time interval [0, t).
• L3: Throughout the execution of L, dis(S0, Si) ≤
∆, where ∆ is a small constant and Si =
Update(S0, hx1, · · · , xii).
212then it must also satisfy
• A2:
It always reports a ﬂow whose volume exceeds
γh(t2 − t1) + βh over time interval [t1, t2) for some
t2 > t1.
when γh(t2 − t1) + βh ≥ γ′
h(t2 − t1 + ∆) + β′
h.
Proof sketch: Let L be an algorithm satisfying L2 and L3.
Let f be a ﬂow that sends more than γh(t2 − t1) + βh over
some time interval [t1, t2), and t2 is the smallest among all
possible values if the ﬂow f violates the spec multiple times.
To prove this No-FNℓ relationship, in the following we show
that L can catch any f when γh = γ′
h + γh∆,
thus satisfying A2 as well.
h and βh ≥ β′
For convenience, we denote by X b
a the incoming packet
stream between time interval [a, b). Since L satisﬁes L3 (i.e.,
the synopsis state of L is always bounded), dis(S0, St1 ) ≤ ∆
where St1 is its synopsis state at t1.
Based on the deﬁnition of the distance function, there
exists a packet sequence X ′ with a time span less than ∆ and
Update(S0, X ′) = St1 . In other words, from the algorithm’s
perspective, Update(S0, X t2
t1 ),4 i.e.,
the two packet sequences produce identical synopses. As a
result, if the algorithm L can detect f in X ′kX t2
t1 then it
can also detect f in X t2
0 because the output of the detection
function, Detect, solely depends on the synopsis.
0 ) = Update(S0, X ′kX t2
Moreover, by construction, f sends more than γh(t2 −
t1) + βh in the new sequence X ′kX t2
t1 , whose time span is
t2 − t1 + ∆. Therefore, L can detect f in the new sequence
because γh(t2 − t1) + βh ≥ γ′
h holds when
γh = γ′
h + γh∆. Hence, L can also detect f in
the original stream, X t2
h(t2 − t1 + ∆) + β′
h and βh ≥ β′
0 . (cid:4)
ℓ, β′
We note that L1 and A2 contradict each other for any
parameter selection: for any γ′
ℓ, γh, and βh, consider an
interval [t1, t2) satisfying t1 = t2 − ǫ and t2 > βh−β ′
ℓ+γhǫ+1
.
γ ′
ℓ
Then a ﬂow sending γh(t2 − t1) + βh + 1 over [t1, t2) will
violate the high bandwidth threshold over [t1, t2) but comply
with γ′
ℓ over [0, t2). That is, no algorithm can satisfy
(A2, L2, L3) and (A1, L1) at the same time.
ℓt2 + β′
The above two theorems can be viewed as guidelines for
designing new arbitrary-window algorithms based on exist-
ing landmark-window algorithms.
3.2 Algorithm Construction
Several existing landmark-window approaches [10, 14, 17,
23, 29–31] satisfy L2 when β′
h is set to zero. Among these
approaches, we observe that the MG algorithm [31] can be
made to satisfy L2 in a general setting (i.e., β′
h can be
non-zero) as well as L3 with slight modiﬁcations. As a re-
sult, we choose to leverage the MG algorithm for designing
EARDet.
We prove in the next section that EARDet’s design en-
sures L2 and L3, and therefore achieves the no-FNℓ prop-
erty (i.e., catching every large ﬂow) based on Theorem 3.
We also prove that EARDet achieves the no-FPs property
(i.e., protecting every small ﬂow), whereas the MG algo-
rithm requires a second pass to remove false positives in the
landmark window model.
Background of the MG algorithm. We brieﬂy review
the MG algorithm, which inspires our design. The MG algo-
rithm ﬁnds the exact set of frequent items (deﬁned as items
4k denotes concatenating two packet sequences into one se-
quence.
packet x
Is x blacklisted?
No
Counter update
for virtual !ows
Counter update
for x
Blacklist
Blacklist
Update
Yes
counter > 
threshold?
Figure 3: EARDet’s decision diagram.
that appear in a stream of m items for more than m
n+1 times)
in two passes with only n counters. This algorithm gener-
alizes the Majority algorithm [6, 20], which focuses on the
case when n = 2. The same generalization was rediscovered
by Demaine et al. [14] and Karp et al. [23].
The MG algorithm assumes an associative array of coun-
ters indexed by items. Counters are initialized to zeros. We
say that an item is stored if its counter is above zero. For
each incoming item e, the MG algorithm works as follows:
(1) If e is stored (i.e., ctr[e] > 0), increase ctr[e] by 1; (2) Else
if the number of non-zero counters is less than n, ctr[e] = 1;
and (3) Otherwise, decrease all non-zero counters by 1.
Since there are at most n non-zero counters kept at any
time, the storage overhead is O(n). This can be easily ex-
tended to items with positive weights. After the ﬁrst pass,
the MG algorithm guarantees that every frequent item is as-
sociated with a non-zero count, and a second pass is required
to remove falsely included infrequent items.
The correctness of this algorithm can be shown intuitively
as follows: Suppose an item e appears more than m
n+1 times,
but is not stored at the end. The total count would have
been reduced by more than m
n+1 · (n + 1) = m counts during
the execution, which is impossible since it is more than the
total number of items.
EARDet Overview.
Figure 3 illustrates EARDet’s de-
cision diagram for each incoming packet. At a high level,
EARDet works similarly to the MG algorithm except three
crucial distinctions:
• Blacklist: EARDet keeps a local blacklist L that
stores recently identiﬁed large ﬂows. Counters are up-
dated only if the ﬂow ID of the packet is not black-
listed. The main purpose of keeping the blacklist is
to avoid increasing a ﬂow’s counter when the counter
value has already exceeded a counter threshold, βT H .
Additionally, we can avoid spending unnecessary re-
sources on accounting blacklisted ﬂows. We bound the
blacklist’s size in Section 3.3.
• Counter threshold: A ﬂow is added to the blacklist
if its associated counter value exceeds a threshold βT H .
Setting a counter threshold together with blacklisting
ensures that counter values are always conﬁned, i.e.,
≤ βT H + α, where α is the maximum packet size.
• Virtual traﬃc:
In contrast to the frequent-item
problem, the large-ﬂow problem has to take the idle
time between two consecutive packets into account so
as to accurately detect large ﬂows with respect to the
link capacity. EARDet handles this by virtually ﬁll-
ing the unused bandwidth with virtual traﬃc. Virtual
traﬃc consists of multiple virtual ﬂows, each of which
is crafted purposely to comply with the low-bandwidth
threshold, thus avoiding unnecessary alarms.
Algorithm description.
Algorithm 1 describes how
EARDet works. As the MG algorithm, EARDet keeps
213βTH + α
βTH
8
b
5
a
g
2
8
b
5
a
2
g
b
3
11
b
5
a
2
g
e
2
9
b
3
a
virtual
traffic
6
6
b
Blacklist: 
Blacklist: 
Blacklist: b
Blacklist: b
Blacklist: b
Figure 4: Example of EARDet’s counter update.
n counters, each initialized to zero. Counters are stored in
an associative array indexed by ﬂow IDs, and the number of
non-zero counters never exceeds n. EARDet counters are
increased and decreased by the size of the packets, since a
packet of size w can be viewed as w uni-sized items. We
denote by C the set of non-zero counters. We discuss how
to implement EARDet eﬃciently in Section 3.3.
Algorithm 1 EARDet
1: Initialization (S ← Init(n), Line 8-9)
2: for each packet x in the stream do
3:
4:
5:
6:
7:
Add f to blacklist (L ← L ∪ {f})
if x’s FID f is not blacklisted (f /∈ L) then
Update counters for virtual traﬃc (Line 18-22)
Update counters for x (S ← Update(S, x), Line 10-17)
if detect violation (Detect(S, x) == 1, Line 21-22) then
8: Initialization, Init(n)
9: initialize all counters to zeros, L ← ∅, C ← ∅
10: Update counters for packet x, Update(S, x)
11: if x’s FID f is kept (f ∈ C) then
12:
13: else if less than n counters are kept (|C| 
βT H )
Figure 4 gives an example showing how to update counters
when n = 3, βT H = 10, and α = 3, where α is the maximum
packet size. First, since there is an empty counter, ﬂow g is
added and its counter value becomes 2, the size of the new
packet. Then, since ﬂow b is stored already, its counter is
increased by 3. The new value of ctr[b] exceeds βT H , and
thus ﬂow b is blacklisted. The next ﬂow, e, is not stored yet
and there is no empty counter, so all counters are decreased
by the packet size. Finally, the virtual traﬃc is divided into
single-unit packets with new ﬂow IDs, resulting in the ﬁnal
state.5
Despite EARDet’s simple operations, work remains to
prove the no-FPs and no-FNℓ properties and to devise prac-
tical parameters. We answer these in Section 4.
5Conceptually, the counter values are updated as follows:
[3, 9, 0] → [3, 9, 1] → [2, 8, 0] → [2, 8, 1] → [1, 7, 0] →
[1, 7, 1] → [0, 6, 0]. Section 3.3 discusses techniques to ac-
celerate this process.
3.3 Data Structure and Optimization
While EARDet requires very little memory state, its pro-
cessing delay may be high in a naive implementation where
EARDet accesses every counter for each decrement opera-
tion (i.e., Line 16 in Algorithm 1). We now present several