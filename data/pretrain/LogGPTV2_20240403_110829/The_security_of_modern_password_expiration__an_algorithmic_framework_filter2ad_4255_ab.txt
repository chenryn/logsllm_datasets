=
=
≤
E(coverBemts(r) | πr ∈ T (σr ))
E(coverBmssc (r) | πr ∈ T (σr))
Pk coverBemts (k)
Pk coverBmssc(k)
Pk coverBemts (k)
Pk coverBmssc(k)
Pk coverBmssc(k)
Pk cover∗
emts(k)
Pk coverBmssc(k)
Pk cover∗
mssc(k)
·
·
≤ d · 4
(2)
(3)
cover∗
mssc(k) ≤ Pk
coverBmssc(k) ≤ 4 · Pk
where the sums are taken over all k such that πk ∈ T (σk). Above,
cover∗
(2) follows because Pk
(3)
holds since Pk
mssc(k) [11], and
because for any ~t, orderBemts(~t) ≤ d · orderBmssc(S~t ), since Bemts
may insert up to d nodes of T before each node ~ti output by Bmssc.
(|~t| in line 9 is at most d.) Therefore, Pk
coverBemts(k) ≤ Pk d ·
coverBmssc(k). So, Bemts is a 4d-approximation for emts.
emts(k).
cover∗
The time complexity of Bmssc(U, S) is O(|U | · |S|). As used in
Bemts(T, d, σ1..n, π1..n), where |U | ≤ n and |S| = |T |, its com-
plexity is thus O(n|T |). Bemts also performs up to d loop iterations
per ~t ∈ T , effectively walking T from its root to ~t (lines 9–12).
Consequently, the time complexity of Bemts(T, d, σ1..n, π1..n) is
O(n|T | + d|T |). Finally, because |T | = (|T|d+1 − 1)/(|T| − 1) −
1 = O(|T|d), the complexity of this algorithm is O((n + d)|T|d).
T
TED
TEDM
TLI
TLIP
|T|
3402
4371
534
50
d = 1
3402
4371
534
50
d = 2
11577006
19110012
285690
2550
|T |
d = 3
3.9 × 1010
8.4 × 1010
152558994
127550
d = 4
1.3 × 1014
3.7 × 1015
8.1 × 1010
6377550
Figure 3: Sizes of transform sets and resulting trees
(i)} then
3.3 Instantiating Bemts with Transforms
We consider the following sets T of transforms. Figure 3 shows
the sizes of these sets and the trees that result at different depths d.
• Edit distance: The edit distance between two strings is the min-
imum number of character insertions, deletions or replacements
necessary to turn one string into the other. For our analysis, the
transforms for T = TED that we apply to an input σ of length ℓ
include character deletion, insertion, and replacement at a spe-
ciﬁc position. The number of position-dependent transforms in
TED thus depends on ℓ. In our evaluations, we constructed TED
to accommodate password lengths up to ℓ = 18, as this accom-
modated all password lengths that occurred in our data (see §4).
• Edit distance with substring moves: Edit distance with sub-
string moves [8] is a variation of edit distance that permits a
substring move in one step. The transforms T = TEDM in this
case include all of TED in addition to:
– A substring move with parameters 1 ≤ j ≤ j ′ ≤ j′′ ≤ ℓ
results in σ[1..(j − 1)]σ[j ′..j′′]σ[j..(j′ − 1)]σ[(j′′ + 1)..ℓ].
For example, password could be changed to wordpass in a
single substring move (with j = 1, j′ = 5, and j′′ = 8).
• Hand-crafted location-independent transforms: We also con-
sider a set T = TLI that, unlike the case of edit distance with or
without moves, can be applied at any location in a password.
The types of such transforms that we include in TLI cover eight
disjoint categories:
Tcap: capitalization (e.g., “17candy#” → “17candY#”)
Tdel: digit and special character deletion
(e.g., “alex28!!!” → “alex28!!”)
Tdup: digit and special character duplication
(e.g., “stinson1!” → “stinson11!”)
Tsub: digit and special character substitution with the same
character type (e.g., “tar!heel1” → “tar!heel2”)
Tins: sequential insertion (e.g., “dance#7” → “dance#78”)
Tleet: leet transformation (e.g., “raven#1&” → “r@ven#1&”)
Tmov: letter, digit or special character block moves
(e.g., “$steve27” → “27$steve”)
Tkey: replacement of a digit or special character with the
alternate character for the same key
(e.g., “l00py*!2” → “l00py*!@”)
In total, we derived 534 location-independent transforms in TLI.
For completeness, the full list is provided in Appendix A. Given
time constraints, it was not possible to apply these transforms
beyond d = 3. However, to explore the impact of expanding
our search to larger values of d, we consider one ﬁnal category.
• Pruned hand-crafted location-independent transforms: We
selected the 50 most successful transforms TLIP ⊆ TLI at d = 1.
The speciﬁcs of how we choose this subset is discussed in Ap-
pendix A. Given this reduced set TLIP, we were able to search
to d = 4 in our experiments.
1794. EVALUATION
For this study, we examine password hashes for accounts of the
ONYEN (http://onyen.unc.edu) single-sign-on system at
our institution. Each member of the university community is as-
signed an ONYEN (an acronym for “Only Name You’ll Ever Need”).
The password for each ONYEN is required to change every 3 months;
ONYENs for which this change does not occur are suspended. The
password management policy requires a user to follow the follow-
ing rules when creating a new password for an ONYEN:
• It cannot have been used for this ONYEN in the last year.
• It must be at least 8 characters long.
• It must contain at least one letter and at least one digit.
• It must contain at least one of the following special characters:
!@#$%&*+={}?<>"’
• It must share fewer than six (or length of the ONYEN, if less
than six) consecutive common characters with the ONYEN.
• It must not start with a hyphen, end with a backslash, start or
end with a space, or contain a double-quote anywhere except as
the last character.
The dataset we acquired contains 51141 unsalted MD5 pass-
word hashes from 10374 defunct ONYENs (used between 2004
and 2009), with 4 to 15 password hashes per ONYEN, i.e., the
hashes of the passwords chosen for that ONYEN sequentially in
time. The ONYENs themselves were not provided with the pass-
words, and so we have no knowledge of the users to whom these
passwords corresponded. However, since ONYENs are broadly
used by UNC faculty, staff, and students, and employees of UNC
hospitals, we believe that this data reﬂects a diversity of user edu-
cations and backgrounds. The data collected represents a time span
during which the password management policy was the same as it
is today. Another pertinent fact is that ONYENs are widely used at
UNC for private services such as email, access to payroll manage-
ment, beneﬁts selection, etc. As such, ONYENs play a signiﬁcant
role in users’ daily lives, in contrast to seldomly used web-based
accounts. Moreover, because the ONYEN is required for gaining
access to sensitive information (e.g., payroll) users have strong in-
centives for choosing “good” passwords.
2397 6746 942 210
37
26
10
4
1
1
 0
4
6
7
8
5
12
Number of passwords in account
10
11
9
Figure 4: Passwords cracked per account in our dataset. Each
bar represents accounts with the number of passwords indi-
cated on the x-axis. The number of such accounts is shown
above each bar. Regions within each bar show the fraction of
these accounts for which the indicated number of passwords
were cracked.
Since we were provided only hashes, the ﬁrst challenge was to
crack as many of these passwords as we could. Due to conﬁden-
 1
 0.8
 0.6
 0.4
 0.2
s
t
n
u
o
c
c
a
f
o
n
o
i
t
c
a
r
F
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
15
tiality agreements that accompanied this data, we were unable to
distribute this data widely to many machines. Instead, all of our
cracking activity that involved accessing these hashes was isolated
on two specially conﬁgured machines, each with two quad-core
2.67GHz processors and 72GB of RAM. One computer was avail-
able for this activity starting mid-October 2009, and the second
came online in January 2010, though neither could be exclusively
dedicated to password cracking.
We employed various approaches to crack passwords: dictionary-
based password cracking using “John the Ripper” (http://www.
openwall.com/john/), including its “Markov mode” provided
as a patch for version 1.7.6; brute-force password cracking; and
rainbow tables [20]. The dictionary-based approach was most ef-
fective, especially when combined with the word-list-generating
method of Weir et al. [26]. For passwords we cracked via these
techniques, we further attempted to crack other passwords for the
same ONYEN using the techniques we described in §3. (We will
evaluate the effectiveness of those techniques in §4.1–4.2.)
At the time of this writing, we have cracked 31075 passwords for
7936 ONYENs. Figure 4 shows the fraction of passwords cracked
for each ONYEN, with ONYENs separated by the number of hashes
available for it. For example, as illustrated in the left-most column,
which describes accounts with four passwords, we broke no pass-
words in 25% of these accounts; one password in 10%; two pass-
words in 10%; three passwords in 15%; and all four passwords in
40%. Overall, among the 7936 ONYENs in which we cracked at
least one password, we broke all passwords belonging to 54% of
these ONYENs, and broke at least half in 90%.
Since our goals speciﬁcally focus on guessing future passwords
from past ones for the same ONYENs, we restrict our attention to
only those ONYENs for which we have at least one cracked pass-
word and, among ONYENs with only one cracked password, those
in which the cracked password is not the last one in the account.
In the rest of this paper, we use the n = 7752 ONYENs meeting
this criterion as our experimental data. For such accounts, though,
even passwords we have not cracked but that temporally follow a
cracked password can be useful in our evaluations. For example,
in §4.1 we deﬁne each σk to be a password that has been cracked
and the hash for which is not the last for its ONYEN, and πk to
be the password corresponding to a hash for the same ONYEN
that came temporally after that of σk (but not necessarily immedi-
ately), cracked or not. Then, given σk, we can determine whether
πk ∈ T (σk), even if we have not cracked πk. More to the point,
if we have not cracked πk, then this implies that πk 6∈ T (σk). In
the case that we have cracked πk, then we can obviously determine
whether πk ∈ T (σk) and, if so, the value of coverBemts(k).
4.1 Evaluation Over All Accounts
We now evaluate the effectiveness of the Bemts approach in break-
ing passwords. To do so, we perform a series of trials; in each,
σ1..n and π1..n are ﬁxed. To instantiate σ1..n and π1..n for a trial,
we populate σk with a password from account k chosen uniformly
at random from those we have cracked, excluding the last password
for the account. We then instantiate πk with a password (cracked
or uncracked) from account k chosen uniformly at random from
those that followed σk temporally. As discussed in §4, if we have
not cracked πk, this implies πk 6∈ T (σk) (for any T we consider),
and so such a password pair contributes to the probability of event
πr 6∈ T (σr) under random selection of r. For any such instanti-
ation of σ1..n and π1..n, we then conduct a trial as deﬁned below.
The numbers we report are the average of at least 10 trials.
In each trial, we partition the indices 1..n into ﬁve blocks, and
then perform a ﬁve-fold cross validation; i.e., we perform tests in
180T
d
P (πr ∈ T (σr))
E(min{i : ~ti(σr) = πr} | πr ∈ T (σr))
E(min{i : ~ti(σr) = πr} | πr ∈ T (σr))
Algorithm Bemts (§3.2)
Breadth-ﬁrst search
TED
TEDM
TLI
TLIP
1
2
1
2
1
2
3
1
2
3
4
0.26
0.39
0.28
0.41
0.25
0.37
0.41
0.17
0.24
0.28
0.30
145.29
284790.10
224.51
481607.44
65.52
15534.08
3082677.88
17.35
84.49
2543.04
91952.11
0.00,
69.22,
0.00,
33.41,
(skipped, failed, viable)
111.88 )
(
37054.93, 112244.51, 135490.65 )
(
(
155.29 )
( 101137.59, 206639.18, 173830.67 )
12.31 )
53.21,
(
2188.12,
(
323.44 )
( 3021178.93, 53122.41,
13.15,
(
(
28.41,
131.52,
(
(
1211.53,
740.03
562986.90
913.59
851020.60
261.57
33293.50
8376.54 ) 3504117.38
16.63
326.39
5630.27
199697.40
0.00,
45.87,
2366.45,
90267.93,
4.21 )
10.20 )
45.06 )
472.65 )
0.00,
13022.51,
0.00,
0.00,
64.12,
168.79,
(skipped, failed, viable)
675.91 )
(
48461.52, 238323.80, 276202.00 )
(
(
744.81 )
( 126514.20, 399700.70, 324805.60 )
41.42 )
220.15,
(
4627.74,
(
631.23 )
9612.92 )
( 3432836.84, 61667.63,
0.00,
4.08 )
12.55,
(
19.92 )
66.91,
239.57,
(
89.55 )
283.92,
(
5256.80,
( 196940.90,
2035.80,
720.76 )
0.00,
28034.53,
Figure 5: Evaluation of all accounts (§4.1). Each value is an average over 10 trials.
which a different block is used as testing data after training on
the other four. More speciﬁcally, in each test the four “training”
blocks are used to select the order in which the nodes of T are
searched, per algorithm Bemts. Then, each (σk, πk) in the “testing”
block is checked to determine if πk ∈ T (σk) and, if so, the value
of coverBemts(k). This allows us to compute P (πr ∈ T (σr)) and
E(min{i : ~ti(σr) = πr} | πr ∈ T (σr)) for this trial. We also
dissect this expected value, reporting the average number of nodes
~t (prior to ﬁnding πk) that were skipped because for some strict
preﬁx ~u of ~t, ~u(σk) = ⊥; that failed because ~t(σk) = ⊥; and that
were viable in that ~t(σk) 6= ⊥.
To demonstrate the cost savings in breaking passwords offered
by Bemts, we also show in Figure 5 the analogous costs if the tree
T were searched using breadth-ﬁrst search. Here we see that Bemts
offers signiﬁcant cost savings, reducing E(min{i : ~ti(σr) = πr} |