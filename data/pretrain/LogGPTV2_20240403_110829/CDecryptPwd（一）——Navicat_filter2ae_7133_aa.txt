# CDecryptPwd（一）——Navicat
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
本篇是`CDecryptPwd`系列的第一篇，笔者将介绍Navicat加密过程、其使用的加密算法以及如何使用C语言来实现其加密过程，文章最后是笔者自己编写的工具(解密Navicat保存在注册表中的数据库密码)。
## 0x01 环境
  * 平台：Windows 10(64 bit)
  * 编译环境：Visual Studio Community 2019
  * Navicat Premium 版本 12.1(64 bit)
## 0x02 Blowfish
> Navicat使用加密算法是Blowfish Cipher(河豚加密)，所以在介绍Navicat加密过程之前笔者要先介绍一下Blowfish
> Cipher。
###  0x02.0 Introduction
Blowfish是一种对称密钥分组密码，Bruce Schneier在1993年设计并公布。它没有专利，任何人均可自由使用。
###  0x02.1 Detail
  * 密钥长度：32-448位
  * 分组长度：64位
  * 16轮循环的Feistel结构
###  0x02.2 Feistel Structure
在介绍Blowfish之前先来搞清楚Feistel Structure(下图来自Wikipedia):
  1. 将原数据分成左右两部分
  2. 原数据的右侧不变，直接变成下次循环的左侧
  3. 将原数据的右侧与子密钥传递给轮函数F
  4. 轮函数返回值与原数据左侧进行异或运算，变成下次循环的右侧
上述4个步骤是一轮循环的工作过程，Feistel
Structure是进行了16轮循环方才完成一次加密。需要说明一点，在最后一轮循环中左右数据不对调。解密过程是加密过程的反向，具体可参照上图，不再赘述。
###  0x02.3 Source Code
> 笔者分析的源码是[Paul Kocher](https://www.schneier.com/code/bfsh-> koc.zip)版本，并没有使用[Bruce Schneier](https://www.schneier.com/code/bfsh-> sch.zip)版本。Schneier版本中的子密钥来源是`BLOWFISH.DAT`文件，而Kocher版本是直接在源文件中定义子密钥，分析起来较为直观。如需其他版本可到[此网站](https://www.schneier.com/academic/blowfish/download.html)下载
**0x02.3-1`BLOWFISH_CTX`**
在`blowfish.h`头文件中有如下定义：
    typedef struct {
      unsigned long P[16 + 2];
      unsigned long S[4][256];
    } BLOWFISH_CTX;
为结构体定义别名，结构体中的两数组即P-Box与S-Box。
**0x02.3-2`ORIG_P[16 + 2]`与`ORIG_S[4][256]`**
`ORIG_P`与`ORIG_S`取自[圆周率的小数位](http://www.super-computing.org/pi-hexa_current.html)，每4个字节赋值给其中的一个元素。
**0x02.3-3`void Blowfish_Init(BLOWFISH_CTX *ctx, unsigned char *key, int
keyLen)`**
该函数用来初始化S-Box与P-Box。传递参数中的`key`即密钥，`keyLen`是密钥长度。
  1. 对`BLOWFISH_CTX *ctx`中S-Box进行初始化，直接将`ORIG_S`中的每个元素逐一赋值给S-Box
  2. 对`BLOWFISH_CTX *ctx`中P-Box进行初始化，具体过程如下：  
a. `data=0x00000000;`  
b.
如果参数中的字符数组`key`长度不足4，则循环使用`key`中字符(当使用到`key`中最后一个字符时，下一个字符是`key`中第一个字符)与`data
>`0x61626361`并存储于`data`中)**  
c. 将`ORIG_P`中的每个元素与`data`作异或运算后逐一赋值给P-Box
  3. `datal=0x00000000;`  
`datar=0x00000000;`
  4. 将上面经过变换后的`ctx`，`datal`与`datar`传递给`Blowfish_Encrypt`
  5. 将加密后的`datal`与`datar`赋值给P-Box中的元素
  6. 重复9次步骤4-5
  7. 与步骤4类似，不过这次传递的是上面过程中已经加密后的`datal`与`datar`
  8. 将加密后的`datal`与`datar`赋值给S-Box中的元素
  9. 重复512次步骤7-8  
> 步骤5、8中提到的赋值过程是这样的(以步骤5来举例)：  
>  第一次 `P[0]=datal`，`P[1]=datar`  
>  第二次 `P[2]=datal`，`P[3]=datar`  
>  ……
**0x02.3-4`void Blowfish_Encrypt(BLOWFISH_CTX *ctx, unsigned long *xl,
unsigned long *xr)`**
该函数是Blowfish的加密部分。传递参数中的`ctx`应该已经初始化过S-Box与P-Box，`xl`指向原数据的左半部分，`xr`指向原数据的右半部分。
  1. 左侧数据与P-Box中第i个元素作异或运算(i=n-1,其中n是轮数)
  2. 将左侧数据与`ctx`传递给轮函数F
  3. 右侧数据与轮函数F返回值作异或运算
  4. 交换运算后的左右两侧数据
  5. 重复16次步骤1-5
  6. 将最后一轮运算互换的左右两侧数据换回来
  7. 右侧数据与P-Box中第16个元素作异或运算
  8. 左侧数据与P-Box中第17个元素作异或运算
上述过程即一次完整的加密过程，可参照下图来理解(来自Wikipedia，其中轮函数F的工作过程见`0x02.3-6`)：
**0x02.3-5`void Blowfish_Decrypt(BLOWFISH_CTX *ctx, unsigned long *xl,
unsigned long *xr)`**
解密过程是加密过程的逆过程，如有困惑，可参照源码理解，不再赘述。
**0x02.3-6`static unsigned long F(BLOWFISH_CTX *ctx, unsigned long x)`**
轮函数工作过程：
  1. 将参数`x`逐字节分割，赋值给`a`,`b`,`c`,`d`四个变量(e.g.:`x=0x21564378`,则`a=0x21`,`b=0x56`,`c=0x43`,`d=0x78`)
  2. `y = ((ctx->S[0][a] + ctx->S[1][b]) ^ ctx->S[2][c]) + ctx->S[3][d]`
  3. 返回y的值
###  0x02.4 Demo
此Demo来自[Paul Kocher](https://www.schneier.com/code/bfsh-koc.zip)版本根目录下的`blowfish_test.c`：
    #include 
    #include "blowfish.h"
    void main(void) {
      unsigned long L = 1, R = 2;
      BLOWFISH_CTX ctx;
      Blowfish_Init (&ctx, (unsigned char*)"TESTKEY", 7);
      Blowfish_Encrypt(&ctx, &L, &R);
      printf("%08lX %08lXn", L, R);
      if (L == 0xDF333FD2L && R == 0x30A71BB4L)
          printf("Test encryption OK.n");
      else
          printf("Test encryption failed.n");
      Blowfish_Decrypt(&ctx, &L, &R);
      if (L == 1 && R == 2)
            printf("Test decryption OK.n");
      else
          printf("Test decryption failed.n");
    }
需要说明的一点是Paul Kocher这个版本并没有考虑到小端序的情况，它均按大端序来处理，所以如果在Linux平台运行此Demo会像下图所示：
可以看到加密结果并非源码中给出的结果，而在Windows平台下运行，正常显示：
## 0x03 CBC模式
> 如果对于分组密码模式已经有所了解的读者可直接跳过此节
Blowfish Cipher与DES、AES一样，都是分组密码，Blowfish
Cipher每次只能处理64位(即分组长度为8字节)的数据，可是通常我们在加密时输入的明文长度都会大于8字节，这时如何去处理每个明文分组就成为一个应当考虑的问题。分组密码的模式是这个问题的解决方案，常见模式有5种：
  * ECB(Electronic Codebook, 电子密码本)模式
  * CBC(Cipher Block Chaining, 密码分组链接)模式
  * CFB(Cipher Feedback, 密码反馈)模式
  * OFB(Output Feedback, 输出反馈)模式
  * CTR(Counter, 计数器)模式
Navicat并没有使用上述的任何一种加密模式，但其采用的加密模式与CBC相似，故简单介绍CBC模式(下图来自Wikipedia)，如果对于其他4种加密模式感兴趣，可自行百度。
`Plaintext`是明文按照分组密码的分组长度分割而成，初始化向量`IV`、密钥`Key`在加密时自行决定，`Block Cipher
Encryption`是使用的加密算法，最终将每个密文分组`Ciphertext`连接起来即密文。
## 0x04 Navicat 加密过程
###  0x04.1 新建连接
首先，打开Navicat，新建一个MySQL连接：
连接名为Test,用户名默认root,密码123456:
Navicat将主机(Host),端口(Port),用户名(UserName)与加密后的密码(Pwd)保存到注册表中,不同的数据库连接对应的注册表路径不同,具体路径如下:
`Win+R`之后键入`regedit`打开注册表，按照上述路径去查找，可以看到刚刚我们建立的MySQL连接的相关键值对：
###  0x04.2 Navicat如何加密数据库密码
**0x04.2-1 Key**
Navicat使用SHA-1生成160位长度的密钥：
存放于无符号字符数组中：
    unsigned char Key[20] = {
        0x42, 0xCE, 0xB2, 0x71, 0xA5, 0xE4, 0x58, 0xB7,
        0x4A, 0xEA, 0x93, 0x94, 0x79, 0x22, 0x35, 0x43,
        0x91, 0x87, 0x33, 0x40
    };
**0x04.2-2 IV**
Navicat在加解密过程中用到的IV是通过Blowfish Cipher加密8字节长度的`0xFFFFFFFFFFFFFFFF`得到，代码细节如下：
        unsigned long l,r;
        unsigned char IV[BLOCK_SIZE] = "";
        int i;
        BLOWFISH_CTX ctx;
         //Initialize Initial Vector
        l=0xFFFFFFFF;
        r=0xFFFFFFFF;
        Blowfish_Init(&ctx,Key,20);
        Blowfish_Encrypt(&ctx,&l,&r);
        for(i=3; i>=0; --i)
        {
            IV[i]=(unsigned char)(l & 0xFF);
            l >>=8;
            IV[i+4]=(unsigned char)(r & 0xFF);
            r >>=8;
        }
`Blowfish_Encrypt(&ctx,&l,&r)`之后的`for`循环是要将8字节长度密文逐字节赋值给IV数组中的每个元素，IV数组中每个元素值具体如下：
    unsigned char IV[8] = {
        0xD9, 0xC7, 0xC3, 0xC8, 0x87, 0x0D, 0x64, 0xBD
    };
**0x04.2-3 Mode**
`0x03`部分中已经提到Navicat采用的分组密码模式并非5种主要加密模式之一，其采用的分组密码模式工作过程如下所示：
  * 每个`PlaintextBlock`长度为8字节；在`Blowfish_Cipher`环节不需要提供密钥`Key`，密钥`Key`在调用`Blowfish_Init()`已经提供，Blowfish Cipher在加解密过程使用已经初始化的`ctx`进行。
  * 只有剩余分组大小不足8字节时，才会进行上图中的最后一步。否则，一切照旧。
**0x04.2-4 密文存储**
按照分组密码模式，最终的密文应与明文长度一致，可注册表中保存的是”15057D7BA390”。这是因为Navicat在向注册表中写入的并非密文，而是十六进制表示的密文ASCII码。
## 0x05 Navicat Part of CDecryptPwd
> 由于此工具目前处于测试阶段，仍有许多有待完善之处，故暂时不公开源码，下面介绍的只是各环节的核心部分。
###  0x05.1 blowfish.c & blowfish.h
这两个文件直接使用的是Paul Kocher版本源码。
###  0x05.2 NavicatPartHeader.h
    #include 
    #include 
    #include "blowfish.h"
    #include 
    #include 