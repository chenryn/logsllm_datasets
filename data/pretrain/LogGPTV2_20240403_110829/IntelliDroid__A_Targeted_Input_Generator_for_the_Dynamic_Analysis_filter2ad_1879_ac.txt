ﬁnd a deﬁnition for these variables that can be executed to set
the heap variable to the required value.
An example of
this is shown in Listing 1 for
the
SmsReceiver.sNum heap variable,
in the call path to
abortBroadcast. This variable is used in a constraint
imposed by the conditional branch in line 25, but is deﬁned
in another invocation of onReceive where the intent action
string is BOOT_COMPLETED. To complete the constraints and
execute the target path, two actions must be completed: (i)
IntelliDroid must ﬁnd any additional constraints on the heap
variable and add them to the current path constraints; and
(ii) IntelliDroid must ensure that the value extracted for the
target constraints is actually stored in the heap variable prior
to executing the target path. Thus, when the constraints contain
a heap dependence, IntelliDroid searches for statements where
the heap variable is deﬁned and records the event handlers
containing the deﬁnitions. The path from the event handler
to the store instruction becomes a supporting call path and
IntelliDroid extracts supporting constraints for this path in the
same manner used for the target path. Later, when solving
the constraints, a concrete value will be assigned to the heap
variable and used to solve the target path constraint.
For sNum in Listing 1, the supporting call path would begin
at onReceive and the supporting constraints would include
(i.getAction() = BOOT_COMPLETED). The main tar-
get path constraints would be appended with the extra con-
6
straint (sNum = 99765), which is extracted from the sup-
porting path and ensures that the SMS originating address is
properly constrained. The supporting path and the main target
path form an event-chain that results in the activation of the
targeted API. In the run-time component of IntelliDroid, this
event-chain will result in multiple input injections. In cases of
multiple heap variable dependencies, the process is performed
iteratively, as shown by the topmost backedge in Figure 1.
This forms a event-chain ordered by the data-ﬂow dependency
between the variables.
Event-chains are also needed when event handlers are
registered with the Android framework. In the Android system,
some event handlers are known to the system (e.g. lifecycle
handlers), some are declared in the application’s manifest, and
some are registered dynamically within the execution path
of a previous event handler. For those that are registered
dynamically, the registration process may require parameters
specifying how and when the event handler is to be called. For
instance, registering location callbacks requires that the appli-
cation specify the frequency and minimum distance between
consecutive callback invocations. These values are added to the
constraints to ensure that the injected event abides by these
parameters in the same way the Android framework would
in normal execution. The supporting call path leading to the
event handler registration is added to the event-chain due to the
control-ﬂow dependency between it and the target call path.
E. Run-Time Constraints
For the simple case where all constraint variables are
input-dependent or can be concretized, the constraints can
be solved statically and the run-time system merely has to
inject the input values. However, there may be cases where the
values of the non-input-dependent constraint variables cannot
be determined statically. This may occur for heap variables
where the alias analysis is imprecise or for values obtained
from Android API methods that cannot be modeled statically.
A purely static constraint extraction approach would either
be unable to extract all the path constraints or would need a
considerably more precise and expensive static analysis to do
so. However, IntelliDroid’s hybrid static-dynamic design side-
steps this dilemma by obtaining the values during run-time
by performing the constraint solving step immediately prior to
event injection. That is, although the constraints are extracted
during static analysis, they are solved at run-time so that any
statically unresolved variables can be resolved prior to being
passed to the constraint solver.
This delayed solving gives the user a choice of how to
use IntelliDroid to handle interactions between the Android
application and its environment. Variables whose values de-
pend on these interactions can either be monitored, indicating
that the interaction is allowed to proceed without modiﬁcation
and IntelliDroid merely eavesdrops on the interaction, or
controlled, where the IntelliDroid intercepts and replaces these
interactions with values it determines will exercise interesting
paths. Variables that depend on input from a possibly malicious
external component can be either monitored to understand
the interaction of the malware with the external component,
or controlled to understand what potential capabilities the
malware may give to an adversary in control of the external
component. On the other hand, variables that are derived from
the Android framework and OS, which are trusted, would
generally be controlled to take a value that, together with the
other constrained variables, satisﬁes the target path constraints
and enables the target API to be executed.
For monitored variables, the external input is often derived
from a control server that sends commands to the application.
In some cases, the application may request data from the server
and use this data to perform malicious activities. A common
example of this presented in [49] involves applications that
download a list of premium SMS numbers from the network
and intercept messages to/from these numbers such that the
user is unaware of the premium fees. Although the server
input cannot be determined statically, network monitoring can
extract the values returned and add these values to the target
path constraints. Constraints that occur on the server side are
not captured by IntelliDroid, although it is possible to set up a
fake server that sends the necessary replies to the application
when it makes network requests. However, because the fake
replies can affect the malicious activity that IntelliDroid aims
to analyze, these external variables are instead monitored to
determine the real values that the application expects and how
it behaves when given these values.
For controlled variables, they are unresolved due to their
dependence on the device state. For instance, malicious behav-
ior may only manifest during a certain time or date, and this
is reﬂected by constraints that contain the system time/date as
variables. These variables can be resolved by setting the device
state (e.g. setting the time) prior to injecting the main event.
The actual value used is determined by the statically extracted
constraints that depend on the external variable. For instance,
if a constraint is extracted stating that a particular target API
invocation is only triggered only when the system time is set to
“1:00”, the device time will be set to this value before injecting
the inputs to trigger the target API. This is essentially another
form of event-chain extraction, where supporting events must
be injected prior to executing the main target call path.
F.
Input Injection to Trigger Call Path
Once the constraints are generated and all run-time values
obtained, IntelliDroid can trigger the desired target call path
by obtaining the input parameters that fulﬁll the constraints.
As previously discussed, the task of solving the constraints is
placed in the dynamic component of IntelliDroid; thus, the
input parameters are solved for and generated immediately
prior to executing the target call path.
The dynamic component of IntelliDroid consists of a
client program running on a computer attached to the dev-
ice. Communication between this program and the dev-
ice is facilitated by a newly constructed Android service
(IntelliDroidService) that serves as a gateway for the
tool. As motivated earlier, IntelliDroid must inject inputs at
the device-framework interface, rather than the application
event handler, to ensure that state in the Android framework is
consistent with application state. When the static component
speciﬁes inputs for the execution of the targeted API, the
gateway service is responsible for injecting that input into the
device-framework interface of the Android OS on which the
application is running. To do this, IntelliDroidService
must perform two tasks. First,
identify a suitable
it must
injection point. Second, it must format the input values for
injection into the Android OS.
To identify a suitable injection point, IntelliDroid must
identify a method at
the device-framework interface that:
(1) is called when the corresponding external event occurs;
and (2) directly calls the desired application handler when it
is invoked. Further, such input injection points must have a
one-to-one relationship with the event handler of interest, so
that inputs thus injected will only result in the invocation of
the desired application event handler and no other handlers.
For instance, SMS events are received by the framework via a
socket, which is monitored by a long-running process. When
an SMS message arrives on the socket, a device-framework
interface is invoked by the process, which eventually calls
PhoneBase.sendMessage, the desired device-framework
interface handler.
To ﬁnd suitable injection points, we perform static analysis
of the Android framework, using a backward call graph traver-
sal starting from the event handlers of interest to ﬁnd candidate
injection points. Alternatively, since these injection points are
often located in Android service classes and these service
classes are well-known, IntelliDroid can be given a list of
classes where injection should occur and it will automatically
generate paths between methods within these classes and the
event handlers to be triggered. Because invoking such injection
methods will often require interprocess communication, Intelli-
Droid preferentially selects RPC methods as input injection
points as they present a cleaner interface.
To properly format inputs values for injection, the input
constraints for the application event handler (extracted by
the static phase of IntelliDroid) must be transformed into
constraints at the input injection point and then solved. As
a result, constraints imposed on the injection path between
the injection method and the application event handler are
extracted using the same analysis that IntelliDroid performs
on applications. In some cases,
injection paths may have
dependencies on other paths in the framework, requiring a
chain of device-framework events to be injected to properly
invoke the application event handler.
Since the Android framework is the same for every appli-
cation, IntelliDroid extracts the injection points and injection
path constraints for supported application event handlers once
and stores them in a library for use at run-time. At run-
time, injection path constraints are combined with target call
path constraints in the application using a logical AND. In
addition, IntelliDroid appends extra constraints specifying how
the injection method parameters are related to the event handler
parameters. Finally, the inputs may need to be formatted by
initializing the ﬁelds of a speciﬁc input object (for instance, a
Location object for a location event) to the desired value.
While the constraint solver can automatically generate the
appropriate values for the ﬁelds, the code to populate them
in the object is manually implemented.
IV.
A. Static Analysis
IMPLEMENTATION DETAILS
For versatility, IntelliDroid performs its analysis on com-
piled Android applications and does not require source code.
7
Because they are packaged in APK ﬁles and stored as Dex
bytecode, the applications must be unpacked and converted to
Java bytecode prior to analysis, using tools such as Dare [33]
and APKParser [3]. The converted ﬁles are then passed to
IntelliDroid’s static component, which uses the WALA static
analysis libraries [41]. WALA provides support for basic static
analysis, such as call graph generation, data ﬂow analysis, alias
analysis, and an intermediate representation based on SSA.
To perform the actual analysis on the code, IntelliDroid
creates a call graph using 0-1 context sensitivity with a type-
based heap model; this call graph is used to search for the
targeted APIs. However, the Android platform provides facili-
ties, such as Intents, Threads, Executors, IPCs, RPCs
and AsyncTask to allow applications to transfer execution
between event handlers without an explicit method invocation.
When generating the call graph within WALA, these Android-
speciﬁc edges are automatically added such that
the call
graph can give an accurate representation of how execution
ﬂows between methods in the application. The call edges are
conservatively patched based on the documented behavior of
the invoked method and on the parameters or constant values
used in the invocation. While a less precise call graph is used
when searching for the target methods, more precision is added
when analyzing individual target call paths to resolve method
invocations with full context and perform pointer analysis for
heap dependencies.
There are certain cases where framework API method
invocations must be treated differently. For instance, when
the constraint extraction encounters API methods that obtain
information from external sources (such as the network or a
ﬁle), it must note whether the returned values can be controlled
or monitored. This distinction is currently made on a per-
method case and is determined by whether the source of the
data is controlled by the third-party application developer.
Any data originating from an external source other than the
device, Android framework, or Android OS is considered
potentially malicious and the value is monitored. Other frame-
work methods may also be modeled due to the limitations of
the constraint solver. For instance, string methods are modeled
internally as well as trigonometric operations, since the con-
straint solver does not support such functionality. In general,
processing the invocation of a framework method depends on
whether it introduces externally-obtained data and whether the
constraint solver supports the operations performed.
The constraints generated by IntelliDroid are placed into
an app-speciﬁc ﬁle. When the static phase has completed, this
ﬁle will contain all target call paths found in the application,
along with information detailing how the dynamic component
can trigger them. For a given application, only one execution
of the static component is needed, since this ﬁle will contain
all of the information that the dynamic component requires.
B. Dynamic Analysis
The dynamic component of IntelliDroid consists of a client
program running on a computer, connected to a device or
emulator with a custom version of Android. The dynamic
client program is implemented using Python and acts as the
controller that determines the target call path to execute. It also
interfaces with the constraint solver used to generate the path
inputs: the Z3 constraint solver [17] with the Python API (Z3-
py). Communication between this program and the device is
facilitated via sockets, using the device port-forwarding feature
of the Android Debug Bridge (ADB) 3. The other endpoint
of the socket
is located in the gateway Android service,
IntelliDroidService. The IntelliDroidService
class is implemented as a long-running system service that is
instantiated upon device boot. On receipt of messages from the
client program, this service can obtain information about event
handlers, assemble an input object using values that the client
program sends, and trigger an event with the input object.
In certain cases, run-time values for constraints in the injec-
tion path are needed. For instance, the onLocationChange
event handler is called only when there is a minimum distance
from the last location sent to the application. The constraint
modeling this relationship would require the value of the last
location that the event handler received, as well as the mini-
mum distance parameter stored in the framework. IntelliDroid
extracts these values during run-time, by instrumenting the
system services handling these events to send event handler
information when requested by IntelliDroidService.
Although such run-time extraction is not strictly necessary, it
can provide an advantage over static extraction in cases where
the event handler registration parameters are not explicit within
the application code.
Because IntelliDroid is currently using the Python API for
the Z3 solver [17], the Z3 string library is not available. There-
fore, string functions such as equals(), contains(), or
startsWith() must be modeled and string variable types
are handled by the dynamic component as a special case. Due
to the heuristics used when modeling such functions, there
can be cases where complex string manipulation may not be
represented precisely by the extracted constraints.
V. EVALUATION
Our IntelliDroid prototype is implemented for the Android
4.3 operating system (Ice Cream Sandwich) and evaluated on
an Intel i7-2600 (Sandy Bridge) CPU at 3.40 GHz with 16GB
of memory. In the evaluation, we aim to answer the following
questions:
• How effective is targeting API calls derived from a real
dynamic analysis tool, and can this technique trigger all
of the malicious behavior that the dynamic analysis tool
can detect?
We integrate IntelliDroid with TaintDroid [19], a dynamic
taint-tracking tool and we demonstrate that the combina-
tion is able to detect all sensitive data leaks in a corpus
of privacy infringing malware.
• Given a targeted API, how effective is IntelliDroid at
generating the inputs to trigger it?
We test IntelliDroid on a wider range of targeted APIs and
malware, and evaluate whether it can generate inputs to
trigger all malicious behavior. We also discuss the effec-
tiveness of the different techniques used by IntelliDroid,
such as event chains and run-time data gathering.
3http://developer.android.com/tools/help/adb.html
8
TABLE II.
TAINTDROID TARGETED APIS
TABLE III.
PRIVACY LEAKING MALWARE
API Type
Number of APIs
Read phone data
Read database
Read location
Read UI data
Read account data
Read media data
Write data to HTTP
Write data to SMS
Write data to ﬁle
Total