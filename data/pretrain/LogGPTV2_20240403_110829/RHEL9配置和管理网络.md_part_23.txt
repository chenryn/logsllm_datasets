    `WG_HIDE_KEYS=never wg 显示 wg0`{.literal} 命令。
    请注意，如果已经通过 VPN 隧道发送流量，输出只会包含
    `latest handshake`{.literal} 和 `transfer`{.literal} 条目。
3.  显示 `wg0`{.literal} 设备的 IP 配置：
    ``` literallayout
    # ip address show wg0
    10: wg0:  mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000
        link/none
        inet 192.0.2.2/24 brd 192.0.2.255 scope global noprefixroute wg0
           valid_lft forever preferred_lft forever
        inet6 2001:db8:1::2/32 scope global noprefixroute
           valid_lft forever preferred_lft forever
        inet6 fe80::73d9:6f51:ea6f:863e/64 scope link noprefixroute
           valid_lft forever preferred_lft forever
    ```
:::
::: itemizedlist
**其他资源**
-   `wg(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-client-using-the-wg-quick-service_assembly_setting-up-a-wireguard-vpn}使用 wg-quick 服务配置 WireGuard 客户端 {.title}
:::
您可以通过在 `/etc/wireguard/`{.literal} 目录中创建配置文件来配置
WireGuard 客户端。使用此方法独立于 NetworkManager 配置服务。
此流程假设以下设置：
::: itemizedlist
-   Client:
    ::: itemizedlist
    -   Private key:
        `aPUcp5vHz8yMLrzk8SsDyYnV33IhE/k20e52iKJFV0A=`{.literal}
    -   隧道 IPv4 地址： `192.0.2.2/24`{.literal}
    -   Tunnel IPv6 address: `2001:db8:1::2/32`{.literal}
    :::
-   server：
    ::: itemizedlist
    -   Public key:
        `UtjqCJ57DeAscYKRfp7cFGiQqdONRn69u249Fa4O6BE=`{.literal}
    -   Tunnel IPv4 address: `192.0.2.1/24`{.literal}
    -   Tunnel IPv6 address: `2001:db8:1::1/32`{.literal}
    :::
:::
::: itemizedlist
**先决条件**
-   您已为服务器和客户端生成了公钥和私钥。
-   您知道以下信息：
    ::: itemizedlist
    -   客户端的私钥
    -   客户端的静态隧道 IP 地址和子网掩码
    -   服务器的公钥
    -   服务器的静态隧道 IP 地址和子网掩码
    :::
:::
::: orderedlist
**步骤**
1.  安装 `wireguard-tools`{.literal} 软件包：
    ``` literallayout
    # dnf install wireguard-tools
    ```
2.  使用以下内容创建 `/etc/wireguard/wg0.conf`{.literal} 文件：
    ``` literallayout
    [Interface]
    Address = 192.0.2.2/24, 2001:db8:1::2/32
    PrivateKey = aPUcp5vHz8yMLrzk8SsDyYnV33IhE/k20e52iKJFV0A=
    [Peer]
    PublicKey = UtjqCJ57DeAscYKRfp7cFGiQqdONRn69u249Fa4O6BE=
    AllowedIPs = 192.0.2.1, 2001:db8:1::1
    Endpoint = server.example.com:51820
    PersistentKeepalive = 20
    ```
    ::: itemizedlist
    -   `[Interface]`{.literal} 部分描述了客户端上接口的 WireGuard
        设置：
        ::: itemizedlist
        -   `Address`{.literal} ：以逗号分隔的客户端隧道 IP 地址列表。
        -   `PrivateKey`{.literal} ：客户端的私钥。
        :::
    -   `[Peer]`{.literal} 部分描述了服务器的设置：
        ::: itemizedlist
        -   `PublicKey`{.literal} ：服务器的公钥.
        -   `AllowedIPs`{.literal} ：允许向这个客户端发送数据的 IP
            地址。例如，将参数设置为：
            ::: itemizedlist
            -   服务器隧道 IP
                地址，以仅允许服务器与此客户端通信。上例中的值可配置这种情况。
            -   `0.0.0.0/0, ::/0`{.literal} 以允许任何远程 IPv4 和 IPv6
                地址与此客户端通信。使用此设置通过隧道路由所有流量，并使用
                WireGuard 服务器作为默认网关。
            :::
        -   `Endpoint`{.literal} ：设置服务器的主机名或 IP
            地址以及服务器的端口。客户端使用此信息来建立连接。
        -   可选的 `persistent-keepalive`{.literal} 参数定义一个
            WireGuard 发送 keepalive
            数据包到服务器的间隔（以秒为单位）。如果您在网络中使用具有网络地址转换(NAT)的客户端，或者防火墙在一段时间不活跃后关闭
            UDP 连接，则设置此参数。
        :::
    :::
3.  启用并启动 WireGuard 连接：
    ``` literallayout
    # systemctl enable --now wg-quick@wg0
    ```
    systemd 实例名称必须与 `/etc/wireguard/`{.literal}
    目录中的配置文件的名称匹配（没有 `.conf`{.literal}
    后缀）。该服务还会将这个名称用于虚拟网络接口。
:::
::: orderedlist
**验证**
1.  Ping 服务器的 IP 地址：
    ``` literallayout
    # ping 192.0.2.1
    # ping6 2001:db8:1::1
    ```
2.  显示 `wg0`{.literal} 设备的接口配置：
    ``` literallayout
    # wg show wg0
    interface: wg0
      public key: bnwfQcC8/g2i4vvEqcRUM2e6Hi3Nskk6G9t4r26nFVM=
      private key: (hidden)
      listening port: 51820
    peer: UtjqCJ57DeAscYKRfp7cFGiQqdONRn69u249Fa4O6BE=
      endpoint: server.example.com:51820
      allowed ips: 192.0.2.1/32, 2001:db8:1::1/128
      latest handshake: 1 minute, 41 seconds ago
      transfer: 824 B received, 1.01 KiB sent
      persistent keepalive: every 20 seconds
    ```
    要在输出中显示私钥，请使用
    `WG_HIDE_KEYS=never wg 显示 wg0`{.literal} 命令。
    请注意，如果已经通过 VPN 隧道发送流量，输出只会包含
    `latest handshake`{.literal} 和 `transfer`{.literal} 条目。
3.  显示 `wg0`{.literal} 设备的 IP 配置：
    ``` literallayout
    # ip address show wg0
    10: wg0:  mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000
        link/none
        inet 192.0.2.2/24 scope global wg0
           valid_lft forever preferred_lft forever
        inet6 2001:db8:1::2/32__ scope global
           valid_lft forever preferred_lft forever
    ```
:::
::: itemizedlist
**其他资源**
-   `wg(8)`{.literal} man page
-   `wg-quick(8)`{.literal} man page
:::
:::
:::
[]{#configuring-a-vpn-connection_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#configuring-a-vpn-connection_configuring-and-managing-networking.html#configuring-a-vpn-connection_configuring-and-managing-networking}第 14 章 配置 VPN 连接 {.title}
:::
这部分论述了如何配置虚拟专用网络（VPN）连接。
VPN 是通过互联网连接到本地网络的一种方式。`Libreswan`{.literal} 提供的
`IPsec`{.literal} 是创建 VPN 的首选方法。`libreswan`{.literal} 是 VPN
的用户空间 `IPsec`{.literal} 实现。VPN
通过在中间网络（比如互联网）设置隧道，启用 LAN 和另一个远程 LAN
之间的通信。为了安全起见，VPN
隧道总是使用认证和加密。对于加密操作，`Libreswan`{.literal} 使用
`NSS`{.literal} 库。
::: section
::: titlepage
# []{#configuring-a-vpn-connection_configuring-and-managing-networking.html#configuring-a-VPN-connection-with-control-center_configuring-a-vpn-connection}使用 control-center 配置 VPN 连接 {.title}
:::
这个步骤描述了如何使用 `control-center`{.literal} 配置 VPN 连接。
::: itemizedlist
**先决条件**
-   已安装 `NetworkManager-libreswan-gnome`{.literal} 软件包。
:::
::: orderedlist
**步骤**
1.  按 [**Super**]{.keycap} 键，键入 `Settings`{.literal}，然后按
    [**Enter**]{.keycap} 键打开 `control-center`{.literal} 应用程序。
2.  选择左侧的 `Network`{.literal} 条目。
3.  点 [**+**]{.keycap} 图标。
4.  选择 `VPN`{.literal}。
5.  选择 `Identity`{.literal} 菜单项来查看基本配置选项：
    [**General**]{.strong}
    `Gateway`{.literal} - 远程 VPN 网关的名称或 `IP`{.literal} 地址。
    [**认证**]{.strong}
    `类型`{.literal}
    ::: itemizedlist
    -   `IKEv2(Certificate)`{.literal}-
        客户端通过证书进行身份验证。它更安全（默认）。
    -   `IKEv1(XAUTH)`{.literal} -
        客户端通过用户名和密码或预共享密钥(PSK)进行身份验证。
        以下配置设置位于 `高级`{.literal} 部分：
        ::: figure
        []{#configuring-a-vpn-connection_configuring-and-managing-networking.html#figu-Advanced-options-of-a-VPN-connection}
        **图 14.1. VPN 连接的高级选项**
        ::: figure-contents
        ::: mediaobject
        ![网络 vpn 高级选项](images/networking_vpn_advanced_options.png)
        :::
        :::
        :::
        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        当使用 `gnome-control-center`{.literal} 应用程序配置基于 IPsec
        的 VPN 连接时，`高级`{.literal}
        对话框会显示配置，但它不允许任何更改。因此，用户无法更改任何高级
        IPsec 选项。使用 `nm-connection-editor`{.literal} 或
        `nmcli`{.literal} 工具来配置高级属性。
        :::
        [**身份识别**]{.strong}
    -   `域`{.literal} - 如果需要，输入域名。
        [**安全性**]{.strong}
    -   `Phase1 Algorithms`{.literal} - 对应于 `ike`{.literal} Libreswan
        参数 - 输入用来验证和设置加密频道的算法。
    -   `Phase2 Algorithms`{.literal} - 对应于 `esp`{.literal} Libreswan
        参数 - 输入用于 `IPsec`{.literal} 协商的算法。
        选择 `Disable PFS`{.literal} 字段来关闭 Perfect Forward
        Secrecy(PFS)，以确保与不支持 PFS 的旧服务器兼容。
    -   `Phase1 Lifetime`{.literal} - 对应于 `ikelifetime`{.literal}
        Libreswan 参数 - 用于加密流量的密钥的有效期。
    -   `Phase2 Lifetime`{.literal} - 对应于 `salifetime`{.literal}
        Libreswan 参数 - 在过期前连接的特定实例应多久。
        注意：为了安全起见，加密密钥应该不时地更改。
    -   `Remote network`{.literal} - 对应于 `rightsubnet`{.literal}
        Libreswan 参数 - 应该通过 VPN 访问的目标专用远程网络。
        检查 `缩减`{.literal} 字段以启用缩小字段。请注意，它只在 IKEv2
        协商中有效。
    -   `Enable fragmentation`{.literal} - 对应于
        `fragmentation`{.literal} Libreswan 参数 - 是否允许 IKE
        分段。有效值为 `yes`{.literal} （默认）或 `no`{.literal}。
    -   `Enable Mobike`{.literal} - 对应于 `mobike`{.literal} Libreswan
        参数 - 是否允许 Mobility and Multihoming Protocol（MOBIKE、RFC
        4555）启用连接来迁移其端点，而无需从头开始重启连接。这可用于在有线、无线或者移动数据连接之间进行切换的移动设备。值为
        `no`{.literal} （默认）或 `yes`{.literal}。
    :::
6.  选择 [IPv4]{.guibutton} 菜单条目：
    [**IPv4 方法**]{.strong}
    ::: itemizedlist
    -   `自动(DHCP)`{.literal} - 如果您要连接的网络使用 `DHCP`{.literal}
        服务器来分配动态 `IP`{.literal} 地址，请选择此选项。
    -   `Link-Local Only`{.literal} - 如果您要连接的网络没有
        `DHCP`{.literal} 服务器且您不想手动分配 `IP`{.literal}
        地址，请选择这个选项。随机地址将根据 [*[[RFC
        3927](http://www.rfc-editor.org/info/rfc3927){.link}]{.citetitle}*]{.emphasis}
        分配，带有前缀 `169.254/16`{.literal}。
    -   `手动`{.literal} - 如果您要手动分配 `IP`{.literal}
        地址，请选择这个选项。
    -   `Disable`{.literal} - 在这个连接中禁用 `IPv4`{.literal}。
        [**DNS**]{.strong}
        在 `DNS`{.literal} 部分，当 `Automatic`{.literal} 为
        `ON`{.literal} 时，将其切换到 `OFF`{.literal}
        以进入您要用逗号分开的 DNS 服务器的 IP 地址。
        [**Routes**]{.strong}
        请注意，在 `Routes`{.literal} 部分，当 `Automatic`{.literal} 为
        `ON`{.literal} 时，会使用 DHCP
        的路由，但您也可以添加额外的静态路由。当 `OFF`{.literal}
        时，只使用静态路由。
    -   `Address`{.literal} - 输入远程网络或主机的 `IP`{.literal} 地址。
    -   `Netmask`{.literal} - 以上输入的 `IP`{.literal}
        地址的子网掩码或前缀长度。
    -   `Gateway`{.literal} - 上面输入的远程网络或主机的网关的
        `IP`{.literal} 地址。
    -   `Metric`{.literal} -
        网络成本，赋予此路由的首选值。数值越低，优先级越高。
        [**仅将此连接用于其网络上的资源**]{.strong}
        选择这个复选框以防止连接成为默认路由。选择这个选项意味着只有特别用于路由的流量才会通过连接自动获得，或者手动输入到连接上。
    :::
7.  要在 `VPN`{.literal} 连接中配置 `IPv6`{.literal} 设置，请选择
    [IPv6]{.guibutton} 菜单条目：
    [**IPv6 Method**]{.strong}
    ::: itemizedlist
    -   `Automatic`{.literal} - 选择这个选项使用 `IPv6`{.literal}
        Stateless Address
        AutoConfiguration（SLAAC）根据硬件地址和路由器公告（RA）创建自动的、无状态的配置。
    -   `Automatic, DHCP only`{.literal} - 选择这个选项以不使用 RA，但从
        `DHCPv6`{.literal} 请求信息以创建有状态的配置。
    -   `Link-Local Only`{.literal} - 如果您要连接的网络没有