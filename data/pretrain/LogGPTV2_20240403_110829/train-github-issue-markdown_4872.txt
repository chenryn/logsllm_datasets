I opened this thread at StackOverflow and had my worst suspicions enforced
that this is not idea for my personal private vision (aka use case) for THREE
in general.  
http://stackoverflow.com/questions/35075432/how-to-change-a-boxs-dimensions-
size-after-creation
I think it would be nice that if in any new THREEtype declaration you could
simple pass it an Object aka JSON with standard format for values and have it
create and/or assign them that way is idea for a more transparent
implementation (I aspire to achieve).
So for BoxGeometry passing an object to the constructor like {dim:{width:1,
height:1, depth:1}} (and castShadow etc. would work as well as passing the 3
arguments (+ any others, a benefit). I think it actually exists in
"parameters:" and not dim.  
This reminds me of what might be another change request where object merging
got an error when setting position (in that case doing it per key works [x, y,
z] but I still have to check every key for "position" and handle it
differently) of a light with this way of constructing the object.
I think they should all be callable with nothing THREEtype and just have
defaults. For box it would be 1, 1, 1 and I guess you could scale to size and
have that become potentially animated too.  
So the question is would the scaling effect children (but I guess that's
suppose to go back to StackOverflow where there's a special way to turn that
off or something I am recalling), except I'm asking about a better solution
for constructors and wondering what superior alternative I'm missing
otherwise.
Anyway I'm thinking one bit of code can generate all object types from an like
so.
    let item  = {type:"BoxGemoetry", size:{w:2, h:1, d:5}};
    let thing = new THREE[item.type](item);
and have it skip things it doesn't know like type, maybe a second array of
skipKeys, which is self explanatory.
Also I feel ideally you should be able to adjust them later, call it reuse.
One case might be to pool created objects and then be able to re-purpose and
reuse them. Sounds like that's impossible in cases with Geometry without
blotting code but would be a nice idea. Geometry like a box should be able to
change it's dimensions, no? I'd argue animate, but I'm sensing the confines of
GL say otherwise.