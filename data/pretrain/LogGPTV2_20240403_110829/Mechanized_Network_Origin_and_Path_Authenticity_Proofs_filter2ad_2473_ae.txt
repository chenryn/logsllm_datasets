∃ path keys, goodVrf opv S D pkS path keys pkt k rt.
Next we deﬁne safeNetVrf to mean that sendsSafeVrf i S D
rt pk opv t has held since the beginning till u for all threads i.
safeNetVrf is the ﬁrst invariant property that we prove for origin
path validation ﬁeld (OPV), which is MACProp 1 stated above.
safeNetVrf S D rt pk opv u =
∀ i u(cid:48), u(cid:48) ≤ u → sendsSafeVrf i S D rt pk opv u(cid:48).
The following lemma states that the formula (safeNetVrf S D
rt pk (macMsg k (pvf ,rt’,hp)) u) holds for all time u, provided
that k is the symmetric key computed using pkS and the secret of
the router rt. The ﬁrst two premises are assumptions about the key
setup for this session: S and D have decided that they will use pkS
(for S) and pkD (for D) to forward along path path ; further, pkS
and pkS −1 are an asymmetric key pair where pkS is the public
key in this pair. These two premises are needed for using key se-
crecy and authenticity properties of the setup phase. The next two
premises state the honesty assumption about the principals; both S
and rt have to run the correct forwarding protocol.
LEMMA 8
(SAFEVRF). For all rt S D k pkS pkD pkS −1
path , session S D path pkS pkD, asymKeyPair pkS pkS −1 ,
honest rt, honest S, and k = (PrfMsg SVS(rt) hashMsg(pkS ))
imply for all u pvfS rt’ hp,
safeNetVrf S D rt pkS (macMsg k (pvfS,rt’,hp)) u.
This lemma is proven using rely-guarantee reasoning. The threads
selection function ι(i) is (ownerIn i (S::rt::nil)). The local guaran-
tee ψ(i, u) is
∀pvf rt(cid:48) hp,
sendsSafeVrf i S D rt pkS (macMsg k (pvfS,rt’, hp)) u
The three conditions in rely-guarantee reasoning are as follows:
Condition RG1 states that initially, if any thread i sends out a mes-
sage that contains a validation ﬁeld, then it has the right format.
Condition RG2 states that if up to time u, all validation ﬁelds that
have been sent out have the correct format, then threads owned by
honest S and R send validation ﬁelds of the correct format. Con-
dition RG3 states that if up to time u, all validation ﬁelds that have
been sent out have the correct format and that all honest principals
S and R send out correct validation ﬁelds at time u, then all threads
(including malicious ones) only send out correct veriﬁcation ﬁelds
at time u.
The proof of RG1 uses the axiom that initially there are no send
actions. The proof of RG2 relies on reasoning about the protocol
code, and RG3 uses the properties of MAC to show that if a thread
i sends out a validation ﬁeld that is computed using key k, then
i must either (i) be owned by S and R, or (ii) have received it
earlier. In either case, if i sends out a veriﬁcation ﬁeld, it must have
the correct format. Case (i) is proven using LS2 rules to reason
about honest protocol code. Case (ii) is proven by directly using
the assumption that safeNetVrf has held so far.
Proof of MACProp 2. Next, we deﬁne a second invariant property
related to the orgin and path validation ﬁeld. This property is cen-
tral to proving source authenticity. sendsSafeVrfT and safeNetVrfT
follow similar format as sendsSafeVrf and safeNetVrf. The differ-
ence is that instead of asserting goodVrf, we assert goodVrfT S D
pk pkt t.
sendsSafeVrfT i S D rt pkS opv t =
∀k m pkt pvfS rt(cid:48),
send i m @ t → contain m opv →
opv = macMsg k (pvf , rt(cid:48), hashMsg(pkt)) →
goodVrfT S D pkS path pkt t.
safeNetVrfT S D rt pkS opv u =
∀ i u(cid:48), u(cid:48) ≤ u → sendsSafeVrfT i S D pkS opv u(cid:48).
goodVrfT S D pkS pkt t =
∃ j m ts path keys opvs pkD pvf kD,
ts ≤ t ∧ owner j S ∧ send j m@ts∧
ﬂagSRsF S (path, dst) (keys, kD pkS ∧
pvf0 = macMsg kD (hashMsg(pkt)) ∧
m = (S , D, path, pkt, pkS , pkD, pvf0 , pvf0 , opvs)
The predicate goodVrfT S D pkS pkt t is true if the source S
has sent out a packet of the right format, where the initial PVF0 is
computed using the key (kD) established between S and D for this
session. The ﬂagSRsF predicate helps us identify arguments in the
packet that S has sent out, as well as kD.
The following lemma states that safeNetVrfT is an invariant
property under the assumptions about this session and the honesty
of principals. The proof is similar to that of Lemma 8.
LEMMA 9
(SAFEVRFT). For all rt S D k pkS pkD pkS −1
path , session S D path pkS pkD, asymKeyPair pkS pkS −1 ,
honest rt, honest S, and k = (PrfMsg SVS(rt) hashMsg(pkS ))
imply ∀ u pvfS rt(cid:48) hp,
safeNetVrfT S D rt pkS (macMsg k (pvfS,rt’, hp)) u.
Proof of MACProp 3. The ﬁnal lemma is about an invariant prop-
erty associated with a path validation message. Similar to the pre-
vious two lemmas, we ﬁrst deﬁne the invariant property PVFINV
kS pkS pkt pvfS pvfS (cid:48) S D t, where kS is the key shared between
a router and S, pkS is S’s public session key, pvfS is the MAC that
is the path validation ﬁeld, and pvfS (cid:48) is the path validation ﬁeld
used to compute pvfS. We omit the formal deﬁnition for PVFINV.
It states that either S has sent out an initial packet where pvfS (cid:48) is
the hash of the payload; or there exists a router rt that has
• received a packet of the correct packet format and
• pvf ’ is the PVFSi−1 in the packet and
• a veriﬁcation ﬁeld in the packet is of the form and
macMsg KSi (pvf (cid:48), Ri−1, hashMsg(pkt))
• and rt has sent out a packet of the correct format with PVFSi
and PVFDi updated.
Next we deﬁne sendsSafePvfS i S D pkS pvfS pkt t to mean
that whenever a thread i sends out a message that contains a valid
PVFS nested inside a chained MAC, the invariant PVFINV holds.
Predicate safeNetPvfS S D pkS pvfS pkt u asserts that for all
threads i, sendsSafePvfS i S D pkS pvfS pkt t has held up to
time t.
sendsSafePvfS i S D pkS pvfS pkt t =
∀ m pvfS (cid:48) k pvfn, send i m@t → contain m pvfn →
subPvf pvfS pvfn → pvfS = macMsg k pvfS (cid:48) →
(∃ path keys, goodPvfS pvfS S D pkS path keys pkt) →
PVFINV k pkS pkt pvfS pvfS (cid:48) S D t.
safeNetPvfS S D pkS pvfS pkt u=
∀ i u(cid:48), u(cid:48) ≤ u → sendsSafePvfS i S D pkS pvfS pkt u(cid:48).
LEMMA 10
(SAFEPVFS). For all rt S D k pkS pkD pkS −1
path , session S D path pkS pkD, asymKeyPair pkS pkS −1 ,
honest rt, honest S, and ﬂagSR k S rt pkS imply for all u,
safeNetPvfS S D pkS (macMsg k m) pkt u.
The proof of Lemma 10 also uses rely-guarantee reasoning. This
lemma provides us with the condition required for path authenticity
at an honest router rt.
We have explained how to prove MACProp 1–3. From there,
the origin and path authenticity properties of the OPT protocol can
be proved as outlined in the beginning of this section.
6. DISCUSSION
The formal veriﬁcation process has helped us identify subtle ﬂaws
in initial protocol designs. We show a few examples in Section 6.1.
A practical implication of formally veriﬁed security guarantees is
that the veriﬁed protocol can defend against certain classes of at-
tacks. In Section 6.2, we elaborate on this connection.
6.1 Attacks on Alternative Designs
We manually construct attack traces based on failed proofs. We
examine derivations leading up to the failed proofs, which provide
hints for constructing attacks.
Router needs to sign the public key and directionality. In the
key setup protocol, a router signs the triple:
the symmetric key
k, the hash of the public key used to generate k, and a direction:
downstream or upstream. Removing either the public key or the
direction will break the key secrecy and authenticity properties.
Consider the scenario where the router only signs the symmetric
key k. Let pkS 1 be the public key that the source S sends in the
packet and pkS 2 be an attacker’s public key. The attacker changes
the header ﬁeld of the packet and inserts its own public key pkS 2.
Let kS denote the symmetric key generated by the router using
pkS 2. The router encrypts kS using pkS 2, generating ckS 2, and
signs kS, generating sigS 2. The attacker can decrypt ckS 2, obtain
kS, and encrypt kS using pkS 1, generating ckS 1. The attacker
sends ckS 1 and the signature sigS 2 to the source. The source will
accept this symmetric key. However, this key is not a secret shared
only by the source and the router, violating the secrecy property;
A1: S1 sends payload pkt down the path path 1.
A2: Malicious Ri−1 on path 1 replaces the key hash for the
destination with hash(pkS 2), places an arbitrary value X
as PVFDi−1, and sends the packet to Ri
A3: Ri veriﬁes OPVi, and computes PVFDi, denoted Y, and
sends the packet to Ri+1.
Y=mac(prf(SVi, hash(pkS 2)), (X, Ri−1, hash(pkt))).
A4: Ri+1 forwards Y to Ri−1
A5: Ri−1 sends a packet with payload pkt, key hash of the
source hash(pkS 2), X as PVFSi−1, and Y as OPVi to
Ri.
A6: Ri validates OPVi, and thinks that this packet was from
S2 on path path 2, which is not the case.
If Ri has two secrets, Y cannot pass as an OPVi ﬁeld.
Figure 7: Attack scenario.
furthermore, the symmetric key is not computed using pkS 1, vio-
lating the authenticity property.
Next we show an attack to key authenticity if the router does not
sign the downstream or upstream ﬁeld. In this scenario, the at-
tacker swaps the position of the session public keys of the source
and destination. The source ends up accepting a key generated
using the secret meant for the destination (SVD(Ri)). The con-
sequence is that, during the forwarding phase, the router will drop
legitimate packets, because the source will compute origin path val-
idation ﬁelds using the wrong keys.
Routers need two secrets. Each router has two secrets, one for
computing the key shared with the source and the other for com-
puting the key shared with the destination. We illustrate in an ex-
ample that, if we were to use one secret for both keys, origin and
path authenticity can be violated. The high-level intuition is that
with only one secret, an attacker can trick an honest router Ri to
generate a bogus PVFDi while Ri thinks it is computing a valid
PVFSi for a different path; and generate a bogus OPVi while Ri
thinks it is computing a valid PVFDi for a different path. We show
one scenario here. A second scenario is described in the companion
technical report [49].
Attack scenario: PVFD is used to attack the source-based path
validation of routers. The attack is illustrated in Figure 7. There
are two different paths: path 1 is from S1 to D and path 2 is from
S2 to D. Routers Ri−1 and Ri+1 are malicious and Ri is honest.
We show how Ri−1 and Ri+1 collude to trick Ri into accepting a
packet that Ri will believe to have originated from S2 and traversed
path 2, but was originated from S1 and traversed path 1. S1’s ses-
sion key is pkS 1 and S2’s session key is pkS 2.
6.2 Defending Against Attacks
Source and data spooﬁng. The source authenticity property of
OPT (Theorem 7) ensures that a successful veriﬁcation of the path
validation ﬁeld implies that there can be no source or data spooﬁng
attacks to Ri, provided that the source is trusted.
Path deviation attack. The path authenticity property of OPT
(Theorem 7) ensures that a successful veriﬁcation by Ri (or the
destination) implies that the packet Ri (or the destination) received
has traversed all the honest nodes in the source-intended path in the
correct order, assuming that the source is honest. Malicious routers
cannot skip honest nodes, nor can they cause the packet to traverse
the honest nodes in a different order than speciﬁed by the source.
This indicates that if a malicious router selects a path not intended
by the source, an honest intermediary router will reject the packet.
However, a malicious node can send the packet to other routers that
are not on the intended path.
Collusion. The path and source validation are conditioned upon
whether a router is honest, i.e., correctly runs the protocol. It is
clear from this property—and can be proven as a corollary—that if
all the preceding routers are honest, then upon validating OPVi, a
router Ri knows that the packet originates from the source and all
links in the intended path before Ri are traversed in the right order.
Further, no other routers have received the packet if the links are
secure.
When there are multiple adjacent malicious nodes on the in-
tended path (Rj1 to Rjn), a wormhole is present: an honest node
down the path can only conclude that the packet has entered the
hole via Rj1 and exited the hole from Rjn, but has no knowledge
of which nodes were traversed between these two points.
7. RELATED WORK
Secure routing protocols. Proposed secure routing infrastructures
range from security extensions to BGP (Secure-BGP (S-BGP) [28],
ps-BGP [46], so-BGP [47]), to more recent “clean-slate” Inter-
net architectural redesigns such as SCION [50], ICING [37], and
OPT [29]. ICING and OPT focus on packet forwarding, while the
rest of the protocols establish routes among network nodes. ICING
and OPT’s goal is to provide source authentication and path valida-
tion to the routers in the network. Both protocols use the chained
MAC of the packet content to attest to the authenticity of the packet.
OPT is much lighter-weight than ICING in that each router needs