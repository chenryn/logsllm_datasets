In this example, no verification is done to ensure that the low 6 bits of a large object 
encode only a value between 1 and 4 (inclusive). By specifying a larger value, the 
multiplication of 16KB causes truncation of the high 16 bits of the result (because 
decode_length() returns a 16-bit integer). 
Another thing to be wary of is checking return values incorrectly. Take a look at the 
previous example modified slightly: 
#define LENGTH_16K (1024 * 16) 
int decode_length(PER_BUFFER *buffer) 
{ 
    if(bytes_left(buffer)  
XER Vulnerabilities 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
992 
The most likely vulnerabilities in XER are obviously text-based errorssimple buffer 
overflows or pointer arithmetic bugs. When auditing XER implementations, 
remember that programs that exchange data by using XER are often exposing a huge 
codebase to untrusted data. This applies not just to XER but to the XML 
implementation and encoding schemes for transmitting and storing XML data. In 
particular, check the UTF encoding schemes for encoding Unicode codepoints, which 
are discussed in depth in Chapter 8(? [????.]). 
8.3.6 Domain Name System 
The Domain Name System (DNS) is a hierarchical distributed database that 
implements a global naming scheme for resources available on the Internet. It 
provides the infrastructure for mapping domain names to IP addresses as well as key 
data used to interpret email addresses. When people access resources on the Internet, 
they typically do so by using names such as www.google.com and 
abuse@comcast.net. Their computers use DNS to translate these names into the IP 
addresses suitable for use with Internet protocols. Obviously, text names are far 
easier for people to work with than numbers. There's a reason you don't hear people 
say "Man, 66.35.250.151 has really gone downhill lately." 
Domain Names and Resource Records 
The DNS database is organized as a tree data structure, with a single root node at the 
top (see Figure 16-15 for a very simple example of such a tree). For the sake of clarity, 
this diagram omits some domains that would be necessary to make the database 
functional. Every node (and leaf) in the tree is called a domain, and a domain's child 
nodes are called its subdomains. Each domain has a label, which is a short text 
name such as com, mail, www, or food. A domain name is a series of labels, 
separated by dots, that uniquely identifies a node in the tree by tracing the full path 
from the specified domain to the root domain. For example, the domain name 
www.google.com specifies a domain labeled www that's a subdomain of google.com. 
The google.com domain is a subdomain of the com domain, and com is a subdomain 
of the root domain. The root domain has an empty label, which is usually omitted in 
casual discussion. In configuration files and technical discussions, however, it's 
usually represented by a trailing dotwww.google.com., for example. 
Figure 16-15. DNS tree data structure 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
993 
Each domain owns a set of zero or more resource records, which describe attributes 
of that domain. In general, you work with DNS by asking about a domain name. The 
response you get is a set of resource records owned by that domain name. Every 
resource record has five elements, described in Table 16-2. 
Table 16-2. Resource Record Elements 
Name Description 
Format 
Owner The domain that owns this resource record. 
Domain 
name 
Type 
A code that identifies which type of resource record it is. 
16-bit 
integer 
Class 
A code that identifies the protocol system this resource record 
belongs to. It's usually IN, for "Internet." 
16-bit 
integer 
TTL 
The time to live for this record, specified in seconds. It's how long 
this resource record should be cached before it's purged. 
32-bit 
integer 
RDATA The actual contents of the resource record. The way this content 
is encoded depends on the type and class of the resource record. 
Set of 
bytes 
Name Servers and Resolvers 
Before you can understand how resource records are used in practice, you need a 
brief review of name servers and resolvers. The DNS database is distributed among 
thousands of systems around the world, which are called name servers. The 
responsibility for maintaining this vast database is divided among the thousands of 
administrators of these systems; each administrator is responsible for a small piece of 
the global namespace. To facilitate this division of labor, the domain namespace is 
split up into sections called zones. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
994 
The code responsible for querying DNS on behalf of user applications is called 
resolver code. It takes a request from a user, tough function such as 
gethostbyname(), and begins asking name servers it knows about to try to hunt down 
an authoritative resource record with the answer. 
There are two basic kinds of name servers: recursive and nonrecursive. 
Nonrecursive name servers are the most straightforward. They answer questions 
only about the zones they are responsible for. They have all this information in 
memory, so they don't need to query the DNS infrastructure for further information. 
(Note that they also have some delegation and glue information memorized, which 
you learn about through the rest of this chapter). Nonrecursive name servers give 
you an authoritative answer or tell you to go ask someone else. 
Recursive name servers are a different animal. If they don't know the answer to a 
query offhand, they take it upon themselves to go find the answer. If they are 
successful, they consolidate all the intermediate findings into a nice concise answer 
for the client. 
There are also two kinds of resolvers. A fully functional resolver can interrogate 
DNS to hunt down answers to user questions. It knows what to do when a 
nonrecursive name server doesn't have the answer. A stub resolver, on the other 
hand, is quite comfortable letting a recursive name server do all the work. It just 
needs the IP address of a local friendly recursive name server, and it relies on that 
server to handle interrogating the world's name servers. 
The process of querying DNS for a piece of information often involves making multiple 
queries to different name servers. To speed up this process, both name servers and 
resolvers can implement a domain name cache, which stores results of queries 
locally for limited time frames. In fact, quite a bit of the information stored in DNS is 
instructions on how caches should manage information. 
Zones 
When you take responsibility for a zone, you're expected to set up two or more 
authoritative name servers. These servers are the ultimate authority for your zone, 
and DNS servers and resolvers ask your servers when they need resource records 
from your zone. When a name server or resolver receives a resource record 
originating from an authoritative name server, it usually caches the resource record 
for a predetermined length of time. Over time, your zone information gets distributed 
and cached across the global DNS infrastructure. You control the details of how your 
zone's information should be cached and refreshed. 
Zones are created by delegating subdomains. For every zone, there's a single domain 
that's the closest to the root node, which is the top node of the zone. Figure 16-16 
shows an example of a namespace with zone partitions overlaid in gray. (Again, this 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
995 
simplified view omits some necessary details.) Look at the zone with a top node of 
neohapsis.com. At some point, the administrator of the com. zone delegated control 
of the neohapsis.com. subdomain to the neohapsis administrator. This means 
requests for any subdomain of neohapsis.com. are under the authoritative purview of 
the neohapsis.com. zone. You can see that the neohapsis administrator delegated 
lab.neohapsis.com. to another zone, which might be managed by the lab 
administrator. 
Figure 16-16. Example DNS tree with zones 
[View full size image] 
Resource Record Conventions 
There are several different types of resource records, distinguished by their type 
codes. The most important types, and the general format of their associated RDATA 
elements, are listed in Table 16-3. 
Table 16-3. Resource Record Types 
Type 
Description 
RDATA Format (IN Class) 
A 
A host address 
32-bit IP address 
NS 
An authoritative name 
server 
Domain name 
SOA 
The start of authority 
record, which contains 
information about the zone 
Multiple parameters, including an 
administrator, an e-mail address, a serial 
number, and parameters to control caching 
and synchronization 
MX 
A mail exchanger for the 
domain 
Numeric preference value followed by a 
domain name 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
996 
Table 16-3. Resource Record Types 
Type 
Description 
RDATA Format (IN Class) 
CNAME The canonical name of the 
domain 
Domain name 
PTR 
A pointer to another domain Domain name 
The top node of any zone is a special node containing meta-information about that 
zone. It has two key sets of information: the SOA resource record for the zone and 
authoritative NS resource records for the zone. The SOA record contains information 
about caching parameters used by all the zone's resource records. The NS records 
authoritatively state the name servers in charge of the zone. 
The A resource records are used liberally to assign IP addresses to domain names and 
can appear in any domain in the zone. CNAME records are used for aliases. If the 
domain name sol.lab.neohapsis.com is an alias to jm.lab.neohapsis.com, there's a 
CNAME resource record owned by sol.lab.neohapsis.com. That resource record 
contains sol's canonical (ultimate) name, which is jm.lab.neohapsis.com. 
An authoritative name server typically knows all the information necessary to 
delegate requests to children zones. It conveys this information to other systems, 
even though it isn't technically authoritative for that information. For example, the 
name server responsible for the neohapsis.com. zone has NS records for 
lab.neohapsis.com. They should be identical to the authoritative NS records that the 
lab.neohapsis.com name server has for its top domain. 
The NS record points to a domain name, such as sol.lab.neohapsis.com., and the 
neohapsis.com. zone's server needs to provide a glue resource record that tells a 
client the IP address for the NS record. So the neohapsis.com. zone's server sends 
these additional resource records: 
lab.neohapsis.com.       NS    sol.lab.neohapsis.com. 
sol.lab.neohapsis.com.   A     7.6.5.23 
Basic Use Case 
Most operating systems have a simple stub resolver that relies on an external 
recursive name server. The resolver library translates user requests into a DNS query 
packet that's sent to the preconfigured local recursive name server. This friendly 
name server attempts to answer the question by referring to its authoritative data 
and cache and by querying other name servers for information. This process usually 
takes a series of requests. Figure 16-17 shows how a typical DNS request is handled. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
997 
Figure 16-17. DNS request traffic 
[View full size image] 
The resolver creates an A query for the domain name www.google.com. and sends 
the query to its local recursive name server. First, the name server looks at its zones 
for anything in the domain name that it can answer for authoritatively, but it can't 
help with this query. 
Then it looks in its cache for any useful information; for the sake of discussion, 
assume it comes up empty. The name server is preloaded with a list of root name 
servers, and it starts sending iterative queries to them. It asks several root name 
servers for the A record for www.google.com and eventually gets a response. 
The response doesn't have the answer, however. Instead, it has multiple authority NS 
resource records that give the domain names for all com. name servers. The response 
also contains additional A resource records that give the numeric IP addresses for 
each specified name server. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
998 
The name server asks a com. name server for the A record for www.google.com. The 
response still doesn't have an answer, but this time, the authority section has four NS 
records for google.com. The additional section has four corresponding A records for 
the numeric IP addresses of these name servers. 
Next, the name server asks a google.com. name server for the A record for 
www.google.com. In the real world, you learn that www.google.com. is an alias 
because you get an authoritative answer telling you that it's a CNAME for 
www.l.google.com. However, for this use case, pretend it returns an A record instead. 
The name server finally gets its A record for www.google.com., and the IP address is 
1.2.3.4. 
The name server then constructs an answer for the resolver code and sends it as a 
response to the initial recursive query. The resolver code extracts the IP address from 
the A record and hands it to the user application. 
DNS Protocol Structure Primer 
DNS is a binary protocol, so you know that integer issues are going to be involved. A 
DNS packet is essentially composed of a header followed by four variable-length fields: 
a questions section, an answer section, an authority section, and an additional section. 
This basic packet layout is shown in Figure 16-18. 
Figure 16-18. DNS packet structure 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
999 
The header provides information about how the packet should be interpreted. Figure 
16-19 shows how it's structured. 
Figure 16-19. DNS header structure 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1000 
The DNS header contains a number of status bit fields and a series of record counts, 
indicating the number of resource records in the packet. These fields are described in 
the following list: 
Identification (16 bits) This field is used to uniquely identify a query. 
Responses to a query must have the same ID or they are ignored. 
QR (1 bit) This field indicates whether this packet contains a query (0) or 
response (1). 
Opcode (4 bits) This field indicates what type of query is in the message. It's 
usually 0, meaning a standard query. 
AA (1 bit) This field indicates whether the packet contains an authoritative 
answer. 
TC (1 bit) This field indicates whether the answer is truncated because of size 
constraints. 
RD (1 bit) This fieldrecursion desiredsets a query to indicate that the name 
server should recursively handle the query if possible. 
RA (1 bit) This field is set by a name server to indicate whether recursion is 
available. 
Rcode (4 bits) This field is used to indicate an error code (return code). 
Questions count (16 bits) This field specifies the number of questions in the 
questions section; usually one. 
Answer count (16 bits) This field specifies the total number of resource records 
in the answer section. 
Authority count (16 bits) This field specifies the total number of NS resource 
records in the authority section. 