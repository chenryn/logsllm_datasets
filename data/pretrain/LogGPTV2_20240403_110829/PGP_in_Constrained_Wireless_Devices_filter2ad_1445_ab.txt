the best algorithm known for solving the underlying hard
mathematical problem in ECC (the elliptic curve dis-
crete logarithm problem, ECDLP) takes fully exponen-
tial time. On the other hand, the best algorithms known
for solving the underlying hard mathematical problems
in RSA and DL systems (the integer factorization prob-
lem, and the discrete logarithm problem) take subexpo-
nential time. This means that the algorithms for solv-
ing the ECDLP become infeasible much more rapidly
as the problem size increases than those algorithms for
the integer factorization and discrete logarithm problems.
For this reason, ECC offers security equivalent to that of
RSA and DL systems, while using signiﬁcantly smaller
key sizes.
Table 1 lists ECC key lengths and very rough estimates
of DL and RSA key lengths that provide the same secu-
rity (against known attacks) as some common symmetric
encryption schemes. The ECC key lengths are twice the
key lengths of their symmetric cipher counterparts since
p
the best general algorithm known for the ECDLP takes
(cid:25)2k /=2 steps for k-bit ECC keys, while exhaustive
.
key search on a symmetric cipher with l-bit keys takes
2l steps. The estimates for DL security were obtained
from [2]. The estimates for RSA security are the same as
those for DL security because the best algorithms known
for the integer factorization and discrete logarithm prob-
lems have the same expected running times. These esti-
mates are roughly the same as the estimates provided by
Lenstra and Verheul in their very thorough paper [31].
The advantages that may be gained from smaller
ECC parameters include speed (faster computation) and
smaller keys and certiﬁcates. These advantages are es-
pecially important in environments where processing
power, storage space, bandwidth, or power consumption
are at a premium such as smart cards, pagers, cellular
phones, and PDAs.
3Examples of DL systems are the ElGamal public-key encryption
scheme and the DSA signature scheme which is speciﬁed in the Digital
Signature Standard. PGP documentation refer to these two schemes as
Difﬁe-Hellman/DSS or DH/DSS.
5.2 Selecting ECC parameters
NOTATION. In the following, Fq denotes a ﬁnite ﬁeld
of order q, and E denotes an elliptic curve deﬁned over
Fq. #E.Fq / denotes the number of points on the elliptic
curve E. The point at inﬁnity is denoted by O. There is a
group law for adding any two elliptic curve points. If k is
an integer and P 2 E.Fq / is a point, then k P is the point
obtained by adding together k copies of P; this process
is called scalar multiplication.
DOMAIN PARAMETERS.
consist of the following:
ECC domain parameters
— the ﬁeld size.
q
FR — method used for representing ﬁeld ele-
ments.
a; b — elements of Fq which determine the
equation of an elliptic curve E.
— the base point of prime order.
— the order of G.
— the cofactor: h D #E.Fq /=n.
G
n
h
The primary security parameter (see §5.4) is n. The
ECC key length is thus deﬁned to be the bitlength of n.
Typical choices for q are an odd prime (in which case
Fq is called a prime ﬁeld) or a power of 2 (in which case
Fq is called a binary ﬁeld).
CURVES SELECTED. For this project, we chose binary
ﬁelds F2m , for m D 163, 233 and 283. Suitably chosen
elliptic curves over these ﬁelds provide at least as much
security as symmetric-key ciphers with key lengths 80,
112 and 128 bits respectively (see Table 1). A polyno-
mial basis representation was used to represent ﬁeld el-
ements. Such a representation is deﬁned by a reduction
polynomial f .x /, which is an irreducible binary polyno-
mial of degree m. For each ﬁeld F2m , we chose a ran-
dom curve over F2m and a Koblitz curve [28] over F2m
from the list of elliptic curves recommended by NIST
for US federal government use [34]. The salient features
of the Koblitz curves are provided in Table 2. Koblitz
curves have special structure that enable faster elliptic
curve arithmetic in some environments (see [44, 45]).
The number of points on each of the chosen curves is al-
most prime; that is, #E.F2m / D nh, where n is prime and
h D 2 or h D 4. Since #E.F2m / (cid:25) 2m, it follows that the
ECC key length is approximately equal to m. Security
implications of these choices are discussed in §5.4.
5.3 ECC protocols
KEY GENERATION. An entity A’s public and private key
pair is associated with a particular set of EC domain pa-
rameters .q; FR; a; b; G; n; h/. This association can be
assured cryptographically (e.g., with certiﬁcates) or by
context (e.g., all entities use the same domain parame-
ters).
Symmetric cipher
key lengths
80
168
128
192
256
Example
algorithm
SKIPJACK
Triple-DES
128-bit AES
192-bit AES
256-bit AES
ECC key lengths for DL/RSA key lengths for
equivalent security
equivalent security
160
224
256
384
512
1024
2048
3072
7680
15360
Table 1: ECC, DL, and RSA key length comparisons.
m
f .x /
E
n
h
m
f .x /
E
n
h
m
f .x /
E
n
h
163
x 163 C x 7 C x 6 C x 3 C 1
Y 2 C XY D X 3 C X 2 C 1
4000000000000000000020108A2E0CC0D99F8A5EF
2
233
x 233 C x 74 C 1
Y 2 C XY D X 3 C 1
8000000000000000000000000000069D5BB915BCD46EFB1AD5F173ABDF
4
283
x 283 C x 12 C x 7 C x 5 C 1
Y 2 C XY D X 3 C 1
1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9AE2ED07577265DFF7F94451E061E163C61
4
Table 2: Koblitz curves selected.
To generate a key pair, entity A does the following:
1. Select a random integer d from [1; n (cid:0) 1].
2. Compute Q D dG.
3. A’s public key is Q; A’s private key is d.
PUBLIC KEY VALIDATION. This process ensures that a
public key has the requisite arithmetic properties. A pub-
lic key Q D .x Q ; yQ / associated with domain parame-
ters .q; FR; a; b; G; n; h/ is validated using the follow-
ing procedure:
1. Check that Q 6D O.
2. Check that x Q and yQ are properly represented ele-
ments of Fq.
and b.
3. Check that Q lies on the elliptic curve deﬁned by a
4. Check that n Q D O.
The computationally expensive operation in public key
validation is the scalar multiplication in step 4. This step
can sometimes be incorporated into the protocol that uses
Q – this is done in the ECAES below. Public key vali-
dation with step 4 omitted is called partial public key
validation.
ELLIPTIC CURVE AUTHENTICATED ENCRYPTION
SCHEME (ECAES). The ECAES, proposed by Abdalla,
Bellare and Rogaway [1], is a variant of the ElGamal
public-key encryption scheme [12].
It is efﬁcient and
provides security against adaptive chosen-ciphertext
attacks.
We suppose that receiver B has domain parameters
D D .q; FR; a; b; G; n; h/ and public key Q. We also
In
suppose that A has authentic copies of D and Q.
the following, MAC is a message authentication code
(MAC) algorithm such as HMAC [30], ENC is a sym-
metric encryption scheme such as Triple-DES. KDF de-
notes a key derivation function which derives crypto-
graphic keys from a shared secret point.
To encrypt a message m for B, A does:
1. Select a random integer r from [1; n (cid:0) 1].
2. Compute R D r G.
3. Compute K D hr Q. Check that K 6D O.
4. Compute k1 k k2 D KDF.K /.
5. Compute c D ENCk1
6. Compute t D MACk2
.m/.
.c/.
7. Send .R; c; t/ to B.
To decrypt ciphertext .R; c; t/, B does:
1. Perform a partial key validation on R.
2. Compute K D hd R. Check that K 6D O.
3. Compute k1 k k2 D KDF.K /.
4. Verify that t D MACk2
5. Compute m D ENC
(cid:0)1
k1
The computationally expensive operations in encryption
and decryption are the scalar multiplications in steps 2-3
and step 2, respectively.
.c/.
.c/.
ELLIPTIC CURVE DIGITAL SIGNATURE ALGORITHM
(ECDSA). The ECDSA is the elliptic curve analogue of
the DSA [34]. SHA-1 is the 160-bit hash function [35].
We suppose that signer A has domain parameters D D
.q; FR; a; b; G; n; h/ and public key Q. We also suppose
that B has authentic copies of D and Q.
To sign a message m, A does the following:
1. Select a random integer k from [1; n (cid:0) 1].
2. Compute kG D .x1; y1/ and r D x1 mod n.
(cid:0)1 mod n.
If r D 0 then go to step 1.
3. Compute k
4. Compute e D SHA-1.m/.
5. Compute s D k
If s D 0 then go to step 1.
(cid:0)1fe C drg mod n.
6. A’s signature for the message m is .r; s/.
To verify A’s signature .r; s/ on m, B should do the
following:
1. Verify that r and s are integers in [1; n (cid:0) 1].
2. Compute e D SHA-1.m/.
3. Compute w D s
(cid:0)1 mod n.
4. Compute u1 D ew mod n and u2 D r w mod n.
5. Compute u1G C u2 Q D .x1; y1/.
6. Compute v D x1 mod n.
7. Accept the signature if and only if v D r.
The computationally expensive operations in signature
generation and signature veriﬁcation are the scalar mul-
tiplications in step 2 and step 5, respectively.
5.4 Security issues
HARDNESS OF THE ECDLP. It can easily be veriﬁed
that the elliptic curves E.Fq / chosen resist all known at-
tacks on the ECDLP. Speciﬁcally:
1. The number of points, #E.Fq /, is divisible by a
prime n that is sufﬁciently large to resist the par-
allelized Pollard rho attack [36] against general
curves, and its improvements [15, 48] which apply
to Koblitz curves.
2. n does not divide qk(cid:0)1 for all 1 (cid:20) k (cid:20) 30, conﬁrm-
ing resistance to the Weil pairing attack [32] and the
Tate pairing attack [13].
3. #E.Fq / 6D q, conﬁrming resistance to the Semaev
4. All binary ﬁelds F2m chosen have the property that
m is prime, thereby circumventing recent attacks
[14, 17] on the ECDLP for elliptic curves over bi-
nary ﬁelds F2m where m is composite.
attack [43].
SECURITY OF ECAES. The ECAES modiﬁes the El-
Gamal encryption scheme by using the one-time Difﬁe-
Hellman shared secret, hrdG, to derive secret keys k1
and k2 The ﬁrst key k1 is used to encrypt the message us-
ing a symmetric cipher, while the second key k2 is used
to authenticate the resulting ciphertext. The latter pro-
vides resistance to chosen-ciphertext attacks. Some for-
mal justiﬁcation of ECAES security is provided in [1],
where it is proven to be semantically secure against adap-
tive chosen-ciphertext attack on the assumption that the
underlying symmetric encryption and MAC schemes are
secure, and assuming the hardness of certain variants of
the elliptic curve Difﬁe-Hellman problem.
In order to correctly balance the security of the
ECAES cryptographic components, one should ideally
employ a k
2 -bit block cipher and a k-bit hash function for
HMAC when using a k-bit elliptic curve (see Table 1).
Our implementation used the 112-bit block cipher Triple-
DES in CBC-mode and the 160-bit hash function SHA-
1 for all 3 choices of ECC key lengths (163, 233 and
283). A future version of our implementation should al-
low for a variable output-length hash function (e.g., the
forthcoming SHA-2) and a variable-length block cipher
(e.g., the AES).
SECURITY OF ECDSA. ECDSA is the straightforward
elliptic curve analogue of the DSA, which has been ex-
tensively scrutinized since it was proposed in 1991. For
a summary of the security properties of the ECDSA, see
[26].
Our implementation used the 160-bit hash function
SHA-1 for all 3 choices of ECC key lengths (163, 233
and 283). As with the ECAES, a future version of
our ECDSA implementation should allow for a variable
output-length hash function.
5.5 Timings
This section presents timings for the ECC operations on
a Pentium II 400 MHz machine, a PalmPilot and the RIM
pager, and compares them with timings for RSA and DL
operations.
ECC TIMINGS. Our ECC code was written entirely in
C on a Sun Sparcstation and, in order to ensure porta-
bility, no assembler was used. We encountered no prob-
lems in porting the code to the Pentium II, RIM pager,
and PalmPilot platforms, although some changes were
required in order to cooperate with the 16-bit options
used in the Palm version of the “big number” library of
OpenSSL. No effort was made to optimize the ECC code
for these particular platforms; it is very likely that signif-
icant performance improvements could be obtained by
optimizing the ECC (and DL and RSA) code for these
platforms. Further details of our ECC implementations
are reported in [23].
For other ECC implementation reports, see [42] for a
C implementation of elliptic curve arithmetic over F
2155,
[49] for a C/C++ of elliptic curve arithmetic over F
2191
and over a 191-bit prime ﬁeld, and [22] for an assem-
bly language implementation of elliptic curve arithmetic
over a 160-bit prime ﬁeld on a 10 MHz 16-bit microcom-
puter.
Tables 3, 4 and 5 present timings of our implemen-
tation for ECC operations using the Koblitz curves and
random curves over F2163, F2233 and F2283.
RSA TIMINGS. The RSA code, written entirely in C,
was taken from the OpenSSL library [37]. Tables 6 and
7 present timings for 512, 768, 1024, and 2048-bit RSA
operations.
DL TIMINGS. The DSA and ElGamal code, also writ-
ten entirely in C, was obtained from the OpenSSL and
OpenPGP libraries. For ElGamal, the prime p was cho-
sen to be a safe prime; that is p D 2q C 1 where q is
also prime. Table 8 presents timings for 512, 768 and
1024-bit DSA and ElGamal operations. For encryption,
the per-message secret key is not of full length (i.e., the
bitlength of p), but of bitlength 200 + (bitlength of p)/32;
this explains why ElGamal encryption is faster than El-
Gamal decryption. The ElGamal operations could be
sped up signiﬁcantly if DSA-like parameters were used
(i.e., p D kq C 1, where q is a 160-bit prime).
COMPARISON. The performance of all three families of
public-key systems (ECC, RSA and DL) are sufﬁciently
fast for PGP implementations on a Pentium machine—it
hardly matters whether a user has to wait 10 ms or 100
ms to sign and encrypt a message.
On the pager, RSA public-key operations (encryption
and signature veriﬁcation) are faster than ECC public-
key operations, especially when the public exponent is
e D 3. For example, verifying a 1024-bit RSA signature
takes about 300 ms, while verifying a 163-bit ECC signa-
ture (using a Koblitz curve) takes about 1,800 ms. On the
other hand, RSA private-key operations (decryption and
signature generation) are slower than ECC private-key
operations. For example, signing with a 1024-bit RSA
key takes about 16,000 ms, while signing with a 163-bit
ECC key takes about 1,000 ms. ECC has a clear ad-
vantage over RSA for PGP operations that require both
private key and public key computations. Signing-and-
encrypting together takes 16,400 ms with 1024-bit RSA
(using e D 3), and 2800 ms with 163-bit ECC (using a
Koblitz curve). Verifying-and-decrypting together takes
16,200 ms with 1024-bit RSA, and 2,900 ms with 163-bit
ECC.
Similar conclusions are drawn when comparing RSA
and ECC performance on the PalmPilot.
Private key operations with 2048-bit RSA are too slow
for the pager and the PalmPilot, while 233-bit ECC and
283-bit ECC operations are tolerable for PGP applica-
tions on the pager.
Since domain parameters are used in our ECC imple-
mentation, ECC key generation only involves a single
scalar multiplication and thus is very fast on the pager.
RSA, ElGamal and DSA key generation on the pager
is prohibitively slow. However, ElGamal and DSA key
generation would be feasible on the pager if precomputed
domain parameters (primes p and q, and generator g)
were used.
5.6 Interoperability
The Koblitz and random curves over F
2163, F
The elliptic curves and protocols were selected to con-
form with the prevailing ECC standards and draft stan-
dards.
2233 and
F2283 are from the list of NIST recommended curves [34].
The representations, for both ﬁeld elements and for ellip-
tic curve points, are compliant with the ANSI X9.62 [4],
ANSI X9.63 [5], IEEE P1363 [24] and FIPS 186-2 [34]
2163 is
standards.
explicitly listed in the WAP wTLS speciﬁcation [51].
In addition, the Koblitz curve over F
Our ECDSA implementation conforms to the security
and interoperability requirements of ANSI X9.62, IEEE
P1363, and FIPS 186-2. Our ECAES implementation
conforms to the security and interoperability require-
ments of ANSI X9.63. The cryptographic components