[:upper:]*
以大写字母开头的文件
[[digit:]]*
不以数字开头的文件
44
---
## Page 46
*[:lower:]123]
文件名以小写字母结尾，或以“1"，“2"，或“3”结尾的文件
表5-3:通配符范例
接受文件名作为参数的任何命令，都可以使用通配符，我们会在第八章更深入地谈到这个知
识点。
字符范围
如果你用过别的类Unix系统的操作环境，或者是读过这方面的书籍，你可能遇
到过[A-Z]或[a-z]形式的字符范围表示法。这些都是传统的Unix表示法，并且在
早期的Linux版本中仍有效。虽然它们仍然起作用，但是你必须小心地使用它们，
因为它们不会产生你期望的输出结果，除非你合理地配置它们。从现在开始，你应
该避免使用它们，并且用字符类来代替它们。
通配符在GUI中也有效
通配符非常重要，不仅因为它们经常用在命令行中，而且一些图形文件管理器也
支持它们。
·在Nautilus（GNOME文件管理器）中，可以通过Edit/Select模式菜单项来
选择文件。输入一个用通配符表示的文件选择模式后，那么当前所浏览的目录
中，所匹配的文件名就会高亮显示。
·在Dolphin和Konqueror（KDE文件管理器）中，可以在地址栏中直接输入
通配符。例如，如果你想查看目录/usr/bin中，所有以小写字母“u开头的文
件，在地址栏中敲入/usr/bin/u*，则文件管理器会显示匹配的结果。
最初源于命令行界面中的想法，在图形界面中也适用。这就是使Linux桌面系
统如此强大的众多原因中的一个
5.2mkdir-创建目录
mkdir命令是用来创建目录的。它这样工作：
nkdir directory...
45
---
## Page 47
注意表示法：在描述一个命令时（如上所示），当有三个圆点跟在一个命令的参数后面，这
意味着那个参数可以重复，就像这样：
mkdir dir1
会创建一个名为“dir1"的目录，而
mkdir dir1 dir2 dir3
会创建三个目录，名为 dirl，dir2，dir3。
5.3cp－复制文件和目录
cp命令，复制文件或者目录。它有两种使用方法：
cp item1 iten2
复制单个文件或目录“iteml”到文件或目录"item2"，和：
cp item... directory
复制多个项目（文件或目录）到一个目录下。
5.4
1有用的选项和实例
这里列举了cp命令一些有用的选项（短选项和等效的长选项）：
选项
意义
-a, --archive
复制文件和目录，以及它们的属性，包括所有权和权限。通
常，副本具有用户所操作文件的默认属性。
-i, interactive
在重写已存在文件之前，提示用户确认。如果这个选项不指
定，p命令会默认重写文件。
46
---
## Page 48
-r, --recursive
递归地复制目录及目录中的内容。当复制目录时，需要这个
选项（或者-a选项）。
-, -update
当把文件从一个目录复制到另一个目录时，仅复制目标目录
中不存在的文件，或者是文件内容新于目标目录中已经存在
的文件。
-V, --verbose
显示翔实的命令操作信息
表5-4:cp选项
命令
运行结果
cp file1 file2
复制文件 file1内容到文件file2。如果file2已经存在，file2
的内容会被file1的内容重写。如果file2不存在，则会创建
file2 °
cp -i file1 fle2
这条命令和上面的命令一样，除了如果文件fle2存在的话，
在文件file2被重写之前，会提示用户确认信息。
cp file1 file2 dir1
复制文件file1和文件file2到目录dir1。目录dir1必须存
在。
cp dir1/* dir2
使用一个通配符。在目录dir1中的所有文件都被复制到目
录dir2中。dir2必须已经存在。
cp -r dir1 dir2
复制目录dir1中的内容到目录dir2。如果目录dir2不存在，
创建目录dir2，操作完成后，目录dir2中的内容和dir1中
的一样。如果目录dir2存在，则目录dir1（和目录中的内
容）将会被复制到dir2中。
表5-5:cp实例
5.5
5mv-移动和重命名文件
mv命令可以执行文件移动和文件命名任务，这依赖于你怎样使用它。任何一种情况下，完成
操作之后，原来的文件名不再存在·mv使用方法与cp很相像：
mv item1 iten2
47
---
## Page 49
把文件或目录“item1”移动或重命名为“item2”，或者：
mv item... directory
把一个或多个条目从一个目录移动到另一个目录中。
5.6
有用的选项和实例
mv与cp共享了很多一样的选项：
选项
意义
-j -interactive
在重写一个已经存在的文件之前，提示用户确认信息。如果
不指定这个选项，mo命令会默认重写文件内容。
-ll -update
当把文件从一个目录移动另一个目录时，只是移动不存在的
文件，或者文件内容新于目标目录相对应文件的内容。
-V --verbose
当操作mv命令时，显示翔实的操作信息。
表5-6:mv选项
mv file1 file2
移动filel到file2。如果file2存在，它的内容会被fle1的
内容重写。如果file2不存在，则创建file2。这两种情况下，
file1都不再存在。
mv -i file1 file2
除了如果fle2存在的话，在file2被重写之前，用户会得到
提示信息外，这个和上面的选项一样。
mv file1 file2 dir1
移动file1和file2到目录dir1中。dir1必须已经存在。
mv dir1 dir2
如果目录dir2不存在，创建目录dir2.并且移动目录dir1
的内容到目录dir2中，同时删除目录dir1。如果目录dir2
存在，移动目录dir1（及它的内容）到目录dir2。
表5-7:mv实例
5.7
7rm-删除文件和目录
rm命令用来移除（删除）文件和目录：
48
---
## Page 50
rn item.
"item”代表一个或多个文件或目录。
5.8
3有用的选项和实例
下表是一些普遍使用的rm选项：
选项
意义
-i, interactive
在删除已存在的文件前，提示用户确认信息。如果不指定这
个选项，rm会默默地删除文件
-r, --recursive
递归地删除文件，这意味着，如果要删除一个目录，而此目
录又包含子目录，那幺子目录也会被删除。要删除一个目
录，必须指定这个选项。
ao.1og-- J-
忽视不存在的文件。不显示提示信息。这选项覆盖了“
interactive”选项。
-V, --verbose
在执行rm命令时，显示翔实的操作信息。
表5-8:rm选项
命令
运行结果
rm file1
默默地删除文件
rm -i fle1
除了在删除文件之前，提示用户确认信息之外。和上面的命
令作用一样。
rm -r file1 dir1
删除文件filel，目录dir1，及dir1中的内容。
rm -rf file1 dir1
同上，除了如果文件filel，或目录dir1不存在的话，rm仍
会继续执行。
表5-9:rm实例
小心rm!
类Unix的操作系统，比如说Linux，没有复原命令。一旦你用rm删除了一些
49
---
## Page 51
东西，它就消失了。Linux假定你很聪明，你知道你在做什么。
尤其要小心通配符。思考一下这个经典的例子。假如说，你只想删除一个目录中
的HTML文件。输入：
rm *.html
这是正确的，如果你不小心在“*”和“html”之间多输入了一个空格，就像这
样：
rm * .html
这个rm命令会删除目录中的所有文件，还会抱怨没有文件叫做“.html”。
小贴士。当你使用带有通配符的rm命令时（除了仔细检查输入的内容外），先
用1s命令来测试通配符。这会让你看到将要被删除的文件是什么。然后按下上箭头
按键，重新调用刚刚执行的命令，用rm替换ls。
5.9ln一创建链接
ln命令既可创建硬链接，也可以创建符号链接。可以用其中一种方法来使用它：
1n fi1e 1ink
创建硬链接，和：
ln =s item 1ink
创建符号链接。“item”可以是一个文件或是一个目录。
5.10硬链接
与更加现代的符号链接相比，硬链接是最初Unix创建链接的方式。每个文件默认会有一个硬
链接，这个硬链接给予文件名字。我们每创建一个硬链接，就为一个文件创建了一个额外的目
录项。硬链接有两个重要局限性：
1.一个硬链接不能关联它所在文件系统之外的文件。这是说一个链接不能关联与链接本身
不在同一个磁盘分区上的文件。
50
---
## Page 52
2.一个硬链接不能关联一个目录。
一个硬链接和文件本身没有什么区别。不像符号疑接，当你列出一个包含硬链接的目录内
容时，你会看到没有特殊的键接指示说明。当一个硬键接被删除时，这个键接被删除，但是文
件本身的内容仍然存在（这是说，它所占的磁盘空间不会被重新分配），直到所有关联这个文件
的链接都删除掉。知道硬链接很重要，因为你可能有时会遇到它们，但现在实际中更喜欢使用
符号链接，下一步我们会讨论符号链接。
5.11符号链接
创建符号链接是为了克服硬链接的局限性。符号链接生效，是通过创建一个特殊类型的文件，
这个文件包含一个关联文件或目录的文本指针。在这一方面，它们和Windows的快捷方式差
不多，当然，符号链接早于Windows的快捷方式很多年：-)
一个符号链接指向一个文件，而且这个符号链接本身与其它的符号链接几乎没有区别。例
如，如果你往一个符号链接里面写入东西，那么相关联的文件也被写入。然而，当你删除一个
符号链接时，只有这个链接被删除，而不是文件自身。如果先于符号链接删除文件，这个链接
仍然存在，但是不指向任何东西。在这种情况下，这个链接被称为坏链接。在许多实现中，ls
命令会以不同的颜色展示坏链接，比如说红色，来显示它们的存在。
关于链接的概念，看起来很迷惑，但不要胆怯。我们将要试着练习这些命令，希望，它变得
清晰起来。
5.12创建游戏场（实战演习）
下面我们将要做些真正的文件操作，让我们先建立一个安全地带，来玩一下文件操作命令。首
先，我们需要一个工作目录。在我们的家目录下创建一个叫做“playground”的目录。
5.13创建目录
mkdir命令被用来创建目录。首先确定我们在我们的家目录下，然后创建playground目录：
[ne@linuxbox -]$ cd
[neglinuxbox -]$ mkdir playground
为了让我们的游戏场更加有趣，在playground目录下创建一对目录，分别叫做“dir1”和
“dir2”。更改我们的当前工作目录到playground，然后执行mkdir命令：
51
---
## Page 53
[ne@linuxbox -]$ cd playground
[ne@linuzbox playground]$ nkdir dir1 dir2
注意到mkdir命令可以接受多个参数，它允许我们用一个命令来创建这两个目录。
#复制文件
下一步，让我们输入一些数据到我们的游戏场中。我们可以通过复制一个文件来实现目的。
我们使用cp命令从/etc目录复制passwd文件到当前工作目录下：
[nedlinuxbox playground]$ cp /etc/passwd
请注意，我们使用命令末尾的一个圆点来简化当前工作目录的写法。如果我们执行ls命令，
可以看到我们的文件：
[ne@linuxbox playground]$ 1s -1
total12
drvxrvxr-x 2mene4096 200801-10 16:40 dir1
drvxrvxr-x 2mene4096 200801-10 16:40 dir2
sse20:9101-100000991u0u1--1--1-1-
现在，仅仅是为了高兴，重复操作复制命令，使用“-v”选项（详细），看看它做了些什么：
[ne@linuxbox playground]$ cp =v /etc/passud 
/etc/passud′ -> *-/passud’
cp命令再一次执行了复制操作，但是这次显示了一条简洁的信息，指明它进行了什么操作。
注意，cp没有警告，就重写了第一次复制的文件。这是一个案例，cP会假设你知道自己在做什
么。如果希望得到警告的话，需要加入“-i”（互动）选项：
pnssed/>a/ t- ds $[pumox3fetd xoqxnuttgou]
cp: overurite ^./passud'?
52
---
## Page 54
在提示信息后输入"y”.文件就会被重写，输入其它的字符（例如，"n"）cp命令会保留原
文件。
5.14移动和重命名文件
现在，“passwd”这个名字，看起来不怎么有趣，这是个游戏场，所以我们给它改个名字：
[ne@linuxbox playground]$ nv passvd fun
让我们来传送fun文件，通过移动重命名的文件到各个子目录，然后再把它移回到当前目
录：
[ne@linuxbox playground]$ nv fun dir1
首先，把fun文件移动目录dir1中，然后：