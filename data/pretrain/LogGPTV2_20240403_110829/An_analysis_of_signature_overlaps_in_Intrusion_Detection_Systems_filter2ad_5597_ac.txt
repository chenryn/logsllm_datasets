Sd
i
speciﬁed (required) for f by Sd
i .
Deﬁnition 1: A set of constraints CSd
is a set of V f
,
Sd
i
is represented using a range of values when f
i
where V f
Sd
i
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
113Consequently, a signature Sd
does not represent the packet payload and an FSA otherwise.
i , characterizing the protocol
ﬁelds and the packet payload, is now represented as a set
of V f
, one of which is speciﬁed as an FSA (for the packet
Sd
i
payload) and the others as ranges of values. These ranges
of values and FSA can then be used with the ∪, ∩ and \
operators to assess the signature overlapping problem.
Although we describe our approach so it can be applied
the function convSig() is speciﬁc to each
to any IDS,
IDS signature language. This is an important aspect of our
approach since every single IDS (language) has its own
peculiarities that need to be accounted for, thus requiring that
we tailor the conversion function convSig(). Consequently,
in this paper, the conversion function convSig() is described
in the context of Snort, but could be easily described in
the context of other IDSs similar to Snort (that use a state
machine and ﬁrst order logic as guard conditions).
B. Conversion of Snort signatures
from SSnort
To calculate CSSnort
, we need to convert the
header, the non-payload and the payload families of plug-
ins [4] since these are the ones that look at characteristics
of packets.
i
i
To lighten our notation in this section, we will omit
the subscript identifying Snort (because we will only talk
about Snort), and will omit the subscript identifying speciﬁc
signatures when the context is obvious.
The header and non-payload plug-in families can be
mapped to a speciﬁc protocol header ﬁeld. For example,
S1672 (Figure 1) speciﬁes the IP Source Address ﬁeld (i.e.,
$EXTERNAL_NET). Thus, all
the protocol header ﬁelds
managed by the header and non-payload plug-ins of the
Snort signature language are converted by convSig() into
ranges of values.
Using S1672 (Figure 1) as an example, the possible value
of V T CPdestport for the destination port of a TCP packet is
21 (end of line 1 in Figure 1). S1672 does not constrain the
source port (i.e., any), thus V T CPsourceport = [0, 65535].
When a signature does not constrain a ﬁeld f, V f
= V f .
Sd
i
Several payload plug-ins (e.g., content and pcre) are
used to look into the packet payload, as opposed to the
header and non-payload plug-ins where only one speciﬁc
plug-in is used to look into a speciﬁc protocol ﬁeld. These
payload plug-ins are often used for performance reasons,
whereby the second, more-complex-to-evaluate constraint
(e.g., pcre) is only evaluated if the ﬁrst, simpler-to-evaluate
constraint (e.g., content) evaluates to true.7
Furthermore, the Snort signature language speciﬁes that
some payload plug-ins must be used together, and if this
is not the case, there is a syntax error in the signature.
These plug-ins are nocase, rawbytes, depth, offset,
within and distance: if used, they must be used with
either content or uricontent.
To convert
these payload plug-ins into one FSA, we
proceed as follows. First, we convert each payload plug-
in (P luginj) occurrence in a signature Si into a regular
expression (REj).8 We use a similar approach to s2b (i.e,
a Snort signature converter that
is part of Bro [8]) to
convert Snort plug-ins into regular expressions. However, the
objective of s2b is not to analyze the signature overlapping
problem, but simply to convert the Snort signatures into
Bro signatures. Moreover, we improve the concept of s2b
since s2b does not convert some Snort payload plug-ins
(e.g., byte_test). Then, we use known algorithms [7]
to convert each regular expression (REj) into a ﬁnite state
automaton (F SAj). Finally, we combine (intersect [7]) each
into F SApayload (i.e., F SA1 ∩ ... ∩ F SAn =
F SAj
F SApayload) and we obtain V payload
= F SApayload. The
SSnort
F SAj provide a common representation for constraints
speciﬁed by the Snort payload plug-ins. Thus, different
payload plug-in constraints in one signature (F SAj) can
be combined into one FSA (F SApayload), specifying the
payload constraint of the whole signature, by using an FSA
intersection algorithm [7]. The regular language accepted by
the resulting F SApayload is the largest language accepted
by all FSAs used in the intersection. This is the intended
purpose as it meets the Snort signature speciﬁcation lan-
guage.
i
C. Deﬁnitions
In our approach, a signature Sd
i , characterizing the proto-
col ﬁelds and the packet payload, is now represented as a set
of V f
, one of which is speciﬁed as an FSA and the others
Sd
i
as ranges of values. Thanks to the signature conversion
mechanism discussed previously, we can now formalize the
notions of signature inclusion, intersection and equality.
Deﬁnition 2: Signature Sd
j ⊂ Sd
(Sd
Deﬁnition 3: Signature Sd
i
j ) ⇔ Sd
j ∧ ∀f ∈ F, V f
Sd
Deﬁnition 4: Signature Sd
j ) ⇔ ∀f ∈ F, V f
Sd
i (strictly) includes signature Sd
j
⊆ V f
Sd
i
intersects signature Sd
∩ V f
Sd
j
i equals signature Sd
j
⊂ V f
.
Sd
i ∩
i
j (Sd
i ) ⇔ ∀f ∈ F, V f
∧ ∃f ∈ F, V f
i (cid:54)= Sd
(Sd
i =
(cid:54)= ∅.
Sd
i
Sd
j
Sd
j
= V f
Sd
i
.
Sd
j
V. IDS SIGNATURE SPACE ANALYZER
In this section, we present how we automatically analyze
the signature overlapping problem in an IDS signature
database for overlapping signatures according to our ap-
proach (Section V-A). We then discuss current limitations
of our tool (Section V-B).
7vrt-sourceﬁre.blogspot.com/2009/07/rule-performance-part-one-content.
html
8With the exception of byte_jump, which is not implemented yet.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
114A. Implementation
i = Sd
j = Sd
j ⊂ Sd
Our tool, called IDS Signature Space Analyzer (IDS-SSA)
works in two steps. First, (step 1) each IDS signature is
analyzed and transformed by the Parser module into a set
(or automaton) representation using the approach described
in Section IV-B. This Parser is necessarily speciﬁc to the
IDS being tested, but different parsers can easily be created
for different IDSs since, as we discussed earlier, network
IDS languages have common features. The Parser relies on
dk.brics.automaton9 to convert regular expressions
into FSAs. Our ﬁrst
implementation of this framework
targets Snort, i.e., we created a parser for Snort signatures.
Second, (step 2) these set/automaton representations of
the IDS signatures are fed to an Analyzer module that
searches for overlaps between signatures: the Analyzer im-
plements Deﬁnitions 2, 3 and 4. Again, this relies on the
library dk.brics.automaton for different operators on
FSAs(e.g., intersection). Note that the Analyzer module is
independent from the IDS (language).
i ⊂ Sd
Observe that since inclusion and equality are transitive
k) and equality
relations, inclusion chains (e.g., Sd
k) of length greater than 2
chains (e.g., Sd
can be computed at relatively low cost once all the pair-
wise inclusions/equalities have been computed. Computing
inclusion or equality chains can be done in time O(n2)
where n is the number of signatures. We implemented the
equality and inclusion algorithms.
i ∩ Sd
However, computing intersection chains (e.g., Sd
∩ Sd
k (cid:54)= ∅) of length greater than 2 is more costly than
for equality and inclusion since we cannot take advantage
of transitivity. Although we can rely on the intersection
operation provided in dk.brics.automaton, the lack
of transitivity requires that we compute ﬁrst the intersection
of every pair of signatures. This would not be enough
for our problem as we would also like to know which
triplets of signatures intersect, which 4-tuples of signatures
intersect, ... This problem is clearly very computationally
intensive. Snort 2.4.5 has 3576 signatures! And, there are
C(n, 2) + C(n, 3) + C(n, 4) + ...C(n, n) (n being the total
number of signatures in the analyzed database) subsets
of signatures for which we should identify whether there
is an intersection or not. This represents the worst case
scenario where every signature in the IDS database intersects
n (cid:54)= ∅). Obviously, in
with one another (i.e., Sd
practice we would not need to determine all those subsets
of signatures to identify the largest n-tuple of intersecting
signatures. A possible way to proceed could be to ﬁrst
identify the subset of the C(n, 2) pairs of signatures that
intersect. Identifying triplets of intersecting signatures then
relies on that information since, in such triplets, every pair
of signatures must intersect. More generally, in an n-tuple of
intersecting signatures, every (n-1)-tuple of signatures must
1 ∩ . . . Sd
j
9www.brics.dk/automaton
intersect. Identifying such n-tuples can be partially solved
with graph algorithms, speciﬁcally by identifying cliques in
a graph whose nodes are signatures and edges represent pairs
of intersecting signatures. A clique is a subset of nodes in a
graph G, such that for every two nodes in this subset, there
exists an edge connecting the two. Thus, a clique Kn is a
complete subgraph of n nodes in G.
Therefore, n intersecting signatures must form a Kn
clique in the graph discussed above. Note that a Kn clique
is only a necessary condition. It is not a sufﬁcient condition
to have an n-tuple. We still have to verify that the signatures
in a clique actually intersect (i.e., provide a none-empty
intersection).
Consequently, if |Ki| cliques are found, we test each of
them for intersections, then we repeat, increasing the value
of i until we ﬁnd a value of i such that there is no clique
or that none of the signatures in the cliques intersect.
To summarize, since this solution is computationally
intensive (identifying cliques in a graph runs in exponential
time), given the very large number of signatures in Snort, we
left the problem of identifying those intersections to future
work.
The case study section therefore reports on results where
we systematically study signature inclusions and equalities.
B. Limitations of the Implementation
Besides the fact that our framework currently focuses on
Snort and on the signature equality and inclusion problems,
it has two other limitations that slightly reduce the number
of signatures we can currently use (Section VI). First, we
focused on the most popular plug-ins in Snort signatures and
those that could be easily integrated in our approach. For
instance, byte_jump, flowbit, asn1, rpc, sameip,
ftpbounce and threshold are currently not supported.
Consequently, the signatures using these plug-ins cannot be
converted by our tool. Second, we observed in our case
study that
the dk.brics.automaton library fails to
create automaton for some signatures (it returned an error
message), and therefore we cannot use these signatures in
our analysis. Despite these two limitations, the majority of
Snort signatures were used in our analysis and we were able
to obtain interesting results (see Section VI).
VI. CASE STUDY
In this section, we describe the current results obtained
using our IDS-SSA tool on 12 Snort signature databases
for the signature equality and inclusion analysis. We used
IDS-SSA on nearly all Snort signature databases from Snort
1.8.6 to Snort 2.4.5. We observed similar results across
Snort versions (i.e., 1.8.7, 1.9.0, 1.9.1, 2.0.0, 2.1.0, 2.2.0,
2.3.0, 2.3.1, 2.3.2 and 2.3.3) and therefore only report on
versions 1.8.6 and 2.4.5. We selected Snort 1.8.6 because
its log limit is one and cannot be changed. Speciﬁcally,
Snort 1.8.6 only provides an IDS event for the ﬁrst signature
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
115that is triggered by a packet, which could cause evasion
attacks as we discussed earlier. Newer Snort engines such
as Snort 2.4.5 can log multiple IDS events on a single