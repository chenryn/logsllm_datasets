leverage this delay to infer login status by manipulating a web
browser to visit the front page of a target web application
while measuring the latency. High latency implies that the web
browser is logged in to the target web application.
A countermeasure to this attack is to make web applica-
tions spend constant time to process HTTP requests [5]. But,
guaranteeing constant processing time is not only difﬁcult but
also incurs much overhead.
The CSS-ﬁlter-based attack [23] can identify login sta-
tus by exploiting the difference in ﬁltering latency between
logged-in and non-logged-in web pages. However, two short-
comings make this attack less practical than others. First, it
takes much time to measure the latency of CSS ﬁltering.
Second, target web applications should allow the iframe
tag, but recent and security-aware web applications usually
disallow such a tag (Section II-B2).
D. Inferring Internal Web Server
We depict a timing attack to identify internal web servers
located in the local network of a victim web browser [10], [11],
[24], [26]. The basic idea of this attack is using HTML tags
(e.g., the img and script tags) to include arbitrary URLs
of internal web servers while waiting for onerror events.
Attackers can guess the servers’ status from the elapsed time.
Knowing internal web servers is an important privacy
breach because it can reveal what kinds of routers, network
printers, and NAS a victim uses. An attacker can use such
information to ﬁngerprint a victim web browser. Furthermore,
this knowledge becomes the basis of other security attacks,
such as DNS rebinding [18] and router reconﬁguration [30].
Usually, a ﬁrewall protects internal hosts from outsiders such
that attackers attempt to make a victim web browser execute
scripts to investigate servers in the internal network of the
victim web browser.
To prevent
this attack, a web browser should prevent
external scripts from accessing its internal network. We also
require DNS pinning and host name authorization to prevent
DNS rebinding attacks [18].
E. Limitations of Conventional Attacks
Conventional cross-origin web privacy attacks have some
limitations. First, their accuracy is relatively low due to un-
reliable page fetch latency affected by a number of error
sources, such as network condition, web server loads, and
client loads. Attackers can reduce the noise by averaging data
from a number of timing samples, but this process requires an
unreasonable amount of time to collect a sufﬁcient number of
samples. Furthermore, sampling becomes meaningless when a
victim web browser visits web pages via wireless networks or
Tor [7] due to their high and unstable network latency.
Second, the conventional attacks are inefﬁcient because
they cannot measure the fetch latency of multiple URLs in
parallel. If attackers open more than one connection with target
web applications, interference between multiple connections
causes timing errors. Accordingly, attackers should probe
URLs one by one.
III. HTML5 APPCACHE
In this section, we explain the HTML5 AppCache in detail.
We especially focus on when AppCache fails and how App-
Cache handles failures, because they are the most important
basis of our attacks presented in a later section.
A. Declaration
We depict how a web application announces that it uses
AppCache, and how the web application speciﬁes which
resources web browsers should store in their local storage.
3
1 
2 
3 ...
4 
Listing 1. HTML document that declares an AppCache manifest.
1 CACHE MANIFEST
2
3 CACHE:
4 /logo.png
5 https://example.cdn.com/external.jpg
6
7 NETWORK:
8 *
9
10 FALLBACK:
11 / /offline.html
Listing 2. AppCache manifest ﬁle.
First, the web application declares the path of an AppCache
manifest ﬁle (example.appcache) that corresponds to an
HTML document
in its html tag (Listing 1). The mani-
fest ﬁle and the HTML document must belong to the same
origin, and the content type of the manifest ﬁle should be
text/cache-manifest.
Next, through the manifest ﬁle, the web application spec-
iﬁes URLs that web browsers should cache (Listing 2). A
manifest ﬁle starts with CACHE MANIFEST and has three
sections: CACHE, NETWORK, and FALLBACK. (1) The CACHE
section declares URLs that need to be stored in local storage.
Each scheme of the declared URLs should be the same as
the main HTML document’s scheme. For example, when the
main HTML document’s scheme is HTTP, AppCache ignores
HTTPS URLs listed in the CACHE section. When the scheme
is HTTPS, AppCache ignores HTTP URLs listed in the CACHE
section. (2) The NETWORK section declares whitelisted URLs
that web browsers can download from outside. Web browsers
treat URLs listed in neither CACHE nor NETWORK sections
as unreachable. We can use an asterisk to allow arbitrary
URLs. (3) The FALLBACK section declares alternative URLs
to use when original URLs are inaccessible. The ﬁrst URL
is the original resource, and the second URL is the fallback
to substitute for the ﬁrst one. The FALLBACK section only
allows relative URLs because replacing a URL with another
URL that belongs to a different origin can violate SOP.
B. Download and Update Procedures
We illustrate the two procedures of AppCache: download
and update procedures. The ﬁrst time a web browser visits a
web page that declares an AppCache manifest, the browser
performs the download procedure. Otherwise, it performs the
update procedure.
1) Downloading non-cached web page: We ﬁrst describe
the AppCache download procedure for a newly-visited web
page and the corresponding events that are ﬁred during the
procedure. A web browser initiates the following download
procedure when it visits a web page that declares an AppCache
manifest for caching speciﬁc resources.
4
1)
2)
3)
4)
The browser attempts to fetch and parse the manifest
while ﬁring a checking event to an AppCache
object. If the manifest either has errors or is non-
existent, the browser terminates the download proce-
dure and ﬁres an error event.
The browser starts to download resources listed in the
manifest while ﬁring a downloading event.
The browser downloads each of the resources while
ﬁring a progress event for each resource. If the
browser cannot cache at least one of the resources
(Section III-C) or recognizes the changes in the mani-
fest while downloading the resources, the browser ter-
minates the download procedure and ﬁres an error
event.
The browser stores the downloaded resources in its
local storage and ﬁres a cached event.
2) Updating cached web page: Next, we describe the
AppCache update procedure for a cached web page and cor-
responding events ﬁred during the procedure. A web browser
initiates the following procedure to update corresponding re-
sources when it visits a web page that has already been cached
in its local storage.
1)
2)
3)
4)
The browser attempts to fetch and interpret the mani-
fest originating from the remote server while ﬁring a
checking event. First, if the content of the manifest
does not change, the browser terminates the update
procedure and ﬁres a noupdate event. Next, if the
manifest either has errors or is unreachable due to
network failures, the browser terminates the update
procedure and ﬁres an error event. Lastly, if the
manifest no longer exists in the remote server, the
browser terminates the update procedure, deletes the
cached resources, and ﬁres an obsolete event.
The browser starts to download resources listed in the
manifest while ﬁring a downloading event.
The browser re-downloads each of the resources
while ﬁring a progress event for each resource. If
the browser cannot cache at least one of the resources
or if the manifest changes during re-downloading, it
terminates the update procedure and ﬁres an error
event.
The browser stores the re-downloaded resources in
its local storage and ﬁres an updateready event.
3) Error handling: To avoid partial resource replacement
to preserve content consistency, AppCache reverts completely
to its previous status when it encounters errors during the
download or update procedures. AppCache discards all new
resources that were successfully downloaded during the failed
download or update procedures.
4) Web page refreshing: Occasionally, an AppCache proce-
dure ﬁnishes after a web page has been loaded because a web
browser performs the procedure in the background. Therefore,
the web browser needs to refresh the web page to reﬂect the
most recent version.
C. Non-cacheable URLs
We state the types of URLs that AppCache does not
cache and returns errors. Using such information allows us
to identify the status of a target URL, which will be explained
in Section IV. AppCache does not cache URLs that satisfy any
one of the following three conditions.
•
•
•
Invalid URL. AppCache does not cache this kind of
URL because the URL returns no content for caching.
If a web application returns client or server error codes
or does not respond when AppCache accesses a URL
of the web application, AppCache treats the URL as
invalid.
Dynamic URL. AppCache does not cache this
kind of URL because ofﬂine access to dynamic
content
is almost meaningless. Web applications
use HTTP response-header ﬁelds (Cache-Control
or Content-Length)
to specify their dynamic
content. AppCache does not cache content when
the response header contains a no-store direc-
tive in a Cache-Control ﬁeld [14] or has no
Content-Length ﬁeld (i.e., chunked encoding).
URL with redirections. AppCache does not cache
this kind of URL to avoid a security problem. Since
web browsers refer to the cached content with a URL
that is speciﬁed in a manifest ﬁle, allowing redirec-
tions can violate SOP. For example, some wireless
access points (APs) use a captive portal technique
that redirects web browsers to a special web page for
authentication or payment. If AppCache allows this
redirection, the stored content differs from the content
that a web application intends to cache, but has the
same URL. When the stored content embeds malicious
scripts, this problem becomes serious because SOP
is no longer guaranteed. Furthermore, malicious web
applications can abuse redirections to cache the con-
tent of target web pages under their origin to execute
their malicious scripts on the target web pages. Thus,
to enforce SOP, AppCache does not resolve URL
redirections.
Although AppCache restricts standard URL redirections
that use 3xx status codes, it ignores non-standard redirection
methods (e.g., the meta refresh tag and the JavaScript
object window.location). When AppCache encounters a
web page that uses such a non-standard redirection method,
AppCache does not follow a redirection, but caches the web
page “as is”.
D. Browser Differences
We analyze differences in AppCache implementations of
different web browsers. Due to the differences, some web
browsers are more vulnerable to our attack than others, and
some other web browsers are robust against our attack ex-
plained in Section IV.
1) Secured resources: Safari does not cache cross-origin
HTTPS URLs in a manifest ﬁle, so that we cannot attack cross-
origin HTTPS URLs when a victim uses Safari. The previous
version of the AppCache standard [13] speciﬁed that a web
browser should only cache URLs from the same origin as a
manifest when the manifest’s scheme is HTTPS. Therefore,
in the past, web application developers were not able to use
AppCache to cache cross-origin HTTPS URLs. This is bad
1 
Listing 3.
identiﬁcation attack.
PHP-based AppCache manifest
to perform a URL status
for secured web applications that want to cache resources
provided by secured content delivery networks (CDNs). The
recent standard [14] relaxes this restriction: when a manifest’s
scheme is HTTPS, a web browser can cache any HTTPS URLs
but no HTTP URLs. An exception is Safari because it does
not use the recent standard changes at the time of writing this
paper.
2) no-store directive: Chrome, Opera, and Safari ignore
the no-store directive of a HTTP resource, so that we can
attack no-store HTTP resources when a victim uses one
of the web browsers. The AppCache standard [14] speciﬁes
that a web browser should not cache any resources with a
no-store directive. But, we observe that Chrome, Opera,
and Safari ignore a no-store directive when they cache
HTTP resources via AppCache.
3) Referrer information: Chrome, Opera, and Safari send
no referrer information during an AppCache process, so that
a stealthy attack is possible. The AppCache standard [14]
does not specify whether a web browser should send refer-