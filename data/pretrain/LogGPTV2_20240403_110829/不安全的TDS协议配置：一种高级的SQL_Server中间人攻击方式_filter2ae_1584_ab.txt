Server配置管理器。要在客户端上启用强制协议加密，请使用客户端网络实用程序（Client Network Utility）或SQL
Server配置管理器。”这段建议的内容存在一些问题，因为只有同时在客户端和服务器上进行加密，才能有效。另外，我们现在已经知道，服务器端的设置与安全无关。
（2） 在[《启用到数据库引擎的加密连接》](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-encrypted-connections-to-the-database-engine)文章的“配置服务器允许加密连接”章节中，详细讲解了如何将服务器配置为强制需要加密的方法。然而，该章节的标题中“允许”这一词不太妥当，因为SQL
Server默认就是允许加密连接的，只是在默认情况下没有强制要求。 此外，这样的设置并不会额外增加通信的安全性，该文章却没有表明这一点。
（3） 在微软最近的一篇文章[《使用未经验证的加密》](https://docs.microsoft.com/en-us/sql/relational-databases/native-client/features/using-encryption-without-validation)中，存在大量误导以及表述错误，需要我们在此详细列举。
a. 首先，文章的标题本身就存在明显的问题。 在没有证书验证的情况下使用TLS，与我们使用加密的根本目的相违背。
我们强烈建议微软在文章中明确作出提醒，以突出这一事实。
b. 在这篇文章中的第一句话也存在问题：“SQL
Server总会对与登录相关的网络数据包进行加密”。其中并没有提到加密的握手是基于NTLM身份验证，而我们知道，NTLM身份验证几十年来始终存在着缺陷，从而产生中继攻击（[Relay
attacks](https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html)）和离线密码破解的风险。
更糟糕的是，最近有[研究](https://xpnsbraindump.wordpress.com/2014/01/27/sql-server-authentication-with-metasploit-and-mitm/)表明，密码认证握手本身就可能被降级攻击，该攻击将导致允许进行完整的明文密码检索。甚至，在Metasploit中，还有一个专门为进行这些攻击而设计的[模块](https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/server/capture/mssql.rb)。最后，即使这个密码认证握手过程是安全的，攻击者也可以在认证完成后[劫持TCP连接](https://blog.anitian.com/hacking-microsoft-sql-server-without-a-password/)，并获得与合法客户端相同的访问权限。
c. 在下一段中，有如下表述：“这也可以由SQL
Server配置管理器使用‘强制协议加密选项’进行配置。”就像前一篇文章中的错误表述一样，服务器端的设置并不会增加安全性。
d. 后文中还有：“如果要在服务器未配置证书的情况下启用加密，可以使用SQL
Server配置管理器，设置强制协议加密和信任服务器证书这两个选项。在这种情况下，如果服务器没有预先配置可验证的证书，将使用未经验证的自签名服务器证书。”其中，最后一句话非常容易产生误导。如果在客户端上设置了信任服务器证书选项，那么通信会非常容易受到证书中间人攻击，即使后面再在服务器上部署可验证的证书也一样。这样的表述，可能让用户误认为修复方式只是部署一个可验证的证书，而不需要将客户端的设置也修改正确。
e.
这篇文章提供了一个服务器和客户端设置的详细列表，并描述了在每种情况下会发生什么，能够帮助我们更深入地理解其工作机制。然而，文章中反复强调了在没有证书验证的情况下可以使用加密，并且比不使用加密要更安全，而事实却并非如此。假如拥有正确的工具，发起一次主动的中间人攻击，就像我们如今进行的被动嗅探一样容易。
我们欣慰地看到，微软还是有一些文章，针对这些设置做出了准确的说明。 在[《到SQL
Server的加密连接》](https://technet.microsoft.com/en-us/library/ms189067\(v=sql.105\).aspx)这篇文章中，给出了一个明确的提醒，其原文为：“使用自签名证书加密的SSL连接，不具有强安全性，它们容易受到中间人攻击。在生产环境或是连接到互联网的服务器上，您不应该选择使用自签名证书的SSL连接”。
这是一个非常有效的提醒信息，我认为类似的提醒应该出现在所有与可信服务器证书设置相关的文章之中。除此之外，我希望在这些文章中，还能对强制加密这部分做出提醒。
另外我们看到，Azure团队似乎做足了功课。他们向客户提供的示例中，所有客户端连接字符串都包含明确的TrustServerCertificate =
False标志（仅显式启用证书验证）以及需要加密的相应标志。
## 厂商回应
我们在2017年11月22日联系了微软安全应急响应中心（MSRC），向他们发送了这篇文章的草稿以及我们开发的中间人攻击脚本。我们建议微软对该问题进行验证，更新他们的产品，并对官方文档及相关文章做以修改。MSRC回复了我们的电子邮件，但SQL
Server产品团队目前还没有回应。
## 相关研究
SSL/TLS不对称降级的攻击方式并不是一个新的概念。在五年前，Moxie
Marlinspike曾经发布过一个[SSLTrip工具](https://moxie.org/software/sslstrip/)，使用的正是该攻击方式。同样，针对STARTTLS的降级攻击也在很早之前就实现过。然而遗憾的是，这些技术在特有的协议上的应用往往是缓慢的。在2016年初进行测试的时候，我们并没有发现有任何工具能针对TDS协议进行降级攻击，同样也没有发现证书欺骗攻击的利用工具。在我们完善这篇文章的过程中，发现了另一个工具[TDSBridge](https://github.com/MindFlavor/TDSBridge)，该工具可以作为TDS代理，并且在使用文档中称其“可以在服务器端强制加密”。尽管TSDBridge并不是一个安全工具，但我们还是有必要提到，尽管在该工具的开发过程中，没有将其视为一个安全风险，但该工具还是有助于证明我们此次的发现。
## 总结
由于客户端库无需加密，所以在默认配置下，Microsoft SQL Server数据库的通信并不安全。 因此，需要我们对服务器证书进行正确的配置。
然而，用于指导管理员如何保证通信安全性的文档，存在多个严重错误，我们强烈建议微软应对其进行修改。基于不安全的默认设置和大量误导性文档这两个事实，我们认为，绝大多数Microsoft
SQL Server的网络流量都容易受到中间人攻击，这一点需要特别引起大家的重视。