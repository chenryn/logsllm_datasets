A generic Designated Group Credential scheme consists of
the following algorithms:
• Common Parameter Generation(Setup): By in-
putting a security parameter k, it outputs the descrip-
tion CP of common parameters, which is publicly shared
and required by all the users who participate in the
scheme.
• Issuer Key Generation (IKeyGen): By inputting the
description CP of common parameters, it outputs a
secret/public key pair (SKS, PKS) for the credential
issuer US.

• Credential Holder Key Generation (HKeyGen): By
inputting the description CP of common parameters, it
outputs a secret/public key pair (SKH , PKH ) for the
credential holder UH .
• Veriﬁers Key Generation (VKeyGen): By inputting
the description CP of common parameters and a num-
ber n that describes the number of key pairs to gen-
erate, it outputs n secret/public key pairs (SKi,PKi),
i = 1,··· , n, for n veriﬁers UV1 ,··· ,UVn .
• Credential Generation (CGen): By inputting the de-
scription CP of common parameters, the credential is-
suer’s secret key SKS, the public keys PK1,··· ,PKn
of designated veriﬁers, the public key PKH of the cre-
dential holder UH and a message m, it outputs a cre-
dential (σ, L) on m for UH where L is a list of possible
designated veriﬁers for this credential. Note that (σ, L)
is only veriﬁable by the credential holder UH who holds
the secret key SKH .
• Credential Veriﬁcation (CVerify): By inputting the
description CP of common parameters, the credential
issuer’s public key PKS, the credential holder’s se-
cret key SKH , the public keys of designated veriﬁers
PK1,··· ,PKn, a message m and a credential (σ, L),
it outputs True if (σ, L) is correct or ⊥ otherwise.
• Credential Designation (CDesignate): By inputting
the description CP of common parameters, the creden-
tial issuer’s public key PKS, a message m, a credential
(σ, L), a number i that indicates which designated ver-
iﬁer UVi on the list L is to be designated and the public
key PKi of this designated veriﬁer, it outputs a desig-
nated credential ˆσ on m for UVi . Note that ˆσ is only
veriﬁable by the designated veriﬁer UVi who holds the
secret key SKi.
• Designated Credential Veriﬁcation (DCVerify):
By inputting the description CP of common parame-
ters, the credential issuer’s public key PKS, the secret
key SKVi of the designated veriﬁer UVi , a message m
and a designated credential ˆσ, it outputs True if ˆσ is
correct or ⊥ otherwise.
3.2 Security Notions
We require a credential system to satisfy the following
security requirements.
Definition 5. A secure credential system has the follow-
ing properties: complete, non-transferable, unforgeable and
limitable.
Completeness.
Completeness properties for the credential system are de-
ﬁned as follows.
P r[T rue ← CV erif y(CP,PKS,SKH ,
PK1,··· ,PKn, m, (σ, L))
|
CP ← Setup(k) ∧
(SKS,PKS) ← IKeyGen(CP) ∧
(SKH ,PKH ) ← HKeyGen(CP) ∧
∧
j = 1,··· , n
(σ, L) ← CGen(CP,SKS,PKH ,
(SKj,PKj) ← V KeyGen(CP, n),
PK1,··· ,PKn, m)] = 1
P r[T rue ← DCV erif y(CP,PKS,SKi, m, ˆσ)
|
CP ← Setup(k) ∧
(SKS,PKS) ← IKeyGen(CP) ∧
(SKH ,PKH ) ← HKeyGen(CP) ∧
∧
j = 1,··· , n
(σ, L) ← CGen(CP,SKS,PKH ,
PK1,··· ,PKn, m) ∧
(SKj,PKj) ← V KeyGen(CP, n),
T rue ← CV erif y(CP,PKS,SKH ,
PK1,··· ,PKn, m, (σ, L)) ∧
ˆσ ← CDesignate(PKS,PKi, m, (σ, L), i),
i : UVi ∈ L] = 1
Non-Transferability.
Receiving a designated credential ˆσ, where
ˆσ = CDesignate(PKS,PKi, m, (σ, L), i), i : UVi ∈ L
only the veriﬁer UVi ∈ L can verify and be convinced by the
authenticity of ˆσ. UVi cannot transfer or proof the result to
any other third party. The non-transferability property is
ensured by a transcript simulation algorithm.
Unforgeability.
The unforgeability of the credential system is deﬁned by a
game between an adversary A and a challenger C. The exis-
tential unforgeability of a credential system under a chosen
message attack (UF-CS-CMA) is deﬁned by the following
experiment.
• Phase 1: Given a credential scheme, let A be the
UF-CS-CMA adversary, it takes CP given by C that
generated from Setup(k) where k is the security para-
meter. C also provides A the public keys PKS, PKH ,
PK1, ··· , PKn of the credential issuer US, the creden-
tial holder UH and the designated veriﬁers U1,··· ,Un.
• Phase 2: At any time, A can query for the hash re-
sult on any message mi of his choice up to qH times
(which is polynomial in k). C will answer A’s queries
by providing the hash value H(mi).
• Phase 3: At any time, A can query for the pub-
lic/secret key pair on any user Ui of his choice up
to qK times (which is polynomial in k). C will an-
swer A’s queries by providing the value (SKi,PKi) ←
VKeyGen(CP, 1).
• Phase 4: At any time, A can query for requesting a
credential (on any message mi of his choice) specifying

any users USi /UHi /UVi1 ,··· ,UVin as the credential is-
suer/credential holder/designated veriﬁers he likes up
to qC times (which is polynomial in k). C will answer
A’s queries by providing the value (σ, L) ← CGen(CP,
SKSi , PKHi , PKi1 ,··· ,PKin , mi).
If A has previ-
ously queried for the key pairs of these users, then A
can verify the credential himself, otherwise C will pro-
vide A the result from CVerify and/or DCVerify.
• Phase 5: Eventually, A will output a valid credential
on a message m∗ with US as the credential issuer, UH
as the credential holder and UV1 ,··· ,UVn as the des-
ignated veriﬁers such that m∗ has never been queried
for the credential result or m∗ has been queried but
not on these users.
The success probability of A to win the experiment (i.e. to
break UF-CS-CMA of the credential scheme) is deﬁned to
be
SuccU F−CS−CM A
A
(k)
A credential scheme is said to be existentially unforgeable
under a chosen message attack if the probability of success of
any polynomially bounded adversary A in the above exper-
iment is negligible. In other words, SuccU F−CS−CM A
(k) ≤
, where  denotes negligible success probability in the secu-
rity parameter k.
A
Limitability.
Limitability property for the credential system is deﬁned as
follows. For any valid (σ, L) that is hold by a credential
holder UH , he can only designate the credential σ to any
veriﬁer that is listed in L, speciﬁed by the credential issuer.
In other words, there exists no algorithm for any (σ, L) that
will allow the credential holder to designate σ to a user UO ∈
L, such that
T rue ← DCV erif y(CP,PKS,SKO, m, ˆσ)
where (σ, L) ← CGen(CP,SKS,PKH ,PK1,··· ,PKn, m),
and PKO ∈ {PK1,··· ,PKn}. The limited designation prop-
erty is deﬁned by the following LD-CS-CMA experiment,
which is slightly modiﬁed from the UF-CS-CMA game de-
ﬁned earlier.
• Phase 1-4: Same as the UF-CS-CMA experiment.
• Phase 5: At some stage, A will nominate a veriﬁer
UO within the veriﬁers given by C in phase 1 that
he would like to corrupt and ask for the credential
(σ, L) on any message m∗ of his choice with US as
the credential issuer, UH as the credential holder and
UVi , i = 1,··· , n, Vi = O as the designated veriﬁers
such that m∗ has never been queried for the credential
result or m∗ has been queried but UO ∈ L.
• Phase 6: A can keep querying any messages and users
but with the requirement that m∗ and UO cannot be
queried together again.
• Phase 7: Eventually, A will output a valid designated
credential ˆσ on m∗ designated to UO.
We deﬁne the success probability of A to win this experi-
ment (i.e. to break LD-CS-CMA of the credential scheme)
as SuccLD−CS−CM A
(k) and the success probability of any
polynomially bounded adversary A is negligible. That is,
SuccLD−CS−CM A
A
A
(k) ≤ .
4. A DESIGNATED GROUP CREDENTIAL
SCHEME FROM BILINEAR PAIRINGS
Our concrete construction of the credential system based
on bilinear pairing is deﬁned as follows.
4.1 Security Proofs
In this section, we show the security proofs for our scheme
and show that our scheme satisﬁes all the security require-
ments deﬁned in Section 3.
• Setup: Choose a security parameter k, which deﬁnes
the length of prime number q. Select the bilinear
groups G1 and G2 of prime order q, where q = |G1| =
|G2|. Generate a bilinear map ˆe : G1 × G1 → G2, a
generator P ∈ G1 together with a cryptographic hash
function H0 : {0, 1}∗ → G∗1. Compose all of them
into a description string CP that speciﬁes the common
parameters (G1, G2, q, ˆe, P, H0).
R
• IKeyGen/HKeyGen/VKeyGen: Given CP, pick a random
∈ Z∗q as SKi and compute PKi = xiP .
number xi
Let Ppub = PKS, where US is the credential issuer.
The secret/public key for the credential issuer is (SKS,
PKS). The secret/public key for the credential holder
is (SKH , PKH ) and the secret/public keys for the n
veriﬁers are (SKj, PKj), for j = 1,··· , n.
• CGen: Given CP, the credential issuer’s secret key SKS
= xS and a message m ∈ {0, 1}∗, the credential issuer
prepares a list L of designated veriﬁers and their corre-
sponding public keys PKi = xiP, i = 1,··· , n for the
credential holder with public key PKH = xH P . The
∈ Z∗q and
credential issuer picks a random number r
computes S = r−1xSH0(m), R = rP, RH = rPKH ,
R1 = rPK1, ··· , Rn = rPKn. The credential is a
tuple
R
(σ, L) = ({S, R, RH , R1,··· , Rn}, L)
(m, σ, L) is provided to the credential holder via a se-
cure and authenticated channel. 1
• CVerify: Given CP, the credential issuer’s public key
Ppub = xSP , the credential holder’s secret key SKH =
xH , a message m and a credential (σ, L) = ({S, R,
RH , R1, ··· , Rn}, L), return T rue iﬀ
– ˆe(S, RH ) ?= ˆe(H0(m), Ppub)SKH and ˆe(S, R) ?=
ˆe(H0(m), Ppub) hold with equality, and
– ˆe(Ri, P ) ?= ˆe(PKi, R) holds ∀Ri, i : UVi ∈ L
Otherwise, return ⊥.
• CDesignate: Given CP, a message m, a credential
(σ, L), select a designated veriﬁer from L, UVi ∈ L, and
obtain UVi ’s public key PKi. Pick the corresponding
Ri value from σ according to i. Compute the desig-
nated credential ˆσ = ˆe(S, Ri). (m, ˆσ) is sent to UVi .
• DCVerify: Given CP, the credential issuer’s public key
Ppub, the designated veriﬁer’s secret key SKi, a mes-
sage m and a designated credential ˆσ, return T rue iﬀ
ˆe(H0(m), Ppub)SKi ?= ˆσ holds with equality. Other-
wise, return ⊥.
1We note that the credential holder can always randomize
this credential by computing S = r−1S, R = rR, and
∀Ri = rRi, i : UVi ∈ L, for r ∈ ZZ∗q .
In some situation
where we do not allow this randomization to happen, then S
is computed as S = r−1xSH0(m, R), and R will be required
as part of the CDesignate algorithm.
Correctness. The correctness of our scheme is justiﬁed
as follows.
For the CVerify algorithm,
ˆe(S, R) = ˆe(r−1xSH0(m), rP )
= ˆe(H0(m), xSP )r·r−1
= ˆe(H0(m), Ppub)
and
ˆe(S, RH ) = ˆe(r−1xSH0(m), rxH P )
= ˆe(H0(m), xSP )r−1·r·xH
= ˆe(H0(m), Ppub)SKH
and
∀Ri, i : UVi ∈ L, ˆe(Ri, P ) = ˆe(rPKi, P )
= ˆe(PKi, rP ) = ˆe(PKi, R)
For the DCVerify algorithm,
ˆσ = ˆe(S, Ri) = ˆe(r−1xSH0(m), rxiP )
= ˆe(H0(m), xSP )r−1·r·xi
= ˆe(H0(m), Ppub)SKi
Non-Transferability. The transcript simulation for our
scheme is deﬁned as follows. Any designated veriﬁer UVi can
compute a simulated designated credential as ˆσ = ˆe(H0(m),
Ppub)SKi on any m = m and DCVerify algorithm will return
T rue on ˆσ. The simulated designated credential is indistin-
guishable from the one that is produced by the credential
holder from a third party’s view. Thus only the designated
veriﬁer will be convinced by the authenticity of the desig-
nated credential.
Unforgeability. Let A be an UF-CS-CMA adversary in
the unforgeability experiment described in Section 3. We
will build a simulator B that will use A to solve an instance
of the BDHP. The purpose of B is to make use of A to
compute ˆe(P, P )abc from (P, aP, bP, cP ) for unknown a, b, c,
which is given in the beginning of the experiment. The
simulation is modiﬁed from [4] and is described as follows:
• Phase 1: B generates n + 1 random numbers ui
∈ Z∗q