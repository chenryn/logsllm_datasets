UAV(𝑑𝑛)𝑠𝑘𝑛←UAVPrivateKey𝑝𝑘𝑛←UAVPublicKey𝐼𝐷𝑛←IDoftheUAVTLSConnectionSetup𝐶𝑛,𝐼𝐷𝑛✓Authority(𝐴𝑢𝑡ℎ)𝑠𝑘𝐴←AuthorityPrivateKey𝑝𝑘𝐴←AuthorityPublicKey𝐿=[𝑝,𝑎,𝑏,G,𝐺,𝑛,𝛾,𝐻,𝑆,𝐸,𝑠𝑖𝑔𝑛]Store𝑝𝑘𝐴,𝐿211ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pietro Tedeschi, Savio Sciancalepore, and Roberto Di Pietro
5.3 Online Phase
During the Online Phase of ARID, the UAV dn generates and emits
RemoteID-compliant messages, enabling operators to identify their
locations, while still preserving UAV anonymity. The sequence dia-
gram of the operations executed by dn every Ti seconds is depicted
in Figure 3. Note that Ti is not fixed, and can vary randomly in the
interval(cid:2)Ti,MI N , 1(cid:3) seconds, with Ti,MI N to be defined through
real experiments in Section 7.
Figure 3: Sequence Diagram of the Online Phase of ARID.
Specifically, the UAV dn executes the following operations.
• Assume that at the time t dn acquires via Global Position-
terms of latitude, longitude, and altitude. dn first generates
a digest hn,t , according to Eq. 1.
ing System (GPS) the own location(cid:2)latn,t , lonn,t , altn,t(cid:3), in
hn,t = H(cid:0)IDn||latn,t ||lonn,t ||altn,t ||t||in f on,t ||νn,t(cid:1) ,
(1)
where H refers to a generic secure hashing function, in f on,t
refers to the additional information included by dn in the
RemoteID packet (such as the speed and the position of the
control station), νn,t is a nonce, and the operator || refers to
the string concatenation.
• Then, dn generates a location report signature δn,t as per
Eq. 2.
(2)
being siдn an ECC public-key signature algorithm (e.g., Elliptic
Curve Digital Signature Algorithm (ECDSA)).
• Then, dn generates a one-time ephemeral key Kn,t . Using
such a key, dn generates the ephemeral pseudonym cn,t , as
per Eq. 3.
δn,t = siдn(cid:0)hn,t , skn(cid:1) ,
cn,t = S(cid:0)(cid:2)IDn||δn,t ||t||νn,t(cid:3) , Kn,t(cid:1) ,
(3)
where S refers to a generic symmetric encryption algorithm.
• Then, dn generates the encrypted one-time key ρn,t , accord-
ing to Eq. 4.
(4)
ρn,t = E(cid:0)Kn,t , pkA(cid:1) ,
being E a generic public-key encryption operation and pkA
the public-key of the Authority Auth.
• Finally, dn delivers a broadcast RemoteID packet containing
the ephemeral pseudonym cn,t , the encrypted one-time key
ρn,t , and all the mandatory RemoteID information, i.e., its lat-
itude latn,t , longitude lonn,t , altitude altn,t , the timestamp
t, and the additional information in f on,t .
• The generic CI operator r continuously listens on the wire-
less channel. If r identifies a RemoteID packet (e.g., through
analyzing network traffic via tools like Wireshark), it looks
at the reported location of the UAV. If such a location is
outside the protected area, r can simply discard the packet.
Otherwise, r stores the packet locally and lately triggers the
Reporting Phase (see Section 5.4).
5.4 Reporting Phase
The Reporting Phase is triggered exclusively by a CI operator, when
it detects an invasion of the protected area by an UAV. Figure 4
shows the sequence diagram of the involved operations. Note that
all the communications occur via a regular Internet connection,
secured via the well-known TLS protocol.
Figure 4: Sequence Diagram of the Reporting Phase of ARID.
The operations executed in this phase are detailed below.
• Assume that at the time t the UAV dn broadcasts a RemoteID
message consistent with the format presented in Section 5.3,
including the ephemeral pseudonym cn,t , the encrypted one-
time key ρn,t , the latitude latn,t , longitude lonn,t , altitude
altn,t of the UAV, the timestamp t, and the additional infor-
mation in f on,t .
• Assume also that the CI operator r receives the RemoteID
message and verifies that the location of the UAV, in terms of
latitude, longitude, and altitude, is reporting a position inside
its restricted area, determining an invasion. Then, the CI
operator r establishes a secure connection with the Authority
Auth, and it reports the details of the message detected on
the communication channel, together with any additional
local information.
UAV(𝑑𝑛)𝑠𝑘𝑛←UAVPrivateKey𝑝𝑘𝑛←UAVPublicKeyAcquireLocationattime𝑡(𝑙𝑎𝑡𝑛,𝑡,𝑙𝑜𝑛𝑛,𝑡,𝑎𝑙𝑡𝑛,𝑡)GenerateDigestℎ𝑛,𝑡=𝐻(cid:0)𝐼𝐷𝑛||𝑙𝑎𝑡𝑛,𝑡||𝑙𝑜𝑛𝑛,𝑡||𝑎𝑙𝑡𝑛,𝑡||𝑡||𝑖𝑛𝑓𝑜𝑛,𝑡||𝜈𝑛,𝑡(cid:1)GenerateLocationReportSignature𝛿𝑛,𝑡=𝑠𝑖𝑔𝑛(cid:0)ℎ𝑛,𝑡,𝑠𝑘𝑛(cid:1)GenerateOneTimeKey𝐾𝑛,𝑡GenerateEphemeralPseudonym𝑐𝑛,𝑡=𝑆(cid:0)(cid:2)𝐼𝐷𝑛||𝛿𝑛,𝑡||𝑡||𝜈𝑛,𝑡(cid:3),𝐾𝑛,𝑡(cid:1)GenerateEphemeralKey𝜌𝑛,𝑡=𝐸(cid:0)𝐾𝑛,𝑡,𝑝𝑘𝐴(cid:1)𝑐𝑛,𝑡,𝜌𝑛,𝑡,𝑙𝑎𝑡𝑛,𝑡,𝑙𝑜𝑛𝑛,𝑡,𝑎𝑙𝑡𝑛,𝑡,𝑡,𝑖𝑛𝑓𝑜𝑛,𝑡CIOperatorReceiver(𝑟)𝑡UAV(𝑑𝑛)CIOperatorReceiver(𝑟)InvasionAttack✓Authority(𝐴𝑢𝑡ℎ)DecryptSymmetricKey𝐾′𝑑,𝑛=𝐷(cid:0)𝜌𝑛,𝑡,𝑠𝑘𝐴(cid:1)DecryptPseudonym𝑆(cid:16)𝑐𝑛,𝑡,𝐾′𝑑,𝑛(cid:17)=h𝐼𝐷′𝑛||𝛿′𝑛,𝑡||𝑡′||𝜈′𝑛,𝑡iLink𝐼𝐷′𝑛≡𝐼𝐷Retrieve𝑝𝑘𝑛ObtainHashfromSignatureℎ′𝑛,𝑡=𝐷(𝛿′𝑛,𝑡,𝑝𝑘𝑛)VerifySignature(cid:16)𝛿′𝑛,𝑡,𝑝𝑘𝑛(cid:17)?=𝐻(cid:16)𝐼𝐷′𝑛||𝑙𝑎𝑡′𝑛,𝑡||𝑙𝑜𝑛′𝑛,𝑡||𝑎𝑙𝑡′𝑛,𝑡||𝑡′||𝑖𝑛𝑓𝑜′𝑛,𝑡||𝜈′𝑛,𝑡(cid:17)𝑡𝑐𝑛,𝑡,𝜌𝑛,𝑡,𝑙𝑎𝑡𝑛,𝑡,𝑙𝑜𝑛𝑛,𝑡,𝑎𝑙𝑡𝑛,𝑡,𝑡,𝑖𝑛𝑓𝑜𝑛,𝑡TLSConnectionSetup𝑐𝑛,𝑡,𝜌𝑛,𝑡,𝑙𝑎𝑡𝑛,𝑡,𝑙𝑜𝑛𝑛,𝑡,𝑎𝑙𝑡𝑛,𝑡,𝑡,𝑖𝑛𝑓𝑜𝑛,𝑡212ARID: Anonymous Remote IDentification of Unmanned Aerial Vehicles
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
• At the reception of the report from r, Auth first obtains the
reconstructed ephemeral key K′d,n of dn, by decrypting the
encrypted one-time key, as in Eq. 5.
signature δn,t ) and the nonce νn,t . The continuous renewal of the
pseudonym and the usage of the public-key cryptography scheme
E also provide message unlinkability, i.e., an adversary intercepting
any two messages cannot distinguish if they have been emitted
by the same UAV or by different UAVs. Note that, differently from
other schemes available in the literature, ARID achieves anonymity
without any assistance from external infrastructure elements, and
neither it requires a continuous connection with the Authority (see
Section 7.3 for more details). Moreover, we emphasize that this
property still holds even when the Registration Table hosted on
the Authority is public. Indeed, the only entity that can unveil the
long-term identity of dn is the Authority, using its private key skA.
The Anonymity property of ARID has been also verified in ProVerif
(see Section 6.2).
UAV Message Authenticity. ARID provides message authenticity
to RemoteID messages, protecting against impersonation and mes-
sage manipulation. Message authenticity is provided through the
inclusion of the location report signature δn,t , generated starting
from: (i) the long-term identity of the UAV IDn; (ii) all the infor-
mation publicly-disclosed by the UAV in the RemoteID message;
and, (iii) the private key skn. Given that dn is the only entity pos-
sessing skn, only dn can generate the location report signature
δn,t associated to a particular RemoteID message, assuring message
authenticity. Indeed, let us assume that the attacker modifies any
plain-text information (location of the drone, speed, timestamp,
ground station location, or emergency status). In the cited case, the
verification of the signature δn,t will fail, leading to attack rejection.
Similarly to the previous property, this feature holds even if the
Registration Table is public, as formally verified in Section 6.2.
Protection against Replay Attacks. Being RemoteID messages
broadcast, ARID cannot provide formal protection against replay
attacks. Indeed, there is no interaction between the UAV and other
entities that could ensure the messages’ freshness. To identify re-
played messages, ARID leverages the consistency among the times-
tamp in the broadcast message and the current time. Indeed, most
UAVs feature a GPS receiver, used to obtain global synchronization.
If a CI operator receives a message with a timestamp whose differ-
ence to the UTC time is higher than a threshold τ, such message
is discarded, failing a freshness check. Note that an attacker could
modify the timestamp t included in a broadcast message previously
recorded to match it to the actual time, making a UAV appear at an
old location at the current time. However, when such a message is
reported to the Authority Auth, the Authority can easily verify the
manipulation of the message, as the verification of the signature
δn,t will fail.
Partial Protection against UAV tracking. From the security per-
spective, ARID also provides theoretical protection against UAV
tracking. Indeed, not only an UAV never reveals the long-term
identity, but it also uses an ephemeral pseudonym only once, not
allowing to link two RemoteID messages. At the same time, we
notice that a control station could also control many UAVs at the
same time. Therefore, an adversary might not track a specific UAV
with 100% accuracy by checking the location of the control station.
This is evident when the adversary does not have any additional
knowledge of the scenario, i.e., it does not know how many UAVs
are operating in the area.
Although these remarkable features, many contributions framed
= D(cid:0)ρn,t , skA(cid:1) ,
K′d,n
(5)
being D the public-key decryption algorithm dual of the
public-key encryption algorithm used by dn. If the decryp-
tion is successful, Auth proceeds further; otherwise, it dis-
cards the message.
• Then, using the reconstructed ephemeral key K′d,n, Auth
obtains the reconstructed ephemeral pseudonym of dn, by
applying the operations in Eq. 6.
S(cid:16)cn,t , K′d,n(cid:17) =(cid:2)ID′n||δ′n,t ||t′||ν′n,t(cid:3)
(6)
where S refers to the same symmetric encryption algorithms
used by dn, while the values ID′n, δ′n,t , t′, and ν′n,t refer to
the reconstructed values of the long-term identity of dn, the
location report signature, the generation timestamp, and the
random nonce.
• Auth verifies the consistency of the information retrieved
from the ephemeral pseudonym. In particular, Auth checks
that the reconstructed timestamp t′ matches precisely the
value of t delivered in the report by the CI operator r. If
they match, Auth proceeds further; otherwise, it discards the
message.
• Then, Auth looks into the local Registration Table an entry
for the UAV with long-term identity ID′n. If a match is found,
Auth retrieves the corresponding registered public key pkn;
otherwise, it discards the message.
• Using the public key pkn just retrieved, Auth verifies the
signature δ′n,t , by applying the check in Eq. 7.
veri f y(cid:16)δ′n,t , pkn(cid:17) ?= H(cid:16)ID′n||lat′n,t ||lon′n,t ||alt′n,t ||t′||in f o′n,t ||ν′n,t(cid:17)
(7)
where veri f y refers to the public-key signature verification
algorithm dual of the public-key signature generation algo-
rithm used by dn. If Auth verifies the signature, the report by
r is considered authentic, and the UAV with long-term iden-
tity IDn is deemed to be accountable for the invasion of the
restricted access protected area (the owner can be contacted,
charged, and blacklisted, based on the specific intrusion).
Otherwise, the message is discarded as not authentic.
6 SECURITY ANALYSIS
This section discusses the security features offered by ARID. Specif-
ically, Section 6.1 illustrates the security properties of ARID, while
Section 6.2 provides the automated formal proof through ProVerif.
6.1 Security Considerations
Overall, ARID provides the following security properties.
UAV Anonymity. ARID ensures the complete anonymity of the
UAVs while maintaining full compatibility with RemoteID regu-
lations. Indeed, each message emitted by dn at the time t in the
Online Phase includes an ephemeral pseudonym cn,t , that is linked
to the long-term identity IDn but changes for any emitted mes-
sage, due to the dependence from the timestamp t (included in the
213ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pietro Tedeschi, Savio Sciancalepore, and Roberto Di Pietro
in the context of VANET pointed out the possibility to distinguish
vehicles and track them based on the peculiar characteristics of
their trajectories, with different degrees of accuracy [46], [30]. Rec-
ognizing the likely partial effectiveness of the mentioned tracking
techniques, we define the protection against tracking offered by
ARID as partial. However, anti-tracking is not the scope of ARID,
and its applicability to tracking avoidance is left for future work.
6.2 Formal Verification — ProVerif
The security properties provided by ARID, i.e., UAV anonymity and
message authenticity, have been formally verified via ProVerif [10].
ProVerif is an automated verification tool widely adopted in the
recent literature to formally verify the security properties achieved
by cryptographic protocols [49], [32], [5].
Specifically, ProVerif assumes the Dolev-Yao attacker model, i.e.,
the attacker can read, modify, delete, and forge new packets to be
delivered on the communication channel. Under the cited assump-
tions, ProVerif checks if the attacker can break the security goals of
the protocol defined by the user. In case an attack is found, ProVerif
also provides a step-by-step description of the attack.
We implemented ARID in ProVerif to verify two main properties:
(i) the secrecy of the long-term identity of the UAV; and, (ii) the au-
thenticity of the messages emitted by an UAV. Therefore, according
to the logic of the ProVerif tool, we defined two main events.
(1) acceptUAV(id): Indicating that the UAV with long-term iden-
tity IDn is running ARID.
(2) termAuth(id): Denoting that the Authority has terminated
ARID and verified that the UAV with the long-term identity
IDn generated the message.
In line with the logic of ProVerif, we verified the UAV message
authenticity property through verifying security properties such
as sender authentication and impersonation resistance. To this aim,
we checked that event(acceptUAV(id)) cannot be executed after the
execution of event(termAuth(id)). Moreover, we verified the strong
secrecy of the long-term identity of IDn, by verifying that the
attacker is unable to distinguish when the secret changes, and that
the attacker cannot obtain IDn from the messages exchanged on
the wireless communication channel.
The following output messages are provided by ProVerif to iden-
tify the fulfillment of the security properties of our interest.
• event(last_event ()) ==> event(previous_event ()) is true: mean-
ing that the function last_event is executed only when an-
other function, namely previous_event, is really executed;
• not attacker(elem[]) is true: meaning that the attacker is not
in possession of the value of elem;
• Non-interference elem[] is true: meaning that an attacker
cannot deduce any information about the value of elem from
the eavesdropped messages.
The excerpt of the output of the ProVerif tool when IDn is not
public (regular condition) is shown in Figure 5.
The fulfilment of the query in Figure 5 demonstrates that the
Authority always verifies message authenticity, i.e., when it detects
that a message has been generated by IDn, this is always true.
Note that the correspondence in the query is not injective, because
the attacker could have replayed the message. We handled replays
artificially in ProVerif, through the verification of the freshness of
Figure 5: Excerpt of the output provided by the ProVerif tool
when IDn is not public.
the timestamp. Also, note that the Non-interference query is verified,
i.e., an attacker cannot deduce any information about IDn from the
eavesdropped messages.
As a side-property of ARID, we also checked if message authen-
ticity still holds when the information provided to the Authority
are public, i.e., the public key of the UAV pkn and its identity IDn.
The excerpt of the output of the ProVerif tool in this case is shown
in Figure 6.
Figure 6: Excerpt of the output provided by the ProVerif tool
when IDn is public.
Note that, even when IDn becomes public (e.g., due to the publi-
cation of the Registration Table), still message authenticity holds,
meaning that the information in the Registration Table is not valu-
able for the attacker to impersonate any UAVs.
We also released the generated ProVerif source code, to allow
interested readers to verify our claims and further re-use our code.
7 PERFORMANCE EVALUATION
This section provides the performance evaluation of ARID, both
in qualitative and in quantitative terms. Section 7.1 reports the im-
plementation details of the proof-of-concept, Section 7.2 illustrates
the performance of ARID, while Section 7.3 qualitatively compares
ARID with the approaches discussed in Section 2.
7.1 Implementation Details
We implemented a prototype of ARID on the 3DR-Solo commercial
drone [3]. The 3DR-Solo hardware platform features a CPU i.MX6
Solo manufactured by Freescale System, connected to a Pixhawk
autopilot. It also includes a single-core processor ARM Cortex A9
running at 1.00 GHz, and it is equipped with 7, 948 MB of ROM
and 512 MB of RAM. The 3DR-Solo drone features a Cryptographic
Acceleration and Assurance Module (CAAM), as well as True and