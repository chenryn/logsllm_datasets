# FIREMAN: A Toolkit for Firewall Modeling and Analysis

**Authors:**
- Lihua Yuan
- Jianning Mai
- Zhendong Su
- Hao Chen
- Chen-Nee Chuah
- Prasant Mohapatra

**Affiliation:**
University of California, Davis

## Abstract
Security concerns are increasingly critical in networked systems. Firewalls serve as a vital defense mechanism for network security. However, firewall misconfigurations are common and significantly weaken the intended security. This paper introduces FIREMAN, a static analysis toolkit designed for firewall modeling and analysis. By treating firewall configurations as specialized programs, FIREMAN employs static analysis techniques to detect misconfigurations such as policy violations, inconsistencies, and inefficiencies in both individual and distributed firewalls. FIREMAN performs symbolic model checking on firewall configurations for all possible IP packets and along all possible data paths. The finite state nature of firewall configurations ensures that FIREMAN is both sound and complete. FIREMAN is implemented using binary decision diagrams (BDDs), which have proven effective in hardware verification and model checking. We have tested FIREMAN and successfully uncovered several real-world misconfigurations in enterprise networks, some of which have been confirmed and corrected by network administrators.

## 1. Introduction
Firewalls are widely deployed to enhance the security of enterprise networks. Configuring a firewall, however, is a complex and error-prone task, even for experienced administrators. Misconfigurations in firewalls are common and can be severe. In 2004, Wool [31] examined 37 firewalls in production enterprise networks and found that all were misconfigured and vulnerable, with multiple misconfigurations in all but one. The Firewall Wizards Security Mailing List [15] has also documented many real-world firewall misconfigurations. The widespread and prolonged spread of worms like Blaster and Sapphire demonstrated that many firewalls were misconfigured, as well-configured firewalls could have easily blocked them [31].

The following example illustrates how easily firewall misconfigurations can occur:
```plaintext
accept tcp 192.168.0.0/16 any
deny tcp 192.168.1.0/24 any 3127
```
The second rule is intended to deny all outbound traffic to a known backdoor TCP port for the MyDoom.A worm. However, if the firewall processes rules sequentially and accepts or rejects a packet as soon as it matches a rule, the first rule, which accepts all outbound traffic from the local network 192.168.0.0/16, will shadow the second rule, leaving the backdoor open.

Correctly configuring firewall rules is challenging. Chapman [6] discussed many issues that make secure packet filtering difficult. Some, like the omission of port numbers in filtering rules, have been addressed by firewall vendors, but many others remain unsolved. Firewall rules are written in platform-specific, low-level languages, making it hard to analyze whether these rules accurately implement a network's high-level security policies. Analyzing interactions among a large number of rules is particularly difficult. Additionally, in large enterprises, dynamic routing can cause a packet from the same source to the same destination to be examined by different sets of firewalls at different times, further complicating the task of ensuring end-to-end security policies.

We propose using static analysis to discover firewall misconfigurations. Static analysis has been successfully applied to find security and reliability bugs in large programs [7, 11], where it examines control and data flow to determine if a program satisfies user-specified properties without running the program. Since a firewall configuration is a specialized program, applying static analysis is natural. Compared to testing, static analysis offers three major advantages: (1) it can proactively discover and remove serious vulnerabilities before deployment; (2) it can exhaustively examine every path in the firewall, discovering all instances of known types of misconfigurations; (3) in complex network topologies with dynamic routing, static analysis can uncover vulnerabilities resulting from interactions among multiple firewalls without needing to configure routers.

Testing has been proposed to discover firewall misconfigurations [3, 21, 27, 30], where a tool generates packets and checks if the firewall processes them as intended. However, due to the vast address space of packets, testing all possible packets is impractical. Al-Shaer and Hamed [1, 2] describe common pairwise inconsistencies in firewall rules and propose an algorithm to detect them. Our work is inspired by their approach, but our tool can detect a broader range of misconfigurations, including inconsistencies and inefficiencies among multiple rules, security policy violations, and misconfigurations due to interactions among multiple firewalls. To the best of our knowledge, our work is the first to apply rigorous static analysis techniques to real firewalls and to have found real misconfigurations.

We have implemented our approach in the tool FIREMAN — Firewall Modeling and Analysis. FIREMAN discovers two classes of misconfigurations: (1) violations of user-specified security policies, such as allowing incoming packets to reach the TCP port 80 on an internal host, which violates the security policies of most networks; (2) inconsistencies and inefficiencies among firewall rules, which indicate errors or warnings regardless of the security policies, such as a rule intended to reject a packet being shadowed by a preceding rule that accepts the packet. FIREMAN can identify problems in both individual and distributed sets of firewalls that collectively violate a security policy.

Our major contributions are:
1. A comprehensive classification of firewall misconfigurations for both single and distributed firewalls (Section 3).
2. A static analysis algorithm to examine firewall rules for policy violations and inconsistencies at different levels: intra-firewall, inter-firewall, and cross-path (Section 4).
3. An implementation of our algorithm in the tool FIREMAN based on binary decision diagrams (BDDs). Using FIREMAN, we have discovered previously unknown misconfigurations in production firewalls (Section 5).

The rest of this paper is organized as follows. Section 2 describes the operational model of firewalls, laying the foundation for static analysis and error detection. Section 3 classifies misconfigurations into policy violations, inconsistencies, and inefficiencies. Section 4 presents our static analysis algorithm for checking firewall misconfigurations. Section 5 describes our implementation and evaluation of FIREMAN, and the previously unknown misconfigurations that FIREMAN discovered in production firewalls. Section 6 reviews related work, and Section 7 concludes the paper.

## 2. Modeling Firewalls

### 2.1. Models for Individual Firewalls
Each Access Control List (ACL) consists of a list of rules. Firewalls from different vendors vary in terms of configuration languages, rule organization, and interaction between lists or chains. However, a firewall generally has a few interfaces and can be configured with several ACLs. Both the ingress and egress of an interface can be associated with an ACL. If an ACL is associated with the ingress, filtering is performed when packets arrive at the interface. Similarly, if an ACL is associated with the egress, filtering is performed before packets leave the interface.

Individual rules can be interpreted in the form \((P, \text{action})\), where \(P\) is a predicate describing what packets are matched by the rule, and \(\text{action}\) describes the corresponding action performed on the matched packets. Packets not matched by the current rule are forwarded to the next rule until a match is found or the end of the ACL is reached. At the end of an ACL, the default action is applied, similar to an "if-elif-else" construct in programming languages.

Implicit rules vary across different firewall products. For example, on Cisco PIX firewalls and routers, the implicit rule at the end of an ACL denies everything. On Linux Netfilter, the implicit rule is defined by the policy of the chain.

What we have described is the "first-matching" ACL. Some firewalls, like the BSD Packet Filter, use last-matching ACLs, where the decision applied to a packet is determined by the last matched rule. An ACL using last-matching can be converted to first-matching by reordering. In this paper, we assume every ACL uses first-matching.

Traditional stateless firewalls treat each packet in isolation and check every packet against the ACL, which is computationally intensive and often a performance bottleneck. Modern stateful firewalls monitor the TCP 3-way handshake and build an entry in the state table. If the firewall matches a packet to an established flow, it can accept it without checking the ACL, significantly reducing the computational overhead. However, the ACLs still determine whether a state can be established initially, so correct ACL configuration is crucial even for stateful firewalls.

| Format | Action for Matched Packets |
| --- | --- |
| \((P, \text{accept})\) | Accept the packet |
| \((P, \text{deny})\) | Deny the packet |
| \((P, \text{chain Y})\) | Go to user-defined chain “Y” |
| \((P, \text{return})\) | Resume calling chain |

Depending on the available actions and rule execution logic, we classify firewalls into two models: (1) the simple list model, represented by Cisco PIX firewalls and router ACLs, and (2) the complex chain model, represented by Linux Netfilter. Simple list model firewalls only allow "accept" and "deny" actions. The complex chain model supports additional actions like calling another user-defined chain or "return." We use rule graphs to model the control flow of ACLs. The rule graph for simple list model ACLs is just the list itself, while the rule graphs for complex chain model ACLs are similar to control-flow graphs in programming languages.

#### 2.1.1. Simple List Model
Figure 1a shows the simple list model of an ACL. Only "accept" or "deny" actions (the first two forms in Table 1) are allowed. Any packet traverses the list in order until a decision is made. An implicit rule at the end of the list matches the remaining packets and applies the default action. We make the implicit rule explicit by appending it to the end of the list.

#### 2.1.2. Complex Chain Model
The Linux-based firewall implementation, Netfilter [29], has a more complex grammar for rules, which can take any of the four forms shown in Table 1. In addition to "accept" or "deny," the action field can call another user-defined chain for further processing. The user-defined chain can "return" to the next rule of the calling chain. This feature, similar to function calls in programming languages, facilitates reusable configurations and improves firewall efficiency.

Figure 1b shows a typical firewall using the chain-based model. The built-in chain "X," the starting point, can call a user-defined chain "Y" for further processing. Chain "Y" can either explicitly return to the calling chain "X" when a certain predicate is satisfied or when the end of chain "Y" is reached. Other chains may also call chain "Y."

### 2.2. Network of Firewalls
In a typical network environment, multiple firewalls are often deployed in a distributed fashion. Although firewalls are configured independently, the network's end-to-end security behavior depends on the correct configuration of all related firewalls. "End-to-end security behavior" refers to the decision on whether a packet should be allowed to reach a protected network, such as from one side of a Virtual Private Network (VPN) to another, or from the untrusted Internet to the trusted secured intranet.

Consider Figure 2. An enterprise network is connected to the Internet through two different ISPs, with firewalls W and X deployed to guard the Demilitarized Zone (DMZ). Services like Web and email, which must allow public access, are more vulnerable and are typically placed in the DMZ. Further inside, the internal network is guarded by additional firewalls Y and Z, which generally have tighter security policies. Important applications and sensitive data are often stored in this internal network.

[Figure 2: Example Network Topology]

---

This optimized version of the text aims to improve clarity, coherence, and professionalism, making it more suitable for an academic or technical audience.