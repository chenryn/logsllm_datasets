title:FIREMAN: A Toolkit for FIREwall Modeling and ANalysis
author:Lihua Yuan and
Jianning Mai and
Zhendong Su and
Hao Chen and
Chen-Nee Chuah and
Prasant Mohapatra
FIREMAN: A Toolkit for FIREwall Modeling and ANalysis
Lihua Yuan
PI:EMAIL
Hao Chen
Jianning Mai
PI:EMAIL
Chen-Nee Chuah
Zhendong Su
PI:EMAIL
Prasant Mohapatra
PI:EMAIL
PI:EMAIL
PI:EMAIL
University of California, Davis
Abstract
Security concerns are becoming increasingly critical in
networked systems. Firewalls provide important defense for
network security. However, misconﬁgurations in ﬁrewalls
are very common and signiﬁcantly weaken the desired se-
curity. This paper introduces FIREMAN, a static analysis
toolkit for ﬁrewall modeling and analysis. By treating ﬁre-
wall conﬁgurations as specialized programs, FIREMAN ap-
plies static analysis techniques to check misconﬁgurations,
such as policy violations, inconsistencies, and inefﬁcien-
cies, in individual ﬁrewalls as well as among distributed
ﬁrewalls. FIREMAN performs symbolic model checking of
the ﬁrewall conﬁgurations for all possible IP packets and
along all possible data paths. It is both sound and complete
because of the ﬁnite state nature of ﬁrewall conﬁgurations.
FIREMAN is implemented by modeling ﬁrewall rules using
binary decision diagrams (BDDs), which have been used
successfully in hardware veriﬁcation and model checking.
We have experimented with FIREMAN and used it to un-
cover several real misconﬁgurations in enterprise networks,
some of which have been subsequently conﬁrmed and cor-
rected by the administrators of these networks.
1. Introduction
Firewall is a widely deployed mechanism for improving
the security of enterprise networks. However, conﬁguring
a ﬁrewall is daunting and error-prone even for an experi-
enced administrator. As a result, misconﬁgurations in ﬁre-
walls are common and serious. In examining 37 ﬁrewalls in
production enterprise networks in 2004, Wool found that
all the ﬁrewalls were misconﬁgured and vulnerable, and
that all but one ﬁrewall were misconﬁgured at multiple
places [31]. As another evidence, Firewall Wizards Secu-
rity Mailing List [15] has discussed many real ﬁrewall mis-
conﬁgurations. The wide and prolonged spread of worms,
such as Blaster and Sapphire, demonstrated that many ﬁre-
walls were misconﬁgured, because “well-conﬁgured ﬁre-
walls could have easily blocked them” [31].
The following script illustrates how easily ﬁrewall mis-
conﬁgurations can happen:
accept tcp 192.168.0.0/16 any
deny tcp 192.168.1.0/24 any 3127
The second rule is conﬁgured to deny all the outbound traf-
ﬁc to a known backdoor TCP port for the MyDoom.A worm,
and is correct by itself. However, if a ﬁrewall examines
each rule sequentially and accepts (or rejects) a packet im-
mediately when the packet is matched to a rule, a preced-
ing rule may shadow subsequent rules matching some com-
mon packets. The ﬁrst rule, which accepts all the outbound
trafﬁc from the local network 192.168.0.0/16, shadows the
second rule and leaves the hole wide open.
Correctly conﬁguring ﬁrewall rules has never been an
easy task. In 1992, Chapman [6] discussed many problems
that make securely conﬁguring packet ﬁltering a daunting
task. Some of them, e.g., omission of port numbers in
ﬁltering rules, have been addressed by ﬁrewall vendors.
However, many others are yet to be addressed successfully.
Since ﬁrewall rules are written in platform-speciﬁc, low-
level languages, it is difﬁcult to analyze whether these rules
have implemented a network’s high-level security policies
accurately. Particularly, it is difﬁcult to analyze the inter-
actions among a large number of rules. Moreover, when
large enterprises deploy ﬁrewalls on multiple network com-
ponents, due to dynamic routing, a packet from the same
source to the same destination may be examined by a dif-
ferent set of ﬁrewalls at different times.
It is even more
difﬁcult to reason whether all these sets of ﬁrewalls satisfy
the end-to-end security policies of the enterprise.
We propose to use static analysis to discover ﬁrewall
misconﬁgurations. Static analysis has been applied success-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
fully to discover security and reliability bugs in large pro-
grams [7,11], where it examines the control-ﬂow and/or the
data-ﬂow to determine if a program satisﬁes user-speciﬁed
properties without running the program. A ﬁrewall conﬁg-
uration is a specialized program, so it is natural to apply
static analysis to check ﬁrewall rules. Compared to test-
ing, static analysis has three major advantages: (1) it can
proactively discover and remove serious vulnerabilities be-
fore ﬁrewalls are deployed; (2) it can discover all the in-
stances of many known types of misconﬁgurations, because
it can exhaustively examine every path in the ﬁrewall efﬁ-
ciently; (3) when multiple ﬁrewalls are deployed in a com-
plex network topology and are subject to dynamic routing
conﬁgurations, static analysis can discover vulnerabilities
resulting from the interaction among these ﬁrewalls with-
out the need to conﬁgure these routers.
Testing has been proposed to discover ﬁrewall miscon-
ﬁgurations [3, 21, 27, 30], where a tool generates packets
and examines whether a ﬁrewall processes these packets
as intended. However, due to the enormous address space
of packets, one cannot test all possible packets practically.
Al-Shaer and Hamed describe common pairwise inconsis-
tencies in ﬁrewall rules and propose an algorithm to detect
these inconsistencise [1, 2]. Our work is inspired by them,
but our tool can detect a much wider class of misconﬁg-
urations, such as inconsistencies and inefﬁciencies among
multiple rules and security policy violations, and miscon-
ﬁgurations due to the interaction among multiple ﬁrewalls.
To the best of our knowledge, our work is the ﬁrst to apply
rigorous static analysis techniques to real ﬁrewalls and to
have found real misconﬁgurations.
We have implemented our approach in the tool FIRE-
MAN — FIREwall Modeling and ANalysis. FIREMAN
discovers two classes of misconﬁgurations: (1) violations
of user-speciﬁed security policies — For example, allow-
ing incoming packets to reach the TCP port 80 on an in-
ternal host violates the security policies of most networks;
(2) inconsistencies and inefﬁciency among ﬁrewall rules,
which indicate errors or warnings regardless of the security
policies — For example, a rule intended to reject a packet
is shadowed by a preceding rule that accepts the packet.
FIREMAN can discover problems not only in individual
ﬁrewalls but also in a distributed set of ﬁrewalls that col-
lectively violate a security policy.
We summarize our major contributions as follows:
1. We give a comprehensive classiﬁcation of ﬁrewall mis-
conﬁgurations for both single ﬁrewalls and distributed
ﬁrewalls (Section 3);
2. We present a static analysis algorithm to examine ﬁre-
wall rules for policy violations and inconsistencies
at different levels:
intra-ﬁrewall, inter-ﬁrewall, and
cross-path (Section 4);
3. We provide an implementation of our algorithm in the
tool FIREMAN based on binary decision diagrams
(BDDs). Using FIREMAN, we have discovered pre-
viously unknown misconﬁgurations in production ﬁre-
walls. (Section 5)
The rest of this paper is organized as follows. Section 2
describes the operational model of ﬁrewalls, which lays the
foundation for static analysis and error detection. Section 3
classiﬁes misconﬁgurations into policy violations, incon-
sistencies, and inefﬁciencies. Section 4 presents our static
analysis algorithm for checking ﬁrewall misconﬁgurations.
Section 5 describes our implementation and evaluation of
FIREMAN, and the previously unknown misconﬁgurations
that FIREMAN discovered in production ﬁrewalls. Sec-
tion 6 reviews related work and Section 7 concludes this
paper.
2. Modeling Firewalls
2.1. Models for Individual Firewalls
Each ACL consists of a list of rules.
Firewalls from different vendors may vary signiﬁcantly
in terms of conﬁguration languages, rule organizations and
interaction between lists or chains. However, a ﬁrewall gen-
erally consists of a few interfaces and can be conﬁgured
with several access control lists (ACLs). Both the ingress
and egress of an interface can be associated with an ACL.
If an ACL is associated to the ingress, ﬁltering is performed
when packets arrive at the interface. Similarly, if an ACL is
associated to the egress, ﬁltering will be performed before
packets leave the interface.
Individual rules
can be interpreted in the form (cid:2)P, action(cid:3), where P is a
predicate describing what packets are matched by this rule
and action describing the corresponding action performed
on the matched packets. Packets not matched by the cur-
rent rule will be forwarded to the next rule until a match is
found or the end of the ACL is reached. At the end of an
ACL, the default action will be applied. This is similar to
an “if-elif-else” construct in most programming languages.
Implicit rules vary on different ﬁrewall products. On Cisco
PIX ﬁrewall and routers, the implicit rule at the end of an
ACL denies everything. On Linux Netﬁlter, the implicit rule
is deﬁned by the policy of the chain.
Note that what we have described is the so-called “ﬁrst-
matching” ACLs. Some ﬁrewalls e.g. BSD Packet Filter,
use last-matching ACLs, in which the decision applied to
a packet is determined by the last matched rule. An ACL
using last-matching can be converted to ﬁrst-matching form
by re-ordering. In this paper, we assume every ACL uses
ﬁrst-matching.
Traditional stateless ﬁrewalls treat each packet in isola-
tion and check every packet against the ACL, which is com-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
putation intensive and often the performance bottleneck.
Modern stateful ﬁrewalls can monitor TCP 3-way hand-
shake and build an entry in the state table. If the ﬁrewall
matches a packet to an ESTABLISHED ﬂow, it can accept
it without checking the ACL, thus signiﬁcantly reduce the
computation overhead. However, the ACLs still determine
whether a state can be established in the ﬁrst place. There-
fore, the correct conﬁguration of ACLs is important even
for stateful ﬁrewalls.
Format
(cid:2)P, accept(cid:3)
(cid:2)P, deny(cid:3)
(cid:2)P, chain Y(cid:3)
(cid:2)P, return(cid:3)
Action for Matched Packets
accept the packet
deny the packet
goto user chain “Y”
resume calling chain
Table 1: Firewall rule formats.
Depending on the available “actions” and rule execution
logic, we classify ﬁrewalls into two typical models: (1) the
simple list model, which is represented by Cisco PIX ﬁre-
wall and router ACLs and (2) the complex chain model,
which is represented by Linux Netﬁlter. Firewalls using
the simple list model allow only “accept” and “deny” ac-
tions. The complex chain model, in addition to “accept”
and “deny”, also supports calling upon another user-deﬁned
chain or “return.” We use rule graphs to model the control-
ﬂow of ACLs. As can be seen in Section 4.1, the rule graph
of ACLs using the simple list model is just itself. The rule
graphs for ACLs using the complex chain model are similar
to control-ﬂow graphs in programming languages.
start
Input I
User-Chain Y
Built-In Chain X
end
implicit drop all
policy action
Simple
(a)
Model
List
(b) Complex Chain Model
Figure 1: Model of individual ﬁrewalls.
2.1.1 Simple List Model
Figure 1a depicts the simple list model of an ACL. Since
only “accept” or “deny” actions (ﬁrst two forms shown in
Table 1) are allowed, any packet will traverse the list in or-
der until a decision is made on each packet. An implicit
rule at the end of the list will match the rest of the packets
and apply the default action to these remaining packets. We
make the implicit rule explicit by appending them to the end
of the list.
2.1.2 Complex Chain Model
The Linux-based ﬁrewall implementation, Netﬁlter [29],
has a more complicated grammar for the rules, which may
take any of the four forms shown in Table 1. In addition to
“accept” or “deny,” the action ﬁeld can call upon another
user-deﬁned chain for further processing. The user-deﬁned
chain can also choose to “return” to the next rule of the
calling chain. One can view the action of calling a user-
deﬁned chain as a function call and the corresponding “re-
turn” as a function return. This feature, similar to the use
of functions in programming languages, facilitates reusable
conﬁgurations and improves ﬁrewall efﬁciency.
Figure 1b depicts a typical ﬁrewall using the chain-based
model. The built-in chain “X”, which is the starting point,
can call upon a user-deﬁned chain “Y” for further process-
ing. Chain “Y” can either explicitly return to the calling
chain “X” when certain predicate is satisﬁed or the end of
chain “Y” is reached. Other chains may call chain “Y” as
well.
2.2. Network of Firewalls
In a typical network environment, multiple ﬁrewalls are
often deployed across the network in a distributed fashion.
Although ﬁrewalls are conﬁgured independently, a network
depends on the correct conﬁguration of all related ﬁrewalls
to achieve the desired end-to-end security behavior. By
“end-to-end security behavior,” we refer to the decision on
whether a packet should be allowed to reach a protected net-
work. It can be from one side of a Virtual Private Network
(VPN) to another side of the VPN. It can also be from the
untrusted Internet to the trusted secured intranet.
Take Figure 2 for example. An enterprise network is con-
nected to the Internet through two different ISPs and ﬁre-
walls W and X are deployed to guard the Demilitarized
Zone (DMZ). Services such as Web and email that must
allow public access are more vulnerable (hence less trust-
worthy) and normally put in the DMZ. Further inside, the
internal network is guarded by additional ﬁrewalls Y and
Z. In general, ﬁrewalls Y and Z will have a tighter security
policy. Important applications and sensitive data are often
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
Internet
I
S
P
A
W0
eth0
W
eth1
I
S
P
B
X1
DMZ
eth0
X0
eth1
X