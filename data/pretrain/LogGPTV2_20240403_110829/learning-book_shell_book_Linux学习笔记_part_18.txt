Linux 2.6.18-164.el5 (server.sys.com)
01/04/2010
10:17:44 PM CPU
%user
%nice
%sys %iowait
%irq
%soft %steal
%idle
intr/s
10:17:44 PM all
L0°0
0.02
0.26
0.21
0.01
0.05
0.00
99.37
1005.20
[root@server ≈]# mpstat 3 10
Linux 2.6.18-164.el5 (server.sys.com)
01/04/2010
10:17:55 PM CPU
%user
%nice
%sys %iowait
%irq
%soft %steal
%idle
intr/s
10:17:58 PM all
13.12
0.00
20.93
0.00
1.83
9.80
0.00
54.32
2488.08
10:18:01 PM all
10.82
0.00
19.30
0.83
1.83
9.32
0.00
57.90
2449.83
10:18:04 PM all
10.95
0.00
20.40
0.17
1.99
8.62
0.00
57.88
2384.05
10:18:07 PM all
10.47
0.00
18.11
0.00
1.50
8.47
0.00
61.46
2416.00
10:18:10 PM all
11.81
0.00
22.63
0.00
1.83
11.98
0.00
51.75
2210.60
10:18:13 PM all
6.31
0.00
10.80
0.00
1.00
5.32
0.00
76.58
1795.33
10:18:19 PM all
1.75
0.00
3.16
0.75
0.25
1.25
0.00
92.85
1245.18
10:18:22 PM all
11.94
0.00
19.07
0.00
1.99
8.29
0.00
58.71
2630.46
10:18:25 PM all
11.65
0.00
19.30
0.50
2.00
9.15
0.00
57.40
2673.91
10:18:28 PM all
11.44
0.00
21.06
0.33
1.99
10.61
0.00
54.56
2369.87
---
## Page 82
Average:
all
9.27
0.00
16.18
0.30
1.50
7.64
0.0065.112173.54
[root@server ~]#
上两表显示出当要正确反映系统的情况，需要正确使用命令的参数。vmstat和iostat也需要注意这一
问题。
6、pmap
pmap命令可以显示进程的内存映射，使用这个命令可以找出造成内存瓶颈的原因。
# pmap -d PID
显示PID为47394进程的内存信息。
# pmap -d 47394
输出样例：
47394:
/usr/bin/php-cgi
Address
Kbytes Mode Offset
Device
Suddew
0000000000400000
2584 r-x-- 0000000000000000 008:00002 php-cgi
0000000000886000
140 rw-- 000000000286000 008:00002 php-cgi
00000000008a9000
52 rw-- 00000000008a9000 000:00000 [ anon ]
0000000000aa8000
76 rw- 00000000002a8000 008:00002 php-cgi
000000000f678000
1980 rw--- 00000000f678000 000:00000
[anon ]
000000314a600000
112 r-x-- 0000000000000000 008:00002 Id-2.5.s0
000000314a81b000
4 r- 000000000001b000 008:00002 Id-2.5.s0
000000314a81c000
4 rw-- 000000000001c000 008:00002 Id-2.5.s0
000000314aa00000
1328 r-x-- 0000000000000000 008:00002 libc-2.5.s0
000000314ab4c000
2048 ---- 000000000014c000 008:00002 libc-2.5.so
00002af8d48fd000
4 rw-- 0000000000006000 008:00002 xsl.so
00002af8d490c000
40 r-x-- 0000000000000000 008:00002 libnss_files-2.5.s0
00002af8d4916000
2044 -- 000000000000a000 008:00002 libnss_files-2.5.s0
00002af8d4b15000
4 r-- 0000000000009000 008:00002 libnss_files-2.5.so
00002af8d4b16000
4 rw-- 000000000000a000 008:00002 libnss_files-2.5.so
00002af8d4b17000768000 rw-s 0000000000000000:00009zero (deleted)
00007fffc95fe000
84 rw-- 00007ffffea000 000:00000 [ stack ]
ffffffff600000
8192
- 000000000000000 000:00000  [ anon ]
mapped: 933712K
writeable/private: 4304K
shared: 768000K
最后一行非常重要：
*mapped:933712K内存映射所占空间大小
*writeable/private:4304K私有地址空间大小
*shared:768000k共享地址空间大小
7、sar
sar是一个优秀的一般性能监视工具，它可以输出Linux所完成的几乎所有工作的数据。sar命令在
sysetatrpm中提供。示例中使用 sysstat版本5.0.5，这是稳定的最新版本之一，关于版本和下载信息，
请访间 sysstat 主页 http://perso.wanadoo.fr/sebastien.godard/。
sar可以显示CPU、运行队列、磁盘I/O、分页（交换区）、内存、CPU中断、网络等性能数据。最重要
的 sar功能是创建数据文件。每一个Linux系统都应该通过cron工作收集sar数据。该sar数据文件为
---
## Page 83
系统管理员提供历史性能信息。这个功能非常重要，它将sar和其他性能工具区分开。如果一个夜晚批
处理工作正常运行两次，直到下一个早上才会发现这种情况（除非被叫醒）。我们需要具备研究12小时
以前的性能数据的能力。sar数据收集器提供了这种能力。
sar命令行的常用格式：
sar [options] [-A] [-o file] t [n]
在命令行中，n和t两个参数组合起来定义采样间隔和次数，t为采样间隔，是必须有的参数，n
为采样次数，是可选的，默认值是1，-o仙e表示将命令结果以二进制格式存放在文件中，f仙e在此处
不是关键字，是文件名。options为命令行选项，sar命令的选项很多，下面只列出常用选项：
-A：所有报告的总和。
-U:CPU利用率
-V：进程、1节点、文件和锁表状态。
-d：硬盘使用报告。
-r：没有使用的内存页面和硬盘块。
g：串口V/o的情况。
-b：缓冲区使用情况。
-a：文件读写情况。
-C：系统调用情况。
-R：进程的活动情况。
Y：终端设备活动情况。
-W：系统交换活动。
7.1、CPU统计数据
sar-u输出显示CPU信息。-u选项是sar的默认选项。该输出以百分比显示CPU的使用情况。表3-2
解释该输出。
表3-2
sar-u字段
字段
说明
CPU
CPU编号
%user
CPU花费在用户进程（如应用程序、Shell脚本或与
该用户进行的交互）上的时间的百分比。
%nice
运行正常进程所花的时间
%system
在内核模式（系统）中运行进程所花的时间，也就是
CPU用来执行核心任务的时间的百分比。
%iowait
没有进程在该CPU上执行时，处理器等待V/O完成的
时间
%idle
没有进程在该CPU上执行的时间
这些看起来应该比较熟悉，它和top报告中的CPU信息内容相同。以下显示输出格式：
[oracle@Test ~]$ sar -u -o aixi 60 5
Linux 2.6.18-194.el5 (Test.linux.com)
06/22/10
13:41:25
CPU
%user
%nice
%system
%iowait
%steal
%idle
13:42:25
all
0.28
0.00
0.21
1.17
0.00
98.34
13:43:25
all
0.23
0.00
0.16
1.14
0.00
98.46
---
## Page 84
13:44:25
all
0.27
0.00
0.21
1.40