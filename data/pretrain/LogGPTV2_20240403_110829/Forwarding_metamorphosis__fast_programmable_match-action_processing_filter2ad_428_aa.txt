title:Forwarding metamorphosis: fast programmable match-action processing
in hardware for SDN
author:Pat Bosshart and
Glen Gibb and
Hun-Seok Kim and
George Varghese and
Nick McKeown and
Martin Izzard and
Fernando A. Mujica and
Mark Horowitz
Forwarding Metamorphosis: Fast Programmable
Match-Action Processing in Hardware for SDN
Pat Bosshart†, Glen Gibb‡, Hun-Seok Kim†, George Varghese§, Nick McKeown‡,
Martin Izzard†, Fernando Mujica†, Mark Horowitz‡
†Texas Instruments ‡Stanford University §Microsoft Research
PI:EMAIL {grg, nickm, horowitz}@stanford.edu
PI:EMAIL {hkim, izzard, fmujica}@ti.com
ABSTRACT
In Software Deﬁned Networking (SDN) the control plane
is physically separate from the forwarding plane. Control
software programs the forwarding plane (e.g., switches and
routers) using an open interface, such as OpenFlow. This
paper aims to overcomes two limitations in current switch-
ing chips and the OpenFlow protocol: i) current hardware
switches are quite rigid, allowing “Match-Action” processing
on only a ﬁxed set of ﬁelds, and ii) the OpenFlow speciﬁ-
cation only deﬁnes a limited repertoire of packet processing
actions. We propose the RMT (reconﬁgurable match ta-
bles) model, a new RISC-inspired pipelined architecture for
switching chips, and we identify the essential minimal set
of action primitives to specify how headers are processed in
hardware. RMT allows the forwarding plane to be changed
in the ﬁeld without modifying hardware. As in OpenFlow,
the programmer can specify multiple match tables of arbi-
trary width and depth, subject only to an overall resource
limit, with each table conﬁgurable for matching on arbitrary
ﬁelds. However, RMT allows the programmer to modify all
header ﬁelds much more comprehensively than in OpenFlow.
Our paper describes the design of a 64 port by 10 Gb/s
switch chip implementing the RMT model. Our concrete
design demonstrates, contrary to concerns within the com-
munity, that ﬂexible OpenFlow hardware switch implemen-
tations are feasible at almost no additional cost or power.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network
Architecture and Design—Network Communications
General Terms
Design
Keywords
RMT model, Reconﬁgurable Match Tables, SDN
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM’13, August 12–16, 2013, Hong Kong, China.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
Copyright 2013 ACM 978-1-4503-2056-6/13/08 ...$15.00.
1.
INTRODUCTION
To improve is to change; to be perfect is to change
often.
— Churchill
Good abstractions—such as virtual memory and time-
sharing—are paramount in computer systems because they
allow systems to deal with change and allow simplicity of
programming at the next higher layer. Networking has pro-
gressed because of key abstractions: TCP provides the ab-
straction of connected queues between endpoints, and IP
provides a simple datagram abstraction from an endpoint to
the network edge. However, routing and forwarding within
the network remain a confusing conglomerate of routing pro-
tocols (e.g., BGP, ICMP, MPLS) and forwarding behaviors
(e.g., routers, bridges, ﬁrewalls), and the control and for-
warding planes remain intertwined inside closed, vertically
integrated boxes.
Software-deﬁned networking (SDN) took a key step in ab-
stracting network functions by separating the roles of the
control and forwarding planes via an open interface between
them (e.g., OpenFlow [27]). The control plane is lifted up
and out of the switch, placing it in external software. This
programmatic control of the forwarding plane allows net-
work owners to add new functionality to their network, while
replicating the behavior of existing protocols. OpenFlow has
become quite well-known as an interface between the con-
trol plane and the forwarding plane based on the approach
known as “Match-Action”. Roughly, a subset of packet bytes
are matched against a table; the matched entry speciﬁes a
corresponding action(s) that are applied to the packet.
One can imagine implementing Match-Action in software
on a general purpose CPU. But for the speeds we are in-
terested in—about 1 Tb/s today—we need the parallelism
of dedicated hardware. Switching chips have remained two
orders of magnitude faster at switching than CPUs for a
decade, and an order of magnitude faster than network pro-
cessors, and the trend is unlikely to change. We therefore
need to think through how to implement Match-Action in
hardware to exploit pipelining and parallelism, while living
within the constraints of on-chip table memories.
There is a natural tradeoﬀ between programmability and
speed. Today, supporting new features frequently requires
replacing the hardware. If Match-Action hardware permit-
ted (just) enough reconﬁguration in the ﬁeld so that new
types of packet processing could be supported at run-time,
then it would change how we think of programming the net-
work. The real question here is whether it can be done at
reasonable cost without sacriﬁcing speed.
Single Match Table: The simplest approach is to ab-
stract matching semantics in what we call the SMT (Single
Match Table) model. In SMT, the controller tells the switch
to match any set of packet header ﬁelds against entries in
a single match table. SMT assumes that a parser locates
and extracts the correct header ﬁelds to match against the
table. For example, an Ethernet packet may have an op-
tional MPLS tag, which means the IP header can be in two
diﬀerent locations. The match is a binary exact match when
all ﬁelds are completely speciﬁed, and is ternary for matches
where some bits are switched oﬀ (wildcard entries). Super-
ﬁcially, the SMT abstraction is good for both programmers
(what could be simpler than a single match?) and imple-
menters (SMT can be implemented using a wide Ternary
Content Addressable Memory (TCAM)). Note that the for-
warding data plane abstraction has the most rigorous hard-
ware implementation constraints because forwarding is often
required to operate at about 1 Tb/s.
A closer look, however, shows that the SMT model is
costly in use because of a classic problem. The table needs
to store every combination of headers; this is wasteful if the
header behaviors are orthogonal (the entries will have many
wildcard bits). It can be even more wasteful if one header
match aﬀects another, for example if a match on the ﬁrst
header determines a disjoint set of values to match on the
second header (e.g., in a virtual router [11]), requiring the
table to hold the Cartesian-product of both.
Multiple Match Tables: MMT (Multiple Match Ta-
bles) is a natural reﬁnement of the SMT model. MMT goes
beyond SMT in an important way: it allows multiple smaller
match tables to be matched by a subset of packet ﬁelds. The
match tables are arranged into a pipeline of stages; process-
ing at stage j can be made to depend on processing from
stage i < j by stage i modifying the packet headers or other
information passed to stage j. MMT is easy to implement
using a set of narrower tables in each stage; in fact, it is close
enough to the way existing switch chips are implemented to
make it easy to map onto existing pipelines [3, 14, 23, 28].
Google reports converting their entire private WAN to this
approach using merchant switch chips [13].
The OpenFlow speciﬁcation transitioned to the MMT
model [31] but does not mandate the width, depth, or even
the number of tables, leaving implementors free to choose
their multiple tables as they wish. While a number of ﬁelds
have been standardized (e.g., IP and Ethernet ﬁelds), Open-
Flow allows the introduction of new match ﬁelds through a
user-deﬁned ﬁeld facility.
Existing switch chips implement a small (4–8) number of
tables whose widths, depths, and execution order are set
when the chip is fabricated. But this severely limits ﬂex-
ibility. A chip used for a core router may require a very
large 32-bit IP longest matching table and a small 128 bit
ACL match table; a chip used for an L2 bridge may wish to
have a 48-bit destination MAC address match table and a
second 48-bit source MAC address learning table; an enter-
prise router may wish to have a smaller 32-bit IP preﬁx table
and a much larger ACL table as well as some MAC address
match tables. Fabricating separate chips for each use case is
ineﬃcient, and so merchant switch chips tend to be designed
to support the superset of all common conﬁgurations, with a
set of ﬁxed size tables arranged in a pre-determined pipeline
order. This creates a problem for network owners who want
to tune the table sizes to optimize for their network, or im-
plement new forwarding behaviors beyond those deﬁned by
existing standards.
In practice, MMT often translates to
ﬁxed multiple match tables.
A second subtler problem is that switch chips oﬀer only a
limited repertoire of actions corresponding to common pro-
cessing behaviors, e.g., forwarding, dropping, decrementing
TTLs, pushing VLAN or MPLS headers, and GRE encap-
sulation. And to date, OpenFlow speciﬁes only a subset of
these. This action set is not easily extensible, and is also not
very abstract. A more abstract set of actions would allow
any ﬁeld to be modiﬁed, any state machine associated with
the packet to be updated, and the packet to be forwarded
to an arbitrary set of output ports.
Reconﬁgurable Match Tables: Thus in this paper,
we explore a reﬁnement of the MMT model that we call
RMT (Reconﬁgurable Match Tables). Like MMT, ideal
RMT would allow a set of pipeline stages each with a match
table of arbitrary depth and width. RMT goes beyond MMT
by allowing the data plane to be reconﬁgured in the follow-
ing four ways. First, ﬁeld deﬁnitions can be altered and
new ﬁelds added; second, the number, topology, widths, and
depths of match tables can be speciﬁed, subject only to an
overall resource limit on the number of matched bits; third,
new actions may be deﬁned, such as writing new congestion
ﬁelds; fourth, arbitrarily modiﬁed packets can be placed in
speciﬁed queue(s), for output at any subset of ports, with
a queuing discipline speciﬁed for each queue. This conﬁgu-
ration should be managed by an SDN controller, but we do
not deﬁne the control protocol in this paper.
The beneﬁts of RMT can be seen by considering new pro-
tocols proposed in the last few years, such as PBB [16],
VxLAN [22], NVGRE [19], STT [21], and OTV [20]. Each
protocol deﬁnes new header ﬁelds. Without an architecture
like RMT, new hardware would be required to match on and
process these protocols.
Note that RMT is perfectly compatible with (and even
partly implemented by) the current OpenFlow speciﬁcation.
Individual chips can clearly allow an interface to reconﬁgure
the data plane. In fact, some existing chips, driven at least
in part by the need to address multiple market segments,
already have some ﬂavors of reconﬁgurability that can be
expressed using ad hoc interfaces to the chip.
Many researchers have recognized the need for something
akin to RMT and have advocated for it. For example, the
IETF ForCES working group developed the deﬁnition of a
ﬂexible data plane [17]; similarly, the forwarding abstraction
working group in ONF has worked on reconﬁgurability [30].
However, there has been understandable skepticism that the
RMT model is implementable at very high speeds. Without
a chip to provide an existence proof of RMT, it has seemed
fruitless to standardize the reconﬁguration interface between
the controller and the data plane.
Intuitively, arbitrary reconﬁgurability at terabit speeds
seems an impossible mission. But what restricted form of
reconﬁgurability is feasible at these speeds? Does the re-
stricted reconﬁgurability cover a large enough fraction of
the needs we alluded to earlier? Can one prove feasibility
via working silicon that embodies these ideas? How expen-
sive is such an RMT chip compared to a ﬁxed-table MMT
chip? These are the questions we address in this paper.
General purpose payload processing is not our goal.
SDN/OpenFlow (and our design) aim to identify the essen-
tial minimal set of primitives to process headers in hardware.
Think of it as a minimal instruction set like RISC, designed
to run really fast in heavily pipelined hardware. Our very
ﬂexible design is cost-competitive with ﬁxed designs—i.e.,
ﬂexibility comes at almost no cost.
Paper Contributions: Our paper makes a concrete con-
tribution to the debate of what forwarding abstractions are
practical at high speed, and the extent to which a forwarding
plane can be reconﬁgured by the control plane. Speciﬁcally,
we address the questions above as follows:
1. An architecture for RMT (§2): We describe an RMT
switch architecture that allows deﬁnition of arbitrary head-
ers and header sequences, arbitrary matching of ﬁelds by
an arbitrary number of tables, arbitrary writing of packet
header ﬁelds (but not the packet body), and state update
per packet. Several restrictions are introduced to make the
architecture realizable. We outline how a desired conﬁgu-
ration can be expressed by a parse graph to deﬁne headers,
and a table ﬂow graph to express the match table topology.
2. Use cases (§3): We provide use cases that show how
the RMT model can be conﬁgured to implement forwarding
using Ethernet and IP headers, and support RCP [8].
3. Chip design and cost (§4–5): We show that the spe-
ciﬁc form of reconﬁgurability we advocate is indeed feasi-
ble and describe the implementation of a 640 Gb/s (64 ×
10 Gb/s) switch chip. Our architecture and implementation
study included signiﬁcant detail in logic and circuit design,
ﬂoorplanning and layout, using techniques proven over the