User: 如何使用Docker Compose配置和管理多个容器，例如使用Nginx、PHP-FPM和MySQL搭建Web应用程序？
Assistant: 以下是使用Docker Compose配置和管理多个容器的步骤：

1. 安装Docker和Docker Compose，并在主机上创建一个项目目录。

2. 在该目录中创建一个docker-compose.yml文件，该文件定义了需要启动的每个容器的配置。

3. 在docker-compose.yml文件中使用“services”部分来定义每个容器的配置。在此示例中，我们将使用Nginx、PHP-FPM和 MySQL作为服务：

```
version: '3'
services:
  nginx:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d

  php:
    image: php:fpm
    volumes:
      - ./php:/usr/local/etc/php/conf.d
      - ./www:/var/www/html

  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: example
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:
```

4. 在该目录中创建一个文件夹“nginx”，并在其中创建一个名为“default.conf”的Nginx配置文件，该文件可让Nginx与PHP-FPM进行通信，将请求代理到PHP容器中：

```
server {
  listen 80;
  server_name localhost;
  root /var/www/html;
  index index.php;

  location / {
    try_files $uri $uri/ /index.php?$args;
  }

  location ~ \.php$ {
    fastcgi_pass php:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
  }
}
```

5. 在该目录中创建一个文件夹“php”，并在其中创建一个名为“zzz_custom.ini”的PHP配置文件，该文件可为PHP容器提供自定义设置，例如设置时区和设置包含路径。

```
date.timezone = Asia/Shanghai
include_path = ".:/usr/local/lib/php"
```

6. 在该目录中创建一个文件夹“www”，并在其中创建一个名为“index.php”的PHP文件，该文件可用于测试Web应用程序是否正确运行：

```
<?php
  phpinfo();
?>
```

7. 最后，使用docker-compose命令来启动和管理组合。在项目目录中运行：

```
docker-compose up -d
```

即可启动所有服务。使用-d选项使Docker Compose后台运行容器。

可以使用以下命令检查各容器是否已成功启动：

```
docker-compose ps
```

如果一切成功，那么可以通过在Web浏览器中访问http://localhost来访问Web应用程序。