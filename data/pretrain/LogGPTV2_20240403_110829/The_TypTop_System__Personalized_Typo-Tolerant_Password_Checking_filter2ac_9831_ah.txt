𝑐 ←$ ℰ𝑝𝑘 (S)
𝑐 ←$ 𝒞ℰ
For 𝑗 = 0, . . . , 𝜔 do
W[𝑗] ←$ ℰ𝑝𝑘 (W[𝑗])
W[𝑗] ←$ 𝒞ℰ
𝑠𝑛 ← (𝑝𝑘, 𝑐, T, W, 𝛾)
𝑏′ ←$ 𝒜SH (𝑠𝑛)
Return 𝑏 = 𝑏′
Figure 10: Games used in the proof of Theorem 5.2.
proc. main// 𝐺5 , G6
(𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛) ←$ 𝒯
¯𝑠𝑛 ←$ PChecker[Π](𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛)
parse ¯𝑠𝑛 as (S, T, W, 𝛾)
(𝑝𝑘, 𝑠𝑘) ←$ 𝒦
For 𝑖 = 0, . . . , 𝑡
sa𝑖 ←$ {0, 1}ℓsalt
If sa𝑖 ∈ {sa0, . . . , sa𝑖−1}
bad-sa ← true
sa𝑖 ←$ {0, 1}ℓsalt /{sa0, . . . , sa𝑖−1}
𝑐𝑖 ←$ 𝒞E
T[𝑖] ← (sa𝑖, 𝑐𝑖)
𝑐 ←$ 𝒞ℰ
For 𝑗 = 0, . . . , 𝜔 do
W[𝑗] ←$ 𝒞ℰ
𝑠𝑛 ← (𝑝𝑘, 𝑐, T, W, 𝛾)
𝑏′ ←$ 𝒜SH (𝑠𝑛)
Return 𝑏 = 𝑏′
SH(sa ‖ 𝑤) // 𝐺0, 𝐺1 𝐺2,...,5 , 𝐺6
𝑌 ←$ {0, 1}𝜅
If SH[sa ‖ 𝑤] =⊥
If ∃𝑖 : (sa ‖ 𝑤) = (sa𝑖 ‖ T[𝑖])
Return SH[sa ‖ 𝑤]
SH[sa ‖ 𝑤] ← 𝑌
bad ← true; SH[sa ‖ 𝑤] ← 𝑌
ciphertexts in 𝑠𝑛 are random and independent of the salts and un-
derlying passwords, and so identically distributed to those used by
ℬ1’s RoR oracle). Next, ℬ1 encrypts S and the entries in W under
the public key 𝑝𝑘, and assembles challenge state 𝑠𝑛 accordingly.
Finally ℬ1 passes 𝑠𝑛 to 𝒜′, simulating queries to SH by returning
a random bit string to each fresh query, and at the end of the game
outputs whatever bit 𝒜′ does. Notice that if 𝑏
= 1 and ℬ1 is re-
ceiving real encryptions from the RoR oracle then this perfectly
simulates G2, and if 𝑏
= 1 this perfectly simulates G3. It follows
that,
|Pr [ G2 ⇒ 1 ] − Pr [ G3 ⇒ 1 ]|
ℬ1 ⇒ 1 | 𝑏
(ℬ1, 𝑡).
= |Pr
≤ Advmkror
ℬ1 ⇒ 1 | 𝑏
− Pr
= 1
= 0
(cid:103)
(cid:102)
(cid:103)
(cid:102)
|
′
′
′
′
SE
We can similarly show that the probability that bad is set in G3 is
close to the probability that it is set in G2 via a separate reduction
to the MKROR security of SE. Formally let ℬ2 be an adversary in
game MKRORℬ2
SE,𝑡. ℬ2 constructs the simulated state 𝑠𝑛 as described
above, using its RoR oracle to compute the symmetric encryptions
in the state. However now when ℬ2 passes 𝑠𝑛 to 𝒜′, it watches
the queries 𝒜′ makes to SH. If there exists a query (sa𝑖|| ˜𝑤𝑖) where
𝑖 ∈ [0, 𝑡] such that ˜𝑤𝑖 is equal to the typo corresponding to position
𝑖 in the cache (in which case the flag bad ← true), ℬ2 outputs 1;
(cid:102)
(cid:103)
else it returns 0. By the same argument made above, it follows that,
Pr [ bad = true in G2 ] ≤ Pr [ bad = true in G3 ]
|
= 1
(ℬ2, 𝑡) .
′
ℬ2 ⇒ 1 | 𝑏
≤ Pr [ bad = true in G3 ] + Advmkror
ℬ2 ⇒ 1 | 𝑏
+ |Pr
− Pr
= 0
(cid:102)
(cid:103)
′
SE
·
SE
SE
SE
SE
SE
SE
(cid:33)
(cid:32)
Advmkror
(ℬ, 𝑡) = 1
2 · (Advmkror
(ℬ1, 𝑡) + Advmkror
(ℬ1, 𝑡) + Advmkror
≤ 2 · Advmkror
We may now define a third adversary ℬ in game MKRORℬ,𝑡
SE who
flips a bit and depending on the outcome runs either ℬ1 or ℬ2 and
then outputs the same bit as that adversary. It is easy to see that
(ℬ2, 𝑡)), and so it
Advmkror
follows that
|Pr [ G2 ⇒ 1 ] − Pr [ G3 ⇒ 1 ]| + Pr [ bad = true in G2 ]
≤ 1
2
(ℬ2, 𝑡)
+ Pr [ bad = true in G3 ]
(ℬ, 𝑡) + Pr [ bad = true in G3 ] .
Now we can define a game G4 which replaces all encryptions under
the public-key encryption scheme PKE with random ciphertexts,
where this transition is bounded by a reduction to the ROR security
of PKE. Formally we can define an adversary 𝒞1 in game ROR𝒞1
′ who proceeds as follows: on input 𝑝𝑘, 𝒞1 first
with challenge bit 𝑏
runs (𝑤1, ˜𝑤1, . . . , ˜𝑤𝑛) ←$ 𝒯 , ¯𝑠𝑛 ←$ PChecker[Π](𝑤, ˜𝑤1, . . . , ˜𝑤𝑛).
𝒞1 submits S and the elements in W to its RoR oracle, chooses ran-
dom symmetric ciphertexts and salts, and assembles the final state
including the public key 𝑝𝑘 it was given as part of its challenge. 𝒞1
then passes 𝑠𝑛 to 𝒜′, simulating queries to SH in the natural way,
and at the end of the game outputs whatever bit 𝒜′ does. Notice
= 0 then 𝒞 receives real encryptions and this perfectly
that if 𝑏
(cid:102)
simulates G3; otherwise it perfectly simulates G4. It follows that,
|Pr [ G3 ⇒ 1 ] − Pr [ G4 ⇒ 1 ]|
𝒞1 ⇒ 1 | 𝑏
PKE (𝒞1) .
= |Pr
≤ Advror
𝒞1 ⇒ 1 | 𝑏
− Pr
= 0
= 1
PKE
(cid:103)
(cid:102)
(cid:103)
|
′
′
′
Furthermore, an analogous argument to that made above implies
16
The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
(cid:33)
(cid:32)
≤ 1
2
·
that we can construct an adversary 𝒞2 in the ROR𝒞2
PKE game against
PKE who simulates the final state 𝑠𝑛 using its RoR oracle, passes 𝑠𝑛
to 𝒜′ and outputs 1 if and only if 𝒜′ sets the flag bad by guessing
one of the cached passwords. It follows that,
Pr [ bad = true in G3 ] ≤ Pr [ bad = true in G4 ] + Advror
PKE (𝒞2) .
With this in place, we may again define an adversary 𝒞 in the
ROR𝒞
PKE game against PKEwho randomly chooses to run either 𝒞1
or 𝒞2, and outputs the same bit that they do. It follows that
|Pr [ G3 ⇒ 1 ] − Pr [ G4 ⇒ 1 ]| + Pr [ bad = true in G3 ]
PKE (𝒞1) + Advror
PKE (𝒞2)
Advror
≤ 2 · Advror
PKE (𝒞) + Pr [ bad = true in G4 ] .
+ Pr [ bad = true in G4 ]
Notice that in game G4 all values in the state 𝑠𝑛 given to 𝒜′ are
random and independent of 𝒯 , and so the state 𝑠𝑛 may be perfectly
simulated by an adversary 𝒢 in game OFFGUESS𝒢,𝑞
Π,𝒯 ; we shall now
use a reduction to this game to bound the probability that bad is set
in game G4. 𝒢 generates a public / secret key pair (𝑝𝑘, 𝑠𝑘) ←$ 𝒦,
assembles the remainder of 𝑠𝑛 by choosing the appropriate random
components, and passes 𝑠𝑛 to 𝒜′. Now each time 𝒜′ makes a new
query (sa|| ˜𝑤) to SH such that sa ∈ {sa0, . . . , sa𝑡}, 𝒢 returns a fresh
random string to 𝒜′, and submits a query of the form (𝑖, ˜𝑤) to its
Test oracle. Since by construction all salts are distinct, it follows
(cid:21)
that if 𝒜 makes 𝑞 queries to SH then 𝒢 makes at most 𝑞 queries to
his Test oracle also. Therefore,
(cid:20)
Pr [ bad = true in game G4 ] = Pr
Π,𝒯 ⇒ 1
OFFGUESS𝒢,𝑞
(𝒢, 𝑞) .
≤ Advoffguess
Π,𝒯
In game G5 we return SH to responding truthfully to oracle queries.
Since these values are no longer set during the construction of
challenge state 𝑠𝑛, this does not affect the outcome of the game
and so |Pr [ G4 ⇒ 1 ] = Pr [ G5 ⇒ 1 ]| .
Finally in game G6 we return to sampling salts without replace-
ment. An identical argument to that made previously implies that,
|Pr [ G5 ⇒ 1 ] − Pr [ G6 ⇒ 1 ]| ≤ (𝑡 + 1)2
2ℓsalt+1 .
𝒜′,𝑞
Π,𝒯 with challenge bit 𝑏 = 1.
Now G6 is identical to game OFFDIST
Putting all this together, we conclude that,
Advoffdist
Π,𝒯 (𝒜) ≤ Advoffguess
Π,𝒯
+ 2 · Advrob
SE (ℛ) + 2 · Advror
(𝒢, 𝑞) + 2 · Advmkror
PKE (𝒞) +
(𝑡 + 1)2
2ℓsalt
(ℬ, 𝑡) +
(𝑡 · (𝑛 + 1) + 1)2
SE
2(𝜅−1)
A.4 Proof of Theorem 5.3
Before giving the full proof of Theorem 5.3, we begin by proving a
useful lemma which we will use in subsequent analysis.
Lemma A.1. Let {𝑝1, . . . , 𝑝𝑛} and {𝑥1, . . . , 𝑥𝑛} be sequences of
numbers such that each 𝑝𝑖, 𝑥𝑖 ∈ [0, 1] and 𝑝1 ≥ 𝑝2 ≥ ··· ≥ 𝑝𝑛.
Then
𝑛(cid:88)
𝑖=1
𝑝𝑖 · 𝑥𝑖 ≤ 𝑟(cid:88)
𝑖=1
 𝑛(cid:88)
𝑖=1
 .
𝑝𝑖 where 𝑟 =
𝑥𝑖
𝑖=1 𝑥𝑖
𝑖=1 𝑥𝑖 +
(cid:80)𝑛
Proof: Since 𝑝1 ≥ ··· ≥ 𝑝𝑛, the rearrangement inequality [13] im-
𝑖=1 𝑝𝑖 · 𝑥𝑖 is maximized when the 𝑥𝑖 are such that 𝑥1 ≥
𝑥2 ≥ ··· ≥ 𝑥𝑛, so to upper bound this sum, we reorder them so this
is the case. Notice that since 𝑟 =
𝑖=𝑟+1 𝑥𝑖,
this implies that,
plies that(cid:80)𝑛
𝑥𝑖 ≥ 𝑛(cid:88)
𝑟 − 𝑟(cid:88)
𝑝𝑖 · (1 − 𝑥𝑖) ≥ 𝑝𝑟 · 𝑟(cid:88)
𝑟(cid:88)
𝑝𝑖 · 𝑥𝑖 .
inequality since(cid:80)𝑟
𝑖=1
The first inequality follows since 𝑝1 ≥ ··· ≥ 𝑝𝑟. The second
𝑖=𝑟+1 𝑥𝑖. The final inequality
follows since 𝑝𝑟 ≥ ··· ≥ 𝑝𝑛. Finally rearranging yields,
(cid:107)
≥(cid:80)𝑟
(1 − 𝑥𝑖) ≥ 𝑛(cid:88)
𝑥𝑖 ≥ 𝑛(cid:88)
(cid:106)(cid:80)𝑛
𝑥𝑖 ⇒ 𝑟(cid:88)
(1 − 𝑥𝑖) ≥ 𝑝𝑟 · 𝑛(cid:88)
With this in place, it follows that