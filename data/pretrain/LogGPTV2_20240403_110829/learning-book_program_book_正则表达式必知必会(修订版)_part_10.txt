稍微留意一下就会发现，在这个例子里，模式\d{1，3)\，（最多3
个数字字符、后面跟着一个，）连续出现了3次，它同样可以被表达为一
个重复。下面是这个例子的另一种解决方案：
文本
Pinging hog.forta.com [12.159.46.20e]
with 32 bytes of data:
正则表达式
{{{)
---
## Page 73
7.2子表达式
63
结果
Pinging hog.forta.com [12.159.46.200]
with 32 bytes of data:
分析
这个模式与前面那个有着同样的效果，但我们这次使用了另一种
语法：先用（和）把表达式\d{1，3）\.括起来使它成为一个子表达式，
再用（\d{1，3}\.）{3）把这个子表达式重复了3次（它们对应着IP地
址里的前3组数字），最后面的\d{1，3}用来匹配IP地址里的最后一
组数字。
注意在上面这个例子里，使用（\d（1，3）\.）（4）作为模式是
不妥当的，你能分析出为什么不能用它来解决这个问题吗？
提示为了提高可读性，有不少用户喜欢给表达式的每一个子
表达式都加上括号。比如，把上面邢个例子里的模式写成
（\d{1，3））.）{3}（\d{1，3}）.这种做法在语法上完全成立，
对表达式的实际行为也没有任何不良影响（但视乎具体的正则
表达式实现，这对匹配操作的速度可能会有点儿影响）。
子表达式是一个非常重要的概念，所以我们认为有必要再给大家看
一个例子，它不涉及重复次数问题。在下面的例子里，我们的任务是把
一条用户记录里的年份数字完整地匹配出来：
文本
ID: 042
SEX: M
D0B: 1967 -88 -17
Status: Active
正则表达式
19|20\d(2)
---
## Page 74
64
第7章使用子表达式
结果
ID:042
SEX: M
D08: 1967-08-17
Status: Active
分析
这个例子需要我们构造一个模式去查找一个4位数的年份数字。为了
排除没有实际意义的结果，我们把前两位数字限定为19和20。这个模式
里的|字符是正则表达式语言里的或操作符，19|20将匹配数字序列19或
20.既然如此，模式19|20\d{2}应该匹配以19或20开头的4位数字（19
或20的后面再跟着两位数字）。可是，这个模式的匹配结果与我们的预期
并不相符，它只匹配到了19，随后两位数字没有被匹配到。为什么会这
样？因为操作符是把位于它左边和右边的两个部分都作为一个整体来
看待的，它会把模式19|20\d{2}解释为19或20\d[2}（也就是把\d{2}解
释为以20开头的那个表达式的一部分）。换句话说，它将匹配数字序列19
或以20开头的任意4位数字。最终的结果你们已经看到了，它只匹配到了
19.
这个例子的正确答案是把19|20归为一个子表达式，如下所示：
文本
ID:042
SEX: M
00B:1967 -88 - 17
Status:Active
正则表达式
{z}p\(e|61)
结果
I0:042
SEX: M
D0B:1967-08-17
分析
我们把所有的选项都归纳到了一个子表达式里，这将向表明我们打
---
## Page 75
7.3子表达式的嵌套65
算匹配的是这个子表达式里的选项之一。（19|20）\d{2}正确地匹配到了
1967：当然，以19或20开头的任何一个4位数字都将与这个模式相匹配。
今后（比如，从现在算起100年内），如果需要修改这段代码以包括以21
开头的年份，只要把这个模式改成（19|20|21）\d{2}就可以了。
本章讨论的只是子表达式的用途之一。子表达式还有另外一个非常
重要的用途，我们将在第8章里对之进行讨论。
7.3子表达式的嵌套
子表达式允许嵌套。事实上，子表达式允许多重嵌套，这种嵌套的
层次在理论上没有限制，但在实际工作中还是应该遵循适可而止的原则。
多重嵌套的子表达式可以构造出功能极其强大的正则表达式来，但
那难免会让模式变得难以间读和理解，而这也正是很多人觉得正则表达
式难以学习和掌握的原因之一。这种表面现象掩盖了这样一个事实：绝
大多数嵌套子表达式都没有它们看上去那么复杂。
为了演示嵌套子表达式的用法，我们再去看看刚才那个匹配IP地址的
例子。下面是我们刚才使用的模式（先是一个连续重复3次的子表达式，
然后是最后一组数字）：
正则表达式
(((\{))
这个模式有什么不对的地方吗？从语法上讲，它完全正确。IP地址由
四组数字构成，每组数字由1到3个数字字符构成，它们之间以英文句号
分隔。说这个模式正确，是因为所有合法的IP地址都与之相匹配。但深入
研究一下就会发现，这个模式还可以匹配其他一些东西：说得明白点儿，
不合法的IP地址也能与之相匹配。
IP地址由4个字节构成，IP地址中的4组数字分别对应着那4个字节，
所以IP地址里的每组数字的取值范围也就是单个字节的表示范围，即
0~255。这意味着IP地址里的每一组数字都不能大于255，可是上面那个
模式还能匹配诸如345、700、999之类的数字序列，而这些数字在IP地址
里都是非法的。
---
## Page 76
66第7章使用子表达式
并写出一个匹配结果符合预期的正则表达式很容易，但把不需
要匹配的情况也考虑周全并确保它们都将被排除在匹配结果
以外往往要团难得多。
如果有办法设定各种取值范围的话，事情会简单得多，但可惜的是
正则表达式只是一种工具，而且还是一种不懂数学运算的工具，它们在
匹配字符的时候并不真正关心那些字符到底是什么以及有什么含义。你
的数学能力再好在这里也帮不上忙。
真的没有解决这个问题的办法吗？未必，只要你们能够充分发挥
你们的逻辑思维能力，就能解决与正则表达式有关的任何难题。这里
的基本思路是：在构造一个正则表达式的时候，一定要把你想匹配什
么和你不想匹配什么详尽地定义清楚。下面是一个合法的IP地址里的
各组数字必须且只能符合的规则，我们随后将根据这些规则来构造
个相应的模式。
口任何一个1位或2位数字。
口任何一个以1开头的3位数字。
口任何一个以2开头、第2位数字在0~4之间的3位数字。
口任何一个以25开头、第3位数字在0~5之间的3位数字。
像这样把所有的正则全部罗列出来之后，构造一个同时符合所有原
则的模式的具体步骤也就清晰了。下面是这个例子的继续：
文本
Pinging hog.forta.com [12.159.46.20e]
with 32 bytes of data:
正则表达式
（（（1d(1,2））1(11d(2)）1(2[0-4]1d)1(25[0-5]）1-){3)
（（[-1）([1）1({}）1({））
结果
Pinging hog.forta.com [12.159.46.200]
with 32 bytes of data:
---
## Page 77
7.4小结67
分析
这个模式的使用效果显而易见，但它还是需要仔细研读才能看明白。
这个模式由一系列嵌套子表达式构成，我们先来说说由4个子表达式构成
的（（(\d{1,2})1(1\d{2})1(2[0-4]\)1(25[θ-5])\-）：（\d{1,
2}）匹配任意一位或两位数字（0~99）：（1\d{2}）匹配以1开头的任意三位
数字（100~199）：（2[0-4]\d）匹配整数200~249：（25[0-5]）匹配整数
250-255。这凡个子表达式通过|操作符结合为一个更大的子表达式（其
含义是只需匹配这4个子表达式之一即可）。随后的\，用来匹配.字符，它
与前4个子表达式构成的子表达式又构成了一个更大的子表达式（4组数
字选项和\.），而接下来的{3}表明需要重复3次。最后，数值范围又重复
了一次（这次省略了尾部的\.）以匹配IP地址里的最后一组数字。通过
把4组数字的取值范围都限制在0~255之间，这个模式准确无误地做到了
只匹配合法的IP地址、不匹配非法的IP地址。
?
提示上面这个例子里的正则表达式看起来很难理解。把它们
并明白的关键是要把它们分解开、每次只分析和理解一个子表
这式。在分新各个子表达式的时候，应该按照光内后外的原则
来进行而不是从第一个字符开始一个字符一个字持地去尝试。
你有过几次这样的经验之后就会发现，嵌套子表达式并不像它
们看上去那么复杂。
7.4小结
子表达式的作用是把同一个表达式的各个相关部分组合在一起。子
表达式必须用（和）来定义。子表达式的常见用途包括：对重复次数元字
符的作用对象做出精确的设定和控制、对|操作符的OR条件做出准确的定
义等。如有必要，子表达式还允许嵌套使用。
---
## Page 78
第8章
回溯引用：前后
一致匹配
第7章介绍了子表达式的基本用途之一：把一组字符编组为一个字符集
合。这样的字符集合主要用于精确设定需要重复匹配的文本及其重复次数。
本章将讨论子表达式的另一个重要用途—定义回测引用（backrefercnce）。
8.1回溯引用有什么用
为了理解回溯引用的概念，我们最好是看一个例子。HTML程序员
经常使用标题标签（到，以及配对的结束标签）来定义和排版
Web页面里的标题文字。现在，我们不妨假设需要把某个Web页面里的
所有标题文字全都查找出来，面不管它的级别是多少。下面就是这个例
子：
文本
lie1come to my Homepage
Content is divided into two sections:
Co1dFusion
Infornation about Macromedia ColdFusion.
Infornation about Bluetooth, 8e2.11, and more,
Bireless
正则表达式
, *
---
## Page 79
8.1回潮引用有什么用
69
结果
Welcone to ny Homepage
Content is divided into two sections:
Information about Macromedia ColdFusion.
Co1dFusion
Wire1ess
Information about Bluetooth, 8e2.11, and more.
分析
模式.*只能匹配—级标题（从或到或
：HTML语言不区分字母的大小写）。但我们刚才说的是匹配任意级别
的标题（HTML文档里的标题总共有6个级别），这应该怎么办呢？
最容易想到的办法是用一个字符集合来代替1，如下所示：
文本
lielcome to my Homepage
Content is divided into tuo sections:
Information about Macronedia ColdFusion.
Co1dFus1on
Information about Bluetooth, 8e2.11, and sore.
Iireless
正则表达式
, *?
结果
ilelcome to ny Homepage
KH2>Co1dFus1on
Content is divided into tuo sections:
Information about Macronedia ColdFusion.
Lreless≤/H2>
Infornation about Bluetooth, 8e2.11, and nore.
分析
这个模式看来不错，匹配任何一级标题的开始标签（具
---
## Page 80
70第8章回潮引用：前后一致匹配
题的结束标签（具体到这个例子，它匹配到了和）。
应注意这里使用的是。*？（情型）而不是，·（贪婴型），我们
在第5章里讲过，*和其他几个元字符是“食婪型”元字符，所
以模式.*有可能会从第2行的
一直医配到第6行的，这可不是我们想要的结果；使用“
情型”元字符，“？解决了这个问题。
子里即便是使用了“贪要型”元字符也不一定会有问题。一般
来说，元字符，不匹配换行符，而上例中的每个标题都各自占
据一行，但在这里使用情型元字符没有任何坏处，事前小心
总比事后后悔好。
现在成功了吗？未必。看看下面这个例子（这次使用的还是刚才那
个模式），你就知道我为什么这样说了：
文本
ie1cone to ny Homepage
Co1dFusion
Content 1s divided into two sections:
Infonnation about Macromedia ColdFusion.
Information about Bluetooth, 8e2.11, and more,
ire1ess
This is not valid HTML