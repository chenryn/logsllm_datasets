### 优化后的文本

#### 发现模式的重复与简化
稍微留意一下就会发现，在这个例子中，模式 `\d{1,3}\.`（最多3个数字字符后跟一个句点）连续出现了3次。这种重复可以通过更简洁的方式来表达。下面是该例子的一种解决方案：

**文本**
```
Pinging hog.forta.com [12.159.46.200]
with 32 bytes of data:
```

**正则表达式**
```
(\d{1,3}\.){3}\d{1,3}
```

**结果**
```
Pinging hog.forta.com [12.159.46.200]
with 32 bytes of data:
```

**分析**
这个模式与前面的例子具有相同的效果，但我们使用了另一种语法：首先将表达式 `\d{1,3}\.` 用括号 `()` 包围，使其成为一个子表达式，然后通过 `{3}` 将其重复3次（对应IP地址中的前3组数字）。最后，`\d{1,3}` 用于匹配IP地址的最后一组数字。

需要注意的是，使用 `(\d{1,3}\.){4}` 作为模式是不合适的。你能分析出为什么吗？

**提示** 为了提高可读性，许多用户喜欢给每个子表达式加上括号。例如，可以将上述模式写成 `(\d{1,3})\.){3}(\d{1,3})`。这种做法在语法上完全成立，对表达式的实际行为没有不良影响（但具体实现可能会影响匹配速度）。

### 子表达式的重要性
子表达式是一个非常重要的概念，我们再来看一个不涉及重复次数的例子。在这个例子中，我们需要从一条用户记录中完整地匹配出年份数字。

**文本**
```
ID: 042
SEX: M
DOB: 1967-08-17
Status: Active
```

**正则表达式**
```
(19|20)\d{2}
```

**结果**
```
ID: 042
SEX: M
DOB: 1967-08-17
Status: Active
```

**分析**
这个例子需要我们构造一个模式来查找一个4位数的年份数字，并且前两位数字限定为19或20。正则表达式中的 `|` 字符表示“或”操作符，`19|20` 将匹配19或20。因此，`(19|20)\d{2}` 应该匹配以19或20开头的4位数字。如果直接使用 `19|20\d{2}`，它会被解释为19或 `20\d{2}`，导致只匹配到19。正确的做法是将 `19|20` 归为一个子表达式。

### 子表达式的嵌套
子表达式允许嵌套，甚至多重嵌套。虽然理论上没有限制，但在实际应用中应适度使用，以保持模式的可读性和可维护性。

为了演示嵌套子表达式的用法，我们回到匹配IP地址的例子。下面是我们之前使用的模式：

**正则表达式**
```
(\d{1,3}\.){3}\d{1,3}
```

这个模式在语法上是正确的，但它也可以匹配非法的IP地址（如345、700、999等）。为了确保只匹配合法的IP地址，我们需要定义每组数字的取值范围：

- 任何一位或两位数字。
- 以1开头的三位数字。
- 以2开头且第二位数字在0到4之间的三位数字。
- 以25开头且第三位数字在0到5之间的三位数字。

根据这些规则，我们可以构造一个新的模式：

**文本**
```
Pinging hog.forta.com [12.159.46.200]
with 32 bytes of data:
```

**正则表达式**
```
((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])
```

**结果**
```
Pinging hog.forta.com [12.159.46.200]
with 32 bytes of data:
```

**分析**
这个模式由一系列嵌套子表达式构成，每个子表达式分别匹配合法的IP地址段。通过这种方式，我们可以确保只匹配合法的IP地址。

### 小结
子表达式的作用是将同一表达式的相关部分组合在一起。子表达式必须用 `()` 来定义。它们的常见用途包括精确设定重复匹配的对象、定义 `|` 操作符的条件等。如有必要，子表达式还允许嵌套使用。

---

### 回溯引用：前后一致匹配
第7章介绍了子表达式的基本用途之一：将一组字符编组为一个字符集合。本章将讨论子表达式的另一个重要用途——定义回溯引用（backreference）。

#### 回溯引用的用途
为了理解回溯引用的概念，我们来看一个例子。HTML程序员经常使用标题标签（如 `<h1>` 和 `</h1>`）来定义和排版Web页面中的标题文字。假设我们需要查找某个Web页面中的所有标题文字，无论其级别如何。

**文本**
```
<h1>Welcome to my Homepage</h1>
Content is divided into two sections:
<h2>ColdFusion</h2>
Information about Macromedia ColdFusion.
<h3>Wireless</h3>
Information about Bluetooth, 802.11, and more.
```

**正则表达式**
```
<h[1-6]>.*?</h[1-6]>
```

**结果**
```
<h1>Welcome to my Homepage</h1>
<h2>ColdFusion</h2>
<h3>Wireless</h3>
```

**分析**
模式 `.*?` 只能匹配一级标题（从 `<h1>` 到 `</h1>`）。为了匹配任意级别的标题，我们可以使用字符集合 `[1-6]` 来代替具体的数字。此外，我们使用了非贪婪模式 `.*?` 以确保匹配到最近的结束标签。

即使使用了贪婪模式 `.*` 也不一定会出现问题，因为元字符 `.` 通常不匹配换行符，而每个标题都单独占一行。不过，使用非贪婪模式更为保险。

现在成功了吗？未必。考虑以下例子：

**文本**
```
<h1>Welcome to my Homepage</h1>
<h2>ColdFusion</h2>
Content is divided into two sections:
Information about Macromedia ColdFusion.
<h3>Wireless</h3>
Information about Bluetooth, 802.11, and more.
This is not valid HTML
```

在这种情况下，我们需要确保匹配的开始和结束标签是一致的，这正是回溯引用的作用。