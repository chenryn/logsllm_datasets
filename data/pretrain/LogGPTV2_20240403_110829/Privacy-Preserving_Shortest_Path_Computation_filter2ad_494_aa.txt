title:Privacy-Preserving Shortest Path Computation
author:David J. Wu and
Joe Zimmerman and
J&apos;er&apos;emy Planul and
John C. Mitchell
Privacy-Preserving Shortest Path Computation
(Extended Version)
David J. Wu
Joe Zimmerman
J´er´emy Planul
John C. Mitchell
{dwu4, jzim, mitchell}@cs.stanford.edu, PI:EMAIL
Stanford University
Abstract
Navigation is one of the most popular cloud computing services. But in virtually all cloud-based
navigation systems, the client must reveal her location and destination to the cloud service provider in
order to learn the fastest route. In this work, we present a cryptographic protocol for navigation on city
streets that provides privacy for both the client’s location and the service provider’s routing data. Our
key ingredient is a novel method for compressing the next-hop routing matrices in networks such as city
street maps. Applying our compression method to the map of Los Angeles, for example, we achieve over
tenfold reduction in the representation size. In conjunction with other cryptographic techniques, this
compressed representation results in an eﬃcient protocol suitable for fully-private real-time navigation
on city streets. We demonstrate the practicality of our protocol by benchmarking it on real street map
data for major cities such as San Francisco and Washington, D.C.
1 Introduction
Location privacy is a major concern among smartphone users, and there have been numerous controversies
due to companies tracking users’ locations [AVD11, Che11]. Among the various applications that require
location information, navigation is one of the most popular. For example, companies such as Google,
Apple, and Waze have built traﬃc-aware navigation apps to provide users with the most up-to-date routing
information. But to use these services, users must reveal their location and destination to the cloud service
provider. In doing so, they may also reveal other sensitive information about their personal lives, such as
their health condition, their social and political aﬃliations, and more.
One way to provide location privacy is for the user to download the entire map from the cloud service
provider and then compute the best route locally on her own mobile device. Unfortunately, since service
providers invest signiﬁcant resources to maintain up-to-date routing information, they are not incentivized
to publish their entire routing database in real-time. Even in the case of a paid premium service, in which
the service provider does not derive compensation from learning the user’s location data, it is not obvious
how to achieve fully-private navigation. The user does not trust the cloud provider with her location data,
and the cloud provider does not trust the user with its up-to-date routing information, so neither party has
This is the extended version of a paper by the same name that appeared at the Network and Distributed System Security
Symposium (NDSS) in February, 2016. Permission to freely reproduce all or part of this paper for noncommercial purposes is
granted provided that copies bear this notice and the full citation on the ﬁrst page. Reproduction for commercial purposes
is strictly prohibited without the prior written consent of the Internet Society, the ﬁrst-named author (for reproduction of an
entire paper only), and the author’s employer if the paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23052
1
all of the data to perform the computation. While general-purpose cryptographic tools such as multiparty
computation solve this problem in theory (see Section 7), these protocols are prohibitively expensive in
practice for applications such as real-time navigation.
Our results.
In this work, we present an eﬃcient cryptographic protocol for fully-private navigation: the
user keeps private her location and destination, and the service provider keeps private its proprietary routing
information (except for the routing information associated with the speciﬁc path requested by the user and
a few generic parameters pertaining to the network). We give a complete implementation of our protocol
and benchmark its performance on real street map data (Section 5.3). Since our protocol is real-time (the
user continues receiving directions throughout the route), we benchmark the performance “per hop”, where
each hop roughly corresponds to an intersection between streets.1 For cities such as San Francisco and
Washington, D.C., each hop in our protocol requires about 1.5 seconds and less than 100 KB of bandwidth.
In addition, before the protocol begins, we execute a preprocessing step that requires bandwidth in the
tens of megabytes. Since this preprocessing step can be performed at any time, in practice it would likely
be run via a fast Wi-Fi connection, before the mobile user needs the real-time navigation service, and thus
the additional cost is very modest. To our knowledge, ours is the ﬁrst fully-private navigation protocol
eﬃcient enough to be feasible in practice.
In our work, we model street-map networks as graphs, in which the
Our technical contributions.
nodes correspond to street intersections, and edges correspond to streets. In our model, we assume that
the network topology is public (i.e., in the case of navigation on city streets, the layout of the streets is
publicly known). However, only the service provider knows the up-to-date traﬃc conditions, and thus the
shortest path information. In this case, the server’s “routing information” consists of the weights (that is,
travel times) on the edges in the network.
By modeling street-maps as graphs, we can easily construct a straw-man private navigation protocol
based on symmetric private information retrieval (SPIR) [GIKM00, KO97, NP05]. Given a graph G with
n nodes, the server ﬁrst constructs a database with n2 records, each indexed by a source-destination pair
(s, t). The record indexed (s, t) contains the shortest path from s to t. To learn the shortest path from
s to t, the client engages in SPIR with the server for the record indexed (s, t). Security of SPIR implies
that the client just learns the shortest path and the server learns nothing. While this method satisﬁes the
basic security requirements, its complexity scales quadratically in the number of nodes in the graph. Due
to the computational cost of SPIR, this solution quickly becomes infeasible in the size of the graph.
Instead, we propose a novel method to compress the routing information in street-map networks.
Speciﬁcally, given a graph G with n nodes, we deﬁne the next-hop routing matrix M ∈ Zn×n for G to
be the matrix where each entry Mst gives the index of the ﬁrst node on the shortest path from node s
to node t. To apply our compression method, we ﬁrst preprocess the graph (Section 3) such that each
entry in the next-hop routing matrix M can be speciﬁed by two bits: Mst = (M (ne)
) where
M (ne), M (nw) ∈ {−1, 1}n×n. We then compress M (ne) by computing a sign-preserving decomposition: two
matrices A(ne), B(ne) ∈ Zn×d where d (cid:28) n such that M (ne) = sign(A(ne) · (B(ne))T ). We apply the same
procedure to compress the other component M (nw). The resulting compression is lossless, so there is no
loss in accuracy in the shortest paths after applying our transformation. When applied to the road network
for the city of Los Angeles, we obtain over 10x reduction in the size of the representation. Our compression
method is highly parallelizable and by running our computation on GPUs, we can compress next-hop
matrices with close to 50 million elements (for a 7000-node network) in under ten minutes.
, M (nw)
st
st
1In a few cases, hops in our construction occur mid-street or in instances such as traﬃc circles. These are rare enough that
even in large cities such as Los Angeles, the total number of hops along any route is less than 200.
2
Moreover, our compression method enables an eﬃcient protocol for a fully-private shortest path com-
putation. In our protocol, the rounds of interaction correspond to the nodes in the shortest path. On each
iteration of the protocol, the client learns the next hop on the shortest path to its requested destination.
Abstractly, if the client is currently at a node s and navigating to a destination t, then after one round of
the protocol execution, the client should learn the next hop given by Mst = (M (ne)
). Each round
st
of our protocol thus reduces to a two-party computation of the components M (ne)
. Given our
st
compressed representation of the next-hop routing matrices, computing M (ne)
reduces to computing the
sign of the inner product between the sth row of A(ne) and the tth row of B(ne), and similarly for M (nw).
In our construction, we give an eﬃcient method for inner product evaluation based on aﬃne encodings,
and use Yao’s garbled circuits [Yao86, BHR12] to evaluate the sign function. An important component of
our protocol design is a novel way of eﬃciently combining aﬃne encodings and garbled circuits. Together,
these methods enable us to construct an eﬃcient, fully-private navigation protocol.
, M (nw)
and M (nw)
st
st
st
Other approaches. An alternative method for private navigation is to use generic tools for two-
party computation such as Yao’s garbled circuits [Yao86, BHR12] and Oblivious RAM (ORAM) [GO96,
SvDS+13]. While these approaches are versatile, they are often prohibitively expensive for city-scale net-
works (in the case of Yao circuits), or do not provide strong security guarantees against malicious clients
(in the case of ORAM). For instance, the garbled-circuit approach by Carter et al. [CMTB13, CLT14]
requires several minutes of computation to answer a single shortest path query in a road network with just
100 nodes. Another generic approach combining garbled circuits and ORAM [LWN+15] requires commu-
nication on the order of GB and run-times ranging from tens of minutes to several hours for a single query
on a network with 1024 nodes. Thus, current state-of-the-art tools for general two-party computation do
not give a viable solution for private navigation in city-scale networks. We survey other related methods
in Section 7.
2 Preliminaries and Threat Model
We begin with some notation. For a positive integer n, let [n] denote the set of integers {1, . . . , n}. For
two (cid:96)-bit strings x, y ∈ {0, 1}(cid:96), we write x ⊕ y to denote their bitwise XOR. For a prime p, we write Fp to
p to denote its multiplicative group. Let D be a probability
denote the ﬁnite ﬁeld with p elements, and F∗
distribution. We write x ← D to denote that x is drawn from D. Similarly, for a ﬁnite set S we write
r←− S to denote that x is drawn uniformly at random from S. A function f (λ) is negligible in a security
x
parameter λ if f = o(1/λc) for all c ∈ N.
c≈ {D2}λ to denote that {D1}λ and {D2}λ
For two distribution ensembles {D1}λ ,{D2}λ, we write {D1}λ
are computationally indistinguishable (i.e., no probabilistic polynomial-time algorithm can distinguish
them, except with probability negligible in λ). We write {D1}λ ≡ {D2}λ to denote that {D1}λ and {D2}λ
are identically distributed for all λ. For a predicate P(x), we write 1{P(x)} to denote the indicator function
for P(x), i.e., 1{P(x)} = 1 if and only if P(x) is true, and otherwise, 1{P(x)} = 0. If G is a directed
graph, we write (u, v) to denote the edge from node u to node v.
A function F : K×X → Y with key-space K, domain X , and range Y is a PRF [GGM86] if no eﬃcient
r←− K, evaluated on inputs chosen adaptively by
adversary can distinguish outputs of the PRF (with key k
the adversary) from the corresponding outputs of a truly random function from X → Y.
Threat model. We give a high-level survey of our desired security properties, and defer the details to
Section 4.2. We operate in the two-party setting where both parties know the network topology as well as
a few generic parameters about the underlying graph structure (described concretely in Section 4.2), but
3
only the server knows the weights (the routing information). The client holds a source-destination pair.
At the end of the protocol execution, the client learns the shortest path between its requested source and
destination, while the server learns nothing. The ﬁrst property we require is privacy for the client’s location.
Because of the sensitivity of location information, we require privacy to hold even against malicious servers,
that is, servers whose behavior can deviate from the protocol speciﬁcation.
The second requirement is privacy for the server’s routing information, which may contain proprietary
or conﬁdential information. The strongest notion we can impose is that at the end of the protocol execution,
the client does not learn anything more about the graph other than the shortest path between its requested
source and destination and some generic parameters associated with the underlying network. While this
property is not diﬃcult to achieve if the client is semi-honest (that is, the client adheres to the protocol
speciﬁcation), in practice there is little reason to assume that the client will behave this way. Thus, we
aim to achieve security against malicious clients. In our setting, we will show that a malicious client learns
only the shortest path from its requested source to its requested destination, except for failure events that
occur with probability at most ≈ 2−30. For comparison, 2−30 is the probability that an adversary running
in time ≈ 250 is able to guess an 80-bit secret key.2
To summarize, we desire a protocol that provides privacy against a malicious server and security against
a malicious client. We note that our protocol does not protect against the case of a server corrupting the
map data; in practice, we assume that the map provider is trying to provide a useful service, and thus is
not incentivized to provide misleading or false navigation information.
3 Graph Processing
As described in Section 1, we model street-map networks as directed graphs, where nodes correspond to
intersections, and edges correspond to streets. To enable an eﬃcient protocol for fully-private shortest
path computation, we ﬁrst develop an eﬃcient method for preprocessing and compressing the routing
information in the network. In this section, we ﬁrst describe our preprocessing procedure, which consists
of two steps: introducing dummy nodes to constrain the out-degree of the graph, and assigning a cardinal
direction to each edge. Then, we describe our method for compressing the routing information in the
graph; here, we exploit the geometric structure of the graph.
Bounding the out-degree. Let G be the directed graph representing the road network. We assume that
the nodes in G have low out-degree. In a road network (see Figure 1 for an example), the nodes correspond
to street intersections, and thus typically have at most four outgoing edges, one in each cardinal direction.
In the ﬁrst step of our preprocessing procedure, we take a weighted, directed graph G and transform it
into a weighted, directed graph G(cid:48) where each node has maximum out-degree 4. Speciﬁcally, we start by
setting G(cid:48) = G. Then, as long as there is a node u ∈ G(cid:48) with neighbors v1, . . . , v(cid:96) and (cid:96) > 4, we do the
following. First, we add a new node u(cid:48) to G(cid:48). For i ≥ 4, we add the edge (u(cid:48), vi) to G(cid:48) and remove the edge
(u, vi) from G(cid:48). We also add a zero-weight edge from u to u(cid:48) in G(cid:48). By construction, this transformation
preserves the shortest-path between nodes in G and constrains the out-degree of all nodes in G(cid:48) to 4.
In a road network, we can associate each node by an (x, y) pair in the coordinate
Orienting the edges.
plane (for example, the node’s latitude and longitude). Consider a coordinate system aligned with the
cardinal directions: the x-axis corresponds to the east-west axis and the y-axis corresponds to the north-
south axis. Then, for each node u in the graph G, we associate each of its neighbors vi (0 ≤ i < 4) with a
direction diri ∈ {n, e, s, w} (for north, east, south, west, respectively) relative to u. For a concrete example,
2Even in the case of these low-probability failure events, one can show that a malicious client only learns a bounded-length
path emanating from its requested source, though it may not be a shortest path to any particular destination.
4
Figure 1: Subsection of map of Washington, D.C. from OpenStreetMap [Ope] (left) and visualization of the routing
network after preprocessing (right). The visualization on the right shows the ﬁrst hop of the shortest path from the
source node (denoted by the circle) to all other nodes in the graph (denoted by a polygon). In this example, the
source node has three neighbors: to the north, west, and south (as indicated in the diagram). If the ﬁrst hop in the
shortest path from the source to a node is to move north, then the node is represented by a green triangle. If the
ﬁrst hop is to move west, then the node is represented by a blue diamond, and if the ﬁrst hop is to move south, then
the node is represented by an orange pentagon.
refer to the visualization of the preprocessed graph in Figure 1. Here, the center node (labeled “src”) has
three neighbors, each of which is associated with a cardinal direction: north, west, or south in this case.
We deﬁne the orientation of an edge to be the direction associated with the edge.
To determine the orientation of the edges in G, we proceed as follows. For each node u ∈ G, we associate
a unique direction diri ∈ {n, e, s, w} with each neighbor vi of u. In assigning the four cardinal directions to
each node’s neighbors, we would like to approximate the true geographical locations of the nodes. In our
setting, we formulate this assignment as a bipartite matching problem for each node u, with u’s neighbors
(at most 4) forming one partition of the graph, and the four cardinal directions {n, e, s, w} forming the
other. We deﬁne the cost of a matching between a neighbor vi of u and a direction dirj to be the angle
formed by the vector from u to vi and the unit vector aligned in the direction dirj. In assigning directions
to neighbors, we desire a matching that minimizes the costs of the matched neighbors. Such a matching
can be computed eﬃciently using the Hungarian method [KY55].
In this way, we associate a cardinal
direction with each edge in G.
Compressing shortest paths. Next, we describe a method for compressing the next-hop routing matrix
for a road network. Let G be a directed graph with n nodes and maximum out-degree 4. Using the method
described above, we associate a direction dir ∈ {n, e, s, w} with each edge in G. Since there are four possible
values for dir, we can encode the direction using exactly two bits bne and bnw, where bne = 0 if and only
if dir ∈ {n, e}, and bnw = 0 if and only if dir ∈ {n, w}. Intuitively, bne encodes the direction with respect
to the northwest-southeast axis while bnw encodes the direction with respect to the northeast-southwest
axis. Thus, for each node u ∈ G, we associate a unique two-bit index (bne, bnw) with each of its outgoing
edges. For notational convenience, we deﬁne a function IndexToDirection that maps an index (bne, bnw) to
the corresponding direction dir ∈ {n, e, s, w}. Speciﬁcally,
IndexToDirection(0, 0) = n
IndexToDirection(1, 0) = w
IndexToDirection(0, 1) = e
IndexToDirection(1, 1) = s.
(1)
We next compute the shortest path pst between all source-destination pairs (s, t) in G. In our imple-
5
mentation, we run Dijkstra’s algorithm [Dij59] on each node in G, but the precise choice of shortest-path
algorithm does not matter for our compression procedure, as its cost is dominated by the other steps. After
computing all-pairs shortest paths in G, we deﬁne the next-hop routing matrices M (ne), M (nw) ∈ {0, 1}n×n
for G, where (M (ne)
) encodes the direction of the ﬁrst edge in the shortest path pst.
, M (nw)
st
st
Just as the geometry of road networks enables us to orient the edges, the geometry also suggests a
method for compressing the next-hop routing matrices. Take for example the road network in Figure 1.
From the visualization, we observe that when the destination t lies to the north of the source s, the ﬁrst
hop on the shortest path is usually to take the edge directed north. In our framework, this means that
both M (ne)
are more likely to be 0 rather than 1. Thus, by orienting the edges in the graph
consistently, we ﬁnd that the resulting routing matrices M (ne) and M (nw) have potentially compressible
structure.
To compress a matrix M ∈ {0, 1}n×n, we ﬁrst rescale the elements in M to be in {−1, 1}. Our goal is
to ﬁnd two matrices A, B ∈ Zn×d such that sign(ABT ) = M with d < n.3 We can formulate the problem
of computing A and B as an optimization problem with objective function J(A, B):
and M (nw)
st
st
n(cid:88)
n(cid:88)
(cid:16)(cid:0)ABT(cid:1)
(cid:96)
(cid:17)
J(A, B) =
jk , Mjk