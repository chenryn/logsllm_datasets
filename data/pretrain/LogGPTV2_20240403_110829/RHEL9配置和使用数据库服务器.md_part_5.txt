    ```
    这个打包程序可确保 [**MariaDB**]{.strong}
    服务器守护进程(`mariadbd`{.literal})通过
    `--wsrep-new-cluster`{.literal}
    选项运行。此选项提供了没有要连接的现有群集的信息。因此，节点会创建一个新的
    UUID 来识别新集群。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `mariadb`{.literal} 服务支持 systemd 方法来与多个
    [**MariaDB**]{.strong} 服务器进程进行交互。因此，在有多个
    [**MariaDB**]{.strong}
    服务器运行的情况下，您可以通过将实例名称指定为后缀来引导特定的实例：
    ``` literallayout
    # galera_new_cluster mariadb@node1
    ```
    :::
2.  在每个节点上运行以下命令将其他节点连接到集群：
    ``` literallayout
    # systemctl start mariadb
    ```
    因此，节点连接到集群，并将自己与集群的状态同步。
:::
::: itemizedlist
**其他资源**
-   [MariaDB Galera
    集群入门](https://mariadb.com/kb/en/library/getting-started-with-mariadb-galera-cluster/){.link}。
:::
:::
::: section
::: titlepage
## []{#using-mariadb_configuring-and-using-database-servers.html#adding-a-new-node-to-mariadb-galera-cluster_replicating-mariadb-with-galera}在 MariaDB Galera 集群中添加新节点 {.title}
:::
要在 [**MariaDB Galera 集群**]{.strong} 中添加新节点，请使用以下步骤。
请注意，您也可以使用此流程重新连接已存在的节点。
::: itemizedlist
**流程**
-   在特定节点上，在 `/etc/my.cnf.d/galera.cnf`{.literal} 配置文件的
    `[mariadb]`{.literal} 部分的 `wsrep_cluster_address`{.literal}
    选项中为一个或多个现有群集成员提供一个地址：
    ``` literallayout
    [mariadb]
    wsrep_cluster_address="gcomm://192.168.0.1"
    ```
    当新节点连接到现有群集节点中的一个时，就可以看到集群中的所有节点。
    但是，最好在 `wsrep_cluster_address`{.literal}
    中列出集群的所有节点。
    因此，任何节点都可以通过连接到任何其他群集节点来加入群集，即使一个或多个群集节点停机了也没关系。当所有成员就成员资格达成一致时，集群的状态将会改变。如果新节点的状态与集群状态不同，新节点需要请求增加状态转移(IST)或状态快照传输(SST)，来确保与其他节点保持一致。
:::
::: itemizedlist
**其他资源**
-   [MariaDB Galera
    集群入门](https://mariadb.com/kb/en/library/getting-started-with-mariadb-galera-cluster/){.link}。
-   [State Snapshot Transfers
    简介](https://mariadb.com/kb/en/library/documentation/replication/galera-cluster/state-snapshot-transfers-ssts-in-galera-cluster/introduction-to-state-snapshot-transfers-ssts/){.link}
    。
:::
:::
::: section
::: titlepage
## []{#using-mariadb_configuring-and-using-database-servers.html#restarting-mariadb-galera-cluster_replicating-mariadb-with-galera}重启 MariaDB Galera 集群 {.title}
:::
如果同时关闭了所有的节点，就终止了集群，正在运行的集群将不再存在。但是，集群的数据仍然存在。
要重启集群，请引导第一个节点，如 ["部署 MariaDB Galera
集群"一节](#using-mariadb_configuring-and-using-database-servers.html#configuring-mariadb-galera-cluster_replicating-mariadb-with-galera "部署 MariaDB Galera 集群"){.xref}
所述
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
如果集群没有启动，并且第一个节点上的 `mariadbd`{.literal} 只是通过
`systemctl start mariadb`{.literal} 命令来启动的，那么节点会尝试连接到
`/etc/my.cnf.d/galera.cnf`{.literal} 文件
`wsrep_cluster_address`{.literal}
选项中列出的至少一个节点。如果当前没有节点运行，那么重启失败。
:::
::: itemizedlist
**其他资源**
-   [MariaDB Galera
    集群入门](https://mariadb.com/kb/en/library/getting-started-with-mariadb-galera-cluster/){.link}。
:::
:::
:::
:::
[]{#assembly_using-mysql_configuring-and-using-database-servers.html}
::: chapter
::: titlepage
# []{#assembly_using-mysql_configuring-and-using-database-servers.html#assembly_using-mysql_configuring-and-using-database-servers}第 3 章 使用 MySQL {.title}
:::
[**MySQL**]{.strong}
服务器是一个开源、快速且强大的数据库服务器。这部分描述了如何在 RHEL
系统上安装和配置 [**MySQL**]{.strong}，如何备份 [**MySQL**]{.strong}
数据、如何从较早的 [**MySQL**]{.strong} 版本迁移，以及如何复制
[**MySQL**]{.strong}。
::: section
::: titlepage
# []{#assembly_using-mysql_configuring-and-using-database-servers.html#introduction-to-mysql_assembly_using-mysql}MySQL 入门 {.title}
:::
[**MySQL**]{.strong}
是一个关系型数据库，其将数据转换为结构化的信息，并提供 SQL
接口来访问数据。它包括多种存储引擎和插件，以及地理信息系统(GIS)和
JavaScript 对象表示法(JSON)功能。
这部分描述了：
::: itemizedlist
-   如何在 [**安装 MySQL**]{.strong} 中安装
    [MySQL](#assembly_using-mysql_configuring-and-using-database-servers.html#installing-mysql_assembly_using-mysql "安装 MySQL"){.link}
    服务器。
-   如何在 [**配置 MySQL**]{.strong} 中调整
    [MySQL](#assembly_using-mysql_configuring-and-using-database-servers.html#configuring-mysql_assembly_using-mysql "配置 MySQL"){.link}
    配置。
-   如何在 [备份 MySQL
    数据](#assembly_using-mysql_configuring-and-using-database-servers.html#backing-up-mysql-data_assembly_using-mysql "备份 MySQL 数据"){.link}
    中备份 [**MySQL**]{.strong} 数据。
-   如何将 RHEL 8 版本从 [**MySQL 8.0**]{.strong} 迁移到 RHEL 9 的
    [**MySQL 8.0**]{.strong} 版本，以 [迁移到 MySQL 8.0 的 RHEL 9
    版本](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_proc_migrating-to-a-rhel-9-version-of-mysql-8-0_assembly_using-mysql "迁移到 RHEL 9 版本的 MySQL 8.0"){.link}。
-   如何在 [**复制 MySQL**]{.strong} 中复制
    [MySQL](#assembly_using-mysql_configuring-and-using-database-servers.html#replicating-mysql_assembly_using-mysql "复制 MySQL"){.link}
    数据库。
:::
:::
::: section
::: titlepage
# []{#assembly_using-mysql_configuring-and-using-database-servers.html#installing-mysql_assembly_using-mysql}安装 MySQL {.title}
:::
RHEL 9.0 提供 [**MySQL 8.0**]{.strong}，作为此 Application Stream
的初始版本，您可以作为 RPM 软件包轻松安装。
要安装 [**MySQL**]{.strong}，请使用以下流程。
::: orderedlist
**流程**
1.  安装 [**MySQL**]{.strong} 服务器软件包：
    ``` screen
    # dnf install mysql-server
    ```
2.  启动 `mysqld`{.literal} 服务：
    ``` screen
    # systemctl start mysqld.service
    ```
3.  在引导时启用 `mysqld`{.literal} 服务：
    ``` screen
    # systemctl enable mysqld.service
    ```
4.  [*建议：*]{.emphasis}要在安装 [**MySQL**]{.strong}
    时提高安全性，请运行以下命令：
    ``` screen
    $ mysql_secure_installation
    ```
    此命令启动一个完全交互的脚本，该脚本会提示过程中的每一步。该脚本可让您通过以下方法提高安全性：
    ::: itemizedlist
    -   为 root 帐户设置密码
    -   删除匿名用户
    -   禁止远程 root 登录（在本地主机之外）
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
由于 RPM 软件包有冲突，因此 [**MySQL**]{.strong} 和
[**MariaDB**]{.strong} 数据库服务器无法在 RHEL 9 中并行安装。在 RHEL 9
中，可以在容器中使用不同版本的数据库服务器。
:::
:::
::: section
::: titlepage
# []{#assembly_using-mysql_configuring-and-using-database-servers.html#configuring-mysql_assembly_using-mysql}配置 MySQL {.title}
:::
要为网络配置 [**MySQL**]{.strong} 服务器，请使用以下流程。
::: orderedlist
**流程**
1.  编辑 `/etc/my.cnf.d/mysql-server.cnf`{.literal} 文件的
    `[mysqld]`{.literal} 部分。您可以设置以下配置指令：
    ::: itemizedlist
    -   `bind-address`{.literal} - 是服务器监听的地址。可能的选项有：
        ::: itemizedlist
        -   主机名
        -   IPv4 地址
        -   IPv6 地址
        :::
    -   `skip-networking`{.literal} - 控制服务器是否监听 TCP/IP
        连接。可能的值有：
        ::: itemizedlist
        -   0 - 监听所有客户端
        -   1 - 只监听本地客户端
        :::
    -   `端口`{.literal} - [**MySQL**]{.strong} 侦听 TCP/IP 连接的端口。
    :::
2.  重启 `mysqld`{.literal} 服务：
    ``` screen
    # systemctl restart mysqld.service
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_using-mysql_configuring-and-using-database-servers.html#backing-up-mysql-data_assembly_using-mysql}备份 MySQL 数据 {.title}
:::
在 Red Hat Enterprise Linux 9 中，备份 [**MySQL**]{.strong}
数据库数据有两个主要方法：
::: itemizedlist
-   逻辑备份
-   物理备份
:::
[**逻辑备份**]{.strong} 由恢复数据所需的 SQL
语句组成。这种类型的备份以纯文本文件的形式导出信息和记录。
与物理备份相比，逻辑备份的主要优势在于可移植性和灵活性。数据可以在其他硬件配置、[**MySQL**]{.strong}
版本或数据库管理系统(DBMS)上恢复，而这些数据无法进行物理备份。
请注意，如果 `mysqld.service`{.literal}
正在运行，也可以执行逻辑备份。逻辑备份不包括日志和配置文件。
[**物理备份**]{.strong}由保存内容的文件和目录副本组成。
与逻辑备份相比，物理备份具有以下优点：
::: itemizedlist
-   输出更为紧凑。
-   备份的大小会较小。
-   备份和恢复速度更快。
-   备份包括日志和配置文件。
:::
请注意，当 `mysqld.service`{.literal}
没有运行或数据库中的所有表被锁住时，才能执行物理备份，以防在备份过程中数据有更改。
您可以使用以下 [**MySQL**]{.strong} 备份方法之一从 [**MySQL**]{.strong}
数据库备份数据：
::: itemizedlist
-   使用 `mysqldump`{.literal} 的逻辑备份
-   文件系统备份
-   作为备份解决方案复制
:::
::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#performing-logical-backup-with-mysqldump-mysql_backing-up-mysql-data}使用 mysqldump 执行逻辑备份 {.title}
:::
[**[mysqldump]{.application}**]{.strong}
客户端是一种备份实用程序，可用于转储数据库或数据库集合，用于备份或传输到其他数据库服务器。[**[mysqldump]{.application}**]{.strong}
的输出通常由 SQL
语句组成，用于重新创建服务器表结构，生成表的数据。[**[mysqldump]{.application}**]{.strong}
也可以以其他格式生成文件，包括 XML 和分隔的文本格式，如 CSV。
要执行 [**[mysqldump]{.application}**]{.strong}
备份，您可以使用以下一种选项：
::: itemizedlist
-   备份一个或多个所选的数据库
-   备份所有数据库
-   从一个数据库备份表子集
:::
::: itemizedlist
**流程**
-   要转储单个数据库，请运行：
    ``` screen
    # mysqldump [options] --databases db_name > backup-file.sql
    ```
-   要一次转储多个数据库，请运行：
    ``` screen
    # mysqldump [options] --databases db_name1 [db_name2 ...] > backup-file.sql
    ```
-   要转储所有数据库，请运行：
    ``` screen
    # mysqldump [options] --all-databases > backup-file.sql
    ```
-   要将一个或多个转储的完整数据库加载回服务器，请运行：
    ``` screen
    # mysql < backup-file.sql