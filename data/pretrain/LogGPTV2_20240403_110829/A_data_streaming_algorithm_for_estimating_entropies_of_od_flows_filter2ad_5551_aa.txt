title:A data streaming algorithm for estimating entropies of od flows
author:Haiquan (Chuck) Zhao and
Ashwin Lall and
Mitsunori Ogihara and
Oliver Spatscheck and
Jia Wang and
Jun (Jim) Xu
A Data Streaming Algorithm for Estimating
Entropies of OD Flows
Haiquan (Chuck) Zhao
Georgia Inst. of Technology
Ashwin Lall
University of Rochester
Mitsunori Ogihara
University of Rochester
Oliver Spatscheck
AT&T Labs – Research
Jia Wang
AT&T Labs – Research
∗
Jun (Jim) Xu
Georgia Inst. of Technology
ABSTRACT
Entropy has recently gained considerable signiﬁcance as an
important metric for network measurement. Previous re-
search has shown its utility in clustering traﬃc and detect-
ing traﬃc anomalies. While measuring the entropy of the
traﬃc observed at a single point has already been studied,
an interesting open problem is to measure the entropy of the
traﬃc between every origin-destination pair. In this paper,
we propose the ﬁrst solution to this challenging problem.
Our sketch builds upon and extends the Lp sketch of Indyk
with signiﬁcant additional innovations. We present calcula-
tions showing that our data streaming algorithm is feasible
for high link speeds using commodity CPU/memory at a
reasonable cost. Our algorithm is shown to be very accu-
rate in practice via simulations, using traﬃc traces collected
at a tier-1 ISP backbone link.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
Operations—Network Monitoring
General Terms
Algorithms, Measurement, Theory
Keywords
Network Measurement, Entropy Estimation, Data Stream-
ing, Traﬃc Matrix, Stable Distributions
1.
INTRODUCTION
The (empirical) entropy of the network traﬃc has recently
been proposed, in many diﬀerent contexts, as an eﬀective
∗
Supported in part by NSF grants CNS 0716423, CNS
0626979, CNS 0519745, and NSF CAREER award CNS
0238315.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’07, October 24-26, 2007, San Diego, California, USA.
Copyright 2007 ACM 978-1-59593-908-1/07/0010 ...$5.00.
and reliable metric for anomaly detection and network diag-
nosis [3, 11, 15, 24, 25]. Measuring this quantity exactly in
real time (say by maintaining per-ﬂow states), however, is
not possible on high-speed links due to its prohibitively high
computational and memory requirements. For this reason,
various data streaming algorithms [16] have been proposed
to approximate this quantity. Data streaming [19] is con-
cerned with processing a long stream of data items in one
pass using a small working memory (called a sketch) in or-
der to answer a class of queries regarding the stream. The
challenge is to use this sketch to “remember” as much infor-
mation pertinent to our problem as possible.
We observe that it is often important to know the en-
tropies of origin-destination (OD) ﬂows, where an OD ﬂow
is deﬁned as all the traﬃc that enters an ingress point (called
origin) and exits at an egress point (called destination).
Knowing these quantities will give us signiﬁcantly more in-
sight into the dynamics of traﬃc inside an ISP network,
which we will elaborate upon shortly. However, we found
that none of the existing entropy estimation algorithms [1,
2, 5, 16] can be extended to solve this new problem. In par-
ticular, the traﬃc matrix estimation literature [18, 21, 22,
23, 27] has ruled out the following naive approach: sepa-
rate the traﬃc at each ingress point into various OD ﬂows
in real time and feed them to existing entropy estimation
algorithms. In this paper, we propose the ﬁrst solution to
this new problem.
1.1 Motivation
The ability to estimate entropy for all OD ﬂows in a net-
work can be highly beneﬁcial. On today’s Internet, net-
work performance degradation and service disruption can
be caused by a wide range of events, including anomalies
(e.g., DDoS attacks, network failures, and ﬂash crowds) and
scheduled network maintenance tasks (e.g., router IOS up-
dates and customer migration). Many of these events occur
in a distributed manner (intentionally or unintentionally)
in terms of their signatures and impacts. Detecting these
events and evaluating their impact on network services thus
often requires monitoring of the traﬃc from a number of lo-
cations across the network. More importantly, these changes
in traﬃc distribution may be totally invisible in the tradi-
tional traﬃc volume matrix. However, by examining the
entropy of every OD ﬂow in the network, one can hope to
capture these events in real time.
To illustrate how beneﬁcial the OD ﬂow entropy estima-
tion is, consider a situation in which a link fails (e.g., due to
hardware problems) and is cost out for maintenance. The
traﬃc ﬂows that used to be carried on that link will most
likely be redistributed to alternative paths. In the very rare
case where no alternative path exists or the network expe-
riences long convergence delay, the ﬂows may abort com-
pletely. In either case, traﬃc distribution on a number of
links across the network will change. It is possible that the
traﬃc volume changes on those impacted links are small,
and sometimes too small to be detected on each link using
volume based detection algorithms. However, the overall
change in the traﬃc distribution across the network can be
quite large. If so, the examination of traﬃc entropy along
with the traﬃc matrix for all OD ﬂows is likely to enable
us to capture such distributed and dynamically occurring
events.
Another example is a DoS attack. When there is a dis-
tributed DoS attack launched from outside the network, its
impact may not be immediately visible in the traﬃc matrix
in terms of traﬃc volume change. However, it is very im-
portant for operators to be able to detect and mitigate the
attack at the earliest time to minimize the possible nega-
tive impact on their services. That is, it may be too late
for certain types of events to be detected when their impact
becomes visible in the traﬃc volume matrix. In addition,
certain types of DoS attacks are diﬃcult to detect due to
the low-rate nature of attack ﬂows [14, 26]. In such cases,
we hope to be able to achieve real time detection based on
traﬃc entropy estimation.
1.2 Our solution and contributions
In this work, we propose the ﬁrst solution to the chal-
lenging problem of estimating the entropies of all OD ﬂows.
Our key innovation is to invent a sketch that allows us to
approximately estimate not only (a) the entropy of a data
stream, but also (b) the entropy of the intersection of two
data streams A and B from the sketches of A and B. We re-
fer to property (b) as the “intersection measurable property”
(IMP) in the sequel. Note that all existing entropy estima-
tion algorithms (their sketches) have property (a), but none
of them has IMP.
The intersection measurable property (IMP) of our sketch
leads to the following very elegant solution of our problem.
Each participating ingress and egress node in the network
maintains a sketch of the traﬃc that ﬂows in/out of it during
a measurement interval. When we would like to measure the
entropy of an OD ﬂow stream between an ingress point i and
an egress point j, we simply summon from node i the sketch
of its ingress stream Oi, and from node j the sketch of its
egress stream Dj , and then infer the entropy of Oi ∩ Dj
using the sketches’ IMP. This solution is extremely cost-
eﬀective in that we will be able to estimate O(k2) quantities
(the entropies of a k by k OD ﬂow stream matrix) using
only O(k) sketches. However sketches that have IMP are
much harder to design than those without it, and hence the
signiﬁcant challenge we have in this work.
Our sketch builds upon and extends the Lp sketch of In-
dyk [12] with signiﬁcant additional innovations.
Indyk’s
sketch was designed for the estimation of the Lp norm of
a stream (deﬁned later). We observe that Indyk’s Lp sketch
has the desirable IMP, and therefore allows for the estima-
tion of the Lp norm of an OD ﬂow Oi ∩ Dj using the Lp
sketches at Oi and Dj . However, we have to develop the
IMP theory of Lp sketch ourselves since IMP was never even
claimed in [13] (probably because there was no application
in sight for IMP at that time).
Our most important contribution is to discover that the
entropy of an OD ﬂow can be approximated by a function
of just two Lp norms (Lp1 and Lp2 , p1 (cid:4)= p2) of the OD
ﬂow. With this insight, our sketch at each ingress and egress
point is simply one Lp1 sketch and one Lp2 sketch. In this
way, we not only solve this diﬃcult problem, but also ﬁnd a
nice application for the Lp sketch. From a theoretical point
of view, our solution resolves one of the open questions of
Cormode [7].
Our contributions can be summarized as follows. First,
our discovery builds a mathematical connection between our
problem and Indyk’s Lp norm estimation problem, leading
to a highly cost-eﬀective solution. Second, we extend Indyk’s
(, δ) analysis of Lp sketches [13] using asymptotic normal-
ity of order statistics, leading to much tighter (yet slightly
less rigorous) accuracy bounds. We also modify Indyk’s al-
gorithm to make it run fast enough for processing traﬃc at
very high-speed links (e.g., 10 million packets per second).
Finally, we thoroughly evaluate the accuracy of our solution
by simulating it on real-world packet traces collected at a
tier-1 ISP backbone. We show that our algorithm delivers
very accurate estimations of the OD ﬂow entropies.
The remainder of this paper is organized as follows.
In
Section 2 we give a high-level overview of how the diﬀer-
ent components of our entire scheme works.
In Section 3
through 6 we describe the major components of our algo-
rithm.
• In Section 3 we introduce stable distributions and de-
scribe Indyk’s algorithm to estimate the Lp norm using
them.
• In Section 4 we show how to estimate entropy from Lp
norm.
• In Section 5 we show the intersection measurable prop-
erty (IMP) of the Lp norm algorithm.
• In Section 6 we modify the Lp norm algorithm to im-
prove its accuracy under tight resource constraints.
In Section 7 we discuss the hardware implementation of
our algorithm.
In Section 8 we demonstrate the accuracy
of our algorithm via simulations run on real-world data. In
Section 9 we brieﬂy survey previous work that is related to
ours. Finally, we conclude in Section 10. The Appendix
contains the proof of some of the theorems.
2. PROBLEM STATEMENT AND OVERVIEW
Pn
i=1
its empirical entropy H(S) is deﬁned as −Pn
In this section, we describe precisely the problem of esti-
mating the entropies of OD ﬂows and oﬀer an overview of
our solution approach. As deﬁned before in [16], given a
stream S of packets that contains n (transport-layer) ﬂows
with sizes (number of packets) a1, a2, ..., an respectively,
s ),
i=1 ai is the total number of packets in S.1
where s =
We have shown before [16] that to estimate the empirical
1Throughout this paper logarithms will be base e except in
the deﬁnition of empirical entropy here. Since the logarithm
base e and the logarithm base 2 are diﬀerent by a constant
multiplicative factor, it does not aﬀect our analysis of rela-
tive errors.
s log2( ai
ai
entropy of a stream S, it suﬃces to to estimate a related
quantity called entropy norm ||S||H , deﬁned as
i ai ln (ai),
since H(S) can be rewritten as
X
H(S) = −
ai
s log2
i
s
= log2(e)[ln (s) − 1
s
“ ai
”
X
i
P
ai ln (ai)],
and s is usually a known quantity.
T
The entropy of an OD ﬂow stream ODij between an ingress
point i and an egress point j, is deﬁned as the entropy of
their intersection, i.e., H(ODij ) ≡ H(Oi
T
Dj ). To derive
T
this entropy value from the above formula, however, we need
Dj||H and s in or-
to measure both the entropy norm ||Oi
der to compute the entropy of H(Oi
Dj ). Note that in
our case, s is the volume of the OD ﬂow and is an unknown
quantity that needs to be estimated/inferred separately. As
described in Section 1.2 , our solution is to invent a sketch
for estimating the entropy norm of a stream that has the
intersection measurable property (IMP).
Our algorithm and sketch build upon Indyk’s classical re-
sults on estimating the Lp norm of a stream using the theory
of stable distributions, for values of p in (0, 2]. In [13], In-
P
dyk presents an algorithm for computing the Lp norm of
P
a stream S. For a stream S that contains n ﬂows of sizes
a1, . . . , an, its Lp norm ||S||p is deﬁned as (
i |ai|p)1/p, so
||S||p
i |ai|p. We discover that the data streaming so-
lution of Indyk has the aforementioned IMP. Interestingly,
this nice intersection property was never claimed in [13] or
anywhere else. We will develop an entropy estimation tech-
nique that fully takes advantage of this property and oﬀer
its rigorous analysis.
p =
While the work of Indyk is very inﬂuential, the practi-
cal importance of being able to estimate the Lp norm for
values other than 1 and 2 was never clear.
In our work,
the Lp norms for p values slightly above or below 1 play
a crucial role as follows. On realizing that Indyk’s algo-
rithm can be extended for estimating the Lp norms of an
OD ﬂow, we came up with the wild conjecture that it is
possible to approximate the function x ln(x) using a linear
combination of a small number of functions in the family
{xp|p ∈ (0, 2]}. In other words, we conjectured that we can
that x ln(x) ≈Pk
ﬁnd parameters c1, . . . , ck ∈ R and p1, . . . , pk ∈ (0, 2] such
j=1 cj ∗ xpj . If this conjecture is true, then
Pk
pj , where ||S||pj , j = 1, . . . , k can
j=1 cj ∗||S||pj
we will be able to estimate the entropy norm of an OD ﬂow
stream S as
be estimated using our extension of Indyk’s algorithm for
stream intersection. We emphasize that it took a leap of
faith for us to think in this direction, as most of the approx-
imation schemes we encountered in mathematical literature
are by linear combination of terms like xj (approximation
by polynomial) and sin(x) (Fourier expansion).
Our wild conjecture has been proven correct! To our
amazement we found that by using a linear combination of
2α (x1+α −
only two functions in the family, in the form of 1
x1−α), we can approximate x ln(x) very closely for all x val-
ues in a large interval, e.g., [1, 1000] or [1, 5000]. Here α is a
tunable parameter that takes small values. For example, in
Figure 1, we show how closely we can approximate x ln(x)
using 10(x1.05 − x0.95) within the interval [1, 1000]. In other