# 浅析OGNL的攻防史
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在分析Struts2漏洞的过程中就一直想把OGNL的运行机制以及Struts2对OGNL的防护机制总结一下，但是一直苦于自己对Struts2的理解不是很深刻而迟迟无法动笔，最近看了[lgtm的这篇文章](https://lgtm.com/blog/apache_struts_CVE-2018-11776-exploit)收获良多，就想在这篇文章的基础上总结一下目前自己对于OGNL的一些理解，希望师傅们斧正。
## 0x01 OGNL与Struts2
###  1.1 root与context
OGNL中最需要理解清楚的是root（根对象）、context（上下文）。
  * root：root可以理解为是一个java对象，表达式所规定的所有操作都是通过root来指定其对哪个对象进行操作。
  * context：context可以理解为对象运行的上下文环境，context以MAP的结构，利用键值对关系来描述对象中的属性以及值。
Struts2框架使用了标准的命名上下文（naming context，我实在是不知道咋翻译了-.
-）来执行OGNL表达式。处理OGNL的最顶层对象是一个Map对象，通常称这个Map对象为context
map或者context。而OGNL的root就在这个context
map中。在表达式中可以直接引用root对象的属性，如果需要引用其他的对象，需要使用#标明。
框架将OGNL里的context变成了我们的ActionContext，将root变成了valueStack。Struts2将其他对象和valueStack一起放在ActionContext中，这些对象包括application、session、request
context的上下文映射。下面是一个图例：
###  1.2 ActionContext
ActionContext是action的上下文，其本质是一个MAP，简单来说可以理解为一个action的小型数据库，整个action生命周期（线程）中所使用的数据都在这个ActionContext中。而对于OGNL来说ActionContext就是充当context的，并且在框架中
这里盗一张图来说明ActionContext中存有哪些东西：
可以看到其中有三个常见的作用域request、session、application。
  * attr作用域则是保存着上面三个作用域的所有属性，如果有重复的则以request域中的属性为基准。
  * paramters作用域保存的是表单提交的参数。
  * VALUE_STACK，也就是常说的值栈，保存着valueStack对象，也就是说可以通过ActionContext访问到valueStack中的值。
###  1.3 valueStack
值栈本身是一个ArrayList，充当OGNL的root：
root在源码中称为CompoundRoot，它也是一个栈，每次操作valueStack的出入栈操作其实就是对CompoundRoot进行对应的操作。每当我们访问一个action时，就会将action加入到栈顶，而提交的各种表单参数会在valueStack从顶向下查找对应的属性进行赋值。
这里的context就是ActionContext的引用，方便在值栈中去查找action的属性。
###  1.4 ActionContext和valueStack的关系
可以看到其实ActionContext和valueStack是“相互包含”的关系，当然准确点来说，valueStack是ActionContext中的一部分，而ActionContext所描述的也不只是一个OGNLcontext的代替品，毕竟它更多是为action构建一个独立的运行环境（新的线程）。而这样的关系就导致了我们可以通过valueStack访问ActionContext中的属性而反过来亦然。
其实可以用一种不是很标准的表达方式来描述这样的关系：可以把valueStack想成ActionContext的索引，你可以直接通过索引来找到表中的数据，也可以在表中找到所有数据的索引，无非是书与目录的关系罢了。
## 0x02 OGNL的执行
###  2.1 初始化ValueStack
我们从代码的角度来看看OGNL的执行流。从Struts2框架的代码中，我们可以清楚的看到OGNL的包是位于xwork2中的，而连通Struts2与xwork2的桥梁就是ActionProxy，也就是说在ActionProxy接管整个控制权前，FilterDispatcher就已经完成了对ActionContext的建立与初始化。
而具体的代码是在org.apache.struts2.dispatcher.PrepareOperations中：
在这里如果没有Context存在的话，则会调用ValueStackFactory这个接口的createValueStack方法，跟进看一下：
跟进OgnlValueStackFactory：
这几个参数分别为：
跟进看一下OgnlValueStack的构造方法：
可以看到设置根、设置安全防范措施、以及调用Ognl.createDefaultContext来创建默认的Context映射：
这里我们跟到OgnlContext中看一下，有这么几个对象时比较重要的，他们规定了OGNL计算中的计算规则处理类：
  * _root：在OgnlContext内维护着的Root对象，它是OGNL主要的操作对象
  * _values：如果希望在OGNL计算时使用传入的Map作为上下文环境，OGNL依旧会创建一个OgnlContext，并将所传入的Map中所有的键值对维护在_values变量中。这个变量就被看作真正的容器，并在OGNL的计算中发挥作用。
  * ClassResolver：指定处理class loading的处理类。实际上这个处理类是用于指定OGNL在根据Class名称来构建对象时，寻找Class名称与对应的Class类之间对应关系的处理方式。在默认情况下会使用JVM的class.forName机制来处理。
  * TypeConverter：指定处理类型转化的处理类。这个处理类非常关键，它会指定一个对象属性转化成字符串以及字符串转化成Java对象时的处理方式。
  * MemberAccess：指定处理属性访问策略的处理方式。
可以看到这里的ClassResolver是有关类的寻址以及调用的，也就是常说的所谓的执行。
###  2.2 将现有的值和字段添加进ValueStack中（构造）
在初始化了ValueStack后，发现了后面的container.inject(stack);，这里是将依赖项注入现有的字段和方法，而在这个地方会调用com.opensymphony.xwork2.ognl.OgnlValueStack$setOgnlUtil将我们所关心的黑名单给添加进来：
然而其根本的作用是创建_memberAccess。
这里可以注意到调用栈中首先是初始化了ValueStack之后再通过OgnlUtil这个API将数据和方法注入进ValueStack中，而ValueStack又是利用OgnlContext来创建的，所以会看到OgnlContext中的_memberAccess与securityMemberAccess是同一个SecurityMemberAccess类的实例，而且内容相同，也就是说全局的OgnlUtil实例都共享着相同的设置。如果利用OgnlUtil更改了设置项（excludedClasses、excludedPackageNames、excludedPackageNamePatterns）则同样会更改_memberAccess中的值。
这里可能不太好理解，可以看下面这几张图：
  1. 首先ValueStack本身是个OgnlContext
  * 
  2. 之后调用setOgnlUtil添加黑名单：
  * 
  3. 然后OgnlUtil中的这些值赋给SecurityMemberAccess
  *   * 
也就是与OgnlContext中的_memberAccess建立关系，即创建了_memberAccess：
  * 
而这一点在沙箱绕过时起到了很重要的作用。
###  2.3 创建拦截器（Interceptor）
在之后当控制权转交给ActionProxy时会调用OgnlUtil作为操作OGNL的API，在创建拦截器（Interceptor）时会调用com.opensymphony.xwork2.config.providers.InterceptorBuilder：
在这里利用工场函数来创建拦截器，跟进看一下：
也就是把设置好的黑名单赋到SecurityMemberAccess中，在当前的上下文中用以检验表达式所调用的方法是否允许被调用。
###  2.4 OGNL执行（利用反射调用）
说完了初始化，再来说一下所谓的OGNL执行，在这里引用一下《Struts2技术内幕》这本书的一个表，这个表主要列举了OGNL计算时所需要遵循的一些重要的计算规则和默认实现类：
接下来就跟进CompoundRootAccessor看一下：
在这里拓展了ognl.DefaultClassResovler，可以支持一些特殊的class名称。
## 0x03 OGNL的攻防史
回看S2系列的漏洞，每当我们找到一个可以执行OGNL表达式的点在尝试构造恶意的OGNL时都会遇到这个防护机制，在我看了[lgtm](https://lgtm.com/blog/apache_struts_CVE-2018-11776-exploit)这篇文章后，我就想把围绕SecurityMemberAccess的攻防历史来全部梳理一遍。
可以说所有在对于OGNL的攻防全部都是基于如何使用静态方法。Struts2的防护措施从最开始的正则，到之后的黑名单，在保证OGNL强大功能的基础上，将可能执行静态方法的利用链给切断。在分析绕过方法时，需要注意的有这么几点：
  * struts-defult.xml中的黑名单
  * com.opensymphony.xwork2.ognl.SecurityMemberAccess
  * Ognl包