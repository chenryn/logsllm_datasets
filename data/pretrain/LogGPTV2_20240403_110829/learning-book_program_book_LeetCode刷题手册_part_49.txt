return pq[i].count > pq[j].count
func (pq PriorityQueue) Swap(i， j int) {
pq[i], pq[j] = pq[j], pq[i]
}
// Push define
func (pq *priorityQueue) Push(x interface{}){
item := x.(*Item)
*pq = append(*pq,item)
}
// Pop define
func (pq *priorityQueue) Pop() interface{}{
n := 1en(*pq)
item := (*pq)[n-1]
[-u:](bd) = bd
return item
---
## Page 454
349.IntersectionofTwoArrays
题目
Given two arrays, write a function to compute their intersection.
Example 1:
Input: nums1 = [1,2,2,1], nums2 =[2,2]
output: [2]
Example 2:
Input: nums1 = [4, 9,5], nums2 = [9,4,9,8,4]
output: [9,4]
Note:
● Each element in the result must be unique.
●The result can be in any order.
题目大意
找到两个数组的交集元素，如果交集元素同一个数字出现了多次，只输出一次。
解题思路
把数组一的每个数字都存进字典中，然后在数组二中依次判断字典中是否存在，如果存在，在字典中删
除它（因为输出要求只输出一次）。
代码
package leetcode
func intersection(numsl []int, nums2 []int) []int {
m := map[int]bool{}
var res []int
for _, n := range numsl {
m[n]  = true
for
-,n := range nums2 {
if m[n]{
delete(m, n)
---
## Page 455
res = append(res, n)
return res
350.IntersectionofTwoArraysll
题目
Given two arrays, write a function to compute their intersection.
Example 1:
Input: numsl = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:
Input: nums] = [4,9,5], nums2 = [9,4,9,8,4]
output: [4,9]
Note:
● Each element in the result should appear as many times as it shows in both arrays.
●The result can be in any order.
Follow up:
● What if the given array is already sorted? How would you optimize your algorithm?
● What if nums1's size is small compared to nums2's size? Which algorithm is better?
● What if elements of nums2 are stored on disk, and the memory is limited such that you
cannot load all elements into the memory at once?
题目大意
这题是第349题的加强版。要求输出2个数组的交集元素，如果元素出现多次，要输出多次。
解题思路
---
## Page 456
这一题还是延续第349题的思路。把数组一中的数字都放进字典中，另外字典的key是数组中的数字，
value是这个数字出现的次数。在扫描数组二的时候，每取出一个存在的数组，把字典中的value减
一。如果value是0代表不存在这个数字。
代码
package leetcode
func intersect(numsl []int, nums2 []int) []int {
m := map[int]int{}
var res []int
for _,n := range numsl {
m[n]++
for _, n := range nums2 {
if m[n] >0 {
res = append(res, n)
--[u]
F
return res
354.RussianDollEnvelopes
题目
You have a number of envelopes with widths and heights given as a pair of integers (w, h) . One
envelope can fit into another if and only if both the width and height of one envelope is greater
than the width and height of the other envelope.
What is the maximum number of envelopes can you Russian doll? (put one inside other)
Note: Rotation is not allowed.
Example:
Input: [[5,4], [6,4],[6,7], [2,3]]
output: 3
Explanation: The maximum number of envelopes you can Russian do11 is 3 ([2,3]
=>[5, 4] => [6, 7]) .
题目大意
---
## Page 457
给定一些标记了宽度和高度的信封，宽度和高度以整数对形式（w，h）出现。当另一个信封的宽度和高度
都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。
请计算最多能有多少个信封能组成一组“俄罗斯套娃“信封（即可以把一个信封放到另一个信封里面）。
说明：
·不允许旋转信封。
解题思路
·给出一组信封的宽度和高度，如果组成俄罗斯套娃，问最多能套几层。只有当一个信封的宽度和高
度都比另外一个信封大的时候，才能套在小信封上面。
●这一题的实质是第300题LongestIncreasingSubsequence的加强版。能组成俄罗斯套娃的条件
就是能找到一个最长上升子序列。但是这题的条件是二维的，要求能找到在二维上都能满足条件的
最长上升子序列。先降维，把宽度排序。然后在高度上寻找最长上升子序列。这里用到的方法和第
300题的方法一致。解题思路详解见第300题。
代码
package leetcode
import（
"sort"
)
type sortEnvelopes [][]int
func (s sortEnvelopes) LenO) int {
return len(s)
func (s sortEnvelopes) Less(i, j int) bool {
if s[1][0] == s[j][] {
return s[i][1]  > s[j][1]
return s[i][o] >1
if dp[mid] >= e[1] {
---
## Page 458
high = mid
}else{
1ow = mid + 1
if low ==len(dp){
dp = append(dp, e[1])
}else{
dp[1ow]  = e[1]
}
return 1en(dp)
357.CountNumberswithUniqueDigits
题目
Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x = 10 {
return res[10]
return res[n]
//打表方法
func countNumberswithuniqueDigits(n int) int {
if n == 0 {
return 1
res, uniqueDigits, availableNumber := 10, 9, 9
for n > 1 && availableNumber > 0 {
uniqueDigits = uniqueDigits * availableNumber
res += uniqueDigits
availableNumber--
n==
3
return res
367.ValidPerfectSquare
题目
Given a positive integer num, write a function which returns True if num is a perfect square else
False.
Note: Do not use any built-in library function such as sqrt .
Example 1:
Input: 16
output: true
Example 2:
---
## Page 460
Input: 14
Output: false
题目大意
给定一个正整数num，编写一个函数，如果num是一个完全平方数，则返回True，否则返回False。
说明：不要使用任何内置的库函数，如sqrt。
解题思路
·给出一个数，要求判断这个数是不是完全平方数。
·可以用二分搜索来解答这道题。判断完全平方数，根据它的定义来，是否能被开根号，即找到一个
数的平方是否可以等于待判断的数字。从[1，n]区间内进行二分，若能找到则返回true，找不到就
返回 false。
代码
package leetcode
func isPerfectSquare(num int) bool{
1ow, high := 1, num
for low >1
if mid*mid == num {
return true
} else if mid*mid 利用性质
三
性质
1 %(/991 % 8V921)  991% (01V1% 9V521)) =
>利用性质四
[利用性质三
//
1%((991%8V521)(291% 01V(9V5221)))=
-->乘方性
质
//
（(12345A67%1337)A10)%1337(12345A8%1337))%1337
>利用性质四
//
=（((12345∧67%1337)A10)*（12345A8%1337))%1337
-->反向利
用性质三
func superpow(a int, b []int) int {
res := 1
for i := 0; i  0 {
if (n & 1) == 1 {
res = (res * x) % 1337
x=(x#x)% 1337
n >>= 1
return res
//解法二暴力解法
//利用上面的性质，可以得到：aA1234567%1337=（a^1234560%1337）*（aA7%1337）
%k=（（(（a^123456)%1337)A10)%1337*（a^7%1337))%1337;
func superPowl(a int, b []int) int {
if 1en(b) == 0 {
return 1
last := b[len(b) -1]
1 := 1
//先计算个位的a^x结果，对应上面例子中的（a^7%1337）%1337
---
## Page 464
for i := l; i <= last; i++ {
1 = 1  a % 1337
//再计算除去个位以外的aAy的结果，对应上面例子中的（a^123456）%1337）
temp := superPowl(a, b[:1en(b)-1])
f := 1
//对应上面例子中的（（（aA123456）%1337）A10）%1337
for i := 1; i <= 10; i++ {
f = f t temp % 1337
return f # 1 % 1337
上
373.FindKPairswithSmallestSums
题目
You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
Define a pair (u,v) which consists of one element from the first array and one element from the
second array.