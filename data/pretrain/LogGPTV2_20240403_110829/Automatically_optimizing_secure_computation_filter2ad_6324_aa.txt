# Automatically Optimizing Secure Computation
**Author:** Florian Kerschbaum  
**Affiliation:** SAP Research, Karlsruhe, Germany  
**Email:** [EMAIL]

## Abstract
While compilers for secure computation protocols, such as FairPlay and FairPlayMP, have significantly simplified the development of these protocols, optimized protocols with high performance for specific problems still require manual development and security verification. This paper explores whether a compiler can generate optimized secure computation protocols. We introduce an optimization technique based on logical inference about what is known from input and output. Using the example of median computation, we demonstrate that our program analysis and rewriting technique can transform a FairPlay program into an equivalent program (in terms of functionality and security) that matches the protocol by Aggarwal et al. Our technique is general and can be applied to optimize a wide variety of secure computation protocols.

## Categories and Subject Descriptors
- **D.3.4 [Programming Languages]: Processors—Optimization**
- **D.4.6 [Operating Systems]: Security and Protection—Cryptographic controls**

## General Terms
- **Security, Programming Languages**

## Keywords
- **Secure Two-Party Computation, Programming, Optimization**

## 1. Introduction
Secure (multiparty) computation protocols [4, 7, 15, 31] enable multiple parties to compute a function on their joint input without revealing any additional information beyond what can be inferred from one's input and output. This provides a compelling solution to many real-world problems where collaboration is hindered by the reluctance to disclose sensitive data. Privacy-preserving data mining [2, 21] is one such example.

Developing secure computation protocols is notoriously challenging due to the high level of domain expertise required. Compilers like FairPlay [23] and FairPlayMP [6] have simplified this process by implementing general techniques (Yao's protocol [31] and Beaver et al.'s protocol [4]) in a cryptographic protocol layer and translating a program describing the ideal functionality into a circuit interpreted by this layer. However, the compiler approach can be inefficient and is not suitable for large problem instances.

Optimized secure computation protocols for specific problems often require hand-crafted proofs of security, which are difficult and time-consuming. The question then arises: Can a compiler produce optimized secure computation protocols? In this paper, we present an optimization technique for a secure computation compiler. To the best of our knowledge, this is the first such technique. Our optimizer takes a FairPlay program in the Secure Function Definition Language (SFDL) as input and outputs a Java program with several calls to FairPlay as a subroutine.

The core idea is that anything that can be inferred from one's input and output is known and can be revealed during the computation without needing secure computation. We use logical inference to estimate the knowledge of each agent about a program's variables and extract all operations on known data to the local agent's Java program. This reduces the amount of functionality that needs to be computed securely and the size of the circuits.

This paper contributes:
- **Logical inference rules** about an agent's knowledge in an SFDL program.
- **A program transformation** based on the results of the inference.
- **An evaluation** using example applications of median and weighted average computations.

## 2. Running Example
We use the joint computation of the median as a running example. Consider two parties, Alice and Bob, each with a set of \( n \) distinct integers. They want to jointly compute the median element of the union of their sets without disclosing any other information. We implement the distributed algorithm by Aggarwal et al. [1], where each party's set is sorted in ascending order. The algorithm proceeds in several rounds, comparing the medians of the sets and discarding elements until the sets have size 1, at which point the lower median is chosen as the joint median.

We implemented this algorithm in SFDL of the FairPlay system [23]. Efficiently accessing the median of a variably sized array in SFDL is challenging, so we unrolled the loops and precomputed the division. For simplicity, we set \( n = 2 \) and replaced arrays with structures of scalar variables, as shown in Listing 1.

Aggarwal et al. [1] also presented a distributed, secure protocol. The key insight is that given the output of the joint median, the result of each comparison can be inferred. Thus, only the comparisons need to be implemented using secure computation, while all other operations can be performed locally. The relevant comparisons in Listing 1 are in lines 17 and 25.

The protocol by Aggarwal et al. cannot be implemented as a single FairPlay program. Instead, we used the L1 language and system for mixed-protocol secure computation [30], as shown in Listing 2. In L1, the same program is executed by both parties, except for lines preceded by numbers, which are executed by the respective party. The function call `comp32` in lines 9 and 17 invokes a secure computation of a comparison using the local input \( x \).

```sfdl
program Median {
    type Elem = Int;
    type AliceInput = struct { Elem x, Elem y };
    type AliceOutput = Elem;
    type BobInput = struct { Elem x, Elem y };
    type BobOutput = Elem;
    type Input = struct { AliceInput alice, BobInput bob };
    type Output = struct { AliceOutput alice, BobOutput bob };

    function Output out(Input in) {
        var Elem a, b;
        if (in.alice.x <= in.bob.x) {
            a = in.alice.y;
            b = in.bob.x;
        } else {
            a = in.alice.x;
            b = in.bob.y;
        }
        if (a <= b) {
            out.alice = a;
            out.bob = a;
        } else {
            out.alice = b;
            out.bob = b;
        }
    }
}
```
**Listing 1: Median Computation in FairPlay**

```l1
include "utilYaoOTs.l1";
include "compareYao.l1";

int Median() {
    int x = loadInt("input x" + id());
    int y = loadInt("input y" + id());
    int a;

    if (comp32(x) == 1) {
        1: a = y;
        2: a = x;
    } else {
        1: a = x;
        2: a = y;
    }

    if (comp32(a) == 1) {
        1: send(2, "a", a);
        2: a = readInt("a");
    } else {
        1: a = readInt("a");
        2: send(1, "a", a);
    }

    return a;
}

Median();
```
**Listing 2: Median Computation in L1**

## 3. Transformation

### 3.1 Semi-Honest Security
We consider secure computation protocols secure in the semi-honest model [14]. In this model, an adversary adheres to the protocol but may keep a record of the interaction and later try to infer additional information. A protocol secure in the semi-honest model ensures that no information about a party's input is revealed beyond what can be inferred from one's input and output.

### 3.2 Algorithm
Our algorithm for transforming an SFDL program uses variable labeling. Each variable is assigned one or more of the labels {A} or {B}. Labels are non-exclusive, meaning a variable can have none, one, or both labels. A variable labeled {A} is known to Alice, and a variable labeled {B} is known to Bob. A variable with no labels is secret and must be implemented using secure computation, while a variable with both labels is public and can be freely shared.

The program text and constants are known to both parties. Our optimization algorithm proceeds as follows:
1. Convert the SFDL program into single-static assignment (SSA) form.
2. Use our inference algorithm to determine the labels of each variable.
3. Segment the program into different protocols. Statements where all variables are known to any party are executed locally by that party. Statements with operands whose intersection of labels is empty are executed using secure computation.

### 3.3 Static Single Assignment
We convert the SFDL program into static single assignment (SSA) form [9]. In SSA, each variable is assigned at most once and never changed. If a variable is changed in the original program, a new variable is introduced in SSA.

```sfdl
a_A = b_A + c_AB;
```
**Listing 3: Local Computation**

```sfdl
a_AB = b_A < c_B;
```
**Listing 4: Secure Computation**

### Performance Evaluation
We ran experiments with both protocols for different joint set sizes \( 2n = 4, 8, 16, 32, 64 \). The performance measurements, shown in Figure 1, indicate that the L1 implementation outperforms the FairPlay implementation by more than a factor of 30 for 64 elements in the joint set.

![Figure 1: Secure Median](#)

## 4. Evaluation
We evaluated our technique using example applications of median and weighted average computations. The results show significant performance improvements compared to the original FairPlay programs.

## 5. Related Work
[Description of related work]

## 6. Conclusion
[Conclusion and future work]

---

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

**CCS'11, October 17–21, 2011, Chicago, Illinois, USA.**
**Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.**