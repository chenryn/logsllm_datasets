connection retry, it can check that it is authentic. We simply write nonceC for the nonce eventually used
by the client, and [nonceS] for the (optional) server nonce. Because of the strike registers, we presume in
our protocol abstraction that any honest server accepts any client nonce only once.
Handshake messages are tagged, e.g., the client resp. server hello message in the handshake phase carry
special tags CHLO and SHLO, and may contain further information like the version numbers. However,
many of these entries are optional and do not directly contribute to the cryptographic strength of the key
exchange step (except that they enter the key derivation step in a non-critical way, see below). We thus
simply write aux for these data, with a subscript for the corresponding party.
Key derivation. Key derivation is performed via HMAC with SHA-256, as speciﬁed by NIST SP800-
56C [Che11]. This is a two-stage derivation process. In the ﬁrst extraction step via function KDFext one
computes a pseudorandom master key PRK from the corresponding Diﬃe-Hellman key, using the client
nonce and possibly the server nonce as a salt input. In our security proof we model this extraction function
as a random oracle.
In the second expansion step, one derives client and server write keys and IV values by expanding the
PRK via KDFexp. Here, the input are the client hello message, the (public) server conﬁguration, and a
label distinguishing the ﬁrst-stage key (“QUIC key expansion”) from the second-stage key (“QUIC forward
secure key expansion”). We denote these data by info1 and info2, respectively. Note that they are both
9There are only a few exceptions where the certiﬁcation process has been considered to be an integral part of cryptographic
protocol, e.g. [BFPW07, FW09, BCF+13], where the latter one deals with key exchange explicitly.
18
determined given the client’s ephemeral key, the nonces, the auxiliary data and the stage number. We
assume in our analysis that KDFexp is a random oracle, too.
Session identiﬁers and partners. For the analysis we also need to specify the intended partners and
the session identiﬁers. Since clients are not authenticated in QUIC, we assume that the responder in an
execution, i.e., the server, sets the partner identity label.V to ‘*’. The client on the other hand sets the
partner entry to the identity of the server speciﬁed through the public key. As for session identiﬁers, for both
parties we let sid1 = info1 and sid2 = (info1,{auxS, tpkS}K1), where the latter value is the authenticated
ciphertext sent by the server. Note that the session identiﬁers are only set to these values once the
corresponding party accepts, and are ⊥ otherwise. We remark that auxC, containing the used server
conﬁguration’s ID, together with the veriﬁed certiﬁcation of the server conﬁguration uniquely identiﬁes
the full conﬁguration used in the key derivation. Furthermore, observe that info1 and info2 can be derived
mutually from another, as they only diﬀer in some constant labels.
4.2 Cryptographic Analysis of QUIC
For the security proof we will rely on the random oracle model and the Gap-Diﬃe-Hellman problem [OP01],
like many other DH-based key exchange protocols, e.g., [JP02, KP05, LM06, DF11] to name a few. The
property basically says that solving the (computational) DH problem remains hard, even having access to
a decisional oracle DDH(X, Y, Z) which returns 1 if and only if DH(X, Y ) = Z. Formally, for an adversary
the probability that A solves the following problem: On input the description
A we denote by AdvGapDH
of the group G of known prime order q, together with a generator g of G, and random X, Y ← G, the task
is to ﬁnd Z such that Z = DH(X, Y ), when given access to oracle DDH(·,·,·).
G,A
Besides the underlying number-theoretic problem, we also need security of the channel protocol which
is used for the server hello message. Since we only need authenticity, we can simply deﬁne security as
{·},A the probability that adversary A, when allowed to query the channel oracle
follows: We denote by AdvAuth
{·}K for a random key K at most once, is able to create in an attempt a channel message (not returned
by the oracle) such that decryption under K yields a valid message. Note that we merely require one-time
authenticity because we analyze QUIC as a key exchange protocol only, assuming that no payload data
are sent by the client in the ﬁrst stage. Full security would ideally follow from our compositional result;
alas, QUIC is not key-independent. We note that one could extend our analysis to a monolithic proof of
the security of the stage-two key if one assumes adaptive multi-query authenticity of the channel protocol.
Theorem 4.1 (Match security of QUIC) For any adversary A we have responder-authenticated uni-
lateral Match-security, i.e., AdvMatch
s/q, where ns is the maximal number of initiated sessions and
q denotes the size of the group G.
QUIC,A ≤ n2
Proof (Theorem 4.1). We need to show the four properties of Match-security. For the ﬁrst one, preventing
that two sessions (of the same stage) accept with identical (and valid) session identiﬁers label.sidi =
label(cid:48).sidi, but diﬀerent session keys, note that identical session identiﬁers in QUIC (at either stage) imply
that the input to the key derivation functions are identical, too. Hence there cannot exist stages with
identical session identiﬁers but diﬀerent keys.
The second property of Match-security describes the impossibility of having identical session identiﬁers
but the client thinking that it communicates with a diﬀerent server (i.e., label.V (cid:54)= label(cid:48).U ). Note that
the server’s public key in QUIC is part of both session identiﬁers and that the identity can be reliably
deduced from the key resp. the certiﬁcate by assumption, thus the property holds.
The third property demands that session identiﬁers are distinct across diﬀerent stages. This is imme-
diately satisﬁed by sid2 containing more elements than sid1.
19
Finally, for the fourth property, three sessions with identical session identiﬁers, note that the probability
that two sessions of honest clients create the same random ephemeral key is at most n2
s/q by the birthday
bound. Here we use that corrupting a user terminates the interaction with the session such that, in
particular, that session does not generate session identiﬁers. Given that no such collision occurs, the three
sessions in question must include two sessions of honest servers. But the client nonce, appearing both in
sid1 and in sid2, contains the server’s orbit and this value also enters the session identiﬁer. Hence, the two
servers in the same orbit must have accepted the same client nonce twice, contradicting our assumption
(cid:3)
about the strike registers.
Theorem 4.2 (Multi-Stage security) In the random oracle model QUIC is a (responder-authenticated)
unilateral, key-dependent, stage-2-forward-secret key exchange protocol such that for any eﬃcient adversary
A there exist eﬃcient algorithms B and C with
QUIC,A ≤ 2ns ·(cid:0)(nsnu + nsnt) · AdvGapDH
G,B
(cid:1),
AdvMulti-Stage
+ (2qh + 4qhns) · 2− min{|PRK1|,|PRK2|} + ns · Advauth{·},C
where ns is the maximal number of sessions, nu is the maximal number of users, nt is the maximal number
of temporary keys generated, and qh is the total number of random oracle queries of the adversary.
Proof (Theorem 4.2). First, we may consider the case that the adversary makes a single Test query only.
This can decrease the success probability by a factor at most 1/2ns by a hybrid argument replacing as
there are at most 2ns keys. From now on we can therefore speak of the tested session. Recall further that
for an admissible Test query in a responder-authenticated unilateral protocol, the query must be either
for an initiator session (i.e., for a client in QUIC), or for a partnered server session such that the client’s
ephemeral public key originates from a session of an honest client.
Stage-1 secrecy. Consider ﬁrst the (non-forward) secrecy of the session keys of the ﬁrst stage. We can
bound the adversary’s success probability to distinguish the keys from random by (a) the probability that
the adversary queries the random oracle KDFext about the DH key (speciﬁed through the session identiﬁer
of the tested session), plus (b) the conditional probability that A succeeds given that it has not queried
KDFext about the key before. In the latter case, the corresponding value PRK1 is an unknown random value
for the adversary. Furthermore, since the adversary cannot reveal the session key in partnered sessions
and keys for other session identiﬁers are distributed independently, distinguishing the derived test session
key from random is then given by the (pseudo)randomness of KDFexp. To be precise, we can bound the
adversary’s advantage by its number of queries to the random oracle in proportion to the size of possible
PRK1 values, i.e., by qh · 2−|PRK1|.
The former probability of making the query to KDFext about the DH value can be bounded in terms
of the GapDH problem, along the arguments for similar protocols, e.g. [JP02, KP05, LM06, DF11]. That
is, one guesses two sessions, one being a client session, the other one being a server session, and injects
the given challenge values X, Y of the GapDH problem into the client’s ephemeral key and the server’s
static public key. The hope is that these sessions will correspond to the Test query, which is either for a
client session, or for a server session, but which is then partnered to the (hopefully correctly predicted)
client session and key.
If the adversary makes the random oracle query about the DH key of the two
values, then we can solve the DH problem. Here, in the course of the simulation, the server’s long-term
key may be used in another session, in which we could not derive the corresponding DH key. Using the
same technique as in previous works, we leverage the decisional DH oracle to simulate the random oracle
via implicit representation of DH tuples.
More formally, we build a reduction B to the GapDH problem as follows. We are given G, g and two
random group elements X, Y and are supposed to compute Z = DH(X, Y ) with the help of a decisional
oracle DDH(·,·,·). We initially guess one of the at most ns executions and one of the at most nu server keys
20
at random. We will use X in the predicted execution as the honest client’s ephemeral key (and abort if the
session starts but is not by a client nor by an honest party), and analogously use Y as the server’s long-term
public key. Run now the attack of the stage-1 adversary by emulating the honest parties’ behavior, with
the only exception that honest parties sometimes need to skip hash computation and instead maintain an
implicit representation. This is necessary in the case that the injected keys appear and we cannot compute
the DH values on behalf of the honest parties. We will match this list against the explicitly computed
hash values by the adversary. Note that the adversary will be oblivious about this structural modiﬁcation,
as we still simulate the random oracle as before and the input/output behavior of the honest parties are
statistically indistinguishable from its point of view.
To simulate the execution we maintain an initially empty list and use it as follows to compute hash
answers for both stages:
• If the adversary makes a hash query to the extraction random oracle KDFext about (D, nonceC,
[nonceS]), then we return a (consistent) random answer PRK via lazy sampling, i.e., where we answer
previous queries as before and pick a fresh value for a new query. Next we check if we can update our
list by searching for entries ({A, B}, nonceC, [nonceS], info,∗, K) with DDH(A, B, D) = 1 and where
the value for PRK has not been set yet.10 Note that we can check for this eﬃciently since the size of
the list will be bounded by the number of sessions, and each element can be checked easily with the
help of the decision oracle. If we ﬁnd such an entry then we set the wildcard ∗ to PRK.
• If the adversary makes a query (PRK, info) to the expansion random oracle KDFexp we ﬁrst search
for entries ({A, B}, nonceC, [nonceS], info, PRK, K) with matching entries for info and PRK in our list.
If we ﬁnd such an entry then we return K. Else we answer (consistently) as the random oracle would.
• If a (simulated) honest party is supposed to compute a K for group elements A and B, nonces
nonceC and [nonceS], and execution information info, then we proceed as follows: If the party could
compute the DH key D itself we do so and proceed as in the adversarial cases above, possibly updating
information in our list. If the party could not compute the DH key, say, because it involves the injected
server’s long-term key Y , then it searches for an entry ({A, B}, nonceC, [nonceS], info, PRK|∗, K) in the
list (where ‘PRK|∗’ stands for ‘either PRK or ∗’) and subsequently uses K. If there is no such entry
then it picks K at random for subsequent usage, and adds an entry ({A, B}, nonceC, [nonceS], info,∗, K)
to the list.
The list strategy basically allows the reduction to implicitly set the PRK value and adjust it later. An
inconsistency can happen if the adversary asks the expansion oracle KDFexp about a value (PRK, info) to
receive a key K, before having received PRK as a reply from the extraction oracle KDFext. If we later set
the wildcard ∗ in our list to that value PRK but for a diﬀerent key, then this does not match the adversary’s
expectation. However, since the value PRK is chosen at random, the probability that this happens among
the at most qh random oracle queries of the adversary and the at most 2ns list entries (of both stages) is
at most 2qh · ns · 2− min{|PRK1|,|PRK2|}.
Recall that we assume that the adversary makes a hash query to derive PRK1 in the Test session. We
can check for all queries via the decisional oracle if this has already happened; if so we can output the
correct value and solve the GapDH problem in this case. Also observe that the Test session must be either
between an honest client and an uncorrupted server, or that the server must be honest and the client’s
ephemeral must origin from an honest client. Therefore, given that the simulation does not generate
any inconsistency, our simulation is perfectly indistinguishable from an actual attack of the adversary’s
10Here, and also below, the optional server nonce [nonceS ] should only be used in the list operations if it also appears in the
hash query, e.g., if the adversary queries about (D, nonceC) then we also search the list for entries ({A, B}, nonceC, info,∗, K).
21
viewpoint. In particular, the Test session then uses our injected keys X, Y with probability at least
allowing us to solve the GapDH problem in this case.
Finally, to complete the argument, note that the adversary cannot succeed by hoping that another
session with diﬀerent session identiﬁer sid(cid:48)
1 yields the same input (PRK1, info1) to KDFexp. This would
potentially allow the adversary to Reveal that session key and distinguish the tested key from random.
The reason is simply that the session identiﬁer information completely enters the key derivation and the
session keys of distinct sessions are thus distributed independently.11
ns·nu
1
,
Stage-2 forward secrecy. To show stage-2 forward secrecy, we distinguish again between the cases
that the adversary queries the random oracle about the DH key of stage 2, and that it does not (in which
case the randomness of PRK2 ensures security of the session keys again with a bound of qh · 2−|PRK2|). For
the ﬁrst case, however, we have to apply a more ﬁne-grained case distinction now. To this end, we ﬁrst
show that the adversary essentially cannot inject its own temporary key into the server’s hello message;
else this would clearly violate security. For this we argue that the ﬁrst stage key K1 of the tested client
session with label label still looked random to the adversary when the server hello message has been sent
but not yet received. This follows as above and from the following three properties:
1. Because of the key dependence, the adversary cannot learn the key K1 via a Reveal(label, 1) query to
the test session; such queries are prohibited before the key K2 has been established.
2. For the same reason, key dependence, the adversary cannot learn K1 by revealing the key of a session
label(cid:48) which is partnered according to the stage-one session identiﬁer (label.sid1 = label(cid:48).sid1). Any
such reveal request would make K1 and K2 in the tested session revealed, according to the Reveal
query in which keys for partnered sessions are set to revealed for the current and all subsequent
stages.
3. Corruptions of the test session’s party could only have happened after K2 has been established.
Since K1 has looked fresh, we can then argue along the authenticity of the K1-channel. The adversary either
gets to see one or none channel message for the fresh key K1 (depending on whether there is a partnered
session to label), and needs to break the authenticity if it manages to send a new valid ciphertext. This is
bounded by advantage Advauth{·},C times the factor to guess the right sessions again.
More formally, we consider the probability that the adversary in the attack sends to the (honest) client
in an execution for info1 a ciphertext which the client does not reject but which has not been created by
the (honest) server, as speciﬁed in info1. Note that this comprises the case that the adversary tries to
forge an authentic ciphertext from scratch, or that it has forwarded the client’s ﬁrst message to the server
and got a diﬀerent, valid ciphertext as reply. We bound this probability by the advantage of an adversary
against the authenticity of the channel protocol.
Our adversary C against the channel basically simulates the honest parties for the key exchange attacker
with one exception: It initially selects one of the at most ns client sessions (with identiﬁer info1) at random
and waits for an honest server session in which the client has sent nonceC, auxC, and epkC of info1 and is
supposed to answer using the key K1. Note that by the strike registers this server session is uniquely
determined. Our adversary prepares the server’s answer according to the protocol, e.g., using its current
temporary key, but then eventually calls its external channel oracle to create the authenticated ciphertext
(under a fresh key). If the adversary against the key exchange protocol sends a reply to the predicted
client session involving the same data info1, then we output this ciphertext as a potential forgery.
By the argument for stage-1 security, and the fact that the adversary cannot learn key K1 in session info1
by other means like Reveal queries because of key dependence, it follows that using the fresh key instead
11The derived keys may be identical by chance but this does not violate our analysis.
22
of K1 cannot inﬂuence the adversary’s success probability signiﬁcantly. Intuitively, one may think of K1
as having been replaced by the random value used in the game AdvAuth
{·},C . Hence, a key-exchange adversary
as above would essentially win with the same probability as in game AdvAuth