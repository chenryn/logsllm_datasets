###  什么是基于DOM的JS注入？
JS注入就是用户输入可以被当成一个JS脚本执行
###  哪些sink可以导致基于DOM的JS注入漏洞？
  * eval()
  * Function()
  * setTimeout()
  * setInterval()
  * setImmediate()
  * execCommand()
  * execScript()
  * msSetImmediate()
  * range.createContextualFragment()
  * crypto.generateCRMFRequest()
###  基于DOM的操纵文档域
###  什么是基于DOM的操纵文档域？
当浏览器采用同源策略时会使用document.domain属性，如果两个站点的值是相同的则会被认为是同源，就可以不受限制地互相访问资源，从而发动跨域攻击。
###  哪个sink可以导致基于DOM的操纵文档域漏洞？
  * document.domain
###  基于DOM的WebSocket-URL投毒
###  什么是基于DOM的WebSocket-URL投毒？
就是把用户输入作为一个WebSocket连接的目标URL并发出请求。
###  哪个sink可以导致基于DOM的WebSocket-URL投毒漏洞？
  * WebSocket构造器
###  基于DOM的操纵链接
###  什么是基于DOM的操纵链接？
就是在当前页面将用户输入的数据写入一个跳转目标中
###  哪些sink可以导致基于DOM的操纵链接漏洞？
  * someDOMElement.href
  * someDOMElement.src
  * someDOMElement.action
###  基于DOM的操纵Web消息
###  什么是基于DOM的操纵Web消息？
就是将用户输入作为Web消息传递给一个文档中，当用户访问时发出恶意请求。
###  哪个sink可以导致基于DOM的操纵Web消息漏洞？
  * postMessage()
###  基于DOM的操纵Ajax请求头
###  什么是基于DOM的操纵Ajax请求头？
就是将用户输入写入一个使用XmlHttpRequest对象发出ajax的请求的请求头中
###  哪些sink可以导致基于DOM的操纵Ajax请求头漏洞？
  * XMLHttpRequest.setRequestHeader()
  * XMLHttpRequest.open()
  * XMLHttpRequest.send()
  * jQuery.globalEval()
  * $.globalEval()
###  基于DOM的操纵本地文件路径
###  什么是基于DOM的操纵本地文件路径？
就是将用户输入作为一个filename参数传递到一个文件处理API中
###  哪些sink可以导致基于DOM的操纵本地文件路径漏洞？
  * FileReader.readAsArrayBuffer()
  * FileReader.readAsBinaryString()
  * FileReader.readAsDataURL()
  * FileReader.readAsText()
  * FileReader.readAsFile()
  * FileReader.root.getFile()
  * FileReader.root.getFile()
###  基于DOM的客户端SQL注入
###  什么是基于DOM的客户端SQL注入？
就是以一种不安全的方式把用户输入拼接到一个客户端的sql查询语句中，然后获取意外的结果。
###  哪个sink可以导致基于DOM的客户端SQL注入漏洞？
  * executeSql()
###  基于DOM的操纵HTML5存储
###  什么是基于DOM的操纵HTML5存储？
就是把用户输入存储到浏览器的H5存储中
###  哪些sink可以导致基于DOM的操纵HTML5存储漏洞？
  * sessionStorage.setItem()
  * localStorage.setItem()
###  基于DOM的客户端XPath注入
###  什么是基于DOM的客户端XPath注入？
就是将用户输入拼接到一个XPath查询语句中，与前面的客户端Sql注入类似。
###  哪些sink可以导致基于DOM的客户端XPath注入漏洞？
  * document.evaluate()
  * someDOMElement.evaluate()
###  基于DOM的客户端JSON注入
###  什么是基于DOM的客户端JSON注入？
就是将用户输入拼接到一个可被解析为json数据结构并由应用程序处理的字符串中，然后构造异常的解析结果。
###  哪些sink可以导致基于DOM的客户端JSON注入漏洞？
  * JSON.parse()
  * jQuery.parseJSON()
  * $.parseJSON()
###  基于DOM的操纵DOM数据
###  什么是基于DOM的操纵DOM数据？
就是将用户输入写入一个使用透明UI或客户端逻辑的DOM区域然后执行异常的DOM操作。
###  哪些sink可以导致基于DOM的操纵DOM数据漏洞？
  * scriptElement.src
  * scriptElement.text
  * scriptElement.textContent
  * scriptElement.innerText
  * someDOMElement.setAttribute()
  * someDOMElement.search
  * someDOMElement.text
  * someDOMElement.textContent
  * someDOMElement.innerText
  * someDOMElement.outerText
  * someDOMElement.value
  * someDOMElement.name
  * someDOMElement.target
  * someDOMElement.method
  * someDOMElement.type
  * someDOMElement.backgroundImage
  * someDOMElement.cssText
  * someDOMElement.codebase
  * document.title
  * document.implementation.createHTMLDocument()
  * history.pushState()
  * history.replaceState()
###  基于DOM的拒绝服务
###  什么是基于DOM的拒绝服务？
就是将用户输入以不安全的方式传入一个有可能会消耗大量计算资源的API中
###  哪些sink可以导致基于DOM的拒绝服务漏洞？
  * requestFileSystem()
  * RegExp()
###  如何缓解基于DOM的污点流(taint-flow)漏洞？
上面那么多种情况，总结一点，想要缓解这种漏洞只能对传递到sink的值进行严格地审查，设置白名单，然后根据上下文严格对其进行编码。没有很容易的防护手段。
###  DOM clobbering
###  什么是DOM clobbering？
梨子目前还并未找到关于这个专有名词比较贴切的中文翻译。DOM
clobbering就是注入HTML利用DOM篡改页面中的JS脚本。常见做法就是通过锚点元素覆盖全局变量，当应用程序使用该变量时触发。起名clobbering意为利用DOM覆盖现有的JS脚本，有捣乱的含义。
###  如何利用DOM clobbering？
JS开发者比较常用这样的模式  
`var someObject = window.someObject || {};`  
如果我们可以控制HTML，则可以利用DOM节点去破坏对someObject的引用。例如
想要利用这段代码我们可以构造这样的payload  
``  
这条payload可以通过插入id相同的节点覆盖原有的节点，然后利用值为url的name属性破坏指向外部脚本的someObject对象的url属性。
* * *
另外一种手段就是使用form元素搭配一个如input元素去破坏DOM属性。例如破坏attributes让过滤器失去作用，这样就可以让之前无法注入的属性重新可以注入了。例如  
`Click me`  
因为我们将id也设置为attributes，过滤器会在input属性中进入死循环，则会允许执行后面本来应被过滤的危险属性。
###  配套靶场1：利用DOM clobbering发动XSS
我们找到形如上面的一条代码  
从上面得知我们可以对defaultAvatar发动DOM
clobbering，经过burp提示，cid协议没有被resources/js/domPurify-2.0.15.js过滤掉，所以可以利用cid协议绕过对双引号的转义，于是我们可以构造如下payload
这样我们就可以成功发动XSS了
###  配套靶场2：利用DOM clobbering绕过HTML过滤器
首先我们在评论区注入消除掉过滤器作用的XSS payload
然后在Eploit
Server设置一个延时的操作，为了保证能够有充足时间执行JS，延时结束后会在src后加一个锚点x，此时会访问id为x的表单，触发里面的XSS
payload
至此，成功绕过HTML过滤器发动XSS
###  如何缓解DOM clobbering攻击？
可以检查DOM
节点的attributes属性是否实际上是NamedNodeMap的实例，确保attributes是一个属性，而不是一个被clobbering的元素。而且还要避免使用全局OR逻辑运算符(||)。使用DOM审查库，如DOMPurify，进行严格的审查。
## 总结
以上就是梨子带你刷burpsuite官方网络安全学院靶场(练兵场)系列之客户端漏洞篇 –
基于DOM的漏洞专题的全部内容啦，本专题主要讲了基于DOM的漏洞形成原理，以及多种由不同source和sink导致的污点流漏洞的利用、防护，最后还介绍了高级的DOM
clobbering攻击的利用及防护，感兴趣的同学可以在评论区进行讨论，嘻嘻嘻。