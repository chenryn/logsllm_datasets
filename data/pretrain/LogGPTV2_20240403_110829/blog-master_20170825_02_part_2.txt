insert into t_ao_row_2m_9 select id, repeat(md5(random()::text), 128), random()*10000 from generate_series(1,10000000) t(id);  
explain analyze select c2,count(*) from t_ao_row_2m_9 group by c2;  
explain analyze select * from t_ao_row_2m_9 where c2=1;  
create index idx_t_ao_row_2m_9 on t_ao_row_2m_9(c2);  
explain analyze select * from t_ao_row_2m_9 where c2=1;  
-- AO 列存  
-- 不压缩, 8K  
create table t_ao_COLUMN_8k_0(id int, c1 text, c2 int) with (appendonly=true, blocksize=8192, ORIENTATION=COLUMN, COMPRESSTYPE=NONE, CHECKSUM=false);  
insert into t_ao_COLUMN_8k_0 select id, repeat(md5(random()::text), 128), random()*10000 from generate_series(1,10000000) t(id);  
explain analyze select c2,count(*) from t_ao_COLUMN_8k_0 group by c2;  
explain analyze select * from t_ao_COLUMN_8k_0 where c2=1;  
create index idx_t_ao_COLUMN_8k_0 on t_ao_COLUMN_8k_0(c2);  
explain analyze select * from t_ao_COLUMN_8k_0 where c2=1;  
-- 不压缩, 2M  
create table t_ao_COLUMN_2m_0(id int, c1 text, c2 int) with (appendonly=true, blocksize=2097152, ORIENTATION=COLUMN, COMPRESSTYPE=NONE, CHECKSUM=false);  
insert into t_ao_COLUMN_2m_0 select id, repeat(md5(random()::text), 128), random()*10000 from generate_series(1,10000000) t(id);  
explain analyze select c2,count(*) from t_ao_COLUMN_2m_0 group by c2;  
explain analyze select * from t_ao_COLUMN_2m_0 where c2=1;  
create index idx_t_ao_COLUMN_2m_0 on t_ao_COLUMN_2m_0(c2);  
explain analyze select * from t_ao_COLUMN_2m_0 where c2=1;  
-- 压缩比5, 8K  
create table t_ao_COLUMN_8k_5(id int, c1 text, c2 int) with (appendonly=true, blocksize=8192, ORIENTATION=COLUMN, COMPRESSTYPE=zlib, COMPRESSLEVEL=5, CHECKSUM=false);  
insert into t_ao_COLUMN_8k_5 select id, repeat(md5(random()::text), 128), random()*10000 from generate_series(1,10000000) t(id);  
explain analyze select c2,count(*) from t_ao_COLUMN_8k_5 group by c2;  
explain analyze select * from t_ao_COLUMN_8k_5 where c2=1;  
create index idx_t_ao_COLUMN_8k_5 on t_ao_COLUMN_8k_5(c2);  
explain analyze select * from t_ao_COLUMN_8k_5 where c2=1;  
-- 压缩比5, 2M  
create table t_ao_COLUMN_2m_5(id int, c1 text, c2 int) with (appendonly=true, blocksize=2097152, ORIENTATION=COLUMN, COMPRESSTYPE=zlib, COMPRESSLEVEL=5, CHECKSUM=false);  
insert into t_ao_COLUMN_2m_5 select id, repeat(md5(random()::text), 128), random()*10000 from generate_series(1,10000000) t(id);  
explain analyze select c2,count(*) from t_ao_COLUMN_2m_5 group by c2;  
explain analyze select * from t_ao_COLUMN_2m_5 where c2=1;  
create index idx_t_ao_COLUMN_2m_5 on t_ao_COLUMN_2m_5(c2);  
explain analyze select * from t_ao_COLUMN_2m_5 where c2=1;  
-- 压缩比9, 8K  
create table t_ao_COLUMN_8k_9(id int, c1 text, c2 int) with (appendonly=true, blocksize=8192, ORIENTATION=COLUMN, COMPRESSTYPE=zlib, COMPRESSLEVEL=9, CHECKSUM=false);  
insert into t_ao_COLUMN_8k_9 select id, repeat(md5(random()::text), 128), random()*10000 from generate_series(1,10000000) t(id);  
explain analyze select c2,count(*) from t_ao_COLUMN_8k_9 group by c2;  
explain analyze select * from t_ao_COLUMN_8k_9 where c2=1;  
create index idx_t_ao_COLUMN_8k_9 on t_ao_COLUMN_8k_9(c2);  
explain analyze select * from t_ao_COLUMN_8k_9 where c2=1;  
-- 压缩比9, 2M  
create table t_ao_COLUMN_2m_9(id int, c1 text, c2 int) with (appendonly=true, blocksize=2097152, ORIENTATION=COLUMN, COMPRESSTYPE=zlib, COMPRESSLEVEL=9, CHECKSUM=false);  
insert into t_ao_COLUMN_2m_9 select id, repeat(md5(random()::text), 128), random()*10000 from generate_series(1,10000000) t(id);  
explain analyze select c2,count(*) from t_ao_COLUMN_2m_9 group by c2;  
explain analyze select * from t_ao_COLUMN_2m_9 where c2=1;  
create index idx_t_ao_COLUMN_2m_9 on t_ao_COLUMN_2m_9(c2);  
explain analyze select * from t_ao_COLUMN_2m_9 where c2=1;  
select tablename, pg_size_pretty(pg_total_relation_size('postgres.'||tablename)) from pg_tables where schemaname='postgres';  
```  
```  
nohup psql -f ./test.sql > ./log 2>&1 &  
```  
## 结果对比  
存储形态 | 写入1000万耗时 | 空间占用 | 分组聚合 | 单值多行查询(走全表) | 建索引耗时 | 单值多行查询(走索引)    
---|---|---|---|---|---|---  
堆表 | 120秒 | 44GB | 1.8秒 | 1.5秒 | 13秒 | 37毫秒   
AO行存8K不压缩 | 81秒 | 1.3GB | 168毫秒 | 96毫秒 | 356毫秒 | 32毫秒   
AO行存2MB不压缩 | 101秒 | 39GB | 1.8秒 | 1.7秒 | 1.9秒 | 158毫秒   
AO行存8K压缩5级 | 80秒 | 557MB | 322毫秒 | 269毫秒 | 505毫秒 | 54毫秒   
AO行存2MB压缩5级 | 104秒 | 690MB | 1.6秒 | 1.5秒 | 1.7秒 | 163毫秒   
AO行存8K压缩9级 | 80秒 | 557MB | 331毫秒 | 247毫秒 | 500毫秒 | 58毫秒   
AO行存2MB压缩9级 | 106秒 | 690MB | 1.7秒 | 1.38秒 | 1.67秒 | 162毫秒   
AO列存8K不压缩 | 92.6秒 | 39GB | 362毫秒 | 622毫秒 | 877毫秒 | 36毫秒   
AO列存2MB不压缩 | 98.8秒 | 38GB | 140毫秒 | 1.62秒 | 1.8秒 | 176毫秒   
AO列存8K压缩5级 | 83秒 | 1.4GB | 125毫秒 | 2.2秒 | 2.5秒 | 58毫秒   
AO列存2MB压缩5级 | 104秒 | 593MB | 152毫秒 | 1.37秒 | 1.73秒 | 189毫秒   
AO列存8K压缩9级 | 83秒 | 1.4GB | 122毫秒 | 2.3秒 | 2.5秒 | 62毫秒   
AO列存2MB压缩9级 | 106秒 | 593MB | 136毫秒 | 1.5秒 | 1.77秒 | 181毫秒   
## 云端产品  
[阿里云 RDS PostgreSQL](https://www.aliyun.com/product/rds/postgresql)                    
[阿里云 HybridDB for PostgreSQL](https://www.aliyun.com/product/gpdb)               
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")