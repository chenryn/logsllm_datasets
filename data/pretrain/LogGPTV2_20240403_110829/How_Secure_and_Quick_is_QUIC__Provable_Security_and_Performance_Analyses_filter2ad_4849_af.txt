Lemma 7.4: For any efﬁcient adversary A there exists
an efﬁcient adversary B such that
Advips
QU IC
(A) ≤ (cid:10)Advauth
AEAD
(B) .
The detailed proofs of the Lemmas can be found in the
full version [16].
VIII. PERFORMANCE ISSUES AND MALICE
In this section we discuss how simple attacks on QUIC
packets during the handshake can introduce latencies, essen-
tially countering one of the primary goals of the protocol: 0-
RTT connection establishment. Persistent failure to establish
a QUIC session could further result in a fall-back to TCP,
defeating QUIC’s purpose of minimizing latency while se-
curing the transport layer. We discuss two types of attacks:
the ﬁrst exploits public, cachable information from either the
server or client side, the second exploits unprotected ﬁelds
on packets exchanged during the handshake protocol.
A. Replay Attacks
Once at least one client establishes a session with a par-
ticular server, an adversary could learn the public values of
that server’s scfg as well as the source-address token value
stk corresponding to that client during their respective
validity periods. The adversary could then replay the server’s
scfg to the client and the source-address token stk to the
server, misleading in either case the other party. To launch
both attacks an adversary would have to have access to the
communication channel.
Server Conﬁg Replay Attack. An attacker can replay
a server’s public scfg to any other clients sending initial
connection requests to that server while keeping the server
unaware of such requests from clients. Thus, these clients
establish an initial key without the server’s knowledge, and
when they attempt to communicate with the server, the
server would not be able to recognize them and would reject
their packets. While data conﬁdentiality is not affected,
the clients would experience additional latencies and waste
computational resources deriving an initial key.
Source-Address Token Replay Attack. An attacker can
replay the source-address token stk of a client
to the
server that issued that token on behalf of the client many
times to establish additional connections. This action would
cause the server to establish initial keys and even ﬁnal
forward-secure keys for each connection without the client’s
knowledge. Any further steps in the handshake would fail,
but an adversary could create a DoS attack on the server
by creating many connections on behalf of a many different
clients and possibly exhausting the server’s computational
and memory resources.
Ironically,
these attacks stem from parameters whose
main purpose was to minimize latency. These attacks are
more subtle than simply dropping QUIC handshake packets
because they mislead at least one party into “believing” that
everything is going well while causing it to waste time and
resources deriving an initial key.
Resolving these types of attacks seems to be infeasible
without reducing scfg and stk parameters to one-time
use, because as long as these parameters persist for more
than just a single connection, they could be used by the
adversary to fake multiple connections while they remain
valid. However, such restriction would prohibit QUIC from
ever achieving 0-RTT connection establishment.
B. Packet Manipulation Attacks
Not all ﬁelds of QUIC packets are protected against
adversarial manipulation. An attacker with access to the
communication channel used by a client
to establish a
session with a particular server could ﬂip bits of the un-
protected parameters such as the connection id cid and
the source-address token stk and lead the server and client
to derive different initial keys which would ultimately lead
connection establishment to fail. For a successful attack, the
adversary has to make sure that all parameters modiﬁed in
this way seem consistent across all sent and received packets
with respect to any single party but inconsistent from the
perspective of both parties participating in the handshake.
As shown in Section VII this type of attack does not
raise concerns over the conﬁdentiality and authenticity of
communication that is encrypted and authenticated under
the initial key, because even though the initial keys are
different, they are not known by the adversary. Note also
that if parties do not agree on an initial key, they cannot
establish a session key in QUIC because the ﬁnal server
hello packet is encrypted and authenticated under the initial
key. Therefore, these attacks also do not compromise the
conﬁdentiality and authenticity of communication encrypted
and authenticated under the ﬁnal key.
These packet manipulation attacks are smarter than just
dropping QUIC handshake packets because the client and
server progress through the handshake while having a
226226
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
mismatched conversation, resulting in the establishment of
inconsistent keys. This causes both parties to waste time
and resources deriving keys and other connection state. In
particular, the server performs all the processing required for
a successful connection, unlike in attacks that simply drop
QUIC handshake packets.
A simple strategy for mitigating this type of attack would
be to have the server sign all such modiﬁable ﬁelds in its
s reject and s hello packets (cid is unencrypted). However,
this would incur the cost of computing a digital signature
over all such modiﬁable parameters, which would in turn
open another opportunity for a DoS attack in which the ad-
versary, with IP spooﬁng, could send many initial connection
requests on behalf of as many clients as it desires.
IX. ATTACK RESULTS
In this section we discuss our implementations of the
attacks we identiﬁed against QUIC in Section VIII. We target
the Chromium implementation of QUIC5 in our attacks,
as this is the canonical implementation. Our attacks were
developed in python using the scapy library.6 We summarize
our attacks, their properties, and impacts in Table I.
REPLAY ATTACKS.
Server Conﬁg Replay Attack. To conduct this attack, an
attacker must ﬁrst collect a copy of the target server’s scfg.
This can be done either by actively establishing a connection
to the server or by passively listening for a client to attempt a
connection. In either case, the server’s scfg can be readily
collected from a full, 1-RTT QUIC connection handshake.
Once the attacker has scfg, he waits for the target client
to attempt to start a connection. When the attacker sees
a c hello message from the client, he can respond with
a spoofed s reject message using the collected scfg and
randomly generated stk and sno values. Similar s reject
messages are the proper response to a client that either does
not have a cached copy of the server’s scfg or has a
copy that is no longer valid. We assume that the attacker
is closer to the client than the server is so that the s reject
message reaches the client prior to the response from the
legitimate server. When the client receives this spoofed
s reject message, it promptly sends a new c hello message
using these new scfg, stk, and sno values.
When the real server receives this new c hello message, it
will attempt to validate it. However, the stk and sno values
were randomly generated by the attacker and so are almost
certain to fail the validation. In response to this failure, the
server generates a new s reject message containing scfg
and new stk and sno values.
This new s reject message provides the client with valid
stk and sno values so another c hello message could
5https://chromium.googlesource.com/chromium/src.git. We tested git
revision 50a133b51fa9c6a3dc2b82ce9fedcf074859cd13 from
October 1, 2014.
6http://www.secdev.org/projects/scapy/
correctly complete the connection. However, when testing
this attack, we found two further issues, the combination
of which will always result in the connection terminating
abnormally. The ﬁrst issue is that each QUIC packet includes
an entropy bit in its header and QUIC acknowledgment
frames include a hash of these bits along with a list of unseen
packets. The goal of this mechanism is to prevent Optimistic
Ack attacks [2]. In our case, an acknowledgment frame
will typically be included with the client’s second c hello
message acknowledging the spoofed s reject message. If the
entropy bit in the attacker’s spoofed s reject message does
not match the entropy bit in the server’s real response, then
the entropy hash in this acknowledgement will not validate
and the server will abruptly terminate the connection.
The second issue is that a single QUIC connection
provides multiple byte-streams for data transfer, and the
QUIC handshake takes place within a special byte-stream
reserved for connection establishment. This implies that
all
the c hello, s reject, and s hello messages we have
mentioned so far occur within the context of this byte-
stream and have offset and length attributes. As a result,
if the attacker’s s reject is not exactly the same size as the
server’s response, then this byte-stream is effectively broken.
Any further messages from the server will be at offsets either
above or below the client’s position in the byte-stream. These
messages will either be dropped or buffered forever. After
ten seconds the client will abruptly terminate the connection
because it is unable to complete the handshake.
In our tests, the combination of these two issues com-
pletely prevented the establishment of any QUIC connec-
tions. Connection attempts always terminated after either
half a second, in the case of an entropy bit mismatch, or
ten seconds, if the entropy bits matched, but the byte-stream
was corrupted. Our python implementation requires that the
attacker be about 20ms closer to the client than the server
is, in order to create an s reject message and have it reach
the client before the server’s legitimate response. However,
with an optimized C implementation, this requirement could
be signiﬁcantly reduced.
Source-Address Token Replay Attack. The stk token
is supposed to prevent packet spooﬁng by ensuring that a
connection request originates at the IP address claimed. The
stk is created by the server as part of the s reject message.
It contains the client’s IP address and the current time, both
encrypted. A client must present a valid stk in its c hello
message in order to perform a 0-RTT connection. However,
the stk token must be presented prior to encryption being
established. This means that any attacker who can sniff
network trafﬁc can collect stk tokens that can be used to
spoof connection requests from a speciﬁc host for a limited
period of time, by default 24 hours.
This attack operates by snifﬁng the network for s reject
messages from the target server. Each s reject message
contains a new stk being sent to some client. For each
227227
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
DISCOVERED ATTACKS AND THEIR PROPERTIES
Table I
Attack Name
Server Conﬁg Replay Attack
Source-Address Token Replay Attack
Type
Replay
Replay
Connection ID Manipulation Attack
Manipulation
Source-Address Token Manipulation Attack Manipulation
Crypto Stream Offset Attack
Other
On-Path
Trafﬁc Snifﬁng
IP Spooﬁng
Impact
No
No
Yes
Yes
No
Yes
Yes
No
No
Yes
Yes
Yes
No
No
Yes
Connection Failure
Server DoS
Connection Failure; server load
Connection Failure; server load
Connection Failure
new stk seen, our attacker grabs the stk, the scfg, and
the client’s IP address and starts repeatedly spooﬁng 0-RTT
connection attempts with random cids from this client.
When the target server receives these requests, they appear
to be legitimate 0-RTT connection requests. The stk will
validate because the stk is replayed from a legitimate
connection with an actual client at the spoofed IP address.
As a result, the server will create a new connection for
this request. This includes creating initial and forward-
secure encryption keys and sending an s hello message. At
this point, the server believes it has completed connection
establishment with the spoofed client.
In our tests, we used separate virtual machines for the
attacker and server. We found that a single attacker starting
with a single stk and sending packets at 200KB/sec was
able to completely overwhelm our test server. The 2.4 GHz
Intel(R) Xeon(R) CPU dedicated to our server was pegged at
100% utilization, and the operating system’s out-of-memory
killer eventually killed the server process after it exhausted
the 3GB of memory allocated to the server’s virtual machine.
It seems apparent that the QUIC server implementation in
Chromium has no limitation on the number of connections
that can be established from a single IP address. While we
do not believe that this is the server implementation that
Google uses in production, it is the only open-source QUIC
server available. Additionally, much of the QUIC code is a
library that we expect would be used by any production
QUIC server. Note, however, that even if a limit on the
number of connections from a single IP were added, this
attack can inﬂate the number of connections to the server
by this maximum number for every observed QUIC client.
MANIPULATION ATTACKS. Manipulation attacks subvert
key agreement by causing the client and server to agree on
different keys. This is done by modifying unprotected packet
ﬁelds that are used as input to the key derivation process,
in particular, the connection id cid or source-address token
stk. We develop attacks against both of these parameters.
Connection ID Manipulation Attack. In this attack, the
attacker is positioned on the path between the client and the
server and re-writes the cid such that the client and server
see different values. The handshake proceeds as normal, with
the client requesting the scfg, if it does not have a cached
copy, and then sending a c hello message. This c hello is
processed by the server and an s hello message sent in
response. At this point, the server believes the connection
has been successfully established. However, when the client
receives the s hello message sent by the server, it will fail to
decrypt. This is because the cid is an input to the encryption
key derivation process. Since the attacker changes the cid,
the client and server will compute different encryption keys.
Unfortunately, decryption failure is not a sign of catas-
trophic handshake failure because it can be caused by
reordering. In particular, packets encrypted with the forward-
secure key will fail to decrypt prior to the reception of the
s hello message, which may be delayed due to reordering.
As a result, packets failing decryption are buffered until
the handshake completes. With the bad s hello message
buffered, the client will eventually timeout and retransmit its
c hello message. This process will repeat until the client’s
10 second timer on connection establishment expires. At that
point the connection will be terminated.
An error message will be sent to the server when the
connection is terminated. However, this message will be
encrypted with the initial encryption key, and thus the server
will fail to decrypt it and will queue it for later decryption.
Since it cannot decrypt the error message, the server will
retain the connection state until the idle connection timeout
expires. This timeout defaults to 10 minutes.
Source-Address Token Manipulation Attack. The goal
of this attack is to prevent a client from establishing a
connection, either denying access to the desired application
or forcing the client to fall back to TCP/TLS. It requires an
attacker positioned on the path between the client and the
server who re-writes the stk such that the client and server
see different values. It is important that the server always see
the value it initially sent because it will validate stk later.
To the client, however, stk is simply an opaque byte-string.
Any attempted connection request will proceed as normal,
except that the attacker silently changes the stk values seen
by client and server. The client requests the scfg from the
server, which replies with the current scfg and an stk
value. The client then sends a full c hello to initiate the
connection. The server receives and processes this c hello
and sends an s hello message in response.
When the client receives this s hello message sent by the
server, it will fail to decrypt. This is because stk is an input
into the encryption key derivation process, and the attacker
has changed the stk value seen at the client. As a result,
228228
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
the client and server will compute different encryption keys.
However, as mentioned previously, a decryption failure
is not a sign of catastrophic handshake failure because this