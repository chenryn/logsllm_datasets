基于共享存储方案
基于磁盘复制方案
分布式协议
图8-1
MySQL高可用方案
，常见的有 Galera Cluster，PXC 和
MHA+多节点集群
主从或主主半同步复制
MHA+VIP
---
## Page 321
在 MHA 层面是可以支持这种模式的，当然还有其他的模式，比如使用 keepalive 等。我
有多种实现方案，一种是使用VIP，相对便捷一些，根据 IP 漂移来实现业务可持续访问，
务的可持续访问，因为主库宕机，从库接管，随之带来的就是IP的改动，在这个层面上，
值就会让这个工作的推动力大打折扣。
成本高，但是在行业里的认可度还是很高。当然基于这个工具我们是可以改写的，可以
MHA 尽管早就已经不维护，但是因为经历了广泛的实践考验，尽管是用 Perl写的，维护
复制关系的重建,而GTID 让整个切换过程更加高效,集群状态的检查效率都大大提高了。
是做了 binlog server 的改进。早期的版本中是主要使用偏移量的方式来完成数据的补齐和
有结果，高可用是业务的延续，而这里还没有正式启用。
数据完整性的一个初步方案吧，在这里还说不上是高可用，因为主库宕机，从库完全没
时候我们最好还是得考虑下备份成本，否则恢复成本和这些成本相比不是一个数量级的。
是万恶的根源，但是这种现象却似乎普遍存在，究其原因就是成本，当然在节省成本的
8.1.3
布式扩展。
需要做确认才可完成。
的基础上，应用端无须修改连接配置，需要测试DNS 的域名转发等策略。计划外切换，
发现）做一些补充和定制，保证consul服务的技术可控。
的方案。
同语言的客户端侧会有一些配置的差异。
向都可以采用，consul 作为一种通用的基础域名服务。
实现单机多实例，读写分离的域名配置)。
（4）同机房高可用方案的落地，需要和应用方对接程序端对域名的支持情况，在不
从MHA 的实现原理来说，它只能保证数据完整性，对于应用来说，还不能够实现业
在早期的版本里面是会大量使用 MHA 的，MHA 有几个版本，在后期的版本中主要
当然好歹得有个一主一从或者根据业务需要有个一主多从，这基本是大多数MySQL
（8）对已有的分布式方案，可以采用 MGR+中间件+consul的组合方案，实现读写分
（7）异机房高可用实现应用无缝切换；计划内切换，会有业务中断/延时，保证可控
（6）consul 业务 API的开发，对数据库层面的业务可持续性访问（服务注销，服务
（5）在已有高可用方案MHA 基础上平滑过渡和改进，在后续新业务尝试引入MGR
（3）对于consul 的整体定位不局限于集群环境，
最原始的终极方案就是不需要高可用，完全单机，而且无备份裸奔状态，这种状态
MySQL方向的高可用有什么迭代的思路呢，我来说说自己的理解。
MySQL 高可用的迭代方案思考
在单实例、集群、分布式中间件方
第8章MySQL 集群和高可用设计丨299
---
## Page 322
300丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
8.2.1MHA 原理和架构
部分是Manager；另外一部分是Node。
过从MHA设计的初衷来说，一主一从的架构对于数据完整性会有一些缺失的隐患。
并在一主多从的环境中实现数据补录和复制关系重建，在一主一从的环境下也是适用的，不
它在一主多从的架构设计下尤其有用，可以在 0~30秒内平滑的完成数据故障的自动切换，
8.2
是百花齐放，
然的技术趋势。
要从架构设计上做好应对策略，从这个角度来看，基于分布式架构的高可用是一种很自
设计，会让你在高可用设计和系统设计初期就明确服务或者服务器是不可靠的，那就需
下贯穿起来的，也就意味着数据库的高可用只是其中的一个重要环节，基于故障理念的
面的价值就能够大大发挥出来。
机房切换或者平滑升级等操作，这样对业务的影响最低，也是几乎无感知的，数据库层
暴露的是 DNS，而且可以支持跨机房的切换，那么我们都可以在业务低峰期在线完成跨
而且 MGR 是一种数据一致性的解决方案，相对来说是具有权威性和方向引导力的。
是值得投入一定的时间精力去做好高可用方案的，因为有了MGR，就可以不用MHA了
透明。在数据库方向使用 MGR 或者 InnoDB Cluster 就是一个趋势了，在 MGR 方向上还
版本的 MySQL，通过Paxos 将一致性和切换过程下推到数据库内部，使得对外访问更加
比较常见的是可以解决单机多实例的潜在瓶颈。
一种不错的解决方案，比如 zookeeper或者是使用 consul，都是一种行之有效的解决方法,
相比IP可读性更强，而且在网络层容易控制管理，在这个基础上配合使用服务发现就是
们暂且把这个阶段成为第一期吧，这个阶段实现了从无到有的过程。
MHA 是基于Perl 语言开发，目前最新的版本是0.57，它从设计上划分为两部分，
现在的高可用已经不局限于同机房内了，同城甚至两地三中心的高可用方案设计都
而以上的描述是一种相对传统的高可用方案，要让高可用走得更远，是需要自上而
在服务发现方面，做好了以后其实很多事情就可以做的更加平滑了，比如我们对外
MySQL社区关于分布式协议Raft和Paxos非常火，社区也推出了基于Paxos的MGR
，第二阶段就是跨机房的容灾了，这种情况下使用DNS 就是一种好的方式，因为域名
MySQL的高可用方案很多，MHA（Master High Availability）算是其中流行的方案之一
MHA 整体的架构设计如下图8-2所示。
MySQL高可用方案之MHA
，这些也是我们需要重点关注，并且投入到实践中的。
---
## Page 323
务端-客户端模式，那它们都有什么职责呢。
同学会有个疑问，既然已经是Manager节点，为什么还要Node节点？
Manager节点来接管。
Manager节点分管 50个节点，如果 Manager 节点出现故障，可以很顺利的交接给另外的
做兀余，实际上是做交叉互备，比如有100 套环境，两个MHA Manager 节点，可以每个
有了它可以调度多套环境，当然它自身也有单点，所以会考虑两套 MHA Manager 节点来
我们可以从上面的图来简单分析一下，Manager 节点和 Node 节点从架构设计上是服
Node 节点是客户端节点，在需要管理的 MySQL 环境中都需要统一部署。可能有的
客户端Node节点相关的脚本如下表8-4所示。
服务端 Manager节点相关的脚本如下表8-3所示。
我们来简单看下面的两个表格。
可以看到 Manager 节点和Node 节点是一对多，Manager节点是一个核心的调度器，
masterha_master_switch
masterha_master_monitor
masterha_check_status
masterha_check_repl
masterha_check_ssh
Manager
masterha_manger
相关脚本/函数
witch
nager
MHA node/manager
图 8-2MHA 整体架构设计
slave
maste
表8-3
slavet
控制故障转移（自动或者手动）
检查MHA的 SSH配置状况
检测 master 是否宕机
检测当前MHA运行状态
master
检查MySQL复制状况
启动MHA
-purge_relay_logs
slave2
作用
第8章MySQL 集群和高可用设计|301
slaves
_logs
---
## Page 324
302丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
业里有不少的方案来选择，常见的组合方式有：
来做，那样的话就不需要部署 Node 节点，也不需要配置 ssh 免密码登录了。
diff_relay_logs 要做的事情。
免密码的 ssh 登录方式，通过这种方式来保证数据的差异转储和补录，也就是上面 apply.
要做的事情，之后怎么补录到其他节点呢，其实MHA设计中会需要保证各个节点之间是
录，而这也是 MHA 保证数据一致性的核心。差异化的数据转储即是上面 save_binary_logs
明白了这些之后，其实我们脑洞一下，其实把 Node 节点的逻辑放到 Manager节点上
随着 consul 技术的推广，MHA 和 consul 的组合也擦出了一些火花，我们在后面会详
●MHA+VIP
MHA其实只是负责数据层面的高可用，所以通常需要和其他方案组合起来，目前行
理解了MHA设计的原理，我们来看看相关的架构方式。
通过以上信息可以很清晰地看到，MHA 的 Node 节点是承接了差异数据的转储和补
套两节点的MHA架构设计图如下图8-3所示。
MHA+Zookeeper
MHA+KeepAlive
so ean idde
Servers
Application
Application
purge_relay_logs
save_binary_logs
Servers
Application
相关脚本/函数
识别差异的中继日志事件并将其差异的事件应用于其他的 Slave
slavel
MHA Managerl
图8-3
表8-4
清除中继日志（不会阻塞SQL线程）
转储和复制 master 的二进制日志
master
作用
slave2
MHA Manager2
---
## Page 325
来尝试定制它，使得它更加满足于当前的业务需求。
更加全面，而换句话说，了解了原委，才能更好地掌握MHA，也才能看到更多的问题，
有一些差别。测试了多套环境，测试了多个特性，结合起来才会发现对于MHA 的考虑会
应用访问受到影响，那还是切吧。而且根据我们的测试，在MHA0.56和0.57里面还是
如果我们能加入应用服务器这个角色，而且应用服务器是可访问的，那么就不切；如果
分钟或者3分钟都不可访问，这个时候是切还是不切呢。这个时候信息还是相对较少，
致短时间不可访问，我们希望这个过程是不会做灾难切换的，但是如果时间过长了，有2
保持业务持续访问是重中之重。
所示的一些警告。所以各个层面都会有可能存在问题和异常，如何尽可能不影响业务，
一些场景需要考虑。
处不在，可喜的是在MHA中几乎都考虑到了。如果说得简单点，主要有下图8-4所示的
8.2.2
加复杂一些。
到无缝切换的高可用，如果是在这个基础上考虑中间件的方案，则数据访问的策略会更
就是统一通过VIP 的方式来访问。VIP 可以根据节点的数据状态在不同节点间漂移，达
来，一般来说都有以下类似的架构方式，假设架构模式为一主两从。对于应用访问来说，
细展开讲述。
举一个比较纠结的问题，如果 MHA Manager 节点到数据库主库的网络发生抖动，导
半同步插件对于MHA的影响
对于MHA方案，如果从多个维度来下钻会发现有很多需要注意的地方，所以问题无
当然 MHA+VIP 是一种相对成熟和经典的方案了，架构简单，容易落地，而近些年
所以上面的方案多多少少都需要考虑，如果用下面的图8-5来表示，就会大体有图中
一主多从切换优先级
剔除从节点
从节点IP调整
主节点IP调整
手工主从切换
添加从节点
如何系统的测试MHA
MHA版本差异
自定义MHA脚本
节点管理
e故障切换补充
其他影响
MHA需要考虑的场景
图8-4
第8章MySQL集群和高可用设计|303
网络延迟
服务不可用
网络抖动的切换
网络抖动的预防
主从网络延迟
从库应用延迟
从库服务器宕机
主库服务器岩机
重启数据库从库
重启数据库主库
数据库从库容机
数据库主库容机
---
## Page 326
304丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
相关的命令。
的方式来安装也可以。
8.2.3
一些日志的输出之后就提示你安装成功，在/usr/local/bin下面就会多几个 make_sandbox
cpan MySQL: :Sandbox
安装 sandbox 使用 cpan 来安装，非常简单，就是下面的命令：
然后使用make，make install的方式即可安装。
可以使用wget下载安装包如下：
另外一种方式是通过安装包的方式，可以通过编译安装完成。
-r-xr-xr-x
-r-xr-xr-x
Sandbox 的部署相对简单，如果有网络环境，直接 cpan一个命令即可。或者使用wget
-r-xr-xr-x
1．Sandbox部署安装
sandbox的功能，可以秒级搭建主从环境，而且会自动生成完整的管理脚本。
如果要说快速测试MHA，应该是在单机环境模拟了，这里要推荐使用sandbox。
wget
快速测试 MHA 的步骤
-xr-
Application
Servers
Application
Servers
Application
https://launchpad.net/mysql-sandbox/mysql-
root root
root root
root
root root
root 22260
X
13862
7643
8681 Apr 12 16:16 make_multiple_custom_sandbox
1970
slavel
MHA Managerl
Apr
Apr
Ap
图8-5
12
12
2
X
X
X
16:16
16:16
master
make_sandbox_from_url
make_sandbox_from_source
make
X
slave2
-sandbox-3/mysql-sandbox-3/
MHA Manager2
_from_installed
sandbox
---
## Page 327
的二进制目录5.7.17，就会默认创建一主两从的环境，如下：
数据文件都在这个目录下面。
次做一些批量管理类的任务，就非常快捷方便，这里的数据库安装目录是 msb_5_7_17,
所以就特别提示，需要你设定一个变量值，确认之后才可以。
的警告。主要就是向你确认是否确实要这么做，如果是一个线上环境，操作的风险很高，
即可。
# export SANDBOX_AS_ROOT=go
而要搭建主从环境，操作步骤简单，输出日志也很简单，
mysql [localhost] {msandbox}
owners.
-rw-r--r--
total48
[root@grtest sandboxes]# 1l
一套数据库环境就自动部署出来了，难得的是会自动生成对应的快捷脚本，如果下
export SANDBOX_AS_ROOT=go
我们就给这个变量赋一个值，比如 go，如下：
这个命令有一点需要说明，就是考虑到安全，默认使用 root 是敏感的，会抛出下面
# make_sandbox mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz
其他的启停命令也是如此，非常快捷方便。
Your MySQL
连接数据库，
-rwxr-xr-x
-rwxr-xr-x
-rwxr-xr-x
-rwxr-xr-x
drwxr-xr-x
比如我要部署一个 MySQL 数据库环境,我们给定一个二进制安装包,直接 make_sandbox
sel
rwxr-xr-x
-rwxr-xr-x
rwxr-xr-x
/use
只需要一个use 命令即可。
1
root