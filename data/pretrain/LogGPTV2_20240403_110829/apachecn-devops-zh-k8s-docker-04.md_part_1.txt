# 四、使用 KinD 部署 Kubernetes
学习 Kubernetes 的最大障碍之一是有足够的资源来创建一个集群进行测试或开发。像大多数信息技术专业人员一样，我们喜欢在笔记本电脑上安装一个 Kubernetes 集群，用于演示和测试产品。
通常，您可能需要运行多个集群来进行复杂的演示，例如多集群服务网格或测试`kubefed2`。这些场景需要多台服务器来创建必要的集群，而这又需要大量内存和虚拟机管理程序。
要对多集群场景进行全面测试，您需要为每个集群创建六个节点。如果使用虚拟机创建集群，则需要足够的资源来运行 6 台虚拟机。每台机器都有开销，包括磁盘空间、内存和 CPU 利用率。
但是，如果您可以仅使用容器创建一个集群呢？由于系统要求降低，使用容器而不是完整的虚拟机将使您能够运行额外的节点，通过一个命令在几分钟内创建和删除集群，编写集群创建脚本，并允许您在单个主机上运行多个集群。
使用容器运行 Kubernetes 集群为您提供了一个环境，由于资源限制，大多数人很难使用虚拟机或物理硬件进行部署。为了解释如何在本地仅使用容器运行集群，我们将使用 KinD 在 Docker 主机上创建一个 Kubernetes 集群。我们将部署一个多节点集群，您将在以后的章节中使用它来测试和部署诸如入口控制器、认证、RBAC、安全策略等组件。
在本章中，我们将涵盖以下主题:
*   介绍 Kubernetes 组件和对象
*   使用开发集群
*   正在安装 KinD
*   创建 KinD 群集
*   查看您的 KinD 群
*   为入口添加自定义负载平衡器
我们开始吧！
# 技术要求
本章有以下技术要求:
*   使用第 1 章 、*Docker 和容器要领*的步骤安装 Docker 主机
*   本书 GitHub 存储库中的安装脚本
您可以通过访问本书的 GitHub 资源库来访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
票据
我们认为有必要指出，本章将引用多个 Kubernetes 对象，其中一些没有太多上下文。 [*第 5 章*](05.html#_idTextAnchor150) *，Kubernetes Bootcamp* ，详细介绍了 Kubernetes 对象，其中许多都带有您可以用来理解它们的命令，因此我们认为在阅读相关内容时使用集群会很有用。
本章中涉及的大部分基本 Kubernetes 主题将在以后的章节中讨论，因此，如果有些主题在您阅读完本章后有点模糊，请不要害怕！它们将在后面的章节中详细讨论。
# 介绍 Kubernetes 斯组件和对象
由于这一章将提到常见的 Kubernetes 对象和组件，我们希望提供一个简短的术语表，您将会看到，并提供每个术语的简要定义，以提供上下文。
在 [*第五章*](05.html#_idTextAnchor150)*Kubernetes 训练营*中，我们将回顾 Kubernetes 的组件和包含在集群中的基本对象集。我们还将讨论如何使用 kubectl 可执行文件与集群进行交互:
![Table 4.1 – Kubernetes components and objects ](img/Table_4.1.jpg)
表 4.1–Kubernetes 组件和对象
虽然这些只是 Kubernetes 集群中可用的的几个对象，但它们是我们将在本章中提到的主要对象。了解每个对象是什么，并对它们的功能有基本的了解，将有助于您理解本章并部署一个 KinD 集群。
## 与集群交互
为了测试我们的 KinD 安装，我们将使用 kubectl 可执行文件与集群交互。我们将在 [*第 5 章*](05.html#_idTextAnchor150)*【Kubernetes boot camp】*中讨论 kubectl，但是由于我们将在本章中使用一些命令，所以我们希望在表格中提供我们将使用的命令，并解释这些选项提供了什么:
![Table 4.2 – Basic kubectl commands ](img/Table_4.2.jpg)
表 4.2–基本 kubectl 命令
在本章中，您将使用这些基本命令来部署我们将在本书中使用的集群部分。
接下来，我们将介绍开发集群的概念，然后重点介绍用于创建开发集群的最流行的工具之一:KinD。
# 利用发展集群
多年来，已经创建了各种工具来安装开发 Kubernetes 集群，允许管理员和开发人员在本地系统上执行测试。这些工具中的许多都适用于基本的 Kubernetes 测试，但是它们经常有一些限制，使得它们不太适合快速、高级的场景。
一些最常见的解决方案如下:
*   Docker 桌面
*   迷你库比
*   库比德姆
每种解决方案都有优点、局限性和用例。有些解决方案将您限制为运行控制平面和工作节点的单个节点。其他公司提供多节点支持，但需要额外资源来创建多个虚拟机。根据您的开发或测试需求，这些解决方案可能无法完全满足您的需求。
似乎每隔几周就会出现一个新的解决方案，而创建开发集群的最新选项之一是 Docker(**KinD**)Kubernetes SIG 中的一个 **Kubernetes 的项目。**
使用单个主机，KinD 允许您创建多个集群，每个集群可以有多个控制平面和工作节点。运行多个节点的能力允许使用另一个解决方案进行需要更多资源的高级测试。KinD 受到了社区的好评，在[https://github.com/kubernetes-sigs/kind](https://github.com/kubernetes-sigs/kind)有一个活跃的 Git 社区，还有一个 Slack 频道( *#kind* )。
注意
不要将 KinD 用作生产集群或将 KinD 集群暴露给互联网。虽然 KinD 集群提供了您在生产集群中想要的大多数相同功能，但它的**而不是**是为生产环境设计的。
## 为什么我们为这本书选择了 KinD？
当我们开始这本书的时候，我们希望包括理论，以及实践经验。KinD 允许我们提供脚本来加速和减速集群，而其他解决方案可以做类似的事情，KinD 可以在几分钟内创建一个新的多节点集群。我们希望将控制平面和工作节点分开，以提供一个更“真实”的集群。为了限制硬件要求并使 Ingress 更容易配置，我们将仅为本书中的练习创建一个双节点集群。
多节点集群可以在几分钟内创建，一旦测试完成，集群可以在几秒钟内拆除。能够向上旋转和向下旋转集群使 KinD 成为我们练习的完美平台。KinD 的要求很简单:您只需要一个正在运行的 Docker 守护程序来创建一个集群。这意味着它与大多数操作系统兼容，包括:
*   Linux 操作系统
*   macOS 运行 Docker 桌面
*   运行 Docker 桌面的窗口
*   Windows running WSL2
    重要说明
    在撰写本文时，KinD 并不支持 Chrome OS。
虽然 KinD 支持大多数操作系统，但我们选择了 Ubuntu 18.04 作为我们的主机系统。本书中的一些练习要求文件位于特定的目录中，选择一个单一的 Linux 版本有助于我们确保练习按照设计工作。如果您在家中无法访问 Ubuntu 服务器，您可以在云提供商(如 GCP)中创建虚拟机。谷歌提供 300 美元的信贷，这足以运行一台 Ubuntu 服务器几周。您可以在[https://cloud.google.com/free/](https://cloud.google.com/free/)查看 GCP 的免费选项。
现在，让我们解释一下 KinD 是如何工作的，以及基本的 KinD Kubernetes 集群是什么样子的。
## 使用基本的 KinD Kubernetes 集群
在高级别上，您可以将 KinD 集群看作是由一个**单个** Docker 容器组成，该容器运行一个控制平面节点和一个工作节点来创建 Kubernetes 集群。为了使部署变得简单和健壮，KinD 将每个 Kubernetes 对象捆绑成一个映像，称为节点映像。此节点映像包含创建单节点群集或多节点群集所需的所有 Kubernetes 组件。
集群运行后，可以使用 Docker 执行到控制平面节点容器中，并查看进程列表。在进程列表中，您将看到控制平面节点运行的标准 Kubernetes 组件:
![Figure 4.1 – Host process list showing control plane components ](img/Fig_4.1_B15514.jpg)
图 4.1–显示控制平面组件的主机进程列表
如果你要进入一个工作节点检查组件，你会看到所有标准的工作节点组件:
![Figure 4.2 – Host process list showing worker components ](img/Fig_4.2_B15514.jpg)
图 4.2–显示工人组件的主机进程列表
我们将涵盖第 5 章[](05.html#_idTextAnchor150)**、Kubernetes 斯训练营*中的标准 Kubernetes 斯组件，包括`kube-apiserver`、`kubelets`、`kube-proxy`、`kube-scheduler`和`kube-controller-manager`。*
 *除了标准的 Kubernetes 组件之外，这两个 KinD 节点还有一个不是大多数标准安装的一部分的附加组件:Kindnet。Kindnet 是安装基本 KinD 集群时包含的默认 CNI。虽然 Kindnet 是默认的 CNI，但您可以选择禁用它并使用替代方案，如 Calico。
现在已经看到了每个节点和 Kubernetes 组件，让我们来看看基本的 KinD 集群包含了什么。要显示完整的集群和所有正在运行的组件，我们可以运行`kubectl get pods --all-namespaces`命令。这将列出集群的所有运行组件，包括我们将在 [*第 5 章*](05.html#_idTextAnchor150)*Kubernetes boot camp*中讨论的基础组件。除了基本集群组件之外，您可能会注意到一个名为`local-path-storage`的名称空间中有一个正在运行的 pod，以及一个名为`local-path-provisioner`的 pod。该 pod 正在运行 KinD 包含的一个附加组件，为集群提供了自动配置`PersistentVolumeClaims`的能力:
![Figure 4.3 – kubectl get pods showing local-path-provisioner ](img/Fig_4.3_B15514.jpg)
图 4.3–kube CTL get pods 显示了本地路径提供程序
大多数开发集群产品都提供了类似的通用功能，人们需要这些功能来测试 Kubernetes 上的部署。它们都提供了一个 Kubernetes 控制平面和工作节点，并且大多数都包括一个默认的 CNI 网络。很少有产品能超越这一基本功能，随着 Kubernetes 工作负载的成熟，您可能会发现需要额外的插件，如`local-path-provisioner`。我们将在本书的一些练习中大量使用这个组件，因为没有它，我们将很难创建一些过程。
为什么要关心开发集群中的持久卷？大多数运行 Kubernetes 的生产集群将为开发人员提供持久存储。通常，存储将由基于数据块存储、S3 或 NFS 的存储系统支持。除了 NFS，大多数家庭实验室很少拥有运行全功能存储系统的资源。`local-path-provisioner`通过向您的 KinD 集群提供昂贵的存储解决方案所能提供的所有功能，消除了用户的这一限制。
在 [*第 5 章*](05.html#_idTextAnchor150) *中，Kubernetes Bootcamp* 中，我们将讨论几个属于 Kubernetes 存储的 API 对象。我们将讨论`CSIdrivers`、`CSInodes`和`StorageClass`物体。群集使用这些对象来提供对后端存储系统的访问。一旦安装和配置完毕，吊舱将使用`PersistentVolumes`和`PersistentVolumeClaims`对象消耗存储空间。理解存储对象很重要，但是当它们第一次发布时，大多数人很难测试它们，因为它们没有包含在大多数 Kubernetes 开发产品中。
KinD 认识到了这一限制，并选择捆绑来自 Rancher 的名为`local-path-provisioner`的项目，该项目基于 Kubernetes 1.10 中引入的 Kubernetes 本地持久卷。
您可能想知道为什么会有人需要一个附加组件，因为 Kubernetes 对本地主机持久卷有本地支持。虽然可能增加了对本地持久存储的支持，但是 Kubernetes 没有增加自动资源调配功能。CNCF 确实提供了自动资源调配器，但它必须作为单独的 Kubernetes 组件进行安装和配置。KinD 使自动资源调配变得容易，因为所有基本安装中都包含了资源调配器。
Rancher 的项目为 KinD 提供了以下内容:
*   创建聚氯乙烯请求时自动创建`PersistentVolumes`
*   一个默认的`StorageClass`命名标准
当自动供应器看到应用编程接口服务器收到一个`PersistentVolumeClaim`请求时，将创建一个`PersistentVolume`，pod 的聚氯乙烯将绑定到新创建的聚氯乙烯。
`local-path-provisioner`为 KinD 集群增加了一个功能，大大扩展了你可以运行的潜在测试场景。如果没有自动调配持久磁盘的能力，测试许多需要持久磁盘的预构建部署将是一项挑战。
在 Rancher 的帮助下，KinD 为您提供了一个解决方案，以便您可以试验动态卷、存储类和其他存储测试，否则将无法在数据中心之外运行。我们将在多个章节中使用置备程序为不同的部署提供卷。我们将指出这些来加强使用自动供应的优势。
## 了解节点映像
节点映像提供了在 Docker 容器中运行 Kubernetes 的魔力。这是一个令人印象深刻的成就，因为 Docker 依赖于一个`systemd`运行系统和大多数容器映像中没有的其他组件。
KinD 从一个基本映像开始，这个映像是团队开发的，包含了 Docker、Kubernetes 和`systemd`所需的一切。由于基础映像基于 Ubuntu 映像，团队删除了不需要的服务，并为 Docker 配置`systemd`。最后，使用基础映像创建节点映像。
小费
如果你想知道基础映像是如何创建的细节，可以在[https://GitHub . com/kubernetes-sigs/KinD/blob/control plane/img/base/Dockerfile](https://github.com/kubernetes-sigs/kind/blob/controlplane/img/base/Dockerfile)上查看 KinD 团队 GitHub 资源库中的 docker file。
## KinD 和 Docker 联网
由于 KinD 使用 Docker 作为容器引擎来运行集群节点，因此所有集群都受到与标准 Docker 容器相同的网络限制。在 [*第 3 章*](03.html#_idTextAnchor062) *【理解 Docker 网络】*中，我们复习了 Docker 网络和 Docker 默认网络栈的潜在限制。这些限制不会限制从本地主机测试您的 KinD Kubernetes 集群，但是当您想要从网络上的其他机器测试容器时，它们会导致问题。
除了 Docker 网络的考虑外，我们还必须考虑 Kubernetes 容器网络接口 T2(T3)CNI(T4)。官方说法是，KinD 团队将联网选项限制在了两个 CNI:KinD net 和 Calico。Kindnet 是他们唯一支持的 CNI，但是您可以选择禁用默认的 Kindnet 安装，这将创建一个没有安装 CNI 的集群。部署集群后，您可以部署 CNI 清单，如 Calico。
许多小型开发集群和企业集群的 Kubernetes 安装都使用 Tigera 的 CNI 印花布，因此，我们选择使用印花布作为我们在他的书中练习的 CNI。
### 追踪筑巢的玩偶
由于容器中容器的部署，运行像 KinD 这样的解决方案可能会令人困惑。我们把它和俄罗斯的嵌套娃娃进行比较，一个娃娃放在另一个娃娃里，然后放在另一个娃娃里，以此类推。当您开始为自己的集群使用 KinD 时，您可能会丢失主机、Docker 和 Kubernetes 节点之间的通信路径。为了保持理智，您应该对每个组件在哪里运行以及如何与每个组件交互有一个坚实的了解。
下图显示了组成 KinD 集群必须运行的三层。需要注意的是，每一层只能与其正上方的层交互。这意味着第 3 层的 KinD 容器只能看到第 2 层运行的 Docker 映像，Docker 映像可以看到第 1 层运行的 Linux 主机。如果您想从主机直接与在您的 KinD 集群中运行的容器通信，您需要通过 Docker 层，然后到第 3 层的 Kubernetes 容器。
理解这一点很重要，这样您就可以有效地使用 KinD 作为测试环境:
![Figure 4.4 – Host cannot communicate with KinD directly ](img/Fig_4.4_B15514.jpg)
图 4.4–主机无法直接与 KinD 通信
作为一个例子，考虑您想要部署一个 web 服务器到您的 Kubernetes 集群。您在 KinD 集群中部署了一个入口控制器，并且希望在 Docker 主机或网络上的不同工作站上使用 Chrome 测试该站点。您试图以端口 80 上的主机为目标，但在浏览器中收到一条失败消息。为什么会失败？
运行 web 服务器的 pod 位于第 3 层，无法从网络上的主机或机器接收直接流量。为了从您的主机访问 web 服务器，您需要将流量从 Docker 层转发到 KinD 层。记得在 [*第三章*](03.html#_idTextAnchor062) *【理解 Docker Networking】*中，我们解释了如何通过给容器添加监听端口来将容器暴露给网络。在我们的例子中，我们需要端口 80 和端口 443。当容器使用端口启动时，Docker 守护程序会将来自主机的传入流量转发到正在运行的 Docker 容器:
![Figure 4.5 – Host communicates with KinD via an Ingress controller ](img/Fig_4.5_B15514.jpg)
图 4.5–主机通过入口控制器与 KinD 通信
随着端口 80 和 443 暴露在 Docker 容器上，Docker 守护程序现在将接受 80 和 443 的传入请求，NGINX 入口控制器将接收流量。这是可行的，因为我们在 Docker 层的两个地方暴露了端口 80 和 443。通过使用主机端口 80 和 443 运行我们的 NGINX 容器，我们已经在 Kubernetes 层公开了它。这个安装过程将在本章后面解释，但是现在，您只需要了解基本流程。
在主机上，您请求一个在 Kubernetes 集群中具有入口规则的 web 服务器:
1.  该请求查看被请求的 IP 地址(在本例中是本地 IP 地址)。
2.  运行我们的 Kubernetes 节点的 Docker 容器正在监听端口 80 和 443 的 IP 地址，因此请求被接受并发送到运行的容器。
3.  您的 Kubernetes 集群中的 NGINX pod 已经配置为使用主机端口 80 和 443，因此流量被转发到 pod。
4.  用户通过 NGINX 入口控制器从网络服务器接收所请求的网页。
这有点令人困惑，但你越是使用 KinD 并与之互动，这就变得越容易。