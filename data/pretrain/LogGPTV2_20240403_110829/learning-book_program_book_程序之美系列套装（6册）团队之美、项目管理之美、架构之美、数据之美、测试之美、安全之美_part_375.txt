## Page 2150
对于原始版本Spider，我想说：我认为它很美，不是因为它设计得好
和优雅。它其实不够漂亮，以致并发人员都不好意思把它拿给别人
看。但是它其实是头老黄牛。它设计的可行性、可重用性和灵活性
都很高。工具天生就是面向实用的。就像一匹骏马或是一个老工
具，有一种自然美。
看这些工具的改进过程是一件非常有趣的事情，看它们如何被发
现，如何从一个简单的Spider演变为一个可以测试上万个页面、使崩
溃起死回生以及在页面上保持不同深度的测试的测试工具。我发现
这真的很神奇，原本因为某个人某个简单的需求而研发的工具，却
迅速演变为可以为无数人的各种需求服务的便利工具。
随着工具变得更流行，在新的方面上使用的人也越多，工具也就得
到了完善。测试会变得越来越自动化、越灵活。孤芳自赏不如与民
同乐，独乐乐不如众乐乐！
如此这般，岂不美哉。
致谢
特此感谢CarstenBook（akaTomcat）和BobClary对本章提供的技术
支持。
第23章在多机场景中测试网络服务
Isaac Clerencia
eBox中对高级测试工具的需求
从开始为发布eBox努力工作算起，我们已经开发了一年多的时间
了。每次我们发布新版本所面临的一个主要问题就是测试和质量保
证（QualityAssurance，QA）的流程。这个问题很快便成为eBox开发
人员眼中最漫长、最可怕的任务，尽管在此“殊荣”上它确实与文档
编写工作不相上下。
eBox平台是一个用来管理企业网络的复杂的开源网络工具。它集成
了一些诸如网络配置、防火墙或流量整形之类的自有服务，以及一
些像Squid、Samba或OpenLDAP等为人熟知的服务。它是以一套相互
2149
---
## Page 2151
独立的模块形式发布的，并且这些模块都需要彻底的测试，以防止
回归缺陷并验证每一个新特性都能按预期运行。
尽管eBox只是为这些服务提供了一个简化的接口，但随着新模块的
加人和对已有模块特性的测试需求的增加，测试用例数量的增长仍
然势不可挡。
我们面临的另一个问题是需要测试场景的复杂度。起初，大部分模
块需要的只是非常简单的场景，如代理服务器。代理服务器只需要
两台机器。一台是尝试发起浏览的客户端，另一台是要测试的被
eBox控制的代理服务器。
在开发流程的后期，新的模块出现的时候，如当OpenVPN开始出现
的时候，需要更复杂的场景。这个模块可以用来连接不同的办公室
或允许多个移动计算机用户连接到一个中心办公地点。为了在某种
设置下测试这个模块的功能，可能需要多达6台机器。测试人员不但
需要安装所有的机器，还需要把每一台机器配置成特定的角色。
这个配置过程不但漫长而且容易出错。因为它需要很多人工十预，
包括写配置文件和通过Web接口来架设eBox。即使场景设置好了，
决定测试是否成功通过同样不是件简单的事情。对于某些模块要使
用恰当的工具来决定测试结果，如对于流量整形模块。
除了所有这些问题之外，eBox还需要在多种UbuntuLinux和Debian
GNU/Linux的发布版本上进行测试。尽管eBox主要支持的是最新的
UbuntuLTS发行版（长期支持版），为了增加用户群我们也会为最新
的Ubuntu定期发行版和最新的Debian发行版提供软件包。此外，在确
保这些版本能正常运行的同时，我们也会在即将发行的版本上进行
测试，以确保我们的软件包在新发行版一问世的时候就能准备就
绪。把这些全加在一起就使得我们在某一时刻需要运行测试的操作
系统达到了5种。
最后一个问题是：尽管eBox团队的成员大部分在西班牙，但其中仍
有少数人生活在其他国家。这使得每个不同地点都拥有必需的测试
基础设施变得很困难。正因如此，能够执行远程测试成为一个重要
的需求。
可以说，部分地解决其中的一些问题相对容易。比如，使用基于预
定义映像的虚拟机来减轻安装机器的工作，或者编写脚本来自动化
配置工作。不过即使有了这些改进，测试eBox也仍然是一个无聊的
2150
---
## Page 2152
任务。我们想要达到的目标是一个优美的解决方案，使得员工可以
免去做那些艰巨的、重复性的工作。
改进eBox质量保证流程的ANSTE开发
我们已经决定要设法将我们的测试完全自动化。对此问题现有解决
方案的搜索令人失望，于是我们并发自已的开源测试套件。新产品
必须着力于满足我们自己的需求，但我们也想让它保持足够的灵活
性，以使其可以用来改进其他软件项目的测试流程。
由于那时我们已经对eBox进行过长时间的手动测试并且充分地认识
到了我们测试过程中的所有陷阱，所以需求是非常明确的。基于允
长的需求列表，我们预期会有一个很长的并发过程。幸运的是，将
之建立在其他开源软件之上使得我们能显著地加快这一过程，经过
一个人短短三个月的疯狂并发之后，我们已经有了一个可以用于测
试工作的工具。我们把它命名为高级网络服务测试环境（Advanced
Network Service Testing Environment,ANSTE）。
(http://public.warp.es/anste/)
ANSTE的第一个特性是能够很容易地定义复杂的网络场景。场景中
包含了给定测试套件所需创建的所有机器的信息。每台机器包括如
内存和硬盘空间大小以及其主机名之类的基本信息，也包括如网络
接口的数量和它们的配置以及到达其他网络的路由规则等更复杂的
信息。
在各种不同场景下定义每台机器的详细配置是一个艰巨的任务，此
外，构建操作系统映像是一个需要很多内存和硬盘空间的长期过
程。所以，为了避免过于频繁地构建严格需要的映像，场景框架能
够支持机器定义的继承，允许用户定义满足所需的多个基础映像，
并在以后主机能够从其继承。
一个基础映像定义包括一个用来引用此映像的名称和一个安装方
法。有一个用于安装基于Debian发行版的程序称为debootstrap。这个
程序可以在一个空磁盘上安装一个基础系统，然后从互联网下载所
需的软件包并把它们安装在这个新系统上。这种安装方法仅需要一
个参数：需要安装的发行版本的名称。
基础映像可以通过轻微的改动而复用于不同的场景中。场景中的每
台机器均声明使用何种基础映像。如果需要对映像做改动，则需要
2151
---
## Page 2153
指定要改动的参数的值。除了网络配置之外，定制一台机器最重要
的参数之一就是那台机器上需要什么软件包。你可以按照需要指定
随意数量，并且一旦机器安装好，它们就会通过系统软件包管理器
被安装在机器上。
ANSTE无法为每一个已安装操作系统的潜在可配置的小细节提供参
数，所以为了让机器可以进一步定制，你可以声明一些会在软件包
安装之前和之后运行的脚本。
这些网络场景在测试套件需要它们的时候会被自动部署。多个场景
会被转换为若干libvirt配置文件和一组脚本，这些脚本会在适当的时
候运行。libvirt是一个用红帽（RedHat）开发的软件库，它可以很
容易地和多种新型虚拟化系统配合。通过使用libvirt,ANSTE可以支
持诸如KVM或Xen等的多种后台。
对于每台被声明的机器，我们首选会使用虚拟化系统去创建并启动
一个虚拟机，且尝试尽可能地复制一个真实场景，包括机器间的网
络联系。ANSTE足够聪明到可以把虚拟机放在不同的虚拟网桥以模
拟机器间的物理隔离。这实际上使得ANSTE与依赖于网络厂播数据
包的守护进程能一起正常运行，如DHCP或Samba。
一旦一个场景被正确地设计出来，就可以开始在它上面运行测试
了。为了做到这一点，需要定义测试套件。测试套件只是一些文
件，而文件中则包含将在同一场景实例中顺序运行的一组测试。同
时运行几个测试套件是一个很常见的任务，所以我们可以用一个套
件文件来聚合若十测试套件。
值得注意的是，并非套件中的所有测试都是测试本身，其中一些更
带有工具的性质。这样说的原因是有个别测试可能在它们实际运行
之前需要某些预设的配置。这种配置通常是由其他被视为简单脚本
的测试来完成。你可以说这种需要预设配置的测试完全可以自已做
所有的事，但是不同的测试需要相同的配置步骤是很常见的，因此
将之隔离于不同的脚本中能带来更多的复用性。
测试套件中的测试会定义若干参数。这包括它们会在哪台机器上运
行以及一个包含实际测试的目录。这些目录可以包含两种类型的测
试：基于命令的测试和基于Selenium的测试。这两种类型也往往在一
个套件中被随意混合使用。
2152
---
## Page 2154
第一种基于命令的测试，只是去执行一个命名为此命令的已包含在
给定目录中的测试。如果命令返回零，认为测试成功通过，否则认
为测试失败。这些测试的使用案例实际有很多种。例如，它们可以
用来修改配置文本文件，重启涉及的守护进程，或运行任何其他命
令以做出功能检查。
基于Selenium的测试使用一个称为Selenium的网页应用程序测试框
架。这个框架用来通过网页界面执行配置步骤，并检查这些动作的
结果。使用Selenium的主要优点是它使得测试不仅能覆盖程序逻辑，
也能覆盖网页界面。
基于Selenium的测试是用Selenese来编写的，Selenese是一种利用
HTML表格来定义一系列执行动作的编程语言。首先读取一个在测试
目录中名为suite.html的文件，它用Selenese语言声明同为测试一部分
的其他文件。这些文件则包含诸如打开一个给定的URL，点击一个
链接，填写和发送表单，或检查特定字符串在响应中是否存在之类
的动作。
网络测试框架总是要处理不同机器之间的同步问题。例如，大多数
场景会涉及至少一台机器要等待另一台机器准备就绪的情况。其他
的框架选择复杂的解决方案，通常把工作并行地发送给每台机器，
然后依靠同步原语以协调不同机器上的执行。eBox则选择最简单的
方法：顺序执行这些测试，通过主控机（宿主机）明确地告诉每台
机器每次何时应该执行测试。
当机器被部署在一个场景中，它们会通知主控机自已的可用性，但
直到所有机器都成功启动之前并不会开始执行测试。如果必须要确
保一台机器在通知主控机之前已经完成某种动作，那么可以定义一
个安装后脚本来等待和检测是否这样一个动作已经发生。
由于测试以序列化的方式执行，如果我们想让两个动作并行执行，
就得编写测试来异步启动进程并让它们在后台运行。且测试编写者
还有责任编写另一个测试，以便在这些进程不再需要时停止它们。
一旦测试准备就绪，它们就可以被调度执行，而ANSTE会在测试完
成时通知测试人员。通过网页界面可以看到一份详尽的报告。该报
告包含了开发人员可能需要检查的测试结果的所有信息。首先提供
的是每一个测试的结果。此外，它也包含测试期间所有脚本执行的
输出日志，以及一份对于失败测试的浏览器视频录像。
2153
---
## Page 2155
eBox如何利用ANSTE
一旦ANSTE准备就绪，下一步就是将之引入我们的测试过程。购买
一台性能足够强劲的甚至可以部署最大场景的机器，并在其上安装
ANSTE。
模块开发人员开始为每一个需要检查的特性编写ANSTE测试。最初
测试只在新模块的beta版发行时才运行，但很快开发人员就想要利用
ANSTE在新特性刚一开发时就做初步的测试。
起初，我们使用先到先服务的方式，但是很快就明显地发现这并不
是一个最佳解决方案。开发人员需要手动协调以共享机器的访问，
并检查当前是否有其他人正在执行测试。
为了解决这个问题，我们开发了一个调度守护进程。ANSTE用户可
级，使得调度器可以让它们以适当的顺序执行。用户有不同的最高
优先级，因此发布经理可以用比普通并发人员更高的优先级来调度